/-
Copyright (c) 2022 Riccardo Brasca. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Riccardo Brasca
-/
import Mathlib.CategoryTheory.Abelian.Pseudoelements
import Mathlib.Algebra.Category.ModuleCat.Biproducts

#align_import pseudoelement from "leanprover-community/mathlib"@"328375597f2c0dd00522d9c2e5a33b6a6128feeb"

/-!
# Pseudoelements and pullbacks
Borceux claims in Proposition 1.9.5 that the pseudoelement constructed in
`CategoryTheory.Abelian.Pseudoelement.pseudo_pullback` is unique. We show here that this claim is
false. This means in particular that we cannot have an extensionality principle for pullbacks in
terms of pseudoelements.

## Implementation details
The construction, suggested in https://mathoverflow.net/a/419951/7845, is the following.
We work in the category of `ModuleCat ‚Ñ§` and we consider the special case of `‚Ñö ‚äû ‚Ñö` (that is the
pullback over the terminal object). We consider the pseudoelements associated to `x : ‚Ñö ‚ü∂ ‚Ñö ‚äû ‚Ñö`
given by `t ‚Ü¶ (t, 2 * t)` and `y : ‚Ñö ‚ü∂ ‚Ñö ‚äû ‚Ñö` given by `t ‚Ü¶ (t, t)`.

## Main results
* `Counterexample.exist_ne_and_fst_eq_fst_and_snd_eq_snd` : there are two
  pseudoelements `x y : ‚Ñö ‚äû ‚Ñö` such that `x ‚â† y`, `biprod.fst x = biprod.fst y` and
  `biprod.snd x = biprod.snd y`.

## References
* [F. Borceux, *Handbook of Categorical Algebra 2*][borceux-vol2]
-/


open CategoryTheory.Abelian CategoryTheory CategoryTheory.Limits ModuleCat LinearMap

namespace Counterexample

/-
Porting note: this file was rewritten to use categorical notation
such as `ùüô _` instead of `ofHom id`. This way, `simp` found it easier to prove things.
-/

noncomputable section

open CategoryTheory.Abelian.Pseudoelement

/-- `x` is given by `t ‚Ü¶ (t, 2 * t)`. -/
def x : Over (of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö) :=
  Over.mk (biprod.lift (ùüô _) (2 ‚Ä¢ ùüô _))
#align counterexample.x Counterexample.x

/-- `y` is given by `t ‚Ü¶ (t, t)`. -/
def y : Over (of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö) :=
  Over.mk (biprod.lift (ùüô _) (ùüô _))
#align counterexample.y Counterexample.y

/-- `biprod.fst ‚â´ x` is pseudoequal to `biprod.fst y`. -/
theorem fst_x_pseudo_eq_fst_y : PseudoEqual _ (app biprod.fst x) (app biprod.fst y) := by
  refine' ‚ü®of ‚Ñ§ ‚Ñö, ùüô _, ùüô _, inferInstance, _, _‚ü©
  ¬∑ exact (ModuleCat.epi_iff_surjective _).2 fun a => ‚ü®(a : ‚Ñö), rfl‚ü©
  ¬∑ dsimp [x, y]
    simp
#align counterexample.fst_x_pseudo_eq_fst_y Counterexample.fst_x_pseudo_eq_fst_y

/-- `biprod.snd ‚â´ x` is pseudoequal to `biprod.snd y`. -/
theorem snd_x_pseudo_eq_snd_y : PseudoEqual _ (app biprod.snd x) (app biprod.snd y) := by
  refine' ‚ü®of ‚Ñ§ ‚Ñö, ùüô _, 2 ‚Ä¢ ùüô _, inferInstance, _, _‚ü©
  ¬∑ refine' (ModuleCat.epi_iff_surjective _).2 fun a => ‚ü®(show ‚Ñö from a) / 2, _‚ü©
    simpa only [two_smul] using add_halves' (show ‚Ñö from a)
  ¬∑ dsimp [x, y]
    refine' ConcreteCategory.hom_ext _ _ fun a => _
    simp_rw [biprod.lift_snd]; rfl
#align counterexample.snd_x_pseudo_eq_snd_y Counterexample.snd_x_pseudo_eq_snd_y

-- Porting note: locally disable instance to avoid inferred/synthesized clash
attribute [-instance] AddCommGroup.intModule in
/-- `x` is not pseudoequal to `y`. -/
theorem x_not_pseudo_eq : ¬¨PseudoEqual _ x y := by
  intro h
  replace h := ModuleCat.eq_range_of_pseudoequal h
  dsimp [x, y] at h
  let œÜ := biprod.lift (ùüô (of ‚Ñ§ ‚Ñö)) (2 ‚Ä¢ ùüô (of ‚Ñ§ ‚Ñö))
  have mem_range := mem_range_self œÜ (1 : ‚Ñö)
  rw [h] at mem_range
  obtain ‚ü®a, ha‚ü© := mem_range
  erw [‚Üê ModuleCat.id_apply (œÜ (1 : ‚Ñö)), ‚Üê biprod.total, ‚Üê LinearMap.comp_apply, ‚Üê comp_def,
    Preadditive.comp_add] at ha
  let œÄ‚ÇÅ := (biprod.fst : of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö ‚ü∂ _)
  have ha‚ÇÅ := congr_arg œÄ‚ÇÅ ha
    -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
  erw [‚Üê CategoryTheory.comp_apply, ‚Üê CategoryTheory.comp_apply] at ha‚ÇÅ
  simp only [BinaryBiproduct.bicone_fst, biprod.lift_fst, CategoryTheory.id_apply,
    biprod.lift_fst_assoc, Category.id_comp, biprod.lift_snd_assoc, Linear.smul_comp,
    Preadditive.add_comp, BinaryBicone.inl_fst, BinaryBicone.inr_fst, smul_zero, add_zero] at ha‚ÇÅ
  let œÄ‚ÇÇ := (biprod.snd : of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö ‚ü∂ _)
  have ha‚ÇÇ := congr_arg œÄ‚ÇÇ ha
    -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
  erw [‚Üê CategoryTheory.comp_apply, ‚Üê CategoryTheory.comp_apply] at ha‚ÇÇ
  simp only [BinaryBiproduct.bicone_snd, biprod.lift_snd, CategoryTheory.id_apply,
    biprod.lift_fst_assoc, Category.id_comp, biprod.lift_snd_assoc, Linear.smul_comp,
    Preadditive.add_comp, BinaryBicone.inl_snd, BinaryBicone.inr_snd, zero_add, two_smul] at ha‚ÇÇ
  erw [add_apply, CategoryTheory.id_apply] at ha‚ÇÇ
  subst ha‚ÇÅ
  simp only [self_eq_add_right] at ha‚ÇÇ
  exact one_ne_zero' ‚Ñö ha‚ÇÇ
#align counterexample.x_not_pseudo_eq Counterexample.x_not_pseudo_eq

attribute [local instance] Pseudoelement.setoid

open scoped Pseudoelement

/-- `biprod.fst ‚ü¶x‚üß = biprod.fst ‚ü¶y‚üß`. -/
theorem fst_mk'_x_eq_fst_mk'_y :
    (biprod.fst : of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö ‚ü∂ _) ‚ü¶x‚üß = (biprod.fst : of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö ‚ü∂ _) ‚ü¶y‚üß :=
  Quotient.eq.2 fst_x_pseudo_eq_fst_y
#align counterexample.fst_mk_x_eq_fst_mk_y Counterexample.fst_mk'_x_eq_fst_mk'_y

/-- `biprod.snd ‚ü¶x‚üß = biprod.snd ‚ü¶y‚üß`. -/
theorem snd_mk'_x_eq_snd_mk'_y :
    (biprod.snd : of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö ‚ü∂ _) ‚ü¶x‚üß = (biprod.snd : of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö ‚ü∂ _) ‚ü¶y‚üß :=
  Quotient.eq.2 snd_x_pseudo_eq_snd_y
#align counterexample.snd_mk_x_eq_snd_mk_y Counterexample.snd_mk'_x_eq_snd_mk'_y

-- Porting note: needs explicit type ascription `: Quotient <| Pseudoelement.setoid _`
--               for some reason the setoid instance isn't picked up automatically
--               despite the local instance ~20 lines up
/-- `‚ü¶x‚üß ‚â† ‚ü¶y‚üß`. -/
theorem mk'_x_ne_mk'_y : (‚ü¶x‚üß : Quotient <| Pseudoelement.setoid _) ‚â† ‚ü¶y‚üß :=
  fun h => x_not_pseudo_eq <| Quotient.eq'.1 h
#align counterexample.mk_x_ne_mk_y Counterexample.mk'_x_ne_mk'_y

/-- There are two pseudoelements `x y : ‚Ñö ‚äû ‚Ñö` such that `x ‚â† y`, `biprod.fst x = biprod.fst y` and
 `biprod.snd x = biprod.snd y`. -/
theorem exist_ne_and_fst_eq_fst_and_snd_eq_snd :
    ‚àÉ x y, -- Porting note: removed type ascription `: of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö`, it gave an error about
           -- `Type` not having zero morphisms. jmc: I don't understand where the error came from
      x ‚â† y ‚àß
        (biprod.fst : of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö ‚ü∂ _) x = (biprod.fst : of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö ‚ü∂ _) y ‚àß
          (biprod.snd : of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö ‚ü∂ _) x = (biprod.snd : of ‚Ñ§ ‚Ñö ‚äû of ‚Ñ§ ‚Ñö ‚ü∂ _) y :=
  ‚ü®‚ü¶x‚üß, ‚ü¶y‚üß, mk'_x_ne_mk'_y, fst_mk'_x_eq_fst_mk'_y, snd_mk'_x_eq_snd_mk'_y‚ü©
#align counterexample.exist_ne_and_fst_eq_fst_and_snd_eq_snd Counterexample.exist_ne_and_fst_eq_fst_and_snd_eq_snd

end

end Counterexample
