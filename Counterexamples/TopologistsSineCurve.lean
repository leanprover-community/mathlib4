/-
Copyright (c) 2025 Daniele Bolla. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Daniele Bolla, David Loeffler
-/
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse
import Mathlib.Topology.Connected.PathConnected

/-!
# The "topologist's sine curve" is connected but not path-connected

We give an example of a closed subset `T` of `‚Ñù √ó ‚Ñù` which is connected but not path-connected: the
closure of the set `{ (x, sin x‚Åª¬π) | x ‚àà Ioi 0 }`.

## Main results

* `TopologistsSineCurve.isConnected_T`: the set `T` is connected.
* `TopologistsSineCurve.not_isPathConnected_T`: the set `T` is not path-connected.

This formalization is part of the UniDistance Switzerland bachelor thesis of Daniele Bolla. A
similar result has also been independently formalized by Vlad Tsyrklevich
(https://leanprover.zulipchat.com/#narrow/channel/113489-new-members/topic/golf.20request.3A.20Topologist's.20sine.20curve).
-/

open Topology Filter Set Real

namespace TopologistsSineCurve

/-- The topologist's sine curve, i.e. the graph of `y = sin (x‚Åª¬π)` for `0 < x`. -/
def S : Set (‚Ñù √ó ‚Ñù) := (fun x ‚Ü¶ (x, sin x‚Åª¬π)) '' Ioi 0

/-- The vertical line segment `{ (0, y) | -1 ‚â§ y ‚â§ 1 }`, which is the set of limit points of `S`
not contained in `S` itself. -/
def Z : Set (‚Ñù √ó ‚Ñù) := (fun y ‚Ü¶ (0, y)) '' Icc (-1) 1

/-- The union of `S` and `Z` (which we will show is the closure of `S`). -/
def T : Set (‚Ñù √ó ‚Ñù) := S ‚à™ Z

/-- A sequence of `x`-values tending to 0 at which the sine curve has a given `y`-coordinate. -/
noncomputable def xSeq (y : ‚Ñù) (k : ‚Ñï) := 1 / (arcsin y + (k + 1) * (2 * œÄ))

lemma xSeq_pos (y : ‚Ñù) (k : ‚Ñï) : 0 < xSeq y k := by
  rw [xSeq, one_div_pos]
  nlinarith [pi_pos, neg_pi_div_two_le_arcsin y]

lemma sin_inv_xSeq {y : ‚Ñù} (hy : y ‚àà Icc (-1) 1) (k : ‚Ñï) : sin (xSeq y k)‚Åª¬π = y := by
  simpa [xSeq, -Nat.cast_add, ‚Üê Nat.cast_succ] using sin_arcsin' hy

lemma xSeq_tendsto (y : ‚Ñù) : Tendsto (xSeq y) atTop (ùìù 0) := by
  refine .comp (g := fun k : ‚Ñù ‚Ü¶ 1 / (arcsin y + (k + 1) * (2 * œÄ))) ?_ tendsto_natCast_atTop_atTop
  simp only [div_eq_mul_inv, show ùìù 0 = ùìù (1 * (0 : ‚Ñù)) by simp]
  refine (tendsto_inv_atTop_zero.comp <| tendsto_atTop_add_const_left _ _ ?_).const_mul _
  exact (tendsto_atTop_add_const_right _ _ tendsto_id).atTop_mul_const (by positivity)

/-!
## `T` is closed
-/
/-- The closure of the topologist's sine curve `S` is the set `T`. -/
lemma closure_S : closure S = T := by
  ext ‚ü®x, y‚ü©
  -- Use sequential characterization of closure.
  simp only [mem_closure_iff_seq_limit, Prod.tendsto_iff]
  constructor
  ¬∑ -- Show that if a sequence in `S` has a limit in `‚Ñù ^ 2`, the limit must be in `T`.
    rintro ‚ü®f, hf_mem, hf_lim‚ü©
    have x_nonneg : 0 ‚â§ x := by
      refine isClosed_Ici.mem_of_tendsto hf_lim.1 (.of_forall fun n ‚Ü¶ ?_)
      obtain ‚ü®y, hy‚ü© := hf_mem n
      simpa [‚Üê hy.2] using le_of_lt hy.1
    -- Case split on whether limit point `(x, y)` has `x = 0`.
    rcases x_nonneg.eq_or_lt with rfl | h
    ¬∑ -- If the limit has `x = 0`, show `y`-coord must be in `[-1, 1]` using closedness
      right
      simp only [Z, mem_image, Prod.mk.injEq, true_and, exists_eq_right]
      refine isClosed_Icc.mem_of_tendsto hf_lim.2 (.of_forall fun n ‚Ü¶ ?_)
      obtain ‚ü®y, hy‚ü© := hf_mem n
      simpa only [Function.comp_apply, ‚Üê hy.2] using sin_mem_Icc ..
    ¬∑ -- If the limit has `0 < x`, show `y`-coord must be `sin x‚Åª¬π` using continuity
      refine .inl ‚ü®x, h, ?_‚ü©
      simp only [Prod.mk.injEq, true_and]
      have : ContinuousAt (fun x ‚Ü¶ sin x‚Åª¬π) x :=
        continuous_sin.continuousAt.comp <| continuousAt_inv‚ÇÄ h.ne'
      refine tendsto_nhds_unique ?_ hf_lim.2
      convert this.tendsto.comp hf_lim.1 with n
      obtain ‚ü®y, hy‚ü© := hf_mem n
      simp [‚Üê hy.2]
  ¬∑ -- Show that every `p ‚àà T` is the limit of a sequence in `S`.
    rintro (hz | ‚ü®z, hz‚ü©)
    ¬∑ -- Point is in `S`: use constant sequence
      exact ‚ü®_, fun _ ‚Ü¶ hz, tendsto_const_nhds, tendsto_const_nhds‚ü©
    ¬∑ -- Point is in `Z`: use sequence from `xSeq`
      simp only [Prod.mk.injEq] at hz
      rcases hz with ‚ü®hz, ‚ü®rfl, rfl‚ü©‚ü©
      refine ‚ü®fun n ‚Ü¶ (xSeq z n, z), fun n ‚Ü¶ ‚ü®_, xSeq_pos z n, ?_‚ü©, xSeq_tendsto z,
        tendsto_const_nhds‚ü©
      simpa using sin_inv_xSeq hz n

lemma isClosed_T : IsClosed T := by simpa only [‚Üê closure_S] using isClosed_closure

/-!
## `T` is connected
-/
/-- `T` is connected, being the closure of the set `S` (which is obviously connected since it
is a continuous image of the positive real line). -/
theorem isConnected_T : IsConnected T := by
  rw [‚Üê closure_S]
  refine (isConnected_Ioi.image _ <| continuousOn_id.prodMk ?_).closure
  exact continuous_sin.comp_continuousOn <| continuousOn_inv‚ÇÄ.mono fun _ hx ‚Ü¶ hx.ne'

/-!
## `T` is not path-connected
-/

lemma zero_mem_T : (0, 0) ‚àà T := by
  refine .inr ‚ü®0, ‚ü®?_, ?_‚ü©, rfl‚ü© <;>
  linarith

/-- A point in the `body` of the topologist's sine curve. -/
noncomputable def w : ‚Ñù √ó ‚Ñù := (1, sin 1‚Åª¬π)

lemma w_mem_T : w ‚àà T := .inl ‚ü®1, ‚ü®zero_lt_one' ‚Ñù, rfl‚ü©‚ü©

private lemma norm_ge_abs_snd {a b : ‚Ñù} : |b| ‚â§ ‚Äñ(a, b)‚Äñ := by simp

private lemma exists_unitInterval_gt {t‚ÇÄ : unitInterval} (ht‚ÇÄ : t‚ÇÄ < 1) {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) :
    ‚àÉ t‚ÇÅ, t‚ÇÄ < t‚ÇÅ ‚àß dist t‚ÇÄ t‚ÇÅ < Œ¥ := by
  let s‚ÇÄ := (t‚ÇÄ : ‚Ñù) -- t‚ÇÄ is in unitInterval
  let s‚ÇÅ := min (s‚ÇÄ + Œ¥ / 2) 1
  have h_s‚ÇÄ_delta_pos : 0 ‚â§ s‚ÇÄ + Œ¥ / 2 := add_nonneg t‚ÇÄ.2.1 (by positivity)
  have hs‚ÇÅ : 0 ‚â§ s‚ÇÅ := le_min h_s‚ÇÄ_delta_pos zero_le_one
  have hs‚ÇÅ': s‚ÇÅ ‚â§ 1 := min_le_right ..
  refine ‚ü®‚ü®s‚ÇÅ, hs‚ÇÅ, hs‚ÇÅ'‚ü©, lt_min ((lt_add_iff_pos_right _).mpr (half_pos hŒ¥)) ht‚ÇÄ, ?_‚ü©
  have h_le : s‚ÇÅ ‚â§ s‚ÇÄ + Œ¥ / 2 := min_le_left _ _
  have h_ge : s‚ÇÄ ‚â§ s‚ÇÅ := le_min (by linarith) t‚ÇÄ.2.2
  rw [Subtype.dist_eq, dist_comm, dist_eq, abs_of_nonneg (by linarith)]
  linarith

private lemma mem_S_of_x_pos {p : ‚Ñù √ó ‚Ñù} (hx : 0 < p.1) (hT : p ‚àà T) : p.2 = sin (p.1)‚Åª¬π := by
  obtain ‚ü®x, -, hx‚ü© : p ‚àà S := by
    cases hT with
    | inl hT => trivial
    | inr hZ => obtain ‚ü®y, ‚ü®-, rfl‚ü©‚ü© := hZ; exact (lt_irrefl _ hx).elim
  simp [‚Üê hx]

/-- For any `0 < a` and any `y ‚àà Icc (-1) 1`, we can find `x ‚àà Ioc a 0` with `sin x‚Åª¬π = y`. -/
lemma exists_mem_Ioc_of_y {y : ‚Ñù} (hy : y ‚àà Icc (-1) 1) {a : ‚Ñù} (ha : 0 < a) :
    ‚àÉ x ‚àà Ioc 0 a, sin x‚Åª¬π = y := by
  obtain ‚ü®N, h_dist‚ü© := (Metric.tendsto_nhds.mp (xSeq_tendsto y) (a / 2) (by positivity)).exists
  refine ‚ü®xSeq y N, ‚ü®xSeq_pos y N, ?_‚ü©, sin_inv_xSeq hy _‚ü©
  rw [dist_eq, sub_zero, abs_of_pos (xSeq_pos _ N)] at h_dist
  linarith

/-- The set `T` is not path-connected. -/
theorem not_isPathConnected_T : ¬¨ IsPathConnected T := by
  -- **Step 1**:
  -- Assume for contradiction we have a path from `z = (0, 0)` to `w = (1, sin 1)`.
  -- Let t‚ÇÄ be the last time the path is on the y-axis. By continuity of the path, we
  -- can find a `Œ¥ > 0` such that for all `t ‚àà [t‚ÇÄ, t‚ÇÄ + Œ¥]`, we have `‚Äñp(t) - p(t‚ÇÄ)‚Äñ < 1`.
  intro h_pathConn
  replace h_pathConn := h_pathConn.joinedIn (0, 0) zero_mem_T w w_mem_T
  let p := h_pathConn.somePath
  have xcoord_pathContinuous : Continuous fun t ‚Ü¶ (p t).1 := continuous_fst.comp p.continuous
  let t‚ÇÄ : unitInterval := sSup {t | (p t).1 = 0}
  have h_pt‚ÇÄ_x : (p t‚ÇÄ).1 = 0 :=
    (isClosed_singleton.preimage xcoord_pathContinuous).sSup_mem ‚ü®0, by aesop‚ü©
  obtain ‚ü®Œ¥ , hŒ¥, ht‚ü© : ‚àÉ Œ¥, 0 < Œ¥ ‚àß ‚àÄ t, dist t t‚ÇÄ < Œ¥ ‚Üí dist (p t) (p t‚ÇÄ) < 1 :=
    Metric.eventually_nhds_iff.mp <| Metric.tendsto_nhds.mp (p.continuousAt t‚ÇÄ) _ one_pos
  -- **Step 2**:
  -- Choose a time t‚ÇÅ in (t‚ÇÄ, t‚ÇÄ + Œ¥) and let `a = x(p(t‚ÇÅ))`. Using the fact that every
  -- connected subset of `‚Ñù` is an interval, we have `[0, a] ‚äÇ x(p([t0, t1]))`.
  obtain ‚ü®t‚ÇÅ, ht‚ÇÅ‚ü© : ‚àÉ t‚ÇÅ, t‚ÇÄ < t‚ÇÅ ‚àß dist t‚ÇÄ t‚ÇÅ < Œ¥ := by
    refine exists_unitInterval_gt (lt_of_le_of_ne (unitInterval.le_one t‚ÇÄ) fun ht‚ÇÄ' ‚Ü¶ ?_) hŒ¥
    have w_x_path : (p 1).1 = 1 := by simp [w]
    have x_eq_zero : (p 1).1 = 0 := by rwa [ht‚ÇÄ'] at h_pt‚ÇÄ_x
    linarith
  let a := (p t‚ÇÅ).1
  have ha : 0 < a := by
    obtain ‚ü®x, hxI, hx_eq‚ü© : p t‚ÇÅ ‚àà S := by
      refine (h_pathConn.somePath_mem t‚ÇÅ).elim id fun ‚ü®y, hy‚ü© ‚Ü¶ ?_
      have : (p t‚ÇÅ).1 = 0 := by simp only [p, ‚Üê hy.2]
      exact ((show t‚ÇÅ ‚â§ t‚ÇÄ from le_sSup this).not_gt ht‚ÇÅ.1).elim
    simpa only [a, ‚Üê hx_eq] using hxI
  have intervalAZeroSubOfT‚ÇÄT‚ÇÅXcoord : Icc 0 a ‚äÜ (fun t ‚Ü¶ (p t).1) '' Icc t‚ÇÄ t‚ÇÅ :=
    (isPreconnected_Icc.image _ <| xcoord_pathContinuous.continuousOn).Icc_subset
      (show 0 ‚àà (fun t ‚Ü¶ (p t).1) '' Icc t‚ÇÄ t‚ÇÅ from ‚ü®t‚ÇÄ, ‚ü®le_rfl, ht‚ÇÅ.1.le‚ü©, ‚Äπ_‚Ä∫‚ü©)
      (show a ‚àà (fun t ‚Ü¶ (p t).1) '' Icc t‚ÇÄ t‚ÇÅ from ‚ü®t‚ÇÅ, ‚ü®ht‚ÇÅ.1.le, le_rfl‚ü©, rfl‚ü©)
  -- **Step 3**: For every `y ‚àà [-1, 1]`, there exists a `t` with `p t = y` and `dist t‚ÇÄ t < Œ¥`.
  have exists_close {y : ‚Ñù} (hy : y ‚àà Icc (-1) 1) : ‚àÉ t, dist t t‚ÇÄ < Œ¥ ‚àß (p t).2 = y := by
    -- first find a `t ‚àà [t‚ÇÄ, t‚ÇÅ]` with this property
    obtain ‚ü®x, hx, hx'‚ü© := exists_mem_Ioc_of_y hy ha
    obtain ‚ü®t, ht‚ü© : ‚àÉ t ‚àà Icc t‚ÇÄ t‚ÇÅ, (p t).1 = x := intervalAZeroSubOfT‚ÇÄT‚ÇÅXcoord ‚ü®hx.1.le, hx.2‚ü©
    have hp : (p t).2 = sin (p t).1‚Åª¬π := mem_S_of_x_pos (ht.2 ‚ñ∏ hx.1) (h_pathConn.somePath_mem t)
    refine ‚ü®t, ?_, by rw [‚Üê hx', hp, ht.2]‚ü©
    calc -- now show `t ‚àà Icc t‚ÇÄ t‚ÇÅ` implies `dist t t‚ÇÄ < Œ¥`
    dist t t‚ÇÄ ‚â§ dist t‚ÇÅ t‚ÇÄ := dist_right_le_of_mem_uIcc (Icc_subset_uIcc' ht.1)
    _ = dist t‚ÇÄ t‚ÇÅ := by rw [dist_comm]
    _ < Œ¥ := ht‚ÇÅ.2
  -- **Step 4**:
  -- Now the final contradiction: there are times within `Œ¥` of `t‚ÇÄ` with `p t = 1`, and with
  -- `p t = -1`; but both must have distance `< 1` from `p t‚ÇÄ`, contradicting the triangle
  -- inequality.
  obtain ‚ü®x‚ÇÅ, hx‚ÇÅ, h_pathx‚ÇÅ‚ü© : ‚àÉ x‚ÇÅ, dist x‚ÇÅ t‚ÇÄ < Œ¥ ‚àß (p x‚ÇÅ).2 = 1 := exists_close (by simp)
  obtain ‚ü®x‚ÇÇ, hx‚ÇÇ, h_pathx‚ÇÇ‚ü© : ‚àÉ x‚ÇÇ, dist x‚ÇÇ t‚ÇÄ < Œ¥ ‚àß (p x‚ÇÇ).2 = -1 := exists_close (by simp)
  have : dist (p x‚ÇÅ) (p x‚ÇÇ) < 2 := by
    refine (dist_triangle_right _ _ (p t‚ÇÄ)).trans_lt ?_
    exact (add_lt_add (ht _ hx‚ÇÅ) (ht _ hx‚ÇÇ)).trans_eq (by norm_num)
  have := norm_ge_abs_snd.trans_lt this
  rw [h_pathx‚ÇÅ, h_pathx‚ÇÇ, abs_of_nonneg (by norm_num)] at this
  linarith

end TopologistsSineCurve
