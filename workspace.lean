import Mathlib

/- Reference : https://www-users.cse.umn.edu/~arnold/502.s97/functional.pdf
-/

open scoped LinearMap InnerProduct

lemma adjoint_Invertible_of_Invertible {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤]
    [InnerProductSpace ‚Ñù Œ±] [InnerProductSpace ‚Ñù Œ≤] [CompleteSpace Œ±] [CompleteSpace Œ≤]
    (f : Œ± ‚ÜíL[‚Ñù] Œ≤) (h : f.IsInvertible) : (f‚Ä†).IsInvertible := by
  -- If $S=T^{-1}: Y \rightarrow X$ exists
  rcases h with ‚ü®g, hg‚ü©
  have eq1 := ContinuousLinearMap.adjoint_comp f g.symm.toContinuousLinearMap
  nth_rw 1 [‚Üê hg] at eq1
  simp at eq1
  have eq2 := ContinuousLinearMap.adjoint_comp g.symm.toContinuousLinearMap f
  nth_rw 1 [‚Üê hg] at eq2
  simp at eq2
  -- then $S T=I_X$ and $T S=I_Y$, so $T^* S^*=I_{X^*}$ and $S^* T^*=I_{Y^*}$
  -- which shows that $T^*$ is invertible.
  exact ContinuousLinearMap.IsInvertible.of_inverse (id (Eq.symm eq2)) (id (Eq.symm eq1))

/-- Theorem. Let $T: X \rightarrow Y$ be a bounded linear operator between Banach spaces.
Then $T$ is invertible iff $T^*$ is. -/
lemma adjoint_Invertible_iff_Invertible {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤]
    [InnerProductSpace ‚Ñù Œ±] [InnerProductSpace ‚Ñù Œ≤] [CompleteSpace Œ±] [CompleteSpace Œ≤]
    (f : Œ± ‚ÜíL[‚Ñù] Œ≤) : f.IsInvertible ‚Üî (f‚Ä†).IsInvertible := by
  constructor
  ¬∑ exact fun a => adjoint_Invertible_of_Invertible f a
  ¬∑ intro h
    simpa using adjoint_Invertible_of_Invertible (f‚Ä†) h

lemma eq_zero_of_inner_right {Œ± : Type*} [NormedAddCommGroup Œ±] [InnerProductSpace ‚Ñù Œ±] (x : Œ±) :
    x = 0 ‚Üî ‚àÄ (y : Œ±), inner ‚Ñù y x = 0 := by
  constructor
  ¬∑ simp_all
  ¬∑ exact fun h ‚Ü¶ Dense.eq_zero_of_inner_right (K := ‚ä§) (by simp) (fun v ‚Ü¶ h v)

lemma adjoint_range_ker_complement {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤]
    [InnerProductSpace ‚Ñù Œ±] [InnerProductSpace ‚Ñù Œ≤] [CompleteSpace Œ±] [CompleteSpace Œ≤]
    (A : Œ± ‚ÜíL[‚Ñù] Œ≤) : LinearMap.ker (A‚Ä†) = (LinearMap.range A)·óÆ := by
  exact Eq.symm (ContinuousLinearMap.orthogonal_range A)




lemma test {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤]
    [InnerProductSpace ‚Ñù Œ±] [InnerProductSpace ‚Ñù Œ≤] [CompleteSpace Œ±] [CompleteSpace Œ≤]
    (A : Œ± ‚ÜíL[‚Ñù] Œ≤) (Œ¥ : ‚Ñù) (h : ‚àÄ y : Œ≤, ‚Äñ(A‚Ä†) y‚Äñ ‚â• Œ¥ * ‚Äñy‚Äñ ) :
    closure (A '' (Metric.ball 0 1)) ‚äá Metric.ball 0 Œ¥ := by
  refine Set.compl_subset_compl.mp ?_
  intro y hy
  simp at hy
  sorry

lemma le_on_closure_of_lt {E : Type u_2} [TopologicalSpace E] {f : E ‚Üí ‚Ñù} (hf : Continuous f)
    {B : Set E} {s : ‚Ñù} (hb : ‚àÄ x ‚àà B, s < f x) : ‚àÄ x ‚àà closure B, s ‚â§ f x := by
  refine le_on_closure (f := fun x ‚Ü¶ s) ?_ continuousOn_const (Continuous.continuousOn hf)
  ¬∑ intro x hx
    simp
    linarith [hb x hx]

/-- Rudin 3.7 Theorem Suppose B is a convex, balanced, closed set in a locally convex space $X,
x_0 \in X$, but $x_0 \notin B$. Then there exists $\Lambda \in X^*$ such that $|\Lambda x| \leq 1$
for all $x \in B$, but $\Lambda x_0 > 1$.
-/
theorem RCLike.geometric_hahn_b.{u_1, u_2} {ùïú : Type u_1} {E : Type u_2} [TopologicalSpace E]
    [AddCommGroup E] [Module ‚Ñù E] [RCLike ùïú] [Module ùïú E] [IsScalarTower ‚Ñù ùïú E]
    [IsTopologicalAddGroup E] [ContinuousSMul ùïú E] [LocallyConvexSpace ‚Ñù E] {B : Set E}
    (hs‚ÇÅ : Convex ‚Ñù B) (hs‚ÇÇ : IsClosed B) (hs‚ÇÉ : Balanced ùïú B) (x‚ÇÄ : E) (hx : x‚ÇÄ ‚àâ B) :
    ‚àÉ (f : StrongDual ùïú E), (‚Äñ(f x‚ÇÄ)‚Äñ > 1) ‚àß ‚àÄ b ‚àà B, ‚Äñf b‚Äñ ‚â§ 1 := by
  /- proof. Since $B$ is closed and convex, we can apply (b) of Theorem 3.4, with $A= {x_0}$,
  to obtain $\Lambda_1 \in X^*$ such that $\Lambda_1 x_0=r e^{i \theta}$ lies outside the
  closure $K$ of $\Lambda_1(B)$. -/
  obtain ‚ü®f, u, v, h1, h2, h3‚ü© : ‚àÉ (f : StrongDual ùïú E) (u v : ‚Ñù),
      (‚àÄ a ‚àà ({x‚ÇÄ} : Set E), re (f a) < u) ‚àß u < v ‚àß ‚àÄ b ‚àà B, v < re (f b) :=
    RCLike.geometric_hahn_banach_compact_closed (t := B) (s := {x‚ÇÄ}) (convex_singleton x‚ÇÄ)
      isCompact_singleton hs‚ÇÅ hs‚ÇÇ (Set.disjoint_singleton_left.mpr hx)
  have : re (f x‚ÇÄ) < u := h1 x‚ÇÄ rfl
  have h3 : ‚àÄ z ‚àà f '' B, v < re z := fun z ‚ü®y, ‚ü®hy, eq‚ü©‚ü© ‚Ü¶ by
    rw [‚Üê eq]
    exact h3 y hy
  have : f x‚ÇÄ ‚àâ closure (f '' B) := fun h ‚Ü¶ by
    linarith [le_on_closure_of_lt continuous_re h3 (f x‚ÇÄ) h]
  /- Since $B$ is balanced, so is $K$.-/
  set K := closure (‚áëf '' B) with hk
  have Balanced_K : Balanced ùïú K := by
    refine Balanced.closure ?_
    intro a ha z ‚ü®w, ‚ü®‚ü®t, ht‚ü©, hw‚ü©‚ü©
    exact ‚ü®a ‚Ä¢ t, Balanced.smul_mem hs‚ÇÉ ha ht.1, by simp_all‚ü©
  /- Hence there exists $s, 0 < s < r$ , so that $|z| \leq s$ for all $z \in K$. -/
  set r := ‚Äñf x‚ÇÄ‚Äñ with hr
  have : ‚àÉ s, 0 < s ‚àß s < r ‚àß (‚àÄ z ‚àà K, ‚Äñz‚Äñ < s) := by
    set g : ùïú ‚Üí ‚Ñù := fun x ‚Ü¶ ‚Äñx‚Äñ with hg
    have : Continuous g := continuous_norm
    set s := sSup (g '' K) with hs
    have imp (x : ùïú) (hx : x ‚àà K) (h0 : ‚Äñx‚Äñ > 0) : ‚àÄ z : ùïú, 0 ‚â§ ‚Äñz‚Äñ ‚àß ‚Äñz‚Äñ ‚â§ ‚Äñx‚Äñ ‚Üí z ‚àà K := by
      intro z ‚ü®t1, t2‚ü©
      have ttt : ‚Äñz / x‚Äñ ‚â§ 1 := by calc
        _ = ‚Äñz‚Äñ / ‚Äñx‚Äñ := by simp
        _ ‚â§ _ := (div_le_one‚ÇÄ h0).mpr t2
      have ne : x ‚â† 0 := by
        by_contra! nh
        simp [nh] at h0
      simpa [ne] using balanced_iff_smul_mem.mp Balanced_K ttt hx
    have ffff: K ‚äÜ Metric.ball 0 r := by
      by_contra! nh
      obtain ‚ü®z, hz‚ü© : ‚àÉ z ‚àà K, z ‚àâ Metric.ball 0 r := by
        exact Set.not_subset.mp nh
      have := hz.2
      have : ‚Äñz‚Äñ ‚â• r := by
        by_contra! nh
        have : z ‚àà Metric.ball 0 r := by
          exact mem_ball_zero_iff.mpr nh
        contradiction
      -- have : r > 0 := by
      --   sorry
      -- have := imp z hz.1 (by linarith) z ‚ü®by linarith, by linarith‚ü©

      sorry
    have : IsClosed K := by
      exact isClosed_closure
    have : IsCompact K := by
      refine Metric.isCompact_of_isClosed_isBounded this ?_
      refine (Metric.isBounded_iff_subset_ball 0 (s := K)).mpr ?_
      use r
    have : sSup (g '' K) ‚àà g '' K := by
      apply IsCompact.sSup_mem ?_ ?_
      (expose_names; exact IsCompact.image this this_3)
      simp
      use 0
      sorry
    sorry
  sorry

/-
   The functional $\Lambda=s^{-1} e^{-i \theta} \Lambda_1$
  has the desired properties.
  -/
