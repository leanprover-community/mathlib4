import Mathlib

/- Reference : https://www-users.cse.umn.edu/~arnold/502.s97/functional.pdf
-/

open scoped LinearMap InnerProduct

lemma adjoint_Invertible_of_Invertible {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤]
    [InnerProductSpace ‚Ñù Œ±] [InnerProductSpace ‚Ñù Œ≤] [CompleteSpace Œ±] [CompleteSpace Œ≤]
    (f : Œ± ‚ÜíL[‚Ñù] Œ≤) (h : f.IsInvertible) : (f‚Ä†).IsInvertible := by
  -- If $S=T^{-1}: Y \rightarrow X$ exists
  rcases h with ‚ü®g, hg‚ü©
  have eq1 := ContinuousLinearMap.adjoint_comp f g.symm.toContinuousLinearMap
  nth_rw 1 [‚Üê hg] at eq1
  simp at eq1
  have eq2 := ContinuousLinearMap.adjoint_comp g.symm.toContinuousLinearMap f
  nth_rw 1 [‚Üê hg] at eq2
  simp at eq2
  -- then $S T=I_X$ and $T S=I_Y$, so $T^* S^*=I_{X^*}$ and $S^* T^*=I_{Y^*}$
  -- which shows that $T^*$ is invertible.
  exact ContinuousLinearMap.IsInvertible.of_inverse (id (Eq.symm eq2)) (id (Eq.symm eq1))

/-- Theorem. Let $T: X \rightarrow Y$ be a bounded linear operator between Banach spaces.
Then $T$ is invertible iff $T^*$ is. -/
lemma adjoint_Invertible_iff_Invertible {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤]
    [InnerProductSpace ‚Ñù Œ±] [InnerProductSpace ‚Ñù Œ≤] [CompleteSpace Œ±] [CompleteSpace Œ≤]
    (f : Œ± ‚ÜíL[‚Ñù] Œ≤) : f.IsInvertible ‚Üî (f‚Ä†).IsInvertible := by
  constructor
  ¬∑ exact fun a => adjoint_Invertible_of_Invertible f a
  ¬∑ intro h
    simpa using adjoint_Invertible_of_Invertible (f‚Ä†) h

lemma eq_zero_of_inner_right {Œ± : Type*} [NormedAddCommGroup Œ±] [InnerProductSpace ‚Ñù Œ±] (x : Œ±) :
    x = 0 ‚Üî ‚àÄ (y : Œ±), inner ‚Ñù y x = 0 := by
  constructor
  ¬∑ simp_all
  ¬∑ exact fun h ‚Ü¶ Dense.eq_zero_of_inner_right (K := ‚ä§) (by simp) (fun v ‚Ü¶ h v)

lemma adjoint_range_ker_complement {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤]
    [InnerProductSpace ‚Ñù Œ±] [InnerProductSpace ‚Ñù Œ≤] [CompleteSpace Œ±] [CompleteSpace Œ≤]
    (A : Œ± ‚ÜíL[‚Ñù] Œ≤) : LinearMap.ker (A‚Ä†) = (LinearMap.range A)·óÆ := by
  exact Eq.symm (ContinuousLinearMap.orthogonal_range A)




lemma test {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤]
    [InnerProductSpace ‚Ñù Œ±] [InnerProductSpace ‚Ñù Œ≤] [CompleteSpace Œ±] [CompleteSpace Œ≤]
    (A : Œ± ‚ÜíL[‚Ñù] Œ≤) (Œ¥ : ‚Ñù) (h : ‚àÄ y : Œ≤, ‚Äñ(A‚Ä†) y‚Äñ ‚â• Œ¥ * ‚Äñy‚Äñ ) :
    closure (A '' (Metric.ball 0 1)) ‚äá Metric.ball 0 Œ¥ := by
  refine Set.compl_subset_compl.mp ?_
  intro y hy
  simp at hy
  sorry

lemma ha {E : Type u_2} [TopologicalSpace E] (f : E ‚Üí ‚Ñù) (hf : Continuous f) (B : Set E) (s : ‚Ñù)
    (hb : ‚àÄ x ‚àà B, s < f x) : ‚àÄ x ‚àà closure B, s ‚â§ f x := by
  refine le_on_closure (f := fun x ‚Ü¶ s) ?_ continuousOn_const (Continuous.continuousOn hf)
  ¬∑ intro x hx
    simp
    linarith [hb x hx]

theorem RCLike.geometric_hahn_b.{u_1, u_2} {ùïú : Type u_1} {E : Type u_2} [TopologicalSpace E]
    [AddCommGroup E] [Module ‚Ñù E] [RCLike ùïú] [Module ùïú E] [IsScalarTower ‚Ñù ùïú E]
    [IsTopologicalAddGroup E] [ContinuousSMul ùïú E] [LocallyConvexSpace ‚Ñù E] {B : Set E}
    (hs‚ÇÅ : Convex ‚Ñù B) (hs‚ÇÇ : IsClosed B) (hs‚ÇÉ : Balanced ‚Ñù B) (x‚ÇÄ : E) (hx : x‚ÇÄ ‚àâ B) :
    ‚àÉ (f : StrongDual ùïú E), (‚Äñ(f x‚ÇÄ)‚Äñ > 1) ‚àß ‚àÄ b ‚àà B, ‚Äñf b‚Äñ ‚â§ 1 := by
  obtain ‚ü®f, u, v, ‚ü®h1, h2, h3‚ü©‚ü© : ‚àÉ (f : StrongDual ùïú E) (u v : ‚Ñù),
      (‚àÄ a ‚àà ({x‚ÇÄ} : Set E), re (f a) < u) ‚àß u < v ‚àß ‚àÄ b ‚àà B, v < re (f b) :=
    RCLike.geometric_hahn_banach_compact_closed (t := B) (s := {x‚ÇÄ}) (by simp) (by simp) hs‚ÇÅ hs‚ÇÇ
      (by simp [hx])
  have : re (f x‚ÇÄ) < u := h1 x‚ÇÄ (by simp)
  have h3 : ‚àÄ z ‚àà f '' B, v < re z := by
    rintro z ‚ü®y, ‚ü®hy, eq‚ü©‚ü©
    rw [‚Üê eq]
    exact h3 y hy
  have : f x‚ÇÄ ‚àâ closure (f '' B) := by
    intro h
    have : v ‚â§ re (f x‚ÇÄ) := ha (E := ùïú) (fun x ‚Ü¶ re x) continuous_re (f '' B) v h3 (f x‚ÇÄ) h
    linarith
  have : Balanced ‚Ñù (closure (f '' B)) := by
    refine Balanced.closure ?_
    intro a ha z ‚ü®w, ‚ü®‚ü®t, ht‚ü©, hw‚ü©‚ü©
    simp [‚Üê ht.2] at hw
    use a ‚Ä¢ t
    constructor
    ¬∑ exact Balanced.smul_mem hs‚ÇÉ ha ht.1
    simp [hw]
  set K := (closure (‚áëf '' B)) with hk
  set r := ‚Äñf x‚ÇÄ‚Äñ
  have : ‚àÉ s, 0 < s ‚àß s < r ‚àß (‚àÄ z ‚àà K, ‚Äñz‚Äñ < s) := by
    set g : ùïú ‚Üí ‚Ñù := fun x ‚Ü¶ ‚Äñx‚Äñ with hg
    have : Continuous g := continuous_norm
    set s := sSup (g '' K) with hs
    sorry
  sorry
