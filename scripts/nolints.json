[["docBlame", "AddGroupWithOne"],
 ["docBlame", "AddMonoidWithOne"],
 ["docBlame", "AndThen'"],
 ["docBlame", "AsFalse"],
 ["docBlame", "AsTrue"],
 ["docBlame", "Associative"],
 ["docBlame", "BinTree"],
 ["docBlame", "CommRing"],
 ["docBlame", "CommSemiring"],
 ["docBlame", "Commutative"],
 ["docBlame", "ExistsUnique"],
 ["docBlame", "GroupWithZero"],
 ["docBlame", "Implies"],
 ["docBlame", "IsDecEq"],
 ["docBlame", "IsDecRefl"],
 ["docBlame", "IsIdempotent"],
 ["docBlame", "IsLeftCancel"],
 ["docBlame", "IsRightCancel"],
 ["docBlame", "IsSymmOp"],
 ["docBlame", "LeftCancelative"],
 ["docBlame", "LeftCommutative"],
 ["docBlame", "LeftDistributive"],
 ["docBlame", "LeftIdentity"],
 ["docBlame", "MonadWriter"],
 ["docBlame", "MonoidWithZero"],
 ["docBlame", "NonContradictory"],
 ["docBlame", "One"],
 ["docBlame", "RightCancelative"],
 ["docBlame", "RightCommutative"],
 ["docBlame", "RightDistributive"],
 ["docBlame", "RightIdentity"],
 ["docBlame", "RightInverse"],
 ["docBlame", "Ring"],
 ["docBlame", "Semiring"],
 ["docBlame", "Set"],
 ["docBlame", "UFModel"],
 ["docBlame", "UFNode"],
 ["docBlame", "UnionFind"],
 ["docBlame", "Writer"],
 ["docBlame", "WriterT"],
 ["docBlame", "Xor'"],
 ["docBlame", "Zero"],
 ["docBlame", "bit0"],
 ["docBlame", "bit1"],
 ["docBlame", "classical"],
 ["docBlame", "command_Lemma___"],
 ["docBlame", "decidable_eq_of_bool_pred"],
 ["docBlame", "elabVariables"],
 ["docBlame", "evalIntrov"],
 ["docBlame", "instHNeg"],
 ["docBlame", "setOf"],
 ["docBlame", "tacticMatch_target_"],
 ["docBlame", "tacticTransitivity__"],
 ["docBlame", "«term_+ᵥ_»"],
 ["docBlame", "«term_-ᵥ_»"],
 ["docBlame", "«term_ˣ»"],
 ["docBlame", "«term_•_»"],
 ["docBlame", "«term_≃_»"],
 ["docBlame", "termℕ"],
 ["docBlame", "«term∃!_,_»"],
 ["docBlame", "timeCmd"],
 ["docBlame", "to_additive"],
 ["docBlame", "to_additive_ignore_args"],
 ["docBlame", "to_additive_relevant_arg"],
 ["docBlame", "to_additive_reorder"],
 ["docBlame", "variables"],
 ["docBlame", "AddCancelCommMonoid.add_comm"],
 ["docBlame", "AddCancelCommMonoid.toCancelMonoid"],
 ["docBlame", "AddCancelMonoid.add_right_cancel"],
 ["docBlame", "AddCommGroup.add_comm"],
 ["docBlame", "AddCommGroup.toCancelCommMonoid"],
 ["docBlame", "AddCommGroup.toDivisionCommMonoid"],
 ["docBlame", "AddCommMonoid.add_comm"],
 ["docBlame", "AddCommSemigroup.add_comm"],
 ["docBlame", "AddGroup.add_left_neg"],
 ["docBlame", "AddGroupWithOne.add_left_neg"],
 ["docBlame", "AddGroupWithOne.intCast"],
 ["docBlame", "AddGroupWithOne.intCast_negSucc"],
 ["docBlame", "AddGroupWithOne.intCast_ofNat"],
 ["docBlame", "AddGroupWithOne.sub_eq_add_neg"],
 ["docBlame", "AddGroupWithOne.zsmul"],
 ["docBlame", "AddGroupWithOne.zsmul_neg'"],
 ["docBlame", "AddGroupWithOne.zsmul_succ'"],
 ["docBlame", "AddGroupWithOne.zsmul_zero'"],
 ["docBlame", "AddLeftCancelMonoid.add_zero"],
 ["docBlame", "AddLeftCancelMonoid.nsmul"],
 ["docBlame", "AddLeftCancelMonoid.nsmul_succ'"],
 ["docBlame", "AddLeftCancelMonoid.nsmul_zero'"],
 ["docBlame", "AddLeftCancelMonoid.zero_add"],
 ["docBlame", "AddLeftCancelSemigroup.add_left_cancel"],
 ["docBlame", "AddMonoid.add_zero"],
 ["docBlame", "AddMonoid.hasSmulNat"],
 ["docBlame", "AddMonoid.nsmul"],
 ["docBlame", "AddMonoid.nsmul_succ'"],
 ["docBlame", "AddMonoid.nsmul_zero'"],
 ["docBlame", "AddMonoid.zero_add"],
 ["docBlame", "AddMonoidWithOne.natCast"],
 ["docBlame", "AddMonoidWithOne.natCast_succ"],
 ["docBlame", "AddMonoidWithOne.natCast_zero"],
 ["docBlame", "AddRightCancelMonoid.add_zero"],
 ["docBlame", "AddRightCancelMonoid.nsmul"],
 ["docBlame", "AddRightCancelMonoid.nsmul_succ'"],
 ["docBlame", "AddRightCancelMonoid.nsmul_zero'"],
 ["docBlame", "AddRightCancelMonoid.zero_add"],
 ["docBlame", "AddRightCancelSemigroup.add_right_cancel"],
 ["docBlame", "AddSemigroup.add_assoc"],
 ["docBlame", "AddUnits.neg"],
 ["docBlame", "AddUnits.neg_val"],
 ["docBlame", "AddUnits.val"],
 ["docBlame", "AddUnits.val_neg"],
 ["docBlame", "AddZeroClass.add_zero"],
 ["docBlame", "AddZeroClass.zero_add"],
 ["docBlame", "AndThen'.andthen"],
 ["docBlame", "BinaryHeap.arr"],
 ["docBlame", "BoundedRandom.randomR"],
 ["docBlame", "ByteSlice.arr"],
 ["docBlame", "ByteSlice.len"],
 ["docBlame", "ByteSlice.off"],
 ["docBlame", "ByteSliceT.arr"],
 ["docBlame", "ByteSliceT.off"],
 ["docBlame", "CancelCommMonoid.mul_comm"],
 ["docBlame", "CancelMonoid.mul_right_cancel"],
 ["docBlame", "Combinator.I"],
 ["docBlame", "Combinator.K"],
 ["docBlame", "Combinator.S"],
 ["docBlame", "CommGroup.mul_comm"],
 ["docBlame", "CommMonoid.mul_comm"],
 ["docBlame", "CommRing.mul_comm"],
 ["docBlame", "CommSemigroup.mul_comm"],
 ["docBlame", "CommSemiring.mul_comm"],
 ["docBlame", "Decidable.by_cases"],
 ["docBlame", "Decidable.recOn_false"],
 ["docBlame", "Decidable.recOn_true"],
 ["docBlame", "Distrib.left_distrib"],
 ["docBlame", "Distrib.right_distrib"],
 ["docBlame", "DivInvMonoid.div_eq_mul_inv"],
 ["docBlame", "DivInvMonoid.zpow"],
 ["docBlame", "DivInvMonoid.zpow_neg'"],
 ["docBlame", "DivInvMonoid.zpow_succ'"],
 ["docBlame", "DivInvMonoid.zpow_zero'"],
 ["docBlame", "DivInvOneMonoid.inv_one"],
 ["docBlame", "DivisionCommMonoid.mul_comm"],
 ["docBlame", "DivisionMonoid.inv_eq_of_mul"],
 ["docBlame", "DivisionMonoid.inv_inv"],
 ["docBlame", "DivisionMonoid.mul_inv_rev"],
 ["docBlame", "Equiv.invFun"],
 ["docBlame", "Equiv.left_inv"],
 ["docBlame", "Equiv.refl"],
 ["docBlame", "Equiv.right_inv"],
 ["docBlame", "Equiv.symm"],
 ["docBlame", "Equiv.toFun"],
 ["docBlame", "Equiv.trans"],
 ["docBlame", "Fin.addOverflows?"],
 ["docBlame", "Fin.checkedAdd"],
 ["docBlame", "Fin.checkedMul"],
 ["docBlame", "Fin.checkedSub"],
 ["docBlame", "Fin.mulOverflows?"],
 ["docBlame", "Fin.ofInt'"],
 ["docBlame", "Fin.ofInt''"],
 ["docBlame", "Fin.overflowingAdd"],
 ["docBlame", "Fin.overflowingMul"],
 ["docBlame", "Fin.subUnderflows?"],
 ["docBlame", "Fin.underflowingSub"],
 ["docBlame", "Function.app"],
 ["docBlame", "Function.combine"],
 ["docBlame", "Function.comp_left"],
 ["docBlame", "Function.comp_right"],
 ["docBlame", "Function.swap"],
 ["docBlame", "Function.«term_∘₂_»"],
 ["docBlame", "Function.«term↿_»"],
 ["docBlame", "Group.mul_left_inv"],
 ["docBlame", "GroupWithZero.exists_pair_ne"],
 ["docBlame", "GroupWithZero.inv_zero"],
 ["docBlame", "GroupWithZero.mul_inv_cancel"],
 ["docBlame", "GroupWithZero.mul_zero"],
 ["docBlame", "GroupWithZero.zero_mul"],
 ["docBlame", "HasInvolutiveInv.inv_inv"],
 ["docBlame", "HasInvolutiveNeg.neg_neg"],
 ["docBlame", "HasSmul.smul"],
 ["docBlame", "HasVadd.vadd"],
 ["docBlame", "HasVsub.vsub"],
 ["docBlame", "IO.runRandWith"],
 ["docBlame", "Int.cast"],
 ["docBlame", "Int.termℤ"],
 ["docBlame", "InvOneClass.inv_one"],
 ["docBlame", "IsAntisymm.antisymm"],
 ["docBlame", "IsAssociative.assoc"],
 ["docBlame", "IsAsymm.asymm"],
 ["docBlame", "IsCommutative.comm"],
 ["docBlame", "IsEmpty.false"],
 ["docBlame", "IsIdempotent.idempotent"],
 ["docBlame", "IsIncompTrans.incomp_trans"],
 ["docBlame", "IsIrrefl.irrefl"],
 ["docBlame", "IsLeftCancel.left_cancel"],
 ["docBlame", "IsLeftId.left_id"],
 ["docBlame", "IsRefl.refl"],
 ["docBlame", "IsRightCancel.right_cancel"],
 ["docBlame", "IsRightId.right_id"],
 ["docBlame", "IsSymm.symm"],
 ["docBlame", "IsSymmOp.symm_op"],
 ["docBlame", "IsTotal.total"],
 ["docBlame", "IsTrans.trans"],
 ["docBlame", "IsTrichotomous.trichotomous"],
 ["docBlame", "Lean.ExportM"],
 ["docBlame", "LeftCancelMonoid.mul_one"],
 ["docBlame", "LeftCancelMonoid.npow"],
 ["docBlame", "LeftCancelMonoid.npow_succ'"],
 ["docBlame", "LeftCancelMonoid.npow_zero'"],
 ["docBlame", "LeftCancelMonoid.one_mul"],
 ["docBlame", "LeftCancelSemigroup.mul_left_cancel"],
 ["docBlame", "List.card"],
 ["docBlame", "List.equiv"],
 ["docBlame", "List.inj_on"],
 ["docBlame", "List.remove"],
 ["docBlame", "List.«term_~_»"],
 ["docBlame", "MonadWriter.listen"],
 ["docBlame", "MonadWriter.pass"],
 ["docBlame", "MonadWriter.tell"],
 ["docBlame", "Monoid.mul_one"],
 ["docBlame", "Monoid.npow"],
 ["docBlame", "Monoid.npow_succ'"],
 ["docBlame", "Monoid.npow_zero'"],
 ["docBlame", "Monoid.one_mul"],
 ["docBlame", "MonoidWithZero.mul_zero"],
 ["docBlame", "MonoidWithZero.zero_mul"],
 ["docBlame", "MulOneClass.mul_one"],
 ["docBlame", "MulOneClass.one_mul"],
 ["docBlame", "MulZeroClass.mul_zero"],
 ["docBlame", "MulZeroClass.zero_mul"],
 ["docBlame", "MulZeroOneClass.mul_zero"],
 ["docBlame", "MulZeroOneClass.zero_mul"],
 ["docBlame", "Nat.AtLeastTwo"],
 ["docBlame", "Nat.case_strong_rec_on"],
 ["docBlame", "Nat.cast"],
 ["docBlame", "Nat.discriminate"],
 ["docBlame", "Nat.find_x"],
 ["docBlame", "Nat.iterate"],
 ["docBlame", "Nat.lt_by_cases"],
 ["docBlame", "Nat.lt_ge_by_cases"],
 ["docBlame", "Nat.prio"],
 ["docBlame", "Nat.strong_rec_on"],
 ["docBlame", "Nat.sub_induction"],
 ["docBlame", "Nat.«term_^[_]»"],
 ["docBlame", "Nat.two_step_induction"],
 ["docBlame", "NegZeroClass.neg_zero"],
 ["docBlame", "NonAssocSemiring.mul_one"],
 ["docBlame", "NonAssocSemiring.one_mul"],
 ["docBlame", "NonUnitalNonAssocSemiring.left_distrib"],
 ["docBlame", "NonUnitalNonAssocSemiring.mul_zero"],
 ["docBlame", "NonUnitalNonAssocSemiring.natCast"],
 ["docBlame", "NonUnitalNonAssocSemiring.natCast_succ"],
 ["docBlame", "NonUnitalNonAssocSemiring.natCast_zero"],
 ["docBlame", "NonUnitalNonAssocSemiring.right_distrib"],
 ["docBlame", "NonUnitalNonAssocSemiring.zero_mul"],
 ["docBlame", "NonUnitalSemiring.mul_assoc"],
 ["docBlame", "One.one"],
 ["docBlame", "Option.traverse"],
 ["docBlame", "PartialOrder.le_antisymm"],
 ["docBlame", "Preorder.le_refl"],
 ["docBlame", "Preorder.le_trans"],
 ["docBlame", "Preorder.lt_iff_le_not_le"],
 ["docBlame", "Random.randBool"],
 ["docBlame", "Random.randFin"],
 ["docBlame", "Random.random"],
 ["docBlame", "RightCancelMonoid.mul_one"],
 ["docBlame", "RightCancelMonoid.npow"],
 ["docBlame", "RightCancelMonoid.npow_succ'"],
 ["docBlame", "RightCancelMonoid.npow_zero'"],
 ["docBlame", "RightCancelMonoid.one_mul"],
 ["docBlame", "RightCancelSemigroup.mul_right_cancel"],
 ["docBlame", "Ring.add_left_neg"],
 ["docBlame", "Ring.intCast"],
 ["docBlame", "Ring.intCast_negSucc"],
 ["docBlame", "Ring.intCast_ofNat"],
 ["docBlame", "Ring.sub_eq_add_neg"],
 ["docBlame", "Ring.zsmul"],
 ["docBlame", "Ring.zsmul_neg'"],
 ["docBlame", "Ring.zsmul_succ'"],
 ["docBlame", "Ring.zsmul_zero'"],
 ["docBlame", "Semigroup.mul_assoc"],
 ["docBlame", "SemigroupWithZero.mul_zero"],
 ["docBlame", "SemigroupWithZero.zero_mul"],
 ["docBlame", "Semiring.mul_one"],
 ["docBlame", "Semiring.npow"],
 ["docBlame", "Semiring.npow_succ'"],
 ["docBlame", "Semiring.npow_zero'"],
 ["docBlame", "Semiring.one_mul"],
 ["docBlame", "Set.Subset"],
 ["docBlame", "Set.compl"],
 ["docBlame", "Set.diff"],
 ["docBlame", "Set.image"],
 ["docBlame", "Set.insert"],
 ["docBlame", "Set.inter"],
 ["docBlame", "Set.mem"],
 ["docBlame", "Set.powerset"],
 ["docBlame", "Set.sUnion"],
 ["docBlame", "Set.singleton"],
 ["docBlame", "Set.«term{_|_}»"],
 ["docBlame", "Set.«term{_|_}_1»"],
 ["docBlame", "Set.«term⋃₀_»"],
 ["docBlame", "Set.term𝒫_"],
 ["docBlame", "Set.union"],
 ["docBlame", "Set.univ"],
 ["docBlame", "SlimCheck.Int_sizeOfAbs"],
 ["docBlame", "SlimCheck.NamedBinder"],
 ["docBlame", "String.isPrefix"],
 ["docBlame", "String.isSuffix"],
 ["docBlame", "String.replicate"],
 ["docBlame", "SubNegMonoid.sub_eq_add_neg"],
 ["docBlame", "SubNegMonoid.zsmul"],
 ["docBlame", "SubNegMonoid.zsmul_neg'"],
 ["docBlame", "SubNegMonoid.zsmul_succ'"],
 ["docBlame", "SubNegMonoid.zsmul_zero'"],
 ["docBlame", "SubNegZeroMonoid.neg_zero"],
 ["docBlame", "SubtractionCommMonoid.add_comm"],
 ["docBlame", "SubtractionMonoid.neg_add_rev"],
 ["docBlame", "SubtractionMonoid.neg_eq_of_add"],
 ["docBlame", "SubtractionMonoid.neg_neg"],
 ["docBlame", "ToAdditive.ignoreArgsAttr"],
 ["docBlame", "ToAdditive.relevantArgAttr"],
 ["docBlame", "ToAdditive.reorderAttr"],
 ["docBlame", "ToAdditive.translations"],
 ["docBlame", "UFModel.Agrees"],
 ["docBlame", "UFModel.Models"],
 ["docBlame", "UFModel.empty"],
 ["docBlame", "UFModel.parent"],
 ["docBlame", "UFModel.push"],
 ["docBlame", "UFModel.rank"],
 ["docBlame", "UFModel.rank_lt"],
 ["docBlame", "UFModel.setParent"],
 ["docBlame", "UFModel.setParentBump"],
 ["docBlame", "UFNode.parent"],
 ["docBlame", "UFNode.rank"],
 ["docBlame", "UFNode.value"],
 ["docBlame", "UnionFind.arr"],
 ["docBlame", "UnionFind.empty"],
 ["docBlame", "UnionFind.find"],
 ["docBlame", "UnionFind.findAux"],
 ["docBlame", "UnionFind.link"],
 ["docBlame", "UnionFind.mkEmpty"],
 ["docBlame", "UnionFind.model"],
 ["docBlame", "UnionFind.push"],
 ["docBlame", "UnionFind.rank"],
 ["docBlame", "UnionFind.rankMax"],
 ["docBlame", "UnionFind.rankMaxAux"],
 ["docBlame", "UnionFind.size"],
 ["docBlame", "UnionFind.union"],
 ["docBlame", "Units.inv"],
 ["docBlame", "Units.inv_val"],
 ["docBlame", "Units.val"],
 ["docBlame", "Units.val_inv"],
 ["docBlame", "WellFounded.fix'"],
 ["docBlame", "WriterT.mk"],
 ["docBlame", "WriterT.run"],
 ["docBlame", "WriterT.runThe"],
 ["docBlame", "Zero.zero"],
 ["docBlame", "evalIntrov.intro1PStep"],
 ["docBlame", "evalIntrov.introsDep"],
 ["docBlame", "Array.heapSort.loop"],
 ["docBlame", "BinaryHeap.mkHeap.loop"],
 ["docBlame", "Function.HasUncurry.uncurry"],
 ["docBlame", "Lean.Attr.hintTacticAttr"],
 ["docBlame", "Lean.Attr.substAttr"],
 ["docBlame", "Lean.ConstantInfo.isDef"],
 ["docBlame", "Lean.ConstantInfo.isThm"],
 ["docBlame", "Lean.ConstantInfo.toDeclaration!"],
 ["docBlame", "Lean.ConstantInfo.updateName"],
 ["docBlame", "Lean.ConstantInfo.updateType"],
 ["docBlame", "Lean.ConstantInfo.updateValue"],
 ["docBlame", "Lean.Export.Alloc"],
 ["docBlame", "Lean.Export.Entry"],
 ["docBlame", "Lean.Export.OfState"],
 ["docBlame", "Lean.Export.State"],
 ["docBlame", "Lean.Export.alloc"],
 ["docBlame", "Lean.Export.biStr"],
 ["docBlame", "Lean.Export.exportDef"],
 ["docBlame", "Lean.Export.exportExpr"],
 ["docBlame", "Lean.Export.exportLevel"],
 ["docBlame", "Lean.Export.exportName"],
 ["docBlame", "Lean.Export.runExportM"],
 ["docBlame", "Lean.Expr.bvarIdx?"],
 ["docBlame", "Lean.Expr.getRevArg?"],
 ["docBlame", "Lean.Expr.modifyAppArg"],
 ["docBlame", "Lean.Expr.modifyAppArgM"],
 ["docBlame", "Lean.Expr.modifyRevArg"],
 ["docBlame", "Lean.Meta.FindOptions"],
 ["docBlame", "Lean.Meta.find"],
 ["docBlame", "Lean.Meta.findCore"],
 ["docBlame", "Lean.PHashSet.toList"],
 ["docBlame", "Lean.Tactic.solveByElim"],
 ["docBlame", "Mathlib.Tactic.haveLetCore"],
 ["docBlame", "Mathlib.Tactic.renameArg"],
 ["docBlame", "Mathlib.Tactic.set"],
 ["docBlame", "Mathlib.Tactic.setArgsRest"],
 ["docBlame", "Mathlib.Tactic.tacticHave_"],
 ["docBlame", "Mathlib.Tactic.tacticLeft"],
 ["docBlame", "Mathlib.Tactic.tacticLet_"],
 ["docBlame", "Mathlib.Tactic.tacticRight"],
 ["docBlame", "Mathlib.Tactic.tacticSet!_"],
 ["docBlame", "Mathlib.Tactic.tacticSuffices_"],
 ["docBlame", "Mathlib.WhatsNew.diffExtension"],
 ["docBlame", "Mathlib.WhatsNew.whatsNew"],
 ["docBlame", "Nat.AtLeastTwo.prop"],
 ["docBlame", "PProd.mk.injArrow"],
 ["docBlame", "Prod.mk.injArrow"],
 ["docBlame", "Sat.Clause.cons"],
 ["docBlame", "Sat.Clause.nil"],
 ["docBlame", "Set.setOf.unexpander"],
 ["docBlame", "SlimCheck.Configuration.maxSize"],
 ["docBlame", "SlimCheck.Configuration.numInst"],
 ["docBlame", "SlimCheck.Configuration.numRetries"],
 ["docBlame", "SlimCheck.Configuration.quiet"],
 ["docBlame", "SlimCheck.Configuration.randomSeed"],
 ["docBlame", "SlimCheck.Configuration.traceDiscarded"],
 ["docBlame", "SlimCheck.Configuration.traceShrink"],
 ["docBlame", "SlimCheck.Configuration.traceShrinkCandidates"],
 ["docBlame", "SlimCheck.Configuration.traceSuccesses"],
 ["docBlame", "SlimCheck.NoShrink.get"],
 ["docBlame", "SlimCheck.NoShrink.mk"],
 ["docBlame", "SlimCheck.PrintableProp.printProp"],
 ["docBlame", "SlimCheck.SampleableExt.interp"],
 ["docBlame", "SlimCheck.SampleableExt.proxy"],
 ["docBlame", "SlimCheck.SampleableExt.sample"],
 ["docBlame", "SlimCheck.Shrinkable.shrink"],
 ["docBlame", "SlimCheck.TestResult.isFailure"],
 ["docBlame", "SlimCheck.TestResult.toString"],
 ["docBlame", "SlimCheck.Testable.run"],
 ["docBlame", "SlimCheck.Testable.runProp"],
 ["docBlame", "Std.Prec.arrow"],
 ["docBlame", "Std.Prec.max"],
 ["docBlame", "Std.Prec.maxPlus"],
 ["docBlame", "Std.Priority.default"],
 ["docBlame", "Std.Priority.max"],
 ["docBlame", "String.toAsciiByteArray.loop"],
 ["docBlame", "Subtype.simps.coe"],
 ["docBlame", "Tactic.Find.«command#find_»"],
 ["docBlame", "Tactic.Find.findDeclsPerHead"],
 ["docBlame", "Tactic.Find.findType"],
 ["docBlame", "Tactic.Find.«tactic#find_»"],
 ["docBlame", "Tactic.Find.tacticFind"],
 ["docBlame", "Tactic.LibrarySearch.librarySearch"],
 ["docBlame", "Tactic.LibrarySearch.librarySearch!"],
 ["docBlame", "Tactic.LibrarySearch.librarySearch'"],
 ["docBlame", "Tactic.LibrarySearch.librarySearchLemmas"],
 ["docBlame", "Tactic.LibrarySearch.lines"],
 ["docBlame", "Tactic.LibrarySearch.«termLibrary_search%»"],
 ["docBlame", "Tactic.NormCast.convNormCast"],
 ["docBlame", "Tactic.NormCast.evalConvNormCast"],
 ["docBlame", "Tactic.NormCast.evalPushCast"],
 ["docBlame", "Tactic.NormCast.isCoeOf?"],
 ["docBlame", "Tactic.NormCast.isNumeral?"],
 ["docBlame", "Tactic.NormCast.mkCoe"],
 ["docBlame", "Tactic.NormCast.normCastHyp"],
 ["docBlame", "Tactic.NormCast.normCastTarget"],
 ["docBlame", "Tactic.NormCast.pushCast"],
 ["docBlame", "Tactic.NormCast.tacticNorm_cast0__"],
 ["docBlame", "Tactic.NormCast.termMod_cast_"],
 ["docBlame", "WellFounded.fix'.impl"],
 ["docBlame", "Lean.Elab.Command.printPrefix"],
 ["docBlame", "Lean.Elab.Command.termEta_helper_"],
 ["docBlame", "Lean.Elab.Tactic.mkDischargeWrapper"],
 ["docBlame", "Lean.Export.Alloc.map"],
 ["docBlame", "Lean.Export.Alloc.next"],
 ["docBlame", "Lean.Export.OfState.get"],
 ["docBlame", "Lean.Export.OfState.modify"],
 ["docBlame", "Lean.Export.State.defs"],
 ["docBlame", "Lean.Export.State.exprs"],
 ["docBlame", "Lean.Export.State.levels"],
 ["docBlame", "Lean.Export.State.names"],
 ["docBlame", "Lean.Export.State.stk"],
 ["docBlame", "Lean.Export.exportDef.axdef"],
 ["docBlame", "Lean.Export.exportDef.defn"],
 ["docBlame", "Lean.Export.exportDef.ind"],
 ["docBlame", "Lean.Export.exportDef.indbody"],
 ["docBlame", "Lean.Export.exportDef.insert"],
 ["docBlame", "Lean.Meta.DiscrTree.getElements"],
 ["docBlame", "Lean.Meta.FindOptions.checkPrivate"],
 ["docBlame", "Lean.Meta.FindOptions.stage1"],
 ["docBlame", "Lean.Meta.Simp.mkCast"],
 ["docBlame", "Lean.Meta.Simp.mkEqSymm"],
 ["docBlame", "Lean.Meta.findCore.check"],
 ["docBlame", "Lean.Parser.Attr.elementwise"],
 ["docBlame", "Lean.Parser.Attr.ext"],
 ["docBlame", "Lean.Parser.Attr.higherOrder"],
 ["docBlame", "Lean.Parser.Attr.interactive"],
 ["docBlame", "Lean.Parser.Attr.intro"],
 ["docBlame", "Lean.Parser.Attr.intro!"],
 ["docBlame", "Lean.Parser.Attr.mkIff"],
 ["docBlame", "Lean.Parser.Attr.mono"],
 ["docBlame", "Lean.Parser.Attr.notationClass"],
 ["docBlame", "Lean.Parser.Attr.protectProj"],
 ["docBlame", "Lean.Parser.Attr.reassoc"],
 ["docBlame", "Lean.Parser.Command.addDeclDoc"],
 ["docBlame", "Lean.Parser.Command.addHintTactic"],
 ["docBlame", "Lean.Parser.Command.addTacticDoc"],
 ["docBlame", "Lean.Parser.Command.copyDocString"],
 ["docBlame", "Lean.Parser.Command.defReplacer"],
 ["docBlame", "Lean.Parser.Command.expandFoldl"],
 ["docBlame", "Lean.Parser.Command.expandFoldr"],
 ["docBlame", "Lean.Parser.Command.explode"],
 ["docBlame", "Lean.Parser.Command.include"],
 ["docBlame", "Lean.Parser.Command.listUnusedDecls"],
 ["docBlame", "Lean.Parser.Command.localized"],
 ["docBlame", "Lean.Parser.Command.mkIffOfInductiveProp"],
 ["docBlame", "Lean.Parser.Command.mkSimpAttribute"],
 ["docBlame", "Lean.Parser.Command.omit"],
 ["docBlame", "Lean.Parser.Command.parameter"],
 ["docBlame", "Lean.Parser.Command.reassoc_axiom"],
 ["docBlame", "Lean.Parser.Command.sample"],
 ["docBlame", "Lean.Parser.Command.setupTacticParser"],
 ["docBlame", "Lean.Parser.Command.simp"],
 ["docBlame", "Lean.Parser.Command.simpsProj"],
 ["docBlame", "Lean.Parser.Command.simpsRule"],
 ["docBlame", "Lean.Parser.Command.where"],
 ["docBlame", "Lean.Parser.Tactic.abel"],
 ["docBlame", "Lean.Parser.Tactic.abel!"],
 ["docBlame", "Lean.Parser.Tactic.abel1"],
 ["docBlame", "Lean.Parser.Tactic.abel1!"],
 ["docBlame", "Lean.Parser.Tactic.abstract"],
 ["docBlame", "Lean.Parser.Tactic.acChange"],
 ["docBlame", "Lean.Parser.Tactic.acMono"],
 ["docBlame", "Lean.Parser.Tactic.apply'"],
 ["docBlame", "Lean.Parser.Tactic.applyAssumption"],
 ["docBlame", "Lean.Parser.Tactic.applyField"],
 ["docBlame", "Lean.Parser.Tactic.applyFun"],
 ["docBlame", "Lean.Parser.Tactic.applyNormed"],
 ["docBlame", "Lean.Parser.Tactic.applyWith'"],
 ["docBlame", "Lean.Parser.Tactic.assocRw"],
 ["docBlame", "Lean.Parser.Tactic.async"],
 ["docBlame", "Lean.Parser.Tactic.cancelDenoms"],
 ["docBlame", "Lean.Parser.Tactic.cases'"],
 ["docBlame", "Lean.Parser.Tactic.cases''"],
 ["docBlame", "Lean.Parser.Tactic.cc"],
 ["docBlame", "Lean.Parser.Tactic.clarify"],
 ["docBlame", "Lean.Parser.Tactic.clean"],
 ["docBlame", "Lean.Parser.Tactic.clearValue"],
 ["docBlame", "Lean.Parser.Tactic.compVal"],
 ["docBlame", "Lean.Parser.Tactic.congr'"],
 ["docBlame", "Lean.Parser.Tactic.continue"],
 ["docBlame", "Lean.Parser.Tactic.continuity"],
 ["docBlame", "Lean.Parser.Tactic.continuity!"],
 ["docBlame", "Lean.Parser.Tactic.continuity!?"],
 ["docBlame", "Lean.Parser.Tactic.continuity?"],
 ["docBlame", "Lean.Parser.Tactic.convert"],
 ["docBlame", "Lean.Parser.Tactic.convertTo"],
 ["docBlame", "Lean.Parser.Tactic.decide!"],
 ["docBlame", "Lean.Parser.Tactic.deltaInstance"],
 ["docBlame", "Lean.Parser.Tactic.deriveElementwiseProof"],
 ["docBlame", "Lean.Parser.Tactic.deriveReassocProof"],
 ["docBlame", "Lean.Parser.Tactic.dsimpArg"],
 ["docBlame", "Lean.Parser.Tactic.dsimpArgs"],
 ["docBlame", "Lean.Parser.Tactic.dsimpResult"],
 ["docBlame", "Lean.Parser.Tactic.eapply'"],
 ["docBlame", "Lean.Parser.Tactic.elementwise"],
 ["docBlame", "Lean.Parser.Tactic.elementwise!"],
 ["docBlame", "Lean.Parser.Tactic.elide"],
 ["docBlame", "Lean.Parser.Tactic.equivRw"],
 ["docBlame", "Lean.Parser.Tactic.equivRwType"],
 ["docBlame", "Lean.Parser.Tactic.extractGoal"],
 ["docBlame", "Lean.Parser.Tactic.extractGoal!"],
 ["docBlame", "Lean.Parser.Tactic.failIfSuccess?"],
 ["docBlame", "Lean.Parser.Tactic.fapply'"],
 ["docBlame", "Lean.Parser.Tactic.field"],
 ["docBlame", "Lean.Parser.Tactic.fieldSimp"],
 ["docBlame", "Lean.Parser.Tactic.filterUpwards"],
 ["docBlame", "Lean.Parser.Tactic.finish"],
 ["docBlame", "Lean.Parser.Tactic.fixingClause"],
 ["docBlame", "Lean.Parser.Tactic.generalizeHyp"],
 ["docBlame", "Lean.Parser.Tactic.generalizeProofs"],
 ["docBlame", "Lean.Parser.Tactic.generalizes"],
 ["docBlame", "Lean.Parser.Tactic.generalizesArg"],
 ["docBlame", "Lean.Parser.Tactic.generalizingClause"],
 ["docBlame", "Lean.Parser.Tactic.ghostCalc"],
 ["docBlame", "Lean.Parser.Tactic.ghostFunTac"],
 ["docBlame", "Lean.Parser.Tactic.ghostSimp"],
 ["docBlame", "Lean.Parser.Tactic.group"],
 ["docBlame", "Lean.Parser.Tactic.guardProofTerm"],
 ["docBlame", "Lean.Parser.Tactic.guardTags"],
 ["docBlame", "Lean.Parser.Tactic.hGeneralize"],
 ["docBlame", "Lean.Parser.Tactic.hGeneralize!"],
 ["docBlame", "Lean.Parser.Tactic.haveField"],
 ["docBlame", "Lean.Parser.Tactic.hint"],
 ["docBlame", "Lean.Parser.Tactic.induction'"],
 ["docBlame", "Lean.Parser.Tactic.induction''"],
 ["docBlame", "Lean.Parser.Tactic.inferAutoParam"],
 ["docBlame", "Lean.Parser.Tactic.initRing"],
 ["docBlame", "Lean.Parser.Tactic.injectionsAndClear"],
 ["docBlame", "Lean.Parser.Tactic.intervalCases"],
 ["docBlame", "Lean.Parser.Tactic.isBounded_default"],
 ["docBlame", "Lean.Parser.Tactic.itauto"],
 ["docBlame", "Lean.Parser.Tactic.itauto!"],
 ["docBlame", "Lean.Parser.Tactic.lift"],
 ["docBlame", "Lean.Parser.Tactic.linarith"],
 ["docBlame", "Lean.Parser.Tactic.linarith!"],
 ["docBlame", "Lean.Parser.Tactic.linearCombination"],
 ["docBlame", "Lean.Parser.Tactic.mapply"],
 ["docBlame", "Lean.Parser.Tactic.mapply'"],
 ["docBlame", "Lean.Parser.Tactic.matchHyp"],
 ["docBlame", "Lean.Parser.Tactic.measurability"],
 ["docBlame", "Lean.Parser.Tactic.measurability!"],
 ["docBlame", "Lean.Parser.Tactic.measurability!?"],
 ["docBlame", "Lean.Parser.Tactic.measurability?"],
 ["docBlame", "Lean.Parser.Tactic.mkDecorations"],
 ["docBlame", "Lean.Parser.Tactic.mono"],
 ["docBlame", "Lean.Parser.Tactic.mvBisim"],
 ["docBlame", "Lean.Parser.Tactic.nameAndTerm"],
 ["docBlame", "Lean.Parser.Tactic.nlinarith"],
 ["docBlame", "Lean.Parser.Tactic.nlinarith!"],
 ["docBlame", "Lean.Parser.Tactic.noncommRing"],
 ["docBlame", "Lean.Parser.Tactic.nontriviality"],
 ["docBlame", "Lean.Parser.Tactic.nthRw"],
 ["docBlame", "Lean.Parser.Tactic.nthRwLHS"],
 ["docBlame", "Lean.Parser.Tactic.nthRwRHS"],
 ["docBlame", "Lean.Parser.Tactic.obviously"],
 ["docBlame", "Lean.Parser.Tactic.omega"],
 ["docBlame", "Lean.Parser.Tactic.opInduction"],
 ["docBlame", "Lean.Parser.Tactic.padicIndexSimp"],
 ["docBlame", "Lean.Parser.Tactic.piInstance"],
 ["docBlame", "Lean.Parser.Tactic.piInstanceDeriveField"],
 ["docBlame", "Lean.Parser.Tactic.prettyCases"],
 ["docBlame", "Lean.Parser.Tactic.propagateTags"],
 ["docBlame", "Lean.Parser.Tactic.rcases?"],
 ["docBlame", "Lean.Parser.Tactic.rcongr"],
 ["docBlame", "Lean.Parser.Tactic.reassoc"],
 ["docBlame", "Lean.Parser.Tactic.reassoc!"],
 ["docBlame", "Lean.Parser.Tactic.refineStruct"],
 ["docBlame", "Lean.Parser.Tactic.revertAfter"],
 ["docBlame", "Lean.Parser.Tactic.revertDeps"],
 ["docBlame", "Lean.Parser.Tactic.revertTargetDeps"],
 ["docBlame", "Lean.Parser.Tactic.rfl'"],
 ["docBlame", "Lean.Parser.Tactic.ring!"],
 ["docBlame", "Lean.Parser.Tactic.ring1"],
 ["docBlame", "Lean.Parser.Tactic.ring1!"],
 ["docBlame", "Lean.Parser.Tactic.ringExp"],
 ["docBlame", "Lean.Parser.Tactic.ringExp!"],
 ["docBlame", "Lean.Parser.Tactic.ringExpEq"],
 ["docBlame", "Lean.Parser.Tactic.ringExpEq!"],
 ["docBlame", "Lean.Parser.Tactic.ringMode"],
 ["docBlame", "Lean.Parser.Tactic.ringNF"],
 ["docBlame", "Lean.Parser.Tactic.ringNF!"],
 ["docBlame", "Lean.Parser.Tactic.rintro?"],
 ["docBlame", "Lean.Parser.Tactic.rsimp"],
 ["docBlame", "Lean.Parser.Tactic.rwSearch"],
 ["docBlame", "Lean.Parser.Tactic.rwSearch?"],
 ["docBlame", "Lean.Parser.Tactic.safe"],
 ["docBlame", "Lean.Parser.Tactic.simpResult"],
 ["docBlame", "Lean.Parser.Tactic.sliceLHS"],
 ["docBlame", "Lean.Parser.Tactic.sliceRHS"],
 ["docBlame", "Lean.Parser.Tactic.splitIfs"],
 ["docBlame", "Lean.Parser.Tactic.subtypeInstance"],
 ["docBlame", "Lean.Parser.Tactic.suggest"],
 ["docBlame", "Lean.Parser.Tactic.symm"],
 ["docBlame", "Lean.Parser.Tactic.symm'"],
 ["docBlame", "Lean.Parser.Tactic.tacticDestruct_"],
 ["docBlame", "Lean.Parser.Tactic.tauto"],
 ["docBlame", "Lean.Parser.Tactic.tauto!"],
 ["docBlame", "Lean.Parser.Tactic.termList"],
 ["docBlame", "Lean.Parser.Tactic.tfaeFinish"],
 ["docBlame", "Lean.Parser.Tactic.tfaeHave"],
 ["docBlame", "Lean.Parser.Tactic.tidy"],
 ["docBlame", "Lean.Parser.Tactic.tidy?"],
 ["docBlame", "Lean.Parser.Tactic.trans"],
 ["docBlame", "Lean.Parser.Tactic.trans'"],
 ["docBlame", "Lean.Parser.Tactic.transport"],
 ["docBlame", "Lean.Parser.Tactic.truncCases"],
 ["docBlame", "Lean.Parser.Tactic.tryFor"],
 ["docBlame", "Lean.Parser.Tactic.unelide"],
 ["docBlame", "Lean.Parser.Tactic.unfoldAux"],
 ["docBlame", "Lean.Parser.Tactic.unfoldCases"],
 ["docBlame", "Lean.Parser.Tactic.unfoldCoes"],
 ["docBlame", "Lean.Parser.Tactic.unfoldProjs"],
 ["docBlame", "Lean.Parser.Tactic.unfoldWf"],
 ["docBlame", "Lean.Parser.Tactic.uniqueDiffWithinAt_Ici_Iic_univ"],
 ["docBlame", "Lean.Parser.Tactic.unitInterval"],
 ["docBlame", "Lean.Parser.Tactic.usingArg"],
 ["docBlame", "Lean.Parser.Tactic.withArgs"],
 ["docBlame", "Lean.Parser.Tactic.withCases"],
 ["docBlame", "Lean.Parser.Tactic.withPattern"],
 ["docBlame", "Lean.Parser.Tactic.wittTruncateFunTac"],
 ["docBlame", "Lean.Parser.Tactic.wlog"],
 ["docBlame", "Lean.Parser.Tactic.zify"],
 ["docBlame", "Lean.Parser.Term.«term%%ₓ_»"],
 ["docBlame", "Lean.Parser.Term.termPpquoteₓ_"],
 ["docBlame", "Lean.Parser.Term.termPquoteₓ_"],
 ["docBlame", "Lean.Parser.Term.termQuoteₓ_"],
 ["docBlame", "Mathlib.Meta.NormNum.instSemiringNat"],
 ["docBlame", "Mathlib.Prelude.Rename.addNameAlignment"],
 ["docBlame", "Mathlib.Prelude.Rename.elabAlign"],
 ["docBlame", "Mathlib.Prelude.Rename.elabLookup3"],
 ["docBlame", "Mathlib.Prelude.Rename.getRenameMap"],
 ["docBlame", "Mathlib.Prelude.Rename.renameExtension"],
 ["docBlame", "Mathlib.Tactic.Conv.convLHS"],
 ["docBlame", "Mathlib.Tactic.Conv.convRHS"],
 ["docBlame", "Mathlib.Tactic.Conv.convRun_conv_"],
 ["docBlame", "Mathlib.Tactic.LeftRight.leftRightMeta"],
 ["docBlame", "Mathlib.Tactic.Ring.State"],
 ["docBlame", "Mathlib.Tactic.Ring.eval"],
 ["docBlame", "Mathlib.Tactic.Ring.evalAdd"],
 ["docBlame", "Mathlib.Tactic.Ring.mkAppCS"],
 ["docBlame", "Mathlib.Tactic.Ring.tacticRing"],
 ["docBlame", "Sat.Clause.reify.prop"],
 ["docBlame", "Sat.Fmla.reify.prop"],
 ["docBlame", "Sat.Fmla.subsumes.prop"],
 ["docBlame", "Sat.Literal.reify.prop"],
 ["docBlame", "Sat.Valuation.satisfies_fmla.prop"],
 ["docBlame", "Lean.Meta.DiscrTree.Trie.getElements"],
 ["docBlame", "Lean.Parser.Command.simpsRule.erase"],
 ["docBlame", "Lean.Parser.Command.simpsRule.rename"],
 ["docBlame", "Lean.Parser.Tactic.Conv.applyCongr"],
 ["docBlame", "Lean.Parser.Tactic.Conv.normNum"],
 ["docBlame", "Lean.Parser.Tactic.Conv.normNum1"],
 ["docBlame", "Lean.Parser.Tactic.Conv.ring"],
 ["docBlame", "Lean.Parser.Tactic.Conv.ring!"],
 ["docBlame", "Lean.Parser.Tactic.Conv.ringExp"],
 ["docBlame", "Lean.Parser.Tactic.Conv.ringExp!"],
 ["docBlame", "Lean.Parser.Tactic.Conv.ringNF"],
 ["docBlame", "Lean.Parser.Tactic.Conv.ringNF!"],
 ["docBlame", "Lean.Parser.Tactic.Conv.slice"],
 ["docBlame", "Lean.Parser.Tactic.ElimApp.evalNames"],
 ["docBlame", "Lean.Parser.Tactic.mono.side"],
 ["docBlame", "Mathlib.Tactic.Ring.RingM.run"],
 ["docBlame", "Mathlib.Tactic.Ring.State.atoms"],
 ["docBlame", "Mathlib.Tactic.Ring.State.numAtoms"],
 ["docBlame", "Mathlib.Tactic.Sat.buildReify.mkPS"],
 ["unusedArguments", "Combinator.K"],
 ["unusedArguments", "Decidable.not_or_iff_and_not"]]