[["docBlame", "AsFalse"],
 ["docBlame", "AsTrue"],
 ["docBlame", "Associative"],
 ["docBlame", "Commutative"],
 ["docBlame", "CongrMetaM"],
 ["docBlame", "CongrState"],
 ["docBlame", "Cont"],
 ["docBlame", "ContT"],
 ["docBlame", "IsDecEq"],
 ["docBlame", "IsDecRefl"],
 ["docBlame", "IsLeftCancel"],
 ["docBlame", "IsRightCancel"],
 ["docBlame", "LawfulMonadCont"],
 ["docBlame", "LeftCancelative"],
 ["docBlame", "LeftDistributive"],
 ["docBlame", "LeftIdentity"],
 ["docBlame", "MonadCont"],
 ["docBlame", "MonadWriter"],
 ["docBlame", "One"],
 ["docBlame", "RightCancelative"],
 ["docBlame", "RightDistributive"],
 ["docBlame", "RightIdentity"],
 ["docBlame", "RightInverse"],
 ["docBlame", "Writer"],
 ["docBlame", "WriterT"],
 ["docBlame", "cancelDenominators"],
 ["docBlame", "cancelDenominatorsAt"],
 ["docBlame", "cancelDenominatorsTarget"],
 ["docBlame", "condM"],
 ["docBlame", "decidableEq_of_bool_pred"],
 ["docBlame", "eqns"],
 ["docBlame", "eqnsAttribute"],
 ["docBlame", "joinM"],
 ["docBlame", "measurability!"],
 ["docBlame", "measurability!?"],
 ["docBlame", "tacticCancel_denoms_"],
 ["docBlame", "tacticUse_finite_instance"],
 ["docBlame", "when"],
 ["docBlame", "whenM"],
 ["docBlame", "Action.V"],
 ["docBlame", "Action.ρ"],
 ["docBlame", "AddMonoidAlgebra.mapDomain"],
 ["docBlame", "AddMonoidAlgebra.single"],
 ["docBlame", "AffineBasis.toFun"],
 ["docBlame", "AffineEquiv.linear"],
 ["docBlame", "AffineMap.linear"],
 ["docBlame", "AffineMap.toFun"],
 ["docBlame", "AlgHom.toAddMonoidHom'"],
 ["docBlame", "AlgHom.toMonoidHom'"],
 ["docBlame", "Bifunctor.bimap"],
 ["docBlame", "Bimod.X"],
 ["docBlame", "Bimod.actLeft"],
 ["docBlame", "Bimod.actRight"],
 ["docBlame", "Bitraversable.bitraverse"],
 ["docBlame", "CFilter.f"],
 ["docBlame", "CFilter.inf"],
 ["docBlame", "CFilter.pt"],
 ["docBlame", "CancelDenoms.synthesizeUsingNormNum"],
 ["docBlame", "CategoryTheory.«term_⟶[_]_»"],
 ["docBlame", "ChangeOfRings.«term_⊗ₜ[_,_]_»"],
 ["docBlame", "CompleteBooleanAlgebra.toCompleteAtomicBooleanAlgebra"],
 ["docBlame", "Computation.parallelRec"],
 ["docBlame", "Congr!.elabConfig"],
 ["docBlame", "ContT.map"],
 ["docBlame", "ContT.monadLift"],
 ["docBlame", "ContT.run"],
 ["docBlame", "ContT.withContT"],
 ["docBlame", "Ctop.f"],
 ["docBlame", "Ctop.inter"],
 ["docBlame", "Ctop.top"],
 ["docBlame", "Decidable.recOn_false"],
 ["docBlame", "Decidable.recOn_true"],
 ["docBlame", "Dilation.toFun"],
 ["docBlame", "DilationEquiv.toDilation"],
 ["docBlame", "EqualCharZero.pnatCast"],
 ["docBlame", "Equiv.invFun"],
 ["docBlame", "Equiv.toFun"],
 ["docBlame", "EsakiaHom.toPseudoEpimorphism"],
 ["docBlame", "EuclideanDomain.wellFoundedRelation"],
 ["docBlame", "ExceptT.callCC"],
 ["docBlame", "ExceptT.mkLabel"],
 ["docBlame", "FBinopElab.elabBinOp"],
 ["docBlame", "FiberBundle.trivializationAt'"],
 ["docBlame", "FiberBundle.trivializationAtlas'"],
 ["docBlame", "FiberBundleCore.baseSet"],
 ["docBlame", "FiberBundleCore.coordChange"],
 ["docBlame", "FiberBundleCore.indexAt"],
 ["docBlame", "FiberPrebundle.pretrivializationAt"],
 ["docBlame", "FiberPrebundle.pretrivializationAtlas"],
 ["docBlame", "FirstOrder.«term&_»"],
 ["docBlame", "FirstOrder.«term_⟹_»"],
 ["docBlame", "FirstOrder.«term∀'_»"],
 ["docBlame", "HSpace.e"],
 ["docBlame", "HSpace.eHmul"],
 ["docBlame", "HSpace.hmul"],
 ["docBlame", "HSpace.hmulE"],
 ["docBlame", "HomologicalComplex.X"],
 ["docBlame", "HomologicalComplex.d"],
 ["docBlame", "Homotopy.hom"],
 ["docBlame", "HomotopyEquiv.hom"],
 ["docBlame", "HomotopyEquiv.homotopyHomInvId"],
 ["docBlame", "HomotopyEquiv.homotopyInvHomId"],
 ["docBlame", "HomotopyEquiv.inv"],
 ["docBlame", "Int.decNonneg"],
 ["docBlame", "IntermediateField.delabAdjoinNotation"],
 ["docBlame", "IsAdjoinRoot.map"],
 ["docBlame", "JordanHolderLattice.IsMaximal"],
 ["docBlame", "JordanHolderLattice.Iso"],
 ["docBlame", "Lean.ExportM"],
 ["docBlame", "LinearPMap.domain"],
 ["docBlame", "LinearPMap.sSup"],
 ["docBlame", "LinearPMap.toFun"],
 ["docBlame", "LinearPMap.toFun'"],
 ["docBlame", "MaximalSpectrum.asIdeal"],
 ["docBlame", "MeasureTheory.«term_→₁[_]_»"],
 ["docBlame", "MeasureTheory.«term_→₂[_]_»"],
 ["docBlame", "MeasureTheory.«term_≤[_]_»"],
 ["docBlame", "MeasureTheory.«termμH[_]»"],
 ["docBlame", "Mod_.X"],
 ["docBlame", "Mod_.act"],
 ["docBlame", "ModularForm.«term_∣[_;_]_»"],
 ["docBlame", "ModularForm.«term_∣[_]_»"],
 ["docBlame", "Mon_.X"],
 ["docBlame", "Mon_.mul"],
 ["docBlame", "Mon_.one"],
 ["docBlame", "Monad.cond"],
 ["docBlame", "Monad.filter"],
 ["docBlame", "Monad.foldl"],
 ["docBlame", "Monad.join"],
 ["docBlame", "Monad.mapM"],
 ["docBlame", "Monad.mapM'"],
 ["docBlame", "Monad.sequence"],
 ["docBlame", "Monad.sequence'"],
 ["docBlame", "Monad.unlessb"],
 ["docBlame", "Monad.whenb"],
 ["docBlame", "MonadCont.Label"],
 ["docBlame", "MonadCont.callCC"],
 ["docBlame", "MonadCont.goto"],
 ["docBlame", "MonadWriter.listen"],
 ["docBlame", "MonadWriter.pass"],
 ["docBlame", "MonadWriter.tell"],
 ["docBlame", "MonadWriterAdapter.adaptWriter"],
 ["docBlame", "Monoid.Foldr"],
 ["docBlame", "Monoid.foldlM"],
 ["docBlame", "Monoid.foldrM"],
 ["docBlame", "MonoidAlgebra.mapDomain"],
 ["docBlame", "MonoidAlgebra.single"],
 ["docBlame", "MvPFunctor.wpRec"],
 ["docBlame", "MvQPF.P"],
 ["docBlame", "MvQPF.abs"],
 ["docBlame", "MvQPF.repr"],
 ["docBlame", "Nat.findX"],
 ["docBlame", "Nat.rfind"],
 ["docBlame", "Nat.rfindOpt"],
 ["docBlame", "Nat.rfindX"],
 ["docBlame", "One.one"],
 ["docBlame", "OptionT.callCC"],
 ["docBlame", "OptionT.mkLabel"],
 ["docBlame", "Polynomial.toFinsupp"],
 ["docBlame", "PowerBasis.basis"],
 ["docBlame", "PowerBasis.dim"],
 ["docBlame", "PowerBasis.gen"],
 ["docBlame", "Pretrivialization.baseSet"],
 ["docBlame", "PrimeSpectrum.asIdeal"],
 ["docBlame", "ProjectiveSpectrum.asHomogeneousIdeal"],
 ["docBlame", "QPF.P"],
 ["docBlame", "QPF.abs"],
 ["docBlame", "QPF.repr"],
 ["docBlame", "QuadraticMap.toFun"],
 ["docBlame", "ReaderT.callCC"],
 ["docBlame", "ReaderT.mk"],
 ["docBlame", "ReaderT.mkLabel"],
 ["docBlame", "RingQuot.preLift"],
 ["docBlame", "RingQuot.preLiftAlgHom"],
 ["docBlame", "RingQuot.toQuot"],
 ["docBlame", "SchwartzMap.toFun"],
 ["docBlame", "Shrink.rec"],
 ["docBlame", "SlashAction.map"],
 ["docBlame", "SlashInvariantForm.toFun"],
 ["docBlame", "StarAlgEquiv.restrictScalars"],
 ["docBlame", "StarAlgHom.restrictScalars"],
 ["docBlame", "StateT.callCC"],
 ["docBlame", "StateT.mk"],
 ["docBlame", "StateT.mkLabel"],
 ["docBlame", "StieltjesFunction.toFun"],
 ["docBlame", "Stream'.corec"],
 ["docBlame", "Stream'.corec'"],
 ["docBlame", "Stream'.corecOn"],
 ["docBlame", "Stream'.unfolds"],
 ["docBlame", "Submodule.«term_∙_»"],
 ["docBlame", "Traversable.foldMap"],
 ["docBlame", "Traversable.foldl"],
 ["docBlame", "Traversable.foldlm"],
 ["docBlame", "Traversable.foldr"],
 ["docBlame", "Traversable.foldrm"],
 ["docBlame", "Traversable.length"],
 ["docBlame", "Traversable.mapFold"],
 ["docBlame", "Trivialization.baseSet"],
 ["docBlame", "ULiftable.congr"],
 ["docBlame", "UniformFun.phi"],
 ["docBlame", "UnivLE.witness"],
 ["docBlame", "Valued.v"],
 ["docBlame", "VectorBundleCore.baseSet"],
 ["docBlame", "VectorBundleCore.coordChange"],
 ["docBlame", "VectorBundleCore.indexAt"],
 ["docBlame", "VectorPrebundle.pretrivializationAt"],
 ["docBlame", "VectorPrebundle.pretrivializationAtlas"],
 ["docBlame", "WithIdeal.i"],
 ["docBlame", "WriterT.adapt"],
 ["docBlame", "WriterT.callCC"],
 ["docBlame", "WriterT.callCC'"],
 ["docBlame", "WriterT.mk"],
 ["docBlame", "WriterT.mkLabel"],
 ["docBlame", "WriterT.mkLabel'"],
 ["docBlame", "WriterT.run"],
 ["docBlame", "WriterT.runThe"],
 ["docBlame", "algebraMap.coeHTCT"],
 ["docBlame", "Action.Hom.hom"],
 ["docBlame", "Affine.Simplex.points"],
 ["docBlame", "AlgebraicGeometry.PresheafedSpace.carrier"],
 ["docBlame", "AlgebraicGeometry.PresheafedSpace.presheaf"],
 ["docBlame", "Array.cyclicPermute!.cyclicPermuteAux"],
 ["docBlame", "Bimod.Hom.hom"],
 ["docBlame", "BoxIntegral.IntegrationParams.bDistortion"],
 ["docBlame", "BoxIntegral.IntegrationParams.bHenstock"],
 ["docBlame", "BoxIntegral.IntegrationParams.bRiemann"],
 ["docBlame", "Bundle.TotalSpace.mk'"],
 ["docBlame", "Bundle.TotalSpace.snd"],
 ["docBlame", "CategoryTheory.Bicategory.associator"],
 ["docBlame", "CategoryTheory.Bicategory.leftUnitor"],
 ["docBlame", "CategoryTheory.Bicategory.rightUnitor"],
 ["docBlame", "CategoryTheory.Bicategory.«term_▷_»"],
 ["docBlame", "CategoryTheory.Bicategory.«term_◁_»"],
 ["docBlame", "CategoryTheory.Bicategory.termα_"],
 ["docBlame", "CategoryTheory.Bicategory.«termλ_»"],
 ["docBlame", "CategoryTheory.Bicategory.termρ_"],
 ["docBlame", "CategoryTheory.Bicategory.whiskerLeft"],
 ["docBlame", "CategoryTheory.Bicategory.whiskerRight"],
 ["docBlame", "CategoryTheory.Comma.hom"],
 ["docBlame", "CategoryTheory.Comma.left"],
 ["docBlame", "CategoryTheory.Comma.right"],
 ["docBlame", "CategoryTheory.CommaMorphism.left"],
 ["docBlame", "CategoryTheory.CommaMorphism.right"],
 ["docBlame", "CategoryTheory.EnrichedCategory.Hom"],
 ["docBlame", "CategoryTheory.EnrichedCategory.comp"],
 ["docBlame", "CategoryTheory.EnrichedCategory.id"],
 ["docBlame", "CategoryTheory.EnrichedFunctor.map"],
 ["docBlame", "CategoryTheory.EnrichedFunctor.obj"],
 ["docBlame", "CategoryTheory.GlueData.J"],
 ["docBlame", "CategoryTheory.GlueData.U"],
 ["docBlame", "CategoryTheory.GlueData.V"],
 ["docBlame", "CategoryTheory.GlueData.f"],
 ["docBlame", "CategoryTheory.GlueData.t"],
 ["docBlame", "CategoryTheory.GlueData.t'"],
 ["docBlame", "CategoryTheory.GradedNatTrans.app"],
 ["docBlame", "CategoryTheory.HalfBraiding.β"],
 ["docBlame", "CategoryTheory.Mat_.X"],
 ["docBlame", "CategoryTheory.Mat_.ι"],
 ["docBlame", "CategoryTheory.Monad.CreatesColimitOfIsSplitPair"],
 ["docBlame", "CategoryTheory.Monad.HasCoequalizerOfIsSplitPair"],
 ["docBlame", "CategoryTheory.Monad.PreservesColimitOfIsReflexivePair"],
 ["docBlame", "CategoryTheory.Monad.PreservesColimitOfIsSplitPair"],
 ["docBlame", "CategoryTheory.Monad.ReflectsColimitOfIsSplitPair"],
 ["docBlame", "CategoryTheory.Presieve.yonedaFamilyOfElements_fromCocone"],
 ["docBlame", "CategoryTheory.Pretopology.coverings"],
 ["docBlame", "CategoryTheory.ProjectivePresentation.f"],
 ["docBlame", "CategoryTheory.ProjectivePresentation.p"],
 ["docBlame", "CategoryTheory.Subgroupoid.arrows"],
 ["docBlame", "CliffordAlgebra.EvenHom.bilin"],
 ["docBlame", "Computability.Encoding.decode"],
 ["docBlame", "Computability.Encoding.encode"],
 ["docBlame", "Computability.Encoding.Γ"],
 ["docBlame", "Computability.FinEncoding.ΓFin"],
 ["docBlame", "Computation.parallel.aux1"],
 ["docBlame", "Computation.parallel.aux2"],
 ["docBlame", "ContinuousLinearMap.NonlinearRightInverse.nnnorm"],
 ["docBlame", "ContinuousLinearMap.NonlinearRightInverse.toFun"],
 ["docBlame", "ContinuousMap.HomotopyEquiv.invFun"],
 ["docBlame", "ContinuousMap.HomotopyEquiv.toFun"],
 ["docBlame", "Ctop.Realizer.F"],
 ["docBlame", "Ctop.Realizer.σ"],
 ["docBlame", "DirectSum.Decomposition.decompose'"],
 ["docBlame", "DirectSum.GAlgebra.toFun"],
 ["docBlame", "Equiv.Perm.«termC[_,]»"],
 ["docBlame", "FBinopElab.SRec.args"],
 ["docBlame", "FBinopElab.SRec.name"],
 ["docBlame", "Filter.Germ.const"],
 ["docBlame", "Filter.Germ.ofFun"],
 ["docBlame", "Filter.Realizer.F"],
 ["docBlame", "Filter.Realizer.σ"],
 ["docBlame", "GenContFract.IntFractPair.b"],
 ["docBlame", "GenContFract.IntFractPair.fr"],
 ["docBlame", "GromovHausdorff.AuxGluingStruct.Space"],
 ["docBlame", "GromovHausdorff.AuxGluingStruct.embed"],
 ["docBlame", "GromovHausdorff.AuxGluingStruct.metric"],
 ["docBlame", "HomogeneousLocalization.NumDenSameDeg.deg"],
 ["docBlame", "HomogeneousLocalization.NumDenSameDeg.den"],
 ["docBlame", "HomogeneousLocalization.NumDenSameDeg.num"],
 ["docBlame", "HomologicalComplex.Hom.f"],
 ["docBlame", "Ideal.Filtration.N"],
 ["docBlame", "IntermediateField.delabAdjoinNotation.delabInsertArray"],
 ["docBlame", "IsDedekindDomain.HeightOneSpectrum.asIdeal"],
 ["docBlame", "Lean.Export.Alloc"],
 ["docBlame", "Lean.Export.Entry"],
 ["docBlame", "Lean.Export.OfState"],
 ["docBlame", "Lean.Export.State"],
 ["docBlame", "Lean.Export.alloc"],
 ["docBlame", "Lean.Export.biStr"],
 ["docBlame", "Lean.Export.exportDef"],
 ["docBlame", "Lean.Export.exportExpr"],
 ["docBlame", "Lean.Export.exportLevel"],
 ["docBlame", "Lean.Export.exportName"],
 ["docBlame", "Lean.Export.runExportM"],
 ["docBlame", "Lean.Expr.bvarIdx?"],
 ["docBlame", "Lean.Expr.getRevArg?"],
 ["docBlame", "Lean.Expr.modifyAppArgM"],
 ["docBlame", "Lean.Expr.modifyRevArg"],
 ["docBlame", "Lean.MVarId.casesType"],
 ["docBlame", "Lean.MVarId.congrCore!"],
 ["docBlame", "Lean.Name.isBlackListed"],
 ["docBlame", "Lean.PHashSet.toList"],
 ["docBlame", "LocallyFinite.Realizer.bas"],
 ["docBlame", "LocallyFinite.Realizer.sets"],
 ["docBlame", "Mathlib.Notation3.expandFoldl"],
 ["docBlame", "Mathlib.Notation3.expandFoldr"],
 ["docBlame", "Mathlib.Notation3.prettyPrintOpt"],
 ["docBlame", "Mathlib.Tactic.elabConfig"],
 ["docBlame", "Mathlib.Tactic.evalIntrov"],
 ["docBlame", "Mathlib.Tactic.setArgsRest"],
 ["docBlame", "Mathlib.Tactic.setTactic"],
 ["docBlame", "Mathlib.Tactic.tacticHave_"],
 ["docBlame", "Mathlib.Tactic.tacticLet_"],
 ["docBlame", "Mathlib.Tactic.tacticMatch_target_"],
 ["docBlame", "Mathlib.Tactic.tacticSet!_"],
 ["docBlame", "Mathlib.Tactic.tacticSuffices_"],
 ["docBlame", "Mathlib.Tactic.usingArg"],
 ["docBlame", "Mathlib.Tactic.withArgs"],
 ["docBlame", "Mathlib.WhatsNew.diffExtension"],
 ["docBlame", "Mathlib.WhatsNew.whatsNew"],
 ["docBlame", "Matrix.TransvectionStruct.c"],
 ["docBlame", "Matrix.TransvectionStruct.i"],
 ["docBlame", "Matrix.TransvectionStruct.j"],
 ["docBlame", "MeasureTheory.Content.toFun"],
 ["docBlame", "MeasureTheory.Filtration.seq"],
 ["docBlame", "MeasureTheory.Lp.constL"],
 ["docBlame", "MeasureTheory.SimpleFunc.toFun"],
 ["docBlame", "MeasureTheory.VectorMeasure.measureOf'"],
 ["docBlame", "Mod_.Hom.hom"],
 ["docBlame", "Module.Baer.supExtensionOfMaxSingleton"],
 ["docBlame", "Mon_.Hom.hom"],
 ["docBlame", "MonadCont.Label.apply"],
 ["docBlame", "Monoid.Foldl.get"],
 ["docBlame", "Monoid.Foldl.mk"],
 ["docBlame", "Monoid.Foldl.ofFreeMonoid"],
 ["docBlame", "Monoid.Foldr.get"],
 ["docBlame", "Monoid.Foldr.mk"],
 ["docBlame", "Monoid.Foldr.ofFreeMonoid"],
 ["docBlame", "Monoid.foldlM.get"],
 ["docBlame", "Monoid.foldlM.mk"],
 ["docBlame", "Monoid.foldlM.ofFreeMonoid"],
 ["docBlame", "Monoid.foldrM.get"],
 ["docBlame", "Monoid.foldrM.mk"],
 ["docBlame", "Monoid.foldrM.ofFreeMonoid"],
 ["docBlame", "Order.PFilter.dual"],
 ["docBlame", "PProd.mk.injArrow"],
 ["docBlame", "Prod.mk.injArrow"],
 ["docBlame", "Submodule.quotientPi_aux.invFun"],
 ["docBlame", "Submodule.quotientPi_aux.toFun"],
 ["docBlame", "Tactic.Elementwise.tacticElementwise!___"],
 ["docBlame", "Tactic.Elementwise.tacticElementwise___"],
 ["docBlame", "ToAdditive.additiveTestUnsafe.visit"],
 ["docBlame", "WittVector.Isocrystal.frob"],
 ["docBlame", "AlgebraicGeometry.PresheafedSpace.Hom.base"],
 ["docBlame", "AlgebraicGeometry.PresheafedSpace.Hom.c"],
 ["docBlame",
  "AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.tacticMem_tac"],
 ["docBlame",
  "AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.tacticMem_tac_aux"],
 ["docBlame", "AlgebraicTopology.DoldKan.MorphComponents.a"],
 ["docBlame", "AlgebraicTopology.DoldKan.MorphComponents.b"],
 ["docBlame", "CategoryTheory.Center.Hom.f"],
 ["docBlame", "CategoryTheory.FreeBicategory.Hom₂.mk"],
 ["docBlame", "CategoryTheory.Functor.CommShift.iso"],
 ["docBlame",
  "CategoryTheory.Limits.CoproductDisjoint.isInitialOfIsPullbackOfIsCoproduct"],
 ["docBlame", "CategoryTheory.Limits.MulticospanIndex.fst"],
 ["docBlame", "CategoryTheory.Limits.MulticospanIndex.left"],
 ["docBlame", "CategoryTheory.Limits.MulticospanIndex.right"],
 ["docBlame", "CategoryTheory.Limits.MulticospanIndex.snd"],
 ["docBlame", "CategoryTheory.Limits.MultispanIndex.fst"],
 ["docBlame", "CategoryTheory.Limits.MultispanIndex.left"],
 ["docBlame", "CategoryTheory.Limits.MultispanIndex.right"],
 ["docBlame", "CategoryTheory.Limits.MultispanIndex.snd"],
 ["docBlame", "CategoryTheory.Monad.CreatesColimitOfIsSplitPair.out"],
 ["docBlame", "CategoryTheory.Pretriangulated.Triangle.homMk"],
 ["docBlame", "CategoryTheory.Pretriangulated.Triangle.isoMk"],
 ["docBlame", "CategoryTheory.Triangulated.Octahedron.m₁"],
 ["docBlame", "CategoryTheory.Triangulated.Octahedron.m₃"],
 ["docBlame", "FirstOrder.Language.ElementaryEmbedding.toFun"],
 ["docBlame", "FirstOrder.Language.ElementarySubstructure.toSubstructure"],
 ["docBlame", "FirstOrder.Language.LEquiv.invLHom"],
 ["docBlame", "FirstOrder.Language.LEquiv.toLHom"],
 ["docBlame", "FirstOrder.Language.LHom.onFunction"],
 ["docBlame", "FirstOrder.Language.LHom.onRelation"],
 ["docBlame", "FirstOrder.Language.Prestructure.toStructure"],
 ["docBlame", "FirstOrder.Language.Substructure.carrier"],
 ["docBlame", "FirstOrder.Language.Term.relabel"],
 ["docBlame", "Lean.Elab.Command.irredDefLemma"],
 ["docBlame", "Lean.Export.Alloc.map"],
 ["docBlame", "Lean.Export.Alloc.next"],
 ["docBlame", "Lean.Export.OfState.get"],
 ["docBlame", "Lean.Export.OfState.modify"],
 ["docBlame", "Lean.Export.State.defs"],
 ["docBlame", "Lean.Export.State.exprs"],
 ["docBlame", "Lean.Export.State.levels"],
 ["docBlame", "Lean.Export.State.names"],
 ["docBlame", "Lean.Export.State.stk"],
 ["docBlame", "Lean.Export.exportDef.axdef"],
 ["docBlame", "Lean.Export.exportDef.defn"],
 ["docBlame", "Lean.Export.exportDef.ind"],
 ["docBlame", "Lean.Export.exportDef.indbody"],
 ["docBlame", "Lean.Export.exportDef.insert"],
 ["docBlame", "Lean.MVarId.congrN!.go"],
 ["docBlame", "Lean.MVarId.congrN!.post"],
 ["docBlame", "Lean.MVarId.congrSimp?.forSide"],
 ["docBlame", "Lean.MVarId.introsClean.eqImpOfIffImp"],
 ["docBlame", "Lean.MVarId.introsClean.heqImpOfEqImp"],
 ["docBlame", "Lean.MVarId.introsClean.isTrivialType"],
 ["docBlame", "Lean.MVarId.introsClean.loop"],
 ["docBlame", "Lean.MVarId.smartHCongr?.forSide"],
 ["docBlame", "Lean.MVarId.smartHCongr?.loop"],
 ["docBlame", "Lean.MVarId.userCongr?.forSide"],
 ["docBlame", "Lean.Parser.Attr.higherOrder"],
 ["docBlame", "Lean.Parser.Tactic.applyCongr"],
 ["docBlame", "Mathlib.Command.Variable.completeBinders"],
 ["docBlame", "Mathlib.Deriving.Fintype.mkFintype"],
 ["docBlame", "Mathlib.Deriving.Fintype.mkFintypeInstanceHandler"],
 ["docBlame", "Mathlib.Meta.NormNum.proveNatFibAux"],
 ["docBlame", "Mathlib.Tactic.CC.ACTodoEntry"],
 ["docBlame", "Mathlib.Tactic.CC.CCPropagationHandler"],
 ["docBlame", "Mathlib.Tactic.CC.CongruencesKey"],
 ["docBlame", "Mathlib.Tactic.CC.SymmCongruencesKey"],
 ["docBlame", "Mathlib.Tactic.CC.TodoEntry"],
 ["docBlame", "Mathlib.Tactic.Conv.convLHS"],
 ["docBlame", "Mathlib.Tactic.Conv.convRHS"],
 ["docBlame", "Mathlib.Tactic.Conv.convRun_conv_"],
 ["docBlame", "Mathlib.Tactic.ElimApp.evalNames"],
 ["docBlame", "Mathlib.Tactic.Find.«command#find_»"],
 ["docBlame", "Mathlib.Tactic.Find.findDeclsPerHead"],
 ["docBlame", "Mathlib.Tactic.Find.findType"],
 ["docBlame", "Mathlib.Tactic.Find.«tactic#find_»"],
 ["docBlame", "Mathlib.Tactic.Find.tacticFind"],
 ["docBlame", "Mathlib.Tactic.GCongr.exact"],
 ["docBlame", "Mathlib.Tactic.GCongr.tacticGcongr_discharger"],
 ["docBlame", "Mathlib.Tactic.Propose.proposeLemmas"],
 ["docBlame", "Mathlib.Tactic.evalIntrov.intro1PStep"],
 ["docBlame", "Mathlib.Tactic.evalIntrov.introsDep"],
 ["docBlame", "MeasureTheory.Measure.FiniteSpanningSetsIn.set"],
 ["docBlame", "Module.End.Eigenvalues.val"],
 ["docBlame", "Order.Ideal.PrimePair.F"],
 ["docBlame", "Order.Ideal.PrimePair.I"],
 ["docBlame", "Tactic.Elementwise.elementwiseExpr.mkHomElementwise"],
 ["docBlame", "TopCat.GlueData.MkCore.J"],
 ["docBlame", "TopCat.GlueData.MkCore.U"],
 ["docBlame", "TopCat.GlueData.MkCore.V"],
 ["docBlame", "TopCat.GlueData.MkCore.t"],
 ["docBlame", "TopCat.Presheaf.SubmonoidPresheaf.obj"],
 ["docBlame", "FirstOrder.Language.Theory.CompleteType.toTheory"],
 ["docBlame", "FirstOrder.Language.Theory.ModelType.Carrier"],
 ["docBlame", "Lean.Meta.mkRichHCongr.doubleTelescope.loop"],
 ["docBlame", "Lean.Meta.mkRichHCongr.withNewEqs.loop"],
 ["docBlame", "Mathlib.Command.Variable.completeBinders'.isVariableAlias"],
 ["docBlame", "Mathlib.Command.Variable.elabVariables.extendScope"],
 ["docBlame", "Mathlib.Command.Variable.elabVariables.process"],
 ["docBlame", "Mathlib.Command.Variable.variable?.checkRedundant"],
 ["docBlame", "Mathlib.Command.Variable.variable?.maxSteps"],
 ["docBlame", "Mathlib.Meta.NormNum.evalEq.intArm"],
 ["docBlame", "Mathlib.Meta.NormNum.evalEq.ratArm"],
 ["docBlame", "Mathlib.Meta.NormNum.evalMinFac.aux"],
 ["docBlame", "Mathlib.Meta.NormNum.evalMinFac.core"],
 ["docBlame", "Mathlib.Meta.NormNum.evalNatPrime.core"],
 ["docBlame", "Mathlib.Tactic.CC.CCPropagationHandler.propagated"],
 ["docBlame", "Mathlib.Tactic.CC.CCState.getNumROccs"],
 ["docBlame", "Mathlib.Tactic.CC.CCState.ppAC"],
 ["docBlame", "Mathlib.Tactic.CC.CCState.ppACApps"],
 ["docBlame", "Mathlib.Tactic.CC.CCState.ppACDecl"],
 ["docBlame", "Mathlib.Tactic.CC.CCState.ppACDecls"],
 ["docBlame", "Mathlib.Tactic.CC.CCState.ppACExpr"],
 ["docBlame", "Mathlib.Tactic.CC.CCState.ppACR"],
 ["docBlame", "Mathlib.Tactic.CC.CCState.ppParentOccs"],
 ["docBlame", "Mathlib.Tactic.CC.CCState.ppParentOccsAux"],
 ["docBlame", "Mathlib.Tactic.CC.CCStructure.cache"],
 ["docBlame", "Mathlib.Tactic.CC.CCStructure.normalizer"],
 ["docBlame", "Mathlib.Tactic.CC.CCStructure.phandler"],
 ["docBlame", "Mathlib.Tactic.CC.ParentOcc.expr"],
 ["docBlame", "Mathlib.Tactic.CC.SymmCongruencesKey.h₁"],
 ["docBlame", "Mathlib.Tactic.CC.SymmCongruencesKey.h₂"],
 ["docBlame", "Mathlib.Tactic.Coherence.LiftHom.lift"],
 ["docBlame", "Mathlib.Tactic.Coherence.LiftObj.lift"],
 ["docBlame", "Mathlib.Tactic.GCongr.ForwardExt.eval"],
 ["docBlame", "Mathlib.Tactic.GCongr.GCongrLemma.declName"],
 ["docBlame", "Mathlib.Tactic.GCongr.GCongrLemma.mainSubgoals"],
 ["docBlame", "Mathlib.Tactic.GCongr.GCongrLemma.varyingArgs"],
 ["docBlame", "Mathlib.Tactic.Monotonicity.mono.side"],
 ["docBlame", "Mathlib.Tactic.Sat.buildReify.mkPS"],
 ["docBlame", "Mathlib.Meta.NormNum.evalAdd.core.intArm"],
 ["docBlame", "Mathlib.Meta.NormNum.evalAdd.core.ratArm"],
 ["docBlame", "Mathlib.Meta.NormNum.evalLE.core.intArm"],
 ["docBlame", "Mathlib.Meta.NormNum.evalLE.core.ratArm"],
 ["docBlame", "Mathlib.Meta.NormNum.evalLT.core.intArm"],
 ["docBlame", "Mathlib.Meta.NormNum.evalLT.core.ratArm"],
 ["docBlame", "Mathlib.Meta.NormNum.evalMul.core.intArm"],
 ["docBlame", "Mathlib.Meta.NormNum.evalMul.core.ratArm"]]
