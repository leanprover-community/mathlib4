/-
Copyright (c) 2016 Microsoft Corporation. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Leonardo de Moura
-/
import Lean.Parser.Term
import Std.Classes.SetNotation
import Mathlib.Mathport.Rename

/-!

# Sets

This file sets up the theory of sets whose elements have a given type.

## Main definitions

Given a type `X` and a predicate `p : X ‚Üí Prop`:

* `Set X` : the type of sets whose elements have type `X`
* `{a : X | p a} : Set X` : the set of all elements of `X` satisfying `p`
* `{a | p a} : Set X` : a more concise notation for `{a : X | p a}`
* `{a ‚àà S | p a} : Set X` : given `S : Set X`, the subset of `S` consisting of
   its elements satisfying `p`.

## Implementation issues

As in Lean 3, `Set X := X ‚Üí Prop`

I didn't call this file Data.Set.Basic because it contains core Lean 3
stuff which happens before mathlib3's data.set.basic .
This file is a port of the core Lean 3 file `lib/lean/library/init/data/set.lean`.

-/

set_option autoImplicit true

def Set (Œ± : Type u) := Œ± ‚Üí Prop
#align set Set

def setOf {Œ± : Type u} (p : Œ± ‚Üí Prop) : Set Œ± :=
  p
#align set_of setOf

namespace Set

/-- Membership in a set -/
protected def Mem (a : Œ±) (s : Set Œ±) : Prop :=
  s a

instance : Membership Œ± (Set Œ±) :=
  ‚ü®Set.Mem‚ü©

theorem ext {a b : Set Œ±} (h : ‚àÄ (x : Œ±), x ‚àà a ‚Üî x ‚àà b) : a = b :=
  funext (fun x ‚Ü¶ propext (h x))

protected def Subset (s‚ÇÅ s‚ÇÇ : Set Œ±) :=
  ‚àÄ ‚¶Éa‚¶Ñ, a ‚àà s‚ÇÅ ‚Üí a ‚àà s‚ÇÇ

/-- Porting note: we introduce `‚â§` before `‚äÜ` to help the unifier when applying lattice theorems
to subset hypotheses. -/
instance : LE (Set Œ±) :=
  ‚ü®Set.Subset‚ü©

instance : HasSubset (Set Œ±) :=
  ‚ü®(¬∑ ‚â§ ¬∑)‚ü©

instance : EmptyCollection (Set Œ±) :=
  ‚ü®Œª _ => False‚ü©

open Std.ExtendedBinder in
syntax "{" extBinder " | " term "}" : term

macro_rules
  | `({ $x:ident | $p }) => `(setOf fun $x:ident ‚Ü¶ $p)
  | `({ $x:ident : $t | $p }) => `(setOf fun $x:ident : $t ‚Ü¶ $p)
  | `({ $x:ident $b:binderPred | $p }) =>
    `(setOf fun $x:ident ‚Ü¶ satisfies_binder_pred% $x $b ‚àß $p)

@[app_unexpander setOf]
def setOf.unexpander : Lean.PrettyPrinter.Unexpander
  | `($_ fun $x:ident ‚Ü¶ $p) => `({ $x:ident | $p })
  | `($_ fun ($x:ident : $ty:term) ‚Ü¶ $p) => `({ $x:ident : $ty:term | $p })
  | _ => throw ()

open Std.ExtendedBinder in
macro (priority := low) "{" t:term " | " bs:extBinders "}" : term =>
  `({x | ‚àÉ·µâ $bs:extBinders, $t = x})

def univ : Set Œ± := {_a | True}
#align set.univ Set.univ

protected def insert (a : Œ±) (s : Set Œ±) : Set Œ± := {b | b = a ‚à® b ‚àà s}

instance : Insert Œ± (Set Œ±) := ‚ü®Set.insert‚ü©

protected def singleton (a : Œ±) : Set Œ± := {b | b = a}

instance instSingletonSet : Singleton Œ± (Set Œ±) := ‚ü®Set.singleton‚ü©

protected def union (s‚ÇÅ s‚ÇÇ : Set Œ±) : Set Œ± := {a | a ‚àà s‚ÇÅ ‚à® a ‚àà s‚ÇÇ}

instance : Union (Set Œ±) := ‚ü®Set.union‚ü©

protected def inter (s‚ÇÅ s‚ÇÇ : Set Œ±) : Set Œ± := {a | a ‚àà s‚ÇÅ ‚àß a ‚àà s‚ÇÇ}

instance : Inter (Set Œ±) := ‚ü®Set.inter‚ü©

protected def compl (s : Set Œ±) : Set Œ± := {a | a ‚àâ s}

protected def diff (s t : Set Œ±) : Set Œ± := {a ‚àà s | a ‚àâ t}

instance : SDiff (Set Œ±) := ‚ü®Set.diff‚ü©

def powerset (s : Set Œ±) : Set (Set Œ±) := {t | t ‚äÜ s}

prefix:100 "ùí´" => powerset

def image (f : Œ± ‚Üí Œ≤) (s : Set Œ±) : Set Œ≤ := {f a | a ‚àà s}

instance : Functor Set where map := @Set.image

instance : LawfulFunctor Set where
  id_map _ := funext fun _ ‚Ü¶ propext ‚ü®Œª ‚ü®_, sb, rfl‚ü© => sb, Œª sb => ‚ü®_, sb, rfl‚ü©‚ü©
  comp_map g h _ := funext $ Œª c => propext
    ‚ü®Œª ‚ü®a, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü© => ‚ü®g a, ‚ü®‚ü®a, ‚ü®h‚ÇÅ, rfl‚ü©‚ü©, h‚ÇÇ‚ü©‚ü©,
     Œª ‚ü®_, ‚ü®‚ü®a, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©, h‚ÇÉ‚ü©‚ü© => ‚ü®a, ‚ü®h‚ÇÅ, show h (g a) = c from h‚ÇÇ ‚ñ∏ h‚ÇÉ‚ü©‚ü©‚ü©
  map_const := rfl

end Set
