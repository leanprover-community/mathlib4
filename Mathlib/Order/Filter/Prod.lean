/-
Copyright (c) 2022 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johanes H√∂lzl, Patrick Massot, Yury Kudryashov, Kevin Wilson, Heather Macbeth
-/
import Mathlib.Order.Filter.Basic

#align_import order.filter.prod from "leanprover-community/mathlib"@"d6fad0e5bf2d6f48da9175d25c3dc5706b3834ce"

/-!
# Product and coproduct filters

In this file we define `Filter.prod f g` (notation: `f √óÀ¢ g`) and `Filter.coprod f g`. The product
of two filters is the largest filter `l` such that `Filter.Tendsto Prod.fst l f` and
`Filter.Tendsto Prod.snd l g`.

## Implementation details

The product filter cannot be defined using the monad structure on filters. For example:

```lean
F := do {x ‚Üê seq, y ‚Üê top, return (x, y)}
G := do {y ‚Üê top, x ‚Üê seq, return (x, y)}
```
hence:
```lean
s ‚àà F  ‚Üî  ‚àÉ n, [n..‚àû] √ó univ ‚äÜ s
s ‚àà G  ‚Üî  ‚àÄ i:‚Ñï, ‚àÉ n, [n..‚àû] √ó {i} ‚äÜ s
```
Now `‚ãÉ i, [i..‚àû] √ó {i}` is in `G` but not in `F`.
As product filter we want to have `F` as result.

## Notations

* `f √óÀ¢ g` : `Filter.prod f g`, localized in `Filter`.

-/

open Set

open Filter

namespace Filter

variable {Œ± Œ≤ Œ≥ Œ¥ : Type*} {Œπ : Sort*}

section Prod

variable {s : Set Œ±} {t : Set Œ≤} {f : Filter Œ±} {g : Filter Œ≤}

/-- Product of filters. This is the filter generated by cartesian products
of elements of the component filters. -/
protected def prod (f : Filter Œ±) (g : Filter Œ≤) : Filter (Œ± √ó Œ≤) :=
  f.comap Prod.fst ‚äì g.comap Prod.snd
#align filter.prod Filter.prod

instance instSProd : SProd (Filter Œ±) (Filter Œ≤) (Filter (Œ± √ó Œ≤)) where
  sprod := Filter.prod

theorem prod_mem_prod (hs : s ‚àà f) (ht : t ‚àà g) : s √óÀ¢ t ‚àà f √óÀ¢ g :=
  inter_mem_inf (preimage_mem_comap hs) (preimage_mem_comap ht)
#align filter.prod_mem_prod Filter.prod_mem_prod

theorem mem_prod_iff {s : Set (Œ± √ó Œ≤)} {f : Filter Œ±} {g : Filter Œ≤} :
    s ‚àà f √óÀ¢ g ‚Üî ‚àÉ t‚ÇÅ ‚àà f, ‚àÉ t‚ÇÇ ‚àà g, t‚ÇÅ √óÀ¢ t‚ÇÇ ‚äÜ s := by
  simp only [SProd.sprod, Filter.prod]
  constructor
  ¬∑ rintro ‚ü®t‚ÇÅ, ‚ü®s‚ÇÅ, hs‚ÇÅ, hts‚ÇÅ‚ü©, t‚ÇÇ, ‚ü®s‚ÇÇ, hs‚ÇÇ, hts‚ÇÇ‚ü©, rfl‚ü©
    exact ‚ü®s‚ÇÅ, hs‚ÇÅ, s‚ÇÇ, hs‚ÇÇ, fun p ‚ü®h, h'‚ü© => ‚ü®hts‚ÇÅ h, hts‚ÇÇ h'‚ü©‚ü©
  ¬∑ rintro ‚ü®t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, h‚ü©
    exact mem_inf_of_inter (preimage_mem_comap ht‚ÇÅ) (preimage_mem_comap ht‚ÇÇ) h
#align filter.mem_prod_iff Filter.mem_prod_iff

@[simp]
theorem prod_mem_prod_iff [f.NeBot] [g.NeBot] : s √óÀ¢ t ‚àà f √óÀ¢ g ‚Üî s ‚àà f ‚àß t ‚àà g :=
  ‚ü®fun h =>
    let ‚ü®_s', hs', _t', ht', H‚ü© := mem_prod_iff.1 h
    (prod_subset_prod_iff.1 H).elim
      (fun ‚ü®hs's, ht't‚ü© => ‚ü®mem_of_superset hs' hs's, mem_of_superset ht' ht't‚ü©) fun h =>
      h.elim (fun hs'e => absurd hs'e (nonempty_of_mem hs').ne_empty) fun ht'e =>
        absurd ht'e (nonempty_of_mem ht').ne_empty,
    fun h => prod_mem_prod h.1 h.2‚ü©
#align filter.prod_mem_prod_iff Filter.prod_mem_prod_iff

theorem mem_prod_principal {s : Set (Œ± √ó Œ≤)} :
    s ‚àà f √óÀ¢ ùìü t ‚Üî { a | ‚àÄ b ‚àà t, (a, b) ‚àà s } ‚àà f := by
  rw [‚Üê @exists_mem_subset_iff _ f, mem_prod_iff]
  refine' exists_congr fun u => Iff.rfl.and ‚ü®_, fun h => ‚ü®t, mem_principal_self t, _‚ü©‚ü©
  ¬∑ rintro ‚ü®v, v_in, hv‚ü© a a_in b b_in
    exact hv (mk_mem_prod a_in <| v_in b_in)
  ¬∑ rintro ‚ü®x, y‚ü© ‚ü®hx, hy‚ü©
    exact h hx y hy
#align filter.mem_prod_principal Filter.mem_prod_principal

theorem mem_prod_top {s : Set (Œ± √ó Œ≤)} :
    s ‚àà f √óÀ¢ (‚ä§ : Filter Œ≤) ‚Üî { a | ‚àÄ b, (a, b) ‚àà s } ‚àà f := by
  rw [‚Üê principal_univ, mem_prod_principal]
  simp only [mem_univ, forall_true_left]
#align filter.mem_prod_top Filter.mem_prod_top

theorem eventually_prod_principal_iff {p : Œ± √ó Œ≤ ‚Üí Prop} {s : Set Œ≤} :
    (‚àÄ·∂† x : Œ± √ó Œ≤ in f √óÀ¢ ùìü s, p x) ‚Üî ‚àÄ·∂† x : Œ± in f, ‚àÄ y : Œ≤, y ‚àà s ‚Üí p (x, y) := by
  rw [eventually_iff, eventually_iff, mem_prod_principal]
  simp only [mem_setOf_eq]
#align filter.eventually_prod_principal_iff Filter.eventually_prod_principal_iff

theorem comap_prod (f : Œ± ‚Üí Œ≤ √ó Œ≥) (b : Filter Œ≤) (c : Filter Œ≥) :
    comap f (b √óÀ¢ c) = comap (Prod.fst ‚àò f) b ‚äì comap (Prod.snd ‚àò f) c := by
  erw [comap_inf, Filter.comap_comap, Filter.comap_comap]
#align filter.comap_prod Filter.comap_prod

theorem prod_top : f √óÀ¢ (‚ä§ : Filter Œ≤) = f.comap Prod.fst := by
  dsimp only [SProd.sprod]
  rw [Filter.prod, comap_top, inf_top_eq]
#align filter.prod_top Filter.prod_top

theorem top_prod : (‚ä§ : Filter Œ±) √óÀ¢ g = g.comap Prod.snd := by
  dsimp only [SProd.sprod]
  rw [Filter.prod, comap_top, top_inf_eq]

theorem sup_prod (f‚ÇÅ f‚ÇÇ : Filter Œ±) (g : Filter Œ≤) : (f‚ÇÅ ‚äî f‚ÇÇ) √óÀ¢ g = (f‚ÇÅ √óÀ¢ g) ‚äî (f‚ÇÇ √óÀ¢ g) := by
  dsimp only [SProd.sprod]
  rw [Filter.prod, comap_sup, inf_sup_right, ‚Üê Filter.prod, ‚Üê Filter.prod]
#align filter.sup_prod Filter.sup_prod

theorem prod_sup (f : Filter Œ±) (g‚ÇÅ g‚ÇÇ : Filter Œ≤) : f √óÀ¢ (g‚ÇÅ ‚äî g‚ÇÇ) = (f √óÀ¢ g‚ÇÅ) ‚äî (f √óÀ¢ g‚ÇÇ) := by
  dsimp only [SProd.sprod]
  rw [Filter.prod, comap_sup, inf_sup_left, ‚Üê Filter.prod, ‚Üê Filter.prod]
#align filter.prod_sup Filter.prod_sup

theorem eventually_prod_iff {p : Œ± √ó Œ≤ ‚Üí Prop} :
    (‚àÄ·∂† x in f √óÀ¢ g, p x) ‚Üî
      ‚àÉ pa : Œ± ‚Üí Prop, (‚àÄ·∂† x in f, pa x) ‚àß ‚àÉ pb : Œ≤ ‚Üí Prop, (‚àÄ·∂† y in g, pb y) ‚àß
        ‚àÄ {x}, pa x ‚Üí ‚àÄ {y}, pb y ‚Üí p (x, y) := by
  simpa only [Set.prod_subset_iff] using @mem_prod_iff Œ± Œ≤ p f g
#align filter.eventually_prod_iff Filter.eventually_prod_iff

theorem tendsto_fst : Tendsto Prod.fst (f √óÀ¢ g) f :=
  tendsto_inf_left tendsto_comap
#align filter.tendsto_fst Filter.tendsto_fst

theorem tendsto_snd : Tendsto Prod.snd (f √óÀ¢ g) g :=
  tendsto_inf_right tendsto_comap
#align filter.tendsto_snd Filter.tendsto_snd

/-- If a function tends to a product `g √óÀ¢ h` of filters, then its first component tends to
`g`. See also `Filter.Tendsto.fst_nhds` for the special case of converging to a point in a
product of two topological spaces. -/
theorem Tendsto.fst {h : Filter Œ≥} {m : Œ± ‚Üí Œ≤ √ó Œ≥} (H : Tendsto m f (g √óÀ¢ h)) :
    Tendsto (fun a ‚Ü¶ (m a).1) f g :=
  tendsto_fst.comp H

/-- If a function tends to a product `g √óÀ¢ h` of filters, then its second component tends to
`h`. See also `Filter.Tendsto.snd_nhds` for the special case of converging to a point in a
product of two topological spaces. -/
theorem Tendsto.snd {h : Filter Œ≥} {m : Œ± ‚Üí Œ≤ √ó Œ≥} (H : Tendsto m f (g √óÀ¢ h)) :
    Tendsto (fun a ‚Ü¶ (m a).2) f h :=
  tendsto_snd.comp H

theorem Tendsto.prod_mk {h : Filter Œ≥} {m‚ÇÅ : Œ± ‚Üí Œ≤} {m‚ÇÇ : Œ± ‚Üí Œ≥}
    (h‚ÇÅ : Tendsto m‚ÇÅ f g) (h‚ÇÇ : Tendsto m‚ÇÇ f h) : Tendsto (fun x => (m‚ÇÅ x, m‚ÇÇ x)) f (g √óÀ¢ h) :=
  tendsto_inf.2 ‚ü®tendsto_comap_iff.2 h‚ÇÅ, tendsto_comap_iff.2 h‚ÇÇ‚ü©
#align filter.tendsto.prod_mk Filter.Tendsto.prod_mk

theorem tendsto_prod_swap : Tendsto (Prod.swap : Œ± √ó Œ≤ ‚Üí Œ≤ √ó Œ±) (f √óÀ¢ g) (g √óÀ¢ f) :=
  tendsto_snd.prod_mk tendsto_fst
#align filter.tendsto_prod_swap Filter.tendsto_prod_swap

theorem Eventually.prod_inl {la : Filter Œ±} {p : Œ± ‚Üí Prop} (h : ‚àÄ·∂† x in la, p x) (lb : Filter Œ≤) :
    ‚àÄ·∂† x in la √óÀ¢ lb, p (x : Œ± √ó Œ≤).1 :=
  tendsto_fst.eventually h
#align filter.eventually.prod_inl Filter.Eventually.prod_inl

theorem Eventually.prod_inr {lb : Filter Œ≤} {p : Œ≤ ‚Üí Prop} (h : ‚àÄ·∂† x in lb, p x) (la : Filter Œ±) :
    ‚àÄ·∂† x in la √óÀ¢ lb, p (x : Œ± √ó Œ≤).2 :=
  tendsto_snd.eventually h
#align filter.eventually.prod_inr Filter.Eventually.prod_inr

theorem Eventually.prod_mk {la : Filter Œ±} {pa : Œ± ‚Üí Prop} (ha : ‚àÄ·∂† x in la, pa x) {lb : Filter Œ≤}
    {pb : Œ≤ ‚Üí Prop} (hb : ‚àÄ·∂† y in lb, pb y) : ‚àÄ·∂† p in la √óÀ¢ lb, pa (p : Œ± √ó Œ≤).1 ‚àß pb p.2 :=
  (ha.prod_inl lb).and (hb.prod_inr la)
#align filter.eventually.prod_mk Filter.Eventually.prod_mk

theorem EventuallyEq.prod_map {Œ¥} {la : Filter Œ±} {fa ga : Œ± ‚Üí Œ≥} (ha : fa =·∂†[la] ga)
    {lb : Filter Œ≤} {fb gb : Œ≤ ‚Üí Œ¥} (hb : fb =·∂†[lb] gb) :
    Prod.map fa fb =·∂†[la √óÀ¢ lb] Prod.map ga gb :=
  (Eventually.prod_mk ha hb).mono fun _ h => Prod.ext h.1 h.2
#align filter.eventually_eq.prod_map Filter.EventuallyEq.prod_map

theorem EventuallyLE.prod_map {Œ¥} [LE Œ≥] [LE Œ¥] {la : Filter Œ±} {fa ga : Œ± ‚Üí Œ≥} (ha : fa ‚â§·∂†[la] ga)
    {lb : Filter Œ≤} {fb gb : Œ≤ ‚Üí Œ¥} (hb : fb ‚â§·∂†[lb] gb) :
    Prod.map fa fb ‚â§·∂†[la √óÀ¢ lb] Prod.map ga gb :=
  Eventually.prod_mk ha hb
#align filter.eventually_le.prod_map Filter.EventuallyLE.prod_map

theorem Eventually.curry {la : Filter Œ±} {lb : Filter Œ≤} {p : Œ± √ó Œ≤ ‚Üí Prop}
    (h : ‚àÄ·∂† x in la √óÀ¢ lb, p x) : ‚àÄ·∂† x in la, ‚àÄ·∂† y in lb, p (x, y) := by
  rcases eventually_prod_iff.1 h with ‚ü®pa, ha, pb, hb, h‚ü©
  exact ha.mono fun a ha => hb.mono fun b hb => h ha hb
#align filter.eventually.curry Filter.Eventually.curry

protected lemma Frequently.uncurry {la : Filter Œ±} {lb : Filter Œ≤} {p : Œ± ‚Üí Œ≤ ‚Üí Prop}
    (h : ‚àÉ·∂† x in la, ‚àÉ·∂† y in lb, p x y) : ‚àÉ·∂† xy in la √óÀ¢ lb, p xy.1 xy.2 :=
  mt (fun h ‚Ü¶ by simpa only [not_frequently] using h.curry) h

/-- A fact that is eventually true about all pairs `l √óÀ¢ l` is eventually true about
all diagonal pairs `(i, i)` -/
theorem Eventually.diag_of_prod {p : Œ± √ó Œ± ‚Üí Prop} (h : ‚àÄ·∂† i in f √óÀ¢ f, p i) :
    ‚àÄ·∂† i in f, p (i, i) := by
  obtain ‚ü®t, ht, s, hs, hst‚ü© := eventually_prod_iff.1 h
  apply (ht.and hs).mono fun x hx => hst hx.1 hx.2
#align filter.eventually.diag_of_prod Filter.Eventually.diag_of_prod

theorem Eventually.diag_of_prod_left {f : Filter Œ±} {g : Filter Œ≥} {p : (Œ± √ó Œ±) √ó Œ≥ ‚Üí Prop} :
    (‚àÄ·∂† x in (f √óÀ¢ f) √óÀ¢ g, p x) ‚Üí ‚àÄ·∂† x : Œ± √ó Œ≥ in f √óÀ¢ g, p ((x.1, x.1), x.2) := by
  intro h
  obtain ‚ü®t, ht, s, hs, hst‚ü© := eventually_prod_iff.1 h
  exact (ht.diag_of_prod.prod_mk hs).mono fun x hx => by simp only [hst hx.1 hx.2]
#align filter.eventually.diag_of_prod_left Filter.Eventually.diag_of_prod_left

theorem Eventually.diag_of_prod_right {f : Filter Œ±} {g : Filter Œ≥} {p : Œ± √ó Œ≥ √ó Œ≥ ‚Üí Prop} :
    (‚àÄ·∂† x in f √óÀ¢ (g √óÀ¢ g), p x) ‚Üí ‚àÄ·∂† x : Œ± √ó Œ≥ in f √óÀ¢ g, p (x.1, x.2, x.2) := by
  intro h
  obtain ‚ü®t, ht, s, hs, hst‚ü© := eventually_prod_iff.1 h
  exact (ht.prod_mk hs.diag_of_prod).mono fun x hx => by simp only [hst hx.1 hx.2]
#align filter.eventually.diag_of_prod_right Filter.Eventually.diag_of_prod_right

theorem tendsto_diag : Tendsto (fun i => (i, i)) f (f √óÀ¢ f) :=
  tendsto_iff_eventually.mpr fun _ hpr => hpr.diag_of_prod
#align filter.tendsto_diag Filter.tendsto_diag

theorem prod_iInf_left [Nonempty Œπ] {f : Œπ ‚Üí Filter Œ±} {g : Filter Œ≤} :
    (‚®Ö i, f i) √óÀ¢ g = ‚®Ö i, f i √óÀ¢ g := by
  dsimp only [SProd.sprod]
  rw [Filter.prod, comap_iInf, iInf_inf]
  simp only [Filter.prod, eq_self_iff_true]
#align filter.prod_infi_left Filter.prod_iInf_left

theorem prod_iInf_right [Nonempty Œπ] {f : Filter Œ±} {g : Œπ ‚Üí Filter Œ≤} :
    (f √óÀ¢ ‚®Ö i, g i) = ‚®Ö i, f √óÀ¢ g i := by
  dsimp only [SProd.sprod]
  rw [Filter.prod, comap_iInf, inf_iInf]
  simp only [Filter.prod, eq_self_iff_true]
#align filter.prod_infi_right Filter.prod_iInf_right

@[mono, gcongr]
theorem prod_mono {f‚ÇÅ f‚ÇÇ : Filter Œ±} {g‚ÇÅ g‚ÇÇ : Filter Œ≤} (hf : f‚ÇÅ ‚â§ f‚ÇÇ) (hg : g‚ÇÅ ‚â§ g‚ÇÇ) :
    f‚ÇÅ √óÀ¢ g‚ÇÅ ‚â§ f‚ÇÇ √óÀ¢ g‚ÇÇ :=
  inf_le_inf (comap_mono hf) (comap_mono hg)
#align filter.prod_mono Filter.prod_mono

@[gcongr]
theorem prod_mono_left (g : Filter Œ≤) {f‚ÇÅ f‚ÇÇ : Filter Œ±} (hf : f‚ÇÅ ‚â§ f‚ÇÇ) : f‚ÇÅ √óÀ¢ g ‚â§ f‚ÇÇ √óÀ¢ g :=
  Filter.prod_mono hf rfl.le
#align filter.prod_mono_left Filter.prod_mono_left

@[gcongr]
theorem prod_mono_right (f : Filter Œ±) {g‚ÇÅ g‚ÇÇ : Filter Œ≤} (hf : g‚ÇÅ ‚â§ g‚ÇÇ) : f √óÀ¢ g‚ÇÅ ‚â§ f √óÀ¢ g‚ÇÇ :=
  Filter.prod_mono rfl.le hf
#align filter.prod_mono_right Filter.prod_mono_right

theorem prod_comap_comap_eq.{u, v, w, x} {Œ±‚ÇÅ : Type u} {Œ±‚ÇÇ : Type v} {Œ≤‚ÇÅ : Type w} {Œ≤‚ÇÇ : Type x}
    {f‚ÇÅ : Filter Œ±‚ÇÅ} {f‚ÇÇ : Filter Œ±‚ÇÇ} {m‚ÇÅ : Œ≤‚ÇÅ ‚Üí Œ±‚ÇÅ} {m‚ÇÇ : Œ≤‚ÇÇ ‚Üí Œ±‚ÇÇ} :
    comap m‚ÇÅ f‚ÇÅ √óÀ¢ comap m‚ÇÇ f‚ÇÇ = comap (fun p : Œ≤‚ÇÅ √ó Œ≤‚ÇÇ => (m‚ÇÅ p.1, m‚ÇÇ p.2)) (f‚ÇÅ √óÀ¢ f‚ÇÇ) := by
  simp only [SProd.sprod, Filter.prod, comap_comap, comap_inf, (¬∑ ‚àò ¬∑)]
#align filter.prod_comap_comap_eq Filter.prod_comap_comap_eq

theorem prod_comm' : f √óÀ¢ g = comap Prod.swap (g √óÀ¢ f) := by
  simp only [SProd.sprod, Filter.prod, comap_comap, (¬∑ ‚àò ¬∑), inf_comm, Prod.swap, comap_inf]
#align filter.prod_comm' Filter.prod_comm'

theorem prod_comm : f √óÀ¢ g = map (fun p : Œ≤ √ó Œ± => (p.2, p.1)) (g √óÀ¢ f) := by
  rw [prod_comm', ‚Üê map_swap_eq_comap_swap]
  rfl
#align filter.prod_comm Filter.prod_comm

theorem mem_prod_iff_left {s : Set (Œ± √ó Œ≤)} :
    s ‚àà f √óÀ¢ g ‚Üî ‚àÉ t ‚àà f, ‚àÄ·∂† y in g, ‚àÄ x ‚àà t, (x, y) ‚àà s := by
  simp only [mem_prod_iff, prod_subset_iff]
  refine exists_congr fun _ => Iff.rfl.and <| Iff.trans ?_ exists_mem_subset_iff
  exact exists_congr fun _ => Iff.rfl.and forall‚ÇÇ_swap

theorem mem_prod_iff_right {s : Set (Œ± √ó Œ≤)} :
    s ‚àà f √óÀ¢ g ‚Üî ‚àÉ t ‚àà g, ‚àÄ·∂† x in f, ‚àÄ y ‚àà t, (x, y) ‚àà s := by
  rw [prod_comm, mem_map, mem_prod_iff_left]; rfl

@[simp]
theorem map_fst_prod (f : Filter Œ±) (g : Filter Œ≤) [NeBot g] : map Prod.fst (f √óÀ¢ g) = f := by
  ext s
  simp only [mem_map, mem_prod_iff_left, mem_preimage, eventually_const, ‚Üê subset_def,
    exists_mem_subset_iff]
#align filter.map_fst_prod Filter.map_fst_prod

@[simp]
theorem map_snd_prod (f : Filter Œ±) (g : Filter Œ≤) [NeBot f] : map Prod.snd (f √óÀ¢ g) = g := by
  rw [prod_comm, map_map]; apply map_fst_prod
#align filter.map_snd_prod Filter.map_snd_prod

@[simp]
theorem prod_le_prod {f‚ÇÅ f‚ÇÇ : Filter Œ±} {g‚ÇÅ g‚ÇÇ : Filter Œ≤} [NeBot f‚ÇÅ] [NeBot g‚ÇÅ] :
    f‚ÇÅ √óÀ¢ g‚ÇÅ ‚â§ f‚ÇÇ √óÀ¢ g‚ÇÇ ‚Üî f‚ÇÅ ‚â§ f‚ÇÇ ‚àß g‚ÇÅ ‚â§ g‚ÇÇ :=
  ‚ü®fun h =>
    ‚ü®map_fst_prod f‚ÇÅ g‚ÇÅ ‚ñ∏ tendsto_fst.mono_left h, map_snd_prod f‚ÇÅ g‚ÇÅ ‚ñ∏ tendsto_snd.mono_left h‚ü©,
    fun h => prod_mono h.1 h.2‚ü©
#align filter.prod_le_prod Filter.prod_le_prod

@[simp]
theorem prod_inj {f‚ÇÅ f‚ÇÇ : Filter Œ±} {g‚ÇÅ g‚ÇÇ : Filter Œ≤} [NeBot f‚ÇÅ] [NeBot g‚ÇÅ] :
    f‚ÇÅ √óÀ¢ g‚ÇÅ = f‚ÇÇ √óÀ¢ g‚ÇÇ ‚Üî f‚ÇÅ = f‚ÇÇ ‚àß g‚ÇÅ = g‚ÇÇ := by
  refine' ‚ü®fun h => _, fun h => h.1 ‚ñ∏ h.2 ‚ñ∏ rfl‚ü©
  have hle : f‚ÇÅ ‚â§ f‚ÇÇ ‚àß g‚ÇÅ ‚â§ g‚ÇÇ := prod_le_prod.1 h.le
  haveI := neBot_of_le hle.1; haveI := neBot_of_le hle.2
  exact ‚ü®hle.1.antisymm <| (prod_le_prod.1 h.ge).1, hle.2.antisymm <| (prod_le_prod.1 h.ge).2‚ü©
#align filter.prod_inj Filter.prod_inj

theorem eventually_swap_iff {p : Œ± √ó Œ≤ ‚Üí Prop} :
    (‚àÄ·∂† x : Œ± √ó Œ≤ in f √óÀ¢ g, p x) ‚Üî ‚àÄ·∂† y : Œ≤ √ó Œ± in g √óÀ¢ f, p y.swap := by
  rw [prod_comm]; rfl
#align filter.eventually_swap_iff Filter.eventually_swap_iff

theorem prod_assoc (f : Filter Œ±) (g : Filter Œ≤) (h : Filter Œ≥) :
    map (Equiv.prodAssoc Œ± Œ≤ Œ≥) ((f √óÀ¢ g) √óÀ¢ h) = f √óÀ¢ (g √óÀ¢ h) := by
  simp_rw [‚Üê comap_equiv_symm, SProd.sprod, Filter.prod, comap_inf, comap_comap, inf_assoc, (¬∑ ‚àò ¬∑),
    Equiv.prodAssoc_symm_apply]
#align filter.prod_assoc Filter.prod_assoc

theorem prod_assoc_symm (f : Filter Œ±) (g : Filter Œ≤) (h : Filter Œ≥) :
    map (Equiv.prodAssoc Œ± Œ≤ Œ≥).symm (f √óÀ¢ (g √óÀ¢ h)) = (f √óÀ¢ g) √óÀ¢ h := by
  simp_rw [map_equiv_symm, SProd.sprod, Filter.prod, comap_inf, comap_comap, inf_assoc,
    Function.comp, Equiv.prodAssoc_apply]
#align filter.prod_assoc_symm Filter.prod_assoc_symm

theorem tendsto_prodAssoc {h : Filter Œ≥} :
    Tendsto (Equiv.prodAssoc Œ± Œ≤ Œ≥) ((f √óÀ¢ g) √óÀ¢ h) (f √óÀ¢ (g √óÀ¢ h)) :=
  (prod_assoc f g h).le
#align filter.tendsto_prod_assoc Filter.tendsto_prodAssoc

theorem tendsto_prodAssoc_symm {h : Filter Œ≥} :
    Tendsto (Equiv.prodAssoc Œ± Œ≤ Œ≥).symm (f √óÀ¢ (g √óÀ¢ h)) ((f √óÀ¢ g) √óÀ¢ h) :=
  (prod_assoc_symm f g h).le
#align filter.tendsto_prod_assoc_symm Filter.tendsto_prodAssoc_symm

/-- A useful lemma when dealing with uniformities. -/
theorem map_swap4_prod {h : Filter Œ≥} {k : Filter Œ¥} :
    map (fun p : (Œ± √ó Œ≤) √ó Œ≥ √ó Œ¥ => ((p.1.1, p.2.1), (p.1.2, p.2.2))) ((f √óÀ¢ g) √óÀ¢ (h √óÀ¢ k)) =
      (f √óÀ¢ h) √óÀ¢ (g √óÀ¢ k) := by
  simp_rw [map_swap4_eq_comap, SProd.sprod, Filter.prod, comap_inf, comap_comap]; ac_rfl
#align filter.map_swap4_prod Filter.map_swap4_prod

theorem tendsto_swap4_prod {h : Filter Œ≥} {k : Filter Œ¥} :
    Tendsto (fun p : (Œ± √ó Œ≤) √ó Œ≥ √ó Œ¥ => ((p.1.1, p.2.1), (p.1.2, p.2.2))) ((f √óÀ¢ g) √óÀ¢ (h √óÀ¢ k))
      ((f √óÀ¢ h) √óÀ¢ (g √óÀ¢ k)) :=
  map_swap4_prod.le
#align filter.tendsto_swap4_prod Filter.tendsto_swap4_prod

theorem prod_map_map_eq.{u, v, w, x} {Œ±‚ÇÅ : Type u} {Œ±‚ÇÇ : Type v} {Œ≤‚ÇÅ : Type w} {Œ≤‚ÇÇ : Type x}
    {f‚ÇÅ : Filter Œ±‚ÇÅ} {f‚ÇÇ : Filter Œ±‚ÇÇ} {m‚ÇÅ : Œ±‚ÇÅ ‚Üí Œ≤‚ÇÅ} {m‚ÇÇ : Œ±‚ÇÇ ‚Üí Œ≤‚ÇÇ} :
    map m‚ÇÅ f‚ÇÅ √óÀ¢ map m‚ÇÇ f‚ÇÇ = map (fun p : Œ±‚ÇÅ √ó Œ±‚ÇÇ => (m‚ÇÅ p.1, m‚ÇÇ p.2)) (f‚ÇÅ √óÀ¢ f‚ÇÇ) :=
  le_antisymm
    (fun s hs =>
      let ‚ü®s‚ÇÅ, hs‚ÇÅ, s‚ÇÇ, hs‚ÇÇ, h‚ü© := mem_prod_iff.mp hs
      mem_of_superset (prod_mem_prod (image_mem_map hs‚ÇÅ) (image_mem_map hs‚ÇÇ)) <|
        by rwa [prod_image_image_eq, image_subset_iff])
    ((tendsto_map.comp tendsto_fst).prod_mk (tendsto_map.comp tendsto_snd))
#align filter.prod_map_map_eq Filter.prod_map_map_eq

theorem prod_map_map_eq' {Œ±‚ÇÅ : Type*} {Œ±‚ÇÇ : Type*} {Œ≤‚ÇÅ : Type*} {Œ≤‚ÇÇ : Type*} (f : Œ±‚ÇÅ ‚Üí Œ±‚ÇÇ)
    (g : Œ≤‚ÇÅ ‚Üí Œ≤‚ÇÇ) (F : Filter Œ±‚ÇÅ) (G : Filter Œ≤‚ÇÅ) :
    map f F √óÀ¢ map g G = map (Prod.map f g) (F √óÀ¢ G) :=
  prod_map_map_eq
#align filter.prod_map_map_eq' Filter.prod_map_map_eq'

theorem prod_map_left (f : Œ± ‚Üí Œ≤) (F : Filter Œ±) (G : Filter Œ≥) :
    map f F √óÀ¢ G = map (Prod.map f id) (F √óÀ¢ G) := by
  rw [‚Üê prod_map_map_eq', map_id]

theorem prod_map_right (f : Œ≤ ‚Üí Œ≥) (F : Filter Œ±) (G : Filter Œ≤) :
    F √óÀ¢ map f G = map (Prod.map id f) (F √óÀ¢ G) := by
  rw [‚Üê prod_map_map_eq', map_id]

theorem le_prod_map_fst_snd {f : Filter (Œ± √ó Œ≤)} : f ‚â§ map Prod.fst f √óÀ¢ map Prod.snd f :=
  le_inf le_comap_map le_comap_map
#align filter.le_prod_map_fst_snd Filter.le_prod_map_fst_snd

theorem Tendsto.prod_map {Œ¥ : Type*} {f : Œ± ‚Üí Œ≥} {g : Œ≤ ‚Üí Œ¥} {a : Filter Œ±} {b : Filter Œ≤}
    {c : Filter Œ≥} {d : Filter Œ¥} (hf : Tendsto f a c) (hg : Tendsto g b d) :
    Tendsto (Prod.map f g) (a √óÀ¢ b) (c √óÀ¢ d) := by
  erw [Tendsto, ‚Üê prod_map_map_eq]
  exact Filter.prod_mono hf hg
#align filter.tendsto.prod_map Filter.Tendsto.prod_map

protected theorem map_prod (m : Œ± √ó Œ≤ ‚Üí Œ≥) (f : Filter Œ±) (g : Filter Œ≤) :
    map m (f √óÀ¢ g) = (f.map fun a b => m (a, b)).seq g := by
  simp only [Filter.ext_iff, mem_map, mem_prod_iff, mem_map_seq_iff, exists_and_left]
  intro s
  constructor
  ¬∑ exact fun ‚ü®t, ht, s, hs, h‚ü© => ‚ü®s, hs, t, ht, fun x hx y hy => @h ‚ü®x, y‚ü© ‚ü®hx, hy‚ü©‚ü©
  ¬∑ exact fun ‚ü®s, hs, t, ht, h‚ü© => ‚ü®t, ht, s, hs, fun ‚ü®x, y‚ü© ‚ü®hx, hy‚ü© => h x hx y hy‚ü©
#align filter.map_prod Filter.map_prod

theorem prod_eq : f √óÀ¢ g = (f.map Prod.mk).seq g := f.map_prod id g
#align filter.prod_eq Filter.prod_eq

theorem prod_inf_prod {f‚ÇÅ f‚ÇÇ : Filter Œ±} {g‚ÇÅ g‚ÇÇ : Filter Œ≤} :
    (f‚ÇÅ √óÀ¢ g‚ÇÅ) ‚äì (f‚ÇÇ √óÀ¢ g‚ÇÇ) = (f‚ÇÅ ‚äì f‚ÇÇ) √óÀ¢ (g‚ÇÅ ‚äì g‚ÇÇ) := by
  simp only [SProd.sprod, Filter.prod, comap_inf, inf_comm, inf_assoc, inf_left_comm]
#align filter.prod_inf_prod Filter.prod_inf_prod

theorem inf_prod {f‚ÇÅ f‚ÇÇ : Filter Œ±} : (f‚ÇÅ ‚äì f‚ÇÇ) √óÀ¢ g = (f‚ÇÅ √óÀ¢ g) ‚äì (f‚ÇÇ √óÀ¢ g) := by
  rw [prod_inf_prod, inf_idem]

theorem prod_inf {g‚ÇÅ g‚ÇÇ : Filter Œ≤} : f √óÀ¢ (g‚ÇÅ ‚äì g‚ÇÇ) = (f √óÀ¢ g‚ÇÅ) ‚äì (f √óÀ¢ g‚ÇÇ) := by
  rw [prod_inf_prod, inf_idem]

@[simp]
theorem prod_principal_principal {s : Set Œ±} {t : Set Œ≤} : ùìü s √óÀ¢ ùìü t = ùìü (s √óÀ¢ t) := by
  simp only [SProd.sprod, Filter.prod, comap_principal, principal_eq_iff_eq, comap_principal,
    inf_principal]; rfl
#align filter.prod_principal_principal Filter.prod_principal_principal

@[simp]
theorem pure_prod {a : Œ±} {f : Filter Œ≤} : pure a √óÀ¢ f = map (Prod.mk a) f := by
  rw [prod_eq, map_pure, pure_seq_eq_map]
#align filter.pure_prod Filter.pure_prod

theorem map_pure_prod (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥) (a : Œ±) (B : Filter Œ≤) :
    map (Function.uncurry f) (pure a √óÀ¢ B) = map (f a) B := by
  rw [Filter.pure_prod]; rfl
#align filter.map_pure_prod Filter.map_pure_prod

@[simp]
theorem prod_pure {b : Œ≤} : f √óÀ¢ pure b = map (fun a => (a, b)) f := by
  rw [prod_eq, seq_pure, map_map]; rfl
#align filter.prod_pure Filter.prod_pure

theorem prod_pure_pure {a : Œ±} {b : Œ≤} :
    (pure a : Filter Œ±) √óÀ¢ (pure b : Filter Œ≤) = pure (a, b) := by simp
#align filter.prod_pure_pure Filter.prod_pure_pure

@[simp]
theorem prod_eq_bot : f √óÀ¢ g = ‚ä• ‚Üî f = ‚ä• ‚à® g = ‚ä• := by
  simp_rw [‚Üê empty_mem_iff_bot, mem_prod_iff, subset_empty_iff, prod_eq_empty_iff, ‚Üê exists_prop,
    Subtype.exists', exists_or, exists_const, Subtype.exists, exists_prop, exists_eq_right]
#align filter.prod_eq_bot Filter.prod_eq_bot

@[simp] theorem prod_bot : f √óÀ¢ (‚ä• : Filter Œ≤) = ‚ä• := prod_eq_bot.2 <| Or.inr rfl
#align filter.prod_bot Filter.prod_bot

@[simp] theorem bot_prod : (‚ä• : Filter Œ±) √óÀ¢ g = ‚ä• := prod_eq_bot.2 <| Or.inl rfl
#align filter.bot_prod Filter.bot_prod

theorem prod_neBot : NeBot (f √óÀ¢ g) ‚Üî NeBot f ‚àß NeBot g := by
  simp only [neBot_iff, Ne, prod_eq_bot, not_or]
#align filter.prod_ne_bot Filter.prod_neBot

protected theorem NeBot.prod (hf : NeBot f) (hg : NeBot g) : NeBot (f √óÀ¢ g) := prod_neBot.2 ‚ü®hf, hg‚ü©
#align filter.ne_bot.prod Filter.NeBot.prod

instance prod.instNeBot [hf : NeBot f] [hg : NeBot g] : NeBot (f √óÀ¢ g) := hf.prod hg
#align filter.prod_ne_bot' Filter.prod.instNeBot

@[simp]
lemma disjoint_prod {f' : Filter Œ±} {g' : Filter Œ≤} :
    Disjoint (f √óÀ¢ g) (f' √óÀ¢ g') ‚Üî Disjoint f f' ‚à® Disjoint g g' := by
  simp only [disjoint_iff, prod_inf_prod, prod_eq_bot]

/-- `p ‚àß q` occurs frequently along the product of two filters
iff both `p` and `q` occur frequently along the corresponding filters. -/
theorem frequently_prod_and {p : Œ± ‚Üí Prop} {q : Œ≤ ‚Üí Prop} :
    (‚àÉ·∂† x in f √óÀ¢ g, p x.1 ‚àß q x.2) ‚Üî (‚àÉ·∂† a in f, p a) ‚àß ‚àÉ·∂† b in g, q b := by
  simp only [frequently_iff_neBot, ‚Üê prod_neBot, ‚Üê prod_inf_prod, prod_principal_principal]
  rfl

theorem tendsto_prod_iff {f : Œ± √ó Œ≤ ‚Üí Œ≥} {x : Filter Œ±} {y : Filter Œ≤} {z : Filter Œ≥} :
    Tendsto f (x √óÀ¢ y) z ‚Üî ‚àÄ W ‚àà z, ‚àÉ U ‚àà x, ‚àÉ V ‚àà y, ‚àÄ x y, x ‚àà U ‚Üí y ‚àà V ‚Üí f (x, y) ‚àà W := by
  simp only [tendsto_def, mem_prod_iff, prod_sub_preimage_iff, exists_prop, iff_self_iff]
#align filter.tendsto_prod_iff Filter.tendsto_prod_iff

theorem tendsto_prod_iff' {g' : Filter Œ≥} {s : Œ± ‚Üí Œ≤ √ó Œ≥} :
    Tendsto s f (g √óÀ¢ g') ‚Üî Tendsto (fun n => (s n).1) f g ‚àß Tendsto (fun n => (s n).2) f g' := by
  dsimp only [SProd.sprod]
  unfold Filter.prod
  simp only [tendsto_inf, tendsto_comap_iff, (¬∑ ‚àò ¬∑)]
#align filter.tendsto_prod_iff' Filter.tendsto_prod_iff'

theorem le_prod {f : Filter (Œ± √ó Œ≤)} {g : Filter Œ±} {g' : Filter Œ≤} :
    (f ‚â§ g √óÀ¢ g') ‚Üî Tendsto Prod.fst f g ‚àß Tendsto Prod.snd f g' :=
  tendsto_prod_iff'

end Prod

/-! ### Coproducts of filters -/

section Coprod

variable {f : Filter Œ±} {g : Filter Œ≤}

/-- Coproduct of filters. -/
protected def coprod (f : Filter Œ±) (g : Filter Œ≤) : Filter (Œ± √ó Œ≤) :=
  f.comap Prod.fst ‚äî g.comap Prod.snd
#align filter.coprod Filter.coprod

theorem coprod_eq_prod_top_sup_top_prod (f : Filter Œ±) (g : Filter Œ≤) :
    Filter.coprod f g = f √óÀ¢ ‚ä§ ‚äî ‚ä§ √óÀ¢ g := by
  rw [prod_top, top_prod]
  rfl

theorem mem_coprod_iff {s : Set (Œ± √ó Œ≤)} {f : Filter Œ±} {g : Filter Œ≤} :
    s ‚àà f.coprod g ‚Üî (‚àÉ t‚ÇÅ ‚àà f, Prod.fst ‚Åª¬π' t‚ÇÅ ‚äÜ s) ‚àß ‚àÉ t‚ÇÇ ‚àà g, Prod.snd ‚Åª¬π' t‚ÇÇ ‚äÜ s := by
  simp [Filter.coprod]
#align filter.mem_coprod_iff Filter.mem_coprod_iff

@[simp]
theorem bot_coprod (l : Filter Œ≤) : (‚ä• : Filter Œ±).coprod l = comap Prod.snd l := by
  simp [Filter.coprod]
#align filter.bot_coprod Filter.bot_coprod

@[simp]
theorem coprod_bot (l : Filter Œ±) : l.coprod (‚ä• : Filter Œ≤) = comap Prod.fst l := by
  simp [Filter.coprod]
#align filter.coprod_bot Filter.coprod_bot

theorem bot_coprod_bot : (‚ä• : Filter Œ±).coprod (‚ä• : Filter Œ≤) = ‚ä• := by simp
#align filter.bot_coprod_bot Filter.bot_coprod_bot

theorem compl_mem_coprod {s : Set (Œ± √ó Œ≤)} {la : Filter Œ±} {lb : Filter Œ≤} :
    s·∂ú ‚àà la.coprod lb ‚Üî (Prod.fst '' s)·∂ú ‚àà la ‚àß (Prod.snd '' s)·∂ú ‚àà lb := by
  simp only [Filter.coprod, mem_sup, compl_mem_comap]
#align filter.compl_mem_coprod Filter.compl_mem_coprod

@[mono]
theorem coprod_mono {f‚ÇÅ f‚ÇÇ : Filter Œ±} {g‚ÇÅ g‚ÇÇ : Filter Œ≤} (hf : f‚ÇÅ ‚â§ f‚ÇÇ) (hg : g‚ÇÅ ‚â§ g‚ÇÇ) :
    f‚ÇÅ.coprod g‚ÇÅ ‚â§ f‚ÇÇ.coprod g‚ÇÇ :=
  sup_le_sup (comap_mono hf) (comap_mono hg)
#align filter.coprod_mono Filter.coprod_mono

theorem coprod_neBot_iff : (f.coprod g).NeBot ‚Üî f.NeBot ‚àß Nonempty Œ≤ ‚à® Nonempty Œ± ‚àß g.NeBot := by
  simp [Filter.coprod]
#align filter.coprod_ne_bot_iff Filter.coprod_neBot_iff

@[instance]
theorem coprod_neBot_left [NeBot f] [Nonempty Œ≤] : (f.coprod g).NeBot :=
  coprod_neBot_iff.2 (Or.inl ‚ü®‚Äπ_‚Ä∫, ‚Äπ_‚Ä∫‚ü©)
#align filter.coprod_ne_bot_left Filter.coprod_neBot_left

@[instance]
theorem coprod_neBot_right [NeBot g] [Nonempty Œ±] : (f.coprod g).NeBot :=
  coprod_neBot_iff.2 (Or.inr ‚ü®‚Äπ_‚Ä∫, ‚Äπ_‚Ä∫‚ü©)
#align filter.coprod_ne_bot_right Filter.coprod_neBot_right

theorem principal_coprod_principal (s : Set Œ±) (t : Set Œ≤) :
    (ùìü s).coprod (ùìü t) = ùìü (s·∂ú √óÀ¢ t·∂ú)·∂ú := by
  rw [Filter.coprod, comap_principal, comap_principal, sup_principal, Set.prod_eq, compl_inter,
    preimage_compl, preimage_compl, compl_compl, compl_compl]
#align filter.principal_coprod_principal Filter.principal_coprod_principal

-- this inequality can be strict; see `map_const_principal_coprod_map_id_principal` and
-- `map_prod_map_const_id_principal_coprod_principal` below.
theorem map_prod_map_coprod_le.{u, v, w, x} {Œ±‚ÇÅ : Type u} {Œ±‚ÇÇ : Type v} {Œ≤‚ÇÅ : Type w} {Œ≤‚ÇÇ : Type x}
    {f‚ÇÅ : Filter Œ±‚ÇÅ} {f‚ÇÇ : Filter Œ±‚ÇÇ} {m‚ÇÅ : Œ±‚ÇÅ ‚Üí Œ≤‚ÇÅ} {m‚ÇÇ : Œ±‚ÇÇ ‚Üí Œ≤‚ÇÇ} :
    map (Prod.map m‚ÇÅ m‚ÇÇ) (f‚ÇÅ.coprod f‚ÇÇ) ‚â§ (map m‚ÇÅ f‚ÇÅ).coprod (map m‚ÇÇ f‚ÇÇ) := by
  intro s
  simp only [mem_map, mem_coprod_iff]
  rintro ‚ü®‚ü®u‚ÇÅ, hu‚ÇÅ, h‚ÇÅ‚ü©, u‚ÇÇ, hu‚ÇÇ, h‚ÇÇ‚ü©
  refine' ‚ü®‚ü®m‚ÇÅ ‚Åª¬π' u‚ÇÅ, hu‚ÇÅ, fun _ hx => h‚ÇÅ _‚ü©, ‚ü®m‚ÇÇ ‚Åª¬π' u‚ÇÇ, hu‚ÇÇ, fun _ hx => h‚ÇÇ _‚ü©‚ü© <;> convert hx
#align filter.map_prod_map_coprod_le Filter.map_prod_map_coprod_le

/-- Characterization of the coproduct of the `Filter.map`s of two principal filters `ùìü {a}` and
`ùìü {i}`, the first under the constant function `fun a => b` and the second under the identity
function. Together with the next lemma, `map_prod_map_const_id_principal_coprod_principal`, this
provides an example showing that the inequality in the lemma `map_prod_map_coprod_le` can be strict.
-/
theorem map_const_principal_coprod_map_id_principal {Œ± Œ≤ Œπ : Type*} (a : Œ±) (b : Œ≤) (i : Œπ) :
    (map (fun _ => b) (ùìü {a})).coprod (map id (ùìü {i})) =
      ùìü ((({b} : Set Œ≤) √óÀ¢ univ) ‚à™ (univ √óÀ¢ ({i} : Set Œπ))) := by
  simp only [map_principal, Filter.coprod, comap_principal, sup_principal, image_singleton,
    image_id, prod_univ, univ_prod, id]
#align filter.map_const_principal_coprod_map_id_principal Filter.map_const_principal_coprod_map_id_principal

/-- Characterization of the `Filter.map` of the coproduct of two principal filters `ùìü {a}` and
`ùìü {i}`, under the `Prod.map` of two functions, respectively the constant function `fun a => b` and
the identity function.  Together with the previous lemma,
`map_const_principal_coprod_map_id_principal`, this provides an example showing that the inequality
in the lemma `map_prod_map_coprod_le` can be strict. -/
theorem map_prod_map_const_id_principal_coprod_principal {Œ± Œ≤ Œπ : Type*} (a : Œ±) (b : Œ≤) (i : Œπ) :
    map (Prod.map (fun _ : Œ± => b) id) ((ùìü {a}).coprod (ùìü {i})) =
      ùìü (({b} : Set Œ≤) √óÀ¢ (univ : Set Œπ)) := by
  rw [principal_coprod_principal, map_principal]
  congr
  ext ‚ü®b', i'‚ü©
  constructor
  ¬∑ rintro ‚ü®‚ü®a'', i''‚ü©, _, h‚ÇÇ, h‚ÇÉ‚ü©
    simp
  ¬∑ rintro ‚ü®h‚ÇÅ, _‚ü©
    use (a, i')
    simpa using h‚ÇÅ.symm
#align filter.map_prod_map_const_id_principal_coprod_principal Filter.map_prod_map_const_id_principal_coprod_principal

theorem Tendsto.prod_map_coprod {Œ¥ : Type*} {f : Œ± ‚Üí Œ≥} {g : Œ≤ ‚Üí Œ¥} {a : Filter Œ±} {b : Filter Œ≤}
    {c : Filter Œ≥} {d : Filter Œ¥} (hf : Tendsto f a c) (hg : Tendsto g b d) :
    Tendsto (Prod.map f g) (a.coprod b) (c.coprod d) :=
  map_prod_map_coprod_le.trans (coprod_mono hf hg)
#align filter.tendsto.prod_map_coprod Filter.Tendsto.prod_map_coprod

end Coprod

end Filter
