/-
Copyright (c) 2020 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou, Yury Kudryashov

! This file was ported from Lean 3 source module order.filter.indicator_function
! leanprover-community/mathlib commit 8631e2d5ea77f6c13054d9151d82b83069680cb1
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathlib.Algebra.IndicatorFunction
import Mathlib.Order.Filter.AtTopBot

/-!
# Indicator function and filters

Properties of indicator functions involving `=·∂†` and `‚â§·∂†`.

## Tags
indicator, characteristic, filter
-/


variable {Œ± Œ≤ M E : Type _}

open Set Filter

section Zero

variable [Zero M] {s t : Set Œ±} {f g : Œ± ‚Üí M} {a : Œ±} {l : Filter Œ±}

theorem indicator_eventuallyEq (hf : f =·∂†[l ‚äì ùìü s] g) (hs : s =·∂†[l] t) :
    indicator s f =·∂†[l] indicator t g :=
  (eventually_inf_principal.1 hf).mp <|
    hs.mem_iff.mono fun x hst hfg =>
      by_cases (fun hxs : x ‚àà s => by simp only [*, hst.1 hxs, indicator_of_mem]) fun hxs => by
        simp only [indicator_of_not_mem hxs, indicator_of_not_mem (mt hst.2 hxs)]
#align indicator_eventually_eq indicator_eventuallyEq

end Zero

section AddMonoid

variable [AddMonoid M] {s t : Set Œ±} {f g : Œ± ‚Üí M} {a : Œ±} {l : Filter Œ±}

theorem indicator_union_eventuallyEq (h : ‚àÄ·∂† a in l, a ‚àâ s ‚à© t) :
    indicator (s ‚à™ t) f =·∂†[l] indicator s f + indicator t f :=
  h.mono fun _a ha => indicator_union_of_not_mem_inter ha _
#align indicator_union_eventually_eq indicator_union_eventuallyEq

end AddMonoid

section Order

variable [Zero Œ≤] [Preorder Œ≤] {s t : Set Œ±} {f g : Œ± ‚Üí Œ≤} {a : Œ±} {l : Filter Œ±}

theorem indicator_eventuallyLe_indicator (h : f ‚â§·∂†[l ‚äì ùìü s] g) :
    indicator s f ‚â§·∂†[l] indicator s g :=
  (eventually_inf_principal.1 h).mono fun _ => indicator_rel_indicator le_rfl
#align indicator_eventually_le_indicator indicator_eventuallyLe_indicator

end Order

theorem Monotone.tendsto_indicator {Œπ} [Preorder Œπ] [Zero Œ≤] (s : Œπ ‚Üí Set Œ±) (hs : Monotone s)
    (f : Œ± ‚Üí Œ≤) (a : Œ±) :
    Tendsto (fun i => indicator (s i) f a) atTop (pure <| indicator (‚ãÉ i, s i) f a) := by
  by_cases h : ‚àÉ i, a ‚àà s i
  ¬∑ rcases h with ‚ü®i, hi‚ü©
    refine' tendsto_pure.2 ((eventually_ge_atTop i).mono fun n hn => _)
    rw [indicator_of_mem (hs hn hi) _, indicator_of_mem ((subset_union·µ¢ _ _) hi) _]
  ¬∑ have h' : a ‚àâ ‚ãÉ i, s i := mt mem_union·µ¢.1 h
    rw [not_exists] at h
    simpa only [indicator_of_not_mem, *] using tendsto_const_pure
#align monotone.tendsto_indicator Monotone.tendsto_indicator

theorem Antitone.tendsto_indicator {Œπ} [Preorder Œπ] [Zero Œ≤] (s : Œπ ‚Üí Set Œ±) (hs : Antitone s)
    (f : Œ± ‚Üí Œ≤) (a : Œ±) :
    Tendsto (fun i => indicator (s i) f a) atTop (pure <| indicator (‚ãÇ i, s i) f a) := by
  by_cases h : ‚àÉ i, a ‚àâ s i
  ¬∑ rcases h with ‚ü®i, hi‚ü©
    refine' tendsto_pure.2 ((eventually_ge_atTop i).mono fun n hn => _)
    rw [indicator_of_not_mem _ _, indicator_of_not_mem _ _]
    ¬∑ simp only [mem_inter·µ¢, not_forall]
      exact ‚ü®i, hi‚ü©
    ¬∑ intro h
      have := hs hn h
      contradiction
  ¬∑ push_neg  at h
    simp only [indicator_of_mem, h, mem_inter·µ¢.2 h, tendsto_const_pure]
#align antitone.tendsto_indicator Antitone.tendsto_indicator

theorem tendsto_indicator_bunion·µ¢_finset {Œπ} [Zero Œ≤] (s : Œπ ‚Üí Set Œ±) (f : Œ± ‚Üí Œ≤) (a : Œ±) :
    Tendsto (fun n : Finset Œπ => indicator (‚ãÉ i ‚àà n, s i) f a) atTop
      (pure <| indicator (union·µ¢ s) f a) := by
  rw [union·µ¢_eq_union·µ¢_finset s]
  refine' Monotone.tendsto_indicator (fun n : Finset Œπ => ‚ãÉ i ‚àà n, s i) _ f a
  exact fun t‚ÇÅ t‚ÇÇ => bunion·µ¢_subset_bunion·µ¢_left
#align tendsto_indicator_bUnion_finset tendsto_indicator_bunion·µ¢_finset

theorem Filter.EventuallyEq.support [Zero Œ≤] {f g : Œ± ‚Üí Œ≤} {l : Filter Œ±} (h : f =·∂†[l] g) :
    Function.support f =·∂†[l] Function.support g := by
  filter_upwards [h]with x hx
  rw [eq_iff_iff]
  change f x ‚â† 0 ‚Üî g x ‚â† 0
  rw [hx]
#align filter.eventually_eq.support Filter.EventuallyEq.support

theorem Filter.EventuallyEq.indicator [Zero Œ≤] {l : Filter Œ±} {f g : Œ± ‚Üí Œ≤} {s : Set Œ±}
    (hfg : f =·∂†[l] g) : s.indicator f =·∂†[l] s.indicator g :=
  indicator_eventuallyEq (hfg.filter_mono inf_le_left) EventuallyEq.rfl
#align filter.eventually_eq.indicator Filter.EventuallyEq.indicator

theorem Filter.EventuallyEq.indicator_zero [Zero Œ≤] {l : Filter Œ±} {f : Œ± ‚Üí Œ≤} {s : Set Œ±}
    (hf : f =·∂†[l] 0) : s.indicator f =·∂†[l] 0 := by
  refine' hf.indicator.trans _
  rw [indicator_zero']
#align filter.eventually_eq.indicator_zero Filter.EventuallyEq.indicator_zero
