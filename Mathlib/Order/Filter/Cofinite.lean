/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Jeremy Avigad, Yury Kudryashov
-/
import Mathlib.Order.Filter.AtTopBot
import Mathlib.Order.Filter.Pi

#align_import order.filter.cofinite from "leanprover-community/mathlib"@"8631e2d5ea77f6c13054d9151d82b83069680cb1"

/-!
# The cofinite filter

In this file we define

`Filter.cofinite`: the filter of sets with finite complement

and prove its basic properties. In particular, we prove that for `‚Ñï` it is equal to `Filter.atTop`.

## TODO

Define filters for other cardinalities of the complement.
-/

open Set Function

variable {Œπ Œ± Œ≤ : Type*} {l : Filter Œ±}

namespace Filter

/-- The cofinite filter is the filter of subsets whose complements are finite. -/
def cofinite : Filter Œ± :=
  comk Set.Finite finite_empty (fun _t ht _s hsub ‚Ü¶ ht.subset hsub) fun _ h _ ‚Ü¶ h.union
#align filter.cofinite Filter.cofinite

@[simp]
theorem mem_cofinite {s : Set Œ±} : s ‚àà @cofinite Œ± ‚Üî s·∂ú.Finite :=
  Iff.rfl
#align filter.mem_cofinite Filter.mem_cofinite

@[simp]
theorem eventually_cofinite {p : Œ± ‚Üí Prop} : (‚àÄ·∂† x in cofinite, p x) ‚Üî { x | ¬¨p x }.Finite :=
  Iff.rfl
#align filter.eventually_cofinite Filter.eventually_cofinite

theorem hasBasis_cofinite : HasBasis cofinite (fun s : Set Œ± => s.Finite) compl :=
  ‚ü®fun s =>
    ‚ü®fun h => ‚ü®s·∂ú, h, (compl_compl s).subset‚ü©, fun ‚ü®_t, htf, hts‚ü© =>
      htf.subset <| compl_subset_comm.2 hts‚ü©‚ü©
#align filter.has_basis_cofinite Filter.hasBasis_cofinite

instance cofinite_neBot [Infinite Œ±] : NeBot (@cofinite Œ±) :=
  hasBasis_cofinite.neBot_iff.2 fun hs => hs.infinite_compl.nonempty
#align filter.cofinite_ne_bot Filter.cofinite_neBot

@[simp]
theorem cofinite_eq_bot_iff : @cofinite Œ± = ‚ä• ‚Üî Finite Œ± := by
  simp [‚Üê empty_mem_iff_bot, finite_univ_iff]

@[simp]
theorem cofinite_eq_bot [Finite Œ±] : @cofinite Œ± = ‚ä• := cofinite_eq_bot_iff.2 ‚Äπ_‚Ä∫

theorem frequently_cofinite_iff_infinite {p : Œ± ‚Üí Prop} :
    (‚àÉ·∂† x in cofinite, p x) ‚Üî Set.Infinite { x | p x } := by
  simp only [Filter.Frequently, eventually_cofinite, not_not, Set.Infinite]
#align filter.frequently_cofinite_iff_infinite Filter.frequently_cofinite_iff_infinite

lemma frequently_cofinite_mem_iff_infinite {s : Set Œ±} : (‚àÉ·∂† x in cofinite, x ‚àà s) ‚Üî s.Infinite :=
  frequently_cofinite_iff_infinite

alias ‚ü®_, _root_.Set.Infinite.frequently_cofinite‚ü© := frequently_cofinite_mem_iff_infinite

@[simp]
lemma cofinite_inf_principal_neBot_iff {s : Set Œ±} : (cofinite ‚äì ùìü s).NeBot ‚Üî s.Infinite :=
  frequently_mem_iff_neBot.symm.trans frequently_cofinite_mem_iff_infinite

alias ‚ü®_, _root_.Set.Infinite.cofinite_inf_principal_neBot‚ü© := cofinite_inf_principal_neBot_iff

theorem _root_.Set.Finite.compl_mem_cofinite {s : Set Œ±} (hs : s.Finite) : s·∂ú ‚àà @cofinite Œ± :=
  mem_cofinite.2 <| (compl_compl s).symm ‚ñ∏ hs
#align set.finite.compl_mem_cofinite Set.Finite.compl_mem_cofinite

theorem _root_.Set.Finite.eventually_cofinite_nmem {s : Set Œ±} (hs : s.Finite) :
    ‚àÄ·∂† x in cofinite, x ‚àâ s :=
  hs.compl_mem_cofinite
#align set.finite.eventually_cofinite_nmem Set.Finite.eventually_cofinite_nmem

theorem _root_.Finset.eventually_cofinite_nmem (s : Finset Œ±) : ‚àÄ·∂† x in cofinite, x ‚àâ s :=
  s.finite_toSet.eventually_cofinite_nmem
#align finset.eventually_cofinite_nmem Finset.eventually_cofinite_nmem

theorem _root_.Set.infinite_iff_frequently_cofinite {s : Set Œ±} :
    Set.Infinite s ‚Üî ‚àÉ·∂† x in cofinite, x ‚àà s :=
  frequently_cofinite_iff_infinite.symm
#align set.infinite_iff_frequently_cofinite Set.infinite_iff_frequently_cofinite

theorem eventually_cofinite_ne (x : Œ±) : ‚àÄ·∂† a in cofinite, a ‚â† x :=
  (Set.finite_singleton x).eventually_cofinite_nmem
#align filter.eventually_cofinite_ne Filter.eventually_cofinite_ne

theorem le_cofinite_iff_compl_singleton_mem : l ‚â§ cofinite ‚Üî ‚àÄ x, {x}·∂ú ‚àà l := by
  refine' ‚ü®fun h x => h (finite_singleton x).compl_mem_cofinite, fun h s (hs : s·∂ú.Finite) => _‚ü©
  rw [‚Üê compl_compl s, ‚Üê biUnion_of_singleton s·∂ú, compl_iUnion‚ÇÇ, Filter.biInter_mem hs]
  exact fun x _ => h x
#align filter.le_cofinite_iff_compl_singleton_mem Filter.le_cofinite_iff_compl_singleton_mem

theorem le_cofinite_iff_eventually_ne : l ‚â§ cofinite ‚Üî ‚àÄ x, ‚àÄ·∂† y in l, y ‚â† x :=
  le_cofinite_iff_compl_singleton_mem
#align filter.le_cofinite_iff_eventually_ne Filter.le_cofinite_iff_eventually_ne

/-- If `Œ±` is a preorder with no maximal element, then `atTop ‚â§ cofinite`. -/
theorem atTop_le_cofinite [Preorder Œ±] [NoMaxOrder Œ±] : (atTop : Filter Œ±) ‚â§ cofinite :=
  le_cofinite_iff_eventually_ne.mpr eventually_ne_atTop
#align filter.at_top_le_cofinite Filter.atTop_le_cofinite

theorem comap_cofinite_le (f : Œ± ‚Üí Œ≤) : comap f cofinite ‚â§ cofinite :=
  le_cofinite_iff_eventually_ne.mpr fun x =>
    mem_comap.2 ‚ü®{f x}·∂ú, (finite_singleton _).compl_mem_cofinite, fun _ => ne_of_apply_ne f‚ü©
#align filter.comap_cofinite_le Filter.comap_cofinite_le

/-- The coproduct of the cofinite filters on two types is the cofinite filter on their product. -/
theorem coprod_cofinite : (cofinite : Filter Œ±).coprod (cofinite : Filter Œ≤) = cofinite :=
  Filter.coext fun s => by
    simp only [compl_mem_coprod, mem_cofinite, compl_compl, finite_image_fst_and_snd_iff]
#align filter.coprod_cofinite Filter.coprod_cofinite

theorem coprod·µ¢_cofinite {Œ± : Œπ ‚Üí Type*} [Finite Œπ] :
    (Filter.coprod·µ¢ fun i => (cofinite : Filter (Œ± i))) = cofinite :=
  Filter.coext fun s => by
    simp only [compl_mem_coprod·µ¢, mem_cofinite, compl_compl, forall_finite_image_eval_iff]
set_option linter.uppercaseLean3 false in
#align filter.Coprod_cofinite Filter.coprod·µ¢_cofinite

theorem disjoint_cofinite_left : Disjoint cofinite l ‚Üî ‚àÉ s ‚àà l, Set.Finite s := by
  simp [l.basis_sets.disjoint_iff_right]
#align filter.disjoint_cofinite_left Filter.disjoint_cofinite_left

theorem disjoint_cofinite_right : Disjoint l cofinite ‚Üî ‚àÉ s ‚àà l, Set.Finite s :=
  disjoint_comm.trans disjoint_cofinite_left
#align filter.disjoint_cofinite_right Filter.disjoint_cofinite_right

/-- If `l ‚â• Filter.cofinite` is a countably generated filter, then `l.ker` is cocountable. -/
theorem countable_compl_ker [l.IsCountablyGenerated] (h : cofinite ‚â§ l) : Set.Countable l.ker·∂ú := by
  rcases exists_antitone_basis l with ‚ü®s, hs‚ü©
  simp only [hs.ker, iInter_true, compl_iInter]
  exact countable_iUnion fun n ‚Ü¶ Set.Finite.countable <| h <| hs.mem _

/-- If `f` tends to a countably generated filter `l` along `Filter.cofinite`,
then for all but countably many elements, `f x ‚àà l.ker`. -/
theorem Tendsto.countable_compl_preimage_ker {f : Œ± ‚Üí Œ≤}
    {l : Filter Œ≤} [l.IsCountablyGenerated] (h : Tendsto f cofinite l) :
    Set.Countable (f ‚Åª¬π' l.ker)·∂ú := by rw [‚Üê ker_comap]; exact countable_compl_ker h.le_comap

end Filter

open Filter

lemma Set.Finite.cofinite_inf_principal_compl {s : Set Œ±} (hs : s.Finite) :
    cofinite ‚äì ùìü s·∂ú = cofinite := by
  simpa using hs.compl_mem_cofinite

lemma Set.Finite.cofinite_inf_principal_diff {s t : Set Œ±} (ht : t.Finite) :
    cofinite ‚äì ùìü (s \ t) = cofinite ‚äì ùìü s := by
  rw [diff_eq, ‚Üê inf_principal, ‚Üê inf_assoc, inf_right_comm, ht.cofinite_inf_principal_compl]

/-- For natural numbers the filters `Filter.cofinite` and `Filter.atTop` coincide. -/
theorem Nat.cofinite_eq_atTop : @cofinite ‚Ñï = atTop := by
  refine' le_antisymm _ atTop_le_cofinite
  refine' atTop_basis.ge_iff.2 fun N _ => _
  simpa only [mem_cofinite, compl_Ici] using finite_lt_nat N
#align nat.cofinite_eq_at_top Nat.cofinite_eq_atTop

theorem Nat.frequently_atTop_iff_infinite {p : ‚Ñï ‚Üí Prop} :
    (‚àÉ·∂† n in atTop, p n) ‚Üî Set.Infinite { n | p n } := by
  rw [‚Üê Nat.cofinite_eq_atTop, frequently_cofinite_iff_infinite]
#align nat.frequently_at_top_iff_infinite Nat.frequently_atTop_iff_infinite

theorem Filter.Tendsto.exists_within_forall_le {Œ± Œ≤ : Type*} [LinearOrder Œ≤] {s : Set Œ±}
    (hs : s.Nonempty) {f : Œ± ‚Üí Œ≤} (hf : Filter.Tendsto f Filter.cofinite Filter.atTop) :
    ‚àÉ a‚ÇÄ ‚àà s, ‚àÄ a ‚àà s, f a‚ÇÄ ‚â§ f a := by
  rcases em (‚àÉ y ‚àà s, ‚àÉ x, f y < x) with (‚ü®y, hys, x, hx‚ü© | not_all_top)
  ¬∑ -- the set of points `{y | f y < x}` is nonempty and finite, so we take `min` over this set
    have : { y | ¬¨x ‚â§ f y }.Finite := Filter.eventually_cofinite.mp (tendsto_atTop.1 hf x)
    simp only [not_le] at this
    obtain ‚ü®a‚ÇÄ, ‚ü®ha‚ÇÄ : f a‚ÇÄ < x, ha‚ÇÄs‚ü©, others_bigger‚ü© :=
      exists_min_image _ f (this.inter_of_left s) ‚ü®y, hx, hys‚ü©
    refine' ‚ü®a‚ÇÄ, ha‚ÇÄs, fun a has => (lt_or_le (f a) x).elim _ (le_trans ha‚ÇÄ.le)‚ü©
    exact fun h => others_bigger a ‚ü®h, has‚ü©
  ¬∑ -- in this case, f is constant because all values are at top
    push_neg at not_all_top
    obtain ‚ü®a‚ÇÄ, ha‚ÇÄs‚ü© := hs
    exact ‚ü®a‚ÇÄ, ha‚ÇÄs, fun a ha => not_all_top a ha (f a‚ÇÄ)‚ü©
#align filter.tendsto.exists_within_forall_le Filter.Tendsto.exists_within_forall_le

theorem Filter.Tendsto.exists_forall_le [Nonempty Œ±] [LinearOrder Œ≤] {f : Œ± ‚Üí Œ≤}
    (hf : Tendsto f cofinite atTop) : ‚àÉ a‚ÇÄ, ‚àÄ a, f a‚ÇÄ ‚â§ f a :=
  let ‚ü®a‚ÇÄ, _, ha‚ÇÄ‚ü© := hf.exists_within_forall_le univ_nonempty
  ‚ü®a‚ÇÄ, fun a => ha‚ÇÄ a (mem_univ _)‚ü©
#align filter.tendsto.exists_forall_le Filter.Tendsto.exists_forall_le

theorem Filter.Tendsto.exists_within_forall_ge [LinearOrder Œ≤] {s : Set Œ±} (hs : s.Nonempty)
    {f : Œ± ‚Üí Œ≤} (hf : Filter.Tendsto f Filter.cofinite Filter.atBot) :
    ‚àÉ a‚ÇÄ ‚àà s, ‚àÄ a ‚àà s, f a ‚â§ f a‚ÇÄ :=
  @Filter.Tendsto.exists_within_forall_le _ Œ≤·µí·µà _ _ hs _ hf
#align filter.tendsto.exists_within_forall_ge Filter.Tendsto.exists_within_forall_ge

theorem Filter.Tendsto.exists_forall_ge [Nonempty Œ±] [LinearOrder Œ≤] {f : Œ± ‚Üí Œ≤}
    (hf : Tendsto f cofinite atBot) : ‚àÉ a‚ÇÄ, ‚àÄ a, f a ‚â§ f a‚ÇÄ :=
  @Filter.Tendsto.exists_forall_le _ Œ≤·µí·µà _ _ _ hf
#align filter.tendsto.exists_forall_ge Filter.Tendsto.exists_forall_ge

theorem Function.Surjective.le_map_cofinite {f : Œ± ‚Üí Œ≤} (hf : Surjective f) :
    cofinite ‚â§ map f cofinite := fun _ h => .of_preimage h hf

/-- For an injective function `f`, inverse images of finite sets are finite. See also
`Filter.comap_cofinite_le` and `Function.Injective.comap_cofinite_eq`. -/
theorem Function.Injective.tendsto_cofinite {f : Œ± ‚Üí Œ≤} (hf : Injective f) :
    Tendsto f cofinite cofinite := fun _ h => h.preimage (hf.injOn _)
#align function.injective.tendsto_cofinite Function.Injective.tendsto_cofinite

/-- The pullback of the `Filter.cofinite` under an injective function is equal to `Filter.cofinite`.
See also `Filter.comap_cofinite_le` and `Function.Injective.tendsto_cofinite`. -/
theorem Function.Injective.comap_cofinite_eq {f : Œ± ‚Üí Œ≤} (hf : Injective f) :
    comap f cofinite = cofinite :=
  (comap_cofinite_le f).antisymm hf.tendsto_cofinite.le_comap
#align function.injective.comap_cofinite_eq Function.Injective.comap_cofinite_eq

/-- An injective sequence `f : ‚Ñï ‚Üí ‚Ñï` tends to infinity at infinity. -/
theorem Function.Injective.nat_tendsto_atTop {f : ‚Ñï ‚Üí ‚Ñï} (hf : Injective f) :
    Tendsto f atTop atTop :=
  Nat.cofinite_eq_atTop ‚ñ∏ hf.tendsto_cofinite
#align function.injective.nat_tendsto_at_top Function.Injective.nat_tendsto_atTop
