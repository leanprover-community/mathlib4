/-
Copyright (c) 2019 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl
-/
import Mathlib.Order.Filter.Bases
import Mathlib.Order.ConditionallyCompleteLattice.Basic

#align_import order.filter.lift from "leanprover-community/mathlib"@"8631e2d5ea77f6c13054d9151d82b83069680cb1"

/-!
# Lift filters along filter and set functions
-/

open Set Classical Filter Function

namespace Filter

variable {Œ± Œ≤ Œ≥ : Type*} {Œπ : Sort*}

section lift

/-- A variant on `bind` using a function `g` taking a set instead of a member of `Œ±`.
This is essentially a push-forward along a function mapping each set to a filter. -/
protected def lift (f : Filter Œ±) (g : Set Œ± ‚Üí Filter Œ≤) :=
  ‚®Ö s ‚àà f, g s
#align filter.lift Filter.lift

variable {f f‚ÇÅ f‚ÇÇ : Filter Œ±} {g g‚ÇÅ g‚ÇÇ : Set Œ± ‚Üí Filter Œ≤}

@[simp]
theorem lift_top (g : Set Œ± ‚Üí Filter Œ≤) : (‚ä§ : Filter Œ±).lift g = g univ := by simp [Filter.lift]
#align filter.lift_top Filter.lift_top

-- Porting note: use `‚àÉ i, p i ‚àß _` instead of `‚àÉ i (hi : p i), _`
/-- If `(p : Œπ ‚Üí Prop, s : Œπ ‚Üí Set Œ±)` is a basis of a filter `f`, `g` is a monotone function
`Set Œ± ‚Üí Filter Œ≥`, and for each `i`, `(pg : Œ≤ i ‚Üí Prop, sg : Œ≤ i ‚Üí Set Œ±)` is a basis
of the filter `g (s i)`, then
`(fun (i : Œπ) (x : Œ≤ i) ‚Ü¶ p i ‚àß pg i x, fun (i : Œπ) (x : Œ≤ i) ‚Ü¶ sg i x)` is a basis
of the filter `f.lift g`.

This basis is parametrized by `i : Œπ` and `x : Œ≤ i`, so in order to formulate this fact using
`Filter.HasBasis` one has to use `Œ£ i, Œ≤ i` as the index type, see `Filter.HasBasis.lift`.
This lemma states the corresponding `mem_iff` statement without using a sigma type. -/
theorem HasBasis.mem_lift_iff {Œπ} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set Œ±} {f : Filter Œ±}
    (hf : f.HasBasis p s) {Œ≤ : Œπ ‚Üí Type*} {pg : ‚àÄ i, Œ≤ i ‚Üí Prop} {sg : ‚àÄ i, Œ≤ i ‚Üí Set Œ≥}
    {g : Set Œ± ‚Üí Filter Œ≥} (hg : ‚àÄ i, (g <| s i).HasBasis (pg i) (sg i)) (gm : Monotone g)
    {s : Set Œ≥} : s ‚àà f.lift g ‚Üî ‚àÉ i, p i ‚àß ‚àÉ x, pg i x ‚àß sg i x ‚äÜ s := by
  refine' (mem_biInf_of_directed _ ‚ü®univ, univ_sets _‚ü©).trans _
  ¬∑ intro t‚ÇÅ ht‚ÇÅ t‚ÇÇ ht‚ÇÇ
    exact ‚ü®t‚ÇÅ ‚à© t‚ÇÇ, inter_mem ht‚ÇÅ ht‚ÇÇ, gm <| inter_subset_left _ _, gm <| inter_subset_right _ _‚ü©
  ¬∑ simp only [‚Üê (hg _).mem_iff]
    exact hf.exists_iff fun t‚ÇÅ t‚ÇÇ ht H => gm ht H
#align filter.has_basis.mem_lift_iff Filter.HasBasis.mem_lift_iff‚Çì

/-- If `(p : Œπ ‚Üí Prop, s : Œπ ‚Üí Set Œ±)` is a basis of a filter `f`, `g` is a monotone function
`Set Œ± ‚Üí Filter Œ≥`, and for each `i`, `(pg : Œ≤ i ‚Üí Prop, sg : Œ≤ i ‚Üí Set Œ±)` is a basis
of the filter `g (s i)`, then
`(fun (i : Œπ) (x : Œ≤ i) ‚Ü¶ p i ‚àß pg i x, fun (i : Œπ) (x : Œ≤ i) ‚Ü¶ sg i x)`
is a basis of the filter `f.lift g`.

This basis is parametrized by `i : Œπ` and `x : Œ≤ i`, so in order to formulate this fact using
`has_basis` one has to use `Œ£ i, Œ≤ i` as the index type. See also `Filter.HasBasis.mem_lift_iff`
for the corresponding `mem_iff` statement formulated without using a sigma type. -/
theorem HasBasis.lift {Œπ} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set Œ±} {f : Filter Œ±} (hf : f.HasBasis p s)
    {Œ≤ : Œπ ‚Üí Type*} {pg : ‚àÄ i, Œ≤ i ‚Üí Prop} {sg : ‚àÄ i, Œ≤ i ‚Üí Set Œ≥} {g : Set Œ± ‚Üí Filter Œ≥}
    (hg : ‚àÄ i, (g (s i)).HasBasis (pg i) (sg i)) (gm : Monotone g) :
    (f.lift g).HasBasis (fun i : Œ£i, Œ≤ i => p i.1 ‚àß pg i.1 i.2) fun i : Œ£i, Œ≤ i => sg i.1 i.2 := by
  refine' ‚ü®fun t => (hf.mem_lift_iff hg gm).trans _‚ü©
  simp [Sigma.exists, and_assoc, exists_and_left]
#align filter.has_basis.lift Filter.HasBasis.lift

theorem mem_lift_sets (hg : Monotone g) {s : Set Œ≤} : s ‚àà f.lift g ‚Üî ‚àÉ t ‚àà f, s ‚àà g t :=
  (f.basis_sets.mem_lift_iff (fun s => (g s).basis_sets) hg).trans <| by
    simp only [id, exists_mem_subset_iff]
#align filter.mem_lift_sets Filter.mem_lift_sets

theorem sInter_lift_sets (hg : Monotone g) :
    ‚ãÇ‚ÇÄ { s | s ‚àà f.lift g } = ‚ãÇ s ‚àà f, ‚ãÇ‚ÇÄ { t | t ‚àà g s } := by
  simp only [sInter_eq_biInter, mem_setOf_eq, Filter.mem_sets, mem_lift_sets hg, iInter_exists,
    iInter_and, @iInter_comm _ (Set Œ≤)]
#align filter.sInter_lift_sets Filter.sInter_lift_sets

theorem mem_lift {s : Set Œ≤} {t : Set Œ±} (ht : t ‚àà f) (hs : s ‚àà g t) : s ‚àà f.lift g :=
  le_principal_iff.mp <|
    show f.lift g ‚â§ ùìü s from iInf_le_of_le t <| iInf_le_of_le ht <| le_principal_iff.mpr hs
#align filter.mem_lift Filter.mem_lift

theorem lift_le {f : Filter Œ±} {g : Set Œ± ‚Üí Filter Œ≤} {h : Filter Œ≤} {s : Set Œ±} (hs : s ‚àà f)
    (hg : g s ‚â§ h) : f.lift g ‚â§ h :=
  iInf‚ÇÇ_le_of_le s hs hg
#align filter.lift_le Filter.lift_le

theorem le_lift {f : Filter Œ±} {g : Set Œ± ‚Üí Filter Œ≤} {h : Filter Œ≤} :
    h ‚â§ f.lift g ‚Üî ‚àÄ s ‚àà f, h ‚â§ g s :=
  le_iInf‚ÇÇ_iff
#align filter.le_lift Filter.le_lift

theorem lift_mono (hf : f‚ÇÅ ‚â§ f‚ÇÇ) (hg : g‚ÇÅ ‚â§ g‚ÇÇ) : f‚ÇÅ.lift g‚ÇÅ ‚â§ f‚ÇÇ.lift g‚ÇÇ :=
  iInf_mono fun s => iInf_mono' fun hs => ‚ü®hf hs, hg s‚ü©
#align filter.lift_mono Filter.lift_mono

theorem lift_mono' (hg : ‚àÄ s ‚àà f, g‚ÇÅ s ‚â§ g‚ÇÇ s) : f.lift g‚ÇÅ ‚â§ f.lift g‚ÇÇ := iInf‚ÇÇ_mono hg
#align filter.lift_mono' Filter.lift_mono'

theorem tendsto_lift {m : Œ≥ ‚Üí Œ≤} {l : Filter Œ≥} :
    Tendsto m l (f.lift g) ‚Üî ‚àÄ s ‚àà f, Tendsto m l (g s) := by
  simp only [Filter.lift, tendsto_iInf]
#align filter.tendsto_lift Filter.tendsto_lift

theorem map_lift_eq {m : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : map m (f.lift g) = f.lift (map m ‚àò g) :=
  have : Monotone (map m ‚àò g) := map_mono.comp hg
  Filter.ext fun s => by
    simp only [mem_lift_sets hg, mem_lift_sets this, exists_prop, mem_map, Function.comp_apply]
#align filter.map_lift_eq Filter.map_lift_eq

theorem comap_lift_eq {m : Œ≥ ‚Üí Œ≤} : comap m (f.lift g) = f.lift (comap m ‚àò g) := by
  simp only [Filter.lift, comap_iInf]; rfl
#align filter.comap_lift_eq Filter.comap_lift_eq

theorem comap_lift_eq2 {m : Œ≤ ‚Üí Œ±} {g : Set Œ≤ ‚Üí Filter Œ≥} (hg : Monotone g) :
    (comap m f).lift g = f.lift (g ‚àò preimage m) :=
  le_antisymm (le_iInf‚ÇÇ fun s hs => iInf‚ÇÇ_le (m ‚Åª¬π' s) ‚ü®s, hs, Subset.rfl‚ü©)
    (le_iInf‚ÇÇ fun _s ‚ü®s', hs', h_sub‚ü© => iInf‚ÇÇ_le_of_le s' hs' <| hg h_sub)
#align filter.comap_lift_eq2 Filter.comap_lift_eq2

theorem lift_map_le {g : Set Œ≤ ‚Üí Filter Œ≥} {m : Œ± ‚Üí Œ≤} : (map m f).lift g ‚â§ f.lift (g ‚àò image m) :=
  le_lift.2 fun _s hs => lift_le (image_mem_map hs) le_rfl
#align filter.lift_map_le Filter.lift_map_le

theorem map_lift_eq2 {g : Set Œ≤ ‚Üí Filter Œ≥} {m : Œ± ‚Üí Œ≤} (hg : Monotone g) :
    (map m f).lift g = f.lift (g ‚àò image m) :=
  lift_map_le.antisymm <| le_lift.2 fun _s hs => lift_le hs <| hg <| image_preimage_subset _ _
#align filter.map_lift_eq2 Filter.map_lift_eq2

theorem lift_comm {g : Filter Œ≤} {h : Set Œ± ‚Üí Set Œ≤ ‚Üí Filter Œ≥} :
    (f.lift fun s => g.lift (h s)) = g.lift fun t => f.lift fun s => h s t :=
  le_antisymm
    (le_iInf fun i => le_iInf fun hi => le_iInf fun j => le_iInf fun hj =>
      iInf_le_of_le j <| iInf_le_of_le hj <| iInf_le_of_le i <| iInf_le _ hi)
    (le_iInf fun i => le_iInf fun hi => le_iInf fun j => le_iInf fun hj =>
      iInf_le_of_le j <| iInf_le_of_le hj <| iInf_le_of_le i <| iInf_le _ hi)
#align filter.lift_comm Filter.lift_comm

theorem lift_assoc {h : Set Œ≤ ‚Üí Filter Œ≥} (hg : Monotone g) :
    (f.lift g).lift h = f.lift fun s => (g s).lift h :=
  le_antisymm
    (le_iInf‚ÇÇ fun _s hs => le_iInf‚ÇÇ fun t ht =>
      iInf_le_of_le t <| iInf_le _ <| (mem_lift_sets hg).mpr ‚ü®_, hs, ht‚ü©)
    (le_iInf‚ÇÇ fun t ht =>
      let ‚ü®s, hs, h'‚ü© := (mem_lift_sets hg).mp ht
      iInf_le_of_le s <| iInf_le_of_le hs <| iInf_le_of_le t <| iInf_le _ h')
#align filter.lift_assoc Filter.lift_assoc

theorem lift_lift_same_le_lift {g : Set Œ± ‚Üí Set Œ± ‚Üí Filter Œ≤} :
    (f.lift fun s => f.lift (g s)) ‚â§ f.lift fun s => g s s :=
  le_lift.2 fun _s hs => lift_le hs <| lift_le hs le_rfl
#align filter.lift_lift_same_le_lift Filter.lift_lift_same_le_lift

theorem lift_lift_same_eq_lift {g : Set Œ± ‚Üí Set Œ± ‚Üí Filter Œ≤} (hg‚ÇÅ : ‚àÄ s, Monotone fun t => g s t)
    (hg‚ÇÇ : ‚àÄ t, Monotone fun s => g s t) : (f.lift fun s => f.lift (g s)) = f.lift fun s => g s s :=
  lift_lift_same_le_lift.antisymm <|
    le_lift.2 fun s hs => le_lift.2 fun t ht => lift_le (inter_mem hs ht) <|
      calc
        g (s ‚à© t) (s ‚à© t) ‚â§ g s (s ‚à© t) := hg‚ÇÇ (s ‚à© t) (inter_subset_left _ _)
        _ ‚â§ g s t := hg‚ÇÅ s (inter_subset_right _ _)
#align filter.lift_lift_same_eq_lift Filter.lift_lift_same_eq_lift

theorem lift_principal {s : Set Œ±} (hg : Monotone g) : (ùìü s).lift g = g s :=
  (lift_le (mem_principal_self _) le_rfl).antisymm (le_lift.2 fun _t ht => hg ht)
#align filter.lift_principal Filter.lift_principal

theorem monotone_lift [Preorder Œ≥] {f : Œ≥ ‚Üí Filter Œ±} {g : Œ≥ ‚Üí Set Œ± ‚Üí Filter Œ≤} (hf : Monotone f)
    (hg : Monotone g) : Monotone fun c => (f c).lift (g c) := fun _ _ h => lift_mono (hf h) (hg h)
#align filter.monotone_lift Filter.monotone_lift

theorem lift_neBot_iff (hm : Monotone g) : (NeBot (f.lift g)) ‚Üî ‚àÄ s ‚àà f, NeBot (g s) := by
  simp only [neBot_iff, Ne.def, ‚Üê empty_mem_iff_bot, mem_lift_sets hm, not_exists, not_and]
#align filter.lift_ne_bot_iff Filter.lift_neBot_iff

@[simp]
theorem lift_const {f : Filter Œ±} {g : Filter Œ≤} : (f.lift fun _ => g) = g :=
  iInf_subtype'.trans iInf_const
#align filter.lift_const Filter.lift_const

@[simp]
theorem lift_inf {f : Filter Œ±} {g h : Set Œ± ‚Üí Filter Œ≤} :
    (f.lift fun x => g x ‚äì h x) = f.lift g ‚äì f.lift h := by simp only [Filter.lift, iInf_inf_eq]
#align filter.lift_inf Filter.lift_inf

@[simp]
theorem lift_principal2 {f : Filter Œ±} : f.lift ùìü = f :=
  le_antisymm (fun s hs => mem_lift hs (mem_principal_self s))
    (le_iInf fun s => le_iInf fun hs => by simp only [hs, le_principal_iff])
#align filter.lift_principal2 Filter.lift_principal2

theorem lift_iInf_le {f : Œπ ‚Üí Filter Œ±} {g : Set Œ± ‚Üí Filter Œ≤} :
    (iInf f).lift g ‚â§ ‚®Ö i, (f i).lift g :=
  le_iInf fun _ => lift_mono (iInf_le _ _) le_rfl
#align filter.lift_infi_le Filter.lift_iInf_le

theorem lift_iInf [Nonempty Œπ] {f : Œπ ‚Üí Filter Œ±} {g : Set Œ± ‚Üí Filter Œ≤}
    (hg : ‚àÄ s t, g (s ‚à© t) = g s ‚äì g t) : (iInf f).lift g = ‚®Ö i, (f i).lift g := by
  refine' lift_iInf_le.antisymm fun s => _
  have H : ‚àÄ t ‚àà iInf f, ‚®Ö i, (f i).lift g ‚â§ g t := by
    intro t ht
    refine' iInf_sets_induct ht _ fun hs ht => _
    ¬∑ inhabit Œπ
      exact iInf‚ÇÇ_le_of_le default univ (iInf_le _ univ_mem)
    ¬∑ rw [hg]
      exact le_inf (iInf‚ÇÇ_le_of_le _ _ <| iInf_le _ hs) ht
  simp only [mem_lift_sets (Monotone.of_map_inf hg), exists_imp, and_imp]
  exact fun t ht hs => H t ht hs
#align filter.lift_infi Filter.lift_iInf

theorem lift_iInf_of_directed [Nonempty Œπ] {f : Œπ ‚Üí Filter Œ±} {g : Set Œ± ‚Üí Filter Œ≤}
    (hf : Directed (¬∑ ‚â• ¬∑) f) (hg : Monotone g) : (iInf f).lift g = ‚®Ö i, (f i).lift g :=
  lift_iInf_le.antisymm fun s => by
    simp only [mem_lift_sets hg, exists_imp, and_imp, mem_iInf_of_directed hf]
    exact fun t i ht hs => mem_iInf_of_mem i <| mem_lift ht hs
#align filter.lift_infi_of_directed Filter.lift_iInf_of_directed

theorem lift_iInf_of_map_univ {f : Œπ ‚Üí Filter Œ±} {g : Set Œ± ‚Üí Filter Œ≤}
    (hg : ‚àÄ s t, g (s ‚à© t) = g s ‚äì g t) (hg' : g univ = ‚ä§) :
    (iInf f).lift g = ‚®Ö i, (f i).lift g := by
  cases isEmpty_or_nonempty Œπ
  ¬∑ simp [iInf_of_empty, hg']
  ¬∑ exact lift_iInf hg
#align filter.lift_infi_of_map_univ Filter.lift_iInf_of_map_univ

end lift

section Lift'

/-- Specialize `lift` to functions `Set Œ± ‚Üí Set Œ≤`. This can be viewed as a generalization of `map`.
This is essentially a push-forward along a function mapping each set to a set. -/
protected def lift' (f : Filter Œ±) (h : Set Œ± ‚Üí Set Œ≤) :=
  f.lift (ùìü ‚àò h)
#align filter.lift' Filter.lift'

variable {f f‚ÇÅ f‚ÇÇ : Filter Œ±} {h h‚ÇÅ h‚ÇÇ : Set Œ± ‚Üí Set Œ≤}

@[simp]
theorem lift'_top (h : Set Œ± ‚Üí Set Œ≤) : (‚ä§ : Filter Œ±).lift' h = ùìü (h univ) :=
  lift_top _
#align filter.lift'_top Filter.lift'_top

theorem mem_lift' {t : Set Œ±} (ht : t ‚àà f) : h t ‚àà f.lift' h :=
  le_principal_iff.mp <| show f.lift' h ‚â§ ùìü (h t) from iInf_le_of_le t <| iInf_le_of_le ht <| le_rfl
#align filter.mem_lift' Filter.mem_lift'

theorem tendsto_lift' {m : Œ≥ ‚Üí Œ≤} {l : Filter Œ≥} :
    Tendsto m l (f.lift' h) ‚Üî ‚àÄ s ‚àà f, ‚àÄ·∂† a in l, m a ‚àà h s := by
  simp only [Filter.lift', tendsto_lift, tendsto_principal, comp]
#align filter.tendsto_lift' Filter.tendsto_lift'

theorem HasBasis.lift' {Œπ} {p : Œπ ‚Üí Prop} {s} (hf : f.HasBasis p s) (hh : Monotone h) :
    (f.lift' h).HasBasis p (h ‚àò s) :=
  ‚ü®fun t => (hf.mem_lift_iff (fun i => hasBasis_principal (h (s i)))
    (monotone_principal.comp hh)).trans <| by simp only [exists_const, true_and, comp]‚ü©
#align filter.has_basis.lift' Filter.HasBasis.lift'

theorem mem_lift'_sets (hh : Monotone h) {s : Set Œ≤} : s ‚àà f.lift' h ‚Üî ‚àÉ t ‚àà f, h t ‚äÜ s :=
  mem_lift_sets <| monotone_principal.comp hh
#align filter.mem_lift'_sets Filter.mem_lift'_sets

theorem eventually_lift'_iff (hh : Monotone h) {p : Œ≤ ‚Üí Prop} :
    (‚àÄ·∂† y in f.lift' h, p y) ‚Üî ‚àÉ t ‚àà f, ‚àÄ y ‚àà h t, p y :=
  mem_lift'_sets hh
#align filter.eventually_lift'_iff Filter.eventually_lift'_iff

theorem sInter_lift'_sets (hh : Monotone h) : ‚ãÇ‚ÇÄ { s | s ‚àà f.lift' h } = ‚ãÇ s ‚àà f, h s :=
  (sInter_lift_sets (monotone_principal.comp hh)).trans <| iInter‚ÇÇ_congr fun _ _ => csInf_Ici
#align filter.sInter_lift'_sets Filter.sInter_lift'_sets

theorem lift'_le {f : Filter Œ±} {g : Set Œ± ‚Üí Set Œ≤} {h : Filter Œ≤} {s : Set Œ±} (hs : s ‚àà f)
    (hg : ùìü (g s) ‚â§ h) : f.lift' g ‚â§ h :=
  lift_le hs hg
#align filter.lift'_le Filter.lift'_le

theorem lift'_mono (hf : f‚ÇÅ ‚â§ f‚ÇÇ) (hh : h‚ÇÅ ‚â§ h‚ÇÇ) : f‚ÇÅ.lift' h‚ÇÅ ‚â§ f‚ÇÇ.lift' h‚ÇÇ :=
  lift_mono hf fun s => principal_mono.mpr <| hh s
#align filter.lift'_mono Filter.lift'_mono

theorem lift'_mono' (hh : ‚àÄ s ‚àà f, h‚ÇÅ s ‚äÜ h‚ÇÇ s) : f.lift' h‚ÇÅ ‚â§ f.lift' h‚ÇÇ :=
  iInf‚ÇÇ_mono fun s hs => principal_mono.mpr <| hh s hs
#align filter.lift'_mono' Filter.lift'_mono'

theorem lift'_cong (hh : ‚àÄ s ‚àà f, h‚ÇÅ s = h‚ÇÇ s) : f.lift' h‚ÇÅ = f.lift' h‚ÇÇ :=
  le_antisymm (lift'_mono' fun s hs => le_of_eq <| hh s hs)
    (lift'_mono' fun s hs => le_of_eq <| (hh s hs).symm)
#align filter.lift'_cong Filter.lift'_cong

theorem map_lift'_eq {m : Œ≤ ‚Üí Œ≥} (hh : Monotone h) : map m (f.lift' h) = f.lift' (image m ‚àò h) :=
  calc
    map m (f.lift' h) = f.lift (map m ‚àò ùìü ‚àò h) := map_lift_eq <| monotone_principal.comp hh
    _ = f.lift' (image m ‚àò h) := by simp only [comp, Filter.lift', map_principal]
#align filter.map_lift'_eq Filter.map_lift'_eq

theorem lift'_map_le {g : Set Œ≤ ‚Üí Set Œ≥} {m : Œ± ‚Üí Œ≤} : (map m f).lift' g ‚â§ f.lift' (g ‚àò image m) :=
  lift_map_le
#align filter.lift'_map_le Filter.lift'_map_le

theorem map_lift'_eq2 {g : Set Œ≤ ‚Üí Set Œ≥} {m : Œ± ‚Üí Œ≤} (hg : Monotone g) :
    (map m f).lift' g = f.lift' (g ‚àò image m) :=
  map_lift_eq2 <| monotone_principal.comp hg
#align filter.map_lift'_eq2 Filter.map_lift'_eq2

theorem comap_lift'_eq {m : Œ≥ ‚Üí Œ≤} : comap m (f.lift' h) = f.lift' (preimage m ‚àò h) := by
  simp only [Filter.lift', comap_lift_eq, (¬∑ ‚àò ¬∑), comap_principal]
#align filter.comap_lift'_eq Filter.comap_lift'_eq

theorem comap_lift'_eq2 {m : Œ≤ ‚Üí Œ±} {g : Set Œ≤ ‚Üí Set Œ≥} (hg : Monotone g) :
    (comap m f).lift' g = f.lift' (g ‚àò preimage m) :=
  comap_lift_eq2 <| monotone_principal.comp hg
#align filter.comap_lift'_eq2 Filter.comap_lift'_eq2

theorem lift'_principal {s : Set Œ±} (hh : Monotone h) : (ùìü s).lift' h = ùìü (h s) :=
  lift_principal <| monotone_principal.comp hh
#align filter.lift'_principal Filter.lift'_principal

theorem lift'_pure {a : Œ±} (hh : Monotone h) : (pure a : Filter Œ±).lift' h = ùìü (h {a}) := by
  rw [‚Üê principal_singleton, lift'_principal hh]
#align filter.lift'_pure Filter.lift'_pure

theorem lift'_bot (hh : Monotone h) : (‚ä• : Filter Œ±).lift' h = ùìü (h ‚àÖ) := by
  rw [‚Üê principal_empty, lift'_principal hh]
#align filter.lift'_bot Filter.lift'_bot

theorem le_lift' {f : Filter Œ±} {h : Set Œ± ‚Üí Set Œ≤} {g : Filter Œ≤} :
    g ‚â§ f.lift' h ‚Üî ‚àÄ s ‚àà f, h s ‚àà g :=
  le_lift.trans <| forall‚ÇÇ_congr fun _ _ => le_principal_iff
#align filter.le_lift' Filter.le_lift'

theorem principal_le_lift' {t : Set Œ≤} : ùìü t ‚â§ f.lift' h ‚Üî ‚àÄ s ‚àà f, t ‚äÜ h s :=
  le_lift'
#align filter.principal_le_lift' Filter.principal_le_lift'

theorem monotone_lift' [Preorder Œ≥] {f : Œ≥ ‚Üí Filter Œ±} {g : Œ≥ ‚Üí Set Œ± ‚Üí Set Œ≤} (hf : Monotone f)
    (hg : Monotone g) : Monotone fun c => (f c).lift' (g c) := fun _ _ h => lift'_mono (hf h) (hg h)
#align filter.monotone_lift' Filter.monotone_lift'

theorem lift_lift'_assoc {g : Set Œ± ‚Üí Set Œ≤} {h : Set Œ≤ ‚Üí Filter Œ≥} (hg : Monotone g)
    (hh : Monotone h) : (f.lift' g).lift h = f.lift fun s => h (g s) :=
  calc
    (f.lift' g).lift h = f.lift fun s => (ùìü (g s)).lift h := lift_assoc (monotone_principal.comp hg)
    _ = f.lift fun s => h (g s) := by simp only [lift_principal, hh, eq_self_iff_true]
#align filter.lift_lift'_assoc Filter.lift_lift'_assoc

theorem lift'_lift'_assoc {g : Set Œ± ‚Üí Set Œ≤} {h : Set Œ≤ ‚Üí Set Œ≥} (hg : Monotone g)
    (hh : Monotone h) : (f.lift' g).lift' h = f.lift' fun s => h (g s) :=
  lift_lift'_assoc hg (monotone_principal.comp hh)
#align filter.lift'_lift'_assoc Filter.lift'_lift'_assoc

theorem lift'_lift_assoc {g : Set Œ± ‚Üí Filter Œ≤} {h : Set Œ≤ ‚Üí Set Œ≥} (hg : Monotone g) :
    (f.lift g).lift' h = f.lift fun s => (g s).lift' h :=
  lift_assoc hg
#align filter.lift'_lift_assoc Filter.lift'_lift_assoc

theorem lift_lift'_same_le_lift' {g : Set Œ± ‚Üí Set Œ± ‚Üí Set Œ≤} :
    (f.lift fun s => f.lift' (g s)) ‚â§ f.lift' fun s => g s s :=
  lift_lift_same_le_lift
#align filter.lift_lift'_same_le_lift' Filter.lift_lift'_same_le_lift'

theorem lift_lift'_same_eq_lift' {g : Set Œ± ‚Üí Set Œ± ‚Üí Set Œ≤} (hg‚ÇÅ : ‚àÄ s, Monotone fun t => g s t)
    (hg‚ÇÇ : ‚àÄ t, Monotone fun s => g s t) :
    (f.lift fun s => f.lift' (g s)) = f.lift' fun s => g s s :=
  lift_lift_same_eq_lift (fun s => monotone_principal.comp (hg‚ÇÅ s)) fun t =>
    monotone_principal.comp (hg‚ÇÇ t)
#align filter.lift_lift'_same_eq_lift' Filter.lift_lift'_same_eq_lift'

theorem lift'_inf_principal_eq {h : Set Œ± ‚Üí Set Œ≤} {s : Set Œ≤} :
    f.lift' h ‚äì ùìü s = f.lift' fun t => h t ‚à© s := by
  simp only [Filter.lift', Filter.lift, (¬∑ ‚àò ¬∑), ‚Üê inf_principal, iInf_subtype', ‚Üê iInf_inf]
#align filter.lift'_inf_principal_eq Filter.lift'_inf_principal_eq

theorem lift'_neBot_iff (hh : Monotone h) : NeBot (f.lift' h) ‚Üî ‚àÄ s ‚àà f, (h s).Nonempty :=
  calc
    NeBot (f.lift' h) ‚Üî ‚àÄ s ‚àà f, NeBot (ùìü (h s)) := lift_neBot_iff (monotone_principal.comp hh)
    _ ‚Üî ‚àÄ s ‚àà f, (h s).Nonempty := by simp only [principal_neBot_iff]
#align filter.lift'_ne_bot_iff Filter.lift'_neBot_iff

@[simp]
theorem lift'_id {f : Filter Œ±} : f.lift' id = f :=
  lift_principal2
#align filter.lift'_id Filter.lift'_id

theorem lift'_iInf [Nonempty Œπ] {f : Œπ ‚Üí Filter Œ±} {g : Set Œ± ‚Üí Set Œ≤}
    (hg : ‚àÄ s t, g (s ‚à© t) = g s ‚à© g t) : (iInf f).lift' g = ‚®Ö i, (f i).lift' g :=
  lift_iInf fun s t => by simp only [inf_principal, comp, hg]
#align filter.lift'_infi Filter.lift'_iInf

theorem lift'_iInf_of_map_univ {f : Œπ ‚Üí Filter Œ±} {g : Set Œ± ‚Üí Set Œ≤}
    (hg : ‚àÄ {s t}, g (s ‚à© t) = g s ‚à© g t) (hg' : g univ = univ) :
    (iInf f).lift' g = ‚®Ö i, (f i).lift' g :=
  lift_iInf_of_map_univ (fun s t => by simp only [inf_principal, comp, hg])
    (by rw [Function.comp_apply, hg', principal_univ])
#align filter.lift'_infi_of_map_univ Filter.lift'_iInf_of_map_univ

theorem lift'_inf (f g : Filter Œ±) {s : Set Œ± ‚Üí Set Œ≤} (hs : ‚àÄ t‚ÇÅ t‚ÇÇ, s (t‚ÇÅ ‚à© t‚ÇÇ) = s t‚ÇÅ ‚à© s t‚ÇÇ) :
    (f ‚äì g).lift' s = f.lift' s ‚äì g.lift' s := by
  rw [inf_eq_iInf, inf_eq_iInf, lift'_iInf hs]
  refine iInf_congr ?_
  rintro (_|_) <;> rfl
#align filter.lift'_inf Filter.lift'_inf

theorem lift'_inf_le (f g : Filter Œ±) (s : Set Œ± ‚Üí Set Œ≤) :
    (f ‚äì g).lift' s ‚â§ f.lift' s ‚äì g.lift' s :=
  le_inf (lift'_mono inf_le_left le_rfl) (lift'_mono inf_le_right le_rfl)
#align filter.lift'_inf_le Filter.lift'_inf_le

theorem comap_eq_lift' {f : Filter Œ≤} {m : Œ± ‚Üí Œ≤} : comap m f = f.lift' (preimage m) :=
  Filter.ext fun _ => (mem_lift'_sets monotone_preimage).symm
#align filter.comap_eq_lift' Filter.comap_eq_lift'

end Lift'

section Prod

variable {f : Filter Œ±}

theorem prod_def {f : Filter Œ±} {g : Filter Œ≤} :
    f √óÀ¢ g = f.lift fun s => g.lift' fun t => s √óÀ¢ t := by
  simpa only [Filter.lift', Filter.lift, (f.basis_sets.prod g.basis_sets).eq_biInf,
    iInf_prod, iInf_and] using iInf_congr fun i => iInf_comm
#align filter.prod_def Filter.prod_def

alias mem_prod_same_iff := mem_prod_self_iff
#align filter.mem_prod_same_iff Filter.mem_prod_same_iff

theorem prod_same_eq : f √óÀ¢ f = f.lift' fun t : Set Œ± => t √óÀ¢ t :=
  f.basis_sets.prod_self.eq_biInf
#align filter.prod_same_eq Filter.prod_same_eq

theorem tendsto_prod_self_iff {f : Œ± √ó Œ± ‚Üí Œ≤} {x : Filter Œ±} {y : Filter Œ≤} :
    Filter.Tendsto f (x √óÀ¢ x) y ‚Üî ‚àÄ W ‚àà y, ‚àÉ U ‚àà x, ‚àÄ x x' : Œ±, x ‚àà U ‚Üí x' ‚àà U ‚Üí f (x, x') ‚àà W := by
  simp only [tendsto_def, mem_prod_same_iff, prod_sub_preimage_iff, exists_prop, iff_self_iff]
#align filter.tendsto_prod_self_iff Filter.tendsto_prod_self_iff

variable {Œ±‚ÇÅ : Type*} {Œ±‚ÇÇ : Type*} {Œ≤‚ÇÅ : Type*} {Œ≤‚ÇÇ : Type*}

theorem prod_lift_lift {f‚ÇÅ : Filter Œ±‚ÇÅ} {f‚ÇÇ : Filter Œ±‚ÇÇ} {g‚ÇÅ : Set Œ±‚ÇÅ ‚Üí Filter Œ≤‚ÇÅ}
    {g‚ÇÇ : Set Œ±‚ÇÇ ‚Üí Filter Œ≤‚ÇÇ} (hg‚ÇÅ : Monotone g‚ÇÅ) (hg‚ÇÇ : Monotone g‚ÇÇ) :
    f‚ÇÅ.lift g‚ÇÅ √óÀ¢ f‚ÇÇ.lift g‚ÇÇ = f‚ÇÅ.lift fun s => f‚ÇÇ.lift fun t => g‚ÇÅ s √óÀ¢ g‚ÇÇ t := by
  simp only [prod_def, lift_assoc hg‚ÇÅ]
  apply congr_arg; funext x
  rw [lift_comm]
  apply congr_arg; funext y
  apply lift'_lift_assoc hg‚ÇÇ
#align filter.prod_lift_lift Filter.prod_lift_lift

theorem prod_lift'_lift' {f‚ÇÅ : Filter Œ±‚ÇÅ} {f‚ÇÇ : Filter Œ±‚ÇÇ} {g‚ÇÅ : Set Œ±‚ÇÅ ‚Üí Set Œ≤‚ÇÅ}
    {g‚ÇÇ : Set Œ±‚ÇÇ ‚Üí Set Œ≤‚ÇÇ} (hg‚ÇÅ : Monotone g‚ÇÅ) (hg‚ÇÇ : Monotone g‚ÇÇ) :
    f‚ÇÅ.lift' g‚ÇÅ √óÀ¢ f‚ÇÇ.lift' g‚ÇÇ = f‚ÇÅ.lift fun s => f‚ÇÇ.lift' fun t => g‚ÇÅ s √óÀ¢ g‚ÇÇ t :=
  calc
    f‚ÇÅ.lift' g‚ÇÅ √óÀ¢ f‚ÇÇ.lift' g‚ÇÇ = f‚ÇÅ.lift fun s => f‚ÇÇ.lift fun t => ùìü (g‚ÇÅ s) √óÀ¢ ùìü (g‚ÇÇ t) :=
      prod_lift_lift (monotone_principal.comp hg‚ÇÅ) (monotone_principal.comp hg‚ÇÇ)
    _ = f‚ÇÅ.lift fun s => f‚ÇÇ.lift fun t => ùìü (g‚ÇÅ s √óÀ¢ g‚ÇÇ t) := by
      { simp only [prod_principal_principal] }
#align filter.prod_lift'_lift' Filter.prod_lift'_lift'

end Prod

end Filter
