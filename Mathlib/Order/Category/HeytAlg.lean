/-
Copyright (c) 2022 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import Mathlib.Order.Category.BddDistLat
import Mathlib.Order.Heyting.Hom

/-!
# The category of Heyting algebras

This file defines `HeytAlg`, the category of Heyting algebras.
-/


universe u

open CategoryTheory Opposite Order

/-- The category of Heyting algebras. -/
structure HeytAlg where
  /-- The underlying Heyting algebra. -/
  carrier : Type*
  [str : HeytingAlgebra carrier]

attribute [instance] HeytAlg.str

initialize_simps_projections HeytAlg (carrier ‚Üí coe, -str)

namespace HeytAlg

instance : CoeSort HeytAlg (Type _) :=
  ‚ü®HeytAlg.carrier‚ü©

attribute [coe] HeytAlg.carrier

/-- Construct a bundled `HeytAlg` from the underlying type and typeclass. -/
abbrev of (X : Type*) [HeytingAlgebra X] : HeytAlg := ‚ü®X‚ü©

/-- The type of morphisms in `HeytAlg R`. -/
@[ext]
structure Hom (X Y : HeytAlg.{u}) where
  private mk ::
  /-- The underlying `HeytingHom`. -/
  hom' : HeytingHom X Y

instance : Category HeytAlg.{u} where
  Hom X Y := Hom X Y
  id X := ‚ü®HeytingHom.id X‚ü©
  comp f g := ‚ü®g.hom'.comp f.hom'‚ü©

instance : ConcreteCategory HeytAlg (HeytingHom ¬∑ ¬∑) where
  hom := Hom.hom'
  ofHom := Hom.mk

/-- Turn a morphism in `HeytAlg` back into a `HeytingHom`. -/
abbrev Hom.hom {X Y : HeytAlg.{u}} (f : Hom X Y) :=
  ConcreteCategory.hom (C := HeytAlg) f

/-- Typecheck a `HeytingHom` as a morphism in `HeytAlg`. -/
abbrev ofHom {X Y : Type u} [HeytingAlgebra X] [HeytingAlgebra Y] (f : HeytingHom X Y) :
    of X ‚ü∂ of Y :=
  ConcreteCategory.ofHom (C := HeytAlg) f

variable {R} in
/-- Use the `ConcreteCategory.hom` projection for `@[simps]` lemmas. -/
def Hom.Simps.hom (X Y : HeytAlg.{u}) (f : Hom X Y) :=
  f.hom

initialize_simps_projections Hom (hom' ‚Üí hom)

/-!
The results below duplicate the `ConcreteCategory` simp lemmas, but we can keep them for `dsimp`.
-/

@[simp]
lemma coe_id {X : HeytAlg} : (ùüô X : X ‚Üí X) = id := rfl

@[simp]
lemma coe_comp {X Y Z : HeytAlg} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} : (f ‚â´ g : X ‚Üí Z) = g ‚àò f := rfl

@[simp]
lemma forget_map {X Y : HeytAlg} (f : X ‚ü∂ Y) :
    (forget HeytAlg).map f = f := rfl

@[ext]
lemma ext {X Y : HeytAlg} {f g : X ‚ü∂ Y} (w : ‚àÄ x : X, f x = g x) : f = g :=
  ConcreteCategory.hom_ext _ _ w

-- This is not `simp` to avoid rewriting in types of terms.
theorem coe_of (X : Type u) [HeytingAlgebra X] : (HeytAlg.of X : Type u) = X := rfl

@[simp]
lemma hom_id {X : HeytAlg} : (ùüô X : X ‚ü∂ X).hom = HeytingHom.id _ := rfl

/- Provided for rewriting. -/
lemma id_apply (X : HeytAlg) (x : X) :
    (ùüô X : X ‚ü∂ X) x = x := by simp

@[simp]
lemma hom_comp {X Y Z : HeytAlg} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).hom = g.hom.comp f.hom := rfl

/- Provided for rewriting. -/
lemma comp_apply {X Y Z : HeytAlg} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : X) :
    (f ‚â´ g) x = g (f x) := by simp

@[ext]
lemma hom_ext {X Y : HeytAlg} {f g : X ‚ü∂ Y} (hf : f.hom = g.hom) : f = g :=
  Hom.ext hf

@[simp]
lemma hom_ofHom {X Y : Type u} [HeytingAlgebra X] [HeytingAlgebra Y] (f : HeytingHom X Y) :
  (ofHom f).hom = f := rfl

@[simp]
lemma ofHom_hom {X Y : HeytAlg} (f : X ‚ü∂ Y) :
    ofHom (Hom.hom f) = f := rfl

@[simp]
lemma ofHom_id {X : Type u} [HeytingAlgebra X] : ofHom (HeytingHom.id _) = ùüô (of X) := rfl

@[simp]
lemma ofHom_comp {X Y Z : Type u} [HeytingAlgebra X] [HeytingAlgebra Y] [HeytingAlgebra Z]
    (f : HeytingHom X Y) (g : HeytingHom Y Z) :
    ofHom (g.comp f) = ofHom f ‚â´ ofHom g :=
  rfl

lemma ofHom_apply {X Y : Type u} [HeytingAlgebra X] [HeytingAlgebra Y]
    (f : HeytingHom X Y) (x : X) :
    (ofHom f) x = f x := rfl

@[simp]
lemma inv_hom_apply {X Y : HeytAlg} (e : X ‚âÖ Y) (x : X) : e.inv (e.hom x) = x := by
  rw [‚Üê comp_apply]
  simp

@[simp]
lemma hom_inv_apply {X Y : HeytAlg} (e : X ‚âÖ Y) (s : Y) : e.hom (e.inv s) = s := by
  rw [‚Üê comp_apply]
  simp

instance : Inhabited HeytAlg :=
  ‚ü®of PUnit‚ü©

@[simps]
instance hasForgetToLat : HasForget‚ÇÇ HeytAlg BddDistLat where
  forget‚ÇÇ.obj X := .of X
  forget‚ÇÇ.map f := BddDistLat.ofHom f.hom

/-- Constructs an isomorphism of Heyting algebras from an order isomorphism between them. -/
@[simps]
def Iso.mk {Œ± Œ≤ : HeytAlg.{u}} (e : Œ± ‚âÉo Œ≤) : Œ± ‚âÖ Œ≤ where
  hom := ofHom e
  inv := ofHom e.symm
  hom_inv_id := by ext; exact e.symm_apply_apply _
  inv_hom_id := by ext; exact e.apply_symm_apply _

end HeytAlg
