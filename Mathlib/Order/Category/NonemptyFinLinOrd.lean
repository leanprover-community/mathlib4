/-
Copyright (c) 2020 Johan Commelin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johan Commelin
-/
import Mathlib.CategoryTheory.ConcreteCategory.EpiMono
import Mathlib.CategoryTheory.Limits.Shapes.Images
import Mathlib.CategoryTheory.Limits.Shapes.RegularMono
import Mathlib.Data.Fintype.Order
import Mathlib.Data.Set.Subsingleton
import Mathlib.Order.Category.FinPartOrd
import Mathlib.Order.Category.LinOrd

/-!
# Nonempty finite linear orders

This defines `NonemptyFinLinOrd`, the category of nonempty finite linear
orders with monotone maps. This is the index category for simplicial objects.

Note: `NonemptyFinLinOrd` is *not* a subcategory of `FinBddDistLat` because its morphisms do not
preserve `‚ä•` and `‚ä§`.
-/

universe u v

open CategoryTheory CategoryTheory.Limits

/-- The category of nonempty finite linear orders. -/
structure NonemptyFinLinOrd extends LinOrd where
  [nonempty : Nonempty carrier]
  [fintype : Fintype carrier]

attribute [instance] NonemptyFinLinOrd.nonempty NonemptyFinLinOrd.fintype

namespace NonemptyFinLinOrd

instance : CoeSort NonemptyFinLinOrd (Type _) where
  coe X := X.carrier

instance : LargeCategory NonemptyFinLinOrd :=
  InducedCategory.category NonemptyFinLinOrd.toLinOrd
instance : ConcreteCategory NonemptyFinLinOrd (¬∑ ‚Üío ¬∑) :=
  InducedCategory.concreteCategory NonemptyFinLinOrd.toLinOrd

instance (X : NonemptyFinLinOrd) : BoundedOrder X :=
    Fintype.toBoundedOrder X

/-- Construct a bundled `NonemptyFinLinOrd` from the underlying type and typeclass. -/
abbrev of (Œ± : Type*) [Nonempty Œ±] [Fintype Œ±] [LinearOrder Œ±] : NonemptyFinLinOrd where
  carrier := Œ±

theorem coe_of (Œ± : Type*) [Nonempty Œ±] [Fintype Œ±] [LinearOrder Œ±] : ‚Ü•(of Œ±) = Œ± :=
  rfl

/-- Typecheck a `OrderHom` as a morphism in `NonemptyFinLinOrd`. -/
abbrev ofHom {X Y : Type u} [Nonempty X] [LinearOrder X] [Fintype X]
    [Nonempty Y] [LinearOrder Y] [Fintype Y] (f : X ‚Üío Y) :
    of X ‚ü∂ of Y :=
  ConcreteCategory.ofHom (C := NonemptyFinLinOrd) f

@[simp]
lemma hom_id {X : NonemptyFinLinOrd} : (ùüô X : X ‚ü∂ X).hom = OrderHom.id := rfl

/- Provided for rewriting. -/
lemma id_apply (X : NonemptyFinLinOrd) (x : X) :
    (ùüô X : X ‚ü∂ X) x = x := by simp

@[simp]
lemma hom_comp {X Y Z : NonemptyFinLinOrd} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).hom = g.hom.comp f.hom := rfl

/- Provided for rewriting. -/
lemma comp_apply {X Y Z : NonemptyFinLinOrd} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : X) :
    (f ‚â´ g) x = g (f x) := by simp

@[ext]
lemma hom_ext {X Y : NonemptyFinLinOrd} {f g : X ‚ü∂ Y} (hf : f.hom = g.hom) : f = g :=
  ConcreteCategory.ext hf

@[simp]
lemma hom_ofHom {X Y : Type u} [Nonempty X] [LinearOrder X] [Fintype X] [Nonempty Y]
    [LinearOrder Y] [Fintype Y] (f : X ‚Üío Y) :
  (ofHom f).hom = f := rfl

@[simp]
lemma ofHom_hom {X Y : NonemptyFinLinOrd} (f : X ‚ü∂ Y) :
    ofHom f.hom = f := rfl

instance : Inhabited NonemptyFinLinOrd :=
  ‚ü®of PUnit‚ü©

instance hasForgetToLinOrd : HasForget‚ÇÇ NonemptyFinLinOrd LinOrd :=
  InducedCategory.hasForget‚ÇÇ _

instance hasForgetToFinPartOrd : HasForget‚ÇÇ NonemptyFinLinOrd FinPartOrd where
  forget‚ÇÇ.obj X := .of X
  forget‚ÇÇ.map f := FinPartOrd.ofHom f.hom

/-- Constructs an equivalence between nonempty finite linear orders from an order isomorphism
between them. -/
@[simps]
def Iso.mk {Œ± Œ≤ : NonemptyFinLinOrd.{u}} (e : Œ± ‚âÉo Œ≤) : Œ± ‚âÖ Œ≤ where
  hom := ofHom e
  inv := ofHom e.symm

/-- `OrderDual` as a functor. -/
@[simps map]
def dual : NonemptyFinLinOrd ‚•§ NonemptyFinLinOrd where
  obj X := of X·µí·µà
  map f := ofHom f.hom.dual

/-- The equivalence between `NonemptyFinLinOrd` and itself induced by `OrderDual` both ways. -/
@[simps functor inverse]
def dualEquiv : NonemptyFinLinOrd ‚âå NonemptyFinLinOrd where
  functor := dual
  inverse := dual
  unitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X
  counitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X

theorem mono_iff_injective {A B : NonemptyFinLinOrd.{u}} (f : A ‚ü∂ B) :
    Mono f ‚Üî Function.Injective f := by
  refine ‚ü®?_, ConcreteCategory.mono_of_injective f‚ü©
  intro
  intro a‚ÇÅ a‚ÇÇ h
  let X := of (ULift (Fin 1))
  let g‚ÇÅ : X ‚ü∂ A := ofHom ‚ü®fun _ => a‚ÇÅ, fun _ _ _ => by rfl‚ü©
  let g‚ÇÇ : X ‚ü∂ A := ofHom ‚ü®fun _ => a‚ÇÇ, fun _ _ _ => by rfl‚ü©
  change g‚ÇÅ (ULift.up (0 : Fin 1)) = g‚ÇÇ (ULift.up (0 : Fin 1))
  have eq : g‚ÇÅ ‚â´ f = g‚ÇÇ ‚â´ f := by
    ext
    exact h
  rw [cancel_mono] at eq
  rw [eq]

theorem epi_iff_surjective {A B : NonemptyFinLinOrd.{u}} (f : A ‚ü∂ B) :
    Epi f ‚Üî Function.Surjective f := by
  constructor
  ¬∑ intro
    dsimp only [Function.Surjective]
    by_contra! hf'
    rcases hf' with ‚ü®m, hm‚ü©
    let Y := of (ULift (Fin 2))
    let p‚ÇÅ : B ‚ü∂ Y := ofHom
      ‚ü®fun b => if b < m then ULift.up 0 else ULift.up 1, fun x‚ÇÅ x‚ÇÇ h => by
        simp only
        split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÇ
        any_goals apply Fin.zero_le
        ¬∑ exfalso
          exact h‚ÇÅ (lt_of_le_of_lt h h‚ÇÇ)
        ¬∑ rfl‚ü©
    let p‚ÇÇ : B ‚ü∂ Y := ofHom
      ‚ü®fun b => if b ‚â§ m then ULift.up 0 else ULift.up 1, fun x‚ÇÅ x‚ÇÇ h => by
        simp only
        split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÇ
        any_goals apply Fin.zero_le
        ¬∑ exfalso
          exact h‚ÇÅ (h.trans h‚ÇÇ)
        ¬∑ rfl‚ü©
    have h : p‚ÇÅ m = p‚ÇÇ m := by
      congr
      rw [‚Üê cancel_epi f]
      ext a : 3
      simp only [p‚ÇÅ, p‚ÇÇ, hom_comp, OrderHom.comp_coe, Function.comp_apply, hom_ofHom]
      change ite _ _ _ = ite _ _ _
      split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÇ
      any_goals rfl
      ¬∑ exfalso
        exact h‚ÇÇ (le_of_lt h‚ÇÅ)
      ¬∑ exfalso
        exact hm a (eq_of_le_of_not_lt h‚ÇÇ h‚ÇÅ)
    simp [Y, p‚ÇÅ, p‚ÇÇ, ConcreteCategory.hom_ofHom] at h
  ¬∑ intro h
    exact ConcreteCategory.epi_of_surjective f h

instance : SplitEpiCategory NonemptyFinLinOrd.{u} :=
  ‚ü®fun {X Y} f hf => by
    have H : ‚àÄ y : Y, Nonempty (f ‚Åª¬π' {y}) := by
      rw [epi_iff_surjective] at hf
      intro y
      exact Nonempty.intro ‚ü®(hf y).choose, (hf y).choose_spec‚ü©
    let œÜ : Y ‚Üí X := fun y => (H y).some.1
    have hœÜ : ‚àÄ y : Y, f (œÜ y) = y := fun y => (H y).some.2
    refine IsSplitEpi.mk' ‚ü®ofHom ‚ü®œÜ, ?_‚ü©, ?_‚ü©
    swap
    ¬∑ ext b
      apply hœÜ
    ¬∑ intro a b
      contrapose
      intro h
      simp only [not_le] at h ‚ä¢
      suffices b ‚â§ a by
        apply lt_of_le_of_ne this
        rintro rfl
        exfalso
        simp at h
      have H : f (œÜ b) ‚â§ f (œÜ a) := f.hom.monotone (le_of_lt h)
      simpa only [hœÜ] using H‚ü©

instance : HasStrongEpiMonoFactorisations NonemptyFinLinOrd.{u} :=
  ‚ü®fun {X Y} f => by
    let I := of (Set.image f ‚ä§)
    let e : X ‚ü∂ I := ofHom ‚ü®fun x => ‚ü®f x, ‚ü®x, by tauto‚ü©‚ü©, fun x‚ÇÅ x‚ÇÇ h => f.hom.monotone h‚ü©
    let m : I ‚ü∂ Y := ofHom ‚ü®fun y => y.1, by tauto‚ü©
    haveI : Epi e := by
      rw [epi_iff_surjective]
      rintro ‚ü®_, y, h, rfl‚ü©
      exact ‚ü®y, rfl‚ü©
    haveI : StrongEpi e := strongEpi_of_epi e
    haveI : Mono m := ConcreteCategory.mono_of_injective _ (fun x y h => Subtype.ext h)
    exact ‚ü®‚ü®I, m, e, rfl‚ü©‚ü©‚ü©

end NonemptyFinLinOrd

theorem nonemptyFinLinOrd_dual_comp_forget_to_linOrd :
    NonemptyFinLinOrd.dual ‚ãô forget‚ÇÇ NonemptyFinLinOrd LinOrd =
      forget‚ÇÇ NonemptyFinLinOrd LinOrd ‚ãô LinOrd.dual :=
  rfl

/-- The forgetful functor `NonemptyFinLinOrd ‚•§ FinPartOrd` and `OrderDual` commute. -/
def nonemptyFinLinOrdDualCompForgetToFinPartOrd :
    NonemptyFinLinOrd.dual ‚ãô forget‚ÇÇ NonemptyFinLinOrd FinPartOrd ‚âÖ
      forget‚ÇÇ NonemptyFinLinOrd FinPartOrd ‚ãô FinPartOrd.dual where
  hom.app X := FinPartOrd.ofHom OrderHom.id
  inv.app X := FinPartOrd.ofHom OrderHom.id

/-- The generating arrow `i ‚ü∂ i+1` in the category `Fin n` -/
def Fin.hom_succ {n} (i : Fin n) : i.castSucc ‚ü∂ i.succ := homOfLE (Fin.castSucc_le_succ i)
