/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Johan Commelin
-/
import Mathlib.Order.Category.PartOrd
import Mathlib.CategoryTheory.Limits.Types.Filtered
import Mathlib.CategoryTheory.Limits.Preserves.Filtered
import Mathlib.CategoryTheory.Limits.Filtered

/-!
# Category of partial orders, with order embeddings as morphisms

This defines `PartOrdEmb`, the category of partial orders with order embeddings
as morphisms. We also show that `PartOrdEmb` has filtered colimits.

-/

open CategoryTheory Limits

universe u

/-- The category of partial orders. -/
structure PartOrdEmb where
  /-- The underlying partially ordered type. -/
  (carrier : Type*)
  [str : PartialOrder carrier]

attribute [instance] PartOrdEmb.str

initialize_simps_projections PartOrdEmb (carrier ‚Üí coe, -str)

namespace PartOrdEmb

instance : CoeSort PartOrdEmb (Type _) :=
  ‚ü®PartOrdEmb.carrier‚ü©

attribute [coe] PartOrdEmb.carrier

/-- Construct a bundled `PartOrdEmb` from the underlying type and typeclass. -/
abbrev of (X : Type*) [PartialOrder X] : PartOrdEmb := ‚ü®X‚ü©

/-- The type of morphisms in `PartOrdEmb R`. -/
@[ext]
structure Hom (X Y : PartOrdEmb.{u}) where
  private mk ::
  /-- The underlying `OrderEmbedding`. -/
  hom' : X ‚Ü™o Y

instance : Category PartOrdEmb.{u} where
  Hom X Y := Hom X Y
  id _ := ‚ü®RelEmbedding.refl _‚ü©
  comp f g := ‚ü®f.hom'.trans g.hom'‚ü©

instance : ConcreteCategory PartOrdEmb (¬∑ ‚Ü™o ¬∑) where
  hom := Hom.hom'
  ofHom := Hom.mk

/-- Turn a morphism in `PartOrdEmb` back into a `OrderEmbedding`. -/
abbrev Hom.hom {X Y : PartOrdEmb.{u}} (f : Hom X Y) :=
  ConcreteCategory.hom (C := PartOrdEmb) f

/-- Typecheck a `OrderEmbedding` as a morphism in `PartOrdEmb`. -/
abbrev ofHom {X Y : Type u} [PartialOrder X] [PartialOrder Y] (f : X ‚Ü™o Y) : of X ‚ü∂ of Y :=
  ConcreteCategory.ofHom (C := PartOrdEmb) f

variable {R} in
/-- Use the `ConcreteCategory.hom` projection for `@[simps]` lemmas. -/
def Hom.Simps.hom (X Y : PartOrdEmb.{u}) (f : Hom X Y) :=
  f.hom

initialize_simps_projections Hom (hom' ‚Üí hom)

/-!
The results below duplicate the `ConcreteCategory` simp lemmas, but we can keep them for `dsimp`.
-/

@[simp]
lemma coe_id {X : PartOrdEmb} : (ùüô X : X ‚Üí X) = id := rfl

@[simp]
lemma coe_comp {X Y Z : PartOrdEmb} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} : (f ‚â´ g : X ‚Üí Z) = g ‚àò f := rfl

@[simp]
lemma forget_map {X Y : PartOrdEmb} (f : X ‚ü∂ Y) :
    (forget PartOrdEmb).map f = f := rfl

@[ext]
lemma ext {X Y : PartOrdEmb} {f g : X ‚ü∂ Y} (w : ‚àÄ x : X, f x = g x) : f = g :=
  ConcreteCategory.hom_ext _ _ w

-- This is not `simp` to avoid rewriting in types of terms.
theorem coe_of (X : Type u) [PartialOrder X] : (PartOrdEmb.of X : Type u) = X := rfl

lemma hom_id {X : PartOrdEmb} : (ùüô X : X ‚ü∂ X).hom = RelEmbedding.refl _ := rfl

/- Provided for rewriting. -/
lemma id_apply (X : PartOrdEmb) (x : X) :
    (ùüô X : X ‚ü∂ X) x = x := by simp

@[simp]
lemma hom_comp {X Y Z : PartOrdEmb} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).hom = f.hom.trans g.hom := rfl

/- Provided for rewriting. -/
lemma comp_apply {X Y Z : PartOrdEmb} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : X) :
    (f ‚â´ g) x = g (f x) := by simp

lemma Hom.injective {X Y : PartOrdEmb.{u}} (f : X ‚ü∂ Y) : Function.Injective f :=
  f.hom'.injective

lemma Hom.le_iff_le {X Y : PartOrdEmb.{u}} (f : X ‚ü∂ Y) (x‚ÇÅ x‚ÇÇ : X) :
    f x‚ÇÅ ‚â§ f x‚ÇÇ ‚Üî x‚ÇÅ ‚â§ x‚ÇÇ :=
  f.hom'.le_iff_le

@[ext]
lemma hom_ext {X Y : PartOrdEmb} {f g : X ‚ü∂ Y} (hf : f.hom = g.hom) : f = g :=
  Hom.ext hf

@[simp]
lemma hom_ofHom {X Y : Type u} [PartialOrder X] [PartialOrder Y] (f : X ‚Ü™o Y) :
    (ofHom f).hom = f :=
  rfl

@[simp]
lemma ofHom_hom {X Y : PartOrdEmb} (f : X ‚ü∂ Y) : ofHom (Hom.hom f) = f := rfl

@[simp]
lemma ofHom_id {X : Type u} [PartialOrder X] : ofHom (RelEmbedding.refl _) = ùüô (of X) := rfl

@[simp]
lemma ofHom_comp {X Y Z : Type u} [PartialOrder X] [PartialOrder Y] [PartialOrder Z]
    (f : X ‚Ü™o Y) (g : Y ‚Ü™o Z) :
    ofHom (f.trans g) = ofHom f ‚â´ ofHom g :=
  rfl

lemma ofHom_apply {X Y : Type u} [PartialOrder X] [PartialOrder Y] (f : X ‚Ü™o Y) (x : X) :
    (ofHom f) x = f x := rfl

lemma inv_hom_apply {X Y : PartOrdEmb} (e : X ‚âÖ Y) (x : X) : e.inv (e.hom x) = x := by
  simp

lemma hom_inv_apply {X Y : PartOrdEmb} (e : X ‚âÖ Y) (s : Y) : e.hom (e.inv s) = s := by
  simp

instance hasForgetToPartOrd : HasForget‚ÇÇ PartOrdEmb PartOrd where
  forget‚ÇÇ.obj X := .of X
  forget‚ÇÇ.map f := PartOrd.ofHom f.hom

/-- Constructs an equivalence between partial orders from an order isomorphism between them. -/
@[simps]
def Iso.mk {Œ± Œ≤ : PartOrdEmb.{u}} (e : Œ± ‚âÉo Œ≤) : Œ± ‚âÖ Œ≤ where
  hom := ofHom e
  inv := ofHom e.symm

/-- `OrderDual` as a functor. -/
@[simps map]
def dual : PartOrdEmb ‚•§ PartOrdEmb where
  obj X := of X·µí·µà
  map f := ofHom f.hom.dual

/-- The equivalence between `PartOrdEmb` and itself induced by `OrderDual` both ways. -/
@[simps functor inverse]
def dualEquiv : PartOrdEmb ‚âå PartOrdEmb where
  functor := dual
  inverse := dual
  unitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X
  counitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X

end PartOrdEmb

theorem partOrdEmb_dual_comp_forget_to_pardOrd :
    PartOrdEmb.dual ‚ãô forget‚ÇÇ PartOrdEmb PartOrd =
      forget‚ÇÇ PartOrdEmb PartOrd ‚ãô PartOrd.dual :=
  rfl

namespace PartOrdEmb

variable {J : Type u} [SmallCategory J] [IsFiltered J] {F : J ‚•§ PartOrdEmb.{u}}

namespace Limits

variable {c : Cocone (F ‚ãô forget _)} (hc : IsColimit c)

/-- Given a functor `F : J ‚•§ PartOrdEmb` and a colimit cocone `c` for
`F ‚ãô forget _`, this is the type `c.pt` on which we define a partial order
which makes it the colimit of `F`. -/
@[nolint unusedArguments]
def CoconePt (_ : IsColimit c) : Type u := c.pt

open IsFiltered

instance : PartialOrder (CoconePt hc) where
  le x y := ‚àÉ (j : J) (x' y' : F.obj j) (hx : c.Œπ.app j x' = x)
      (hy : c.Œπ.app j y' = y), x' ‚â§ y'
  le_refl x := by
    obtain ‚ü®j, x', hx‚ü© := Types.jointly_surjective_of_isColimit hc x
    exact ‚ü®j, x', x', hx, hx, le_rfl‚ü©
  le_trans := by
    rintro x y z ‚ü®j, x‚ÇÅ, y‚ÇÅ, hx‚ÇÅ, hy‚ÇÅ, hxy‚ü© ‚ü®k, y‚ÇÇ, z‚ÇÅ, hy‚ÇÇ, hz‚ÇÅ, hyz‚ü©
    obtain ‚ü®l, a, b, h‚ü© :=
      (Types.FilteredColimit.isColimit_eq_iff _ hc (xi := y‚ÇÅ) (xj := y‚ÇÇ)).1
        (hy‚ÇÅ.trans hy‚ÇÇ.symm)
    exact ‚ü®l, F.map a x‚ÇÅ, F.map b z‚ÇÅ,
      (ConcreteCategory.congr_hom (c.w a) x‚ÇÅ).trans hx‚ÇÅ,
      (ConcreteCategory.congr_hom (c.w b) z‚ÇÅ).trans hz‚ÇÅ,
      ((F.map a).hom.monotone hxy).trans
        (le_of_eq_of_le h ((F.map b).hom.monotone hyz))‚ü©
  le_antisymm := by
    rintro x y ‚ü®j, x‚ÇÅ, y‚ÇÅ, hx‚ÇÅ, hy‚ÇÅ, h‚ÇÅ‚ü© ‚ü®k, y‚ÇÇ, x‚ÇÇ, hy‚ÇÇ, hx‚ÇÇ, h‚ÇÇ‚ü©
    obtain ‚ü®l, a, b, x‚ÇÉ, y‚ÇÉ, h‚ÇÉ, h‚ÇÑ, h‚ÇÖ, h‚ÇÜ‚ü© :
        ‚àÉ (l : J) (a : j ‚ü∂ l) (b : k ‚ü∂ l) (x‚ÇÉ y‚ÇÉ : _),
        x‚ÇÉ = F.map a x‚ÇÅ ‚àß x‚ÇÉ = F.map b x‚ÇÇ ‚àß y‚ÇÉ = F.map a y‚ÇÅ ‚àß y‚ÇÉ = F.map b y‚ÇÇ := by
      obtain ‚ü®l‚ÇÅ, a, b, h‚ÇÉ‚ü© :=
        (Types.FilteredColimit.isColimit_eq_iff _ hc (xi := x‚ÇÅ) (xj := x‚ÇÇ)).1
          (hx‚ÇÅ.trans hx‚ÇÇ.symm)
      obtain ‚ü®l‚ÇÇ, a', b', h‚ÇÑ‚ü© :=
        (Types.FilteredColimit.isColimit_eq_iff _ hc (xi := y‚ÇÅ) (xj := y‚ÇÇ)).1
          (hy‚ÇÅ.trans hy‚ÇÇ.symm)
      obtain ‚ü®l, d, d', h‚ÇÖ, h‚ÇÜ‚ü© := IsFiltered.bowtie a a' b b'
      exact ‚ü®l, a ‚â´ d, b ‚â´ d, F.map (a ‚â´ d) x‚ÇÅ, F.map (a' ‚â´ d') y‚ÇÅ, rfl,
        by simpa, by rw [h‚ÇÖ], by simpa [h‚ÇÜ]‚ü©
    have h‚Çá : x‚ÇÉ = y‚ÇÉ :=
      le_antisymm
        (by simpa only [h‚ÇÉ, h‚ÇÖ] using (F.map a).hom.monotone h‚ÇÅ)
        (by simpa only [h‚ÇÑ, h‚ÇÜ] using (F.map b).hom.monotone h‚ÇÇ)
    exact hx‚ÇÅ.symm.trans ((ConcreteCategory.congr_hom (c.w a) x‚ÇÅ).symm.trans
      ((congr_arg (c.Œπ.app l) (h‚ÇÉ.symm.trans (h‚Çá.trans h‚ÇÖ))).trans
        ((ConcreteCategory.congr_hom (c.w a) y‚ÇÅ).trans hy‚ÇÅ)))

/-- The colimit cocone for a functor `F : J ‚•§ PartOrdEmb` from a filtered
category that is constructed from a colimit cocone for `F ‚ãô forget _`. -/
@[simps]
def cocone : Cocone F where
  pt := .of (CoconePt hc)
  Œπ.app j := ofHom
    { toFun := c.Œπ.app j
      inj' x y h := by
        obtain ‚ü®k, a, ha‚ü© := (Types.FilteredColimit.isColimit_eq_iff' hc x y).1 h
        exact (F.map a).injective ha
      map_rel_iff' {x y} := by
        refine ‚ü®?_, fun h ‚Ü¶ ‚ü®j, x, y, rfl, rfl, h‚ü©‚ü©
        rintro ‚ü®k, x', y', hx, hy, h‚ü©
        obtain ‚ü®l‚ÇÅ, a‚ÇÅ, b‚ÇÅ, hl‚ÇÅ‚ü© := (Types.FilteredColimit.isColimit_eq_iff _ hc).1 hx
        obtain ‚ü®l‚ÇÇ, a‚ÇÇ, b‚ÇÇ, hl‚ÇÇ‚ü© := (Types.FilteredColimit.isColimit_eq_iff _ hc).1 hy
        dsimp at hx hy hl‚ÇÅ hl‚ÇÇ
        obtain ‚ü®m, d, d', h‚ÇÅ, h‚ÇÇ‚ü© := bowtie a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ
        rw [‚Üê (F.map (a‚ÇÅ ‚â´ d)).le_iff_le] at h
        rw [‚Üê (F.map (b‚ÇÅ ‚â´ d)).le_iff_le]
        conv_rhs => rw [h‚ÇÇ]
        conv_rhs at h => rw [h‚ÇÅ]
        simp only [Functor.map_comp, hom_comp, RelEmbedding.coe_trans, Function.comp_apply,
          ‚Üê hl‚ÇÅ, ‚Üê hl‚ÇÇ]
        simpa using h }
  Œπ.naturality _ _ f := by ext x; exact ConcreteCategory.congr_hom (c.w f) x

/-- Auxiliary definition for `isColimitCocone`. -/
def CoconePt.desc (s : Cocone F) : CoconePt hc ‚Ü™o s.pt where
  toFun := hc.desc ((forget _).mapCocone s)
  inj' x y h := by
    obtain ‚ü®j, x', y', rfl, rfl‚ü© :=
      Types.FilteredColimit.jointly_surjective_of_isColimit‚ÇÇ hc x y
    obtain rfl := (s.Œπ.app j).injective
      (((congr_fun (hc.fac ((forget _).mapCocone s) j) x').symm.trans h).trans
        (congr_fun (hc.fac ((forget _).mapCocone s) j) y'))
    rfl
  map_rel_iff' {x y} := by
    obtain ‚ü®j, x', y', rfl, rfl‚ü© :=
      Types.FilteredColimit.jointly_surjective_of_isColimit‚ÇÇ hc x y
    have hx := (congr_fun (hc.fac ((forget _).mapCocone s) j) x')
    have hy := (congr_fun (hc.fac ((forget _).mapCocone s) j) y')
    dsimp at hx hy ‚ä¢
    rw [hx, hy, OrderEmbedding.le_iff_le]
    refine ‚ü®fun h ‚Ü¶ ‚ü®j, _, _, rfl, rfl, h‚ü©, fun ‚ü®k, x, y, hx', hy', h‚ü© ‚Ü¶ ?_‚ü©
    obtain ‚ü®l, f, g, hl‚ü© := (Types.FilteredColimit.isColimit_eq_iff _ hc).1 hx'
    obtain ‚ü®l', f', g', hl'‚ü© := (Types.FilteredColimit.isColimit_eq_iff _ hc).1 hy'
    obtain ‚ü®m, a, b, h‚ÇÅ, h‚ÇÇ‚ü© := bowtie f f' g g'
    dsimp at hl hl'
    rw [‚Üê (F.map (f ‚â´ a)).le_iff_le] at h
    rw [‚Üê (F.map (g ‚â´ a)).le_iff_le]
    exact le_of_eq_of_le (by simp [hl]) (le_of_le_of_eq h (by simp [h‚ÇÅ, h‚ÇÇ, hl']))

@[simp]
lemma CoconePt.fac_apply (s : Cocone F) (j : J) (x : F.obj j) :
    CoconePt.desc hc s (c.Œπ.app j x) = s.Œπ.app j x :=
  congr_fun (hc.fac ((forget _).mapCocone s) j) x

/-- A colimit cocone for `F : J ‚•§ PartOrdEmb` (with `J` filtered) can be
obtained from a colimit cocone for `F ‚ãô forget _`. -/
def isColimitCocone : IsColimit (cocone hc) where
  desc s := ofHom (CoconePt.desc hc s)
  uniq s m hm := by
    ext x
    obtain ‚ü®j, x, rfl‚ü© := Types.jointly_surjective_of_isColimit hc x
    exact ((ConcreteCategory.congr_hom (hm j)) x).trans (CoconePt.fac_apply hc s j x).symm

instance : HasColimit F where
  exists_colimit := ‚ü®_, isColimitCocone (colimit.isColimit (F ‚ãô forget _))‚ü©

instance : PreservesColimit F (forget _) :=
  preservesColimit_of_preserves_colimit_cocone
    (isColimitCocone (colimit.isColimit (F ‚ãô forget _)))
    (colimit.isColimit (F ‚ãô forget _))

instance : HasColimitsOfShape J PartOrdEmb.{u} where

instance : PreservesColimitsOfShape J (forget PartOrdEmb.{u}) where

instance : HasFilteredColimitsOfSize.{u, u} PartOrdEmb.{u} where
  HasColimitsOfShape _ := inferInstance

instance : PreservesFilteredColimitsOfSize.{u, u} (forget PartOrdEmb.{u}) where
  preserves_filtered_colimits _ := inferInstance

end Limits

end PartOrdEmb
