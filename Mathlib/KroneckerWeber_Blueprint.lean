import Mathlib

section maximalAbelian

variable {K L : Type*} [Field K] [Field L] [Algebra K L]


lemma galois_sup (F‚ÇÅ F‚ÇÇ : IntermediateField K L) [IsGalois K F‚ÇÅ] [Module.Finite K F‚ÇÅ]
    [IsGalois K F‚ÇÇ] [Module.Finite K F‚ÇÇ] :
    IsGalois K ‚Ü•(F‚ÇÅ ‚äî F‚ÇÇ) := by
  sorry

lemma abelian_sup (F‚ÇÅ F‚ÇÇ : IntermediateField K L)
    [IsGalois K F‚ÇÅ] [IsMulCommutative (F‚ÇÅ ‚âÉ‚Çê[K] F‚ÇÅ)] [Module.Finite K F‚ÇÅ]
    [IsGalois K F‚ÇÇ] [IsMulCommutative (F‚ÇÇ ‚âÉ‚Çê[K] F‚ÇÇ)] [Module.Finite K F‚ÇÇ] :
    IsMulCommutative (‚Ü•(F‚ÇÅ ‚äî F‚ÇÇ) ‚âÉ‚Çê[K] (‚Ü•(F‚ÇÅ ‚äî F‚ÇÇ))) := by
  sorry

variable (K L) in
def maximalAbelianSubfield : IntermediateField K L := sorry

instance maximalAbelianSubfield_isGalois : IsGalois K (maximalAbelianSubfield K L) := sorry

instance maximalAbelianSubfield_isAbelian :
    IsMulCommutative ((maximalAbelianSubfield K L) ‚âÉ‚Çê[K] (maximalAbelianSubfield K L)) := sorry

theorem maximalAbelianSubfield_isMaximal (F : IntermediateField K L) [IsGalois K F]
    [IsMulCommutative (F ‚âÉ‚Çê[K] F)] : F ‚â§ maximalAbelianSubfield K L := sorry

end maximalAbelian

open NumberField

variable {p : ‚Ñï} (hp : p.Prime)

lemma lemma_1_3 {K : Type*} [Field K] [NumberField K] (F‚ÇÅ F‚ÇÇ : IntermediateField ‚Ñö K)
  [IsGalois ‚Ñö F‚ÇÅ] [IsCyclic (F‚ÇÅ ‚âÉ‚Çê[‚Ñö] F‚ÇÅ)] (h‚ÇÅ : Module.finrank ‚Ñö F‚ÇÅ = p)
  [IsGalois ‚Ñö F‚ÇÇ] [IsCyclic (F‚ÇÇ ‚âÉ‚Çê[‚Ñö] F‚ÇÇ)] (h‚ÇÇ : Module.finrank ‚Ñö F‚ÇÇ = p) (h_top : F‚ÇÅ ‚äî F‚ÇÇ = ‚ä§)
  (h_cyc : IsCyclic (K ‚âÉ‚Çê[‚Ñö] K)) : F‚ÇÅ ‚â§ F‚ÇÇ ‚à® F‚ÇÇ ‚â§ F‚ÇÅ := sorry

lemma lemma_1_4 {m : ‚Ñï} {K : Type*} [Field K] [NumberField K] [IsGalois ‚Ñö K]
    [IsMulCommutative (K ‚âÉ‚Çê[‚Ñö] K)] (h‚ÇÅ : Module.finrank ‚Ñö K = p ^ m)
    (h‚ÇÇ : ‚àÄ (Q : Ideal (ùìû K)) (_ : Q.IsPrime), ¬¨ (p ‚à£ (Ideal.absNorm Q)) ‚Üí
      Algebra.IsUnramifiedAt ‚Ñ§ Q)
    (E : Type*) [Field E] [CharZero E] [IsCyclotomicExtension {p ^ (m + 1)} ‚Ñö E] :
    Nonempty (K ‚Üí+* E) := sorry
