/-
Copyright (c) 2025 Etienne Marion. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Etienne Marion
-/
import Mathlib.Analysis.InnerProductSpace.ProdL2
import Mathlib.MeasureTheory.Integral.Pi
import Mathlib.MeasureTheory.Measure.CharacteristicFunction
import Mathlib.Analysis.Norm.Lp.MeasurableSpace
import Mathlib.Probability.Independence.Basic
import Mathlib.Probability.ProductMeasure

open Complex MeasureTheory Measure ProbabilityTheory

open scoped ENNReal RealInnerProductSpace

variable {E F Œ© : Type*} [NormedAddCommGroup E] [NormedAddCommGroup F] [InnerProductSpace ‚Ñù E]
  [InnerProductSpace ‚Ñù F] {mE : MeasurableSpace E} {mF : MeasurableSpace F}
  [OpensMeasurableSpace E] [OpensMeasurableSpace F]
  {mŒ© : MeasurableSpace Œ©} {Œº : Measure Œ©} [IsProbabilityMeasure Œº] {X : Œ© ‚Üí E} {Y : Œ© ‚Üí F}
  (t : WithLp 2 (E √ó F))

lemma mdr (mX : AEMeasurable X Œº) (mY : AEMeasurable Y Œº) (h : IndepFun X Y Œº) :
    charFun (Œº.map fun œâ ‚Ü¶ (WithLp.equiv 2 _).symm (X œâ, Y œâ)) t =
    charFun (Œº.map X) (WithLp.equiv 2 (E √ó F) t).1 *
    charFun (Œº.map Y) (WithLp.equiv 2 (E √ó F) t).2 := by
  change charFun (Œº.map (_ ‚àò _)) t = _
  rw [‚Üê AEMeasurable.map_map_of_aemeasurable, (indepFun_iff_map_prod_eq_prod_map_map mX mY).1 h]
  ¬∑ simp_rw [charFun, WithLp.prod_inner_apply, ofReal_add, add_mul, exp_add]
    rw [integral_map]
    ¬∑ simp only [Equiv.apply_symm_apply, WithLp.equiv_fst, WithLp.equiv_snd]
      rw [‚Üê integral_prod_mul]
    ¬∑ fun_prop
    ¬∑ exact Measurable.aestronglyMeasurable <| by fun_prop
  all_goals fun_prop

lemma test (mX : AEMeasurable X Œº) (mY : AEMeasurable Y Œº) (h : IndepFun X Y Œº) :
    charFun (Œº.map fun œâ ‚Ü¶ (WithLp.equiv 2 _).symm (X œâ, Y œâ)) t =
    charFun (Œº.map X) (WithLp.equiv 2 (E √ó F) t).1 *
    charFun (Œº.map Y) (WithLp.equiv 2 (E √ó F) t).2 := by
  change charFun (Œº.map (_ ‚àò _)) t = _
  rw [‚Üê AEMeasurable.map_map_of_aemeasurable, (indepFun_iff_map_prod_eq_prod_map_map mX mY).1 h]
  ¬∑ simp_rw [charFun, WithLp.prod_inner_apply, ofReal_add, add_mul, exp_add]
    rw [integral_map]
    ¬∑ simp only [Equiv.apply_symm_apply, WithLp.equiv_fst, WithLp.equiv_snd]
      rw [‚Üê integral_prod_mul]
    ¬∑ fun_prop
    ¬∑ exact Measurable.aestronglyMeasurable <| by fun_prop
  all_goals fun_prop

lemma oops {Œº : Measure E} {ŒΩ : Measure F} [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    (t : WithLp 2 (E √ó F)) :
    charFun ((Œº.prod ŒΩ).map (WithLp.equiv 2 (E √ó F)).symm) t =
      charFun Œº ((WithLp.equiv 2 (E √ó F)) t).1 *
      charFun ŒΩ ((WithLp.equiv 2 (E √ó F)) t).2 := by
  simp_rw [charFun, WithLp.prod_inner_apply]
  rw [integral_map]
  ¬∑ simp only [Equiv.apply_symm_apply, WithLp.equiv_fst, WithLp.equiv_snd, ofReal_add, add_mul,
    exp_add, WithLp.equiv_symm_fst, WithLp.equiv_symm_snd]
    rw [‚Üê integral_prod_mul]
  ¬∑ fun_prop
  ¬∑ exact Measurable.aestronglyMeasurable <| by fun_prop

lemma merde {X Y : Type*} {mX : MeasurableSpace X} {mY : MeasurableSpace Y}
    {Œº : Measure X} {ŒΩ : Measure X} (f : X ‚âÉ·µê Y) :
    Œº = ŒΩ ‚Üî Œº.map f = ŒΩ.map f where
  mp h := by rw [h]
  mpr h := by
    rw [‚Üê map_id (Œº := Œº), ‚Üê map_id (Œº := ŒΩ), ‚Üê f.symm_comp_self, ‚Üê map_map, ‚Üê map_map, h]
    all_goals fun_prop

instance {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
    [SecondCountableTopology X] [SecondCountableTopology Y] (p : ‚Ñù‚â•0‚àû) :
    SecondCountableTopology (WithLp p (X √ó Y)) :=
  inferInstanceAs <| SecondCountableTopology (X √ó Y)

instance {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
    [MeasurableSpace X] [MeasurableSpace Y]
    [SecondCountableTopologyEither X Y] [BorelSpace X] [BorelSpace Y] (p : ‚Ñù‚â•0‚àû) :
    BorelSpace (WithLp p (X √ó Y)) :=
  inferInstanceAs <| BorelSpace (X √ó Y)

lemma omg [CompleteSpace E] [CompleteSpace F] [BorelSpace E] [BorelSpace F]
    [SecondCountableTopology E] [SecondCountableTopology F]
    (mX : AEMeasurable X Œº) (mY : AEMeasurable Y Œº) :
    IndepFun X Y Œº ‚Üî ‚àÄ t,
      charFun (Œº.map fun œâ ‚Ü¶ (WithLp.equiv 2 _).symm (X œâ, Y œâ)) t =
      charFun (Œº.map X) (WithLp.equiv 2 (E √ó F) t).1 *
      charFun (Œº.map Y) (WithLp.equiv 2 (E √ó F) t).2 where
  mp := fun h t ‚Ü¶ test t mX mY h
  mpr h := by
    rw [indepFun_iff_map_prod_eq_prod_map_map mX mY, merde (WithLp.measurableEquiv 2 (E √ó F))]
    apply Measure.ext_of_charFun
    ext t
    rw [WithLp.coe_measurableEquiv, AEMeasurable.map_map_of_aemeasurable]
    ¬∑ change charFun (Œº.map (fun œâ ‚Ü¶ (WithLp.equiv 2 (E √ó F)).symm (X œâ, Y œâ))) t = _
      rw [h, oops]
    all_goals fun_prop

variable {Œπ Œ© : Type*} [Fintype Œπ] {E : Œπ ‚Üí Type*} [‚àÄ i, NormedAddCommGroup (E i)]
  [‚àÄ i, InnerProductSpace ‚Ñù (E i)] {mE : ‚àÄ i, MeasurableSpace (E i)}
  [‚àÄ i, OpensMeasurableSpace (E i)]
  {mŒ© : MeasurableSpace Œ©} {Œº : Measure Œ©} [IsProbabilityMeasure Œº] {X : Œ† i, Œ© ‚Üí (E i)}
  (t : PiLp 2 E)

lemma testbis (mX : ‚àÄ i, AEMeasurable (X i) Œº) (h : iIndepFun X Œº) :
    charFun (Œº.map fun œâ ‚Ü¶ (WithLp.equiv 2 _).symm fun i ‚Ü¶ X i œâ) t =
    ‚àè i, charFun (Œº.map (X i)) (t i) := by
  change charFun (Œº.map (_ ‚àò _)) t = _
  rw [‚Üê AEMeasurable.map_map_of_aemeasurable, (iIndepFun_iff_map_fun_eq_pi_map mX).1 h]
  ¬∑ simp_rw [charFun, PiLp.inner_apply, ofReal_sum, Finset.sum_mul, exp_sum]
    rw [integral_map]
    ¬∑ simp only [WithLp.equiv_symm_pi_apply]
      rw [‚Üê integral_fintype_prod_eq_prod]
    ¬∑ fun_prop
    ¬∑ exact Measurable.aestronglyMeasurable <| by fun_prop
  all_goals fun_prop

lemma oopsbis {Œº : (i : Œπ) ‚Üí Measure (E i)} [‚àÄ i, IsFiniteMeasure (Œº i)]
    (t : PiLp 2 E) :
    charFun ((Measure.pi Œº).map (WithLp.equiv 2 _).symm) t =
    ‚àè i, charFun (Œº i) (t i) := by
  simp_rw [charFun, PiLp.inner_apply]
  rw [integral_map]
  ¬∑ simp only [WithLp.equiv_symm_pi_apply, ofReal_sum, Finset.sum_mul, exp_sum]
    rw [‚Üê integral_fintype_prod_eq_prod]
  ¬∑ fun_prop
  ¬∑ exact Measurable.aestronglyMeasurable <| by fun_prop

instance {Œπ : Type*} {X : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (X i)] {p : ‚Ñù‚â•0‚àû} :
    TopologicalSpace (PiLp p X) := inferInstanceAs <| TopologicalSpace (Œ† i, X i)

instance {Œπ : Type*} [Countable Œπ] {X : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (X i)]
    [‚àÄ i, SecondCountableTopology (X i)] (p : ‚Ñù‚â•0‚àû) :
    SecondCountableTopology (PiLp p X) :=
  inferInstanceAs <| SecondCountableTopology (Œ† i, X i)

instance {Œπ : Type*} [Countable Œπ] {X : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (X i)]
    [‚àÄ i, SecondCountableTopology (X i)] [‚àÄ i, MeasurableSpace (X i)]
    [‚àÄ i, BorelSpace (X i)] (p : ‚Ñù‚â•0‚àû) :
    BorelSpace (PiLp p X) :=
  inferInstanceAs <| BorelSpace (Œ† i, X i)

instance {Œπ : Type*} {X : Œπ ‚Üí Type*} [‚àÄ i, UniformSpace (X i)]
    [‚àÄ i, CompleteSpace (X i)] (p : ‚Ñù‚â•0‚àû) :
    CompleteSpace (PiLp p X) :=
  inferInstanceAs <| CompleteSpace (Œ† i, X i)

lemma omgbis [‚àÄ i, CompleteSpace (E i)] [‚àÄ i, BorelSpace (E i)]
    [‚àÄ i, SecondCountableTopology (E i)]
    (mX : ‚àÄ i, AEMeasurable (X i) Œº) :
    iIndepFun X Œº ‚Üî ‚àÄ t,
      charFun (Œº.map fun œâ ‚Ü¶ (WithLp.equiv 2 _).symm fun i ‚Ü¶ X i œâ) t =
      ‚àè i, charFun (Œº.map (X i)) (t i) where
  mp := fun h t ‚Ü¶ testbis t mX h
  mpr h := by
    rw [iIndepFun_iff_map_fun_eq_pi_map mX, merde (WithLp.measurableEquiv 2 (Œ† i, E i))]
    apply Measure.ext_of_charFun
    ext t
    rw [WithLp.coe_measurableEquiv, AEMeasurable.map_map_of_aemeasurable]
    ¬∑ change charFun (Œº.map (fun œâ ‚Ü¶ (WithLp.equiv 2 _).symm _)) t = _
      rw [h, oopsbis]
    all_goals fun_prop

variable {Œπ Œ© : Type*} {mŒ© : MeasurableSpace Œ©} {Œº : Measure Œ©} {ùí≥ : Œπ ‚Üí Type*}
    {mùí≥ : ‚àÄ i, MeasurableSpace (ùí≥ i)} (X : Œ† i, Œ© ‚Üí ùí≥ i)

lemma lol : iIndepFun X Œº ‚Üî ‚àÄ s : Finset Œπ, iIndepFun (s.restrict X) Œº where
  mp h s := by
    apply iIndepFun.precomp Subtype.val_injective h -- exact does not work
  mpr h := by
    rw [iIndepFun_iff]
    intro s f hs
    have : ‚ãÇ i ‚àà s, f i = ‚ãÇ i : s, f i := by ext; simp
    rw [‚Üê Finset.prod_coe_sort, this]
    refine (h s).meas_iInter fun i ‚Ü¶ hs i i.2

lemma iIndepFun.congr_iff (Y : Œ† i, Œ© ‚Üí ùí≥ i) (h : ‚àÄ i, X i =·µê[Œº] Y i) :
    iIndepFun X Œº ‚Üî iIndepFun Y Œº :=
  ‚ü®fun h' ‚Ü¶ h'.congr h, fun h' ‚Ü¶ h'.congr (fun i ‚Ü¶ (h i).symm)‚ü©

variable [IsProbabilityMeasure Œº]

lemma iIndepFun_iff_map_fun_eq_infinitePi_map (mX : ‚àÄ i, Measurable (X i)) :
    haveI _ i : IsProbabilityMeasure (Œº.map (X i)) := isProbabilityMeasure_map (mX i).aemeasurable
    iIndepFun X Œº ‚Üî Œº.map (fun œâ i ‚Ü¶ X i œâ) = (infinitePi (fun i ‚Ü¶ Œº.map (X i))) where
  mp h := by
    haveI _ i : IsProbabilityMeasure (Œº.map (X i)) := isProbabilityMeasure_map (mX i).aemeasurable
    apply eq_infinitePi
    intro s t ht
    rw [lol] at h
    have : s.toSet.pi t = s.restrict ‚Åª¬π' ((@Set.univ s ).pi fun i ‚Ü¶ t i) := by ext; simp
    rw [this, ‚Üê map_apply, map_map]
    ¬∑ have : s.restrict ‚àò (fun œâ i ‚Ü¶ X i œâ) = fun œâ i ‚Ü¶ s.restrict X i œâ := by ext; simp
      rw [this, (iIndepFun_iff_map_fun_eq_pi_map ?_).1 (h s), pi_pi]
      ¬∑ simp only [Finset.restrict]
        rw [s.prod_coe_sort fun i ‚Ü¶ Œº.map (X i) (t i)]
      exact fun i ‚Ü¶ (mX i).aemeasurable
    any_goals fun_prop
    refine MeasurableSet.univ_pi fun i ‚Ü¶ ht i i.2
  mpr h := by
    rw [lol]
    intro s
    rw [iIndepFun_iff_map_fun_eq_pi_map]
    ¬∑ have : s.restrict ‚àò (fun œâ i ‚Ü¶ X i œâ) = fun œâ i ‚Ü¶ s.restrict X i œâ := by ext; simp
      rw [‚Üê this, ‚Üê map_map, h, infinitePi_map_restrict]
      ¬∑ simp
      all_goals fun_prop
    exact fun i ‚Ü¶ (mX i).aemeasurable

lemma iIndepFun_iff_map_fun_eq_infinitePi_map‚ÇÄ [Countable Œπ] (mX : ‚àÄ i, AEMeasurable (X i) Œº) :
    haveI _ i := isProbabilityMeasure_map (mX i)
    iIndepFun X Œº ‚Üî Œº.map (fun œâ i ‚Ü¶ X i œâ) = (infinitePi (fun i ‚Ü¶ Œº.map (X i))) := by
  rw [iIndepFun.congr_iff _ _ (fun i ‚Ü¶ (mX i).ae_eq_mk), iIndepFun_iff_map_fun_eq_infinitePi_map]
  ¬∑ have : (fun œâ i ‚Ü¶ (mX i).mk (X i) œâ) =·µê[Œº] fun œâ i ‚Ü¶ X i œâ := by
      change ‚àÄ·µê œâ ‚àÇŒº, (fun i ‚Ü¶ (mX i).mk (X i) œâ) = fun i ‚Ü¶ X i œâ
      simp_rw [funext_iff]
      rw [MeasureTheory.ae_all_iff]
      exact fun i ‚Ü¶ (mX i).ae_eq_mk.symm
    rw [Measure.map_congr this]
    simp_rw [fun i ‚Ü¶ Measure.map_congr (mX i).ae_eq_mk.symm]
  exact fun i ‚Ü¶ (mX i).measurable_mk

/-- The characteristic function of a product measure is the product
of the characteristic functions. -/
lemma charFun_pi {Œπ : Type*} [Fintype Œπ] {E : Œπ ‚Üí Type*} {mE : ‚àÄ i, MeasurableSpace (E i)}
    [‚àÄ i, NormedAddCommGroup (E i)] [‚àÄ i, InnerProductSpace ‚Ñù (E i)] (Œº : (i : Œπ) ‚Üí Measure (E i))
    [‚àÄ i, IsProbabilityMeasure (Œº i)] (t : PiLp 2 E) :
    charFun ((Measure.pi Œº).map (WithLp.equiv 2 (Œ† i, E i)).symm) t = ‚àè i, charFun (Œº i) (t i) := by

  change charFun (Œº.map (_ ‚àò _)) t = _
  rw [‚Üê AEMeasurable.map_map_of_aemeasurable, (indepFun_iff_map_prod_eq_prod_map_map mX mY).1 h]
  ¬∑ simp_rw [charFun, WithLp.prod_inner_apply, ofReal_add, add_mul, exp_add]
    rw [integral_map]
    ¬∑ simp only [Equiv.apply_symm_apply, WithLp.equiv_fst, WithLp.equiv_snd]
      rw [‚Üê integral_prod_mul (fun x ‚Ü¶ exp (‚ü™x, t.1‚ü´ * I)) (fun x ‚Ü¶ exp (‚ü™x, t.2‚ü´ * I))]
    ¬∑ fun_prop
    ¬∑ exact Measurable.aestronglyMeasurable <| by fun_prop
  all_goals fun_prop

  simp_rw [charFun, PiLp.inner_apply, Complex.ofReal_sum, Finset.sum_mul, Complex.exp_sum, PiLp,
    WithLp, integral_fintype_prod_eq_prod (f := fun i x ‚Ü¶ Complex.exp (‚ü™x, t i‚ü´ * Complex.I))]
