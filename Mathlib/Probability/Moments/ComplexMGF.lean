/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.Analysis.Calculus.ParametricIntegral
import Mathlib.Analysis.Complex.CauchyIntegral
import Mathlib.MeasureTheory.Measure.CharacteristicFunction
import Mathlib.Probability.Moments.Basic
import Mathlib.Probability.Moments.IntegrableExpMul

/-!
# The complex-valued moment generating function

The moment generating function (mgf) is `t : ‚Ñù ‚Ü¶ Œº[fun œâ ‚Ü¶ rexp (t * X œâ)]`. It can be extended to
a complex function `z : ‚ÑÇ ‚Ü¶ Œº[fun œâ ‚Ü¶ cexp (z * X œâ)]`, which we call `complexMGF X Œº`.
That function is holomorphic on the vertical strip with base the interior of the interval
of definition of the mgf.
On the vertical line that goes through 0, `complexMGF X Œº` is equal to the characteristic function.
This allows us to link properties of the characteristic function and the mgf (mostly deducing
properties of the mgf from those of the characteristic function).

## Main definitions

* `complexMGF X Œº`: the function `z : ‚ÑÇ ‚Ü¶ Œº[fun œâ ‚Ü¶ cexp (z * X œâ)]`.

## Main results

* `complexMGF_ofReal`: for `x : ‚Ñù`, `complexMGF X Œº x = mgf X Œº x`.

* `hasDerivAt_complexMGF`: for all `z : ‚ÑÇ` such that the real part `z.re` belongs to the interior
  of the interval of definition of the mgf, `complexMGF X Œº` is differentiable at `z`
  with derivative `Œº[X * exp (z * X)]`.
* `differentiableOn_complexMGF`: `complexMGF X Œº` is holomorphic on the vertical strip
  `{z | z.re ‚àà interior (integrableExpSet X Œº)}`.
* `analyticOn_complexMGF`: `complexMGF X Œº` is analytic on the vertical strip
  `{z | z.re ‚àà interior (integrableExpSet X Œº)}`.

* `eqOn_complexMGF_of_mgf`: if two random variables have the same moment generating function,
  then they have the same `complexMGF` on the vertical strip
  `{z | z.re ‚àà interior (integrableExpSet X Œº)}`.
  Once we know that equal `mgf` implies equal distributions, we will be able to show that
  the `complexMGF` are equal everywhere, not only on the strip.
  This lemma will be used in the proof of the equality of distributions.

* `ext_of_complexMGF_eq`: If the complex moment generating functions of two random variables `X`
  and `Y` with respect to the finite measures `Œº`, `Œº'`, respectively, coincide, then
  `Œº.map X = Œº'.map Y`. In other words, complex moment generating functions separate the
  distributions of random variables.

## TODO

* Prove that if two random variables have the same `mgf`, then the have the same `complexMGF`.

-/


open MeasureTheory Filter Finset Real Complex

open scoped MeasureTheory ProbabilityTheory ENNReal NNReal Topology

namespace ProbabilityTheory

variable {Œ© Œπ : Type*} {m : MeasurableSpace Œ©} {X : Œ© ‚Üí ‚Ñù} {Œº : Measure Œ©} {t u v : ‚Ñù} {z Œµ : ‚ÑÇ}

/-- Complex extension of the moment generating function. -/
noncomputable
def complexMGF (X : Œ© ‚Üí ‚Ñù) (Œº : Measure Œ©) (z : ‚ÑÇ) : ‚ÑÇ := Œº[fun œâ ‚Ü¶ cexp (z * X œâ)]

lemma complexMGF_undef (hX : AEMeasurable X Œº) (h : ¬¨ Integrable (fun œâ ‚Ü¶ rexp (z.re * X œâ)) Œº) :
    complexMGF X Œº z = 0 := by
  rw [complexMGF, integral_undef]
  rw [‚Üê integrable_norm_iff (by fun_prop)]
  simpa [Complex.norm_exp] using h

lemma complexMGF_id_map (hX : AEMeasurable X Œº) : complexMGF id (Œº.map X) = complexMGF X Œº := by
  ext t
  rw [complexMGF, integral_map hX]
  ¬∑ rfl
  ¬∑ fun_prop

lemma complexMGF_congr_identDistrib {Œ©' : Type*} {mŒ©' : MeasurableSpace Œ©'} {Œº' : Measure Œ©'}
    {Y : Œ©' ‚Üí ‚Ñù}  (h : IdentDistrib X Y Œº Œº') :
    complexMGF X Œº = complexMGF Y Œº' := by
  rw [‚Üê complexMGF_id_map h.aemeasurable_fst, ‚Üê complexMGF_id_map h.aemeasurable_snd, h.map_eq]

lemma norm_complexMGF_le_mgf : ‚ÄñcomplexMGF X Œº z‚Äñ ‚â§ mgf X Œº z.re := by
  rw [complexMGF, ‚Üê re_add_im z]
  simp_rw [add_mul, Complex.exp_add, re_add_im]
  calc ‚Äñ‚à´ œâ, cexp (z.re * X œâ) * cexp (z.im * I * X œâ) ‚àÇŒº‚Äñ
  _ ‚â§ ‚à´ œâ, ‚Äñcexp (z.re * X œâ) * cexp (z.im * I * X œâ)‚Äñ ‚àÇŒº := norm_integral_le_integral_norm _
  _ = ‚à´ œâ, rexp (z.re * X œâ) ‚àÇŒº := by simp [Complex.norm_exp]

@[deprecated (since := "2025-02-17")] alias abs_complexMGF_le_mgf := norm_complexMGF_le_mgf

lemma complexMGF_ofReal (x : ‚Ñù) : complexMGF X Œº x = mgf X Œº x := by
  rw [complexMGF, mgf, ‚Üê integral_complex_ofReal]
  norm_cast

lemma re_complexMGF_ofReal (x : ‚Ñù) : (complexMGF X Œº x).re = mgf X Œº x := by
  simp [complexMGF_ofReal]

lemma re_complexMGF_ofReal' : (fun x : ‚Ñù ‚Ü¶ (complexMGF X Œº x).re) = mgf X Œº := by
  ext x
  exact re_complexMGF_ofReal x

lemma complexMGF_id_mul_I {Œº : Measure ‚Ñù} (t : ‚Ñù) :
    complexMGF id Œº (t * I) = charFun Œº t := by
  simp only [complexMGF, id_eq, charFun, RCLike.inner_apply, conj_trivial, ofReal_mul]
  congr with x
  ring_nf

lemma complexMGF_mul_I (hX : AEMeasurable X Œº) (t : ‚Ñù) :
    complexMGF X Œº (t * I) = charFun (Œº.map X) t := by
  rw [‚Üê complexMGF_id_map hX, complexMGF_id_mul_I]

section Analytic

/-- For `z : ‚ÑÇ` with `z.re ‚àà interior (integrableExpSet X Œº)`, the derivative of the function
`z' ‚Ü¶ Œº[X ^ n * cexp (z' * X)]` at `z` is `Œº[X ^ (n + 1) * cexp (z * X)]`. -/
lemma hasDerivAt_integral_pow_mul_exp (hz : z.re ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :
    HasDerivAt (fun z ‚Ü¶ Œº[fun œâ ‚Ü¶ X œâ ^ n * cexp (z * X œâ)])
        Œº[fun œâ ‚Ü¶ X œâ ^ (n + 1) * cexp (z * X œâ)] z := by
  have hX : AEMeasurable X Œº := aemeasurable_of_mem_interior_integrableExpSet hz
  have hz' := hz
  rw [mem_interior_iff_mem_nhds, mem_nhds_iff_exists_Ioo_subset] at hz'
  obtain ‚ü®l, u, hlu, h_subset‚ü© := hz'
  let t := ((z.re - l) ‚äì (u - z.re)) / 2
  have h_pos : 0 < (z.re - l) ‚äì (u - z.re) := by simp [hlu.1, hlu.2]
  have ht : 0 < t := half_pos h_pos
  refine (hasDerivAt_integral_of_dominated_loc_of_deriv_le
    (bound := fun œâ ‚Ü¶ |X œâ| ^ (n + 1) * rexp (z.re * X œâ + t/2 * |X œâ|))
    (F := fun z œâ ‚Ü¶ X œâ ^ n * cexp (z * X œâ))
    (F' := fun z œâ ‚Ü¶ X œâ ^ (n + 1) * cexp (z * X œâ)) (half_pos ht) ?_ ?_ ?_ ?_ ?_ ?_).2
  ¬∑ exact .of_forall fun z ‚Ü¶ by fun_prop
  ¬∑ exact integrable_pow_mul_cexp_of_re_mem_interior_integrableExpSet hz n
  ¬∑ fun_prop
  ¬∑ refine ae_of_all _ fun œâ Œµ hŒµ ‚Ü¶ ?_
    simp only [norm_mul, norm_pow, norm_real, Real.norm_eq_abs]
    rw [Complex.norm_exp]
    simp only [mul_re, ofReal_re, ofReal_im, mul_zero, sub_zero]
    gcongr
    have : Œµ = z + (Œµ - z) := by simp
    rw [this, add_re, add_mul]
    gcongr _ + ?_
    refine (le_abs_self _).trans ?_
    rw [abs_mul]
    gcongr
    refine (abs_re_le_norm _).trans ?_
    simp only [Metric.mem_ball, dist_eq_norm] at hŒµ
    exact hŒµ.le
  ¬∑ refine integrable_pow_abs_mul_exp_add_of_integrable_exp_mul ?_ ?_ ?_ ?_ (t := t) (n + 1)
    ¬∑ exact h_subset (add_half_inf_sub_mem_Ioo hlu)
    ¬∑ exact h_subset (sub_half_inf_sub_mem_Ioo hlu)
    ¬∑ positivity
    ¬∑ exact lt_of_lt_of_le (by simp [ht]) (le_abs_self _)
  ¬∑ refine ae_of_all _ fun œâ Œµ hŒµ ‚Ü¶ ?_
    simp only
    simp_rw [pow_succ, mul_assoc]
    refine HasDerivAt.const_mul _ ?_
    simp_rw [‚Üê smul_eq_mul, Complex.exp_eq_exp_‚ÑÇ]
    convert hasDerivAt_exp_smul_const (X œâ : ‚ÑÇ) Œµ using 1
    rw [smul_eq_mul, mul_comm]

/-- For all `z : ‚ÑÇ` with `z.re ‚àà interior (integrableExpSet X Œº)`,
`complexMGF X Œº` is differentiable at `z` with derivative `Œº[X * exp (z * X)]`. -/
theorem hasDerivAt_complexMGF (hz : z.re ‚àà interior (integrableExpSet X Œº)) :
    HasDerivAt (complexMGF X Œº) Œº[fun œâ ‚Ü¶ X œâ * cexp (z * X œâ)] z := by
  convert hasDerivAt_integral_pow_mul_exp hz 0
  ¬∑ simp [complexMGF]
  ¬∑ simp

/-- `complexMGF X Œº` is holomorphic on the vertical strip
`{z | z.re ‚àà interior (integrableExpSet X Œº)}`. -/
theorem differentiableOn_complexMGF :
    DifferentiableOn ‚ÑÇ (complexMGF X Œº) {z | z.re ‚àà interior (integrableExpSet X Œº)} := by
  intro z hz
  have h := hasDerivAt_complexMGF hz
  rw [hasDerivAt_iff_hasFDerivAt] at h
  exact h.hasFDerivWithinAt.differentiableWithinAt

theorem analyticOnNhd_complexMGF :
    AnalyticOnNhd ‚ÑÇ (complexMGF X Œº) {z | z.re ‚àà interior (integrableExpSet X Œº)} :=
  differentiableOn_complexMGF.analyticOnNhd (isOpen_interior.preimage Complex.continuous_re)

/-- `complexMGF X Œº` is analytic on the vertical strip
  `{z | z.re ‚àà interior (integrableExpSet X Œº)}`. -/
theorem analyticOn_complexMGF :
    AnalyticOn ‚ÑÇ (complexMGF X Œº) {z | z.re ‚àà interior (integrableExpSet X Œº)} :=
  analyticOnNhd_complexMGF.analyticOn

/-- `complexMGF X Œº` is analytic at any point `z` with `z.re ‚àà interior (integrableExpSet X Œº)`. -/
lemma analyticAt_complexMGF (hz : z.re ‚àà interior (integrableExpSet X Œº)) :
    AnalyticAt ‚ÑÇ (complexMGF X Œº) z :=
  analyticOnNhd_complexMGF z hz

end Analytic

section Deriv

/-! ### Iterated derivatives of `complexMGF` -/

lemma hasDerivAt_iteratedDeriv_complexMGF (hz : z.re ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :
    HasDerivAt (iteratedDeriv n (complexMGF X Œº)) Œº[fun œâ ‚Ü¶ X œâ ^ (n + 1) * cexp (z * X œâ)] z := by
  induction n generalizing z with
  | zero => simp [hasDerivAt_complexMGF hz]
  | succ n hn =>
    rw [iteratedDeriv_succ]
    have : deriv (iteratedDeriv n (complexMGF X Œº))
        =·∂†[ùìù z] fun z ‚Ü¶ Œº[fun œâ ‚Ü¶ X œâ ^ (n + 1) * cexp (z * X œâ)] := by
      have h_mem : ‚àÄ·∂† y in ùìù z, y.re ‚àà interior (integrableExpSet X Œº) := by
        refine IsOpen.eventually_mem ?_ hz
        exact isOpen_interior.preimage Complex.continuous_re
      filter_upwards [h_mem] with y hy using HasDerivAt.deriv (hn hy)
    rw [EventuallyEq.hasDerivAt_iff this]
    exact hasDerivAt_integral_pow_mul_exp hz (n + 1)

/-- For `z : ‚ÑÇ` with `z.re ‚àà interior (integrableExpSet X Œº)`, the n-th derivative of the function
`complexMGF X Œº` at `z` is `Œº[X ^ n * cexp (z * X)]`. -/
lemma iteratedDeriv_complexMGF (hz : z.re ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :
    iteratedDeriv n (complexMGF X Œº) z = Œº[fun œâ ‚Ü¶ X œâ ^ n * cexp (z * X œâ)] := by
  induction n generalizing z with
  | zero => simp [complexMGF]
  | succ n hn =>
    rw [iteratedDeriv_succ]
    exact (hasDerivAt_iteratedDeriv_complexMGF hz n).deriv

end Deriv

section EqOfMGF

/-! We prove that if two random variables have the same `mgf`, then
they also have the same `complexMGF`. -/

variable {Œ©' : Type*} {mŒ©' : MeasurableSpace Œ©'} {Y : Œ©' ‚Üí ‚Ñù} {Œº' : Measure Œ©'}

/-- If two random variables have the same moment generating function then they have
the same `integrableExpSet`. -/
lemma integrableExpSet_eq_of_mgf' (hXY : mgf X Œº = mgf Y Œº') (hŒºŒº' : Œº = 0 ‚Üî Œº' = 0) :
    integrableExpSet X Œº = integrableExpSet Y Œº' := by
  ext t
  simp only [integrableExpSet, Set.mem_setOf_eq]
  by_cases hŒº : Œº = 0
  ¬∑ simp [hŒº, hŒºŒº'.mp hŒº]
  have : NeZero Œº := ‚ü®hŒº‚ü©
  have : NeZero Œº' := ‚ü®(not_iff_not.mpr hŒºŒº').mp hŒº‚ü©
  rw [‚Üê mgf_pos_iff, ‚Üê mgf_pos_iff, hXY]

/-- If two random variables have the same moment generating function then they have
the same `integrableExpSet`. -/
lemma integrableExpSet_eq_of_mgf [IsProbabilityMeasure Œº]
    (hXY : mgf X Œº = mgf Y Œº') :
    integrableExpSet X Œº = integrableExpSet Y Œº' := by
  refine integrableExpSet_eq_of_mgf' hXY ?_
  simp only [IsProbabilityMeasure.ne_zero, false_iff]
  suffices mgf Y Œº' 0 ‚â† 0 by
    intro h_contra
    simp [h_contra] at this
  rw [‚Üê hXY]
  exact (mgf_pos (by simp)).ne'

/-- If two random variables have the same moment generating function then they have
the same `complexMGF` on the vertical strip `{z | z.re ‚àà interior (integrableExpSet X Œº)}`.

TODO: once we know that equal `mgf` implies equal distributions, we will be able to show that
the `complexMGF` are equal everywhere, not only on the strip.
This lemma will be used in the proof of the equality of distributions. -/
lemma eqOn_complexMGF_of_mgf' (hXY : mgf X Œº = mgf Y Œº') (hŒºŒº' : Œº = 0 ‚Üî Œº' = 0) :
    Set.EqOn (complexMGF X Œº) (complexMGF Y Œº') {z | z.re ‚àà interior (integrableExpSet X Œº)} := by
  by_cases h_empty : interior (integrableExpSet X Œº) = ‚àÖ
  ¬∑ simp [h_empty]
  rw [‚Üê ne_eq, ‚Üê Set.nonempty_iff_ne_empty] at h_empty
  obtain ‚ü®t, ht‚ü© := h_empty
  have hX : AnalyticOnNhd ‚ÑÇ (complexMGF X Œº) {z | z.re ‚àà interior (integrableExpSet X Œº)} :=
    analyticOnNhd_complexMGF
  have hY : AnalyticOnNhd ‚ÑÇ (complexMGF Y Œº') {z | z.re ‚àà interior (integrableExpSet Y Œº')} :=
    analyticOnNhd_complexMGF
  rw [integrableExpSet_eq_of_mgf' hXY hŒºŒº'] at hX ht ‚ä¢
  refine AnalyticOnNhd.eqOn_of_preconnected_of_frequently_eq hX hY
    (convex_integrableExpSet.interior.linear_preimage reLm).isPreconnected
    (z‚ÇÄ := (t : ‚ÑÇ)) (by simp [ht]) ?_
  have h_real : ‚àÉ·∂† (x : ‚Ñù) in ùìù[‚â†] t, complexMGF X Œº x = complexMGF Y Œº' x := by
    refine .of_forall fun y ‚Ü¶ ?_
    rw [complexMGF_ofReal, complexMGF_ofReal, hXY]
  rw [frequently_iff_seq_forall] at h_real ‚ä¢
  obtain ‚ü®xs, hx_tendsto, hx_eq‚ü© := h_real
  refine ‚ü®fun n ‚Ü¶ xs n, ?_, fun n ‚Ü¶ ?_‚ü©
  ¬∑ rw [tendsto_nhdsWithin_iff] at hx_tendsto ‚ä¢
    constructor
    ¬∑ rw [tendsto_ofReal_iff]
      exact hx_tendsto.1
    ¬∑ simpa using hx_tendsto.2
  ¬∑ simp [hx_eq]

/-- If two random variables have the same moment generating function then they have
the same `complexMGF` on the vertical strip `{z | z.re ‚àà interior (integrableExpSet X Œº)}`. -/
lemma eqOn_complexMGF_of_mgf [IsProbabilityMeasure Œº]
    (hXY : mgf X Œº = mgf Y Œº') :
    Set.EqOn (complexMGF X Œº) (complexMGF Y Œº') {z | z.re ‚àà interior (integrableExpSet X Œº)} := by
  refine eqOn_complexMGF_of_mgf' hXY ?_
  simp only [IsProbabilityMeasure.ne_zero, false_iff]
  suffices mgf Y Œº' 0 ‚â† 0 by
    intro h_contra
    simp [h_contra] at this
  rw [‚Üê hXY]
  exact (mgf_pos (by simp)).ne'

end EqOfMGF

section ext

variable {Œ©' : Type*} {mŒ©' : MeasurableSpace Œ©'} {Y : Œ©' ‚Üí ‚Ñù} {Œº' : Measure Œ©'}

/-- If the complex moment generating functions of two random variables `X` and `Y` with respect to
the finite measures `Œº`, `Œº'`, respectively, coincide, then `Œº.map X = Œº'.map Y`. In other words,
complex moment generating functions separate the distributions of random variables. -/
theorem _root_.MeasureTheory.Measure.ext_of_complexMGF_eq [IsFiniteMeasure Œº]
    [IsFiniteMeasure Œº'] (hX : AEMeasurable X Œº) (hY : AEMeasurable Y Œº')
    (h : complexMGF X Œº = complexMGF Y Œº') :
    Œº.map X = Œº'.map Y := by
  have inner_ne_zero (x : ‚Ñù) (h : x ‚â† 0) : bilinFormOfRealInner x ‚â† 0 :=
    DFunLike.ne_iff.mpr ‚ü®x, inner_self_ne_zero.mpr h‚ü©
  apply MeasureTheory.ext_of_integral_char_eq continuous_probChar probChar_ne_one inner_ne_zero
    continuous_inner (fun w ‚Ü¶ ?_)
  rw [funext_iff] at h
  specialize h (Multiplicative.toAdd w * I)
  simp_rw [complexMGF, mul_assoc, mul_comm I, ‚Üê mul_assoc] at h
  simp only [BoundedContinuousFunction.char_apply, bilinFormOfRealInner_apply_apply,
    RCLike.inner_apply, conj_trivial, probChar_apply, ofReal_mul]
  rwa [integral_map hX (by fun_prop), integral_map hY (by fun_prop)]

lemma _root_.MeasureTheory.Measure.ext_of_complexMGF_id_eq
    {Œº Œº' : Measure ‚Ñù} [IsFiniteMeasure Œº] [IsFiniteMeasure Œº']
    (h : complexMGF id Œº = complexMGF id Œº') :
    Œº = Œº' := by
  simpa using Measure.ext_of_complexMGF_eq aemeasurable_id aemeasurable_id h

end ext

end ProbabilityTheory
