/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.Probability.Moments.ComplexMGF

/-!
# The moment generating function is analytic

The moment generating function `mgf X Œº` of a random variable `X` with respect to a measure `Œº`
is analytic on the interior of `integrableExpSet X Œº`, the interval on which it is defined.

## Main results

* `analyticOnNhd_mgf`: the moment generating function is analytic on the interior of the interval
  on which it is defined.
* `iteratedDeriv_mgf`: the nth derivative of the mgf at `t` is `Œº[X ^ n * exp (t * X)]`.

-/


open MeasureTheory Filter Finset Real

open scoped MeasureTheory ProbabilityTheory ENNReal NNReal Topology

-- todo: move. It needs those imports:
-- import Mathlib.Analysis.Analytic.Constructions
-- import Mathlib.Analysis.Complex.Basic
lemma AnalyticAt.re_ofReal {f : ‚ÑÇ ‚Üí ‚ÑÇ} {x : ‚Ñù} (hf : AnalyticAt ‚ÑÇ f x) :
    AnalyticAt ‚Ñù (fun x : ‚Ñù ‚Ü¶ (f x).re) x :=
  (Complex.reCLM.analyticAt _).comp (hf.restrictScalars.comp (Complex.ofRealCLM.analyticAt _))

namespace ProbabilityTheory

variable {Œ© Œπ : Type*} {m : MeasurableSpace Œ©} {X : Œ© ‚Üí ‚Ñù} {Œº : Measure Œ©} {t u v : ‚Ñù}

section Deriv

/-- For `t ‚àà interior (integrableExpSet X Œº)`, the derivative of `mgf X Œº` at `t` is
`Œº[X * exp (t * X)]`. -/
lemma hasDerivAt_mgf (h : t ‚àà interior (integrableExpSet X Œº)) :
    HasDerivAt (mgf X Œº) (Œº[fun œâ ‚Ü¶ X œâ * exp (t * X œâ)]) t := by
  convert hasDerivAt_integral_pow_mul_exp_real h 0
  ¬∑ simp [mgf]
  ¬∑ simp

lemma hasDerivAt_iteratedDeriv_mgf (ht : t ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :
    HasDerivAt (iteratedDeriv n (mgf X Œº)) Œº[fun œâ ‚Ü¶ X œâ ^ (n + 1) * exp (t * X œâ)] t := by
  induction n generalizing t with
  | zero => simp [hasDerivAt_mgf ht]
  | succ n hn =>
    rw [iteratedDeriv_succ]
    have : deriv (iteratedDeriv n (mgf X Œº))
        =·∂†[ùìù t] fun t ‚Ü¶ Œº[fun œâ ‚Ü¶ X œâ ^ (n + 1) * exp (t * X œâ)] := by
      have h_mem : ‚àÄ·∂† y in ùìù t, y ‚àà interior (integrableExpSet X Œº) :=
        isOpen_interior.eventually_mem ht
      filter_upwards [h_mem] with y hy using HasDerivAt.deriv (hn hy)
    rw [EventuallyEq.hasDerivAt_iff this]
    exact hasDerivAt_integral_pow_mul_exp_real ht (n + 1)

/-- For `t ‚àà interior (integrableExpSet X Œº)`, the n-th derivative of `mgf X Œº` at `t` is
`Œº[X ^ n * exp (t * X)]`. -/
lemma iteratedDeriv_mgf (ht : t ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :
    iteratedDeriv n (mgf X Œº) t = Œº[fun œâ ‚Ü¶ X œâ ^ n * exp (t * X œâ)] := by
  induction n generalizing t with
  | zero => simp [mgf]
  | succ n hn =>
    rw [iteratedDeriv_succ]
    exact (hasDerivAt_iteratedDeriv_mgf ht n).deriv

/-- The derivatives of the moment generating function at zero are the moments. -/
lemma iteratedDeriv_mgf_zero (h : 0 ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :
    iteratedDeriv n (mgf X Œº) 0 = Œº[X ^ n] := by
  simp [iteratedDeriv_mgf h n]

/-- For `t ‚àà interior (integrableExpSet X Œº)`, the derivative of `mgf X Œº` at `t` is
`Œº[X * exp (t * X)]`. -/
lemma deriv_mgf (h : t ‚àà interior (integrableExpSet X Œº)) :
    deriv (mgf X Œº) t = Œº[fun œâ ‚Ü¶ X œâ * exp (t * X œâ)] :=
  (hasDerivAt_mgf h).deriv

lemma deriv_mgf_zero (h : 0 ‚àà interior (integrableExpSet X Œº)) : deriv (mgf X Œº) 0 = Œº[X] := by
  simp [deriv_mgf h]

end Deriv

section Analytic

/-- The moment generating function is analytic at every `t ‚àà interior (integrableExpSet X Œº)`. -/
lemma analyticAt_mgf (ht : t ‚àà interior (integrableExpSet X Œº)) :
    AnalyticAt ‚Ñù (mgf X Œº) t := by
  rw [‚Üê re_complexMGF_ofReal']
  exact (analyticAt_complexMGF (by simp [ht])).re_ofReal

/-- The moment generating function is analytic on the interior of the interval on which it is
defined. -/
lemma analyticOnNhd_mgf : AnalyticOnNhd ‚Ñù (mgf X Œº) (interior (integrableExpSet X Œº)) :=
  fun _ hx ‚Ü¶ analyticAt_mgf hx

lemma hasFPowerSeriesAt_mgf (hv : v ‚àà interior (integrableExpSet X Œº)) :
    HasFPowerSeriesAt (mgf X Œº)
      (FormalMultilinearSeries.ofScalars ‚Ñù
        (fun n ‚Ü¶ (Œº[fun œâ ‚Ü¶ X œâ ^ n * exp (v * X œâ)] : ‚Ñù) / n.factorial)) v := by
  convert (analyticAt_mgf hv).hasFPowerSeriesAt
  rw [iteratedDeriv_mgf hv]

end Analytic

end ProbabilityTheory
