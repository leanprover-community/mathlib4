/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, Etienne Marion
-/
import Mathlib.Probability.Moments.Variance

/-!
# Covariance

We define the covariance of two real-valued random variables.

## Main definitions

* `covariance`: covariance of two real-valued random variables, with notation `cov[X, Y; Œº]`.
  `cov[X, Y; Œº] = ‚à´ œâ, (X œâ - Œº[X]) * (Y œâ - Œº[Y]) ‚àÇŒº`.

## Main statements

* `covariance_self`: `cov[X, X; Œº] = Var[X; Œº]`

## Notation

* `cov[X, Y; Œº] = covariance X Y Œº`
* `cov[X, Y] = covariance X Y volume`

-/

open MeasureTheory

namespace ProbabilityTheory

variable {Œ© : Type*} {mŒ© : MeasurableSpace Œ©} {X Y Z : Œ© ‚Üí ‚Ñù} {Œº : Measure Œ©}

/-- The covariance of two real-valued random variables defined as
the integral of `(X - ùîº[X])(Y - ùîº[Y])`. -/
noncomputable def covariance (X Y : Œ© ‚Üí ‚Ñù) (Œº : Measure Œ©) : ‚Ñù :=
  ‚à´ œâ, (X œâ - Œº[X]) * (Y œâ - Œº[Y]) ‚àÇŒº

@[inherit_doc]
scoped notation "cov[" X ", " Y "; " Œº "]" => ProbabilityTheory.covariance X Y Œº

/-- The covariance of the real-valued random variables `X` and `Y`
according to the volume measure. -/
scoped notation "cov[" X ", " Y "]" => cov[X, Y; MeasureTheory.MeasureSpace.volume]

lemma covariance_self {X : Œ© ‚Üí ‚Ñù} (hX : AEMeasurable X Œº) :
    cov[X, X; Œº] = Var[X; Œº] := by
  rw [covariance, variance_eq_integral hX]
  congr with x
  ring

@[deprecated (since := "2025-06-25")] alias covariance_same := covariance_self

@[simp] lemma covariance_zero_left : cov[0, Y; Œº] = 0 := by simp [covariance]

@[simp] lemma covariance_zero_right : cov[X, 0; Œº] = 0 := by simp [covariance]

@[simp] lemma covariance_zero_measure : cov[X, Y; (0 : Measure Œ©)] = 0 := by simp [covariance]

variable (X Y) in
lemma covariance_comm : cov[X, Y; Œº] = cov[Y, X; Œº] := by
  simp_rw [covariance]
  congr with x
  ring

@[simp]
lemma covariance_const_left [IsProbabilityMeasure Œº] (c : ‚Ñù) : cov[fun _ ‚Ü¶ c, Y; Œº] = 0 := by
  simp [covariance]

@[simp]
lemma covariance_const_right [IsProbabilityMeasure Œº] (c : ‚Ñù) : cov[X, fun _ ‚Ü¶ c; Œº] = 0 := by
  simp [covariance]

@[simp]
lemma covariance_add_const_left [IsProbabilityMeasure Œº] (hX : Integrable X Œº) (c : ‚Ñù) :
    cov[fun œâ ‚Ü¶ X œâ + c, Y; Œº] = cov[X, Y; Œº] := by
  simp_rw [covariance]
  congr with œâ
  rw [integral_add hX (by fun_prop)]
  simp

@[simp]
lemma covariance_const_add_left [IsProbabilityMeasure Œº] (hX : Integrable X Œº) (c : ‚Ñù) :
    cov[fun œâ ‚Ü¶ c + X œâ, Y; Œº] = cov[X, Y; Œº] := by
  simp_rw [add_comm c]
  exact covariance_add_const_left hX c

@[simp]
lemma covariance_add_const_right [IsProbabilityMeasure Œº] (hY : Integrable Y Œº) (c : ‚Ñù) :
    cov[X, fun œâ ‚Ü¶ Y œâ + c; Œº] = cov[X, Y; Œº] := by
  rw [covariance_comm, covariance_add_const_left hY c, covariance_comm]

@[simp]
lemma covariance_const_add_right [IsProbabilityMeasure Œº] (hY : Integrable Y Œº) (c : ‚Ñù) :
    cov[X, fun œâ ‚Ü¶ c + Y œâ; Œº] = cov[X, Y; Œº] := by
  simp_rw [add_comm c]
  exact covariance_add_const_right hY c

lemma covariance_add_left [IsFiniteMeasure Œº]
    (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) (hZ : MemLp Z 2 Œº) :
    cov[X + Y, Z; Œº] = cov[X, Z; Œº] + cov[Y, Z; Œº] := by
  simp_rw [covariance, Pi.add_apply]
  rw [‚Üê integral_add]
  ¬∑ congr with x
    rw [integral_add (hX.integrable (by simp)) (hY.integrable (by simp))]
    ring
  ¬∑ exact (hX.sub (memLp_const _)).integrable_mul (hZ.sub (memLp_const _))
  ¬∑ exact (hY.sub (memLp_const _)).integrable_mul (hZ.sub (memLp_const _))

lemma covariance_add_right [IsFiniteMeasure Œº]
    (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) (hZ : MemLp Z 2 Œº) :
    cov[X, Y + Z; Œº] = cov[X, Y; Œº] + cov[X, Z; Œº] := by
  rw [covariance_comm, covariance_add_left hY hZ hX, covariance_comm X, covariance_comm Z]

lemma covariance_smul_left (c : ‚Ñù) : cov[c ‚Ä¢ X, Y; Œº] = c * cov[X, Y; Œº] := by
  simp_rw [covariance, Pi.smul_apply, smul_eq_mul, ‚Üê integral_const_mul, ‚Üê mul_assoc, mul_sub,
    integral_const_mul]

lemma covariance_smul_right (c : ‚Ñù) : cov[X, c ‚Ä¢ Y; Œº] = c * cov[X, Y; Œº] := by
  rw [covariance_comm, covariance_smul_left, covariance_comm]

lemma covariance_mul_left (c : ‚Ñù) :
  cov[fun œâ ‚Ü¶ c * X œâ, Y; Œº] = c * cov[X, Y; Œº] := covariance_smul_left c

lemma covariance_mul_right (c : ‚Ñù) :
  cov[X, fun œâ ‚Ü¶ c * Y œâ; Œº] = c * cov[X, Y; Œº] := covariance_smul_right c

@[simp]
lemma covariance_neg_left : cov[-X, Y; Œº] = -cov[X, Y; Œº] := by
  calc cov[-X, Y; Œº]
  _ = cov[(-1 : ‚Ñù) ‚Ä¢ X, Y; Œº] := by simp
  _ = - cov[X, Y; Œº] := by rw [covariance_smul_left]; simp

@[simp]
lemma covariance_fun_neg_left : cov[fun œâ ‚Ü¶ - X œâ, Y; Œº] = -cov[X, Y; Œº] :=
  covariance_neg_left

@[simp]
lemma covariance_neg_right : cov[X, -Y; Œº] = -cov[X, Y; Œº] := by
  calc cov[X, -Y; Œº]
  _ = cov[X, (-1 : ‚Ñù) ‚Ä¢ Y; Œº] := by simp
  _ = - cov[X, Y; Œº] := by rw [covariance_smul_right]; simp

@[simp]
lemma covariance_fun_neg_right : cov[X, fun œâ ‚Ü¶ - Y œâ; Œº] = -cov[X, Y; Œº] :=
  covariance_neg_right

lemma covariance_sub_left [IsFiniteMeasure Œº]
    (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) (hZ : MemLp Z 2 Œº) :
    cov[X - Y, Z; Œº] = cov[X, Z; Œº] - cov[Y, Z; Œº] := by
  simp_rw [sub_eq_add_neg, covariance_add_left hX hY.neg hZ, covariance_neg_left]

lemma covariance_sub_right [IsFiniteMeasure Œº]
    (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) (hZ : MemLp Z 2 Œº) :
    cov[X, Y - Z; Œº] = cov[X, Y; Œº] - cov[X, Z; Œº] := by
  simp_rw [sub_eq_add_neg, covariance_add_right hX hY hZ.neg, covariance_neg_right]

@[simp]
lemma covariance_sub_const_left [IsProbabilityMeasure Œº] (hX : Integrable X Œº) (c : ‚Ñù) :
    cov[fun œâ ‚Ü¶ X œâ - c, Y; Œº] = cov[X, Y; Œº] := by
  simp [sub_eq_add_neg, hX]

@[simp]
lemma covariance_const_sub_left [IsProbabilityMeasure Œº] (hX : Integrable X Œº) (c : ‚Ñù) :
    cov[fun œâ ‚Ü¶ c - X œâ, Y; Œº] = - cov[X, Y; Œº] := by
  simp [sub_eq_add_neg, hX.neg']

@[simp]
lemma covariance_sub_const_right [IsProbabilityMeasure Œº] (hY : Integrable Y Œº) (c : ‚Ñù) :
    cov[X, fun œâ ‚Ü¶ Y œâ - c; Œº] = cov[X, Y; Œº] := by
  simp [sub_eq_add_neg, hY]

@[simp]
lemma covariance_const_sub_right [IsProbabilityMeasure Œº] (hY : Integrable Y Œº) (c : ‚Ñù) :
    cov[X, fun œâ ‚Ü¶ c - Y œâ; Œº] = - cov[X, Y; Œº] := by
  simp [sub_eq_add_neg, hY.neg']

lemma variance_sub [IsFiniteMeasure Œº] (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) :
    Var[X - Y; Œº] = Var[X; Œº] - 2 * cov[X, Y; Œº] + Var[Y; Œº] := by
  rw [‚Üê covariance_self, covariance_sub_left hX hY (hX.sub hY), covariance_sub_right hX hX hY,
    covariance_sub_right hY hX hY, covariance_self, covariance_self, covariance_comm]
  ¬∑ ring
  ¬∑ exact hY.aemeasurable
  ¬∑ exact hX.aemeasurable
  ¬∑ exact hX.aemeasurable.sub hY.aemeasurable

lemma variance_fun_sub [IsFiniteMeasure Œº] (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) :
    Var[fun œâ ‚Ü¶ X œâ - Y œâ; Œº] = Var[X; Œº] - 2 * cov[X, Y; Œº] + Var[Y; Œº] :=
  variance_sub hX hY

section Sum

variable {Œπ : Type*} {X : Œπ ‚Üí Œ© ‚Üí ‚Ñù} {s : Finset Œπ} [IsFiniteMeasure Œº]

lemma covariance_sum_left' (hX : ‚àÄ i ‚àà s, MemLp (X i) 2 Œº) (hY : MemLp Y 2 Œº) :
    cov[‚àë i ‚àà s, X i, Y; Œº] = ‚àë i ‚àà s, cov[X i, Y; Œº] := by
  classical
  revert hX
  refine Finset.induction
    (motive := fun s ‚Ü¶
      (‚àÄ i ‚àà s, MemLp (X i) 2 Œº) ‚Üí cov[‚àë i ‚àà s, X i, Y; Œº] = ‚àë i ‚àà s, cov[X i, Y; Œº])
    (by simp) (fun i s hi h_ind hX ‚Ü¶ ?_) s
  rw [Finset.sum_insert hi, Finset.sum_insert hi, covariance_add_left, h_ind]
  ¬∑ exact fun j hj ‚Ü¶ hX j (by simp [hj])
  ¬∑ exact hX i (by simp)
  ¬∑ exact memLp_finset_sum' s (fun j hj ‚Ü¶ hX j (by simp [hj]))
  ¬∑ exact hY

lemma covariance_sum_left [Fintype Œπ] (hX : ‚àÄ i, MemLp (X i) 2 Œº) (hY : MemLp Y 2 Œº) :
    cov[‚àë i, X i, Y; Œº] = ‚àë i, cov[X i, Y; Œº] :=
  covariance_sum_left' (fun _ _ ‚Ü¶ hX _) hY

lemma covariance_fun_sum_left' (hX : ‚àÄ i ‚àà s, MemLp (X i) 2 Œº) (hY : MemLp Y 2 Œº) :
    cov[fun œâ ‚Ü¶ ‚àë i ‚àà s, X i œâ, Y; Œº] = ‚àë i ‚àà s, cov[X i, Y; Œº] := by
  convert covariance_sum_left' hX hY
  simp

lemma covariance_fun_sum_left [Fintype Œπ] (hX : ‚àÄ i, MemLp (X i) 2 Œº) (hY : MemLp Y 2 Œº) :
    cov[fun œâ ‚Ü¶ ‚àë i, X i œâ, Y; Œº] = ‚àë i, cov[X i, Y; Œº] := by
  convert covariance_sum_left hX hY
  simp

lemma covariance_sum_right' (hX : ‚àÄ i ‚àà s, MemLp (X i) 2 Œº) (hY : MemLp Y 2 Œº) :
    cov[Y, ‚àë i ‚àà s, X i; Œº] = ‚àë i ‚àà s, cov[Y, X i; Œº] := by
  rw [covariance_comm, covariance_sum_left' hX hY]
  simp_rw [covariance_comm]

lemma covariance_sum_right [Fintype Œπ] (hX : ‚àÄ i, MemLp (X i) 2 Œº) (hY : MemLp Y 2 Œº) :
    cov[Y, ‚àë i, X i; Œº] = ‚àë i, cov[Y, X i; Œº] :=
  covariance_sum_right' (fun _ _ ‚Ü¶ hX _) hY

lemma covariance_fun_sum_right' (hX : ‚àÄ i ‚àà s, MemLp (X i) 2 Œº) (hY : MemLp Y 2 Œº) :
    cov[Y, fun œâ ‚Ü¶ ‚àë i ‚àà s, X i œâ; Œº] = ‚àë i ‚àà s, cov[Y, X i; Œº] := by
  convert covariance_sum_right' hX hY
  simp

lemma covariance_fun_sum_right [Fintype Œπ] (hX : ‚àÄ i, MemLp (X i) 2 Œº) (hY : MemLp Y 2 Œº) :
    cov[Y, fun œâ ‚Ü¶ ‚àë i, X i œâ; Œº] = ‚àë i, cov[Y, X i; Œº] :=
  covariance_fun_sum_right' (fun _ _ ‚Ü¶ hX _) hY

lemma covariance_sum_sum' {Œπ' : Type*} {Y : Œπ' ‚Üí Œ© ‚Üí ‚Ñù} {t : Finset Œπ'}
    (hX : ‚àÄ i ‚àà s, MemLp (X i) 2 Œº) (hY : ‚àÄ i ‚àà t, MemLp (Y i) 2 Œº) :
    cov[‚àë i ‚àà s, X i, ‚àë j ‚àà t, Y j; Œº] = ‚àë i ‚àà s, ‚àë j ‚àà t, cov[X i, Y j; Œº] := by
  rw [covariance_sum_left' hX]
  ¬∑ exact Finset.sum_congr rfl fun i hi ‚Ü¶ by rw [covariance_sum_right' hY (hX i hi)]
  ¬∑ exact memLp_finset_sum' t hY

lemma covariance_sum_sum [Fintype Œπ] {Œπ' : Type*} [Fintype Œπ'] {Y : Œπ' ‚Üí Œ© ‚Üí ‚Ñù}
    (hX : ‚àÄ i, MemLp (X i) 2 Œº) (hY : ‚àÄ i, MemLp (Y i) 2 Œº) :
    cov[‚àë i, X i, ‚àë j, Y j; Œº] = ‚àë i, ‚àë j, cov[X i, Y j; Œº] :=
  covariance_sum_sum' (fun _ _ ‚Ü¶ hX _) (fun _ _ ‚Ü¶ hY _)

lemma covariance_fun_sum_fun_sum' {Œπ' : Type*} {Y : Œπ' ‚Üí Œ© ‚Üí ‚Ñù} {t : Finset Œπ'}
    (hX : ‚àÄ i ‚àà s, MemLp (X i) 2 Œº) (hY : ‚àÄ i ‚àà t, MemLp (Y i) 2 Œº) :
    cov[fun œâ ‚Ü¶ ‚àë i ‚àà s, X i œâ, fun œâ ‚Ü¶ ‚àë j ‚àà t, Y j œâ; Œº]
      = ‚àë i ‚àà s, ‚àë j ‚àà t, cov[X i, Y j; Œº] := by
  convert covariance_sum_sum' hX hY
  all_goals simp

lemma covariance_fun_sum_fun_sum [Fintype Œπ] {Œπ' : Type*} [Fintype Œπ'] {Y : Œπ' ‚Üí Œ© ‚Üí ‚Ñù}
    (hX : ‚àÄ i, MemLp (X i) 2 Œº) (hY : ‚àÄ i, MemLp (Y i) 2 Œº) :
    cov[fun œâ ‚Ü¶ ‚àë i, X i œâ, fun œâ ‚Ü¶ ‚àë j, Y j œâ; Œº] = ‚àë i, ‚àë j, cov[X i, Y j; Œº] :=
  covariance_fun_sum_fun_sum' (fun _ _ ‚Ü¶ hX _) (fun _ _ ‚Ü¶ hY _)

lemma variance_sum' (hX : ‚àÄ i ‚àà s, MemLp (X i) 2 Œº) :
    Var[‚àë i ‚àà s, X i; Œº] = ‚àë i ‚àà s, ‚àë j ‚àà s, cov[X i, X j; Œº] := by
  rw [‚Üê covariance_self, covariance_sum_left' (by simpa)]
  ¬∑ refine Finset.sum_congr rfl fun i hi ‚Ü¶ ?_
    rw [covariance_sum_right' (by simpa) (hX i hi)]
  ¬∑ exact memLp_finset_sum' _ (by simpa)
  ¬∑ exact (memLp_finset_sum' _ (by simpa)).aemeasurable

lemma variance_sum [Fintype Œπ] (hX : ‚àÄ i, MemLp (X i) 2 Œº) :
    Var[‚àë i, X i; Œº] = ‚àë i, ‚àë j, cov[X i, X j; Œº] :=
  variance_sum' (fun _ _ ‚Ü¶ hX _)

lemma variance_fun_sum' (hX : ‚àÄ i ‚àà s, MemLp (X i) 2 Œº) :
    Var[fun œâ ‚Ü¶ ‚àë i ‚àà s, X i œâ; Œº] = ‚àë i ‚àà s, ‚àë j ‚àà s, cov[X i, X j; Œº] := by
  convert variance_sum' hX
  simp

lemma variance_fun_sum [Fintype Œπ] (hX : ‚àÄ i, MemLp (X i) 2 Œº) :
    Var[fun œâ ‚Ü¶ ‚àë i, X i œâ; Œº] = ‚àë i, ‚àë j, cov[X i, X j; Œº] := by
  convert variance_sum hX
  simp

end Sum

section Map

variable {Œ©' : Type*} {mŒ©' : MeasurableSpace Œ©'} {Œº : Measure Œ©'}

lemma covariance_map_equiv (X Y : Œ© ‚Üí ‚Ñù) (Z : Œ©' ‚âÉ·µê Œ©) :
    cov[X, Y; Œº.map Z] = cov[X ‚àò Z, Y ‚àò Z; Œº] := by
  simp_rw [covariance, integral_map_equiv]
  rfl

lemma covariance_map {Z : Œ©' ‚Üí Œ©} (hX : AEStronglyMeasurable X (Œº.map Z))
    (hY : AEStronglyMeasurable Y (Œº.map Z)) (hZ : AEMeasurable Z Œº) :
    cov[X, Y; Œº.map Z] = cov[X ‚àò Z, Y ‚àò Z; Œº] := by
  simp_rw [covariance]
  repeat rw [integral_map]
  ¬∑ rfl
  any_goals assumption
  exact (hX.sub aestronglyMeasurable_const).mul (hY.sub aestronglyMeasurable_const)

lemma covariance_map_fun {Z : Œ©' ‚Üí Œ©} (hX : AEStronglyMeasurable X (Œº.map Z))
    (hY : AEStronglyMeasurable Y (Œº.map Z)) (hZ : AEMeasurable Z Œº) :
    cov[X, Y; Œº.map Z] = cov[fun œâ ‚Ü¶ X (Z œâ), fun œâ ‚Ü¶ Y (Z œâ); Œº] :=
  covariance_map hX hY hZ

end Map

end ProbabilityTheory
