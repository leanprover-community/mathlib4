/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.Probability.Moments.Variance

/-!
# Covariance

We define the covariance of two real-valued random variables.

## Main definitions

* `covariance`: covariance of two real-valued random variables, with notation `cov[X, Y; Œº]`.
  `cov[X, Y; Œº] = ‚à´ œâ, (X œâ - Œº[X]) * (Y œâ - Œº[Y]) ‚àÇŒº`.

## Main statements

* `covariance_same`: `cov[X, X; Œº] = Var[X; Œº]`

## Notation

* `cov[X, Y; Œº] = covariance X Y Œº`
* `cov[X, Y] = covariance X Y volume`

-/

open MeasureTheory

namespace ProbabilityTheory

variable {Œ© : Type*} {mŒ© : MeasurableSpace Œ©} {X Y Z : Œ© ‚Üí ‚Ñù} {Œº : Measure Œ©}

/-- The covariance of two real-valued random variables defined as
the integral of `(X - ùîº[X])(Y - ùîº[Y])`. -/
noncomputable def covariance (X Y : Œ© ‚Üí ‚Ñù) (Œº : Measure Œ©) : ‚Ñù :=
  ‚à´ œâ, (X œâ - Œº[X]) * (Y œâ - Œº[Y]) ‚àÇŒº

@[inherit_doc]
scoped notation "cov[" X ", " Y "; " Œº "]" => ProbabilityTheory.covariance X Y Œº

/-- The covariance of the real-valued random variables `X` and `Y`
according to the volume measure. -/
scoped notation "cov[" X ", " Y "]" => cov[X, Y; MeasureTheory.MeasureSpace.volume]

lemma covariance_same {X : Œ© ‚Üí ‚Ñù} (hX : AEMeasurable X Œº) :
    cov[X, X; Œº] = Var[X; Œº] := by
  rw [covariance, variance_eq_integral hX]
  congr with x
  ring

@[simp] lemma covariance_zero_left : cov[0, Y; Œº] = 0 := by simp [covariance]

@[simp] lemma covariance_zero_right : cov[X, 0; Œº] = 0 := by simp [covariance]

@[simp] lemma covariance_zero_measure : cov[X, Y; (0 : Measure Œ©)] = 0 := by simp [covariance]

variable (X Y) in
lemma covariance_comm : cov[X, Y; Œº] = cov[Y, X; Œº] := by
  simp_rw [covariance]
  congr with x
  ring

@[simp]
lemma covariance_const_left [IsProbabilityMeasure Œº] (c : ‚Ñù) : cov[fun _ ‚Ü¶ c, Y; Œº] = 0 := by
  simp [covariance]

@[simp]
lemma covariance_const_right [IsProbabilityMeasure Œº] (c : ‚Ñù) : cov[X, fun _ ‚Ü¶ c; Œº] = 0 := by
  simp [covariance]

@[simp]
lemma covariance_add_const_left [IsProbabilityMeasure Œº] (hX : Integrable X Œº) (c : ‚Ñù) :
    cov[fun œâ ‚Ü¶ X œâ + c, Y; Œº] = cov[X, Y; Œº] := by
  simp_rw [covariance]
  congr with œâ
  rw [integral_add hX (by fun_prop)]
  simp

@[simp]
lemma covariance_const_add_left [IsProbabilityMeasure Œº] (hX : Integrable X Œº) (c : ‚Ñù) :
    cov[fun œâ ‚Ü¶ c + X œâ, Y; Œº] = cov[X, Y; Œº] := by
  simp_rw [add_comm c]
  exact covariance_add_const_left hX c

@[simp]
lemma covariance_add_const_right [IsProbabilityMeasure Œº] (hY : Integrable Y Œº) (c : ‚Ñù) :
    cov[X, fun œâ ‚Ü¶ Y œâ + c; Œº] = cov[X, Y; Œº] := by
  rw [covariance_comm, covariance_add_const_left hY c, covariance_comm]

@[simp]
lemma covariance_const_add_right [IsProbabilityMeasure Œº] (hY : Integrable Y Œº) (c : ‚Ñù) :
    cov[X, fun œâ ‚Ü¶ c + Y œâ; Œº] = cov[X, Y; Œº] := by
  simp_rw [add_comm c]
  exact covariance_add_const_right hY c

lemma covariance_add_left [IsFiniteMeasure Œº]
    (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) (hZ : MemLp Z 2 Œº) :
    cov[X + Y, Z; Œº] = cov[X, Z; Œº] + cov[Y, Z; Œº] := by
  simp_rw [covariance, Pi.add_apply]
  rw [‚Üê integral_add]
  ¬∑ congr with x
    rw [integral_add (hX.integrable (by simp)) (hY.integrable (by simp))]
    ring
  ¬∑ exact (hX.sub (memLp_const _)).integrable_mul (hZ.sub (memLp_const _))
  ¬∑ exact (hY.sub (memLp_const _)).integrable_mul (hZ.sub (memLp_const _))

lemma covariance_add_right [IsFiniteMeasure Œº]
    (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) (hZ : MemLp Z 2 Œº) :
    cov[X, Y + Z; Œº] = cov[X, Y; Œº] + cov[X, Z; Œº] := by
  rw [covariance_comm, covariance_add_left hY hZ hX, covariance_comm X, covariance_comm Z]

lemma covariance_smul_left (c : ‚Ñù) : cov[c ‚Ä¢ X, Y; Œº] = c * cov[X, Y; Œº] := by
  simp_rw [covariance, Pi.smul_apply, smul_eq_mul, ‚Üê integral_const_mul, ‚Üê mul_assoc, mul_sub,
    integral_const_mul]

lemma covariance_smul_right (c : ‚Ñù) : cov[X, c ‚Ä¢ Y; Œº] = c * cov[X, Y; Œº] := by
  rw [covariance_comm, covariance_smul_left, covariance_comm]

@[simp]
lemma covariance_neg_left : cov[-X, Y; Œº] = -cov[X, Y; Œº] := by
  calc cov[-X, Y; Œº]
  _ = cov[(-1 : ‚Ñù) ‚Ä¢ X, Y; Œº] := by simp
  _ = - cov[X, Y; Œº] := by rw [covariance_smul_left]; simp

@[simp]
lemma covariance_fun_neg_left : cov[fun œâ ‚Ü¶ - X œâ, Y; Œº] = -cov[X, Y; Œº] :=
  covariance_neg_left

@[simp]
lemma covariance_neg_right : cov[X, -Y; Œº] = -cov[X, Y; Œº] := by
  calc cov[X, -Y; Œº]
  _ = cov[X, (-1 : ‚Ñù) ‚Ä¢ Y; Œº] := by simp
  _ = - cov[X, Y; Œº] := by rw [covariance_smul_right]; simp

@[simp]
lemma covariance_fun_neg_right : cov[X, fun œâ ‚Ü¶ - Y œâ; Œº] = -cov[X, Y; Œº] :=
  covariance_neg_right

lemma covariance_sub_left [IsFiniteMeasure Œº]
    (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) (hZ : MemLp Z 2 Œº) :
    cov[X - Y, Z; Œº] = cov[X, Z; Œº] - cov[Y, Z; Œº] := by
  simp_rw [sub_eq_add_neg, covariance_add_left hX hY.neg hZ, covariance_neg_left]

lemma covariance_sub_right [IsFiniteMeasure Œº]
    (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) (hZ : MemLp Z 2 Œº) :
    cov[X, Y - Z; Œº] = cov[X, Y; Œº] - cov[X, Z; Œº] := by
  simp_rw [sub_eq_add_neg, covariance_add_right hX hY hZ.neg, covariance_neg_right]

@[simp]
lemma covariance_sub_const_left [IsProbabilityMeasure Œº] (hX : Integrable X Œº) (c : ‚Ñù) :
    cov[fun œâ ‚Ü¶ X œâ - c, Y; Œº] = cov[X, Y; Œº] := by
  simp [sub_eq_add_neg, hX]

@[simp]
lemma covariance_const_sub_left [IsProbabilityMeasure Œº] (hX : Integrable X Œº) (c : ‚Ñù) :
    cov[fun œâ ‚Ü¶ c - X œâ, Y; Œº] = - cov[X, Y; Œº] := by
  simp [sub_eq_add_neg, hX.neg']

@[simp]
lemma covariance_sub_const_right [IsProbabilityMeasure Œº] (hY : Integrable Y Œº) (c : ‚Ñù) :
    cov[X, fun œâ ‚Ü¶ Y œâ - c; Œº] = cov[X, Y; Œº] := by
  simp [sub_eq_add_neg, hY]

@[simp]
lemma covariance_const_sub_right [IsProbabilityMeasure Œº] (hY : Integrable Y Œº) (c : ‚Ñù) :
    cov[X, fun œâ ‚Ü¶ c - Y œâ; Œº] = - cov[X, Y; Œº] := by
  simp [sub_eq_add_neg, hY.neg']

end ProbabilityTheory
