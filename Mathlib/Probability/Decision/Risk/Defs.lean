/-
Copyright (c) 2025 Rémy Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Rémy Degenne, Lorenzo Luccioli
-/

import Mathlib.Probability.Kernel.Composition.Comp

/-!
# Risk of an estimator

An estimation problem is defined by a parameter space `Θ`, a data generating kernel `P : Kernel Θ 𝓧`
and a loss function `ℓ : Θ → 𝓨 → ℝ≥0∞`.
A (randomized) estimator is a kernel `κ : Kernel 𝓧 𝓨` that maps data to estimates of a quantity
of interest that depends on the parameter. Often the quantity of interest is the parameter itself
and `𝓨 = Θ`.
The quality of an estimate `y` when data comes from the distribution with parameter `θ` is measured
by the value of the loss function `ℓ θ y`.

## Main definitions

The risk is the average loss of the estimator `κ` on data generated by `P` with parameter `θ`,
equal to `∫⁻ y, ℓ θ y ∂((κ ∘ₖ P) θ)`. We don't introduce a new definition for that risk.

* `bayesianRisk ℓ P κ π`: average of the risk with respect to the prior `π : Measure Θ`.
* `bayesRiskPrior ℓ P π`: minimum of the Bayesian risks over all estimators, that is over all
  Markov kernels `κ : Kernel 𝓧 𝓨`.
* `bayesRisk ℓ P`: supremum of the Bayes risks over all priors (probability measures on `Θ`).
* `minimaxRisk ℓ P`: infimum over all estimators of the maximum over `θ` of the risk.

-/

open MeasureTheory
open scoped ENNReal

namespace ProbabilityTheory

variable {Θ 𝓧 𝓨 : Type*} {mΘ : MeasurableSpace Θ} {m𝓧 : MeasurableSpace 𝓧} {m𝓨 : MeasurableSpace 𝓨}
  {ℓ : Θ → 𝓨 → ℝ≥0∞} {P : Kernel Θ 𝓧} {κ : Kernel 𝓧 𝓨} {π : Measure Θ}

/-- The bayesian risk of an estimator `κ` on an estimation task with loss `ℓ` and
data generating kernel `P` with respect to a prior `π`. -/
noncomputable
def bayesianRisk (ℓ : Θ → 𝓨 → ℝ≥0∞) (P : Kernel Θ 𝓧) (κ : Kernel 𝓧 𝓨) (π : Measure Θ) : ℝ≥0∞ :=
  ∫⁻ θ, ∫⁻ y, ℓ θ y ∂((κ ∘ₖ P) θ) ∂π

/-- The Bayes risk with respect to a prior `π`, defined as the infimum of the Bayesian risks of all
estimators. -/
noncomputable
def bayesRiskPrior {𝓨 : Type*} [MeasurableSpace 𝓨]
    (ℓ : Θ → 𝓨 → ℝ≥0∞) (P : Kernel Θ 𝓧) (π : Measure Θ) : ℝ≥0∞ :=
  ⨅ (κ : Kernel 𝓧 𝓨) (_ : IsMarkovKernel κ), bayesianRisk ℓ P κ π

/-- The Bayes risk, defined as the supremum over priors of the Bayes risk with respect to
the prior. -/
noncomputable
def bayesRisk {𝓨 : Type*} [MeasurableSpace 𝓨] (ℓ : Θ → 𝓨 → ℝ≥0∞) (P : Kernel Θ 𝓧) : ℝ≥0∞ :=
  ⨆ (π : Measure Θ) (_ : IsProbabilityMeasure π), bayesRiskPrior ℓ P π

/-- The minimax risk, defined as the infimum over estimators of the maximal risk of
the estimator. -/
noncomputable
def minimaxRisk {𝓨 : Type*} [MeasurableSpace 𝓨] (ℓ : Θ → 𝓨 → ℝ≥0∞) (P : Kernel Θ 𝓧) : ℝ≥0∞ :=
  ⨅ (κ : Kernel 𝓧 𝓨) (_ : IsMarkovKernel κ), ⨆ θ, ∫⁻ y, ℓ θ y ∂((κ ∘ₖ P) θ)

section Zero

@[simp]
lemma bayesianRisk_zero_left (ℓ : Θ → 𝓨 → ℝ≥0∞) (κ : Kernel 𝓧 𝓨) (π : Measure Θ) :
    bayesianRisk ℓ (0 : Kernel Θ 𝓧) κ π = 0 := by simp [bayesianRisk]

@[simp]
lemma bayesianRisk_zero_right (ℓ : Θ → 𝓨 → ℝ≥0∞) (P : Kernel Θ 𝓧) (π : Measure Θ) :
    bayesianRisk ℓ P (0 : Kernel 𝓧 𝓨) π = 0 := by simp [bayesianRisk]

@[simp]
lemma bayesianRisk_zero_prior (ℓ : Θ → 𝓨 → ℝ≥0∞) (P : Kernel Θ 𝓧) (κ : Kernel 𝓧 𝓨) :
    bayesianRisk ℓ P κ 0 = 0 := by simp [bayesianRisk]

@[simp]
lemma bayesRiskPrior_zero_left (ℓ : Θ → 𝓨 → ℝ≥0∞) (π : Measure Θ) [Nonempty 𝓨] :
    bayesRiskPrior ℓ (0 : Kernel Θ 𝓧) π = 0 := by simp [bayesRiskPrior, iInf_subtype']

@[simp]
lemma bayesRiskPrior_zero_right (ℓ : Θ → 𝓨 → ℝ≥0∞) (P : Kernel Θ 𝓧) [Nonempty 𝓨] :
    bayesRiskPrior ℓ P (0 : Measure Θ) = 0 := by simp [bayesRiskPrior, iInf_subtype']

@[simp]
lemma bayesRisk_zero (ℓ : Θ → 𝓨 → ℝ≥0∞) [Nonempty 𝓨] :
    bayesRisk ℓ (0 : Kernel Θ 𝓧) = 0 := by simp [bayesRisk]

@[simp]
lemma minimaxRisk_zero (ℓ : Θ → 𝓨 → ℝ≥0∞) [Nonempty 𝓨] :
    minimaxRisk ℓ (0 : Kernel Θ 𝓧) = 0 := by simp [minimaxRisk, iInf_subtype']

end Zero

section Empty

@[simp]
lemma bayesianRisk_of_isEmpty [IsEmpty Θ] : bayesianRisk ℓ P κ π = 0 := by simp [bayesianRisk]

@[simp]
lemma bayesianRisk_of_isEmpty' [IsEmpty 𝓧] : bayesianRisk ℓ P κ π = 0 := by
  simp [Subsingleton.elim P 0]

@[simp]
lemma bayesianRisk_of_isEmpty'' [IsEmpty 𝓨] : bayesianRisk ℓ P κ π = 0 := by
  simp [Subsingleton.elim κ 0]

@[simp]
lemma bayesRiskPrior_of_isEmpty [IsEmpty 𝓧] : bayesRiskPrior ℓ P π = 0 := by
  simp [bayesRiskPrior]

@[simp]
lemma bayesRiskPrior_of_nonempty_of_isEmpty [Nonempty 𝓧] [IsEmpty 𝓨] :
    bayesRiskPrior ℓ P π = ∞ := by
  have : IsEmpty (Subtype (@IsMarkovKernel 𝓧 𝓨 m𝓧 m𝓨)) := by
    simp only [isEmpty_subtype]
    intro κ
    rw [Subsingleton.elim κ 0]
    exact Kernel.not_isMarkovKernel_zero
  simp [bayesRiskPrior, iInf_subtype']

@[simp]
lemma bayesRisk_of_isEmpty [IsEmpty 𝓧] : bayesRisk ℓ P = 0 := by
  simp [bayesRisk]

@[simp]
lemma minimaxRisk_of_isEmpty [IsEmpty 𝓧] : minimaxRisk ℓ P = 0 := by
  simp [minimaxRisk, Subsingleton.elim P 0]

end Empty

end ProbabilityTheory
