/-
Copyright (c) 2025 Ga√´tan Serr√©. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ga√´tan Serr√©, R√©my Degenne
-/

import Mathlib.Analysis.SpecialFunctions.Sigmoid
import Mathlib.MeasureTheory.Constructions.UnitInterval
import Mathlib.Order.CompletePartialOrder
import Mathlib.Probability.CDF

/-!
# Representation of kernels

This file contains results about isolation of kernels randomness. In particular, it shows that,
when the target space is a standard Borel space, any Markov kernel can be represented as the image
of the uniform measure on `[0,1]` by a deterministic map. It corresponds to Lemma 4.22 in
"Foundations of Modern Probability" by Olav Kallenberg, 2021.

## Statements

* `ProbabilityTheory.Kernel.unitInterval_representation Œ∫`:
  for a Markov kernel `Œ∫ : Kernel Œ± I`, there exists a jointly measurable function
  `f : Œ± ‚Üí I ‚Üí I` such that for all `a : Œ±`, `volume.map (f a) = Œ∫ a`.

* `ProbabilityTheory.Kernel.embedding_representation hg Œ∫`:
  for a measurable embedding `g : Œ≤ ‚Üí I` and a Markov kernel `Œ∫ : Kernel Œ± Œ≤`,
  there exists a jointly measurable function `f : Œ± ‚Üí I ‚Üí Œ≤` such that for all `a : Œ±`,
  `volume.map (f a) = Œ∫ a`.

* `ProbabilityTheory.Kernel.representation Œ∫`:
  for a Markov kernel `Œ∫ : Kernel Œ± Œ≤` with `Œ≤` a standard Borel space,
  there exists a jointly measurable function `f : Œ± ‚Üí I ‚Üí Œ≤` such that for all `a : Œ±`,
  `volume.map (f a) = Œ∫ a`.
  This is a consequence of `ProbabilityTheory.Kernel.embedding_representation` and the fact that
  any standard Borel space can be embedded in `‚Ñù`, and then composed with `unitInterval.sigmoid`.
-/

open MeasureTheory ProbabilityTheory Set ENNReal unitInterval Filter Topology Function

namespace ProbabilityTheory.Kernel

variable {Œ± : Type*} [MeasurableSpace Œ±]

lemma unitInterval_representation (Œ∫ : Kernel Œ± I) [IsMarkovKernel Œ∫] :
    ‚àÉ (f : Œ± ‚Üí I ‚Üí I), Measurable (uncurry f) ‚àß ‚àÄ a, volume.map (f a) = Œ∫ a := by
  let f := fun s (t : I) ‚Ü¶ sSup {x | (Œ∫ s).real (Icc 0 x) < t}
  have measurable_f : Measurable (uncurry f) := by
    refine measurable_of_Ioi fun a ‚Ü¶ ?_
    simp only [preimage, uncurry, mem_Ioi]
    have h_monotone s : Monotone (fun x ‚Ü¶ (Œ∫ s).real (Icc 0 x)) := by
      intro x y hxy
      suffices h : Icc 0 x ‚äÜ Icc 0 y from measureReal_mono h
      exact Icc_subset_Icc_right hxy
    rw [sSup_eq_iUnion_rat h_monotone a]
    refine MeasurableSet.iUnion (fun b ‚Ü¶ MeasurableSet.iUnion
      (fun bI ‚Ü¶ MeasurableSet.iUnion (fun _ ‚Ü¶ ?_)))
    refine measurableSet_lt ?_ measurable_snd.subtype_val
    simp_rw [measureReal_def]
    have hŒ∫ := Œ∫.measurable_coe (s := Icc 0 ‚ü®b, bI‚ü©) measurableSet_Icc
    fun_prop
  refine ‚ü®f, measurable_f, fun a ‚Ü¶ (volume.map (f a)).ext_of_Iic (Œ∫ a) fun x ‚Ü¶ ?_‚ü©
  rw [volume.map_apply measurable_f.of_uncurry_left measurableSet_Iic, preimage]
  simp only [mem_Iic]
  have Iic_to_Icc : Iic x = Icc 0 x := by ext; simp
  rw [Iic_to_Icc]
  clear Iic_to_Icc
  rw [‚Üê ofReal_measureReal (measure_ne_top (Œ∫ a) _)]
  have Œ∫_in_I : ((Œ∫ a).real (Icc 0 x)) ‚àà I := ‚ü®measureReal_nonneg, measureReal_le_one‚ü©
  rw [‚Üê volume_Iic ‚ü®_, Œ∫_in_I‚ü©]
  congr with Œæ
  constructor
  swap
  ¬∑ intro (hŒæ : Œæ ‚â§ (Œ∫ a).real (Icc 0 x))
    simp only [sSup_le_iff, f]
    intro c hc
    have le1 := lt_of_le_of_lt' hŒæ hc
    by_contra h
    push_neg at h
    have le2 : (Œ∫ a).real (Icc 0 x) ‚â§ (Œ∫ a).real (Icc 0 c) := by
      suffices h : Icc 0 x ‚äÜ Icc 0 c from measureReal_mono h
      refine (Icc_subset_Icc_iff unitInterval.nonneg').mpr ?_
      exact ‚ü®nonneg', h.le‚ü©
    linarith
  ¬∑ intro (hŒæ : f a Œæ ‚â§ x)
    change Œæ ‚â§ (Œ∫ a).real (Icc 0 x)
    by_cases hx : x = 1
    ¬∑ simp [hx, ‚Üê univ_eq_Icc, Œæ.2.2]
    let g := fun y ‚Ü¶ (Œ∫ a).real (Icc 0 y)
    letI nebot : NeBot (ùìù[>] x) := by
      refine nhdsGT_neBot_of_exists_gt ?_
      use 1
      exact lt_of_le_of_ne x.2.2 hx
    refine le_of_tendsto_of_tendsto (b := ùìù[>] x) (g := g) continuousWithinAt_const ?_ ?_
    ¬∑ let h := cdf ((Œ∫ a).map Subtype.val)
      have h_continuousWithinAt := continuousWithinAt_Ioi_iff_Ici.mpr (h.right_continuous x)
      simp_rw [g, ‚Üê unitInterval.cdf_eq_real (Œ∫ a)]
      exact h_continuousWithinAt.comp (Continuous.continuousWithinAt (by fun_prop)) (fun y hy ‚Ü¶ hy)
    ¬∑ apply eventually_nhdsWithin_of_forall
      intro y hy
      by_contra h
      push_neg at h
      simp only [sSup_le_iff, f] at hŒæ
      specialize hŒæ y h
      replace hŒæ : y.1 ‚â§ x.1 := hŒæ
      have : y.1 > x.1 := hy
      linarith

lemma embedding_representation {Œ≤ : Type*} [Nonempty Œ≤] [MeasurableSpace Œ≤] {g : Œ≤ ‚Üí I}
    (hg : MeasurableEmbedding g) (Œ∫ : Kernel Œ± Œ≤) [IsMarkovKernel Œ∫] :
    ‚àÉ (f : Œ± ‚Üí I ‚Üí Œ≤), Measurable (uncurry f) ‚àß ‚àÄ a, volume.map (f a) = Œ∫ a := by
  have hŒ∫g : IsMarkovKernel (Œ∫.map g) := Kernel.IsMarkovKernel.map Œ∫ hg.measurable
  classical
  have hg'Œ∫ : Œ∫ = (Œ∫.map g).map hg.invFun := by
    rw [‚Üê Kernel.map_comp_right _ hg.measurable (by fun_prop), LeftInverse.id hg.leftInverse_invFun,
      Kernel.map_id]
  obtain ‚ü®f', hf', hf'Œ∫‚ü© := (Œ∫.map g).unitInterval_representation
  refine ‚ü®fun a u ‚Ü¶ hg.invFun (f' a u), by fun_prop, fun a ‚Ü¶ ?_‚ü©
  rw [hg'Œ∫, Kernel.map_apply _ (by fun_prop), ‚Üê hf'Œ∫, Measure.map_map (by fun_prop) (by fun_prop)]
  rfl

theorem representation {Œ≤ : Type*} [Nonempty Œ≤] [MeasurableSpace Œ≤] [StandardBorelSpace Œ≤]
    (Œ∫ : Kernel Œ± Œ≤) [IsMarkovKernel Œ∫] :
    ‚àÉ (f : Œ± ‚Üí I ‚Üí Œ≤), Measurable (uncurry f) ‚àß ‚àÄ a, volume.map (f a) = Œ∫ a :=
  Œ∫.embedding_representation (measurableEmbedding_sigmoid_comp_embeddingReal Œ≤)

end ProbabilityTheory.Kernel
