/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.MeasureTheory.Function.AEEqOfIntegral
import Mathlib.Probability.Kernel.Composition
import Mathlib.Probability.Kernel.Disintegration.MeasurableStieltjes

/-!
# Building a Markov kernel from a conditional cumulative distribution function

Let `Œ∫ : kernel Œ± (Œ≤ √ó ‚Ñù)` and `ŒΩ : kernel Œ± Œ≤` be two finite kernels.
A function `f : Œ± √ó Œ≤ ‚Üí StieltjesFunction` is called a conditional kernel CDF of `Œ∫` with respect
to `ŒΩ` if it is measurable, tends to to 0 at -‚àû and to 1 at +‚àû for all `p : Œ± √ó Œ≤`,
`fun b ‚Ü¶ f (a, b) x` is `(ŒΩ a)`-integrable for all `a : Œ±` and `x : ‚Ñù` and for all measurable
sets `s : Set Œ≤`, `‚à´ b in s, f (a, b) x ‚àÇ(ŒΩ a) = (Œ∫ a (s √óÀ¢ Iic x)).toReal`.

From such a function with property `hf : IsCondKernelCDF f Œ∫ ŒΩ`, we can build a `kernel (Œ± √ó Œ≤) ‚Ñù`
denoted by `hf.toKernel f` such that `Œ∫ = ŒΩ ‚äó‚Çñ hf.toKernel f`.

## Main definitions

Let `Œ∫ : kernel Œ± (Œ≤ √ó ‚Ñù)` and `ŒΩ : kernel Œ± Œ≤`.

* `ProbabilityTheory.IsCondKernelCDF`: a function `f : Œ± √ó Œ≤ ‚Üí StieltjesFunction` is called
  a conditional kernel CDF of `Œ∫` with respect to `ŒΩ` if it is measurable, tends to to 0 at -‚àû and
  to 1 at +‚àû for all `p : Œ± √ó Œ≤`, if `fun b ‚Ü¶ f (a, b) x` is `(ŒΩ a)`-integrable for all `a : Œ±` and
  `x : ‚Ñù` and for all measurable sets `s : Set Œ≤`,
  `‚à´ b in s, f (a, b) x ‚àÇ(ŒΩ a) = (Œ∫ a (s √óÀ¢ Iic x)).toReal`.
* `ProbabilityTheory.IsCondKernelCDF.toKernel`: from a function `f : Œ± √ó Œ≤ ‚Üí StieltjesFunction`
  with the property `hf : IsCondKernelCDF f Œ∫ ŒΩ`, build a `kernel (Œ± √ó Œ≤) ‚Ñù` such that
  `Œ∫ = ŒΩ ‚äó‚Çñ hf.toKernel f`.
* `ProbabilityTheory.IsRatCondKernelCDF`: a function `f : Œ± √ó Œ≤ ‚Üí ‚Ñö ‚Üí ‚Ñù` is called a rational
  conditional kernel CDF of `Œ∫` with respect to `ŒΩ` if is measurable and satisfies the same
  integral conditions as in the definition of `IsCondKernelCDF`, and the `‚Ñö ‚Üí ‚Ñù` function `f (a, b)`
  satisfies the properties of a Stieltjes function for `(ŒΩ a)`-almost all `b : Œ≤`.

## Main statements

* `ProbabilityTheory.isCondKernelCDF_stieltjesOfMeasurableRat`: if `f : Œ± √ó Œ≤ ‚Üí ‚Ñö ‚Üí ‚Ñù` has the
  property `IsRatCondKernelCDF`, then `stieltjesOfMeasurableRat f` is a function
  `Œ± √ó Œ≤ ‚Üí StieltjesFunction` with the property `IsCondKernelCDF`.
* `ProbabilityTheory.compProd_toKernel`: for `hf : IsCondKernelCDF f Œ∫ ŒΩ`, `ŒΩ ‚äó‚Çñ hf.toKernel f = Œ∫`.

-/

open MeasureTheory Set Filter TopologicalSpace

open scoped NNReal ENNReal MeasureTheory Topology ProbabilityTheory

namespace ProbabilityTheory

variable {Œ± Œ≤ : Type*} {mŒ± : MeasurableSpace Œ±} {mŒ≤ : MeasurableSpace Œ≤}
  {Œ∫ : kernel Œ± (Œ≤ √ó ‚Ñù)} {ŒΩ : kernel Œ± Œ≤}

section stieltjesOfMeasurableRat

variable {f : Œ± √ó Œ≤ ‚Üí ‚Ñö ‚Üí ‚Ñù}

/-- a function `f : Œ± √ó Œ≤ ‚Üí ‚Ñö ‚Üí ‚Ñù` is called a rational conditional kernel CDF of `Œ∫` with respect
to `ŒΩ` if is measurable, if `fun b ‚Ü¶ f (a, b) x` is `(ŒΩ a)`-integrable for all `a : Œ±` and `x : ‚Ñù`
and for all measurable sets `s : Set Œ≤`, `‚à´ b in s, f (a, b) x ‚àÇ(ŒΩ a) = (Œ∫ a (s √óÀ¢ Iic x)).toReal`.
Also the `‚Ñö ‚Üí ‚Ñù` function `f (a, b)` should satisfy the properties of a Sieltjes function for
`(ŒΩ a)`-almost all `b : Œ≤`. -/
structure IsRatCondKernelCDF (f : Œ± √ó Œ≤ ‚Üí ‚Ñö ‚Üí ‚Ñù) (Œ∫ : kernel Œ± (Œ≤ √ó ‚Ñù)) (ŒΩ : kernel Œ± Œ≤) : Prop :=
  measurable : Measurable f
  isRatStieltjesPoint_ae (a : Œ±) : ‚àÄ·µê b ‚àÇ(ŒΩ a), IsRatStieltjesPoint f (a, b)
  integrable (a : Œ±) (q : ‚Ñö) : Integrable (fun b ‚Ü¶ f (a, b) q) (ŒΩ a)
  setIntegral (a : Œ±) {s : Set Œ≤} (_hs : MeasurableSet s) (q : ‚Ñö) :
    ‚à´ b in s, f (a, b) q ‚àÇ(ŒΩ a) = (Œ∫ a (s √óÀ¢ Iic (q : ‚Ñù))).toReal

lemma IsRatCondKernelCDF.mono (hf : IsRatCondKernelCDF f Œ∫ ŒΩ) (a : Œ±) :
    ‚àÄ·µê b ‚àÇ(ŒΩ a), Monotone (f (a, b)) := by
  filter_upwards [hf.isRatStieltjesPoint_ae a] with b hb using hb.mono

lemma IsRatCondKernelCDF.tendsto_atTop_one (hf : IsRatCondKernelCDF f Œ∫ ŒΩ) (a : Œ±) :
    ‚àÄ·µê b ‚àÇ(ŒΩ a), Tendsto (f (a, b)) atTop (ùìù 1) := by
  filter_upwards [hf.isRatStieltjesPoint_ae a] with b hb using hb.tendsto_atTop_one

lemma IsRatCondKernelCDF.tendsto_atBot_zero (hf : IsRatCondKernelCDF f Œ∫ ŒΩ) (a : Œ±) :
    ‚àÄ·µê b ‚àÇ(ŒΩ a), Tendsto (f (a, b)) atBot (ùìù 0) := by
  filter_upwards [hf.isRatStieltjesPoint_ae a] with b hb using hb.tendsto_atBot_zero

lemma IsRatCondKernelCDF.iInf_rat_gt_eq (hf : IsRatCondKernelCDF f Œ∫ ŒΩ) (a : Œ±) :
    ‚àÄ·µê b ‚àÇ(ŒΩ a), ‚àÄ q, ‚®Ö r : Ioi q, f (a, b) r = f (a, b) q := by
  filter_upwards [hf.isRatStieltjesPoint_ae a] with b hb using hb.iInf_rat_gt_eq

lemma stieltjesOfMeasurableRat_ae_eq (hf : IsRatCondKernelCDF f Œ∫ ŒΩ) (a : Œ±) (q : ‚Ñö) :
    (fun b ‚Ü¶ stieltjesOfMeasurableRat f hf.measurable (a, b) q) =·µê[ŒΩ a] fun b ‚Ü¶ f (a, b) q := by
  filter_upwards [hf.isRatStieltjesPoint_ae a] with a ha
  rw [stieltjesOfMeasurableRat_eq, toRatCDF_of_isRatStieltjesPoint ha]

lemma setIntegral_stieltjesOfMeasurableRat_rat (hf : IsRatCondKernelCDF f Œ∫ ŒΩ) (a : Œ±) (q : ‚Ñö)
    {s : Set Œ≤} (hs : MeasurableSet s) :
    ‚à´ b in s, stieltjesOfMeasurableRat f hf.measurable (a, b) q ‚àÇ(ŒΩ a)
      = (Œ∫ a (s √óÀ¢ Iic (q : ‚Ñù))).toReal := by
  rw [setIntegral_congr_ae hs (g := fun b ‚Ü¶ f (a, b) q) ?_, hf.setIntegral a hs]
  filter_upwards [stieltjesOfMeasurableRat_ae_eq hf a q] with b hb using fun _ ‚Ü¶ hb

@[deprecated]
alias set_integral_stieltjesOfMeasurableRat_rat :=
  setIntegral_stieltjesOfMeasurableRat_rat -- deprecated on 2024-04-17

lemma set_lintegral_stieltjesOfMeasurableRat_rat [IsFiniteKernel Œ∫] (hf : IsRatCondKernelCDF f Œ∫ ŒΩ)
    (a : Œ±) (q : ‚Ñö) {s : Set Œ≤} (hs : MeasurableSet s) :
    ‚à´‚Åª b in s, ENNReal.ofReal (stieltjesOfMeasurableRat f hf.measurable (a, b) q) ‚àÇ(ŒΩ a)
      = Œ∫ a (s √óÀ¢ Iic (q : ‚Ñù)) := by
  rw [‚Üê ofReal_integral_eq_lintegral_ofReal]
  ¬∑ rw [setIntegral_stieltjesOfMeasurableRat_rat hf a q hs, ENNReal.ofReal_toReal]
    exact measure_ne_top _ _
  ¬∑ refine Integrable.restrict ?_
    rw [integrable_congr (stieltjesOfMeasurableRat_ae_eq hf a q)]
    exact hf.integrable a q
  ¬∑ exact ae_of_all _ (fun x ‚Ü¶ stieltjesOfMeasurableRat_nonneg _ _ _)

lemma set_lintegral_stieltjesOfMeasurableRat [IsFiniteKernel Œ∫] (hf : IsRatCondKernelCDF f Œ∫ ŒΩ)
    (a : Œ±) (x : ‚Ñù) {s : Set Œ≤} (hs : MeasurableSet s) :
    ‚à´‚Åª b in s, ENNReal.ofReal (stieltjesOfMeasurableRat f hf.measurable (a, b) x) ‚àÇ(ŒΩ a)
      = Œ∫ a (s √óÀ¢ Iic x) := by
  -- We have the result for `x : ‚Ñö` thanks to `set_lintegral_stieltjesOfMeasurableRat_rat`.
  -- We use a monotone convergence argument to extend it to the reals.
  by_cases hœÅ_zero : (ŒΩ a).restrict s = 0
  ¬∑ rw [hœÅ_zero, lintegral_zero_measure]
    have ‚ü®q, hq‚ü© := exists_rat_gt x
    suffices Œ∫ a (s √óÀ¢ Iic (q : ‚Ñù)) = 0 by
      symm
      refine measure_mono_null (fun p ‚Ü¶ ?_) this
      simp only [mem_prod, mem_Iic, and_imp]
      exact fun h1 h2 ‚Ü¶ ‚ü®h1, h2.trans hq.le‚ü©
    suffices (Œ∫ a (s √óÀ¢ Iic (q : ‚Ñù))).toReal = 0 by
      rw [ENNReal.toReal_eq_zero_iff] at this
      simpa [measure_ne_top] using this
    rw [‚Üê hf.setIntegral a hs q]
    simp [hœÅ_zero]
  have h : ‚à´‚Åª b in s, ENNReal.ofReal (stieltjesOfMeasurableRat f hf.measurable (a, b) x) ‚àÇ(ŒΩ a)
      = ‚à´‚Åª b in s, ‚®Ö r : { r' : ‚Ñö // x < r' },
        ENNReal.ofReal (stieltjesOfMeasurableRat f hf.measurable (a, b) r) ‚àÇ(ŒΩ a) := by
    congr with b : 1
    simp_rw [‚Üê measure_stieltjesOfMeasurableRat_Iic]
    rw [‚Üê measure_iInter_eq_iInf]
    ¬∑ congr with y : 1
      simp only [mem_Iic, mem_iInter, Subtype.forall]
      refine ‚ü®fun h a ha ‚Ü¶ h.trans ?_, fun h ‚Ü¶ ?_‚ü©
      ¬∑ exact mod_cast ha.le
      ¬∑ refine le_of_forall_lt_rat_imp_le fun q hq ‚Ü¶ h q ?_
        exact mod_cast hq
    ¬∑ exact fun _ ‚Ü¶ measurableSet_Iic
    ¬∑ refine Monotone.directed_ge fun r r' hrr' ‚Ü¶ Iic_subset_Iic.mpr ?_
      exact mod_cast hrr'
    ¬∑ obtain ‚ü®q, hq‚ü© := exists_rat_gt x
      exact ‚ü®‚ü®q, hq‚ü©, measure_ne_top _ _‚ü©
  have h_nonempty : Nonempty { r' : ‚Ñö // x < ‚Üër' } := by
    obtain ‚ü®r, hrx‚ü© := exists_rat_gt x
    exact ‚ü®‚ü®r, hrx‚ü©‚ü©
  rw [h, lintegral_iInf_directed_of_measurable hœÅ_zero fun q : { r' : ‚Ñö // x < ‚Üër' } ‚Ü¶ ?_]
  rotate_left
  ¬∑ intro b
    rw [set_lintegral_stieltjesOfMeasurableRat_rat hf a _ hs]
    exact measure_ne_top _ _
  ¬∑ refine Monotone.directed_ge fun i j hij b ‚Ü¶ ?_
    simp_rw [‚Üê measure_stieltjesOfMeasurableRat_Iic]
    refine measure_mono (Iic_subset_Iic.mpr ?_)
    exact mod_cast hij
  ¬∑ refine Measurable.ennreal_ofReal ?_
    exact (measurable_stieltjesOfMeasurableRat hf.measurable _).comp measurable_prod_mk_left
  simp_rw [set_lintegral_stieltjesOfMeasurableRat_rat hf _ _ hs]
  rw [‚Üê measure_iInter_eq_iInf]
  ¬∑ rw [‚Üê prod_iInter]
    congr with y
    simp only [mem_iInter, mem_Iic, Subtype.forall, Subtype.coe_mk]
    exact ‚ü®le_of_forall_lt_rat_imp_le, fun hyx q hq ‚Ü¶ hyx.trans hq.le‚ü©
  ¬∑ exact fun i ‚Ü¶ hs.prod measurableSet_Iic
  ¬∑ refine Monotone.directed_ge fun i j hij ‚Ü¶ ?_
    refine prod_subset_prod_iff.mpr (Or.inl ‚ü®subset_rfl, Iic_subset_Iic.mpr ?_‚ü©)
    exact mod_cast hij
  ¬∑ exact ‚ü®h_nonempty.some, measure_ne_top _ _‚ü©

lemma lintegral_stieltjesOfMeasurableRat [IsFiniteKernel Œ∫] (hf : IsRatCondKernelCDF f Œ∫ ŒΩ)
    (a : Œ±) (x : ‚Ñù) :
    ‚à´‚Åª b, ENNReal.ofReal (stieltjesOfMeasurableRat f hf.measurable (a, b) x) ‚àÇ(ŒΩ a)
      = Œ∫ a (univ √óÀ¢ Iic x) := by
  rw [‚Üê set_lintegral_univ, set_lintegral_stieltjesOfMeasurableRat hf _ _ MeasurableSet.univ]

lemma integrable_stieltjesOfMeasurableRat [IsFiniteKernel Œ∫] (hf : IsRatCondKernelCDF f Œ∫ ŒΩ)
    (a : Œ±) (x : ‚Ñù) :
    Integrable (fun b ‚Ü¶ stieltjesOfMeasurableRat f hf.measurable (a, b) x) (ŒΩ a) := by
  have : (fun b ‚Ü¶ stieltjesOfMeasurableRat f hf.measurable (a, b) x)
      = fun b ‚Ü¶ (ENNReal.ofReal (stieltjesOfMeasurableRat f hf.measurable (a, b) x)).toReal := by
    ext t
    rw [ENNReal.toReal_ofReal]
    exact stieltjesOfMeasurableRat_nonneg _ _ _
  rw [this]
  refine integrable_toReal_of_lintegral_ne_top ?_ ?_
  ¬∑ refine (Measurable.ennreal_ofReal ?_).aemeasurable
    exact (measurable_stieltjesOfMeasurableRat hf.measurable x).comp measurable_prod_mk_left
  ¬∑ rw [lintegral_stieltjesOfMeasurableRat hf]
    exact measure_ne_top _ _

lemma setIntegral_stieltjesOfMeasurableRat [IsFiniteKernel Œ∫] (hf : IsRatCondKernelCDF f Œ∫ ŒΩ)
    (a : Œ±) (x : ‚Ñù) {s : Set Œ≤} (hs : MeasurableSet s) :
    ‚à´ b in s, stieltjesOfMeasurableRat f hf.measurable (a, b) x ‚àÇ(ŒΩ a)
      = (Œ∫ a (s √óÀ¢ Iic x)).toReal := by
  rw [‚Üê ENNReal.ofReal_eq_ofReal_iff, ENNReal.ofReal_toReal]
  rotate_left
  ¬∑ exact measure_ne_top _ _
  ¬∑ exact setIntegral_nonneg hs (fun _ _ ‚Ü¶ stieltjesOfMeasurableRat_nonneg _ _ _)
  ¬∑ exact ENNReal.toReal_nonneg
  rw [ofReal_integral_eq_lintegral_ofReal, set_lintegral_stieltjesOfMeasurableRat hf _ _ hs]
  ¬∑ exact (integrable_stieltjesOfMeasurableRat hf _ _).restrict
  ¬∑ exact ae_of_all _ (fun _ ‚Ü¶ stieltjesOfMeasurableRat_nonneg _ _ _)

@[deprecated]
alias set_integral_stieltjesOfMeasurableRat :=
  setIntegral_stieltjesOfMeasurableRat -- deprecated on 2024-04-17

lemma integral_stieltjesOfMeasurableRat [IsFiniteKernel Œ∫] (hf : IsRatCondKernelCDF f Œ∫ ŒΩ)
    (a : Œ±) (x : ‚Ñù) :
    ‚à´ b, stieltjesOfMeasurableRat f hf.measurable (a, b) x ‚àÇ(ŒΩ a)
      = (Œ∫ a (univ √óÀ¢ Iic x)).toReal := by
  rw [‚Üê integral_univ, setIntegral_stieltjesOfMeasurableRat hf _ _ MeasurableSet.univ]

end stieltjesOfMeasurableRat

section isRatCondKernelCDFAux

variable {f : Œ± √ó Œ≤ ‚Üí ‚Ñö ‚Üí ‚Ñù}

/-- This property implies `IsRatCondKernelCDF`. The measurability, integrability and integral
conditions are the same, but the limit properties of `IsRatCondKernelCDF` are replaced by
limits of integrals. -/
structure IsRatCondKernelCDFAux (f : Œ± √ó Œ≤ ‚Üí ‚Ñö ‚Üí ‚Ñù) (Œ∫ : kernel Œ± (Œ≤ √ó ‚Ñù)) (ŒΩ : kernel Œ± Œ≤) :
    Prop :=
  measurable : Measurable f
  mono' (a : Œ±) {q r : ‚Ñö} (_hqr : q ‚â§ r) : ‚àÄ·µê c ‚àÇ(ŒΩ a), f (a, c) q ‚â§ f (a, c) r
  nonneg' (a : Œ±) (q : ‚Ñö) : ‚àÄ·µê c ‚àÇ(ŒΩ a), 0 ‚â§ f (a, c) q
  le_one' (a : Œ±) (q : ‚Ñö) : ‚àÄ·µê c ‚àÇ(ŒΩ a), f (a, c) q ‚â§ 1
  /- Same as `Tendsto (fun q : ‚Ñö ‚Ü¶ ‚à´ c, f (a, c) q ‚àÇ(ŒΩ a)) atBot (ùìù 0)` but slightly easier
  to prove in the current applications of this definition (some integral convergence lemmas
  currently apply only to `‚Ñï`, not `‚Ñö`) -/
  tendsto_integral_of_antitone (a : Œ±) (seq : ‚Ñï ‚Üí ‚Ñö) (_hs : Antitone seq)
    (_hs_tendsto : Tendsto seq atTop atBot) :
    Tendsto (fun m ‚Ü¶ ‚à´ c, f (a, c) (seq m) ‚àÇ(ŒΩ a)) atTop (ùìù 0)
  /- Same as `Tendsto (fun q : ‚Ñö ‚Ü¶ ‚à´ c, f (a, c) q ‚àÇ(ŒΩ a)) atTop (ùìù (ŒΩ a univ).toReal)` but
  slightly easier to prove in the current applications of this definition (some integral convergence
  lemmas currently apply only to `‚Ñï`, not `‚Ñö`) -/
  tendsto_integral_of_monotone (a : Œ±) (seq : ‚Ñï ‚Üí ‚Ñö) (_hs : Monotone seq)
    (_hs_tendsto : Tendsto seq atTop atTop) :
    Tendsto (fun m ‚Ü¶ ‚à´ c, f (a, c) (seq m) ‚àÇ(ŒΩ a)) atTop (ùìù (ŒΩ a univ).toReal)
  integrable (a : Œ±) (q : ‚Ñö) : Integrable (fun c ‚Ü¶ f (a, c) q) (ŒΩ a)
  setIntegral (a : Œ±) {A : Set Œ≤} (_hA : MeasurableSet A) (q : ‚Ñö) :
    ‚à´ c in A, f (a, c) q ‚àÇ(ŒΩ a) = (Œ∫ a (A √óÀ¢ Iic ‚Üëq)).toReal

lemma IsRatCondKernelCDFAux.measurable_right (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ) (a : Œ±) (q : ‚Ñö) :
    Measurable (fun t ‚Ü¶ f (a, t) q) := by
  let h := hf.measurable
  rw [measurable_pi_iff] at h
  exact (h q).comp measurable_prod_mk_left

lemma IsRatCondKernelCDFAux.mono (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ) (a : Œ±) :
    ‚àÄ·µê c ‚àÇ(ŒΩ a), Monotone (f (a, c)) := by
  unfold Monotone
  simp_rw [ae_all_iff]
  exact fun _ _ hqr ‚Ü¶ hf.mono' a hqr

lemma IsRatCondKernelCDFAux.nonneg (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ) (a : Œ±) :
    ‚àÄ·µê c ‚àÇ(ŒΩ a), ‚àÄ q, 0 ‚â§ f (a, c) q := ae_all_iff.mpr <| hf.nonneg' a

lemma IsRatCondKernelCDFAux.le_one (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ) (a : Œ±) :
    ‚àÄ·µê c ‚àÇ(ŒΩ a), ‚àÄ q, f (a, c) q ‚â§ 1 := ae_all_iff.mpr <| hf.le_one' a

lemma IsRatCondKernelCDFAux.tendsto_zero_of_antitone (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ)
    [IsFiniteKernel ŒΩ] (a : Œ±) (seq : ‚Ñï ‚Üí ‚Ñö) (hseq : Antitone seq)
    (hseq_tendsto : Tendsto seq atTop atBot) :
    ‚àÄ·µê c ‚àÇ(ŒΩ a), Tendsto (fun m ‚Ü¶ f (a, c) (seq m)) atTop (ùìù 0) := by
  refine tendsto_of_integral_tendsto_of_antitone ?_ (integrable_const _) ?_ ?_ ?_
  ¬∑ exact fun n ‚Ü¶ hf.integrable a (seq n)
  ¬∑ rw [integral_zero]
    exact hf.tendsto_integral_of_antitone a seq hseq hseq_tendsto
  ¬∑ filter_upwards [hf.mono a] with t ht using fun n m hnm ‚Ü¶ ht (hseq hnm)
  ¬∑ filter_upwards [hf.nonneg a] with c hc using fun i ‚Ü¶ hc (seq i)

lemma IsRatCondKernelCDFAux.tendsto_one_of_monotone (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ)
    [IsFiniteKernel ŒΩ] (a : Œ±) (seq : ‚Ñï ‚Üí ‚Ñö) (hseq : Monotone seq)
    (hseq_tendsto : Tendsto seq atTop atTop) :
    ‚àÄ·µê c ‚àÇ(ŒΩ a), Tendsto (fun m ‚Ü¶ f (a, c) (seq m)) atTop (ùìù 1) := by
  refine tendsto_of_integral_tendsto_of_monotone ?_ (integrable_const _) ?_ ?_ ?_
  ¬∑ exact fun n ‚Ü¶ hf.integrable a (seq n)
  ¬∑ rw [MeasureTheory.integral_const, smul_eq_mul, mul_one]
    exact hf.tendsto_integral_of_monotone a seq hseq hseq_tendsto
  ¬∑ filter_upwards [hf.mono a] with t ht using fun n m hnm ‚Ü¶ ht (hseq hnm)
  ¬∑ filter_upwards [hf.le_one a] with c hc using fun i ‚Ü¶ hc (seq i)

lemma IsRatCondKernelCDFAux.tendsto_atTop_one (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ) [IsFiniteKernel ŒΩ]
    (a : Œ±) :
    ‚àÄ·µê t ‚àÇ(ŒΩ a), Tendsto (f (a, t)) atTop (ùìù 1) := by
  suffices ‚àÄ·µê t ‚àÇ(ŒΩ a), Tendsto (fun (n : ‚Ñï) ‚Ü¶ f (a, t) n) atTop (ùìù 1) by
    filter_upwards [this, hf.mono a] with t ht h_mono
    rw [tendsto_iff_tendsto_subseq_of_monotone h_mono tendsto_natCast_atTop_atTop]
    exact ht
  filter_upwards [hf.tendsto_one_of_monotone a Nat.cast Nat.mono_cast tendsto_natCast_atTop_atTop]
    with x hx using hx

lemma IsRatCondKernelCDFAux.tendsto_atBot_zero (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ) [IsFiniteKernel ŒΩ]
    (a : Œ±) :
    ‚àÄ·µê t ‚àÇ(ŒΩ a), Tendsto (f (a, t)) atBot (ùìù 0) := by
  suffices ‚àÄ·µê t ‚àÇ(ŒΩ a), Tendsto (fun q : ‚Ñö ‚Ü¶ f (a, t) (-q)) atTop (ùìù 0) by
    filter_upwards [this] with t ht
    have h_eq_neg : f (a, t) = fun q : ‚Ñö ‚Ü¶ f (a, t) (- -q) := by
      simp_rw [neg_neg]
    rw [h_eq_neg]
    convert ht.comp tendsto_neg_atBot_atTop
    simp
  suffices ‚àÄ·µê t ‚àÇ(ŒΩ a), Tendsto (fun (n : ‚Ñï) ‚Ü¶ f (a, t) (-n)) atTop (ùìù 0) by
    filter_upwards [this, hf.mono a] with t ht h_mono
    have h_anti : Antitone (fun q ‚Ü¶ f (a, t) (-q)) := h_mono.comp_antitone monotone_id.neg
    exact (tendsto_iff_tendsto_subseq_of_antitone h_anti tendsto_natCast_atTop_atTop).mpr ht
  exact hf.tendsto_zero_of_antitone _ _ Nat.mono_cast.neg
    (tendsto_neg_atBot_iff.mpr tendsto_natCast_atTop_atTop)

lemma IsRatCondKernelCDFAux.bddBelow_range (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ) (a : Œ±) :
    ‚àÄ·µê t ‚àÇ(ŒΩ a), ‚àÄ q : ‚Ñö, BddBelow (range fun (r : Ioi q) ‚Ü¶ f (a, t) r) := by
  filter_upwards [hf.nonneg a] with c hc
  refine fun q ‚Ü¶ ‚ü®0, ?_‚ü©
  simp [mem_lowerBounds, hc]

lemma IsRatCondKernelCDFAux.integrable_iInf_rat_gt (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ)
    [IsFiniteKernel ŒΩ] (a : Œ±) (q : ‚Ñö) :
    Integrable (fun t ‚Ü¶ ‚®Ö r : Ioi q, f (a, t) r) (ŒΩ a) := by
  rw [‚Üê mem‚Ñíp_one_iff_integrable]
  refine ‚ü®(measurable_iInf fun i ‚Ü¶ hf.measurable_right a _).aestronglyMeasurable, ?_‚ü©
  refine (?_ : _ ‚â§ (ŒΩ a univ : ‚Ñù‚â•0‚àû)).trans_lt (measure_lt_top _ _)
  refine (snorm_le_of_ae_bound (C := 1) ?_).trans (by simp)
  filter_upwards [hf.bddBelow_range a, hf.nonneg a, hf.le_one a]
    with t hbdd_below h_nonneg h_le_one
  rw [Real.norm_eq_abs, abs_of_nonneg]
  ¬∑ refine ciInf_le_of_le ?_ ?_ ?_
    ¬∑ exact hbdd_below _
    ¬∑ exact ‚ü®q + 1, by simp‚ü©
    ¬∑ exact h_le_one _
  ¬∑ exact le_ciInf fun r ‚Ü¶ h_nonneg _

lemma _root_.MeasureTheory.Measure.iInf_rat_gt_prod_Iic {œÅ : Measure (Œ± √ó ‚Ñù)} [IsFiniteMeasure œÅ]
    {s : Set Œ±} (hs : MeasurableSet s) (t : ‚Ñö) :
    ‚®Ö r : { r' : ‚Ñö // t < r' }, œÅ (s √óÀ¢ Iic (r : ‚Ñù)) = œÅ (s √óÀ¢ Iic (t : ‚Ñù)) := by
  rw [‚Üê measure_iInter_eq_iInf]
  ¬∑ rw [‚Üê prod_iInter]
    congr with x : 1
    simp only [mem_iInter, mem_Iic, Subtype.forall, Subtype.coe_mk]
    refine ‚ü®fun h ‚Ü¶ ?_, fun h a hta ‚Ü¶ h.trans ?_‚ü©
    ¬∑ refine le_of_forall_lt_rat_imp_le fun q htq ‚Ü¶ h q ?_
      exact mod_cast htq
    ¬∑ exact mod_cast hta.le
  ¬∑ exact fun _ => hs.prod measurableSet_Iic
  ¬∑ refine Monotone.directed_ge fun r r' hrr' ‚Ü¶ prod_subset_prod_iff.mpr (Or.inl ‚ü®subset_rfl, ?_‚ü©)
    refine Iic_subset_Iic.mpr ?_
    exact mod_cast hrr'
  ¬∑ exact ‚ü®‚ü®t + 1, lt_add_one _‚ü©, measure_ne_top œÅ _‚ü©

lemma IsRatCondKernelCDFAux.setIntegral_iInf_rat_gt (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ)
    [IsFiniteKernel Œ∫] [IsFiniteKernel ŒΩ] (a : Œ±) (q : ‚Ñö) {A : Set Œ≤} (hA : MeasurableSet A) :
    ‚à´ t in A, ‚®Ö r : Ioi q, f (a, t) r ‚àÇ(ŒΩ a) = (Œ∫ a (A √óÀ¢ Iic (q : ‚Ñù))).toReal := by
  refine le_antisymm ?_ ?_
  ¬∑ have h : ‚àÄ r : Ioi q, ‚à´ t in A, ‚®Ö r' : Ioi q, f (a, t) r' ‚àÇ(ŒΩ a)
        ‚â§ (Œ∫ a (A √óÀ¢ Iic (r : ‚Ñù))).toReal := by
      intro r
      rw [‚Üê hf.setIntegral a hA]
      refine setIntegral_mono_ae ?_ ?_ ?_
      ¬∑ exact (hf.integrable_iInf_rat_gt _ _).integrableOn
      ¬∑ exact (hf.integrable _ _).integrableOn
      ¬∑ filter_upwards [hf.bddBelow_range a] with t ht using ciInf_le (ht _) r
    calc ‚à´ t in A, ‚®Ö r : Ioi q, f (a, t) r ‚àÇ(ŒΩ a)
      ‚â§ ‚®Ö r : Ioi q, (Œ∫ a (A √óÀ¢ Iic (r : ‚Ñù))).toReal := le_ciInf h
    _ = (Œ∫ a (A √óÀ¢ Iic (q : ‚Ñù))).toReal := by
        rw [‚Üê Measure.iInf_rat_gt_prod_Iic hA q]
        exact (ENNReal.toReal_iInf (fun r ‚Ü¶ measure_ne_top _ _)).symm
  ¬∑ rw [‚Üê hf.setIntegral a hA]
    refine setIntegral_mono_ae ?_ ?_ ?_
    ¬∑ exact (hf.integrable _ _).integrableOn
    ¬∑ exact (hf.integrable_iInf_rat_gt _ _).integrableOn
    ¬∑ filter_upwards [hf.mono a] with c h_mono using le_ciInf (fun r ‚Ü¶ h_mono (le_of_lt r.prop))

@[deprecated]
alias IsRatCondKernelCDFAux.set_integral_iInf_rat_gt :=
  IsRatCondKernelCDFAux.setIntegral_iInf_rat_gt -- deprecated on 2024-04-17

lemma IsRatCondKernelCDFAux.iInf_rat_gt_eq (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ) [IsFiniteKernel Œ∫]
    [IsFiniteKernel ŒΩ] (a : Œ±) :
    ‚àÄ·µê t ‚àÇ(ŒΩ a), ‚àÄ q : ‚Ñö, ‚®Ö r : Ioi q, f (a, t) r = f (a, t) q := by
  rw [ae_all_iff]
  refine fun q ‚Ü¶ ae_eq_of_forall_setIntegral_eq_of_sigmaFinite (Œº := ŒΩ a) ?_ ?_ ?_
  ¬∑ exact fun _ _ _ ‚Ü¶ (hf.integrable_iInf_rat_gt _ _).integrableOn
  ¬∑ exact fun _ _ _ ‚Ü¶ (hf.integrable a _).integrableOn
  ¬∑ intro s hs _
    rw [hf.setIntegral _ hs, hf.setIntegral_iInf_rat_gt _ _ hs]

lemma IsRatCondKernelCDFAux.isRatStieltjesPoint_ae (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ)
    [IsFiniteKernel Œ∫] [IsFiniteKernel ŒΩ] (a : Œ±) :
    ‚àÄ·µê t ‚àÇ(ŒΩ a), IsRatStieltjesPoint f (a, t) := by
  filter_upwards [hf.tendsto_atTop_one a, hf.tendsto_atBot_zero a,
    hf.iInf_rat_gt_eq a, hf.mono a] with t ht_top ht_bot ht_iInf h_mono
  exact ‚ü®h_mono, ht_top, ht_bot, ht_iInf‚ü©

lemma IsRatCondKernelCDFAux.isRatCondKernelCDF (hf : IsRatCondKernelCDFAux f Œ∫ ŒΩ) [IsFiniteKernel Œ∫]
    [IsFiniteKernel ŒΩ] :
    IsRatCondKernelCDF f Œ∫ ŒΩ where
  measurable := hf.measurable
  isRatStieltjesPoint_ae := hf.isRatStieltjesPoint_ae
  integrable := hf.integrable
  setIntegral := hf.setIntegral

end isRatCondKernelCDFAux

section IsCondKernelCDF

variable {f : Œ± √ó Œ≤ ‚Üí StieltjesFunction}

/-- A function `f : Œ± √ó Œ≤ ‚Üí StieltjesFunction` is called a conditional kernel CDF of `Œ∫` with
respect to `ŒΩ` if it is measurable, tends to to 0 at -‚àû and to 1 at +‚àû for all `p : Œ± √ó Œ≤`,
`fun b ‚Ü¶ f (a, b) x` is `(ŒΩ a)`-integrable for all `a : Œ±` and `x : ‚Ñù` and for all
measurable sets `s : Set Œ≤`, `‚à´ b in s, f (a, b) x ‚àÇ(ŒΩ a) = (Œ∫ a (s √óÀ¢ Iic x)).toReal`. -/
structure IsCondKernelCDF (f : Œ± √ó Œ≤ ‚Üí StieltjesFunction) (Œ∫ : kernel Œ± (Œ≤ √ó ‚Ñù)) (ŒΩ : kernel Œ± Œ≤) :
    Prop :=
  measurable (x : ‚Ñù) : Measurable fun p ‚Ü¶ f p x
  integrable (a : Œ±) (x : ‚Ñù) : Integrable (fun b ‚Ü¶ f (a, b) x) (ŒΩ a)
  tendsto_atTop_one (p : Œ± √ó Œ≤) : Tendsto (f p) atTop (ùìù 1)
  tendsto_atBot_zero (p : Œ± √ó Œ≤) : Tendsto (f p) atBot (ùìù 0)
  setIntegral (a : Œ±) {s : Set Œ≤} (_hs : MeasurableSet s) (x : ‚Ñù) :
    ‚à´ b in s, f (a, b) x ‚àÇ(ŒΩ a) = (Œ∫ a (s √óÀ¢ Iic x)).toReal

lemma IsCondKernelCDF.nonneg (hf : IsCondKernelCDF f Œ∫ ŒΩ) (p : Œ± √ó Œ≤) (x : ‚Ñù) : 0 ‚â§ f p x :=
  Monotone.le_of_tendsto (f p).mono (hf.tendsto_atBot_zero p) x

lemma IsCondKernelCDF.le_one (hf : IsCondKernelCDF f Œ∫ ŒΩ) (p : Œ± √ó Œ≤) (x : ‚Ñù) : f p x ‚â§ 1 :=
  Monotone.ge_of_tendsto (f p).mono (hf.tendsto_atTop_one p) x

lemma IsCondKernelCDF.integral
    {f : Œ± √ó Œ≤ ‚Üí StieltjesFunction} (hf : IsCondKernelCDF f Œ∫ ŒΩ) (a : Œ±) (x : ‚Ñù) :
    ‚à´ b, f (a, b) x ‚àÇ(ŒΩ a) = (Œ∫ a (univ √óÀ¢ Iic x)).toReal := by
  rw [‚Üê hf.setIntegral _ MeasurableSet.univ, Measure.restrict_univ]

lemma IsCondKernelCDF.set_lintegral [IsFiniteKernel Œ∫]
    {f : Œ± √ó Œ≤ ‚Üí StieltjesFunction} (hf : IsCondKernelCDF f Œ∫ ŒΩ)
    (a : Œ±) {s : Set Œ≤} (hs : MeasurableSet s) (x : ‚Ñù) :
    ‚à´‚Åª b in s, ENNReal.ofReal (f (a, b) x) ‚àÇ(ŒΩ a) = Œ∫ a (s √óÀ¢ Iic x) := by
  rw [‚Üê ofReal_integral_eq_lintegral_ofReal (hf.integrable a x).restrict
    (ae_of_all _ (fun _ ‚Ü¶ hf.nonneg _ _)), hf.setIntegral a hs x, ENNReal.ofReal_toReal]
  exact measure_ne_top _ _

lemma IsCondKernelCDF.lintegral [IsFiniteKernel Œ∫]
    {f : Œ± √ó Œ≤ ‚Üí StieltjesFunction} (hf : IsCondKernelCDF f Œ∫ ŒΩ) (a : Œ±) (x : ‚Ñù) :
    ‚à´‚Åª b, ENNReal.ofReal (f (a, b) x) ‚àÇ(ŒΩ a) = Œ∫ a (univ √óÀ¢ Iic x) := by
  rw [‚Üê hf.set_lintegral _ MeasurableSet.univ, Measure.restrict_univ]

lemma isCondKernelCDF_stieltjesOfMeasurableRat {f : Œ± √ó Œ≤ ‚Üí ‚Ñö ‚Üí ‚Ñù} (hf : IsRatCondKernelCDF f Œ∫ ŒΩ)
    [IsFiniteKernel Œ∫] :
    IsCondKernelCDF (stieltjesOfMeasurableRat f hf.measurable) Œ∫ ŒΩ where
  measurable := measurable_stieltjesOfMeasurableRat hf.measurable
  integrable := integrable_stieltjesOfMeasurableRat hf
  tendsto_atTop_one := tendsto_stieltjesOfMeasurableRat_atTop hf.measurable
  tendsto_atBot_zero := tendsto_stieltjesOfMeasurableRat_atBot hf.measurable
  setIntegral a _ hs x := setIntegral_stieltjesOfMeasurableRat hf a x hs

end IsCondKernelCDF

section ToKernel

variable {_ : MeasurableSpace Œ≤} {f : Œ± √ó Œ≤ ‚Üí StieltjesFunction}
  {Œ∫ : kernel Œ± (Œ≤ √ó ‚Ñù)} {ŒΩ : kernel Œ± Œ≤}

/-- A measurable function `Œ± ‚Üí StieltjesFunction` with limits 0 at -‚àû and 1 at +‚àû gives a measurable
function `Œ± ‚Üí Measure ‚Ñù` by taking `StieltjesFunction.measure` at each point. -/
lemma StieltjesFunction.measurable_measure {f : Œ± ‚Üí StieltjesFunction}
    (hf : ‚àÄ q, Measurable fun a ‚Ü¶ f a q)
    (hf_bot : ‚àÄ a, Tendsto (f a) atBot (ùìù 0))
    (hf_top : ‚àÄ a, Tendsto (f a) atTop (ùìù 1)) :
    Measurable fun a ‚Ü¶ (f a).measure := by
  refine Measure.measurable_measure.mpr fun s hs ‚Ü¶ ?_
  have : ‚àÄ a, IsProbabilityMeasure (f a).measure :=
    fun a ‚Ü¶ (f a).isProbabilityMeasure (hf_bot a) (hf_top a)
  refine MeasurableSpace.induction_on_inter
    (C := fun s ‚Ü¶ Measurable fun b ‚Ü¶ StieltjesFunction.measure (f b) s)
    (borel_eq_generateFrom_Iic ‚Ñù) isPiSystem_Iic ?_ ?_ ?_ ?_ hs
  ¬∑ simp only [measure_empty, measurable_const]
  ¬∑ rintro S ‚ü®u, rfl‚ü©
    simp_rw [StieltjesFunction.measure_Iic (f _) (hf_bot _), sub_zero]
    exact (hf _).ennreal_ofReal
  ¬∑ intro t ht ht_cd_meas
    have : (fun a ‚Ü¶ (f a).measure t·∂ú) = (fun a ‚Ü¶ (f a).measure univ) - fun a ‚Ü¶ (f a).measure t := by
      ext1 a
      rw [measure_compl ht, Pi.sub_apply]
      exact measure_ne_top _ _
    simp_rw [this, measure_univ]
    exact Measurable.sub measurable_const ht_cd_meas
  ¬∑ intro f hf_disj hf_meas hf_cd_meas
    simp_rw [measure_iUnion hf_disj hf_meas]
    exact Measurable.ennreal_tsum hf_cd_meas

/-- A function `f : Œ± √ó Œ≤ ‚Üí StieltjesFunction` with the property `IsCondKernelCDF f Œ∫ ŒΩ` gives a
Markov kernel from `Œ± √ó Œ≤` to `‚Ñù`, by taking for each `p : Œ± √ó Œ≤` the measure defined by `f p`. -/
noncomputable
def IsCondKernelCDF.toKernel (f : Œ± √ó Œ≤ ‚Üí StieltjesFunction) (hf : IsCondKernelCDF f Œ∫ ŒΩ) :
    kernel (Œ± √ó Œ≤) ‚Ñù where
  val p := (f p).measure
  property := StieltjesFunction.measurable_measure hf.measurable
    hf.tendsto_atBot_zero hf.tendsto_atTop_one

lemma IsCondKernelCDF.toKernel_apply {hf : IsCondKernelCDF f Œ∫ ŒΩ} (p : Œ± √ó Œ≤) :
    hf.toKernel f p = (f p).measure := rfl

instance instIsMarkovKernel_toKernel {hf : IsCondKernelCDF f Œ∫ ŒΩ} :
    IsMarkovKernel (hf.toKernel f) :=
  ‚ü®fun _ ‚Ü¶ (f _).isProbabilityMeasure (hf.tendsto_atBot_zero _) (hf.tendsto_atTop_one _)‚ü©

lemma IsCondKernelCDF.toKernel_Iic {hf : IsCondKernelCDF f Œ∫ ŒΩ} (p : Œ± √ó Œ≤) (x : ‚Ñù) :
    hf.toKernel f p (Iic x) = ENNReal.ofReal (f p x) := by
  rw [IsCondKernelCDF.toKernel_apply p, (f p).measure_Iic (hf.tendsto_atBot_zero p)]
  simp

end ToKernel

section

variable {f : Œ± √ó Œ≤ ‚Üí StieltjesFunction}

lemma set_lintegral_toKernel_Iic [IsFiniteKernel Œ∫] (hf : IsCondKernelCDF f Œ∫ ŒΩ)
    (a : Œ±) (x : ‚Ñù) {s : Set Œ≤} (hs : MeasurableSet s) :
    ‚à´‚Åª b in s, hf.toKernel f (a, b) (Iic x) ‚àÇ(ŒΩ a) = Œ∫ a (s √óÀ¢ Iic x) := by
  simp_rw [IsCondKernelCDF.toKernel_Iic]
  exact hf.set_lintegral _ hs _

lemma set_lintegral_toKernel_univ [IsFiniteKernel Œ∫] (hf : IsCondKernelCDF f Œ∫ ŒΩ)
    (a : Œ±) {s : Set Œ≤} (hs : MeasurableSet s) :
    ‚à´‚Åª b in s, hf.toKernel f (a, b) univ ‚àÇ(ŒΩ a) = Œ∫ a (s √óÀ¢ univ) := by
  rw [‚Üê Real.iUnion_Iic_rat, prod_iUnion]
  have h_dir : Directed (fun x y ‚Ü¶ x ‚äÜ y) fun q : ‚Ñö ‚Ü¶ Iic (q : ‚Ñù) := by
    refine Monotone.directed_le fun r r' hrr' ‚Ü¶ Iic_subset_Iic.mpr ?_
    exact mod_cast hrr'
  have h_dir_prod : Directed (fun x y ‚Ü¶ x ‚äÜ y) fun q : ‚Ñö ‚Ü¶ s √óÀ¢ Iic (q : ‚Ñù) := by
    refine Monotone.directed_le fun i j hij ‚Ü¶ ?_
    refine prod_subset_prod_iff.mpr (Or.inl ‚ü®subset_rfl, Iic_subset_Iic.mpr ?_‚ü©)
    exact mod_cast hij
  simp_rw [measure_iUnion_eq_iSup h_dir, measure_iUnion_eq_iSup h_dir_prod]
  rw [lintegral_iSup_directed]
  ¬∑ simp_rw [set_lintegral_toKernel_Iic hf _ _ hs]
  ¬∑ refine fun q ‚Ü¶ Measurable.aemeasurable ?_
    exact (kernel.measurable_coe _ measurableSet_Iic).comp measurable_prod_mk_left
  ¬∑ refine Monotone.directed_le fun i j hij t ‚Ü¶ measure_mono (Iic_subset_Iic.mpr ?_)
    exact mod_cast hij

lemma lintegral_toKernel_univ [IsFiniteKernel Œ∫] (hf : IsCondKernelCDF f Œ∫ ŒΩ) (a : Œ±) :
    ‚à´‚Åª b, hf.toKernel f (a, b) univ ‚àÇ(ŒΩ a) = Œ∫ a univ := by
  rw [‚Üê set_lintegral_univ, set_lintegral_toKernel_univ hf a MeasurableSet.univ, univ_prod_univ]

lemma set_lintegral_toKernel_prod [IsFiniteKernel Œ∫] (hf : IsCondKernelCDF f Œ∫ ŒΩ)
    (a : Œ±) {s : Set Œ≤} (hs : MeasurableSet s) {t : Set ‚Ñù} (ht : MeasurableSet t) :
    ‚à´‚Åª b in s, hf.toKernel f (a, b) t ‚àÇ(ŒΩ a) = Œ∫ a (s √óÀ¢ t) := by
  -- `set_lintegral_toKernel_Iic` gives the result for `t = Iic x`. These sets form a
  -- œÄ-system that generates the Borel œÉ-algebra, hence we can get the same equality for any
  -- measurable set `t`.
  apply MeasurableSpace.induction_on_inter (borel_eq_generateFrom_Iic ‚Ñù) isPiSystem_Iic _ _ _ _ ht
  ¬∑ simp only [measure_empty, lintegral_const, zero_mul, prod_empty]
  ¬∑ rintro t ‚ü®q, rfl‚ü©
    exact set_lintegral_toKernel_Iic hf a _ hs
  ¬∑ intro t ht ht_lintegral
    calc ‚à´‚Åª b in s, hf.toKernel f (a, b) t·∂ú ‚àÇ(ŒΩ a)
      = ‚à´‚Åª b in s, hf.toKernel f (a, b) univ - hf.toKernel f (a, b) t ‚àÇ(ŒΩ a) := by
          congr with x; rw [measure_compl ht (measure_ne_top (hf.toKernel f (a, x)) _)]
    _ = ‚à´‚Åª b in s, hf.toKernel f (a, b) univ ‚àÇ(ŒΩ a)
          - ‚à´‚Åª b in s, hf.toKernel f (a, b) t ‚àÇ(ŒΩ a) := by
        rw [lintegral_sub]
        ¬∑ exact (kernel.measurable_coe (hf.toKernel f) ht).comp measurable_prod_mk_left
        ¬∑ rw [ht_lintegral]
          exact measure_ne_top _ _
        ¬∑ exact eventually_of_forall fun a ‚Ü¶ measure_mono (subset_univ _)
    _ = Œ∫ a (s √óÀ¢ univ) - Œ∫ a (s √óÀ¢ t) := by
        rw [set_lintegral_toKernel_univ hf a hs, ht_lintegral]
    _ = Œ∫ a (s √óÀ¢ t·∂ú) := by
        rw [‚Üê measure_diff _ (hs.prod ht) (measure_ne_top _ _)]
        ¬∑ rw [prod_diff_prod, compl_eq_univ_diff]
          simp only [diff_self, empty_prod, union_empty]
        ¬∑ rw [prod_subset_prod_iff]
          exact Or.inl ‚ü®subset_rfl, subset_univ t‚ü©
  ¬∑ intro f hf_disj hf_meas hf_eq
    simp_rw [measure_iUnion hf_disj hf_meas]
    rw [lintegral_tsum, prod_iUnion, measure_iUnion]
    ¬∑ simp_rw [hf_eq]
    ¬∑ intro i j hij
      rw [Function.onFun, Set.disjoint_prod]
      exact Or.inr (hf_disj hij)
    ¬∑ exact fun i ‚Ü¶ MeasurableSet.prod hs (hf_meas i)
    ¬∑ exact fun i ‚Ü¶
        ((kernel.measurable_coe _ (hf_meas i)).comp measurable_prod_mk_left).aemeasurable.restrict

lemma lintegral_toKernel_mem [IsFiniteKernel Œ∫] (hf : IsCondKernelCDF f Œ∫ ŒΩ)
    (a : Œ±) {s : Set (Œ≤ √ó ‚Ñù)} (hs : MeasurableSet s) :
    ‚à´‚Åª b, hf.toKernel f (a, b) {y | (b, y) ‚àà s} ‚àÇ(ŒΩ a) = Œ∫ a s := by
  -- `set_lintegral_toKernel_prod` gives the result for sets of the form `t‚ÇÅ √ó t‚ÇÇ`. These
  -- sets form a œÄ-system that generates the product œÉ-algebra, hence we can get the same equality
  -- for any measurable set `s`.
  apply MeasurableSpace.induction_on_inter generateFrom_prod.symm isPiSystem_prod _ _ _ _ hs
  ¬∑ simp only [mem_empty_iff_false, setOf_false, measure_empty, lintegral_const,
      zero_mul]
  ¬∑ rintro _ ‚ü®t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, rfl‚ü©
    simp only [mem_setOf_eq] at ht‚ÇÅ ht‚ÇÇ
    have h_prod_eq_snd : ‚àÄ a ‚àà t‚ÇÅ, {x : ‚Ñù | (a, x) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} = t‚ÇÇ := by
      intro a ha
      simp only [ha, prod_mk_mem_set_prod_eq, true_and_iff, setOf_mem_eq]
    rw [‚Üê lintegral_add_compl _ ht‚ÇÅ]
    have h_eq1 : ‚à´‚Åª x in t‚ÇÅ, hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} ‚àÇ(ŒΩ a)
        = ‚à´‚Åª x in t‚ÇÅ, hf.toKernel f (a, x) t‚ÇÇ ‚àÇ(ŒΩ a) := by
      refine set_lintegral_congr_fun ht‚ÇÅ (eventually_of_forall fun a ha ‚Ü¶ ?_)
      rw [h_prod_eq_snd a ha]
    have h_eq2 :
        ‚à´‚Åª x in t‚ÇÅ·∂ú, hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} ‚àÇ(ŒΩ a) = 0 := by
      suffices h_eq_zero :
          ‚àÄ x ‚àà t‚ÇÅ·∂ú, hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} = 0 by
        rw [set_lintegral_congr_fun ht‚ÇÅ.compl (eventually_of_forall h_eq_zero)]
        simp only [lintegral_const, zero_mul]
      intro a hat‚ÇÅ
      rw [mem_compl_iff] at hat‚ÇÅ
      simp only [hat‚ÇÅ, prod_mk_mem_set_prod_eq, false_and_iff, setOf_false, measure_empty]
    rw [h_eq1, h_eq2, add_zero]
    exact set_lintegral_toKernel_prod hf a ht‚ÇÅ ht‚ÇÇ
  ¬∑ intro t ht ht_eq
    calc ‚à´‚Åª b, hf.toKernel f (a, b) {y : ‚Ñù | (b, y) ‚àà t·∂ú} ‚àÇ(ŒΩ a)
      = ‚à´‚Åª b, hf.toKernel f (a, b) {y : ‚Ñù | (b, y) ‚àà t}·∂ú ‚àÇ(ŒΩ a) := rfl
    _ = ‚à´‚Åª b, hf.toKernel f (a, b) univ
          - hf.toKernel f (a, b) {y : ‚Ñù | (b, y) ‚àà t} ‚àÇ(ŒΩ a) := by
        congr with x : 1
        exact measure_compl (measurable_prod_mk_left ht)
          (measure_ne_top (hf.toKernel f (a, x)) _)
    _ = ‚à´‚Åª x, hf.toKernel f (a, x) univ ‚àÇ(ŒΩ a) -
          ‚à´‚Åª x, hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t} ‚àÇ(ŒΩ a) := by
        have h_le : (fun x ‚Ü¶ hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t})
              ‚â§·µê[ŒΩ a] fun x ‚Ü¶ hf.toKernel f (a, x) univ :=
          eventually_of_forall fun _ ‚Ü¶ measure_mono (subset_univ _)
        rw [lintegral_sub _ _ h_le]
        ¬∑ exact kernel.measurable_kernel_prod_mk_left' ht a
        refine ((lintegral_mono_ae h_le).trans_lt ?_).ne
        rw [lintegral_toKernel_univ hf]
        exact measure_lt_top _ univ
    _ = Œ∫ a univ - Œ∫ a t := by rw [ht_eq, lintegral_toKernel_univ hf]
    _ = Œ∫ a t·∂ú := (measure_compl ht (measure_ne_top _ _)).symm
  ¬∑ intro f' hf_disj hf_meas hf_eq
    have h_eq : ‚àÄ a, {x | (a, x) ‚àà ‚ãÉ i, f' i} = ‚ãÉ i, {x | (a, x) ‚àà f' i} := by
      intro a; ext x; simp only [mem_iUnion, mem_setOf_eq]
    simp_rw [h_eq]
    have h_disj : ‚àÄ a, Pairwise (Disjoint on fun i ‚Ü¶ {x | (a, x) ‚àà f' i}) := by
      intro a i j hij
      have h_disj := hf_disj hij
      rw [Function.onFun, disjoint_iff_inter_eq_empty] at h_disj ‚ä¢
      ext1 x
      simp only [mem_inter_iff, mem_setOf_eq, mem_empty_iff_false, iff_false_iff]
      intro h_mem_both
      suffices (a, x) ‚àà ‚àÖ by rwa [mem_empty_iff_false] at this
      rwa [‚Üê h_disj, mem_inter_iff]
    calc ‚à´‚Åª b, hf.toKernel f (a, b) (‚ãÉ i, {y | (b, y) ‚àà f' i}) ‚àÇ(ŒΩ a)
      = ‚à´‚Åª b, ‚àë' i, hf.toKernel f (a, b) {y | (b, y) ‚àà f' i} ‚àÇ(ŒΩ a) := by
          congr with x : 1
          rw [measure_iUnion (h_disj x) fun i ‚Ü¶ measurable_prod_mk_left (hf_meas i)]
    _ = ‚àë' i, ‚à´‚Åª b, hf.toKernel f (a, b) {y | (b, y) ‚àà f' i} ‚àÇ(ŒΩ a) :=
          lintegral_tsum fun i ‚Ü¶ (kernel.measurable_kernel_prod_mk_left' (hf_meas i) a).aemeasurable
    _ = ‚àë' i, Œ∫ a (f' i) := by simp_rw [hf_eq]
    _ = Œ∫ a (iUnion f') := (measure_iUnion hf_disj hf_meas).symm

lemma compProd_toKernel [IsFiniteKernel Œ∫] [IsSFiniteKernel ŒΩ] (hf : IsCondKernelCDF f Œ∫ ŒΩ) :
    ŒΩ ‚äó‚Çñ hf.toKernel f = Œ∫ := by
  ext a s hs
  rw [kernel.compProd_apply _ _ _ hs, lintegral_toKernel_mem hf a hs]

end

end ProbabilityTheory
