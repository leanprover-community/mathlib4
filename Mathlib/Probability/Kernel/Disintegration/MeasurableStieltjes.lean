/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.Data.Complex.Abs
import Mathlib.MeasureTheory.Constructions.Polish
import Mathlib.MeasureTheory.Measure.GiryMonad
import Mathlib.MeasureTheory.Measure.Stieltjes
import Mathlib.Analysis.Normed.Order.Lattice
import Mathlib.MeasureTheory.Function.StronglyMeasurable.Basic

/-!
# Measurable parametric Stieltjes functions

We provide tools to build a measurable function `Œ± ‚Üí StieltjesFunction` with limits 0 at -‚àû and 1 at
+‚àû for all `a : Œ±` from a measurable function `f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù`. These measurable parametric Stieltjes
functions are cumulative distribution functions (CDF) of transition kernels.
The reason for going through `‚Ñö` instead of defining directly a Stieltjes function is that since
`‚Ñö` is countable, building a measurable function is much easier.

This construction will be possible if `f a : ‚Ñö ‚Üí ‚Ñù` satisfies a package of properties for all `a`:
monotonicity, limits at +-‚àû at a continuity property. We define `IsRatStieltjesPoint f a` to state
that this is the case at `a` and define the property `IsRatCDF f` that `f` is measurable and
`IsRatStieltjesPoint f a` for all `a`.
The function `Œ± ‚Üí StieltjesFunction` obtained by extending `f` by continuity from the right is then
called `IsRatCDF.stieltjesFunction`.

In applications, we will often only have `IsRatStieltjesPoint f a` almost surely with respect to
some measure. In order to turn that almost everywhere property into an everywhere property we define
`toRatCDF (f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù) := fun a q ‚Ü¶ if IsRatStieltjesPoint f a then f a q else defaultRatCDF q`,
which satisfies the property `IsRatCDF (toRatCDF f)`.

Finally, we define `stieltjesOfMeasurableRat`, composition of `toRatCDF` and
`IsRatCDF.stieltjesFunction`.

## Main definitions

* `stieltjesOfMeasurableRat`: turn a measurable function `f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù` into a measurable
  function `Œ± ‚Üí StieltjesFunction`.

-/

open MeasureTheory Set Filter TopologicalSpace

open scoped NNReal ENNReal MeasureTheory Topology

namespace ProbabilityTheory

variable {Œ± Œ≤ Œπ : Type*} [MeasurableSpace Œ±]

section IsRatCDF

variable {f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù}

/-- `a : Œ±` is a Stieltjes point for `f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù` if `f a` is monotone with limit 0 at -‚àû
and 1 at +‚àû and satisfies a continuity property. -/
structure IsRatStieltjesPoint (f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù) (a : Œ±) : Prop where
  mono : Monotone (f a)
  tendsto_atTop_one : Tendsto (f a) atTop (ùìù 1)
  tendsto_atBot_zero : Tendsto (f a) atBot (ùìù 0)
  iInf_rat_gt_eq : ‚àÄ t : ‚Ñö, ‚®Ö r : Ioi t, f a r = f a t

lemma isRatStieltjesPoint_unit_prod_iff (f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù) (a : Œ±) :
    IsRatStieltjesPoint (fun p : Unit √ó Œ± ‚Ü¶ f p.2) ((), a)
      ‚Üî IsRatStieltjesPoint f a := by
  constructor <;>
    exact fun h ‚Ü¶ ‚ü®h.mono, h.tendsto_atTop_one, h.tendsto_atBot_zero, h.iInf_rat_gt_eq‚ü©

lemma measurableSet_isRatStieltjesPoint (hf : Measurable f) :
    MeasurableSet {a | IsRatStieltjesPoint f a} := by
  have h1 : MeasurableSet {a | Monotone (f a)} := by
    change MeasurableSet {a | ‚àÄ q r (_ : q ‚â§ r), f a q ‚â§ f a r}
    simp_rw [Set.setOf_forall]
    refine MeasurableSet.iInter (fun q ‚Ü¶ ?_)
    refine MeasurableSet.iInter (fun r ‚Ü¶ ?_)
    refine MeasurableSet.iInter (fun _ ‚Ü¶ ?_)
    exact measurableSet_le hf.eval hf.eval
  have h2 : MeasurableSet {a | Tendsto (f a) atTop (ùìù 1)} :=
    measurableSet_tendsto _ (fun q ‚Ü¶ hf.eval)
  have h3 : MeasurableSet {a | Tendsto (f a) atBot (ùìù 0)} :=
    measurableSet_tendsto _ (fun q ‚Ü¶ hf.eval)
  have h4 : MeasurableSet {a | ‚àÄ t : ‚Ñö, ‚®Ö r : Ioi t, f a r = f a t} := by
    rw [Set.setOf_forall]
    refine MeasurableSet.iInter (fun q ‚Ü¶ ?_)
    exact measurableSet_eq_fun (measurable_iInf fun _ ‚Ü¶ hf.eval) hf.eval
  suffices {a | IsRatStieltjesPoint f a}
      = ({a | Monotone (f a)} ‚à© {a | Tendsto (f a) atTop (ùìù 1)} ‚à© {a | Tendsto (f a) atBot (ùìù 0)}
        ‚à© {a | ‚àÄ t : ‚Ñö, ‚®Ö r : Ioi t, f a r = f a t}) by
    rw [this]
    exact (((h1.inter h2).inter h3).inter h4)
  ext a
  simp only [mem_setOf_eq, mem_inter_iff]
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ exact ‚ü®‚ü®‚ü®h.mono, h.tendsto_atTop_one‚ü©, h.tendsto_atBot_zero‚ü©, h.iInf_rat_gt_eq‚ü©
  ¬∑ exact ‚ü®h.1.1.1, h.1.1.2, h.1.2, h.2‚ü©

lemma IsRatStieltjesPoint.ite {f g : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù} {a : Œ±} (p : Œ± ‚Üí Prop) [DecidablePred p]
    (hf : p a ‚Üí IsRatStieltjesPoint f a) (hg : ¬¨ p a ‚Üí IsRatStieltjesPoint g a):
    IsRatStieltjesPoint (fun a ‚Ü¶ if p a then f a else g a) a where
  mono := by split_ifs with h; exacts [(hf h).mono, (hg h).mono]
  tendsto_atTop_one := by
    split_ifs with h; exacts [(hf h).tendsto_atTop_one, (hg h).tendsto_atTop_one]
  tendsto_atBot_zero := by
    split_ifs with h; exacts [(hf h).tendsto_atBot_zero, (hg h).tendsto_atBot_zero]
  iInf_rat_gt_eq := by split_ifs with h; exacts [(hf h).iInf_rat_gt_eq, (hg h).iInf_rat_gt_eq]


/-- A function `f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù` is a (kernel) rational cumulative distribution function if it is
measurable in the first argument and if `f a` satisfies a list of properties for all `a : Œ±`:
monotonicity between 0 at -‚àû and 1 at +‚àû and a form of continuity.

A function with these properties can be extended to a measurable function `Œ± ‚Üí StieltjesFunction`.
See `ProbabilityTheory.IsRatCDF.stieltjesFunction`.
-/
structure IsRatCDF (f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù) : Prop where
  isRatStieltjesPoint : ‚àÄ a, IsRatStieltjesPoint f a
  measurable : Measurable f

lemma IsRatCDF.nonneg {f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù} (hf : IsRatCDF f) (a : Œ±) (q : ‚Ñö) : 0 ‚â§ f a q :=
  Monotone.le_of_tendsto (hf.isRatStieltjesPoint a).mono
    (hf.isRatStieltjesPoint a).tendsto_atBot_zero q

lemma IsRatCDF.le_one {f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù} (hf : IsRatCDF f) (a : Œ±) (q : ‚Ñö) : f a q ‚â§ 1 :=
  Monotone.ge_of_tendsto (hf.isRatStieltjesPoint a).mono
    (hf.isRatStieltjesPoint a).tendsto_atTop_one q

lemma IsRatCDF.tendsto_atTop_one {f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù} (hf : IsRatCDF f) (a : Œ±) :
    Tendsto (f a) atTop (ùìù 1) := (hf.isRatStieltjesPoint a).tendsto_atTop_one

lemma IsRatCDF.tendsto_atBot_zero {f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù} (hf : IsRatCDF f) (a : Œ±) :
    Tendsto (f a) atBot (ùìù 0) := (hf.isRatStieltjesPoint a).tendsto_atBot_zero

lemma IsRatCDF.iInf_rat_gt_eq {f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù} (hf : IsRatCDF f) (a : Œ±) (q : ‚Ñö) :
    ‚®Ö r : Ioi q, f a r = f a q := (hf.isRatStieltjesPoint a).iInf_rat_gt_eq q

end IsRatCDF

section DefaultRatCDF

/-- A function with the property `IsRatCDF`.
Used in a piecewise construction to convert a function which only satisfies the properties
defining `IsRatCDF` on some set into a true `IsRatCDF`. -/
def defaultRatCDF (q : ‚Ñö) := if q < 0 then (0 : ‚Ñù) else 1

lemma monotone_defaultRatCDF : Monotone defaultRatCDF := by
  unfold defaultRatCDF
  intro x y hxy
  dsimp only
  split_ifs with h_1 h_2 h_2
  exacts [le_rfl, zero_le_one, absurd (hxy.trans_lt h_2) h_1, le_rfl]

lemma defaultRatCDF_nonneg (q : ‚Ñö) : 0 ‚â§ defaultRatCDF q := by
  unfold defaultRatCDF
  split_ifs
  exacts [le_rfl, zero_le_one]

lemma defaultRatCDF_le_one (q : ‚Ñö) : defaultRatCDF q ‚â§ 1 := by
  unfold defaultRatCDF
  split_ifs <;> simp

lemma tendsto_defaultRatCDF_atTop : Tendsto defaultRatCDF atTop (ùìù 1) := by
  refine (tendsto_congr' ?_).mp tendsto_const_nhds
  rw [EventuallyEq, eventually_atTop]
  exact ‚ü®0, fun q hq => (if_neg (not_lt.mpr hq)).symm‚ü©

lemma tendsto_defaultRatCDF_atBot : Tendsto defaultRatCDF atBot (ùìù 0) := by
  refine (tendsto_congr' ?_).mp tendsto_const_nhds
  rw [EventuallyEq, eventually_atBot]
  refine ‚ü®-1, fun q hq => (if_pos (hq.trans_lt ?_)).symm‚ü©
  linarith

lemma iInf_rat_gt_defaultRatCDF (t : ‚Ñö) :
    ‚®Ö r : Ioi t, defaultRatCDF r = defaultRatCDF t := by
  simp only [defaultRatCDF]
  have h_bdd : BddBelow (range fun r : ‚Ü•(Ioi t) ‚Ü¶ ite ((r : ‚Ñö) < 0) (0 : ‚Ñù) 1) := by
    refine ‚ü®0, fun x hx ‚Ü¶ ?_‚ü©
    obtain ‚ü®y, rfl‚ü© := mem_range.mpr hx
    dsimp only
    split_ifs
    exacts [le_rfl, zero_le_one]
  split_ifs with h
  ¬∑ refine le_antisymm ?_ (le_ciInf fun x ‚Ü¶ ?_)
    ¬∑ obtain ‚ü®q, htq, hq_neg‚ü© : ‚àÉ q, t < q ‚àß q < 0 := ‚ü®t / 2, by linarith, by linarith‚ü©
      refine (ciInf_le h_bdd ‚ü®q, htq‚ü©).trans ?_
      rw [if_pos]
      rwa [Subtype.coe_mk]
    ¬∑ split_ifs
      exacts [le_rfl, zero_le_one]
  ¬∑ refine le_antisymm ?_ ?_
    ¬∑ refine (ciInf_le h_bdd ‚ü®t + 1, lt_add_one t‚ü©).trans ?_
      split_ifs
      exacts [zero_le_one, le_rfl]
    ¬∑ refine le_ciInf fun x ‚Ü¶ ?_
      rw [if_neg]
      rw [not_lt] at h ‚ä¢
      exact h.trans (mem_Ioi.mp x.prop).le

lemma isRatStieltjesPoint_defaultRatCDF (a : Œ±) :
    IsRatStieltjesPoint (fun (_ : Œ±) ‚Ü¶ defaultRatCDF) a where
  mono := monotone_defaultRatCDF
  tendsto_atTop_one := tendsto_defaultRatCDF_atTop
  tendsto_atBot_zero := tendsto_defaultRatCDF_atBot
  iInf_rat_gt_eq := iInf_rat_gt_defaultRatCDF

lemma IsRatCDF_defaultRatCDF (Œ± : Type*) [MeasurableSpace Œ±] :
    IsRatCDF (fun (_ : Œ±) (q : ‚Ñö) ‚Ü¶ defaultRatCDF q) where
  isRatStieltjesPoint := isRatStieltjesPoint_defaultRatCDF
  measurable := measurable_const

end DefaultRatCDF

section ToRatCDF

variable {f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù}

open Classical in
/-- Turn a function `f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù` into another with the property `IsRatCDF`.
Mainly useful when `f` satisfies the property `IsRatStieltjesPoint f a` almost everywhere. -/
noncomputable
def toRatCDF (f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù) : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù := fun a ‚Ü¶
  if IsRatStieltjesPoint f a then f a else defaultRatCDF

lemma toRatCDF_of_isRatStieltjesPoint {a : Œ±} (h : IsRatStieltjesPoint f a) (q : ‚Ñö) :
    toRatCDF f a q = f a q := by
  rw [toRatCDF, if_pos h]

lemma measurable_toRatCDF (hf : Measurable f) : Measurable (toRatCDF f) :=
  Measurable.ite (measurableSet_isRatStieltjesPoint hf) hf measurable_const

lemma IsRatCDF_toRatCDF (hf : Measurable f) :
    IsRatCDF (toRatCDF f) where
  isRatStieltjesPoint a := by
    classical
    exact IsRatStieltjesPoint.ite (IsRatStieltjesPoint f) id
      (fun _ ‚Ü¶ isRatStieltjesPoint_defaultRatCDF a)
  measurable := measurable_toRatCDF hf

lemma toRatCDF_unit_prod (a : Œ±) :
    toRatCDF (fun (p : Unit √ó Œ±) ‚Ü¶ f p.2) ((), a) = toRatCDF f a := by
  unfold toRatCDF
  rw [isRatStieltjesPoint_unit_prod_iff]

end ToRatCDF

section IsRatCDF.stieltjesFunction

variable {f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù} (hf : IsRatCDF f)

/-- Auxiliary definition for `IsRatCDF.stieltjesFunction`: turn `f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù` into a function
`Œ± ‚Üí ‚Ñù ‚Üí ‚Ñù` by assigning to `f a x` the infimum of `f a q` over `q : ‚Ñö` with `x < q`. -/
noncomputable irreducible_def IsRatCDF.stieltjesFunctionAux (f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù) : Œ± ‚Üí ‚Ñù ‚Üí ‚Ñù :=
  fun a x ‚Ü¶ ‚®Ö q : { q' : ‚Ñö // x < q' }, f a q

lemma IsRatCDF.stieltjesFunctionAux_def' (f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù) (a : Œ±) :
    IsRatCDF.stieltjesFunctionAux f a = fun (t : ‚Ñù) ‚Ü¶ ‚®Ö r : { r' : ‚Ñö // t < r' }, f a r := by
  ext t; exact IsRatCDF.stieltjesFunctionAux_def f a t

lemma IsRatCDF.stieltjesFunctionAux_eq (a : Œ±) (r : ‚Ñö) :
    IsRatCDF.stieltjesFunctionAux f a r = f a r := by
  rw [‚Üê hf.iInf_rat_gt_eq a r, IsRatCDF.stieltjesFunctionAux]
  refine Equiv.iInf_congr ?_ ?_
  ¬∑ exact
      { toFun := fun t ‚Ü¶ ‚ü®t.1, mod_cast t.2‚ü©
        invFun := fun t ‚Ü¶ ‚ü®t.1, mod_cast t.2‚ü©
        left_inv := fun t ‚Ü¶ by simp only [Subtype.coe_eta]
        right_inv := fun t ‚Ü¶ by simp only [Subtype.coe_eta] }
  ¬∑ intro t
    simp only [Equiv.coe_fn_mk, Subtype.coe_mk]

lemma IsRatCDF.stieltjesFunctionAux_unit_prod (a : Œ±) :
    IsRatCDF.stieltjesFunctionAux (fun (p : Unit √ó Œ±) ‚Ü¶ f p.2) ((), a) =
  IsRatCDF.stieltjesFunctionAux f a := by simp_rw [IsRatCDF.stieltjesFunctionAux_def']

lemma IsRatCDF.stieltjesFunctionAux_nonneg (a : Œ±) (r : ‚Ñù) :
    0 ‚â§ IsRatCDF.stieltjesFunctionAux f a r := by
  have : Nonempty { r' : ‚Ñö // r < ‚Üër' } := by
    obtain ‚ü®r, hrx‚ü© := exists_rat_gt r
    exact ‚ü®‚ü®r, hrx‚ü©‚ü©
  rw [IsRatCDF.stieltjesFunctionAux_def]
  exact le_ciInf fun r' ‚Ü¶ hf.nonneg a _

lemma IsRatCDF.monotone_stieltjesFunctionAux (a : Œ±) :
    Monotone (IsRatCDF.stieltjesFunctionAux f a) := by
  intro x y hxy
  have : Nonempty { r' : ‚Ñö // y < ‚Üër' } := by
    obtain ‚ü®r, hrx‚ü© := exists_rat_gt y
    exact ‚ü®‚ü®r, hrx‚ü©‚ü©
  simp_rw [IsRatCDF.stieltjesFunctionAux_def]
  refine le_ciInf fun r ‚Ü¶ (ciInf_le ?_ ?_).trans_eq ?_
  ¬∑ refine ‚ü®0, fun z ‚Ü¶ ?_‚ü©; rintro ‚ü®u, rfl‚ü©; exact hf.nonneg a _
  ¬∑ exact ‚ü®r.1, hxy.trans_lt r.prop‚ü©
  ¬∑ rfl

lemma IsRatCDF.continuousWithinAt_stieltjesFunctionAux_Ici (a : Œ±) (x : ‚Ñù) :
    ContinuousWithinAt (IsRatCDF.stieltjesFunctionAux f a) (Ici x) x := by
  rw [‚Üê continuousWithinAt_Ioi_iff_Ici]
  convert Monotone.tendsto_nhdsWithin_Ioi (monotone_stieltjesFunctionAux hf a) x
  rw [sInf_image']
  have h' : ‚®Ö r : Ioi x, stieltjesFunctionAux f a r
      = ‚®Ö r : { r' : ‚Ñö // x < r' }, stieltjesFunctionAux f a r := by
    refine Real.iInf_Ioi_eq_iInf_rat_gt x ?_ (monotone_stieltjesFunctionAux hf a)
    refine ‚ü®0, fun z ‚Ü¶ ?_‚ü©
    rintro ‚ü®u, -, rfl‚ü©
    exact stieltjesFunctionAux_nonneg hf a u
  have h'' :
    ‚®Ö r : { r' : ‚Ñö // x < r' }, stieltjesFunctionAux f a r =
      ‚®Ö r : { r' : ‚Ñö // x < r' }, f a r := by
    congr with r
    exact stieltjesFunctionAux_eq hf a r
  rw [h', h'', ContinuousWithinAt]
  congr!
  rw [stieltjesFunctionAux_def]

/-- Extend a function `f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù` with property `IsRatCDF` from `‚Ñö` to `‚Ñù`, to a function
`Œ± ‚Üí StieltjesFunction`. -/
noncomputable def IsRatCDF.stieltjesFunction (a : Œ±) : StieltjesFunction where
  toFun := stieltjesFunctionAux f a
  mono' := monotone_stieltjesFunctionAux hf a
  right_continuous' x := continuousWithinAt_stieltjesFunctionAux_Ici hf a x

lemma IsRatCDF.stieltjesFunction_eq (a : Œ±) (r : ‚Ñö) : hf.stieltjesFunction a r = f a r :=
  stieltjesFunctionAux_eq hf a r

lemma IsRatCDF.stieltjesFunction_nonneg (a : Œ±) (r : ‚Ñù) : 0 ‚â§ hf.stieltjesFunction a r :=
  stieltjesFunctionAux_nonneg hf a r

lemma IsRatCDF.stieltjesFunction_le_one (a : Œ±) (x : ‚Ñù) : hf.stieltjesFunction a x ‚â§ 1 := by
  obtain ‚ü®r, hrx‚ü© := exists_rat_gt x
  rw [‚Üê StieltjesFunction.iInf_rat_gt_eq]
  simp_rw [IsRatCDF.stieltjesFunction_eq]
  refine ciInf_le_of_le ?_ ?_ (hf.le_one _ _)
  ¬∑ refine ‚ü®0, fun z ‚Ü¶ ?_‚ü©; rintro ‚ü®u, rfl‚ü©; exact hf.nonneg a _
  ¬∑ exact ‚ü®r, hrx‚ü©

lemma IsRatCDF.tendsto_stieltjesFunction_atBot (a : Œ±) :
    Tendsto (hf.stieltjesFunction a) atBot (ùìù 0) := by
  have h_exists : ‚àÄ x : ‚Ñù, ‚àÉ q : ‚Ñö, x < q ‚àß ‚Üëq < x + 1 := fun x ‚Ü¶ exists_rat_btwn (lt_add_one x)
  let qs : ‚Ñù ‚Üí ‚Ñö := fun x ‚Ü¶ (h_exists x).choose
  have hqs_tendsto : Tendsto qs atBot atBot := by
    rw [tendsto_atBot_atBot]
    refine fun q ‚Ü¶ ‚ü®q - 1, fun y hy ‚Ü¶ ?_‚ü©
    have h_le : ‚Üë(qs y) ‚â§ (q : ‚Ñù) - 1 + 1 :=
      (h_exists y).choose_spec.2.le.trans (add_le_add hy le_rfl)
    rw [sub_add_cancel] at h_le
    exact mod_cast h_le
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds
    ((hf.tendsto_atBot_zero a).comp hqs_tendsto) (stieltjesFunction_nonneg hf a) fun x ‚Ü¶ ?_
  rw [Function.comp_apply, ‚Üê stieltjesFunction_eq hf]
  exact (hf.stieltjesFunction a).mono (h_exists x).choose_spec.1.le

lemma IsRatCDF.tendsto_stieltjesFunction_atTop (a : Œ±) :
    Tendsto (hf.stieltjesFunction a) atTop (ùìù 1) := by
  have h_exists : ‚àÄ x : ‚Ñù, ‚àÉ q : ‚Ñö, x - 1 < q ‚àß ‚Üëq < x := fun x ‚Ü¶ exists_rat_btwn (sub_one_lt x)
  let qs : ‚Ñù ‚Üí ‚Ñö := fun x ‚Ü¶ (h_exists x).choose
  have hqs_tendsto : Tendsto qs atTop atTop := by
    rw [tendsto_atTop_atTop]
    refine fun q ‚Ü¶ ‚ü®q + 1, fun y hy ‚Ü¶ ?_‚ü©
    have h_le : y - 1 ‚â§ qs y := (h_exists y).choose_spec.1.le
    rw [sub_le_iff_le_add] at h_le
    exact_mod_cast le_of_add_le_add_right (hy.trans h_le)
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le ((hf.tendsto_atTop_one a).comp hqs_tendsto)
      tendsto_const_nhds ?_ (stieltjesFunction_le_one hf a)
  intro x
  rw [Function.comp_apply, ‚Üê stieltjesFunction_eq hf]
  exact (hf.stieltjesFunction a).mono (le_of_lt (h_exists x).choose_spec.2)

lemma IsRatCDF.measurable_stieltjesFunction (x : ‚Ñù) :
    Measurable fun a ‚Ü¶ hf.stieltjesFunction a x := by
  have : (fun a ‚Ü¶ hf.stieltjesFunction a x) = fun a ‚Ü¶ ‚®Ö r : { r' : ‚Ñö // x < r' }, f a ‚Üër := by
    ext1 a
    rw [‚Üê StieltjesFunction.iInf_rat_gt_eq]
    congr with q
    rw [stieltjesFunction_eq]
  rw [this]
  exact measurable_iInf (fun q ‚Ü¶ hf.measurable.eval)

lemma IsRatCDF.stronglyMeasurable_stieltjesFunction (x : ‚Ñù) :
    StronglyMeasurable fun a ‚Ü¶ hf.stieltjesFunction a x :=
  (measurable_stieltjesFunction hf x).stronglyMeasurable

section Measure

lemma IsRatCDF.measure_stieltjesFunction_Iic (a : Œ±) (x : ‚Ñù) :
    (hf.stieltjesFunction a).measure (Iic x) = ENNReal.ofReal (hf.stieltjesFunction a x) := by
  rw [‚Üê sub_zero (hf.stieltjesFunction a x)]
  exact (hf.stieltjesFunction a).measure_Iic (tendsto_stieltjesFunction_atBot hf a) _

lemma IsRatCDF.measure_stieltjesFunction_univ (a : Œ±) :
    (hf.stieltjesFunction a).measure univ = 1 := by
  rw [‚Üê ENNReal.ofReal_one, ‚Üê sub_zero (1 : ‚Ñù)]
  exact StieltjesFunction.measure_univ _ (tendsto_stieltjesFunction_atBot hf a)
    (tendsto_stieltjesFunction_atTop hf a)

instance IsRatCDF.instIsProbabilityMeasure_stieltjesFunction (a : Œ±) :
    IsProbabilityMeasure (hf.stieltjesFunction a).measure :=
  ‚ü®measure_stieltjesFunction_univ hf a‚ü©

lemma IsRatCDF.measurable_measure_stieltjesFunction :
    Measurable fun a ‚Ü¶ (hf.stieltjesFunction a).measure := by
  rw [Measure.measurable_measure]
  refine fun s hs ‚Ü¶ MeasurableSpace.induction_on_inter
    (C := fun s ‚Ü¶ Measurable fun b ‚Ü¶ StieltjesFunction.measure (hf.stieltjesFunction b) s)
    (borel_eq_generateFrom_Iic ‚Ñù) isPiSystem_Iic ?_ ?_ ?_ ?_ hs
  ¬∑ simp only [measure_empty, measurable_const]
  ¬∑ rintro S ‚ü®u, rfl‚ü©
    simp_rw [measure_stieltjesFunction_Iic hf _ u]
    exact (measurable_stieltjesFunction hf u).ennreal_ofReal
  ¬∑ intro t ht ht_cd_meas
    have : (fun a ‚Ü¶ (hf.stieltjesFunction a).measure t·∂ú) =
        (fun a ‚Ü¶ (hf.stieltjesFunction a).measure univ)
          - fun a ‚Ü¶ (hf.stieltjesFunction a).measure t := by
      ext1 a
      rw [measure_compl ht (measure_ne_top (hf.stieltjesFunction a).measure _), Pi.sub_apply]
    simp_rw [this, measure_stieltjesFunction_univ hf]
    exact Measurable.sub measurable_const ht_cd_meas
  ¬∑ intro f hf_disj hf_meas hf_cd_meas
    simp_rw [measure_iUnion hf_disj hf_meas]
    exact Measurable.ennreal_tsum hf_cd_meas

end Measure

end IsRatCDF.stieltjesFunction

section stieltjesOfMeasurableRat

variable {f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù}

/-- Turn a measurable function `f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù` into a measurable function `Œ± ‚Üí StieltjesFunction`.
Composition of `toRatCDF` and `IsRatCDF.stieltjesFunction`. -/
noncomputable
def stieltjesOfMeasurableRat (f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù) (hf : Measurable f) : Œ± ‚Üí StieltjesFunction :=
  (IsRatCDF_toRatCDF hf).stieltjesFunction

lemma stieltjesOfMeasurableRat_eq (hf : Measurable f) (a : Œ±) (r : ‚Ñö) :
    stieltjesOfMeasurableRat f hf a r = toRatCDF f a r := IsRatCDF.stieltjesFunction_eq _ a r

lemma stieltjesOfMeasurableRat_unit_prod (hf : Measurable f) (a : Œ±) :
    stieltjesOfMeasurableRat (fun (p : Unit √ó Œ±) ‚Ü¶ f p.2) (hf.comp measurable_snd) ((), a)
      = stieltjesOfMeasurableRat f hf a := by
  simp_rw [stieltjesOfMeasurableRat,IsRatCDF.stieltjesFunction,
    ‚Üê IsRatCDF.stieltjesFunctionAux_unit_prod a]
  congr with x
  congr 1 with p : 1
  cases p with
  | mk _ b => rw [‚Üê toRatCDF_unit_prod b]

lemma stieltjesOfMeasurableRat_nonneg (hf : Measurable f) (a : Œ±) (r : ‚Ñù) :
    0 ‚â§ stieltjesOfMeasurableRat f hf a r := IsRatCDF.stieltjesFunction_nonneg _ a r

lemma stieltjesOfMeasurableRat_le_one (hf : Measurable f) (a : Œ±) (x : ‚Ñù) :
    stieltjesOfMeasurableRat f hf a x ‚â§ 1 := IsRatCDF.stieltjesFunction_le_one _ a x

lemma tendsto_stieltjesOfMeasurableRat_atBot (hf : Measurable f) (a : Œ±) :
    Tendsto (stieltjesOfMeasurableRat f hf a) atBot (ùìù 0) :=
  IsRatCDF.tendsto_stieltjesFunction_atBot _ a

lemma tendsto_stieltjesOfMeasurableRat_atTop (hf : Measurable f) (a : Œ±) :
    Tendsto (stieltjesOfMeasurableRat f hf a) atTop (ùìù 1) :=
  IsRatCDF.tendsto_stieltjesFunction_atTop _ a

lemma measurable_stieltjesOfMeasurableRat (hf : Measurable f) (x : ‚Ñù) :
    Measurable fun a ‚Ü¶ stieltjesOfMeasurableRat f hf a x :=
  IsRatCDF.measurable_stieltjesFunction _ x

lemma stronglyMeasurable_stieltjesOfMeasurableRat (hf : Measurable f) (x : ‚Ñù) :
    StronglyMeasurable fun a ‚Ü¶ stieltjesOfMeasurableRat f hf a x :=
  IsRatCDF.stronglyMeasurable_stieltjesFunction _ x

section Measure

lemma measure_stieltjesOfMeasurableRat_Iic (hf : Measurable f) (a : Œ±) (x : ‚Ñù) :
    (stieltjesOfMeasurableRat f hf a).measure (Iic x)
      = ENNReal.ofReal (stieltjesOfMeasurableRat f hf a x) :=
  IsRatCDF.measure_stieltjesFunction_Iic _ _ _

lemma measure_stieltjesOfMeasurableRat_univ (hf : Measurable f) (a : Œ±) :
    (stieltjesOfMeasurableRat f hf a).measure univ = 1 :=
  IsRatCDF.measure_stieltjesFunction_univ _ _

instance instIsProbabilityMeasure_stieltjesOfMeasurableRat
    (hf : Measurable f) (a : Œ±) :
    IsProbabilityMeasure (stieltjesOfMeasurableRat f hf a).measure :=
  IsRatCDF.instIsProbabilityMeasure_stieltjesFunction _ _

lemma measurable_measure_stieltjesOfMeasurableRat (hf : Measurable f) :
    Measurable fun a ‚Ü¶ (stieltjesOfMeasurableRat f hf a).measure :=
  IsRatCDF.measurable_measure_stieltjesFunction _

end Measure

end stieltjesOfMeasurableRat
