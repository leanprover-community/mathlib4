/-
Copyright (c) 2023 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.Probability.Kernel.CondCdf

/-!
# Cumulative distribution function of a real probability measure

The cumulative distribution function (cdf) of a probability measure over `‚Ñù` is a monotone, right
continuous function with limit 0 at -‚àû and 1 at +‚àû, such that `cdf Œº x = Œº (Iic x)` for all `x : ‚Ñù`.
Two probability measures are equal if and only if they have the same cdf.

## Main definitions

* `ProbabilityTheory.cdf Œº`: cumulative distribution function of `Œº : Measure ‚Ñù`, defined as the
  conditional cdf (`ProbabilityTheory.condCdf`) of the product measure
  `(Measure.dirac Unit.unit).prod Œº` evaluated at `Unit.unit`.

The definition could be replaced by the more elementary `cdf Œº x = (Œº (Iic x)).toReal`, but using
`condCdf` gives us access to its API, from which most properties of the cdf follow directly.

## Main statements

* `ProbabilityTheory.ofReal_cdf`: for a probability measure `Œº` and `x : ‚Ñù`,
  `ENNReal.ofReal (cdf Œº x) = Œº (Iic x)`.
* `MeasureTheory.Measure.ext_of_cdf`: two probability measures are equal if and only if they have
  the same cdf.

## TODO

The definition could be extended to a finite measure by rescaling `condCdf`, but it would be nice
to have more structure on Stieltjes functions first. Right now, if `f` is a Stieltjes function,
`2 ‚Ä¢ f` makes no sense. We could define Stieltjes functions as a submodule.

The definition could be extended to `‚Ñù‚Åø`, either by extending the definition of `condCdf`, or by
using another construction here.
-/

open MeasureTheory Set Filter

open scoped Topology

namespace ProbabilityTheory

/-- Cumulative distribution function of a real measure. The definition currently makes sense only
for probability measures. In that case, it satisfies `cdf Œº x = (Œº (Iic x)).toReal` (see
`ProbabilityTheory.cdf_eq_toReal`). -/
noncomputable
def cdf (Œº : Measure ‚Ñù) : StieltjesFunction :=
  condCdf ((Measure.dirac Unit.unit).prod Œº) Unit.unit

section ExplicitMeasureArg
variable (Œº : Measure ‚Ñù)

/-- The cdf is non-negative. -/
lemma cdf_nonneg (x : ‚Ñù) : 0 ‚â§ cdf Œº x := condCdf_nonneg _ _ _

/-- The cdf is lower or equal to 1. -/
lemma cdf_le_one (x : ‚Ñù) : cdf Œº x ‚â§ 1 := condCdf_le_one _ _ _

/-- The cdf is monotone. -/
lemma monotone_cdf : Monotone (cdf Œº) := (condCdf _ _).mono

/-- The cdf tends to 0 at -‚àû. -/
lemma tendsto_cdf_atBot : Tendsto (cdf Œº) atBot (ùìù 0) := tendsto_condCdf_atBot _ _

/-- The cdf tends to 1 at +‚àû. -/
lemma tendsto_cdf_atTop : Tendsto (cdf Œº) atTop (ùìù 1) := tendsto_condCdf_atTop _ _

lemma ofReal_cdf [IsProbabilityMeasure Œº] (x : ‚Ñù) : ENNReal.ofReal (cdf Œº x) = Œº (Iic x) := by
  have h := lintegral_condCdf ((Measure.dirac Unit.unit).prod Œº) x
  simpa only [MeasureTheory.Measure.fst_prod, Measure.prod_prod, measure_univ, one_mul,
    lintegral_dirac] using h

lemma cdf_eq_toReal [IsProbabilityMeasure Œº] (x : ‚Ñù) : cdf Œº x = (Œº (Iic x)).toReal := by
  rw [‚Üê ofReal_cdf Œº x, ENNReal.toReal_ofReal (cdf_nonneg Œº x)]

instance instIsProbabilityMeasurecdf : IsProbabilityMeasure (cdf Œº).measure := by
  constructor
  simp only [StieltjesFunction.measure_univ _ (tendsto_cdf_atBot Œº) (tendsto_cdf_atTop Œº), sub_zero,
    ENNReal.ofReal_one]

/-- The measure associated to the cdf of a probability measure is the same probability measure. -/
lemma measure_cdf [IsProbabilityMeasure Œº] : (cdf Œº).measure = Œº := by
  refine Measure.ext_of_Iic (cdf Œº).measure Œº (fun a ‚Ü¶ ?_)
  rw [StieltjesFunction.measure_Iic _ (tendsto_cdf_atBot Œº), sub_zero, ofReal_cdf]

end ExplicitMeasureArg

lemma cdf_measure_stieltjesFunction (f : StieltjesFunction) (hf0 : Tendsto f atBot (ùìù 0))
    (hf1 : Tendsto f atTop (ùìù 1)) :
    cdf f.measure = f := by
  refine (cdf f.measure).eq_of_measure_of_tendsto_atBot f ?_ (tendsto_cdf_atBot _) hf0
  have h_prob : IsProbabilityMeasure f.measure :=
    ‚ü®by rw [f.measure_univ hf0 hf1, sub_zero, ENNReal.ofReal_one]‚ü©
  exact measure_cdf f.measure

end ProbabilityTheory

open ProbabilityTheory

/-- If two real probability distributions have the same cdf, they are equal. -/
lemma MeasureTheory.Measure.eq_of_cdf (Œº ŒΩ : Measure ‚Ñù) [IsProbabilityMeasure Œº]
    [IsProbabilityMeasure ŒΩ] (h : cdf Œº = cdf ŒΩ) : Œº = ŒΩ := by
  rw [‚Üê measure_cdf Œº, ‚Üê measure_cdf ŒΩ, h]

@[simp] lemma MeasureTheory.Measure.cdf_eq_iff (Œº ŒΩ : Measure ‚Ñù) [IsProbabilityMeasure Œº]
    [IsProbabilityMeasure ŒΩ] :
    cdf Œº = cdf ŒΩ ‚Üî Œº = ŒΩ :=
‚ü®MeasureTheory.Measure.eq_of_cdf Œº ŒΩ, fun h ‚Ü¶ by rw [h]‚ü©
