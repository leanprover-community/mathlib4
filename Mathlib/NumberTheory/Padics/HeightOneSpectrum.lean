/-
Copyright (c) 2025 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.Algebra.CharP.Algebra
import Mathlib.NumberTheory.Padics.PadicIntegers
import Mathlib.RingTheory.DedekindDomain.AdicValuation
import Mathlib.RingTheory.Int.Basic
import Mathlib.Topology.Algebra.Valued.NormedValued
import Mathlib.Topology.Algebra.WithZeroMulInt

/-!
# The height one spectrum of `‚Ñ§`

## Main results
- `Int.heightOneSpectrumEquiv`: The height one spectrum of `‚Ñ§` is in bijection with primes in `‚Ñï`.
- `Padic.ofAdicCompletion`: The canonical map from the completion of `‚Ñö` at a finite place
  corresponding to `p : ‚Ñï` to `‚Ñö_[p]`.
- `Padic.isHomeomorph_ofAdicCompletion`: The map above is a homeomorphism.
- `Padic.comap_ofAdicCompletion_subring`: The map above maps `ùí™` onto `‚Ñ§_[p]`.

-/

open IsDedekindDomain HeightOneSpectrum

/-- The height one spectrum of `‚Ñ§` is in bijection with primes in `‚Ñï`. -/
@[simps]
noncomputable
def Int.heightOneSpectrumEquiv : HeightOneSpectrum ‚Ñ§ ‚âÉ { p : ‚Ñï // p.Prime } where
  toFun p := ‚ü®(Submodule.IsPrincipal.generator p.asIdeal).natAbs, by
    rw [‚Üê Int.prime_iff_natAbs_prime, ‚Üê Ideal.span_singleton_prime, Ideal.span_singleton_generator]
    ¬∑ infer_instance
    ¬∑ rw [ne_eq, ‚Üê Submodule.IsPrincipal.eq_bot_iff_generator_eq_zero]
      exact p.3‚ü©
  invFun n := ‚ü®Ideal.span {(n : ‚Ñ§)}, by
    rw [Ideal.span_singleton_prime (by exact_mod_cast n.2.ne_zero), ‚Üê Nat.prime_iff_prime_int]
    exact n.2, by simpa using n.2.ne_zero‚ü©
  left_inv p := by
    ext1
    simp only [span_natAbs, Ideal.span_singleton_generator]
  right_inv n := by
    ext
    simpa only [Ideal.span_singleton_eq_span_singleton, Int.associated_iff_natAbs] using
      Ideal.span_singleton_generator (Ideal.span {(n : ‚Ñ§)})

/-- The maximal ideal (`span {p}`) associated to a prime `p : ‚Ñï`. -/
@[simps! asIdeal]
noncomputable
def Nat.toHeightOneSpectrum (p : ‚Ñï) [Fact p.Prime] : HeightOneSpectrum ‚Ñ§ :=
  Int.heightOneSpectrumEquiv.symm ‚ü®p, Fact.out‚ü©

lemma Nat.intValuation_toHeightOneSpectrum (p : ‚Ñï) [Fact p.Prime] {n : ‚Ñ§} (hn : n ‚â† 0) :
    p.toHeightOneSpectrum.intValuation n = Multiplicative.ofAdd (-padicValInt p n : ‚Ñ§) := by
  classical
  rw [intValuation_apply, intValuationDef_if_neg _ hn,
    count_associates_factors_eq (by simpa) inferInstance p.toHeightOneSpectrum.3,
    Nat.toHeightOneSpectrum_asIdeal,
    count_span_normalizedFactors_eq hn (by rw [‚Üê Nat.prime_iff_prime_int]; exact Fact.out),
    padicValInt.of_ne_one_ne_zero ‚ÄπFact p.Prime‚Ä∫.out.ne_one hn]
  congr 4
  apply ENat.coe_inj.mp
  rw [‚Üê UniqueFactorizationMonoid.emultiplicity_eq_count_normalizedFactors _ hn,
    FiniteMultiplicity.emultiplicity_eq_multiplicity]
  ¬∑ exact padicValRat.finite_int_prime_iff.mpr hn
  ¬∑ rw [UniqueFactorizationMonoid.irreducible_iff_prime, ‚Üê Nat.prime_iff_prime_int]; exact Fact.out

lemma Nat.valuation_toHeightOneSpectrum (p : ‚Ñï) [Fact p.Prime] {r : ‚Ñö} (hr : r ‚â† 0) :
    p.toHeightOneSpectrum.valuation ‚Ñö r = Multiplicative.ofAdd (-padicValRat p r) := by
  trans p.toHeightOneSpectrum.valuation ‚Ñö (algebraMap ‚Ñ§ ‚Ñö r.num / algebraMap ‚Ñ§ ‚Ñö r.den)
  ¬∑ simp [Rat.num_div_den]
  rw [map_div‚ÇÄ, valuation_of_algebraMap, valuation_of_algebraMap,
    intValuation_toHeightOneSpectrum, intValuation_toHeightOneSpectrum, ‚Üê WithZero.coe_div,
    ‚Üê ofAdd_sub, padicValRat_def, padicValInt, padicValInt, Int.natAbs_cast]
  ¬∑ ring_nf
  ¬∑ simp
  ¬∑ simpa

/-- The canonical map from the abstract completion of `‚Ñö` at `p` to `‚Ñö_[p]`.
This is a homeomorphism, see `Padic.isHomeomorph_ofAdicCompletion`. -/
noncomputable
def Padic.ofAdicCompletion (p : ‚Ñï) [Fact p.Prime] :
    p.toHeightOneSpectrum.adicCompletion ‚Ñö ‚Üí+* ‚Ñö_[p] := by
  letI := p.toHeightOneSpectrum.adicValued (K := ‚Ñö)
  refine UniformSpace.Completion.extensionHom (Rat.castHom _) ?_
  apply continuous_of_continuousAt_zero
  rw [ContinuousAt, map_zero, (Valued.hasBasis_nhds_zero _ _).tendsto_iff Metric.nhds_basis_ball]
  intro Œµ hŒµ
  obtain ‚ü®k, hk‚ü© := PadicInt.exists_pow_neg_lt p hŒµ
  refine ‚ü®WithZero.unitsWithZeroEquiv.symm (Multiplicative.ofAdd (-k)), trivial, fun x hx ‚Ü¶ ?_‚ü©
  obtain ‚ü®x, rfl‚ü© := (WithVal.equiv _).symm.surjective x
  simp only [eq_ratCast, Metric.mem_ball, dist_zero_right, map_ratCast, padicNormE.eq_padicNorm]
  refine lt_of_le_of_lt ?_ hk
  rw [padicNorm]
  split_ifs with h
  ¬∑ simp
  rw [Set.mem_setOf, WithVal.apply_equiv, WithZero.coe_unitsWithZeroEquiv_symm,
    Nat.valuation_toHeightOneSpectrum _ h, WithZero.coe_lt_coe,
      Multiplicative.ofAdd_lt, neg_lt_neg_iff] at hx
  simp only [Rat.cast_inv, Rat.cast_zpow, Rat.cast_natCast, zpow_natCast]
  gcongr
  exact_mod_cast ‚ÄπFact p.Prime‚Ä∫.1.one_le

@[fun_prop]
lemma Padic.continuous_ofAdicCompletion (p : ‚Ñï) [Fact p.Prime] :
    Continuous (Padic.ofAdicCompletion p) :=
  letI := p.toHeightOneSpectrum.adicValued (K := ‚Ñö)
  UniformSpace.Completion.continuous_extension

open Filter in
open WithZeroTopology in
lemma Padic.valuation_ofAdicCompletionofAdicCompletion (p : ‚Ñï) [Fact p.Prime] (x) :
    ‚ÄñPadic.ofAdicCompletion p x‚Äñ = WithZeroMulInt.toNNReal
      (Nat.cast_ne_zero.mpr ‚ÄπFact p.Prime‚Ä∫.1.ne_zero) (Valued.v x) := by
  letI := p.toHeightOneSpectrum.adicValued (K := ‚Ñö)
  have H : IsDenseEmbedding (Rat.cast (K := p.toHeightOneSpectrum.adicCompletion ‚Ñö)) := by
    convert UniformSpace.Completion.isDenseEmbedding_coe (Œ± := ‚Ñö)
    ext
    exact (eq_ratCast UniformSpace.Completion.coeRingHom _).symm
  refine H.dense.induction ?_ ?_ x
  ¬∑ rintro _ ‚ü®x, rfl‚ü©
    simp only [map_ratCast, padicNormE.eq_padicNorm, valuedAdicCompletion_def]
    rw [‚Üê eq_ratCast UniformSpace.Completion.coeRingHom x]
    simp only [padicNorm, WithZeroMulInt.toNNReal, WithVal, UniformSpace.Completion.coeRingHom,
      RingHom.coe_mk, MonoidHom.coe_mk, OneHom.coe_mk, Valued.extension_extends, adicValued_apply,
      MonoidWithZeroHom.coe_mk, ZeroHom.coe_mk, map_eq_zero]
    split_ifs with h
    ¬∑ simp
    ¬∑ simp only [Rat.cast_zpow, Rat.cast_natCast, NNReal.coe_zpow, NNReal.coe_natCast]
      congr 1
      apply Multiplicative.ofAdd.injective
      apply WithZero.coe_inj.mp
      simp only [WithZero.coe_inv, ofAdd_toAdd, WithZero.coe_unzero,
        ‚Üê Nat.valuation_toHeightOneSpectrum _ h, adicValued_apply]
  ¬∑ apply isClosed_eq
    ¬∑ fun_prop
    ¬∑ refine continuous_subtype_val.comp ?_
      refine (WithZeroMulInt.continuous_toNNReal ?_).comp Valued.continuous_extension
      exact_mod_cast ‚ÄπFact p.Prime‚Ä∫.1.one_lt

lemma Padic.isHomeomorph_ofAdicCompletion (p : ‚Ñï) [Fact p.Prime] :
    IsHomeomorph (Padic.ofAdicCompletion p) := by
  letI := p.toHeightOneSpectrum.adicValued (K := ‚Ñö)
  have := algebraRat.charZero (adicCompletion ‚Ñö p.toHeightOneSpectrum)
  letI h : (Valued.v (R := p.toHeightOneSpectrum.adicCompletion ‚Ñö)).RankOne :=
  { hom := WithZeroMulInt.toNNReal (Nat.cast_ne_zero.mpr ‚ÄπFact p.Prime‚Ä∫.1.ne_zero)
    strictMono' := WithZeroMulInt.toNNReal_strictMono (by simpa using ‚ÄπFact p.Prime‚Ä∫.1.one_lt)
    nontrivial' :=
    ‚ü®UniformSpace.Completion.coeRingHom (Œ± := ‚Ñö) p,
    by simpa using ‚ÄπFact p.Prime‚Ä∫.1.ne_zero, by
      simp only [UniformSpace.Completion.coeRingHom,
        RingHom.coe_mk, MonoidHom.coe_mk, OneHom.coe_mk, valuedAdicCompletion_def,
        Valued.extension_extends]
      show p.toHeightOneSpectrum.valuation ‚Ñö (p : ‚Ñö) ‚â† 1
      rw [p.valuation_toHeightOneSpectrum (by exact_mod_cast ‚ÄπFact p.Prime‚Ä∫.1.ne_zero)]
      simp only [padicValRat.of_nat, padicValNat_self, Nat.cast_one, Int.reduceNeg, ‚Üê
        WithZero.coe_one, ne_eq, WithZero.coe_inj]
      rw [‚Üê Multiplicative.toAdd.injective.eq_iff]
      simp‚ü© }
  letI := Valued.toNormedField (p.toHeightOneSpectrum.adicCompletion ‚Ñö) _
  have : Isometry (Padic.ofAdicCompletion p) := by
    apply AddMonoidHomClass.isometry_of_norm
    exact fun _ ‚Ü¶ Padic.valuation_ofAdicCompletionofAdicCompletion _ _
  refine (this.isEmbedding.toHomeomorphOfSurjective ?_).isHomeomorph
  rw [‚Üê Set.range_eq_univ, ‚Üê Set.univ_subset_iff, ‚Üê (Padic.denseRange_ratCast p).closure_eq,
    this.isClosedEmbedding.isClosed_range.closure_subset_iff]
  rintro _ ‚ü®x, rfl‚ü©
  exact ‚ü®x, by simp‚ü©

lemma Padic.comap_ofAdicCompletion_subring (p : ‚Ñï) [Fact p.Prime] :
    (PadicInt.subring p).comap (Padic.ofAdicCompletion p) =
      (p.toHeightOneSpectrum.adicCompletionIntegers ‚Ñö).toSubring := by
  have : 1 < (p : NNReal) := by simpa using ‚ÄπFact p.Prime‚Ä∫.1.one_lt
  ext x
  simp [mem_adicCompletionIntegers, Padic.valuation_ofAdicCompletionofAdicCompletion,
    WithZeroMulInt.toNNReal_le_one_iff this]

/-- The canonical map from the abstract adic completion of `‚Ñ§` at `p` to `‚Ñö_[p]`.
This is a homeomorphism, see `PadicInt.isHomeomorph_adicCompletionIntegers`. -/
noncomputable
def PadicInt.ofAdicCompletionIntegers (p : ‚Ñï) [Fact p.Prime] :
    p.toHeightOneSpectrum.adicCompletionIntegers ‚Ñö ‚Üí+* ‚Ñ§_[p] :=
  (Padic.ofAdicCompletion p).restrict _ (PadicInt.subring p)
    (Padic.comap_ofAdicCompletion_subring p).ge

lemma PadicInt.isHomeomorph_adicCompletionIntegers (p : ‚Ñï) [Fact p.Prime] :
    IsHomeomorph (ofAdicCompletionIntegers p) := by
  refine (Topology.IsEmbedding.toHomeomorphOfSurjective ?_ fun ‚ü®x, hx‚ü© ‚Ü¶ ?_).isHomeomorph
  ¬∑ refine .of_comp ?_ continuous_subtype_val ?_
    ¬∑ dsimp; fun_prop
    ¬∑ exact (Padic.isHomeomorph_ofAdicCompletion p).isEmbedding.comp .subtypeVal
  ¬∑ obtain ‚ü®x, rfl‚ü© := (Padic.isHomeomorph_ofAdicCompletion p).surjective x
    exact ‚ü®‚ü®x, (Padic.comap_ofAdicCompletion_subring p).le hx‚ü©, Subtype.ext rfl‚ü©
