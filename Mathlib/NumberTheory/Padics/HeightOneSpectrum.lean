import Mathlib.NumberTheory.Padics.RingHoms
import Mathlib.Topology.Algebra.Valued.NormedValued
import Mathlib.NumberTheory.Padics.WithVal
import Mathlib.RingTheory.DedekindDomain.AdicValuation
import Mathlib.RingTheory.Int.Basic

open IsDedekindDomain

open scoped NumberField WithZero

noncomputable def UniformSpace.Completion.mapEquiv {Œ± Œ≤ : Type*} [UniformSpace Œ±] [UniformSpace Œ≤]
    (h : Œ± ‚âÉ·µ§ Œ≤) : UniformSpace.Completion Œ± ‚âÉ·µ§ UniformSpace.Completion Œ≤ where
  toFun := .map h
  invFun := .map h.symm
  uniformContinuous_toFun := uniformContinuous_map
  uniformContinuous_invFun := uniformContinuous_map
  left_inv := by
    rw [Function.leftInverse_iff_comp]
    apply ext (.comp continuous_map continuous_map) continuous_id fun a ‚Ü¶ ?_
    simp [map_coe h.uniformContinuous, map_coe h.symm.uniformContinuous]
  right_inv := by
    rw [Function.rightInverse_iff_comp]
    apply ext (.comp continuous_map continuous_map) continuous_id fun a ‚Ü¶ ?_
    simp [map_coe h.symm.uniformContinuous, map_coe h.uniformContinuous]

def HeightOneSpectrum.mapEquiv {R S F : Type*} [CommRing R] [CommRing S] [EquivLike F R S]
    [RingEquivClass F R S] (f : F) : HeightOneSpectrum R ‚âÉ HeightOneSpectrum S where
  toFun v := ‚ü®v.asIdeal.map f, Ideal.map_isPrime_of_equiv f,
    mt (Ideal.map_eq_bot_iff_of_injective (EquivLike.injective f)).1 v.ne_bot‚ü©
  invFun v := ‚ü®v.asIdeal.map (RingEquiv.symm f), Ideal.map_isPrime_of_equiv _,
    mt (Ideal.map_eq_bot_iff_of_injective (EquivLike.injective _)).1 v.ne_bot‚ü©
  left_inv v := by
    simp only [Ideal.map_symm]
    congr
    exact Ideal.comap_map_of_bijective f (EquivLike.toEquiv f).bijective
  right_inv v := by
    simp only [Ideal.map_symm]
    congr
    exact Ideal.map_comap_of_surjective f (EquivLike.toEquiv f).surjective _

noncomputable
def Rat.ringOfIntegersSpectrumEquiv : HeightOneSpectrum (ùìû ‚Ñö) ‚âÉ HeightOneSpectrum ‚Ñ§ :=
    HeightOneSpectrum.mapEquiv ringOfIntegersEquiv

noncomputable
def IsDedekindDomain.HeightOneSpectrum.toNatGenerator (ùî≠ : HeightOneSpectrum ‚Ñ§) : ‚Ñï :=
    (Submodule.IsPrincipal.generator ùî≠.asIdeal).natAbs

namespace IsDedekindDomain.HeightOneSpectrum

instance (ùî≠ : HeightOneSpectrum ‚Ñ§) : Fact ùî≠.toNatGenerator.Prime :=
  ‚ü®Int.prime_iff_natAbs_prime.1 <| Submodule.IsPrincipal.prime_generator_of_isPrime _ ùî≠.ne_bot‚ü©

noncomputable
def toRatpadicValuation (ùî≠ : HeightOneSpectrum ‚Ñ§) :
      Valuation ‚Ñö ‚Ñ§·µê‚Å∞ :=
    Rat.padicValuation ùî≠.toNatGenerator

instance {K : Type*} [Ring K] {Œì‚ÇÄ : Type*}
    [LinearOrderedCommGroupWithZero Œì‚ÇÄ]
    {v : Valuation K Œì‚ÇÄ} : Preorder (WithVal v) := v.toPreorder

theorem _root_.WithVal.le_def {K : Type*} [Ring K] {Œì‚ÇÄ : Type*}
    [LinearOrderedCommGroupWithZero Œì‚ÇÄ]
    {v : Valuation K Œì‚ÇÄ} (a b : WithVal v) :
    a ‚â§ b ‚Üî v (WithVal.equiv v a) ‚â§ v (WithVal.equiv v b) :=
    Iff.rfl

def _root_.WithVal.equivWithVal {K : Type*} [Ring K] {Œì‚ÇÄ Œì‚ÇÄ' : Type*}
    [LinearOrderedCommGroupWithZero Œì‚ÇÄ] [LinearOrderedCommGroupWithZero Œì‚ÇÄ']
    (v : Valuation K Œì‚ÇÄ) (v' : Valuation K Œì‚ÇÄ') :
    WithVal v ‚âÉ+* WithVal v' :=
  (WithVal.equiv v).trans (WithVal.equiv v').symm

def _root_.Valuation.IsEquiv.orderIso {K : Type*} [Ring K] {Œì‚ÇÄ Œì‚ÇÄ' : Type*}
    [LinearOrderedCommGroupWithZero Œì‚ÇÄ] [LinearOrderedCommGroupWithZero Œì‚ÇÄ']
    {v : Valuation K Œì‚ÇÄ} {v' : Valuation K Œì‚ÇÄ'} (h : v.IsEquiv v') :
    WithVal v ‚âÉ+*o WithVal v' where
  __ := WithVal.equivWithVal v v'
  map_le_map_iff' := by
    intro a b
    have := h (WithVal.equiv v a) (WithVal.equiv v b)
    rw [WithVal.le_def a b]
    rw [this]
    rfl

theorem _root_.WithVal.valued_surjective {K : Type*} [Ring K] {Œì‚ÇÄ : Type*}
    [LinearOrderedCommGroupWithZero Œì‚ÇÄ]
    (v : Valuation K Œì‚ÇÄ) : Function.Surjective (Valued.v : (WithVal v) ‚Üí Œì‚ÇÄ) := by
  sorry

def _root_.Valuation.IsEquiv.uniformEquiv {K : Type*} [DivisionRing K] {Œì‚ÇÄ Œì‚ÇÄ' : Type*}
    [LinearOrderedCommGroupWithZero Œì‚ÇÄ] [LinearOrderedCommGroupWithZero Œì‚ÇÄ'] [Nontrivial Œì‚ÇÄ]
    {v : Valuation K Œì‚ÇÄ} {v' : Valuation K Œì‚ÇÄ'} (h : v.IsEquiv v') :
    WithVal v ‚âÉ·µ§ WithVal v' := by
  apply Equiv.toUniformEquivOfIsUniformInducing (WithVal.equivWithVal v v')
  rw [isUniformInducing_iff_uniformSpace]
  ext u
  simp [uniformity_comap, (Valued.hasBasis_uniformity _ _).mem_iff]
  constructor
  ¬∑ rintro ‚ü®t, ‚ü®Œ≥, hŒ≥‚ü©, htu‚ü©
    obtain ‚ü®a, ha‚ü© := WithVal.valued_surjective v' Œ≥
    have : Valued.v (h.orderIso.symm a) ‚â† 0 := by
      rw [‚Üê WithVal.apply_equiv]
      simp
      have := Units.ne_zero Œ≥
      rintro rfl
      simp at ha
      exact this ha.symm
    use Units.mk0 _ this
    simp
    apply Set.Subset.trans _ htu
    intro p hp
    simp at hp
    rw [‚Üê Function.Surjective.preimage_subset_preimage_iff
      (f := Prod.map ‚áë(WithVal.equivWithVal v v') ‚áë(WithVal.equivWithVal v v'))
      <| Function.RightInverse.surjective (congrFun rfl)] at hŒ≥
    apply hŒ≥
    simp
    rw [‚Üê ha]
    have : p.2 - p.1 < h.orderIso.symm a := hp
    rw [‚Üê WithVal.apply_equiv, ‚Üê WithVal.apply_equiv]
    have h'' := h.orderIso.toOrderIso.lt_symm_apply (x := p.2 - p.1) (y := a)
    have h' : h.orderIso.toOrderIso.symm = h.orderIso.symm.toOrderIso := rfl
    rw [h'] at h''
    simp at h''
    rw [h''] at this
    exact this
  ¬∑ rintro ‚ü®Œ≥, hŒ≥‚ü©
    use Prod.map (WithVal.equivWithVal v v') (WithVal.equivWithVal v v') '' u
    have hinj :
        Function.Injective (Prod.map (WithVal.equivWithVal v v') (WithVal.equivWithVal v v')) := by
      rw [Prod.map_injective]
      exact ‚ü®RingEquiv.injective _, RingEquiv.injective _‚ü©
    constructor
    ¬∑ obtain ‚ü®a, ha‚ü© := WithVal.valued_surjective v Œ≥
      have : Valued.v (h.orderIso a) ‚â† 0 := by
        rw [‚Üê WithVal.apply_equiv]
        simp
        rintro rfl
        simp at ha
        exact  Œ≥.ne_zero ha.symm
      use Units.mk0 _ this
      simp
      rw [‚Üê Set.image_subset_image_iff
        (f := Prod.map ‚áë(WithVal.equivWithVal v v') ‚áë(WithVal.equivWithVal v v'))
        <| hinj] at hŒ≥
      apply Set.Subset.trans _ hŒ≥
      intro p hp
      simp at hp
      --rw [‚Üê WithVal.apply_equiv] at hp
      --rw [‚Üê WithVal.apply_equiv] at hp
      have : p.2 - p.1 < h.orderIso a := hp
      use Prod.map (WithVal.equivWithVal v v').symm (WithVal.equivWithVal v v').symm p
      simp [Prod.map_apply']
      rw [‚Üê ha]
      change (WithVal.equivWithVal v v').symm p.2 - (WithVal.equivWithVal v v').symm p.1 < a
      have h' := OrderIso.symm_apply_lt (y := p.2 - p.1) (x := a) h.orderIso.toOrderIso
      --simp only [OrderRingIso.toOrderIso_eq_coe, OrderRingIso.coe_toOrderIso] at h'
      --rw [‚Üê h'] at this
      have h'' : h.orderIso.toOrderIso.symm = h.orderIso.symm.toOrderIso := rfl
      rw [h''] at h'
      simp at h'
      rw [‚Üê h'] at this
      exact this
    ¬∑ rw [Set.preimage_image_eq _ hinj]

theorem valuation_equiv_toRatpadicValuation (ùî≠ : HeightOneSpectrum ‚Ñ§) :
    (ùî≠.valuation ‚Ñö).IsEquiv (ùî≠.toRatpadicValuation) := sorry

-- prove this by showing valuations are equivalent?
noncomputable def withValEquiv (ùî≠ : HeightOneSpectrum ‚Ñ§) :
    WithVal (ùî≠.valuation ‚Ñö) ‚âÉ·µ§ WithVal ùî≠.toRatpadicValuation :=
  Valuation.IsEquiv.uniformEquiv ùî≠.valuation_equiv_toRatpadicValuation

noncomputable
def adicCompletionRatEquiv (ùî≠ : HeightOneSpectrum ‚Ñ§) :
    ùî≠.adicCompletion ‚Ñö ‚âÉ·µ§ ‚Ñö_[ùî≠.toNatGenerator] :=
  UniformSpace.Completion.mapEquiv ùî≠.withValEquiv |>.trans Padic.withValUniformEquiv

end IsDedekindDomain.HeightOneSpectrum
