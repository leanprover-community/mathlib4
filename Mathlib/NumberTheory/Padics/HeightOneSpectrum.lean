import Mathlib.NumberTheory.Padics.RingHoms
import Mathlib.Topology.Algebra.Valued.NormedValued
import Mathlib.NumberTheory.Padics.WithVal
import Mathlib.RingTheory.DedekindDomain.AdicValuation
import Mathlib.RingTheory.Int.Basic

open IsDedekindDomain

open scoped NumberField WithZero

noncomputable def UniformSpace.Completion.mapEquiv {Œ± Œ≤ : Type*} [UniformSpace Œ±] [UniformSpace Œ≤]
    (h : Œ± ‚âÉ·µ§ Œ≤) : UniformSpace.Completion Œ± ‚âÉ·µ§ UniformSpace.Completion Œ≤ where
  toFun := .map h
  invFun := .map h.symm
  uniformContinuous_toFun := uniformContinuous_map
  uniformContinuous_invFun := uniformContinuous_map
  left_inv := by
    rw [Function.leftInverse_iff_comp]
    apply ext (.comp continuous_map continuous_map) continuous_id fun a ‚Ü¶ ?_
    simp [map_coe h.uniformContinuous, map_coe h.symm.uniformContinuous]
  right_inv := by
    rw [Function.rightInverse_iff_comp]
    apply ext (.comp continuous_map continuous_map) continuous_id fun a ‚Ü¶ ?_
    simp [map_coe h.symm.uniformContinuous, map_coe h.uniformContinuous]

def HeightOneSpectrum.mapEquiv {R S F : Type*} [CommRing R] [CommRing S] [EquivLike F R S]
    [RingEquivClass F R S] (f : F) : HeightOneSpectrum R ‚âÉ HeightOneSpectrum S where
  toFun v := ‚ü®v.asIdeal.map f, Ideal.map_isPrime_of_equiv f,
    mt (Ideal.map_eq_bot_iff_of_injective (EquivLike.injective f)).1 v.ne_bot‚ü©
  invFun v := ‚ü®v.asIdeal.map (RingEquiv.symm f), Ideal.map_isPrime_of_equiv _,
    mt (Ideal.map_eq_bot_iff_of_injective (EquivLike.injective _)).1 v.ne_bot‚ü©
  left_inv v := by
    simp only [Ideal.map_symm]
    congr
    exact Ideal.comap_map_of_bijective f (EquivLike.toEquiv f).bijective
  right_inv v := by
    simp only [Ideal.map_symm]
    congr
    exact Ideal.map_comap_of_surjective f (EquivLike.toEquiv f).surjective _

noncomputable
def Rat.ringOfIntegersSpectrumEquiv : HeightOneSpectrum (ùìû ‚Ñö) ‚âÉ HeightOneSpectrum ‚Ñ§ :=
    HeightOneSpectrum.mapEquiv ringOfIntegersEquiv

noncomputable
def IsDedekindDomain.HeightOneSpectrum.toNatGenerator (ùî≠ : HeightOneSpectrum ‚Ñ§) : ‚Ñï :=
    (Submodule.IsPrincipal.generator ùî≠.asIdeal).natAbs

namespace IsDedekindDomain.HeightOneSpectrum

instance (ùî≠ : HeightOneSpectrum ‚Ñ§) : Fact ùî≠.toNatGenerator.Prime :=
  ‚ü®Int.prime_iff_natAbs_prime.1 <| Submodule.IsPrincipal.prime_generator_of_isPrime _ ùî≠.ne_bot‚ü©

noncomputable
def toRatpadicValuation (ùî≠ : HeightOneSpectrum ‚Ñ§) :
      Valuation ‚Ñö ‚Ñ§·µê‚Å∞ :=
    Rat.padicValuation ùî≠.toNatGenerator

set_option pp.proofs true in
theorem _root_.Valuation.IsEquiv.exists_orderMonoidIso {K : Type*} [Ring K] {Œì‚ÇÄ Œì‚ÇÄ' : Type*}
    [LinearOrderedCommGroupWithZero Œì‚ÇÄ] [LinearOrderedCommGroupWithZero Œì‚ÇÄ']
    {v : Valuation K Œì‚ÇÄ} {v' : Valuation K Œì‚ÇÄ'} (h : v.IsEquiv v') :
    ‚àÉ œï : Œì‚ÇÄ ‚âÉo Œì‚ÇÄ', œï ‚àò v = v' := by
  have hv : Function.Surjective v := sorry
  have hv' : Function.Surjective v' := sorry
  let toFun : Œì‚ÇÄ ‚Üí Œì‚ÇÄ' := fun Œ≥ ‚Ü¶ v' (hv Œ≥).choose
  let invFun : Œì‚ÇÄ' ‚Üí Œì‚ÇÄ := fun Œ≥' ‚Ü¶ v (hv' Œ≥').choose
  let œï : Œì‚ÇÄ ‚âÉo Œì‚ÇÄ' := {
    toFun := toFun
    invFun := invFun
    left_inv := by
      simp [toFun, invFun, Function.leftInverse_iff_comp]
      ext Œ≥
      simp
      have := (hv Œ≥).choose_spec
      rw [‚Üê this]
      sorry
    right_inv := sorry
    map_rel_iff' := by
      intro a b
      simp [toFun]
      rw [‚Üê h]
      rw [(hv a).choose_spec, (hv b).choose_spec]
  }
  use œï
  simp [œï, toFun]
  ext a
  have := (hv (v a)).choose_spec
  simp
  sorry

def _root_.Valued.uniformEquiv_of_isEquiv_v {K : Type*} [Ring K] {Œì‚ÇÄ : Type*}
    [LinearOrderedCommGroupWithZero Œì‚ÇÄ]
    [i : Valued K Œì‚ÇÄ] [i' : Valued K Œì‚ÇÄ] (h : i.v.IsEquiv i'.v) :
    @UniformEquiv K K i.toUniformSpace i'.toUniformSpace := by
  apply @Equiv.toUniformEquivOfIsUniformInducing K K i.toUniformSpace i'.toUniformSpace
    (Equiv.refl _)
  rw [@isUniformInducing_iff_uniformSpace]
  obtain ‚ü®œï, hœï‚ü© := h.exists_orderMonoidIso
  ext u
  rw [uniformity_comap]
  simp
  simp_rw [i.hasBasis_uniformity.mem_iff, i'.hasBasis_uniformity.mem_iff]
  simp
  constructor
  ¬∑ rintro ‚ü®t, ‚ü®Œ≥, hŒ≥‚ü©, htu‚ü©
    have : œï.symm Œ≥ ‚â† 0 := by
      intro h
      rw [‚Üê i.v.map_zero] at h
      have h := congrArg œï h
      have := congrFun hœï 0
      rw [Function.comp_apply] at this
      rw [this] at h
      simp at h
    use Units.mk0 _ this
    apply Set.Subset.trans _ htu
    intro p hp
    simp at hp
    apply hŒ≥
    simp
    rw [‚Üê hœï]
    simp
    exact œï.lt_symm_apply.1 hp
  ¬∑ rintro ‚ü®Œ≥, hŒ≥‚ü©
    have : œï Œ≥ ‚â† 0 := by
      intro h
      rw [‚Üê i'.v.map_zero] at h
      rw [‚Üê hœï] at h
      simp at h
    use u
    refine ‚ü®?_, subset_rfl‚ü©
    use Units.mk0 _ this
    simp
    apply Set.Subset.trans _ hŒ≥
    simp
    intro a b hab
    rw [‚Üê hœï] at hab
    simp at hab
    exact hab

-- prove this by showing valuations are equivalent?
noncomputable def withValEquiv (ùî≠ : HeightOneSpectrum ‚Ñ§) :
    WithVal (ùî≠.valuation ‚Ñö) ‚âÉ·µ§ WithVal ùî≠.toRatpadicValuation := by
  apply @Valued.uniformEquiv_of_isEquiv_v ‚Ñö _ _ _
    (inferInstanceAs (Valued (WithVal (ùî≠.valuation ‚Ñö)) ‚Ñ§·µê‚Å∞))
    (inferInstanceAs (Valued (WithVal (ùî≠.toRatpadicValuation)) ‚Ñ§·µê‚Å∞))
  rw [Valuation.isEquiv_iff_val_le_one]
  intro x
  change ùî≠.valuation ‚Ñö x ‚â§ 1 ‚Üî ùî≠.toRatpadicValuation x ‚â§ 1
  rw [toRatpadicValuation]
  rw [Rat.padicValuation_le_one_iff]
  rw [toNatGenerator]
  rw [HeightOneSpectrum.valuation_def]
  rw [Valuation.extendToLocalization]
  sorry


noncomputable
def adicCompletionRatEquiv (ùî≠ : HeightOneSpectrum ‚Ñ§) :
    ùî≠.adicCompletion ‚Ñö ‚âÉ·µ§ ‚Ñö_[ùî≠.toNatGenerator] :=
  UniformSpace.Completion.mapEquiv ùî≠.withValEquiv |>.trans Padic.withValUniformEquiv
