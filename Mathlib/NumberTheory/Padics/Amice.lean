import Mathlib.Algebra.Group.ForwardDiff
import Mathlib.Analysis.Normed.Group.Ultra
import Mathlib.NumberTheory.Padics.ProperSpace
import Mathlib.RingTheory.Binomial
import Mathlib.Topology.Algebra.InfiniteSum.Nonarchimedean
import Mathlib.Topology.Algebra.Polynomial
import Mathlib.Topology.ContinuousMap.ZeroAtInfty
import Mathlib.Topology.MetricSpace.Ultra.ContinuousMaps
import Mathlib.NumberTheory.Padics.MahlerBasis
import Mathlib.Topology.Algebra.Module.LinearMap
import Mathlib.Topology.Algebra.Module.LinearMapPiProd
import Mathlib.Topology.Algebra.InfiniteSum.Module
import Mathlib.Analysis.NormedSpace.OperatorNorm.Basic
open Finset IsUltrametricDist NNReal Filter

open scoped fwdDiff ZeroAtInfty Topology
set_option maxHeartbeats 200000000000000000
noncomputable section
variable {p : ‚Ñï} [hp : Fact p.Prime]

namespace PadicInt



lemma Bound_has_Sum (b: (BoundedContinuousFunction ‚Ñï ‚Ñ§_[p]))(f:C(‚Ñ§_[p], ‚Ñ§_[p])):HasSum
  (fun n=> (b n)*( Œî_[1] ^[n] (‚áëf) 0))
   (‚àë'(n:‚Ñï ),(b n)*( Œî_[1] ^[n] (‚áëf) 0)):=by
  refine (NonarchimedeanAddGroup.summable_of_tendsto_cofinite_zero ?_).hasSum
  rw [Nat.cofinite_eq_atTop,Metric.tendsto_atTop]
  have m:=fwdDiff_tendsto_zero f
  rw [Metric.tendsto_atTop] at m
  simp at m
  intro q qe
  rcases (LE.le.gt_or_eq (norm_nonneg b)) with j1|j2
  ¬∑ have:=_root_.div_pos qe j1
    choose M HN using (m (q / ‚Äñb‚Äñ) (_root_.div_pos qe j1))
    use M
    intro o hs
    simp only [_root_.dist_zero_right, padicNormE.mul,norm_mul, gt_iff_lt]
    have:=mul_lt_mul_of_nonneg_of_pos' (BoundedContinuousFunction.norm_coe_le_norm b o) (HN o hs)
      (norm_nonneg (Œî_[1] ^[o] (‚áëf) 0)) j1
    rw[mul_div_cancel‚ÇÄ q (Ne.symm (_root_.ne_of_lt j1))] at this
    exact this
  use 0
  simp
  intro n
  have:‚Äñb n‚Äñ= 0 :=by
    apply le_antisymm
    rw[‚Üê j2]
    exact (BoundedContinuousFunction.norm_coe_le_norm b n)
    exact norm_nonneg (b n)
  rw[this]
  simp
  exact qe

noncomputable def Amice_iso_1 (b: (BoundedContinuousFunction ‚Ñï ‚Ñ§_[p]))
:(ContinuousLinearMap (RingHom.id ‚Ñ§_[p]) C(‚Ñ§_[p],‚Ñ§_[p])  ‚Ñ§_[p]) where
  toFun f:=‚àë'(n:‚Ñï ),(b n)*( Œî_[1] ^[n] (‚áëf) 0)
  map_add' x y:= by
        simp
        ring_nf
        refine tsum_add (HasSum.summable (Bound_has_Sum b x)) (HasSum.summable (Bound_has_Sum  b y))
  map_smul' x u:= by
    simp_all
    ring_nf
    refine HasSum.tsum_eq ?_
    have:(fun n => b n * x * Œî_[1] ^[n] (‚áëu) 0) =(fun n =>  x*(b n  * Œî_[1] ^[n] (‚áëu) 0)):=by
      ext n
      ring
    rw[this]
    exact HasSum.mul_left x (Bound_has_Sum  b u)
  cont :=by
      rw[continuous_iff_continuousAt]
      intro g
      unfold ContinuousAt
      simp
      rw[NormedAddCommGroup.tendsto_nhds_nhds]
      intro s es
      rcases (LE.le.gt_or_eq (norm_nonneg b)) with j1|j2
      ¬∑ use s/(2*‚Äñb‚Äñ)
        constructor
        ¬∑ exact _root_.div_pos es (mul_pos (zero_lt_two) j1)

        ¬∑ intro x' sx'
          rw[Eq.symm (tsum_sub (HasSum.summable
            (Bound_has_Sum  b x')) (HasSum.summable (Bound_has_Sum b g)))]
          have fi (n:‚Ñï ):‚Äñ(b n * Œî_[1] ^[n] (‚áëx') 0 - b n * Œî_[1] ^[n] (‚áëg) 0)‚Äñ‚â§ s/2 :=by
            have:(b n * Œî_[1] ^[n] (‚áëx') 0 - b n * Œî_[1] ^[n] (‚áëg) 0)=
            b n*(Œî_[1] ^[n] (x'- g) 0) :=by
              simp
              have(x:‚Ñ§_[p]): ‚àÄ a b:‚Ñ§_[p]‚Üí ‚Ñ§_[p],Œî_[1] ^[n] (a - b) x=
              Œî_[1] ^[n] (a ) x- Œî_[1] ^[n] ( b) x:=by

                 induction' n with i si
                 simp
                 simp_all
                 intro a b
                 rw[‚Üê si ]
                 have:Œî_[1] (a - b)=Œî_[1] a - Œî_[1] b :=by
                   unfold fwdDiff
                   ext n
                   simp
                   ring
                 rw[this]
              rw[(this 0)]
              ring
            rw[this]
            simp
            have l2:=lt_of_le_of_lt (IsUltrametricDist.norm_fwdDiff_iter_apply_le (1:‚Ñ§_[p])
               (x' - g) 0 n) sx'
            simp at this
            have:‚Äñb‚Äñ*(s/(2*‚Äñb‚Äñ))=s/2 :=by
             ring_nf
             rw[mul_comm ‚Äñb‚Äñ s ,mul_assoc s ‚Äñb‚Äñ ‚Äñb‚Äñ‚Åª¬π,
              CommGroupWithZero.mul_inv_cancel ‚Äñb‚Äñ (Ne.symm (_root_.ne_of_lt j1))]
             simp
            rw[‚Üê this]
            refine mul_le_mul_of_nonneg  (BoundedContinuousFunction.norm_coe_le_norm b n)
               (le_of_lt l2) (norm_nonneg (b n))
               (le_of_lt ( _root_.div_pos es (mul_pos (zero_lt_two) j1)))

          ¬∑   exact lt_of_le_of_lt (IsUltrametricDist.norm_tsum_le_of_forall_le_of_nonneg
                (le_of_lt  (_root_.div_pos es  (zero_lt_two))) fi) ( div_two_lt_of_pos es)
      ¬∑ use 1
        constructor
        ¬∑exact Real.zero_lt_one
        ¬∑ intro r hs
          have: b=0 :=by
            sorry
          simp[this]
          exact es

--Ëøô‰∏™‰ª£Á†ÅÊàë‰∏çÁü•ÈÅì‰∏∫‰ªÄ‰πà‰ºöÊä•Èîô

lemma dts (s:C(‚Ñ§_[p],‚Ñ§_[p]))(f:(ContinuousLinearMap (RingHom.id ‚Ñ§_[p]) C(‚Ñ§_[p],‚Ñ§_[p])  ‚Ñ§_[p]))
 :‚àë' (n : ‚Ñï), (f (mahler n))*( Œî_[1] ^[n] (‚áës) 0) = f s :=by
   have:=(PadicInt.hasSum_mahler s).tsum_eq
   rw[congrArg (‚áëf) (id (Eq.symm this)),
      ContinuousLinearMap.map_tsum f (HasSum.summable (PadicInt.hasSum_mahler s))]
   refine tsum_congr ?_
   intro n
   have: PadicInt.mahlerTerm (Œî_[1] ^[n] (‚áës) 0) n= (Œî_[1] ^[n] (‚áës) 0) ‚Ä¢mahler n :=by
       unfold PadicInt.mahlerTerm
       ext q
       simp
       ring
   rw[this,ContinuousLinearMap.map_smul_of_tower f (Œî_[1] ^[n] (‚áës) 0) (mahler n)]
   simp
   ring
lemma sss(x b:‚Ñï )(hx : x ‚àà range b): ‚Üë(Ring.choose  (x:‚Ñ§_[p]) b)=0 :=by
  rw[Ring.choose_natCast x b]
  simp
  refine Nat.choose_eq_zero_iff.mpr (List.mem_range.mp hx)

lemma sse( b:‚Ñï ): ‚àë x ‚àà range b, (-(1)) ^ (b - x) *
((b.choose x):‚Ñö_[p]) * (Ring.choose (x:‚Ñ§_[p]) b)=0:=by
  have: ‚àÄ x ‚àà range b,(-(1)) ^ (b - x) * ((b.choose x):‚Ñö_[p]) * (Ring.choose (x:‚Ñ§_[p]) b)=0:=by
     intro x hx
     rw[Ring.choose_natCast x b]
     rw[Nat.choose_eq_zero_iff.mpr (List.mem_range.mp hx)]
     simp
  exact sum_eq_zero this
lemma sh (n_1 b:‚Ñï ): ((mahlerEquiv ‚Ñ§_[p]) (mahler b)) n_1 = if n_1 = b then 1 else 0 :=by
 have:Tendsto (fun n_1=>if n_1 = b then (1 : ‚Ñ§_[p]) else 0) (cocompact ‚Ñï) (ùìù 0) :=by
   rw[cocompact_eq_atTop,Metric.tendsto_atTop]
   intro s hs
   use b+1
   intro n sd
   simp[Nat.ne_of_lt' sd]
   exact hs
 let qo:C‚ÇÄ(‚Ñï, ‚Ñ§_[p]):=‚ü®‚ü®(fun n_1=>if n_1 = b then (1 : ‚Ñ§_[p]) else 0),
 continuous_of_discreteTopology‚ü©,this‚ü©
 have:(mahlerEquiv  (p:=p) ‚Ñ§_[p]).symm qo
    =(mahler b) :=by
       unfold mahlerEquiv mahlerSeries mahlerTerm
       have:‚àë' (n : ‚Ñï), mahler (p:=p) n ‚Ä¢ (ContinuousMap.const ‚Ñ§_[p] (qo n))=mahler b :=by
           have sh: ‚àÄ n ‚àâ (({b}:Finset ‚Ñï )), mahler (p:=p) n ‚Ä¢
           (ContinuousMap.const ‚Ñ§_[p] (qo n))=0:=by
             intro n sb
             unfold qo ContinuousMap.const
             simp_all
             ext s
             simp
           rw[tsum_eq_sum  sh ]
           rw[sum_singleton]
           unfold qo ContinuousMap.const
           simp
           ext m
           simp

       exact this
 rw[‚Üê this]
 simp
 exact rfl


noncomputable def Amice_iso_2 (a: (C(‚Ñ§_[p],‚Ñ§_[p]) ‚ÜíL[‚Ñ§_[p]] ‚Ñ§_[p])) :
 (BoundedContinuousFunction ‚Ñï ‚Ñ§_[p])where
  toFun := fun n=> a  (mahler (p:=p) n)
  map_bounded' := by

         use 1
         intro x y
         have s (n:‚Ñï ):‚Äña (mahler (p:=p) n)‚Äñ ‚â§ 1 :=by
           exact norm_le_one (a (mahler n))
         have:Dist.dist (a (mahler x)) (a (mahler y))=‚Äña (mahler x) + -a (mahler y)‚Äñ :=by
            ring_nf
            rfl
         rw[this]
         have:=padicNormE.nonarchimedean (p:=p) (a (mahler x)) (-a (mahler y))
         simp at this
         rcases this with l1|l2
         ¬∑ exact Preorder.le_trans ‚Äña (mahler x) + -a (mahler y)‚Äñ ‚Äña (mahler x)‚Äñ 1 l1 (s x)
         ¬∑ exact Preorder.le_trans ‚Äña (mahler x) + -a (mahler y)‚Äñ ‚Äña (mahler y)‚Äñ 1 l2 (s y)

noncomputable def Amice_iso :
 (C(‚Ñ§_[p],‚Ñ§_[p]) ‚ÜíL[‚Ñ§_[p]] ‚Ñ§_[p]) ‚âÉ‚Çó·µ¢[‚Ñ§_[p]]
   (BoundedContinuousFunction ‚Ñï ‚Ñ§_[p]) where
     toFun a :=Amice_iso_2 a
     map_add' f g:=rfl
     map_smul' f g :=rfl
     invFun b:=Amice_iso_1 b
     left_inv f :=by
       ext s
       unfold Amice_iso_1
       simp_all
       exact dts s f

     right_inv s :=by
        ext b
        simp_all
        have:‚àë' (n_1 : ‚Ñï), s n_1 * ((PadicInt.mahlerEquiv ‚Ñö_[p]) (mahler b)) n_1 = s b :=by
          have (n_1 : ‚Ñï):((PadicInt.mahlerEquiv ‚Ñö_[p]) (mahler b)) n_1 =
          if ( n_1=b ) then (1: ‚Ñö_[p] )else 0 :=by
           rcases (eq_or_ne n_1 b) with d1|d2
           rw[d1]
           simp
           unfold PadicInt.mahlerEquiv
           simp
           rw [fwdDiff_iter_eq_sum_shift]
           unfold mahler
           simp
           rw[Finset.sum_range_succ,sse]
           simp
           rw[Ring.choose_natCast b b]
           simp
           exact sh
          have sh1: ‚àÄ n_1 ‚àâ (({b}:Finset ‚Ñï )), s n_1 * ((PadicInt.mahlerEquiv ‚Ñö_[p]) (mahler b)) n_1=0:=by
             intro n sb
             rw[this n]
             simp_all
          rw[tsum_eq_sum  sh1 ,sum_singleton,sh]
          simp
        exact this

--norm_nonneg ‚ü®‚ü®a (mahler n),
        --continuous_of_discreteTopology‚ü©,sBound a f‚ü©
     norm_map' a:=by
       simp only [LinearEquiv.coe_mk]
       apply le_antisymm
       have s (n:‚Ñï ):‚Äña (mahler (p:=p) n)‚Äñ ‚â§ ‚Äña‚Äñ :=by
           refine ContinuousLinearMap.unit_le_opNorm a (mahler n) ?_
           rw[norm_mahler_eq]
       exact BoundedContinuousFunction.norm_le_of_nonempty.mpr s
       refine ContinuousLinearMap.opNorm_le_bound a (norm_nonneg (Amice_iso_2 a)) ?_
       intro f
       nth_rw 1 [‚Üê (PadicInt.hasSum_mahler f).tsum_eq]
       unfold PadicInt.mahlerTerm
       rw[ContinuousLinearMap.map_tsum]
       refine norm_tsum_le_of_forall_le_of_nonneg (Left.mul_nonneg (norm_nonneg (Amice_iso_2 a) )
         (norm_nonneg f))  ?_
       intro i
       have:mahler (p:=p) i ‚Ä¢ ContinuousMap.const ‚Ñ§_[p] (Œî_[1] ^[i] (‚áëf) 0)= (Œî_[1] ^[i] (‚áëf) 0)‚Ä¢mahler (p:=p) i:=by
          ext s
          unfold ContinuousMap.const
          simp
          ring
       rw[this,ContinuousLinearMap.map_smul_of_tower]
       simp
       rw[mul_comm]
       refine mul_le_mul_of_nonneg  (BoundedContinuousFunction.norm_coe_le_norm (Amice_iso_2 a) i)
         (IsUltrametricDist.norm_fwdDiff_iter_apply_le 1 f 0 i) ((norm_nonneg (a (mahler i)))) ((norm_nonneg f))
       exact HasSum.summable ((PadicInt.hasSum_mahler f))
