/-
Copyright (c) 2025 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck
-/

import Mathlib.Algebra.Order.Ring.Star
import Mathlib.Analysis.CStarAlgebra.Classes
import Mathlib.Data.Int.Star

/-!
# Sums over symmetric integer intervals

This file contains some lemmas about sums over symmetric integer intervals `Ixx -N N` used in the
definition of the Eisenstein series `E2`. In particular we define `IccFilter`, `IcoFilter`,
`IocFilter` and `IooFilter` as `SummationFilter`s on `Finset ‚Ñ§` corresponding to the intervals
`Icc -N N`, `Ico -N N`, `Ioc -N N` and `Ioo -N N` respectively.
We also prove that these filters are all `NeBot` and `LeAtTop`.

-/

open Finset Topology

lemma Icc_succ_succ (n : ‚Ñï) : Finset.Icc (-(n + 1) : ‚Ñ§) (n + 1) = Finset.Icc (-n : ‚Ñ§) n ‚à™
  {(-(n + 1) : ‚Ñ§), (n + 1 : ‚Ñ§)} := by
  refine Finset.ext_iff.mpr ?_
  intro a
  simp only [neg_add_rev, Int.reduceNeg, Finset.mem_Icc, add_neg_le_iff_le_add, Finset.union_insert,
    Finset.mem_insert, Finset.mem_union, Finset.mem_singleton]
  omega

lemma sum_Icc_of_even_eq_range {Œ± : Type*} [CommRing Œ±] {f : ‚Ñ§ ‚Üí Œ±} (hf : ‚àÄ n, f n = f (-n))
    (N : ‚Ñï) : ‚àë m ‚àà  Finset.Icc (-N : ‚Ñ§) N, f m =  2 * ‚àë m ‚àà Finset.range (N + 1), f m - f 0 := by
  induction N with
  | zero => simp [two_mul]
  | succ N ih =>
    have := Icc_succ_succ N
    simp only [neg_add_rev, Int.reduceNeg,  Nat.cast_add, Nat.cast_one] at *
    rw [this, Finset.sum_union (by simp), Finset.sum_pair (by omega), ih]
    nth_rw 2 [Finset.sum_range_succ]
    grind

@[to_additive]
lemma prod_Icc_eq_prod_Ico_succ {Œ± : Type*} [CommMonoid Œ±] (f : ‚Ñ§ ‚Üí Œ±) {l u : ‚Ñ§} (h : l ‚â§ u) :
    ‚àè m ‚àà Icc l u, f m = (‚àè m ‚àà Finset.Ico l u, f m) * f u := by
  simp [Finset.Icc_eq_cons_Ico h,Finset.cons_eq_insert, Finset.mem_Ico, lt_self_iff_false, mul_comm]

lemma sum_Icc_add_endpoints {R : Type*} [AddCommGroup R] (f : ‚Ñ§ ‚Üí R) {N : ‚Ñï} (hn : 1 ‚â§ N) :
    ‚àë m ‚àà Icc (-N : ‚Ñ§) N, f m = f N + f (-N : ‚Ñ§)  + ‚àë m ‚àà Icc (-(N - 1) : ‚Ñ§) (N - 1), f m := by
  induction N
  ¬∑ grind
  ¬∑ zify
    rw [Icc_succ_succ, Finset.sum_union (by simp)]
    grind

section IntervalFilters

open TopologicalSpace Filter Function Finset

lemma Finset.tendsto_Icc_atTop_atTop : Tendsto (fun N : ‚Ñï ‚Ü¶ Finset.Icc (-N : ‚Ñ§) N) atTop atTop :=
  tendsto_atTop_finset_of_monotone (fun _ _ _ ‚Ü¶ Finset.Icc_subset_Icc (by gcongr) (by gcongr))
  (fun x ‚Ü¶ ‚ü®x.natAbs, by simp [le_abs, neg_le]‚ü©)

lemma Finset.tendsto_Ico_atTop_atTop : Tendsto (fun N : ‚Ñï ‚Ü¶ Finset.Ico (-N : ‚Ñ§) N) atTop atTop := by
  apply tendsto_atTop_finset_of_monotone (fun _ _ _ ‚Ü¶ Finset.Ico_subset_Ico (by omega) (by gcongr))
  exact fun x ‚Ü¶ ‚ü®x.natAbs + 1, by simpa using ‚ü®by apply le_trans _ (add_abs_nonneg x); omega,
    Int.lt_add_one_iff.mpr (le_abs_self x)‚ü© ‚ü©

lemma Finset.tendsto_Ioc_atTop_atTop : Tendsto (fun N : ‚Ñï ‚Ü¶ Finset.Ioc (-N : ‚Ñ§) N) atTop atTop := by
  apply tendsto_atTop_finset_of_monotone (fun _ _ _ ‚Ü¶ Finset.Ioc_subset_Ioc (by omega) (by gcongr))
  exact fun x ‚Ü¶ ‚ü®x.natAbs + 1, by simpa using ‚ü®by apply le_trans _ (add_abs_nonneg x); omega,
    (Int.lt_add_one_iff.mpr (le_abs_self x)).le‚ü©‚ü©

lemma Finset.tendsto_Ioo_atTop_atTop : Tendsto (fun N : ‚Ñï ‚Ü¶ Finset.Ioo (-N : ‚Ñ§) N) atTop atTop := by
  apply tendsto_atTop_finset_of_monotone (fun _ _ _ ‚Ü¶ Finset.Ioo_subset_Ioo (by omega) (by gcongr))
  exact fun x ‚Ü¶ ‚ü®x.natAbs + 1, by simpa using ‚ü®by apply le_trans _ (add_abs_nonneg x); omega,
    (Int.lt_add_one_iff.mpr (le_abs_self x))‚ü©‚ü©

/-- The SummationFilter on `Finset ‚Ñ§` corresponding to the intervals `Icc (-N) N` -/
abbrev IccFilter : SummationFilter ‚Ñ§ where
  filter := atTop.map (fun N : ‚Ñï ‚Ü¶ Finset.Icc (-(N : ‚Ñ§)) N)

/-- The SummationFilter on `Finset ‚Ñ§` corresponding to the intervals `Ico (-N) N` -/
abbrev IcoFilter : SummationFilter ‚Ñ§ where
  filter := atTop.map (fun N : ‚Ñï ‚Ü¶ Ico (-(N : ‚Ñ§)) N)

/-- The SummationFilter on `Finset ‚Ñ§` corresponding to the intervals `Ioc (-N) N` -/
abbrev IocFilter : SummationFilter ‚Ñ§ where
  filter := atTop.map (fun N : ‚Ñï ‚Ü¶ Ioc (-(N : ‚Ñ§)) N)

/-- The SummationFilter on `Finset ‚Ñ§` corresponding to the intervals `Ioo (-N) N` -/
abbrev IooFilter : SummationFilter ‚Ñ§ where
  filter := atTop.map (fun N : ‚Ñï ‚Ü¶ Ioo (-(N : ‚Ñ§)) N)

instance IccFilter_neBot : NeBot (atTop.map (fun N : ‚Ñï ‚Ü¶ Finset.Icc (-(N : ‚Ñ§)) N)) := by
  simp [Filter.NeBot.map]

instance IcoFilter_neBot : NeBot (atTop.map (fun N : ‚Ñï ‚Ü¶ Finset.Ico (-(N : ‚Ñ§)) N)) := by
  simp [Filter.NeBot.map]

instance IocFilter_neBot : NeBot (atTop.map (fun N : ‚Ñï ‚Ü¶ Finset.Ioc (-(N : ‚Ñ§)) N)) := by
  simp [Filter.NeBot.map]

instance IooFilter_neBot : NeBot (atTop.map (fun N : ‚Ñï ‚Ü¶ Finset.Ioo (-(N : ‚Ñ§)) N)) := by
  simp [Filter.NeBot.map]

lemma IccFilter_le_atTop : atTop.map (fun N : ‚Ñï ‚Ü¶ Finset.Icc (-(N : ‚Ñ§)) N) ‚â§ atTop := by
  rw [@map_le_iff_le_comap, ‚Üê @tendsto_iff_comap]
  exact Finset.tendsto_Icc_atTop_atTop

lemma IcoFilter_le_atTop : atTop.map (fun N : ‚Ñï ‚Ü¶ Finset.Ico (-(N : ‚Ñ§)) N) ‚â§ atTop := by
  rw [@map_le_iff_le_comap, ‚Üê @tendsto_iff_comap]
  exact Finset.tendsto_Ico_atTop_atTop

lemma IocFilter_le_atTop : atTop.map (fun N : ‚Ñï ‚Ü¶ Finset.Ioc (-(N : ‚Ñ§)) N) ‚â§ atTop := by
  rw [@map_le_iff_le_comap, ‚Üê @tendsto_iff_comap]
  exact Finset.tendsto_Ioc_atTop_atTop

lemma IooFilter_le_atTop : atTop.map (fun N : ‚Ñï ‚Ü¶ Finset.Ioo (-(N : ‚Ñ§)) N) ‚â§ atTop := by
  rw [@map_le_iff_le_comap, ‚Üê @tendsto_iff_comap]
  exact Finset.tendsto_Ioo_atTop_atTop

instance : (IccFilter).NeBot := ‚ü®IccFilter_neBot‚ü©

instance : (IcoFilter).NeBot := ‚ü®IcoFilter_neBot‚ü©

instance : (IocFilter).NeBot := ‚ü®IocFilter_neBot‚ü©

instance : (IooFilter).NeBot := ‚ü®IooFilter_neBot‚ü©

instance : (IccFilter).LeAtTop where
  le_atTop := IccFilter_le_atTop

instance : (IcoFilter).LeAtTop where
  le_atTop := IcoFilter_le_atTop

instance : (IocFilter).LeAtTop where
  le_atTop := IocFilter_le_atTop

instance : (IooFilter).LeAtTop where
  le_atTop := IooFilter_le_atTop

variable {Œ± : Type*} {f : ‚Ñ§ ‚Üí Œ±} [CommGroup Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±]

@[to_additive]
lemma multipliable_IcoFilter_of_multiplible_IccFilter (hf : Multipliable f IccFilter)
    (hf2 : Tendsto (fun N : ‚Ñï ‚Ü¶ (f N)‚Åª¬π) atTop (ùìù 1)) : Multipliable f IcoFilter := by
  have := (hf.hasProd)
  apply HasProd.multipliable (a := ‚àè'[IccFilter] (b : ‚Ñ§), f b)
  simp only [HasProd, tendsto_map'_iff] at *
  apply Filter.Tendsto_of_div_tendsto_one _ this
  conv =>
    enter [1, N]
    simp only [Pi.div_apply, comp_apply]
    rw [prod_Icc_eq_prod_Ico_succ _ (by omega)]
  simpa using hf2

@[to_additive]
lemma tprod_IccFilter_eq_tprod_IcoFilter [T2Space Œ±] (hf : Multipliable f IccFilter)
    (hf2 : Tendsto (fun N : ‚Ñï ‚Ü¶ (f N)‚Åª¬π) atTop (ùìù 1)) :
    ‚àè'[IccFilter] b, f b  = ‚àè'[IcoFilter] b, f b := by
  have := (hf.hasProd)
  apply symm
  apply HasProd.tprod_eq
  simp only [HasProd, tendsto_map'_iff] at *
  apply Filter.Tendsto_of_div_tendsto_one _ this
  conv =>
    enter [1, N]
    simp only [Pi.div_apply, comp_apply]
    rw [prod_Icc_eq_prod_Ico_succ _ (by omega)]
  simpa using hf2

section tprod

variable {Œ± : Type*} [CommMonoid Œ±] [TopologicalSpace Œ±] [T2Space Œ±]

@[to_additive]
lemma tprod_IccFilter_eq_tprod {f : ‚Ñ§ ‚Üí Œ±} (hf : Multipliable f) :
    ‚àè'[IccFilter] b, f b = ‚àè' b, f b  := by
  apply HasProd.tprod_eq
  apply ((hf.hasProd).comp Finset.tendsto_Icc_atTop_atTop).congr
  simp

@[to_additive]
lemma tprod_IcoFilter_eq_tprod {f : ‚Ñ§ ‚Üí Œ±} (hf : Multipliable f) :
     ‚àè'[IcoFilter] b, f b = ‚àè' b, f b  := by
  apply HasProd.tprod_eq
  apply ((hf.hasProd).comp Finset.tendsto_Ico_atTop_atTop).congr
  simp

@[to_additive]
lemma tprod_IocFilter_eq_tprod {f : ‚Ñ§ ‚Üí Œ±} (hf : Multipliable f) :
     ‚àè'[IocFilter] b, f b = ‚àè' b, f b  := by
  apply HasProd.tprod_eq
  apply ((hf.hasProd).comp Finset.tendsto_Ioc_atTop_atTop).congr
  simp

@[to_additive]
lemma tprod_IooFilter_eq_tprod {f : ‚Ñ§ ‚Üí Œ±} (hf : Multipliable f) :
     ‚àè'[IooFilter] b, f b = ‚àè' b, f b  := by
  apply HasProd.tprod_eq
  apply ((hf.hasProd).comp Finset.tendsto_Ioo_atTop_atTop).congr
  simp

end tprod

end IntervalFilters
