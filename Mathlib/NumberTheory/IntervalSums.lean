/-
Copyright (c) 2025 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck
-/

import Mathlib.Algebra.Order.Ring.Star
import Mathlib.Algebra.Order.Archimedean.Basic
import Mathlib.Algebra.CharP.Defs
import Mathlib.Topology.Algebra.Monoid.Defs
import Mathlib.Topology.Algebra.InfiniteSum.Defs
import Mathlib.Data.Int.Interval
import Mathlib.Order.Filter.AtTopBot.Finset
import Mathlib.Order.Filter.AtTopBot.Group
import Mathlib.Algebra.Group.EvenFunction

/-!
# Sums over symmetric integer intervals

This file contains some lemmas about sums over symmetric integer intervals `Ixx -N N` used in the
definition of the Eisenstein series `E2`. In particular we define `SymmetricConditional`,
`IcoFilter`, `IocFilter` as `SummationFilter`s  corresponding to the intervals
`Icc -N N`, `Ico -N N`, `Ioc -N N` respectively.
We also prove that these filters are all `NeBot` and `LeAtTop`.

-/

open Finset Topology Function

@[to_additive]
lemma Finset.prod_Icc_of_even_eq_range {Œ± : Type*} [CommGroup Œ±] {f : ‚Ñ§ ‚Üí Œ±} (hf : f.Even) (N : ‚Ñï) :
    ‚àè m ‚àà Icc (-N : ‚Ñ§) N, f m = (‚àè m ‚àà range (N + 1), f m) ^ 2 / f 0 := by
  induction N with
  | zero => simp [sq]
  | succ N ih =>
    rw [Nat.cast_add, Nat.cast_one, Icc_succ_succ, prod_union (by simp), prod_pair (by omega), ih,
      prod_range_succ _ (N + 1), hf, ‚Üê pow_two, div_mul_eq_mul_div, ‚Üê mul_pow, Nat.cast_succ]

@[to_additive]
lemma Finset.prod_Icc_eq_prod_Ico_succ {Œ± : Type*} [CommMonoid Œ±] (f : ‚Ñ§ ‚Üí Œ±) {l u : ‚Ñ§}
    (h : l ‚â§ u) : ‚àè m ‚àà Icc l u, f m = (‚àè m ‚àà Ico l u, f m) * f u := by
  simp [Icc_eq_cons_Ico h, mul_comm]

@[to_additive]
lemma Finset.prod_Icc_mul_endpoints {R : Type*} [CommGroup R] (f : ‚Ñ§ ‚Üí R) {N : ‚Ñï} (hn : 1 ‚â§ N) :
    ‚àè m ‚àà Icc (-N : ‚Ñ§) N, f m = f N * f (-N : ‚Ñ§) * ‚àè m ‚àà Icc (-(N - 1) : ‚Ñ§) (N - 1), f m := by
  induction N
  ¬∑ grind
  ¬∑ zify
    rw [Icc_succ_succ, prod_union (by simp)]
    grind

section IntervalFilters

open Filter Function Finset SummationFilter

variable (G : Type*) [Neg G] [Preorder G] [LocallyFiniteOrder G]

namespace SummationFilter

/-- The SummationFilter on Locally finite order `G` corresponding to the symmetric
intervals `Icc (-N) N`¬∑ -/
def symmetricConditional : SummationFilter G where
  filter := atTop.map (fun g ‚Ü¶ Icc (-g) g)

/-- The SummationFilter on `‚Ñ§` corresponding to the intervals `Icc -N N`. Note that this is
the same as the limit over open intervals `Ioo -N N` (see `symCondInt_eq_map_Ioo`). -/
abbrev symCondInt : SummationFilter ‚Ñ§ := symmetricConditional ‚Ñ§

lemma symmetricConditional_eq_map_Icc :
    (symmetricConditional G).filter = atTop.map (fun N ‚Ü¶ Icc (-N) N) := rfl

lemma symCondInt_eq_map_Icc_nat :
    symCondInt.filter = atTop.map (fun N : ‚Ñï ‚Ü¶ Icc (-(N : ‚Ñ§)) N) := by
  rw [symCondInt, symmetricConditional, ‚Üê Nat.map_cast_int_atTop]
  rfl

/-- The SummationFilter on `G` corresponding to the intervals `Ico (-N) N`. -/
def IcoFilter : SummationFilter G where
  filter := atTop.map (fun N ‚Ü¶ Ico (-N) N)

/-- The SummationFilter on `G` corresponding to the intervals `Ioc (-N) N`. -/
def IocFilter : SummationFilter G where
  filter := atTop.map (fun N ‚Ü¶ Ioc (-N) N)

lemma symCondInt_eq_map_Ioo : symCondInt.filter = atTop.map (fun N ‚Ü¶ Ioo (-N) N) := by
  ext s
  simp only [symmetricConditional, ‚Üê Nat.map_cast_int_atTop, Filter.mem_map, mem_atTop_sets,
    Set.mem_preimage]
  refine ‚ü®fun ‚ü®a, ha‚ü© ‚Ü¶ ‚ü®a + 1, fun b hb ‚Ü¶ ?_‚ü©, fun ‚ü®a, ha‚ü© ‚Ü¶ ‚ü®a - 1, fun b hb ‚Ü¶ ?_‚ü©‚ü© <;>
  [ convert ha (b - 1) (by grind) using 1; convert ha (b + 1) (by grind) using 1 ] <;>
  ¬∑ simp only [Finset.ext_iff, mem_Ioo, mem_Icc]
    grind

variable [(atTop : Filter G).NeBot]

instance : (symmetricConditional G).NeBot where
  ne_bot := by simp [symmetricConditional, Filter.NeBot.map]

instance : (IcoFilter G).NeBot where
  ne_bot := by simp [IcoFilter, Filter.NeBot.map]

instance : (IocFilter G).NeBot where
  ne_bot := by simp [IocFilter, Filter.NeBot.map]

section LeAtTop

variable {G : Type*} [AddCommGroup G] [PartialOrder G] [IsOrderedAddMonoid G] [LocallyFiniteOrder G]

lemma symmetricConditional_le_Conditional :
    (symmetricConditional G).filter ‚â§ (conditional G).filter :=
  Filter.map_mono (tendsto_neg_atTop_atBot.prodMk tendsto_id)

instance : (symmetricConditional G).LeAtTop where
  le_atTop := le_trans symmetricConditional_le_Conditional (conditional G).le_atTop

instance : (IcoFilter ‚Ñ§).LeAtTop where
  le_atTop := by
    rw [IcoFilter, map_le_iff_le_comap, ‚Üê @tendsto_iff_comap]
    exact tendsto_Ico_atTop_atTop

instance : (IocFilter ‚Ñ§).LeAtTop where
  le_atTop := by
    rw [IocFilter, map_le_iff_le_comap, ‚Üê @tendsto_iff_comap]
    exact tendsto_Ioc_atTop_atTop

end LeAtTop

end SummationFilter

section comparisons

variable {Œ± : Type*} {f : ‚Ñ§ ‚Üí Œ±} [CommGroup Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±]

@[to_additive]
lemma multipliable_IcoFilter_of_multiplible_symCondInt
    (hf : Multipliable f symCondInt) (hf2 : Tendsto (fun N : ‚Ñï ‚Ü¶ (f N)‚Åª¬π) atTop (ùìù 1)) :
    Multipliable f (IcoFilter ‚Ñ§) := by
  have := (hf.hasProd)
  apply HasProd.multipliable (a := ‚àè'[symCondInt] (b : ‚Ñ§), f b)
  simp only [HasProd, tendsto_map'_iff, symCondInt_eq_map_Icc_nat,
    ‚Üê Nat.map_cast_int_atTop, IcoFilter] at *
  apply tendsto_of_div_tendsto_one _ this
  conv =>
    enter [1, N]
    simp only [Pi.div_apply, comp_apply]
    rw [prod_Icc_eq_prod_Ico_succ _ (by omega)]
  simpa using hf2

@[to_additive]
lemma tprod_symCondInt_eq_tprod_IcoFilter [T2Space Œ±]
    (hf : Multipliable f symCondInt) (hf2 : Tendsto (fun N : ‚Ñï ‚Ü¶ (f N)‚Åª¬π) atTop (ùìù 1)) :
    ‚àè'[symCondInt] b, f b = ‚àè'[IcoFilter ‚Ñ§] b, f b := by
  have := (hf.hasProd)
  apply symm
  apply HasProd.tprod_eq
  simp only [HasProd, tendsto_map'_iff, symCondInt_eq_map_Icc_nat,
    ‚Üê Nat.map_cast_int_atTop, IcoFilter] at *
  apply tendsto_of_div_tendsto_one _ this
  conv =>
    enter [1, N]
    simp only [Pi.div_apply, comp_apply]
    rw [prod_Icc_eq_prod_Ico_succ _ (by omega)]
  simpa using hf2

@[to_additive]
lemma HasProd_symCondInt_iff {Œ± : Type*} [CommMonoid Œ±] [TopologicalSpace Œ±]
    {f : ‚Ñ§ ‚Üí Œ±} {a : Œ±} : HasProd f a symCondInt ‚Üî
    Tendsto (fun N : ‚Ñï ‚Ü¶ ‚àè n ‚àà Finset.Icc (-(N : ‚Ñ§)) (N : ‚Ñ§), f n) atTop (ùìù a) := by
  simp only [HasProd, symCondInt, symCondInt_eq_map_Icc_nat, tendsto_map'_iff]
  rfl

@[to_additive]
lemma HasProd_IcoFilter_iff {Œ± : Type*} [CommMonoid Œ±] [TopologicalSpace Œ±]
    {f : ‚Ñ§ ‚Üí Œ±} {a : Œ±} : HasProd f a (IcoFilter ‚Ñ§) ‚Üî
    Tendsto (fun N : ‚Ñï ‚Ü¶ ‚àè n ‚àà Finset.Ico (-(N : ‚Ñ§)) (N : ‚Ñ§), f n) atTop (ùìù a) := by
  simp only [HasProd, IcoFilter, ‚Üê Nat.map_cast_int_atTop, Filter.map_map, tendsto_map'_iff]
  rfl

@[to_additive]
lemma HasProd_IocFilter_iff {Œ± : Type*} [CommMonoid Œ±] [TopologicalSpace Œ±]
    {f : ‚Ñ§ ‚Üí Œ±} {a : Œ±} : HasProd f a (IocFilter ‚Ñ§) ‚Üî
    Tendsto (fun N : ‚Ñï ‚Ü¶ ‚àè n ‚àà Finset.Ioc (-(N : ‚Ñ§)) (N : ‚Ñ§), f n) atTop (ùìù a) := by
  simp only [HasProd, IocFilter, ‚Üê Nat.map_cast_int_atTop, Filter.map_map, tendsto_map'_iff]
  rfl

end comparisons

end IntervalFilters
