/-
Copyright (c) 2024 Michael Stoll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Stoll
-/
import Mathlib.Analysis.SpecialFunctions.Complex.LogBounds
import Mathlib.NumberTheory.Harmonic.ZetaAsymp
import Mathlib.NumberTheory.LSeries.QuadraticNonvanishing

/-!
# The L-function of a Dirichlet character does not vanish on Re(s) ‚â• 1

The main result in this file is `DirichletCharacter.Lfunction_ne_zero_of_one_le_re`:
if `œá` is a Dirichlet character and `s.re ‚â• 1` and either `œá` is nontrivial or `s ‚â† 1`,
then the L-function of `œá` does not vanish at `s`.

As a consequence, we have the corresponding statement for the Riemann Œ∂ function:
`riemannZeta_ne_zero_of_one_le_re`.

These results are prerequisites for the **Prime Number Theorem** and
**Dirichlet's Theorem** on primes in arithmetic progressions.
-/

section nonvanishing

open Complex

-- This is the key positivity lemma that is used to show that the L-function
-- of a Dirichlet character `œá` does not vanish for `s.re ‚â• 1` (unless `œá^2 = 1` and `s = 1`).
private lemma re_log_comb_nonneg {a : ‚Ñù} (ha‚ÇÄ : 0 ‚â§ a) (ha‚ÇÅ : a < 1) {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ = 1) :
      0 ‚â§ 3 * (-log (1 - a)).re + 4 * (-log (1 - a * z)).re + (-log (1 - a * z ^ 2)).re := by
  have hac‚ÇÄ : ‚Äñ(a : ‚ÑÇ)‚Äñ < 1 := by
    simp only [norm_eq_abs, abs_ofReal, _root_.abs_of_nonneg ha‚ÇÄ, ha‚ÇÅ]
  have hac‚ÇÅ : ‚Äña * z‚Äñ < 1 := by rwa [norm_mul, hz, mul_one]
  have hac‚ÇÇ : ‚Äña * z ^ 2‚Äñ < 1 := by rwa [norm_mul, norm_pow, hz, one_pow, mul_one]
  rw [‚Üê ((hasSum_re <| hasSum_taylorSeries_neg_log hac‚ÇÄ).mul_left 3).add
    ((hasSum_re <| hasSum_taylorSeries_neg_log hac‚ÇÅ).mul_left 4) |>.add
    (hasSum_re <| hasSum_taylorSeries_neg_log hac‚ÇÇ) |>.tsum_eq]
  refine tsum_nonneg fun n ‚Ü¶ ?_
  simp only [‚Üê ofReal_pow, div_natCast_re, ofReal_re, mul_pow, mul_re, ofReal_im, zero_mul,
    sub_zero]
  rcases n.eq_zero_or_pos with rfl | hn
  ¬∑ simp only [pow_zero, Nat.cast_zero, div_zero, mul_zero, one_re, mul_one, add_zero, le_refl]
  ¬∑ simp only [‚Üê mul_div_assoc, ‚Üê add_div]
    refine div_nonneg ?_ n.cast_nonneg
    rw [‚Üê pow_mul, pow_mul', sq, mul_re, ‚Üê sq, ‚Üê sq, ‚Üê sq_abs_sub_sq_re, ‚Üê norm_eq_abs, norm_pow,
      hz]
    convert (show 0 ‚â§ 2 * a ^ n * ((z ^ n).re + 1) ^ 2 by positivity) using 1
    ring

namespace DirichletCharacter

variable {N : ‚Ñï} (œá : DirichletCharacter ‚ÑÇ N)

-- This is the version of the technical positivity lemma for logarithms of Euler factors.
private lemma re_log_comb_nonneg {n : ‚Ñï} (hn : 2 ‚â§ n) {x : ‚Ñù} (hx : 1 < x) (y : ‚Ñù) :
    0 ‚â§ 3 * (-log (1 - (1 : DirichletCharacter ‚ÑÇ N) n * n ^ (-x : ‚ÑÇ))).re +
          4 * (-log (1 - œá n * n ^ (-(x + I * y)))).re +
          (-log (1 - (œá n ^ 2) * n ^ (-(x + 2 * I * y)))).re := by
  by_cases hn' : IsUnit (n : ZMod N)
  ¬∑ have ha‚ÇÄ : 0 ‚â§ (n : ‚Ñù) ^ (-x) := Real.rpow_nonneg n.cast_nonneg _
    have ha‚ÇÅ : (n : ‚Ñù) ^ (-x) < 1 := by
      rw [Real.rpow_neg (Nat.cast_nonneg n), inv_lt_one_iff‚ÇÄ]
      exact .inr <| Real.one_lt_rpow (mod_cast one_lt_two.trans_le hn) <| zero_lt_one.trans hx
    have hz : ‚Äñœá n * (n : ‚ÑÇ) ^ (-(I * y))‚Äñ = 1 := by
      rw [norm_mul, ‚Üê hn'.unit_spec, DirichletCharacter.unit_norm_eq_one œá hn'.unit,
        norm_eq_abs, ‚Üê ofReal_natCast, abs_cpow_eq_rpow_re_of_pos (mod_cast by omega)]
      simp only [neg_re, mul_re, I_re, ofReal_re, zero_mul, I_im, ofReal_im, mul_zero, sub_self,
        neg_zero, Real.rpow_zero, one_mul]
    rw [MulChar.one_apply hn', one_mul]
    convert _root_.re_log_comb_nonneg ha‚ÇÄ ha‚ÇÅ hz using 6
    ¬∑ simp only [ofReal_cpow n.cast_nonneg (-x), ofReal_natCast, ofReal_neg]
    ¬∑ congr 2
      rw [neg_add, cpow_add _ _ <| mod_cast by omega, ‚Üê ofReal_neg, ofReal_cpow n.cast_nonneg (-x),
        ofReal_natCast, mul_left_comm]
    ¬∑ rw [neg_add, cpow_add _ _ <| mod_cast by omega, ‚Üê ofReal_neg, ofReal_cpow n.cast_nonneg (-x),
        ofReal_natCast, show -(2 * I * y) = (2 : ‚Ñï) * -(I * y) by ring, cpow_nat_mul, mul_pow,
        mul_left_comm]
  ¬∑ simp only [MulChar.map_nonunit _ hn', zero_mul, sub_zero, log_one, neg_zero, zero_re, mul_zero,
      neg_add_rev, add_zero, pow_two, le_refl]

/-- The logarithms of the Euler factors of a Dirichlet L-series form a summable sequence. -/
lemma summable_neg_log_one_sub_mul_prime_cpow {s : ‚ÑÇ} (hs : 1 < s.re) :
    Summable fun p : Nat.Primes ‚Ü¶ -log (1 - œá p * (p : ‚ÑÇ) ^ (-s)) := by
  have (p : Nat.Primes) : ‚Äñœá p * (p : ‚ÑÇ) ^ (-s)‚Äñ ‚â§ (p : ‚Ñù) ^ (-s).re := by
    simpa only [norm_mul, norm_natCast_cpow_of_re_ne_zero _ <| re_neg_ne_zero_of_one_lt_re hs]
      using mul_le_of_le_one_left (by positivity) (œá.norm_le_one _)
  refine (Nat.Primes.summable_rpow.mpr ?_).of_nonneg_of_le (fun _ ‚Ü¶ norm_nonneg _) this
    |>.of_norm.clog_one_sub.neg
  simp only [neg_re, neg_lt_neg_iff, hs]

private lemma one_lt_re_one_add {x : ‚Ñù} (hx : 0 < x) (y : ‚Ñù) :
    1 < (1 + x : ‚ÑÇ).re ‚àß 1 < (1 + x + I * y).re ‚àß 1 < (1 + x + 2 * I * y).re := by
  simp only [add_re, one_re, ofReal_re, lt_add_iff_pos_right, hx, mul_re, I_re, zero_mul, I_im,
    ofReal_im, mul_zero, sub_self, add_zero, re_ofNat, im_ofNat, mul_one, mul_im, and_self]

open scoped LSeries.notation in
/-- For positive `x` and nonzero `y` and a Dirichlet character `œá` we have that
`|L(œá^0, x)^3 L(œá, x+iy)^4 L(œá^2, x+2iy)| ‚â• 1. -/
lemma norm_LSeries_product_ge_one {x : ‚Ñù} (hx : 0 < x) (y : ‚Ñù) :
    ‚ÄñL ‚Üó(1 : DirichletCharacter ‚ÑÇ N) (1 + x) ^ 3 * L ‚Üóœá (1 + x + I * y) ^ 4 *
      L ‚Üó(œá ^ 2 :) (1 + x + 2 * I * y)‚Äñ ‚â• 1 := by
  have ‚ü®h‚ÇÄ, h‚ÇÅ, h‚ÇÇ‚ü© := one_lt_re_one_add hx y
  have H‚ÇÄ := summable_neg_log_one_sub_mul_prime_cpow (N := N) 1 h‚ÇÄ
  have H‚ÇÅ := summable_neg_log_one_sub_mul_prime_cpow œá h‚ÇÅ
  have H‚ÇÇ := summable_neg_log_one_sub_mul_prime_cpow (œá ^ 2) h‚ÇÇ
  have hsum‚ÇÄ := (hasSum_re H‚ÇÄ.hasSum).summable.mul_left 3
  have hsum‚ÇÅ := (hasSum_re H‚ÇÅ.hasSum).summable.mul_left 4
  have hsum‚ÇÇ := (hasSum_re H‚ÇÇ.hasSum).summable
  rw [‚Üê LSeries_eulerProduct_exp_log _ h‚ÇÄ, ‚Üê LSeries_eulerProduct_exp_log œá h‚ÇÅ,
    ‚Üê LSeries_eulerProduct_exp_log _ h‚ÇÇ]
  simp only [‚Üê exp_nat_mul, Nat.cast_ofNat, ‚Üê exp_add, norm_eq_abs, abs_exp, add_re, mul_re,
    re_ofNat, im_ofNat, zero_mul, sub_zero, Real.one_le_exp_iff]
  rw [re_tsum H‚ÇÄ, re_tsum H‚ÇÅ, re_tsum H‚ÇÇ, ‚Üê tsum_mul_left, ‚Üê tsum_mul_left,
    ‚Üê tsum_add hsum‚ÇÄ hsum‚ÇÅ, ‚Üê tsum_add (hsum‚ÇÄ.add hsum‚ÇÅ) hsum‚ÇÇ]
  simpa only [neg_add_rev, neg_re, mul_neg, œá.pow_apply' two_ne_zero, ge_iff_le, add_re, one_re,
    ofReal_re, ofReal_add, ofReal_one] using
      tsum_nonneg fun (p : Nat.Primes) ‚Ü¶ œá.re_log_comb_nonneg p.prop.two_le h‚ÇÄ y

variable [NeZero N]

/-- A variant of `DirichletCharacter.norm_LSeries_product_ge_one` in terms of the L-functions. -/
lemma norm_LFunction_product_ge_one {x : ‚Ñù} (hx : 0 < x) (y : ‚Ñù) :
    ‚ÄñLFunctionTrivChar N (1 + x) ^ 3 * LFunction œá (1 + x + I * y) ^ 4 *
      LFunction (œá ^ 2) (1 + x + 2 * I * y)‚Äñ ‚â• 1 := by
  have ‚ü®h‚ÇÄ, h‚ÇÅ, h‚ÇÇ‚ü© := one_lt_re_one_add hx y
  rw [LFunctionTrivChar, DirichletCharacter.LFunction_eq_LSeries 1 h‚ÇÄ,
    œá.LFunction_eq_LSeries h‚ÇÅ, (œá ^ 2).LFunction_eq_LSeries h‚ÇÇ]
  exact norm_LSeries_product_ge_one œá hx y

open Asymptotics Topology Filter

open Homeomorph in
lemma LFunctionTrivChar_isBigO_near_one_horizontal :
    (fun x : ‚Ñù ‚Ü¶ LFunctionTrivChar N (1 + x)) =O[ùìù[>] 0] fun x ‚Ü¶ (1 : ‚ÑÇ) / x := by
  have : (fun w : ‚ÑÇ ‚Ü¶ LFunctionTrivChar N (1 + w)) =O[ùìù[‚â†] 0] (1 / ¬∑) := by
    have H : Tendsto (fun w ‚Ü¶ w * LFunctionTrivChar N (1 + w)) (ùìù[‚â†] 0)
        (ùìù <| ‚àè p ‚àà N.primeFactors, (1 - (p : ‚ÑÇ)‚Åª¬π)) := by
      convert (LFunctionTrivChar_residue_one (N := N)).comp (f := fun w ‚Ü¶ 1 + w) ?_ using 1
      ¬∑ simp only [Function.comp_def, add_sub_cancel_left]
      ¬∑ simpa only [tendsto_iff_comap, Homeomorph.coe_addLeft, add_zero, map_le_iff_le_comap] using
          ((Homeomorph.addLeft (1 : ‚ÑÇ)).map_punctured_nhds_eq 0).le
    exact (isBigO_mul_iff_isBigO_div eventually_mem_nhdsWithin).mp <| H.isBigO_one ‚ÑÇ
  exact (isBigO_comp_ofReal_nhds_ne this).mono <| nhds_right'_le_nhds_ne 0

omit [NeZero N] in
private lemma one_add_I_mul_ne_one_or {y : ‚Ñù} (hy : y ‚â† 0 ‚à® œá ‚â† 1) :
    1 + I * y ‚â† 1 ‚à® œá ‚â† 1:= by
  simpa only [ne_eq, add_right_eq_self, _root_.mul_eq_zero, I_ne_zero, ofReal_eq_zero, false_or]
    using hy

lemma LFunction_isBigO_horizontal {y : ‚Ñù} (hy : y ‚â† 0 ‚à® œá ‚â† 1) :
    (fun x : ‚Ñù ‚Ü¶ LFunction œá (1 + x + I * y)) =O[ùìù[>] 0] fun _ ‚Ü¶ (1 : ‚ÑÇ) := by
  refine IsBigO.mono ?_ nhdsWithin_le_nhds
  simp_rw [add_comm (1 : ‚ÑÇ), add_assoc]
  have := (œá.differentiableAt_LFunction _ <| one_add_I_mul_ne_one_or œá hy).continuousAt
  rw [‚Üê zero_add (1 + _)] at this
  exact this.comp (f := fun x : ‚Ñù ‚Ü¶ x + (1 + I * y)) (x := 0) (by fun_prop) |>.tendsto.isBigO_one ‚ÑÇ

private lemma LFunction_isBigO_horizontal_of_eq_zero {y : ‚Ñù} (hy : y ‚â† 0 ‚à® œá ‚â† 1)
    (h : LFunction œá (1 + I * y) = 0) :
    (fun x : ‚Ñù ‚Ü¶ LFunction œá (1 + x + I * y)) =O[ùìù[>] 0] fun x : ‚Ñù ‚Ü¶ (x : ‚ÑÇ) := by
  simp_rw [add_comm (1 : ‚ÑÇ), add_assoc]
  have := (œá.differentiableAt_LFunction _ <| one_add_I_mul_ne_one_or œá hy).hasDerivAt
  rw [‚Üê zero_add (1 + _)] at this
  simpa only [zero_add, h, sub_zero]
    using (Complex.isBigO_comp_ofReal_nhds
      (this.comp_add_const 0 _).differentiableAt.isBigO_sub) |>.mono nhdsWithin_le_nhds

-- intermediate statement, special case of the next theorem
private lemma LFunction_ne_zero_of_not_quadratic_or_ne_one {t : ‚Ñù} (h : œá ^ 2 ‚â† 1 ‚à® t ‚â† 0) :
    LFunction œá (1 + I * t) ‚â† 0 := by
  intro Hz
  have hz‚ÇÅ : t ‚â† 0 ‚à® œá ‚â† 1 := by
    refine h.symm.imp_right (fun h H ‚Ü¶ ?_)
    simp only [H, one_pow, ne_eq, not_true_eq_false] at h
  have hz‚ÇÇ : 2 * t ‚â† 0 ‚à® œá ^ 2 ‚â† 1 :=
    h.symm.imp_left <| mul_ne_zero two_ne_zero
  have help (x : ‚Ñù) : ((1 / x) ^ 3 * x ^ 4 * 1 : ‚ÑÇ) = x := by
    rcases eq_or_ne x 0 with rfl | h
    ¬∑ rw [ofReal_zero, zero_pow (by omega), mul_zero, mul_one]
    ¬∑ rw [one_div, inv_pow, pow_succ _ 3, ‚Üê mul_assoc,
        inv_mul_cancel‚ÇÄ <| pow_ne_zero 3 (ofReal_ne_zero.mpr h), one_mul, mul_one]
  -- put together the various `IsBigO` statements and `norm_LFunction_product_ge_one`
  -- to derive a contradiction
  have H‚ÇÄ : (fun _ : ‚Ñù ‚Ü¶ (1 : ‚Ñù)) =O[ùìù[>] 0]
      fun x ‚Ü¶ LFunctionTrivChar N (1 + x) ^ 3 * LFunction œá (1 + x + I * t) ^ 4 *
                   LFunction (œá ^ 2) (1 + x + 2 * I * t) :=
    IsBigO.of_bound' <| eventually_nhdsWithin_of_forall
      fun _ hx ‚Ü¶ (norm_one (Œ± := ‚Ñù)).symm ‚ñ∏ (œá.norm_LFunction_product_ge_one hx t).le
  have H := (LFunctionTrivChar_isBigO_near_one_horizontal (N := N)).pow 3 |>.mul <|
    (œá.LFunction_isBigO_horizontal_of_eq_zero hz‚ÇÅ Hz).pow 4 |>.mul <|
    LFunction_isBigO_horizontal _ hz‚ÇÇ
  simp only [ofReal_mul, ofReal_ofNat, mul_left_comm I, ‚Üê mul_assoc, help] at H
  -- go via absolute value to translate into a statement over `‚Ñù`
  replace H := (H‚ÇÄ.trans H).norm_right
  simp only [norm_eq_abs, abs_ofReal] at H
  exact isLittleO_irrefl (.of_forall (fun _ ‚Ü¶ one_ne_zero)) <| H.of_norm_right.trans_isLittleO
    <| isLittleO_id_one.mono nhdsWithin_le_nhds

/-- If `œá` is a Dirichlet character, then `L(œá, s)` does not vanish when `s.re = 1`
except when `œá` is trivial and `s = 1` (then `L(œá, s)` has a simple pole at `s = 1`). -/
theorem LFunction_ne_zero_of_re_eq_one {s : ‚ÑÇ} (hs : s.re = 1) (hœás : œá ‚â† 1 ‚à® s ‚â† 1) :
    LFunction œá s ‚â† 0 := by
  by_cases h : œá ^ 2 = 1 ‚àß s = 1
  ¬∑ exact h.2 ‚ñ∏ LFunction_at_one_ne_zero_of_quadratic h.1 <| hœás.neg_resolve_right h.2
  ¬∑ have hs' : s = 1 + I * s.im := by
      conv_lhs => rw [‚Üê re_add_im s, hs, ofReal_one, mul_comm]
    rw [not_and_or, ‚Üê ne_eq, ‚Üê ne_eq, hs', add_right_ne_self] at h
    replace h : œá ^ 2 ‚â† 1 ‚à® s.im ‚â† 0 :=
      h.imp_right (fun H ‚Ü¶ by exact_mod_cast right_ne_zero_of_mul H)
    exact hs'.symm ‚ñ∏ œá.LFunction_ne_zero_of_not_quadratic_or_ne_one h

/-- If `œá` is a Dirichlet character, then `L(œá, s)` does not vanish for `s.re ‚â• 1`
except when `œá` is trivial and `s = 1` (then `L(œá, s)` has a simple pole at `s = 1`). -/
theorem LFunction_ne_zero_of_one_le_re ‚¶És : ‚ÑÇ‚¶Ñ (hœás : œá ‚â† 1 ‚à® s ‚â† 1) (hs : 1 ‚â§ s.re) :
    LFunction œá s ‚â† 0 :=
  hs.eq_or_lt.casesOn (fun hs ‚Ü¶ LFunction_ne_zero_of_re_eq_one œá hs.symm hœás)
    fun hs ‚Ü¶ LFunction_eq_LSeries œá hs ‚ñ∏ LSeries_ne_zero_of_one_lt_re œá hs

-- Interesting special case:
variable {œá} in
/-- The L-function of a nontrivial Dirichlet character does not vanish at `s = 1`. -/
theorem LFunction_apply_one_ne_zero (hœá : œá ‚â† 1) : LFunction œá 1 ‚â† 0 :=
  LFunction_ne_zero_of_one_le_re œá (.inl hœá) <| one_re ‚ñ∏ le_rfl

end DirichletCharacter

open DirichletCharacter in
/-- The Riemann Zeta Function does not vanish on the closed half-plane `re s ‚â• 1`.
(Note that the value at `s = 1` is a junk value, which happens to be nonzero.) -/
lemma riemannZeta_ne_zero_of_one_le_re ‚¶És : ‚ÑÇ‚¶Ñ (hs : 1 ‚â§ s.re) :
    riemannZeta s ‚â† 0 := by
  rcases eq_or_ne s 1 with rfl | hs‚ÇÄ
  ¬∑ exact riemannZeta_one_ne_zero
  ¬∑ exact LFunction_modOne_eq (œá := 1) ‚ñ∏ LFunction_ne_zero_of_one_le_re _ (.inr hs‚ÇÄ) hs

end nonvanishing
