/-
Copyright (c) 2025 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.Analysis.Asymptotics.SpecificAsymptotics
import Mathlib.Analysis.InnerProductSpace.Calculus
import Mathlib.Analysis.SpecialFunctions.ImproperIntegrals
import Mathlib.NumberTheory.AbelSummation
import Mathlib.NumberTheory.LSeries.Basic

/-!
# Partial sums of coefficients of L-series

We prove several results involving partial sums of coefficients (or norm of coefficients) of
L-series.

## Main results

* `LSeriesSummable_of_sum_norm_bigO`: for `f : ‚Ñï ‚Üí ‚ÑÇ`, if the partial sums
  `‚àë k ‚àà Icc 1 n, ‚Äñf k‚Äñ` are `O(n ^ r)` for some real `0 ‚â§ r`, then the L-series `LSeries f`
  converges at `s : ‚ÑÇ` for all `s` such that `r < s.re`.

* `LSeries_eq_mul_integral` : for `f : ‚Ñï ‚Üí ‚ÑÇ`, if the partial sums `‚àë k ‚àà Icc 1 n, f k` are
  `O(n ^ r)` for some real `0 ‚â§ r` and the L-series `LSeries f` converges at `s : ‚ÑÇ` with
  `r < s.re`, then `LSeries f s = s * ‚à´ t in Set.Ioi 1, (‚àë k ‚àà Icc 1 ‚åät‚åã‚Çä, f k) * t ^ (-(s + 1))`.

-/

open Finset Filter MeasureTheory Topology Complex Asymptotics

section summable

variable {f : ‚Ñï ‚Üí ‚ÑÇ} {r : ‚Ñù} {s : ‚ÑÇ}

private theorem LSeriesSummable_of_sum_norm_bigO_aux (hf : f 0 = 0)
    (hO : (fun n ‚Ü¶ ‚àë k ‚àà Icc 1 n, ‚Äñf k‚Äñ) =O[atTop] fun n ‚Ü¶ (n : ‚Ñù) ^ r)
    (hr : 0 ‚â§ r) (hs : r < s.re) :
    LSeriesSummable f s := by
  have h‚ÇÅ : -s ‚â† 0 := neg_ne_zero.mpr <| ne_zero_of_re_pos (hr.trans_lt hs)
  have h‚ÇÇ : (-s).re + r ‚â§ 0 := by
    rw [neg_re, neg_add_nonpos_iff]
    exact hs.le
  have h‚ÇÉ (t : ‚Ñù) (ht : t ‚àà Set.Ici 1) : DifferentiableAt ‚Ñù (fun x : ‚Ñù ‚Ü¶ ‚Äñ(x : ‚ÑÇ) ^ (-s)‚Äñ) t :=
    have ht' : t ‚â† 0 := (zero_lt_one.trans_le ht).ne'
    (differentiableAt_id.ofReal_cpow_const ht' h‚ÇÅ).norm ‚Ñù <|
      (cpow_ne_zero_iff_of_exponent_ne_zero h‚ÇÅ).mpr <| ofReal_ne_zero.mpr ht'
  have h‚ÇÑ : (deriv fun t : ‚Ñù ‚Ü¶ ‚Äñ(t : ‚ÑÇ) ^ (-s)‚Äñ) =·∂†[atTop] fun t ‚Ü¶ -s.re * t ^ (-(s.re +1)) := by
    filter_upwards [eventually_gt_atTop 0] with t ht
    rw [deriv_norm_ofReal_cpow _ ht, neg_re, neg_add']
  simp_rw [LSeriesSummable, funext (LSeries.term_def‚ÇÄ hf s), mul_comm (f _)]
  refine summable_mul_of_bigO_atTop' (f := fun t ‚Ü¶ (t : ‚ÑÇ) ^ (-s))
    (g := fun t ‚Ü¶ t ^ (-(s.re + 1) + r)) _ h‚ÇÉ ?_ ?_ ?_ ?_
  ¬∑ refine (integrableOn_Ici_iff_integrableOn_Ioi.mpr
      (integrableOn_Ioi_deriv_norm_ofReal_cpow zero_lt_one ?_)).locallyIntegrableOn
    exact neg_re _ ‚ñ∏ neg_nonpos.mpr  <| hr.trans hs.le
  ¬∑ refine (IsBigO.mul_atTop_rpow_natCast_of_isBigO_rpow _ _ _ ?_ hO h‚ÇÇ).congr_right  (by simp)
    exact (norm_ofReal_cpow_eventually_eq_atTop _).isBigO.natCast_atTop
  ¬∑ refine h‚ÇÑ.isBigO.of_const_mul_right.mul_atTop_rpow_of_isBigO_rpow _ r _ ?_ le_rfl
    exact (hO.comp_tendsto tendsto_nat_floor_atTop).trans <|
      isEquivalent_nat_floor.isBigO.rpow hr (eventually_ge_atTop 0)
  ¬∑ rwa [integrableAtFilter_rpow_atTop_iff, neg_add_lt_iff_lt_add, add_neg_cancel_right]

/-- If the partial sums `‚àë k ‚àà Icc 1 n, ‚Äñf k‚Äñ` are `O(n ^ r)` for some real `0 ‚â§ r`, then the
L-series `LSeries f` converges at `s : ‚ÑÇ` for all `s` such that `r < s.re`. -/
theorem LSeriesSummable_of_sum_norm_bigO
    (hO : (fun n ‚Ü¶ ‚àë k ‚àà Icc 1 n, ‚Äñf k‚Äñ) =O[atTop] fun n ‚Ü¶ (n : ‚Ñù) ^ r)
    (hr : 0 ‚â§ r) (hs : r < s.re) :
    LSeriesSummable f s := by
  have h‚ÇÅ : (fun n ‚Ü¶ if n = 0 then 0 else f n) =·∂†[atTop] f := by
    filter_upwards [eventually_ne_atTop 0] with n hn using by simp_rw [if_neg hn]
  refine (LSeriesSummable_of_sum_norm_bigO_aux (if_pos rfl) ?_ hr hs).congr' _ h‚ÇÅ
  refine hO.congr' (Eventually.of_forall fun _ ‚Ü¶ Finset.sum_congr rfl fun _ h ‚Ü¶ ?_) EventuallyEq.rfl
  rw [if_neg (zero_lt_one.trans_le (mem_Icc.mp h).1).ne']

/-- If `f` takes nonnegative real values and the partial sums `‚àë k ‚àà Icc 1 n, f k` are `O(n ^ r)`
for some real `0 ‚â§ r`, then the L-series `LSeries f` converges at `s : ‚ÑÇ` for all `s`
such that `r < s.re`. -/
theorem LSeriesSummable_of_sum_norm_bigO_and_nonneg
    {f : ‚Ñï ‚Üí ‚Ñù} (hO : (fun n ‚Ü¶ ‚àë k ‚àà Icc 1 n, f k) =O[atTop] fun n ‚Ü¶ (n : ‚Ñù) ^ r)
    (hf : ‚àÄ n, 0 ‚â§ f n) (hr : 0 ‚â§ r) (hs : r < s.re) :
    LSeriesSummable (fun n ‚Ü¶ f n) s :=
  LSeriesSummable_of_sum_norm_bigO (by simpa [_root_.abs_of_nonneg (hf _)]) hr hs

end summable

section integralrepresentation

private theorem LSeries_eq_mul_integral_aux {f : ‚Ñï ‚Üí ‚ÑÇ} (hf : f 0 = 0) {r : ‚Ñù} (hr : 0 ‚â§ r) {s : ‚ÑÇ}
    (hs : r < s.re) (hS : LSeriesSummable f s)
    (hO : (fun n ‚Ü¶ ‚àë k ‚àà Icc 1 n, f k) =O[atTop] fun n ‚Ü¶ (n : ‚Ñù) ^ r) :
    LSeries f s = s * ‚à´ t in Set.Ioi (1 : ‚Ñù), (‚àë k ‚àà Icc 1 ‚åät‚åã‚Çä, f k) * t ^ (- (s + 1)) := by
  have h‚ÇÅ : (-s - 1).re + r < -1 := by
    rwa [sub_re, one_re, neg_re, neg_sub_left, neg_add_lt_iff_lt_add, add_neg_cancel_comm]
  have h‚ÇÇ : s ‚â† 0 := ne_zero_of_re_pos (hr.trans_lt hs)
  have h‚ÇÉ (t : ‚Ñù) (ht : t ‚àà Set.Ici 1) : DifferentiableAt ‚Ñù (fun x : ‚Ñù ‚Ü¶ (x : ‚ÑÇ) ^ (-s)) t :=
    differentiableAt_id.ofReal_cpow_const (zero_lt_one.trans_le ht).ne' (neg_ne_zero.mpr h‚ÇÇ)
  have h‚ÇÑ : ‚àÄ n, ‚àë k ‚àà Icc 0 n, f k = ‚àë k ‚àà Icc 1 n, f k := fun n ‚Ü¶ by
    rw [‚Üê Nat.Icc_insert_succ_left n.zero_le, sum_insert (by aesop), hf, zero_add, zero_add]
  simp_rw [‚Üê h‚ÇÑ] at hO
  rw [‚Üê integral_mul_left]
  refine tendsto_nhds_unique ((tendsto_add_atTop_iff_nat 1).mpr hS.hasSum.tendsto_sum_nat) ?_
  simp_rw [Nat.range_succ_eq_Icc_zero, LSeries.term_def‚ÇÄ hf, mul_comm (f _)]
  convert tendsto_sum_mul_atTop_nhds_one_sub_integral‚ÇÄ (f := fun x ‚Ü¶ (x : ‚ÑÇ) ^ (-s)) (l := 0)
    ?_ hf h‚ÇÉ ?_ ?_ ?_ (integrableAtFilter_rpow_atTop_iff.mpr h‚ÇÅ)
  ¬∑ rw [zero_sub, ‚Üê integral_neg]
    refine setIntegral_congr_fun measurableSet_Ioi fun t ht ‚Ü¶ ?_
    rw [deriv_ofReal_cpow_const (zero_lt_one.trans ht).ne', h‚ÇÑ]
    ¬∑ ring_nf
    ¬∑ exact neg_ne_zero.mpr <| ne_zero_of_re_pos (hr.trans_lt hs)
  ¬∑ refine (integrableOn_Ici_iff_integrableOn_Ioi.mpr <|
      integrableOn_Ioi_deriv_ofReal_cpow zero_lt_one
        (by simpa using hr.trans_lt hs)).locallyIntegrableOn
  ¬∑ have hlim : Tendsto (fun n : ‚Ñï ‚Ü¶ (n : ‚Ñù) ^ (-(s.re - r))) atTop (ùìù 0) :=
      (tendsto_rpow_neg_atTop (by rwa [sub_pos])).comp tendsto_natCast_atTop_atTop
    refine (IsBigO.mul_atTop_rpow_natCast_of_isBigO_rpow (-s.re) _ _ ?_ hO ?_).trans_tendsto hlim
    ¬∑ exact isBigO_norm_left.mp <| (norm_ofReal_cpow_eventually_eq_atTop _).isBigO.natCast_atTop
    ¬∑ linarith
  ¬∑ refine .mul_atTop_rpow_of_isBigO_rpow (-(s + 1).re) r _ ?_ ?_ (by rw [‚Üê neg_re, neg_add'])
    ¬∑ simpa [- neg_add_rev, neg_add'] using isBigO_deriv_ofReal_cpow_const_atTop _
    ¬∑ exact (hO.comp_tendsto tendsto_nat_floor_atTop).trans <|
        isEquivalent_nat_floor.isBigO.rpow hr (eventually_ge_atTop 0)

/-- If the partial sums `‚àë k ‚àà Icc 1 n, f k` are `O(n ^ r)` for some real `0 ‚â§ r` and the
L-series `LSeries f` converges at `s : ‚ÑÇ` with `r < s.re`, then
`LSeries f s = s * ‚à´ t in Set.Ioi 1, (‚àë k ‚àà Icc 1 ‚åät‚åã‚Çä, f k) * t ^ (-(s + 1))`. -/
theorem LSeries_eq_mul_integral (f : ‚Ñï ‚Üí ‚ÑÇ) {r : ‚Ñù} (hr : 0 ‚â§ r) {s : ‚ÑÇ} (hs : r < s.re)
    (hS : LSeriesSummable f s)
    (hO : (fun n ‚Ü¶ ‚àë k ‚àà Icc 1 n, f k) =O[atTop] fun n ‚Ü¶ (n : ‚Ñù) ^ r) :
    LSeries f s = s * ‚à´ t in Set.Ioi (1 : ‚Ñù), (‚àë k ‚àà Icc 1 ‚åät‚åã‚Çä, f k) * t ^ (-(s + 1)) := by
  rw [‚Üê LSeriesSummable_congr' s (f := fun n ‚Ü¶ if n = 0 then 0 else f n)
    (by filter_upwards [eventually_ne_atTop 0] with n h using if_neg h)] at hS
  have (n) : ‚àë k ‚àà Icc 1 n, (if k = 0 then 0 else f k) = ‚àë k ‚àà Icc 1 n, f k :=
    Finset.sum_congr rfl fun k hk ‚Ü¶ by rw [if_neg (zero_lt_one.trans_le (mem_Icc.mp hk).1).ne']
  rw [‚Üê LSeries_congr _ (fun _ ‚Ü¶ if_neg _), LSeries_eq_mul_integral_aux (if_pos rfl) hr hs hS] <;>
  simp_all

/-- A version of `LSeries_eq_mul_integral` where we use the stronger condition that the partial sums
`‚àë k ‚àà Icc 1 n, ‚Äñf k‚Äñ` are `O(n ^ r)` to deduce the integral representation. -/
theorem LSeries_eq_mul_integral' (f : ‚Ñï ‚Üí ‚ÑÇ) {r : ‚Ñù} (hr : 0 ‚â§ r) {s : ‚ÑÇ} (hs : r < s.re)
    (hO : (fun n ‚Ü¶ ‚àë k ‚àà Icc 1 n, ‚Äñf k‚Äñ) =O[atTop] fun n ‚Ü¶ (n : ‚Ñù) ^ r) :
    LSeries f s = s * ‚à´ t in Set.Ioi (1 : ‚Ñù), (‚àë k ‚àà Icc 1 ‚åät‚åã‚Çä, f k) * t ^ (-(s + 1)) :=
  LSeries_eq_mul_integral _ hr hs (LSeriesSummable_of_sum_norm_bigO hO hr hs) <|
    (isBigO_of_le _ fun _ ‚Ü¶ (norm_sum_le _ _).trans <| Real.le_norm_self _).trans hO

/-- If `f` takes nonnegative real values and the partial sums `‚àë k ‚àà Icc 1 n, f k` are `O(n ^ r)`
for some real `0 ‚â§ r`, then for `s : ‚ÑÇ` with `r < s.re`, we have
`LSeries f s = s * ‚à´ t in Set.Ioi 1, (‚àë k ‚àà Icc 1 ‚åät‚åã‚Çä, f k) * t ^ (-(s + 1))`. -/
theorem LSeries_eq_mul_integral_of_nonneg (f : ‚Ñï ‚Üí ‚Ñù) {r : ‚Ñù} (hr : 0 ‚â§ r) {s : ‚ÑÇ} (hs : r < s.re)
    (hO : (fun n ‚Ü¶ ‚àë k ‚àà Icc 1 n, f k) =O[atTop] fun n ‚Ü¶ (n : ‚Ñù) ^ r) (hf : ‚àÄ n, 0 ‚â§ f n) :
    LSeries (fun n ‚Ü¶ f n) s =
      s * ‚à´ t in Set.Ioi (1 : ‚Ñù), (‚àë k ‚àà Icc 1 ‚åät‚åã‚Çä, (f k : ‚ÑÇ)) * t ^ (-(s + 1)) :=
  LSeries_eq_mul_integral' _ hr hs <| hO.congr_left fun _ ‚Ü¶ by simp [_root_.abs_of_nonneg (hf _)]

end integralrepresentation
