/-
Copyright (c) 2024 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/

import Mathlib.Analysis.Fourier.ZMod
import Mathlib.Analysis.NormedSpace.Connected
import Mathlib.NumberTheory.LSeries.RiemannZeta

/-!
# L-series of functions on `ZMod N`

We show that if `N` is a positive integer and `Œ¶ : ZMod N ‚Üí ‚ÑÇ`, then the L-series of `Œ¶` has
analytic continuation (away from a pole at `s = 1` if `‚àë j, Œ¶ j ‚â† 0`). Assuming `Œ¶` is either
even or odd, we define completed L-series and show analytic continuation of these too.

The most familiar case is when `Œ¶` is a Dirichlet character, but the results here are valid
for general functions; for the specific case of Dirichlet characters see
`Mathlib.NumberTheory.LSeries.DirichletContinuation`.

## Main definitions

* `ZMod.LFunction Œ¶ s`: the meromorphic continuation of the function `‚àë n : ‚Ñï, Œ¶ n * n ^ (-s)`.
* `ZMod.completedLFunction Œ¶ s`: the completed L-function, which for *almost* all `s` is equal to
  `LFunction Œ¶ s` multiplied by an Archimedean Gamma-factor.

Note that `ZMod.completedLFunction Œ¶ s` is only mathematically well-defined if `Œ¶` is either even
or odd. We have arbitrarily defined it to be the completed L-function of the odd part of `Œ¶`, if
`Œ¶` is not even.

## Main theorems

Results for non-completed L-functions:

* `ZMod.LFunction_eq_LSeries`: if `1 < re s` then the `LFunction` coincides with the naive
  `LSeries`.
* `ZMod.differentiableAt_LFunction`: `ZMod.LFunction Œ¶` is differentiable at `s ‚àà ‚ÑÇ` if either
  `s ‚â† 1` or `‚àë j, Œ¶ j = 0`.
* `ZMod.LFunction_one_sub`: the functional equation relating `LFunction Œ¶ (1 - s)` to
  `LFunction (ùìï Œ¶) s`, where `ùìï` is the Fourier transform.

Results for completed L-functions:

* `ZMod.LFunction_eq_completed_div_gammaFactor_even` and
  `LFunction_eq_completed_div_gammaFactor_odd`: we have
  `LFunction Œ¶ s = completedLFunction Œ¶ s / Gamma‚Ñù s` for `Œ¶` even, and
  `LFunction Œ¶ s = completedLFunction Œ¶ s / Gamma‚Ñù (s + 1)` for `Œ¶` odd. (We formulate it this way
  around so it is still valid at the poles of the Gamma factor.)
* `ZMod.differentiableAt_completedLFunction`: `ZMod.completedLFunction Œ¶` is differentiable at
  `s ‚àà ‚ÑÇ`, unless `s = 1` and `‚àë j, Œ¶ j ‚â† 0`, or `s = 0` and `Œ¶ 0 ‚â† 0`.
* `ZMod.completedLFunction_one_sub`: the functional equation relating
  `completedLFunction Œ¶ (1 - s)` to `completedLFunction (ùìï Œ¶) s`.
-/

open HurwitzZeta Complex ZMod Finset Classical Topology Filter Set

open scoped Real

namespace ZMod

variable {N : ‚Ñï} [NeZero N]

/-- If `Œ¶` is a periodic function, then the L-series of `Œ¶` converges for `1 < re s`. -/
lemma LSeriesSummable_of_one_lt_re (Œ¶ : ZMod N ‚Üí ‚ÑÇ) {s : ‚ÑÇ} (hs : 1 < re s) :
    LSeriesSummable (Œ¶ ¬∑) s := by
  let c := max' _ <| univ_nonempty.image (Complex.abs ‚àò Œ¶)
  refine LSeriesSummable_of_bounded_of_one_lt_re (fun n _ ‚Ü¶ le_max' _ _ ?_) (m := c) hs
  exact mem_image_of_mem _ (mem_univ _)

/--
The unique meromorphic function `‚ÑÇ ‚Üí ‚ÑÇ` which agrees with `‚àë' n : ‚Ñï, Œ¶ n / n ^ s` wherever the
latter is convergent. This is constructed as a linear combination of Hurwitz zeta functions.

Note that this is not the same as `LSeries Œ¶`: they agree in the convergence range, but
`LSeries Œ¶ s` is defined to be `0` if `re s ‚â§ 1`.
 -/
noncomputable def LFunction (Œ¶ : ZMod N ‚Üí ‚ÑÇ) (s : ‚ÑÇ) : ‚ÑÇ :=
  N ^ (-s) * ‚àë j : ZMod N, Œ¶ j * hurwitzZeta (toAddCircle j) s

/-- The L-function of a function on `ZMod 1` is a scalar multiple of the Riemann zeta function. -/
lemma LFunction_modOne_eq (Œ¶ : ZMod 1 ‚Üí ‚ÑÇ) (s : ‚ÑÇ) :
    LFunction Œ¶ s = Œ¶ 0 * riemannZeta s := by
  simp only [LFunction, Nat.cast_one, one_cpow, ‚Üê singleton_eq_univ (0 : ZMod 1), sum_singleton,
    map_zero, hurwitzZeta_zero, one_mul]

/-- For `1 < re s` the congruence L-function agrees with the sum of the Dirichlet series. -/
lemma LFunction_eq_LSeries (Œ¶ : ZMod N ‚Üí ‚ÑÇ) {s : ‚ÑÇ} (hs : 1 < re s) :
    LFunction Œ¶ s = LSeries (Œ¶ ¬∑) s := by
  rw [LFunction, LSeries, mul_sum, Nat.sumByResidueClasses (LSeriesSummable_of_one_lt_re Œ¶ hs) N]
  congr 1 with j
  have : (j.val / N : ‚Ñù) ‚àà Set.Icc 0 1 := mem_Icc.mpr ‚ü®by positivity,
    (div_le_one (Nat.cast_pos.mpr <| NeZero.pos _)).mpr <| Nat.cast_le.mpr (val_lt j).le‚ü©
  rw [toAddCircle_apply, ‚Üê (hasSum_hurwitzZeta_of_one_lt_re this hs).tsum_eq, ‚Üê mul_assoc,
    ‚Üê tsum_mul_left]
  congr 1 with m
  -- The following manipulation is slightly delicate because `(x * y) ^ s = x ^ s * y ^ s` is
  -- false for general complex `x`, `y`, but it is true if `x` and `y` are non-negative reals, so
  -- we have to carefully juggle coercions `‚Ñï ‚Üí ‚Ñù ‚Üí ‚ÑÇ`.
  calc N ^ (-s) * Œ¶ j * (1 / (m + (j.val / N : ‚Ñù)) ^ s)
  _ = Œ¶ j * (N ^ (-s) * (1 / (m + (j.val / N : ‚Ñù)) ^ s)) := by
    rw [‚Üê mul_assoc, mul_comm _ (Œ¶ _)]
  _ = Œ¶ j * (1 / (N : ‚Ñù) ^ s * (1 / ((j.val + N * m) / N : ‚Ñù) ^ s)) := by
    simp only [cpow_neg, ‚Üê one_div, ofReal_div, ofReal_natCast, add_comm, add_div, ofReal_add,
      ofReal_mul, mul_div_cancel_left‚ÇÄ (m : ‚ÑÇ) (Nat.cast_ne_zero.mpr (NeZero.ne N))]
  _ = Œ¶ j / ((N : ‚Ñù) * ((j.val + N * m) / N : ‚Ñù)) ^ s := by -- this is the delicate step!
    rw [one_div_mul_one_div, mul_one_div, mul_cpow_ofReal_nonneg] <;> positivity
  _ = Œ¶ j / (N * (j.val + N * m) / N) ^ s := by
    simp only [ofReal_natCast, ofReal_div, ofReal_add, ofReal_mul, mul_div_assoc]
  _ = Œ¶ j / (j.val + N * m) ^ s := by
    rw [mul_div_cancel_left‚ÇÄ _ (Nat.cast_ne_zero.mpr (NeZero.ne N))]
  _ = Œ¶ ‚Üë(j.val + N * m) / (‚Üë(j.val + N * m)) ^ s := by
    simp only [Nat.cast_add, Nat.cast_mul, natCast_zmod_val, natCast_self, zero_mul, add_zero]
  _ = LSeries.term (Œ¶ ¬∑) s (j.val + N * m) := by
    rw [LSeries.term_of_ne_zero' (ne_zero_of_one_lt_re hs)]

lemma differentiableAt_LFunction (Œ¶ : ZMod N ‚Üí ‚ÑÇ) (s : ‚ÑÇ) (hs : s ‚â† 1 ‚à® ‚àë j, Œ¶ j = 0) :
    DifferentiableAt ‚ÑÇ (LFunction Œ¶) s := by
  apply (differentiable_neg.const_cpow (Or.inl <| NeZero.ne _) s).mul
  rcases ne_or_eq s 1 with hs' | rfl
  ¬∑ exact .sum fun j _ ‚Ü¶ (differentiableAt_hurwitzZeta _ hs').const_mul _
  ¬∑ have := DifferentiableAt.sum (u := univ) fun j _ ‚Ü¶
      (differentiableAt_hurwitzZeta_sub_one_div (toAddCircle j)).const_mul (Œ¶ j)
    simpa only [mul_sub, sum_sub_distrib, ‚Üê sum_mul, hs.neg_resolve_left rfl, zero_mul, sub_zero]

lemma differentiable_LFunction_of_sum_zero {Œ¶ : ZMod N ‚Üí ‚ÑÇ} (hŒ¶ : ‚àë j, Œ¶ j = 0) :
    Differentiable ‚ÑÇ (LFunction Œ¶) :=
  fun s ‚Ü¶ differentiableAt_LFunction Œ¶ s (Or.inr hŒ¶)

/-- The L-function of `Œ¶` has a residue at `s = 1` equal to the average value of `Œ¶`. -/
lemma LFunction_residue_one (Œ¶ : ZMod N ‚Üí ‚ÑÇ) :
    Tendsto (fun s ‚Ü¶ (s - 1) * LFunction Œ¶ s) (ùìù[‚â†] 1) (ùìù (‚àë j, Œ¶ j / N)) := by
  simp only [sum_div, LFunction, mul_sum]
  refine tendsto_finset_sum _ fun j _ ‚Ü¶ ?_
  rw [(by ring : Œ¶ j / N = Œ¶ j * (1 / N * 1)), one_div, ‚Üê cpow_neg_one]
  simp only [show ‚àÄ a b c d : ‚ÑÇ, a * (b * (c * d)) = c * (b * (a * d)) by intros; ring]
  refine tendsto_const_nhds.mul (.mul ?_ <| hurwitzZeta_residue_one _)
  exact ((continuous_neg.const_cpow (Or.inl <| NeZero.ne _)).tendsto _).mono_left
    nhdsWithin_le_nhds

local notation "ùïñ" => stdAddChar

/--
The `LFunction` of the function `x ‚Ü¶ e (j * x)`, where `e : ZMod N ‚Üí ‚ÑÇ` is the standard additive
character, agrees with `expZeta (j / N)` on `1 < re s`. Private since it is a stepping-stone to
the more general result `LFunction_stdAddChar_eq_expZeta` below.
-/
private lemma LFunction_stdAddChar_eq_expZeta_of_one_lt_re (j : ZMod N) {s : ‚ÑÇ} (hs : 1 < s.re) :
    LFunction (fun k ‚Ü¶ ùïñ (j * k)) s = expZeta (ZMod.toAddCircle j) s := by
  rw [toAddCircle_apply, ‚Üê (hasSum_expZeta_of_one_lt_re (j.val / N) hs).tsum_eq,
    LFunction_eq_LSeries _ hs, LSeries]
  congr 1 with n
  rw [LSeries.term_of_ne_zero' (ne_zero_of_one_lt_re hs), ofReal_div, ofReal_natCast,
    ofReal_natCast, mul_assoc, div_mul_eq_mul_div, stdAddChar_apply]
  have := ZMod.toCircle_intCast (N := N) (j.val * n)
  conv_rhs at this => rw [Int.cast_mul, Int.cast_natCast, Int.cast_natCast, mul_div_assoc]
  rw [‚Üê this, Int.cast_mul, Int.cast_natCast, Int.cast_natCast, natCast_zmod_val]

/--
The `LFunction` of the function `x ‚Ü¶ e (j * x)`, where `e : ZMod N ‚Üí ‚ÑÇ` is the standard additive
character, is `expZeta (j / N)`.

Note this is not at all obvious from the definitions, and we prove it by analytic continuation
from the convergence range.
-/
lemma LFunction_stdAddChar_eq_expZeta (j : ZMod N) (s : ‚ÑÇ) (hjs : j ‚â† 0 ‚à® s ‚â† 1) :
    LFunction (fun k ‚Ü¶ ùïñ (j * k)) s = expZeta (ZMod.toAddCircle j) s := by
  let U := if j = 0 then {z : ‚ÑÇ | z ‚â† 1} else univ -- region of analyticity of both functions
  let V := {z : ‚ÑÇ | 1 < re z} -- convergence region
  have hUo : IsOpen U := by
    by_cases h : j = 0
    ¬∑ simpa only [h, ‚ÜìreduceIte, U] using isOpen_compl_singleton
    ¬∑ simp only [h, ‚ÜìreduceIte, isOpen_univ, U]
  let f := LFunction (fun k ‚Ü¶ stdAddChar (j * k))
  let g := expZeta (toAddCircle j)
  have hU {u} : u ‚àà U ‚Üî u ‚â† 1 ‚à® j ‚â† 0 := by simp only [mem_ite_univ_right, U]; tauto
  -- hypotheses for uniqueness of analytic continuation
  have hf : AnalyticOn ‚ÑÇ f U := by
    refine DifferentiableOn.analyticOn (fun u hu ‚Ü¶ ?_) hUo
    refine (differentiableAt_LFunction _ _ ((hU.mp hu).imp_right fun h ‚Ü¶ ?_)).differentiableWithinAt
    simp only [mul_comm j, AddChar.sum_mulShift _ (isPrimitive_stdAddChar _), h,
      ‚ÜìreduceIte, CharP.cast_eq_zero, or_true]
  have hg : AnalyticOn ‚ÑÇ g U := by
    refine DifferentiableOn.analyticOn (fun u hu ‚Ü¶ ?_) hUo
    refine (differentiableAt_expZeta _ _ ((hU.mp hu).imp_right fun h ‚Ü¶ ?_)).differentiableWithinAt
    rwa [ne_eq, toAddCircle_eq_zero]
  have hUc : IsPreconnected U := by
    by_cases h : j = 0
    ¬∑ simpa only [h, ‚ÜìreduceIte, U] using
        (isConnected_compl_singleton_of_one_lt_rank (by simp) _).isPreconnected
    ¬∑ simpa only [h, ‚ÜìreduceIte, U] using isPreconnected_univ
  have hV : V ‚àà ùìù 2 := (continuous_re.isOpen_preimage _ isOpen_Ioi).mem_nhds (by simp)
  have hUmem : 2 ‚àà U := by simp [U]
  have hUmem' : s ‚àà U := hU.mpr hjs.symm
  -- apply uniqueness result
  refine hf.eqOn_of_preconnected_of_eventuallyEq hg hUc hUmem ?_ hUmem'
  -- now remains to prove equality on `1 < re s`
  filter_upwards [hV] with z using LFunction_stdAddChar_eq_expZeta_of_one_lt_re _

/-- Explicit formula for the L-function of `ùìï Œ¶`, where `ùìï` is the discrete Fourier transform. -/
lemma LFunction_dft (Œ¶ : ZMod N ‚Üí ‚ÑÇ) {s : ‚ÑÇ} (hs : Œ¶ 0 = 0 ‚à® s ‚â† 1) :
    LFunction (ùìï Œ¶) s = ‚àë j : ZMod N, Œ¶ j * expZeta (toAddCircle (-j)) s := by
  have (j : ZMod N) : Œ¶ j * LFunction (fun k ‚Ü¶ ùïñ (-j * k)) s =
      Œ¶ j * expZeta (toAddCircle (-j)) s := by
    by_cases h : -j ‚â† 0 ‚à® s ‚â† 1
    ¬∑ rw [LFunction_stdAddChar_eq_expZeta _ _ h]
    ¬∑ simp only [neg_ne_zero, not_or, not_not] at h
      rw [h.1, show Œ¶ 0 = 0 by tauto, zero_mul, zero_mul]
  simp only [LFunction, ‚Üê this, mul_sum]
  rw [dft_def, sum_comm]
  simp only [sum_mul, mul_sum, Circle.smul_def, smul_eq_mul, stdAddChar_apply, ‚Üê mul_assoc]
  congr 1 with j
  congr 1 with k
  rw [mul_assoc (Œ¶ _), mul_comm (Œ¶ _), neg_mul]

/-- Functional equation for `ZMod` L-functions, in terms of discrete Fourier transform. -/
theorem LFunction_one_sub (Œ¶ : ZMod N ‚Üí ‚ÑÇ) {s : ‚ÑÇ}
    (hs : ‚àÄ (n : ‚Ñï), s ‚â† -n) (hs' : Œ¶ 0 = 0 ‚à® s ‚â† 1) :
    LFunction Œ¶ (1 - s) = N ^ (s - 1) * (2 * œÄ) ^ (-s) * Gamma s *
      (cexp (œÄ * I * s / 2) * LFunction (ùìï Œ¶) s
       + cexp (-œÄ * I * s / 2) * LFunction (ùìï fun x ‚Ü¶ Œ¶ (-x)) s) := by
  rw [LFunction]
  have (j : ZMod N) :  Œ¶ j * hurwitzZeta (toAddCircle j) (1 - s) = Œ¶ j *
      ((2 * œÄ) ^ (-s) * Gamma s * (cexp (-œÄ * I * s / 2) *
      expZeta (toAddCircle j) s + cexp (œÄ * I * s / 2) * expZeta (-toAddCircle j) s)) := by
    rcases eq_or_ne j 0 with rfl | hj
    ¬∑ rcases hs' with hŒ¶ | hs'
      ¬∑ simp only [hŒ¶, zero_mul]
      ¬∑ rw [hurwitzZeta_one_sub _ hs (Or.inr hs')]
    ¬∑ rw [hurwitzZeta_one_sub _ hs (Or.inl <| toAddCircle_eq_zero.not.mpr hj)]
  simp only [this, mul_assoc _ _ (Gamma s)]
  -- get rid of Gamma terms and power of N
  generalize (2 * œÄ) ^ (-s) * Gamma s = C
  simp_rw [‚Üê mul_assoc, mul_comm _ C, mul_assoc, ‚Üê mul_sum, ‚Üê mul_assoc, mul_comm _ C, mul_assoc,
    neg_sub]
  congr 2
  -- now gather sum terms
  rw [LFunction_dft _ hs', LFunction_dft _ (hs'.imp_left <| by simp only [neg_zero, imp_self])]
  conv_rhs => enter [2, 2]; rw [‚Üê (Equiv.neg _).sum_comp _ _ (by simp), Equiv.neg_apply]
  simp_rw [neg_neg, mul_sum, ‚Üê sum_add_distrib, ‚Üê mul_assoc, mul_comm _ (Œ¶ _), mul_assoc,
    ‚Üê mul_add, map_neg, add_comm]

section signed

variable {Œ¶ : ZMod N ‚Üí ‚ÑÇ}

lemma LFunction_def_even (hŒ¶ : Œ¶.Even) (s : ‚ÑÇ) :
    LFunction Œ¶ s = N ^ (-s) * ‚àë j : ZMod N, Œ¶ j * hurwitzZetaEven (toAddCircle j) s := by
  simp only [LFunction, hurwitzZeta, mul_add (Œ¶ _), sum_add_distrib]
  congr 1
  simp only [add_right_eq_self, ‚Üê neg_eq_self ‚ÑÇ, ‚Üê sum_neg_distrib]
  refine Fintype.sum_equiv (.neg _) _ _ fun i ‚Ü¶ ?_
  simp only [Equiv.neg_apply, hŒ¶ i, map_neg, hurwitzZetaOdd_neg, mul_neg]

lemma LFunction_def_odd (hŒ¶ : Œ¶.Odd) (s : ‚ÑÇ) :
    LFunction Œ¶ s = N ^ (-s) * ‚àë j : ZMod N, Œ¶ j * hurwitzZetaOdd (toAddCircle j) s := by
  simp only [LFunction, hurwitzZeta, mul_add (Œ¶ _), sum_add_distrib]
  congr 1
  simp only [add_left_eq_self, ‚Üê neg_eq_self ‚ÑÇ, ‚Üê sum_neg_distrib]
  refine Fintype.sum_equiv (.neg _) _ _ fun i ‚Ü¶ ?_
  simp only [Equiv.neg_apply, hŒ¶ i, map_neg, hurwitzZetaEven_neg, neg_mul]

/-- Explicit formula for `LFunction Œ¶ 0` when `Œ¶` is even. -/
@[simp] lemma LFunction_apply_zero_of_even (hŒ¶ : Œ¶.Even) :
    LFunction Œ¶ 0 = -Œ¶ 0 / 2 := by
  simp only [LFunction_def_even hŒ¶, neg_zero, cpow_zero, hurwitzZetaEven_apply_zero,
    toAddCircle_eq_zero, mul_ite, mul_div, mul_neg_one, mul_zero, sum_ite_eq', Finset.mem_univ,
    ‚ÜìreduceIte, one_mul]

/-- The L-function of an even function vanishes at negative even integers. -/
@[simp] lemma LFunction_neg_two_mul_nat_add_one (hŒ¶ : Œ¶.Even) (n : ‚Ñï) :
    LFunction Œ¶ (-(2 * (n + 1))) = 0 := by
  simp only [LFunction_def_even hŒ¶, hurwitzZetaEven_neg_two_mul_nat_add_one, mul_zero,
    sum_const_zero, ‚Üê neg_mul]

/-- The L-function of an odd function vanishes at negative odd integers. -/
@[simp] lemma LFunction_neg_two_mul_nat_sub_one (hŒ¶ : Œ¶.Odd) (n : ‚Ñï) :
    LFunction Œ¶ (-(2 * n) - 1) = 0 := by
  simp only [LFunction_def_odd hŒ¶, hurwitzZetaOdd_neg_two_mul_nat_sub_one, mul_zero,
    ‚Üê neg_mul, sum_const_zero]

variable (Œ¶) in
/--
The completed L-function of a function mod `N`.

This is only mathematically meaningful if `Œ¶` is either even, or odd. We extend this to all `Œ¶`
as follows: if `Œ¶` is not even, then the completed L-series of `Œ¶` is the `L`-series of the odd
part of `Œ¶`.
-/
noncomputable def completedLFunction (s : ‚ÑÇ) : ‚ÑÇ :=
  if Œ¶.Even then N ^ (-s) * ‚àë j, Œ¶ j * completedHurwitzZetaEven (toAddCircle j) s
  else N ^ (-s) * ‚àë j, Œ¶ j * completedHurwitzZetaOdd (toAddCircle j) s

@[simp] lemma completedLFunction_zero (s : ‚ÑÇ) : completedLFunction (0 : ZMod N ‚Üí ‚ÑÇ) s = 0 := by
  simp only [completedLFunction, Pi.zero_apply, zero_mul, sum_const_zero, mul_zero, ite_self]

lemma completedLFunction_def_even (hŒ¶ : Œ¶.Even) (s : ‚ÑÇ) :
    completedLFunction Œ¶ s = N ^ (-s) * ‚àë j, Œ¶ j * completedHurwitzZetaEven (toAddCircle j) s := by
  simp only [completedLFunction, hŒ¶, ‚ÜìreduceIte]

lemma completedLFunction_def_odd (hŒ¶ : Œ¶.Odd) (s : ‚ÑÇ) :
    completedLFunction Œ¶ s = N ^ (-s) * ‚àë j, Œ¶ j * completedHurwitzZetaOdd (toAddCircle j) s := by
  by_cases hŒ¶' : Œ¶.Even
    -- if `Œ¶ = 0` we are in the "wrong" branch of the if-then, but it's OK because both sides are 0
  ¬∑ simp only [Œ¶.zero_of_even_and_odd hŒ¶' hŒ¶, completedLFunction_zero, Pi.zero_apply, zero_mul,
      sum_const_zero, mul_zero]
  ¬∑ simp only [completedLFunction, hŒ¶', ‚ÜìreduceIte]

/--
The completed L-function of a function `ZMod 1 ‚Üí ‚ÑÇ` is a scalar multiple of the completed Riemann
zeta function.
-/
lemma completedLFunction_modOne_eq {Œ¶ : ZMod 1 ‚Üí ‚ÑÇ} (s : ‚ÑÇ) :
    completedLFunction Œ¶ s = Œ¶ 1 * completedRiemannZeta s := by
  rw [completedLFunction_def_even (show Œ¶.Even from fun _ ‚Ü¶ congr_arg Œ¶ (Subsingleton.elim ..)),
    Nat.cast_one, one_cpow, one_mul, ‚Üê singleton_eq_univ 0, sum_singleton, map_zero,
    completedHurwitzZetaEven_zero, Subsingleton.elim 0 1]

variable (Œ¶) in
/--
The completed L-function of a function mod `N`, modified by adding multiples of `N ^ (-s) / s` and
`N ^ (-s) / (1 - s)` to make it entire.

This is well-defined for all `Œ¶`, but is uninteresting unless `Œ¶` is either even or odd.
-/
noncomputable def completedLFunction‚ÇÄ (s : ‚ÑÇ) : ‚ÑÇ :=
  if Œ¶.Even then N ^ (-s) * ‚àë j : ZMod N, Œ¶ j * completedHurwitzZetaEven‚ÇÄ (toAddCircle j) s
  else N ^ (-s) * ‚àë j : ZMod N, Œ¶ j * completedHurwitzZetaOdd (toAddCircle j) s

variable (Œ¶) in
/-- The function `completedLFunction‚ÇÄ Œ¶` is differentiable. -/
lemma differentiable_completedLFunction‚ÇÄ : Differentiable ‚ÑÇ (completedLFunction‚ÇÄ Œ¶) := by
  unfold completedLFunction‚ÇÄ
  by_cases h : Œ¶.Even <;>
  simp only [h, reduceIte] <;>
  refine (differentiable_neg.const_cpow <| .inl <| NeZero.ne _).mul (.sum fun i _ ‚Ü¶ .const_mul ?_ _)
  exacts [differentiable_completedHurwitzZetaEven‚ÇÄ _, differentiable_completedHurwitzZetaOdd _]

lemma completedLFunction_eq (hŒ¶ : Œ¶.Even ‚à® Œ¶.Odd) (s : ‚ÑÇ) :
    completedLFunction Œ¶ s =
      completedLFunction‚ÇÄ Œ¶ s - N ^ (-s) * Œ¶ 0 / s - N ^ (-s) * (‚àë j, Œ¶ j) / (1 - s) := by
  simp only [completedLFunction, completedLFunction‚ÇÄ]
  obtain hŒ¶ | ‚ü®hŒ¶', hŒ¶‚ü© : Œ¶.Even ‚à® (¬¨Œ¶.Even ‚àß Œ¶.Odd) := by tauto
  ¬∑ simp only [hŒ¶, ite_true, completedHurwitzZetaEven_eq, mul_sub, sum_sub_distrib]
    congr 1
    ¬∑ simp only [toAddCircle_eq_zero, div_eq_mul_inv, ite_mul, one_mul, zero_mul, mul_ite,
        mul_zero, sum_ite_eq', ite_true, Finset.mem_univ, mul_assoc]
    ¬∑ rw [‚Üê sum_mul, mul_one_div, mul_div_assoc]
  ¬∑ simp only [hŒ¶', ite_false, hŒ¶.map_zero, mul_zero, zero_div, sub_zero, hŒ¶.sum_eq_zero]

/--
The completed L-function of a function mod `N` is differentiable, with the following
exceptions: at `s = 1` if `‚àë j, Œ¶ j ‚â† 0`; and at `s = 0` if `Œ¶ 0 ‚â† 0`.
-/
lemma differentiableAt_completedLFunction (hŒ¶ : Œ¶.Even ‚à® Œ¶.Odd) (s : ‚ÑÇ)
    (hs‚ÇÄ : s ‚â† 0 ‚à® Œ¶ 0 = 0) (hs‚ÇÅ : s ‚â† 1 ‚à® ‚àë j, Œ¶ j = 0) :
    DifferentiableAt ‚ÑÇ (completedLFunction Œ¶) s := by
  simp only [funext (completedLFunction_eq hŒ¶), mul_div_assoc]
  -- We know `completedLFunction‚ÇÄ` is differentiable everywhere, so it suffices to show that the
  -- correction terms from `completedLFunction_eq` are differentiable at `s`.
  refine ((differentiable_completedLFunction‚ÇÄ _ _).sub ?_).sub ?_
  ¬∑ -- term with `1 / s`
    refine ((differentiable_neg.const_cpow <| .inl <| NeZero.ne _) s).mul (hs‚ÇÄ.elim ?_ ?_)
    ¬∑ exact fun h ‚Ü¶ (differentiableAt_const _).div differentiableAt_id h
    ¬∑ exact fun h ‚Ü¶ by simp only [h, funext zero_div, differentiableAt_const]
  ¬∑ -- term with `1 / (1 - s)`
    refine ((differentiable_neg.const_cpow <| .inl <| NeZero.ne _) s).mul (hs‚ÇÅ.elim ?_ ?_)
    ¬∑ exact fun h ‚Ü¶ (differentiableAt_const _).div (by fun_prop) (by rwa [sub_ne_zero, ne_comm])
    ¬∑ exact fun h ‚Ü¶ by simp only [h, zero_div, differentiableAt_const]

/--
Special case of `differentiableAt_completedLFunction` asserting differentiability everywhere
under suitable hypotheses.
-/
lemma differentiable_completedLFunction
    (hŒ¶‚ÇÅ : Œ¶.Even ‚à® Œ¶.Odd) (hŒ¶‚ÇÇ : Œ¶ 0 = 0) (hŒ¶‚ÇÉ : ‚àë j, Œ¶ j = 0) :
    Differentiable ‚ÑÇ (completedLFunction Œ¶) :=
  fun s ‚Ü¶ differentiableAt_completedLFunction hŒ¶‚ÇÅ s (.inr hŒ¶‚ÇÇ) (.inr hŒ¶‚ÇÉ)

/--
Relation between the completed L-function and the usual one (even case).
We state it this way around so it holds at the poles of the gamma factor as well
(except at `s = 0`, where it is genuinely false if `Œ¶ 0 ‚â† 0`).
-/
lemma LFunction_eq_completed_div_gammaFactor_even (hŒ¶ : Œ¶.Even) (s : ‚ÑÇ) (hs : s ‚â† 0 ‚à® Œ¶ 0 = 0) :
    LFunction Œ¶ s = completedLFunction Œ¶ s / Gamma‚Ñù s := by
  simp only [completedLFunction_def_even hŒ¶, LFunction_def_even hŒ¶, mul_div_assoc, sum_div]
  congr 2 with i
  rcases ne_or_eq i 0 with hi | rfl
  ¬∑ rw [hurwitzZetaEven_def_of_ne_or_ne (.inl (hi ‚àò toAddCircle_eq_zero.mp))]
  ¬∑ rcases hs with hs | hŒ¶'
    ¬∑ rw [hurwitzZetaEven_def_of_ne_or_ne (.inr hs)]
    ¬∑ simp only [hŒ¶', map_zero, zero_mul]

/--
Relation between the completed L-function and the usual one (odd case).
We state it this way around so it holds at the poles of the gamma factor as well.
-/
lemma LFunction_eq_completed_div_gammaFactor_odd (hŒ¶ : Œ¶.Odd) (s : ‚ÑÇ) :
    LFunction Œ¶ s = completedLFunction Œ¶ s / Gamma‚Ñù (s + 1) := by
  simp only [LFunction_def_odd hŒ¶, completedLFunction_def_odd hŒ¶, hurwitzZetaOdd, mul_div_assoc,
    sum_div]

/--
Express `completedCosZeta` as the L-function of a function on `ZMod N`.

The formulation is not optimal (the result is actually true for all `s ‚àâ {0, 1}`), but suffices for
the proof of `completedLFunction_one_sub` below.
-/
lemma completedLFunction_cos_eq_completedCosZeta_of_one_lt
    (a : ZMod N) {s : ‚ÑÇ} (hs : 1 < re s) :
    completedLFunction (fun b ‚Ü¶ (ùïñ (a * b) + ùïñ (-a * b)) / 2) s =
      completedCosZeta (toAddCircle a) s := by
  set Œ¶ := fun b ‚Ü¶ (ùïñ (a * b) + ùïñ (-a * b)) / 2
  have hŒ¶ : Œ¶.Even := fun b ‚Ü¶ by simp only [neg_mul, mul_neg, neg_neg, add_comm, Œ¶]
  have h1 : (Gamma‚Ñù s)‚Åª¬π ‚â† 0 := inv_ne_zero (Gamma‚Ñù_ne_zero_of_re_pos (by linarith))
  have h2 : s ‚â† 1 := (lt_irrefl _ <| one_re ‚ñ∏ ¬∑ ‚ñ∏ hs)
  have h3 : cosZeta (toAddCircle a) s = completedCosZeta (toAddCircle a) s / s.Gamma‚Ñù :=
    Function.update_noteq (ne_zero_of_one_lt_re hs) ..
  rw [‚Üê mul_left_inj' h1, ‚Üê div_eq_mul_inv, ‚Üê div_eq_mul_inv, ‚Üê h3, cosZeta_eq,
    ‚Üê LFunction_eq_completed_div_gammaFactor_even hŒ¶ _ (.inl <| ne_zero_of_one_lt_re hs)]
  simp only [LFunction, add_div, add_mul, sum_add_distrib, Œ¶]
  simp only [div_mul_eq_mul_div, ‚Üê sum_div, mul_add, ‚Üê mul_div_assoc,
    ‚Üê LFunction_stdAddChar_eq_expZeta _ _ (.inr h2), LFunction, ‚Üê map_neg]

/--
Express `completedSinZeta` as the L-function of a function on `ZMod N`.

The formulation is not optimal (the result is actually true for all `s`), but suffices for
the proof of `completedLFunction_one_sub` below.
-/
lemma completedLFunction_sin_eq_completedSinZeta_of_one_lt
    (a : ZMod N) {s : ‚ÑÇ} (hs : 1 < re s) :
    completedLFunction (fun b ‚Ü¶ (ùïñ (a * b) - ùïñ (-a * b)) / (2 * I)) s =
      completedSinZeta (toAddCircle a) s := by
  set Œ¶ := fun b ‚Ü¶ (ùïñ (a * b) - ùïñ (-a * b)) / (2 * I)
  have hŒ¶ : Œ¶.Odd := fun b ‚Ü¶ by simp only [Œ¶, neg_mul, mul_neg, neg_neg, ‚Üê neg_div, neg_sub]
  have h1 : (Gamma‚Ñù (s + 1))‚Åª¬π ‚â† 0 :=
    inv_ne_zero (Gamma‚Ñù_ne_zero_of_re_pos <| by simp only [add_re, one_re]; linarith)
  have h2 : s ‚â† 1 := (lt_irrefl _ <| one_re ‚ñ∏ ¬∑ ‚ñ∏ hs)
  rw [‚Üê mul_left_inj' h1, ‚Üê div_eq_mul_inv, ‚Üê div_eq_mul_inv, ‚Üê sinZeta, sinZeta_eq,
    ‚Üê LFunction_eq_completed_div_gammaFactor_odd hŒ¶]
  simp only [LFunction, sub_div, sub_mul, sum_sub_distrib, Œ¶]
  simp only [mul_sub, LFunction, div_mul_eq_mul_div, ‚Üê sum_div, ‚Üê mul_div_assoc, ‚Üê map_neg,
    ‚Üê LFunction_stdAddChar_eq_expZeta _ _ (.inr h2)]

/--
First form of functional equation for completed L-functions. Private because it is superseded
by `completedLFunction_one_sub` below, which is valid for a much wider range of `s`.
-/
private lemma completedLFunction_one_sub_of_one_lt (hŒ¶ : Œ¶.Even ‚à® Œ¶.Odd) (s : ‚ÑÇ) (hs : 1 < re s) :
    completedLFunction Œ¶ (1 - s) =
      N ^ (s - 1) * I ^ (if Œ¶.Even then 0 else 1) * completedLFunction (ùìï Œ¶) s := by
  -- preliminary mini-lemmas:
  have he (x : ZMod N) : (fun b ‚Ü¶ (ùïñ (x * b) + ùïñ (-x * b)) / 2).Even := fun _ ‚Ü¶ by
    simp only [mul_neg, neg_mul, neg_neg, add_comm]
  have ho (x : ZMod N) : (fun b ‚Ü¶ (ùïñ (x * b) - ùïñ (-x * b)) / (2 * I)).Odd := fun _ ‚Ü¶ by
    simp only [mul_neg, neg_mul, neg_neg, ‚Üê neg_div, neg_sub]
  -- split into two mutually-exclusive cases:
  obtain hŒ¶ | ‚ü®hŒ¶', hŒ¶‚ü© : Œ¶.Even ‚à® (¬¨Œ¶.Even ‚àß Œ¶.Odd) := by tauto
  ¬∑ -- even case
    -- drill down to the key computation:
    suffices ‚àë x, Œ¶ x * completedCosZeta (toAddCircle x) s = completedLFunction (ùìï Œ¶) s by
      simp only [completedLFunction_def_even hŒ¶, neg_sub, completedHurwitzZetaEven_one_sub, this,
        hŒ¶, ite_true, pow_zero, mul_one]
    -- now calculate:
    let Œ∂ (y : ZMod N) := completedHurwitzZetaEven (toAddCircle y)
    calc ‚àë x, Œ¶ x * completedCosZeta (toAddCircle x) s
    _ = ‚àë x, ‚àë y, Œ¶ x * N ^ (-s) * ((ùïñ (x * y) + ùïñ (-x * y)) / 2) * Œ∂ y s := by
      simp only [‚Üê completedLFunction_cos_eq_completedCosZeta_of_one_lt _ hs,
        completedLFunction_def_even (he _), mul_sum, mul_assoc]
    _ = N ^ (-s) * ‚àë y, (‚àë x, Œ¶ x * ((ùïñ (x * y) + ùïñ (-x * y)) / 2)) * Œ∂ y s := by
      rw [sum_comm]
      simp only [mul_sum, sum_mul, mul_assoc, mul_left_comm (Œ¶ _)]
    _ = N ^ (-s) * (‚àë y, (‚àë x, Œ¶ x * ùïñ (x * y) + ‚àë x, Œ¶ x * ùïñ (-x * y)) / 2 * Œ∂ y s) := by
      simp only [‚Üê mul_div_assoc, ‚Üê sum_div, mul_add, sum_add_distrib]
    _ = N ^ (-s) * (‚àë y, ((ùìï Œ¶ (-y) + ùìï Œ¶ y) / 2) * Œ∂ y s) := by
      simp only [dft_apply, mul_neg, neg_mul, neg_neg, smul_eq_mul, mul_comm (Œ¶ _)]
    _ = N ^ (-s) * ‚àë y, ùìï Œ¶ y * Œ∂ y s := by
      simp only [dft_even_iff.mpr hŒ¶ _, add_div, add_halves]
    _ = completedLFunction (ùìï Œ¶) s := by
      rw [completedLFunction_def_even (dft_even_iff.mpr hŒ¶)]
  ¬∑ -- odd case
    -- drill down to the key computation:
    suffices ‚àë x, Œ¶ x * completedSinZeta (toAddCircle x) s = I * completedLFunction (ùìï Œ¶) s by
      simp only [completedLFunction_def_odd hŒ¶, neg_sub, completedHurwitzZetaOdd_one_sub, this, hŒ¶',
        ite_false, pow_one, mul_assoc]
    -- now calculate:
    let Œ∂ (y : ZMod N) := completedHurwitzZetaOdd (toAddCircle y)
    calc ‚àë x, Œ¶ x * completedSinZeta (toAddCircle x) s
    _ = ‚àë x, ‚àë y, Œ¶ x * N ^ (-s) * ((ùïñ (x * y) - ùïñ (-x * y)) / (2 * I)) * Œ∂ y s := by
      simp only [‚Üê completedLFunction_sin_eq_completedSinZeta_of_one_lt _ hs,
        completedLFunction_def_odd (ho _), mul_sum, mul_assoc]
    _ = N ^ (-s) * ‚àë y, (‚àë x, Œ¶ x * ((ùïñ (x * y) - ùïñ (-x * y)) / (2 * I))) * Œ∂ y s := by
      rw [sum_comm]
      simp only [mul_sum, sum_mul, mul_assoc, mul_left_comm (Œ¶ _)]
    _ = N ^ (-s) * (‚àë y, (‚àë x, Œ¶ x * ùïñ (x * y) - ‚àë x, Œ¶ x * ùïñ (-x * y)) / (2 * I) * Œ∂ y s) := by
      simp only [‚Üê mul_div_assoc, ‚Üê sum_div, mul_sub, sum_sub_distrib]
    _ = N ^ (-s) * (‚àë y, ((ùìï Œ¶ (-y) - ùìï Œ¶ y) / (2 * I)) * Œ∂ y s) := by
      simp only [dft_apply, mul_neg, neg_mul, neg_neg, smul_eq_mul, mul_comm (Œ¶ _)]
    _ = I * (N ^ (-s) * ‚àë y, ùìï Œ¶ y * Œ∂ y s) := by
      simp only [dft_odd_iff.mpr hŒ¶ _, sub_eq_add_neg, ‚Üê two_mul, ‚Üê div_div,
        mul_div_cancel_left‚ÇÄ _ (two_ne_zero' ‚ÑÇ), div_eq_mul_inv _ I, inv_I, neg_mul_neg]
      simp only [mul_comm _ I, mul_assoc, ‚Üê mul_sum, mul_left_comm]
    _ = I * completedLFunction (ùìï Œ¶) s := by
      rw [completedLFunction_def_odd (dft_odd_iff.mpr hŒ¶)]

/--
Functional equation for completed L-functions, valid at all points of differentiability.
-/
theorem completedLFunction_one_sub
    (hŒ¶ : Œ¶.Even ‚à® Œ¶.Odd) (s : ‚ÑÇ) (hs‚ÇÄ : s ‚â† 0 ‚à® ‚àë j, Œ¶ j = 0) (hs‚ÇÅ : s ‚â† 1 ‚à® Œ¶ 0 = 0) :
    completedLFunction Œ¶ (1 - s) =
      N ^ (s - 1) * I ^ (if Œ¶.Even then 0 else 1) * completedLFunction (ùìï Œ¶) s := by
  -- We prove this using `AnalyticOn.eqOn_of_preconnected_of_eventuallyEq`, so we need to
  -- gather up the ingredients for this big theorem.
  -- First set up some notations:
  let F (t) := completedLFunction Œ¶ (1 - t)
  let G (t) := ‚ÜëN ^ (t - 1) * I ^ (if Œ¶.Even then 0 else 1) * completedLFunction (ùìï Œ¶) t
  -- Set on which F, G are analytic:
  let U := {t : ‚ÑÇ | (t ‚â† 0 ‚à® ‚àë j, Œ¶ j = 0) ‚àß (t ‚â† 1 ‚à® Œ¶ 0 = 0)}
  -- Properties of U:
  have hsU : s ‚àà U := ‚ü®hs‚ÇÄ, hs‚ÇÅ‚ü©
  have h2U : 2 ‚àà U := ‚ü®.inl two_ne_zero, .inl (OfNat.ofNat_ne_one _)‚ü©
  have hUo : IsOpen U := by
    refine .inter ?_ ?_ <;>
    exact (isOpen_compl_singleton.union isOpen_const)
  have hUp : IsPreconnected U := by
    -- need to write `U` as the complement of an obviously countable set
    let Uc : Set ‚ÑÇ := (if ‚àë j, Œ¶ j = 0 then ‚àÖ else {0}) ‚à™ (if Œ¶ 0 = 0 then ‚àÖ else {1})
    have : Uc.Countable := by
      apply Countable.union <;>
      split_ifs <;>
      simp only [countable_singleton, countable_empty]
    convert (this.isConnected_compl_of_one_lt_rank ?_).isPreconnected using 1
    ¬∑ ext x
      by_cases h : Œ¶ 0 = 0 <;>
      by_cases h' : ‚àë j, Œ¶ j = 0 <;>
      simp only [U, Uc, h, h', and_true, and_false, or_true, or_false, ‚ÜìreduceIte, mem_setOf,
        union_empty, true_and, empty_union, compl_empty, mem_univ,
        mem_compl_iff, mem_union, not_or, not_mem_singleton_iff]
    ¬∑ simp only [rank_real_complex, Nat.one_lt_ofNat]
  -- Analyticity on U:
  have hF : AnalyticOn ‚ÑÇ F U := by
    refine DifferentiableOn.analyticOn (fun t ht ‚Ü¶ DifferentiableAt.differentiableWithinAt ?_) hUo
    refine (differentiableAt_completedLFunction hŒ¶ (1 - t) ?_ ?_).comp t ?_
    ¬∑ exact ht.2.imp_left (sub_ne_zero.mpr ‚àò Ne.symm)
    ¬∑ exact ht.1.imp_left sub_eq_self.not.mpr
    ¬∑ exact differentiableAt_id.const_sub 1
  have hG : AnalyticOn ‚ÑÇ G U := by
    refine DifferentiableOn.analyticOn (fun t ht ‚Ü¶ DifferentiableAt.differentiableWithinAt ?_) hUo
    refine .mul (.mul ?_ <| differentiableAt_const _) ?_
    ¬∑ exact (DifferentiableAt.sub_const differentiableAt_id 1).const_cpow (.inl (NeZero.ne _))
    ¬∑ -- Differentiablity of completed L-function for `ùìï Œ¶`.
      apply differentiableAt_completedLFunction
      ¬∑ rwa [dft_even_iff, dft_odd_iff]
      ¬∑ exact ht.1.imp_right fun h ‚Ü¶ dft_apply_zero Œ¶ ‚ñ∏ h
      ¬∑ refine ht.2.imp_right fun h ‚Ü¶ ?_
        simp only [‚Üê dft_apply_zero, dft_dft, neg_zero, h, smul_zero]
  -- set where we know equality
  have hV : {z | 1 < re z} ‚àà ùìù 2 := (continuous_re.isOpen_preimage _ isOpen_Ioi).mem_nhds (by simp)
  have hFG : F =·∂†[ùìù 2] G := eventually_of_mem hV <| completedLFunction_one_sub_of_one_lt hŒ¶
  -- now apply the big hammer to finish
  exact hF.eqOn_of_preconnected_of_eventuallyEq hG hUp h2U hFG hsU

end signed

end ZMod
