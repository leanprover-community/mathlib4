/-
Copyright (c) 2024 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import Mathlib.NumberTheory.LSeries.ZMod
import Mathlib.NumberTheory.DirichletCharacter.Basic
import Mathlib.NumberTheory.EulerProduct.DirichletLSeries

/-!
# Analytic continuation of Dirichlet L-functions

We show that if `œá` is a Dirichlet character `ZMod N ‚Üí ‚ÑÇ`, for a positive integer `N`, then the
L-series of `œá` has analytic continuation (away from a pole at `s = 1` if `œá` is trivial).

All definitions and theorems are in the `DirichletCharacter` namespace.

## Main definitions

* `LFunction œá s`: the L-function, defined as a linear combination of Hurwitz zeta functions.

## Main theorems

* `LFunction_eq_LSeries`: if `1 < re s` then the `LFunction` coincides with the naive `LSeries`.
* `differentiable_LFunction`: if `œá` is nontrivial then `LFunction œá s` is differentiable
  everywhere.
-/

open Complex Filter

open scoped Topology

namespace DirichletCharacter

variable {N : ‚Ñï} [NeZero N]

/--
The unique meromorphic function `‚ÑÇ ‚Üí ‚ÑÇ` which agrees with `‚àë' n : ‚Ñï, œá n / n ^ s` wherever the
latter is convergent. This is constructed as a linear combination of Hurwitz zeta functions.

Note that this is not the same as `LSeries œá`: they agree in the convergence range, but
`LSeries œá s` is defined to be `0` if `re s ‚â§ 1`.
 -/
noncomputable def LFunction (œá : DirichletCharacter ‚ÑÇ N) (s : ‚ÑÇ) : ‚ÑÇ := ZMod.LFunction œá s

/-- The L-function of the (unique) Dirichlet character mod 1 is the Riemann zeta function.
(Compare `DirichletCharacter.LSeries_modOne_eq`.) -/
@[simp] lemma LFunction_modOne_eq {œá : DirichletCharacter ‚ÑÇ 1} :
    LFunction œá = riemannZeta := by
  ext1; rw [LFunction, ZMod.LFunction_modOne_eq, (by rfl : (0 : ZMod 1) = 1), map_one, one_mul]

/--
For `1 < re s` the L-function of a Dirichlet character agrees with the sum of the naive Dirichlet
series.
-/
lemma LFunction_eq_LSeries (œá : DirichletCharacter ‚ÑÇ N) {s : ‚ÑÇ} (hs : 1 < re s) :
    LFunction œá s = LSeries (œá ¬∑) s :=
  ZMod.LFunction_eq_LSeries œá hs

/--
The L-function of a Dirichlet character is differentiable, except at `s = 1` if the character is
trivial.
-/
lemma differentiableAt_LFunction (œá : DirichletCharacter ‚ÑÇ N) (s : ‚ÑÇ) (hs : s ‚â† 1 ‚à® œá ‚â† 1) :
    DifferentiableAt ‚ÑÇ (LFunction œá) s :=
  ZMod.differentiableAt_LFunction œá s (hs.imp_right œá.sum_eq_zero_of_ne_one)

/-- The L-function of a non-trivial Dirichlet character is differentiable everywhere. -/
lemma differentiable_LFunction {œá : DirichletCharacter ‚ÑÇ N} (hœá : œá ‚â† 1) :
    Differentiable ‚ÑÇ (LFunction œá) :=
  (differentiableAt_LFunction _ ¬∑ <| Or.inr hœá)

/-!
## Results on changing levels
-/

lemma continuous_cpow_natCast_neg (n : ‚Ñï) [NeZero n] : Continuous fun s : ‚ÑÇ ‚Ü¶ (n : ‚ÑÇ) ^ (-s) :=
  Continuous.const_cpow continuous_neg (.inl <| NeZero.ne (n : ‚ÑÇ))

lemma LFunction_changeLevel_aux {M N : ‚Ñï} [NeZero M] [NeZero N] (hMN : M ‚à£ N)
    (œá : DirichletCharacter ‚ÑÇ M) {s : ‚ÑÇ} (hs : s ‚â† 1) :
    LFunction (changeLevel hMN œá) s =
      LFunction œá s * ‚àè p ‚àà N.primeFactors, (1 - œá p * p ^ (-s)) := by
  have hpc : IsPreconnected ({1}·∂ú : Set ‚ÑÇ) := by
    refine (isConnected_compl_singleton_of_one_lt_rank ?_ _).isPreconnected
    simp only [rank_real_complex, Nat.one_lt_ofNat]
  have hne : 2 ‚àà ({1}·∂ú : Set ‚ÑÇ) := by norm_num
  refine AnalyticOnNhd.eqOn_of_preconnected_of_eventuallyEq (ùïú := ‚ÑÇ)
    (g := fun s ‚Ü¶ LFunction œá s * ‚àè p ‚àà N.primeFactors, (1 - œá p * p ^ (-s))) ?_ ?_ hpc hne ?_ hs
  ¬∑ refine DifferentiableOn.analyticOnNhd (fun s hs ‚Ü¶ ?_) isOpen_compl_singleton
    exact (differentiableAt_LFunction ((changeLevel hMN) œá) s (.inl hs)).differentiableWithinAt
  ¬∑ refine DifferentiableOn.analyticOnNhd (fun s hs ‚Ü¶ ?_) isOpen_compl_singleton
    refine ((differentiableAt_LFunction _ _ (.inl hs)).mul ?_).differentiableWithinAt
    refine .finset_prod fun i hi ‚Ü¶ ?_
    refine (differentiableAt_const _).sub ((differentiableAt_const _).mul ?_)
    apply differentiableAt_id.neg.const_cpow
    exact .inl (mod_cast (Nat.pos_of_mem_primeFactors hi).ne')
  ¬∑ refine eventually_of_mem ?_  (fun t (ht : 1 < t.re) ‚Ü¶ ?_)
    ¬∑ exact (continuous_re.isOpen_preimage _ isOpen_Ioi).mem_nhds (by norm_num : 1 < (2 : ‚ÑÇ).re)
    ¬∑ simpa only [LFunction_eq_LSeries _ ht] using LSeries_changeLevel hMN œá ht

/-- If `œá` is a Dirichlet character and its level `M` divides `N`, then we obtain the L function
of `œá` considered as a Dirichlet character of level `N` from the L function of `œá` by multiplying
with `‚àè p ‚àà N.primeFactors, (1 - œá p * p ^ (-s))`. -/
lemma LFunction_changeLevel {M N : ‚Ñï} [NeZero M] [NeZero N] (hMN : M ‚à£ N)
    (œá : DirichletCharacter ‚ÑÇ M) {s : ‚ÑÇ} (h : œá ‚â† 1 ‚à® s ‚â† 1) :
    (changeLevel hMN œá).LFunction s =
       œá.LFunction s * ‚àè p ‚àà N.primeFactors, (1 - œá p * p ^ (-s)) := by
  rcases h with h | h
  ¬∑ have hœá : changeLevel hMN œá ‚â† 1 := fun H ‚Ü¶ h <| (changeLevel_eq_one_iff hMN).mp H
    have h' : Continuous fun s ‚Ü¶ œá.LFunction s * ‚àè p ‚àà N.primeFactors, (1 - œá p * ‚Üëp ^ (-s)) :=
      (differentiable_LFunction h).continuous.mul <|
        continuous_finset_prod _ fun p hp ‚Ü¶ continuous_const.sub <| continuous_const.mul <|
          @continuous_cpow_natCast_neg p ‚ü®(Nat.prime_of_mem_primeFactors hp).ne_zero‚ü©
    have H s (hs : s ‚â† 1) := LFunction_changeLevel_aux hMN œá hs
    revert s
    rw [‚Üê funext_iff]
    exact (differentiable_LFunction hœá).continuous.ext_on (dense_compl_singleton 1) h' H
  ¬∑ exact LFunction_changeLevel_aux hMN œá h

/-!
## The `L`-series of the trivial character mod `N`
-/

noncomputable
abbrev LFunction_one (N : ‚Ñï) [NeZero N] := (1 : DirichletCharacter ‚ÑÇ N).LFunction

/-- The L function of the trivial Dirichlet character mod `N` is obtained from the Riemann
zeta function by multiplying with `‚àè p ‚àà N.primeFactors, (1 - (p : ‚ÑÇ) ^ (-s))`. -/
lemma LFunction_one_eq_mul_riemannZeta {s : ‚ÑÇ} (hs : s ‚â† 1) :
    LFunction_one N s = (‚àè p ‚àà N.primeFactors, (1 - (p : ‚ÑÇ) ^ (-s))) * riemannZeta s := by
  rw [‚Üê LFunction_modOne_eq (œá := 1), LFunction_one, ‚Üê changeLevel_one N.one_dvd, mul_comm]
  convert LFunction_changeLevel N.one_dvd 1 (.inr hs) using 4 with p
  rw [MulChar.one_apply <| isUnit_of_subsingleton _, one_mul]

/-- The L function of the trivial Dirichlet character mod `N` has a simple pole with
residue `‚àè p ‚àà N.primeFactors, (1 - p‚Åª¬π)` at `s = 1`. -/
lemma LFunction_one_residue_one :
  Filter.Tendsto (fun s ‚Ü¶ (s - 1) * LFunction_one N s) (ùìù[‚â†] 1)
    (ùìù <| ‚àè p ‚àà N.primeFactors, (1 - (p : ‚ÑÇ)‚Åª¬π)) := by
  have H : (fun s ‚Ü¶ (s - 1) * LFunction_one N s) =·∂†[ùìù[‚â†] 1]
        fun s ‚Ü¶ (‚àè p ‚àà N.primeFactors, (1 - (p : ‚ÑÇ) ^ (-s))) * ((s - 1) * riemannZeta s) := by
    refine Set.EqOn.eventuallyEq_nhdsWithin fun s hs ‚Ü¶ ?_
    rw [mul_left_comm, LFunction_one_eq_mul_riemannZeta hs]
  rw [tendsto_congr' H]
  conv => enter [3, 1]; rw [‚Üê mul_one <| Finset.prod ..]; enter [1, 2, p]; rw [‚Üê cpow_neg_one]
  convert Tendsto.mul (f := fun s ‚Ü¶ ‚àè p ‚àà N.primeFactors, (1 - (p : ‚ÑÇ) ^ (-s)))
    ?_ riemannZeta_residue_one
  refine tendsto_nhdsWithin_of_tendsto_nhds <| Continuous.tendsto ?_ 1
  exact continuous_finset_prod _ fun p hp ‚Ü¶ Continuous.sub continuous_const <|
    @continuous_cpow_natCast_neg p ‚ü®(Nat.prime_of_mem_primeFactors hp).ne_zero‚ü©

end DirichletCharacter
