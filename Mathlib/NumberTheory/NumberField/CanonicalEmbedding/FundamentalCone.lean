/-
Copyright (c) 2024 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.NumberTheory.NumberField.Units.DirichletTheorem

/-!
# Fundamental Cone

Let `K` be a number field of signature `(r‚ÇÅ, r‚ÇÇ)`. We define an action of the units `(ùìû K)À£` on
the mixed space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` via the `mixedEmbedding`.

## Main definitions and results

* `NumberField.mixedEmbedding.unitSMul`: the action of `(ùìû K)À£` on the mixed space defined, for
`u : (ùìû K)À£`, by multiplication component by component with `mixedEmbedding K u`.

## Tags

number field, canonical embedding, units
-/

variable (K : Type*) [Field K]

namespace NumberField.mixedEmbedding

open NumberField NumberField.InfinitePlace

noncomputable section UnitSMul

/-- The action of `(ùìû K)À£` on the mixed space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` defined, for `u : (ùìû K)À£`, by
multiplication component by component with `mixedEmbedding K u`. -/
@[simps]
instance unitSMul : SMul (ùìû K)À£ (mixedSpace K) where
  smul u x := mixedEmbedding K u * x

instance : MulAction (ùìû K)À£ (mixedSpace K) where
  one_smul := fun _ ‚Ü¶ by simp_rw [unitSMul_smul, Units.coe_one, map_one, one_mul]
  mul_smul := fun _ _ _ ‚Ü¶ by simp_rw [unitSMul_smul, Units.coe_mul, map_mul, mul_assoc]

instance : SMulZeroClass (ùìû K)À£ (mixedSpace K) where
  smul_zero := fun _ ‚Ü¶ by simp_rw [unitSMul_smul, mul_zero]

variable {K}

theorem unit_smul_eq_zero (u : (ùìû K)À£) (x : mixedSpace K) :
    u ‚Ä¢ x = 0 ‚Üî x = 0 := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ by rw [h, smul_zero]‚ü©
  contrapose! h
  obtain ‚ü®w, h‚ü© := exists_normAtPlace_ne_zero_iff.mpr h
  refine exists_normAtPlace_ne_zero_iff.mp ‚ü®w, ?_‚ü©
  rw [unitSMul_smul, map_mul]
  exact mul_ne_zero (by simp) h

variable [NumberField K]

theorem unit_smul_eq_iff_mul_eq {x y : ùìû K} {u : (ùìû K)À£} :
    u ‚Ä¢ mixedEmbedding K x = mixedEmbedding K y ‚Üî u * x = y := by
  rw [unitSMul_smul, ‚Üê map_mul, Function.Injective.eq_iff, ‚Üê RingOfIntegers.coe_eq_algebraMap,
    ‚Üê map_mul, ‚Üê RingOfIntegers.ext_iff]
  exact mixedEmbedding_injective K

theorem norm_unit_smul (u : (ùìû K)À£) (x : mixedSpace K) :
    mixedEmbedding.norm (u ‚Ä¢ x) = mixedEmbedding.norm x := by
  rw [unitSMul_smul, map_mul, norm_unit, one_mul]

end UnitSMul

noncomputable section logMap

open NumberField.Units NumberField.Units.dirichletUnitTheorem FiniteDimensional

variable [NumberField K] {K}

open Classical in
/-- The map from the mixed space to `{w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù` (with `w‚ÇÄ` the fixed
place from the proof of Dirichlet Unit Theorem) defined in such way that: 1) it factors the map
`logEmbedding`, see `logMap_eq_logEmbedding`; 2) it is constant on the sets
`{c ‚Ä¢ x | c ‚àà ‚Ñù, c ‚â† 0}` if `norm x ‚â† 0`, see `logMap_real_smul`. -/
def logMap (x : mixedSpace K) : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù := fun w ‚Ü¶
  mult w.val * (Real.log (normAtPlace w.val x) -
    Real.log (mixedEmbedding.norm x) * (finrank ‚Ñö K : ‚Ñù)‚Åª¬π)

@[simp]
theorem logMap_apply (x : mixedSpace K) (w : {w : InfinitePlace K // w ‚â† w‚ÇÄ}) :
    logMap x w = mult w.val * (Real.log (normAtPlace w.val x) -
      Real.log (mixedEmbedding.norm x) * (finrank ‚Ñö K : ‚Ñù)‚Åª¬π) := rfl

@[simp]
theorem logMap_zero : logMap (0 : mixedSpace K) = 0 := by
  ext; simp

@[simp]
theorem logMap_one : logMap (1 : mixedSpace K) = 0 := by
  ext; simp

variable {x y : mixedSpace K}

theorem logMap_mul (hx : mixedEmbedding.norm x ‚â† 0) (hy : mixedEmbedding.norm y ‚â† 0) :
    logMap (x * y) = logMap x + logMap y := by
  ext w
  simp_rw [Pi.add_apply, logMap_apply]
  rw [map_mul, map_mul, Real.log_mul, Real.log_mul hx hy, add_mul]
  ¬∑ ring
  ¬∑ exact mixedEmbedding.norm_ne_zero_iff.mp hx w
  ¬∑ exact mixedEmbedding.norm_ne_zero_iff.mp hy w

theorem logMap_apply_of_norm_one (hx : mixedEmbedding.norm x = 1)
    (w : {w : InfinitePlace K // w ‚â† w‚ÇÄ}) :
    logMap x w = mult w.val * Real.log (normAtPlace w x) := by
  rw [logMap_apply, hx, Real.log_one, zero_mul, sub_zero]

@[simp]
theorem logMap_eq_logEmbedding (u : (ùìû K)À£) :
    logMap (mixedEmbedding K u) = logEmbedding K u := by
  ext; simp

theorem logMap_unit_smul (u : (ùìû K)À£) (hx : mixedEmbedding.norm x ‚â† 0) :
    logMap (u ‚Ä¢ x) = logEmbedding K u + logMap x := by
  rw [unitSMul_smul, logMap_mul (by rw [norm_unit]; norm_num) hx, logMap_eq_logEmbedding]

theorem logMap_torsion_smul {Œ∂ : (ùìû K)À£} (hŒ∂ : Œ∂ ‚àà torsion K) :
    logMap (Œ∂ ‚Ä¢ x) = logMap x := by
  ext
  simp_rw [logMap_apply, unitSMul_smul, map_mul, norm_eq_norm, Units.norm, Rat.cast_one, one_mul,
    normAtPlace_apply, (mem_torsion K).mp hŒ∂, one_mul]

theorem logMap_real (c : ‚Ñù) :
    logMap (c ‚Ä¢ (1 : mixedSpace K)) = 0 := by
  ext
  rw [logMap_apply, normAtPlace_smul, norm_smul, map_one, map_one, mul_one, mul_one, Real.log_pow,
    mul_comm (finrank ‚Ñö K : ‚Ñù) _, mul_assoc, mul_inv_cancel‚ÇÄ (Nat.cast_ne_zero.mpr finrank_pos.ne'),
    mul_one, sub_self, mul_zero, Pi.zero_apply]

theorem logMap_real_smul (hx : mixedEmbedding.norm x ‚â† 0) {c : ‚Ñù} (hc : c ‚â† 0) :
    logMap (c ‚Ä¢ x) = logMap x := by
  have : mixedEmbedding.norm (c ‚Ä¢ (1 : mixedSpace K)) ‚â† 0 := by
    rw [norm_smul, map_one, mul_one]
    exact pow_ne_zero _ (abs_ne_zero.mpr hc)
  rw [‚Üê smul_one_mul, logMap_mul this hx, logMap_real, zero_add]

theorem logMap_eq_of_normAtPlace_eq (h : ‚àÄ w, normAtPlace w x = normAtPlace w y) :
    logMap x = logMap y := by
  ext
  simp_rw [logMap_apply, h, norm_eq_of_normAtPlace_eq h]

end logMap

end NumberField.mixedEmbedding
