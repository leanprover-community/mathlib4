/-
Copyright (c) 2024 Fabrizio Barroero. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Fabrizio Barroero
-/
import Mathlib.Data.Int.WithZero
import Mathlib.NumberTheory.NumberField.Embeddings
import Mathlib.RingTheory.DedekindDomain.AdicValuation
import Mathlib.RingTheory.DedekindDomain.Factorization
import Mathlib.RingTheory.Ideal.Norm.AbsNorm
import Mathlib.Topology.Algebra.Valued.NormedValued

/-!
# Finite places of number fields
This file defines finite places of a number field `K` as absolute values coming from an embedding
into a completion of `K` associated to a non-zero prime ideal of `ùìû K`.

## Main Definitions and Results
* `NumberField.vadicAbv`: a `v`-adic absolute value on `K`.
* `NumberField.FinitePlace`: the type of finite places of a number field `K`.
* `NumberField.FinitePlace.mulSupport_finite`: the `v`-adic absolute value of a non-zero element of
`K` is different from 1 for at most finitely many `v`.

## Tags
number field, places, finite places
-/

open Ideal IsDedekindDomain HeightOneSpectrum NumberField WithZeroMulInt

namespace NumberField

section absoluteValue

variable {K : Type*} [Field K] [NumberField K] (v : HeightOneSpectrum (ùìû K))

/-- The norm of a maximal ideal as an element of `‚Ñù‚â•0` is `> 1`  -/
lemma one_lt_norm : 1 < (absNorm v.asIdeal : NNReal) := by
  norm_cast
  by_contra! h
  apply IsPrime.ne_top v.isPrime
  rw [‚Üê absNorm_eq_one_iff]
  have : 0 < absNorm v.asIdeal := by
    rw [Nat.pos_iff_ne_zero, absNorm_ne_zero_iff]
    exact (v.asIdeal.fintypeQuotientOfFreeOfNeBot v.ne_bot).finite
  omega

private lemma norm_ne_zero : (absNorm v.asIdeal : NNReal) ‚â† 0 := ne_zero_of_lt (one_lt_norm v)

/-- The `v`-adic absolute value on `K` defined as the norm of `v` raised to negative `v`-adic
valuation.-/
noncomputable def vadicAbv : AbsoluteValue K ‚Ñù where
  toFun x := toNNReal (norm_ne_zero v) (v.valuation x)
  map_mul' _ _ := by simp only [_root_.map_mul, NNReal.coe_mul]
  nonneg' _ := NNReal.zero_le_coe
  eq_zero' _ := by simp only [NNReal.coe_eq_zero, map_eq_zero]
  add_le' x y := by
    -- the triangle inequality is implied by the ultrametric one
    apply le_trans _ <| max_le_add_of_nonneg (zero_le ((toNNReal (norm_ne_zero v)) (v.valuation x)))
      (zero_le ((toNNReal (norm_ne_zero v)) (v.valuation y)))
    have h_mono := (toNNReal_strictMono (one_lt_norm v)).monotone
    rw [‚Üê h_mono.map_max] --max goes inside withZeroMultIntToNNReal
    exact h_mono (v.valuation.map_add x y)

theorem vadicAbv_def {x : K} : vadicAbv v x = toNNReal (norm_ne_zero v) (v.valuation x) := rfl

end absoluteValue

section FinitePlace
variable {K : Type*} [Field K] [NumberField K] (v : HeightOneSpectrum (ùìû K))

/-- The embedding of a number field inside its completion with respect to `v`. -/
def embedding : K ‚Üí+* adicCompletion K v :=
  @UniformSpace.Completion.coeRingHom K _ v.adicValued.toUniformSpace _ _

noncomputable instance instRankOneValuedAdicCompletion :
    Valuation.RankOne (valuedAdicCompletion K v).v where
  hom := {
    toFun := toNNReal (norm_ne_zero v)
    map_zero' := rfl
    map_one' := rfl
    map_mul' := MonoidWithZeroHom.map_mul (toNNReal (norm_ne_zero v))
  }
  strictMono' := toNNReal_strictMono (one_lt_norm v)
  nontrivial' := by
    rcases Submodule.exists_mem_ne_zero_of_ne_bot v.ne_bot with ‚ü®x, hx1, hx2‚ü©
    use (x : K)
    rw [valuedAdicCompletion_eq_valuation' v (x : K)]
    constructor
    ¬∑ simpa only [ne_eq, map_eq_zero, NoZeroSMulDivisors.algebraMap_eq_zero_iff]
    ¬∑ apply ne_of_lt
      rw [valuation_eq_intValuationDef, intValuation_lt_one_iff_dvd]
      exact dvd_span_singleton.mpr hx1

/-- The `v`-adic completion of `K` is a normed field. -/
noncomputable instance instNormedFieldValuedAdicCompletion : NormedField (adicCompletion K v) :=
  Valued.toNormedField (adicCompletion K v) (WithZero (Multiplicative ‚Ñ§))

/-- A finite place of a number field `K` is a place associated to an embedding into a completion
with respect to a maximal ideal. -/
def FinitePlace (K : Type*) [Field K] [NumberField K] :=
    {w : AbsoluteValue K ‚Ñù // ‚àÉ v : HeightOneSpectrum (ùìû K), place (embedding v) = w}

/-- Return the finite place defined by a maximal ideal `v`. -/
noncomputable def FinitePlace.mk (v : HeightOneSpectrum (ùìû K)) : FinitePlace K :=
  ‚ü®place (embedding v), ‚ü®v, rfl‚ü©‚ü©

lemma toNNReal_Valued_eq_vadicAbv (x : K) :
    toNNReal (norm_ne_zero v) (Valued.v (self:=v.adicValued) x) = vadicAbv v x := rfl

/-- The norm of the image after the embedding associated to `v` is equal to the `v`-adic absolute
value. -/
theorem FinitePlace.norm_def (x : K) : ‚Äñembedding v x‚Äñ = vadicAbv v x := by
  simp only [NormedField.toNorm, instNormedFieldValuedAdicCompletion, Valued.toNormedField,
    instFieldAdicCompletion, Valued.norm, Valuation.RankOne.hom, MonoidWithZeroHom.coe_mk,
    ZeroHom.coe_mk, embedding, UniformSpace.Completion.coeRingHom, RingHom.coe_mk, MonoidHom.coe_mk,
    OneHom.coe_mk, Valued.valuedCompletion_apply, toNNReal_Valued_eq_vadicAbv]

/-- The norm of the image after the embedding associated to `v` is equal to the norm of `v` raised
to the power of the `v`-adic valuation. -/
theorem FinitePlace.norm_def' (x : K) : ‚Äñembedding v x‚Äñ = toNNReal (norm_ne_zero v)
    (v.valuation x) := by
  rw [norm_def, vadicAbv_def]

/-- The norm of the image after the embedding associated to `v` is equal to the norm of `v` raised
to the power of the `v`-adic valuation for integers. -/
theorem FinitePlace.norm_def_int (x : ùìû K) : ‚Äñembedding v x‚Äñ = toNNReal (norm_ne_zero v)
    (v.intValuationDef x) := by
  rw [norm_def, vadicAbv_def, valuation_eq_intValuationDef]

open FinitePlace

/-- The `v`-adic norm of an integer is at most 1. -/
theorem norm_le_one (x : ùìû K) : ‚Äñembedding v x‚Äñ ‚â§ 1 := by
  rw [norm_def', NNReal.coe_le_one, toNNReal_le_one_iff (one_lt_norm v)]
  exact valuation_le_one v x

/-- The `v`-adic norm of an integer is 1 if and only if it is not in the ideal. -/
theorem norm_eq_one_iff_not_mem (x : ùìû K) : ‚Äñ(embedding v) x‚Äñ = 1 ‚Üî x ‚àâ v.asIdeal := by
  rw [norm_def_int, NNReal.coe_eq_one, toNNReal_eq_one_iff (v.intValuationDef x)
    (norm_ne_zero v) (one_lt_norm v).ne', ‚Üê dvd_span_singleton,
    ‚Üê intValuation_lt_one_iff_dvd, not_lt]
  exact (intValuation_le_one v x).ge_iff_eq.symm

/-- The `v`-adic norm of an integer is less than 1 if and only if it is in the ideal. -/
theorem norm_lt_one_iff_mem (x : ùìû K) : ‚Äñembedding v x‚Äñ < 1 ‚Üî x ‚àà v.asIdeal := by
  rw [norm_def_int, NNReal.coe_lt_one, toNNReal_lt_one_iff (one_lt_norm v),
    intValuation_lt_one_iff_dvd]
  exact dvd_span_singleton

end FinitePlace

namespace FinitePlace
variable {K : Type*} [Field K] [NumberField K]

instance : FunLike (FinitePlace K) K ‚Ñù where
  coe w x := w.1 x
  coe_injective' _ _ h := Subtype.eq (AbsoluteValue.ext <| congr_fun h)

instance : MonoidWithZeroHomClass (FinitePlace K) K ‚Ñù where
  map_mul w := w.1.map_mul
  map_one w := w.1.map_one
  map_zero w := w.1.map_zero

instance : NonnegHomClass (FinitePlace K) K ‚Ñù where
  apply_nonneg w := w.1.nonneg

@[simp]
theorem apply (v : HeightOneSpectrum (ùìû K)) (x : K) : mk v x =  ‚Äñembedding v x‚Äñ := rfl

/-- For a finite place `w`, return a maximal ideal `v` such that `w = finite_place v` . -/
noncomputable def maximalIdeal (w : FinitePlace K) : HeightOneSpectrum (ùìû K) := w.2.choose

@[simp]
theorem mk_maximalIdeal (w : FinitePlace K) : mk (maximalIdeal w) = w := Subtype.ext w.2.choose_spec

@[simp]
theorem norm_embedding_eq (w : FinitePlace K) (x : K) :
    ‚Äñembedding (maximalIdeal w) x‚Äñ = w x := by
  conv_rhs => rw [‚Üê mk_maximalIdeal w, apply]

theorem pos_iff {w : FinitePlace K} {x : K} : 0 < w x ‚Üî x ‚â† 0 := AbsoluteValue.pos_iff w.1

@[simp]
theorem mk_eq_iff {v‚ÇÅ v‚ÇÇ : HeightOneSpectrum (ùìû K)} : mk v‚ÇÅ = mk v‚ÇÇ ‚Üî v‚ÇÅ = v‚ÇÇ := by
  refine ‚ü®?_, fun a ‚Ü¶ by rw [a]‚ü©
  contrapose!
  intro h
  rw [DFunLike.ne_iff]
  have ‚ü®x, hx1, hx2‚ü© : ‚àÉ x : ùìû K, x ‚àà v‚ÇÅ.asIdeal ‚àß x ‚àâ v‚ÇÇ.asIdeal := by
    by_contra! H
    exact h <| HeightOneSpectrum.ext_iff.mpr <| IsMaximal.eq_of_le (isMaximal v‚ÇÅ) IsPrime.ne_top' H
  use x
  simp only [apply]
  rw [‚Üê norm_lt_one_iff_mem ] at hx1
  rw [‚Üê norm_eq_one_iff_not_mem] at hx2
  linarith

theorem maximalIdeal_mk (v : HeightOneSpectrum (ùìû K)) : maximalIdeal (mk v) = v := by
  rw [‚Üê mk_eq_iff, mk_maximalIdeal]

lemma maximalIdeal_injective : (fun w : FinitePlace K ‚Ü¶ maximalIdeal w).Injective :=
  Function.HasLeftInverse.injective ‚ü®mk, mk_maximalIdeal‚ü©

lemma maximalIdeal_inj (w‚ÇÅ w‚ÇÇ : FinitePlace K) : maximalIdeal w‚ÇÅ = maximalIdeal w‚ÇÇ ‚Üî w‚ÇÅ = w‚ÇÇ :=
  maximalIdeal_injective.eq_iff

theorem mulSupport_finite_int {x : ùìû K} (h_x_nezero : x ‚â† 0) :
    (Function.mulSupport fun w : FinitePlace K ‚Ü¶ w x).Finite := by
  have (w : FinitePlace K) : w x ‚â† 1 ‚Üî w x < 1 :=
    ne_iff_lt_iff_le.mpr <| norm_embedding_eq w x ‚ñ∏ norm_le_one w.maximalIdeal x
  simp_rw [Function.mulSupport, this, ‚Üê norm_embedding_eq, norm_lt_one_iff_mem,
    ‚Üê Ideal.dvd_span_singleton]
  have h : {v : HeightOneSpectrum (ùìû K) | v.asIdeal ‚à£ span {x}}.Finite := by
    apply Ideal.finite_factors
    simp only [Submodule.zero_eq_bot, ne_eq, span_singleton_eq_bot, h_x_nezero, not_false_eq_true]
  have h_inj : Set.InjOn FinitePlace.maximalIdeal {w | w.maximalIdeal.asIdeal ‚à£ span {x}} :=
    Function.Injective.injOn maximalIdeal_injective
  refine (h.subset ?_).of_finite_image h_inj
  simp only [dvd_span_singleton, Set.image_subset_iff, Set.preimage_setOf_eq, subset_refl]

theorem mulSupport_finite {x : K} (h_x_nezero : x ‚â† 0) :
    (Function.mulSupport fun w : FinitePlace K ‚Ü¶ w x).Finite := by
  rcases IsFractionRing.div_surjective (A := ùìû K) x with ‚ü®a, b, hb, rfl‚ü©
  simp_all only [ne_eq, div_eq_zero_iff, NoZeroSMulDivisors.algebraMap_eq_zero_iff, not_or,
    map_div‚ÇÄ]
  obtain ‚ü®ha, hb‚ü© := h_x_nezero
  simp_rw [‚Üê RingOfIntegers.coe_eq_algebraMap]
  apply ((mulSupport_finite_int ha).union (mulSupport_finite_int hb)).subset
  intro w
  simp only [Function.mem_mulSupport, ne_eq, Set.mem_union]
  contrapose!
  simp +contextual only [ne_eq, one_ne_zero, not_false_eq_true, div_self, implies_true]

end FinitePlace

end NumberField
