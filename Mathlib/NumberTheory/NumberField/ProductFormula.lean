/-
Copyright (c) 2024 Fabrizio Barroero. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Fabrizio Barroero
-/
import Mathlib.NumberTheory.NumberField.FinitePlaces

/-!
# The Product Formula for number fields
In this file we prove the Product Formula for number fields: for any non-zero element `x` of a
number field `K`, we have `‚àè |x|·µ•=1` where the product runs over the equivalence classes of absolute
values of `K` and the `|‚¨ù|·µ•` are suitably normalized.

## Main Results
* `NumberField.FinitePlace.prod_eq_inv_abs_norm`: for any non-zero element `x` of a number field
`K`, the product `‚àè |x|·µ•` of the absolute values of `x` associated to the finite places of `K` is
equal to the inverse of the norm of `x`.
* `NumberField.prod_abs_eq_one`: for any non-zero element `x` of a number field `K`, we have
`‚àè |x|·µ•=1`, where the product runs over the equivalence classes of absolute values of `K`.

## Tags
number field, embeddings, places, infinite places, finite places, product formula
-/

namespace NumberField

variable {K : Type*} [Field K] [NumberField K]

open Algebra Classical FinitePlace Function Ideal IsDedekindDomain
  IsDedekindDomain.HeightOneSpectrum

/-- For any non-zero `x` in `ùìû K`, the prduct of `w x`, where `w` runs over `FinitePlace K`, is
equal to the inverse of the absolute value of `Algebra.norm ‚Ñ§ x`. -/
theorem FinitePlace.prod_eq_inv_abs_norm_int {x : ùìû K} (h_x_nezero : x ‚â† 0) :
    ‚àè·∂† w : FinitePlace K, w x = (|norm ‚Ñ§ x| : ‚Ñù)‚Åª¬π := by
  convert_to ‚àè·∂† v : HeightOneSpectrum (ùìû K), ‚Äñembedding v x‚Äñ = |‚Üë(norm ‚Ñ§ x)|‚Åª¬π
  ¬∑ exact finprod_eq_of_bijective maximalIdeal equivHeightOneSpectrum.bijective
      fun w ‚Ü¶ (norm_embedding_eq w (x : K)).symm
  refine (inv_eq_of_mul_eq_one_left ?_).symm
  norm_cast
  have h_span_nezero : span {x} ‚â† 0 := by simp [h_x_nezero]
  rw [Int.abs_eq_natAbs, ‚Üê Ideal.absNorm_span_singleton,
    ‚Üê Ideal.finprod_heightOneSpectrum_factorization h_span_nezero, Int.cast_natCast]
  let t‚ÇÄ := {v : HeightOneSpectrum (ùìû K) | x ‚àà v.asIdeal}
  have h_fin‚ÇÄ : t‚ÇÄ.Finite := by simp only [‚Üê dvd_span_singleton, finite_factors h_span_nezero, t‚ÇÄ]
  let t‚ÇÅ := (fun v : HeightOneSpectrum (ùìû K) ‚Ü¶ ‚Äñembedding v x‚Äñ).mulSupport
  let t‚ÇÇ :=
    (fun v : HeightOneSpectrum (ùìû K) ‚Ü¶ (absNorm (v.maxPowDividing (span {x})) : ‚Ñù)).mulSupport
  have h_subs‚ÇÅ : t‚ÇÅ ‚äÜ t‚ÇÄ := by simp [norm_eq_one_iff_not_mem, t‚ÇÅ, t‚ÇÄ]
  have h_subs‚ÇÇ : t‚ÇÇ ‚äÜ t‚ÇÄ := by
    simp only [Set.le_eq_subset, mulSupport_subset_iff, Set.mem_setOf_eq, t‚ÇÇ, t‚ÇÄ,
      maxPowDividing, ‚Üê dvd_span_singleton]
    intro v hv
    simp only [map_pow, Nat.cast_pow, ‚Üê pow_zero (absNorm v.asIdeal : ‚Ñù)] at hv
    replace hv := fun h ‚Ü¶ hv (congrArg (HPow.hPow (absNorm v.asIdeal : ‚Ñù)) h)
    simp only [imp_false, Associates.count_ne_zero_iff_dvd h_span_nezero (irreducible v)] at hv
    exact hv
  have h_fin‚ÇÅ : t‚ÇÅ.Finite := h_fin‚ÇÄ.subset h_subs‚ÇÅ
  have h_fin‚ÇÇ : t‚ÇÇ.Finite := h_fin‚ÇÄ.subset h_subs‚ÇÇ
  have h_prod : (absNorm (‚àè·∂† (v : HeightOneSpectrum (ùìû K)), v.maxPowDividing (span {x})) : ‚Ñù) =
      ‚àè·∂† (v : HeightOneSpectrum (ùìû K)), (absNorm (v.maxPowDividing (span {x})) : ‚Ñù) := by
    let f : Ideal (ùìû K) ‚Üí* ‚Ñù := {
      toFun := fun I ‚Ü¶ (absNorm (S := (ùìû K)) I : ‚Ñù),
      map_one' := by simp only [one_eq_top, absNorm_top, Nat.cast_one],
      map_mul' := by simp only [_root_.map_mul, Nat.cast_mul, implies_true]
    }
    let g := fun v : HeightOneSpectrum (ùìû K) ‚Ü¶ v.maxPowDividing (span {x})
    exact MonoidHom.map_finprod_of_preimage_one f (by simp [t‚ÇÅ, t‚ÇÄ, t‚ÇÇ, f]) g
  rw [h_prod, ‚Üê finprod_mul_distrib h_fin‚ÇÅ h_fin‚ÇÇ]
  apply finprod_eq_one_of_forall_eq_one
  intro v
  rw [maxPowDividing, map_pow, Nat.cast_pow, norm_def, vadicAbv_def,
    WithZeroMulInt.toNNReal_neg_apply _ (v.valuation.ne_zero_iff.mpr
    (RingOfIntegers.coe_ne_zero_iff.mpr h_x_nezero))]
  push_cast
  rw [‚Üê Real.rpow_natCast, ‚Üê Real.rpow_intCast, ‚Üê Real.rpow_add (mod_cast Nat.zero_lt_of_lt
    (mod_cast one_lt_norm v))]
  norm_cast
  rw [zpow_eq_one_iff_right‚ÇÄ (Nat.cast_nonneg' (Nat.card (ùìû K ‚ß∏ v.asIdeal)))
    (by exact ne_of_gt (one_lt_norm v))]
  simp [valuation_eq_intValuationDef, intValuationDef_if_neg, h_x_nezero]

/-- For any non-zero `x` in `K`, the prduct of `w x`, where `w` runs over `FinitePlace K`, is
equal to the inverse of the absolute value of `Algebra.norm ‚Ñö x`. -/
theorem FinitePlace.prod_eq_inv_abs_norm {x : K} (h_x_nezero : x ‚â† 0) :
    ‚àè·∂† w : FinitePlace K, w x = |(Algebra.norm ‚Ñö) x|‚Åª¬π := by
  --reduce to ùìû K
  rcases IsFractionRing.div_surjective (A := ùìû K) x with ‚ü®a, b, hb, rfl‚ü©
  apply nonZeroDivisors.ne_zero at hb
  have ha : a ‚â† 0 := by
    rintro rfl
    simp at h_x_nezero
  simp_rw [map_div‚ÇÄ, Rat.cast_inv, Rat.cast_abs, finprod_div_distrib (mulSupport_finite_int ha)
    (mulSupport_finite_int hb), prod_eq_inv_abs_norm_int ha, prod_eq_inv_abs_norm_int hb]
  rw [‚Üê inv_eq_iff_eq_inv, div_inv_eq_mul, mul_inv_rev, inv_inv, inv_mul_eq_div, ‚Üê abs_div]
  congr
  apply (eq_div_of_mul_eq (by simp only [ne_eq, Int.cast_eq_zero, norm_eq_zero_iff, hb,
    not_false_eq_true]) ?_).symm
  norm_cast
  rw [coe_norm_int a, coe_norm_int b, ‚Üê MonoidHom.map_mul, div_mul_cancel‚ÇÄ _
    (RingOfIntegers.coe_ne_zero_iff.mpr hb)]

/-- The Product Formula for the Number Field `K`. -/
theorem prod_abs_eq_one {x : K} (h_x_nezero : x ‚â† 0) :
    (‚àè w : InfinitePlace K, w x ^ w.mult) * ‚àè·∂† w : FinitePlace K, w x = 1 := by
  simp [prod_eq_inv_abs_norm, InfinitePlace.prod_eq_abs_norm, h_x_nezero]

end NumberField
