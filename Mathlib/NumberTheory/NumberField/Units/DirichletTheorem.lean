/-
Copyright (c) 2023 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.LinearAlgebra.Matrix.Gershgorin
import Mathlib.NumberTheory.NumberField.CanonicalEmbedding.ConvexBody
import Mathlib.NumberTheory.NumberField.Units.Basic
import Mathlib.RingTheory.RootsOfUnity.Basic

#align_import number_theory.number_field.units from "leanprover-community/mathlib"@"00f91228655eecdcd3ac97a7fd8dbcb139fe990a"

/-!
# Dirichlet theorem on the group of units of a number field
This file is devoted to the proof of Dirichlet unit theorem that states that the group of
units `(ùìû K)À£` of units of the ring of integers `ùìû K` of a number field `K` modulo its torsion
subgroup is a free `‚Ñ§`-module of rank `card (InfinitePlace K) - 1`.

## Main definitions

* `NumberField.Units.rank`: the unit rank of the number field `K`.

* `NumberField.Units.fundSystem`: a fundamental system of units of `K`.

* `NumberField.Units.basisModTorsion`: a `‚Ñ§`-basis of `(ùìû K)À£ ‚ß∏ (torsion K)`
as an additive `‚Ñ§`-module.

## Main results

* `NumberField.Units.rank_modTorsion`: the `‚Ñ§`-rank of `(ùìû K)À£ ‚ß∏ (torsion K)` is equal to
`card (InfinitePlace K) - 1`.

* `NumberField.Units.exist_unique_eq_mul_prod`: **Dirichlet Unit Theorem**. Any unit of `ùìû K`
can be written uniquely as the product of a root of unity and powers of the units of the
fundamental system `fundSystem`.

## Tags
number field, units, Dirichlet unit theorem
 -/

open scoped NumberField

noncomputable section

open NumberField NumberField.InfinitePlace NumberField.Units BigOperators

variable (K : Type*) [Field K] [NumberField K]

namespace NumberField.Units.dirichletUnitTheorem

/-!
### Dirichlet Unit Theorem

We define a group morphism from `(ùìû K)À£` to `{w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù` where `w‚ÇÄ` is a
distinguished (arbitrary) infinite place, prove that its kernel is the torsion subgroup (see
`logEmbedding_eq_zero_iff`) and that its image, called `unitLattice`, is a full `‚Ñ§`-lattice. It
follows that `unitLattice` is a free `‚Ñ§`-module (see `instModuleFree_unitLattice`) of rank
`card (InfinitePlaces K) - 1` (see `unitLattice_rank`). To prove that the `unitLattice` is a full
`‚Ñ§`-lattice, we need to prove that it is discrete (see `unitLattice_inter_ball_finite`) and that it
spans the full space over `‚Ñù` (see `unitLattice_span_eq_top`); this is the main part of the proof,
see the section `span_top` below for more details.
-/

open scoped Classical
open Finset

variable {K}

/-- The distinguished infinite place. -/
def w‚ÇÄ : InfinitePlace K := (inferInstance : Nonempty (InfinitePlace K)).some

variable (K)

/-- The logarithmic embedding of the units (seen as an `Additive` group). -/
def logEmbedding : Additive ((ùìû K)À£) ‚Üí+ ({w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù) :=
{ toFun := fun x w => mult w.val * Real.log (w.val ‚Üë(Additive.toMul x))
  map_zero' := by simp; rfl
  map_add' := fun _ _ => by simp [Real.log_mul, mul_add]; rfl }

variable {K}

@[simp]
theorem logEmbedding_component (x : (ùìû K)À£) (w : {w : InfinitePlace K // w ‚â† w‚ÇÄ}) :
    (logEmbedding K x) w = mult w.val * Real.log (w.val x) := rfl

theorem sum_logEmbedding_component (x : (ùìû K)À£) :
    ‚àë w, logEmbedding K x w = - mult (w‚ÇÄ : InfinitePlace K) * Real.log (w‚ÇÄ (x : K)) := by
  have h := congr_arg Real.log (prod_eq_abs_norm (x : K))
  rw [show |(Algebra.norm ‚Ñö) (x : K)| = 1 from isUnit_iff_norm.mp x.isUnit, Rat.cast_one,
    Real.log_one, Real.log_prod] at h
  ¬∑ simp_rw [Real.log_pow] at h
    rw [‚Üê insert_erase (mem_univ w‚ÇÄ), sum_insert (not_mem_erase w‚ÇÄ univ), add_comm,
      add_eq_zero_iff_eq_neg] at h
    convert h using 1
    ¬∑ refine (sum_subtype _ (fun w => ?_) (fun w => (mult w) * (Real.log (w (x : K))))).symm
      exact ‚ü®ne_of_mem_erase, fun h => mem_erase_of_ne_of_mem h (mem_univ w)‚ü©
    ¬∑ norm_num
  ¬∑ exact fun w _ => pow_ne_zero _ (AbsoluteValue.ne_zero _ (coe_ne_zero x))

theorem mult_log_place_eq_zero {x : (ùìû K)À£} {w : InfinitePlace K} :
    mult w * Real.log (w x) = 0 ‚Üî w x = 1 := by
  rw [mul_eq_zero, or_iff_right, Real.log_eq_zero, or_iff_right, or_iff_left]
  ¬∑ linarith [(apply_nonneg _ _ : 0 ‚â§ w x)]
  ¬∑ simp only [ne_eq, map_eq_zero, coe_ne_zero x, not_false_eq_true]
  ¬∑ refine (ne_of_gt ?_)
    rw [mult]; split_ifs <;> norm_num

theorem logEmbedding_eq_zero_iff {x : (ùìû K)À£} :
    logEmbedding K x = 0 ‚Üî x ‚àà torsion K := by
  rw [mem_torsion]
  refine ‚ü®fun h w => ?_, fun h => ?_‚ü©
  ¬∑ by_cases hw : w = w‚ÇÄ
    ¬∑ suffices -mult w‚ÇÄ * Real.log (w‚ÇÄ (x : K)) = 0 by
        rw [neg_mul, neg_eq_zero, ‚Üê hw] at this
        exact mult_log_place_eq_zero.mp this
      rw [‚Üê sum_logEmbedding_component, sum_eq_zero]
      exact fun w _ => congrFun h w
    ¬∑ exact mult_log_place_eq_zero.mp (congrFun h ‚ü®w, hw‚ü©)
  ¬∑ ext w
    rw [logEmbedding_component, h w.val, Real.log_one, mul_zero, Pi.zero_apply]

theorem logEmbedding_component_le {r : ‚Ñù} {x : (ùìû K)À£} (hr : 0 ‚â§ r) (h : ‚ÄñlogEmbedding K x‚Äñ ‚â§ r)
    (w : {w : InfinitePlace K // w ‚â† w‚ÇÄ}) : |logEmbedding K x w| ‚â§ r := by
  lift r to NNReal using hr
  simp_rw [Pi.norm_def, NNReal.coe_le_coe, Finset.sup_le_iff, ‚Üê NNReal.coe_le_coe] at h
  exact h w (mem_univ _)

theorem log_le_of_logEmbedding_le {r : ‚Ñù} {x : (ùìû K)À£} (hr : 0 ‚â§ r) (h : ‚ÄñlogEmbedding K x‚Äñ ‚â§ r)
    (w : InfinitePlace K) : |Real.log (w x)| ‚â§ (Fintype.card (InfinitePlace K)) * r := by
  have tool : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí x ‚â§ mult w * x := fun x hx => by
    nth_rw 1 [‚Üê one_mul x]
    refine mul_le_mul ?_ le_rfl hx ?_
    all_goals { rw [mult]; split_ifs <;> norm_num }
  by_cases hw : w = w‚ÇÄ
  ¬∑ have hyp := congr_arg (‚Äñ¬∑‚Äñ) (sum_logEmbedding_component x).symm
    replace hyp := (le_of_eq hyp).trans (norm_sum_le _ _)
    simp_rw [norm_mul, norm_neg, Real.norm_eq_abs, Nat.abs_cast] at hyp
    refine (le_trans ?_ hyp).trans ?_
    ¬∑ rw [‚Üê hw]
      exact tool _ (abs_nonneg _)
    ¬∑ refine (sum_le_card_nsmul univ _ _
        (fun w _ => logEmbedding_component_le hr h w)).trans ?_
      rw [nsmul_eq_mul]
      refine mul_le_mul ?_ le_rfl hr (Fintype.card (InfinitePlace K)).cast_nonneg
      simp [card_univ]
  ¬∑ have hyp := logEmbedding_component_le hr h ‚ü®w, hw‚ü©
    rw [logEmbedding_component, abs_mul, Nat.abs_cast] at hyp
    refine (le_trans ?_ hyp).trans ?_
    ¬∑ exact tool _ (abs_nonneg _)
    ¬∑ nth_rw 1 [‚Üê one_mul r]
      exact mul_le_mul (Nat.one_le_cast.mpr Fintype.card_pos) (le_of_eq rfl) hr (Nat.cast_nonneg _)

variable (K)

/-- The lattice formed by the image of the logarithmic embedding. -/
noncomputable def _root_.NumberField.Units.unitLattice :
    AddSubgroup ({w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù) :=
  AddSubgroup.map (logEmbedding K) ‚ä§

theorem unitLattice_inter_ball_finite (r : ‚Ñù) :
    ((unitLattice K : Set ({ w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù)) ‚à©
      Metric.closedBall 0 r).Finite := by
  obtain hr | hr := lt_or_le r 0
  ¬∑ convert Set.finite_empty
    rw [Metric.closedBall_eq_empty.mpr hr]
    exact Set.inter_empty _
  ¬∑ suffices {x : (ùìû K)À£ | IsIntegral ‚Ñ§ (x : K) ‚àß
        ‚àÄ (œÜ : K ‚Üí+* ‚ÑÇ), ‚ÄñœÜ x‚Äñ ‚â§ Real.exp ((Fintype.card (InfinitePlace K)) * r)}.Finite by
      refine (Set.Finite.image (logEmbedding K) this).subset ?_
      rintro _ ‚ü®‚ü®x, ‚ü®_, rfl‚ü©‚ü©, hx‚ü©
      refine ‚ü®x, ‚ü®x.val.prop, (le_iff_le _ _).mp (fun w => (Real.log_le_iff_le_exp ?_).mp ?_)‚ü©, rfl‚ü©
      ¬∑ exact pos_iff.mpr (coe_ne_zero x)
      ¬∑ rw [mem_closedBall_zero_iff] at hx
        exact (le_abs_self _).trans (log_le_of_logEmbedding_le hr hx w)
    refine Set.Finite.of_finite_image ?_ ((coe_injective K).injOn _)
    refine (Embeddings.finite_of_norm_le K ‚ÑÇ
        (Real.exp ((Fintype.card (InfinitePlace K)) * r))).subset ?_
    rintro _ ‚ü®x, ‚ü®‚ü®h_int, h_le‚ü©, rfl‚ü©‚ü©
    exact ‚ü®h_int, h_le‚ü©

section span_top

/-!
#### Section `span_top`

In this section, we prove that the span over `‚Ñù` of the `unitLattice` is equal to the full space.
For this, we construct for each infinite place `w‚ÇÅ ‚â† w‚ÇÄ` a unit `u_w‚ÇÅ` of `K` such that, for all
infinite places `w` such that `w ‚â† w‚ÇÅ`, we have `Real.log w (u_w‚ÇÅ) < 0`
(and thus `Real.log w‚ÇÅ (u_w‚ÇÅ) > 0`). It follows then from a determinant computation
(using `Matrix.det_ne_zero_of_sum_col_lt_diag`) that the image by `logEmbedding` of these units is
a `‚Ñù`-linearly independent family. The unit `u_w‚ÇÅ` is obtained by constructing a sequence `seq n`
of nonzero algebraic integers that is strictly decreasing at infinite places distinct from `w‚ÇÅ` and
of norm `‚â§ B`. Since there are finitely many ideals of norm `‚â§ B`, there exists two term in the
sequence defining the same ideal and their quotient is the desired unit `u_w‚ÇÅ` (see `exists_unit`).
-/

open NumberField.mixedEmbedding NNReal

variable (w‚ÇÅ : InfinitePlace K) {B : ‚Ñï} (hB : minkowskiBound K 1 < (convexBodyLTFactor K) * B)

/-- This result shows that there always exists a next term in the sequence. -/
theorem seq_next {x : ùìû K} (hx : x ‚â† 0) :
    ‚àÉ y : ùìû K, y ‚â† 0 ‚àß
      (‚àÄ w, w ‚â† w‚ÇÅ ‚Üí w y < w x) ‚àß
      |Algebra.norm ‚Ñö (y : K)| ‚â§ B := by
  have hx' := RingOfIntegers.coe_ne_zero_iff.mpr hx
  let f : InfinitePlace K ‚Üí ‚Ñù‚â•0 :=
    fun w => ‚ü®(w x) / 2, div_nonneg (AbsoluteValue.nonneg _ _) (by norm_num)‚ü©
  suffices ‚àÄ w, w ‚â† w‚ÇÅ ‚Üí f w ‚â† 0 by
    obtain ‚ü®g, h_geqf, h_gprod‚ü© := adjust_f K B this
    obtain ‚ü®y, h_ynz, h_yle‚ü© := exists_ne_zero_mem_ringOfIntegers_lt (f := g)
      (by rw [convexBodyLT_volume]; convert hB; exact congr_arg ((‚Üë): NNReal ‚Üí ENNReal) h_gprod)
    refine ‚ü®y, h_ynz, fun w hw => (h_geqf w hw ‚ñ∏ h_yle w).trans ?_, ?_‚ü©
    ¬∑ rw [‚Üê Rat.cast_le (K := ‚Ñù), Rat.cast_natCast]
      calc
        _ = ‚àè w : InfinitePlace K, w (algebraMap _ K y) ^ mult w :=
          (prod_eq_abs_norm (algebraMap _ K y)).symm
        _ ‚â§ ‚àè w : InfinitePlace K, (g w : ‚Ñù) ^ mult w := by
          refine prod_le_prod ?_ ?_
          ¬∑ exact fun _ _ => pow_nonneg (by positivity) _
          ¬∑ exact fun w _ => pow_le_pow_left (by positivity) (le_of_lt (h_yle w)) (mult w)
        _ ‚â§ (B : ‚Ñù) := by
          simp_rw [‚Üê NNReal.coe_pow, ‚Üê NNReal.coe_prod]
          exact le_of_eq (congr_arg toReal h_gprod)
    ¬∑ refine div_lt_self ?_ (by norm_num)
      exact pos_iff.mpr hx'
  intro _ _
  rw [ne_eq, Nonneg.mk_eq_zero, div_eq_zero_iff, map_eq_zero, not_or]
  exact ‚ü®hx', by norm_num‚ü©

/-- An infinite sequence of nonzero algebraic integers of `K` satisfying the following properties:
‚Ä¢ `seq n` is nonzero;
‚Ä¢ for `w : InfinitePlace K`, `w ‚â† w‚ÇÅ ‚Üí w (seq n+1) < w (seq n)`;
‚Ä¢ `‚à£norm (seq n)‚à£ ‚â§ B`. -/
def seq : ‚Ñï ‚Üí { x : ùìû K // x ‚â† 0 }
  | 0 => ‚ü®1, by norm_num‚ü©
  | n + 1 =>
    ‚ü®(seq_next K w‚ÇÅ hB (seq n).prop).choose, (seq_next K w‚ÇÅ hB (seq n).prop).choose_spec.1‚ü©

/-- The terms of the sequence are nonzero. -/
theorem seq_ne_zero (n : ‚Ñï) : algebraMap (ùìû K) K (seq K w‚ÇÅ hB n) ‚â† 0 :=
  RingOfIntegers.coe_ne_zero_iff.mpr (seq K w‚ÇÅ hB n).prop

/-- The terms of the sequence have nonzero norm. -/
theorem seq_norm_ne_zero (n : ‚Ñï) : Algebra.norm ‚Ñ§ (seq K w‚ÇÅ hB n : ùìû K) ‚â† 0 :=
  Algebra.norm_ne_zero_iff.mpr (Subtype.coe_ne_coe.1 (seq_ne_zero K w‚ÇÅ hB n))

/-- The sequence is strictly decreasing at infinite places distinct from `w‚ÇÅ`. -/
theorem seq_decreasing {n m : ‚Ñï} (h : n < m) (w : InfinitePlace K) (hw : w ‚â† w‚ÇÅ) :
    w (algebraMap (ùìû K) K (seq K w‚ÇÅ hB m)) < w (algebraMap (ùìû K) K (seq K w‚ÇÅ hB n)) := by
  induction m with
  | zero =>
      exfalso
      exact Nat.not_succ_le_zero n h
  | succ m m_ih =>
      cases eq_or_lt_of_le (Nat.le_of_lt_succ h) with
      | inl hr =>
          rw [hr]
          exact (seq_next K w‚ÇÅ hB (seq K w‚ÇÅ hB m).prop).choose_spec.2.1 w hw
      | inr hr =>
          refine lt_trans ?_ (m_ih hr)
          exact (seq_next K w‚ÇÅ hB (seq K w‚ÇÅ hB m).prop).choose_spec.2.1 w hw

/-- The terms of the sequence have norm bounded by `B`. -/
theorem seq_norm_le (n : ‚Ñï) :
    Int.natAbs (Algebra.norm ‚Ñ§ (seq K w‚ÇÅ hB n : ùìû K)) ‚â§ B := by
  cases n with
  | zero =>
      have : 1 ‚â§ B := by
        contrapose! hB
        simp only [Nat.lt_one_iff.mp hB, CharP.cast_eq_zero, mul_zero, zero_le]
      simp only [ne_eq, seq, map_one, Int.natAbs_one, this]
  | succ n =>
      rw [‚Üê Nat.cast_le (Œ± := ‚Ñö), Int.cast_natAbs, Int.cast_abs, Algebra.coe_norm_int]
      exact (seq_next K w‚ÇÅ hB (seq K w‚ÇÅ hB n).prop).choose_spec.2.2

/-- Construct a unit associated to the place `w‚ÇÅ`. The family, for `w‚ÇÅ ‚â† w‚ÇÄ`, formed by the
image by the `logEmbedding` of these units is `‚Ñù`-linearly independent, see
`unitLattice_span_eq_top`. -/
theorem exists_unit (w‚ÇÅ : InfinitePlace K) :
    ‚àÉ u : (ùìû K)À£, ‚àÄ w : InfinitePlace K, w ‚â† w‚ÇÅ ‚Üí Real.log (w u) < 0 := by
  obtain ‚ü®B, hB‚ü© : ‚àÉ B : ‚Ñï, minkowskiBound K 1 < (convexBodyLTFactor K) * B := by
    conv => congr; ext; rw [mul_comm]
    exact ENNReal.exists_nat_mul_gt (ENNReal.coe_ne_zero.mpr (convexBodyLTFactor_ne_zero K))
      (ne_of_lt (minkowskiBound_lt_top K 1))
  rsuffices ‚ü®n, m, hnm, h‚ü© : ‚àÉ n m, n < m ‚àß
      (Ideal.span ({ (seq K w‚ÇÅ hB n : ùìû K) }) = Ideal.span ({ (seq K w‚ÇÅ hB m : ùìû K) }))
  ¬∑ have hu := Ideal.span_singleton_eq_span_singleton.mp h
    refine ‚ü®hu.choose, fun w hw => Real.log_neg ?_ ?_‚ü©
    ¬∑ exact pos_iff.mpr (coe_ne_zero _)
    ¬∑ calc
        _ = w (algebraMap (ùìû K) K (seq K w‚ÇÅ hB m) * (algebraMap (ùìû K) K (seq K w‚ÇÅ hB n))‚Åª¬π) := by
          rw [‚Üê congr_arg (algebraMap (ùìû K) K) hu.choose_spec, mul_comm, map_mul (algebraMap _ _),
          ‚Üê mul_assoc, inv_mul_cancel (seq_ne_zero K w‚ÇÅ hB n), one_mul]
        _ = w (algebraMap (ùìû K) K (seq K w‚ÇÅ hB m)) * w (algebraMap (ùìû K) K (seq K w‚ÇÅ hB n))‚Åª¬π :=
          _root_.map_mul _ _ _
        _ < 1 := by
          rw [map_inv‚ÇÄ, mul_inv_lt_iff (pos_iff.mpr (seq_ne_zero K w‚ÇÅ hB n)), mul_one]
          exact seq_decreasing K w‚ÇÅ hB hnm w hw
  refine Set.Finite.exists_lt_map_eq_of_forall_mem
    (t := { I : Ideal (ùìû K) | 1 ‚â§ Ideal.absNorm I ‚àß Ideal.absNorm I ‚â§ B })
    (fun n => ?_) ?_
  ¬∑ rw [Set.mem_setOf_eq, Ideal.absNorm_span_singleton]
    refine ‚ü®?_, seq_norm_le K w‚ÇÅ hB n‚ü©
    exact Nat.one_le_iff_ne_zero.mpr (Int.natAbs_ne_zero.mpr (seq_norm_ne_zero K w‚ÇÅ hB n))
  ¬∑ rw [show { I : Ideal (ùìû K) | 1 ‚â§ Ideal.absNorm I ‚àß Ideal.absNorm I ‚â§ B } =
          (‚ãÉ n ‚àà Set.Icc 1 B, { I : Ideal (ùìû K) | Ideal.absNorm I = n }) by ext; simp]
    exact Set.Finite.biUnion (Set.finite_Icc _ _) (fun n hn => Ideal.finite_setOf_absNorm_eq hn.1)

theorem unitLattice_span_eq_top :
    Submodule.span ‚Ñù (unitLattice K : Set ({w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù)) = ‚ä§ := by
  refine le_antisymm le_top ?_
  -- The standard basis
  let B := Pi.basisFun ‚Ñù {w : InfinitePlace K // w ‚â† w‚ÇÄ}
  -- The image by log_embedding of the family of units constructed above
  let v := fun w : { w : InfinitePlace K // w ‚â† w‚ÇÄ } => logEmbedding K (exists_unit K w).choose
  -- To prove the result, it is enough to prove that the family `v` is linearly independent
  suffices B.det v ‚â† 0 by
    rw [‚Üê isUnit_iff_ne_zero, ‚Üê is_basis_iff_det] at this
    rw [‚Üê this.2]
    exact Submodule.span_monotone (fun _ ‚ü®w, hw‚ü© =>
      ‚ü®(exists_unit K w).choose, trivial, by rw [‚Üê hw]‚ü©)
  rw [Basis.det_apply]
  -- We use a specific lemma to prove that this determinant is nonzero
  refine det_ne_zero_of_sum_col_lt_diag (fun w => ?_)
  simp_rw [Real.norm_eq_abs, B, Basis.coePiBasisFun.toMatrix_eq_transpose, Matrix.transpose_apply]
  rw [‚Üê sub_pos, sum_congr rfl (fun x hx => abs_of_neg ?_), sum_neg_distrib, sub_neg_eq_add,
    sum_erase_eq_sub (mem_univ _), ‚Üê add_comm_sub]
  ¬∑ refine add_pos_of_nonneg_of_pos ?_ ?_
    ¬∑ rw [sub_nonneg]
      exact le_abs_self _
    ¬∑ rw [sum_logEmbedding_component (exists_unit K w).choose]
      refine mul_pos_of_neg_of_neg ?_ ((exists_unit K w).choose_spec _ w.prop.symm)
      rw [mult]; split_ifs <;> norm_num
  ¬∑ refine mul_neg_of_pos_of_neg ?_ ((exists_unit K w).choose_spec x ?_)
    ¬∑ rw [mult]; split_ifs <;> norm_num
    ¬∑ exact Subtype.ext_iff_val.not.mp (ne_of_mem_erase hx)

end span_top

end dirichletUnitTheorem

section statements

variable [NumberField K]

open scoped Classical
open dirichletUnitTheorem FiniteDimensional

/-- The unit rank of the number field `K`, it is equal to `card (InfinitePlace K) - 1`. -/
def rank : ‚Ñï := Fintype.card (InfinitePlace K) - 1

instance instDiscrete_unitLattice : DiscreteTopology (unitLattice K) := by
  refine discreteTopology_of_isOpen_singleton_zero ?_
  refine isOpen_singleton_of_finite_mem_nhds 0 (s := Metric.closedBall 0 1) ?_ ?_
  ¬∑ exact Metric.closedBall_mem_nhds _ (by norm_num)
  ¬∑ refine Set.Finite.of_finite_image ?_ (Set.injOn_of_injective Subtype.val_injective _)
    convert unitLattice_inter_ball_finite K 1
    ext x
    refine ‚ü®?_, fun ‚ü®hx1, hx2‚ü© => ‚ü®‚ü®x, hx1‚ü©, hx2, rfl‚ü©‚ü©
    rintro ‚ü®x, hx, rfl‚ü©
    exact ‚ü®Subtype.mem x, hx‚ü©

instance instZlattice_unitLattice : IsZlattice ‚Ñù (unitLattice K) where
  span_top := unitLattice_span_eq_top K

protected theorem finrank_eq_rank :
    finrank ‚Ñù ({w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù) = Units.rank K := by
  simp only [finrank_fintype_fun_eq_card, Fintype.card_subtype_compl,
    Fintype.card_ofSubsingleton, rank]

@[simp]
theorem unitLattice_rank :
    finrank ‚Ñ§ (unitLattice K) = Units.rank K := by
  rw [‚Üê Units.finrank_eq_rank, Zlattice.rank ‚Ñù]

private theorem unitLatticeEquiv_aux1 :
    (logEmbedding K).ker = (MonoidHom.toAdditive (QuotientGroup.mk' (torsion K))).ker := by
  ext
  rw [MonoidHom.coe_toAdditive_ker, QuotientGroup.ker_mk', AddMonoidHom.mem_ker,
    logEmbedding_eq_zero_iff]
  rfl

private theorem unitLatticeEquiv_aux2 :
    Function.Surjective (MonoidHom.toAdditive (QuotientGroup.mk' (torsion K))) := by
  intro x
  refine ‚ü®Additive.ofMul x.out', ?_‚ü©
  simp only [MonoidHom.toAdditive_apply_apply, toMul_ofMul, QuotientGroup.mk'_apply,
      QuotientGroup.out_eq']
  rfl

/-- The linear equivalence between `unitLattice` and `(ùìû K)À£ ‚ß∏ (torsion K)` as an additive
`‚Ñ§`-module. -/
def unitLatticeEquiv : (unitLattice K) ‚âÉ‚Çó[‚Ñ§] Additive ((ùìû K)À£ ‚ß∏ (torsion K)) :=
  AddEquiv.toIntLinearEquiv <|
    (AddEquiv.addSubgroupCongr (AddMonoidHom.range_eq_map (logEmbedding K)).symm).trans <|
      (QuotientAddGroup.quotientKerEquivRange (logEmbedding K)).symm.trans <|
          (QuotientAddGroup.quotientAddEquivOfEq (unitLatticeEquiv_aux1  K)).trans <|
            QuotientAddGroup.quotientKerEquivOfSurjective
              (MonoidHom.toAdditive (QuotientGroup.mk' (torsion K))) (unitLatticeEquiv_aux2 K)

instance : Module.Free ‚Ñ§ (Additive ((ùìû K)À£ ‚ß∏ (torsion K))) :=
  Module.Free.of_equiv (unitLatticeEquiv K)

instance : Module.Finite ‚Ñ§ (Additive ((ùìû K)À£ ‚ß∏ (torsion K))) :=
  Module.Finite.equiv (unitLatticeEquiv K)

-- Note that we prove this instance first and then deduce from it the instance
-- `Monoid.FG (ùìû K)À£`, and not the other way around, due to no `Subgroup` version
-- of `Submodule.fg_of_fg_map_of_fg_inf_ker` existing.
instance : Module.Finite ‚Ñ§ (Additive (ùìû K)À£) := by
  rw [Module.finite_def]
  refine Submodule.fg_of_fg_map_of_fg_inf_ker
    (MonoidHom.toAdditive (QuotientGroup.mk' (torsion K))).toIntLinearMap ?_ ?_
  ¬∑ rw [Submodule.map_top, LinearMap.range_eq_top.mpr
      (by exact QuotientGroup.mk'_surjective (torsion K)), ‚Üê Module.finite_def]
    infer_instance
  ¬∑ rw [inf_of_le_right le_top, AddMonoidHom.coe_toIntLinearMap_ker, MonoidHom.coe_toAdditive_ker,
      QuotientGroup.ker_mk', Submodule.fg_iff_add_subgroup_fg,
      AddSubgroup.toIntSubmodule_toAddSubgroup, ‚Üê AddGroup.fg_iff_addSubgroup_fg]
    have : Finite (Subgroup.toAddSubgroup (torsion K)) := (inferInstance : Finite (torsion K))
    exact AddGroup.fg_of_finite

instance : Monoid.FG (ùìû K)À£ := by
  rw [Monoid.fg_iff_add_fg, ‚Üê AddGroup.fg_iff_addMonoid_fg, ‚Üê Module.Finite.iff_addGroup_fg]
  infer_instance

theorem rank_modTorsion :
    FiniteDimensional.finrank ‚Ñ§ (Additive ((ùìû K)À£ ‚ß∏ (torsion K))) = rank K := by
  rw [‚Üê LinearEquiv.finrank_eq (unitLatticeEquiv K), unitLattice_rank]

/-- A basis of the quotient `(ùìû K)À£ ‚ß∏ (torsion K)` seen as an additive ‚Ñ§-module. -/
def basisModTorsion : Basis (Fin (rank K)) ‚Ñ§ (Additive ((ùìû K)À£ ‚ß∏ (torsion K))) :=
  Basis.reindex (Module.Free.chooseBasis ‚Ñ§ _) (Fintype.equivOfCardEq <| by
    rw [‚Üê FiniteDimensional.finrank_eq_card_chooseBasisIndex, rank_modTorsion, Fintype.card_fin])

/-- A fundamental system of units of `K`. The units of `fundSystem` are arbitrary lifts of the
units in `basisModTorsion`. -/
def fundSystem : Fin (rank K) ‚Üí (ùìû K)À£ :=
  -- `:)` prevents the `‚ß∏` decaying to a quotient by `leftRel` when we unfold this later
  fun i => Quotient.out' (Additive.toMul (basisModTorsion K i) :)

/-- The exponents that appear in the unique decomposition of a unit as the product of
a root of unity and powers of the units of the fundamental system `fundSystem` (see
`exist_unique_eq_mul_prod`) are given by the representation of the unit on `basisModTorsion`. -/
theorem fun_eq_repr {x Œ∂ : (ùìû K)À£} {f : Fin (rank K) ‚Üí ‚Ñ§} (hŒ∂ : Œ∂ ‚àà torsion K)
    (h : x = Œ∂ * ‚àè i, (fundSystem K i) ^ (f i)) :
    f = (basisModTorsion K).repr (Additive.ofMul ‚Üëx) := by
  suffices Additive.ofMul ‚Üëx = ‚àë i, (f i) ‚Ä¢ (basisModTorsion K i) by
    rw [‚Üê (basisModTorsion K).repr_sum_self f, ‚Üê this]
  calc
    Additive.ofMul ‚Üëx
    _ = ‚àë i, (f i) ‚Ä¢ Additive.ofMul ‚Üë(fundSystem K i) := by
          rw [h, QuotientGroup.mk_mul, (QuotientGroup.eq_one_iff _).mpr hŒ∂, one_mul,
            QuotientGroup.mk_prod, ofMul_prod]; rfl
    _ = ‚àë i, (f i) ‚Ä¢ (basisModTorsion K i) := by
          simp_rw [fundSystem, QuotientGroup.out_eq', ofMul_toMul]

/-- **Dirichlet Unit Theorem**. Any unit `x` of `ùìû K` can be written uniquely as the product of
a root of unity and powers of the units of the fundamental system `fundSystem`. -/
theorem exist_unique_eq_mul_prod (x : (ùìû K)À£) : ‚àÉ! Œ∂e : torsion K √ó (Fin (rank K) ‚Üí ‚Ñ§),
    x = Œ∂e.1 * ‚àè i, (fundSystem K i) ^ (Œ∂e.2 i) := by
  let Œ∂ := x * (‚àè i, (fundSystem K i) ^ ((basisModTorsion K).repr (Additive.ofMul ‚Üëx) i))‚Åª¬π
  have h_tors : Œ∂ ‚àà torsion K := by
    rw [‚Üê QuotientGroup.eq_one_iff, QuotientGroup.mk_mul, QuotientGroup.mk_inv, ‚Üê ofMul_eq_zero,
      ofMul_mul, ofMul_inv, QuotientGroup.mk_prod, ofMul_prod]
    simp_rw [QuotientGroup.mk_zpow, ofMul_zpow, fundSystem, QuotientGroup.out_eq']
    rw [add_eq_zero_iff_eq_neg, neg_neg]
    exact ((basisModTorsion K).sum_repr (Additive.ofMul ‚Üëx)).symm
  refine ‚ü®‚ü®‚ü®Œ∂, h_tors‚ü©, ((basisModTorsion K).repr (Additive.ofMul ‚Üëx) : Fin (rank K) ‚Üí ‚Ñ§)‚ü©, ?_, ?_‚ü©
  ¬∑ simp only [Œ∂, _root_.inv_mul_cancel_right]
  ¬∑ rintro ‚ü®‚ü®Œ∂', h_tors'‚ü©, Œ∑‚ü© hf
    simp only [Œ∂, ‚Üê fun_eq_repr K h_tors' hf, Prod.mk.injEq, Subtype.mk.injEq, and_true]
    nth_rewrite 1 [hf]
    rw [_root_.mul_inv_cancel_right]

end statements

end NumberField.Units
