/-
Copyright (c) 2022 Riccardo Brasca. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Riccardo Brasca
-/
import Mathlib.NumberTheory.Cyclotomic.Discriminant
import Mathlib.RingTheory.Polynomial.Eisenstein.IsIntegral
import Mathlib.RingTheory.Ideal.Norm

#align_import number_theory.cyclotomic.rat from "leanprover-community/mathlib"@"b353176c24d96c23f0ce1cc63efc3f55019702d9"

/-!
# Ring of integers of `p ^ n`-th cyclotomic fields
We gather results about cyclotomic extensions of `‚Ñö`. In particular, we compute the ring of
integers of a `p ^ n`-th cyclotomic extension of `‚Ñö`.

## Main results
* `IsCyclotomicExtension.Rat.isIntegralClosure_adjoin_singleton_of_prime_pow`: if `K` is a
  `p ^ k`-th cyclotomic extension of `‚Ñö`, then `(adjoin ‚Ñ§ {Œ∂})` is the integral closure of
  `‚Ñ§` in `K`.
* `IsCyclotomicExtension.Rat.cyclotomicRing_isIntegralClosure_of_prime_pow`: the integral
  closure of `‚Ñ§` inside `CyclotomicField (p ^ k) ‚Ñö` is `CyclotomicRing (p ^ k) ‚Ñ§ ‚Ñö`.
-/


universe u

open Algebra IsCyclotomicExtension Polynomial NumberField

open scoped Cyclotomic NumberField Nat

variable {p : ‚Ñï+} {k : ‚Ñï} {K : Type u} [Field K] [CharZero K] {Œ∂ : K} [hp : Fact (p : ‚Ñï).Prime]

namespace IsCyclotomicExtension.Rat

/-- The discriminant of the power basis given by `Œ∂ - 1`. -/
theorem discr_prime_pow_ne_two' [IsCyclotomicExtension {p ^ (k + 1)} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ (k + 1))) (hk : p ^ (k + 1) ‚â† 2) :
    discr ‚Ñö (hŒ∂.subOnePowerBasis ‚Ñö).basis =
      (-1) ^ ((p ^ (k + 1) : ‚Ñï).totient / 2) * p ^ ((p : ‚Ñï) ^ k * ((p - 1) * (k + 1) - 1)) := by
  rw [‚Üê discr_prime_pow_ne_two hŒ∂ (cyclotomic.irreducible_rat (p ^ (k + 1)).pos) hk]
  exact hŒ∂.discr_zeta_eq_discr_zeta_sub_one.symm
#align is_cyclotomic_extension.rat.discr_prime_pow_ne_two' IsCyclotomicExtension.Rat.discr_prime_pow_ne_two'

theorem discr_odd_prime' [IsCyclotomicExtension {p} ‚Ñö K] (hŒ∂ : IsPrimitiveRoot Œ∂ p) (hodd : p ‚â† 2) :
    discr ‚Ñö (hŒ∂.subOnePowerBasis ‚Ñö).basis = (-1) ^ (((p : ‚Ñï) - 1) / 2) * p ^ ((p : ‚Ñï) - 2) := by
  rw [‚Üê discr_odd_prime hŒ∂ (cyclotomic.irreducible_rat hp.out.pos) hodd]
  exact hŒ∂.discr_zeta_eq_discr_zeta_sub_one.symm
#align is_cyclotomic_extension.rat.discr_odd_prime' IsCyclotomicExtension.Rat.discr_odd_prime'

/-- The discriminant of the power basis given by `Œ∂ - 1`. Beware that in the cases `p ^ k = 1` and
`p ^ k = 2` the formula uses `1 / 2 = 0` and `0 - 1 = 0`. It is useful only to have a uniform
result. See also `IsCyclotomicExtension.Rat.discr_prime_pow_eq_unit_mul_pow'`. -/
theorem discr_prime_pow' [IsCyclotomicExtension {p ^ k} ‚Ñö K] (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ k)) :
    discr ‚Ñö (hŒ∂.subOnePowerBasis ‚Ñö).basis =
      (-1) ^ ((p ^ k : ‚Ñï).totient / 2) * p ^ ((p : ‚Ñï) ^ (k - 1) * ((p - 1) * k - 1)) := by
  rw [‚Üê discr_prime_pow hŒ∂ (cyclotomic.irreducible_rat (p ^ k).pos)]
  exact hŒ∂.discr_zeta_eq_discr_zeta_sub_one.symm
#align is_cyclotomic_extension.rat.discr_prime_pow' IsCyclotomicExtension.Rat.discr_prime_pow'

/-- If `p` is a prime and `IsCyclotomicExtension {p ^ k} K L`, then there are `u : ‚Ñ§À£` and
`n : ‚Ñï` such that the discriminant of the power basis given by `Œ∂ - 1` is `u * p ^ n`. Often this is
enough and less cumbersome to use than `IsCyclotomicExtension.Rat.discr_prime_pow'`. -/
theorem discr_prime_pow_eq_unit_mul_pow' [IsCyclotomicExtension {p ^ k} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ k)) :
    ‚àÉ (u : ‚Ñ§À£) (n : ‚Ñï), discr ‚Ñö (hŒ∂.subOnePowerBasis ‚Ñö).basis = u * p ^ n := by
  rw [hŒ∂.discr_zeta_eq_discr_zeta_sub_one.symm]
  exact discr_prime_pow_eq_unit_mul_pow hŒ∂ (cyclotomic.irreducible_rat (p ^ k).pos)
#align is_cyclotomic_extension.rat.discr_prime_pow_eq_unit_mul_pow' IsCyclotomicExtension.Rat.discr_prime_pow_eq_unit_mul_pow'

/-- If `K` is a `p ^ k`-th cyclotomic extension of `‚Ñö`, then `(adjoin ‚Ñ§ {Œ∂})` is the
integral closure of `‚Ñ§` in `K`. -/
theorem isIntegralClosure_adjoin_singleton_of_prime_pow [hcycl : IsCyclotomicExtension {p ^ k} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ k)) : IsIntegralClosure (adjoin ‚Ñ§ ({Œ∂} : Set K)) ‚Ñ§ K := by
  refine' ‚ü®Subtype.val_injective, @fun x => ‚ü®fun h => ‚ü®‚ü®x, _‚ü©, rfl‚ü©, _‚ü©‚ü©
  swap
  ¬∑ rintro ‚ü®y, rfl‚ü©
    exact
      IsIntegral.algebraMap
        (le_integralClosure_iff_isIntegral.1
          (adjoin_le_integralClosure (hŒ∂.isIntegral (p ^ k).pos)) _)
  let B := hŒ∂.subOnePowerBasis ‚Ñö
  have hint : IsIntegral ‚Ñ§ B.gen := (hŒ∂.isIntegral (p ^ k).pos).sub isIntegral_one
-- Porting note: the following `haveI` was not needed because the locale `cyclotomic` set it
-- as instances.
  letI := IsCyclotomicExtension.finiteDimensional {p ^ k} ‚Ñö K
  have H := discr_mul_isIntegral_mem_adjoin ‚Ñö hint h
  obtain ‚ü®u, n, hun‚ü© := discr_prime_pow_eq_unit_mul_pow' hŒ∂
  rw [hun] at H
  replace H := Subalgebra.smul_mem _ H u.inv
-- Porting note: the proof is slightly different because of coercions.
  rw [‚Üê smul_assoc, ‚Üê smul_mul_assoc, Units.inv_eq_val_inv, zsmul_eq_mul, ‚Üê Int.cast_mul,
    Units.inv_mul, Int.cast_one, one_mul, smul_def, map_pow] at H
  cases k
  ¬∑ haveI : IsCyclotomicExtension {1} ‚Ñö K := by simpa using hcycl
    have : x ‚àà (‚ä• : Subalgebra ‚Ñö K) := by
      rw [singleton_one ‚Ñö K]
      exact mem_top
    obtain ‚ü®y, rfl‚ü© := mem_bot.1 this
    replace h := (isIntegral_algebraMap_iff (algebraMap ‚Ñö K).injective).1 h
    obtain ‚ü®z, hz‚ü© := IsIntegrallyClosed.isIntegral_iff.1 h
    rw [‚Üê hz, ‚Üê IsScalarTower.algebraMap_apply]
    exact Subalgebra.algebraMap_mem _ _
  ¬∑ have hmin : (minpoly ‚Ñ§ B.gen).IsEisensteinAt (Submodule.span ‚Ñ§ {((p : ‚Ñï) : ‚Ñ§)}) := by
      have h‚ÇÅ := minpoly.isIntegrallyClosed_eq_field_fractions' ‚Ñö hint
      have h‚ÇÇ := hŒ∂.minpoly_sub_one_eq_cyclotomic_comp (cyclotomic.irreducible_rat (p ^ _).pos)
      rw [IsPrimitiveRoot.subOnePowerBasis_gen] at h‚ÇÅ
      rw [h‚ÇÅ, ‚Üê map_cyclotomic_int, show Int.castRingHom ‚Ñö = algebraMap ‚Ñ§ ‚Ñö by rfl,
        show X + 1 = map (algebraMap ‚Ñ§ ‚Ñö) (X + 1) by simp, ‚Üê map_comp] at h‚ÇÇ
      haveI : CharZero ‚Ñö := StrictOrderedSemiring.to_charZero
      rw [IsPrimitiveRoot.subOnePowerBasis_gen,
        map_injective (algebraMap ‚Ñ§ ‚Ñö) (algebraMap ‚Ñ§ ‚Ñö).injective_int h‚ÇÇ]
      exact cyclotomic_prime_pow_comp_X_add_one_isEisensteinAt p _
    refine'
      adjoin_le _
        (mem_adjoin_of_smul_prime_pow_smul_of_minpoly_isEisensteinAt (n := n)
          (Nat.prime_iff_prime_int.1 hp.out) hint h (by simpa using H) hmin)
    simp only [Set.singleton_subset_iff, SetLike.mem_coe]
    exact Subalgebra.sub_mem _ (self_mem_adjoin_singleton ‚Ñ§ _) (Subalgebra.one_mem _)
#align is_cyclotomic_extension.rat.is_integral_closure_adjoin_singleton_of_prime_pow IsCyclotomicExtension.Rat.isIntegralClosure_adjoin_singleton_of_prime_pow

theorem isIntegralClosure_adjoin_singleton_of_prime [hcycl : IsCyclotomicExtension {p} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üëp) : IsIntegralClosure (adjoin ‚Ñ§ ({Œ∂} : Set K)) ‚Ñ§ K := by
  rw [‚Üê pow_one p] at hŒ∂ hcycl
  exact isIntegralClosure_adjoin_singleton_of_prime_pow hŒ∂
#align is_cyclotomic_extension.rat.is_integral_closure_adjoin_singleton_of_prime IsCyclotomicExtension.Rat.isIntegralClosure_adjoin_singleton_of_prime

/-- The integral closure of `‚Ñ§` inside `CyclotomicField (p ^ k) ‚Ñö` is
`CyclotomicRing (p ^ k) ‚Ñ§ ‚Ñö`. -/
theorem cyclotomicRing_isIntegralClosure_of_prime_pow :
    IsIntegralClosure (CyclotomicRing (p ^ k) ‚Ñ§ ‚Ñö) ‚Ñ§ (CyclotomicField (p ^ k) ‚Ñö) := by
  haveI : CharZero ‚Ñö := StrictOrderedSemiring.to_charZero
  have hŒ∂ := zeta_spec (p ^ k) ‚Ñö (CyclotomicField (p ^ k) ‚Ñö)
  refine' ‚ü®IsFractionRing.injective _ _, @fun x => ‚ü®fun h => ‚ü®‚ü®x, _‚ü©, rfl‚ü©, _‚ü©‚ü©
-- Porting note: having `.isIntegral_iff` inside the definition of `this` causes an error.
  ¬∑ have := (isIntegralClosure_adjoin_singleton_of_prime_pow hŒ∂)
    obtain ‚ü®y, rfl‚ü© := this.isIntegral_iff.1 h
    refine' adjoin_mono _ y.2
    simp only [PNat.pow_coe, Set.singleton_subset_iff, Set.mem_setOf_eq]
    exact hŒ∂.pow_eq_one
  ¬∑ rintro ‚ü®y, rfl‚ü©
    exact IsIntegral.algebraMap ((IsCyclotomicExtension.integral {p ^ k} ‚Ñ§ _) _)
#align is_cyclotomic_extension.rat.cyclotomic_ring_is_integral_closure_of_prime_pow IsCyclotomicExtension.Rat.cyclotomicRing_isIntegralClosure_of_prime_pow

theorem cyclotomicRing_isIntegralClosure_of_prime :
    IsIntegralClosure (CyclotomicRing p ‚Ñ§ ‚Ñö) ‚Ñ§ (CyclotomicField p ‚Ñö) := by
  rw [‚Üê pow_one p]
  exact cyclotomicRing_isIntegralClosure_of_prime_pow
#align is_cyclotomic_extension.rat.cyclotomic_ring_is_integral_closure_of_prime IsCyclotomicExtension.Rat.cyclotomicRing_isIntegralClosure_of_prime

end IsCyclotomicExtension.Rat

section PowerBasis

open IsCyclotomicExtension.Rat

namespace IsPrimitiveRoot

/-- The algebra isomorphism `adjoin ‚Ñ§ {Œ∂} ‚âÉ‚Çê[‚Ñ§] (ùìû K)`, where `Œ∂` is a primitive `p ^ k`-th root of
unity and `K` is a `p ^ k`-th cyclotomic extension of `‚Ñö`. -/
@[simps!]
noncomputable def _root_.IsPrimitiveRoot.adjoinEquivRingOfIntegers
    [IsCyclotomicExtension {p ^ k} ‚Ñö K] (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ k)) :
    adjoin ‚Ñ§ ({Œ∂} : Set K) ‚âÉ‚Çê[‚Ñ§] ùìû K :=
  let _ := isIntegralClosure_adjoin_singleton_of_prime_pow hŒ∂
  IsIntegralClosure.equiv ‚Ñ§ (adjoin ‚Ñ§ ({Œ∂} : Set K)) K (ùìû K)
#align is_primitive_root.adjoin_equiv_ring_of_integers IsPrimitiveRoot.adjoinEquivRingOfIntegers

/-- The ring of integers of a `p ^ k`-th cyclotomic extension of `‚Ñö` is a cyclotomic extension. -/
instance IsCyclotomicExtension.ringOfIntegers [IsCyclotomicExtension {p ^ k} ‚Ñö K] :
    IsCyclotomicExtension {p ^ k} ‚Ñ§ (ùìû K) :=
  let _ := (zeta_spec (p ^ k) ‚Ñö K).adjoin_isCyclotomicExtension ‚Ñ§
  IsCyclotomicExtension.equiv _ ‚Ñ§ _ (zeta_spec (p ^ k) ‚Ñö K).adjoinEquivRingOfIntegers
#align is_cyclotomic_extension.ring_of_integers IsPrimitiveRoot.IsCyclotomicExtension.ringOfIntegers

/-- The integral `PowerBasis` of `ùìû K` given by a primitive root of unity, where `K` is a `p ^ k`
cyclotomic extension of `‚Ñö`. -/
noncomputable def integralPowerBasis [IsCyclotomicExtension {p ^ k} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ k)) : PowerBasis ‚Ñ§ (ùìû K) :=
  (Algebra.adjoin.powerBasis' (hŒ∂.isIntegral (p ^ k).pos)).map hŒ∂.adjoinEquivRingOfIntegers
#align is_primitive_root.integral_power_basis IsPrimitiveRoot.integralPowerBasis

/-- Abbreviation to see a primitive root of unity as a member of the ring of integers. -/
abbrev toInteger {k : ‚Ñï+} (hŒ∂ : IsPrimitiveRoot Œ∂ k) : ùìû K := ‚ü®Œ∂, hŒ∂.isIntegral k.pos‚ü©

--Porting note: the proof changed because `simp` unfolds too much.
@[simp]
theorem integralPowerBasis_gen [hcycl : IsCyclotomicExtension {p ^ k} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ k)) :
    hŒ∂.integralPowerBasis.gen = hŒ∂.toInteger :=
  Subtype.ext <| show algebraMap _ K hŒ∂.integralPowerBasis.gen = _ by
    rw [integralPowerBasis, PowerBasis.map_gen, adjoin.powerBasis'_gen]
    simp only [adjoinEquivRingOfIntegers_apply, IsIntegralClosure.algebraMap_lift]
    rfl
#align is_primitive_root.integral_power_basis_gen IsPrimitiveRoot.integralPowerBasis_gen

@[simp]
theorem integralPowerBasis_dim [hcycl : IsCyclotomicExtension {p ^ k} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ k)) : hŒ∂.integralPowerBasis.dim = œÜ (p ^ k) := by
  simp [integralPowerBasis, ‚Üê cyclotomic_eq_minpoly hŒ∂, natDegree_cyclotomic]
#align is_primitive_root.integral_power_basis_dim IsPrimitiveRoot.integralPowerBasis_dim

/-- The algebra isomorphism `adjoin ‚Ñ§ {Œ∂} ‚âÉ‚Çê[‚Ñ§] (ùìû K)`, where `Œ∂` is a primitive `p`-th root of
unity and `K` is a `p`-th cyclotomic extension of `‚Ñö`. -/
@[simps!]
noncomputable def _root_.IsPrimitiveRoot.adjoinEquivRingOfIntegers'
    [hcycl : IsCyclotomicExtension {p} ‚Ñö K] (hŒ∂ : IsPrimitiveRoot Œ∂ p) :
    adjoin ‚Ñ§ ({Œ∂} : Set K) ‚âÉ‚Çê[‚Ñ§] ùìû K :=
  @adjoinEquivRingOfIntegers p 1 K _ _ _ _ (by convert hcycl; rw [pow_one]) (by rwa [pow_one])
#align is_primitive_root.adjoin_equiv_ring_of_integers' IsPrimitiveRoot.adjoinEquivRingOfIntegers'

/-- The ring of integers of a `p`-th cyclotomic extension of `‚Ñö` is a cyclotomic extension. -/
instance _root_.IsCyclotomicExtension.ring_of_integers' [IsCyclotomicExtension {p} ‚Ñö K] :
    IsCyclotomicExtension {p} ‚Ñ§ (ùìû K) :=
  let _ := (zeta_spec p ‚Ñö K).adjoin_isCyclotomicExtension ‚Ñ§
  IsCyclotomicExtension.equiv _ ‚Ñ§ _ (zeta_spec p ‚Ñö K).adjoinEquivRingOfIntegers'
#align is_cyclotomic_extension.ring_of_integers' IsCyclotomicExtension.ring_of_integers'

/-- The integral `PowerBasis` of `ùìû K` given by a primitive root of unity, where `K` is a `p`-th
cyclotomic extension of `‚Ñö`. -/
noncomputable def integralPowerBasis' [hcycl : IsCyclotomicExtension {p} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ p) : PowerBasis ‚Ñ§ (ùìû K) :=
  @integralPowerBasis p 1 K _ _ _ _ (by convert hcycl; rw [pow_one]) (by rwa [pow_one])
#align is_primitive_root.integral_power_basis' IsPrimitiveRoot.integralPowerBasis'

@[simp]
theorem integralPowerBasis'_gen [hcycl : IsCyclotomicExtension {p} ‚Ñö K] (hŒ∂ : IsPrimitiveRoot Œ∂ p) :
    hŒ∂.integralPowerBasis'.gen = hŒ∂.toInteger :=
  @integralPowerBasis_gen p 1 K _ _ _ _ (by convert hcycl; rw [pow_one]) (by rwa [pow_one])
#align is_primitive_root.integral_power_basis'_gen IsPrimitiveRoot.integralPowerBasis'_gen

@[simp]
theorem power_basis_int'_dim [hcycl : IsCyclotomicExtension {p} ‚Ñö K] (hŒ∂ : IsPrimitiveRoot Œ∂ p) :
    hŒ∂.integralPowerBasis'.dim = œÜ p := by
  erw [@integralPowerBasis_dim p 1 K _ _ _ _ (by convert hcycl; rw [pow_one]) (by rwa [pow_one]),
    pow_one]
#align is_primitive_root.power_basis_int'_dim IsPrimitiveRoot.power_basis_int'_dim

/-- The integral `PowerBasis` of `ùìû K` given by `Œ∂ - 1`, where `K` is a `p ^ k` cyclotomic
extension of `‚Ñö`. -/
noncomputable def subOneIntegralPowerBasis [IsCyclotomicExtension {p ^ k} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ k)) : PowerBasis ‚Ñ§ (ùìû K) :=
  PowerBasis.ofGenMemAdjoin' hŒ∂.integralPowerBasis
    (isIntegral_of_mem_ringOfIntegers <|
      Subalgebra.sub_mem _ (hŒ∂.isIntegral (p ^ k).pos) (Subalgebra.one_mem _))
    (by
      simp only [integralPowerBasis_gen, toInteger]
      convert Subalgebra.add_mem _ (self_mem_adjoin_singleton ‚Ñ§ (‚ü®Œ∂ - 1, _‚ü© : ùìû K))
        (Subalgebra.one_mem _)
-- Porting note: `simp` was able to finish the proof.
      simp only [Subsemiring.coe_add, Subalgebra.coe_toSubsemiring,
        OneMemClass.coe_one, sub_add_cancel]
      exact Subalgebra.sub_mem _ (hŒ∂.isIntegral (by simp)) (Subalgebra.one_mem _))
#align is_primitive_root.sub_one_integral_power_basis IsPrimitiveRoot.subOneIntegralPowerBasis

@[simp]
theorem subOneIntegralPowerBasis_gen [IsCyclotomicExtension {p ^ k} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ k)) :
    hŒ∂.subOneIntegralPowerBasis.gen =
      ‚ü®Œ∂ - 1, Subalgebra.sub_mem _ (hŒ∂.isIntegral (p ^ k).pos) (Subalgebra.one_mem _)‚ü© :=
  by simp [subOneIntegralPowerBasis]
#align is_primitive_root.sub_one_integral_power_basis_gen IsPrimitiveRoot.subOneIntegralPowerBasis_gen

/-- The integral `PowerBasis` of `ùìû K` given by `Œ∂ - 1`, where `K` is a `p`-th cyclotomic
extension of `‚Ñö`. -/
noncomputable def subOneIntegralPowerBasis' [hcycl : IsCyclotomicExtension {p} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ p) : PowerBasis ‚Ñ§ (ùìû K) :=
  @subOneIntegralPowerBasis p 1 K _ _ _ _ (by convert hcycl; rw [pow_one]) (by rwa [pow_one])
#align is_primitive_root.sub_one_integral_power_basis' IsPrimitiveRoot.subOneIntegralPowerBasis'

@[simp]
theorem subOneIntegralPowerBasis'_gen [hcycl : IsCyclotomicExtension {p} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ p) :
    hŒ∂.subOneIntegralPowerBasis'.gen = hŒ∂.toInteger - 1 :=
  @subOneIntegralPowerBasis_gen p 1 K _ _ _ _ (by convert hcycl; rw [pow_one]) (by rwa [pow_one])
#align is_primitive_root.sub_one_integral_power_basis'_gen IsPrimitiveRoot.subOneIntegralPowerBasis'_gen

/-- `Œ∂ - 1` is prime if `p ‚â† 2` and `Œ∂` is a primitive `p ^ (k + 1)`-th root of unity.
  See `zeta_sub_one_prime` for a general statement. -/
theorem zeta_sub_one_prime_of_ne_two [IsCyclotomicExtension {p ^ (k + 1)} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ (k + 1))) (hodd : p ‚â† 2) :
    Prime (hŒ∂.toInteger - 1) := by
  letI := IsCyclotomicExtension.numberField {p ^ (k + 1)} ‚Ñö K
  refine Ideal.prime_of_irreducible_absNorm_span (fun h ‚Ü¶ ?_) ?_
  ¬∑ apply hŒ∂.pow_ne_one_of_pos_of_lt zero_lt_one (one_lt_pow hp.out.one_lt (by simp))
    rw [‚Üê Subalgebra.coe_eq_zero] at h
    simpa [sub_eq_zero] using h
  rw [Nat.irreducible_iff_prime, Ideal.absNorm_span_singleton, ‚Üê Nat.prime_iff,
    ‚Üê Int.prime_iff_natAbs_prime]
  convert Nat.prime_iff_prime_int.1 hp.out
  apply RingHom.injective_int (algebraMap ‚Ñ§ ‚Ñö)
  rw [‚Üê Algebra.norm_localization (S‚Çò := K) ‚Ñ§ (nonZeroDivisors ‚Ñ§), Subalgebra.algebraMap_eq]
  simp only [PNat.pow_coe, id.map_eq_id, RingHomCompTriple.comp_eq, RingHom.coe_coe,
    Subalgebra.coe_val, algebraMap_int_eq, map_natCast]
  exact hŒ∂.sub_one_norm_prime_ne_two (Polynomial.cyclotomic.irreducible_rat (PNat.pos _)) hodd

/-- `Œ∂ - 1` is prime if `Œ∂` is a primitive `2 ^ (k + 1)`-th root of unity.
  See `zeta_sub_one_prime` for a general statement. -/
theorem zeta_sub_one_prime_of_two_pow [IsCyclotomicExtension {(2 : ‚Ñï+) ^ (k + 1)} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë((2 : ‚Ñï+) ^ (k + 1))) :
    Prime (hŒ∂.toInteger - 1) := by
  letI := IsCyclotomicExtension.numberField {(2 : ‚Ñï+) ^ (k + 1)} ‚Ñö K
  refine Ideal.prime_of_irreducible_absNorm_span (fun h ‚Ü¶ ?_) ?_
  ¬∑ apply hŒ∂.pow_ne_one_of_pos_of_lt zero_lt_one (one_lt_pow (by decide) (by simp))
    rw [‚Üê Subalgebra.coe_eq_zero] at h
    simpa [sub_eq_zero] using h
  rw [Nat.irreducible_iff_prime, Ideal.absNorm_span_singleton, ‚Üê Nat.prime_iff,
    ‚Üê Int.prime_iff_natAbs_prime]
  cases k
  ¬∑ convert Prime.neg Int.prime_two
    apply RingHom.injective_int (algebraMap ‚Ñ§ ‚Ñö)
    rw [‚Üê Algebra.norm_localization (S‚Çò := K) ‚Ñ§ (nonZeroDivisors ‚Ñ§), Subalgebra.algebraMap_eq]
    simp only [Nat.zero_eq, PNat.pow_coe, id.map_eq_id, RingHomCompTriple.comp_eq, RingHom.coe_coe,
      Subalgebra.coe_val, algebraMap_int_eq, map_neg, map_ofNat]
    simpa using hŒ∂.pow_sub_one_norm_two (cyclotomic.irreducible_rat (by simp))
  convert Int.prime_two
  apply RingHom.injective_int (algebraMap ‚Ñ§ ‚Ñö)
  rw [‚Üê Algebra.norm_localization (S‚Çò := K) ‚Ñ§ (nonZeroDivisors ‚Ñ§), Subalgebra.algebraMap_eq]
  simp only [PNat.pow_coe, id.map_eq_id, RingHomCompTriple.comp_eq, RingHom.coe_coe,
    Subalgebra.coe_val, algebraMap_int_eq, map_natCast]
  exact hŒ∂.sub_one_norm_two Nat.AtLeastTwo.prop (cyclotomic.irreducible_rat (by simp))

/-- `Œ∂ - 1` is prime if `Œ∂` is a primitive `p ^ (k + 1)`-th root of unity. -/
theorem zeta_sub_one_prime [IsCyclotomicExtension {p ^ (k + 1)} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ (k + 1))) : Prime (hŒ∂.toInteger - 1) := by
  by_cases htwo : p = 2
  ¬∑ subst htwo
    apply hŒ∂.zeta_sub_one_prime_of_two_pow
  ¬∑ apply hŒ∂.zeta_sub_one_prime_of_ne_two htwo

/-- `Œ∂ - 1` is prime if `Œ∂` is a primitive `p`-th root of unity. -/
theorem zeta_sub_one_prime' [h : IsCyclotomicExtension {p} ‚Ñö K] (hŒ∂ : IsPrimitiveRoot Œ∂ p) :
    Prime ((hŒ∂.toInteger - 1)) := by
  convert zeta_sub_one_prime (k := 0) (by simpa)
  simpa

theorem subOneIntegralPowerBasis_gen_prime [IsCyclotomicExtension {p ^ (k + 1)} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ (k + 1))) :
    Prime hŒ∂.subOneIntegralPowerBasis.gen := by simpa using hŒ∂.zeta_sub_one_prime

theorem subOneIntegralPowerBasis'_gen_prime [IsCyclotomicExtension {p} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üëp) :
    Prime hŒ∂.subOneIntegralPowerBasis'.gen := by simpa using hŒ∂.zeta_sub_one_prime'

end IsPrimitiveRoot

end PowerBasis
