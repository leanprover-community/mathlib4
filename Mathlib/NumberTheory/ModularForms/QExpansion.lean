/-
Copyright (c) 2024 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import Mathlib.Analysis.Complex.TaylorSeries
import Mathlib.Analysis.Complex.UpperHalfPlane.Exp
import Mathlib.Analysis.Complex.UpperHalfPlane.Manifold
import Mathlib.NumberTheory.ModularForms.Basic
import Mathlib.NumberTheory.ModularForms.Identities
import Mathlib.RingTheory.PowerSeries.Basic

/-!
# q-expansions of modular forms

We show that any modular form of level `Œì` can be written as `œÑ ‚Ü¶ F (ùï¢ h œÑ)` where `F` is
analytic on the open unit disc, and `ùï¢ h` is the parameter `œÑ ‚Ü¶ exp (2 * I * œÄ * œÑ / h)`, for `h`
divisible by the cusp width of `Œì`. As an application, we show that cusp forms decay exponentially
to 0 as `im œÑ ‚Üí ‚àû`.

We also define the `q`-expansion of a modular form, either as a power series or as a
`FormalMultilinearSeries`, and show that it converges to `f` on the upper half plane.

## Main definitions and results

* `SlashInvariantFormClass.cuspFunction`: for a slash-invariant form, this is the function
  `F` such that `f œÑ = F (exp (2 * œÄ * I * œÑ / h))`, extended by a choice of limit at `0`.
* `ModularFormClass.differentiableAt_cuspFunction`: when `f` is a modular form, its `cuspFunction`
  is differentiable on the open unit disc (including at `0`).
* `ModularFormClass.qExpansion`: the `q`-expansion of a modular form (defined as the Taylor series
  of its `cuspFunction`), bundled as a `PowerSeries`.
* `ModularFormClass.hasSum_qExpansion`: the `q`-expansion evaluated at `ùï¢ h œÑ` sums to `f œÑ`, for
  `œÑ` in the upper half plane.

## TO DO:

* define the `q`-expansion map on modular form spaces as a linear map (or even a ring hom from
  the graded ring of all modular forms?)
-/

open scoped Real NNReal MatrixGroups CongruenceSubgroup

noncomputable section

section Cauchy -- move this stuff into complex analysis hierarchy somewhere
open Complex Metric

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚ÑÇ E] [CompleteSpace E]
  {R : ‚Ñù} {f : ‚ÑÇ ‚Üí E} {c : ‚ÑÇ} {s : Set ‚ÑÇ}

/-- Cauchy integral formula for higher derivatives at the central point, most general form
(assuming differentiability off a countable set). -/
lemma Complex.circleIntegral_one_div_sub_center_pow_smul_of_differentiable_on_off_countable
    (h0 : 0 < R) (n : ‚Ñï) (hs : s.Countable)
    (hc : ContinuousOn f (closedBall c R)) (hd : ‚àÄ z ‚àà ball c R \ s, DifferentiableAt ‚ÑÇ f z) :
    (‚àÆ z in C(c, R), (1 / (z - c) ^ (n + 1)) ‚Ä¢ f z)
      = (2 * œÄ * I / n.factorial) ‚Ä¢ iteratedDeriv n f c := by
  have := hasFPowerSeriesOnBall_of_differentiable_off_countable (R := ‚ü®R, h0.le‚ü©) hs hc hd h0
      |>.factorial_smul 1 n
  rw [iteratedFDeriv_apply_eq_iteratedDeriv_mul_prod, Finset.prod_const_one, one_smul] at this
  rw [‚Üê this, cauchyPowerSeries_apply, ‚Üê Nat.cast_smul_eq_nsmul ‚ÑÇ, ‚Üê mul_smul, ‚Üê mul_smul,
    div_mul_cancel‚ÇÄ _ (mod_cast n.factorial_ne_zero), mul_inv_cancel‚ÇÄ two_pi_I_ne_zero, one_smul]
  simp [‚Üê mul_smul, pow_succ, mul_comm]

/-- Cauchy integral formula for higher derivatives at the central point, assuming differentiability
on the open ball and continuity on its closure. -/
lemma DiffContOnCl.circleIntegral_one_div_sub_center_pow_smul
    (h0 : 0 < R) (n : ‚Ñï) (hc : DiffContOnCl ‚ÑÇ f (ball c R)) :
    (‚àÆ z in C(c, R), (1 / (z - c) ^ (n + 1)) ‚Ä¢ f z)
      = (2 * œÄ * I / n.factorial) ‚Ä¢ iteratedDeriv n f c :=
  c.circleIntegral_one_div_sub_center_pow_smul_of_differentiable_on_off_countable h0 n
    Set.countable_empty hc.continuousOn_ball fun _ hx ‚Ü¶ hc.differentiableAt isOpen_ball hx.1

/-- Cauchy integral formula for higher derivatives at the central point, assuming differentiability
on the closed ball. -/
lemma DifferentiableOn.circleIntegral_one_div_sub_center_pow_smul (h0 : 0 < R) (n : ‚Ñï)
    (hc : DifferentiableOn ‚ÑÇ f (closedBall c R)) :
    (‚àÆ z in C(c, R), (1 / (z - c) ^ (n + 1)) ‚Ä¢ f z)
      = (2 * œÄ * I / n.factorial) ‚Ä¢ iteratedDeriv n f c :=
  (hc.mono closure_ball_subset_closedBall).diffContOnCl
    |>.circleIntegral_one_div_sub_center_pow_smul h0 n

end Cauchy

open ModularForm Complex Filter Function

open UpperHalfPlane hiding I

variable {k : ‚Ñ§} {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] {Œì : Subgroup SL(2, ‚Ñ§)} {h : ‚Ñï} (f : F)
  (œÑ : ‚Ñç) {z q : ‚ÑÇ}

local notation "I‚àû" => comap Complex.im atTop
local notation "ùï¢" => Periodic.qParam

namespace SlashInvariantFormClass

variable (h) in
/--
The analytic function `F` such that `f œÑ = F (exp (2 * œÄ * I * œÑ / n))`, extended by a choice of
limit at `0`.
-/
def cuspFunction : ‚ÑÇ ‚Üí ‚ÑÇ := Function.Periodic.cuspFunction h (f ‚àò ofComplex)

variable [hF : SlashInvariantFormClass F Œì k]
include hF

theorem periodic_comp_ofComplex (hŒì : Œì.width ‚à£ h) : Periodic (f ‚àò ofComplex) h := by
  intro w
  by_cases hw : 0 < im w
  ¬∑ have : 0 < im (w + h) := by simp only [add_im, natCast_im, add_zero, hw]
    simp only [comp_apply, ofComplex_apply_of_im_pos this, ofComplex_apply_of_im_pos hw,
      ‚Üê vAdd_width_periodic f k (Nat.cast_dvd_cast hŒì) ‚ü®w, hw‚ü©]
    congr 1
    simp [UpperHalfPlane.ext_iff, add_comm]
  ¬∑ have : im (w + h) ‚â§ 0 := by simpa only [add_im, natCast_im, add_zero, not_lt] using hw
    simp only [comp_apply, ofComplex_apply_of_im_nonpos this,
      ofComplex_apply_of_im_nonpos (not_lt.mp hw)]

theorem eq_cuspFunction {œÑ : ‚Ñç} [NeZero h] (hŒì : Œì.width ‚à£ h) :
    cuspFunction h f (ùï¢ h œÑ) = f œÑ := by
  simpa using (periodic_comp_ofComplex f hŒì).eq_cuspFunction (NeZero.ne _) œÑ

end SlashInvariantFormClass

open SlashInvariantFormClass

namespace ModularFormClass
-- These declarations don't logically need `f` to be a modular form (although they are pretty
-- useless without!)

variable (h) in
/-- The `q`-expansion of a level `n` modular form, bundled as a `PowerSeries`. -/
def qExpansion : PowerSeries ‚ÑÇ :=
  .mk fun n ‚Ü¶ (‚Üën.factorial)‚Åª¬π * iteratedDeriv n (cuspFunction h f) 0

lemma qExpansion_coeff (m : ‚Ñï) :
    (qExpansion h f).coeff m = (‚Üëm.factorial)‚Åª¬π * iteratedDeriv m (cuspFunction h f) 0 := by
  simp [qExpansion]

variable (h) in
/--
The `q`-expansion of a level `n` modular form, bundled as a `FormalMultilinearSeries`.

TODO: Maybe get rid of this and instead define a general API for converting `PowerSeries` to
`FormalMultilinearSeries`.
-/
def qExpansionFormalMultilinearSeries : FormalMultilinearSeries ‚ÑÇ ‚ÑÇ ‚ÑÇ :=
  fun n ‚Ü¶ (qExpansion h f).coeff n ‚Ä¢ ContinuousMultilinearMap.mkPiAlgebraFin ‚ÑÇ n _

lemma qExpansionFormalMultilinearSeries_apply_norm (n : ‚Ñï) :
    ‚ÄñqExpansionFormalMultilinearSeries h f n‚Äñ = ‚Äñ(qExpansion h f).coeff n‚Äñ := by
  rw [qExpansionFormalMultilinearSeries,
    ‚Üê (ContinuousMultilinearMap.piFieldEquiv ‚ÑÇ (Fin n) ‚ÑÇ).symm.norm_map]
  simp

variable [hF : ModularFormClass F Œì k]
include hF

theorem differentiableAt_comp_ofComplex (hz : 0 < im z) :
    DifferentiableAt ‚ÑÇ (f ‚àò ofComplex) z :=
  mdifferentiableAt_iff_differentiableAt.mp ((holo f _).comp z (mdifferentiableAt_ofComplex hz))

theorem bounded_at_infty_comp_ofComplex :
    BoundedAtFilter I‚àû (f ‚àò ofComplex) := by
  simpa only [SlashAction.slash_one, ModularForm.toSlashInvariantForm_coe]
    using (ModularFormClass.bdd_at_infty f 1).comp_tendsto tendsto_comap_im_ofComplex

variable [NeZero h] (hŒì : Œì.width ‚à£ h)
include hŒì

theorem differentiableAt_cuspFunction (hq : ‚Äñq‚Äñ < 1) :
    DifferentiableAt ‚ÑÇ (cuspFunction h f) q := by
  have npos : 0 < (h : ‚Ñù) := mod_cast (Nat.pos_iff_ne_zero.mpr (NeZero.ne _))
  rcases eq_or_ne q 0 with rfl | hq'
  ¬∑ exact (periodic_comp_ofComplex f hŒì).differentiableAt_cuspFunction_zero npos
      (eventually_of_mem (preimage_mem_comap (Ioi_mem_atTop 0))
        (fun _ ‚Ü¶ differentiableAt_comp_ofComplex f))
      (bounded_at_infty_comp_ofComplex f)
  ¬∑ exact Periodic.qParam_right_inv npos.ne' hq' ‚ñ∏
      (periodic_comp_ofComplex f hŒì).differentiableAt_cuspFunction npos.ne'
        <| differentiableAt_comp_ofComplex _ <| Periodic.im_invQParam_pos_of_norm_lt_one npos hq hq'

lemma analyticAt_cuspFunction_zero :
    AnalyticAt ‚ÑÇ (cuspFunction h f) 0 :=
  DifferentiableOn.analyticAt
    (fun q hq ‚Ü¶ (differentiableAt_cuspFunction _ hŒì hq).differentiableWithinAt)
    (by simpa only [ball_zero_eq] using Metric.ball_mem_nhds (0 : ‚ÑÇ) zero_lt_one)

lemma hasSum_qExpansion_of_abs_lt (hq : ‚Äñq‚Äñ < 1) :
    HasSum (fun m ‚Ü¶ (qExpansion h f).coeff m ‚Ä¢ q ^ m) (cuspFunction h f q) := by
  simp only [qExpansion_coeff]
  have hdiff : DifferentiableOn ‚ÑÇ (cuspFunction h f) (Metric.ball 0 1) := by
    refine fun z hz ‚Ü¶ (differentiableAt_cuspFunction f hŒì ?_).differentiableWithinAt
    simpa using hz
  have qmem : q ‚àà Metric.ball 0 1 := by simpa using hq
  convert hasSum_taylorSeries_on_ball hdiff qmem using 2 with m
  rw [sub_zero, smul_eq_mul, smul_eq_mul, mul_right_comm, smul_eq_mul, mul_assoc]

lemma hasSum_qExpansion :
    HasSum (fun m : ‚Ñï ‚Ü¶ (qExpansion h f).coeff m ‚Ä¢ ùï¢ h œÑ ^ m) (f œÑ) := by
  simpa only [eq_cuspFunction f hŒì] using
    hasSum_qExpansion_of_abs_lt f hŒì (œÑ.norm_qParam_lt_one h)

lemma qExpansionFormalMultilinearSeries_radius :
    1 ‚â§ (qExpansionFormalMultilinearSeries h f).radius := by
  refine le_of_forall_lt_imp_le_of_dense fun r hr ‚Ü¶ ?_
  lift r to NNReal using hr.ne_top
  apply FormalMultilinearSeries.le_radius_of_summable
  simp only [qExpansionFormalMultilinearSeries_apply_norm]
  rw [‚Üê r.abs_eq]
  simp_rw [‚Üê Real.norm_eq_abs, ‚Üê Complex.norm_real, ‚Üê norm_pow, ‚Üê norm_mul]
  exact (hasSum_qExpansion_of_abs_lt f hŒì (by simpa using hr)).summable.norm

/-- The `q`-expansion of `f` is an `FPowerSeries` representing `cuspFunction h f`. -/
lemma hasFPowerSeries_cuspFunction :
    HasFPowerSeriesOnBall (cuspFunction h f) (qExpansionFormalMultilinearSeries h f) 0 1 := by
  refine ‚ü®qExpansionFormalMultilinearSeries_radius f hŒì, zero_lt_one, fun {y} hy ‚Ü¶ ?_‚ü©
  replace hy : ‚Äñy‚Äñ < 1 := by simpa [enorm_eq_nnnorm, ‚Üê NNReal.coe_lt_one] using hy
  simpa [qExpansionFormalMultilinearSeries] using hasSum_qExpansion_of_abs_lt f hŒì hy

/-- The `q`-expansion coefficient can be expressed as a `circleIntegral` for any radius `0 < R < 1`.
-/
lemma qExpansion_coeff_eq_circleIntegral (n : ‚Ñï) {R : ‚Ñù} (hR : 0 < R) (hR' : R < 1) :
    (qExpansion h f).coeff n =
      ((2 * œÄ * I)‚Åª¬π * ‚àÆ (z : ‚ÑÇ) in C(0, R), cuspFunction h f z / z ^ (n + 1)) := by
  have : DifferentiableOn ‚ÑÇ (cuspFunction h f) (Metric.closedBall 0 R) := fun z hz ‚Ü¶
      (differentiableAt_cuspFunction f hŒì <| (mem_closedBall_zero_iff.mp hz).trans_lt hR')
        |>.differentiableWithinAt
  have := this.circleIntegral_one_div_sub_center_pow_smul hR n
  rw [smul_eq_mul, div_eq_mul_inv, mul_assoc, mul_comm, ‚Üê div_eq_iff two_pi_I_ne_zero] at this
  simp_rw [qExpansion, PowerSeries.coeff_mk, ‚Üê this, sub_zero, smul_eq_mul, one_div_mul_eq_div,
    div_eq_inv_mul]

/-- The `q`-expansion coefficient can be expressed as an integral along a horizontal line
in the upper half-plane from `t * I` to `N + t * I`, for any `0 < t`.
-/
lemma qExpansion_coeff_eq_intervalIntegral (n : ‚Ñï)
    {t : ‚Ñù} (ht : 0 < t) : (qExpansion h f).coeff n =
    1 / h * ‚à´ u in (0)..h, 1 / ùï¢ h (u + t * I) ^ n * f (‚ü®u + t * I, by simpa using ht‚ü©) := by
  -- We use a circle integral in the `q`-domain of radius `R = exp (-2 * œÄ * t / N)`.
  let R := Real.exp (-2 * œÄ * t / h)
  have hR0 : 0 < R := Real.exp_pos _
  have hR1 : R < 1 := Real.exp_lt_one_iff.mpr <| by
    simp only [neg_mul, neg_div, neg_lt_zero]
    exact div_pos (by positivity) (mod_cast Nat.pos_of_neZero h)
  -- First apply `qExpansion_coeff_eq_circleIntegral` and rescale from `0 .. 2 * œÄ` to `0 .. N`.
  rw [qExpansion_coeff_eq_circleIntegral f hŒì n hR0 hR1, circleIntegral,
    show 2 * œÄ = h * (2 * œÄ / h) by field_simp [NeZero.ne]]
  conv => enter [1, 2, 2]; rw [show 0 = 0 * (2 * œÄ / h) by simp]
  simp_rw [‚Üê intervalIntegral.smul_integral_comp_mul_right, real_smul, ‚Üê mul_assoc,
    ‚Üê intervalIntegral.integral_const_mul]
  -- Compare the integrands
  congr 1 with u
  let œÑ : ‚Ñç := ‚ü®u + t * I, by simpa using ht‚ü©
  have : circleMap 0 R (u * (2 * œÄ / h)) = ùï¢ h œÑ := by
    simp only [circleMap, ofReal_exp, ‚Üê exp_add, zero_add, œÑ, UpperHalfPlane.coe_mk_subtype, R]
    congr 1
    push_cast
    ring_nf
    rw [I_sq]
    ring_nf
  -- now just complex exponential arithmetic to finish
  simp_rw [deriv_circleMap, this, show u + t * I = œÑ by rfl, show ‚ü®‚ÜëœÑ, œÑ.2‚ü© = œÑ by rfl,
    eq_cuspFunction _ hŒì, smul_eq_mul, pow_succ]
  ring_nf -- why do we need to do ring_nf twice here?
  field_simp [(show ùï¢ h œÑ ‚â† 0 from Complex.exp_ne_zero _), Real.pi_ne_zero, NeZero.ne]
  ring_nf

end ModularFormClass

open ModularFormClass

namespace UpperHalfPlane.IsZeroAtImInfty

variable {f}

lemma zeroAtFilter_comp_ofComplex {Œ± : Type*} [Zero Œ±] [TopologicalSpace Œ±] {f : ‚Ñç ‚Üí Œ±}
    (hf : IsZeroAtImInfty f) : ZeroAtFilter I‚àû (f ‚àò ofComplex) := by
  simpa using hf.comp tendsto_comap_im_ofComplex

theorem cuspFunction_apply_zero [NeZero h] (hf : IsZeroAtImInfty f) :
    cuspFunction h f 0 = 0 :=
  Periodic.cuspFunction_zero_of_zero_at_inf (mod_cast (Nat.pos_iff_ne_zero.mpr (NeZero.ne _)))
    hf.zeroAtFilter_comp_ofComplex

/-- A modular form which vanishes at the cusp `‚àû` actually must decay at least as fast as
`Real.exp (-2 * œÄ * œÑ.im / n)`, if `n` divides the cusp with.

(Note that `Œì` need not be finite index here). -/
theorem exp_decay_atImInfty_of_width_dvd [ModularFormClass F Œì k]
    (hf : IsZeroAtImInfty f) (hŒì : Œì.width ‚à£ h) :
    f =O[atImInfty] fun œÑ ‚Ü¶ Real.exp (-2 * œÄ * œÑ.im / h) := by
  -- If `n = 0` the statement is uninteresting, but true, so let's prove it.
  rcases eq_or_ne h 0 with rfl | hŒì'
  ¬∑ simp only [Nat.cast_zero, div_zero, Real.exp_zero]
    exact hf.isBoundedAtImInfty
  -- Now the interesting case.
  ¬∑ haveI : NeZero h := ‚ü®hŒì'‚ü©
    simpa [comp_def] using
      ((periodic_comp_ofComplex f hŒì).exp_decay_of_zero_at_inf
        (mod_cast (Nat.pos_iff_ne_zero.mpr (NeZero.ne _)))
        (eventually_of_mem (preimage_mem_comap (Ioi_mem_atTop 0))
          fun _ ‚Ü¶ differentiableAt_comp_ofComplex f)
        (hf.zeroAtFilter_comp_ofComplex)).comp_tendsto tendsto_coe_atImInfty

/-- A modular form which vanishes at the cusp `‚àû` actually has exponentially rapid decay there. -/
theorem exp_decay_atImInfty [ModularFormClass F Œì k] (hf : IsZeroAtImInfty f) [Œì.FiniteIndex] :
    ‚àÉ a, 0 < a ‚àß f =O[atImInfty] fun œÑ ‚Ü¶ Real.exp (-a * œÑ.im) := by
  haveI := Œì.width_ne_zero
  haveI := NeZero.mk this -- need both "bundled" and "unbundled" versions in context for next line
  refine ‚ü®2 * œÄ / Œì.width, by positivity, ?_‚ü©
  convert hf.exp_decay_atImInfty_of_width_dvd dvd_rfl using 3
  ring

end UpperHalfPlane.IsZeroAtImInfty

namespace CuspFormClass

variable [hF : CuspFormClass F Œì k]
include hF

theorem exp_decay_atImInfty (hŒì : Œì.width ‚à£ h) :
    f =O[atImInfty] fun œÑ ‚Ü¶ Real.exp (-2 * œÄ * œÑ.im / h) :=
  IsZeroAtImInfty.exp_decay_atImInfty_of_width_dvd (by simpa using zero_at_infty f 1) hŒì

/-- If `f` is cuspidal, then it has exponentially rapid decay at every cusp. -/
theorem exp_decay_atImInfty_translate [Œì.FiniteIndex] (Œ≥ : SL(2, ‚Ñ§)) :
    ‚àÉ a, 0 < a ‚àß (f ‚à£[k] Œ≥) =O[atImInfty] fun œÑ ‚Ü¶ Real.exp (-a * œÑ.im) := by
  have hf : IsZeroAtImInfty (CuspForm.translate f Œ≥) := CuspFormClass.zero_at_infty f Œ≥
  suffices (Œì.map <| MulAut.conj Œ≥‚Åª¬π : Subgroup SL(2, ‚Ñ§)).FiniteIndex from hf.exp_decay_atImInfty
  constructor
  rw [Œì.index_map_of_bijective (EquivLike.bijective _)]
  apply Subgroup.FiniteIndex.index_ne_zero

end CuspFormClass
