/-
Copyright (c) 2024 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import Mathlib.Analysis.Complex.TaylorSeries
import Mathlib.Analysis.Complex.UpperHalfPlane.Exp
import Mathlib.NumberTheory.ModularForms.Basic
import Mathlib.NumberTheory.ModularForms.Identities
import Mathlib.RingTheory.PowerSeries.Basic

/-!
# q-expansions of modular forms

We show that a modular form of level `Œì(n)` can be written as `œÑ ‚Ü¶ F (ùï¢ n œÑ)` where `F` is
analytic on the open unit disc, and `ùï¢ n` is the parameter `œÑ ‚Ü¶ exp (2 * I * œÄ * œÑ / n)`. As an
application, we show that cusp forms decay exponentially to 0 as `im œÑ ‚Üí ‚àû`.

We also define the `q`-expansion of a modular form, either as a power series or as a
`FormalMultilinearSeries`, and show that it converges to `f` on the upper half plane.

## Main definitions and results

* `SlashInvariantFormClass.cuspFunction`: for a level `n` slash-invariant form, this is the function
  `F` such that `f œÑ = F (exp (2 * œÄ * I * œÑ / n))`, extended by a choice of limit at `0`.
* `ModularFormClass.differentiableAt_cuspFunction`: when `f` is a modular form, its `cuspFunction`
  is differentiable on the open unit disc (including at `0`).
* `ModularFormClass.qExpansion`: the `q`-expansion of a modular form (defined as the Taylor series
  of its `cuspFunction`), bundled as a `PowerSeries`.
* `ModularFormClass.hasSum_qExpansion`: the `q`-expansion evaluated at `ùï¢ n œÑ` sums to `f œÑ`, for
  `œÑ` in the upper half plane.

## TO DO:

* generalise to handle arbitrary finite-index subgroups (not just `Œì(n)` for some `n`)
* define the `q`-expansion map on modular form spaces as a linear map (or even a ring hom from
  the graded ring of all modular forms?)
-/

open ModularForm Complex Filter Function Matrix.SpecialLinearGroup
open UpperHalfPlane hiding I

open scoped Real MatrixGroups CongruenceSubgroup

noncomputable section

section Cauchy
-- move this stuff into complex analysis hierarchy somewhere

open Metric

end Cauchy

variable {k : ‚Ñ§} {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] {Œì : Subgroup (GL (Fin 2) ‚Ñù)}
    {h : ‚Ñù} (f : F)

local notation "I‚àû" => comap Complex.im atTop
local notation "ùï¢" => Periodic.qParam

namespace SlashInvariantFormClass

theorem periodic_comp_ofComplex [SlashInvariantFormClass F Œì k] (hŒì : h ‚àà Œì.strictPeriods) :
    Periodic (f ‚àò ofComplex) h := by
  intro w
  by_cases hw : 0 < im w
  ¬∑ have : 0 < im (w + h) := by simp [hw]
    simp only [comp_apply, ofComplex_apply_of_im_pos this, ofComplex_apply_of_im_pos hw]
    convert SlashInvariantForm.vAdd_apply_of_mem_strictPeriods f ‚ü®w, hw‚ü© hŒì using 2
    ext
    simp [add_comm]
  ¬∑ have : im (w + h) ‚â§ 0 := by simpa using hw
    simp only [comp_apply, ofComplex_apply_of_im_nonpos this,
      ofComplex_apply_of_im_nonpos (not_lt.mp hw)]

variable (h) in
/--
The analytic function `F` such that `f œÑ = F (exp (2 * œÄ * I * œÑ / n))`, extended by a choice of
limit at `0`.
-/
def cuspFunction (f : ‚Ñç ‚Üí ‚ÑÇ) : ‚ÑÇ ‚Üí ‚ÑÇ := Function.Periodic.cuspFunction h (f ‚àò ofComplex)

theorem eq_cuspFunction [SlashInvariantFormClass F Œì k] (œÑ : ‚Ñç) (hŒì : h ‚àà Œì.strictPeriods)
    (hh : h ‚â† 0) : cuspFunction h f (ùï¢ h œÑ) = f œÑ := by
  simpa only [comp_apply, ofComplex_apply]
    using (periodic_comp_ofComplex f hŒì).eq_cuspFunction hh œÑ

end SlashInvariantFormClass

open SlashInvariantFormClass

namespace ModularFormClass

theorem differentiableAt_comp_ofComplex [ModularFormClass F Œì k]
      {z : ‚ÑÇ} (hz : 0 < im z) :
    DifferentiableAt ‚ÑÇ (f ‚àò ofComplex) z :=
  mdifferentiableAt_iff_differentiableAt.mp ((holo f _).comp z (mdifferentiableAt_ofComplex hz))

theorem bounded_at_infty_comp_ofComplex [ModularFormClass F Œì k] (hi : IsCusp OnePoint.infty Œì) :
    BoundedAtFilter I‚àû (f ‚àò ofComplex) :=
  (OnePoint.isBoundedAt_infty_iff.mp (bdd_at_cusps f hi)).comp_tendsto tendsto_comap_im_ofComplex

theorem differentiableAt_cuspFunction [ModularFormClass F Œì k] [Œì.HasDetPlusMinusOne]
    [DiscreteTopology Œì] (hh : 0 < h) (hŒì : h ‚àà Œì.strictPeriods) {q : ‚ÑÇ} (hq : ‚Äñq‚Äñ < 1) :
    DifferentiableAt ‚ÑÇ (cuspFunction h f) q := by
  have hi : IsCusp OnePoint.infty Œì := by
    rw [Subgroup.strictPeriods_eq_zmultiples_strictWidthInfty] at hŒì
    refine Œì.strictWidthInfty_pos_iff.mp <| Œì.strictWidthInfty_nonneg.lt_of_ne' fun h0 ‚Ü¶ hh.ne' ?_
    simpa only [h0, AddSubgroup.zmultiples_zero_eq_bot, AddSubgroup.mem_bot] using hŒì
  rcases eq_or_ne q 0 with rfl | hq'
  ¬∑ exact (periodic_comp_ofComplex f hŒì).differentiableAt_cuspFunction_zero hh
      (eventually_of_mem (preimage_mem_comap (Ioi_mem_atTop 0))
        (fun _ ‚Ü¶ differentiableAt_comp_ofComplex f))
      (bounded_at_infty_comp_ofComplex f hi)
  ¬∑ exact Periodic.qParam_right_inv hh.ne' hq' ‚ñ∏
      (periodic_comp_ofComplex f hŒì).differentiableAt_cuspFunction hh.ne'
        <| differentiableAt_comp_ofComplex _ <| Periodic.im_invQParam_pos_of_norm_lt_one hh hq hq'

lemma analyticAt_cuspFunction_zero [ModularFormClass F Œì k] [Œì.HasDetPlusMinusOne]
    [DiscreteTopology Œì] (hh : 0 < h) (hŒì : h ‚àà Œì.strictPeriods) :
    AnalyticAt ‚ÑÇ (cuspFunction h f) 0 :=
  DifferentiableOn.analyticAt
    (fun q hq ‚Ü¶ (differentiableAt_cuspFunction _ hh hŒì hq).differentiableWithinAt)
    (by simpa only [ball_zero_eq] using Metric.ball_mem_nhds (0 : ‚ÑÇ) zero_lt_one)

variable (h) in
/-- The `q`-expansion of a level `n` modular form, bundled as a `PowerSeries`. -/
def qExpansion : PowerSeries ‚ÑÇ :=
  .mk fun m ‚Ü¶ (‚Üëm.factorial)‚Åª¬π * iteratedDeriv m (cuspFunction h f) 0

lemma qExpansion_coeff (m : ‚Ñï) :
    (qExpansion h f).coeff m = (‚Üëm.factorial)‚Åª¬π * iteratedDeriv m (cuspFunction h f) 0 := by
  simp [qExpansion]

lemma hasSum_qExpansion_of_abs_lt [ModularFormClass F Œì k] [Œì.HasDetPlusMinusOne]
    [DiscreteTopology Œì] (hh : 0 < h) (hŒì : h ‚àà Œì.strictPeriods) {q : ‚ÑÇ} (hq : ‚Äñq‚Äñ < 1) :
    HasSum (fun m : ‚Ñï ‚Ü¶ (qExpansion h f).coeff m ‚Ä¢ q ^ m) (cuspFunction h f q) := by
  simp only [qExpansion_coeff]
  have hdiff : DifferentiableOn ‚ÑÇ (cuspFunction h f) (Metric.ball 0 1) := by
    refine fun z hz ‚Ü¶ (differentiableAt_cuspFunction f hh hŒì ?_).differentiableWithinAt
    simpa using hz
  have qmem : q ‚àà Metric.ball 0 1 := by simpa using hq
  convert hasSum_taylorSeries_on_ball hdiff qmem using 2 with m
  rw [sub_zero, smul_eq_mul, smul_eq_mul, mul_right_comm, smul_eq_mul, mul_assoc]

lemma hasSum_qExpansion [ModularFormClass F Œì k] [Œì.HasDetPlusMinusOne]
    [DiscreteTopology Œì] (hh : 0 < h) (hŒì : h ‚àà Œì.strictPeriods) (œÑ : ‚Ñç) :
    HasSum (fun m : ‚Ñï ‚Ü¶ (qExpansion h f).coeff m ‚Ä¢ ùï¢ h œÑ ^ m) (f œÑ) := by
  have : ‚Äñùï¢ h œÑ‚Äñ < 1 := by simp [Periodic.qParam, Complex.norm_exp, neg_div]; positivity
  simpa only [eq_cuspFunction f _ hŒì hh.ne'] using hasSum_qExpansion_of_abs_lt f hh hŒì this

variable (h) in
/--
The `q`-expansion of a level `n` modular form, bundled as a `FormalMultilinearSeries`.

TODO: Maybe get rid of this and instead define a general API for converting `PowerSeries` to
`FormalMultilinearSeries`.
-/
def qExpansionFormalMultilinearSeries : FormalMultilinearSeries ‚ÑÇ ‚ÑÇ ‚ÑÇ :=
  fun m ‚Ü¶ (qExpansion h f).coeff m ‚Ä¢ ContinuousMultilinearMap.mkPiAlgebraFin ‚ÑÇ m _

lemma qExpansionFormalMultilinearSeries_apply_norm (m : ‚Ñï) :
    ‚ÄñqExpansionFormalMultilinearSeries h f m‚Äñ = ‚Äñ(qExpansion h f).coeff m‚Äñ := by
  rw [qExpansionFormalMultilinearSeries,
    ‚Üê (ContinuousMultilinearMap.piFieldEquiv ‚ÑÇ (Fin m) ‚ÑÇ).symm.norm_map]
  simp

lemma qExpansionFormalMultilinearSeries_radius [ModularFormClass F Œì k] [Œì.HasDetPlusMinusOne]
    [DiscreteTopology Œì] (hh : 0 < h) (hŒì : h ‚àà Œì.strictPeriods) :
    1 ‚â§ (qExpansionFormalMultilinearSeries h f).radius := by
  refine le_of_forall_lt_imp_le_of_dense fun r hr ‚Ü¶ ?_
  lift r to NNReal using hr.ne_top
  apply FormalMultilinearSeries.le_radius_of_summable
  simp only [qExpansionFormalMultilinearSeries_apply_norm]
  rw [‚Üê r.abs_eq]
  simp_rw [‚Üê Real.norm_eq_abs, ‚Üê Complex.norm_real, ‚Üê norm_pow, ‚Üê norm_mul]
  exact (hasSum_qExpansion_of_abs_lt f hh hŒì (q := r) (by simpa using hr)).summable.norm

/-- The `q`-expansion of `f` is an `FPowerSeries` representing `cuspFunction n f`. -/
lemma hasFPowerSeries_cuspFunction [ModularFormClass F Œì k] [Œì.HasDetPlusMinusOne]
    [DiscreteTopology Œì] (hh : 0 < h) (hŒì : h ‚àà Œì.strictPeriods) :
    HasFPowerSeriesOnBall (cuspFunction h f) (qExpansionFormalMultilinearSeries h f) 0 1 := by
  refine ‚ü®qExpansionFormalMultilinearSeries_radius f hh hŒì, zero_lt_one, fun hy ‚Ü¶ ?_‚ü©
  rw [EMetric.mem_ball, edist_zero_right, enorm_eq_nnnorm, ENNReal.coe_lt_one_iff,
    ‚Üê NNReal.coe_lt_one, coe_nnnorm] at hy
  simpa [qExpansionFormalMultilinearSeries] using hasSum_qExpansion_of_abs_lt f hh hŒì hy

/-- The `q`-expansion coefficient can be expressed as a `circleIntegral` for any radius `0 < R < 1`.
-/
lemma qExpansion_coeff_eq_circleIntegral [ModularFormClass F Œì k] [Œì.HasDetPlusMinusOne]
    [DiscreteTopology Œì] (hh : 0 < h) (hŒì : h ‚àà Œì.strictPeriods)
    (n : ‚Ñï) {R : ‚Ñù} (hR : 0 < R) (hR' : R < 1) :
    (qExpansion h f).coeff n =
      ((2 * œÄ * I)‚Åª¬π * ‚àÆ (z : ‚ÑÇ) in C(0, R), cuspFunction h f z / z ^ (n + 1)) := by
  have : DifferentiableOn ‚ÑÇ (cuspFunction h f) (Metric.closedBall 0 R) := fun z hz ‚Ü¶
      (differentiableAt_cuspFunction f hh hŒì <| (mem_closedBall_zero_iff.mp hz).trans_lt hR')
        |>.differentiableWithinAt
  have := this.circleIntegral_one_div_sub_center_pow_smul hR n
  rw [smul_eq_mul, div_eq_mul_inv, mul_assoc, mul_comm, ‚Üê div_eq_iff two_pi_I_ne_zero] at this
  simp_rw [qExpansion, PowerSeries.coeff_mk, ‚Üê this, sub_zero, smul_eq_mul, one_div_mul_eq_div,
    div_eq_inv_mul]

/-- The `q`-expansion coefficient can be expressed as an integral along a horizontal line
in the upper half-plane from `t * I` to `N + t * I`, for any `0 < t`.
-/
lemma qExpansion_coeff_eq_intervalIntegral [ModularFormClass F Œì k] [Œì.HasDetPlusMinusOne]
    [DiscreteTopology Œì] (hh : 0 < h) (hŒì : h ‚àà Œì.strictPeriods) (n : ‚Ñï)
    {t : ‚Ñù} (ht : 0 < t) : (qExpansion h f).coeff n =
    1 / h * ‚à´ u in (0)..h, 1 / ùï¢ h (u + t * I) ^ n * f (‚ü®u + t * I, by simpa using ht‚ü©) := by
  -- We use a circle integral in the `q`-domain of radius `R = exp (-2 * œÄ * t / N)`.
  let R := Real.exp (-2 * œÄ * t / h)
  have hR0 : 0 < R := Real.exp_pos _
  have hR1 : R < 1 := Real.exp_lt_one_iff.mpr <| by
    simp only [neg_mul, neg_div, neg_lt_zero]
    exact div_pos (by positivity) hh
  -- First apply `qExpansion_coeff_eq_circleIntegral` and rescale from `0 .. 2 * œÄ` to `0 .. N`.
  rw [qExpansion_coeff_eq_circleIntegral f hh hŒì n hR0 hR1, circleIntegral,
    show 2 * œÄ = h * (2 * œÄ / h) by field_simp [NeZero.ne]]
  conv => enter [1, 2, 2]; rw [show 0 = 0 * (2 * œÄ / h) by simp]
  simp_rw [‚Üê intervalIntegral.smul_integral_comp_mul_right, real_smul, ‚Üê mul_assoc,
    ‚Üê intervalIntegral.integral_const_mul]
  -- Compare the integrands
  congr 1 with u
  let œÑ : ‚Ñç := ‚ü®u + t * I, by simpa using ht‚ü©
  have : circleMap 0 R (u * (2 * œÄ / h)) = ùï¢ h œÑ := by
    simp only [circleMap, ofReal_exp, ‚Üê exp_add, zero_add, œÑ, UpperHalfPlane.coe_mk_subtype, R]
    congr 1
    push_cast
    ring_nf
    rw [I_sq]
    ring_nf
  -- now just complex exponential arithmetic to finish
  simp_rw [deriv_circleMap, this, show u + t * I = œÑ by rfl, show ‚ü®‚ÜëœÑ, œÑ.2‚ü© = œÑ by rfl,
    eq_cuspFunction f _ hŒì hh.ne', smul_eq_mul, pow_succ, push_cast]
  field_simp [(show ùï¢ h œÑ ‚â† 0 from Complex.exp_ne_zero _), Real.pi_ne_zero, NeZero.ne]

end ModularFormClass

open ModularFormClass

namespace UpperHalfPlane.IsZeroAtImInfty

variable {f}

lemma zero_at_infty_comp_ofComplex {f : ‚Ñç ‚Üí ‚ÑÇ} (hf : IsZeroAtImInfty f) :
    ZeroAtFilter I‚àû (f ‚àò ofComplex) :=
  hf.comp tendsto_comap_im_ofComplex

theorem cuspFunction_apply_zero {f : ‚Ñç ‚Üí ‚ÑÇ} (hf : IsZeroAtImInfty f) (hh : 0 < h) :
    cuspFunction h f 0 = 0 :=
  Periodic.cuspFunction_zero_of_zero_at_inf hh hf.zero_at_infty_comp_ofComplex

theorem exp_decay_atImInfty [ModularFormClass F Œì k] [Œì.HasDetPlusMinusOne]
    [DiscreteTopology Œì] (hf : IsZeroAtImInfty f) (hh : 0 < h) (hŒì : h ‚àà Œì.strictPeriods) :
    f =O[atImInfty] fun œÑ ‚Ü¶ Real.exp (-2 * œÄ * œÑ.im / h) := by
  have hi : IsCusp OnePoint.infty Œì := by
    rw [Subgroup.strictPeriods_eq_zmultiples_strictWidthInfty] at hŒì
    refine Œì.strictWidthInfty_pos_iff.mp <| Œì.strictWidthInfty_nonneg.lt_of_ne' fun h0 ‚Ü¶ hh.ne' ?_
    simpa only [h0, AddSubgroup.zmultiples_zero_eq_bot, AddSubgroup.mem_bot] using hŒì
  simpa [comp_def] using
    ((periodic_comp_ofComplex f hŒì).exp_decay_of_zero_at_inf hh
      (eventually_of_mem (preimage_mem_comap (Ioi_mem_atTop 0))
        fun _ ‚Ü¶ differentiableAt_comp_ofComplex f)
      hf.zero_at_infty_comp_ofComplex).comp_tendsto tendsto_coe_atImInfty

/-- Version of `exp_decay_atImInfty` stating a less precise result but easier to apply in practice
(not specifying the growth rate precisely). Note that the `Fact` hypothesis is automatically
synthesized for arithmetic subgroups. -/
theorem exp_decay_atImInfty' [ModularFormClass F Œì k] [Œì.HasDetPlusMinusOne]
    [DiscreteTopology Œì] [Fact (IsCusp OnePoint.infty Œì)] (hf : IsZeroAtImInfty f) :
    ‚àÉ h > 0, f =O[atImInfty] fun œÑ ‚Ü¶ Real.exp (-h * œÑ.im) := by
  have hh : 0 < Œì.strictWidthInfty := Œì.strictWidthInfty_pos_iff.mpr Fact.out
  have hŒì : Œì.strictWidthInfty ‚àà Œì.strictPeriods := Œì.strictWidthInfty_mem_strictPeriods
  refine ‚ü®2 * œÄ / Œì.strictWidthInfty, div_pos Real.two_pi_pos hh, ?_‚ü©
  convert hf.exp_decay_atImInfty hh hŒì using 3 with œÑ
  ring

end UpperHalfPlane.IsZeroAtImInfty

namespace CuspFormClass

@[deprecated "use IsZeroAtImInfty.zero_atInfty_comp_ofComplex" (since := "2025-10-13")]
theorem zero_at_infty_comp_ofComplex [CuspFormClass F Œì k] [Fact (IsCusp OnePoint.infty Œì)] :
    ZeroAtFilter I‚àû (f ‚àò ofComplex) :=
  (zero_at_infty f).comp tendsto_comap_im_ofComplex

@[deprecated UpperHalfPlane.IsZeroAtImInfty.cuspFunction_apply_zero (since := "2025-10-13")]
theorem cuspFunction_apply_zero [CuspFormClass F Œì k] [Œì.HasDetPlusMinusOne]
    [DiscreteTopology Œì] (hh : 0 < h) (hŒì : h ‚àà Œì.strictPeriods) :
    cuspFunction h f 0 = 0 :=
  have hi : IsCusp OnePoint.infty Œì := by
    rw [Subgroup.strictPeriods_eq_zmultiples_strictWidthInfty] at hŒì
    refine Œì.strictWidthInfty_pos_iff.mp <| Œì.strictWidthInfty_nonneg.lt_of_ne' fun h0 ‚Ü¶ hh.ne' ?_
    simpa only [h0, AddSubgroup.zmultiples_zero_eq_bot, AddSubgroup.mem_bot] using hŒì
  (OnePoint.isZeroAt_infty_iff.mp <| CuspFormClass.zero_at_cusps f hi).cuspFunction_apply_zero hh

theorem exp_decay_atImInfty [CuspFormClass F Œì k] [Œì.HasDetPlusMinusOne]
    [DiscreteTopology Œì] (hh : 0 < h) (hŒì : h ‚àà Œì.strictPeriods) :
    f =O[atImInfty] fun œÑ ‚Ü¶ Real.exp (-2 * œÄ * œÑ.im / h) :=
  have hi : IsCusp OnePoint.infty Œì := by
    rw [Subgroup.strictPeriods_eq_zmultiples_strictWidthInfty] at hŒì
    refine Œì.strictWidthInfty_pos_iff.mp <| Œì.strictWidthInfty_nonneg.lt_of_ne' fun h0 ‚Ü¶ hh.ne' ?_
    simpa only [h0, AddSubgroup.zmultiples_zero_eq_bot, AddSubgroup.mem_bot] using hŒì
  (OnePoint.isZeroAt_infty_iff.mp <| CuspFormClass.zero_at_cusps f hi).exp_decay_atImInfty hh hŒì

end CuspFormClass
