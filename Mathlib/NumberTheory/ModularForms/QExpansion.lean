/-
Copyright (c) 2024 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import Mathlib.Analysis.Complex.Periodic
import Mathlib.Analysis.Complex.TaylorSeries
import Mathlib.NumberTheory.ModularForms.Basic
import Mathlib.NumberTheory.ModularForms.Identities
import Mathlib.RingTheory.PowerSeries.Basic

/-!
# q-expansions of modular forms

We show that a modular form of level `Œì(n)` can be written as `œÑ ‚Ü¶ F (ùï¢ n œÑ)` where `F` is
analytic on the open unit disc, and `ùï¢ n` is the parameter `œÑ ‚Ü¶ exp (2 * I * œÄ * œÑ / n)`. As an
application, we show that cusp forms decay exponentially to 0 as `im œÑ ‚Üí ‚àû`.

## TO DO:

* generalise to handle arbitrary finite-index subgroups (not just `Œì(n)` for some `n`)
* define the `q`-expansion as a formal power series
-/

open ModularForm Complex Filter UpperHalfPlane Function

open scoped Real MatrixGroups CongruenceSubgroup

noncomputable section

variable {k : ‚Ñ§} {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] {Œì : Subgroup SL(2, ‚Ñ§)} (n : ‚Ñï) (f : F)

local notation "I‚àû" => comap Complex.im atTop
local notation "ùï¢" => Periodic.qParam

theorem Function.Periodic.im_invQParam_pos_of_abs_lt_one
    {h : ‚Ñù} (hh : 0 < h) {q : ‚ÑÇ} (hq : q.abs < 1) (hq_ne : q ‚â† 0) :
    0 < im (Periodic.invQParam h q) :=
  im_invQParam .. ‚ñ∏ mul_pos_of_neg_of_neg
    (div_neg_of_neg_of_pos (neg_lt_zero.mpr hh) Real.two_pi_pos)
    ((Real.log_neg_iff (abs.pos hq_ne)).mpr hq)

lemma Function.Periodic.abs_qParam_le_of_one_half_le_im {Œæ : ‚ÑÇ} (hŒæ : 1 / 2 ‚â§ Œæ.im) :
    ‚Äñùï¢ 1 Œæ‚Äñ ‚â§ rexp (-œÄ) := by
  rwa [Periodic.qParam, ofReal_one, div_one, norm_eq_abs, abs_exp, Real.exp_le_exp,
    mul_right_comm, mul_I_re, neg_le_neg_iff, ‚Üê ofReal_ofNat, ‚Üê ofReal_mul, im_ofReal_mul,
    mul_comm _ œÄ, mul_assoc, le_mul_iff_one_le_right Real.pi_pos, ‚Üê div_le_iff‚ÇÄ' two_pos]

theorem UpperHalfPlane.abs_qParam_lt_one (n : ‚Ñï) [NeZero n] (œÑ : ‚Ñç) : (ùï¢ n œÑ).abs < 1 := by
  rw [Periodic.abs_qParam, Real.exp_lt_one_iff, neg_mul, coe_im, neg_mul, neg_div, neg_lt_zero,
    div_pos_iff_of_pos_right (mod_cast Nat.pos_of_ne_zero <| NeZero.ne _)]
  positivity

namespace SlashInvariantFormClass

theorem periodic_comp_ofComplex [SlashInvariantFormClass F Œì(n) k] :
    Periodic (f ‚àò ofComplex) n := by
  intro w
  by_cases hw : 0 < im w
  ¬∑ have : 0 < im (w + n) := by simp only [add_im, natCast_im, add_zero, hw]
    simp only [comp_apply, ofComplex_apply_of_im_pos this, ofComplex_apply_of_im_pos hw]
    convert SlashInvariantForm.vAdd_width_periodic n k 1 f ‚ü®w, hw‚ü© using 2
    simp only [Int.cast_one, mul_one, UpperHalfPlane.ext_iff, coe_mk_subtype, coe_vadd,
      ofReal_natCast, add_comm]
  ¬∑ have : im (w + n) ‚â§ 0 := by simpa only [add_im, natCast_im, add_zero, not_lt] using hw
    simp only [comp_apply, ofComplex_apply_of_im_nonpos this,
      ofComplex_apply_of_im_nonpos (not_lt.mp hw)]

/--
The analytic function `F` such that `f œÑ = F (exp (2 * œÄ * I * œÑ / n))`, extended by a choice of
limit at `0`.
-/
def cuspFunction : ‚ÑÇ ‚Üí ‚ÑÇ := Function.Periodic.cuspFunction n (f ‚àò ofComplex)

theorem eq_cuspFunction [NeZero n] [SlashInvariantFormClass F Œì(n) k] (œÑ : ‚Ñç) :
    cuspFunction n f (ùï¢ n œÑ) = f œÑ := by
  simpa only [comp_apply, ofComplex_apply]
    using (periodic_comp_ofComplex n f).eq_cuspFunction (NeZero.ne _) œÑ

end SlashInvariantFormClass

open SlashInvariantFormClass

namespace ModularFormClass

theorem differentiableAt_comp_ofComplex [ModularFormClass F Œì k] {z : ‚ÑÇ} (hz : 0 < im z) :
    DifferentiableAt ‚ÑÇ (f ‚àò ofComplex) z :=
  mdifferentiableAt_iff_differentiableAt.mp ((holo f _).comp z (mdifferentiableAt_ofComplex hz))

theorem bounded_at_infty_comp_ofComplex [ModularFormClass F Œì k] :
    BoundedAtFilter I‚àû (f ‚àò ofComplex) := by
  simpa only [SlashAction.slash_one, ModularForm.toSlashInvariantForm_coe]
    using (ModularFormClass.bdd_at_infty f 1).comp_tendsto tendsto_comap_im_ofComplex

theorem differentiableAt_cuspFunction [NeZero n] [ModularFormClass F Œì(n) k]
    {q : ‚ÑÇ} (hq : q.abs < 1) :
    DifferentiableAt ‚ÑÇ (cuspFunction n f) q := by
  have npos : 0 < (n : ‚Ñù) := mod_cast (Nat.pos_iff_ne_zero.mpr (NeZero.ne _))
  rcases eq_or_ne q 0 with rfl | hq'
  ¬∑ exact (periodic_comp_ofComplex n f).differentiableAt_cuspFunction_zero npos
      (eventually_of_mem (preimage_mem_comap (Ioi_mem_atTop 0))
        (fun _ ‚Ü¶ differentiableAt_comp_ofComplex f))
      (bounded_at_infty_comp_ofComplex f)
  ¬∑ exact Periodic.qParam_right_inv npos.ne' hq' ‚ñ∏
      (periodic_comp_ofComplex n f).differentiableAt_cuspFunction npos.ne'
        <| differentiableAt_comp_ofComplex _ <| Periodic.im_invQParam_pos_of_abs_lt_one npos hq hq'

lemma analyticAt_cuspFunction_zero [NeZero n] [ModularFormClass F Œì(n) k] :
    AnalyticAt ‚ÑÇ (cuspFunction n f) 0 :=
  DifferentiableOn.analyticAt
    (fun q hq ‚Ü¶ (differentiableAt_cuspFunction _ _ hq).differentiableWithinAt)
    (by simpa only [ball_zero_eq] using Metric.ball_mem_nhds (0 : ‚ÑÇ) zero_lt_one)

/-- The `q`-expansion of a level `n` modular form, bundled as a `PowerSeries`. -/
def qExpansion : PowerSeries ‚ÑÇ :=
  .mk fun m ‚Ü¶ (‚Üëm.factorial)‚Åª¬π * iteratedDeriv m (cuspFunction n f) 0

lemma qExpansion_coeff (m : ‚Ñï) :
    (qExpansion n f).coeff ‚ÑÇ m = (‚Üëm.factorial)‚Åª¬π * iteratedDeriv m (cuspFunction n f) 0 := by
  simp [qExpansion]

lemma hasSum_qExpansion_of_abs_lt [NeZero n] [ModularFormClass F Œì(n) k]
    {q : ‚ÑÇ} (hq : q.abs < 1) :
    HasSum (fun m : ‚Ñï ‚Ü¶ (qExpansion n f).coeff ‚ÑÇ m ‚Ä¢ q ^ m) (cuspFunction n f q) := by
  simp only [qExpansion_coeff, ‚Üê eq_cuspFunction n f]
  have hdiff : DifferentiableOn ‚ÑÇ (cuspFunction n f) (Metric.ball 0 1) := by
    refine fun z hz ‚Ü¶ (differentiableAt_cuspFunction n f ?_).differentiableWithinAt
    simpa using hz
  have qmem : q ‚àà Metric.ball 0 1 := by simpa using hq
  convert hasSum_taylorSeries_on_ball hdiff qmem using 2 with m
  rw [sub_zero, smul_eq_mul, smul_eq_mul, mul_right_comm, smul_eq_mul, mul_assoc]

lemma hasSum_qExpansion [NeZero n] [ModularFormClass F Œì(n) k] (œÑ : ‚Ñç) :
    HasSum (fun m : ‚Ñï ‚Ü¶ (qExpansion n f).coeff ‚ÑÇ m ‚Ä¢ ùï¢ n œÑ ^ m) (f œÑ) := by
  simpa only [eq_cuspFunction n f] using
    hasSum_qExpansion_of_abs_lt n f (œÑ.abs_qParam_lt_one n)

/-- The `q`-expansion of a level `n` modular form, bundled as a `FormalMultilinearSeries`. -/
def qExpansion_formalMultilinearSeries : FormalMultilinearSeries ‚ÑÇ ‚ÑÇ ‚ÑÇ :=
  fun m ‚Ü¶ (qExpansion n f).coeff ‚ÑÇ m ‚Ä¢ ContinuousMultilinearMap.mkPiAlgebraFin ‚ÑÇ m _

lemma qExpansion_formalMultilinearSeries_apply_norm (m : ‚Ñï) :
    ‚ÄñqExpansion_formalMultilinearSeries n f m‚Äñ = ‚Äñ(qExpansion n f).coeff ‚ÑÇ m‚Äñ := by
  rw [qExpansion_formalMultilinearSeries,
    ‚Üê (ContinuousMultilinearMap.piFieldEquiv ‚ÑÇ (Fin m) ‚ÑÇ).symm.norm_map]
  simp

lemma qExpansion_formalMultilinearSeries_radius [NeZero n] [ModularFormClass F Œì(n) k] :
    1 ‚â§ (qExpansion_formalMultilinearSeries n f).radius := by
  refine le_of_forall_ge_of_dense fun r hr ‚Ü¶ ?_
  lift r to NNReal using hr.ne_top
  apply FormalMultilinearSeries.le_radius_of_summable
  simp only [qExpansion_formalMultilinearSeries_apply_norm]
  rw [‚Üê r.abs_eq]
  simp_rw [pow_abs, ‚Üê Complex.abs_ofReal, ofReal_pow, ‚Üê Complex.norm_eq_abs, ‚Üê norm_mul]
  exact (hasSum_qExpansion_of_abs_lt n f (q := r) (by simpa using hr)).summable.norm

/-- The `q`-expansion of `f` is an `FPowerSeries` representing `cuspFunction n f`. -/
lemma hasFPowerSeries_cuspFunction [NeZero n] [ModularFormClass F Œì(n) k] :
    HasFPowerSeriesOnBall (cuspFunction n f) (qExpansion_formalMultilinearSeries n f) 0 1 := by
  refine ‚ü®qExpansion_formalMultilinearSeries_radius n f, zero_lt_one, fun hy ‚Ü¶ ?_‚ü©
  rw [EMetric.mem_ball, edist_zero_right, ENNReal.coe_lt_one_iff, ‚Üê NNReal.coe_lt_one,
    coe_nnnorm, norm_eq_abs] at hy
  simpa [qExpansion_formalMultilinearSeries] using hasSum_qExpansion_of_abs_lt n f hy

end ModularFormClass

open ModularFormClass

namespace CuspFormClass

theorem zero_at_infty_comp_ofComplex [CuspFormClass F Œì k] : ZeroAtFilter I‚àû (f ‚àò ofComplex) := by
  simpa only [SlashAction.slash_one, toSlashInvariantForm_coe]
    using (zero_at_infty f 1).comp tendsto_comap_im_ofComplex

theorem cuspFunction_apply_zero [NeZero n] [CuspFormClass F Œì(n) k] :
    cuspFunction n f 0 = 0 :=
  Periodic.cuspFunction_zero_of_zero_at_inf (mod_cast (Nat.pos_iff_ne_zero.mpr (NeZero.ne _)))
    (zero_at_infty_comp_ofComplex f)

theorem exp_decay_atImInfty [NeZero n] [CuspFormClass F Œì(n) k] :
    f =O[atImInfty] fun œÑ ‚Ü¶ Real.exp (-2 * œÄ * œÑ.im / n) := by
  simpa only [neg_mul, comp_def, ofComplex_apply, coe_im] using
    ((periodic_comp_ofComplex n f).exp_decay_of_zero_at_inf
      (mod_cast (Nat.pos_iff_ne_zero.mpr (NeZero.ne _)))
      (eventually_of_mem (preimage_mem_comap (Ioi_mem_atTop 0))
        fun _ ‚Ü¶ differentiableAt_comp_ofComplex f)
      (zero_at_infty_comp_ofComplex f)).comp_tendsto tendsto_coe_atImInfty

end CuspFormClass
