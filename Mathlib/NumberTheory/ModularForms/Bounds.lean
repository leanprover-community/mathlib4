/-
Copyright (c) 2025 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import Mathlib.NumberTheory.Modular
import Mathlib.NumberTheory.ModularForms.Petersson

/-!
# Bounds for the norm of a modular form

We prove bounds for the norm of a modular form `f œÑ` in terms of `im œÑ`. The main results are

* `ModularFormClass.exists_bound`: a modular form of weight `k` (for a finite-index subgroup `Œì`)
  is bounded by a constant multiple of `max 1 (1 / (im œÑ) ^ k))`.
* `CuspFormClass.exists_bound`: a cusp form of weight `k` (for a finite-index subgroup `Œì`)
  is bounded by a constant multiple of `1 / (im œÑ) ^ (k / 2)`.

-/

open Filter Topology Asymptotics

open UpperHalfPlane hiding I

open scoped Modular MatrixGroups ComplexConjugate ModularForm

namespace ModularGroup

/-- The standard fundamental domain truncated at height `y`. -/
def truncatedFundamentalDomain (y : ‚Ñù) : Set ‚Ñç := { œÑ | œÑ ‚àà ùíü ‚àß œÑ.im ‚â§ y }

/-- Explicit description of the truncated fundamental domain as a subset of `‚ÑÇ`, given by
obviously closed conditions. -/
lemma coe_truncatedFundamentalDomain (y : ‚Ñù) :
    Subtype.val '' truncatedFundamentalDomain y =
    {z | 0 ‚â§ z.im ‚àß z.im ‚â§ y ‚àß |z.re| ‚â§ 1 / 2 ‚àß 1 ‚â§ ‚Äñz‚Äñ} := by
  ext z
  constructor
  ¬∑ rintro ‚ü®‚ü®z, hz‚ü©, h, rfl‚ü©
    exact ‚ü®hz.le, h.2, h.1.2, by simpa [Complex.normSq_eq_norm_sq] using h.1.1‚ü©
  ¬∑ rintro ‚ü®hz, h1, h2, h3‚ü©
    have hz' : 0 < z.im := by
      apply hz.lt_of_ne
      contrapose! h3
      simpa [‚Üê sq_lt_one_iff‚ÇÄ (norm_nonneg _), ‚Üê Complex.normSq_eq_norm_sq, Complex.normSq,
        ‚Üê h3, ‚Üê sq] using h2.trans_lt (by norm_num)
    exact ‚ü®‚ü®z, hz'‚ü©, ‚ü®‚ü®by simpa [Complex.normSq_eq_norm_sq], h2‚ü©, h1‚ü©, rfl‚ü©

/-- For any `y : ‚Ñù`, the standard fundamental domain truncated at height `y` is compact. -/
lemma isCompact_truncatedFundamentalDomain (y : ‚Ñù) :
    IsCompact (truncatedFundamentalDomain y) := by
  rw [Subtype.isCompact_iff, coe_truncatedFundamentalDomain, Metric.isCompact_iff_isClosed_bounded]
  constructor
  ¬∑ -- show closed
    apply (isClosed_le continuous_const Complex.continuous_im).inter
    apply (isClosed_le Complex.continuous_im continuous_const).inter
    apply (isClosed_le (continuous_abs.comp Complex.continuous_re) continuous_const).inter
    exact isClosed_le continuous_const continuous_norm
  ¬∑ -- show bounded
    rw [Metric.isBounded_iff_subset_closedBall 0]
    refine ‚ü®‚àö((1 / 2) ^ 2 + y ^ 2), fun z hz ‚Ü¶ ?_‚ü©
    simp only [mem_closedBall_zero_iff]
    refine le_of_sq_le_sq ?_ (by positivity)
    rw [Real.sq_sqrt (by positivity), Complex.norm_eq_sqrt_sq_add_sq, Real.sq_sqrt (by positivity)]
    apply add_le_add
    ¬∑ rw [sq_le_sq, abs_of_pos <| one_half_pos (Œ± := ‚Ñù)]
      exact hz.2.2.1
    ¬∑ rw [sq_le_sq‚ÇÄ hz.1 (hz.1.trans hz.2.1)]
      exact hz.2.1

lemma exists_bound_fundamental_domain_of_isBigO {E : Type*} [inst : SeminormedAddCommGroup E]
    {f : ‚Ñç ‚Üí E} (hf_cont : Continuous f) {t : ‚Ñù} (hf_infinity : f =O[atImInfty] fun z ‚Ü¶ z.im ^ t) :
    ‚àÉ F, ‚àÄ œÑ ‚àà ùíü, ‚Äñf œÑ‚Äñ ‚â§ F * œÑ.im ^ t := by
  -- Extract a bound for large `im œÑ` using `hf_infty`.
  obtain ‚ü®D, hD, hf_infinity‚ü© := hf_infinity.exists_pos
  rw [IsBigOWith, atImInfty, eventually_comap, eventually_atTop] at hf_infinity
  obtain ‚ü®y, hy‚ü© := hf_infinity
  simp only [Real.norm_rpow_of_nonneg (_ : ‚Ñç).im_pos.le,
      Real.norm_of_nonneg (_ : ‚Ñç).im_pos.le] at hy
  -- Extract a bound for the rest of `ùíü` using continuity and compactness.
  have hfm : ContinuousOn (fun œÑ ‚Ü¶ ‚Äñf œÑ‚Äñ / (im œÑ) ^ t) (truncatedFundamentalDomain y) := by
    apply (hf_cont.norm.div ?_ fun œÑ ‚Ü¶ by positivity).continuousOn
    exact continuous_im.rpow_const fun œÑ ‚Ü¶ .inl œÑ.im_ne_zero
  obtain ‚ü®E, hE‚ü© : ‚àÉ E, ‚àÄ œÑ ‚àà truncatedFundamentalDomain y, ‚Äñf œÑ‚Äñ / (im œÑ) ^ t ‚â§ E := by
    simpa [norm_mul, norm_norm, Real.norm_rpow_of_nonneg (_ : ‚Ñç).im_pos.le,
      Real.norm_of_nonneg (_ : ‚Ñç).im_pos.le]
      using (isCompact_truncatedFundamentalDomain y).exists_bound_of_continuousOn hfm
  -- Put the two bounds together.
  refine ‚ü®max D E, fun œÑ hœÑ ‚Ü¶ ?_‚ü©
  rcases le_total y (im œÑ) with hœÑ' | hœÑ'
  ¬∑ exact (hy _ hœÑ' _ rfl).trans <| mul_le_mul_of_nonneg_right (le_max_left ..) (by positivity)
  ¬∑ rw [‚Üê div_le_iff‚ÇÄ (by positivity)]
    exact (hE œÑ ‚ü®hœÑ, hœÑ'‚ü©).trans (le_max_right _ _)

/-- A function on `‚Ñç` which is invariant under `SL(2, ‚Ñ§)`, and is `O ((im œÑ) ^ t)` at `I‚àû` for
some `0 ‚â§ t`, is bounded on `‚Ñç` by a constant multiple of `(max (im œÑ) (1 / im œÑ)) ^ t`.

This will be applied to `f œÑ * (im œÑ) ^ (k / 2)` for `f` a modular form of weight `k`, taking
`t = 0` if `f` is cuspidal, and `t = k/2` otherwise. -/
lemma exists_bound_of_invariant_of_isBigO {E : Type*} [SeminormedAddCommGroup E]
    {f : ‚Ñç ‚Üí E} (hf_cont : Continuous f) {t : ‚Ñù} (ht : 0 ‚â§ t)
    (hf_infinity : f =O[atImInfty] fun z ‚Ü¶ (im z) ^ t)
    (hf_inv : ‚àÄ (g : SL(2, ‚Ñ§)) œÑ, f (g ‚Ä¢ œÑ) = f œÑ) :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñf œÑ‚Äñ ‚â§ C * (max (im œÑ) (1 / im œÑ)) ^ t := by
  -- First find an `F` such that `‚àÄ œÑ ‚àà ùíü, ‚Äñf œÑ‚Äñ ‚â§ F * œÑ.im ^ t`.
  obtain ‚ü®F, hFùíü‚ü© : ‚àÉ F, ‚àÄ œÑ ‚àà ùíü, ‚Äñf œÑ‚Äñ ‚â§ F * œÑ.im ^ t :=
    exists_bound_fundamental_domain_of_isBigO hf_cont hf_infinity
  refine ‚ü®F, fun œÑ ‚Ü¶ ?_‚ü©
  -- Given `œÑ`, choose a `g = [a, b; c, d] ‚àà SL(2, ‚Ñ§)` that translates `œÑ` into `ùíü`.
  obtain ‚ü®g, hg‚ü© := exists_smul_mem_fd œÑ
  specialize hFùíü (g ‚Ä¢ œÑ) hg
  rw [hf_inv g œÑ] at hFùíü
  refine hFùíü.trans ?_
  have hF : 0 ‚â§ F := by
    rw [‚Üê div_le_iff‚ÇÄ (by positivity)] at hFùíü
    refine le_trans ?_ hFùíü
    positivity
  refine mul_le_mul_of_nonneg_left (Real.rpow_le_rpow (g ‚Ä¢ œÑ).im_pos.le ?_ ht) hF
  -- It remains to show `(g ‚Ä¢ œÑ).im ‚â§ max œÑ.im (1 / œÑ.im)`.
  -- We split into two cases depending whether `c = g 1 0` is zero.
  rw [im_smul_eq_div_normSq, denom_apply]
  by_cases hg : g 1 0 = 0
  ¬∑ -- If `c = 0`, then `(g ‚Ä¢ œÑ).im = œÑ.im / d ^ 2` and `d ^ 2 ‚â• 1`.
    -- (In fact `d = ¬±1`, but we do not need this stronger statement).
    have : g 1 1 ‚â† 0 := fun hg' ‚Ü¶ zero_ne_one <| by
      simpa only [Matrix.det_fin_two, hg, hg', mul_zero, mul_zero, sub_zero] using g.det_coe
    have : 1 ‚â§ g 1 1 ^ 2 := (one_le_sq_iff_one_le_abs _).mpr (Int.one_le_abs this)
    refine le_trans ?_ <| le_max_left _ _
    rw [hg, Int.cast_zero, zero_mul, zero_add, ‚Üê Complex.ofReal_intCast, Complex.normSq_ofReal]
    refine div_le_of_le_mul‚ÇÄ (mul_self_nonneg _) œÑ.im_pos.le ?_
    apply le_mul_of_one_le_right œÑ.im_pos.le (by
      rwa [‚Üê sq, ‚Üê Int.cast_pow, ‚Üê Int.cast_one, Int.cast_le])
  ¬∑ -- If `c ‚â† 0`, then `1 ‚â§ c ^ 2`, so
    -- `(g ‚Ä¢ œÑ).im = œÑ.im / (c ^ 2 * œÑ.im ^ 2 +  ...) ‚â§ 1 / œÑ.im`.
    refine le_trans ?_ <| le_max_right _ _
    rw [div_le_div_iff‚ÇÄ (by exact normSq_denom_pos g œÑ.im_ne_zero) œÑ.im_pos, one_mul,
      Complex.normSq_apply]
    apply le_add_of_nonneg_of_le (mul_self_nonneg _)
    simp only [‚Üê sq, Complex.add_im, ‚Üê Complex.ofReal_intCast, Complex.ofReal_im,
      add_zero, Complex.mul_im, zero_mul, Complex.ofReal_re, mul_pow,
      UpperHalfPlane.coe_im]
    apply le_mul_of_one_le_left (sq_nonneg _)
    rw [one_le_sq_iff_one_le_abs]
    exact_mod_cast Int.one_le_abs hg

/-- A function on `‚Ñç` which is invariant under a finite-index subgroup of `SL(2, ‚Ñ§)`, and satisfies
an `O((im œÑ) ^ t)` bound at all cusps for some `0 ‚â§ t`, is in fact uniformly bounded by a multiple
of `(max (im œÑ) (1 / im œÑ)) ^ t`. -/
lemma exists_bound_of_subgroup_invariant_of_isBigO {E : Type*} [SeminormedAddCommGroup E]
    {f : ‚Ñç ‚Üí E} (hf_cont : Continuous f) {t : ‚Ñù} (ht : 0 ‚â§ t)
    (hf_infinity : ‚àÄ (g : SL(2, ‚Ñ§)), (fun œÑ ‚Ü¶ f (g ‚Ä¢ œÑ)) =O[atImInfty] fun z ‚Ü¶ (im z) ^ t)
    {Œì : Subgroup SL(2, ‚Ñ§)} [Œì.FiniteIndex] (hf_inv : ‚àÄ g ‚àà Œì, ‚àÄ œÑ, f (g ‚Ä¢ œÑ) = f œÑ) :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñf œÑ‚Äñ ‚â§ C * max œÑ.im (1 / œÑ.im) ^ t := by
  -- marshall the info we have in terms of a function on the quotient
  let f' (œÑ) : SL(2, ‚Ñ§) ‚ß∏ Œì ‚Üí E := Quotient.lift (fun g ‚Ü¶ f (g‚Åª¬π ‚Ä¢ œÑ)) fun g h hgh ‚Ü¶ by
    obtain ‚ü®j, hj, hj'‚ü© : ‚àÉ j ‚àà Œì, h = g * j := by
      rw [‚Üê Quotient.eq_iff_equiv, Quotient.eq, QuotientGroup.leftRel_apply] at hgh
      exact ‚ü®g‚Åª¬π * h, hgh, (mul_inv_cancel_left g h).symm‚ü©
    simp [-sl_moeb, hj', mul_smul, hf_inv j‚Åª¬π (inv_mem hj)]
  have hf'_cont (Œ≥) : Continuous (f' ¬∑ Œ≥) := QuotientGroup.induction_on Œ≥ fun g ‚Ü¶ by
    simp [f']
    fun_prop
  have hf'_inv (œÑ) (g : SL(2, ‚Ñ§)) (Œ≥) : f' (g ‚Ä¢ œÑ) (g ‚Ä¢ Œ≥) = f' œÑ Œ≥ := by
    induction Œ≥ using QuotientGroup.induction_on
    simp [-sl_moeb, f', mul_smul]
  have hf'_infty (Œ≥) : (f' ¬∑ Œ≥) =O[_] _ := Œ≥.induction_on fun h ‚Ü¶ hf_infinity h‚Åª¬π
  -- now take the sum over the quotient
  have : Fintype (SL(2, ‚Ñ§) ‚ß∏ Œì) := Subgroup.fintypeQuotientOfFiniteIndex
  -- Now the conclusion is very simple.
  obtain ‚ü®C, hC‚ü© := exists_bound_of_invariant_of_isBigO (by fun_prop) ht
    (.sum fun i _ ‚Ü¶ (hf'_infty i).norm_left)
    (fun g œÑ ‚Ü¶ (Fintype.sum_equiv (MulAction.toPerm g) _ _ (by simp [-sl_moeb, hf'_inv])).symm)
  refine ‚ü®C, fun œÑ ‚Ü¶ le_trans ?_ (hC œÑ)‚ü©
  simpa [Real.norm_of_nonneg <| show 0 ‚â§ ‚àë Œ≥, ‚Äñf' œÑ Œ≥‚Äñ by positivity, -sl_moeb, f'] using
    Finset.univ.single_le_sum (fun Œ≥ _ ‚Ü¶ norm_nonneg (f' œÑ Œ≥)) (Finset.mem_univ ‚ü¶1‚üß)

/-- A function on `‚Ñç` which is invariant under `SL(2, ‚Ñ§)`, and bounded at `‚àû`, is bounded. -/
lemma exists_bound_of_invariant {E : Type*} [SeminormedAddCommGroup E]
    {f : ‚Ñç ‚Üí E} (hf_cont : Continuous f) (hf_infinity : IsBoundedAtImInfty f)
    (hf_inv : ‚àÄ (g : SL(2, ‚Ñ§)) œÑ, f (g ‚Ä¢ œÑ) = f œÑ) :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñf œÑ‚Äñ ‚â§ C := by
  simpa using exists_bound_of_invariant_of_isBigO hf_cont le_rfl
    (by simpa only [Real.rpow_zero] using hf_infinity) hf_inv

/-- A function on `‚Ñç` which is invariant under a finite-index subgroup of `SL(2, ‚Ñ§)`, and bounded
at all cusps, is bounded. -/
lemma exists_bound_of_subgroup_invariant {E : Type*} [SeminormedAddCommGroup E]
    {f : ‚Ñç ‚Üí E} (hf_cont : Continuous f)
    (hf_infinity : ‚àÄ (g : SL(2, ‚Ñ§)), IsBoundedAtImInfty fun œÑ ‚Ü¶ f (g ‚Ä¢ œÑ))
    {Œì : Subgroup SL(2, ‚Ñ§)} [Œì.FiniteIndex] (hf_inv : ‚àÄ g ‚àà Œì, ‚àÄ œÑ, f (g ‚Ä¢ œÑ) = f œÑ) :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñf œÑ‚Äñ ‚â§ C := by
  simpa using exists_bound_of_subgroup_invariant_of_isBigO hf_cont le_rfl
    (by simpa only [Real.rpow_zero] using hf_infinity) hf_inv

end ModularGroup

/-- If `f, f'` are modular forms, then `petersson k f f'` is bounded by a constant multiple of
`max œÑ.im (1 / œÑ.im) ^ k`. -/
lemma ModularFormClass.exists_petersson_le
    {k : ‚Ñ§} (hk : 0 ‚â§ k) (Œì : Subgroup SL(2, ‚Ñ§)) [Œì.FiniteIndex] {F F' : Type*} (f : F) (f' : F')
    [FunLike F ‚Ñç ‚ÑÇ] [FunLike F' ‚Ñç ‚ÑÇ] [ModularFormClass F Œì k] [ModularFormClass F' Œì k] :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñpetersson k f f' œÑ‚Äñ ‚â§ C * max œÑ.im (1 / œÑ.im) ^ k := by
  have := ModularGroup.exists_bound_of_subgroup_invariant_of_isBigO
      (ModularFormClass.petersson_continuous k Œì f f') (mod_cast hk : 0 ‚â§ (k : ‚Ñù))
      (fun g ‚Ü¶ ?_) (fun g hg œÑ ‚Ü¶ SlashInvariantFormClass.petersson_smul hg)
  ¬∑ simpa using this
  ¬∑ simp_rw [‚Üê UpperHalfPlane.petersson_slash_SL, Real.rpow_intCast]
    have hft := bdd_at_infty f g
    have hf't := bdd_at_infty f' g
    apply IsBigO.of_norm_left
    simpa [petersson, norm_mul, Complex.norm_conj, norm_zpow, Complex.norm_real,
      Real.norm_of_nonneg (_ : ‚Ñç).im_pos.le] using (hft.norm_left.mul hf't.norm_left).mul
      (isBigO_refl (fun œÑ ‚Ü¶ œÑ.im ^ k) atImInfty)

/-- If `f` is a cusp form and `f'` a modular form, then `petersson k f f'` is bounded. -/
lemma CuspFormClass.petersson_bounded_left
    (k : ‚Ñ§) (Œì : Subgroup SL(2, ‚Ñ§)) [Œì.FiniteIndex] {F F' : Type*} (f : F) (f' : F')
    [FunLike F ‚Ñç ‚ÑÇ] [FunLike F' ‚Ñç ‚ÑÇ] [CuspFormClass F Œì k] [ModularFormClass F' Œì k] :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñpetersson k f f' œÑ‚Äñ ‚â§ C := by
  refine ModularGroup.exists_bound_of_subgroup_invariant
    (ModularFormClass.petersson_continuous k Œì f f') (fun g ‚Ü¶ ?_)
    fun g hg œÑ ‚Ü¶ SlashInvariantFormClass.petersson_smul hg
  apply IsZeroAtImInfty.isBoundedAtImInfty
  simp_rw [‚Üê UpperHalfPlane.petersson_slash_SL]
  let Œì' : Subgroup SL(2, ‚Ñ§) := Subgroup.map (MulAut.conj g‚Åª¬π) Œì
  let ft‚ÇÄ : CuspForm Œì' k := CuspForm.translate f g
  have : Œì'.FiniteIndex := by
    constructor
    rw [Œì.index_map_of_bijective (EquivLike.bijective _)]
    apply Subgroup.FiniteIndex.index_ne_zero
  convert UpperHalfPlane.IsZeroAtImInfty.petersson_isZeroAtImInfty_left k Œì'
    (by simpa using CuspFormClass.zero_at_infty ft‚ÇÄ 1)
    (ModularForm.translate f' g) -- "exact" fails here -- why?

/-- If `f` is a modular form and `f'` a cusp form, then `petersson k f f'` is bounded. -/
lemma CuspFormClass.petersson_bounded_right
    (k : ‚Ñ§) (Œì : Subgroup SL(2, ‚Ñ§)) [Œì.FiniteIndex] {F F' : Type*} (f : F) (f' : F')
    [FunLike F ‚Ñç ‚ÑÇ] [FunLike F' ‚Ñç ‚ÑÇ] [ModularFormClass F Œì k] [CuspFormClass F' Œì k] :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñpetersson k f f' œÑ‚Äñ ‚â§ C := by
  simpa [petersson, mul_comm] using petersson_bounded_left k Œì f' f

/-- A weight `k` cusp form is bounded in norm by a constant multiple of `(im œÑ) ^ (-k / 2)`. -/
lemma CuspFormClass.exists_bound {k : ‚Ñ§} {Œì : Subgroup SL(2, ‚Ñ§)} [Œì.FiniteIndex]
    {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] [CuspFormClass F Œì k] (f : F) :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñf œÑ‚Äñ ‚â§ C / œÑ.im ^ (k / 2 : ‚Ñù) := by
  obtain ‚ü®C, hC‚ü© := petersson_bounded_left k Œì f f
  refine ‚ü®C.sqrt, fun œÑ ‚Ü¶ ?_‚ü©
  specialize hC œÑ
  rw [‚Üê Real.sqrt_le_sqrt_iff ((norm_nonneg _).trans hC)] at hC
  rw [le_div_iff‚ÇÄ (by positivity)]
  refine (le_of_eq ?_).trans hC
  simp only [petersson, norm_mul, Complex.norm_conj]
  rw [Real.sqrt_mul (by positivity), Real.sqrt_mul_self (by positivity), norm_zpow,
    Complex.norm_real, Real.sqrt_eq_rpow, ‚Üê Real.rpow_intCast_mul (by positivity), mul_one_div,
    Real.norm_of_nonneg œÑ.im_pos.le]

open Real in
/-- A weight `k` modular form is bounded in norm by a constant multiple of
`max 1 (1 / (œÑ.im) ^ k)`. -/
lemma ModularFormClass.exists_bound {k : ‚Ñ§} (hk : 0 ‚â§ k) {Œì : Subgroup SL(2, ‚Ñ§)} [Œì.FiniteIndex]
    {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] [ModularFormClass F Œì k] (f : F) :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñf œÑ‚Äñ ‚â§ C * (max 1 (1 / (œÑ.im) ^ k)) := by
  obtain ‚ü®C, hC‚ü© := ModularFormClass.exists_petersson_le hk Œì f f
  refine ‚ü®C.sqrt, fun œÑ ‚Ü¶ ?_‚ü©
  specialize hC œÑ
  have hC' : 0 ‚â§ C := le_trans (by positivity) <| (div_le_iff‚ÇÄ (by positivity)).mpr hC
  rw [‚Üê sqrt_le_sqrt_iff ((norm_nonneg _).trans hC), petersson, norm_mul, sqrt_mul (norm_nonneg _),
    norm_mul, Complex.norm_conj, sqrt_mul_self (norm_nonneg _), norm_zpow, Complex.norm_real,
    norm_of_nonneg œÑ.im_pos.le, ‚Üê rpow_intCast, sqrt_eq_rpow, ‚Üê rpow_mul œÑ.im_pos.le, mul_one_div,
    sqrt_mul hC', ‚Üê le_div_iff‚ÇÄ (by positivity)] at hC
  refine hC.trans (le_of_eq ?_)
  -- Now just a slightly tedious manipulation of `rpow`'s to finish
  rw [mul_div_assoc]
  congr 1
  have aux : 1 / œÑ.im ^ k * œÑ.im ^ (k / 2 : ‚Ñù) = (1 / œÑ.im) ^ (k / 2 : ‚Ñù) := by
    rw [one_div_mul_eq_div, div_rpow zero_le_one œÑ.im_pos.le, one_rpow,
      div_eq_div_iff (zpow_ne_zero _ œÑ.im_ne_zero) (by positivity), one_mul, ‚Üê rpow_add œÑ.im_pos,
      add_halves, rpow_intCast]
  rw [div_eq_iff (by positivity), max_mul_of_nonneg _ _ (by positivity), one_mul,
    sqrt_eq_rpow, ‚Üê rpow_intCast, ‚Üê rpow_mul (by positivity), mul_one_div, aux]
  exact MonotoneOn.map_max (fun _ ha _ _ h ‚Ü¶ rpow_le_rpow ha h (by positivity)) œÑ.im_pos.le
    (show 0 ‚â§ 1 / œÑ.im by positivity)

local notation "ùï¢" => Function.Periodic.qParam

open Complex in
lemma ModularFormClass.qExpansion_isBigO {k : ‚Ñ§} (hk : 0 ‚â§ k) {Œì : Subgroup SL(2, ‚Ñ§)}
    [Œì.FiniteIndex] {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] [ModularFormClass F Œì k] (f : F) :
    (fun n ‚Ü¶ (ModularFormClass.qExpansion Œì.width f).coeff n) =O[atTop] fun n ‚Ü¶ (n : ‚Ñù) ^ k := by
  let h := Œì.width
  haveI : NeZero h := ‚ü®Œì.width_ne_zero‚ü©
  have hŒì : Œì.width ‚à£ h := dvd_refl _
  obtain ‚ü®C, hC‚ü© := exists_bound hk f
  rw [isBigO_iff]
  use (1 / Real.exp (-2 * Real.pi / ‚Üëh)) * C
  filter_upwards [eventually_gt_atTop 0] with n hn
  rw [qExpansion_coeff_eq_intervalIntegral (t := 1 / n) f hŒì _ (by positivity),
    ‚Üê intervalIntegral.integral_const_mul]
  simp only [ofReal_div, ofReal_one, ofReal_natCast]
  refine intervalIntegral.norm_integral_le_integral_norm (by positivity) |>.trans ?_
  let F (x : ‚Ñù) : ‚Ñù := ‚Äñ1 / ‚Üëh * (1 / ùï¢ h ((x : ‚ÑÇ) + 1 / n * I) ^ n
      * f ‚ü®(x : ‚ÑÇ) + 1 / n * Complex.I, by simp [hn]‚ü©)‚Äñ
  have (x : ‚Ñù) : F x ‚â§ 1 / h * ((1 / Real.exp (-2 * Real.pi / ‚Üëh))) * (C * n ^ k) := by
    simp only [F]
    rw [norm_mul, norm_mul, norm_div, norm_natCast, norm_one, norm_div, norm_one, norm_pow,
      mul_assoc]
    apply mul_le_mul_of_nonneg_left _ (by positivity)
    apply mul_le_mul
    ¬∑ rw [Function.Periodic.norm_qParam, add_im, ofReal_im, zero_add,
        mul_I_im, ‚Üê ofReal_one, ‚Üê ofReal_natCast, ‚Üê ofReal_div, ofReal_re, mul_one_div,
        div_right_comm, ‚Üê Real.exp_nat_mul, mul_div_cancel‚ÇÄ]
      exact_mod_cast hn.ne'
    ¬∑ refine (hC _).trans (le_of_eq ?_)
      congr 1
      rw [‚Üê UpperHalfPlane.coe_im, UpperHalfPlane.coe_mk_subtype, add_im, ofReal_im, zero_add,
        mul_I_im, ‚Üê ofReal_one, ‚Üê ofReal_natCast, ‚Üê ofReal_div, ofReal_re, div_zpow, one_zpow,
        one_div_one_div]
      exact max_eq_right <| one_le_zpow‚ÇÄ (mod_cast hn) hk
    ¬∑ exact norm_nonneg _
    ¬∑ positivity
  refine (intervalIntegral.integral_mono (by positivity) ?_ ?_ this).trans (le_of_eq ?_)
  ¬∑ apply Continuous.intervalIntegrable
    unfold F
    apply Continuous.norm
    apply continuous_const.mul
    apply Continuous.mul
    ¬∑ unfold Function.Periodic.qParam
      simp_rw [‚Üê Complex.exp_nat_mul, one_div, ‚Üê Complex.exp_neg]
      fun_prop
    ¬∑ have : Continuous f := (ModularFormClass.holo f).continuous
      apply this.comp
      rw [continuous_induced_rng]
      simp [Function.comp_def]
      fun_prop -- integrability
  ¬∑ apply continuous_const.intervalIntegrable
  ¬∑ rw [intervalIntegral.integral_const, sub_zero, smul_eq_mul]
    simp only [‚Üê mul_assoc, mul_one_div_cancel (NeZero.ne (h : ‚Ñù)), one_mul,
      Real.norm_of_nonneg (show 0 ‚â§ (n : ‚Ñù) ^ k by positivity)]
