/-
Copyright (c) 2025 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import Mathlib.Analysis.Complex.UpperHalfPlane.FunctionsBoundedAtInfty
import Mathlib.NumberTheory.ModularForms.Cusps
import Mathlib.NumberTheory.ModularForms.SlashActions

/-!
# Boundedness and vanishing at cusps

We define the notions of "bounded at c" and "vanishing at c" for functions on `‚Ñç`, where `c` is
an element of `OnePoint ‚Ñù`.
-/

open Matrix SpecialLinearGroup UpperHalfPlane Filter Polynomial OnePoint

open scoped MatrixGroups LinearAlgebra.Projectivization ModularForm

namespace UpperHalfPlane

variable {g : GL (Fin 2) ‚Ñù} {f : ‚Ñç ‚Üí ‚ÑÇ} (k : ‚Ñ§)

lemma IsZeroAtImInfty.slash (hg : g 1 0 = 0) (hf : IsZeroAtImInfty f) :
    IsZeroAtImInfty (f ‚à£[k] g) := by
  rw [IsZeroAtImInfty, ZeroAtFilter, tendsto_zero_iff_norm_tendsto_zero] at hf ‚ä¢
  simpa [ModularForm.slash_def, denom, hg, mul_assoc]
    using (hf.comp <| tendsto_smul_atImInfty hg).mul_const _

lemma IsBoundedAtImInfty.slash (hg : g 1 0 = 0) (hf : IsBoundedAtImInfty f) :
    IsBoundedAtImInfty (f ‚à£[k] g) := by
  rw [IsBoundedAtImInfty, BoundedAtFilter, ‚Üê Asymptotics.isBigO_norm_left] at hf ‚ä¢
  suffices (fun x ‚Ü¶ (‚Äñg.det.val ^ (k - 1)‚Äñ * ‚Äñg 1 1 ^ (-k)‚Äñ) * ‚Äñf (g ‚Ä¢ x)‚Äñ) =O[atImInfty] 1 by
    simpa [ModularForm.slash_def, denom, hg, mul_assoc, mul_comm ‚Äñf _‚Äñ]
  apply (hf.comp_tendsto (tendsto_smul_atImInfty hg)).const_mul_left

end UpperHalfPlane

namespace OnePoint

variable (c : OnePoint ‚Ñù) (f : ‚Ñç ‚Üí ‚ÑÇ) (k : ‚Ñ§)

/-- We say `f` is bounded at `c` if, for all `g` with `g ‚Ä¢ ‚àû = c`, the function `f ‚à£[k] g` is
bounded at `‚àû`. -/
def IsBoundedAt : Prop := ‚àÄ g : GL (Fin 2) ‚Ñù, g ‚Ä¢ ‚àû = c ‚Üí IsBoundedAtImInfty (f ‚à£[k] g)

/-- We say `f` is zero at `c` if, for all `g` with `g ‚Ä¢ ‚àû = c`, the function `f ‚à£[k] g` is
zero at `‚àû`. -/
def IsZeroAt : Prop := ‚àÄ g : GL (Fin 2) ‚Ñù, g ‚Ä¢ ‚àû = c ‚Üí IsZeroAtImInfty (f ‚à£[k] g)

variable {c f k} {g : GL (Fin 2) ‚Ñù}

lemma IsBoundedAt.smul_iff : IsBoundedAt (g ‚Ä¢ c) f k ‚Üî IsBoundedAt c (f ‚à£[k] g) k := by
  rw [IsBoundedAt, IsBoundedAt, (Equiv.mulLeft g‚Åª¬π).forall_congr_left]
  simp [MulAction.mul_smul, ‚Üê SlashAction.slash_mul]

lemma IsZeroAt.smul_iff : IsZeroAt (g ‚Ä¢ c) f k ‚Üî IsZeroAt c (f ‚à£[k] g) k := by
  rw [IsZeroAt, IsZeroAt, (Equiv.mulLeft g‚Åª¬π).forall_congr_left]
  simp [MulAction.mul_smul, ‚Üê SlashAction.slash_mul]

lemma IsBoundedAt.add {f' : ‚Ñç ‚Üí ‚ÑÇ} (hf : IsBoundedAt c f k) (hf' : IsBoundedAt c f' k) :
    IsBoundedAt c (f + f') k :=
  fun g hg ‚Ü¶ by simpa using (hf g hg).add (hf' g hg)

lemma IsZeroAt.add {f' : ‚Ñç ‚Üí ‚ÑÇ} (hf : IsZeroAt c f k) (hf' : IsZeroAt c f' k) :
    IsZeroAt c (f + f') k :=
  fun g hg ‚Ü¶ by simpa using (hf g hg).add (hf' g hg)

lemma isBoundedAt_infty_iff : IsBoundedAt ‚àû f k ‚Üî IsBoundedAtImInfty f :=
  ‚ü®fun h ‚Ü¶ by simpa using h 1 (by simp), fun h _ hg ‚Ü¶ h.slash _ (smul_infty_eq_self_iff.mp hg)‚ü©

lemma isZeroAt_infty_iff : IsZeroAt ‚àû f k ‚Üî IsZeroAtImInfty f :=
  ‚ü®fun h ‚Ü¶ by simpa using h 1 (by simp), fun h _ hg ‚Ü¶ h.slash _ (smul_infty_eq_self_iff.mp hg)‚ü©

/-- To check that `f` is bounded at `c`, it suffices for `f ‚à£[k] g` to be bounded at `‚àû` for any
single `g` with `g ‚Ä¢ ‚àû = c`. -/
lemma isBoundedAt_iff (hg : g ‚Ä¢ ‚àû = c) : IsBoundedAt c f k ‚Üî IsBoundedAtImInfty (f ‚à£[k] g) :=
  ‚ü®fun hc ‚Ü¶ hc g hg , by simp [‚Üê hg, IsBoundedAt.smul_iff, isBoundedAt_infty_iff]‚ü©

/-- To check that `f` is zero at `c`, it suffices for `f ‚à£[k] g` to be zero at `‚àû` for any
single `g` with `g ‚Ä¢ ‚àû = c`. -/
lemma isZeroAt_iff (hg : g ‚Ä¢ ‚àû = c) : IsZeroAt c f k ‚Üî IsZeroAtImInfty (f ‚à£[k] g) :=
  ‚ü®fun hc ‚Ü¶ hc g hg , by simp [‚Üê hg, IsZeroAt.smul_iff, isZeroAt_infty_iff]‚ü©

section SL2Z

variable {c : OnePoint ‚Ñù} {f : ‚Ñç ‚Üí ‚ÑÇ} {k : ‚Ñ§}

lemma isBoundedAt_iff_exists_SL2Z (hc : IsCusp c ùíÆ‚Ñí) :
    IsBoundedAt c f k ‚Üî ‚àÉ Œ≥ : SL(2, ‚Ñ§), mapGL ‚Ñù Œ≥ ‚Ä¢ ‚àû = c ‚àß IsBoundedAtImInfty (f ‚à£[k] Œ≥) := by
  constructor
  ¬∑ obtain ‚ü®Œ≥, rfl‚ü© := isCusp_SL2Z_iff'.mp hc
    simpa [IsBoundedAt.smul_iff, isBoundedAt_infty_iff] using fun hfc ‚Ü¶ ‚ü®Œ≥, rfl, hfc‚ü©
  ¬∑ rintro ‚ü®Œ≥, rfl, b‚ü©
    simpa [IsBoundedAt.smul_iff, isBoundedAt_infty_iff] using b

lemma isZeroAt_iff_exists_SL2Z (hc : IsCusp c ùíÆ‚Ñí) :
    IsZeroAt c f k ‚Üî ‚àÉ Œ≥ : SL(2, ‚Ñ§), mapGL ‚Ñù Œ≥ ‚Ä¢ ‚àû = c ‚àß IsZeroAtImInfty (f ‚à£[k] Œ≥) := by
  constructor
  ¬∑ obtain ‚ü®Œ≥, rfl‚ü© := isCusp_SL2Z_iff'.mp hc
    simpa [IsZeroAt.smul_iff, isZeroAt_infty_iff] using fun hfc ‚Ü¶ ‚ü®Œ≥, rfl, hfc‚ü©
  ¬∑ rintro ‚ü®Œ≥, rfl, b‚ü©
    simpa [IsZeroAt.smul_iff, isZeroAt_infty_iff] using b

lemma isBoundedAt_iff_forall_SL2Z (hc : IsCusp c ùíÆ‚Ñí) :
    IsBoundedAt c f k ‚Üî ‚àÄ Œ≥ : SL(2, ‚Ñ§), mapGL ‚Ñù Œ≥ ‚Ä¢ ‚àû = c ‚Üí IsBoundedAtImInfty (f ‚à£[k] Œ≥) := by
  refine ‚ü®fun hc _ hŒ≥ ‚Ü¶ by simpa using hc _ hŒ≥, fun h ‚Ü¶ ?_‚ü©
  obtain ‚ü®Œ≥, rfl‚ü© := isCusp_SL2Z_iff'.mp hc
  simpa [IsBoundedAt.smul_iff, isBoundedAt_infty_iff] using h Œ≥ rfl

lemma isZeroAt_iff_forall_SL2Z (hc : IsCusp c ùíÆ‚Ñí) :
    IsZeroAt c f k ‚Üî ‚àÄ Œ≥ : SL(2, ‚Ñ§), mapGL ‚Ñù Œ≥ ‚Ä¢ ‚àû = c ‚Üí IsZeroAtImInfty (f ‚à£[k] Œ≥) := by
  refine ‚ü®fun hc _ hŒ≥ ‚Ü¶ by simpa using hc _ hŒ≥, fun h ‚Ü¶ ?_‚ü©
  obtain ‚ü®Œ≥, rfl‚ü© := isCusp_SL2Z_iff'.mp hc
  simpa [IsZeroAt.smul_iff, isZeroAt_infty_iff] using h Œ≥ rfl

end SL2Z

end OnePoint
