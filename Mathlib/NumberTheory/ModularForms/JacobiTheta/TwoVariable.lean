/-
Copyright (c) 2023 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import Mathlib.Analysis.SpecialFunctions.Gaussian
import Mathlib.Analysis.Complex.LocallyUniformLimit

/-!
# The two-variable Jacobi theta function

This file defines the two-variable Jacobi theta function

$$\theta(z, \tau) = \sum_{n \in \mathbb{Z}} \exp (2 i \pi n z + i \pi n ^ 2 \tau),$$

and proves the functional equation relating the values at `(z, œÑ)` and `(z / œÑ, -1 / œÑ)`,
using Poisson's summation formula. We also show holomorphy (in both variables individually,
not jointly).
-/

open Complex Real Asymptotics Filter Topology

open scoped Real BigOperators

/-- The two-variable Jacobi theta function,
`Œ∏ z œÑ = ‚àë' (n : ‚Ñ§), cexp (2 * œÄ * I * n * z + œÄ * I * n ^ 2 * œÑ)`.

The sum is only convergent for `0 < im œÑ`; we are implictly extending it by 0 for other values of
`œÑ`. -/
noncomputable def jacobiTheta‚ÇÇ (z œÑ : ‚ÑÇ) : ‚ÑÇ :=
  ‚àë' n : ‚Ñ§, cexp (2 * œÄ * I * n * z + œÄ * I * n ^ 2 * œÑ)

/-- A uniform bound for the summands in the Jacobi theta function on compact subsets. -/
lemma jacobiTheta‚ÇÇ_term_bound {S T : ‚Ñù} (hT : 0 < T) {z œÑ : ‚ÑÇ}
    (hz : |im z| ‚â§ S) (hœÑ : T ‚â§ im œÑ) (n : ‚Ñ§) :
    ‚Äñcexp (2 * œÄ * I * n * z + œÄ * I * n ^ 2 * œÑ)‚Äñ ‚â§ Real.exp (-œÄ * (T * n ^ 2 - 2 * S * |n|)) := by
  rw [Complex.norm_eq_abs, Complex.abs_exp, (by push_cast; ring :
    2 * œÄ * I * n * z + œÄ * I * n ^ 2 * œÑ = (œÄ * (2 * n) :) * z * I + (œÄ * n ^ 2 :) * œÑ * I),
    add_re, mul_I_re, im_ofReal_mul, mul_I_re, im_ofReal_mul, Real.exp_le_exp, neg_mul, ‚Üê neg_add,
    neg_le_neg_iff, mul_assoc œÄ, mul_assoc œÄ, ‚Üê mul_add, mul_le_mul_left pi_pos, add_comm,
    mul_comm T]
  refine add_le_add (mul_le_mul le_rfl hœÑ hT.le (sq_nonneg _)) ?_
  rw [‚Üê mul_neg, mul_assoc, mul_assoc, mul_le_mul_left two_pos, mul_comm, neg_mul, ‚Üê mul_neg]
  refine le_trans ?_ (neg_abs_le _)
  rw [mul_neg, neg_le_neg_iff, abs_mul, Int.cast_abs]
  exact mul_le_mul_of_nonneg_left hz (abs_nonneg _)

lemma summable_jacobiTheta‚ÇÇ_term_bound (S : ‚Ñù) {T : ‚Ñù} (hT : 0 < T) :
    Summable (fun n : ‚Ñ§ ‚Ü¶ Real.exp (-œÄ * (T * n ^ 2 - 2 * S * |n|))) := by
  suffices : Summable (fun n : ‚Ñï ‚Ü¶ Real.exp (-œÄ * (T * n ^ 2 - 2 * S * n)))
  ¬∑ apply summable_int_of_summable_nat <;>
    simpa only [Int.cast_neg, neg_sq, abs_neg, Int.cast_ofNat, Nat.abs_cast]
  apply summable_of_isBigO_nat summable_exp_neg_nat
  refine Real.isBigO_exp_comp_exp_comp.mpr (Tendsto.isBoundedUnder_le_atBot ?_)
  rw [‚Üê tendsto_neg_atTop_iff]
  simp only [neg_mul, Pi.sub_apply, sub_neg_eq_add, neg_add_rev, neg_neg]
  suffices : Tendsto (fun n ‚Ü¶ n * (œÄ * T * n - (2 * œÄ * S + 1)) : ‚Ñï ‚Üí ‚Ñù) atTop atTop
  ¬∑ convert this using 2 with n; ring
  refine tendsto_nat_cast_atTop_atTop.atTop_mul_atTop (tendsto_atTop_add_const_right _ _ ?_)
  exact tendsto_nat_cast_atTop_atTop.const_mul_atTop (mul_pos pi_pos hT)

/-- Differentiability of `Œò z œÑ` in `œÑ`, for fixed `z`. (This is weaker than differentiability
in both variables simultaneously, but we do not have a version of
`differentiableOn_tsum_of_summable_norm` in multiple variables yet.) -/
lemma differentiableAt_jacobiTheta‚ÇÇ (z : ‚ÑÇ) {œÑ : ‚ÑÇ} (hœÑ : 0 < im œÑ) :
    DifferentiableAt ‚ÑÇ (jacobiTheta‚ÇÇ z) œÑ := by
  obtain ‚ü®T, hT‚ü© := exists_between hœÑ
  let V := {b | T < im b}
  have : V ‚àà ùìù œÑ := continuous_im.continuousAt.preimage_mem_nhds (Ioi_mem_nhds hT.2)
  refine DifferentiableOn.differentiableAt ?_ this
  apply differentiableOn_tsum_of_summable_norm
  ¬∑ exact summable_jacobiTheta‚ÇÇ_term_bound |im z| hT.1
  ¬∑ refine fun i ‚Ü¶ (Complex.differentiable_exp.comp ?_).differentiableOn
    exact (differentiable_const _).add ((differentiable_const _).mul differentiable_id)
  ¬∑ exact continuous_im.isOpen_preimage _ isOpen_Ioi
  ¬∑ exact fun i Œæ (hŒæ : T < im Œæ) ‚Ü¶ jacobiTheta‚ÇÇ_term_bound hT.1 (le_refl _) hŒæ.le i

/-- The two-variable Jacobi theta function is periodic in `œÑ` with period 2. -/
lemma jacobiTheta‚ÇÇ_add_right (z œÑ : ‚ÑÇ) : jacobiTheta‚ÇÇ z (œÑ + 2) = jacobiTheta‚ÇÇ z œÑ := by
  refine tsum_congr (fun n ‚Ü¶ ?_)
  simp_rw [Complex.exp_add]
  suffices cexp (œÄ * I * n ^ 2 * 2 : ‚ÑÇ) = 1 by rw [mul_add, Complex.exp_add, this, mul_one]
  rw [(by push_cast; ring : (œÄ * I * n ^ 2 * 2 : ‚ÑÇ) = (n ^ 2 :) * (2 * œÄ * I)), exp_int_mul,
    exp_two_pi_mul_I, one_zpow]

/-- The two-variable Jacobi theta function is periodic in `z` with period 1. -/
lemma jacobiTheta‚ÇÇ_add_left (z œÑ : ‚ÑÇ) : jacobiTheta‚ÇÇ (z + 1) œÑ = jacobiTheta‚ÇÇ z œÑ := by
  refine tsum_congr (fun n ‚Ü¶ ?_)
  simp_rw [mul_add, mul_one, Complex.exp_add]
  suffices cexp (2 * ‚ÜëœÄ * I * n) = 1 by rw [this, mul_one]
  simpa only [mul_comm] using exp_int_mul_two_pi_mul_I n

/-- The two-variable Jacobi theta function is quasi-periodic in `z` with period `œÑ`. -/
lemma jacobiTheta‚ÇÇ_add_left' (z œÑ : ‚ÑÇ) :
    jacobiTheta‚ÇÇ (z + œÑ) œÑ = cexp (-œÄ * I * (œÑ + 2 * z)) * jacobiTheta‚ÇÇ z œÑ := by
  conv_rhs => erw [‚Üê tsum_mul_left, ‚Üê (Equiv.addRight (1 : ‚Ñ§)).tsum_eq]
  refine tsum_congr (fun n ‚Ü¶ ?_)
  rw [‚Üê Complex.exp_add, Equiv.coe_addRight, Int.cast_add]
  ring_nf

/-- The two-variable Jacobi theta function is even in `z`. -/
lemma jacobiTheta‚ÇÇ_neg_left (z œÑ : ‚ÑÇ) : jacobiTheta‚ÇÇ (-z) œÑ = jacobiTheta‚ÇÇ z œÑ := by
  conv_lhs => rw [jacobiTheta‚ÇÇ, ‚Üê Equiv.tsum_eq (Equiv.neg ‚Ñ§)]
  refine tsum_congr (fun n ‚Ü¶ ?_)
  rw [Equiv.neg_apply, Int.cast_neg, neg_sq]
  ring_nf

/-- The functional equation for the Jacobi theta function: `jacobiTheta‚ÇÇ x œÑ` is an explict factor
times `jacobiTheta‚ÇÇ (x / œÑ) (-1 / œÑ)`. This is the key lemma behind the proof of the functional
equation for Dirichlet L-series. -/
theorem jacobiTheta‚ÇÇ_functional_equation (z : ‚ÑÇ) {œÑ : ‚ÑÇ} (hœÑ : 0 < im œÑ) :
    jacobiTheta‚ÇÇ z œÑ =
      1 / (-I * œÑ) ^ (1 / 2 : ‚ÑÇ) * cexp (-œÄ * I * z ^ 2 / œÑ) * jacobiTheta‚ÇÇ (z / œÑ) (-1 / œÑ) := by
  have h0 : œÑ ‚â† 0; contrapose! hœÑ; rw [hœÑ, zero_im]
  have h2 : 0 < (-I * œÑ).re
  ¬∑ simpa only [neg_mul, neg_re, mul_re, I_re, zero_mul, I_im, one_mul, zero_sub, neg_neg] using hœÑ
  calc
    _ = ‚àë' n : ‚Ñ§, cexp (-œÄ * (-I * œÑ) * ‚Üën ^ 2 + 2 * œÄ * (I * z) * ‚Üën) :=
      tsum_congr (fun n ‚Ü¶ by ring_nf)
    _ = 1 / (-I * œÑ) ^ (1 / 2 : ‚ÑÇ) * ‚àë' (n : ‚Ñ§), cexp (-œÄ / (-I * œÑ) * (n + I * (I * z)) ^ 2) := by
      rw [tsum_exp_neg_quadratic h2]
    _ = 1 / (-I * œÑ) ^ (1 / 2 : ‚ÑÇ) * cexp (œÄ * I * (-1 / œÑ) * z ^ 2) *
        ‚àë' (n : ‚Ñ§), cexp (2 * œÄ * I * n * (z / œÑ) + œÄ * I * n ^ 2 * (-1 / œÑ)) := by
      simp_rw [mul_assoc _ (cexp _), ‚Üê tsum_mul_left (a := cexp _), ‚Üê Complex.exp_add]
      congr 2 with n : 1; congr 1
      field_simp [I_ne_zero]
      ring_nf
      simp_rw [I_sq, I_pow_four]
      ring_nf
    _ = _ := by
      congr 3
      ring
