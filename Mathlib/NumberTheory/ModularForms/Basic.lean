/-
Copyright (c) 2022 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck
-/
import Mathlib.Algebra.DirectSum.Algebra
import Mathlib.Analysis.Calculus.FDeriv.Star
import Mathlib.Analysis.Complex.UpperHalfPlane.Manifold
import Mathlib.Geometry.Manifold.MFDeriv.SpecificFunctions
import Mathlib.NumberTheory.ModularForms.BoundedAtCusp
import Mathlib.NumberTheory.ModularForms.SlashInvariantForms

/-!
# Modular forms

This file defines modular forms and proves some basic properties about them. Including constructing
the graded ring of modular forms.

We begin by defining modular forms and cusp forms as extension of `SlashInvariantForm`s then we
define the space of modular forms, cusp forms and prove that the product of two modular forms is a
modular form.
-/

open Complex UpperHalfPlane Matrix.SpecialLinearGroup

open scoped Topology Manifold MatrixGroups ComplexConjugate

noncomputable section

namespace UpperHalfPlane

/-- The matrix `[-1, 0; 0, 1]`, which defines an anti-holomorphic involution of `‚Ñç` via
`œÑ ‚Ü¶ -conj œÑ`. -/
def J : GL (Fin 2) ‚Ñù := .mkOfDetNeZero !![-1, 0; 0, 1] (by simp)

lemma coe_J_smul (œÑ : ‚Ñç) : (‚Üë(J ‚Ä¢ œÑ) : ‚ÑÇ) = -conj ‚ÜëœÑ := by
  simp [UpperHalfPlane.coe_smul, œÉ, J, show ¬¨(1 : ‚Ñù) < 0 by simp, num, denom]

lemma J_smul (œÑ : ‚Ñç) : J ‚Ä¢ œÑ = ofComplex (-(conj ‚ÜëœÑ)) := by
  ext
  rw [coe_J_smul, ofComplex_apply_of_im_pos (by simpa using œÑ.im_pos), coe_mk_subtype]

@[simp] lemma val_J : J.val = !![-1, 0; 0, 1] := rfl

@[simp] lemma J_sq : J ^ 2 = 1 := by ext; simp [J, sq, Matrix.one_fin_two]

@[simp] lemma det_J : J.det = -1 := by ext; simp [J]

@[simp] lemma sigma_J : œÉ J = starRingEnd ‚ÑÇ := by simp [œÉ, J]

@[simp] lemma denom_J (œÑ : ‚Ñç) : denom J œÑ = 1 := by simp [J, denom]

end UpperHalfPlane

section ModularForm

open ModularForm

/-- The weight `k` slash action of `GL(2, ‚Ñù)‚Å∫` preserves holomorphic functions. This is private,
since it is a step towards the proof of `MDifferentiable.slash` which is more general. -/
private lemma MDifferentiable.slash_of_pos {f : ‚Ñç ‚Üí ‚ÑÇ} (hf : MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) f)
    (k : ‚Ñ§) {g : GL (Fin 2) ‚Ñù} (hg : 0 < g.det.val) :
    MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) (f ‚à£[k] g) := by
  refine .mul (.mul ?_ mdifferentiable_const) (mdifferentiable_denom_zpow g _)
  simpa only [œÉ, hg, ‚ÜìreduceIte] using hf.comp (mdifferentiable_smul hg)

private lemma slash_J (f : ‚Ñç ‚Üí ‚ÑÇ) (k : ‚Ñ§) :
    f ‚à£[k] J = fun œÑ : ‚Ñç ‚Ü¶ conj (f <| ofComplex <| -(conj ‚ÜëœÑ)) := by
  simp [slash_def, J_smul]

/-- The weight `k` slash action of the negative-determinant matrix `J` preserves holomorphic
functions. -/
private lemma MDifferentiable.slashJ {f : ‚Ñç ‚Üí ‚ÑÇ} (hf : MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) f) (k : ‚Ñ§) :
    MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) (f ‚à£[k] J) := by
  simp only [mdifferentiable_iff, slash_J, Function.comp_def] at hf ‚ä¢
  have : {z | 0 < z.im}.EqOn (fun x ‚Ü¶ conj (f <| ofComplex <| -conj ‚Üë(ofComplex x)))
      (fun x ‚Ü¶ conj (f <| ofComplex <| -conj x)) := fun z h ‚Ü¶ by simp [ofComplex_apply_of_im_pos h]
  refine .congr (fun z hz ‚Ü¶ DifferentiableAt.differentiableWithinAt ?_) this
  have : 0 < (-conj z).im := by simpa using hz
  have := hf.differentiableAt (isOpen_upperHalfPlaneSet.mem_nhds this)
  simpa using (this.comp _ differentiable_neg.differentiableAt).star_star.neg

/-- The weight `k` slash action of `GL(2, ‚Ñù)` preserves holomorphic functions. -/
lemma MDifferentiable.slash {f : ‚Ñç ‚Üí ‚ÑÇ} (hf : MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) f)
    (k : ‚Ñ§) (g : GL (Fin 2) ‚Ñù) : MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) (f ‚à£[k] g) := by
  refine g.det_ne_zero.lt_or_gt.elim (fun hg ‚Ü¶ ?_) (hf.slash_of_pos k)
  rw [show g = J * (J * g) by simp [‚Üê mul_assoc, ‚Üê sq], SlashAction.slash_mul]
  exact (hf.slashJ k).slash_of_pos _ (by simpa using hg)

variable (F : Type*) (Œì : Subgroup (GL (Fin 2) ‚Ñù)) (k : ‚Ñ§)

open scoped ModularForm

/-- These are `SlashInvariantForm`'s that are holomorphic and bounded at infinity. -/
structure ModularForm extends SlashInvariantForm Œì k where
  holo' : MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) (toSlashInvariantForm : ‚Ñç ‚Üí ‚ÑÇ)
  bdd_at_cusps' {c : OnePoint ‚Ñù} (hc : IsCusp c Œì) : c.IsBoundedAt toFun k

/-- The `SlashInvariantForm` associated to a `ModularForm`. -/
add_decl_doc ModularForm.toSlashInvariantForm

/-- These are `SlashInvariantForm`s that are holomorphic and zero at infinity. -/
structure CuspForm extends SlashInvariantForm Œì k where
  holo' : MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) (toSlashInvariantForm : ‚Ñç ‚Üí ‚ÑÇ)
  zero_at_cusps' {c : OnePoint ‚Ñù} (hc : IsCusp c Œì) : c.IsZeroAt toFun k

/-- The `SlashInvariantForm` associated to a `CuspForm`. -/
add_decl_doc CuspForm.toSlashInvariantForm

/-- `ModularFormClass F Œì k` says that `F` is a type of bundled functions that extend
`SlashInvariantFormClass` by requiring that the functions be holomorphic and bounded
at all cusps. -/
class ModularFormClass (F : Type*) (Œì : outParam <| Subgroup (GL (Fin 2) ‚Ñù)) (k : outParam ‚Ñ§)
    [FunLike F ‚Ñç ‚ÑÇ] : Prop extends SlashInvariantFormClass F Œì k where
  holo : ‚àÄ f : F, MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) (f : ‚Ñç ‚Üí ‚ÑÇ)
  bdd_at_cusps (f : F) {c : OnePoint ‚Ñù} (hc : IsCusp c Œì) : c.IsBoundedAt f k

/-- `CuspFormClass F Œì k` says that `F` is a type of bundled functions that extend
`SlashInvariantFormClass` by requiring that the functions be holomorphic and zero
at all cusps. -/
class CuspFormClass (F : Type*) (Œì : outParam <| Subgroup (GL (Fin 2) ‚Ñù)) (k : outParam ‚Ñ§)
    [FunLike F ‚Ñç ‚ÑÇ] : Prop extends SlashInvariantFormClass F Œì k where
  holo : ‚àÄ f : F, MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) (f : ‚Ñç ‚Üí ‚ÑÇ)
  zero_at_cusps (f : F) {c : OnePoint ‚Ñù} (hc : IsCusp c Œì) : c.IsZeroAt f k

instance (priority := 100) ModularForm.funLike :
    FunLike (ModularForm Œì k) ‚Ñç ‚ÑÇ where
  coe f := f.toFun
  coe_injective' f g h := by cases f; cases g; congr; exact DFunLike.ext' h

instance (priority := 100) ModularFormClass.modularForm :
    ModularFormClass (ModularForm Œì k) Œì k where
  slash_action_eq f := f.slash_action_eq'
  holo := ModularForm.holo'
  bdd_at_cusps := ModularForm.bdd_at_cusps'

@[fun_prop]
lemma ModularFormClass.continuous {k : ‚Ñ§} {Œì : Subgroup SL(2, ‚Ñ§)}
    {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] [ModularFormClass F Œì k] (f : F) :
  Continuous f := (ModularFormClass.holo f).continuous

instance (priority := 100) CuspForm.funLike : FunLike (CuspForm Œì k) ‚Ñç ‚ÑÇ where
  coe f := f.toFun
  coe_injective' f g h := by cases f; cases g; congr; exact DFunLike.ext' h

instance (priority := 100) CuspFormClass.cuspForm : CuspFormClass (CuspForm Œì k) Œì k where
  slash_action_eq f := f.slash_action_eq'
  holo := CuspForm.holo'
  zero_at_cusps := CuspForm.zero_at_cusps'

variable {F Œì k}

theorem ModularForm.toFun_eq_coe (f : ModularForm Œì k) : f.toFun = (f : ‚Ñç ‚Üí ‚ÑÇ) :=
  rfl

@[simp]
theorem ModularForm.toSlashInvariantForm_coe (f : ModularForm Œì k) : ‚áëf.1 = f :=
  rfl

theorem CuspForm.toFun_eq_coe {f : CuspForm Œì k} : f.toFun = (f : ‚Ñç ‚Üí ‚ÑÇ) :=
  rfl

@[simp]
theorem CuspForm.toSlashInvariantForm_coe (f : CuspForm Œì k) : ‚áëf.1 = f := rfl

@[ext]
theorem ModularForm.ext {f g : ModularForm Œì k} (h : ‚àÄ x, f x = g x) : f = g :=
  DFunLike.ext f g h

@[ext]
theorem CuspForm.ext {f g : CuspForm Œì k} (h : ‚àÄ x, f x = g x) : f = g :=
  DFunLike.ext f g h

/-- Copy of a `ModularForm` with a new `toFun` equal to the old one. Useful to fix
definitional equalities. -/
protected def ModularForm.copy (f : ModularForm Œì k) (f' : ‚Ñç ‚Üí ‚ÑÇ) (h : f' = ‚áëf) :
    ModularForm Œì k where
  toSlashInvariantForm := f.1.copy f' h
  holo' := h.symm ‚ñ∏ f.holo'
  bdd_at_cusps' A := h.symm ‚ñ∏ f.bdd_at_cusps' A

/-- Copy of a `CuspForm` with a new `toFun` equal to the old one. Useful to fix
definitional equalities. -/
protected def CuspForm.copy (f : CuspForm Œì k) (f' : ‚Ñç ‚Üí ‚ÑÇ) (h : f' = ‚áëf) : CuspForm Œì k where
  toSlashInvariantForm := f.1.copy f' h
  holo' := h.symm ‚ñ∏ f.holo'
  zero_at_cusps' A := h.symm ‚ñ∏ f.zero_at_cusps' A

end ModularForm

namespace ModularForm

open SlashInvariantForm

variable {Œì : Subgroup (GL (Fin 2) ‚Ñù)} {k : ‚Ñ§}

instance add : Add (ModularForm Œì k) where add f g :=
  { toSlashInvariantForm := f + g
    holo' := f.holo'.add g.holo'
    bdd_at_cusps' hc := by simpa using (f.bdd_at_cusps' hc).add (g.bdd_at_cusps' hc) }

@[simp]
theorem coe_add (f g : ModularForm Œì k) : ‚áë(f + g) = f + g :=
  rfl

@[simp]
theorem add_apply (f g : ModularForm Œì k) (z : ‚Ñç) : (f + g) z = f z + g z :=
  rfl

instance instZero : Zero (ModularForm Œì k) :=
  ‚ü® { toSlashInvariantForm := 0
      holo' := fun _ => mdifferentiableAt_const
      bdd_at_cusps' hc g hg := by
        simp only [SlashInvariantForm.toFun_eq_coe, coe_zero, SlashAction.zero_slash]
        exact zero_form_isBoundedAtImInfty } ‚ü©

@[simp]
theorem coe_zero : ‚áë(0 : ModularForm Œì k) = (0 : ‚Ñç ‚Üí ‚ÑÇ) :=
  rfl

@[simp]
theorem zero_apply (z : ‚Ñç) : (0 : ModularForm Œì k) z = 0 :=
  rfl

section
-- scalar multiplication by real types (no assumption on `Œì`)

variable {Œ± : Type*} [SMul Œ± ‚Ñù] [SMul Œ± ‚ÑÇ] [IsScalarTower Œ± ‚Ñù ‚ÑÇ]

local instance : IsScalarTower Œ± ‚ÑÇ ‚ÑÇ where
  smul_assoc a y z := by simpa using smul_assoc (a ‚Ä¢ (1 : ‚Ñù)) y z

instance instSMul‚Ñù : SMul Œ± (ModularForm Œì k) where
  smul c f :=
  { toSlashInvariantForm := c ‚Ä¢ f.1
    holo' := by simpa using f.holo'.const_smul (c ‚Ä¢ (1 : ‚ÑÇ))
    bdd_at_cusps' := fun hc g hg ‚Ü¶ by
      simpa only [IsBoundedAtImInfty, Filter.BoundedAtFilter, SlashInvariantForm.toFun_eq_coe,
        SlashInvariantForm.coe_smul‚Ñù, toSlashInvariantForm_coe, ‚Üê smul_one_smul ‚ÑÇ c ‚áëf, smul_slash]
        using (f.bdd_at_cusps' hc g hg).const_smul_left _ }

@[simp]
theorem coe_smul (f : ModularForm Œì k) (n : Œ±) : ‚áë(n ‚Ä¢ f) = n ‚Ä¢ ‚áëf :=
  rfl

@[simp]
theorem smul_apply (f : ModularForm Œì k) (n : Œ±) (z : ‚Ñç) : (n ‚Ä¢ f) z = n ‚Ä¢ f z :=
  rfl

end

section

variable {Œ± : Type*} [SMul Œ± ‚ÑÇ] [IsScalarTower Œ± ‚ÑÇ ‚ÑÇ] [Œì.HasDetOne]

instance instSMul‚ÑÇ : SMul Œ± (ModularForm Œì k) where
  smul c f :=
  { toSlashInvariantForm := c ‚Ä¢ f.1
    holo' := by simpa using f.holo'.const_smul (c ‚Ä¢ (1 : ‚ÑÇ))
    bdd_at_cusps' := fun hc g hg ‚Ü¶ by
      simp_rw [IsBoundedAtImInfty, Filter.BoundedAtFilter, SlashInvariantForm.toFun_eq_coe,
        SlashInvariantForm.coe_smul, toSlashInvariantForm_coe, ‚Üê smul_one_smul ‚ÑÇ c ‚áëf, smul_slash]
      exact (f.bdd_at_cusps' hc g hg).const_smul_left (œÉ g (c ‚Ä¢ (1 : ‚ÑÇ))) }

@[simp]
theorem IsGLPos.coe_smul (f : ModularForm Œì k) (n : Œ±) : ‚áë(n ‚Ä¢ f) = n ‚Ä¢ ‚áëf :=
  rfl

@[simp]
theorem IsGLPos.smul_apply (f : ModularForm Œì k) (n : Œ±) (z : ‚Ñç) : (n ‚Ä¢ f) z = n ‚Ä¢ f z :=
  rfl

end

instance instNeg : Neg (ModularForm Œì k) :=
  ‚ü®fun f =>
    { toSlashInvariantForm := -f.1
      holo' := f.holo'.neg
      bdd_at_cusps' := fun hc g hg => by simpa using (f.bdd_at_cusps' hc g hg).neg }‚ü©

@[simp]
theorem coe_neg (f : ModularForm Œì k) : ‚áë(-f) = -f :=
  rfl

@[simp]
theorem neg_apply (f : ModularForm Œì k) (z : ‚Ñç) : (-f) z = -f z :=
  rfl

instance instSub : Sub (ModularForm Œì k) :=
  ‚ü®fun f g => f + -g‚ü©

@[simp]
theorem coe_sub (f g : ModularForm Œì k) : ‚áë(f - g) = f - g :=
  rfl

@[simp]
theorem sub_apply (f g : ModularForm Œì k) (z : ‚Ñç) : (f - g) z = f z - g z :=
  rfl

instance : AddCommGroup (ModularForm Œì k) :=
  DFunLike.coe_injective.addCommGroup _ rfl coe_add coe_neg coe_sub coe_smul coe_smul

/-- Additive coercion from `ModularForm` to `‚Ñç ‚Üí ‚ÑÇ`. -/
@[simps]
def coeHom : ModularForm Œì k ‚Üí+ ‚Ñç ‚Üí ‚ÑÇ where
  toFun f := f
  map_zero' := coe_zero
  map_add' _ _ := rfl

instance : Module ‚Ñù (ModularForm Œì k) :=
  Function.Injective.module ‚Ñù coeHom DFunLike.coe_injective fun _ _ => rfl

instance [Œì.HasDetOne] : Module ‚ÑÇ (ModularForm Œì k) :=
  Function.Injective.module ‚ÑÇ coeHom DFunLike.coe_injective fun _ _ => rfl

instance : Inhabited (ModularForm Œì k) :=
  ‚ü®0‚ü©

/-- The modular form of weight `k_1 + k_2` given by the product of two modular forms of weights
`k_1` and `k_2`. -/
def mul {k_1 k_2 : ‚Ñ§} [Œì.HasDetPlusMinusOne] (f : ModularForm Œì k_1) (g : ModularForm Œì k_2) :
    ModularForm Œì (k_1 + k_2) where
  toSlashInvariantForm := f.1.mul g.1
  holo' := f.holo'.mul g.holo'
  bdd_at_cusps' hc Œ≥ hŒ≥ := by
    simpa [mul_slash] using ((f.bdd_at_cusps' hc Œ≥ hŒ≥).mul (g.bdd_at_cusps' hc Œ≥ hŒ≥)).smul _

@[simp]
theorem mul_coe [Œì.HasDetPlusMinusOne] {k_1 k_2 : ‚Ñ§} (f : ModularForm Œì k_1)
    (g : ModularForm Œì k_2) : (f.mul g : ‚Ñç ‚Üí ‚ÑÇ) = f * g :=
  rfl

/-- The constant function with value `x : ‚ÑÇ` as a modular form of weight 0 and any level. -/
def const (x : ‚ÑÇ) [Œì.HasDetOne] : ModularForm Œì 0 where
  toSlashInvariantForm := .const x
  holo' _ := mdifferentiableAt_const
  bdd_at_cusps' hc g hg := by simpa only [const_toFun, slash_def, SlashInvariantForm.toFun_eq_coe,
      Function.const_apply, neg_zero, zpow_zero] using atImInfty.const_boundedAtFilter _

@[simp]
lemma const_apply [Œì.HasDetOne] (x : ‚ÑÇ) (œÑ : ‚Ñç) : (const x : ModularForm Œì 0) œÑ = x := rfl

/-- The constant function with value `x : ‚ÑÇ` as a modular form of weight 0 and any level. -/
def const‚Ñù (x : ‚Ñù) [Œì.HasDetPlusMinusOne] : ModularForm Œì 0 where
  toSlashInvariantForm := .const‚Ñù x
  holo' _ := mdifferentiableAt_const
  bdd_at_cusps' hc g hg := by simpa only [const‚Ñù_toFun, slash_def, SlashInvariantForm.toFun_eq_coe,
      Function.const_apply, neg_zero, zpow_zero] using atImInfty.const_boundedAtFilter _

@[simp]
lemma const‚Ñù_apply [Œì.HasDetPlusMinusOne] (x : ‚Ñù) (œÑ : ‚Ñç) :
    (const‚Ñù x : ModularForm Œì 0) œÑ = x :=
  rfl

instance [Œì.HasDetPlusMinusOne] : One (ModularForm Œì 0) where
  one := { const‚Ñù 1 with toSlashInvariantForm := 1 }

@[simp]
theorem one_coe_eq_one [Œì.HasDetPlusMinusOne] : ‚áë(1 : ModularForm Œì 0) = 1 :=
  rfl

instance [Œì.HasDetPlusMinusOne] : NatCast (ModularForm Œì 0) where
  natCast n := const‚Ñù n

@[simp, norm_cast]
lemma coe_natCast [Œì.HasDetPlusMinusOne] (n : ‚Ñï) :
    ‚áë(n : ModularForm Œì 0) = n := rfl

lemma toSlashInvariantForm_natCast [Œì.HasDetPlusMinusOne] (n : ‚Ñï) :
    (n : ModularForm Œì 0).toSlashInvariantForm = n := rfl

instance [Œì.HasDetPlusMinusOne] : IntCast (ModularForm Œì 0) where
  intCast z := const‚Ñù z

@[simp, norm_cast]
lemma coe_intCast [Œì.HasDetPlusMinusOne] (z : ‚Ñ§) :
    ‚áë(z : ModularForm Œì 0) = z := rfl

lemma toSlashInvariantForm_intCast [Œì.HasDetPlusMinusOne] (z : ‚Ñ§) :
    (z : ModularForm Œì 0).toSlashInvariantForm = z := rfl

end ModularForm

namespace CuspForm

open ModularForm

variable {F : Type*} {Œì : Subgroup (GL (Fin 2) ‚Ñù)} {k : ‚Ñ§}

instance hasAdd : Add (CuspForm Œì k) :=
  ‚ü®fun f g =>
    { toSlashInvariantForm := f + g
      holo' := f.holo'.add g.holo'
      zero_at_cusps' := fun A => by simpa using (f.zero_at_cusps' A).add (g.zero_at_cusps' A) }‚ü©

@[simp]
theorem coe_add (f g : CuspForm Œì k) : ‚áë(f + g) = f + g :=
  rfl

@[simp]
theorem add_apply (f g : CuspForm Œì k) (z : ‚Ñç) : (f + g) z = f z + g z :=
  rfl

instance instZero : Zero (CuspForm Œì k) :=
  ‚ü® { toSlashInvariantForm := 0
      holo' := fun _ => mdifferentiableAt_const
      zero_at_cusps' hc g hg := by simpa using Filter.zero_zeroAtFilter _ } ‚ü©

@[simp]
theorem coe_zero : ‚áë(0 : CuspForm Œì k) = (0 : ‚Ñç ‚Üí ‚ÑÇ) :=
  rfl

@[simp]
theorem zero_apply (z : ‚Ñç) : (0 : CuspForm Œì k) z = 0 :=
  rfl

section
-- scalar multiplication by real types (no assumption on `Œì`)

variable {Œ± : Type*} [SMul Œ± ‚Ñù] [SMul Œ± ‚ÑÇ] [IsScalarTower Œ± ‚Ñù ‚ÑÇ]

local instance : IsScalarTower Œ± ‚ÑÇ ‚ÑÇ where
  smul_assoc a y z := by simpa using smul_assoc (a ‚Ä¢ (1 : ‚Ñù)) y z

instance instSMul : SMul Œ± (CuspForm Œì k) where smul c f :=
  { toSlashInvariantForm := c ‚Ä¢ f.1
    holo' := by simpa using f.holo'.const_smul (c ‚Ä¢ (1 : ‚ÑÇ))
    zero_at_cusps' hc g hg := by
      simp_rw [IsZeroAtImInfty, Filter.ZeroAtFilter, SlashInvariantForm.toFun_eq_coe,
        SlashInvariantForm.coe_smul‚Ñù, toSlashInvariantForm_coe, ‚Üê smul_one_smul ‚ÑÇ c ‚áëf, smul_slash]
      exact (f.zero_at_cusps' hc g hg).smul _ }

@[simp]
theorem coe_smul (f : CuspForm Œì k) (n : Œ±) : ‚áë(n ‚Ä¢ f) = n ‚Ä¢ ‚áëf :=
  rfl

@[simp]
theorem smul_apply (f : CuspForm Œì k) (n : Œ±) {z : ‚Ñç} : (n ‚Ä¢ f) z = n ‚Ä¢ f z :=
  rfl

end

section
-- scalar multiplication by complex types (assuming `IsGLPos Œì`)

variable {Œ± : Type*} [SMul Œ± ‚ÑÇ] [IsScalarTower Œ± ‚ÑÇ ‚ÑÇ] [Œì.HasDetOne]

instance IsGLPos.instSMul : SMul Œ± (CuspForm Œì k) where smul c f :=
  { toSlashInvariantForm := c ‚Ä¢ f.1
    holo' := by simpa using f.holo'.const_smul (c ‚Ä¢ (1 : ‚ÑÇ))
    zero_at_cusps' hc g hg := by
      simp_rw [IsZeroAtImInfty, Filter.ZeroAtFilter, SlashInvariantForm.toFun_eq_coe,
        SlashInvariantForm.coe_smul, toSlashInvariantForm_coe, ‚Üê smul_one_smul ‚ÑÇ c ‚áëf,
        smul_slash]
      exact (f.zero_at_cusps' hc g hg).smul _ }

@[simp]
theorem IsGLPos.coe_smul (f : CuspForm Œì k) (n : Œ±) : ‚áë(n ‚Ä¢ f) = n ‚Ä¢ ‚áëf :=
  rfl

@[simp]
theorem IsGLPos.smul_apply (f : CuspForm Œì k) (n : Œ±) {z : ‚Ñç} : (n ‚Ä¢ f) z = n ‚Ä¢ f z :=
  rfl

end

instance instNeg : Neg (CuspForm Œì k) :=
  ‚ü®fun f =>
    { toSlashInvariantForm := -f.1
      holo' := f.holo'.neg
      zero_at_cusps' hc g hg := by simpa using (f.zero_at_cusps' hc g hg).neg }‚ü©

@[simp]
theorem coe_neg (f : CuspForm Œì k) : ‚áë(-f) = -f :=
  rfl

@[simp]
theorem neg_apply (f : CuspForm Œì k) (z : ‚Ñç) : (-f) z = -f z :=
  rfl

instance instSub : Sub (CuspForm Œì k) :=
  ‚ü®fun f g => f + -g‚ü©

@[simp]
theorem coe_sub (f g : CuspForm Œì k) : ‚áë(f - g) = f - g :=
  rfl

@[simp]
theorem sub_apply (f g : CuspForm Œì k) (z : ‚Ñç) : (f - g) z = f z - g z :=
  rfl

instance : AddCommGroup (CuspForm Œì k) :=
  DFunLike.coe_injective.addCommGroup _ rfl coe_add coe_neg coe_sub coe_smul coe_smul

/-- Additive coercion from `CuspForm` to `‚Ñç ‚Üí ‚ÑÇ`. -/
@[simps]
def coeHom : CuspForm Œì k ‚Üí+ ‚Ñç ‚Üí ‚ÑÇ where
  toFun f := f
  map_zero' := CuspForm.coe_zero
  map_add' _ _ := rfl

instance : Module ‚Ñù (CuspForm Œì k) :=
  Function.Injective.module ‚Ñù coeHom DFunLike.coe_injective fun _ _ => rfl

instance [Œì.HasDetOne] : Module ‚ÑÇ (CuspForm Œì k) :=
  Function.Injective.module ‚ÑÇ coeHom DFunLike.coe_injective fun _ _ => rfl

instance : Inhabited (CuspForm Œì k) :=
  ‚ü®0‚ü©

instance (priority := 99) [FunLike F ‚Ñç ‚ÑÇ] [CuspFormClass F Œì k] : ModularFormClass F Œì k where
  slash_action_eq := SlashInvariantFormClass.slash_action_eq
  holo := CuspFormClass.holo
  bdd_at_cusps f _ hc g hg := (CuspFormClass.zero_at_cusps f hc g hg).boundedAtFilter

end CuspForm

namespace ModularForm

section GradedRing

/-- Cast for modular forms, which is useful for avoiding `Heq`s. -/
def mcast {a b : ‚Ñ§} {Œì : Subgroup (GL (Fin 2) ‚Ñù)} (h : a = b) (f : ModularForm Œì a) :
    ModularForm Œì b where
  toFun := (f : ‚Ñç ‚Üí ‚ÑÇ)
  slash_action_eq' A := h ‚ñ∏ f.slash_action_eq' A
  holo' := f.holo'
  bdd_at_cusps' A := h ‚ñ∏ f.bdd_at_cusps' A

@[ext (iff := false)]
theorem gradedMonoid_eq_of_cast {Œì : Subgroup (GL (Fin 2) ‚Ñù)} {a b : GradedMonoid (ModularForm Œì)}
    (h : a.fst = b.fst) (h2 : mcast h a.snd = b.snd) : a = b := by
  obtain ‚ü®i, a‚ü© := a
  obtain ‚ü®j, b‚ü© := b
  cases h
  exact congr_arg _ h2

instance (Œì : Subgroup (GL (Fin 2) ‚Ñù)) [Œì.HasDetPlusMinusOne] :
    GradedMonoid.GOne (ModularForm Œì) where
  one := 1

instance (Œì : Subgroup (GL (Fin 2) ‚Ñù)) [Œì.HasDetPlusMinusOne] :
    GradedMonoid.GMul (ModularForm Œì) where
  mul f g := f.mul g

instance instGCommRing (Œì : Subgroup (GL (Fin 2) ‚Ñù)) [Œì.HasDetPlusMinusOne] :
    DirectSum.GCommRing (ModularForm Œì) where
  one_mul _ := gradedMonoid_eq_of_cast (zero_add _) (ext fun _ => one_mul _)
  mul_one _ := gradedMonoid_eq_of_cast (add_zero _) (ext fun _ => mul_one _)
  mul_assoc _ _ _ := gradedMonoid_eq_of_cast (add_assoc _ _ _) (ext fun _ => mul_assoc _ _ _)
  mul_zero {_ _} _ := ext fun _ => mul_zero _
  zero_mul {_ _} _ := ext fun _ => zero_mul _
  mul_add {_ _} _ _ _ := ext fun _ => mul_add _ _ _
  add_mul {_ _} _ _ _ := ext fun _ => add_mul _ _ _
  mul_comm _ _ := gradedMonoid_eq_of_cast (add_comm _ _) (ext fun _ => mul_comm _ _)
  natCast := Nat.cast
  natCast_zero := ext fun _ => Nat.cast_zero
  natCast_succ _ := ext fun _ => Nat.cast_succ _
  intCast := Int.cast
  intCast_ofNat _ := ext fun _ => AddGroupWithOne.intCast_ofNat _
  intCast_negSucc_ofNat _ := ext fun _ => AddGroupWithOne.intCast_negSucc _

instance instGAlgebra (Œì : Subgroup (GL (Fin 2) ‚Ñù)) [Œì.HasDetOne] :
    DirectSum.GAlgebra ‚ÑÇ (ModularForm Œì) where
  toFun := { toFun z := const z, map_zero' := rfl, map_add' := fun _ _ => rfl }
  map_one := rfl
  map_mul _x _y := rfl
  commutes _c _x := gradedMonoid_eq_of_cast (add_comm _ _) (ext fun _ => mul_comm _ _)
  smul_def _x _x := gradedMonoid_eq_of_cast (zero_add _).symm (ext fun _ => rfl)

open scoped DirectSum in
example (Œì : Subgroup (GL (Fin 2) ‚Ñù)) [Œì.HasDetOne] : Algebra ‚ÑÇ (‚®Å i, ModularForm Œì i) :=
inferInstance

end GradedRing

end ModularForm

section translate

open ModularForm OnePoint

variable {k : ‚Ñ§} {Œì : Subgroup (GL (Fin 2) ‚Ñù)} {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] (f : F)

open ConjAct Pointwise in
/-- Translating a `ModularForm` by `GL(2, ‚Ñù)`, to obtain a new `ModularForm`. -/
noncomputable def ModularForm.translate [ModularFormClass F Œì k] (g : GL (Fin 2) ‚Ñù) :
    ModularForm (toConjAct g‚Åª¬π ‚Ä¢ Œì) k where
  __ := SlashInvariantForm.translate f g
  bdd_at_cusps' {c} hc Œ≥ hŒ≥ := by
    rw [SlashInvariantForm.toFun_eq_coe, SlashInvariantForm.coe_translate,
      ‚Üê SlashAction.slash_mul, ‚Üê isBoundedAt_infty_iff, ‚Üê OnePoint.IsBoundedAt.smul_iff]
    apply ModularFormClass.bdd_at_cusps f
    simpa [mul_smul, hŒ≥] using hc.smul g
  holo' := (ModularFormClass.holo f).slash k g

@[simp]
lemma ModularForm.coe_translate [ModularFormClass F Œì k] (g : GL (Fin 2) ‚Ñù) :
    translate f g = ‚áëf ‚à£[k] g :=
  rfl

open ConjAct Pointwise in
/-- Translating a `CuspForm` by `SL(2, ‚Ñ§)`, to obtain a new `CuspForm`. -/
noncomputable def CuspForm.translate [CuspFormClass F Œì k] (g : GL (Fin 2) ‚Ñù) :
    CuspForm (toConjAct g‚Åª¬π ‚Ä¢ Œì) k where
  __ := ModularForm.translate f g
  zero_at_cusps' {c} hc Œ≥ hŒ≥ := by
    rw [SlashInvariantForm.toFun_eq_coe, ModularForm.toSlashInvariantForm_coe,
      ModularForm.coe_translate, ‚Üê SlashAction.slash_mul, ‚Üê isZeroAt_infty_iff,
      ‚Üê OnePoint.IsZeroAt.smul_iff]
    apply CuspFormClass.zero_at_cusps f
    simpa [mul_smul, hŒ≥] using hc.smul g

@[simp]
lemma CuspForm.coe_translate [CuspFormClass F Œì k] (g : SL(2, ‚Ñ§)) :
    translate f g = ‚áëf ‚à£[k] g :=
  rfl

end translate

section SL2Z

open ModularForm CuspForm

variable {k F} {Œì : Subgroup (GL (Fin 2) ‚Ñù)} [Œì.IsArithmetic] [FunLike F ‚Ñç ‚ÑÇ]

lemma ModularFormClass.bdd_at_infty_slash [ModularFormClass F Œì k]
    (f : F) (g : SL(2, ‚Ñ§)) : IsBoundedAtImInfty (f ‚à£[k] g) := by
  rw [‚Üê OnePoint.isBoundedAt_infty_iff, SL_slash, ‚Üê OnePoint.IsBoundedAt.smul_iff]
  apply bdd_at_cusps f
  rw [Subgroup.IsArithmetic.isCusp_iff_isCusp_SL2Z, isCusp_SL2Z_iff']
  exact ‚ü®g, by simp [mapGL]‚ü©

lemma ModularFormClass.bdd_at_infty [ModularFormClass F Œì k]
    (f : F) : IsBoundedAtImInfty f := by
  simpa using ModularFormClass.bdd_at_infty_slash f 1

lemma CuspFormClass.zero_at_infty_slash [CuspFormClass F Œì k]
    (f : F) (g : SL(2, ‚Ñ§)) : IsZeroAtImInfty (f ‚à£[k] g) := by
  rw [‚Üê OnePoint.isZeroAt_infty_iff, SL_slash, ‚Üê OnePoint.IsZeroAt.smul_iff]
  apply zero_at_cusps f
  rw [Subgroup.IsArithmetic.isCusp_iff_isCusp_SL2Z, isCusp_SL2Z_iff']
  exact ‚ü®g, by simp [mapGL]‚ü©

lemma CuspFormClass.zero_at_infty [CuspFormClass F Œì k]
    (f : F) : IsZeroAtImInfty f := by
  simpa using CuspFormClass.zero_at_infty_slash f 1

end SL2Z
