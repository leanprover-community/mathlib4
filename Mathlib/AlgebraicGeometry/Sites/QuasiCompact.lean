/-
Copyright (c) 2025 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.AlgebraicGeometry.Sites.Pretopology
import Mathlib.AlgebraicGeometry.Cover.QuasiCompact

/-!

-/

universe w' w v u

open CategoryTheory Limits

namespace CategoryTheory

variable {C : Type u} [Category.{v} C]

namespace PreZeroHypercover

variable {S : C}

@[ext (iff := false)]
lemma Hom.ext' {E : PreZeroHypercover.{w} S} {F : PreZeroHypercover.{w'} S}
    {f g : E.Hom F} (hs : f.s‚ÇÄ = g.s‚ÇÄ) (hh : ‚àÄ i, f.h‚ÇÄ i = g.h‚ÇÄ i ‚â´ eqToHom (by rw [hs])) :
    f = g := by
  cases f
  cases g
  simp only at hs
  subst hs
  simp only [eqToHom_refl, Category.comp_id] at hh
  simp only [PreZeroHypercover.Hom.mk.injEq, heq_eq_eq, true_and]
  ext
  apply hh

lemma Hom.ext'_iff {E : PreZeroHypercover.{w} S} {F : PreZeroHypercover.{w'} S}
    {f g : E.Hom F} :
    f = g ‚Üî ‚àÉ (hs : f.s‚ÇÄ = g.s‚ÇÄ), ‚àÄ i, f.h‚ÇÄ i = g.h‚ÇÄ i ‚â´ eqToHom (by rw [hs]) :=
  ‚ü®fun h ‚Ü¶ h ‚ñ∏ by simp, fun ‚ü®hs, hh‚ü© ‚Ü¶ Hom.ext' hs hh‚ü©

/-- Constructor for isomorphisms of pre-`0`-hypercovers. -/
@[simps]
def isoMk {S : C} {E F : PreZeroHypercover.{w} S}
    (s‚ÇÄ : E.I‚ÇÄ ‚âÉ F.I‚ÇÄ) (h‚ÇÄ : ‚àÄ i, E.X i ‚âÖ F.X (s‚ÇÄ i))
    (w‚ÇÄ : ‚àÄ i, (h‚ÇÄ i).hom ‚â´ F.f _ = E.f _ := by cat_disch) :
    E ‚âÖ F where
  hom.s‚ÇÄ := s‚ÇÄ
  hom.h‚ÇÄ i := (h‚ÇÄ i).hom
  inv.s‚ÇÄ := s‚ÇÄ.symm
  inv.h‚ÇÄ i := eqToHom (by simp) ‚â´ (h‚ÇÄ _).inv
  inv.w‚ÇÄ i := by
    obtain ‚ü®i, rfl‚ü© := s‚ÇÄ.surjective i
    simp only [‚Üê cancel_epi (h‚ÇÄ i).hom, w‚ÇÄ, Category.assoc, Equiv.symm_apply_apply,
      eqToHom_iso_hom_naturality_assoc, Iso.hom_inv_id_assoc]
    rw [‚Üê CategoryTheory.eqToHom_naturality _ (by simp)]
    simp
  hom_inv_id := Hom.ext' (by ext; simp) (fun i ‚Ü¶ by simp)
  inv_hom_id := Hom.ext' (by ext; simp) (fun i ‚Ü¶ by simp)

@[simp]
lemma hom_inv_s‚ÇÄ_apply {E F : PreZeroHypercover.{w} S} (e : E ‚âÖ F) (i : E.I‚ÇÄ) :
    e.inv.s‚ÇÄ (e.hom.s‚ÇÄ i) = i :=
  congr($(e.hom_inv_id).s‚ÇÄ i)

@[simp]
lemma inv_hom_s‚ÇÄ_apply {E F : PreZeroHypercover.{w} S} (e : E ‚âÖ F) (i : F.I‚ÇÄ) :
    e.hom.s‚ÇÄ (e.inv.s‚ÇÄ i) = i :=
  congr($(e.inv_hom_id).s‚ÇÄ i)

@[reassoc (attr := simp)]
lemma hom_inv_h‚ÇÄ {E F : PreZeroHypercover.{w} S} (e : E ‚âÖ F) (i : E.I‚ÇÄ) :
    e.hom.h‚ÇÄ i ‚â´ e.inv.h‚ÇÄ (e.hom.s‚ÇÄ i) = eqToHom (by simp) := by
  obtain ‚ü®hs, hh‚ü© := Hom.ext'_iff.mp e.hom_inv_id
  simpa using hh i

@[reassoc (attr := simp)]
lemma inv_hom_h‚ÇÄ {E F : PreZeroHypercover.{w} S} (e : E ‚âÖ F) (i : F.I‚ÇÄ) :
    e.inv.h‚ÇÄ i ‚â´ e.hom.h‚ÇÄ (e.inv.s‚ÇÄ i) = eqToHom (by simp) := by
  obtain ‚ü®hs, hh‚ü© := Hom.ext'_iff.mp e.inv_hom_id
  simpa using hh i

instance {S : C} {E F : PreZeroHypercover.{w} S} (e : E ‚âÖ F) (i : E.I‚ÇÄ) :
    IsIso (e.hom.h‚ÇÄ i) := by
  use e.inv.h‚ÇÄ (e.hom.s‚ÇÄ i) ‚â´ eqToHom (by simp)
  rw [hom_inv_h‚ÇÄ_assoc, eqToHom_trans, eqToHom_refl, Category.assoc,
    ‚Üê eqToHom_naturality _ (by simp), inv_hom_h‚ÇÄ_assoc]
  simp

instance {S : C} {E F : PreZeroHypercover.{w} S} (e : E ‚âÖ F) (i : F.I‚ÇÄ) :
    IsIso (e.inv.h‚ÇÄ i) :=
  .of_isIso_fac_right (inv_hom_h‚ÇÄ e i)

end PreZeroHypercover

/-- The pre-`0`-hypercover associated to a presieve `R`. It is indexed by the morphisms in `R`. -/
@[simps -isSimp]
def Presieve.preZeroHypercover {S : C} (R : Presieve S) : PreZeroHypercover.{max u v} S where
  I‚ÇÄ := R.uncurry
  X i := i.1.1
  f i := i.1.2

@[simp]
lemma Presieve.presieve‚ÇÄ_preZeroHypercover {S : C} (R : Presieve S) :
    R.preZeroHypercover.presieve‚ÇÄ = R := by
  refine le_antisymm ?_ ?_
  ¬∑ rintro - - ‚ü®i‚ü©
    exact i.2
  ¬∑ intro Y f h
    let i : R.uncurry := ‚ü®‚ü®Y, f‚ü©, h‚ü©
    exact .mk i

lemma Presieve.exists_eq_preZeroHypercover {S : C} (R : Presieve S) :
    ‚àÉ (E : PreZeroHypercover.{max u v} S), R = E.presieve‚ÇÄ :=
  ‚ü®R.preZeroHypercover, by simp‚ü©

@[simps! -isSimp]
def PreZeroHypercover.shrink {S : C} (E : PreZeroHypercover.{w} S) :
    PreZeroHypercover.{max u v} S :=
  E.presieve‚ÇÄ.preZeroHypercover

@[simp]
lemma PreZeroHypercover.presieve‚ÇÄ_shrink {S : C} (E : PreZeroHypercover.{w} S) :
    E.shrink.presieve‚ÇÄ = E.presieve‚ÇÄ :=
  E.presieve‚ÇÄ.presieve‚ÇÄ_preZeroHypercover

lemma PreZeroHypercover.shrink_eq_shrink_of_presieve‚ÇÄ_eq_presieve‚ÇÄ {S : C}
    {E F : PreZeroHypercover.{w} S} (h : E.presieve‚ÇÄ = F.presieve‚ÇÄ) :
    E.shrink = F.shrink := by
  rw [shrink, shrink, h]

def PreZeroHypercover.toShrink {S : C} (E : PreZeroHypercover.{w} S) : E.Hom E.shrink where
  s‚ÇÄ i := ‚ü®‚ü®_, E.f i‚ü©, .mk i‚ü©
  h‚ÇÄ i := ùüô _

noncomputable
def PreZeroHypercover.fromShrink {S : C} (E : PreZeroHypercover.{w} S) : E.shrink.Hom E where
  s‚ÇÄ i := (Presieve.ofArrows_surj _ _ i.2).choose
  h‚ÇÄ i := eqToHom (Presieve.ofArrows_surj _ _ i.2).choose_spec.1.symm
  w‚ÇÄ i := (Presieve.ofArrows_surj _ _ i.2).choose_spec.2.symm

instance {X Y : C} (f : X ‚ü∂ Y) : Unique (PreZeroHypercover.singleton f).I‚ÇÄ :=
  inferInstanceAs <| Unique PUnit

variable (C) in
@[ext]
structure PreZeroHypercoverFamily where
  property ‚¶ÉX : C‚¶Ñ : ObjectProperty (PreZeroHypercover.{max u v} X)
  iff_shrink {X : C} {E : PreZeroHypercover.{max u v} X} : property E ‚Üî property E.shrink

instance : CoeFun (PreZeroHypercoverFamily C)
    fun _ ‚Ü¶ ‚¶ÉX : C‚¶Ñ ‚Üí (E : PreZeroHypercover.{max u v} X) ‚Üí Prop where
  coe P := P.property

inductive PreZeroHypercoverFamily.presieve (P : PreZeroHypercoverFamily C) {X : C} :
    Presieve X ‚Üí Prop where
  | mk (E : PreZeroHypercover.{max u v} X) : P E ‚Üí presieve P E.presieve‚ÇÄ

def PreZeroHypercoverFamily.precoverage (P : PreZeroHypercoverFamily C) :
    Precoverage C where
  coverings _ R := P.presieve R

lemma PreZeroHypercoverFamily.mem_precoverage_iff {P : PreZeroHypercoverFamily C} {X : C}
    {R : Presieve X} :
    R ‚àà P.precoverage X ‚Üî ‚àÉ (E : PreZeroHypercover.{max u v} X), P E ‚àß R = E.presieve‚ÇÄ :=
  ‚ü®fun ‚ü®E, hE‚ü© ‚Ü¶ ‚ü®E, hE, rfl‚ü©, fun ‚ü®_, hE, h‚ü© ‚Ü¶ h ‚ñ∏ ‚ü®_, hE‚ü©‚ü©

@[simp]
lemma PreZeroHypercover.presieve‚ÇÄ_mem_precoverage_iff {P : PreZeroHypercoverFamily C} {X : C}
    {E : PreZeroHypercover.{max u v} X} :
    E.presieve‚ÇÄ ‚àà P.precoverage X ‚Üî P E := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ .mk _ h‚ü©
  rw [PreZeroHypercoverFamily.mem_precoverage_iff] at h
  obtain ‚ü®F, h, heq‚ü© := h
  rw [P.iff_shrink] at h ‚ä¢
  rwa [PreZeroHypercover.shrink_eq_shrink_of_presieve‚ÇÄ_eq_presieve‚ÇÄ heq]

@[simps]
def Precoverage.preZeroHypercoverFamily (K : Precoverage C) :
    PreZeroHypercoverFamily C where
  property X E := E.presieve‚ÇÄ ‚àà K X
  iff_shrink {X} E := by simp

variable (C) in
/-- Giving a precoverage on a category is the same as giving a predicate
on every pre-`0`-hypercover that is stable under deduplication. -/
def Precoverage.equivPreZeroHypercoverFamily :
    Precoverage C ‚âÉ PreZeroHypercoverFamily C where
  toFun K := K.preZeroHypercoverFamily
  invFun P := P.precoverage
  left_inv K := by
    ext X R
    obtain ‚ü®E, rfl‚ü© := R.exists_eq_preZeroHypercover
    simp
  right_inv P := by cat_disch

lemma Precoverage.HasIsos.of_preZeroHypercoverFamily {P : PreZeroHypercoverFamily C}
    (h : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y) [IsIso f], P (.singleton f)) :
    P.precoverage.HasIsos where
  mem_coverings_of_isIso {S T} f hf := by
    rw [‚Üê PreZeroHypercover.presieve‚ÇÄ_singleton.{_, _, max u v}]
    refine .mk _ (h _)

lemma Precoverage.IsStableUnderBaseChange.of_preZeroHypercoverFamily_of_isClosedUnderIsomorphisms
    {P : PreZeroHypercoverFamily C}
    (h‚ÇÅ : ‚àÄ {X : C}, (P (X := X)).IsClosedUnderIsomorphisms)
    (h‚ÇÇ : ‚àÄ {X Y : C} (f : X ‚ü∂ Y) (E : PreZeroHypercover.{max u v} Y)
      [‚àÄ (i : E.I‚ÇÄ), HasPullback f (E.f i)], P E ‚Üí P (E.pullback‚ÇÅ f)) :
    Precoverage.IsStableUnderBaseChange.{max u v} P.precoverage where
  mem_coverings_of_isPullback {Œπ} S X f hf Y g Z p‚ÇÅ p‚ÇÇ h := by
    let E : PreZeroHypercover S := ‚ü®Œπ, X, f‚ü©
    have (i : E.I‚ÇÄ) : HasPullback g (E.f i) := (h i).hasPullback
    let F : PreZeroHypercover Y := ‚ü®_, _, p‚ÇÅ‚ü©
    let e : F ‚âÖ E.pullback‚ÇÅ g :=
      PreZeroHypercover.isoMk (Equiv.refl _) (fun i ‚Ü¶ (h i).isoPullback)
    change F.presieve‚ÇÄ ‚àà _
    rw [F.presieve‚ÇÄ_mem_precoverage_iff, (P (X := Y)).prop_iff_of_iso e]
    refine h‚ÇÇ _ _ ?_
    rwa [‚Üê E.presieve‚ÇÄ_mem_precoverage_iff]

lemma Precoverage.IsStableUnderComposition.of_preZeroHypercoverFamily
    {P : PreZeroHypercoverFamily C}
    (h : ‚àÄ {X : C} (E : PreZeroHypercover.{max u v} X)
      (F : ‚àÄ i, PreZeroHypercover.{max u v} (E.X i)),
      P E ‚Üí (‚àÄ i, P (F i)) ‚Üí P (E.bind F)) :
    Precoverage.IsStableUnderComposition.{max u v, max u v} P.precoverage where
  comp_mem_coverings {Œπ} S X f hf œÉ Y g hg := by
    let E : PreZeroHypercover S := ‚ü®_, _, f‚ü©
    let F (i : Œπ) : PreZeroHypercover (E.X i) := ‚ü®_, _, g i‚ü©
    refine (E.bind F).presieve‚ÇÄ_mem_precoverage_iff.mpr (h _ _ ?_ fun i ‚Ü¶ ?_)
    ¬∑ rwa [‚Üê E.presieve‚ÇÄ_mem_precoverage_iff]
    ¬∑ rw [‚Üê (F i).presieve‚ÇÄ_mem_precoverage_iff]
      exact hg i

end CategoryTheory

namespace AlgebraicGeometry
open AlgebraicGeometry

variable {S : Scheme.{u}}

@[simp]
lemma CategoryTheory.PreZeroHypercover.quasiCompact_shrink_iff (E : PreZeroHypercover.{w} S) :
    E.shrink.QuasiCompact ‚Üî E.QuasiCompact :=
  ‚ü®fun _ ‚Ü¶ .of_hom E.fromShrink, fun _ ‚Ü¶ .of_hom E.toShrink‚ü©

@[simps]
def qcCoverFamily : PreZeroHypercoverFamily Scheme.{u} where
  property X := X.quasiCompactCover
  iff_shrink {_} E := E.quasiCompact_shrink_iff.symm

/--
The quasi-compact precoverage on the category of schemes is the precoverage
given by quasi-compact covers. The intersection of this precoverage
with the precoverage defined by jointly surjective families of flat morphisms is
the fpqc-precoverage.
-/
def qcPrecoverage : Precoverage Scheme.{u} :=
  qcCoverFamily.precoverage

@[simp]
lemma CategoryTheory.PreZeroHypercover.presieve‚ÇÄ_mem_qcPrecoverage_iff
    {E : PreZeroHypercover.{w} S} : E.presieve‚ÇÄ ‚àà qcPrecoverage S ‚Üî E.QuasiCompact := by
  rw [‚Üê PreZeroHypercover.presieve‚ÇÄ_shrink, qcPrecoverage, E.shrink.presieve‚ÇÄ_mem_precoverage_iff]
  exact E.quasiCompact_shrink_iff

instance : qcPrecoverage.HasIsos := .of_preZeroHypercoverFamily <| by
  intro X Y f hf
  rw [qcCoverFamily_property, Scheme.quasiCompactCover_iff]
  infer_instance

instance : Precoverage.IsStableUnderBaseChange.{u + 1} qcPrecoverage.{u} := by
  refine .of_preZeroHypercoverFamily_of_isClosedUnderIsomorphisms ?_ ?_
  ¬∑ intro X
    exact X.isClosedUnderIsomorphisms_quasiCompactCover
  ¬∑ intro X Y f E h hE
    simp only [qcCoverFamily_property, Scheme.quasiCompactCover_iff] at hE ‚ä¢
    infer_instance

instance : Precoverage.IsStableUnderComposition.{u + 1, u + 1} qcPrecoverage.{u} := by
  refine .of_preZeroHypercoverFamily ?_
  intro X E F hE hF
  simp only [qcCoverFamily_property, Scheme.quasiCompactCover_iff] at hE hF ‚ä¢
  infer_instance

lemma foo (P : MorphismProperty Scheme.{u}) (hP : P ‚â§ fun _ _ f ‚Ü¶ IsOpenMap f.base) :
    Scheme.precoverage P ‚â§ qcPrecoverage :=
  sorry

end AlgebraicGeometry
