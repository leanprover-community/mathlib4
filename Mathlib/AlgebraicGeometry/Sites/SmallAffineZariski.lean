/-
Copyright (c) 2024 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.AlgebraicGeometry.AffineScheme
import Mathlib.CategoryTheory.Sites.DenseSubsite.InducedTopology

/-!

# The small affine Zariski site

`X.AffineZariskiSite` is the small affine Zariski site of `X`, whose elements are affine open
sets of `X`, and whose arrows are basic open sets `D(f) ‚ü∂ U` for any `f : Œì(X, U)`.

Every presieve on `U` is then given by a `Set Œì(X, U)` (`presieveOfSections_surjective`), and
we endow `X.AffineZariskiSite` with `grothendieckTopology X`, such that `s : Set Œì(X, U)` is
a cover if and only if `Ideal.span s = ‚ä§` (`generate_presieveOfSections_mem_grothendieckTopology`).

This is a dense subsite of `X.Opens` (with respect to `Opens.grothendieckTopology X`) via the
inclusion functor `toOpensFunctor X`,
which gives an equivalence of categories of sheaves (`sheafEquiv`).

Note that this differs from the definition on stacks project where the arrows in the small affine
Zariski site are arbitrary inclusions.

-/

universe u

open CategoryTheory

noncomputable section

namespace AlgebraicGeometry

variable {X : Scheme.{u}}

/--
`X.AffineZariskiSite` is the small affine Zariski site of `X`, whose elements are affine open
sets of `X`, and whose arrows are basic open sets `D(f) ‚ü∂ U` for any `f : Œì(X, U)`.

Note that this differs from the definition on stacks project where the arrows in the small affine
Zariski site are arbitrary inclusions.
-/
def Scheme.AffineZariskiSite (X : Scheme.{u}) : Type u := { U : X.Opens // IsAffineOpen U }

namespace Scheme.AffineZariskiSite

/-- The inclusion from `X.AffineZariskiSite` to `X.Opens`. -/
abbrev toOpens (U : X.AffineZariskiSite) : X.Opens := U.1

instance : Preorder X.AffineZariskiSite where
  le U V := ‚àÉ f : Œì(X, V.toOpens), X.basicOpen f = U.toOpens
  le_refl U := ‚ü®1, Scheme.basicOpen_of_isUnit _ isUnit_one‚ü©
  le_trans := by
    rintro ‚ü®U, hU‚ü© ‚ü®V, hV‚ü© ‚ü®W, hW‚ü© ‚ü®f, rfl‚ü© ‚ü®g, rfl‚ü©
    exact hW.basicOpen_basicOpen_is_basicOpen g f

lemma toOpens_mono :
    Monotone (toOpens (X := X)) := by
  rintro ‚ü®U, hU‚ü© ‚ü®V, hV‚ü© ‚ü®f, rfl‚ü©
  exact X.basicOpen_le _

lemma toOpens_injective : Function.Injective (toOpens (X := X)) := Subtype.val_injective

instance : PartialOrder X.AffineZariskiSite where
  le_antisymm _ _ hUV hVU := Subtype.ext ((toOpens_mono hUV).antisymm (toOpens_mono hVU))

/-- The basic open set of a section, as an element of `AffineZariskiSite`. -/
def basicOpen (U : X.AffineZariskiSite) (f : Œì(X, U.toOpens)) : X.AffineZariskiSite :=
  ‚ü®X.basicOpen f, U.2.basicOpen f‚ü©

lemma basicOpen_le (U : X.AffineZariskiSite) (f : Œì(X, U.toOpens)) : U.basicOpen f ‚â§ U :=
  ‚ü®f, rfl‚ü©

variable (X) in
/-- The inclusion functor from `X.AffineZariskiSite` to `X.Opens`. -/
def toOpensFunctor : X.AffineZariskiSite ‚•§ X.Opens := toOpens_mono.functor

instance : (toOpensFunctor X).Faithful where

instance : (toOpensFunctor X).IsLocallyFull (Opens.grothendieckTopology X) where
  functorPushforward_imageSieve_mem := by
    intro U V h x hx
    obtain ‚ü®f, hfU, hxf‚ü© := V.2.exists_basicOpen_le ‚ü®x, hx‚ü© (h.le hx)
    exact ‚ü®X.basicOpen f, homOfLE hfU, ‚ü®V.basicOpen f,
      ‚ü®_, (X.basicOpen_res f h.op).trans (inf_eq_right.mpr hfU)‚ü©, ùüô _,
      ‚ü®‚ü®f, rfl‚ü©, rfl‚ü©, rfl‚ü©, hxf‚ü©

instance : (toOpensFunctor X).IsCoverDense (Opens.grothendieckTopology X) where
  is_cover := by
    intros U x hx
    obtain ‚ü®_, ‚ü®V, hV, rfl‚ü©, hxV, hVU‚ü© := (isBasis_affine_open X).exists_subset_of_mem_open hx U.2
    exact ‚ü®V, homOfLE hVU, ‚ü®‚ü®V, hV‚ü©, ùüô _, homOfLE hVU, rfl‚ü©, hxV‚ü©

variable (X) in
/-- The grothendieck topology on `X.AffineZariskiSite` induced from the topology on `X.Opens`.
Also see `mem_grothendieckTopology_iff_sectionsOfPresieve`. -/
def grothendieckTopology : GrothendieckTopology X.AffineZariskiSite :=
  (toOpensFunctor X).inducedTopology (Opens.grothendieckTopology X)

lemma mem_grothendieckTopology {U : X.AffineZariskiSite} {S : Sieve U} :
    S ‚àà grothendieckTopology X U ‚Üî
      ‚àÄ x ‚àà U.toOpens, ‚àÉ (V : _) (f : V ‚ü∂ U), S.arrows f ‚àß x ‚àà V.toOpens := by
  apply forall‚ÇÇ_congr fun x hxU ‚Ü¶ ‚ü®?_, ?_‚ü©
  ¬∑ rintro ‚ü®V, f, ‚ü®W, g, h, hg, rfl‚ü©, hxV‚ü©
    exact ‚ü®W, g, hg, h.le hxV‚ü©
  ¬∑ rintro ‚ü®W, g, hg, hxW‚ü©
    exact ‚ü®W.toOpens, homOfLE (toOpens_mono g.le), ‚ü®W, g, ùüô _, hg, rfl‚ü©, hxW‚ü©

instance : (toOpensFunctor X).IsDenseSubsite
    (grothendieckTopology X) (Opens.grothendieckTopology X) where
  functorPushforward_mem_iff := Iff.rfl

/-- The presieve associated to a set of sections.
This is a surjection, see `presieveOfSections_surjective`. -/
def presieveOfSections (U : X.AffineZariskiSite) (s : Set Œì(X, U.toOpens)) : Presieve U :=
  fun V _ ‚Ü¶ ‚àÉ f ‚àà s, X.basicOpen f = V.toOpens

/-- The set of sections associated to a presieve. -/
def sectionsOfPresieve {U : X.AffineZariskiSite} (P : Presieve U) : Set Œì(X, U.toOpens) :=
  { f | P (homOfLE (U.basicOpen_le f)) }

lemma presieveOfSections_sectionsOfPresieve {U : X.AffineZariskiSite} (P : Presieve U) :
    presieveOfSections U (sectionsOfPresieve P) = P := by
  refine funext‚ÇÇ fun ‚ü®V, hV‚ü© ‚ü®f, hf‚ü© ‚Ü¶ eq_iff_iff.mpr ‚ü®?_, ?_‚ü©
  ¬∑ rintro ‚ü®_, H, rfl‚ü©
    exact H
  ¬∑ intro H
    obtain rfl : _ = V := hf
    exact ‚ü®_, H, rfl‚ü©

lemma presieveOfSections_surjective {U : X.AffineZariskiSite} :
    Function.Surjective (presieveOfSections U) :=
  fun _ ‚Ü¶ ‚ü®_, presieveOfSections_sectionsOfPresieve _‚ü©

lemma presieveOfSections_eq_ofArrows (U : X.AffineZariskiSite) (s : Set Œì(X, U.toOpens)) :
    presieveOfSections U s = .ofArrows _ (fun i : s ‚Ü¶ homOfLE (U.basicOpen_le i.1)) := by
  refine funext‚ÇÇ fun ‚ü®V, hV‚ü© ‚ü®f, hf‚ü© ‚Ü¶ eq_iff_iff.mpr ‚ü®?_, ?_‚ü©
  ¬∑ rintro ‚ü®f, hfs, rfl‚ü©
    exact .mk (Œπ := s) ‚ü®f, hfs‚ü©
  ¬∑ rintro ‚ü®‚ü®f, hfs‚ü©‚ü©
    exact ‚ü®f, hfs, rfl‚ü©

lemma generate_presieveOfSections
    {U V : X.AffineZariskiSite} {s : Set Œì(X, U.toOpens)} {f : V ‚ü∂ U} :
    Sieve.generate (presieveOfSections U s) f ‚Üî ‚àÉ f ‚àà s, ‚àÉ g, X.basicOpen (f * g) = V.toOpens := by
  obtain ‚ü®V, hV‚ü© := V
  constructor
  ¬∑ rintro ‚ü®‚ü®W, hW‚ü©, ‚ü®f‚ÇÅ, hf‚ÇÅ‚ü©, -, ‚ü®f‚ÇÇ, hf‚ÇÇs, rfl‚ü©, rfl‚ü©
    subst hf‚ÇÅ
    obtain ‚ü®f‚ÇÉ, hf‚ÇÉ‚ü© := U.2.basicOpen_basicOpen_is_basicOpen f‚ÇÇ f‚ÇÅ
    refine ‚ü®f‚ÇÇ, hf‚ÇÇs, f‚ÇÉ, ?_‚ü©
    rw [X.basicOpen_mul, hf‚ÇÉ, inf_eq_right]
    exact X.basicOpen_le _
  ¬∑ rintro ‚ü®f‚ÇÅ, hf‚ÇÅs, f‚ÇÇ, rfl‚ü©
    refine ‚ü®U.basicOpen f‚ÇÅ, ‚ü®f‚ÇÇ |_·µ£ _, ?_‚ü©, ‚ü®f‚ÇÅ, rfl‚ü©, ‚ü®f‚ÇÅ, hf‚ÇÅs, rfl‚ü©, rfl‚ü©
    exact (X.basicOpen_res _ _).trans (X.basicOpen_mul _ _).symm

lemma generate_presieveOfSections_mem_grothendieckTopology
    {U : X.AffineZariskiSite} {s : Set Œì(X, U.toOpens)} :
    Sieve.generate (presieveOfSections U s) ‚àà grothendieckTopology X U ‚Üî Ideal.span s = ‚ä§ := by
  rw [‚Üê U.2.self_le_basicOpen_union_iff, mem_grothendieckTopology, SetLike.le_def]
  refine forall‚ÇÇ_congr fun x hx ‚Ü¶ ?_
  simp only [exists_and_left, TopologicalSpace.Opens.iSup_mk,
    TopologicalSpace.Opens.carrier_eq_coe, Set.iUnion_coe_set, TopologicalSpace.Opens.mem_mk,
    Set.mem_iUnion, SetLike.mem_coe, exists_prop, generate_presieveOfSections]
  constructor
  ¬∑ simp only [basicOpen_mul]
    rintro ‚ü®‚ü®V, hV‚ü©, ‚ü®f, hfs, g, rfl‚ü©, -, hxV‚ü©
    exact ‚ü®f, hfs, hxV.1‚ü©
  ¬∑ rintro ‚ü®f, hfs, hxf‚ü©
    refine ‚ü®U.basicOpen _, ‚ü®f, hfs, 1, rfl‚ü©, ‚ü®_, rfl‚ü©, by simpa using hxf‚ü©

lemma mem_grothendieckTopology_iff_sectionsOfPresieve
    {U : X.AffineZariskiSite} {S : Sieve U} :
    S ‚àà grothendieckTopology X U ‚Üî Ideal.span (sectionsOfPresieve S.1) = ‚ä§ := by
  rw [‚Üê generate_presieveOfSections_mem_grothendieckTopology, presieveOfSections_sectionsOfPresieve,
    Sieve.generate_sieve]

variable {A} [Category A]
variable [‚àÄ (U : X.Opens·µí·µñ), Limits.HasLimitsOfShape (StructuredArrow U (toOpensFunctor X).op) A]

/-- The category of sheaves on `X.AffineZariskiSite` is equivalent to the categories of sheaves
over `X`. -/
abbrev sheafEquiv : Sheaf (grothendieckTopology X) A ‚âå TopCat.Sheaf A X :=
    (toOpensFunctor X).sheafInducedTopologyEquivOfIsCoverDense _ _

end Scheme.AffineZariskiSite

end AlgebraicGeometry
