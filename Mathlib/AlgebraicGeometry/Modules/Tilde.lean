/-
Copyright (c) 2024 Weihong Xu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Weihong Xu
-/

import Mathlib.Algebra.Module.LocalizedModule
import Mathlib.AlgebraicGeometry.StructureSheaf
import Mathlib.AlgebraicGeometry.Modules.Sheaf
import Mathlib.Algebra.Category.ModuleCat.Sheaf

/-!

# Construction of M^~

Given any commutative ring `R` and `R`-module `M`, we construct the sheaf `M^~` of `ùí™_SpecR`-modules
such that `M^~(U)` is the set of dependent functions that are locally fractions.

## Main definitions

* `ModuleCat.tildeInType` : `M^~` as a sheaf of types groups.
* `ModuleCat.tilde` : `M^~` as a sheaf of `ùí™_{Spec R}`-modules.

-/

universe u

open TopCat AlgebraicGeometry TopologicalSpace CategoryTheory Opposite

variable {R : Type u} [CommRing R] (M : ModuleCat.{u} R)

namespace ModuleCat

namespace Tilde

/-- For an `R`-module `M` and a point `P` in `Spec R`, `Localizations P` is the localized module
`M` at the prime ideal `P`. -/
abbrev Localizations (P : PrimeSpectrum.Top R) :=
LocalizedModule P.asIdeal.primeCompl M

/-- For any open subset `U ‚äÜ Spec R`, `IsFraction` is the predicate expressing that a function
`f : ‚àè_{x ‚àà U}, M‚Çì` is such that for any `ùî≠ ‚àà U`, `f ùî≠ = m / s` for some `m : M` and `s ‚àâ ùî≠`.
In short `f` is a fraction on `U`. -/
def isFraction {U : Opens (PrimeSpectrum R)} (f : ‚àÄ ùî≠ : U, Localizations M ùî≠.1) : Prop :=
  ‚àÉ (m : M) (s : R),
    ‚àÄ x : U, ¬¨s ‚àà x.1.asIdeal ‚àß s ‚Ä¢ f x = LocalizedModule.mkLinearMap x.1.asIdeal.primeCompl M m

/--
The property of a function `f : ‚àè_{x ‚àà U}, M‚Çì` being a fraction is stable under restriction.
-/
def isFractionPrelocal : PrelocalPredicate (Localizations M) where
  pred {U} f := isFraction M f
  res := by rintro V U i f ‚ü®m, s, w‚ü©; exact ‚ü®m, s, fun x => w (i x)‚ü©

/--
For any open subset `U ‚äÜ Spec R`, `IsLocallyFraction` is the predicate expressing that a function
`f : ‚àè_{x ‚àà U}, M‚Çì` is such that for any `ùî≠ ‚àà U`, there exists an open neighbourhood `V ‚àã ùî≠`, such
that for any `ùîÆ ‚àà V`, `f ùîÆ = m / s` for some `m : M` and `s ‚àâ ùîÆ`.
In short `f` is locally a fraction on `U`.
-/
def isLocallyFraction : LocalPredicate (Localizations M) := (isFractionPrelocal M).sheafify

@[simp]
theorem isLocallyFraction_pred {U : Opens (PrimeSpectrum.Top R)}
    (f : ‚àÄ x : U, Localizations M x) :
    (isLocallyFraction M).pred f =
      ‚àÄ y : U,
        ‚àÉ (V : _) (_ : y.1 ‚àà V) (i : V ‚ü∂ U),
          ‚àÉ (m : M) (s: R), ‚àÄ x : V, ¬¨s ‚àà x.1.asIdeal ‚àß s ‚Ä¢ f (i x) =
            LocalizedModule.mkLinearMap x.1.asIdeal.primeCompl M m :=
  rfl

/- M_x is an O_SpecR(U)-module when x is in U -/
noncomputable instance (U : (Opens (PrimeSpectrum.Top R))·µí·µñ) (x : U.unop):
    Module ((Spec.structureSheaf R).val.obj U) (Localizations M x):=
  Module.compHom (R := (Localization.AtPrime x.1.asIdeal)) _
    (StructureSheaf.openToLocalization R U.unop x x.2 :
      (Spec.structureSheaf R).val.obj U ‚Üí+* Localization.AtPrime x.1.asIdeal)

@[simp]
lemma sections_smul_localizations_def
    {U : (Opens (PrimeSpectrum.Top R))·µí·µñ} (x : U.unop)
    (r : (Spec.structureSheaf R).val.obj U)
    (m : Localizations M ‚Üëx) :
  r ‚Ä¢ m = r.1 x ‚Ä¢ m := rfl

/--
For any `R`-module `M` and any open subset `U ‚äÜ Spec R`, `M^~(U)` is an `ùí™_{Spec R}(U)`-submodule
of `‚àè_{ùî≠ ‚àà U} M_ùî≠`. -/
def sectionsSubmodule (U : (Opens (PrimeSpectrum R))·µí·µñ) :
    Submodule ((Spec.structureSheaf R).1.obj U) (‚àÄ x : U.unop, Localizations M x.1) where
  carrier := { f | (isLocallyFraction M).pred f }
  zero_mem' x := ‚ü®unop U, x.2, ùüô _, 0, 1, fun y =>
    ‚ü®Ideal.ne_top_iff_one _ |>.1 y.1.isPrime.1, by simp‚ü©‚ü©
  add_mem' := by
    intro a b ha hb x
    rcases ha x with ‚ü®Va, ma, ia, ra, sa, wa‚ü©
    rcases hb x with ‚ü®Vb, mb, ib, rb, sb, wb‚ü©
    refine ‚ü®Va ‚äì Vb, ‚ü®ma, mb‚ü©, Opens.infLELeft _ _ ‚â´ ia,  sb‚Ä¢ ra+ sa‚Ä¢rb , sa * sb, ?_‚ü©
    intro y
    rcases wa (Opens.infLELeft _ _ y : Va) with ‚ü®nma, wa‚ü©
    rcases wb (Opens.infLERight _ _ y : Vb) with ‚ü®nmb, wb‚ü©
    fconstructor
    ¬∑ intro H; cases y.1.isPrime.mem_or_mem H <;> contradiction
    ¬∑ simp only [Opens.coe_inf, Pi.add_apply, smul_add, map_add,
        LinearMapClass.map_smul] at wa wb ‚ä¢
      rw [‚Üê wa, ‚Üê wb, ‚Üê mul_smul, ‚Üê mul_smul]
      congr 2
      simp [mul_comm]
  smul_mem' := by
    intro r a ha x
    rcases ha x with ‚ü®Va, ma, ia, ra, sa, wa‚ü©
    rcases r.2 x with ‚ü®Vr, mr, ir, rr, sr, wr‚ü©
    refine ‚ü®Va ‚äì Vr, ‚ü®ma, mr‚ü©, Opens.infLELeft _ _ ‚â´ ia, rr‚Ä¢ra, sr*sa, ?_‚ü©
    intro y
    rcases wa (Opens.infLELeft _ _ y : Va) with ‚ü®nma, wa‚ü©
    rcases wr (Opens.infLERight _ _ y) with ‚ü®nmr, wr‚ü©
    fconstructor
    ¬∑ intro H; cases y.1.isPrime.mem_or_mem H <;> contradiction
    ¬∑ simp only [Opens.coe_inf, Pi.smul_apply, LinearMapClass.map_smul] at wa wr ‚ä¢
      rw [mul_comm, ‚Üê Algebra.smul_def] at wr
      rw [sections_smul_localizations_def, ‚Üê wa, ‚Üê mul_smul, ‚Üê smul_assoc, mul_comm sr, mul_smul,
        wr, mul_comm rr, Algebra.smul_def, ‚Üê map_mul]
      rfl

end Tilde

/--
For any `R`-module `M`, `TildeInType R M` is the sheaf of set on `Spec R` whose sections on `U` are
the dependent functions that are locally fractions. This is often denoted by `M^~`.

See also `Tilde.isLocallyFraction`.
-/
def tildeInType : Sheaf (Type u) (PrimeSpectrum.Top R) :=
  subsheafToTypes (Tilde.isLocallyFraction M)

instance (U : (Opens (PrimeSpectrum.Top R))·µí·µñ) :
    AddCommGroup (M.tildeInType.1.obj U) :=
  inferInstanceAs <| AddCommGroup (Tilde.sectionsSubmodule M U)

noncomputable instance (U : (Opens (PrimeSpectrum.Top R))·µí·µñ) :
    Module ((Spec (.of R)).ringCatSheaf.1.obj U) (M.tildeInType.1.obj U) :=
  inferInstanceAs <| Module _ (Tilde.sectionsSubmodule M U)

/--
`M^~` as a sheaf of `ùí™_{Spec R}`-modules
-/
noncomputable def tilde : (Spec (CommRingCat.of R)).Modules where
  val :=
    { obj := fun U ‚Ü¶ ModuleCat.of _ (M.tildeInType.val.obj U)
      map := fun {U V} i ‚Ü¶
        { toFun := M.tildeInType.val.map i
          map_smul' := by intros; rfl
          map_add' := by intros; rfl } }
  isSheaf := (TopCat.Presheaf.isSheaf_iff_isSheaf_comp (forget AddCommGrp) _ ).2
    M.tildeInType.2

end ModuleCat
