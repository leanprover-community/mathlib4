/-
Copyright (c) 2024 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.AlgebraicGeometry.SpreadingOut
import Mathlib.AlgebraicGeometry.FunctionField
import Mathlib.AlgebraicGeometry.Morphisms.Separated
/-!

# Rational maps between schemes

## Main definitions

* `AlgebraicGeometry.Scheme.PartialMap`: A partial map from `X` to `Y` (`X.PartialMap Y`) is
  a morphism into `Y` defined on a dense open subscheme of `X`.
* `AlgebraicGeometry.Scheme.PartialMap.equiv`:
  Two partial maps are equivalent if they are equal on a dense open subscheme.
* `AlgebraicGeometry.Scheme.RationalMap`:
  A rational map from `X` to `Y` (`X ‚§è Y`) is an equivalence class of partial maps.
* `AlgebraicGeometry.Scheme.RationalMap.equivFunctionFieldOver`:
  Given `S`-schemes `X` and `Y` such that `Y` is locally of finite type and `X` is integral,
  `S`-morphisms `Spec K(X) ‚ü∂ Y` correspond bijectively to `S`-rational maps from `X` to `Y`.
* `AlgebraicGeometry.Scheme.RationalMap.toPartialMap`:
  If `X` is integral and `Y` is separated, then any `f : X ‚§è Y` can be realized as a partial
  map on `f.domain`, the domain of definition of `f`.
-/

universe u

open CategoryTheory hiding Quotient

namespace AlgebraicGeometry

variable {X Y Z S : Scheme.{u}} (sX : X ‚ü∂ S) (sY : Y ‚ü∂ S)

namespace Scheme

/--
A partial map from `X` to `Y` (`X.PartialMap Y`) is a morphism into `Y`
defined on a dense open subscheme of `X`.
-/
structure PartialMap (X Y : Scheme.{u}) where
  /-- The domain of definition of a partial map. -/
  domain : X.Opens
  dense_domain : Dense (domain : Set X)
  /-- The underlying morphism of a partial map. -/
  hom : ‚Üëdomain ‚ü∂ Y

variable (S) in
/-- A partial map is a `S`-map if the underlying morphism is. -/
abbrev PartialMap.IsOver [X.Over S] [Y.Over S] (f : X.PartialMap Y) :=
  f.hom.IsOver S

namespace PartialMap

lemma ext_iff (f g : X.PartialMap Y) :
    f = g ‚Üî ‚àÉ e : f.domain = g.domain, f.hom = (X.isoOfEq e).hom ‚â´ g.hom := by
  constructor
  ¬∑ rintro rfl
    simp only [exists_true_left, Scheme.isoOfEq_rfl, Iso.refl_hom, Category.id_comp]
  ¬∑ obtain ‚ü®U, hU, f‚ü© := f
    obtain ‚ü®V, hV, g‚ü© := g
    rintro ‚ü®rfl : U = V, e‚ü©
    congr 1
    simpa using e

@[ext]
lemma ext (f g : X.PartialMap Y) (e : f.domain = g.domain)
    (H : f.hom = (X.isoOfEq e).hom ‚â´ g.hom) : f = g := by
  rw [ext_iff]
  exact ‚ü®e, H‚ü©

/-- The restriction of a partial map to a smaller domain. -/
@[simps hom domain]
noncomputable
def restrict (f : X.PartialMap Y) (U : X.Opens)
    (hU : Dense (U : Set X)) (hU' : U ‚â§ f.domain) : X.PartialMap Y where
  domain := U
  dense_domain := hU
  hom := X.homOfLE hU' ‚â´ f.hom

@[simp]
lemma restrict_id (f : X.PartialMap Y) : f.restrict f.domain f.dense_domain le_rfl = f := by
  ext1 <;> simp [restrict_domain]

lemma restrict_id_hom (f : X.PartialMap Y) :
    (f.restrict f.domain f.dense_domain le_rfl).hom = f.hom := by
  simp

@[simp]
lemma restrict_restrict (f : X.PartialMap Y)
    (U : X.Opens) (hU : Dense (U : Set X)) (hU' : U ‚â§ f.domain)
    (V : X.Opens) (hV : Dense (V : Set X)) (hV' : V ‚â§ U) :
    (f.restrict U hU hU').restrict V hV hV' = f.restrict V hV (hV'.trans hU') := by
  ext1 <;> simp [restrict_domain]

lemma restrict_restrict_hom (f : X.PartialMap Y)
    (U : X.Opens) (hU : Dense (U : Set X)) (hU' : U ‚â§ f.domain)
    (V : X.Opens) (hV : Dense (V : Set X)) (hV' : V ‚â§ U) :
    ((f.restrict U hU hU').restrict V hV hV').hom = (f.restrict V hV (hV'.trans hU')).hom := by
  simp

instance [X.Over S] [Y.Over S] (f : X.PartialMap Y) [f.IsOver S]
    (U : X.Opens) (hU : Dense (U : Set X)) (hU' : U ‚â§ f.domain) :
    (f.restrict U hU hU').IsOver S where

/-- The composition of a partial map and a morphism on the right. -/
@[simps]
def compHom (f : X.PartialMap Y) (g : Y ‚ü∂ Z) : X.PartialMap Z where
  domain := f.domain
  dense_domain := f.dense_domain
  hom := f.hom ‚â´ g

instance [X.Over S] [Y.Over S] [Z.Over S] (f : X.PartialMap Y) (g : Y ‚ü∂ Z)
    [f.IsOver S] [g.IsOver S] : (f.compHom g).IsOver S where

/-- A scheme morphism as a partial map. -/
@[simps]
def _root_.AlgebraicGeometry.Scheme.Hom.toPartialMap (f : X.Hom Y) :
    X.PartialMap Y := ‚ü®‚ä§, dense_univ, X.topIso.hom ‚â´ f‚ü©

instance [X.Over S] [Y.Over S] (f : X ‚ü∂ Y) [f.IsOver S] : f.toPartialMap.IsOver S where

lemma isOver_iff [X.Over S] [Y.Over S] {f : X.PartialMap Y} :
    f.IsOver S ‚Üî (f.compHom (Y ‚Üò S)).hom = f.domain.Œπ ‚â´ X ‚Üò S := by
  simp

lemma isOver_iff_eq_restrict [X.Over S] [Y.Over S] {f : X.PartialMap Y} :
    f.IsOver S ‚Üî f.compHom (Y ‚Üò S) = (X ‚Üò S).toPartialMap.restrict _ f.dense_domain (by simp) := by
  simp [isOver_iff, PartialMap.ext_iff]

/-- If `x` is in the domain of a partial map `f`, then `f` restricts to a map from `Spec ùí™_x`. -/
noncomputable
def fromSpecStalkOfMem (f : X.PartialMap Y) {x} (hx : x ‚àà f.domain) :
    Spec (X.presheaf.stalk x) ‚ü∂ Y :=
  f.domain.fromSpecStalkOfMem x hx ‚â´ f.hom

/-- A partial map restricts to a map from `Spec K(X)`. -/
noncomputable
abbrev fromFunctionField [IrreducibleSpace X] (f : X.PartialMap Y) :
    Spec X.functionField ‚ü∂ Y :=
  f.fromSpecStalkOfMem
    ((genericPoint_specializes _).mem_open f.domain.2 f.dense_domain.nonempty.choose_spec)

lemma fromSpecStalkOfMem_restrict (f : X.PartialMap Y)
    {U : X.Opens} (hU : Dense (U : Set X)) (hU' : U ‚â§ f.domain) {x} (hx : x ‚àà U) :
    (f.restrict U hU hU').fromSpecStalkOfMem hx = f.fromSpecStalkOfMem (hU' hx) := by
  dsimp only [fromSpecStalkOfMem, restrict, Scheme.Opens.fromSpecStalkOfMem]
  have e : ‚ü®x, hU' hx‚ü© = (X.homOfLE hU').base ‚ü®x, hx‚ü© := by
    rw [Scheme.homOfLE_base]
    rfl
  rw [Category.assoc, ‚Üê Spec_map_stalkMap_fromSpecStalk_assoc,
    ‚Üê Spec_map_stalkSpecializes_fromSpecStalk (Inseparable.of_eq e).specializes,
    ‚Üê TopCat.Presheaf.stalkCongr_inv _ (Inseparable.of_eq e)]
  simp only [‚Üê Category.assoc, ‚Üê Spec.map_comp]
  congr 3
  rw [Iso.eq_inv_comp, ‚Üê Category.assoc, IsIso.comp_inv_eq, IsIso.eq_inv_comp,
    stalkMap_congr_hom _ _ (X.homOfLE_Œπ hU').symm]
  simp only [restrictFunctor_obj_left, homOfLE_leOfHom, TopCat.Presheaf.stalkCongr_hom]
  rw [‚Üê stalkSpecializes_stalkMap_assoc, stalkMap_comp]

lemma fromFunctionField_restrict (f : X.PartialMap Y) [IrreducibleSpace X]
    {U : X.Opens} (hU : Dense (U : Set X)) (hU' : U ‚â§ f.domain) :
    (f.restrict U hU hU').fromFunctionField = f.fromFunctionField :=
  fromSpecStalkOfMem_restrict f _ _ _

/--
Given `S`-schemes `X` and `Y` such that `Y` is locally of finite type and
`X` is irreducible germ-injective at `x` (e.g. when `X` is integral),
any `S`-morphism `Spec ùí™‚Çì ‚ü∂ Y` spreads out to a partial map from `X` to `Y`.
-/
noncomputable
def ofFromSpecStalk [IrreducibleSpace X] [LocallyOfFiniteType sY] {x : X} [X.IsGermInjectiveAt x]
    (œÜ : Spec (X.presheaf.stalk x) ‚ü∂ Y) (h : œÜ ‚â´ sY = X.fromSpecStalk x ‚â´ sX) : X.PartialMap Y where
  hom := (spread_out_of_isGermInjective' sX sY œÜ h).choose_spec.choose_spec.choose
  dense_domain := (spread_out_of_isGermInjective' sX sY œÜ h).choose.2.dense
    ‚ü®_, (spread_out_of_isGermInjective' sX sY œÜ h).choose_spec.choose‚ü©

lemma ofFromSpecStalk_comp [IrreducibleSpace X] [LocallyOfFiniteType sY]
    {x : X} [X.IsGermInjectiveAt x] (œÜ : Spec (X.presheaf.stalk x) ‚ü∂ Y)
    (h : œÜ ‚â´ sY = X.fromSpecStalk x ‚â´ sX) :
    (ofFromSpecStalk sX sY œÜ h).hom ‚â´ sY = (ofFromSpecStalk sX sY œÜ h).domain.Œπ ‚â´ sX :=
  (spread_out_of_isGermInjective' sX sY œÜ h).choose_spec.choose_spec.choose_spec.2

lemma mem_domain_ofFromSpecStalk [IrreducibleSpace X] [LocallyOfFiniteType sY]
    {x : X} [X.IsGermInjectiveAt x] (œÜ : Spec (X.presheaf.stalk x) ‚ü∂ Y)
    (h : œÜ ‚â´ sY = X.fromSpecStalk x ‚â´ sX) : x ‚àà (ofFromSpecStalk sX sY œÜ h).domain :=
  (spread_out_of_isGermInjective' sX sY œÜ h).choose_spec.choose

lemma fromSpecStalkOfMem_ofFromSpecStalk [IrreducibleSpace X] [LocallyOfFiniteType sY]
    {x : X} [X.IsGermInjectiveAt x] (œÜ : Spec (X.presheaf.stalk x) ‚ü∂ Y)
    (h : œÜ ‚â´ sY = X.fromSpecStalk x ‚â´ sX) :
    (ofFromSpecStalk sX sY œÜ h).fromSpecStalkOfMem (mem_domain_ofFromSpecStalk sX sY œÜ h) = œÜ :=
  (spread_out_of_isGermInjective' sX sY œÜ h).choose_spec.choose_spec.choose_spec.1.symm

@[simp]
lemma fromSpecStalkOfMem_compHom (f : X.PartialMap Y) (g : Y ‚ü∂ Z) (x) (hx) :
    (f.compHom g).fromSpecStalkOfMem (x := x) hx = f.fromSpecStalkOfMem hx ‚â´ g := by
  simp [fromSpecStalkOfMem]

@[simp]
lemma fromSpecStalkOfMem_toPartialMap (f : X ‚ü∂ Y) (x) :
    f.toPartialMap.fromSpecStalkOfMem (x := x) trivial = X.fromSpecStalk x ‚â´ f := by
  simp [fromSpecStalkOfMem]

/-- Two partial maps are equivalent if they are equal on a dense open subscheme. -/
protected noncomputable
def equiv (f g : X.PartialMap Y) : Prop :=
  ‚àÉ (W : X.Opens) (hW : Dense (W : Set X)) (hWl : W ‚â§ f.domain) (hWr : W ‚â§ g.domain),
    (f.restrict W hW hWl).hom = (g.restrict W hW hWr).hom

lemma equivalence_rel : Equivalence (@Scheme.PartialMap.equiv X Y) where
  refl f := ‚ü®f.domain, f.dense_domain, by simp‚ü©
  symm {f g} := by
    intro ‚ü®W, hW, hWl, hWr, e‚ü©
    exact ‚ü®W, hW, hWr, hWl, e.symm‚ü©
  trans {f g h} := by
    intro ‚ü®W‚ÇÅ, hW‚ÇÅ, hW‚ÇÅl, hW‚ÇÅr, e‚ÇÅ‚ü© ‚ü®W‚ÇÇ, hW‚ÇÇ, hW‚ÇÇl, hW‚ÇÇr, e‚ÇÇ‚ü©
    refine ‚ü®W‚ÇÅ ‚äì W‚ÇÇ, hW‚ÇÅ.inter_of_isOpen_left hW‚ÇÇ W‚ÇÅ.2, inf_le_left.trans hW‚ÇÅl,
      inf_le_right.trans hW‚ÇÇr, ?_‚ü©
    dsimp at e‚ÇÅ e‚ÇÇ
    simp only [restrict_domain, restrict_hom, restrictFunctor_obj_left, homOfLE_leOfHom,
      ‚Üê X.homOfLE_homOfLE (U := W‚ÇÅ ‚äì W‚ÇÇ) inf_le_left hW‚ÇÅl, Functor.map_comp, Over.comp_left,
      Category.assoc, e‚ÇÅ, ‚Üê X.homOfLE_homOfLE (U := W‚ÇÅ ‚äì W‚ÇÇ) inf_le_right hW‚ÇÇr, ‚Üê e‚ÇÇ]
    simp only [homOfLE_homOfLE_assoc]

instance : Setoid (X.PartialMap Y) := ‚ü®@PartialMap.equiv X Y, equivalence_rel‚ü©

lemma restrict_equiv (f : X.PartialMap Y) (U : X.Opens)
    (hU : Dense (U : Set X)) (hU' : U ‚â§ f.domain) : (f.restrict U hU hU').equiv f :=
  ‚ü®U, hU, le_rfl, hU', by simp‚ü©

lemma equiv_of_fromSpecStalkOfMem_eq [IrreducibleSpace X]
    {x : X} [X.IsGermInjectiveAt x] (f g : X.PartialMap Y)
    (hxf : x ‚àà f.domain) (hxg : x ‚àà g.domain)
    (H : f.fromSpecStalkOfMem hxf = g.fromSpecStalkOfMem hxg) : f.equiv g := by
  have hdense : Dense ((f.domain ‚äì g.domain) : Set X) :=
    f.dense_domain.inter_of_isOpen_left g.dense_domain f.domain.2
  have := (isGermInjectiveAt_iff_of_isOpenImmersion (f := (f.domain ‚äì g.domain).Œπ)
    (x := ‚ü®x, hxf, hxg‚ü©)).mp ‚Äπ_‚Ä∫
  have := spread_out_unique_of_isGermInjective' (X := (f.domain ‚äì g.domain).toScheme)
    (X.homOfLE inf_le_left ‚â´ f.hom) (X.homOfLE inf_le_right ‚â´ g.hom) (x := ‚ü®x, hxf, hxg‚ü©) ?_
  ¬∑ obtain ‚ü®U, hxU, e‚ü© := this
    refine ‚ü®(f.domain ‚äì g.domain).Œπ ''·µÅ U, ((f.domain ‚äì g.domain).Œπ ''·µÅ U).2.dense
      ‚ü®_, ‚ü®_, hxU, rfl‚ü©‚ü©,
      ((Set.image_subset_range _ _).trans_eq (Subtype.range_val)).trans inf_le_left,
      ((Set.image_subset_range _ _).trans_eq (Subtype.range_val)).trans inf_le_right, ?_‚ü©
    rw [‚Üê cancel_epi (Scheme.Hom.isoImage _ _).hom]
    simp only [TopologicalSpace.Opens.carrier_eq_coe, IsOpenMap.functor_obj_coe,
      TopologicalSpace.Opens.coe_inf, restrict_hom, ‚Üê Category.assoc] at e ‚ä¢
    convert e using 2 <;> rw [‚Üê cancel_mono (Scheme.Opens.Œπ _)] <;> simp
  ¬∑ rw [‚Üê f.fromSpecStalkOfMem_restrict hdense inf_le_left ‚ü®hxf, hxg‚ü©,
      ‚Üê g.fromSpecStalkOfMem_restrict hdense inf_le_right ‚ü®hxf, hxg‚ü©] at H
    simpa only [fromSpecStalkOfMem, restrict_domain, Opens.fromSpecStalkOfMem, Spec.map_inv,
      restrict_hom, Category.assoc, IsIso.eq_inv_comp, IsIso.hom_inv_id_assoc] using H

instance (U : X.Opens) [IsReduced X] : IsReduced U := isReduced_of_isOpenImmersion U.Œπ

lemma Opens.isDominant_Œπ {U : X.Opens} (hU : Dense (X := X) U) : IsDominant U.Œπ :=
  ‚ü®by simpa [DenseRange] using hU‚ü©

lemma Opens.isDominant_homOfLE {U V : X.Opens} (hU : Dense (X := X) U) (hU' : U ‚â§ V) :
    IsDominant (X.homOfLE hU') :=
  have : IsDominant (X.homOfLE hU' ‚â´ Opens.Œπ _) := by simpa using Opens.isDominant_Œπ hU
  IsDominant.of_comp_of_isOpenImmersion (g := Opens.Œπ _) _

/-- Two partial maps from reduced schemes to separated schemes are equivalent if and only if
they are equal on **any** open dense subset. -/
lemma equiv_iff_of_isSeparated_of_le [X.Over S] [Y.Over S] [IsReduced X]
    [IsSeparated (Y ‚Üò S)] {f g : X.PartialMap Y} [f.IsOver S] [g.IsOver S]
    {W : X.Opens} (hW : Dense (X := X) W) (hWl : W ‚â§ f.domain) (hWr : W ‚â§ g.domain) : f.equiv g ‚Üî
      (f.restrict W hW hWl).hom = (g.restrict W hW hWr).hom := by
  refine ‚ü®fun ‚ü®V, hV, hVl, hVr, e‚ü© ‚Ü¶ ?_, fun e ‚Ü¶ ‚ü®_, _, _, _, e‚ü©‚ü©
  have : IsDominant (X.homOfLE (inf_le_left : W ‚äì V ‚â§ W)) :=
    Opens.isDominant_homOfLE (hW.inter_of_isOpen_left hV W.2) _
  apply ext_of_isDominant_of_isSeparated' S (X.homOfLE (inf_le_left : W ‚äì V ‚â§ W))
  simpa using congr(X.homOfLE (inf_le_right : W ‚äì V ‚â§ V) ‚â´ $e)

/-- Two partial maps from reduced schemes to separated schemes are equivalent if and only if
they are equal on the intersection of the domains. -/
lemma equiv_iff_of_isSeparated [X.Over S] [Y.Over S] [IsReduced X]
    [IsSeparated (Y ‚Üò S)] {f g : X.PartialMap Y}
    [f.IsOver S] [g.IsOver S] : f.equiv g ‚Üî
      (f.restrict _ (f.2.inter_of_isOpen_left g.2 f.domain.2) inf_le_left).hom =
      (g.restrict _ (f.2.inter_of_isOpen_left g.2 f.domain.2) inf_le_right).hom :=
  equiv_iff_of_isSeparated_of_le (S := S) _ _ _

/-- Two partial maps from reduced schemes to separated schemes with the same domain are equivalent
if and only if they are equal. -/
lemma equiv_iff_of_domain_eq_of_isSeparated [X.Over S] [Y.Over S] [IsReduced X]
    [IsSeparated (Y ‚Üò S)] {f g : X.PartialMap Y} (hfg : f.domain = g.domain)
    [f.IsOver S] [g.IsOver S] : f.equiv g ‚Üî f = g := by
  rw [equiv_iff_of_isSeparated_of_le (S := S) f.dense_domain le_rfl hfg.le]
  obtain ‚ü®Uf, _, f‚ü© := f
  obtain ‚ü®Ug, _, g‚ü© := g
  obtain rfl : Uf = Ug := hfg
  simp

/-- A partial map from a reduced scheme to a separated scheme is equivalent to a morphism
if and only if it is equal to the restriction of the morphism. -/
lemma equiv_toPartialMap_iff_of_isSeparated [X.Over S] [Y.Over S] [IsReduced X]
    [IsSeparated (Y ‚Üò S)] {f : X.PartialMap Y} {g : X ‚ü∂ Y}
    [f.IsOver S] [g.IsOver S] : f.equiv g.toPartialMap ‚Üî
      f.hom = f.domain.Œπ ‚â´ g := by
  rw [equiv_iff_of_isSeparated (S := S), ‚Üê cancel_epi (X.isoOfEq (inf_top_eq f.domain)).hom]
  simp
  rfl

end PartialMap

/-- A rational map from `X` to `Y` (`X ‚§è Y`) is an equivalence class of partial maps,
where two partial maps are equivalent if they are equal on a dense open subscheme.  -/
def RationalMap (X Y : Scheme.{u}) : Type u :=
  @Quotient (X.PartialMap Y) inferInstance

/-- The notation for rational maps. -/
scoped[AlgebraicGeometry] infix:10 " ‚§è " => Scheme.RationalMap

/-- A partial map as a rational map. -/
def PartialMap.toRationalMap (f : X.PartialMap Y) : X ‚§è Y := Quotient.mk _ f

/-- A scheme morphism as a rational map. -/
abbrev Hom.toRationalMap (f : X.Hom Y) : X ‚§è Y := f.toPartialMap.toRationalMap

variable (S) in
/-- A rational map is a `S`-map if some partial map in the equivalence class is a `S`-map. -/
class RationalMap.IsOver [X.Over S] [Y.Over S] (f : X ‚§è Y) : Prop where
  exists_partialMap_over : ‚àÉ g : X.PartialMap Y, g.IsOver S ‚àß g.toRationalMap = f

lemma PartialMap.toRationalMap_surjective : Function.Surjective (@toRationalMap X Y) :=
  Quotient.exists_rep

lemma RationalMap.exists_rep (f : X ‚§è Y) : ‚àÉ g : X.PartialMap Y, g.toRationalMap = f :=
  Quotient.exists_rep f

lemma PartialMap.toRationalMap_eq_iff {f g : X.PartialMap Y} :
    f.toRationalMap = g.toRationalMap ‚Üî f.equiv g :=
  Quotient.eq

@[simp]
lemma PartialMap.restrict_toRationalMap (f : X.PartialMap Y) (U : X.Opens)
    (hU : Dense (U : Set X)) (hU' : U ‚â§ f.domain) :
    (f.restrict U hU hU').toRationalMap = f.toRationalMap :=
  toRationalMap_eq_iff.mpr (f.restrict_equiv U hU hU')

instance [X.Over S] [Y.Over S] (f : X.PartialMap Y) [f.IsOver S] : f.toRationalMap.IsOver S :=
  ‚ü®f, ‚Äπ_‚Ä∫, rfl‚ü©

variable (S) in
lemma RationalMap.exists_partialMap_over [X.Over S] [Y.Over S] (f : X ‚§è Y) [f.IsOver S] :
    ‚àÉ g : X.PartialMap Y, g.IsOver S ‚àß g.toRationalMap = f :=
  IsOver.exists_partialMap_over

/-- The composition of a rational map and a morphism on the right. -/
def RationalMap.compHom (f : X ‚§è Y) (g : Y ‚ü∂ Z) : X ‚§è Z := by
  refine Quotient.map (PartialMap.compHom ¬∑ g) ?_ f
  intro f‚ÇÅ f‚ÇÇ ‚ü®W, hW, hWl, hWr, e‚ü©
  refine ‚ü®W, hW, hWl, hWr, ?_‚ü©
  simp only [PartialMap.restrict_domain, PartialMap.restrict_hom, PartialMap.compHom_domain,
    PartialMap.compHom_hom] at e ‚ä¢
  rw [reassoc_of% e]

@[simp]
lemma RationalMap.compHom_toRationalMap (f : X.PartialMap Y) (g : Y ‚ü∂ Z) :
    (f.compHom g).toRationalMap = f.toRationalMap.compHom g := rfl

instance [X.Over S] [Y.Over S] [Z.Over S] (f : X ‚§è Y) (g : Y ‚ü∂ Z)
    [f.IsOver S] [g.IsOver S] : (f.compHom g).IsOver S where
  exists_partialMap_over := by
    obtain ‚ü®f, hf, rfl‚ü© := f.exists_partialMap_over S
    exact ‚ü®f.compHom g, inferInstance, rfl‚ü©

variable (S) in
lemma PartialMap.exists_restrict_isOver [X.Over S] [Y.Over S] (f : X.PartialMap Y)
    [f.toRationalMap.IsOver S] : ‚àÉ U hU hU', (f.restrict U hU hU').IsOver S := by
  obtain ‚ü®f', hf‚ÇÅ, hf‚ÇÇ‚ü© := RationalMap.IsOver.exists_partialMap_over (S := S) (f := f.toRationalMap)
  obtain ‚ü®U, hU, hUl, hUr, e‚ü© := PartialMap.toRationalMap_eq_iff.mp hf‚ÇÇ
  exact ‚ü®U, hU, hUr, by rw [IsOver, ‚Üê e]; infer_instance‚ü©

lemma RationalMap.isOver_iff [X.Over S] [Y.Over S] {f : X ‚§è Y} :
    f.IsOver S ‚Üî f.compHom (Y ‚Üò S) = (X ‚Üò S).toRationalMap := by
  constructor
  ¬∑ intro h
    obtain ‚ü®g, hg, e‚ü© := f.exists_partialMap_over S
    rw [‚Üê e, Hom.toRationalMap, ‚Üê compHom_toRationalMap, PartialMap.isOver_iff_eq_restrict.mp hg,
      PartialMap.restrict_toRationalMap]
  ¬∑ intro e
    obtain ‚ü®f, rfl‚ü© := PartialMap.toRationalMap_surjective f
    obtain ‚ü®U, hU, hUl, hUr, e‚ü© := PartialMap.toRationalMap_eq_iff.mp e
    exact ‚ü®‚ü®f.restrict U hU hUl, by simpa using e, by simp‚ü©‚ü©

lemma PartialMap.isOver_toRationalMap_iff_of_isSeparated [X.Over S] [Y.Over S] [IsReduced X]
    [S.IsSeparated] {f : X.PartialMap Y} :
    f.toRationalMap.IsOver S ‚Üî f.IsOver S := by
  refine ‚ü®fun _ ‚Ü¶ ?_, fun _ ‚Ü¶ inferInstance‚ü©
  obtain ‚ü®U, hU, hU', H‚ü© := f.exists_restrict_isOver (S := S)
  rw [isOver_iff]
  have : IsDominant (X.homOfLE hU') := Opens.isDominant_homOfLE hU _
  exact ext_of_isDominant (Œπ := X.homOfLE hU') (by simpa using H.1)

section functionField

/-- A rational map restricts to a map from `Spec K(X)`. -/
noncomputable
def RationalMap.fromFunctionField [IrreducibleSpace X] (f : X ‚§è Y) :
    Spec X.functionField ‚ü∂ Y := by
  refine Quotient.lift PartialMap.fromFunctionField ?_ f
  intro f g ‚ü®W, hW, hWl, hWr, e‚ü©
  have : f.restrict W hW hWl = g.restrict W hW hWr := by ext1; rfl; rw [e]; simp
  rw [‚Üê f.fromFunctionField_restrict hW hWl, this, g.fromFunctionField_restrict]

@[simp]
lemma RationalMap.fromFunctionField_toRationalMap [IrreducibleSpace X] (f : X.PartialMap Y) :
    f.toRationalMap.fromFunctionField = f.fromFunctionField := rfl

/--
Given `S`-schemes `X` and `Y` such that `Y` is locally of finite type and `X` is integral,
any `S`-morphism `Spec K(X) ‚ü∂ Y` spreads out to a rational map from `X` to `Y`.
-/
noncomputable
def RationalMap.ofFunctionField [IsIntegral X] [LocallyOfFiniteType sY]
    (f : Spec X.functionField ‚ü∂ Y) (h : f ‚â´ sY = X.fromSpecStalk _ ‚â´ sX) : X ‚§è Y :=
  (PartialMap.ofFromSpecStalk sX sY f h).toRationalMap

lemma RationalMap.fromFunctionField_ofFunctionField [IsIntegral X] [LocallyOfFiniteType sY]
    (f : Spec X.functionField ‚ü∂ Y) (h : f ‚â´ sY = X.fromSpecStalk _ ‚â´ sX) :
    (ofFunctionField sX sY f h).fromFunctionField = f :=
  PartialMap.fromSpecStalkOfMem_ofFromSpecStalk sX sY _ _

lemma RationalMap.eq_of_fromFunctionField_eq [IsIntegral X] (f g : X.RationalMap Y)
    (H : f.fromFunctionField = g.fromFunctionField) : f = g := by
    obtain ‚ü®f, rfl‚ü© := f.exists_rep
    obtain ‚ü®g, rfl‚ü© := g.exists_rep
    refine PartialMap.toRationalMap_eq_iff.mpr ?_
    exact PartialMap.equiv_of_fromSpecStalkOfMem_eq _ _ _ _ H

/--
Given `S`-schemes `X` and `Y` such that `Y` is locally of finite type and `X` is integral,
`S`-morphisms `Spec K(X) ‚ü∂ Y` correspond bijectively to `S`-rational maps from `X` to `Y`.
-/
noncomputable
def RationalMap.equivFunctionField [IsIntegral X] [LocallyOfFiniteType sY] :
    { f : Spec X.functionField ‚ü∂ Y // f ‚â´ sY = X.fromSpecStalk _ ‚â´ sX } ‚âÉ
      { f : X ‚§è Y // f.compHom sY = sX.toRationalMap } where
  toFun f := ‚ü®.ofFunctionField sX sY f f.2, PartialMap.toRationalMap_eq_iff.mpr
      ‚ü®_, PartialMap.dense_domain _, le_rfl, le_top, by simp [PartialMap.ofFromSpecStalk_comp]‚ü©‚ü©
  invFun f := ‚ü®f.1.fromFunctionField, by
    obtain ‚ü®f, hf‚ü© := f
    obtain ‚ü®f, rfl‚ü© := f.exists_rep
    simpa [fromFunctionField_toRationalMap] using congr(RationalMap.fromFunctionField $hf)‚ü©
  left_inv f := Subtype.ext (RationalMap.fromFunctionField_ofFunctionField _ _ _ _)
  right_inv f := Subtype.ext (RationalMap.eq_of_fromFunctionField_eq
      (ofFunctionField sX sY f.1.fromFunctionField _) f
      (RationalMap.fromFunctionField_ofFunctionField _ _ _ _))

/--
Given `S`-schemes `X` and `Y` such that `Y` is locally of finite type and `X` is integral,
`S`-morphisms `Spec K(X) ‚ü∂ Y` correspond bijectively to `S`-rational maps from `X` to `Y`.
-/
noncomputable
def RationalMap.equivFunctionFieldOver [X.Over S] [Y.Over S] [IsIntegral X]
    [LocallyOfFiniteType (Y ‚Üò S)] :
    { f : Spec X.functionField ‚ü∂ Y // f.IsOver S } ‚âÉ { f : X ‚§è Y // f.IsOver S } :=
  ((Equiv.subtypeEquivProp (by simp only [Hom.isOver_iff]; rfl)).trans
    (RationalMap.equivFunctionField (X ‚Üò S) (Y ‚Üò S))).trans
      (Equiv.subtypeEquivProp (by ext f; rw [RationalMap.isOver_iff]))

end functionField

section domain

/-- The domain of definition of a rational map. -/
def RationalMap.domain (f : X ‚§è Y) : X.Opens :=
  sSup { PartialMap.domain g | (g) (_ : g.toRationalMap = f) }

lemma PartialMap.le_domain_toRationalMap (f : X.PartialMap Y) :
    f.domain ‚â§ f.toRationalMap.domain :=
  le_sSup ‚ü®f, rfl, rfl‚ü©

lemma RationalMap.mem_domain {f : X ‚§è Y} {x} :
    x ‚àà f.domain ‚Üî ‚àÉ g : X.PartialMap Y, x ‚àà g.domain ‚àß g.toRationalMap = f :=
  TopologicalSpace.Opens.mem_sSup.trans (by simp [@and_comm (x ‚àà _)])

lemma RationalMap.dense_domain (f : X ‚§è Y) : Dense (X := X) f.domain :=
  f.inductionOn (fun g ‚Ü¶ g.dense_domain.mono g.le_domain_toRationalMap)

/-- The open cover of the domain of `f : X ‚§è Y`,
consisting of all the domains of the partial maps in the equivalence class. -/
noncomputable
def RationalMap.openCoverDomain (f : X ‚§è Y) : f.domain.toScheme.OpenCover where
  J := { PartialMap.domain g | (g) (_ : g.toRationalMap = f) }
  obj U := U.1.toScheme
  map U := X.homOfLE (le_sSup U.2)
  f x := ‚ü®_, (TopologicalSpace.Opens.mem_sSup.mp x.2).choose_spec.1‚ü©
  covers x := ‚ü®‚ü®x.1, (TopologicalSpace.Opens.mem_sSup.mp x.2).choose_spec.2‚ü©, Subtype.ext (by simp)‚ü©

/-- If `f : X ‚§è Y` is a rational map from a reduced scheme to a separated scheme,
then `f` can be represented as a partial map on its domain of definition. -/
noncomputable
def RationalMap.toPartialMap [IsReduced X] [Y.IsSeparated] (f : X ‚§è Y) : X.PartialMap Y := by
  refine ‚ü®f.domain, f.dense_domain, f.openCoverDomain.glueMorphisms
    (fun x ‚Ü¶ (X.isoOfEq x.2.choose_spec.2).inv ‚â´ x.2.choose.hom) ?_‚ü©
  intros x y
  let g (x : f.openCoverDomain.J) := x.2.choose
  have hg‚ÇÅ (x) : (g x).toRationalMap = f := x.2.choose_spec.1
  have hg‚ÇÇ (x) : (g x).domain = x.1 := x.2.choose_spec.2
  refine (cancel_epi (isPullback_opens_inf_le (le_sSup x.2) (le_sSup y.2)).isoPullback.hom).mp ?_
  simp only [openCoverDomain, IsPullback.isoPullback_hom_fst_assoc,
    IsPullback.isoPullback_hom_snd_assoc]
  show _ ‚â´ _ ‚â´ (g x).hom = _ ‚â´ _ ‚â´ (g y).hom
  simp_rw [‚Üê cancel_epi (X.isoOfEq congr($(hg‚ÇÇ x) ‚äì $(hg‚ÇÇ y))).hom, ‚Üê Category.assoc]
  convert (PartialMap.equiv_iff_of_isSeparated (S := ‚ä§_ _) (f := g x) (g := g y)).mp ?_ using 1
  ¬∑ dsimp; congr 1; simp [g, ‚Üê cancel_mono (Opens.Œπ _)]
  ¬∑ dsimp; congr 1; simp [g, ‚Üê cancel_mono (Opens.Œπ _)]
  ¬∑ rw [‚Üê PartialMap.toRationalMap_eq_iff, hg‚ÇÅ, hg‚ÇÅ]

lemma PartialMap.toPartialMap_toRationalMap_restrict [IsReduced X] [Y.IsSeparated]
    (f : X.PartialMap Y) : (f.toRationalMap.toPartialMap.restrict _ f.dense_domain
      f.le_domain_toRationalMap).hom = f.hom := by
  dsimp [RationalMap.toPartialMap]
  refine (f.toRationalMap.openCoverDomain.Œπ_glueMorphisms _ _ ‚ü®_, f, rfl, rfl‚ü©).trans ?_
  generalize_proofs _ _ H _
  have : H.choose = f := (equiv_iff_of_domain_eq_of_isSeparated (S := ‚ä§_ _) H.choose_spec.2).mp
    (toRationalMap_eq_iff.mp H.choose_spec.1)
  exact ((ext_iff _ _).mp this.symm).choose_spec.symm

@[simp]
lemma RationalMap.toRationalMap_toPartialMap [IsReduced X] [Y.IsSeparated]
    (f : X ‚§è Y) : f.toPartialMap.toRationalMap = f := by
  obtain ‚ü®f, rfl‚ü© := PartialMap.toRationalMap_surjective f
  trans (f.toRationalMap.toPartialMap.restrict _
    f.dense_domain f.le_domain_toRationalMap).toRationalMap
  ¬∑ simp
  ¬∑ congr 1
    exact PartialMap.ext _ f rfl (by simpa using f.toPartialMap_toRationalMap_restrict)

instance [IsReduced X] [Y.IsSeparated] [S.IsSeparated] [X.Over S] [Y.Over S]
    (f : X ‚§è Y) [f.IsOver S] : f.toPartialMap.IsOver S := by
  rw [‚Üê PartialMap.isOver_toRationalMap_iff_of_isSeparated, f.toRationalMap_toPartialMap]
  infer_instance

end domain

end Scheme

end AlgebraicGeometry
