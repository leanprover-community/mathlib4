/-
Copyright (c) 2023 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang
-/

import Mathlib.AlgebraicGeometry.PrimeSpectrum.Basic
import Mathlib.AlgebraicGeometry.StructureSheaf
import Mathlib.RingTheory.Artinian
import Mathlib.Topology.Sheaves.SheafCondition.EqualizerProducts
import Mathlib.Algebra.Category.Ring.Constructions
import Mathlib.Algebra.Module.Length
import Mathlib.RingTheory.KrullDimension

/-!
# Properties of Artinian Rings

- `IsArtinianRing.equivProdLocalization` : if `R` is an artinian ring, then `R` is isomorphic to
  product of all its prime localizations
- Artinian rings are Noetherian.

## Implementations notes

The proof here probably does not generalize to non-commutative cases.

-/

open TopologicalSpace AlgebraicGeometry Opposite CategoryTheory

open BigOperators

universe u
variable (R : Type u) [CommRing R]

section zeroDimensionalAndFinite

variable [dim0 : Fact <| ringKrullDim R = 0] [Finite (PrimeSpectrum R)]

instance t1_space_of_dim_zero : T1Space (PrimeSpectrum R) where
  t1 p := PrimeSpectrum.isClosed_singleton_iff_isMaximal _ |>.mpr <|
    p.IsPrime.isMaximal_of_dim_zero dim0.out

instance discrete_of_dim_zero : DiscreteTopology (PrimeSpectrum R) := discrete_of_t1_of_finite


variable {R}

/--
Cover of Spec of an artinian ring by singleton sets.
-/
@[simps]
def openCover (i : PrimeSpectrum R) : Opens (PrimeSpectrum R) :=
  ‚ü®{i}, by continuity‚ü©

lemma openCover.pairwiseDisjoint (i j : PrimeSpectrum R) (hij : i ‚â† j) :
    openCover i ‚äì openCover j = ‚ä• := by
  ext p
  simp only [ge_iff_le, Opens.coe_inf, Set.mem_inter_iff, SetLike.mem_coe, Opens.coe_bot,
    Set.mem_empty_iff_false, iff_false, not_and]
  intro hp
  rw [Set.mem_singleton_iff.mp hp]
  contrapose! hij
  ext1
  rw [Set.mem_singleton_iff.mp hij]

variable (R) in
lemma openCover.is_cover : ‚®Ü (i : PrimeSpectrum R), openCover i = ‚ä§ :=
  eq_top_iff.mpr <| fun p _ ‚Ü¶ by simp

instance (i : PrimeSpectrum R) : Unique (openCover i) where
  default := ‚ü®i, by simp [openCover]‚ü©
  uniq p := Subtype.ext <| by rw [Set.mem_singleton_iff.mp p.2]; rfl

/--
ùí™(Spec R) = ‚àè·µ¢ R·µ¢ where `i` runs through prime ideals.
-/
noncomputable def sectionsOnOpenCover (i : PrimeSpectrum R) :
    (Spec.structureSheaf R).presheaf.obj (op <| openCover i) ‚âÖ
    CommRingCat.of <| Localization.AtPrime i.asIdeal :=
  let e (x : openCover i) :  Localization.AtPrime i.asIdeal ‚âÉ+* Localization.AtPrime x.1.asIdeal :=
    IsLocalization.ringEquivOfRingEquiv
      (S := Localization.AtPrime i.asIdeal)
      (Q := Localization.AtPrime x.1.asIdeal)
      (M := i.asIdeal.primeCompl) (T := x.1.asIdeal.primeCompl) (RingEquiv.refl R) <| by
      rw [Set.mem_singleton_iff.mp x.2]; simp
  RingEquiv.toCommRingCatIso
  { toFun := fun f ‚Ü¶ f.1 ‚ü®i, by simp only [openCover, unop_op]; exact Set.mem_singleton _‚ü©
    invFun := fun q ‚Ü¶ ‚ü®fun x ‚Ü¶ e _ q, fun x ‚Ü¶ by
        simp_rw [Set.mem_singleton_iff.mp x.2]
        induction' q using Localization.induction_on with d
        rcases d with ‚ü®r, ‚ü®s, hs‚ü©‚ü©
        refine ‚ü®(openCover i), Set.mem_singleton _, ùüô _, r, s, fun p ‚Ü¶ ‚ü®?_, ?_‚ü©‚ü©
        ¬∑ rw [Set.mem_singleton_iff.mp p.2]; exact hs
        ¬∑ dsimp [e]
          rw [Localization.mk_eq_mk', IsLocalization.map_mk']
          erw [IsLocalization.mk'_spec]
          rfl‚ü©
    left_inv := by
      rintro ‚ü®f, hf‚ü©
      simp only [unop_op, StructureSheaf.isLocallyFraction_pred, id_eq,
        IsLocalization.ringEquivOfRingEquiv_apply, RingEquiv.coe_ringHom_refl, e]
      refine Subtype.ext <| funext fun (x : openCover i) ‚Ü¶ ?_
      simp only [unop_op]
      have eq1 : x = (‚ü®i, by simp [openCover]‚ü© : openCover i) := Subsingleton.elim _ _
      rw [eq1]
      simp only [IsLocalization.map_id]
    right_inv := by
      intro p
      simp only [unop_op, id_eq, IsLocalization.ringEquivOfRingEquiv_apply,
        RingEquiv.coe_ringHom_refl, IsLocalization.map_id, e]
    map_mul' := fun x y ‚Ü¶ by
      simp only [unop_op, StructureSheaf.isLocallyFraction_pred, id_eq]
      rfl
    map_add' := fun x y ‚Ü¶ by
      simp only [unop_op, StructureSheaf.isLocallyFraction_pred, id_eq]
      rfl }

variable (R) in
lemma globalSectionsEquivProd : Nonempty <|
    (Spec.structureSheaf R).presheaf.obj (op ‚ä§) ‚âÖ
    ‚àè fun (i : PrimeSpectrum R) ‚Ü¶ CommRingCat.of (Localization.AtPrime i.asIdeal) := by
  refine (Spec.structureSheaf R).sections_on_disjoint_opens_iso_product (openCover (R := R))
    openCover.pairwiseDisjoint |>.map fun e ‚Ü¶ ?_ ‚â™‚â´ e ‚â™‚â´ ?_
  ¬∑ fconstructor
    ¬∑ exact (Spec.structureSheaf R).presheaf.map (Quiver.Hom.op <| homOfLE le_top)
    ¬∑ exact (Spec.structureSheaf R).presheaf.map
        (Quiver.Hom.op <| homOfLE <| eq_top_iff.mp <| openCover.is_cover R)
    ¬∑ aesop_cat
    ¬∑ aesop_cat
  ¬∑ fconstructor
    ¬∑ exact Limits.Pi.map fun p ‚Ü¶ (sectionsOnOpenCover p).hom
    ¬∑ exact Limits.Pi.map fun p ‚Ü¶ (sectionsOnOpenCover p).inv
    ¬∑ aesop_cat
    ¬∑ aesop_cat

lemma equivProdLocalization' : Nonempty <|
    R ‚âÉ+* ((i : PrimeSpectrum R) ‚Üí Localization.AtPrime i.asIdeal) := by
  refine globalSectionsEquivProd R |>.map fun e ‚Ü¶
    RingEquiv.ofHomInv (?_ : R ‚Üí+* ((i : PrimeSpectrum R) ‚Üí Localization.AtPrime i.asIdeal))
      (?_ : ((i : PrimeSpectrum R) ‚Üí Localization.AtPrime i.asIdeal) ‚Üí+* R) ?_ ?_
  ¬∑ exact (CommRingCat.piIsoPi _ |>.hom)
      |>.comp e.hom |>.comp (StructureSheaf.globalSectionsIso R).hom
  ¬∑ exact (StructureSheaf.globalSectionsIso R).inv |>.comp e.inv |>.comp
      (CommRingCat.piIsoPi
        fun (i : PrimeSpectrum R) ‚Ü¶ CommRingCat.of <| Localization.AtPrime i.asIdeal).inv
  ¬∑ refine RingHom.ext fun r ‚Ü¶ ?_
    simp only [CommRingCat.coe_of, StructureSheaf.globalSectionsIso_inv, RingHom.coe_comp,
      RingHom.coe_coe, Function.comp_apply, RingHom.id_apply]
    erw [‚Üê comp_apply, ‚Üê comp_apply, ‚Üê comp_apply, ‚Üê comp_apply, ‚Üê comp_apply,
      Iso.hom_inv_id_assoc, e.hom_inv_id_assoc, Iso.hom_inv_id]
    rfl
  ¬∑ refine RingHom.ext fun r ‚Ü¶ ?_
    simp only [CommRingCat.coe_of, StructureSheaf.globalSectionsIso_inv, RingHom.coe_comp,
      RingHom.coe_coe, Function.comp_apply, RingHom.id_apply]
    erw [‚Üê comp_apply, ‚Üê comp_apply, ‚Üê comp_apply, ‚Üê comp_apply, ‚Üê comp_apply,
      (StructureSheaf.globalSectionsIso R).inv_hom_id_assoc, e.inv_hom_id_assoc, Iso.inv_hom_id]
    rfl

/--
If $R$ is an artinian ring, then $R \cong \prod_{\mathfrak{p}}R_{\mathfrak{p}}$
-/
noncomputable def equivProdLocalization :
    R ‚âÉ+* ((i : PrimeSpectrum R) ‚Üí Localization.AtPrime i.asIdeal) :=
  Classical.choice equivProdLocalization'

end zeroDimensionalAndFinite

section zeroDimensionalAndNoetherianLocal

lemma maximalIdeal_locally_nilpotent_of_zero_dimensional_local_ring
    [LocalRing R] (dim0 : ringKrullDim R = 0)
    (x : R) (hx : x ‚àà LocalRing.maximalIdeal R) : ‚àÉ (n : ‚Ñï), x ^ n = 0 := by
  suffices eq1 : LocalRing.maximalIdeal R = nilradical R by
    rw [eq1] at hx; exact hx
  rw [nilradical_eq_sInf]
  rw [show sInf {J : Ideal R | Ideal.IsPrime J} = sInf {J : Ideal R | Ideal.IsMaximal J} by
    ¬∑ congr 1
      ext J
      exact ‚ü®fun h ‚Ü¶ Ideal.IsPrime.isMaximal_of_dim_zero h dim0, Ideal.IsMaximal.isPrime‚ü©,
    show {J : Ideal R | Ideal.IsMaximal J} = {LocalRing.maximalIdeal R} by
    ¬∑ ext J
      simp only [Set.mem_setOf_eq, Set.mem_singleton_iff]
      exact ‚ü®fun h ‚Ü¶ LocalRing.eq_maximalIdeal h,
        by rintro rfl; exact LocalRing.maximalIdeal.isMaximal R‚ü©]
  simp only [csInf_singleton]

lemma _root_.Ideal.pow_eq_span (n : ‚Ñï) (I : Ideal R) :
    I ^ n =
    Ideal.span { r : R | ‚àÉ s : Fin n ‚Üí I, r = ‚àè i : Fin n, (s i).1 } := by
  symm
  induction' n with n ih
  ¬∑ simp

  refine Submodule.span_eq_of_le _ ?_ ?_
  ¬∑ rintro _ ‚ü®s, hs, rfl‚ü©
    rw [Fin.prod_univ_succ, pow_succ', ‚Üê ih]
    exact Ideal.mul_mem_mul (s 0).2 (Submodule.subset_span ‚ü®_, rfl‚ü©)
  ¬∑ rw [pow_succ']
    change Submodule.map‚ÇÇ _ I (I ^ n) ‚â§ _
    rw [Submodule.map‚ÇÇ_le]
    intro r hr s hs
    simp only [LinearMap.mul_apply', Ideal.submodule_span_eq]
    rw [‚Üê ih] at hs
    refine Submodule.span_induction hs ?_ ?_ ?_ ?_
    ¬∑ rintro _ ‚ü®t, rfl‚ü©
      refine Ideal.subset_span ‚ü®Fin.cons ‚ü®r, hr‚ü© t, ?_‚ü©
      conv_rhs => rw [Fin.prod_univ_succ]
      simp
    ¬∑ simp
    ¬∑ intro t‚ÇÅ t‚ÇÇ h‚ÇÅ h‚ÇÇ
      rw [mul_add]
      exact Submodule.add_mem _ h‚ÇÅ h‚ÇÇ
    ¬∑ intro t x hx
      rw [smul_eq_mul, ‚Üê mul_assoc, mul_comm r t, mul_assoc]
      exact Ideal.mul_mem_left _ _ hx

lemma IsNoetherianRing.pow_le_of_le_radical [noeth : IsNoetherianRing R] (I J : Ideal R)
    (hIJ : I ‚â§ J.radical) : ‚àÉ (n : ‚Ñï), I ^ n ‚â§ J := by
  classical
  obtain ‚ü®S, rfl‚ü© := isNoetherianRing_iff_ideal_fg _ |>.mp noeth I
  induction' S using Finset.induction with r S _ ih
  ¬∑ simp only [Finset.coe_empty, Ideal.span_empty]
    exact ‚ü®1, by simp‚ü©
  ¬∑ simp only [Finset.coe_insert, Ideal.span_insert, sup_le_iff] at hIJ ‚ä¢
    obtain ‚ü®n, hn‚ü© := ih hIJ.2
    rw [Ideal.span_le, Ideal.span_le] at hIJ
    simp only [Set.singleton_subset_iff, SetLike.mem_coe] at hIJ
    obtain ‚ü®m, hm‚ü© := hIJ.1
    refine ‚ü®n + m, ?_‚ü©
    rw [Ideal.pow_eq_span, Ideal.span_le]
    rintro _ ‚ü®t, rfl‚ü©
    have H (i : Fin (n + m)) : (t i).1 ‚àà Ideal.span {r} ‚äî Ideal.span S := (t i).2
    simp_rw [Ideal.mem_span_singleton_sup] at H
    choose a b hab1 hab2 using H

    simp_rw [‚Üê hab2]
    rw [Finset.prod_add]
    refine Ideal.sum_mem _ fun s _ ‚Ü¶ ?_
    by_cases s_eq : m ‚â§ s.card
    ¬∑ refine Ideal.mul_mem_right _ _ ?_
      rw [Finset.prod_mul_distrib]
      simp only [Finset.prod_const]
      refine Ideal.mul_mem_left _ _ ?_
      rw [show s.card = m + (s.card - m) by rw [Nat.add_sub_cancel' s_eq], pow_add]
      exact Ideal.mul_mem_right _ _ (by assumption)

    ¬∑ refine Ideal.mul_mem_left _ _ ?_
      simp only [not_le] at s_eq
      have s_eq' : n ‚â§ Finset.card (Finset.univ \ s) := by
        simp only [Finset.subset_univ, Finset.card_sdiff, Finset.card_fin]
        rw [Nat.add_sub_assoc (le_of_lt s_eq)]
        norm_num
      let e := (Finset.univ \ s).equivFin

      rw [‚Üê Finset.prod_attach,
        show ‚àè a in (Finset.univ \ s).attach, b a =
          ‚àè a : Fin ((Finset.univ \ s).card), b (e.symm a) by
        rw [Finset.prod_equiv e] <;> aesop]

      have eq0 : (Finset.univ \ s).card = n + ((Finset.univ \ s).card - n) :=
        Nat.add_sub_cancel' s_eq' |>.symm
      let e' := finCongr eq0
      rw [show ‚àè a : Fin ((Finset.univ \ s).card), b (e.symm a) =
        ‚àè a : Fin (n + ((Finset.univ \ s).card - n)), b (e.symm <| e'.symm a) by
          rw [Finset.prod_equiv e']
          ¬∑ simp
          ¬∑ intro i
            simp only [Finset.mem_univ, finCongr_symm, forall_true_left]
            congr,
        Fin.prod_univ_add]
      refine Ideal.mul_mem_right _ _ <| hn ?_
      rw [Ideal.pow_eq_span]
      set g : Fin n ‚Üí R := _
      change ‚àè i : Fin n, g i ‚àà _
      exact Ideal.subset_span ‚ü®fun i ‚Ü¶ ‚ü®g i, hab1 _‚ü©, rfl‚ü©

lemma IsNoetherianRing.nilpotent_maximalIdeal_of_zero_dimensional_localRing
    [noeth : IsNoetherianRing R] [LocalRing R] (dim0 : ringKrullDim R = 0) :
    IsNilpotent (LocalRing.maximalIdeal R) := by
  obtain ‚ü®n, hn‚ü© := IsNoetherianRing.pow_le_of_le_radical R (LocalRing.maximalIdeal R) ‚ä•
    (fun r hr ‚Ü¶ maximalIdeal_locally_nilpotent_of_zero_dimensional_local_ring R dim0 r hr)
  exact ‚ü®n, by simpa using hn‚ü©

end zeroDimensionalAndNoetherianLocal


noncomputable section local_ring

namespace local_ring_with_nilpotent_maximal_ideal

variable [LocalRing R] [Nontrivial R]
variable [maximalIdeal_nilpotent : Fact <| IsNilpotent <| LocalRing.maximalIdeal (R := R)]

local notation "ùìÇ" => LocalRing.maximalIdeal (R := R)
local notation "Œ∫" => LocalRing.ResidueField (R := R)

/--
Maximal ideal of an artinian local ring is nilpotent.
-/
lemma exists_K : ‚àÉ K : ‚Ñï, ùìÇ ^ K = 0 := maximalIdeal_nilpotent.out

/--
Let `K` be the smallest number such that `ùìÇ ^ K = 0`
-/
def K : ‚Ñï := exists_K R |>.choose
lemma K_spec : ùìÇ ^ K R = 0 := exists_K R |>.choose_spec

/--
Construct a series by `0 ‚â§ ùìÇ·µè‚Åª¬π ‚â§ ùìÇ·µè‚Åª¬≤ ‚â§ ... ‚â§ ùìÇ ‚â§ R`
-/
@[simps]
def series : RelSeries ((¬∑ ‚â§ ¬∑) : Ideal R ‚Üí Ideal R ‚Üí Prop) where
  length := K R
  toFun i := ùìÇ ^ (K R - i.1)
  step i := by
    simp only [Fin.coe_castSucc, Fin.val_succ]
    apply Ideal.pow_le_pow_right
    apply Nat.sub_le_sub_left
    norm_num

@[simp] lemma series_head : (series R).head = 0 := show ùìÇ ^ (K R - 0) = 0 from by
  simp [K_spec]

@[simp] lemma series_last : (series R).last = ‚ä§ := show ùìÇ ^ (K R - K R) = ‚ä§ from by
  simp

/--
Define the action of `R ‚ß∏ ùìÇ` on `ùìÇ‚Åø ‚ß∏ ùìÇ‚Åø‚Å∫¬π` by `[r] ‚Ä¢ [x] = [r ‚Ä¢ x]`
-/
def residualFieldActionOnQF (i : Fin (K R)) : Œ∫ ‚Üí‚Çó[R] Module.End R ((series R).qf i) :=
  Submodule.liftQ _ (LinearMap.lsmul _ _) fun r hr ‚Ü¶ by
    simp only [series_length, series_toFun, Fin.val_succ, Fin.coe_castSucc, LinearMap.mem_ker]
    ext m
    simp only [LinearMap.lsmul_apply, LinearMap.zero_apply]
    induction' m using Quotient.inductionOn' with m
    simp only [series_length, series_toFun, Fin.val_succ, Fin.coe_castSucc,
      Submodule.Quotient.mk''_eq_mk]
    change Submodule.Quotient.mk (r ‚Ä¢ m) = 0
    rw [Submodule.Quotient.mk_eq_zero]
    simp only [series_length, series_toFun, Fin.val_succ, Submodule.mem_comap, map_smul‚Çõ‚Çó,
      RingHom.id_apply, Submodule.coeSubtype, smul_eq_mul]
    have mem1 := m.2
    simp only [series_length, series_toFun, Fin.val_succ] at mem1
    have eq1 : ùìÇ ^ (K R - i) = ùìÇ * ùìÇ ^ (K R - (i + 1)) := by
      conv_rhs => lhs; rw [show ùìÇ = ùìÇ ^ 1 from pow_one _ |>.symm]
      rw [‚Üê pow_add, add_comm]
      congr
      rw [Nat.sub_add_eq, Nat.sub_add_cancel]
      apply Nat.sub_pos_of_lt i.2
    rw [eq1]
    refine Ideal.mul_mem_mul hr mem1

instance (i : Fin (K R)) : Module Œ∫ ((series R).qf i) where
  smul x := residualFieldActionOnQF R i x
  one_smul x := by
    change residualFieldActionOnQF R i 1 x = x
    induction' x using Quotient.inductionOn' with x
    erw [Submodule.liftQ_apply]
    simp
  mul_smul a b x := by
    change residualFieldActionOnQF R i (a * b) x = residualFieldActionOnQF R i a
      (residualFieldActionOnQF R i b x)
    induction' x using Quotient.inductionOn' with x
    induction' a using Quotient.inductionOn' with a
    induction' b using Quotient.inductionOn' with b
    delta residualFieldActionOnQF
    simp only [series_length, series_toFun, Fin.val_succ, Fin.coe_castSucc,
      Submodule.Quotient.mk''_eq_mk, Ideal.Quotient.mk_eq_mk]
    erw [Submodule.liftQ_apply, Submodule.liftQ_apply, Submodule.liftQ_apply]
    simp only [series_length, series_toFun, Fin.val_succ, Fin.coe_castSucc, LinearMap.lsmul_apply,
      map_smul]
    rw [mul_comm, mul_smul]
  smul_zero a := by
    change residualFieldActionOnQF R i a 0 = 0
    induction' a using Quotient.inductionOn' with a
    delta residualFieldActionOnQF
    simp
  smul_add a x y := by
    change residualFieldActionOnQF R i a (x + y) = residualFieldActionOnQF R i a x +
      residualFieldActionOnQF R i a y
    delta residualFieldActionOnQF
    induction' x using Quotient.inductionOn' with x
    induction' y using Quotient.inductionOn' with y
    induction' a using Quotient.inductionOn' with a
    simp
  add_smul a b x := by
    change residualFieldActionOnQF R i (a + b) x = residualFieldActionOnQF R i a x +
      residualFieldActionOnQF R i b x
    delta residualFieldActionOnQF
    induction' x using Quotient.inductionOn' with x
    induction' a using Quotient.inductionOn' with a
    induction' b using Quotient.inductionOn' with b
    simp
  zero_smul x := by
    change residualFieldActionOnQF R i 0 x = 0
    delta residualFieldActionOnQF
    induction' x using Quotient.inductionOn' with x
    simp

/--
A semilinear map from `ùìÇ‚Åø ‚ß∏ ùìÇ‚Åø‚Å∫¬π` as `R`-module to `ùìÇ‚Åø ‚ß∏ ùìÇ‚Åø‚Å∫¬π` as `R ‚ß∏ ùìÇ` module
-/
@[simps]
def qfEquiv_Œ∫R (i : Fin (K R)) : (series R).qf i ‚Üí‚Çõ‚Çó[algebraMap R Œ∫] (series R).qf i :=
{ toFun := id
  map_add' := fun _ _ ‚Ü¶ rfl
  map_smul' := fun r m ‚Ü¶ by
    induction' m using Quotient.inductionOn' with m
    simp only [series_length, series_toFun, Fin.val_succ, Fin.coe_castSucc,
      Submodule.Quotient.mk''_eq_mk, id_eq, LocalRing.ResidueField.algebraMap_eq]
    rfl }

instance : RingHomSurjective (algebraMap R Œ∫) where
  is_surjective := Submodule.mkQ_surjective _

/--
The `R ‚ß∏ ùìÇ`-submodules of `ùìÇ‚Åø ‚ß∏ ùìÇ‚Åø‚Å∫¬π` are exactly the same as the `R`-submodules of `ùìÇ‚Åø ‚ß∏ ùìÇ‚Åø‚Å∫¬π`.
-/
@[simps]
def qfSubmoduleAgree (i : Fin (K R)) :
    Submodule Œ∫ ((series R).qf i) ‚âÉo
    Submodule R ((series R).qf i) where
  toFun p := Submodule.comap (qfEquiv_Œ∫R R i) p
  invFun q := Submodule.map (qfEquiv_Œ∫R R i) q
  left_inv p := by
    simp only [series_length, series_toFun, Fin.val_succ, Fin.coe_castSucc]
    rw [Submodule.map_comap_eq_of_surjective]
    exact fun x ‚Ü¶ ‚ü®x, rfl‚ü©
  right_inv q := by
    simp only [series_length, series_toFun, Fin.val_succ, Fin.coe_castSucc]
    rw [Submodule.comap_map_eq_of_injective]
    exact fun _ _ h ‚Ü¶ h
  map_rel_iff' {p q} := by
    simp only [series_length, series_toFun, Fin.val_succ, Fin.coe_castSucc, Equiv.coe_fn_mk]
    fconstructor
    ¬∑ intro h x hx
      specialize h hx
      simpa only [Submodule.mem_comap, qfEquiv_Œ∫R_apply, id_eq] using h
    ¬∑ intro h x hx
      specialize h hx
      simpa using h

/--
The `R ‚ß∏ ùìÇ`-submodules of `ùìÇ‚Åø ‚ß∏ ùìÇ‚Åø‚Å∫¬π` are exactly the same as the `R`-submodules of `ùìÇ‚Åø ‚ß∏ ùìÇ‚Åø‚Å∫¬π`.
(reverse the order)
-/
@[simps!]
def qfSubmoduleAgree' (i : Fin (K R)) :
    Submodule Œ∫ ((series R).qf i)·µí·µà ‚âÉo
    Submodule R ((series R).qf i)·µí·µà :=
 OrderIso.trans
 { toFun := OrderDual.ofDual
   invFun := OrderDual.toDual
   left_inv := by intros p; rfl
   right_inv := by intros p; rfl
   map_rel_iff' := by intros; rfl } <| (qfSubmoduleAgree R i).trans
  { toFun := OrderDual.ofDual
    invFun := OrderDual.toDual
    left_inv := by intros p; rfl
    right_inv := by intros p; rfl
    map_rel_iff' := by intros; rfl }

instance qf_artinian_R [IsArtinianRing R] (i : Fin (K R)) : IsArtinian R ((series R).qf i) := by
  change IsArtinian R (_ ‚ß∏ _)
  infer_instance

instance qf_noetherian_R [IsNoetherianRing R] (i : Fin (K R)) :
    IsNoetherian R ((series R).qf i) := by
  change IsNoetherian R (_ ‚ß∏ _)
  infer_instance

lemma qf_artinian_Œ∫R_iff (i : Fin (K R)) :
    IsArtinian Œ∫ ((series R).qf i) ‚Üî IsArtinian R ((series R).qf i) := by
  rw [‚Üê monotone_stabilizes_iff_artinian, ‚Üê monotone_stabilizes_iff_artinian]
  fconstructor <;> intro h f
  ¬∑ let f' : ‚Ñï ‚Üío (Submodule Œ∫ ((series R).qf i))·µí·µà := OrderHom.comp ?_ f
    pick_goal 2
    ¬∑ fconstructor
      ¬∑ exact (qfSubmoduleAgree' R i).symm.toFun
      ¬∑ intro p q h
        exact (qfSubmoduleAgree' R i).symm.monotone h
    obtain ‚ü®n, hn‚ü© := h f'
    refine ‚ü®n, fun m hm ‚Ü¶ ?_‚ü©
    specialize hn m hm
    exact (qfSubmoduleAgree' R i).symm.injective hn
  ¬∑ let f' : ‚Ñï ‚Üío (Submodule R ((series R).qf i))·µí·µà := OrderHom.comp ?_ f
    pick_goal 2
    ¬∑ fconstructor
      ¬∑ exact (qfSubmoduleAgree' R i).toFun
      ¬∑ intro p q h
        exact (qfSubmoduleAgree' R i).monotone h
    obtain ‚ü®n, hn‚ü© := h f'
    refine ‚ü®n, fun m hm ‚Ü¶ ?_‚ü©
    specialize hn m hm
    exact (qfSubmoduleAgree' R i).injective hn

lemma qf_noetherian_Œ∫R_iff (i : Fin (K R)) :
    IsNoetherian Œ∫ ((series R).qf i) ‚Üî IsNoetherian R ((series R).qf i) := by
  rw [‚Üê monotone_stabilizes_iff_noetherian, ‚Üê monotone_stabilizes_iff_noetherian]
  fconstructor <;> intro h f
  ¬∑ let f' : ‚Ñï ‚Üío (Submodule Œ∫ ((series R).qf i)) := OrderHom.comp ?_ f
    pick_goal 2
    ¬∑ fconstructor
      ¬∑ exact (qfSubmoduleAgree R i).symm.toFun
      ¬∑ intro p q h
        exact (qfSubmoduleAgree R i).symm.monotone h
    obtain ‚ü®n, hn‚ü© := h f'
    refine ‚ü®n, fun m hm ‚Ü¶ ?_‚ü©
    specialize hn m hm
    exact (qfSubmoduleAgree' R i).symm.injective hn
  ¬∑ let f' : ‚Ñï ‚Üío (Submodule R ((series R).qf i)) := OrderHom.comp ?_ f
    pick_goal 2
    ¬∑ fconstructor
      ¬∑ exact (qfSubmoduleAgree R i).toFun
      ¬∑ intro p q h
        exact (qfSubmoduleAgree R i).monotone h
    obtain ‚ü®n, hn‚ü© := h f'
    refine ‚ü®n, fun m hm ‚Ü¶ ?_‚ü©
    specialize hn m hm
    exact (qfSubmoduleAgree' R i).injective hn

instance qf_artinian_Œ∫ [IsArtinianRing R] (i : Fin (K R)) : IsArtinian Œ∫ ((series R).qf i) :=
  qf_artinian_Œ∫R_iff R i |>.mpr inferInstance

instance qf_noetherian_Œ∫ [IsNoetherianRing R] (i : Fin (K R)) : IsNoetherian Œ∫ ((series R).qf i) :=
  qf_noetherian_Œ∫R_iff R i |>.mpr inferInstance

instance qf_finiteLength_Œ∫_of_artinian [IsArtinianRing R] (i : Fin (K R)) :
    FiniteLengthModule Œ∫ ((series R).qf i) := by
  suffices inst1 : IsFiniteLengthModule Œ∫ ((series R).qf i) from Classical.choice inst1.finite
  rw [finiteLengthModule_over_field_iff_finite_dimensional,
    ‚Üê Module.finite_iff_artinian_over_divisionRing]
  infer_instance

instance qf_finiteLength_Œ∫_of_noetherian [IsNoetherianRing R] (i : Fin (K R)) :
    FiniteLengthModule Œ∫ ((series R).qf i) := by
  suffices inst1 : IsFiniteLengthModule Œ∫ ((series R).qf i) from Classical.choice inst1.finite
  rw [finiteLengthModule_over_field_iff_finite_dimensional,
    ‚Üê Module.finite_iff_artinian_over_divisionRing]
  infer_instance

instance qf_finiteLength_R_of_artinian [IsArtinianRing R] (i : Fin (K R)) :
    FiniteLengthModule R ((series R).qf i) := by
  have i1 := isFiniteLengthModule_iff_restrictScalars R Œ∫ ((series R).qf i) |>.mp
    ‚ü®‚ü®qf_finiteLength_Œ∫_of_artinian R i‚ü©‚ü©
  exact Classical.choice i1.1

instance qf_finiteLength_R_of_noetherian [IsNoetherianRing R] (i : Fin (K R)) :
    FiniteLengthModule R ((series R).qf i) := by
  have i1 := isFiniteLengthModule_iff_restrictScalars R Œ∫ ((series R).qf i) |>.mp
    ‚ü®‚ü®qf_finiteLength_Œ∫_of_noetherian R i‚ü©‚ü©
  exact Classical.choice i1.1

/--
The last cumulative quotient factor is exactly `R`.
-/
def cdf_last_eq : (series R).cqf (Fin.last _) ‚âÉ‚Çó[R] R :=
LinearEquiv.ofLinear
  (Submodule.liftQ _ (Submodule.subtype _) fun x hx ‚Ü¶ by simpa using hx)
  { toFun := fun r ‚Ü¶ Submodule.Quotient.mk ‚ü®r, by
      change r ‚àà (series R).last
      rw [series_last]
      simp only [Submodule.mem_top]‚ü©
    map_add' := by intros; rfl
    map_smul' := by intros; rfl }
  (LinearMap.ext fun x ‚Ü¶ by
    simp only [series_length, series_toFun, Fin.val_last, LinearMap.coe_comp, Function.comp_apply,
      LinearMap.id_coe, id_eq]
    erw [Submodule.liftQ_apply]
    rfl)
  (LinearMap.ext fun x ‚Ü¶ by
    induction' x using Quotient.inductionOn' with x
    simp only [series_length, series_toFun, Fin.val_last, Submodule.Quotient.mk''_eq_mk,
      LinearMap.id_coe, id_eq]
    erw [LinearMap.comp_apply]
    erw [Submodule.liftQ_apply, Submodule.Quotient.eq]
    simp)

end local_ring_with_nilpotent_maximal_ideal

end local_ring

namespace IsArtinianRing

variable [IsArtinianRing R]

instance : Finite (PrimeSpectrum R) := @Finite.of_equiv _ {I : Ideal R | I.IsPrime}
  (Set.finite_coe_iff.mpr <| IsArtinianRing.primeSpectrum_finite R)
  ‚ü®fun x ‚Ü¶ ‚ü®x.1, x.2‚ü©, fun x ‚Ü¶ ‚ü®x.1, x.2‚ü©, fun _ ‚Ü¶ by aesop, fun _ ‚Ü¶ by aesop‚ü©

noncomputable instance : Fintype (PrimeSpectrum R) :=
  Classical.choice <| finite_iff_nonempty_fintype (PrimeSpectrum R) |>.mp inferInstance

instance isNoetherianRing_of_local [LocalRing R] : IsNoetherianRing R := by
  suffices i1 : IsFiniteLengthModule R R from isNoetherian_of_finiteLength R R
  have i2 : Fact (IsNilpotent (LocalRing.maximalIdeal R)) := by
    fconstructor
    have H := IsArtinianRing.isNilpotent_jacobson_bot (R := R)
    rwa [LocalRing.jacobson_eq_maximalIdeal (h := by simp)] at H

  refine isFiniteLengthModule_congr (local_ring_with_nilpotent_maximal_ideal.cdf_last_eq R)
    (h := ?_)
  rw [RelSeries.cqf_finiteLength_iff_each_qf_finiteLength]
  intros j
  infer_instance

instance isNoetherianRing_of_isArtinianRing : IsNoetherianRing R := by
  rcases subsingleton_or_nontrivial R with H | H
  ¬∑ exact isNoetherian_of_finite R R
  ¬∑ letI : Fact (ringKrullDim R = 0) := ‚ü®ringKrullDim.eq_zero_of_isArtinianRing R‚ü©
    exact @isNoetherianRing_of_ringEquiv (f := equivProdLocalization.symm) <| IsNoetherianRing.Pi _

end IsArtinianRing

namespace IsNoetherianRing

variable [dim0 : Fact (ringKrullDim R = 0)] [IsNoetherianRing R]

noncomputable instance : Fintype (PrimeSpectrum R) := PrimeSpectrum.finTypeOfNoetherian dim0.out

instance isArtinianRing_of_local_dim0_noetherian [LocalRing R] : IsArtinianRing R := by
  suffices i1 : IsFiniteLengthModule R R from isArtinian_of_finiteLength R R
  have i2 : Fact (IsNilpotent (LocalRing.maximalIdeal R)) :=
  ‚ü®IsNoetherianRing.nilpotent_maximalIdeal_of_zero_dimensional_localRing _ dim0.out‚ü©

  refine isFiniteLengthModule_congr (local_ring_with_nilpotent_maximal_ideal.cdf_last_eq R)
    (h := ?_)
  rw [RelSeries.cqf_finiteLength_iff_each_qf_finiteLength]
  intros j
  infer_instance

instance : IsArtinianRing R := by
  rcases subsingleton_or_nontrivial R with H | _
  ¬∑ exact isArtinian_of_finite
  ¬∑ have i1 (i : PrimeSpectrum R) : IsNoetherianRing (Localization.AtPrime i.asIdeal) :=
      IsNoetherianRing.Localization (Ideal.primeCompl i.asIdeal) _
    have i2 (i : PrimeSpectrum R) : Fact (ringKrullDim (Localization.AtPrime i.asIdeal) = 0) := by
      fconstructor
      have : ringKrullDim (Localization.AtPrime i.asIdeal) ‚â§ ringKrullDim R :=
        krullDim.le_of_strictMono (fun p ‚Ü¶
          ‚ü®IsLocalization.orderEmbedding i.asIdeal.primeCompl (Localization.AtPrime i.asIdeal) p.1,
            ?_‚ü©) ?_
      pick_goal 2
      ¬∑ simp only [IsLocalization.orderEmbedding, RelEmbedding.coe_mk, Function.Embedding.coeFn_mk]
        exact Ideal.IsPrime.comap _
      pick_goal 2
      ¬∑ intro p q hpq
        simp only [IsLocalization.orderEmbedding, RelEmbedding.coe_mk, Function.Embedding.coeFn_mk]
        change Ideal.comap _ _ < Ideal.comap _ _
        refine ‚ü®Ideal.comap_mono hpq.1, ?_‚ü©
        obtain ‚ü®x, hx1, hx2‚ü© := Set.not_subset.mp hpq.2
        induction' x using Localization.induction_on with data
        rcases data with ‚ü®a, b‚ü©
        dsimp at hx1 hx2
        have eq1 : Localization.mk a b = Localization.mk 1 b * Localization.mk a 1 := by
          rw [Localization.mk_mul]; simp
        have hx3 : Localization.mk a 1 ‚àà q.asIdeal := by
          rw [eq1] at hx1
          refine q.IsPrime.mem_or_mem hx1 |>.resolve_left ?_
          intro r
          refine q.IsPrime.1 (Ideal.eq_top_iff_one _ |>.mpr ?_)
          have eq2 : (Localization.mk 1 b : Localization.AtPrime i.asIdeal) *
            (Localization.mk b 1 : Localization.AtPrime i.asIdeal) =
            (1 : Localization.AtPrime i.asIdeal) := by rw [Localization.mk_mul]; simp
          rw [‚Üê eq2]
          exact q.asIdeal.mul_mem_right _ r
        refine Set.not_subset.mpr ‚ü®a, ?_, ?_‚ü© <;>
        simp only [SetLike.mem_coe, Ideal.mem_comap]
        ¬∑ exact hx3
        ¬∑ rw [eq1] at hx2
          have := p.IsPrime.mul_mem_iff_mem_or_mem.not.mp hx2
          push_neg at this
          exact this.2

      rw [dim0.out] at this
      refine le_antisymm this krullDim.nonneg_of_Nonempty

    refine @isArtinianRing_of_ringEquiv (e := equivProdLocalization.symm) inferInstance

end IsNoetherianRing
