/-
Copyright (c) 2025 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.AlgebraicGeometry.AffineScheme
import Mathlib.Topology.LocalAtTarget

/-!
# Ideal sheaves on schemes

We define ideal sheaves of schemes and provide various constructors for it.

## Main definition
* `AlgebraicGeometry.Scheme.IdealSheafData`: A structure that contains the data to uniquely define
  an ideal sheaf, consisting of
  1. an ideal `I(U) ‚â§ Œì(X, U)` for every affine open `U`
  2. a proof that `I(D(f)) = I(U)_f` for every affine open `U` and every section `f : Œì(X, U)`.
* `AlgebraicGeometry.Scheme.IdealSheafData.ofIdeals`:
  The largest ideal sheaf contained in a family of ideals.
* `AlgebraicGeometry.Scheme.IdealSheafData.equivOfIsAffine`:
  Over affine schemes, ideal sheaves are in bijection with ideals of the global sections.
* `AlgebraicGeometry.Scheme.IdealSheafData.support`:
  The support of an ideal sheaf.

## Implementation detail

Ideal sheaves are not yet defined in this file as actual subsheaves of `ùí™‚Çì`.
Instead, for the ease of development and application,
we define the structure `IdealSheafData` containing all necessary data to uniquely define an
ideal sheaf. This should be refectored as a constructor for ideal sheaves once they are introduced
into mathlib.

-/

open CategoryTheory

universe u

namespace AlgebraicGeometry.Scheme

variable {X : Scheme.{u}}

/--
A structure that contains the data to uniquely define an ideal sheaf, consisting of
1. an ideal `I(U) ‚â§ Œì(X, U)` for every affine open `U`
2. a proof that `I(D(f)) = I(U)_f` for every affine open `U` and every section `f : Œì(X, U)`.
-/
@[ext]
structure IdealSheafData (X : Scheme.{u}) : Type u where
  /-- The component of an ideal sheaf at an affine open. -/
  ideal : ‚àÄ U : X.affineOpens, Ideal Œì(X, U)
  /-- Also see `AlgebraicGeometry.Scheme.IdealSheafData.map_ideal` -/
  map_ideal_basicOpen : ‚àÄ (U : X.affineOpens) (f : Œì(X, U)),
    (ideal U).map (X.presheaf.map (homOfLE <| X.basicOpen_le f).op).hom =
      ideal (X.affineBasicOpen f)

namespace IdealSheafData

section Order

instance : PartialOrder (IdealSheafData X) := PartialOrder.lift ideal fun _ _ ‚Ü¶ IdealSheafData.ext

lemma le_def {I J : IdealSheafData X} : I ‚â§ J ‚Üî ‚àÄ U, I.ideal U ‚â§ J.ideal U := .rfl

instance : CompleteSemilatticeSup (IdealSheafData X) where
  sSup s := ‚ü®sSup (ideal '' s), by
    have : sSup (ideal '' s) = ‚®Ü i : s, ideal i.1 := by
      conv_lhs => rw [‚Üê Subtype.range_val (s := s), ‚Üê Set.range_comp]
      rfl
    simp only [this, iSup_apply, Ideal.map_iSup, map_ideal_basicOpen, implies_true]‚ü©
  le_sSup s x hxs := le_sSup (s := ideal '' s) ‚ü®_, hxs, rfl‚ü©
  sSup_le s i hi := sSup_le (s := ideal '' s) (Set.forall_mem_image.mpr hi)

/-- The largest ideal sheaf contained in a family of ideals. -/
def ofIdeals (I : ‚àÄ U : X.affineOpens, Ideal Œì(X, U)) : IdealSheafData X :=
  sSup { J : IdealSheafData X | J.ideal ‚â§ I }

lemma ideal_ofIdeals_le (I : ‚àÄ U : X.affineOpens, Ideal Œì(X, U)) :
    (ofIdeals I).ideal ‚â§ I :=
  sSup_le (Set.forall_mem_image.mpr fun _ ‚Ü¶ id)

/-- The galois coinsertion between ideal sheaves and arbitrary families of ideals. -/
protected def gci : GaloisCoinsertion ideal (ofIdeals (X := X)) where
  choice I hI := ‚ü®I, fun U f ‚Ü¶
    (ideal_ofIdeals_le I).antisymm hI ‚ñ∏ (ofIdeals I).map_ideal_basicOpen U f‚ü©
  gc _ _ := ‚ü®(le_sSup ¬∑), (le_trans ¬∑ (ideal_ofIdeals_le _))‚ü©
  u_l_le _ := sSup_le fun _ ‚Ü¶ id
  choice_eq I hI := IdealSheafData.ext (hI.antisymm (ideal_ofIdeals_le I))

lemma strictMono_ideal : StrictMono (ideal (X := X)) := IdealSheafData.gci.strictMono_l
lemma ideal_mono : Monotone (ideal (X := X)) := strictMono_ideal.monotone
lemma ofIdeals_mono : Monotone (ofIdeals (X := X)) := IdealSheafData.gci.gc.monotone_u
lemma ofIdeals_ideal (I : IdealSheafData X) : ofIdeals I.ideal = I := IdealSheafData.gci.u_l_eq _
lemma le_ofIdeals_iff {I : IdealSheafData X} {J} : I ‚â§ ofIdeals J ‚Üî I.ideal ‚â§ J :=
  IdealSheafData.gci.gc.le_iff_le.symm

instance : CompleteLattice (IdealSheafData X) where
  __ := inferInstanceAs (CompleteSemilatticeSup (IdealSheafData X))
  __ := IdealSheafData.gci.liftCompleteLattice

@[simp]
lemma ideal_top : ideal (X := X) ‚ä§ = ‚ä§ :=
  top_le_iff.mp (ideal_mono (le_top (a := ‚ü®‚ä§, by simp [Ideal.map_top]‚ü©)))

@[simp]
lemma ideal_bot : ideal (X := X) ‚ä• = ‚ä• := rfl

@[simp]
lemma ideal_sup {I J : IdealSheafData X} : (I ‚äî J).ideal = I.ideal ‚äî J.ideal := rfl

@[simp]
lemma ideal_sSup {I : Set (IdealSheafData X)} : (sSup I).ideal = sSup (ideal '' I) := rfl

@[simp]
lemma ideal_iSup {Œπ : Type*} {I : Œπ ‚Üí IdealSheafData X} : (iSup I).ideal = ‚®Ü i, (I i).ideal := by
  show sSup _ = sSup _
  rw [‚Üê Set.range_comp]
  rfl

@[simp]
lemma ideal_inf {I J : IdealSheafData X} : (I ‚äì J).ideal = I.ideal ‚äì J.ideal := by
  let K : IdealSheafData X := ‚ü®I.ideal ‚äì J.ideal, by
    intro U f
    dsimp
    have : (X.presheaf.map (homOfLE (X.basicOpen_le f)).op).hom = algebraMap _ _ := rfl
    have inst := U.2.isLocalization_basicOpen f
    rw [‚Üê I.map_ideal_basicOpen U f, ‚Üê J.map_ideal_basicOpen U f, this]
    ext x
    obtain ‚ü®x, s, rfl‚ü© := IsLocalization.mk'_surjective (.powers f) x
    simp only [IsLocalization.mk'_mem_map_algebraMap_iff, Submonoid.mem_powers_iff, Ideal.mem_inf,
      exists_exists_eq_and]
    refine ‚ü®fun ‚ü®n, h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ ‚ü®‚ü®n, h‚ÇÅ‚ü©, ‚ü®n, h‚ÇÇ‚ü©‚ü©, ?_‚ü©
    rintro ‚ü®‚ü®n‚ÇÅ, h‚ÇÅ‚ü©, ‚ü®n‚ÇÇ, h‚ÇÇ‚ü©‚ü©
    refine ‚ü®n‚ÇÅ + n‚ÇÇ, ?_, ?_‚ü©
    ¬∑ rw [add_comm, pow_add, mul_assoc]; exact Ideal.mul_mem_left _ _ h‚ÇÅ
    ¬∑ rw [pow_add, mul_assoc]; exact Ideal.mul_mem_left _ _ h‚ÇÇ‚ü©
  exact (le_inf (ideal_mono inf_le_left) (ideal_mono inf_le_right)).antisymm
    ((le_ofIdeals_iff (I := K)).mpr le_rfl)

@[simp]
lemma ideal_biInf {Œπ : Type*} (I : Œπ ‚Üí IdealSheafData X) {s : Set Œπ} (hs : s.Finite) :
    (‚®Ö i ‚àà s, I i).ideal = ‚®Ö i ‚àà s, (I i).ideal := by
  refine hs.induction_on _ (by simp) fun {i s} his hs e ‚Ü¶ ?_
  simp only [iInf_insert, e, ideal_inf]

@[simp]
lemma ideal_iInf {Œπ : Type*} (I : Œπ ‚Üí IdealSheafData X) [Finite Œπ] :
    (‚®Ö i, I i).ideal = ‚®Ö i, (I i).ideal := by
  simpa using ideal_biInf I Set.finite_univ

end Order

variable (I : IdealSheafData X)

section map_ideal

/-- subsumed by `IdealSheafData.map_ideal` below. -/
private lemma map_ideal_basicOpen_of_eq
    {U V : X.affineOpens} (f : Œì(X, U)) (hV : V = X.affineBasicOpen f) :
    (I.ideal U).map (X.presheaf.map
        (homOfLE (X := X.Opens) (hV.trans_le (X.affineBasicOpen_le f))).op).hom =
      I.ideal V := by
  subst hV; exact I.map_ideal_basicOpen _ _

lemma map_ideal {U V : X.affineOpens} (h : U ‚â§ V) :
    (I.ideal V).map (X.presheaf.map (homOfLE h).op).hom = I.ideal U := by
  rw [U.2.ideal_ext_iff]
  intro x hxU
  obtain ‚ü®f, g, hfg, hxf‚ü© := exists_basicOpen_le_affine_inter U.2 V.2 x ‚ü®hxU, h hxU‚ü©
  have := I.map_ideal_basicOpen_of_eq (V := X.affineBasicOpen g) f (Subtype.ext hfg.symm)
  rw [‚Üê I.map_ideal_basicOpen] at this
  apply_fun Ideal.map (X.presheaf.germ (X.basicOpen g) x (hfg ‚ñ∏ hxf)).hom at this
  simp only [Ideal.map_map, ‚Üê RingHom.comp_apply, ‚Üê CommRingCat.hom_comp,
    affineBasicOpen_coe, X.presheaf.germ_res] at this ‚ä¢
  simp only [homOfLE_leOfHom, TopCat.Presheaf.germ_res', this]

/-- A form of `map_ideal` that is easier to rewrite with. -/
lemma map_ideal' {U V : X.affineOpens} (h : Opposite.op V.1 ‚ü∂ .op U.1) :
    (I.ideal V).map (X.presheaf.map h).hom = I.ideal U :=
  map_ideal _ _

lemma ideal_le_comap_ideal {U V : X.affineOpens} (h : U ‚â§ V) :
    I.ideal V ‚â§ (I.ideal U).comap (X.presheaf.map (homOfLE h).op).hom := by
  rw [‚Üê Ideal.map_le_iff_le_comap, ‚Üê I.map_ideal h]

end map_ideal

section IsAffine

/-- The ideal sheaf induced by an ideal of the global sections. -/
@[simps]
def ofIdealTop (I : Ideal Œì(X, ‚ä§)) : IdealSheafData X where
  ideal U := I.map (X.presheaf.map (homOfLE le_top).op).hom
  map_ideal_basicOpen U f := by rw [Ideal.map_map, ‚Üê CommRingCat.hom_comp, ‚Üê Functor.map_comp]; rfl

lemma le_of_isAffine [IsAffine X] {I J : IdealSheafData X}
    (H : I.ideal ‚ü®‚ä§, isAffineOpen_top X‚ü© ‚â§ J.ideal ‚ü®‚ä§, isAffineOpen_top X‚ü©) : I ‚â§ J := by
  intro U
  rw [‚Üê map_ideal (U := U) (V := ‚ü®‚ä§, isAffineOpen_top X‚ü©) I (le_top (a := U.1)),
    ‚Üê map_ideal (U := U) (V := ‚ü®‚ä§, isAffineOpen_top X‚ü©) J (le_top (a := U.1))]
  exact Ideal.map_mono H

lemma ext_of_isAffine [IsAffine X] {I J : IdealSheafData X}
    (H : I.ideal ‚ü®‚ä§, isAffineOpen_top X‚ü© = J.ideal ‚ü®‚ä§, isAffineOpen_top X‚ü©) : I = J :=
  (le_of_isAffine H.le).antisymm (le_of_isAffine H.ge)

/-- Over affine schemes, ideal sheaves are in bijection with ideals of the global sections. -/
@[simps]
def equivOfIsAffine [IsAffine X] : IdealSheafData X ‚âÉ Ideal Œì(X, ‚ä§) where
  toFun := (ideal ¬∑ ‚ü®‚ä§, isAffineOpen_top X‚ü©)
  invFun := ofIdealTop
  left_inv I := ext_of_isAffine (by simp)
  right_inv I := by simp

end IsAffine

section support

/-- The support of an ideal sheaf. Also see `IdealSheafData.mem_support_iff_of_mem`. -/
def support (I : IdealSheafData X) : Set X := ‚ãÇ U, X.zeroLocus (U := U.1) (I.ideal U)

lemma mem_support_iff {I : IdealSheafData X} {x} :
    x ‚àà I.support ‚Üî ‚àÄ U, x ‚àà X.zeroLocus (U := U.1) (I.ideal U) := Set.mem_iInter

lemma support_subset_zeroLocus (I : IdealSheafData X) (U : X.affineOpens) :
    I.support ‚äÜ X.zeroLocus (U := U.1) (I.ideal U) := Set.iInter_subset _ _

lemma zeroLocus_inter_subset_support (I : IdealSheafData X) (U : X.affineOpens) :
    X.zeroLocus (U := U.1) (I.ideal U) ‚à© U ‚äÜ I.support := by
  refine Set.subset_iInter fun V ‚Ü¶ ?_
  apply (X.codisjoint_zeroLocus (U := V) (I.ideal V)).symm.left_le_of_le_inf_right
  rintro x ‚ü®‚ü®hx, hxU‚ü©, hxV‚ü©
  simp only [Scheme.mem_zeroLocus_iff, SetLike.mem_coe] at hx ‚ä¢
  intro s hfU hxs
  obtain ‚ü®f, g, hfg, hxf‚ü© := exists_basicOpen_le_affine_inter U.2 V.2 x ‚ü®hxU, hxV‚ü©
  have inst := U.2.isLocalization_basicOpen f
  have := (I.map_ideal (U := X.affineBasicOpen f) (hfg.trans_le (X.basicOpen_le g))).le
    (Ideal.mem_map_of_mem _ hfU)
  rw [‚Üê I.map_ideal_basicOpen] at this
  obtain ‚ü®‚ü®s', ‚ü®_, n, rfl‚ü©‚ü©, hs'‚ü© :=
    (IsLocalization.mem_map_algebraMap_iff (.powers f) Œì(X, X.basicOpen f)).mp this
  apply_fun (x ‚àà X.basicOpen ¬∑) at hs'
  refine hx s' s'.2 ?_
  cases n <;>
    simpa [RingHom.algebraMap_toAlgebra, ‚Üê hfg, hxf, hxs, Scheme.basicOpen_pow] using hs'

lemma mem_support_iff_of_mem {I : IdealSheafData X} {x} {U : X.affineOpens} (hxU : x ‚àà U.1) :
    x ‚àà I.support ‚Üî x ‚àà X.zeroLocus (U := U.1) (I.ideal U) :=
  ‚ü®fun h ‚Ü¶ Set.iInter_subset _ U h, fun h ‚Ü¶ I.zeroLocus_inter_subset_support U ‚ü®h, hxU‚ü©‚ü©

lemma support_inter (I : IdealSheafData X) (U : X.affineOpens) :
    I.support ‚à© U = X.zeroLocus (U := U.1) (I.ideal U) ‚à© U := by
  ext x
  by_cases hxU : x ‚àà U.1
  ¬∑ simp [hxU, mem_support_iff_of_mem hxU]
  ¬∑ simp [hxU]

lemma isClosed_support (I : IdealSheafData X) : IsClosed I.support := by
  rw [isClosed_iff_coe_preimage_of_iSup_eq_top (iSup_affineOpens_eq_top X)]
  intro U
  refine ‚ü®(X.zeroLocus (U := U.1) (I.ideal U))·∂ú, (X.zeroLocus_isClosed _).isOpen_compl, ?_‚ü©
  simp only [Set.preimage_compl, compl_inj_iff]
  apply Subtype.val_injective.image_injective
  simp [Set.image_preimage_eq_inter_range, I.support_inter]

@[simp]
lemma support_top : support (X := X) ‚ä§ = ‚àÖ := by
  ext x
  obtain ‚ü®_, ‚ü®U, hU, rfl‚ü©, hxU, -‚ü© :=
    (isBasis_affine_open X).exists_subset_of_mem_open (Set.mem_univ x) isOpen_univ
  simpa [support] using ‚ü®U, hU, hxU‚ü©

@[simp]
lemma support_bot : support (X := X) ‚ä• = Set.univ := by ext; simp [support]

lemma support_antitone : Antitone (support (X := X)) :=
  fun _ _ h ‚Ü¶ Set.iInter_mono fun U ‚Ü¶ X.zeroLocus_mono (h U)

lemma support_ofIdealTop (I : Ideal Œì(X, ‚ä§)) : (ofIdealTop I).support = X.zeroLocus (U := ‚ä§) I := by
  suffices ‚àÄ U : X.affineOpens, (ofIdealTop I).support ‚à© U = X.zeroLocus (U := ‚ä§) I ‚à© U by
    ext x
    obtain ‚ü®_, ‚ü®U, hU, rfl‚ü©, hxU, -‚ü© :=
      (isBasis_affine_open X).exists_subset_of_mem_open (Set.mem_univ x) isOpen_univ
    simpa [hxU] using congr(x ‚àà $(this ‚ü®U, hU‚ü©))
  intro U
  rw [support_inter, ofIdealTop_ideal, Ideal.map, zeroLocus_span, zeroLocus_map,
    Set.union_inter_distrib_right, Set.compl_inter_self, Set.union_empty]

@[simp]
lemma support_eq_empty_iff : support I = ‚àÖ ‚Üî I = ‚ä§ := by
  refine ‚ü®fun H ‚Ü¶ top_le_iff.mp fun U ‚Ü¶ ?_, by simp +contextual‚ü©
  have := (U.2.fromSpec_image_zeroLocus _).trans_subset
    ((zeroLocus_inter_subset_support I U).trans_eq H)
  simp only [Set.subset_empty_iff, Set.image_eq_empty] at this
  simp [PrimeSpectrum.zeroLocus_empty_iff_eq_top.mp this]

end support

end AlgebraicGeometry.Scheme.IdealSheafData
