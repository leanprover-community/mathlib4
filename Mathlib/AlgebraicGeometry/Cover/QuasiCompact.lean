/-
Copyright (c) 2025 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.AlgebraicGeometry.Morphisms.Affine
import Mathlib.AlgebraicGeometry.Properties
import Mathlib.AlgebraicGeometry.PullbackCarrier
import Mathlib.Topology.Sets.CompactOpenCovered

/-!
# Quasi-compact covers

A cover of a scheme is quasi-compact if every affine open of the base can be covered
by a finite union of images of quasi-compact opens of the components.

This is used to define the fpqc (faithfully flat, quasi-compact) topology, where covers are given by
flat covers that are quasi-compact.
-/

universe w' w u v

open CategoryTheory Limits MorphismProperty TopologicalSpace.Opens AlgebraicGeometry

namespace AlgebraicGeometry

lemma IsAffineOpen.isCompact_pullback_inf {X Y Z : Scheme.{u}} {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z}
    {U : X.Opens} (hU : IsAffineOpen U) {V : Y.Opens} (hV : IsCompact V.1)
    {W : Z.Opens} (hW : IsAffineOpen W) (hUW : U ‚â§ f ‚Åª¬π·µÅ W) (hVW : V ‚â§ g ‚Åª¬π·µÅ W) :
    IsCompact (pullback.fst f g ‚Åª¬π·µÅ U ‚äì pullback.snd f g ‚Åª¬π·µÅ V).1 := by
  have : IsAffine U.toScheme := hU
  have : IsAffine W.toScheme := hW
  have : CompactSpace V := isCompact_iff_compactSpace.mp hV
  let f' : U.toScheme ‚ü∂ W := f.resLE _ _ hUW
  let q : Scheme.Opens.toScheme V ‚ü∂ W :=
    IsOpenImmersion.lift W.Œπ (Scheme.Opens.Œπ _ ‚â´ g) <| by simpa [Set.range_comp]
  let p : pullback f' q ‚ü∂ pullback f g :=
    pullback.map _ _ _ _ U.Œπ (Scheme.Opens.Œπ _) W.Œπ (by simp [f']) (by simp [q])
  convert isCompact_range p.continuous
  simp [p, Scheme.Pullback.range_map]

variable {S : Scheme.{u}}

/--
A cover of a scheme is quasi-compact if every affine open of the base can be covered
by a finite union of images of quasi-compact opens of the components.

Note: This is available with dot notation after `open AlgebraicGeometry`.
-/
@[stacks 022B, mk_iff]
class CategoryTheory.PreZeroHypercover.QuasiCompact (ùí∞ : PreZeroHypercover.{v} S) : Prop where
  isCompactOpenCovered_of_isAffineOpen {U : S.Opens} (hU : IsAffineOpen U) :
    IsCompactOpenCovered (fun i ‚Ü¶ (ùí∞.f i).base) U.1

variable (ùí∞ : PreZeroHypercover.{v} S)

lemma IsAffineOpen.isCompactOpenCovered [ùí∞.QuasiCompact] {U : S.Opens} (hU : IsAffineOpen U) :
    IsCompactOpenCovered (fun i ‚Ü¶ (ùí∞.f i).base) U.1 :=
  CategoryTheory.PreZeroHypercover.QuasiCompact.isCompactOpenCovered_of_isAffineOpen hU

lemma CategoryTheory.PreZeroHypercover.isCompactOpenCovered_of_isCompact [ùí∞.QuasiCompact]
    {U : S.Opens} (hU : IsCompact U.1) :
    IsCompactOpenCovered (fun i ‚Ü¶ (ùí∞.f i).base) U.1 := by
  obtain ‚ü®Us, hUs, hUf, hUc‚ü© := S.isBasis_affineOpens.exists_finite_of_isCompact hU
  refine .of_iUnion_eq_of_finite (SetLike.coe '' Us) (by aesop) (hUf.image _) ?_
  simpa using fun t ht ‚Ü¶ IsAffineOpen.isCompactOpenCovered ùí∞ (hUs ht)

namespace CategoryTheory.PreZeroHypercover.QuasiCompact

variable {ùí∞ : PreZeroHypercover.{v} S} {K : Precoverage Scheme.{u}}

variable (ùí∞) in
lemma exists_isAffineOpen_of_isCompact [ùí∞.QuasiCompact] {U : S.Opens} (hU : IsCompact U.1) :
    ‚àÉ (n : ‚Ñï) (f : Fin n ‚Üí ùí∞.I‚ÇÄ) (V : ‚àÄ i, (ùí∞.X (f i)).Opens),
      (‚àÄ i, IsAffineOpen (V i)) ‚àß
      ‚ãÉ i, (ùí∞.f (f i)).base '' (V i) = U := by
  obtain ‚ü®n, a, V, ha, heq‚ü© := (ùí∞.isCompactOpenCovered_of_isCompact hU).exists_mem_of_isBasis
    (fun i ‚Ü¶ (ùí∞.X i).isBasis_affineOpens) (fun _ _ h ‚Ü¶ h.isCompact)
  exact ‚ü®n, a, V, ha, heq‚ü©

/-- If the component maps of `ùí∞` are open, `ùí∞` is quasi-compact. This in particular
applies if `K` is the is the fppf topology (i.e., flat and of finite presentation) and hence in
particular for √©tale and Zariski covers. -/
@[stacks 022C]
lemma of_isOpenMap {ùí∞ : S.Cover K} [Scheme.JointlySurjective K] (h : ‚àÄ i, IsOpenMap (ùí∞.f i).base) :
    ùí∞.QuasiCompact where
  isCompactOpenCovered_of_isAffineOpen {U} hU := .of_isOpenMap
    (fun i ‚Ü¶ (ùí∞.f i).continuous) h (fun x _ ‚Ü¶ ‚ü®ùí∞.idx x, ùí∞.covers x‚ü©) U.2 hU.isCompact

/-- Any open cover is quasi-compact. -/
instance (ùí∞ : S.OpenCover) : ùí∞.QuasiCompact :=
  of_isOpenMap fun i ‚Ü¶ (ùí∞.f i).isOpenEmbedding.isOpenMap

/-- If `ùí±` is a refinement of `ùí∞` such that `ùí±` is quasicompact, also `ùí∞` is quasicompact. -/
@[stacks 03L8]
lemma of_hom {ùí± : PreZeroHypercover.{w'} S} (f : ùí±.Hom ùí∞) [ùí±.QuasiCompact] : ùí∞.QuasiCompact := by
  refine ‚ü®fun {U} hU ‚Ü¶ ?_‚ü©
  exact .of_comp (a := f.s‚ÇÄ) (fun i ‚Ü¶ (ùí±.f i).base) (fun i ‚Ü¶ (f.h‚ÇÄ i).base)
    (fun _ ‚Ü¶ Scheme.Hom.continuous _) (fun i ‚Ü¶ funext <| by simp [‚Üê Scheme.Hom.comp_apply])
    (fun _ ‚Ü¶ Scheme.Hom.continuous _) U.2 (hU.isCompactOpenCovered ùí±)

variable (ùí∞) in
@[stacks 022D "(3)"]
instance [ùí∞.QuasiCompact] {T : Scheme.{u}} (f : T ‚ü∂ S) : (ùí∞.pullback‚ÇÅ f).QuasiCompact := by
  refine ‚ü®fun {U'} hU' ‚Ü¶ ?_‚ü©
  wlog h : ‚àÉ (U : S.Opens), IsAffineOpen U ‚àß f.base '' U' ‚äÜ U generalizing U'
  ¬∑ refine .of_isCompact_of_forall_exists hU'.isCompact fun x hxU ‚Ü¶ ?_
    obtain ‚ü®W, hW, hx, _‚ü© := isBasis_iff_nbhd.mp S.isBasis_affineOpens (mem_top (f.base x))
    obtain ‚ü®W', hW', hx', hle‚ü© := isBasis_iff_nbhd.mp T.isBasis_affineOpens
      (show x ‚àà f ‚Åª¬π·µÅ W ‚äì U' from ‚ü®hx, hxU‚ü©)
    exact ‚ü®W', le_trans hle inf_le_right, by simpa [hx], W'.2,
      this hW' ‚ü®W, hW, by simpa using le_trans hle inf_le_left‚ü©‚ü©
  obtain ‚ü®U, hU, hsub‚ü© := h
  obtain ‚ü®s, hf, V, hc, (heq : _ = (U : Set S))‚ü© := hU.isCompactOpenCovered ùí∞
  refine ‚ü®s, hf, fun i hi ‚Ü¶ pullback.fst f (ùí∞.f i) ‚Åª¬π·µÅ U' ‚äì pullback.snd f (ùí∞.f i) ‚Åª¬π·µÅ (V i hi),
      fun i hi ‚Ü¶ ?_, ?_‚ü©
  ¬∑ exact hU'.isCompact_pullback_inf (hc _ _) hU (by simpa using hsub) <| show _ ‚äÜ _ by
      simpa [‚Üê heq, Set.range_comp] using Set.subset_iUnion_of_subset i
        (Set.subset_iUnion_of_subset hi (Set.subset_preimage_image _ _))
  ¬∑ refine subset_antisymm (by simp) (fun x hx ‚Ü¶ ?_)
    have : f.base x ‚àà (U : Set S) := hsub ‚ü®x, hx, rfl‚ü©
    simp_rw [‚Üê heq, Set.mem_iUnion] at this
    obtain ‚ü®i, hi, y, hy, heq‚ü© := this
    simp_rw [Set.mem_iUnion]
    obtain ‚ü®z, hzl, hzr‚ü© := Scheme.Pullback.exists_preimage_pullback x y heq.symm
    exact ‚ü®i, hi, z, ‚ü®by simpa [hzl], by simpa [hzr]‚ü©, hzl‚ü©

variable (ùí∞) in
instance [ùí∞.QuasiCompact] {T : Scheme.{u}} (f : T ‚ü∂ S) : (ùí∞.pullback‚ÇÇ f).QuasiCompact :=
  .of_hom (PreZeroHypercover.pullbackIso f ùí∞).hom

@[stacks 022D "(2)"]
instance {X : Scheme.{u}} (ùí∞ : PreZeroHypercover.{w} X) [ùí∞.QuasiCompact]
    (f : ‚àÄ (x : ùí∞.I‚ÇÄ), PreZeroHypercover.{w} (ùí∞.X x)) [‚àÄ x, (f x).QuasiCompact] :
    QuasiCompact (ùí∞.bind f) where
  isCompactOpenCovered_of_isAffineOpen {U} hU := by
    obtain ‚ü®s, hs, V, hcV, hU‚ü© := hU.isCompactOpenCovered ùí∞
    have (i) (hi) : IsCompactOpenCovered (fun k ‚Ü¶ ((f i).f k).base) (V i hi) :=
      (f i).isCompactOpenCovered_of_isCompact (hcV i hi)
    choose t ht W hcW hV using this
    have : Finite s := hs
    have (i) (hi) : Finite (t i hi) := ht i hi
    refine .of_finite (Œ∫ := Œ£ (i : s), t i.1 i.2) (fun p ‚Ü¶ ‚ü®p.1, p.2‚ü©) (fun p ‚Ü¶ W _ p.1.2 _ p.2.2)
      (fun p ‚Ü¶ hcW ..) ?_
    simpa [‚Üê hV, Set.iUnion_sigma, Set.iUnion_subtype, Set.image_iUnion, Set.image_image] using hU

instance of_finite {ùí∞ : S.Cover K} [Scheme.JointlySurjective K]
    [‚àÄ i, AlgebraicGeometry.QuasiCompact (ùí∞.f i)] [Finite ùí∞.I‚ÇÄ] : ùí∞.QuasiCompact where
  isCompactOpenCovered_of_isAffineOpen {U} hU := by
    refine .of_finite_of_isSpectralMap (fun i ‚Ü¶ (ùí∞.f i).isSpectralMap) ?_ U.2 hU.isCompact
    exact (fun x _ ‚Ü¶ ‚ü®ùí∞.idx x, ùí∞.covers x‚ü©)

variable {P : MorphismProperty Scheme.{u}}

instance homCover {X S : Scheme.{u}} (f : X ‚ü∂ S) (hf : P f) [Surjective f]
    [AlgebraicGeometry.QuasiCompact f] : (f.cover hf).QuasiCompact :=
  have _ (i) : AlgebraicGeometry.QuasiCompact ((f.cover hf).f i) := ‚Äπ_‚Ä∫
  .of_finite

instance singleton {X : Scheme.{u}} (f : X ‚ü∂ S) [Surjective f]
    [AlgebraicGeometry.QuasiCompact f] : (PreZeroHypercover.singleton f).QuasiCompact :=
  homCover (P := ‚ä§) f trivial

@[stacks 022D "(1)"]
instance {P : MorphismProperty Scheme.{u}} [P.ContainsIdentities] [P.RespectsIso]
    {X Y : Scheme.{u}} {f : X ‚ü∂ Y} [IsIso f] :
    (Scheme.coverOfIsIso (P := P) f).QuasiCompact :=
  of_isOpenMap (fun _ ‚Ü¶ f.homeomorph.isOpenMap)

end CategoryTheory.PreZeroHypercover.QuasiCompact

namespace Scheme

/-- The object property on the category of pre-`0`-hypercovers of a scheme given
by quasi-compact covers. -/
def quasiCompactCover (S : Scheme.{u}) : ObjectProperty (PreZeroHypercover.{v} S) :=
  fun ùí∞ ‚Ü¶ ùí∞.QuasiCompact

@[simp]
lemma quasiCompactCover_iff (S : Scheme.{u}) (ùí∞ : PreZeroHypercover.{v} S) :
    S.quasiCompactCover ùí∞ ‚Üî ùí∞.QuasiCompact := .rfl

instance isClosedUnderIsomorphisms_quasiCompactCover (S : Scheme.{u}) :
    S.quasiCompactCover.IsClosedUnderIsomorphisms where
  of_iso {ùí∞ _} e (_ : ùí∞.QuasiCompact) := .of_hom e.hom

end Scheme

end AlgebraicGeometry
