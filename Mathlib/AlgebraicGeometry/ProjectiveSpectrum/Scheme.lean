/-
Copyright (c) 2022 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang

! This file was ported from Lean 3 source module algebraic_geometry.projective_spectrum.scheme
! leanprover-community/mathlib commit d39590fc8728fbf6743249802486f8c91ffe07bc
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf
import Mathbin.AlgebraicGeometry.Spec
import Mathbin.RingTheory.GradedAlgebra.Radical

/-!
# Proj as a scheme

This file is to prove that `Proj` is a scheme.

## Notation

* `Proj`      : `Proj` as a locally ringed space
* `Proj.T`    : the underlying topological space of `Proj`
* `Proj| U`   : `Proj` restricted to some open set `U`
* `Proj.T| U` : the underlying topological space of `Proj` restricted to open set `U`
* `pbo f`     : basic open set at `f` in `Proj`
* `Spec`      : `Spec` as a locally ringed space
* `Spec.T`    : the underlying topological space of `Spec`
* `sbo g`     : basic open set at `g` in `Spec`
* `A‚Å∞_x`      : the degree zero part of localized ring `A‚Çì`

## Implementation

In `src/algebraic_geometry/projective_spectrum/structure_sheaf.lean`, we have given `Proj` a
structure sheaf so that `Proj` is a locally ringed space. In this file we will prove that `Proj`
equipped with this structure sheaf is a scheme. We achieve this by using an affine cover by basic
open sets in `Proj`, more specifically:

1. We prove that `Proj` can be covered by basic open sets at homogeneous element of positive degree.
2. We prove that for any homogeneous element `f : A` of positive degree `m`, `Proj.T | (pbo f)` is
    homeomorphic to `Spec.T A‚Å∞_f`:
  - forward direction `to_Spec`:
    for any `x : pbo f`, i.e. a relevant homogeneous prime ideal `x`, send it to
    `A‚Å∞_f ‚à© span {g / 1 | g ‚àà x}` (see `Proj_iso_Spec_Top_component.to_Spec.carrier`). This ideal is
    prime, the proof is in `Proj_iso_Spec_Top_component.to_Spec.to_fun`. The fact that this function
    is continuous is found in `Proj_iso_Spec_Top_component.to_Spec`
  - backward direction `from_Spec`:
    for any `q : Spec A‚Å∞_f`, we send it to `{a | ‚àÄ i, a·µ¢·µê/f‚Å± ‚àà q}`; we need this to be a
    homogeneous prime ideal that is relevant.
    * This is in fact an ideal, the proof can be found in
      `Proj_iso_Spec_Top_component.from_Spec.carrier.as_ideal`;
    * This ideal is also homogeneous, the proof can be found in
      `Proj_iso_Spec_Top_component.from_Spec.carrier.as_ideal.homogeneous`;
    * This ideal is relevant, the proof can be found in
      `Proj_iso_Spec_Top_component.from_Spec.carrier.relevant`;
    * This ideal is prime, the proof can be found in
      `Proj_iso_Spec_Top_component.from_Spec.carrier.prime`.
    Hence we have a well defined function `Spec.T A‚Å∞_f ‚Üí Proj.T | (pbo f)`, this function is called
    `Proj_iso_Spec_Top_component.from_Spec.to_fun`. But to prove the continuity of this function,
    we need to prove `from_Spec ‚àò to_Spec` and `to_Spec ‚àò from_Spec` are both identities (TBC).

## Main Definitions and Statements

* `degree_zero_part`: the degree zero part of the localized ring `A‚Çì` where `x` is a homogeneous
  element of degree `n` is the subring of elements of the form `a/f^m` where `a` has degree `mn`.

For a homogeneous element `f` of degree `n`
* `Proj_iso_Spec_Top_component.to_Spec`: `forward f` is the
  continuous map between `Proj.T| pbo f` and `Spec.T A‚Å∞_f`
* `Proj_iso_Spec_Top_component.to_Spec.preimage_eq`: for any `a: A`, if `a/f^m` has degree zero,
  then the preimage of `sbo a/f^m` under `to_Spec f` is `pbo f ‚à© pbo a`.

* [Robin Hartshorne, *Algebraic Geometry*][Har77]: Chapter II.2 Proposition 2.5
-/


noncomputable section

namespace AlgebraicGeometry

open scoped DirectSum BigOperators Pointwise BigOperators

open DirectSum SetLike.GradedMonoid Localization

open Finset hiding mk_zero

variable {R A : Type _}

variable [CommRing R] [CommRing A] [Algebra R A]

variable (ùíú : ‚Ñï ‚Üí Submodule R A)

variable [GradedAlgebra ùíú]

open TopCat TopologicalSpace

open CategoryTheory Opposite

open ProjectiveSpectrum.StructureSheaf

local notation "Proj" => Proj.toLocallyRingedSpace ùíú

-- `Proj` as a locally ringed space
local notation "Proj.T" => Proj.1.1.1

-- the underlying topological space of `Proj`
local notation "Proj| " U => Proj.restrict (Opens.openEmbedding (U : Opens Proj.T))

-- `Proj` restrict to some open set
local notation "Proj.T| " U =>
  (Proj.restrict (Opens.openEmbedding (U : Opens Proj.T))).toSheafedSpace.toPresheafedSpace.1

-- the underlying topological space of `Proj` restricted to some open set
local notation "pbo " x => ProjectiveSpectrum.basicOpen ùíú x

-- basic open sets in `Proj`
local notation "sbo " f => PrimeSpectrum.basicOpen f

-- basic open sets in `Spec`
local notation "Spec " ring => Spec.locallyRingedSpaceObj (CommRingCat.of Ring)

-- `Spec` as a locally ringed space
local notation "Spec.T " ring =>
  (Spec.locallyRingedSpaceObj (CommRingCat.of Ring)).toSheafedSpace.toPresheafedSpace.1

-- the underlying topological space of `Spec`
local notation "A‚Å∞_ " f => HomogeneousLocalization.Away ùíú f

namespace ProjIsoSpecTopComponent

/-
This section is to construct the homeomorphism between `Proj` restricted at basic open set at
a homogeneous element `x` and `Spec A‚Å∞‚Çì` where `A‚Å∞‚Çì` is the degree zero part of the localized
ring `A‚Çì`.
-/
namespace ToSpec

open Ideal

-- This section is to construct the forward direction :
-- So for any `x` in `Proj| (pbo f)`, we need some point in `Spec A‚Å∞_f`, i.e. a prime ideal,
-- and we need this correspondence to be continuous in their Zariski topology.
variable {ùíú} {f : A} {m : ‚Ñï} (f_deg : f ‚àà ùíú m) (x : Proj| pbo f)

/--
For any `x` in `Proj| (pbo f)`, the corresponding ideal in `Spec A‚Å∞_f`. This fact that this ideal
is prime is proven in `Top_component.forward.to_fun`-/
def carrier : Ideal (A‚Å∞_ f) :=
  Ideal.comap (algebraMap (A‚Å∞_ f) (Away f))
    (Ideal.span <| algebraMap A (Away f) '' x.val.asHomogeneousIdeal)
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.carrier AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.carrier

theorem mem_carrier_iff (z : A‚Å∞_ f) :
    z ‚àà carrier ùíú x ‚Üî z.val ‚àà Ideal.span (algebraMap A (Away f) '' x.1.asHomogeneousIdeal) :=
  Iff.rfl
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.mem_carrier_iff AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.mem_carrier_iff

theorem MemCarrier.clear_denominator' [DecidableEq (Away f)] {z : Localization.Away f}
    (hz : z ‚àà span (algebraMap A (Away f) '' x.val.asHomogeneousIdeal)) :
    ‚àÉ (c : algebraMap A (Away f) '' x.1.asHomogeneousIdeal ‚Üí‚ÇÄ Away f) (N : ‚Ñï) (acd :
      ‚àÄ y ‚àà c.support.image c, A),
      f ^ N ‚Ä¢ z =
        algebraMap A (Away f)
          (‚àë i in c.support.attach,
            acd (c i) (Finset.mem_image.mpr ‚ü®i, ‚ü®i.2, rfl‚ü©‚ü©) * i.1.2.some) :=
  by
  rw [‚Üê submodule_span_eq, Finsupp.span_eq_range_total, LinearMap.mem_range] at hz 
  rcases hz with ‚ü®c, eq1‚ü©
  rw [Finsupp.total_apply, Finsupp.sum] at eq1 
  obtain ‚ü®‚ü®_, N, rfl‚ü©, hN‚ü© :=
    IsLocalization.exist_integer_multiples_of_finset (Submonoid.powers f) (c.support.image c)
  choose acd hacd using hN
  refine' ‚ü®c, N, acd, _‚ü©
  rw [‚Üê eq1, smul_sum, map_sum, ‚Üê sum_attach]
  congr 1
  ext i
  rw [_root_.map_mul, hacd, (Classical.choose_spec i.1.2).2, smul_eq_mul, smul_mul_assoc]
  rfl
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.mem_carrier.clear_denominator' AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.MemCarrier.clear_denominator'

theorem MemCarrier.clear_denominator [DecidableEq (Away f)] {z : A‚Å∞_ f} (hz : z ‚àà carrier ùíú x) :
    ‚àÉ (c : algebraMap A (Away f) '' x.1.asHomogeneousIdeal ‚Üí‚ÇÄ Away f) (N : ‚Ñï) (acd :
      ‚àÄ y ‚àà c.support.image c, A),
      f ^ N ‚Ä¢ z.val =
        algebraMap A (Away f)
          (‚àë i in c.support.attach,
            acd (c i) (Finset.mem_image.mpr ‚ü®i, ‚ü®i.2, rfl‚ü©‚ü©) * i.1.2.some) :=
  MemCarrier.clear_denominator' x <| (mem_carrier_iff ùíú x z).mpr hz
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.mem_carrier.clear_denominator AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.MemCarrier.clear_denominator

theorem disjoint : Disjoint (x.1.asHomogeneousIdeal.toIdeal : Set A) (Submonoid.powers f : Set A) :=
  by
  by_contra rid
  rw [Set.not_disjoint_iff] at rid 
  choose g hg using rid
  obtain ‚ü®hg1, ‚ü®k, rfl‚ü©‚ü© := hg
  by_cases k_ineq : 0 < k
  ¬∑ erw [x.1.IsPrime.pow_mem_iff_mem _ k_ineq] at hg1 
    exact x.2 hg1
  ¬∑ erw [show k = 0 by linarith, pow_zero, ‚Üê Ideal.eq_top_iff_one] at hg1 
    apply x.1.IsPrime.1
    exact hg1
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.disjoint AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.disjoint

theorem carrier_ne_top : carrier ùíú x ‚â† ‚ä§ :=
  by
  have eq_top := Disjoint x
  classical
  contrapose! eq_top
  obtain ‚ü®c, N, acd, eq1‚ü© := mem_carrier.clear_denominator _ x ((Ideal.eq_top_iff_one _).mp eq_top)
  rw [Algebra.smul_def, HomogeneousLocalization.one_val, mul_one] at eq1 
  change Localization.mk (f ^ N) 1 = mk (‚àë _, _) 1 at eq1 
  simp only [mk_eq_mk', IsLocalization.eq] at eq1 
  rcases eq1 with ‚ü®‚ü®_, ‚ü®M, rfl‚ü©‚ü©, eq1‚ü©
  erw [one_mul, one_mul] at eq1 
  change f ^ _ * f ^ _ = f ^ _ * _ at eq1 
  rw [Set.not_disjoint_iff_nonempty_inter]
  refine'
    ‚ü®f ^ M * f ^ N, eq1.symm ‚ñ∏ mul_mem_left _ _ (sum_mem _ fun i hi => mul_mem_left _ _ _),
      ‚ü®M + N, by rw [pow_add]‚ü©‚ü©
  generalize_proofs h‚ÇÅ h‚ÇÇ
  exact (Classical.choose_spec h‚ÇÇ).1
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.carrier_ne_top AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.carrier_ne_top

variable (f)

/-- The function between the basic open set `D(f)` in `Proj` to the corresponding basic open set in
`Spec A‚Å∞_f`. This is bundled into a continuous map in `Top_component.forward`.
-/
def toFun (x : Proj.T| pbo f) : Spec.T A‚Å∞_ f :=
  ‚ü®carrier ùíú x, carrier_ne_top x, fun x1 x2 hx12 => by
    classical
    simp only [mem_carrier_iff] at hx12 ‚ä¢
    let J := span (‚áë(algebraMap A (away f)) '' x.val.as_homogeneous_ideal)
    suffices h : ‚àÄ x y : Localization.Away f, x * y ‚àà J ‚Üí x ‚àà J ‚à® y ‚àà J
    ¬∑ rw [HomogeneousLocalization.mul_val] at hx12 ; exact h x1.val x2.val hx12
    clear x1 x2 hx12
    intro x1 x2 hx12
    induction' x1 using Localization.induction_on with data_x1
    induction' x2 using Localization.induction_on with data_x2
    rcases data_x1, data_x2 with ‚ü®‚ü®a1, _, ‚ü®n1, rfl‚ü©‚ü©, ‚ü®a2, _, ‚ü®n2, rfl‚ü©‚ü©‚ü©
    rcases mem_carrier.clear_denominator' x hx12 with ‚ü®c, N, acd, eq1‚ü©
    simp only [Algebra.smul_def] at eq1 
    change Localization.mk (f ^ N) 1 * (mk _ _ * mk _ _) = mk (‚àë _, _) _ at eq1 
    simp only [Localization.mk_mul, one_mul] at eq1 
    simp only [mk_eq_mk', IsLocalization.eq] at eq1 
    rcases eq1 with ‚ü®‚ü®_, ‚ü®M, rfl‚ü©‚ü©, eq1‚ü©
    rw [Submonoid.coe_one, one_mul] at eq1 
    change f ^ _ * (_ * _) = f ^ _ * (f ^ _ * f ^ _ * _) at eq1 
    rcases x.1.IsPrime.mem_or_mem (show a1 * a2 * f ^ N * f ^ M ‚àà _ from _) with (h1 | rid2)
    rcases x.1.IsPrime.mem_or_mem h1 with (h1 | rid1)
    rcases x.1.IsPrime.mem_or_mem h1 with (h1 | h2)
    ¬∑ left;
      simp only [show (mk a1 ‚ü®f ^ n1, _‚ü© : away f) = mk a1 1 * mk 1 ‚ü®f ^ n1, ‚ü®n1, rfl‚ü©‚ü© by
          rw [Localization.mk_mul, mul_one, one_mul]]
      exact Ideal.mul_mem_right _ _ (Ideal.subset_span ‚ü®_, h1, rfl‚ü©)
    ¬∑ right;
      simp only [show (mk a2 ‚ü®f ^ n2, _‚ü© : away f) = mk a2 1 * mk 1 ‚ü®f ^ n2, ‚ü®n2, rfl‚ü©‚ü© by
          rw [Localization.mk_mul, mul_one, one_mul]]
      exact Ideal.mul_mem_right _ _ (Ideal.subset_span ‚ü®_, h2, rfl‚ü©)
    ¬∑ exact False.elim (x.2 (x.1.IsPrime.mem_of_pow_mem N rid1))
    ¬∑ exact False.elim (x.2 (x.1.IsPrime.mem_of_pow_mem M rid2))
    ¬∑ rw [‚Üê mul_comm (f ^ M), ‚Üê mul_comm (f ^ N), eq1]
      refine' mul_mem_left _ _ (mul_mem_left _ _ (sum_mem _ fun i hi => mul_mem_left _ _ _))
      generalize_proofs h‚ÇÅ h‚ÇÇ; exact (Classical.choose_spec h‚ÇÇ).1‚ü©
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.to_fun AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.toFun

/-
The preimage of basic open set `D(a/f^n)` in `Spec A‚Å∞_f` under the forward map from `Proj A` to
`Spec A‚Å∞_f` is the basic open set `D(a) ‚à© D(f)` in  `Proj A`. This lemma is used to prove that the
forward map is continuous.
-/
theorem preimage_eq (a b : A) (k : ‚Ñï) (a_mem : a ‚àà ùíú k) (b_mem1 : b ‚àà ùíú k)
    (b_mem2 : b ‚àà Submonoid.powers f) :
    toFun ùíú f ‚Åª¬π'
        (@PrimeSpectrum.basicOpen (A‚Å∞_ f) _ (Quotient.mk'' ‚ü®k, ‚ü®a, a_mem‚ü©, ‚ü®b, b_mem1‚ü©, b_mem2‚ü©) :
          Set (PrimeSpectrum (HomogeneousLocalization.Away ùíú f))) =
      {x | x.1 ‚àà (pbo f) ‚äì pbo a} :=
  by
  classical
  ext1 y
  constructor <;> intro hy
  ¬∑ refine' ‚ü®y.2, _‚ü©
    rw [Set.mem_preimage, SetLike.mem_coe, PrimeSpectrum.mem_basicOpen] at hy 
    rw [ProjectiveSpectrum.mem_coe_basicOpen]
    intro a_mem_y
    apply hy
    rw [to_fun, mem_carrier_iff, HomogeneousLocalization.val_mk'', Subtype.coe_mk]
    dsimp; rcases b_mem2 with ‚ü®k, hk‚ü©
    simp only [show (mk a ‚ü®b, ‚ü®k, hk‚ü©‚ü© : away f) = mk 1 ‚ü®f ^ k, ‚ü®_, rfl‚ü©‚ü© * mk a 1 by
        rw [mk_mul, one_mul, mul_one]; congr; rw [hk]]
    exact Ideal.mul_mem_left _ _ (Ideal.subset_span ‚ü®_, a_mem_y, rfl‚ü©)
  ¬∑ change y.1 ‚àà _ at hy 
    rcases hy with ‚ü®hy1, hy2‚ü©
    rw [ProjectiveSpectrum.mem_coe_basicOpen] at hy1 hy2 
    rw [Set.mem_preimage, to_fun, SetLike.mem_coe, PrimeSpectrum.mem_basicOpen]
    intro rid; dsimp at rid 
    rcases mem_carrier.clear_denominator ùíú _ rid with ‚ü®c, N, acd, eq1‚ü©
    rw [Algebra.smul_def] at eq1 
    change Localization.mk (f ^ N) 1 * mk _ _ = mk (‚àë _, _) _ at eq1 
    rw [mk_mul, one_mul, mk_eq_mk', IsLocalization.eq] at eq1 
    rcases eq1 with ‚ü®‚ü®_, ‚ü®M, rfl‚ü©‚ü©, eq1‚ü©
    rw [Submonoid.coe_one, one_mul] at eq1 
    simp only [Subtype.coe_mk] at eq1 
    rcases y.1.IsPrime.mem_or_mem (show a * f ^ N * f ^ M ‚àà _ from _) with (H1 | H3)
    rcases y.1.IsPrime.mem_or_mem H1 with (H1 | H2)
    ¬∑ exact hy2 H1
    ¬∑ exact y.2 (y.1.IsPrime.mem_of_pow_mem N H2)
    ¬∑ exact y.2 (y.1.IsPrime.mem_of_pow_mem M H3)
    ¬∑ rw [mul_comm _ (f ^ N), mul_comm _ (f ^ M), eq1]
      refine' mul_mem_left _ _ (mul_mem_left _ _ (sum_mem _ fun i hi => mul_mem_left _ _ _))
      generalize_proofs h‚ÇÅ h‚ÇÇ; exact (Classical.choose_spec h‚ÇÇ).1
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.preimage_eq AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.preimage_eq

end ToSpec

section

variable {ùíú}

/-- The continuous function between the basic open set `D(f)` in `Proj` to the corresponding basic
open set in `Spec A‚Å∞_f`.
-/
def toSpec {f : A} : (Proj.T| pbo f) ‚ü∂ Spec.T A‚Å∞_ f
    where
  toFun := ToSpec.toFun ùíú f
  continuous_toFun :=
    by
    apply is_topological_basis.continuous PrimeSpectrum.isTopologicalBasis_basic_opens
    rintro _ ‚ü®‚ü®k, ‚ü®a, ha‚ü©, ‚ü®b, hb1‚ü©, ‚ü®k', hb2‚ü©‚ü©, rfl‚ü©; dsimp
    erw [to_Spec.preimage_eq f a b k ha hb1 ‚ü®k', hb2‚ü©]
    refine' is_open_induced_iff.mpr ‚ü®(pbo f).1 ‚äì (pbo a).1, IsOpen.inter (pbo f).2 (pbo a).2, _‚ü©
    ext z; constructor <;> intro hz <;> simpa [Set.mem_preimage]
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec AlgebraicGeometry.ProjIsoSpecTopComponent.toSpec

end

namespace FromSpec

open GradedAlgebra SetLike

open Finset hiding mk_zero

open _Root_.HomogeneousLocalization

variable {ùíú} {f : A} {m : ‚Ñï} (f_deg : f ‚àà ùíú m)

/- ./././Mathport/Syntax/Translate/Expr.lean:336:4: warning: unsupported (TODO): `[tacs] -/
/- ./././Mathport/Syntax/Translate/Expr.lean:336:4: warning: unsupported (TODO): `[tacs] -/
private unsafe def mem_tac : tactic Unit :=
  let b : tactic Unit := sorry
  b <|> sorry

/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
/-- The function from `Spec A‚Å∞_f` to `Proj|D(f)` is defined by `q ‚Ü¶ {a | a·µ¢·µê/f‚Å± ‚àà q}`, i.e. sending
`q` a prime ideal in `A‚Å∞_f` to the homogeneous prime relevant ideal containing only and all the
elements `a : A` such that for every `i`, the degree 0 element formed by dividing the `m`-th power
of the `i`-th projection of `a` by the `i`-th power of the degree-`m` homogeneous element `f`,
lies in `q`.

The set `{a | a·µ¢·µê/f‚Å± ‚àà q}`
* is an ideal, as proved in `carrier.as_ideal`;
* is homogeneous, as proved in `carrier.as_homogeneous_ideal`;
* is prime, as proved in `carrier.as_ideal.prime`;
* is relevant, as proved in `carrier.relevant`.
-/
def carrier (q : Spec.T A‚Å∞_ f) : Set A :=
  {a |
    ‚àÄ i,
      (Quotient.mk''
            ‚ü®m * i,
              ‚ü®proj ùíú i a ^ m, by
                run_tac
                  mem_tac‚ü©,
              ‚ü®f ^ i, by
                rw [mul_comm] <;>
                  run_tac
                    mem_tac‚ü©,
              ‚ü®_, rfl‚ü©‚ü© :
          A‚Å∞_ f) ‚àà
        q.1}
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier

/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
theorem mem_carrier_iff (q : Spec.T A‚Å∞_ f) (a : A) :
    a ‚àà carrier f_deg q ‚Üî
      ‚àÄ i,
        (Quotient.mk''
              ‚ü®m * i,
                ‚ü®proj ùíú i a ^ m, by
                  run_tac
                    mem_tac‚ü©,
                ‚ü®f ^ i, by
                  rw [mul_comm] <;>
                    run_tac
                      mem_tac‚ü©,
                ‚ü®_, rfl‚ü©‚ü© :
            A‚Å∞_ f) ‚àà
          q.1 :=
  Iff.rfl
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.mem_carrier_iff AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.mem_carrier_iff

theorem mem_carrier_iff' (q : Spec.T A‚Å∞_ f) (a : A) :
    a ‚àà carrier f_deg q ‚Üî
      ‚àÄ i,
        (Localization.mk (proj ùíú i a ^ m) ‚ü®f ^ i, ‚ü®i, rfl‚ü©‚ü© : Localization.Away f) ‚àà
          algebraMap (HomogeneousLocalization.Away ùíú f) (Localization.Away f) '' q.1.1 :=
  (mem_carrier_iff f_deg q a).trans
    (by
      constructor <;> intro h i <;> specialize h i
      ¬∑ rw [Set.mem_image]; refine' ‚ü®_, h, rfl‚ü©
      ¬∑ rw [Set.mem_image] at h ; rcases h with ‚ü®x, h, hx‚ü©
        convert h; rw [ext_iff_val, val_mk']; dsimp only [Subtype.coe_mk]; rw [‚Üê hx]; rfl)
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.mem_carrier_iff' AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.mem_carrier_iff'

/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
theorem carrier.add_mem (q : Spec.T A‚Å∞_ f) {a b : A} (ha : a ‚àà carrier f_deg q)
    (hb : b ‚àà carrier f_deg q) : a + b ‚àà carrier f_deg q :=
  by
  refine' fun i => (q.2.mem_or_mem _).elim id id
  change (Quotient.mk'' ‚ü®_, _, _, _‚ü© : A‚Å∞_ f) ‚àà q.1; dsimp only [Subtype.coe_mk]
  simp_rw [‚Üê pow_add, map_add, add_pow, mul_comm, ‚Üê nsmul_eq_mul]
  let g : ‚Ñï ‚Üí A‚Å∞_ f := fun j =>
    (m + m).choose j ‚Ä¢
      if h2 : m + m < j then 0
      else
        if h1 : j ‚â§ m then
          Quotient.mk''
              ‚ü®m * i, ‚ü®proj ùíú i a ^ j * proj ùíú i b ^ (m - j), _‚ü©,
                ‚ü®_, by
                  rw [mul_comm] <;>
                    run_tac
                      mem_tac‚ü©,
                ‚ü®i, rfl‚ü©‚ü© *
            Quotient.mk''
              ‚ü®m * i,
                ‚ü®proj ùíú i b ^ m, by
                  run_tac
                    mem_tac‚ü©,
                ‚ü®_, by
                  rw [mul_comm] <;>
                    run_tac
                      mem_tac‚ü©,
                ‚ü®i, rfl‚ü©‚ü©
        else
          Quotient.mk''
              ‚ü®m * i,
                ‚ü®proj ùíú i a ^ m, by
                  run_tac
                    mem_tac‚ü©,
                ‚ü®_, by
                  rw [mul_comm] <;>
                    run_tac
                      mem_tac‚ü©,
                ‚ü®i, rfl‚ü©‚ü© *
            Quotient.mk''
              ‚ü®m * i, ‚ü®proj ùíú i a ^ (j - m) * proj ùíú i b ^ (m + m - j), _‚ü©,
                ‚ü®_, by
                  rw [mul_comm] <;>
                    run_tac
                      mem_tac‚ü©,
                ‚ü®i, rfl‚ü©‚ü©
  rotate_left
  ¬∑ rw [(_ : m * i = _)];
    run_tac
      mem_tac;
    rw [‚Üê add_smul, Nat.add_sub_of_le h1]; rfl
  ¬∑ rw [(_ : m * i = _)];
    run_tac
      mem_tac;
    rw [‚Üê add_smul]; congr; zify [le_of_not_lt h2, le_of_not_le h1]; abel
  convert_to ‚àë i in range (m + m + 1), g i ‚àà q.1; swap
  ¬∑ refine' q.1.sum_mem fun j hj => nsmul_mem _ _; split_ifs
    exacts [q.1.zero_mem, q.1.mul_mem_left _ (hb i), q.1.mul_mem_right _ (ha i)]
  rw [ext_iff_val, val_mk']
  change _ = (algebraMap (HomogeneousLocalization.Away ùíú f) (Localization.Away f)) _
  dsimp only [Subtype.coe_mk]; rw [map_sum, mk_sum]
  apply Finset.sum_congr rfl fun j hj => _
  change _ = HomogeneousLocalization.val _
  rw [HomogeneousLocalization.smul_val]
  split_ifs with h2 h1
  ¬∑ exact ((Finset.mem_range.1 hj).not_le h2).elim
  all_goals simp only [mul_val, zero_val, val_mk', Subtype.coe_mk, mk_mul, ‚Üê smul_mk]; congr 2
  ¬∑ rw [mul_assoc, ‚Üê pow_add, add_comm (m - j), Nat.add_sub_assoc h1]; ¬∑ simp_rw [pow_add]; rfl
  ¬∑ rw [‚Üê mul_assoc, ‚Üê pow_add, Nat.add_sub_of_le (le_of_not_le h1)]; ¬∑ simp_rw [pow_add]; rfl
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.add_mem AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.add_mem

variable (hm : 0 < m) (q : Spec.T A‚Å∞_ f)

theorem carrier.zero_mem : (0 : A) ‚àà carrier f_deg q := fun i =>
  by
  convert Submodule.zero_mem q.1 using 1
  rw [ext_iff_val, val_mk', zero_val]; simp_rw [map_zero, zero_pow hm]
  convert Localization.mk_zero _ using 1
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.zero_mem AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.zero_mem

/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1624094475.mem_tac -/
theorem carrier.smul_mem (c x : A) (hx : x ‚àà carrier f_deg q) : c ‚Ä¢ x ‚àà carrier f_deg q :=
  by
  revert c
  refine' DirectSum.Decomposition.inductionOn ùíú _ _ _
  ¬∑ rw [zero_smul]; exact carrier.zero_mem f_deg hm _
  ¬∑ rintro n ‚ü®a, ha‚ü© i
    simp_rw [Subtype.coe_mk, proj_apply, smul_eq_mul, coe_decompose_mul_of_left_mem ùíú i ha]
    split_ifs
    ¬∑ convert_to
        (Quotient.mk'' ‚ü®_, ‚ü®a ^ m, pow_mem_graded m ha‚ü©, ‚ü®_, _‚ü©, ‚ü®n, rfl‚ü©‚ü© *
              Quotient.mk''
                ‚ü®_,
                  ‚ü®proj ùíú (i - n) x ^ m, by
                    run_tac
                      mem_tac‚ü©,
                  ‚ü®_, _‚ü©, ‚ü®i - n, rfl‚ü©‚ü© :
            A‚Å∞_ f) ‚àà
          q.1
      ¬∑ erw [ext_iff_val, val_mk', mul_val, val_mk', val_mk', Subtype.coe_mk]
        simp_rw [mul_pow, Subtype.coe_mk]; rw [Localization.mk_mul]
        congr; erw [‚Üê pow_add, Nat.add_sub_of_le h]
      ¬∑ exact Ideal.mul_mem_left _ _ (hx _); rw [smul_eq_mul, mul_comm];
        run_tac
          mem_tac
    ¬∑ simp_rw [zero_pow hm]; convert carrier.zero_mem f_deg hm q i; rw [map_zero, zero_pow hm]
  ¬∑ simp_rw [add_smul]; exact fun _ _ => carrier.add_mem f_deg q
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.smul_mem AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.smul_mem

/-- For a prime ideal `q` in `A‚Å∞_f`, the set `{a | a·µ¢·µê/f‚Å± ‚àà q}` as an ideal.
-/
def carrier.asIdeal : Ideal A where
  carrier := carrier f_deg q
  zero_mem' := carrier.zero_mem f_deg hm q
  add_mem' a b := carrier.add_mem f_deg q
  smul_mem' := carrier.smul_mem f_deg hm q
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.as_ideal AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.asIdeal

theorem carrier.asIdeal.homogeneous : (carrier.asIdeal f_deg hm q).Homogeneous ùíú := fun i a ha j =>
  (em (i = j)).elim (fun h => h ‚ñ∏ by simpa only [proj_apply, decompose_coe, of_eq_same] using ha _)
    fun h =>
    by
    simp only [proj_apply, decompose_of_mem_ne ùíú (Submodule.coe_mem (decompose ùíú a i)) h,
      zero_pow hm]
    convert carrier.zero_mem f_deg hm q j; rw [map_zero, zero_pow hm]
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.as_ideal.homogeneous AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.asIdeal.homogeneous

/-- For a prime ideal `q` in `A‚Å∞_f`, the set `{a | a·µ¢·µê/f‚Å± ‚àà q}` as a homogeneous ideal.
-/
def carrier.asHomogeneousIdeal : HomogeneousIdeal ùíú :=
  ‚ü®carrier.asIdeal f_deg hm q, carrier.asIdeal.homogeneous f_deg hm q‚ü©
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.as_homogeneous_ideal AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.asHomogeneousIdeal

theorem carrier.denom_not_mem : f ‚àâ carrier.asIdeal f_deg hm q := fun rid =>
  q.IsPrime.ne_top <|
    (Ideal.eq_top_iff_one _).mpr
      (by
        convert rid m
        simpa only [ext_iff_val, one_val, proj_apply, decompose_of_mem_same _ f_deg, val_mk'] using
          (mk_self (‚ü®_, m, rfl‚ü© : Submonoid.powers f)).symm)
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.denom_not_mem AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.denom_not_mem

theorem carrier.relevant : ¬¨HomogeneousIdeal.irrelevant ùíú ‚â§ carrier.asHomogeneousIdeal f_deg hm q :=
  fun rid => carrier.denom_not_mem f_deg hm q <| rid <| DirectSum.decompose_of_mem_ne ùíú f_deg hm.ne'
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.relevant AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.relevant

theorem carrier.asIdeal.ne_top : carrier.asIdeal f_deg hm q ‚â† ‚ä§ := fun rid =>
  carrier.denom_not_mem f_deg hm q (rid.symm ‚ñ∏ Submodule.mem_top)
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.as_ideal.ne_top AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.asIdeal.ne_top

theorem carrier.asIdeal.prime : (carrier.asIdeal f_deg hm q).IsPrime :=
  (carrier.asIdeal.homogeneous f_deg hm q).isPrime_of_homogeneous_mem_or_mem
    (carrier.asIdeal.ne_top f_deg hm q) fun x y ‚ü®nx, hnx‚ü© ‚ü®ny, hny‚ü© hxy =>
    show (‚àÄ i, _ ‚àà _) ‚à® ‚àÄ i, _ ‚àà _
      by
      rw [‚Üê and_forall_ne nx, and_iff_left, ‚Üê and_forall_ne ny, and_iff_left]
      ¬∑ apply q.2.mem_or_mem; convert hxy (nx + ny) using 1
        simp_rw [proj_apply, decompose_of_mem_same ùíú hnx, decompose_of_mem_same ùíú hny,
          decompose_of_mem_same ùíú (mul_mem hnx hny), mul_pow, pow_add]
        simpa only [ext_iff_val, val_mk', mul_val, mk_mul]
      all_goals
        intro n hn; convert q.1.zero_mem using 1
        rw [ext_iff_val, val_mk', zero_val]; simp_rw [proj_apply, Subtype.coe_mk]
        convert mk_zero _; rw [decompose_of_mem_ne ùíú _ hn.symm, zero_pow hm]
        ¬∑
          first
          | exact hnx
          | exact hny
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.as_ideal.prime AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.asIdeal.prime

variable (f_deg)

/-- The function `Spec A‚Å∞_f ‚Üí Proj|D(f)` by sending `q` to `{a | a·µ¢·µê/f‚Å± ‚àà q}`.
-/
def toFun : (Spec.T A‚Å∞_ f) ‚Üí Proj.T| pbo f := fun q =>
  ‚ü®‚ü®carrier.asHomogeneousIdeal f_deg hm q, carrier.asIdeal.prime f_deg hm q,
      carrier.relevant f_deg hm q‚ü©,
    (ProjectiveSpectrum.mem_basicOpen _ f _).mp <| carrier.denom_not_mem f_deg hm q‚ü©
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.to_fun AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.toFun

end FromSpec

end ProjIsoSpecTopComponent

end AlgebraicGeometry

