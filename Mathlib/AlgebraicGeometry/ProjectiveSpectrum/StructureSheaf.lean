/-
Copyright (c) 2022 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang
-/
import Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Topology
import Mathlib.Topology.Sheaves.LocalPredicate
import Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization
import Mathlib.Geometry.RingedSpace.LocallyRingedSpace

#align_import algebraic_geometry.projective_spectrum.structure_sheaf from "leanprover-community/mathlib"@"486cb2f3bda4a67557c6285f5bd0c3348c1eea81"

/-!
# The structure sheaf on `projective_spectrum ùíú`.

In `Mathlib.AlgebraicGeometry.Topology`, we have given a topology on `ProjectiveSpectrum ùíú`; in
this file we will construct a sheaf on `ProjectiveSpectrum ùíú`.

## Notation
- `R` is a commutative semiring;
- `A` is a commutative ring and an `R`-algebra;
- `ùíú : ‚Ñï ‚Üí Submodule R A` is the grading of `A`;
- `U` is opposite object of some open subset of `ProjectiveSpectrum.top`.

## Main definitions and results
We define the structure sheaf as the subsheaf of all dependent function
`f : Œ† x : U, HomogeneousLocalization ùíú x` such that `f` is locally expressible as ratio of two
elements of the *same grading*, i.e. `‚àÄ y ‚àà U, ‚àÉ (V ‚äÜ U) (i : ‚Ñï) (a b ‚àà ùíú i), ‚àÄ z ‚àà V, f z = a / b`.

* `AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.isLocallyFraction`: the predicate that
  a dependent function is locally expressible as a ratio of two elements of the same grading.
* `AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.sectionsSubring`: the dependent functions
  satisfying the above local property forms a subring of all dependent functions
  `Œ† x : U, HomogeneousLocalization ùíú x`.
* `AlgebraicGeometry.Proj.StructureSheaf`: the sheaf with `U ‚Ü¶ sectionsSubring U` and natural
  restriction map.

Then we establish that `Proj ùíú` is a `LocallyRingedSpace`:
* `AlgebraicGeometry.Proj.stalkIso'`: for any `x : ProjectiveSpectrum ùíú`, the stalk of
  `Proj.StructureSheaf` at `x` is isomorphic to `HomogeneousLocalization ùíú x`.
* `AlgebraicGeometry.Proj.toLocallyRingedSpace`: `Proj` as a locally ringed space.

## References

* [Robin Hartshorne, *Algebraic Geometry*][Har77]


-/


noncomputable section

namespace AlgebraicGeometry

open scoped DirectSum BigOperators Pointwise

open DirectSum SetLike Localization TopCat TopologicalSpace CategoryTheory Opposite

variable {R A : Type*}
variable [CommRing R] [CommRing A] [Algebra R A]
variable (ùíú : ‚Ñï ‚Üí Submodule R A) [GradedAlgebra ùíú]

local notation3 "at " x =>
  HomogeneousLocalization.AtPrime ùíú
    (HomogeneousIdeal.toIdeal (ProjectiveSpectrum.asHomogeneousIdeal x))

namespace ProjectiveSpectrum.StructureSheaf

variable {ùíú}

/-- The predicate saying that a dependent function on an open `U` is realised as a fixed fraction
`r / s` of *same grading* in each of the stalks (which are localizations at various prime ideals).
-/
def IsFraction {U : Opens (ProjectiveSpectrum.top ùíú)} (f : ‚àÄ x : U, at x.1) : Prop :=
  ‚àÉ (i : ‚Ñï) (r s : ùíú i) (s_nin : ‚àÄ x : U, s.1 ‚àâ x.1.asHomogeneousIdeal),
    ‚àÄ x : U, f x = Quotient.mk'' ‚ü®i, r, s, s_nin x‚ü©
#align algebraic_geometry.projective_spectrum.structure_sheaf.is_fraction AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.IsFraction
variable (ùíú)

/--
The predicate `IsFraction` is "prelocal", in the sense that if it holds on `U` it holds on any open
subset `V` of `U`.
-/
def isFractionPrelocal : PrelocalPredicate fun x : ProjectiveSpectrum.top ùíú => at x where
  pred f := IsFraction f
  res := by rintro V U i f ‚ü®j, r, s, h, w‚ü©; exact ‚ü®j, r, s, (h <| i ¬∑), (w <| i ¬∑)‚ü©
#align algebraic_geometry.projective_spectrum.structure_sheaf.is_fraction_prelocal AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.isFractionPrelocal

/-- We will define the structure sheaf as the subsheaf of all dependent functions in
`Œ† x : U, HomogeneousLocalization ùíú x` consisting of those functions which can locally be expressed
as a ratio of `A` of same grading. -/
def isLocallyFraction : LocalPredicate fun x : ProjectiveSpectrum.top ùíú => at x :=
  (isFractionPrelocal ùíú).sheafify
#align algebraic_geometry.projective_spectrum.structure_sheaf.is_locally_fraction AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.isLocallyFraction

namespace SectionSubring

variable {ùíú}

open Submodule SetLike.GradedMonoid HomogeneousLocalization

theorem zeroMem' (U : (Opens (ProjectiveSpectrum.top ùíú))·µí·µñ) :
    (isLocallyFraction ùíú).pred (0 : ‚àÄ x : U.unop, at x.1) := fun x =>
  ‚ü®unop U, x.2, ùüô (unop U), ‚ü®0, ‚ü®0, zero_mem _‚ü©, ‚ü®1, one_mem_graded _‚ü©, _, fun _ => rfl‚ü©‚ü©
#align algebraic_geometry.projective_spectrum.structure_sheaf.section_subring.zero_mem' AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.SectionSubring.zeroMem'

theorem oneMem' (U : (Opens (ProjectiveSpectrum.top ùíú))·µí·µñ) :
    (isLocallyFraction ùíú).pred (1 : ‚àÄ x : U.unop, at x.1) := fun x =>
  ‚ü®unop U, x.2, ùüô (unop U), ‚ü®0, ‚ü®1, one_mem_graded _‚ü©, ‚ü®1, one_mem_graded _‚ü©, _, fun _ => rfl‚ü©‚ü©
#align algebraic_geometry.projective_spectrum.structure_sheaf.section_subring.one_mem' AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.SectionSubring.oneMem'

theorem addMem' (U : (Opens (ProjectiveSpectrum.top ùíú))·µí·µñ) (a b : ‚àÄ x : U.unop, at x.1)
    (ha : (isLocallyFraction ùíú).pred a) (hb : (isLocallyFraction ùíú).pred b) :
    (isLocallyFraction ùíú).pred (a + b) := fun x => by
  rcases ha x with ‚ü®Va, ma, ia, ja, ‚ü®ra, ra_mem‚ü©, ‚ü®sa, sa_mem‚ü©, hwa, wa‚ü©
  rcases hb x with ‚ü®Vb, mb, ib, jb, ‚ü®rb, rb_mem‚ü©, ‚ü®sb, sb_mem‚ü©, hwb, wb‚ü©
  refine'
    ‚ü®Va ‚äì Vb, ‚ü®ma, mb‚ü©, Opens.infLELeft _ _ ‚â´ ia, ja + jb,
      ‚ü®sb * ra + sa * rb,
        add_mem (add_comm jb ja ‚ñ∏ mul_mem_graded sb_mem ra_mem : sb * ra ‚àà ùíú (ja + jb))
          (mul_mem_graded sa_mem rb_mem)‚ü©,
      ‚ü®sa * sb, mul_mem_graded sa_mem sb_mem‚ü©, fun y ‚Ü¶
        y.1.asHomogeneousIdeal.toIdeal.primeCompl.mul_mem (hwa ‚ü®y.1, y.2.1‚ü©) (hwb ‚ü®y.1, y.2.2‚ü©),
      fun y => _‚ü©
  simp only at wa wb
  simp only [Pi.add_apply, wa ‚ü®y.1, y.2.1‚ü©, wb ‚ü®y.1, y.2.2‚ü©, ext_iff_val,
    add_val, val_mk'', add_mk, add_comm (sa * rb)]
  rfl
#align algebraic_geometry.projective_spectrum.structure_sheaf.section_subring.add_mem' AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.SectionSubring.addMem'

theorem negMem' (U : (Opens (ProjectiveSpectrum.top ùíú))·µí·µñ) (a : ‚àÄ x : U.unop, at x.1)
    (ha : (isLocallyFraction ùíú).pred a) : (isLocallyFraction ùíú).pred (-a) := fun x => by
  rcases ha x with ‚ü®V, m, i, j, ‚ü®r, r_mem‚ü©, ‚ü®s, s_mem‚ü©, nin, hy‚ü©
  refine' ‚ü®V, m, i, j, ‚ü®-r, Submodule.neg_mem _ r_mem‚ü©, ‚ü®s, s_mem‚ü©, nin, fun y => _‚ü©
  simp only [ext_iff_val, val_mk''] at hy
  simp only [Pi.neg_apply, ext_iff_val, neg_val, hy, val_mk'', neg_mk]
#align algebraic_geometry.projective_spectrum.structure_sheaf.section_subring.neg_mem' AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.SectionSubring.negMem'

theorem mulMem' (U : (Opens (ProjectiveSpectrum.top ùíú))·µí·µñ) (a b : ‚àÄ x : U.unop, at x.1)
    (ha : (isLocallyFraction ùíú).pred a) (hb : (isLocallyFraction ùíú).pred b) :
    (isLocallyFraction ùíú).pred (a * b) := fun x => by
  rcases ha x with ‚ü®Va, ma, ia, ja, ‚ü®ra, ra_mem‚ü©, ‚ü®sa, sa_mem‚ü©, hwa, wa‚ü©
  rcases hb x with ‚ü®Vb, mb, ib, jb, ‚ü®rb, rb_mem‚ü©, ‚ü®sb, sb_mem‚ü©, hwb, wb‚ü©
  refine'
    ‚ü®Va ‚äì Vb, ‚ü®ma, mb‚ü©, Opens.infLELeft _ _ ‚â´ ia, ja + jb,
      ‚ü®ra * rb, SetLike.mul_mem_graded ra_mem rb_mem‚ü©,
      ‚ü®sa * sb, SetLike.mul_mem_graded sa_mem sb_mem‚ü©, fun y =>
      y.1.asHomogeneousIdeal.toIdeal.primeCompl.mul_mem (hwa ‚ü®y.1, y.2.1‚ü©) (hwb ‚ü®y.1, y.2.2‚ü©),
      fun y ‚Ü¶ _‚ü©
  simp only [Pi.mul_apply, wa ‚ü®y.1, y.2.1‚ü©, wb ‚ü®y.1, y.2.2‚ü©, ext_iff_val, mul_val, val_mk'', mk_mul]
  rfl
#align algebraic_geometry.projective_spectrum.structure_sheaf.section_subring.mul_mem' AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.SectionSubring.mulMem'

end SectionSubring

section

open SectionSubring

variable {ùíú}

/-- The functions satisfying `isLocallyFraction` form a subring of all dependent functions
`Œ† x : U, HomogeneousLocalization ùíú x`. -/
def sectionsSubring (U : (Opens (ProjectiveSpectrum.top ùíú))·µí·µñ) :
    Subring (‚àÄ x : U.unop, at x.1) where
  carrier := {f | (isLocallyFraction ùíú).pred f}
  zero_mem' := zeroMem' U
  one_mem' := oneMem' U
  add_mem' := addMem' U _ _
  neg_mem' := negMem' U _
  mul_mem' := mulMem' U _ _
#align algebraic_geometry.projective_spectrum.structure_sheaf.sections_subring AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.sectionsSubring

end

/-- The structure sheaf (valued in `Type`, not yet `CommRing`) is the subsheaf consisting of
functions satisfying `isLocallyFraction`. -/
def structureSheafInType : Sheaf (Type _) (ProjectiveSpectrum.top ùíú) :=
  subsheafToTypes (isLocallyFraction ùíú)
#align algebraic_geometry.projective_spectrum.structure_sheaf.structure_sheaf_in_Type AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.structureSheafInType

instance commRingStructureSheafInTypeObj (U : (Opens (ProjectiveSpectrum.top ùíú))·µí·µñ) :
    CommRing ((structureSheafInType ùíú).1.obj U) :=
  (sectionsSubring U).toCommRing
#align algebraic_geometry.projective_spectrum.structure_sheaf.comm_ring_structure_sheaf_in_Type_obj AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.commRingStructureSheafInTypeObj

/-- The structure presheaf, valued in `CommRing`, constructed by dressing up the `Type` valued
structure presheaf. -/
@[simps]
def structurePresheafInCommRing : Presheaf CommRingCat (ProjectiveSpectrum.top ùíú) where
  obj U := CommRingCat.of ((structureSheafInType ùíú).1.obj U)
  map i :=
    { toFun := (structureSheafInType ùíú).1.map i
      map_zero' := rfl
      map_add' := fun x y => rfl
      map_one' := rfl
      map_mul' := fun x y => rfl }
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.projective_spectrum.structure_sheaf.structure_presheaf_in_CommRing AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.structurePresheafInCommRing

-- These lemmas have always been bad (#7657), but leanprover/lean4#2644 made `simp` start noticing
attribute [nolint simpNF]
  AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.structurePresheafInCommRing_map_apply

/-- Some glue, verifying that that structure presheaf valued in `CommRing` agrees with the `Type`
valued structure presheaf. -/
def structurePresheafCompForget :
    structurePresheafInCommRing ùíú ‚ãô forget CommRingCat ‚âÖ (structureSheafInType ùíú).1 :=
  NatIso.ofComponents (fun U => Iso.refl _) (by aesop_cat)
#align algebraic_geometry.projective_spectrum.structure_sheaf.structure_presheaf_comp_forget AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf.structurePresheafCompForget

end ProjectiveSpectrum.StructureSheaf

namespace ProjectiveSpectrum

open TopCat.Presheaf ProjectiveSpectrum.StructureSheaf Opens

/-- The structure sheaf on `Proj` ùíú, valued in `CommRing`. -/
def Proj.structureSheaf : Sheaf CommRingCat (ProjectiveSpectrum.top ùíú) :=
  ‚ü®structurePresheafInCommRing ùíú,
    (-- We check the sheaf condition under `forget CommRing`.
          isSheaf_iff_isSheaf_comp
          _ _).mpr
      (isSheaf_of_iso (structurePresheafCompForget ùíú).symm (structureSheafInType ùíú).cond)‚ü©
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.projective_spectrum.Proj.structure_sheaf AlgebraicGeometry.ProjectiveSpectrum.Proj.structureSheaf

end ProjectiveSpectrum

section

open ProjectiveSpectrum ProjectiveSpectrum.StructureSheaf Opens

@[simp]
theorem Proj.res_apply (U V : (Opens (ProjectiveSpectrum.top ùíú))·µí·µñ) (i : V ‚ü∂ U)
    (s : (Proj.structureSheaf ùíú).1.obj V) (x : U.unop) :
    ((Proj.structureSheaf ùíú).1.map i s).1 x = (s.1 (i.unop x) : _) :=
  rfl
#align algebraic_geometry.res_apply AlgebraicGeometry.Proj.res_apply

/-- `Proj` of a graded ring as a `SheafedSpace`-/
def Proj.toSheafedSpace : SheafedSpace CommRingCat where
  carrier := TopCat.of (ProjectiveSpectrum ùíú)
  presheaf := (Proj.structureSheaf ùíú).1
  IsSheaf := (Proj.structureSheaf ùíú).2
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.Proj.to_SheafedSpace AlgebraicGeometry.Proj.toSheafedSpace

/-- The ring homomorphism that takes a section of the structure sheaf of `Proj` on the open set `U`,
implemented as a subtype of dependent functions to localizations at homogeneous prime ideals, and
evaluates the section on the point corresponding to a given homogeneous prime ideal. -/
def openToLocalization (U : Opens (ProjectiveSpectrum.top ùíú)) (x : ProjectiveSpectrum.top ùíú)
    (hx : x ‚àà U) : (Proj.structureSheaf ùíú).1.obj (op U) ‚ü∂ CommRingCat.of (at x) where
  toFun s := (s.1 ‚ü®x, hx‚ü© : _)
  map_one' := rfl
  map_mul' _ _ := rfl
  map_zero' := rfl
  map_add' _ _ := rfl
#align algebraic_geometry.open_to_localization AlgebraicGeometry.openToLocalization

/-- The ring homomorphism from the stalk of the structure sheaf of `Proj` at a point corresponding
to a homogeneous prime ideal `x` to the *homogeneous localization* at `x`,
formed by gluing the `openToLocalization` maps. -/
def stalkToFiberRingHom (x : ProjectiveSpectrum.top ùíú) :
    (Proj.structureSheaf ùíú).presheaf.stalk x ‚ü∂ CommRingCat.of (at x) :=
  Limits.colimit.desc ((OpenNhds.inclusion x).op ‚ãô (Proj.structureSheaf ùíú).1)
    { pt := _
      Œπ :=
        { app := fun U =>
            openToLocalization ùíú ((OpenNhds.inclusion _).obj U.unop) x U.unop.2 } }
#align algebraic_geometry.stalk_to_fiber_ring_hom AlgebraicGeometry.stalkToFiberRingHom

@[simp]
theorem germ_comp_stalkToFiberRingHom (U : Opens (ProjectiveSpectrum.top ùíú)) (x : U) :
    (Proj.structureSheaf ùíú).presheaf.germ x ‚â´ stalkToFiberRingHom ùíú x =
      openToLocalization ùíú U x x.2 :=
  Limits.colimit.Œπ_desc _ _
#align algebraic_geometry.germ_comp_stalk_to_fiber_ring_hom AlgebraicGeometry.germ_comp_stalkToFiberRingHom

@[simp]
theorem stalkToFiberRingHom_germ' (U : Opens (ProjectiveSpectrum.top ùíú))
    (x : ProjectiveSpectrum.top ùíú) (hx : x ‚àà U) (s : (Proj.structureSheaf ùíú).1.obj (op U)) :
    stalkToFiberRingHom ùíú x ((Proj.structureSheaf ùíú).presheaf.germ ‚ü®x, hx‚ü© s) = (s.1 ‚ü®x, hx‚ü© : _) :=
  RingHom.ext_iff.1 (germ_comp_stalkToFiberRingHom ùíú U ‚ü®x, hx‚ü© : _) s
#align algebraic_geometry.stalk_to_fiber_ring_hom_germ' AlgebraicGeometry.stalkToFiberRingHom_germ'

@[simp]
theorem stalkToFiberRingHom_germ (U : Opens (ProjectiveSpectrum.top ùíú)) (x : U)
    (s : (Proj.structureSheaf ùíú).1.obj (op U)) :
    stalkToFiberRingHom ùíú x ((Proj.structureSheaf ùíú).presheaf.germ x s) = s.1 x :=
  stalkToFiberRingHom_germ' ùíú U _ _ _
#align algebraic_geometry.stalk_to_fiber_ring_hom_germ AlgebraicGeometry.stalkToFiberRingHom_germ

theorem mem_basicOpen_den (x : ProjectiveSpectrum.top ùíú)
    (f : HomogeneousLocalization.NumDenSameDeg ùíú x.asHomogeneousIdeal.toIdeal.primeCompl) :
    x ‚àà ProjectiveSpectrum.basicOpen ùíú f.den := by
  rw [ProjectiveSpectrum.mem_basicOpen]
  exact f.den_mem
#align algebraic_geometry.homogeneous_localization.mem_basic_open AlgebraicGeometry.mem_basicOpen_den

/-- Given a point `x` corresponding to a homogeneous prime ideal, there is a (dependent) function
such that, for any `f` in the homogeneous localization at `x`, it returns the obvious section in the
basic open set `D(f.den)`-/
def sectionInBasicOpen (x : ProjectiveSpectrum.top ùíú) :
    ‚àÄ f : HomogeneousLocalization.NumDenSameDeg ùíú x.asHomogeneousIdeal.toIdeal.primeCompl,
    (Proj.structureSheaf ùíú).1.obj (op (ProjectiveSpectrum.basicOpen ùíú f.den)) :=
  fun f =>
  ‚ü®fun y => Quotient.mk'' ‚ü®f.deg, f.num, f.den, y.2‚ü©, fun y =>
    ‚ü®ProjectiveSpectrum.basicOpen ùíú f.den, y.2,
      ‚ü®ùüô _, ‚ü®f.deg, ‚ü®f.num, f.den, _, fun _ => rfl‚ü©‚ü©‚ü©‚ü©‚ü©
#align algebraic_geometry.section_in_basic_open AlgebraicGeometry.sectionInBasicOpen

open HomogeneousLocalization in
/-- Given any point `x` and `f` in the homogeneous localization at `x`, there is an element in the
stalk at `x` obtained by `sectionInBasicOpen`. This is the inverse of `stalkToFiberRingHom`.
-/
def homogeneousLocalizationToStalk (x : ProjectiveSpectrum.top ùíú) (y : at x) :
    (Proj.structureSheaf ùíú).presheaf.stalk x := Quotient.liftOn' y (fun f =>
  (Proj.structureSheaf ùíú).presheaf.germ ‚ü®x, mem_basicOpen_den _ x f‚ü© (sectionInBasicOpen _ x f))
  fun f g (e : f.embedding = g.embedding) ‚Ü¶ by
    simp only [HomogeneousLocalization.NumDenSameDeg.embedding, Localization.mk_eq_mk',
      IsLocalization.mk'_eq_iff_eq,
      IsLocalization.eq_iff_exists x.asHomogeneousIdeal.toIdeal.primeCompl] at e
    obtain ‚ü®‚ü®c, hc‚ü©, hc'‚ü© := e
    apply (Proj.structureSheaf ùíú).presheaf.germ_ext
      (ProjectiveSpectrum.basicOpen ùíú f.den.1 ‚äì
        ProjectiveSpectrum.basicOpen ùíú g.den.1 ‚äì ProjectiveSpectrum.basicOpen ùíú c)
      ‚ü®‚ü®mem_basicOpen_den _ x f, mem_basicOpen_den _ x g‚ü©, hc‚ü©
      (homOfLE inf_le_left ‚â´ homOfLE inf_le_left) (homOfLE inf_le_left ‚â´ homOfLE inf_le_right)
    apply Subtype.ext
    ext ‚ü®t, ‚ü®htf, htg‚ü©, ht'‚ü©
    apply HomogeneousLocalization.val_injective
    rw [Proj.res_apply, Proj.res_apply]
    simp only [sectionInBasicOpen, HomogeneousLocalization.val_mk'', Localization.mk_eq_mk',
      IsLocalization.mk'_eq_iff_eq]
    apply (IsLocalization.map_units (M := t.asHomogeneousIdeal.toIdeal.primeCompl)
      (Localization t.asHomogeneousIdeal.toIdeal.primeCompl) ‚ü®c, ht'‚ü©).mul_left_cancel
    rw [‚Üê map_mul, ‚Üê map_mul, hc']
#align algebraic_geometry.homogeneous_localization_to_stalk AlgebraicGeometry.homogeneousLocalizationToStalk

lemma homogeneousLocalizationToStalk_stalkToFiberRingHom (x z) :
    homogeneousLocalizationToStalk ùíú x (stalkToFiberRingHom ùíú x z) = z := by
  obtain ‚ü®U, hxU, s, rfl‚ü© := (Proj.structureSheaf ùíú).presheaf.germ_exist x z
  obtain ‚ü®V, hxV, i, n, a, b, h, e‚ü© := s.2 ‚ü®x, hxU‚ü©
  simp only at e
  rw [stalkToFiberRingHom_germ', homogeneousLocalizationToStalk, e ‚ü®x, hxV‚ü©, Quotient.liftOn'_mk'']
  refine Presheaf.germ_ext _ V hxV (by exact homOfLE <| fun _ h' ‚Ü¶ h ‚ü®_, h'‚ü©) i ?_
  apply Subtype.ext
  ext ‚ü®t, ht‚ü©
  apply HomogeneousLocalization.val_injective
  rw [Proj.res_apply, Proj.res_apply]
  simp only [sectionInBasicOpen, HomogeneousLocalization.val_mk'', Localization.mk_eq_mk',
    IsLocalization.mk'_eq_iff_eq, e ‚ü®t, ht‚ü©]

lemma stalkToFiberRingHom_homogeneousLocalizationToStalk (x z) :
    stalkToFiberRingHom ùíú x (homogeneousLocalizationToStalk ùíú x z) = z := by
  obtain ‚ü®z, rfl‚ü© := Quotient.surjective_Quotient_mk'' z
  rw [homogeneousLocalizationToStalk, Quotient.liftOn'_mk'',
    stalkToFiberRingHom_germ', sectionInBasicOpen]

/-- Using `homogeneousLocalizationToStalk`, we construct a ring isomorphism between stalk at `x`
and homogeneous localization at `x` for any point `x` in `Proj`. -/
def Proj.stalkIso' (x : ProjectiveSpectrum.top ùíú) :
    (Proj.structureSheaf ùíú).presheaf.stalk x ‚âÉ+* at x where
  __ := stalkToFiberRingHom _ x
  invFun := homogeneousLocalizationToStalk ùíú x
  left_inv := homogeneousLocalizationToStalk_stalkToFiberRingHom ùíú x
  right_inv := stalkToFiberRingHom_homogeneousLocalizationToStalk ùíú x
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.Proj.stalk_iso' AlgebraicGeometry.Proj.stalkIso'

@[simp]
theorem Proj.stalkIso'_germ' (U : Opens (ProjectiveSpectrum.top ùíú))
    (x : ProjectiveSpectrum.top ùíú) (hx : x ‚àà U) (s : (Proj.structureSheaf ùíú).1.obj (op U)) :
    Proj.stalkIso' ùíú x ((Proj.structureSheaf ùíú).presheaf.germ ‚ü®x, hx‚ü© s) = (s.1 ‚ü®x, hx‚ü© : _) :=
  stalkToFiberRingHom_germ' ùíú U x hx s

@[simp]
theorem Proj.stalkIso'_germ (U : Opens (ProjectiveSpectrum.top ùíú)) (x : U)
    (s : (Proj.structureSheaf ùíú).1.obj (op U)) :
    Proj.stalkIso' ùíú x ((Proj.structureSheaf ùíú).presheaf.germ x s) = s.1 x :=
  stalkToFiberRingHom_germ' ùíú U x x.2 s

@[simp]
theorem Proj.stalkIso'_symm_mk'' (x) (f) :
    ((Proj.stalkIso' ùíú x).symm (Quotient.mk'' f)) = (Proj.structureSheaf ùíú).presheaf.germ
      ‚ü®x, mem_basicOpen_den _ x f‚ü© (sectionInBasicOpen _ x f) := rfl

/-- `Proj` of a graded ring as a `LocallyRingedSpace`-/
def Proj.toLocallyRingedSpace : LocallyRingedSpace :=
  { Proj.toSheafedSpace ùíú with
    localRing := fun x =>
      @RingEquiv.localRing _ _ _ (show LocalRing (at x) from inferInstance) _
        (Proj.stalkIso' ùíú x).symm }
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.Proj.to_LocallyRingedSpace AlgebraicGeometry.Proj.toLocallyRingedSpace

end

end AlgebraicGeometry
