/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.AlgebraicGeometry.AffineScheme
import Mathlib.RingTheory.Nilpotent
import Mathlib.Topology.Sheaves.SheafCondition.Sites
import Mathlib.Algebra.Category.Ring.Constructions
import Mathlib.RingTheory.LocalProperties

#align_import algebraic_geometry.properties from "leanprover-community/mathlib"@"88474d1b5af6d37c2ab728b757771bced7f5194c"

/-!
# Basic properties of schemes

We provide some basic properties of schemes

## Main definition
* `AlgebraicGeometry.IsIntegral`: A scheme is integral if it is nontrivial and all nontrivial
  components of the structure sheaf are integral domains.
* `AlgebraicGeometry.IsReduced`: A scheme is reduced if all the components of the structure sheaf
  are reduced.
-/


open TopologicalSpace Opposite CategoryTheory CategoryTheory.Limits TopCat

namespace AlgebraicGeometry

variable (X : Scheme)

instance : T0Space X.carrier := by
  refine' T0Space.of_open_cover fun x => _
  obtain ‚ü®U, R, ‚ü®e‚ü©‚ü© := X.local_affine x
  let e' : U.1 ‚âÉ‚Çú PrimeSpectrum R :=
    homeoOfIso ((LocallyRingedSpace.forgetToSheafedSpace ‚ãô SheafedSpace.forget _).mapIso e)
  exact ‚ü®U.1.1, U.2, U.1.2, e'.embedding.t0Space‚ü©

instance : QuasiSober X.carrier := by
  apply (config := { allowSynthFailures := true })
    quasiSober_of_open_cover (Set.range fun x => Set.range <| (X.affineCover.map x).1.base)
  ¬∑ rintro ‚ü®_, i, rfl‚ü©; exact (X.affineCover.IsOpen i).base_open.open_range
  ¬∑ rintro ‚ü®_, i, rfl‚ü©
    exact @OpenEmbedding.quasiSober _ _ _ _ _ (Homeomorph.ofEmbedding _
      (X.affineCover.IsOpen i).base_open.toEmbedding).symm.openEmbedding PrimeSpectrum.quasiSober
  ¬∑ rw [Set.top_eq_univ, Set.sUnion_range, Set.eq_univ_iff_forall]
    intro x; exact ‚ü®_, ‚ü®_, rfl‚ü©, X.affineCover.Covers x‚ü©

/-- A scheme `X` is reduced if all `ùí™‚Çì(U)` are reduced. -/
class IsReduced : Prop where
  component_reduced : ‚àÄ U, IsReduced (X.presheaf.obj (op U)) := by infer_instance
#align algebraic_geometry.is_reduced AlgebraicGeometry.IsReduced

attribute [instance] IsReduced.component_reduced

theorem isReducedOfStalkIsReduced [‚àÄ x : X.carrier, _root_.IsReduced (X.presheaf.stalk x)] :
    IsReduced X := by
  refine' ‚ü®fun U => ‚ü®fun s hs => _‚ü©‚ü©
  apply Presheaf.section_ext X.sheaf U s 0
  intro x
  rw [RingHom.map_zero]
  change X.presheaf.germ x s = 0
  exact (hs.map _).eq_zero
#align algebraic_geometry.is_reduced_of_stalk_is_reduced AlgebraicGeometry.isReducedOfStalkIsReduced

instance stalk_isReduced_of_reduced [IsReduced X] (x : X.carrier) :
    _root_.IsReduced (X.presheaf.stalk x) := by
  constructor
  rintro g ‚ü®n, e‚ü©
  obtain ‚ü®U, hxU, s, rfl‚ü© := X.presheaf.germ_exist x g
  rw [‚Üê map_pow, ‚Üê map_zero (X.presheaf.germ ‚ü®x, hxU‚ü©)] at e
  obtain ‚ü®V, hxV, iU, iV, e'‚ü© := X.presheaf.germ_eq x hxU hxU _ 0 e
  rw [map_pow, map_zero] at e'
  replace e' := (IsNilpotent.mk _ _ e').eq_zero (R := X.presheaf.obj <| op V)
  erw [‚Üê ConcreteCategory.congr_hom (X.presheaf.germ_res iU ‚ü®x, hxV‚ü©) s]
  rw [comp_apply, e', map_zero]
#align algebraic_geometry.stalk_is_reduced_of_reduced AlgebraicGeometry.stalk_isReduced_of_reduced

theorem isReducedOfOpenImmersion {X Y : Scheme} (f : X ‚ü∂ Y) [H : IsOpenImmersion f]
    [IsReduced Y] : IsReduced X := by
  constructor
  intro U
  have : U = (Opens.map f.1.base).obj (H.base_open.isOpenMap.functor.obj U) := by
    ext1; exact (Set.preimage_image_eq _ H.base_open.inj).symm
  rw [this]
  exact isReduced_of_injective (inv <| f.1.c.app (op <| H.base_open.isOpenMap.functor.obj U))
    (asIso <| f.1.c.app (op <| H.base_open.isOpenMap.functor.obj U) :
      Y.presheaf.obj _ ‚âÖ _).symm.commRingCatIsoToRingEquiv.injective
#align algebraic_geometry.is_reduced_of_open_immersion AlgebraicGeometry.isReducedOfOpenImmersion

instance {R : CommRingCat} [H : _root_.IsReduced R] : IsReduced (Scheme.Spec.obj <| op R) := by
  apply (config := { allowSynthFailures := true }) isReducedOfStalkIsReduced
  intro x; dsimp
  have : _root_.IsReduced (CommRingCat.of <| Localization.AtPrime (PrimeSpectrum.asIdeal x)) := by
    dsimp; infer_instance
  exact isReduced_of_injective (StructureSheaf.stalkIso R x).hom
    (StructureSheaf.stalkIso R x).commRingCatIsoToRingEquiv.injective

theorem affine_isReduced_iff (R : CommRingCat) :
    IsReduced (Scheme.Spec.obj <| op R) ‚Üî _root_.IsReduced R := by
  refine' ‚ü®_, fun h => inferInstance‚ü©
  intro h
  have : _root_.IsReduced
      (LocallyRingedSpace.Œì.obj (op <| Spec.toLocallyRingedSpace.obj <| op R)) := by
    change _root_.IsReduced ((Scheme.Spec.obj <| op R).presheaf.obj <| op ‚ä§); infer_instance
  exact isReduced_of_injective (toSpecŒì R) (asIso <| toSpecŒì R).commRingCatIsoToRingEquiv.injective
#align algebraic_geometry.affine_is_reduced_iff AlgebraicGeometry.affine_isReduced_iff

theorem isReducedOfIsAffineIsReduced [IsAffine X] [h : _root_.IsReduced (X.presheaf.obj (op ‚ä§))] :
    IsReduced X :=
  haveI : IsReduced (Scheme.Spec.obj (op (Scheme.Œì.obj (op X)))) := by
    rw [affine_isReduced_iff]; exact h
  isReducedOfOpenImmersion X.isoSpec.hom
#align algebraic_geometry.is_reduced_of_is_affine_is_reduced AlgebraicGeometry.isReducedOfIsAffineIsReduced

/-- To show that a statement `P` holds for all open subsets of all schemes, it suffices to show that
1. In any scheme `X`, if `P` holds for an open cover of `U`, then `P` holds for `U`.
2. For an open immerison `f : X ‚ü∂ Y`, if `P` holds for the entire space of `X`, then `P` holds for
  the image of `f`.
3. `P` holds for the entire space of an affine scheme.
-/
theorem reduce_to_affine_global (P : ‚àÄ (X : Scheme) (_ : Opens X.carrier), Prop)
    (h‚ÇÅ : ‚àÄ (X : Scheme) (U : Opens X.carrier),
      (‚àÄ x : U, ‚àÉ (V : _) (_ : x.1 ‚àà V) (_ : V ‚ü∂ U), P X V) ‚Üí P X U)
    (h‚ÇÇ : ‚àÄ {X Y} (f : X ‚ü∂ Y) [hf : IsOpenImmersion f],
      ‚àÉ (U : Set X.carrier) (V : Set Y.carrier) (hU : U = ‚ä§) (hV : V = Set.range f.1.base),
        P X ‚ü®U, hU.symm ‚ñ∏ isOpen_univ‚ü© ‚Üí P Y ‚ü®V, hV.symm ‚ñ∏ hf.base_open.open_range‚ü©)
    (h‚ÇÉ : ‚àÄ R : CommRingCat, P (Scheme.Spec.obj <| op R) ‚ä§) :
    ‚àÄ (X : Scheme) (U : Opens X.carrier), P X U := by
  intro X U
  apply h‚ÇÅ
  intro x
  obtain ‚ü®_, ‚ü®j, rfl‚ü©, hx, i‚ü© :=
    X.affineBasisCover_is_basis.exists_subset_of_mem_open (SetLike.mem_coe.2 x.prop) U.isOpen
  let U' : Opens _ := ‚ü®_, (X.affineBasisCover.IsOpen j).base_open.open_range‚ü©
  let i' : U' ‚ü∂ U := homOfLE i
  refine' ‚ü®U', hx, i', _‚ü©
  obtain ‚ü®_, _, rfl, rfl, h‚ÇÇ'‚ü© := h‚ÇÇ (X.affineBasisCover.map j)
  apply h‚ÇÇ'
  apply h‚ÇÉ
#align algebraic_geometry.reduce_to_affine_global AlgebraicGeometry.reduce_to_affine_global

theorem reduce_to_affine_nbhd (P : ‚àÄ (X : Scheme) (_ : X.carrier), Prop)
    (h‚ÇÅ : ‚àÄ (R : CommRingCat) (x : PrimeSpectrum R), P (Scheme.Spec.obj <| op R) x)
    (h‚ÇÇ : ‚àÄ {X Y} (f : X ‚ü∂ Y) [IsOpenImmersion f] (x : X.carrier), P X x ‚Üí P Y (f.1.base x)) :
    ‚àÄ (X : Scheme) (x : X.carrier), P X x := by
  intro X x
  obtain ‚ü®y, e‚ü© := X.affineCover.Covers x
  convert h‚ÇÇ (X.affineCover.map (X.affineCover.f x)) y _
  ¬∑ rw [e]
  apply h‚ÇÅ
#align algebraic_geometry.reduce_to_affine_nbhd AlgebraicGeometry.reduce_to_affine_nbhd

theorem eq_zero_of_basicOpen_eq_bot {X : Scheme} [hX : IsReduced X] {U : Opens X.carrier}
    (s : X.presheaf.obj (op U)) (hs : X.basicOpen s = ‚ä•) : s = 0 := by
  apply TopCat.Presheaf.section_ext X.sheaf U
  conv => intro x; rw [RingHom.map_zero]
  refine' (@reduce_to_affine_global (fun X U =>
     ‚àÄ [IsReduced X] (s : X.presheaf.obj (op U)),
       X.basicOpen s = ‚ä• ‚Üí ‚àÄ x, (X.sheaf.presheaf.germ x) s = 0) _ _ _) X U s hs
  ¬∑ intro X U hx hX s hs x
    obtain ‚ü®V, hx, i, H‚ü© := hx x
    specialize H (X.presheaf.map i.op s)
    erw [Scheme.basicOpen_res] at H
    rw [hs] at H
    specialize H inf_bot_eq ‚ü®x, hx‚ü©
    erw [TopCat.Presheaf.germ_res_apply] at H
    exact H
  ¬∑ rintro X Y f hf
    have e : f.val.base ‚Åª¬π' Set.range ‚Üëf.val.base = Set.univ := by
      rw [‚Üê Set.image_univ, Set.preimage_image_eq _ hf.base_open.inj]
    refine' ‚ü®_, _, e, rfl, _‚ü©
    rintro H hX s hs ‚ü®_, x, rfl‚ü©
    haveI := isReducedOfOpenImmersion f
    specialize H (f.1.c.app _ s) _ ‚ü®x, by rw [Opens.mem_mk, e]; trivial‚ü©
    ¬∑ rw [‚Üê Scheme.preimage_basicOpen, hs]; ext1; simp [Opens.map]
    ¬∑ erw [‚Üê PresheafedSpace.stalkMap_germ_apply f.1 ‚ü®_, _‚ü© ‚ü®x, _‚ü©] at H
      apply_fun inv <| PresheafedSpace.stalkMap f.val x at H
      erw [CategoryTheory.IsIso.hom_inv_id_apply, map_zero] at H
      exact H
  ¬∑ intro R hX s hs x
    erw [basicOpen_eq_of_affine', PrimeSpectrum.basicOpen_eq_bot_iff] at hs
    replace hs := hs.map (SpecŒìIdentity.app R).inv
    -- what the hell?!
    replace hs := @IsNilpotent.eq_zero _ _ _ _ (show _ from ?_) hs
    rw [Iso.hom_inv_id_apply] at hs
    rw [hs, map_zero]
    exact @IsReduced.component_reduced _ hX ‚ä§
#align algebraic_geometry.eq_zero_of_basic_open_eq_bot AlgebraicGeometry.eq_zero_of_basicOpen_eq_bot

@[simp]
theorem basicOpen_eq_bot_iff {X : Scheme} [IsReduced X] {U : Opens X.carrier}
    (s : X.presheaf.obj <| op U) : X.basicOpen s = ‚ä• ‚Üî s = 0 := by
  refine' ‚ü®eq_zero_of_basicOpen_eq_bot s, _‚ü©
  rintro rfl
  simp
#align algebraic_geometry.basic_open_eq_bot_iff AlgebraicGeometry.basicOpen_eq_bot_iff

/-- A scheme `X` is integral if its carrier is nonempty,
and `ùí™‚Çì(U)` is an integral domain for each `U ‚â† ‚àÖ`. -/
class IsIntegral : Prop where
  nonempty : Nonempty X.carrier := by infer_instance
  component_integral : ‚àÄ (U : Opens X.carrier) [Nonempty U], IsDomain (X.presheaf.obj (op U)) := by
    infer_instance
#align algebraic_geometry.is_integral AlgebraicGeometry.IsIntegral

attribute [instance] IsIntegral.component_integral IsIntegral.nonempty

instance [h : IsIntegral X] : IsDomain (X.presheaf.obj (op ‚ä§)) :=
  @IsIntegral.component_integral _ _ _ (by
    simp only [Set.univ_nonempty, Opens.nonempty_coeSort, Opens.coe_top])

instance (priority := 900) isReducedOfIsIntegral [IsIntegral X] : IsReduced X := by
  constructor
  intro U
  cases' U.1.eq_empty_or_nonempty with h h
  ¬∑ have : U = ‚ä• := SetLike.ext' h
    haveI := CommRingCat.subsingleton_of_isTerminal (X.sheaf.isTerminalOfEqEmpty this)
    change _root_.IsReduced (X.sheaf.val.obj (op U))
    infer_instance
  ¬∑ haveI : Nonempty U := by simpa
    infer_instance
#align algebraic_geometry.is_reduced_of_is_integral AlgebraicGeometry.isReducedOfIsIntegral

instance is_irreducible_of_isIntegral [IsIntegral X] : IrreducibleSpace X.carrier := by
  by_contra H
  replace H : ¬¨IsPreirreducible (‚ä§ : Set X.carrier) := fun h =>
    H { toPreirreducibleSpace := ‚ü®h‚ü©
        toNonempty := inferInstance }
  simp_rw [isPreirreducible_iff_closed_union_closed, not_forall, not_or] at H
  rcases H with ‚ü®S, T, hS, hT, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü©
  erw [not_forall] at h‚ÇÇ h‚ÇÉ
  simp_rw [not_forall] at h‚ÇÇ h‚ÇÉ
  haveI : Nonempty (‚ü®S·∂ú, hS.1‚ü© : Opens X.carrier) := ‚ü®‚ü®_, h‚ÇÇ.choose_spec.choose_spec‚ü©‚ü©
  haveI : Nonempty (‚ü®T·∂ú, hT.1‚ü© : Opens X.carrier) := ‚ü®‚ü®_, h‚ÇÉ.choose_spec.choose_spec‚ü©‚ü©
  haveI : Nonempty (‚ü®S·∂ú, hS.1‚ü© ‚äî ‚ü®T·∂ú, hT.1‚ü© : Opens X.carrier) :=
    ‚ü®‚ü®_, Or.inl h‚ÇÇ.choose_spec.choose_spec‚ü©‚ü©
  let e : X.presheaf.obj _ ‚âÖ CommRingCat.of _ :=
    (X.sheaf.isProductOfDisjoint ‚ü®_, hS.1‚ü© ‚ü®_, hT.1‚ü© ?_).conePointUniqueUpToIso
      (CommRingCat.prodFanIsLimit _ _)
  apply (config := { allowSynthFailures := true }) false_of_nontrivial_of_product_domain
  ¬∑ exact e.symm.commRingCatIsoToRingEquiv.toMulEquiv.isDomain _
  ¬∑ apply X.toLocallyRingedSpace.component_nontrivial
  ¬∑ apply X.toLocallyRingedSpace.component_nontrivial
  ¬∑ ext x
    constructor
    ¬∑ rintro ‚ü®hS, hT‚ü©
      cases' h‚ÇÅ (show x ‚àà ‚ä§ by trivial) with h h
      exacts [hS h, hT h]
    ¬∑ intro x
      refine' x.rec (by contradiction)
#align algebraic_geometry.is_irreducible_of_is_integral AlgebraicGeometry.is_irreducible_of_isIntegral

theorem isIntegralOfIsIrreducibleIsReduced [IsReduced X] [H : IrreducibleSpace X.carrier] :
    IsIntegral X := by
  constructor; ¬∑ infer_instance
  intro U hU
  haveI := (@LocallyRingedSpace.component_nontrivial X.toLocallyRingedSpace U hU).1
  have : NoZeroDivisors
      (X.toLocallyRingedSpace.toSheafedSpace.toPresheafedSpace.presheaf.obj (op U)) := by
    refine' ‚ü®fun {a b} e => _‚ü©
    simp_rw [‚Üê basicOpen_eq_bot_iff, ‚Üê Opens.not_nonempty_iff_eq_bot]
    by_contra! h
    obtain ‚ü®_, ‚ü®x, hx‚ÇÅ, rfl‚ü©, ‚ü®x, hx‚ÇÇ, e'‚ü©‚ü© :=
      nonempty_preirreducible_inter (X.basicOpen a).2 (X.basicOpen b).2 h.1 h.2
    replace e' := Subtype.eq e'
    subst e'
    replace e := congr_arg (X.presheaf.germ x) e
    rw [RingHom.map_mul, RingHom.map_zero] at e
    refine' zero_ne_one' (X.presheaf.stalk x.1) (isUnit_zero_iff.1 _)
    convert hx‚ÇÅ.mul hx‚ÇÇ
    exact e.symm
  exact NoZeroDivisors.to_isDomain _
#align algebraic_geometry.is_integral_of_is_irreducible_is_reduced AlgebraicGeometry.isIntegralOfIsIrreducibleIsReduced

theorem isIntegral_iff_is_irreducible_and_isReduced :
    IsIntegral X ‚Üî IrreducibleSpace X.carrier ‚àß IsReduced X :=
  ‚ü®fun _ => ‚ü®inferInstance, inferInstance‚ü©, fun ‚ü®_, _‚ü© =>
    isIntegralOfIsIrreducibleIsReduced X‚ü©
#align algebraic_geometry.is_integral_iff_is_irreducible_and_is_reduced AlgebraicGeometry.isIntegral_iff_is_irreducible_and_isReduced

theorem isIntegralOfOpenImmersion {X Y : Scheme} (f : X ‚ü∂ Y) [H : IsOpenImmersion f]
    [IsIntegral Y] [Nonempty X.carrier] : IsIntegral X := by
  constructor; ¬∑ infer_instance
  intro U hU
  have : U = (Opens.map f.1.base).obj (H.base_open.isOpenMap.functor.obj U) := by
    ext1; exact (Set.preimage_image_eq _ H.base_open.inj).symm
  rw [this]
  have : IsDomain (Y.presheaf.obj (op (H.base_open.isOpenMap.functor.obj U))) := by
    apply (config := { allowSynthFailures := true }) IsIntegral.component_integral
    refine' ‚ü®‚ü®_, _, hU.some.prop, rfl‚ü©‚ü©
  exact (asIso <| f.1.c.app (op <| H.base_open.isOpenMap.functor.obj U) :
    Y.presheaf.obj _ ‚âÖ _).symm.commRingCatIsoToRingEquiv.toMulEquiv.isDomain _
#align algebraic_geometry.is_integral_of_open_immersion AlgebraicGeometry.isIntegralOfOpenImmersion

instance {R : CommRingCat} [H : IsDomain R] :
    IrreducibleSpace (Scheme.Spec.obj <| op R).carrier := by
  convert PrimeSpectrum.irreducibleSpace (R := R)

instance {R : CommRingCat} [IsDomain R] : IsIntegral (Scheme.Spec.obj <| op R) :=
  isIntegralOfIsIrreducibleIsReduced _

theorem affine_isIntegral_iff (R : CommRingCat) :
    IsIntegral (Scheme.Spec.obj <| op R) ‚Üî IsDomain R :=
  ‚ü®fun _ => MulEquiv.isDomain ((Scheme.Spec.obj <| op R).presheaf.obj (op ‚ä§))
    (asIso <| toSpecŒì R).commRingCatIsoToRingEquiv.toMulEquiv, fun _ => inferInstance‚ü©
#align algebraic_geometry.affine_is_integral_iff AlgebraicGeometry.affine_isIntegral_iff

theorem isIntegralOfIsAffineIsDomain [IsAffine X] [Nonempty X.carrier]
    [h : IsDomain (X.presheaf.obj (op ‚ä§))] : IsIntegral X :=
  haveI : IsIntegral (Scheme.Spec.obj (op (Scheme.Œì.obj (op X)))) := by
    rw [affine_isIntegral_iff]; exact h
  isIntegralOfOpenImmersion X.isoSpec.hom
#align algebraic_geometry.is_integral_of_is_affine_is_domain AlgebraicGeometry.isIntegralOfIsAffineIsDomain

theorem map_injective_of_isIntegral [IsIntegral X] {U V : Opens X.carrier} (i : U ‚ü∂ V)
    [H : Nonempty U] : Function.Injective (X.presheaf.map i.op) := by
  rw [injective_iff_map_eq_zero]
  intro x hx
  rw [‚Üê basicOpen_eq_bot_iff] at hx ‚ä¢
  rw [Scheme.basicOpen_res] at hx
  revert hx
  contrapose!
  simp_rw [Ne.def, ‚Üê Opens.not_nonempty_iff_eq_bot, Classical.not_not]
  apply nonempty_preirreducible_inter U.isOpen (RingedSpace.basicOpen _ _).isOpen
  simpa using H
#align algebraic_geometry.map_injective_of_is_integral AlgebraicGeometry.map_injective_of_isIntegral

end AlgebraicGeometry
