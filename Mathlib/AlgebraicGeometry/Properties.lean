/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.AlgebraicGeometry.AffineScheme
import Mathlib.RingTheory.Nilpotent.Lemmas
import Mathlib.Topology.Sheaves.SheafCondition.Sites
import Mathlib.Algebra.Category.Ring.Constructions
import Mathlib.RingTheory.LocalProperties

/-!
# Basic properties of schemes

We provide some basic properties of schemes

## Main definition
* `AlgebraicGeometry.IsIntegral`: A scheme is integral if it is nontrivial and all nontrivial
  components of the structure sheaf are integral domains.
* `AlgebraicGeometry.IsReduced`: A scheme is reduced if all the components of the structure sheaf
  are reduced.
-/


-- Explicit universe annotations were used in this file to improve performance #12737

universe u

open TopologicalSpace Opposite CategoryTheory CategoryTheory.Limits TopCat

namespace AlgebraicGeometry

variable (X : Scheme)

instance : T0Space X := by
  refine T0Space.of_open_cover fun x => ?_
  obtain ‚ü®U, R, ‚ü®e‚ü©‚ü© := X.local_affine x
  let e' : U.1 ‚âÉ‚Çú PrimeSpectrum R :=
    homeoOfIso ((LocallyRingedSpace.forgetToSheafedSpace ‚ãô SheafedSpace.forget _).mapIso e)
  exact ‚ü®U.1.1, U.2, U.1.2, e'.embedding.t0Space‚ü©

instance : QuasiSober X := by
  apply (config := { allowSynthFailures := true })
    quasiSober_of_open_cover (Set.range fun x => Set.range <| (X.affineCover.map x).1.base)
  ¬∑ rintro ‚ü®_, i, rfl‚ü©; exact (X.affineCover.IsOpen i).base_open.isOpen_range
  ¬∑ rintro ‚ü®_, i, rfl‚ü©
    exact @OpenEmbedding.quasiSober _ _ _ _ _ (Homeomorph.ofEmbedding _
      (X.affineCover.IsOpen i).base_open.toEmbedding).symm.openEmbedding PrimeSpectrum.quasiSober
  ¬∑ rw [Set.top_eq_univ, Set.sUnion_range, Set.eq_univ_iff_forall]
    intro x; exact ‚ü®_, ‚ü®_, rfl‚ü©, X.affineCover.covers x‚ü©

/-- A scheme `X` is reduced if all `ùí™‚Çì(U)` are reduced. -/
class IsReduced : Prop where
  component_reduced : ‚àÄ U, IsReduced Œì(X, U) := by infer_instance

attribute [instance] IsReduced.component_reduced

theorem isReduced_of_isReduced_stalk [‚àÄ x : X, _root_.IsReduced (X.presheaf.stalk x)] :
    IsReduced X := by
  refine ‚ü®fun U => ‚ü®fun s hs => ?_‚ü©‚ü©
  apply Presheaf.section_ext X.sheaf U s 0
  intro x
  rw [RingHom.map_zero]
  change X.presheaf.germ x s = 0
  exact (hs.map _).eq_zero

instance isReduced_stalk_of_isReduced [IsReduced X] (x : X) :
    _root_.IsReduced (X.presheaf.stalk x) := by
  constructor
  rintro g ‚ü®n, e‚ü©
  obtain ‚ü®U, hxU, s, rfl‚ü© := X.presheaf.germ_exist x g
  rw [‚Üê map_pow, ‚Üê map_zero (X.presheaf.germ ‚ü®x, hxU‚ü©)] at e
  obtain ‚ü®V, hxV, iU, iV, e'‚ü© := X.presheaf.germ_eq x hxU hxU _ 0 e
  rw [map_pow, map_zero] at e'
  replace e' := (IsNilpotent.mk _ _ e').eq_zero (R := Œì(X, V))
  erw [‚Üê ConcreteCategory.congr_hom (X.presheaf.germ_res iU ‚ü®x, hxV‚ü©) s]
  rw [comp_apply, e', map_zero]

theorem isReduced_of_isOpenImmersion {X Y : Scheme} (f : X ‚ü∂ Y) [H : IsOpenImmersion f]
    [IsReduced Y] : IsReduced X := by
  constructor
  intro U
  have : U = f ‚Åª¬π·µÅ f ''·µÅ U := by
    ext1; exact (Set.preimage_image_eq _ H.base_open.inj).symm
  rw [this]
  exact isReduced_of_injective (inv <| f.app (f ''·µÅ U))
    (asIso <| f.app (f ''·µÅ U) : Œì(Y, f ''·µÅ U) ‚âÖ _).symm.commRingCatIsoToRingEquiv.injective

instance {R : CommRingCat.{u}} [H : _root_.IsReduced R] : IsReduced (Spec R) := by
  apply (config := { allowSynthFailures := true }) isReduced_of_isReduced_stalk
  intro x; dsimp
  have : _root_.IsReduced (CommRingCat.of <| Localization.AtPrime (PrimeSpectrum.asIdeal x)) := by
    dsimp; infer_instance
  exact isReduced_of_injective (StructureSheaf.stalkIso R x).hom
    (StructureSheaf.stalkIso R x).commRingCatIsoToRingEquiv.injective

theorem affine_isReduced_iff (R : CommRingCat) :
    IsReduced (Spec R) ‚Üî _root_.IsReduced R := by
  refine ‚ü®?_, fun h => inferInstance‚ü©
  intro h
  exact isReduced_of_injective (Scheme.ŒìSpecIso R).inv
    (Scheme.ŒìSpecIso R).symm.commRingCatIsoToRingEquiv.injective

theorem isReduced_of_isAffine_isReduced [IsAffine X] [_root_.IsReduced Œì(X, ‚ä§)] :
    IsReduced X :=
  isReduced_of_isOpenImmersion X.isoSpec.hom

/-- To show that a statement `P` holds for all open subsets of all schemes, it suffices to show that
1. In any scheme `X`, if `P` holds for an open cover of `U`, then `P` holds for `U`.
2. For an open immerison `f : X ‚ü∂ Y`, if `P` holds for the entire space of `X`, then `P` holds for
  the image of `f`.
3. `P` holds for the entire space of an affine scheme.
-/
@[elab_as_elim]
theorem reduce_to_affine_global (P : ‚àÄ {X : Scheme} (_ : X.Opens), Prop)
    {X : Scheme} (U : X.Opens)
    (h‚ÇÅ : ‚àÄ (X : Scheme) (U : X.Opens),
      (‚àÄ x : U, ‚àÉ (V : _) (_ : x.1 ‚àà V) (_ : V ‚ü∂ U), P V) ‚Üí P U)
    (h‚ÇÇ : ‚àÄ (X Y) (f : X ‚ü∂ Y) [hf : IsOpenImmersion f],
      ‚àÉ (U : Set X) (V : Set Y) (hU : U = ‚ä§) (hV : V = Set.range f.1.base),
        P ‚ü®U, hU.symm ‚ñ∏ isOpen_univ‚ü© ‚Üí P ‚ü®V, hV.symm ‚ñ∏ hf.base_open.isOpen_range‚ü©)
    (h‚ÇÉ : ‚àÄ R : CommRingCat, P (X := Spec R) ‚ä§) : P U := by
  apply h‚ÇÅ
  intro x
  obtain ‚ü®_, ‚ü®j, rfl‚ü©, hx, i‚ü© :=
    X.affineBasisCover_is_basis.exists_subset_of_mem_open (SetLike.mem_coe.2 x.prop) U.isOpen
  let U' : Opens _ := ‚ü®_, (X.affineBasisCover.IsOpen j).base_open.isOpen_range‚ü©
  let i' : U' ‚ü∂ U := homOfLE i
  refine ‚ü®U', hx, i', ?_‚ü©
  obtain ‚ü®_, _, rfl, rfl, h‚ÇÇ'‚ü© := h‚ÇÇ _ _ (X.affineBasisCover.map j)
  apply h‚ÇÇ'
  apply h‚ÇÉ

theorem reduce_to_affine_nbhd (P : ‚àÄ (X : Scheme) (_ : X), Prop)
    (h‚ÇÅ : ‚àÄ R x, P (Spec R) x)
    (h‚ÇÇ : ‚àÄ {X Y} (f : X ‚ü∂ Y) [IsOpenImmersion f] (x : X), P X x ‚Üí P Y (f.1.base x)) :
    ‚àÄ (X : Scheme) (x : X), P X x := by
  intro X x
  obtain ‚ü®y, e‚ü© := X.affineCover.covers x
  convert h‚ÇÇ (X.affineCover.map (X.affineCover.f x)) y _
  ¬∑ rw [e]
  apply h‚ÇÅ

theorem eq_zero_of_basicOpen_eq_bot {X : Scheme} [hX : IsReduced X] {U : X.Opens}
    (s : Œì(X, U)) (hs : X.basicOpen s = ‚ä•) : s = 0 := by
  apply TopCat.Presheaf.section_ext X.sheaf U
  intro x
  rw [RingHom.map_zero]
  induction U using reduce_to_affine_global generalizing hX with
  | h‚ÇÅ X U hx =>
    obtain ‚ü®V, hx, i, H‚ü© := hx x
    specialize H (X.presheaf.map i.op s)
    erw [Scheme.basicOpen_res] at H
    rw [hs] at H
    specialize H (inf_bot_eq _) ‚ü®x, hx‚ü©
    erw [TopCat.Presheaf.germ_res_apply] at H
    exact H
  | h‚ÇÇ X Y f =>
    have e : f.val.base ‚Åª¬π' Set.range ‚Üëf.val.base = Set.univ := by
      rw [‚Üê Set.image_univ, Set.preimage_image_eq _ ‚ÄπIsOpenImmersion f‚Ä∫.base_open.inj]
    refine ‚ü®_, _, e, rfl, ?_‚ü©
    rintro H hX s hs ‚ü®_, x, rfl‚ü©
    haveI := isReduced_of_isOpenImmersion f
    specialize H (f.app _ s) _ ‚ü®x, by rw [Opens.mem_mk, e]; trivial‚ü©
    ¬∑ rw [‚Üê Scheme.preimage_basicOpen, hs]; ext1; simp [Opens.map]
    ¬∑ erw [‚Üê PresheafedSpace.stalkMap_germ_apply f.1 ‚ü®_, _‚ü© ‚ü®x, _‚ü©] at H
      apply_fun inv <| f.stalkMap x at H
      erw [CategoryTheory.IsIso.hom_inv_id_apply, map_zero] at H
      exact H
  | h‚ÇÉ R =>
    rw [basicOpen_eq_of_affine', PrimeSpectrum.basicOpen_eq_bot_iff] at hs
    replace hs := (hs.map (Scheme.ŒìSpecIso R).inv).eq_zero
    rw [Iso.hom_inv_id_apply] at hs
    rw [hs, map_zero]

@[simp]
theorem basicOpen_eq_bot_iff {X : Scheme} [IsReduced X] {U : X.Opens}
    (s : Œì(X, U)) : X.basicOpen s = ‚ä• ‚Üî s = 0 := by
  refine ‚ü®eq_zero_of_basicOpen_eq_bot s, ?_‚ü©
  rintro rfl
  simp

/-- A scheme `X` is integral if its is nonempty,
and `ùí™‚Çì(U)` is an integral domain for each `U ‚â† ‚àÖ`. -/
class IsIntegral : Prop where
  nonempty : Nonempty X := by infer_instance
  component_integral : ‚àÄ (U : X.Opens) [Nonempty U], IsDomain Œì(X, U) := by infer_instance

attribute [instance] IsIntegral.component_integral IsIntegral.nonempty

instance [IsIntegral X] : IsDomain Œì(X, ‚ä§) :=
  @IsIntegral.component_integral _ _ _ ‚ü®Nonempty.some inferInstance, trivial‚ü©

instance (priority := 900) isReduced_of_isIntegral [IsIntegral X] : IsReduced X := by
  constructor
  intro U
  rcases U.1.eq_empty_or_nonempty with h | h
  ¬∑ have : U = ‚ä• := SetLike.ext' h
    haveI : Subsingleton Œì(X, U) :=
      CommRingCat.subsingleton_of_isTerminal (X.sheaf.isTerminalOfEqEmpty this)
    infer_instance
  ¬∑ haveI : Nonempty U := by simpa
    infer_instance

instance Scheme.component_nontrivial (X : Scheme.{u}) (U : X.Opens) [Nonempty U] :
    Nontrivial Œì(X, U) :=
  LocallyRingedSpace.component_nontrivial (hU := ‚Äπ_‚Ä∫)

instance irreducibleSpace_of_isIntegral [IsIntegral X] : IrreducibleSpace X := by
  by_contra H
  replace H : ¬¨IsPreirreducible (‚ä§ : Set X) := fun h =>
    H { toPreirreducibleSpace := ‚ü®h‚ü©
        toNonempty := inferInstance }
  simp_rw [isPreirreducible_iff_closed_union_closed, not_forall, not_or] at H
  rcases H with ‚ü®S, T, hS, hT, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü©
  erw [not_forall] at h‚ÇÇ h‚ÇÉ
  simp_rw [not_forall] at h‚ÇÇ h‚ÇÉ
  haveI : Nonempty (‚ü®S·∂ú, hS.1‚ü© : X.Opens) := ‚ü®‚ü®_, h‚ÇÇ.choose_spec.choose_spec‚ü©‚ü©
  haveI : Nonempty (‚ü®T·∂ú, hT.1‚ü© : X.Opens) := ‚ü®‚ü®_, h‚ÇÉ.choose_spec.choose_spec‚ü©‚ü©
  haveI : Nonempty (‚ü®S·∂ú, hS.1‚ü© ‚äî ‚ü®T·∂ú, hT.1‚ü© : X.Opens) :=
    ‚ü®‚ü®_, Or.inl h‚ÇÇ.choose_spec.choose_spec‚ü©‚ü©
  let e : Œì(X, _) ‚âÖ CommRingCat.of _ :=
    (X.sheaf.isProductOfDisjoint ‚ü®_, hS.1‚ü© ‚ü®_, hT.1‚ü© ?_).conePointUniqueUpToIso
      (CommRingCat.prodFanIsLimit _ _)
  ¬∑ have : IsDomain (Œì(X, ‚ü®S·∂ú, hS.1‚ü©) √ó Œì(X, ‚ü®T·∂ú, hT.1‚ü©)) :=
      e.symm.commRingCatIsoToRingEquiv.toMulEquiv.isDomain _
    exact false_of_nontrivial_of_product_domain Œì(X, ‚ü®S·∂ú, hS.1‚ü©) Œì(X, ‚ü®T·∂ú, hT.1‚ü©)
  ¬∑ ext x
    constructor
    ¬∑ rintro ‚ü®hS, hT‚ü©
      cases' h‚ÇÅ (show x ‚àà ‚ä§ by trivial) with h h
      exacts [hS h, hT h]
    ¬∑ simp

theorem isIntegral_of_irreducibleSpace_of_isReduced [IsReduced X] [H : IrreducibleSpace X] :
    IsIntegral X := by
  constructor; ¬∑ infer_instance
  intro U hU
  haveI := (@LocallyRingedSpace.component_nontrivial X.toLocallyRingedSpace U hU).1
  have : NoZeroDivisors
      (X.toLocallyRingedSpace.toSheafedSpace.toPresheafedSpace.presheaf.obj (op U)) := by
    refine ‚ü®fun {a b} e => ?_‚ü©
    simp_rw [‚Üê basicOpen_eq_bot_iff, ‚Üê Opens.not_nonempty_iff_eq_bot]
    by_contra! h
    obtain ‚ü®_, ‚ü®x, hx‚ÇÅ, rfl‚ü©, ‚ü®x, hx‚ÇÇ, e'‚ü©‚ü© :=
      nonempty_preirreducible_inter (X.basicOpen a).2 (X.basicOpen b).2 h.1 h.2
    replace e' := Subtype.eq e'
    subst e'
    replace e := congr_arg (X.presheaf.germ x) e
    rw [RingHom.map_mul, RingHom.map_zero] at e
    refine zero_ne_one' (X.presheaf.stalk x.1) (isUnit_zero_iff.1 ?_)
    convert hx‚ÇÅ.mul hx‚ÇÇ
    exact e.symm
  exact NoZeroDivisors.to_isDomain _

theorem isIntegral_iff_irreducibleSpace_and_isReduced :
    IsIntegral X ‚Üî IrreducibleSpace X ‚àß IsReduced X :=
  ‚ü®fun _ => ‚ü®inferInstance, inferInstance‚ü©, fun ‚ü®_, _‚ü© =>
    isIntegral_of_irreducibleSpace_of_isReduced X‚ü©

theorem isIntegral_of_isOpenImmersion {X Y : Scheme} (f : X ‚ü∂ Y) [H : IsOpenImmersion f]
    [IsIntegral Y] [Nonempty X] : IsIntegral X := by
  constructor; ¬∑ infer_instance
  intro U hU
  have : U = f ‚Åª¬π·µÅ f ''·µÅ U := by ext1; exact (Set.preimage_image_eq _ H.base_open.inj).symm
  rw [this]
  have : IsDomain Œì(Y, f ''·µÅ U) := by
    apply (config := { allowSynthFailures := true }) IsIntegral.component_integral
    exact ‚ü®‚ü®_, _, hU.some.prop, rfl‚ü©‚ü©
  exact (asIso <| f.app (f ''·µÅ U) :
    Œì(Y, f ''·µÅ U) ‚âÖ _).symm.commRingCatIsoToRingEquiv.toMulEquiv.isDomain _

instance {R : CommRingCat} [IsDomain R] : IrreducibleSpace (Spec R) := by
  convert PrimeSpectrum.irreducibleSpace (R := R)

instance {R : CommRingCat} [IsDomain R] : IsIntegral (Spec R) :=
  isIntegral_of_irreducibleSpace_of_isReduced _

theorem affine_isIntegral_iff (R : CommRingCat) :
    IsIntegral (Spec R) ‚Üî IsDomain R :=
  ‚ü®fun _ => MulEquiv.isDomain Œì(Spec R, ‚ä§)
    (Scheme.ŒìSpecIso R).symm.commRingCatIsoToRingEquiv.toMulEquiv, fun _ => inferInstance‚ü©

theorem isIntegral_of_isAffine_of_isDomain [IsAffine X] [Nonempty X] [IsDomain Œì(X, ‚ä§)] :
    IsIntegral X :=
  isIntegral_of_isOpenImmersion X.isoSpec.hom

theorem map_injective_of_isIntegral [IsIntegral X] {U V : X.Opens} (i : U ‚ü∂ V)
    [H : Nonempty U] : Function.Injective (X.presheaf.map i.op) := by
  rw [injective_iff_map_eq_zero]
  intro x hx
  rw [‚Üê basicOpen_eq_bot_iff] at hx ‚ä¢
  rw [Scheme.basicOpen_res] at hx
  revert hx
  contrapose!
  simp_rw [Ne, ‚Üê Opens.not_nonempty_iff_eq_bot, Classical.not_not]
  apply nonempty_preirreducible_inter U.isOpen (RingedSpace.basicOpen _ _).isOpen
  simpa using H

end AlgebraicGeometry
