/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.AlgebraicGeometry.Morphisms.ClosedImmersion
import Mathlib.AlgebraicGeometry.PullbackCarrier
import Mathlib.Topology.LocalAtTarget

/-!
# Universally closed morphism

A morphism of schemes `f : X ‚ü∂ Y` is universally closed if `X √ó[Y] Y' ‚ü∂ Y'` is a closed map
for all base change `Y' ‚ü∂ Y`.
This implies that `f` is topologically proper (`AlgebraicGeometry.Scheme.Hom.isProperMap`).

We show that being universally closed is local at the target, and is stable under compositions and
base changes.

-/


noncomputable section

open CategoryTheory CategoryTheory.Limits Opposite TopologicalSpace

universe v u

namespace AlgebraicGeometry

variable {X Y : Scheme.{u}} (f : X ‚ü∂ Y)

open CategoryTheory.MorphismProperty

/-- A morphism of schemes `f : X ‚ü∂ Y` is universally closed if the base change `X √ó[Y] Y' ‚ü∂ Y'`
along any morphism `Y' ‚ü∂ Y` is (topologically) a closed map.
-/
@[mk_iff]
class UniversallyClosed (f : X ‚ü∂ Y) : Prop where
  out : universally (topologically @IsClosedMap) f

lemma Scheme.Hom.isClosedMap {X Y : Scheme} (f : X.Hom Y) [UniversallyClosed f] :
    IsClosedMap f.base := UniversallyClosed.out _ _ _ IsPullback.of_id_snd

theorem universallyClosed_eq : @UniversallyClosed = universally (topologically @IsClosedMap) := by
  ext X Y f; rw [universallyClosed_iff]

instance (priority := 900) [IsClosedImmersion f] : UniversallyClosed f := by
  rw [universallyClosed_eq]
  intro X' Y' i‚ÇÅ i‚ÇÇ f' hf
  have hf' : IsClosedImmersion f' :=
    MorphismProperty.of_isPullback hf.flip inferInstance
  exact hf'.base_closed.isClosedMap

theorem universallyClosed_respectsIso : RespectsIso @UniversallyClosed :=
  universallyClosed_eq.symm ‚ñ∏ universally_respectsIso (topologically @IsClosedMap)

instance universallyClosed_isStableUnderBaseChange : IsStableUnderBaseChange @UniversallyClosed :=
  universallyClosed_eq.symm ‚ñ∏ universally_isStableUnderBaseChange (topologically @IsClosedMap)

instance isClosedMap_isStableUnderComposition :
    IsStableUnderComposition (topologically @IsClosedMap) where
  comp_mem f g hf hg := IsClosedMap.comp (f := f.base) (g := g.base) hg hf

instance universallyClosed_isStableUnderComposition :
    IsStableUnderComposition @UniversallyClosed := by
  rw [universallyClosed_eq]
  infer_instance

lemma UniversallyClosed.of_comp_surjective {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
    [UniversallyClosed (f ‚â´ g)] [Surjective f] : UniversallyClosed g := by
  constructor
  intro X' Y' i‚ÇÅ i‚ÇÇ f' H
  have := UniversallyClosed.out _ _ _ ((IsPullback.of_hasPullback i‚ÇÅ f).paste_horiz H)
  exact IsClosedMap.of_comp_surjective (MorphismProperty.pullback_fst (P := @Surjective) _ _ ‚Äπ_‚Ä∫).1
    (Scheme.Hom.continuous _) this

instance universallyClosedTypeComp {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
    [hf : UniversallyClosed f] [hg : UniversallyClosed g] : UniversallyClosed (f ‚â´ g) :=
  comp_mem _ _ _ hf hg

instance : MorphismProperty.IsMultiplicative @UniversallyClosed where
  id_mem _ := inferInstance

instance universallyClosed_fst {X Y Z : Scheme} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) [hg : UniversallyClosed g] :
    UniversallyClosed (pullback.fst f g) :=
  MorphismProperty.pullback_fst f g hg

instance universallyClosed_snd {X Y Z : Scheme} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) [hf : UniversallyClosed f] :
    UniversallyClosed (pullback.snd f g) :=
  MorphismProperty.pullback_snd f g hf

instance universallyClosed_isLocalAtTarget : IsLocalAtTarget @UniversallyClosed := by
  rw [universallyClosed_eq]
  apply universally_isLocalAtTarget
  intro X Y f Œπ U hU H
  simp_rw [topologically, morphismRestrict_base] at H
  exact (isClosedMap_iff_isClosedMap_of_iSup_eq_top hU).mpr H

open Scheme.Pullback _root_.PrimeSpectrum MvPolynomial in
/-- If `X` is universally closed over a field, then `X` is quasi-compact. -/
lemma compactSpace_of_universallyClosed
    {K} [Field K] (f : X ‚ü∂ Spec (.of K)) [UniversallyClosed f] : CompactSpace X := by
  classical
  let ùí∞ : X.OpenCover := X.affineCover
  let U (i : ùí∞.J) : X.Opens := (ùí∞.map i).opensRange
  let T : Scheme := Spec (.of <| MvPolynomial ùí∞.J K)
  let q : T ‚ü∂ Spec (.of K) := Spec.map (CommRingCat.ofHom MvPolynomial.C)
  let Ti (i : ùí∞.J) : T.Opens := basicOpen (MvPolynomial.X i)
  let fT : pullback f q ‚ü∂ T := pullback.snd f q
  let p : pullback f q ‚ü∂ X := pullback.fst f q
  let Z : Set (pullback f q : _) := (‚®Ü i, fT ‚Åª¬π·µÅ (Ti i) ‚äì p ‚Åª¬π·µÅ (U i) : (pullback f q).Opens)·∂ú
  have hZ : IsClosed Z := by
    simp only [Z, isClosed_compl_iff, Opens.coe_iSup, Opens.coe_inf, Opens.map_coe]
    exact isOpen_iUnion fun i ‚Ü¶ (fT.continuous.1 _ (Ti i).2).inter (p.continuous.1 _ (U i).2)
  let Zc : T.Opens := ‚ü®(fT.base '' Z)·∂ú, (fT.isClosedMap _ hZ).isOpen_compl‚ü©
  let œà : MvPolynomial ùí∞.J K ‚Üí‚Çê[K] K := MvPolynomial.aeval (fun _ ‚Ü¶ 1)
  let t : T := (Spec.map <| CommRingCat.ofHom œà.toRingHom).base default
  have ht (i : ùí∞.J) : t ‚àà Ti i := show œà (.X i) ‚â† 0 by simp [œà]
  have htZc : t ‚àà Zc := by
    intro ‚ü®z, hz, hzt‚ü©
    suffices ‚àÉ i, fT.base z ‚àà Ti i ‚àß p.base z ‚àà U i from hz (by simpa)
    exact ‚ü®ùí∞.f (p.base z), hzt ‚ñ∏ ht _, by simpa [U] using ùí∞.covers (p.base z)‚ü©
  obtain ‚ü®U', ‚ü®g, rfl‚ü©, htU', hU'le‚ü© := Opens.isBasis_iff_nbhd.mp isBasis_basic_opens htZc
  let œÉ : Finset ùí∞.J := MvPolynomial.vars g
  let œÜ : MvPolynomial ùí∞.J K ‚Üí+* MvPolynomial ùí∞.J K :=
    (MvPolynomial.aeval fun i : ùí∞.J ‚Ü¶ if i ‚àà œÉ then MvPolynomial.X i else 0).toRingHom
  let t' : T := (Spec.map (CommRingCat.ofHom œÜ)).base t
  have ht'g : t' ‚àà PrimeSpectrum.basicOpen g :=
    show œÜ g ‚àâ t.asIdeal from (show œÜ g = g from aeval_ite_mem_eq_self g subset_rfl).symm ‚ñ∏ htU'
  have h : t' ‚àâ fT.base '' Z := hU'le ht'g
  suffices ‚ãÉ i ‚àà œÉ, (U i).1 = Set.univ from
    ‚ü®this ‚ñ∏ Finset.isCompact_biUnion _ fun i _ ‚Ü¶ isCompact_range (ùí∞.map i).continuous‚ü©
  rw [Set.iUnion‚ÇÇ_eq_univ_iff]
  contrapose! h
  obtain ‚ü®x, hx‚ü© := h
  obtain ‚ü®z, rfl, hzr‚ü© := exists_preimage_pullback x t' (Subsingleton.elim (f.base x) (q.base t'))
  suffices ‚àÄ i, t ‚àà (Ti i).comap (comap œÜ) ‚Üí p.base z ‚àâ U i from ‚ü®z, by simpa [Z, p, fT, hzr], hzr‚ü©
  intro i hi‚ÇÅ hi‚ÇÇ
  rw [comap_basicOpen, show œÜ (.X i) = 0 by simpa [œÜ] using (hx i ¬∑ hi‚ÇÇ), basicOpen_zero] at hi‚ÇÅ
  cases hi‚ÇÅ

@[stacks 04XU]
lemma Scheme.Hom.isProperMap (f : X.Hom Y) [UniversallyClosed f] : IsProperMap f.base := by
  rw [isProperMap_iff_isClosedMap_and_compact_fibers]
  refine ‚ü®Scheme.Hom.continuous f, ?_, ?_‚ü©
  ¬∑ exact MorphismProperty.universally_le (P := topologically @IsClosedMap) _ UniversallyClosed.out
  ¬∑ intro y
    have := compactSpace_of_universallyClosed (pullback.snd f (Y.fromSpecResidueField y))
    rw [‚Üê Scheme.range_fromSpecResidueField, ‚Üê Scheme.Pullback.range_fst]
    exact isCompact_range (Scheme.Hom.continuous _)

instance (priority := 900) [UniversallyClosed f] : QuasiCompact f where
  isCompact_preimage _ _ := f.isProperMap.isCompact_preimage

lemma universallyClosed_eq_universallySpecializing :
    @UniversallyClosed = (topologically @SpecializingMap).universally ‚äì @QuasiCompact := by
  rw [‚Üê universally_eq_iff (P := @QuasiCompact).mpr inferInstance, ‚Üê universally_inf]
  apply le_antisymm
  ¬∑ rw [‚Üê universally_eq_iff (P := @UniversallyClosed).mpr inferInstance]
    exact universally_mono fun X Y f H ‚Ü¶ ‚ü®f.isClosedMap.specializingMap, inferInstance‚ü©
  ¬∑ rw [universallyClosed_eq]
    exact universally_mono fun X Y f ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ (isClosedMap_iff_specializingMap _).mpr h‚ÇÅ

end AlgebraicGeometry
