/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.AlgebraicGeometry.Morphisms.Constructors
import Mathlib.RingTheory.LocalProperties.Basic
import Mathlib.RingTheory.RingHom.Locally

/-!

# Properties of morphisms from properties of ring homs.

We provide the basic framework for talking about properties of morphisms that come from properties
of ring homs. For `P` a property of ring homs, we have two ways of defining a property of scheme
morphisms:

Let `f : X ‚ü∂ Y`,
- `targetAffineLocally (affineAnd P)`: the preimage of an affine open `U = Spec A` is affine
  (`= Spec B`) and `A ‚ü∂ B` satisfies `P`. (in `Mathlib/AlgebraicGeometry/Morphisms/AffineAnd.lean`)
- `affineLocally P`: For each pair of affine open `U = Spec A ‚äÜ X` and `V = Spec B ‚äÜ f ‚Åª¬π' U`,
  the ring hom `A ‚ü∂ B` satisfies `P`.

For these notions to be well defined, we require `P` be a sufficient local property. For the former,
`P` should be local on the source (`RingHom.RespectsIso P`, `RingHom.LocalizationPreserves P`,
`RingHom.OfLocalizationSpan`), and `targetAffineLocally (affine_and P)` will be local on
the target.

For the latter `P` should be local on the target (`RingHom.PropertyIsLocal P`), and
`affineLocally P` will be local on both the source and the target.
We also provide the following interface:

## `HasRingHomProperty`

`HasRingHomProperty P Q` is a type class asserting that `P` is local at the target and the source,
and for `f : Spec B ‚ü∂ Spec A`, it is equivalent to the ring hom property `Q` on `Œì(f)`.

For `HasRingHomProperty P Q` and `f : X ‚ü∂ Y`, we provide these API lemmas:
- `AlgebraicGeometry.HasRingHomProperty.iff_appLE`:
    `P f` if and only if `Q (f.appLE U V _)` for all affine `U : Opens Y` and `V : Opens X`.
- `AlgebraicGeometry.HasRingHomProperty.iff_of_source_openCover`:
    If `Y` is affine, `P f ‚Üî ‚àÄ i, Q ((ùí∞.map i ‚â´ f).appTop)` for an affine open cover `ùí∞` of `X`.
- `AlgebraicGeometry.HasRingHomProperty.iff_of_isAffine`:
    If `X` and `Y` are affine, then `P f ‚Üî Q (f.appTop)`.
- `AlgebraicGeometry.HasRingHomProperty.Spec_iff`:
    `P (Spec.map œÜ) ‚Üî Q œÜ`
- `AlgebraicGeometry.HasRingHomProperty.iff_of_iSup_eq_top`:
    If `Y` is affine, `P f ‚Üî ‚àÄ i, Q (f.appLE ‚ä§ (U i) _)` for a family `U` of affine opens of `X`.
- `AlgebraicGeometry.HasRingHomProperty.of_isOpenImmersion`:
    If `f` is an open immersion then `P f`.
- `AlgebraicGeometry.HasRingHomProperty.isStableUnderBaseChange`:
    If `Q` is stable under base change, then so is `P`.

We also provide the instances `P.IsMultiplicative`, `P.IsStableUnderComposition`,
`IsLocalAtTarget P`, `IsLocalAtSource P`.

-/

-- Explicit universe annotations were used in this file to improve performance https://github.com/leanprover-community/mathlib4/issues/12737

universe u

open CategoryTheory Opposite TopologicalSpace CategoryTheory.Limits AlgebraicGeometry

namespace RingHom

variable (P : ‚àÄ {R S : Type u} [CommRing R] [CommRing S], (R ‚Üí+* S) ‚Üí Prop)

theorem IsStableUnderBaseChange.pullback_fst_appTop
    (hP : IsStableUnderBaseChange P) (hP' : RespectsIso P)
    {X Y S : Scheme} [IsAffine X] [IsAffine Y] [IsAffine S] (f : X ‚ü∂ S) (g : Y ‚ü∂ S)
    (H : P g.appTop.hom) : P (pullback.fst f g).appTop.hom := by
  -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11224): change `rw` to `erw`
  erw [‚Üê PreservesPullback.iso_inv_fst AffineScheme.forgetToScheme (AffineScheme.ofHom f)
      (AffineScheme.ofHom g)]
  rw [Scheme.comp_appTop, CommRingCat.hom_comp, hP'.cancel_right_isIso,
    AffineScheme.forgetToScheme_map]
  have := congr_arg Quiver.Hom.unop
      (PreservesPullback.iso_hom_fst AffineScheme.Œì.rightOp (AffineScheme.ofHom f)
        (AffineScheme.ofHom g))
  simp only [AffineScheme.Œì, Functor.rightOp_obj, Functor.comp_obj, Functor.op_obj, unop_comp,
    AffineScheme.forgetToScheme_obj, Scheme.Œì_obj, Functor.rightOp_map, Functor.comp_map,
    Functor.op_map, Quiver.Hom.unop_op, AffineScheme.forgetToScheme_map, Scheme.Œì_map] at this
  rw [‚Üê this, CommRingCat.hom_comp, hP'.cancel_right_isIso, ‚Üê pushoutIsoUnopPullback_inl_hom,
    CommRingCat.hom_comp, hP'.cancel_right_isIso]
  exact hP.pushout_inl _ hP' _ _ H

@[deprecated (since := "2024-11-23")]
alias IsStableUnderBaseChange.pullback_fst_app_top :=
IsStableUnderBaseChange.pullback_fst_appTop

end RingHom

namespace AlgebraicGeometry

section affineLocally

variable (P : ‚àÄ {R S : Type u} [CommRing R] [CommRing S], (R ‚Üí+* S) ‚Üí Prop)

/-- For `P` a property of ring homomorphisms, `sourceAffineLocally P` holds for `f : X ‚ü∂ Y`
whenever `P` holds for the restriction of `f` on every affine open subset of `X`. -/
def sourceAffineLocally : AffineTargetMorphismProperty := fun X _ f _ =>
  ‚àÄ U : X.affineOpens, P (f.appLE ‚ä§ U le_top).hom

/-- For `P` a property of ring homomorphisms, `affineLocally P` holds for `f : X ‚ü∂ Y` if for each
affine open `U = Spec A ‚äÜ Y` and `V = Spec B ‚äÜ f ‚Åª¬π' U`, the ring hom `A ‚ü∂ B` satisfies `P`.
Also see `affineLocally_iff_affineOpens_le`. -/
abbrev affineLocally : MorphismProperty Scheme.{u} :=
  targetAffineLocally (sourceAffineLocally P)

theorem sourceAffineLocally_respectsIso (h‚ÇÅ : RingHom.RespectsIso P) :
    (sourceAffineLocally P).toProperty.RespectsIso := by
  apply AffineTargetMorphismProperty.respectsIso_mk
  ¬∑ introv H U
    have : IsIso (e.hom.appLE (e.hom ''·µÅ U) U.1 (e.hom.preimage_image_eq _).ge) :=
      inferInstanceAs (IsIso (e.hom.app _ ‚â´
        X.presheaf.map (eqToHom (e.hom.preimage_image_eq _).symm).op))
    rw [‚Üê Scheme.appLE_comp_appLE _ _ ‚ä§ (e.hom ''·µÅ U) U.1 le_top (e.hom.preimage_image_eq _).ge,
      CommRingCat.hom_comp, h‚ÇÅ.cancel_right_isIso]
    exact H ‚ü®_, U.prop.image_of_isOpenImmersion e.hom‚ü©
  ¬∑ introv H U
    rw [Scheme.comp_appLE, CommRingCat.hom_comp, h‚ÇÅ.cancel_left_isIso]
    exact H U

theorem affineLocally_respectsIso (h : RingHom.RespectsIso P) : (affineLocally P).RespectsIso :=
  letI := sourceAffineLocally_respectsIso P h
  inferInstance

open Scheme in
theorem sourceAffineLocally_morphismRestrict {X Y : Scheme.{u}} (f : X ‚ü∂ Y)
    (U : Y.Opens) (hU : IsAffineOpen U) :
    @sourceAffineLocally P _ _ (f ‚à£_ U) hU ‚Üî
      ‚àÄ (V : X.affineOpens) (e : V.1 ‚â§ f ‚Åª¬π·µÅ U), P (f.appLE U V e).hom := by
  dsimp only [sourceAffineLocally]
  simp only [morphismRestrict_appLE]
  rw [(affineOpensRestrict (f ‚Åª¬π·µÅ U)).forall_congr_left, Subtype.forall]
  refine forall‚ÇÇ_congr fun V h ‚Ü¶ ?_
  have := (affineOpensRestrict (f ‚Åª¬π·µÅ U)).apply_symm_apply ‚ü®V, h‚ü©
  exact f.appLE_congr _ (Opens.Œπ_image_top _) congr($(this).1.1) (fun f => P f.hom)

theorem affineLocally_iff_affineOpens_le {X Y : Scheme.{u}} (f : X ‚ü∂ Y) :
    affineLocally.{u} P f ‚Üî
      ‚àÄ (U : Y.affineOpens) (V : X.affineOpens) (e : V.1 ‚â§ f ‚Åª¬π·µÅ U.1), P (f.appLE U V e).hom :=
  forall_congr' fun U ‚Ü¶ sourceAffineLocally_morphismRestrict P f U U.2

theorem sourceAffineLocally_isLocal (h‚ÇÅ : RingHom.RespectsIso P)
    (h‚ÇÇ : RingHom.LocalizationAwayPreserves P) (h‚ÇÉ : RingHom.OfLocalizationSpan P) :
    (sourceAffineLocally P).IsLocal := by
  constructor
  ¬∑ exact sourceAffineLocally_respectsIso P h‚ÇÅ
  ¬∑ intro X Y _ f r H
    rw [sourceAffineLocally_morphismRestrict]
    intro U hU
    have : X.basicOpen (f.appLE ‚ä§ U (by simp) r) = U := by
      simp only [Scheme.Hom.appLE, Opens.map_top, CommRingCat.comp_apply, RingHom.coe_comp,
        Function.comp_apply]
      rw [Scheme.basicOpen_res]
      simpa using hU
    rw [‚Üê f.appLE_congr _ rfl this (fun f => P f.hom),
      IsAffineOpen.appLE_eq_away_map f (isAffineOpen_top Y) U.2 _ r]
    simp only
    apply (config := { allowSynthFailures := true }) h‚ÇÇ
    exact H U
  ¬∑ introv hs hs' U
    apply h‚ÇÉ _ _ hs
    intro r
    simp_rw [sourceAffineLocally_morphismRestrict] at hs'
    have := hs' r ‚ü®X.basicOpen (f.appLE ‚ä§ U le_top r.1), U.2.basicOpen (f.appLE ‚ä§ U le_top r.1)‚ü©
      (by simp [Scheme.Hom.appLE])
    rwa [IsAffineOpen.appLE_eq_away_map f (isAffineOpen_top Y) U.2,
      ‚Üê h‚ÇÅ.is_localization_away_iff] at this

open RingHom

variable {P} {X Y : Scheme.{u}} {f : X ‚ü∂ Y}

/-- If `P` holds for `f` over affine opens `U‚ÇÇ` of `Y` and `V‚ÇÇ` of `X` and `U‚ÇÅ` (resp. `V‚ÇÅ`) are
open affine neighborhoods of `x` (resp. `f.base x`), then `P` also holds for `f`
over some basic open of `U‚ÇÅ` (resp. `V‚ÇÅ`). -/
lemma exists_basicOpen_le_appLE_of_appLE_of_isAffine
    (hPa : StableUnderCompositionWithLocalizationAwayTarget P) (hPl : LocalizationAwayPreserves P)
    (x : X) (U‚ÇÅ : Y.affineOpens) (U‚ÇÇ : Y.affineOpens) (V‚ÇÅ : X.affineOpens) (V‚ÇÇ : X.affineOpens)
    (hx‚ÇÅ : x ‚àà V‚ÇÅ.1) (hx‚ÇÇ : x ‚àà V‚ÇÇ.1) (e‚ÇÇ : V‚ÇÇ.1 ‚â§ f ‚Åª¬π·µÅ U‚ÇÇ.1) (h‚ÇÇ : P (f.appLE U‚ÇÇ V‚ÇÇ e‚ÇÇ).hom)
    (hfx‚ÇÅ : f.base x ‚àà U‚ÇÅ.1) :
    ‚àÉ (r : Œì(Y, U‚ÇÅ)) (s : Œì(X, V‚ÇÅ)) (_ : x ‚àà X.basicOpen s)
      (e : X.basicOpen s ‚â§ f ‚Åª¬π·µÅ Y.basicOpen r),
        P (f.appLE (Y.basicOpen r) (X.basicOpen s) e).hom := by
  obtain ‚ü®r, r', hBrr', hBfx‚ü© := exists_basicOpen_le_affine_inter U‚ÇÅ.2 U‚ÇÇ.2 (f.base x)
    ‚ü®hfx‚ÇÅ, e‚ÇÇ hx‚ÇÇ‚ü©
  have ha : IsAffineOpen (X.basicOpen (f.appLE U‚ÇÇ V‚ÇÇ e‚ÇÇ r')) := V‚ÇÇ.2.basicOpen _
  have hxa : x ‚àà X.basicOpen (f.appLE U‚ÇÇ V‚ÇÇ e‚ÇÇ r') := by
    simpa [Scheme.Hom.appLE, ‚Üê Scheme.preimage_basicOpen] using And.intro hx‚ÇÇ (hBrr' ‚ñ∏ hBfx)
  obtain ‚ü®s, s', hBss', hBx‚ü© := exists_basicOpen_le_affine_inter V‚ÇÅ.2 ha x ‚ü®hx‚ÇÅ, hxa‚ü©
  haveI := V‚ÇÇ.2.isLocalization_basicOpen (f.appLE U‚ÇÇ V‚ÇÇ e‚ÇÇ r')
  haveI := U‚ÇÇ.2.isLocalization_basicOpen r'
  haveI := ha.isLocalization_basicOpen s'
  have ers : X.basicOpen s ‚â§ f ‚Åª¬π·µÅ Y.basicOpen r := by
    rw [hBss', hBrr']
    apply le_trans (X.basicOpen_le _)
    simp [Scheme.Hom.appLE]
  have heq : f.appLE (Y.basicOpen r') (X.basicOpen s') (hBrr' ‚ñ∏ hBss' ‚ñ∏ ers) =
      f.appLE (Y.basicOpen r') (X.basicOpen (f.appLE U‚ÇÇ V‚ÇÇ e‚ÇÇ r')) (by simp [Scheme.Hom.appLE]) ‚â´
        CommRingCat.ofHom (algebraMap _ _) := by
    simp only [Scheme.Hom.appLE, homOfLE_leOfHom, CommRingCat.comp_apply, Category.assoc]
    congr
    apply X.presheaf.map_comp
  refine ‚ü®r, s, hBx, ers, ?_‚ü©
  ¬∑ rw [f.appLE_congr _ hBrr' hBss' (fun f => P f.hom), heq]
    apply hPa _ s' _
    rw [U‚ÇÇ.2.appLE_eq_away_map f V‚ÇÇ.2]
    exact hPl _ _ _ _ h‚ÇÇ

/-- If `P` holds for `f` over affine opens `U‚ÇÇ` of `Y` and `V‚ÇÇ` of `X` and `U‚ÇÅ` (resp. `V‚ÇÅ`) are
open neighborhoods of `x` (resp. `f.base x`), then `P` also holds for `f` over some affine open
`U'` of `Y` (resp. `V'` of `X`) that is contained in `U‚ÇÅ` (resp. `V‚ÇÅ`). -/
lemma exists_affineOpens_le_appLE_of_appLE
    (hPa : StableUnderCompositionWithLocalizationAwayTarget P) (hPl : LocalizationAwayPreserves P)
    (x : X) (U‚ÇÅ : Y.Opens) (U‚ÇÇ : Y.affineOpens) (V‚ÇÅ : X.Opens) (V‚ÇÇ : X.affineOpens)
    (hx‚ÇÅ : x ‚àà V‚ÇÅ) (hx‚ÇÇ : x ‚àà V‚ÇÇ.1) (e‚ÇÇ : V‚ÇÇ.1 ‚â§ f ‚Åª¬π·µÅ U‚ÇÇ.1) (h‚ÇÇ : P (f.appLE U‚ÇÇ V‚ÇÇ e‚ÇÇ).hom)
    (hfx‚ÇÅ : f.base x ‚àà U‚ÇÅ.1) :
    ‚àÉ (U' : Y.affineOpens) (V' : X.affineOpens) (_ : U'.1 ‚â§ U‚ÇÅ) (_ : V'.1 ‚â§ V‚ÇÅ) (_ : x ‚àà V'.1)
      (e : V'.1 ‚â§ f‚Åª¬π·µÅ U'.1), P (f.appLE U' V' e).hom := by
  obtain ‚ü®r, hBr, hBfx‚ü© := U‚ÇÇ.2.exists_basicOpen_le ‚ü®f.base x, hfx‚ÇÅ‚ü© (e‚ÇÇ hx‚ÇÇ)
  obtain ‚ü®s, hBs, hBx‚ü© := V‚ÇÇ.2.exists_basicOpen_le ‚ü®x, hx‚ÇÅ‚ü© hx‚ÇÇ
  obtain ‚ü®r', s', hBx', e', hf'‚ü© := exists_basicOpen_le_appLE_of_appLE_of_isAffine hPa hPl x
    ‚ü®Y.basicOpen r, U‚ÇÇ.2.basicOpen _‚ü© U‚ÇÇ ‚ü®X.basicOpen s, V‚ÇÇ.2.basicOpen _‚ü© V‚ÇÇ hBx hx‚ÇÇ e‚ÇÇ h‚ÇÇ hBfx
  exact ‚ü®‚ü®Y.basicOpen r', (U‚ÇÇ.2.basicOpen _).basicOpen _‚ü©,
    ‚ü®X.basicOpen s', (V‚ÇÇ.2.basicOpen _).basicOpen _‚ü©, le_trans (Y.basicOpen_le _) hBr,
    le_trans (X.basicOpen_le _) hBs, hBx', e', hf'‚ü©

end affineLocally

/--
`HasRingHomProperty P Q` is a type class asserting that `P` is local at the target and the source,
and for `f : Spec B ‚ü∂ Spec A`, it is equivalent to the ring hom property `Q`.
To make the proofs easier, we state it instead as
1. `Q` is local (See `RingHom.PropertyIsLocal`)
2. `P f` if and only if `Q` holds for every `Œì(Y, U) ‚ü∂ Œì(X, V)` for all affine `U`, `V`.
See `HasRingHomProperty.iff_appLE`.
-/
class HasRingHomProperty (P : MorphismProperty Scheme.{u})
    (Q : outParam (‚àÄ {R S : Type u} [CommRing R] [CommRing S], (R ‚Üí+* S) ‚Üí Prop)) : Prop where
  isLocal_ringHomProperty : RingHom.PropertyIsLocal Q
  eq_affineLocally' : P = affineLocally Q

namespace HasRingHomProperty

variable (P : MorphismProperty Scheme.{u}) {Q} [HasRingHomProperty P Q]
variable {X Y Z : Scheme.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)

lemma copy {P' : MorphismProperty Scheme.{u}}
    {Q' : ‚àÄ {R S : Type u} [CommRing R] [CommRing S], (R ‚Üí+* S) ‚Üí Prop}
    (e : P = P') (e' : ‚àÄ {R S : Type u} [CommRing R] [CommRing S] (f : R ‚Üí+* S), Q f ‚Üî Q' f) :
    HasRingHomProperty P' Q' := by
  subst e
  have heq : @Q = @Q' := by
    ext R S _ _ f
    exact (e' f)
  rw [‚Üê heq]
  infer_instance

lemma eq_affineLocally : P = affineLocally Q := eq_affineLocally'

@[local instance]
lemma HasAffineProperty : HasAffineProperty P (sourceAffineLocally Q) where
  isLocal_affineProperty := sourceAffineLocally_isLocal _
    (isLocal_ringHomProperty P).respectsIso
    (isLocal_ringHomProperty P).localizationAwayPreserves
    (isLocal_ringHomProperty P).ofLocalizationSpan
  eq_targetAffineLocally' := eq_affineLocally P

/- This is only `inferInstance` because of the `@[local instance]` on `HasAffineProperty` above. -/
instance (priority := 900) : IsLocalAtTarget P := inferInstance

theorem appLE (H : P f) (U : Y.affineOpens) (V : X.affineOpens) (e) : Q (f.appLE U V e).hom := by
  rw [eq_affineLocally P, affineLocally_iff_affineOpens_le] at H
  exact H _ _ _

theorem appTop (H : P f) [IsAffine X] [IsAffine Y] : Q f.appTop.hom := by
  rw [Scheme.Hom.appTop, Scheme.Hom.app_eq_appLE]
  exact appLE P f H ‚ü®_, isAffineOpen_top _‚ü© ‚ü®_, isAffineOpen_top _‚ü© _

@[deprecated (since := "2024-11-23")] alias app_top := appTop

include Q in
theorem comp_of_isOpenImmersion [IsOpenImmersion f] (H : P g) :
    P (f ‚â´ g) := by
  rw [eq_affineLocally P, affineLocally_iff_affineOpens_le] at H ‚ä¢
  intro U V e
  have : IsIso (f.appLE (f ''·µÅ V) V.1 (f.preimage_image_eq _).ge) :=
    inferInstanceAs (IsIso (f.app _ ‚â´
      X.presheaf.map (eqToHom (f.preimage_image_eq _).symm).op))
  rw [‚Üê Scheme.appLE_comp_appLE _ _ _ (f ''·µÅ V) V.1
    (Set.image_subset_iff.mpr e) (f.preimage_image_eq _).ge,
    CommRingCat.hom_comp,
    (isLocal_ringHomProperty P).respectsIso.cancel_right_isIso]
  exact H _ ‚ü®_, V.2.image_of_isOpenImmersion _‚ü© _

variable {P f}

lemma iff_appLE : P f ‚Üî ‚àÄ (U : Y.affineOpens) (V : X.affineOpens) (e), Q (f.appLE U V e).hom := by
  rw [eq_affineLocally P, affineLocally_iff_affineOpens_le]

theorem of_source_openCover [IsAffine Y]
    (ùí∞ : X.OpenCover) [‚àÄ i, IsAffine (ùí∞.obj i)] (H : ‚àÄ i, Q ((ùí∞.map i ‚â´ f).appTop.hom)) :
    P f := by
  rw [HasAffineProperty.iff_of_isAffine (P := P)]
  intro U
  let S i : X.affineOpens := ‚ü®_, isAffineOpen_opensRange (ùí∞.map i)‚ü©
  induction U using of_affine_open_cover S ùí∞.iSup_opensRange with
  | basicOpen U r H =>
    simp_rw [Scheme.affineBasicOpen_coe,
      ‚Üê f.appLE_map (U := ‚ä§) le_top (homOfLE (X.basicOpen_le r)).op]
    have := U.2.isLocalization_basicOpen r
    exact (isLocal_ringHomProperty P).StableUnderCompositionWithLocalizationAwayTarget _ r _ H
  | openCover U s hs H =>
    apply (isLocal_ringHomProperty P).ofLocalizationSpanTarget.ofIsLocalization
      (isLocal_ringHomProperty P).respectsIso _ _ hs
    rintro r
    refine ‚ü®_, _, _, IsAffineOpen.isLocalization_basicOpen U.2 r, ?_‚ü©
    rw [RingHom.algebraMap_toAlgebra, ‚Üê CommRingCat.hom_comp, Scheme.Hom.appLE_map]
    exact H r
  | hU i =>
    specialize H i
    rw [‚Üê (isLocal_ringHomProperty P).respectsIso.cancel_right_isIso _
      ((IsOpenImmersion.isoOfRangeEq (ùí∞.map i) (S i).1.Œπ
      Subtype.range_coe.symm).inv.app _), ‚Üê CommRingCat.hom_comp, ‚Üê Scheme.comp_appTop,
      IsOpenImmersion.isoOfRangeEq_inv_fac_assoc, Scheme.comp_appTop,
      Scheme.Opens.Œπ_appTop, Scheme.Hom.appTop, Scheme.Hom.app_eq_appLE, Scheme.Hom.appLE_map] at H
    exact (f.appLE_congr _ rfl (by simp) (fun f => Q f.hom)).mp H

theorem iff_of_source_openCover [IsAffine Y] (ùí∞ : X.OpenCover) [‚àÄ i, IsAffine (ùí∞.obj i)] :
    P f ‚Üî ‚àÄ i, Q ((ùí∞.map i ‚â´ f).appTop).hom :=
  ‚ü®fun H i ‚Ü¶ appTop P _ (comp_of_isOpenImmersion P (ùí∞.map i) f H), of_source_openCover ùí∞‚ü©

theorem iff_of_isAffine [IsAffine X] [IsAffine Y] :
    P f ‚Üî Q (f.appTop).hom := by
  rw [iff_of_source_openCover (P := P) (Scheme.coverOfIsIso.{u} (ùüô _))]
  simp

theorem Spec_iff {R S : CommRingCat.{u}} {œÜ : R ‚ü∂ S} :
    P (Spec.map œÜ) ‚Üî Q œÜ.hom := by
  have H := (isLocal_ringHomProperty P).respectsIso
  rw [iff_of_isAffine (P := P), ‚Üê H.cancel_right_isIso _ (Scheme.ŒìSpecIso _).hom,
    ‚Üê CommRingCat.hom_comp, Scheme.ŒìSpecIso_naturality, CommRingCat.hom_comp, H.cancel_left_isIso]

theorem of_iSup_eq_top [IsAffine Y] {Œπ : Type*}
    (U : Œπ ‚Üí X.affineOpens) (hU : ‚®Ü i, (U i : Opens X) = ‚ä§)
    (H : ‚àÄ i, Q (f.appLE ‚ä§ (U i).1 le_top).hom) :
    P f := by
  have (i) : IsAffine ((X.openCoverOfISupEqTop _ hU).obj i) := (U i).2
  refine of_source_openCover (X.openCoverOfISupEqTop _ hU) fun i ‚Ü¶ ?_
  simpa [Scheme.Hom.app_eq_appLE] using (f.appLE_congr _ rfl (by simp) (fun f => Q f.hom)).mp (H i)

theorem iff_of_iSup_eq_top [IsAffine Y] {Œπ : Type*}
    (U : Œπ ‚Üí X.affineOpens) (hU : ‚®Ü i, (U i : Opens X) = ‚ä§) :
    P f ‚Üî ‚àÄ i, Q (f.appLE ‚ä§ (U i).1 le_top).hom :=
  ‚ü®fun H _ ‚Ü¶ appLE P f H ‚ü®_, isAffineOpen_top _‚ü© _ le_top, of_iSup_eq_top U hU‚ü©

instance : IsLocalAtSource P := by
  apply HasAffineProperty.isLocalAtSource
  intros X Y f _ ùí∞
  simp_rw [‚Üê HasAffineProperty.iff_of_isAffine (P := P),
    iff_of_source_openCover ùí∞.affineRefinement.openCover,
    fun i ‚Ü¶ iff_of_source_openCover (P := P) (f := ùí∞.map i ‚â´ f) (ùí∞.obj i).affineCover]
  simp [Scheme.OpenCover.affineRefinement, Sigma.forall]

lemma containsIdentities (hP : RingHom.ContainsIdentities Q) : P.ContainsIdentities where
  id_mem X := by
    rw [IsLocalAtTarget.iff_of_iSup_eq_top (P := P) _ (iSup_affineOpens_eq_top _)]
    intro U
    have : IsAffine (ùüô X ‚Åª¬π·µÅ U.1) := U.2
    rw [morphismRestrict_id, iff_of_isAffine (P := P), Scheme.id_appTop]
    apply hP

variable (P) in
open _root_.PrimeSpectrum in
lemma isLocal_ringHomProperty_of_isLocalAtSource_of_isLocalAtTarget
    [IsLocalAtTarget P] [IsLocalAtSource P] :
    RingHom.PropertyIsLocal fun f ‚Ü¶ P (Spec.map (CommRingCat.ofHom f)) := by
  have hP : RingHom.RespectsIso (fun f ‚Ü¶ P (Spec.map (CommRingCat.ofHom f))) :=
    RingHom.toMorphismProperty_respectsIso_iff.mpr
      (inferInstanceAs (P.inverseImage Scheme.Spec).unop.RespectsIso)
  constructor
  ¬∑ intro R S _ _ f r R' S' _ _ _ _ _ _ H
    refine (RingHom.RespectsIso.is_localization_away_iff hP ..).mp ?_
    exact (MorphismProperty.arrow_mk_iso_iff P (SpecMapRestrictBasicOpenIso
      (CommRingCat.ofHom f) r)).mp (IsLocalAtTarget.restrict H (basicOpen r))
  ¬∑ intros R S _ _ f s hs H
    apply IsLocalAtSource.of_openCover (Scheme.affineOpenCoverOfSpanRangeEqTop
      (R := CommRingCat.of S) (Œπ := s) (fun i : s ‚Ü¶ (i : S)) (by simpa)).openCover
    intro i
    simp only [CommRingCat.coe_of, Set.setOf_mem_eq, id_eq, eq_mpr_eq_cast,
      Scheme.AffineOpenCover.openCover_obj, Scheme.affineOpenCoverOfSpanRangeEqTop_obj_carrier,
      Scheme.AffineOpenCover.openCover_map, Scheme.affineOpenCoverOfSpanRangeEqTop_map,
      ‚Üê Spec.map_comp]
    exact H i
  ¬∑ intro R S _ _  f s hs H
    apply IsLocalAtTarget.of_iSup_eq_top _ (PrimeSpectrum.iSup_basicOpen_eq_top_iff
      (f := fun i : s ‚Ü¶ (i : R)).mpr (by simpa))
    intro i
    exact (MorphismProperty.arrow_mk_iso_iff P (SpecMapRestrictBasicOpenIso
      (CommRingCat.ofHom f) i.1)).mpr (H i)
  ¬∑ intro R S T _ _ _ _ r _ f hf
    have := AlgebraicGeometry.IsOpenImmersion.of_isLocalization (S := T) r
    show P (Spec.map (CommRingCat.ofHom f ‚â´ CommRingCat.ofHom (algebraMap _ _)))
    rw [Spec.map_comp]
    exact IsLocalAtSource.comp hf ..

open _root_.PrimeSpectrum in
variable (P) in
lemma of_isLocalAtSource_of_isLocalAtTarget [IsLocalAtTarget P] [IsLocalAtSource P] :
    HasRingHomProperty P (fun f ‚Ü¶ P (Spec.map (CommRingCat.ofHom f))) where
  isLocal_ringHomProperty :=
    isLocal_ringHomProperty_of_isLocalAtSource_of_isLocalAtTarget P
  eq_affineLocally' := by
    let Q := affineLocally (fun f ‚Ü¶ P (Spec.map (CommRingCat.ofHom f)))
    have : HasRingHomProperty Q (fun f ‚Ü¶ P (Spec.map (CommRingCat.ofHom f))) :=
      ‚ü®isLocal_ringHomProperty_of_isLocalAtSource_of_isLocalAtTarget P, rfl‚ü©
    show P = Q
    ext X Y f
    wlog hY : ‚àÉ R, Y = Spec R generalizing X Y
    ¬∑ rw [IsLocalAtTarget.iff_of_openCover (P := P) Y.affineCover,
        IsLocalAtTarget.iff_of_openCover (P := Q) Y.affineCover]
      refine forall_congr' fun _ ‚Ü¶ this _ ‚ü®_, rfl‚ü©
    obtain ‚ü®S, rfl‚ü© := hY
    wlog hX : ‚àÉ R, X = Spec R generalizing X
    ¬∑ rw [IsLocalAtSource.iff_of_openCover (P := P) X.affineCover,
        IsLocalAtSource.iff_of_openCover (P := Q) X.affineCover]
      refine forall_congr' fun _ ‚Ü¶ this _ ‚ü®_, rfl‚ü©
    obtain ‚ü®R, rfl‚ü© := hX
    obtain ‚ü®œÜ, rfl‚ü© : ‚àÉ œÜ, Spec.map œÜ = f := ‚ü®_, Spec.map_preimage _‚ü©
    rw [HasRingHomProperty.Spec_iff (P := Q)]
    rfl

lemma stalkwise {P} (hP : RingHom.RespectsIso P) :
    HasRingHomProperty (stalkwise P) fun {_ S _ _} œÜ ‚Ü¶
      ‚àÄ (p : Ideal S) (_ : p.IsPrime), P (Localization.localRingHom _ p œÜ rfl) := by
  have := stalkwiseIsLocalAtTarget_of_respectsIso hP
  have := stalkwise_isLocalAtSource_of_respectsIso hP
  convert of_isLocalAtSource_of_isLocalAtTarget (P := AlgebraicGeometry.stalkwise P) with R S _ _ œÜ
  exact (stalkwise_Spec_map_iff hP (CommRingCat.ofHom œÜ)).symm

lemma stableUnderComposition (hP : RingHom.StableUnderComposition Q) :
    P.IsStableUnderComposition where
  comp_mem {X Y Z} f g hf hg := by
    wlog hZ : IsAffine Z generalizing X Y Z
    ¬∑ rw [IsLocalAtTarget.iff_of_iSup_eq_top (P := P) _ (iSup_affineOpens_eq_top _)]
      intro U
      rw [morphismRestrict_comp]
      exact this _ _ (IsLocalAtTarget.restrict hf _) (IsLocalAtTarget.restrict hg _) U.2
    wlog hY : IsAffine Y generalizing X Y
    ¬∑ rw [IsLocalAtSource.iff_of_openCover (P := P) (Y.affineCover.pullbackCover f)]
      intro i
      rw [‚Üê Scheme.Cover.pullbackHom_map_assoc]
      exact this _ _ (IsLocalAtTarget.of_isPullback (.of_hasPullback _ _) hf)
        (comp_of_isOpenImmersion _ _ _ hg) inferInstance
    wlog hX : IsAffine X generalizing X
    ¬∑ rw [IsLocalAtSource.iff_of_openCover (P := P) X.affineCover]
      intro i
      rw [‚Üê Category.assoc]
      exact this _ (comp_of_isOpenImmersion _ _ _ hf) inferInstance
    rw [iff_of_isAffine (P := P)] at hf hg ‚ä¢
    exact hP _ _ hg hf

theorem of_comp
    (H : ‚àÄ {R S T : Type u} [CommRing R] [CommRing S] [CommRing T],
      ‚àÄ (f : R ‚Üí+* S) (g : S ‚Üí+* T), Q (g.comp f) ‚Üí Q g)
    {X Y Z : Scheme.{u}} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} (h : P (f ‚â´ g)) : P f := by
  wlog hZ : IsAffine Z generalizing X Y Z
  ¬∑ rw [IsLocalAtTarget.iff_of_iSup_eq_top (P := P) _
      (g.preimage_iSup_eq_top (iSup_affineOpens_eq_top Z))]
    intro U
    have H := IsLocalAtTarget.restrict h U.1
    rw [morphismRestrict_comp] at H
    exact this H inferInstance
  wlog hY : IsAffine Y generalizing X Y
  ¬∑ rw [IsLocalAtTarget.iff_of_iSup_eq_top (P := P) _ (iSup_affineOpens_eq_top Y)]
    intro U
    have H := comp_of_isOpenImmersion P (f ‚Åª¬π·µÅ U.1).Œπ (f ‚â´ g) h
    rw [‚Üê morphismRestrict_Œπ_assoc] at H
    exact this H inferInstance
  wlog hY : IsAffine X generalizing X
  ¬∑ rw [IsLocalAtSource.iff_of_iSup_eq_top (P := P) _ (iSup_affineOpens_eq_top X)]
    intro U
    have H := comp_of_isOpenImmersion P U.1.Œπ (f ‚â´ g) h
    rw [‚Üê Category.assoc] at H
    exact this H inferInstance
  rw [iff_of_isAffine (P := P)] at h ‚ä¢
  exact H _ _ h

lemma isMultiplicative (hPc : RingHom.StableUnderComposition Q)
    (hPi : RingHom.ContainsIdentities Q) :
    P.IsMultiplicative where
  comp_mem := (stableUnderComposition hPc).comp_mem
  id_mem := (containsIdentities hPi).id_mem

include Q in
lemma of_isOpenImmersion (hP : RingHom.ContainsIdentities Q) [IsOpenImmersion f] : P f :=
  haveI : P.ContainsIdentities := containsIdentities hP
  IsLocalAtSource.of_isOpenImmersion f

lemma isStableUnderBaseChange (hP : RingHom.IsStableUnderBaseChange Q) :
    P.IsStableUnderBaseChange := by
  apply HasAffineProperty.isStableUnderBaseChange
  letI := HasAffineProperty.isLocal_affineProperty P
  apply AffineTargetMorphismProperty.IsStableUnderBaseChange.mk
  intros X Y S _ _ f g H
  rw [‚Üê HasAffineProperty.iff_of_isAffine (P := P)] at H ‚ä¢
  wlog hX : IsAffine Y generalizing Y
  ¬∑ rw [IsLocalAtSource.iff_of_openCover (P := P)
      (Scheme.Pullback.openCoverOfRight Y.affineCover f g)]
    intro i
    simp only [Scheme.Pullback.openCoverOfRight_obj, Scheme.Pullback.openCoverOfRight_map,
      limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app, Category.comp_id]
    apply this _ (comp_of_isOpenImmersion _ _ _ H) inferInstance
  rw [iff_of_isAffine (P := P)] at H ‚ä¢
  exact hP.pullback_fst_appTop _ (isLocal_ringHomProperty P).respectsIso _ _ H

include Q in
private lemma respects_isOpenImmersion_aux
    (hQ : RingHom.StableUnderCompositionWithLocalizationAwaySource Q)
    {X Y : Scheme.{u}} [IsAffine Y] {U : Y.Opens}
    (f : X ‚ü∂ U.toScheme) (hf : P f) : P (f ‚â´ U.Œπ) := by
  wlog hYa : ‚àÉ (a : Œì(Y, ‚ä§)), U = Y.basicOpen a generalizing X Y
  ¬∑ obtain ‚ü®(Us : Set Y.Opens), hUs, heq‚ü© := Opens.isBasis_iff_cover.mp (isBasis_basicOpen Y) U
    let V (s : Us) : X.Opens := f ‚Åª¬π·µÅ U.Œπ ‚Åª¬π·µÅ s
    rw [IsLocalAtSource.iff_of_iSup_eq_top (P := P) V]
    ¬∑ intro s
      let f' : (V s).toScheme ‚ü∂ U.Œπ ‚Åª¬π·µÅ s := f ‚à£_ U.Œπ ‚Åª¬π·µÅ s
      have hf' : P f' := IsLocalAtTarget.restrict hf _
      let e : (U.Œπ ‚Åª¬π·µÅ s).toScheme ‚âÖ s := IsOpenImmersion.isoOfRangeEq ((U.Œπ ‚Åª¬π·µÅ s).Œπ ‚â´ U.Œπ) s.1.Œπ
        (by simpa [Set.range_comp, Set.image_preimage_eq_iff, heq] using le_sSup s.2)
      have heq : (V s).Œπ ‚â´ f ‚â´ U.Œπ = f' ‚â´ e.hom ‚â´ s.1.Œπ := by
        simp only [V, IsOpenImmersion.isoOfRangeEq_hom_fac, f', e, morphismRestrict_Œπ_assoc]
      rw [heq, ‚Üê Category.assoc]
      refine this _ ?_ ?_
      ¬∑ rwa [P.cancel_right_of_respectsIso]
      ¬∑ obtain ‚ü®a, ha‚ü© := hUs s.2
        use a, ha.symm
    ¬∑ apply f.preimage_iSup_eq_top
      apply U.Œπ.image_injective
      simp only [U.Œπ.image_iSup, U.Œπ.image_preimage_eq_opensRange_inter, Scheme.Opens.opensRange_Œπ]
      conv_rhs => rw [Scheme.Hom.image_top_eq_opensRange, Scheme.Opens.opensRange_Œπ, heq]
      ext : 1
      have (i : Us) : U ‚äì i.1 = i.1 := by simp [heq, le_sSup i.property]
      simp [this]
  obtain ‚ü®a, rfl‚ü© := hYa
  wlog hX : IsAffine X generalizing X Y
  ¬∑ rw [IsLocalAtSource.iff_of_iSup_eq_top (P := P) _ (iSup_affineOpens_eq_top _)]
    intro V
    rw [‚Üê Category.assoc]
    exact this _ _ (IsLocalAtSource.comp hf _) V.2
  rw [HasRingHomProperty.iff_of_isAffine (P := P)] at hf ‚ä¢
  exact hQ _ a _ hf

/-- Any property of scheme morphisms induced by a property of ring homomorphisms is stable
under composition with open immersions. -/
lemma respects_isOpenImmersion (hQ : RingHom.StableUnderCompositionWithLocalizationAwaySource Q) :
    P.Respects @IsOpenImmersion where
  postcomp {X Y Z} i hi f hf := by
    wlog hZ : IsAffine Z generalizing X Y Z
    ¬∑ rw [IsLocalAtTarget.iff_of_iSup_eq_top (P := P) _ (iSup_affineOpens_eq_top _)]
      intro U
      rw [morphismRestrict_comp]
      exact this _ inferInstance _ (IsLocalAtTarget.restrict hf _) U.2
    let e : Y ‚âÖ i.opensRange.toScheme := IsOpenImmersion.isoOfRangeEq i i.opensRange.Œπ (by simp)
    rw [show f ‚â´ i = f ‚â´ e.hom ‚â´ i.opensRange.Œπ by simp [e], ‚Üê Category.assoc]
    exact respects_isOpenImmersion_aux hQ _ (by rwa [P.cancel_right_of_respectsIso])

open RingHom

omit [HasRingHomProperty P Q] in
/-- If `P` is induced by `Locally Q`, it suffices to check `Q` on affine open sets locally around
points of the source. -/
lemma iff_exists_appLE_locally
    (hQ : RingHom.StableUnderCompositionWithLocalizationAwaySource Q)
    (hQi : RespectsIso Q) [HasRingHomProperty P (Locally Q)] :
    P f ‚Üî ‚àÄ (x : X), ‚àÉ (U : Y.affineOpens) (V : X.affineOpens) (_ : x ‚àà V.1) (e : V.1 ‚â§ f ‚Åª¬π·µÅ U.1),
      Q (f.appLE U V e).hom := by
  have := respects_isOpenImmersion (P := P)
    (RingHom.locally_StableUnderCompositionWithLocalizationAwaySource hQ)
  refine ‚ü®fun hf x ‚Ü¶ ?_, fun hf ‚Ü¶ (IsLocalAtSource.iff_exists_resLE (P := P)).mpr <| fun x ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®U, hU, hfx, _‚ü© := Opens.isBasis_iff_nbhd.mp (isBasis_affine_open Y)
      (Opens.mem_top <| f.base x)
    obtain ‚ü®V, hV, hx, e‚ü© := Opens.isBasis_iff_nbhd.mp (isBasis_affine_open X)
      (show x ‚àà f ‚Åª¬π·µÅ U from hfx)
    simp_rw [HasRingHomProperty.iff_appLE (P := P), locally_iff_isLocalization hQi] at hf
    obtain ‚ü®s, hs, hfs‚ü© := hf ‚ü®U, hU‚ü© ‚ü®V, hV‚ü© e
    apply iSup_basicOpen_of_span_eq_top at hs
    have : x ‚àà (‚®Ü i ‚àà s, X.basicOpen i) := hs.symm ‚ñ∏ hx
    have : ‚àÉ r ‚àà s, x ‚àà X.basicOpen r := by simpa using this
    obtain ‚ü®r, hr, hrs‚ü© := this
    refine ‚ü®‚ü®U, hU‚ü©, ‚ü®X.basicOpen r, hV.basicOpen r‚ü©, hrs, (X.basicOpen_le r).trans e, ?_‚ü©
    rw [‚Üê f.appLE_map e (homOfLE (X.basicOpen_le r)).op]
    haveI : IsLocalization.Away r Œì(X, X.basicOpen r) := hV.isLocalization_basicOpen r
    exact hfs r hr _
  ¬∑ obtain ‚ü®U, V, hxV, e, hf‚ü© := hf x
    use U, V, hxV, e
    simp only [iff_of_isAffine (P := P), Scheme.Hom.appLE, homOfLE_leOfHom] at hf ‚ä¢
    haveI : (toMorphismProperty (Locally Q)).RespectsIso := toMorphismProperty_respectsIso_iff.mp <|
      (isLocal_ringHomProperty P).respectsIso
    exact (MorphismProperty.arrow_mk_iso_iff (toMorphismProperty (Locally Q))
      (arrowResLEAppIso f U V e)).mpr (locally_of hQi _ hf)

/-- `P` can be checked locally around points of the source. -/
lemma iff_exists_appLE
    (hQ : StableUnderCompositionWithLocalizationAwaySource Q) : P f ‚Üî
    ‚àÄ (x : X), ‚àÉ (U : Y.affineOpens) (V : X.affineOpens) (_ : x ‚àà V.1) (e : V.1 ‚â§ f ‚Åª¬π·µÅ U.1),
      Q (f.appLE U V e).hom := by
  haveI inst : HasRingHomProperty P Q := inferInstance
  haveI : HasRingHomProperty P (Locally Q) := by
    apply @copy (P' := P) (Q := Q) (Q' := Locally Q)
    ¬∑ infer_instance
    ¬∑ rfl
    ¬∑ intro R S _ _ f
      exact (locally_iff_of_localizationSpanTarget (isLocal_ringHomProperty P).respectsIso
        (isLocal_ringHomProperty P).ofLocalizationSpanTarget _).symm
  rw [iff_exists_appLE_locally (P := P) hQ]
  haveI : HasRingHomProperty P Q := inst
  apply (isLocal_ringHomProperty P (Q := Q)).respectsIso

omit [HasRingHomProperty P Q] in
lemma locally_of_iff (hQl : LocalizationAwayPreserves Q)
    (hQa : StableUnderCompositionWithLocalizationAway Q)
    (h : ‚àÄ {X Y : Scheme.{u}} (f : X ‚ü∂ Y), P f ‚Üî
      ‚àÄ (x : X), ‚àÉ (U : Y.affineOpens) (V : X.affineOpens) (_ : x ‚àà V.1) (e : V.1 ‚â§ f ‚Åª¬π·µÅ U.1),
      Q (f.appLE U V e).hom) : HasRingHomProperty P (Locally Q) where
  isLocal_ringHomProperty := locally_propertyIsLocal hQl hQa
  eq_affineLocally' := by
    haveI : HasRingHomProperty (affineLocally (Locally Q)) (Locally Q) :=
      ‚ü®locally_propertyIsLocal hQl hQa, rfl‚ü©
    ext X Y f
    rw [h, iff_exists_appLE_locally (P := affineLocally (Locally Q)) hQa.left hQa.respectsIso]

end HasRingHomProperty

end AlgebraicGeometry
