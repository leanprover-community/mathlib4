/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.AlgebraicGeometry.Morphisms.Basic
import Mathlib.RingTheory.LocalProperties

#align_import algebraic_geometry.morphisms.ring_hom_properties from "leanprover-community/mathlib"@"d39590fc8728fbf6743249802486f8c91ffe07bc"

/-!

# Properties of morphisms from properties of ring homs.

We provide the basic framework for talking about properties of morphisms that come from properties
of ring homs. For `P` a property of ring homs, we have two ways of defining a property of scheme
morphisms:

Let `f : X ‚ü∂ Y`,
- `targetAffineLocally (affine_and P)`: the preimage of an affine open `U = Spec A` is affine
  (`= Spec B`) and `A ‚ü∂ B` satisfies `P`. (TODO)
- `affineLocally P`: For each pair of affine open `U = Spec A ‚äÜ X` and `V = Spec B ‚äÜ f ‚Åª¬π' U`,
  the ring hom `A ‚ü∂ B` satisfies `P`.

For these notions to be well defined, we require `P` be a sufficient local property. For the former,
`P` should be local on the source (`RingHom.RespectsIso P`, `RingHom.LocalizationPreserves P`,
`RingHom.OfLocalizationSpan`), and `targetAffineLocally (affine_and P)` will be local on
the target. (TODO)

For the latter `P` should be local on the target (`RingHom.PropertyIsLocal P`), and
`affineLocally P` will be local on both the source and the target.

Further more, these properties are stable under compositions (resp. base change) if `P` is. (TODO)

-/

-- Explicit universe annotations were used in this file to improve perfomance #12737

universe u

open CategoryTheory Opposite TopologicalSpace CategoryTheory.Limits AlgebraicGeometry

variable (P : ‚àÄ {R S : Type u} [CommRing R] [CommRing S], (R ‚Üí+* S) ‚Üí Prop)

namespace RingHom

theorem StableUnderBaseChange.Œì_pullback_fst (hP : StableUnderBaseChange @P) (hP' : RespectsIso @P)
    {X Y S : Scheme} [IsAffine X] [IsAffine Y] [IsAffine S] (f : X ‚ü∂ S) (g : Y ‚ü∂ S)
    (H : P (Scheme.Œì.map g.op)) : P (Scheme.Œì.map (pullback.fst : pullback f g ‚ü∂ _).op) := by
  -- Porting note (#11224): change `rw` to `erw`
  erw [‚Üê PreservesPullback.iso_inv_fst AffineScheme.forgetToScheme (AffineScheme.ofHom f)
      (AffineScheme.ofHom g)]
  rw [op_comp, Functor.map_comp, hP'.cancel_right_isIso, AffineScheme.forgetToScheme_map]
  have :=
    _root_.congr_arg Quiver.Hom.unop
      (PreservesPullback.iso_hom_fst AffineScheme.Œì.rightOp (AffineScheme.ofHom f)
        (AffineScheme.ofHom g))
  simp only [Quiver.Hom.unop_op, Functor.rightOp_map, unop_comp] at this
  delta AffineScheme.Œì at this
  simp only [Quiver.Hom.unop_op, Functor.comp_map, AffineScheme.forgetToScheme_map,
    Functor.op_map] at this
  rw [‚Üê this, hP'.cancel_right_isIso,
    ‚Üê pushoutIsoUnopPullback_inl_hom (Quiver.Hom.unop _) (Quiver.Hom.unop _),
    hP'.cancel_right_isIso]
  exact hP.pushout_inl _ hP' _ _ H
#align ring_hom.stable_under_base_change.Œì_pullback_fst RingHom.StableUnderBaseChange.Œì_pullback_fst

end RingHom

namespace AlgebraicGeometry

/-- For `P` a property of ring homomorphisms, `sourceAffineLocally P` holds for `f : X ‚ü∂ Y`
whenever `P` holds for the restriction of `f` on every affine open subset of `X`. -/
def sourceAffineLocally : AffineTargetMorphismProperty := fun X _ f _ =>
  ‚àÄ U : X.affineOpens, P (Scheme.Œì.map (Scheme.ŒπOpens U ‚â´ f).op)
#align algebraic_geometry.source_affine_locally AlgebraicGeometry.sourceAffineLocally

/-- For `P` a property of ring homomorphisms, `affineLocally P` holds for `f : X ‚ü∂ Y` if for each
affine open `U = Spec A ‚äÜ Y` and `V = Spec B ‚äÜ f ‚Åª¬π' U`, the ring hom `A ‚ü∂ B` satisfies `P`.
Also see `affineLocally_iff_affineOpens_le`. -/
abbrev affineLocally : MorphismProperty Scheme.{u} :=
  targetAffineLocally (sourceAffineLocally @P)
#align algebraic_geometry.affine_locally AlgebraicGeometry.affineLocally

variable {P}

theorem sourceAffineLocally_respectsIso (h‚ÇÅ : RingHom.RespectsIso @P) :
    (sourceAffineLocally @P).toProperty.RespectsIso := by
  apply AffineTargetMorphismProperty.respectsIso_mk
  ¬∑ introv H U
    rw [‚Üê h‚ÇÅ.cancel_right_isIso _ (Scheme.Œì.map (Scheme.restrictMapIso e.inv U.1).hom.op), ‚Üê
      Functor.map_comp, ‚Üê op_comp]
    convert H ‚ü®_, U.prop.preimage_of_isIso e.inv‚ü© using 3
    rw [IsOpenImmersion.isoOfRangeEq_hom_fac_assoc, Category.assoc,
      e.inv_hom_id_assoc]
  ¬∑ introv H U
    rw [‚Üê Category.assoc, op_comp, Functor.map_comp, h‚ÇÅ.cancel_left_isIso]
    exact H U
#align algebraic_geometry.source_affine_locally_respects_iso AlgebraicGeometry.sourceAffineLocally_respectsIso

theorem affineLocally_respectsIso (h : RingHom.RespectsIso @P) : (affineLocally @P).RespectsIso :=
  targetAffineLocally_respectsIso (sourceAffineLocally_respectsIso h)
#align algebraic_geometry.affine_locally_respects_iso AlgebraicGeometry.affineLocally_respectsIso

open Scheme in
theorem Œì_ŒπOpens_comp_iff {X Y : Scheme.{u}} (f : X ‚ü∂ Y) (V) :
    P (Œì.map (ŒπOpens V ‚â´ f).op) ‚Üî P (f.appLE ‚ä§ V le_top) := by
  simp only [Œì_obj, restrict_presheaf_obj, op_comp, Œì_map, unop_comp, Quiver.Hom.unop_op, comp_app,
    Opens.map_top, ofRestrict_val_base, ofRestrict_app, TopCat.coe_of, Functor.id_obj,
    Opens.coe_inclusion, Functor.comp_obj, Scheme.Hom.app_eq_appLE, Scheme.Hom.appLE_map,
    comp_appLE, Opens.map_top, restrict_presheaf_obj, ofRestrict_appLE]
  exact f.appLE_congr _ rfl V.openEmbedding_obj_top _

open Scheme in
theorem Œì_ŒπOpens_morphismRestrict_iff {X Y : Scheme.{u}} (f : X ‚ü∂ Y) (U V) :
    P (Œì.map (ŒπOpens V ‚â´ f ‚à£_ U).op) ‚Üî P (f.appLE U (ŒπOpens _ ''·µÅ V)
      ((Set.image_subset_range _ _).trans Subtype.range_val.subset)) := by
  simp only [Œì_obj, restrict_presheaf_obj, op_comp, Œì_map, unop_comp, Quiver.Hom.unop_op, comp_app,
    Opens.map_top, ofRestrict_val_base, morphismRestrict_app', ofRestrict_app, TopCat.coe_of,
    Functor.id_obj, Opens.coe_inclusion, Functor.comp_obj, restrict_presheaf_map, Hom.appLE_map]
  apply f.appLE_congr
  ¬∑ exact U.openEmbedding_obj_top
  ¬∑ rw [Opens.openEmbedding_obj_top]

open Scheme in
theorem sourceAffineLocally_morphismRestrict {X Y : Scheme.{u}} (f : X ‚ü∂ Y)
    (U : Opens Y) (hU : IsAffineOpen U) :
    @sourceAffineLocally P _ _ (f ‚à£_ U) hU ‚Üî
      ‚àÄ (V : X.affineOpens) (e : V.1 ‚â§ f ‚Åª¬π·µÅ U), P (f.appLE U V e) := by
  dsimp only [sourceAffineLocally]
  conv_lhs => intro V; rw [Œì_ŒπOpens_morphismRestrict_iff (P := P) f U V]
  rw [(affineOpensRestrict (f ‚Åª¬π·µÅ U)).forall_congr_left', Subtype.forall]
  refine forall‚ÇÇ_congr fun V h ‚Ü¶ ?_
  have := (affineOpensRestrict (f ‚Åª¬π·µÅ U)).apply_symm_apply ‚ü®V, h‚ü©
  apply f.appLE_congr _ rfl congr(Subtype.val <| Subtype.val $(this))

open Scheme in
theorem affineLocally_iff_affineOpens_le {X Y : Scheme.{u}} (f : X ‚ü∂ Y) :
    affineLocally.{u} (@P) f ‚Üî
      ‚àÄ (U : Y.affineOpens) (V : X.affineOpens) (e : V.1 ‚â§ f ‚Åª¬π·µÅ U.1), P (f.appLE U V e) := by
  apply forall_congr'
  intro U
  exact sourceAffineLocally_morphismRestrict f U U.2
#align algebraic_geometry.affine_locally_iff_affine_opens_le AlgebraicGeometry.affineLocally_iff_affineOpens_le

theorem sourceAffineLocally_isLocal (h‚ÇÅ : RingHom.RespectsIso @P)
    (h‚ÇÇ : RingHom.LocalizationPreserves @P) (h‚ÇÉ : RingHom.OfLocalizationSpan @P) :
    (sourceAffineLocally @P).IsLocal := by
  constructor
  ¬∑ exact sourceAffineLocally_respectsIso h‚ÇÅ
  ¬∑ intro X Y _ f r H
    rw [sourceAffineLocally_morphismRestrict]
    intro U hU
    have : X.basicOpen (f.appLE ‚ä§ U (by simp) r) = U := by
      simp only [Scheme.Hom.appLE, Opens.map_top, CommRingCat.coe_comp_of, RingHom.coe_comp,
        Function.comp_apply]
      rw [Scheme.basicOpen_res]
      simpa using hU
    rw [‚Üê f.appLE_congr _ rfl this P,
      IsAffineOpen.appLE_eq_away_map f (isAffineOpen_top Y) U.2 _ r]
    apply (config := { allowSynthFailures := true }) h‚ÇÇ.away
    exact (f.appLE_congr _ rfl U.1.openEmbedding_obj_top P).mp (by simpa using H U)
  ¬∑ introv hs hs' U
    apply h‚ÇÉ _ _ hs
    intro r
    have : IsAffineOpen (X.basicOpen (f.appLE ‚ä§ (Scheme.ŒπOpens U ''·µÅ ‚ä§) le_top r.1)) := by
      convert U.2.basicOpen (f.appLE ‚ä§ U le_top r.1) using 1
      simp only [Scheme.Hom.appLE, Opens.map_top, CommRingCat.coe_comp_of, RingHom.coe_comp,
        Function.comp_apply]
      rw [Scheme.basicOpen_res, Scheme.basicOpen_res]
      congr 1
      exact Opens.openEmbedding_obj_top _
    simp_rw [sourceAffineLocally_morphismRestrict] at hs'
    have := hs' r ‚ü®X.basicOpen (f.appLE ‚ä§ (Scheme.ŒπOpens U ''·µÅ ‚ä§) le_top r.1), this‚ü©
        (by simpa [Scheme.Hom.appLE] using Scheme.basicOpen_restrict _ _ _)
    simp only at this
    rwa [IsAffineOpen.appLE_eq_away_map f (isAffineOpen_top Y)
      (by rw [U.1.openEmbedding_obj_top]; exact U.2), ‚Üê h‚ÇÅ.is_localization_away_iff] at this
#align algebraic_geometry.source_affine_locally_is_local AlgebraicGeometry.sourceAffineLocally_isLocal

variable (hP : RingHom.PropertyIsLocal @P)

theorem isOpenImmersion_comp_of_sourceAffineLocally (h‚ÇÅ : RingHom.RespectsIso @P)
    {X Y Z : Scheme.{u}} [IsAffine X] [IsAffine Z] (f : X ‚ü∂ Y) [IsOpenImmersion f] (g : Y ‚ü∂ Z)
    (h‚ÇÇ : sourceAffineLocally (@P) g) : P (Scheme.Œì.map (f ‚â´ g).op) := by
  rw [‚Üê h‚ÇÅ.cancel_right_isIso _
    (Scheme.Œì.map (IsOpenImmersion.isoOfRangeEq (Y.ofRestrict _) f _).hom.op),
    ‚Üê Functor.map_comp, ‚Üê op_comp]
  ¬∑ convert h‚ÇÇ ‚ü®_, isAffineOpen_opensRange f‚ü© using 3
    ¬∑ rw [IsOpenImmersion.isoOfRangeEq_hom_fac_assoc]
      exact Subtype.range_coe
#align algebraic_geometry.is_open_immersion_comp_of_source_affine_locally AlgebraicGeometry.isOpenImmersion_comp_of_sourceAffineLocally

end AlgebraicGeometry

open AlgebraicGeometry

namespace RingHom.PropertyIsLocal

variable {P} (hP : RingHom.PropertyIsLocal @P)

theorem sourceAffineLocally_of_source_openCover {X Y : Scheme.{u}} (f : X ‚ü∂ Y) [IsAffine Y]
    (ùí∞ : X.OpenCover) [‚àÄ i, IsAffine (ùí∞.obj i)] (H : ‚àÄ i, P (Scheme.Œì.map (ùí∞.map i ‚â´ f).op)) :
    sourceAffineLocally (@P) f := by
  intro U
  let S i : X.affineOpens := ‚ü®_, isAffineOpen_opensRange (ùí∞.map i)‚ü©
  induction U using of_affine_open_cover S ùí∞.iSup_opensRange with
  | basicOpen U r H =>
    rw [Œì_ŒπOpens_comp_iff (P := P)] at H ‚ä¢
    rw [Scheme.affineBasicOpen_coe, ‚Üê f.appLE_map (U := ‚ä§) le_top (homOfLE (X.basicOpen_le r)).op]
    apply hP.StableUnderComposition _ _ H
    have := U.2.isLocalization_basicOpen r
    apply hP.HoldsForLocalizationAway _ r
  | openCover U s hs H =>
    simp only [Œì_ŒπOpens_comp_iff (P := P)] at H ‚ä¢
    apply hP.OfLocalizationSpanTarget.ofIsLocalization hP.respectsIso _ _ hs
    rintro r
    refine ‚ü®_, _, _, IsAffineOpen.isLocalization_basicOpen U.2 r, ?_‚ü©
    rw [RingHom.algebraMap_toAlgebra, ‚Üê CommRingCat.comp_eq_ring_hom_comp, Scheme.Hom.appLE_map]
    exact H r
  | hU i =>
    specialize H i
    rw [‚Üê hP.respectsIso.cancel_right_isIso _
        (Scheme.Œì.map
          (IsOpenImmersion.isoOfRangeEq (ùí∞.map i) (X.ofRestrict (S i).1.openEmbedding)
                Subtype.range_coe.symm).inv.op)] at H
    rwa [‚Üê Scheme.Œì.map_comp, ‚Üê op_comp, IsOpenImmersion.isoOfRangeEq_inv_fac_assoc] at H
#align ring_hom.property_is_local.source_affine_locally_of_source_open_cover RingHom.PropertyIsLocal.sourceAffineLocally_of_source_openCover

theorem affine_openCover_TFAE {X Y : Scheme.{u}} [IsAffine Y] (f : X ‚ü∂ Y) :
    List.TFAE
      [sourceAffineLocally (@P) f,
        ‚àÉ (ùí∞ : Scheme.OpenCover.{u} X) (_ : ‚àÄ i, IsAffine (ùí∞.obj i)),
          ‚àÄ i : ùí∞.J, P (Scheme.Œì.map (ùí∞.map i ‚â´ f).op),
        ‚àÄ (ùí∞ : Scheme.OpenCover.{u} X) [‚àÄ i, IsAffine (ùí∞.obj i)] (i : ùí∞.J),
          P (Scheme.Œì.map (ùí∞.map i ‚â´ f).op),
        ‚àÄ {U : Scheme} (g : U ‚ü∂ X) [IsAffine U] [IsOpenImmersion g],
          P (Scheme.Œì.map (g ‚â´ f).op)] := by
  tfae_have 1 ‚Üí 4
  ¬∑ intro H U g _ hg
    specialize H ‚ü®‚ü®_, hg.base_open.isOpen_range‚ü©, isAffineOpen_opensRange g‚ü©
    rw [‚Üê hP.respectsIso.cancel_right_isIso _ (Scheme.Œì.map (IsOpenImmersion.isoOfRangeEq g
      (X.ofRestrict (Opens.openEmbedding ‚ü®_, hg.base_open.isOpen_range‚ü©))
      Subtype.range_coe.symm).hom.op),
      ‚Üê Scheme.Œì.map_comp, ‚Üê op_comp, IsOpenImmersion.isoOfRangeEq_hom_fac_assoc] at H
    exact H
  tfae_have 4 ‚Üí 3
  ¬∑ intro H ùí∞ _ i; apply H
  tfae_have 3 ‚Üí 2
  ¬∑ intro H; exact ‚ü®X.affineCover, inferInstance, H _‚ü©
  tfae_have 2 ‚Üí 1
  ¬∑ rintro ‚ü®ùí∞, _, hùí∞‚ü©
    exact sourceAffineLocally_of_source_openCover hP f ùí∞ hùí∞
  tfae_finish
#align ring_hom.property_is_local.affine_open_cover_tfae RingHom.PropertyIsLocal.affine_openCover_TFAE

theorem openCover_TFAE {X Y : Scheme.{u}} [IsAffine Y] (f : X ‚ü∂ Y) :
    List.TFAE
      [sourceAffineLocally (@P) f,
        ‚àÉ ùí∞ : Scheme.OpenCover.{u} X, ‚àÄ i : ùí∞.J, sourceAffineLocally (@P) (ùí∞.map i ‚â´ f),
        ‚àÄ (ùí∞ : Scheme.OpenCover.{u} X) (i : ùí∞.J), sourceAffineLocally (@P) (ùí∞.map i ‚â´ f),
        ‚àÄ {U : Scheme} (g : U ‚ü∂ X) [IsOpenImmersion g], sourceAffineLocally (@P) (g ‚â´ f)] := by
  tfae_have 1 ‚Üí 4
  ¬∑ intro H U g hg V
    -- Porting note: this has metavariable if I put it directly into rw
    have := (hP.affine_openCover_TFAE f).out 0 3
    rw [this] at H
    haveI : IsAffine _ := V.2
    rw [‚Üê Category.assoc]
    -- Porting note: Lean could find this previously
    have : IsOpenImmersion <| (Scheme.ofRestrict U (Opens.openEmbedding V.val)) ‚â´ g :=
      LocallyRingedSpace.IsOpenImmersion.comp _ _
    apply H
  tfae_have 4 ‚Üí 3
  ¬∑ intro H ùí∞ _ i; apply H
  tfae_have 3 ‚Üí 2
  ¬∑ intro H; exact ‚ü®X.affineCover, H _‚ü©
  tfae_have 2 ‚Üí 1
  ¬∑ rintro ‚ü®ùí∞, hùí∞‚ü©
    -- Porting note: this has metavariable if I put it directly into rw
    have := (hP.affine_openCover_TFAE f).out 0 1
    rw [this]
    refine ‚ü®ùí∞.bind fun _ => Scheme.affineCover _, ?_, ?_‚ü©
    ¬∑ intro i; dsimp; infer_instance
    ¬∑ intro i
      specialize hùí∞ i.1
      -- Porting note: this has metavariable if I put it directly into rw
      have := (hP.affine_openCover_TFAE (ùí∞.map i.fst ‚â´ f)).out 0 3
      rw [this] at hùí∞
      -- Porting note: this was discharged after the apply previously
      have : IsAffine (Scheme.OpenCover.obj
        (Scheme.OpenCover.bind ùí∞ fun x ‚Ü¶ Scheme.affineCover (Scheme.OpenCover.obj ùí∞ x)) i) := by
          dsimp; infer_instance
      apply @hùí∞ _ (show _ from _)
  tfae_finish
#align ring_hom.property_is_local.open_cover_tfae RingHom.PropertyIsLocal.openCover_TFAE

theorem sourceAffineLocally_comp_of_isOpenImmersion {X Y Z : Scheme.{u}} [IsAffine Z] (f : X ‚ü∂ Y)
    (g : Y ‚ü∂ Z) [IsOpenImmersion f] (H : sourceAffineLocally (@P) g) :
    sourceAffineLocally (@P) (f ‚â´ g) := by
      -- Porting note: more tfae mis-behavior
      have := (hP.openCover_TFAE g).out 0 3
      apply this.mp H
#align ring_hom.property_is_local.source_affine_locally_comp_of_is_open_immersion RingHom.PropertyIsLocal.sourceAffineLocally_comp_of_isOpenImmersion

theorem source_affine_openCover_iff {X Y : Scheme.{u}} (f : X ‚ü∂ Y) [IsAffine Y]
    (ùí∞ : Scheme.OpenCover.{u} X) [‚àÄ i, IsAffine (ùí∞.obj i)] :
    sourceAffineLocally (@P) f ‚Üî ‚àÄ i, P (Scheme.Œì.map (ùí∞.map i ‚â´ f).op) := by
  -- Porting note: seems like TFAE is misbehaving; this used to be pure term proof but
  -- had strange failures where the output of TFAE turned into a metavariable when used despite
  -- being correctly displayed in the infoview
  refine ‚ü®fun H => ?_, fun H => ?_‚ü©
  ¬∑ have h := (hP.affine_openCover_TFAE f).out 0 2
    apply h.mp
    exact H
  ¬∑ have h := (hP.affine_openCover_TFAE f).out 1 0
    apply h.mp
    use ùí∞
#align ring_hom.property_is_local.source_affine_open_cover_iff RingHom.PropertyIsLocal.source_affine_openCover_iff

theorem isLocal_sourceAffineLocally : (sourceAffineLocally @P).IsLocal :=
  sourceAffineLocally_isLocal hP.respectsIso hP.LocalizationPreserves
    (@RingHom.PropertyIsLocal.ofLocalizationSpan _ hP)
#align ring_hom.property_is_local.is_local_source_affine_locally RingHom.PropertyIsLocal.isLocal_sourceAffineLocally

theorem is_local_affineLocally : PropertyIsLocalAtTarget (affineLocally @P) :=
  hP.isLocal_sourceAffineLocally.targetAffineLocally_isLocal
#align ring_hom.property_is_local.is_local_affine_locally RingHom.PropertyIsLocal.is_local_affineLocally

theorem affine_openCover_iff {X Y : Scheme.{u}} (f : X ‚ü∂ Y) (ùí∞ : Scheme.OpenCover.{u} Y)
    [‚àÄ i, IsAffine (ùí∞.obj i)] (ùí∞' : ‚àÄ i, Scheme.OpenCover.{u} ((ùí∞.pullbackCover f).obj i))
    [‚àÄ i j, IsAffine ((ùí∞' i).obj j)] :
    affineLocally (@P) f ‚Üî ‚àÄ i j, P (Scheme.Œì.map ((ùí∞' i).map j ‚â´ pullback.snd).op) :=
  (hP.isLocal_sourceAffineLocally.affine_openCover_iff f ùí∞).trans
    (forall_congr' fun i => hP.source_affine_openCover_iff _ (ùí∞' i))
#align ring_hom.property_is_local.affine_open_cover_iff RingHom.PropertyIsLocal.affine_openCover_iff

theorem source_openCover_iff {X Y : Scheme.{u}} (f : X ‚ü∂ Y) (ùí∞ : Scheme.OpenCover.{u} X) :
    affineLocally (@P) f ‚Üî ‚àÄ i, affineLocally (@P) (ùí∞.map i ‚â´ f) := by
  constructor
  ¬∑ intro H i U
    rw [morphismRestrict_comp]
    apply hP.sourceAffineLocally_comp_of_isOpenImmersion
    apply H
  ¬∑ intro H U
    haveI : IsAffine _ := U.2
    apply ((hP.openCover_TFAE (f ‚à£_ U.1)).out 1 0).mp
    use ùí∞.pullbackCover (X.ofRestrict _)
    intro i
    specialize H i U
    rw [morphismRestrict_comp] at H
    delta morphismRestrict at H
    have := sourceAffineLocally_respectsIso hP.respectsIso
    rw [Category.assoc, affine_cancel_left_isIso this, ‚Üê
      affine_cancel_left_isIso this (pullbackSymmetry _ _).hom,
      pullbackSymmetry_hom_comp_snd_assoc] at H
    exact H
#align ring_hom.property_is_local.source_open_cover_iff RingHom.PropertyIsLocal.source_openCover_iff

theorem affineLocally_of_isOpenImmersion (hP : RingHom.PropertyIsLocal @P) {X Y : Scheme.{u}}
    (f : X ‚ü∂ Y) [hf : IsOpenImmersion f] : affineLocally (@P) f := by
  intro U
  haveI H : IsAffine _ := U.2
  rw [‚Üê Category.comp_id (f ‚à£_ U)]
  apply hP.sourceAffineLocally_comp_of_isOpenImmersion
  -- Porting note: need to excuse Lean from synthesizing an instance
  rw [@source_affine_openCover_iff _ hP _ _ _ _ (Scheme.openCoverOfIsIso (ùüô _)) (_)]
  ¬∑ intro i
    let esto := Scheme.Œì.obj (Opposite.op (Y.restrict <| Opens.openEmbedding U.val))
    let eso := Scheme.Œì.obj (Opposite.op ((Scheme.openCoverOfIsIso
      (ùüô (Y.restrict <| Opens.openEmbedding U.val))).obj i))
    have := hP.HoldsForLocalizationAway
    convert @this esto eso _ _ ?_ 1 ?_
    ¬∑ exact (RingHom.algebraMap_toAlgebra (Scheme.Œì.map _)).symm
    ¬∑ exact
        @IsLocalization.away_of_isUnit_of_bijective _ _ _ _ (_) _ isUnit_one Function.bijective_id
  ¬∑ intro; exact H
#align ring_hom.property_is_local.affine_locally_of_is_open_immersion RingHom.PropertyIsLocal.affineLocally_of_isOpenImmersion

theorem affineLocally_of_comp
    (H : ‚àÄ {R S T : Type u} [CommRing R] [CommRing S] [CommRing T],
      ‚àÄ (f : R ‚Üí+* S) (g : S ‚Üí+* T), P (g.comp f) ‚Üí P g)
    {X Y Z : Scheme.{u}} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} (h : affineLocally (@P) (f ‚â´ g)) :
    affineLocally (@P) f := by
  let ùí∞ : ‚àÄ i, ((Z.affineCover.pullbackCover (f ‚â´ g)).obj i).OpenCover := by
    intro i
    refine Scheme.OpenCover.bind ?_ fun i => Scheme.affineCover _
    apply Scheme.OpenCover.pushforwardIso _
      (pullbackRightPullbackFstIso g (Z.affineCover.map i) f).hom
    apply Scheme.Pullback.openCoverOfRight
    exact (pullback g (Z.affineCover.map i)).affineCover
  have hùí∞ : ‚àÄ i j, IsAffine ((ùí∞ i).obj j) := by dsimp [ùí∞]; infer_instance
  let ùí∞' := (Z.affineCover.pullbackCover g).bind fun i => Scheme.affineCover _
  have hùí∞' : ‚àÄ i, IsAffine (ùí∞'.obj i) := by dsimp [ùí∞']; infer_instance
  rw [hP.affine_openCover_iff f ùí∞' fun i => Scheme.affineCover _]
  rw [hP.affine_openCover_iff (f ‚â´ g) Z.affineCover ùí∞] at h
  rintro ‚ü®i, j‚ü© k
  dsimp at i j k
  specialize h i ‚ü®j, k‚ü©
  dsimp only [ùí∞, ùí∞', Scheme.OpenCover.bind_map, Scheme.OpenCover.pushforwardIso_obj,
    Scheme.Pullback.openCoverOfRight_obj, Scheme.OpenCover.pushforwardIso_map,
    Scheme.Pullback.openCoverOfRight_map, Scheme.OpenCover.bind_obj,
    Scheme.OpenCover.pullbackCover_obj, Scheme.OpenCover.pullbackCover_map] at h ‚ä¢
  rw [Category.assoc, Category.assoc, pullbackRightPullbackFstIso_hom_snd,
    pullback.lift_snd_assoc, Category.assoc, ‚Üê Category.assoc, op_comp, Functor.map_comp] at h
  exact H _ _ h
#align ring_hom.property_is_local.affine_locally_of_comp RingHom.PropertyIsLocal.affineLocally_of_comp

theorem affineLocally_isStableUnderComposition : (affineLocally @P).IsStableUnderComposition where
  comp_mem {X Y S} f g hf hg := by
    let ùí∞ : ‚àÄ i, ((S.affineCover.pullbackCover (f ‚â´ g)).obj i).OpenCover := by
      intro i
      refine Scheme.OpenCover.bind ?_ fun i => Scheme.affineCover _
      apply Scheme.OpenCover.pushforwardIso _
        (pullbackRightPullbackFstIso g (S.affineCover.map i) f).hom
      apply Scheme.Pullback.openCoverOfRight
      exact (pullback g (S.affineCover.map i)).affineCover
    haveI : ‚àÄ i j, IsAffine ((ùí∞ i).obj j) := by dsimp [ùí∞]; infer_instance
    rw [hP.affine_openCover_iff (f ‚â´ g) S.affineCover ùí∞]
    rintro i ‚ü®j, k‚ü©
    dsimp at i j k
    dsimp only [ùí∞, Scheme.OpenCover.bind_map, Scheme.OpenCover.pushforwardIso_obj,
      Scheme.Pullback.openCoverOfRight_obj, Scheme.OpenCover.pushforwardIso_map,
      Scheme.Pullback.openCoverOfRight_map, Scheme.OpenCover.bind_obj]
    rw [Category.assoc, Category.assoc, pullbackRightPullbackFstIso_hom_snd,
      pullback.lift_snd_assoc, Category.assoc, ‚Üê Category.assoc, op_comp, Functor.map_comp]
    apply hP.StableUnderComposition
    ¬∑ -- Porting note: used to be exact _|>. hg i j but that can't find an instance
      apply hP.affine_openCover_iff _ _ _|>.mp
      exact hg
    ¬∑ delta affineLocally at hf
      -- Porting note: again strange behavior of TFAE
      have := (hP.isLocal_sourceAffineLocally.affine_openCover_TFAE f).out 0 3
      rw [this] at hf
      -- Porting note: needed to help Lean with this instance (same as above)
      have : IsOpenImmersion <|
          ((pullback g (S.affineCover.map i)).affineCover.map j ‚â´ pullback.fst) :=
        LocallyRingedSpace.IsOpenImmersion.comp _ _
      specialize hf ((pullback g (S.affineCover.map i)).affineCover.map j ‚â´ pullback.fst)
      -- Porting note: again strange behavior of TFAE
      have := (hP.affine_openCover_TFAE
        (pullback.snd : pullback f ((pullback g (S.affineCover.map i)).affineCover.map j ‚â´
        pullback.fst) ‚ü∂ _)).out 0 3
      rw [this] at hf
      apply hf
#align ring_hom.property_is_local.affine_locally_stable_under_composition RingHom.PropertyIsLocal.affineLocally_isStableUnderComposition

end RingHom.PropertyIsLocal
