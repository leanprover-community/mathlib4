/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.Topology.LocalAtTarget
import Mathlib.AlgebraicGeometry.Morphisms.Basic

#align_import algebraic_geometry.morphisms.open_immersion from "leanprover-community/mathlib"@"f0c8bf9245297a541f468be517f1bde6195105e9"

/-!

# Open immersions

A morphism is an open immersion if the underlying map of spaces is an open embedding
`f : X ‚ü∂ U ‚äÜ Y`, and the sheaf map `Y(V) ‚ü∂ f _* X(V)` is an iso for each `V ‚äÜ U`.

Most of the theories are developed in `AlgebraicGeometry/OpenImmersion`, and we provide the
remaining theorems analogous to other lemmas in `AlgebraicGeometry/Morphisms/*`.

-/


noncomputable section

open CategoryTheory CategoryTheory.Limits Opposite TopologicalSpace

universe u

namespace AlgebraicGeometry

variable {X Y Z : Scheme.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)

theorem isOpenImmersion_iff_stalk {f : X ‚ü∂ Y} : IsOpenImmersion f ‚Üî
    OpenEmbedding f.1.base ‚àß ‚àÄ x, IsIso (PresheafedSpace.stalkMap f.1 x) := by
  constructor
  ¬∑ intro h; exact ‚ü®h.1, inferInstance‚ü©
  ¬∑ rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©; exact IsOpenImmersion.of_stalk_iso f h‚ÇÅ
#align algebraic_geometry.is_open_immersion_iff_stalk AlgebraicGeometry.isOpenImmersion_iff_stalk

instance isOpenImmersion_isStableUnderComposition :
    MorphismProperty.IsStableUnderComposition @IsOpenImmersion where
  comp_mem f g _ _ := LocallyRingedSpace.IsOpenImmersion.comp f g
#align algebraic_geometry.is_open_immersion_stable_under_composition AlgebraicGeometry.isOpenImmersion_isStableUnderComposition

theorem isOpenImmersion_respectsIso : MorphismProperty.RespectsIso @IsOpenImmersion := by
  apply MorphismProperty.respectsIso_of_isStableUnderComposition
  intro _ _ f (hf : IsIso f)
  have : IsIso f := hf
  infer_instance
#align algebraic_geometry.is_open_immersion_respects_iso AlgebraicGeometry.isOpenImmersion_respectsIso

theorem isOpenImmersion_is_local_at_target : PropertyIsLocalAtTarget @IsOpenImmersion := by
  constructor
  ¬∑ exact isOpenImmersion_respectsIso
  ¬∑ intros; infer_instance
  ¬∑ intro X Y f ùí∞ H
    rw [isOpenImmersion_iff_stalk]
    constructor
    ¬∑ apply (openEmbedding_iff_openEmbedding_of_iSup_eq_top ùí∞.iSup_opensRange f.1.base.2).mpr
      intro i
      have := ((isOpenImmersion_respectsIso.arrow_iso_iff
        (morphismRestrictOpensRange f (ùí∞.map i))).mpr (H i)).1
      erw [Arrow.mk_hom, morphismRestrict_val_base] at this
      norm_cast
    ¬∑ intro x
      have := Arrow.iso_w (morphismRestrictStalkMap
        f (Scheme.Hom.opensRange (ùí∞.map <| ùí∞.f <| f.1.base x)) ‚ü®x, ùí∞.Covers _‚ü©)
      dsimp only [Arrow.mk_hom] at this
      rw [this]
      haveI : IsOpenImmersion (f ‚à£_ Scheme.Hom.opensRange (ùí∞.map <| ùí∞.f <| f.1.base x)) :=
        (isOpenImmersion_respectsIso.arrow_iso_iff
          (morphismRestrictOpensRange f (ùí∞.map _))).mpr (H _)
      infer_instance
#align algebraic_geometry.is_open_immersion_is_local_at_target AlgebraicGeometry.isOpenImmersion_is_local_at_target

theorem IsOpenImmersion.openCover_TFAE {X Y : Scheme.{u}} (f : X ‚ü∂ Y) : List.TFAE
    [IsOpenImmersion f,
    ‚àÉ ùí∞ : Scheme.OpenCover.{u} Y,
      ‚àÄ i : ùí∞.J, IsOpenImmersion (pullback.snd : (ùí∞.pullbackCover f).obj i ‚ü∂ ùí∞.obj i),
    ‚àÄ (ùí∞ : Scheme.OpenCover.{u} Y) (i : ùí∞.J),
      IsOpenImmersion (pullback.snd : (ùí∞.pullbackCover f).obj i ‚ü∂ ùí∞.obj i),
    ‚àÄ U : Opens Y.carrier, IsOpenImmersion (f ‚à£_ U),
    ‚àÄ {U : Scheme} (g : U ‚ü∂ Y) [IsOpenImmersion g],
      IsOpenImmersion (pullback.snd : pullback f g ‚ü∂ _),
    ‚àÉ (Œπ : Type u) (U : Œπ ‚Üí Opens Y.carrier) (_ : iSup U = ‚ä§),
      ‚àÄ i, IsOpenImmersion (f ‚à£_ U i)] :=
  isOpenImmersion_is_local_at_target.openCover_TFAE f
#align algebraic_geometry.is_open_immersion.open_cover_tfae AlgebraicGeometry.IsOpenImmersion.openCover_TFAE

theorem IsOpenImmersion.openCover_iff {X Y : Scheme.{u}} (ùí∞ : Scheme.OpenCover.{u} Y)
    (f : X ‚ü∂ Y) :
    IsOpenImmersion f ‚Üî ‚àÄ i, IsOpenImmersion (pullback.snd : pullback f (ùí∞.map i) ‚ü∂ _) :=
  isOpenImmersion_is_local_at_target.openCover_iff f ùí∞
#align algebraic_geometry.is_open_immersion.open_cover_iff AlgebraicGeometry.IsOpenImmersion.openCover_iff

theorem isOpenImmersion_stableUnderBaseChange :
    MorphismProperty.StableUnderBaseChange @IsOpenImmersion :=
  MorphismProperty.StableUnderBaseChange.mk isOpenImmersion_respectsIso <| by
    intro X Y Z f g H; infer_instance
#align algebraic_geometry.is_open_immersion_stable_under_base_change AlgebraicGeometry.isOpenImmersion_stableUnderBaseChange

end AlgebraicGeometry
