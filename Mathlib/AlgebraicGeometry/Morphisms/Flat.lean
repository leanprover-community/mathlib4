/-
Copyright (c) 2024 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.AlgebraicGeometry.Morphisms.RingHomProperties
import Mathlib.AlgebraicGeometry.Morphisms.QuasiCompact
import Mathlib.AlgebraicGeometry.Morphisms.Affine
import Mathlib.AlgebraicGeometry.PullbackCarrier
import Mathlib.RingTheory.RingHom.Flat

/-!
# Flat morphisms

A morphism of schemes `f : X ‚ü∂ Y` is flat if for each affine `U ‚äÜ Y` and
`V ‚äÜ f ‚Åª¬π' U`, the induced map `Œì(Y, U) ‚ü∂ Œì(X, V)` is flat. This is equivalent to
asking that all stalk maps are flat (see `AlgebraicGeometry.Flat.iff_flat_stalkMap`).

We show that this property is local, and are stable under compositions and base change.

-/

noncomputable section

open CategoryTheory CategoryTheory.Limits Opposite TopologicalSpace

universe v u

namespace AlgebraicGeometry

variable {X Y : Scheme.{u}} (f : X ‚ü∂ Y)

/-- A morphism of schemes `f : X ‚ü∂ Y` is flat if for each affine `U ‚äÜ Y` and
`V ‚äÜ f ‚Åª¬π' U`, the induced map `Œì(Y, U) ‚ü∂ Œì(X, V)` is flat. This is equivalent to
asking that all stalk maps are flat (see `AlgebraicGeometry.Flat.iff_flat_stalkMap`).
-/
@[mk_iff]
class Flat (f : X ‚ü∂ Y) : Prop where
  flat_of_affine_subset :
    ‚àÄ (U : Y.affineOpens) (V : X.affineOpens) (e : V.1 ‚â§ f ‚Åª¬π·µÅ U.1), (f.appLE U V e).hom.Flat

namespace Flat

instance : HasRingHomProperty @Flat RingHom.Flat where
  isLocal_ringHomProperty := RingHom.Flat.propertyIsLocal
  eq_affineLocally' := by
    ext X Y f
    rw [flat_iff, affineLocally_iff_affineOpens_le]

instance (priority := 900) [IsOpenImmersion f] : Flat f :=
  HasRingHomProperty.of_isOpenImmersion
    RingHom.Flat.containsIdentities

instance : MorphismProperty.IsStableUnderComposition @Flat :=
  HasRingHomProperty.stableUnderComposition RingHom.Flat.stableUnderComposition

instance comp {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
    [hf : Flat f] [hg : Flat g] : Flat (f ‚â´ g) :=
  MorphismProperty.comp_mem _ f g hf hg

instance : MorphismProperty.IsMultiplicative @Flat where
  id_mem _ := inferInstance

instance isStableUnderBaseChange : MorphismProperty.IsStableUnderBaseChange @Flat :=
  HasRingHomProperty.isStableUnderBaseChange RingHom.Flat.isStableUnderBaseChange

instance {X Y Z : Scheme.{u}} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) [Flat g] : Flat (pullback.fst f g) :=
  MorphismProperty.pullback_fst _ _ inferInstance

instance {X Y Z : Scheme.{u}} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) [Flat f] : Flat (pullback.snd f g) :=
  MorphismProperty.pullback_snd _ _ inferInstance

lemma of_stalkMap (H : ‚àÄ x, (f.stalkMap x).hom.Flat) : Flat f :=
  HasRingHomProperty.of_stalkMap RingHom.Flat.ofLocalizationPrime H

lemma stalkMap [Flat f] (x : X) : (f.stalkMap x).hom.Flat :=
  HasRingHomProperty.stalkMap (P := @Flat)
    (fun f hf J hJ ‚Ü¶ hf.localRingHom J (J.comap f) rfl) ‚Äπ_‚Ä∫ x

lemma iff_flat_stalkMap : Flat f ‚Üî ‚àÄ x, (f.stalkMap x).hom.Flat :=
  ‚ü®fun _ ‚Ü¶ stalkMap f, fun H ‚Ü¶ of_stalkMap f H‚ü©

instance {X : Scheme.{u}} {Œπ : Type v} [Small.{u} Œπ] {Y : Œπ ‚Üí Scheme.{u}} {f : ‚àÄ i, Y i ‚ü∂ X}
    [‚àÄ i, Flat (f i)] : Flat (Sigma.desc f) :=
  IsLocalAtSource.sigmaDesc (fun _ ‚Ü¶ inferInstance)

/-- A surjective, quasi-compact, flat morphism is a quotient map. -/
@[stacks 02JY]
lemma isQuotientMap_of_surjective {X Y : Scheme.{u}} (f : X ‚ü∂ Y) [Flat f] [QuasiCompact f]
    [Surjective f] : Topology.IsQuotientMap f.base := by
  rw [Topology.isQuotientMap_iff]
  refine ‚ü®f.surjective, fun s ‚Ü¶ ‚ü®fun hs ‚Ü¶ hs.preimage f.continuous, fun hs ‚Ü¶ ?_‚ü©‚ü©
  wlog hY : ‚àÉ R, Y = Spec R
  ¬∑ let ùí∞ := Y.affineCover
    rw [ùí∞.isOpenCover_opensRange.isOpen_iff_inter]
    intro i
    rw [Scheme.Hom.coe_opensRange, ‚Üê Set.image_preimage_eq_inter_range]
    apply (ùí∞.map i).isOpenEmbedding.isOpenMap
    refine this (f := pullback.fst (ùí∞.map i) f) _ ?_ ‚ü®_, rfl‚ü©
    rw [‚Üê Set.preimage_comp, ‚Üê TopCat.coe_comp, ‚Üê Scheme.comp_base, pullback.condition,
      Scheme.comp_base, TopCat.coe_comp, Set.preimage_comp]
    exact hs.preimage (Scheme.Hom.continuous _)
  obtain ‚ü®R, rfl‚ü© := hY
  wlog hX : ‚àÉ S, X = Spec S
  ¬∑ have _ : CompactSpace X := QuasiCompact.compactSpace_of_compactSpace f
    let ùí∞ := X.affineCover.finiteSubcover
    let p : ‚àê (fun i : ùí∞.J ‚Ü¶ ùí∞.obj i) ‚ü∂ X := Sigma.desc (fun i ‚Ü¶ ùí∞.map i)
    have _ (i : ùí∞.J) : IsAffine (ùí∞.obj i) := inferInstanceAs <| IsAffine (X.affineCover.obj _)
    refine this (f := (‚àê (fun i : ùí∞.J ‚Ü¶ ùí∞.obj i)).isoSpec.inv ‚â´ p ‚â´ f) _ _ ?_ ‚ü®_, rfl‚ü©
    rw [‚Üê Category.assoc, Scheme.comp_base, TopCat.coe_comp, Set.preimage_comp]
    exact hs.preimage (_ ‚â´ p).continuous
  obtain ‚ü®S, rfl‚ü© := hX
  obtain ‚ü®œÜ, rfl‚ü© := Spec.map_surjective f
  refine ((PrimeSpectrum.isQuotientMap_of_generalizingMap ?_ ?_).isOpen_preimage).mp hs
  ¬∑ exact (surjective_iff (Spec.map œÜ)).mp inferInstance
  ¬∑ apply RingHom.Flat.generalizingMap_comap
    rwa [‚Üê HasRingHomProperty.Spec_iff (P := @Flat)]

end Flat

end AlgebraicGeometry
