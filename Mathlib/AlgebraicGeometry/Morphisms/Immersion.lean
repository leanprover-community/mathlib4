/-
Copyright (c) 2024 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.AlgebraicGeometry.Morphisms.Preimmersion
import Mathlib.AlgebraicGeometry.Morphisms.Separated

/-!

# Immersions of schemes

A morphism of schemes `f : X ‚ü∂ Y` is an immersion if the underlying map of topological spaces
is a locally closed embedding, and the induced morphisms of stalks are all surjective. This is true
if and only if it can be factored into a closed immersion followed by an open immersion.

# Main result
- `isImmersion_iff_exists`:
  A morphism is a (locally-closed) immersion if and only if it can be factored into
  a closed immersion followed by a (dominant) open immersion.

-/

universe v u

open CategoryTheory

namespace AlgebraicGeometry

variable {X Y : Scheme.{u}} (f : X ‚ü∂ Y)

/-- A morphism of schemes `f : X ‚ü∂ Y` is an immersion if
1. the underlying map of topological spaces is an embedding
2. the range of the map is locally closed
3. the induced morphisms of stalks are all surjective. -/
@[mk_iff]
class IsImmersion (f : X ‚ü∂ Y) extends IsPreimmersion f : Prop where
  isLocallyClosed_range : IsLocallyClosed (Set.range f.base)

lemma Scheme.Hom.isLocallyClosed_range (f : X.Hom Y) [IsImmersion f] :
    IsLocallyClosed (Set.range f.base) :=
  IsImmersion.isLocallyClosed_range

/--
Given an immersion `f : X ‚ü∂ Y`, this is the biggest open set `U ‚äÜ Y` containing the image of `X`
such that `X` is closed in `U`.
-/
def Scheme.Hom.coborderRange (f : X.Hom Y) [IsImmersion f] : Y.Opens :=
  ‚ü®coborder (Set.range f.base), f.isLocallyClosed_range.isOpen_coborder‚ü©

/--
The first part of the factorization of an immersion `f : X ‚ü∂ Y` to a closed immersion
`f.liftCoborder : X ‚ü∂ f.coborderRange` and a dominant open immersion `f.coborderRange.Œπ`.
-/
noncomputable
def Scheme.Hom.liftCoborder (f : X.Hom Y) [IsImmersion f] : X ‚ü∂ f.coborderRange :=
  IsOpenImmersion.lift f.coborderRange.Œπ f (by simpa using subset_coborder)

/--
Any (locally-closed) immersion can be factored into
a closed immersion followed by a (dominant) open immersion.
-/
@[reassoc (attr := simp)]
lemma Scheme.Hom.liftCoborder_Œπ (f : X.Hom Y) [IsImmersion f] :
    f.liftCoborder ‚â´ f.coborderRange.Œπ = f :=
  IsOpenImmersion.lift_fac _ _ _

instance [IsImmersion f] : IsClosedImmersion f.liftCoborder := by
  have : IsPreimmersion (f.liftCoborder ‚â´ f.coborderRange.Œπ) := by
    simp only [Scheme.Hom.liftCoborder_Œπ]; infer_instance
  have : IsPreimmersion f.liftCoborder := .of_comp f.liftCoborder f.coborderRange.Œπ
  refine .of_isPreimmersion _ ?_
  convert isClosed_preimage_val_coborder
  apply Set.image_injective.mpr f.coborderRange.Œπ.isEmbedding.injective
  rw [‚Üê Set.range_comp, ‚Üê TopCat.coe_comp, ‚Üê Scheme.comp_base, f.liftCoborder_Œπ]
  exact (Set.image_preimage_eq_of_subset (by simpa using subset_coborder)).symm

instance [IsImmersion f] : IsDominant f.coborderRange.Œπ := by
  rw [isDominant_iff, DenseRange, Scheme.Opens.range_Œπ]
  exact dense_coborder

lemma isImmersion_eq_inf : @IsImmersion = (@IsPreimmersion ‚äì
    topologically fun {_ _} _ _ f ‚Ü¶ IsLocallyClosed (Set.range f) : MorphismProperty Scheme) := by
  ext; exact isImmersion_iff _

namespace IsImmersion

instance : IsLocalAtTarget @IsImmersion := by
  suffices IsLocalAtTarget (topologically fun {X Y} _ _ f ‚Ü¶ IsLocallyClosed (Set.range f)) from
    isImmersion_eq_inf ‚ñ∏ inferInstance
  apply (config := { allowSynthFailures := true }) topologically_isLocalAtTarget'
  ¬∑ refine { precomp := ?_, postcomp := ?_ }
    ¬∑ intro X Y Z i hi f hf
      replace hi : IsIso i := hi
      show IsLocallyClosed _
      simpa only [Scheme.comp_coeBase, TopCat.coe_comp, Set.range_comp,
        Set.range_eq_univ.mpr i.surjective, Set.image_univ]
    ¬∑ intro X Y Z i hi f hf
      replace hi : IsIso i := hi
      show IsLocallyClosed _
      simp only [Scheme.comp_coeBase, TopCat.coe_comp, Set.range_comp]
      refine hf.image i.homeomorph.isInducing ?_
      rw [Set.range_eq_univ.mpr i.surjective]
      exact isOpen_univ.isLocallyClosed
  ¬∑ simp_rw [Set.range_restrictPreimage]
    exact fun _ _ _ e _ ‚Ü¶ isLocallyClosed_iff_coe_preimage_of_iSup_eq_top e _

instance (priority := 900) {X Y : Scheme} (f : X ‚ü∂ Y) [IsOpenImmersion f] : IsImmersion f where
  isLocallyClosed_range := f.isOpenEmbedding.2.isLocallyClosed

instance (priority := 900) {X Y : Scheme} (f : X ‚ü∂ Y) [IsClosedImmersion f] : IsImmersion f where
  isLocallyClosed_range := f.isClosedEmbedding.2.isLocallyClosed

instance : MorphismProperty.IsMultiplicative @IsImmersion where
  id_mem _ := inferInstance
  comp_mem {X Y Z} f g hf hg := by
    refine { __ := inferInstanceAs (IsPreimmersion (f ‚â´ g)), isLocallyClosed_range := ?_ }
    simp only [Scheme.comp_coeBase, TopCat.coe_comp, Set.range_comp]
    exact f.isLocallyClosed_range.image g.isEmbedding.isInducing g.isLocallyClosed_range

instance comp {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [IsImmersion f]
    [IsImmersion g] : IsImmersion (f ‚â´ g) :=
  MorphismProperty.IsStableUnderComposition.comp_mem f g inferInstance inferInstance

variable {f} in
/--
A morphism is a (locally-closed) immersion if and only if it can be factored into
a closed immersion followed by an open immersion.
-/
lemma isImmersion_iff_exists : IsImmersion f ‚Üî ‚àÉ (Z : Scheme) (g‚ÇÅ : X ‚ü∂ Z) (g‚ÇÇ : Z ‚ü∂ Y),
    IsClosedImmersion g‚ÇÅ ‚àß IsOpenImmersion g‚ÇÇ ‚àß g‚ÇÅ ‚â´ g‚ÇÇ = f :=
  ‚ü®fun _ ‚Ü¶ ‚ü®_, f.liftCoborder, f.coborderRange.Œπ, inferInstance, inferInstance, f.liftCoborder_Œπ‚ü©,
    fun ‚ü®_, _, _, _, _, e‚ü© ‚Ü¶ e ‚ñ∏ inferInstance‚ü©

theorem of_comp {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [IsImmersion g]
    [IsImmersion (f ‚â´ g)] : IsImmersion f where
  __ := IsPreimmersion.of_comp f g
  isLocallyClosed_range := by
    rw [‚Üê Set.preimage_image_eq (Set.range _) g.isEmbedding.injective]
    have := (f ‚â´ g).isLocallyClosed_range.preimage g.base.2
    simpa only [Scheme.comp_coeBase, TopCat.coe_comp, Set.range_comp] using this

theorem comp_iff {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [IsImmersion g] :
    IsImmersion (f ‚â´ g) ‚Üî IsImmersion f :=
  ‚ü®fun _ ‚Ü¶ of_comp f g, fun _ ‚Ü¶ inferInstance‚ü©

instance isStableUnderBaseChange : MorphismProperty.IsStableUnderBaseChange @IsImmersion where
  of_isPullback := by
    intros X Y Y' S f g f' g' H hg
    let Z := Limits.pullback f g.coborderRange.Œπ
    let e : Y' ‚ü∂ Z := Limits.pullback.lift g' (f' ‚â´ g.liftCoborder) (by simpa using H.w.symm)
    have : IsClosedImmersion e := by
      have := (IsPullback.paste_horiz_iff (.of_hasPullback f g.coborderRange.Œπ)
        (show e ‚â´ Limits.pullback.snd _ _ = _ from Limits.pullback.lift_snd _ _ _)).mp ?_
      ¬∑ exact MorphismProperty.of_isPullback this.flip inferInstance
      ¬∑ simpa [e] using H.flip
    rw [‚Üê Limits.pullback.lift_fst (f := f) (g := g.coborderRange.Œπ) g' (f' ‚â´ g.liftCoborder)
      (by simpa using H.w.symm)]
    infer_instance

open Limits Scheme.Pullback in
/-- The diagonal morphism is always an immersion. -/
@[stacks 01KJ]
instance : IsImmersion (pullback.diagonal f) := by
  let ùí∞ := Y.affineCover
  let ùí± (i) := (pullback f (ùí∞.map i)).affineCover
  have H : pullback.diagonal f ‚Åª¬π·µÅ diagonalCoverDiagonalRange f ùí∞ ùí± = ‚ä§ :=
    top_le_iff.mp fun _ _ ‚Ü¶ range_diagonal_subset_diagonalCoverDiagonalRange _ _ _ ‚ü®_, rfl‚ü©
  have := isClosedImmersion_diagonal_restrict_diagonalCoverDiagonalRange f ùí∞ ùí±
  have : IsImmersion ((pullback.diagonal f ‚à£_
    diagonalCoverDiagonalRange f ùí∞ ùí±) ‚â´ Scheme.Opens.Œπ _) := inferInstance
  rwa [morphismRestrict_Œπ, H, ‚Üê Scheme.topIso_hom,
    MorphismProperty.cancel_left_of_respectsIso (P := @IsImmersion)] at this

end IsImmersion

end AlgebraicGeometry
