/-
Copyright (c) 2020 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot
-/
import Mathlib.Topology.Order.ProjIcc
import Mathlib.Topology.CompactOpen
import Mathlib.Topology.UnitInterval

/-!
# Paths in topological spaces

This file introduces continuous paths and provides API for them.

## Main definitions

In this file the unit interval `[0, 1]` in `‚Ñù` is denoted by `I`, and `X` is a topological space.

* `Path x y` is the type of paths from `x` to `y`, i.e., continuous maps from `I` to `X`
  mapping `0` to `x` and `1` to `y`.
* `Path.refl x : Path x x` is the constant path at `x`.
* `Path.symm Œ≥ : Path y x` is the reverse of a path `Œ≥ : Path x y`.
* `Path.trans Œ≥ Œ≥' : Path x z` is the concatenation of two paths `Œ≥ : Path x y`, `Œ≥' : Path y z`.
* `Path.map Œ≥ hf : Path (f x) (f y)` is the image of `Œ≥ : Path x y` under a continuous map `f`.
* `Path.reparam Œ≥ f hf hf‚ÇÄ hf‚ÇÅ : Path x y` is the reparametrisation of `Œ≥ : Path x y` by
  a continuous map `f : I ‚Üí I` fixing `0` and `1`.
* `Path.truncate Œ≥ t‚ÇÄ t‚ÇÅ : Path (Œ≥ t‚ÇÄ) (Œ≥ t‚ÇÅ)` is the path that follows `Œ≥` from `t‚ÇÄ` to `t‚ÇÅ` and
  stays constant otherwise.
* `Path.extend Œ≥ : ‚Ñù ‚Üí X` is the extension `Œ≥` to `‚Ñù` that is constant before `0` and after `1`.

`Path x y` is equipped with the topology induced by the compact-open topology on `C(I,X)`, and
several of the above constructions are shown to be continuous.

## Implementation notes

By default, all paths have `I` as their source and `X` as their target, but there is an
operation `Set.IccExtend` that will extend any continuous map `Œ≥ : I ‚Üí X` into a continuous map
`IccExtend zero_le_one Œ≥ : ‚Ñù ‚Üí X` that is constant before `0` and after `1`.

This is used to define `Path.extend` that turns `Œ≥ : Path x y` into a continuous map
`Œ≥.extend : ‚Ñù ‚Üí X` whose restriction to `I` is the original `Œ≥`, and is equal to `x`
on `(-‚àû, 0]` and to `y` on `[1, +‚àû)`.
-/

noncomputable section

open Topology Filter unitInterval Set Function

variable {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] {x y z : X} {Œπ : Type*}

/-! ### Paths -/

/-- Continuous path connecting two points `x` and `y` in a topological space -/
structure Path (x y : X) extends C(I, X) where
  /-- The start point of a `Path`. -/
  source' : toFun 0 = x
  /-- The end point of a `Path`. -/
  target' : toFun 1 = y

instance Path.funLike : FunLike (Path x y) I X where
  coe Œ≥ := ‚áëŒ≥.toContinuousMap
  coe_injective' Œ≥‚ÇÅ Œ≥‚ÇÇ h := by
    simp only [DFunLike.coe_fn_eq] at h
    cases Œ≥‚ÇÅ; cases Œ≥‚ÇÇ; congr

instance Path.continuousMapClass : ContinuousMapClass (Path x y) I X where
  map_continuous Œ≥ := show Continuous Œ≥.toContinuousMap by fun_prop

@[ext]
protected theorem Path.ext : ‚àÄ {Œ≥‚ÇÅ Œ≥‚ÇÇ : Path x y}, (Œ≥‚ÇÅ : I ‚Üí X) = Œ≥‚ÇÇ ‚Üí Œ≥‚ÇÅ = Œ≥‚ÇÇ := by
  rintro ‚ü®‚ü®x, h11‚ü©, h12, h13‚ü© ‚ü®‚ü®x, h21‚ü©, h22, h23‚ü© rfl
  rfl

namespace Path

@[simp]
theorem coe_mk_mk (f : I ‚Üí X) (h‚ÇÅ) (h‚ÇÇ : f 0 = x) (h‚ÇÉ : f 1 = y) :
    ‚áë(mk ‚ü®f, h‚ÇÅ‚ü© h‚ÇÇ h‚ÇÉ : Path x y) = f :=
  rfl

variable (Œ≥ : Path x y)

@[continuity]
protected theorem continuous : Continuous Œ≥ :=
  Œ≥.continuous_toFun

@[simp]
protected theorem source : Œ≥ 0 = x :=
  Œ≥.source'

@[simp]
protected theorem target : Œ≥ 1 = y :=
  Œ≥.target'

/-- See Note [custom simps projection]. We need to specify this projection explicitly in this case,
because it is a composition of multiple projections. -/
def simps.apply : I ‚Üí X :=
  Œ≥

initialize_simps_projections Path (toFun ‚Üí simps.apply, -toContinuousMap)

@[simp]
theorem coe_toContinuousMap : ‚áëŒ≥.toContinuousMap = Œ≥ :=
  rfl

@[simp]
theorem coe_mk : ‚áë(Œ≥ : C(I, X)) = Œ≥ :=
  rfl

/-- Any function `œÜ : Œ† (a : Œ±), Path (x a) (y a)` can be seen as a function `Œ± √ó I ‚Üí X`. -/
instance hasUncurryPath {X Œ± : Type*} [TopologicalSpace X] {x y : Œ± ‚Üí X} :
    HasUncurry (‚àÄ a : Œ±, Path (x a) (y a)) (Œ± √ó I) X :=
  ‚ü®fun œÜ p => œÜ p.1 p.2‚ü©

/-- The constant path from a point to itself -/
@[refl, simps]
def refl (x : X) : Path x x where
  toFun _t := x
  continuous_toFun := continuous_const
  source' := rfl
  target' := rfl

@[simp]
theorem refl_range {a : X} : range (Path.refl a) = {a} := by simp [Path.refl, CoeFun.coe]

/-- The reverse of a path from `x` to `y`, as a path from `y` to `x` -/
@[symm, simps]
def symm (Œ≥ : Path x y) : Path y x where
  toFun := Œ≥ ‚àò œÉ
  continuous_toFun := by fun_prop
  source' := by simp
  target' := by simp

@[simp]
theorem symm_symm (Œ≥ : Path x y) : Œ≥.symm.symm = Œ≥ := by
  ext t
  show Œ≥ (œÉ (œÉ t)) = Œ≥ t
  rw [unitInterval.symm_symm]

theorem symm_bijective : Function.Bijective (Path.symm : Path x y ‚Üí Path y x) :=
  Function.bijective_iff_has_inverse.mpr ‚ü®_, symm_symm, symm_symm‚ü©

@[simp]
theorem refl_symm {a : X} : (Path.refl a).symm = Path.refl a := by
  ext
  rfl

@[simp]
theorem symm_range {a b : X} (Œ≥ : Path a b) : range Œ≥.symm = range Œ≥ :=
  symm_involutive.surjective.range_comp Œ≥

/-! #### Space of paths -/


open ContinuousMap

/-- The following instance defines the topology on the path space to be induced from the
compact-open topology on the space `C(I,X)` of continuous maps from `I` to `X`.
-/
instance topologicalSpace : TopologicalSpace (Path x y) :=
  TopologicalSpace.induced ((‚Üë) : _ ‚Üí C(I, X)) ContinuousMap.compactOpen

instance : ContinuousEval (Path x y) I X := .of_continuous_forget continuous_induced_dom

theorem continuous_uncurry_iff {Y} [TopologicalSpace Y] {g : Y ‚Üí Path x y} :
    Continuous ‚Üøg ‚Üî Continuous g :=
  Iff.symm <| continuous_induced_rng.trans
    ‚ü®fun h => continuous_uncurry_of_continuous ‚ü®_, h‚ü©,
    continuous_of_continuous_uncurry (fun (y : Y) ‚Ü¶ ContinuousMap.mk (g y))‚ü©

/-- A continuous map extending a path to `‚Ñù`, constant before `0` and after `1`. -/
def extend : ‚Ñù ‚Üí X :=
  IccExtend zero_le_one Œ≥

/-- See Note [continuity lemma statement]. -/
theorem _root_.Continuous.path_extend {Œ≥ : Y ‚Üí Path x y} {f : Y ‚Üí ‚Ñù} (hŒ≥ : Continuous ‚ÜøŒ≥)
    (hf : Continuous f) : Continuous fun t => (Œ≥ t).extend (f t) :=
  Continuous.IccExtend hŒ≥ hf

/-- A useful special case of `Continuous.path_extend`. -/
@[continuity, fun_prop]
theorem continuous_extend : Continuous Œ≥.extend :=
  Œ≥.continuous.Icc_extend'

theorem _root_.Filter.Tendsto.path_extend
    {l r : Y ‚Üí X} {y : Y} {l‚ÇÅ : Filter ‚Ñù} {l‚ÇÇ : Filter X} {Œ≥ : ‚àÄ y, Path (l y) (r y)}
    (hŒ≥ : Tendsto (‚ÜøŒ≥) (ùìù y √óÀ¢ l‚ÇÅ.map (projIcc 0 1 zero_le_one)) l‚ÇÇ) :
    Tendsto (‚Üøfun x => (Œ≥ x).extend) (ùìù y √óÀ¢ l‚ÇÅ) l‚ÇÇ :=
  Filter.Tendsto.IccExtend _ hŒ≥

theorem _root_.ContinuousAt.path_extend {g : Y ‚Üí ‚Ñù} {l r : Y ‚Üí X} (Œ≥ : ‚àÄ y, Path (l y) (r y))
    {y : Y} (hŒ≥ : ContinuousAt (‚ÜøŒ≥) (y, projIcc 0 1 zero_le_one (g y))) (hg : ContinuousAt g y) :
    ContinuousAt (fun i => (Œ≥ i).extend (g i)) y :=
  hŒ≥.IccExtend (fun x => Œ≥ x) hg

@[simp]
theorem extend_extends {a b : X} (Œ≥ : Path a b) {t : ‚Ñù}
    (ht : t ‚àà (Icc 0 1 : Set ‚Ñù)) : Œ≥.extend t = Œ≥ ‚ü®t, ht‚ü© :=
  IccExtend_of_mem _ Œ≥ ht

theorem extend_zero : Œ≥.extend 0 = x := by simp

theorem extend_one : Œ≥.extend 1 = y := by simp

theorem extend_extends' {a b : X} (Œ≥ : Path a b) (t : (Icc 0 1 : Set ‚Ñù)) : Œ≥.extend t = Œ≥ t :=
  IccExtend_val _ Œ≥ t

@[simp]
theorem extend_range {a b : X} (Œ≥ : Path a b) :
    range Œ≥.extend = range Œ≥ :=
  IccExtend_range _ Œ≥

theorem extend_of_le_zero {a b : X} (Œ≥ : Path a b) {t : ‚Ñù}
    (ht : t ‚â§ 0) : Œ≥.extend t = a :=
  (IccExtend_of_le_left _ _ ht).trans Œ≥.source

theorem extend_of_one_le {a b : X} (Œ≥ : Path a b) {t : ‚Ñù}
    (ht : 1 ‚â§ t) : Œ≥.extend t = b :=
  (IccExtend_of_right_le _ _ ht).trans Œ≥.target

@[simp]
theorem refl_extend {a : X} : (Path.refl a).extend = fun _ => a :=
  rfl

theorem extend_symm_apply (Œ≥ : Path x y) (t : ‚Ñù) : Œ≥.symm.extend t = Œ≥.extend (1 - t) :=
  congrArg Œ≥ <| symm_projIcc _

@[simp]
theorem extend_symm (Œ≥ : Path x y) : Œ≥.symm.extend = (Œ≥.extend <| 1 - ¬∑) :=
  funext Œ≥.extend_symm_apply

/-- The path obtained from a map defined on `‚Ñù` by restriction to the unit interval. -/
def ofLine {f : ‚Ñù ‚Üí X} (hf : ContinuousOn f I) (h‚ÇÄ : f 0 = x) (h‚ÇÅ : f 1 = y) : Path x y where
  toFun := f ‚àò ((‚Üë) : unitInterval ‚Üí ‚Ñù)
  continuous_toFun := hf.comp_continuous continuous_subtype_val Subtype.prop
  source' := h‚ÇÄ
  target' := h‚ÇÅ

theorem ofLine_mem {f : ‚Ñù ‚Üí X} (hf : ContinuousOn f I) (h‚ÇÄ : f 0 = x) (h‚ÇÅ : f 1 = y) :
    ‚àÄ t, ofLine hf h‚ÇÄ h‚ÇÅ t ‚àà f '' I := fun ‚ü®t, t_in‚ü© => ‚ü®t, t_in, rfl‚ü©

@[simp]
theorem ofLine_extend (Œ≥ : Path x y) : ofLine (by fun_prop) (extend_zero Œ≥) (extend_one Œ≥) = Œ≥ := by
  ext t
  simp [ofLine]

attribute [local simp] Iic_def

/-- Concatenation of two paths from `x` to `y` and from `y` to `z`, putting the first
path on `[0, 1/2]` and the second one on `[1/2, 1]`. -/
@[trans]
def trans (Œ≥ : Path x y) (Œ≥' : Path y z) : Path x z where
  toFun := (fun t : ‚Ñù => if t ‚â§ 1 / 2 then Œ≥.extend (2 * t) else Œ≥'.extend (2 * t - 1)) ‚àò (‚Üë)
  continuous_toFun := by
    refine
      (Continuous.if_le ?_ ?_ continuous_id continuous_const (by norm_num)).comp
        continuous_subtype_val <;>
    fun_prop
  source' := by norm_num
  target' := by norm_num

theorem trans_apply (Œ≥ : Path x y) (Œ≥' : Path y z) (t : I) :
    (Œ≥.trans Œ≥') t =
      if h : (t : ‚Ñù) ‚â§ 1 / 2 then Œ≥ ‚ü®2 * t, (mul_pos_mem_iff zero_lt_two).2 ‚ü®t.2.1, h‚ü©‚ü©
      else Œ≥' ‚ü®2 * t - 1, two_mul_sub_one_mem_iff.2 ‚ü®(not_le.1 h).le, t.2.2‚ü©‚ü© :=
  show ite _ _ _ = _ by split_ifs <;> rw [extend_extends]

@[simp]
theorem trans_symm (Œ≥ : Path x y) (Œ≥' : Path y z) : (Œ≥.trans Œ≥').symm = Œ≥'.symm.trans Œ≥.symm := by
  ext t
  simp only [trans_apply, ‚Üê one_div, symm_apply, not_le, Function.comp_apply]
  split_ifs with h h‚ÇÅ h‚ÇÇ <;> rw [coe_symm_eq] at h
  ¬∑ have ht : (t : ‚Ñù) = 1 / 2 := by linarith
    norm_num [ht]
  ¬∑ refine congr_arg _ (Subtype.ext ?_)
    norm_num [sub_sub_eq_add_sub, mul_sub]
  ¬∑ refine congr_arg _ (Subtype.ext ?_)
    norm_num [mul_sub, h]
    ring -- TODO norm_num should really do this
  ¬∑ exfalso
    linarith

@[simp]
theorem refl_trans_refl {a : X} :
    (Path.refl a).trans (Path.refl a) = Path.refl a := by
  ext
  simp only [Path.trans, ite_self, one_div, Path.refl_extend]
  rfl

theorem trans_range {a b c : X} (Œ≥‚ÇÅ : Path a b) (Œ≥‚ÇÇ : Path b c) :
    range (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) = range Œ≥‚ÇÅ ‚à™ range Œ≥‚ÇÇ := by
  rw [Path.trans]
  apply eq_of_subset_of_subset
  ¬∑ rintro x ‚ü®‚ü®t, ht0, ht1‚ü©, hxt‚ü©
    by_cases h : t ‚â§ 1 / 2
    ¬∑ left
      use ‚ü®2 * t, ‚ü®by linarith, by linarith‚ü©‚ü©
      rw [‚Üê Œ≥‚ÇÅ.extend_extends]
      rwa [coe_mk_mk, Function.comp_apply, if_pos h] at hxt
    ¬∑ right
      use ‚ü®2 * t - 1, ‚ü®by linarith, by linarith‚ü©‚ü©
      rw [‚Üê Œ≥‚ÇÇ.extend_extends]
      rwa [coe_mk_mk, Function.comp_apply, if_neg h] at hxt
  ¬∑ rintro x (‚ü®‚ü®t, ht0, ht1‚ü©, hxt‚ü© | ‚ü®‚ü®t, ht0, ht1‚ü©, hxt‚ü©)
    ¬∑ use ‚ü®t / 2, ‚ü®by linarith, by linarith‚ü©‚ü©
      have : t / 2 ‚â§ 1 / 2 := (div_le_div_iff_of_pos_right (zero_lt_two : (0 : ‚Ñù) < 2)).mpr ht1
      rw [coe_mk_mk, Function.comp_apply, if_pos this, Subtype.coe_mk]
      ring_nf
      rwa [Œ≥‚ÇÅ.extend_extends]
    ¬∑ by_cases h : t = 0
      ¬∑ use ‚ü®1 / 2, ‚ü®by linarith, by linarith‚ü©‚ü©
        rw [coe_mk_mk, Function.comp_apply, if_pos le_rfl, Subtype.coe_mk,
          mul_one_div_cancel (two_ne_zero' ‚Ñù)]
        rw [Œ≥‚ÇÅ.extend_one]
        rwa [‚Üê Œ≥‚ÇÇ.extend_extends, h, Œ≥‚ÇÇ.extend_zero] at hxt
      ¬∑ use ‚ü®(t + 1) / 2, ‚ü®by linarith, by linarith‚ü©‚ü©
        replace h : t ‚â† 0 := h
        have ht0 := lt_of_le_of_ne ht0 h.symm
        have : ¬¨(t + 1) / 2 ‚â§ 1 / 2 := by
          rw [not_le]
          linarith
        rw [coe_mk_mk, Function.comp_apply, Subtype.coe_mk, if_neg this]
        ring_nf
        rwa [Œ≥‚ÇÇ.extend_extends]

/-- Image of a path from `x` to `y` by a map which is continuous on the path. -/
def map' (Œ≥ : Path x y) {f : X ‚Üí Y} (h : ContinuousOn f (range Œ≥)) : Path (f x) (f y) where
  toFun := f ‚àò Œ≥
  continuous_toFun := h.comp_continuous Œ≥.continuous (fun x ‚Ü¶ mem_range_self x)
  source' := by simp
  target' := by simp

/-- Image of a path from `x` to `y` by a continuous map -/
def map (Œ≥ : Path x y) {f : X ‚Üí Y} (h : Continuous f) :
    Path (f x) (f y) := Œ≥.map' h.continuousOn

@[simp]
theorem map_coe (Œ≥ : Path x y) {f : X ‚Üí Y} (h : Continuous f) :
    (Œ≥.map h : I ‚Üí Y) = f ‚àò Œ≥ := by
  ext t
  rfl

@[simp]
theorem map_symm (Œ≥ : Path x y) {f : X ‚Üí Y} (h : Continuous f) :
    (Œ≥.map h).symm = Œ≥.symm.map h :=
  rfl

@[simp]
theorem map_trans (Œ≥ : Path x y) (Œ≥' : Path y z) {f : X ‚Üí Y}
    (h : Continuous f) : (Œ≥.trans Œ≥').map h = (Œ≥.map h).trans (Œ≥'.map h) := by
  ext t
  rw [trans_apply, map_coe, Function.comp_apply, trans_apply]
  split_ifs <;> rfl

@[simp]
theorem map_id (Œ≥ : Path x y) : Œ≥.map continuous_id = Œ≥ := by
  ext
  rfl

@[simp]
theorem map_map (Œ≥ : Path x y) {Z : Type*} [TopologicalSpace Z]
    {f : X ‚Üí Y} (hf : Continuous f) {g : Y ‚Üí Z} (hg : Continuous g) :
    (Œ≥.map hf).map hg = Œ≥.map (hg.comp hf) := by
  ext
  rfl

/-- Casting a path from `x` to `y` to a path from `x'` to `y'` when `x' = x` and `y' = y` -/
def cast (Œ≥ : Path x y) {x' y'} (hx : x' = x) (hy : y' = y) : Path x' y' where
  toFun := Œ≥
  continuous_toFun := Œ≥.continuous
  source' := by simp [hx]
  target' := by simp [hy]

@[simp]
theorem symm_cast {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : X} (Œ≥ : Path a‚ÇÇ b‚ÇÇ) (ha : a‚ÇÅ = a‚ÇÇ) (hb : b‚ÇÅ = b‚ÇÇ) :
    (Œ≥.cast ha hb).symm = Œ≥.symm.cast hb ha :=
  rfl

@[simp]
theorem trans_cast {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : X} (Œ≥ : Path a‚ÇÇ b‚ÇÇ)
    (Œ≥' : Path b‚ÇÇ c‚ÇÇ) (ha : a‚ÇÅ = a‚ÇÇ) (hb : b‚ÇÅ = b‚ÇÇ) (hc : c‚ÇÅ = c‚ÇÇ) :
    (Œ≥.cast ha hb).trans (Œ≥'.cast hb hc) = (Œ≥.trans Œ≥').cast ha hc :=
  rfl

@[simp]
theorem cast_coe (Œ≥ : Path x y) {x' y'} (hx : x' = x) (hy : y' = y) : (Œ≥.cast hx hy : I ‚Üí X) = Œ≥ :=
  rfl

@[continuity, fun_prop]
theorem symm_continuous_family {Œπ : Type*} [TopologicalSpace Œπ]
    {a b : Œπ ‚Üí X} (Œ≥ : ‚àÄ t : Œπ, Path (a t) (b t)) (h : Continuous ‚ÜøŒ≥) :
    Continuous ‚Üøfun t => (Œ≥ t).symm :=
  h.comp (continuous_id.prodMap continuous_symm)

@[continuity]
theorem continuous_symm : Continuous (symm : Path x y ‚Üí Path y x) :=
  continuous_uncurry_iff.mp <| symm_continuous_family _ (by fun_prop)

@[continuity]
theorem continuous_uncurry_extend_of_continuous_family {Œπ : Type*} [TopologicalSpace Œπ]
    {a b : Œπ ‚Üí X} (Œ≥ : ‚àÄ t : Œπ, Path (a t) (b t)) (h : Continuous ‚ÜøŒ≥) :
    Continuous ‚Üøfun t => (Œ≥ t).extend := by
  apply h.comp (continuous_id.prodMap continuous_projIcc)
  exact zero_le_one

@[continuity]
theorem trans_continuous_family {Œπ : Type*} [TopologicalSpace Œπ]
    {a b c : Œπ ‚Üí X} (Œ≥‚ÇÅ : ‚àÄ t : Œπ, Path (a t) (b t)) (h‚ÇÅ : Continuous ‚ÜøŒ≥‚ÇÅ)
    (Œ≥‚ÇÇ : ‚àÄ t : Œπ, Path (b t) (c t)) (h‚ÇÇ : Continuous ‚ÜøŒ≥‚ÇÇ) :
    Continuous ‚Üøfun t => (Œ≥‚ÇÅ t).trans (Œ≥‚ÇÇ t) := by
  have h‚ÇÅ' := Path.continuous_uncurry_extend_of_continuous_family Œ≥‚ÇÅ h‚ÇÅ
  have h‚ÇÇ' := Path.continuous_uncurry_extend_of_continuous_family Œ≥‚ÇÇ h‚ÇÇ
  simp only [HasUncurry.uncurry, CoeFun.coe, Path.trans, (¬∑ ‚àò ¬∑)]
  refine Continuous.if_le ?_ ?_ (continuous_subtype_val.comp continuous_snd) continuous_const ?_
  ¬∑ change
      Continuous ((fun p : Œπ √ó ‚Ñù => (Œ≥‚ÇÅ p.1).extend p.2) ‚àò Prod.map id (fun x => 2 * x : I ‚Üí ‚Ñù))
    exact h‚ÇÅ'.comp (continuous_id.prodMap <| continuous_const.mul continuous_subtype_val)
  ¬∑ change
      Continuous ((fun p : Œπ √ó ‚Ñù => (Œ≥‚ÇÇ p.1).extend p.2) ‚àò Prod.map id (fun x => 2 * x - 1 : I ‚Üí ‚Ñù))
    exact
      h‚ÇÇ'.comp
        (continuous_id.prodMap <|
          (continuous_const.mul continuous_subtype_val).sub continuous_const)
  ¬∑ rintro st hst
    simp [hst, mul_inv_cancel‚ÇÄ (two_ne_zero' ‚Ñù)]

@[continuity, fun_prop]
theorem _root_.Continuous.path_trans {f : Y ‚Üí Path x y} {g : Y ‚Üí Path y z} :
    Continuous f ‚Üí Continuous g ‚Üí Continuous fun t => (f t).trans (g t) := by
  intro hf hg
  apply continuous_uncurry_iff.mp
  exact trans_continuous_family _ (continuous_uncurry_iff.mpr hf) _ (continuous_uncurry_iff.mpr hg)

@[continuity, fun_prop]
theorem continuous_trans {x y z : X} : Continuous fun œÅ : Path x y √ó Path y z => œÅ.1.trans œÅ.2 := by
  fun_prop


/-! #### Product of paths -/
section Prod

variable {a‚ÇÅ a‚ÇÇ a‚ÇÉ : X} {b‚ÇÅ b‚ÇÇ b‚ÇÉ : Y}

/-- Given a path in `X` and a path in `Y`, we can take their pointwise product to get a path in
`X √ó Y`. -/
protected def prod (Œ≥‚ÇÅ : Path a‚ÇÅ a‚ÇÇ) (Œ≥‚ÇÇ : Path b‚ÇÅ b‚ÇÇ) : Path (a‚ÇÅ, b‚ÇÅ) (a‚ÇÇ, b‚ÇÇ) where
  toContinuousMap := ContinuousMap.prodMk Œ≥‚ÇÅ.toContinuousMap Œ≥‚ÇÇ.toContinuousMap
  source' := by simp
  target' := by simp

@[simp]
theorem prod_coe (Œ≥‚ÇÅ : Path a‚ÇÅ a‚ÇÇ) (Œ≥‚ÇÇ : Path b‚ÇÅ b‚ÇÇ) :
    ‚áë(Œ≥‚ÇÅ.prod Œ≥‚ÇÇ) = fun t => (Œ≥‚ÇÅ t, Œ≥‚ÇÇ t) :=
  rfl

/-- Path composition commutes with products -/
theorem trans_prod_eq_prod_trans (Œ≥‚ÇÅ : Path a‚ÇÅ a‚ÇÇ) (Œ¥‚ÇÅ : Path a‚ÇÇ a‚ÇÉ) (Œ≥‚ÇÇ : Path b‚ÇÅ b‚ÇÇ)
    (Œ¥‚ÇÇ : Path b‚ÇÇ b‚ÇÉ) : (Œ≥‚ÇÅ.prod Œ≥‚ÇÇ).trans (Œ¥‚ÇÅ.prod Œ¥‚ÇÇ) = (Œ≥‚ÇÅ.trans Œ¥‚ÇÅ).prod (Œ≥‚ÇÇ.trans Œ¥‚ÇÇ) := by
  ext t <;>
  unfold Path.trans <;>
  simp only [Path.coe_mk_mk, Path.prod_coe, Function.comp_apply] <;>
  split_ifs <;>
  rfl

end Prod

section Pi

variable {œá : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (œá i)] {as bs cs : ‚àÄ i, œá i}

/-- Given a family of paths, one in each X·µ¢, we take their pointwise product to get a path in
Œ† i, X·µ¢. -/
protected def pi (Œ≥ : ‚àÄ i, Path (as i) (bs i)) : Path as bs where
  toContinuousMap := ContinuousMap.pi fun i => (Œ≥ i).toContinuousMap
  source' := by simp
  target' := by simp

@[simp]
theorem pi_coe (Œ≥ : ‚àÄ i, Path (as i) (bs i)) : ‚áë(Path.pi Œ≥) = fun t i => Œ≥ i t :=
  rfl

/-- Path composition commutes with products -/
theorem trans_pi_eq_pi_trans (Œ≥‚ÇÄ : ‚àÄ i, Path (as i) (bs i)) (Œ≥‚ÇÅ : ‚àÄ i, Path (bs i) (cs i)) :
    (Path.pi Œ≥‚ÇÄ).trans (Path.pi Œ≥‚ÇÅ) = Path.pi fun i => (Œ≥‚ÇÄ i).trans (Œ≥‚ÇÅ i) := by
  ext t i
  unfold Path.trans
  simp only [Path.coe_mk_mk, Function.comp_apply, pi_coe]
  split_ifs <;> rfl

end Pi

/-! #### Pointwise multiplication/addition of two paths in a topological (additive) group -/


/-- Pointwise multiplication of paths in a topological group. The additive version is probably more
useful. -/
@[to_additive "Pointwise addition of paths in a topological additive group."]
protected def mul [Mul X] [ContinuousMul X] {a‚ÇÅ b‚ÇÅ a‚ÇÇ b‚ÇÇ : X} (Œ≥‚ÇÅ : Path a‚ÇÅ b‚ÇÅ) (Œ≥‚ÇÇ : Path a‚ÇÇ b‚ÇÇ) :
    Path (a‚ÇÅ * a‚ÇÇ) (b‚ÇÅ * b‚ÇÇ) :=
  (Œ≥‚ÇÅ.prod Œ≥‚ÇÇ).map continuous_mul

@[to_additive]
protected theorem mul_apply [Mul X] [ContinuousMul X] {a‚ÇÅ b‚ÇÅ a‚ÇÇ b‚ÇÇ : X} (Œ≥‚ÇÅ : Path a‚ÇÅ b‚ÇÅ)
    (Œ≥‚ÇÇ : Path a‚ÇÇ b‚ÇÇ) (t : unitInterval) : (Œ≥‚ÇÅ.mul Œ≥‚ÇÇ) t = Œ≥‚ÇÅ t * Œ≥‚ÇÇ t :=
  rfl

/-! #### Truncating a path -/


/-- `Œ≥.truncate t‚ÇÄ t‚ÇÅ` is the path which follows the path `Œ≥` on the time interval `[t‚ÇÄ, t‚ÇÅ]`
and stays still otherwise. -/
def truncate {X : Type*} [TopologicalSpace X] {a b : X} (Œ≥ : Path a b) (t‚ÇÄ t‚ÇÅ : ‚Ñù) :
    Path (Œ≥.extend <| min t‚ÇÄ t‚ÇÅ) (Œ≥.extend t‚ÇÅ) where
  toFun s := Œ≥.extend (min (max s t‚ÇÄ) t‚ÇÅ)
  continuous_toFun :=
    Œ≥.continuous_extend.comp ((continuous_subtype_val.max continuous_const).min continuous_const)
  source' := by
    simp only [min_def, max_def']
    split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ
    ¬∑ simp [Œ≥.extend_of_le_zero h‚ÇÅ]
    ¬∑ congr
      linarith
    ¬∑ have h‚ÇÑ : t‚ÇÅ ‚â§ 0 := le_of_lt (by simpa using h‚ÇÇ)
      simp [Œ≥.extend_of_le_zero h‚ÇÑ, Œ≥.extend_of_le_zero h‚ÇÅ]
    all_goals rfl
  target' := by
    simp only [min_def, max_def']
    split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÉ
    ¬∑ simp [Œ≥.extend_of_one_le h‚ÇÇ]
    ¬∑ rfl
    ¬∑ have h‚ÇÑ : 1 ‚â§ t‚ÇÄ := le_of_lt (by simpa using h‚ÇÅ)
      simp [Œ≥.extend_of_one_le h‚ÇÑ, Œ≥.extend_of_one_le (h‚ÇÑ.trans h‚ÇÉ)]
    ¬∑ rfl

/-- `Œ≥.truncateOfLE t‚ÇÄ t‚ÇÅ h`, where `h : t‚ÇÄ ‚â§ t‚ÇÅ` is `Œ≥.truncate t‚ÇÄ t‚ÇÅ`
casted as a path from `Œ≥.extend t‚ÇÄ` to `Œ≥.extend t‚ÇÅ`. -/
def truncateOfLE {X : Type*} [TopologicalSpace X] {a b : X} (Œ≥ : Path a b) {t‚ÇÄ t‚ÇÅ : ‚Ñù}
    (h : t‚ÇÄ ‚â§ t‚ÇÅ) : Path (Œ≥.extend t‚ÇÄ) (Œ≥.extend t‚ÇÅ) :=
  (Œ≥.truncate t‚ÇÄ t‚ÇÅ).cast (by rw [min_eq_left h]) rfl

theorem truncate_range {a b : X} (Œ≥ : Path a b) {t‚ÇÄ t‚ÇÅ : ‚Ñù} :
    range (Œ≥.truncate t‚ÇÄ t‚ÇÅ) ‚äÜ range Œ≥ := by
  rw [‚Üê Œ≥.extend_range]
  simp only [range_subset_iff, SetCoe.exists, SetCoe.forall]
  intro x _hx
  simp only [DFunLike.coe, Path.truncate, mem_range_self]

/-- For a path `Œ≥`, `Œ≥.truncate` gives a "continuous family of paths", by which we mean
the uncurried function which maps `(t‚ÇÄ, t‚ÇÅ, s)` to `Œ≥.truncate t‚ÇÄ t‚ÇÅ s` is continuous. -/
@[continuity]
theorem truncate_continuous_family {a b : X} (Œ≥ : Path a b) :
    Continuous (fun x => Œ≥.truncate x.1 x.2.1 x.2.2 : ‚Ñù √ó ‚Ñù √ó I ‚Üí X) :=
  Œ≥.continuous_extend.comp
    (((continuous_subtype_val.comp (continuous_snd.comp continuous_snd)).max continuous_fst).min
      (continuous_fst.comp continuous_snd))

@[continuity]
theorem truncate_const_continuous_family {a b : X} (Œ≥ : Path a b)
    (t : ‚Ñù) : Continuous ‚Üø(Œ≥.truncate t) := by
  have key : Continuous (fun x => (t, x) : ‚Ñù √ó I ‚Üí ‚Ñù √ó ‚Ñù √ó I) := by fun_prop
  exact Œ≥.truncate_continuous_family.comp key

@[simp]
theorem truncate_self {a b : X} (Œ≥ : Path a b) (t : ‚Ñù) :
    Œ≥.truncate t t = (Path.refl <| Œ≥.extend t).cast (by rw [min_self]) rfl := by
  ext x
  rw [cast_coe]
  simp only [truncate, DFunLike.coe, refl, min_def, max_def]
  split_ifs with h‚ÇÅ h‚ÇÇ <;> congr

theorem truncate_zero_zero {a b : X} (Œ≥ : Path a b) :
    Œ≥.truncate 0 0 = (Path.refl a).cast (by rw [min_self, Œ≥.extend_zero]) Œ≥.extend_zero := by
  convert Œ≥.truncate_self 0

theorem truncate_one_one {a b : X} (Œ≥ : Path a b) :
    Œ≥.truncate 1 1 = (Path.refl b).cast (by rw [min_self, Œ≥.extend_one]) Œ≥.extend_one := by
  convert Œ≥.truncate_self 1

@[simp]
theorem truncate_zero_one {a b : X} (Œ≥ : Path a b) :
    Œ≥.truncate 0 1 = Œ≥.cast (by simp [zero_le_one, extend_zero]) (by simp) := by
  ext x
  rw [cast_coe]
  have : ‚Üëx ‚àà (Icc 0 1 : Set ‚Ñù) := x.2
  rw [truncate, coe_mk_mk, max_eq_left this.1, min_eq_left this.2, extend_extends']

/-! #### Reparametrising a path -/


/-- Given a path `Œ≥` and a function `f : I ‚Üí I` where `f 0 = 0` and `f 1 = 1`, `Œ≥.reparam f` is the
path defined by `Œ≥ ‚àò f`.
-/
def reparam (Œ≥ : Path x y) (f : I ‚Üí I) (hfcont : Continuous f) (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
    Path x y where
  toFun := Œ≥ ‚àò f
  continuous_toFun := by fun_prop
  source' := by simp [hf‚ÇÄ]
  target' := by simp [hf‚ÇÅ]

@[simp]
theorem coe_reparam (Œ≥ : Path x y) {f : I ‚Üí I} (hfcont : Continuous f) (hf‚ÇÄ : f 0 = 0)
    (hf‚ÇÅ : f 1 = 1) : ‚áë(Œ≥.reparam f hfcont hf‚ÇÄ hf‚ÇÅ) = Œ≥ ‚àò f :=
  rfl

@[simp]
theorem reparam_id (Œ≥ : Path x y) : Œ≥.reparam id continuous_id rfl rfl = Œ≥ := by
  ext
  rfl

theorem range_reparam (Œ≥ : Path x y) {f : I ‚Üí I} (hfcont : Continuous f) (hf‚ÇÄ : f 0 = 0)
    (hf‚ÇÅ : f 1 = 1) : range (Œ≥.reparam f hfcont hf‚ÇÄ hf‚ÇÅ) = range Œ≥ := by
  change range (Œ≥ ‚àò f) = range Œ≥
  have : range f = univ := by
    rw [range_eq_univ]
    intro t
    have h‚ÇÅ : Continuous (Set.IccExtend (zero_le_one' ‚Ñù) f) := by continuity
    have := intermediate_value_Icc (zero_le_one' ‚Ñù) h‚ÇÅ.continuousOn
    ¬∑ rw [IccExtend_left, IccExtend_right, Icc.mk_zero, Icc.mk_one, hf‚ÇÄ, hf‚ÇÅ] at this
      rcases this t.2 with ‚ü®w, hw‚ÇÅ, hw‚ÇÇ‚ü©
      rw [IccExtend_of_mem _ _ hw‚ÇÅ] at hw‚ÇÇ
      exact ‚ü®_, hw‚ÇÇ‚ü©
  rw [range_comp, this, image_univ]

theorem refl_reparam {f : I ‚Üí I} (hfcont : Continuous f) (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
    (refl x).reparam f hfcont hf‚ÇÄ hf‚ÇÅ = refl x := by
  ext
  simp

end Path
