/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Topology.ContinuousOn
import Mathlib.Order.Filter.SmallSets

#align_import topology.locally_finite from "leanprover-community/mathlib"@"55d771df074d0dd020139ee1cd4b95521422df9f"

/-!
### Locally finite families of sets

We say that a family of sets in a topological space is *locally finite* if at every point `x : X`,
there is a neighborhood of `x` which meets only finitely many sets in the family.

In this file we give the definition and prove basic properties of locally finite families of sets.
-/

-- locally finite family [General Topology (Bourbaki, 1995)]
open Set Function Filter Topology

variable {Œπ Œπ' Œ± X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] {f g : Œπ ‚Üí Set X}

/-- A family of sets in `Set X` is locally finite if at every point `x : X`,
there is a neighborhood of `x` which meets only finitely many sets in the family. -/
def LocallyFinite (f : Œπ ‚Üí Set X) :=
  ‚àÄ x : X, ‚àÉ t ‚àà ùìù x, { i | (f i ‚à© t).Nonempty }.Finite
#align locally_finite LocallyFinite

theorem locallyFinite_of_finite [Finite Œπ] (f : Œπ ‚Üí Set X) : LocallyFinite f := fun _ =>
  ‚ü®univ, univ_mem, toFinite _‚ü©
#align locally_finite_of_finite locallyFinite_of_finite

namespace LocallyFinite

theorem point_finite (hf : LocallyFinite f) (x : X) : { b | x ‚àà f b }.Finite :=
  let ‚ü®_t, hxt, ht‚ü© := hf x
  ht.subset fun _b hb => ‚ü®x, hb, mem_of_mem_nhds hxt‚ü©
#align locally_finite.point_finite LocallyFinite.point_finite

protected theorem subset (hf : LocallyFinite f) (hg : ‚àÄ i, g i ‚äÜ f i) : LocallyFinite g := fun a =>
  let ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü© := hf a
  ‚ü®t, ht‚ÇÅ, ht‚ÇÇ.subset fun i hi => hi.mono <| inter_subset_inter (hg i) Subset.rfl‚ü©
#align locally_finite.subset LocallyFinite.subset

theorem comp_injOn {g : Œπ' ‚Üí Œπ} (hf : LocallyFinite f) (hg : InjOn g { i | (f (g i)).Nonempty }) :
    LocallyFinite (f ‚àò g) := fun x => by
  let ‚ü®t, htx, htf‚ü© := hf x
  refine ‚ü®t, htx, htf.preimage <| ?_‚ü©
  exact hg.mono fun i (hi : Set.Nonempty _) => hi.left
#align locally_finite.comp_inj_on LocallyFinite.comp_injOn

theorem comp_injective {g : Œπ' ‚Üí Œπ} (hf : LocallyFinite f) (hg : Injective g) :
    LocallyFinite (f ‚àò g) :=
  hf.comp_injOn (hg.injOn _)
#align locally_finite.comp_injective LocallyFinite.comp_injective

theorem _root_.locallyFinite_iff_smallSets :
    LocallyFinite f ‚Üî ‚àÄ x, ‚àÄ·∂† s in (ùìù x).smallSets, { i | (f i ‚à© s).Nonempty }.Finite :=
  forall_congr' fun _ => Iff.symm <|
    eventually_smallSets' fun _s _t hst ht =>
      ht.subset fun _i hi => hi.mono <| inter_subset_inter_right _ hst
#align locally_finite_iff_small_sets locallyFinite_iff_smallSets

protected theorem eventually_smallSets (hf : LocallyFinite f) (x : X) :
    ‚àÄ·∂† s in (ùìù x).smallSets, { i | (f i ‚à© s).Nonempty }.Finite :=
  locallyFinite_iff_smallSets.mp hf x
#align locally_finite.eventually_small_sets LocallyFinite.eventually_smallSets

theorem exists_mem_basis {Œπ' : Sort*} (hf : LocallyFinite f) {p : Œπ' ‚Üí Prop} {s : Œπ' ‚Üí Set X}
    {x : X} (hb : (ùìù x).HasBasis p s) : ‚àÉ i, p i ‚àß { j | (f j ‚à© s i).Nonempty }.Finite :=
  let ‚ü®i, hpi, hi‚ü© := hb.smallSets.eventually_iff.mp (hf.eventually_smallSets x)
  ‚ü®i, hpi, hi Subset.rfl‚ü©
#align locally_finite.exists_mem_basis LocallyFinite.exists_mem_basis

protected theorem nhdsWithin_iUnion (hf : LocallyFinite f) (a : X) :
    ùìù[‚ãÉ i, f i] a = ‚®Ü i, ùìù[f i] a := by
  rcases hf a with ‚ü®U, haU, hfin‚ü©
  refine le_antisymm ?_ (Monotone.le_map_iSup fun _ _ ‚Ü¶ nhdsWithin_mono _)
  calc
    ùìù[‚ãÉ i, f i] a = ùìù[‚ãÉ i, f i ‚à© U] a := by
      rw [‚Üê iUnion_inter, ‚Üê nhdsWithin_inter_of_mem' (nhdsWithin_le_nhds haU)]
    _ = ùìù[‚ãÉ i ‚àà {j | (f j ‚à© U).Nonempty}, (f i ‚à© U)] a := by
      simp only [mem_setOf_eq, iUnion_nonempty_self]
    _ = ‚®Ü i ‚àà {j | (f j ‚à© U).Nonempty}, ùìù[f i ‚à© U] a := nhdsWithin_biUnion hfin _ _
    _ ‚â§ ‚®Ü i, ùìù[f i ‚à© U] a := iSup‚ÇÇ_le_iSup _ _
    _ ‚â§ ‚®Ü i, ùìù[f i] a := iSup_mono fun i ‚Ü¶ nhdsWithin_mono _ <| inter_subset_left _ _
#align locally_finite.nhds_within_Union LocallyFinite.nhdsWithin_iUnion

theorem continuousOn_iUnion' {g : X ‚Üí Y} (hf : LocallyFinite f)
    (hc : ‚àÄ i x, x ‚àà closure (f i) ‚Üí ContinuousWithinAt g (f i) x) :
    ContinuousOn g (‚ãÉ i, f i) := by
  rintro x -
  rw [ContinuousWithinAt, hf.nhdsWithin_iUnion, tendsto_iSup]
  intro i
  by_cases hx : x ‚àà closure (f i)
  ¬∑ exact hc i _ hx
  ¬∑ rw [mem_closure_iff_nhdsWithin_neBot, not_neBot] at hx
    rw [hx]
    exact tendsto_bot
#align locally_finite.continuous_on_Union' LocallyFinite.continuousOn_iUnion'

theorem continuousOn_iUnion {g : X ‚Üí Y} (hf : LocallyFinite f) (h_cl : ‚àÄ i, IsClosed (f i))
    (h_cont : ‚àÄ i, ContinuousOn g (f i)) : ContinuousOn g (‚ãÉ i, f i) :=
  hf.continuousOn_iUnion' fun i x hx ‚Ü¶ h_cont i x <| (h_cl i).closure_subset hx
#align locally_finite.continuous_on_Union LocallyFinite.continuousOn_iUnion

protected theorem continuous' {g : X ‚Üí Y} (hf : LocallyFinite f) (h_cov : ‚ãÉ i, f i = univ)
    (hc : ‚àÄ i x, x ‚àà closure (f i) ‚Üí ContinuousWithinAt g (f i) x) :
    Continuous g :=
  continuous_iff_continuousOn_univ.2 <| h_cov ‚ñ∏ hf.continuousOn_iUnion' hc
#align locally_finite.continuous' LocallyFinite.continuous'

protected theorem continuous {g : X ‚Üí Y} (hf : LocallyFinite f) (h_cov : ‚ãÉ i, f i = univ)
    (h_cl : ‚àÄ i, IsClosed (f i)) (h_cont : ‚àÄ i, ContinuousOn g (f i)) :
    Continuous g :=
  continuous_iff_continuousOn_univ.2 <| h_cov ‚ñ∏ hf.continuousOn_iUnion h_cl h_cont
#align locally_finite.continuous LocallyFinite.continuous

protected theorem closure (hf : LocallyFinite f) : LocallyFinite fun i => closure (f i) := by
  intro x
  rcases hf x with ‚ü®s, hsx, hsf‚ü©
  refine' ‚ü®interior s, interior_mem_nhds.2 hsx, hsf.subset fun i hi => _‚ü©
  exact (hi.mono isOpen_interior.closure_inter).of_closure.mono
    (inter_subset_inter_right _ interior_subset)
#align locally_finite.closure LocallyFinite.closure

theorem closure_iUnion (h : LocallyFinite f) : closure (‚ãÉ i, f i) = ‚ãÉ i, closure (f i) := by
  ext x
  simp only [mem_closure_iff_nhdsWithin_neBot, h.nhdsWithin_iUnion, iSup_neBot, mem_iUnion]
#align locally_finite.closure_Union LocallyFinite.closure_iUnion

theorem isClosed_iUnion (hf : LocallyFinite f) (hc : ‚àÄ i, IsClosed (f i)) :
    IsClosed (‚ãÉ i, f i) := by
  simp only [‚Üê closure_eq_iff_isClosed, hf.closure_iUnion, (hc _).closure_eq]
#align locally_finite.is_closed_Union LocallyFinite.isClosed_iUnion

/-- If `f : Œ≤ ‚Üí Set Œ±` is a locally finite family of closed sets, then for any `x : Œ±`, the
intersection of the complements to `f i`, `x ‚àâ f i`, is a neighbourhood of `x`. -/
theorem iInter_compl_mem_nhds (hf : LocallyFinite f) (hc : ‚àÄ i, IsClosed (f i)) (x : X) :
    (‚ãÇ (i) (_ : x ‚àâ f i), (f i)·∂ú) ‚àà ùìù x := by
  refine' IsOpen.mem_nhds _ (mem_iInter‚ÇÇ.2 fun i => id)
  suffices IsClosed (‚ãÉ i : { i // x ‚àâ f i }, f i) by
    rwa [‚Üê isOpen_compl_iff, compl_iUnion, iInter_subtype] at this
  exact (hf.comp_injective Subtype.val_injective).isClosed_iUnion fun i => hc _
#align locally_finite.Inter_compl_mem_nhds LocallyFinite.iInter_compl_mem_nhds

/-- Let `f : ‚Ñï ‚Üí Œ† a, Œ≤ a` be a sequence of (dependent) functions on a topological space. Suppose
that the family of sets `s n = {x | f (n + 1) x ‚â† f n x}` is locally finite. Then there exists a
function `F : Œ† a, Œ≤ a` such that for any `x`, we have `f n x = F x` on the product of an infinite
interval `[N, +‚àû)` and a neighbourhood of `x`.

We formulate the conclusion in terms of the product of filter `Filter.atTop` and `ùìù x`. -/
theorem exists_forall_eventually_eq_prod {œÄ : X ‚Üí Sort*} {f : ‚Ñï ‚Üí ‚àÄ x : X, œÄ x}
    (hf : LocallyFinite fun n => { x | f (n + 1) x ‚â† f n x }) :
    ‚àÉ F : ‚àÄ x : X, œÄ x, ‚àÄ x, ‚àÄ·∂† p : ‚Ñï √ó X in atTop √óÀ¢ ùìù x, f p.1 p.2 = F p.2 := by
  choose U hUx hU using hf
  choose N hN using fun x => (hU x).bddAbove
  replace hN : ‚àÄ (x), ‚àÄ n > N x, ‚àÄ y ‚àà U x, f (n + 1) y = f n y
  exact fun x n hn y hy => by_contra fun hne => hn.lt.not_le <| hN x ‚ü®y, hne, hy‚ü©
  replace hN : ‚àÄ (x), ‚àÄ n ‚â• N x + 1, ‚àÄ y ‚àà U x, f n y = f (N x + 1) y
  exact fun x n hn y hy => Nat.le_induction rfl (fun k hle => (hN x _ hle _ hy).trans) n hn
  refine ‚ü®fun x => f (N x + 1) x, fun x => ?_‚ü©
  filter_upwards [Filter.prod_mem_prod (eventually_gt_atTop (N x)) (hUx x)]
  rintro ‚ü®n, y‚ü© ‚ü®hn : N x < n, hy : y ‚àà U x‚ü©
  calc
    f n y = f (N x + 1) y := hN _ _ hn _ hy
    _ = f (max (N x + 1) (N y + 1)) y := (hN _ _ (le_max_left _ _) _ hy).symm
    _ = f (N y + 1) y := hN _ _ (le_max_right _ _) _ (mem_of_mem_nhds <| hUx y)
#align locally_finite.exists_forall_eventually_eq_prod LocallyFinite.exists_forall_eventually_eq_prod

/-- Let `f : ‚Ñï ‚Üí Œ† a, Œ≤ a` be a sequence of (dependent) functions on a topological space. Suppose
that the family of sets `s n = {x | f (n + 1) x ‚â† f n x}` is locally finite. Then there exists a
function `F : Œ† a, Œ≤ a` such that for any `x`, for sufficiently large values of `n`, we have
`f n y = F y` in a neighbourhood of `x`. -/
theorem exists_forall_eventually_atTop_eventually_eq' {œÄ : X ‚Üí Sort*} {f : ‚Ñï ‚Üí ‚àÄ x : X, œÄ x}
    (hf : LocallyFinite fun n => { x | f (n + 1) x ‚â† f n x }) :
    ‚àÉ F : ‚àÄ x : X, œÄ x, ‚àÄ x, ‚àÄ·∂† n : ‚Ñï in atTop, ‚àÄ·∂† y : X in ùìù x, f n y = F y :=
  hf.exists_forall_eventually_eq_prod.imp fun _F hF x => (hF x).curry
#align locally_finite.exists_forall_eventually_at_top_eventually_eq' LocallyFinite.exists_forall_eventually_atTop_eventually_eq'

/-- Let `f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤` be a sequence of functions on a topological space. Suppose
that the family of sets `s n = {x | f (n + 1) x ‚â† f n x}` is locally finite. Then there exists a
function `F :  Œ± ‚Üí Œ≤` such that for any `x`, for sufficiently large values of `n`, we have
`f n =·∂†[ùìù x] F`. -/
theorem exists_forall_eventually_atTop_eventuallyEq {f : ‚Ñï ‚Üí X ‚Üí Œ±}
    (hf : LocallyFinite fun n => { x | f (n + 1) x ‚â† f n x }) :
    ‚àÉ F : X ‚Üí Œ±, ‚àÄ x, ‚àÄ·∂† n : ‚Ñï in atTop, f n =·∂†[ùìù x] F :=
  hf.exists_forall_eventually_atTop_eventually_eq'
#align locally_finite.exists_forall_eventually_at_top_eventually_eq LocallyFinite.exists_forall_eventually_atTop_eventuallyEq

theorem preimage_continuous {g : Y ‚Üí X} (hf : LocallyFinite f) (hg : Continuous g) :
    LocallyFinite (g ‚Åª¬π' f ¬∑) := fun x =>
  let ‚ü®s, hsx, hs‚ü© := hf (g x)
  ‚ü®g ‚Åª¬π' s, hg.continuousAt hsx, hs.subset fun _ ‚ü®y, hy‚ü© => ‚ü®g y, hy‚ü©‚ü©
#align locally_finite.preimage_continuous LocallyFinite.preimage_continuous

theorem prod_right (hf : LocallyFinite f) (g : Œπ ‚Üí Set Y) : LocallyFinite (fun i ‚Ü¶ f i √óÀ¢ g i) :=
  (hf.preimage_continuous continuous_fst).subset fun _ ‚Ü¶ prod_subset_preimage_fst _ _

theorem prod_left {g : Œπ ‚Üí Set Y} (hg : LocallyFinite g) (f : Œπ ‚Üí Set X) :
    LocallyFinite (fun i ‚Ü¶ f i √óÀ¢ g i) :=
  (hg.preimage_continuous continuous_snd).subset fun _ ‚Ü¶ prod_subset_preimage_snd _ _

end LocallyFinite

@[simp]
theorem Equiv.locallyFinite_comp_iff (e : Œπ' ‚âÉ Œπ) : LocallyFinite (f ‚àò e) ‚Üî LocallyFinite f :=
  ‚ü®fun h => by simpa only [(¬∑ ‚àò ¬∑), e.apply_symm_apply] using h.comp_injective e.symm.injective,
    fun h => h.comp_injective e.injective‚ü©
#align equiv.locally_finite_comp_iff Equiv.locallyFinite_comp_iff

theorem locallyFinite_sum {f : Sum Œπ Œπ' ‚Üí Set X} :
    LocallyFinite f ‚Üî LocallyFinite (f ‚àò Sum.inl) ‚àß LocallyFinite (f ‚àò Sum.inr) := by
  simp only [locallyFinite_iff_smallSets, ‚Üê forall_and, ‚Üê finite_preimage_inl_and_inr,
    preimage_setOf_eq, (¬∑ ‚àò ¬∑), eventually_and]
#align locally_finite_sum locallyFinite_sum

theorem LocallyFinite.sum_elim {g : Œπ' ‚Üí Set X} (hf : LocallyFinite f) (hg : LocallyFinite g) :
    LocallyFinite (Sum.elim f g) :=
  locallyFinite_sum.mpr ‚ü®hf, hg‚ü©
#align locally_finite.sum_elim LocallyFinite.sum_elim

theorem locallyFinite_option {f : Option Œπ ‚Üí Set X} :
    LocallyFinite f ‚Üî LocallyFinite (f ‚àò some) := by
  rw [‚Üê (Equiv.optionEquivSumPUnit.{_, 0} Œπ).symm.locallyFinite_comp_iff, locallyFinite_sum]
  simp only [locallyFinite_of_finite, and_true]
  rfl
#align locally_finite_option locallyFinite_option

theorem LocallyFinite.option_elim' (hf : LocallyFinite f) (s : Set X) :
    LocallyFinite (Option.elim' s f) :=
  locallyFinite_option.2 hf
#align locally_finite.option_elim LocallyFinite.option_elim'

theorem LocallyFinite.eventually_subset {s : Œπ ‚Üí Set X}
    (hs : LocallyFinite s) (hs' : ‚àÄ i, IsClosed (s i)) (x : X) :
    ‚àÄ·∂† y in ùìù x, {i | y ‚àà s i} ‚äÜ {i | x ‚àà s i} := by
  filter_upwards [hs.iInter_compl_mem_nhds hs' x] with y hy i hi
  simp only [mem_iInter, mem_compl_iff] at hy
  exact not_imp_not.mp (hy i) hi
