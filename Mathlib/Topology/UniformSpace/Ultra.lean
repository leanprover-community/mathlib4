/-
Copyright (c) 2017 Yakov Pechersky. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yakov Pechersky
-/
import Mathlib.Topology.UniformSpace.Defs
import Mathlib.Topology.Bases

/-!
# Ultrametric (nonarchimedean) uniform spaces

Ultrametric (nonarchimedean) uniform spaces are ones that generalize ultrametric spaces by
having a uniformity based on equivalence relations.

## Main definitions

In this file we define `IsUltraUniformity`, a Prop mixin typeclass.

## Main results

* `TopologicalSpace.isTopologicalBasis_clopens`: a uniform space with a nonarchimedean uniformity
  has a topological basis of clopen sets in the topology, meaning that it is topologically
  zero-dimensional.

## Implementation notes

As in the `Topology/UniformSpace/Defs.lean` file, we do not reuse `Data/Rel.lean`
but rather extend the relation properties as needed.

## TODOs

* Prove that `IsUltraUniformity` iff metrizable by `IsUltrametricDist` on a `PseudoMetricSpace`
  under a countable system/basis condition
* Generalize `IsUltrametricDist` to `IsUltrametricUniformity`
* Provide `IsUltraUniformity` for the uniformity in a `Valued` ring
* Generalize results about open/closed balls and spheres in `IsUltraUniformity` to
  combine applications for `MetricSpace.ball` and valued "balls"
* Use `IsUltraUniformity` to work with profinite/totally separated spaces
* Define the nonarchimedean uniformity of a space that is a product of `IsUltraUniformity`s
* Show that the `UniformSpace.Completion` of an `IsUltraUniformity` is `IsUltraUniformity`

## References

* [D. Windisch, *Equivalent characterizations of non-Archimedean uniform spaces*][windisch2021]
* [A. C. M. van Rooij, *Non-Archimedean uniformities*][vanrooij1970]

-/

open Set Filter Topology
open scoped Uniformity

variable {X : Type*}

/-- The relation is transitive. -/
def IsTransitiveRel (V : Set (X √ó X)) : Prop :=
  ‚àÄ ‚¶Éx y z‚¶Ñ, (x, y) ‚àà V ‚Üí (y, z) ‚àà V ‚Üí (x, z) ‚àà V

lemma IsTransitiveRel.comp_subset_self {s : Set (X √ó X)}
    (h : IsTransitiveRel s) :
    s ‚óã s ‚äÜ s :=
  fun ‚ü®_, _‚ü© ‚ü®_, hxz, hzy‚ü© ‚Ü¶ h hxz hzy

lemma isTransitiveRel_iff_comp_subset_self {s : Set (X √ó X)} :
    IsTransitiveRel s ‚Üî s ‚óã s ‚äÜ s :=
  ‚ü®IsTransitiveRel.comp_subset_self, fun h _ _ _ hx hy ‚Ü¶ h ‚ü®_, hx, hy‚ü©‚ü©

lemma isTransitiveRel_empty : IsTransitiveRel (X := X) ‚àÖ := by
  simp [IsTransitiveRel]

lemma isTransitiveRel_univ : IsTransitiveRel (X := X) Set.univ := by
  simp [IsTransitiveRel]

lemma isTransitiveRel_singleton (x y : X) : IsTransitiveRel {(x, y)} := by
  simp +contextual [IsTransitiveRel]

lemma IsTransitiveRel.symmetrizeRel {s : Set (X √ó X)}
    (h : IsTransitiveRel s) :
    IsTransitiveRel (symmetrizeRel s) :=
  fun _ _ _ hxy hyz ‚Ü¶ ‚ü®h hxy.1 hyz.1, h hyz.2 hxy.2‚ü©

lemma IsTransitiveRel.comp_eq_of_idRel_subset {s : Set (X √ó X)}
    (h : IsTransitiveRel s) (h' : idRel ‚äÜ s) :
    s ‚óã s = s :=
  le_antisymm h.comp_subset_self (subset_comp_self h')

open UniformSpace in
lemma IsTransitiveRel.ball_subset_of_mem {V : Set (X √ó X)} (h : IsTransitiveRel V)
    {x y : X} (hy : y ‚àà ball x V) :
    ball y V ‚äÜ ball x V :=
  ball_subset_of_comp_subset hy (h.comp_subset_self)

lemma UniformSpace.ball_eq_of_mem_of_isSymmetricRel_of_isTransitiveRel {V : Set (X √ó X)}
    (h_symm : IsSymmetricRel V) (h_trans : IsTransitiveRel V) {x y : X}
    (hy : y ‚àà ball x V) :
    ball x V = ball y V := by
  refine le_antisymm (h_trans.ball_subset_of_mem ?_) (h_trans.ball_subset_of_mem hy)
  rwa [‚Üê mem_ball_symmetry h_symm]

variable [UniformSpace X]

variable (X) in
/-- A uniform space is ultrametric if the uniformity `ùì§ X` has a basis of equivalence relations. -/
class IsUltraUniformity : Prop where
  hasBasis : (ùì§ X).HasBasis
    (fun s : Set (X √ó X) => s ‚àà ùì§ X ‚àß IsSymmetricRel s ‚àß IsTransitiveRel s) id

lemma IsUltraUniformity.mk_of_hasBasis {Œπ : Type*} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set (X √ó X)}
    (h_basis : (ùì§ X).HasBasis p s) (h_symm : ‚àÄ i, p i ‚Üí IsSymmetricRel (s i))
    (h_trans : ‚àÄ i, p i ‚Üí IsTransitiveRel (s i)) :
    IsUltraUniformity X where
  hasBasis := h_basis.to_hasBasis'
    (fun i hi ‚Ü¶ ‚ü®s i, ‚ü®h_basis.mem_of_mem hi, h_symm i hi, h_trans i hi‚ü©, subset_rfl‚ü©)
    (fun _ hs ‚Ü¶ hs.1)

namespace UniformSpace

lemma _root_.IsTransitiveRel.isOpen_ball_of_mem_uniformity (x : X) {V : Set (X √ó X)}
    (h : IsTransitiveRel V) (h' : V ‚àà ùì§ X) :
    IsOpen (ball x V) := by
  rw [isOpen_iff_ball_subset]
  intro y hy
  exact ‚ü®V, h', h.ball_subset_of_mem hy‚ü©

lemma isClosed_ball_of_isSymmetricRel_of_isTransitiveRel_of_mem_uniformity
    (x : X) {V : Set (X √ó X)} (h_symm : IsSymmetricRel V)
    (h_trans : IsTransitiveRel V) (h' : V ‚àà ùì§ X) :
    IsClosed (ball x V) := by
  rw [‚Üê isOpen_compl_iff, isOpen_iff_ball_subset]
  exact fun y hy ‚Ü¶ ‚ü®V, h', fun z hyz hxz ‚Ü¶ hy <| h_trans hxz <| h_symm.mk_mem_comm.mp hyz‚ü©

lemma isClopen_ball_of_isSymmetricRel_of_isTransitiveRel_of_mem_uniformity
    (x : X) {V : Set (X √ó X)} (h_symm : IsSymmetricRel V)
    (h_trans : IsTransitiveRel V) (h' : V ‚àà ùì§ X) :
    IsClopen (ball x V) :=
  ‚ü®isClosed_ball_of_isSymmetricRel_of_isTransitiveRel_of_mem_uniformity _ ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫,
   h_trans.isOpen_ball_of_mem_uniformity _ ‚Äπ_‚Ä∫‚ü©

variable [IsUltraUniformity X]

lemma nhds_basis_clopens (x : X) :
    (ùìù x).HasBasis (fun s : Set X => x ‚àà s ‚àß IsClopen s) id := by
  refine (nhds_basis_uniformity' (IsUltraUniformity.hasBasis)).to_hasBasis' ?_ ?_
  ¬∑ intro V ‚ü®hV, h_symm, h_trans‚ü©
    refine ‚ü®ball x V, ‚ü®?_,
      isClopen_ball_of_isSymmetricRel_of_isTransitiveRel_of_mem_uniformity _ h_symm h_trans hV‚ü©,
      le_rfl‚ü©
    exact mem_ball_self _ hV
  ¬∑ rintro u ‚ü®hx, hu‚ü©
    simp [hu.right.mem_nhds_iff, hx]

/-- A uniform space with a nonarchimedean uniformity is zero-dimensional. -/
lemma _root_.TopologicalSpace.isTopologicalBasis_clopens :
    TopologicalSpace.IsTopologicalBasis {s : Set X | IsClopen s} :=
  .of_hasBasis_nhds fun x ‚Ü¶ by simpa [and_comm] using nhds_basis_clopens x

end UniformSpace
