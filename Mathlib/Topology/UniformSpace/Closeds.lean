/-
Copyright (c) 2025 Attila G√°sp√°r. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Attila G√°sp√°r
-/
import Mathlib.Topology.Sets.Compacts
import Mathlib.Topology.UniformSpace.UniformEmbedding

/-!
# Hausdorff uniformity

This file defines the Hausdorff uniformity on the types of closed subsets, compact subsets and
and nonempty compact subsets of a uniform space. This is the generalization of the uniformity
induced by the Hausdorff metric to hyperspaces of uniform spaces.
-/

open UniformSpace
open scoped Uniformity

section

variable {Œ± : Type*} {S : Type*} [SetLike S Œ±]

/-- The set of pairs of sets contained in each other's thickening with respect to an entourage.
These are the generators of the Hausdorff uniformity. -/
def hausdorffEntourage (U : Set (Œ± √ó Œ±)) : Set (S √ó S) :=
  {x | ‚Üëx.1 ‚äÜ thickening U x.2 ‚àß ‚Üëx.2 ‚äÜ thickening U x.1}

theorem isSymmetricRel_hausdorffEntourage (U : Set (Œ± √ó Œ±)) :
    IsSymmetricRel (hausdorffEntourage (S := S) U) :=
  Set.ext fun _ => And.comm

theorem refl_mem_hausdorffEntourage {U : Set (Œ± √ó Œ±)} (hU : ‚àÄ x, (x, x) ‚àà U) (s : S) :
    (s, s) ‚àà hausdorffEntourage U :=
  ‚ü®self_subset_thickening_of_refl _ fun x _ => hU x,
    self_subset_thickening_of_refl _ fun x _ => hU x‚ü©

@[gcongr]
theorem hausdorffEntourage_mono {U V : Set (Œ± √ó Œ±)} (h : U ‚äÜ V) :
    hausdorffEntourage (S := S) U ‚äÜ hausdorffEntourage V := by
  unfold hausdorffEntourage
  gcongr

theorem monotone_hausdorffEntourage : Monotone (hausdorffEntourage (S := S)) :=
  fun _ _ => hausdorffEntourage_mono

namespace UniformSpace

variable [UniformSpace Œ±]

/-- The Hausdorff uniformity on a family of subsets of a uniform space.
See note [reducible non-instances]. -/
protected abbrev hausdorff : UniformSpace S := .ofCore
  { uniformity := (ùì§ Œ±).lift' hausdorffEntourage
    refl := by
      simp_rw [Filter.principal_le_lift', idRel_subset]
      exact fun U hU => refl_mem_hausdorffEntourage fun _ => refl_mem_uniformity hU
    symm := by
      rw [Filter.tendsto_lift']
      intro U hU
      filter_upwards [Filter.mem_lift' hU] with _ _
      rwa [‚Üê Set.mem_preimage, isSymmetricRel_hausdorffEntourage]
    comp := by
      rw [Filter.le_lift']
      intro U hU
      obtain ‚ü®V, hV‚ÇÅ, hV‚ÇÇ‚ü© := comp_mem_uniformity_sets hU
      refine Filter.mem_of_superset (Filter.mem_lift' (Filter.mem_lift' hV‚ÇÅ)) ?_
      intro ‚ü®s, u‚ü© ‚ü®t, ‚ü®hst, hts‚ü©, ‚ü®htu, hut‚ü©‚ü©
      dsimp only at *
      grw [hts, thickening_thickening_subset, hV‚ÇÇ] at hut
      grw [htu, thickening_thickening_subset, hV‚ÇÇ] at hst
      exact ‚ü®hst, hut‚ü© }

theorem hausdorff.isClosed_disjoint_of_isOpen
    [t : UniformSpace S] (ht : t = .hausdorff) {U : Set Œ±} (hU : IsOpen U) :
    IsClosed {s : S | Disjoint (s : Set Œ±) U} := by
  simp_rw [‚Üê isOpen_compl_iff, isOpen_iff_mem_nhds, Set.compl_setOf, Set.not_disjoint_iff]
  intro s ‚ü®x, hx‚ÇÅ, hx‚ÇÇ‚ü©
  rw [‚Üê hU.mem_nhds_iff, mem_nhds_iff_symm] at hx‚ÇÇ
  obtain ‚ü®V, hV‚ÇÅ, hV‚ÇÇ, hV‚ÇÉ‚ü© := hx‚ÇÇ
  rw [mem_nhds_iff]
  subst t
  refine ‚ü®_, Filter.mem_lift' hV‚ÇÅ, ?_‚ü©
  rintro s' ‚ü®hs', -‚ü©
  obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü© := Set.mem_iUnion‚ÇÇ.mp <| hs' hx‚ÇÅ
  rw [mem_ball_symmetry hV‚ÇÇ] at hy‚ÇÇ
  exact ‚ü®y, hy‚ÇÅ, hV‚ÇÉ hy‚ÇÇ‚ü©

theorem hausdorff.isClosed_subsets_of_isClosed
    [t : UniformSpace S] (ht : t = .hausdorff) {F : Set Œ±} (hF : IsClosed F) :
    IsClosed {s : S | (s : Set Œ±) ‚äÜ F} := by
  simp_rw [‚Üê Set.disjoint_compl_right_iff_subset]
  exact isClosed_disjoint_of_isOpen ht hF.isOpen_compl

end UniformSpace

end

variable {Œ± : Type*} [UniformSpace Œ±]

namespace TopologicalSpace.Closeds

instance uniformSpace : UniformSpace (Closeds Œ±) :=
  .hausdorff

theorem uniformity_def : ùì§ (Closeds Œ±) = (ùì§ Œ±).lift' hausdorffEntourage :=
  rfl

theorem _root_.Filter.HasBasis.uniformity_closeds
    {Œπ : Sort*} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set (Œ± √ó Œ±)}
    (h : (ùì§ Œ±).HasBasis p s) : (ùì§ (Closeds Œ±)).HasBasis p (hausdorffEntourage ‚àò s) :=
  h.lift' monotone_hausdorffEntourage

theorem isClosed_disjoint_of_isOpen {s : Set Œ±} (hs : IsOpen s) :
    IsClosed {t : Closeds Œ± | Disjoint (t : Set Œ±) s} :=
  hausdorff.isClosed_disjoint_of_isOpen rfl hs

theorem isClosed_subsets_of_isClosed {s : Set Œ±} (hs : IsClosed s) :
    IsClosed {t : Closeds Œ± | (t : Set Œ±) ‚äÜ s} :=
  hausdorff.isClosed_subsets_of_isClosed rfl hs

end TopologicalSpace.Closeds

namespace TopologicalSpace.Compacts

instance uniformSpace : UniformSpace (Compacts Œ±) :=
  .hausdorff

theorem uniformity_def : ùì§ (Compacts Œ±) = (ùì§ Œ±).lift' hausdorffEntourage :=
  rfl

theorem _root_.Filter.HasBasis.uniformity_compacts
    {Œπ : Sort*} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set (Œ± √ó Œ±)}
    (h : (ùì§ Œ±).HasBasis p s) : (ùì§ (Compacts Œ±)).HasBasis p (hausdorffEntourage ‚àò s) :=
  h.lift' monotone_hausdorffEntourage

theorem isClosed_disjoint_of_isOpen {s : Set Œ±} (hs : IsOpen s) :
    IsClosed {t : Compacts Œ± | Disjoint (t : Set Œ±) s} :=
  hausdorff.isClosed_disjoint_of_isOpen rfl hs

theorem isClosed_subsets_of_isClosed {s : Set Œ±} (hs : IsClosed s) :
    IsClosed {t : Compacts Œ± | (t : Set Œ±) ‚äÜ s} :=
  hausdorff.isClosed_subsets_of_isClosed rfl hs

end TopologicalSpace.Compacts

namespace TopologicalSpace.NonemptyCompacts

instance uniformSpace : UniformSpace (NonemptyCompacts Œ±) :=
  .hausdorff

theorem uniformity_def : ùì§ (NonemptyCompacts Œ±) = (ùì§ Œ±).lift' hausdorffEntourage :=
  rfl

theorem _root_.Filter.HasBasis.uniformity_nonemptyCompacts
    {Œπ : Sort*} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set (Œ± √ó Œ±)}
    (h : (ùì§ Œ±).HasBasis p s) : (ùì§ (NonemptyCompacts Œ±)).HasBasis p (hausdorffEntourage ‚àò s) :=
  h.lift' monotone_hausdorffEntourage

theorem isUniformEmbedding_toCloseds [T2Space Œ±] :
    IsUniformEmbedding (toCloseds (Œ± := Œ±)) where
  injective := toCloseds_injective
  comap_uniformity := Filter.comap_lift'_eq

theorem continuous_toCloseds [T2Space Œ±] :
    Continuous (toCloseds (Œ± := Œ±)) :=
  isUniformEmbedding_toCloseds.uniformContinuous.continuous

theorem isUniformEmbedding_toCompacts :
    IsUniformEmbedding (toCompacts (Œ± := Œ±)) where
  injective := toCompacts_injective
  comap_uniformity := Filter.comap_lift'_eq

theorem continuous_toCompacts :
    Continuous (toCompacts (Œ± := Œ±)) :=
  isUniformEmbedding_toCompacts.uniformContinuous.continuous

theorem isClosed_disjoint_of_isOpen {s : Set Œ±} (hs : IsOpen s) :
    IsClosed {t : NonemptyCompacts Œ± | Disjoint (t : Set Œ±) s} :=
  hausdorff.isClosed_disjoint_of_isOpen rfl hs

theorem isClosed_subsets_of_isClosed {s : Set Œ±} (hs : IsClosed s) :
    IsClosed {t : NonemptyCompacts Œ± | (t : Set Œ±) ‚äÜ s} :=
  hausdorff.isClosed_subsets_of_isClosed rfl hs

end TopologicalSpace.NonemptyCompacts
