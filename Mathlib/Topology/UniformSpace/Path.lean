/-
Copyright (c) 2025 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Topology.Path
import Mathlib.Topology.UniformSpace.CompactConvergence
import Mathlib.Topology.UniformSpace.HeineCantor
import Mathlib.Topology.MetricSpace.Lipschitz
import Mathlib.Topology.ContinuousMap.Interval

/-!
# Paths in uniform spaces

In this file we define a `UniformSpace` structure on `Path`s
between two points in a uniform space
and prove that various functions associated with `Path`s are uniformly continuous.

The uniform space structure is induced from the space of continuous maps `C(I, X)`,
and corresponds to uniform convergence of paths on `I`, see `Path.hasBasis_uniformity`.
-/

open scoped unitInterval Topology Uniformity

variable {X : Type*} [UniformSpace X] {x y z : X}

namespace Path

instance instUniformSpace : UniformSpace (Path x y) :=
  .comap ((‚Üë) : _ ‚Üí C(I, X)) ContinuousMap.compactConvergenceUniformSpace

theorem isUniformEmbedding_coe : IsUniformEmbedding ((‚Üë) : Path x y ‚Üí C(I, X)) where
  comap_uniformity := rfl
  injective := ContinuousMap.coe_injective'

theorem uniformContinuous (Œ≥ : Path x y) : UniformContinuous Œ≥ :=
  CompactSpace.uniformContinuous_of_continuous <| map_continuous _

/-- Given a path `Œ≥`, it extension to the real line `Œ≥.extend : C(‚Ñù, X)`
is a uniformly continuous function. -/
theorem uniformContinuous_extend (Œ≥ : Path x y) : UniformContinuous Œ≥.extend :=
  Œ≥.uniformContinuous.comp <| LipschitzWith.projIcc _ |>.uniformContinuous

/-- The function sending a path `Œ≥` to its extension `Œ≥.extend : ‚Ñù ‚Üí X`
is uniformly continuous in `Œ≥`. -/
theorem uniformContinuous_extend_left : UniformContinuous (Path.extend : Path x y ‚Üí C(‚Ñù, X)) :=
  ContinuousMap.projIccCM.uniformContinuous_comp_left.comp isUniformEmbedding_coe.uniformContinuous

/-- If `{U i | p i}` form a basis of entourages of `X`,
then the entourages `{V i | p i}`, `V i = {(Œ≥‚ÇÅ, Œ≥‚ÇÇ) | ‚àÄ t, (Œ≥‚ÇÅ t, Œ≥‚ÇÇ t) ‚àà U i}`,
form a basis of entourages of paths between `x` and `y`. -/
theorem _root_.Filter.HasBasis.uniformityPath {Œπ : Sort*} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set (X √ó X)}
    (hU : (ùì§ X).HasBasis p U) :
    (ùì§ (Path x y)).HasBasis p fun i ‚Ü¶ {Œ≥ | ‚àÄ t, (Œ≥.1 t, Œ≥.2 t) ‚àà U i} :=
  hU.compactConvergenceUniformity_of_compact.comap _

theorem hasBasis_uniformity :
    (ùì§ (Path x y)).HasBasis (¬∑ ‚àà ùì§ X) ({Œ≥ | ‚àÄ t, (Œ≥.1 t, Œ≥.2 t) ‚àà ¬∑}) :=
  (ùì§ X).basis_sets.uniformityPath

theorem uniformContinuous_symm : UniformContinuous (Path.symm : Path x y ‚Üí Path y x) :=
  hasBasis_uniformity.uniformContinuous_iff hasBasis_uniformity |>.mpr fun U hU ‚Ü¶
    ‚ü®U, hU, fun _ _ h x ‚Ü¶ h (œÉ x)‚ü©

/-- The function `Path.trans` that concatenates two paths `Œ≥‚ÇÅ : Path x y` and `Œ≥‚ÇÇ : Path y z`
is uniformly continuous in `(Œ≥‚ÇÅ, Œ≥‚ÇÇ)`. -/
theorem uniformContinuous_trans :
    UniformContinuous (Path.trans : Path x y ‚Üí Path y z ‚Üí Path x z).uncurry :=
  hasBasis_uniformity.uniformity_prod hasBasis_uniformity
    |>.uniformContinuous_iff hasBasis_uniformity |>.mpr fun U hU ‚Ü¶
      ‚ü®(U, U), ‚ü®hU, hU‚ü©, fun ‚ü®_, _‚ü© ‚ü®_, _‚ü© ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© t ‚Ü¶ by
        by_cases ht : (t : ‚Ñù) ‚â§ 2‚Åª¬π <;> simp [Path.trans_apply, ht, h‚ÇÅ _, h‚ÇÇ _]‚ü©

/-- The space of paths between two points in a complete uniform space
is a complete uniform space. -/
instance instCompleteSpace [CompleteSpace X] : CompleteSpace (Path x y) :=
  isUniformEmbedding_coe.completeSpace <| by simpa [Set.EqOn, range_coe]
    using ContinuousMap.isComplete_setOf_eqOn (Function.update (fun _ : I ‚Ü¶ y) 0 x) {0, 1}

end Path
