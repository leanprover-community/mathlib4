/-
Copyright (c) 2020 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.Topology.UniformSpace.LocallyUniformConvergence

/-!
# Uniform approximation

In this file, we give lemmas ensuring that a function is continuous if it can be approximated
uniformly by continuous functions. We give various versions, within a set or the whole space, at
a single point or at all points, with locally uniform approximation or uniform approximation. All
the statements are derived from a statement about locally uniform approximation within a set at
a point, called `continuousWithinAt_of_locally_uniform_approx_of_continuousWithinAt`.

## Implementation notes

Most results hold under weaker assumptions of locally uniform approximation. In a first section,
we prove the results under these weaker assumptions. Then, we derive the results on uniform
convergence from them.

## Tags

Uniform limit, uniform convergence, tends uniformly to
 -/


noncomputable section

open Topology Uniformity Filter Set Uniform

variable {Œ± Œ≤ Œπ : Type*} [TopologicalSpace Œ±] [UniformSpace Œ≤]
variable {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≤} {s s' : Set Œ±} {x : Œ±} {p : Filter Œπ} {g : Œπ ‚Üí Œ±}

/-- A function which can be locally uniformly approximated by functions which are continuous
within a set at a point is continuous within this set at this point. -/
theorem continuousWithinAt_of_locally_uniform_approx_of_continuousWithinAt (hx : x ‚àà s)
    (L : ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ t ‚àà ùìù[s] x, ‚àÉ F : Œ± ‚Üí Œ≤, ContinuousWithinAt F s x ‚àß ‚àÄ y ‚àà t, (f y, F y) ‚àà u) :
    ContinuousWithinAt f s x := by
  refine Uniform.continuousWithinAt_iff'_left.2 fun u‚ÇÄ hu‚ÇÄ => ?_
  obtain ‚ü®u‚ÇÅ, h‚ÇÅ, u‚ÇÅ‚ÇÄ‚ü© : ‚àÉ u ‚àà ùì§ Œ≤, u ‚óã u ‚äÜ u‚ÇÄ := comp_mem_uniformity_sets hu‚ÇÄ
  obtain ‚ü®u‚ÇÇ, h‚ÇÇ, hsymm, u‚ÇÇ‚ÇÅ‚ü© : ‚àÉ u ‚àà ùì§ Œ≤, (‚àÄ {a b}, (a, b) ‚àà u ‚Üí (b, a) ‚àà u) ‚àß u ‚óã u ‚äÜ u‚ÇÅ :=
    comp_symm_of_uniformity h‚ÇÅ
  rcases L u‚ÇÇ h‚ÇÇ with ‚ü®t, tx, F, hFc, hF‚ü©
  have A : ‚àÄ·∂† y in ùìù[s] x, (f y, F y) ‚àà u‚ÇÇ := Eventually.mono tx hF
  have B : ‚àÄ·∂† y in ùìù[s] x, (F y, F x) ‚àà u‚ÇÇ := Uniform.continuousWithinAt_iff'_left.1 hFc h‚ÇÇ
  have C : ‚àÄ·∂† y in ùìù[s] x, (f y, F x) ‚àà u‚ÇÅ :=
    (A.and B).mono fun y hy => u‚ÇÇ‚ÇÅ (prodMk_mem_compRel hy.1 hy.2)
  have : (F x, f x) ‚àà u‚ÇÅ :=
    u‚ÇÇ‚ÇÅ (prodMk_mem_compRel (refl_mem_uniformity h‚ÇÇ) (hsymm (A.self_of_nhdsWithin hx)))
  exact C.mono fun y hy => u‚ÇÅ‚ÇÄ (prodMk_mem_compRel hy this)

/-- A function which can be locally uniformly approximated by functions which are continuous at
a point is continuous at this point. -/
theorem continuousAt_of_locally_uniform_approx_of_continuousAt
    (L : ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ t ‚àà ùìù x, ‚àÉ F, ContinuousAt F x ‚àß ‚àÄ y ‚àà t, (f y, F y) ‚àà u) :
    ContinuousAt f x := by
  rw [‚Üê continuousWithinAt_univ]
  apply continuousWithinAt_of_locally_uniform_approx_of_continuousWithinAt (mem_univ _) _
  simpa only [exists_prop, nhdsWithin_univ, continuousWithinAt_univ] using L

/-- A function which can be locally uniformly approximated by functions which are continuous
on a set is continuous on this set. -/
theorem continuousOn_of_locally_uniform_approx_of_continuousWithinAt
    (L : ‚àÄ x ‚àà s, ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ t ‚àà ùìù[s] x, ‚àÉ F,
      ContinuousWithinAt F s x ‚àß ‚àÄ y ‚àà t, (f y, F y) ‚àà u) :
    ContinuousOn f s := fun x hx =>
  continuousWithinAt_of_locally_uniform_approx_of_continuousWithinAt hx (L x hx)

/-- A function which can be uniformly approximated by functions which are continuous on a set
is continuous on this set. -/
theorem continuousOn_of_uniform_approx_of_continuousOn
    (L : ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ F, ContinuousOn F s ‚àß ‚àÄ y ‚àà s, (f y, F y) ‚àà u) : ContinuousOn f s :=
  continuousOn_of_locally_uniform_approx_of_continuousWithinAt fun _x hx u hu =>
    ‚ü®s, self_mem_nhdsWithin, (L u hu).imp fun _F hF => ‚ü®hF.1.continuousWithinAt hx, hF.2‚ü©‚ü©

/-- A function which can be locally uniformly approximated by continuous functions is continuous. -/
theorem continuous_of_locally_uniform_approx_of_continuousAt
    (L : ‚àÄ x : Œ±, ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ t ‚àà ùìù x, ‚àÉ F, ContinuousAt F x ‚àß ‚àÄ y ‚àà t, (f y, F y) ‚àà u) :
    Continuous f :=
  continuous_iff_continuousAt.2 fun x =>
    continuousAt_of_locally_uniform_approx_of_continuousAt (L x)

/-- A function which can be uniformly approximated by continuous functions is continuous. -/
theorem continuous_of_uniform_approx_of_continuous
    (L : ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ F, Continuous F ‚àß ‚àÄ y, (f y, F y) ‚àà u) : Continuous f :=
  continuous_iff_continuousOn_univ.mpr <|
    continuousOn_of_uniform_approx_of_continuousOn <| by
      simpa [continuous_iff_continuousOn_univ] using L

/-!
### Uniform limits

From the previous statements on uniform approximation, we deduce continuity results for uniform
limits.
-/


/-- A locally uniform limit on a set of functions which are continuous on this set is itself
continuous on this set. -/
protected theorem TendstoLocallyUniformlyOn.continuousOn (h : TendstoLocallyUniformlyOn F f p s)
    (hc : ‚àÄ·∂† n in p, ContinuousOn (F n) s) [NeBot p] : ContinuousOn f s := by
  refine continuousOn_of_locally_uniform_approx_of_continuousWithinAt fun x hx u hu => ?_
  rcases h u hu x hx with ‚ü®t, ht, H‚ü©
  rcases (hc.and H).exists with ‚ü®n, hFc, hF‚ü©
  exact ‚ü®t, ht, ‚ü®F n, hFc.continuousWithinAt hx, hF‚ü©‚ü©

/-- A uniform limit on a set of functions which are continuous on this set is itself continuous
on this set. -/
protected theorem TendstoUniformlyOn.continuousOn (h : TendstoUniformlyOn F f p s)
    (hc : ‚àÄ·∂† n in p, ContinuousOn (F n) s) [NeBot p] : ContinuousOn f s :=
  h.tendstoLocallyUniformlyOn.continuousOn hc

/-- A locally uniform limit of continuous functions is continuous. -/
protected theorem TendstoLocallyUniformly.continuous (h : TendstoLocallyUniformly F f p)
    (hc : ‚àÄ·∂† n in p, Continuous (F n)) [NeBot p] : Continuous f :=
  continuous_iff_continuousOn_univ.mpr <|
    h.tendstoLocallyUniformlyOn.continuousOn <| hc.mono fun _n hn => hn.continuousOn

/-- A uniform limit of continuous functions is continuous. -/
protected theorem TendstoUniformly.continuous (h : TendstoUniformly F f p)
    (hc : ‚àÄ·∂† n in p, Continuous (F n)) [NeBot p] : Continuous f :=
  h.tendstoLocallyUniformly.continuous hc

/-!
### Composing limits under uniform convergence

In general, if `F‚Çô` converges pointwise to a function `f`, and `g‚Çô` tends to `x`, it is not true
that `F‚Çô g‚Çô` tends to `f x`. It is true however if the convergence of `F‚Çô` to `f` is uniform. In
this paragraph, we prove variations around this statement.
-/


/-- If `F‚Çô` converges locally uniformly on a neighborhood of `x` within a set `s` to a function `f`
which is continuous at `x` within `s`, and `g‚Çô` tends to `x` within `s`, then `F‚Çô (g‚Çô)` tends
to `f x`. -/
theorem tendsto_comp_of_locally_uniform_limit_within (h : ContinuousWithinAt f s x)
    (hg : Tendsto g p (ùìù[s] x))
    (hunif : ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ t ‚àà ùìù[s] x, ‚àÄ·∂† n in p, ‚àÄ y ‚àà t, (f y, F n y) ‚àà u) :
    Tendsto (fun n => F n (g n)) p (ùìù (f x)) := by
  refine Uniform.tendsto_nhds_right.2 fun u‚ÇÄ hu‚ÇÄ => ?_
  obtain ‚ü®u‚ÇÅ, h‚ÇÅ, u‚ÇÅ‚ÇÄ‚ü© : ‚àÉ u ‚àà ùì§ Œ≤, u ‚óã u ‚äÜ u‚ÇÄ := comp_mem_uniformity_sets hu‚ÇÄ
  rcases hunif u‚ÇÅ h‚ÇÅ with ‚ü®s, sx, hs‚ü©
  have A : ‚àÄ·∂† n in p, g n ‚àà s := hg sx
  have B : ‚àÄ·∂† n in p, (f x, f (g n)) ‚àà u‚ÇÅ := hg (Uniform.continuousWithinAt_iff'_right.1 h h‚ÇÅ)
  exact B.mp <| A.mp <| hs.mono fun y H1 H2 H3 => u‚ÇÅ‚ÇÄ (prodMk_mem_compRel H3 (H1 _ H2))

/-- If `F‚Çô` converges locally uniformly on a neighborhood of `x` to a function `f` which is
continuous at `x`, and `g‚Çô` tends to `x`, then `F‚Çô (g‚Çô)` tends to `f x`. -/
theorem tendsto_comp_of_locally_uniform_limit (h : ContinuousAt f x) (hg : Tendsto g p (ùìù x))
    (hunif : ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ t ‚àà ùìù x, ‚àÄ·∂† n in p, ‚àÄ y ‚àà t, (f y, F n y) ‚àà u) :
    Tendsto (fun n => F n (g n)) p (ùìù (f x)) := by
  rw [‚Üê continuousWithinAt_univ] at h
  rw [‚Üê nhdsWithin_univ] at hunif hg
  exact tendsto_comp_of_locally_uniform_limit_within h hg hunif

/-- If `F‚Çô` tends locally uniformly to `f` on a set `s`, and `g‚Çô` tends to `x` within `s`, then
`F‚Çô g‚Çô` tends to `f x` if `f` is continuous at `x` within `s` and `x ‚àà s`. -/
theorem TendstoLocallyUniformlyOn.tendsto_comp (h : TendstoLocallyUniformlyOn F f p s)
    (hf : ContinuousWithinAt f s x) (hx : x ‚àà s) (hg : Tendsto g p (ùìù[s] x)) :
    Tendsto (fun n => F n (g n)) p (ùìù (f x)) :=
  tendsto_comp_of_locally_uniform_limit_within hf hg fun u hu => h u hu x hx

/-- If `F‚Çô` tends uniformly to `f` on a set `s`, and `g‚Çô` tends to `x` within `s`, then `F‚Çô g‚Çô`
tends to `f x` if `f` is continuous at `x` within `s`. -/
theorem TendstoUniformlyOn.tendsto_comp (h : TendstoUniformlyOn F f p s)
    (hf : ContinuousWithinAt f s x) (hg : Tendsto g p (ùìù[s] x)) :
    Tendsto (fun n => F n (g n)) p (ùìù (f x)) :=
  tendsto_comp_of_locally_uniform_limit_within hf hg fun u hu => ‚ü®s, self_mem_nhdsWithin, h u hu‚ü©

/-- If `F‚Çô` tends locally uniformly to `f`, and `g‚Çô` tends to `x`, then `F‚Çô g‚Çô` tends to `f x`. -/
theorem TendstoLocallyUniformly.tendsto_comp (h : TendstoLocallyUniformly F f p)
    (hf : ContinuousAt f x) (hg : Tendsto g p (ùìù x)) : Tendsto (fun n => F n (g n)) p (ùìù (f x)) :=
  tendsto_comp_of_locally_uniform_limit hf hg fun u hu => h u hu x

/-- If `F‚Çô` tends uniformly to `f`, and `g‚Çô` tends to `x`, then `F‚Çô g‚Çô` tends to `f x`. -/
theorem TendstoUniformly.tendsto_comp (h : TendstoUniformly F f p) (hf : ContinuousAt f x)
    (hg : Tendsto g p (ùìù x)) : Tendsto (fun n => F n (g n)) p (ùìù (f x)) :=
  h.tendstoLocallyUniformly.tendsto_comp hf hg
