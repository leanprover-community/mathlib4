/-
Copyright (c) 2020 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Yury Kudryashov
-/
import Mathlib.Topology.Algebra.Support
import Mathlib.Topology.UniformSpace.Compact
import Mathlib.Topology.UniformSpace.Equicontinuity

/-!
# Compact separated uniform spaces

## Main statement

* **Heine-Cantor** theorem: continuous functions on compact uniform spaces with values in uniform
  spaces are automatically uniformly continuous. There are several variations, the main one is
  `CompactSpace.uniformContinuous_of_continuous`.

## Tags

uniform space, uniform continuity, compact space
-/

open Uniformity Topology Filter UniformSpace Set

variable {Œ± Œ≤ Œ≥ : Type*} [UniformSpace Œ±] [UniformSpace Œ≤]

/-!
### Heine-Cantor theorem
-/

/-- Heine-Cantor: a continuous function on a compact uniform space is uniformly
continuous. -/
theorem CompactSpace.uniformContinuous_of_continuous [CompactSpace Œ±] {f : Œ± ‚Üí Œ≤}
    (h : Continuous f) : UniformContinuous f :=
calc map (Prod.map f f) (ùì§ Œ±)
   = map (Prod.map f f) (ùìùÀ¢ (diagonal Œ±)) := by rw [nhdsSet_diagonal_eq_uniformity]
 _ ‚â§ ùìùÀ¢ (diagonal Œ≤)                      := (h.prodMap h).tendsto_nhdsSet mapsTo_prod_map_diagonal
 _ ‚â§ ùì§ Œ≤                                  := nhdsSet_diagonal_le_uniformity

/-- Heine-Cantor: a continuous function on a compact set of a uniform space is uniformly
continuous. -/
theorem IsCompact.uniformContinuousOn_of_continuous {s : Set Œ±} {f : Œ± ‚Üí Œ≤} (hs : IsCompact s)
    (hf : ContinuousOn f s) : UniformContinuousOn f s := by
  rw [uniformContinuousOn_iff_restrict]
  rw [isCompact_iff_compactSpace] at hs
  rw [continuousOn_iff_continuous_restrict] at hf
  exact CompactSpace.uniformContinuous_of_continuous hf

/-- If `s` is compact and `f` is continuous at all points of `s`, then `f` is
"uniformly continuous at the set `s`", i.e. `f x` is close to `f y` whenever `x ‚àà s` and `y` is
close to `x` (even if `y` is not itself in `s`, so this is a stronger assertion than
`UniformContinuousOn s`). -/
theorem IsCompact.uniformContinuousAt_of_continuousAt {r : Set (Œ≤ √ó Œ≤)} {s : Set Œ±}
    (hs : IsCompact s) (f : Œ± ‚Üí Œ≤) (hf : ‚àÄ a ‚àà s, ContinuousAt f a) (hr : r ‚àà ùì§ Œ≤) :
    { x : Œ± √ó Œ± | x.1 ‚àà s ‚Üí (f x.1, f x.2) ‚àà r } ‚àà ùì§ Œ± := by
  obtain ‚ü®t, ht, htsymm, htr‚ü© := comp_symm_mem_uniformity_sets hr
  choose U hU T hT hb using fun a ha =>
    exists_mem_nhds_ball_subset_of_mem_nhds ((hf a ha).preimage_mem_nhds <| mem_nhds_left _ ht)
  obtain ‚ü®fs, hsU‚ü© := hs.elim_nhds_subcover' U hU
  apply mem_of_superset ((biInter_finset_mem fs).2 fun a _ => hT a a.2)
  rintro ‚ü®a‚ÇÅ, a‚ÇÇ‚ü© h h‚ÇÅ
  obtain ‚ü®a, ha, haU‚ü© := Set.mem_iUnion‚ÇÇ.1 (hsU h‚ÇÅ)
  apply htr
  refine ‚ü®f a, htsymm.mk_mem_comm.1 (hb _ _ _ haU ?_), hb _ _ _ haU ?_‚ü©
  exacts [mem_ball_self _ (hT a a.2), mem_iInter‚ÇÇ.1 h a ha]

theorem Continuous.uniformContinuous_of_tendsto_cocompact {f : Œ± ‚Üí Œ≤} {x : Œ≤}
    (h_cont : Continuous f) (hx : Tendsto f (cocompact Œ±) (ùìù x)) : UniformContinuous f :=
  uniformContinuous_def.2 fun r hr => by
    obtain ‚ü®t, ht, htsymm, htr‚ü© := comp_symm_mem_uniformity_sets hr
    obtain ‚ü®s, hs, hst‚ü© := mem_cocompact.1 (hx <| mem_nhds_left _ ht)
    apply
      mem_of_superset
        (symmetrize_mem_uniformity <|
          (hs.uniformContinuousAt_of_continuousAt f fun _ _ => h_cont.continuousAt) <|
            symmetrize_mem_uniformity hr)
    rintro ‚ü®b‚ÇÅ, b‚ÇÇ‚ü© h
    by_cases h‚ÇÅ : b‚ÇÅ ‚àà s; ¬∑ exact (h.1 h‚ÇÅ).1
    by_cases h‚ÇÇ : b‚ÇÇ ‚àà s; ¬∑ exact (h.2 h‚ÇÇ).2
    apply htr
    exact ‚ü®x, htsymm.mk_mem_comm.1 (hst h‚ÇÅ), hst h‚ÇÇ‚ü©

@[to_additive]
theorem HasCompactMulSupport.uniformContinuous_of_continuous {f : Œ± ‚Üí Œ≤} [One Œ≤]
    (h1 : HasCompactMulSupport f) (h2 : Continuous f) : UniformContinuous f :=
  h2.uniformContinuous_of_tendsto_cocompact h1.is_one_at_infty

/-- A family of functions `Œ± ‚Üí Œ≤ ‚Üí Œ≥` tends uniformly to its value at `x` if `Œ±` is locally compact,
`Œ≤` is compact and `f` is continuous on `U √ó (univ : Set Œ≤)` for some neighborhood `U` of `x`. -/
theorem ContinuousOn.tendstoUniformly [LocallyCompactSpace Œ±] [CompactSpace Œ≤] [UniformSpace Œ≥]
    {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} {x : Œ±} {U : Set Œ±} (hxU : U ‚àà ùìù x) (h : ContinuousOn (‚Üøf) (U √óÀ¢ univ)) :
    TendstoUniformly f (f x) (ùìù x) := by
  rcases LocallyCompactSpace.local_compact_nhds _ _ hxU with ‚ü®K, hxK, hKU, hK‚ü©
  have : UniformContinuousOn (‚Üøf) (K √óÀ¢ univ) :=
    IsCompact.uniformContinuousOn_of_continuous (hK.prod isCompact_univ)
      (h.mono <| prod_mono hKU Subset.rfl)
  exact this.tendstoUniformly hxK

/-- A continuous family of functions `Œ± ‚Üí Œ≤ ‚Üí Œ≥` tends uniformly to its value at `x`
if `Œ±` is weakly locally compact and `Œ≤` is compact. -/
theorem Continuous.tendstoUniformly [WeaklyLocallyCompactSpace Œ±] [CompactSpace Œ≤] [UniformSpace Œ≥]
    (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥) (h : Continuous ‚Üøf) (x : Œ±) : TendstoUniformly f (f x) (ùìù x) :=
  let ‚ü®K, hK, hxK‚ü© := exists_compact_mem_nhds x
  have : UniformContinuousOn (‚Üøf) (K √óÀ¢ univ) :=
    IsCompact.uniformContinuousOn_of_continuous (hK.prod isCompact_univ) h.continuousOn
  this.tendstoUniformly hxK

/-- In a product space `Œ± √ó Œ≤`, assume that a function `f` is continuous on `s √ó k` where `k` is
compact. Then, along the fiber above any `q ‚àà s`, `f` is transversely uniformly continuous, i.e.,
if `p ‚àà s` is close enough to `q`, then `f p x` is uniformly close to `f q x` for all `x ‚àà k`. -/
lemma IsCompact.mem_uniformity_of_prod
    {Œ± Œ≤ E : Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [UniformSpace E]
    {f : Œ± ‚Üí Œ≤ ‚Üí E} {s : Set Œ±} {k : Set Œ≤} {q : Œ±} {u : Set (E √ó E)}
    (hk : IsCompact k) (hf : ContinuousOn f.uncurry (s √óÀ¢ k)) (hq : q ‚àà s) (hu : u ‚àà ùì§ E) :
    ‚àÉ v ‚àà ùìù[s] q, ‚àÄ p ‚àà v, ‚àÄ x ‚àà k, (f p x, f q x) ‚àà u := by
  apply hk.induction_on (p := fun t ‚Ü¶ ‚àÉ v ‚àà ùìù[s] q, ‚àÄ p ‚àà v, ‚àÄ x ‚àà t, (f p x, f q x) ‚àà u)
  ¬∑ exact ‚ü®univ, univ_mem, by simp‚ü©
  ¬∑ intro t' t ht't ‚ü®v, v_mem, hv‚ü©
    exact ‚ü®v, v_mem, fun p hp x hx ‚Ü¶ hv p hp x (ht't hx)‚ü©
  ¬∑ intro t t' ‚ü®v, v_mem, hv‚ü© ‚ü®v', v'_mem, hv'‚ü©
    refine ‚ü®v ‚à© v', inter_mem v_mem v'_mem, fun p hp x hx ‚Ü¶ ?_‚ü©
    rcases hx with h'x|h'x
    ¬∑ exact hv p hp.1 x h'x
    ¬∑ exact hv' p hp.2 x h'x
  ¬∑ rcases comp_symm_of_uniformity hu with ‚ü®u', u'_mem, u'_symm, hu'‚ü©
    intro x hx
    obtain ‚ü®v, hv, w, hw, hvw‚ü© :
      ‚àÉ v ‚àà ùìù[s] q, ‚àÉ w ‚àà ùìù[k] x, v √óÀ¢ w ‚äÜ f.uncurry ‚Åª¬π' {z | (f q x, z) ‚àà u'} :=
        mem_nhdsWithin_prod_iff.1 (hf (q, x) ‚ü®hq, hx‚ü© (mem_nhds_left (f q x) u'_mem))
    refine ‚ü®w, hw, v, hv, fun p hp y hy ‚Ü¶ ?_‚ü©
    have A : (f q x, f p y) ‚àà u' := hvw (‚ü®hp, hy‚ü© : (p, y) ‚àà v √óÀ¢ w)
    have B : (f q x, f q y) ‚àà u' := hvw (‚ü®mem_of_mem_nhdsWithin hq hv, hy‚ü© : (q, y) ‚àà v √óÀ¢ w)
    exact hu' (prod_mk_mem_compRel (u'_symm A) B)

section UniformConvergence

/-- An equicontinuous family of functions defined on a compact uniform space is automatically
uniformly equicontinuous. -/
theorem CompactSpace.uniformEquicontinuous_of_equicontinuous {Œπ : Type*} {F : Œπ ‚Üí Œ≤ ‚Üí Œ±}
    [CompactSpace Œ≤] (h : Equicontinuous F) : UniformEquicontinuous F := by
  rw [equicontinuous_iff_continuous] at h
  rw [uniformEquicontinuous_iff_uniformContinuous]
  exact CompactSpace.uniformContinuous_of_continuous h

end UniformConvergence
