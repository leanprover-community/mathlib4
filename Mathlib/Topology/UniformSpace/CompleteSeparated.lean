/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.Topology.UniformSpace.UniformEmbedding

/-!
# Theory of complete separated uniform spaces.

This file is for elementary lemmas that depend on both Cauchy filters and separation.
-/


open Filter

open Topology Filter

variable {Œ± Œ≤ : Type*}

/-- In a separated space, a complete set is closed. -/
theorem IsComplete.isClosed [UniformSpace Œ±] [T0Space Œ±] {s : Set Œ±} (h : IsComplete s) :
    IsClosed s :=
  isClosed_iff_clusterPt.2 fun a ha => by
    let f := ùìù[s] a
    have : Cauchy f := cauchy_nhds.mono' ha inf_le_left
    rcases h f this inf_le_right with ‚ü®y, ys, fy‚ü©
    rwa [(tendsto_nhds_unique' ha inf_le_left fy : a = y)]

theorem IsUniformEmbedding.isClosedEmbedding [UniformSpace Œ±] [UniformSpace Œ≤] [CompleteSpace Œ±]
    [T0Space Œ≤] {f : Œ± ‚Üí Œ≤} (hf : IsUniformEmbedding f) :
    IsClosedEmbedding f :=
  ‚ü®hf.isEmbedding, hf.isUniformInducing.isComplete_range.isClosed‚ü©

@[deprecated (since := "2024-10-30")]
alias IsUniformEmbedding.toIsClosedEmbedding := IsUniformEmbedding.isClosedEmbedding

@[deprecated (since := "2024-10-20")]
alias IsUniformEmbedding.toClosedEmbedding := IsUniformEmbedding.isClosedEmbedding

@[deprecated (since := "2024-10-01")]
alias UniformEmbedding.toIsClosedEmbedding := IsUniformEmbedding.isClosedEmbedding

@[deprecated (since := "2024-10-20")]
alias UniformEmbedding.toClosedEmbedding := IsUniformEmbedding.isClosedEmbedding

namespace IsDenseInducing

open Filter

variable [TopologicalSpace Œ±] {Œ≤ : Type*} [TopologicalSpace Œ≤]
variable {Œ≥ : Type*} [UniformSpace Œ≥] [CompleteSpace Œ≥] [T0Space Œ≥]

theorem continuous_extend_of_cauchy {e : Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≥} (de : IsDenseInducing e)
    (h : ‚àÄ b : Œ≤, Cauchy (map f (comap e <| ùìù b))) : Continuous (de.extend f) :=
  de.continuous_extend fun b => CompleteSpace.complete (h b)

end IsDenseInducing
