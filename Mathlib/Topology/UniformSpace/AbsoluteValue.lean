/-
Copyright (c) 2019 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot

! This file was ported from Lean 3 source module topology.uniform_space.absolute_value
! leanprover-community/mathlib commit 2705404e701abc6b3127da906f40bae062a169c9
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathlib.Algebra.Order.AbsoluteValue
import Mathlib.Topology.UniformSpace.Basic

/-!
# Uniform structure induced by an absolute value

We build a uniform space structure on a commutative ring `R` equipped with an absolute value into
a linear ordered field `ùïú`. Of course in the case `R` is `‚Ñö`, `‚Ñù` or `‚ÑÇ` and
`ùïú = ‚Ñù`, we get the same thing as the metric space construction, and the general construction
follows exactly the same path.

## References

* [N. Bourbaki, *Topologie g√©n√©rale*][bourbaki1966]

## Tags

absolute value, uniform spaces
-/


open Set Function Filter UniformSpace

open Filter

namespace IsAbsoluteValue

variable {ùïú : Type _} [LinearOrderedField ùïú]

variable {R : Type _} [CommRing R] (abv : R ‚Üí ùïú) [IsAbsoluteValue abv]

/-- The uniformity coming from an absolute value. -/
def uniformSpaceCore : UniformSpace.Core R
    where
  uniformity := ‚®Ö Œµ > 0, ùìü { p : R √ó R | abv (p.2 - p.1) < Œµ }
  refl := le_inf·µ¢ fun Œµ => le_inf·µ¢ fun Œµ_pos =>
    principal_mono.2 fun ‚ü®x, y‚ü© h => by have : x = y := (mem_idRel.1 h); simpa [abv_zero, this]
  symm := tendsto_inf·µ¢.2 fun Œµ => tendsto_inf·µ¢.2 fun h =>
    tendsto_inf·µ¢' Œµ <| tendsto_inf·µ¢' h <| tendsto_principal_principal.2 fun ‚ü®x, y‚ü© h => by
      have h : abv (y - x) < Œµ := by simpa using h
      rwa [abv_sub abv] at h
  comp := le_inf·µ¢ fun Œµ => le_inf·µ¢ fun h => lift'_le (mem_inf·µ¢_of_mem (Œµ / 2) <|
    mem_inf·µ¢_of_mem (div_pos h zero_lt_two) (Subset.refl _)) <| by
      have : ‚àÄ a b c : R, abv (c - a) < Œµ / 2 ‚Üí abv (b - c) < Œµ / 2 ‚Üí abv (b - a) < Œµ :=
        fun a b c hac hcb =>
        calc
          abv (b - a) ‚â§ _ := abv_sub_le abv b c a
          _ = abv (c - a) + abv (b - c) := add_comm _ _
          _ < Œµ / 2 + Œµ / 2 := add_lt_add hac hcb
          _ = Œµ := by rw [div_add_div_same, add_self_div_two]

      simpa [compRel]
#align is_absolute_value.uniform_space_core IsAbsoluteValue.uniformSpaceCore

/-- The uniform structure coming from an absolute value. -/
def uniformSpace : UniformSpace R :=
  UniformSpace.ofCore (uniformSpaceCore abv)
#align is_absolute_value.uniform_space IsAbsoluteValue.uniformSpace

-- Porting note: changed `Œµ > 0` to `0 < Œµ`
-- Porting note: because lean faied to synthesize `Nonempty { Œµ // Œµ > 0 }`, but ok with 0 < Œµ

theorem mem_uniformity {s : Set (R √ó R)} :
    s ‚àà (uniformSpaceCore abv).uniformity ‚Üî ‚àÉ Œµ > 0, ‚àÄ {a b : R}, abv (b - a) < Œµ ‚Üí (a, b) ‚àà s := by
  suffices (s ‚àà ‚®Ö Œµ : { Œµ : ùïú // 0 < Œµ }, ùìü { p : R √ó R | abv (p.2 - p.1) < Œµ.val }) ‚Üî _
    by
    rw [inf·µ¢_subtype] at this
    exact this
  rw [mem_inf·µ¢_of_directed]
  ¬∑ simp [subset_def]
  ¬∑ rintro ‚ü®r, hr‚ü© ‚ü®p, hp‚ü©
    exact
      ‚ü®‚ü®min r p, lt_min hr hp‚ü©, by simp (config := { contextual := true })‚ü©
#align is_absolute_value.mem_uniformity IsAbsoluteValue.mem_uniformity

end IsAbsoluteValue
