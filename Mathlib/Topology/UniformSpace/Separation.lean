/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Patrick Massot, Yury Kudryashov
-/
import Mathlib.Tactic.ApplyFun
import Mathlib.Topology.UniformSpace.Basic
import Mathlib.Topology.Separation

#align_import topology.uniform_space.separation from "leanprover-community/mathlib"@"0c1f285a9f6e608ae2bdffa3f993eafb01eba829"

/-!
# Hausdorff properties of uniform spaces. Separation quotient.

Two points of a topological space are called `Inseparable`,
if their neighborhoods filter are equal.
Equivalently, `Inseparable x y` means that any open set that contains `x` must contain `y`
and vice versa.

In a uniform space, points `x` and `y` are inseparable
if and only if `(x, y)` belongs to all entourages,
see `inseparable_iff_ker_uniformity`.

A uniform space is a regular topological space,
hence separation axioms `T0Space`, `T1Space`, `T2Space`, and `T3Space`
are equivalent for uniform spaces,
and Lean typeclass search can automatically convert from one assumption to another.
We say that a uniform space is *separated*, if it satisfies these axioms.
If you need an `Iff` statement (e.g., to rewrite),
then see `R1Space.t0Space_iff_t2Space` and `RegularSpace.t0Space_iff_t3Space`.

In this file we prove several facts
that relate `Inseparable` and `Specializes` to the uniformity filter.
Most of them are simple corollaries of `Filter.HasBasis.inseparable_iff_uniformity`
for different filter bases of `ùì§ Œ±`.

Then we study the Kolmogorov quotient `SeparationQuotient X` of a uniform space.
For a general topological space,
this quotient is defined as the quotient by `Inseparable` equivalence relation.
It is the maximal T‚ÇÄ quotient of a topological space.

In case of a uniform space, we equip this quotient with a `UniformSpace` structure
that agrees with the quotient topology.
We also prove that the quotient map induces uniformity on the original space.

Finally, we turn `SeparationQuotient` into a functor
(not in terms of `CategoryTheory.Functor` to avoid extra imports)
by defining `SeparationQuotient.lift'` and `SeparationQuotient.map` operations.

## Main definitions

* `SeparationQuotient.instUniformSpace`: uniform space structure on `SeparationQuotient Œ±`,
  where `Œ±` is a uniform space;

* `SeparationQuotient.lift'`: given a map `f : Œ± ‚Üí Œ≤`
  from a uniform space to a separated uniform space,
  lift it to a map `SeparationQuotient Œ± ‚Üí Œ≤`;
  if the original map is not uniformly continuous, then returns a constant map.

* `SeparationQuotient.map`: given a map `f : Œ± ‚Üí Œ≤` between uniform spaces,
  returns a map `SeparationQuotient Œ± ‚Üí SeparationQuotient Œ≤`.
  If the original map is not uniformly continuous, then returns a constant map.
  Otherwise, `SeparationQuotient.map f (SeparationQuotient.mk x) = SeparationQuotient.mk (f x)`.

## Main results

* `SeparationQuotient.uniformity_eq`: the uniformity filter on `SeparationQuotient Œ±`
  is the push forward of the uniformity filter on `Œ±`.
* `SeparationQuotient.comap_mk_uniformity`: the quotient map `Œ± ‚Üí SeparationQuotient Œ±`
  induces uniform space structure on the original space.
* `SeparationQuotient.uniformContinuous_lift'`: factoring a uniformly continuous map through the
  separation quotient gives a uniformly continuous map.
* `SeparationQuotient.uniformContinuous_map`: maps induced between separation quotients are
  uniformly continuous.

## Implementation notes

This files used to contain definitions of `separationRel Œ±` and `UniformSpace.SeparationQuotient Œ±`.
These definitions were equal (but not definitionally equal)
to `{x : Œ± √ó Œ± | Inseparable x.1 x.2}` and `SeparationQuotient Œ±`, respectively,
and were added to the library before their geneeralizations to topological spaces.

In #10644, we migrated from these definitions
to more general `Inseparable` and `SeparationQuotient`.

## TODO

Definitions `SeparationQuotient.lift'` and `SeparationQuotient.map`
rely on `UniformSpace` structures in the domain and in the codomain.
We should generalize them to topological spaces.
This generalization will drop `UniformContinuous` assumptions in some lemmas,
and add these assumptions in other lemmas,
so it was not done in #10644 to keep it reasonably sized.

## Keywords

uniform space, separated space, Hausdorff space, separation quotient
-/

open Filter Set Function Topology Uniformity UniformSpace
open scoped Classical

noncomputable section

universe u v w

variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}
variable [UniformSpace Œ±] [UniformSpace Œ≤] [UniformSpace Œ≥]

/-!
### Separated uniform spaces
-/

instance (priority := 100) UniformSpace.to_regularSpace : RegularSpace Œ± :=
  .of_hasBasis
    (fun _ ‚Ü¶ nhds_basis_uniformity' uniformity_hasBasis_closed)
    fun a _V hV ‚Ü¶ isClosed_ball a hV.2
#align uniform_space.to_regular_space UniformSpace.to_regularSpace

#align separation_rel Inseparable
#noalign separated_equiv
#align separation_rel_iff_specializes specializes_iff_inseparable
#noalign separation_rel_iff_inseparable

theorem Filter.HasBasis.specializes_iff_uniformity {Œπ : Sort*} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set (Œ± √ó Œ±)}
    (h : (ùì§ Œ±).HasBasis p s) {x y : Œ±} : x ‚§≥ y ‚Üî ‚àÄ i, p i ‚Üí (x, y) ‚àà s i :=
  (nhds_basis_uniformity h).specializes_iff

theorem Filter.HasBasis.inseparable_iff_uniformity {Œπ : Sort*} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set (Œ± √ó Œ±)}
    (h : (ùì§ Œ±).HasBasis p s) {x y : Œ±} : Inseparable x y ‚Üî ‚àÄ i, p i ‚Üí (x, y) ‚àà s i :=
  specializes_iff_inseparable.symm.trans h.specializes_iff_uniformity
#align filter.has_basis.mem_separation_rel Filter.HasBasis.inseparable_iff_uniformity

theorem inseparable_iff_ker_uniformity {x y : Œ±} : Inseparable x y ‚Üî (x, y) ‚àà (ùì§ Œ±).ker :=
  (ùì§ Œ±).basis_sets.inseparable_iff_uniformity

protected theorem Inseparable.nhds_le_uniformity {x y : Œ±} (h : Inseparable x y) :
    ùìù (x, y) ‚â§ ùì§ Œ± := by
  rw [h.prod rfl]
  apply nhds_le_uniformity

theorem inseparable_iff_clusterPt_uniformity {x y : Œ±} :
    Inseparable x y ‚Üî ClusterPt (x, y) (ùì§ Œ±) := by
  refine ‚ü®fun h ‚Ü¶ .of_nhds_le h.nhds_le_uniformity, fun h ‚Ü¶ ?_‚ü©
  simp_rw [uniformity_hasBasis_closed.inseparable_iff_uniformity, isClosed_iff_clusterPt]
  exact fun U ‚ü®hU, hUc‚ü© ‚Ü¶ hUc _ <| h.mono <| le_principal_iff.2 hU

#align separated_space T0Space

theorem t0Space_iff_uniformity :
    T0Space Œ± ‚Üî ‚àÄ x y, (‚àÄ r ‚àà ùì§ Œ±, (x, y) ‚àà r) ‚Üí x = y := by
  simp only [t0Space_iff_inseparable, inseparable_iff_ker_uniformity, mem_ker, id]
#align separated_def t0Space_iff_uniformity

theorem t0Space_iff_uniformity' :
    T0Space Œ± ‚Üî Pairwise fun x y ‚Ü¶ ‚àÉ r ‚àà ùì§ Œ±, (x, y) ‚àâ r := by
  simp [t0Space_iff_not_inseparable, inseparable_iff_ker_uniformity]
#align separated_def' t0Space_iff_uniformity'

theorem t0Space_iff_ker_uniformity : T0Space Œ± ‚Üî (ùì§ Œ±).ker = diagonal Œ± := by
  simp_rw [t0Space_iff_uniformity, subset_antisymm_iff, diagonal_subset_iff, subset_def,
    Prod.forall, Filter.mem_ker, mem_diagonal_iff, iff_self_and]
  exact fun _ x s hs ‚Ü¶ refl_mem_uniformity hs
#align separated_space_iff t0Space_iff_ker_uniformity

theorem eq_of_uniformity {Œ± : Type*} [UniformSpace Œ±] [T0Space Œ±] {x y : Œ±}
    (h : ‚àÄ {V}, V ‚àà ùì§ Œ± ‚Üí (x, y) ‚àà V) : x = y :=
  t0Space_iff_uniformity.mp ‚ÄπT0Space Œ±‚Ä∫ x y @h
#align eq_of_uniformity eq_of_uniformity

theorem eq_of_uniformity_basis {Œ± : Type*} [UniformSpace Œ±] [T0Space Œ±] {Œπ : Sort*}
    {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set (Œ± √ó Œ±)} (hs : (ùì§ Œ±).HasBasis p s) {x y : Œ±}
    (h : ‚àÄ {i}, p i ‚Üí (x, y) ‚àà s i) : x = y :=
  (hs.inseparable_iff_uniformity.2 @h).eq
#align eq_of_uniformity_basis eq_of_uniformity_basis

theorem eq_of_forall_symmetric {Œ± : Type*} [UniformSpace Œ±] [T0Space Œ±] {x y : Œ±}
    (h : ‚àÄ {V}, V ‚àà ùì§ Œ± ‚Üí SymmetricRel V ‚Üí (x, y) ‚àà V) : x = y :=
  eq_of_uniformity_basis hasBasis_symmetric (by simpa)
#align eq_of_forall_symmetric eq_of_forall_symmetric

theorem eq_of_clusterPt_uniformity [T0Space Œ±] {x y : Œ±} (h : ClusterPt (x, y) (ùì§ Œ±)) : x = y :=
  (inseparable_iff_clusterPt_uniformity.2 h).eq
#align eq_of_cluster_pt_uniformity eq_of_clusterPt_uniformity

theorem Filter.Tendsto.inseparable_iff_uniformity {l : Filter Œ≤} [NeBot l] {f g : Œ≤ ‚Üí Œ±} {a b : Œ±}
    (ha : Tendsto f l (ùìù a)) (hb : Tendsto g l (ùìù b)) :
    Inseparable a b ‚Üî Tendsto (fun x ‚Ü¶ (f x, g x)) l (ùì§ Œ±) := by
  refine ‚ü®fun h ‚Ü¶ (ha.prod_mk_nhds hb).mono_right h.nhds_le_uniformity, fun h ‚Ü¶ ?_‚ü©
  rw [inseparable_iff_clusterPt_uniformity]
  exact (ClusterPt.of_le_nhds (ha.prod_mk_nhds hb)).mono h

#align id_rel_sub_separation_relation Inseparable.rfl
#align separation_rel_comap Inducing.inseparable_iff
#align filter.has_basis.separation_rel Filter.HasBasis.ker
#noalign separation_rel_eq_inter_closure
#align is_closed_separation_rel isClosed_setOf_inseparable
#align separated_iff_t2 R1Space.t2Space_iff_t0Space
#align separated_t3 RegularSpace.t3Space_iff_t0Space
#align subtype.separated_space Subtype.t0Space

theorem isClosed_of_spaced_out [T0Space Œ±] {V‚ÇÄ : Set (Œ± √ó Œ±)} (V‚ÇÄ_in : V‚ÇÄ ‚àà ùì§ Œ±) {s : Set Œ±}
    (hs : s.Pairwise fun x y => (x, y) ‚àâ V‚ÇÄ) : IsClosed s := by
  rcases comp_symm_mem_uniformity_sets V‚ÇÄ_in with ‚ü®V‚ÇÅ, V‚ÇÅ_in, V‚ÇÅ_symm, h_comp‚ü©
  apply isClosed_of_closure_subset
  intro x hx
  rw [mem_closure_iff_ball] at hx
  rcases hx V‚ÇÅ_in with ‚ü®y, hy, hy'‚ü©
  suffices x = y by rwa [this]
  apply eq_of_forall_symmetric
  intro V V_in _
  rcases hx (inter_mem V‚ÇÅ_in V_in) with ‚ü®z, hz, hz'‚ü©
  obtain rfl : z = y := by
    by_contra hzy
    exact hs hz' hy' hzy (h_comp <| mem_comp_of_mem_ball V‚ÇÅ_symm (ball_inter_left x _ _ hz) hy)
  exact ball_inter_right x _ _ hz
#align is_closed_of_spaced_out isClosed_of_spaced_out

theorem isClosed_range_of_spaced_out {Œπ} [T0Space Œ±] {V‚ÇÄ : Set (Œ± √ó Œ±)} (V‚ÇÄ_in : V‚ÇÄ ‚àà ùì§ Œ±)
    {f : Œπ ‚Üí Œ±} (hf : Pairwise fun x y => (f x, f y) ‚àâ V‚ÇÄ) : IsClosed (range f) :=
  isClosed_of_spaced_out V‚ÇÄ_in <| by
    rintro _ ‚ü®x, rfl‚ü© _ ‚ü®y, rfl‚ü© h
    exact hf (ne_of_apply_ne f h)
#align is_closed_range_of_spaced_out isClosed_range_of_spaced_out

/-!
### Separation quotient
-/

#align uniform_space.separation_setoid inseparableSetoid

namespace SeparationQuotient

theorem comap_map_mk_uniformity : comap (Prod.map mk mk) (map (Prod.map mk mk) (ùì§ Œ±)) = ùì§ Œ± := by
  refine le_antisymm ?_ le_comap_map
  refine ((((ùì§ Œ±).basis_sets.map _).comap _).le_basis_iff uniformity_hasBasis_open).2 fun U hU ‚Ü¶ ?_
  refine ‚ü®U, hU.1, fun (x‚ÇÅ, x‚ÇÇ) ‚ü®(y‚ÇÅ, y‚ÇÇ), hyU, hxy‚ü© ‚Ü¶ ?_‚ü©
  simp only [Prod.map, Prod.ext_iff, mk_eq_mk] at hxy
  exact ((hxy.1.prod hxy.2).mem_open_iff hU.2).1 hyU

instance instUniformSpace : UniformSpace (SeparationQuotient Œ±) where
  uniformity := map (Prod.map mk mk) (ùì§ Œ±)
  symm := tendsto_map' <| tendsto_map.comp tendsto_swap_uniformity
  comp := fun t ht ‚Ü¶ by
    rcases comp_open_symm_mem_uniformity_sets ht with ‚ü®U, hU, hUo, -, hUt‚ü©
    refine mem_of_superset (mem_lift' <| image_mem_map hU) ?_
    simp only [subset_def, Prod.forall, mem_compRel, mem_image, Prod.ext_iff]
    rintro _ _ ‚ü®_, ‚ü®‚ü®x, y‚ü©, hxyU, rfl, rfl‚ü©, ‚ü®‚ü®y', z‚ü©, hyzU, hy, rfl‚ü©‚ü©
    have : y' ‚§≥ y := (mk_eq_mk.1 hy).specializes
    exact @hUt (x, z) ‚ü®y', this.mem_open (UniformSpace.isOpen_ball _ hUo) hxyU, hyzU‚ü©
  nhds_eq_comap_uniformity := surjective_mk.forall.2 fun x ‚Ü¶ comap_injective surjective_mk <| by
    conv_lhs => rw [comap_mk_nhds_mk, nhds_eq_comap_uniformity, ‚Üê comap_map_mk_uniformity]
    simp only [Filter.comap_comap, Function.comp, Prod_map]

theorem uniformity_eq : ùì§ (SeparationQuotient Œ±) = (ùì§ Œ±).map (Prod.map mk mk) := rfl
#align uniform_space.uniformity_quotient SeparationQuotient.uniformity_eq

theorem uniformContinuous_mk : UniformContinuous (mk : Œ± ‚Üí SeparationQuotient Œ±) :=
  le_rfl
#align uniform_space.uniform_continuous_quotient_mk SeparationQuotient.uniformContinuous_mk

theorem uniformContinuous_dom {f : SeparationQuotient Œ± ‚Üí Œ≤} :
    UniformContinuous f ‚Üî UniformContinuous (f ‚àò mk) :=
  .rfl
#align uniform_space.uniform_continuous_quotient SeparationQuotient.uniformContinuous_dom

theorem uniformContinuous_dom‚ÇÇ {f : SeparationQuotient Œ± √ó SeparationQuotient Œ≤ ‚Üí Œ≥} :
    UniformContinuous f ‚Üî UniformContinuous fun p : Œ± √ó Œ≤ ‚Ü¶ f (mk p.1, mk p.2) := by
  simp only [UniformContinuous, uniformity_prod_eq_prod, uniformity_eq, prod_map_map_eq,
    tendsto_map'_iff]
  rfl

theorem uniformContinuous_lift {f : Œ± ‚Üí Œ≤} (h : ‚àÄ a b, Inseparable a b ‚Üí f a = f b) :
    UniformContinuous (lift f h) ‚Üî UniformContinuous f :=
  .rfl
#align uniform_space.uniform_continuous_quotient_lift SeparationQuotient.uniformContinuous_lift

theorem uniformContinuous_uncurry_lift‚ÇÇ {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥}
    (h : ‚àÄ a c b d, Inseparable a b ‚Üí Inseparable c d ‚Üí f a c = f b d) :
    UniformContinuous (uncurry <| lift‚ÇÇ f h) ‚Üî UniformContinuous (uncurry f) :=
  uniformContinuous_dom‚ÇÇ
#align uniform_space.uniform_continuous_quotient_lift‚ÇÇ SeparationQuotient.uniformContinuous_uncurry_lift‚ÇÇ

#noalign uniform_space.comap_quotient_le_uniformity

theorem comap_mk_uniformity : (ùì§ (SeparationQuotient Œ±)).comap (Prod.map mk mk) = ùì§ Œ± :=
  comap_map_mk_uniformity
#align uniform_space.comap_quotient_eq_uniformity SeparationQuotient.comap_mk_uniformity

#align uniform_space.separated_separation SeparationQuotient.instT0Space

#align uniform_space.separated_of_uniform_continuous Inseparable.map
#noalign uniform_space.eq_of_separated_of_uniform_continuous

#align uniform_space.separation_quotient SeparationQuotient
#align uniform_space.separation_quotient.mk_eq_mk SeparationQuotient.mk_eq_mk

/-- Factoring functions to a separated space through the separation quotient.

TODO: unify with `SeparationQuotient.lift`. -/
def lift' [T0Space Œ≤] (f : Œ± ‚Üí Œ≤) : SeparationQuotient Œ± ‚Üí Œ≤ :=
  if hc : UniformContinuous f then lift f fun _ _ h => (h.map hc.continuous).eq
  else fun x => f (Nonempty.some ‚ü®x.out'‚ü©)
#align uniform_space.separation_quotient.lift SeparationQuotient.lift'

theorem lift'_mk [T0Space Œ≤] {f : Œ± ‚Üí Œ≤} (h : UniformContinuous f) (a : Œ±) :
    lift' f (mk a) = f a := by rw [lift', dif_pos h, lift_mk]
#align uniform_space.separation_quotient.lift_mk SeparationQuotient.lift'_mk

theorem uniformContinuous_lift' [T0Space Œ≤] (f : Œ± ‚Üí Œ≤) : UniformContinuous (lift' f) := by
  by_cases hf : UniformContinuous f
  ¬∑ rwa [lift', dif_pos hf, uniformContinuous_lift]
  ¬∑ rw [lift', dif_neg hf]
    exact uniformContinuous_of_const fun a _ => rfl
#align uniform_space.separation_quotient.uniform_continuous_lift SeparationQuotient.uniformContinuous_lift'

/-- The separation quotient functor acting on functions. -/
def map (f : Œ± ‚Üí Œ≤) : SeparationQuotient Œ± ‚Üí SeparationQuotient Œ≤ := lift' (mk ‚àò f)
#align uniform_space.separation_quotient.map SeparationQuotient.map

theorem map_mk {f : Œ± ‚Üí Œ≤} (h : UniformContinuous f) (a : Œ±) : map f (mk a) = mk (f a) := by
  rw [map, lift'_mk (uniformContinuous_mk.comp h)]; rfl
#align uniform_space.separation_quotient.map_mk SeparationQuotient.map_mk

theorem uniformContinuous_map (f : Œ± ‚Üí Œ≤) : UniformContinuous (map f) :=
  uniformContinuous_lift' _
#align uniform_space.separation_quotient.uniform_continuous_map SeparationQuotient.uniformContinuous_map

theorem map_unique {f : Œ± ‚Üí Œ≤} (hf : UniformContinuous f)
    {g : SeparationQuotient Œ± ‚Üí SeparationQuotient Œ≤} (comm : mk ‚àò f = g ‚àò mk) : map f = g := by
  ext ‚ü®a‚ü©
  calc
    map f ‚ü¶a‚üß = ‚ü¶f a‚üß := map_mk hf a
    _ = g ‚ü¶a‚üß := congr_fun comm a
#align uniform_space.separation_quotient.map_unique SeparationQuotient.map_unique

@[simp]
theorem map_id : map (@id Œ±) = id := map_unique uniformContinuous_id rfl
#align uniform_space.separation_quotient.map_id SeparationQuotient.map_id

theorem map_comp {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} (hf : UniformContinuous f) (hg : UniformContinuous g) :
    map g ‚àò map f = map (g ‚àò f) :=
  (map_unique (hg.comp hf) <| by simp only [Function.comp, map_mk, hf, hg]).symm
#align uniform_space.separation_quotient.map_comp SeparationQuotient.map_comp

end SeparationQuotient

#align uniform_space.separation_prod inseparable_prod
#align uniform_space.separated.prod Prod.instT0Space
