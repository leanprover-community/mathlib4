/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Patrick Massot
-/
import Mathlib.Topology.UniformSpace.Basic
import Mathlib.Topology.Compactness.Compact

/-!
# Compact sets in uniform spaces

* `compactSpace_uniformity`: On a compact uniform space, the topology determines the
  uniform structure, entourages are exactly the neighborhoods of the diagonal.

-/

universe u v ua ub uc ud

variable {Œ± : Type ua} {Œ≤ : Type ub} {Œ≥ : Type uc} {Œ¥ : Type ud} {Œπ : Sort*}

section Compact

open Uniformity Set Filter UniformSpace
open scoped Topology

variable [UniformSpace Œ±] {K : Set Œ±}

/-- Let `c : Œπ ‚Üí Set Œ±` be an open cover of a compact set `s`. Then there exists an entourage
`n` such that for each `x ‚àà s` its `n`-neighborhood is contained in some `c i`. -/
theorem lebesgue_number_lemma {Œπ : Sort*} {U : Œπ ‚Üí Set Œ±} (hK : IsCompact K)
    (hopen : ‚àÄ i, IsOpen (U i)) (hcover : K ‚äÜ ‚ãÉ i, U i) :
    ‚àÉ V ‚àà ùì§ Œ±, ‚àÄ x ‚àà K, ‚àÉ i, ball x V ‚äÜ U i := by
  have : ‚àÄ x ‚àà K, ‚àÉ i, ‚àÉ V ‚àà ùì§ Œ±, ball x (V ‚óã V) ‚äÜ U i := fun x hx ‚Ü¶ by
    obtain ‚ü®i, hi‚ü© := mem_iUnion.1 (hcover hx)
    rw [‚Üê (hopen i).mem_nhds_iff, nhds_eq_comap_uniformity, ‚Üê lift'_comp_uniformity] at hi
    exact ‚ü®i, (((basis_sets _).lift' <| monotone_id.compRel monotone_id).comap _).mem_iff.1 hi‚ü©
  choose ind W hW hWU using this
  rcases hK.elim_nhds_subcover' (fun x hx ‚Ü¶ ball x (W x hx)) (fun x hx ‚Ü¶ ball_mem_nhds _ (hW x hx))
    with ‚ü®t, ht‚ü©
  refine ‚ü®‚ãÇ x ‚àà t, W x x.2, (biInter_finset_mem _).2 fun x _ ‚Ü¶ hW x x.2, fun x hx ‚Ü¶ ?_‚ü©
  rcases mem_iUnion‚ÇÇ.1 (ht hx) with ‚ü®y, hyt, hxy‚ü©
  exact ‚ü®ind y y.2, fun z hz ‚Ü¶ hWU _ _ ‚ü®x, hxy, mem_iInter‚ÇÇ.1 hz _ hyt‚ü©‚ü©

/-- Let `U : Œπ ‚Üí Set Œ±` be an open cover of a compact set `K`.
Then there exists an entourage `V`
such that for each `x ‚àà K` its `V`-neighborhood is included in some `U i`.

Moreover, one can choose an entourage from a given basis. -/
protected theorem Filter.HasBasis.lebesgue_number_lemma {Œπ' Œπ : Sort*} {p : Œπ' ‚Üí Prop}
    {V : Œπ' ‚Üí Set (Œ± √ó Œ±)} {U : Œπ ‚Üí Set Œ±} (hbasis : (ùì§ Œ±).HasBasis p V) (hK : IsCompact K)
    (hopen : ‚àÄ j, IsOpen (U j)) (hcover : K ‚äÜ ‚ãÉ j, U j) :
    ‚àÉ i, p i ‚àß ‚àÄ x ‚àà K, ‚àÉ j, ball x (V i) ‚äÜ U j := by
  refine (hbasis.exists_iff ?_).1 (lebesgue_number_lemma hK hopen hcover)
  exact fun s t hst ht x hx ‚Ü¶ (ht x hx).imp fun i hi ‚Ü¶ Subset.trans (ball_mono hst _) hi

/-- Let `c : Set (Set Œ±)` be an open cover of a compact set `s`. Then there exists an entourage
`n` such that for each `x ‚àà s` its `n`-neighborhood is contained in some `t ‚àà c`. -/
theorem lebesgue_number_lemma_sUnion {S : Set (Set Œ±)}
    (hK : IsCompact K) (hopen : ‚àÄ s ‚àà S, IsOpen s) (hcover : K ‚äÜ ‚ãÉ‚ÇÄ S) :
    ‚àÉ V ‚àà ùì§ Œ±, ‚àÄ x ‚àà K, ‚àÉ s ‚àà S, ball x V ‚äÜ s := by
  rw [sUnion_eq_iUnion] at hcover
  simpa using lebesgue_number_lemma hK (by simpa) hcover

/-- If `K` is a compact set in a uniform space and `{V i | p i}` is a basis of entourages,
then `{‚ãÉ x ‚àà K, UniformSpace.ball x (V i) | p i}` is a basis of `ùìùÀ¢ K`.

Here "`{s i | p i}` is a basis of a filter `l`" means `Filter.HasBasis l p s`. -/
theorem IsCompact.nhdsSet_basis_uniformity {p : Œπ ‚Üí Prop} {V : Œπ ‚Üí Set (Œ± √ó Œ±)}
    (hbasis : (ùì§ Œ±).HasBasis p V) (hK : IsCompact K) :
    (ùìùÀ¢ K).HasBasis p fun i => ‚ãÉ x ‚àà K, ball x (V i) where
  mem_iff' U := by
    constructor
    ¬∑ intro H
      have HKU : K ‚äÜ ‚ãÉ _ : Unit, interior U := by
        simpa only [iUnion_const, subset_interior_iff_mem_nhdsSet] using H
      obtain ‚ü®i, hpi, hi‚ü© : ‚àÉ i, p i ‚àß ‚ãÉ x ‚àà K, ball x (V i) ‚äÜ interior U := by
        simpa using hbasis.lebesgue_number_lemma hK (fun _ ‚Ü¶ isOpen_interior) HKU
      exact ‚ü®i, hpi, hi.trans interior_subset‚ü©
    ¬∑ rintro ‚ü®i, hpi, hi‚ü©
      refine mem_of_superset (bUnion_mem_nhdsSet fun x _ ‚Ü¶ ?_) hi
      exact ball_mem_nhds _ <| hbasis.mem_of_mem hpi

-- TODO: move to a separate file, golf using the regularity of a uniform space.
theorem Disjoint.exists_uniform_thickening {A B : Set Œ±} (hA : IsCompact A) (hB : IsClosed B)
    (h : Disjoint A B) : ‚àÉ V ‚àà ùì§ Œ±, Disjoint (‚ãÉ x ‚àà A, ball x V) (‚ãÉ x ‚àà B, ball x V) := by
  have : B·∂ú ‚àà ùìùÀ¢ A := hB.isOpen_compl.mem_nhdsSet.mpr h.le_compl_right
  rw [(hA.nhdsSet_basis_uniformity (Filter.basis_sets _)).mem_iff] at this
  rcases this with ‚ü®U, hU, hUAB‚ü©
  rcases comp_symm_mem_uniformity_sets hU with ‚ü®V, hV, hVsymm, hVU‚ü©
  refine ‚ü®V, hV, Set.disjoint_left.mpr fun x => ?_‚ü©
  simp only [mem_iUnion‚ÇÇ]
  rintro ‚ü®a, ha, hxa‚ü© ‚ü®b, hb, hxb‚ü©
  rw [mem_ball_symmetry hVsymm] at hxa hxb
  exact hUAB (mem_iUnion‚ÇÇ_of_mem ha <| hVU <| mem_comp_of_mem_ball hVsymm hxa hxb) hb

theorem Disjoint.exists_uniform_thickening_of_basis {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set (Œ± √ó Œ±)}
    (hU : (ùì§ Œ±).HasBasis p s) {A B : Set Œ±} (hA : IsCompact A) (hB : IsClosed B)
    (h : Disjoint A B) : ‚àÉ i, p i ‚àß Disjoint (‚ãÉ x ‚àà A, ball x (s i)) (‚ãÉ x ‚àà B, ball x (s i)) := by
  rcases h.exists_uniform_thickening hA hB with ‚ü®V, hV, hVAB‚ü©
  rcases hU.mem_iff.1 hV with ‚ü®i, hi, hiV‚ü©
  exact ‚ü®i, hi, hVAB.mono (iUnion‚ÇÇ_mono fun a _ => ball_mono hiV a)
    (iUnion‚ÇÇ_mono fun b _ => ball_mono hiV b)‚ü©

/-- A useful consequence of the Lebesgue number lemma: given any compact set `K` contained in an
open set `U`, we can find an (open) entourage `V` such that the ball of size `V` about any point of
`K` is contained in `U`. -/
theorem lebesgue_number_of_compact_open {K U : Set Œ±} (hK : IsCompact K)
    (hU : IsOpen U) (hKU : K ‚äÜ U) : ‚àÉ V ‚àà ùì§ Œ±, IsOpen V ‚àß ‚àÄ x ‚àà K, UniformSpace.ball x V ‚äÜ U :=
  let ‚ü®V, ‚ü®hV, hVo‚ü©, hVU‚ü© :=
    (hK.nhdsSet_basis_uniformity uniformity_hasBasis_open).mem_iff.1 (hU.mem_nhdsSet.2 hKU)
  ‚ü®V, hV, hVo, iUnion‚ÇÇ_subset_iff.1 hVU‚ü©


/-- On a compact uniform space, the topology determines the uniform structure, entourages are
exactly the neighborhoods of the diagonal. -/
theorem nhdsSet_diagonal_eq_uniformity [CompactSpace Œ±] : ùìùÀ¢ (diagonal Œ±) = ùì§ Œ± := by
  refine nhdsSet_diagonal_le_uniformity.antisymm ?_
  have :
    (ùì§ (Œ± √ó Œ±)).HasBasis (fun U => U ‚àà ùì§ Œ±) fun U =>
      (fun p : (Œ± √ó Œ±) √ó Œ± √ó Œ± => ((p.1.1, p.2.1), p.1.2, p.2.2)) ‚Åª¬π' U √óÀ¢ U := by
    rw [uniformity_prod_eq_comap_prod]
    exact (ùì§ Œ±).basis_sets.prod_self.comap _
  refine (isCompact_diagonal.nhdsSet_basis_uniformity this).ge_iff.2 fun U hU => ?_
  exact mem_of_superset hU fun ‚ü®x, y‚ü© hxy => mem_iUnion‚ÇÇ.2
    ‚ü®(x, x), rfl, refl_mem_uniformity hU, hxy‚ü©

/-- On a compact uniform space, the topology determines the uniform structure, entourages are
exactly the neighborhoods of the diagonal. -/
theorem compactSpace_uniformity [CompactSpace Œ±] : ùì§ Œ± = ‚®Ü x, ùìù (x, x) :=
  nhdsSet_diagonal_eq_uniformity.symm.trans (nhdsSet_diagonal _)

theorem unique_uniformity_of_compact [t : TopologicalSpace Œ≥] [CompactSpace Œ≥]
    {u u' : UniformSpace Œ≥} (h : u.toTopologicalSpace = t) (h' : u'.toTopologicalSpace = t) :
    u = u' := by
  refine UniformSpace.ext ?_
  have : @CompactSpace Œ≥ u.toTopologicalSpace := by rwa [h]
  have : @CompactSpace Œ≥ u'.toTopologicalSpace := by rwa [h']
  rw [@compactSpace_uniformity _ u, compactSpace_uniformity, h, h']

end Compact
