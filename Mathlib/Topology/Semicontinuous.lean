/-
Copyright (c) 2021 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.Algebra.Function.Indicator
import Mathlib.Topology.ContinuousOn
import Mathlib.Topology.Instances.ENNReal

#align_import topology.semicontinuous from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# Semicontinuous maps

A function `f` from a topological space `Œ±` to an ordered space `Œ≤` is lower semicontinuous at a
point `x` if, for any `y < f x`, for any `x'` close enough to `x`, one has `f x' > y`. In other
words, `f` can jump up, but it can not jump down.

Upper semicontinuous functions are defined similarly.

This file introduces these notions, and a basic API around them mimicking the API for continuous
functions.

## Main definitions and results

We introduce 4 definitions related to lower semicontinuity:
* `LowerSemicontinuousWithinAt f s x`
* `LowerSemicontinuousAt f x`
* `LowerSemicontinuousOn f s`
* `LowerSemicontinuous f`

We build a basic API using dot notation around these notions, and we prove that
* constant functions are lower semicontinuous;
* `indicator s (fun _ ‚Ü¶ y)` is lower semicontinuous when `s` is open and `0 ‚â§ y`,
  or when `s` is closed and `y ‚â§ 0`;
* continuous functions are lower semicontinuous;
* left composition with a continuous monotone functions maps lower semicontinuous functions to lower
  semicontinuous functions. If the function is anti-monotone, it instead maps lower semicontinuous
  functions to upper semicontinuous functions;
* right composition with continuous functions preserves lower and upper semicontinuity;
* a sum of two (or finitely many) lower semicontinuous functions is lower semicontinuous;
* a supremum of a family of lower semicontinuous functions is lower semicontinuous;
* An infinite sum of `‚Ñù‚â•0‚àû`-valued lower semicontinuous functions is lower semicontinuous.

Similar results are stated and proved for upper semicontinuity.

We also prove that a function is continuous if and only if it is both lower and upper
semicontinuous.

We have some equivalent definitions of lower- and upper-semicontinuity (under certain
restrictions on the order on the codomain):
* `lowerSemicontinuous_iff_isOpen_preimage` in a linear order;
* `lowerSemicontinuous_iff_isClosed_preimage` in a linear order;
* `lowerSemicontinuousAt_iff_le_liminf` in a dense complete linear order;
* `lowerSemicontinuous_iff_isClosed_epigraph` in a dense complete linear order with the order
  topology.

## Implementation details

All the nontrivial results for upper semicontinuous functions are deduced from the corresponding
ones for lower semicontinuous functions using `OrderDual`.

## References

* <https://en.wikipedia.org/wiki/Closed_convex_function>
* <https://en.wikipedia.org/wiki/Semi-continuity>

-/


open Topology BigOperators ENNReal

open Set Function Filter

variable {Œ± : Type*} [TopologicalSpace Œ±] {Œ≤ : Type*} [Preorder Œ≤] {f g : Œ± ‚Üí Œ≤} {x : Œ±}
  {s t : Set Œ±} {y z : Œ≤}

/-! ### Main definitions -/


/-- A real function `f` is lower semicontinuous at `x` within a set `s` if, for any `Œµ > 0`, for all
`x'` close enough to `x` in `s`, then `f x'` is at least `f x - Œµ`. We formulate this in a general
preordered space, using an arbitrary `y < f x` instead of `f x - Œµ`. -/
def LowerSemicontinuousWithinAt (f : Œ± ‚Üí Œ≤) (s : Set Œ±) (x : Œ±) :=
  ‚àÄ y < f x, ‚àÄ·∂† x' in ùìù[s] x, y < f x'
#align lower_semicontinuous_within_at LowerSemicontinuousWithinAt

/-- A real function `f` is lower semicontinuous on a set `s` if, for any `Œµ > 0`, for any `x ‚àà s`,
for all `x'` close enough to `x` in `s`, then `f x'` is at least `f x - Œµ`. We formulate this in
a general preordered space, using an arbitrary `y < f x` instead of `f x - Œµ`. -/
def LowerSemicontinuousOn (f : Œ± ‚Üí Œ≤) (s : Set Œ±) :=
  ‚àÄ x ‚àà s, LowerSemicontinuousWithinAt f s x
#align lower_semicontinuous_on LowerSemicontinuousOn

/-- A real function `f` is lower semicontinuous at `x` if, for any `Œµ > 0`, for all `x'` close
enough to `x`, then `f x'` is at least `f x - Œµ`. We formulate this in a general preordered space,
using an arbitrary `y < f x` instead of `f x - Œµ`. -/
def LowerSemicontinuousAt (f : Œ± ‚Üí Œ≤) (x : Œ±) :=
  ‚àÄ y < f x, ‚àÄ·∂† x' in ùìù x, y < f x'
#align lower_semicontinuous_at LowerSemicontinuousAt

/-- A real function `f` is lower semicontinuous if, for any `Œµ > 0`, for any `x`, for all `x'` close
enough to `x`, then `f x'` is at least `f x - Œµ`. We formulate this in a general preordered space,
using an arbitrary `y < f x` instead of `f x - Œµ`. -/
def LowerSemicontinuous (f : Œ± ‚Üí Œ≤) :=
  ‚àÄ x, LowerSemicontinuousAt f x
#align lower_semicontinuous LowerSemicontinuous

/-- A real function `f` is upper semicontinuous at `x` within a set `s` if, for any `Œµ > 0`, for all
`x'` close enough to `x` in `s`, then `f x'` is at most `f x + Œµ`. We formulate this in a general
preordered space, using an arbitrary `y > f x` instead of `f x + Œµ`. -/
def UpperSemicontinuousWithinAt (f : Œ± ‚Üí Œ≤) (s : Set Œ±) (x : Œ±) :=
  ‚àÄ y, f x < y ‚Üí ‚àÄ·∂† x' in ùìù[s] x, f x' < y
#align upper_semicontinuous_within_at UpperSemicontinuousWithinAt

/-- A real function `f` is upper semicontinuous on a set `s` if, for any `Œµ > 0`, for any `x ‚àà s`,
for all `x'` close enough to `x` in `s`, then `f x'` is at most `f x + Œµ`. We formulate this in a
general preordered space, using an arbitrary `y > f x` instead of `f x + Œµ`. -/
def UpperSemicontinuousOn (f : Œ± ‚Üí Œ≤) (s : Set Œ±) :=
  ‚àÄ x ‚àà s, UpperSemicontinuousWithinAt f s x
#align upper_semicontinuous_on UpperSemicontinuousOn

/-- A real function `f` is upper semicontinuous at `x` if, for any `Œµ > 0`, for all `x'` close
enough to `x`, then `f x'` is at most `f x + Œµ`. We formulate this in a general preordered space,
using an arbitrary `y > f x` instead of `f x + Œµ`. -/
def UpperSemicontinuousAt (f : Œ± ‚Üí Œ≤) (x : Œ±) :=
  ‚àÄ y, f x < y ‚Üí ‚àÄ·∂† x' in ùìù x, f x' < y
#align upper_semicontinuous_at UpperSemicontinuousAt

/-- A real function `f` is upper semicontinuous if, for any `Œµ > 0`, for any `x`, for all `x'`
close enough to `x`, then `f x'` is at most `f x + Œµ`. We formulate this in a general preordered
space, using an arbitrary `y > f x` instead of `f x + Œµ`. -/
def UpperSemicontinuous (f : Œ± ‚Üí Œ≤) :=
  ‚àÄ x, UpperSemicontinuousAt f x
#align upper_semicontinuous UpperSemicontinuous

/-!
### Lower semicontinuous functions
-/


/-! #### Basic dot notation interface for lower semicontinuity -/


theorem LowerSemicontinuousWithinAt.mono (h : LowerSemicontinuousWithinAt f s x) (hst : t ‚äÜ s) :
    LowerSemicontinuousWithinAt f t x := fun y hy =>
  Filter.Eventually.filter_mono (nhdsWithin_mono _ hst) (h y hy)
#align lower_semicontinuous_within_at.mono LowerSemicontinuousWithinAt.mono

theorem lowerSemicontinuousWithinAt_univ_iff :
    LowerSemicontinuousWithinAt f univ x ‚Üî LowerSemicontinuousAt f x := by
  simp [LowerSemicontinuousWithinAt, LowerSemicontinuousAt, nhdsWithin_univ]
#align lower_semicontinuous_within_at_univ_iff lowerSemicontinuousWithinAt_univ_iff

theorem LowerSemicontinuousAt.lowerSemicontinuousWithinAt (s : Set Œ±)
    (h : LowerSemicontinuousAt f x) : LowerSemicontinuousWithinAt f s x := fun y hy =>
  Filter.Eventually.filter_mono nhdsWithin_le_nhds (h y hy)
#align lower_semicontinuous_at.lower_semicontinuous_within_at LowerSemicontinuousAt.lowerSemicontinuousWithinAt

theorem LowerSemicontinuousOn.lowerSemicontinuousWithinAt (h : LowerSemicontinuousOn f s)
    (hx : x ‚àà s) : LowerSemicontinuousWithinAt f s x :=
  h x hx
#align lower_semicontinuous_on.lower_semicontinuous_within_at LowerSemicontinuousOn.lowerSemicontinuousWithinAt

theorem LowerSemicontinuousOn.mono (h : LowerSemicontinuousOn f s) (hst : t ‚äÜ s) :
    LowerSemicontinuousOn f t := fun x hx => (h x (hst hx)).mono hst
#align lower_semicontinuous_on.mono LowerSemicontinuousOn.mono

theorem lowerSemicontinuousOn_univ_iff : LowerSemicontinuousOn f univ ‚Üî LowerSemicontinuous f := by
  simp [LowerSemicontinuousOn, LowerSemicontinuous, lowerSemicontinuousWithinAt_univ_iff]
#align lower_semicontinuous_on_univ_iff lowerSemicontinuousOn_univ_iff

theorem LowerSemicontinuous.lowerSemicontinuousAt (h : LowerSemicontinuous f) (x : Œ±) :
    LowerSemicontinuousAt f x :=
  h x
#align lower_semicontinuous.lower_semicontinuous_at LowerSemicontinuous.lowerSemicontinuousAt

theorem LowerSemicontinuous.lowerSemicontinuousWithinAt (h : LowerSemicontinuous f) (s : Set Œ±)
    (x : Œ±) : LowerSemicontinuousWithinAt f s x :=
  (h x).lowerSemicontinuousWithinAt s
#align lower_semicontinuous.lower_semicontinuous_within_at LowerSemicontinuous.lowerSemicontinuousWithinAt

theorem LowerSemicontinuous.lowerSemicontinuousOn (h : LowerSemicontinuous f) (s : Set Œ±) :
    LowerSemicontinuousOn f s := fun x _hx => h.lowerSemicontinuousWithinAt s x
#align lower_semicontinuous.lower_semicontinuous_on LowerSemicontinuous.lowerSemicontinuousOn

/-! #### Constants -/


theorem lowerSemicontinuousWithinAt_const : LowerSemicontinuousWithinAt (fun _x => z) s x :=
  fun _y hy => Filter.eventually_of_forall fun _x => hy
#align lower_semicontinuous_within_at_const lowerSemicontinuousWithinAt_const

theorem lowerSemicontinuousAt_const : LowerSemicontinuousAt (fun _x => z) x := fun _y hy =>
  Filter.eventually_of_forall fun _x => hy
#align lower_semicontinuous_at_const lowerSemicontinuousAt_const

theorem lowerSemicontinuousOn_const : LowerSemicontinuousOn (fun _x => z) s := fun _x _hx =>
  lowerSemicontinuousWithinAt_const
#align lower_semicontinuous_on_const lowerSemicontinuousOn_const

theorem lowerSemicontinuous_const : LowerSemicontinuous fun _x : Œ± => z := fun _x =>
  lowerSemicontinuousAt_const
#align lower_semicontinuous_const lowerSemicontinuous_const

/-! #### Indicators -/


section

variable [Zero Œ≤]

theorem IsOpen.lowerSemicontinuous_indicator (hs : IsOpen s) (hy : 0 ‚â§ y) :
    LowerSemicontinuous (indicator s fun _x => y) := by
  intro x z hz
  by_cases h : x ‚àà s <;> simp [h] at hz
  ¬∑ filter_upwards [hs.mem_nhds h]
    simp (config := { contextual := true }) [hz]
  ¬∑ refine Filter.eventually_of_forall fun x' => ?_
    by_cases h' : x' ‚àà s <;> simp [h', hz.trans_le hy, hz]
#align is_open.lower_semicontinuous_indicator IsOpen.lowerSemicontinuous_indicator

theorem IsOpen.lowerSemicontinuousOn_indicator (hs : IsOpen s) (hy : 0 ‚â§ y) :
    LowerSemicontinuousOn (indicator s fun _x => y) t :=
  (hs.lowerSemicontinuous_indicator hy).lowerSemicontinuousOn t
#align is_open.lower_semicontinuous_on_indicator IsOpen.lowerSemicontinuousOn_indicator

theorem IsOpen.lowerSemicontinuousAt_indicator (hs : IsOpen s) (hy : 0 ‚â§ y) :
    LowerSemicontinuousAt (indicator s fun _x => y) x :=
  (hs.lowerSemicontinuous_indicator hy).lowerSemicontinuousAt x
#align is_open.lower_semicontinuous_at_indicator IsOpen.lowerSemicontinuousAt_indicator

theorem IsOpen.lowerSemicontinuousWithinAt_indicator (hs : IsOpen s) (hy : 0 ‚â§ y) :
    LowerSemicontinuousWithinAt (indicator s fun _x => y) t x :=
  (hs.lowerSemicontinuous_indicator hy).lowerSemicontinuousWithinAt t x
#align is_open.lower_semicontinuous_within_at_indicator IsOpen.lowerSemicontinuousWithinAt_indicator

theorem IsClosed.lowerSemicontinuous_indicator (hs : IsClosed s) (hy : y ‚â§ 0) :
    LowerSemicontinuous (indicator s fun _x => y) := by
  intro x z hz
  by_cases h : x ‚àà s <;> simp [h] at hz
  ¬∑ refine Filter.eventually_of_forall fun x' => ?_
    by_cases h' : x' ‚àà s <;> simp [h', hz, hz.trans_le hy]
  ¬∑ filter_upwards [hs.isOpen_compl.mem_nhds h]
    simp (config := { contextual := true }) [hz]
#align is_closed.lower_semicontinuous_indicator IsClosed.lowerSemicontinuous_indicator

theorem IsClosed.lowerSemicontinuousOn_indicator (hs : IsClosed s) (hy : y ‚â§ 0) :
    LowerSemicontinuousOn (indicator s fun _x => y) t :=
  (hs.lowerSemicontinuous_indicator hy).lowerSemicontinuousOn t
#align is_closed.lower_semicontinuous_on_indicator IsClosed.lowerSemicontinuousOn_indicator

theorem IsClosed.lowerSemicontinuousAt_indicator (hs : IsClosed s) (hy : y ‚â§ 0) :
    LowerSemicontinuousAt (indicator s fun _x => y) x :=
  (hs.lowerSemicontinuous_indicator hy).lowerSemicontinuousAt x
#align is_closed.lower_semicontinuous_at_indicator IsClosed.lowerSemicontinuousAt_indicator

theorem IsClosed.lowerSemicontinuousWithinAt_indicator (hs : IsClosed s) (hy : y ‚â§ 0) :
    LowerSemicontinuousWithinAt (indicator s fun _x => y) t x :=
  (hs.lowerSemicontinuous_indicator hy).lowerSemicontinuousWithinAt t x
#align is_closed.lower_semicontinuous_within_at_indicator IsClosed.lowerSemicontinuousWithinAt_indicator

end

/-! #### Relationship with continuity -/


theorem lowerSemicontinuous_iff_isOpen_preimage :
    LowerSemicontinuous f ‚Üî ‚àÄ y, IsOpen (f ‚Åª¬π' Ioi y) :=
  ‚ü®fun H y => isOpen_iff_mem_nhds.2 fun x hx => H x y hx, fun H _x y y_lt =>
    IsOpen.mem_nhds (H y) y_lt‚ü©
#align lower_semicontinuous_iff_is_open_preimage lowerSemicontinuous_iff_isOpen_preimage

theorem LowerSemicontinuous.isOpen_preimage (hf : LowerSemicontinuous f) (y : Œ≤) :
    IsOpen (f ‚Åª¬π' Ioi y) :=
  lowerSemicontinuous_iff_isOpen_preimage.1 hf y
#align lower_semicontinuous.is_open_preimage LowerSemicontinuous.isOpen_preimage

section

variable {Œ≥ : Type*} [LinearOrder Œ≥]

theorem lowerSemicontinuous_iff_isClosed_preimage {f : Œ± ‚Üí Œ≥} :
    LowerSemicontinuous f ‚Üî ‚àÄ y, IsClosed (f ‚Åª¬π' Iic y) := by
  rw [lowerSemicontinuous_iff_isOpen_preimage]
  simp only [‚Üê isOpen_compl_iff, ‚Üê preimage_compl, compl_Iic]
#align lower_semicontinuous_iff_is_closed_preimage lowerSemicontinuous_iff_isClosed_preimage

theorem LowerSemicontinuous.isClosed_preimage {f : Œ± ‚Üí Œ≥} (hf : LowerSemicontinuous f) (y : Œ≥) :
    IsClosed (f ‚Åª¬π' Iic y) :=
  lowerSemicontinuous_iff_isClosed_preimage.1 hf y
#align lower_semicontinuous.is_closed_preimage LowerSemicontinuous.isClosed_preimage

variable [TopologicalSpace Œ≥] [OrderTopology Œ≥]

theorem ContinuousWithinAt.lowerSemicontinuousWithinAt {f : Œ± ‚Üí Œ≥} (h : ContinuousWithinAt f s x) :
    LowerSemicontinuousWithinAt f s x := fun _y hy => h (Ioi_mem_nhds hy)
#align continuous_within_at.lower_semicontinuous_within_at ContinuousWithinAt.lowerSemicontinuousWithinAt

theorem ContinuousAt.lowerSemicontinuousAt {f : Œ± ‚Üí Œ≥} (h : ContinuousAt f x) :
    LowerSemicontinuousAt f x := fun _y hy => h (Ioi_mem_nhds hy)
#align continuous_at.lower_semicontinuous_at ContinuousAt.lowerSemicontinuousAt

theorem ContinuousOn.lowerSemicontinuousOn {f : Œ± ‚Üí Œ≥} (h : ContinuousOn f s) :
    LowerSemicontinuousOn f s := fun x hx => (h x hx).lowerSemicontinuousWithinAt
#align continuous_on.lower_semicontinuous_on ContinuousOn.lowerSemicontinuousOn

theorem Continuous.lowerSemicontinuous {f : Œ± ‚Üí Œ≥} (h : Continuous f) : LowerSemicontinuous f :=
  fun _x => h.continuousAt.lowerSemicontinuousAt
#align continuous.lower_semicontinuous Continuous.lowerSemicontinuous

end

/-! #### Equivalent definitions -/

section

variable {Œ≥ : Type*} [CompleteLinearOrder Œ≥] [DenselyOrdered Œ≥]

theorem lowerSemicontinuousWithinAt_iff_le_liminf {f : Œ± ‚Üí Œ≥} :
    LowerSemicontinuousWithinAt f s x ‚Üî f x ‚â§ liminf f (ùìù[s] x) := by
  constructor
  ¬∑ intro hf; unfold LowerSemicontinuousWithinAt at hf
    contrapose! hf
    obtain ‚ü®y, lty, ylt‚ü© := exists_between hf; use y
    exact ‚ü®ylt, fun h => lty.not_le
      (le_liminf_of_le (by isBoundedDefault) (h.mono fun _ hx => le_of_lt hx))‚ü©
  exact fun hf y ylt => eventually_lt_of_lt_liminf (ylt.trans_le hf)

alias ‚ü®LowerSemicontinuousWithinAt.le_liminf, _‚ü© := lowerSemicontinuousWithinAt_iff_le_liminf

theorem lowerSemicontinuousAt_iff_le_liminf {f : Œ± ‚Üí Œ≥} :
    LowerSemicontinuousAt f x ‚Üî f x ‚â§ liminf f (ùìù x) := by
  rw [‚Üê lowerSemicontinuousWithinAt_univ_iff, lowerSemicontinuousWithinAt_iff_le_liminf,
    ‚Üê nhdsWithin_univ]

alias ‚ü®LowerSemicontinuousAt.le_liminf, _‚ü© := lowerSemicontinuousAt_iff_le_liminf

theorem lowerSemicontinuous_iff_le_liminf {f : Œ± ‚Üí Œ≥} :
    LowerSemicontinuous f ‚Üî ‚àÄ x, f x ‚â§ liminf f (ùìù x) := by
  simp only [‚Üê lowerSemicontinuousAt_iff_le_liminf, LowerSemicontinuous]

alias ‚ü®LowerSemicontinuous.le_liminf, _‚ü© := lowerSemicontinuous_iff_le_liminf

theorem lowerSemicontinuousOn_iff_le_liminf {f : Œ± ‚Üí Œ≥} :
    LowerSemicontinuousOn f s ‚Üî ‚àÄ x ‚àà s, f x ‚â§ liminf f (ùìù[s] x) := by
  simp only [‚Üê lowerSemicontinuousWithinAt_iff_le_liminf, LowerSemicontinuousOn]

alias ‚ü®LowerSemicontinuousOn.le_liminf, _‚ü© := lowerSemicontinuousOn_iff_le_liminf

variable [TopologicalSpace Œ≥] [OrderTopology Œ≥]

theorem lowerSemicontinuous_iff_isClosed_epigraph {f : Œ± ‚Üí Œ≥} :
    LowerSemicontinuous f ‚Üî IsClosed {p : Œ± √ó Œ≥ | f p.1 ‚â§ p.2} := by
  constructor
  ¬∑ rw [lowerSemicontinuous_iff_le_liminf, isClosed_iff_forall_filter]
    rintro hf ‚ü®x, y‚ü© F F_ne h h'
    rw [nhds_prod_eq, le_prod] at h'
    calc f x ‚â§ liminf f (ùìù x) := hf x
    _ ‚â§ liminf f (map Prod.fst F) := liminf_le_liminf_of_le h'.1
    _ = liminf (f ‚àò Prod.fst) F := (Filter.liminf_comp _ _ _).symm
    _ ‚â§ liminf Prod.snd F := liminf_le_liminf <| by
          simpa using (eventually_principal.2 fun (_ : Œ± √ó Œ≥) ‚Ü¶ id).filter_mono h
    _ = y := h'.2.liminf_eq
  ¬∑ rw [lowerSemicontinuous_iff_isClosed_preimage]
    exact fun hf y ‚Ü¶ hf.preimage (Continuous.Prod.mk_left y)

@[deprecated] -- 2024-03-02
alias lowerSemicontinuous_iff_IsClosed_epigraph := lowerSemicontinuous_iff_isClosed_epigraph

alias ‚ü®LowerSemicontinuous.isClosed_epigraph, _‚ü© := lowerSemicontinuous_iff_isClosed_epigraph

@[deprecated] -- 2024-03-02
alias LowerSemicontinuous.IsClosed_epigraph := LowerSemicontinuous.isClosed_epigraph

end

/-! ### Composition -/


section

variable {Œ≥ : Type*} [LinearOrder Œ≥] [TopologicalSpace Œ≥] [OrderTopology Œ≥]
variable {Œ¥ : Type*} [LinearOrder Œ¥] [TopologicalSpace Œ¥] [OrderTopology Œ¥]
variable {Œπ : Type*} [TopologicalSpace Œπ]

theorem ContinuousAt.comp_lowerSemicontinuousWithinAt {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥}
    (hg : ContinuousAt g (f x)) (hf : LowerSemicontinuousWithinAt f s x) (gmon : Monotone g) :
    LowerSemicontinuousWithinAt (g ‚àò f) s x := by
  intro y hy
  by_cases h : ‚àÉ l, l < f x
  ¬∑ obtain ‚ü®z, zlt, hz‚ü© : ‚àÉ z < f x, Ioc z (f x) ‚äÜ g ‚Åª¬π' Ioi y :=
      exists_Ioc_subset_of_mem_nhds (hg (Ioi_mem_nhds hy)) h
    filter_upwards [hf z zlt] with a ha
    calc
      y < g (min (f x) (f a)) := hz (by simp [zlt, ha, le_refl])
      _ ‚â§ g (f a) := gmon (min_le_right _ _)

  ¬∑ simp only [not_exists, not_lt] at h
    exact Filter.eventually_of_forall fun a => hy.trans_le (gmon (h (f a)))
#align continuous_at.comp_lower_semicontinuous_within_at ContinuousAt.comp_lowerSemicontinuousWithinAt

theorem ContinuousAt.comp_lowerSemicontinuousAt {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : ContinuousAt g (f x))
    (hf : LowerSemicontinuousAt f x) (gmon : Monotone g) : LowerSemicontinuousAt (g ‚àò f) x := by
  simp only [‚Üê lowerSemicontinuousWithinAt_univ_iff] at hf ‚ä¢
  exact hg.comp_lowerSemicontinuousWithinAt hf gmon
#align continuous_at.comp_lower_semicontinuous_at ContinuousAt.comp_lowerSemicontinuousAt

theorem Continuous.comp_lowerSemicontinuousOn {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : Continuous g)
    (hf : LowerSemicontinuousOn f s) (gmon : Monotone g) : LowerSemicontinuousOn (g ‚àò f) s :=
  fun x hx => hg.continuousAt.comp_lowerSemicontinuousWithinAt (hf x hx) gmon
#align continuous.comp_lower_semicontinuous_on Continuous.comp_lowerSemicontinuousOn

theorem Continuous.comp_lowerSemicontinuous {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : Continuous g)
    (hf : LowerSemicontinuous f) (gmon : Monotone g) : LowerSemicontinuous (g ‚àò f) := fun x =>
  hg.continuousAt.comp_lowerSemicontinuousAt (hf x) gmon
#align continuous.comp_lower_semicontinuous Continuous.comp_lowerSemicontinuous

theorem ContinuousAt.comp_lowerSemicontinuousWithinAt_antitone {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥}
    (hg : ContinuousAt g (f x)) (hf : LowerSemicontinuousWithinAt f s x) (gmon : Antitone g) :
    UpperSemicontinuousWithinAt (g ‚àò f) s x :=
  @ContinuousAt.comp_lowerSemicontinuousWithinAt Œ± _ x s Œ≥ _ _ _ Œ¥·µí·µà _ _ _ g f hg hf gmon
#align continuous_at.comp_lower_semicontinuous_within_at_antitone ContinuousAt.comp_lowerSemicontinuousWithinAt_antitone

theorem ContinuousAt.comp_lowerSemicontinuousAt_antitone {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥}
    (hg : ContinuousAt g (f x)) (hf : LowerSemicontinuousAt f x) (gmon : Antitone g) :
    UpperSemicontinuousAt (g ‚àò f) x :=
  @ContinuousAt.comp_lowerSemicontinuousAt Œ± _ x Œ≥ _ _ _ Œ¥·µí·µà _ _ _ g f hg hf gmon
#align continuous_at.comp_lower_semicontinuous_at_antitone ContinuousAt.comp_lowerSemicontinuousAt_antitone

theorem Continuous.comp_lowerSemicontinuousOn_antitone {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : Continuous g)
    (hf : LowerSemicontinuousOn f s) (gmon : Antitone g) : UpperSemicontinuousOn (g ‚àò f) s :=
  fun x hx => hg.continuousAt.comp_lowerSemicontinuousWithinAt_antitone (hf x hx) gmon
#align continuous.comp_lower_semicontinuous_on_antitone Continuous.comp_lowerSemicontinuousOn_antitone

theorem Continuous.comp_lowerSemicontinuous_antitone {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : Continuous g)
    (hf : LowerSemicontinuous f) (gmon : Antitone g) : UpperSemicontinuous (g ‚àò f) := fun x =>
  hg.continuousAt.comp_lowerSemicontinuousAt_antitone (hf x) gmon
#align continuous.comp_lower_semicontinuous_antitone Continuous.comp_lowerSemicontinuous_antitone

theorem LowerSemicontinuousAt.comp_continuousAt {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±} {x : Œπ}
    (hf : LowerSemicontinuousAt f (g x)) (hg : ContinuousAt g x) :
    LowerSemicontinuousAt (fun x ‚Ü¶ f (g x)) x :=
  fun _ lt ‚Ü¶ hg.eventually (hf _ lt)

theorem LowerSemicontinuousAt.comp_continuousAt_of_eq {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±} {y : Œ±} {x : Œπ}
    (hf : LowerSemicontinuousAt f y) (hg : ContinuousAt g x) (hy : g x = y) :
    LowerSemicontinuousAt (fun x ‚Ü¶ f (g x)) x := by
  rw [‚Üê hy] at hf
  exact comp_continuousAt hf hg

theorem LowerSemicontinuous.comp_continuous {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (hf : LowerSemicontinuous f) (hg : Continuous g) : LowerSemicontinuous fun x ‚Ü¶ f (g x) :=
  fun x ‚Ü¶ (hf (g x)).comp_continuousAt hg.continuousAt

end

/-! #### Addition -/


section

variable {Œπ : Type*} {Œ≥ : Type*} [LinearOrderedAddCommMonoid Œ≥] [TopologicalSpace Œ≥]
  [OrderTopology Œ≥]

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `EReal`. The unprimed version of
the lemma uses `[ContinuousAdd]`. -/
theorem LowerSemicontinuousWithinAt.add' {f g : Œ± ‚Üí Œ≥} (hf : LowerSemicontinuousWithinAt f s x)
    (hg : LowerSemicontinuousWithinAt g s x)
    (hcont : ContinuousAt (fun p : Œ≥ √ó Œ≥ => p.1 + p.2) (f x, g x)) :
    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by
  intro y hy
  obtain ‚ü®u, v, u_open, xu, v_open, xv, h‚ü© :
    ‚àÉ u v : Set Œ≥,
      IsOpen u ‚àß f x ‚àà u ‚àß IsOpen v ‚àß g x ‚àà v ‚àß u √óÀ¢ v ‚äÜ { p : Œ≥ √ó Œ≥ | y < p.fst + p.snd } :=
    mem_nhds_prod_iff'.1 (hcont (isOpen_Ioi.mem_nhds hy))
  by_cases hx‚ÇÅ : ‚àÉ l, l < f x
  ¬∑ obtain ‚ü®z‚ÇÅ, z‚ÇÅlt, h‚ÇÅ‚ü© : ‚àÉ z‚ÇÅ < f x, Ioc z‚ÇÅ (f x) ‚äÜ u :=
      exists_Ioc_subset_of_mem_nhds (u_open.mem_nhds xu) hx‚ÇÅ
    by_cases hx‚ÇÇ : ‚àÉ l, l < g x
    ¬∑ obtain ‚ü®z‚ÇÇ, z‚ÇÇlt, h‚ÇÇ‚ü© : ‚àÉ z‚ÇÇ < g x, Ioc z‚ÇÇ (g x) ‚äÜ v :=
        exists_Ioc_subset_of_mem_nhds (v_open.mem_nhds xv) hx‚ÇÇ
      filter_upwards [hf z‚ÇÅ z‚ÇÅlt, hg z‚ÇÇ z‚ÇÇlt] with z h‚ÇÅz h‚ÇÇz
      have A1 : min (f z) (f x) ‚àà u := by
        by_cases H : f z ‚â§ f x
        ¬∑ simp [H]
          exact h‚ÇÅ ‚ü®h‚ÇÅz, H‚ü©
        ¬∑ simp [le_of_not_le H]
          exact h‚ÇÅ ‚ü®z‚ÇÅlt, le_rfl‚ü©
      have A2 : min (g z) (g x) ‚àà v := by
        by_cases H : g z ‚â§ g x
        ¬∑ simp [H]
          exact h‚ÇÇ ‚ü®h‚ÇÇz, H‚ü©
        ¬∑ simp [le_of_not_le H]
          exact h‚ÇÇ ‚ü®z‚ÇÇlt, le_rfl‚ü©
      have : (min (f z) (f x), min (g z) (g x)) ‚àà u √óÀ¢ v := ‚ü®A1, A2‚ü©
      calc
        y < min (f z) (f x) + min (g z) (g x) := h this
        _ ‚â§ f z + g z := add_le_add (min_le_left _ _) (min_le_left _ _)

    ¬∑ simp only [not_exists, not_lt] at hx‚ÇÇ
      filter_upwards [hf z‚ÇÅ z‚ÇÅlt] with z h‚ÇÅz
      have A1 : min (f z) (f x) ‚àà u := by
        by_cases H : f z ‚â§ f x
        ¬∑ simp [H]
          exact h‚ÇÅ ‚ü®h‚ÇÅz, H‚ü©
        ¬∑ simp [le_of_not_le H]
          exact h‚ÇÅ ‚ü®z‚ÇÅlt, le_rfl‚ü©
      have : (min (f z) (f x), g x) ‚àà u √óÀ¢ v := ‚ü®A1, xv‚ü©
      calc
        y < min (f z) (f x) + g x := h this
        _ ‚â§ f z + g z := add_le_add (min_le_left _ _) (hx‚ÇÇ (g z))

  ¬∑ simp only [not_exists, not_lt] at hx‚ÇÅ
    by_cases hx‚ÇÇ : ‚àÉ l, l < g x
    ¬∑ obtain ‚ü®z‚ÇÇ, z‚ÇÇlt, h‚ÇÇ‚ü© : ‚àÉ z‚ÇÇ < g x, Ioc z‚ÇÇ (g x) ‚äÜ v :=
        exists_Ioc_subset_of_mem_nhds (v_open.mem_nhds xv) hx‚ÇÇ
      filter_upwards [hg z‚ÇÇ z‚ÇÇlt] with z h‚ÇÇz
      have A2 : min (g z) (g x) ‚àà v := by
        by_cases H : g z ‚â§ g x
        ¬∑ simp [H]
          exact h‚ÇÇ ‚ü®h‚ÇÇz, H‚ü©
        ¬∑ simp [le_of_not_le H]
          exact h‚ÇÇ ‚ü®z‚ÇÇlt, le_rfl‚ü©
      have : (f x, min (g z) (g x)) ‚àà u √óÀ¢ v := ‚ü®xu, A2‚ü©
      calc
        y < f x + min (g z) (g x) := h this
        _ ‚â§ f z + g z := add_le_add (hx‚ÇÅ (f z)) (min_le_left _ _)
    ¬∑ simp only [not_exists, not_lt] at hx‚ÇÅ hx‚ÇÇ
      apply Filter.eventually_of_forall
      intro z
      have : (f x, g x) ‚àà u √óÀ¢ v := ‚ü®xu, xv‚ü©
      calc
        y < f x + g x := h this
        _ ‚â§ f z + g z := add_le_add (hx‚ÇÅ (f z)) (hx‚ÇÇ (g z))
#align lower_semicontinuous_within_at.add' LowerSemicontinuousWithinAt.add'

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `EReal`. The unprimed version of
the lemma uses `[ContinuousAdd]`. -/
theorem LowerSemicontinuousAt.add' {f g : Œ± ‚Üí Œ≥} (hf : LowerSemicontinuousAt f x)
    (hg : LowerSemicontinuousAt g x)
    (hcont : ContinuousAt (fun p : Œ≥ √ó Œ≥ => p.1 + p.2) (f x, g x)) :
    LowerSemicontinuousAt (fun z => f z + g z) x := by
  simp_rw [‚Üê lowerSemicontinuousWithinAt_univ_iff] at *
  exact hf.add' hg hcont
#align lower_semicontinuous_at.add' LowerSemicontinuousAt.add'

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `EReal`. The unprimed version of
the lemma uses `[ContinuousAdd]`. -/
theorem LowerSemicontinuousOn.add' {f g : Œ± ‚Üí Œ≥} (hf : LowerSemicontinuousOn f s)
    (hg : LowerSemicontinuousOn g s)
    (hcont : ‚àÄ x ‚àà s, ContinuousAt (fun p : Œ≥ √ó Œ≥ => p.1 + p.2) (f x, g x)) :
    LowerSemicontinuousOn (fun z => f z + g z) s := fun x hx =>
  (hf x hx).add' (hg x hx) (hcont x hx)
#align lower_semicontinuous_on.add' LowerSemicontinuousOn.add'

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `EReal`. The unprimed version of
the lemma uses `[ContinuousAdd]`. -/
theorem LowerSemicontinuous.add' {f g : Œ± ‚Üí Œ≥} (hf : LowerSemicontinuous f)
    (hg : LowerSemicontinuous g)
    (hcont : ‚àÄ x, ContinuousAt (fun p : Œ≥ √ó Œ≥ => p.1 + p.2) (f x, g x)) :
    LowerSemicontinuous fun z => f z + g z := fun x => (hf x).add' (hg x) (hcont x)
#align lower_semicontinuous.add' LowerSemicontinuous.add'

variable [ContinuousAdd Œ≥]

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with
`[ContinuousAdd]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `EReal`. -/
theorem LowerSemicontinuousWithinAt.add {f g : Œ± ‚Üí Œ≥} (hf : LowerSemicontinuousWithinAt f s x)
    (hg : LowerSemicontinuousWithinAt g s x) :
    LowerSemicontinuousWithinAt (fun z => f z + g z) s x :=
  hf.add' hg continuous_add.continuousAt
#align lower_semicontinuous_within_at.add LowerSemicontinuousWithinAt.add

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with
`[ContinuousAdd]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `EReal`. -/
theorem LowerSemicontinuousAt.add {f g : Œ± ‚Üí Œ≥} (hf : LowerSemicontinuousAt f x)
    (hg : LowerSemicontinuousAt g x) : LowerSemicontinuousAt (fun z => f z + g z) x :=
  hf.add' hg continuous_add.continuousAt
#align lower_semicontinuous_at.add LowerSemicontinuousAt.add

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with
`[ContinuousAdd]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `EReal`. -/
theorem LowerSemicontinuousOn.add {f g : Œ± ‚Üí Œ≥} (hf : LowerSemicontinuousOn f s)
    (hg : LowerSemicontinuousOn g s) : LowerSemicontinuousOn (fun z => f z + g z) s :=
  hf.add' hg fun _x _hx => continuous_add.continuousAt
#align lower_semicontinuous_on.add LowerSemicontinuousOn.add

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with
`[ContinuousAdd]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `EReal`. -/
theorem LowerSemicontinuous.add {f g : Œ± ‚Üí Œ≥} (hf : LowerSemicontinuous f)
    (hg : LowerSemicontinuous g) : LowerSemicontinuous fun z => f z + g z :=
  hf.add' hg fun _x => continuous_add.continuousAt
#align lower_semicontinuous.add LowerSemicontinuous.add

theorem lowerSemicontinuousWithinAt_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : Finset Œπ}
    (ha : ‚àÄ i ‚àà a, LowerSemicontinuousWithinAt (f i) s x) :
    LowerSemicontinuousWithinAt (fun z => ‚àë i in a, f i z) s x := by
  classical
    induction' a using Finset.induction_on with i a ia IH
    ¬∑ exact lowerSemicontinuousWithinAt_const
    ¬∑ simp only [ia, Finset.sum_insert, not_false_iff]
      exact
        LowerSemicontinuousWithinAt.add (ha _ (Finset.mem_insert_self i a))
          (IH fun j ja => ha j (Finset.mem_insert_of_mem ja))
#align lower_semicontinuous_within_at_sum lowerSemicontinuousWithinAt_sum

theorem lowerSemicontinuousAt_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : Finset Œπ}
    (ha : ‚àÄ i ‚àà a, LowerSemicontinuousAt (f i) x) :
    LowerSemicontinuousAt (fun z => ‚àë i in a, f i z) x := by
  simp_rw [‚Üê lowerSemicontinuousWithinAt_univ_iff] at *
  exact lowerSemicontinuousWithinAt_sum ha
#align lower_semicontinuous_at_sum lowerSemicontinuousAt_sum

theorem lowerSemicontinuousOn_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : Finset Œπ}
    (ha : ‚àÄ i ‚àà a, LowerSemicontinuousOn (f i) s) :
    LowerSemicontinuousOn (fun z => ‚àë i in a, f i z) s := fun x hx =>
  lowerSemicontinuousWithinAt_sum fun i hi => ha i hi x hx
#align lower_semicontinuous_on_sum lowerSemicontinuousOn_sum

theorem lowerSemicontinuous_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : Finset Œπ}
    (ha : ‚àÄ i ‚àà a, LowerSemicontinuous (f i)) : LowerSemicontinuous fun z => ‚àë i in a, f i z :=
  fun x => lowerSemicontinuousAt_sum fun i hi => ha i hi x
#align lower_semicontinuous_sum lowerSemicontinuous_sum

end

/-! #### Supremum -/


section

variable {Œπ : Sort*} {Œ¥ Œ¥' : Type*} [CompleteLinearOrder Œ¥] [ConditionallyCompleteLinearOrder Œ¥']

theorem lowerSemicontinuousWithinAt_ciSup {f : Œπ ‚Üí Œ± ‚Üí Œ¥'}
    (bdd : ‚àÄ·∂† y in ùìù[s] x, BddAbove (range fun i => f i y))
    (h : ‚àÄ i, LowerSemicontinuousWithinAt (f i) s x) :
    LowerSemicontinuousWithinAt (fun x' => ‚®Ü i, f i x') s x := by
  cases isEmpty_or_nonempty Œπ
  ¬∑ simpa only [iSup_of_empty'] using lowerSemicontinuousWithinAt_const
  ¬∑ intro y hy
    rcases exists_lt_of_lt_ciSup hy with ‚ü®i, hi‚ü©
    filter_upwards [h i y hi, bdd] with y hy hy' using hy.trans_le (le_ciSup hy' i)
#align lower_semicontinuous_within_at_csupr lowerSemicontinuousWithinAt_ciSup

theorem lowerSemicontinuousWithinAt_iSup {f : Œπ ‚Üí Œ± ‚Üí Œ¥}
    (h : ‚àÄ i, LowerSemicontinuousWithinAt (f i) s x) :
    LowerSemicontinuousWithinAt (fun x' => ‚®Ü i, f i x') s x :=
  lowerSemicontinuousWithinAt_ciSup (by simp) h
#align lower_semicontinuous_within_at_supr lowerSemicontinuousWithinAt_iSup

theorem lowerSemicontinuousWithinAt_biSup {p : Œπ ‚Üí Prop} {f : ‚àÄ i, p i ‚Üí Œ± ‚Üí Œ¥}
    (h : ‚àÄ i hi, LowerSemicontinuousWithinAt (f i hi) s x) :
    LowerSemicontinuousWithinAt (fun x' => ‚®Ü (i) (hi), f i hi x') s x :=
  lowerSemicontinuousWithinAt_iSup fun i => lowerSemicontinuousWithinAt_iSup fun hi => h i hi
#align lower_semicontinuous_within_at_bsupr lowerSemicontinuousWithinAt_biSup

theorem lowerSemicontinuousAt_ciSup {f : Œπ ‚Üí Œ± ‚Üí Œ¥'}
    (bdd : ‚àÄ·∂† y in ùìù x, BddAbove (range fun i => f i y)) (h : ‚àÄ i, LowerSemicontinuousAt (f i) x) :
    LowerSemicontinuousAt (fun x' => ‚®Ü i, f i x') x := by
  simp_rw [‚Üê lowerSemicontinuousWithinAt_univ_iff] at *
  rw [‚Üê nhdsWithin_univ] at bdd
  exact lowerSemicontinuousWithinAt_ciSup bdd h
#align lower_semicontinuous_at_csupr lowerSemicontinuousAt_ciSup

theorem lowerSemicontinuousAt_iSup {f : Œπ ‚Üí Œ± ‚Üí Œ¥} (h : ‚àÄ i, LowerSemicontinuousAt (f i) x) :
    LowerSemicontinuousAt (fun x' => ‚®Ü i, f i x') x :=
  lowerSemicontinuousAt_ciSup (by simp) h
#align lower_semicontinuous_at_supr lowerSemicontinuousAt_iSup

theorem lowerSemicontinuousAt_biSup {p : Œπ ‚Üí Prop} {f : ‚àÄ i, p i ‚Üí Œ± ‚Üí Œ¥}
    (h : ‚àÄ i hi, LowerSemicontinuousAt (f i hi) x) :
    LowerSemicontinuousAt (fun x' => ‚®Ü (i) (hi), f i hi x') x :=
  lowerSemicontinuousAt_iSup fun i => lowerSemicontinuousAt_iSup fun hi => h i hi
#align lower_semicontinuous_at_bsupr lowerSemicontinuousAt_biSup

theorem lowerSemicontinuousOn_ciSup {f : Œπ ‚Üí Œ± ‚Üí Œ¥'}
    (bdd : ‚àÄ x ‚àà s, BddAbove (range fun i => f i x)) (h : ‚àÄ i, LowerSemicontinuousOn (f i) s) :
    LowerSemicontinuousOn (fun x' => ‚®Ü i, f i x') s := fun x hx =>
  lowerSemicontinuousWithinAt_ciSup (eventually_nhdsWithin_of_forall bdd) fun i => h i x hx
#align lower_semicontinuous_on_csupr lowerSemicontinuousOn_ciSup

theorem lowerSemicontinuousOn_iSup {f : Œπ ‚Üí Œ± ‚Üí Œ¥} (h : ‚àÄ i, LowerSemicontinuousOn (f i) s) :
    LowerSemicontinuousOn (fun x' => ‚®Ü i, f i x') s :=
  lowerSemicontinuousOn_ciSup (by simp) h
#align lower_semicontinuous_on_supr lowerSemicontinuousOn_iSup

theorem lowerSemicontinuousOn_biSup {p : Œπ ‚Üí Prop} {f : ‚àÄ i, p i ‚Üí Œ± ‚Üí Œ¥}
    (h : ‚àÄ i hi, LowerSemicontinuousOn (f i hi) s) :
    LowerSemicontinuousOn (fun x' => ‚®Ü (i) (hi), f i hi x') s :=
  lowerSemicontinuousOn_iSup fun i => lowerSemicontinuousOn_iSup fun hi => h i hi
#align lower_semicontinuous_on_bsupr lowerSemicontinuousOn_biSup

theorem lowerSemicontinuous_ciSup {f : Œπ ‚Üí Œ± ‚Üí Œ¥'} (bdd : ‚àÄ x, BddAbove (range fun i => f i x))
    (h : ‚àÄ i, LowerSemicontinuous (f i)) : LowerSemicontinuous fun x' => ‚®Ü i, f i x' := fun x =>
  lowerSemicontinuousAt_ciSup (eventually_of_forall bdd) fun i => h i x
#align lower_semicontinuous_csupr lowerSemicontinuous_ciSup

theorem lowerSemicontinuous_iSup {f : Œπ ‚Üí Œ± ‚Üí Œ¥} (h : ‚àÄ i, LowerSemicontinuous (f i)) :
    LowerSemicontinuous fun x' => ‚®Ü i, f i x' :=
  lowerSemicontinuous_ciSup (by simp) h
#align lower_semicontinuous_supr lowerSemicontinuous_iSup

theorem lowerSemicontinuous_biSup {p : Œπ ‚Üí Prop} {f : ‚àÄ i, p i ‚Üí Œ± ‚Üí Œ¥}
    (h : ‚àÄ i hi, LowerSemicontinuous (f i hi)) :
    LowerSemicontinuous fun x' => ‚®Ü (i) (hi), f i hi x' :=
  lowerSemicontinuous_iSup fun i => lowerSemicontinuous_iSup fun hi => h i hi
#align lower_semicontinuous_bsupr lowerSemicontinuous_biSup

end

/-! #### Infinite sums -/


section

variable {Œπ : Type*}

theorem lowerSemicontinuousWithinAt_tsum {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû}
    (h : ‚àÄ i, LowerSemicontinuousWithinAt (f i) s x) :
    LowerSemicontinuousWithinAt (fun x' => ‚àë' i, f i x') s x := by
  simp_rw [ENNReal.tsum_eq_iSup_sum]
  refine lowerSemicontinuousWithinAt_iSup fun b => ?_
  exact lowerSemicontinuousWithinAt_sum fun i _hi => h i
#align lower_semicontinuous_within_at_tsum lowerSemicontinuousWithinAt_tsum

theorem lowerSemicontinuousAt_tsum {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû} (h : ‚àÄ i, LowerSemicontinuousAt (f i) x) :
    LowerSemicontinuousAt (fun x' => ‚àë' i, f i x') x := by
  simp_rw [‚Üê lowerSemicontinuousWithinAt_univ_iff] at *
  exact lowerSemicontinuousWithinAt_tsum h
#align lower_semicontinuous_at_tsum lowerSemicontinuousAt_tsum

theorem lowerSemicontinuousOn_tsum {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû} (h : ‚àÄ i, LowerSemicontinuousOn (f i) s) :
    LowerSemicontinuousOn (fun x' => ‚àë' i, f i x') s := fun x hx =>
  lowerSemicontinuousWithinAt_tsum fun i => h i x hx
#align lower_semicontinuous_on_tsum lowerSemicontinuousOn_tsum

theorem lowerSemicontinuous_tsum {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû} (h : ‚àÄ i, LowerSemicontinuous (f i)) :
    LowerSemicontinuous fun x' => ‚àë' i, f i x' := fun x => lowerSemicontinuousAt_tsum fun i => h i x
#align lower_semicontinuous_tsum lowerSemicontinuous_tsum

end

/-!
### Upper semicontinuous functions
-/


/-! #### Basic dot notation interface for upper semicontinuity -/


theorem UpperSemicontinuousWithinAt.mono (h : UpperSemicontinuousWithinAt f s x) (hst : t ‚äÜ s) :
    UpperSemicontinuousWithinAt f t x := fun y hy =>
  Filter.Eventually.filter_mono (nhdsWithin_mono _ hst) (h y hy)
#align upper_semicontinuous_within_at.mono UpperSemicontinuousWithinAt.mono

theorem upperSemicontinuousWithinAt_univ_iff :
    UpperSemicontinuousWithinAt f univ x ‚Üî UpperSemicontinuousAt f x := by
  simp [UpperSemicontinuousWithinAt, UpperSemicontinuousAt, nhdsWithin_univ]
#align upper_semicontinuous_within_at_univ_iff upperSemicontinuousWithinAt_univ_iff

theorem UpperSemicontinuousAt.upperSemicontinuousWithinAt (s : Set Œ±)
    (h : UpperSemicontinuousAt f x) : UpperSemicontinuousWithinAt f s x := fun y hy =>
  Filter.Eventually.filter_mono nhdsWithin_le_nhds (h y hy)
#align upper_semicontinuous_at.upper_semicontinuous_within_at UpperSemicontinuousAt.upperSemicontinuousWithinAt

theorem UpperSemicontinuousOn.upperSemicontinuousWithinAt (h : UpperSemicontinuousOn f s)
    (hx : x ‚àà s) : UpperSemicontinuousWithinAt f s x :=
  h x hx
#align upper_semicontinuous_on.upper_semicontinuous_within_at UpperSemicontinuousOn.upperSemicontinuousWithinAt

theorem UpperSemicontinuousOn.mono (h : UpperSemicontinuousOn f s) (hst : t ‚äÜ s) :
    UpperSemicontinuousOn f t := fun x hx => (h x (hst hx)).mono hst
#align upper_semicontinuous_on.mono UpperSemicontinuousOn.mono

theorem upperSemicontinuousOn_univ_iff : UpperSemicontinuousOn f univ ‚Üî UpperSemicontinuous f := by
  simp [UpperSemicontinuousOn, UpperSemicontinuous, upperSemicontinuousWithinAt_univ_iff]
#align upper_semicontinuous_on_univ_iff upperSemicontinuousOn_univ_iff

theorem UpperSemicontinuous.upperSemicontinuousAt (h : UpperSemicontinuous f) (x : Œ±) :
    UpperSemicontinuousAt f x :=
  h x
#align upper_semicontinuous.upper_semicontinuous_at UpperSemicontinuous.upperSemicontinuousAt

theorem UpperSemicontinuous.upperSemicontinuousWithinAt (h : UpperSemicontinuous f) (s : Set Œ±)
    (x : Œ±) : UpperSemicontinuousWithinAt f s x :=
  (h x).upperSemicontinuousWithinAt s
#align upper_semicontinuous.upper_semicontinuous_within_at UpperSemicontinuous.upperSemicontinuousWithinAt

theorem UpperSemicontinuous.upperSemicontinuousOn (h : UpperSemicontinuous f) (s : Set Œ±) :
    UpperSemicontinuousOn f s := fun x _hx => h.upperSemicontinuousWithinAt s x
#align upper_semicontinuous.upper_semicontinuous_on UpperSemicontinuous.upperSemicontinuousOn

/-! #### Constants -/


theorem upperSemicontinuousWithinAt_const : UpperSemicontinuousWithinAt (fun _x => z) s x :=
  fun _y hy => Filter.eventually_of_forall fun _x => hy
#align upper_semicontinuous_within_at_const upperSemicontinuousWithinAt_const

theorem upperSemicontinuousAt_const : UpperSemicontinuousAt (fun _x => z) x := fun _y hy =>
  Filter.eventually_of_forall fun _x => hy
#align upper_semicontinuous_at_const upperSemicontinuousAt_const

theorem upperSemicontinuousOn_const : UpperSemicontinuousOn (fun _x => z) s := fun _x _hx =>
  upperSemicontinuousWithinAt_const
#align upper_semicontinuous_on_const upperSemicontinuousOn_const

theorem upperSemicontinuous_const : UpperSemicontinuous fun _x : Œ± => z := fun _x =>
  upperSemicontinuousAt_const
#align upper_semicontinuous_const upperSemicontinuous_const

/-! #### Indicators -/


section

variable [Zero Œ≤]

theorem IsOpen.upperSemicontinuous_indicator (hs : IsOpen s) (hy : y ‚â§ 0) :
    UpperSemicontinuous (indicator s fun _x => y) :=
  @IsOpen.lowerSemicontinuous_indicator Œ± _ Œ≤·µí·µà _ s y _ hs hy
#align is_open.upper_semicontinuous_indicator IsOpen.upperSemicontinuous_indicator

theorem IsOpen.upperSemicontinuousOn_indicator (hs : IsOpen s) (hy : y ‚â§ 0) :
    UpperSemicontinuousOn (indicator s fun _x => y) t :=
  (hs.upperSemicontinuous_indicator hy).upperSemicontinuousOn t
#align is_open.upper_semicontinuous_on_indicator IsOpen.upperSemicontinuousOn_indicator

theorem IsOpen.upperSemicontinuousAt_indicator (hs : IsOpen s) (hy : y ‚â§ 0) :
    UpperSemicontinuousAt (indicator s fun _x => y) x :=
  (hs.upperSemicontinuous_indicator hy).upperSemicontinuousAt x
#align is_open.upper_semicontinuous_at_indicator IsOpen.upperSemicontinuousAt_indicator

theorem IsOpen.upperSemicontinuousWithinAt_indicator (hs : IsOpen s) (hy : y ‚â§ 0) :
    UpperSemicontinuousWithinAt (indicator s fun _x => y) t x :=
  (hs.upperSemicontinuous_indicator hy).upperSemicontinuousWithinAt t x
#align is_open.upper_semicontinuous_within_at_indicator IsOpen.upperSemicontinuousWithinAt_indicator

theorem IsClosed.upperSemicontinuous_indicator (hs : IsClosed s) (hy : 0 ‚â§ y) :
    UpperSemicontinuous (indicator s fun _x => y) :=
  @IsClosed.lowerSemicontinuous_indicator Œ± _ Œ≤·µí·µà _ s y _ hs hy
#align is_closed.upper_semicontinuous_indicator IsClosed.upperSemicontinuous_indicator

theorem IsClosed.upperSemicontinuousOn_indicator (hs : IsClosed s) (hy : 0 ‚â§ y) :
    UpperSemicontinuousOn (indicator s fun _x => y) t :=
  (hs.upperSemicontinuous_indicator hy).upperSemicontinuousOn t
#align is_closed.upper_semicontinuous_on_indicator IsClosed.upperSemicontinuousOn_indicator

theorem IsClosed.upperSemicontinuousAt_indicator (hs : IsClosed s) (hy : 0 ‚â§ y) :
    UpperSemicontinuousAt (indicator s fun _x => y) x :=
  (hs.upperSemicontinuous_indicator hy).upperSemicontinuousAt x
#align is_closed.upper_semicontinuous_at_indicator IsClosed.upperSemicontinuousAt_indicator

theorem IsClosed.upperSemicontinuousWithinAt_indicator (hs : IsClosed s) (hy : 0 ‚â§ y) :
    UpperSemicontinuousWithinAt (indicator s fun _x => y) t x :=
  (hs.upperSemicontinuous_indicator hy).upperSemicontinuousWithinAt t x
#align is_closed.upper_semicontinuous_within_at_indicator IsClosed.upperSemicontinuousWithinAt_indicator

end

/-! #### Relationship with continuity -/


theorem upperSemicontinuous_iff_isOpen_preimage :
    UpperSemicontinuous f ‚Üî ‚àÄ y, IsOpen (f ‚Åª¬π' Iio y) :=
  ‚ü®fun H y => isOpen_iff_mem_nhds.2 fun x hx => H x y hx, fun H _x y y_lt =>
    IsOpen.mem_nhds (H y) y_lt‚ü©
#align upper_semicontinuous_iff_is_open_preimage upperSemicontinuous_iff_isOpen_preimage

theorem UpperSemicontinuous.isOpen_preimage (hf : UpperSemicontinuous f) (y : Œ≤) :
    IsOpen (f ‚Åª¬π' Iio y) :=
  upperSemicontinuous_iff_isOpen_preimage.1 hf y
#align upper_semicontinuous.is_open_preimage UpperSemicontinuous.isOpen_preimage

section

variable {Œ≥ : Type*} [LinearOrder Œ≥]

theorem upperSemicontinuous_iff_isClosed_preimage {f : Œ± ‚Üí Œ≥} :
    UpperSemicontinuous f ‚Üî ‚àÄ y, IsClosed (f ‚Åª¬π' Ici y) := by
  rw [upperSemicontinuous_iff_isOpen_preimage]
  simp only [‚Üê isOpen_compl_iff, ‚Üê preimage_compl, compl_Ici]
#align upper_semicontinuous_iff_is_closed_preimage upperSemicontinuous_iff_isClosed_preimage

theorem UpperSemicontinuous.isClosed_preimage {f : Œ± ‚Üí Œ≥} (hf : UpperSemicontinuous f) (y : Œ≥) :
    IsClosed (f ‚Åª¬π' Ici y) :=
  upperSemicontinuous_iff_isClosed_preimage.1 hf y
#align upper_semicontinuous.is_closed_preimage UpperSemicontinuous.isClosed_preimage

variable [TopologicalSpace Œ≥] [OrderTopology Œ≥]

theorem ContinuousWithinAt.upperSemicontinuousWithinAt {f : Œ± ‚Üí Œ≥} (h : ContinuousWithinAt f s x) :
    UpperSemicontinuousWithinAt f s x := fun _y hy => h (Iio_mem_nhds hy)
#align continuous_within_at.upper_semicontinuous_within_at ContinuousWithinAt.upperSemicontinuousWithinAt

theorem ContinuousAt.upperSemicontinuousAt {f : Œ± ‚Üí Œ≥} (h : ContinuousAt f x) :
    UpperSemicontinuousAt f x := fun _y hy => h (Iio_mem_nhds hy)
#align continuous_at.upper_semicontinuous_at ContinuousAt.upperSemicontinuousAt

theorem ContinuousOn.upperSemicontinuousOn {f : Œ± ‚Üí Œ≥} (h : ContinuousOn f s) :
    UpperSemicontinuousOn f s := fun x hx => (h x hx).upperSemicontinuousWithinAt
#align continuous_on.upper_semicontinuous_on ContinuousOn.upperSemicontinuousOn

theorem Continuous.upperSemicontinuous {f : Œ± ‚Üí Œ≥} (h : Continuous f) : UpperSemicontinuous f :=
  fun _x => h.continuousAt.upperSemicontinuousAt
#align continuous.upper_semicontinuous Continuous.upperSemicontinuous

end

/-! #### Equivalent definitions -/

section

variable {Œ≥ : Type*} [CompleteLinearOrder Œ≥] [DenselyOrdered Œ≥]

theorem upperSemicontinuousWithinAt_iff_limsup_le {f : Œ± ‚Üí Œ≥} :
    UpperSemicontinuousWithinAt f s x ‚Üî limsup f (ùìù[s] x) ‚â§ f x :=
  lowerSemicontinuousWithinAt_iff_le_liminf (Œ≥ := Œ≥·µí·µà)

alias ‚ü®UpperSemicontinuousWithinAt.limsup_le, _‚ü© := upperSemicontinuousWithinAt_iff_limsup_le

theorem upperSemicontinuousAt_iff_limsup_le {f : Œ± ‚Üí Œ≥} :
    UpperSemicontinuousAt f x ‚Üî limsup f (ùìù x) ‚â§ f x :=
  lowerSemicontinuousAt_iff_le_liminf (Œ≥ := Œ≥·µí·µà)

alias ‚ü®UpperSemicontinuousAt.limsup_le, _‚ü© := upperSemicontinuousAt_iff_limsup_le

theorem upperSemicontinuous_iff_limsup_le {f : Œ± ‚Üí Œ≥} :
    UpperSemicontinuous f ‚Üî ‚àÄ x, limsup f (ùìù x) ‚â§ f x :=
  lowerSemicontinuous_iff_le_liminf (Œ≥ := Œ≥·µí·µà)

alias ‚ü®UpperSemicontinuous.limsup_le, _‚ü© := upperSemicontinuous_iff_limsup_le

theorem upperSemicontinuousOn_iff_limsup_le {f : Œ± ‚Üí Œ≥} :
    UpperSemicontinuousOn f s ‚Üî ‚àÄ x ‚àà s, limsup f (ùìù[s] x) ‚â§ f x :=
  lowerSemicontinuousOn_iff_le_liminf (Œ≥ := Œ≥·µí·µà)

alias ‚ü®UpperSemicontinuousOn.limsup_le, _‚ü© := upperSemicontinuousOn_iff_limsup_le

variable [TopologicalSpace Œ≥] [OrderTopology Œ≥]

theorem upperSemicontinuous_iff_IsClosed_hypograph {f : Œ± ‚Üí Œ≥} :
    UpperSemicontinuous f ‚Üî IsClosed {p : Œ± √ó Œ≥ | p.2 ‚â§ f p.1} :=
  lowerSemicontinuous_iff_isClosed_epigraph (Œ≥ := Œ≥·µí·µà)

alias ‚ü®UpperSemicontinuous.IsClosed_hypograph, _‚ü© := upperSemicontinuous_iff_IsClosed_hypograph

end

/-! ### Composition -/

section

variable {Œ≥ : Type*} [LinearOrder Œ≥] [TopologicalSpace Œ≥] [OrderTopology Œ≥]
variable {Œ¥ : Type*} [LinearOrder Œ¥] [TopologicalSpace Œ¥] [OrderTopology Œ¥]
variable {Œπ : Type*} [TopologicalSpace Œπ]

theorem ContinuousAt.comp_upperSemicontinuousWithinAt {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥}
    (hg : ContinuousAt g (f x)) (hf : UpperSemicontinuousWithinAt f s x) (gmon : Monotone g) :
    UpperSemicontinuousWithinAt (g ‚àò f) s x :=
  @ContinuousAt.comp_lowerSemicontinuousWithinAt Œ± _ x s Œ≥·µí·µà _ _ _ Œ¥·µí·µà _ _ _ g f hg hf gmon.dual
#align continuous_at.comp_upper_semicontinuous_within_at ContinuousAt.comp_upperSemicontinuousWithinAt

theorem ContinuousAt.comp_upperSemicontinuousAt {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : ContinuousAt g (f x))
    (hf : UpperSemicontinuousAt f x) (gmon : Monotone g) : UpperSemicontinuousAt (g ‚àò f) x :=
  @ContinuousAt.comp_lowerSemicontinuousAt Œ± _ x Œ≥·µí·µà _ _ _ Œ¥·µí·µà _ _ _ g f hg hf gmon.dual
#align continuous_at.comp_upper_semicontinuous_at ContinuousAt.comp_upperSemicontinuousAt

theorem Continuous.comp_upperSemicontinuousOn {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : Continuous g)
    (hf : UpperSemicontinuousOn f s) (gmon : Monotone g) : UpperSemicontinuousOn (g ‚àò f) s :=
  fun x hx => hg.continuousAt.comp_upperSemicontinuousWithinAt (hf x hx) gmon
#align continuous.comp_upper_semicontinuous_on Continuous.comp_upperSemicontinuousOn

theorem Continuous.comp_upperSemicontinuous {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : Continuous g)
    (hf : UpperSemicontinuous f) (gmon : Monotone g) : UpperSemicontinuous (g ‚àò f) := fun x =>
  hg.continuousAt.comp_upperSemicontinuousAt (hf x) gmon
#align continuous.comp_upper_semicontinuous Continuous.comp_upperSemicontinuous

theorem ContinuousAt.comp_upperSemicontinuousWithinAt_antitone {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥}
    (hg : ContinuousAt g (f x)) (hf : UpperSemicontinuousWithinAt f s x) (gmon : Antitone g) :
    LowerSemicontinuousWithinAt (g ‚àò f) s x :=
  @ContinuousAt.comp_upperSemicontinuousWithinAt Œ± _ x s Œ≥ _ _ _ Œ¥·µí·µà _ _ _ g f hg hf gmon
#align continuous_at.comp_upper_semicontinuous_within_at_antitone ContinuousAt.comp_upperSemicontinuousWithinAt_antitone

theorem ContinuousAt.comp_upperSemicontinuousAt_antitone {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥}
    (hg : ContinuousAt g (f x)) (hf : UpperSemicontinuousAt f x) (gmon : Antitone g) :
    LowerSemicontinuousAt (g ‚àò f) x :=
  @ContinuousAt.comp_upperSemicontinuousAt Œ± _ x Œ≥ _ _ _ Œ¥·µí·µà _ _ _ g f hg hf gmon
#align continuous_at.comp_upper_semicontinuous_at_antitone ContinuousAt.comp_upperSemicontinuousAt_antitone

theorem Continuous.comp_upperSemicontinuousOn_antitone {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : Continuous g)
    (hf : UpperSemicontinuousOn f s) (gmon : Antitone g) : LowerSemicontinuousOn (g ‚àò f) s :=
  fun x hx => hg.continuousAt.comp_upperSemicontinuousWithinAt_antitone (hf x hx) gmon
#align continuous.comp_upper_semicontinuous_on_antitone Continuous.comp_upperSemicontinuousOn_antitone

theorem Continuous.comp_upperSemicontinuous_antitone {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : Continuous g)
    (hf : UpperSemicontinuous f) (gmon : Antitone g) : LowerSemicontinuous (g ‚àò f) := fun x =>
  hg.continuousAt.comp_upperSemicontinuousAt_antitone (hf x) gmon
#align continuous.comp_upper_semicontinuous_antitone Continuous.comp_upperSemicontinuous_antitone

theorem UpperSemicontinuousAt.comp_continuousAt {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±} {x : Œπ}
    (hf : UpperSemicontinuousAt f (g x)) (hg : ContinuousAt g x) :
    UpperSemicontinuousAt (fun x ‚Ü¶ f (g x)) x :=
  fun _ lt ‚Ü¶ hg.eventually (hf _ lt)

theorem UpperSemicontinuousAt.comp_continuousAt_of_eq {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±} {y : Œ±} {x : Œπ}
    (hf : UpperSemicontinuousAt f y) (hg : ContinuousAt g x) (hy : g x = y) :
    UpperSemicontinuousAt (fun x ‚Ü¶ f (g x)) x := by
  rw [‚Üê hy] at hf
  exact comp_continuousAt hf hg

theorem UpperSemicontinuous.comp_continuous {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (hf : UpperSemicontinuous f) (hg : Continuous g) : UpperSemicontinuous fun x ‚Ü¶ f (g x) :=
  fun x ‚Ü¶ (hf (g x)).comp_continuousAt hg.continuousAt

end

/-! #### Addition -/


section

variable {Œπ : Type*} {Œ≥ : Type*} [LinearOrderedAddCommMonoid Œ≥] [TopologicalSpace Œ≥]
  [OrderTopology Œ≥]

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `EReal`. The unprimed version of
the lemma uses `[ContinuousAdd]`. -/
theorem UpperSemicontinuousWithinAt.add' {f g : Œ± ‚Üí Œ≥} (hf : UpperSemicontinuousWithinAt f s x)
    (hg : UpperSemicontinuousWithinAt g s x)
    (hcont : ContinuousAt (fun p : Œ≥ √ó Œ≥ => p.1 + p.2) (f x, g x)) :
    UpperSemicontinuousWithinAt (fun z => f z + g z) s x :=
  @LowerSemicontinuousWithinAt.add' Œ± _ x s Œ≥·µí·µà _ _ _ _ _ hf hg hcont
#align upper_semicontinuous_within_at.add' UpperSemicontinuousWithinAt.add'

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `EReal`. The unprimed version of
the lemma uses `[ContinuousAdd]`. -/
theorem UpperSemicontinuousAt.add' {f g : Œ± ‚Üí Œ≥} (hf : UpperSemicontinuousAt f x)
    (hg : UpperSemicontinuousAt g x)
    (hcont : ContinuousAt (fun p : Œ≥ √ó Œ≥ => p.1 + p.2) (f x, g x)) :
    UpperSemicontinuousAt (fun z => f z + g z) x := by
  simp_rw [‚Üê upperSemicontinuousWithinAt_univ_iff] at *
  exact hf.add' hg hcont
#align upper_semicontinuous_at.add' UpperSemicontinuousAt.add'

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `EReal`. The unprimed version of
the lemma uses `[ContinuousAdd]`. -/
theorem UpperSemicontinuousOn.add' {f g : Œ± ‚Üí Œ≥} (hf : UpperSemicontinuousOn f s)
    (hg : UpperSemicontinuousOn g s)
    (hcont : ‚àÄ x ‚àà s, ContinuousAt (fun p : Œ≥ √ó Œ≥ => p.1 + p.2) (f x, g x)) :
    UpperSemicontinuousOn (fun z => f z + g z) s := fun x hx =>
  (hf x hx).add' (hg x hx) (hcont x hx)
#align upper_semicontinuous_on.add' UpperSemicontinuousOn.add'

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `EReal`. The unprimed version of
the lemma uses `[ContinuousAdd]`. -/
theorem UpperSemicontinuous.add' {f g : Œ± ‚Üí Œ≥} (hf : UpperSemicontinuous f)
    (hg : UpperSemicontinuous g)
    (hcont : ‚àÄ x, ContinuousAt (fun p : Œ≥ √ó Œ≥ => p.1 + p.2) (f x, g x)) :
    UpperSemicontinuous fun z => f z + g z := fun x => (hf x).add' (hg x) (hcont x)
#align upper_semicontinuous.add' UpperSemicontinuous.add'

variable [ContinuousAdd Œ≥]

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with
`[ContinuousAdd]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `EReal`. -/
theorem UpperSemicontinuousWithinAt.add {f g : Œ± ‚Üí Œ≥} (hf : UpperSemicontinuousWithinAt f s x)
    (hg : UpperSemicontinuousWithinAt g s x) :
    UpperSemicontinuousWithinAt (fun z => f z + g z) s x :=
  hf.add' hg continuous_add.continuousAt
#align upper_semicontinuous_within_at.add UpperSemicontinuousWithinAt.add

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with
`[ContinuousAdd]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `EReal`. -/
theorem UpperSemicontinuousAt.add {f g : Œ± ‚Üí Œ≥} (hf : UpperSemicontinuousAt f x)
    (hg : UpperSemicontinuousAt g x) : UpperSemicontinuousAt (fun z => f z + g z) x :=
  hf.add' hg continuous_add.continuousAt
#align upper_semicontinuous_at.add UpperSemicontinuousAt.add

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with
`[ContinuousAdd]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `EReal`. -/
theorem UpperSemicontinuousOn.add {f g : Œ± ‚Üí Œ≥} (hf : UpperSemicontinuousOn f s)
    (hg : UpperSemicontinuousOn g s) : UpperSemicontinuousOn (fun z => f z + g z) s :=
  hf.add' hg fun _x _hx => continuous_add.continuousAt
#align upper_semicontinuous_on.add UpperSemicontinuousOn.add

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with
`[ContinuousAdd]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `EReal`. -/
theorem UpperSemicontinuous.add {f g : Œ± ‚Üí Œ≥} (hf : UpperSemicontinuous f)
    (hg : UpperSemicontinuous g) : UpperSemicontinuous fun z => f z + g z :=
  hf.add' hg fun _x => continuous_add.continuousAt
#align upper_semicontinuous.add UpperSemicontinuous.add

theorem upperSemicontinuousWithinAt_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : Finset Œπ}
    (ha : ‚àÄ i ‚àà a, UpperSemicontinuousWithinAt (f i) s x) :
    UpperSemicontinuousWithinAt (fun z => ‚àë i in a, f i z) s x :=
  @lowerSemicontinuousWithinAt_sum Œ± _ x s Œπ Œ≥·µí·µà _ _ _ _ f a ha
#align upper_semicontinuous_within_at_sum upperSemicontinuousWithinAt_sum

theorem upperSemicontinuousAt_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : Finset Œπ}
    (ha : ‚àÄ i ‚àà a, UpperSemicontinuousAt (f i) x) :
    UpperSemicontinuousAt (fun z => ‚àë i in a, f i z) x := by
  simp_rw [‚Üê upperSemicontinuousWithinAt_univ_iff] at *
  exact upperSemicontinuousWithinAt_sum ha
#align upper_semicontinuous_at_sum upperSemicontinuousAt_sum

theorem upperSemicontinuousOn_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : Finset Œπ}
    (ha : ‚àÄ i ‚àà a, UpperSemicontinuousOn (f i) s) :
    UpperSemicontinuousOn (fun z => ‚àë i in a, f i z) s := fun x hx =>
  upperSemicontinuousWithinAt_sum fun i hi => ha i hi x hx
#align upper_semicontinuous_on_sum upperSemicontinuousOn_sum

theorem upperSemicontinuous_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : Finset Œπ}
    (ha : ‚àÄ i ‚àà a, UpperSemicontinuous (f i)) : UpperSemicontinuous fun z => ‚àë i in a, f i z :=
  fun x => upperSemicontinuousAt_sum fun i hi => ha i hi x
#align upper_semicontinuous_sum upperSemicontinuous_sum

end

/-! #### Infimum -/


section

variable {Œπ : Sort*} {Œ¥ Œ¥' : Type*} [CompleteLinearOrder Œ¥] [ConditionallyCompleteLinearOrder Œ¥']

theorem upperSemicontinuousWithinAt_ciInf {f : Œπ ‚Üí Œ± ‚Üí Œ¥'}
    (bdd : ‚àÄ·∂† y in ùìù[s] x, BddBelow (range fun i => f i y))
    (h : ‚àÄ i, UpperSemicontinuousWithinAt (f i) s x) :
    UpperSemicontinuousWithinAt (fun x' => ‚®Ö i, f i x') s x :=
  @lowerSemicontinuousWithinAt_ciSup Œ± _ x s Œπ Œ¥'·µí·µà _ f bdd h
#align upper_semicontinuous_within_at_cinfi upperSemicontinuousWithinAt_ciInf

theorem upperSemicontinuousWithinAt_iInf {f : Œπ ‚Üí Œ± ‚Üí Œ¥}
    (h : ‚àÄ i, UpperSemicontinuousWithinAt (f i) s x) :
    UpperSemicontinuousWithinAt (fun x' => ‚®Ö i, f i x') s x :=
  @lowerSemicontinuousWithinAt_iSup Œ± _ x s Œπ Œ¥·µí·µà _ f h
#align upper_semicontinuous_within_at_infi upperSemicontinuousWithinAt_iInf

theorem upperSemicontinuousWithinAt_biInf {p : Œπ ‚Üí Prop} {f : ‚àÄ i, p i ‚Üí Œ± ‚Üí Œ¥}
    (h : ‚àÄ i hi, UpperSemicontinuousWithinAt (f i hi) s x) :
    UpperSemicontinuousWithinAt (fun x' => ‚®Ö (i) (hi), f i hi x') s x :=
  upperSemicontinuousWithinAt_iInf fun i => upperSemicontinuousWithinAt_iInf fun hi => h i hi
#align upper_semicontinuous_within_at_binfi upperSemicontinuousWithinAt_biInf

theorem upperSemicontinuousAt_ciInf {f : Œπ ‚Üí Œ± ‚Üí Œ¥'}
    (bdd : ‚àÄ·∂† y in ùìù x, BddBelow (range fun i => f i y)) (h : ‚àÄ i, UpperSemicontinuousAt (f i) x) :
    UpperSemicontinuousAt (fun x' => ‚®Ö i, f i x') x :=
  @lowerSemicontinuousAt_ciSup Œ± _ x Œπ Œ¥'·µí·µà _ f bdd h
#align upper_semicontinuous_at_cinfi upperSemicontinuousAt_ciInf

theorem upperSemicontinuousAt_iInf {f : Œπ ‚Üí Œ± ‚Üí Œ¥} (h : ‚àÄ i, UpperSemicontinuousAt (f i) x) :
    UpperSemicontinuousAt (fun x' => ‚®Ö i, f i x') x :=
  @lowerSemicontinuousAt_iSup Œ± _ x Œπ Œ¥·µí·µà _ f h
#align upper_semicontinuous_at_infi upperSemicontinuousAt_iInf

theorem upperSemicontinuousAt_biInf {p : Œπ ‚Üí Prop} {f : ‚àÄ i, p i ‚Üí Œ± ‚Üí Œ¥}
    (h : ‚àÄ i hi, UpperSemicontinuousAt (f i hi) x) :
    UpperSemicontinuousAt (fun x' => ‚®Ö (i) (hi), f i hi x') x :=
  upperSemicontinuousAt_iInf fun i => upperSemicontinuousAt_iInf fun hi => h i hi
#align upper_semicontinuous_at_binfi upperSemicontinuousAt_biInf

theorem upperSemicontinuousOn_ciInf {f : Œπ ‚Üí Œ± ‚Üí Œ¥'}
    (bdd : ‚àÄ x ‚àà s, BddBelow (range fun i => f i x)) (h : ‚àÄ i, UpperSemicontinuousOn (f i) s) :
    UpperSemicontinuousOn (fun x' => ‚®Ö i, f i x') s := fun x hx =>
  upperSemicontinuousWithinAt_ciInf (eventually_nhdsWithin_of_forall bdd) fun i => h i x hx
#align upper_semicontinuous_on_cinfi upperSemicontinuousOn_ciInf

theorem upperSemicontinuousOn_iInf {f : Œπ ‚Üí Œ± ‚Üí Œ¥} (h : ‚àÄ i, UpperSemicontinuousOn (f i) s) :
    UpperSemicontinuousOn (fun x' => ‚®Ö i, f i x') s := fun x hx =>
  upperSemicontinuousWithinAt_iInf fun i => h i x hx
#align upper_semicontinuous_on_infi upperSemicontinuousOn_iInf

theorem upperSemicontinuousOn_biInf {p : Œπ ‚Üí Prop} {f : ‚àÄ i, p i ‚Üí Œ± ‚Üí Œ¥}
    (h : ‚àÄ i hi, UpperSemicontinuousOn (f i hi) s) :
    UpperSemicontinuousOn (fun x' => ‚®Ö (i) (hi), f i hi x') s :=
  upperSemicontinuousOn_iInf fun i => upperSemicontinuousOn_iInf fun hi => h i hi
#align upper_semicontinuous_on_binfi upperSemicontinuousOn_biInf

theorem upperSemicontinuous_ciInf {f : Œπ ‚Üí Œ± ‚Üí Œ¥'} (bdd : ‚àÄ x, BddBelow (range fun i => f i x))
    (h : ‚àÄ i, UpperSemicontinuous (f i)) : UpperSemicontinuous fun x' => ‚®Ö i, f i x' := fun x =>
  upperSemicontinuousAt_ciInf (eventually_of_forall bdd) fun i => h i x
#align upper_semicontinuous_cinfi upperSemicontinuous_ciInf

theorem upperSemicontinuous_iInf {f : Œπ ‚Üí Œ± ‚Üí Œ¥} (h : ‚àÄ i, UpperSemicontinuous (f i)) :
    UpperSemicontinuous fun x' => ‚®Ö i, f i x' := fun x => upperSemicontinuousAt_iInf fun i => h i x
#align upper_semicontinuous_infi upperSemicontinuous_iInf

theorem upperSemicontinuous_biInf {p : Œπ ‚Üí Prop} {f : ‚àÄ i, p i ‚Üí Œ± ‚Üí Œ¥}
    (h : ‚àÄ i hi, UpperSemicontinuous (f i hi)) :
    UpperSemicontinuous fun x' => ‚®Ö (i) (hi), f i hi x' :=
  upperSemicontinuous_iInf fun i => upperSemicontinuous_iInf fun hi => h i hi
#align upper_semicontinuous_binfi upperSemicontinuous_biInf

end

section

variable {Œ≥ : Type*} [LinearOrder Œ≥] [TopologicalSpace Œ≥] [OrderTopology Œ≥]

theorem continuousWithinAt_iff_lower_upperSemicontinuousWithinAt {f : Œ± ‚Üí Œ≥} :
    ContinuousWithinAt f s x ‚Üî
      LowerSemicontinuousWithinAt f s x ‚àß UpperSemicontinuousWithinAt f s x := by
  refine ‚ü®fun h => ‚ü®h.lowerSemicontinuousWithinAt, h.upperSemicontinuousWithinAt‚ü©, ?_‚ü©
  rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
  intro v hv
  simp only [Filter.mem_map]
  by_cases Hl : ‚àÉ l, l < f x
  ¬∑ rcases exists_Ioc_subset_of_mem_nhds hv Hl with ‚ü®l, lfx, hl‚ü©
    by_cases Hu : ‚àÉ u, f x < u
    ¬∑ rcases exists_Ico_subset_of_mem_nhds hv Hu with ‚ü®u, fxu, hu‚ü©
      filter_upwards [h‚ÇÅ l lfx, h‚ÇÇ u fxu] with a lfa fau
      cases' le_or_gt (f a) (f x) with h h
      ¬∑ exact hl ‚ü®lfa, h‚ü©
      ¬∑ exact hu ‚ü®le_of_lt h, fau‚ü©
    ¬∑ simp only [not_exists, not_lt] at Hu
      filter_upwards [h‚ÇÅ l lfx] with a lfa using hl ‚ü®lfa, Hu (f a)‚ü©
  ¬∑ simp only [not_exists, not_lt] at Hl
    by_cases Hu : ‚àÉ u, f x < u
    ¬∑ rcases exists_Ico_subset_of_mem_nhds hv Hu with ‚ü®u, fxu, hu‚ü©
      filter_upwards [h‚ÇÇ u fxu] with a lfa
      apply hu
      exact ‚ü®Hl (f a), lfa‚ü©
    ¬∑ simp only [not_exists, not_lt] at Hu
      apply Filter.eventually_of_forall
      intro a
      have : f a = f x := le_antisymm (Hu _) (Hl _)
      rw [this]
      exact mem_of_mem_nhds hv
#align continuous_within_at_iff_lower_upper_semicontinuous_within_at continuousWithinAt_iff_lower_upperSemicontinuousWithinAt

theorem continuousAt_iff_lower_upperSemicontinuousAt {f : Œ± ‚Üí Œ≥} :
    ContinuousAt f x ‚Üî LowerSemicontinuousAt f x ‚àß UpperSemicontinuousAt f x := by
  simp_rw [‚Üê continuousWithinAt_univ, ‚Üê lowerSemicontinuousWithinAt_univ_iff, ‚Üê
    upperSemicontinuousWithinAt_univ_iff, continuousWithinAt_iff_lower_upperSemicontinuousWithinAt]
#align continuous_at_iff_lower_upper_semicontinuous_at continuousAt_iff_lower_upperSemicontinuousAt

theorem continuousOn_iff_lower_upperSemicontinuousOn {f : Œ± ‚Üí Œ≥} :
    ContinuousOn f s ‚Üî LowerSemicontinuousOn f s ‚àß UpperSemicontinuousOn f s := by
  simp only [ContinuousOn, continuousWithinAt_iff_lower_upperSemicontinuousWithinAt]
  exact
    ‚ü®fun H => ‚ü®fun x hx => (H x hx).1, fun x hx => (H x hx).2‚ü©, fun H x hx => ‚ü®H.1 x hx, H.2 x hx‚ü©‚ü©
#align continuous_on_iff_lower_upper_semicontinuous_on continuousOn_iff_lower_upperSemicontinuousOn

theorem continuous_iff_lower_upperSemicontinuous {f : Œ± ‚Üí Œ≥} :
    Continuous f ‚Üî LowerSemicontinuous f ‚àß UpperSemicontinuous f := by
  simp_rw [continuous_iff_continuousOn_univ, continuousOn_iff_lower_upperSemicontinuousOn,
    lowerSemicontinuousOn_univ_iff, upperSemicontinuousOn_univ_iff]
#align continuous_iff_lower_upper_semicontinuous continuous_iff_lower_upperSemicontinuous

end
