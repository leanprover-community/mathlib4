/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Analysis.SpecificLimits.Basic
import Mathlib.Topology.UrysohnsLemma
import Mathlib.Topology.ContinuousFunction.Bounded
import Mathlib.Topology.Metrizable.Basic

#align_import topology.metric_space.metrizable from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"
/-!
# Urysohn's Metrization Theorem

In this file we prove Urysohn's Metrization Theorem:
a T‚ÇÉ topological space with second countable topology `X` is metrizable.

First we prove that `X` can be embedded into `l^‚àû`, then use this embedding to pull back the metric
space structure.

## Implementation notes

We use `‚Ñï ‚Üí·µá ‚Ñù`, not `lpSpace` for `l^‚àû` to avoid heavy imports.
-/

open Set Filter Metric
open scoped Topology BoundedContinuousFunction

namespace TopologicalSpace

section RegularSpace

variable (X : Type*) [TopologicalSpace X] [RegularSpace X] [SecondCountableTopology X]

/-- For a regular topological space with second countable topology,
there exists an inducing map to `l^‚àû = ‚Ñï ‚Üí·µá ‚Ñù`. -/
theorem exists_inducing_l_infty : ‚àÉ f : X ‚Üí ‚Ñï ‚Üí·µá ‚Ñù, Inducing f := by
  -- Choose a countable basis, and consider the set `s` of pairs of set `(U, V)` such that `U ‚àà B`,
  -- `V ‚àà B`, and `closure U ‚äÜ V`.
  rcases exists_countable_basis X with ‚ü®B, hBc, -, hB‚ü©
  let s : Set (Set X √ó Set X) := { UV ‚àà B √óÀ¢ B | closure UV.1 ‚äÜ UV.2 }
  -- `s` is a countable set.
  haveI : Encodable s := ((hBc.prod hBc).mono (inter_subset_left _ _)).toEncodable
  -- We don't have the space of bounded (possibly discontinuous) functions, so we equip `s`
  -- with the discrete topology and deal with `s ‚Üí·µá ‚Ñù` instead.
  letI : TopologicalSpace s := ‚ä•
  haveI : DiscreteTopology s := ‚ü®rfl‚ü©
  rsuffices ‚ü®f, hf‚ü© : ‚àÉ f : X ‚Üí s ‚Üí·µá ‚Ñù, Inducing f
  ¬∑ exact ‚ü®fun x => (f x).extend (Encodable.encode' s) 0,
      (BoundedContinuousFunction.isometry_extend (Encodable.encode' s)
        (0 : ‚Ñï ‚Üí·µá ‚Ñù)).embedding.toInducing.comp hf‚ü©
  have hd : ‚àÄ UV : s, Disjoint (closure UV.1.1) UV.1.2·∂ú :=
    fun UV => disjoint_compl_right.mono_right (compl_subset_compl.2 UV.2.2)
  -- Choose a sequence of `Œµ‚Çô > 0`, `n : s`, that is bounded above by `1` and tends to zero
  -- along the `cofinite` filter.
  obtain ‚ü®Œµ, Œµ01, hŒµ‚ü© : ‚àÉ Œµ : s ‚Üí ‚Ñù, (‚àÄ UV, Œµ UV ‚àà Ioc (0 : ‚Ñù) 1) ‚àß Tendsto Œµ cofinite (ùìù 0) := by
    rcases posSumOfEncodable zero_lt_one s with ‚ü®Œµ, Œµ0, c, hŒµc, hc1‚ü©
    refine' ‚ü®Œµ, fun UV => ‚ü®Œµ0 UV, _‚ü©, hŒµc.summable.tendsto_cofinite_zero‚ü©
    exact (le_hasSum hŒµc UV fun _ _ => (Œµ0 _).le).trans hc1
  /- For each `UV = (U, V) ‚àà s` we use Urysohn's lemma to choose a function `f UV` that is equal to
    zero on `U` and is equal to `Œµ UV` on the complement to `V`. -/
  have : ‚àÄ UV : s, ‚àÉ f : C(X, ‚Ñù),
      EqOn f 0 UV.1.1 ‚àß EqOn f (fun _ => Œµ UV) UV.1.2·∂ú ‚àß ‚àÄ x, f x ‚àà Icc 0 (Œµ UV) := by
    intro UV
    rcases exists_continuous_zero_one_of_closed isClosed_closure
        (hB.isOpen UV.2.1.2).isClosed_compl (hd UV) with
      ‚ü®f, hf‚ÇÄ, hf‚ÇÅ, hf01‚ü©
    exact ‚ü®Œµ UV ‚Ä¢ f, fun x hx => by simp [hf‚ÇÄ (subset_closure hx)], fun x hx => by simp [hf‚ÇÅ hx],
      fun x => ‚ü®mul_nonneg (Œµ01 _).1.le (hf01 _).1, mul_le_of_le_one_right (Œµ01 _).1.le (hf01 _).2‚ü©‚ü©
  choose f hf0 hfŒµ hf0Œµ using this
  have hf01 : ‚àÄ UV x, f UV x ‚àà Icc (0 : ‚Ñù) 1 :=
    fun UV x => Icc_subset_Icc_right (Œµ01 _).2 (hf0Œµ _ _)
  -- The embedding is given by `F x UV = f UV x`.
  set F : X ‚Üí s ‚Üí·µá ‚Ñù := fun x =>
    ‚ü®‚ü®fun UV => f UV x, continuous_of_discreteTopology‚ü©, 1,
      fun UV‚ÇÅ UV‚ÇÇ => Real.dist_le_of_mem_Icc_01 (hf01 _ _) (hf01 _ _)‚ü©
  have hF : ‚àÄ x UV, F x UV = f UV x := fun _ _ => rfl
  refine' ‚ü®F, inducing_iff_nhds.2 fun x => le_antisymm _ _‚ü©
  ¬∑ /- First we prove that `F` is continuous. Given `Œ¥ > 0`, consider the set `T` of `(U, V) ‚àà s`
    such that `Œµ (U, V) ‚â• Œ¥`. Since `Œµ` tends to zero, `T` is finite. Since each `f` is continuous,
    we can choose a neighborhood such that `dist (F y (U, V)) (F x (U, V)) ‚â§ Œ¥` for any
    `(U, V) ‚àà T`. For `(U, V) ‚àâ T`, the same inequality is true because both `F y (U, V)` and
    `F x (U, V)` belong to the interval `[0, Œµ (U, V)]`. -/
    refine' (nhds_basis_closedBall.comap _).ge_iff.2 fun Œ¥ Œ¥0 => _
    have h_fin : { UV : s | Œ¥ ‚â§ Œµ UV }.Finite := by simpa only [‚Üê not_lt] using hŒµ (gt_mem_nhds Œ¥0)
    have : ‚àÄ·∂† y in ùìù x, ‚àÄ UV, Œ¥ ‚â§ Œµ UV ‚Üí dist (F y UV) (F x UV) ‚â§ Œ¥ := by
      refine' (eventually_all_finite h_fin).2 fun UV _ => _
      exact (f UV).continuous.tendsto x (closedBall_mem_nhds _ Œ¥0)
    refine' this.mono fun y hy => (BoundedContinuousFunction.dist_le Œ¥0.le).2 fun UV => _
    cases' le_total Œ¥ (Œµ UV) with hle hle
    exacts [hy _ hle, (Real.dist_le_of_mem_Icc (hf0Œµ _ _) (hf0Œµ _ _)).trans (by rwa [sub_zero])]
  ¬∑ /- Finally, we prove that each neighborhood `V` of `x : X`
    includes a preimage of a neighborhood of `F x` under `F`.
    Without loss of generality, `V` belongs to `B`.
    Choose `U ‚àà B` such that `x ‚àà V` and `closure V ‚äÜ U`.
    Then the preimage of the `(Œµ (U, V))`-neighborhood of `F x` is included by `V`. -/
    refine' ((nhds_basis_ball.comap _).le_basis_iff hB.nhds_hasBasis).2 _
    rintro V ‚ü®hVB, hxV‚ü©
    rcases hB.exists_closure_subset (hB.mem_nhds hVB hxV) with ‚ü®U, hUB, hxU, hUV‚ü©
    set UV : ‚Ü•s := ‚ü®(U, V), ‚ü®hUB, hVB‚ü©, hUV‚ü©
    refine' ‚ü®Œµ UV, (Œµ01 UV).1, fun y (hy : dist (F y) (F x) < Œµ UV) => _‚ü©
    replace hy : dist (F y UV) (F x UV) < Œµ UV
    exact (BoundedContinuousFunction.dist_coe_le_dist _).trans_lt hy
    contrapose! hy
    rw [hF, hF, hfŒµ UV hy, hf0 UV hxU, Pi.zero_apply, dist_zero_right]
    exact le_abs_self _
#align topological_space.exists_embedding_l_infty TopologicalSpace.exists_inducing_l_infty

/-- *Urysohn's metrization theorem* (Tychonoff's version):
a regular topological space with second countable topology `X` is metrizable,
i.e., there exists a pseudometric space structure that generates the same topology. -/
instance (priority := 90) PseudoMetrizableSpace.of_regularSpace_secondCountableTopology :
    PseudoMetrizableSpace X :=
  let ‚ü®_, hf‚ü© := exists_inducing_l_infty X
  hf.pseudoMetrizableSpace

end RegularSpace

variable (X : Type*) [TopologicalSpace X] [T3Space X] [SecondCountableTopology X]

/-- A T‚ÇÉ topological space with second countable topology can be embedded into `l^‚àû = ‚Ñï ‚Üí·µá ‚Ñù`. -/
theorem exists_embedding_l_infty : ‚àÉ f : X ‚Üí ‚Ñï ‚Üí·µá ‚Ñù, Embedding f :=
  let ‚ü®f, hf‚ü© := exists_inducing_l_infty X; ‚ü®f, hf.embedding‚ü©

/-- *Urysohn's metrization theorem* (Tychonoff's version): a T‚ÇÉ topological space with second
countable topology `X` is metrizable, i.e., there exists a metric space structure that generates the
same topology. -/
instance (priority := 90) metrizableSpace_of_t3_second_countable : MetrizableSpace X :=
  let ‚ü®_, hf‚ü© := exists_embedding_l_infty X
  hf.metrizableSpace
#align topological_space.metrizable_space_of_t3_second_countable TopologicalSpace.metrizableSpace_of_t3_second_countable
