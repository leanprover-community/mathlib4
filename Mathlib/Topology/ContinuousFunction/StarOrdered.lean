/-
Copyright (c) 2024 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import Mathlib.Analysis.Complex.Basic
import Mathlib.Data.Real.Star
import Mathlib.Topology.ContinuousFunction.Algebra
import Mathlib.Topology.ContinuousFunction.ContinuousMapZero

/-! # Continuous functions as a star-ordered ring -/

open scoped NNReal

namespace ContinuousMap

variable {Œ± : Type*} [TopologicalSpace Œ±]

lemma starOrderedRing_of_sqrt {R : Type*} [PartialOrder R] [NonUnitalRing R] [StarRing R]
    [StarOrderedRing R] [TopologicalSpace R] [ContinuousStar R] [TopologicalRing R]
    (sqrt : R ‚Üí R) (h_continuousOn : ContinuousOn sqrt {x : R | 0 ‚â§ x})
    (h_sqrt : ‚àÄ x, 0 ‚â§ x ‚Üí star (sqrt x) * sqrt x = x) : StarOrderedRing C(Œ±, R) :=
  StarOrderedRing.of_nonneg_iff' add_le_add_left fun f ‚Ü¶ by
    constructor
    ¬∑ intro hf
      use (mk _ h_continuousOn.restrict).comp ‚ü®_, map_continuous f |>.codRestrict (by exact hf ¬∑)‚ü©
      ext x
      exact h_sqrt (f x) (hf x) |>.symm
    ¬∑ rintro ‚ü®f, rfl‚ü©
      rw [ContinuousMap.le_def]
      exact fun x ‚Ü¶ star_mul_self_nonneg (f x)

open scoped ComplexOrder in
open RCLike in
instance (priority := 100) instStarOrderedRingRCLike {ùïú : Type*} [RCLike ùïú] :
    StarOrderedRing C(Œ±, ùïú) :=
  starOrderedRing_of_sqrt ((‚Üë) ‚àò Real.sqrt ‚àò re) (by fun_prop) fun x hx ‚Ü¶ by
    simp only [Function.comp_apply,star_def]
    obtain hx' := nonneg_iff.mp hx |>.right
    rw [‚Üê conj_eq_iff_im, conj_eq_iff_re] at hx'
    rw [conj_ofReal, ‚Üê ofReal_mul, Real.mul_self_sqrt, hx']
    rw [nonneg_iff]
    simpa using nonneg_iff.mp hx |>.left

instance instStarOrderedRingReal : StarOrderedRing C(Œ±, ‚Ñù) :=
  instStarOrderedRingRCLike (ùïú := ‚Ñù)

open scoped ComplexOrder in
open Complex in
instance instStarOrderedRingComplex : StarOrderedRing C(Œ±, ‚ÑÇ) :=
  instStarOrderedRingRCLike (ùïú := ‚ÑÇ)

open NNReal in
instance instStarOrderedRingNNReal : StarOrderedRing C(Œ±, ‚Ñù‚â•0) :=
  StarOrderedRing.of_le_iff fun f g ‚Ü¶ by
    constructor
    ¬∑ intro hfg
      use .comp ‚ü®sqrt, by fun_prop‚ü© (g - f)
      ext1 x
      simpa using add_tsub_cancel_of_le (hfg x) |>.symm
    ¬∑ rintro ‚ü®s, rfl‚ü©
      exact fun _ ‚Ü¶ by simp

end ContinuousMap

namespace ContinuousMapZero

variable {Œ± : Type*} [TopologicalSpace Œ±] [Zero Œ±]

instance instStarOrderedRing {R : Type*}
    [TopologicalSpace R] [OrderedCommSemiring R] [NoZeroDivisors R] [StarRing R] [StarOrderedRing R]
    [TopologicalSemiring R] [ContinuousStar R] [StarOrderedRing C(Œ±, R)] :
    StarOrderedRing C(Œ±, R)‚ÇÄ where
  le_iff f g := by
    constructor
    ¬∑ rw [le_def, ‚Üê ContinuousMap.coe_coe, ‚Üê ContinuousMap.coe_coe g, ‚Üê ContinuousMap.le_def,
        StarOrderedRing.le_iff]
      rintro ‚ü®p, hp_mem, hp‚ü©
      induction hp_mem using AddSubmonoid.closure_induction_left generalizing f g with
      | one => exact ‚ü®0, zero_mem _, by ext x; congrm($(hp) x)‚ü©
      | mul_left s s_mem p p_mem hp' =>
        obtain ‚ü®s, rfl‚ü© := s_mem
        simp only at *
        have h‚ÇÄ : (star s * s + p) 0 = 0 := by simpa using congr($(hp) 0).symm
        rw [‚Üê add_assoc] at hp
        have p'‚ÇÄ : 0 ‚â§ p 0 := by rw [‚Üê StarOrderedRing.nonneg_iff] at p_mem; exact p_mem 0
        have s‚Çâ : (star s * s) 0 = 0 := le_antisymm ((le_add_of_nonneg_right p'‚ÇÄ).trans_eq h‚ÇÄ)
          (star_mul_self_nonneg (s 0))
        have s‚ÇÄ' : s 0 = 0 := by aesop
        let s' : C(Œ±, R)‚ÇÄ := ‚ü®s, s‚ÇÄ'‚ü©
        obtain ‚ü®p', hp'_mem, rfl‚ü© := hp' (f + star s' * s') g hp
        refine ‚ü®star s' * s' + p', ?_, by rw [add_assoc]‚ü©
        exact add_mem (AddSubmonoid.subset_closure ‚ü®s', rfl‚ü©) hp'_mem
    ¬∑ rintro ‚ü®p, hp, rfl‚ü©
      induction hp using AddSubmonoid.closure_induction' generalizing f with
      | mem s s_mem =>
        obtain ‚ü®s, rfl‚ü© := s_mem
        exact fun x ‚Ü¶ le_add_of_nonneg_right (star_mul_self_nonneg (s x))
      | one => simp
      | mul g‚ÇÅ _ g‚ÇÇ _ h‚ÇÅ h‚ÇÇ => calc
          f ‚â§ f + g‚ÇÅ := h‚ÇÅ f
          _ ‚â§ (f + g‚ÇÅ) + g‚ÇÇ := h‚ÇÇ (f + g‚ÇÅ)
          _ = f + (g‚ÇÅ + g‚ÇÇ) := add_assoc _ _ _

instance instStarOrderedRingReal : StarOrderedRing C(Œ±, ‚Ñù)‚ÇÄ :=
  instStarOrderedRing (R := ‚Ñù)

open scoped ComplexOrder in
instance instStarOrderedRingComplex : StarOrderedRing C(Œ±, ‚ÑÇ)‚ÇÄ :=
  instStarOrderedRing (R := ‚ÑÇ)

instance instStarOrderedRingNNReal : StarOrderedRing C(Œ±, ‚Ñù‚â•0)‚ÇÄ :=
  instStarOrderedRing (R := ‚Ñù‚â•0)

end ContinuousMapZero
