/-
Copyright (c) 2021 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.Topology.ContinuousFunction.Bounded
import Mathlib.Topology.UniformSpace.Compact
import Mathlib.Topology.CompactOpen
import Mathlib.Topology.Sets.Compacts
import Mathlib.Analysis.Normed.Group.InfiniteSum

/-!
# Continuous functions on a compact space

Continuous functions `C(Œ±, Œ≤)` from a compact space `Œ±` to a metric space `Œ≤`
are automatically bounded, and so acquire various structures inherited from `Œ± ‚Üí·µá Œ≤`.

This file transfers these structures, and restates some lemmas
characterising these structures.

If you need a lemma which is proved about `Œ± ‚Üí·µá Œ≤` but not for `C(Œ±, Œ≤)` when `Œ±` is compact,
you should restate it here. You can also use
`ContinuousMap.equivBoundedOfCompact` to move functions back and forth.
-/

noncomputable section

open NNReal BoundedContinuousFunction Set Metric

namespace ContinuousMap

variable {Œ± Œ≤ E : Type*} [TopologicalSpace Œ±] [CompactSpace Œ±] [MetricSpace Œ≤]
  [NormedAddCommGroup E]

section

variable (Œ± Œ≤)

/-- When `Œ±` is compact, the bounded continuous maps `Œ± ‚Üí·µá Œ≤` are
equivalent to `C(Œ±, Œ≤)`.
-/
@[simps (config := .asFn)]
def equivBoundedOfCompact : C(Œ±, Œ≤) ‚âÉ (Œ± ‚Üí·µá Œ≤) :=
  ‚ü®mkOfCompact, BoundedContinuousFunction.toContinuousMap, fun f => by
    ext
    rfl, fun f => by
    ext
    rfl‚ü©

theorem uniformInducing_equivBoundedOfCompact : UniformInducing (equivBoundedOfCompact Œ± Œ≤) :=
  UniformInducing.mk'
    (by
      simp only [hasBasis_compactConvergenceUniformity.mem_iff, uniformity_basis_dist_le.mem_iff]
      exact fun s =>
        ‚ü®fun ‚ü®‚ü®a, b‚ü©, ‚ü®_, ‚ü®Œµ, hŒµ, hb‚ü©‚ü©, hs‚ü© =>
          ‚ü®{ p | ‚àÄ x, (p.1 x, p.2 x) ‚àà b }, ‚ü®Œµ, hŒµ, fun _ h x => hb ((dist_le hŒµ.le).mp h x)‚ü©,
            fun f g h => hs fun x _ => h x‚ü©,
          fun ‚ü®_, ‚ü®Œµ, hŒµ, ht‚ü©, hs‚ü© =>
          ‚ü®‚ü®Set.univ, { p | dist p.1 p.2 ‚â§ Œµ }‚ü©, ‚ü®isCompact_univ, ‚ü®Œµ, hŒµ, fun _ h => h‚ü©‚ü©,
            fun ‚ü®f, g‚ü© h => hs _ _ (ht ((dist_le hŒµ.le).mpr fun x => h x (mem_univ x)))‚ü©‚ü©)

theorem uniformEmbedding_equivBoundedOfCompact : UniformEmbedding (equivBoundedOfCompact Œ± Œ≤) :=
  { uniformInducing_equivBoundedOfCompact Œ± Œ≤ with inj := (equivBoundedOfCompact Œ± Œ≤).injective }

/-- When `Œ±` is compact, the bounded continuous maps `Œ± ‚Üí·µá ùïú` are
additively equivalent to `C(Œ±, ùïú)`.
-/
-- Porting note: the following `simps` received a "maximum recursion depth" error
-- @[simps! (config := .asFn) apply symm_apply]
def addEquivBoundedOfCompact [AddMonoid Œ≤] [LipschitzAdd Œ≤] : C(Œ±, Œ≤) ‚âÉ+ (Œ± ‚Üí·µá Œ≤) :=
  ({ toContinuousMapAddHom Œ± Œ≤, (equivBoundedOfCompact Œ± Œ≤).symm with } : (Œ± ‚Üí·µá Œ≤) ‚âÉ+ C(Œ±, Œ≤)).symm

-- Porting note: added this `simp` lemma manually because of the `simps` error above
@[simp]
theorem addEquivBoundedOfCompact_symm_apply [AddMonoid Œ≤] [LipschitzAdd Œ≤] :
    ‚áë((addEquivBoundedOfCompact Œ± Œ≤).symm) = toContinuousMapAddHom Œ± Œ≤ :=
  rfl

-- Porting note: added this `simp` lemma manually because of the `simps` error above
@[simp]
theorem addEquivBoundedOfCompact_apply [AddMonoid Œ≤] [LipschitzAdd Œ≤] :
    ‚áë(addEquivBoundedOfCompact Œ± Œ≤) = mkOfCompact :=
  rfl

instance metricSpace : MetricSpace C(Œ±, Œ≤) :=
  (uniformEmbedding_equivBoundedOfCompact Œ± Œ≤).comapMetricSpace _

/-- When `Œ±` is compact, and `Œ≤` is a metric space, the bounded continuous maps `Œ± ‚Üí·µá Œ≤` are
isometric to `C(Œ±, Œ≤)`.
-/
@[simps! (config := .asFn) toEquiv apply symm_apply]
def isometryEquivBoundedOfCompact : C(Œ±, Œ≤) ‚âÉ·µ¢ (Œ± ‚Üí·µá Œ≤) where
  isometry_toFun _ _ := rfl
  toEquiv := equivBoundedOfCompact Œ± Œ≤

end

@[simp]
theorem _root_.BoundedContinuousFunction.dist_mkOfCompact (f g : C(Œ±, Œ≤)) :
    dist (mkOfCompact f) (mkOfCompact g) = dist f g :=
  rfl

@[simp]
theorem _root_.BoundedContinuousFunction.dist_toContinuousMap (f g : Œ± ‚Üí·µá Œ≤) :
    dist f.toContinuousMap g.toContinuousMap = dist f g :=
  rfl

open BoundedContinuousFunction

section

variable {f g : C(Œ±, Œ≤)} {C : ‚Ñù}

/-- The pointwise distance is controlled by the distance between functions, by definition. -/
theorem dist_apply_le_dist (x : Œ±) : dist (f x) (g x) ‚â§ dist f g := by
  simp only [‚Üê dist_mkOfCompact, dist_coe_le_dist, ‚Üê mkOfCompact_apply]

/-- The distance between two functions is controlled by the supremum of the pointwise distances. -/
theorem dist_le (C0 : (0 : ‚Ñù) ‚â§ C) : dist f g ‚â§ C ‚Üî ‚àÄ x : Œ±, dist (f x) (g x) ‚â§ C := by
  simp only [‚Üê dist_mkOfCompact, BoundedContinuousFunction.dist_le C0, mkOfCompact_apply]

theorem dist_le_iff_of_nonempty [Nonempty Œ±] : dist f g ‚â§ C ‚Üî ‚àÄ x, dist (f x) (g x) ‚â§ C := by
  simp only [‚Üê dist_mkOfCompact, BoundedContinuousFunction.dist_le_iff_of_nonempty,
    mkOfCompact_apply]

theorem dist_lt_iff_of_nonempty [Nonempty Œ±] : dist f g < C ‚Üî ‚àÄ x : Œ±, dist (f x) (g x) < C := by
  simp only [‚Üê dist_mkOfCompact, dist_lt_iff_of_nonempty_compact, mkOfCompact_apply]

theorem dist_lt_of_nonempty [Nonempty Œ±] (w : ‚àÄ x : Œ±, dist (f x) (g x) < C) : dist f g < C :=
  dist_lt_iff_of_nonempty.2 w

theorem dist_lt_iff (C0 : (0 : ‚Ñù) < C) : dist f g < C ‚Üî ‚àÄ x : Œ±, dist (f x) (g x) < C := by
  rw [‚Üê dist_mkOfCompact, dist_lt_iff_of_compact C0]
  simp only [mkOfCompact_apply]

end

-- TODO at some point we will need lemmas characterising this norm!
-- At the moment the only way to reason about it is to transfer `f : C(Œ±,E)` back to `Œ± ‚Üí·µá E`.
instance : Norm C(Œ±, E) where norm x := dist x 0

@[simp]
theorem _root_.BoundedContinuousFunction.norm_mkOfCompact (f : C(Œ±, E)) : ‚ÄñmkOfCompact f‚Äñ = ‚Äñf‚Äñ :=
  rfl

@[simp]
theorem _root_.BoundedContinuousFunction.norm_toContinuousMap_eq (f : Œ± ‚Üí·µá E) :
    ‚Äñf.toContinuousMap‚Äñ = ‚Äñf‚Äñ :=
  rfl

open BoundedContinuousFunction

instance : NormedAddCommGroup C(Œ±, E) :=
  { ContinuousMap.metricSpace _ _,
    ContinuousMap.instAddCommGroupContinuousMap with
    dist_eq := fun x y => by
      rw [‚Üê norm_mkOfCompact, ‚Üê dist_mkOfCompact, dist_eq_norm, mkOfCompact_sub]
    dist := dist
    norm := norm }

instance [Nonempty Œ±] [One E] [NormOneClass E] : NormOneClass C(Œ±, E) where
  norm_one := by simp only [‚Üê norm_mkOfCompact, mkOfCompact_one, norm_one]

section

variable (f : C(Œ±, E))

-- The corresponding lemmas for `BoundedContinuousFunction` are stated with `{f}`,
-- and so can not be used in dot notation.
theorem norm_coe_le_norm (x : Œ±) : ‚Äñf x‚Äñ ‚â§ ‚Äñf‚Äñ :=
  (mkOfCompact f).norm_coe_le_norm x

/-- Distance between the images of any two points is at most twice the norm of the function. -/
theorem dist_le_two_norm (x y : Œ±) : dist (f x) (f y) ‚â§ 2 * ‚Äñf‚Äñ :=
  (mkOfCompact f).dist_le_two_norm x y

/-- The norm of a function is controlled by the supremum of the pointwise norms. -/
theorem norm_le {C : ‚Ñù} (C0 : (0 : ‚Ñù) ‚â§ C) : ‚Äñf‚Äñ ‚â§ C ‚Üî ‚àÄ x : Œ±, ‚Äñf x‚Äñ ‚â§ C :=
  @BoundedContinuousFunction.norm_le _ _ _ _ (mkOfCompact f) _ C0

theorem norm_le_of_nonempty [Nonempty Œ±] {M : ‚Ñù} : ‚Äñf‚Äñ ‚â§ M ‚Üî ‚àÄ x, ‚Äñf x‚Äñ ‚â§ M :=
  @BoundedContinuousFunction.norm_le_of_nonempty _ _ _ _ _ (mkOfCompact f) _

theorem norm_lt_iff {M : ‚Ñù} (M0 : 0 < M) : ‚Äñf‚Äñ < M ‚Üî ‚àÄ x, ‚Äñf x‚Äñ < M :=
  @BoundedContinuousFunction.norm_lt_iff_of_compact _ _ _ _ _ (mkOfCompact f) _ M0

theorem nnnorm_lt_iff {M : ‚Ñù‚â•0} (M0 : 0 < M) : ‚Äñf‚Äñ‚Çä < M ‚Üî ‚àÄ x : Œ±, ‚Äñf x‚Äñ‚Çä < M :=
  f.norm_lt_iff M0

theorem norm_lt_iff_of_nonempty [Nonempty Œ±] {M : ‚Ñù} : ‚Äñf‚Äñ < M ‚Üî ‚àÄ x, ‚Äñf x‚Äñ < M :=
  @BoundedContinuousFunction.norm_lt_iff_of_nonempty_compact _ _ _ _ _ _ (mkOfCompact f) _

theorem nnnorm_lt_iff_of_nonempty [Nonempty Œ±] {M : ‚Ñù‚â•0} : ‚Äñf‚Äñ‚Çä < M ‚Üî ‚àÄ x, ‚Äñf x‚Äñ‚Çä < M :=
  f.norm_lt_iff_of_nonempty

theorem apply_le_norm (f : C(Œ±, ‚Ñù)) (x : Œ±) : f x ‚â§ ‚Äñf‚Äñ :=
  le_trans (le_abs.mpr (Or.inl (le_refl (f x)))) (f.norm_coe_le_norm x)

theorem neg_norm_le_apply (f : C(Œ±, ‚Ñù)) (x : Œ±) : -‚Äñf‚Äñ ‚â§ f x :=
  le_trans (neg_le_neg (f.norm_coe_le_norm x)) (neg_le.mp (neg_le_abs (f x)))

theorem norm_eq_iSup_norm : ‚Äñf‚Äñ = ‚®Ü x : Œ±, ‚Äñf x‚Äñ :=
  (mkOfCompact f).norm_eq_iSup_norm

theorem norm_restrict_mono_set {X : Type*} [TopologicalSpace X] (f : C(X, E))
    {K L : TopologicalSpace.Compacts X} (hKL : K ‚â§ L) : ‚Äñf.restrict K‚Äñ ‚â§ ‚Äñf.restrict L‚Äñ :=
  (norm_le _ (norm_nonneg _)).mpr fun x => norm_coe_le_norm (f.restrict L) <| Set.inclusion hKL x

end

section

variable {R : Type*} [NormedRing R]

instance : NormedRing C(Œ±, R) :=
  { (inferInstance : NormedAddCommGroup C(Œ±, R)), ContinuousMap.instRing with
    norm_mul := fun f g => norm_mul_le (mkOfCompact f) (mkOfCompact g) }

end

section

variable {ùïú : Type*} [NormedField ùïú] [NormedSpace ùïú E]

instance normedSpace : NormedSpace ùïú C(Œ±, E) where
  norm_smul_le c f := (norm_smul_le c (mkOfCompact f) : _)

section

variable (Œ± ùïú E)

/-- When `Œ±` is compact and `ùïú` is a normed field,
the `ùïú`-algebra of bounded continuous maps `Œ± ‚Üí·µá Œ≤` is
`ùïú`-linearly isometric to `C(Œ±, Œ≤)`.
-/
def linearIsometryBoundedOfCompact : C(Œ±, E) ‚âÉ‚Çó·µ¢[ùïú] Œ± ‚Üí·µá E :=
  { addEquivBoundedOfCompact Œ± E with
    map_smul' := fun c f => by
      ext
      norm_cast
    norm_map' := fun f => rfl }

variable {Œ± E}

-- to match `BoundedContinuousFunction.evalCLM`
/-- The evaluation at a point, as a continuous linear map from `C(Œ±, ùïú)` to `ùïú`. -/
def evalCLM (x : Œ±) : C(Œ±, E) ‚ÜíL[ùïú] E :=
  (BoundedContinuousFunction.evalCLM ùïú x).comp
    (linearIsometryBoundedOfCompact Œ± E ùïú).toLinearIsometry.toContinuousLinearMap

end

-- this lemma and the next are the analogues of those autogenerated by `@[simps]` for
-- `equivBoundedOfCompact`, `addEquivBoundedOfCompact`
@[simp]
theorem linearIsometryBoundedOfCompact_symm_apply (f : Œ± ‚Üí·µá E) :
    (linearIsometryBoundedOfCompact Œ± E ùïú).symm f = f.toContinuousMap :=
  rfl

@[simp]
theorem linearIsometryBoundedOfCompact_apply_apply (f : C(Œ±, E)) (a : Œ±) :
    (linearIsometryBoundedOfCompact Œ± E ùïú f) a = f a :=
  rfl

@[simp]
theorem linearIsometryBoundedOfCompact_toIsometryEquiv :
    (linearIsometryBoundedOfCompact Œ± E ùïú).toIsometryEquiv = isometryEquivBoundedOfCompact Œ± E :=
  rfl

@[simp] -- Porting note: adjusted LHS because `simpNF` complained it simplified.
theorem linearIsometryBoundedOfCompact_toAddEquiv :
    ((linearIsometryBoundedOfCompact Œ± E ùïú).toLinearEquiv : C(Œ±, E) ‚âÉ+ (Œ± ‚Üí·µá E)) =
      addEquivBoundedOfCompact Œ± E :=
  rfl

@[simp]
theorem linearIsometryBoundedOfCompact_of_compact_toEquiv :
    (linearIsometryBoundedOfCompact Œ± E ùïú).toLinearEquiv.toEquiv = equivBoundedOfCompact Œ± E :=
  rfl

end

section

variable {ùïú : Type*} {Œ≥ : Type*} [NormedField ùïú] [NormedRing Œ≥] [NormedAlgebra ùïú Œ≥]

instance : NormedAlgebra ùïú C(Œ±, Œ≥) :=
  { ContinuousMap.normedSpace, ContinuousMap.algebra with }

end

end ContinuousMap

namespace ContinuousMap

section UniformContinuity

variable {Œ± Œ≤ : Type*}
variable [MetricSpace Œ±] [CompactSpace Œ±] [MetricSpace Œ≤]

/-!
We now set up some declarations making it convenient to use uniform continuity.
-/


theorem uniform_continuity (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) :
    ‚àÉ Œ¥ > 0, ‚àÄ {x y}, dist x y < Œ¥ ‚Üí dist (f x) (f y) < Œµ :=
  Metric.uniformContinuous_iff.mp (CompactSpace.uniformContinuous_of_continuous f.continuous) Œµ h

-- This definition allows us to separate the choice of some `Œ¥`,
-- and the corresponding use of `dist a b < Œ¥ ‚Üí dist (f a) (f b) < Œµ`,
-- even across different declarations.
/-- An arbitrarily chosen modulus of uniform continuity for a given function `f` and `Œµ > 0`. -/
def modulus (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) : ‚Ñù :=
  Classical.choose (uniform_continuity f Œµ h)

theorem modulus_pos (f : C(Œ±, Œ≤)) {Œµ : ‚Ñù} {h : 0 < Œµ} : 0 < f.modulus Œµ h :=
  (Classical.choose_spec (uniform_continuity f Œµ h)).1

theorem dist_lt_of_dist_lt_modulus (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) {a b : Œ±}
    (w : dist a b < f.modulus Œµ h) : dist (f a) (f b) < Œµ :=
  (Classical.choose_spec (uniform_continuity f Œµ h)).2 w

end UniformContinuity

end ContinuousMap

section CompLeft

variable (X : Type*) {ùïú Œ≤ Œ≥ : Type*} [TopologicalSpace X] [CompactSpace X]
  [NontriviallyNormedField ùïú]

variable [NormedAddCommGroup Œ≤] [NormedSpace ùïú Œ≤] [NormedAddCommGroup Œ≥] [NormedSpace ùïú Œ≥]

open ContinuousMap

/-- Postcomposition of continuous functions into a normed module by a continuous linear map is a
continuous linear map.
Transferred version of `ContinuousLinearMap.compLeftContinuousBounded`,
upgraded version of `ContinuousLinearMap.compLeftContinuous`,
similar to `LinearMap.compLeft`. -/
protected def ContinuousLinearMap.compLeftContinuousCompact (g : Œ≤ ‚ÜíL[ùïú] Œ≥) :
    C(X, Œ≤) ‚ÜíL[ùïú] C(X, Œ≥) :=
  (linearIsometryBoundedOfCompact X Œ≥ ùïú).symm.toLinearIsometry.toContinuousLinearMap.comp <|
    (g.compLeftContinuousBounded X).comp <|
      (linearIsometryBoundedOfCompact X Œ≤ ùïú).toLinearIsometry.toContinuousLinearMap

@[simp]
theorem ContinuousLinearMap.toLinear_compLeftContinuousCompact (g : Œ≤ ‚ÜíL[ùïú] Œ≥) :
    (g.compLeftContinuousCompact X : C(X, Œ≤) ‚Üí‚Çó[ùïú] C(X, Œ≥)) = g.compLeftContinuous ùïú X := by
  ext f
  rfl

@[simp]
theorem ContinuousLinearMap.compLeftContinuousCompact_apply (g : Œ≤ ‚ÜíL[ùïú] Œ≥) (f : C(X, Œ≤)) (x : X) :
    g.compLeftContinuousCompact X f x = g (f x) :=
  rfl

end CompLeft

namespace ContinuousMap

/-!
We now setup variations on `compRight* f`, where `f : C(X, Y)`
(that is, precomposition by a continuous map),
as a morphism `C(Y, T) ‚Üí C(X, T)`, respecting various types of structure.

In particular:
* `compRightContinuousMap`, the bundled continuous map (for this we need `X Y` compact).
* `compRightHomeomorph`, when we precompose by a homeomorphism.
* `compRightAlgHom`, when `T = R` is a topological ring.
-/


section CompRight

/-- Precomposition by a continuous map is itself a continuous map between spaces of continuous maps.
-/
def compRightContinuousMap {X Y : Type*} (T : Type*) [TopologicalSpace X] [CompactSpace X]
    [TopologicalSpace Y] [CompactSpace Y] [MetricSpace T] (f : C(X, Y)) : C(C(Y, T), C(X, T)) where
  toFun g := g.comp f
  continuous_toFun := by
    refine Metric.continuous_iff.mpr ?_
    intro g Œµ Œµ_pos
    refine ‚ü®Œµ, Œµ_pos, fun g' h => ?_‚ü©
    rw [ContinuousMap.dist_lt_iff Œµ_pos] at h ‚ä¢
    exact fun x => h (f x)

@[simp]
theorem compRightContinuousMap_apply {X Y : Type*} (T : Type*) [TopologicalSpace X]
    [CompactSpace X] [TopologicalSpace Y] [CompactSpace Y] [MetricSpace T] (f : C(X, Y))
    (g : C(Y, T)) : (compRightContinuousMap T f) g = g.comp f :=
  rfl

/-- Precomposition by a homeomorphism is itself a homeomorphism between spaces of continuous maps.
-/
def compRightHomeomorph {X Y : Type*} (T : Type*) [TopologicalSpace X] [CompactSpace X]
    [TopologicalSpace Y] [CompactSpace Y] [MetricSpace T] (f : X ‚âÉ‚Çú Y) : C(Y, T) ‚âÉ‚Çú C(X, T) where
  toFun := compRightContinuousMap T f.toContinuousMap
  invFun := compRightContinuousMap T f.symm.toContinuousMap
  left_inv g := ext fun _ => congr_arg g (f.apply_symm_apply _)
  right_inv g := ext fun _ => congr_arg g (f.symm_apply_apply _)

theorem compRightAlgHom_continuous {X Y : Type*} (R A : Type*) [TopologicalSpace X]
    [CompactSpace X] [TopologicalSpace Y] [CompactSpace Y] [CommSemiring R] [Semiring A]
    [MetricSpace A] [TopologicalSemiring A] [Algebra R A] (f : C(X, Y)) :
    Continuous (compRightAlgHom R A f) :=
  map_continuous (compRightContinuousMap A f)

end CompRight

section LocalNormalConvergence

/-! ### Local normal convergence

A sum of continuous functions (on a locally compact space) is "locally normally convergent" if the
sum of its sup-norms on any compact subset is summable. This implies convergence in the topology
of `C(X, E)` (i.e. locally uniform convergence). -/


open TopologicalSpace

variable {X : Type*} [TopologicalSpace X] [LocallyCompactSpace X]
variable {E : Type*} [NormedAddCommGroup E] [CompleteSpace E]

theorem summable_of_locally_summable_norm {Œπ : Type*} {F : Œπ ‚Üí C(X, E)}
    (hF : ‚àÄ K : Compacts X, Summable fun i => ‚Äñ(F i).restrict K‚Äñ) : Summable F := by
  classical
  refine (ContinuousMap.exists_tendsto_compactOpen_iff_forall _).2 fun K hK => ?_
  lift K to Compacts X using hK
  have A : ‚àÄ s : Finset Œπ, restrict (‚ÜëK) (‚àë i ‚àà s, F i) = ‚àë i ‚àà s, restrict K (F i) := by
    intro s
    ext1 x
    simp
    -- This used to be the end of the proof before leanprover/lean4#2644
    erw [restrict_apply, restrict_apply, restrict_apply, restrict_apply]
    simp? says simp only [coe_sum, Finset.sum_apply]
    congr!
  simpa only [HasSum, A] using (hF K).of_norm

end LocalNormalConvergence

/-!
### Star structures

In this section, if `Œ≤` is a normed ‚ãÜ-group, then so is the space of
continuous functions from `Œ±` to `Œ≤`, by using the star operation pointwise.

Furthermore, if `Œ±` is compact and `Œ≤` is a C‚ãÜ-ring, then `C(Œ±, Œ≤)` is a C‚ãÜ-ring. -/


section NormedSpace

variable {Œ± : Type*} {Œ≤ : Type*}
variable [TopologicalSpace Œ±] [NormedAddCommGroup Œ≤] [StarAddMonoid Œ≤] [NormedStarGroup Œ≤]

theorem _root_.BoundedContinuousFunction.mkOfCompact_star [CompactSpace Œ±] (f : C(Œ±, Œ≤)) :
    mkOfCompact (star f) = star (mkOfCompact f) :=
  rfl

instance [CompactSpace Œ±] : NormedStarGroup C(Œ±, Œ≤) where
  norm_star f := by
    rw [‚Üê BoundedContinuousFunction.norm_mkOfCompact, BoundedContinuousFunction.mkOfCompact_star,
      norm_star, BoundedContinuousFunction.norm_mkOfCompact]

end NormedSpace

section CStarRing

variable {Œ± : Type*} {Œ≤ : Type*}
variable [TopologicalSpace Œ±] [NormedRing Œ≤] [StarRing Œ≤]

instance [CompactSpace Œ±] [CStarRing Œ≤] : CStarRing C(Œ±, Œ≤) where
  norm_mul_self_le f := by
    rw [‚Üê sq, ‚Üê Real.le_sqrt (norm_nonneg _) (norm_nonneg _),
      ContinuousMap.norm_le _ (Real.sqrt_nonneg _)]
    intro x
    rw [Real.le_sqrt (norm_nonneg _) (norm_nonneg _), sq, ‚Üê CStarRing.norm_star_mul_self]
    exact ContinuousMap.norm_coe_le_norm (star f * f) x

end CStarRing

end ContinuousMap
