/-
Copyright (c) 2021 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Heather Macbeth
-/
import Mathlib.Analysis.RCLike.Basic
import Mathlib.Topology.Algebra.StarSubalgebra
import Mathlib.Topology.ContinuousFunction.Weierstrass

#align_import topology.continuous_function.stone_weierstrass from "leanprover-community/mathlib"@"16e59248c0ebafabd5d071b1cd41743eb8698ffb"

/-!
# The Stone-Weierstrass theorem

If a subalgebra `A` of `C(X, ‚Ñù)`, where `X` is a compact topological space,
separates points, then it is dense.

We argue as follows.

* In any subalgebra `A` of `C(X, ‚Ñù)`, if `f ‚àà A`, then `abs f ‚àà A.topologicalClosure`.
  This follows from the Weierstrass approximation theorem on `[-‚Äñf‚Äñ, ‚Äñf‚Äñ]` by
  approximating `abs` uniformly thereon by polynomials.
* This ensures that `A.topologicalClosure` is actually a sublattice:
  if it contains `f` and `g`, then it contains the pointwise supremum `f ‚äî g`
  and the pointwise infimum `f ‚äì g`.
* Any nonempty sublattice `L` of `C(X, ‚Ñù)` which separates points is dense,
  by a nice argument approximating a given `f` above and below using separating functions.
  For each `x y : X`, we pick a function `g x y ‚àà L` so `g x y x = f x` and `g x y y = f y`.
  By continuity these functions remain close to `f` on small patches around `x` and `y`.
  We use compactness to identify a certain finitely indexed infimum of finitely indexed supremums
  which is then close to `f` everywhere, obtaining the desired approximation.
* Finally we put these pieces together. `L = A.topologicalClosure` is a nonempty sublattice
  which separates points since `A` does, and so is dense (in fact equal to `‚ä§`).

We then prove the complex version for star subalgebras `A`, by separately approximating
the real and imaginary parts using the real subalgebra of real-valued functions in `A`
(which still separates points, by taking the norm-square of a separating function).

## Future work

Extend to cover the case of subalgebras of the continuous functions vanishing at infinity,
on non-compact spaces.

-/


noncomputable section

namespace ContinuousMap

variable {X : Type*} [TopologicalSpace X] [CompactSpace X]

open scoped Polynomial

/-- Turn a function `f : C(X, ‚Ñù)` into a continuous map into `Set.Icc (-‚Äñf‚Äñ) (‚Äñf‚Äñ)`,
thereby explicitly attaching bounds.
-/
def attachBound (f : C(X, ‚Ñù)) : C(X, Set.Icc (-‚Äñf‚Äñ) ‚Äñf‚Äñ) where
  toFun x := ‚ü®f x, ‚ü®neg_norm_le_apply f x, apply_le_norm f x‚ü©‚ü©
#align continuous_map.attach_bound ContinuousMap.attachBound

@[simp]
theorem attachBound_apply_coe (f : C(X, ‚Ñù)) (x : X) : ((attachBound f) x : ‚Ñù) = f x :=
  rfl
#align continuous_map.attach_bound_apply_coe ContinuousMap.attachBound_apply_coe

theorem polynomial_comp_attachBound (A : Subalgebra ‚Ñù C(X, ‚Ñù)) (f : A) (g : ‚Ñù[X]) :
    (g.toContinuousMapOn (Set.Icc (-‚Äñf‚Äñ) ‚Äñf‚Äñ)).comp (f : C(X, ‚Ñù)).attachBound =
      Polynomial.aeval f g := by
  ext
  simp only [ContinuousMap.coe_comp, Function.comp_apply, ContinuousMap.attachBound_apply_coe,
    Polynomial.toContinuousMapOn_apply, Polynomial.aeval_subalgebra_coe,
    Polynomial.aeval_continuousMap_apply, Polynomial.toContinuousMap_apply]
  -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
  erw [ContinuousMap.attachBound_apply_coe]
#align continuous_map.polynomial_comp_attach_bound ContinuousMap.polynomial_comp_attachBound

/-- Given a continuous function `f` in a subalgebra of `C(X, ‚Ñù)`, postcomposing by a polynomial
gives another function in `A`.

This lemma proves something slightly more subtle than this:
we take `f`, and think of it as a function into the restricted target `Set.Icc (-‚Äñf‚Äñ) ‚Äñf‚Äñ)`,
and then postcompose with a polynomial function on that interval.
This is in fact the same situation as above, and so also gives a function in `A`.
-/
theorem polynomial_comp_attachBound_mem (A : Subalgebra ‚Ñù C(X, ‚Ñù)) (f : A) (g : ‚Ñù[X]) :
    (g.toContinuousMapOn (Set.Icc (-‚Äñf‚Äñ) ‚Äñf‚Äñ)).comp (f : C(X, ‚Ñù)).attachBound ‚àà A := by
  rw [polynomial_comp_attachBound]
  apply SetLike.coe_mem
#align continuous_map.polynomial_comp_attach_bound_mem ContinuousMap.polynomial_comp_attachBound_mem

theorem comp_attachBound_mem_closure (A : Subalgebra ‚Ñù C(X, ‚Ñù)) (f : A)
    (p : C(Set.Icc (-‚Äñf‚Äñ) ‚Äñf‚Äñ, ‚Ñù)) : p.comp (attachBound (f : C(X, ‚Ñù))) ‚àà A.topologicalClosure := by
  -- `p` itself is in the closure of polynomials, by the Weierstrass theorem,
  have mem_closure : p ‚àà (polynomialFunctions (Set.Icc (-‚Äñf‚Äñ) ‚Äñf‚Äñ)).topologicalClosure :=
    continuousMap_mem_polynomialFunctions_closure _ _ p
  -- and so there are polynomials arbitrarily close.
  have frequently_mem_polynomials := mem_closure_iff_frequently.mp mem_closure
  -- To prove `p.comp (attachBound f)` is in the closure of `A`,
  -- we show there are elements of `A` arbitrarily close.
  apply mem_closure_iff_frequently.mpr
  -- To show that, we pull back the polynomials close to `p`,
  refine'
    ((compRightContinuousMap ‚Ñù (attachBound (f : C(X, ‚Ñù)))).continuousAt
            p).tendsto.frequently_map
      _ _ frequently_mem_polynomials
  -- but need to show that those pullbacks are actually in `A`.
  rintro _ ‚ü®g, ‚ü®-, rfl‚ü©‚ü©
  simp only [SetLike.mem_coe, AlgHom.coe_toRingHom, compRightContinuousMap_apply,
    Polynomial.toContinuousMapOnAlgHom_apply]
  apply polynomial_comp_attachBound_mem
#align continuous_map.comp_attach_bound_mem_closure ContinuousMap.comp_attachBound_mem_closure

theorem abs_mem_subalgebra_closure (A : Subalgebra ‚Ñù C(X, ‚Ñù)) (f : A) :
    |(f : C(X, ‚Ñù))| ‚àà A.topologicalClosure := by
  let f' := attachBound (f : C(X, ‚Ñù))
  let abs : C(Set.Icc (-‚Äñf‚Äñ) ‚Äñf‚Äñ, ‚Ñù) := { toFun := fun x : Set.Icc (-‚Äñf‚Äñ) ‚Äñf‚Äñ => |(x : ‚Ñù)| }
  change abs.comp f' ‚àà A.topologicalClosure
  apply comp_attachBound_mem_closure
#align continuous_map.abs_mem_subalgebra_closure ContinuousMap.abs_mem_subalgebra_closure

theorem inf_mem_subalgebra_closure (A : Subalgebra ‚Ñù C(X, ‚Ñù)) (f g : A) :
    (f : C(X, ‚Ñù)) ‚äì (g : C(X, ‚Ñù)) ‚àà A.topologicalClosure := by
  rw [inf_eq_half_smul_add_sub_abs_sub' ‚Ñù]
  refine'
    A.topologicalClosure.smul_mem
      (A.topologicalClosure.sub_mem
        (A.topologicalClosure.add_mem (A.le_topologicalClosure f.property)
          (A.le_topologicalClosure g.property))
        _)
      _
  exact mod_cast abs_mem_subalgebra_closure A _
#align continuous_map.inf_mem_subalgebra_closure ContinuousMap.inf_mem_subalgebra_closure

theorem inf_mem_closed_subalgebra (A : Subalgebra ‚Ñù C(X, ‚Ñù)) (h : IsClosed (A : Set C(X, ‚Ñù)))
    (f g : A) : (f : C(X, ‚Ñù)) ‚äì (g : C(X, ‚Ñù)) ‚àà A := by
  convert inf_mem_subalgebra_closure A f g
  apply SetLike.ext'
  symm
  erw [closure_eq_iff_isClosed]
  exact h
#align continuous_map.inf_mem_closed_subalgebra ContinuousMap.inf_mem_closed_subalgebra

theorem sup_mem_subalgebra_closure (A : Subalgebra ‚Ñù C(X, ‚Ñù)) (f g : A) :
    (f : C(X, ‚Ñù)) ‚äî (g : C(X, ‚Ñù)) ‚àà A.topologicalClosure := by
  rw [sup_eq_half_smul_add_add_abs_sub' ‚Ñù]
  refine'
    A.topologicalClosure.smul_mem
      (A.topologicalClosure.add_mem
        (A.topologicalClosure.add_mem (A.le_topologicalClosure f.property)
          (A.le_topologicalClosure g.property))
        _)
      _
  exact mod_cast abs_mem_subalgebra_closure A _
#align continuous_map.sup_mem_subalgebra_closure ContinuousMap.sup_mem_subalgebra_closure

theorem sup_mem_closed_subalgebra (A : Subalgebra ‚Ñù C(X, ‚Ñù)) (h : IsClosed (A : Set C(X, ‚Ñù)))
    (f g : A) : (f : C(X, ‚Ñù)) ‚äî (g : C(X, ‚Ñù)) ‚àà A := by
  convert sup_mem_subalgebra_closure A f g
  apply SetLike.ext'
  symm
  erw [closure_eq_iff_isClosed]
  exact h
#align continuous_map.sup_mem_closed_subalgebra ContinuousMap.sup_mem_closed_subalgebra

open scoped Topology

-- Here's the fun part of Stone-Weierstrass!
theorem sublattice_closure_eq_top (L : Set C(X, ‚Ñù)) (nA : L.Nonempty)
    (inf_mem : ‚àÄ·µâ (f ‚àà L) (g ‚àà L), f ‚äì g ‚àà L)
    (sup_mem : ‚àÄ·µâ (f ‚àà L) (g ‚àà L), f ‚äî g ‚àà L) (sep : L.SeparatesPointsStrongly) :
    closure L = ‚ä§ := by
  -- We start by boiling down to a statement about close approximation.
  rw [eq_top_iff]
  rintro f -
  refine'
    Filter.Frequently.mem_closure
      ((Filter.HasBasis.frequently_iff Metric.nhds_basis_ball).mpr fun Œµ pos => _)
  simp only [exists_prop, Metric.mem_ball]
  -- It will be helpful to assume `X` is nonempty later,
  -- so we get that out of the way here.
  by_cases nX : Nonempty X
  swap
  ¬∑ exact ‚ü®nA.some, (dist_lt_iff pos).mpr fun x => False.elim (nX ‚ü®x‚ü©), nA.choose_spec‚ü©
  /-
    The strategy now is to pick a family of continuous functions `g x y` in `A`
    with the property that `g x y x = f x` and `g x y y = f y`
    (this is immediate from `h : SeparatesPointsStrongly`)
    then use continuity to see that `g x y` is close to `f` near both `x` and `y`,
    and finally using compactness to produce the desired function `h`
    as a maximum over finitely many `x` of a minimum over finitely many `y` of the `g x y`.
    -/
  dsimp only [Set.SeparatesPointsStrongly] at sep
  choose g hg w‚ÇÅ w‚ÇÇ using sep f
  -- For each `x y`, we define `U x y` to be `{z | f z - Œµ < g x y z}`,
  -- and observe this is a neighbourhood of `y`.
  let U : X ‚Üí X ‚Üí Set X := fun x y => {z | f z - Œµ < g x y z}
  have U_nhd_y : ‚àÄ x y, U x y ‚àà ùìù y := by
    intro x y
    refine' IsOpen.mem_nhds _ _
    ¬∑ apply isOpen_lt <;> continuity
    ¬∑ rw [Set.mem_setOf_eq, w‚ÇÇ]
      exact sub_lt_self _ pos
  -- Fixing `x` for a moment, we have a family of functions `fun y ‚Ü¶ g x y`
  -- which on different patches (the `U x y`) are greater than `f z - Œµ`.
  -- Taking the supremum of these functions
  -- indexed by a finite collection of patches which cover `X`
  -- will give us an element of `A` that is globally greater than `f z - Œµ`
  -- and still equal to `f x` at `x`.
  -- Since `X` is compact, for every `x` there is some finset `ys t`
  -- so the union of the `U x y` for `y ‚àà ys x` still covers everything.
  let ys : X ‚Üí Finset X := fun x => (CompactSpace.elim_nhds_subcover (U x) (U_nhd_y x)).choose
  let ys_w : ‚àÄ x, ‚ãÉ y ‚àà ys x, U x y = ‚ä§ := fun x =>
    (CompactSpace.elim_nhds_subcover (U x) (U_nhd_y x)).choose_spec
  have ys_nonempty : ‚àÄ x, (ys x).Nonempty := fun x =>
    Set.nonempty_of_union_eq_top_of_nonempty _ _ nX (ys_w x)
  -- Thus for each `x` we have the desired `h x : A` so `f z - Œµ < h x z` everywhere
  -- and `h x x = f x`.
  let h : X ‚Üí L := fun x =>
    ‚ü®(ys x).sup' (ys_nonempty x) fun y => (g x y : C(X, ‚Ñù)),
      Finset.sup'_mem _ sup_mem _ _ _ fun y _ => hg x y‚ü©
  have lt_h : ‚àÄ x z, f z - Œµ < (h x : X ‚Üí ‚Ñù) z := by
    intro x z
    obtain ‚ü®y, ym, zm‚ü© := Set.exists_set_mem_of_union_eq_top _ _ (ys_w x) z
    dsimp
    simp only [Subtype.coe_mk, coe_sup', Finset.sup'_apply, Finset.lt_sup'_iff]
    exact ‚ü®y, ym, zm‚ü©
  have h_eq : ‚àÄ x, (h x : X ‚Üí ‚Ñù) x = f x := by intro x; simp [w‚ÇÅ]
  -- For each `x`, we define `W x` to be `{z | h x z < f z + Œµ}`,
  let W : X ‚Üí Set X := fun x => {z | (h x : X ‚Üí ‚Ñù) z < f z + Œµ}
  -- This is still a neighbourhood of `x`.
  have W_nhd : ‚àÄ x, W x ‚àà ùìù x := by
    intro x
    refine' IsOpen.mem_nhds _ _
    ¬∑ -- Porting note: mathlib3 `continuity` found `continuous_set_coe`
      apply isOpen_lt (continuous_set_coe _ _)
      continuity
    ¬∑ dsimp only [W, Set.mem_setOf_eq]
      rw [h_eq]
      exact lt_add_of_pos_right _ pos
  -- Since `X` is compact, there is some finset `ys t`
  -- so the union of the `W x` for `x ‚àà xs` still covers everything.
  let xs : Finset X := (CompactSpace.elim_nhds_subcover W W_nhd).choose
  let xs_w : ‚ãÉ x ‚àà xs, W x = ‚ä§ := (CompactSpace.elim_nhds_subcover W W_nhd).choose_spec
  have xs_nonempty : xs.Nonempty := Set.nonempty_of_union_eq_top_of_nonempty _ _ nX xs_w
  -- Finally our candidate function is the infimum over `x ‚àà xs` of the `h x`.
  -- This function is then globally less than `f z + Œµ`.
  let k : (L : Type _) :=
    ‚ü®xs.inf' xs_nonempty fun x => (h x : C(X, ‚Ñù)),
      Finset.inf'_mem _ inf_mem _ _ _ fun x _ => (h x).2‚ü©
  refine' ‚ü®k.1, _, k.2‚ü©
  -- We just need to verify the bound, which we do pointwise.
  rw [dist_lt_iff pos]
  intro z
  -- We rewrite into this particular form,
  -- so that simp lemmas about inequalities involving `Finset.inf'` can fire.
  rw [show ‚àÄ a b Œµ : ‚Ñù, dist a b < Œµ ‚Üî a < b + Œµ ‚àß b - Œµ < a by
        intros; simp only [‚Üê Metric.mem_ball, Real.ball_eq_Ioo, Set.mem_Ioo, and_comm]]
  fconstructor
  ¬∑ dsimp
    simp only [Finset.inf'_lt_iff, ContinuousMap.inf'_apply]
    exact Set.exists_set_mem_of_union_eq_top _ _ xs_w z
  ¬∑ dsimp
    simp only [Finset.lt_inf'_iff, ContinuousMap.inf'_apply]
    rintro x -
    apply lt_h
#align continuous_map.sublattice_closure_eq_top ContinuousMap.sublattice_closure_eq_top

/-- The **Stone-Weierstrass Approximation Theorem**,
that a subalgebra `A` of `C(X, ‚Ñù)`, where `X` is a compact topological space,
is dense if it separates points.
-/
theorem subalgebra_topologicalClosure_eq_top_of_separatesPoints (A : Subalgebra ‚Ñù C(X, ‚Ñù))
    (w : A.SeparatesPoints) : A.topologicalClosure = ‚ä§ := by
  -- The closure of `A` is closed under taking `sup` and `inf`,
  -- and separates points strongly (since `A` does),
  -- so we can apply `sublattice_closure_eq_top`.
  apply SetLike.ext'
  let L := A.topologicalClosure
  have n : Set.Nonempty (L : Set C(X, ‚Ñù)) := ‚ü®(1 : C(X, ‚Ñù)), A.le_topologicalClosure A.one_mem‚ü©
  convert
    sublattice_closure_eq_top (L : Set C(X, ‚Ñù)) n
      (fun f fm g gm => inf_mem_closed_subalgebra L A.isClosed_topologicalClosure ‚ü®f, fm‚ü© ‚ü®g, gm‚ü©)
      (fun f fm g gm => sup_mem_closed_subalgebra L A.isClosed_topologicalClosure ‚ü®f, fm‚ü© ‚ü®g, gm‚ü©)
      (Subalgebra.SeparatesPoints.strongly
        (Subalgebra.separatesPoints_monotone A.le_topologicalClosure w))
  simp [L]
#align continuous_map.subalgebra_topological_closure_eq_top_of_separates_points ContinuousMap.subalgebra_topologicalClosure_eq_top_of_separatesPoints

/-- An alternative statement of the Stone-Weierstrass theorem.

If `A` is a subalgebra of `C(X, ‚Ñù)` which separates points (and `X` is compact),
every real-valued continuous function on `X` is a uniform limit of elements of `A`.
-/
theorem continuousMap_mem_subalgebra_closure_of_separatesPoints (A : Subalgebra ‚Ñù C(X, ‚Ñù))
    (w : A.SeparatesPoints) (f : C(X, ‚Ñù)) : f ‚àà A.topologicalClosure := by
  rw [subalgebra_topologicalClosure_eq_top_of_separatesPoints A w]
  simp
#align continuous_map.continuous_map_mem_subalgebra_closure_of_separates_points ContinuousMap.continuousMap_mem_subalgebra_closure_of_separatesPoints

/-- An alternative statement of the Stone-Weierstrass theorem,
for those who like their epsilons.

If `A` is a subalgebra of `C(X, ‚Ñù)` which separates points (and `X` is compact),
every real-valued continuous function on `X` is within any `Œµ > 0` of some element of `A`.
-/
theorem exists_mem_subalgebra_near_continuousMap_of_separatesPoints (A : Subalgebra ‚Ñù C(X, ‚Ñù))
    (w : A.SeparatesPoints) (f : C(X, ‚Ñù)) (Œµ : ‚Ñù) (pos : 0 < Œµ) :
    ‚àÉ g : A, ‚Äñ(g : C(X, ‚Ñù)) - f‚Äñ < Œµ := by
  have w :=
    mem_closure_iff_frequently.mp (continuousMap_mem_subalgebra_closure_of_separatesPoints A w f)
  rw [Metric.nhds_basis_ball.frequently_iff] at w
  obtain ‚ü®g, H, m‚ü© := w Œµ pos
  rw [Metric.mem_ball, dist_eq_norm] at H
  exact ‚ü®‚ü®g, m‚ü©, H‚ü©
#align continuous_map.exists_mem_subalgebra_near_continuous_map_of_separates_points ContinuousMap.exists_mem_subalgebra_near_continuousMap_of_separatesPoints

/-- An alternative statement of the Stone-Weierstrass theorem,
for those who like their epsilons and don't like bundled continuous functions.

If `A` is a subalgebra of `C(X, ‚Ñù)` which separates points (and `X` is compact),
every real-valued continuous function on `X` is within any `Œµ > 0` of some element of `A`.
-/
theorem exists_mem_subalgebra_near_continuous_of_separatesPoints (A : Subalgebra ‚Ñù C(X, ‚Ñù))
    (w : A.SeparatesPoints) (f : X ‚Üí ‚Ñù) (c : Continuous f) (Œµ : ‚Ñù) (pos : 0 < Œµ) :
    ‚àÉ g : A, ‚àÄ x, ‚Äñ(g : X ‚Üí ‚Ñù) x - f x‚Äñ < Œµ := by
  obtain ‚ü®g, b‚ü© := exists_mem_subalgebra_near_continuousMap_of_separatesPoints A w ‚ü®f, c‚ü© Œµ pos
  use g
  rwa [norm_lt_iff _ pos] at b
#align continuous_map.exists_mem_subalgebra_near_continuous_of_separates_points ContinuousMap.exists_mem_subalgebra_near_continuous_of_separatesPoints

end ContinuousMap

section RCLike

open RCLike

-- Redefine `X`, since for the next lemma it need not be compact
variable {ùïú : Type*} {X : Type*} [RCLike ùïú] [TopologicalSpace X]

open ContinuousMap

/- a post-port refactor eliminated `conjInvariantSubalgebra`, which was only used to
state and prove the Stone-Weierstrass theorem, in favor of using `StarSubalgebra`s,
which didn't exist at the time Stone-Weierstrass was written. -/
#noalign continuous_map.conj_invariant_subalgebra
#noalign continuous_map.mem_conj_invariant_subalgebra
#noalign continuous_map.subalgebra_conj_invariant


/-- If a star subalgebra of `C(X, ùïú)` separates points, then the real subalgebra
of its purely real-valued elements also separates points. -/
theorem Subalgebra.SeparatesPoints.rclike_to_real {A : StarSubalgebra ùïú C(X, ùïú)}
    (hA : A.SeparatesPoints) :
      ((A.restrictScalars ‚Ñù).comap
        (ofRealAm.compLeftContinuous ‚Ñù continuous_ofReal)).SeparatesPoints := by
  intro x‚ÇÅ x‚ÇÇ hx
  -- Let `f` in the subalgebra `A` separate the points `x‚ÇÅ`, `x‚ÇÇ`
  obtain ‚ü®_, ‚ü®f, hfA, rfl‚ü©, hf‚ü© := hA hx
  let F : C(X, ùïú) := f - const _ (f x‚ÇÇ)
  -- Subtract the constant `f x‚ÇÇ` from `f`; this is still an element of the subalgebra
  have hFA : F ‚àà A := by
    refine' A.sub_mem hfA (@Eq.subst _ (¬∑ ‚àà A) _ _ _ <| A.smul_mem A.one_mem <| f x‚ÇÇ)
    ext1
    simp only [coe_smul, coe_one, smul_apply, one_apply, Algebra.id.smul_eq_mul, mul_one,
      const_apply]
  -- Consider now the function `fun x ‚Ü¶ |f x - f x‚ÇÇ| ^ 2`
  refine' ‚ü®_, ‚ü®‚ü®(‚ÄñF ¬∑‚Äñ ^ 2), by continuity‚ü©, _, rfl‚ü©, _‚ü©
  ¬∑ -- This is also an element of the subalgebra, and takes only real values
    rw [SetLike.mem_coe, Subalgebra.mem_comap]
    convert (A.restrictScalars ‚Ñù).mul_mem hFA (star_mem hFA : star F ‚àà A)
    ext1
    simp [‚Üê RCLike.mul_conj]
  ¬∑ -- And it also separates the points `x‚ÇÅ`, `x‚ÇÇ`
    simpa [F] using sub_ne_zero.mpr hf
#align subalgebra.separates_points.is_R_or_C_to_real Subalgebra.SeparatesPoints.rclike_to_real

variable [CompactSpace X]

/-- The Stone-Weierstrass approximation theorem, `RCLike` version, that a star subalgebra `A` of
`C(X, ùïú)`, where `X` is a compact topological space and `RCLike ùïú`, is dense if it separates
points. -/
theorem ContinuousMap.starSubalgebra_topologicalClosure_eq_top_of_separatesPoints
    (A : StarSubalgebra ùïú C(X, ùïú)) (hA : A.SeparatesPoints) : A.topologicalClosure = ‚ä§ := by
  rw [StarSubalgebra.eq_top_iff]
  -- Let `I` be the natural inclusion of `C(X, ‚Ñù)` into `C(X, ùïú)`
  let I : C(X, ‚Ñù) ‚Üí‚Çó[‚Ñù] C(X, ùïú) := ofRealCLM.compLeftContinuous ‚Ñù X
  -- The main point of the proof is that its range (i.e., every real-valued function) is contained
  -- in the closure of `A`
  have key : LinearMap.range I ‚â§ (A.toSubmodule.restrictScalars ‚Ñù).topologicalClosure := by
    -- Let `A‚ÇÄ` be the subalgebra of `C(X, ‚Ñù)` consisting of `A`'s purely real elements; it is the
    -- preimage of `A` under `I`.  In this argument we only need its submodule structure.
    let A‚ÇÄ : Submodule ‚Ñù C(X, ‚Ñù) := (A.toSubmodule.restrictScalars ‚Ñù).comap I
    -- By `Subalgebra.SeparatesPoints.rclike_to_real`, this subalgebra also separates points, so
    -- we may apply the real Stone-Weierstrass result to it.
    have SW : A‚ÇÄ.topologicalClosure = ‚ä§ :=
      haveI := subalgebra_topologicalClosure_eq_top_of_separatesPoints _ hA.rclike_to_real
      congr_arg Subalgebra.toSubmodule this
    rw [‚Üê Submodule.map_top, ‚Üê SW]
    -- So it suffices to prove that the image under `I` of the closure of `A‚ÇÄ` is contained in the
    -- closure of `A`, which follows by abstract nonsense
    have h‚ÇÅ := A‚ÇÄ.topologicalClosure_map ((@ofRealCLM ùïú _).compLeftContinuousCompact X)
    have h‚ÇÇ := (A.toSubmodule.restrictScalars ‚Ñù).map_comap_le I
    exact h‚ÇÅ.trans (Submodule.topologicalClosure_mono h‚ÇÇ)
  -- In particular, for a function `f` in `C(X, ùïú)`, the real and imaginary parts of `f` are in the
  -- closure of `A`
  intro f
  let f_re : C(X, ‚Ñù) := (‚ü®RCLike.re, RCLike.reCLM.continuous‚ü© : C(ùïú, ‚Ñù)).comp f
  let f_im : C(X, ‚Ñù) := (‚ü®RCLike.im, RCLike.imCLM.continuous‚ü© : C(ùïú, ‚Ñù)).comp f
  have h_f_re : I f_re ‚àà A.topologicalClosure := key ‚ü®f_re, rfl‚ü©
  have h_f_im : I f_im ‚àà A.topologicalClosure := key ‚ü®f_im, rfl‚ü©
  -- So `f_re + I ‚Ä¢ f_im` is in the closure of `A`
  have := A.topologicalClosure.add_mem h_f_re (A.topologicalClosure.smul_mem h_f_im RCLike.I)
  rw [StarSubalgebra.mem_toSubalgebra] at this
  convert this
  -- And this, of course, is just `f`
  ext
  apply Eq.symm
  simp [I, f_re, f_im, mul_comm RCLike.I _]
#align continuous_map.subalgebra_is_R_or_C_topological_closure_eq_top_of_separates_points ContinuousMap.starSubalgebra_topologicalClosure_eq_top_of_separatesPoints‚Çì

end RCLike

section PolynomialFunctions

open StarSubalgebra Polynomial
open scoped Polynomial

/-- Polynomial functions in are dense in `C(s, ‚Ñù)` when `s` is compact.

See `polynomialFunctions_closure_eq_top` for the special case `s = Set.Icc a b` which does not use
the full Stone-Weierstrass theorem. Of course, that version could be used to prove this one as
well. -/
theorem polynomialFunctions.topologicalClosure (s : Set ‚Ñù)
    [CompactSpace s] : (polynomialFunctions s).topologicalClosure = ‚ä§ :=
  ContinuousMap.subalgebra_topologicalClosure_eq_top_of_separatesPoints _
    (polynomialFunctions_separatesPoints s)

/-- The star subalgebra generated by polynomials functions is dense in `C(s, ùïú)` when `s` is
compact and `ùïú` is either `‚Ñù` or `‚ÑÇ`. -/
theorem polynomialFunctions.starClosure_topologicalClosure {ùïú : Type*} [RCLike ùïú] (s : Set ùïú)
    [CompactSpace s] : (polynomialFunctions s).starClosure.topologicalClosure = ‚ä§ :=
  ContinuousMap.starSubalgebra_topologicalClosure_eq_top_of_separatesPoints _
    (Subalgebra.separatesPoints_monotone le_sup_left (polynomialFunctions_separatesPoints s))

/-- Continuous algebra homomorphisms from `C(s, ‚Ñù)` into an `‚Ñù`-algebra `A` which agree
at `X : ùïú[X]` (interpreted as a continuous map) are, in fact, equal. -/
@[ext]
theorem ContinuousMap.algHom_ext_map_X {A : Type*} [Ring A]
    [Algebra ‚Ñù A] [TopologicalSpace A] [T2Space A] {s : Set ‚Ñù} [CompactSpace s]
    {œÜ œà : C(s, ‚Ñù) ‚Üí‚Çê[‚Ñù] A} (hœÜ : Continuous œÜ) (hœà : Continuous œà)
    (h : œÜ (toContinuousMapOnAlgHom s X) = œà (toContinuousMapOnAlgHom s X)) : œÜ = œà := by
  suffices (‚ä§ : Subalgebra ‚Ñù C(s, ‚Ñù)) ‚â§ AlgHom.equalizer œÜ œà from
    AlgHom.ext fun x => this (by trivial)
  rw [‚Üê polynomialFunctions.topologicalClosure s]
  exact Subalgebra.topologicalClosure_minimal (polynomialFunctions s)
    (polynomialFunctions.le_equalizer s œÜ œà h) (isClosed_eq hœÜ hœà)

/-- Continuous star algebra homomorphisms from `C(s, ùïú)` into a star `ùïú`-algebra `A` which agree
at `X : ùïú[X]` (interpreted as a continuous map) are, in fact, equal. -/
@[ext]
theorem ContinuousMap.starAlgHom_ext_map_X {ùïú A : Type*} [RCLike ùïú] [Ring A] [StarRing A]
    [Algebra ùïú A] [TopologicalSpace A] [T2Space A] {s : Set ùïú} [CompactSpace s]
    {œÜ œà : C(s, ùïú) ‚Üí‚ãÜ‚Çê[ùïú] A} (hœÜ : Continuous œÜ) (hœà : Continuous œà)
    (h : œÜ (toContinuousMapOnAlgHom s X) = œà (toContinuousMapOnAlgHom s X)) : œÜ = œà := by
  suffices (‚ä§ : StarSubalgebra ùïú C(s, ùïú)) ‚â§ StarAlgHom.equalizer œÜ œà from
    StarAlgHom.ext fun x => this mem_top
  rw [‚Üê polynomialFunctions.starClosure_topologicalClosure s]
  exact StarSubalgebra.topologicalClosure_minimal
    (polynomialFunctions.starClosure_le_equalizer s œÜ œà h) (isClosed_eq hœÜ hœà)

end PolynomialFunctions
