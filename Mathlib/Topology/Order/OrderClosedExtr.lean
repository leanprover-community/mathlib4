/-
Copyright (c) 2024 Bj√∏rn Kjos-Hanssen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bj√∏rn Kjos-Hanssen, Patrick Massot
-/

import Mathlib.Topology.Order.OrderClosed
import Mathlib.Topology.Order.LocalExtr

/-!
# Local maxima from monotonicity and antitonicityOrder-closed topologies

In this file we prove a lemma that is useful for the First Derivative Test in calculus,
and its dual.

## Main statements

* `isLocalMax_of_mono_anti` : if a function `f` is monotone to the left of `x`
  and antitone to the right of `x` then `f` has a local maximum at `x`.

* `isLocalMin_of_anti_mono` : the dual statement for minima.

* `isLocalMax_of_mono_anti'` : a version of `isLocalMax_of_mono_anti` for filters.

* `isLocalMin_of_anti_mono'` : a version of `isLocalMax_of_mono_anti'` for minima.

-/

open Set Topology Filter

/-- If `f` is monotone on `(a,b]` and antitone on `[b,c)` then `f` has
a local maximum at `b`. -/
lemma isLocalMax_of_mono_anti.{u, v}
    {Œ± : Type u} [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderClosedTopology Œ±]
    {Œ≤ : Type v} [Preorder Œ≤]
    {a b c : Œ±} (g‚ÇÄ : a < b) (g‚ÇÅ : b < c) {f : Œ± ‚Üí Œ≤}
    (h‚ÇÄ : MonotoneOn f (Ioc a b))
    (h‚ÇÅ : AntitoneOn f (Ico b c)) : IsLocalMax f b :=
  mem_of_superset (Ioo_mem_nhds g‚ÇÄ g‚ÇÅ) (fun x _ => by rcases le_total x b <;> aesop)

/-- If `f` is antitone on `(a,b]` and monotone on `[b,c)` then `f` has
a local minimum at `b`. -/
lemma isLocalMin_of_anti_mono.{u, v}
    {Œ± : Type u} [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderClosedTopology Œ±]
    {Œ≤ : Type v} [Preorder Œ≤] {a b c : Œ±} (g‚ÇÄ : a < b) (g‚ÇÅ : b < c) {f : Œ± ‚Üí Œ≤}
    (h‚ÇÄ : AntitoneOn f (Ioc a b)) (h‚ÇÅ : MonotoneOn f (Ico b c)) : IsLocalMin f b :=
  mem_of_superset (Ioo_mem_nhds g‚ÇÄ g‚ÇÅ) (fun x hx => by rcases le_total x b  <;> aesop)

/-- If `L` and `R` are neighborhoods of `b` within sets whose union is `Set.univ`, then
`L ‚à™ R` is a neighborhood of `b`. -/
theorem union_mem_nhds_of_mem_nhdsWithin.{u} {Œ± : Type u} [TopologicalSpace Œ±] {b : Œ±}
    {I‚ÇÅ I‚ÇÇ : Set Œ±} (h : ‚àÄ x, x ‚àà I‚ÇÅ ‚à™ I‚ÇÇ)
    {L : Set Œ±} (hL : L ‚àà nhdsWithin b I‚ÇÅ)
    {R : Set Œ±} (hR : R ‚àà nhdsWithin b I‚ÇÇ) : L ‚à™ R ‚àà nhds b := by
  rcases mem_nhdsWithin_iff_exists_mem_nhds_inter.1 hL with ‚ü®s, s_in, sL‚ü©
  rcases mem_nhdsWithin_iff_exists_mem_nhds_inter.1 hR with ‚ü®t, t_in, tR‚ü©
  apply mem_of_superset (inter_mem s_in t_in)
  refine fun ‚¶Éx‚¶Ñ hx ‚Ü¶ (h x).elim ?_ ?_ <;> aesop

/-- Obtain a "predictably-sided" neighborhood of `b` from two one-sided neighborhoods. -/
theorem nhds_of_Ici_Iic.{u} {Œ± : Type u} [TopologicalSpace Œ±] [LinearOrder Œ±] {b : Œ±}
    {L : Set Œ±} (hL : L ‚àà ùìù[‚â§] b)
    {R : Set Œ±} (hR : R ‚àà ùìù[‚â•] b) : L ‚à© Iic b ‚à™ R ‚à© Ici b ‚àà ùìù b :=
  union_mem_nhds_of_mem_nhdsWithin (fun x => le_total x b)
    (inter_mem hL self_mem_nhdsWithin) (inter_mem hR self_mem_nhdsWithin)

/-- If `f` is monotone to the left and antitone to the right, then it has a local maximum. -/
lemma isLocalMax_of_mono_anti'.{u, v} {Œ± : Type u} [TopologicalSpace Œ±] [LinearOrder Œ±]
    {Œ≤ : Type v} [Preorder Œ≤] {b : Œ±} {f : Œ± ‚Üí Œ≤}
    {a : Set Œ±} (ha : a ‚àà ùìù[‚â§] b) {c : Set Œ±} (hc : c ‚àà ùìù[‚â•] b)
    (h‚ÇÄ : MonotoneOn f a) (h‚ÇÅ : AntitoneOn f c) : IsLocalMax f b :=
  have : b ‚àà a := mem_of_mem_nhdsWithin (by simp) ha
  have : b ‚àà c := mem_of_mem_nhdsWithin (by simp) hc
  mem_of_superset (nhds_of_Ici_Iic ha hc) (fun x _ => by rcases le_total x b <;> aesop)

/-- If `f` is antitone to the left and monotone to the right, then it has a local minimum. -/
lemma isLocalMin_of_anti_mono'.{u, v} {Œ± : Type u} [TopologicalSpace Œ±] [LinearOrder Œ±]
    {Œ≤ : Type v} [Preorder Œ≤] {b : Œ±} {f : Œ± ‚Üí Œ≤}
    {a : Set Œ±} (ha : a ‚àà ùìù[‚â§] b) {c : Set Œ±} (hc : c ‚àà ùìù[‚â•] b)
    (h‚ÇÄ : AntitoneOn f a) (h‚ÇÅ : MonotoneOn f c) : IsLocalMin f b :=
  have : b ‚àà a := mem_of_mem_nhdsWithin (by simp) ha
  have : b ‚àà c := mem_of_mem_nhdsWithin (by simp) hc
  mem_of_superset (nhds_of_Ici_Iic ha hc) (fun x _ => by rcases le_total x b <;> aesop)
