/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Yury Kudryashov
-/

import Mathlib.Topology.Order.LeftRightNhds

/-!
# Properties of LUB and GLB in an order topology
-/

open Set Filter TopologicalSpace Topology Function

open OrderDual (toDual ofDual)

variable {Œ± Œ≤ Œ≥ : Type*}

section OrderTopology

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [LinearOrder Œ±] [LinearOrder Œ≤] [OrderTopology Œ±]
  [OrderTopology Œ≤]

theorem IsLUB.frequently_mem {a : Œ±} {s : Set Œ±} (ha : IsLUB s a) (hs : s.Nonempty) :
    ‚àÉ·∂† x in ùìù[‚â§] a, x ‚àà s := by
  rcases hs with ‚ü®a', ha'‚ü©
  intro h
  rcases (ha.1 ha').eq_or_lt with (rfl | ha'a)
  ¬∑ exact h.self_of_nhdsWithin le_rfl ha'
  ¬∑ rcases (mem_nhdsWithin_Iic_iff_exists_Ioc_subset' ha'a).1 h with ‚ü®b, hba, hb‚ü©
    rcases ha.exists_between hba with ‚ü®b', hb's, hb'‚ü©
    exact hb hb' hb's
#align is_lub.frequently_mem IsLUB.frequently_mem

theorem IsLUB.frequently_nhds_mem {a : Œ±} {s : Set Œ±} (ha : IsLUB s a) (hs : s.Nonempty) :
    ‚àÉ·∂† x in ùìù a, x ‚àà s :=
  (ha.frequently_mem hs).filter_mono inf_le_left
#align is_lub.frequently_nhds_mem IsLUB.frequently_nhds_mem

theorem IsGLB.frequently_mem {a : Œ±} {s : Set Œ±} (ha : IsGLB s a) (hs : s.Nonempty) :
    ‚àÉ·∂† x in ùìù[‚â•] a, x ‚àà s :=
  IsLUB.frequently_mem (Œ± := Œ±·µí·µà) ha hs
#align is_glb.frequently_mem IsGLB.frequently_mem

theorem IsGLB.frequently_nhds_mem {a : Œ±} {s : Set Œ±} (ha : IsGLB s a) (hs : s.Nonempty) :
    ‚àÉ·∂† x in ùìù a, x ‚àà s :=
  (ha.frequently_mem hs).filter_mono inf_le_left
#align is_glb.frequently_nhds_mem IsGLB.frequently_nhds_mem

theorem IsLUB.mem_closure {a : Œ±} {s : Set Œ±} (ha : IsLUB s a) (hs : s.Nonempty) : a ‚àà closure s :=
  (ha.frequently_nhds_mem hs).mem_closure
#align is_lub.mem_closure IsLUB.mem_closure

theorem IsGLB.mem_closure {a : Œ±} {s : Set Œ±} (ha : IsGLB s a) (hs : s.Nonempty) : a ‚àà closure s :=
  (ha.frequently_nhds_mem hs).mem_closure
#align is_glb.mem_closure IsGLB.mem_closure

theorem IsLUB.nhdsWithin_neBot {a : Œ±} {s : Set Œ±} (ha : IsLUB s a) (hs : s.Nonempty) :
    NeBot (ùìù[s] a) :=
  mem_closure_iff_nhdsWithin_neBot.1 (ha.mem_closure hs)
#align is_lub.nhds_within_ne_bot IsLUB.nhdsWithin_neBot

theorem IsGLB.nhdsWithin_neBot : ‚àÄ {a : Œ±} {s : Set Œ±}, IsGLB s a ‚Üí s.Nonempty ‚Üí NeBot (ùìù[s] a) :=
  IsLUB.nhdsWithin_neBot (Œ± := Œ±·µí·µà)
#align is_glb.nhds_within_ne_bot IsGLB.nhdsWithin_neBot

theorem isLUB_of_mem_nhds {s : Set Œ±} {a : Œ±} {f : Filter Œ±} (hsa : a ‚àà upperBounds s) (hsf : s ‚àà f)
    [NeBot (f ‚äì ùìù a)] : IsLUB s a :=
  ‚ü®hsa, fun b hb =>
    not_lt.1 fun hba =>
      have : s ‚à© { a | b < a } ‚àà f ‚äì ùìù a := inter_mem_inf hsf (IsOpen.mem_nhds (isOpen_lt' _) hba)
      let ‚ü®_x, ‚ü®hxs, hxb‚ü©‚ü© := Filter.nonempty_of_mem this
      have : b < b := lt_of_lt_of_le hxb <| hb hxs
      lt_irrefl b this‚ü©
#align is_lub_of_mem_nhds isLUB_of_mem_nhds

theorem isLUB_of_mem_closure {s : Set Œ±} {a : Œ±} (hsa : a ‚àà upperBounds s) (hsf : a ‚àà closure s) :
    IsLUB s a := by
  rw [mem_closure_iff_clusterPt, ClusterPt, inf_comm] at hsf
  exact isLUB_of_mem_nhds hsa (mem_principal_self s)
#align is_lub_of_mem_closure isLUB_of_mem_closure

theorem isGLB_of_mem_nhds :
    ‚àÄ {s : Set Œ±} {a : Œ±} {f : Filter Œ±}, a ‚àà lowerBounds s ‚Üí s ‚àà f ‚Üí NeBot (f ‚äì ùìù a) ‚Üí IsGLB s a :=
  isLUB_of_mem_nhds (Œ± := Œ±·µí·µà)
#align is_glb_of_mem_nhds isGLB_of_mem_nhds

theorem isGLB_of_mem_closure {s : Set Œ±} {a : Œ±} (hsa : a ‚àà lowerBounds s) (hsf : a ‚àà closure s) :
    IsGLB s a :=
  isLUB_of_mem_closure (Œ± := Œ±·µí·µà) hsa hsf
#align is_glb_of_mem_closure isGLB_of_mem_closure

theorem IsLUB.mem_upperBounds_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) (ha : IsLUB s a)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : b ‚àà upperBounds (f '' s) := by
  rintro _ ‚ü®x, hx, rfl‚ü©
  replace ha := ha.inter_Ici_of_mem hx
  haveI := ha.nhdsWithin_neBot ‚ü®x, hx, le_rfl‚ü©
  refine' ge_of_tendsto (hb.mono_left (nhdsWithin_mono _ (inter_subset_left s (Ici x)))) _
  exact mem_of_superset self_mem_nhdsWithin fun y hy => hf hx hy.1 hy.2
#align is_lub.mem_upper_bounds_of_tendsto IsLUB.mem_upperBounds_of_tendsto

-- For a version of this theorem in which the convergence considered on the domain `Œ±` is as `x : Œ±`
-- tends to infinity, rather than tending to a point `x` in `Œ±`, see `isLUB_of_tendsto_atTop`
theorem IsLUB.isLUB_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] {f : Œ± ‚Üí Œ≥}
    {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) (ha : IsLUB s a) (hs : s.Nonempty)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : IsLUB (f '' s) b :=
  haveI := ha.nhdsWithin_neBot hs
  ‚ü®ha.mem_upperBounds_of_tendsto hf hb, fun _b' hb' =>
    le_of_tendsto hb (mem_of_superset self_mem_nhdsWithin fun _ hx => hb' <| mem_image_of_mem _ hx)‚ü©
#align is_lub.is_lub_of_tendsto IsLUB.isLUB_of_tendsto

theorem IsGLB.mem_lowerBounds_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) (ha : IsGLB s a)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : b ‚àà lowerBounds (f '' s) :=
  IsLUB.mem_upperBounds_of_tendsto (Œ± := Œ±·µí·µà) (Œ≥ := Œ≥·µí·µà) hf.dual ha hb
#align is_glb.mem_lower_bounds_of_tendsto IsGLB.mem_lowerBounds_of_tendsto

-- For a version of this theorem in which the convergence considered on the domain `Œ±` is as
-- `x : Œ±` tends to negative infinity, rather than tending to a point `x` in `Œ±`, see
-- `isGLB_of_tendsto_atBot`
theorem IsGLB.isGLB_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] {f : Œ± ‚Üí Œ≥}
    {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) :
    IsGLB s a ‚Üí s.Nonempty ‚Üí Tendsto f (ùìù[s] a) (ùìù b) ‚Üí IsGLB (f '' s) b :=
  IsLUB.isLUB_of_tendsto (Œ± := Œ±·µí·µà) (Œ≥ := Œ≥·µí·µà) hf.dual
#align is_glb.is_glb_of_tendsto IsGLB.isGLB_of_tendsto

theorem IsLUB.mem_lowerBounds_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : AntitoneOn f s) (ha : IsLUB s a)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : b ‚àà lowerBounds (f '' s) :=
  IsLUB.mem_upperBounds_of_tendsto (Œ≥ := Œ≥·µí·µà) hf ha hb
#align is_lub.mem_lower_bounds_of_tendsto IsLUB.mem_lowerBounds_of_tendsto

theorem IsLUB.isGLB_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] :
    ‚àÄ {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥},
      AntitoneOn f s ‚Üí IsLUB s a ‚Üí s.Nonempty ‚Üí Tendsto f (ùìù[s] a) (ùìù b) ‚Üí IsGLB (f '' s) b :=
  IsLUB.isLUB_of_tendsto (Œ≥ := Œ≥·µí·µà)
#align is_lub.is_glb_of_tendsto IsLUB.isGLB_of_tendsto

theorem IsGLB.mem_upperBounds_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : AntitoneOn f s) (ha : IsGLB s a)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : b ‚àà upperBounds (f '' s) :=
  IsGLB.mem_lowerBounds_of_tendsto (Œ≥ := Œ≥·µí·µà) hf ha hb
#align is_glb.mem_upper_bounds_of_tendsto IsGLB.mem_upperBounds_of_tendsto

theorem IsGLB.isLUB_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] :
    ‚àÄ {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥},
      AntitoneOn f s ‚Üí IsGLB s a ‚Üí s.Nonempty ‚Üí Tendsto f (ùìù[s] a) (ùìù b) ‚Üí IsLUB (f '' s) b :=
  IsGLB.isGLB_of_tendsto (Œ≥ := Œ≥·µí·µà)
#align is_glb.is_lub_of_tendsto IsGLB.isLUB_of_tendsto

theorem IsLUB.mem_of_isClosed {a : Œ±} {s : Set Œ±} (ha : IsLUB s a) (hs : s.Nonempty)
    (sc : IsClosed s) : a ‚àà s :=
  sc.closure_subset <| ha.mem_closure hs
#align is_lub.mem_of_is_closed IsLUB.mem_of_isClosed

alias IsClosed.isLUB_mem := IsLUB.mem_of_isClosed
#align is_closed.is_lub_mem IsClosed.isLUB_mem

theorem IsGLB.mem_of_isClosed {a : Œ±} {s : Set Œ±} (ha : IsGLB s a) (hs : s.Nonempty)
    (sc : IsClosed s) : a ‚àà s :=
  sc.closure_subset <| ha.mem_closure hs
#align is_glb.mem_of_is_closed IsGLB.mem_of_isClosed

alias IsClosed.isGLB_mem := IsGLB.mem_of_isClosed
#align is_closed.is_glb_mem IsClosed.isGLB_mem

/-!
### Existence of sequences tending to `sInf` or `sSup` of a given set
-/

theorem IsLUB.exists_seq_strictMono_tendsto_of_not_mem {t : Set Œ±} {x : Œ±}
    [IsCountablyGenerated (ùìù x)] (htx : IsLUB t x) (not_mem : x ‚àâ t) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n < x) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t := by
  obtain ‚ü®v, hvx, hvt‚ü© := exists_seq_forall_of_frequently (htx.frequently_mem ht)
  replace hvx := hvx.mono_right nhdsWithin_le_nhds
  have hvx' : ‚àÄ {n}, v n < x := (htx.1 (hvt _)).lt_of_ne (ne_of_mem_of_not_mem (hvt _) not_mem)
  have : ‚àÄ k, ‚àÄ·∂† l in atTop, v k < v l := fun k => hvx.eventually (lt_mem_nhds hvx')
  choose N hN hvN using fun k => ((eventually_gt_atTop k).and (this k)).exists
  refine ‚ü®fun k => v (N^[k] 0), strictMono_nat_of_lt_succ fun _ => ?_, fun _ => hvx',
    hvx.comp (strictMono_nat_of_lt_succ fun _ => ?_).tendsto_atTop, fun _ => hvt _‚ü©
  ¬∑ rw [iterate_succ_apply']; exact hvN _
  ¬∑ rw [iterate_succ_apply']; exact hN _
#align is_lub.exists_seq_strict_mono_tendsto_of_not_mem IsLUB.exists_seq_strictMono_tendsto_of_not_mem

theorem IsLUB.exists_seq_monotone_tendsto {t : Set Œ±} {x : Œ±} [IsCountablyGenerated (ùìù x)]
    (htx : IsLUB t x) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, Monotone u ‚àß (‚àÄ n, u n ‚â§ x) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t := by
  by_cases h : x ‚àà t
  ¬∑ exact ‚ü®fun _ => x, monotone_const, fun n => le_rfl, tendsto_const_nhds, fun _ => h‚ü©
  ¬∑ rcases htx.exists_seq_strictMono_tendsto_of_not_mem h ht with ‚ü®u, hu‚ü©
    exact ‚ü®u, hu.1.monotone, fun n => (hu.2.1 n).le, hu.2.2‚ü©
#align is_lub.exists_seq_monotone_tendsto IsLUB.exists_seq_monotone_tendsto

theorem exists_seq_strictMono_tendsto' {Œ± : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±]
    [DenselyOrdered Œ±] [OrderTopology Œ±] [FirstCountableTopology Œ±] {x y : Œ±} (hy : y < x) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n ‚àà Ioo y x) ‚àß Tendsto u atTop (ùìù x) := by
  have hx : x ‚àâ Ioo y x := fun h => (lt_irrefl x h.2).elim
  have ht : Set.Nonempty (Ioo y x) := nonempty_Ioo.2 hy
  rcases (isLUB_Ioo hy).exists_seq_strictMono_tendsto_of_not_mem hx ht with ‚ü®u, hu‚ü©
  exact ‚ü®u, hu.1, hu.2.2.symm‚ü©
#align exists_seq_strict_mono_tendsto' exists_seq_strictMono_tendsto'

theorem exists_seq_strictMono_tendsto [DenselyOrdered Œ±] [NoMinOrder Œ±] [FirstCountableTopology Œ±]
    (x : Œ±) : ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n < x) ‚àß Tendsto u atTop (ùìù x) := by
  obtain ‚ü®y, hy‚ü© : ‚àÉ y, y < x := exists_lt x
  rcases exists_seq_strictMono_tendsto' hy with ‚ü®u, hu_mono, hu_mem, hux‚ü©
  exact ‚ü®u, hu_mono, fun n => (hu_mem n).2, hux‚ü©
#align exists_seq_strict_mono_tendsto exists_seq_strictMono_tendsto

theorem exists_seq_strictMono_tendsto_nhdsWithin [DenselyOrdered Œ±] [NoMinOrder Œ±]
    [FirstCountableTopology Œ±] (x : Œ±) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n < x) ‚àß Tendsto u atTop (ùìù[<] x) :=
  let ‚ü®u, hu, hx, h‚ü© := exists_seq_strictMono_tendsto x
  ‚ü®u, hu, hx, tendsto_nhdsWithin_mono_right (range_subset_iff.2 hx) <| tendsto_nhdsWithin_range.2 h‚ü©
#align exists_seq_strict_mono_tendsto_nhds_within exists_seq_strictMono_tendsto_nhdsWithin

theorem exists_seq_tendsto_sSup {Œ± : Type*} [ConditionallyCompleteLinearOrder Œ±]
    [TopologicalSpace Œ±] [OrderTopology Œ±] [FirstCountableTopology Œ±] {S : Set Œ±} (hS : S.Nonempty)
    (hS' : BddAbove S) : ‚àÉ u : ‚Ñï ‚Üí Œ±, Monotone u ‚àß Tendsto u atTop (ùìù (sSup S)) ‚àß ‚àÄ n, u n ‚àà S := by
  rcases (isLUB_csSup hS hS').exists_seq_monotone_tendsto hS with ‚ü®u, hu‚ü©
  exact ‚ü®u, hu.1, hu.2.2‚ü©
#align exists_seq_tendsto_Sup exists_seq_tendsto_sSup

theorem IsGLB.exists_seq_strictAnti_tendsto_of_not_mem {t : Set Œ±} {x : Œ±}
    [IsCountablyGenerated (ùìù x)] (htx : IsGLB t x) (not_mem : x ‚àâ t) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, x < u n) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t :=
  IsLUB.exists_seq_strictMono_tendsto_of_not_mem (Œ± := Œ±·µí·µà) htx not_mem ht
#align is_glb.exists_seq_strict_anti_tendsto_of_not_mem IsGLB.exists_seq_strictAnti_tendsto_of_not_mem

theorem IsGLB.exists_seq_antitone_tendsto {t : Set Œ±} {x : Œ±} [IsCountablyGenerated (ùìù x)]
    (htx : IsGLB t x) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, Antitone u ‚àß (‚àÄ n, x ‚â§ u n) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t :=
  IsLUB.exists_seq_monotone_tendsto (Œ± := Œ±·µí·µà) htx ht
#align is_glb.exists_seq_antitone_tendsto IsGLB.exists_seq_antitone_tendsto

theorem exists_seq_strictAnti_tendsto' [DenselyOrdered Œ±] [FirstCountableTopology Œ±] {x y : Œ±}
    (hy : x < y) : ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, u n ‚àà Ioo x y) ‚àß Tendsto u atTop (ùìù x) := by
  simpa only [dual_Ioo]
    using exists_seq_strictMono_tendsto' (Œ± := Œ±·µí·µà) (OrderDual.toDual_lt_toDual.2 hy)
#align exists_seq_strict_anti_tendsto' exists_seq_strictAnti_tendsto'

theorem exists_seq_strictAnti_tendsto [DenselyOrdered Œ±] [NoMaxOrder Œ±] [FirstCountableTopology Œ±]
    (x : Œ±) : ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, x < u n) ‚àß Tendsto u atTop (ùìù x) :=
  exists_seq_strictMono_tendsto (Œ± := Œ±·µí·µà) x
#align exists_seq_strict_anti_tendsto exists_seq_strictAnti_tendsto

theorem exists_seq_strictAnti_tendsto_nhdsWithin [DenselyOrdered Œ±] [NoMaxOrder Œ±]
    [FirstCountableTopology Œ±] (x : Œ±) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, x < u n) ‚àß Tendsto u atTop (ùìù[>] x) :=
  exists_seq_strictMono_tendsto_nhdsWithin (Œ± := Œ±·µí·µà) _
#align exists_seq_strict_anti_tendsto_nhds_within exists_seq_strictAnti_tendsto_nhdsWithin

theorem exists_seq_strictAnti_strictMono_tendsto [DenselyOrdered Œ±] [FirstCountableTopology Œ±]
    {x y : Œ±} (h : x < y) :
    ‚àÉ u v : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß StrictMono v ‚àß (‚àÄ k, u k ‚àà Ioo x y) ‚àß (‚àÄ l, v l ‚àà Ioo x y) ‚àß
      (‚àÄ k l, u k < v l) ‚àß Tendsto u atTop (ùìù x) ‚àß Tendsto v atTop (ùìù y) := by
  rcases exists_seq_strictAnti_tendsto' h with ‚ü®u, hu_anti, hu_mem, hux‚ü©
  rcases exists_seq_strictMono_tendsto' (hu_mem 0).2 with ‚ü®v, hv_mono, hv_mem, hvy‚ü©
  exact
    ‚ü®u, v, hu_anti, hv_mono, hu_mem, fun l => ‚ü®(hu_mem 0).1.trans (hv_mem l).1, (hv_mem l).2‚ü©,
      fun k l => (hu_anti.antitone (zero_le k)).trans_lt (hv_mem l).1, hux, hvy‚ü©
#align exists_seq_strict_anti_strict_mono_tendsto exists_seq_strictAnti_strictMono_tendsto

theorem exists_seq_tendsto_sInf {Œ± : Type*} [ConditionallyCompleteLinearOrder Œ±]
    [TopologicalSpace Œ±] [OrderTopology Œ±] [FirstCountableTopology Œ±] {S : Set Œ±} (hS : S.Nonempty)
    (hS' : BddBelow S) : ‚àÉ u : ‚Ñï ‚Üí Œ±, Antitone u ‚àß Tendsto u atTop (ùìù (sInf S)) ‚àß ‚àÄ n, u n ‚àà S :=
  exists_seq_tendsto_sSup (Œ± := Œ±·µí·µà) hS hS'
#align exists_seq_tendsto_Inf exists_seq_tendsto_sInf

end OrderTopology
