/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Yury Kudryashov
-/

import Mathlib.Topology.Order.LeftRightNhds

/-!
# Properties of LUB and GLB in an order topology
-/

open Set Filter TopologicalSpace Topology Function

open OrderDual (toDual ofDual)

variable {Œ± Œ≥ : Type*}

section OrderTopology

variable [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderTopology Œ±]

theorem IsLUB.frequently_mem {a : Œ±} {s : Set Œ±} (ha : IsLUB s a) (hs : s.Nonempty) :
    ‚àÉ·∂† x in ùìù[‚â§] a, x ‚àà s := by
  rcases hs with ‚ü®a', ha'‚ü©
  intro h
  rcases (ha.1 ha').eq_or_lt with (rfl | ha'a)
  ¬∑ exact h.self_of_nhdsWithin le_rfl ha'
  ¬∑ rcases (mem_nhdsLE_iff_exists_Ioc_subset' ha'a).1 h with ‚ü®b, hba, hb‚ü©
    rcases ha.exists_between hba with ‚ü®b', hb's, hb'‚ü©
    exact hb hb' hb's

theorem IsLUB.frequently_nhds_mem {a : Œ±} {s : Set Œ±} (ha : IsLUB s a) (hs : s.Nonempty) :
    ‚àÉ·∂† x in ùìù a, x ‚àà s :=
  (ha.frequently_mem hs).filter_mono inf_le_left

theorem IsGLB.frequently_mem {a : Œ±} {s : Set Œ±} (ha : IsGLB s a) (hs : s.Nonempty) :
    ‚àÉ·∂† x in ùìù[‚â•] a, x ‚àà s :=
  IsLUB.frequently_mem (Œ± := Œ±·µí·µà) ha hs

theorem IsGLB.frequently_nhds_mem {a : Œ±} {s : Set Œ±} (ha : IsGLB s a) (hs : s.Nonempty) :
    ‚àÉ·∂† x in ùìù a, x ‚àà s :=
  (ha.frequently_mem hs).filter_mono inf_le_left

theorem IsLUB.mem_closure {a : Œ±} {s : Set Œ±} (ha : IsLUB s a) (hs : s.Nonempty) : a ‚àà closure s :=
  (ha.frequently_nhds_mem hs).mem_closure

theorem IsGLB.mem_closure {a : Œ±} {s : Set Œ±} (ha : IsGLB s a) (hs : s.Nonempty) : a ‚àà closure s :=
  (ha.frequently_nhds_mem hs).mem_closure

theorem IsLUB.nhdsWithin_neBot {a : Œ±} {s : Set Œ±} (ha : IsLUB s a) (hs : s.Nonempty) :
    NeBot (ùìù[s] a) :=
  mem_closure_iff_nhdsWithin_neBot.1 (ha.mem_closure hs)

theorem IsGLB.nhdsWithin_neBot {a : Œ±} {s : Set Œ±} (ha : IsGLB s a) (hs : s.Nonempty) :
    NeBot (ùìù[s] a) :=
  IsLUB.nhdsWithin_neBot (Œ± := Œ±·µí·µà) ha hs

theorem isLUB_of_mem_nhds {s : Set Œ±} {a : Œ±} {f : Filter Œ±} (hsa : a ‚àà upperBounds s) (hsf : s ‚àà f)
    [NeBot (f ‚äì ùìù a)] : IsLUB s a :=
  ‚ü®hsa, fun b hb =>
    not_lt.1 fun hba =>
      have : s ‚à© { a | b < a } ‚àà f ‚äì ùìù a := inter_mem_inf hsf (IsOpen.mem_nhds (isOpen_lt' _) hba)
      let ‚ü®_x, ‚ü®hxs, hxb‚ü©‚ü© := Filter.nonempty_of_mem this
      have : b < b := lt_of_lt_of_le hxb <| hb hxs
      lt_irrefl b this‚ü©

theorem isLUB_of_mem_closure {s : Set Œ±} {a : Œ±} (hsa : a ‚àà upperBounds s) (hsf : a ‚àà closure s) :
    IsLUB s a := by
  rw [mem_closure_iff_clusterPt, ClusterPt, inf_comm] at hsf
  exact isLUB_of_mem_nhds hsa (mem_principal_self s)

theorem isGLB_of_mem_nhds {s : Set Œ±} {a : Œ±} {f : Filter Œ±} (hsa : a ‚àà lowerBounds s) (hsf : s ‚àà f)
    [NeBot (f ‚äì ùìù a)] :
    IsGLB s a :=
  isLUB_of_mem_nhds (Œ± := Œ±·µí·µà) hsa hsf

theorem isGLB_of_mem_closure {s : Set Œ±} {a : Œ±} (hsa : a ‚àà lowerBounds s) (hsf : a ‚àà closure s) :
    IsGLB s a :=
  isLUB_of_mem_closure (Œ± := Œ±·µí·µà) hsa hsf

theorem IsLUB.mem_upperBounds_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) (ha : IsLUB s a)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : b ‚àà upperBounds (f '' s) := by
  rintro _ ‚ü®x, hx, rfl‚ü©
  replace ha := ha.inter_Ici_of_mem hx
  haveI := ha.nhdsWithin_neBot ‚ü®x, hx, le_rfl‚ü©
  refine ge_of_tendsto (hb.mono_left (nhdsWithin_mono a (inter_subset_left (t := Ici x)))) ?_
  exact mem_of_superset self_mem_nhdsWithin fun y hy => hf hx hy.1 hy.2

-- For a version of this theorem in which the convergence considered on the domain `Œ±` is as `x : Œ±`
-- tends to infinity, rather than tending to a point `x` in `Œ±`, see `isLUB_of_tendsto_atTop`
theorem IsLUB.isLUB_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] {f : Œ± ‚Üí Œ≥}
    {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) (ha : IsLUB s a) (hs : s.Nonempty)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : IsLUB (f '' s) b :=
  haveI := ha.nhdsWithin_neBot hs
  ‚ü®ha.mem_upperBounds_of_tendsto hf hb, fun _b' hb' =>
    le_of_tendsto hb (mem_of_superset self_mem_nhdsWithin fun _ hx => hb' <| mem_image_of_mem _ hx)‚ü©

theorem IsGLB.mem_lowerBounds_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) (ha : IsGLB s a)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : b ‚àà lowerBounds (f '' s) :=
  IsLUB.mem_upperBounds_of_tendsto (Œ± := Œ±·µí·µà) (Œ≥ := Œ≥·µí·µà) hf.dual ha hb

-- For a version of this theorem in which the convergence considered on the domain `Œ±` is as
-- `x : Œ±` tends to negative infinity, rather than tending to a point `x` in `Œ±`, see
-- `isGLB_of_tendsto_atBot`
theorem IsGLB.isGLB_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] {f : Œ± ‚Üí Œ≥}
    {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) :
    IsGLB s a ‚Üí s.Nonempty ‚Üí Tendsto f (ùìù[s] a) (ùìù b) ‚Üí IsGLB (f '' s) b :=
  IsLUB.isLUB_of_tendsto (Œ± := Œ±·µí·µà) (Œ≥ := Œ≥·µí·µà) hf.dual

theorem IsLUB.mem_lowerBounds_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : AntitoneOn f s) (ha : IsLUB s a)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : b ‚àà lowerBounds (f '' s) :=
  IsLUB.mem_upperBounds_of_tendsto (Œ≥ := Œ≥·µí·µà) hf ha hb

theorem IsLUB.isGLB_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] {f : Œ± ‚Üí Œ≥}
    {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : AntitoneOn f s) (ha : IsLUB s a) (hs : s.Nonempty)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : IsGLB (f '' s) b :=
  IsLUB.isLUB_of_tendsto (Œ≥ := Œ≥·µí·µà) hf ha hs hb

theorem IsGLB.mem_upperBounds_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : AntitoneOn f s) (ha : IsGLB s a)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : b ‚àà upperBounds (f '' s) :=
  IsGLB.mem_lowerBounds_of_tendsto (Œ≥ := Œ≥·µí·µà) hf ha hb

theorem IsGLB.isLUB_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] {f : Œ± ‚Üí Œ≥}
    {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : AntitoneOn f s) (ha : IsGLB s a) (hs : s.Nonempty)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : IsLUB (f '' s) b :=
  IsGLB.isGLB_of_tendsto (Œ≥ := Œ≥·µí·µà) hf ha hs hb

theorem IsLUB.mem_of_isClosed {a : Œ±} {s : Set Œ±} (ha : IsLUB s a) (hs : s.Nonempty)
    (sc : IsClosed s) : a ‚àà s :=
  sc.closure_subset <| ha.mem_closure hs

alias IsClosed.isLUB_mem := IsLUB.mem_of_isClosed

theorem IsGLB.mem_of_isClosed {a : Œ±} {s : Set Œ±} (ha : IsGLB s a) (hs : s.Nonempty)
    (sc : IsClosed s) : a ‚àà s :=
  sc.closure_subset <| ha.mem_closure hs

alias IsClosed.isGLB_mem := IsGLB.mem_of_isClosed

theorem isLUB_iff_of_subset_of_subset_closure {Œ± : Type*} [TopologicalSpace Œ±] [Preorder Œ±]
    [ClosedIicTopology Œ±] {s t : Set Œ±} (hst : s ‚äÜ t) (hts : t ‚äÜ closure s) {x : Œ±} :
    IsLUB s x ‚Üî IsLUB t x :=
  isLUB_congr <| (upperBounds_closure (s := s) ‚ñ∏ upperBounds_mono_set hts).antisymm <|
    upperBounds_mono_set hst

theorem isGLB_iff_of_subset_of_subset_closure {Œ± : Type*} [TopologicalSpace Œ±] [Preorder Œ±]
    [ClosedIciTopology Œ±] {s t : Set Œ±} (hst : s ‚äÜ t) (hts : t ‚äÜ closure s) {x : Œ±} :
    IsGLB s x ‚Üî IsGLB t x :=
  isLUB_iff_of_subset_of_subset_closure (Œ± := Œ±·µí·µà) hst hts

theorem Dense.isLUB_inter_iff {Œ± : Type*} [TopologicalSpace Œ±] [Preorder Œ±] [ClosedIicTopology Œ±]
    {s t : Set Œ±} (hs : Dense s) (ht : IsOpen t) {x : Œ±} :
    IsLUB (t ‚à© s) x ‚Üî IsLUB t x :=
  isLUB_iff_of_subset_of_subset_closure (by simp) <| hs.open_subset_closure_inter ht

theorem Dense.isGLB_inter_iff {Œ± : Type*} [TopologicalSpace Œ±] [Preorder Œ±] [ClosedIciTopology Œ±]
    {s t : Set Œ±} (hs : Dense s) (ht : IsOpen t) {x : Œ±} :
    IsGLB (t ‚à© s) x ‚Üî IsGLB t x :=
  hs.isLUB_inter_iff (Œ± := Œ±·µí·µà) ht

/-!
### Existence of sequences tending to `sInf` or `sSup` of a given set
-/

theorem IsLUB.exists_seq_strictMono_tendsto_of_not_mem {t : Set Œ±} {x : Œ±}
    [IsCountablyGenerated (ùìù x)] (htx : IsLUB t x) (not_mem : x ‚àâ t) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n < x) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t := by
  obtain ‚ü®v, hvx, hvt‚ü© := exists_seq_forall_of_frequently (htx.frequently_mem ht)
  replace hvx := hvx.mono_right nhdsWithin_le_nhds
  have hvx' : ‚àÄ {n}, v n < x := (htx.1 (hvt _)).lt_of_ne (ne_of_mem_of_not_mem (hvt _) not_mem)
  have : ‚àÄ k, ‚àÄ·∂† l in atTop, v k < v l := fun k => hvx.eventually (lt_mem_nhds hvx')
  choose N hN hvN using fun k => ((eventually_gt_atTop k).and (this k)).exists
  refine ‚ü®fun k => v (N^[k] 0), strictMono_nat_of_lt_succ fun _ => ?_, fun _ => hvx',
    hvx.comp (strictMono_nat_of_lt_succ fun _ => ?_).tendsto_atTop, fun _ => hvt _‚ü©
  ¬∑ rw [iterate_succ_apply']; exact hvN _
  ¬∑ rw [iterate_succ_apply']; exact hN _

theorem IsLUB.exists_seq_monotone_tendsto {t : Set Œ±} {x : Œ±} [IsCountablyGenerated (ùìù x)]
    (htx : IsLUB t x) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, Monotone u ‚àß (‚àÄ n, u n ‚â§ x) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t := by
  by_cases h : x ‚àà t
  ¬∑ exact ‚ü®fun _ => x, monotone_const, fun n => le_rfl, tendsto_const_nhds, fun _ => h‚ü©
  ¬∑ rcases htx.exists_seq_strictMono_tendsto_of_not_mem h ht with ‚ü®u, hu‚ü©
    exact ‚ü®u, hu.1.monotone, fun n => (hu.2.1 n).le, hu.2.2‚ü©

theorem exists_seq_strictMono_tendsto' {Œ± : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±]
    [DenselyOrdered Œ±] [OrderTopology Œ±] [FirstCountableTopology Œ±] {x y : Œ±} (hy : y < x) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n ‚àà Ioo y x) ‚àß Tendsto u atTop (ùìù x) := by
  have hx : x ‚àâ Ioo y x := fun h => (lt_irrefl x h.2).elim
  have ht : Set.Nonempty (Ioo y x) := nonempty_Ioo.2 hy
  rcases (isLUB_Ioo hy).exists_seq_strictMono_tendsto_of_not_mem hx ht with ‚ü®u, hu‚ü©
  exact ‚ü®u, hu.1, hu.2.2.symm‚ü©

theorem exists_seq_strictMono_tendsto [DenselyOrdered Œ±] [NoMinOrder Œ±] [FirstCountableTopology Œ±]
    (x : Œ±) : ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n < x) ‚àß Tendsto u atTop (ùìù x) := by
  obtain ‚ü®y, hy‚ü© : ‚àÉ y, y < x := exists_lt x
  rcases exists_seq_strictMono_tendsto' hy with ‚ü®u, hu_mono, hu_mem, hux‚ü©
  exact ‚ü®u, hu_mono, fun n => (hu_mem n).2, hux‚ü©

theorem exists_seq_strictMono_tendsto_nhdsWithin [DenselyOrdered Œ±] [NoMinOrder Œ±]
    [FirstCountableTopology Œ±] (x : Œ±) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n < x) ‚àß Tendsto u atTop (ùìù[<] x) :=
  let ‚ü®u, hu, hx, h‚ü© := exists_seq_strictMono_tendsto x
  ‚ü®u, hu, hx, tendsto_nhdsWithin_mono_right (range_subset_iff.2 hx) <| tendsto_nhdsWithin_range.2 h‚ü©

theorem exists_seq_tendsto_sSup {Œ± : Type*} [ConditionallyCompleteLinearOrder Œ±]
    [TopologicalSpace Œ±] [OrderTopology Œ±] [FirstCountableTopology Œ±] {S : Set Œ±} (hS : S.Nonempty)
    (hS' : BddAbove S) : ‚àÉ u : ‚Ñï ‚Üí Œ±, Monotone u ‚àß Tendsto u atTop (ùìù (sSup S)) ‚àß ‚àÄ n, u n ‚àà S := by
  rcases (isLUB_csSup hS hS').exists_seq_monotone_tendsto hS with ‚ü®u, hu‚ü©
  exact ‚ü®u, hu.1, hu.2.2‚ü©

theorem Dense.exists_seq_strictMono_tendsto_of_lt [DenselyOrdered Œ±] [FirstCountableTopology Œ±]
    {s : Set Œ±} (hs : Dense s) {x y : Œ±} (hy : y < x) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n ‚àà (Ioo y x ‚à© s)) ‚àß Tendsto u atTop (ùìù x) := by
  have hnonempty : (Ioo y x ‚à© s).Nonempty := by
    obtain ‚ü®z, hyz, hzx‚ü© := hs.exists_between hy
    exact ‚ü®z, mem_inter hzx hyz‚ü©
  have hx : IsLUB (Ioo y x ‚à© s) x := hs.isLUB_inter_iff isOpen_Ioo |>.mpr <| isLUB_Ioo hy
  apply hx.exists_seq_strictMono_tendsto_of_not_mem (by aesop) hnonempty |>.imp
  aesop

theorem Dense.exists_seq_strictMono_tendsto [DenselyOrdered Œ±] [NoMinOrder Œ±]
    [FirstCountableTopology Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n ‚àà (Iio x ‚à© s)) ‚àß Tendsto u atTop (ùìù x) := by
  obtain ‚ü®y, hy‚ü© := exists_lt x
  apply hs.exists_seq_strictMono_tendsto_of_lt (exists_lt x).choose_spec |>.imp
  aesop

theorem DenseRange.exists_seq_strictMono_tendsto_of_lt {Œ≤ : Type*} [LinearOrder Œ≤]
    [DenselyOrdered Œ±] [FirstCountableTopology Œ±] {f : Œ≤ ‚Üí Œ±} {x y : Œ±} (hf : DenseRange f)
    (hmono : Monotone f) (hlt : y < x) :
    ‚àÉ u : ‚Ñï ‚Üí Œ≤, StrictMono u ‚àß (‚àÄ n, f (u n) ‚àà Ioo y x) ‚àß Tendsto (f ‚àò u) atTop (ùìù x) := by
  rcases Dense.exists_seq_strictMono_tendsto_of_lt hf hlt with ‚ü®u, hu, huyxf, hlim‚ü©
  have huyx (n : ‚Ñï) : u n ‚àà Ioo y x := (huyxf n).1
  have huf (n : ‚Ñï) : u n ‚àà range f := (huyxf n).2
  choose v hv using huf
  obtain rfl : f ‚àò v = u := funext hv
  exact ‚ü®v, fun a b hlt ‚Ü¶ hmono.reflect_lt <| hu hlt, huyx, hlim‚ü©

theorem DenseRange.exists_seq_strictMono_tendsto {Œ≤ : Type*} [LinearOrder Œ≤] [DenselyOrdered Œ±]
    [NoMinOrder Œ±] [FirstCountableTopology Œ±] {f : Œ≤ ‚Üí Œ±} (hf : DenseRange f) (hmono : Monotone f)
    (x : Œ±):
    ‚àÉ u : ‚Ñï ‚Üí Œ≤, StrictMono u ‚àß (‚àÄ n, f (u n) ‚àà Iio x) ‚àß Tendsto (f ‚àò u) atTop (ùìù x) := by
  rcases Dense.exists_seq_strictMono_tendsto hf x with ‚ü®u, hu, huxf, hlim‚ü©
  have hux (n : ‚Ñï) : u n ‚àà Iio x := (huxf n).1
  have huf (n : ‚Ñï) : u n ‚àà range f := (huxf n).2
  choose v hv using huf
  obtain rfl : f ‚àò v = u := funext hv
  exact ‚ü®v, fun a b hlt ‚Ü¶ hmono.reflect_lt <| hu hlt, hux, hlim‚ü©

theorem IsGLB.exists_seq_strictAnti_tendsto_of_not_mem {t : Set Œ±} {x : Œ±}
    [IsCountablyGenerated (ùìù x)] (htx : IsGLB t x) (not_mem : x ‚àâ t) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, x < u n) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t :=
  IsLUB.exists_seq_strictMono_tendsto_of_not_mem (Œ± := Œ±·µí·µà) htx not_mem ht

theorem IsGLB.exists_seq_antitone_tendsto {t : Set Œ±} {x : Œ±} [IsCountablyGenerated (ùìù x)]
    (htx : IsGLB t x) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, Antitone u ‚àß (‚àÄ n, x ‚â§ u n) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t :=
  IsLUB.exists_seq_monotone_tendsto (Œ± := Œ±·µí·µà) htx ht

theorem exists_seq_strictAnti_tendsto' [DenselyOrdered Œ±] [FirstCountableTopology Œ±] {x y : Œ±}
    (hy : x < y) : ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, u n ‚àà Ioo x y) ‚àß Tendsto u atTop (ùìù x) := by
  simpa using exists_seq_strictMono_tendsto' (Œ± := Œ±·µí·µà) (OrderDual.toDual_lt_toDual.2 hy)

theorem exists_seq_strictAnti_tendsto [DenselyOrdered Œ±] [NoMaxOrder Œ±] [FirstCountableTopology Œ±]
    (x : Œ±) : ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, x < u n) ‚àß Tendsto u atTop (ùìù x) :=
  exists_seq_strictMono_tendsto (Œ± := Œ±·µí·µà) x

theorem exists_seq_strictAnti_tendsto_nhdsWithin [DenselyOrdered Œ±] [NoMaxOrder Œ±]
    [FirstCountableTopology Œ±] (x : Œ±) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, x < u n) ‚àß Tendsto u atTop (ùìù[>] x) :=
  exists_seq_strictMono_tendsto_nhdsWithin (Œ± := Œ±·µí·µà) _

theorem exists_seq_strictAnti_strictMono_tendsto [DenselyOrdered Œ±] [FirstCountableTopology Œ±]
    {x y : Œ±} (h : x < y) :
    ‚àÉ u v : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß StrictMono v ‚àß (‚àÄ k, u k ‚àà Ioo x y) ‚àß (‚àÄ l, v l ‚àà Ioo x y) ‚àß
      (‚àÄ k l, u k < v l) ‚àß Tendsto u atTop (ùìù x) ‚àß Tendsto v atTop (ùìù y) := by
  rcases exists_seq_strictAnti_tendsto' h with ‚ü®u, hu_anti, hu_mem, hux‚ü©
  rcases exists_seq_strictMono_tendsto' (hu_mem 0).2 with ‚ü®v, hv_mono, hv_mem, hvy‚ü©
  exact
    ‚ü®u, v, hu_anti, hv_mono, hu_mem, fun l => ‚ü®(hu_mem 0).1.trans (hv_mem l).1, (hv_mem l).2‚ü©,
      fun k l => (hu_anti.antitone (zero_le k)).trans_lt (hv_mem l).1, hux, hvy‚ü©

theorem exists_seq_tendsto_sInf {Œ± : Type*} [ConditionallyCompleteLinearOrder Œ±]
    [TopologicalSpace Œ±] [OrderTopology Œ±] [FirstCountableTopology Œ±] {S : Set Œ±} (hS : S.Nonempty)
    (hS' : BddBelow S) : ‚àÉ u : ‚Ñï ‚Üí Œ±, Antitone u ‚àß Tendsto u atTop (ùìù (sInf S)) ‚àß ‚àÄ n, u n ‚àà S :=
  exists_seq_tendsto_sSup (Œ± := Œ±·µí·µà) hS hS'

theorem Dense.exists_seq_strictAnti_tendsto_of_lt [DenselyOrdered Œ±] [FirstCountableTopology Œ±]
    {s : Set Œ±} (hs : Dense s) {x y : Œ±} (hy : x < y) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, u n ‚àà (Ioo x y ‚à© s)) ‚àß Tendsto u atTop (ùìù x) := by
  simpa using hs.exists_seq_strictMono_tendsto_of_lt (Œ± := Œ±·µí·µà) (OrderDual.toDual_lt_toDual.2 hy)

theorem Dense.exists_seq_strictAnti_tendsto [DenselyOrdered Œ±] [NoMaxOrder Œ±]
    [FirstCountableTopology Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, u n ‚àà (Ioi x ‚à© s)) ‚àß Tendsto u atTop (ùìù x) :=
  hs.exists_seq_strictMono_tendsto (Œ± := Œ±·µí·µà) x

theorem DenseRange.exists_seq_strictAnti_tendsto_of_lt {Œ≤ : Type*} [LinearOrder Œ≤]
    [DenselyOrdered Œ±] [FirstCountableTopology Œ±] {f : Œ≤ ‚Üí Œ±} {x y : Œ±} (hf : DenseRange f)
    (hmono : Monotone f) (hlt : x < y) :
    ‚àÉ u : ‚Ñï ‚Üí Œ≤, StrictAnti u ‚àß (‚àÄ n, f (u n) ‚àà Ioo x y) ‚àß Tendsto (f ‚àò u) atTop (ùìù x) := by
  simpa using hf.exists_seq_strictMono_tendsto_of_lt (Œ± := Œ±·µí·µà) (Œ≤ := Œ≤·µí·µà) hmono.dual
    (OrderDual.toDual_lt_toDual.2 hlt)

theorem DenseRange.exists_seq_strictAnti_tendsto {Œ≤ : Type*} [LinearOrder Œ≤] [DenselyOrdered Œ±]
    [NoMaxOrder Œ±] [FirstCountableTopology Œ±] {f : Œ≤ ‚Üí Œ±} (hf : DenseRange f) (hmono : Monotone f)
    (x : Œ±):
    ‚àÉ u : ‚Ñï ‚Üí Œ≤, StrictAnti u ‚àß (‚àÄ n, f (u n) ‚àà Ioi x) ‚àß Tendsto (f ‚àò u) atTop (ùìù x) :=
  hf.exists_seq_strictMono_tendsto (Œ± := Œ±·µí·µà) (Œ≤ := Œ≤·µí·µà) hmono.dual x

end OrderTopology
