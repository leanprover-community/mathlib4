/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Yury Kudryashov
-/

import Mathlib.Topology.Order.Basic
import Mathlib.Data.Set.Pointwise.Basic

/-!
# Neighborhoods to the left and to the right on an `OrderTopology`

We've seen some properties of left and right neighborhood of a point in an `OrderClosedTopology`.
In an `OrderTopology`, such neighborhoods can be characterized as the sets containing suitable
intervals to the right or to the left of `a`. We give now these characterizations. -/

open Set Filter TopologicalSpace Topology Function

open OrderDual (toDual ofDual)

variable {Œ± Œ≤ Œ≥ : Type*}

section LinearOrder

variable [TopologicalSpace Œ±] [LinearOrder Œ±]

section OrderTopology

variable [OrderTopology Œ±]

open List in
/-- The following statements are equivalent:

0. `s` is a neighborhood of `a` within `(a, +‚àû)`;
1. `s` is a neighborhood of `a` within `(a, b]`;
2. `s` is a neighborhood of `a` within `(a, b)`;
3. `s` includes `(a, u)` for some `u ‚àà (a, b]`;
4. `s` includes `(a, u)` for some `u > a`.
-/
theorem TFAE_mem_nhdsWithin_Ioi {a b : Œ±} (hab : a < b) (s : Set Œ±) :
    TFAE [s ‚àà ùìù[>] a,
      s ‚àà ùìù[Ioc a b] a,
      s ‚àà ùìù[Ioo a b] a,
      ‚àÉ u ‚àà Ioc a b, Ioo a u ‚äÜ s,
      ‚àÉ u ‚àà Ioi a, Ioo a u ‚äÜ s] := by
  tfae_have 1 ‚Üî 2
  ¬∑ rw [nhdsWithin_Ioc_eq_nhdsWithin_Ioi hab]
  tfae_have 1 ‚Üî 3
  ¬∑ rw [nhdsWithin_Ioo_eq_nhdsWithin_Ioi hab]
  tfae_have 4 ‚Üí 5
  ¬∑ exact fun ‚ü®u, umem, hu‚ü© => ‚ü®u, umem.1, hu‚ü©
  tfae_have 5 ‚Üí 1
  ¬∑ rintro ‚ü®u, hau, hu‚ü©
    exact mem_of_superset (Ioo_mem_nhdsWithin_Ioi ‚ü®le_refl a, hau‚ü©) hu
  tfae_have 1 ‚Üí 4
  ¬∑ intro h
    rcases mem_nhdsWithin_iff_exists_mem_nhds_inter.1 h with ‚ü®v, va, hv‚ü©
    rcases exists_Ico_subset_of_mem_nhds' va hab with ‚ü®u, au, hu‚ü©
    refine ‚ü®u, au, fun x hx => ?_‚ü©
    refine' hv ‚ü®hu ‚ü®le_of_lt hx.1, hx.2‚ü©, _‚ü©
    exact hx.1
  tfae_finish
#align tfae_mem_nhds_within_Ioi TFAE_mem_nhdsWithin_Ioi

theorem mem_nhdsWithin_Ioi_iff_exists_mem_Ioc_Ioo_subset {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà Ioc a u', Ioo a u ‚äÜ s :=
  (TFAE_mem_nhdsWithin_Ioi hu' s).out 0 3
#align mem_nhds_within_Ioi_iff_exists_mem_Ioc_Ioo_subset mem_nhdsWithin_Ioi_iff_exists_mem_Ioc_Ioo_subset

/-- A set is a neighborhood of `a` within `(a, +‚àû)` if and only if it contains an interval `(a, u)`
with `a < u < u'`, provided `a` is not a top element. -/
theorem mem_nhdsWithin_Ioi_iff_exists_Ioo_subset' {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà Ioi a, Ioo a u ‚äÜ s :=
  (TFAE_mem_nhdsWithin_Ioi hu' s).out 0 4
#align mem_nhds_within_Ioi_iff_exists_Ioo_subset' mem_nhdsWithin_Ioi_iff_exists_Ioo_subset'

theorem nhdsWithin_Ioi_basis' {a : Œ±} (h : ‚àÉ b, a < b) : (ùìù[>] a).HasBasis (a < ¬∑) (Ioo a) :=
  let ‚ü®_, h‚ü© := h
  ‚ü®fun _ => mem_nhdsWithin_Ioi_iff_exists_Ioo_subset' h‚ü©

lemma nhdsWithin_Ioi_basis [NoMaxOrder Œ±] (a : Œ±) : (ùìù[>] a).HasBasis (a < ¬∑) (Ioo a) :=
  nhdsWithin_Ioi_basis' <| exists_gt a

theorem nhdsWithin_Ioi_eq_bot_iff {a : Œ±} : ùìù[>] a = ‚ä• ‚Üî IsTop a ‚à® ‚àÉ b, a ‚ãñ b := by
  by_cases ha : IsTop a
  ¬∑ simp [ha, ha.isMax.Ioi_eq]
  ¬∑ simp only [ha, false_or]
    rw [isTop_iff_isMax, not_isMax_iff] at ha
    simp only [(nhdsWithin_Ioi_basis' ha).eq_bot_iff, covBy_iff_Ioo_eq]

/-- A set is a neighborhood of `a` within `(a, +‚àû)` if and only if it contains an interval `(a, u)`
with `a < u`. -/
theorem mem_nhdsWithin_Ioi_iff_exists_Ioo_subset [NoMaxOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà Ioi a, Ioo a u ‚äÜ s :=
  let ‚ü®_u', hu'‚ü© := exists_gt a
  mem_nhdsWithin_Ioi_iff_exists_Ioo_subset' hu'
#align mem_nhds_within_Ioi_iff_exists_Ioo_subset mem_nhdsWithin_Ioi_iff_exists_Ioo_subset

/-- The set of points which are isolated on the right is countable when the space is
second-countable. -/
theorem countable_setOf_isolated_right [SecondCountableTopology Œ±] :
    { x : Œ± | ùìù[>] x = ‚ä• }.Countable := by
  simp only [nhdsWithin_Ioi_eq_bot_iff, setOf_or]
  exact (subsingleton_isTop Œ±).countable.union countable_setOf_covBy_right

/-- The set of points which are isolated on the left is countable when the space is
second-countable. -/
theorem countable_setOf_isolated_left [SecondCountableTopology Œ±] :
    { x : Œ± | ùìù[<] x = ‚ä• }.Countable :=
  countable_setOf_isolated_right (Œ± := Œ±·µí·µà)

/-- A set is a neighborhood of `a` within `(a, +‚àû)` if and only if it contains an interval `(a, u]`
with `a < u`. -/
theorem mem_nhdsWithin_Ioi_iff_exists_Ioc_subset [NoMaxOrder Œ±] [DenselyOrdered Œ±] {a : Œ±}
    {s : Set Œ±} : s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà Ioi a, Ioc a u ‚äÜ s := by
  rw [mem_nhdsWithin_Ioi_iff_exists_Ioo_subset]
  constructor
  ¬∑ rintro ‚ü®u, au, as‚ü©
    rcases exists_between au with ‚ü®v, hv‚ü©
    exact ‚ü®v, hv.1, fun x hx => as ‚ü®hx.1, lt_of_le_of_lt hx.2 hv.2‚ü©‚ü©
  ¬∑ rintro ‚ü®u, au, as‚ü©
    exact ‚ü®u, au, Subset.trans Ioo_subset_Ioc_self as‚ü©
#align mem_nhds_within_Ioi_iff_exists_Ioc_subset mem_nhdsWithin_Ioi_iff_exists_Ioc_subset

open List in
/-- The following statements are equivalent:

0. `s` is a neighborhood of `b` within `(-‚àû, b)`
1. `s` is a neighborhood of `b` within `[a, b)`
2. `s` is a neighborhood of `b` within `(a, b)`
3. `s` includes `(l, b)` for some `l ‚àà [a, b)`
4. `s` includes `(l, b)` for some `l < b` -/
theorem TFAE_mem_nhdsWithin_Iio {a b : Œ±} (h : a < b) (s : Set Œ±) :
    TFAE [s ‚àà ùìù[<] b,-- 0 : `s` is a neighborhood of `b` within `(-‚àû, b)`
        s ‚àà ùìù[Ico a b] b,-- 1 : `s` is a neighborhood of `b` within `[a, b)`
        s ‚àà ùìù[Ioo a b] b,-- 2 : `s` is a neighborhood of `b` within `(a, b)`
        ‚àÉ l ‚àà Ico a b, Ioo l b ‚äÜ s,-- 3 : `s` includes `(l, b)` for some `l ‚àà [a, b)`
        ‚àÉ l ‚àà Iio b, Ioo l b ‚äÜ s] := by-- 4 : `s` includes `(l, b)` for some `l < b`
  simpa only [exists_prop, OrderDual.exists, dual_Ioi, dual_Ioc, dual_Ioo] using
    TFAE_mem_nhdsWithin_Ioi h.dual (ofDual ‚Åª¬π' s)
#align tfae_mem_nhds_within_Iio TFAE_mem_nhdsWithin_Iio

theorem mem_nhdsWithin_Iio_iff_exists_mem_Ico_Ioo_subset {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà Ico l' a, Ioo l a ‚äÜ s :=
  (TFAE_mem_nhdsWithin_Iio hl' s).out 0 3
#align mem_nhds_within_Iio_iff_exists_mem_Ico_Ioo_subset mem_nhdsWithin_Iio_iff_exists_mem_Ico_Ioo_subset

/-- A set is a neighborhood of `a` within `(-‚àû, a)` if and only if it contains an interval `(l, a)`
with `l < a`, provided `a` is not a bottom element. -/
theorem mem_nhdsWithin_Iio_iff_exists_Ioo_subset' {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà Iio a, Ioo l a ‚äÜ s :=
  (TFAE_mem_nhdsWithin_Iio hl' s).out 0 4
#align mem_nhds_within_Iio_iff_exists_Ioo_subset' mem_nhdsWithin_Iio_iff_exists_Ioo_subset'

/-- A set is a neighborhood of `a` within `(-‚àû, a)` if and only if it contains an interval `(l, a)`
with `l < a`. -/
theorem mem_nhdsWithin_Iio_iff_exists_Ioo_subset [NoMinOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà Iio a, Ioo l a ‚äÜ s :=
  let ‚ü®_, h‚ü© := exists_lt a
  mem_nhdsWithin_Iio_iff_exists_Ioo_subset' h
#align mem_nhds_within_Iio_iff_exists_Ioo_subset mem_nhdsWithin_Iio_iff_exists_Ioo_subset

/-- A set is a neighborhood of `a` within `(-‚àû, a)` if and only if it contains an interval `[l, a)`
with `l < a`. -/
theorem mem_nhdsWithin_Iio_iff_exists_Ico_subset [NoMinOrder Œ±] [DenselyOrdered Œ±] {a : Œ±}
    {s : Set Œ±} : s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà Iio a, Ico l a ‚äÜ s := by
  have : ofDual ‚Åª¬π' s ‚àà ùìù[>] toDual a ‚Üî _ := mem_nhdsWithin_Ioi_iff_exists_Ioc_subset
  simpa only [OrderDual.exists, exists_prop, dual_Ioc] using this
#align mem_nhds_within_Iio_iff_exists_Ico_subset mem_nhdsWithin_Iio_iff_exists_Ico_subset

theorem nhdsWithin_Iio_basis' {a : Œ±} (h : ‚àÉ b, b < a) : (ùìù[<] a).HasBasis (¬∑ < a) (Ioo ¬∑ a) :=
  let ‚ü®_, h‚ü© := h
  ‚ü®fun _ => mem_nhdsWithin_Iio_iff_exists_Ioo_subset' h‚ü©

theorem nhdsWithin_Iio_eq_bot_iff {a : Œ±} : ùìù[<] a = ‚ä• ‚Üî IsBot a ‚à® ‚àÉ b, b ‚ãñ a := by
    convert (config := {preTransparency := .default})
      nhdsWithin_Ioi_eq_bot_iff (a := OrderDual.toDual a) using 4
    exact ofDual_covBy_ofDual_iff

open List in
/-- The following statements are equivalent:

0. `s` is a neighborhood of `a` within `[a, +‚àû)`;
1. `s` is a neighborhood of `a` within `[a, b]`;
2. `s` is a neighborhood of `a` within `[a, b)`;
3. `s` includes `[a, u)` for some `u ‚àà (a, b]`;
4. `s` includes `[a, u)` for some `u > a`.
-/
theorem TFAE_mem_nhdsWithin_Ici {a b : Œ±} (hab : a < b) (s : Set Œ±) :
    TFAE [s ‚àà ùìù[‚â•] a,
      s ‚àà ùìù[Icc a b] a,
      s ‚àà ùìù[Ico a b] a,
      ‚àÉ u ‚àà Ioc a b, Ico a u ‚äÜ s,
      ‚àÉ u ‚àà Ioi a , Ico a u ‚äÜ s] := by
  tfae_have 1 ‚Üî 2
  ¬∑ rw [nhdsWithin_Icc_eq_nhdsWithin_Ici hab]
  tfae_have 1 ‚Üî 3
  ¬∑ rw [nhdsWithin_Ico_eq_nhdsWithin_Ici hab]
  tfae_have 1 ‚Üî 5
  ¬∑ exact (nhdsWithin_Ici_basis' ‚ü®b, hab‚ü©).mem_iff
  tfae_have 4 ‚Üí 5
  ¬∑ exact fun ‚ü®u, umem, hu‚ü© => ‚ü®u, umem.1, hu‚ü©
  tfae_have 5 ‚Üí 4
  ¬∑ rintro ‚ü®u, hua, hus‚ü©
    exact
      ‚ü®min u b, ‚ü®lt_min hua hab, min_le_right _ _‚ü©,
        (Ico_subset_Ico_right <| min_le_left _ _).trans hus‚ü©
  tfae_finish
#align tfae_mem_nhds_within_Ici TFAE_mem_nhdsWithin_Ici

theorem mem_nhdsWithin_Ici_iff_exists_mem_Ioc_Ico_subset {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà Ioc a u', Ico a u ‚äÜ s :=
  (TFAE_mem_nhdsWithin_Ici hu' s).out 0 3 (by norm_num) (by norm_num)
#align mem_nhds_within_Ici_iff_exists_mem_Ioc_Ico_subset mem_nhdsWithin_Ici_iff_exists_mem_Ioc_Ico_subset

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u)`
with `a < u < u'`, provided `a` is not a top element. -/
theorem mem_nhdsWithin_Ici_iff_exists_Ico_subset' {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà Ioi a, Ico a u ‚äÜ s :=
  (TFAE_mem_nhdsWithin_Ici hu' s).out 0 4 (by norm_num) (by norm_num)
#align mem_nhds_within_Ici_iff_exists_Ico_subset' mem_nhdsWithin_Ici_iff_exists_Ico_subset'

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u)`
with `a < u`. -/
theorem mem_nhdsWithin_Ici_iff_exists_Ico_subset [NoMaxOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà Ioi a, Ico a u ‚äÜ s :=
  let ‚ü®_, hu'‚ü© := exists_gt a
  mem_nhdsWithin_Ici_iff_exists_Ico_subset' hu'
#align mem_nhds_within_Ici_iff_exists_Ico_subset mem_nhdsWithin_Ici_iff_exists_Ico_subset

theorem nhdsWithin_Ici_basis_Ico [NoMaxOrder Œ±] (a : Œ±) :
    (ùìù[‚â•] a).HasBasis (fun u => a < u) (Ico a) :=
  ‚ü®fun _ => mem_nhdsWithin_Ici_iff_exists_Ico_subset‚ü©
#align nhds_within_Ici_basis_Ico nhdsWithin_Ici_basis_Ico

/-- The filter of right neighborhoods has a basis of closed intervals. -/
theorem nhdsWithin_Ici_basis_Icc [NoMaxOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} :
    (ùìù[‚â•] a).HasBasis (a < ¬∑) (Icc a) :=
  (nhdsWithin_Ici_basis _).to_hasBasis
    (fun _u hu ‚Ü¶ (exists_between hu).imp fun _v hv ‚Ü¶ hv.imp_right Icc_subset_Ico_right)
    fun u hu ‚Ü¶ ‚ü®u, hu, Ico_subset_Icc_self‚ü©

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u]`
with `a < u`. -/
theorem mem_nhdsWithin_Ici_iff_exists_Icc_subset [NoMaxOrder Œ±] [DenselyOrdered Œ±] {a : Œ±}
    {s : Set Œ±} : s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u, a < u ‚àß Icc a u ‚äÜ s :=
  nhdsWithin_Ici_basis_Icc.mem_iff
#align mem_nhds_within_Ici_iff_exists_Icc_subset mem_nhdsWithin_Ici_iff_exists_Icc_subset

open List in
/-- The following statements are equivalent:

0. `s` is a neighborhood of `b` within `(-‚àû, b]`
1. `s` is a neighborhood of `b` within `[a, b]`
2. `s` is a neighborhood of `b` within `(a, b]`
3. `s` includes `(l, b]` for some `l ‚àà [a, b)`
4. `s` includes `(l, b]` for some `l < b` -/
theorem TFAE_mem_nhdsWithin_Iic {a b : Œ±} (h : a < b) (s : Set Œ±) :
    TFAE [s ‚àà ùìù[‚â§] b,-- 0 : `s` is a neighborhood of `b` within `(-‚àû, b]`
      s ‚àà ùìù[Icc a b] b,-- 1 : `s` is a neighborhood of `b` within `[a, b]`
      s ‚àà ùìù[Ioc a b] b,-- 2 : `s` is a neighborhood of `b` within `(a, b]`
      ‚àÉ l ‚àà Ico a b, Ioc l b ‚äÜ s,-- 3 : `s` includes `(l, b]` for some `l ‚àà [a, b)`
      ‚àÉ l ‚àà Iio b, Ioc l b ‚äÜ s] := by-- 4 : `s` includes `(l, b]` for some `l < b`
  simpa only [exists_prop, OrderDual.exists, dual_Ici, dual_Ioc, dual_Icc, dual_Ico] using
    TFAE_mem_nhdsWithin_Ici h.dual (ofDual ‚Åª¬π' s)
#align tfae_mem_nhds_within_Iic TFAE_mem_nhdsWithin_Iic

theorem mem_nhdsWithin_Iic_iff_exists_mem_Ico_Ioc_subset {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà Ico l' a, Ioc l a ‚äÜ s :=
  (TFAE_mem_nhdsWithin_Iic hl' s).out 0 3 (by norm_num) (by norm_num)
#align mem_nhds_within_Iic_iff_exists_mem_Ico_Ioc_subset mem_nhdsWithin_Iic_iff_exists_mem_Ico_Ioc_subset

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `(l, a]`
with `l < a`, provided `a` is not a bottom element. -/
theorem mem_nhdsWithin_Iic_iff_exists_Ioc_subset' {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà Iio a, Ioc l a ‚äÜ s :=
  (TFAE_mem_nhdsWithin_Iic hl' s).out 0 4 (by norm_num) (by norm_num)
#align mem_nhds_within_Iic_iff_exists_Ioc_subset' mem_nhdsWithin_Iic_iff_exists_Ioc_subset'

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `(l, a]`
with `l < a`. -/
theorem mem_nhdsWithin_Iic_iff_exists_Ioc_subset [NoMinOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà Iio a, Ioc l a ‚äÜ s :=
  let ‚ü®_, hl'‚ü© := exists_lt a
  mem_nhdsWithin_Iic_iff_exists_Ioc_subset' hl'
#align mem_nhds_within_Iic_iff_exists_Ioc_subset mem_nhdsWithin_Iic_iff_exists_Ioc_subset

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `[l, a]`
with `l < a`. -/
theorem mem_nhdsWithin_Iic_iff_exists_Icc_subset [NoMinOrder Œ±] [DenselyOrdered Œ±] {a : Œ±}
    {s : Set Œ±} : s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l, l < a ‚àß Icc l a ‚äÜ s :=
  calc s ‚àà ùìù[‚â§] a ‚Üî ofDual ‚Åª¬π' s ‚àà ùìù[‚â•] (toDual a) := Iff.rfl
  _ ‚Üî ‚àÉ u : Œ±, toDual a < toDual u ‚àß Icc (toDual a) (toDual u) ‚äÜ ofDual ‚Åª¬π' s :=
    mem_nhdsWithin_Ici_iff_exists_Icc_subset
  _ ‚Üî ‚àÉ l, l < a ‚àß Icc l a ‚äÜ s := by simp only [dual_Icc]; rfl
#align mem_nhds_within_Iic_iff_exists_Icc_subset mem_nhdsWithin_Iic_iff_exists_Icc_subset

/-- The filter of left neighborhoods has a basis of closed intervals. -/
theorem nhdsWithin_Iic_basis_Icc [NoMinOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} :
    (ùìù[‚â§] a).HasBasis (¬∑ < a) (Icc ¬∑ a) :=
  ‚ü®fun _ ‚Ü¶ mem_nhdsWithin_Iic_iff_exists_Icc_subset‚ü©

end OrderTopology

end LinearOrder

section LinearOrderedAddCommGroup

variable [TopologicalSpace Œ±] [LinearOrderedAddCommGroup Œ±] [OrderTopology Œ±]
variable {l : Filter Œ≤} {f g : Œ≤ ‚Üí Œ±}

theorem nhds_eq_iInf_abs_sub (a : Œ±) : ùìù a = ‚®Ö r > 0, ùìü { b | |a - b| < r } := by
  simp only [nhds_eq_order, abs_lt, setOf_and, ‚Üê inf_principal, iInf_inf_eq]
  refine (congr_arg‚ÇÇ _ ?_ ?_).trans (inf_comm ..)
  ¬∑ refine (Equiv.subLeft a).iInf_congr fun x => ?_; simp [Ioi]
  ¬∑ refine (Equiv.subRight a).iInf_congr fun x => ?_; simp [Iio]
#align nhds_eq_infi_abs_sub nhds_eq_iInf_abs_sub

theorem orderTopology_of_nhds_abs {Œ± : Type*} [TopologicalSpace Œ±] [LinearOrderedAddCommGroup Œ±]
    (h_nhds : ‚àÄ a : Œ±, ùìù a = ‚®Ö r > 0, ùìü { b | |a - b| < r }) : OrderTopology Œ± := by
  refine' ‚ü®TopologicalSpace.ext_nhds fun a => _‚ü©
  rw [h_nhds]
  letI := Preorder.topology Œ±; letI : OrderTopology Œ± := ‚ü®rfl‚ü©
  exact (nhds_eq_iInf_abs_sub a).symm
#align order_topology_of_nhds_abs orderTopology_of_nhds_abs

theorem LinearOrderedAddCommGroup.tendsto_nhds {x : Filter Œ≤} {a : Œ±} :
    Tendsto f x (ùìù a) ‚Üî ‚àÄ Œµ > (0 : Œ±), ‚àÄ·∂† b in x, |f b - a| < Œµ := by
  simp [nhds_eq_iInf_abs_sub, abs_sub_comm a]
#align linear_ordered_add_comm_group.tendsto_nhds LinearOrderedAddCommGroup.tendsto_nhds

theorem eventually_abs_sub_lt (a : Œ±) {Œµ : Œ±} (hŒµ : 0 < Œµ) : ‚àÄ·∂† x in ùìù a, |x - a| < Œµ :=
  (nhds_eq_iInf_abs_sub a).symm ‚ñ∏
    mem_iInf_of_mem Œµ (mem_iInf_of_mem hŒµ <| by simp only [abs_sub_comm, mem_principal_self])
#align eventually_abs_sub_lt eventually_abs_sub_lt

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to `C`
and `g` tends to `atTop` then `f + g` tends to `atTop`. -/
theorem Filter.Tendsto.add_atTop {C : Œ±} (hf : Tendsto f l (ùìù C)) (hg : Tendsto g l atTop) :
    Tendsto (fun x => f x + g x) l atTop := by
  nontriviality Œ±
  obtain ‚ü®C', hC'‚ü© : ‚àÉ C', C' < C := exists_lt C
  refine' tendsto_atTop_add_left_of_le' _ C' _ hg
  exact (hf.eventually (lt_mem_nhds hC')).mono fun x => le_of_lt
#align filter.tendsto.add_at_top Filter.Tendsto.add_atTop

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to `C`
and `g` tends to `atBot` then `f + g` tends to `atBot`. -/
theorem Filter.Tendsto.add_atBot {C : Œ±} (hf : Tendsto f l (ùìù C)) (hg : Tendsto g l atBot) :
    Tendsto (fun x => f x + g x) l atBot :=
  Filter.Tendsto.add_atTop (Œ± := Œ±·µí·µà) hf hg
#align filter.tendsto.add_at_bot Filter.Tendsto.add_atBot

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to
`atTop` and `g` tends to `C` then `f + g` tends to `atTop`. -/
theorem Filter.Tendsto.atTop_add {C : Œ±} (hf : Tendsto f l atTop) (hg : Tendsto g l (ùìù C)) :
    Tendsto (fun x => f x + g x) l atTop := by
  conv in _ + _ => rw [add_comm]
  exact hg.add_atTop hf
#align filter.tendsto.at_top_add Filter.Tendsto.atTop_add

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to
`atBot` and `g` tends to `C` then `f + g` tends to `atBot`. -/
theorem Filter.Tendsto.atBot_add {C : Œ±} (hf : Tendsto f l atBot) (hg : Tendsto g l (ùìù C)) :
    Tendsto (fun x => f x + g x) l atBot := by
  conv in _ + _ => rw [add_comm]
  exact hg.add_atBot hf
#align filter.tendsto.at_bot_add Filter.Tendsto.atBot_add

theorem nhds_basis_abs_sub_lt [NoMaxOrder Œ±] (a : Œ±) :
    (ùìù a).HasBasis (fun Œµ : Œ± => (0 : Œ±) < Œµ) fun Œµ => { b | |b - a| < Œµ } := by
  simp only [nhds_eq_iInf_abs_sub, abs_sub_comm (a := a)]
  refine hasBasis_biInf_principal' (fun x hx y hy => ?_) (exists_gt _)
  exact ‚ü®min x y, lt_min hx hy, fun _ hz => hz.trans_le (min_le_left _ _),
    fun _ hz => hz.trans_le (min_le_right _ _)‚ü©
#align nhds_basis_abs_sub_lt nhds_basis_abs_sub_lt

theorem nhds_basis_Ioo_pos [NoMaxOrder Œ±] (a : Œ±) :
    (ùìù a).HasBasis (fun Œµ : Œ± => (0 : Œ±) < Œµ) fun Œµ => Ioo (a - Œµ) (a + Œµ) := by
  convert nhds_basis_abs_sub_lt a
  simp only [Ioo, abs_lt, ‚Üê sub_lt_iff_lt_add, neg_lt_sub_iff_lt_add, sub_lt_comm]
#align nhds_basis_Ioo_pos nhds_basis_Ioo_pos

theorem nhds_basis_Icc_pos [NoMaxOrder Œ±] [DenselyOrdered Œ±] (a : Œ±) :
    (ùìù a).HasBasis ((0 : Œ±) < ¬∑) fun Œµ ‚Ü¶ Icc (a - Œµ) (a + Œµ) :=
  (nhds_basis_Ioo_pos a).to_hasBasis
    (fun _Œµ Œµ‚ÇÄ ‚Ü¶ let ‚ü®Œ¥, Œ¥‚ÇÄ, Œ¥Œµ‚ü© := exists_between Œµ‚ÇÄ
      ‚ü®Œ¥, Œ¥‚ÇÄ, Icc_subset_Ioo (sub_lt_sub_left Œ¥Œµ _) (add_lt_add_left Œ¥Œµ _)‚ü©)
    (fun Œµ Œµ‚ÇÄ ‚Ü¶ ‚ü®Œµ, Œµ‚ÇÄ, Ioo_subset_Icc_self‚ü©)

variable (Œ±)

theorem nhds_basis_zero_abs_sub_lt [NoMaxOrder Œ±] :
    (ùìù (0 : Œ±)).HasBasis (fun Œµ : Œ± => (0 : Œ±) < Œµ) fun Œµ => { b | |b| < Œµ } := by
  simpa using nhds_basis_abs_sub_lt (0 : Œ±)
#align nhds_basis_zero_abs_sub_lt nhds_basis_zero_abs_sub_lt

variable {Œ±}

/-- If `a` is positive we can form a basis from only nonnegative `Set.Ioo` intervals -/
theorem nhds_basis_Ioo_pos_of_pos [NoMaxOrder Œ±] {a : Œ±} (ha : 0 < a) :
    (ùìù a).HasBasis (fun Œµ : Œ± => (0 : Œ±) < Œµ ‚àß Œµ ‚â§ a) fun Œµ => Ioo (a - Œµ) (a + Œµ) :=
  (nhds_basis_Ioo_pos a).restrict fun Œµ hŒµ => ‚ü®min a Œµ, lt_min ha hŒµ, min_le_left _ _,
    Ioo_subset_Ioo (sub_le_sub_left (min_le_right _ _) _) (add_le_add_left (min_le_right _ _) _)‚ü©
#align nhds_basis_Ioo_pos_of_pos nhds_basis_Ioo_pos_of_pos

end LinearOrderedAddCommGroup

@[deprecated image_neg]
theorem preimage_neg [AddGroup Œ±] : preimage (Neg.neg : Œ± ‚Üí Œ±) = image (Neg.neg : Œ± ‚Üí Œ±) :=
  funext fun _ => image_neg.symm
#align preimage_neg preimage_neg

@[deprecated] -- use `Filter.map_neg` from `Mathlib.Order.Filter.Pointwise`
theorem Filter.map_neg_eq_comap_neg [AddGroup Œ±] :
    map (Neg.neg : Œ± ‚Üí Œ±) = comap (Neg.neg : Œ± ‚Üí Œ±) :=
  funext fun _ => map_eq_comap_of_inverse (funext neg_neg) (funext neg_neg)
#align filter.map_neg_eq_comap_neg Filter.map_neg_eq_comap_neg

namespace Set.OrdConnected

variable [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderTopology Œ±] [DenselyOrdered Œ±]

/-- If `S` is order-connected and contains two points `x < y`, then `S` is a right neighbourhood
of `x`. -/
lemma mem_nhdsWithin_Ici [NoMaxOrder Œ±] {S : Set Œ±} (hS : OrdConnected S)
    {x y : Œ±} (hx : x ‚àà S) (hy : y ‚àà S) (hxy : x < y) :
    S ‚àà ùìù[‚â•] x :=
  mem_nhdsWithin_Ici_iff_exists_Icc_subset.2 ‚ü®y, hxy, hS.out hx hy‚ü©

/-- If `S` is order-connected and contains two points `x < y`, then `S` is a punctured right
neighbourhood of `x`. -/
lemma mem_nhdsWithin_Ioi [NoMaxOrder Œ±] {S : Set Œ±} (hS : OrdConnected S)
    {x y : Œ±} (hx : x ‚àà S) (hy : y ‚àà S) (hxy : x < y) :
    S ‚àà ùìù[>] x :=
  nhdsWithin_mono _ Ioi_subset_Ici_self <| hS.mem_nhdsWithin_Ici hx hy hxy

/-- If `S` is order-connected and contains two points `x < y`, then `S` is a left neighbourhood
of `y`. -/
lemma mem_nhdsWithin_Iic [NoMinOrder Œ±] {S : Set Œ±} (hS : OrdConnected S)
    {x y : Œ±} (hx : x ‚àà S) (hy : y ‚àà S) (hxy : x < y) :
    S ‚àà ùìù[‚â§] y :=
  mem_nhdsWithin_Iic_iff_exists_Icc_subset.2 ‚ü®x, hxy, hS.out hx hy‚ü©

/-- If `S` is order-connected and contains two points `x < y`, then `S` is a punctured left
neighbourhood of `y`. -/
lemma mem_nhdsWithin_Iio [NoMinOrder Œ±] {S : Set Œ±} (hS : OrdConnected S)
    {x y : Œ±} (hx : x ‚àà S) (hy : y ‚àà S) (hxy : x < y) :
    S ‚àà ùìù[<] y :=
  nhdsWithin_mono _ Iio_subset_Iic_self <| hS.mem_nhdsWithin_Iic hx hy hxy

end OrdConnected
