/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Yury Kudryashov
-/
import Mathlib.Algebra.Ring.Pointwise.Set
import Mathlib.Order.Filter.AtTopBot.CompleteLattice
import Mathlib.Order.Filter.AtTopBot.Group
import Mathlib.Topology.Order.Basic

/-!
# Neighborhoods to the left and to the right on an `OrderTopology`

We've seen some properties of left and right neighborhood of a point in an `OrderClosedTopology`.
In an `OrderTopology`, such neighborhoods can be characterized as the sets containing suitable
intervals to the right or to the left of `a`. We give now these characterizations. -/

open Set Filter TopologicalSpace Topology Function

open OrderDual (toDual ofDual)

variable {Œ± Œ≤ Œ≥ : Type*}

section LinearOrder

variable [TopologicalSpace Œ±] [LinearOrder Œ±]

section OrderTopology

variable [OrderTopology Œ±]

open List in
/-- The following statements are equivalent:

0. `s` is a neighborhood of `a` within `(a, +‚àû)`;
1. `s` is a neighborhood of `a` within `(a, b]`;
2. `s` is a neighborhood of `a` within `(a, b)`;
3. `s` includes `(a, u)` for some `u ‚àà (a, b]`;
4. `s` includes `(a, u)` for some `u > a`.
-/
theorem TFAE_mem_nhdsGT {a b : Œ±} (hab : a < b) (s : Set Œ±) :
    TFAE [s ‚àà ùìù[>] a,
      s ‚àà ùìù[Ioc a b] a,
      s ‚àà ùìù[Ioo a b] a,
      ‚àÉ u ‚àà Ioc a b, Ioo a u ‚äÜ s,
      ‚àÉ u ‚àà Ioi a, Ioo a u ‚äÜ s] := by
  tfae_have 1 ‚Üî 2 := by
    rw [nhdsWithin_Ioc_eq_nhdsGT hab]
  tfae_have 1 ‚Üî 3 := by
    rw [nhdsWithin_Ioo_eq_nhdsGT hab]
  tfae_have 4 ‚Üí 5 := fun ‚ü®u, umem, hu‚ü© => ‚ü®u, umem.1, hu‚ü©
  tfae_have 5 ‚Üí 1
  | ‚ü®u, hau, hu‚ü© => mem_of_superset (Ioo_mem_nhdsGT hau) hu
  tfae_have 1 ‚Üí 4
  | h => by
    rcases mem_nhdsWithin_iff_exists_mem_nhds_inter.1 h with ‚ü®v, va, hv‚ü©
    rcases exists_Ico_subset_of_mem_nhds' va hab with ‚ü®u, au, hu‚ü©
    exact ‚ü®u, au, fun x hx => hv ‚ü®hu ‚ü®le_of_lt hx.1, hx.2‚ü©, hx.1‚ü©‚ü©
  tfae_finish

@[deprecated (since := "2024-12-22")]
alias TFAE_mem_nhdsWithin_Ioi := TFAE_mem_nhdsGT

theorem mem_nhdsGT_iff_exists_mem_Ioc_Ioo_subset {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà Ioc a u', Ioo a u ‚äÜ s :=
  (TFAE_mem_nhdsGT hu' s).out 0 3

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Ioi_iff_exists_mem_Ioc_Ioo_subset := mem_nhdsGT_iff_exists_mem_Ioc_Ioo_subset

/-- A set is a neighborhood of `a` within `(a, +‚àû)` if and only if it contains an interval `(a, u)`
with `a < u < u'`, provided `a` is not a top element. -/
theorem mem_nhdsGT_iff_exists_Ioo_subset' {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà Ioi a, Ioo a u ‚äÜ s :=
  (TFAE_mem_nhdsGT hu' s).out 0 4

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Ioi_iff_exists_Ioo_subset' := mem_nhdsGT_iff_exists_Ioo_subset'

theorem nhdsGT_basis_of_exists_gt {a : Œ±} (h : ‚àÉ b, a < b) : (ùìù[>] a).HasBasis (a < ¬∑) (Ioo a) :=
  let ‚ü®_, h‚ü© := h
  ‚ü®fun _ => mem_nhdsGT_iff_exists_Ioo_subset' h‚ü©

@[deprecated (since := "2024-12-22")]
alias nhdsWithin_Ioi_basis' := nhdsGT_basis_of_exists_gt

lemma nhdsGT_basis [NoMaxOrder Œ±] (a : Œ±) : (ùìù[>] a).HasBasis (a < ¬∑) (Ioo a) :=
  nhdsGT_basis_of_exists_gt <| exists_gt a

@[deprecated (since := "2024-12-22")]
alias nhdsWithin_Ioi_basis := nhdsGT_basis

theorem nhdsGT_eq_bot_iff {a : Œ±} : ùìù[>] a = ‚ä• ‚Üî IsTop a ‚à® ‚àÉ b, a ‚ãñ b := by
  by_cases ha : IsTop a
  ¬∑ simp [ha, ha.isMax.Ioi_eq]
  ¬∑ simp only [ha, false_or]
    rw [isTop_iff_isMax, not_isMax_iff] at ha
    simp only [(nhdsGT_basis_of_exists_gt ha).eq_bot_iff, covBy_iff_Ioo_eq]

@[deprecated (since := "2024-12-22")]
alias nhdsWithin_Ioi_eq_bot_iff := nhdsGT_eq_bot_iff

/-- A set is a neighborhood of `a` within `(a, +‚àû)` if and only if it contains an interval `(a, u)`
with `a < u`. -/
theorem mem_nhdsGT_iff_exists_Ioo_subset [NoMaxOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà Ioi a, Ioo a u ‚äÜ s :=
  let ‚ü®_u', hu'‚ü© := exists_gt a
  mem_nhdsGT_iff_exists_Ioo_subset' hu'

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Ioi_iff_exists_Ioo_subset := mem_nhdsGT_iff_exists_Ioo_subset

/-- The set of points which are isolated on the right is countable when the space is
second-countable. -/
theorem countable_setOf_isolated_right [SecondCountableTopology Œ±] :
    { x : Œ± | ùìù[>] x = ‚ä• }.Countable := by
  simp only [nhdsGT_eq_bot_iff, setOf_or]
  exact (subsingleton_isTop Œ±).countable.union countable_setOf_covBy_right

/-- The set of points which are isolated on the left is countable when the space is
second-countable. -/
theorem countable_setOf_isolated_left [SecondCountableTopology Œ±] :
    { x : Œ± | ùìù[<] x = ‚ä• }.Countable :=
  countable_setOf_isolated_right (Œ± := Œ±·µí·µà)

/-- A set is a neighborhood of `a` within `(a, +‚àû)` if and only if it contains an interval `(a, u]`
with `a < u`. -/
theorem mem_nhdsGT_iff_exists_Ioc_subset [NoMaxOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà Ioi a, Ioc a u ‚äÜ s := by
  rw [mem_nhdsGT_iff_exists_Ioo_subset]
  constructor
  ¬∑ rintro ‚ü®u, au, as‚ü©
    rcases exists_between au with ‚ü®v, hv‚ü©
    exact ‚ü®v, hv.1, fun x hx => as ‚ü®hx.1, lt_of_le_of_lt hx.2 hv.2‚ü©‚ü©
  ¬∑ rintro ‚ü®u, au, as‚ü©
    exact ‚ü®u, au, Subset.trans Ioo_subset_Ioc_self as‚ü©

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Ioi_iff_exists_Ioc_subset := mem_nhdsGT_iff_exists_Ioc_subset

open List in
/-- The following statements are equivalent:

0. `s` is a neighborhood of `b` within `(-‚àû, b)`
1. `s` is a neighborhood of `b` within `[a, b)`
2. `s` is a neighborhood of `b` within `(a, b)`
3. `s` includes `(l, b)` for some `l ‚àà [a, b)`
4. `s` includes `(l, b)` for some `l < b` -/
theorem TFAE_mem_nhdsLT {a b : Œ±} (h : a < b) (s : Set Œ±) :
    TFAE [s ‚àà ùìù[<] b,-- 0 : `s` is a neighborhood of `b` within `(-‚àû, b)`
        s ‚àà ùìù[Ico a b] b,-- 1 : `s` is a neighborhood of `b` within `[a, b)`
        s ‚àà ùìù[Ioo a b] b,-- 2 : `s` is a neighborhood of `b` within `(a, b)`
        ‚àÉ l ‚àà Ico a b, Ioo l b ‚äÜ s,-- 3 : `s` includes `(l, b)` for some `l ‚àà [a, b)`
        ‚àÉ l ‚àà Iio b, Ioo l b ‚äÜ s] := by-- 4 : `s` includes `(l, b)` for some `l < b`
  simpa using TFAE_mem_nhdsGT h.dual (ofDual ‚Åª¬π' s)

@[deprecated (since := "2024-12-22")]
alias TFAE_mem_nhdsWithin_Iio := TFAE_mem_nhdsLT

theorem mem_nhdsLT_iff_exists_mem_Ico_Ioo_subset {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà Ico l' a, Ioo l a ‚äÜ s :=
  (TFAE_mem_nhdsLT hl' s).out 0 3

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Iio_iff_exists_mem_Ico_Ioo_subset := mem_nhdsLT_iff_exists_mem_Ico_Ioo_subset

/-- A set is a neighborhood of `a` within `(-‚àû, a)` if and only if it contains an interval `(l, a)`
with `l < a`, provided `a` is not a bottom element. -/
theorem mem_nhdsLT_iff_exists_Ioo_subset' {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà Iio a, Ioo l a ‚äÜ s :=
  (TFAE_mem_nhdsLT hl' s).out 0 4

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Iio_iff_exists_Ioo_subset' := mem_nhdsLT_iff_exists_Ioo_subset'

/-- A set is a neighborhood of `a` within `(-‚àû, a)` if and only if it contains an interval `(l, a)`
with `l < a`. -/
theorem mem_nhdsLT_iff_exists_Ioo_subset [NoMinOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà Iio a, Ioo l a ‚äÜ s :=
  let ‚ü®_, h‚ü© := exists_lt a
  mem_nhdsLT_iff_exists_Ioo_subset' h

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Iio_iff_exists_Ioo_subset := mem_nhdsLT_iff_exists_Ioo_subset

/-- A set is a neighborhood of `a` within `(-‚àû, a)` if and only if it contains an interval `[l, a)`
with `l < a`. -/
theorem mem_nhdsLT_iff_exists_Ico_subset [NoMinOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà Iio a, Ico l a ‚äÜ s := by
  have : ofDual ‚Åª¬π' s ‚àà ùìù[>] toDual a ‚Üî _ := mem_nhdsGT_iff_exists_Ioc_subset
  simpa using this

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Iio_iff_exists_Ico_subset := mem_nhdsLT_iff_exists_Ico_subset

theorem nhdsLT_basis_of_exists_lt {a : Œ±} (h : ‚àÉ b, b < a) : (ùìù[<] a).HasBasis (¬∑ < a) (Ioo ¬∑ a) :=
  let ‚ü®_, h‚ü© := h
  ‚ü®fun _ => mem_nhdsLT_iff_exists_Ioo_subset' h‚ü©

@[deprecated (since := "2024-12-22")]
alias nhdsWithin_Iio_basis' := nhdsLT_basis_of_exists_lt

theorem nhdsLT_basis [NoMinOrder Œ±] (a : Œ±) : (ùìù[<] a).HasBasis (¬∑ < a) (Ioo ¬∑ a) :=
  nhdsLT_basis_of_exists_lt <| exists_lt a

@[deprecated (since := "2024-12-22")]
alias nhdsWithin_Iio_basis := nhdsLT_basis

theorem nhdsLT_eq_bot_iff {a : Œ±} : ùìù[<] a = ‚ä• ‚Üî IsBot a ‚à® ‚àÉ b, b ‚ãñ a := by
  convert (config := { preTransparency := .default }) nhdsGT_eq_bot_iff (a := OrderDual.toDual a)
    using 4
  exact ofDual_covBy_ofDual_iff

@[deprecated (since := "2024-12-22")]
alias nhdsWithin_Iio_eq_bot_iff := nhdsLT_eq_bot_iff

open List in
/-- The following statements are equivalent:

0. `s` is a neighborhood of `a` within `[a, +‚àû)`;
1. `s` is a neighborhood of `a` within `[a, b]`;
2. `s` is a neighborhood of `a` within `[a, b)`;
3. `s` includes `[a, u)` for some `u ‚àà (a, b]`;
4. `s` includes `[a, u)` for some `u > a`.
-/
theorem TFAE_mem_nhdsGE {a b : Œ±} (hab : a < b) (s : Set Œ±) :
    TFAE [s ‚àà ùìù[‚â•] a,
      s ‚àà ùìù[Icc a b] a,
      s ‚àà ùìù[Ico a b] a,
      ‚àÉ u ‚àà Ioc a b, Ico a u ‚äÜ s,
      ‚àÉ u ‚àà Ioi a , Ico a u ‚äÜ s] := by
  tfae_have 1 ‚Üî 2 := by
    rw [nhdsWithin_Icc_eq_nhdsGE hab]
  tfae_have 1 ‚Üî 3 := by
    rw [nhdsWithin_Ico_eq_nhdsGE hab]
  tfae_have 1 ‚Üî 5 := (nhdsGE_basis_of_exists_gt ‚ü®b, hab‚ü©).mem_iff
  tfae_have 4 ‚Üí 5 := fun ‚ü®u, umem, hu‚ü© => ‚ü®u, umem.1, hu‚ü©
  tfae_have 5 ‚Üí 4
  | ‚ü®u, hua, hus‚ü© => ‚ü®min u b, ‚ü®lt_min hua hab, min_le_right _ _‚ü©,
      (Ico_subset_Ico_right <| min_le_left _ _).trans hus‚ü©
  tfae_finish

@[deprecated (since := "2024-12-22")]
alias TFAE_mem_nhdsWithin_Ici := TFAE_mem_nhdsGE

theorem mem_nhdsGE_iff_exists_mem_Ioc_Ico_subset {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà Ioc a u', Ico a u ‚äÜ s :=
  (TFAE_mem_nhdsGE hu' s).out 0 3 (by norm_num) (by norm_num)

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Ici_iff_exists_mem_Ioc_Ico_subset := mem_nhdsGE_iff_exists_mem_Ioc_Ico_subset

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u)`
with `a < u < u'`, provided `a` is not a top element. -/
theorem mem_nhdsGE_iff_exists_Ico_subset' {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà Ioi a, Ico a u ‚äÜ s :=
  (TFAE_mem_nhdsGE hu' s).out 0 4 (by norm_num) (by norm_num)

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Ici_iff_exists_Ico_subset' := mem_nhdsGE_iff_exists_Ico_subset'

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u)`
with `a < u`. -/
theorem mem_nhdsGE_iff_exists_Ico_subset [NoMaxOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà Ioi a, Ico a u ‚äÜ s :=
  let ‚ü®_, hu'‚ü© := exists_gt a
  mem_nhdsGE_iff_exists_Ico_subset' hu'

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Ici_iff_exists_Ico_subset := mem_nhdsGE_iff_exists_Ico_subset

theorem nhdsGE_basis_Ico [NoMaxOrder Œ±] (a : Œ±) : (ùìù[‚â•] a).HasBasis (fun u => a < u) (Ico a) :=
  ‚ü®fun _ => mem_nhdsGE_iff_exists_Ico_subset‚ü©

@[deprecated (since := "2024-12-22")]
alias nhdsWithin_Ici_basis_Ico := nhdsGE_basis_Ico

/-- The filter of right neighborhoods has a basis of closed intervals. -/
theorem nhdsGE_basis_Icc [NoMaxOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} :
    (ùìù[‚â•] a).HasBasis (a < ¬∑) (Icc a) :=
  (nhdsGE_basis _).to_hasBasis
    (fun _u hu ‚Ü¶ (exists_between hu).imp fun _v hv ‚Ü¶ hv.imp_right Icc_subset_Ico_right) fun u hu ‚Ü¶
    ‚ü®u, hu, Ico_subset_Icc_self‚ü©

@[deprecated (since := "2024-12-22")]
alias nhdsWithin_Ici_basis_Icc := nhdsGE_basis_Icc

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u]`
with `a < u`. -/
theorem mem_nhdsGE_iff_exists_Icc_subset [NoMaxOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u, a < u ‚àß Icc a u ‚äÜ s :=
  nhdsGE_basis_Icc.mem_iff

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Ici_iff_exists_Icc_subset := mem_nhdsGE_iff_exists_Icc_subset

open List in
/-- The following statements are equivalent:

0. `s` is a neighborhood of `b` within `(-‚àû, b]`
1. `s` is a neighborhood of `b` within `[a, b]`
2. `s` is a neighborhood of `b` within `(a, b]`
3. `s` includes `(l, b]` for some `l ‚àà [a, b)`
4. `s` includes `(l, b]` for some `l < b` -/
theorem TFAE_mem_nhdsLE {a b : Œ±} (h : a < b) (s : Set Œ±) :
    TFAE [s ‚àà ùìù[‚â§] b,-- 0 : `s` is a neighborhood of `b` within `(-‚àû, b]`
      s ‚àà ùìù[Icc a b] b,-- 1 : `s` is a neighborhood of `b` within `[a, b]`
      s ‚àà ùìù[Ioc a b] b,-- 2 : `s` is a neighborhood of `b` within `(a, b]`
      ‚àÉ l ‚àà Ico a b, Ioc l b ‚äÜ s,-- 3 : `s` includes `(l, b]` for some `l ‚àà [a, b)`
      ‚àÉ l ‚àà Iio b, Ioc l b ‚äÜ s] := by-- 4 : `s` includes `(l, b]` for some `l < b`
  simpa using TFAE_mem_nhdsGE h.dual (ofDual ‚Åª¬π' s)

@[deprecated (since := "2024-12-22")]
alias TFAE_mem_nhdsWithin_Iic := TFAE_mem_nhdsLE

theorem mem_nhdsLE_iff_exists_mem_Ico_Ioc_subset {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà Ico l' a, Ioc l a ‚äÜ s :=
  (TFAE_mem_nhdsLE hl' s).out 0 3 (by norm_num) (by norm_num)

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Iic_iff_exists_mem_Ico_Ioc_subset := mem_nhdsLE_iff_exists_mem_Ico_Ioc_subset

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `(l, a]`
with `l < a`, provided `a` is not a bottom element. -/
theorem mem_nhdsLE_iff_exists_Ioc_subset' {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà Iio a, Ioc l a ‚äÜ s :=
  (TFAE_mem_nhdsLE hl' s).out 0 4 (by norm_num) (by norm_num)

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Iic_iff_exists_Ioc_subset' := mem_nhdsLE_iff_exists_Ioc_subset'

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `(l, a]`
with `l < a`. -/
theorem mem_nhdsLE_iff_exists_Ioc_subset [NoMinOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà Iio a, Ioc l a ‚äÜ s :=
  let ‚ü®_, hl'‚ü© := exists_lt a
  mem_nhdsLE_iff_exists_Ioc_subset' hl'

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Iic_iff_exists_Ioc_subset := mem_nhdsLE_iff_exists_Ioc_subset

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `[l, a]`
with `l < a`. -/
theorem mem_nhdsLE_iff_exists_Icc_subset [NoMinOrder Œ±] [DenselyOrdered Œ±] {a : Œ±}
    {s : Set Œ±} : s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l, l < a ‚àß Icc l a ‚äÜ s :=
  calc s ‚àà ùìù[‚â§] a ‚Üî ofDual ‚Åª¬π' s ‚àà ùìù[‚â•] (toDual a) := Iff.rfl
  _ ‚Üî ‚àÉ u : Œ±, toDual a < toDual u ‚àß Icc (toDual a) (toDual u) ‚äÜ ofDual ‚Åª¬π' s :=
    mem_nhdsGE_iff_exists_Icc_subset
  _ ‚Üî ‚àÉ l, l < a ‚àß Icc l a ‚äÜ s := by simp

@[deprecated (since := "2024-12-22")]
alias mem_nhdsWithin_Iic_iff_exists_Icc_subset := mem_nhdsLE_iff_exists_Icc_subset

/-- The filter of left neighborhoods has a basis of closed intervals. -/
theorem nhdsLE_basis_Icc [NoMinOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} :
    (ùìù[‚â§] a).HasBasis (¬∑ < a) (Icc ¬∑ a) :=
  ‚ü®fun _ ‚Ü¶ mem_nhdsLE_iff_exists_Icc_subset‚ü©

@[deprecated (since := "2024-12-22")]
alias nhdsWithin_Iic_basis_Icc := nhdsLE_basis_Icc

end OrderTopology

end LinearOrder

section LinearOrderedCommGroup

variable [TopologicalSpace Œ±] [CommGroup Œ±] [LinearOrder Œ±] [IsOrderedMonoid Œ±]
  [OrderTopology Œ±]
variable {l : Filter Œ≤} {f g : Œ≤ ‚Üí Œ±}

@[to_additive]
theorem nhds_eq_iInf_mabs_div (a : Œ±) : ùìù a = ‚®Ö r > 1, ùìü { b | |a / b|‚Çò < r } := by
  simp only [nhds_eq_order, mabs_lt, setOf_and, ‚Üê inf_principal, iInf_inf_eq]
  refine (congr_arg‚ÇÇ _ ?_ ?_).trans (inf_comm ..)
  ¬∑ refine (Equiv.divLeft a).iInf_congr fun x => ?_; simp [Ioi]
  ¬∑ refine (Equiv.divRight a).iInf_congr fun x => ?_; simp [Iio]

@[to_additive]
theorem orderTopology_of_nhds_mabs {Œ± : Type*} [TopologicalSpace Œ±] [CommGroup Œ±] [LinearOrder Œ±]
    [IsOrderedMonoid Œ±]
    (h_nhds : ‚àÄ a : Œ±, ùìù a = ‚®Ö r > 1, ùìü { b | |a / b|‚Çò < r }) : OrderTopology Œ± := by
  refine ‚ü®TopologicalSpace.ext_nhds fun a => ?_‚ü©
  rw [h_nhds]
  letI := Preorder.topology Œ±; letI : OrderTopology Œ± := ‚ü®rfl‚ü©
  exact (nhds_eq_iInf_mabs_div a).symm

@[to_additive]
theorem LinearOrderedCommGroup.tendsto_nhds {x : Filter Œ≤} {a : Œ±} :
    Tendsto f x (ùìù a) ‚Üî ‚àÄ Œµ > (1 : Œ±), ‚àÄ·∂† b in x, |f b / a|‚Çò < Œµ := by
  simp [nhds_eq_iInf_mabs_div, mabs_div_comm a]

@[to_additive]
theorem eventually_mabs_div_lt (a : Œ±) {Œµ : Œ±} (hŒµ : 1 < Œµ) : ‚àÄ·∂† x in ùìù a, |x / a|‚Çò < Œµ :=
  (nhds_eq_iInf_mabs_div a).symm ‚ñ∏
    mem_iInf_of_mem Œµ (mem_iInf_of_mem hŒµ <| by simp only [mabs_div_comm, mem_principal_self])

/-- In a linearly ordered commutative group with the order topology,
if `f` tends to `C` and `g` tends to `atTop` then `f * g` tends to `atTop`. -/
@[to_additive add_atTop "In a linearly ordered additive commutative group with the order topology,
if `f` tends to `C` and `g` tends to `atTop` then `f + g` tends to `atTop`."]
theorem Filter.Tendsto.mul_atTop' {C : Œ±} (hf : Tendsto f l (ùìù C)) (hg : Tendsto g l atTop) :
    Tendsto (fun x => f x * g x) l atTop := by
  nontriviality Œ±
  obtain ‚ü®C', hC'‚ü© : ‚àÉ C', C' < C := exists_lt C
  refine tendsto_atTop_mul_left_of_le' _ C' ?_ hg
  exact (hf.eventually (lt_mem_nhds hC')).mono fun x => le_of_lt

/-- In a linearly ordered commutative group with the order topology,
if `f` tends to `C` and `g` tends to `atBot` then `f * g` tends to `atBot`. -/
@[to_additive add_atBot "In a linearly ordered additive commutative group with the order topology,
if `f` tends to `C` and `g` tends to `atBot` then `f + g` tends to `atBot`."]
theorem Filter.Tendsto.mul_atBot' {C : Œ±} (hf : Tendsto f l (ùìù C)) (hg : Tendsto g l atBot) :
    Tendsto (fun x => f x * g x) l atBot :=
  Filter.Tendsto.mul_atTop' (Œ± := Œ±·µí·µà) hf hg

/-- In a linearly ordered commutative group with the order topology,
 if `f` tends to `atTop` and `g` tends to `C` then `f * g` tends to `atTop`. -/
@[to_additive atTop_add "In a linearly ordered additive commutative group with the order topology,
if `f` tends to `atTop` and `g` tends to `C` then `f + g` tends to `atTop`."]
theorem Filter.Tendsto.atTop_mul' {C : Œ±} (hf : Tendsto f l atTop) (hg : Tendsto g l (ùìù C)) :
    Tendsto (fun x => f x * g x) l atTop := by
  conv in _ * _ => rw [mul_comm]
  exact hg.mul_atTop' hf

/-- In a linearly ordered commutative group with the order topology,
if `f` tends to `atBot` and `g` tends to `C` then `f * g` tends to `atBot`. -/
@[to_additive atBot_add "In a linearly ordered additive commutative group with the order topology,
if `f` tends to `atBot` and `g` tends to `C` then `f + g` tends to `atBot`."]
theorem Filter.Tendsto.atBot_mul' {C : Œ±} (hf : Tendsto f l atBot) (hg : Tendsto g l (ùìù C)) :
    Tendsto (fun x => f x * g x) l atBot := by
  conv in _ * _ => rw [mul_comm]
  exact hg.mul_atBot' hf

@[to_additive]
theorem nhds_basis_mabs_div_lt [NoMaxOrder Œ±] (a : Œ±) :
    (ùìù a).HasBasis (fun Œµ : Œ± => (1 : Œ±) < Œµ) fun Œµ => { b | |b / a|‚Çò < Œµ } := by
  simp only [nhds_eq_iInf_mabs_div, mabs_div_comm (a := a)]
  refine hasBasis_biInf_principal' (fun x hx y hy => ?_) (exists_gt _)
  exact ‚ü®min x y, lt_min hx hy, fun _ hz => hz.trans_le (min_le_left _ _),
    fun _ hz => hz.trans_le (min_le_right _ _)‚ü©

@[to_additive]
theorem nhds_basis_Ioo_one_lt [NoMaxOrder Œ±] (a : Œ±) :
    (ùìù a).HasBasis (fun Œµ : Œ± => (1 : Œ±) < Œµ) fun Œµ => Ioo (a / Œµ) (a * Œµ) := by
  convert nhds_basis_mabs_div_lt a
  simp only [Ioo, mabs_lt, ‚Üê div_lt_iff_lt_mul, inv_lt_div_iff_lt_mul, div_lt_comm]

@[to_additive]
theorem nhds_basis_Icc_one_lt [NoMaxOrder Œ±] [DenselyOrdered Œ±] (a : Œ±) :
    (ùìù a).HasBasis ((1 : Œ±) < ¬∑) fun Œµ ‚Ü¶ Icc (a / Œµ) (a * Œµ) :=
  (nhds_basis_Ioo_one_lt a).to_hasBasis
    (fun _Œµ Œµ‚ÇÅ ‚Ü¶ let ‚ü®Œ¥, Œ¥‚ÇÅ, Œ¥Œµ‚ü© := exists_between Œµ‚ÇÅ
      ‚ü®Œ¥, Œ¥‚ÇÅ, Icc_subset_Ioo (by gcongr) (by gcongr)‚ü©)
    (fun Œµ Œµ‚ÇÅ ‚Ü¶ ‚ü®Œµ, Œµ‚ÇÅ, Ioo_subset_Icc_self‚ü©)

variable (Œ±) in
@[to_additive]
theorem nhds_basis_one_mabs_lt [NoMaxOrder Œ±] :
    (ùìù (1 : Œ±)).HasBasis (fun Œµ : Œ± => (1 : Œ±) < Œµ) fun Œµ => { b | |b|‚Çò < Œµ } := by
  simpa using nhds_basis_mabs_div_lt (1 : Œ±)

@[deprecated (since := "2025-03-18")]
alias nhds_basis_zero_abs_sub_lt := nhds_basis_zero_abs_lt

/-- If `a > 1`, then open intervals `(a / Œµ, aŒµ)`, `1 < Œµ ‚â§ a`,
form a basis of neighborhoods of `a`.

This upper bound for `Œµ` guarantees that all elements of these intervals are greater than one. -/
@[to_additive "If `a` is positive, then the intervals `(a - Œµ, a + Œµ)`, `0 < Œµ ‚â§ a`,
form a basis of neighborhoods of `a`.

This upper bound for `Œµ` guarantees that all elements of these intervals are positive."]
theorem nhds_basis_Ioo_one_lt_of_one_lt [NoMaxOrder Œ±] {a : Œ±} (ha : 1 < a) :
    (ùìù a).HasBasis (fun Œµ : Œ± => (1 : Œ±) < Œµ ‚àß Œµ ‚â§ a) fun Œµ => Ioo (a / Œµ) (a * Œµ) :=
  (nhds_basis_Ioo_one_lt a).restrict fun Œµ hŒµ ‚Ü¶
    ‚ü®min a Œµ, lt_min ha hŒµ, min_le_left _ _, by gcongr <;> apply min_le_right‚ü©

end LinearOrderedCommGroup

namespace Set.OrdConnected

section ClosedIciTopology

variable [TopologicalSpace Œ±] [LinearOrder Œ±] [ClosedIciTopology Œ±] {S : Set Œ±} {x y : Œ±}

/-- If `S` is order-connected and contains two points `x < y`,
then `S` is a right neighbourhood of `x`. -/
lemma mem_nhdsGE (hS : OrdConnected S) (hx : x ‚àà S) (hy : y ‚àà S) (hxy : x < y) : S ‚àà ùìù[‚â•] x :=
  mem_of_superset (Icc_mem_nhdsGE hxy) <| hS.out hx hy

@[deprecated (since := "2024-12-22")] alias mem_nhdsWithin_Ici := mem_nhdsGE

/-- If `S` is order-connected and contains two points `x < y`,
then `S` is a punctured right neighbourhood of `x`. -/
lemma mem_nhdsGT (hS : OrdConnected S) (hx : x ‚àà S) (hy : y ‚àà S) (hxy : x < y) : S ‚àà ùìù[>] x :=
  nhdsWithin_mono _ Ioi_subset_Ici_self <| hS.mem_nhdsGE hx hy hxy

@[deprecated (since := "2024-12-22")] alias mem_nhdsWithin_Ioi := mem_nhdsGT

end ClosedIciTopology

variable [TopologicalSpace Œ±] [LinearOrder Œ±] [ClosedIicTopology Œ±] {S : Set Œ±} {x y : Œ±}

/-- If `S` is order-connected and contains two points `x < y`, then `S` is a left neighbourhood
of `y`. -/
lemma mem_nhdsLE (hS : OrdConnected S) (hx : x ‚àà S) (hy : y ‚àà S) (hxy : x < y) : S ‚àà ùìù[‚â§] y :=
  hS.dual.mem_nhdsGE hy hx hxy

@[deprecated (since := "2024-12-22")] alias mem_nhdsWithin_Iic := mem_nhdsLE

/-- If `S` is order-connected and contains two points `x < y`, then `S` is a punctured left
neighbourhood of `y`. -/
lemma mem_nhdsLT (hS : OrdConnected S) (hx : x ‚àà S) (hy : y ‚àà S) (hxy : x < y) : S ‚àà ùìù[<] y :=
  hS.dual.mem_nhdsGT hy hx hxy

@[deprecated (since := "2024-12-22")] alias mem_nhdsWithin_Iio := mem_nhdsLT

end OrdConnected

end Set
