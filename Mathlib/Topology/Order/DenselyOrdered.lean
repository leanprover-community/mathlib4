/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Yury Kudryashov
-/
import Mathlib.Topology.Order.IsLUB

/-!
# Order topology on a densely ordered set
-/

open Set Filter TopologicalSpace Topology Function

open OrderDual (toDual ofDual)

variable {Œ± Œ≤ Œ≥ : Type*}

section DenselyOrdered

variable [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderTopology Œ±] [DenselyOrdered Œ±] {a b : Œ±}
  {s : Set Œ±}

/-- The closure of the interval `(a, +‚àû)` is the closed interval `[a, +‚àû)`, unless `a` is a top
element. -/
theorem closure_Ioi' {a : Œ±} (h : (Ioi a).Nonempty) : closure (Ioi a) = Ici a := by
  apply Subset.antisymm
  ¬∑ exact closure_minimal Ioi_subset_Ici_self isClosed_Ici
  ¬∑ rw [‚Üê diff_subset_closure_iff, Ici_diff_Ioi_same, singleton_subset_iff]
    exact isGLB_Ioi.mem_closure h
#align closure_Ioi' closure_Ioi'

/-- The closure of the interval `(a, +‚àû)` is the closed interval `[a, +‚àû)`. -/
@[simp]
theorem closure_Ioi (a : Œ±) [NoMaxOrder Œ±] : closure (Ioi a) = Ici a :=
  closure_Ioi' nonempty_Ioi
#align closure_Ioi closure_Ioi

/-- The closure of the interval `(-‚àû, a)` is the closed interval `(-‚àû, a]`, unless `a` is a bottom
element. -/
theorem closure_Iio' (h : (Iio a).Nonempty) : closure (Iio a) = Iic a :=
  closure_Ioi' (Œ± := Œ±·µí·µà) h
#align closure_Iio' closure_Iio'

/-- The closure of the interval `(-‚àû, a)` is the interval `(-‚àû, a]`. -/
@[simp]
theorem closure_Iio (a : Œ±) [NoMinOrder Œ±] : closure (Iio a) = Iic a :=
  closure_Iio' nonempty_Iio
#align closure_Iio closure_Iio

/-- The closure of the open interval `(a, b)` is the closed interval `[a, b]`. -/
@[simp]
theorem closure_Ioo {a b : Œ±} (hab : a ‚â† b) : closure (Ioo a b) = Icc a b := by
  apply Subset.antisymm
  ¬∑ exact closure_minimal Ioo_subset_Icc_self isClosed_Icc
  ¬∑ cases' hab.lt_or_lt with hab hab
    ¬∑ rw [‚Üê diff_subset_closure_iff, Icc_diff_Ioo_same hab.le]
      have hab' : (Ioo a b).Nonempty := nonempty_Ioo.2 hab
      simp only [insert_subset_iff, singleton_subset_iff]
      exact ‚ü®(isGLB_Ioo hab).mem_closure hab', (isLUB_Ioo hab).mem_closure hab'‚ü©
    ¬∑ rw [Icc_eq_empty_of_lt hab]
      exact empty_subset _
#align closure_Ioo closure_Ioo

/-- The closure of the interval `(a, b]` is the closed interval `[a, b]`. -/
@[simp]
theorem closure_Ioc {a b : Œ±} (hab : a ‚â† b) : closure (Ioc a b) = Icc a b := by
  apply Subset.antisymm
  ¬∑ exact closure_minimal Ioc_subset_Icc_self isClosed_Icc
  ¬∑ apply Subset.trans _ (closure_mono Ioo_subset_Ioc_self)
    rw [closure_Ioo hab]
#align closure_Ioc closure_Ioc

/-- The closure of the interval `[a, b)` is the closed interval `[a, b]`. -/
@[simp]
theorem closure_Ico {a b : Œ±} (hab : a ‚â† b) : closure (Ico a b) = Icc a b := by
  apply Subset.antisymm
  ¬∑ exact closure_minimal Ico_subset_Icc_self isClosed_Icc
  ¬∑ apply Subset.trans _ (closure_mono Ioo_subset_Ico_self)
    rw [closure_Ioo hab]
#align closure_Ico closure_Ico

@[simp]
theorem interior_Ici' {a : Œ±} (ha : (Iio a).Nonempty) : interior (Ici a) = Ioi a := by
  rw [‚Üê compl_Iio, interior_compl, closure_Iio' ha, compl_Iic]
#align interior_Ici' interior_Ici'

theorem interior_Ici [NoMinOrder Œ±] {a : Œ±} : interior (Ici a) = Ioi a :=
  interior_Ici' nonempty_Iio
#align interior_Ici interior_Ici

@[simp]
theorem interior_Iic' {a : Œ±} (ha : (Ioi a).Nonempty) : interior (Iic a) = Iio a :=
  interior_Ici' (Œ± := Œ±·µí·µà) ha
#align interior_Iic' interior_Iic'

theorem interior_Iic [NoMaxOrder Œ±] {a : Œ±} : interior (Iic a) = Iio a :=
  interior_Iic' nonempty_Ioi
#align interior_Iic interior_Iic

@[simp]
theorem interior_Icc [NoMinOrder Œ±] [NoMaxOrder Œ±] {a b : Œ±} : interior (Icc a b) = Ioo a b := by
  rw [‚Üê Ici_inter_Iic, interior_inter, interior_Ici, interior_Iic, Ioi_inter_Iio]
#align interior_Icc interior_Icc

@[simp]
theorem Icc_mem_nhds_iff [NoMinOrder Œ±] [NoMaxOrder Œ±] {a b x : Œ±} :
    Icc a b ‚àà ùìù x ‚Üî x ‚àà Ioo a b := by
  rw [‚Üê interior_Icc, mem_interior_iff_mem_nhds]

@[simp]
theorem interior_Ico [NoMinOrder Œ±] {a b : Œ±} : interior (Ico a b) = Ioo a b := by
  rw [‚Üê Ici_inter_Iio, interior_inter, interior_Ici, interior_Iio, Ioi_inter_Iio]
#align interior_Ico interior_Ico

@[simp]
theorem Ico_mem_nhds_iff [NoMinOrder Œ±] {a b x : Œ±} : Ico a b ‚àà ùìù x ‚Üî x ‚àà Ioo a b := by
  rw [‚Üê interior_Ico, mem_interior_iff_mem_nhds]

@[simp]
theorem interior_Ioc [NoMaxOrder Œ±] {a b : Œ±} : interior (Ioc a b) = Ioo a b := by
  rw [‚Üê Ioi_inter_Iic, interior_inter, interior_Ioi, interior_Iic, Ioi_inter_Iio]
#align interior_Ioc interior_Ioc

@[simp]
theorem Ioc_mem_nhds_iff [NoMaxOrder Œ±] {a b x : Œ±} : Ioc a b ‚àà ùìù x ‚Üî x ‚àà Ioo a b := by
  rw [‚Üê interior_Ioc, mem_interior_iff_mem_nhds]

theorem closure_interior_Icc {a b : Œ±} (h : a ‚â† b) : closure (interior (Icc a b)) = Icc a b :=
  (closure_minimal interior_subset isClosed_Icc).antisymm <|
    calc
      Icc a b = closure (Ioo a b) := (closure_Ioo h).symm
      _ ‚äÜ closure (interior (Icc a b)) :=
        closure_mono (interior_maximal Ioo_subset_Icc_self isOpen_Ioo)
#align closure_interior_Icc closure_interior_Icc

theorem Ioc_subset_closure_interior (a b : Œ±) : Ioc a b ‚äÜ closure (interior (Ioc a b)) := by
  rcases eq_or_ne a b with (rfl | h)
  ¬∑ simp
  ¬∑ calc
      Ioc a b ‚äÜ Icc a b := Ioc_subset_Icc_self
      _ = closure (Ioo a b) := (closure_Ioo h).symm
      _ ‚äÜ closure (interior (Ioc a b)) :=
        closure_mono (interior_maximal Ioo_subset_Ioc_self isOpen_Ioo)
#align Ioc_subset_closure_interior Ioc_subset_closure_interior

theorem Ico_subset_closure_interior (a b : Œ±) : Ico a b ‚äÜ closure (interior (Ico a b)) := by
  simpa only [dual_Ioc] using Ioc_subset_closure_interior (OrderDual.toDual b) (OrderDual.toDual a)
#align Ico_subset_closure_interior Ico_subset_closure_interior

@[simp]
theorem frontier_Ici' {a : Œ±} (ha : (Iio a).Nonempty) : frontier (Ici a) = {a} := by
  simp [frontier, ha]
#align frontier_Ici' frontier_Ici'

theorem frontier_Ici [NoMinOrder Œ±] {a : Œ±} : frontier (Ici a) = {a} :=
  frontier_Ici' nonempty_Iio
#align frontier_Ici frontier_Ici

@[simp]
theorem frontier_Iic' {a : Œ±} (ha : (Ioi a).Nonempty) : frontier (Iic a) = {a} := by
  simp [frontier, ha]
#align frontier_Iic' frontier_Iic'

theorem frontier_Iic [NoMaxOrder Œ±] {a : Œ±} : frontier (Iic a) = {a} :=
  frontier_Iic' nonempty_Ioi
#align frontier_Iic frontier_Iic

@[simp]
theorem frontier_Ioi' {a : Œ±} (ha : (Ioi a).Nonempty) : frontier (Ioi a) = {a} := by
  simp [frontier, closure_Ioi' ha, Iic_diff_Iio, Icc_self]
#align frontier_Ioi' frontier_Ioi'

theorem frontier_Ioi [NoMaxOrder Œ±] {a : Œ±} : frontier (Ioi a) = {a} :=
  frontier_Ioi' nonempty_Ioi
#align frontier_Ioi frontier_Ioi

@[simp]
theorem frontier_Iio' {a : Œ±} (ha : (Iio a).Nonempty) : frontier (Iio a) = {a} := by
  simp [frontier, closure_Iio' ha, Iic_diff_Iio, Icc_self]
#align frontier_Iio' frontier_Iio'

theorem frontier_Iio [NoMinOrder Œ±] {a : Œ±} : frontier (Iio a) = {a} :=
  frontier_Iio' nonempty_Iio
#align frontier_Iio frontier_Iio

@[simp]
theorem frontier_Icc [NoMinOrder Œ±] [NoMaxOrder Œ±] {a b : Œ±} (h : a ‚â§ b) :
    frontier (Icc a b) = {a, b} := by simp [frontier, h, Icc_diff_Ioo_same]
#align frontier_Icc frontier_Icc

@[simp]
theorem frontier_Ioo {a b : Œ±} (h : a < b) : frontier (Ioo a b) = {a, b} := by
  rw [frontier, closure_Ioo h.ne, interior_Ioo, Icc_diff_Ioo_same h.le]
#align frontier_Ioo frontier_Ioo

@[simp]
theorem frontier_Ico [NoMinOrder Œ±] {a b : Œ±} (h : a < b) : frontier (Ico a b) = {a, b} := by
  rw [frontier, closure_Ico h.ne, interior_Ico, Icc_diff_Ioo_same h.le]
#align frontier_Ico frontier_Ico

@[simp]
theorem frontier_Ioc [NoMaxOrder Œ±] {a b : Œ±} (h : a < b) : frontier (Ioc a b) = {a, b} := by
  rw [frontier, closure_Ioc h.ne, interior_Ioc, Icc_diff_Ioo_same h.le]
#align frontier_Ioc frontier_Ioc

theorem nhdsWithin_Ioi_neBot' {a b : Œ±} (H‚ÇÅ : (Ioi a).Nonempty) (H‚ÇÇ : a ‚â§ b) :
    NeBot (ùìù[Ioi a] b) :=
  mem_closure_iff_nhdsWithin_neBot.1 <| by rwa [closure_Ioi' H‚ÇÅ]
#align nhds_within_Ioi_ne_bot' nhdsWithin_Ioi_neBot'

theorem nhdsWithin_Ioi_neBot [NoMaxOrder Œ±] {a b : Œ±} (H : a ‚â§ b) : NeBot (ùìù[Ioi a] b) :=
  nhdsWithin_Ioi_neBot' nonempty_Ioi H
#align nhds_within_Ioi_ne_bot nhdsWithin_Ioi_neBot

theorem nhdsWithin_Ioi_self_neBot' {a : Œ±} (H : (Ioi a).Nonempty) : NeBot (ùìù[>] a) :=
  nhdsWithin_Ioi_neBot' H (le_refl a)
#align nhds_within_Ioi_self_ne_bot' nhdsWithin_Ioi_self_neBot'

instance nhdsWithin_Ioi_self_neBot [NoMaxOrder Œ±] (a : Œ±) : NeBot (ùìù[>] a) :=
  nhdsWithin_Ioi_neBot (le_refl a)
#align nhds_within_Ioi_self_ne_bot nhdsWithin_Ioi_self_neBot

theorem nhdsWithin_Iio_neBot' {b c : Œ±} (H‚ÇÅ : (Iio c).Nonempty) (H‚ÇÇ : b ‚â§ c) :
    NeBot (ùìù[Iio c] b) :=
  mem_closure_iff_nhdsWithin_neBot.1 <| by rwa [closure_Iio' H‚ÇÅ]
#align nhds_within_Iio_ne_bot' nhdsWithin_Iio_neBot'

theorem nhdsWithin_Iio_neBot [NoMinOrder Œ±] {a b : Œ±} (H : a ‚â§ b) : NeBot (ùìù[Iio b] a) :=
  nhdsWithin_Iio_neBot' nonempty_Iio H
#align nhds_within_Iio_ne_bot nhdsWithin_Iio_neBot

theorem nhdsWithin_Iio_self_neBot' {b : Œ±} (H : (Iio b).Nonempty) : NeBot (ùìù[<] b) :=
  nhdsWithin_Iio_neBot' H (le_refl b)
#align nhds_within_Iio_self_ne_bot' nhdsWithin_Iio_self_neBot'

instance nhdsWithin_Iio_self_neBot [NoMinOrder Œ±] (a : Œ±) : NeBot (ùìù[<] a) :=
  nhdsWithin_Iio_neBot (le_refl a)
#align nhds_within_Iio_self_ne_bot nhdsWithin_Iio_self_neBot

theorem right_nhdsWithin_Ico_neBot {a b : Œ±} (H : a < b) : NeBot (ùìù[Ico a b] b) :=
  (isLUB_Ico H).nhdsWithin_neBot (nonempty_Ico.2 H)
#align right_nhds_within_Ico_ne_bot right_nhdsWithin_Ico_neBot

theorem left_nhdsWithin_Ioc_neBot {a b : Œ±} (H : a < b) : NeBot (ùìù[Ioc a b] a) :=
  (isGLB_Ioc H).nhdsWithin_neBot (nonempty_Ioc.2 H)
#align left_nhds_within_Ioc_ne_bot left_nhdsWithin_Ioc_neBot

theorem left_nhdsWithin_Ioo_neBot {a b : Œ±} (H : a < b) : NeBot (ùìù[Ioo a b] a) :=
  (isGLB_Ioo H).nhdsWithin_neBot (nonempty_Ioo.2 H)
#align left_nhds_within_Ioo_ne_bot left_nhdsWithin_Ioo_neBot

theorem right_nhdsWithin_Ioo_neBot {a b : Œ±} (H : a < b) : NeBot (ùìù[Ioo a b] b) :=
  (isLUB_Ioo H).nhdsWithin_neBot (nonempty_Ioo.2 H)
#align right_nhds_within_Ioo_ne_bot right_nhdsWithin_Ioo_neBot

theorem comap_coe_nhdsWithin_Iio_of_Ioo_subset (hb : s ‚äÜ Iio b)
    (hs : s.Nonempty ‚Üí ‚àÉ a < b, Ioo a b ‚äÜ s) : comap ((‚Üë) : s ‚Üí Œ±) (ùìù[<] b) = atTop := by
  nontriviality
  haveI : Nonempty s := nontrivial_iff_nonempty.1 ‚Äπ_‚Ä∫
  rcases hs (nonempty_subtype.1 ‚Äπ_‚Ä∫) with ‚ü®a, h, hs‚ü©
  ext u; constructor
  ¬∑ rintro ‚ü®t, ht, hts‚ü©
    obtain ‚ü®x, ‚ü®hxa : a ‚â§ x, hxb : x < b‚ü©, hxt : Ioo x b ‚äÜ t‚ü© :=
      (mem_nhdsWithin_Iio_iff_exists_mem_Ico_Ioo_subset h).mp ht
    obtain ‚ü®y, hxy, hyb‚ü© := exists_between hxb
    refine' mem_of_superset (mem_atTop ‚ü®y, hs ‚ü®hxa.trans_lt hxy, hyb‚ü©‚ü©) _
    rintro ‚ü®z, hzs‚ü© (hyz : y ‚â§ z)
    exact hts (hxt ‚ü®hxy.trans_le hyz, hb hzs‚ü©)
  ¬∑ intro hu
    obtain ‚ü®x : s, hx : ‚àÄ z, x ‚â§ z ‚Üí z ‚àà u‚ü© := mem_atTop_sets.1 hu
    exact ‚ü®Ioo x b, Ioo_mem_nhdsWithin_Iio' (hb x.2), fun z hz => hx _ hz.1.le‚ü©
#align comap_coe_nhds_within_Iio_of_Ioo_subset comap_coe_nhdsWithin_Iio_of_Ioo_subset

theorem comap_coe_nhdsWithin_Ioi_of_Ioo_subset (ha : s ‚äÜ Ioi a)
    (hs : s.Nonempty ‚Üí ‚àÉ b > a, Ioo a b ‚äÜ s) : comap ((‚Üë) : s ‚Üí Œ±) (ùìù[>] a) = atBot :=
  comap_coe_nhdsWithin_Iio_of_Ioo_subset (show ofDual ‚Åª¬π' s ‚äÜ Iio (toDual a) from ha) fun h => by
    simpa only [OrderDual.exists, dual_Ioo] using hs h
#align comap_coe_nhds_within_Ioi_of_Ioo_subset comap_coe_nhdsWithin_Ioi_of_Ioo_subset

theorem map_coe_atTop_of_Ioo_subset (hb : s ‚äÜ Iio b) (hs : ‚àÄ a' < b, ‚àÉ a < b, Ioo a b ‚äÜ s) :
    map ((‚Üë) : s ‚Üí Œ±) atTop = ùìù[<] b := by
  rcases eq_empty_or_nonempty (Iio b) with (hb' | ‚ü®a, ha‚ü©)
  ¬∑ have : IsEmpty s := ‚ü®fun x => hb'.subset (hb x.2)‚ü©
    rw [filter_eq_bot_of_isEmpty atTop, Filter.map_bot, hb', nhdsWithin_empty]
  ¬∑ rw [‚Üê comap_coe_nhdsWithin_Iio_of_Ioo_subset hb fun _ => hs a ha, map_comap_of_mem]
    rw [Subtype.range_val]
    exact (mem_nhdsWithin_Iio_iff_exists_Ioo_subset' ha).2 (hs a ha)
#align map_coe_at_top_of_Ioo_subset map_coe_atTop_of_Ioo_subset

theorem map_coe_atBot_of_Ioo_subset (ha : s ‚äÜ Ioi a) (hs : ‚àÄ b' > a, ‚àÉ b > a, Ioo a b ‚äÜ s) :
    map ((‚Üë) : s ‚Üí Œ±) atBot = ùìù[>] a := by
  -- the elaborator gets stuck without `(... : _)`
  refine' (map_coe_atTop_of_Ioo_subset (show ofDual ‚Åª¬π' s ‚äÜ Iio (toDual a) from ha)
    fun b' hb' => _ : _)
  simpa only [OrderDual.exists, dual_Ioo] using hs b' hb'
#align map_coe_at_bot_of_Ioo_subset map_coe_atBot_of_Ioo_subset

/-- The `atTop` filter for an open interval `Ioo a b` comes from the left-neighbourhoods filter at
the right endpoint in the ambient order. -/
theorem comap_coe_Ioo_nhdsWithin_Iio (a b : Œ±) : comap ((‚Üë) : Ioo a b ‚Üí Œ±) (ùìù[<] b) = atTop :=
  comap_coe_nhdsWithin_Iio_of_Ioo_subset Ioo_subset_Iio_self fun h =>
    ‚ü®a, nonempty_Ioo.1 h, Subset.refl _‚ü©
#align comap_coe_Ioo_nhds_within_Iio comap_coe_Ioo_nhdsWithin_Iio

/-- The `atBot` filter for an open interval `Ioo a b` comes from the right-neighbourhoods filter at
the left endpoint in the ambient order. -/
theorem comap_coe_Ioo_nhdsWithin_Ioi (a b : Œ±) : comap ((‚Üë) : Ioo a b ‚Üí Œ±) (ùìù[>] a) = atBot :=
  comap_coe_nhdsWithin_Ioi_of_Ioo_subset Ioo_subset_Ioi_self fun h =>
    ‚ü®b, nonempty_Ioo.1 h, Subset.refl _‚ü©
#align comap_coe_Ioo_nhds_within_Ioi comap_coe_Ioo_nhdsWithin_Ioi

theorem comap_coe_Ioi_nhdsWithin_Ioi (a : Œ±) : comap ((‚Üë) : Ioi a ‚Üí Œ±) (ùìù[>] a) = atBot :=
  comap_coe_nhdsWithin_Ioi_of_Ioo_subset (Subset.refl _) fun ‚ü®x, hx‚ü© => ‚ü®x, hx, Ioo_subset_Ioi_self‚ü©
#align comap_coe_Ioi_nhds_within_Ioi comap_coe_Ioi_nhdsWithin_Ioi

theorem comap_coe_Iio_nhdsWithin_Iio (a : Œ±) : comap ((‚Üë) : Iio a ‚Üí Œ±) (ùìù[<] a) = atTop :=
  comap_coe_Ioi_nhdsWithin_Ioi (Œ± := Œ±·µí·µà) a
#align comap_coe_Iio_nhds_within_Iio comap_coe_Iio_nhdsWithin_Iio

@[simp]
theorem map_coe_Ioo_atTop {a b : Œ±} (h : a < b) : map ((‚Üë) : Ioo a b ‚Üí Œ±) atTop = ùìù[<] b :=
  map_coe_atTop_of_Ioo_subset Ioo_subset_Iio_self fun _ _ => ‚ü®_, h, Subset.refl _‚ü©
#align map_coe_Ioo_at_top map_coe_Ioo_atTop

@[simp]
theorem map_coe_Ioo_atBot {a b : Œ±} (h : a < b) : map ((‚Üë) : Ioo a b ‚Üí Œ±) atBot = ùìù[>] a :=
  map_coe_atBot_of_Ioo_subset Ioo_subset_Ioi_self fun _ _ => ‚ü®_, h, Subset.refl _‚ü©
#align map_coe_Ioo_at_bot map_coe_Ioo_atBot

@[simp]
theorem map_coe_Ioi_atBot (a : Œ±) : map ((‚Üë) : Ioi a ‚Üí Œ±) atBot = ùìù[>] a :=
  map_coe_atBot_of_Ioo_subset (Subset.refl _) fun b hb => ‚ü®b, hb, Ioo_subset_Ioi_self‚ü©
#align map_coe_Ioi_at_bot map_coe_Ioi_atBot

@[simp]
theorem map_coe_Iio_atTop (a : Œ±) : map ((‚Üë) : Iio a ‚Üí Œ±) atTop = ùìù[<] a :=
  map_coe_Ioi_atBot (Œ± := Œ±·µí·µà) _
#align map_coe_Iio_at_top map_coe_Iio_atTop

variable {l : Filter Œ≤} {f : Œ± ‚Üí Œ≤}

@[simp]
theorem tendsto_comp_coe_Ioo_atTop (h : a < b) :
    Tendsto (fun x : Ioo a b => f x) atTop l ‚Üî Tendsto f (ùìù[<] b) l := by
  rw [‚Üê map_coe_Ioo_atTop h, tendsto_map'_iff]; rfl
#align tendsto_comp_coe_Ioo_at_top tendsto_comp_coe_Ioo_atTop

@[simp]
theorem tendsto_comp_coe_Ioo_atBot (h : a < b) :
    Tendsto (fun x : Ioo a b => f x) atBot l ‚Üî Tendsto f (ùìù[>] a) l := by
  rw [‚Üê map_coe_Ioo_atBot h, tendsto_map'_iff]; rfl
#align tendsto_comp_coe_Ioo_at_bot tendsto_comp_coe_Ioo_atBot

-- Porting note (#11215): TODO: `simpNF` claims that `simp` can't use
-- this lemma to simplify LHS but it can
@[simp, nolint simpNF]
theorem tendsto_comp_coe_Ioi_atBot :
    Tendsto (fun x : Ioi a => f x) atBot l ‚Üî Tendsto f (ùìù[>] a) l := by
  rw [‚Üê map_coe_Ioi_atBot, tendsto_map'_iff]; rfl
#align tendsto_comp_coe_Ioi_at_bot tendsto_comp_coe_Ioi_atBot

-- Porting note (#11215): TODO: `simpNF` claims that `simp` can't use
-- this lemma to simplify LHS but it can
@[simp, nolint simpNF]
theorem tendsto_comp_coe_Iio_atTop :
    Tendsto (fun x : Iio a => f x) atTop l ‚Üî Tendsto f (ùìù[<] a) l := by
  rw [‚Üê map_coe_Iio_atTop, tendsto_map'_iff]; rfl
#align tendsto_comp_coe_Iio_at_top tendsto_comp_coe_Iio_atTop

@[simp]
theorem tendsto_Ioo_atTop {f : Œ≤ ‚Üí Ioo a b} :
    Tendsto f l atTop ‚Üî Tendsto (fun x => (f x : Œ±)) l (ùìù[<] b) := by
  rw [‚Üê comap_coe_Ioo_nhdsWithin_Iio, tendsto_comap_iff]; rfl
#align tendsto_Ioo_at_top tendsto_Ioo_atTop

@[simp]
theorem tendsto_Ioo_atBot {f : Œ≤ ‚Üí Ioo a b} :
    Tendsto f l atBot ‚Üî Tendsto (fun x => (f x : Œ±)) l (ùìù[>] a) := by
  rw [‚Üê comap_coe_Ioo_nhdsWithin_Ioi, tendsto_comap_iff]; rfl
#align tendsto_Ioo_at_bot tendsto_Ioo_atBot

@[simp]
theorem tendsto_Ioi_atBot {f : Œ≤ ‚Üí Ioi a} :
    Tendsto f l atBot ‚Üî Tendsto (fun x => (f x : Œ±)) l (ùìù[>] a) := by
  rw [‚Üê comap_coe_Ioi_nhdsWithin_Ioi, tendsto_comap_iff]; rfl
#align tendsto_Ioi_at_bot tendsto_Ioi_atBot

@[simp]
theorem tendsto_Iio_atTop {f : Œ≤ ‚Üí Iio a} :
    Tendsto f l atTop ‚Üî Tendsto (fun x => (f x : Œ±)) l (ùìù[<] a) := by
  rw [‚Üê comap_coe_Iio_nhdsWithin_Iio, tendsto_comap_iff]; rfl
#align tendsto_Iio_at_top tendsto_Iio_atTop

instance (x : Œ±) [Nontrivial Œ±] : NeBot (ùìù[‚â†] x) := by
  refine forall_mem_nonempty_iff_neBot.1 fun s hs => ?_
  obtain ‚ü®u, u_open, xu, us‚ü© : ‚àÉ u : Set Œ±, IsOpen u ‚àß x ‚àà u ‚àß u ‚à© {x}·∂ú ‚äÜ s := mem_nhdsWithin.1 hs
  obtain ‚ü®a, b, a_lt_b, hab‚ü© : ‚àÉ a b : Œ±, a < b ‚àß Ioo a b ‚äÜ u := u_open.exists_Ioo_subset ‚ü®x, xu‚ü©
  obtain ‚ü®y, hy‚ü© : ‚àÉ y, a < y ‚àß y < b := exists_between a_lt_b
  rcases ne_or_eq x y with (xy | rfl)
  ¬∑ exact ‚ü®y, us ‚ü®hab hy, xy.symm‚ü©‚ü©
  obtain ‚ü®z, hz‚ü© : ‚àÉ z, a < z ‚àß z < x := exists_between hy.1
  exact ‚ü®z, us ‚ü®hab ‚ü®hz.1, hz.2.trans hy.2‚ü©, hz.2.ne‚ü©‚ü©

/-- Let `s` be a dense set in a nontrivial dense linear order `Œ±`. If `s` is a
separable space (e.g., if `Œ±` has a second countable topology), then there exists a countable
dense subset `t ‚äÜ s` such that `t` does not contain bottom/top elements of `Œ±`. -/
theorem Dense.exists_countable_dense_subset_no_bot_top [Nontrivial Œ±] {s : Set Œ±} [SeparableSpace s]
    (hs : Dense s) :
    ‚àÉ t, t ‚äÜ s ‚àß t.Countable ‚àß Dense t ‚àß (‚àÄ x, IsBot x ‚Üí x ‚àâ t) ‚àß ‚àÄ x, IsTop x ‚Üí x ‚àâ t := by
  rcases hs.exists_countable_dense_subset with ‚ü®t, hts, htc, htd‚ü©
  refine' ‚ü®t \ ({ x | IsBot x } ‚à™ { x | IsTop x }), _, _, _, fun x hx => _, fun x hx => _‚ü©
  ¬∑ exact (diff_subset _ _).trans hts
  ¬∑ exact htc.mono (diff_subset _ _)
  ¬∑ exact htd.diff_finite ((subsingleton_isBot Œ±).finite.union (subsingleton_isTop Œ±).finite)
  ¬∑ simp [hx]
  ¬∑ simp [hx]
#align dense.exists_countable_dense_subset_no_bot_top Dense.exists_countable_dense_subset_no_bot_top

variable (Œ±)

/-- If `Œ±` is a nontrivial separable dense linear order, then there exists a
countable dense set `s : Set Œ±` that contains neither top nor bottom elements of `Œ±`.
For a dense set containing both bot and top elements, see
`exists_countable_dense_bot_top`. -/
theorem exists_countable_dense_no_bot_top [SeparableSpace Œ±] [Nontrivial Œ±] :
    ‚àÉ s : Set Œ±, s.Countable ‚àß Dense s ‚àß (‚àÄ x, IsBot x ‚Üí x ‚àâ s) ‚àß ‚àÄ x, IsTop x ‚Üí x ‚àâ s := by
  simpa using dense_univ.exists_countable_dense_subset_no_bot_top
#align exists_countable_dense_no_bot_top exists_countable_dense_no_bot_top

end DenselyOrdered
