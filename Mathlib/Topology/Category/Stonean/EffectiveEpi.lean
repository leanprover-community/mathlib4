/-
Copyright (c) 2023 Jon Eugster. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson, Boris Bolvig Kj√¶r, Jon Eugster, Sina Hazratpour, Nima Rasekh
-/
import Mathlib.Topology.Category.Stonean.Limits
import Mathlib.Topology.Category.CompHaus.EffectiveEpi

/-!
# Effective epimorphic families in `Stonean`

Let `œÄ a : X a ‚ü∂ B` be a family of morphisms in `Stonean` indexed by a finite type `Œ±`.
In this file, we show that the following are all equivalent:
- The family `œÄ` is effective epimorphic.
- The induced map `‚àê X ‚ü∂ B` is epimorphic.
- The family `œÄ` is jointly surjective.

As a consequence, we show (see `effectiveEpi_iff_surjective`) that all epimorphisms in `Stonean`¬†
are effective, and that `Stonean`¬†is preregular.

## Main results
- `Stonean.effectiveEpiFamily_tfae`: characterise being an effective epimorphic family.
- `Stonean.instPrecoherent`: `Stonean` is precoherent.

## Implementation notes
The entire section `EffectiveEpiFamily` comprises exclusively a technical construction for
the main proof and does not contain any statements that would be useful in other contexts.

-/

universe u

open CategoryTheory Limits

namespace Stonean

/- Assume we have a family `X a ‚Üí B` which is jointly surjective. -/
variable {Œ± : Type} [Fintype Œ±] {B : Stonean}
  {X : Œ± ‚Üí Stonean} (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B))
  (surj : ‚àÄ b : B, ‚àÉ (a : Œ±) (x : X a), œÄ a x = b)

/-!
This section contains exclusively technical definitions and results that are used
in the proof of `Stonean.effectiveEpiFamily_of_jointly_surjective`.
-/
namespace EffectiveEpiFamily

/-- Implementation: Abbreviation for the fully faithful functor `Stonean ‚•§ CompHaus`. -/
abbrev F := Stonean.toCompHaus

open CompHaus in
/-- Implementation: A helper lemma lifting the condition

```
‚àÄ {Z : Stonean} (a‚ÇÅ a‚ÇÇ : Œ±) (g‚ÇÅ : Z ‚ü∂ X a‚ÇÅ) (g‚ÇÇ : Z ‚ü∂ X a‚ÇÇ),
  g‚ÇÅ ‚â´ œÄ a‚ÇÅ = g‚ÇÇ ‚â´ œÄ a‚ÇÇ ‚Üí g‚ÇÅ ‚â´ e a‚ÇÅ = g‚ÇÇ ‚â´ e a‚ÇÇ)
```

from `Z : Stonean` to `Z : CompHaus`.

The descent `EffectiveEpiFamily.dec` along an effective epi family in a category `C`
takes this condition (for all `Z` in `C`) as an assumption.

In the construction in this file we start with this descent condition for all `Z : Stonean` but
to apply the analogue result on `CompHaus` we need extend this condition to all
`Z : CompHaus`. We do this by considering the Stone-Cech compactification `Œ≤Z ‚Üí Z`
which is an epi in `CompHaus` covering `Z` where `Œ≤Z` lies in the image of `Stonean`.
-/
lemma lift_desc_condition {W : Stonean} {e : (a : Œ±) ‚Üí X a ‚ü∂ W}
    (h : ‚àÄ {Z : Stonean} (a‚ÇÅ a‚ÇÇ : Œ±) (g‚ÇÅ : Z ‚ü∂ X a‚ÇÅ) (g‚ÇÇ : Z ‚ü∂ X a‚ÇÇ),
      g‚ÇÅ ‚â´ œÄ a‚ÇÅ = g‚ÇÇ ‚â´ œÄ a‚ÇÇ ‚Üí g‚ÇÅ ‚â´ e a‚ÇÅ = g‚ÇÇ ‚â´ e a‚ÇÇ) :
    ‚àÄ {Z : CompHaus} (a‚ÇÅ a‚ÇÇ : Œ±) (g‚ÇÅ : Z ‚ü∂ F.obj (X a‚ÇÅ)) (g‚ÇÇ : Z ‚ü∂ F.obj (X a‚ÇÇ)),
        g‚ÇÅ ‚â´ (œÄ a‚ÇÅ) = g‚ÇÇ ‚â´ (œÄ a‚ÇÇ) ‚Üí g‚ÇÅ ‚â´ e a‚ÇÅ = g‚ÇÇ ‚â´ e a‚ÇÇ := by
  intro Z a‚ÇÅ a‚ÇÇ g‚ÇÅ g‚ÇÇ hg
  -- The Stone-Cech-compactification `Œ≤Z` of `Z : CompHaus` is in `Stonean`
  let Œ≤Z := Z.presentation
  let g‚ÇÅ' := F.preimage (presentation.œÄ Z ‚â´ g‚ÇÅ : F.obj Œ≤Z ‚ü∂ F.obj (X a‚ÇÅ))
  let g‚ÇÇ' := F.preimage (presentation.œÄ Z ‚â´ g‚ÇÇ : F.obj Œ≤Z ‚ü∂ F.obj (X a‚ÇÇ))
  -- Use that `Œ≤Z ‚Üí Z` is an epi
  apply Epi.left_cancellation (f := presentation.œÄ Z)
  -- By definition `g‚ÇÅ' = presentationœÄ ‚â´ g‚ÇÅ` and `g‚ÇÇ' = presentationœÄ ‚â´ g‚ÇÇ`
  change g‚ÇÅ' ‚â´ e a‚ÇÅ = g‚ÇÇ' ‚â´ e a‚ÇÇ
  -- use the condition in `Stonean`
  apply h
  change presentation.œÄ Z ‚â´ g‚ÇÅ ‚â´ œÄ a‚ÇÅ = presentation.œÄ Z ‚â´ g‚ÇÇ ‚â´ œÄ a‚ÇÇ
  simp [hg]

/-- Implementation: The structure for the `EffectiveEpiFamily X œÄ`. -/
noncomputable
def struct : EffectiveEpiFamilyStruct X œÄ where
  desc := fun {W} e h => Stonean.toCompHaus.preimage <|
    -- Use the `EffectiveEpiFamily F(X) F(œÄ)` on `CompHaus`
    (CompHaus.effectiveEpiFamily_of_jointly_surjective (F.obj <| X ¬∑) œÄ surj).desc
    (fun (a : Œ±) => F.map (e a)) (lift_desc_condition œÄ h)
  fac := by
    -- The `EffectiveEpiFamily F(X) F(œÄ)` on `CompHaus`
    let fam : EffectiveEpiFamily (F.obj <| X ¬∑) œÄ :=
      CompHaus.effectiveEpiFamily_of_jointly_surjective (F.obj <| X ¬∑) œÄ surj
    intro W e he a
    -- The `fac` on `CompHaus`
    have fac‚ÇÅ :  F.map (œÄ a ‚â´ _) = F.map (e a) :=
      EffectiveEpiFamily.fac (F.obj <| X ¬∑) œÄ e (lift_desc_condition œÄ he) a
    exact Faithful.map_injective fac‚ÇÅ
  uniq := by
    -- The `EffectiveEpiFamily F(X) F(œÄ)` on `CompHaus`
    let fam : EffectiveEpiFamily (F.obj <| X ¬∑) œÄ :=
      CompHaus.effectiveEpiFamily_of_jointly_surjective (F.obj <| X ¬∑) œÄ surj
    intro W e he m hm
    have Fhm : ‚àÄ (a : Œ±), œÄ a ‚â´ F.map m = e a
    ¬∑ intro a
      simp_all only [toCompHaus_map]
    have uniq‚ÇÅ : F.map m = F.map _ :=
      EffectiveEpiFamily.uniq (F.obj <| X ¬∑) œÄ e (lift_desc_condition œÄ he) (F.map m) Fhm
    exact Faithful.map_injective uniq‚ÇÅ

end EffectiveEpiFamily

section JointlySurjective

/-- One direction of `effectiveEpiFamily_tfae`. -/
theorem effectiveEpiFamily_of_jointly_surjective
    {Œ± : Type} [Fintype Œ±] {B : Stonean}
    (X : Œ± ‚Üí Stonean) (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B))
    (surj : ‚àÄ b : B, ‚àÉ (a : Œ±) (x : X a), œÄ a x = b) :
    EffectiveEpiFamily X œÄ :=
  ‚ü®‚ü®Stonean.EffectiveEpiFamily.struct œÄ surj‚ü©‚ü©

open List in
/--
For a finite family of extremally spaces `œÄ a : X a ‚Üí B` the following are equivalent:
* `œÄ` is an effective epimorphic family
* the map `‚àê œÄ a ‚ü∂ B` is an epimorphism
* `œÄ` is jointly surjective
-/
theorem effectiveEpiFamily_tfae {Œ± : Type} [Fintype Œ±] {B : Stonean}
    (X : Œ± ‚Üí Stonean) (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B)) :
    TFAE [
      EffectiveEpiFamily X œÄ,
      Epi (Limits.Sigma.desc œÄ),
      ‚àÄ (b : B), ‚àÉ (a : Œ±) (x : X a), œÄ a x = b ] := by
  tfae_have 1 ‚Üí 2
  ¬∑ intro
    infer_instance
  tfae_have 1 ‚Üí 2
  ¬∑ intro
    infer_instance
  tfae_have 2 ‚Üí 3
  ¬∑ intro e
    rw [epi_iff_surjective] at e
    intro b
    obtain ‚ü®t, rfl‚ü© := e b
    let q := (coproductIsoCoproduct X).inv t
    refine ‚ü®q.1, q.2, ?_‚ü©
    rw [‚Üê (coproductIsoCoproduct X).inv_hom_id_apply t]
    show _ = ((coproductIsoCoproduct X).hom ‚â´ Sigma.desc œÄ) ((coproductIsoCoproduct X).inv t)
    suffices : (coproductIsoCoproduct X).hom ‚â´ Sigma.desc œÄ = finiteCoproduct.desc X œÄ
    ¬∑ rw [this]
      rfl
    apply Eq.symm
    rw [‚Üê Iso.inv_comp_eq]
    apply colimit.hom_ext
    rintro ‚ü®a‚ü©
    simp only [Discrete.functor_obj, colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app,
      coproductIsoCoproduct, colimit.comp_coconePointUniqueUpToIso_inv_assoc]
    ext
    rfl
  tfae_have 3 ‚Üí 1
  ¬∑ apply effectiveEpiFamily_of_jointly_surjective
  tfae_finish

lemma effectiveEpi_iff_surjective {X Y : Stonean} (f : X ‚ü∂ Y) :
    EffectiveEpi f ‚Üî Function.Surjective f := by
  rw [‚Üê epi_iff_surjective]
  exact effectiveEpi_iff_epi (fun _ _ ‚Ü¶ (effectiveEpiFamily_tfae _ _).out 0 1) f

instance : Preregular Stonean where
  exists_fac := by
    intro X Y Z f œÄ hœÄ
    exact ‚ü®X, ùüô X, inferInstance, Projective.factors f œÄ‚ü©

end JointlySurjective

section Coherent

open CompHaus Functor

theorem _root_.CategoryTheory.EffectiveEpiFamily.toCompHaus
    {Œ± : Type} [Fintype Œ±] {B : Stonean.{u}}
    {X : Œ± ‚Üí Stonean.{u}} {œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B)} (H : EffectiveEpiFamily X œÄ) :
    EffectiveEpiFamily (toCompHaus.obj <| X ¬∑) (toCompHaus.map <| œÄ ¬∑) := by
  refine' ((CompHaus.effectiveEpiFamily_tfae _ _).out 0 2).2 (fun b => _)
  exact (((effectiveEpiFamily_tfae _ _).out 0 2).1 H : ‚àÄ _, ‚àÉ _, _) _

instance instPrecoherent : Precoherent Stonean.{u} := by
  constructor
  intro B‚ÇÅ B‚ÇÇ f Œ± _ X‚ÇÅ œÄ‚ÇÅ h‚ÇÅ
  refine ‚ü®Œ±, inferInstance, fun a => (CompHaus.pullback f (œÄ‚ÇÅ a)).presentation, fun a =>
    toCompHaus.preimage (presentation.œÄ _ ‚â´ (CompHaus.pullback.fst _ _)), ?_, id, fun a =>
    toCompHaus.preimage (presentation.œÄ _ ‚â´ (CompHaus.pullback.snd _ _ )), fun a => ?_‚ü©
  ¬∑ refine ((effectiveEpiFamily_tfae _ _).out 0 2).2 (fun b => ?_)
    have h‚ÇÅ' := ((CompHaus.effectiveEpiFamily_tfae _ _).out 0 2).1 h‚ÇÅ.toCompHaus
    obtain ‚ü®a, x, h‚ü© := h‚ÇÅ' (f b)
    obtain ‚ü®c, hc‚ü© := (CompHaus.epi_iff_surjective _).1
      (presentation.epi_œÄ (CompHaus.pullback f (œÄ‚ÇÅ a))) ‚ü®‚ü®b, x‚ü©, h.symm‚ü©
    refine ‚ü®a, c, ?_‚ü©
    change toCompHaus.map (toCompHaus.preimage _) _ = _
    simp only [image_preimage, toCompHaus_obj, comp_apply, hc]
    rfl
  ¬∑ apply map_injective toCompHaus
    simp only [map_comp, image_preimage, Category.assoc]
    congr 1
    ext ‚ü®‚ü®_, _‚ü©, h‚ü©
    exact h.symm

end Coherent

end Stonean
