/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.CategoryTheory.Category.Preorder
import Mathlib.CategoryTheory.EqToHom
import Mathlib.Topology.Category.TopCat.EpiMono
import Mathlib.Topology.Sets.Opens

/-!
# The category of open sets in a topological space.

We define `toTopCat : Opens X ‚•§ TopCat` and
`map (f : X ‚ü∂ Y) : Opens Y ‚•§ Opens X`, given by taking preimages of open sets.

Unfortunately `Opens` isn't (usefully) a functor `TopCat ‚•§ Cat`.
(One can in fact define such a functor,
but using it results in unresolvable `Eq.rec` terms in goals.)

Really it's a 2-functor from (spaces, continuous functions, equalities)
to (categories, functors, natural isomorphisms).
We don't attempt to set up the full theory here, but do provide the natural isomorphisms
`mapId : map (ùüô X) ‚âÖ ùü≠ (opens X)` and
`mapComp : map (f ‚â´ g) ‚âÖ map g ‚ãô map f`.

Beyond that, there's a collection of simp lemmas for working with these constructions.
-/


open CategoryTheory TopologicalSpace Opposite

universe u

namespace TopologicalSpace.Opens

variable {X Y Z : TopCat.{u}}

/-!
Since `Opens X` has a partial order, it automatically receives a `Category` instance.
Unfortunately, because we do not allow morphisms in `Prop`,
the morphisms `U ‚ü∂ V` are not just proofs `U ‚â§ V`, but rather
`ULift (PLift (U ‚â§ V))`.
-/


instance opensHomHasCoeToFun {U V : Opens X} : CoeFun (U ‚ü∂ V) fun _ => U ‚Üí V :=
  ‚ü®fun f x => ‚ü®x, f.le x.2‚ü©‚ü©

/-!
We now construct as morphisms various inclusions of open sets.
-/


-- This is tedious, but necessary because we decided not to allow Prop as morphisms in a category...
/-- The inclusion `U ‚äì V ‚ü∂ U` as a morphism in the category of open sets.
-/
noncomputable def infLELeft (U V : Opens X) : U ‚äì V ‚ü∂ U :=
  inf_le_left.hom

/-- The inclusion `U ‚äì V ‚ü∂ V` as a morphism in the category of open sets.
-/
noncomputable def infLERight (U V : Opens X) : U ‚äì V ‚ü∂ V :=
  inf_le_right.hom

/-- The inclusion `U i ‚ü∂ iSup U` as a morphism in the category of open sets.
-/
noncomputable def leSupr {Œπ : Type*} (U : Œπ ‚Üí Opens X) (i : Œπ) : U i ‚ü∂ iSup U :=
  (le_iSup U i).hom

/-- The inclusion `‚ä• ‚ü∂ U` as a morphism in the category of open sets.
-/
noncomputable def botLE (U : Opens X) : ‚ä• ‚ü∂ U :=
  bot_le.hom

/-- The inclusion `U ‚ü∂ ‚ä§` as a morphism in the category of open sets.
-/
noncomputable def leTop (U : Opens X) : U ‚ü∂ ‚ä§ :=
  le_top.hom

-- We do not mark this as a simp lemma because it breaks open `x`.
-- Nevertheless, it is useful in `SheafOfFunctions`.
theorem infLELeft_apply (U V : Opens X) (x) :
    (infLELeft U V) x = ‚ü®x.1, (@inf_le_left _ _ U V : _ ‚â§ _) x.2‚ü© :=
  rfl

@[simp]
theorem infLELeft_apply_mk (U V : Opens X) (x) (m) :
    (infLELeft U V) ‚ü®x, m‚ü© = ‚ü®x, (@inf_le_left _ _ U V : _ ‚â§ _) m‚ü© :=
  rfl

@[simp]
theorem leSupr_apply_mk {Œπ : Type*} (U : Œπ ‚Üí Opens X) (i : Œπ) (x) (m) :
    (leSupr U i) ‚ü®x, m‚ü© = ‚ü®x, (le_iSup U i : _) m‚ü© :=
  rfl

/-- The functor from open sets in `X` to `Top`,
realising each open set as a topological space itself.
-/
def toTopCat (X : TopCat.{u}) : Opens X ‚•§ TopCat where
  obj U := ‚ü®U, inferInstance‚ü©
  map i :=
    ‚ü®fun x => ‚ü®x.1, i.le x.2‚ü©,
      (Embedding.continuous_iff embedding_subtype_val).2 continuous_induced_dom‚ü©

@[simp]
theorem toTopCat_map (X : TopCat.{u}) {U V : Opens X} {f : U ‚ü∂ V} {x} {h} :
    ((toTopCat X).map f) ‚ü®x, h‚ü© = ‚ü®x, f.le h‚ü© :=
  rfl

/-- The inclusion map from an open subset to the whole space, as a morphism in `TopCat`.
-/
@[simps (config := .asFn)]
def inclusion {X : TopCat.{u}} (U : Opens X) : (toTopCat X).obj U ‚ü∂ X where
  toFun := _
  continuous_toFun := continuous_subtype_val

@[simp]
theorem coe_inclusion {X : TopCat} {U : Opens X} :
    (inclusion U : U ‚Üí X) = Subtype.val := rfl

theorem openEmbedding {X : TopCat.{u}} (U : Opens X) : OpenEmbedding (inclusion U) :=
  IsOpen.openEmbedding_subtype_val U.2

/-- The inclusion of the top open subset (i.e. the whole space) is an isomorphism.
-/
def inclusionTopIso (X : TopCat.{u}) : (toTopCat X).obj ‚ä§ ‚âÖ X where
  hom := inclusion ‚ä§
  inv := ‚ü®fun x => ‚ü®x, trivial‚ü©, continuous_def.2 fun U ‚ü®_, hS, hSU‚ü© => hSU ‚ñ∏ hS‚ü©

/-- `Opens.map f` gives the functor from open sets in Y to open set in X,
    given by taking preimages under f. -/
def map (f : X ‚ü∂ Y) : Opens Y ‚•§ Opens X where
  obj U := ‚ü®f ‚Åª¬π' (U : Set Y), U.isOpen.preimage f.continuous‚ü©
  map i := ‚ü®‚ü®fun x h => i.le h‚ü©‚ü©

@[simp]
theorem map_coe (f : X ‚ü∂ Y) (U : Opens Y) : ((map f).obj U : Set X) = f ‚Åª¬π' (U : Set Y) :=
  rfl

@[simp]
theorem map_obj (f : X ‚ü∂ Y) (U) (p) : (map f).obj ‚ü®U, p‚ü© = ‚ü®f ‚Åª¬π' U, p.preimage f.continuous‚ü© :=
  rfl

@[simp]
lemma map_homOfLE (f : X ‚ü∂ Y) {U V : Opens Y} (e : U ‚â§ V) :
    (TopologicalSpace.Opens.map f).map (homOfLE e) =
      homOfLE (show (Opens.map f).obj U ‚â§ (Opens.map f).obj V from fun _ hx ‚Ü¶ e hx) :=
  rfl

@[simp]
theorem map_id_obj (U : Opens X) : (map (ùüô X)).obj U = U :=
  let ‚ü®_, _‚ü© := U
  rfl

@[simp 1100]
theorem map_id_obj' (U) (p) : (map (ùüô X)).obj ‚ü®U, p‚ü© = ‚ü®U, p‚ü© :=
  rfl

@[simp 1100]
theorem map_id_obj_unop (U : (Opens X)·µí·µñ) : (map (ùüô X)).obj (unop U) = unop U :=
  let ‚ü®_, _‚ü© := U.unop
  rfl

@[simp 1100]
theorem op_map_id_obj (U : (Opens X)·µí·µñ) : (map (ùüô X)).op.obj U = U := by simp

@[simp]
lemma map_top (f : X ‚ü∂ Y) : (Opens.map f).obj ‚ä§ = ‚ä§ := rfl

/-- The inclusion `U ‚ü∂ (map f).obj ‚ä§` as a morphism in the category of open sets.
-/
noncomputable def leMapTop (f : X ‚ü∂ Y) (U : Opens X) : U ‚ü∂ (map f).obj ‚ä§ :=
  leTop U

@[simp]
theorem map_comp_obj (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) :
    (map (f ‚â´ g)).obj U = (map f).obj ((map g).obj U) :=
  rfl

@[simp]
theorem map_comp_obj' (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) (p) :
    (map (f ‚â´ g)).obj ‚ü®U, p‚ü© = (map f).obj ((map g).obj ‚ü®U, p‚ü©) :=
  rfl

@[simp]
theorem map_comp_map (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) {U V} (i : U ‚ü∂ V) :
    (map (f ‚â´ g)).map i = (map f).map ((map g).map i) :=
  rfl

@[simp]
theorem map_comp_obj_unop (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) :
    (map (f ‚â´ g)).obj (unop U) = (map f).obj ((map g).obj (unop U)) :=
  rfl

@[simp]
theorem op_map_comp_obj (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) :
    (map (f ‚â´ g)).op.obj U = (map f).op.obj ((map g).op.obj U) :=
  rfl

theorem map_iSup (f : X ‚ü∂ Y) {Œπ : Type*} (U : Œπ ‚Üí Opens Y) :
    (map f).obj (iSup U) = iSup ((map f).obj ‚àò U) := by
  ext1; rw [iSup_def, iSup_def, map_obj]
  dsimp; rw [Set.preimage_iUnion]

section

variable (X)

/-- The functor `Opens X ‚•§ Opens X` given by taking preimages under the identity function
is naturally isomorphic to the identity functor.
-/
@[simps]
def mapId : map (ùüô X) ‚âÖ ùü≠ (Opens X) where
  hom := { app := fun U => eqToHom (map_id_obj U) }
  inv := { app := fun U => eqToHom (map_id_obj U).symm }

theorem map_id_eq : map (ùüô X) = ùü≠ (Opens X) := by
  rfl

end

/-- The natural isomorphism between taking preimages under `f ‚â´ g`, and the composite
of taking preimages under `g`, then preimages under `f`.
-/
@[simps]
def mapComp (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : map (f ‚â´ g) ‚âÖ map g ‚ãô map f where
  hom := { app := fun U => eqToHom (map_comp_obj f g U) }
  inv := { app := fun U => eqToHom (map_comp_obj f g U).symm }

theorem map_comp_eq (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : map (f ‚â´ g) = map g ‚ãô map f :=
  rfl

-- We could make `f g` implicit here, but it's nice to be able to see when
-- they are the identity (often!)
/-- If two continuous maps `f g : X ‚ü∂ Y` are equal,
then the functors `Opens Y ‚•§ Opens X` they induce are isomorphic.
-/
def mapIso (f g : X ‚ü∂ Y) (h : f = g) : map f ‚âÖ map g :=
  NatIso.ofComponents fun U => eqToIso (by rw [congr_arg map h])

theorem map_eq (f g : X ‚ü∂ Y) (h : f = g) : map f = map g := by
  subst h
  rfl

@[simp]
theorem mapIso_refl (f : X ‚ü∂ Y) (h) : mapIso f f h = Iso.refl (map _) :=
  rfl

@[simp]
theorem mapIso_hom_app (f g : X ‚ü∂ Y) (h : f = g) (U : Opens Y) :
    (mapIso f g h).hom.app U = eqToHom (by rw [h]) :=
  rfl

@[simp]
theorem mapIso_inv_app (f g : X ‚ü∂ Y) (h : f = g) (U : Opens Y) :
    (mapIso f g h).inv.app U = eqToHom (by rw [h]) :=
  rfl

/-- A homeomorphism of spaces gives an equivalence of categories of open sets.

TODO: define `OrderIso.equivalence`, use it.
-/
@[simps]
def mapMapIso {X Y : TopCat.{u}} (H : X ‚âÖ Y) : Opens Y ‚âå Opens X where
  functor := map H.hom
  inverse := map H.inv
  unitIso := NatIso.ofComponents fun U => eqToIso (by simp [map, Set.preimage_preimage])
  counitIso := NatIso.ofComponents fun U => eqToIso (by simp [map, Set.preimage_preimage])

end TopologicalSpace.Opens

/-- An open map `f : X ‚ü∂ Y` induces a functor `Opens X ‚•§ Opens Y`.
-/
@[simps obj_coe]
def IsOpenMap.functor {X Y : TopCat} {f : X ‚ü∂ Y} (hf : IsOpenMap f) : Opens X ‚•§ Opens Y where
  obj U := ‚ü®f '' (U : Set X), hf (U : Set X) U.2‚ü©
  map h := ‚ü®‚ü®Set.image_subset _ h.down.down‚ü©‚ü©

/-- An open map `f : X ‚ü∂ Y` induces an adjunction between `Opens X` and `Opens Y`.
-/
def IsOpenMap.adjunction {X Y : TopCat} {f : X ‚ü∂ Y} (hf : IsOpenMap f) :
    Adjunction hf.functor (TopologicalSpace.Opens.map f) :=
  Adjunction.mkOfUnitCounit
    { unit := { app := fun U => homOfLE fun x hxU => ‚ü®x, hxU, rfl‚ü© }
      counit := { app := fun V => homOfLE fun y ‚ü®_, hfxV, hxy‚ü© => hxy ‚ñ∏ hfxV } }

instance IsOpenMap.functorFullOfMono {X Y : TopCat} {f : X ‚ü∂ Y} (hf : IsOpenMap f) [H : Mono f] :
    hf.functor.Full where
  map_surjective i :=
    ‚ü®homOfLE fun x hx => by
      obtain ‚ü®y, hy, eq‚ü© := i.le ‚ü®x, hx, rfl‚ü©
      exact (TopCat.mono_iff_injective f).mp H eq ‚ñ∏ hy, rfl‚ü©

instance IsOpenMap.functor_faithful {X Y : TopCat} {f : X ‚ü∂ Y} (hf : IsOpenMap f) :
    hf.functor.Faithful where

lemma OpenEmbedding.functor_obj_injective {X Y : TopCat} {f : X ‚ü∂ Y} (hf : OpenEmbedding f) :
    Function.Injective hf.isOpenMap.functor.obj :=
  fun _ _ e ‚Ü¶ Opens.ext (Set.image_injective.mpr hf.inj (congr_arg (‚Üë¬∑ : Opens Y ‚Üí Set Y) e))

namespace TopologicalSpace.Opens

open TopologicalSpace

@[simp]
theorem openEmbedding_obj_top {X : TopCat} (U : Opens X) :
    U.openEmbedding.isOpenMap.functor.obj ‚ä§ = U := by
  ext1
  exact Set.image_univ.trans Subtype.range_coe

@[simp]
theorem inclusion_map_eq_top {X : TopCat} (U : Opens X) : (Opens.map U.inclusion).obj U = ‚ä§ := by
  ext1
  exact Subtype.coe_preimage_self _

@[simp]
theorem adjunction_counit_app_self {X : TopCat} (U : Opens X) :
    U.openEmbedding.isOpenMap.adjunction.counit.app U = eqToHom (by simp) := Subsingleton.elim _ _

theorem inclusion_top_functor (X : TopCat) :
    (@Opens.openEmbedding X ‚ä§).isOpenMap.functor = map (inclusionTopIso X).inv := by
  refine CategoryTheory.Functor.ext ?_ ?_
  ¬∑ intro U
    ext x
    exact ‚ü®fun ‚ü®‚ü®_, _‚ü©, h, rfl‚ü© => h, fun h => ‚ü®‚ü®x, trivial‚ü©, h, rfl‚ü©‚ü©
  ¬∑ subsingleton

theorem functor_obj_map_obj {X Y : TopCat} {f : X ‚ü∂ Y} (hf : IsOpenMap f) (U : Opens Y) :
    hf.functor.obj ((Opens.map f).obj U) = hf.functor.obj ‚ä§ ‚äì U := by
  ext
  constructor
  ¬∑ rintro ‚ü®x, hx, rfl‚ü©
    exact ‚ü®‚ü®x, trivial, rfl‚ü©, hx‚ü©
  ¬∑ rintro ‚ü®‚ü®x, -, rfl‚ü©, hx‚ü©
    exact ‚ü®x, hx, rfl‚ü©

-- Porting note: added to ease the proof of `functor_map_eq_inf`
lemma set_range_forget_map_inclusion {X : TopCat} (U : Opens X) :
    Set.range ((forget TopCat).map (inclusion U)) = (U : Set X) := by
  ext x
  constructor
  ¬∑ rintro ‚ü®x, rfl‚ü©
    exact x.2
  ¬∑ intro h
    exact ‚ü®‚ü®x, h‚ü©, rfl‚ü©

@[simp]
theorem functor_map_eq_inf {X : TopCat} (U V : Opens X) :
    U.openEmbedding.isOpenMap.functor.obj ((Opens.map U.inclusion).obj V) = V ‚äì U := by
  ext1
  refine Set.image_preimage_eq_inter_range.trans ?_
  erw [set_range_forget_map_inclusion U]
  rfl

theorem map_functor_eq' {X U : TopCat} (f : U ‚ü∂ X) (hf : OpenEmbedding f) (V) :
    ((Opens.map f).obj <| hf.isOpenMap.functor.obj V) = V :=
  Opens.ext <| Set.preimage_image_eq _ hf.inj

@[simp]
theorem map_functor_eq {X : TopCat} {U : Opens X} (V : Opens U) :
    ((Opens.map U.inclusion).obj <| U.openEmbedding.isOpenMap.functor.obj V) = V :=
  TopologicalSpace.Opens.map_functor_eq' _ U.openEmbedding V

@[simp]
theorem adjunction_counit_map_functor {X : TopCat} {U : Opens X} (V : Opens U) :
    U.openEmbedding.isOpenMap.adjunction.counit.app (U.openEmbedding.isOpenMap.functor.obj V) =
      eqToHom (by dsimp; rw [map_functor_eq V]) := by
  subsingleton

end TopologicalSpace.Opens
