/-
Copyright (c) 2023 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Adam Topaz
-/

import Mathlib.CategoryTheory.Sites.Coherent
import Mathlib.Topology.Category.CompHaus.ExplicitLimits

/-!

# Effective epimorphic families in `CompHaus`

Let `œÄ a : X a ‚ü∂ B` be a family of morphisms in `CompHaus` indexed by a finite type `Œ±`.
In this file, we show that the following are all equivalent:
- The family `œÄ` is effective epimorphic.
- The induced map `‚àê X ‚ü∂ B` is epimorphic.
- The family `œÄ` is jointly surjective.
This is the main result of this file, which can be found in `CompHaus.effectiveEpiFamily_tfae`

As a consequence, we also show that `CompHaus` is precoherent.

# Projects

- Define regular categories, and show that `CompHaus` is regular.
- Define coherent categories, and show that `CompHaus` is actually coherent.

-/

open CategoryTheory Limits

namespace CompHaus

namespace EffectiveEpiFamily

universe u

variable {Œ± : Type} [Fintype Œ±] {B : CompHaus.{u}}
  {X : Œ± ‚Üí CompHaus.{u}} (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B))
  (surj : ‚àÄ b : B, ‚àÉ (a : Œ±) (x : X a), œÄ a x = b)

/--
Implementation: This is a setoid on the explicit finite coproduct of `X` whose quotient
will be isomorphic to `B` provided that `X a ‚Üí B` is an effective epi family.
-/
def relation : Setoid (finiteCoproduct X) where
  r a b := ‚àÉ (Z : CompHaus.{u}) (z : Z)
    (fst : Z ‚ü∂ X a.fst) (snd : Z ‚ü∂ X b.fst),
    fst ‚â´ œÄ _ = snd ‚â´ œÄ _ ‚àß fst z = a.snd ‚àß snd z = b.snd
  iseqv := by
    constructor
    ¬∑ rintro ‚ü®a,x‚ü©
      refine ‚ü®X a, x, ùüô _, ùüô _, by simp, rfl, rfl‚ü©
    ¬∑ rintro ‚ü®a,x‚ü© ‚ü®b,y‚ü© ‚ü®Z,z,fst,snd,w,h1,h2‚ü©
      exact ‚ü®Z,z,snd,fst,w.symm,h2,h1‚ü©
    ¬∑ rintro ‚ü®a,x‚ü© ‚ü®b,y‚ü© ‚ü®z,c‚ü© ‚ü®Z,z,fstZ,sndZ,hZ,hZ1,hZ2‚ü© ‚ü®W,w,fstW,sndW,hW,hW1,hW2‚ü©
      refine ‚ü®pullback sndZ fstW, ‚ü®‚ü®z,w‚ü©, by dsimp; rw [hZ2, hW1]‚ü©,
        pullback.fst _ _ ‚â´ fstZ, pullback.snd _ _ ‚â´ sndW, ?_, hZ1, hW2‚ü©
      dsimp at *
      simp only [Category.assoc, hZ, ‚Üê hW]
      apply ContinuousMap.ext
      rintro ‚ü®‚ü®u,v‚ü©,h‚ü©
      change œÄ b (sndZ u) = œÄ b (fstW v)
      rw [h]

/--
Implementation: the map from the quotient of `relation œÄ` to `B`, which will eventually
become the function underlying an isomorphism, provided that `X a ‚Üí B` is an effective epi family.
-/
def ŒπFun : Quotient (relation œÄ) ‚Üí B :=
  Quotient.lift (fun ‚ü®a,x‚ü© => œÄ a x) <| by
    rintro ‚ü®a,x‚ü© ‚ü®b,y‚ü© ‚ü®Z,z,fst,snd,h,hx,hy‚ü©
    dsimp at *
    rw [‚Üê hx, ‚Üê hy]
    apply_fun (fun t => t z) at h
    exact h

lemma ŒπFun_continuous : Continuous (ŒπFun œÄ) := by
  apply Continuous.quotient_lift
  apply continuous_sigma
  intro a
  exact (œÄ a).continuous

lemma ŒπFun_injective : (ŒπFun œÄ).Injective := by
  rintro ‚ü®‚ü®a,x‚ü©‚ü© ‚ü®‚ü®b,y‚ü©‚ü© (h : œÄ _ _ = œÄ _ _)
  apply Quotient.sound'
  refine ‚ü®pullback (œÄ a) (œÄ b), ‚ü®‚ü®x,y‚ü©,h‚ü©, pullback.fst _ _, pullback.snd _ _, ?_, rfl, rfl‚ü©
  ext ‚ü®_, h‚ü© ; exact h

/--
Implementation: The quotient of `relation œÄ`, considered as an object of `CompHaus`.
-/
def QB : CompHaus.{u} :=
  haveI : T2Space (Quotient <| relation œÄ) :=
    ‚ü®fun _ _ h => separated_by_continuous (ŒπFun_continuous œÄ) <| (ŒπFun_injective œÄ).ne h ‚ü©
  CompHaus.of (Quotient <| relation œÄ)

/-- The function `Œπ_fun`, considered as a morphism. -/
def ŒπHom : (QB œÄ) ‚ü∂ B := ‚ü®ŒπFun œÄ, ŒπFun_continuous œÄ‚ü©

/--
Implementation: The promised isomorphism between `QB` and `B`.
-/
noncomputable
def Œπ : (QB œÄ) ‚âÖ B :=
  haveI : IsIso (ŒπHom œÄ) := by
    apply isIso_of_bijective
    refine ‚ü®ŒπFun_injective _, ?_‚ü©
    intro b
    obtain ‚ü®a,x,h‚ü© := surj b
    refine ‚ü®Quotient.mk _ ‚ü®a,x‚ü©, h‚ü©
  asIso (ŒπHom œÄ)

/--
Implementation: The family of morphisms `X a ‚ü∂ QB` which will be shown to be effective epi.
-/
def œÄ' : (a : Œ±) ‚Üí (X a ‚ü∂ QB œÄ) := fun a =>
  { toFun := fun x => Quotient.mk _ ‚ü®a, x‚ü©
    continuous_toFun := by
      apply Continuous.comp
      apply continuous_quot_mk
      apply continuous_sigmaMk (œÉ := fun a => X a) }

/--
Implementation: The family of morphisms `X a ‚ü∂ QB` is an effective epi.
-/
def structAux : EffectiveEpiFamilyStruct X (œÄ' œÄ) where
  desc := fun {W} e h => {
    toFun := Quotient.lift (fun ‚ü®a,x‚ü© => e a x) <| by
      rintro ‚ü®a,x‚ü© ‚ü®b,y‚ü© ‚ü®Z,z,fst,snd,hh,hx,hy‚ü© ; dsimp at *
      rw [‚Üê hx, ‚Üê hy]
      specialize h _ _ fst snd ?_
      ¬∑ ext z
        apply ŒπFun_injective
        apply_fun (fun q => q z) at hh
        exact hh
      apply_fun (fun q => q z) at h
      exact h
    continuous_toFun := by
      apply Continuous.quotient_lift
      apply continuous_sigma
      intro a
      exact (e a).continuous }
  fac := by intro Z e h a ; ext ; rfl
  uniq := by
    intro Z e h m hm
    ext ‚ü®‚ü®a,x‚ü©‚ü©
    specialize hm a
    apply_fun (fun q => q x) at hm
    exact hm

@[reassoc]
lemma œÄ'_comp_Œπ_hom (a : Œ±) : œÄ' œÄ a ‚â´ (Œπ _ surj).hom = œÄ a := by ext ; rfl

@[reassoc]
lemma œÄ_comp_Œπ_inv (a : Œ±) : œÄ a ‚â´ (Œπ _ surj).inv = œÄ' œÄ a :=  by
  rw [Iso.comp_inv_eq]
  exact œÄ'_comp_Œπ_hom _ surj _

-- TODO: Make a general construction for transferring such structs along isomorphisms.
/--
Implementation: The family `X` is an effective epi, provided that `œÄ` are jointly surjective.
The theorem `CompHaus.effectiveEpiFamily_tfae` should be used instead.
-/
noncomputable
def struct : EffectiveEpiFamilyStruct X œÄ where
  desc := fun {W} e h => (Œπ œÄ surj).inv ‚â´ (structAux œÄ).desc e (fun {Z} a‚ÇÅ a‚ÇÇ g‚ÇÅ g‚ÇÇ hh => by
      apply h
      rw [‚Üê cancel_mono (Œπ _ surj).inv]
      simpa only [Category.assoc, œÄ_comp_Œπ_inv])
  fac := by
    intro W e h a
    simp only [Eq.ndrec, id_eq, eq_mpr_eq_cast, œÄ_comp_Œπ_inv_assoc, (structAux œÄ).fac]
  uniq := by
    intro W e h m hm
    dsimp
    rw [Iso.eq_inv_comp]
    apply (structAux œÄ).uniq
    intro a
    simpa using hm a

end EffectiveEpiFamily

theorem effectiveEpiFamily_of_jointly_surjective
    {Œ± : Type} [Fintype Œ±] {B : CompHaus.{u}}
    (X : Œ± ‚Üí CompHaus.{u}) (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B))
    (surj : ‚àÄ b : B, ‚àÉ (a : Œ±) (x : X a), œÄ a x = b) :
    EffectiveEpiFamily X œÄ :=
  ‚ü®‚ü®CompHaus.EffectiveEpiFamily.struct œÄ surj‚ü©‚ü©

open EffectiveEpiFamily

open List in
theorem effectiveEpiFamily_tfae
    {Œ± : Type} [Fintype Œ±] {B : CompHaus.{u}}
    (X : Œ± ‚Üí CompHaus.{u}) (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B)) :
    TFAE
    [ EffectiveEpiFamily X œÄ
    , Epi (Sigma.desc œÄ)
    , ‚àÄ b : B, ‚àÉ (a : Œ±) (x : X a), œÄ a x = b
    ] := by
  tfae_have 1 ‚Üí 2
  ¬∑ intro ; infer_instance
  tfae_have 2 ‚Üí 3
  ¬∑ intro e ; rw [epi_iff_surjective] at e
    let i : ‚àê X ‚âÖ finiteCoproduct X :=
      (colimit.isColimit _).coconePointUniqueUpToIso (finiteCoproduct.isColimit _)
    intro b
    obtain ‚ü®t,rfl‚ü© := e b
    let q := i.hom t
    refine ‚ü®q.1,q.2,?_‚ü©
    have : t = i.inv (i.hom t) := show t = (i.hom ‚â´ i.inv) t by simp only [i.hom_inv_id] ; rfl
    rw [this]
    show _ = (i.inv ‚â´ Sigma.desc œÄ) (i.hom t)
    suffices i.inv ‚â´ Sigma.desc œÄ = finiteCoproduct.desc X œÄ by
      rw [this] ; rfl
    rw [Iso.inv_comp_eq]
    apply colimit.hom_ext
    rintro ‚ü®a‚ü©
    simp only [Discrete.functor_obj, colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app,
      colimit.comp_coconePointUniqueUpToIso_hom_assoc]
    ext ; rfl
  tfae_have 3 ‚Üí 1
  ¬∑ apply effectiveEpiFamily_of_jointly_surjective
  tfae_finish

instance precoherent : Precoherent CompHaus.{u} := by
  constructor
  intro B‚ÇÅ B‚ÇÇ f Œ± _ X‚ÇÅ œÄ‚ÇÅ h‚ÇÅ
  refine ‚ü®Œ±, inferInstance, fun a => pullback f (œÄ‚ÇÅ a), fun a => pullback.fst _ _, ?_,
    id, fun a => pullback.snd _ _, ?_‚ü©
  ¬∑ have := (effectiveEpiFamily_tfae _ œÄ‚ÇÅ).out 0 2 ; rw [this] at h‚ÇÅ ; clear this
    have := (effectiveEpiFamily_tfae _ (fun a => pullback.fst f (œÄ‚ÇÅ a))).out 0 2
    rw [this] ; clear this
    intro b‚ÇÇ
    obtain ‚ü®a,x,h‚ü© := h‚ÇÅ (f b‚ÇÇ)
    refine ‚ü®a, ‚ü®‚ü®b‚ÇÇ, x‚ü©, h.symm‚ü©, rfl‚ü©
  ¬∑ intro a
    dsimp
    ext ‚ü®‚ü®_,_‚ü©,h‚ü©
    exact h.symm

end CompHaus
