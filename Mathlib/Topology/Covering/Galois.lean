/-
Copyright (c) 2025 Junyan Xu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Junyan Xu
-/
import Mathlib.GroupTheory.Coset.Defs
import Mathlib.Topology.Algebra.ConstMulAction
import Mathlib.Topology.Algebra.Group.Quotient
import Mathlib.Topology.Covering.Basic

/-!
# Galois Covering Maps

This file constructs of them from free and properly discontinuous group actions.

TODO: show the construction yields Galois covering maps (to be defined) when the action is
on a path-connected space.
-/

namespace Topology.IsQuotientMap

variable {E X : Type*} [TopologicalSpace E] [TopologicalSpace X] {f : E ‚Üí X}
  {G : Type*} [Group G] (hf : IsQuotientMap f)
include hf

section MulAction

variable [MulAction G E] [ContinuousConstSMul G E]
  (hfG : ‚àÄ {e‚ÇÅ e‚ÇÇ}, f e‚ÇÅ = f e‚ÇÇ ‚Üî e‚ÇÅ ‚àà MulAction.orbit G e‚ÇÇ)
include hfG

/-- If a group `G` acts on a space `E` and `U` is an open subset disjoint from all other
  `G`-translates of itself, and `p` is a quotient map by this action, then `p` admits a
  `Trivialization` over the base set `p(U)`. -/
@[to_additive "If a group `G` acts on a space `E` and `U` is an open subset disjoint from all
  other `G`-translates of itself, and `p` is a quotient map by this action, then `p` admits a
  `Trivialization` over the base set `p(U)`."]
noncomputable def trivializationOfSMulDisjoint [TopologicalSpace G] [DiscreteTopology G]
    (U : Set E) (open_U : IsOpen U) (disjoint : ‚àÄ g : G, (g ‚Ä¢ ¬∑) '' U ‚à© U ‚â† ‚àÖ ‚Üí g = 1) :
    Trivialization G f := by
  have pGE : ‚àÄ (g : G) e, f (g ‚Ä¢ e) = f e := fun g e ‚Ü¶ hfG.mpr ‚ü®g, rfl‚ü©
  simp_rw [‚Üê Set.nonempty_iff_ne_empty] at disjoint
  have preim_im : f ‚Åª¬π' (f '' U) = ‚ãÉ g : G, (g ‚Ä¢ ¬∑) ‚Åª¬π' U := by
    ext e; refine ‚ü®fun ‚ü®e', heU, he‚ü© ‚Ü¶ ?_, ?_‚ü©
    ¬∑ obtain ‚ü®g, rfl‚ü© := hfG.mp he; exact ‚ü®_, ‚ü®g, rfl‚ü©, heU‚ü©
    ¬∑ intro ‚ü®_, ‚ü®g, rfl‚ü©, hg‚ü©; exact ‚ü®_, hg, pGE g e‚ü©
  refine IsOpen.trivialization_discrete (Or.inr hf.surjective) (fun g ‚Ü¶ (g ‚Ä¢ ¬∑) ‚Åª¬π' U) (f '' U)
    ?_ (fun g W hWU ‚Ü¶ ‚ü®fun hoW ‚Ü¶ (hoW.preimage hf.continuous).inter (open_U.preimage <|
      continuous_const_smul g), fun isOpen ‚Ü¶ hf.isOpen_preimage.mp ?_‚ü©) (fun g e‚ÇÅ h‚ÇÅ e‚ÇÇ h‚ÇÇ he ‚Ü¶ ?_)
    ?_ (fun {g‚ÇÅ g‚ÇÇ} hne ‚Ü¶ disjoint_iff_inf_le.mpr fun e ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ hne <|
      mul_inv_eq_one.mp (disjoint _ ‚ü®_, ‚ü®_, h‚ÇÇ, ?_‚ü©, h‚ÇÅ‚ü©)) preim_im.subset
  ¬∑ rw [‚Üê hf.isOpen_preimage, preim_im]
    exact isOpen_iUnion fun g ‚Ü¶ open_U.preimage (continuous_const_smul g)
  ¬∑ convert isOpen_iUnion fun g : G ‚Ü¶ isOpen.preimage (continuous_const_smul g)
    ext e; refine ‚ü®fun hW ‚Ü¶ ?_, ?_‚ü©
    ¬∑ obtain ‚ü®e', he', hfe‚ü© := hWU hW
      obtain ‚ü®g', rfl‚ü© := hfG.mp hfe
      refine ‚ü®_, ‚ü®g‚Åª¬π * g', rfl‚ü©, ?_, ?_‚ü©
      ¬∑ apply Set.mem_of_eq_of_mem (pGE _ e) hW
      ¬∑ apply Set.mem_of_eq_of_mem _ he'; dsimp only; rw [mul_smul, smul_inv_smul]
    ¬∑ rintro ‚ü®_, ‚ü®g, rfl‚ü©, hW, -‚ü©; apply Set.mem_of_eq_of_mem (pGE _ e).symm hW
  ¬∑ rw [‚Üê pGE g, ‚Üê pGE g e‚ÇÇ] at he; obtain ‚ü®g', he‚ü© := hfG.mp he
    rw [‚Üê smul_left_cancel_iff g, ‚Üê he, disjoint g' ‚ü®_, ‚ü®_, h‚ÇÇ, he‚ü©, h‚ÇÅ‚ü©]; apply one_smul
  ¬∑ rintro g x ‚ü®e, hU, rfl‚ü©; refine ‚ü®g‚Åª¬π ‚Ä¢ e, ?_, pGE _ e‚ü©; apply (smul_inv_smul g e).symm ‚ñ∏ hU
  ¬∑ dsimp only; rw [mul_smul, inv_smul_smul]

@[to_additive] lemma isCoveringMapOn_of_smul_disjoint
    (disjoint : ‚àÄ e : E, ‚àÉ U ‚àà ùìù e, ‚àÄ g : G, (g ‚Ä¢ ¬∑) '' U ‚à© U ‚â† ‚àÖ ‚Üí g ‚Ä¢ e = e) :
    IsCoveringMapOn f (f '' {e | MulAction.stabilizer G e = ‚ä•}) := by
  letI : TopologicalSpace G := ‚ä•; have : DiscreteTopology G := ‚ü®rfl‚ü©
  suffices ‚àÄ x ‚àà f '' {e | MulAction.stabilizer G e = ‚ä•}, ‚àÉ t : Trivialization G f, x ‚àà t.baseSet by
    choose t ht using this; exact IsCoveringMapOn.mk _ _ (fun _ ‚Ü¶ G) t ht
  rintro x ‚ü®e, he, rfl‚ü©
  obtain ‚ü®U, heU, hU‚ü© := disjoint e
  refine ‚ü®hf.trivializationOfSMulDisjoint hfG (interior U) isOpen_interior
    fun g hg ‚Ü¶ ?_, e, mem_interior_iff_mem_nhds.mpr heU, rfl‚ü©
  rw [‚Üê Subgroup.mem_bot, ‚Üê he]; apply hU; contrapose! hg; exact Set.subset_eq_empty
    (Set.inter_subset_inter (Set.image_subset _ interior_subset) interior_subset) hg

@[to_additive] lemma isCoveringMap_of_smul_disjoint
    (disjoint : ‚àÄ e : E, ‚àÉ U ‚àà ùìù e, ‚àÄ g : G, (g ‚Ä¢ ¬∑) '' U ‚à© U ‚â† ‚àÖ ‚Üí g = 1) : IsCoveringMap f :=
  isCoveringMap_iff_isCoveringMapOn_univ.mpr <| by
    convert ‚Üê hf.isCoveringMapOn_of_smul_disjoint hfG fun e ‚Ü¶ ?_
    ¬∑ refine Set.eq_univ_of_forall fun x ‚Ü¶ ?_
      obtain ‚ü®e, rfl‚ü© := hf.surjective x
      obtain ‚ü®U, hU, hGU‚ü© := disjoint e
      replace hU := mem_of_mem_nhds hU
      exact ‚ü®e, (Subgroup.eq_bot_iff_forall _).mpr fun g hg ‚Ü¶
        hGU g (Set.nonempty_iff_ne_empty.mp ‚ü®e, ‚ü®e, hU, hg‚ü©, hU‚ü©), rfl‚ü©
    ¬∑ obtain ‚ü®U, hU, hGU‚ü© := disjoint e
      refine ‚ü®U, hU, fun g hg ‚Ü¶ ?_‚ü©; rw [hGU g hg, one_smul]

section ProperlyDiscontinuousSMul

variable [ProperlyDiscontinuousSMul G E] [WeaklyLocallyCompactSpace E] [T2Space E]

@[to_additive] lemma isCoveringMapOn_of_properlyDiscontinuousSMul :
    IsCoveringMapOn f (f '' {e | MulAction.stabilizer G e = ‚ä•}) :=
  hf.isCoveringMapOn_of_smul_disjoint hfG (ProperlyDiscontinuousSMul.disjoint_image_nhds G)

@[to_additive] lemma isCoveringMap_of_properlyDiscontinuousSMul
    (free : ‚àÄ (g : G) (e : E), g ‚Ä¢ e = e ‚Üí g = 1) : IsCoveringMap f := by
  rw [isCoveringMap_iff_isCoveringMapOn_univ]
  convert ‚Üê hf.isCoveringMapOn_of_properlyDiscontinuousSMul hfG
  refine Set.eq_univ_iff_forall.mpr fun x ‚Ü¶ ?_
  obtain ‚ü®e, rfl‚ü© := hf.surjective x
  exact ‚ü®e, eq_bot_iff.mpr fun g hg ‚Ü¶ free g e hg, rfl‚ü©

omit hf hfG

@[to_additive] lemma _root_.isCoveringMapOn_quotient_of_properlyDiscontinuousSMul :
    IsCoveringMapOn (Quotient.mk _) <|
      (Quotient.mk <| MulAction.orbitRel G E) '' {e | MulAction.stabilizer G e = ‚ä•} :=
  isQuotientMap_quotient_mk'.isCoveringMapOn_of_properlyDiscontinuousSMul Quotient.eq''

@[to_additive] lemma _root_.isCoveringMap_quotient_of_properlyDiscontinuousSMul
    (free : ‚àÄ (g : G) (e : E), g ‚Ä¢ e = e ‚Üí g = 1) :
    IsCoveringMap (Quotient.mk <| MulAction.orbitRel G E) :=
  isQuotientMap_quotient_mk'.isCoveringMap_of_properlyDiscontinuousSMul Quotient.eq'' free

end ProperlyDiscontinuousSMul

end MulAction

@[to_additive] lemma isCoveringMap_of_subgroup [Group E] [IsTopologicalGroup E] (G : Subgroup E)
    [DiscreteTopology G] (hfG : ‚àÄ {e‚ÇÅ e‚ÇÇ}, f e‚ÇÅ = f e‚ÇÇ ‚Üî e‚ÇÅ‚Åª¬π * e‚ÇÇ ‚àà G) :
    IsCoveringMap f := by
  obtain ‚ü®U, hU, disj‚ü© := G.disjoint_nhds_of_discrete
  refine hf.isCoveringMap_of_smul_disjoint (G := G.op) (fun {_ _} ‚Ü¶ ?_) fun e ‚Ü¶ ?_
  ¬∑ rw [hfG, ‚Üê QuotientGroup.leftRel_apply]; rfl
  refine ‚ü®_, singleton_mul_mem_nhds_of_nhds_one e hU, fun ‚ü®‚ü®s‚ü©, hS‚ü© hs ‚Ü¶ Subtype.ext <|
    MulOpposite.unop_injective <| disj _ hS <| Or.inr ?_‚ü©
  simp_rw [‚Üê Set.nonempty_iff_ne_empty] at hs ‚ä¢
  obtain ‚ü®_, ‚ü®_, ‚ü®_, rfl, x, hx, rfl‚ü©, rfl‚ü©, g, rfl, y, hy, he‚ü© := hs
  exact ‚ü®y, ‚ü®x, hx, mul_left_cancel (he.trans <| mul_assoc _ _ _).symm‚ü©, hy‚ü©

omit hf in
@[to_additive] lemma isCoveringMap_of_discrete_ker_monoidHom [Group E] [IsTopologicalGroup E]
    [Group X] {f : E ‚Üí* X} (hf : IsQuotientMap f) (d : DiscreteTopology f.ker) : IsCoveringMap f :=
  hf.isCoveringMap_of_subgroup f.ker fun {_ _} ‚Ü¶ by rw [‚Üê inv_mul_eq_one, ‚Üê map_inv, ‚Üê map_mul]; rfl

end Topology.IsQuotientMap

@[to_additive] lemma Subgroup.isCoveringMap {G} [Group G] [TopologicalSpace G]
    [IsTopologicalGroup G] (S : Subgroup G) [DiscreteTopology S] :
    IsCoveringMap (QuotientGroup.mk (s := S)) :=
  isQuotientMap_quotient_mk'.isCoveringMap_of_subgroup S fun {_ _} ‚Ü¶
    Quotient.eq''.trans QuotientGroup.leftRel_apply
