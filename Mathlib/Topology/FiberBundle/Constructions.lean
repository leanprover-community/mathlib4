/-
Copyright ¬© 2022 Nicol√≤ Cavalleri. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicol√≤ Cavalleri, S√©bastien Gou√´zel, Heather Macbeth, Floris van Doorn
-/
import Mathlib.Topology.FiberBundle.Basic

#align_import topology.fiber_bundle.constructions from "leanprover-community/mathlib"@"e473c3198bb41f68560cab68a0529c854b618833"

/-!
# Standard constructions on fiber bundles

This file contains several standard constructions on fiber bundles:

* `Bundle.Trivial.fiberBundle ùïú B F`: the trivial fiber bundle with model fiber `F` over the base
  `B`

* `FiberBundle.prod`: for fiber bundles `E‚ÇÅ` and `E‚ÇÇ` over a common base, a fiber bundle structure
  on their fiberwise product `E‚ÇÅ √ó·µá E‚ÇÇ` (the notation stands for `fun x ‚Ü¶ E‚ÇÅ x √ó E‚ÇÇ x`).

* `FiberBundle.pullback`: for a fiber bundle `E` over `B`, a fiber bundle structure on its
  pullback `f *·µñ E` by a map `f : B' ‚Üí B` (the notation is a type synonym for `E ‚àò f`).

## Tags

fiber bundle, fibre bundle, fiberwise product, pullback

-/


open TopologicalSpace Filter Set Bundle

open Topology Classical Bundle

/-! ### The trivial bundle -/


namespace Bundle

namespace Trivial

variable (B : Type*) (F : Type*)

-- Porting note: Added name for this instance.
-- TODO: use `TotalSpace.toProd`
instance topologicalSpace [t‚ÇÅ : TopologicalSpace B]
    [t‚ÇÇ : TopologicalSpace F] : TopologicalSpace (TotalSpace F (Trivial B F)) :=
  induced TotalSpace.proj t‚ÇÅ ‚äì induced (TotalSpace.trivialSnd B F) t‚ÇÇ
#align bundle.trivial.bundle.total_space.topological_space Bundle.Trivial.topologicalSpace

variable [TopologicalSpace B] [TopologicalSpace F]

theorem inducing_toProd : Inducing (TotalSpace.toProd B F) :=
  ‚ü®by simp only [instTopologicalSpaceProd, induced_inf, induced_compose]; rfl‚ü©

/-- Homeomorphism between the total space of the trivial bundle and the Cartesian product. -/
def homeomorphProd : TotalSpace F (Trivial B F) ‚âÉ‚Çú B √ó F :=
  (TotalSpace.toProd _ _).toHomeomorphOfInducing (inducing_toProd B F)

/-- Local trivialization for trivial bundle. -/
def trivialization : Trivialization F (œÄ F (Bundle.Trivial B F)) where
  -- porting note: golfed
  toLocalHomeomorph := (homeomorphProd B F).toLocalHomeomorph
  baseSet := univ
  open_baseSet := isOpen_univ
  source_eq := rfl
  target_eq := univ_prod_univ.symm
  proj_toFun _ _ := rfl
#align bundle.trivial.trivialization Bundle.Trivial.trivialization

@[simp]
theorem trivialization_source : (trivialization B F).source = univ := rfl
#align bundle.trivial.trivialization_source Bundle.Trivial.trivialization_source

@[simp]
theorem trivialization_target : (trivialization B F).target = univ := rfl
#align bundle.trivial.trivialization_target Bundle.Trivial.trivialization_target

/-- Fiber bundle instance on the trivial bundle. -/
instance fiberBundle : FiberBundle F (Bundle.Trivial B F) where
  trivializationAtlas' := {trivialization B F}
  trivializationAt' _ := trivialization B F
  mem_baseSet_trivializationAt' := mem_univ
  trivialization_mem_atlas' _ := mem_singleton _
  totalSpaceMk_inducing' _ := (homeomorphProd B F).symm.inducing.comp
    (inducing_const_prod.2 inducing_id)
#align bundle.trivial.fiber_bundle Bundle.Trivial.fiberBundle

theorem eq_trivialization (e : Trivialization F (œÄ F (Bundle.Trivial B F)))
    [i : MemTrivializationAtlas e] : e = trivialization B F := i.out
#align bundle.trivial.eq_trivialization Bundle.Trivial.eq_trivialization

end Trivial

end Bundle

/-! ### Fibrewise product of two bundles -/


section Prod

variable {B : Type*}

section Defs

variable (F‚ÇÅ : Type*) (E‚ÇÅ : B ‚Üí Type*) (F‚ÇÇ : Type*) (E‚ÇÇ : B ‚Üí Type*)

variable [TopologicalSpace (TotalSpace F‚ÇÅ E‚ÇÅ)] [TopologicalSpace (TotalSpace F‚ÇÇ E‚ÇÇ)]

/-- Equip the total space of the fiberwise product of two fiber bundles `E‚ÇÅ`, `E‚ÇÇ` with
the induced topology from the diagonal embedding into `TotalSpace F‚ÇÅ E‚ÇÅ √ó TotalSpace F‚ÇÇ E‚ÇÇ`. -/
instance FiberBundle.Prod.topologicalSpace : TopologicalSpace (TotalSpace (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ)) :=
  TopologicalSpace.induced
    (fun p ‚Ü¶ ((‚ü®p.1, p.2.1‚ü© : TotalSpace F‚ÇÅ E‚ÇÅ), (‚ü®p.1, p.2.2‚ü© : TotalSpace F‚ÇÇ E‚ÇÇ)))
    inferInstance
#align fiber_bundle.prod.topological_space FiberBundle.Prod.topologicalSpace

/-- The diagonal map from the total space of the fiberwise product of two fiber bundles
`E‚ÇÅ`, `E‚ÇÇ` into `TotalSpace F‚ÇÅ E‚ÇÅ √ó TotalSpace F‚ÇÇ E‚ÇÇ` is `Inducing`. -/
theorem FiberBundle.Prod.inducing_diag :
    Inducing (fun p ‚Ü¶ (‚ü®p.1, p.2.1‚ü©, ‚ü®p.1, p.2.2‚ü©) :
      TotalSpace (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí TotalSpace F‚ÇÅ E‚ÇÅ √ó TotalSpace F‚ÇÇ E‚ÇÇ) :=
  ‚ü®rfl‚ü©
#align fiber_bundle.prod.inducing_diag FiberBundle.Prod.inducing_diag

end Defs

open FiberBundle

variable [TopologicalSpace B] (F‚ÇÅ : Type*) [TopologicalSpace F‚ÇÅ] (E‚ÇÅ : B ‚Üí Type*)
  [TopologicalSpace (TotalSpace F‚ÇÅ E‚ÇÅ)] (F‚ÇÇ : Type*) [TopologicalSpace F‚ÇÇ] (E‚ÇÇ : B ‚Üí Type*)
  [TopologicalSpace (TotalSpace F‚ÇÇ E‚ÇÇ)]

namespace Trivialization

variable {F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ}
variable (e‚ÇÅ : Trivialization F‚ÇÅ (œÄ F‚ÇÅ E‚ÇÅ)) (e‚ÇÇ : Trivialization F‚ÇÇ (œÄ F‚ÇÇ E‚ÇÇ))

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for fiber bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the forward
function for the construction `Trivialization.prod`, the induced
trivialization for the fiberwise product of `E‚ÇÅ` and `E‚ÇÇ`. -/
def Prod.toFun' : TotalSpace (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí B √ó F‚ÇÅ √ó F‚ÇÇ :=
  fun p ‚Ü¶ ‚ü®p.1, (e‚ÇÅ ‚ü®p.1, p.2.1‚ü©).2, (e‚ÇÇ ‚ü®p.1, p.2.2‚ü©).2‚ü©
#align trivialization.prod.to_fun' Trivialization.Prod.toFun'

variable {e‚ÇÅ e‚ÇÇ}

theorem Prod.continuous_to_fun : ContinuousOn (Prod.toFun' e‚ÇÅ e‚ÇÇ)
    (œÄ (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet)) := by
  let f‚ÇÅ : TotalSpace (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí TotalSpace F‚ÇÅ E‚ÇÅ √ó TotalSpace F‚ÇÇ E‚ÇÇ :=
    fun p ‚Ü¶ ((‚ü®p.1, p.2.1‚ü© : TotalSpace F‚ÇÅ E‚ÇÅ), (‚ü®p.1, p.2.2‚ü© : TotalSpace F‚ÇÇ E‚ÇÇ))
  let f‚ÇÇ : TotalSpace F‚ÇÅ E‚ÇÅ √ó TotalSpace F‚ÇÇ E‚ÇÇ ‚Üí (B √ó F‚ÇÅ) √ó B √ó F‚ÇÇ := fun p ‚Ü¶ ‚ü®e‚ÇÅ p.1, e‚ÇÇ p.2‚ü©
  let f‚ÇÉ : (B √ó F‚ÇÅ) √ó B √ó F‚ÇÇ ‚Üí B √ó F‚ÇÅ √ó F‚ÇÇ := fun p ‚Ü¶ ‚ü®p.1.1, p.1.2, p.2.2‚ü©
  have hf‚ÇÅ : Continuous f‚ÇÅ := (Prod.inducing_diag F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ).continuous
  have hf‚ÇÇ : ContinuousOn f‚ÇÇ (e‚ÇÅ.source √óÀ¢ e‚ÇÇ.source) :=
    e‚ÇÅ.toLocalHomeomorph.continuousOn.prod_map e‚ÇÇ.toLocalHomeomorph.continuousOn
  have hf‚ÇÉ : Continuous f‚ÇÉ :=
    (continuous_fst.comp continuous_fst).prod_mk (continuous_snd.prod_map continuous_snd)
  refine' ((hf‚ÇÉ.comp_continuousOn hf‚ÇÇ).comp hf‚ÇÅ.continuousOn _).congr _
  ¬∑ rw [e‚ÇÅ.source_eq, e‚ÇÇ.source_eq]
    exact mapsTo_preimage _ _
  rintro ‚ü®b, v‚ÇÅ, v‚ÇÇ‚ü© ‚ü®hb‚ÇÅ, _‚ü©
  simp only [Prod.toFun', Prod.mk.inj_iff, Function.comp_apply, and_true_iff]
  rw [e‚ÇÅ.coe_fst]
  rw [e‚ÇÅ.source_eq, mem_preimage]
  exact hb‚ÇÅ
#align trivialization.prod.continuous_to_fun Trivialization.Prod.continuous_to_fun

variable (e‚ÇÅ e‚ÇÇ) [‚àÄ x, Zero (E‚ÇÅ x)] [‚àÄ x, Zero (E‚ÇÇ x)]

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for fiber bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the inverse
function for the construction `Trivialization.prod`, the induced
trivialization for the fiberwise product of `E‚ÇÅ` and `E‚ÇÇ`. -/
noncomputable def Prod.invFun' (p : B √ó F‚ÇÅ √ó F‚ÇÇ) : TotalSpace (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) :=
  ‚ü®p.1, e‚ÇÅ.symm p.1 p.2.1, e‚ÇÇ.symm p.1 p.2.2‚ü©
#align trivialization.prod.inv_fun' Trivialization.Prod.invFun'

variable {e‚ÇÅ e‚ÇÇ}

theorem Prod.left_inv {x : TotalSpace (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ)}
    (h : x ‚àà œÄ (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet)) :
    Prod.invFun' e‚ÇÅ e‚ÇÇ (Prod.toFun' e‚ÇÅ e‚ÇÇ x) = x := by
  obtain ‚ü®x, v‚ÇÅ, v‚ÇÇ‚ü© := x
  obtain ‚ü®h‚ÇÅ : x ‚àà e‚ÇÅ.baseSet, h‚ÇÇ : x ‚àà e‚ÇÇ.baseSet‚ü© := h
  simp only [Prod.toFun', Prod.invFun', symm_apply_apply_mk, h‚ÇÅ, h‚ÇÇ]
#align trivialization.prod.left_inv Trivialization.Prod.left_inv

theorem Prod.right_inv {x : B √ó F‚ÇÅ √ó F‚ÇÇ}
    (h : x ‚àà (e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet) √óÀ¢ (univ : Set (F‚ÇÅ √ó F‚ÇÇ))) :
    Prod.toFun' e‚ÇÅ e‚ÇÇ (Prod.invFun' e‚ÇÅ e‚ÇÇ x) = x := by
  obtain ‚ü®x, w‚ÇÅ, w‚ÇÇ‚ü© := x
  obtain ‚ü®‚ü®h‚ÇÅ : x ‚àà e‚ÇÅ.baseSet, h‚ÇÇ : x ‚àà e‚ÇÇ.baseSet‚ü©, -‚ü© := h
  simp only [Prod.toFun', Prod.invFun', apply_mk_symm, h‚ÇÅ, h‚ÇÇ]
#align trivialization.prod.right_inv Trivialization.Prod.right_inv

theorem Prod.continuous_inv_fun :
    ContinuousOn (Prod.invFun' e‚ÇÅ e‚ÇÇ) ((e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet) √óÀ¢ univ) := by
  rw [(Prod.inducing_diag F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ).continuousOn_iff]
  have H‚ÇÅ : Continuous fun p : B √ó F‚ÇÅ √ó F‚ÇÇ ‚Ü¶ ((p.1, p.2.1), (p.1, p.2.2)) :=
    (continuous_id.prod_map continuous_fst).prod_mk (continuous_id.prod_map continuous_snd)
  refine' (e‚ÇÅ.continuousOn_symm.prod_map e‚ÇÇ.continuousOn_symm).comp H‚ÇÅ.continuousOn _
  exact fun x h ‚Ü¶ ‚ü®‚ü®h.1.1, mem_univ _‚ü©, ‚ü®h.1.2, mem_univ _‚ü©‚ü©
#align trivialization.prod.continuous_inv_fun Trivialization.Prod.continuous_inv_fun

variable (e‚ÇÅ e‚ÇÇ)

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for bundle types `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the induced
trivialization for the fiberwise product of `E‚ÇÅ` and `E‚ÇÇ`, whose base set is
`e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet`. -/
noncomputable def prod : Trivialization (F‚ÇÅ √ó F‚ÇÇ) (œÄ (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ)) where
  toFun := Prod.toFun' e‚ÇÅ e‚ÇÇ
  invFun := Prod.invFun' e‚ÇÅ e‚ÇÇ
  source := œÄ (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet)
  target := (e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet) √óÀ¢ Set.univ
  map_source' x h := ‚ü®h, Set.mem_univ _‚ü©
  map_target' x h := h.1
  left_inv' x := Prod.left_inv
  right_inv' x := Prod.right_inv
  open_source := by
    convert (e‚ÇÅ.open_source.prod e‚ÇÇ.open_source).preimage
        (FiberBundle.Prod.inducing_diag F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ).continuous
    ext x
    simp only [Trivialization.source_eq, mfld_simps]
  open_target := (e‚ÇÅ.open_baseSet.inter e‚ÇÇ.open_baseSet).prod isOpen_univ
  continuousOn_toFun := Prod.continuous_to_fun
  continuousOn_invFun := Prod.continuous_inv_fun
  baseSet := e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet
  open_baseSet := e‚ÇÅ.open_baseSet.inter e‚ÇÇ.open_baseSet
  source_eq := rfl
  target_eq := rfl
  proj_toFun x _ := rfl
#align trivialization.prod Trivialization.prod

@[simp]
theorem baseSet_prod : (prod e‚ÇÅ e‚ÇÇ).baseSet = e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet := rfl
#align trivialization.base_set_prod Trivialization.baseSet_prod

theorem prod_symm_apply (x : B) (w‚ÇÅ : F‚ÇÅ) (w‚ÇÇ : F‚ÇÇ) :
    (prod e‚ÇÅ e‚ÇÇ).toLocalEquiv.symm (x, w‚ÇÅ, w‚ÇÇ) = ‚ü®x, e‚ÇÅ.symm x w‚ÇÅ, e‚ÇÇ.symm x w‚ÇÇ‚ü© := rfl
#align trivialization.prod_symm_apply Trivialization.prod_symm_apply

end Trivialization

open Trivialization

variable [‚àÄ x, Zero (E‚ÇÅ x)] [‚àÄ x, Zero (E‚ÇÇ x)] [‚àÄ x : B, TopologicalSpace (E‚ÇÅ x)]
  [‚àÄ x : B, TopologicalSpace (E‚ÇÇ x)] [FiberBundle F‚ÇÅ E‚ÇÅ] [FiberBundle F‚ÇÇ E‚ÇÇ]

/-- The product of two fiber bundles is a fiber bundle. -/
noncomputable instance FiberBundle.prod : FiberBundle (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) where
  totalSpaceMk_inducing' b := by
    rw [(Prod.inducing_diag F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ).inducing_iff]
    exact (totalSpaceMk_inducing F‚ÇÅ E‚ÇÅ b).prod_map (totalSpaceMk_inducing F‚ÇÇ E‚ÇÇ b)
  trivializationAtlas' := { e |
    ‚àÉ (e‚ÇÅ : Trivialization F‚ÇÅ (œÄ F‚ÇÅ E‚ÇÅ)) (e‚ÇÇ : Trivialization F‚ÇÇ (œÄ F‚ÇÇ E‚ÇÇ))
      (_ : MemTrivializationAtlas e‚ÇÅ) (_ : MemTrivializationAtlas e‚ÇÇ),
      e = Trivialization.prod e‚ÇÅ e‚ÇÇ }
  trivializationAt' b := (trivializationAt F‚ÇÅ E‚ÇÅ b).prod (trivializationAt F‚ÇÇ E‚ÇÇ b)
  mem_baseSet_trivializationAt' b :=
    ‚ü®mem_baseSet_trivializationAt F‚ÇÅ E‚ÇÅ b, mem_baseSet_trivializationAt F‚ÇÇ E‚ÇÇ b‚ü©
  trivialization_mem_atlas' b :=
    ‚ü®trivializationAt F‚ÇÅ E‚ÇÅ b, trivializationAt F‚ÇÇ E‚ÇÇ b, inferInstance, inferInstance, rfl‚ü©
#align fiber_bundle.prod FiberBundle.prod

instance {e‚ÇÅ : Trivialization F‚ÇÅ (œÄ F‚ÇÅ E‚ÇÅ)} {e‚ÇÇ : Trivialization F‚ÇÇ (œÄ F‚ÇÇ E‚ÇÇ)}
    [MemTrivializationAtlas e‚ÇÅ] [MemTrivializationAtlas e‚ÇÇ] :
    MemTrivializationAtlas (e‚ÇÅ.prod e‚ÇÇ : Trivialization (F‚ÇÅ √ó F‚ÇÇ) (œÄ (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ))) where
  out := ‚ü®e‚ÇÅ, e‚ÇÇ, inferInstance, inferInstance, rfl‚ü©

end Prod

/-! ### Pullbacks of fiber bundles -/

section

universe u v w‚ÇÅ w‚ÇÇ U

variable {B : Type u} (F : Type v) (E : B ‚Üí Type w‚ÇÅ) {B' : Type w‚ÇÇ} (f : B' ‚Üí B)

instance [‚àÄ x : B, TopologicalSpace (E x)] : ‚àÄ x : B', TopologicalSpace ((f *·µñ E) x) := by
  -- Porting note: Original proof was `delta_instance bundle.pullback`
  intro x
  rw [Bundle.Pullback]
  infer_instance

variable [TopologicalSpace B'] [TopologicalSpace (TotalSpace F E)]

/-- Definition of `Pullback.TotalSpace.topologicalSpace`, which we make irreducible. -/
irreducible_def pullbackTopology : TopologicalSpace (TotalSpace F (f *·µñ E)) :=
  induced TotalSpace.proj ‚ÄπTopologicalSpace B'‚Ä∫ ‚äì
    induced (Pullback.lift f) ‚ÄπTopologicalSpace (TotalSpace F E)‚Ä∫
#align pullback_topology pullbackTopology

/-- The topology on the total space of a pullback bundle is the coarsest topology for which both
the projections to the base and the map to the original bundle are continuous. -/
instance Pullback.TotalSpace.topologicalSpace : TopologicalSpace (TotalSpace F (f *·µñ E)) :=
  pullbackTopology F E f
#align pullback.total_space.topological_space Pullback.TotalSpace.topologicalSpace

theorem Pullback.continuous_proj (f : B' ‚Üí B) : Continuous (œÄ F (f *·µñ E)) := by
  rw [continuous_iff_le_induced, Pullback.TotalSpace.topologicalSpace, pullbackTopology_def]
  exact inf_le_left
#align pullback.continuous_proj Pullback.continuous_proj

theorem Pullback.continuous_lift (f : B' ‚Üí B) : Continuous (@Pullback.lift B F E B' f) := by
  rw [continuous_iff_le_induced, Pullback.TotalSpace.topologicalSpace, pullbackTopology_def]
  exact inf_le_right
#align pullback.continuous_lift Pullback.continuous_lift

theorem inducing_pullbackTotalSpaceEmbedding (f : B' ‚Üí B) :
    Inducing (@pullbackTotalSpaceEmbedding B F E B' f) := by
  constructor
  simp_rw [instTopologicalSpaceProd, induced_inf, induced_compose,
    Pullback.TotalSpace.topologicalSpace, pullbackTopology_def]
  rfl
#align inducing_pullback_total_space_embedding inducing_pullbackTotalSpaceEmbedding

section FiberBundle

variable [TopologicalSpace F] [TopologicalSpace B]

theorem Pullback.continuous_totalSpaceMk [‚àÄ x, TopologicalSpace (E x)] [FiberBundle F E]
    {f : B' ‚Üí B} {x : B'} : Continuous (@TotalSpace.mk _ F (f *·µñ E) x) := by
  simp only [continuous_iff_le_induced, Pullback.TotalSpace.topologicalSpace, induced_compose,
    induced_inf, Function.comp, induced_const, top_inf_eq, pullbackTopology_def]
  exact le_of_eq (FiberBundle.totalSpaceMk_inducing F E (f x)).induced
#align pullback.continuous_total_space_mk Pullback.continuous_totalSpaceMk

variable {E F} [‚àÄ _b, Zero (E _b)] {K : Type U} [ContinuousMapClass K B' B]

-- Porting note: universe levels are explicitly provided
/-- A fiber bundle trivialization can be pulled back to a trivialization on the pullback bundle. -/
noncomputable def Trivialization.pullback (e : Trivialization F (œÄ F E)) (f : K) :
    Trivialization F (œÄ F ((f : B' ‚Üí B) *·µñ E)) where
  toFun z := (z.proj, (e (Pullback.lift f z)).2)
  invFun y := @TotalSpace.mk _ F (f *·µñ E) y.1 (e.symm (f y.1) y.2)
  source := Pullback.lift f ‚Åª¬π' e.source
  baseSet := f ‚Åª¬π' e.baseSet
  target := (f ‚Åª¬π' e.baseSet) √óÀ¢ univ
  map_source' x h := by
    simp_rw [e.source_eq, mem_preimage, Pullback.lift_proj] at h
    simp_rw [prod_mk_mem_set_prod_eq, mem_univ, and_true_iff, mem_preimage, h]
  map_target' y h := by
    rw [mem_prod, mem_preimage] at h
    simp_rw [e.source_eq, mem_preimage, Pullback.lift_proj, h.1]
  left_inv' x h := by
    simp_rw [mem_preimage, e.mem_source, Pullback.lift_proj] at h
    simp_rw [Pullback.lift, e.symm_apply_apply_mk h]
  right_inv' x h := by
    simp_rw [mem_prod, mem_preimage, mem_univ, and_true_iff] at h
    simp_rw [Pullback.lift_mk, e.apply_mk_symm h]
  open_source := by
    simp_rw [e.source_eq, ‚Üê preimage_comp]
    exact e.open_baseSet.preimage ((map_continuous f).comp <| Pullback.continuous_proj F E f)
  open_target := ((map_continuous f).isOpen_preimage _ e.open_baseSet).prod isOpen_univ
  open_baseSet := (map_continuous f).isOpen_preimage _ e.open_baseSet
  continuousOn_toFun :=
    (Pullback.continuous_proj F E f).continuousOn.prod
      (continuous_snd.comp_continuousOn <|
        e.continuousOn.comp (Pullback.continuous_lift F E f).continuousOn Subset.rfl)
  continuousOn_invFun := by
    dsimp only
    simp_rw [(inducing_pullbackTotalSpaceEmbedding F E f).continuousOn_iff, Function.comp,
      pullbackTotalSpaceEmbedding]
    refine'
      continuousOn_fst.prod
        (e.continuousOn_symm.comp ((map_continuous f).prod_map continuous_id).continuousOn
          Subset.rfl)
  source_eq := by
    dsimp only
    rw [e.source_eq]
    rfl
  target_eq := rfl
  proj_toFun y _ := rfl
#align trivialization.pullback Trivialization.pullback

noncomputable instance FiberBundle.pullback [‚àÄ x, TopologicalSpace (E x)] [FiberBundle F E]
    (f : K) : FiberBundle F ((f : B' ‚Üí B) *·µñ E) where
  totalSpaceMk_inducing' x :=
    inducing_of_inducing_compose (Pullback.continuous_totalSpaceMk F E)
      (Pullback.continuous_lift F E f) (totalSpaceMk_inducing F E (f x))
  trivializationAtlas' :=
    { ef | ‚àÉ (e : Trivialization F (œÄ F E)) (_ : MemTrivializationAtlas e), ef = e.pullback f }
  trivializationAt' x := (trivializationAt F E (f x)).pullback f
  mem_baseSet_trivializationAt' x := mem_baseSet_trivializationAt F E (f x)
  trivialization_mem_atlas' x := ‚ü®trivializationAt F E (f x), inferInstance, rfl‚ü©
#align fiber_bundle.pullback FiberBundle.pullback

end FiberBundle

end
