/-
Copyright (c) 2023 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Topology.Homeomorph.Lemmas

/-!
# Infinite Hausdorff topological spaces

In this file we prove several properties of infinite Hausdorff topological spaces.

- ``exists_seq_infinite_isOpen_pairwise_disjoint`: there exists a sequence
  of pairwise disjoint infinite open sets;
- `exists_topology_isEmbedding_nat`: there exista a topological embedding of `‚Ñï` into the space;
- `exists_infinite_discreteTopology`: there exists an infinite subset with discrete topology.
-/

open Function Filter Set Topology

variable (X : Type*) [TopologicalSpace X] [T2Space X] [Infinite X]

/-- In an infinite Hausdorff topological space, there exists a sequence of pairwise disjoint
infinite open sets. -/
theorem exists_seq_infinite_isOpen_pairwise_disjoint :
    ‚àÉ U : ‚Ñï ‚Üí Set X, (‚àÄ n, (U n).Infinite) ‚àß (‚àÄ n, IsOpen (U n)) ‚àß Pairwise (Disjoint on U) := by
  suffices ‚àÉ U : ‚Ñï ‚Üí Set X, (‚àÄ n, (U n).Nonempty) ‚àß (‚àÄ n, IsOpen (U n)) ‚àß
      Pairwise (Disjoint on U) by
    rcases this with ‚ü®U, hne, ho, hd‚ü©
    refine ‚ü®fun n ‚Ü¶ ‚ãÉ m, U (.pair n m), ?_, fun _ ‚Ü¶ isOpen_iUnion fun _ ‚Ü¶ ho _, ?_‚ü©
    ¬∑ refine fun n ‚Ü¶ infinite_iUnion fun i j hij ‚Ü¶ ?_
      suffices n.pair i = n.pair j by simpa
      apply hd.eq
      simpa [hij, onFun] using (hne _).ne_empty
    ¬∑ refine fun n n' hne ‚Ü¶ disjoint_iUnion_left.2 fun m ‚Ü¶ disjoint_iUnion_right.2 fun m' ‚Ü¶ hd ?_
      simp [hne]
  by_cases h : DiscreteTopology X
  ¬∑ refine ‚ü®fun n ‚Ü¶ {Infinite.natEmbedding X n}, fun _ ‚Ü¶ singleton_nonempty _,
      fun _ ‚Ü¶ isOpen_discrete _, fun _ _ h ‚Ü¶ ?_‚ü©
    simpa using h
  ¬∑ simp only [discreteTopology_iff_nhds_ne, not_forall, ‚Üê ne_eq, ‚Üê neBot_iff] at h
    rcases h with ‚ü®x, hx‚ü©
    suffices ‚àÉ U : ‚Ñï ‚Üí Set X, (‚àÄ n, (U n).Nonempty ‚àß IsOpen (U n) ‚àß (U n)·∂ú ‚àà ùìù x) ‚àß
        Pairwise (Disjoint on U) by
      rcases this with ‚ü®U, hU, hd‚ü©
      exact ‚ü®U, fun n ‚Ü¶ (hU n).1, fun n ‚Ü¶ (hU n).2.1, hd‚ü©
    have : IsSymm (Set X) Disjoint := ‚ü®fun _ _ h ‚Ü¶ h.symm‚ü©
    refine exists_seq_of_forall_finset_exists' (fun U : Set X ‚Ü¶ U.Nonempty ‚àß IsOpen U ‚àß U·∂ú ‚àà ùìù x)
      Disjoint fun S hS ‚Ü¶ ?_
    have : (‚ãÇ U ‚àà S, interior (U·∂ú)) \ {x} ‚àà ùìù[‚â†] x := inter_mem_inf ((biInter_finset_mem _).2
      fun U hU ‚Ü¶ interior_mem_nhds.2 (hS _ hU).2.2) (mem_principal_self _)
    rcases hx.nonempty_of_mem this with ‚ü®y, hyU, hyx : y ‚â† x‚ü©
    rcases t2_separation hyx with ‚ü®V, W, hVo, hWo, hyV, hxW, hVW‚ü©
    refine ‚ü®V ‚à© ‚ãÇ U ‚àà S, interior (U·∂ú), ‚ü®‚ü®y, hyV, hyU‚ü©, ?_, ?_‚ü©, fun U hU ‚Ü¶ ?_‚ü©
    ¬∑ exact hVo.inter (isOpen_biInter_finset fun _ _ ‚Ü¶ isOpen_interior)
    ¬∑ refine mem_of_superset (hWo.mem_nhds hxW) fun z hzW ‚ü®hzV, _‚ü© ‚Ü¶ ?_
      exact disjoint_left.1 hVW hzV hzW
    ¬∑ exact disjoint_left.2 fun z hzU ‚ü®_, hzU'‚ü© ‚Ü¶ interior_subset (mem_iInter‚ÇÇ.1 hzU' U hU) hzU

/-- If `X` is an infinite Hausdorff topological space, then there exists a topological embedding
`f : ‚Ñï ‚Üí X`.

Note: this theorem is true for an infinite KC-space but the proof in that case is different. -/
theorem exists_topology_isEmbedding_nat : ‚àÉ f : ‚Ñï ‚Üí X, IsEmbedding f := by
  rcases exists_seq_infinite_isOpen_pairwise_disjoint X with ‚ü®U, hUi, hUo, hd‚ü©
  choose f hf using fun n ‚Ü¶ (hUi n).nonempty
  refine ‚ü®f, IsInducing.isEmbedding ‚ü®Eq.symm (eq_bot_of_singletons_open fun n ‚Ü¶ ‚ü®U n, hUo n, ?_‚ü©)‚ü©‚ü©
  refine eq_singleton_iff_unique_mem.2 ‚ü®hf _, fun m hm ‚Ü¶ ?_‚ü©
  exact hd.eq (not_disjoint_iff.2 ‚ü®f m, hf _, hm‚ü©)

/-- If `X` is an infinite Hausdorff topological space, then there exists an infinite set `s : Set X`
that has the induced topology is the discrete topology. -/
theorem exists_infinite_discreteTopology : ‚àÉ s : Set X, s.Infinite ‚àß DiscreteTopology s := by
  rcases exists_topology_isEmbedding_nat X with ‚ü®f, hf‚ü©
  refine ‚ü®range f, infinite_range_of_injective hf.injective, ?_‚ü©
  exact hf.toHomeomorph.symm.isEmbedding.discreteTopology
