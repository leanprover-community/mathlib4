/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Jeremy Avigad
-/
import Mathlib.Data.Set.Finite.Basic
import Mathlib.Data.Set.Finite.Range
import Mathlib.Data.Set.Lattice
import Mathlib.Topology.Defs.Filter

/-!
# Openness and closedness of a set

This file provides lemmas relating to the predicates `IsOpen` and `IsClosed` of a set endowed with
a topology.

## Implementation notes

Topology in mathlib heavily uses filters (even more than in Bourbaki). See explanations in
<https://leanprover-community.github.io/theories/topology.html>.

## References

* [N. Bourbaki, *General Topology*][bourbaki1966]
* [I. M. James, *Topologies and Uniformities*][james1999]

## Tags

topological space
-/

open Set Filter Topology

universe u v

/-- A constructor for topologies by specifying the closed sets,
and showing that they satisfy the appropriate conditions. -/
def TopologicalSpace.ofClosed {X : Type u} (T : Set (Set X)) (empty_mem : ‚àÖ ‚àà T)
    (sInter_mem : ‚àÄ A, A ‚äÜ T ‚Üí ‚ãÇ‚ÇÄ A ‚àà T)
    (union_mem : ‚àÄ A, A ‚àà T ‚Üí ‚àÄ B, B ‚àà T ‚Üí A ‚à™ B ‚àà T) : TopologicalSpace X where
  IsOpen X := X·∂ú ‚àà T
  isOpen_univ := by simp [empty_mem]
  isOpen_inter s t hs ht := by simpa only [compl_inter] using union_mem s·∂ú hs t·∂ú ht
  isOpen_sUnion s hs := by
    simp only [Set.compl_sUnion]
    exact sInter_mem (compl '' s) fun z ‚ü®y, hy, hz‚ü© => hz ‚ñ∏ hs y hy

section TopologicalSpace

variable {X : Type u} {Œπ : Sort v} {Œ± : Type*} {x : X} {s s‚ÇÅ s‚ÇÇ t : Set X} {p p‚ÇÅ p‚ÇÇ : X ‚Üí Prop}

lemma isOpen_mk {p h‚ÇÅ h‚ÇÇ h‚ÇÉ} : IsOpen[‚ü®p, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü©] s ‚Üî p s := Iff.rfl

@[ext (iff := false)]
protected theorem TopologicalSpace.ext :
    ‚àÄ {f g : TopologicalSpace X}, IsOpen[f] = IsOpen[g] ‚Üí f = g
  | ‚ü®_, _, _, _‚ü©, ‚ü®_, _, _, _‚ü©, rfl => rfl

protected theorem TopologicalSpace.ext_iff {t t' : TopologicalSpace X} :
    t = t' ‚Üî ‚àÄ s, IsOpen[t] s ‚Üî IsOpen[t'] s :=
  ‚ü®fun h _ => h ‚ñ∏ Iff.rfl, fun h => by ext; exact h _‚ü©

theorem isOpen_fold {t : TopologicalSpace X} : t.IsOpen s = IsOpen[t] s :=
  rfl

variable [TopologicalSpace X]

theorem isOpen_iUnion {f : Œπ ‚Üí Set X} (h : ‚àÄ i, IsOpen (f i)) : IsOpen (‚ãÉ i, f i) :=
  isOpen_sUnion (forall_mem_range.2 h)

theorem isOpen_biUnion {s : Set Œ±} {f : Œ± ‚Üí Set X} (h : ‚àÄ i ‚àà s, IsOpen (f i)) :
    IsOpen (‚ãÉ i ‚àà s, f i) :=
  isOpen_iUnion fun i => isOpen_iUnion fun hi => h i hi

theorem IsOpen.union (h‚ÇÅ : IsOpen s‚ÇÅ) (h‚ÇÇ : IsOpen s‚ÇÇ) : IsOpen (s‚ÇÅ ‚à™ s‚ÇÇ) := by
  rw [union_eq_iUnion]; exact isOpen_iUnion (Bool.forall_bool.2 ‚ü®h‚ÇÇ, h‚ÇÅ‚ü©)

lemma isOpen_iff_of_cover {f : Œ± ‚Üí Set X} (ho : ‚àÄ i, IsOpen (f i)) (hU : (‚ãÉ i, f i) = univ) :
    IsOpen s ‚Üî ‚àÄ i, IsOpen (f i ‚à© s) := by
  refine ‚ü®fun h i ‚Ü¶ (ho i).inter h, fun h ‚Ü¶ ?_‚ü©
  rw [‚Üê s.inter_univ, inter_comm, ‚Üê hU, iUnion_inter]
  exact isOpen_iUnion fun i ‚Ü¶ h i

@[simp] theorem isOpen_empty : IsOpen (‚àÖ : Set X) := by
  rw [‚Üê sUnion_empty]; exact isOpen_sUnion fun a => False.elim

theorem Set.Finite.isOpen_sInter {s : Set (Set X)} (hs : s.Finite) (h : ‚àÄ t ‚àà s, IsOpen t) :
    IsOpen (‚ãÇ‚ÇÄ s) := by
  induction s, hs using Set.Finite.induction_on with
  | empty => rw [sInter_empty]; exact isOpen_univ
  | insert _ _ ih =>
    simp only [sInter_insert, forall_mem_insert] at h ‚ä¢
    exact h.1.inter (ih h.2)

theorem Set.Finite.isOpen_biInter {s : Set Œ±} {f : Œ± ‚Üí Set X} (hs : s.Finite)
    (h : ‚àÄ i ‚àà s, IsOpen (f i)) :
    IsOpen (‚ãÇ i ‚àà s, f i) :=
  sInter_image f s ‚ñ∏ (hs.image _).isOpen_sInter (forall_mem_image.2 h)

theorem isOpen_iInter_of_finite [Finite Œπ] {s : Œπ ‚Üí Set X} (h : ‚àÄ i, IsOpen (s i)) :
    IsOpen (‚ãÇ i, s i) :=
  (finite_range _).isOpen_sInter (forall_mem_range.2 h)

theorem isOpen_biInter_finset {s : Finset Œ±} {f : Œ± ‚Üí Set X} (h : ‚àÄ i ‚àà s, IsOpen (f i)) :
    IsOpen (‚ãÇ i ‚àà s, f i) :=
  s.finite_toSet.isOpen_biInter h

@[simp]
theorem isOpen_const {p : Prop} : IsOpen { _x : X | p } := by by_cases p <;> simp [*]

theorem IsOpen.and : IsOpen { x | p‚ÇÅ x } ‚Üí IsOpen { x | p‚ÇÇ x } ‚Üí IsOpen { x | p‚ÇÅ x ‚àß p‚ÇÇ x } :=
  IsOpen.inter

@[simp] theorem isOpen_compl_iff : IsOpen s·∂ú ‚Üî IsClosed s :=
  ‚ü®fun h => ‚ü®h‚ü©, fun h => h.isOpen_compl‚ü©

theorem TopologicalSpace.ext_iff_isClosed {X} {t‚ÇÅ t‚ÇÇ : TopologicalSpace X} :
    t‚ÇÅ = t‚ÇÇ ‚Üî ‚àÄ s, IsClosed[t‚ÇÅ] s ‚Üî IsClosed[t‚ÇÇ] s := by
  rw [TopologicalSpace.ext_iff, compl_surjective.forall]
  simp only [@isOpen_compl_iff _ _ t‚ÇÅ, @isOpen_compl_iff _ _ t‚ÇÇ]

alias ‚ü®_, TopologicalSpace.ext_isClosed‚ü© := TopologicalSpace.ext_iff_isClosed

theorem isClosed_const {p : Prop} : IsClosed { _x : X | p } := ‚ü®isOpen_const (p := ¬¨p)‚ü©

@[simp] theorem isClosed_empty : IsClosed (‚àÖ : Set X) := isClosed_const

@[simp] theorem isClosed_univ : IsClosed (univ : Set X) := isClosed_const

lemma IsOpen.isLocallyClosed (hs : IsOpen s) : IsLocallyClosed s :=
  ‚ü®_, _, hs, isClosed_univ, (inter_univ _).symm‚ü©

lemma IsClosed.isLocallyClosed (hs : IsClosed s) : IsLocallyClosed s :=
  ‚ü®_, _, isOpen_univ, hs, (univ_inter _).symm‚ü©

theorem IsClosed.union : IsClosed s‚ÇÅ ‚Üí IsClosed s‚ÇÇ ‚Üí IsClosed (s‚ÇÅ ‚à™ s‚ÇÇ) := by
  simpa only [‚Üê isOpen_compl_iff, compl_union] using IsOpen.inter

theorem isClosed_sInter {s : Set (Set X)} : (‚àÄ t ‚àà s, IsClosed t) ‚Üí IsClosed (‚ãÇ‚ÇÄ s) := by
  simpa only [‚Üê isOpen_compl_iff, compl_sInter, sUnion_image] using isOpen_biUnion

theorem isClosed_iInter {f : Œπ ‚Üí Set X} (h : ‚àÄ i, IsClosed (f i)) : IsClosed (‚ãÇ i, f i) :=
  isClosed_sInter <| forall_mem_range.2 h

theorem isClosed_biInter {s : Set Œ±} {f : Œ± ‚Üí Set X} (h : ‚àÄ i ‚àà s, IsClosed (f i)) :
    IsClosed (‚ãÇ i ‚àà s, f i) :=
  isClosed_iInter fun i => isClosed_iInter <| h i

@[simp]
theorem isClosed_compl_iff {s : Set X} : IsClosed s·∂ú ‚Üî IsOpen s := by
  rw [‚Üê isOpen_compl_iff, compl_compl]

alias ‚ü®_, IsOpen.isClosed_compl‚ü© := isClosed_compl_iff

theorem IsOpen.sdiff (h‚ÇÅ : IsOpen s) (h‚ÇÇ : IsClosed t) : IsOpen (s \ t) :=
  IsOpen.inter h‚ÇÅ h‚ÇÇ.isOpen_compl

theorem IsClosed.inter (h‚ÇÅ : IsClosed s‚ÇÅ) (h‚ÇÇ : IsClosed s‚ÇÇ) : IsClosed (s‚ÇÅ ‚à© s‚ÇÇ) := by
  rw [‚Üê isOpen_compl_iff] at *
  rw [compl_inter]
  exact IsOpen.union h‚ÇÅ h‚ÇÇ

theorem IsClosed.sdiff (h‚ÇÅ : IsClosed s) (h‚ÇÇ : IsOpen t) : IsClosed (s \ t) :=
  IsClosed.inter h‚ÇÅ (isClosed_compl_iff.mpr h‚ÇÇ)

theorem Set.Finite.isClosed_biUnion {s : Set Œ±} {f : Œ± ‚Üí Set X} (hs : s.Finite)
    (h : ‚àÄ i ‚àà s, IsClosed (f i)) :
    IsClosed (‚ãÉ i ‚àà s, f i) := by
  simp only [‚Üê isOpen_compl_iff, compl_iUnion] at *
  exact hs.isOpen_biInter h

lemma isClosed_biUnion_finset {s : Finset Œ±} {f : Œ± ‚Üí Set X} (h : ‚àÄ i ‚àà s, IsClosed (f i)) :
    IsClosed (‚ãÉ i ‚àà s, f i) :=
  s.finite_toSet.isClosed_biUnion h

theorem isClosed_iUnion_of_finite [Finite Œπ] {s : Œπ ‚Üí Set X} (h : ‚àÄ i, IsClosed (s i)) :
    IsClosed (‚ãÉ i, s i) := by
  simp only [‚Üê isOpen_compl_iff, compl_iUnion] at *
  exact isOpen_iInter_of_finite h

theorem isClosed_imp {p q : X ‚Üí Prop} (hp : IsOpen { x | p x }) (hq : IsClosed { x | q x }) :
    IsClosed { x | p x ‚Üí q x } := by
  simpa only [imp_iff_not_or] using hp.isClosed_compl.union hq

theorem IsClosed.not : IsClosed { a | p a } ‚Üí IsOpen { a | ¬¨p a } :=
  isOpen_compl_iff.mpr

/-!
### Limits of filters in topological spaces

In this section we define functions that return a limit of a filter (or of a function along a
filter), if it exists, and a random point otherwise. These functions are rarely used in Mathlib,
most of the theorems are written using `Filter.Tendsto`. One of the reasons is that
`Filter.limUnder f g = x` is not equivalent to `Filter.Tendsto g f (ùìù x)` unless the codomain is a
Hausdorff space and `g` has a limit along `f`.
-/

section lim

/-- If a filter `f` is majorated by some `ùìù x`, then it is majorated by `ùìù (Filter.lim f)`. We
formulate this lemma with a `[Nonempty X]` argument of `lim` derived from `h` to make it useful for
types without a `[Nonempty X]` instance. Because of the built-in proof irrelevance, Lean will unify
this instance with any other instance. -/
theorem le_nhds_lim {f : Filter X} (h : ‚àÉ x, f ‚â§ ùìù x) : f ‚â§ ùìù (@lim _ _ h.nonempty f) :=
  Classical.epsilon_spec h

/-- If `g` tends to some `ùìù x` along `f`, then it tends to `ùìù (Filter.limUnder f g)`. We formulate
this lemma with a `[Nonempty X]` argument of `lim` derived from `h` to make it useful for types
without a `[Nonempty X]` instance. Because of the built-in proof irrelevance, Lean will unify this
instance with any other instance. -/
theorem tendsto_nhds_limUnder {f : Filter Œ±} {g : Œ± ‚Üí X} (h : ‚àÉ x, Tendsto g f (ùìù x)) :
    Tendsto g f (ùìù (@limUnder _ _ _ h.nonempty f g)) :=
  le_nhds_lim h

theorem limUnder_of_not_tendsto [hX : Nonempty X] {f : Filter Œ±} {g : Œ± ‚Üí X}
    (h : ¬¨ ‚àÉ x, Tendsto g f (ùìù x)) :
    limUnder f g = Classical.choice hX := by
  simp_rw [Tendsto] at h
  simp_rw [limUnder, lim, Classical.epsilon, Classical.strongIndefiniteDescription, dif_neg h]

end lim

end TopologicalSpace
