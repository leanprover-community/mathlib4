/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Jeremy Avigad
-/
import Mathlib.Algebra.Function.Support
import Mathlib.Order.Filter.Lift
import Mathlib.Topology.Defs.Filter

#align_import topology.basic from "leanprover-community/mathlib"@"e354e865255654389cc46e6032160238df2e0f40"

/-!
# Basic theory of topological spaces.

The main definition is the type class `TopologicalSpace X` which endows a type `X` with a topology.
Then `Set X` gets predicates `IsOpen`, `IsClosed` and functions `interior`, `closure` and
`frontier`. Each point `x` of `X` gets a neighborhood filter `ùìù x`. A filter `F` on `X` has
`x` as a cluster point if `ClusterPt x F : ùìù x ‚äì F ‚â† ‚ä•`. A map `f : Œ± ‚Üí X` clusters at `x`
along `F : Filter Œ±` if `MapClusterPt x F f : ClusterPt x (map f F)`. In particular
the notion of cluster point of a sequence `u` is `MapClusterPt x atTop u`.

For topological spaces `X` and `Y`, a function `f : X ‚Üí Y` and a point `x : X`,
`ContinuousAt f x` means `f` is continuous at `x`, and global continuity is
`Continuous f`. There is also a version of continuity `PContinuous` for
partially defined functions.

## Notation

The following notation is introduced elsewhere and it heavily used in this file.

* `ùìù x`: the filter `nhds x` of neighborhoods of a point `x`;
* `ùìü s`: the principal filter of a set `s`;
* `ùìù[s] x`: the filter `nhdsWithin x s` of neighborhoods of a point `x` within a set `s`;
* `ùìù[‚â†] x`: the filter `nhdsWithin x {x}·∂ú` of punctured neighborhoods of `x`.

## Implementation notes

Topology in mathlib heavily uses filters (even more than in Bourbaki). See explanations in
<https://leanprover-community.github.io/theories/topology.html>.

## References

* [N. Bourbaki, *General Topology*][bourbaki1966]
* [I. M. James, *Topologies and Uniformities*][james1999]

## Tags

topological space, interior, closure, frontier, neighborhood, continuity, continuous function
-/

noncomputable section

open Set Filter

universe u v w x

/-!
### Topological spaces
-/

/-- A constructor for topologies by specifying the closed sets,
and showing that they satisfy the appropriate conditions. -/
def TopologicalSpace.ofClosed {X : Type u} (T : Set (Set X)) (empty_mem : ‚àÖ ‚àà T)
    (sInter_mem : ‚àÄ A, A ‚äÜ T ‚Üí ‚ãÇ‚ÇÄ A ‚àà T)
    (union_mem : ‚àÄ A, A ‚àà T ‚Üí ‚àÄ B, B ‚àà T ‚Üí A ‚à™ B ‚àà T) : TopologicalSpace X where
  IsOpen X := X·∂ú ‚àà T
  isOpen_univ := by simp [empty_mem]
  isOpen_inter s t hs ht := by simpa only [compl_inter] using union_mem s·∂ú hs t·∂ú ht
  isOpen_sUnion s hs := by
    simp only [Set.compl_sUnion]
    exact sInter_mem (compl '' s) fun z ‚ü®y, hy, hz‚ü© => hz ‚ñ∏ hs y hy
#align topological_space.of_closed TopologicalSpace.ofClosed

section TopologicalSpace

variable {X : Type u} {Y : Type v} {Œπ : Sort w} {Œ± Œ≤ : Type*}
  {x : X} {s s‚ÇÅ s‚ÇÇ t : Set X} {p p‚ÇÅ p‚ÇÇ : X ‚Üí Prop}

open Topology

lemma isOpen_mk {p h‚ÇÅ h‚ÇÇ h‚ÇÉ} : IsOpen[‚ü®p, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü©] s ‚Üî p s := Iff.rfl
#align is_open_mk isOpen_mk

@[ext]
protected theorem TopologicalSpace.ext :
    ‚àÄ {f g : TopologicalSpace X}, IsOpen[f] = IsOpen[g] ‚Üí f = g
  | ‚ü®_, _, _, _‚ü©, ‚ü®_, _, _, _‚ü©, rfl => rfl
#align topological_space_eq TopologicalSpace.ext

section

variable [TopologicalSpace X]

end

protected theorem TopologicalSpace.ext_iff {t t' : TopologicalSpace X} :
    t = t' ‚Üî ‚àÄ s, IsOpen[t] s ‚Üî IsOpen[t'] s :=
  ‚ü®fun h s => h ‚ñ∏ Iff.rfl, fun h => by ext; exact h _‚ü©
#align topological_space_eq_iff TopologicalSpace.ext_iff

theorem isOpen_fold {t : TopologicalSpace X} : t.IsOpen s = IsOpen[t] s :=
  rfl
#align is_open_fold isOpen_fold

variable [TopologicalSpace X]

theorem isOpen_iUnion {f : Œπ ‚Üí Set X} (h : ‚àÄ i, IsOpen (f i)) : IsOpen (‚ãÉ i, f i) :=
  isOpen_sUnion (forall_mem_range.2 h)
#align is_open_Union isOpen_iUnion

theorem isOpen_biUnion {s : Set Œ±} {f : Œ± ‚Üí Set X} (h : ‚àÄ i ‚àà s, IsOpen (f i)) :
    IsOpen (‚ãÉ i ‚àà s, f i) :=
  isOpen_iUnion fun i => isOpen_iUnion fun hi => h i hi
#align is_open_bUnion isOpen_biUnion

theorem IsOpen.union (h‚ÇÅ : IsOpen s‚ÇÅ) (h‚ÇÇ : IsOpen s‚ÇÇ) : IsOpen (s‚ÇÅ ‚à™ s‚ÇÇ) := by
  rw [union_eq_iUnion]; exact isOpen_iUnion (Bool.forall_bool.2 ‚ü®h‚ÇÇ, h‚ÇÅ‚ü©)
#align is_open.union IsOpen.union

lemma isOpen_iff_of_cover {f : Œ± ‚Üí Set X} (ho : ‚àÄ i, IsOpen (f i)) (hU : (‚ãÉ i, f i) = univ) :
    IsOpen s ‚Üî ‚àÄ i, IsOpen (f i ‚à© s) := by
  refine ‚ü®fun h i ‚Ü¶ (ho i).inter h, fun h ‚Ü¶ ?_‚ü©
  rw [‚Üê s.inter_univ, inter_comm, ‚Üê hU, iUnion_inter]
  exact isOpen_iUnion fun i ‚Ü¶ h i

@[simp] theorem isOpen_empty : IsOpen (‚àÖ : Set X) := by
  rw [‚Üê sUnion_empty]; exact isOpen_sUnion fun a => False.elim
#align is_open_empty isOpen_empty

theorem Set.Finite.isOpen_sInter {s : Set (Set X)} (hs : s.Finite) :
    (‚àÄ t ‚àà s, IsOpen t) ‚Üí IsOpen (‚ãÇ‚ÇÄ s) :=
  Finite.induction_on hs (fun _ => by rw [sInter_empty]; exact isOpen_univ) fun _ _ ih h => by
    simp only [sInter_insert, ball_insert_iff] at h ‚ä¢
    exact h.1.inter (ih h.2)
#align is_open_sInter Set.Finite.isOpen_sInter

theorem Set.Finite.isOpen_biInter {s : Set Œ±} {f : Œ± ‚Üí Set X} (hs : s.Finite)
    (h : ‚àÄ i ‚àà s, IsOpen (f i)) :
    IsOpen (‚ãÇ i ‚àà s, f i) :=
  sInter_image f s ‚ñ∏ (hs.image _).isOpen_sInter (forall_mem_image.2 h)
#align is_open_bInter Set.Finite.isOpen_biInter

theorem isOpen_iInter_of_finite [Finite Œπ] {s : Œπ ‚Üí Set X} (h : ‚àÄ i, IsOpen (s i)) :
    IsOpen (‚ãÇ i, s i) :=
  (finite_range _).isOpen_sInter  (forall_mem_range.2 h)
#align is_open_Inter isOpen_iInter_of_finite

theorem isOpen_biInter_finset {s : Finset Œ±} {f : Œ± ‚Üí Set X} (h : ‚àÄ i ‚àà s, IsOpen (f i)) :
    IsOpen (‚ãÇ i ‚àà s, f i) :=
  s.finite_toSet.isOpen_biInter h
#align is_open_bInter_finset isOpen_biInter_finset

@[simp] -- Porting note: added `simp`
theorem isOpen_const {p : Prop} : IsOpen { _x : X | p } := by by_cases p <;> simp [*]
#align is_open_const isOpen_const

theorem IsOpen.and : IsOpen { x | p‚ÇÅ x } ‚Üí IsOpen { x | p‚ÇÇ x } ‚Üí IsOpen { x | p‚ÇÅ x ‚àß p‚ÇÇ x } :=
  IsOpen.inter
#align is_open.and IsOpen.and

@[simp] theorem isOpen_compl_iff : IsOpen s·∂ú ‚Üî IsClosed s :=
  ‚ü®fun h => ‚ü®h‚ü©, fun h => h.isOpen_compl‚ü©
#align is_open_compl_iff isOpen_compl_iff

theorem TopologicalSpace.ext_iff_isClosed {t‚ÇÅ t‚ÇÇ : TopologicalSpace X} :
    t‚ÇÅ = t‚ÇÇ ‚Üî ‚àÄ s, IsClosed[t‚ÇÅ] s ‚Üî IsClosed[t‚ÇÇ] s := by
  rw [TopologicalSpace.ext_iff, compl_surjective.forall]
  simp only [@isOpen_compl_iff _ _ t‚ÇÅ, @isOpen_compl_iff _ _ t‚ÇÇ]

alias ‚ü®_, TopologicalSpace.ext_isClosed‚ü© := TopologicalSpace.ext_iff_isClosed

-- Porting note (#10756): new lemma
theorem isClosed_const {p : Prop} : IsClosed { _x : X | p } := ‚ü®isOpen_const (p := ¬¨p)‚ü©

@[simp] theorem isClosed_empty : IsClosed (‚àÖ : Set X) := isClosed_const
#align is_closed_empty isClosed_empty

@[simp] theorem isClosed_univ : IsClosed (univ : Set X) := isClosed_const
#align is_closed_univ isClosed_univ

theorem IsClosed.union : IsClosed s‚ÇÅ ‚Üí IsClosed s‚ÇÇ ‚Üí IsClosed (s‚ÇÅ ‚à™ s‚ÇÇ) := by
  simpa only [‚Üê isOpen_compl_iff, compl_union] using IsOpen.inter
#align is_closed.union IsClosed.union

theorem isClosed_sInter {s : Set (Set X)} : (‚àÄ t ‚àà s, IsClosed t) ‚Üí IsClosed (‚ãÇ‚ÇÄ s) := by
  simpa only [‚Üê isOpen_compl_iff, compl_sInter, sUnion_image] using isOpen_biUnion
#align is_closed_sInter isClosed_sInter

theorem isClosed_iInter {f : Œπ ‚Üí Set X} (h : ‚àÄ i, IsClosed (f i)) : IsClosed (‚ãÇ i, f i) :=
  isClosed_sInter <| forall_mem_range.2 h
#align is_closed_Inter isClosed_iInter

theorem isClosed_biInter {s : Set Œ±} {f : Œ± ‚Üí Set X} (h : ‚àÄ i ‚àà s, IsClosed (f i)) :
    IsClosed (‚ãÇ i ‚àà s, f i) :=
  isClosed_iInter fun i => isClosed_iInter <| h i
#align is_closed_bInter isClosed_biInter

@[simp]
theorem isClosed_compl_iff {s : Set X} : IsClosed s·∂ú ‚Üî IsOpen s := by
  rw [‚Üê isOpen_compl_iff, compl_compl]
#align is_closed_compl_iff isClosed_compl_iff

alias ‚ü®_, IsOpen.isClosed_compl‚ü© := isClosed_compl_iff
#align is_open.is_closed_compl IsOpen.isClosed_compl

theorem IsOpen.sdiff (h‚ÇÅ : IsOpen s) (h‚ÇÇ : IsClosed t) : IsOpen (s \ t) :=
  IsOpen.inter h‚ÇÅ h‚ÇÇ.isOpen_compl
#align is_open.sdiff IsOpen.sdiff

theorem IsClosed.inter (h‚ÇÅ : IsClosed s‚ÇÅ) (h‚ÇÇ : IsClosed s‚ÇÇ) : IsClosed (s‚ÇÅ ‚à© s‚ÇÇ) := by
  rw [‚Üê isOpen_compl_iff] at *
  rw [compl_inter]
  exact IsOpen.union h‚ÇÅ h‚ÇÇ
#align is_closed.inter IsClosed.inter

theorem IsClosed.sdiff (h‚ÇÅ : IsClosed s) (h‚ÇÇ : IsOpen t) : IsClosed (s \ t) :=
  IsClosed.inter h‚ÇÅ (isClosed_compl_iff.mpr h‚ÇÇ)
#align is_closed.sdiff IsClosed.sdiff

theorem Set.Finite.isClosed_biUnion {s : Set Œ±} {f : Œ± ‚Üí Set X} (hs : s.Finite)
    (h : ‚àÄ i ‚àà s, IsClosed (f i)) :
    IsClosed (‚ãÉ i ‚àà s, f i) := by
  simp only [‚Üê isOpen_compl_iff, compl_iUnion] at *
  exact hs.isOpen_biInter h
#align is_closed_bUnion Set.Finite.isClosed_biUnion

lemma isClosed_biUnion_finset {s : Finset Œ±} {f : Œ± ‚Üí Set X} (h : ‚àÄ i ‚àà s, IsClosed (f i)) :
    IsClosed (‚ãÉ i ‚àà s, f i) :=
  s.finite_toSet.isClosed_biUnion h

theorem isClosed_iUnion_of_finite [Finite Œπ] {s : Œπ ‚Üí Set X} (h : ‚àÄ i, IsClosed (s i)) :
    IsClosed (‚ãÉ i, s i) := by
  simp only [‚Üê isOpen_compl_iff, compl_iUnion] at *
  exact isOpen_iInter_of_finite h
#align is_closed_Union isClosed_iUnion_of_finite

theorem isClosed_imp {p q : X ‚Üí Prop} (hp : IsOpen { x | p x }) (hq : IsClosed { x | q x }) :
    IsClosed { x | p x ‚Üí q x } := by
  simpa only [imp_iff_not_or] using hp.isClosed_compl.union hq
#align is_closed_imp isClosed_imp

theorem IsClosed.not : IsClosed { a | p a } ‚Üí IsOpen { a | ¬¨p a } :=
  isOpen_compl_iff.mpr
#align is_closed.not IsClosed.not

/-!
### Interior of a set
-/

-- Porting note: use `‚àÉ t, t ‚äÜ s ‚àß _` instead of `‚àÉ t ‚äÜ s, _`
theorem mem_interior : x ‚àà interior s ‚Üî ‚àÉ t, t ‚äÜ s ‚àß IsOpen t ‚àß x ‚àà t := by
  simp only [interior, mem_sUnion, mem_setOf_eq, and_assoc, and_left_comm]
#align mem_interior mem_interior‚Çì

@[simp]
theorem isOpen_interior : IsOpen (interior s) :=
  isOpen_sUnion fun _ => And.left
#align is_open_interior isOpen_interior

theorem interior_subset : interior s ‚äÜ s :=
  sUnion_subset fun _ => And.right
#align interior_subset interior_subset

theorem interior_maximal (h‚ÇÅ : t ‚äÜ s) (h‚ÇÇ : IsOpen t) : t ‚äÜ interior s :=
  subset_sUnion_of_mem ‚ü®h‚ÇÇ, h‚ÇÅ‚ü©
#align interior_maximal interior_maximal

theorem IsOpen.interior_eq (h : IsOpen s) : interior s = s :=
  interior_subset.antisymm (interior_maximal (Subset.refl s) h)
#align is_open.interior_eq IsOpen.interior_eq

theorem interior_eq_iff_isOpen : interior s = s ‚Üî IsOpen s :=
  ‚ü®fun h => h ‚ñ∏ isOpen_interior, IsOpen.interior_eq‚ü©
#align interior_eq_iff_is_open interior_eq_iff_isOpen

theorem subset_interior_iff_isOpen : s ‚äÜ interior s ‚Üî IsOpen s := by
  simp only [interior_eq_iff_isOpen.symm, Subset.antisymm_iff, interior_subset, true_and]
#align subset_interior_iff_is_open subset_interior_iff_isOpen

theorem IsOpen.subset_interior_iff (h‚ÇÅ : IsOpen s) : s ‚äÜ interior t ‚Üî s ‚äÜ t :=
  ‚ü®fun h => Subset.trans h interior_subset, fun h‚ÇÇ => interior_maximal h‚ÇÇ h‚ÇÅ‚ü©
#align is_open.subset_interior_iff IsOpen.subset_interior_iff

theorem subset_interior_iff : t ‚äÜ interior s ‚Üî ‚àÉ U, IsOpen U ‚àß t ‚äÜ U ‚àß U ‚äÜ s :=
  ‚ü®fun h => ‚ü®interior s, isOpen_interior, h, interior_subset‚ü©, fun ‚ü®_U, hU, htU, hUs‚ü© =>
    htU.trans (interior_maximal hUs hU)‚ü©
#align subset_interior_iff subset_interior_iff

lemma interior_subset_iff : interior s ‚äÜ t ‚Üî ‚àÄ U, IsOpen U ‚Üí U ‚äÜ s ‚Üí U ‚äÜ t := by
  simp [interior]

@[mono, gcongr]
theorem interior_mono (h : s ‚äÜ t) : interior s ‚äÜ interior t :=
  interior_maximal (Subset.trans interior_subset h) isOpen_interior
#align interior_mono interior_mono

@[simp]
theorem interior_empty : interior (‚àÖ : Set X) = ‚àÖ :=
  isOpen_empty.interior_eq
#align interior_empty interior_empty

@[simp]
theorem interior_univ : interior (univ : Set X) = univ :=
  isOpen_univ.interior_eq
#align interior_univ interior_univ

@[simp]
theorem interior_eq_univ : interior s = univ ‚Üî s = univ :=
  ‚ü®fun h => univ_subset_iff.mp <| h.symm.trans_le interior_subset, fun h => h.symm ‚ñ∏ interior_univ‚ü©
#align interior_eq_univ interior_eq_univ

@[simp]
theorem interior_interior : interior (interior s) = interior s :=
  isOpen_interior.interior_eq
#align interior_interior interior_interior

@[simp]
theorem interior_inter : interior (s ‚à© t) = interior s ‚à© interior t :=
  (Monotone.map_inf_le (fun _ _ ‚Ü¶ interior_mono) s t).antisymm <|
    interior_maximal (inter_subset_inter interior_subset interior_subset) <|
      isOpen_interior.inter isOpen_interior
#align interior_inter interior_inter

theorem Set.Finite.interior_biInter {Œπ : Type*} {s : Set Œπ} (hs : s.Finite) (f : Œπ ‚Üí Set X) :
    interior (‚ãÇ i ‚àà s, f i) = ‚ãÇ i ‚àà s, interior (f i) :=
  hs.induction_on (by simp) <| by intros; simp [*]

theorem Set.Finite.interior_sInter {S : Set (Set X)} (hS : S.Finite) :
    interior (‚ãÇ‚ÇÄ S) = ‚ãÇ s ‚àà S, interior s := by
  rw [sInter_eq_biInter, hS.interior_biInter]

@[simp]
theorem Finset.interior_iInter {Œπ : Type*} (s : Finset Œπ) (f : Œπ ‚Üí Set X) :
    interior (‚ãÇ i ‚àà s, f i) = ‚ãÇ i ‚àà s, interior (f i) :=
  s.finite_toSet.interior_biInter f
#align finset.interior_Inter Finset.interior_iInter

@[simp]
theorem interior_iInter_of_finite [Finite Œπ] (f : Œπ ‚Üí Set X) :
    interior (‚ãÇ i, f i) = ‚ãÇ i, interior (f i) := by
  rw [‚Üê sInter_range, (finite_range f).interior_sInter, biInter_range]
#align interior_Inter interior_iInter_of_finite

theorem interior_union_isClosed_of_interior_empty (h‚ÇÅ : IsClosed s)
    (h‚ÇÇ : interior t = ‚àÖ) : interior (s ‚à™ t) = interior s :=
  have : interior (s ‚à™ t) ‚äÜ s := fun x ‚ü®u, ‚ü®(hu‚ÇÅ : IsOpen u), (hu‚ÇÇ : u ‚äÜ s ‚à™ t)‚ü©, (hx‚ÇÅ : x ‚àà u)‚ü© =>
    by_contradiction fun hx‚ÇÇ : x ‚àâ s =>
      have : u \ s ‚äÜ t := fun x ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© => Or.resolve_left (hu‚ÇÇ h‚ÇÅ) h‚ÇÇ
      have : u \ s ‚äÜ interior t := by rwa [(IsOpen.sdiff hu‚ÇÅ h‚ÇÅ).subset_interior_iff]
      have : u \ s ‚äÜ ‚àÖ := by rwa [h‚ÇÇ] at this
      this ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©
  Subset.antisymm (interior_maximal this isOpen_interior) (interior_mono <| subset_union_left _ _)
#align interior_union_is_closed_of_interior_empty interior_union_isClosed_of_interior_empty

theorem isOpen_iff_forall_mem_open : IsOpen s ‚Üî ‚àÄ x ‚àà s, ‚àÉ t, t ‚äÜ s ‚àß IsOpen t ‚àß x ‚àà t := by
  rw [‚Üê subset_interior_iff_isOpen]
  simp only [subset_def, mem_interior]
#align is_open_iff_forall_mem_open isOpen_iff_forall_mem_open

theorem interior_iInter_subset (s : Œπ ‚Üí Set X) : interior (‚ãÇ i, s i) ‚äÜ ‚ãÇ i, interior (s i) :=
  subset_iInter fun _ => interior_mono <| iInter_subset _ _
#align interior_Inter_subset interior_iInter_subset

theorem interior_iInter‚ÇÇ_subset (p : Œπ ‚Üí Sort*) (s : ‚àÄ i, p i ‚Üí Set X) :
    interior (‚ãÇ (i) (j), s i j) ‚äÜ ‚ãÇ (i) (j), interior (s i j) :=
  (interior_iInter_subset _).trans <| iInter_mono fun _ => interior_iInter_subset _
#align interior_Inter‚ÇÇ_subset interior_iInter‚ÇÇ_subset

theorem interior_sInter_subset (S : Set (Set X)) : interior (‚ãÇ‚ÇÄ S) ‚äÜ ‚ãÇ s ‚àà S, interior s :=
  calc
    interior (‚ãÇ‚ÇÄ S) = interior (‚ãÇ s ‚àà S, s) := by rw [sInter_eq_biInter]
    _ ‚äÜ ‚ãÇ s ‚àà S, interior s := interior_iInter‚ÇÇ_subset _ _
#align interior_sInter_subset interior_sInter_subset

theorem Filter.HasBasis.lift'_interior {l : Filter X} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set X}
    (h : l.HasBasis p s) : (l.lift' interior).HasBasis p fun i => interior (s i) :=
  h.lift' fun _ _ ‚Ü¶ interior_mono

theorem Filter.lift'_interior_le (l : Filter X) : l.lift' interior ‚â§ l := fun _s hs ‚Ü¶
  mem_of_superset (mem_lift' hs) interior_subset

theorem Filter.HasBasis.lift'_interior_eq_self {l : Filter X} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set X}
    (h : l.HasBasis p s) (ho : ‚àÄ i, p i ‚Üí IsOpen (s i)) : l.lift' interior = l :=
  le_antisymm l.lift'_interior_le <| h.lift'_interior.ge_iff.2 fun i hi ‚Ü¶ by
    simpa only [(ho i hi).interior_eq] using h.mem_of_mem hi

/-!
### Closure of a set
-/

@[simp]
theorem isClosed_closure : IsClosed (closure s) :=
  isClosed_sInter fun _ => And.left
#align is_closed_closure isClosed_closure

theorem subset_closure : s ‚äÜ closure s :=
  subset_sInter fun _ => And.right
#align subset_closure subset_closure

theorem not_mem_of_not_mem_closure {P : X} (hP : P ‚àâ closure s) : P ‚àâ s := fun h =>
  hP (subset_closure h)
#align not_mem_of_not_mem_closure not_mem_of_not_mem_closure

theorem closure_minimal (h‚ÇÅ : s ‚äÜ t) (h‚ÇÇ : IsClosed t) : closure s ‚äÜ t :=
  sInter_subset_of_mem ‚ü®h‚ÇÇ, h‚ÇÅ‚ü©
#align closure_minimal closure_minimal

theorem Disjoint.closure_left (hd : Disjoint s t) (ht : IsOpen t) :
    Disjoint (closure s) t :=
  disjoint_compl_left.mono_left <| closure_minimal hd.subset_compl_right ht.isClosed_compl
#align disjoint.closure_left Disjoint.closure_left

theorem Disjoint.closure_right (hd : Disjoint s t) (hs : IsOpen s) :
    Disjoint s (closure t) :=
  (hd.symm.closure_left hs).symm
#align disjoint.closure_right Disjoint.closure_right

theorem IsClosed.closure_eq (h : IsClosed s) : closure s = s :=
  Subset.antisymm (closure_minimal (Subset.refl s) h) subset_closure
#align is_closed.closure_eq IsClosed.closure_eq

theorem IsClosed.closure_subset (hs : IsClosed s) : closure s ‚äÜ s :=
  closure_minimal (Subset.refl _) hs
#align is_closed.closure_subset IsClosed.closure_subset

theorem IsClosed.closure_subset_iff (h‚ÇÅ : IsClosed t) : closure s ‚äÜ t ‚Üî s ‚äÜ t :=
  ‚ü®Subset.trans subset_closure, fun h => closure_minimal h h‚ÇÅ‚ü©
#align is_closed.closure_subset_iff IsClosed.closure_subset_iff

theorem IsClosed.mem_iff_closure_subset (hs : IsClosed s) :
    x ‚àà s ‚Üî closure ({x} : Set X) ‚äÜ s :=
  (hs.closure_subset_iff.trans Set.singleton_subset_iff).symm
#align is_closed.mem_iff_closure_subset IsClosed.mem_iff_closure_subset

@[mono, gcongr]
theorem closure_mono (h : s ‚äÜ t) : closure s ‚äÜ closure t :=
  closure_minimal (Subset.trans h subset_closure) isClosed_closure
#align closure_mono closure_mono

theorem monotone_closure (X : Type*) [TopologicalSpace X] : Monotone (@closure X _) := fun _ _ =>
  closure_mono
#align monotone_closure monotone_closure

theorem diff_subset_closure_iff : s \ t ‚äÜ closure t ‚Üî s ‚äÜ closure t := by
  rw [diff_subset_iff, union_eq_self_of_subset_left subset_closure]
#align diff_subset_closure_iff diff_subset_closure_iff

theorem closure_inter_subset_inter_closure (s t : Set X) :
    closure (s ‚à© t) ‚äÜ closure s ‚à© closure t :=
  (monotone_closure X).map_inf_le s t
#align closure_inter_subset_inter_closure closure_inter_subset_inter_closure

theorem isClosed_of_closure_subset (h : closure s ‚äÜ s) : IsClosed s := by
  rw [subset_closure.antisymm h]; exact isClosed_closure
#align is_closed_of_closure_subset isClosed_of_closure_subset

theorem closure_eq_iff_isClosed : closure s = s ‚Üî IsClosed s :=
  ‚ü®fun h => h ‚ñ∏ isClosed_closure, IsClosed.closure_eq‚ü©
#align closure_eq_iff_is_closed closure_eq_iff_isClosed

theorem closure_subset_iff_isClosed : closure s ‚äÜ s ‚Üî IsClosed s :=
  ‚ü®isClosed_of_closure_subset, IsClosed.closure_subset‚ü©
#align closure_subset_iff_is_closed closure_subset_iff_isClosed

@[simp]
theorem closure_empty : closure (‚àÖ : Set X) = ‚àÖ :=
  isClosed_empty.closure_eq
#align closure_empty closure_empty

@[simp]
theorem closure_empty_iff (s : Set X) : closure s = ‚àÖ ‚Üî s = ‚àÖ :=
  ‚ü®subset_eq_empty subset_closure, fun h => h.symm ‚ñ∏ closure_empty‚ü©
#align closure_empty_iff closure_empty_iff

@[simp]
theorem closure_nonempty_iff : (closure s).Nonempty ‚Üî s.Nonempty := by
  simp only [nonempty_iff_ne_empty, Ne.def, closure_empty_iff]
#align closure_nonempty_iff closure_nonempty_iff

alias ‚ü®Set.Nonempty.of_closure, Set.Nonempty.closure‚ü© := closure_nonempty_iff
#align set.nonempty.of_closure Set.Nonempty.of_closure
#align set.nonempty.closure Set.Nonempty.closure

@[simp]
theorem closure_univ : closure (univ : Set X) = univ :=
  isClosed_univ.closure_eq
#align closure_univ closure_univ

@[simp]
theorem closure_closure : closure (closure s) = closure s :=
  isClosed_closure.closure_eq
#align closure_closure closure_closure

theorem closure_eq_compl_interior_compl : closure s = (interior s·∂ú)·∂ú := by
  rw [interior, closure, compl_sUnion, compl_image_set_of]
  simp only [compl_subset_compl, isOpen_compl_iff]
#align closure_eq_compl_interior_compl closure_eq_compl_interior_compl

@[simp]
theorem closure_union : closure (s ‚à™ t) = closure s ‚à™ closure t := by
  simp [closure_eq_compl_interior_compl, compl_inter]
#align closure_union closure_union

theorem Set.Finite.closure_biUnion {Œπ : Type*} {s : Set Œπ} (hs : s.Finite) (f : Œπ ‚Üí Set X) :
    closure (‚ãÉ i ‚àà s, f i) = ‚ãÉ i ‚àà s, closure (f i) := by
  simp [closure_eq_compl_interior_compl, hs.interior_biInter]

theorem Set.Finite.closure_sUnion {S : Set (Set X)} (hS : S.Finite) :
    closure (‚ãÉ‚ÇÄ S) = ‚ãÉ s ‚àà S, closure s := by
  rw [sUnion_eq_biUnion, hS.closure_biUnion]

@[simp]
theorem Finset.closure_biUnion {Œπ : Type*} (s : Finset Œπ) (f : Œπ ‚Üí Set X) :
    closure (‚ãÉ i ‚àà s, f i) = ‚ãÉ i ‚àà s, closure (f i) :=
  s.finite_toSet.closure_biUnion f
#align finset.closure_bUnion Finset.closure_biUnion

@[simp]
theorem closure_iUnion_of_finite [Finite Œπ] (f : Œπ ‚Üí Set X) :
    closure (‚ãÉ i, f i) = ‚ãÉ i, closure (f i) := by
  rw [‚Üê sUnion_range, (finite_range _).closure_sUnion, biUnion_range]
#align closure_Union closure_iUnion_of_finite

theorem interior_subset_closure : interior s ‚äÜ closure s :=
  Subset.trans interior_subset subset_closure
#align interior_subset_closure interior_subset_closure

@[simp]
theorem interior_compl : interior s·∂ú = (closure s)·∂ú := by
  simp [closure_eq_compl_interior_compl]
#align interior_compl interior_compl

@[simp]
theorem closure_compl : closure s·∂ú = (interior s)·∂ú := by
  simp [closure_eq_compl_interior_compl]
#align closure_compl closure_compl

theorem mem_closure_iff :
    x ‚àà closure s ‚Üî ‚àÄ o, IsOpen o ‚Üí x ‚àà o ‚Üí (o ‚à© s).Nonempty :=
  ‚ü®fun h o oo ao =>
    by_contradiction fun os =>
      have : s ‚äÜ o·∂ú := fun x xs xo => os ‚ü®x, xo, xs‚ü©
      closure_minimal this (isClosed_compl_iff.2 oo) h ao,
    fun H _ ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© =>
    by_contradiction fun nc =>
      let ‚ü®_, hc, hs‚ü© := H _ h‚ÇÅ.isOpen_compl nc
      hc (h‚ÇÇ hs)‚ü©
#align mem_closure_iff mem_closure_iff

theorem closure_inter_open_nonempty_iff (h : IsOpen t) :
    (closure s ‚à© t).Nonempty ‚Üî (s ‚à© t).Nonempty :=
  ‚ü®fun ‚ü®_x, hxcs, hxt‚ü© => inter_comm t s ‚ñ∏ mem_closure_iff.1 hxcs t h hxt, fun h =>
    h.mono <| inf_le_inf_right t subset_closure‚ü©
#align closure_inter_open_nonempty_iff closure_inter_open_nonempty_iff

theorem Filter.le_lift'_closure (l : Filter X) : l ‚â§ l.lift' closure :=
  le_lift'.2 fun _ h => mem_of_superset h subset_closure
#align filter.le_lift'_closure Filter.le_lift'_closure

theorem Filter.HasBasis.lift'_closure {l : Filter X} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set X}
    (h : l.HasBasis p s) : (l.lift' closure).HasBasis p fun i => closure (s i) :=
  h.lift' (monotone_closure X)
#align filter.has_basis.lift'_closure Filter.HasBasis.lift'_closure

theorem Filter.HasBasis.lift'_closure_eq_self {l : Filter X} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set X}
    (h : l.HasBasis p s) (hc : ‚àÄ i, p i ‚Üí IsClosed (s i)) : l.lift' closure = l :=
  le_antisymm (h.ge_iff.2 fun i hi => (hc i hi).closure_eq ‚ñ∏ mem_lift' (h.mem_of_mem hi))
    l.le_lift'_closure
#align filter.has_basis.lift'_closure_eq_self Filter.HasBasis.lift'_closure_eq_self

@[simp]
theorem Filter.lift'_closure_eq_bot {l : Filter X} : l.lift' closure = ‚ä• ‚Üî l = ‚ä• :=
  ‚ü®fun h => bot_unique <| h ‚ñ∏ l.le_lift'_closure, fun h =>
    h.symm ‚ñ∏ by rw [lift'_bot (monotone_closure _), closure_empty, principal_empty]‚ü©
#align filter.lift'_closure_eq_bot Filter.lift'_closure_eq_bot

theorem dense_iff_closure_eq : Dense s ‚Üî closure s = univ :=
  eq_univ_iff_forall.symm
#align dense_iff_closure_eq dense_iff_closure_eq

alias ‚ü®Dense.closure_eq, _‚ü© := dense_iff_closure_eq
#align dense.closure_eq Dense.closure_eq

theorem interior_eq_empty_iff_dense_compl : interior s = ‚àÖ ‚Üî Dense s·∂ú := by
  rw [dense_iff_closure_eq, closure_compl, compl_univ_iff]
#align interior_eq_empty_iff_dense_compl interior_eq_empty_iff_dense_compl

theorem Dense.interior_compl (h : Dense s) : interior s·∂ú = ‚àÖ :=
  interior_eq_empty_iff_dense_compl.2 <| by rwa [compl_compl]
#align dense.interior_compl Dense.interior_compl

/-- The closure of a set `s` is dense if and only if `s` is dense. -/
@[simp]
theorem dense_closure : Dense (closure s) ‚Üî Dense s := by
  rw [Dense, Dense, closure_closure]
#align dense_closure dense_closure

protected alias ‚ü®_, Dense.closure‚ü© := dense_closure
alias ‚ü®Dense.of_closure, _‚ü© := dense_closure
#align dense.of_closure Dense.of_closure
#align dense.closure Dense.closure

@[simp]
theorem dense_univ : Dense (univ : Set X) := fun _ => subset_closure trivial
#align dense_univ dense_univ

/-- A set is dense if and only if it has a nonempty intersection with each nonempty open set. -/
theorem dense_iff_inter_open :
    Dense s ‚Üî ‚àÄ U, IsOpen U ‚Üí U.Nonempty ‚Üí (U ‚à© s).Nonempty := by
  constructor <;> intro h
  ¬∑ rintro U U_op ‚ü®x, x_in‚ü©
    exact mem_closure_iff.1 (h _) U U_op x_in
  ¬∑ intro x
    rw [mem_closure_iff]
    intro U U_op x_in
    exact h U U_op ‚ü®_, x_in‚ü©
#align dense_iff_inter_open dense_iff_inter_open

alias ‚ü®Dense.inter_open_nonempty, _‚ü© := dense_iff_inter_open
#align dense.inter_open_nonempty Dense.inter_open_nonempty

theorem Dense.exists_mem_open (hs : Dense s) {U : Set X} (ho : IsOpen U)
    (hne : U.Nonempty) : ‚àÉ x ‚àà s, x ‚àà U :=
  let ‚ü®x, hx‚ü© := hs.inter_open_nonempty U ho hne
  ‚ü®x, hx.2, hx.1‚ü©
#align dense.exists_mem_open Dense.exists_mem_open

theorem Dense.nonempty_iff (hs : Dense s) : s.Nonempty ‚Üî Nonempty X :=
  ‚ü®fun ‚ü®x, _‚ü© => ‚ü®x‚ü©, fun ‚ü®x‚ü© =>
    let ‚ü®y, hy‚ü© := hs.inter_open_nonempty _ isOpen_univ ‚ü®x, trivial‚ü©
    ‚ü®y, hy.2‚ü©‚ü©
#align dense.nonempty_iff Dense.nonempty_iff

theorem Dense.nonempty [h : Nonempty X] (hs : Dense s) : s.Nonempty :=
  hs.nonempty_iff.2 h
#align dense.nonempty Dense.nonempty

@[mono]
theorem Dense.mono (h : s‚ÇÅ ‚äÜ s‚ÇÇ) (hd : Dense s‚ÇÅ) : Dense s‚ÇÇ := fun x =>
  closure_mono h (hd x)
#align dense.mono Dense.mono

/-- Complement to a singleton is dense if and only if the singleton is not an open set. -/
theorem dense_compl_singleton_iff_not_open :
    Dense ({x}·∂ú : Set X) ‚Üî ¬¨IsOpen ({x} : Set X) := by
  constructor
  ¬∑ intro hd ho
    exact (hd.inter_open_nonempty _ ho (singleton_nonempty _)).ne_empty (inter_compl_self _)
  ¬∑ refine' fun ho => dense_iff_inter_open.2 fun U hU hne => inter_compl_nonempty_iff.2 fun hUx => _
    obtain rfl : U = {x}
    exact eq_singleton_iff_nonempty_unique_mem.2 ‚ü®hne, hUx‚ü©
    exact ho hU
#align dense_compl_singleton_iff_not_open dense_compl_singleton_iff_not_open

/-!
### Frontier of a set
-/

@[simp]
theorem closure_diff_interior (s : Set X) : closure s \ interior s = frontier s :=
  rfl
#align closure_diff_interior closure_diff_interior

/-- Interior and frontier are disjoint. -/
lemma disjoint_interior_frontier : Disjoint (interior s) (frontier s) := by
  rw [disjoint_iff_inter_eq_empty, ‚Üê closure_diff_interior, diff_eq,
    ‚Üê inter_assoc, inter_comm, ‚Üê inter_assoc, compl_inter_self, empty_inter]

@[simp]
theorem closure_diff_frontier (s : Set X) : closure s \ frontier s = interior s := by
  rw [frontier, diff_diff_right_self, inter_eq_self_of_subset_right interior_subset_closure]
#align closure_diff_frontier closure_diff_frontier

@[simp]
theorem self_diff_frontier (s : Set X) : s \ frontier s = interior s := by
  rw [frontier, diff_diff_right, diff_eq_empty.2 subset_closure,
    inter_eq_self_of_subset_right interior_subset, empty_union]
#align self_diff_frontier self_diff_frontier

theorem frontier_eq_closure_inter_closure : frontier s = closure s ‚à© closure s·∂ú := by
  rw [closure_compl, frontier, diff_eq]
#align frontier_eq_closure_inter_closure frontier_eq_closure_inter_closure

theorem frontier_subset_closure : frontier s ‚äÜ closure s :=
  diff_subset _ _
#align frontier_subset_closure frontier_subset_closure

theorem IsClosed.frontier_subset (hs : IsClosed s) : frontier s ‚äÜ s :=
  frontier_subset_closure.trans hs.closure_eq.subset
#align is_closed.frontier_subset IsClosed.frontier_subset

theorem frontier_closure_subset : frontier (closure s) ‚äÜ frontier s :=
  diff_subset_diff closure_closure.subset <| interior_mono subset_closure
#align frontier_closure_subset frontier_closure_subset

theorem frontier_interior_subset : frontier (interior s) ‚äÜ frontier s :=
  diff_subset_diff (closure_mono interior_subset) interior_interior.symm.subset
#align frontier_interior_subset frontier_interior_subset

/-- The complement of a set has the same frontier as the original set. -/
@[simp]
theorem frontier_compl (s : Set X) : frontier s·∂ú = frontier s := by
  simp only [frontier_eq_closure_inter_closure, compl_compl, inter_comm]
#align frontier_compl frontier_compl

@[simp]
theorem frontier_univ : frontier (univ : Set X) = ‚àÖ := by simp [frontier]
#align frontier_univ frontier_univ

@[simp]
theorem frontier_empty : frontier (‚àÖ : Set X) = ‚àÖ := by simp [frontier]
#align frontier_empty frontier_empty

theorem frontier_inter_subset (s t : Set X) :
    frontier (s ‚à© t) ‚äÜ frontier s ‚à© closure t ‚à™ closure s ‚à© frontier t := by
  simp only [frontier_eq_closure_inter_closure, compl_inter, closure_union]
  refine' (inter_subset_inter_left _ (closure_inter_subset_inter_closure s t)).trans_eq _
  simp only [inter_union_distrib_left, union_inter_distrib_right, inter_assoc,
    inter_comm (closure t)]
#align frontier_inter_subset frontier_inter_subset

theorem frontier_union_subset (s t : Set X) :
    frontier (s ‚à™ t) ‚äÜ frontier s ‚à© closure t·∂ú ‚à™ closure s·∂ú ‚à© frontier t := by
  simpa only [frontier_compl, ‚Üê compl_union] using frontier_inter_subset s·∂ú t·∂ú
#align frontier_union_subset frontier_union_subset

theorem IsClosed.frontier_eq (hs : IsClosed s) : frontier s = s \ interior s := by
  rw [frontier, hs.closure_eq]
#align is_closed.frontier_eq IsClosed.frontier_eq

theorem IsOpen.frontier_eq (hs : IsOpen s) : frontier s = closure s \ s := by
  rw [frontier, hs.interior_eq]
#align is_open.frontier_eq IsOpen.frontier_eq

theorem IsOpen.inter_frontier_eq (hs : IsOpen s) : s ‚à© frontier s = ‚àÖ := by
  rw [hs.frontier_eq, inter_diff_self]
#align is_open.inter_frontier_eq IsOpen.inter_frontier_eq

/-- The frontier of a set is closed. -/
theorem isClosed_frontier : IsClosed (frontier s) := by
  rw [frontier_eq_closure_inter_closure]; exact IsClosed.inter isClosed_closure isClosed_closure
#align is_closed_frontier isClosed_frontier

/-- The frontier of a closed set has no interior point. -/
theorem interior_frontier (h : IsClosed s) : interior (frontier s) = ‚àÖ := by
  have A : frontier s = s \ interior s := h.frontier_eq
  have B : interior (frontier s) ‚äÜ interior s := by rw [A]; exact interior_mono (diff_subset _ _)
  have C : interior (frontier s) ‚äÜ frontier s := interior_subset
  have : interior (frontier s) ‚äÜ interior s ‚à© (s \ interior s) :=
    subset_inter B (by simpa [A] using C)
  rwa [inter_diff_self, subset_empty_iff] at this
#align interior_frontier interior_frontier

theorem closure_eq_interior_union_frontier (s : Set X) : closure s = interior s ‚à™ frontier s :=
  (union_diff_cancel interior_subset_closure).symm
#align closure_eq_interior_union_frontier closure_eq_interior_union_frontier

theorem closure_eq_self_union_frontier (s : Set X) : closure s = s ‚à™ frontier s :=
  (union_diff_cancel' interior_subset subset_closure).symm
#align closure_eq_self_union_frontier closure_eq_self_union_frontier

theorem Disjoint.frontier_left (ht : IsOpen t) (hd : Disjoint s t) : Disjoint (frontier s) t :=
  subset_compl_iff_disjoint_right.1 <|
    frontier_subset_closure.trans <| closure_minimal (disjoint_left.1 hd) <| isClosed_compl_iff.2 ht
#align disjoint.frontier_left Disjoint.frontier_left

theorem Disjoint.frontier_right (hs : IsOpen s) (hd : Disjoint s t) : Disjoint s (frontier t) :=
  (hd.symm.frontier_left hs).symm
#align disjoint.frontier_right Disjoint.frontier_right

theorem frontier_eq_inter_compl_interior :
    frontier s = (interior s)·∂ú ‚à© (interior s·∂ú)·∂ú := by
  rw [‚Üê frontier_compl, ‚Üê closure_compl, ‚Üê diff_eq, closure_diff_interior]
#align frontier_eq_inter_compl_interior frontier_eq_inter_compl_interior

theorem compl_frontier_eq_union_interior :
    (frontier s)·∂ú = interior s ‚à™ interior s·∂ú := by
  rw [frontier_eq_inter_compl_interior]
  simp only [compl_inter, compl_compl]
#align compl_frontier_eq_union_interior compl_frontier_eq_union_interior

/-!
### Neighborhoods
-/

theorem nhds_def' (x : X) : ùìù x = ‚®Ö (s : Set X) (_ : IsOpen s) (_ : x ‚àà s), ùìü s := by
  simp only [nhds_def, mem_setOf_eq, @and_comm (x ‚àà _), iInf_and]
#align nhds_def' nhds_def'

/-- The open sets containing `x` are a basis for the neighborhood filter. See `nhds_basis_opens'`
for a variant using open neighborhoods instead. -/
theorem nhds_basis_opens (x : X) :
    (ùìù x).HasBasis (fun s : Set X => x ‚àà s ‚àß IsOpen s) fun s => s := by
  rw [nhds_def]
  exact hasBasis_biInf_principal
    (fun s ‚ü®has, hs‚ü© t ‚ü®hat, ht‚ü© =>
      ‚ü®s ‚à© t, ‚ü®‚ü®has, hat‚ü©, IsOpen.inter hs ht‚ü©, ‚ü®inter_subset_left _ _, inter_subset_right _ _‚ü©‚ü©)
    ‚ü®univ, ‚ü®mem_univ x, isOpen_univ‚ü©‚ü©
#align nhds_basis_opens nhds_basis_opens

theorem nhds_basis_closeds (x : X) : (ùìù x).HasBasis (fun s : Set X => x ‚àâ s ‚àß IsClosed s) compl :=
  ‚ü®fun t => (nhds_basis_opens x).mem_iff.trans <|
    compl_surjective.exists.trans <| by simp only [isOpen_compl_iff, mem_compl_iff]‚ü©
#align nhds_basis_closeds nhds_basis_closeds

@[simp]
theorem lift'_nhds_interior (x : X) : (ùìù x).lift' interior = ùìù x :=
  (nhds_basis_opens x).lift'_interior_eq_self fun _ ‚Ü¶ And.right

theorem Filter.HasBasis.nhds_interior {x : X} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set X}
    (h : (ùìù x).HasBasis p s) : (ùìù x).HasBasis p (interior <| s ¬∑) :=
  lift'_nhds_interior x ‚ñ∏ h.lift'_interior

/-- A filter lies below the neighborhood filter at `x` iff it contains every open set around `x`. -/
theorem le_nhds_iff {f} : f ‚â§ ùìù x ‚Üî ‚àÄ s : Set X, x ‚àà s ‚Üí IsOpen s ‚Üí s ‚àà f := by simp [nhds_def]
#align le_nhds_iff le_nhds_iff

/-- To show a filter is above the neighborhood filter at `x`, it suffices to show that it is above
the principal filter of some open set `s` containing `x`. -/
theorem nhds_le_of_le {f} (h : x ‚àà s) (o : IsOpen s) (sf : ùìü s ‚â§ f) : ùìù x ‚â§ f := by
  rw [nhds_def]; exact iInf‚ÇÇ_le_of_le s ‚ü®h, o‚ü© sf
#align nhds_le_of_le nhds_le_of_le

-- Porting note: use `‚àÉ t, t ‚äÜ s ‚àß _` instead of `‚àÉ t ‚äÜ s, _`
theorem mem_nhds_iff : s ‚àà ùìù x ‚Üî ‚àÉ t, t ‚äÜ s ‚àß IsOpen t ‚àß x ‚àà t :=
  (nhds_basis_opens x).mem_iff.trans <| exists_congr fun _ =>
    ‚ü®fun h => ‚ü®h.2, h.1.2, h.1.1‚ü©, fun h => ‚ü®‚ü®h.2.2, h.2.1‚ü©, h.1‚ü©‚ü©
#align mem_nhds_iff mem_nhds_iff‚Çì

/-- A predicate is true in a neighborhood of `x` iff it is true for all the points in an open set
containing `x`. -/
theorem eventually_nhds_iff {p : X ‚Üí Prop} :
    (‚àÄ·∂† x in ùìù x, p x) ‚Üî ‚àÉ t : Set X, (‚àÄ x ‚àà t, p x) ‚àß IsOpen t ‚àß x ‚àà t :=
  mem_nhds_iff.trans <| by simp only [subset_def, exists_prop, mem_setOf_eq]
#align eventually_nhds_iff eventually_nhds_iff

theorem mem_interior_iff_mem_nhds : x ‚àà interior s ‚Üî s ‚àà ùìù x :=
  mem_interior.trans mem_nhds_iff.symm
#align mem_interior_iff_mem_nhds mem_interior_iff_mem_nhds

theorem map_nhds {f : X ‚Üí Œ±} :
    map f (ùìù x) = ‚®Ö s ‚àà { s : Set X | x ‚àà s ‚àß IsOpen s }, ùìü (f '' s) :=
  ((nhds_basis_opens x).map f).eq_biInf
#align map_nhds map_nhds

theorem mem_of_mem_nhds : s ‚àà ùìù x ‚Üí x ‚àà s := fun H =>
  let ‚ü®_t, ht, _, hs‚ü© := mem_nhds_iff.1 H; ht hs
#align mem_of_mem_nhds mem_of_mem_nhds

/-- If a predicate is true in a neighborhood of `x`, then it is true for `x`. -/
theorem Filter.Eventually.self_of_nhds {p : X ‚Üí Prop} (h : ‚àÄ·∂† y in ùìù x, p y) : p x :=
  mem_of_mem_nhds h
#align filter.eventually.self_of_nhds Filter.Eventually.self_of_nhds

theorem IsOpen.mem_nhds (hs : IsOpen s) (hx : x ‚àà s) : s ‚àà ùìù x :=
  mem_nhds_iff.2 ‚ü®s, Subset.refl _, hs, hx‚ü©
#align is_open.mem_nhds IsOpen.mem_nhds

protected theorem IsOpen.mem_nhds_iff (hs : IsOpen s) : s ‚àà ùìù x ‚Üî x ‚àà s :=
  ‚ü®mem_of_mem_nhds, fun hx => mem_nhds_iff.2 ‚ü®s, Subset.rfl, hs, hx‚ü©‚ü©
#align is_open.mem_nhds_iff IsOpen.mem_nhds_iff

theorem IsClosed.compl_mem_nhds (hs : IsClosed s) (hx : x ‚àâ s) : s·∂ú ‚àà ùìù x :=
  hs.isOpen_compl.mem_nhds (mem_compl hx)
#align is_closed.compl_mem_nhds IsClosed.compl_mem_nhds

theorem IsOpen.eventually_mem (hs : IsOpen s) (hx : x ‚àà s) :
    ‚àÄ·∂† x in ùìù x, x ‚àà s :=
  IsOpen.mem_nhds hs hx
#align is_open.eventually_mem IsOpen.eventually_mem

/-- The open neighborhoods of `x` are a basis for the neighborhood filter. See `nhds_basis_opens`
for a variant using open sets around `x` instead. -/
theorem nhds_basis_opens' (x : X) :
    (ùìù x).HasBasis (fun s : Set X => s ‚àà ùìù x ‚àß IsOpen s) fun x => x := by
  convert nhds_basis_opens x using 2
  exact and_congr_left_iff.2 IsOpen.mem_nhds_iff
#align nhds_basis_opens' nhds_basis_opens'

/-- If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of `s`:
it contains an open set containing `s`. -/
theorem exists_open_set_nhds {U : Set X} (h : ‚àÄ x ‚àà s, U ‚àà ùìù x) :
    ‚àÉ V : Set X, s ‚äÜ V ‚àß IsOpen V ‚àß V ‚äÜ U :=
  ‚ü®interior U, fun x hx => mem_interior_iff_mem_nhds.2 <| h x hx, isOpen_interior, interior_subset‚ü©
#align exists_open_set_nhds exists_open_set_nhds

/-- If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of s:
it contains an open set containing `s`. -/
theorem exists_open_set_nhds' {U : Set X} (h : U ‚àà ‚®Ü x ‚àà s, ùìù x) :
    ‚àÉ V : Set X, s ‚äÜ V ‚àß IsOpen V ‚àß V ‚äÜ U :=
  exists_open_set_nhds (by simpa using h)
#align exists_open_set_nhds' exists_open_set_nhds'

/-- If a predicate is true in a neighbourhood of `x`, then for `y` sufficiently close
to `x` this predicate is true in a neighbourhood of `y`. -/
theorem Filter.Eventually.eventually_nhds {p : X ‚Üí Prop} (h : ‚àÄ·∂† y in ùìù x, p y) :
    ‚àÄ·∂† y in ùìù x, ‚àÄ·∂† x in ùìù y, p x :=
  let ‚ü®t, htp, hto, ha‚ü© := eventually_nhds_iff.1 h
  eventually_nhds_iff.2 ‚ü®t, fun _x hx => eventually_nhds_iff.2 ‚ü®t, htp, hto, hx‚ü©, hto, ha‚ü©
#align filter.eventually.eventually_nhds Filter.Eventually.eventually_nhds

@[simp]
theorem eventually_eventually_nhds {p : X ‚Üí Prop} :
    (‚àÄ·∂† y in ùìù x, ‚àÄ·∂† x in ùìù y, p x) ‚Üî ‚àÄ·∂† x in ùìù x, p x :=
  ‚ü®fun h => h.self_of_nhds, fun h => h.eventually_nhds‚ü©
#align eventually_eventually_nhds eventually_eventually_nhds

@[simp]
theorem frequently_frequently_nhds {p : X ‚Üí Prop} :
    (‚àÉ·∂† x' in ùìù x, ‚àÉ·∂† x'' in ùìù x', p x'') ‚Üî ‚àÉ·∂† x in ùìù x, p x := by
  rw [‚Üê not_iff_not]
  simp only [not_frequently, eventually_eventually_nhds]
#align frequently_frequently_nhds frequently_frequently_nhds

@[simp]
theorem eventually_mem_nhds : (‚àÄ·∂† x' in ùìù x, s ‚àà ùìù x') ‚Üî s ‚àà ùìù x :=
  eventually_eventually_nhds
#align eventually_mem_nhds eventually_mem_nhds

@[simp]
theorem nhds_bind_nhds : (ùìù x).bind ùìù = ùìù x :=
  Filter.ext fun _ => eventually_eventually_nhds
#align nhds_bind_nhds nhds_bind_nhds

@[simp]
theorem eventually_eventuallyEq_nhds {f g : X ‚Üí Œ±} :
    (‚àÄ·∂† y in ùìù x, f =·∂†[ùìù y] g) ‚Üî f =·∂†[ùìù x] g :=
  eventually_eventually_nhds
#align eventually_eventually_eq_nhds eventually_eventuallyEq_nhds

theorem Filter.EventuallyEq.eq_of_nhds {f g : X ‚Üí Œ±} (h : f =·∂†[ùìù x] g) : f x = g x :=
  h.self_of_nhds
#align filter.eventually_eq.eq_of_nhds Filter.EventuallyEq.eq_of_nhds

@[simp]
theorem eventually_eventuallyLE_nhds [LE Œ±] {f g : X ‚Üí Œ±} :
    (‚àÄ·∂† y in ùìù x, f ‚â§·∂†[ùìù y] g) ‚Üî f ‚â§·∂†[ùìù x] g :=
  eventually_eventually_nhds
#align eventually_eventually_le_nhds eventually_eventuallyLE_nhds

/-- If two functions are equal in a neighbourhood of `x`, then for `y` sufficiently close
to `x` these functions are equal in a neighbourhood of `y`. -/
theorem Filter.EventuallyEq.eventuallyEq_nhds {f g : X ‚Üí Œ±} (h : f =·∂†[ùìù x] g) :
    ‚àÄ·∂† y in ùìù x, f =·∂†[ùìù y] g :=
  h.eventually_nhds
#align filter.eventually_eq.eventually_eq_nhds Filter.EventuallyEq.eventuallyEq_nhds

/-- If `f x ‚â§ g x` in a neighbourhood of `x`, then for `y` sufficiently close to `x` we have
`f x ‚â§ g x` in a neighbourhood of `y`. -/
theorem Filter.EventuallyLE.eventuallyLE_nhds [LE Œ±] {f g : X ‚Üí Œ±} (h : f ‚â§·∂†[ùìù x] g) :
    ‚àÄ·∂† y in ùìù x, f ‚â§·∂†[ùìù y] g :=
  h.eventually_nhds
#align filter.eventually_le.eventually_le_nhds Filter.EventuallyLE.eventuallyLE_nhds

theorem all_mem_nhds (x : X) (P : Set X ‚Üí Prop) (hP : ‚àÄ s t, s ‚äÜ t ‚Üí P s ‚Üí P t) :
    (‚àÄ s ‚àà ùìù x, P s) ‚Üî ‚àÄ s, IsOpen s ‚Üí x ‚àà s ‚Üí P s :=
  ((nhds_basis_opens x).forall_iff hP).trans <| by simp only [@and_comm (x ‚àà _), and_imp]
#align all_mem_nhds all_mem_nhds

theorem all_mem_nhds_filter (x : X) (f : Set X ‚Üí Set Œ±) (hf : ‚àÄ s t, s ‚äÜ t ‚Üí f s ‚äÜ f t)
    (l : Filter Œ±) : (‚àÄ s ‚àà ùìù x, f s ‚àà l) ‚Üî ‚àÄ s, IsOpen s ‚Üí x ‚àà s ‚Üí f s ‚àà l :=
  all_mem_nhds _ _ fun s t ssubt h => mem_of_superset h (hf s t ssubt)
#align all_mem_nhds_filter all_mem_nhds_filter

theorem tendsto_nhds {f : Œ± ‚Üí X} {l : Filter Œ±} :
    Tendsto f l (ùìù x) ‚Üî ‚àÄ s, IsOpen s ‚Üí x ‚àà s ‚Üí f ‚Åª¬π' s ‚àà l :=
  all_mem_nhds_filter _ _ (fun _ _ h => preimage_mono h) _
#align tendsto_nhds tendsto_nhds

theorem tendsto_atTop_nhds [Nonempty Œ±] [SemilatticeSup Œ±] {f : Œ± ‚Üí X} :
    Tendsto f atTop (ùìù x) ‚Üî ‚àÄ U : Set X, x ‚àà U ‚Üí IsOpen U ‚Üí ‚àÉ N, ‚àÄ n, N ‚â§ n ‚Üí f n ‚àà U :=
  (atTop_basis.tendsto_iff (nhds_basis_opens x)).trans <| by
    simp only [and_imp, exists_prop, true_and_iff, mem_Ici, ge_iff_le]
#align tendsto_at_top_nhds tendsto_atTop_nhds

theorem tendsto_const_nhds {f : Filter Œ±} : Tendsto (fun _ : Œ± => x) f (ùìù x) :=
  tendsto_nhds.mpr fun _ _ ha => univ_mem' fun _ => ha
#align tendsto_const_nhds tendsto_const_nhds

theorem tendsto_atTop_of_eventually_const {Œπ : Type*} [SemilatticeSup Œπ] [Nonempty Œπ]
    {u : Œπ ‚Üí X} {i‚ÇÄ : Œπ} (h : ‚àÄ i ‚â• i‚ÇÄ, u i = x) : Tendsto u atTop (ùìù x) :=
  Tendsto.congr' (EventuallyEq.symm (eventually_atTop.mpr ‚ü®i‚ÇÄ, h‚ü©)) tendsto_const_nhds
#align tendsto_at_top_of_eventually_const tendsto_atTop_of_eventually_const

theorem tendsto_atBot_of_eventually_const {Œπ : Type*} [SemilatticeInf Œπ] [Nonempty Œπ]
    {u : Œπ ‚Üí X} {i‚ÇÄ : Œπ} (h : ‚àÄ i ‚â§ i‚ÇÄ, u i = x) : Tendsto u atBot (ùìù x) :=
  Tendsto.congr' (EventuallyEq.symm (eventually_atBot.mpr ‚ü®i‚ÇÄ, h‚ü©)) tendsto_const_nhds
#align tendsto_at_bot_of_eventually_const tendsto_atBot_of_eventually_const

theorem pure_le_nhds : pure ‚â§ (ùìù : X ‚Üí Filter X) := fun _ _ hs => mem_pure.2 <| mem_of_mem_nhds hs
#align pure_le_nhds pure_le_nhds

theorem tendsto_pure_nhds (f : Œ± ‚Üí X) (a : Œ±) : Tendsto f (pure a) (ùìù (f a)) :=
  (tendsto_pure_pure f a).mono_right (pure_le_nhds _)
#align tendsto_pure_nhds tendsto_pure_nhds

theorem OrderTop.tendsto_atTop_nhds [PartialOrder Œ±] [OrderTop Œ±] (f : Œ± ‚Üí X) :
    Tendsto f atTop (ùìù (f ‚ä§)) :=
  (tendsto_atTop_pure f).mono_right (pure_le_nhds _)
#align order_top.tendsto_at_top_nhds OrderTop.tendsto_atTop_nhds

@[simp]
instance nhds_neBot : NeBot (ùìù x) :=
  neBot_of_le (pure_le_nhds x)
#align nhds_ne_bot nhds_neBot

theorem tendsto_nhds_of_eventually_eq {l : Filter Œ±} {f : Œ± ‚Üí X} (h : ‚àÄ·∂† x' in l, f x' = x) :
    Tendsto f l (ùìù x) :=
  tendsto_const_nhds.congr' (.symm h)

theorem Filter.EventuallyEq.tendsto {l : Filter Œ±} {f : Œ± ‚Üí X} (hf : f =·∂†[l] fun _ ‚Ü¶ x) :
    Tendsto f l (ùìù x) :=
  tendsto_nhds_of_eventually_eq hf

/-!
### Cluster points

In this section we define [cluster points](https://en.wikipedia.org/wiki/Limit_point)
(also known as limit points and accumulation points) of a filter and of a sequence.
-/


theorem ClusterPt.neBot {F : Filter X} (h : ClusterPt x F) : NeBot (ùìù x ‚äì F) :=
  h
#align cluster_pt.ne_bot ClusterPt.neBot

theorem Filter.HasBasis.clusterPt_iff {ŒπX ŒπF} {pX : ŒπX ‚Üí Prop} {sX : ŒπX ‚Üí Set X} {pF : ŒπF ‚Üí Prop}
    {sF : ŒπF ‚Üí Set X} {F : Filter X} (hX : (ùìù x).HasBasis pX sX) (hF : F.HasBasis pF sF) :
    ClusterPt x F ‚Üî ‚àÄ ‚¶Éi‚¶Ñ, pX i ‚Üí ‚àÄ ‚¶Éj‚¶Ñ, pF j ‚Üí (sX i ‚à© sF j).Nonempty :=
  hX.inf_basis_neBot_iff hF
#align filter.has_basis.cluster_pt_iff Filter.HasBasis.clusterPt_iff

theorem clusterPt_iff {F : Filter X} :
    ClusterPt x F ‚Üî ‚àÄ ‚¶ÉU : Set X‚¶Ñ, U ‚àà ùìù x ‚Üí ‚àÄ ‚¶ÉV‚¶Ñ, V ‚àà F ‚Üí (U ‚à© V).Nonempty :=
  inf_neBot_iff
#align cluster_pt_iff clusterPt_iff

theorem clusterPt_iff_not_disjoint {F : Filter X} :
    ClusterPt x F ‚Üî ¬¨Disjoint (ùìù x) F := by
  rw [disjoint_iff, ClusterPt, neBot_iff]

/-- `x` is a cluster point of a set `s` if every neighbourhood of `x` meets `s` on a nonempty
set. See also `mem_closure_iff_clusterPt`. -/
theorem clusterPt_principal_iff :
    ClusterPt x (ùìü s) ‚Üî ‚àÄ U ‚àà ùìù x, (U ‚à© s).Nonempty :=
  inf_principal_neBot_iff
#align cluster_pt_principal_iff clusterPt_principal_iff

theorem clusterPt_principal_iff_frequently :
    ClusterPt x (ùìü s) ‚Üî ‚àÉ·∂† y in ùìù x, y ‚àà s := by
  simp only [clusterPt_principal_iff, frequently_iff, Set.Nonempty, exists_prop, mem_inter_iff]
#align cluster_pt_principal_iff_frequently clusterPt_principal_iff_frequently

theorem ClusterPt.of_le_nhds {f : Filter X} (H : f ‚â§ ùìù x) [NeBot f] : ClusterPt x f := by
  rwa [ClusterPt, inf_eq_right.mpr H]
#align cluster_pt.of_le_nhds ClusterPt.of_le_nhds

theorem ClusterPt.of_le_nhds' {f : Filter X} (H : f ‚â§ ùìù x) (_hf : NeBot f) :
    ClusterPt x f :=
  ClusterPt.of_le_nhds H
#align cluster_pt.of_le_nhds' ClusterPt.of_le_nhds'

theorem ClusterPt.of_nhds_le {f : Filter X} (H : ùìù x ‚â§ f) : ClusterPt x f := by
  simp only [ClusterPt, inf_eq_left.mpr H, nhds_neBot]
#align cluster_pt.of_nhds_le ClusterPt.of_nhds_le

theorem ClusterPt.mono {f g : Filter X} (H : ClusterPt x f) (h : f ‚â§ g) : ClusterPt x g :=
  NeBot.mono H <| inf_le_inf_left _ h
#align cluster_pt.mono ClusterPt.mono

theorem ClusterPt.of_inf_left {f g : Filter X} (H : ClusterPt x <| f ‚äì g) : ClusterPt x f :=
  H.mono inf_le_left
#align cluster_pt.of_inf_left ClusterPt.of_inf_left

theorem ClusterPt.of_inf_right {f g : Filter X} (H : ClusterPt x <| f ‚äì g) :
    ClusterPt x g :=
  H.mono inf_le_right
#align cluster_pt.of_inf_right ClusterPt.of_inf_right

theorem Ultrafilter.clusterPt_iff {f : Ultrafilter X} : ClusterPt x f ‚Üî ‚Üëf ‚â§ ùìù x :=
  ‚ü®f.le_of_inf_neBot', fun h => ClusterPt.of_le_nhds h‚ü©
#align ultrafilter.cluster_pt_iff Ultrafilter.clusterPt_iff

theorem clusterPt_iff_ultrafilter {f : Filter X} : ClusterPt x f ‚Üî
    ‚àÉ u : Ultrafilter X, u ‚â§ f ‚àß u ‚â§ ùìù x := by
  simp_rw [ClusterPt, ‚Üê le_inf_iff, exists_ultrafilter_iff, inf_comm]

theorem mapClusterPt_def {Œπ : Type*} (x : X) (F : Filter Œπ) (u : Œπ ‚Üí X) :
    MapClusterPt x F u ‚Üî ClusterPt x (map u F) := Iff.rfl

theorem mapClusterPt_iff {Œπ : Type*} (x : X) (F : Filter Œπ) (u : Œπ ‚Üí X) :
    MapClusterPt x F u ‚Üî ‚àÄ s ‚àà ùìù x, ‚àÉ·∂† a in F, u a ‚àà s := by
  simp_rw [MapClusterPt, ClusterPt, inf_neBot_iff_frequently_left, frequently_map]
  rfl
#align map_cluster_pt_iff mapClusterPt_iff

theorem mapClusterPt_iff_ultrafilter {Œπ : Type*} (x : X) (F : Filter Œπ) (u : Œπ ‚Üí X) :
    MapClusterPt x F u ‚Üî ‚àÉ U : Ultrafilter Œπ, U ‚â§ F ‚àß Tendsto u U (ùìù x) := by
  simp_rw [MapClusterPt, ClusterPt, ‚Üê Filter.push_pull', map_neBot_iff, tendsto_iff_comap,
    ‚Üê le_inf_iff, exists_ultrafilter_iff, inf_comm]

theorem mapClusterPt_comp {X Œ± Œ≤ : Type*} {x : X} [TopologicalSpace X] {F : Filter Œ±} {œÜ : Œ± ‚Üí Œ≤}
    {u : Œ≤ ‚Üí X} : MapClusterPt x F (u ‚àò œÜ) ‚Üî MapClusterPt x (map œÜ F) u := Iff.rfl

theorem mapClusterPt_of_comp {F : Filter Œ±} {œÜ : Œ≤ ‚Üí Œ±} {p : Filter Œ≤}
    {u : Œ± ‚Üí X} [NeBot p] (h : Tendsto œÜ p F) (H : Tendsto (u ‚àò œÜ) p (ùìù x)) :
    MapClusterPt x F u := by
  have :=
    calc
      map (u ‚àò œÜ) p = map u (map œÜ p) := map_map
      _ ‚â§ map u F := map_mono h
  have : map (u ‚àò œÜ) p ‚â§ ùìù x ‚äì map u F := le_inf H this
  exact neBot_of_le this
#align map_cluster_pt_of_comp mapClusterPt_of_comp

theorem acc_iff_cluster (x : X) (F : Filter X) : AccPt x F ‚Üî ClusterPt x (ùìü {x}·∂ú ‚äì F) := by
  rw [AccPt, nhdsWithin, ClusterPt, inf_assoc]
#align acc_iff_cluster acc_iff_cluster

/-- `x` is an accumulation point of a set `C` iff it is a cluster point of `C ‚àñ {x}`.-/
theorem acc_principal_iff_cluster (x : X) (C : Set X) :
    AccPt x (ùìü C) ‚Üî ClusterPt x (ùìü (C \ {x})) := by
  rw [acc_iff_cluster, inf_principal, inter_comm, diff_eq]
#align acc_principal_iff_cluster acc_principal_iff_cluster

/-- `x` is an accumulation point of a set `C` iff every neighborhood
of `x` contains a point of `C` other than `x`. -/
theorem accPt_iff_nhds (x : X) (C : Set X) : AccPt x (ùìü C) ‚Üî ‚àÄ U ‚àà ùìù x, ‚àÉ y ‚àà U ‚à© C, y ‚â† x := by
  simp [acc_principal_iff_cluster, clusterPt_principal_iff, Set.Nonempty, exists_prop, and_assoc,
    @and_comm (¬¨_ = x)]
#align acc_pt_iff_nhds accPt_iff_nhds

/-- `x` is an accumulation point of a set `C` iff
there are points near `x` in `C` and different from `x`.-/
theorem accPt_iff_frequently (x : X) (C : Set X) : AccPt x (ùìü C) ‚Üî ‚àÉ·∂† y in ùìù x, y ‚â† x ‚àß y ‚àà C := by
  simp [acc_principal_iff_cluster, clusterPt_principal_iff_frequently, and_comm]
#align acc_pt_iff_frequently accPt_iff_frequently

/-- If `x` is an accumulation point of `F` and `F ‚â§ G`, then
`x` is an accumulation point of `D`. -/
theorem AccPt.mono {F G : Filter X} (h : AccPt x F) (hFG : F ‚â§ G) : AccPt x G :=
  NeBot.mono h (inf_le_inf_left _ hFG)
#align acc_pt.mono AccPt.mono

/-!
### Interior, closure and frontier in terms of neighborhoods
-/

theorem interior_eq_nhds' : interior s = { x | s ‚àà ùìù x } :=
  Set.ext fun x => by simp only [mem_interior, mem_nhds_iff, mem_setOf_eq]
#align interior_eq_nhds' interior_eq_nhds'

theorem interior_eq_nhds : interior s = { x | ùìù x ‚â§ ùìü s } :=
  interior_eq_nhds'.trans <| by simp only [le_principal_iff]
#align interior_eq_nhds interior_eq_nhds

@[simp]
theorem interior_mem_nhds : interior s ‚àà ùìù x ‚Üî s ‚àà ùìù x :=
  ‚ü®fun h => mem_of_superset h interior_subset, fun h =>
    IsOpen.mem_nhds isOpen_interior (mem_interior_iff_mem_nhds.2 h)‚ü©
#align interior_mem_nhds interior_mem_nhds

theorem interior_setOf_eq {p : X ‚Üí Prop} : interior { x | p x } = { x | ‚àÄ·∂† y in ùìù x, p y } :=
  interior_eq_nhds'
#align interior_set_of_eq interior_setOf_eq

theorem isOpen_setOf_eventually_nhds {p : X ‚Üí Prop} : IsOpen { x | ‚àÄ·∂† y in ùìù x, p y } := by
  simp only [‚Üê interior_setOf_eq, isOpen_interior]
#align is_open_set_of_eventually_nhds isOpen_setOf_eventually_nhds

theorem subset_interior_iff_nhds {V : Set X} : s ‚äÜ interior V ‚Üî ‚àÄ x ‚àà s, V ‚àà ùìù x := by
  simp_rw [subset_def, mem_interior_iff_mem_nhds]
#align subset_interior_iff_nhds subset_interior_iff_nhds

theorem isOpen_iff_nhds : IsOpen s ‚Üî ‚àÄ x ‚àà s, ùìù x ‚â§ ùìü s :=
  calc
    IsOpen s ‚Üî s ‚äÜ interior s := subset_interior_iff_isOpen.symm
    _ ‚Üî ‚àÄ x ‚àà s, ùìù x ‚â§ ùìü s := by simp_rw [interior_eq_nhds, subset_def, mem_setOf]
#align is_open_iff_nhds isOpen_iff_nhds

theorem TopologicalSpace.ext_iff_nhds {t t' : TopologicalSpace X} :
    t = t' ‚Üî ‚àÄ x, @nhds _ t x = @nhds _ t' x :=
  ‚ü®fun H x ‚Ü¶ congrFun (congrArg _ H) _, fun H ‚Ü¶ by ext; simp_rw [@isOpen_iff_nhds _ _ _, H]‚ü©

alias ‚ü®_, TopologicalSpace.ext_nhds‚ü© := TopologicalSpace.ext_iff_nhds

theorem isOpen_iff_mem_nhds : IsOpen s ‚Üî ‚àÄ x ‚àà s, s ‚àà ùìù x :=
  isOpen_iff_nhds.trans <| forall_congr' fun _ => imp_congr_right fun _ => le_principal_iff
#align is_open_iff_mem_nhds isOpen_iff_mem_nhds

/-- A set `s` is open iff for every point `x` in `s` and every `y` close to `x`, `y` is in `s`. -/
theorem isOpen_iff_eventually : IsOpen s ‚Üî ‚àÄ x, x ‚àà s ‚Üí ‚àÄ·∂† y in ùìù x, y ‚àà s :=
  isOpen_iff_mem_nhds
#align is_open_iff_eventually isOpen_iff_eventually

theorem isOpen_iff_ultrafilter :
    IsOpen s ‚Üî ‚àÄ x ‚àà s, ‚àÄ (l : Ultrafilter X), ‚Üël ‚â§ ùìù x ‚Üí s ‚àà l := by
  simp_rw [isOpen_iff_mem_nhds, ‚Üê mem_iff_ultrafilter]
#align is_open_iff_ultrafilter isOpen_iff_ultrafilter

theorem isOpen_singleton_iff_nhds_eq_pure (x : X) : IsOpen ({x} : Set X) ‚Üî ùìù x = pure x := by
  constructor
  ¬∑ intro h
    apply le_antisymm _ (pure_le_nhds x)
    rw [le_pure_iff]
    exact h.mem_nhds (mem_singleton x)
  ¬∑ intro h
    simp [isOpen_iff_nhds, h]
#align is_open_singleton_iff_nhds_eq_pure isOpen_singleton_iff_nhds_eq_pure

theorem isOpen_singleton_iff_punctured_nhds (x : X) : IsOpen ({x} : Set X) ‚Üî ùìù[‚â†] x = ‚ä• := by
  rw [isOpen_singleton_iff_nhds_eq_pure, nhdsWithin, ‚Üê mem_iff_inf_principal_compl, ‚Üê le_pure_iff,
    nhds_neBot.le_pure_iff]
#align is_open_singleton_iff_punctured_nhds isOpen_singleton_iff_punctured_nhds

theorem mem_closure_iff_frequently : x ‚àà closure s ‚Üî ‚àÉ·∂† x in ùìù x, x ‚àà s := by
  rw [Filter.Frequently, Filter.Eventually, ‚Üê mem_interior_iff_mem_nhds,
    closure_eq_compl_interior_compl, mem_compl_iff, compl_def]
#align mem_closure_iff_frequently mem_closure_iff_frequently

alias ‚ü®_, Filter.Frequently.mem_closure‚ü© := mem_closure_iff_frequently
#align filter.frequently.mem_closure Filter.Frequently.mem_closure

/-- A set `s` is closed iff for every point `x`, if there is a point `y` close to `x` that belongs
to `s` then `x` is in `s`. -/
theorem isClosed_iff_frequently : IsClosed s ‚Üî ‚àÄ x, (‚àÉ·∂† y in ùìù x, y ‚àà s) ‚Üí x ‚àà s := by
  rw [‚Üê closure_subset_iff_isClosed]
  refine' forall_congr' fun x => _
  rw [mem_closure_iff_frequently]
#align is_closed_iff_frequently isClosed_iff_frequently

/-- The set of cluster points of a filter is closed. In particular, the set of limit points
of a sequence is closed. -/
theorem isClosed_setOf_clusterPt {f : Filter X} : IsClosed { x | ClusterPt x f } := by
  simp only [ClusterPt, inf_neBot_iff_frequently_left, setOf_forall, imp_iff_not_or]
  refine' isClosed_iInter fun p => IsClosed.union _ _ <;> apply isClosed_compl_iff.2
  exacts [isOpen_setOf_eventually_nhds, isOpen_const]
#align is_closed_set_of_cluster_pt isClosed_setOf_clusterPt

theorem mem_closure_iff_clusterPt : x ‚àà closure s ‚Üî ClusterPt x (ùìü s) :=
  mem_closure_iff_frequently.trans clusterPt_principal_iff_frequently.symm
#align mem_closure_iff_cluster_pt mem_closure_iff_clusterPt

theorem mem_closure_iff_nhds_ne_bot : x ‚àà closure s ‚Üî ùìù x ‚äì ùìü s ‚â† ‚ä• :=
  mem_closure_iff_clusterPt.trans neBot_iff
#align mem_closure_iff_nhds_ne_bot mem_closure_iff_nhds_ne_bot

@[deprecated] -- 28 January 2024
alias mem_closure_iff_nhds_neBot := mem_closure_iff_nhds_ne_bot

theorem mem_closure_iff_nhdsWithin_neBot : x ‚àà closure s ‚Üî NeBot (ùìù[s] x) :=
  mem_closure_iff_clusterPt
#align mem_closure_iff_nhds_within_ne_bot mem_closure_iff_nhdsWithin_neBot

lemma not_mem_closure_iff_nhdsWithin_eq_bot : x ‚àâ closure s ‚Üî ùìù[s] x = ‚ä• := by
  rw [mem_closure_iff_nhdsWithin_neBot, not_neBot]

/-- If `x` is not an isolated point of a topological space, then `{x}·∂ú` is dense in the whole
space. -/
theorem dense_compl_singleton (x : X) [NeBot (ùìù[‚â†] x)] : Dense ({x}·∂ú : Set X) := by
  intro y
  rcases eq_or_ne y x with (rfl | hne)
  ¬∑ rwa [mem_closure_iff_nhdsWithin_neBot]
  ¬∑ exact subset_closure hne
#align dense_compl_singleton dense_compl_singleton

/-- If `x` is not an isolated point of a topological space, then the closure of `{x}·∂ú` is the whole
space. -/
-- Porting note (#10618): was a `@[simp]` lemma but `simp` can prove it
theorem closure_compl_singleton (x : X) [NeBot (ùìù[‚â†] x)] : closure {x}·∂ú = (univ : Set X) :=
  (dense_compl_singleton x).closure_eq
#align closure_compl_singleton closure_compl_singleton

/-- If `x` is not an isolated point of a topological space, then the interior of `{x}` is empty. -/
@[simp]
theorem interior_singleton (x : X) [NeBot (ùìù[‚â†] x)] : interior {x} = (‚àÖ : Set X) :=
  interior_eq_empty_iff_dense_compl.2 (dense_compl_singleton x)
#align interior_singleton interior_singleton

theorem not_isOpen_singleton (x : X) [NeBot (ùìù[‚â†] x)] : ¬¨IsOpen ({x} : Set X) :=
  dense_compl_singleton_iff_not_open.1 (dense_compl_singleton x)
#align not_is_open_singleton not_isOpen_singleton

theorem closure_eq_cluster_pts : closure s = { a | ClusterPt a (ùìü s) } :=
  Set.ext fun _ => mem_closure_iff_clusterPt
#align closure_eq_cluster_pts closure_eq_cluster_pts

theorem mem_closure_iff_nhds : x ‚àà closure s ‚Üî ‚àÄ t ‚àà ùìù x, (t ‚à© s).Nonempty :=
  mem_closure_iff_clusterPt.trans clusterPt_principal_iff
#align mem_closure_iff_nhds mem_closure_iff_nhds

theorem mem_closure_iff_nhds' : x ‚àà closure s ‚Üî ‚àÄ t ‚àà ùìù x, ‚àÉ y : s, ‚Üëy ‚àà t := by
  simp only [mem_closure_iff_nhds, Set.inter_nonempty_iff_exists_right, SetCoe.exists, exists_prop]
#align mem_closure_iff_nhds' mem_closure_iff_nhds'

theorem mem_closure_iff_comap_neBot :
    x ‚àà closure s ‚Üî NeBot (comap ((‚Üë) : s ‚Üí X) (ùìù x)) := by
  simp_rw [mem_closure_iff_nhds, comap_neBot_iff, Set.inter_nonempty_iff_exists_right,
    SetCoe.exists, exists_prop]
#align mem_closure_iff_comap_ne_bot mem_closure_iff_comap_neBot

theorem mem_closure_iff_nhds_basis' {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set X} (h : (ùìù x).HasBasis p s) :
    x ‚àà closure t ‚Üî ‚àÄ i, p i ‚Üí (s i ‚à© t).Nonempty :=
  mem_closure_iff_clusterPt.trans <|
    (h.clusterPt_iff (hasBasis_principal _)).trans <| by simp only [exists_prop, forall_const]
#align mem_closure_iff_nhds_basis' mem_closure_iff_nhds_basis'

theorem mem_closure_iff_nhds_basis {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set X} (h : (ùìù x).HasBasis p s) :
    x ‚àà closure t ‚Üî ‚àÄ i, p i ‚Üí ‚àÉ y ‚àà t, y ‚àà s i :=
  (mem_closure_iff_nhds_basis' h).trans <| by
    simp only [Set.Nonempty, mem_inter_iff, exists_prop, and_comm]
#align mem_closure_iff_nhds_basis mem_closure_iff_nhds_basis

theorem clusterPt_iff_forall_mem_closure {F : Filter X} :
    ClusterPt x F ‚Üî ‚àÄ s ‚àà F, x ‚àà closure s := by
  simp_rw [ClusterPt, inf_neBot_iff, mem_closure_iff_nhds]
  rw [forall‚ÇÇ_swap]

theorem clusterPt_iff_lift'_closure {F : Filter X} :
    ClusterPt x F ‚Üî pure x ‚â§ (F.lift' closure) := by
  simp_rw [clusterPt_iff_forall_mem_closure,
    (hasBasis_pure _).le_basis_iff F.basis_sets.lift'_closure, id, singleton_subset_iff, true_and,
    exists_const]

theorem clusterPt_iff_lift'_closure' {F : Filter X} :
    ClusterPt x F ‚Üî (F.lift' closure ‚äì pure x).NeBot := by
  rw [clusterPt_iff_lift'_closure, ‚Üê Ultrafilter.coe_pure, inf_comm, Ultrafilter.inf_neBot_iff]

@[simp]
theorem clusterPt_lift'_closure_iff {F : Filter X} :
    ClusterPt x (F.lift' closure) ‚Üî ClusterPt x F := by
  simp [clusterPt_iff_lift'_closure, lift'_lift'_assoc (monotone_closure X) (monotone_closure X)]

/-- `x` belongs to the closure of `s` if and only if some ultrafilter
  supported on `s` converges to `x`. -/
theorem mem_closure_iff_ultrafilter :
    x ‚àà closure s ‚Üî ‚àÉ u : Ultrafilter X, s ‚àà u ‚àß ‚Üëu ‚â§ ùìù x := by
  simp [closure_eq_cluster_pts, ClusterPt, ‚Üê exists_ultrafilter_iff, and_comm]
#align mem_closure_iff_ultrafilter mem_closure_iff_ultrafilter

theorem isClosed_iff_clusterPt : IsClosed s ‚Üî ‚àÄ a, ClusterPt a (ùìü s) ‚Üí a ‚àà s :=
  calc
    IsClosed s ‚Üî closure s ‚äÜ s := closure_subset_iff_isClosed.symm
    _ ‚Üî ‚àÄ a, ClusterPt a (ùìü s) ‚Üí a ‚àà s := by simp only [subset_def, mem_closure_iff_clusterPt]
#align is_closed_iff_cluster_pt isClosed_iff_clusterPt

theorem isClosed_iff_ultrafilter : IsClosed s ‚Üî
    ‚àÄ x, ‚àÄ u : Ultrafilter X, ‚Üëu ‚â§ ùìù x ‚Üí s ‚àà u ‚Üí x ‚àà s := by
  simp [isClosed_iff_clusterPt, ClusterPt, ‚Üê exists_ultrafilter_iff]

theorem isClosed_iff_nhds :
    IsClosed s ‚Üî ‚àÄ x, (‚àÄ U ‚àà ùìù x, (U ‚à© s).Nonempty) ‚Üí x ‚àà s := by
  simp_rw [isClosed_iff_clusterPt, ClusterPt, inf_principal_neBot_iff]
#align is_closed_iff_nhds isClosed_iff_nhds

lemma isClosed_iff_forall_filter :
    IsClosed s ‚Üî ‚àÄ x, ‚àÄ F : Filter X, F.NeBot ‚Üí F ‚â§ ùìü s ‚Üí F ‚â§ ùìù x ‚Üí x ‚àà s := by
  simp_rw [isClosed_iff_clusterPt]
  exact ‚ü®fun hs x F F_ne FS Fx ‚Ü¶ hs _ <| NeBot.mono F_ne (le_inf Fx FS),
         fun hs x hx ‚Ü¶ hs x (ùìù x ‚äì ùìü s) hx inf_le_right inf_le_left‚ü©

theorem IsClosed.interior_union_left (_ : IsClosed s) :
    interior (s ‚à™ t) ‚äÜ s ‚à™ interior t := fun a ‚ü®u, ‚ü®‚ü®hu‚ÇÅ, hu‚ÇÇ‚ü©, ha‚ü©‚ü© =>
  (Classical.em (a ‚àà s)).imp_right fun h =>
    mem_interior.mpr
      ‚ü®u ‚à© s·∂ú, fun _x hx => (hu‚ÇÇ hx.1).resolve_left hx.2, IsOpen.inter hu‚ÇÅ IsClosed.isOpen_compl,
        ‚ü®ha, h‚ü©‚ü©
#align is_closed.interior_union_left IsClosed.interior_union_left

theorem IsClosed.interior_union_right (h : IsClosed t) :
    interior (s ‚à™ t) ‚äÜ interior s ‚à™ t := by
  simpa only [union_comm _ t] using h.interior_union_left
#align is_closed.interior_union_right IsClosed.interior_union_right

theorem IsOpen.inter_closure (h : IsOpen s) : s ‚à© closure t ‚äÜ closure (s ‚à© t) :=
  compl_subset_compl.mp <| by
    simpa only [‚Üê interior_compl, compl_inter] using IsClosed.interior_union_left h.isClosed_compl
#align is_open.inter_closure IsOpen.inter_closure

theorem IsOpen.closure_inter (h : IsOpen t) : closure s ‚à© t ‚äÜ closure (s ‚à© t) := by
  simpa only [inter_comm t] using h.inter_closure
#align is_open.closure_inter IsOpen.closure_inter

theorem Dense.open_subset_closure_inter (hs : Dense s) (ht : IsOpen t) :
    t ‚äÜ closure (t ‚à© s) :=
  calc
    t = t ‚à© closure s := by rw [hs.closure_eq, inter_univ]
    _ ‚äÜ closure (t ‚à© s) := ht.inter_closure
#align dense.open_subset_closure_inter Dense.open_subset_closure_inter

theorem mem_closure_of_mem_closure_union (h : x ‚àà closure (s‚ÇÅ ‚à™ s‚ÇÇ))
    (h‚ÇÅ : s‚ÇÅ·∂ú ‚àà ùìù x) : x ‚àà closure s‚ÇÇ := by
  rw [mem_closure_iff_nhds_ne_bot] at *
  rwa [‚Üê sup_principal, inf_sup_left, inf_principal_eq_bot.mpr h‚ÇÅ, bot_sup_eq] at h
#align mem_closure_of_mem_closure_union mem_closure_of_mem_closure_union

/-- The intersection of an open dense set with a dense set is a dense set. -/
theorem Dense.inter_of_isOpen_left (hs : Dense s) (ht : Dense t) (hso : IsOpen s) :
    Dense (s ‚à© t) := fun x =>
  closure_minimal hso.inter_closure isClosed_closure <| by simp [hs.closure_eq, ht.closure_eq]
#align dense.inter_of_open_left Dense.inter_of_isOpen_left

/-- The intersection of a dense set with an open dense set is a dense set. -/
theorem Dense.inter_of_isOpen_right (hs : Dense s) (ht : Dense t) (hto : IsOpen t) :
    Dense (s ‚à© t) :=
  inter_comm t s ‚ñ∏ ht.inter_of_isOpen_left hs hto
#align dense.inter_of_open_right Dense.inter_of_isOpen_right

theorem Dense.inter_nhds_nonempty (hs : Dense s) (ht : t ‚àà ùìù x) :
    (s ‚à© t).Nonempty :=
  let ‚ü®U, hsub, ho, hx‚ü© := mem_nhds_iff.1 ht
  (hs.inter_open_nonempty U ho ‚ü®x, hx‚ü©).mono fun _y hy => ‚ü®hy.2, hsub hy.1‚ü©
#align dense.inter_nhds_nonempty Dense.inter_nhds_nonempty

theorem closure_diff : closure s \ closure t ‚äÜ closure (s \ t) :=
  calc
    closure s \ closure t = (closure t)·∂ú ‚à© closure s := by simp only [diff_eq, inter_comm]
    _ ‚äÜ closure ((closure t)·∂ú ‚à© s) := (isOpen_compl_iff.mpr <| isClosed_closure).inter_closure
    _ = closure (s \ closure t) := by simp only [diff_eq, inter_comm]
    _ ‚äÜ closure (s \ t) := closure_mono <| diff_subset_diff (Subset.refl s) subset_closure
#align closure_diff closure_diff

theorem Filter.Frequently.mem_of_closed (h : ‚àÉ·∂† x in ùìù x, x ‚àà s)
    (hs : IsClosed s) : x ‚àà s :=
  hs.closure_subset h.mem_closure
#align filter.frequently.mem_of_closed Filter.Frequently.mem_of_closed

theorem IsClosed.mem_of_frequently_of_tendsto {f : Œ± ‚Üí X} {b : Filter Œ±}
    (hs : IsClosed s) (h : ‚àÉ·∂† x in b, f x ‚àà s) (hf : Tendsto f b (ùìù x)) : x ‚àà s :=
  (hf.frequently <| show ‚àÉ·∂† x in b, (fun y => y ‚àà s) (f x) from h).mem_of_closed hs
#align is_closed.mem_of_frequently_of_tendsto IsClosed.mem_of_frequently_of_tendsto

theorem IsClosed.mem_of_tendsto {f : Œ± ‚Üí X} {b : Filter Œ±} [NeBot b]
    (hs : IsClosed s) (hf : Tendsto f b (ùìù x)) (h : ‚àÄ·∂† x in b, f x ‚àà s) : x ‚àà s :=
  hs.mem_of_frequently_of_tendsto h.frequently hf
#align is_closed.mem_of_tendsto IsClosed.mem_of_tendsto

theorem mem_closure_of_frequently_of_tendsto {f : Œ± ‚Üí X} {b : Filter Œ±}
    (h : ‚àÉ·∂† x in b, f x ‚àà s) (hf : Tendsto f b (ùìù x)) : x ‚àà closure s :=
  (hf.frequently h).mem_closure
#align mem_closure_of_frequently_of_tendsto mem_closure_of_frequently_of_tendsto

theorem mem_closure_of_tendsto {f : Œ± ‚Üí X} {b : Filter Œ±} [NeBot b]
    (hf : Tendsto f b (ùìù x)) (h : ‚àÄ·∂† x in b, f x ‚àà s) : x ‚àà closure s :=
  mem_closure_of_frequently_of_tendsto h.frequently hf
#align mem_closure_of_tendsto mem_closure_of_tendsto

/-- Suppose that `f` sends the complement to `s` to a single point `x`, and `l` is some filter.
Then `f` tends to `x` along `l` restricted to `s` if and only if it tends to `x` along `l`. -/
theorem tendsto_inf_principal_nhds_iff_of_forall_eq {f : Œ± ‚Üí X} {l : Filter Œ±} {s : Set Œ±}
    (h : ‚àÄ a ‚àâ s, f a = x) : Tendsto f (l ‚äì ùìü s) (ùìù x) ‚Üî Tendsto f l (ùìù x) := by
  rw [tendsto_iff_comap, tendsto_iff_comap]
  replace h : ùìü s·∂ú ‚â§ comap f (ùìù x) := by
    rintro U ‚ü®t, ht, htU‚ü© x hx
    have : f x ‚àà t := (h x hx).symm ‚ñ∏ mem_of_mem_nhds ht
    exact htU this
  refine' ‚ü®fun h' => _, le_trans inf_le_left‚ü©
  have := sup_le h' h
  rw [sup_inf_right, sup_principal, union_compl_self, principal_univ, inf_top_eq, sup_le_iff]
    at this
  exact this.1
#align tendsto_inf_principal_nhds_iff_of_forall_eq tendsto_inf_principal_nhds_iff_of_forall_eq

/-!
### Limits of filters in topological spaces

In this section we define functions that return a limit of a filter (or of a function along a
filter), if it exists, and a random point otherwise. These functions are rarely used in Mathlib,
most of the theorems are written using `Filter.Tendsto`. One of the reasons is that
`Filter.limUnder f g = x` is not equivalent to `Filter.Tendsto g f (ùìù x)` unless the codomain is a
Hausdorff space and `g` has a limit along `f`.
-/

section lim

-- "Lim"
set_option linter.uppercaseLean3 false

/-- If a filter `f` is majorated by some `ùìù x`, then it is majorated by `ùìù (Filter.lim f)`. We
formulate this lemma with a `[Nonempty X]` argument of `lim` derived from `h` to make it useful for
types without a `[Nonempty X]` instance. Because of the built-in proof irrelevance, Lean will unify
this instance with any other instance. -/
theorem le_nhds_lim {f : Filter X} (h : ‚àÉ x, f ‚â§ ùìù x) : f ‚â§ ùìù (@lim _ _ (nonempty_of_exists h) f) :=
  Classical.epsilon_spec h
#align le_nhds_Lim le_nhds_lim

/-- If `g` tends to some `ùìù x` along `f`, then it tends to `ùìù (Filter.limUnder f g)`. We formulate
this lemma with a `[Nonempty X]` argument of `lim` derived from `h` to make it useful for types
without a `[Nonempty X]` instance. Because of the built-in proof irrelevance, Lean will unify this
instance with any other instance. -/
theorem tendsto_nhds_limUnder {f : Filter Œ±} {g : Œ± ‚Üí X} (h : ‚àÉ x, Tendsto g f (ùìù x)) :
    Tendsto g f (ùìù (@limUnder _ _ _ (nonempty_of_exists h) f g)) :=
  le_nhds_lim h
#align tendsto_nhds_lim tendsto_nhds_limUnder

end lim

end TopologicalSpace

open Topology

/-!
### Continuity
-/

section Continuous

variable {X Y Z : Type*} [TopologicalSpace X] [TopologicalSpace Y] [TopologicalSpace Z]

open TopologicalSpace

-- The curly braces are intentional, so this definition works well with simp
-- when topologies are not those provided by instances.
theorem continuous_def {_ : TopologicalSpace X} {_ : TopologicalSpace Y} {f : X ‚Üí Y} :
    Continuous f ‚Üî ‚àÄ s, IsOpen s ‚Üí IsOpen (f ‚Åª¬π' s) :=
  ‚ü®fun hf => hf.1, fun h => ‚ü®h‚ü©‚ü©
#align continuous_def continuous_def

variable {f : X ‚Üí Y} {s : Set X} {x : X} {y : Y}

theorem IsOpen.preimage (hf : Continuous f) {t : Set Y} (h : IsOpen t) :
    IsOpen (f ‚Åª¬π' t) :=
  hf.isOpen_preimage t h
#align is_open.preimage IsOpen.preimage

theorem continuous_congr {g : X ‚Üí Y} (h : ‚àÄ x, f x = g x) :
    Continuous f ‚Üî Continuous g :=
  .of_eq <| congrArg _ <| funext h

theorem Continuous.congr {g : X ‚Üí Y} (h : Continuous f) (h' : ‚àÄ x, f x = g x) : Continuous g :=
  continuous_congr h' |>.mp h
#align continuous.congr Continuous.congr

theorem ContinuousAt.tendsto (h : ContinuousAt f x) :
    Tendsto f (ùìù x) (ùìù (f x)) :=
  h
#align continuous_at.tendsto ContinuousAt.tendsto

theorem continuousAt_def : ContinuousAt f x ‚Üî ‚àÄ A ‚àà ùìù (f x), f ‚Åª¬π' A ‚àà ùìù x :=
  Iff.rfl
#align continuous_at_def continuousAt_def

theorem continuousAt_congr {g : X ‚Üí Y} (h : f =·∂†[ùìù x] g) :
    ContinuousAt f x ‚Üî ContinuousAt g x := by
  simp only [ContinuousAt, tendsto_congr' h, h.eq_of_nhds]
#align continuous_at_congr continuousAt_congr

theorem ContinuousAt.congr {g : X ‚Üí Y} (hf : ContinuousAt f x) (h : f =·∂†[ùìù x] g) :
    ContinuousAt g x :=
  (continuousAt_congr h).1 hf
#align continuous_at.congr ContinuousAt.congr

theorem ContinuousAt.preimage_mem_nhds {t : Set Y} (h : ContinuousAt f x)
    (ht : t ‚àà ùìù (f x)) : f ‚Åª¬π' t ‚àà ùìù x :=
  h ht
#align continuous_at.preimage_mem_nhds ContinuousAt.preimage_mem_nhds

/-- If `f x ‚àà s ‚àà ùìù (f x)` for continuous `f`, then `f y ‚àà s` near `x`.

This is essentially `Filter.Tendsto.eventually_mem`, but infers in more cases when applied. -/
theorem ContinuousAt.eventually_mem {f : X ‚Üí Y} {x : X} (hf : ContinuousAt f x) {s : Set Y}
    (hs : s ‚àà ùìù (f x)) : ‚àÄ·∂† y in ùìù x, f y ‚àà s :=
  hf hs

/-- Deprecated, please use `not_mem_tsupport_iff_eventuallyEq` instead. -/
@[deprecated] -- 15 January 2024
theorem eventuallyEq_zero_nhds {M‚ÇÄ} [Zero M‚ÇÄ] {f : X ‚Üí M‚ÇÄ} :
    f =·∂†[ùìù x] 0 ‚Üî x ‚àâ closure (Function.support f) := by
  rw [‚Üê mem_compl_iff, ‚Üê interior_compl, mem_interior_iff_mem_nhds, Function.compl_support,
    EventuallyEq, eventually_iff]
  simp only [Pi.zero_apply]
#align eventually_eq_zero_nhds eventuallyEq_zero_nhds

theorem ClusterPt.map {lx : Filter X} {ly : Filter Y} (H : ClusterPt x lx)
    (hfc : ContinuousAt f x) (hf : Tendsto f lx ly) : ClusterPt (f x) ly :=
  (NeBot.map H f).mono <| hfc.tendsto.inf hf
#align cluster_pt.map ClusterPt.map

/-- See also `interior_preimage_subset_preimage_interior`. -/
theorem preimage_interior_subset_interior_preimage {t : Set Y} (hf : Continuous f) :
    f ‚Åª¬π' interior t ‚äÜ interior (f ‚Åª¬π' t) :=
  interior_maximal (preimage_mono interior_subset) (isOpen_interior.preimage hf)
#align preimage_interior_subset_interior_preimage preimage_interior_subset_interior_preimage

@[continuity]
theorem continuous_id : Continuous (id : X ‚Üí X) :=
  continuous_def.2 fun _ => id
#align continuous_id continuous_id

-- This is needed due to reducibility issues with the `continuity` tactic.
@[continuity, fun_prop]
theorem continuous_id' : Continuous (fun (x : X) => x) := continuous_id

theorem Continuous.comp {g : Y ‚Üí Z} (hg : Continuous g) (hf : Continuous f) :
    Continuous (g ‚àò f) :=
  continuous_def.2 fun _ h => (h.preimage hg).preimage hf
#align continuous.comp Continuous.comp

-- This is needed due to reducibility issues with the `continuity` tactic.
@[continuity, fun_prop]
theorem Continuous.comp' {g : Y ‚Üí Z} (hg : Continuous g) (hf : Continuous f) :
    Continuous (fun x => g (f x)) := hg.comp hf

theorem Continuous.iterate {f : X ‚Üí X} (h : Continuous f) (n : ‚Ñï) : Continuous f^[n] :=
  Nat.recOn n continuous_id fun _ ihn => ihn.comp h
#align continuous.iterate Continuous.iterate

nonrec theorem ContinuousAt.comp {g : Y ‚Üí Z} (hg : ContinuousAt g (f x))
    (hf : ContinuousAt f x) : ContinuousAt (g ‚àò f) x :=
  hg.comp hf
#align continuous_at.comp ContinuousAt.comp

@[fun_prop]
theorem ContinuousAt.comp' {g : Y ‚Üí Z} {x : X} (hg : ContinuousAt g (f x))
    (hf : ContinuousAt f x) : ContinuousAt (fun x => g (f x)) x := ContinuousAt.comp hg hf

/-- See note [comp_of_eq lemmas] -/
theorem ContinuousAt.comp_of_eq {g : Y ‚Üí Z} (hg : ContinuousAt g y)
    (hf : ContinuousAt f x) (hy : f x = y) : ContinuousAt (g ‚àò f) x := by subst hy; exact hg.comp hf
#align continuous_at.comp_of_eq ContinuousAt.comp_of_eq

theorem Continuous.tendsto (hf : Continuous f) (x) : Tendsto f (ùìù x) (ùìù (f x)) :=
  ((nhds_basis_opens x).tendsto_iff <| nhds_basis_opens <| f x).2 fun t ‚ü®hxt, ht‚ü© =>
    ‚ü®f ‚Åª¬π' t, ‚ü®hxt, ht.preimage hf‚ü©, Subset.rfl‚ü©
#align continuous.tendsto Continuous.tendsto

/-- A version of `Continuous.tendsto` that allows one to specify a simpler form of the limit.
E.g., one can write `continuous_exp.tendsto' 0 1 exp_zero`. -/
theorem Continuous.tendsto' (hf : Continuous f) (x : X) (y : Y) (h : f x = y) :
    Tendsto f (ùìù x) (ùìù y) :=
  h ‚ñ∏ hf.tendsto x
#align continuous.tendsto' Continuous.tendsto'

@[fun_prop]
theorem Continuous.continuousAt (h : Continuous f) : ContinuousAt f x :=
  h.tendsto x
#align continuous.continuous_at Continuous.continuousAt

theorem continuous_iff_continuousAt : Continuous f ‚Üî ‚àÄ x, ContinuousAt f x :=
  ‚ü®Continuous.tendsto, fun hf => continuous_def.2 fun _U hU => isOpen_iff_mem_nhds.2 fun x hx =>
    hf x <| hU.mem_nhds hx‚ü©
#align continuous_iff_continuous_at continuous_iff_continuousAt

@[fun_prop]
theorem continuousAt_const : ContinuousAt (fun _ : X => y) x :=
  tendsto_const_nhds
#align continuous_at_const continuousAt_const

@[continuity, fun_prop]
theorem continuous_const : Continuous fun _ : X => y :=
  continuous_iff_continuousAt.mpr fun _ => continuousAt_const
#align continuous_const continuous_const

theorem Filter.EventuallyEq.continuousAt (h : f =·∂†[ùìù x] fun _ => y) :
    ContinuousAt f x :=
  (continuousAt_congr h).2 tendsto_const_nhds
#align filter.eventually_eq.continuous_at Filter.EventuallyEq.continuousAt

theorem continuous_of_const (h : ‚àÄ x y, f x = f y) : Continuous f :=
  continuous_iff_continuousAt.mpr fun x =>
    Filter.EventuallyEq.continuousAt <| eventually_of_forall fun y => h y x
#align continuous_of_const continuous_of_const

theorem continuousAt_id : ContinuousAt id x :=
  continuous_id.continuousAt
#align continuous_at_id continuousAt_id

@[fun_prop]
theorem continuousAt_id' (y) : ContinuousAt (fun x : X => x) y := continuousAt_id

theorem ContinuousAt.iterate {f : X ‚Üí X} (hf : ContinuousAt f x) (hx : f x = x) (n : ‚Ñï) :
    ContinuousAt f^[n] x :=
  Nat.recOn n continuousAt_id fun _n ihn ‚Ü¶ ihn.comp_of_eq hf hx
#align continuous_at.iterate ContinuousAt.iterate

theorem continuous_iff_isClosed : Continuous f ‚Üî ‚àÄ s, IsClosed s ‚Üí IsClosed (f ‚Åª¬π' s) :=
  continuous_def.trans <| compl_surjective.forall.trans <| by
    simp only [isOpen_compl_iff, preimage_compl]
#align continuous_iff_is_closed continuous_iff_isClosed

theorem IsClosed.preimage (hf : Continuous f) {t : Set Y} (h : IsClosed t) :
    IsClosed (f ‚Åª¬π' t) :=
  continuous_iff_isClosed.mp hf t h
#align is_closed.preimage IsClosed.preimage

theorem mem_closure_image (hf : ContinuousAt f x)
    (hx : x ‚àà closure s) : f x ‚àà closure (f '' s) :=
  mem_closure_of_frequently_of_tendsto
    ((mem_closure_iff_frequently.1 hx).mono fun _ => mem_image_of_mem _) hf
#align mem_closure_image mem_closure_image

theorem continuousAt_iff_ultrafilter :
    ContinuousAt f x ‚Üî ‚àÄ g : Ultrafilter X, ‚Üëg ‚â§ ùìù x ‚Üí Tendsto f g (ùìù (f x)) :=
  tendsto_iff_ultrafilter f (ùìù x) (ùìù (f x))
#align continuous_at_iff_ultrafilter continuousAt_iff_ultrafilter

theorem continuous_iff_ultrafilter :
    Continuous f ‚Üî ‚àÄ (x) (g : Ultrafilter X), ‚Üëg ‚â§ ùìù x ‚Üí Tendsto f g (ùìù (f x)) := by
  simp only [continuous_iff_continuousAt, continuousAt_iff_ultrafilter]
#align continuous_iff_ultrafilter continuous_iff_ultrafilter

theorem Continuous.closure_preimage_subset (hf : Continuous f) (t : Set Y) :
    closure (f ‚Åª¬π' t) ‚äÜ f ‚Åª¬π' closure t := by
  rw [‚Üê (isClosed_closure.preimage hf).closure_eq]
  exact closure_mono (preimage_mono subset_closure)
#align continuous.closure_preimage_subset Continuous.closure_preimage_subset

theorem Continuous.frontier_preimage_subset (hf : Continuous f) (t : Set Y) :
    frontier (f ‚Åª¬π' t) ‚äÜ f ‚Åª¬π' frontier t :=
  diff_subset_diff (hf.closure_preimage_subset t) (preimage_interior_subset_interior_preimage hf)
#align continuous.frontier_preimage_subset Continuous.frontier_preimage_subset

/-- If a continuous map `f` maps `s` to `t`, then it maps `closure s` to `closure t`. -/
protected theorem Set.MapsTo.closure {t : Set Y} (h : MapsTo f s t)
    (hc : Continuous f) : MapsTo f (closure s) (closure t) := by
  simp only [MapsTo, mem_closure_iff_clusterPt]
  exact fun x hx => hx.map hc.continuousAt (tendsto_principal_principal.2 h)
#align set.maps_to.closure Set.MapsTo.closure

/-- See also `IsClosedMap.closure_image_eq_of_continuous`. -/
theorem image_closure_subset_closure_image (h : Continuous f) :
    f '' closure s ‚äÜ closure (f '' s) :=
  ((mapsTo_image f s).closure h).image_subset
#align image_closure_subset_closure_image image_closure_subset_closure_image

-- Porting note (#10756): new lemma
theorem closure_image_closure (h : Continuous f) :
    closure (f '' closure s) = closure (f '' s) :=
  Subset.antisymm
    (closure_minimal (image_closure_subset_closure_image h) isClosed_closure)
    (closure_mono <| image_subset _ subset_closure)

theorem closure_subset_preimage_closure_image (h : Continuous f) :
    closure s ‚äÜ f ‚Åª¬π' closure (f '' s) :=
  (mapsTo_image _ _).closure h
#align closure_subset_preimage_closure_image closure_subset_preimage_closure_image

theorem map_mem_closure {t : Set Y} (hf : Continuous f)
    (hx : x ‚àà closure s) (ht : MapsTo f s t) : f x ‚àà closure t :=
  ht.closure hf hx
#align map_mem_closure map_mem_closure

/-- If a continuous map `f` maps `s` to a closed set `t`, then it maps `closure s` to `t`. -/
theorem Set.MapsTo.closure_left {t : Set Y} (h : MapsTo f s t)
    (hc : Continuous f) (ht : IsClosed t) : MapsTo f (closure s) t :=
  ht.closure_eq ‚ñ∏ h.closure hc
#align set.maps_to.closure_left Set.MapsTo.closure_left

theorem Filter.Tendsto.lift'_closure (hf : Continuous f) {l l'} (h : Tendsto f l l') :
    Tendsto f (l.lift' closure) (l'.lift' closure) :=
  tendsto_lift'.2 fun s hs ‚Ü¶ by
    filter_upwards [mem_lift' (h hs)] using (mapsTo_preimage _ _).closure hf

theorem tendsto_lift'_closure_nhds (hf : Continuous f) (x : X) :
    Tendsto f ((ùìù x).lift' closure) ((ùìù (f x)).lift' closure) :=
  (hf.tendsto x).lift'_closure hf

/-!
### Function with dense range
-/

section DenseRange

variable {Œ± Œπ : Type*} (f : Œ± ‚Üí X) (g : X ‚Üí Y)
variable {f : Œ± ‚Üí X} {s : Set X}

/-- A surjective map has dense range. -/
theorem Function.Surjective.denseRange (hf : Function.Surjective f) : DenseRange f := fun x => by
  simp [hf.range_eq]
#align function.surjective.dense_range Function.Surjective.denseRange

theorem denseRange_id : DenseRange (id : X ‚Üí X) :=
  Function.Surjective.denseRange Function.surjective_id
#align dense_range_id denseRange_id

theorem denseRange_iff_closure_range : DenseRange f ‚Üî closure (range f) = univ :=
  dense_iff_closure_eq
#align dense_range_iff_closure_range denseRange_iff_closure_range

theorem DenseRange.closure_range (h : DenseRange f) : closure (range f) = univ :=
  h.closure_eq
#align dense_range.closure_range DenseRange.closure_range

theorem Dense.denseRange_val (h : Dense s) : DenseRange ((‚Üë) : s ‚Üí X) := by
  simpa only [DenseRange, Subtype.range_coe_subtype]
#align dense.dense_range_coe Dense.denseRange_val

theorem Continuous.range_subset_closure_image_dense {f : X ‚Üí Y} (hf : Continuous f)
    (hs : Dense s) : range f ‚äÜ closure (f '' s) := by
  rw [‚Üê image_univ, ‚Üê hs.closure_eq]
  exact image_closure_subset_closure_image hf
#align continuous.range_subset_closure_image_dense Continuous.range_subset_closure_image_dense

/-- The image of a dense set under a continuous map with dense range is a dense set. -/
theorem DenseRange.dense_image {f : X ‚Üí Y} (hf' : DenseRange f) (hf : Continuous f)
    (hs : Dense s) : Dense (f '' s) :=
  (hf'.mono <| hf.range_subset_closure_image_dense hs).of_closure
#align dense_range.dense_image DenseRange.dense_image

/-- If `f` has dense range and `s` is an open set in the codomain of `f`, then the image of the
preimage of `s` under `f` is dense in `s`. -/
theorem DenseRange.subset_closure_image_preimage_of_isOpen (hf : DenseRange f) (hs : IsOpen s) :
    s ‚äÜ closure (f '' (f ‚Åª¬π' s)) := by
  rw [image_preimage_eq_inter_range]
  exact hf.open_subset_closure_inter hs
#align dense_range.subset_closure_image_preimage_of_is_open DenseRange.subset_closure_image_preimage_of_isOpen

/-- If a continuous map with dense range maps a dense set to a subset of `t`, then `t` is a dense
set. -/
theorem DenseRange.dense_of_mapsTo {f : X ‚Üí Y} (hf' : DenseRange f) (hf : Continuous f)
    (hs : Dense s) {t : Set Y} (ht : MapsTo f s t) : Dense t :=
  (hf'.dense_image hf hs).mono ht.image_subset
#align dense_range.dense_of_maps_to DenseRange.dense_of_mapsTo

/-- Composition of a continuous map with dense range and a function with dense range has dense
range. -/
theorem DenseRange.comp {g : Y ‚Üí Z} {f : Œ± ‚Üí Y} (hg : DenseRange g) (hf : DenseRange f)
    (cg : Continuous g) : DenseRange (g ‚àò f) := by
  rw [DenseRange, range_comp]
  exact hg.dense_image cg hf
#align dense_range.comp DenseRange.comp

nonrec theorem DenseRange.nonempty_iff (hf : DenseRange f) : Nonempty Œ± ‚Üî Nonempty X :=
  range_nonempty_iff_nonempty.symm.trans hf.nonempty_iff
#align dense_range.nonempty_iff DenseRange.nonempty_iff

theorem DenseRange.nonempty [h : Nonempty X] (hf : DenseRange f) : Nonempty Œ± :=
  hf.nonempty_iff.mpr h
#align dense_range.nonempty DenseRange.nonempty

/-- Given a function `f : X ‚Üí Y` with dense range and `y : Y`, returns some `x : X`. -/
def DenseRange.some (hf : DenseRange f) (x : X) : Œ± :=
  Classical.choice <| hf.nonempty_iff.mpr ‚ü®x‚ü©
#align dense_range.some DenseRange.some

nonrec theorem DenseRange.exists_mem_open (hf : DenseRange f) (ho : IsOpen s) (hs : s.Nonempty) :
    ‚àÉ a, f a ‚àà s :=
  exists_range_iff.1 <| hf.exists_mem_open ho hs
#align dense_range.exists_mem_open DenseRange.exists_mem_open

theorem DenseRange.mem_nhds (h : DenseRange f) (hs : s ‚àà ùìù x) :
    ‚àÉ a, f a ‚àà s :=
  let ‚ü®a, ha‚ü© := h.exists_mem_open isOpen_interior ‚ü®x, mem_interior_iff_mem_nhds.2 hs‚ü©
  ‚ü®a, interior_subset ha‚ü©
#align dense_range.mem_nhds DenseRange.mem_nhds

end DenseRange

end Continuous

library_note "continuity lemma statement"/--
The library contains many lemmas stating that functions/operations are continuous. There are many
ways to formulate the continuity of operations. Some are more convenient than others.
Note: for the most part this note also applies to other properties
(`Measurable`, `Differentiable`, `ContinuousOn`, ...).

### The traditional way
As an example, let's look at addition `(+) : M ‚Üí M ‚Üí M`. We can state that this is continuous
in different definitionally equal ways (omitting some typing information)
* `Continuous (fun p ‚Ü¶ p.1 + p.2)`;
* `Continuous (Function.uncurry (+))`;
* `Continuous ‚Üø(+)`. (`‚Üø` is notation for recursively uncurrying a function)

However, lemmas with this conclusion are not nice to use in practice because
1. They confuse the elaborator. The following two examples fail, because of limitations in the
  elaboration process.
  ```
  variable {M : Type*} [Add M] [TopologicalSpace M] [ContinuousAdd M]
  example : Continuous (fun x : M ‚Ü¶ x + x) :=
    continuous_add.comp _

  example : Continuous (fun x : M ‚Ü¶ x + x) :=
    continuous_add.comp (continuous_id.prod_mk continuous_id)
  ```
  The second is a valid proof, which is accepted if you write it as
  `continuous_add.comp (continuous_id.prod_mk continuous_id : _)`

2. If the operation has more than 2 arguments, they are impractical to use, because in your
  application the arguments in the domain might be in a different order or associated differently.

### The convenient way

A much more convenient way to write continuity lemmas is like `Continuous.add`:
```
Continuous.add {f g : X ‚Üí M} (hf : Continuous f) (hg : Continuous g) :
  Continuous (fun x ‚Ü¶ f x + g x)
```
The conclusion can be `Continuous (f + g)`, which is definitionally equal.
This has the following advantages
* It supports projection notation, so is shorter to write.
* `Continuous.add _ _` is recognized correctly by the elaborator and gives useful new goals.
* It works generally, since the domain is a variable.

As an example for a unary operation, we have `Continuous.neg`.
```
Continuous.neg {f : X ‚Üí G} (hf : Continuous f) : Continuous (fun x ‚Ü¶ -f x)
```
For unary functions, the elaborator is not confused when applying the traditional lemma
(like `continuous_neg`), but it's still convenient to have the short version available (compare
`hf.neg.neg.neg` with `continuous_neg.comp <| continuous_neg.comp <| continuous_neg.comp hf`).

As a harder example, consider an operation of the following type:
```
def strans {x : F} (Œ≥ Œ≥' : Path x x) (t‚ÇÄ : I) : Path x x
```
The precise definition is not important, only its type.
The correct continuity principle for this operation is something like this:
```
{f : X ‚Üí F} {Œ≥ Œ≥' : ‚àÄ x, Path (f x) (f x)} {t‚ÇÄ s : X ‚Üí I}
  (hŒ≥ : Continuous ‚ÜøŒ≥) (hŒ≥' : Continuous ‚ÜøŒ≥')
  (ht : Continuous t‚ÇÄ) (hs : Continuous s) :
  Continuous (fun x ‚Ü¶ strans (Œ≥ x) (Œ≥' x) (t x) (s x))
```
Note that *all* arguments of `strans` are indexed over `X`, even the basepoint `x`, and the last
argument `s` that arises since `Path x x` has a coercion to `I ‚Üí F`. The paths `Œ≥` and `Œ≥'` (which
are unary functions from `I`) become binary functions in the continuity lemma.

### Summary
* Make sure that your continuity lemmas are stated in the most general way, and in a convenient
  form. That means that:
  - The conclusion has a variable `X` as domain (not something like `Y √ó Z`);
  - Wherever possible, all point arguments `c : Y` are replaced by functions `c : X ‚Üí Y`;
  - All `n`-ary function arguments are replaced by `n+1`-ary functions
    (`f : Y ‚Üí Z` becomes `f : X ‚Üí Y ‚Üí Z`);
  - All (relevant) arguments have continuity assumptions, and perhaps there are additional
    assumptions needed to make the operation continuous;
  - The function in the conclusion is fully applied.
* These remarks are mostly about the format of the *conclusion* of a continuity lemma.
  In assumptions it's fine to state that a function with more than 1 argument is continuous using
  `‚Üø` or `Function.uncurry`.

### Functions with discontinuities

In some cases, you want to work with discontinuous functions, and in certain expressions they are
still continuous. For example, consider the fractional part of a number, `Int.fract : ‚Ñù ‚Üí ‚Ñù`.
In this case, you want to add conditions to when a function involving `fract` is continuous, so you
get something like this: (assumption `hf` could be weakened, but the important thing is the shape
of the conclusion)
```
lemma ContinuousOn.comp_fract {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
    {f : X ‚Üí ‚Ñù ‚Üí Y} {g : X ‚Üí ‚Ñù} (hf : Continuous ‚Üøf) (hg : Continuous g) (h : ‚àÄ s, f s 0 = f s 1) :
    Continuous (fun x ‚Ü¶ f x (fract (g x)))
```
With `ContinuousAt` you can be even more precise about what to prove in case of discontinuities,
see e.g. `ContinuousAt.comp_div_cases`.
-/

library_note "comp_of_eq lemmas"/--
Lean's elaborator has trouble elaborating applications of lemmas that state that the composition of
two functions satisfy some property at a point, like `ContinuousAt.comp` / `ContDiffAt.comp` and
`ContMDiffWithinAt.comp`. The reason is that a lemma like this looks like
`ContinuousAt g (f x) ‚Üí ContinuousAt f x ‚Üí ContinuousAt (g ‚àò f) x`.
Since Lean's elaborator elaborates the arguments from left-to-right, when you write `hg.comp hf`,
the elaborator will try to figure out *both* `f` and `g` from the type of `hg`. It tries to figure
out `f` just from the point where `g` is continuous. For example, if `hg : ContinuousAt g (a, x)`
then the elaborator will assign `f` to the function `Prod.mk a`, since in that case `f x = (a, x)`.
This is undesirable in most cases where `f` is not a variable. There are some ways to work around
this, for example by giving `f` explicitly, or to force Lean to elaborate `hf` before elaborating
`hg`, but this is annoying.
Another better solution is to reformulate composition lemmas to have the following shape
`ContinuousAt g y ‚Üí ContinuousAt f x ‚Üí f x = y ‚Üí ContinuousAt (g ‚àò f) x`.
This is even useful if the proof of `f x = y` is `rfl`.
The reason that this works better is because the type of `hg` doesn't mention `f`.
Only after elaborating the two `ContinuousAt` arguments, Lean will try to unify `f x` with `y`,
which is often easy after having chosen the correct functions for `f` and `g`.
Here is an example that shows the difference:
```
example [TopologicalSpace X] [TopologicalSpace Y] {x‚ÇÄ : X} (f : X ‚Üí X ‚Üí Y)
    (hf : ContinuousAt (Function.uncurry f) (x‚ÇÄ, x‚ÇÄ)) :
    ContinuousAt (fun x ‚Ü¶ f x x) x‚ÇÄ :=
  -- hf.comp (continuousAt_id.prod continuousAt_id) -- type mismatch
  -- hf.comp_of_eq (continuousAt_id.prod continuousAt_id) rfl -- works
```
-/
