/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel, Yury Kudryashov
-/
import Mathlib.Topology.GDelta.Basic
import Mathlib.Order.Filter.CountableInter
import Mathlib.Topology.UniformSpace.Basic

/-!
# `GŒ¥` sets and uniform spaces

## Main results
We prove that the continuity set of a function from a topological space to a uniform space is a
GŒ¥ set.

-/


noncomputable section

open Topology TopologicalSpace Filter Encodable Set
open scoped Uniformity

variable {X Y : Type*}

section IsGŒ¥

theorem IsClosed.isGŒ¥ {X : Type*} [UniformSpace X] [IsCountablyGenerated (ùì§ X)] {s : Set X}
    (hs : IsClosed s) : IsGŒ¥ s := by
  rcases (@uniformity_hasBasis_open X _).exists_antitone_subbasis with ‚ü®U, hUo, hU, -‚ü©
  rw [‚Üê hs.closure_eq, ‚Üê hU.biInter_biUnion_ball]
  refine .biInter (to_countable _) fun n _ => IsOpen.isGŒ¥ ?_
  exact isOpen_biUnion fun x _ => UniformSpace.isOpen_ball _ (hUo _).2

end IsGŒ¥

section ContinuousAt

variable [TopologicalSpace X]

/-- The set of points where a function is continuous is a GŒ¥ set. -/
theorem IsGŒ¥.setOf_continuousAt [UniformSpace Y] [IsCountablyGenerated (ùì§ Y)] (f : X ‚Üí Y) :
    IsGŒ¥ { x | ContinuousAt f x } := by
  obtain ‚ü®U, _, hU‚ü© := (@uniformity_hasBasis_open_symmetric Y _).exists_antitone_subbasis
  simp only [Uniform.continuousAt_iff_prod, nhds_prod_eq]
  simp only [(nhds_basis_opens _).prod_self.tendsto_iff hU.toHasBasis, forall_prop_of_true,
    setOf_forall, id]
  refine .iInter fun k ‚Ü¶ IsOpen.isGŒ¥ <| isOpen_iff_mem_nhds.2 fun x ‚Ü¶ ?_
  rintro ‚ü®s, ‚ü®hsx, hso‚ü©, hsU‚ü©
  filter_upwards [IsOpen.mem_nhds hso hsx] with _ hy using ‚ü®s, ‚ü®hy, hso‚ü©, hsU‚ü©

@[deprecated (since := "2024-02-15")] alias isGŒ¥_setOf_continuousAt := IsGŒ¥.setOf_continuousAt

end ContinuousAt
