/-
Copyright (c) 2024 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Topology.Constructions

/-!
# Bundled morphisms with continuous evaluation at a point

In this file we define a typeclass
saying that `F` is a type of bundled morphisms (in the sense of `DFunLike`)
with a topology on `F` such that evaluation at a point is continuous in `f : F`.

## Implementation Notes

For now, we define the typeclass for non-dependent bundled functions only.
Whenever we add a type of bundled dependent functions with a topology having this property,
we may decide to generalize from `FunLike` to `DFunLike`.
-/

open scoped Topology
open Filter

/-- A typeclass saying that `F` is a type of bundled morphisms (in the sense of `DFunLike`)
with a topology on `F` such that evaluation at a point is continuous in `f : F`. -/
class ContinuousEvalConst (F : Type*) (Œ± X : outParam Type*) [FunLike F Œ± X]
    [TopologicalSpace F] [TopologicalSpace X] : Prop where
  continuous_eval_const (x : Œ±) : Continuous fun f : F ‚Ü¶ f x

export ContinuousEvalConst (continuous_eval_const)

section ContinuousEvalConst

variable {F Œ± X Z : Type*} [FunLike F Œ± X] [TopologicalSpace F] [TopologicalSpace X]
  [ContinuousEvalConst F Œ± X] [TopologicalSpace Z] {f : Z ‚Üí F} {s : Set Z} {z : Z}

/-- If a type `F'` of bundled morphisms admits a continuous projection
to a type satisfying `ContinuousEvalConst`,
then `F'` satisfies this predicate too.

The word "forget" in the name is motivated by the term "forgetful functor". -/
theorem ContinuousEvalConst.of_continuous_forget {F' : Type*} [FunLike F' Œ± X] [TopologicalSpace F']
    {f : F' ‚Üí F} (hc : Continuous f) (hf : ‚àÄ g, ‚áë(f g) = g := by intro; rfl) :
    ContinuousEvalConst F' Œ± X where
  continuous_eval_const x := by simpa only [‚Üê hf] using (continuous_eval_const x).comp hc

@[continuity, fun_prop]
protected theorem Continuous.eval_const (hf : Continuous f) (x : Œ±) : Continuous (f ¬∑ x) :=
  (continuous_eval_const x).comp hf

theorem continuous_coeFun : Continuous (DFunLike.coe : F ‚Üí Œ± ‚Üí X) :=
  continuous_pi continuous_eval_const

protected theorem Continuous.coeFun (hf : Continuous f) : Continuous fun z ‚Ü¶ ‚áë(f z) :=
  continuous_pi hf.eval_const

protected theorem Filter.Tendsto.eval_const {Œπ : Type*} {l : Filter Œπ} {f : Œπ ‚Üí F} {g : F}
    (hf : Tendsto f l (ùìù g)) (a : Œ±) : Tendsto (f ¬∑ a) l (ùìù (g a)) :=
  ((continuous_id.eval_const a).tendsto _).comp hf

protected theorem Filter.Tendsto.coeFun {Œπ : Type*} {l : Filter Œπ} {f : Œπ ‚Üí F} {g : F}
    (hf : Tendsto f l (ùìù g)) : Tendsto (fun i ‚Ü¶ ‚áë(f i)) l (ùìù ‚áëg) :=
  (continuous_id.coeFun.tendsto _).comp hf

protected nonrec theorem ContinuousAt.eval_const (hf : ContinuousAt f z) (x : Œ±) :
    ContinuousAt (f ¬∑ x) z :=
  hf.eval_const x

protected nonrec theorem ContinuousAt.coeFun (hf : ContinuousAt f z) :
    ContinuousAt (fun z ‚Ü¶ ‚áë(f z)) z :=
  hf.coeFun

protected nonrec theorem ContinuousWithinAt.eval_const (hf : ContinuousWithinAt f s z) (x : Œ±) :
    ContinuousWithinAt (f ¬∑ x) s z :=
  hf.eval_const x

protected nonrec theorem ContinuousWithinAt.coeFun (hf : ContinuousWithinAt f s z) :
    ContinuousWithinAt (fun z ‚Ü¶ ‚áë(f z)) s z :=
  hf.coeFun

protected theorem ContinuousOn.eval_const (hf : ContinuousOn f s) (x : Œ±) :
    ContinuousOn (f ¬∑ x) s :=
  fun z hz ‚Ü¶ (hf z hz).eval_const x

protected theorem ContinuousOn.coeFun (hf : ContinuousOn f s) (x : Œ±) : ContinuousOn (f ¬∑ x) s :=
  fun z hz ‚Ü¶ (hf z hz).eval_const x

end ContinuousEvalConst
