/-
Copyright (c) 2018 Reid Barton. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Reid Barton
-/
import Mathlib.Topology.ContinuousFunction.Basic

#align_import topology.compact_open from "leanprover-community/mathlib"@"4c19a16e4b705bf135cf9a80ac18fcc99c438514"

/-!
# The compact-open topology

In this file, we define the compact-open topology on the set of continuous maps between two
topological spaces.

## Main definitions

* `CompactOpen` is the compact-open topology on `C(Œ±, Œ≤)`. It is declared as an instance.
* `ContinuousMap.coev` is the coevaluation map `Œ≤ ‚Üí C(Œ±, Œ≤ √ó Œ±)`. It is always continuous.
* `ContinuousMap.curry` is the currying map `C(Œ± √ó Œ≤, Œ≥) ‚Üí C(Œ±, C(Œ≤, Œ≥))`. This map always exists
  and it is continuous as long as `Œ± √ó Œ≤` is locally compact.
* `ContinuousMap.uncurry` is the uncurrying map `C(Œ±, C(Œ≤, Œ≥)) ‚Üí C(Œ± √ó Œ≤, Œ≥)`. For this map to
  exist, we need `Œ≤` to be locally compact. If `Œ±` is also locally compact, then this map is
  continuous.
* `Homeomorph.curry` combines the currying and uncurrying operations into a homeomorphism
  `C(Œ± √ó Œ≤, Œ≥) ‚âÉ‚Çú C(Œ±, C(Œ≤, Œ≥))`. This homeomorphism exists if `Œ±` and `Œ≤` are locally compact.


## Tags

compact-open, curry, function space
-/


open Set Filter TopologicalSpace
open scoped Topology

namespace ContinuousMap

section CompactOpen

variable {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*}

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [TopologicalSpace Œ≥]

/-- A generating set for the compact-open topology (when `s` is compact and `u` is open). -/
def CompactOpen.gen (s : Set Œ±) (u : Set Œ≤) : Set C(Œ±, Œ≤) :=
  { f | f '' s ‚äÜ u }
#align continuous_map.compact_open.gen ContinuousMap.CompactOpen.gen

@[simp]
theorem gen_empty (u : Set Œ≤) : CompactOpen.gen (‚àÖ : Set Œ±) u = Set.univ :=
  Set.ext fun f => iff_true_intro ((congr_arg (¬∑ ‚äÜ u) (image_empty f)).mpr u.empty_subset)
#align continuous_map.gen_empty ContinuousMap.gen_empty

@[simp]
theorem gen_univ (s : Set Œ±) : CompactOpen.gen s (Set.univ : Set Œ≤) = Set.univ :=
  Set.ext fun f => iff_true_intro (f '' s).subset_univ
#align continuous_map.gen_univ ContinuousMap.gen_univ

@[simp]
theorem gen_inter (s : Set Œ±) (u v : Set Œ≤) :
    CompactOpen.gen s (u ‚à© v) = CompactOpen.gen s u ‚à© CompactOpen.gen s v :=
  Set.ext fun _ => subset_inter_iff
#align continuous_map.gen_inter ContinuousMap.gen_inter

@[simp]
theorem gen_union (s t : Set Œ±) (u : Set Œ≤) :
    CompactOpen.gen (s ‚à™ t) u = CompactOpen.gen s u ‚à© CompactOpen.gen t u :=
  Set.ext fun f => (iff_of_eq (congr_arg (¬∑ ‚äÜ u) (image_union f s t))).trans union_subset_iff
#align continuous_map.gen_union ContinuousMap.gen_union

theorem gen_empty_right {s : Set Œ±} (h : s.Nonempty) : CompactOpen.gen s (‚àÖ : Set Œ≤) = ‚àÖ :=
  eq_empty_of_forall_not_mem fun _ => (h.image _).not_subset_empty
#align continuous_map.gen_empty_right ContinuousMap.gen_empty_right

-- The compact-open topology on the space of continuous maps Œ± ‚Üí Œ≤.
instance compactOpen : TopologicalSpace C(Œ±, Œ≤) :=
  TopologicalSpace.generateFrom
    { m | ‚àÉ (s : Set Œ±) (_ : IsCompact s) (u : Set Œ≤) (_ : IsOpen u), m = CompactOpen.gen s u }
#align continuous_map.compact_open ContinuousMap.compactOpen

/-- Definition of `ContinuousMap.compactOpen` in terms of `Set.image2`. -/
theorem compactOpen_eq : @compactOpen Œ± Œ≤ _ _ =
    .generateFrom (Set.image2 CompactOpen.gen {s | IsCompact s} {t | IsOpen t}) :=
  congr_arg TopologicalSpace.generateFrom <| Set.ext fun _ ‚Ü¶ by simp [eq_comm]

protected theorem isOpen_gen {s : Set Œ±} (hs : IsCompact s) {u : Set Œ≤} (hu : IsOpen u) :
    IsOpen (CompactOpen.gen s u) :=
  TopologicalSpace.GenerateOpen.basic _ (by dsimp [mem_setOf_eq]; tauto)
#align continuous_map.is_open_gen ContinuousMap.isOpen_gen

lemma isOpen_setOf_mapsTo {K : Set Œ±} (hK : IsCompact K) {U : Set Œ≤} (hU : IsOpen U) :
    IsOpen {f : C(Œ±, Œ≤) | MapsTo f K U} := by
  simpa only [mapsTo'] using ContinuousMap.isOpen_gen hK hU

lemma eventually_mapsTo {f : C(Œ±, Œ≤)} {K U} (hK : IsCompact K) (hU : IsOpen U) (h : MapsTo f K U) :
    ‚àÄ·∂† g : C(Œ±, Œ≤) in ùìù f, MapsTo g K U :=
  (isOpen_setOf_mapsTo hK hU).mem_nhds h

lemma tendsto_nhds_compactOpen {Œ± : Type*} {l : Filter Œ±} {f : Œ± ‚Üí C(Œ≤, Œ≥)} {g : C(Œ≤, Œ≥)} :
    Tendsto f l (ùìù g) ‚Üî
      ‚àÄ K, IsCompact K ‚Üí ‚àÄ U, IsOpen U ‚Üí MapsTo g K U ‚Üí ‚àÄ·∂† a in l, MapsTo (f a) K U := by
  simp_rw [compactOpen_eq, tendsto_nhds_generateFrom_iff, forall_image2_iff, mapsTo']; rfl

lemma continuous_compactOpen {f : Œ± ‚Üí C(Œ≤, Œ≥)} :
    Continuous f ‚Üî ‚àÄ K, IsCompact K ‚Üí ‚àÄ U, IsOpen U ‚Üí IsOpen {x | MapsTo (f x) K U} := by
  simp_rw [compactOpen_eq, continuous_generateFrom_iff, forall_image2_iff, mapsTo']; rfl

section Functorial

variable (g : C(Œ≤, Œ≥))

private theorem preimage_gen {s : Set Œ±} {u : Set Œ≥} :
    ContinuousMap.comp g ‚Åª¬π' CompactOpen.gen s u = CompactOpen.gen s (g ‚Åª¬π' u) := by
  ext ‚ü®f, _‚ü©
  change g ‚àò f '' s ‚äÜ u ‚Üî f '' s ‚äÜ g ‚Åª¬π' u
  rw [image_comp, image_subset_iff]

/-- C(Œ±, -) is a functor. -/
theorem continuous_comp : Continuous (ContinuousMap.comp g : C(Œ±, Œ≤) ‚Üí C(Œ±, Œ≥)) :=
  continuous_generateFrom_iff.2 fun m ‚ü®s, hs, u, hu, hm‚ü© => by
    rw [hm, preimage_gen g]; exact ContinuousMap.isOpen_gen hs (hu.preimage g.2)
#align continuous_map.continuous_comp ContinuousMap.continuous_comp

/-- If `g : C(Œ≤, Œ≥)` is a topology inducing map, then the composition
`ContinuousMap.comp g : C(Œ±, Œ≤) ‚Üí C(Œ±, Œ≥)` is a topology inducing map too. -/
theorem inducing_comp (hg : Inducing g) : Inducing (g.comp : C(Œ±, Œ≤) ‚Üí C(Œ±, Œ≥)) where
  induced := by
    simp only [compactOpen_eq, induced_generateFrom_eq, image_image2, preimage_gen,
      hg.setOf_isOpen, image2_image_right]

/-- If `g : C(Œ≤, Œ≥)` is a topological embedding, then the composition
`ContinuousMap.comp g : C(Œ±, Œ≤) ‚Üí C(Œ±, Œ≥)` is an embedding too. -/
theorem embedding_comp (hg : Embedding g) : Embedding (g.comp : C(Œ±, Œ≤) ‚Üí C(Œ±, Œ≥)) :=
  ‚ü®inducing_comp g hg.1, fun _ _ ‚Ü¶ (cancel_left hg.2).1‚ü©

variable (f : C(Œ±, Œ≤))

private theorem image_gen {s : Set Œ±} (_ : IsCompact s) {u : Set Œ≥} (_ : IsOpen u) :
    (fun g : C(Œ≤, Œ≥) => g.comp f) ‚Åª¬π' CompactOpen.gen s u = CompactOpen.gen (f '' s) u := by
  ext ‚ü®g, _‚ü©
  change g ‚àò f '' s ‚äÜ u ‚Üî g '' (f '' s) ‚äÜ u
  rw [Set.image_comp]

/-- C(-, Œ≥) is a functor. -/
theorem continuous_comp_left : Continuous (fun g => g.comp f : C(Œ≤, Œ≥) ‚Üí C(Œ±, Œ≥)) :=
  continuous_generateFrom_iff.2 fun m ‚ü®s, hs, u, hu, hm‚ü© => by
    rw [hm, image_gen f hs hu]
    exact ContinuousMap.isOpen_gen (hs.image f.2) hu
#align continuous_map.continuous_comp_left ContinuousMap.continuous_comp_left

/-- Composition is a continuous map from `C(Œ±, Œ≤) √ó C(Œ≤, Œ≥)` to `C(Œ±, Œ≥)`, provided that `Œ≤` is
  locally compact. This is Prop. 9 of Chap. X, ¬ß3, ‚Ññ. 4 of Bourbaki's *Topologie G√©n√©rale*. -/
theorem continuous_comp' [LocallyCompactPair Œ≤ Œ≥] :
    Continuous fun x : C(Œ±, Œ≤) √ó C(Œ≤, Œ≥) => x.2.comp x.1 := by
  simp_rw [continuous_iff_continuousAt, ContinuousAt, tendsto_nhds_compactOpen]
  intro ‚ü®f, g‚ü© K hK U hU (hKU : MapsTo (g ‚àò f) K U)
  obtain ‚ü®L, hKL, hLc, hLU‚ü© : ‚àÉ L ‚àà ùìùÀ¢ (f '' K), IsCompact L ‚àß MapsTo g L U :=
    exists_mem_nhdsSet_isCompact_mapsTo g.continuous (hK.image f.continuous) hU
      (mapsTo_image_iff.2 hKU)
  rw [‚Üê subset_interior_iff_mem_nhdsSet, ‚Üê mapsTo'] at hKL
  exact ((eventually_mapsTo hK isOpen_interior hKL).prod_nhds
    (eventually_mapsTo hLc hU hLU)).mono fun ‚ü®f', g'‚ü© ‚ü®hf', hg'‚ü© ‚Ü¶
      hg'.comp <| hf'.mono_right interior_subset
#align continuous_map.continuous_comp' ContinuousMap.continuous_comp'

theorem continuous.comp' {X : Type*} [TopologicalSpace X] [LocallyCompactPair Œ≤ Œ≥] {f : X ‚Üí C(Œ±, Œ≤)}
    {g : X ‚Üí C(Œ≤, Œ≥)} (hf : Continuous f) (hg : Continuous g) :
    Continuous fun x => (g x).comp (f x) :=
  continuous_comp'.comp (hf.prod_mk hg : Continuous fun x => (f x, g x))
#align continuous_map.continuous.comp' ContinuousMap.continuous.comp'

end Functorial

section Ev

/-- The evaluation map `C(Œ±, Œ≤) √ó Œ± ‚Üí Œ≤` is continuous
if `Œ±, Œ≤` is a locally compact pair of spaces. -/
@[continuity]
theorem continuous_eval [LocallyCompactPair Œ± Œ≤] : Continuous fun p : C(Œ±, Œ≤) √ó Œ± => p.1 p.2 := by
  simp_rw [continuous_iff_continuousAt, ContinuousAt, (nhds_basis_opens _).tendsto_right_iff]
  rintro ‚ü®f, x‚ü© U ‚ü®hx : f x ‚àà U, hU : IsOpen U‚ü©
  rcases exists_mem_nhds_isCompact_mapsTo f.continuous (hU.mem_nhds hx) with ‚ü®K, hxK, hK, hKU‚ü©
  filter_upwards [prod_mem_nhds (eventually_mapsTo hK hU hKU) hxK] using fun _ h ‚Ü¶ h.1 h.2
#align continuous_map.continuous_eval' ContinuousMap.continuous_eval
#align continuous_map.continuous_eval ContinuousMap.continuous_eval

@[deprecated] alias continuous_eval' := continuous_eval

/-- Evaluation of a continuous map `f` at a point `a` is continuous in `f`.

Porting note: merged `continuous_eval_const` with `continuous_eval_const'` removing unneeded
assumptions. -/
@[continuity]
theorem continuous_eval_const (a : Œ±) :
    Continuous fun f : C(Œ±, Œ≤) => f a := by
  refine continuous_def.2 fun U hU ‚Ü¶ ?_
  convert ContinuousMap.isOpen_gen (isCompact_singleton (x := a)) hU using 1
  ext; simp [CompactOpen.gen]
#align continuous_map.continuous_eval_const' ContinuousMap.continuous_eval_const
#align continuous_map.continuous_eval_const ContinuousMap.continuous_eval_const

/-- Coercion from `C(Œ±, Œ≤)` with compact-open topology to `Œ± ‚Üí Œ≤` with pointwise convergence
topology is a continuous map.

Porting note: merged `continuous_coe` with `continuous_coe'` removing unneeded assumptions. -/
theorem continuous_coe : Continuous ((‚áë) : C(Œ±, Œ≤) ‚Üí (Œ± ‚Üí Œ≤)) :=
  continuous_pi continuous_eval_const
#align continuous_map.continuous_coe' ContinuousMap.continuous_coe
#align continuous_map.continuous_coe ContinuousMap.continuous_coe

lemma isClosed_setOf_mapsTo {t : Set Œ≤} (ht : IsClosed t) (s : Set Œ±) :
    IsClosed {f : C(Œ±, Œ≤) | MapsTo f s t} :=
  ht.setOf_mapsTo fun _ _ ‚Ü¶ continuous_eval_const _

lemma isClopen_setOf_mapsTo {K : Set Œ±} (hK : IsCompact K) {U : Set Œ≤} (hU : IsClopen U) :
    IsClopen {f : C(Œ±, Œ≤) | MapsTo f K U} :=
  ‚ü®isOpen_setOf_mapsTo hK hU.isOpen, isClosed_setOf_mapsTo hU.isClosed K‚ü©

instance [T0Space Œ≤] : T0Space C(Œ±, Œ≤) :=
  t0Space_of_injective_of_continuous FunLike.coe_injective continuous_coe

instance [T1Space Œ≤] : T1Space C(Œ±, Œ≤) :=
  t1Space_of_injective_of_continuous FunLike.coe_injective continuous_coe

instance [T2Space Œ≤] : T2Space C(Œ±, Œ≤) :=
  .of_injective_continuous FunLike.coe_injective continuous_coe

end Ev

section InfInduced

theorem compactOpen_le_induced (s : Set Œ±) :
    (ContinuousMap.compactOpen : TopologicalSpace C(Œ±, Œ≤)) ‚â§
      TopologicalSpace.induced (ContinuousMap.restrict s) ContinuousMap.compactOpen := by
  simp only [induced_generateFrom_eq, ContinuousMap.compactOpen]
  apply TopologicalSpace.generateFrom_anti
  rintro b ‚ü®a, ‚ü®c, hc, u, hu, rfl‚ü©, rfl‚ü©
  refine' ‚ü®(‚Üë) '' c, hc.image continuous_subtype_val, u, hu, _‚ü©
  ext f
  simp only [CompactOpen.gen, mem_setOf_eq, mem_preimage, ContinuousMap.coe_restrict]
  rw [image_comp f ((‚Üë) : s ‚Üí Œ±)]
#align continuous_map.compact_open_le_induced ContinuousMap.compactOpen_le_induced

/-- The compact-open topology on `C(Œ±, Œ≤)` is equal to the infimum of the compact-open topologies
on `C(s, Œ≤)` for `s` a compact subset of `Œ±`.  The key point of the proof is that the union of the
compact subsets of `Œ±` is equal to the union of compact subsets of the compact subsets of `Œ±`. -/
theorem compactOpen_eq_sInf_induced :
    (ContinuousMap.compactOpen : TopologicalSpace C(Œ±, Œ≤)) =
      ‚®Ö (s : Set Œ±) (_ : IsCompact s),
        TopologicalSpace.induced (ContinuousMap.restrict s) ContinuousMap.compactOpen := by
  refine' le_antisymm _ _
  ¬∑ refine' le_iInf‚ÇÇ _
    exact fun s _ => compactOpen_le_induced s
  simp only [‚Üê generateFrom_iUnion, induced_generateFrom_eq, ContinuousMap.compactOpen]
  apply TopologicalSpace.generateFrom_anti
  rintro _ ‚ü®s, hs, u, hu, rfl‚ü©
  rw [mem_iUnion‚ÇÇ]
  refine' ‚ü®s, hs, _, ‚ü®univ, isCompact_iff_isCompact_univ.mp hs, u, hu, rfl‚ü©, _‚ü©
  ext f
  simp only [CompactOpen.gen, mem_setOf_eq, mem_preimage, ContinuousMap.coe_restrict]
  rw [image_comp f ((‚Üë) : s ‚Üí Œ±)]
  simp
#align continuous_map.compact_open_eq_Inf_induced ContinuousMap.compactOpen_eq_sInf_induced

/-- For any subset `s` of `Œ±`, the restriction of continuous functions to `s` is continuous as a
function from `C(Œ±, Œ≤)` to `C(s, Œ≤)` with their respective compact-open topologies. -/
theorem continuous_restrict (s : Set Œ±) : Continuous fun F : C(Œ±, Œ≤) => F.restrict s := by
  rw [continuous_iff_le_induced]
  exact compactOpen_le_induced s
#align continuous_map.continuous_restrict ContinuousMap.continuous_restrict

theorem nhds_compactOpen_eq_sInf_nhds_induced (f : C(Œ±, Œ≤)) :
    ùìù f = ‚®Ö (s) (hs : IsCompact s), (ùìù (f.restrict s)).comap (ContinuousMap.restrict s) := by
  rw [compactOpen_eq_sInf_induced]
  simp [nhds_iInf, nhds_induced]
#align continuous_map.nhds_compact_open_eq_Inf_nhds_induced ContinuousMap.nhds_compactOpen_eq_sInf_nhds_induced

theorem tendsto_compactOpen_restrict {Œπ : Type*} {l : Filter Œπ} {F : Œπ ‚Üí C(Œ±, Œ≤)} {f : C(Œ±, Œ≤)}
    (hFf : Filter.Tendsto F l (ùìù f)) (s : Set Œ±) :
    Filter.Tendsto (fun i => (F i).restrict s) l (ùìù (f.restrict s)) :=
  (continuous_restrict s).continuousAt.tendsto.comp hFf
#align continuous_map.tendsto_compact_open_restrict ContinuousMap.tendsto_compactOpen_restrict

theorem tendsto_compactOpen_iff_forall {Œπ : Type*} {l : Filter Œπ} (F : Œπ ‚Üí C(Œ±, Œ≤)) (f : C(Œ±, Œ≤)) :
    Filter.Tendsto F l (ùìù f) ‚Üî
    ‚àÄ (s) (hs : IsCompact s), Filter.Tendsto (fun i => (F i).restrict s) l (ùìù (f.restrict s)) := by
    rw [compactOpen_eq_sInf_induced]
    simp [nhds_iInf, nhds_induced, Filter.tendsto_comap_iff, Function.comp]
#align continuous_map.tendsto_compact_open_iff_forall ContinuousMap.tendsto_compactOpen_iff_forall

/-- A family `F` of functions in `C(Œ±, Œ≤)` converges in the compact-open topology, if and only if
it converges in the compact-open topology on each compact subset of `Œ±`. -/
theorem exists_tendsto_compactOpen_iff_forall [WeaklyLocallyCompactSpace Œ±] [T2Space Œ≤]
    {Œπ : Type*} {l : Filter Œπ} [Filter.NeBot l] (F : Œπ ‚Üí C(Œ±, Œ≤)) :
    (‚àÉ f, Filter.Tendsto F l (ùìù f)) ‚Üî
    ‚àÄ (s : Set Œ±) (hs : IsCompact s), ‚àÉ f, Filter.Tendsto (fun i => (F i).restrict s) l (ùìù f) := by
  constructor
  ¬∑ rintro ‚ü®f, hf‚ü© s _
    exact ‚ü®f.restrict s, tendsto_compactOpen_restrict hf s‚ü©
  ¬∑ intro h
    choose f hf using h
    -- By uniqueness of limits in a `T2Space`, since `fun i ‚Ü¶ F i x` tends to both `f s‚ÇÅ hs‚ÇÅ x` and
    -- `f s‚ÇÇ hs‚ÇÇ x`, we have `f s‚ÇÅ hs‚ÇÅ x = f s‚ÇÇ hs‚ÇÇ x`
    have h :
      ‚àÄ (s‚ÇÅ) (hs‚ÇÅ : IsCompact s‚ÇÅ) (s‚ÇÇ) (hs‚ÇÇ : IsCompact s‚ÇÇ) (x : Œ±) (hxs‚ÇÅ : x ‚àà s‚ÇÅ) (hxs‚ÇÇ : x ‚àà s‚ÇÇ),
        f s‚ÇÅ hs‚ÇÅ ‚ü®x, hxs‚ÇÅ‚ü© = f s‚ÇÇ hs‚ÇÇ ‚ü®x, hxs‚ÇÇ‚ü© := by
      rintro s‚ÇÅ hs‚ÇÅ s‚ÇÇ hs‚ÇÇ x hxs‚ÇÅ hxs‚ÇÇ
      haveI := isCompact_iff_compactSpace.mp hs‚ÇÅ
      haveI := isCompact_iff_compactSpace.mp hs‚ÇÇ
      have h‚ÇÅ := (continuous_eval_const (‚ü®x, hxs‚ÇÅ‚ü© : s‚ÇÅ)).continuousAt.tendsto.comp (hf s‚ÇÅ hs‚ÇÅ)
      have h‚ÇÇ := (continuous_eval_const (‚ü®x, hxs‚ÇÇ‚ü© : s‚ÇÇ)).continuousAt.tendsto.comp (hf s‚ÇÇ hs‚ÇÇ)
      exact tendsto_nhds_unique h‚ÇÅ h‚ÇÇ
    -- So glue the `f s hs` together and prove that this glued function `f‚ÇÄ` is a limit on each
    -- compact set `s`
    refine ‚ü®liftCover' _ _ h exists_compact_mem_nhds, ?_‚ü©
    rw [tendsto_compactOpen_iff_forall]
    intro s hs
    rw [liftCover_restrict']
    exact hf s hs
#align continuous_map.exists_tendsto_compact_open_iff_forall ContinuousMap.exists_tendsto_compactOpen_iff_forall

end InfInduced

section Coev

variable (Œ± Œ≤)

/-- The coevaluation map `Œ≤ ‚Üí C(Œ±, Œ≤ √ó Œ±)` sending a point `x : Œ≤` to the continuous function
on `Œ±` sending `y` to `(x, y)`. -/
def coev (b : Œ≤) : C(Œ±, Œ≤ √ó Œ±) :=
  { toFun := Prod.mk b }
#align continuous_map.coev ContinuousMap.coev

variable {Œ± Œ≤}

theorem image_coev {y : Œ≤} (s : Set Œ±) : coev Œ± Œ≤ y '' s = ({y} : Set Œ≤) √óÀ¢ s := by
  aesop
#align continuous_map.image_coev ContinuousMap.image_coev

-- The coevaluation map Œ≤ ‚Üí C(Œ±, Œ≤ √ó Œ±) is continuous (always).
theorem continuous_coev : Continuous (coev Œ± Œ≤) :=
  continuous_generateFrom_iff.2 <| by
    rintro _ ‚ü®s, sc, u, uo, rfl‚ü©
    rw [isOpen_iff_forall_mem_open]
    intro y hy
    have hy' : (‚Üë(coev Œ± Œ≤ y) '' s ‚äÜ u) := hy
    -- porting notes: was below
    --change coev Œ± Œ≤ y '' s ‚äÜ u at hy
    rw [image_coev s] at hy'
    rcases generalized_tube_lemma isCompact_singleton sc uo hy' with ‚ü®v, w, vo, _, yv, sw, vwu‚ü©
    refine' ‚ü®v, _, vo, singleton_subset_iff.mp yv‚ü©
    intro y' hy'
    change coev Œ± Œ≤ y' '' s ‚äÜ u
    rw [image_coev s]
    exact (prod_mono (singleton_subset_iff.mpr hy') sw).trans vwu
#align continuous_map.continuous_coev ContinuousMap.continuous_coev

end Coev

section Curry

/-- Auxiliary definition, see `ContinuousMap.curry` and `Homeomorph.curry`. -/
def curry' (f : C(Œ± √ó Œ≤, Œ≥)) (a : Œ±) : C(Œ≤, Œ≥) :=
  ‚ü®Function.curry f a, Continuous.comp f.2 (continuous_const.prod_mk continuous_id)‚ü©
  -- Porting note: proof was `by continuity`
#align continuous_map.curry' ContinuousMap.curry'

/-- If a map `Œ± √ó Œ≤ ‚Üí Œ≥` is continuous, then its curried form `Œ± ‚Üí C(Œ≤, Œ≥)` is continuous. -/
theorem continuous_curry' (f : C(Œ± √ó Œ≤, Œ≥)) : Continuous (curry' f) :=
  Continuous.comp (continuous_comp f) continuous_coev
#align continuous_map.continuous_curry' ContinuousMap.continuous_curry'

/-- To show continuity of a map `Œ± ‚Üí C(Œ≤, Œ≥)`, it suffices to show that its uncurried form
    `Œ± √ó Œ≤ ‚Üí Œ≥` is continuous. -/
theorem continuous_of_continuous_uncurry (f : Œ± ‚Üí C(Œ≤, Œ≥))
    (h : Continuous (Function.uncurry fun x y => f x y)) : Continuous f :=
  continuous_curry' ‚ü®_, h‚ü©
#align continuous_map.continuous_of_continuous_uncurry ContinuousMap.continuous_of_continuous_uncurry

/-- The curried form of a continuous map `Œ± √ó Œ≤ ‚Üí Œ≥` as a continuous map `Œ± ‚Üí C(Œ≤, Œ≥)`.
    If `a √ó Œ≤` is locally compact, this is continuous. If `Œ±` and `Œ≤` are both locally
    compact, then this is a homeomorphism, see `Homeomorph.curry`. -/
def curry (f : C(Œ± √ó Œ≤, Œ≥)) : C(Œ±, C(Œ≤, Œ≥)) :=
  ‚ü®_, continuous_curry' f‚ü©
#align continuous_map.curry ContinuousMap.curry

@[simp]
theorem curry_apply (f : C(Œ± √ó Œ≤, Œ≥)) (a : Œ±) (b : Œ≤) : f.curry a b = f (a, b) :=
  rfl
#align continuous_map.curry_apply ContinuousMap.curry_apply

/-- The currying process is a continuous map between function spaces. -/
theorem continuous_curry [LocallyCompactSpace (Œ± √ó Œ≤)] :
    Continuous (curry : C(Œ± √ó Œ≤, Œ≥) ‚Üí C(Œ±, C(Œ≤, Œ≥))) := by
  apply continuous_of_continuous_uncurry
  apply continuous_of_continuous_uncurry
  rw [‚Üê (Homeomorph.prodAssoc _ _ _).symm.comp_continuous_iff']
  exact continuous_eval
#align continuous_map.continuous_curry ContinuousMap.continuous_curry

/-- The uncurried form of a continuous map `Œ± ‚Üí C(Œ≤, Œ≥)` is a continuous map `Œ± √ó Œ≤ ‚Üí Œ≥`. -/
theorem continuous_uncurry_of_continuous [LocallyCompactSpace Œ≤] (f : C(Œ±, C(Œ≤, Œ≥))) :
    Continuous (Function.uncurry fun x y => f x y) :=
  continuous_eval.comp <| f.continuous.prod_map continuous_id
#align continuous_map.continuous_uncurry_of_continuous ContinuousMap.continuous_uncurry_of_continuous

/-- The uncurried form of a continuous map `Œ± ‚Üí C(Œ≤, Œ≥)` as a continuous map `Œ± √ó Œ≤ ‚Üí Œ≥` (if `Œ≤` is
    locally compact). If `Œ±` is also locally compact, then this is a homeomorphism between the two
    function spaces, see `Homeomorph.curry`. -/
@[simps]
def uncurry [LocallyCompactSpace Œ≤] (f : C(Œ±, C(Œ≤, Œ≥))) : C(Œ± √ó Œ≤, Œ≥) :=
  ‚ü®_, continuous_uncurry_of_continuous f‚ü©
#align continuous_map.uncurry ContinuousMap.uncurry

/-- The uncurrying process is a continuous map between function spaces. -/
theorem continuous_uncurry [LocallyCompactSpace Œ±] [LocallyCompactSpace Œ≤] :
    Continuous (uncurry : C(Œ±, C(Œ≤, Œ≥)) ‚Üí C(Œ± √ó Œ≤, Œ≥)) := by
  apply continuous_of_continuous_uncurry
  rw [‚Üê (Homeomorph.prodAssoc _ _ _).comp_continuous_iff']
  apply continuous_eval.comp (continuous_eval.prod_map continuous_id)
#align continuous_map.continuous_uncurry ContinuousMap.continuous_uncurry

/-- The family of constant maps: `Œ≤ ‚Üí C(Œ±, Œ≤)` as a continuous map. -/
def const' : C(Œ≤, C(Œ±, Œ≤)) :=
  curry ContinuousMap.fst
#align continuous_map.const' ContinuousMap.const'

@[simp]
theorem coe_const' : (const' : Œ≤ ‚Üí C(Œ±, Œ≤)) = const Œ± :=
  rfl
#align continuous_map.coe_const' ContinuousMap.coe_const'

theorem continuous_const' : Continuous (const Œ± : Œ≤ ‚Üí C(Œ±, Œ≤)) :=
  const'.continuous
#align continuous_map.continuous_const' ContinuousMap.continuous_const'

end Curry

end CompactOpen

end ContinuousMap

open ContinuousMap

namespace Homeomorph

variable {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*}

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [TopologicalSpace Œ≥]

/-- Currying as a homeomorphism between the function spaces `C(Œ± √ó Œ≤, Œ≥)` and `C(Œ±, C(Œ≤, Œ≥))`. -/
def curry [LocallyCompactSpace Œ±] [LocallyCompactSpace Œ≤] : C(Œ± √ó Œ≤, Œ≥) ‚âÉ‚Çú C(Œ±, C(Œ≤, Œ≥)) :=
  ‚ü®‚ü®ContinuousMap.curry, uncurry, by intro; ext; rfl, by intro; ext; rfl‚ü©,
    continuous_curry, continuous_uncurry‚ü©
#align homeomorph.curry Homeomorph.curry

/-- If `Œ±` has a single element, then `Œ≤` is homeomorphic to `C(Œ±, Œ≤)`. -/
def continuousMapOfUnique [Unique Œ±] : Œ≤ ‚âÉ‚Çú C(Œ±, Œ≤) where
  toFun := const Œ±
  invFun f := f default
  left_inv a := rfl
  right_inv f := by
    ext a
    rw [Unique.eq_default a]
    rfl
  continuous_toFun := continuous_const'
  continuous_invFun := continuous_eval_const _
#align homeomorph.continuous_map_of_unique Homeomorph.continuousMapOfUnique

@[simp]
theorem continuousMapOfUnique_apply [Unique Œ±] (b : Œ≤) (a : Œ±) : continuousMapOfUnique b a = b :=
  rfl
#align homeomorph.continuous_map_of_unique_apply Homeomorph.continuousMapOfUnique_apply

@[simp]
theorem continuousMapOfUnique_symm_apply [Unique Œ±] (f : C(Œ±, Œ≤)) :
    continuousMapOfUnique.symm f = f default :=
  rfl
#align homeomorph.continuous_map_of_unique_symm_apply Homeomorph.continuousMapOfUnique_symm_apply

end Homeomorph

section QuotientMap

variable {X‚ÇÄ X Y Z : Type*} [TopologicalSpace X‚ÇÄ] [TopologicalSpace X] [TopologicalSpace Y]
  [TopologicalSpace Z] [LocallyCompactSpace Y] {f : X‚ÇÄ ‚Üí X}

theorem QuotientMap.continuous_lift_prod_left (hf : QuotientMap f) {g : X √ó Y ‚Üí Z}
    (hg : Continuous fun p : X‚ÇÄ √ó Y => g (f p.1, p.2)) : Continuous g := by
  let Gf : C(X‚ÇÄ, C(Y, Z)) := ContinuousMap.curry ‚ü®_, hg‚ü©
  have h : ‚àÄ x : X, Continuous fun y => g (x, y) := by
    intro x
    obtain ‚ü®x‚ÇÄ, rfl‚ü© := hf.surjective x
    exact (Gf x‚ÇÄ).continuous
  let G : X ‚Üí C(Y, Z) := fun x => ‚ü®_, h x‚ü©
  have : Continuous G := by
    rw [hf.continuous_iff]
    exact Gf.continuous
  exact ContinuousMap.continuous_uncurry_of_continuous ‚ü®G, this‚ü©
#align quotient_map.continuous_lift_prod_left QuotientMap.continuous_lift_prod_left

theorem QuotientMap.continuous_lift_prod_right (hf : QuotientMap f) {g : Y √ó X ‚Üí Z}
    (hg : Continuous fun p : Y √ó X‚ÇÄ => g (p.1, f p.2)) : Continuous g := by
  have : Continuous fun p : X‚ÇÄ √ó Y => g ((Prod.swap p).1, f (Prod.swap p).2) :=
    hg.comp continuous_swap
  have : Continuous fun p : X‚ÇÄ √ó Y => (g ‚àò Prod.swap) (f p.1, p.2) := this
  exact (hf.continuous_lift_prod_left this).comp continuous_swap
#align quotient_map.continuous_lift_prod_right QuotientMap.continuous_lift_prod_right

end QuotientMap
