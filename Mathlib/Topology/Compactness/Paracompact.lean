/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Reid Barton, Yury Kudryashov
-/
import Mathlib.Topology.Homeomorph
import Mathlib.Data.Option.Basic

#align_import topology.paracompact from "leanprover-community/mathlib"@"2705404e701abc6b3127da906f40bae062a169c9"

/-!
# Paracompact topological spaces

A topological space `X` is said to be paracompact if every open covering of `X` admits a locally
finite refinement.

The definition requires that each set of the new covering is a subset of one of the sets of the
initial covering. However, one can ensure that each open covering `s : Œπ ‚Üí Set X` admits a *precise*
locally finite refinement, i.e., an open covering `t : Œπ ‚Üí Set X` with the same index set such that
`‚àÄ i, t i ‚äÜ s i`, see lemma `precise_refinement`. We also provide a convenience lemma
`precise_refinement_set` that deals with open coverings of a closed subset of `X` instead of the
whole space.

We also prove the following facts.

* Every compact space is paracompact, see instance `paracompact_of_compact`.

* A locally compact sigma compact Hausdorff space is paracompact, see instance
  `paracompact_of_locallyCompact_sigmaCompact`. Moreover, we can choose a locally finite
  refinement with sets in a given collection of filter bases of `ùìù x`, `x : X`, see
  `refinement_of_locallyCompact_sigmaCompact_of_nhds_basis`. For example, in a proper metric space
  every open covering `‚ãÉ i, s i` admits a refinement `‚ãÉ i, Metric.ball (c i) (r i)`.

* Every paracompact Hausdorff space is normal. This statement is not an instance to avoid loops in
  the instance graph.

* Every `EMetricSpace` is a paracompact space, see instance `EMetric.instParacompactSpace` in
  `Topology/EMetricSpace/Paracompact`.

## TODO

Prove (some of) [Michael's theorems](https://ncatlab.org/nlab/show/Michael%27s+theorem).

## Tags

compact space, paracompact space, locally finite covering
-/


open Set Filter Function

open Filter Topology

universe u v w

/-- A topological space is called paracompact, if every open covering of this space admits a locally
finite refinement. We use the same universe for all types in the definition to avoid creating a
class like `ParacompactSpace.{u v}`. Due to lemma `precise_refinement` below, every open covering
`s : Œ± ‚Üí Set X` indexed on `Œ± : Type v` has a *precise* locally finite refinement, i.e., a locally
finite refinement `t : Œ± ‚Üí Set X` indexed on the same type such that each `‚àÄ i, t i ‚äÜ s i`. -/
class ParacompactSpace (X : Type v) [TopologicalSpace X] : Prop where
  /-- Every open cover of a paracompact space assumes a locally finite refinement. -/
  locallyFinite_refinement :
    ‚àÄ (Œ± : Type v) (s : Œ± ‚Üí Set X), (‚àÄ a, IsOpen (s a)) ‚Üí (‚ãÉ a, s a = univ) ‚Üí
      ‚àÉ (Œ≤ : Type v) (t : Œ≤ ‚Üí Set X),
        (‚àÄ b, IsOpen (t b)) ‚àß (‚ãÉ b, t b = univ) ‚àß LocallyFinite t ‚àß ‚àÄ b, ‚àÉ a, t b ‚äÜ s a
#align paracompact_space ParacompactSpace

variable {Œπ : Type u} {X : Type v} {Y : Type w} [TopologicalSpace X] [TopologicalSpace Y]

/-- Any open cover of a paracompact space has a locally finite *precise* refinement, that is,
one indexed on the same type with each open set contained in the corresponding original one. -/
theorem precise_refinement [ParacompactSpace X] (u : Œπ ‚Üí Set X) (uo : ‚àÄ a, IsOpen (u a))
    (uc : ‚ãÉ i, u i = univ) : ‚àÉ v : Œπ ‚Üí Set X, (‚àÄ a, IsOpen (v a)) ‚àß ‚ãÉ i, v i = univ ‚àß
    LocallyFinite v ‚àß ‚àÄ a, v a ‚äÜ u a := by
  -- Apply definition to `range u`, then turn existence quantifiers into functions using `choose`
  have := ParacompactSpace.locallyFinite_refinement (range u) (fun r ‚Ü¶ (r : Set X))
    (forall_subtype_range_iff.2 uo) (by rwa [‚Üê sUnion_range, Subtype.range_coe])
  simp only [exists_subtype_range_iff, iUnion_eq_univ_iff] at this
  choose Œ± t hto hXt htf ind hind using this
  choose t_inv ht_inv using hXt
  choose U hxU hU using htf
  -- Send each `i` to the union of `t a` over `a ‚àà ind ‚Åª¬π' {i}`
  refine' ‚ü®fun i ‚Ü¶ ‚ãÉ (a : Œ±) (_ : ind a = i), t a, _, _, _, _‚ü©
  ¬∑ exact fun a ‚Ü¶ isOpen_iUnion fun a ‚Ü¶ isOpen_iUnion fun _ ‚Ü¶ hto a
  ¬∑ simp only [eq_univ_iff_forall, mem_iUnion]
    exact fun x ‚Ü¶ ‚ü®ind (t_inv x), _, rfl, ht_inv _‚ü©
  ¬∑ refine' fun x ‚Ü¶ ‚ü®U x, hxU x, ((hU x).image ind).subset _‚ü©
    simp only [subset_def, mem_iUnion, mem_setOf_eq, Set.Nonempty, mem_inter_iff]
    rintro i ‚ü®y, ‚ü®a, rfl, hya‚ü©, hyU‚ü©
    exact mem_image_of_mem _ ‚ü®y, hya, hyU‚ü©
  ¬∑ simp only [subset_def, mem_iUnion]
    rintro i x ‚ü®a, rfl, hxa‚ü©
    exact hind _ hxa
#align precise_refinement precise_refinement

/-- In a paracompact space, every open covering of a closed set admits a locally finite refinement
indexed by the same type. -/
theorem precise_refinement_set [ParacompactSpace X] {s : Set X} (hs : IsClosed s) (u : Œπ ‚Üí Set X)
    (uo : ‚àÄ i, IsOpen (u i)) (us : s ‚äÜ ‚ãÉ i, u i) :
    ‚àÉ v : Œπ ‚Üí Set X, (‚àÄ i, IsOpen (v i)) ‚àß (s ‚äÜ ‚ãÉ i, v i) ‚àß LocallyFinite v ‚àß ‚àÄ i, v i ‚äÜ u i := by
  -- Porting note (#10888): added proof of uc
  have uc : (iUnion fun i => Option.elim' s·∂ú u i) = univ := by
    apply Subset.antisymm (subset_univ _)
    ¬∑ simp_rw [‚Üê compl_union_self s, Option.elim', iUnion_option]
      apply union_subset_union_right s·∂ú us
  rcases precise_refinement (Option.elim' s·∂ú u) (Option.forall.2 ‚ü®isOpen_compl_iff.2 hs, uo‚ü©)
      uc with
    ‚ü®v, vo, vc, vf, vu‚ü©
  refine' ‚ü®v ‚àò some, fun i ‚Ü¶ vo _, _, vf.comp_injective (Option.some_injective _), fun i ‚Ü¶ vu _‚ü©
  ¬∑ simp only [iUnion_option, ‚Üê compl_subset_iff_union] at vc
    exact Subset.trans (subset_compl_comm.1 <| vu Option.none) vc
#align precise_refinement_set precise_refinement_set

theorem ClosedEmbedding.paracompactSpace [ParacompactSpace Y] {e : X ‚Üí Y} (he : ClosedEmbedding e) :
    ParacompactSpace X where
  locallyFinite_refinement Œ± s ho hu := by
    choose U hUo hU using fun a ‚Ü¶ he.isOpen_iff.1 (ho a)
    simp only [‚Üê hU] at hu ‚ä¢
    have heU : range e ‚äÜ ‚ãÉ i, U i := by
      simpa only [range_subset_iff, mem_iUnion, iUnion_eq_univ_iff] using hu
    rcases precise_refinement_set he.isClosed_range U hUo heU with ‚ü®V, hVo, heV, hVf, hVU‚ü©
    refine ‚ü®Œ±, fun a ‚Ü¶ e ‚Åª¬π' (V a), fun a ‚Ü¶ (hVo a).preimage he.continuous, ?_,
      hVf.preimage_continuous he.continuous, fun a ‚Ü¶ ‚ü®a, preimage_mono (hVU a)‚ü©‚ü©
    simpa only [range_subset_iff, mem_iUnion, iUnion_eq_univ_iff] using heV

theorem Homeomorph.paracompactSpace_iff (e : X ‚âÉ‚Çú Y) : ParacompactSpace X ‚Üî ParacompactSpace Y :=
  ‚ü®fun _ ‚Ü¶ e.symm.closedEmbedding.paracompactSpace, fun _ ‚Ü¶ e.closedEmbedding.paracompactSpace‚ü©

/-- The product of a compact space and a paracompact space is a paracompact space. The formalization
is based on https://dantopology.wordpress.com/2009/10/24/compact-x-paracompact-is-paracompact/
with some minor modifications.

This version assumes that `X` in `X √ó Y` is compact and `Y` is paracompact, see next lemma for the
other case. -/
instance (priority := 200) [CompactSpace X] [ParacompactSpace Y] : ParacompactSpace (X √ó Y) where
  locallyFinite_refinement Œ± s ho hu := by
    have : ‚àÄ (x : X) (y : Y), ‚àÉ (a : Œ±) (U : Set X) (V : Set Y),
        IsOpen U ‚àß IsOpen V ‚àß x ‚àà U ‚àß y ‚àà V ‚àß U √óÀ¢ V ‚äÜ s a := fun x y ‚Ü¶
      (iUnion_eq_univ_iff.1 hu (x, y)).imp fun a ha ‚Ü¶ isOpen_prod_iff.1 (ho a) x y ha
    choose a U V hUo hVo hxU hyV hUV using this
    choose T hT using fun y ‚Ü¶ CompactSpace.elim_nhds_subcover (U ¬∑ y) fun x ‚Ü¶
      (hUo x y).mem_nhds (hxU x y)
    set W : Y ‚Üí Set Y := fun y ‚Ü¶ ‚ãÇ x ‚àà T y, V x y
    have hWo : ‚àÄ y, IsOpen (W y) := fun y ‚Ü¶ isOpen_biInter_finset fun _ _ ‚Ü¶ hVo _ _
    have hW : ‚àÄ y, y ‚àà W y := fun _ ‚Ü¶ mem_iInter‚ÇÇ.2 fun _ _ ‚Ü¶ hyV _ _
    rcases precise_refinement W hWo (iUnion_eq_univ_iff.2 fun y ‚Ü¶ ‚ü®y, hW y‚ü©)
      with ‚ü®E, hEo, hE, hEf, hEA‚ü©
    refine ‚ü®Œ£ y, T y, fun z ‚Ü¶ U z.2.1 z.1 √óÀ¢ E z.1, fun _ ‚Ü¶ (hUo _ _).prod (hEo _),
      iUnion_eq_univ_iff.2 fun (x, y) ‚Ü¶ ?_, fun (x, y) ‚Ü¶ ?_, fun ‚ü®y, x, hx‚ü© ‚Ü¶ ?_‚ü©
    ¬∑ rcases iUnion_eq_univ_iff.1 hE y with ‚ü®b, hb‚ü©
      rcases iUnion‚ÇÇ_eq_univ_iff.1 (hT b) x with ‚ü®a, ha, hx‚ü©
      exact ‚ü®‚ü®b, a, ha‚ü©, hx, hb‚ü©
    ¬∑ rcases hEf y with ‚ü®t, ht, htf‚ü©
      refine ‚ü®univ √óÀ¢ t, prod_mem_nhds univ_mem ht, ?_‚ü©
      refine (htf.biUnion fun y _ ‚Ü¶ finite_range (Sigma.mk y)).subset ?_
      rintro ‚ü®b, a, ha‚ü© ‚ü®‚ü®c, d‚ü©, ‚ü®-, hd : d ‚àà E b‚ü©, -, hdt : d ‚àà t‚ü©
      exact mem_iUnion‚ÇÇ.2 ‚ü®b, ‚ü®d, hd, hdt‚ü©, mem_range_self _‚ü©
    ¬∑ refine ‚ü®a x y, (Set.prod_mono Subset.rfl ?_).trans (hUV x y)‚ü©
      exact (hEA _).trans (iInter‚ÇÇ_subset x hx)

instance (priority := 200) [ParacompactSpace X] [CompactSpace Y] : ParacompactSpace (X √ó Y) :=
  (Homeomorph.prodComm X Y).paracompactSpace_iff.2 inferInstance

-- See note [lower instance priority]
/-- A compact space is paracompact. -/
instance (priority := 100) paracompact_of_compact [CompactSpace X] : ParacompactSpace X := by
  -- the proof is trivial: we choose a finite subcover using compactness, and use it
  refine' ‚ü®fun Œπ s ho hu ‚Ü¶ _‚ü©
  rcases isCompact_univ.elim_finite_subcover _ ho hu.ge with ‚ü®T, hT‚ü©
  refine' ‚ü®(T : Set Œπ), fun t ‚Ü¶ s t, fun t ‚Ü¶ ho _, _, locallyFinite_of_finite _,
    fun t ‚Ü¶ ‚ü®t, Subset.rfl‚ü©‚ü©
  simpa only [iUnion_coe_set, ‚Üê univ_subset_iff]
#align paracompact_of_compact paracompact_of_compact

/-- Let `X` be a locally compact sigma compact Hausdorff topological space, let `s` be a closed set
in `X`. Suppose that for each `x ‚àà s` the sets `B x : Œπ x ‚Üí Set X` with the predicate
`p x : Œπ x ‚Üí Prop` form a basis of the filter `ùìù x`. Then there exists a locally finite covering
`fun i ‚Ü¶ B (c i) (r i)` of `s` such that all ‚Äúcenters‚Äù `c i` belong to `s` and each `r i` satisfies
`p (c i)`.

The notation is inspired by the case `B x r = Metric.ball x r` but the theorem applies to
`nhds_basis_opens` as well. If the covering must be subordinate to some open covering of `s`, then
the user should use a basis obtained by `Filter.HasBasis.restrict_subset` or a similar lemma, see
the proof of `paracompact_of_locallyCompact_sigmaCompact` for an example.

The formalization is based on two [ncatlab](https://ncatlab.org/) proofs:
* [locally compact and sigma compact spaces are paracompact](https://ncatlab.org/nlab/show/locally+compact+and+sigma-compact+spaces+are+paracompact);
* [open cover of smooth manifold admits locally finite refinement by closed balls](https://ncatlab.org/nlab/show/partition+of+unity#ExistenceOnSmoothManifolds).

See also `refinement_of_locallyCompact_sigmaCompact_of_nhds_basis` for a version of this lemma
dealing with a covering of the whole space.

In most cases (namely, if `B c r ‚à™ B c r'` is again a set of the form `B c r''`) it is possible
to choose `Œ± = X`. This fact is not yet formalized in `mathlib`. -/
theorem refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set [WeaklyLocallyCompactSpace X]
    [SigmaCompactSpace X] [T2Space X] {Œπ : X ‚Üí Type u} {p : ‚àÄ x, Œπ x ‚Üí Prop} {B : ‚àÄ x, Œπ x ‚Üí Set X}
    {s : Set X} (hs : IsClosed s) (hB : ‚àÄ x ‚àà s, (ùìù x).HasBasis (p x) (B x)) :
    ‚àÉ (Œ± : Type v) (c : Œ± ‚Üí X) (r : ‚àÄ a, Œπ (c a)),
      (‚àÄ a, c a ‚àà s ‚àß p (c a) (r a)) ‚àß
        (s ‚äÜ ‚ãÉ a, B (c a) (r a)) ‚àß LocallyFinite fun a ‚Ü¶ B (c a) (r a) := by
  classical
    -- For technical reasons we prepend two empty sets to the sequence `CompactExhaustion.choice X`
    set K' : CompactExhaustion X := CompactExhaustion.choice X
    set K : CompactExhaustion X := K'.shiftr.shiftr
    set Kdiff := fun n ‚Ü¶ K (n + 1) \ interior (K n)
    -- Now we restate some properties of `CompactExhaustion` for `K`/`Kdiff`
    have hKcov : ‚àÄ x, x ‚àà Kdiff (K'.find x + 1) := fun x ‚Ü¶ by
      simpa only [K'.find_shiftr] using
        diff_subset_diff_right interior_subset (K'.shiftr.mem_diff_shiftr_find x)
    have Kdiffc : ‚àÄ n, IsCompact (Kdiff n ‚à© s) :=
      fun n ‚Ü¶ ((K.isCompact _).diff isOpen_interior).inter_right hs
    -- Next we choose a finite covering `B (c n i) (r n i)` of each
    -- `Kdiff (n + 1) ‚à© s` such that `B (c n i) (r n i) ‚à© s` is disjoint with `K n`
    have : ‚àÄ (n) (x : ‚Üë(Kdiff (n + 1) ‚à© s)), (K n)·∂ú ‚àà ùìù (x : X) :=
      fun n x ‚Ü¶ (K.isClosed n).compl_mem_nhds fun hx' ‚Ü¶ x.2.1.2 <| K.subset_interior_succ _ hx'
    -- Porting note: Commented out `haveI` for now.
    --haveI : ‚àÄ (n) (x : ‚Üë(Kdiff n ‚à© s)), Nonempty (Œπ x) := fun n x ‚Ü¶ (hB x x.2.2).nonempty
    choose! r hrp hr using fun n (x : ‚Üë(Kdiff (n + 1) ‚à© s)) ‚Ü¶ (hB x x.2.2).mem_iff.1 (this n x)
    have hxr : ‚àÄ (n x) (hx : x ‚àà Kdiff (n + 1) ‚à© s), B x (r n ‚ü®x, hx‚ü©) ‚àà ùìù x := fun n x hx ‚Ü¶
      (hB x hx.2).mem_of_mem (hrp _ ‚ü®x, hx‚ü©)
    choose T hT using fun n ‚Ü¶ (Kdiffc (n + 1)).elim_nhds_subcover' _ (hxr n)
    set T' : ‚àÄ n, Set ‚Üë(Kdiff (n + 1) ‚à© s) := fun n ‚Ü¶ T n
    -- Finally, we take the union of all these coverings
    refine' ‚ü®Œ£n, T' n, fun a ‚Ü¶ a.2, fun a ‚Ü¶ r a.1 a.2, _, _, _‚ü©
    ¬∑ rintro ‚ü®n, x, hx‚ü©
      exact ‚ü®x.2.2, hrp _ _‚ü©
    ¬∑ refine' fun x hx ‚Ü¶ mem_iUnion.2 _
      rcases mem_iUnion‚ÇÇ.1 (hT _ ‚ü®hKcov x, hx‚ü©) with ‚ü®‚ü®c, hc‚ü©, hcT, hcx‚ü©
      exact ‚ü®‚ü®_, ‚ü®c, hc‚ü©, hcT‚ü©, hcx‚ü©
    ¬∑ intro x
      refine'
        ‚ü®interior (K (K'.find x + 3)),
          IsOpen.mem_nhds isOpen_interior (K.subset_interior_succ _ (hKcov x).1), _‚ü©
      have : (‚ãÉ k ‚â§ K'.find x + 2, range (Sigma.mk k) : Set (Œ£n, T' n)).Finite :=
        (finite_le_nat _).biUnion fun k _ ‚Ü¶ finite_range _
      apply this.subset
      rintro ‚ü®k, c, hc‚ü©
      simp only [mem_iUnion, mem_setOf_eq, mem_image, Subtype.coe_mk]
      rintro ‚ü®x, hxB : x ‚àà B c (r k c), hxK‚ü©
      refine' ‚ü®k, _, ‚ü®c, hc‚ü©, rfl‚ü©
      have := (mem_compl_iff _ _).1 (hr k c hxB)
      contrapose! this with hnk
      exact K.subset hnk (interior_subset hxK)
#align refinement_of_locally_compact_sigma_compact_of_nhds_basis_set refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set

/-- Let `X` be a locally compact sigma compact Hausdorff topological space. Suppose that for each
`x` the sets `B x : Œπ x ‚Üí Set X` with the predicate `p x : Œπ x ‚Üí Prop` form a basis of the filter
`ùìù x`. Then there exists a locally finite covering `fun i ‚Ü¶ B (c i) (r i)` of `X` such that each
`r i` satisfies `p (c i)`.

The notation is inspired by the case `B x r = Metric.ball x r` but the theorem applies to
`nhds_basis_opens` as well. If the covering must be subordinate to some open covering of `s`, then
the user should use a basis obtained by `Filter.HasBasis.restrict_subset` or a similar lemma, see
the proof of `paracompact_of_locallyCompact_sigmaCompact` for an example.

The formalization is based on two [ncatlab](https://ncatlab.org/) proofs:
* [locally compact and sigma compact spaces are paracompact](https://ncatlab.org/nlab/show/locally+compact+and+sigma-compact+spaces+are+paracompact);
* [open cover of smooth manifold admits locally finite refinement by closed balls](https://ncatlab.org/nlab/show/partition+of+unity#ExistenceOnSmoothManifolds).

See also `refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set` for a version of this lemma
dealing with a covering of a closed set.

In most cases (namely, if `B c r ‚à™ B c r'` is again a set of the form `B c r''`) it is possible
to choose `Œ± = X`. This fact is not yet formalized in `mathlib`. -/
theorem refinement_of_locallyCompact_sigmaCompact_of_nhds_basis [WeaklyLocallyCompactSpace X]
    [SigmaCompactSpace X] [T2Space X] {Œπ : X ‚Üí Type u} {p : ‚àÄ x, Œπ x ‚Üí Prop} {B : ‚àÄ x, Œπ x ‚Üí Set X}
    (hB : ‚àÄ x, (ùìù x).HasBasis (p x) (B x)) :
    ‚àÉ (Œ± : Type v) (c : Œ± ‚Üí X) (r : ‚àÄ a, Œπ (c a)),
      (‚àÄ a, p (c a) (r a)) ‚àß ‚ãÉ a, B (c a) (r a) = univ ‚àß LocallyFinite fun a ‚Ü¶ B (c a) (r a) :=
  let ‚ü®Œ±, c, r, hp, hU, hfin‚ü© :=
    refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set isClosed_univ fun x _ ‚Ü¶ hB x
  ‚ü®Œ±, c, r, fun a ‚Ü¶ (hp a).2, univ_subset_iff.1 hU, hfin‚ü©
#align refinement_of_locally_compact_sigma_compact_of_nhds_basis refinement_of_locallyCompact_sigmaCompact_of_nhds_basis

-- See note [lower instance priority]
/-- A locally compact sigma compact Hausdorff space is paracompact. See also
`refinement_of_locallyCompact_sigmaCompact_of_nhds_basis` for a more precise statement. -/
instance (priority := 100) paracompact_of_locallyCompact_sigmaCompact [WeaklyLocallyCompactSpace X]
    [SigmaCompactSpace X] [T2Space X] : ParacompactSpace X := by
  refine' ‚ü®fun Œ± s ho hc ‚Ü¶ _‚ü©
  choose i hi using iUnion_eq_univ_iff.1 hc
  have : ‚àÄ x : X, (ùìù x).HasBasis (fun t : Set X ‚Ü¶ (x ‚àà t ‚àß IsOpen t) ‚àß t ‚äÜ s (i x)) id :=
    fun x : X ‚Ü¶ (nhds_basis_opens x).restrict_subset (IsOpen.mem_nhds (ho (i x)) (hi x))
  rcases refinement_of_locallyCompact_sigmaCompact_of_nhds_basis this with
    ‚ü®Œ≤, c, t, hto, htc, htf‚ü©
  exact ‚ü®Œ≤, t, fun x ‚Ü¶ (hto x).1.2, htc, htf, fun b ‚Ü¶ ‚ü®i <| c b, (hto b).2‚ü©‚ü©
#align paracompact_of_locally_compact_sigma_compact paracompact_of_locallyCompact_sigmaCompact

/- **Dieudonn√©'s theorem**: a paracompact Hausdorff space is normal.
Formalization is based on the proof
at [ncatlab](https://ncatlab.org/nlab/show/paracompact+Hausdorff+spaces+are+normal). -/
instance (priority := 100) T4Space.of_paracompactSpace_t2Space [T2Space X] [ParacompactSpace X] :
    T4Space X := by
  -- First we show how to go from points to a set on one side.
  have : ‚àÄ s t : Set X, IsClosed s ‚Üí
      (‚àÄ x ‚àà s, ‚àÉ u v, IsOpen u ‚àß IsOpen v ‚àß x ‚àà u ‚àß t ‚äÜ v ‚àß Disjoint u v) ‚Üí
      ‚àÉ u v, IsOpen u ‚àß IsOpen v ‚àß s ‚äÜ u ‚àß t ‚äÜ v ‚àß Disjoint u v := fun s t hs H ‚Ü¶ by
    /- For each `x ‚àà s` we choose open disjoint `u x ‚àã x` and `v x ‚äá t`. The sets `u x` form an
        open covering of `s`. We choose a locally finite refinement `u' : s ‚Üí Set X`, then
        `‚ãÉ i, u' i` and `(closure (‚ãÉ i, u' i))·∂ú` are disjoint open neighborhoods of `s` and `t`. -/
    choose u v hu hv hxu htv huv using SetCoe.forall'.1 H
    rcases precise_refinement_set hs u hu fun x hx ‚Ü¶ mem_iUnion.2 ‚ü®‚ü®x, hx‚ü©, hxu _‚ü© with
      ‚ü®u', hu'o, hcov', hu'fin, hsub‚ü©
    refine' ‚ü®‚ãÉ i, u' i, (closure (‚ãÉ i, u' i))·∂ú, isOpen_iUnion hu'o, isClosed_closure.isOpen_compl,
      hcov', _, disjoint_compl_right.mono le_rfl (compl_le_compl subset_closure)‚ü©
    rw [hu'fin.closure_iUnion, compl_iUnion, subset_iInter_iff]
    refine' fun i x hxt hxu ‚Ü¶
      absurd (htv i hxt) (closure_minimal _ (isClosed_compl_iff.2 <| hv _) hxu)
    exact fun y hyu hyv ‚Ü¶ (huv i).le_bot ‚ü®hsub _ hyu, hyv‚ü©
  -- Now we apply the lemma twice: first to `s` and `t`, then to `t` and each point of `s`.
  refine { normal := fun s t hs ht hst ‚Ü¶ this s t hs fun x hx ‚Ü¶ ?_ }
  rcases this t {x} ht fun y hy ‚Ü¶ (by
    simp_rw [singleton_subset_iff]
    exact t2_separation (hst.symm.ne_of_mem hy hx))
    with ‚ü®v, u, hv, hu, htv, hxu, huv‚ü©
  exact ‚ü®u, v, hu, hv, singleton_subset_iff.1 hxu, htv, huv.symm‚ü©
#align normal_of_paracompact_t2 T4Space.of_paracompactSpace_t2Space
