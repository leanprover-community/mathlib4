/-
Copyright (c) 2024 Etienne Marion. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Etienne Marion
-/
import Mathlib.Topology.Category.CompactlyGenerated
import Mathlib.Topology.Compactification.OnePoint

/-!
# Compactly generated topological spaces

This file defines compactly generated topological spaces as a special case of
`UCompactlyGeneratedSpaces`. A compactly generated space is a space such that a set `s` is closed
if and only if for all compact Hausdorff space `K` and `f : K ‚Üí X` continuous, `f ‚Åª¬π' s` is closed
in `K`. The typeclass `CompactlyGeneratedSpace` is defined by taking `K : Type u` when `X : Type u`,
contrary to `UCompactlyGeneratedSpace` where spaces `K` can be taken in another universe.

We prov basic properties and instances, and prove that a `SequentialSpace` is compactly generated,
as well as Hausdorff `WeaklyLocallyCompactSpace`.

## Main definitions

* `CompactlyGeneratedSpace X`: the topology of `X` is coinduced by continuous maps coming from
  compact Hausdorff spaces.

## References

* <https://en.wikipedia.org/wiki/Compactly_generated_space>
* <https://ncatlab.org/nlab/files/StricklandCGHWSpaces.pdf>

## Tags

compactly generated space
-/

universe u v

open TopologicalSpace Filter Topology Set

variable {X : Type u} {Y : Type v} [TopologicalSpace X] [TopologicalSpace Y]

/-- A topological space `X : Type u` is compactly generated if its topology is coinduced by
continuous maps `f : K ‚Üí X`, where `K : Type u` is compact Hausdorff. -/
abbrev CompactlyGeneratedSpace (X : Type u) [TopologicalSpace X] : Prop :=
  UCompactlyGeneratedSpace.{u} X

/-- A topological space `X` is compactly generated if a set `s` is closed when `f ‚Åª¬π' s` is
closed for every continuous map `f : K ‚Üí X`, where `K` is compact Hausdorff. -/
theorem compactlyGeneratedSpace_of_isClosed
    (h : ‚àÄ (s : Set X), (‚àÄ {K : Type u} [TopologicalSpace K], [CompactSpace K] ‚Üí [T2Space K] ‚Üí
      ‚àÄ (f : K ‚Üí X), Continuous f ‚Üí IsClosed (f ‚Åª¬π' s)) ‚Üí IsClosed s) :
    CompactlyGeneratedSpace X := by
  refine uCompactlyGeneratedSpace_of_continuous_maps fun f h' ‚Ü¶
    continuous_iff_isClosed.2 fun t ht ‚Ü¶ h _ ?_
  intro K _ _ _ g hg
  exact ht.preimage (h' (CompHaus.of K) { toFun := g, continuous_toFun := hg })

/-- A topological space `X` is compactly generated if a set `s` is open when `f ‚Åª¬π' s` is
open for every continuous map `f : K ‚Üí X`, where `K` is compact Hausdorff. -/
theorem compactlyGeneratedSpace_of_isOpen
    (h : ‚àÄ (s : Set X), (‚àÄ {K : Type u} [TopologicalSpace K], [CompactSpace K] ‚Üí [T2Space K] ‚Üí
      ‚àÄ (f : K ‚Üí X), Continuous f ‚Üí IsOpen (f ‚Åª¬π' s)) ‚Üí IsOpen s) :
    CompactlyGeneratedSpace X := by
  refine compactlyGeneratedSpace_of_isClosed fun s h' ‚Ü¶ isOpen_compl_iff.1 <| h _ fun f hf ‚Ü¶ ?_
  rw [preimage_compl, isOpen_compl_iff]
  exact h' f hf

/-- In a compactly generated space `X`, a set `s` is closed when `f ‚Åª¬π' s` is
closed for every continuous map `f : K ‚Üí X`, where `K` is compact Hausdorff. -/
theorem CompactlyGeneratedSpace.isClosed' [CompactlyGeneratedSpace X] {s : Set X}
    (hs : ‚àÄ {K : Type u} [TopologicalSpace K], [CompactSpace K] ‚Üí [T2Space K] ‚Üí
      ‚àÄ (f : K ‚Üí X), Continuous f ‚Üí IsClosed (f ‚Åª¬π' s)) : IsClosed s := by
  rw [eq_compactlyGenerated (X := X), TopologicalSpace.compactlyGenerated, isClosed_coinduced,
    isClosed_sigma_iff]
  exact fun ‚ü®_, f‚ü© ‚Ü¶ hs f f.continuous

/-- In a compactly generated space `X`, a set `s` is closed when `s ‚à© K` is
closed for every compact `K ‚äÜ X`. -/
theorem CompactlyGeneratedSpace.isClosed [CompactlyGeneratedSpace X] {s : Set X}
    (hs : ‚àÄ ‚¶ÉK‚¶Ñ, IsCompact K ‚Üí IsClosed (s ‚à© K)) : IsClosed s := by
  refine isClosed' fun f hf ‚Ü¶ ?_
  rw [‚Üê Set.preimage_inter_range]
  exact (hs (isCompact_range hf)).preimage hf

/-- In a compactly generated space `X`, a set `s` is open when `f ‚Åª¬π' s` is
open for every continuous map `f : K ‚Üí X`, where `K` is compact Hausdorff. -/
theorem CompactlyGeneratedSpace.isOpen' [CompactlyGeneratedSpace X] {s : Set X}
    (hs : ‚àÄ {K : Type u} [TopologicalSpace K], [CompactSpace K] ‚Üí [T2Space K] ‚Üí
      ‚àÄ (f : K ‚Üí X), Continuous f ‚Üí IsOpen (f ‚Åª¬π' s)) : IsOpen s := by
  rw [eq_compactlyGenerated (X := X), TopologicalSpace.compactlyGenerated, isOpen_coinduced,
    isOpen_sigma_iff]
  exact fun ‚ü®_, f‚ü© ‚Ü¶ hs f f.continuous

/-- In a compactly generated space `X`, a set `s` is closed when `s ‚à© K` is
closed for every compact `K ‚äÜ X`. -/
theorem CompactlyGeneratedSpace.isOpen [CompactlyGeneratedSpace X] {s : Set X}
    (hs : ‚àÄ ‚¶ÉK‚¶Ñ, IsCompact K ‚Üí IsOpen (s ‚à© K)) : IsOpen s := by
  refine isOpen' fun f hf ‚Ü¶ ?_
  rw [‚Üê Set.preimage_inter_range]
  exact (hs (isCompact_range hf)).preimage hf

/-- If the topology of `X` is coinduced by a continuous function whose domain is
compactly generated, then so is `X`. -/
theorem compactlyGeneratedSpace_of_coinduced {Y : Type u}
    [tX : TopologicalSpace X] [tY : TopologicalSpace Y]
    [CompactlyGeneratedSpace X] {f : X ‚Üí Y} (hf : Continuous f) (ht : tY = coinduced f tX) :
    CompactlyGeneratedSpace Y := by
  refine compactlyGeneratedSpace_of_isClosed fun s h ‚Ü¶ ?_
  rw [ht, isClosed_coinduced]
  refine CompactlyGeneratedSpace.isClosed' fun g hg ‚Ü¶ h _ (hf.comp hg)

/-- The quotient of a compactly generated space is compactly generated. -/
instance {S : Setoid X} [CompactlyGeneratedSpace X] : CompactlyGeneratedSpace (Quotient S) :=
  compactlyGeneratedSpace_of_coinduced continuous_quotient_mk' rfl

/-- The sum of two compactly generated spaces is compactly generated. -/
instance [CompactlyGeneratedSpace X] [CompactlyGeneratedSpace Y] :
    CompactlyGeneratedSpace (X ‚äï Y) := by
  refine compactlyGeneratedSpace_of_isClosed fun s h ‚Ü¶ isClosed_sum_iff.2 ‚ü®?_, ?_‚ü©
  all_goals
    refine CompactlyGeneratedSpace.isClosed' ?_
    intro K _ _ _ f hf
  ¬∑ let g : ULift.{v} K ‚Üí X ‚äï Y := Sum.inl ‚àò f ‚àò ULift.down
    have hg : Continuous g := continuous_inl.comp <| hf.comp continuous_uLift_down
    exact (h g hg).preimage continuous_uLift_up
  ¬∑ let g : ULift.{u} K ‚Üí X ‚äï Y := Sum.inr ‚àò f ‚àò ULift.down
    have hg : Continuous g := continuous_inr.comp <| hf.comp continuous_uLift_down
    exact (h g hg).preimage continuous_uLift_up


instance {Œπ : Type u} {X : Œπ ‚Üí Type v} [‚àÄ i, TopologicalSpace (X i)]
    [‚àÄ i, CompactlyGeneratedSpace (X i)] : CompactlyGeneratedSpace (Œ£ i, X i) := by
  refine compactlyGeneratedSpace_of_isClosed fun s h ‚Ü¶ isClosed_sigma_iff.2 fun i ‚Ü¶
    CompactlyGeneratedSpace.isClosed' ?_
  intro K _ _ _ f hf
  let g : ULift.{u} K ‚Üí Œ£ i, X i := Sigma.mk i ‚àò f ‚àò ULift.down
  have hg : Continuous g := continuous_sigmaMk.comp <| hf.comp continuous_uLift_down
  exact (h g hg).preimage continuous_uLift_up

open OnePoint in
instance (priority := 100) [SequentialSpace X] : CompactlyGeneratedSpace X := by
  refine compactlyGeneratedSpace_of_isClosed fun s h ‚Ü¶
    SequentialSpace.isClosed_of_seq _ fun u p hu hup ‚Ü¶ ?_
  let g : ULift.{u} (OnePoint ‚Ñï) ‚Üí X := (continuousMapMkNat u p hup) ‚àò ULift.down
  change ULift.up ‚àû ‚àà g ‚Åª¬π' s
  have : Filter.Tendsto (@OnePoint.some ‚Ñï) Filter.atTop (ùìù ‚àû) := by
    rw [‚Üê Nat.cofinite_eq_atTop, ‚Üê cocompact_eq_cofinite, ‚Üê coclosedCompact_eq_cocompact]
    exact tendsto_coe_infty
  apply IsClosed.mem_of_tendsto _ ((continuous_uLift_up.tendsto ‚àû).comp this)
  ¬∑ simp only [Function.comp_apply, mem_preimage, eventually_atTop, ge_iff_le]
    exact ‚ü®0, fun b _ ‚Ü¶ hu b‚ü©
  ¬∑ exact h g ((continuousMapMkNat u p hup).continuous.comp continuous_uLift_down)

theorem compactlyGeneratedSpace_of_isClosed_of_t2 [T2Space X]
    (h : ‚àÄ s, (‚àÄ (K : Set X), IsCompact K ‚Üí IsClosed (s ‚à© K)) ‚Üí IsClosed s) :
    CompactlyGeneratedSpace X := by
  refine compactlyGeneratedSpace_of_isClosed fun s hs ‚Ü¶ h s fun K hK ‚Ü¶ ?_
  rw [Set.inter_comm, ‚Üê Subtype.image_preimage_coe]
  apply hK.isClosed.isClosedMap_subtype_val
  have : CompactSpace ‚ÜëK := isCompact_iff_compactSpace.1 hK
  exact hs Subtype.val continuous_subtype_val

theorem compactlyGeneratedSpace_of_isOpen_of_t2 [T2Space X]
    (h : ‚àÄ s, (‚àÄ (K : Set X), IsCompact K ‚Üí IsOpen ((Subtype.val) ‚Åª¬π' s : Set ‚ÜëK)) ‚Üí IsOpen s) :
    CompactlyGeneratedSpace X := by
  refine compactlyGeneratedSpace_of_isOpen fun s hs ‚Ü¶ h s fun K hK ‚Ü¶ ?_
  have : CompactSpace ‚ÜëK := isCompact_iff_compactSpace.1 hK
  exact hs Subtype.val continuous_subtype_val

instance (priority := 100) [WeaklyLocallyCompactSpace X] [T2Space X] :
    CompactlyGeneratedSpace X := by
  refine compactlyGeneratedSpace_of_isClosed_of_t2 fun s h ‚Ü¶ ?_
  rw [isClosed_iff_forall_filter]
  intro x ‚Ñ± h‚Ñ±‚ÇÅ h‚Ñ±‚ÇÇ h‚Ñ±‚ÇÉ
  rcases exists_compact_mem_nhds x with ‚ü®K, hK, K_mem‚ü©
  exact Set.mem_of_mem_inter_left <| isClosed_iff_forall_filter.1 (h _ hK) x ‚Ñ± h‚Ñ±‚ÇÅ
    (Filter.inf_principal ‚ñ∏ le_inf h‚Ñ±‚ÇÇ (le_trans h‚Ñ±‚ÇÉ <| Filter.le_principal_iff.2 K_mem)) h‚Ñ±‚ÇÉ
