/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Yury Kudryashov
-/
import Mathlib.Topology.Compactness.LocallyCompact
/-!
# Sigma-compact spaces

A œÉ-compact space is a topological space that is the union of a countable collection of compact
subspaces.

-/
open Set Filter Topology TopologicalSpace Classical

universe u v

variable {Œ± : Type u} {Œ≤ : Type v} {Œπ : Type*} {œÄ : Œπ ‚Üí Type*}

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] {s t : Set Œ±}
/-- A œÉ-compact space is a space that is the union of a countable collection of compact subspaces.
  Note that a locally compact separable T‚ÇÇ space need not be œÉ-compact.
  The sequence can be extracted using `compactCovering`. -/
class SigmaCompactSpace (Œ± : Type*) [TopologicalSpace Œ±] : Prop where
  /-- In a œÉ-compact space, there exists (by definition) a countable collection of compact subspaces
  that cover the entire space. -/
  exists_compact_covering : ‚àÉ K : ‚Ñï ‚Üí Set Œ±, (‚àÄ n, IsCompact (K n)) ‚àß ‚ãÉ n, K n = univ
#align sigma_compact_space SigmaCompactSpace

-- see Note [lower instance priority]
instance (priority := 200) CompactSpace.sigma_compact [CompactSpace Œ±] : SigmaCompactSpace Œ± :=
  ‚ü®‚ü®fun _ => univ, fun _ => isCompact_univ, iUnion_const _‚ü©‚ü©
#align compact_space.sigma_compact CompactSpace.sigma_compact

theorem SigmaCompactSpace.of_countable (S : Set (Set Œ±)) (Hc : S.Countable)
    (Hcomp : ‚àÄ s ‚àà S, IsCompact s) (HU : ‚ãÉ‚ÇÄ S = univ) : SigmaCompactSpace Œ± :=
  ‚ü®(exists_seq_cover_iff_countable ‚ü®_, isCompact_empty‚ü©).2 ‚ü®S, Hc, Hcomp, HU‚ü©‚ü©
#align sigma_compact_space.of_countable SigmaCompactSpace.of_countable

-- see Note [lower instance priority]
instance (priority := 100) sigmaCompactSpace_of_locally_compact_second_countable
    [LocallyCompactSpace Œ±] [SecondCountableTopology Œ±] : SigmaCompactSpace Œ± := by
  choose K hKc hxK using fun x : Œ± => exists_compact_mem_nhds x
  rcases countable_cover_nhds hxK with ‚ü®s, hsc, hsU‚ü©
  refine' SigmaCompactSpace.of_countable _ (hsc.image K) (ball_image_iff.2 fun x _ => hKc x) _
  rwa [sUnion_image]
#align sigma_compact_space_of_locally_compact_second_countable sigmaCompactSpace_of_locally_compact_second_countable

-- porting note: doesn't work on the same line
variable (Œ±)
variable [SigmaCompactSpace Œ±]

open SigmaCompactSpace

/-- A choice of compact covering for a `œÉ`-compact space, chosen to be monotone. -/
def compactCovering : ‚Ñï ‚Üí Set Œ± :=
  Accumulate exists_compact_covering.choose
#align compact_covering compactCovering

theorem isCompact_compactCovering (n : ‚Ñï) : IsCompact (compactCovering Œ± n) :=
  isCompact_accumulate (Classical.choose_spec SigmaCompactSpace.exists_compact_covering).1 n
#align is_compact_compact_covering isCompact_compactCovering

theorem iUnion_compactCovering : ‚ãÉ n, compactCovering Œ± n = univ := by
  rw [compactCovering, iUnion_accumulate]
  exact (Classical.choose_spec SigmaCompactSpace.exists_compact_covering).2
#align Union_compact_covering iUnion_compactCovering

@[mono]
theorem compactCovering_subset ‚¶Ém n : ‚Ñï‚¶Ñ (h : m ‚â§ n) : compactCovering Œ± m ‚äÜ compactCovering Œ± n :=
  monotone_accumulate h
#align compact_covering_subset compactCovering_subset

variable {Œ±}

theorem exists_mem_compactCovering (x : Œ±) : ‚àÉ n, x ‚àà compactCovering Œ± n :=
  iUnion_eq_univ_iff.mp (iUnion_compactCovering Œ±) x
#align exists_mem_compact_covering exists_mem_compactCovering

instance [SigmaCompactSpace Œ≤] : SigmaCompactSpace (Œ± √ó Œ≤) :=
  ‚ü®‚ü®fun n => compactCovering Œ± n √óÀ¢ compactCovering Œ≤ n, fun _ =>
      (isCompact_compactCovering _ _).prod (isCompact_compactCovering _ _), by
      simp only [iUnion_prod_of_monotone (compactCovering_subset Œ±) (compactCovering_subset Œ≤),
        iUnion_compactCovering, univ_prod_univ]‚ü©‚ü©

instance [Finite Œπ] [‚àÄ i, TopologicalSpace (œÄ i)] [‚àÄ i, SigmaCompactSpace (œÄ i)] :
    SigmaCompactSpace (‚àÄ i, œÄ i) := by
  refine' ‚ü®‚ü®fun n => Set.pi univ fun i => compactCovering (œÄ i) n,
    fun n => isCompact_univ_pi fun i => isCompact_compactCovering (œÄ i) _, _‚ü©‚ü©
  rw [iUnion_univ_pi_of_monotone]
  ¬∑ simp only [iUnion_compactCovering, pi_univ]
  ¬∑ exact fun i => compactCovering_subset (œÄ i)

instance [SigmaCompactSpace Œ≤] : SigmaCompactSpace (Sum Œ± Œ≤) :=
  ‚ü®‚ü®fun n => Sum.inl '' compactCovering Œ± n ‚à™ Sum.inr '' compactCovering Œ≤ n, fun n =>
      ((isCompact_compactCovering Œ± n).image continuous_inl).union
        ((isCompact_compactCovering Œ≤ n).image continuous_inr),
      by simp only [iUnion_union_distrib, ‚Üê image_iUnion, iUnion_compactCovering, image_univ,
        range_inl_union_range_inr]‚ü©‚ü©

instance [Countable Œπ] [‚àÄ i, TopologicalSpace (œÄ i)] [‚àÄ i, SigmaCompactSpace (œÄ i)] :
    SigmaCompactSpace (Œ£i, œÄ i) := by
  cases isEmpty_or_nonempty Œπ
  ¬∑ infer_instance
  ¬∑ rcases exists_surjective_nat Œπ with ‚ü®f, hf‚ü©
    refine' ‚ü®‚ü®fun n => ‚ãÉ k ‚â§ n, Sigma.mk (f k) '' compactCovering (œÄ (f k)) n, fun n => _, _‚ü©‚ü©
    ¬∑ refine' (finite_le_nat _).isCompact_biUnion fun k _ => _
      exact (isCompact_compactCovering _ _).image continuous_sigmaMk
    ¬∑ simp only [iUnion_eq_univ_iff, Sigma.forall, mem_iUnion]
      rw [hf.forall] -- porting note: `simp only` failed to use `hf.forall`
      intro k y
      rcases exists_mem_compactCovering y with ‚ü®n, hn‚ü©
      refine' ‚ü®max k n, k, le_max_left _ _, mem_image_of_mem _ _‚ü©
      exact compactCovering_subset _ (le_max_right _ _) hn

protected theorem ClosedEmbedding.sigmaCompactSpace {e : Œ≤ ‚Üí Œ±} (he : ClosedEmbedding e) :
    SigmaCompactSpace Œ≤ :=
  ‚ü®‚ü®fun n => e ‚Åª¬π' compactCovering Œ± n, fun n =>
      he.isCompact_preimage (isCompact_compactCovering _ _), by
      rw [‚Üê preimage_iUnion, iUnion_compactCovering, preimage_univ]‚ü©‚ü©
#align closed_embedding.sigma_compact_space ClosedEmbedding.sigmaCompactSpace

-- porting note: new lemma
theorem IsClosed.sigmaCompactSpace {s : Set Œ±} (hs : IsClosed s) : SigmaCompactSpace s :=
  (closedEmbedding_subtype_val hs).sigmaCompactSpace

instance [SigmaCompactSpace Œ≤] : SigmaCompactSpace (ULift.{u} Œ≤) :=
  ULift.closedEmbedding_down.sigmaCompactSpace

/-- If `Œ±` is a `œÉ`-compact space, then a locally finite family of nonempty sets of `Œ±` can have
only countably many elements, `Set.Countable` version. -/
protected theorem LocallyFinite.countable_univ {Œπ : Type*} {f : Œπ ‚Üí Set Œ±} (hf : LocallyFinite f)
    (hne : ‚àÄ i, (f i).Nonempty) : (univ : Set Œπ).Countable := by
  have := fun n => hf.finite_nonempty_inter_compact (isCompact_compactCovering Œ± n)
  refine (countable_iUnion fun n => (this n).countable).mono fun i _ => ?_
  rcases hne i with ‚ü®x, hx‚ü©
  rcases iUnion_eq_univ_iff.1 (iUnion_compactCovering Œ±) x with ‚ü®n, hn‚ü©
  exact mem_iUnion.2 ‚ü®n, x, hx, hn‚ü©
#align locally_finite.countable_univ LocallyFinite.countable_univ

/-- If `f : Œπ ‚Üí Set Œ±` is a locally finite covering of a œÉ-compact topological space by nonempty
sets, then the index type `Œπ` is encodable. -/
protected noncomputable def LocallyFinite.encodable {Œπ : Type*} {f : Œπ ‚Üí Set Œ±}
    (hf : LocallyFinite f) (hne : ‚àÄ i, (f i).Nonempty) : Encodable Œπ :=
  @Encodable.ofEquiv _ _ (hf.countable_univ hne).toEncodable (Equiv.Set.univ _).symm
#align locally_finite.encodable LocallyFinite.encodable

/-- In a topological space with sigma compact topology, if `f` is a function that sends each point
`x` of a closed set `s` to a neighborhood of `x` within `s`, then for some countable set `t ‚äÜ s`,
the neighborhoods `f x`, `x ‚àà t`, cover the whole set `s`. -/
theorem countable_cover_nhdsWithin_of_sigma_compact {f : Œ± ‚Üí Set Œ±} {s : Set Œ±} (hs : IsClosed s)
    (hf : ‚àÄ x ‚àà s, f x ‚àà ùìù[s] x) : ‚àÉ (t : _) (_ : t ‚äÜ s), t.Countable ‚àß s ‚äÜ ‚ãÉ x ‚àà t, f x := by
  simp only [nhdsWithin, mem_inf_principal] at hf
  choose t ht hsub using fun n =>
    ((isCompact_compactCovering Œ± n).inter_right hs).elim_nhds_subcover _ fun x hx => hf x hx.right
  refine'
    ‚ü®‚ãÉ n, (t n : Set Œ±), iUnion_subset fun n x hx => (ht n x hx).2,
      countable_iUnion fun n => (t n).countable_toSet, fun x hx => mem_iUnion‚ÇÇ.2 _‚ü©
  rcases exists_mem_compactCovering x with ‚ü®n, hn‚ü©
  rcases mem_iUnion‚ÇÇ.1 (hsub n ‚ü®hn, hx‚ü©) with ‚ü®y, hyt : y ‚àà t n, hyf : x ‚àà s ‚Üí x ‚àà f y‚ü©
  exact ‚ü®y, mem_iUnion.2 ‚ü®n, hyt‚ü©, hyf hx‚ü©
#align countable_cover_nhds_within_of_sigma_compact countable_cover_nhdsWithin_of_sigma_compact

/-- In a topological space with sigma compact topology, if `f` is a function that sends each
point `x` to a neighborhood of `x`, then for some countable set `s`, the neighborhoods `f x`,
`x ‚àà s`, cover the whole space. -/
theorem countable_cover_nhds_of_sigma_compact {f : Œ± ‚Üí Set Œ±} (hf : ‚àÄ x, f x ‚àà ùìù x) :
    ‚àÉ s : Set Œ±, s.Countable ‚àß ‚ãÉ x ‚àà s, f x = univ := by
  simp only [‚Üê nhdsWithin_univ] at hf
  rcases countable_cover_nhdsWithin_of_sigma_compact isClosed_univ fun x _ => hf x with
    ‚ü®s, -, hsc, hsU‚ü©
  exact ‚ü®s, hsc, univ_subset_iff.1 hsU‚ü©
#align countable_cover_nhds_of_sigma_compact countable_cover_nhds_of_sigma_compact




/-- An [exhaustion by compact sets](https://en.wikipedia.org/wiki/Exhaustion_by_compact_sets) of a
topological space is a sequence of compact sets `K n` such that `K n ‚äÜ interior (K (n + 1))` and
`‚ãÉ n, K n = univ`.

If `X` is a locally compact sigma compact space, then `CompactExhaustion.choice X` provides
a choice of an exhaustion by compact sets. This choice is also available as
`(default : CompactExhaustion X)`. -/
structure CompactExhaustion (X : Type*) [TopologicalSpace X] where
  /-- The sequence of compact sets that form a compact exhaustion. -/
  toFun : ‚Ñï ‚Üí Set X
  /-- The sets in the compact exhaustion are in fact compact. -/
  isCompact' : ‚àÄ n, IsCompact (toFun n)
  /-- The sets in the compact exhaustion form a sequence:
    each set is contained in the interior of the next. -/
  subset_interior_succ' : ‚àÄ n, toFun n ‚äÜ interior (toFun (n + 1))
  /-- The union of all sets in a compact exhaustion equals the entire space. -/
  iUnion_eq' : ‚ãÉ n, toFun n = univ
#align compact_exhaustion CompactExhaustion

namespace CompactExhaustion

instance : @RelHomClass (CompactExhaustion Œ±) ‚Ñï (Set Œ±) LE.le HasSubset.Subset where
  coe := toFun
  coe_injective' | ‚ü®_, _, _, _‚ü©, ‚ü®_, _, _, _‚ü©, rfl => rfl
  map_rel f _ _ h := monotone_nat_of_le_succ
    (fun n ‚Ü¶ (f.subset_interior_succ' n).trans interior_subset) h

variable (K : CompactExhaustion Œ±)

@[simp]
theorem toFun_eq_coe : K.toFun = K := rfl

protected theorem isCompact (n : ‚Ñï) : IsCompact (K n) :=
  K.isCompact' n
#align compact_exhaustion.is_compact CompactExhaustion.isCompact

theorem subset_interior_succ (n : ‚Ñï) : K n ‚äÜ interior (K (n + 1)) :=
  K.subset_interior_succ' n
#align compact_exhaustion.subset_interior_succ CompactExhaustion.subset_interior_succ

@[mono]
protected theorem subset ‚¶Ém n : ‚Ñï‚¶Ñ (h : m ‚â§ n) : K m ‚äÜ K n :=
  OrderHomClass.mono K h
#align compact_exhaustion.subset CompactExhaustion.subset

theorem subset_succ (n : ‚Ñï) : K n ‚äÜ K (n + 1) := K.subset n.le_succ
#align compact_exhaustion.subset_succ CompactExhaustion.subset_succ

theorem subset_interior ‚¶Ém n : ‚Ñï‚¶Ñ (h : m < n) : K m ‚äÜ interior (K n) :=
  Subset.trans (K.subset_interior_succ m) <| interior_mono <| K.subset h
#align compact_exhaustion.subset_interior CompactExhaustion.subset_interior

theorem iUnion_eq : ‚ãÉ n, K n = univ :=
  K.iUnion_eq'
#align compact_exhaustion.Union_eq CompactExhaustion.iUnion_eq

theorem exists_mem (x : Œ±) : ‚àÉ n, x ‚àà K n :=
  iUnion_eq_univ_iff.1 K.iUnion_eq x
#align compact_exhaustion.exists_mem CompactExhaustion.exists_mem

/-- The minimal `n` such that `x ‚àà K n`. -/
protected noncomputable def find (x : Œ±) : ‚Ñï :=
  Nat.find (K.exists_mem x)
#align compact_exhaustion.find CompactExhaustion.find

theorem mem_find (x : Œ±) : x ‚àà K (K.find x) :=
  Nat.find_spec (K.exists_mem x)
#align compact_exhaustion.mem_find CompactExhaustion.mem_find

theorem mem_iff_find_le {x : Œ±} {n : ‚Ñï} : x ‚àà K n ‚Üî K.find x ‚â§ n :=
  ‚ü®fun h => Nat.find_min' (K.exists_mem x) h, fun h => K.subset h <| K.mem_find x‚ü©
#align compact_exhaustion.mem_iff_find_le CompactExhaustion.mem_iff_find_le

/-- Prepend the empty set to a compact exhaustion `K n`. -/
def shiftr : CompactExhaustion Œ± where
  toFun n := Nat.casesOn n ‚àÖ K
  isCompact' n := Nat.casesOn n isCompact_empty K.isCompact
  subset_interior_succ' n := Nat.casesOn n (empty_subset _) K.subset_interior_succ
  iUnion_eq' := iUnion_eq_univ_iff.2 fun x => ‚ü®K.find x + 1, K.mem_find x‚ü©
#align compact_exhaustion.shiftr CompactExhaustion.shiftr

@[simp]
theorem find_shiftr (x : Œ±) : K.shiftr.find x = K.find x + 1 :=
  Nat.find_comp_succ _ _ (not_mem_empty _)
#align compact_exhaustion.find_shiftr CompactExhaustion.find_shiftr

theorem mem_diff_shiftr_find (x : Œ±) : x ‚àà K.shiftr (K.find x + 1) \ K.shiftr (K.find x) :=
  ‚ü®K.mem_find _,
    mt K.shiftr.mem_iff_find_le.1 <| by simp only [find_shiftr, not_le, Nat.lt_succ_self]‚ü©
#align compact_exhaustion.mem_diff_shiftr_find CompactExhaustion.mem_diff_shiftr_find

/-- A choice of an
[exhaustion by compact sets](https://en.wikipedia.org/wiki/Exhaustion_by_compact_sets)
of a weakly locally compact œÉ-compact space. -/
noncomputable def choice (X : Type*) [TopologicalSpace X] [WeaklyLocallyCompactSpace X]
    [SigmaCompactSpace X] : CompactExhaustion X := by
  apply Classical.choice
  let K : ‚Ñï ‚Üí { s : Set X // IsCompact s } := fun n =>
    Nat.recOn n ‚ü®‚àÖ, isCompact_empty‚ü© fun n s =>
      ‚ü®(exists_compact_superset s.2).choose ‚à™ compactCovering X n,
        (exists_compact_superset s.2).choose_spec.1.union (isCompact_compactCovering _ _)‚ü©
  refine' ‚ü®‚ü®fun n => (K n).1, fun n => (K n).2, fun n => _, _‚ü©‚ü©
  ¬∑ exact Subset.trans (exists_compact_superset (K n).2).choose_spec.2
      (interior_mono <| subset_union_left _ _)
  ¬∑ refine' univ_subset_iff.1 (iUnion_compactCovering X ‚ñ∏ _)
    exact iUnion_mono' fun n => ‚ü®n + 1, subset_union_right _ _‚ü©
#align compact_exhaustion.choice CompactExhaustion.choice

noncomputable instance [LocallyCompactSpace Œ±] [SigmaCompactSpace Œ±] :
    Inhabited (CompactExhaustion Œ±) :=
  ‚ü®CompactExhaustion.choice Œ±‚ü©

end CompactExhaustion
