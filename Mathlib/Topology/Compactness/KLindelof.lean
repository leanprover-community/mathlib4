/-
Copyright (c) 2024 Josha Dekker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Josha Dekker
-/
import Mathlib.Topology.Compactness.SigmaCompact
import Mathlib.Order.Filter.CardinalInter
import Mathlib.Topology.ContinuousOn
import Mathlib.Topology.Compactness.Lindelof
/-!
# Œö-Lindel√∂f sets and Œ∫-Lindel√∂f spaces
(Note, this is different from k-Lindel√∂f spaces, e.g.
  https://topology.pi-base.org/properties/P000128)

## Main definitions

We define the following properties for sets in a topological space:

* `IsKLindelof Œ∫ s`: Two definitions are possible here. The more standard definition is that
every open cover that contains `s` contains a subcover of cardinality less than `Œ∫`.
We choose for the equivalent definition where we require that every nontrivial CardinalInterFilter
with cardinality `Œ∫` has a clusterpoint.
Equivalence is established in `isKLindelof_iff_cardinal_subcover` when `Œ∫` is regular.

* `KLindelofSpace X`: `X` is `Œ∫`-Lindel√∂f if it is `Œ∫`-Lindel√∂f as a set.
* `NonKLindelofSpace`: a space that is not a `Œ∫`-Lindel√∂f space, e.g. the Long Line.

## Main results

* `isKLindelof_iff_cardinal_subcover`: A set is `Œ∫`-Lindel√∂f iff every open cover has a
  subcover of cardinality Œ∫.

## Implementation details

* This API is mainly based on the API for `IsCompact` and `IsLindelof` and follows notation
  and style as much as possible.
-/
open Set Filter Topology TopologicalSpace Cardinal

universe u v

variable {X : Type u} {Y : Type u} {Œπ : Type u}
variable [TopologicalSpace X] [TopologicalSpace Y] {s t : Set X}
variable {Œ∫ : Cardinal.{u}}

section KLindelof

/-- A set `s` is `Œ∫`-Lindel√∂f if every nontrivial `CardinalInterFilter f Œ∫` that contains `s`,
  has a clusterpoint in `s`. The filter-free definition is given by
  `isKLindelof_iff_cardinal_subcover`. -/
def IsKLindelof (Œ∫ : Cardinal) (s : Set X) :=
  ‚àÄ ‚¶Éf‚¶Ñ [NeBot f] [CardinalInterFilter f Œ∫], f ‚â§ ùìü s ‚Üí ‚àÉ x ‚àà s, ClusterPt x f

/-- The complement to a `Œ∫`-Lindel√∂f set belongs to a `CardinalInterFilter f Œ∫` if it belongs to
each filter `ùìù x ‚äì f`, `x ‚àà s`. -/
theorem IsKLindelof.compl_mem_sets (hs : IsKLindelof Œ∫ s) {f : Filter X}
    [CardinalInterFilter f Œ∫] (hf : ‚àÄ x ‚àà s, s·∂ú ‚àà ùìù x ‚äì f) : s·∂ú ‚àà f := by
  contrapose! hf
  simp only [not_mem_iff_inf_principal_compl, compl_compl, inf_assoc] at hf ‚ä¢
  exact hs inf_le_right

/-- The complement to a `Œ∫`-Lindel√∂f set belongs to a `CardinalInterFilter f Œ∫` if each `x ‚àà s` has
a neighborhood `t` within `s` such that `t·∂ú` belongs to `f`. -/
theorem IsKLindelof.compl_mem_sets_of_nhdsWithin (hs : IsKLindelof Œ∫ s)
    {f : Filter X} [CardinalInterFilter f Œ∫] (hf : ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, t·∂ú ‚àà f) : s·∂ú ‚àà f := by
  refine hs.compl_mem_sets fun x hx ‚Ü¶ ?_
  rw [‚Üê disjoint_principal_right, disjoint_right_comm, (basis_sets _).disjoint_iff_left]
  exact hf x hx

/-- If `p : Set X ‚Üí Prop` is stable under restriction and union, and each point `x`
  of a `Œ∫`-Lindel√∂f set `s` has a neighborhood `t` within `s` such that `p t`, then `p s` holds. -/
@[elab_as_elim]
theorem IsKLindelof.induction_on {hŒ∫: 2 < Œ∫} (hs : IsKLindelof Œ∫ s) {p : Set X ‚Üí Prop}
    (hmono : ‚àÄ ‚¶És t‚¶Ñ, s ‚äÜ t ‚Üí p t ‚Üí p s)
    (hcardinal_union : ‚àÄ (S : Set (Set X)), (#S < Œ∫) ‚Üí (‚àÄ s ‚àà S, p s) ‚Üí p (‚ãÉ‚ÇÄ S))
    (hnhds : ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, p t) : p s := by
  let f : Filter X := ofCardinalUnion p hŒ∫ hcardinal_union (fun t ht _ hsub ‚Ü¶ hmono hsub ht)
  have : s·∂ú ‚àà f := hs.compl_mem_sets_of_nhdsWithin (by simpa [f] using hnhds)
  rwa [‚Üê compl_compl s]

/-- The intersection of a `Œ∫`-Lindel√∂f set and a closed set is a `Œ∫`-Lindel√∂f set. -/
theorem IsKLindelof.inter_right (hs : IsKLindelof Œ∫ s) (ht : IsClosed t) :
    IsKLindelof Œ∫ (s ‚à© t) := by
  intro f hnf _ hstf
  rw [‚Üê inf_principal, le_inf_iff] at hstf
  obtain ‚ü®x, hsx, hx‚ü© : ‚àÉ x ‚àà s, ClusterPt x f := hs hstf.1
  have hxt : x ‚àà t := ht.mem_of_nhdsWithin_neBot <| hx.mono hstf.2
  exact ‚ü®x, ‚ü®hsx, hxt‚ü©, hx‚ü©

  /-- The intersection of a closed set and a `Œ∫`-Lindel√∂f set is a `Œ∫`-Lindel√∂f set. -/
theorem IsKLindelof.inter_left (ht : IsKLindelof Œ∫ t) (hs : IsClosed s) : IsKLindelof Œ∫ (s ‚à© t) :=
  inter_comm t s ‚ñ∏ ht.inter_right hs

  /-- The set difference of a `Œ∫`-Lindel√∂f set and an open set is a `Œ∫`-Lindel√∂f set. -/
theorem IsKLindelof.diff (hs : IsKLindelof Œ∫ s) (ht : IsOpen t) : IsKLindelof Œ∫ (s \ t) :=
  hs.inter_right (isClosed_compl_iff.mpr ht)

/-- A closed subset of a `Œ∫`-Lindel√∂f set is a `Œ∫`-Lindel√∂f set. -/
theorem IsKLindelof.of_isClosed_subset (hs : IsKLindelof Œ∫ s) (ht : IsClosed t) (h : t ‚äÜ s) :
    IsKLindelof Œ∫ t := inter_eq_self_of_subset_right h ‚ñ∏ hs.inter_right ht

/-- A continuous image of a `Œ∫`-Lindel√∂f set is a `Œ∫`-Lindel√∂f set. -/
theorem IsKLindelof.image_of_continuousOn {f : X ‚Üí Y} (hs : IsKLindelof Œ∫ s)
    (hf : ContinuousOn f s) : IsKLindelof (X := Y) Œ∫ (f '' s) := by
  intro l lne _ ls
  have : NeBot (l.comap f ‚äì ùìü s) :=
    comap_inf_principal_neBot_of_image_mem lne (le_principal_iff.1 ls)
  obtain ‚ü®x, hxs, hx‚ü© : ‚àÉ x ‚àà s, ClusterPt x (l.comap f ‚äì ùìü s) := @hs _ this _ inf_le_right
  haveI := hx.neBot
  use f x, mem_image_of_mem f hxs
  have : Tendsto f (ùìù x ‚äì (comap f l ‚äì ùìü s)) (ùìù (f x) ‚äì l) := by
    convert (hf x hxs).inf (@tendsto_comap _ _ f l) using 1
    rw [nhdsWithin]
    ac_rfl
  exact this.neBot

/-- A continuous image of a `Œ∫`-Lindel√∂f set is a `Œ∫`-Lindel√∂f set within the codomain. -/
theorem IsKLindelof.image {f : X ‚Üí Y} (hs : IsKLindelof Œ∫ s) (hf : Continuous f) :
    IsKLindelof (X := Y) Œ∫ (f '' s) := hs.image_of_continuousOn hf.continuousOn

/-- A filter with the cardinal intersection property that is finer than the principal filter on
a `Œ∫`-Lindel√∂f set `s` contains any open set that contains all clusterpoints of `f` in `s`. -/
theorem IsKLindelof.adherence_nhdset {f : Filter X} [CardinalInterFilter f Œ∫] (hs : IsKLindelof Œ∫ s)
    (hf‚ÇÇ : f ‚â§ ùìü s) (ht‚ÇÅ : IsOpen t) (ht‚ÇÇ : ‚àÄ x ‚àà s, ClusterPt x f ‚Üí x ‚àà t) : t ‚àà f :=
  (eq_or_neBot _).casesOn mem_of_eq_bot fun _ ‚Ü¶
    let ‚ü®x, hx, hfx‚ü© := @hs (f ‚äì ùìü t·∂ú) _ _ <| inf_le_of_left_le hf‚ÇÇ
    have : x ‚àà t := ht‚ÇÇ x hx hfx.of_inf_left
    have : t·∂ú ‚à© t ‚àà ùìù[t·∂ú] x := inter_mem_nhdsWithin _ (ht‚ÇÅ.mem_nhds this)
    have A : ùìù[t·∂ú] x = ‚ä• := empty_mem_iff_bot.1 <| compl_inter_self t ‚ñ∏ this
    have : ùìù[t·∂ú] x ‚â† ‚ä• := hfx.of_inf_right.ne
    absurd A this

/-- For every open cover of a `Œ∫`-Lindel√∂f set, there exists a subcover with cardinality less
than `Œ∫`. -/
theorem IsKLindelof.elim_cardinal_subcover {Œπ : Type u} (hreg : Œ∫.IsRegular)
    (hs : IsKLindelof Œ∫ s) (U : Œπ ‚Üí Set X) (hUo : ‚àÄ i, IsOpen (U i)) (hsU : s ‚äÜ ‚ãÉ i, U i) :
    ‚àÉ r : Set Œπ, (#r < Œ∫) ‚àß (s ‚äÜ ‚ãÉ i ‚àà r, U i) := by
  have hŒ∫ : 2 < Œ∫ := IsRegular.nat_lt hreg 2
  have hmono : ‚àÄ ‚¶És t : Set X‚¶Ñ, s ‚äÜ t ‚Üí (‚àÉ r : Set Œπ, (#r < Œ∫) ‚àß t ‚äÜ ‚ãÉ i ‚àà r, U i)
      ‚Üí (‚àÉ r : Set Œπ, (#r < Œ∫) ‚àß s ‚äÜ ‚ãÉ i ‚àà r, U i) := by
    intro s t hst ‚ü®r, ‚ü®hrcardinal, hsub‚ü©‚ü©
    exact ‚ü®r, hrcardinal, Subset.trans hst hsub‚ü©
  have hcardinal_union : ‚àÄ (S : Set (Set X)), (#S < Œ∫)
      ‚Üí (‚àÄ s ‚àà S, ‚àÉ r : Set Œπ, (#r < Œ∫) ‚àß (s ‚äÜ ‚ãÉ i ‚àà r, U i))
      ‚Üí ‚àÉ r : Set Œπ, (#r < Œ∫) ‚àß (‚ãÉ‚ÇÄ S ‚äÜ ‚ãÉ i ‚àà r, U i) := by
    intro S hS hsr
    choose! r hr using hsr
    refine ‚ü®‚ãÉ s ‚àà S, r s, ?_, ?_‚ü©
    ¬∑ rw [card_biUnion_lt_iff_forall_of_isRegular hreg]
      exact fun a ha ‚Ü¶ (hr a ha).1
      exact hS
    refine sUnion_subset ?h.right.h
    simp only [mem_iUnion, exists_prop, iUnion_exists, biUnion_and']
    exact fun i is x hx ‚Ü¶ mem_biUnion is ((hr i is).2 hx)
  have h_nhds : ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, ‚àÉ r : Set Œπ, (#r < Œ∫) ‚àß (t ‚äÜ ‚ãÉ i ‚àà r, U i) := by
    intro x hx
    let ‚ü®i, hi‚ü© := mem_iUnion.1 (hsU hx)
    have : 1 < Œ∫ := IsRegular.nat_lt hreg 1
    refine ‚ü®U i, mem_nhdsWithin_of_mem_nhds ((hUo i).mem_nhds hi), {i}, by simp [this], ?_‚ü©
    simp only [mem_singleton_iff, iUnion_iUnion_eq_left]
    exact subset_rfl
  exact hs.induction_on (hŒ∫ := hŒ∫) hmono hcardinal_union h_nhds

theorem IsKLindelof.elim_nhds_subcover' (hreg : Œ∫.IsRegular) (hs : IsKLindelof Œ∫ s)
    (U : ‚àÄ x ‚àà s, Set X) (hU : ‚àÄ x (hx : x ‚àà s), U x ‚Äπx ‚àà s‚Ä∫ ‚àà ùìù x) :
    ‚àÉ t : Set s, (#t < Œ∫) ‚àß s ‚äÜ ‚ãÉ x ‚àà t, U (x : s) x.2 := by
  have := hs.elim_cardinal_subcover hreg (fun x : s ‚Ü¶ interior (U x x.2))
    (fun _ ‚Ü¶ isOpen_interior)
    fun x hx ‚Ü¶ mem_iUnion.2 ‚ü®‚ü®x, hx‚ü©, mem_interior_iff_mem_nhds.2 <| hU _ _‚ü©
  rcases this with ‚ü®r, ‚ü®hr, hs‚ü©‚ü©
  use r, hr
  apply Subset.trans hs
  apply iUnion‚ÇÇ_subset
  intro i hi
  apply Subset.trans interior_subset
  exact subset_iUnion_of_subset i (subset_iUnion_of_subset hi (Subset.refl _))

theorem IsKLindelof.elim_nhds_subcover (hreg : Œ∫.IsRegular) (hs : IsKLindelof Œ∫ s)
    (U : X ‚Üí Set X) (hU : ‚àÄ x ‚àà s, U x ‚àà ùìù x) :
    ‚àÉ t : Set X, (#t < Œ∫) ‚àß (‚àÄ x ‚àà t, x ‚àà s) ‚àß s ‚äÜ ‚ãÉ x ‚àà t, U x := by
  let ‚ü®t, ‚ü®htc, htsub‚ü©‚ü© := hs.elim_nhds_subcover' hreg (fun x _ ‚Ü¶ U x) hU
  refine ‚ü®‚Üët,  lt_of_le_of_lt Cardinal.mk_image_le htc, ?_‚ü©
  constructor
  ¬∑ intro _
    simp only [mem_image, Subtype.exists, exists_and_right, exists_eq_right, forall_exists_index]
    tauto
  ¬∑ have : ‚ãÉ x ‚àà t, U ‚Üëx = ‚ãÉ x ‚àà Subtype.val '' t, U x := biUnion_image.symm
    rwa [‚Üê this]

/-- The neighborhood filter of a `Œ∫`-Lindel√∂f set is disjoint with a `CardinalInterFilter l Œ∫`
filter if and only if the neighborhood filter of each point of this set is disjoint with `l`. -/
theorem IsKLindelof.disjoint_nhdsSet_left (hreg : Œ∫.IsRegular) {l : Filter X}
    [CardinalInterFilter l Œ∫] (hs : IsKLindelof Œ∫ s) :
    Disjoint (ùìùÀ¢ s) l ‚Üî ‚àÄ x ‚àà s, Disjoint (ùìù x) l := by
  refine ‚ü®fun h x hx ‚Ü¶ h.mono_left <| nhds_le_nhdsSet hx, fun H ‚Ü¶ ?_‚ü©
  choose! U hxU hUl using fun x hx ‚Ü¶ (nhds_basis_opens x).disjoint_iff_left.1 (H x hx)
  choose hxU hUo using hxU
  rcases hs.elim_nhds_subcover hreg U fun x hx ‚Ü¶ (hUo x hx).mem_nhds (hxU x hx)
    with ‚ü®t, htc, hts, hst‚ü©
  refine (hasBasis_nhdsSet _).disjoint_iff_left.2
    ‚ü®‚ãÉ x ‚àà t, U x, ‚ü®isOpen_biUnion fun x hx ‚Ü¶ hUo x (hts x hx), hst‚ü©, ?_‚ü©
  rw [compl_iUnion‚ÇÇ]
  exact (cardinal_bInter_mem htc).mpr (fun i hi ‚Ü¶ hUl _ (hts _ hi))

/-- A `CardinalInterFilter l Œ∫` filter is disjoint with the neighborhood
filter of a `Œ∫`-Lindel√∂f set if and only if it is disjoint with the neighborhood filter of each
point of this set. -/
theorem IsKLindelof.disjoint_nhdsSet_right (hreg : Œ∫.IsRegular) {l : Filter X}
    [CardinalInterFilter l Œ∫] (hs : IsKLindelof Œ∫ s) :
    Disjoint l (ùìùÀ¢ s) ‚Üî ‚àÄ x ‚àà s, Disjoint l (ùìù x) := by
  simpa only [disjoint_comm] using (hs.disjoint_nhdsSet_left hreg)

/-- For every family of closed sets whose intersection avoids a `Œ∫`-Lindel√∂f set,
there exists a subfamil of size less than `Œ∫` whose intersection avoids this `Œ∫`-Lindel√∂f set. -/
theorem IsKLindelof.elim_cardinal_subfamily_closed (hreg : Œ∫.IsRegular) {Œπ : Type u}
    (hs : IsKLindelof Œ∫ s) (t : Œπ ‚Üí Set X) (htc : ‚àÄ i, IsClosed (t i)) (hst : (s ‚à© ‚ãÇ i, t i) = ‚àÖ) :
    ‚àÉ u : Set Œπ, (#u < Œ∫) ‚àß (s ‚à© ‚ãÇ i ‚àà u, t i) = ‚àÖ := by
  let U := t·∂ú
  have hUo : ‚àÄ i, IsOpen (U i) := by simp only [U, Pi.compl_apply, isOpen_compl_iff]; exact htc
  have hsU : s ‚äÜ ‚ãÉ i, U i := by
    simp only [U, Pi.compl_apply]
    rw [‚Üê compl_iInter]
    apply disjoint_compl_left_iff_subset.mp
    simp only [compl_iInter, compl_iUnion, compl_compl]
    apply Disjoint.symm
    exact disjoint_iff_inter_eq_empty.mpr hst
  rcases hs.elim_cardinal_subcover hreg U hUo hsU with ‚ü®u, ‚ü®hucount, husub‚ü©‚ü©
  use u, hucount
  rw [‚Üê disjoint_compl_left_iff_subset] at husub
  simp only [U, Pi.compl_apply, compl_iUnion, compl_compl] at husub
  exact disjoint_iff_inter_eq_empty.mp (Disjoint.symm husub)

/-- To show that a `Œ∫`-Lindel√∂f set intersects the intersection of a family of closed sets,
  it is sufficient to show that it intersects every subfamily of cardinality below `Œ∫`. -/
theorem IsKLindelof.inter_iInter_nonempty (hreg : Œ∫.IsRegular) {Œπ : Type u}
    (hs : IsKLindelof Œ∫ s) (t : Œπ ‚Üí Set X) (htc : ‚àÄ i, IsClosed (t i))
    (hst : ‚àÄ u : Set Œπ, (#u < Œ∫) ‚àß (s ‚à© ‚ãÇ i ‚àà u, t i).Nonempty) : (s ‚à© ‚ãÇ i, t i).Nonempty := by
  contrapose! hst
  rcases hs.elim_cardinal_subfamily_closed hreg t htc hst with ‚ü®u, ‚ü®_, husub‚ü©‚ü©
  exact ‚ü®u, fun _ ‚Ü¶ husub‚ü©

/-- For every open cover of a `Œ∫`-Lindel√∂f set, there exists a subcover of cardinality less than
`Œ∫`. -/
theorem IsKLindelof.elim_cardinal_subcover_image (hreg : Œ∫.IsRegular) {b : Set Œπ}
    {c : Œπ ‚Üí Set X} (hs : IsKLindelof Œ∫ s) (hc‚ÇÅ : ‚àÄ i ‚àà b, IsOpen (c i)) (hc‚ÇÇ : s ‚äÜ ‚ãÉ i ‚àà b, c i) :
    ‚àÉ b', b' ‚äÜ b ‚àß (#b' < Œ∫) ‚àß s ‚äÜ ‚ãÉ i ‚àà b', c i := by
  simp only [Subtype.forall', biUnion_eq_iUnion] at hc‚ÇÅ hc‚ÇÇ
  rcases hs.elim_cardinal_subcover hreg (fun i ‚Ü¶ c i : b ‚Üí Set X) hc‚ÇÅ hc‚ÇÇ with ‚ü®d, hd‚ü©
  refine ‚ü®Subtype.val '' d, by simp, lt_of_le_of_lt Cardinal.mk_image_le hd.1, ?_‚ü©
  rw [biUnion_image]
  exact hd.2

/-- A set `s` is `Œ∫`-Lindel√∂f if for every open cover of `s`, there exists a subcover of cardinality
below `Œ∫`. -/
theorem isKLindelof_of_cardinal_subcover
    (h : ‚àÄ {Œπ : Type u} (U : Œπ ‚Üí Set X), (‚àÄ i, IsOpen (U i)) ‚Üí (s ‚äÜ ‚ãÉ i, U i) ‚Üí
    ‚àÉ t : Set Œπ, (#t < Œ∫) ‚àß s ‚äÜ ‚ãÉ i ‚àà t, U i) :
    IsKLindelof Œ∫ s := fun f hf hfs ‚Ü¶ by
  contrapose! h
  simp only [ClusterPt, not_neBot, ‚Üê disjoint_iff, SetCoe.forall',
    (nhds_basis_opens _).disjoint_iff_left] at h
  choose fsub U hU hUf using h
  refine ‚ü®s, U, fun x ‚Ü¶ (hU x).2, fun x hx ‚Ü¶ mem_iUnion.2 ‚ü®‚ü®x, hx‚ü©, (hU _).1 ‚ü©, ?_‚ü©
  intro t ht h
  have uinf := f.sets_of_superset (le_principal_iff.1 fsub) h
  have uninf : ‚ãÇ i ‚àà t, (U i)·∂ú ‚àà f := (cardinal_bInter_mem ht).mpr (fun _ _ ‚Ü¶ hUf _)
  rw [‚Üê compl_iUnion‚ÇÇ] at uninf
  have uninf := compl_not_mem uninf
  simp only [compl_compl] at uninf
  contradiction

/-- A set `s` is `Œ∫`-Lindel√∂f if for every family of closed sets whose intersection avoids `s`,
there exists a cardinal subfamily whose intersection avoids `s`. -/
theorem isKLindelof_of_cardinal_subfamily_closed
    (h : ‚àÄ {Œπ : Type u} (t : Œπ ‚Üí Set X), (‚àÄ i, IsClosed (t i)) ‚Üí (s ‚à© ‚ãÇ i, t i) = ‚àÖ ‚Üí
        ‚àÉ u : Set Œπ, (#u < Œ∫) ‚àß (s ‚à© ‚ãÇ i ‚àà u, t i) = ‚àÖ) :
    IsKLindelof Œ∫ s :=
  isKLindelof_of_cardinal_subcover fun U hUo hsU ‚Ü¶ by
    rw [‚Üê disjoint_compl_right_iff_subset, compl_iUnion, disjoint_iff] at hsU
    rcases h (fun i ‚Ü¶ (U i)·∂ú) (fun i ‚Ü¶ (hUo _).isClosed_compl) hsU with ‚ü®t, ht‚ü©
    refine ‚ü®t, ?_‚ü©
    rwa [‚Üê disjoint_compl_right_iff_subset, compl_iUnion‚ÇÇ, disjoint_iff]

/-- A set `s` is `Œ∫`-Lindel√∂f if and only if
for every open cover of `s`, there exists a subcover of cardinality less than `Œ∫`. -/
theorem isKLindelof_iff_cardinal_subcover (hreg : Œ∫.IsRegular) :
    IsKLindelof Œ∫ s ‚Üî ‚àÄ {Œπ : Type u} (U : Œπ ‚Üí Set X),
      (‚àÄ i, IsOpen (U i)) ‚Üí (s ‚äÜ ‚ãÉ i, U i) ‚Üí ‚àÉ t : Set Œπ, (#t < Œ∫) ‚àß s ‚äÜ ‚ãÉ i ‚àà t, U i :=
  ‚ü®fun hs ‚Ü¶ hs.elim_cardinal_subcover hreg, isKLindelof_of_cardinal_subcover‚ü©

/-- A set `s` is `Œ∫`-Lindel√∂f if and only if
for every family of closed sets whose intersection avoids `s`,
there exists a subfamily of cardinality below `Œ∫` whose intersection avoids `s`. -/
theorem isKLindelof_iff_cardinal_subfamily_closed (hreg : Œ∫.IsRegular) :
    IsKLindelof Œ∫ s ‚Üî ‚àÄ {Œπ : Type u} (t : Œπ ‚Üí Set X),
    (‚àÄ i, IsClosed (t i)) ‚Üí (s ‚à© ‚ãÇ i, t i) = ‚àÖ
    ‚Üí ‚àÉ u : Set Œπ, (#u < Œ∫) ‚àß (s ‚à© ‚ãÇ i ‚àà u, t i) = ‚àÖ :=
  ‚ü®fun hs ‚Ü¶ hs.elim_cardinal_subfamily_closed hreg, isKLindelof_of_cardinal_subfamily_closed‚ü©

/-- The empty set is a Œ∫-Lindelof set. -/
@[simp]
theorem isKLindelof_empty : IsKLindelof Œ∫ (‚àÖ : Set X) := fun _f hnf _ hsf ‚Ü¶
  Not.elim hnf.ne <| empty_mem_iff_bot.1 <| le_principal_iff.1 hsf

/-- A singleton set is a Œ∫-Lindelof set. -/
@[simp]
theorem isKLindelof_singleton {x : X} : IsKLindelof Œ∫ ({x} : Set X) := fun f hf _ hfa ‚Ü¶
  ‚ü®x, rfl, ClusterPt.of_le_nhds'
    (hfa.trans <| by simpa only [principal_singleton] using pure_le_nhds x) hf‚ü©

theorem Set.Subsingleton.isKLindelof (hs : s.Subsingleton) : IsKLindelof Œ∫ s :=
  Subsingleton.induction_on hs isKLindelof_empty fun _ ‚Ü¶ isKLindelof_singleton

theorem cardinal_isKLindelof_biUnion_of_isRegular {s : Set Œπ} {f : Œπ ‚Üí Set X}
    (hreg : Œ∫.IsRegular) (hs : #s < Œ∫) (hf : ‚àÄ i ‚àà s, IsKLindelof Œ∫ (f i)) :
    IsKLindelof Œ∫ (‚ãÉ i ‚àà s, f i) := by
  apply isKLindelof_of_cardinal_subcover
  intro i U hU hUcover
  have hiU : ‚àÄ i ‚àà s, f i ‚äÜ ‚ãÉ i, U i :=
    fun _ is ‚Ü¶ _root_.subset_trans (subset_biUnion_of_mem is) hUcover
  have iSets := fun i is ‚Ü¶ (hf i is).elim_cardinal_subcover hreg U hU (hiU i is)
  choose! r hr using iSets
  use ‚ãÉ i ‚àà s, r i
  constructor
  ¬∑ refine (card_biUnion_lt_iff_forall_of_isRegular hreg hs).mpr ?h.left.a
    exact fun s hs ‚Ü¶ (hr s hs).1
  ¬∑ refine iUnion‚ÇÇ_subset ?h.right.h
    intro i is
    simp only [mem_iUnion, exists_prop, iUnion_exists, biUnion_and']
    intro x hx
    exact mem_biUnion is ((hr i is).2 hx)

theorem Set.Finite.isKLindelof_biUnion {s : Set Œπ} {f : Œπ ‚Üí Set X} (hs : s.Finite)
    (hreg : Œ∫.IsRegular) (hf : ‚àÄ i ‚àà s, IsKLindelof Œ∫ (f i)) :
    IsKLindelof Œ∫ (‚ãÉ i ‚àà s, f i) := by
  apply cardinal_isKLindelof_biUnion_of_isRegular hreg ?_ hf
  exact lt_of_lt_of_le (Cardinal.lt_aleph0_iff_set_finite.mpr hs) hreg.aleph0_le

theorem Finset.isKLindelof_biUnion (s : Finset Œπ) {f : Œπ ‚Üí Set X} (hreg : Œ∫.IsRegular)
    (hf : ‚àÄ i ‚àà s, IsKLindelof Œ∫ (f i)) : IsKLindelof Œ∫ (‚ãÉ i ‚àà s, f i) :=
  s.finite_toSet.isKLindelof_biUnion hreg hf

theorem cardinal_isKLindelof_sUnion_of_isRegular {S : Set (Set X)} (hreg : Œ∫.IsRegular)
    (hf : #S < Œ∫) (hc : ‚àÄ s ‚àà S, IsKLindelof Œ∫ s) : IsKLindelof Œ∫ (‚ãÉ‚ÇÄ S) := by
  rw [sUnion_eq_biUnion]; exact cardinal_isKLindelof_biUnion_of_isRegular hreg hf hc

theorem Set.Finite.isKLindelof_sUnion {S : Set (Set X)} (hreg : Œ∫.IsRegular)
    (hf : S.Finite) (hc : ‚àÄ s ‚àà S, IsKLindelof Œ∫ s) : IsKLindelof Œ∫ (‚ãÉ‚ÇÄ S) := by
  rw [sUnion_eq_biUnion]; exact hf.isKLindelof_biUnion hreg hc

theorem isKLindelof_iUnion {Œπ : Type u} {f : Œπ ‚Üí Set X} (hreg : Œ∫.IsRegular) (hŒπ : #Œπ < Œ∫)
    (h : ‚àÄ i, IsKLindelof Œ∫ (f i)) : IsKLindelof Œ∫ (‚ãÉ i, f i) :=
  cardinal_isKLindelof_sUnion_of_isRegular hreg (lt_of_le_of_lt Cardinal.mk_range_le hŒπ)
    (forall_mem_range.2 h)

theorem cardinal_isKLindelof_of_isRegular (hreg : Œ∫.IsRegular) (hs : #s < Œ∫) :
    IsKLindelof Œ∫ s :=
  biUnion_of_singleton s ‚ñ∏
    cardinal_isKLindelof_biUnion_of_isRegular hreg hs fun _ _ => isKLindelof_singleton

theorem Set.Finite.isKLindelof (hs : s.Finite) (hreg : Œ∫.IsRegular) : IsKLindelof Œ∫ s :=
  biUnion_of_singleton s ‚ñ∏ hs.isKLindelof_biUnion hreg fun _ _ => isKLindelof_singleton

theorem IsKLindelof.cardinal_of_discrete_of_isRegular [DiscreteTopology X]
    (hreg : Œ∫.IsRegular) (hs : IsKLindelof Œ∫ s) : #s < Œ∫ := by
  have : ‚àÄ x : X, ({x} : Set X) ‚àà ùìù x := by simp [nhds_discrete]
  rcases hs.elim_nhds_subcover hreg (fun x => {x}) fun x _ => this x with ‚ü®t, ht, _, hssubt‚ü©
  rw [biUnion_of_singleton] at hssubt
  exact lt_of_le_of_lt (Cardinal.mk_le_mk_of_subset hssubt) ht

theorem isKLindelof_iff_cardinal_of_isRegular [DiscreteTopology X] (hreg : Œ∫.IsRegular) :
    IsKLindelof Œ∫ s ‚Üî #s < Œ∫ :=
  ‚ü®fun h => h.cardinal_of_discrete_of_isRegular hreg,
    fun h => cardinal_isKLindelof_of_isRegular hreg h‚ü©

theorem IsKLindelof.union (hreg : Œ∫.IsRegular) (hs : IsKLindelof Œ∫ s)
    (ht : IsKLindelof Œ∫ t) : IsKLindelof Œ∫ (s ‚à™ t) := by
  rw [‚Üê Set.sUnion_pair]
  apply Set.Finite.isKLindelof_sUnion hreg (by simp)
  rintro x (rfl | rfl) <;> assumption

protected theorem IsKLindelof.insert (hreg : Œ∫.IsRegular) (hs : IsKLindelof Œ∫ s) (a) :
    IsKLindelof Œ∫ (insert a s) :=
  isKLindelof_singleton.union hreg hs

/-- If `X` has a basis consisting of `Œ∫`-Lindel√∂f opens, then an open set in `X` is `Œ∫`-Lindel√∂f
open iff it is a union of less than `Œ∫` elements in the basis -/
theorem isLindelof_open_iff_eq_cardinal_iUnion_of_isTopologicalBasis (b : Œπ ‚Üí Set X)
    (hb : IsTopologicalBasis (Set.range b)) (hreg : Œ∫.IsRegular)
    (hb' : ‚àÄ i, IsKLindelof Œ∫ (b i)) (U : Set X) :
    IsKLindelof Œ∫ U ‚àß IsOpen U ‚Üî ‚àÉ s : Set Œπ, (#s < Œ∫) ‚àß U = ‚ãÉ i ‚àà s, b i := by
  constructor
  ¬∑ rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    obtain ‚ü®Y, f, rfl, hf‚ü© := hb.open_eq_iUnion h‚ÇÇ
    choose f' hf' using hf
    have : b ‚àò f' = f := funext hf'
    subst this
    obtain ‚ü®t, ht‚ü© :=
      h‚ÇÅ.elim_cardinal_subcover hreg (b ‚àò f') (fun i => hb.isOpen (Set.mem_range_self _)) Subset.rfl
    refine ‚ü®t.image f', lt_of_le_of_lt mk_image_le ht.1, le_antisymm ?_ ?_‚ü©
    ¬∑ refine Set.Subset.trans ht.2 ?_
      simp only [Set.iUnion_subset_iff]
      intro i hi
      rw [‚Üê Set.iUnion_subtype (fun x : Œπ => x ‚àà t.image f') fun i => b i.1]
      exact Set.subset_iUnion (fun i : t.image f' => b i) ‚ü®_, mem_image_of_mem _ hi‚ü©
    ¬∑ apply Set.iUnion‚ÇÇ_subset
      rintro i hi
      obtain ‚ü®j, -, rfl‚ü© := (mem_image ..).mp hi
      exact Set.subset_iUnion (b ‚àò f') j
  ¬∑ rintro ‚ü®s, hs, rfl‚ü©
    constructor
    ¬∑ exact cardinal_isKLindelof_biUnion_of_isRegular hreg hs fun i _ => hb' i
    ¬∑ exact isOpen_biUnion fun i _ => hb.isOpen (Set.mem_range_self _)

/--`Filter.coKLindelof` is the filter generated by complements to Œ∫-Lindel√∂f sets. -/
def Filter.coKLindelof (Œ∫ : Cardinal.{u}) (X : Type u) [TopologicalSpace X] : Filter X :=
  --`Filter.coKLindelof` is the filter generated by complements to Œ∫-Lindel√∂f sets.
  ‚®Ö (s : Set X) (_ : IsKLindelof Œ∫ s), ùìü s·∂ú

theorem hasBasis_coKLindelof (hreg : Œ∫.IsRegular) :
    (coKLindelof Œ∫ X).HasBasis (IsKLindelof Œ∫) compl :=
  hasBasis_biInf_principal'
    (fun s hs t ht =>
      ‚ü®s ‚à™ t, hs.union hreg ht, compl_subset_compl.2 (subset_union_left s t),
        compl_subset_compl.2 (subset_union_right s t)‚ü©)
    ‚ü®‚àÖ, isKLindelof_empty‚ü©

theorem mem_coKLindelof (hreg : Œ∫.IsRegular) :
    s ‚àà coKLindelof Œ∫ X ‚Üî ‚àÉ t, IsKLindelof Œ∫ t ‚àß t·∂ú ‚äÜ s :=
  (hasBasis_coKLindelof hreg).mem_iff

theorem mem_coKLindelof' (hreg : Œ∫.IsRegular) :
    s ‚àà coKLindelof Œ∫ X ‚Üî ‚àÉ t, IsKLindelof Œ∫ t ‚àß s·∂ú ‚äÜ t :=
  (mem_coKLindelof hreg).trans <| exists_congr fun _ => and_congr_right fun _ => compl_subset_comm

theorem _root_.IsKLindelof.compl_mem_coKLindelof (hreg : Œ∫.IsRegular)
    (hs : IsKLindelof Œ∫ s) : s·∂ú ‚àà coKLindelof Œ∫ X :=
  (hasBasis_coKLindelof hreg).mem_of_mem hs

theorem coKLindelof_le_cofinite (hreg : Œ∫.IsRegular) : coKLindelof Œ∫ X ‚â§ cofinite :=
  fun s hs => compl_compl s ‚ñ∏ IsKLindelof.compl_mem_coKLindelof hreg (hs.isKLindelof hreg)

theorem Tendsto.isKLindelof_insert_range_of_coKLindelof {f : X ‚Üí Y} {y}
    (hreg : Œ∫.IsRegular) (hf : Tendsto f (coKLindelof Œ∫ X) (ùìù y)) (hfc : Continuous f) :
    IsKLindelof Œ∫ (insert y (range f)) := by
  intro l hne _ hle
  by_cases hy : ClusterPt y l
  ¬∑ exact ‚ü®y, Or.inl rfl, hy‚ü©
  simp only [clusterPt_iff, not_forall, ‚Üê not_disjoint_iff_nonempty_inter, not_not] at hy
  rcases hy with ‚ü®s, hsy, t, htl, hd‚ü©
  rcases (mem_coKLindelof hreg).1 (hf hsy) with ‚ü®K, hKc, hKs‚ü©
  have : f '' K ‚àà l := by
    filter_upwards [htl, le_principal_iff.1 hle] with y hyt hyf
    rcases hyf with (rfl | ‚ü®x, rfl‚ü©)
    exacts [(hd.le_bot ‚ü®mem_of_mem_nhds hsy, hyt‚ü©).elim,
      mem_image_of_mem _ (not_not.1 fun hxK => hd.le_bot ‚ü®hKs hxK, hyt‚ü©)]
  rcases hKc.image hfc (le_principal_iff.2 this) with ‚ü®y, hy, hyl‚ü©
  exact ‚ü®y, Or.inr <| image_subset_range _ _ hy, hyl‚ü©

/-- `Filter.coclosedKLindelof` is the filter generated by complements to closed `Œ∫`-Lindelof sets.-/
def Filter.coclosedKLindelof (Œ∫ : Cardinal.{u}) (X : Type u) [TopologicalSpace X] : Filter X :=
  -- `Filter.coclosedKLindelof` is the filter generated by complements to closed `Œ∫`-Lindelof sets.
  ‚®Ö (s : Set X) (_ : IsClosed s) (_ : IsKLindelof Œ∫ s), ùìü s·∂ú

theorem hasBasis_coclosedKLindelof (hreg : Œ∫.IsRegular) :
    (Filter.coclosedKLindelof Œ∫ X).HasBasis (fun s => IsClosed s ‚àß IsKLindelof Œ∫ s) compl := by
  simp only [Filter.coclosedKLindelof, iInf_and']
  refine hasBasis_biInf_principal' ?_ ‚ü®‚àÖ, isClosed_empty, isKLindelof_empty‚ü©
  rintro s ‚ü®hs‚ÇÅ, hs‚ÇÇ‚ü© t ‚ü®ht‚ÇÅ, ht‚ÇÇ‚ü©
  exact ‚ü®s ‚à™ t, ‚ü®‚ü®hs‚ÇÅ.union ht‚ÇÅ, hs‚ÇÇ.union hreg ht‚ÇÇ‚ü©, compl_subset_compl.2 (subset_union_left _ _),
    compl_subset_compl.2 (subset_union_right _ _)‚ü©‚ü©

theorem mem_coclosed_KLindelof (hreg : Œ∫.IsRegular) : s ‚àà coclosedKLindelof Œ∫ X ‚Üî
    ‚àÉ t, IsClosed t ‚àß IsKLindelof Œ∫ t ‚àß t·∂ú ‚äÜ s := by
  simp only [(hasBasis_coclosedKLindelof hreg).mem_iff, and_assoc]

theorem mem_coclosed_KLindelof' (hreg : Œ∫.IsRegular) : s ‚àà coclosedKLindelof Œ∫ X ‚Üî
    ‚àÉ t, IsClosed t ‚àß IsKLindelof Œ∫ t ‚àß s·∂ú ‚äÜ t := by
  simp only [mem_coclosed_KLindelof hreg, compl_subset_comm]

theorem coKLindelof_le_coclosedKLindelof : coKLindelof Œ∫ X ‚â§ coclosedKLindelof Œ∫ X :=
  iInf_mono fun _ => le_iInf fun _ => le_rfl

theorem IsKLindelof.compl_mem_coclosedKLindelof_of_isClosed (hreg : Œ∫.IsRegular)
    (hs : IsKLindelof Œ∫ s) (hs' : IsClosed s) : s·∂ú ‚àà Filter.coclosedKLindelof Œ∫ X :=
  (hasBasis_coclosedKLindelof hreg).mem_of_mem ‚ü®hs', hs‚ü©

/-- X is a `Œ∫`-Lindel√∂f space iff every open cover has a subcover of cardinality less than `Œ∫`.-/
class KLindelofSpace (Œ∫ : Cardinal.{u}) (X : Type u) [TopologicalSpace X] : Prop where
  /-- In a `Œ∫`Lindel√∂f space, `Set.univ` is a `Œ∫`-Lindel√∂f set. -/
  isKLindelof_univ : IsKLindelof Œ∫ (univ : Set X)

instance (priority := 10) Subsingleton.kLindelofSpace [Subsingleton X] : KLindelofSpace Œ∫ X :=
  ‚ü®subsingleton_univ.isKLindelof‚ü©

theorem isKLindelof_univ_iff : IsKLindelof Œ∫ (univ : Set X) ‚Üî KLindelofSpace Œ∫ X :=
  ‚ü®fun h => ‚ü®h‚ü©, fun h => h.1‚ü©

theorem isKLindelof_univ [h : KLindelofSpace Œ∫ X] : IsKLindelof Œ∫ (univ : Set X) :=
  h.isKLindelof_univ

theorem cluster_point_of_KLindelof [KLindelofSpace Œ∫ X] (f : Filter X) [NeBot f]
    [CardinalInterFilter f Œ∫] : ‚àÉ x, ClusterPt x f := by
  have b := @isKLindelof_univ X _ Œ∫ _
  rw [IsKLindelof] at b
  simp_all only [principal_univ, le_top, mem_univ, true_and]

theorem KLindelofSpace.elim_nhds_subcover [KLindelofSpace Œ∫ X] (hreg : Œ∫.IsRegular)
    (U : X ‚Üí Set X) (hU : ‚àÄ x, U x ‚àà ùìù x) : ‚àÉ t : Set X, (#t < Œ∫) ‚àß ‚ãÉ x ‚àà t, U x = Set.univ := by
  obtain ‚ü®t, tc, -, s‚ü© := IsKLindelof.elim_nhds_subcover hreg isKLindelof_univ U fun x _ => hU x
  use t, tc
  apply top_unique s

theorem kLindelofSpace_of_cardinal_subfamily_closed
    (h : ‚àÄ {Œπ : Type u} (t : Œπ ‚Üí Set X), (‚àÄ i, IsClosed (t i)) ‚Üí ‚ãÇ i, t i = ‚àÖ ‚Üí
      ‚àÉ u : Set Œπ, (#u < Œ∫) ‚àß ‚ãÇ i ‚àà u, t i = ‚àÖ) :
    KLindelofSpace Œ∫ X where
  isKLindelof_univ := isKLindelof_of_cardinal_subfamily_closed fun t => by simpa using h t

theorem IsClosed.isKLindelof [KLindelofSpace Œ∫ X] (h : IsClosed s) : IsKLindelof Œ∫ s :=
  isKLindelof_univ.of_isClosed_subset h (subset_univ _)

/-- A compact set `s` is `Œ∫`-Lindel√∂f. -/
theorem IsCompact.isKLindelof (hs : IsCompact s) (Œ∫ : Cardinal.{u}) :
    IsKLindelof Œ∫ s := by tauto

/-- A `Œ∫`-Lindel√∂f set `s` is compact for `Œ∫` ‚â§ ‚Ñµ‚ÇÄ. -/
theorem IsKLindelof.isCompact (hŒ∫ : Œ∫ ‚â§ ‚Ñµ‚ÇÄ) (hs : IsKLindelof Œ∫ s) :
    IsCompact s := by
  rw [IsCompact]
  intro f hf hfs
  have := f.toCardinalInterFilter.of_cardinalInterFilter_of_le hŒ∫
  exact hs hfs

theorem IsKLindelof_iff_isCompact : IsKLindelof ‚Ñµ‚ÇÄ s ‚Üî IsCompact s :=
  ‚ü®fun h => h.isCompact (le_refl _), fun h => h.isKLindelof ‚Ñµ‚ÇÄ‚ü©

/-- A Lindel√∂f set `s` is `Œ∫`-Lindel√∂f. -/
theorem IsLindelof.isKLindelof (hs : IsLindelof s) (hŒ∫ : ‚Ñµ‚ÇÄ < Œ∫) :
    IsKLindelof Œ∫ s := by
  rw [IsKLindelof]
  intro f _ _ hsub
  have : CountableInterFilter f := CardinalInterFilter.toCountableInterFilter f hŒ∫
  exact hs hsub

/-- A œÉ-compact set `s` is `Œ∫`-Lindel√∂f-/
theorem IsSigmaCompact.isKLindelof (hŒ∫ : ‚Ñµ‚ÇÄ < Œ∫) (hs : IsSigmaCompact s) :
    IsKLindelof Œ∫ s := IsLindelof.isKLindelof (IsSigmaCompact.isLindelof hs) hŒ∫

/-- A compact space `X` is `Œ∫`-Lindel√∂f. -/
instance (priority := 100) [CompactSpace X] : KLindelofSpace Œ∫ X :=
  { isKLindelof_univ := isCompact_univ.isKLindelof _}

/-- A sigma-compact space `X` is `Œ∫`-Lindel√∂f. -/
instance (priority := 100) [SigmaCompactSpace X] [hŒ∫ : Fact (‚Ñµ‚ÇÄ < Œ∫)] : KLindelofSpace Œ∫ X :=
  { isKLindelof_univ := isSigmaCompact_univ.isKLindelof hŒ∫.out}

/-- `X` is a non-`Œ∫`-Lindel√∂f topological space if it is not a `Œ∫`-Lindel√∂f space. -/
class NonKLindelofSpace (Œ∫ : Cardinal.{u}) (X : Type u) [TopologicalSpace X] : Prop where
  /-- In a non-`Œ∫`-Lindel√∂f space, `Set.univ` is not a `Œ∫`-Lindel√∂f set. -/
  nonKLindelof_univ : ¬¨IsKLindelof Œ∫ (univ : Set X)

lemma nonKLindelof_univ (X : Type u) [TopologicalSpace X]
    [NonKLindelofSpace Œ∫ X] : ¬¨IsKLindelof Œ∫ (univ : Set X) := NonKLindelofSpace.nonKLindelof_univ

theorem IsKLindelof.ne_univ [NonKLindelofSpace Œ∫ X] (hs : IsKLindelof Œ∫ s) : s ‚â† univ := fun h ‚Ü¶
  nonKLindelof_univ X (h ‚ñ∏ hs)

instance [hreg : Fact Œ∫.IsRegular] [NonKLindelofSpace Œ∫ X] : NeBot (Filter.coKLindelof Œ∫ X) := by
  refine (hasBasis_coKLindelof hreg.out).neBot_iff.2 fun {s} hs => ?_
  contrapose hs
  rw [not_nonempty_iff_eq_empty, compl_empty_iff] at hs
  rw [hs]
  exact nonKLindelof_univ X

@[simp]
theorem Filter.coKLindelof_eq_bot (hreg : Œ∫.IsRegular) [KLindelofSpace Œ∫ X] :
    Filter.coKLindelof Œ∫ X = ‚ä• :=
  (hasBasis_coKLindelof hreg).eq_bot_iff.mpr ‚ü®Set.univ, isKLindelof_univ, Set.compl_univ‚ü©

instance [Fact Œ∫.IsRegular] [NonKLindelofSpace Œ∫ X] :
    NeBot (Filter.coclosedKLindelof Œ∫ X) :=
  neBot_of_le coKLindelof_le_coclosedKLindelof

theorem nonKLindelofSpace_of_neBot (hreg : Œ∫.IsRegular)
    (_ : NeBot (Filter.coKLindelof Œ∫ X)) : NonKLindelofSpace Œ∫ X :=
  ‚ü®fun h' => (Filter.nonempty_of_mem (h'.compl_mem_coKLindelof hreg)).ne_empty compl_univ‚ü©

theorem Filter.coKLindelof_neBot_iff (hreg : Œ∫.IsRegular) :
    NeBot (Filter.coKLindelof Œ∫ X) ‚Üî NonKLindelofSpace Œ∫ X := by
  refine ‚ü®nonKLindelofSpace_of_neBot hreg, fun _ ‚Ü¶ ?_‚ü©
  have : Fact (Œ∫.IsRegular) := ‚ü®hreg‚ü©
  infer_instance

theorem not_KLindelofSpace_iff : ¬¨KLindelofSpace Œ∫ X ‚Üî NonKLindelofSpace Œ∫ X :=
  ‚ü®fun h‚ÇÅ => ‚ü®fun h‚ÇÇ => h‚ÇÅ ‚ü®h‚ÇÇ‚ü©‚ü©, fun ‚ü®h‚ÇÅ‚ü© ‚ü®h‚ÇÇ‚ü© => h‚ÇÅ h‚ÇÇ‚ü©

theorem cardinal_of_KLindelof_of_discrete_of_isRegular (hreg : Œ∫.IsRegular)
    [KLindelofSpace Œ∫ X] [DiscreteTopology X] : #X < Œ∫ := by
  rw [‚Üê Cardinal.mk_univ]
  exact isKLindelof_univ.cardinal_of_discrete_of_isRegular hreg

theorem cardinal_cover_nhds_interior_of_isRegular (hreg : Œ∫.IsRegular) [KLindelofSpace Œ∫ X]
    {U : X ‚Üí Set X} (hU : ‚àÄ x, U x ‚àà ùìù x) :
    ‚àÉ t : Set X, (#t < Œ∫) ‚àß ‚ãÉ x ‚àà t, interior (U x) = Set.univ :=
  let ‚ü®t, ht‚ü© := isKLindelof_univ.elim_cardinal_subcover hreg (fun x => interior (U x))
    (fun _ => isOpen_interior) fun x _ => mem_iUnion.2 ‚ü®x, mem_interior_iff_mem_nhds.2 (hU x)‚ü©
  ‚ü®t, ‚ü®ht.1, univ_subset_iff.1 ht.2‚ü©‚ü©

theorem cardinal_cover_nhds_of_isRegular (hreg : Œ∫.IsRegular) [KLindelofSpace Œ∫ X]
    {U : X ‚Üí Set X} (hU : ‚àÄ x, U x ‚àà ùìù x) : ‚àÉ t : Set X, (#t < Œ∫) ‚àß ‚ãÉ x ‚àà t, U x = Set.univ :=
  let ‚ü®t, ht‚ü© := cardinal_cover_nhds_interior_of_isRegular hreg hU
  ‚ü®t, ‚ü®ht.1, univ_subset_iff.1 <| ht.2.symm.subset.trans <|
    iUnion‚ÇÇ_mono fun _ _ => interior_subset‚ü©‚ü©

/-- The comap of the co-`Œ∫`-Lindel√∂f filter on `Y` by a continuous function `f : X ‚Üí Y` is less than
or equal to the co-`Œ∫`-Lindel√∂f filter on `X`.
This is a reformulation of the fact that images of `Œ∫`-Lindel√∂f sets are `Œ∫`-Lindel√∂f. -/
theorem Filter.comap_coKLindelof_le_of_isRegular (hreg : Cardinal.IsRegular Œ∫) {f : X ‚Üí Y}
    (hf : Continuous f) : (Filter.coKLindelof Œ∫ Y).comap f ‚â§ Filter.coKLindelof Œ∫ X := by
  rw [((hasBasis_coKLindelof hreg).comap f).le_basis_iff (hasBasis_coKLindelof hreg)]
  intro t ht
  refine ‚ü®f '' t, ht.image hf, ?_‚ü©
  simpa using t.subset_preimage_image f

theorem isKLindelof_range [KLindelofSpace Œ∫ X] {f : X ‚Üí Y} (hf : Continuous f) :
    IsKLindelof Œ∫ (range f) :=
  by rw [‚Üê image_univ]; exact isKLindelof_univ.image hf

theorem isKLindelof_diagonal [KLindelofSpace Œ∫ X] : IsKLindelof Œ∫ (diagonal X) :=
  @range_diag X ‚ñ∏ isKLindelof_range (continuous_id.prod_mk continuous_id)

/-- If `f : X ‚Üí Y` is an `Inducing` map, the image `f '' s` of a set `s` is `Œ∫`-Lindel√∂f
  if and only if `s` is `Œ∫`-Lindel√∂f. -/
theorem Inducing.isKLindelof_iff {f : X ‚Üí Y} (hf : Inducing f) :
    IsKLindelof Œ∫ s ‚Üî IsKLindelof Œ∫ (f '' s) := by
  refine ‚ü®fun hs => hs.image hf.continuous, fun hs F F_ne_bot _ F_le => ?_‚ü©
  obtain ‚ü®_, ‚ü®x, x_in : x ‚àà s, rfl‚ü©, hx : ClusterPt (f x) (map f F)‚ü© :=
    hs ((map_mono F_le).trans_eq map_principal)
  exact ‚ü®x, x_in, hf.mapClusterPt_iff.1 hx‚ü©

/-- If `f : X ‚Üí Y` is an `Embedding`, the image `f '' s` of a set `s` is `Œ∫`-Lindel√∂f
  if and only if `s` is `Œ∫`-Lindel√∂f. -/
theorem Embedding.isKLindelof_iff {f : X ‚Üí Y} (hf : Embedding f) :
    IsKLindelof Œ∫ s ‚Üî IsKLindelof Œ∫ (f '' s) := hf.toInducing.isKLindelof_iff

/-- The preimage of a `Œ∫`-Lindel√∂f set under an inducing map is a `Œ∫`-Lindel√∂f set. -/
theorem Inducing.isKLindelof_preimage {f : X ‚Üí Y} (hf : Inducing f) (hf' : IsClosed (range f))
    {K : Set Y} (hK : IsKLindelof Œ∫ K) : IsKLindelof Œ∫ (f ‚Åª¬π' K) := by
  replace hK := hK.inter_right hf'
  rwa [hf.isKLindelof_iff, image_preimage_eq_inter_range]

/-- The preimage of a `Œ∫`-Lindel√∂f set under a closed embedding is a `Œ∫`-Lindel√∂f set. -/
theorem ClosedEmbedding.isKLindelof_preimage {f : X ‚Üí Y} (hf : ClosedEmbedding f)
    {K : Set Y} (hK : IsKLindelof Œ∫ K) : IsKLindelof Œ∫ (f ‚Åª¬π' K) :=
  hf.toInducing.isKLindelof_preimage (hf.isClosed_range) hK

/-- A closed embedding is proper, ie, inverse images of `Œ∫`-Lindel√∂f sets are contained in
`Œ∫`-Lindel√∂f sets. Moreover, the preimage of a Lindel√∂f set is Lindel√∂f, see
`ClosedEmbedding.isLindelof_preimage`. -/
theorem ClosedEmbedding.tendsto_coKLindelof (hreg : Œ∫.IsRegular) {f : X ‚Üí Y}
    (hf : ClosedEmbedding f) : Tendsto f (Filter.coKLindelof Œ∫ X) (Filter.coKLindelof Œ∫ Y) :=
  (hasBasis_coKLindelof hreg).tendsto_right_iff.mpr fun _K hK =>
    (hf.isKLindelof_preimage hK).compl_mem_coKLindelof hreg

/-- Sets of subtype are `Œ∫`-Lindel√∂f iff the image under a coercion is. -/
theorem Subtype.isKLindelof_iff {p : X ‚Üí Prop} {s : Set { x // p x }} :
    IsKLindelof Œ∫ s ‚Üî IsKLindelof Œ∫ ((‚Üë) '' s : Set X) :=
  embedding_subtype_val.isKLindelof_iff

theorem isKLindelof_iff_isKLindelof_univ : IsKLindelof Œ∫ s ‚Üî IsKLindelof Œ∫ (univ : Set s) := by
  rw [Subtype.isKLindelof_iff, image_univ, Subtype.range_coe]

theorem isKLindelof_iff_KLindelofSpace : IsKLindelof Œ∫ s ‚Üî KLindelofSpace Œ∫ s :=
  isKLindelof_iff_isKLindelof_univ.trans isKLindelof_univ_iff

lemma IsKLindelof.of_coe [KLindelofSpace Œ∫ s] : IsKLindelof Œ∫ s :=
  isKLindelof_iff_KLindelofSpace.mpr ‚Äπ_‚Ä∫

theorem IsKLindelof.cardinality (hreg : Œ∫.IsRegular) (hs : IsKLindelof Œ∫ s)
    (hs' : DiscreteTopology s) : #s < Œ∫ :=
  (@cardinal_of_KLindelof_of_discrete_of_isRegular
    _ _ Œ∫ hreg (isKLindelof_iff_KLindelofSpace.mp hs) hs')

protected theorem ClosedEmbedding.nonKLindelofSpace (hreg : Œ∫.IsRegular) [NonKLindelofSpace Œ∫ X]
    {f : X ‚Üí Y} (hf : ClosedEmbedding f) : NonKLindelofSpace Œ∫ Y := by
  have : Fact (Œ∫.IsRegular) := ‚ü®hreg‚ü©
  have : NeBot (coKLindelof Œ∫ X) := inferInstance
  exact nonKLindelofSpace_of_neBot hreg (hf.tendsto_coKLindelof hreg).neBot

protected theorem ClosedEmbedding.KLindelofSpace [h : KLindelofSpace Œ∫ Y] {f : X ‚Üí Y}
    (hf : ClosedEmbedding f) : KLindelofSpace Œ∫ X :=
  ‚ü®by rw [hf.toInducing.isKLindelof_iff, image_univ]; exact hf.isClosed_range.isKLindelof‚ü©

/-- The disjoint union of two `Œ∫`-Lindel√∂f spaces is `Œ∫`-Lindel√∂f. -/
instance [hreg : Fact Œ∫.IsRegular] [KLindelofSpace Œ∫ X] [KLindelofSpace Œ∫ Y] :
    KLindelofSpace Œ∫ (X ‚äï Y) where
    isKLindelof_univ := by
      rw [‚Üê range_inl_union_range_inr]
      exact IsKLindelof.union hreg.out (isKLindelof_range continuous_inl)
        (isKLindelof_range continuous_inr)

instance [hreg : Fact Œ∫.IsRegular] [hŒπ : Fact (#Œπ < Œ∫)] {X : Œπ ‚Üí Type u}
    [‚àÄ i, TopologicalSpace (X i)] [‚àÄ i, KLindelofSpace Œ∫ (X i)] : KLindelofSpace Œ∫ (Œ£i, X i) where
  isKLindelof_univ := by
    rw [Sigma.univ]
    exact isKLindelof_iUnion hreg.out hŒπ.out fun i => isKLindelof_range continuous_sigmaMk

instance Quot.KLindelofSpace {r : X ‚Üí X ‚Üí Prop} [KLindelofSpace Œ∫ X] :
    KLindelofSpace Œ∫ (Quot r) where
  isKLindelof_univ := by
    rw [‚Üê range_quot_mk]
    exact isKLindelof_range continuous_quot_mk

instance Quotient.KLindelofSpace {s : Setoid X} [KLindelofSpace Œ∫ X] :
    KLindelofSpace Œ∫ (Quotient s) := Quot.KLindelofSpace

/-- A continuous image of a `Œ∫`-Lindel√∂f set is a `Œ∫`-Lindel√∂f set within the codomain. -/
theorem KLindelofSpace.of_continuous_surjective {f : X ‚Üí Y} [KLindelofSpace Œ∫ X] (hf : Continuous f)
    (hsur : Function.Surjective f) : KLindelofSpace Œ∫ Y where
  isKLindelof_univ := by
    rw [‚Üê Set.image_univ_of_surjective hsur]
    exact IsKLindelof.image (isKLindelof_univ_iff.mpr ‚Äπ_‚Ä∫) hf

/-- A set `s` is Hereditarily `Œ∫`-Lindel√∂f if every subset is a `Œ∫`-Lindelof set. We require this
only for open sets in the definition, and then conclude that this holds for all sets by ADD. -/
def IsHereditarilyKLindelof (Œ∫ : Cardinal.{u}) (s : Set X) :=
  ‚àÄ t ‚äÜ s, IsKLindelof Œ∫ t

lemma IsHereditarilyLindelof.isHereditarilyKLindelof (hs : IsHereditarilyLindelof s) (hŒ∫ : ‚Ñµ‚ÇÄ < Œ∫) :
    IsHereditarilyKLindelof Œ∫ s := fun t ht => IsLindelof.isKLindelof (hs t ht) hŒ∫

/-- Type class for Hereditarily `Œ∫`-Lindel√∂f spaces.  -/
class HereditarilyKLindelofSpace (Œ∫ : Cardinal.{u}) (X : Type u) [TopologicalSpace X] : Prop where
  /-- In a Hereditarily `Œ∫`-Lindel√∂f space, `Set.univ` is a Hereditarily `Œ∫`-Lindel√∂f set. -/
  isHereditarilyKLindelof_univ : IsHereditarilyKLindelof Œ∫ (univ : Set X)

lemma IsHereditarilyKLindelof.isKLindelof_subset (hs : IsHereditarilyKLindelof Œ∫ s) (ht : t ‚äÜ s) :
    IsKLindelof Œ∫ t := hs t ht

lemma IsHereditarilyKLindelof.isKLindelof (hs : IsHereditarilyKLindelof Œ∫ s) :
    IsKLindelof Œ∫ s := hs.isKLindelof_subset Subset.rfl

instance (priority := 100) HereditarilyKLindelof.to_KLindelof [HereditarilyKLindelofSpace Œ∫ X] :
    KLindelofSpace Œ∫ X where
  isKLindelof_univ := HereditarilyKLindelofSpace.isHereditarilyKLindelof_univ.isKLindelof

theorem HereditarilyKLindelof_KLindelofSets [HereditarilyKLindelofSpace Œ∫ X] (s : Set X):
    IsKLindelof Œ∫ s := by
  apply HereditarilyKLindelofSpace.isHereditarilyKLindelof_univ
  exact subset_univ s

lemma eq_open_union_cardinal (hreg : Œ∫.IsRegular) [HereditarilyKLindelofSpace Œ∫ X] {Œπ : Type u}
    (U : Œπ ‚Üí Set X) (h : ‚àÄ i, IsOpen (U i)) : ‚àÉ t : Set Œπ, (#t < Œ∫) ‚àß ‚ãÉ i‚ààt, U i = ‚ãÉ i, U i := by
  have : IsKLindelof Œ∫ (‚ãÉ i, U i) := HereditarilyKLindelof_KLindelofSets (‚ãÉ i, U i)
  rcases (isKLindelof_iff_cardinal_subcover hreg).mp this U h (Eq.subset rfl) with ‚ü®t, ‚ü®htc, htu‚ü©‚ü©
  use t, htc
  apply eq_of_subset_of_subset (iUnion‚ÇÇ_subset_iUnion (fun i ‚Ü¶ i ‚àà t) fun i ‚Ü¶ U i) htu

instance HereditarilyKLindelof.kLindelofSpace_subtype [HereditarilyKLindelofSpace Œ∫ X]
    (p : X ‚Üí Prop) : KLindelofSpace Œ∫ {x // p x} := by
  apply isKLindelof_iff_KLindelofSpace.mp
  exact HereditarilyKLindelof_KLindelofSets fun x ‚Ü¶ p x

lemma HereditarilyLindelof.HereditarilyKLindelof (hs : HereditarilyLindelofSpace s) (hŒ∫ : ‚Ñµ‚ÇÄ < Œ∫) :
    HereditarilyKLindelofSpace Œ∫ s where isHereditarilyKLindelof_univ :=
  IsHereditarilyLindelof.isHereditarilyKLindelof hs.isHereditarilyLindelof_univ hŒ∫
