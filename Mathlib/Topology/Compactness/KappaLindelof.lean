/-
Copyright (c) 2024 Josha Dekker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Josha Dekker
-/
import Mathlib.Order.Filter.CardinalInter
import Mathlib.Topology.ContinuousOn
/-!
# Œöappa-Lindel√∂f sets and Kappa-Lindel√∂f spaces
(Note, this is different from k-Lindel√∂f spaces, e.g.
  https://topology.pi-base.org/properties/P000128)

## Main definitions

We define the following properties for sets in a topological space:

* `IsKappaLindelof Œ∫ s`: Two definitions are possible here. The more standard definition is that
every open cover that contains `s` contains a subcover of cardinality less than `Œ∫`.
We choose for the equivalent definition where we require that every nontrivial CardinalInterFilter
with cardinality `Œ∫` has a clusterpoint.
Equivalence is established in `isKappaLindelof_iff_cardinal_subcover` when `Œ∫` is regular.

TODO: Add the following (in a future PR)
* `KappaLindelofSpace X`: `X` is `Œ∫`-Lindel√∂f if it is `Œ∫`-Lindel√∂f as a set.
* `NonKappaLindelofSpace`: a space that is not a `Œ∫`-Lindel√∂f space, e.g. the Long Line.

## Main results

* `isKappaLindelof_iff_cardinal_subcover`: A set is `Œ∫`-Lindel√∂f iff every open cover has a
  subcover of cardinality Œ∫.

## Implementation details

* This API is mainly based on the API for `IsCompact` and `IsLindelof` and follows notation
  and style as much as possible.
-/
open Set Filter Topology TopologicalSpace Cardinal


universe u v

variable {X : Type u} {Y : Type u} {Œπ : Type u}
variable [TopologicalSpace X] [TopologicalSpace Y] {s t : Set X}
variable {Œ∫ : Cardinal.{u}}

section KappaLindelof

/-- A set `s` is `Œ∫`-Lindel√∂f if every nontrivial `CardinalInterFilter f Œ∫` that contains `s`,
  has a clusterpoint in `s`. The filter-free definition is given by
  `isKappaLindelof_iff_cardinal_subcover`. -/
def IsKappaLindelof (Œ∫ : Cardinal) (s : Set X) :=
  ‚àÄ ‚¶Éf‚¶Ñ [NeBot f] [CardinalInterFilter f Œ∫], f ‚â§ ùìü s ‚Üí ‚àÉ x ‚àà s, ClusterPt x f

/-- The complement to a `Œ∫`-Lindel√∂f set belongs to a `CardinalInterFilter f Œ∫` if it belongs to
each filter `ùìù x ‚äì f`, `x ‚àà s`. -/
theorem IsKappaLindelof.compl_mem_sets (hs : IsKappaLindelof Œ∫ s) {f : Filter X}
    [CardinalInterFilter f Œ∫] (hf : ‚àÄ x ‚àà s, s·∂ú ‚àà ùìù x ‚äì f) : s·∂ú ‚àà f := by
  contrapose! hf
  simp only [not_mem_iff_inf_principal_compl, compl_compl, inf_assoc] at hf ‚ä¢
  exact hs inf_le_right

/-- The complement to a `Œ∫`-Lindel√∂f set belongs to a `CardinalInterFilter f Œ∫` if each `x ‚àà s` has
a neighborhood `t` within `s` such that `t·∂ú` belongs to `f`. -/
theorem IsKappaLindelof.compl_mem_sets_of_nhdsWithin (hs : IsKappaLindelof Œ∫ s)
    {f : Filter X} [CardinalInterFilter f Œ∫] (hf : ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, t·∂ú ‚àà f) : s·∂ú ‚àà f := by
  refine hs.compl_mem_sets fun x hx ‚Ü¶ ?_
  rw [‚Üê disjoint_principal_right, disjoint_right_comm, (basis_sets _).disjoint_iff_left]
  exact hf x hx

/-- If `p : Set X ‚Üí Prop` is stable under restriction and union, and each point `x`
  of a `Œ∫`-Lindel√∂f set `s` has a neighborhood `t` within `s` such that `p t`, then `p s` holds. -/
@[elab_as_elim]
theorem IsKappaLindelof.induction_on {hŒ∫: 2 < Œ∫} (hs : IsKappaLindelof Œ∫ s) {p : Set X ‚Üí Prop}
    (hmono : ‚àÄ ‚¶És t‚¶Ñ, s ‚äÜ t ‚Üí p t ‚Üí p s)
    (hcardinal_union : ‚àÄ (S : Set (Set X)), (#S < Œ∫) ‚Üí (‚àÄ s ‚àà S, p s) ‚Üí p (‚ãÉ‚ÇÄ S))
    (hnhds : ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, p t) : p s := by
  let f : Filter X := ofCardinalUnion p hŒ∫ hcardinal_union (fun t ht _ hsub ‚Ü¶ hmono hsub ht)
  have : s·∂ú ‚àà f := hs.compl_mem_sets_of_nhdsWithin (by simpa [f] using hnhds)
  rwa [‚Üê compl_compl s]

/-- The intersection of a `Œ∫`-Lindel√∂f set and a closed set is a `Œ∫`-Lindel√∂f set. -/
theorem IsKappaLindelof.inter_right (hs : IsKappaLindelof Œ∫ s) (ht : IsClosed t) :
    IsKappaLindelof Œ∫ (s ‚à© t) := by
  intro f hnf _ hstf
  rw [‚Üê inf_principal, le_inf_iff] at hstf
  obtain ‚ü®x, hsx, hx‚ü© : ‚àÉ x ‚àà s, ClusterPt x f := hs hstf.1
  have hxt : x ‚àà t := ht.mem_of_nhdsWithin_neBot <| hx.mono hstf.2
  exact ‚ü®x, ‚ü®hsx, hxt‚ü©, hx‚ü©

  /-- The intersection of a closed set and a `Œ∫`-Lindel√∂f set is a `Œ∫`-Lindel√∂f set. -/
theorem IsKappaLindelof.inter_left (ht : IsKappaLindelof Œ∫ t) (hs : IsClosed s) :
    IsKappaLindelof Œ∫ (s ‚à© t) := inter_comm t s ‚ñ∏ ht.inter_right hs

  /-- The set difference of a `Œ∫`-Lindel√∂f set and an open set is a `Œ∫`-Lindel√∂f set. -/
theorem IsKappaLindelof.diff (hs : IsKappaLindelof Œ∫ s) (ht : IsOpen t) :
    IsKappaLindelof Œ∫ (s \ t) := hs.inter_right (isClosed_compl_iff.mpr ht)

/-- A closed subset of a `Œ∫`-Lindel√∂f set is a `Œ∫`-Lindel√∂f set. -/
theorem IsKappaLindelof.of_isClosed_subset (hs : IsKappaLindelof Œ∫ s) (ht : IsClosed t)
    (h : t ‚äÜ s) : IsKappaLindelof Œ∫ t := inter_eq_self_of_subset_right h ‚ñ∏ hs.inter_right ht

/-- A continuous image of a `Œ∫`-Lindel√∂f set is a `Œ∫`-Lindel√∂f set. -/
theorem IsKappaLindelof.image_of_continuousOn {f : X ‚Üí Y} (hs : IsKappaLindelof Œ∫ s)
    (hf : ContinuousOn f s) : IsKappaLindelof (X := Y) Œ∫ (f '' s) := by
  intro l lne _ ls
  have : NeBot (l.comap f ‚äì ùìü s) :=
    comap_inf_principal_neBot_of_image_mem lne (le_principal_iff.1 ls)
  obtain ‚ü®x, hxs, hx‚ü© : ‚àÉ x ‚àà s, ClusterPt x (l.comap f ‚äì ùìü s) := @hs _ this _ inf_le_right
  haveI := hx.neBot
  use f x, mem_image_of_mem f hxs
  have : Tendsto f (ùìù x ‚äì (comap f l ‚äì ùìü s)) (ùìù (f x) ‚äì l) := by
    convert (hf x hxs).inf (@tendsto_comap _ _ f l) using 1
    rw [nhdsWithin]
    ac_rfl
  exact this.neBot

/-- A continuous image of a `Œ∫`-Lindel√∂f set is a `Œ∫`-Lindel√∂f set within the codomain. -/
theorem IsKappaLindelof.image {f : X ‚Üí Y} (hs : IsKappaLindelof Œ∫ s) (hf : Continuous f) :
    IsKappaLindelof (X := Y) Œ∫ (f '' s) := hs.image_of_continuousOn hf.continuousOn

/-- A filter with the countable intersection property that is finer than the principal filter on
a `Œ∫`-Lindel√∂f set `s` contains any open set that contains all clusterpoints of `f` in `s`. -/
theorem IsKappaLindelof.adherence_nhdset {f : Filter X} [CardinalInterFilter f Œ∫]
    (hs : IsKappaLindelof Œ∫ s) (hf‚ÇÇ : f ‚â§ ùìü s) (ht‚ÇÅ : IsOpen t)
    (ht‚ÇÇ : ‚àÄ x ‚àà s, ClusterPt x f ‚Üí x ‚àà t) : t ‚àà f := (eq_or_neBot _).casesOn mem_of_eq_bot fun _ ‚Ü¶
    let ‚ü®x, hx, hfx‚ü© := @hs (f ‚äì ùìü t·∂ú) _ _ <| inf_le_of_left_le hf‚ÇÇ
    have : x ‚àà t := ht‚ÇÇ x hx hfx.of_inf_left
    have : t·∂ú ‚à© t ‚àà ùìù[t·∂ú] x := inter_mem_nhdsWithin _ (ht‚ÇÅ.mem_nhds this)
    have A : ùìù[t·∂ú] x = ‚ä• := empty_mem_iff_bot.1 <| compl_inter_self t ‚ñ∏ this
    have : ùìù[t·∂ú] x ‚â† ‚ä• := hfx.of_inf_right.ne
    absurd A this

/-- For every open cover of a `Œ∫`-Lindel√∂f set, there exists a subcover with cardinality less
than `Œ∫`. -/
theorem IsKappaLindelof.elim_cardinal_subcover {Œπ : Type u} (hreg : Cardinal.IsRegular Œ∫)
    (hs : IsKappaLindelof Œ∫ s) (U : Œπ ‚Üí Set X) (hUo : ‚àÄ i, IsOpen (U i)) (hsU : s ‚äÜ ‚ãÉ i, U i) :
    ‚àÉ r : Set Œπ, (#r < Œ∫) ‚àß (s ‚äÜ ‚ãÉ i ‚àà r, U i) := by
  have hŒ∫ : 2 < Œ∫ := IsRegular.nat_lt hreg 2
  have hmono : ‚àÄ ‚¶És t : Set X‚¶Ñ, s ‚äÜ t ‚Üí (‚àÉ r : Set Œπ, (#r < Œ∫) ‚àß t ‚äÜ ‚ãÉ i ‚àà r, U i)
      ‚Üí (‚àÉ r : Set Œπ, (#r < Œ∫) ‚àß s ‚äÜ ‚ãÉ i ‚àà r, U i) := by
    intro s t hst ‚ü®r, ‚ü®hrcardinal, hsub‚ü©‚ü©
    exact ‚ü®r, hrcardinal, Subset.trans hst hsub‚ü©
  have hcardinal_union : ‚àÄ (S : Set (Set X)), (#S < Œ∫)
      ‚Üí (‚àÄ s ‚àà S, ‚àÉ r : Set Œπ, (#r < Œ∫) ‚àß (s ‚äÜ ‚ãÉ i ‚àà r, U i))
      ‚Üí ‚àÉ r : Set Œπ, (#r < Œ∫) ‚àß (‚ãÉ‚ÇÄ S ‚äÜ ‚ãÉ i ‚àà r, U i) := by
    intro S hS hsr
    choose! r hr using hsr
    refine ‚ü®‚ãÉ s ‚àà S, r s, ?_, ?_‚ü©
    ¬∑ rw [card_biUnion_lt_iff_forall_of_isRegular hreg]
      exact fun a ha ‚Ü¶ (hr a ha).1
      exact hS
    refine sUnion_subset ?h.right.h
    simp only [mem_iUnion, exists_prop, iUnion_exists, biUnion_and']
    exact fun i is x hx ‚Ü¶ mem_biUnion is ((hr i is).2 hx)
  have h_nhds : ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, ‚àÉ r : Set Œπ, (#r < Œ∫) ‚àß (t ‚äÜ ‚ãÉ i ‚àà r, U i) := by
    intro x hx
    let ‚ü®i, hi‚ü© := mem_iUnion.1 (hsU hx)
    have : 1 < Œ∫ := IsRegular.nat_lt hreg 1
    refine ‚ü®U i, mem_nhdsWithin_of_mem_nhds ((hUo i).mem_nhds hi), {i}, by simp [this], ?_‚ü©
    simp only [mem_singleton_iff, iUnion_iUnion_eq_left]
    exact subset_rfl
  exact hs.induction_on (hŒ∫ := hŒ∫) hmono hcardinal_union h_nhds

theorem IsKappaLindelof.elim_nhds_subcover' (hreg : Cardinal.IsRegular Œ∫) (hs : IsKappaLindelof Œ∫ s)
    (U : ‚àÄ x ‚àà s, Set X) (hU : ‚àÄ x (hx : x ‚àà s), U x ‚Äπx ‚àà s‚Ä∫ ‚àà ùìù x) :
    ‚àÉ t : Set s, (#t < Œ∫) ‚àß s ‚äÜ ‚ãÉ x ‚àà t, U (x : s) x.2 := by
  have := hs.elim_cardinal_subcover hreg (fun x : s ‚Ü¶ interior (U x x.2))
    (fun _ ‚Ü¶ isOpen_interior)
    fun x hx ‚Ü¶ mem_iUnion.2 ‚ü®‚ü®x, hx‚ü©, mem_interior_iff_mem_nhds.2 <| hU _ _‚ü©
  rcases this with ‚ü®r, ‚ü®hr, hs‚ü©‚ü©
  use r, hr
  apply Subset.trans hs
  apply iUnion‚ÇÇ_subset
  intro i hi
  apply Subset.trans interior_subset
  exact subset_iUnion_of_subset i (subset_iUnion_of_subset hi (Subset.refl _))

theorem IsKappaLindelof.elim_nhds_subcover (hreg : Cardinal.IsRegular Œ∫) (hs : IsKappaLindelof Œ∫ s)
    (U : X ‚Üí Set X) (hU : ‚àÄ x ‚àà s, U x ‚àà ùìù x) :
    ‚àÉ t : Set X, (#t < Œ∫) ‚àß (‚àÄ x ‚àà t, x ‚àà s) ‚àß s ‚äÜ ‚ãÉ x ‚àà t, U x := by
  let ‚ü®t, ‚ü®htc, htsub‚ü©‚ü© := hs.elim_nhds_subcover' hreg (fun x _ ‚Ü¶ U x) hU
  refine ‚ü®‚Üët,  lt_of_le_of_lt Cardinal.mk_image_le htc, ?_‚ü©
  constructor
  ¬∑ intro _
    simp only [mem_image, Subtype.exists, exists_and_right, exists_eq_right, forall_exists_index]
    tauto
  ¬∑ have : ‚ãÉ x ‚àà t, U ‚Üëx = ‚ãÉ x ‚àà Subtype.val '' t, U x := biUnion_image.symm
    rwa [‚Üê this]

/-- The neighborhood filter of a `Œ∫`-Lindel√∂f set is disjoint with a `CardinalInterFilter l Œ∫`
filter if and only if the neighborhood filter of each point of this set is disjoint with `l`. -/
theorem IsKappaLindelof.disjoint_nhdsSet_left (hreg : Cardinal.IsRegular Œ∫) {l : Filter X}
    [CardinalInterFilter l Œ∫] (hs : IsKappaLindelof Œ∫ s) :
    Disjoint (ùìùÀ¢ s) l ‚Üî ‚àÄ x ‚àà s, Disjoint (ùìù x) l := by
  refine ‚ü®fun h x hx ‚Ü¶ h.mono_left <| nhds_le_nhdsSet hx, fun H ‚Ü¶ ?_‚ü©
  choose! U hxU hUl using fun x hx ‚Ü¶ (nhds_basis_opens x).disjoint_iff_left.1 (H x hx)
  choose hxU hUo using hxU
  rcases hs.elim_nhds_subcover hreg U fun x hx ‚Ü¶ (hUo x hx).mem_nhds (hxU x hx)
    with ‚ü®t, htc, hts, hst‚ü©
  refine (hasBasis_nhdsSet _).disjoint_iff_left.2
    ‚ü®‚ãÉ x ‚àà t, U x, ‚ü®isOpen_biUnion fun x hx ‚Ü¶ hUo x (hts x hx), hst‚ü©, ?_‚ü©
  rw [compl_iUnion‚ÇÇ]
  exact (cardinal_bInter_mem htc).mpr (fun i hi ‚Ü¶ hUl _ (hts _ hi))

/-- A `CardinalInterFilter l Œ∫` filter is disjoint with the neighborhood
filter of a `Œ∫`-Lindel√∂f set if and only if it is disjoint with the neighborhood filter of each
point of this set. -/
theorem IsKappaLindelof.disjoint_nhdsSet_right (hreg : Cardinal.IsRegular Œ∫) {l : Filter X}
    [CardinalInterFilter l Œ∫] (hs : IsKappaLindelof Œ∫ s) :
    Disjoint l (ùìùÀ¢ s) ‚Üî ‚àÄ x ‚àà s, Disjoint l (ùìù x) := by
  simpa only [disjoint_comm] using (hs.disjoint_nhdsSet_left hreg)

/-- For every family of closed sets whose intersection avoids a `Œ∫`-Lindel√∂f set,
there exists a subfamil of size less than `Œ∫` whose intersection avoids this `Œ∫`-Lindel√∂f set. -/
theorem IsKappaLindelof.elim_cardinal_subfamily_closed (hreg : Cardinal.IsRegular Œ∫) {Œπ : Type u}
    (hs : IsKappaLindelof Œ∫ s) (t : Œπ ‚Üí Set X) (htc : ‚àÄ i, IsClosed (t i))
    (hst : (s ‚à© ‚ãÇ i, t i) = ‚àÖ) : ‚àÉ u : Set Œπ, (#u < Œ∫) ‚àß (s ‚à© ‚ãÇ i ‚àà u, t i) = ‚àÖ := by
  let U := t·∂ú
  have hUo : ‚àÄ i, IsOpen (U i) := by simp only [U, Pi.compl_apply, isOpen_compl_iff]; exact htc
  have hsU : s ‚äÜ ‚ãÉ i, U i := by
    simp only [U, Pi.compl_apply]
    rw [‚Üê compl_iInter]
    apply disjoint_compl_left_iff_subset.mp
    simp only [compl_iInter, compl_iUnion, compl_compl]
    apply Disjoint.symm
    exact disjoint_iff_inter_eq_empty.mpr hst
  rcases hs.elim_cardinal_subcover hreg U hUo hsU with ‚ü®u, ‚ü®hucount, husub‚ü©‚ü©
  use u, hucount
  rw [‚Üê disjoint_compl_left_iff_subset] at husub
  simp only [U, Pi.compl_apply, compl_iUnion, compl_compl] at husub
  exact disjoint_iff_inter_eq_empty.mp (Disjoint.symm husub)

/-- To show that a `Œ∫`-Lindel√∂f set intersects the intersection of a family of closed sets,
  it is sufficient to show that it intersects every subfamily of cardinality below `Œ∫`. -/
theorem IsKappaLindelof.inter_iInter_nonempty (hreg : Cardinal.IsRegular Œ∫) {Œπ : Type u}
    (hs : IsKappaLindelof Œ∫ s) (t : Œπ ‚Üí Set X) (htc : ‚àÄ i, IsClosed (t i))
    (hst : ‚àÄ u : Set Œπ, (#u < Œ∫) ‚àß (s ‚à© ‚ãÇ i ‚àà u, t i).Nonempty) : (s ‚à© ‚ãÇ i, t i).Nonempty := by
  contrapose! hst
  rcases hs.elim_cardinal_subfamily_closed hreg t htc hst with ‚ü®u, ‚ü®_, husub‚ü©‚ü©
  exact ‚ü®u, fun _ ‚Ü¶ husub‚ü©

/-- For every open cover of a `Œ∫`-Lindel√∂f set, there exists a subcover of cardinality less than
`Œ∫`. -/
theorem IsKappaLindelof.elim_cardinal_subcover_image (hreg : Cardinal.IsRegular Œ∫) {b : Set Œπ}
    {c : Œπ ‚Üí Set X} (hs : IsKappaLindelof Œ∫ s) (hc‚ÇÅ : ‚àÄ i ‚àà b, IsOpen (c i))
    (hc‚ÇÇ : s ‚äÜ ‚ãÉ i ‚àà b, c i) : ‚àÉ b', b' ‚äÜ b ‚àß (#b' < Œ∫) ‚àß s ‚äÜ ‚ãÉ i ‚àà b', c i := by
  simp only [Subtype.forall', biUnion_eq_iUnion] at hc‚ÇÅ hc‚ÇÇ
  rcases hs.elim_cardinal_subcover hreg (fun i ‚Ü¶ c i : b ‚Üí Set X) hc‚ÇÅ hc‚ÇÇ with ‚ü®d, hd‚ü©
  refine ‚ü®Subtype.val '' d, by simp, lt_of_le_of_lt Cardinal.mk_image_le hd.1, ?_‚ü©
  rw [biUnion_image]
  exact hd.2

/-- A set `s` is `Œ∫`-Lindel√∂f if for every open cover of `s`, there exists a subcover of cardinality
below `Œ∫`. -/
theorem isKappaLindelof_of_cardinal_subcover
    (h : ‚àÄ {Œπ : Type u} (U : Œπ ‚Üí Set X), (‚àÄ i, IsOpen (U i)) ‚Üí (s ‚äÜ ‚ãÉ i, U i) ‚Üí
    ‚àÉ t : Set Œπ, (#t < Œ∫) ‚àß s ‚äÜ ‚ãÉ i ‚àà t, U i) :
    IsKappaLindelof Œ∫ s := fun f hf hfs ‚Ü¶ by
  contrapose! h
  simp only [ClusterPt, not_neBot, ‚Üê disjoint_iff, SetCoe.forall',
    (nhds_basis_opens _).disjoint_iff_left] at h
  choose fsub U hU hUf using h
  refine ‚ü®s, U, fun x ‚Ü¶ (hU x).2, fun x hx ‚Ü¶ mem_iUnion.2 ‚ü®‚ü®x, hx‚ü©, (hU _).1 ‚ü©, ?_‚ü©
  intro t ht h
  have uinf := f.sets_of_superset (le_principal_iff.1 fsub) h
  have uninf : ‚ãÇ i ‚àà t, (U i)·∂ú ‚àà f := (cardinal_bInter_mem ht).mpr (fun _ _ ‚Ü¶ hUf _)
  rw [‚Üê compl_iUnion‚ÇÇ] at uninf
  have uninf := compl_not_mem uninf
  simp only [compl_compl] at uninf
  contradiction

/-- A set `s` is `Œ∫`-Lindel√∂f if for every family of closed sets whose intersection avoids `s`,
there exists a cardinal subfamily whose intersection avoids `s`. -/
theorem isKappaLindelof_of_cardinal_subfamily_closed
    (h :
      ‚àÄ {Œπ : Type u} (t : Œπ ‚Üí Set X), (‚àÄ i, IsClosed (t i)) ‚Üí (s ‚à© ‚ãÇ i, t i) = ‚àÖ ‚Üí
        ‚àÉ u : Set Œπ, (#u < Œ∫) ‚àß (s ‚à© ‚ãÇ i ‚àà u, t i) = ‚àÖ) :
    IsKappaLindelof Œ∫ s :=
  isKappaLindelof_of_cardinal_subcover fun U hUo hsU ‚Ü¶ by
    rw [‚Üê disjoint_compl_right_iff_subset, compl_iUnion, disjoint_iff] at hsU
    rcases h (fun i ‚Ü¶ (U i)·∂ú) (fun i ‚Ü¶ (hUo _).isClosed_compl) hsU with ‚ü®t, ht‚ü©
    refine ‚ü®t, ?_‚ü©
    rwa [‚Üê disjoint_compl_right_iff_subset, compl_iUnion‚ÇÇ, disjoint_iff]

/-- A set `s` is `Œ∫`-Lindel√∂f if and only if
for every open cover of `s`, there exists a subcover of cardinality less than `Œ∫`. -/
theorem isKappaLindelof_iff_cardinal_subcover (hreg : Cardinal.IsRegular Œ∫) :
    IsKappaLindelof Œ∫ s ‚Üî ‚àÄ {Œπ : Type u} (U : Œπ ‚Üí Set X),
      (‚àÄ i, IsOpen (U i)) ‚Üí (s ‚äÜ ‚ãÉ i, U i) ‚Üí ‚àÉ t : Set Œπ, (#t < Œ∫) ‚àß s ‚äÜ ‚ãÉ i ‚àà t, U i :=
  ‚ü®fun hs ‚Ü¶ hs.elim_cardinal_subcover hreg, isKappaLindelof_of_cardinal_subcover‚ü©

/-- A set `s` is `Œ∫`-Lindel√∂f if and only if
for every family of closed sets whose intersection avoids `s`,
there exists a subfamily of cardinality below `Œ∫` whose intersection avoids `s`. -/
theorem isKappaLindelof_iff_cardinal_subfamily_closed (hreg : Cardinal.IsRegular Œ∫) :
    IsKappaLindelof Œ∫ s ‚Üî ‚àÄ {Œπ : Type u} (t : Œπ ‚Üí Set X),
    (‚àÄ i, IsClosed (t i)) ‚Üí (s ‚à© ‚ãÇ i, t i) = ‚àÖ
    ‚Üí ‚àÉ u : Set Œπ, (#u < Œ∫) ‚àß (s ‚à© ‚ãÇ i ‚àà u, t i) = ‚àÖ :=
  ‚ü®fun hs ‚Ü¶ hs.elim_cardinal_subfamily_closed hreg, isKappaLindelof_of_cardinal_subfamily_closed‚ü©
