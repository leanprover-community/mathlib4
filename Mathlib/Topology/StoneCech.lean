/-
Copyright (c) 2018 Reid Barton. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Reid Barton
-/
import Mathlib.Topology.Bases
import Mathlib.Topology.DenseEmbedding

#align_import topology.stone_cech from "leanprover-community/mathlib"@"0a0ec35061ed9960bf0e7ffb0335f44447b58977"

/-! # Stone-ƒåech compactification

Construction of the Stone-ƒåech compactification using ultrafilters.

Parts of the formalization are based on "Ultrafilters and Topology"
by Marius Stekelenburg, particularly section 5.
-/


noncomputable section

open Filter Set

open Topology

universe u v

section Ultrafilter

/- The set of ultrafilters on Œ± carries a natural topology which makes
  it the Stone-ƒåech compactification of Œ± (viewed as a discrete space). -/
/-- Basis for the topology on `Ultrafilter Œ±`. -/
def ultrafilterBasis (Œ± : Type u) : Set (Set (Ultrafilter Œ±)) :=
  range fun s : Set Œ± => { u | s ‚àà u }
#align ultrafilter_basis ultrafilterBasis

variable {Œ± : Type u}

instance Ultrafilter.topologicalSpace : TopologicalSpace (Ultrafilter Œ±) :=
  TopologicalSpace.generateFrom (ultrafilterBasis Œ±)
#align ultrafilter.topological_space Ultrafilter.topologicalSpace

theorem ultrafilterBasis_is_basis : TopologicalSpace.IsTopologicalBasis (ultrafilterBasis Œ±) :=
  ‚ü®by
    rintro _ ‚ü®a, rfl‚ü© _ ‚ü®b, rfl‚ü© u ‚ü®ua, ub‚ü©
    refine' ‚ü®_, ‚ü®a ‚à© b, rfl‚ü©, inter_mem ua ub, fun v hv => ‚ü®_, _‚ü©‚ü© <;> apply mem_of_superset hv <;>
      simp [inter_subset_right a b],
    eq_univ_of_univ_subset <| subset_sUnion_of_mem <| ‚ü®univ, eq_univ_of_forall fun u => univ_mem‚ü©,
    rfl‚ü©
#align ultrafilter_basis_is_basis ultrafilterBasis_is_basis

/-- The basic open sets for the topology on ultrafilters are open. -/
theorem ultrafilter_isOpen_basic (s : Set Œ±) : IsOpen { u : Ultrafilter Œ± | s ‚àà u } :=
  ultrafilterBasis_is_basis.isOpen ‚ü®s, rfl‚ü©
#align ultrafilter_is_open_basic ultrafilter_isOpen_basic

/-- The basic open sets for the topology on ultrafilters are also closed. -/
theorem ultrafilter_isClosed_basic (s : Set Œ±) : IsClosed { u : Ultrafilter Œ± | s ‚àà u } := by
  rw [‚Üê isOpen_compl_iff]
  convert ultrafilter_isOpen_basic s·∂ú using 1
  ext u
  exact Ultrafilter.compl_mem_iff_not_mem.symm
#align ultrafilter_is_closed_basic ultrafilter_isClosed_basic

/-- Every ultrafilter `u` on `Ultrafilter Œ±` converges to a unique
  point of `Ultrafilter Œ±`, namely `joinM u`. -/
theorem ultrafilter_converges_iff {u : Ultrafilter (Ultrafilter Œ±)} {x : Ultrafilter Œ±} :
    ‚Üëu ‚â§ ùìù x ‚Üî x = joinM u := by
  rw [eq_comm, ‚Üê Ultrafilter.coe_le_coe]
  change ‚Üëu ‚â§ ùìù x ‚Üî ‚àÄ s ‚àà x, { v : Ultrafilter Œ± | s ‚àà v } ‚àà u
  simp only [TopologicalSpace.nhds_generateFrom, le_iInf_iff, ultrafilterBasis, le_principal_iff,
    mem_setOf_eq]
  constructor
  ¬∑ intro h a ha
    exact h _ ‚ü®ha, a, rfl‚ü©
  ¬∑ rintro h a ‚ü®xi, a, rfl‚ü©
    exact h _ xi
#align ultrafilter_converges_iff ultrafilter_converges_iff

instance ultrafilter_compact : CompactSpace (Ultrafilter Œ±) :=
  ‚ü®isCompact_iff_ultrafilter_le_nhds.mpr fun f _ =>
      ‚ü®joinM f, trivial, ultrafilter_converges_iff.mpr rfl‚ü©‚ü©
#align ultrafilter_compact ultrafilter_compact

instance Ultrafilter.t2Space : T2Space (Ultrafilter Œ±) :=
  t2_iff_ultrafilter.mpr @fun x y f fx fy =>
    have hx : x = joinM f := ultrafilter_converges_iff.mp fx
    have hy : y = joinM f := ultrafilter_converges_iff.mp fy
    hx.trans hy.symm
#align ultrafilter.t2_space Ultrafilter.t2Space

instance : TotallyDisconnectedSpace (Ultrafilter Œ±) := by
  rw [totallyDisconnectedSpace_iff_connectedComponent_singleton]
  intro A
  simp only [Set.eq_singleton_iff_unique_mem, mem_connectedComponent, true_and_iff]
  intro B hB
  rw [‚Üê Ultrafilter.coe_le_coe]
  intro s hs
  rw [connectedComponent_eq_iInter_isClopen, Set.mem_iInter] at hB
  let Z := { F : Ultrafilter Œ± | s ‚àà F }
  have hZ : IsClopen Z := ‚ü®ultrafilter_isClosed_basic s, ultrafilter_isOpen_basic s‚ü©
  exact hB ‚ü®Z, hZ, hs‚ü©

@[simp] theorem Ultrafilter.tendsto_pure_self (b : Ultrafilter Œ±) : Tendsto pure b (ùìù b) := by
  rw [Tendsto, ‚Üê coe_map, ultrafilter_converges_iff]
  ext s
  change s ‚àà b ‚Üî {t | s ‚àà t} ‚àà map pure b
  simp_rw [mem_map, preimage_setOf_eq, mem_pure, setOf_mem_eq]

theorem ultrafilter_comap_pure_nhds (b : Ultrafilter Œ±) : comap pure (ùìù b) ‚â§ b := by
  rw [TopologicalSpace.nhds_generateFrom]
  simp only [comap_iInf, comap_principal]
  intro s hs
  rw [‚Üê le_principal_iff]
  refine' iInf_le_of_le { u | s ‚àà u } _
  refine' iInf_le_of_le ‚ü®hs, ‚ü®s, rfl‚ü©‚ü© _
  exact principal_mono.2 fun a => id
#align ultrafilter_comap_pure_nhds ultrafilter_comap_pure_nhds

section Embedding

theorem ultrafilter_pure_injective : Function.Injective (pure : Œ± ‚Üí Ultrafilter Œ±) := by
  intro x y h
  have : {x} ‚àà (pure x : Ultrafilter Œ±) := singleton_mem_pure
  rw [h] at this
  exact (mem_singleton_iff.mp (mem_pure.mp this)).symm
#align ultrafilter_pure_injective ultrafilter_pure_injective

open TopologicalSpace

/-- The range of `pure : Œ± ‚Üí Ultrafilter Œ±` is dense in `Ultrafilter Œ±`. -/
theorem denseRange_pure : DenseRange (pure : Œ± ‚Üí Ultrafilter Œ±) := fun x =>
  mem_closure_iff_ultrafilter.mpr
    ‚ü®x.map pure, range_mem_map, ultrafilter_converges_iff.mpr (bind_pure x).symm‚ü©
#align dense_range_pure denseRange_pure

/-- The map `pure : Œ± ‚Üí Ultrafilter Œ±` induces on `Œ±` the discrete topology. -/
theorem induced_topology_pure :
    TopologicalSpace.induced (pure : Œ± ‚Üí Ultrafilter Œ±) Ultrafilter.topologicalSpace = ‚ä• := by
  apply eq_bot_of_singletons_open
  intro x
  use { u : Ultrafilter Œ± | {x} ‚àà u }, ultrafilter_isOpen_basic _
  simp
#align induced_topology_pure induced_topology_pure

/-- `pure : Œ± ‚Üí Ultrafilter Œ±` defines a dense inducing of `Œ±` in `Ultrafilter Œ±`. -/
theorem denseInducing_pure : @DenseInducing _ _ ‚ä• _ (pure : Œ± ‚Üí Ultrafilter Œ±) :=
  letI : TopologicalSpace Œ± := ‚ä•
  ‚ü®‚ü®induced_topology_pure.symm‚ü©, denseRange_pure‚ü©
#align dense_inducing_pure denseInducing_pure

-- The following refined version will never be used
/-- `pure : Œ± ‚Üí Ultrafilter Œ±` defines a dense embedding of `Œ±` in `Ultrafilter Œ±`. -/
theorem denseEmbedding_pure : @DenseEmbedding _ _ ‚ä• _ (pure : Œ± ‚Üí Ultrafilter Œ±) :=
  letI : TopologicalSpace Œ± := ‚ä•
  { denseInducing_pure with inj := ultrafilter_pure_injective }
#align dense_embedding_pure denseEmbedding_pure

end Embedding

section Extension

/- Goal: Any function `Œ± ‚Üí Œ≥` to a compact Hausdorff space `Œ≥` has a
  unique extension to a continuous function `Ultrafilter Œ± ‚Üí Œ≥`. We
  already know it must be unique because `Œ± ‚Üí Ultrafilter Œ±` is a
  dense embedding and `Œ≥` is Hausdorff. For existence, we will invoke
  `DenseInducing.continuous_extend`. -/
variable {Œ≥ : Type*} [TopologicalSpace Œ≥]

/-- The extension of a function `Œ± ‚Üí Œ≥` to a function `Ultrafilter Œ± ‚Üí Œ≥`.
  When `Œ≥` is a compact Hausdorff space it will be continuous. -/
def Ultrafilter.extend (f : Œ± ‚Üí Œ≥) : Ultrafilter Œ± ‚Üí Œ≥ :=
  letI : TopologicalSpace Œ± := ‚ä•
  denseInducing_pure.extend f
#align ultrafilter.extend Ultrafilter.extend

variable [T2Space Œ≥]

theorem ultrafilter_extend_extends (f : Œ± ‚Üí Œ≥) : Ultrafilter.extend f ‚àò pure = f := by
  letI : TopologicalSpace Œ± := ‚ä•
  haveI : DiscreteTopology Œ± := ‚ü®rfl‚ü©
  exact funext (denseInducing_pure.extend_eq continuous_of_discreteTopology)
#align ultrafilter_extend_extends ultrafilter_extend_extends

variable [CompactSpace Œ≥]

theorem continuous_ultrafilter_extend (f : Œ± ‚Üí Œ≥) : Continuous (Ultrafilter.extend f) := by
  have h : ‚àÄ b : Ultrafilter Œ±, ‚àÉ c, Tendsto f (comap pure (ùìù b)) (ùìù c) := fun b =>
    -- b.map f is an ultrafilter on Œ≥, which is compact, so it converges to some c in Œ≥.
    let ‚ü®c, _, h'‚ü© :=
      isCompact_univ.ultrafilter_le_nhds (b.map f) (by rw [le_principal_iff]; exact univ_mem)
    ‚ü®c, le_trans (map_mono (ultrafilter_comap_pure_nhds _)) h'‚ü©
  letI : TopologicalSpace Œ± := ‚ä•
  exact denseInducing_pure.continuous_extend h
#align continuous_ultrafilter_extend continuous_ultrafilter_extend

/-- The value of `Ultrafilter.extend f` on an ultrafilter `b` is the
  unique limit of the ultrafilter `b.map f` in `Œ≥`. -/
theorem ultrafilter_extend_eq_iff {f : Œ± ‚Üí Œ≥} {b : Ultrafilter Œ±} {c : Œ≥} :
    Ultrafilter.extend f b = c ‚Üî ‚Üë(b.map f) ‚â§ ùìù c :=
  ‚ü®fun h => by
    -- Write b as an ultrafilter limit of pure ultrafilters, and use
    -- the facts that ultrafilter.extend is a continuous extension of f.
    let b' : Ultrafilter (Ultrafilter Œ±) := b.map pure
    have t : ‚Üëb' ‚â§ ùìù b := ultrafilter_converges_iff.mpr (bind_pure _).symm
    rw [‚Üê h]
    have := (continuous_ultrafilter_extend f).tendsto b
    refine' le_trans _ (le_trans (map_mono t) this)
    change _ ‚â§ map (Ultrafilter.extend f ‚àò pure) ‚Üëb
    rw [ultrafilter_extend_extends]
    exact le_rfl, fun h =>
    letI : TopologicalSpace Œ± := ‚ä•
    denseInducing_pure.extend_eq_of_tendsto
      (le_trans (map_mono (ultrafilter_comap_pure_nhds _)) h)‚ü©
#align ultrafilter_extend_eq_iff ultrafilter_extend_eq_iff

end Extension

end Ultrafilter

section StoneCech

/- Now, we start with a (not necessarily discrete) topological space Œ±
  and we want to construct its Stone-ƒåech compactification. We can
  build it as a quotient of `Ultrafilter Œ±` by the relation which
  identifies two points if the extension of every continuous function
  Œ± ‚Üí Œ≥ to a compact Hausdorff space sends the two points to the same
  point of Œ≥. -/
variable (Œ± : Type u) [TopologicalSpace Œ±]

instance stoneCechSetoid : Setoid (Ultrafilter Œ±) where
  r x y :=
    ‚àÄ (Œ≥ : Type u) [TopologicalSpace Œ≥],
      ‚àÄ [T2Space Œ≥] [CompactSpace Œ≥] (f : Œ± ‚Üí Œ≥) (_ : Continuous f),
        Ultrafilter.extend f x = Ultrafilter.extend f y
  iseqv :=
    ‚ü®fun _ _ _ _ _ _ _ => rfl, @fun _ _ xy Œ≥ _ _ _ f hf => (xy Œ≥ f hf).symm,
      @fun _ _ _ xy yz Œ≥ _ _ _ f hf => (xy Œ≥ f hf).trans (yz Œ≥ f hf)‚ü©
#align stone_cech_setoid stoneCechSetoid

/-- The Stone-ƒåech compactification of a topological space. -/
def StoneCech : Type u :=
  Quotient (stoneCechSetoid Œ±)
#align stone_cech StoneCech

variable {Œ±}

instance : TopologicalSpace (StoneCech Œ±) := by unfold StoneCech; infer_instance

instance [Inhabited Œ±] : Inhabited (StoneCech Œ±) := by unfold StoneCech; infer_instance

/-- The natural map from Œ± to its Stone-ƒåech compactification. -/
def stoneCechUnit (x : Œ±) : StoneCech Œ± :=
  ‚ü¶pure x‚üß
#align stone_cech_unit stoneCechUnit

/-- The image of stone_cech_unit is dense. (But stone_cech_unit need
  not be an embedding, for example if Œ± is not Hausdorff.) -/
theorem denseRange_stoneCechUnit : DenseRange (stoneCechUnit : Œ± ‚Üí StoneCech Œ±) :=
  denseRange_pure.quotient
#align dense_range_stone_cech_unit denseRange_stoneCechUnit

section Extension

variable {Œ≥ : Type u} [TopologicalSpace Œ≥] [T2Space Œ≥] [CompactSpace Œ≥]
variable {Œ≥' : Type u} [TopologicalSpace Œ≥'] [T2Space Œ≥']
variable {f : Œ± ‚Üí Œ≥} (hf : Continuous f)

-- Porting note: missing attribute
--attribute [local elab_with_expected_type] Quotient.lift

/-- The extension of a continuous function from Œ± to a compact
  Hausdorff space Œ≥ to the Stone-ƒåech compactification of Œ±. -/
def stoneCechExtend : StoneCech Œ± ‚Üí Œ≥ :=
  Quotient.lift (Ultrafilter.extend f) fun _ _ xy => xy Œ≥ f hf
#align stone_cech_extend stoneCechExtend

theorem stoneCechExtend_extends : stoneCechExtend hf ‚àò stoneCechUnit = f :=
  ultrafilter_extend_extends f
#align stone_cech_extend_extends stoneCechExtend_extends

theorem continuous_stoneCechExtend : Continuous (stoneCechExtend hf) :=
  continuous_quot_lift _ (continuous_ultrafilter_extend f)
#align continuous_stone_cech_extend continuous_stoneCechExtend

theorem stoneCech_hom_ext {g‚ÇÅ g‚ÇÇ : StoneCech Œ± ‚Üí Œ≥'} (h‚ÇÅ : Continuous g‚ÇÅ) (h‚ÇÇ : Continuous g‚ÇÇ)
    (h : g‚ÇÅ ‚àò stoneCechUnit = g‚ÇÇ ‚àò stoneCechUnit) : g‚ÇÅ = g‚ÇÇ := by
  apply Continuous.ext_on denseRange_stoneCechUnit h‚ÇÅ h‚ÇÇ
  rintro x ‚ü®x, rfl‚ü©
  apply congr_fun h x
#align stone_cech_hom_ext stoneCech_hom_ext

end Extension

theorem convergent_eqv_pure {u : Ultrafilter Œ±} {x : Œ±} (ux : ‚Üëu ‚â§ ùìù x) : u ‚âà pure x :=
  fun Œ≥ tŒ≥ h‚ÇÅ h‚ÇÇ f hf => by
  trans f x; swap; on_goal 1 => symm
  all_goals refine' ultrafilter_extend_eq_iff.mpr (le_trans (map_mono _) (hf.tendsto _))
  ¬∑ apply pure_le_nhds
  ¬∑ exact ux
#align convergent_eqv_pure convergent_eqv_pure

theorem continuous_stoneCechUnit : Continuous (stoneCechUnit : Œ± ‚Üí StoneCech Œ±) :=
  continuous_iff_ultrafilter.mpr fun x g gx => by
    have : (g.map pure).toFilter ‚â§ ùìù g := by
      rw [ultrafilter_converges_iff]
      exact (bind_pure _).symm
    have : (g.map stoneCechUnit : Filter (StoneCech Œ±)) ‚â§ ùìù ‚ü¶g‚üß :=
      continuousAt_iff_ultrafilter.mp (continuous_quotient_mk'.tendsto g) _ this
    rwa [show ‚ü¶g‚üß = ‚ü¶pure x‚üß from Quotient.sound <| convergent_eqv_pure gx] at this
#align continuous_stone_cech_unit continuous_stoneCechUnit

instance StoneCech.t2Space : T2Space (StoneCech Œ±) := by
  rw [t2_iff_ultrafilter]
  rintro ‚ü®x‚ü© ‚ü®y‚ü© g gx gy
  apply Quotient.sound
  intro Œ≥ tŒ≥ h‚ÇÅ h‚ÇÇ f hf
  let ff := stoneCechExtend hf
  change ff ‚ü¶x‚üß = ff ‚ü¶y‚üß
  have lim := fun (z : Ultrafilter Œ±) (gz : (g : Filter (StoneCech Œ±)) ‚â§ ùìù ‚ü¶z‚üß) =>
    ((continuous_stoneCechExtend hf).tendsto _).mono_left gz
  exact tendsto_nhds_unique (lim x gx) (lim y gy)
#align stone_cech.t2_space StoneCech.t2Space

instance StoneCech.compactSpace : CompactSpace (StoneCech Œ±) :=
  Quotient.compactSpace
#align stone_cech.compact_space StoneCech.compactSpace

end StoneCech
