/-
Copyright (c) 2023 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import Mathlib.Topology.Bases
import Mathlib.Topology.Inseparable
import Mathlib.Topology.Compactness.LocallyCompact
import Mathlib.Topology.Clopen

/-!
# Alexandrov-discrete topological spaces

This file defines Alexandrov-discrete spaces, aka finitely generated spaces.

A space is Alexandrov-discrete if the (arbitrary) intersection of open sets is open. As such,
the intersection of all neighborhoods of a set is a neighborhood itself. Hence every set has a
minimal neighborhood, which we call the *exterior* of the set.

## Main declarations

* `AlexandrovDiscrete`: Prop-valued typeclass for a topological space to be Alexandrov-discrete
* `exterior`: Intersection of all neighborhoods of a set. When the space is Alexandrov-discrete,
  this is the minimal neighborhood of the set.

## Notes

The "minimal neighborhood of a set" construction is not named in the literature. We chose the name
"exterior" with analogy to the interior. `interior` and `exterior` have the same properties up to


## TODO

Finite product of Alexandrov-discrete spaces is Alexandrov-discrete.

## Tags

Alexandroff, discrete, finitely generated, fg space
-/

open Filter Set TopologicalSpace
open scoped Topology

/-- A topological space is **Alexandrov-discrete** or **finitely generated** if the intersection of
a family of open sets is open. -/
class AlexandrovDiscrete (Œ± : Type*) [TopologicalSpace Œ±] : Prop where
  /-- The intersection of a family of open sets is an open set. Use `isOpen_sInter` in the root
  namespace instead. -/
  protected isOpen_sInter : ‚àÄ S : Set (Set Œ±), (‚àÄ s ‚àà S, IsOpen s) ‚Üí IsOpen (‚ãÇ‚ÇÄ S)

variable {Œπ : Sort*} {Œ∫ : Œπ ‚Üí Sort*} {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

instance DiscreteTopology.toAlexandrovDiscrete [DiscreteTopology Œ±] : AlexandrovDiscrete Œ± where
  isOpen_sInter _ _ := isOpen_discrete _

instance Finite.toAlexandrovDiscrete [Finite Œ±] : AlexandrovDiscrete Œ± where
  isOpen_sInter S := (toFinite S).isOpen_sInter

section AlexandrovDiscrete
variable [AlexandrovDiscrete Œ±] {S : Set (Set Œ±)} {f : Œπ ‚Üí Set Œ±}

lemma isOpen_sInter : (‚àÄ s ‚àà S, IsOpen s) ‚Üí IsOpen (‚ãÇ‚ÇÄ S) := AlexandrovDiscrete.isOpen_sInter _

lemma isOpen_iInter (hf : ‚àÄ i, IsOpen (f i)) : IsOpen (‚ãÇ i, f i) :=
isOpen_sInter $ forall_range_iff.2 hf

lemma isOpen_iInter‚ÇÇ {f : ‚àÄ i, Œ∫ i ‚Üí Set Œ±} (hf : ‚àÄ i j, IsOpen (f i j)) :
    IsOpen (‚ãÇ i, ‚ãÇ j, f i j) :=
isOpen_iInter Œª _ ‚Ü¶ isOpen_iInter $ hf _

lemma isClosed_sUnion (hS : ‚àÄ s ‚àà S, IsClosed s) : IsClosed (‚ãÉ‚ÇÄ S) := by
  simp only [‚ÜêisOpen_compl_iff, compl_sUnion] at hS ‚ä¢; exact isOpen_sInter $ ball_image_iff.2 hS

lemma isClosed_iUnion (hf : ‚àÄ i, IsClosed (f i)) : IsClosed (‚ãÉ i, f i) :=
isClosed_sUnion $ forall_range_iff.2 hf

lemma isClosed_iUnion‚ÇÇ {f : ‚àÄ i, Œ∫ i ‚Üí Set Œ±} (hf : ‚àÄ i j, IsClosed (f i j)) :
    IsClosed (‚ãÉ i, ‚ãÉ j, f i j) :=
isClosed_iUnion Œª _ ‚Ü¶ isClosed_iUnion $ hf _

lemma isClopen_sInter (hS : ‚àÄ s ‚àà S, IsClopen s) : IsClopen (‚ãÇ‚ÇÄ S) :=
‚ü®isOpen_sInter Œª s hs ‚Ü¶ (hS s hs).1, isClosed_sInter Œª s hs ‚Ü¶ (hS s hs).2‚ü©

lemma isClopen_iInter (hf : ‚àÄ i, IsClopen (f i)) : IsClopen (‚ãÇ i, f i) :=
‚ü®isOpen_iInter Œª i ‚Ü¶ (hf i).1, isClosed_iInter Œª i ‚Ü¶ (hf i).2‚ü©

lemma isClopen_iInter‚ÇÇ {f : ‚àÄ i, Œ∫ i ‚Üí Set Œ±} (hf : ‚àÄ i j, IsClopen (f i j)) :
    IsClopen (‚ãÇ i, ‚ãÇ j, f i j) :=
isClopen_iInter Œª _ ‚Ü¶ isClopen_iInter $ hf _

lemma isClopen_sUnion (hS : ‚àÄ s ‚àà S, IsClopen s) : IsClopen (‚ãÉ‚ÇÄ S) :=
‚ü®isOpen_sUnion Œª s hs ‚Ü¶ (hS s hs).1, isClosed_sUnion Œª s hs ‚Ü¶ (hS s hs).2‚ü©

lemma isClopen_iUnion (hf : ‚àÄ i, IsClopen (f i)) : IsClopen (‚ãÉ i, f i) :=
‚ü®isOpen_iUnion Œª i ‚Ü¶ (hf i).1, isClosed_iUnion Œª i ‚Ü¶ (hf i).2‚ü©

lemma isClopen_iUnion‚ÇÇ {f : ‚àÄ i, Œ∫ i ‚Üí Set Œ±} (hf : ‚àÄ i j, IsClopen (f i j)) :
    IsClopen (‚ãÉ i, ‚ãÉ j, f i j) :=
isClopen_iUnion Œª _ ‚Ü¶ isClopen_iUnion $ hf _

lemma interior_iInter (f : Œπ ‚Üí Set Œ±) : interior (‚ãÇ i, f i) = ‚ãÇ i, interior (f i) :=
(interior_maximal (iInter_mono Œª _ ‚Ü¶ interior_subset) $ isOpen_iInter Œª _ ‚Ü¶
  isOpen_interior).antisymm' $ subset_iInter Œª _ ‚Ü¶ interior_mono $ iInter_subset _ _

lemma interior_sInter (S : Set (Set Œ±)) : interior (‚ãÇ‚ÇÄ S) = ‚ãÇ s ‚àà S, interior s := by
  simp_rw [sInter_eq_biInter, interior_iInter]

lemma closure_iUnion (f : Œπ ‚Üí Set Œ±) : closure (‚ãÉ i, f i) = ‚ãÉ i, closure (f i) :=
  compl_injective $ by simpa only [‚Üêinterior_compl, compl_iUnion] using interior_iInter Œª i ‚Ü¶ (f i)·∂ú

lemma closure_sUnion (S : Set (Set Œ±)) : closure (‚ãÉ‚ÇÄ S) = ‚ãÉ s ‚àà S, closure s := by
  simp_rw [sUnion_eq_biUnion, closure_iUnion]

end AlexandrovDiscrete

variable {s t : Set Œ±} {a x y : Œ±}

/-- The *exterior* of a set is the intersection of all its neighborhoods. In an Alexandrov-discrete
space, this is the smallest neighborhood of the set.

Note that this construction is unnamed in the literature. We choose the name in analogy to
`interior`. -/
def exterior (s : Set Œ±) : Set Œ± := (ùìùÀ¢ s).ker

lemma exterior_singleton_eq_ker_nhds (a : Œ±) : exterior {a} = (ùìù a).ker := by simp [exterior]

lemma exterior_def (s : Set Œ±) : exterior s = ‚ãÇ‚ÇÄ {t : Set Œ± | IsOpen t ‚àß s ‚äÜ t} :=
  (hasBasis_nhdsSet _).ker.trans sInter_eq_biInter.symm

lemma mem_exterior : a ‚àà exterior s ‚Üî ‚àÄ U, IsOpen U ‚Üí s ‚äÜ U ‚Üí a ‚àà U := by simp [exterior_def]

lemma subset_exterior_iff : s ‚äÜ exterior t ‚Üî ‚àÄ U, IsOpen U ‚Üí t ‚äÜ U ‚Üí s ‚äÜ U := by
  simp [exterior_def]

lemma subset_exterior : s ‚äÜ exterior s := subset_exterior_iff.2 $ Œª _ _ ‚Ü¶ id

lemma exterior_minimal (h‚ÇÅ : s ‚äÜ t) (h‚ÇÇ : IsOpen t) : exterior s ‚äÜ t := by
  rw [exterior_def]; exact sInter_subset_of_mem ‚ü®h‚ÇÇ, h‚ÇÅ‚ü©

lemma IsOpen.exterior_eq (h : IsOpen s) : exterior s = s :=
(exterior_minimal Subset.rfl h).antisymm subset_exterior

lemma IsOpen.exterior_subset_iff (ht : IsOpen t) : exterior s ‚äÜ t ‚Üî s ‚äÜ t :=
‚ü®subset_exterior.trans, Œª h ‚Ü¶ exterior_minimal h ht‚ü©

@[mono] lemma exterior_mono : Monotone (exterior : Set Œ± ‚Üí Set Œ±) :=
Œª _s _t h ‚Ü¶ ker_mono $ nhdsSet_mono h

@[simp] lemma exterior_empty : exterior (‚àÖ : Set Œ±) = ‚àÖ := isOpen_empty.exterior_eq
@[simp] lemma exterior_univ : exterior (univ : Set Œ±) = univ := isOpen_univ.exterior_eq

@[simp] lemma exterior_eq_empty : exterior s = ‚àÖ ‚Üî s = ‚àÖ :=
‚ü®eq_bot_mono subset_exterior, by rintro rfl; exact exterior_empty‚ü©

variable [AlexandrovDiscrete Œ±] [AlexandrovDiscrete Œ≤]

@[simp] lemma isOpen_exterior : IsOpen (exterior s) := by
  rw [exterior_def]; exact isOpen_sInter $ Œª _ ‚Ü¶ And.left

lemma exterior_mem_nhdsSet : exterior s ‚àà ùìùÀ¢ s := isOpen_exterior.mem_nhdsSet.2 subset_exterior

@[simp] lemma exterior_eq_iff_isOpen : exterior s = s ‚Üî IsOpen s :=
  ‚ü®Œª h ‚Ü¶ h ‚ñ∏ isOpen_exterior, IsOpen.exterior_eq‚ü©

@[simp] lemma exterior_subset_iff_isOpen : exterior s ‚äÜ s ‚Üî IsOpen s := by
  simp only [exterior_eq_iff_isOpen.symm, Subset.antisymm_iff, subset_exterior, and_true]

lemma exterior_subset_iff : exterior s ‚äÜ t ‚Üî ‚àÉ U, IsOpen U ‚àß s ‚äÜ U ‚àß U ‚äÜ t :=
  ‚ü®Œª h ‚Ü¶ ‚ü®exterior s, isOpen_exterior, subset_exterior, h‚ü©,
    Œª ‚ü®_U, hU, hsU, hUt‚ü© ‚Ü¶ (exterior_minimal hsU hU).trans hUt‚ü©

lemma exterior_subset_iff_mem_nhdsSet : exterior s ‚äÜ t ‚Üî t ‚àà ùìùÀ¢ s :=
exterior_subset_iff.trans mem_nhdsSet_iff_exists.symm

lemma exterior_singleton_subset_iff_mem_nhds : exterior {a} ‚äÜ t ‚Üî t ‚àà ùìù a := by
  simp [exterior_subset_iff_mem_nhdsSet]

lemma IsOpen.exterior_subset (ht : IsOpen t) : exterior s ‚äÜ t ‚Üî s ‚äÜ t :=
  ‚ü®subset_exterior.trans, Œª h ‚Ü¶ exterior_minimal h ht‚ü©

lemma gc_exterior_interior : GaloisConnection (exterior : Set Œ± ‚Üí Set Œ±) interior :=
  Œª s t ‚Ü¶ by simp [exterior_subset_iff, subset_interior_iff]

@[simp] lemma exterior_exterior (s : Set Œ±) : exterior (exterior s) = exterior s :=
  isOpen_exterior.exterior_eq

@[simp] lemma exterior_union (s t : Set Œ±) : exterior (s ‚à™ t) = exterior s ‚à™ exterior t :=
  gc_exterior_interior.l_sup

@[simp] lemma nhdsSet_exterior (s : Set Œ±) : ùìùÀ¢ (exterior s) = ùìùÀ¢ s := by
  ext t; simp_rw [‚Üêexterior_subset_iff_mem_nhdsSet, exterior_exterior]

@[simp] lemma principal_exterior (s : Set Œ±) : ùìü (exterior s) = ùìùÀ¢ s := by
  rw [‚ÜênhdsSet_exterior, isOpen_exterior.nhdsSet_eq]

@[simp] lemma exterior_subset_exterior : exterior s ‚äÜ exterior t ‚Üî ùìùÀ¢ s ‚â§ ùìùÀ¢ t := by
  refine ‚ü®?_, Œª h ‚Ü¶ ker_mono h‚ü©
  simp_rw [le_def, ‚Üêexterior_subset_iff_mem_nhdsSet]
  exact Œª h u ‚Ü¶ h.trans

lemma specializes_iff_exterior_subset : x ‚§≥ y ‚Üî exterior {x} ‚äÜ exterior {y} := by
  simp [Specializes]

lemma isOpen_iff_forall_specializes : IsOpen s ‚Üî ‚àÄ x y, x ‚§≥ y ‚Üí y ‚àà s ‚Üí x ‚àà s := by
  refine' ‚ü®Œª hs x y hxy ‚Ü¶ hxy.mem_open hs, Œª hs ‚Ü¶ _‚ü©
  simp_rw [specializes_iff_exterior_subset] at hs
  simp_rw [isOpen_iff_mem_nhds, mem_nhds_iff]
  rintro a ha
  refine ‚ü®_, Œª b hb ‚Ü¶ hs _ _ ?_ ha, isOpen_exterior, subset_exterior $ mem_singleton _‚ü©
  rwa [isOpen_exterior.exterior_subset, singleton_subset_iff]

lemma Set.Finite.isCompact_exterior (hs : s.Finite) : IsCompact (exterior s) := by
  classical
  refine isCompact_of_finite_subcover Œª f hf hsf ‚Ü¶ ?_
  choose g hg using Œª a (ha : a ‚àà exterior s) ‚Ü¶ mem_iUnion.1 (hsf ha)
  refine ‚ü®hs.toFinset.attach.image Œª a ‚Ü¶ g a.1 $ subset_exterior $ (Finite.mem_toFinset _).1 a.2,
    (isOpen_iUnion Œª i ‚Ü¶ isOpen_iUnion ?_).exterior_subset.2 ?_‚ü©
  exact Œª _ ‚Ü¶ hf _
  refine Œª a ha ‚Ü¶ mem_iUnion‚ÇÇ.2 ‚ü®_, ?_, hg _ $ subset_exterior ha‚ü©
  simp only [Finset.mem_image, Finset.mem_attach, true_and, Subtype.exists, Finite.mem_toFinset]
  exact ‚ü®a, ha, rfl‚ü©

lemma Inducing.alexandrovDiscrete {f : Œ≤ ‚Üí Œ±} (h : Inducing f) : AlexandrovDiscrete Œ≤ where
  isOpen_sInter S hS := by
    simp_rw [h.isOpen_iff] at hS ‚ä¢
    choose U hU htU using hS
    refine ‚ü®_, isOpen_iInter‚ÇÇ hU, ?_‚ü©
    simp_rw [preimage_iInter, htU, sInter_eq_biInter]

lemma alexandrovDiscrete_coinduced {Œ≤ : Type*} {f : Œ± ‚Üí Œ≤} :
    @AlexandrovDiscrete Œ≤ (coinduced f ‚Äπ_‚Ä∫) :=
@AlexandrovDiscrete.mk Œ≤ (coinduced f ‚Äπ_‚Ä∫) Œª S hS ‚Ü¶ by
  rw [isOpen_coinduced, preimage_sInter]; exact isOpen_iInter‚ÇÇ hS

lemma AlexandrovDiscrete.sup {t‚ÇÅ t‚ÇÇ : TopologicalSpace Œ±} (_ : @AlexandrovDiscrete Œ± t‚ÇÅ)
    (_ : @AlexandrovDiscrete Œ± t‚ÇÇ) :
  @AlexandrovDiscrete Œ± (t‚ÇÅ ‚äî t‚ÇÇ) :=
@AlexandrovDiscrete.mk Œ± (t‚ÇÅ ‚äî t‚ÇÇ) Œª _S hS ‚Ü¶
  ‚ü®@isOpen_sInter _ t‚ÇÅ _ _ Œª _s hs ‚Ü¶ (hS _ hs).1, isOpen_sInter Œª _s hs ‚Ü¶ (hS _ hs).2‚ü©

lemma alexandrovDiscrete_iSup {t : Œπ ‚Üí TopologicalSpace Œ±} (_ : ‚àÄ i, @AlexandrovDiscrete Œ± (t i)) :
    @AlexandrovDiscrete Œ± (‚®Ü i, t i) :=
@AlexandrovDiscrete.mk Œ± (‚®Ü i, t i) Œª _S hS ‚Ü¶ isOpen_iSup_iff.2 Œª i ‚Ü¶ @isOpen_sInter _ (t i) _ _
  Œª _s hs ‚Ü¶ isOpen_iSup_iff.1 (hS _ hs) _

instance AlexandrovDiscrete.toFirstCountable : FirstCountableTopology Œ± where
  nhds_generated_countable a := ‚ü®{exterior {a}}, countable_singleton _, by simp‚ü©

instance AlexandrovDiscrete.toLocallyCompactSpace : LocallyCompactSpace Œ± where
  local_compact_nhds a _U hU := ‚ü®exterior {a},
    isOpen_exterior.mem_nhds $ subset_exterior $ mem_singleton _,
      exterior_singleton_subset_iff_mem_nhds.2 hU, (finite_singleton _).isCompact_exterior‚ü©

instance Subtype.instAlexandrovDiscrete {p : Œ± ‚Üí Prop} : AlexandrovDiscrete {a // p a} :=
inducing_subtype_val.alexandrovDiscrete

instance Quotient.instAlexandrovDiscrete {s : Setoid Œ±} : AlexandrovDiscrete (Quotient s) :=
alexandrovDiscrete_coinduced

instance Sum.instAlexandrovDiscrete : AlexandrovDiscrete (Œ± ‚äï Œ≤) :=
alexandrovDiscrete_coinduced.sup alexandrovDiscrete_coinduced

instance Sigma.instAlexandrovDiscrete {Œπ : Type*} {œÄ : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (œÄ i)]
  [‚àÄ i, AlexandrovDiscrete (œÄ i)] : AlexandrovDiscrete (Œ£ i, œÄ i) :=
alexandrovDiscrete_iSup Œª _ ‚Ü¶ alexandrovDiscrete_coinduced
