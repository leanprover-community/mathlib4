/-
Copyright (c) 2023 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import Mathlib.Data.Set.Image
import Mathlib.Topology.Bases
import Mathlib.Topology.Inseparable
import Mathlib.Topology.Compactness.NhdsKer

/-!
# Alexandrov-discrete topological spaces

This file defines Alexandrov-discrete spaces, aka finitely generated spaces.

A space is Alexandrov-discrete if the (arbitrary) intersection of open sets is open. As such,
the intersection of all neighborhoods of a set is a neighborhood itself. Hence every set has a
minimal neighborhood, which we call the *neighborhoods kernel* of the set.

## Main declarations

* `AlexandrovDiscrete`: Prop-valued typeclass for a topological space to be Alexandrov-discrete

## TODO

Finite product of Alexandrov-discrete spaces is Alexandrov-discrete.

## Tags

Alexandroff, discrete, finitely generated, fg space
-/

open Filter Set TopologicalSpace Topology

/-- A topological space is **Alexandrov-discrete** or **finitely generated** if the intersection of
a family of open sets is open. -/
class AlexandrovDiscrete (Œ± : Type*) [TopologicalSpace Œ±] : Prop where
  /-- The intersection of a family of open sets is an open set. Use `isOpen_sInter` in the root
  namespace instead. -/
  protected isOpen_sInter : ‚àÄ S : Set (Set Œ±), (‚àÄ s ‚àà S, IsOpen s) ‚Üí IsOpen (‚ãÇ‚ÇÄ S)

variable {Œπ : Sort*} {Œ∫ : Œπ ‚Üí Sort*} {Œ± Œ≤ : Type*}
section
variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

instance DiscreteTopology.toAlexandrovDiscrete [DiscreteTopology Œ±] : AlexandrovDiscrete Œ± where
  isOpen_sInter _ _ := isOpen_discrete _

instance Finite.toAlexandrovDiscrete [Finite Œ±] : AlexandrovDiscrete Œ± where
  isOpen_sInter S := (toFinite S).isOpen_sInter

section AlexandrovDiscrete
variable [AlexandrovDiscrete Œ±] {S : Set (Set Œ±)} {f : Œπ ‚Üí Set Œ±}

lemma isOpen_sInter : (‚àÄ s ‚àà S, IsOpen s) ‚Üí IsOpen (‚ãÇ‚ÇÄ S) := AlexandrovDiscrete.isOpen_sInter _

lemma isOpen_iInter (hf : ‚àÄ i, IsOpen (f i)) : IsOpen (‚ãÇ i, f i) :=
  isOpen_sInter <| forall_mem_range.2 hf

lemma isOpen_iInter‚ÇÇ {f : ‚àÄ i, Œ∫ i ‚Üí Set Œ±} (hf : ‚àÄ i j, IsOpen (f i j)) :
    IsOpen (‚ãÇ i, ‚ãÇ j, f i j) :=
  isOpen_iInter fun _ ‚Ü¶ isOpen_iInter <| hf _

lemma isClosed_sUnion (hS : ‚àÄ s ‚àà S, IsClosed s) : IsClosed (‚ãÉ‚ÇÄ S) := by
  simp only [‚Üê isOpen_compl_iff, compl_sUnion] at hS ‚ä¢; exact isOpen_sInter <| forall_mem_image.2 hS

lemma isClosed_iUnion (hf : ‚àÄ i, IsClosed (f i)) : IsClosed (‚ãÉ i, f i) :=
  isClosed_sUnion <| forall_mem_range.2 hf

lemma isClosed_iUnion‚ÇÇ {f : ‚àÄ i, Œ∫ i ‚Üí Set Œ±} (hf : ‚àÄ i j, IsClosed (f i j)) :
    IsClosed (‚ãÉ i, ‚ãÉ j, f i j) :=
  isClosed_iUnion fun _ ‚Ü¶ isClosed_iUnion <| hf _

lemma isClopen_sInter (hS : ‚àÄ s ‚àà S, IsClopen s) : IsClopen (‚ãÇ‚ÇÄ S) :=
  ‚ü®isClosed_sInter fun s hs ‚Ü¶ (hS s hs).1, isOpen_sInter fun s hs ‚Ü¶ (hS s hs).2‚ü©

lemma isClopen_iInter (hf : ‚àÄ i, IsClopen (f i)) : IsClopen (‚ãÇ i, f i) :=
  ‚ü®isClosed_iInter fun i ‚Ü¶ (hf i).1, isOpen_iInter fun i ‚Ü¶ (hf i).2‚ü©

lemma isClopen_iInter‚ÇÇ {f : ‚àÄ i, Œ∫ i ‚Üí Set Œ±} (hf : ‚àÄ i j, IsClopen (f i j)) :
    IsClopen (‚ãÇ i, ‚ãÇ j, f i j) :=
  isClopen_iInter fun _ ‚Ü¶ isClopen_iInter <| hf _

lemma isClopen_sUnion (hS : ‚àÄ s ‚àà S, IsClopen s) : IsClopen (‚ãÉ‚ÇÄ S) :=
  ‚ü®isClosed_sUnion fun s hs ‚Ü¶ (hS s hs).1, isOpen_sUnion fun s hs ‚Ü¶ (hS s hs).2‚ü©

lemma isClopen_iUnion (hf : ‚àÄ i, IsClopen (f i)) : IsClopen (‚ãÉ i, f i) :=
  ‚ü®isClosed_iUnion fun i ‚Ü¶ (hf i).1, isOpen_iUnion fun i ‚Ü¶ (hf i).2‚ü©

lemma isClopen_iUnion‚ÇÇ {f : ‚àÄ i, Œ∫ i ‚Üí Set Œ±} (hf : ‚àÄ i j, IsClopen (f i j)) :
    IsClopen (‚ãÉ i, ‚ãÉ j, f i j) :=
  isClopen_iUnion fun _ ‚Ü¶ isClopen_iUnion <| hf _

lemma interior_iInter (f : Œπ ‚Üí Set Œ±) : interior (‚ãÇ i, f i) = ‚ãÇ i, interior (f i) :=
  (interior_maximal (iInter_mono fun _ ‚Ü¶ interior_subset) <| isOpen_iInter fun _ ‚Ü¶
    isOpen_interior).antisymm' <| subset_iInter fun _ ‚Ü¶ interior_mono <| iInter_subset _ _

lemma interior_sInter (S : Set (Set Œ±)) : interior (‚ãÇ‚ÇÄ S) = ‚ãÇ s ‚àà S, interior s := by
  simp_rw [sInter_eq_biInter, interior_iInter]

lemma closure_iUnion (f : Œπ ‚Üí Set Œ±) : closure (‚ãÉ i, f i) = ‚ãÉ i, closure (f i) :=
  compl_injective <| by
    simpa only [‚Üê interior_compl, compl_iUnion] using interior_iInter fun i ‚Ü¶ (f i)·∂ú

lemma closure_sUnion (S : Set (Set Œ±)) : closure (‚ãÉ‚ÇÄ S) = ‚ãÉ s ‚àà S, closure s := by
  simp_rw [sUnion_eq_biUnion, closure_iUnion]

end AlexandrovDiscrete

lemma Topology.IsInducing.alexandrovDiscrete [AlexandrovDiscrete Œ±] {f : Œ≤ ‚Üí Œ±} (h : IsInducing f) :
    AlexandrovDiscrete Œ≤ where
  isOpen_sInter S hS := by
    simp_rw [h.isOpen_iff] at hS ‚ä¢
    choose U hU htU using hS
    refine ‚ü®_, isOpen_iInter‚ÇÇ hU, ?_‚ü©
    simp_rw [preimage_iInter, htU, sInter_eq_biInter]

@[deprecated (since := "2024-10-28")]
alias Inducing.alexandrovDiscrete := IsInducing.alexandrovDiscrete

end

lemma AlexandrovDiscrete.sup {t‚ÇÅ t‚ÇÇ : TopologicalSpace Œ±} (_ : @AlexandrovDiscrete Œ± t‚ÇÅ)
    (_ : @AlexandrovDiscrete Œ± t‚ÇÇ) :
    @AlexandrovDiscrete Œ± (t‚ÇÅ ‚äî t‚ÇÇ) :=
  @AlexandrovDiscrete.mk Œ± (t‚ÇÅ ‚äî t‚ÇÇ) fun _S hS ‚Ü¶
    ‚ü®@isOpen_sInter _ t‚ÇÅ _ _ fun _s hs ‚Ü¶ (hS _ hs).1, isOpen_sInter fun _s hs ‚Ü¶ (hS _ hs).2‚ü©

lemma alexandrovDiscrete_iSup {t : Œπ ‚Üí TopologicalSpace Œ±} (_ : ‚àÄ i, @AlexandrovDiscrete Œ± (t i)) :
    @AlexandrovDiscrete Œ± (‚®Ü i, t i) :=
  @AlexandrovDiscrete.mk Œ± (‚®Ü i, t i)
    fun _S hS ‚Ü¶ isOpen_iSup_iff.2
      fun i ‚Ü¶ @isOpen_sInter _ (t i) _ _
        fun _s hs ‚Ü¶ isOpen_iSup_iff.1 (hS _ hs) _

section
variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [AlexandrovDiscrete Œ±] [AlexandrovDiscrete Œ≤]
  {s t : Set Œ±} {a : Œ±}

@[simp] lemma isOpen_nhdsKer : IsOpen (nhdsKer s) := by
  rw [nhdsKer_def]; exact isOpen_sInter fun _ ‚Ü¶ And.left

@[deprecated (since := "2025-07-09")] alias isOpen_exterior := isOpen_nhdsKer

lemma nhdsKer_mem_nhdsSet : nhdsKer s ‚àà ùìùÀ¢ s := isOpen_nhdsKer.mem_nhdsSet.2 subset_nhdsKer

@[deprecated (since := "2025-07-09")] alias exterior_mem_nhdsSet := nhdsKer_mem_nhdsSet

@[simp] lemma nhdsKer_eq_iff_isOpen : nhdsKer s = s ‚Üî IsOpen s :=
  ‚ü®fun h ‚Ü¶ h ‚ñ∏ isOpen_nhdsKer, IsOpen.nhdsKer_eq‚ü©

@[deprecated (since := "2025-07-09")] alias exterior_eq_iff_isOpen := nhdsKer_eq_iff_isOpen

@[simp] lemma nhdsKer_subset_iff_isOpen : nhdsKer s ‚äÜ s ‚Üî IsOpen s := by
  simp only [nhdsKer_eq_iff_isOpen.symm, Subset.antisymm_iff, subset_nhdsKer, and_true]

@[deprecated (since := "2025-07-09")] alias exterior_subset_iff_isOpen := nhdsKer_subset_iff_isOpen

lemma nhdsKer_subset_iff : nhdsKer s ‚äÜ t ‚Üî ‚àÉ U, IsOpen U ‚àß s ‚äÜ U ‚àß U ‚äÜ t :=
  ‚ü®fun h ‚Ü¶ ‚ü®nhdsKer s, isOpen_nhdsKer, subset_nhdsKer, h‚ü©,
    fun ‚ü®_U, hU, hsU, hUt‚ü© ‚Ü¶ (nhdsKer_minimal hsU hU).trans hUt‚ü©

@[deprecated (since := "2025-07-09")] alias exterior_subset_iff := nhdsKer_subset_iff

lemma nhdsKer_subset_iff_mem_nhdsSet : nhdsKer s ‚äÜ t ‚Üî t ‚àà ùìùÀ¢ s :=
  nhdsKer_subset_iff.trans mem_nhdsSet_iff_exists.symm

@[deprecated (since := "2025-07-09")]
alias exterior_subset_iff_mem_nhdsSet := nhdsKer_subset_iff_mem_nhdsSet

lemma nhdsKer_singleton_subset_iff_mem_nhds : nhdsKer {a} ‚äÜ t ‚Üî t ‚àà ùìù a := by
  simp [nhdsKer_subset_iff_mem_nhdsSet]

@[deprecated (since := "2025-07-09")]
alias exterior_singleton_subset_iff_mem_nhds := nhdsKer_singleton_subset_iff_mem_nhds

lemma gc_nhdsKer_interior : GaloisConnection (nhdsKer : Set Œ± ‚Üí Set Œ±) interior :=
  fun s t ‚Ü¶ by simp [nhdsKer_subset_iff, subset_interior_iff]

@[deprecated (since := "2025-07-09")] alias gc_exterior_interior := gc_nhdsKer_interior

@[simp] lemma principal_nhdsKer (s : Set Œ±) : ùìü (nhdsKer s) = ùìùÀ¢ s := by
  rw [‚Üê nhdsSet_nhdsKer, isOpen_nhdsKer.nhdsSet_eq]

@[deprecated (since := "2025-07-09")] alias principal_exterior := principal_nhdsKer

lemma principal_nhdsKer_singleton (a : Œ±) : ùìü (nhdsKer {a}) = ùìù a := by
  rw [principal_nhdsKer, nhdsSet_singleton]

lemma nhdsSet_basis_nhdsKer (s : Set Œ±) :
    (ùìùÀ¢ s).HasBasis (fun _ : Unit => True) (fun _ => nhdsKer s) :=
  principal_nhdsKer s ‚ñ∏ hasBasis_principal (nhdsKer s)

lemma nhds_basis_nhdsKer_singleton (a : Œ±) :
    (ùìù a).HasBasis (fun _ : Unit => True) (fun _ => nhdsKer {a}) :=
  principal_nhdsKer_singleton a ‚ñ∏ hasBasis_principal (nhdsKer {a})

lemma isOpen_iff_forall_specializes : IsOpen s ‚Üî ‚àÄ x y, x ‚§≥ y ‚Üí y ‚àà s ‚Üí x ‚àà s := by
  simp only [‚Üê nhdsKer_subset_iff_isOpen, Set.subset_def, mem_nhdsKer_iff_specializes, exists_imp,
    and_imp, @forall_swap (_ ‚§≥ _)]

lemma alexandrovDiscrete_coinduced {Œ≤ : Type*} {f : Œ± ‚Üí Œ≤} :
    @AlexandrovDiscrete Œ≤ (coinduced f ‚Äπ_‚Ä∫) :=
  @AlexandrovDiscrete.mk Œ≤ (coinduced f ‚Äπ_‚Ä∫) fun S hS ‚Ü¶ by
    rw [isOpen_coinduced, preimage_sInter]; exact isOpen_iInter‚ÇÇ hS

instance AlexandrovDiscrete.toFirstCountable : FirstCountableTopology Œ± where
  nhds_generated_countable a := ‚ü®{nhdsKer {a}}, countable_singleton _, by simp‚ü©

instance AlexandrovDiscrete.toLocallyCompactSpace : LocallyCompactSpace Œ± where
  local_compact_nhds a _U hU := ‚ü®nhdsKer {a},
    isOpen_nhdsKer.mem_nhds <| subset_nhdsKer <| mem_singleton _,
      nhdsKer_singleton_subset_iff_mem_nhds.2 hU, isCompact_singleton.nhdsKer‚ü©

instance Subtype.instAlexandrovDiscrete {p : Œ± ‚Üí Prop} : AlexandrovDiscrete {a // p a} :=
  IsInducing.subtypeVal.alexandrovDiscrete

instance Quotient.instAlexandrovDiscrete {s : Setoid Œ±} : AlexandrovDiscrete (Quotient s) :=
  alexandrovDiscrete_coinduced

instance Sum.instAlexandrovDiscrete : AlexandrovDiscrete (Œ± ‚äï Œ≤) :=
  alexandrovDiscrete_coinduced.sup alexandrovDiscrete_coinduced

instance Sigma.instAlexandrovDiscrete {Œπ : Type*} {X : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (X i)]
    [‚àÄ i, AlexandrovDiscrete (X i)] : AlexandrovDiscrete (Œ£ i, X i) :=
  alexandrovDiscrete_iSup fun _ ‚Ü¶ alexandrovDiscrete_coinduced

end
