/-
Copyright (c) 2022 Felix Weilacher. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Felix Weilacher
-/
import Mathlib.Topology.MetricSpace.Polish
import Mathlib.Topology.MetricSpace.CantorScheme

#align_import topology.perfect from "leanprover-community/mathlib"@"3905fa80e62c0898131285baab35559fbc4e5cda"

/-!
# Perfect Sets

In this file we define perfect subsets of a topological space, and prove some basic properties,
including a version of the Cantor-Bendixson Theorem.

## Main Definitions

* `Perfect C`: A set `C` is perfect, meaning it is closed and every point of it
  is an accumulation point of itself.

## Main Statements

* `Perfect.splitting`: A perfect nonempty set contains two disjoint perfect nonempty subsets.
  The main inductive step in the construction of an embedding from the Cantor space to a
  perfect nonempty complete metric space.
* `exists_countable_union_perfect_of_isClosed`: One version of the **Cantor-Bendixson Theorem**:
  A closed set in a second countable space can be written as the union of a countable set and a
  perfect set.
* `Perfect.exists_nat_bool_injection`: A perfect nonempty set in a complete metric space
  admits an embedding from the Cantor space.

## Implementation Notes

We do not require perfect sets to be nonempty.

We define a nonstandard predicate, `Preperfect`, which drops the closed-ness requirement
from the definition of perfect. In T1 spaces, this is equivalent to having a perfect closure,
see `preperfect_iff_perfect_closure`.

## References

* [kechris1995] (Chapters 6-7)

## Tags

accumulation point, perfect set, cantor-bendixson.

-/


open Topology Filter

open TopologicalSpace Filter Set

section Basic

variable {Œ± : Type*} [TopologicalSpace Œ±] {C : Set Œ±}

/-- If `x` is an accumulation point of a set `C` and `U` is a neighborhood of `x`,
then `x` is an accumulation point of `U ‚à© C`. -/
theorem AccPt.nhds_inter {x : Œ±} {U : Set Œ±} (h_acc : AccPt x (ùìü C)) (hU : U ‚àà ùìù x) :
    AccPt x (ùìü (U ‚à© C)) := by
  have : ùìù[‚â†] x ‚â§ ùìü U := by
    rw [le_principal_iff]
    exact mem_nhdsWithin_of_mem_nhds hU
  rw [AccPt, ‚Üê inf_principal, ‚Üê inf_assoc, inf_of_le_left this]
  exact h_acc
#align acc_pt.nhds_inter AccPt.nhds_inter

/-- A set `C` is preperfect if all of its points are accumulation points of itself.
If `C` is nonempty and `Œ±` is a T1 space, this is equivalent to the closure of `C` being perfect.
See `preperfect_iff_perfect_closure`.-/
def Preperfect (C : Set Œ±) : Prop :=
  ‚àÄ x ‚àà C, AccPt x (ùìü C)
#align preperfect Preperfect

/-- A set `C` is called perfect if it is closed and all of its
points are accumulation points of itself.
Note that we do not require `C` to be nonempty.-/
structure Perfect (C : Set Œ±) : Prop where
  closed : IsClosed C
  acc : Preperfect C
#align perfect Perfect

theorem preperfect_iff_nhds : Preperfect C ‚Üî ‚àÄ x ‚àà C, ‚àÄ U ‚àà ùìù x, ‚àÉ y ‚àà U ‚à© C, y ‚â† x := by
  simp only [Preperfect, accPt_iff_nhds]
#align preperfect_iff_nhds preperfect_iff_nhds

/-- The intersection of a preperfect set and an open set is preperfect. -/
theorem Preperfect.open_inter {U : Set Œ±} (hC : Preperfect C) (hU : IsOpen U) :
    Preperfect (U ‚à© C) := by
  rintro x ‚ü®xU, xC‚ü©
  apply (hC _ xC).nhds_inter
  exact hU.mem_nhds xU
#align preperfect.open_inter Preperfect.open_inter

/-- The closure of a preperfect set is perfect.
For a converse, see `preperfect_iff_perfect_closure`. -/
theorem Preperfect.perfect_closure (hC : Preperfect C) : Perfect (closure C) := by
  constructor; ¬∑ exact isClosed_closure
  intro x hx
  by_cases h : x ‚àà C <;> apply AccPt.mono _ (principal_mono.mpr subset_closure)
  ¬∑ exact hC _ h
  have : {x}·∂ú ‚à© C = C := by simp [h]
  rw [AccPt, nhdsWithin, inf_assoc, inf_principal, this]
  rw [closure_eq_cluster_pts] at hx
  exact hx
#align preperfect.perfect_closure Preperfect.perfect_closure

/-- In a T1 space, being preperfect is equivalent to having perfect closure.-/
theorem preperfect_iff_perfect_closure [T1Space Œ±] : Preperfect C ‚Üî Perfect (closure C) := by
  constructor <;> intro h
  ¬∑ exact h.perfect_closure
  intro x xC
  have H : AccPt x (ùìü (closure C)) := h.acc _ (subset_closure xC)
  rw [accPt_iff_frequently] at *
  have : ‚àÄ y, y ‚â† x ‚àß y ‚àà closure C ‚Üí ‚àÉ·∂† z in ùìù y, z ‚â† x ‚àß z ‚àà C := by
    rintro y ‚ü®hyx, yC‚ü©
    simp only [‚Üê mem_compl_singleton_iff, and_comm, ‚Üê frequently_nhdsWithin_iff,
      hyx.nhdsWithin_compl_singleton, ‚Üê mem_closure_iff_frequently]
    exact yC
  rw [‚Üê frequently_frequently_nhds]
  exact H.mono this
#align preperfect_iff_perfect_closure preperfect_iff_perfect_closure

theorem Perfect.closure_nhds_inter {U : Set Œ±} (hC : Perfect C) (x : Œ±) (xC : x ‚àà C) (xU : x ‚àà U)
    (Uop : IsOpen U) : Perfect (closure (U ‚à© C)) ‚àß (closure (U ‚à© C)).Nonempty := by
  constructor
  ¬∑ apply Preperfect.perfect_closure
    exact hC.acc.open_inter Uop
  apply Nonempty.closure
  exact ‚ü®x, ‚ü®xU, xC‚ü©‚ü©
#align perfect.closure_nhds_inter Perfect.closure_nhds_inter

/-- Given a perfect nonempty set in a T2.5 space, we can find two disjoint perfect subsets.
This is the main inductive step in the proof of the Cantor-Bendixson Theorem. -/
theorem Perfect.splitting [T25Space Œ±] (hC : Perfect C) (hnonempty : C.Nonempty) :
    ‚àÉ C‚ÇÄ C‚ÇÅ : Set Œ±,
    (Perfect C‚ÇÄ ‚àß C‚ÇÄ.Nonempty ‚àß C‚ÇÄ ‚äÜ C) ‚àß (Perfect C‚ÇÅ ‚àß C‚ÇÅ.Nonempty ‚àß C‚ÇÅ ‚äÜ C) ‚àß Disjoint C‚ÇÄ C‚ÇÅ := by
  cases' hnonempty with y yC
  obtain ‚ü®x, xC, hxy‚ü© : ‚àÉ x ‚àà C, x ‚â† y := by
    have := hC.acc _ yC
    rw [accPt_iff_nhds] at this
    rcases this univ univ_mem with ‚ü®x, xC, hxy‚ü©
    exact ‚ü®x, xC.2, hxy‚ü©
  obtain ‚ü®U, xU, Uop, V, yV, Vop, hUV‚ü© := exists_open_nhds_disjoint_closure hxy
  use closure (U ‚à© C), closure (V ‚à© C)
  constructor <;> rw [‚Üê and_assoc]
  ¬∑ refine' ‚ü®hC.closure_nhds_inter x xC xU Uop, _‚ü©
    rw [hC.closed.closure_subset_iff]
    exact inter_subset_right _ _
  constructor
  ¬∑ refine' ‚ü®hC.closure_nhds_inter y yC yV Vop, _‚ü©
    rw [hC.closed.closure_subset_iff]
    exact inter_subset_right _ _
  apply Disjoint.mono _ _ hUV <;> apply closure_mono <;> exact inter_subset_left _ _
#align perfect.splitting Perfect.splitting

section Kernel

/-- The **Cantor-Bendixson Theorem**: Any closed subset of a second countable space
can be written as the union of a countable set and a perfect set.-/
theorem exists_countable_union_perfect_of_isClosed [SecondCountableTopology Œ±]
    (hclosed : IsClosed C) : ‚àÉ V D : Set Œ±, V.Countable ‚àß Perfect D ‚àß C = V ‚à™ D := by
  obtain ‚ü®b, bct, _, bbasis‚ü© := TopologicalSpace.exists_countable_basis Œ±
  let v := { U ‚àà b | (U ‚à© C).Countable }
  let V := ‚ãÉ U ‚àà v, U
  let D := C \ V
  have Vct : (V ‚à© C).Countable := by
    simp only [iUnion_inter, mem_sep_iff]
    apply Countable.biUnion
    ¬∑ exact Countable.mono (inter_subset_left _ _) bct
    ¬∑ exact inter_subset_right _ _
  refine' ‚ü®V ‚à© C, D, Vct, ‚ü®_, _‚ü©, _‚ü©
  ¬∑ refine' hclosed.sdiff (isOpen_biUnion fun _ ‚Ü¶ _)
    exact fun ‚ü®Ub, _‚ü© ‚Ü¶ IsTopologicalBasis.isOpen bbasis Ub
  ¬∑ rw [preperfect_iff_nhds]
    intro x xD E xE
    have : ¬¨(E ‚à© D).Countable := by
      intro h
      obtain ‚ü®U, hUb, xU, hU‚ü© : ‚àÉ U ‚àà b, x ‚àà U ‚àß U ‚äÜ E :=
        (IsTopologicalBasis.mem_nhds_iff bbasis).mp xE
      have hU_cnt : (U ‚à© C).Countable := by
        apply @Countable.mono _ _ (E ‚à© D ‚à™ V ‚à© C)
        ¬∑ rintro y ‚ü®yU, yC‚ü©
          by_cases h : y ‚àà V
          ¬∑ exact mem_union_right _ (mem_inter h yC)
          ¬∑ exact mem_union_left _ (mem_inter (hU yU) ‚ü®yC, h‚ü©)
        exact Countable.union h Vct
      have : U ‚àà v := ‚ü®hUb, hU_cnt‚ü©
      apply xD.2
      exact mem_biUnion this xU
    by_contra! h
    exact absurd (Countable.mono h (Set.countable_singleton _)) this
  ¬∑ rw [inter_comm, inter_union_diff]
#align exists_countable_union_perfect_of_is_closed exists_countable_union_perfect_of_isClosed

/-- Any uncountable closed set in a second countable space contains a nonempty perfect subset.-/
theorem exists_perfect_nonempty_of_isClosed_of_not_countable [SecondCountableTopology Œ±]
    (hclosed : IsClosed C) (hunc : ¬¨C.Countable) : ‚àÉ D : Set Œ±, Perfect D ‚àß D.Nonempty ‚àß D ‚äÜ C := by
  rcases exists_countable_union_perfect_of_isClosed hclosed with ‚ü®V, D, Vct, Dperf, VD‚ü©
  refine' ‚ü®D, ‚ü®Dperf, _‚ü©‚ü©
  constructor
  ¬∑ rw [nonempty_iff_ne_empty]
    by_contra h
    rw [h, union_empty] at VD
    rw [VD] at hunc
    contradiction
  rw [VD]
  exact subset_union_right _ _
#align exists_perfect_nonempty_of_is_closed_of_not_countable exists_perfect_nonempty_of_isClosed_of_not_countable

end Kernel

end Basic

section CantorInjMetric

open Function ENNReal

variable {Œ± : Type*} [MetricSpace Œ±] {C : Set Œ±} (hC : Perfect C) {Œµ : ‚Ñù‚â•0‚àû}

private theorem Perfect.small_diam_aux (Œµ_pos : 0 < Œµ) {x : Œ±} (xC : x ‚àà C) :
    let D := closure (EMetric.ball x (Œµ / 2) ‚à© C)
    Perfect D ‚àß D.Nonempty ‚àß D ‚äÜ C ‚àß EMetric.diam D ‚â§ Œµ := by
  have : x ‚àà EMetric.ball x (Œµ / 2) := by
    apply EMetric.mem_ball_self
    rw [ENNReal.div_pos_iff]
    exact ‚ü®ne_of_gt Œµ_pos, by norm_num‚ü©
  have := hC.closure_nhds_inter x xC this EMetric.isOpen_ball
  refine' ‚ü®this.1, this.2, _, _‚ü©
  ¬∑ rw [IsClosed.closure_subset_iff hC.closed]
    apply inter_subset_right
  rw [EMetric.diam_closure]
  apply le_trans (EMetric.diam_mono (inter_subset_left _ _))
  convert EMetric.diam_ball (x := x)
  rw [mul_comm, ENNReal.div_mul_cancel] <;> norm_num

variable (hnonempty : C.Nonempty)

/-- A refinement of `Perfect.splitting` for metric spaces, where we also control
the diameter of the new perfect sets. -/
theorem Perfect.small_diam_splitting (Œµ_pos : 0 < Œµ) :
    ‚àÉ C‚ÇÄ C‚ÇÅ : Set Œ±, (Perfect C‚ÇÄ ‚àß C‚ÇÄ.Nonempty ‚àß C‚ÇÄ ‚äÜ C ‚àß EMetric.diam C‚ÇÄ ‚â§ Œµ) ‚àß
    (Perfect C‚ÇÅ ‚àß C‚ÇÅ.Nonempty ‚àß C‚ÇÅ ‚äÜ C ‚àß EMetric.diam C‚ÇÅ ‚â§ Œµ) ‚àß Disjoint C‚ÇÄ C‚ÇÅ := by
  rcases hC.splitting hnonempty with ‚ü®D‚ÇÄ, D‚ÇÅ, ‚ü®perf0, non0, sub0‚ü©, ‚ü®perf1, non1, sub1‚ü©, hdisj‚ü©
  cases' non0 with x‚ÇÄ hx‚ÇÄ
  cases' non1 with x‚ÇÅ hx‚ÇÅ
  rcases perf0.small_diam_aux Œµ_pos hx‚ÇÄ with ‚ü®perf0', non0', sub0', diam0‚ü©
  rcases perf1.small_diam_aux Œµ_pos hx‚ÇÅ with ‚ü®perf1', non1', sub1', diam1‚ü©
  refine'
    ‚ü®closure (EMetric.ball x‚ÇÄ (Œµ / 2) ‚à© D‚ÇÄ), closure (EMetric.ball x‚ÇÅ (Œµ / 2) ‚à© D‚ÇÅ),
      ‚ü®perf0', non0', sub0'.trans sub0, diam0‚ü©, ‚ü®perf1', non1', sub1'.trans sub1, diam1‚ü©, _‚ü©
  apply Disjoint.mono _ _ hdisj <;> assumption
#align perfect.small_diam_splitting Perfect.small_diam_splitting

open CantorScheme

/-- Any nonempty perfect set in a complete metric space admits a continuous injection
from the Cantor space, `‚Ñï ‚Üí Bool`. -/
theorem Perfect.exists_nat_bool_injection [CompleteSpace Œ±] :
    ‚àÉ f : (‚Ñï ‚Üí Bool) ‚Üí Œ±, range f ‚äÜ C ‚àß Continuous f ‚àß Injective f := by
  obtain ‚ü®u, -, upos', hu‚ü© := exists_seq_strictAnti_tendsto' (zero_lt_one' ‚Ñù‚â•0‚àû)
  have upos := fun n => (upos' n).1
  let P := Subtype fun E : Set Œ± => Perfect E ‚àß E.Nonempty
  choose C0 C1 h0 h1 hdisj using
    fun {C : Set Œ±} (hC : Perfect C) (hnonempty : C.Nonempty) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : 0 < Œµ) =>
    hC.small_diam_splitting hnonempty hŒµ
  let DP : List Bool ‚Üí P := fun l => by
    induction' l with a l ih; ¬∑ exact ‚ü®C, ‚ü®hC, hnonempty‚ü©‚ü©
    cases a
    ¬∑ use C0 ih.property.1 ih.property.2 (upos l.length.succ)
      exact ‚ü®(h0 _ _ _).1, (h0 _ _ _).2.1‚ü©
    use C1 ih.property.1 ih.property.2 (upos l.length.succ)
    exact ‚ü®(h1 _ _ _).1, (h1 _ _ _).2.1‚ü©
  let D : List Bool ‚Üí Set Œ± := fun l => (DP l).val
  have hanti : ClosureAntitone D := by
    refine' Antitone.closureAntitone _ fun l => (DP l).property.1.closed
    intro l a
    cases a
    ¬∑ exact (h0 _ _ _).2.2.1
    exact (h1 _ _ _).2.2.1
  have hdiam : VanishingDiam D := by
    intro x
    apply tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds hu
    ¬∑ simp
    rw [eventually_atTop]
    refine' ‚ü®1, fun m (hm : 1 ‚â§ m) => _‚ü©
    rw [Nat.one_le_iff_ne_zero] at hm
    rcases Nat.exists_eq_succ_of_ne_zero hm with ‚ü®n, rfl‚ü©
    dsimp
    cases x n
    ¬∑ convert (h0 _ _ _).2.2.2
      rw [PiNat.res_length]
    convert (h1 _ _ _).2.2.2
    rw [PiNat.res_length]
  have hdisj' : CantorScheme.Disjoint D := by
    rintro l (a | a) (b | b) hab <;> try contradiction
    ¬∑ exact hdisj _ _ _
    exact (hdisj _ _ _).symm
  have hdom : ‚àÄ {x : ‚Ñï ‚Üí Bool}, x ‚àà (inducedMap D).1 := fun {x} => by
    rw [hanti.map_of_vanishingDiam hdiam fun l => (DP l).property.2]
    apply mem_univ
  refine' ‚ü®fun x => (inducedMap D).2 ‚ü®x, hdom‚ü©, _, _, _‚ü©
  ¬∑ rintro y ‚ü®x, rfl‚ü©
    exact map_mem ‚ü®_, hdom‚ü© 0
  ¬∑ apply hdiam.map_continuous.comp
    continuity
  intro x y hxy
  simpa only [‚Üê Subtype.val_inj] using hdisj'.map_injective hxy
#align perfect.exists_nat_bool_injection Perfect.exists_nat_bool_injection

end CantorInjMetric

/-- Any closed uncountable subset of a Polish space admits a continuous injection
from the Cantor space `‚Ñï ‚Üí Bool`.-/
theorem IsClosed.exists_nat_bool_injection_of_not_countable {Œ± : Type*} [TopologicalSpace Œ±]
    [PolishSpace Œ±] {C : Set Œ±} (hC : IsClosed C) (hunc : ¬¨C.Countable) :
    ‚àÉ f : (‚Ñï ‚Üí Bool) ‚Üí Œ±, range f ‚äÜ C ‚àß Continuous f ‚àß Function.Injective f := by
  letI := upgradePolishSpace Œ±
  obtain ‚ü®D, hD, Dnonempty, hDC‚ü© := exists_perfect_nonempty_of_isClosed_of_not_countable hC hunc
  obtain ‚ü®f, hfD, hf‚ü© := hD.exists_nat_bool_injection Dnonempty
  exact ‚ü®f, hfD.trans hDC, hf‚ü©
#align is_closed.exists_nat_bool_injection_of_not_countable IsClosed.exists_nat_bool_injection_of_not_countable
