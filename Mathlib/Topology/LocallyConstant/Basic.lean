/-
Copyright (c) 2021 Johan Commelin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johan Commelin
-/
import Mathlib.Algebra.Function.Indicator
import Mathlib.Tactic.FinCases
import Mathlib.Topology.Sets.Closeds

#align_import topology.locally_constant.basic from "leanprover-community/mathlib"@"0a0ec35061ed9960bf0e7ffb0335f44447b58977"

/-!
# Locally constant functions

This file sets up the theory of locally constant function from a topological space to a type.

## Main definitions and constructions

* `IsLocallyConstant f` : a map `f : X ‚Üí Y` where `X` is a topological space is locally
                            constant if every set in `Y` has an open preimage.
* `LocallyConstant X Y` : the type of locally constant maps from `X` to `Y`
* `LocallyConstant.map` : push-forward of locally constant maps
* `LocallyConstant.comap` : pull-back of locally constant maps

-/


variable {X Y Z Œ± : Type*} [TopologicalSpace X]

open Set Filter

open Topology

/-- A function between topological spaces is locally constant if the preimage of any set is open. -/
def IsLocallyConstant (f : X ‚Üí Y) : Prop :=
  ‚àÄ s : Set Y, IsOpen (f ‚Åª¬π' s)
#align is_locally_constant IsLocallyConstant

namespace IsLocallyConstant

open List in
protected theorem tfae (f : X ‚Üí Y) :
    TFAE [IsLocallyConstant f,
      ‚àÄ x, ‚àÄ·∂† x' in ùìù x, f x' = f x,
      ‚àÄ x, IsOpen { x' | f x' = f x },
      ‚àÄ y, IsOpen (f ‚Åª¬π' {y}),
      ‚àÄ x, ‚àÉ U : Set X, IsOpen U ‚àß x ‚àà U ‚àß ‚àÄ x' ‚àà U, f x' = f x] := by
  tfae_have 1 ‚Üí 4; exact fun h y => h {y}
  tfae_have 4 ‚Üí 3; exact fun h x => h (f x)
  tfae_have 3 ‚Üí 2; exact fun h x => IsOpen.mem_nhds (h x) rfl
  tfae_have 2 ‚Üí 5
  ¬∑ intro h x
    rcases mem_nhds_iff.1 (h x) with ‚ü®U, eq, hU, hx‚ü©
    exact ‚ü®U, hU, hx, eq‚ü©
  tfae_have 5 ‚Üí 1
  ¬∑ intro h s
    refine' isOpen_iff_forall_mem_open.2 fun x hx => _
    rcases h x with ‚ü®U, hU, hxU, eq‚ü©
    exact ‚ü®U, fun x' hx' => mem_preimage.2 <| (eq x' hx').symm ‚ñ∏ hx, hU, hxU‚ü©
  tfae_finish
#align is_locally_constant.tfae IsLocallyConstant.tfae

@[nontriviality]
theorem of_discrete [DiscreteTopology X] (f : X ‚Üí Y) : IsLocallyConstant f := fun _ =>
  isOpen_discrete _
#align is_locally_constant.of_discrete IsLocallyConstant.of_discrete

theorem isOpen_fiber {f : X ‚Üí Y} (hf : IsLocallyConstant f) (y : Y) : IsOpen { x | f x = y } :=
  hf {y}
#align is_locally_constant.is_open_fiber IsLocallyConstant.isOpen_fiber

theorem isClosed_fiber {f : X ‚Üí Y} (hf : IsLocallyConstant f) (y : Y) : IsClosed { x | f x = y } :=
  ‚ü®hf {y}·∂ú‚ü©
#align is_locally_constant.is_closed_fiber IsLocallyConstant.isClosed_fiber

theorem isClopen_fiber {f : X ‚Üí Y} (hf : IsLocallyConstant f) (y : Y) : IsClopen { x | f x = y } :=
  ‚ü®isClosed_fiber hf _,  isOpen_fiber hf _‚ü©
#align is_locally_constant.is_clopen_fiber IsLocallyConstant.isClopen_fiber

theorem iff_exists_open (f : X ‚Üí Y) :
    IsLocallyConstant f ‚Üî ‚àÄ x, ‚àÉ U : Set X, IsOpen U ‚àß x ‚àà U ‚àß ‚àÄ x' ‚àà U, f x' = f x :=
  (IsLocallyConstant.tfae f).out 0 4
#align is_locally_constant.iff_exists_open IsLocallyConstant.iff_exists_open

theorem iff_eventually_eq (f : X ‚Üí Y) : IsLocallyConstant f ‚Üî ‚àÄ x, ‚àÄ·∂† y in ùìù x, f y = f x :=
  (IsLocallyConstant.tfae f).out 0 1
#align is_locally_constant.iff_eventually_eq IsLocallyConstant.iff_eventually_eq

theorem exists_open {f : X ‚Üí Y} (hf : IsLocallyConstant f) (x : X) :
    ‚àÉ U : Set X, IsOpen U ‚àß x ‚àà U ‚àß ‚àÄ x' ‚àà U, f x' = f x :=
  (iff_exists_open f).1 hf x
#align is_locally_constant.exists_open IsLocallyConstant.exists_open

protected theorem eventually_eq {f : X ‚Üí Y} (hf : IsLocallyConstant f) (x : X) :
    ‚àÄ·∂† y in ùìù x, f y = f x :=
  (iff_eventually_eq f).1 hf x
#align is_locally_constant.eventually_eq IsLocallyConstant.eventually_eq

-- porting note: new lemma
theorem iff_isOpen_fiber_apply {f : X ‚Üí Y} : IsLocallyConstant f ‚Üî ‚àÄ x, IsOpen (f ‚Åª¬π' {f x}) :=
  (IsLocallyConstant.tfae f).out 0 2

-- porting note: new lemma
theorem iff_isOpen_fiber {f : X ‚Üí Y} : IsLocallyConstant f ‚Üî ‚àÄ y, IsOpen (f ‚Åª¬π' {y}) :=
  (IsLocallyConstant.tfae f).out 0 3

protected theorem continuous [TopologicalSpace Y] {f : X ‚Üí Y} (hf : IsLocallyConstant f) :
    Continuous f :=
  ‚ü®fun _ _ => hf _‚ü©
#align is_locally_constant.continuous IsLocallyConstant.continuous

theorem iff_continuous {_ : TopologicalSpace Y} [DiscreteTopology Y] (f : X ‚Üí Y) :
    IsLocallyConstant f ‚Üî Continuous f :=
  ‚ü®IsLocallyConstant.continuous, fun h s => h.isOpen_preimage s (isOpen_discrete _)‚ü©
#align is_locally_constant.iff_continuous IsLocallyConstant.iff_continuous

theorem of_constant (f : X ‚Üí Y) (h : ‚àÄ x y, f x = f y) : IsLocallyConstant f :=
  (iff_eventually_eq f).2 fun _ => eventually_of_forall fun _ => h _ _
#align is_locally_constant.of_constant IsLocallyConstant.of_constant

protected theorem const (y : Y) : IsLocallyConstant (Function.const X y) :=
  of_constant _ fun _ _ => rfl
#align is_locally_constant.const IsLocallyConstant.const

protected theorem comp {f : X ‚Üí Y} (hf : IsLocallyConstant f) (g : Y ‚Üí Z) :
    IsLocallyConstant (g ‚àò f) := fun s => by
  rw [Set.preimage_comp]
  exact hf _
#align is_locally_constant.comp IsLocallyConstant.comp

theorem prod_mk {Y'} {f : X ‚Üí Y} {f' : X ‚Üí Y'} (hf : IsLocallyConstant f)
    (hf' : IsLocallyConstant f') : IsLocallyConstant fun x => (f x, f' x) :=
  (iff_eventually_eq _).2 fun x =>
    (hf.eventually_eq x).mp <| (hf'.eventually_eq x).mono fun _ hf' hf => Prod.ext hf hf'
#align is_locally_constant.prod_mk IsLocallyConstant.prod_mk

theorem comp‚ÇÇ {Y‚ÇÅ Y‚ÇÇ Z : Type*} {f : X ‚Üí Y‚ÇÅ} {g : X ‚Üí Y‚ÇÇ} (hf : IsLocallyConstant f)
    (hg : IsLocallyConstant g) (h : Y‚ÇÅ ‚Üí Y‚ÇÇ ‚Üí Z) : IsLocallyConstant fun x => h (f x) (g x) :=
  (hf.prod_mk hg).comp fun x : Y‚ÇÅ √ó Y‚ÇÇ => h x.1 x.2
#align is_locally_constant.comp‚ÇÇ IsLocallyConstant.comp‚ÇÇ

theorem comp_continuous [TopologicalSpace Y] {g : Y ‚Üí Z} {f : X ‚Üí Y} (hg : IsLocallyConstant g)
    (hf : Continuous f) : IsLocallyConstant (g ‚àò f) := fun s => by
  rw [Set.preimage_comp]
  exact hf.isOpen_preimage _ (hg _)
#align is_locally_constant.comp_continuous IsLocallyConstant.comp_continuous

/-- A locally constant function is constant on any preconnected set. -/
theorem apply_eq_of_isPreconnected {f : X ‚Üí Y} (hf : IsLocallyConstant f) {s : Set X}
    (hs : IsPreconnected s) {x y : X} (hx : x ‚àà s) (hy : y ‚àà s) : f x = f y := by
  let U := f ‚Åª¬π' {f y}
  suffices : x ‚àâ U·∂ú; exact Classical.not_not.1 this
  intro hxV
  specialize hs U U·∂ú (hf {f y}) (hf {f y}·∂ú) _ ‚ü®y, ‚ü®hy, rfl‚ü©‚ü© ‚ü®x, ‚ü®hx, hxV‚ü©‚ü©
  ¬∑ simp only [union_compl_self, subset_univ]
  ¬∑ simp only [inter_empty, Set.not_nonempty_empty, inter_compl_self] at hs
#align is_locally_constant.apply_eq_of_is_preconnected IsLocallyConstant.apply_eq_of_isPreconnected

theorem apply_eq_of_preconnectedSpace [PreconnectedSpace X] {f : X ‚Üí Y} (hf : IsLocallyConstant f)
    (x y : X) : f x = f y :=
  hf.apply_eq_of_isPreconnected isPreconnected_univ trivial trivial
#align is_locally_constant.apply_eq_of_preconnected_space IsLocallyConstant.apply_eq_of_preconnectedSpace

theorem eq_const [PreconnectedSpace X] {f : X ‚Üí Y} (hf : IsLocallyConstant f) (x : X) :
    f = Function.const X (f x) :=
  funext fun y => hf.apply_eq_of_preconnectedSpace y x
#align is_locally_constant.eq_const IsLocallyConstant.eq_const

theorem exists_eq_const [PreconnectedSpace X] [Nonempty Y] {f : X ‚Üí Y} (hf : IsLocallyConstant f) :
    ‚àÉ y, f = Function.const X y := by
  cases' isEmpty_or_nonempty X with h h
  ¬∑ exact ‚ü®Classical.arbitrary Y, funext <| h.elim‚ü©
  ¬∑ exact ‚ü®f (Classical.arbitrary X), hf.eq_const _‚ü©
#align is_locally_constant.exists_eq_const IsLocallyConstant.exists_eq_const

theorem iff_is_const [PreconnectedSpace X] {f : X ‚Üí Y} : IsLocallyConstant f ‚Üî ‚àÄ x y, f x = f y :=
  ‚ü®fun h _ _ => h.apply_eq_of_isPreconnected isPreconnected_univ trivial trivial, of_constant _‚ü©
#align is_locally_constant.iff_is_const IsLocallyConstant.iff_is_const

theorem range_finite [CompactSpace X] {f : X ‚Üí Y} (hf : IsLocallyConstant f) :
    (Set.range f).Finite := by
  letI : TopologicalSpace Y := ‚ä•; haveI := discreteTopology_bot Y
  exact (isCompact_range hf.continuous).finite_of_discrete
#align is_locally_constant.range_finite IsLocallyConstant.range_finite

@[to_additive]
theorem one [One Y] : IsLocallyConstant (1 : X ‚Üí Y) := IsLocallyConstant.const 1
#align is_locally_constant.one IsLocallyConstant.one
#align is_locally_constant.zero IsLocallyConstant.zero

@[to_additive]
theorem inv [Inv Y] ‚¶Éf : X ‚Üí Y‚¶Ñ (hf : IsLocallyConstant f) : IsLocallyConstant f‚Åª¬π :=
  hf.comp fun x => x‚Åª¬π
#align is_locally_constant.inv IsLocallyConstant.inv
#align is_locally_constant.neg IsLocallyConstant.neg

@[to_additive]
theorem mul [Mul Y] ‚¶Éf g : X ‚Üí Y‚¶Ñ (hf : IsLocallyConstant f) (hg : IsLocallyConstant g) :
    IsLocallyConstant (f * g) :=
  hf.comp‚ÇÇ hg (¬∑ * ¬∑)
#align is_locally_constant.mul IsLocallyConstant.mul
#align is_locally_constant.add IsLocallyConstant.add

@[to_additive]
theorem div [Div Y] ‚¶Éf g : X ‚Üí Y‚¶Ñ (hf : IsLocallyConstant f) (hg : IsLocallyConstant g) :
    IsLocallyConstant (f / g) :=
  hf.comp‚ÇÇ hg (¬∑ / ¬∑)
#align is_locally_constant.div IsLocallyConstant.div
#align is_locally_constant.sub IsLocallyConstant.sub

/-- If a composition of a function `f` followed by an injection `g` is locally
constant, then the locally constant property descends to `f`. -/
theorem desc {Œ± Œ≤ : Type*} (f : X ‚Üí Œ±) (g : Œ± ‚Üí Œ≤) (h : IsLocallyConstant (g ‚àò f))
    (inj : Function.Injective g) : IsLocallyConstant f := fun s => by
  rw [‚Üê preimage_image_eq s inj, preimage_preimage]
  exact h (g '' s)
#align is_locally_constant.desc IsLocallyConstant.desc

theorem of_constant_on_connected_components [LocallyConnectedSpace X] {f : X ‚Üí Y}
    (h : ‚àÄ x, ‚àÄ y ‚àà connectedComponent x, f y = f x) : IsLocallyConstant f :=
  (iff_exists_open _).2 fun x =>
    ‚ü®connectedComponent x, isOpen_connectedComponent, mem_connectedComponent, h x‚ü©
#align is_locally_constant.of_constant_on_connected_components IsLocallyConstant.of_constant_on_connected_components

theorem of_constant_on_connected_clopens [LocallyConnectedSpace X] {f : X ‚Üí Y}
    (h : ‚àÄ U : Set X, IsConnected U ‚Üí IsClopen U ‚Üí ‚àÄ x ‚àà U, ‚àÄ y ‚àà U, f y = f x) :
    IsLocallyConstant f :=
  of_constant_on_connected_components fun x =>
    h (connectedComponent x) isConnected_connectedComponent isClopen_connectedComponent x
      mem_connectedComponent

theorem of_constant_on_preconnected_clopens [LocallyConnectedSpace X] {f : X ‚Üí Y}
    (h : ‚àÄ U : Set X, IsPreconnected U ‚Üí IsClopen U ‚Üí ‚àÄ x ‚àà U, ‚àÄ y ‚àà U, f y = f x) :
    IsLocallyConstant f :=
  of_constant_on_connected_clopens fun U hU ‚Ü¶ h U hU.isPreconnected
#align is_locally_constant.of_constant_on_preconnected_clopens IsLocallyConstant.of_constant_on_preconnected_clopens

end IsLocallyConstant

/-- A (bundled) locally constant function from a topological space `X` to a type `Y`. -/
structure LocallyConstant (X Y : Type*) [TopologicalSpace X] where
  /-- The underlying function. -/
  protected toFun : X ‚Üí Y
  /-- The map is locally constant. -/
  protected isLocallyConstant : IsLocallyConstant toFun
#align locally_constant LocallyConstant

namespace LocallyConstant

instance [Inhabited Y] : Inhabited (LocallyConstant X Y) :=
  ‚ü®‚ü®_, IsLocallyConstant.const default‚ü©‚ü©

instance : FunLike (LocallyConstant X Y) X Y where
  coe := LocallyConstant.toFun
  coe_injective' := by rintro ‚ü®_, _‚ü© ‚ü®_, _‚ü© _; congr

/-- See Note [custom simps projections]. -/
def Simps.apply (f : LocallyConstant X Y) : X ‚Üí Y := f

initialize_simps_projections LocallyConstant (toFun ‚Üí apply)

@[simp]
theorem toFun_eq_coe (f : LocallyConstant X Y) : f.toFun = f :=
  rfl
#align locally_constant.to_fun_eq_coe LocallyConstant.toFun_eq_coe

@[simp]
theorem coe_mk (f : X ‚Üí Y) (h) : ‚áë(‚ü®f, h‚ü© : LocallyConstant X Y) = f :=
  rfl
#align locally_constant.coe_mk LocallyConstant.coe_mk

theorem congr_fun {f g : LocallyConstant X Y} (h : f = g) (x : X) : f x = g x :=
  DFunLike.congr_fun h x
#align locally_constant.congr_fun LocallyConstant.congr_fun

theorem congr_arg (f : LocallyConstant X Y) {x y : X} (h : x = y) : f x = f y :=
  DFunLike.congr_arg f h
#align locally_constant.congr_arg LocallyConstant.congr_arg

theorem coe_injective : @Function.Injective (LocallyConstant X Y) (X ‚Üí Y) (‚Üë) := fun _ _ =>
  DFunLike.ext'
#align locally_constant.coe_injective LocallyConstant.coe_injective

@[norm_cast]
theorem coe_inj {f g : LocallyConstant X Y} : (f : X ‚Üí Y) = g ‚Üî f = g :=
  coe_injective.eq_iff
#align locally_constant.coe_inj LocallyConstant.coe_inj

@[ext]
theorem ext ‚¶Éf g : LocallyConstant X Y‚¶Ñ (h : ‚àÄ x, f x = g x) : f = g :=
  DFunLike.ext _ _ h
#align locally_constant.ext LocallyConstant.ext

theorem ext_iff {f g : LocallyConstant X Y} : f = g ‚Üî ‚àÄ x, f x = g x := DFunLike.ext_iff
#align locally_constant.ext_iff LocallyConstant.ext_iff

section CodomainTopologicalSpace

variable [TopologicalSpace Y] (f : LocallyConstant X Y)

protected theorem continuous : Continuous f :=
  f.isLocallyConstant.continuous
#align locally_constant.continuous LocallyConstant.continuous

/-- We can turn a locally-constant function into a bundled `ContinuousMap`. -/
@[coe] def toContinuousMap : C(X, Y) :=
  ‚ü®f, f.continuous‚ü©
#align locally_constant.to_continuous_map LocallyConstant.toContinuousMap

/-- As a shorthand, `LocallyConstant.toContinuousMap` is available as a coercion -/
instance : Coe (LocallyConstant X Y) C(X, Y) := ‚ü®toContinuousMap‚ü©

-- porting note: became a syntactic `rfl`
#noalign locally_constant.to_continuous_map_eq_coe

@[simp] theorem coe_continuousMap : ((f : C(X, Y)) : X ‚Üí Y) = (f : X ‚Üí Y) := rfl
#align locally_constant.coe_continuous_map LocallyConstant.coe_continuousMap

theorem toContinuousMap_injective :
    Function.Injective (toContinuousMap : LocallyConstant X Y ‚Üí C(X, Y)) := fun _ _ h =>
  ext (ContinuousMap.congr_fun h)
#align locally_constant.to_continuous_map_injective LocallyConstant.toContinuousMap_injective

end CodomainTopologicalSpace

/-- The constant locally constant function on `X` with value `y : Y`. -/
def const (X : Type*) {Y : Type*} [TopologicalSpace X] (y : Y) : LocallyConstant X Y :=
  ‚ü®Function.const X y, IsLocallyConstant.const _‚ü©
#align locally_constant.const LocallyConstant.const

@[simp]
theorem coe_const (y : Y) : (const X y : X ‚Üí Y) = Function.const X y :=
  rfl
#align locally_constant.coe_const LocallyConstant.coe_const

/-- The locally constant function to `Fin 2` associated to a clopen set. -/
def ofIsClopen {X : Type*} [TopologicalSpace X] {U : Set X} [‚àÄ x, Decidable (x ‚àà U)]
    (hU : IsClopen U) : LocallyConstant X (Fin 2) where
  toFun x := if x ‚àà U then 0 else 1
  isLocallyConstant := by
    refine IsLocallyConstant.iff_isOpen_fiber.2 <| Fin.forall_fin_two.2 ‚ü®?_, ?_‚ü©
    ¬∑ convert hU.2 using 1
      ext
      simp only [mem_singleton_iff, Fin.one_eq_zero_iff, mem_preimage, ite_eq_left_iff,
        Nat.succ_succ_ne_one]
      tauto
    ¬∑ rw [‚Üê isClosed_compl_iff]
      convert hU.1
      ext
      simp
#align locally_constant.of_clopen LocallyConstant.ofIsClopen

@[simp]
theorem ofIsClopen_fiber_zero {X : Type*} [TopologicalSpace X] {U : Set X} [‚àÄ x, Decidable (x ‚àà U)]
    (hU : IsClopen U) : ofIsClopen hU ‚Åª¬π' ({0} : Set (Fin 2)) = U := by
  ext
  simp only [ofIsClopen, mem_singleton_iff, Fin.one_eq_zero_iff, coe_mk, mem_preimage,
    ite_eq_left_iff, Nat.succ_succ_ne_one]
  tauto
#align locally_constant.of_clopen_fiber_zero LocallyConstant.ofIsClopen_fiber_zero

@[simp]
theorem ofIsClopen_fiber_one {X : Type*} [TopologicalSpace X] {U : Set X} [‚àÄ x, Decidable (x ‚àà U)]
    (hU : IsClopen U) : ofIsClopen hU ‚Åª¬π' ({1} : Set (Fin 2)) = U·∂ú := by
  ext
  simp only [ofIsClopen, mem_singleton_iff, coe_mk, Fin.zero_eq_one_iff, mem_preimage,
    ite_eq_right_iff, mem_compl_iff, Nat.succ_succ_ne_one]
#align locally_constant.of_clopen_fiber_one LocallyConstant.ofIsClopen_fiber_one

theorem locallyConstant_eq_of_fiber_zero_eq {X : Type*} [TopologicalSpace X]
    (f g : LocallyConstant X (Fin 2)) (h : f ‚Åª¬π' ({0} : Set (Fin 2)) = g ‚Åª¬π' {0}) : f = g := by
  simp only [Set.ext_iff, mem_singleton_iff, mem_preimage] at h
  ext1 x
  exact Fin.fin_two_eq_of_eq_zero_iff (h x)
#align locally_constant.locally_constant_eq_of_fiber_zero_eq LocallyConstant.locallyConstant_eq_of_fiber_zero_eq

theorem range_finite [CompactSpace X] (f : LocallyConstant X Y) : (Set.range f).Finite :=
  f.isLocallyConstant.range_finite
#align locally_constant.range_finite LocallyConstant.range_finite

theorem apply_eq_of_isPreconnected (f : LocallyConstant X Y) {s : Set X} (hs : IsPreconnected s)
    {x y : X} (hx : x ‚àà s) (hy : y ‚àà s) : f x = f y :=
  f.isLocallyConstant.apply_eq_of_isPreconnected hs hx hy
#align locally_constant.apply_eq_of_is_preconnected LocallyConstant.apply_eq_of_isPreconnected

theorem apply_eq_of_preconnectedSpace [PreconnectedSpace X] (f : LocallyConstant X Y) (x y : X) :
    f x = f y :=
  f.isLocallyConstant.apply_eq_of_isPreconnected isPreconnected_univ trivial trivial
#align locally_constant.apply_eq_of_preconnected_space LocallyConstant.apply_eq_of_preconnectedSpace

theorem eq_const [PreconnectedSpace X] (f : LocallyConstant X Y) (x : X) : f = const X (f x) :=
  ext fun _ => apply_eq_of_preconnectedSpace f _ _
#align locally_constant.eq_const LocallyConstant.eq_const

theorem exists_eq_const [PreconnectedSpace X] [Nonempty Y] (f : LocallyConstant X Y) :
    ‚àÉ y, f = const X y := by
  rcases Classical.em (Nonempty X) with (‚ü®‚ü®x‚ü©‚ü© | hX)
  ¬∑ exact ‚ü®f x, f.eq_const x‚ü©
  ¬∑ exact ‚ü®Classical.arbitrary Y, ext fun x => (hX ‚ü®x‚ü©).elim‚ü©
#align locally_constant.exists_eq_const LocallyConstant.exists_eq_const

/-- Push forward of locally constant maps under any map, by post-composition. -/
def map (f : Y ‚Üí Z) (g : LocallyConstant X Y) : LocallyConstant X Z :=
  ‚ü®f ‚àò g, g.isLocallyConstant.comp f‚ü©
#align locally_constant.map LocallyConstant.map

@[simp]
theorem map_apply (f : Y ‚Üí Z) (g : LocallyConstant X Y) : ‚áë(map f g) = f ‚àò g :=
  rfl
#align locally_constant.map_apply LocallyConstant.map_apply

@[simp]
theorem map_id : @map X Y Y _ id = id := rfl
#align locally_constant.map_id LocallyConstant.map_id

@[simp]
theorem map_comp {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Type*} (g : Y‚ÇÇ ‚Üí Y‚ÇÉ) (f : Y‚ÇÅ ‚Üí Y‚ÇÇ) :
    @map X _ _ _ g ‚àò map f = map (g ‚àò f) := rfl
#align locally_constant.map_comp LocallyConstant.map_comp

/-- Given a locally constant function to `Œ± ‚Üí Œ≤`, construct a family of locally constant
functions with values in Œ≤ indexed by Œ±. -/
def flip {X Œ± Œ≤ : Type*} [TopologicalSpace X] (f : LocallyConstant X (Œ± ‚Üí Œ≤)) (a : Œ±) :
    LocallyConstant X Œ≤ :=
  f.map fun f => f a
#align locally_constant.flip LocallyConstant.flip

/-- If Œ± is finite, this constructs a locally constant function to `Œ± ‚Üí Œ≤` given a
family of locally constant functions with values in Œ≤ indexed by Œ±. -/
def unflip {X Œ± Œ≤ : Type*} [Finite Œ±] [TopologicalSpace X] (f : Œ± ‚Üí LocallyConstant X Œ≤) :
    LocallyConstant X (Œ± ‚Üí Œ≤) where
  toFun x a := f a x
  isLocallyConstant := IsLocallyConstant.iff_isOpen_fiber.2 fun g => by
    have : (fun (x : X) (a : Œ±) => f a x) ‚Åª¬π' {g} = ‚ãÇ a : Œ±, f a ‚Åª¬π' {g a} := by
      ext; simp [Function.funext_iff]
    rw [this]
    exact isOpen_iInter_of_finite fun a => (f a).isLocallyConstant _
#align locally_constant.unflip LocallyConstant.unflip

@[simp]
theorem unflip_flip {X Œ± Œ≤ : Type*} [Finite Œ±] [TopologicalSpace X]
    (f : LocallyConstant X (Œ± ‚Üí Œ≤)) : unflip f.flip = f := rfl
#align locally_constant.unflip_flip LocallyConstant.unflip_flip

@[simp]
theorem flip_unflip {X Œ± Œ≤ : Type*} [Finite Œ±] [TopologicalSpace X]
    (f : Œ± ‚Üí LocallyConstant X Œ≤) : (unflip f).flip = f := rfl
#align locally_constant.flip_unflip LocallyConstant.flip_unflip

section Comap

open Classical

variable [TopologicalSpace Y]

/-- Pull back of locally constant maps under any map, by pre-composition.

This definition only makes sense if `f` is continuous,
in which case it sends locally constant functions to their precomposition with `f`.
See also `LocallyConstant.coe_comap`.

TODO: take `f : C(X, Y)` as an argument? Or we actually use it for discontinuous `f`? -/
noncomputable def comap (f : X ‚Üí Y) : LocallyConstant Y Z ‚Üí LocallyConstant X Z :=
  if hf : Continuous f then fun g => ‚ü®g ‚àò f, g.isLocallyConstant.comp_continuous hf‚ü©
  else by
    by_cases H : Nonempty X
    ¬∑ intro g
      exact const X (g <| f <| Classical.arbitrary X)
    ¬∑ refine fun _ => ‚ü®fun x => (H ‚ü®x‚ü©).elim, fun s => ?_‚ü©
      rw [isOpen_iff_nhds]
      intro x
      exact (H ‚ü®x‚ü©).elim
#align locally_constant.comap LocallyConstant.comap

@[simp]
theorem coe_comap (f : X ‚Üí Y) (g : LocallyConstant Y Z) (hf : Continuous f) :
    (comap f g) = g ‚àò f := by
  rw [comap, dif_pos hf]
  rfl
#align locally_constant.coe_comap LocallyConstant.coe_comap

theorem coe_comap_apply (f : X ‚Üí Y) (g : LocallyConstant Y Z) (hf : Continuous f) (x : X) :
    comap f g x = g (f x) := by
  simp only [hf, coe_comap, Function.comp_apply]

@[simp]
theorem comap_id : comap (@id X) = @id (LocallyConstant X Z) := by
  ext
  simp only [continuous_id, id.def, Function.comp_id, coe_comap]
#align locally_constant.comap_id LocallyConstant.comap_id

theorem comap_comp [TopologicalSpace Z] (f : X ‚Üí Y) (g : Y ‚Üí Z) (hf : Continuous f)
    (hg : Continuous g) : @comap _ _ Œ± _ _ f ‚àò comap g = comap (g ‚àò f) := by
  ext
  rw [Function.comp_apply]
  simp only [hf, hg, hg.comp hf, coe_comap]; rfl
#align locally_constant.comap_comp LocallyConstant.comap_comp

theorem comap_comap [TopologicalSpace Z] (f : X ‚Üí Y) (g : Y ‚Üí Z)
    (hf : Continuous f) (hg : Continuous g) (x : LocallyConstant Z Œ±) :
    comap f (comap g x) = comap (g ‚àò f) x := by
  rw [‚Üê comap_comp f g hf hg]; rfl

theorem comap_const (f : X ‚Üí Y) (y : Y) (h : ‚àÄ x, f x = y) :
    (comap f : LocallyConstant Y Z ‚Üí LocallyConstant X Z) = fun g => const X (g y) := by
  ext; rw [coe_comap]
  ¬∑ simp only [Function.comp_apply, h, coe_const, Function.const_apply]
  ¬∑ rw [show f = fun _ => y by ext; apply h]
    exact continuous_const
#align locally_constant.comap_const LocallyConstant.comap_const

lemma comap_injective (f : X ‚Üí Y) (hf: Continuous f) (hfs : f.Surjective) :
    (comap (Z := Z) f).Injective := by
  intro a b h
  rw [LocallyConstant.ext_iff] at h
  ext y
  obtain ‚ü®x, hx‚ü© := hfs y
  specialize h x
  rwa [coe_comap_apply _ _ hf, coe_comap_apply _ _ hf, hx] at h

end Comap

section Desc

/-- If a locally constant function factors through an injection, then it factors through a locally
constant function. -/
def desc {X Œ± Œ≤ : Type*} [TopologicalSpace X] {g : Œ± ‚Üí Œ≤} (f : X ‚Üí Œ±) (h : LocallyConstant X Œ≤)
    (cond : g ‚àò f = h) (inj : Function.Injective g) : LocallyConstant X Œ± where
  toFun := f
  isLocallyConstant := IsLocallyConstant.desc _ g (cond.symm ‚ñ∏ h.isLocallyConstant) inj
#align locally_constant.desc LocallyConstant.desc

@[simp]
theorem coe_desc {X Œ± Œ≤ : Type*} [TopologicalSpace X] (f : X ‚Üí Œ±) (g : Œ± ‚Üí Œ≤)
    (h : LocallyConstant X Œ≤) (cond : g ‚àò f = h) (inj : Function.Injective g) :
    ‚áë(desc f h cond inj) = f :=
  rfl
#align locally_constant.coe_desc LocallyConstant.coe_desc

end Desc

section Indicator

variable {R : Type*} [One R] {U : Set X} (f : LocallyConstant X R)

open Classical

/-- Given a clopen set `U` and a locally constant function `f`, `LocallyConstant.mulIndicator`
  returns the locally constant function that is `f` on `U` and `1` otherwise. -/
@[to_additive (attr := simps) "Given a clopen set `U` and a locally constant function `f`,
  `LocallyConstant.indicator` returns the locally constant function that is `f` on `U` and `0`
  otherwise. "]
noncomputable def mulIndicator (hU : IsClopen U) : LocallyConstant X R where
  toFun := Set.mulIndicator U f
  isLocallyConstant := fun s => by
    rw [mulIndicator_preimage, Set.ite, Set.diff_eq]
    exact ((f.2 s).inter hU.isOpen).union ((IsLocallyConstant.const 1 s).inter hU.compl.isOpen)
#align locally_constant.mul_indicator LocallyConstant.mulIndicator
#align locally_constant.indicator LocallyConstant.indicator

variable (a : X)

@[to_additive]
theorem mulIndicator_apply_eq_if (hU : IsClopen U) :
    mulIndicator f hU a = if a ‚àà U then f a else 1 :=
  Set.mulIndicator_apply U f a
#align locally_constant.mul_indicator_apply_eq_if LocallyConstant.mulIndicator_apply_eq_if
#align locally_constant.indicator_apply_eq_if LocallyConstant.indicator_apply_eq_if

variable {a}

@[to_additive]
theorem mulIndicator_of_mem (hU : IsClopen U) (h : a ‚àà U) : f.mulIndicator hU a = f a :=
  Set.mulIndicator_of_mem h _
#align locally_constant.mul_indicator_of_mem LocallyConstant.mulIndicator_of_mem
#align locally_constant.indicator_of_mem LocallyConstant.indicator_of_mem

@[to_additive]
theorem mulIndicator_of_not_mem (hU : IsClopen U) (h : a ‚àâ U) : f.mulIndicator hU a = 1 :=
  Set.mulIndicator_of_not_mem h _
#align locally_constant.mul_indicator_of_not_mem LocallyConstant.mulIndicator_of_not_mem
#align locally_constant.indicator_of_not_mem LocallyConstant.indicator_of_not_mem

end Indicator

section Equiv

/-- The equivalence between `LocallyConstant X Z`¬†and `LocallyConstant Y Z` given a
    homeomorphism `X ‚âÉ‚Çú Y` -/
@[simps]
noncomputable
def congrLeft [TopologicalSpace Y] (e : X ‚âÉ‚Çú Y) : LocallyConstant X Z ‚âÉ LocallyConstant Y Z where
  toFun := comap e.symm
  invFun := comap e
  left_inv := by
    intro
    rw [comap_comap _ _ e.continuous e.symm.continuous]
    simp
  right_inv := by
    intro
    rw [comap_comap _ _ e.symm.continuous e.continuous]
    simp

variable (X) in
/--
The set of clopen subsets of a topological space is equivalent to the locally constant maps to
a two-element set
-/
def equivClopens [‚àÄ (s : Set X) x, Decidable (x ‚àà s)] :
    LocallyConstant X (Fin 2) ‚âÉ TopologicalSpace.Clopens X where
  toFun f := ‚ü®f ‚Åª¬π' {0}, f.2.isClopen_fiber _‚ü©
  invFun s := ofIsClopen s.2
  left_inv _ := locallyConstant_eq_of_fiber_zero_eq _ _ (by simp)
  right_inv _ := by simp

end Equiv

section Piecewise

/-- Given two closed sets covering a topological space, and locally constant maps on these two sets,
    then if these two locally constant maps agree on the intersection, we get a piecewise defined
    locally constant map on the whole space.

TODO: Generalise this construction to `ContinuousMap`. -/
def piecewise {C‚ÇÅ C‚ÇÇ : Set X} (h‚ÇÅ : IsClosed C‚ÇÅ) (h‚ÇÇ : IsClosed C‚ÇÇ) (h : C‚ÇÅ ‚à™ C‚ÇÇ = Set.univ)
    (f : LocallyConstant C‚ÇÅ Z) (g : LocallyConstant C‚ÇÇ Z)
    (hfg : ‚àÄ (x : X) (hx : x ‚àà C‚ÇÅ ‚à© C‚ÇÇ), f ‚ü®x, hx.1‚ü© = g ‚ü®x, hx.2‚ü©)
    [DecidablePred (¬∑ ‚àà C‚ÇÅ)] : LocallyConstant X Z where
  toFun i := if hi : i ‚àà C‚ÇÅ then f ‚ü®i, hi‚ü© else g ‚ü®i, (Set.compl_subset_iff_union.mpr h) hi‚ü©
  isLocallyConstant := by
    let dZ : TopologicalSpace Z := ‚ä•
    haveI : DiscreteTopology Z := discreteTopology_bot Z
    obtain ‚ü®f, hf‚ü© := f
    obtain ‚ü®g, hg‚ü© := g
    rw [IsLocallyConstant.iff_continuous] at hf hg ‚ä¢
    dsimp only [coe_mk]
    rw [Set.union_eq_iUnion] at h
    refine' (locallyFinite_of_finite _).continuous h (fun i ‚Ü¶ _) (fun i ‚Ü¶ _)
    ¬∑ cases i <;> [exact h‚ÇÇ; exact h‚ÇÅ]
    ¬∑ cases i <;> rw [continuousOn_iff_continuous_restrict]
      ¬∑ convert hg
        ext x
        simp only [cond_false, restrict_apply, Subtype.coe_eta, dite_eq_right_iff]
        exact fun hx ‚Ü¶ hfg x ‚ü®hx, x.prop‚ü©
      ¬∑ simp only [cond_true, restrict_dite, Subtype.coe_eta]
        exact hf

@[simp]
lemma piecewise_apply_left {C‚ÇÅ C‚ÇÇ : Set X} (h‚ÇÅ : IsClosed C‚ÇÅ) (h‚ÇÇ : IsClosed C‚ÇÇ)
    (h : C‚ÇÅ ‚à™ C‚ÇÇ = Set.univ) (f : LocallyConstant C‚ÇÅ Z) (g : LocallyConstant C‚ÇÇ Z)
    (hfg : ‚àÄ (x : X) (hx : x ‚àà C‚ÇÅ ‚à© C‚ÇÇ), f ‚ü®x, hx.1‚ü© = g ‚ü®x, hx.2‚ü©)
    [DecidablePred (¬∑ ‚àà C‚ÇÅ)] (x : X) (hx : x ‚àà C‚ÇÅ) :
    piecewise h‚ÇÅ h‚ÇÇ h f g hfg x = f ‚ü®x, hx‚ü© := by
  simp only [piecewise, Set.mem_preimage, continuous_subtype_val.restrictPreimage,
    coe_comap, Function.comp_apply, coe_mk]
  rw [dif_pos hx]

@[simp]
lemma piecewise_apply_right {C‚ÇÅ C‚ÇÇ : Set X} (h‚ÇÅ : IsClosed C‚ÇÅ) (h‚ÇÇ : IsClosed C‚ÇÇ)
    (h : C‚ÇÅ ‚à™ C‚ÇÇ = Set.univ) (f : LocallyConstant C‚ÇÅ Z) (g : LocallyConstant C‚ÇÇ Z)
    (hfg : ‚àÄ (x : X) (hx : x ‚àà C‚ÇÅ ‚à© C‚ÇÇ), f ‚ü®x, hx.1‚ü© = g ‚ü®x, hx.2‚ü©)
    [DecidablePred (¬∑ ‚àà C‚ÇÅ)] (x : X) (hx : x ‚àà C‚ÇÇ) :
    piecewise h‚ÇÅ h‚ÇÇ h f g hfg x = g ‚ü®x, hx‚ü© := by
  simp only [piecewise, Set.mem_preimage, continuous_subtype_val.restrictPreimage,
    coe_comap, Function.comp_apply, coe_mk]
  split_ifs with h
  ¬∑ exact hfg x ‚ü®h, hx‚ü©
  ¬∑ rfl

/-- A variant of `LocallyConstant.piecewise`¬†where the two closed sets cover a subset.

TODO: Generalise this construction to `ContinuousMap`. -/
noncomputable def piecewise' {C‚ÇÄ C‚ÇÅ C‚ÇÇ : Set X} (h‚ÇÄ : C‚ÇÄ ‚äÜ C‚ÇÅ ‚à™ C‚ÇÇ) (h‚ÇÅ : IsClosed C‚ÇÅ)
    (h‚ÇÇ : IsClosed C‚ÇÇ) (f‚ÇÅ : LocallyConstant C‚ÇÅ Z) (f‚ÇÇ : LocallyConstant C‚ÇÇ Z)
    [DecidablePred (¬∑ ‚àà C‚ÇÅ)] (hf : ‚àÄ x (hx : x ‚àà C‚ÇÅ ‚à© C‚ÇÇ), f‚ÇÅ ‚ü®x, hx.1‚ü© = f‚ÇÇ ‚ü®x, hx.2‚ü©) :
    LocallyConstant C‚ÇÄ Z :=
  letI : ‚àÄ j : C‚ÇÄ, Decidable (j ‚àà Subtype.val ‚Åª¬π' C‚ÇÅ) := fun j ‚Ü¶ decidable_of_iff (‚Üëj ‚àà C‚ÇÅ) Iff.rfl
  piecewise (h‚ÇÅ.preimage continuous_subtype_val) (h‚ÇÇ.preimage continuous_subtype_val)
    (by simpa [eq_univ_iff_forall] using h‚ÇÄ)
    (f‚ÇÅ.comap (restrictPreimage C‚ÇÅ ((‚Üë) : C‚ÇÄ ‚Üí X)))
    (f‚ÇÇ.comap (restrictPreimage C‚ÇÇ ((‚Üë) : C‚ÇÄ ‚Üí X))) <| by
      rintro ‚ü®x, hx‚ÇÄ‚ü© ‚ü®hx‚ÇÅ : x ‚àà C‚ÇÅ, hx‚ÇÇ : x ‚àà C‚ÇÇ‚ü©
      simp_rw [coe_comap_apply _ _ continuous_subtype_val.restrictPreimage]
      exact hf x ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©

@[simp]
lemma piecewise'_apply_left {C‚ÇÄ C‚ÇÅ C‚ÇÇ : Set X} (h‚ÇÄ : C‚ÇÄ ‚äÜ C‚ÇÅ ‚à™ C‚ÇÇ) (h‚ÇÅ : IsClosed C‚ÇÅ)
    (h‚ÇÇ : IsClosed C‚ÇÇ) (f‚ÇÅ : LocallyConstant C‚ÇÅ Z) (f‚ÇÇ : LocallyConstant C‚ÇÇ Z)
    [DecidablePred (¬∑ ‚àà C‚ÇÅ)] (hf : ‚àÄ x (hx : x ‚àà C‚ÇÅ ‚à© C‚ÇÇ), f‚ÇÅ ‚ü®x, hx.1‚ü© = f‚ÇÇ ‚ü®x, hx.2‚ü©)
    (x : C‚ÇÄ) (hx : x.val ‚àà C‚ÇÅ) :
    piecewise' h‚ÇÄ h‚ÇÅ h‚ÇÇ f‚ÇÅ f‚ÇÇ hf x = f‚ÇÅ ‚ü®x.val, hx‚ü© := by
  letI : ‚àÄ j : C‚ÇÄ, Decidable (j ‚àà Subtype.val ‚Åª¬π' C‚ÇÅ) := fun j ‚Ü¶ decidable_of_iff (‚Üëj ‚àà C‚ÇÅ) Iff.rfl
  rw [piecewise', piecewise_apply_left (f := (f‚ÇÅ.comap (restrictPreimage C‚ÇÅ ((‚Üë) : C‚ÇÄ ‚Üí X))))
    (hx := hx), coe_comap (hf := continuous_subtype_val.restrictPreimage)]
  rfl

@[simp]
lemma piecewise'_apply_right {C‚ÇÄ C‚ÇÅ C‚ÇÇ : Set X} (h‚ÇÄ : C‚ÇÄ ‚äÜ C‚ÇÅ ‚à™ C‚ÇÇ) (h‚ÇÅ : IsClosed C‚ÇÅ)
    (h‚ÇÇ : IsClosed C‚ÇÇ) (f‚ÇÅ : LocallyConstant C‚ÇÅ Z) (f‚ÇÇ : LocallyConstant C‚ÇÇ Z)
    [DecidablePred (¬∑ ‚àà C‚ÇÅ)] (hf : ‚àÄ x (hx : x ‚àà C‚ÇÅ ‚à© C‚ÇÇ), f‚ÇÅ ‚ü®x, hx.1‚ü© = f‚ÇÇ ‚ü®x, hx.2‚ü©)
    (x : C‚ÇÄ) (hx : x.val ‚àà C‚ÇÇ) :
    piecewise' h‚ÇÄ h‚ÇÅ h‚ÇÇ f‚ÇÅ f‚ÇÇ hf x = f‚ÇÇ ‚ü®x.val, hx‚ü© := by
  letI : ‚àÄ j : C‚ÇÄ, Decidable (j ‚àà Subtype.val ‚Åª¬π' C‚ÇÅ) := fun j ‚Ü¶ decidable_of_iff (‚Üëj ‚àà C‚ÇÅ) Iff.rfl
  rw [piecewise', piecewise_apply_right (f := (f‚ÇÅ.comap (restrictPreimage C‚ÇÅ ((‚Üë) : C‚ÇÄ ‚Üí X))))
    (hx := hx), coe_comap (hf := continuous_subtype_val.restrictPreimage)]
  rfl

end Piecewise

end LocallyConstant
