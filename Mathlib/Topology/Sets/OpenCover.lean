/-
Copyright (c) 2025 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/

import Mathlib.Topology.Sets.Opens

/-!
# Open covers

We define `IsOpenCover` as a predicate on indexed families of open sets in a topological space `X`,
asserting that their union is `X`. This is an example of a declaration whose name is actually
longer than its content; but giving it a name serves as a way of standardizing API.
-/

open Set Topology

namespace TopologicalSpace

/-- An indexed family of open sets whose union is `X`. -/
def IsOpenCover {Œπ X : Type*} [TopologicalSpace X] (u : Œπ ‚Üí Opens X) : Prop :=
  iSup u = ‚ä§

variable {Œπ Œ∫ X Y : Type*} [TopologicalSpace X] {u : Œπ ‚Üí Opens X}
  [TopologicalSpace Y] {v : Œ∫ ‚Üí Opens Y}

namespace IsOpenCover

lemma mk (h : iSup u = ‚ä§) : IsOpenCover u := h

lemma of_sets {v : Œπ ‚Üí Set X} (h_open : ‚àÄ i, IsOpen (v i)) (h_iUnion : ‚ãÉ i, v i = univ) :
    IsOpenCover (fun i ‚Ü¶ ‚ü®v i, h_open i‚ü©) := by
  simp [IsOpenCover, h_iUnion]

lemma iSup_eq_top (hu : IsOpenCover u) : ‚®Ü i, u i = ‚ä§ := hu

lemma iSup_set_eq_univ (hu : IsOpenCover u) : ‚ãÉ i, (u i : Set X) = univ := by
  simpa [‚Üê SetLike.coe_set_eq] using hu.iSup_eq_top

/-- Pullback of a covering of `Y` by a continuous map `X ‚Üí Y`, giving a covering of `X` with the
same index type. -/
lemma comap (hv : IsOpenCover v) (f : C(X, Y)) : IsOpenCover fun k ‚Ü¶ (v k).comap f :=
  by simp [IsOpenCover, ‚Üê preimage_iUnion, hv.iSup_set_eq_univ]

lemma exists_mem (hu : IsOpenCover u) (a : X) : ‚àÉ i, a ‚àà u i := by
  simpa [‚Üê hu.iSup_set_eq_univ] using mem_univ a

lemma exists_mem_nhds (hu : IsOpenCover u) (a : X) : ‚àÉ i, (u i : Set X) ‚àà ùìù a :=
  match hu.exists_mem a with | ‚ü®i, hi‚ü© => ‚ü®i, (u i).isOpen.mem_nhds hi‚ü©

lemma iUnion_inter (hu : IsOpenCover u) (s : Set X) :
    ‚ãÉ i, s ‚à© u i = s := by
  simp [‚Üê inter_iUnion, hu.iSup_set_eq_univ]

end IsOpenCover

end TopologicalSpace
