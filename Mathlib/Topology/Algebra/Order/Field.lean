/-
Copyright (c) 2022 Benjamin Davidson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Benjamin Davidson, Devon Tuma, Eric Rodriguez, Oliver Nash

! This file was ported from Lean 3 source module topology.algebra.order.field
! leanprover-community/mathlib commit 9a59dcb7a2d06bf55da57b9030169219980660cd
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Tactic.Positivity
import Mathbin.Tactic.Linarith.Default
import Mathbin.Topology.Algebra.Order.Group
import Mathbin.Topology.Algebra.Field

/-!
# Topologies on linear ordered fields

-/


open Set Filter TopologicalSpace

open Function

open OrderDual (toDual ofDual)

open Topology Classical Filter

variable {Œ± Œ≤ : Type _}

variable [LinearOrderedField Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±]

variable {l : Filter Œ≤} {f g : Œ≤ ‚Üí Œ±}

section continuous_mul

theorem mul_tendsto_nhds_zero_right (x : Œ±) :
    Tendsto (uncurry ((¬∑ * ¬∑) : Œ± ‚Üí Œ± ‚Üí Œ±)) (ùìù 0 √ó·∂† ùìù x) <| ùìù 0 :=
  by
  have hx : 0 < 2 * (1 + |x|) := by positivity
  rw [((nhds_basis_zero_abs_sub_lt Œ±).Prod <| nhds_basis_abs_sub_lt x).tendsto_iff‚Çì
      (nhds_basis_zero_abs_sub_lt Œ±)]
  refine' fun Œµ Œµ_pos => ‚ü®(Œµ / (2 * (1 + |x|)), 1), ‚ü®div_pos Œµ_pos hx, zero_lt_one‚ü©, _‚ü©
  suffices ‚àÄ a b : Œ±, |a| < Œµ / (2 * (1 + |x|)) ‚Üí |b - x| < 1 ‚Üí |a| * |b| < Œµ by
    simpa only [and_imp, Prod.forall, mem_prod, ‚Üê abs_mul]
  intro a b h h'
  refine' lt_of_le_of_lt (mul_le_mul_of_nonneg_left _ (abs_nonneg a)) ((lt_div_iff hx).1 h)
  calc
    |b| = |b - x + x| := by rw [sub_add_cancel b x]
    _ ‚â§ |b - x| + |x| := (abs_add (b - x) x)
    _ ‚â§ 2 * (1 + |x|) := by linarith
    
#align mul_tendsto_nhds_zero_right mul_tendsto_nhds_zero_right

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem mul_tendsto_nhds_zero_left (x : Œ±) :
    Tendsto (uncurry ((¬∑ * ¬∑) : Œ± ‚Üí Œ± ‚Üí Œ±)) (ùìù x √ó·∂† ùìù 0) <| ùìù 0 :=
  by
  intro s hs
  have := mul_tendsto_nhds_zero_right x hs
  rw [Filter.mem_map, mem_prod_iff] at this‚ä¢
  obtain ‚ü®U, hU, V, hV, h‚ü© := this
  exact
    ‚ü®V, hV, U, hU, fun y hy =>
      (mul_comm y.2 y.1 ‚ñ∏ h (‚ü®hy.2, hy.1‚ü© : Prod.mk y.2 y.1 ‚àà U √óÀ¢ V) : y.1 * y.2 ‚àà s)‚ü©
#align mul_tendsto_nhds_zero_left mul_tendsto_nhds_zero_left

theorem nhds_eq_map_mul_left_nhds_one {x‚ÇÄ : Œ±} (hx‚ÇÄ : x‚ÇÄ ‚â† 0) :
    ùìù x‚ÇÄ = map (fun x => x‚ÇÄ * x) (ùìù 1) :=
  by
  have hx‚ÇÄ' : 0 < |x‚ÇÄ| := abs_pos.2 hx‚ÇÄ
  refine' Filter.ext fun t => _
  simp only [exists_prop, set_of_subset_set_of, (nhds_basis_abs_sub_lt x‚ÇÄ).mem_iff,
    (nhds_basis_abs_sub_lt (1 : Œ±)).mem_iff, Filter.mem_map']
  refine' ‚ü®fun h => _, fun h => _‚ü©
  ¬∑ obtain ‚ü®i, hi, hit‚ü© := h
    refine' ‚ü®i / |x‚ÇÄ|, div_pos hi (abs_pos.2 hx‚ÇÄ), fun x hx => hit _‚ü©
    calc
      |x‚ÇÄ * x - x‚ÇÄ| = |x‚ÇÄ * (x - 1)| := congr_arg abs (by ring_nf)
      _ = |x‚ÇÄ| * |x - 1| := (abs_mul x‚ÇÄ (x - 1))
      _ < |x‚ÇÄ| * (i / |x‚ÇÄ|) := (mul_lt_mul' le_rfl hx (by positivity) (abs_pos.2 hx‚ÇÄ))
      _ = |x‚ÇÄ| * i / |x‚ÇÄ| := by ring
      _ = i := mul_div_cancel_left i fun h => hx‚ÇÄ (abs_eq_zero.1 h)
      
  ¬∑ obtain ‚ü®i, hi, hit‚ü© := h
    refine' ‚ü®i * |x‚ÇÄ|, mul_pos hi (abs_pos.2 hx‚ÇÄ), fun x hx => _‚ü©
    have : |x / x‚ÇÄ - 1| < i
    calc
      |x / x‚ÇÄ - 1| = |x / x‚ÇÄ - x‚ÇÄ / x‚ÇÄ| := by rw [div_self hx‚ÇÄ]
      _ = |(x - x‚ÇÄ) / x‚ÇÄ| := (congr_arg abs (sub_div x x‚ÇÄ x‚ÇÄ).symm)
      _ = |x - x‚ÇÄ| / |x‚ÇÄ| := (abs_div (x - x‚ÇÄ) x‚ÇÄ)
      _ < i * |x‚ÇÄ| / |x‚ÇÄ| := (div_lt_div_of_lt (abs_pos.2 hx‚ÇÄ) hx)
      _ = i := by rw [‚Üê mul_div_assoc', div_self (ne_of_lt <| abs_pos.2 hx‚ÇÄ).symm, mul_one]
      
    specialize hit (x / x‚ÇÄ) this
    rwa [mul_div_assoc', mul_div_cancel_left x hx‚ÇÄ] at hit
#align nhds_eq_map_mul_left_nhds_one nhds_eq_map_mul_left_nhds_one

theorem nhds_eq_map_mul_right_nhds_one {x‚ÇÄ : Œ±} (hx‚ÇÄ : x‚ÇÄ ‚â† 0) :
    ùìù x‚ÇÄ = map (fun x => x * x‚ÇÄ) (ùìù 1) := by
  simp_rw [mul_comm _ x‚ÇÄ, nhds_eq_map_mul_left_nhds_one hx‚ÇÄ]
#align nhds_eq_map_mul_right_nhds_one nhds_eq_map_mul_right_nhds_one

theorem mul_tendsto_nhds_one_nhds_one :
    Tendsto (uncurry ((¬∑ * ¬∑) : Œ± ‚Üí Œ± ‚Üí Œ±)) (ùìù 1 √ó·∂† ùìù 1) <| ùìù 1 :=
  by
  rw [((nhds_basis_Ioo_pos (1 : Œ±)).Prod <| nhds_basis_Ioo_pos (1 : Œ±)).tendsto_iff‚Çì
      (nhds_basis_Ioo_pos_of_pos (zero_lt_one : (0 : Œ±) < 1))]
  intro Œµ hŒµ
  have hŒµ' : 0 ‚â§ 1 - Œµ / 4 := by linarith
  have Œµ_pos : 0 < Œµ / 4 := by linarith
  have Œµ_pos' : 0 < Œµ / 2 := by linarith
  simp only [and_imp, Prod.forall, mem_Ioo, Function.uncurry_apply_pair, mem_prod, Prod.exists]
  refine' ‚ü®Œµ / 4, Œµ / 4, ‚ü®Œµ_pos, Œµ_pos‚ü©, fun a b ha ha' hb hb' => _‚ü©
  have ha0 : 0 ‚â§ a := le_trans hŒµ' (le_of_lt ha)
  have hb0 : 0 ‚â§ b := le_trans hŒµ' (le_of_lt hb)
  refine'
    ‚ü®lt_of_le_of_lt _ (mul_lt_mul'' ha hb hŒµ' hŒµ'), lt_of_lt_of_le (mul_lt_mul'' ha' hb' ha0 hb0) _‚ü©
  ¬∑
    calc
      1 - Œµ = 1 - Œµ / 2 - Œµ / 2 := by ring_nf
      _ ‚â§ 1 - Œµ / 2 - Œµ / 2 + Œµ / 2 * (Œµ / 2) := (le_add_of_nonneg_right (by positivity))
      _ = (1 - Œµ / 2) * (1 - Œµ / 2) := by ring_nf
      _ ‚â§ (1 - Œµ / 4) * (1 - Œµ / 4) := mul_le_mul (by linarith) (by linarith) (by linarith) hŒµ'
      
  ¬∑
    calc
      (1 + Œµ / 4) * (1 + Œµ / 4) = 1 + Œµ / 2 + Œµ / 4 * (Œµ / 4) := by ring_nf
      _ = 1 + Œµ / 2 + Œµ * Œµ / 16 := by ring_nf
      _ ‚â§ 1 + Œµ / 2 + Œµ / 2 :=
        (add_le_add_left
          (div_le_div (le_of_lt hŒµ.1)
            (le_trans ((mul_le_mul_left hŒµ.1).2 hŒµ.2) (le_of_eq <| mul_one Œµ)) zero_lt_two
            (by linarith))
          (1 + Œµ / 2))
      _ ‚â§ 1 + Œµ := by ring_nf
      
#align mul_tendsto_nhds_one_nhds_one mul_tendsto_nhds_one_nhds_one

-- see Note [lower instance priority]
instance (priority := 100) LinearOrderedField.continuousMul : ContinuousMul Œ± :=
  ‚ü®by
    rw [continuous_iff_continuousAt]
    rintro ‚ü®x‚ÇÄ, y‚ÇÄ‚ü©
    by_cases hx‚ÇÄ : x‚ÇÄ = 0
    ¬∑ rw [hx‚ÇÄ, ContinuousAt, zero_mul, nhds_prod_eq]
      exact mul_tendsto_nhds_zero_right y‚ÇÄ
    by_cases hy‚ÇÄ : y‚ÇÄ = 0
    ¬∑ rw [hy‚ÇÄ, ContinuousAt, mul_zero, nhds_prod_eq]
      exact mul_tendsto_nhds_zero_left x‚ÇÄ
    have hxy : x‚ÇÄ * y‚ÇÄ ‚â† 0 := mul_ne_zero hx‚ÇÄ hy‚ÇÄ
    have key :
      (fun p : Œ± √ó Œ± => x‚ÇÄ * p.1 * (p.2 * y‚ÇÄ)) =
        ((fun x => x‚ÇÄ * x) ‚àò fun x => x * y‚ÇÄ) ‚àò uncurry (¬∑ * ¬∑) :=
      by
      ext p
      simp [uncurry, mul_assoc]
    have key‚ÇÇ : ((fun x => x‚ÇÄ * x) ‚àò fun x => y‚ÇÄ * x) = fun x => x‚ÇÄ * y‚ÇÄ * x :=
      by
      ext x
      simp
    calc
      map (uncurry (¬∑ * ¬∑)) (ùìù (x‚ÇÄ, y‚ÇÄ)) = map (uncurry (¬∑ * ¬∑)) (ùìù x‚ÇÄ √ó·∂† ùìù y‚ÇÄ) := by
        rw [nhds_prod_eq]
      _ = map (fun p : Œ± √ó Œ± => x‚ÇÄ * p.1 * (p.2 * y‚ÇÄ)) (ùìù 1 √ó·∂† ùìù 1) := by
        rw [uncurry, nhds_eq_map_mul_left_nhds_one hx‚ÇÄ, nhds_eq_map_mul_right_nhds_one hy‚ÇÄ,
          prod_map_map_eq, Filter.map_map]
      _ = map ((fun x => x‚ÇÄ * x) ‚àò fun x => x * y‚ÇÄ) (map (uncurry (¬∑ * ¬∑)) (ùìù 1 √ó·∂† ùìù 1)) := by
        rw [key, ‚Üê Filter.map_map]
      _ ‚â§ map ((fun x : Œ± => x‚ÇÄ * x) ‚àò fun x => x * y‚ÇÄ) (ùìù 1) :=
        (map_mono mul_tendsto_nhds_one_nhds_one)
      _ = ùìù (x‚ÇÄ * y‚ÇÄ) := by
        rw [‚Üê Filter.map_map, ‚Üê nhds_eq_map_mul_right_nhds_one hy‚ÇÄ,
          nhds_eq_map_mul_left_nhds_one hy‚ÇÄ, Filter.map_map, key‚ÇÇ, ‚Üê
          nhds_eq_map_mul_left_nhds_one hxy]
      ‚ü©
#align linear_ordered_field.has_continuous_mul LinearOrderedField.continuousMul

end continuous_mul

/-- In a linearly ordered field with the order topology, if `f` tends to `at_top` and `g` tends to
a positive constant `C` then `f * g` tends to `at_top`. -/
theorem Filter.Tendsto.atTop_mul {C : Œ±} (hC : 0 < C) (hf : Tendsto f l atTop)
    (hg : Tendsto g l (ùìù C)) : Tendsto (fun x => f x * g x) l atTop :=
  by
  refine' tendsto_at_top_mono' _ _ (hf.at_top_mul_const (half_pos hC))
  filter_upwards [hg.eventually (lt_mem_nhds (half_lt_self hC)),
    hf.eventually (eventually_ge_at_top 0)]with x hg hf using mul_le_mul_of_nonneg_left hg.le hf
#align filter.tendsto.at_top_mul Filter.Tendsto.atTop_mul

/-- In a linearly ordered field with the order topology, if `f` tends to a positive constant `C` and
`g` tends to `at_top` then `f * g` tends to `at_top`. -/
theorem Filter.Tendsto.mul_atTop {C : Œ±} (hC : 0 < C) (hf : Tendsto f l (ùìù C))
    (hg : Tendsto g l atTop) : Tendsto (fun x => f x * g x) l atTop := by
  simpa only [mul_comm] using hg.at_top_mul hC hf
#align filter.tendsto.mul_at_top Filter.Tendsto.mul_atTop

/-- In a linearly ordered field with the order topology, if `f` tends to `at_top` and `g` tends to
a negative constant `C` then `f * g` tends to `at_bot`. -/
theorem Filter.Tendsto.atTop_mul_neg {C : Œ±} (hC : C < 0) (hf : Tendsto f l atTop)
    (hg : Tendsto g l (ùìù C)) : Tendsto (fun x => f x * g x) l atBot := by
  simpa only [(¬∑ ‚àò ¬∑), neg_mul_eq_mul_neg, neg_neg] using
    tendsto_neg_at_top_at_bot.comp (hf.at_top_mul (neg_pos.2 hC) hg.neg)
#align filter.tendsto.at_top_mul_neg Filter.Tendsto.atTop_mul_neg

/-- In a linearly ordered field with the order topology, if `f` tends to a negative constant `C` and
`g` tends to `at_top` then `f * g` tends to `at_bot`. -/
theorem Filter.Tendsto.neg_mul_atTop {C : Œ±} (hC : C < 0) (hf : Tendsto f l (ùìù C))
    (hg : Tendsto g l atTop) : Tendsto (fun x => f x * g x) l atBot := by
  simpa only [mul_comm] using hg.at_top_mul_neg hC hf
#align filter.tendsto.neg_mul_at_top Filter.Tendsto.neg_mul_atTop

/-- In a linearly ordered field with the order topology, if `f` tends to `at_bot` and `g` tends to
a positive constant `C` then `f * g` tends to `at_bot`. -/
theorem Filter.Tendsto.atBot_mul {C : Œ±} (hC : 0 < C) (hf : Tendsto f l atBot)
    (hg : Tendsto g l (ùìù C)) : Tendsto (fun x => f x * g x) l atBot := by
  simpa [(¬∑ ‚àò ¬∑)] using
    tendsto_neg_at_top_at_bot.comp ((tendsto_neg_at_bot_at_top.comp hf).atTop_mul hC hg)
#align filter.tendsto.at_bot_mul Filter.Tendsto.atBot_mul

/-- In a linearly ordered field with the order topology, if `f` tends to `at_bot` and `g` tends to
a negative constant `C` then `f * g` tends to `at_top`. -/
theorem Filter.Tendsto.atBot_mul_neg {C : Œ±} (hC : C < 0) (hf : Tendsto f l atBot)
    (hg : Tendsto g l (ùìù C)) : Tendsto (fun x => f x * g x) l atTop := by
  simpa [(¬∑ ‚àò ¬∑)] using
    tendsto_neg_at_bot_at_top.comp ((tendsto_neg_at_bot_at_top.comp hf).atTop_mul_neg hC hg)
#align filter.tendsto.at_bot_mul_neg Filter.Tendsto.atBot_mul_neg

/-- In a linearly ordered field with the order topology, if `f` tends to a positive constant `C` and
`g` tends to `at_bot` then `f * g` tends to `at_bot`. -/
theorem Filter.Tendsto.mul_atBot {C : Œ±} (hC : 0 < C) (hf : Tendsto f l (ùìù C))
    (hg : Tendsto g l atBot) : Tendsto (fun x => f x * g x) l atBot := by
  simpa only [mul_comm] using hg.at_bot_mul hC hf
#align filter.tendsto.mul_at_bot Filter.Tendsto.mul_atBot

/-- In a linearly ordered field with the order topology, if `f` tends to a negative constant `C` and
`g` tends to `at_bot` then `f * g` tends to `at_top`. -/
theorem Filter.Tendsto.neg_mul_atBot {C : Œ±} (hC : C < 0) (hf : Tendsto f l (ùìù C))
    (hg : Tendsto g l atBot) : Tendsto (fun x => f x * g x) l atTop := by
  simpa only [mul_comm] using hg.at_bot_mul_neg hC hf
#align filter.tendsto.neg_mul_at_bot Filter.Tendsto.neg_mul_atBot

/-- The function `x ‚Ü¶ x‚Åª¬π` tends to `+‚àû` on the right of `0`. -/
theorem tendsto_inv_zero_atTop : Tendsto (fun x : Œ± => x‚Åª¬π) (ùìù[>] (0 : Œ±)) atTop :=
  by
  refine' (at_top_basis' 1).tendsto_right_iff.2 fun b hb => _
  have hb' : 0 < b := by positivity
  filter_upwards [Ioc_mem_nhdsWithin_Ioi
      ‚ü®le_rfl, inv_pos.2 hb'‚ü©]with x hx using(le_inv hx.1 hb').1 hx.2
#align tendsto_inv_zero_at_top tendsto_inv_zero_atTop

/-- The function `r ‚Ü¶ r‚Åª¬π` tends to `0` on the right as `r ‚Üí +‚àû`. -/
theorem tendsto_inv_atTop_zero' : Tendsto (fun r : Œ± => r‚Åª¬π) atTop (ùìù[>] (0 : Œ±)) :=
  by
  refine'
    (has_basis.tendsto_iff at_top_basis ‚ü®fun s => mem_nhdsWithin_Ioi_iff_exists_Ioc_subset‚ü©).2 _
  refine' fun b hb => ‚ü®b‚Åª¬π, trivial, fun x hx => _‚ü©
  have : 0 < x := lt_of_lt_of_le (inv_pos.2 hb) hx
  exact ‚ü®inv_pos.2 this, (inv_le this hb).2 hx‚ü©
#align tendsto_inv_at_top_zero' tendsto_inv_atTop_zero'

theorem tendsto_inv_atTop_zero : Tendsto (fun r : Œ± => r‚Åª¬π) atTop (ùìù 0) :=
  tendsto_inv_atTop_zero'.mono_right inf_le_left
#align tendsto_inv_at_top_zero tendsto_inv_atTop_zero

theorem Filter.Tendsto.div_atTop [ContinuousMul Œ±] {f g : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} {a : Œ±}
    (h : Tendsto f l (ùìù a)) (hg : Tendsto g l atTop) : Tendsto (fun x => f x / g x) l (ùìù 0) :=
  by
  simp only [div_eq_mul_inv]
  exact mul_zero a ‚ñ∏ h.mul (tendsto_inv_at_top_zero.comp hg)
#align filter.tendsto.div_at_top Filter.Tendsto.div_atTop

theorem Filter.Tendsto.inv_tendsto_atTop (h : Tendsto f l atTop) : Tendsto f‚Åª¬π l (ùìù 0) :=
  tendsto_inv_atTop_zero.comp h
#align filter.tendsto.inv_tendsto_at_top Filter.Tendsto.inv_tendsto_atTop

theorem Filter.Tendsto.inv_tendsto_zero (h : Tendsto f l (ùìù[>] 0)) : Tendsto f‚Åª¬π l atTop :=
  tendsto_inv_zero_atTop.comp h
#align filter.tendsto.inv_tendsto_zero Filter.Tendsto.inv_tendsto_zero

/-- The function `x^(-n)` tends to `0` at `+‚àû` for any positive natural `n`.
A version for positive real powers exists as `tendsto_rpow_neg_at_top`. -/
theorem tendsto_pow_neg_atTop {n : ‚Ñï} (hn : n ‚â† 0) :
    Tendsto (fun x : Œ± => x ^ (-(n : ‚Ñ§))) atTop (ùìù 0) := by
  simpa only [zpow_neg, zpow_ofNat] using (@tendsto_pow_at_top Œ± _ _ hn).inv_tendsto_atTop
#align tendsto_pow_neg_at_top tendsto_pow_neg_atTop

theorem tendsto_zpow_atTop_zero {n : ‚Ñ§} (hn : n < 0) : Tendsto (fun x : Œ± => x ^ n) atTop (ùìù 0) :=
  by
  lift -n to ‚Ñï using le_of_lt (neg_pos.mpr hn) with N
  rw [‚Üê neg_pos, ‚Üê h, Nat.cast_pos] at hn
  simpa only [h, neg_neg] using tendsto_pow_neg_atTop hn.ne'
#align tendsto_zpow_at_top_zero tendsto_zpow_atTop_zero

theorem tendsto_const_mul_zpow_atTop_zero {n : ‚Ñ§} {c : Œ±} (hn : n < 0) :
    Tendsto (fun x => c * x ^ n) atTop (ùìù 0) :=
  mul_zero c ‚ñ∏ Filter.Tendsto.const_mul c (tendsto_zpow_atTop_zero hn)
#align tendsto_const_mul_zpow_at_top_zero tendsto_const_mul_zpow_atTop_zero

theorem tendsto_const_mul_pow_nhds_iff' {n : ‚Ñï} {c d : Œ±} :
    Tendsto (fun x : Œ± => c * x ^ n) atTop (ùìù d) ‚Üî (c = 0 ‚à® n = 0) ‚àß c = d :=
  by
  rcases eq_or_ne n 0 with (rfl | hn)
  ¬∑ simp [tendsto_const_nhds_iff]
  rcases lt_trichotomy c 0 with (hc | rfl | hc)
  ¬∑ have := tendsto_const_mul_pow_at_bot_iff.2 ‚ü®hn, hc‚ü©
    simp [not_tendsto_nhds_of_tendsto_atBot this, hc.ne, hn]
  ¬∑ simp [tendsto_const_nhds_iff]
  ¬∑ have := tendsto_const_mul_pow_at_top_iff.2 ‚ü®hn, hc‚ü©
    simp [not_tendsto_nhds_of_tendsto_atTop this, hc.ne', hn]
#align tendsto_const_mul_pow_nhds_iff' tendsto_const_mul_pow_nhds_iff'

theorem tendsto_const_mul_pow_nhds_iff {n : ‚Ñï} {c d : Œ±} (hc : c ‚â† 0) :
    Tendsto (fun x : Œ± => c * x ^ n) atTop (ùìù d) ‚Üî n = 0 ‚àß c = d := by
  simp [tendsto_const_mul_pow_nhds_iff', hc]
#align tendsto_const_mul_pow_nhds_iff tendsto_const_mul_pow_nhds_iff

theorem tendsto_const_mul_zpow_atTop_nhds_iff {n : ‚Ñ§} {c d : Œ±} (hc : c ‚â† 0) :
    Tendsto (fun x : Œ± => c * x ^ n) atTop (ùìù d) ‚Üî n = 0 ‚àß c = d ‚à® n < 0 ‚àß d = 0 :=
  by
  refine' ‚ü®fun h => _, fun h => _‚ü©
  ¬∑ by_cases hn : 0 ‚â§ n
    ¬∑ lift n to ‚Ñï using hn
      simp only [zpow_ofNat] at h
      rw [tendsto_const_mul_pow_nhds_iff hc, ‚Üê Int.coe_nat_eq_zero] at h
      exact Or.inl h
    ¬∑ rw [not_le] at hn
      refine' Or.inr ‚ü®hn, tendsto_nhds_unique h (tendsto_const_mul_zpow_atTop_zero hn)‚ü©
  ¬∑ cases h
    ¬∑ simp only [h.left, h.right, zpow_zero, mul_one]
      exact tendsto_const_nhds
    ¬∑ exact h.2.symm ‚ñ∏ tendsto_const_mul_zpow_atTop_zero h.1
#align tendsto_const_mul_zpow_at_top_nhds_iff tendsto_const_mul_zpow_atTop_nhds_iff

-- TODO: With a different proof, this could be possibly generalised to only require a
-- `linear_ordered_semifield` instance, which would also remove the need for the
-- `nnreal` instance of `has_continuous_inv‚ÇÄ`.
-- see Note [lower instance priority]
instance (priority := 100) LinearOrderedField.to_topologicalDivisionRing : TopologicalDivisionRing Œ±
    where continuousAt_inv‚ÇÄ :=
    by
    suffices ‚àÄ {x : Œ±}, 0 < x ‚Üí ContinuousAt Inv.inv x
      by
      intro x hx
      cases hx.symm.lt_or_lt
      ¬∑ exact this h
      convert (this <| neg_pos.mpr h).neg.comp continuous_neg.continuous_at
      ext
      simp [neg_inv]
    intro t ht
    rw [ContinuousAt,
      (nhds_basis_Ioo_pos t).tendsto_iff‚Çì <| nhds_basis_Ioo_pos_of_pos <| inv_pos.2 ht]
    rintro Œµ ‚ü®hŒµ : Œµ > 0, hŒµt : Œµ ‚â§ t‚Åª¬π‚ü©
    refine' ‚ü®min (t ^ 2 * Œµ / 2) (t / 2), by positivity, fun x h => _‚ü©
    have hx : t / 2 < x := by
      rw [Set.mem_Ioo, sub_lt_comm, lt_min_iff] at h
      nlinarith
    have hx' : 0 < x := (half_pos ht).trans hx
    have aux : 0 < 2 / t ^ 2 := by positivity
    rw [Set.mem_Ioo, ‚Üê sub_lt_iff_lt_add', sub_lt_comm, ‚Üê abs_sub_lt_iff] at h‚ä¢
    rw [inv_sub_inv ht.ne' hx'.ne', abs_div, div_eq_mul_inv]
    suffices (|t * x|)‚Åª¬π < 2 / t ^ 2 by
      rw [‚Üê abs_neg, neg_sub]
      refine' (mul_lt_mul'' h this (by positivity) (by positivity)).trans_le _
      rw [mul_comm, mul_min_of_nonneg _ _ aux.le]
      apply min_le_of_left_le
      rw [‚Üê mul_div, ‚Üê mul_assoc, div_mul_cancel _ (sq_pos_of_pos ht).ne',
        mul_div_cancel' Œµ two_ne_zero]
    refine' inv_lt_of_inv_lt aux _
    rw [inv_div, abs_of_pos <| mul_pos ht hx', sq, ‚Üê mul_div_assoc']
    exact mul_lt_mul_of_pos_left hx ht
#align linear_ordered_field.to_topological_division_ring LinearOrderedField.to_topologicalDivisionRing

theorem nhdsWithin_pos_comap_mul_left {x : Œ±} (hx : 0 < x) :
    comap (fun Œµ => x * Œµ) (ùìù[>] 0) = ùìù[>] 0 :=
  by
  suffices ‚àÄ {x : Œ±} (hx : 0 < x), ùìù[>] 0 ‚â§ comap (fun Œµ => x * Œµ) (ùìù[>] 0)
    by
    refine' le_antisymm _ (this hx)
    have hr : ùìù[>] (0 : Œ±) = ((ùìù[>] (0 : Œ±)).comap fun Œµ => x‚Åª¬π * Œµ).comap fun Œµ => x * Œµ := by
      simp [comap_comap, inv_mul_cancel hx.ne.symm, comap_id, one_mul_eq_id]
    conv_rhs => rw [hr]
    rw [comap_le_comap_iff
        (by convert univ_mem <;> exact (mul_left_surjective‚ÇÄ hx.ne.symm).range_eq)]
    exact this (inv_pos.mpr hx)
  intro x hx
  convert nhdsWithin_le_comap (continuous_mul_left x).ContinuousWithinAt
  ¬∑ exact (mul_zero _).symm
  ¬∑ rw [image_const_mul_Ioi_zero hx]
#align nhds_within_pos_comap_mul_left nhdsWithin_pos_comap_mul_left

theorem eventually_nhdsWithin_pos_mul_left {x : Œ±} (hx : 0 < x) {p : Œ± ‚Üí Prop}
    (h : ‚àÄ·∂† Œµ in ùìù[>] 0, p Œµ) : ‚àÄ·∂† Œµ in ùìù[>] 0, p (x * Œµ) :=
  by
  convert h.comap fun Œµ => x * Œµ
  exact (nhdsWithin_pos_comap_mul_left hx).symm
#align eventually_nhds_within_pos_mul_left eventually_nhdsWithin_pos_mul_left

