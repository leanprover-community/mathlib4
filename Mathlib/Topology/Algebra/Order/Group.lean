/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Topology.Algebra.Group.Basic
import Mathlib.Topology.Order.LeftRightNhds

/-!
# Topology on a linear ordered additive commutative group

In this file we prove that a linear ordered additive commutative group with order topology is a
topological group. We also prove continuity of `abs : G ‚Üí G` and provide convenience lemmas like
`ContinuousAt.abs`.
-/


open Set Filter Function

open scoped Topology

variable {Œ± G : Type*} [TopologicalSpace G] [LinearOrderedAddCommGroup G] [OrderTopology G]
variable {l : Filter Œ±} {f g : Œ± ‚Üí G}

-- see Note [lower instance priority]
instance (priority := 100) LinearOrderedAddCommGroup.topologicalAddGroup :
    TopologicalAddGroup G where
  continuous_add := by
    refine continuous_iff_continuousAt.2 ?_
    rintro ‚ü®a, b‚ü©
    refine LinearOrderedAddCommGroup.tendsto_nhds.2 fun Œµ Œµ0 => ?_
    rcases dense_or_discrete 0 Œµ with (‚ü®Œ¥, Œ¥0, Œ¥Œµ‚ü© | ‚ü®_h‚ÇÅ, h‚ÇÇ‚ü©)
    ¬∑ -- If there exists `Œ¥ ‚àà (0, Œµ)`, then we choose `Œ¥`-nhd of `a` and `(Œµ-Œ¥)`-nhd of `b`
      filter_upwards [(eventually_abs_sub_lt a Œ¥0).prod_nhds
          (eventually_abs_sub_lt b (sub_pos.2 Œ¥Œµ))]
      rintro ‚ü®x, y‚ü© ‚ü®hx : |x - a| < Œ¥, hy : |y - b| < Œµ - Œ¥‚ü©
      rw [add_sub_add_comm]
      calc
        |x - a + (y - b)| ‚â§ |x - a| + |y - b| := abs_add _ _
        _ < Œ¥ + (Œµ - Œ¥) := add_lt_add hx hy
        _ = Œµ := add_sub_cancel _ _
    ¬∑ -- Otherwise `Œµ`-nhd of each point `a` is `{a}`
      have hŒµ : ‚àÄ {x y}, |x - y| < Œµ ‚Üí x = y := by
        intro x y h
        simpa [sub_eq_zero] using h‚ÇÇ _ h
      filter_upwards [(eventually_abs_sub_lt a Œµ0).prod_nhds (eventually_abs_sub_lt b Œµ0)]
      rintro ‚ü®x, y‚ü© ‚ü®hx : |x - a| < Œµ, hy : |y - b| < Œµ‚ü©
      simpa [hŒµ hx, hŒµ hy]
  continuous_neg :=
    continuous_iff_continuousAt.2 fun a =>
      LinearOrderedAddCommGroup.tendsto_nhds.2 fun Œµ Œµ0 =>
        (eventually_abs_sub_lt a Œµ0).mono fun x hx => by rwa [neg_sub_neg, abs_sub_comm]

@[continuity]
theorem continuous_abs : Continuous (abs : G ‚Üí G) :=
  continuous_id.max continuous_neg

protected theorem Filter.Tendsto.abs {a : G} (h : Tendsto f l (ùìù a)) :
    Tendsto (fun x => |f x|) l (ùìù |a|) :=
  (continuous_abs.tendsto _).comp h

theorem tendsto_zero_iff_abs_tendsto_zero (f : Œ± ‚Üí G) :
    Tendsto f l (ùìù 0) ‚Üî Tendsto (abs ‚àò f) l (ùìù 0) := by
  refine ‚ü®fun h => (abs_zero : |(0 : G)| = 0) ‚ñ∏ h.abs, fun h => ?_‚ü©
  have : Tendsto (fun a => -|f a|) l (ùìù 0) := (neg_zero : -(0 : G) = 0) ‚ñ∏ h.neg
  exact
    tendsto_of_tendsto_of_tendsto_of_le_of_le this h (fun x => neg_abs_le <| f x) fun x =>
      le_abs_self <| f x

variable [TopologicalSpace Œ±] {a : Œ±} {s : Set Œ±}

@[fun_prop]
protected theorem Continuous.abs (h : Continuous f) : Continuous fun x => |f x| :=
  continuous_abs.comp h

@[fun_prop]
protected theorem ContinuousAt.abs (h : ContinuousAt f a) : ContinuousAt (fun x => |f x|) a :=
  Filter.Tendsto.abs h

protected theorem ContinuousWithinAt.abs (h : ContinuousWithinAt f s a) :
    ContinuousWithinAt (fun x => |f x|) s a :=
  Filter.Tendsto.abs h

@[fun_prop]
protected theorem ContinuousOn.abs (h : ContinuousOn f s) : ContinuousOn (fun x => |f x|) s :=
  fun x hx => (h x hx).abs

theorem tendsto_abs_nhdsWithin_zero : Tendsto (abs : G ‚Üí G) (ùìù[‚â†] 0) (ùìù[>] 0) :=
  (continuous_abs.tendsto' (0 : G) 0 abs_zero).inf <|
    tendsto_principal_principal.2 fun _x => abs_pos.2

/-- In a linearly ordered additive group, the integer multiples of an element are dense
iff they are the whole group. -/
theorem denseRange_zsmul_iff_surjective {a : G} :
    DenseRange (¬∑ ‚Ä¢ a : ‚Ñ§ ‚Üí G) ‚Üî Surjective (¬∑ ‚Ä¢ a : ‚Ñ§ ‚Üí G) := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ h.denseRange‚ü©
  wlog ha‚ÇÄ : 0 < a generalizing a
  ¬∑ simp only [‚Üê range_eq_univ, DenseRange] at *
    rcases (not_lt.1 ha‚ÇÄ).eq_or_lt with rfl | hlt
    ¬∑ simpa only [smul_zero, range_const, dense_iff_closure_eq, closure_singleton] using h
    ¬∑ have H : range (¬∑ ‚Ä¢ -a : ‚Ñ§ ‚Üí G) = range (¬∑ ‚Ä¢ a : ‚Ñ§ ‚Üí G) := by
        simpa only [smul_neg, ‚Üê neg_smul] using neg_surjective.range_comp (¬∑ ‚Ä¢ a)
      rw [‚Üê H]
      apply this <;> simpa only [H, neg_pos]
  intro b
  obtain ‚ü®m, hm, hm'‚ü© : ‚àÉ m : ‚Ñ§, m ‚Ä¢ a ‚àà Ioo b (b + a + a) := by
    have hne : (Ioo b (b + a + a)).Nonempty := ‚ü®b + a, by simpa‚ü©
    simpa using h.exists_mem_open isOpen_Ioo hne
  rcases eq_or_ne b ((m - 1) ‚Ä¢ a) with rfl | hne; ¬∑ simp
  suffices (Ioo (m ‚Ä¢ a) ((m + 1) ‚Ä¢ a)).Nonempty by
    rcases h.exists_mem_open isOpen_Ioo this with ‚ü®l, hl‚ü©
    have : m < l ‚àß l < m + 1 := by simpa [zsmul_lt_zsmul_iff_left ha‚ÇÄ] using hl
    omega
  rcases hne.lt_or_lt with hlt | hlt
  ¬∑ refine ‚ü®b + a + a, hm', ?_‚ü©
    simpa only [add_smul, sub_smul, one_smul, lt_sub_iff_add_lt, add_lt_add_iff_right] using hlt
  ¬∑ use b + a
    simp only [mem_Ioo, add_smul, sub_smul, one_smul, add_lt_add_iff_right] at hlt ‚ä¢
    exact ‚ü®sub_lt_iff_lt_add.1 hlt, hm‚ü©

/-- In a nontrivial densely linearly ordered additive group,
the integer multiples of an element can't be dense. -/
theorem not_denseRange_zsmul [Nontrivial G] [DenselyOrdered G] {a : G} :
    ¬¨DenseRange (¬∑ ‚Ä¢ a : ‚Ñ§ ‚Üí G) :=
  denseRange_zsmul_iff_surjective.not.mpr fun h ‚Ü¶
    not_isAddCyclic_of_denselyOrdered G ‚ü®‚ü®a, h‚ü©‚ü©
