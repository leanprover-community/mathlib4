/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import Mathlib.Topology.UniformSpace.DiscreteUniformity
import Mathlib.Topology.Algebra.Group.Basic

/-!
# Uniform structure on topological groups

This file defines uniform groups and its additive counterpart. These typeclasses should be
preferred over using `[TopologicalSpace Œ±] [IsTopologicalGroup Œ±]` since every topological
group naturally induces a uniform structure.

## Main declarations
* `IsUniformGroup` and `IsUniformAddGroup`: Multiplicative and additive uniform groups,
  i.e., groups with uniformly continuous `(*)` and `(‚Åª¬π)` / `(+)` and `(-)`.

## Main results

* `IsTopologicalAddGroup.rightUniformSpace` and `comm_topologicalAddGroup_is_uniform` can be used
  to construct a canonical uniformity for a topological additive group.

See `Mathlib/Topology/Algebra/IsUniformGroup/Basic.lean` for further results.
-/

assert_not_exists Cauchy

noncomputable section

open Uniformity Topology Filter Pointwise

section IsUniformGroup

open Filter Set

variable {Œ± : Type*} {Œ≤ : Type*}

/-- A uniform group is a group in which multiplication and inversion are uniformly continuous. -/
class IsUniformGroup (Œ± : Type*) [UniformSpace Œ±] [Group Œ±] : Prop where
  uniformContinuous_div : UniformContinuous fun p : Œ± √ó Œ± => p.1 / p.2

@[deprecated (since := "2025-03-26")] alias UniformGroup := IsUniformGroup

/-- A uniform additive group is an additive group in which addition
  and negation are uniformly continuous. -/
class IsUniformAddGroup (Œ± : Type*) [UniformSpace Œ±] [AddGroup Œ±] : Prop where
  uniformContinuous_sub : UniformContinuous fun p : Œ± √ó Œ± => p.1 - p.2

@[deprecated (since := "2025-03-26")] alias UniformAddGroup := IsUniformAddGroup

attribute [to_additive] IsUniformGroup

@[to_additive]
theorem IsUniformGroup.mk' {Œ±} [UniformSpace Œ±] [Group Œ±]
    (h‚ÇÅ : UniformContinuous fun p : Œ± √ó Œ± => p.1 * p.2) (h‚ÇÇ : UniformContinuous fun p : Œ± => p‚Åª¬π) :
    IsUniformGroup Œ± :=
  ‚ü®by simpa only [div_eq_mul_inv] using
    h‚ÇÅ.comp (uniformContinuous_fst.prodMk (h‚ÇÇ.comp uniformContinuous_snd))‚ü©

variable [UniformSpace Œ±] [Group Œ±] [IsUniformGroup Œ±]

@[to_additive]
theorem uniformContinuous_div : UniformContinuous fun p : Œ± √ó Œ± => p.1 / p.2 :=
  IsUniformGroup.uniformContinuous_div

@[to_additive]
theorem UniformContinuous.div [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (hg : UniformContinuous g) : UniformContinuous fun x => f x / g x :=
  uniformContinuous_div.comp (hf.prodMk hg)

@[to_additive]
theorem UniformContinuous.inv [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f) :
    UniformContinuous fun x => (f x)‚Åª¬π := by
  have : UniformContinuous fun x => 1 / f x := uniformContinuous_const.div hf
  simp_all

@[to_additive]
theorem uniformContinuous_inv : UniformContinuous fun x : Œ± => x‚Åª¬π :=
  uniformContinuous_id.inv

@[to_additive]
theorem UniformContinuous.mul [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (hg : UniformContinuous g) : UniformContinuous fun x => f x * g x := by
  have : UniformContinuous fun x => f x / (g x)‚Åª¬π := hf.div hg.inv
  simp_all

@[to_additive]
theorem uniformContinuous_mul : UniformContinuous fun p : Œ± √ó Œ± => p.1 * p.2 :=
  uniformContinuous_fst.mul uniformContinuous_snd

@[to_additive]
theorem UniformContinuous.mul_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (a : Œ±) : UniformContinuous fun x ‚Ü¶ f x * a :=
  hf.mul uniformContinuous_const

@[to_additive]
theorem UniformContinuous.const_mul [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (a : Œ±) : UniformContinuous fun x ‚Ü¶ a * f x :=
  uniformContinuous_const.mul hf

@[to_additive]
theorem uniformContinuous_mul_left (a : Œ±) : UniformContinuous fun b : Œ± => a * b :=
  uniformContinuous_id.const_mul _

@[to_additive]
theorem uniformContinuous_mul_right (a : Œ±) : UniformContinuous fun b : Œ± => b * a :=
  uniformContinuous_id.mul_const _

@[to_additive]
theorem UniformContinuous.div_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (a : Œ±) : UniformContinuous fun x ‚Ü¶ f x / a :=
  hf.div uniformContinuous_const

@[to_additive]
theorem uniformContinuous_div_const (a : Œ±) : UniformContinuous fun b : Œ± => b / a :=
  uniformContinuous_id.div_const _

@[to_additive]
theorem Filter.Tendsto.uniformity_mul {Œπ : Type*} {f g : Œπ ‚Üí Œ± √ó Œ±} {l : Filter Œπ}
    (hf : Tendsto f l (ùì§ Œ±)) (hg : Tendsto g l (ùì§ Œ±)) :
    Tendsto (f * g) l (ùì§ Œ±) :=
  have : Tendsto (fun (p : (Œ± √ó Œ±) √ó (Œ± √ó Œ±)) ‚Ü¶ p.1 * p.2) (ùì§ Œ± √óÀ¢ ùì§ Œ±) (ùì§ Œ±) := by
    simpa [UniformContinuous, uniformity_prod_eq_prod] using uniformContinuous_mul (Œ± := Œ±)
  this.comp (hf.prodMk hg)

@[to_additive UniformContinuous.const_nsmul]
theorem UniformContinuous.pow_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f) :
    ‚àÄ n : ‚Ñï, UniformContinuous fun x => f x ^ n
  | 0 => by
    simp_rw [pow_zero]
    exact uniformContinuous_const
  | n + 1 => by
    simp_rw [pow_succ']
    exact hf.mul (hf.pow_const n)

@[to_additive uniformContinuous_const_nsmul]
theorem uniformContinuous_pow_const (n : ‚Ñï) : UniformContinuous fun x : Œ± => x ^ n :=
  uniformContinuous_id.pow_const n

@[to_additive UniformContinuous.const_zsmul]
theorem UniformContinuous.zpow_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f) :
    ‚àÄ n : ‚Ñ§, UniformContinuous fun x => f x ^ n
  | (n : ‚Ñï) => by
    simp_rw [zpow_natCast]
    exact hf.pow_const _
  | Int.negSucc n => by
    simp_rw [zpow_negSucc]
    exact (hf.pow_const _).inv

@[to_additive uniformContinuous_const_zsmul]
theorem uniformContinuous_zpow_const (n : ‚Ñ§) : UniformContinuous fun x : Œ± => x ^ n :=
  uniformContinuous_id.zpow_const n

@[to_additive]
instance (priority := 10) IsUniformGroup.to_topologicalGroup : IsTopologicalGroup Œ± where
  continuous_mul := uniformContinuous_mul.continuous
  continuous_inv := uniformContinuous_inv.continuous

@[deprecated (since := "2025-03-31")] alias UniformGroup.to_topologicalAddGroup :=
  IsUniformAddGroup.to_topologicalAddGroup
@[to_additive existing, deprecated
  (since := "2025-03-31")] alias
  UniformGroup.to_topologicalGroup := IsUniformGroup.to_topologicalGroup

@[to_additive]
instance Prod.instIsUniformGroup [UniformSpace Œ≤] [Group Œ≤] [IsUniformGroup Œ≤] :
    IsUniformGroup (Œ± √ó Œ≤) :=
  ‚ü®((uniformContinuous_fst.comp uniformContinuous_fst).div
          (uniformContinuous_fst.comp uniformContinuous_snd)).prodMk
      ((uniformContinuous_snd.comp uniformContinuous_fst).div
        (uniformContinuous_snd.comp uniformContinuous_snd))‚ü©

@[deprecated (since := "2025-03-31")] alias Prod.instUniformAddGroup :=
  Prod.instIsUniformAddGroup
@[to_additive existing, deprecated
  (since := "2025-03-31")] alias Prod.instUniformGroup := Prod.instIsUniformGroup

@[to_additive]
theorem uniformity_translate_mul (a : Œ±) : ((ùì§ Œ±).map fun x : Œ± √ó Œ± => (x.1 * a, x.2 * a)) = ùì§ Œ± :=
  le_antisymm (uniformContinuous_id.mul uniformContinuous_const)
    (calc
      ùì§ Œ± =
          ((ùì§ Œ±).map fun x : Œ± √ó Œ± => (x.1 * a‚Åª¬π, x.2 * a‚Åª¬π)).map fun x : Œ± √ó Œ± =>
            (x.1 * a, x.2 * a) := by simp [Filter.map_map, Function.comp_def]
      _ ‚â§ (ùì§ Œ±).map fun x : Œ± √ó Œ± => (x.1 * a, x.2 * a) :=
        Filter.map_mono (uniformContinuous_id.mul uniformContinuous_const)
      )

/-- The discrete uniformity makes a group a `IsUniformGroup. -/
@[to_additive /-- The discrete uniformity makes an additive group a `IsUniformAddGroup`. -/]
instance [UniformSpace Œ≤] [Group Œ≤] [DiscreteUniformity Œ≤] : IsUniformGroup Œ≤ where
  uniformContinuous_div := DiscreteUniformity.uniformContinuous (Œ≤ √ó Œ≤) fun p ‚Ü¶ p.1 / p.2

namespace MulOpposite

@[to_additive]
instance : IsUniformGroup Œ±·µê·µí·µñ :=
  ‚ü®uniformContinuous_op.comp
      ((uniformContinuous_unop.comp uniformContinuous_snd).inv.mul <|
        uniformContinuous_unop.comp uniformContinuous_fst)‚ü©

end MulOpposite

section LatticeOps

variable [Group Œ≤]

@[to_additive]
theorem isUniformGroup_sInf {us : Set (UniformSpace Œ≤)} (h : ‚àÄ u ‚àà us, @IsUniformGroup Œ≤ u _) :
    @IsUniformGroup Œ≤ (sInf us) _ :=
  @IsUniformGroup.mk Œ≤ (_) _ <|
    uniformContinuous_sInf_rng.mpr fun u hu =>
      uniformContinuous_sInf_dom‚ÇÇ hu hu (@IsUniformGroup.uniformContinuous_div Œ≤ u _ (h u hu))

@[deprecated (since := "2025-03-31")] alias uniformAddGroup_sInf := isUniformAddGroup_sInf
@[to_additive existing, deprecated
  (since := "2025-03-31")] alias uniformGroup_sInf := isUniformGroup_sInf

@[to_additive]
theorem isUniformGroup_iInf {Œπ : Sort*} {us' : Œπ ‚Üí UniformSpace Œ≤}
    (h' : ‚àÄ i, @IsUniformGroup Œ≤ (us' i) _) : @IsUniformGroup Œ≤ (‚®Ö i, us' i) _ := by
  rw [‚Üê sInf_range]
  exact isUniformGroup_sInf (Set.forall_mem_range.mpr h')

@[deprecated (since := "2025-03-31")] alias uniformAddGroup_iInf := isUniformAddGroup_iInf
@[to_additive existing, deprecated
  (since := "2025-03-31")] alias uniformGroup_iInf := isUniformGroup_iInf

@[to_additive]
theorem isUniformGroup_inf {u‚ÇÅ u‚ÇÇ : UniformSpace Œ≤} (h‚ÇÅ : @IsUniformGroup Œ≤ u‚ÇÅ _)
    (h‚ÇÇ : @IsUniformGroup Œ≤ u‚ÇÇ _) : @IsUniformGroup Œ≤ (u‚ÇÅ ‚äì u‚ÇÇ) _ := by
  rw [inf_eq_iInf]
  refine isUniformGroup_iInf fun b => ?_
  cases b <;> assumption

@[deprecated (since := "2025-03-31")] alias uniformAddGroup_inf := isUniformAddGroup_inf
@[to_additive existing, deprecated
  (since := "2025-03-31")] alias uniformGroup_inf := isUniformGroup_inf

end LatticeOps

section

variable (Œ±)

@[to_additive]
theorem uniformity_eq_comap_nhds_one : ùì§ Œ± = comap (fun x : Œ± √ó Œ± => x.2 / x.1) (ùìù (1 : Œ±)) := by
  rw [nhds_eq_comap_uniformity, Filter.comap_comap]
  refine le_antisymm (Filter.map_le_iff_le_comap.1 ?_) ?_
  ¬∑ intro s hs
    rcases mem_uniformity_of_uniformContinuous_invariant uniformContinuous_div hs with ‚ü®t, ht, hts‚ü©
    refine mem_map.2 (mem_of_superset ht ?_)
    rintro ‚ü®a, b‚ü©
    simpa [subset_def] using hts a b a
  ¬∑ intro s hs
    rcases mem_uniformity_of_uniformContinuous_invariant uniformContinuous_mul hs with ‚ü®t, ht, hts‚ü©
    refine ‚ü®_, ht, ?_‚ü©
    rintro ‚ü®a, b‚ü©
    simpa [subset_def] using hts 1 (b / a) a

@[to_additive]
theorem uniformity_eq_comap_nhds_one_swapped :
    ùì§ Œ± = comap (fun x : Œ± √ó Œ± => x.1 / x.2) (ùìù (1 : Œ±)) := by
  rw [‚Üê comap_swap_uniformity, uniformity_eq_comap_nhds_one, comap_comap]
  rfl

@[to_additive]
theorem IsUniformGroup.ext {G : Type*} [Group G] {u v : UniformSpace G} (hu : @IsUniformGroup G u _)
    (hv : @IsUniformGroup G v _)
    (h : @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1) : u = v :=
  UniformSpace.ext <| by
    rw [@uniformity_eq_comap_nhds_one _ u _ hu, @uniformity_eq_comap_nhds_one _ v _ hv, h]

@[deprecated (since := "2025-03-31")] alias UniformAddGroup.ext := IsUniformAddGroup.ext
@[to_additive existing UniformAddGroup.ext, deprecated (since := "2025-03-31")] alias
  UniformGroup.ext := IsUniformGroup.ext

@[to_additive]
theorem IsUniformGroup.ext_iff {G : Type*} [Group G] {u v : UniformSpace G}
    (hu : @IsUniformGroup G u _) (hv : @IsUniformGroup G v _) :
    u = v ‚Üî @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1 :=
  ‚ü®fun h => h ‚ñ∏ rfl, hu.ext hv‚ü©

@[deprecated (since := "2025-03-31")] alias UniformAddGroup.ext_iff :=
  IsUniformAddGroup.ext_iff
@[to_additive existing UniformAddGroup.ext_iff, deprecated (since := "2025-03-31")] alias
  UniformGroup.ext_iff := IsUniformGroup.ext_iff

variable {Œ±}

@[to_additive]
theorem IsUniformGroup.uniformity_countably_generated [(ùìù (1 : Œ±)).IsCountablyGenerated] :
    (ùì§ Œ±).IsCountablyGenerated := by
  rw [uniformity_eq_comap_nhds_one]
  exact Filter.comap.isCountablyGenerated _ _

@[deprecated (since := "2025-03-31")] alias UniformAddGroup.uniformity_countably_generated :=
  IsUniformAddGroup.uniformity_countably_generated
@[to_additive existing UniformAddGroup.uniformity_countably_generated, deprecated
  (since := "2025-03-31")] alias
  UniformGroup.uniformity_countably_generated := IsUniformGroup.uniformity_countably_generated

open MulOpposite

@[to_additive]
theorem uniformity_eq_comap_inv_mul_nhds_one :
    ùì§ Œ± = comap (fun x : Œ± √ó Œ± => x.1‚Åª¬π * x.2) (ùìù (1 : Œ±)) := by
  rw [‚Üê comap_uniformity_mulOpposite, uniformity_eq_comap_nhds_one, ‚Üê op_one, ‚Üê comap_unop_nhds,
    comap_comap, comap_comap]
  simp [Function.comp_def]

@[to_additive]
theorem uniformity_eq_comap_inv_mul_nhds_one_swapped :
    ùì§ Œ± = comap (fun x : Œ± √ó Œ± => x.2‚Åª¬π * x.1) (ùìù (1 : Œ±)) := by
  rw [‚Üê comap_swap_uniformity, uniformity_eq_comap_inv_mul_nhds_one, comap_comap]
  rfl

end

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set Œ±}
    (h : (ùìù (1 : Œ±)).HasBasis p U) :
    (ùì§ Œ±).HasBasis p fun i => { x : Œ± √ó Œ± | x.2 / x.1 ‚àà U i } := by
  rw [uniformity_eq_comap_nhds_one]
  exact h.comap _

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_inv_mul {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set Œ±}
    (h : (ùìù (1 : Œ±)).HasBasis p U) :
    (ùì§ Œ±).HasBasis p fun i => { x : Œ± √ó Œ± | x.1‚Åª¬π * x.2 ‚àà U i } := by
  rw [uniformity_eq_comap_inv_mul_nhds_one]
  exact h.comap _

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_swapped {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set Œ±}
    (h : (ùìù (1 : Œ±)).HasBasis p U) :
    (ùì§ Œ±).HasBasis p fun i => { x : Œ± √ó Œ± | x.1 / x.2 ‚àà U i } := by
  rw [uniformity_eq_comap_nhds_one_swapped]
  exact h.comap _

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_inv_mul_swapped {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set Œ±}
    (h : (ùìù (1 : Œ±)).HasBasis p U) :
    (ùì§ Œ±).HasBasis p fun i => { x : Œ± √ó Œ± | x.2‚Åª¬π * x.1 ‚àà U i } := by
  rw [uniformity_eq_comap_inv_mul_nhds_one_swapped]
  exact h.comap _

@[to_additive]
theorem uniformContinuous_of_tendsto_one {hom : Type*} [UniformSpace Œ≤] [Group Œ≤] [IsUniformGroup Œ≤]
    [FunLike hom Œ± Œ≤] [MonoidHomClass hom Œ± Œ≤] {f : hom} (h : Tendsto f (ùìù 1) (ùìù 1)) :
    UniformContinuous f := by
  have :
    ((fun x : Œ≤ √ó Œ≤ => x.2 / x.1) ‚àò fun x : Œ± √ó Œ± => (f x.1, f x.2)) = fun x : Œ± √ó Œ± =>
      f (x.2 / x.1) := by ext; simp only [Function.comp_apply, map_div]
  rw [UniformContinuous, uniformity_eq_comap_nhds_one Œ±, uniformity_eq_comap_nhds_one Œ≤,
    tendsto_comap_iff, this]
  exact Tendsto.comp h tendsto_comap

/-- A group homomorphism (a bundled morphism of a type that implements `MonoidHomClass`) between
two uniform groups is uniformly continuous provided that it is continuous at one. See also
`continuous_of_continuousAt_one`. -/
@[to_additive /-- An additive group homomorphism (a bundled morphism of a type that implements
`AddMonoidHomClass`) between two uniform additive groups is uniformly continuous provided that it
is continuous at zero. See also `continuous_of_continuousAt_zero`. -/]
theorem uniformContinuous_of_continuousAt_one {hom : Type*} [UniformSpace Œ≤] [Group Œ≤]
    [IsUniformGroup Œ≤] [FunLike hom Œ± Œ≤] [MonoidHomClass hom Œ± Œ≤]
    (f : hom) (hf : ContinuousAt f 1) :
    UniformContinuous f :=
  uniformContinuous_of_tendsto_one (by simpa using hf.tendsto)

@[to_additive]
theorem MonoidHom.uniformContinuous_of_continuousAt_one [UniformSpace Œ≤] [Group Œ≤]
    [IsUniformGroup Œ≤] (f : Œ± ‚Üí* Œ≤) (hf : ContinuousAt f 1) : UniformContinuous f :=
  _root_.uniformContinuous_of_continuousAt_one f hf

/-- A homomorphism from a uniform group to a discrete uniform group is continuous if and only if
its kernel is open. -/
@[to_additive /-- A homomorphism from a uniform additive group to a discrete uniform additive group
is continuous if and only if its kernel is open. -/]
theorem IsUniformGroup.uniformContinuous_iff_isOpen_ker {hom : Type*} [UniformSpace Œ≤]
    [DiscreteTopology Œ≤] [Group Œ≤] [IsUniformGroup Œ≤] [FunLike hom Œ± Œ≤] [MonoidHomClass hom Œ± Œ≤]
    {f : hom} :
    UniformContinuous f ‚Üî IsOpen ((f : Œ± ‚Üí* Œ≤).ker : Set Œ±) := by
  refine ‚ü®fun hf => ?_, fun hf => ?_‚ü©
  ¬∑ apply (isOpen_discrete ({1} : Set Œ≤)).preimage hf.continuous
  ¬∑ apply uniformContinuous_of_continuousAt_one
    rw [ContinuousAt, nhds_discrete Œ≤, map_one, tendsto_pure]
    exact hf.mem_nhds (map_one f)

@[to_additive]
theorem uniformContinuous_monoidHom_of_continuous {hom : Type*} [UniformSpace Œ≤] [Group Œ≤]
    [IsUniformGroup Œ≤] [FunLike hom Œ± Œ≤] [MonoidHomClass hom Œ± Œ≤] {f : hom} (h : Continuous f) :
    UniformContinuous f :=
  uniformContinuous_of_tendsto_one <|
    suffices Tendsto f (ùìù 1) (ùìù (f 1)) by rwa [map_one] at this
    h.tendsto 1

end IsUniformGroup

section IsTopologicalGroup

open Filter

variable (G : Type*) [Group G] [TopologicalSpace G] [IsTopologicalGroup G]

/-- The right uniformity on a topological group (as opposed to the left uniformity).

Warning: in general the right and left uniformities do not coincide and so one does not obtain a
`IsUniformGroup` structure. Two important special cases where they _do_ coincide are for
commutative groups (see `isUniformGroup_of_commGroup`) and for compact groups (see
`topologicalGroup_is_uniform_of_compactSpace`). -/
@[to_additive /-- The right uniformity on a topological additive group (as opposed to the left
uniformity).

Warning: in general the right and left uniformities do not coincide and so one does not obtain a
`IsUniformAddGroup` structure. Two important special cases where they _do_ coincide are for
commutative additive groups (see `isUniformAddGroup_of_addCommGroup`) and for compact
additive groups (see `topologicalAddGroup_is_uniform_of_compactSpace`). -/]
def IsTopologicalGroup.rightUniformSpace : UniformSpace G where
  uniformity := comap (fun p : G √ó G => p.2 / p.1) (ùìù 1)
  symm :=
    have : Tendsto (fun p : G √ó G ‚Ü¶ (p.2 / p.1)‚Åª¬π) (comap (fun p : G √ó G ‚Ü¶ p.2 / p.1) (ùìù 1))
      (ùìù 1‚Åª¬π) := tendsto_id.inv.comp tendsto_comap
    by simpa [tendsto_comap_iff]
  comp := Tendsto.le_comap fun U H ‚Ü¶ by
    rcases exists_nhds_one_split H with ‚ü®V, V_nhds, V_mul‚ü©
    refine mem_map.2 (mem_of_superset (mem_lift' <| preimage_mem_comap V_nhds) ?_)
    rintro ‚ü®x, y‚ü© ‚ü®z, hz‚ÇÅ, hz‚ÇÇ‚ü©
    simpa using V_mul _ hz‚ÇÇ _ hz‚ÇÅ
  nhds_eq_comap_uniformity _ := by simp only [comap_comap, Function.comp_def, nhds_translation_div]

@[deprecated (since := "2025-09-26")]
alias IsTopologicalAddGroup.toUniformSpace := IsTopologicalAddGroup.rightUniformSpace
@[to_additive existing, deprecated (since := "2025-09-26")]
alias IsTopologicalGroup.toUniformSpace := IsTopologicalGroup.rightUniformSpace

attribute [local instance] IsTopologicalGroup.rightUniformSpace

@[to_additive]
theorem uniformity_eq_comap_nhds_one' : ùì§ G = comap (fun p : G √ó G => p.2 / p.1) (ùìù (1 : G)) :=
  rfl

end IsTopologicalGroup

section TopologicalCommGroup

universe u v w x

open Filter

variable (G : Type*) [CommGroup G] [TopologicalSpace G] [IsTopologicalGroup G]

section

attribute [local instance] IsTopologicalGroup.rightUniformSpace

variable {G}

@[to_additive]
theorem isUniformGroup_of_commGroup : IsUniformGroup G := by
  constructor
  simp only [UniformContinuous, uniformity_prod_eq_prod, uniformity_eq_comap_nhds_one',
    tendsto_comap_iff, tendsto_map'_iff, prod_comap_comap_eq, Function.comp_def,
    div_div_div_comm _ (Prod.snd (Prod.snd _)), ‚Üê nhds_prod_eq]
  exact (continuous_div'.tendsto' 1 1 (div_one 1)).comp tendsto_comap

alias comm_topologicalGroup_is_uniform := isUniformGroup_of_commGroup
@[deprecated (since := "2025-03-30")]
alias uniformAddGroup_of_addCommGroup := isUniformAddGroup_of_addCommGroup
@[to_additive existing, deprecated (since := "2025-03-30")]
alias uniformGroup_of_commGroup := isUniformGroup_of_commGroup

open Set

end

@[to_additive]
theorem IsUniformGroup.rightUniformSpace_eq {G : Type*} [u : UniformSpace G] [Group G]
    [IsUniformGroup G] : IsTopologicalGroup.rightUniformSpace G = u := by
  ext : 1
  rw [uniformity_eq_comap_nhds_one' G, uniformity_eq_comap_nhds_one G]

@[deprecated (since := "2025-09-26")]
alias IsUniformAddGroup.toUniformSpace_eq := IsUniformAddGroup.rightUniformSpace_eq
@[to_additive existing, deprecated (since := "2025-09-26")]
alias IsUniformGroup.toUniformSpace_eq := IsUniformGroup.rightUniformSpace_eq

end TopologicalCommGroup
