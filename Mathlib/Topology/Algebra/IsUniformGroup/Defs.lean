/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl, Anatole Dedecker
-/
import Mathlib.Topology.UniformSpace.DiscreteUniformity
import Mathlib.Topology.Algebra.Group.Basic

/-!
# Uniform structure on topological groups

This file defines uniform groups and its additive counterpart. These typeclasses should be
preferred over using `[TopologicalSpace Œ±] [IsTopologicalGroup Œ±]` since every topological
group naturally induces a uniform structure.

## Main declarations
* `IsUniformGroup` and `IsUniformAddGroup`: Multiplicative and additive uniform groups,
  i.e., groups with uniformly continuous `(*)` and `(‚Åª¬π)` / `(+)` and `(-)`.

## Main results

* `IsTopologicalAddGroup.toUniformSpace` and `comm_topologicalAddGroup_is_uniform` can be used
  to construct a canonical uniformity for a topological additive group.

See `Mathlib/Topology/Algebra/IsUniformGroup/Basic.lean` for further results.
-/

assert_not_exists Cauchy

noncomputable section

open Uniformity Topology Filter Pointwise

section LeftRight

open Filter Set

variable {G G‚Çó G·µ£ H‚Çó H·µ£ X : Type*}

class IsRightUniformAddGroup (G : Type*) [UniformSpace G] [AddGroup G] : Prop
    extends IsTopologicalAddGroup G where
  uniformity_eq :
    ùì§ G = comap (fun x : G √ó G ‚Ü¶ x.2 + (-x.1)) (ùìù 0)

@[to_additive]
class IsRightUniformGroup (G : Type*) [UniformSpace G] [Group G] : Prop
    extends IsTopologicalGroup G where
  uniformity_eq :
    ùì§ G = comap (fun x : G √ó G ‚Ü¶ x.2 * x.1‚Åª¬π) (ùìù 1)

class IsLeftUniformAddGroup (G : Type*) [UniformSpace G] [AddGroup G] : Prop
    extends IsTopologicalAddGroup G where
  uniformity_eq :
    ùì§ G = comap (fun x : G √ó G ‚Ü¶ (-x.1) + x.2) (ùìù 0)

@[to_additive]
class IsLeftUniformGroup (G : Type*) [UniformSpace G] [Group G] : Prop
    extends IsTopologicalGroup G where
  uniformity_eq :
    ùì§ G = comap (fun x : G √ó G ‚Ü¶ x.1‚Åª¬π * x.2) (ùìù 1)

class inductive IsLeftOrRightUniformAddGroup (G : Type*) [UniformSpace G] [AddGroup G] : Prop
| right [IsRightUniformAddGroup G] : IsLeftOrRightUniformAddGroup G
| left [IsLeftUniformAddGroup G] : IsLeftOrRightUniformAddGroup G

@[to_additive]
class inductive IsLeftOrRightUniformGroup (G : Type*) [UniformSpace G] [Group G] : Prop
| right [IsRightUniformGroup G] : IsLeftOrRightUniformGroup G
| left [IsLeftUniformGroup G] : IsLeftOrRightUniformGroup G

attribute [instance] IsLeftOrRightUniformAddGroup.left
attribute [instance] IsLeftOrRightUniformAddGroup.right
attribute [instance] IsLeftOrRightUniformGroup.left
attribute [instance] IsLeftOrRightUniformGroup.right

variable [Group G] [UniformSpace G] [IsLeftOrRightUniformGroup G]
variable [UniformSpace G‚Çó] [UniformSpace G·µ£] [Group G‚Çó] [Group G·µ£]
variable [UniformSpace H‚Çó] [UniformSpace H·µ£] [Group H‚Çó] [Group H·µ£]
variable [IsLeftUniformGroup G‚Çó] [IsRightUniformGroup G·µ£]
variable [IsLeftUniformGroup H‚Çó] [IsRightUniformGroup H·µ£]
variable [UniformSpace X]

@[to_additive]
instance : IsTopologicalGroup G := by
  rcases ‚ÄπIsLeftOrRightUniformGroup G‚Ä∫ <;> infer_instance

variable (G‚Çó G·µ£)

@[to_additive]
lemma uniformity_eq_comap_mul_inv_nhds_one :
    ùì§ G·µ£ = comap (fun x : G·µ£ √ó G·µ£ ‚Ü¶ x.2 * x.1‚Åª¬π) (ùìù 1) :=
  IsRightUniformGroup.uniformity_eq

@[to_additive]
lemma uniformity_eq_comap_inv_mul_nhds_one :
    ùì§ G‚Çó = comap (fun x : G‚Çó √ó G‚Çó ‚Ü¶ x.1‚Åª¬π * x.2) (ùìù 1) :=
  IsLeftUniformGroup.uniformity_eq

@[to_additive]
lemma uniformity_eq_comap_mul_inv_nhds_one_swapped :
    ùì§ G·µ£ = comap (fun x : G·µ£ √ó G·µ£ ‚Ü¶ x.1 * x.2‚Åª¬π) (ùìù 1) := by
  rw [‚Üê comap_swap_uniformity, uniformity_eq_comap_mul_inv_nhds_one, comap_comap]
  rfl

@[to_additive]
lemma uniformity_eq_comap_inv_mul_nhds_one_swapped :
    ùì§ G‚Çó = comap (fun x : G‚Çó √ó G‚Çó ‚Ü¶ x.2‚Åª¬π * x.1) (ùìù 1) := by
  rw [‚Üê comap_swap_uniformity, uniformity_eq_comap_inv_mul_nhds_one, comap_comap]
  rfl

@[to_additive]
theorem uniformity_eq_comap_nhds_one : ùì§ G·µ£ = comap (fun x : G·µ£ √ó G·µ£ => x.2 / x.1) (ùìù 1) := by
  simp_rw [div_eq_mul_inv]
  exact uniformity_eq_comap_mul_inv_nhds_one G·µ£

@[to_additive]
theorem uniformity_eq_comap_nhds_one_swapped :
    ùì§ G·µ£ = comap (fun x : G·µ£ √ó G·µ£ => x.1 / x.2) (ùìù 1) := by
  rw [‚Üê comap_swap_uniformity, uniformity_eq_comap_nhds_one, comap_comap]
  rfl

variable {G‚Çó G·µ£}

namespace MulOpposite

/-
@[to_additive]
theorem isRightUniformGroup_iff [UniformSpace G] :
    IsRightUniformGroup (G·µê·µí·µñ) ‚Üî IsLeftUniformGroup G := by
  constructor <;> intro
  ¬∑ have : IsTopologicalGroup G :=
    -- TODO: extract this as lemma?
    { continuous_mul := continuous_unop.comp <| continuous_mul.comp <| continuous_swap.comp <|
        continuous_op.prodMap continuous_op
      continuous_inv := continuous_unop.comp <| continuous_op.inv }
    sorry
  ¬∑ sorry
-/

@[to_additive]
instance : IsRightUniformGroup G‚Çó·µê·µí·µñ where
  uniformity_eq := by
    rw [uniformity_mulOpposite, ‚Üê op_one, ‚Üê comap_unop_nhds,
        uniformity_eq_comap_inv_mul_nhds_one, comap_comap, comap_comap]
    rfl

@[to_additive]
instance : IsLeftUniformGroup G·µ£·µê·µí·µñ where
  uniformity_eq := by
    rw [uniformity_mulOpposite, ‚Üê op_one, ‚Üê comap_unop_nhds,
      uniformity_eq_comap_mul_inv_nhds_one, comap_comap, comap_comap]
    rfl

@[to_additive]
instance : IsLeftOrRightUniformGroup G·µê·µí·µñ := by
  rcases ‚ÄπIsLeftOrRightUniformGroup G‚Ä∫ <;> infer_instance

end MulOpposite

@[to_additive]
theorem comap_mul_left_uniformity (g : G) :
    comap ((g, g) * ¬∑) (ùì§ G) = ùì§ G := by
  rcases ‚ÄπIsLeftOrRightUniformGroup G‚Ä∫
  ¬∑ rw [uniformity_eq_comap_mul_inv_nhds_one, comap_comap]
    -- TODO: clean
    have : ùìù (1 : G) = comap (g * ¬∑ * g‚Åª¬π) (ùìù 1) := by
      conv_lhs =>
        rw [((Homeomorph.mulLeft g).trans (Homeomorph.mulRight g‚Åª¬π)).isInducing.nhds_eq_comap]
      congr
      simp
    conv_rhs => rw [this, comap_comap]
    congr 1
    ext ‚ü®x, y‚ü©
    simp [mul_assoc]
  ¬∑ rw [uniformity_eq_comap_inv_mul_nhds_one, comap_comap]
    congr
    ext ‚ü®x, y‚ü©
    simp [mul_assoc]

open MulOpposite in
@[to_additive]
theorem comap_mul_right_uniformity (g : G) :
    comap (¬∑ * (g, g)) (ùì§ G) = ùì§ G := by
  have := congr(comap (Prod.map op op) $(comap_mul_left_uniformity (op g)))
  rw [‚Üê comap_uniformity_mulOpposite, comap_comap]
  rw [comap_comap] at this
  exact this

@[to_additive]
theorem uniformContinuous_mul_right (g : G) : UniformContinuous ((¬∑ * g) : G ‚Üí G) := by
  rw [UniformContinuous, tendsto_iff_comap]
  exact comap_mul_right_uniformity g |>.ge

@[to_additive]
theorem uniformContinuous_mul_left (g : G) : UniformContinuous ((g * ¬∑) : G ‚Üí G) := by
  rw [UniformContinuous, tendsto_iff_comap]
  exact comap_mul_left_uniformity g |>.ge

@[to_additive]
theorem UniformContinuous.mul_const {f : X ‚Üí G} (hf : UniformContinuous f)
    (g : G) : UniformContinuous fun x ‚Ü¶ f x * g :=
  uniformContinuous_mul_right g |>.comp hf

@[to_additive]
theorem UniformContinuous.const_mul {f : X ‚Üí G} (hf : UniformContinuous f)
    (g : G) : UniformContinuous fun x ‚Ü¶ g * f x :=
  uniformContinuous_mul_left g |>.comp hf

@[to_additive]
theorem uniformity_translate_mul (a : G) :
    ((ùì§ G).map fun x : G √ó G => (x.1 * a, x.2 * a)) = ùì§ G := by
  conv_rhs => rw [‚Üê comap_mul_right_uniformity a‚Åª¬π]
  refine map_eq_comap_of_inverse ?_ ?_ <;>
  ext <;>
  simp

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_mul_inv {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set G·µ£}
    (h : (ùìù (1 : G·µ£)).HasBasis p U) :
    (ùì§ G·µ£).HasBasis p fun i => { x : G·µ£ √ó G·µ£ | x.2 * x.1‚Åª¬π ‚àà U i } := by
  rw [uniformity_eq_comap_mul_inv_nhds_one]
  exact h.comap _

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_inv_mul {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set G‚Çó}
    (h : (ùìù (1 : G‚Çó)).HasBasis p U) :
    (ùì§ G‚Çó).HasBasis p fun i => { x : G‚Çó √ó G‚Çó | x.1‚Åª¬π * x.2 ‚àà U i } := by
  rw [uniformity_eq_comap_inv_mul_nhds_one]
  exact h.comap _

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set G·µ£}
    (h : (ùìù (1 : G·µ£)).HasBasis p U) :
    (ùì§ G·µ£).HasBasis p fun i => { x : G·µ£ √ó G·µ£ | x.2 / x.1 ‚àà U i } := by
  rw [uniformity_eq_comap_nhds_one]
  exact h.comap _

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_mul_inv_swapped {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set G·µ£}
    (h : (ùìù (1 : G·µ£)).HasBasis p U) :
    (ùì§ G·µ£).HasBasis p fun i => { x : G·µ£ √ó G·µ£ | x.1 * x.2‚Åª¬π ‚àà U i } := by
  rw [uniformity_eq_comap_mul_inv_nhds_one_swapped]
  exact h.comap _

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_inv_mul_swapped {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set G‚Çó}
    (h : (ùìù (1 : G‚Çó)).HasBasis p U) :
    (ùì§ G‚Çó).HasBasis p fun i => { x : G‚Çó √ó G‚Çó | x.2‚Åª¬π * x.1 ‚àà U i } := by
  rw [uniformity_eq_comap_inv_mul_nhds_one_swapped]
  exact h.comap _

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_swapped {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set G·µ£}
    (h : (ùìù (1 : G·µ£)).HasBasis p U) :
    (ùì§ G·µ£).HasBasis p fun i => { x : G·µ£ √ó G·µ£ | x.1 / x.2 ‚àà U i } := by
  rw [uniformity_eq_comap_nhds_one_swapped]
  exact h.comap _

@[to_additive]
theorem IsRightUniformGroup.uniformContinuous_of_tendsto_one {hom : Type*}
    [FunLike hom G·µ£ H·µ£] [MonoidHomClass hom G·µ£ H·µ£] {f : hom} (h : Tendsto f (ùìù 1) (ùìù 1)) :
    UniformContinuous f := by
  rw [UniformContinuous, uniformity_eq_comap_mul_inv_nhds_one, uniformity_eq_comap_mul_inv_nhds_one,
    tendsto_comap_iff]
  convert h.comp tendsto_comap
  ext
  simp

export IsRightUniformGroup (uniformContinuous_of_tendsto_one)
export IsRightUniformAddGroup (uniformContinuous_of_tendsto_zero)

@[to_additive]
theorem IsLeftUniformGroup.uniformContinuous_of_tendsto_one {hom : Type*}
    [FunLike hom G‚Çó H‚Çó] [MonoidHomClass hom G‚Çó H‚Çó] {f : hom} (h : Tendsto f (ùìù 1) (ùìù 1)) :
    UniformContinuous f := by
  rw [UniformContinuous, uniformity_eq_comap_inv_mul_nhds_one, uniformity_eq_comap_inv_mul_nhds_one,
    tendsto_comap_iff]
  convert h.comp tendsto_comap
  ext
  simp

/-- A group homomorphism (a bundled morphism of a type that implements `MonoidHomClass`) between
two uniform groups is uniformly continuous provided that it is continuous at one. See also
`continuous_of_continuousAt_one`. -/
@[to_additive /-- An additive group homomorphism (a bundled morphism of a type that implements
`AddMonoidHomClass`) between two uniform additive groups is uniformly continuous provided that it
is continuous at zero. See also `continuous_of_continuousAt_zero`. -/]
theorem IsRightUniformGroup.uniformContinuous_of_continuousAt_one {hom : Type*}
    [FunLike hom G·µ£ H·µ£] [MonoidHomClass hom G·µ£ H·µ£]
    (f : hom) (hf : ContinuousAt f 1) :
    UniformContinuous f :=
  uniformContinuous_of_tendsto_one (by simpa using hf.tendsto)

export IsRightUniformGroup (uniformContinuous_of_continuousAt_one)

/-- A group homomorphism (a bundled morphism of a type that implements `MonoidHomClass`) between
two uniform groups is uniformly continuous provided that it is continuous at one. See also
`continuous_of_continuousAt_one`. -/
@[to_additive /-- An additive group homomorphism (a bundled morphism of a type that implements
`AddMonoidHomClass`) between two uniform additive groups is uniformly continuous provided that it
is continuous at zero. See also `continuous_of_continuousAt_zero`. -/]
theorem IsLeftUniformGroup.uniformContinuous_of_continuousAt_one {hom : Type*}
    [FunLike hom G‚Çó H‚Çó] [MonoidHomClass hom G‚Çó H‚Çó]
    (f : hom) (hf : ContinuousAt f 1) :
    UniformContinuous f :=
  uniformContinuous_of_tendsto_one (by simpa using hf.tendsto)

@[to_additive]
theorem MonoidHom.uniformContinuous_of_continuousAt_one
    (f : G·µ£ ‚Üí* H·µ£) (hf : ContinuousAt f 1) : UniformContinuous f :=
  IsRightUniformGroup.uniformContinuous_of_continuousAt_one f hf

/-- A homomorphism from a uniform group to a discrete uniform group is continuous if and only if
its kernel is open. -/
@[to_additive /-- A homomorphism from a uniform additive group to a discrete uniform additive group
is continuous if and only if its kernel is open. -/]
theorem IsRightUniformGroup.uniformContinuous_iff_isOpen_ker {hom : Type*} [FunLike hom G·µ£ H·µ£]
    [MonoidHomClass hom G·µ£ H·µ£] [DiscreteTopology H·µ£] {f : hom} :
    UniformContinuous f ‚Üî IsOpen ((f : G·µ£ ‚Üí* H·µ£).ker : Set G·µ£) := by
  refine ‚ü®fun hf => ?_, fun hf => ?_‚ü©
  ¬∑ apply (isOpen_discrete ({1} : Set H·µ£)).preimage hf.continuous
  ¬∑ apply uniformContinuous_of_continuousAt_one
    rw [ContinuousAt, nhds_discrete H·µ£, map_one, tendsto_pure]
    exact hf.mem_nhds (map_one f)

/-- A homomorphism from a uniform group to a discrete uniform group is continuous if and only if
its kernel is open. -/
@[to_additive /-- A homomorphism from a uniform additive group to a discrete uniform additive group
is continuous if and only if its kernel is open. -/]
theorem IsLeftUniformGroup.uniformContinuous_iff_isOpen_ker {hom : Type*} [FunLike hom G‚Çó H‚Çó]
    [MonoidHomClass hom G‚Çó H‚Çó] [DiscreteTopology H‚Çó] {f : hom} :
    UniformContinuous f ‚Üî IsOpen ((f : G‚Çó ‚Üí* H‚Çó).ker : Set G‚Çó) := by
  refine ‚ü®fun hf => ?_, fun hf => ?_‚ü©
  ¬∑ apply (isOpen_discrete ({1} : Set H‚Çó)).preimage hf.continuous
  ¬∑ apply uniformContinuous_of_continuousAt_one
    rw [ContinuousAt, nhds_discrete H‚Çó, map_one, tendsto_pure]
    exact hf.mem_nhds (map_one f)

/-- A group homomorphism (a bundled morphism of a type that implements `MonoidHomClass`) between
two uniform groups is uniformly continuous provided that it is continuous at one. See also
`continuous_of_continuousAt_one`. -/
@[to_additive /-- An additive group homomorphism (a bundled morphism of a type that implements
`AddMonoidHomClass`) between two uniform additive groups is uniformly continuous provided that it
is continuous at zero. See also `continuous_of_continuousAt_zero`. -/]
theorem IsRightUniformGroup.uniformContinuous_of_continuous {hom : Type*}
    [FunLike hom G·µ£ H·µ£] [MonoidHomClass hom G·µ£ H·µ£]
    (f : hom) (hf : Continuous f) :
    UniformContinuous f :=
  uniformContinuous_of_continuousAt_one f hf.continuousAt

@[to_additive, deprecated (since := "2025-09-25")]
alias uniformContinuous_monoidHom_of_continuous :=
  IsRightUniformGroup.uniformContinuous_of_continuous

/-- A group homomorphism (a bundled morphism of a type that implements `MonoidHomClass`) between
two uniform groups is uniformly continuous provided that it is continuous at one. See also
`continuous_of_continuousAt_one`. -/
@[to_additive /-- An additive group homomorphism (a bundled morphism of a type that implements
`AddMonoidHomClass`) between two uniform additive groups is uniformly continuous provided that it
is continuous at zero. See also `continuous_of_continuousAt_zero`. -/]
theorem IsLeftUniformGroup.uniformContinuous_monoidHom_of_continuous {hom : Type*}
    [FunLike hom G‚Çó H‚Çó] [MonoidHomClass hom G‚Çó H‚Çó]
    (f : hom) (hf : ContinuousAt f 1) :
    UniformContinuous f :=
  uniformContinuous_of_tendsto_one (by simpa using hf.tendsto)

section LatticeOps

omit [UniformSpace G]

@[to_additive]
theorem isRightUniformGroup_iInf {Œπ : Sort*} {us' : Œπ ‚Üí UniformSpace G}
    (h' : ‚àÄ i, @IsRightUniformGroup G (us' i) _) : @IsRightUniformGroup G (‚®Ö i, us' i) _ := by
  let := ‚®Ö i, us' i
  have : IsTopologicalGroup G := by
    rw [UniformSpace.toTopologicalSpace_iInf]
    exact topologicalGroup_iInf fun u ‚Ü¶ (h' u).toIsTopologicalGroup
  constructor
  simp_rw [iInf_uniformity, UniformSpace.toTopologicalSpace_iInf, nhds_iInf, comap_iInf,
    IsRightUniformGroup.uniformity_eq]

@[to_additive]
theorem isLeftUniformGroup_iInf {Œπ : Sort*} {us' : Œπ ‚Üí UniformSpace G}
    (h' : ‚àÄ i, @IsLeftUniformGroup G (us' i) _) : @IsLeftUniformGroup G (‚®Ö i, us' i) _ := by
  let := ‚®Ö i, us' i
  have : IsTopologicalGroup G := by
    rw [UniformSpace.toTopologicalSpace_iInf]
    exact topologicalGroup_iInf fun u ‚Ü¶ (h' u).toIsTopologicalGroup
  constructor
  simp_rw [iInf_uniformity, UniformSpace.toTopologicalSpace_iInf, nhds_iInf, comap_iInf,
    IsLeftUniformGroup.uniformity_eq]

@[to_additive]
theorem isRightUniformGroup_sInf {us : Set (UniformSpace G)}
    (h : ‚àÄ u ‚àà us, @IsRightUniformGroup G u _) :
    @IsRightUniformGroup G (sInf us) _ := by
  rw [sInf_eq_iInf]
  exact isRightUniformGroup_iInf fun u ‚Ü¶ isRightUniformGroup_iInf fun hu ‚Ü¶ h u hu

@[to_additive]
theorem isLeftUniformGroup_sInf {us : Set (UniformSpace G)}
    (h : ‚àÄ u ‚àà us, @IsLeftUniformGroup G u _) :
    @IsLeftUniformGroup G (sInf us) _ := by
  rw [sInf_eq_iInf]
  exact isLeftUniformGroup_iInf fun u ‚Ü¶ isLeftUniformGroup_iInf fun hu ‚Ü¶ h u hu

@[to_additive]
theorem isRightUniformGroup_inf {u‚ÇÅ u‚ÇÇ : UniformSpace G} (h‚ÇÅ : @IsRightUniformGroup G u‚ÇÅ _)
    (h‚ÇÇ : @IsRightUniformGroup G u‚ÇÇ _) : @IsRightUniformGroup G (u‚ÇÅ ‚äì u‚ÇÇ) _ := by
  rw [inf_eq_iInf]
  refine isRightUniformGroup_iInf fun b => ?_
  cases b <;> assumption

@[to_additive]
theorem isLeftUniformGroup_inf {u‚ÇÅ u‚ÇÇ : UniformSpace G} (h‚ÇÅ : @IsLeftUniformGroup G u‚ÇÅ _)
    (h‚ÇÇ : @IsLeftUniformGroup G u‚ÇÇ _) : @IsLeftUniformGroup G (u‚ÇÅ ‚äì u‚ÇÇ) _ := by
  rw [inf_eq_iInf]
  refine isLeftUniformGroup_iInf fun b => ?_
  cases b <;> assumption

end LatticeOps

section Constructions

@[to_additive]
instance Prod.instIsRightUniformGroup :
    IsRightUniformGroup (G·µ£ √ó H·µ£) := by
  constructor
  simp_rw [uniformity_prod_eq_comap_prod, uniformity_eq_comap_mul_inv_nhds_one,
    Prod.one_eq_mk, nhds_prod_eq, comap_prod, comap_comap]
  rfl

@[to_additive]
instance Prod.instIsLeftUniformGroup :
    IsRightUniformGroup (G·µ£ √ó H·µ£) := by
  constructor
  simp_rw [uniformity_prod_eq_comap_prod, uniformity_eq_comap_mul_inv_nhds_one,
    Prod.one_eq_mk, nhds_prod_eq, comap_prod, comap_comap]
  rfl

end Constructions

@[to_additive]
theorem IsRightUniformGroup.ext {G : Type*} [Group G] {u v : UniformSpace G}
    (hu : @IsRightUniformGroup G u _)
    (hv : @IsRightUniformGroup G v _)
    (h : @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1) : u = v :=
  UniformSpace.ext <| by
    rw [@uniformity_eq_comap_mul_inv_nhds_one _ u _ hu,
        @uniformity_eq_comap_mul_inv_nhds_one _ v _ hv, h]

@[to_additive]
theorem IsLeftUniformGroup.ext {G : Type*} [Group G] {u v : UniformSpace G}
    (hu : @IsLeftUniformGroup G u _)
    (hv : @IsLeftUniformGroup G v _)
    (h : @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1) : u = v :=
  UniformSpace.ext <| by
    rw [@uniformity_eq_comap_inv_mul_nhds_one _ u _ hu,
        @uniformity_eq_comap_inv_mul_nhds_one _ v _ hv, h]

@[to_additive]
theorem IsRightUniformGroup.ext_iff {G : Type*} [Group G] {u v : UniformSpace G}
    (hu : @IsRightUniformGroup G u _) (hv : @IsRightUniformGroup G v _) :
    u = v ‚Üî @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1 :=
  ‚ü®fun h => h ‚ñ∏ rfl, hu.ext hv‚ü©

@[to_additive]
theorem IsLeftUniformGroup.ext_iff {G : Type*} [Group G] {u v : UniformSpace G}
    (hu : @IsLeftUniformGroup G u _) (hv : @IsLeftUniformGroup G v _) :
    u = v ‚Üî @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1 :=
  ‚ü®fun h => h ‚ñ∏ rfl, hu.ext hv‚ü©

@[to_additive IsUniformAddGroup.uniformity_countably_generated]
theorem IsUniformGroup.uniformity_countably_generated
    [(ùìù (1 : G)).IsCountablyGenerated] :
    (ùì§ G).IsCountablyGenerated := by
  rcases ‚ÄπIsLeftOrRightUniformGroup G‚Ä∫ <;>
  [rw [uniformity_eq_comap_mul_inv_nhds_one]; rw [uniformity_eq_comap_inv_mul_nhds_one]] <;>
  exact Filter.comap.isCountablyGenerated _ _

@[deprecated (since := "2025-03-31")] alias UniformAddGroup.uniformity_countably_generated :=
  IsUniformAddGroup.uniformity_countably_generated
@[to_additive existing UniformAddGroup.uniformity_countably_generated, deprecated
  (since := "2025-03-31")] alias
  UniformGroup.uniformity_countably_generated := IsUniformGroup.uniformity_countably_generated

end LeftRight

section IsTopologicalGroup

open Filter

variable (G : Type*) [Group G] [TopologicalSpace G] [IsTopologicalGroup G]

section Right

/-- The right uniformity on a topological group (as opposed to the left uniformity).

Warning: in general the right and left uniformities do not coincide and so one does not obtain a
`IsUniformGroup` structure. Two important special cases where they _do_ coincide are for
commutative groups (see `isUniformGroup_of_commGroup`) and for compact groups (see
`topologicalGroup_is_uniform_of_compactSpace`). -/
@[to_additive /-- The right uniformity on a topological additive group (as opposed to the left
uniformity).

Warning: in general the right and left uniformities do not coincide and so one does not obtain a
`IsUniformAddGroup` structure. Two important special cases where they _do_ coincide are for
commutative additive groups (see `isUniformAddGroup_of_addCommGroup`) and for compact
additive groups (see `topologicalAddGroup_is_uniform_of_compactSpace`). -/]
def IsTopologicalGroup.rightUniformSpace : UniformSpace G where
  uniformity := comap (fun p : G √ó G => p.2 * p.1‚Åª¬π) (ùìù 1)
  symm :=
    have : Tendsto (fun p : G √ó G ‚Ü¶ (p.2 * p.1‚Åª¬π)‚Åª¬π) (comap (fun p : G √ó G ‚Ü¶ p.2 * p.1‚Åª¬π) (ùìù 1))
      (ùìù 1‚Åª¬π) := tendsto_id.inv.comp tendsto_comap
    by simpa [tendsto_comap_iff]
  comp := Tendsto.le_comap fun U H ‚Ü¶ by
    rcases exists_nhds_one_split H with ‚ü®V, V_nhds, V_mul‚ü©
    refine mem_map.2 (mem_of_superset (mem_lift' <| preimage_mem_comap V_nhds) ?_)
    rintro ‚ü®x, y‚ü© ‚ü®z, hz‚ÇÅ, hz‚ÇÇ‚ü©
    simpa [mul_assoc] using V_mul _ hz‚ÇÇ _ hz‚ÇÅ
  nhds_eq_comap_uniformity _ := by
    simp only [comap_comap, Function.comp_def, ‚Üê div_eq_mul_inv, nhds_translation_div]

variable {G}

@[to_additive]
lemma isRightUniformGroup_iff_rightUniformSpace {G : Type*} [U : UniformSpace G] [Group G]
    [IsTopologicalGroup G] :
    IsRightUniformGroup G ‚Üî U = IsTopologicalGroup.rightUniformSpace G :=
  ‚ü®fun H ‚Ü¶ by ext; rw [uniformity_eq_comap_mul_inv_nhds_one G]; rfl, fun H ‚Ü¶ ‚ü®H ‚ñ∏ rfl‚ü©‚ü©

@[to_additive]
theorem IsRightUniformGroup.rightUniformSpace_eq {G : Type*} [U : UniformSpace G] [Group G]
    [IsRightUniformGroup G] : IsTopologicalGroup.rightUniformSpace G = U := by
  rw [‚Üê isRightUniformGroup_iff_rightUniformSpace.mp inferInstance]

attribute [local instance] IsTopologicalGroup.rightUniformSpace

@[to_additive]
instance : IsRightUniformGroup G := ‚ü®rfl‚ü©

@[to_additive, deprecated (since := "2025-09-25")]
alias uniformity_eq_comap_nhds_one' := uniformity_eq_comap_nhds_one

end Right

section Left

/-- The right uniformity on a topological group (as opposed to the left uniformity).

Warning: in general the right and left uniformities do not coincide and so one does not obtain a
`IsUniformGroup` structure. Two important special cases where they _do_ coincide are for
commutative groups (see `isUniformGroup_of_commGroup`) and for compact groups (see
`topologicalGroup_is_uniform_of_compactSpace`). -/
@[to_additive /-- The right uniformity on a topological additive group (as opposed to the left
uniformity).

Warning: in general the right and left uniformities do not coincide and so one does not obtain a
`IsUniformAddGroup` structure. Two important special cases where they _do_ coincide are for
commutative additive groups (see `isUniformAddGroup_of_addCommGroup`) and for compact
additive groups (see `topologicalAddGroup_is_uniform_of_compactSpace`). -/]
def IsTopologicalGroup.leftUniformSpace : UniformSpace G where
  uniformity := comap (fun p : G √ó G => p.1‚Åª¬π * p.2) (ùìù 1)
  symm :=
    have : Tendsto (fun p : G √ó G ‚Ü¶ (p.1‚Åª¬π * p.2)‚Åª¬π) (comap (fun p : G √ó G ‚Ü¶ p.1‚Åª¬π * p.2) (ùìù 1))
      (ùìù 1‚Åª¬π) := tendsto_id.inv.comp tendsto_comap
    by simpa [tendsto_comap_iff]
  comp := Tendsto.le_comap fun U H ‚Ü¶ by
    rcases exists_nhds_one_split H with ‚ü®V, V_nhds, V_mul‚ü©
    refine mem_map.2 (mem_of_superset (mem_lift' <| preimage_mem_comap V_nhds) ?_)
    rintro ‚ü®x, y‚ü© ‚ü®z, hz‚ÇÅ, hz‚ÇÇ‚ü©
    simpa [mul_assoc] using V_mul _ hz‚ÇÅ _ hz‚ÇÇ
  nhds_eq_comap_uniformity _ := by
    sorry

@[to_additive]
lemma isLeftUniformGroup_iff_leftUniformSpace {G : Type*} [U : UniformSpace G] [Group G]
    [IsTopologicalGroup G] :
    IsLeftUniformGroup G ‚Üî U = IsTopologicalGroup.leftUniformSpace G :=
  ‚ü®fun H ‚Ü¶ by ext; rw [uniformity_eq_comap_inv_mul_nhds_one G]; rfl, fun H ‚Ü¶ ‚ü®H ‚ñ∏ rfl‚ü©‚ü©

@[to_additive]
theorem IsLeftUniformGroup.leftUniformSpace_eq {G : Type*} [U : UniformSpace G] [Group G]
    [IsLeftUniformGroup G] : IsTopologicalGroup.leftUniformSpace G = U := by
  rw [‚Üê isLeftUniformGroup_iff_leftUniformSpace.mp inferInstance]

attribute [local instance] IsTopologicalGroup.leftUniformSpace

@[to_additive]
instance : IsLeftUniformGroup G := ‚ü®rfl‚ü©

end Left

end IsTopologicalGroup

section IsUniformGroup

open Filter Set

variable {Œ± : Type*} {Œ≤ : Type*}

/-- A uniform group is a group in which multiplication and inversion are uniformly continuous. -/
class IsUniformGroup (Œ± : Type*) [UniformSpace Œ±] [Group Œ±] : Prop where
  uniformContinuous_div : UniformContinuous fun p : Œ± √ó Œ± => p.1 / p.2

@[deprecated (since := "2025-03-26")] alias UniformGroup := IsUniformGroup

/-- A uniform additive group is an additive group in which addition
  and negation are uniformly continuous. -/
class IsUniformAddGroup (Œ± : Type*) [UniformSpace Œ±] [AddGroup Œ±] : Prop where
  uniformContinuous_sub : UniformContinuous fun p : Œ± √ó Œ± => p.1 - p.2

@[deprecated (since := "2025-03-26")] alias UniformAddGroup := IsUniformAddGroup

attribute [to_additive] IsUniformGroup

@[to_additive]
theorem IsUniformGroup.mk' {Œ±} [UniformSpace Œ±] [Group Œ±]
    (h‚ÇÅ : UniformContinuous fun p : Œ± √ó Œ± => p.1 * p.2) (h‚ÇÇ : UniformContinuous fun p : Œ± => p‚Åª¬π) :
    IsUniformGroup Œ± :=
  ‚ü®by simpa only [div_eq_mul_inv] using
    h‚ÇÅ.comp (uniformContinuous_fst.prodMk (h‚ÇÇ.comp uniformContinuous_snd))‚ü©

variable [UniformSpace Œ±] [Group Œ±] [IsUniformGroup Œ±]

@[to_additive]
theorem uniformContinuous_div : UniformContinuous fun p : Œ± √ó Œ± => p.1 / p.2 :=
  IsUniformGroup.uniformContinuous_div

@[to_additive]
theorem UniformContinuous.div [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (hg : UniformContinuous g) : UniformContinuous fun x => f x / g x :=
  uniformContinuous_div.comp (hf.prodMk hg)

@[to_additive]
theorem UniformContinuous.inv [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f) :
    UniformContinuous fun x => (f x)‚Åª¬π := by
  have : UniformContinuous fun x => 1 / f x := uniformContinuous_const.div hf
  simp_all

@[to_additive]
theorem uniformContinuous_inv : UniformContinuous fun x : Œ± => x‚Åª¬π :=
  uniformContinuous_id.inv

@[to_additive]
theorem UniformContinuous.mul [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (hg : UniformContinuous g) : UniformContinuous fun x => f x * g x := by
  have : UniformContinuous fun x => f x / (g x)‚Åª¬π := hf.div hg.inv
  simp_all

@[to_additive]
theorem uniformContinuous_mul : UniformContinuous fun p : Œ± √ó Œ± => p.1 * p.2 :=
  uniformContinuous_fst.mul uniformContinuous_snd

@[to_additive]
theorem UniformContinuous.div_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (a : Œ±) : UniformContinuous fun x ‚Ü¶ f x / a :=
  hf.div uniformContinuous_const

@[to_additive]
theorem uniformContinuous_div_const (a : Œ±) : UniformContinuous fun b : Œ± => b / a :=
  uniformContinuous_id.div_const _

@[to_additive]
theorem Filter.Tendsto.uniformity_mul {Œπ : Type*} {f g : Œπ ‚Üí Œ± √ó Œ±} {l : Filter Œπ}
    (hf : Tendsto f l (ùì§ Œ±)) (hg : Tendsto g l (ùì§ Œ±)) :
    Tendsto (f * g) l (ùì§ Œ±) :=
  have : Tendsto (fun (p : (Œ± √ó Œ±) √ó (Œ± √ó Œ±)) ‚Ü¶ p.1 * p.2) (ùì§ Œ± √óÀ¢ ùì§ Œ±) (ùì§ Œ±) := by
    simpa [UniformContinuous, uniformity_prod_eq_prod] using uniformContinuous_mul (Œ± := Œ±)
  this.comp (hf.prodMk hg)

@[to_additive]
theorem Filter.Tendsto.uniformity_inv {Œπ : Type*} {f : Œπ ‚Üí Œ± √ó Œ±} {l : Filter Œπ}
    (hf : Tendsto f l (ùì§ Œ±)) :
    Tendsto (f‚Åª¬π) l (ùì§ Œ±) :=
  have : Tendsto (¬∑ ‚Åª¬π) (ùì§ Œ±) (ùì§ Œ±) := uniformContinuous_inv
  this.comp hf

@[to_additive]
theorem Filter.Tendsto.uniformity_inv_iff {Œπ : Type*} {f : Œπ ‚Üí Œ± √ó Œ±} {l : Filter Œπ} :
    Tendsto (f‚Åª¬π) l (ùì§ Œ±) ‚Üî Tendsto f l (ùì§ Œ±) :=
  ‚ü®fun H ‚Ü¶ inv_inv f ‚ñ∏ H.uniformity_inv, Filter.Tendsto.uniformity_inv‚ü©

@[to_additive]
theorem Filter.Tendsto.uniformity_div {Œπ : Type*} {f g : Œπ ‚Üí Œ± √ó Œ±} {l : Filter Œπ}
    (hf : Tendsto f l (ùì§ Œ±)) (hg : Tendsto g l (ùì§ Œ±)) :
    Tendsto (f / g) l (ùì§ Œ±) := by
  rw [div_eq_mul_inv]
  exact hf.uniformity_mul hg.uniformity_inv

/-- If `f : Œπ ‚Üí G √ó G` converges to the uniformity, then any `g : Œπ ‚Üí G √ó G` converges to the
uniformity iff `f * g` does. This is often useful when `f` is valued in the diagonal,
in which case its convergence is automatic. -/
@[to_additive /-- If `f : Œπ ‚Üí G √ó G` converges to the uniformity, then any `g : Œπ ‚Üí G √ó G`
converges to the uniformity iff `f + g` does. This is often useful when `f` is valued in the
diagonal, in which case its convergence is automatic. -/]
theorem Filter.Tendsto.uniformity_mul_iff_right {Œπ : Type*} {f g : Œπ ‚Üí Œ± √ó Œ±} {l : Filter Œπ}
    (hf : Tendsto f l (ùì§ Œ±)) :
    Tendsto (f * g) l (ùì§ Œ±) ‚Üî Tendsto g l (ùì§ Œ±) :=
  ‚ü®fun hfg ‚Ü¶ by simpa using hf.uniformity_inv.uniformity_mul hfg, hf.uniformity_mul‚ü©

/-- If `g : Œπ ‚Üí G √ó G` converges to the uniformity, then any `f : Œπ ‚Üí G √ó G` converges to the
uniformity iff `f * g` does. This is often useful when `g` is valued in the diagonal,
in which case its convergence is automatic. -/
@[to_additive /-- If `g : Œπ ‚Üí G √ó G` converges to the uniformity, then any `f : Œπ ‚Üí G √ó G`
converges to the uniformity iff `f + g` does. This is often useful when `g` is valued in the
diagonal, in which case its convergence is automatic. -/]
theorem Filter.Tendsto.uniformity_mul_iff_left {Œπ : Type*} {f g : Œπ ‚Üí Œ± √ó Œ±} {l : Filter Œπ}
    (hg : Tendsto g l (ùì§ Œ±)) :
    Tendsto (f * g) l (ùì§ Œ±) ‚Üî Tendsto f l (ùì§ Œ±) :=
  ‚ü®fun hfg ‚Ü¶ by simpa using hfg.uniformity_mul hg.uniformity_inv, fun hf ‚Ü¶ hf.uniformity_mul hg‚ü©

@[to_additive UniformContinuous.const_nsmul]
theorem UniformContinuous.pow_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f) :
    ‚àÄ n : ‚Ñï, UniformContinuous fun x => f x ^ n
  | 0 => by
    simp_rw [pow_zero]
    exact uniformContinuous_const
  | n + 1 => by
    simp_rw [pow_succ']
    exact hf.mul (hf.pow_const n)

@[to_additive uniformContinuous_const_nsmul]
theorem uniformContinuous_pow_const (n : ‚Ñï) : UniformContinuous fun x : Œ± => x ^ n :=
  uniformContinuous_id.pow_const n

@[to_additive UniformContinuous.const_zsmul]
theorem UniformContinuous.zpow_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f) :
    ‚àÄ n : ‚Ñ§, UniformContinuous fun x => f x ^ n
  | (n : ‚Ñï) => by
    simp_rw [zpow_natCast]
    exact hf.pow_const _
  | Int.negSucc n => by
    simp_rw [zpow_negSucc]
    exact (hf.pow_const _).inv

@[to_additive uniformContinuous_const_zsmul]
theorem uniformContinuous_zpow_const (n : ‚Ñ§) : UniformContinuous fun x : Œ± => x ^ n :=
  uniformContinuous_id.zpow_const n

@[to_additive]
instance (priority := 10) IsUniformGroup.to_topologicalGroup : IsTopologicalGroup Œ± where
  continuous_mul := uniformContinuous_mul.continuous
  continuous_inv := uniformContinuous_inv.continuous

@[deprecated (since := "2025-03-31")] alias UniformGroup.to_topologicalAddGroup :=
  IsUniformAddGroup.to_topologicalAddGroup
@[to_additive existing, deprecated
  (since := "2025-03-31")] alias
  UniformGroup.to_topologicalGroup := IsUniformGroup.to_topologicalGroup

@[to_additive]
instance Prod.instIsUniformGroup [UniformSpace Œ≤] [Group Œ≤] [IsUniformGroup Œ≤] :
    IsUniformGroup (Œ± √ó Œ≤) :=
  ‚ü®((uniformContinuous_fst.comp uniformContinuous_fst).div
          (uniformContinuous_fst.comp uniformContinuous_snd)).prodMk
      ((uniformContinuous_snd.comp uniformContinuous_fst).div
        (uniformContinuous_snd.comp uniformContinuous_snd))‚ü©

@[deprecated (since := "2025-03-31")] alias Prod.instUniformAddGroup :=
  Prod.instIsUniformAddGroup
@[to_additive existing, deprecated
  (since := "2025-03-31")] alias Prod.instUniformGroup := Prod.instIsUniformGroup

/-- The discrete uniformity makes a group a `IsUniformGroup. -/
@[to_additive /-- The discrete uniformity makes an additive group a `IsUniformAddGroup`. -/]
instance [UniformSpace Œ≤] [Group Œ≤] [DiscreteUniformity Œ≤] : IsUniformGroup Œ≤ where
  uniformContinuous_div := DiscreteUniformity.uniformContinuous (Œ≤ √ó Œ≤) fun p ‚Ü¶ p.1 / p.2

@[to_additive]
instance (priority := low) IsLeftOrRightUniformGroup.discreteUniformity [Group Œ≤] [UniformSpace Œ≤]
    [IsLeftOrRightUniformGroup Œ≤] [DiscreteTopology Œ≤] :
    DiscreteUniformity Œ≤ := by
  rw [discreteUniformity_iff_eq_principal_idRel]
  rcases ‚ÄπIsLeftOrRightUniformGroup Œ≤‚Ä∫
  ¬∑ rw [uniformity_eq_comap_mul_inv_nhds_one_swapped, nhds_discrete, comap_pure,
        principal_eq_iff_eq]
    ext ‚ü®x, y‚ü©
    simp [mul_inv_eq_one]
  ¬∑ rw [uniformity_eq_comap_inv_mul_nhds_one, nhds_discrete, comap_pure,
        principal_eq_iff_eq]
    ext ‚ü®x, y‚ü©
    simp [inv_mul_eq_one]

namespace MulOpposite

@[to_additive]
instance : IsUniformGroup Œ±·µê·µí·µñ :=
  ‚ü®uniformContinuous_op.comp
      ((uniformContinuous_unop.comp uniformContinuous_snd).inv.mul <|
        uniformContinuous_unop.comp uniformContinuous_fst)‚ü©

end MulOpposite

section LatticeOps

variable [Group Œ≤]

@[to_additive]
theorem isUniformGroup_sInf {us : Set (UniformSpace Œ≤)} (h : ‚àÄ u ‚àà us, @IsUniformGroup Œ≤ u _) :
    @IsUniformGroup Œ≤ (sInf us) _ :=
  @IsUniformGroup.mk Œ≤ (_) _ <|
    uniformContinuous_sInf_rng.mpr fun u hu =>
      uniformContinuous_sInf_dom‚ÇÇ hu hu (@IsUniformGroup.uniformContinuous_div Œ≤ u _ (h u hu))

@[deprecated (since := "2025-03-31")] alias uniformAddGroup_sInf := isUniformAddGroup_sInf
@[to_additive existing, deprecated
  (since := "2025-03-31")] alias uniformGroup_sInf := isUniformGroup_sInf

@[to_additive]
theorem isUniformGroup_iInf {Œπ : Sort*} {us' : Œπ ‚Üí UniformSpace Œ≤}
    (h' : ‚àÄ i, @IsUniformGroup Œ≤ (us' i) _) : @IsUniformGroup Œ≤ (‚®Ö i, us' i) _ := by
  rw [‚Üê sInf_range]
  exact isUniformGroup_sInf (Set.forall_mem_range.mpr h')

@[deprecated (since := "2025-03-31")] alias uniformAddGroup_iInf := isUniformAddGroup_iInf
@[to_additive existing, deprecated
  (since := "2025-03-31")] alias uniformGroup_iInf := isUniformGroup_iInf

@[to_additive]
theorem isUniformGroup_inf {u‚ÇÅ u‚ÇÇ : UniformSpace Œ≤} (h‚ÇÅ : @IsUniformGroup Œ≤ u‚ÇÅ _)
    (h‚ÇÇ : @IsUniformGroup Œ≤ u‚ÇÇ _) : @IsUniformGroup Œ≤ (u‚ÇÅ ‚äì u‚ÇÇ) _ := by
  rw [inf_eq_iInf]
  refine isUniformGroup_iInf fun b => ?_
  cases b <;> assumption

@[deprecated (since := "2025-03-31")] alias uniformAddGroup_inf := isUniformAddGroup_inf
@[to_additive existing, deprecated
  (since := "2025-03-31")] alias uniformGroup_inf := isUniformGroup_inf

end LatticeOps

section

@[to_additive]
instance IsUniformGroup.isRightUniformGroup : IsRightUniformGroup Œ± where
  uniformity_eq := by
    refine eq_of_forall_le_iff fun ùìï ‚Ü¶ ?_
    rw [nhds_eq_comap_uniformity, comap_comap, ‚Üê tendsto_iff_comap,
      ‚Üê (tendsto_diag_uniformity Prod.fst ùìï).uniformity_mul_iff_left, ‚Üê tendsto_id']
    congrm Tendsto ?_ _ _
    ext <;> simp

@[to_additive]
instance IsUniformGroup.isLeftUniformGroup : IsLeftUniformGroup Œ± where
  uniformity_eq := by
    refine eq_of_forall_le_iff fun ùìï ‚Ü¶ ?_
    rw [nhds_eq_comap_uniformity, comap_comap, ‚Üê tendsto_iff_comap,
      ‚Üê (tendsto_diag_uniformity Prod.fst ùìï).uniformity_mul_iff_right, ‚Üê tendsto_id']
    congrm Tendsto ?_ _ _
    ext <;> simp

@[to_additive]
theorem IsUniformGroup.ext {G : Type*} [Group G] {u v : UniformSpace G} (hu : @IsUniformGroup G u _)
    (hv : @IsUniformGroup G v _)
    (h : @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1) : u = v :=
  IsRightUniformGroup.ext inferInstance inferInstance h

@[deprecated (since := "2025-03-31")] alias UniformAddGroup.ext := IsUniformAddGroup.ext
@[to_additive existing UniformAddGroup.ext, deprecated (since := "2025-03-31")] alias
  UniformGroup.ext := IsUniformGroup.ext

@[to_additive]
theorem IsUniformGroup.ext_iff {G : Type*} [Group G] {u v : UniformSpace G}
    (hu : @IsUniformGroup G u _) (hv : @IsUniformGroup G v _) :
    u = v ‚Üî @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1 :=
  IsRightUniformGroup.ext_iff inferInstance inferInstance

@[deprecated (since := "2025-03-31")] alias UniformAddGroup.ext_iff :=
  IsUniformAddGroup.ext_iff
@[to_additive existing UniformAddGroup.ext_iff, deprecated (since := "2025-03-31")] alias
  UniformGroup.ext_iff := IsUniformGroup.ext_iff

end

section OfLeftAndRight

variable [UniformSpace Œ≤] [Group Œ≤] [IsLeftUniformGroup Œ≤] [IsRightUniformGroup Œ≤]

open Prod (snd) in
/-- Note: this assumes `[IsLeftUniformGroup Œ≤] [IsRightUniformGroup Œ≤]` instead of the more typical
(and equivalent) `[IsUniformGroup Œ≤]` because this is used in the proof of said equivalence. -/
@[to_additive /-- Note: this assumes `[IsLeftUniformAddGroup Œ≤] [IsRightUniformAddGroup Œ≤]`
instead of the more typical (and equivalent) `[IsUniformAddGroup Œ≤]` because this is used
in the proof of said equivalence. -/]
theorem tendsto_conj_comap_nhds_one :
    Tendsto (fun gx : Œ≤ √ó Œ≤ ‚Ü¶ gx.1 * gx.2 * gx.1‚Åª¬π) (comap snd (ùìù 1)) (ùìù 1) := by
  let œÜ : Œ≤ √ó Œ≤ ‚Üí Œ≤ := fun gx ‚Ü¶ gx.1 * gx.2 * gx.1‚Åª¬π
  let œà : Œ≤ √ó Œ≤ ‚âÉ Œ≤ √ó Œ≤ := (Equiv.refl Œ≤).prodShear (fun b ‚Ü¶ Equiv.mulLeft b)
  have œÜ_comp_œà_inv : œÜ ‚àò œà.symm = fun gx ‚Ü¶ gx.2 * gx.1‚Åª¬π := by ext; simp [œÜ, œà]
  have : comap snd (ùìù 1) = map œà.symm (ùì§ Œ≤) := by
    rw [‚Üê map_inj œà.injective, map_map, œà.self_comp_symm, map_id, ‚Üê comap_equiv_symm,
        comap_comap, uniformity_eq_comap_inv_mul_nhds_one]
    rfl
  rw [this, tendsto_map'_iff, uniformity_eq_comap_mul_inv_nhds_one, œÜ_comp_œà_inv]
  exact tendsto_comap

open Prod (fst snd) in
variable (Œ≤) in
@[to_additive]
instance (priority := 100) IsUniformGroup.of_left_right : IsUniformGroup Œ≤ where
  uniformContinuous_div := by
    let œÜ : (Œ≤ √ó Œ≤) √ó (Œ≤ √ó Œ≤) ‚Üí Œ≤ := fun ‚ü®‚ü®x‚ÇÅ, x‚ÇÇ‚ü©, ‚ü®y‚ÇÅ, y‚ÇÇ‚ü©‚ü© ‚Ü¶ x‚ÇÇ * y‚ÇÇ‚Åª¬π * y‚ÇÅ * x‚ÇÅ‚Åª¬π
    let œà : (Œ≤ √ó Œ≤) √ó (Œ≤ √ó Œ≤) ‚Üí Œ≤ := fun ‚ü®‚ü®x‚ÇÅ, x‚ÇÇ‚ü©, ‚ü®y‚ÇÅ, y‚ÇÇ‚ü©‚ü© ‚Ü¶ (x‚ÇÅ‚Åª¬π * x‚ÇÇ) * (y‚ÇÇ‚Åª¬π * y‚ÇÅ)
    let conj : Œ≤ √ó Œ≤ ‚Üí Œ≤ := fun gx ‚Ü¶ gx.1 * gx.2 * gx.1‚Åª¬π
    suffices Tendsto œÜ (ùì§ Œ≤ √óÀ¢ ùì§ Œ≤) (ùìù 1) by
      rw [UniformContinuous, uniformity_eq_comap_mul_inv_nhds_one Œ≤, tendsto_comap_iff,
        uniformity_prod_eq_prod, tendsto_map'_iff]
      simpa [Function.comp_def, div_eq_mul_inv, ‚Üê mul_assoc]
    have œÜ_œà_conj : œÜ = conj ‚àò (fun xy ‚Ü¶ ‚ü®xy.1.1, œà xy‚ü©) := by
      ext
      simp [œÜ, œà, conj, mul_assoc]
    rw [œÜ_œà_conj]
    refine tendsto_conj_comap_nhds_one.comp ?_
    rw [tendsto_comap_iff, ‚Üê one_mul 1]
    refine .mul ?_ ?_
    ¬∑ rw [uniformity_eq_comap_inv_mul_nhds_one]
      exact tendsto_comap.comp tendsto_fst
    ¬∑ rw [uniformity_eq_comap_inv_mul_nhds_one_swapped]
      exact tendsto_comap.comp tendsto_snd

theorem eventually_forall_conj_nhds_one {p : Œ± ‚Üí Prop}
    (hp : ‚àÄ·∂† x in ùìù 1, p x) :
    ‚àÄ·∂† x in ùìù 1, ‚àÄ g, p (g * x * g‚Åª¬π) := by
  simpa using tendsto_conj_comap_nhds_one.eventually hp

end OfLeftAndRight

section OfComm

variable (G : Type*) [CommGroup G] [UniformSpace G] [IsLeftOrRightUniformGroup G]

@[to_additive]
instance (priority := 100) IsUniformGroup.of_comm : IsUniformGroup G := by
  rcases ‚ÄπIsLeftOrRightUniformGroup G‚Ä∫
  ¬∑ have : IsLeftUniformGroup G := by
      constructor
      conv_rhs => congr; enter [x]; rw [mul_comm]
      exact uniformity_eq_comap_mul_inv_nhds_one G
    infer_instance
  ¬∑ have : IsRightUniformGroup G := by
      constructor
      conv_rhs => congr; enter [x]; rw [mul_comm]
      exact uniformity_eq_comap_inv_mul_nhds_one G
    infer_instance

end OfComm

end IsUniformGroup

section TopologicalCommGroup

universe u v w x

open Filter

variable (G : Type*) [CommGroup G]

variable [TopologicalSpace G] [IsTopologicalGroup G]
section

attribute [local instance] IsTopologicalGroup.rightUniformSpace

variable {G}

@[to_additive (attr := deprecated IsUniformGroup.of_comm (since := "2025-09-26"))]
theorem isUniformGroup_of_commGroup : IsUniformGroup G := by
  infer_instance

alias comm_topologicalGroup_is_uniform := isUniformGroup_of_commGroup
@[deprecated (since := "2025-03-30")]
alias uniformAddGroup_of_addCommGroup := isUniformAddGroup_of_addCommGroup
@[to_additive existing, deprecated (since := "2025-03-30")]
alias uniformGroup_of_commGroup := isUniformGroup_of_commGroup

open Set

end

@[to_additive (attr := deprecated IsRightUniformGroup.rightUniformSpace_eq (since := "2025-09-26"))]
alias IsUniformGroup.toUniformSpace_eq := IsRightUniformGroup.rightUniformSpace_eq

end TopologicalCommGroup

open Filter Set Function

section

variable {Œ± : Type*} {Œ≤ : Type*} {hom : Type*}
variable [TopologicalSpace Œ±] [Group Œ±] [IsTopologicalGroup Œ±]

-- Œ≤ is a dense subgroup of Œ±, inclusion is denoted by e
variable [TopologicalSpace Œ≤] [Group Œ≤]
variable [FunLike hom Œ≤ Œ±] [MonoidHomClass hom Œ≤ Œ±] {e : hom}

@[to_additive]
theorem tendsto_div_comap_self (de : IsDenseInducing e) (x‚ÇÄ : Œ±) :
    Tendsto (fun t : Œ≤ √ó Œ≤ => t.2 / t.1) ((comap fun p : Œ≤ √ó Œ≤ => (e p.1, e p.2)) <| ùìù (x‚ÇÄ, x‚ÇÄ))
      (ùìù 1) := by
  have comm : ((fun x : Œ± √ó Œ± => x.2 / x.1) ‚àò fun t : Œ≤ √ó Œ≤ => (e t.1, e t.2)) =
      e ‚àò fun t : Œ≤ √ó Œ≤ => t.2 / t.1 := by
    ext t
    simp
  have lim : Tendsto (fun x : Œ± √ó Œ± => x.2 / x.1) (ùìù (x‚ÇÄ, x‚ÇÄ)) (ùìù (e 1)) := by
    simpa using (continuous_div'.comp (@continuous_swap Œ± Œ± _ _)).tendsto (x‚ÇÄ, x‚ÇÄ)
  simpa using de.tendsto_comap_nhds_nhds lim comm

end
