/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro
-/
import Mathlib.Data.NNReal.Defs
import Mathlib.Topology.Algebra.Order.Field
import Mathlib.Topology.Algebra.UniformGroup.Defs
import Mathlib.Topology.Bornology.Real
import Mathlib.Topology.Instances.Int
import Mathlib.Topology.Order.MonotoneContinuity
import Mathlib.Topology.Order.Real
import Mathlib.Topology.UniformSpace.Real

/-!
# Topological algebra properties of ‚Ñù

This file defines topological field/(semi)ring structures on the
(extended) (nonnegative) reals and shows the algebraic operations are
(uniformly) continuous.

It also includes a bit of more general topological theory of the reals,
needed to define the structures and prove continuity.
-/

assert_not_exists StarRing UniformContinuousConstSMul UniformOnFun

noncomputable section

universe u v w

variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

instance : NoncompactSpace ‚Ñù := Int.isClosedEmbedding_coe_real.noncompactSpace

theorem Real.uniformContinuous_add : UniformContinuous fun p : ‚Ñù √ó ‚Ñù => p.1 + p.2 :=
  Metric.uniformContinuous_iff.2 fun _Œµ Œµ0 =>
    let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_add_continuous_lemma abs Œµ0
    ‚ü®Œ¥, Œ¥0, fun _ _ h =>
      let ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := max_lt_iff.1 h
      HŒ¥ h‚ÇÅ h‚ÇÇ‚ü©

theorem Real.uniformContinuous_neg : UniformContinuous (@Neg.neg ‚Ñù _) :=
  Metric.uniformContinuous_iff.2 fun Œµ Œµ0 =>
    ‚ü®_, Œµ0, fun _ _ h => by simpa only [abs_sub_comm, Real.dist_eq, neg_sub_neg] using h‚ü©

instance : UniformAddGroup ‚Ñù :=
  UniformAddGroup.mk' Real.uniformContinuous_add Real.uniformContinuous_neg

theorem Real.uniformContinuous_const_mul {x : ‚Ñù} : UniformContinuous (x * ¬∑) :=
  uniformContinuous_of_continuousAt_zero (DistribMulAction.toAddMonoidHom ‚Ñù x)
    (continuous_const_smul x).continuousAt

-- short-circuit type class inference
instance : IsTopologicalAddGroup ‚Ñù := by infer_instance
instance : IsTopologicalRing ‚Ñù := inferInstance
instance : TopologicalDivisionRing ‚Ñù := inferInstance

namespace EReal

instance : ContinuousNeg EReal := ‚ü®negOrderIso.continuous‚ü©

end EReal

namespace NNReal

/-!
Instances for the following typeclasses are defined:

* `IsTopologicalSemiring ‚Ñù‚â•0`
* `ContinuousSub ‚Ñù‚â•0`
* `HasContinuousInv‚ÇÄ ‚Ñù‚â•0` (continuity of `x‚Åª¬π` away from `0`)
* `ContinuousSMul ‚Ñù‚â•0 Œ±` (whenever `Œ±` has a continuous `MulAction ‚Ñù Œ±`)

Everything is inherited from the corresponding structures on the reals.
-/
-- short-circuit type class inference
instance : IsTopologicalSemiring ‚Ñù‚â•0 where
  toContinuousAdd := continuousAdd_induced toRealHom
  toContinuousMul := continuousMul_induced toRealHom

instance : ContinuousSub ‚Ñù‚â•0 :=
  ‚ü®((continuous_coe.fst'.sub continuous_coe.snd').max continuous_const).subtype_mk _‚ü©

instance : HasContinuousInv‚ÇÄ ‚Ñù‚â•0 := inferInstance

variable {Œ± : Type*}

instance [TopologicalSpace Œ±] [MulAction ‚Ñù Œ±] [ContinuousSMul ‚Ñù Œ±] :
    ContinuousSMul ‚Ñù‚â•0 Œ± where
  continuous_smul := continuous_induced_dom.fst'.smul continuous_snd

end NNReal

namespace ENNReal

open Filter NNReal Set Topology

theorem isEmbedding_coe : IsEmbedding ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) :=
  coe_strictMono.isEmbedding_of_ordConnected <| by rw [range_coe']; exact ordConnected_Iio

@[norm_cast]
theorem tendsto_coe {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0} {a : ‚Ñù‚â•0} :
    Tendsto (fun a => (m a : ‚Ñù‚â•0‚àû)) f (ùìù ‚Üëa) ‚Üî Tendsto m f (ùìù a) :=
  isEmbedding_coe.tendsto_nhds_iff.symm

theorem isOpenEmbedding_coe : IsOpenEmbedding ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) :=
  ‚ü®isEmbedding_coe, by rw [range_coe']; exact isOpen_Iio‚ü©

theorem nhds_coe_coe {r p : ‚Ñù‚â•0} :
    ùìù ((r : ‚Ñù‚â•0‚àû), (p : ‚Ñù‚â•0‚àû)) = (ùìù (r, p)).map fun p : ‚Ñù‚â•0 √ó ‚Ñù‚â•0 => (‚Üëp.1, ‚Üëp.2) :=
  ((isOpenEmbedding_coe.prodMap isOpenEmbedding_coe).map_nhds_eq (r, p)).symm

instance : ContinuousAdd ‚Ñù‚â•0‚àû := by
  refine ‚ü®continuous_iff_continuousAt.2 ?_‚ü©
  rintro ‚ü®_ | a, b‚ü©
  ¬∑ exact tendsto_nhds_top_mono' continuousAt_fst fun p => le_add_right le_rfl
  rcases b with (_ | b)
  ¬∑ exact tendsto_nhds_top_mono' continuousAt_snd fun p => le_add_left le_rfl
  simp only [ContinuousAt, some_eq_coe, nhds_coe_coe, ‚Üê coe_add, tendsto_map'_iff,
    Function.comp_def, tendsto_coe, tendsto_add]

instance : ContinuousInv ‚Ñù‚â•0‚àû := ‚ü®OrderIso.invENNReal.continuous‚ü©

end ENNReal
