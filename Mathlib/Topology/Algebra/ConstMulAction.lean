/-
Copyright (c) 2021 Alex Kontorovich, Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alex Kontorovich, Heather Macbeth
-/
import Mathlib.Topology.Algebra.Constructions
import Mathlib.Topology.Homeomorph
import Mathlib.GroupTheory.GroupAction.Basic
import Mathlib.Topology.Bases
import Mathlib.Topology.Support

#align_import topology.algebra.const_mul_action from "leanprover-community/mathlib"@"d90e4e186f1d18e375dcd4e5b5f6364b01cb3e46"

/-!
# Monoid actions continuous in the second variable

In this file we define class `ContinuousConstSMul`. We say `ContinuousConstSMul Œì T` if
`Œì` acts on `T` and for each `Œ≥`, the map `x ‚Ü¶ Œ≥ ‚Ä¢ x` is continuous. (This differs from
`ContinuousSMul`, which requires simultaneous continuity in both variables.)

## Main definitions

* `ContinuousConstSMul Œì T` : typeclass saying that the map `x ‚Ü¶ Œ≥ ‚Ä¢ x` is continuous on `T`;
* `ProperlyDiscontinuousSMul`: says that the scalar multiplication `(‚Ä¢) : Œì ‚Üí T ‚Üí T`
  is properly discontinuous, that is, for any pair of compact sets `K, L` in `T`, only finitely
  many `Œ≥:Œì` move `K` to have nontrivial intersection with `L`.
* `Homeomorph.smul`: scalar multiplication by an element of a group `Œì` acting on `T`
  is a homeomorphism of `T`.

## Main results

* `isOpenMap_quotient_mk'_mul` : The quotient map by a group action is open.
* `t2Space_of_properlyDiscontinuousSMul_of_t2Space` : The quotient by a discontinuous group
  action of a locally compact t2 space is t2.

## Tags

Hausdorff, discrete group, properly discontinuous, quotient space

-/

set_option autoImplicit true


open Topology Pointwise Filter Set TopologicalSpace

/-- Class `ContinuousConstSMul Œì T` says that the scalar multiplication `(‚Ä¢) : Œì ‚Üí T ‚Üí T`
is continuous in the second argument. We use the same class for all kinds of multiplicative
actions, including (semi)modules and algebras.

Note that both `ContinuousConstSMul Œ± Œ±` and `ContinuousConstSMul Œ±·µê·µí·µñ Œ±` are
weaker versions of `ContinuousMul Œ±`. -/
class ContinuousConstSMul (Œì : Type*) (T : Type*) [TopologicalSpace T] [SMul Œì T] : Prop where
  /-- The scalar multiplication `(‚Ä¢) : Œì ‚Üí T ‚Üí T` is continuous in the second argument. -/
  continuous_const_smul : ‚àÄ Œ≥ : Œì, Continuous fun x : T => Œ≥ ‚Ä¢ x
#align has_continuous_const_smul ContinuousConstSMul

/-- Class `ContinuousConstVAdd Œì T` says that the additive action `(+·µ•) : Œì ‚Üí T ‚Üí T`
is continuous in the second argument. We use the same class for all kinds of additive actions,
including (semi)modules and algebras.

Note that both `ContinuousConstVAdd Œ± Œ±` and `ContinuousConstVAdd Œ±·µê·µí·µñ Œ±` are
weaker versions of `ContinuousVAdd Œ±`. -/
class ContinuousConstVAdd (Œì : Type*) (T : Type*) [TopologicalSpace T] [VAdd Œì T] : Prop where
  /-- The additive action `(+·µ•) : Œì ‚Üí T ‚Üí T` is continuous in the second argument. -/
  continuous_const_vadd : ‚àÄ Œ≥ : Œì, Continuous fun x : T => Œ≥ +·µ• x
#align has_continuous_const_vadd ContinuousConstVAdd

attribute [to_additive] ContinuousConstSMul

export ContinuousConstSMul (continuous_const_smul)
export ContinuousConstVAdd (continuous_const_vadd)

variable {M Œ± Œ≤ : Type*}

section SMul

variable [TopologicalSpace Œ±] [SMul M Œ±] [ContinuousConstSMul M Œ±]

@[to_additive]
theorem Filter.Tendsto.const_smul {f : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} {a : Œ±} (hf : Tendsto f l (ùìù a))
    (c : M) : Tendsto (fun x => c ‚Ä¢ f x) l (ùìù (c ‚Ä¢ a)) :=
  ((continuous_const_smul _).tendsto _).comp hf
#align filter.tendsto.const_smul Filter.Tendsto.const_smul
#align filter.tendsto.const_vadd Filter.Tendsto.const_vadd

variable [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí M} {g : Œ≤ ‚Üí Œ±} {b : Œ≤} {s : Set Œ≤}

@[to_additive]
nonrec theorem ContinuousWithinAt.const_smul (hg : ContinuousWithinAt g s b) (c : M) :
    ContinuousWithinAt (fun x => c ‚Ä¢ g x) s b :=
  hg.const_smul c
#align continuous_within_at.const_smul ContinuousWithinAt.const_smul
#align continuous_within_at.const_vadd ContinuousWithinAt.const_vadd

@[to_additive (attr := fun_prop)]
nonrec theorem ContinuousAt.const_smul (hg : ContinuousAt g b) (c : M) :
    ContinuousAt (fun x => c ‚Ä¢ g x) b :=
  hg.const_smul c
#align continuous_at.const_smul ContinuousAt.const_smul
#align continuous_at.const_vadd ContinuousAt.const_vadd

@[to_additive (attr := fun_prop)]
theorem ContinuousOn.const_smul (hg : ContinuousOn g s) (c : M) :
    ContinuousOn (fun x => c ‚Ä¢ g x) s := fun x hx => (hg x hx).const_smul c
#align continuous_on.const_smul ContinuousOn.const_smul
#align continuous_on.const_vadd ContinuousOn.const_vadd

@[to_additive (attr := continuity, fun_prop)]
theorem Continuous.const_smul (hg : Continuous g) (c : M) : Continuous fun x => c ‚Ä¢ g x :=
  (continuous_const_smul _).comp hg
#align continuous.const_smul Continuous.const_smul
#align continuous.const_vadd Continuous.const_vadd

/-- If a scalar is central, then its right action is continuous when its left action is. -/
@[to_additive "If an additive action is central, then its right action is continuous when its left
action is."]
instance ContinuousConstSMul.op [SMul M·µê·µí·µñ Œ±] [IsCentralScalar M Œ±] :
    ContinuousConstSMul M·µê·µí·µñ Œ± :=
  ‚ü®MulOpposite.rec' fun c => by simpa only [op_smul_eq_smul] using continuous_const_smul c‚ü©
#align has_continuous_const_smul.op ContinuousConstSMul.op
#align has_continuous_const_vadd.op ContinuousConstVAdd.op

@[to_additive]
instance MulOpposite.continuousConstSMul : ContinuousConstSMul M Œ±·µê·µí·µñ :=
  ‚ü®fun c => MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.const_smul c‚ü©
#align mul_opposite.has_continuous_const_smul MulOpposite.continuousConstSMul
#align add_opposite.has_continuous_const_vadd AddOpposite.continuousConstVAdd

@[to_additive]
instance : ContinuousConstSMul M Œ±·µí·µà := ‚ÄπContinuousConstSMul M Œ±‚Ä∫

@[to_additive]
instance OrderDual.continuousConstSMul' : ContinuousConstSMul M·µí·µà Œ± :=
  ‚ÄπContinuousConstSMul M Œ±‚Ä∫
#align order_dual.has_continuous_const_smul' OrderDual.continuousConstSMul'
#align order_dual.has_continuous_const_vadd' OrderDual.continuousConstVAdd'

@[to_additive]
instance Prod.continuousConstSMul [SMul M Œ≤] [ContinuousConstSMul M Œ≤] :
    ContinuousConstSMul M (Œ± √ó Œ≤) :=
  ‚ü®fun _ => (continuous_fst.const_smul _).prod_mk (continuous_snd.const_smul _)‚ü©

@[to_additive]
instance {Œπ : Type*} {Œ≥ : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (Œ≥ i)] [‚àÄ i, SMul M (Œ≥ i)]
    [‚àÄ i, ContinuousConstSMul M (Œ≥ i)] : ContinuousConstSMul M (‚àÄ i, Œ≥ i) :=
  ‚ü®fun _ => continuous_pi fun i => (continuous_apply i).const_smul _‚ü©

@[to_additive]
theorem IsCompact.smul {Œ± Œ≤} [SMul Œ± Œ≤] [TopologicalSpace Œ≤] [ContinuousConstSMul Œ± Œ≤] (a : Œ±)
    {s : Set Œ≤} (hs : IsCompact s) : IsCompact (a ‚Ä¢ s) :=
  hs.image (continuous_id.const_smul a)
#align is_compact.smul IsCompact.smul
#align is_compact.vadd IsCompact.vadd

end SMul

section Monoid

variable [TopologicalSpace Œ±]
variable [Monoid M] [MulAction M Œ±] [ContinuousConstSMul M Œ±]

@[to_additive]
instance Units.continuousConstSMul : ContinuousConstSMul MÀ£ Œ± where
  continuous_const_smul m := (continuous_const_smul (m : M) : _)
#align units.has_continuous_const_smul Units.continuousConstSMul
#align add_units.has_continuous_const_vadd AddUnits.continuousConstVAdd

@[to_additive]
theorem smul_closure_subset (c : M) (s : Set Œ±) : c ‚Ä¢ closure s ‚äÜ closure (c ‚Ä¢ s) :=
  ((Set.mapsTo_image _ _).closure <| continuous_const_smul c).image_subset
#align smul_closure_subset smul_closure_subset
#align vadd_closure_subset vadd_closure_subset

@[to_additive]
theorem smul_closure_orbit_subset (c : M) (x : Œ±) :
    c ‚Ä¢ closure (MulAction.orbit M x) ‚äÜ closure (MulAction.orbit M x) :=
  (smul_closure_subset c _).trans <| closure_mono <| MulAction.smul_orbit_subset _ _
#align smul_closure_orbit_subset smul_closure_orbit_subset
#align vadd_closure_orbit_subset vadd_closure_orbit_subset

theorem isClosed_setOf_map_smul [Monoid N] (Œ± Œ≤) [MulAction M Œ±] [MulAction N Œ≤]
    [TopologicalSpace Œ≤] [T2Space Œ≤] [ContinuousConstSMul N Œ≤] (œÉ : M ‚Üí N) :
    IsClosed { f : Œ± ‚Üí Œ≤ | ‚àÄ c x, f (c ‚Ä¢ x) = œÉ c ‚Ä¢ f x } := by
  simp only [Set.setOf_forall]
  exact isClosed_iInter fun c => isClosed_iInter fun x =>
    isClosed_eq (continuous_apply _) ((continuous_apply _).const_smul _)
#align is_closed_set_of_map_smul isClosed_setOf_map_smul‚Çì

end Monoid

section Group

variable {G : Type*} [TopologicalSpace Œ±] [Group G] [MulAction G Œ±] [ContinuousConstSMul G Œ±]

@[to_additive]
theorem tendsto_const_smul_iff {f : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} {a : Œ±} (c : G) :
    Tendsto (fun x => c ‚Ä¢ f x) l (ùìù <| c ‚Ä¢ a) ‚Üî Tendsto f l (ùìù a) :=
  ‚ü®fun h => by simpa only [inv_smul_smul] using h.const_smul c‚Åª¬π, fun h => h.const_smul _‚ü©
#align tendsto_const_smul_iff tendsto_const_smul_iff
#align tendsto_const_vadd_iff tendsto_const_vadd_iff

variable [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {b : Œ≤} {s : Set Œ≤}

@[to_additive]
theorem continuousWithinAt_const_smul_iff (c : G) :
    ContinuousWithinAt (fun x => c ‚Ä¢ f x) s b ‚Üî ContinuousWithinAt f s b :=
  tendsto_const_smul_iff c
#align continuous_within_at_const_smul_iff continuousWithinAt_const_smul_iff
#align continuous_within_at_const_vadd_iff continuousWithinAt_const_vadd_iff

@[to_additive]
theorem continuousOn_const_smul_iff (c : G) :
    ContinuousOn (fun x => c ‚Ä¢ f x) s ‚Üî ContinuousOn f s :=
  forall‚ÇÇ_congr fun _ _ => continuousWithinAt_const_smul_iff c
#align continuous_on_const_smul_iff continuousOn_const_smul_iff
#align continuous_on_const_vadd_iff continuousOn_const_vadd_iff

@[to_additive]
theorem continuousAt_const_smul_iff (c : G) :
    ContinuousAt (fun x => c ‚Ä¢ f x) b ‚Üî ContinuousAt f b :=
  tendsto_const_smul_iff c
#align continuous_at_const_smul_iff continuousAt_const_smul_iff
#align continuous_at_const_vadd_iff continuousAt_const_vadd_iff

@[to_additive]
theorem continuous_const_smul_iff (c : G) : (Continuous fun x => c ‚Ä¢ f x) ‚Üî Continuous f := by
  simp only [continuous_iff_continuousAt, continuousAt_const_smul_iff]
#align continuous_const_smul_iff continuous_const_smul_iff
#align continuous_const_vadd_iff continuous_const_vadd_iff

/-- The homeomorphism given by scalar multiplication by a given element of a group `Œì` acting on
  `T` is a homeomorphism from `T` to itself. -/
@[to_additive]
def Homeomorph.smul (Œ≥ : G) : Œ± ‚âÉ‚Çú Œ± where
  toEquiv := MulAction.toPerm Œ≥
  continuous_toFun := continuous_const_smul Œ≥
  continuous_invFun := continuous_const_smul Œ≥‚Åª¬π
#align homeomorph.smul Homeomorph.smul
#align homeomorph.vadd Homeomorph.vadd

/-- The homeomorphism given by affine-addition by an element of an additive group `Œì` acting on
  `T` is a homeomorphism from `T` to itself. -/
add_decl_doc Homeomorph.vadd

@[to_additive]
theorem isOpenMap_smul (c : G) : IsOpenMap fun x : Œ± => c ‚Ä¢ x :=
  (Homeomorph.smul c).isOpenMap
#align is_open_map_smul isOpenMap_smul
#align is_open_map_vadd isOpenMap_vadd

@[to_additive]
theorem IsOpen.smul {s : Set Œ±} (hs : IsOpen s) (c : G) : IsOpen (c ‚Ä¢ s) :=
  isOpenMap_smul c s hs
#align is_open.smul IsOpen.smul
#align is_open.vadd IsOpen.vadd

@[to_additive]
theorem isClosedMap_smul (c : G) : IsClosedMap fun x : Œ± => c ‚Ä¢ x :=
  (Homeomorph.smul c).isClosedMap
#align is_closed_map_smul isClosedMap_smul
#align is_closed_map_vadd isClosedMap_vadd

@[to_additive]
theorem IsClosed.smul {s : Set Œ±} (hs : IsClosed s) (c : G) : IsClosed (c ‚Ä¢ s) :=
  isClosedMap_smul c s hs
#align is_closed.smul IsClosed.smul
#align is_closed.vadd IsClosed.vadd

@[to_additive]
theorem closure_smul (c : G) (s : Set Œ±) : closure (c ‚Ä¢ s) = c ‚Ä¢ closure s :=
  ((Homeomorph.smul c).image_closure s).symm
#align closure_smul closure_smul
#align closure_vadd closure_vadd

@[to_additive]
theorem Dense.smul (c : G) {s : Set Œ±} (hs : Dense s) : Dense (c ‚Ä¢ s) := by
  rw [dense_iff_closure_eq] at hs ‚ä¢; rw [closure_smul, hs, smul_set_univ]
#align dense.smul Dense.smul
#align dense.vadd Dense.vadd

@[to_additive]
theorem interior_smul (c : G) (s : Set Œ±) : interior (c ‚Ä¢ s) = c ‚Ä¢ interior s :=
  ((Homeomorph.smul c).image_interior s).symm
#align interior_smul interior_smul
#align interior_vadd interior_vadd

end Group

section GroupWithZero

variable {G‚ÇÄ : Type*} [TopologicalSpace Œ±] [GroupWithZero G‚ÇÄ] [MulAction G‚ÇÄ Œ±]
  [ContinuousConstSMul G‚ÇÄ Œ±]

theorem tendsto_const_smul_iff‚ÇÄ {f : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} {a : Œ±} {c : G‚ÇÄ} (hc : c ‚â† 0) :
    Tendsto (fun x => c ‚Ä¢ f x) l (ùìù <| c ‚Ä¢ a) ‚Üî Tendsto f l (ùìù a) :=
  tendsto_const_smul_iff (Units.mk0 c hc)
#align tendsto_const_smul_iff‚ÇÄ tendsto_const_smul_iff‚ÇÄ

variable [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {b : Œ≤} {c : G‚ÇÄ} {s : Set Œ≤}

theorem continuousWithinAt_const_smul_iff‚ÇÄ (hc : c ‚â† 0) :
    ContinuousWithinAt (fun x => c ‚Ä¢ f x) s b ‚Üî ContinuousWithinAt f s b :=
  tendsto_const_smul_iff (Units.mk0 c hc)
#align continuous_within_at_const_smul_iff‚ÇÄ continuousWithinAt_const_smul_iff‚ÇÄ

theorem continuousOn_const_smul_iff‚ÇÄ (hc : c ‚â† 0) :
    ContinuousOn (fun x => c ‚Ä¢ f x) s ‚Üî ContinuousOn f s :=
  continuousOn_const_smul_iff (Units.mk0 c hc)
#align continuous_on_const_smul_iff‚ÇÄ continuousOn_const_smul_iff‚ÇÄ

theorem continuousAt_const_smul_iff‚ÇÄ (hc : c ‚â† 0) :
    ContinuousAt (fun x => c ‚Ä¢ f x) b ‚Üî ContinuousAt f b :=
  continuousAt_const_smul_iff (Units.mk0 c hc)
#align continuous_at_const_smul_iff‚ÇÄ continuousAt_const_smul_iff‚ÇÄ

theorem continuous_const_smul_iff‚ÇÄ (hc : c ‚â† 0) : (Continuous fun x => c ‚Ä¢ f x) ‚Üî Continuous f :=
  continuous_const_smul_iff (Units.mk0 c hc)
#align continuous_const_smul_iff‚ÇÄ continuous_const_smul_iff‚ÇÄ

/-- Scalar multiplication by a non-zero element of a group with zero acting on `Œ±` is a
homeomorphism from `Œ±` onto itself. -/
@[simps! (config := .asFn) apply]
protected def Homeomorph.smulOfNeZero (c : G‚ÇÄ) (hc : c ‚â† 0) : Œ± ‚âÉ‚Çú Œ± :=
  Homeomorph.smul (Units.mk0 c hc)
#align homeomorph.smul_of_ne_zero Homeomorph.smulOfNeZero

@[simp]
theorem Homeomorph.smulOfNeZero_symm_apply {c : G‚ÇÄ} (hc : c ‚â† 0) :
    ‚áë(Homeomorph.smulOfNeZero c hc).symm = (c‚Åª¬π ‚Ä¢ ¬∑ : Œ± ‚Üí Œ±) :=
  rfl

theorem isOpenMap_smul‚ÇÄ {c : G‚ÇÄ} (hc : c ‚â† 0) : IsOpenMap fun x : Œ± => c ‚Ä¢ x :=
  (Homeomorph.smulOfNeZero c hc).isOpenMap
#align is_open_map_smul‚ÇÄ isOpenMap_smul‚ÇÄ

theorem IsOpen.smul‚ÇÄ {c : G‚ÇÄ} {s : Set Œ±} (hs : IsOpen s) (hc : c ‚â† 0) : IsOpen (c ‚Ä¢ s) :=
  isOpenMap_smul‚ÇÄ hc s hs
#align is_open.smul‚ÇÄ IsOpen.smul‚ÇÄ

theorem interior_smul‚ÇÄ {c : G‚ÇÄ} (hc : c ‚â† 0) (s : Set Œ±) : interior (c ‚Ä¢ s) = c ‚Ä¢ interior s :=
  ((Homeomorph.smulOfNeZero c hc).image_interior s).symm
#align interior_smul‚ÇÄ interior_smul‚ÇÄ

theorem closure_smul‚ÇÄ' {c : G‚ÇÄ} (hc : c ‚â† 0) (s : Set Œ±) :
    closure (c ‚Ä¢ s) = c ‚Ä¢ closure s :=
  ((Homeomorph.smulOfNeZero c hc).image_closure s).symm

theorem closure_smul‚ÇÄ {E} [Zero E] [MulActionWithZero G‚ÇÄ E] [TopologicalSpace E] [T1Space E]
    [ContinuousConstSMul G‚ÇÄ E] (c : G‚ÇÄ) (s : Set E) : closure (c ‚Ä¢ s) = c ‚Ä¢ closure s := by
  rcases eq_or_ne c 0 with (rfl | hc)
  ¬∑ rcases eq_empty_or_nonempty s with (rfl | hs)
    ¬∑ simp
    ¬∑ rw [zero_smul_set hs, zero_smul_set hs.closure]
      exact closure_singleton
  ¬∑ exact closure_smul‚ÇÄ' hc s
#align closure_smul‚ÇÄ closure_smul‚ÇÄ

/-- `smul` is a closed map in the second argument.

The lemma that `smul` is a closed map in the first argument (for a normed space over a complete
normed field) is `isClosedMap_smul_left` in `Analysis.NormedSpace.FiniteDimension`. -/
theorem isClosedMap_smul_of_ne_zero {c : G‚ÇÄ} (hc : c ‚â† 0) : IsClosedMap fun x : Œ± => c ‚Ä¢ x :=
  (Homeomorph.smulOfNeZero c hc).isClosedMap
#align is_closed_map_smul_of_ne_zero isClosedMap_smul_of_ne_zero

theorem IsClosed.smul_of_ne_zero {c : G‚ÇÄ} {s : Set Œ±} (hs : IsClosed s) (hc : c ‚â† 0) :
    IsClosed (c ‚Ä¢ s) :=
  isClosedMap_smul_of_ne_zero hc s hs
#align is_closed.smul_of_ne_zero IsClosed.smul_of_ne_zero

/-- `smul` is a closed map in the second argument.

The lemma that `smul` is a closed map in the first argument (for a normed space over a complete
normed field) is `isClosedMap_smul_left` in `Analysis.NormedSpace.FiniteDimension`. -/
theorem isClosedMap_smul‚ÇÄ {E : Type*} [Zero E] [MulActionWithZero G‚ÇÄ E] [TopologicalSpace E]
    [T1Space E] [ContinuousConstSMul G‚ÇÄ E] (c : G‚ÇÄ) : IsClosedMap fun x : E => c ‚Ä¢ x := by
  rcases eq_or_ne c 0 with (rfl | hne)
  ¬∑ simp only [zero_smul]
    exact isClosedMap_const
  ¬∑ exact (Homeomorph.smulOfNeZero c hne).isClosedMap
#align is_closed_map_smul‚ÇÄ isClosedMap_smul‚ÇÄ

theorem IsClosed.smul‚ÇÄ {E : Type*} [Zero E] [MulActionWithZero G‚ÇÄ E] [TopologicalSpace E]
    [T1Space E] [ContinuousConstSMul G‚ÇÄ E] (c : G‚ÇÄ) {s : Set E} (hs : IsClosed s) :
    IsClosed (c ‚Ä¢ s) :=
  isClosedMap_smul‚ÇÄ c s hs
#align is_closed.smul‚ÇÄ IsClosed.smul‚ÇÄ

theorem HasCompactMulSupport.comp_smul {Œ≤ : Type*} [One Œ≤] {f : Œ± ‚Üí Œ≤} (h : HasCompactMulSupport f)
    {c : G‚ÇÄ} (hc : c ‚â† 0) : HasCompactMulSupport fun x => f (c ‚Ä¢ x) :=
  h.comp_homeomorph (Homeomorph.smulOfNeZero c hc)
#align has_compact_mul_support.comp_smul HasCompactMulSupport.comp_smul

theorem HasCompactSupport.comp_smul {Œ≤ : Type*} [Zero Œ≤] {f : Œ± ‚Üí Œ≤} (h : HasCompactSupport f)
    {c : G‚ÇÄ} (hc : c ‚â† 0) : HasCompactSupport fun x => f (c ‚Ä¢ x) :=
  h.comp_homeomorph (Homeomorph.smulOfNeZero c hc)
#align has_compact_support.comp_smul HasCompactSupport.comp_smul

attribute [to_additive existing HasCompactSupport.comp_smul] HasCompactMulSupport.comp_smul

end GroupWithZero

namespace IsUnit

variable [Monoid M] [TopologicalSpace Œ±] [MulAction M Œ±] [ContinuousConstSMul M Œ±]

nonrec theorem tendsto_const_smul_iff {f : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} {a : Œ±} {c : M} (hc : IsUnit c) :
    Tendsto (fun x => c ‚Ä¢ f x) l (ùìù <| c ‚Ä¢ a) ‚Üî Tendsto f l (ùìù a) :=
  let ‚ü®u, hu‚ü© := hc
  hu ‚ñ∏ tendsto_const_smul_iff u
#align is_unit.tendsto_const_smul_iff IsUnit.tendsto_const_smul_iff

variable [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {b : Œ≤} {c : M} {s : Set Œ≤}

nonrec theorem continuousWithinAt_const_smul_iff (hc : IsUnit c) :
    ContinuousWithinAt (fun x => c ‚Ä¢ f x) s b ‚Üî ContinuousWithinAt f s b :=
  let ‚ü®u, hu‚ü© := hc
  hu ‚ñ∏ continuousWithinAt_const_smul_iff u
#align is_unit.continuous_within_at_const_smul_iff IsUnit.continuousWithinAt_const_smul_iff

nonrec theorem continuousOn_const_smul_iff (hc : IsUnit c) :
    ContinuousOn (fun x => c ‚Ä¢ f x) s ‚Üî ContinuousOn f s :=
  let ‚ü®u, hu‚ü© := hc
  hu ‚ñ∏ continuousOn_const_smul_iff u
#align is_unit.continuous_on_const_smul_iff IsUnit.continuousOn_const_smul_iff

nonrec theorem continuousAt_const_smul_iff (hc : IsUnit c) :
    ContinuousAt (fun x => c ‚Ä¢ f x) b ‚Üî ContinuousAt f b :=
  let ‚ü®u, hu‚ü© := hc
  hu ‚ñ∏ continuousAt_const_smul_iff u
#align is_unit.continuous_at_const_smul_iff IsUnit.continuousAt_const_smul_iff

nonrec theorem continuous_const_smul_iff (hc : IsUnit c) :
    (Continuous fun x => c ‚Ä¢ f x) ‚Üî Continuous f :=
  let ‚ü®u, hu‚ü© := hc
  hu ‚ñ∏ continuous_const_smul_iff u
#align is_unit.continuous_const_smul_iff IsUnit.continuous_const_smul_iff

nonrec theorem isOpenMap_smul (hc : IsUnit c) : IsOpenMap fun x : Œ± => c ‚Ä¢ x :=
  let ‚ü®u, hu‚ü© := hc
  hu ‚ñ∏ isOpenMap_smul u
#align is_unit.is_open_map_smul IsUnit.isOpenMap_smul

nonrec theorem isClosedMap_smul (hc : IsUnit c) : IsClosedMap fun x : Œ± => c ‚Ä¢ x :=
  let ‚ü®u, hu‚ü© := hc
  hu ‚ñ∏ isClosedMap_smul u
#align is_unit.is_closed_map_smul IsUnit.isClosedMap_smul

end IsUnit

-- Porting note (#11215): TODO: use `Set.Nonempty`
/-- Class `ProperlyDiscontinuousSMul Œì T` says that the scalar multiplication `(‚Ä¢) : Œì ‚Üí T ‚Üí T`
is properly discontinuous, that is, for any pair of compact sets `K, L` in `T`, only finitely many
`Œ≥:Œì` move `K` to have nontrivial intersection with `L`.
-/
class ProperlyDiscontinuousSMul (Œì : Type*) (T : Type*) [TopologicalSpace T] [SMul Œì T] :
    Prop where
  /-- Given two compact sets `K` and `L`, `Œ≥ ‚Ä¢ K ‚à© L` is nonempty for finitely many `Œ≥`. -/
  finite_disjoint_inter_image :
    ‚àÄ {K L : Set T}, IsCompact K ‚Üí IsCompact L ‚Üí Set.Finite { Œ≥ : Œì | (Œ≥ ‚Ä¢ ¬∑) '' K ‚à© L ‚â† ‚àÖ }
#align properly_discontinuous_smul ProperlyDiscontinuousSMul

/-- Class `ProperlyDiscontinuousVAdd Œì T` says that the additive action `(+·µ•) : Œì ‚Üí T ‚Üí T`
is properly discontinuous, that is, for any pair of compact sets `K, L` in `T`, only finitely many
`Œ≥:Œì` move `K` to have nontrivial intersection with `L`.
-/
class ProperlyDiscontinuousVAdd (Œì : Type*) (T : Type*) [TopologicalSpace T] [VAdd Œì T] :
  Prop where
  /-- Given two compact sets `K` and `L`, `Œ≥ +·µ• K ‚à© L` is nonempty for finitely many `Œ≥`. -/
  finite_disjoint_inter_image :
    ‚àÄ {K L : Set T}, IsCompact K ‚Üí IsCompact L ‚Üí Set.Finite { Œ≥ : Œì | (Œ≥ +·µ• ¬∑) '' K ‚à© L ‚â† ‚àÖ }
#align properly_discontinuous_vadd ProperlyDiscontinuousVAdd

attribute [to_additive] ProperlyDiscontinuousSMul

variable {Œì : Type*} [Group Œì] {T : Type*} [TopologicalSpace T] [MulAction Œì T]

/-- A finite group action is always properly discontinuous. -/
@[to_additive "A finite group action is always properly discontinuous."]
instance (priority := 100) Finite.to_properlyDiscontinuousSMul [Finite Œì] :
    ProperlyDiscontinuousSMul Œì T where finite_disjoint_inter_image _ _ := Set.toFinite _
#align finite.to_properly_discontinuous_smul Finite.to_properlyDiscontinuousSMul
#align finite.to_properly_discontinuous_vadd Finite.to_properlyDiscontinuousVAdd

export ProperlyDiscontinuousSMul (finite_disjoint_inter_image)
export ProperlyDiscontinuousVAdd (finite_disjoint_inter_image)

/-- The quotient map by a group action is open, i.e. the quotient by a group action is an open
  quotient. -/
@[to_additive "The quotient map by a group action is open, i.e. the quotient by a group
action is an open quotient. "]
theorem isOpenMap_quotient_mk'_mul [ContinuousConstSMul Œì T] :
    letI := MulAction.orbitRel Œì T
    IsOpenMap (Quotient.mk' : T ‚Üí Quotient (MulAction.orbitRel Œì T)) := fun U hU => by
  rw [isOpen_coinduced, MulAction.quotient_preimage_image_eq_union_mul U]
  exact isOpen_iUnion fun Œ≥ => isOpenMap_smul Œ≥ U hU
#align is_open_map_quotient_mk_mul isOpenMap_quotient_mk'_mul
#align is_open_map_quotient_mk_add isOpenMap_quotient_mk'_add

/-- The quotient by a discontinuous group action of a locally compact t2 space is t2. -/
@[to_additive "The quotient by a discontinuous group action of a locally compact t2
space is t2."]
instance (priority := 100) t2Space_of_properlyDiscontinuousSMul_of_t2Space [T2Space T]
    [LocallyCompactSpace T] [ContinuousConstSMul Œì T] [ProperlyDiscontinuousSMul Œì T] :
    T2Space (Quotient (MulAction.orbitRel Œì T)) := by
  letI := MulAction.orbitRel Œì T
  set Q := Quotient (MulAction.orbitRel Œì T)
  rw [t2Space_iff_nhds]
  let f : T ‚Üí Q := Quotient.mk'
  have f_op : IsOpenMap f := isOpenMap_quotient_mk'_mul
  rintro ‚ü®x‚ÇÄ‚ü© ‚ü®y‚ÇÄ‚ü© (hxy : f x‚ÇÄ ‚â† f y‚ÇÄ)
  show ‚àÉ U ‚àà ùìù (f x‚ÇÄ), ‚àÉ V ‚àà ùìù (f y‚ÇÄ), _
  have hŒ≥x‚ÇÄy‚ÇÄ : ‚àÄ Œ≥ : Œì, Œ≥ ‚Ä¢ x‚ÇÄ ‚â† y‚ÇÄ := not_exists.mp (mt Quotient.sound hxy.symm : _)
  obtain ‚ü®K‚ÇÄ, hK‚ÇÄ, K‚ÇÄ_in‚ü© := exists_compact_mem_nhds x‚ÇÄ
  obtain ‚ü®L‚ÇÄ, hL‚ÇÄ, L‚ÇÄ_in‚ü© := exists_compact_mem_nhds y‚ÇÄ
  let bad_Œì_set := { Œ≥ : Œì | (Œ≥ ‚Ä¢ ¬∑) '' K‚ÇÄ ‚à© L‚ÇÄ ‚â† ‚àÖ }
  have bad_Œì_finite : bad_Œì_set.Finite := finite_disjoint_inter_image (Œì := Œì) hK‚ÇÄ hL‚ÇÄ
  choose u v hu hv u_v_disjoint using fun Œ≥ => t2_separation_nhds (hŒ≥x‚ÇÄy‚ÇÄ Œ≥)
  let U‚ÇÄ‚ÇÄ := ‚ãÇ Œ≥ ‚àà bad_Œì_set, (Œ≥ ‚Ä¢ ¬∑) ‚Åª¬π' u Œ≥
  let U‚ÇÄ := U‚ÇÄ‚ÇÄ ‚à© K‚ÇÄ
  let V‚ÇÄ‚ÇÄ := ‚ãÇ Œ≥ ‚àà bad_Œì_set, v Œ≥
  let V‚ÇÄ := V‚ÇÄ‚ÇÄ ‚à© L‚ÇÄ
  have U_nhds : f '' U‚ÇÄ ‚àà ùìù (f x‚ÇÄ) := by
    refine f_op.image_mem_nhds (inter_mem ((biInter_mem bad_Œì_finite).mpr fun Œ≥ _ => ?_) K‚ÇÄ_in)
    exact (continuous_const_smul _).continuousAt (hu Œ≥)
  have V_nhds : f '' V‚ÇÄ ‚àà ùìù (f y‚ÇÄ) :=
    f_op.image_mem_nhds (inter_mem ((biInter_mem bad_Œì_finite).mpr fun Œ≥ _ => hv Œ≥) L‚ÇÄ_in)
  refine' ‚ü®f '' U‚ÇÄ, U_nhds, f '' V‚ÇÄ, V_nhds, MulAction.disjoint_image_image_iff.2 _‚ü©
  rintro x ‚ü®x_in_U‚ÇÄ‚ÇÄ, x_in_K‚ÇÄ‚ü© Œ≥
  by_cases H : Œ≥ ‚àà bad_Œì_set
  ¬∑ exact fun h => (u_v_disjoint Œ≥).le_bot ‚ü®mem_iInter‚ÇÇ.mp x_in_U‚ÇÄ‚ÇÄ Œ≥ H, mem_iInter‚ÇÇ.mp h.1 Œ≥ H‚ü©
  ¬∑ rintro ‚ü®-, h'‚ü©
    simp only [bad_Œì_set, image_smul, Classical.not_not, mem_setOf_eq, Ne.def] at H
    exact eq_empty_iff_forall_not_mem.mp H (Œ≥ ‚Ä¢ x) ‚ü®mem_image_of_mem _ x_in_K‚ÇÄ, h'‚ü©
#align t2_space_of_properly_discontinuous_smul_of_t2_space t2Space_of_properlyDiscontinuousSMul_of_t2Space
#align t2_space_of_properly_discontinuous_vadd_of_t2_space t2Space_of_properlyDiscontinuousVAdd_of_t2Space

/-- The quotient of a second countable space by a group action is second countable. -/
@[to_additive "The quotient of a second countable space by an additive group action is second
countable."]
theorem ContinuousConstSMul.secondCountableTopology [SecondCountableTopology T]
    [ContinuousConstSMul Œì T] : SecondCountableTopology (Quotient (MulAction.orbitRel Œì T)) :=
  TopologicalSpace.Quotient.secondCountableTopology isOpenMap_quotient_mk'_mul
#align has_continuous_const_smul.second_countable_topology ContinuousConstSMul.secondCountableTopology
#align has_continuous_const_vadd.second_countable_topology ContinuousConstVAdd.secondCountableTopology

section nhds

section MulAction

variable {G‚ÇÄ : Type*} [GroupWithZero G‚ÇÄ] [MulAction G‚ÇÄ Œ±] [TopologicalSpace Œ±]
  [ContinuousConstSMul G‚ÇÄ Œ±]

-- Porting note: generalize to a group action + `IsUnit`
/-- Scalar multiplication preserves neighborhoods. -/
theorem set_smul_mem_nhds_smul {c : G‚ÇÄ} {s : Set Œ±} {x : Œ±} (hs : s ‚àà ùìù x) (hc : c ‚â† 0) :
    c ‚Ä¢ s ‚àà ùìù (c ‚Ä¢ x : Œ±) := by
  rw [mem_nhds_iff] at hs ‚ä¢
  obtain ‚ü®U, hs', hU, hU'‚ü© := hs
  exact ‚ü®c ‚Ä¢ U, Set.smul_set_mono hs', hU.smul‚ÇÄ hc, Set.smul_mem_smul_set hU'‚ü©
#align set_smul_mem_nhds_smul set_smul_mem_nhds_smul

theorem set_smul_mem_nhds_smul_iff {c : G‚ÇÄ} {s : Set Œ±} {x : Œ±} (hc : c ‚â† 0) :
    c ‚Ä¢ s ‚àà ùìù (c ‚Ä¢ x : Œ±) ‚Üî s ‚àà ùìù x := by
  refine' ‚ü®fun h => _, fun h => set_smul_mem_nhds_smul h hc‚ü©
  rw [‚Üê inv_smul_smul‚ÇÄ hc x, ‚Üê inv_smul_smul‚ÇÄ hc s]
  exact set_smul_mem_nhds_smul h (inv_ne_zero hc)
#align set_smul_mem_nhds_smul_iff set_smul_mem_nhds_smul_iff

end MulAction

section DistribMulAction

variable {G‚ÇÄ : Type*} [GroupWithZero G‚ÇÄ] [AddMonoid Œ±] [DistribMulAction G‚ÇÄ Œ±] [TopologicalSpace Œ±]
  [ContinuousConstSMul G‚ÇÄ Œ±]

theorem set_smul_mem_nhds_zero_iff {s : Set Œ±} {c : G‚ÇÄ} (hc : c ‚â† 0) :
    c ‚Ä¢ s ‚àà ùìù (0 : Œ±) ‚Üî s ‚àà ùìù (0 : Œ±) := by
  refine' Iff.trans _ (set_smul_mem_nhds_smul_iff hc)
  rw [smul_zero]
#align set_smul_mem_nhds_zero_iff set_smul_mem_nhds_zero_iff

end DistribMulAction

end nhds
