/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import Mathlib.Topology.UniformSpace.UniformConvergence
import Mathlib.Topology.UniformSpace.UniformEmbedding
import Mathlib.Topology.UniformSpace.CompleteSeparated
import Mathlib.Topology.UniformSpace.Compact
import Mathlib.Topology.Algebra.Group.Basic
import Mathlib.Topology.DiscreteSubset
import Mathlib.Tactic.Abel

#align_import topology.algebra.uniform_group from "leanprover-community/mathlib"@"bcfa726826abd57587355b4b5b7e78ad6527b7e4"

/-!
# Uniform structure on topological groups

This file defines uniform groups and its additive counterpart. These typeclasses should be
preferred over using `[TopologicalSpace Œ±] [TopologicalGroup Œ±]` since every topological
group naturally induces a uniform structure.

## Main declarations
* `UniformGroup` and `UniformAddGroup`: Multiplicative and additive uniform groups, that
  i.e., groups with uniformly continuous `(*)` and `(‚Åª¬π)` / `(+)` and `(-)`.

## Main results

* `TopologicalAddGroup.toUniformSpace` and `comm_topologicalAddGroup_is_uniform` can be used
  to construct a canonical uniformity for a topological add group.

* extension of ‚Ñ§-bilinear maps to complete groups (useful for ring completions)

* `QuotientGroup.completeSpace` and `QuotientAddGroup.completeSpace` guarantee that quotients
  of first countable topological groups by normal subgroups are themselves complete. In particular,
  the quotient of a Banach space by a subspace is complete.
-/


noncomputable section

open Classical Uniformity Topology Filter Pointwise

section UniformGroup

open Filter Set

variable {Œ± : Type*} {Œ≤ : Type*}

/-- A uniform group is a group in which multiplication and inversion are uniformly continuous. -/
class UniformGroup (Œ± : Type*) [UniformSpace Œ±] [Group Œ±] : Prop where
  uniformContinuous_div : UniformContinuous fun p : Œ± √ó Œ± => p.1 / p.2
#align uniform_group UniformGroup

/-- A uniform additive group is an additive group in which addition
  and negation are uniformly continuous.-/
class UniformAddGroup (Œ± : Type*) [UniformSpace Œ±] [AddGroup Œ±] : Prop where
  uniformContinuous_sub : UniformContinuous fun p : Œ± √ó Œ± => p.1 - p.2
#align uniform_add_group UniformAddGroup

attribute [to_additive] UniformGroup

@[to_additive]
theorem UniformGroup.mk' {Œ±} [UniformSpace Œ±] [Group Œ±]
    (h‚ÇÅ : UniformContinuous fun p : Œ± √ó Œ± => p.1 * p.2) (h‚ÇÇ : UniformContinuous fun p : Œ± => p‚Åª¬π) :
    UniformGroup Œ± :=
  ‚ü®by simpa only [div_eq_mul_inv] using
    h‚ÇÅ.comp (uniformContinuous_fst.prod_mk (h‚ÇÇ.comp uniformContinuous_snd))‚ü©
#align uniform_group.mk' UniformGroup.mk'
#align uniform_add_group.mk' UniformAddGroup.mk'

variable [UniformSpace Œ±] [Group Œ±] [UniformGroup Œ±]

@[to_additive]
theorem uniformContinuous_div : UniformContinuous fun p : Œ± √ó Œ± => p.1 / p.2 :=
  UniformGroup.uniformContinuous_div
#align uniform_continuous_div uniformContinuous_div
#align uniform_continuous_sub uniformContinuous_sub

@[to_additive]
theorem UniformContinuous.div [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (hg : UniformContinuous g) : UniformContinuous fun x => f x / g x :=
  uniformContinuous_div.comp (hf.prod_mk hg)
#align uniform_continuous.div UniformContinuous.div
#align uniform_continuous.sub UniformContinuous.sub

@[to_additive]
theorem UniformContinuous.inv [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f) :
    UniformContinuous fun x => (f x)‚Åª¬π := by
  have : UniformContinuous fun x => 1 / f x := uniformContinuous_const.div hf
  simp_all
#align uniform_continuous.inv UniformContinuous.inv
#align uniform_continuous.neg UniformContinuous.neg

@[to_additive]
theorem uniformContinuous_inv : UniformContinuous fun x : Œ± => x‚Åª¬π :=
  uniformContinuous_id.inv
#align uniform_continuous_inv uniformContinuous_inv
#align uniform_continuous_neg uniformContinuous_neg

@[to_additive]
theorem UniformContinuous.mul [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (hg : UniformContinuous g) : UniformContinuous fun x => f x * g x := by
  have : UniformContinuous fun x => f x / (g x)‚Åª¬π := hf.div hg.inv
  simp_all
#align uniform_continuous.mul UniformContinuous.mul
#align uniform_continuous.add UniformContinuous.add

@[to_additive]
theorem uniformContinuous_mul : UniformContinuous fun p : Œ± √ó Œ± => p.1 * p.2 :=
  uniformContinuous_fst.mul uniformContinuous_snd
#align uniform_continuous_mul uniformContinuous_mul
#align uniform_continuous_add uniformContinuous_add

@[to_additive UniformContinuous.const_nsmul]
theorem UniformContinuous.pow_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f) :
    ‚àÄ n : ‚Ñï, UniformContinuous fun x => f x ^ n
  | 0 => by
    simp_rw [pow_zero]
    exact uniformContinuous_const
  | n + 1 => by
    simp_rw [pow_succ]
    exact hf.mul (hf.pow_const n)
#align uniform_continuous.pow_const UniformContinuous.pow_const
#align uniform_continuous.const_nsmul UniformContinuous.const_nsmul

@[to_additive uniformContinuous_const_nsmul]
theorem uniformContinuous_pow_const (n : ‚Ñï) : UniformContinuous fun x : Œ± => x ^ n :=
  uniformContinuous_id.pow_const n
#align uniform_continuous_pow_const uniformContinuous_pow_const
#align uniform_continuous_const_nsmul uniformContinuous_const_nsmul

@[to_additive UniformContinuous.const_zsmul]
theorem UniformContinuous.zpow_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f) :
    ‚àÄ n : ‚Ñ§, UniformContinuous fun x => f x ^ n
  | (n : ‚Ñï) => by
    simp_rw [zpow_ofNat]
    exact hf.pow_const _
  | Int.negSucc n => by
    simp_rw [zpow_negSucc]
    exact (hf.pow_const _).inv
#align uniform_continuous.zpow_const UniformContinuous.zpow_const
#align uniform_continuous.const_zsmul UniformContinuous.const_zsmul

@[to_additive uniformContinuous_const_zsmul]
theorem uniformContinuous_zpow_const (n : ‚Ñ§) : UniformContinuous fun x : Œ± => x ^ n :=
  uniformContinuous_id.zpow_const n
#align uniform_continuous_zpow_const uniformContinuous_zpow_const
#align uniform_continuous_const_zsmul uniformContinuous_const_zsmul

@[to_additive]
instance (priority := 10) UniformGroup.to_topologicalGroup : TopologicalGroup Œ± where
  continuous_mul := uniformContinuous_mul.continuous
  continuous_inv := uniformContinuous_inv.continuous
#align uniform_group.to_topological_group UniformGroup.to_topologicalGroup
#align uniform_add_group.to_topological_add_group UniformAddGroup.to_topologicalAddGroup

@[to_additive]
instance [UniformSpace Œ≤] [Group Œ≤] [UniformGroup Œ≤] : UniformGroup (Œ± √ó Œ≤) :=
  ‚ü®((uniformContinuous_fst.comp uniformContinuous_fst).div
          (uniformContinuous_fst.comp uniformContinuous_snd)).prod_mk
      ((uniformContinuous_snd.comp uniformContinuous_fst).div
        (uniformContinuous_snd.comp uniformContinuous_snd))‚ü©

@[to_additive]
instance Pi.instUniformGroup {Œπ : Type*} {G : Œπ ‚Üí Type*} [‚àÄ i, UniformSpace (G i)]
    [‚àÄ i, Group (G i)] [‚àÄ i, UniformGroup (G i)] : UniformGroup (‚àÄ i, G i) where
  uniformContinuous_div := uniformContinuous_pi.mpr fun i ‚Ü¶
    (uniformContinuous_proj G i).comp uniformContinuous_fst |>.div <|
      (uniformContinuous_proj G i).comp uniformContinuous_snd

@[to_additive]
theorem uniformity_translate_mul (a : Œ±) : ((ùì§ Œ±).map fun x : Œ± √ó Œ± => (x.1 * a, x.2 * a)) = ùì§ Œ± :=
  le_antisymm (uniformContinuous_id.mul uniformContinuous_const)
    (calc
      ùì§ Œ± =
          ((ùì§ Œ±).map fun x : Œ± √ó Œ± => (x.1 * a‚Åª¬π, x.2 * a‚Åª¬π)).map fun x : Œ± √ó Œ± =>
            (x.1 * a, x.2 * a) := by simp [Filter.map_map, (¬∑ ‚àò ¬∑)]
      _ ‚â§ (ùì§ Œ±).map fun x : Œ± √ó Œ± => (x.1 * a, x.2 * a) :=
        Filter.map_mono (uniformContinuous_id.mul uniformContinuous_const)
      )
#align uniformity_translate_mul uniformity_translate_mul
#align uniformity_translate_add uniformity_translate_add

@[to_additive]
theorem uniformEmbedding_translate_mul (a : Œ±) : UniformEmbedding fun x : Œ± => x * a :=
  { comap_uniformity := by
      nth_rewrite 1 [‚Üê uniformity_translate_mul a, comap_map]
      rfl
      rintro ‚ü®p‚ÇÅ, p‚ÇÇ‚ü© ‚ü®q‚ÇÅ, q‚ÇÇ‚ü©
      simp only [Prod.mk.injEq, mul_left_inj, imp_self]
    inj := mul_left_injective a }
#align uniform_embedding_translate_mul uniformEmbedding_translate_mul
#align uniform_embedding_translate_add uniformEmbedding_translate_add

namespace MulOpposite

@[to_additive]
instance : UniformGroup Œ±·µê·µí·µñ :=
  ‚ü®uniformContinuous_op.comp
      ((uniformContinuous_unop.comp uniformContinuous_snd).inv.mul <|
        uniformContinuous_unop.comp uniformContinuous_fst)‚ü©

end MulOpposite

section LatticeOps

variable [Group Œ≤]

@[to_additive]
theorem uniformGroup_sInf {us : Set (UniformSpace Œ≤)} (h : ‚àÄ u ‚àà us, @UniformGroup Œ≤ u _) :
    @UniformGroup Œ≤ (sInf us) _ :=
  -- Porting note: {_} does not find `sInf us` instance, see `continuousSMul_sInf`
  @UniformGroup.mk Œ≤ (_) _ <|
    uniformContinuous_sInf_rng.mpr fun u hu =>
      uniformContinuous_sInf_dom‚ÇÇ hu hu (@UniformGroup.uniformContinuous_div Œ≤ u _ (h u hu))
#align uniform_group_Inf uniformGroup_sInf
#align uniform_add_group_Inf uniformAddGroup_sInf

@[to_additive]
theorem uniformGroup_iInf {Œπ : Sort*} {us' : Œπ ‚Üí UniformSpace Œ≤}
    (h' : ‚àÄ i, @UniformGroup Œ≤ (us' i) _) : @UniformGroup Œ≤ (‚®Ö i, us' i) _ := by
  rw [‚Üê sInf_range]
  exact uniformGroup_sInf (Set.forall_range_iff.mpr h')
#align uniform_group_infi uniformGroup_iInf
#align uniform_add_group_infi uniformAddGroup_iInf

@[to_additive]
theorem uniformGroup_inf {u‚ÇÅ u‚ÇÇ : UniformSpace Œ≤} (h‚ÇÅ : @UniformGroup Œ≤ u‚ÇÅ _)
    (h‚ÇÇ : @UniformGroup Œ≤ u‚ÇÇ _) : @UniformGroup Œ≤ (u‚ÇÅ ‚äì u‚ÇÇ) _ := by
  rw [inf_eq_iInf]
  refine' uniformGroup_iInf fun b => _
  cases b <;> assumption
#align uniform_group_inf uniformGroup_inf
#align uniform_add_group_inf uniformAddGroup_inf

@[to_additive]
lemma UniformInducing.uniformGroup {Œ≥ : Type*} [Group Œ≥] [UniformSpace Œ≥] [UniformGroup Œ≥]
    [UniformSpace Œ≤] {F : Type*} [FunLike F Œ≤ Œ≥] [MonoidHomClass F Œ≤ Œ≥]
    (f : F) (hf : UniformInducing f) :
    UniformGroup Œ≤ where
  uniformContinuous_div := by
    simp_rw [hf.uniformContinuous_iff, Function.comp_def, map_div]
    exact uniformContinuous_div.comp (hf.uniformContinuous.prod_map hf.uniformContinuous)

@[to_additive]
protected theorem UniformGroup.comap {Œ≥ : Type*} [Group Œ≥] {u : UniformSpace Œ≥} [UniformGroup Œ≥]
    {F : Type*} [FunLike F Œ≤ Œ≥] [MonoidHomClass F Œ≤ Œ≥] (f : F) : @UniformGroup Œ≤ (u.comap f) _ :=
  letI : UniformSpace Œ≤ := u.comap f; UniformInducing.uniformGroup f ‚ü®rfl‚ü©
#align uniform_group_comap UniformGroup.comap
#align uniform_add_group_comap UniformAddGroup.comap

end LatticeOps

namespace Subgroup

@[to_additive]
instance uniformGroup (S : Subgroup Œ±) : UniformGroup S := .comap S.subtype
#align subgroup.uniform_group Subgroup.uniformGroup
#align add_subgroup.uniform_add_group AddSubgroup.uniformAddGroup

end Subgroup

section

variable (Œ±)

@[to_additive]
theorem uniformity_eq_comap_nhds_one : ùì§ Œ± = comap (fun x : Œ± √ó Œ± => x.2 / x.1) (ùìù (1 : Œ±)) := by
  rw [nhds_eq_comap_uniformity, Filter.comap_comap]
  refine' le_antisymm (Filter.map_le_iff_le_comap.1 _) _
  ¬∑ intro s hs
    rcases mem_uniformity_of_uniformContinuous_invariant uniformContinuous_div hs with ‚ü®t, ht, hts‚ü©
    refine' mem_map.2 (mem_of_superset ht _)
    rintro ‚ü®a, b‚ü©
    simpa [subset_def] using hts a b a
  ¬∑ intro s hs
    rcases mem_uniformity_of_uniformContinuous_invariant uniformContinuous_mul hs with ‚ü®t, ht, hts‚ü©
    refine' ‚ü®_, ht, _‚ü©
    rintro ‚ü®a, b‚ü©
    simpa [subset_def] using hts 1 (b / a) a
#align uniformity_eq_comap_nhds_one uniformity_eq_comap_nhds_one
#align uniformity_eq_comap_nhds_zero uniformity_eq_comap_nhds_zero

@[to_additive]
theorem uniformity_eq_comap_nhds_one_swapped :
    ùì§ Œ± = comap (fun x : Œ± √ó Œ± => x.1 / x.2) (ùìù (1 : Œ±)) := by
  rw [‚Üê comap_swap_uniformity, uniformity_eq_comap_nhds_one, comap_comap]
  rfl
#align uniformity_eq_comap_nhds_one_swapped uniformity_eq_comap_nhds_one_swapped
#align uniformity_eq_comap_nhds_zero_swapped uniformity_eq_comap_nhds_zero_swapped

@[to_additive]
theorem UniformGroup.ext {G : Type*} [Group G] {u v : UniformSpace G} (hu : @UniformGroup G u _)
    (hv : @UniformGroup G v _)
    (h : @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1) : u = v :=
  UniformSpace.ext <| by
    rw [@uniformity_eq_comap_nhds_one _ u _ hu, @uniformity_eq_comap_nhds_one _ v _ hv, h]
#align uniform_group.ext UniformGroup.ext
#align uniform_add_group.ext UniformAddGroup.ext

@[to_additive]
theorem UniformGroup.ext_iff {G : Type*} [Group G] {u v : UniformSpace G}
    (hu : @UniformGroup G u _) (hv : @UniformGroup G v _) :
    u = v ‚Üî @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1 :=
  ‚ü®fun h => h ‚ñ∏ rfl, hu.ext hv‚ü©
#align uniform_group.ext_iff UniformGroup.ext_iff
#align uniform_add_group.ext_iff UniformAddGroup.ext_iff

variable {Œ±}

@[to_additive]
theorem UniformGroup.uniformity_countably_generated [(ùìù (1 : Œ±)).IsCountablyGenerated] :
    (ùì§ Œ±).IsCountablyGenerated := by
  rw [uniformity_eq_comap_nhds_one]
  exact Filter.comap.isCountablyGenerated _ _
#align uniform_group.uniformity_countably_generated UniformGroup.uniformity_countably_generated
#align uniform_add_group.uniformity_countably_generated UniformAddGroup.uniformity_countably_generated

open MulOpposite

@[to_additive]
theorem uniformity_eq_comap_inv_mul_nhds_one :
    ùì§ Œ± = comap (fun x : Œ± √ó Œ± => x.1‚Åª¬π * x.2) (ùìù (1 : Œ±)) := by
  rw [‚Üê comap_uniformity_mulOpposite, uniformity_eq_comap_nhds_one, ‚Üê op_one, ‚Üê comap_unop_nhds,
    comap_comap, comap_comap]
  simp [(¬∑ ‚àò ¬∑)]
#align uniformity_eq_comap_inv_mul_nhds_one uniformity_eq_comap_inv_mul_nhds_one
#align uniformity_eq_comap_neg_add_nhds_zero uniformity_eq_comap_neg_add_nhds_zero

@[to_additive]
theorem uniformity_eq_comap_inv_mul_nhds_one_swapped :
    ùì§ Œ± = comap (fun x : Œ± √ó Œ± => x.2‚Åª¬π * x.1) (ùìù (1 : Œ±)) := by
  rw [‚Üê comap_swap_uniformity, uniformity_eq_comap_inv_mul_nhds_one, comap_comap]
  rfl
#align uniformity_eq_comap_inv_mul_nhds_one_swapped uniformity_eq_comap_inv_mul_nhds_one_swapped
#align uniformity_eq_comap_neg_add_nhds_zero_swapped uniformity_eq_comap_neg_add_nhds_zero_swapped

end

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set Œ±}
    (h : (ùìù (1 : Œ±)).HasBasis p U) :
    (ùì§ Œ±).HasBasis p fun i => { x : Œ± √ó Œ± | x.2 / x.1 ‚àà U i } := by
  rw [uniformity_eq_comap_nhds_one]
  exact h.comap _
#align filter.has_basis.uniformity_of_nhds_one Filter.HasBasis.uniformity_of_nhds_one
#align filter.has_basis.uniformity_of_nhds_zero Filter.HasBasis.uniformity_of_nhds_zero

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_inv_mul {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set Œ±}
    (h : (ùìù (1 : Œ±)).HasBasis p U) :
    (ùì§ Œ±).HasBasis p fun i => { x : Œ± √ó Œ± | x.1‚Åª¬π * x.2 ‚àà U i } := by
  rw [uniformity_eq_comap_inv_mul_nhds_one]
  exact h.comap _
#align filter.has_basis.uniformity_of_nhds_one_inv_mul Filter.HasBasis.uniformity_of_nhds_one_inv_mul
#align filter.has_basis.uniformity_of_nhds_zero_neg_add Filter.HasBasis.uniformity_of_nhds_zero_neg_add

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_swapped {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set Œ±}
    (h : (ùìù (1 : Œ±)).HasBasis p U) :
    (ùì§ Œ±).HasBasis p fun i => { x : Œ± √ó Œ± | x.1 / x.2 ‚àà U i } := by
  rw [uniformity_eq_comap_nhds_one_swapped]
  exact h.comap _
#align filter.has_basis.uniformity_of_nhds_one_swapped Filter.HasBasis.uniformity_of_nhds_one_swapped
#align filter.has_basis.uniformity_of_nhds_zero_swapped Filter.HasBasis.uniformity_of_nhds_zero_swapped

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_inv_mul_swapped {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set Œ±}
    (h : (ùìù (1 : Œ±)).HasBasis p U) :
    (ùì§ Œ±).HasBasis p fun i => { x : Œ± √ó Œ± | x.2‚Åª¬π * x.1 ‚àà U i } := by
  rw [uniformity_eq_comap_inv_mul_nhds_one_swapped]
  exact h.comap _
#align filter.has_basis.uniformity_of_nhds_one_inv_mul_swapped Filter.HasBasis.uniformity_of_nhds_one_inv_mul_swapped
#align filter.has_basis.uniformity_of_nhds_zero_neg_add_swapped Filter.HasBasis.uniformity_of_nhds_zero_neg_add_swapped

@[to_additive]
theorem group_separationRel (x y : Œ±) : (x, y) ‚àà separationRel Œ± ‚Üî x / y ‚àà closure ({1} : Set Œ±) :=
  have : Embedding fun a => a * (y / x) := (uniformEmbedding_translate_mul (y / x)).embedding
  show (x, y) ‚àà ‚ãÇ‚ÇÄ (ùì§ Œ±).sets ‚Üî x / y ‚àà closure ({1} : Set Œ±) by
    rw [this.closure_eq_preimage_closure_image, uniformity_eq_comap_nhds_one Œ±, sInter_comap_sets]
    simp [mem_closure_iff_nhds, inter_singleton_nonempty, sub_eq_add_neg, add_assoc]
#align group_separation_rel group_separationRel
#align add_group_separation_rel addGroup_separationRel

@[to_additive]
theorem uniformContinuous_of_tendsto_one {hom : Type*} [UniformSpace Œ≤] [Group Œ≤] [UniformGroup Œ≤]
    [FunLike hom Œ± Œ≤] [MonoidHomClass hom Œ± Œ≤] {f : hom} (h : Tendsto f (ùìù 1) (ùìù 1)) :
    UniformContinuous f := by
  have :
    ((fun x : Œ≤ √ó Œ≤ => x.2 / x.1) ‚àò fun x : Œ± √ó Œ± => (f x.1, f x.2)) = fun x : Œ± √ó Œ± =>
      f (x.2 / x.1) := by ext; simp only [Function.comp_apply, map_div]
  rw [UniformContinuous, uniformity_eq_comap_nhds_one Œ±, uniformity_eq_comap_nhds_one Œ≤,
    tendsto_comap_iff, this]
  exact Tendsto.comp h tendsto_comap
#align uniform_continuous_of_tendsto_one uniformContinuous_of_tendsto_one
#align uniform_continuous_of_tendsto_zero uniformContinuous_of_tendsto_zero

/-- A group homomorphism (a bundled morphism of a type that implements `MonoidHomClass`) between
two uniform groups is uniformly continuous provided that it is continuous at one. See also
`continuous_of_continuousAt_one`. -/
@[to_additive "An additive group homomorphism (a bundled morphism of a type that implements
`AddMonoidHomClass`) between two uniform additive groups is uniformly continuous provided that it
is continuous at zero. See also `continuous_of_continuousAt_zero`."]
theorem uniformContinuous_of_continuousAt_one {hom : Type*} [UniformSpace Œ≤] [Group Œ≤]
    [UniformGroup Œ≤] [FunLike hom Œ± Œ≤] [MonoidHomClass hom Œ± Œ≤]
    (f : hom) (hf : ContinuousAt f 1) :
    UniformContinuous f :=
  uniformContinuous_of_tendsto_one (by simpa using hf.tendsto)
#align uniform_continuous_of_continuous_at_one uniformContinuous_of_continuousAt_one
#align uniform_continuous_of_continuous_at_zero uniformContinuous_of_continuousAt_zero

@[to_additive]
theorem MonoidHom.uniformContinuous_of_continuousAt_one [UniformSpace Œ≤] [Group Œ≤] [UniformGroup Œ≤]
    (f : Œ± ‚Üí* Œ≤) (hf : ContinuousAt f 1) : UniformContinuous f :=
  _root_.uniformContinuous_of_continuousAt_one f hf
#align monoid_hom.uniform_continuous_of_continuous_at_one MonoidHom.uniformContinuous_of_continuousAt_one
#align add_monoid_hom.uniform_continuous_of_continuous_at_zero AddMonoidHom.uniformContinuous_of_continuousAt_zero

/-- A homomorphism from a uniform group to a discrete uniform group is continuous if and only if
its kernel is open. -/
@[to_additive "A homomorphism from a uniform additive group to a discrete uniform additive group is
continuous if and only if its kernel is open."]
theorem UniformGroup.uniformContinuous_iff_open_ker {hom : Type*} [UniformSpace Œ≤]
    [DiscreteTopology Œ≤] [Group Œ≤] [UniformGroup Œ≤] [FunLike hom Œ± Œ≤] [MonoidHomClass hom Œ± Œ≤]
    {f : hom} :
    UniformContinuous f ‚Üî IsOpen ((f : Œ± ‚Üí* Œ≤).ker : Set Œ±) := by
  refine' ‚ü®fun hf => _, fun hf => _‚ü©
  ¬∑ apply (isOpen_discrete ({1} : Set Œ≤)).preimage hf.continuous
  ¬∑ apply uniformContinuous_of_continuousAt_one
    rw [ContinuousAt, nhds_discrete Œ≤, map_one, tendsto_pure]
    exact hf.mem_nhds (map_one f)
#align uniform_group.uniform_continuous_iff_open_ker UniformGroup.uniformContinuous_iff_open_ker
#align uniform_add_group.uniform_continuous_iff_open_ker UniformAddGroup.uniformContinuous_iff_open_ker

@[to_additive]
theorem uniformContinuous_monoidHom_of_continuous {hom : Type*} [UniformSpace Œ≤] [Group Œ≤]
    [UniformGroup Œ≤] [FunLike hom Œ± Œ≤] [MonoidHomClass hom Œ± Œ≤] {f : hom} (h : Continuous f) :
    UniformContinuous f :=
  uniformContinuous_of_tendsto_one <|
    suffices Tendsto f (ùìù 1) (ùìù (f 1)) by rwa [map_one] at this
    h.tendsto 1
#align uniform_continuous_monoid_hom_of_continuous uniformContinuous_monoidHom_of_continuous
#align uniform_continuous_add_monoid_hom_of_continuous uniformContinuous_addMonoidHom_of_continuous

@[to_additive]
theorem CauchySeq.mul {Œπ : Type*} [Preorder Œπ] {u v : Œπ ‚Üí Œ±} (hu : CauchySeq u)
    (hv : CauchySeq v) : CauchySeq (u * v) :=
  uniformContinuous_mul.comp_cauchySeq (hu.prod hv)
#align cauchy_seq.mul CauchySeq.mul
#align cauchy_seq.add CauchySeq.add

@[to_additive]
theorem CauchySeq.mul_const {Œπ : Type*} [Preorder Œπ] {u : Œπ ‚Üí Œ±} {x : Œ±} (hu : CauchySeq u) :
    CauchySeq fun n => u n * x :=
  (uniformContinuous_id.mul uniformContinuous_const).comp_cauchySeq hu
#align cauchy_seq.mul_const CauchySeq.mul_const
#align cauchy_seq.add_const CauchySeq.add_const

@[to_additive]
theorem CauchySeq.const_mul {Œπ : Type*} [Preorder Œπ] {u : Œπ ‚Üí Œ±} {x : Œ±} (hu : CauchySeq u) :
    CauchySeq fun n => x * u n :=
  (uniformContinuous_const.mul uniformContinuous_id).comp_cauchySeq hu
#align cauchy_seq.const_mul CauchySeq.const_mul
#align cauchy_seq.const_add CauchySeq.const_add

@[to_additive]
theorem CauchySeq.inv {Œπ : Type*} [Preorder Œπ] {u : Œπ ‚Üí Œ±} (h : CauchySeq u) :
    CauchySeq u‚Åª¬π :=
  uniformContinuous_inv.comp_cauchySeq h
#align cauchy_seq.inv CauchySeq.inv
#align cauchy_seq.neg CauchySeq.neg

@[to_additive]
theorem totallyBounded_iff_subset_finite_iUnion_nhds_one {s : Set Œ±} :
    TotallyBounded s ‚Üî ‚àÄ U ‚àà ùìù (1 : Œ±), ‚àÉ t : Set Œ±, t.Finite ‚àß s ‚äÜ ‚ãÉ y ‚àà t, y ‚Ä¢ U :=
  (ùìù (1 : Œ±)).basis_sets.uniformity_of_nhds_one_inv_mul_swapped.totallyBounded_iff.trans <| by
    simp [‚Üê preimage_smul_inv, preimage]
#align totally_bounded_iff_subset_finite_Union_nhds_one totallyBounded_iff_subset_finite_iUnion_nhds_one
#align totally_bounded_iff_subset_finite_Union_nhds_zero totallyBounded_iff_subset_finite_iUnion_nhds_zero

section UniformConvergence

variable {Œπ : Type*} {l : Filter Œπ} {l' : Filter Œ≤} {f f' : Œπ ‚Üí Œ≤ ‚Üí Œ±} {g g' : Œ≤ ‚Üí Œ±} {s : Set Œ≤}

@[to_additive]
theorem TendstoUniformlyOnFilter.mul (hf : TendstoUniformlyOnFilter f g l l')
    (hf' : TendstoUniformlyOnFilter f' g' l l') : TendstoUniformlyOnFilter (f * f') (g * g') l l' :=
  fun u hu =>
  ((uniformContinuous_mul.comp_tendstoUniformlyOnFilter (hf.prod hf')) u hu).diag_of_prod_left
#align tendsto_uniformly_on_filter.mul TendstoUniformlyOnFilter.mul
#align tendsto_uniformly_on_filter.add TendstoUniformlyOnFilter.add

@[to_additive]
theorem TendstoUniformlyOnFilter.div (hf : TendstoUniformlyOnFilter f g l l')
    (hf' : TendstoUniformlyOnFilter f' g' l l') : TendstoUniformlyOnFilter (f / f') (g / g') l l' :=
  fun u hu =>
  ((uniformContinuous_div.comp_tendstoUniformlyOnFilter (hf.prod hf')) u hu).diag_of_prod_left
#align tendsto_uniformly_on_filter.div TendstoUniformlyOnFilter.div
#align tendsto_uniformly_on_filter.sub TendstoUniformlyOnFilter.sub

@[to_additive]
theorem TendstoUniformlyOn.mul (hf : TendstoUniformlyOn f g l s)
    (hf' : TendstoUniformlyOn f' g' l s) : TendstoUniformlyOn (f * f') (g * g') l s := fun u hu =>
  ((uniformContinuous_mul.comp_tendstoUniformlyOn (hf.prod hf')) u hu).diag_of_prod
#align tendsto_uniformly_on.mul TendstoUniformlyOn.mul
#align tendsto_uniformly_on.add TendstoUniformlyOn.add

@[to_additive]
theorem TendstoUniformlyOn.div (hf : TendstoUniformlyOn f g l s)
    (hf' : TendstoUniformlyOn f' g' l s) : TendstoUniformlyOn (f / f') (g / g') l s := fun u hu =>
  ((uniformContinuous_div.comp_tendstoUniformlyOn (hf.prod hf')) u hu).diag_of_prod
#align tendsto_uniformly_on.div TendstoUniformlyOn.div
#align tendsto_uniformly_on.sub TendstoUniformlyOn.sub

@[to_additive]
theorem TendstoUniformly.mul (hf : TendstoUniformly f g l) (hf' : TendstoUniformly f' g' l) :
    TendstoUniformly (f * f') (g * g') l := fun u hu =>
  ((uniformContinuous_mul.comp_tendstoUniformly (hf.prod hf')) u hu).diag_of_prod
#align tendsto_uniformly.mul TendstoUniformly.mul
#align tendsto_uniformly.add TendstoUniformly.add

@[to_additive]
theorem TendstoUniformly.div (hf : TendstoUniformly f g l) (hf' : TendstoUniformly f' g' l) :
    TendstoUniformly (f / f') (g / g') l := fun u hu =>
  ((uniformContinuous_div.comp_tendstoUniformly (hf.prod hf')) u hu).diag_of_prod
#align tendsto_uniformly.div TendstoUniformly.div
#align tendsto_uniformly.sub TendstoUniformly.sub

@[to_additive]
theorem UniformCauchySeqOn.mul (hf : UniformCauchySeqOn f l s) (hf' : UniformCauchySeqOn f' l s) :
    UniformCauchySeqOn (f * f') l s := fun u hu => by
  simpa using (uniformContinuous_mul.comp_uniformCauchySeqOn (hf.prod' hf')) u hu
#align uniform_cauchy_seq_on.mul UniformCauchySeqOn.mul
#align uniform_cauchy_seq_on.add UniformCauchySeqOn.add

@[to_additive]
theorem UniformCauchySeqOn.div (hf : UniformCauchySeqOn f l s) (hf' : UniformCauchySeqOn f' l s) :
    UniformCauchySeqOn (f / f') l s := fun u hu => by
  simpa using (uniformContinuous_div.comp_uniformCauchySeqOn (hf.prod' hf')) u hu
#align uniform_cauchy_seq_on.div UniformCauchySeqOn.div
#align uniform_cauchy_seq_on.sub UniformCauchySeqOn.sub

end UniformConvergence

end UniformGroup

section TopologicalGroup

open Filter

variable (G : Type*) [Group G] [TopologicalSpace G] [TopologicalGroup G]

/-- The right uniformity on a topological group (as opposed to the left uniformity).

Warning: in general the right and left uniformities do not coincide and so one does not obtain a
`UniformGroup` structure. Two important special cases where they _do_ coincide are for
commutative groups (see `comm_topologicalGroup_is_uniform`) and for compact groups (see
`topologicalGroup_is_uniform_of_compactSpace`). -/
@[to_additive "The right uniformity on a topological additive group (as opposed to the left
uniformity).

Warning: in general the right and left uniformities do not coincide and so one does not obtain a
`UniformAddGroup` structure. Two important special cases where they _do_ coincide are for
commutative additive groups (see `comm_topologicalAddGroup_is_uniform`) and for compact
additive groups (see `topologicalAddGroup_is_uniform_of_compactSpace`)."]
def TopologicalGroup.toUniformSpace : UniformSpace G where
  uniformity := comap (fun p : G √ó G => p.2 / p.1) (ùìù 1)
  refl := (Tendsto.mono_right (by simp) (pure_le_nhds _)).le_comap
  symm :=
    have : Tendsto (fun p : G √ó G ‚Ü¶ (p.2 / p.1)‚Åª¬π) (comap (fun p : G √ó G ‚Ü¶ p.2 / p.1) (ùìù 1))
      (ùìù 1‚Åª¬π) := tendsto_id.inv.comp tendsto_comap
    by simpa [tendsto_comap_iff]
  comp := Tendsto.le_comap fun U H ‚Ü¶ by
    rcases exists_nhds_one_split H with ‚ü®V, V_nhds, V_mul‚ü©
    refine mem_map.2 (mem_of_superset (mem_lift' <| preimage_mem_comap V_nhds) ?_)
    rintro ‚ü®x, y‚ü© ‚ü®z, hz‚ÇÅ, hz‚ÇÇ‚ü©
    simpa using V_mul _ hz‚ÇÇ _ hz‚ÇÅ
  isOpen_uniformity S := by
    simp only [isOpen_iff_mem_nhds, ‚Üê mem_comap_prod_mk, comap_comap, (¬∑ ‚àò ¬∑), nhds_translation_div]
#align topological_group.to_uniform_space TopologicalGroup.toUniformSpace
#align topological_add_group.to_uniform_space TopologicalAddGroup.toUniformSpace

attribute [local instance] TopologicalGroup.toUniformSpace

@[to_additive]
theorem uniformity_eq_comap_nhds_one' : ùì§ G = comap (fun p : G √ó G => p.2 / p.1) (ùìù (1 : G)) :=
  rfl
#align uniformity_eq_comap_nhds_one' uniformity_eq_comap_nhds_one'
#align uniformity_eq_comap_nhds_zero' uniformity_eq_comap_nhds_zero'

@[to_additive]
theorem topologicalGroup_is_uniform_of_compactSpace [CompactSpace G] : UniformGroup G :=
  ‚ü®by
    apply CompactSpace.uniformContinuous_of_continuous
    exact continuous_div'‚ü©
#align topological_group_is_uniform_of_compact_space topologicalGroup_is_uniform_of_compactSpace
#align topological_add_group_is_uniform_of_compact_space topologicalAddGroup_is_uniform_of_compactSpace

variable {G}

@[to_additive]
instance Subgroup.isClosed_of_discrete [T2Space G] {H : Subgroup G} [DiscreteTopology H] :
    IsClosed (H : Set G) := by
  obtain ‚ü®V, V_in, VH‚ü© : ‚àÉ (V : Set G), V ‚àà ùìù (1 : G) ‚àß V ‚à© (H : Set G) = {1}
  exact nhds_inter_eq_singleton_of_mem_discrete H.one_mem
  haveI : SeparatedSpace G := separated_iff_t2.mpr ‚Äπ_‚Ä∫
  have : (fun p : G √ó G => p.2 / p.1) ‚Åª¬π' V ‚àà ùì§ G := preimage_mem_comap V_in
  apply isClosed_of_spaced_out this
  intro h h_in h' h'_in
  contrapose!
  simp only [Set.mem_preimage, not_not]
  rintro (hyp : h' / h ‚àà V)
  have : h' / h ‚àà ({1} : Set G) := VH ‚ñ∏ Set.mem_inter hyp (H.div_mem h'_in h_in)
  exact (eq_of_div_eq_one this).symm
#align subgroup.is_closed_of_discrete Subgroup.isClosed_of_discrete
#align add_subgroup.is_closed_of_discrete AddSubgroup.isClosed_of_discrete

@[to_additive]
lemma Subgroup.tendsto_coe_cofinite_of_discrete [T2Space G] (H : Subgroup G) [DiscreteTopology H] :
    Tendsto ((‚Üë) : H ‚Üí G) cofinite (cocompact _) :=
  IsClosed.tendsto_coe_cofinite_of_discreteTopology inferInstance inferInstance

@[to_additive]
lemma MonoidHom.tendsto_coe_cofinite_of_discrete [T2Space G] {H : Type*} [Group H] {f : H ‚Üí* G}
    (hf : Function.Injective f) (hf' : DiscreteTopology f.range) :
    Tendsto f cofinite (cocompact _) := by
  replace hf : Function.Injective f.rangeRestrict := by simpa
  exact f.range.tendsto_coe_cofinite_of_discrete.comp hf.tendsto_cofinite

@[to_additive]
theorem TopologicalGroup.tendstoUniformly_iff {Œπ Œ± : Type*} (F : Œπ ‚Üí Œ± ‚Üí G) (f : Œ± ‚Üí G)
    (p : Filter Œπ) :
    @TendstoUniformly Œ± G Œπ (TopologicalGroup.toUniformSpace G) F f p ‚Üî
      ‚àÄ u ‚àà ùìù (1 : G), ‚àÄ·∂† i in p, ‚àÄ a, F i a / f a ‚àà u :=
  ‚ü®fun h u hu => h _ ‚ü®u, hu, fun _ => id‚ü©, fun h _ ‚ü®u, hu, hv‚ü© =>
    mem_of_superset (h u hu) fun _ hi a => hv (hi a)‚ü©
#align topological_group.tendsto_uniformly_iff TopologicalGroup.tendstoUniformly_iff
#align topological_add_group.tendsto_uniformly_iff TopologicalAddGroup.tendstoUniformly_iff

@[to_additive]
theorem TopologicalGroup.tendstoUniformlyOn_iff {Œπ Œ± : Type*} (F : Œπ ‚Üí Œ± ‚Üí G) (f : Œ± ‚Üí G)
    (p : Filter Œπ) (s : Set Œ±) :
    @TendstoUniformlyOn Œ± G Œπ (TopologicalGroup.toUniformSpace G) F f p s ‚Üî
      ‚àÄ u ‚àà ùìù (1 : G), ‚àÄ·∂† i in p, ‚àÄ a ‚àà s, F i a / f a ‚àà u :=
  ‚ü®fun h u hu => h _ ‚ü®u, hu, fun _ => id‚ü©, fun h _ ‚ü®u, hu, hv‚ü© =>
    mem_of_superset (h u hu) fun _ hi a ha => hv (hi a ha)‚ü©
#align topological_group.tendsto_uniformly_on_iff TopologicalGroup.tendstoUniformlyOn_iff
#align topological_add_group.tendsto_uniformly_on_iff TopologicalAddGroup.tendstoUniformlyOn_iff

@[to_additive]
theorem TopologicalGroup.tendstoLocallyUniformly_iff {Œπ Œ± : Type*} [TopologicalSpace Œ±]
    (F : Œπ ‚Üí Œ± ‚Üí G) (f : Œ± ‚Üí G) (p : Filter Œπ) :
    @TendstoLocallyUniformly Œ± G Œπ (TopologicalGroup.toUniformSpace G) _ F f p ‚Üî
      ‚àÄ u ‚àà ùìù (1 : G), ‚àÄ (x : Œ±), ‚àÉ t ‚àà ùìù x, ‚àÄ·∂† i in p, ‚àÄ a ‚àà t, F i a / f a ‚àà u :=
    ‚ü®fun h u hu => h _ ‚ü®u, hu, fun _ => id‚ü©, fun h _ ‚ü®u, hu, hv‚ü© x =>
      Exists.imp (fun _ ‚ü®h, hp‚ü© => ‚ü®h, mem_of_superset hp fun _ hi a ha => hv (hi a ha)‚ü©)
        (h u hu x)‚ü©
#align topological_group.tendsto_locally_uniformly_iff TopologicalGroup.tendstoLocallyUniformly_iff
#align topological_add_group.tendsto_locally_uniformly_iff TopologicalAddGroup.tendstoLocallyUniformly_iff

@[to_additive]
theorem TopologicalGroup.tendstoLocallyUniformlyOn_iff {Œπ Œ± : Type*} [TopologicalSpace Œ±]
    (F : Œπ ‚Üí Œ± ‚Üí G) (f : Œ± ‚Üí G) (p : Filter Œπ) (s : Set Œ±) :
    @TendstoLocallyUniformlyOn Œ± G Œπ (TopologicalGroup.toUniformSpace G) _ F f p s ‚Üî
      ‚àÄ u ‚àà ùìù (1 : G), ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, ‚àÄ·∂† i in p, ‚àÄ a ‚àà t, F i a / f a ‚àà u :=
  ‚ü®fun h u hu => h _ ‚ü®u, hu, fun _ => id‚ü©, fun h _ ‚ü®u, hu, hv‚ü© x =>
    (Exists.imp fun _ ‚ü®h, hp‚ü© => ‚ü®h, mem_of_superset hp fun _ hi a ha => hv (hi a ha)‚ü©) ‚àò
      h u hu x‚ü©
#align topological_group.tendsto_locally_uniformly_on_iff TopologicalGroup.tendstoLocallyUniformlyOn_iff
#align topological_add_group.tendsto_locally_uniformly_on_iff TopologicalAddGroup.tendstoLocallyUniformlyOn_iff

end TopologicalGroup

section TopologicalCommGroup

universe u v w x

open Filter

variable (G : Type*) [CommGroup G] [TopologicalSpace G] [TopologicalGroup G]

section

attribute [local instance] TopologicalGroup.toUniformSpace

variable {G}

@[to_additive]
-- Porting note: renamed theorem to conform to naming convention
theorem comm_topologicalGroup_is_uniform : UniformGroup G := by
  have :
    Tendsto
      ((fun p : G √ó G => p.1 / p.2) ‚àò fun p : (G √ó G) √ó G √ó G => (p.1.2 / p.1.1, p.2.2 / p.2.1))
      (comap (fun p : (G √ó G) √ó G √ó G => (p.1.2 / p.1.1, p.2.2 / p.2.1)) ((ùìù 1).prod (ùìù 1)))
      (ùìù (1 / 1)) :=
    (tendsto_fst.div' tendsto_snd).comp tendsto_comap
  constructor
  rw [UniformContinuous, uniformity_prod_eq_prod, tendsto_map'_iff, uniformity_eq_comap_nhds_one' G,
    tendsto_comap_iff, prod_comap_comap_eq]
  simp only [Function.comp, div_eq_mul_inv, mul_inv_rev, inv_inv, mul_comm, mul_left_comm] at *
  simp only [inv_one, mul_one, ‚Üê mul_assoc] at this
  simp_rw [‚Üê mul_assoc, mul_comm]
  assumption
#align topological_comm_group_is_uniform comm_topologicalGroup_is_uniform
#align topological_add_comm_group_is_uniform comm_topologicalAddGroup_is_uniform

open Set

end

@[to_additive]
theorem UniformGroup.toUniformSpace_eq {G : Type*} [u : UniformSpace G] [Group G]
    [UniformGroup G] : TopologicalGroup.toUniformSpace G = u := by
  ext : 1
  rw [uniformity_eq_comap_nhds_one' G, uniformity_eq_comap_nhds_one G]
#align uniform_group.to_uniform_space_eq UniformGroup.toUniformSpace_eq
#align uniform_add_group.to_uniform_space_eq UniformAddGroup.toUniformSpace_eq

end TopologicalCommGroup

open Filter Set Function

section

variable {Œ± : Type*} {Œ≤ : Type*} {hom : Type*}

variable [TopologicalSpace Œ±] [Group Œ±] [TopologicalGroup Œ±]

-- Œ≤ is a dense subgroup of Œ±, inclusion is denoted by e
variable [TopologicalSpace Œ≤] [Group Œ≤]

variable [FunLike hom Œ≤ Œ±] [MonoidHomClass hom Œ≤ Œ±] {e : hom} (de : DenseInducing e)

@[to_additive]
theorem tendsto_div_comap_self (x‚ÇÄ : Œ±) :
    Tendsto (fun t : Œ≤ √ó Œ≤ => t.2 / t.1) ((comap fun p : Œ≤ √ó Œ≤ => (e p.1, e p.2)) <| ùìù (x‚ÇÄ, x‚ÇÄ))
      (ùìù 1) := by
  have comm : ((fun x : Œ± √ó Œ± => x.2 / x.1) ‚àò fun t : Œ≤ √ó Œ≤ => (e t.1, e t.2)) =
      e ‚àò fun t : Œ≤ √ó Œ≤ => t.2 / t.1 := by
    ext t
    change e t.2 / e t.1 = e (t.2 / t.1)
    rw [‚Üê map_div e t.2 t.1]
  have lim : Tendsto (fun x : Œ± √ó Œ± => x.2 / x.1) (ùìù (x‚ÇÄ, x‚ÇÄ)) (ùìù (e 1)) := by
    simpa using (continuous_div'.comp (@continuous_swap Œ± Œ± _ _)).tendsto (x‚ÇÄ, x‚ÇÄ)
  simpa using de.tendsto_comap_nhds_nhds lim comm
#align tendsto_div_comap_self tendsto_div_comap_self
#align tendsto_sub_comap_self tendsto_sub_comap_self

end

namespace DenseInducing

variable {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œ¥ : Type*}

variable {G : Type*}

-- Œ≤ is a dense subgroup of Œ±, inclusion is denoted by e
-- Œ¥ is a dense subgroup of Œ≥, inclusion is denoted by f
variable [TopologicalSpace Œ±] [AddCommGroup Œ±] [TopologicalAddGroup Œ±]

variable [TopologicalSpace Œ≤] [AddCommGroup Œ≤] [TopologicalAddGroup Œ≤]

variable [TopologicalSpace Œ≥] [AddCommGroup Œ≥] [TopologicalAddGroup Œ≥]

variable [TopologicalSpace Œ¥] [AddCommGroup Œ¥] [TopologicalAddGroup Œ¥]

variable [UniformSpace G] [AddCommGroup G] [UniformAddGroup G] [SeparatedSpace G] [CompleteSpace G]

variable {e : Œ≤ ‚Üí+ Œ±} (de : DenseInducing e)

variable {f : Œ¥ ‚Üí+ Œ≥} (df : DenseInducing f)

variable {œÜ : Œ≤ ‚Üí+ Œ¥ ‚Üí+ G}

variable (hœÜ : Continuous (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2))

variable {W' : Set G} (W'_nhd : W' ‚àà ùìù (0 : G))

private theorem extend_Z_bilin_aux (x‚ÇÄ : Œ±) (y‚ÇÅ : Œ¥) : ‚àÉ U‚ÇÇ ‚àà comap e (ùìù x‚ÇÄ), ‚àÄ x ‚àà U‚ÇÇ, ‚àÄ x' ‚àà U‚ÇÇ,
    (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (x' - x, y‚ÇÅ) ‚àà W' := by
  let Nx := ùìù x‚ÇÄ
  let ee := fun u : Œ≤ √ó Œ≤ => (e u.1, e u.2)
  have lim1 : Tendsto (fun a : Œ≤ √ó Œ≤ => (a.2 - a.1, y‚ÇÅ))
      (comap e Nx √óÀ¢ comap e Nx) (ùìù (0, y‚ÇÅ)) := by
    have := Tendsto.prod_mk (tendsto_sub_comap_self de x‚ÇÄ)
      (tendsto_const_nhds : Tendsto (fun _ : Œ≤ √ó Œ≤ => y‚ÇÅ) (comap ee <| ùìù (x‚ÇÄ, x‚ÇÄ)) (ùìù y‚ÇÅ))
    rw [nhds_prod_eq, prod_comap_comap_eq, ‚Üê nhds_prod_eq]
    exact (this : _)
  have lim2 : Tendsto (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (ùìù (0, y‚ÇÅ)) (ùìù 0) := by
    simpa using hœÜ.tendsto (0, y‚ÇÅ)
  have lim := lim2.comp lim1
  rw [tendsto_prod_self_iff] at lim
  simp_rw [ball_mem_comm]
  exact lim W' W'_nhd
#noalign dense_inducing.extend_Z_bilin_aux

private theorem extend_Z_bilin_key (x‚ÇÄ : Œ±) (y‚ÇÄ : Œ≥) : ‚àÉ U ‚àà comap e (ùìù x‚ÇÄ), ‚àÉ V ‚àà comap f (ùìù y‚ÇÄ),
    ‚àÄ x ‚àà U, ‚àÄ x' ‚àà U, ‚àÄ (y) (_ : y ‚àà V) (y') (_ : y' ‚àà V),
    (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (x', y') - (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (x, y) ‚àà W' := by
  let ee := fun u : Œ≤ √ó Œ≤ => (e u.1, e u.2)
  let ff := fun u : Œ¥ √ó Œ¥ => (f u.1, f u.2)
  have lim_œÜ : Filter.Tendsto (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (ùìù (0, 0)) (ùìù 0) := by
    simpa using hœÜ.tendsto (0, 0)
  have lim_œÜ_sub_sub :
    Tendsto (fun p : (Œ≤ √ó Œ≤) √ó Œ¥ √ó Œ¥ => (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (p.1.2 - p.1.1, p.2.2 - p.2.1))
      ((comap ee <| ùìù (x‚ÇÄ, x‚ÇÄ)) √óÀ¢ (comap ff <| ùìù (y‚ÇÄ, y‚ÇÄ))) (ùìù 0) := by
    have lim_sub_sub :
      Tendsto (fun p : (Œ≤ √ó Œ≤) √ó Œ¥ √ó Œ¥ => (p.1.2 - p.1.1, p.2.2 - p.2.1))
        (comap ee (ùìù (x‚ÇÄ, x‚ÇÄ)) √óÀ¢ comap ff (ùìù (y‚ÇÄ, y‚ÇÄ))) (ùìù 0 √óÀ¢ ùìù 0) := by
      have := Filter.prod_mono (tendsto_sub_comap_self de x‚ÇÄ) (tendsto_sub_comap_self df y‚ÇÄ)
      rwa [prod_map_map_eq] at this
    rw [‚Üê nhds_prod_eq] at lim_sub_sub
    exact Tendsto.comp lim_œÜ lim_sub_sub
  rcases exists_nhds_zero_quarter W'_nhd with ‚ü®W, W_nhd, W4‚ü©
  have :
    ‚àÉ U‚ÇÅ ‚àà comap e (ùìù x‚ÇÄ), ‚àÉ V‚ÇÅ ‚àà comap f (ùìù y‚ÇÄ), ‚àÄ (x) (_ : x ‚àà U‚ÇÅ) (x') (_ : x' ‚àà U‚ÇÅ),
      ‚àÄ (y) (_ : y ‚àà V‚ÇÅ) (y') (_ : y' ‚àà V‚ÇÅ), (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (x' - x, y' - y) ‚àà W := by
    rcases tendsto_prod_iff.1 lim_œÜ_sub_sub W W_nhd with ‚ü®U, U_in, V, V_in, H‚ü©
    rw [nhds_prod_eq, ‚Üê prod_comap_comap_eq, mem_prod_same_iff] at U_in V_in
    rcases U_in with ‚ü®U‚ÇÅ, U‚ÇÅ_in, HU‚ÇÅ‚ü©
    rcases V_in with ‚ü®V‚ÇÅ, V‚ÇÅ_in, HV‚ÇÅ‚ü©
    exists U‚ÇÅ, U‚ÇÅ_in, V‚ÇÅ, V‚ÇÅ_in
    intro x x_in x' x'_in y y_in y' y'_in
    exact H _ _ (HU‚ÇÅ (mk_mem_prod x_in x'_in)) (HV‚ÇÅ (mk_mem_prod y_in y'_in))
  rcases this with ‚ü®U‚ÇÅ, U‚ÇÅ_nhd, V‚ÇÅ, V‚ÇÅ_nhd, H‚ü©
  obtain ‚ü®x‚ÇÅ, x‚ÇÅ_in‚ü© : U‚ÇÅ.Nonempty := (de.comap_nhds_neBot _).nonempty_of_mem U‚ÇÅ_nhd
  obtain ‚ü®y‚ÇÅ, y‚ÇÅ_in‚ü© : V‚ÇÅ.Nonempty := (df.comap_nhds_neBot _).nonempty_of_mem V‚ÇÅ_nhd
  have cont_flip : Continuous fun p : Œ¥ √ó Œ≤ => œÜ.flip p.1 p.2 := by
    show Continuous ((fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) ‚àò Prod.swap)
    exact hœÜ.comp continuous_swap
  rcases extend_Z_bilin_aux de hœÜ W_nhd x‚ÇÄ y‚ÇÅ with ‚ü®U‚ÇÇ, U‚ÇÇ_nhd, HU‚ü©
  rcases extend_Z_bilin_aux df cont_flip W_nhd y‚ÇÄ x‚ÇÅ with ‚ü®V‚ÇÇ, V‚ÇÇ_nhd, HV‚ü©
  exists U‚ÇÅ ‚à© U‚ÇÇ, inter_mem U‚ÇÅ_nhd U‚ÇÇ_nhd, V‚ÇÅ ‚à© V‚ÇÇ, inter_mem V‚ÇÅ_nhd V‚ÇÇ_nhd
  rintro x ‚ü®xU‚ÇÅ, xU‚ÇÇ‚ü© x' ‚ü®x'U‚ÇÅ, x'U‚ÇÇ‚ü© y ‚ü®yV‚ÇÅ, yV‚ÇÇ‚ü© y' ‚ü®y'V‚ÇÅ, y'V‚ÇÇ‚ü©
  have key_formula : œÜ x' y' - œÜ x y
    = œÜ (x' - x) y‚ÇÅ + œÜ (x' - x) (y' - y‚ÇÅ) + œÜ x‚ÇÅ (y' - y) + œÜ (x - x‚ÇÅ) (y' - y) := by simp; abel
  rw [key_formula]
  have h‚ÇÅ := HU x xU‚ÇÇ x' x'U‚ÇÇ
  have h‚ÇÇ := H x xU‚ÇÅ x' x'U‚ÇÅ y‚ÇÅ y‚ÇÅ_in y' y'V‚ÇÅ
  have h‚ÇÉ := HV y yV‚ÇÇ y' y'V‚ÇÇ
  have h‚ÇÑ := H x‚ÇÅ x‚ÇÅ_in x xU‚ÇÅ y yV‚ÇÅ y' y'V‚ÇÅ
  exact W4 h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ
#noalign dense_inducing.extend_Z_bilin_key

open DenseInducing

/-- Bourbaki GT III.6.5 Theorem I:
‚Ñ§-bilinear continuous maps from dense images into a complete Hausdorff group extend by continuity.
Note: Bourbaki assumes that Œ± and Œ≤ are also complete Hausdorff, but this is not necessary. -/
theorem extend_Z_bilin : Continuous (extend (de.prod df) (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2)) := by
  refine' continuous_extend_of_cauchy _ _
  rintro ‚ü®x‚ÇÄ, y‚ÇÄ‚ü©
  constructor
  ¬∑ apply NeBot.map
    apply comap_neBot
    intro U h
    rcases mem_closure_iff_nhds.1 ((de.prod df).dense (x‚ÇÄ, y‚ÇÄ)) U h with ‚ü®x, x_in, ‚ü®z, z_x‚ü©‚ü©
    exists z
    aesop
  ¬∑ suffices map (fun p : (Œ≤ √ó Œ¥) √ó Œ≤ √ó Œ¥ => (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) p.2 -
      (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) p.1)
        (comap (fun p : (Œ≤ √ó Œ¥) √ó Œ≤ √ó Œ¥ => ((e p.1.1, f p.1.2), (e p.2.1, f p.2.2)))
        (ùìù (x‚ÇÄ, y‚ÇÄ) √óÀ¢ ùìù (x‚ÇÄ, y‚ÇÄ))) ‚â§ ùìù 0 by
      rwa [uniformity_eq_comap_nhds_zero G, prod_map_map_eq, ‚Üê map_le_iff_le_comap, Filter.map_map,
        prod_comap_comap_eq]
    intro W' W'_nhd
    have key := extend_Z_bilin_key de df hœÜ W'_nhd x‚ÇÄ y‚ÇÄ
    rcases key with ‚ü®U, U_nhd, V, V_nhd, h‚ü©
    rw [mem_comap] at U_nhd
    rcases U_nhd with ‚ü®U', U'_nhd, U'_sub‚ü©
    rw [mem_comap] at V_nhd
    rcases V_nhd with ‚ü®V', V'_nhd, V'_sub‚ü©
    rw [mem_map, mem_comap, nhds_prod_eq]
    exists (U' √óÀ¢ V') √óÀ¢ U' √óÀ¢ V'
    rw [mem_prod_same_iff]
    simp only [exists_prop]
    constructor
    ¬∑ have := prod_mem_prod U'_nhd V'_nhd
      tauto
    ¬∑ intro p h'
      simp only [Set.mem_preimage, Set.prod_mk_mem_set_prod_eq] at h'
      rcases p with ‚ü®‚ü®x, y‚ü©, ‚ü®x', y'‚ü©‚ü©
      apply h <;> tauto
set_option linter.uppercaseLean3 false in
#align dense_inducing.extend_Z_bilin DenseInducing.extend_Z_bilin

end DenseInducing

section CompleteQuotient

universe u

open TopologicalSpace Classical

/-- The quotient `G ‚ß∏ N` of a complete first countable topological group `G` by a normal subgroup
is itself complete. [N. Bourbaki, *General Topology*, IX.3.1 Proposition 4][bourbaki1966b]

Because a topological group is not equipped with a `UniformSpace` instance by default, we must
explicitly provide it in order to consider completeness. See `QuotientGroup.completeSpace` for a
version in which `G` is already equipped with a uniform structure. -/
@[to_additive "The quotient `G ‚ß∏ N` of a complete first countable topological additive group
`G` by a normal additive subgroup is itself complete. Consequently, quotients of Banach spaces by
subspaces are complete. [N. Bourbaki, *General Topology*, IX.3.1 Proposition 4][bourbaki1966b]

Because an additive topological group is not equipped with a `UniformSpace` instance by default,
we must explicitly provide it in order to consider completeness. See
`QuotientAddGroup.completeSpace` for a version in which `G` is already equipped with a uniform
structure."]
instance QuotientGroup.completeSpace' (G : Type u) [Group G] [TopologicalSpace G]
    [TopologicalGroup G] [FirstCountableTopology G] (N : Subgroup G) [N.Normal]
    [@CompleteSpace G (TopologicalGroup.toUniformSpace G)] :
    @CompleteSpace (G ‚ß∏ N) (TopologicalGroup.toUniformSpace (G ‚ß∏ N)) := by
  /- Since `G ‚ß∏ N` is a topological group it is a uniform space, and since `G` is first countable
    the uniformities of both `G` and `G ‚ß∏ N` are countably generated. Moreover, we may choose a
    sequential antitone neighborhood basis `u` for `ùìù (1 : G)` so that `(u (n + 1)) ^ 2 ‚äÜ u n`, and
    this descends to an antitone neighborhood basis `v` for `ùìù (1 : G ‚ß∏ N)`. Since `ùì§ (G ‚ß∏ N)` is
    countably generated, it suffices to show any Cauchy sequence `x` converges. -/
  letI : UniformSpace (G ‚ß∏ N) := TopologicalGroup.toUniformSpace (G ‚ß∏ N)
  letI : UniformSpace G := TopologicalGroup.toUniformSpace G
  haveI : (ùì§ (G ‚ß∏ N)).IsCountablyGenerated := comap.isCountablyGenerated _ _
  obtain ‚ü®u, hu, u_mul‚ü© := TopologicalGroup.exists_antitone_basis_nhds_one G
  obtain ‚ü®hv, v_anti‚ü© := @HasAntitoneBasis.map _ _ _ _ _ _ ((‚Üë) : G ‚Üí G ‚ß∏ N) hu
  rw [‚Üê QuotientGroup.nhds_eq N 1, QuotientGroup.mk_one] at hv
  refine' UniformSpace.complete_of_cauchySeq_tendsto fun x hx => _
  /- Given `n : ‚Ñï`, for sufficiently large `a b : ‚Ñï`, given any lift of `x b`, we can find a lift
    of `x a` such that the quotient of the lifts lies in `u n`. -/
  have key‚ÇÄ : ‚àÄ i j : ‚Ñï, ‚àÉ M : ‚Ñï, j < M ‚àß ‚àÄ a b : ‚Ñï, M ‚â§ a ‚Üí M ‚â§ b ‚Üí
      ‚àÄ g : G, x b = g ‚Üí ‚àÉ g' : G, g / g' ‚àà u i ‚àß x a = g' := by
    have hùì§GN : (ùì§ (G ‚ß∏ N)).HasBasis (fun _ => True) fun i => { x | x.snd / x.fst ‚àà (‚Üë) '' u i } :=
      by simpa [uniformity_eq_comap_nhds_one'] using hv.comap _
    rw [hùì§GN.cauchySeq_iff] at hx
    simp only [ge_iff_le, mem_setOf_eq, forall_true_left, mem_image] at hx
    intro i j
    rcases hx i with ‚ü®M, hM‚ü©
    refine' ‚ü®max j M + 1, (le_max_left _ _).trans_lt (lt_add_one _), fun a b ha hb g hg => _‚ü©
    obtain ‚ü®y, y_mem, hy‚ü© :=
      hM a (((le_max_right j _).trans (lt_add_one _).le).trans ha) b
        (((le_max_right j _).trans (lt_add_one _).le).trans hb)
    refine'
      ‚ü®y‚Åª¬π * g, by
        simpa only [div_eq_mul_inv, mul_inv_rev, inv_inv, mul_inv_cancel_left] using y_mem, _‚ü©
    rw [QuotientGroup.mk_mul, QuotientGroup.mk_inv, hy, hg, inv_div, div_mul_cancel']
  /- Inductively construct a subsequence `œÜ : ‚Ñï ‚Üí ‚Ñï` using `key‚ÇÄ` so that if `a b : ‚Ñï` exceed
    `œÜ (n + 1)`, then we may find lifts whose quotients lie within `u n`. -/
  set œÜ : ‚Ñï ‚Üí ‚Ñï := fun n => Nat.recOn n (choose <| key‚ÇÄ 0 0) fun k yk => choose <| key‚ÇÄ (k + 1) yk
  have hœÜ :
    ‚àÄ n : ‚Ñï,
      œÜ n < œÜ (n + 1) ‚àß
        ‚àÄ a b : ‚Ñï,
          œÜ (n + 1) ‚â§ a ‚Üí
            œÜ (n + 1) ‚â§ b ‚Üí ‚àÄ g : G, x b = g ‚Üí ‚àÉ g' : G, g / g' ‚àà u (n + 1) ‚àß x a = g' :=
    fun n => choose_spec (key‚ÇÄ (n + 1) (œÜ n))
  /- Inductively construct a sequence `x' n : G` of lifts of `x (œÜ (n + 1))` such that quotients of
    successive terms lie in `x' n / x' (n + 1) ‚àà u (n + 1)`. We actually need the proofs that each
    term is a lift to construct the next term, so we use a Œ£-type. -/
  set x' : ‚àÄ n, PSigma fun g : G => x (œÜ (n + 1)) = g := fun n =>
    Nat.recOn n
      ‚ü®choose (QuotientGroup.mk_surjective (x (œÜ 1))),
        (choose_spec (QuotientGroup.mk_surjective (x (œÜ 1)))).symm‚ü©
      fun k hk =>
      ‚ü®choose <| (hœÜ k).2 _ _ (hœÜ (k + 1)).1.le le_rfl hk.fst hk.snd,
        (choose_spec <| (hœÜ k).2 _ _ (hœÜ (k + 1)).1.le le_rfl hk.fst hk.snd).2‚ü©
  have hx' : ‚àÄ n : ‚Ñï, (x' n).fst / (x' (n + 1)).fst ‚àà u (n + 1) := fun n =>
    (choose_spec <| (hœÜ n).2 _ _ (hœÜ (n + 1)).1.le le_rfl (x' n).fst (x' n).snd).1
  /- The sequence `x'` is Cauchy. This is where we exploit the condition on `u`. The key idea
    is to show by decreasing induction that `x' m / x' n ‚àà u m` if `m ‚â§ n`. -/
  have x'_cauchy : CauchySeq fun n => (x' n).fst := by
    have hùì§G : (ùì§ G).HasBasis (fun _ => True) fun i => { x | x.snd / x.fst ‚àà u i } := by
      simpa [uniformity_eq_comap_nhds_one'] using hu.toHasBasis.comap _
    rw [hùì§G.cauchySeq_iff']
    simp only [ge_iff_le, mem_setOf_eq, forall_true_left]
    exact fun m =>
      ‚ü®m, fun n hmn =>
        Nat.decreasingInduction'
          (fun k _ _ hk => u_mul k ‚ü®_, hx' k, _, hk, div_mul_div_cancel' _ _ _‚ü©) hmn
          (by simpa only [div_self'] using mem_of_mem_nhds (hu.mem _))‚ü©
  /- Since `G` is complete, `x'` converges to some `x‚ÇÄ`, and so the image of this sequence under
    the quotient map converges to `‚Üëx‚ÇÄ`. The image of `x'` is a convergent subsequence of `x`, and
    since `x` is Cauchy, this implies it converges. -/
  rcases cauchySeq_tendsto_of_complete x'_cauchy with ‚ü®x‚ÇÄ, hx‚ÇÄ‚ü©
  refine'
    ‚ü®‚Üëx‚ÇÄ,
      tendsto_nhds_of_cauchySeq_of_subseq hx
        (strictMono_nat_of_lt_succ fun n => (hœÜ (n + 1)).1).tendsto_atTop _‚ü©
  convert ((continuous_coinduced_rng : Continuous ((‚Üë) : G ‚Üí G ‚ß∏ N)).tendsto x‚ÇÄ).comp hx‚ÇÄ
  exact funext fun n => (x' n).snd
#align quotient_group.complete_space' QuotientGroup.completeSpace'
#align quotient_add_group.complete_space' QuotientAddGroup.completeSpace'

/-- The quotient `G ‚ß∏ N` of a complete first countable uniform group `G` by a normal subgroup
is itself complete. In contrast to `QuotientGroup.completeSpace'`, in this version `G` is
already equipped with a uniform structure.
[N. Bourbaki, *General Topology*, IX.3.1 Proposition 4][bourbaki1966b]

Even though `G` is equipped with a uniform structure, the quotient `G ‚ß∏ N` does not inherit a
uniform structure, so it is still provided manually via `TopologicalGroup.toUniformSpace`.
In the most common use cases, this coincides (definitionally) with the uniform structure on the
quotient obtained via other means.  -/
@[to_additive "The quotient `G ‚ß∏ N` of a complete first countable uniform additive group
`G` by a normal additive subgroup is itself complete. Consequently, quotients of Banach spaces by
subspaces are complete. In contrast to `QuotientAddGroup.completeSpace'`, in this version
`G` is already equipped with a uniform structure.
[N. Bourbaki, *General Topology*, IX.3.1 Proposition 4][bourbaki1966b]

Even though `G` is equipped with a uniform structure, the quotient `G ‚ß∏ N` does not inherit a
uniform structure, so it is still provided manually via `TopologicalAddGroup.toUniformSpace`.
In the most common use case ‚îÄ quotients of normed additive commutative groups by subgroups ‚îÄ
significant care was taken so that the uniform structure inherent in that setting coincides
(definitionally) with the uniform structure provided here."]
instance QuotientGroup.completeSpace (G : Type u) [Group G] [us : UniformSpace G] [UniformGroup G]
    [FirstCountableTopology G] (N : Subgroup G) [N.Normal] [hG : CompleteSpace G] :
    @CompleteSpace (G ‚ß∏ N) (TopologicalGroup.toUniformSpace (G ‚ß∏ N)) := by
  rw [‚Üê @UniformGroup.toUniformSpace_eq _ us _ _] at hG
  infer_instance
#align quotient_group.complete_space QuotientGroup.completeSpace
#align quotient_add_group.complete_space QuotientAddGroup.completeSpace

end CompleteQuotient
