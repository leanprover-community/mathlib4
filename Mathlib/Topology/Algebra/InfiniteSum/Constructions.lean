/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl
-/
import Mathlib.Topology.Algebra.InfiniteSum.Group
import Mathlib.Topology.Algebra.Star

/-!
# Topological sums and functorial constructions

Lemmas on the interaction of `tsum`, `HasSum` etc with products, Sigma and Pi types,
`MulOpposite`, etc.

-/

noncomputable section

open Filter Finset Function

open scoped BigOperators Topology

variable {Œ± Œ≤ Œ≥ Œ¥ : Type*}


/-! ## Product, Sigma and Pi types -/

section ProdDomain

variable [AddCommMonoid Œ±] [TopologicalSpace Œ±]

theorem hasSum_pi_single [DecidableEq Œ≤] (b : Œ≤) (a : Œ±) : HasSum (Pi.single b a) a := by
  convert hasSum_ite_eq b a
  simp [Pi.single_apply]
#align has_sum_pi_single hasSum_pi_single

@[simp]
theorem tsum_pi_single [DecidableEq Œ≤] (b : Œ≤) (a : Œ±) : ‚àë' b', Pi.single b a b' = a := by
  rw [tsum_eq_single b]
  ¬∑ simp
  ¬∑ intro b' hb'; simp [hb']
#align tsum_pi_single tsum_pi_single

lemma tsum_setProd_singleton_left (b : Œ≤) (t : Set Œ≥) (f : Œ≤ √ó Œ≥ ‚Üí Œ±) :
    (‚àë' x : {b} √óÀ¢ t, f x) = ‚àë' c : t, f (b, c) := by
  rw [tsum_congr_set_coe _ Set.singleton_prod, tsum_image _ ((Prod.mk.inj_left b).injOn _)]

lemma tsum_setProd_singleton_right (s : Set Œ≤) (c : Œ≥) (f : Œ≤ √ó Œ≥ ‚Üí Œ±) :
    (‚àë' x : s √óÀ¢ {c}, f x) = ‚àë' b : s, f (b, c) := by
  rw [tsum_congr_set_coe _ Set.prod_singleton, tsum_image _ ((Prod.mk.inj_right c).injOn _)]

theorem Summable.prod_symm {f : Œ≤ √ó Œ≥ ‚Üí Œ±} (hf : Summable f) : Summable fun p : Œ≥ √ó Œ≤ ‚Ü¶ f p.swap :=
  (Equiv.prodComm Œ≥ Œ≤).summable_iff.2 hf
#align summable.prod_symm Summable.prod_symm

end ProdDomain

section ProdCodomain

variable [AddCommMonoid Œ±] [TopologicalSpace Œ±] [AddCommMonoid Œ≥] [TopologicalSpace Œ≥]

theorem HasSum.prod_mk {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ≥} {a : Œ±} {b : Œ≥} (hf : HasSum f a) (hg : HasSum g b) :
    HasSum (fun x ‚Ü¶ (‚ü®f x, g x‚ü© : Œ± √ó Œ≥)) ‚ü®a, b‚ü© := by
  simp [HasSum, ‚Üê prod_mk_sum, Filter.Tendsto.prod_mk_nhds hf hg]
#align has_sum.prod_mk HasSum.prod_mk

end ProdCodomain

section ContinuousAdd

variable [AddCommMonoid Œ±] [TopologicalSpace Œ±] [ContinuousAdd Œ±]

section RegularSpace

variable [RegularSpace Œ±]

theorem HasSum.sigma {Œ≥ : Œ≤ ‚Üí Type*} {f : (Œ£ b : Œ≤, Œ≥ b) ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {a : Œ±}
    (ha : HasSum f a) (hf : ‚àÄ b, HasSum (fun c ‚Ü¶ f ‚ü®b, c‚ü©) (g b)) : HasSum g a := by
  classical
  refine' (atTop_basis.tendsto_iff (closed_nhds_basis a)).mpr _
  rintro s ‚ü®hs, hsc‚ü©
  rcases mem_atTop_sets.mp (ha hs) with ‚ü®u, hu‚ü©
  use u.image Sigma.fst, trivial
  intro bs hbs
  simp only [Set.mem_preimage, ge_iff_le, Finset.le_iff_subset] at hu
  have : Tendsto (fun t : Finset (Œ£b, Œ≥ b) ‚Ü¶ ‚àë p in t.filter fun p ‚Ü¶ p.1 ‚àà bs, f p) atTop
      (ùìù <| ‚àë b in bs, g b) := by
    simp only [‚Üê sigma_preimage_mk, sum_sigma]
    refine' tendsto_finset_sum _ fun b _ ‚Ü¶ _
    change
      Tendsto (fun t ‚Ü¶ (fun t ‚Ü¶ ‚àë s in t, f ‚ü®b, s‚ü©) (preimage t (Sigma.mk b) _)) atTop (ùìù (g b))
    exact (hf b).comp (tendsto_finset_preimage_atTop_atTop (sigma_mk_injective))
  refine' hsc.mem_of_tendsto this (eventually_atTop.2 ‚ü®u, fun t ht ‚Ü¶ hu _ fun x hx ‚Ü¶ _‚ü©)
  exact mem_filter.2 ‚ü®ht hx, hbs <| mem_image_of_mem _ hx‚ü©
#align has_sum.sigma HasSum.sigma

/-- If a series `f` on `Œ≤ √ó Œ≥` has sum `a` and for each `b` the restriction of `f` to `{b} √ó Œ≥`
has sum `g b`, then the series `g` has sum `a`. -/
theorem HasSum.prod_fiberwise {f : Œ≤ √ó Œ≥ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {a : Œ±} (ha : HasSum f a)
    (hf : ‚àÄ b, HasSum (fun c ‚Ü¶ f (b, c)) (g b)) : HasSum g a :=
  HasSum.sigma ((Equiv.sigmaEquivProd Œ≤ Œ≥).hasSum_iff.2 ha) hf
#align has_sum.prod_fiberwise HasSum.prod_fiberwise

theorem Summable.sigma' {Œ≥ : Œ≤ ‚Üí Type*} {f : (Œ£b : Œ≤, Œ≥ b) ‚Üí Œ±} (ha : Summable f)
    (hf : ‚àÄ b, Summable fun c ‚Ü¶ f ‚ü®b, c‚ü©) : Summable fun b ‚Ü¶ ‚àë' c, f ‚ü®b, c‚ü© :=
  (ha.hasSum.sigma fun b ‚Ü¶ (hf b).hasSum).summable
#align summable.sigma' Summable.sigma'

end RegularSpace

section T3Space

variable [T3Space Œ±]

theorem HasSum.sigma_of_hasSum {Œ≥ : Œ≤ ‚Üí Type*} {f : (Œ£b : Œ≤, Œ≥ b) ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±}
    {a : Œ±} (ha : HasSum g a) (hf : ‚àÄ b, HasSum (fun c ‚Ü¶ f ‚ü®b, c‚ü©) (g b)) (hf' : Summable f) :
    HasSum f a := by simpa [(hf'.hasSum.sigma hf).unique ha] using hf'.hasSum
#align has_sum.sigma_of_has_sum HasSum.sigma_of_hasSum

theorem tsum_sigma' {Œ≥ : Œ≤ ‚Üí Type*} {f : (Œ£b : Œ≤, Œ≥ b) ‚Üí Œ±} (h‚ÇÅ : ‚àÄ b, Summable fun c ‚Ü¶ f ‚ü®b, c‚ü©)
    (h‚ÇÇ : Summable f) : ‚àë' p, f p = ‚àë' (b) (c), f ‚ü®b, c‚ü© :=
  (h‚ÇÇ.hasSum.sigma fun b ‚Ü¶ (h‚ÇÅ b).hasSum).tsum_eq.symm
#align tsum_sigma' tsum_sigma'

theorem tsum_prod' {f : Œ≤ √ó Œ≥ ‚Üí Œ±} (h : Summable f) (h‚ÇÅ : ‚àÄ b, Summable fun c ‚Ü¶ f (b, c)) :
    ‚àë' p, f p = ‚àë' (b) (c), f (b, c) :=
  (h.hasSum.prod_fiberwise fun b ‚Ü¶ (h‚ÇÅ b).hasSum).tsum_eq.symm
#align tsum_prod' tsum_prod'

theorem tsum_comm' {f : Œ≤ ‚Üí Œ≥ ‚Üí Œ±} (h : Summable (Function.uncurry f)) (h‚ÇÅ : ‚àÄ b, Summable (f b))
    (h‚ÇÇ : ‚àÄ c, Summable fun b ‚Ü¶ f b c) : ‚àë' (c) (b), f b c = ‚àë' (b) (c), f b c := by
  erw [‚Üê tsum_prod' h h‚ÇÅ, ‚Üê tsum_prod' h.prod_symm h‚ÇÇ, ‚Üê (Equiv.prodComm Œ≥ Œ≤).tsum_eq (uncurry f)]
  rfl
#align tsum_comm' tsum_comm'

end T3Space

end ContinuousAdd

section CompleteSpace

variable [AddCommGroup Œ±] [UniformSpace Œ±] [UniformAddGroup Œ±] [CompleteSpace Œ±]

theorem Summable.sigma_factor {Œ≥ : Œ≤ ‚Üí Type*} {f : (Œ£b : Œ≤, Œ≥ b) ‚Üí Œ±} (ha : Summable f) (b : Œ≤) :
    Summable fun c ‚Ü¶ f ‚ü®b, c‚ü© :=
  ha.comp_injective sigma_mk_injective
#align summable.sigma_factor Summable.sigma_factor

theorem Summable.sigma {Œ≥ : Œ≤ ‚Üí Type*} {f : (Œ£b : Œ≤, Œ≥ b) ‚Üí Œ±} (ha : Summable f) :
    Summable fun b ‚Ü¶ ‚àë' c, f ‚ü®b, c‚ü© :=
  ha.sigma' fun b ‚Ü¶ ha.sigma_factor b
#align summable.sigma Summable.sigma

theorem Summable.prod_factor {f : Œ≤ √ó Œ≥ ‚Üí Œ±} (h : Summable f) (b : Œ≤) :
    Summable fun c ‚Ü¶ f (b, c) :=
  h.comp_injective fun _ _ h ‚Ü¶ (Prod.ext_iff.1 h).2
#align summable.prod_factor Summable.prod_factor

lemma HasSum.tsum_fiberwise [T2Space Œ±] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : HasSum f a) (g : Œ≤ ‚Üí Œ≥) :
    HasSum (fun c : Œ≥ ‚Ü¶ ‚àë' b : g ‚Åª¬π' {c}, f b) a :=
  (((Equiv.sigmaFiberEquiv g).hasSum_iff).mpr hf).sigma <|
    fun _ ‚Ü¶ ((hf.summable.subtype _).hasSum_iff).mpr rfl

section CompleteT0Space

variable [T0Space Œ±]

theorem tsum_sigma {Œ≥ : Œ≤ ‚Üí Type*} {f : (Œ£b : Œ≤, Œ≥ b) ‚Üí Œ±} (ha : Summable f) :
    ‚àë' p, f p = ‚àë' (b) (c), f ‚ü®b, c‚ü© :=
  tsum_sigma' (fun b ‚Ü¶ ha.sigma_factor b) ha
#align tsum_sigma tsum_sigma

theorem tsum_prod {f : Œ≤ √ó Œ≥ ‚Üí Œ±} (h : Summable f) :
    ‚àë' p, f p = ‚àë' (b) (c), f ‚ü®b, c‚ü© :=
  tsum_prod' h h.prod_factor
#align tsum_prod tsum_prod

theorem tsum_comm {f : Œ≤ ‚Üí Œ≥ ‚Üí Œ±} (h : Summable (Function.uncurry f)) :
    ‚àë' (c) (b), f b c = ‚àë' (b) (c), f b c :=
  tsum_comm' h h.prod_factor h.prod_symm.prod_factor
#align tsum_comm tsum_comm

end CompleteT0Space

end CompleteSpace

section Pi

variable {Œπ : Type*} {œÄ : Œ± ‚Üí Type*} [‚àÄ x, AddCommMonoid (œÄ x)] [‚àÄ x, TopologicalSpace (œÄ x)]

theorem Pi.hasSum {f : Œπ ‚Üí ‚àÄ x, œÄ x} {g : ‚àÄ x, œÄ x} :
    HasSum f g ‚Üî ‚àÄ x, HasSum (fun i ‚Ü¶ f i x) (g x) := by
  simp only [HasSum, tendsto_pi_nhds, sum_apply]
#align pi.has_sum Pi.hasSum

theorem Pi.summable {f : Œπ ‚Üí ‚àÄ x, œÄ x} : Summable f ‚Üî ‚àÄ x, Summable fun i ‚Ü¶ f i x := by
  simp only [Summable, Pi.hasSum, Classical.skolem]
#align pi.summable Pi.summable

theorem tsum_apply [‚àÄ x, T2Space (œÄ x)] {f : Œπ ‚Üí ‚àÄ x, œÄ x} {x : Œ±} (hf : Summable f) :
    (‚àë' i, f i) x = ‚àë' i, f i x :=
  (Pi.hasSum.mp hf.hasSum x).tsum_eq.symm
#align tsum_apply tsum_apply

end Pi


/-! ## Multiplicative opposite -/

section MulOpposite

open MulOpposite

variable [AddCommMonoid Œ±] [TopologicalSpace Œ±] {f : Œ≤ ‚Üí Œ±} {a : Œ±}

theorem HasSum.op (hf : HasSum f a) : HasSum (fun a ‚Ü¶ op (f a)) (op a) :=
  (hf.map (@opAddEquiv Œ± _) continuous_op : _)
#align has_sum.op HasSum.op

theorem Summable.op (hf : Summable f) : Summable (op ‚àò f) :=
  hf.hasSum.op.summable
#align summable.op Summable.op

theorem HasSum.unop {f : Œ≤ ‚Üí Œ±·µê·µí·µñ} {a : Œ±·µê·µí·µñ} (hf : HasSum f a) :
    HasSum (fun a ‚Ü¶ unop (f a)) (unop a) :=
  (hf.map (@opAddEquiv Œ± _).symm continuous_unop : _)
#align has_sum.unop HasSum.unop

theorem Summable.unop {f : Œ≤ ‚Üí Œ±·µê·µí·µñ} (hf : Summable f) : Summable (unop ‚àò f) :=
  hf.hasSum.unop.summable
#align summable.unop Summable.unop

@[simp]
theorem hasSum_op : HasSum (fun a ‚Ü¶ op (f a)) (op a) ‚Üî HasSum f a :=
  ‚ü®HasSum.unop, HasSum.op‚ü©
#align has_sum_op hasSum_op

@[simp]
theorem hasSum_unop {f : Œ≤ ‚Üí Œ±·µê·µí·µñ} {a : Œ±·µê·µí·µñ} :
    HasSum (fun a ‚Ü¶ unop (f a)) (unop a) ‚Üî HasSum f a :=
  ‚ü®HasSum.op, HasSum.unop‚ü©
#align has_sum_unop hasSum_unop

@[simp]
theorem summable_op : (Summable fun a ‚Ü¶ op (f a)) ‚Üî Summable f :=
  ‚ü®Summable.unop, Summable.op‚ü©
#align summable_op summable_op

-- Porting note: This theorem causes a loop easily in Lean 4, so the priority should be `low`.
@[simp low]
theorem summable_unop {f : Œ≤ ‚Üí Œ±·µê·µí·µñ} : (Summable fun a ‚Ü¶ unop (f a)) ‚Üî Summable f :=
  ‚ü®Summable.op, Summable.unop‚ü©
#align summable_unop summable_unop

theorem tsum_op [T2Space Œ±] :
    ‚àë' x, op (f x) = op (‚àë' x, f x) := by
  by_cases h : Summable f
  ¬∑ exact h.hasSum.op.tsum_eq
  ¬∑ have ho := summable_op.not.mpr h
    rw [tsum_eq_zero_of_not_summable h, tsum_eq_zero_of_not_summable ho, op_zero]
#align tsum_op tsum_op

theorem tsum_unop [T2Space Œ±] {f : Œ≤ ‚Üí Œ±·µê·µí·µñ} :
    ‚àë' x, unop (f x) = unop (‚àë' x, f x) :=
  op_injective tsum_op.symm
#align tsum_unop tsum_unop

end MulOpposite

/-! ## Interaction with the star -/

section ContinuousStar

variable [AddCommMonoid Œ±] [TopologicalSpace Œ±] [StarAddMonoid Œ±] [ContinuousStar Œ±] {f : Œ≤ ‚Üí Œ±}
  {a : Œ±}

theorem HasSum.star (h : HasSum f a) : HasSum (fun b ‚Ü¶ star (f b)) (star a) := by
  simpa only using h.map (starAddEquiv : Œ± ‚âÉ+ Œ±) continuous_star
#align has_sum.star HasSum.star

theorem Summable.star (hf : Summable f) : Summable fun b ‚Ü¶ star (f b) :=
  hf.hasSum.star.summable
#align summable.star Summable.star

theorem Summable.ofStar (hf : Summable fun b ‚Ü¶ Star.star (f b)) : Summable f := by
  simpa only [star_star] using hf.star
#align summable.of_star Summable.ofStar

@[simp]
theorem summable_star_iff : (Summable fun b ‚Ü¶ star (f b)) ‚Üî Summable f :=
  ‚ü®Summable.ofStar, Summable.star‚ü©
#align summable_star_iff summable_star_iff

@[simp]
theorem summable_star_iff' : Summable (star f) ‚Üî Summable f :=
  summable_star_iff
#align summable_star_iff' summable_star_iff'

theorem tsum_star [T2Space Œ±] : star (‚àë' b, f b) = ‚àë' b, star (f b) := by
  by_cases hf : Summable f
  ¬∑ exact hf.hasSum.star.tsum_eq.symm
  ¬∑ rw [tsum_eq_zero_of_not_summable hf, tsum_eq_zero_of_not_summable (mt Summable.ofStar hf),
      star_zero]
#align tsum_star tsum_star

end ContinuousStar
