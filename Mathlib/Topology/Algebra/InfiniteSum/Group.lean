/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl
-/
import Mathlib.Topology.Algebra.InfiniteSum.Basic
import Mathlib.Topology.Algebra.UniformGroup

/-!
# Infinite sums and products in topological groups

Lemmas on topological sums in groups (as opposed to monoids).
-/

noncomputable section

open Filter Finset Function

open scoped BigOperators Topology

variable {Œ± Œ≤ Œ≥ Œ¥ : Type*}

section TopologicalGroup

variable [CommGroup Œ±] [TopologicalSpace Œ±] [TopologicalGroup Œ±]
variable {f g : Œ≤ ‚Üí Œ±} {a a‚ÇÅ a‚ÇÇ : Œ±}

-- `by simpa using` speeds up elaboration. Why?
@[to_additive]
theorem HasProd.inv (h : HasProd f a) : HasProd (fun b ‚Ü¶ (f b)‚Åª¬π) a‚Åª¬π := by
  simpa only using h.map (MonoidHom.id Œ±)‚Åª¬π continuous_inv
#align has_sum.neg HasSum.neg

@[to_additive]
theorem Multipliable.inv (hf : Multipliable f) : Multipliable fun b ‚Ü¶ (f b)‚Åª¬π :=
  hf.hasProd.inv.multipliable
#align summable.neg Summable.neg

@[to_additive]
theorem Multipliable.of_inv (hf : Multipliable fun b ‚Ü¶ (f b)‚Åª¬π) : Multipliable f := by
  simpa only [inv_inv] using hf.inv
#align summable.of_neg Summable.of_neg

@[to_additive]
theorem multipliable_inv_iff : (Multipliable fun b ‚Ü¶ (f b)‚Åª¬π) ‚Üî Multipliable f :=
  ‚ü®Multipliable.of_inv, Multipliable.inv‚ü©
#align summable_neg_iff summable_neg_iff

@[to_additive]
theorem HasProd.div (hf : HasProd f a‚ÇÅ) (hg : HasProd g a‚ÇÇ) :
    HasProd (fun b ‚Ü¶ f b / g b) (a‚ÇÅ / a‚ÇÇ) := by
  simp only [div_eq_mul_inv]
  exact hf.mul hg.inv
#align has_sum.sub HasSum.sub

@[to_additive]
theorem Multipliable.div (hf : Multipliable f) (hg : Multipliable g) :
    Multipliable fun b ‚Ü¶ f b / g b :=
  (hf.hasProd.div hg.hasProd).multipliable
#align summable.sub Summable.sub

@[to_additive]
theorem Multipliable.trans_div (hg : Multipliable g) (hfg : Multipliable fun b ‚Ü¶ f b / g b) :
    Multipliable f := by
  simpa only [div_mul_cancel] using hfg.mul hg
#align summable.trans_sub Summable.trans_sub

@[to_additive]
theorem multipliable_iff_of_multipliable_div (hfg : Multipliable fun b ‚Ü¶ f b / g b) :
    Multipliable f ‚Üî Multipliable g :=
  ‚ü®fun hf ‚Ü¶ hf.trans_div <| by simpa only [inv_div] using hfg.inv, fun hg ‚Ü¶ hg.trans_div hfg‚ü©
#align summable_iff_of_summable_sub summable_iff_of_summable_sub

@[to_additive]
theorem HasProd.update (hf : HasProd f a‚ÇÅ) (b : Œ≤) [DecidableEq Œ≤] (a : Œ±) :
    HasProd (update f b a) (a / f b * a‚ÇÅ) := by
  convert (hasProd_ite_eq b (a / f b)).mul hf with b'
  by_cases h : b' = b
  ¬∑ rw [h, update_same]
    simp [eq_self_iff_true, if_true, sub_add_cancel]
  ¬∑ simp only [h, update_noteq, if_false, Ne.def, one_mul, not_false_iff]
#align has_sum.update HasSum.update

@[to_additive]
theorem Multipliable.update (hf : Multipliable f) (b : Œ≤) [DecidableEq Œ≤] (a : Œ±) :
    Multipliable (update f b a) :=
  (hf.hasProd.update b a).multipliable
#align summable.update Summable.update

@[to_additive]
theorem HasProd.hasProd_compl_iff {s : Set Œ≤} (hf : HasProd (f ‚àò (‚Üë) : s ‚Üí Œ±) a‚ÇÅ) :
    HasProd (f ‚àò (‚Üë) : ‚Üës·∂ú ‚Üí Œ±) a‚ÇÇ ‚Üî HasProd f (a‚ÇÅ * a‚ÇÇ) := by
  refine' ‚ü®fun h ‚Ü¶ hf.mul_compl h, fun h ‚Ü¶ _‚ü©
  rw [hasProd_subtype_iff_mulIndicator] at hf ‚ä¢
  rw [Set.mulIndicator_compl]
  simpa only [div_eq_mul_inv, mul_inv_cancel_comm] using h.div hf
#align has_sum.has_sum_compl_iff HasSum.hasSum_compl_iff

@[to_additive]
theorem HasProd.hasProd_iff_compl {s : Set Œ≤} (hf : HasProd (f ‚àò (‚Üë) : s ‚Üí Œ±) a‚ÇÅ) :
    HasProd f a‚ÇÇ ‚Üî HasProd (f ‚àò (‚Üë) : ‚Üës·∂ú ‚Üí Œ±) (a‚ÇÇ / a‚ÇÅ) :=
  Iff.symm <| hf.hasProd_compl_iff.trans <| by rw [mul_div_cancel]
#align has_sum.has_sum_iff_compl HasSum.hasSum_iff_compl

@[to_additive]
theorem Multipliable.multipliable_compl_iff {s : Set Œ≤} (hf : Multipliable (f ‚àò (‚Üë) : s ‚Üí Œ±)) :
    Multipliable (f ‚àò (‚Üë) : ‚Üës·∂ú ‚Üí Œ±) ‚Üî Multipliable f :=
  ‚ü®fun ‚ü®_, ha‚ü© ‚Ü¶ (hf.hasProd.hasProd_compl_iff.1 ha).multipliable, fun ‚ü®_, ha‚ü© ‚Ü¶
    (hf.hasProd.hasProd_iff_compl.1 ha).multipliable‚ü©
#align summable.summable_compl_iff Summable.summable_compl_iff

@[to_additive]
protected theorem Finset.hasProd_compl_iff (s : Finset Œ≤) :
    HasProd (fun x : { x // x ‚àâ s } ‚Ü¶ f x) a ‚Üî HasProd f (a * ‚àè i in s, f i) :=
  (s.hasProd f).hasProd_compl_iff.trans <| by rw [mul_comm]
#align finset.has_sum_compl_iff Finset.hasSum_compl_iff

@[to_additive]
protected theorem Finset.hasProd_iff_compl (s : Finset Œ≤) :
    HasProd f a ‚Üî HasProd (fun x : { x // x ‚àâ s } ‚Ü¶ f x) (a / ‚àè i in s, f i) :=
  (s.hasProd f).hasProd_iff_compl
#align finset.has_sum_iff_compl Finset.hasSum_iff_compl

@[to_additive]
protected theorem Finset.multipliable_compl_iff (s : Finset Œ≤) :
    (Multipliable fun x : { x // x ‚àâ s } ‚Ü¶ f x) ‚Üî Multipliable f :=
  (s.multipliable f).multipliable_compl_iff
#align finset.summable_compl_iff Finset.summable_compl_iff

@[to_additive]
theorem Set.Finite.multipliable_compl_iff {s : Set Œ≤} (hs : s.Finite) :
    Multipliable (f ‚àò (‚Üë) : ‚Üës·∂ú ‚Üí Œ±) ‚Üî Multipliable f :=
  (hs.multipliable f).multipliable_compl_iff
#align set.finite.summable_compl_iff Set.Finite.summable_compl_iff

@[to_additive]
theorem hasProd_ite_div_hasProd [DecidableEq Œ≤] (hf : HasProd f a) (b : Œ≤) :
    HasProd (fun n ‚Ü¶ ite (n = b) 1 (f n)) (a / f b) := by
  convert hf.update b 1 using 1
  ¬∑ ext n
    rw [Function.update_apply]
  ¬∑ rw [div_mul_eq_mul_div, one_mul]
#align has_sum_ite_sub_has_sum hasSum_ite_sub_hasSum

section tprod

variable [T2Space Œ±]

@[to_additive]
theorem tprod_inv : ‚àè' b, (f b)‚Åª¬π = (‚àè' b, f b)‚Åª¬π := by
  by_cases hf : Multipliable f
  ¬∑ exact hf.hasProd.inv.tprod_eq
  ¬∑ simp [tprod_eq_one_of_not_multipliable hf,
      tprod_eq_one_of_not_multipliable (mt Multipliable.of_inv hf)]
#align tsum_neg tsum_neg

@[to_additive]
theorem tprod_div (hf : Multipliable f) (hg : Multipliable g) :
    ‚àè' b, (f b / g b) = (‚àè' b, f b) / ‚àè' b, g b :=
  (hf.hasProd.div hg.hasProd).tprod_eq
#align tsum_sub tsum_sub

@[to_additive]
theorem prod_mul_tprod_compl {s : Finset Œ≤} (hf : Multipliable f) :
    (‚àè x in s, f x) * ‚àè' x : ‚Üë(s : Set Œ≤)·∂ú, f x = ‚àè' x, f x :=
  ((s.hasProd f).mul_compl (s.multipliable_compl_iff.2 hf).hasProd).tprod_eq.symm
#align sum_add_tsum_compl sum_add_tsum_compl

/-- Let `f : Œ≤ ‚Üí Œ±` be a multipliable function and let `b ‚àà Œ≤` be an index.
Lemma `tprod_eq_mul_tprod_ite` writes `‚àè n, f n` as `f b` times the product of the
remaining terms. -/
@[to_additive "Let `f : Œ≤ ‚Üí Œ±` be a summable function and let `b ‚àà Œ≤` be an index.
Lemma `tsum_eq_add_tsum_ite` writes `Œ£' n, f n` as `f b` plus the sum of the
remaining terms."]
theorem tprod_eq_mul_tprod_ite [DecidableEq Œ≤] (hf : Multipliable f) (b : Œ≤) :
    ‚àè' n, f n = f b * ‚àè' n, ite (n = b) 1 (f n) := by
  rw [(hasProd_ite_div_hasProd hf.hasProd b).tprod_eq]
  exact (mul_div_cancel _ _).symm
#align tsum_eq_add_tsum_ite tsum_eq_add_tsum_ite

end tprod

end TopologicalGroup

section UniformGroup

variable [CommGroup Œ±] [UniformSpace Œ±]

/-- The **Cauchy criterion** for infinite products, also known as the **Cauchy convergence test** -/
@[to_additive "The **Cauchy criterion** for infinite sums, also known as the
**Cauchy convergence test**"]
theorem multipliable_iff_cauchySeq_finset [CompleteSpace Œ±] {f : Œ≤ ‚Üí Œ±} :
    Multipliable f ‚Üî CauchySeq fun s : Finset Œ≤ ‚Ü¶ ‚àè b in s, f b := by
  classical exact cauchy_map_iff_exists_tendsto.symm
#align summable_iff_cauchy_seq_finset summable_iff_cauchySeq_finset

variable [UniformGroup Œ±] {f g : Œ≤ ‚Üí Œ±} {a a‚ÇÅ a‚ÇÇ : Œ±}

@[to_additive]
theorem cauchySeq_finset_iff_prod_vanishing :
    (CauchySeq fun s : Finset Œ≤ ‚Ü¶ ‚àè b in s, f b) ‚Üî
      ‚àÄ e ‚àà ùìù (1 : Œ±), ‚àÉ s : Finset Œ≤, ‚àÄ t, Disjoint t s ‚Üí (‚àè b in t, f b) ‚àà e := by
  classical
  simp only [CauchySeq, cauchy_map_iff, and_iff_right atTop_neBot, prod_atTop_atTop_eq,
    uniformity_eq_comap_nhds_one Œ±, tendsto_comap_iff, (¬∑ ‚àò ¬∑), atTop_neBot, true_and]
  rw [tendsto_atTop']
  constructor
  ¬∑ intro h e he
    obtain ‚ü®‚ü®s‚ÇÅ, s‚ÇÇ‚ü©, h‚ü© := h e he
    use s‚ÇÅ ‚à™ s‚ÇÇ
    intro t ht
    specialize h (s‚ÇÅ ‚à™ s‚ÇÇ, s‚ÇÅ ‚à™ s‚ÇÇ ‚à™ t) ‚ü®le_sup_left, le_sup_of_le_left le_sup_right‚ü©
    simpa only [Finset.prod_union ht.symm, mul_div_cancel_left] using h
  ¬∑ rintro h e he
    rcases exists_nhds_split_inv he with ‚ü®d, hd, hde‚ü©
    rcases h d hd with ‚ü®s, h‚ü©
    use (s, s)
    rintro ‚ü®t‚ÇÅ, t‚ÇÇ‚ü© ‚ü®ht‚ÇÅ, ht‚ÇÇ‚ü©
    have : ((‚àè b in t‚ÇÇ, f b) / ‚àè b in t‚ÇÅ, f b) = (‚àè b in t‚ÇÇ \ s, f b) / ‚àè b in t‚ÇÅ \ s, f b := by
      rw [‚Üê Finset.prod_sdiff ht‚ÇÅ, ‚Üê Finset.prod_sdiff ht‚ÇÇ, mul_div_mul_right_eq_div]
    simp only [this]
    exact hde _ (h _ Finset.sdiff_disjoint) _ (h _ Finset.sdiff_disjoint)
#align cauchy_seq_finset_iff_vanishing cauchySeq_finset_iff_sum_vanishing

@[to_additive]
theorem cauchySeq_finset_iff_tprod_vanishing :
    (CauchySeq fun s : Finset Œ≤ ‚Ü¶ ‚àè b in s, f b) ‚Üî
      ‚àÄ e ‚àà ùìù (1 : Œ±), ‚àÉ s : Finset Œ≤, ‚àÄ t : Set Œ≤, Disjoint t s ‚Üí (‚àè' b : t, f b) ‚àà e := by
  simp_rw [cauchySeq_finset_iff_prod_vanishing, Set.disjoint_left, disjoint_left]
  refine ‚ü®fun vanish e he ‚Ü¶ ?_, fun vanish e he ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®o, ho, o_closed, oe‚ü© := exists_mem_nhds_isClosed_subset he
    obtain ‚ü®s, hs‚ü© := vanish o ho
    refine ‚ü®s, fun t hts ‚Ü¶ oe ?_‚ü©
    by_cases ht : Multipliable fun a : t ‚Ü¶ f a
    ¬∑ classical
      refine o_closed.mem_of_tendsto ht.hasProd (eventually_of_forall fun t' ‚Ü¶ ?_)
      rw [‚Üê prod_subtype_map_embedding fun _ _ ‚Ü¶ by rfl]
      apply hs
      simp_rw [Finset.mem_map]
      rintro _ ‚ü®b, -, rfl‚ü©
      exact hts b.prop
    ¬∑ exact tprod_eq_one_of_not_multipliable ht ‚ñ∏ mem_of_mem_nhds ho
  ¬∑ obtain ‚ü®s, hs‚ü© := vanish _ he
    exact ‚ü®s, fun t hts ‚Ü¶ (t.tprod_subtype f).symm ‚ñ∏ hs _ hts‚ü©

variable [CompleteSpace Œ±]

@[to_additive]
theorem multipliable_iff_vanishing :
    Multipliable f ‚Üî
    ‚àÄ e ‚àà ùìù (1 : Œ±), ‚àÉ s : Finset Œ≤, ‚àÄ t, Disjoint t s ‚Üí (‚àè b in t, f b) ‚àà e := by
  rw [multipliable_iff_cauchySeq_finset, cauchySeq_finset_iff_prod_vanishing]
#align summable_iff_vanishing summable_iff_vanishing

@[to_additive]
theorem multipliable_iff_tprod_vanishing : Multipliable f ‚Üî
    ‚àÄ e ‚àà ùìù (1 : Œ±), ‚àÉ s : Finset Œ≤, ‚àÄ t : Set Œ≤, Disjoint t s ‚Üí (‚àè' b : t, f b) ‚àà e := by
  rw [multipliable_iff_cauchySeq_finset, cauchySeq_finset_iff_tprod_vanishing]

-- TODO: generalize to monoid with a uniform continuous subtraction operator: `(a + b) - b = a`
@[to_additive]
theorem Multipliable.multipliable_of_eq_one_or_self (hf : Multipliable f)
    (h : ‚àÄ b, g b = 1 ‚à® g b = f b) : Multipliable g := by
  classical
  exact multipliable_iff_vanishing.2 fun e he ‚Ü¶
    let ‚ü®s, hs‚ü© := multipliable_iff_vanishing.1 hf e he
    ‚ü®s, fun t ht ‚Ü¶
      have eq : ‚àè b in t.filter fun b ‚Ü¶ g b = f b, f b = ‚àè b in t, g b :=
        calc
          ‚àè b in t.filter fun b ‚Ü¶ g b = f b, f b = ‚àè b in t.filter fun b ‚Ü¶ g b = f b, g b :=
            Finset.prod_congr rfl fun b hb ‚Ü¶ (Finset.mem_filter.1 hb).2.symm
          _ = ‚àè b in t, g b := by
           {refine' Finset.prod_subset (Finset.filter_subset _ _) _
            intro b hbt hb
            simp only [Finset.mem_filter, and_iff_right hbt] at hb
            exact (h b).resolve_right hb}
      eq ‚ñ∏ hs _ <| Finset.disjoint_of_subset_left (Finset.filter_subset _ _) ht‚ü©
#align summable.summable_of_eq_zero_or_self Summable.summable_of_eq_zero_or_self

@[to_additive]
protected theorem Multipliable.mulIndicator (hf : Multipliable f) (s : Set Œ≤) :
    Multipliable (s.mulIndicator f) :=
  hf.multipliable_of_eq_one_or_self <| Set.mulIndicator_eq_one_or_self _ _
#align summable.indicator Summable.indicator

@[to_additive]
theorem Multipliable.comp_injective {i : Œ≥ ‚Üí Œ≤} (hf : Multipliable f) (hi : Injective i) :
    Multipliable (f ‚àò i) := by
  simpa only [Set.mulIndicator_range_comp] using
    (hi.multipliable_iff (fun x hx ‚Ü¶ Set.mulIndicator_of_not_mem hx _)).2
    (hf.mulIndicator (Set.range i))
#align summable.comp_injective Summable.comp_injective

@[to_additive]
theorem Multipliable.subtype (hf : Multipliable f) (s : Set Œ≤) : Multipliable (f ‚àò (‚Üë) : s ‚Üí Œ±) :=
  hf.comp_injective Subtype.coe_injective
#align summable.subtype Summable.subtype

@[to_additive]
theorem multipliable_subtype_and_compl {s : Set Œ≤} :
    ((Multipliable fun x : s ‚Ü¶ f x) ‚àß Multipliable fun x : ‚Üës·∂ú ‚Ü¶ f x) ‚Üî Multipliable f :=
  ‚ü®and_imp.2 Multipliable.mul_compl, fun h ‚Ü¶ ‚ü®h.subtype s, h.subtype s·∂ú‚ü©‚ü©
#align summable_subtype_and_compl summable_subtype_and_compl

@[to_additive]
theorem tprod_subtype_mul_tprod_subtype_compl [T2Space Œ±] {f : Œ≤ ‚Üí Œ±} (hf : Multipliable f)
    (s : Set Œ≤) : (‚àè' x : s, f x) * ‚àè' x : ‚Üës·∂ú, f x = ‚àè' x, f x :=
  ((hf.subtype s).hasProd.mul_compl (hf.subtype { x | x ‚àâ s }).hasProd).unique hf.hasProd
#align tsum_subtype_add_tsum_subtype_compl tsum_subtype_add_tsum_subtype_compl

@[to_additive]
theorem prod_mul_tprod_subtype_compl [T2Space Œ±] {f : Œ≤ ‚Üí Œ±} (hf : Multipliable f) (s : Finset Œ≤) :
    (‚àè x in s, f x) * ‚àè' x : { x // x ‚àâ s }, f x = ‚àè' x, f x := by
  rw [‚Üê tprod_subtype_mul_tprod_subtype_compl hf s]
  simp only [Finset.tprod_subtype', mul_right_inj]
  rfl
#align sum_add_tsum_subtype_compl sum_add_tsum_subtype_compl

end UniformGroup

section TopologicalGroup

variable {G : Type*} [TopologicalSpace G] [CommGroup G] [TopologicalGroup G] {f : Œ± ‚Üí G}

@[to_additive]
theorem Multipliable.vanishing (hf : Multipliable f) ‚¶Ée : Set G‚¶Ñ (he : e ‚àà ùìù (1 : G)) :
    ‚àÉ s : Finset Œ±, ‚àÄ t, Disjoint t s ‚Üí (‚àè k in t, f k) ‚àà e := by
  classical
  letI : UniformSpace G := TopologicalGroup.toUniformSpace G
  have : UniformGroup G := comm_topologicalGroup_is_uniform
  exact cauchySeq_finset_iff_prod_vanishing.1 hf.hasProd.cauchySeq e he
#align summable.vanishing Summable.vanishing

@[to_additive]
theorem Multipliable.tprod_vanishing (hf : Multipliable f) ‚¶Ée : Set G‚¶Ñ (he : e ‚àà ùìù 1) :
    ‚àÉ s : Finset Œ±, ‚àÄ t : Set Œ±, Disjoint t s ‚Üí (‚àè' b : t, f b) ‚àà e := by
  classical
  letI : UniformSpace G := TopologicalGroup.toUniformSpace G
  have : UniformGroup G := comm_topologicalGroup_is_uniform
  exact cauchySeq_finset_iff_tprod_vanishing.1 hf.hasProd.cauchySeq e he

/-- The product over the complement of a finset tends to `1` when the finset grows to cover the
whole space. This does not need a multipliability assumption, as otherwise all such products are
one. -/
@[to_additive "The sum over the complement of a finset tends to `0` when the finset grows to cover
the whole space. This does not need a summability assumption, as otherwise all such sums are zero."]
theorem tendsto_tprod_compl_atTop_one (f : Œ± ‚Üí G) :
    Tendsto (fun s : Finset Œ± ‚Ü¶ ‚àè' a : { x // x ‚àâ s }, f a) atTop (ùìù 1) := by
  classical
  by_cases H : Multipliable f
  ¬∑ intro e he
    obtain ‚ü®s, hs‚ü© := H.tprod_vanishing he
    rw [Filter.mem_map, mem_atTop_sets]
    exact ‚ü®s, fun t hts ‚Ü¶ hs _ <| Set.disjoint_left.mpr fun a ha has ‚Ü¶ ha (hts has)‚ü©
  ¬∑ refine tendsto_const_nhds.congr fun _ ‚Ü¶ (tprod_eq_one_of_not_multipliable ?_).symm
    rwa [Finset.multipliable_compl_iff]
#align tendsto_tsum_compl_at_top_zero tendsto_tsum_compl_atTop_zero

/-- Product divergence test: if `f` is unconditionally multipliable, then `f x` tends to one along
`cofinite`. -/
@[to_additive "Series divergence test: if `f` is unconditionally summable, then `f x` tends to zero
along `cofinite`."]
theorem Multipliable.tendsto_cofinite_one (hf : Multipliable f) : Tendsto f cofinite (ùìù 1) := by
  intro e he
  rw [Filter.mem_map]
  rcases hf.vanishing he with ‚ü®s, hs‚ü©
  refine' s.eventually_cofinite_nmem.mono fun x hx ‚Ü¶ _
  ¬∑ simpa using hs {x} (disjoint_singleton_left.2 hx)
#align summable.tendsto_cofinite_zero Summable.tendsto_cofinite_zero

@[to_additive]
theorem Multipliable.countable_mulSupport [FirstCountableTopology G] [T1Space G]
    (hf : Multipliable f) : f.mulSupport.Countable := by
  simpa only [ker_nhds] using hf.tendsto_cofinite_one.countable_compl_preimage_ker

@[to_additive]
theorem multipliable_const_iff [Infinite Œ≤] [T2Space G] (a : G) :
    Multipliable (fun _ : Œ≤ ‚Ü¶ a) ‚Üî a = 1 := by
  refine ‚ü®fun h ‚Ü¶ ?_, ?_‚ü©
  ¬∑ by_contra ha
    have : {a}·∂ú ‚àà ùìù 1 := compl_singleton_mem_nhds (Ne.symm ha)
    have : Finite Œ≤ := by
      simpa [‚Üê Set.finite_univ_iff] using h.tendsto_cofinite_one this
    exact not_finite Œ≤
  ¬∑ rintro rfl
    exact multipliable_one

@[to_additive (attr := simp)]
theorem tprod_const [T2Space G] (a : G) : ‚àè' _ : Œ≤, a = a ^ (Nat.card Œ≤) := by
  rcases finite_or_infinite Œ≤ with hŒ≤|hŒ≤
  ¬∑ letI : Fintype Œ≤ := Fintype.ofFinite Œ≤
    rw [tprod_eq_prod (s := univ) (fun x hx ‚Ü¶ (hx (mem_univ x)).elim)]
    simp only [prod_const, Nat.card_eq_fintype_card, Fintype.card]
  ¬∑ simp only [Nat.card_eq_zero_of_infinite, pow_zero]
    rcases eq_or_ne a 1 with rfl|ha
    ¬∑ simp
    ¬∑ apply tprod_eq_one_of_not_multipliable
      simpa [multipliable_const_iff] using ha

end TopologicalGroup
