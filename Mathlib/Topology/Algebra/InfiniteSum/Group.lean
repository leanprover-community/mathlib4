/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl
-/
import Mathlib.Topology.Algebra.InfiniteSum.Basic
import Mathlib.Topology.Algebra.UniformGroup

/-!
# Infinite sums in topological groups

Lemmas on topological sums in groups (as opposed to monoids).
-/

noncomputable section

open Filter Finset Function

open scoped BigOperators Topology

variable {Œ± Œ≤ Œ≥ Œ¥ : Type*}

section TopologicalGroup

variable [AddCommGroup Œ±] [TopologicalSpace Œ±] [TopologicalAddGroup Œ±]
variable {f g : Œ≤ ‚Üí Œ±} {a a‚ÇÅ a‚ÇÇ : Œ±}

-- `by simpa using` speeds up elaboration. Why?
theorem HasSum.neg (h : HasSum f a) : HasSum (fun b ‚Ü¶ -f b) (-a) := by
  simpa only using h.map (-AddMonoidHom.id Œ±) continuous_neg
#align has_sum.neg HasSum.neg

theorem Summable.neg (hf : Summable f) : Summable fun b ‚Ü¶ -f b :=
  hf.hasSum.neg.summable
#align summable.neg Summable.neg

theorem Summable.of_neg (hf : Summable fun b ‚Ü¶ -f b) : Summable f := by
  simpa only [neg_neg] using hf.neg
#align summable.of_neg Summable.of_neg

theorem summable_neg_iff : (Summable fun b ‚Ü¶ -f b) ‚Üî Summable f :=
  ‚ü®Summable.of_neg, Summable.neg‚ü©
#align summable_neg_iff summable_neg_iff

theorem HasSum.sub (hf : HasSum f a‚ÇÅ) (hg : HasSum g a‚ÇÇ) :
    HasSum (fun b ‚Ü¶ f b - g b) (a‚ÇÅ - a‚ÇÇ) := by
  simp only [sub_eq_add_neg]
  exact hf.add hg.neg
#align has_sum.sub HasSum.sub

theorem Summable.sub (hf : Summable f) (hg : Summable g) : Summable fun b ‚Ü¶ f b - g b :=
  (hf.hasSum.sub hg.hasSum).summable
#align summable.sub Summable.sub

theorem Summable.trans_sub (hg : Summable g) (hfg : Summable fun b ‚Ü¶ f b - g b) : Summable f := by
  simpa only [sub_add_cancel] using hfg.add hg
#align summable.trans_sub Summable.trans_sub

theorem summable_iff_of_summable_sub (hfg : Summable fun b ‚Ü¶ f b - g b) :
    Summable f ‚Üî Summable g :=
  ‚ü®fun hf ‚Ü¶ hf.trans_sub <| by simpa only [neg_sub] using hfg.neg, fun hg ‚Ü¶ hg.trans_sub hfg‚ü©
#align summable_iff_of_summable_sub summable_iff_of_summable_sub

theorem HasSum.update (hf : HasSum f a‚ÇÅ) (b : Œ≤) [DecidableEq Œ≤] (a : Œ±) :
    HasSum (update f b a) (a - f b + a‚ÇÅ) := by
  convert (hasSum_ite_eq b (a - f b)).add hf with b'
  by_cases h : b' = b
  ¬∑ rw [h, update_same]
    simp [eq_self_iff_true, if_true, sub_add_cancel]
  ¬∑ simp only [h, update_noteq, if_false, Ne.def, zero_add, not_false_iff]
#align has_sum.update HasSum.update

theorem Summable.update (hf : Summable f) (b : Œ≤) [DecidableEq Œ≤] (a : Œ±) :
    Summable (update f b a) :=
  (hf.hasSum.update b a).summable
#align summable.update Summable.update

theorem HasSum.hasSum_compl_iff {s : Set Œ≤} (hf : HasSum (f ‚àò (‚Üë) : s ‚Üí Œ±) a‚ÇÅ) :
    HasSum (f ‚àò (‚Üë) : ‚Üës·∂ú ‚Üí Œ±) a‚ÇÇ ‚Üî HasSum f (a‚ÇÅ + a‚ÇÇ) := by
  refine' ‚ü®fun h ‚Ü¶ hf.add_compl h, fun h ‚Ü¶ _‚ü©
  rw [hasSum_subtype_iff_indicator] at hf ‚ä¢
  rw [Set.indicator_compl]
  simpa only [add_sub_cancel'] using h.sub hf
#align has_sum.has_sum_compl_iff HasSum.hasSum_compl_iff

theorem HasSum.hasSum_iff_compl {s : Set Œ≤} (hf : HasSum (f ‚àò (‚Üë) : s ‚Üí Œ±) a‚ÇÅ) :
    HasSum f a‚ÇÇ ‚Üî HasSum (f ‚àò (‚Üë) : ‚Üës·∂ú ‚Üí Œ±) (a‚ÇÇ - a‚ÇÅ) :=
  Iff.symm <| hf.hasSum_compl_iff.trans <| by rw [add_sub_cancel'_right]
#align has_sum.has_sum_iff_compl HasSum.hasSum_iff_compl

theorem Summable.summable_compl_iff {s : Set Œ≤} (hf : Summable (f ‚àò (‚Üë) : s ‚Üí Œ±)) :
    Summable (f ‚àò (‚Üë) : ‚Üës·∂ú ‚Üí Œ±) ‚Üî Summable f :=
  ‚ü®fun ‚ü®_, ha‚ü© ‚Ü¶ (hf.hasSum.hasSum_compl_iff.1 ha).summable, fun ‚ü®_, ha‚ü© ‚Ü¶
    (hf.hasSum.hasSum_iff_compl.1 ha).summable‚ü©
#align summable.summable_compl_iff Summable.summable_compl_iff

protected theorem Finset.hasSum_compl_iff (s : Finset Œ≤) :
    HasSum (fun x : { x // x ‚àâ s } ‚Ü¶ f x) a ‚Üî HasSum f (a + ‚àë i in s, f i) :=
  (s.hasSum f).hasSum_compl_iff.trans <| by rw [add_comm]
#align finset.has_sum_compl_iff Finset.hasSum_compl_iff

protected theorem Finset.hasSum_iff_compl (s : Finset Œ≤) :
    HasSum f a ‚Üî HasSum (fun x : { x // x ‚àâ s } ‚Ü¶ f x) (a - ‚àë i in s, f i) :=
  (s.hasSum f).hasSum_iff_compl
#align finset.has_sum_iff_compl Finset.hasSum_iff_compl

protected theorem Finset.summable_compl_iff (s : Finset Œ≤) :
    (Summable fun x : { x // x ‚àâ s } ‚Ü¶ f x) ‚Üî Summable f :=
  (s.summable f).summable_compl_iff
#align finset.summable_compl_iff Finset.summable_compl_iff

theorem Set.Finite.summable_compl_iff {s : Set Œ≤} (hs : s.Finite) :
    Summable (f ‚àò (‚Üë) : ‚Üës·∂ú ‚Üí Œ±) ‚Üî Summable f :=
  (hs.summable f).summable_compl_iff
#align set.finite.summable_compl_iff Set.Finite.summable_compl_iff

theorem hasSum_ite_sub_hasSum [DecidableEq Œ≤] (hf : HasSum f a) (b : Œ≤) :
    HasSum (fun n ‚Ü¶ ite (n = b) 0 (f n)) (a - f b) := by
  convert hf.update b 0 using 1
  ¬∑ ext n
    rw [Function.update_apply]
  ¬∑ rw [sub_add_eq_add_sub, zero_add]
#align has_sum_ite_sub_has_sum hasSum_ite_sub_hasSum

section tsum

variable [T2Space Œ±]

theorem tsum_neg : ‚àë' b, -f b = -‚àë' b, f b := by
  by_cases hf : Summable f
  ¬∑ exact hf.hasSum.neg.tsum_eq
  ¬∑ simp [tsum_eq_zero_of_not_summable hf, tsum_eq_zero_of_not_summable (mt Summable.of_neg hf)]
#align tsum_neg tsum_neg

theorem tsum_sub (hf : Summable f) (hg : Summable g) :
    ‚àë' b, (f b - g b) = ‚àë' b, f b - ‚àë' b, g b :=
  (hf.hasSum.sub hg.hasSum).tsum_eq
#align tsum_sub tsum_sub

theorem sum_add_tsum_compl {s : Finset Œ≤} (hf : Summable f) :
    ((‚àë x in s, f x) + ‚àë' x : ‚Üë(s : Set Œ≤)·∂ú, f x) = ‚àë' x, f x :=
  ((s.hasSum f).add_compl (s.summable_compl_iff.2 hf).hasSum).tsum_eq.symm
#align sum_add_tsum_compl sum_add_tsum_compl

/-- Let `f : Œ≤ ‚Üí Œ±` be a sequence with summable series and let `b ‚àà Œ≤` be an index.
Lemma `tsum_eq_add_tsum_ite` writes `Œ£ f n` as the sum of `f b` plus the series of the
remaining terms. -/
theorem tsum_eq_add_tsum_ite [DecidableEq Œ≤] (hf : Summable f) (b : Œ≤) :
    ‚àë' n, f n = f b + ‚àë' n, ite (n = b) 0 (f n) := by
  rw [(hasSum_ite_sub_hasSum hf.hasSum b).tsum_eq]
  exact (add_sub_cancel'_right _ _).symm
#align tsum_eq_add_tsum_ite tsum_eq_add_tsum_ite

end tsum

end TopologicalGroup

section UniformGroup

variable [AddCommGroup Œ±] [UniformSpace Œ±]

/-- The **Cauchy criterion** for infinite sums, also known as the **Cauchy convergence test** -/
theorem summable_iff_cauchySeq_finset [CompleteSpace Œ±] {f : Œ≤ ‚Üí Œ±} :
    Summable f ‚Üî CauchySeq fun s : Finset Œ≤ ‚Ü¶ ‚àë b in s, f b := by
  classical exact cauchy_map_iff_exists_tendsto.symm
#align summable_iff_cauchy_seq_finset summable_iff_cauchySeq_finset

variable [UniformAddGroup Œ±] {f g : Œ≤ ‚Üí Œ±} {a a‚ÇÅ a‚ÇÇ : Œ±}

theorem cauchySeq_finset_iff_vanishing :
    (CauchySeq fun s : Finset Œ≤ ‚Ü¶ ‚àë b in s, f b) ‚Üî
      ‚àÄ e ‚àà ùìù (0 : Œ±), ‚àÉ s : Finset Œ≤, ‚àÄ t, Disjoint t s ‚Üí (‚àë b in t, f b) ‚àà e := by
  classical
  simp only [CauchySeq, cauchy_map_iff, and_iff_right atTop_neBot, prod_atTop_atTop_eq,
    uniformity_eq_comap_nhds_zero Œ±, tendsto_comap_iff, (¬∑ ‚àò ¬∑), atTop_neBot, true_and]
  rw [tendsto_atTop']
  constructor
  ¬∑ intro h e he
    obtain ‚ü®‚ü®s‚ÇÅ, s‚ÇÇ‚ü©, h‚ü© := h e he
    use s‚ÇÅ ‚à™ s‚ÇÇ
    intro t ht
    specialize h (s‚ÇÅ ‚à™ s‚ÇÇ, s‚ÇÅ ‚à™ s‚ÇÇ ‚à™ t) ‚ü®le_sup_left, le_sup_of_le_left le_sup_right‚ü©
    simpa only [Finset.sum_union ht.symm, add_sub_cancel'] using h
  ¬∑ rintro h e he
    rcases exists_nhds_half_neg he with ‚ü®d, hd, hde‚ü©
    rcases h d hd with ‚ü®s, h‚ü©
    use (s, s)
    rintro ‚ü®t‚ÇÅ, t‚ÇÇ‚ü© ‚ü®ht‚ÇÅ, ht‚ÇÇ‚ü©
    have : ((‚àë b in t‚ÇÇ, f b) - ‚àë b in t‚ÇÅ, f b) = (‚àë b in t‚ÇÇ \ s, f b) - ‚àë b in t‚ÇÅ \ s, f b := by
      rw [‚Üê Finset.sum_sdiff ht‚ÇÅ, ‚Üê Finset.sum_sdiff ht‚ÇÇ, add_sub_add_right_eq_sub]
    simp only [this]
    exact hde _ (h _ Finset.sdiff_disjoint) _ (h _ Finset.sdiff_disjoint)
#align cauchy_seq_finset_iff_vanishing cauchySeq_finset_iff_vanishing

theorem cauchySeq_finset_iff_tsum_vanishing :
    (CauchySeq fun s : Finset Œ≤ ‚Ü¶ ‚àë b in s, f b) ‚Üî
      ‚àÄ e ‚àà ùìù (0 : Œ±), ‚àÉ s : Finset Œ≤, ‚àÄ t : Set Œ≤, Disjoint t s ‚Üí (‚àë' b : t, f b) ‚àà e := by
  simp_rw [cauchySeq_finset_iff_vanishing, Set.disjoint_left, disjoint_left]
  refine ‚ü®fun vanish e he ‚Ü¶ ?_, fun vanish e he ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®o, ho, o_closed, oe‚ü© := exists_mem_nhds_isClosed_subset he
    obtain ‚ü®s, hs‚ü© := vanish o ho
    refine ‚ü®s, fun t hts ‚Ü¶ oe ?_‚ü©
    by_cases ht : Summable fun a : t ‚Ü¶ f a
    ¬∑ classical
      refine o_closed.mem_of_tendsto ht.hasSum (eventually_of_forall fun t' ‚Ü¶ ?_)
      rw [‚Üê sum_subtype_map_embedding fun _ _ ‚Ü¶ by rfl]
      apply hs
      simp_rw [Finset.mem_map]
      rintro _ ‚ü®b, -, rfl‚ü©
      exact hts b.prop
    ¬∑ exact tsum_eq_zero_of_not_summable ht ‚ñ∏ mem_of_mem_nhds ho
  ¬∑ obtain ‚ü®s, hs‚ü© := vanish _ he
    exact ‚ü®s, fun t hts ‚Ü¶ (t.tsum_subtype f).symm ‚ñ∏ hs _ hts‚ü©

variable [CompleteSpace Œ±]

theorem summable_iff_vanishing :
    Summable f ‚Üî ‚àÄ e ‚àà ùìù (0 : Œ±), ‚àÉ s : Finset Œ≤, ‚àÄ t, Disjoint t s ‚Üí (‚àë b in t, f b) ‚àà e := by
  rw [summable_iff_cauchySeq_finset, cauchySeq_finset_iff_vanishing]
#align summable_iff_vanishing summable_iff_vanishing

theorem summable_iff_tsum_vanishing : Summable f ‚Üî
    ‚àÄ e ‚àà ùìù (0 : Œ±), ‚àÉ s : Finset Œ≤, ‚àÄ t : Set Œ≤, Disjoint t s ‚Üí (‚àë' b : t, f b) ‚àà e := by
  rw [summable_iff_cauchySeq_finset, cauchySeq_finset_iff_tsum_vanishing]

-- TODO: generalize to monoid with a uniform continuous subtraction operator: `(a + b) - b = a`
theorem Summable.summable_of_eq_zero_or_self (hf : Summable f) (h : ‚àÄ b, g b = 0 ‚à® g b = f b) :
    Summable g := by
  classical
  exact summable_iff_vanishing.2 fun e he ‚Ü¶
    let ‚ü®s, hs‚ü© := summable_iff_vanishing.1 hf e he
    ‚ü®s, fun t ht ‚Ü¶
      have eq : ‚àë b in t.filter fun b ‚Ü¶ g b = f b, f b = ‚àë b in t, g b :=
        calc
          ‚àë b in t.filter fun b ‚Ü¶ g b = f b, f b = ‚àë b in t.filter fun b ‚Ü¶ g b = f b, g b :=
            Finset.sum_congr rfl fun b hb ‚Ü¶ (Finset.mem_filter.1 hb).2.symm
          _ = ‚àë b in t, g b := by
           {refine' Finset.sum_subset (Finset.filter_subset _ _) _
            intro b hbt hb
            simp only [Finset.mem_filter, and_iff_right hbt] at hb
            exact (h b).resolve_right hb}
      eq ‚ñ∏ hs _ <| Finset.disjoint_of_subset_left (Finset.filter_subset _ _) ht‚ü©
#align summable.summable_of_eq_zero_or_self Summable.summable_of_eq_zero_or_self

protected theorem Summable.indicator (hf : Summable f) (s : Set Œ≤) : Summable (s.indicator f) :=
  hf.summable_of_eq_zero_or_self <| Set.indicator_eq_zero_or_self _ _
#align summable.indicator Summable.indicator

theorem Summable.comp_injective {i : Œ≥ ‚Üí Œ≤} (hf : Summable f) (hi : Injective i) :
    Summable (f ‚àò i) := by
  simpa only [Set.indicator_range_comp] using
    (hi.summable_iff (fun x hx ‚Ü¶ Set.indicator_of_not_mem hx _)).2 (hf.indicator (Set.range i))
#align summable.comp_injective Summable.comp_injective

theorem Summable.subtype (hf : Summable f) (s : Set Œ≤) : Summable (f ‚àò (‚Üë) : s ‚Üí Œ±) :=
  hf.comp_injective Subtype.coe_injective
#align summable.subtype Summable.subtype

theorem summable_subtype_and_compl {s : Set Œ≤} :
    ((Summable fun x : s ‚Ü¶ f x) ‚àß Summable fun x : ‚Üës·∂ú ‚Ü¶ f x) ‚Üî Summable f :=
  ‚ü®and_imp.2 Summable.add_compl, fun h ‚Ü¶ ‚ü®h.subtype s, h.subtype s·∂ú‚ü©‚ü©
#align summable_subtype_and_compl summable_subtype_and_compl

theorem tsum_subtype_add_tsum_subtype_compl [T2Space Œ±] {f : Œ≤ ‚Üí Œ±} (hf : Summable f) (s : Set Œ≤) :
    ‚àë' x : s, f x + ‚àë' x : ‚Üës·∂ú, f x = ‚àë' x, f x :=
  ((hf.subtype s).hasSum.add_compl (hf.subtype { x | x ‚àâ s }).hasSum).unique hf.hasSum
#align tsum_subtype_add_tsum_subtype_compl tsum_subtype_add_tsum_subtype_compl

theorem sum_add_tsum_subtype_compl [T2Space Œ±] {f : Œ≤ ‚Üí Œ±} (hf : Summable f) (s : Finset Œ≤) :
    ‚àë x in s, f x + ‚àë' x : { x // x ‚àâ s }, f x = ‚àë' x, f x := by
  rw [‚Üê tsum_subtype_add_tsum_subtype_compl hf s]
  simp only [Finset.tsum_subtype', add_right_inj]
  rfl
#align sum_add_tsum_subtype_compl sum_add_tsum_subtype_compl

end UniformGroup

section TopologicalGroup

variable {G : Type*} [TopologicalSpace G] [AddCommGroup G] [TopologicalAddGroup G] {f : Œ± ‚Üí G}

theorem Summable.vanishing (hf : Summable f) ‚¶Ée : Set G‚¶Ñ (he : e ‚àà ùìù (0 : G)) :
    ‚àÉ s : Finset Œ±, ‚àÄ t, Disjoint t s ‚Üí (‚àë k in t, f k) ‚àà e := by
  classical
  letI : UniformSpace G := TopologicalAddGroup.toUniformSpace G
  have : UniformAddGroup G := comm_topologicalAddGroup_is_uniform
  exact cauchySeq_finset_iff_vanishing.1 hf.hasSum.cauchySeq e he
#align summable.vanishing Summable.vanishing

theorem Summable.tsum_vanishing (hf : Summable f) ‚¶Ée : Set G‚¶Ñ (he : e ‚àà ùìù 0) :
    ‚àÉ s : Finset Œ±, ‚àÄ t : Set Œ±, Disjoint t s ‚Üí (‚àë' b : t, f b) ‚àà e := by
  classical
  letI : UniformSpace G := TopologicalAddGroup.toUniformSpace G
  have : UniformAddGroup G := comm_topologicalAddGroup_is_uniform
  exact cauchySeq_finset_iff_tsum_vanishing.1 hf.hasSum.cauchySeq e he

/-- The sum over the complement of a finset tends to `0` when the finset grows to cover the whole
space. This does not need a summability assumption, as otherwise all sums are zero. -/
theorem tendsto_tsum_compl_atTop_zero (f : Œ± ‚Üí G) :
    Tendsto (fun s : Finset Œ± ‚Ü¶ ‚àë' a : { x // x ‚àâ s }, f a) atTop (ùìù 0) := by
  classical
  by_cases H : Summable f
  ¬∑ intro e he
    obtain ‚ü®s, hs‚ü© := H.tsum_vanishing he
    rw [Filter.mem_map, mem_atTop_sets]
    exact ‚ü®s, fun t hts ‚Ü¶ hs _ <| Set.disjoint_left.mpr fun a ha has ‚Ü¶ ha (hts has)‚ü©
  ¬∑ refine tendsto_const_nhds.congr fun _ ‚Ü¶ (tsum_eq_zero_of_not_summable ?_).symm
    rwa [Finset.summable_compl_iff]
#align tendsto_tsum_compl_at_top_zero tendsto_tsum_compl_atTop_zero

/-- Series divergence test: if `f` is a convergent series, then `f x` tends to zero along
`cofinite`. -/
theorem Summable.tendsto_cofinite_zero (hf : Summable f) : Tendsto f cofinite (ùìù 0) := by
  intro e he
  rw [Filter.mem_map]
  rcases hf.vanishing he with ‚ü®s, hs‚ü©
  refine' s.eventually_cofinite_nmem.mono fun x hx ‚Ü¶ _
  ¬∑ simpa using hs {x} (disjoint_singleton_left.2 hx)
#align summable.tendsto_cofinite_zero Summable.tendsto_cofinite_zero

theorem Summable.countable_support [FirstCountableTopology G] [T1Space G]
    (hf : Summable f) : f.support.Countable := by
  simpa only [ker_nhds] using hf.tendsto_cofinite_zero.countable_compl_preimage_ker

theorem summable_const_iff [Infinite Œ≤] [T2Space G] (a : G) :
    Summable (fun _ : Œ≤ ‚Ü¶ a) ‚Üî a = 0 := by
  refine ‚ü®fun h ‚Ü¶ ?_, ?_‚ü©
  ¬∑ by_contra ha
    have : {a}·∂ú ‚àà ùìù 0 := compl_singleton_mem_nhds (Ne.symm ha)
    have : Finite Œ≤ := by
      simpa [‚Üê Set.finite_univ_iff] using h.tendsto_cofinite_zero this
    exact not_finite Œ≤
  ¬∑ rintro rfl
    exact summable_zero

@[simp]
theorem tsum_const [T2Space G] (a : G) : ‚àë' _ : Œ≤, a = Nat.card Œ≤ ‚Ä¢ a := by
  rcases finite_or_infinite Œ≤ with hŒ≤|hŒ≤
  ¬∑ letI : Fintype Œ≤ := Fintype.ofFinite Œ≤
    rw [tsum_eq_sum (s := univ) (fun x hx ‚Ü¶ (hx (mem_univ x)).elim)]
    simp only [sum_const, Nat.card_eq_fintype_card, Fintype.card]
  ¬∑ simp only [Nat.card_eq_zero_of_infinite, zero_smul]
    rcases eq_or_ne a 0 with rfl|ha
    ¬∑ simp
    ¬∑ apply tsum_eq_zero_of_not_summable
      simpa [summable_const_iff] using ha

end TopologicalGroup
