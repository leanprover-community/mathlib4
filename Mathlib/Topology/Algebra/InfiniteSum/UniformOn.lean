/-
Copyright (c) 2025 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck
-/
import Mathlib.Analysis.Calculus.UniformLimitsDeriv
import Mathlib.Analysis.NormedSpace.FunctionSeries
import Mathlib.Analysis.SpecialFunctions.Log.Summable

/-!
# Infinite sum and products that converge uniformly on a set

This file defines the notion of uniform convergence of infinite sums and products of functions,
on a given family of subsets of their domain.

It also defines the notion of local uniform convergence of infinite sums and products of functions
on a set.
-/

noncomputable section

open Filter Function

open scoped Topology

variable {Œ± Œ≤ Œπ : Type*} [CommMonoid Œ±]  {f : Œπ ‚Üí Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {ùîñ : Set (Set Œ≤)}
  {x : Œ≤} {s : Set Œ≤} {I : Finset Œπ}

section prelim

-- XXX move this to `Topology.UniformSpace.UniformConvergenceTopology`
variable (F I) in
@[to_additive (attr := simp)]
lemma UniformOnFun.ofFun_prod : ‚àè i ‚àà I, ofFun ùîñ (f i) = ofFun ùîñ (‚àè i ‚àà I, f i) :=
  rfl

end prelim

variable [UniformSpace Œ±]

/-!
## Uniform convergence of sums and products
-/

section UniformlyOn

variable (f g ùîñ)

/-- `HasProdUniformlyOn f g ùîñ` means that the (potentially infinite) product `‚àè' i, f i b`
for `b : Œ≤` converges uniformly on each `s` in a family of sets `ùîñ` to `g`. -/
@[to_additive "`HasSumUniformlyOn f g ùîñ` means that the (potentially infinite) sum `‚àë' i, f i b`
for `b : Œ≤` converges uniformly on `s ‚àà ùîñ` to `g`."]
def HasProdUniformlyOn : Prop :=
  HasProd (fun i ‚Ü¶ UniformOnFun.ofFun ùîñ (f i)) (UniformOnFun.ofFun ùîñ g)

/-- `MultipliableUniformlyOn f ùîñ` means that `f` converges uniformly on `s` to some infinite
product. -/
@[to_additive "`SummableUniformlyOn f s` means that `f` converges uniformly on `s` to some
infinite sum."]
def MultipliableUniformlyOn (f : Œπ ‚Üí Œ≤ ‚Üí Œ±) (ùîñ : Set (Set Œ≤)) : Prop :=
  Multipliable (fun i ‚Ü¶ UniformOnFun.ofFun ùîñ (f i))

variable {f g ùîñ}

@[to_additive]
lemma MultipliableUniformlyOn.exists (h : MultipliableUniformlyOn f ùîñ) :
    ‚àÉ g, HasProdUniformlyOn f g ùîñ :=
  h

@[to_additive]
theorem HasProdUniformlyOn.multipliableUniformlyOn (h : HasProdUniformlyOn f g ùîñ) :
    MultipliableUniformlyOn f ùîñ :=
  ‚ü®g, h‚ü©

@[to_additive]
lemma hasProdUniformlyOn_iff_tendstoUniformlyOn : HasProdUniformlyOn f g ùîñ ‚Üî
    ‚àÄ s ‚àà ùîñ, TendstoUniformlyOn (fun I b ‚Ü¶ ‚àè i ‚àà I, f i b) g atTop s := by
  simpa [HasProdUniformlyOn, HasProd, UniformOnFun.ofFun_prod, Finset.prod_fn] using
    UniformOnFun.tendsto_iff_tendstoUniformlyOn

@[to_additive]
theorem HasProdUniformlyOn.hasProd (h : HasProdUniformlyOn f g ùîñ) (hs : s ‚àà ùîñ) (hx : x ‚àà s) :
    HasProd (f ¬∑ x) (g x) :=
  (hasProdUniformlyOn_iff_tendstoUniformlyOn.mp h s hs).tendsto_at hx

@[to_additive]
theorem HasProdUniformlyOn.tprod_eqOn [T2Space Œ±] (h : HasProdUniformlyOn f g ùîñ) (hs : s ‚àà ùîñ) :
    s.EqOn (‚àè' b, f b ¬∑) g :=
  fun _ hx ‚Ü¶ (h.hasProd hs hx).tprod_eq

@[to_additive]
theorem MultipliableUniformlyOn.multipliable (h : MultipliableUniformlyOn f ùîñ)
    (hs : s ‚àà ùîñ) (hx : x ‚àà s) : Multipliable (f ¬∑ x) :=
  match h.exists with | ‚ü®_, hg‚ü© => (hg.hasProd hs hx).multipliable

@[to_additive]
theorem MultipliableUniformlyOn.hasProdUniformlyOn [T2Space Œ±] (h : MultipliableUniformlyOn f ùîñ) :
    HasProdUniformlyOn f (‚àè' i, f i ¬∑) ùîñ := by
  obtain ‚ü®g, hg‚ü© := h.exists
  simp only [hasProdUniformlyOn_iff_tendstoUniformlyOn]
  intro s hs
  exact (hasProdUniformlyOn_iff_tendstoUniformlyOn.mp hg s hs).congr_right (hg.tprod_eqOn hs).symm

end UniformlyOn

section LocallyUniformlyOn
/-!
##¬†Locally uniform convergence of sums and products
-/

variable (f g s) [TopologicalSpace Œ≤]

/-- `HasProdLocallyUniformlyOn f g s` means that the (potentially infinite) product `‚àè' i, f i b`
for `b : Œ≤` converges locally uniformly on `s` to `g b` (in the sense of
`TendstoLocallyUniformlyOn`). -/
@[to_additive "`HasProdLocallyUniformlyOn f g s` means that the (potentially infinite) sum
`‚àë' i, f i b` for `b : Œ≤` converges locally uniformly on `s` to `g b` (in the sense of
`TendstoLocallyUniformlyOn`)."]
def HasProdLocallyUniformlyOn : Prop :=
  TendstoLocallyUniformlyOn (fun I b ‚Ü¶ ‚àè i ‚àà I, f i b) g atTop s

/-- `MultipliableLocallyUniformlyOn f s` means that the product `‚àè' i, f i b` converges locally
uniformly on `s` to something. -/
@[to_additive "`SummableUniformlyOn f s` means that `‚àë' i, f i b` converges locally uniformly on
`s` to something."]
def MultipliableLocallyUniformlyOn : Prop := ‚àÉ g, HasProdLocallyUniformlyOn f g s

variable {f g s}

@[to_additive]
lemma hasProdLocallyUniformlyOn_iff_tendstoLocallyUniformlyOn :
    HasProdLocallyUniformlyOn f g s ‚Üî
      TendstoLocallyUniformlyOn (fun I b ‚Ü¶ ‚àè i ‚àà I, f i b) g atTop s :=
  Iff.rfl

/-- If every `x ‚àà s` has a neighbourhood within `s` on which `b ‚Ü¶ ‚àè' i, f i b` converges uniformly
to `g`, then the product converges locally uniformly on `s` to `g`. Note that this is not a
tautology, and the converse is only true if the domain is locally compact. -/
@[to_additive "If every `x ‚àà s` has a neighbourhood within `s` on which `b ‚Ü¶ ‚àë' i, f i b` converges
uniformly to `g`, then the product converges locally uniformly. Note that this is not a tautology,
and the converse is only true if the domain is locally compact."]
lemma hasProdLocallyUniformlyOn_of_of_forall_exists_nhd
    (h : ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, HasProdUniformlyOn f g {t}) : HasProdLocallyUniformlyOn f g s :=
  tendstoLocallyUniformlyOn_of_forall_exists_nhd <| by
    simpa [hasProdUniformlyOn_iff_tendstoUniformlyOn] using h

@[to_additive]
theorem HasProdLocallyUniformlyOn.multipliableLocallyUniformlyOn
    (h : HasProdLocallyUniformlyOn f g s) : MultipliableLocallyUniformlyOn f s :=
  ‚ü®g, h‚ü©

/-- If every `x ‚àà s` has a neighbourhood within `s` on which `b ‚Ü¶ ‚àè' i, f i b` converges uniformly,
then the product converges locally uniformly on `s`. Note that this is not a tautology, and the
converse is only true if the domain is locally compact. -/
@[to_additive "If every `x ‚àà s` has a neighbourhood within `s` on which `b ‚Ü¶ ‚àë' i, f i b` converges
uniformly, then the product converges locally uniformly. Note that this is not a tautology, and the
converse is only true if the domain is locally compact."]
lemma multipliableLocallyUniformlyOn_of_of_forall_exists_nhd [T2Space Œ±]
    (h : ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, MultipliableUniformlyOn f {t}) :
    MultipliableLocallyUniformlyOn f s :=
  (hasProdLocallyUniformlyOn_of_of_forall_exists_nhd <| fun x hx ‚Ü¶ match h x hx with
  | ‚ü®t, ht, htr‚ü© => ‚ü®t, ht, htr.hasProdUniformlyOn‚ü©).multipliableLocallyUniformlyOn

@[to_additive]
theorem HasProdLocallyUniformlyOn.hasProd (h : HasProdLocallyUniformlyOn f g s) (hx : x ‚àà s) :
    HasProd (f ¬∑ x) (g x) :=
  h.tendsto_at hx

@[to_additive]
theorem MultipliableLocallyUniformlyOn.multipliable
    (h : MultipliableLocallyUniformlyOn f s) (hx : x ‚àà s) : Multipliable (f ¬∑ x) :=
  match h with | ‚ü®_, hg‚ü© => (hg.hasProd hx).multipliable

@[to_additive]
theorem MultipliableLocallyUniformlyOn.hasProdLocallyUniformlyOn [T2Space Œ±]
    (h : MultipliableLocallyUniformlyOn f s) :
    HasProdLocallyUniformlyOn f (‚àè' i, f i ¬∑) s :=
  match h with | ‚ü®_, hg‚ü© => hg.congr_right fun _ hb ‚Ü¶ (hg.hasProd hb).tprod_eq.symm

@[to_additive]
theorem HasProdLocallyUniformlyOn.tprod_eqOn [T2Space Œ±]
    (h : HasProdLocallyUniformlyOn f g s) : Set.EqOn (‚àè' i, f i ¬∑) g s :=
  fun _ hx ‚Ü¶ (h.hasProd hx).tprod_eq

end LocallyUniformlyOn

-- XXX move examples elsewhere and remove this before merging
set_option linter.directoryDependency false

variable {ùïú ùïú': Type*} [NormedAddCommGroup ùïú'] [CompleteSpace ùïú'] [TopologicalSpace ùïú]
  [LocallyCompactSpace ùïú]

lemma SummableLocallyUniformlyOn.of_locally_bounded (f : Œπ ‚Üí ùïú ‚Üí ùïú') {s : Set ùïú} (hs : IsOpen s)
    (hu : ‚àÄ K ‚äÜ s, IsCompact K ‚Üí ‚àÉ u : Œπ ‚Üí ‚Ñù, Summable u ‚àß ‚àÄ n (k : K), ‚Äñf n k‚Äñ ‚â§ u n) :
    SummableLocallyUniformlyOn f s := by
  apply HasSumLocallyUniformlyOn.summableLocallyUniformlyOn (g := (fun x => ‚àë' i, f i x))
  rw [hasSumLocallyUniformlyOn_iff_tendstoLocallyUniformlyOn,
    tendstoLocallyUniformlyOn_iff_forall_isCompact hs]
  intro K hK hKc
  obtain ‚ü®u, hu1, hu2‚ü© := hu K hK hKc
  apply tendstoUniformlyOn_tsum hu1 fun n x hx ‚Ü¶ hu2 n ‚ü®x, hx‚ü©

/-This is just a test of the defns -/
theorem derivWithin_tsum {Œπ F E : Type*} [NontriviallyNormedField E] [IsRCLikeNormedField E]
    [NormedField F] [NormedSpace E F] (f : Œπ ‚Üí E ‚Üí F) {s : Set E}
    (hs : IsOpen s) {x : E} (hx : x ‚àà s) (hf : ‚àÄ y ‚àà s, Summable fun n ‚Ü¶ f n y)
    (h : SummableLocallyUniformlyOn (fun n ‚Ü¶ (derivWithin (fun z ‚Ü¶ f n z) s)) s)
    (hf2 : ‚àÄ n r, r ‚àà s ‚Üí DifferentiableAt E (f n) r) :
    derivWithin (fun z ‚Ü¶ ‚àë' n , f n z) s x = ‚àë' n, derivWithin (fun z ‚Ü¶ f n z) s x := by
  apply HasDerivWithinAt.derivWithin ?_ (IsOpen.uniqueDiffWithinAt hs hx)
  apply HasDerivAt.hasDerivWithinAt
  apply hasDerivAt_of_tendstoLocallyUniformlyOn hs _ _ (fun y hy ‚Ü¶ Summable.hasSum (hf y hy)) hx
  ¬∑ use fun n : Finset Œπ ‚Ü¶ fun a ‚Ü¶ ‚àë i ‚àà n, derivWithin (fun z ‚Ü¶ f i z) s a
  ¬∑ obtain ‚ü®g, hg‚ü© := h
    apply (hasSumLocallyUniformlyOn_iff_tendstoLocallyUniformlyOn.mp hg).congr_right
    exact fun ‚¶Éb‚¶Ñ hb ‚Ü¶ Eq.symm (HasSumLocallyUniformlyOn.tsum_eqOn hg hb)
  ¬∑ filter_upwards with t r hr
    apply HasDerivAt.sum
    intro q hq
    apply HasDerivWithinAt.hasDerivAt
    ¬∑ exact DifferentiableWithinAt.hasDerivWithinAt (hf2 q r hr).differentiableWithinAt
    ¬∑ exact IsOpen.mem_nhds hs hr
