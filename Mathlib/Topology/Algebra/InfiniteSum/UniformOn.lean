/-
Copyright (c) 2025 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck, David Loeffler
-/
import Mathlib.Topology.Algebra.InfiniteSum.Defs
import Mathlib.Topology.Algebra.UniformConvergence
import Mathlib.Order.Filter.AtTopBot.Finset

/-!
# Infinite sum and products that converge uniformly on a set

This file defines the notion of uniform convergence of infinite sums and products of functions,
on a given family of subsets of their domain.

It also defines the notion of local uniform convergence of infinite sums and products of functions
on a set.
-/

noncomputable section

open Filter Function

open scoped Topology

variable {Œ± Œ≤ Œπ : Type*} [CommMonoid Œ±] {f : Œπ ‚Üí Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {ùîñ : Set (Set Œ≤)}
  {x : Œ≤} {s : Set Œ≤} {I : Finset Œπ} [UniformSpace Œ±]

/-!
## Uniform convergence of sums and products
-/

section UniformlyOn

variable (f g ùîñ) in
/-- `HasProdUniformlyOn f g ùîñ` means that the (potentially infinite) product `‚àè' i, f i b`
for `b : Œ≤` converges uniformly on each `s ‚àà ùîñ` to `g`. -/
@[to_additive "`HasSumUniformlyOn f g ùîñ` means that the (potentially infinite) sum `‚àë' i, f i b`
for `b : Œ≤` converges uniformly on each `s ‚àà ùîñ` to `g`."]
def HasProdUniformlyOn : Prop :=
  HasProd (fun i ‚Ü¶ UniformOnFun.ofFun ùîñ (f i)) (UniformOnFun.ofFun ùîñ g)

variable (f g ùîñ) in
/-- `MultipliableUniformlyOn f ùîñ` means that there is some infinite product to which
`f` converges uniformly on every `s ‚àà ùîñ`. Use `fun x ‚Ü¶ ‚àè' i, f i x` to get the product function. -/
@[to_additive "`SummableUniformlyOn f s` means that there is some infinite sum to
which `f` converges uniformly on every `s ‚àà ùîñ`. Use fun x ‚Ü¶ ‚àë' i, f i x to get the sum function."]
def MultipliableUniformlyOn : Prop :=
  Multipliable (fun i ‚Ü¶ UniformOnFun.ofFun ùîñ (f i))

@[to_additive]
lemma MultipliableUniformlyOn.exists (h : MultipliableUniformlyOn f ùîñ) :
    ‚àÉ g, HasProdUniformlyOn f g ùîñ :=
  h

@[to_additive]
theorem HasProdUniformlyOn.multipliableUniformlyOn (h : HasProdUniformlyOn f g ùîñ) :
    MultipliableUniformlyOn f ùîñ :=
  ‚ü®g, h‚ü©

@[to_additive]
lemma hasProdUniformlyOn_iff_tendstoUniformlyOn : HasProdUniformlyOn f g ùîñ ‚Üî
    ‚àÄ s ‚àà ùîñ, TendstoUniformlyOn (fun I b ‚Ü¶ ‚àè i ‚àà I, f i b) g atTop s := by
  simpa [HasProdUniformlyOn, HasProd, ‚Üê UniformOnFun.ofFun_prod, Finset.prod_fn] using
    UniformOnFun.tendsto_iff_tendstoUniformlyOn

@[to_additive]
lemma HasProdUniformlyOn.congr {f' : Œπ ‚Üí Œ≤ ‚Üí Œ±}
    (h : HasProdUniformlyOn f g ùîñ)
    (hff' : ‚àÄ s ‚àà ùîñ, ‚àÄ·∂† (n : Finset Œπ) in atTop,
      Set.EqOn (fun b ‚Ü¶ ‚àè i ‚àà n, f i b) (fun b ‚Ü¶ ‚àè i ‚àà n, f' i b) s) :
    HasProdUniformlyOn f' g ùîñ := by
  rw [hasProdUniformlyOn_iff_tendstoUniformlyOn] at *
  exact fun s hs ‚Ü¶ TendstoUniformlyOn.congr (h s hs) (hff' s hs)

@[to_additive]
lemma HasProdUniformlyOn.congr_right {g' : Œ≤ ‚Üí Œ±}
    (h : HasProdUniformlyOn f g ùîñ) (hgg' : ‚àÄ s ‚àà ùîñ, Set.EqOn g g' s) :
    HasProdUniformlyOn f g' ùîñ := by
  rw [hasProdUniformlyOn_iff_tendstoUniformlyOn] at *
  exact fun s hs ‚Ü¶ TendstoUniformlyOn.congr_right (h s hs) (hgg' s hs)

@[to_additive]
lemma HasProdUniformlyOn.tendstoUniformlyOn_finsetRange
    {f : ‚Ñï ‚Üí Œ≤ ‚Üí Œ±} (h : HasProdUniformlyOn f g ùîñ) (hs : s ‚àà ùîñ) :
    TendstoUniformlyOn (fun N b ‚Ü¶ ‚àè i ‚àà Finset.range N, f i b) g atTop s := by
  rw [hasProdUniformlyOn_iff_tendstoUniformlyOn] at h
  exact fun v hv => Filter.tendsto_finset_range.eventually (h s hs v hv)

@[to_additive]
theorem HasProdUniformlyOn.hasProd (h : HasProdUniformlyOn f g ùîñ) (hs : s ‚àà ùîñ) (hx : x ‚àà s) :
    HasProd (f ¬∑ x) (g x) :=
  (hasProdUniformlyOn_iff_tendstoUniformlyOn.mp h s hs).tendsto_at hx

@[to_additive]
theorem HasProdUniformlyOn.tprod_eqOn [T2Space Œ±] (h : HasProdUniformlyOn f g ùîñ) (hs : s ‚àà ùîñ) :
    s.EqOn (‚àè' b, f b ¬∑) g :=
  fun _ hx ‚Ü¶ (h.hasProd hs hx).tprod_eq

@[to_additive]
theorem HasProdUniformlyOn.tprod_eq [T2Space Œ±] (h : HasProdUniformlyOn f g ùîñ)
    (hs : ‚ãÉ‚ÇÄ ùîñ = Set.univ) : (‚àè' b, f b ¬∑) = g := by
  ext x
  obtain ‚ü®s, hs, hx‚ü© := by simpa [‚Üê hs] using Set.mem_univ x
  exact h.tprod_eqOn hs hx

@[to_additive]
theorem MultipliableUniformlyOn.multipliable (h : MultipliableUniformlyOn f ùîñ)
    (hs : s ‚àà ùîñ) (hx : x ‚àà s) : Multipliable (f ¬∑ x) :=
  match h.exists with | ‚ü®_, hg‚ü© => (hg.hasProd hs hx).multipliable

@[to_additive]
theorem MultipliableUniformlyOn.hasProdUniformlyOn [T2Space Œ±] (h : MultipliableUniformlyOn f ùîñ) :
    HasProdUniformlyOn f (‚àè' i, f i ¬∑) ùîñ := by
  obtain ‚ü®g, hg‚ü© := h.exists
  simp only [hasProdUniformlyOn_iff_tendstoUniformlyOn]
  intro s hs
  exact (hasProdUniformlyOn_iff_tendstoUniformlyOn.mp hg s hs).congr_right (hg.tprod_eqOn hs).symm

end UniformlyOn

section LocallyUniformlyOn
/-!
##¬†Locally uniform convergence of sums and products
-/

variable [TopologicalSpace Œ≤]

variable (f g s) in
/-- `HasProdLocallyUniformlyOn f g s` means that the (potentially infinite) product `‚àè' i, f i b`
for `b : Œ≤` converges locally uniformly on `s` to `g b` (in the sense of
`TendstoLocallyUniformlyOn`). -/
@[to_additive "`HasSumLocallyUniformlyOn f g s` means that the (potentially infinite) sum
`‚àë' i, f i b` for `b : Œ≤` converges locally uniformly on `s` to `g b` (in the sense of
`TendstoLocallyUniformlyOn`)."]
def HasProdLocallyUniformlyOn : Prop :=
  TendstoLocallyUniformlyOn (fun I b ‚Ü¶ ‚àè i ‚àà I, f i b) g atTop s

variable (f g s) in
/-- `MultipliableLocallyUniformlyOn f s` means that the product `‚àè' i, f i b` converges locally
uniformly on `s` to something. -/
@[to_additive "`SummableLocallyUniformlyOn f s` means that `‚àë' i, f i b` converges locally
uniformly on `s` to something."]
def MultipliableLocallyUniformlyOn : Prop := ‚àÉ g, HasProdLocallyUniformlyOn f g s

@[to_additive]
lemma hasProdLocallyUniformlyOn_iff_tendstoLocallyUniformlyOn :
    HasProdLocallyUniformlyOn f g s ‚Üî
      TendstoLocallyUniformlyOn (fun I b ‚Ü¶ ‚àè i ‚àà I, f i b) g atTop s :=
  Iff.rfl

/-- If every `x ‚àà s` has a neighbourhood within `s` on which `b ‚Ü¶ ‚àè' i, f i b` converges uniformly
to `g`, then the product converges locally uniformly on `s` to `g`. Note that this is not a
tautology, and the converse is only true if the domain is locally compact. -/
@[to_additive "If every `x ‚àà s` has a neighbourhood within `s` on which `b ‚Ü¶ ‚àë' i, f i b` converges
uniformly to `g`, then the sum converges locally uniformly. Note that this is not a tautology,
and the converse is only true if the domain is locally compact."]
lemma hasProdLocallyUniformlyOn_of_of_forall_exists_nhds
    (h : ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, HasProdUniformlyOn f g {t}) : HasProdLocallyUniformlyOn f g s :=
  tendstoLocallyUniformlyOn_of_forall_exists_nhds <| by
    simpa [hasProdUniformlyOn_iff_tendstoUniformlyOn] using h

@[deprecated (since := "2025-05-22")] alias hasProdLocallyUniformlyOn_of_of_forall_exists_nhd :=
  hasProdLocallyUniformlyOn_of_of_forall_exists_nhds

@[deprecated (since := "2025-05-22")] alias hasSumLocallyUniformlyOn_of_of_forall_exists_nhd :=
  hasSumLocallyUniformlyOn_of_of_forall_exists_nhds

@[to_additive]
lemma HasProdUniformlyOn.hasProdLocallyUniformlyOn (h : HasProdUniformlyOn f g {s}) :
  HasProdLocallyUniformlyOn f g s := by
  simp [HasProdLocallyUniformlyOn, hasProdUniformlyOn_iff_tendstoUniformlyOn] at *
  exact TendstoUniformlyOn.tendstoLocallyUniformlyOn h

@[to_additive]
lemma hasProdLocallyUniformlyOn_of_forall_compact (hs : IsOpen s) [LocallyCompactSpace Œ≤]
    (h : ‚àÄ K ‚äÜ s, IsCompact K ‚Üí HasProdUniformlyOn f g {K}) : HasProdLocallyUniformlyOn f g s := by
  rw [HasProdLocallyUniformlyOn, tendstoLocallyUniformlyOn_iff_forall_isCompact hs]
  simpa [hasProdUniformlyOn_iff_tendstoUniformlyOn] using h

@[to_additive]
theorem HasProdLocallyUniformlyOn.multipliableLocallyUniformlyOn
    (h : HasProdLocallyUniformlyOn f g s) : MultipliableLocallyUniformlyOn f s :=
  ‚ü®g, h‚ü©

/-- If every `x ‚àà s` has a neighbourhood within `s` on which `b ‚Ü¶ ‚àè' i, f i b` converges uniformly,
then the product converges locally uniformly on `s`. Note that this is not a tautology, and the
converse is only true if the domain is locally compact. -/
@[to_additive "If every `x ‚àà s` has a neighbourhood within `s` on which `b ‚Ü¶ ‚àë' i, f i b` converges
uniformly, then the sum converges locally uniformly. Note that this is not a tautology, and the
converse is only true if the domain is locally compact."]
lemma multipliableLocallyUniformlyOn_of_of_forall_exists_nhds [T2Space Œ±]
    (h : ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, MultipliableUniformlyOn f {t}) :
    MultipliableLocallyUniformlyOn f s :=
  (hasProdLocallyUniformlyOn_of_of_forall_exists_nhds <| fun x hx ‚Ü¶ match h x hx with
  | ‚ü®t, ht, htr‚ü© => ‚ü®t, ht, htr.hasProdUniformlyOn‚ü©).multipliableLocallyUniformlyOn

@[deprecated (since := "2025-05-22")]
alias multipliableLocallyUniformlyOn_of_of_forall_exists_nhd :=
  multipliableLocallyUniformlyOn_of_of_forall_exists_nhds

@[deprecated (since := "2025-05-22")]
alias summableLocallyUniformlyOn_of_of_forall_exists_nhd :=
  summableLocallyUniformlyOn_of_of_forall_exists_nhds

@[to_additive]
theorem HasProdLocallyUniformlyOn.hasProd (h : HasProdLocallyUniformlyOn f g s) (hx : x ‚àà s) :
    HasProd (f ¬∑ x) (g x) :=
  h.tendsto_at hx

@[to_additive]
theorem MultipliableLocallyUniformlyOn.multipliable
    (h : MultipliableLocallyUniformlyOn f s) (hx : x ‚àà s) : Multipliable (f ¬∑ x) :=
  match h with | ‚ü®_, hg‚ü© => (hg.hasProd hx).multipliable

@[to_additive]
theorem MultipliableLocallyUniformlyOn.hasProdLocallyUniformlyOn [T2Space Œ±]
    (h : MultipliableLocallyUniformlyOn f s) :
    HasProdLocallyUniformlyOn f (‚àè' i, f i ¬∑) s :=
  match h with | ‚ü®_, hg‚ü© => hg.congr_right fun _ hb ‚Ü¶ (hg.hasProd hb).tprod_eq.symm

@[to_additive]
theorem HasProdLocallyUniformlyOn.tprod_eqOn [T2Space Œ±]
    (h : HasProdLocallyUniformlyOn f g s) : Set.EqOn (‚àè' i, f i ¬∑) g s :=
  fun _ hx ‚Ü¶ (h.hasProd hx).tprod_eq

@[to_additive]
lemma HasProdLocallyUniformlyOn.tendstoLocallyUniformlyOn_finsetRange
    {f : ‚Ñï ‚Üí Œ≤ ‚Üí Œ±} (h : HasProdLocallyUniformlyOn f g s)  :
    TendstoLocallyUniformlyOn (fun N b ‚Ü¶ ‚àè i ‚àà Finset.range N, f i b) g atTop s := by
  rw [hasProdLocallyUniformlyOn_iff_tendstoLocallyUniformlyOn] at h
  intro v hv r hr
  obtain ‚ü®t, ht, htr‚ü© := h v hv r hr
  exact ‚ü®t, ht, Filter.tendsto_finset_range.eventually htr‚ü©

end LocallyUniformlyOn
