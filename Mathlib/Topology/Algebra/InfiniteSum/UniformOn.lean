/-
Copyright (c) 2025 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck
-/
import Mathlib.Analysis.Calculus.UniformLimitsDeriv
import Mathlib.Analysis.InnerProductSpace.Basic

/-!
# Infinite sum and products that converge uniformly on a set

This file defines the notion of uniform convergence of infinite sums and products of functions,
on a given family of subsets of their domain.

It also defines the notion of local uniform convergence of infinite sums and products of functions
on a set.
-/

noncomputable section

open Filter Function

open scoped Topology

variable {Œ± Œ≤ Œπ : Type*} [CommMonoid Œ±]  {f : Œπ ‚Üí Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {ùîñ : Set (Set Œ≤)}
  {x : Œ≤} {s : Set Œ≤} {I : Finset Œπ}

section prelim

variable (F I) in
@[to_additive (attr := simp)]
lemma UniformOnFun.ofFun_prod : ‚àè i ‚àà I, ofFun ùîñ (f i) = ofFun ùîñ (‚àè i ‚àà I, f i) :=
  rfl

end prelim

variable [UniformSpace Œ±]

section UniformlyOn

variable (f g ùîñ)

/-- `HasProdUniformlyOn f g ùîñ` means that the (potentially infinite) product `‚àè' i, f i b`
for `b : Œ≤` converges uniformly on `s ‚àà ùîñ` to `g`. -/
@[to_additive "`HasSumUniformlyOn f g ùîñ` means that the (potentially infinite) sum `‚àë' i, f i b`
for `b : Œ≤` converges uniformly on `s ‚àà ùîñ` to `g`."]
def HasProdUniformlyOn : Prop :=
  HasProd (fun i ‚Ü¶ UniformOnFun.ofFun ùîñ (f i)) (UniformOnFun.ofFun ùîñ g)

/-- `MultipliableUniformlyOn f ùîñ` means that `f` converges uniformly on `s` to some infinite
product. -/
@[to_additive "`SummableUniformlyOn f s` means that `f` converges uniformly on `s` to some
infinite sum."]
def MultipliableUniformlyOn (f : Œπ ‚Üí Œ≤ ‚Üí Œ±) (ùîñ : Set (Set Œ≤)) : Prop :=
  ‚àÉ g, HasProdUniformlyOn f g ùîñ

variable {f g ùîñ}

@[to_additive]
theorem HasProdUniformlyOn.multipliableUniformlyOn (h : HasProdUniformlyOn f g ùîñ) :
    MultipliableUniformlyOn f ùîñ := ‚ü®g, h‚ü©

@[to_additive]
lemma hasProdUniformlyOn_iff_tendstoUniformlyOn : HasProdUniformlyOn f g ùîñ ‚Üî
    ‚àÄ s ‚àà ùîñ, TendstoUniformlyOn (fun (I : Finset Œπ) b ‚Ü¶ ‚àè i ‚àà I, f i b) g atTop s := by
  simpa [HasProdUniformlyOn, HasProd, UniformOnFun.ofFun_prod, Finset.prod_fn] using
    UniformOnFun.tendsto_iff_tendstoUniformlyOn

@[to_additive]
theorem HasProdUniformlyOn.hasProd (h : HasProdUniformlyOn f g ùîñ) (hs : s ‚àà ùîñ) (hx : x ‚àà s) :
    HasProd (f ¬∑ x) (g x) :=
  (hasProdUniformlyOn_iff_tendstoUniformlyOn.mp h s hs).tendsto_at hx

@[to_additive]
theorem HasProdUniformlyOn.tprod_eqOn [T2Space Œ±] (h : HasProdUniformlyOn f g ùîñ) (hs : s ‚àà ùîñ) :
    s.EqOn (‚àè' b, f b ¬∑) g :=
  fun _ hx ‚Ü¶ (h.hasProd hs hx).tprod_eq

@[to_additive]
theorem MultipliableUniformlyOn.multipliable (h : MultipliableUniformlyOn f ùîñ)
    (hs : s ‚àà ùîñ) (hx : x ‚àà s) : Multipliable (f ¬∑ x) :=
  match h with | ‚ü®_, hg‚ü© => (hg.hasProd hs hx).multipliable

end UniformlyOn

section LocallyUniformlyOn

variable (f g s) [TopologicalSpace Œ≤]

/-- `HasProdLocallyUniformlyOn f g s` means that the (potentially infinite) product `‚àè' i, f i b`
for `b : Œ≤` converges locally uniformly on `s` to `g b`. -/
@[to_additive "`HasProdLocallyUniformlyOn f g s` means that the (potentially infinite) sum
`‚àë' i, f i b` for `b : Œ≤` converges locally uniformly on `s` to `g b`."]
def HasProdLocallyUniformlyOn : Prop := ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, HasProdUniformlyOn f g {t}

/-- `MultipliableLocallyUniformlyOn f s` means that the product `‚àè' i, f i b` converges locally
uniformly on `s` to something. -/
@[to_additive "`SummableUniformlyOn f s` means that `‚àë' i, f i b` converges locally uniformly on
`s` to something."]
def MultipliableLocallyUniformlyOn : Prop := ‚àÉ g, HasProdLocallyUniformlyOn f g s

variable {f g s}

@[to_additive]
theorem HasProdLocallyUniformlyOn.multipliableLocallyUniformlyOn
    (h : HasProdLocallyUniformlyOn f g s) : MultipliableLocallyUniformlyOn f s :=
  ‚ü®g, h‚ü©

@[to_additive]
theorem HasProdLocallyUniformlyOn.hasProd (h : HasProdLocallyUniformlyOn f g s) (hx : x ‚àà s) :
    HasProd (f ¬∑ x) (g x) :=
  match h x hx with | ‚ü®_, ht, hft‚ü© => hft.hasProd rfl (mem_of_mem_nhdsWithin hx ht)

@[to_additive]
theorem MultipliableLocallyUniformlyOn.multipliable
    (h : MultipliableLocallyUniformlyOn f s) (hx : x ‚àà s) : Multipliable (f ¬∑ x) :=
  match h with | ‚ü®_, hg‚ü© => (hg.hasProd hx).multipliable

@[to_additive]
theorem HasProdLocallyUniformlyOn.tprod_eqOn [T2Space Œ±]
    (h : HasProdLocallyUniformlyOn f g s) : Set.EqOn (‚àè' i, f i ¬∑) g s :=
  fun _ hx ‚Ü¶ (h.hasProd hx).tprod_eq

lemma tendstoLocallyUniformlyOn_of_forall_exists_nhd
    {Œπ Œ± Œ≤ : Type*} [UniformSpace Œ±] [TopologicalSpace Œ≤] {f : Œπ ‚Üí Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±}
    {l : Filter Œπ} {s : Set Œ≤} (h : ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, TendstoUniformlyOn f g l t) :
    TendstoLocallyUniformlyOn f g l s := by
  rw [tendstoLocallyUniformlyOn_iff_forall_tendsto]
  intro x hx
  obtain ‚ü®t, ht, htr‚ü© := h x hx
  simp only [tendstoUniformlyOn_iff_tendsto] at htr
  exact htr.mono_left (prod_mono_right _ (le_principal_iff.mpr ht))

@[to_additive]
lemma HasProdLocallyUniformlyOn.tendstoLocallyUniformlyOn
    (h : HasProdLocallyUniformlyOn f g s) :
    TendstoLocallyUniformlyOn (fun (I : Finset Œπ) b ‚Ü¶ ‚àè i ‚àà I, f i b) g atTop s := by
  apply tendstoLocallyUniformlyOn_of_forall_exists_nhd
  simpa [HasProdLocallyUniformlyOn, hasProdUniformlyOn_iff_tendstoUniformlyOn] using h

@[to_additive]
lemma hasProdLocallyUniformlyOn_iff_tendstoLocallyUniformlyOn [LocallyCompactSpace Œ≤]
    (hs : IsOpen s) : HasProdLocallyUniformlyOn f g s ‚Üî
    TendstoLocallyUniformlyOn (fun (I : Finset Œπ) b ‚Ü¶ ‚àè i ‚àà I, f i b) g atTop s := by
  simp [(tendstoLocallyUniformlyOn_TFAE _ g _ hs).out 0 2, HasProdLocallyUniformlyOn,
    hasProdUniformlyOn_iff_tendstoUniformlyOn]

end LocallyUniformlyOn

open Complex

/- This is just a test of the defns -/
theorem derivWithin_tsum {Œ± : Type*} (f : Œ± ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) {s : Set ‚ÑÇ}
    (hs : IsOpen s) {x : ‚ÑÇ} (hx : x ‚àà s)
    (hf : ‚àÄ y ‚àà s, Summable fun n : Œ± ‚Ü¶ f n y)
    (h : SummableLocallyUniformlyOn (fun n ‚Ü¶ (derivWithin (fun z ‚Ü¶ f n z) s)) s)
    (hf2 : ‚àÄ n r, r ‚àà s ‚Üí DifferentiableAt ‚ÑÇ (f n) r) :
    derivWithin (fun z ‚Ü¶ ‚àë' n : Œ±, f n z) s x = ‚àë' n : Œ±, derivWithin (fun z ‚Ü¶ f n z) s x := by
  apply HasDerivWithinAt.derivWithin ?_ (IsOpen.uniqueDiffWithinAt hs hx)
  apply HasDerivAt.hasDerivWithinAt
  apply hasDerivAt_of_tendstoLocallyUniformlyOn hs _ _ (fun y hy ‚Ü¶ Summable.hasSum (hf y hy)) hx
  ¬∑ exact fun n a ‚Ü¶ ‚àë i ‚àà n, derivWithin (fun z ‚Ü¶ f i z) s a
  ¬∑ obtain ‚ü®g, hg‚ü© := h
    apply hg.tendstoLocallyUniformlyOn.congr_right
    intro b hb
    have hB := HasSumLocallyUniformlyOn.tsum_eqOn hg hb
    apply hB.symm
  ¬∑ filter_upwards
    intro t r hr
    apply HasDerivAt.sum
    intro q hq
    apply HasDerivWithinAt.hasDerivAt
    ¬∑ apply DifferentiableWithinAt.hasDerivWithinAt
      apply (hf2 q r hr).differentiableWithinAt
    ¬∑ exact IsOpen.mem_nhds hs hr
