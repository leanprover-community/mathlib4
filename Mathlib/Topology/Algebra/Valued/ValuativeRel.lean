/-
Copyright (c) 2025 Yakov Pechersky. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yakov Pechersky
-/
import Mathlib.RingTheory.Valuation.ValuativeRel.Basic
import Mathlib.Topology.Algebra.Valued.ValuationTopology
import Mathlib.Topology.Algebra.WithZeroTopology
import Mathlib.Topology.UniformSpace.Ultra.Basic

/-!

# Valuative Relations as Valued

In this temporary file, we provide a helper instance
for `Valued R Œì` derived from a `ValuativeRel R`,
so that downstream files can refer to `ValuativeRel R`,
to facilitate a refactor.

-/

namespace Valuation

variable {R Œì‚ÇÄ : Type*} [Ring R] [LinearOrderedCommMonoidWithZero Œì‚ÇÄ]
  (v : Valuation R Œì‚ÇÄ)

lemma isSymmetricRel_uniformity_ball_lt (r : Œì‚ÇÄ) :
    IsSymmetricRel { p : R √ó R | v (p.2 - p.1) < r } := by
  simp [IsSymmetricRel, Valuation.map_sub_swap]

lemma isSymmetricRel_uniformity_ball_le (r : Œì‚ÇÄ) :
    IsSymmetricRel { p : R √ó R | v (p.2 - p.1) ‚â§ r } := by
  simp [IsSymmetricRel, Valuation.map_sub_swap]

lemma isTransitiveRel_uniformity_ball_lt (r : Œì‚ÇÄ) :
    IsTransitiveRel { p : R √ó R | v (p.2 - p.1) < r } := by
  intro _ _ _ h h'
  refine (Valuation.map_add_lt v h h').trans_eq' ?_
  simp

lemma isTransitiveRel_uniformity_ball_le (r : Œì‚ÇÄ) :
    IsTransitiveRel { p : R √ó R | v (p.2 - p.1) ‚â§ r } := by
  intro _ _ _ h h'
  refine (Valuation.map_add_le v h h').trans_eq' ?_
  simp

end Valuation

namespace IsValuativeTopology

section

/-! # Alternate constructors -/

variable {R : Type*} [CommRing R] [ValuativeRel R] [TopologicalSpace R]

open ValuativeRel TopologicalSpace Filter Topology Set

local notation "v" => valuation R

/-- Assuming `ContinuousConstVAdd R R`, we only need to check the neighbourhood of `0` in order to
prove `IsValuativeTopology R`. -/
theorem of_zero [ContinuousConstVAdd R R]
    (h‚ÇÄ : ‚àÄ s : Set R, s ‚àà ùìù 0 ‚Üî ‚àÉ Œ≥ : (ValueGroupWithZero R)À£, { z | v z < Œ≥ } ‚äÜ s) :
    IsValuativeTopology R where
  mem_nhds_iff {s x} := by
    simpa [‚Üê vadd_mem_nhds_vadd_iff (t := s) (-x), ‚Üê image_vadd, ‚Üê image_subset_iff] using
      h‚ÇÄ ((x + ¬∑) ‚Åª¬π' s)

/-- Assuming `ContinuousConstVAdd R R`, we only need to check the neighbourhood of `0` in order to
prove `IsValuativeTopology R`. -/
lemma of_hasBasis_zero [ContinuousConstVAdd R R]
    (h : (ùìù (0 : R)).HasBasis (fun _ ‚Ü¶ True) fun Œ≥ : (ValueGroupWithZero R)À£ ‚Ü¶ { x | v x < Œ≥ }) :
    IsValuativeTopology R :=
  .of_zero <| by simp [h.mem_iff]

end

variable {R : Type*} [CommRing R] [ValuativeRel R] [TopologicalSpace R]

open ValuativeRel TopologicalSpace Filter Topology Set Uniformity

local notation "v" => valuation R

variable [IsValuativeTopology R]
/-- A version mentioning subtraction. -/
lemma mem_nhds_iff' {s : Set R} {x : R} :
    s ‚àà ùìù (x : R) ‚Üî
    ‚àÉ Œ≥ : (ValueGroupWithZero R)À£, { z | v (z - x) < Œ≥ } ‚äÜ s := by
  convert mem_nhds_iff (s := s) using 4
  ext z
  simp [neg_add_eq_sub]

@[deprecated (since := "2025-08-01")]
alias _root_.ValuativeTopology.mem_nhds := mem_nhds_iff'

lemma mem_nhds_zero_iff (s : Set R) : s ‚àà ùìù (0 : R) ‚Üî
    ‚àÉ Œ≥ : (ValueGroupWithZero R)À£, { x | v x < Œ≥ } ‚äÜ s := by
  convert IsValuativeTopology.mem_nhds_iff' (x := (0 : R))
  rw [sub_zero]

@[deprecated (since := "2025-08-04")]
alias _root_.ValuativeTopology.mem_nhds_iff := mem_nhds_zero_iff

/-- Helper `Valued` instance when `ValuativeTopology R` over a `UniformSpace R`,
for use in porting files from `Valued` to `ValuativeRel`. -/
instance (priority := low) {R : Type*} [CommRing R] [ValuativeRel R] [UniformSpace R]
    [IsUniformAddGroup R] [IsValuativeTopology R] :
    Valued R (ValueGroupWithZero R) where
  ¬´v¬ª := valuation R
  is_topological_valuation := mem_nhds_zero_iff

lemma v_eq_valuation {R : Type*} [CommRing R] [ValuativeRel R] [UniformSpace R]
    [IsUniformAddGroup R] [IsValuativeTopology R] :
    Valued.v = valuation R := rfl

theorem hasBasis_nhds (x : R) :
    (ùìù x).HasBasis (fun _ => True)
      fun Œ≥ : (ValueGroupWithZero R)À£ => { z | v (z - x) < Œ≥ } := by
  simp [Filter.hasBasis_iff, mem_nhds_iff']

/-- A variant of `hasBasis_nhds` where `¬∑ ‚â† 0` is unbundled. -/
lemma hasBasis_nhds' (x : R) :
    (ùìù x).HasBasis (¬∑ ‚â† 0) ({ y | v (y - x) < ¬∑ }) :=
  (hasBasis_nhds x).to_hasBasis (fun Œ≥ _ ‚Ü¶ ‚ü®Œ≥, by simp‚ü©)
    fun Œ≥ hŒ≥ ‚Ü¶ ‚ü®.mk0 Œ≥ hŒ≥, by simp‚ü©

variable (R) in
theorem hasBasis_nhds_zero :
    (ùìù (0 : R)).HasBasis (fun _ => True)
      fun Œ≥ : (ValueGroupWithZero R)À£ => { x | v x < Œ≥ } := by
  convert hasBasis_nhds (0 : R); rw [sub_zero]

variable (R) in
/-- A variant of `hasBasis_nhds_zero` where `¬∑ ‚â† 0` is unbundled. -/
lemma hasBasis_nhds_zero' :
    (ùìù 0).HasBasis (¬∑ ‚â† 0) ({ x | v x < ¬∑ }) :=
  (hasBasis_nhds_zero R).to_hasBasis (fun Œ≥ _ ‚Ü¶ ‚ü®Œ≥, by simp‚ü©)
    fun Œ≥ hŒ≥ ‚Ü¶ ‚ü®.mk0 Œ≥ hŒ≥, by simp‚ü©

@[deprecated (since := "2025-08-01")]
alias _root_.ValuativeTopology.hasBasis_nhds_zero := hasBasis_nhds_zero

variable (R) in
instance (priority := low) isTopologicalAddGroup : IsTopologicalAddGroup R := by
  have cts_add : ContinuousConstVAdd R R :=
    ‚ü®fun x ‚Ü¶ continuous_iff_continuousAt.2 fun z ‚Ü¶
      ((hasBasis_nhds z).tendsto_iff (hasBasis_nhds (x + z))).2 fun Œ≥ _ ‚Ü¶
        ‚ü®Œ≥, trivial, fun y hy ‚Ü¶ by simpa using hy‚ü©‚ü©
  have basis := hasBasis_nhds_zero R
  refine .of_comm_of_nhds_zero ?_ ?_ fun x‚ÇÄ ‚Ü¶ (map_eq_of_inverse (-x‚ÇÄ + ¬∑) ?_ ?_ ?_).symm
  ¬∑ exact (basis.prod_self.tendsto_iff basis).2 fun Œ≥ _ ‚Ü¶
      ‚ü®Œ≥, trivial, fun ‚ü®_, _‚ü© hx ‚Ü¶ (v).map_add_lt hx.left hx.right‚ü©
  ¬∑ exact (basis.tendsto_iff basis).2 fun Œ≥ _ ‚Ü¶ ‚ü®Œ≥, trivial, fun y hy ‚Ü¶ by simpa using hy‚ü©
  ¬∑ ext; simp
  ¬∑ simpa [ContinuousAt] using (cts_add.1 x‚ÇÄ).continuousAt (x := (0 : R))
  ¬∑ simpa [ContinuousAt] using (cts_add.1 (-x‚ÇÄ)).continuousAt (x := x‚ÇÄ)

instance (priority := low) : IsTopologicalRing R := by
  convert (valuation R).subgroups_basis.toRingFilterBasis.isTopologicalRing
  rw [TopologicalSpace.ext_iff_nhds]
  intro x
  ext s
  simp [(RingSubgroupsBasis.hasBasis_nhds _ _).mem_iff, mem_nhds_iff, Valuation.ltAddSubgroup,
    neg_add_eq_sub]

/-- A ring with a topological additive structure and a valuative relationship is
a uniform space made up of entourages of the form `{ (x, y) | v (y - x) < Œ≥ }`.
However, this is not a global instance to prevent timeouts in typeclass inference,
since otherwise, TC search for `UniformSpace R` will start exploring `IsValuativeTopology R`. -/
local instance : UniformSpace R := IsTopologicalAddGroup.toUniformSpace R

open Uniformity in
theorem hasBasis_uniformity : (ùì§ R).HasBasis (fun _ => True)
    fun Œ≥ : (ValueGroupWithZero R)À£ => { p : R √ó R | v (p.2 - p.1) < Œ≥ } := by
  rw [uniformity_eq_comap_nhds_zero']
  exact (hasBasis_nhds_zero R).comap _

instance (priority := low) : IsUniformAddGroup R := isUniformAddGroup_of_addCommGroup
instance (priority := low) : IsUltraUniformity R := by
  refine .mk_of_hasBasis hasBasis_uniformity ?_ ?_
  ¬∑ intros
    ext ‚ü®x, y‚ü©
    simp only [preimage_setOf_eq, Prod.snd_swap, Prod.fst_swap, mem_setOf_eq]
    rw [‚Üê Valuation.map_neg, neg_sub]
  ¬∑ intro _ _ _ _ _ h h'
    simp only [mem_setOf_eq] at h h' ‚ä¢
    have := Valuation.map_add_lt _ h h'
    ring_nf at this
    rwa [neg_add_eq_sub] at this

lemma uniformity_ball_lt_mem_uniformity {r : ValueGroupWithZero R} (hr : r ‚â† 0) :
    { p : R √ó R | v (p.2 - p.1) < r } ‚àà ùì§ R := by
  rw [hasBasis_uniformity.mem_iff]
  use Units.mk0 r hr
  simp

lemma uniformity_ball_le_mem_uniformity {r : ValueGroupWithZero R} (hr : r ‚â† 0) :
    { p : R √ó R | v (p.2 - p.1) ‚â§ r } ‚àà ùì§ R := by
  rw [hasBasis_uniformity.mem_iff]
  rcases le_or_gt 1 r with hr1 | hr1
  ¬∑ use 1
    simp only [Units.val_one, setOf_subset_setOf, Prod.forall, true_and]
    intro _ _ h
    exact hr1.trans' h.le
  ¬∑ lift r to (ValueGroupWithZero R)À£ using IsUnit.mk0 r hr
    use r ^ 2
    simp only [Units.val_pow_eq_pow_val, setOf_subset_setOf, Prod.forall, true_and]
    intro _ _ h
    refine (h.trans ?_).le
    exact pow_lt_self_of_lt_one‚ÇÄ (by simp) hr1 (by simp)

theorem isOpen_ball (r : ValueGroupWithZero R) :
    IsOpen {x | v x < r} := by
  rcases eq_or_ne r 0 with rfl | hr
  ¬∑ simp
  ¬∑ convert ((v).isTransitiveRel_uniformity_ball_lt r).isOpen_ball_of_mem_uniformity 0
      (uniformity_ball_lt_mem_uniformity hr)
    simp [UniformSpace.ball]

@[deprecated (since := "2025-08-01")]
alias _root_.ValuativeTopology.isOpen_ball := isOpen_ball

theorem isClosed_ball (r : ValueGroupWithZero R) :
    IsClosed {x | v x < r} := by
  rcases eq_or_ne r 0 with rfl | hr
  ¬∑ simp
  ¬∑ convert UniformSpace.isClosed_ball_of_isSymmetricRel_of_isTransitiveRel_of_mem_uniformity
      0 ((v).isSymmetricRel_uniformity_ball_lt r) ((v).isTransitiveRel_uniformity_ball_lt r)
      (uniformity_ball_lt_mem_uniformity hr)
    simp [UniformSpace.ball]

@[deprecated (since := "2025-08-01")]
alias _root_.ValuativeTopology.isClosed_ball := isClosed_ball

theorem isClopen_ball (r : ValueGroupWithZero R) :
    IsClopen {x | v x < r} :=
  ‚ü®isClosed_ball _, isOpen_ball _‚ü©

@[deprecated (since := "2025-08-01")]
alias _root_.ValuativeTopology.isClopen_ball := isClopen_ball

lemma isOpen_closedBall {r : ValueGroupWithZero R} (hr : r ‚â† 0) :
    IsOpen {x | v x ‚â§ r} := by
  convert ((v).isTransitiveRel_uniformity_ball_le r).isOpen_ball_of_mem_uniformity 0
    (uniformity_ball_le_mem_uniformity hr)
  simp [UniformSpace.ball]

@[deprecated (since := "2025-08-01")]
alias _root_.ValuativeTopology.isOpen_closedBall := isOpen_closedBall

theorem isClosed_closedBall (r : ValueGroupWithZero R) :
    IsClosed {x | v x ‚â§ r} := by
  rw [‚Üê isOpen_compl_iff, isOpen_iff_mem_nhds]
  intro x hx
  simp only [mem_compl_iff, mem_setOf_eq, not_le] at hx
  rw [mem_nhds_iff']
  have hx' : v x ‚â† 0 := ne_of_gt <| lt_of_le_of_lt zero_le' <| hx
  exact ‚ü®Units.mk0 _ hx', fun y hy hy' => ne_of_lt hy <| Valuation.map_sub_swap v x y ‚ñ∏
      (Valuation.map_sub_eq_of_lt_left _ <| lt_of_le_of_lt hy' hx)‚ü©

@[deprecated (since := "2025-08-01")]
alias _root_.ValuativeTopology.isClosed_closedBall := isClosed_closedBall

theorem isClopen_closedBall {r : ValueGroupWithZero R} (hr : r ‚â† 0) :
    IsClopen {x | v x ‚â§ r} :=
  ‚ü®isClosed_closedBall _, isOpen_closedBall hr‚ü©

@[deprecated (since := "2025-08-01")]
alias _root_.ValuativeTopology.isClopen_closedBall := isClopen_closedBall

theorem isClopen_sphere {r : ValueGroupWithZero R} (hr : r ‚â† 0) :
    IsClopen {x | v x = r} := by
  have h : {x : R | v x = r} = {x | v x ‚â§ r} \ {x | v x < r} := by
    ext x
    simp [‚Üê le_antisymm_iff]
  rw [h]
  exact IsClopen.diff (isClopen_closedBall hr) (isClopen_ball _)

@[deprecated (since := "2025-08-01")]
alias _root_.ValuativeTopology.isClopen_sphere := isClopen_sphere

lemma isOpen_sphere {r : ValueGroupWithZero R} (hr : r ‚â† 0) :
    IsOpen {x | v x = r} :=
  isClopen_sphere hr |>.isOpen

@[deprecated (since := "2025-08-01")]
alias _root_.ValuativeTopology.isOpen_sphere := isOpen_sphere

open WithZeroTopology in
lemma continuous_valuation : Continuous v := by
  simp only [continuous_iff_continuousAt, ContinuousAt]
  rintro x
  by_cases hx : v x = 0
  ¬∑ simpa [hx, (hasBasis_nhds _).tendsto_iff WithZeroTopology.hasBasis_nhds_zero,
      Valuation.map_sub_of_right_eq_zero _ hx] using fun i hi ‚Ü¶ ‚ü®.mk0 i hi, fun y ‚Ü¶ id‚ü©
  ¬∑ simpa [(hasBasis_nhds _).tendsto_iff (WithZeroTopology.hasBasis_nhds_of_ne_zero hx)]
      using ‚ü®.mk0 (v x) hx, fun _ ‚Ü¶ Valuation.map_eq_of_sub_lt _‚ü©

end IsValuativeTopology

namespace ValuativeRel

@[inherit_doc]
scoped notation "ùí™[" R "]" => Valuation.integer (valuation R)

@[inherit_doc]
scoped notation "ùìÇ[" K "]" => IsLocalRing.maximalIdeal ùí™[K]

@[inherit_doc]
scoped notation "ùìÄ[" K "]" => IsLocalRing.ResidueField ùí™[K]

end ValuativeRel
