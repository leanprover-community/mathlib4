/-
Copyright (c) 2025 Yakov Pechersky. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yakov Pechersky
-/

import Mathlib.Analysis.SpecificLimits.Normed
import Mathlib.Topology.Algebra.InfiniteSum.Nonarchimedean
import Mathlib.Topology.Algebra.Valued.LocallyCompact


/-!

# Adic expansions of elements of rings of integers of nonarchimedean fields.

We show that every element of a ring of integers of a nonarchimedean field can be uniquely
determined as an expansion in terms of a fixed uniformizer.

## Main definitions

* `AdicExpansion.Digits`: a preimage of the residue field which is used in the expansion.
* `AdicExpansion`: the expansion itself, implemented as a type synonym of functions from `‚Ñï`.

## TODO
* `AdicExpansion.evalAt`: the evaluation of the expansion at a given point.
* Show that the induced metric space has the same topology regardless of uniformizer chosen.
* `AdicExpansion.appr`: the expansion for a given element of the ring of integers, when over a
  complete discrete valuation ring.

-/

variable {K R : Type*} [NontriviallyNormedField K] [IsUltrametricDist K] [CommRing R]

open scoped Valued NormedField

namespace AdicExpansion

variable [IsLocalRing R]

section Digits

variable (R) in
/-- The digits used in an adic expansion, requiring that they are in bijection with the
residue field. Zero is required to be a digit to ensure uniqueness of the expansion. -/
structure Digits where
  /-- The underlying preimage of the residue field. -/
  (carrier : Set R)
  (zero : 0 ‚àà carrier)
  (bij : Set.BijOn (IsLocalRing.residue R) carrier (Set.univ))

instance : SetLike (Digits R) R := ‚ü®Digits.carrier, by rintro ‚ü®‚ü© ‚ü®‚ü©; simp‚ü©

noncomputable
instance (digits : Digits R) : Zero digits := ‚ü®0, digits.zero‚ü©

instance (digits : Digits R) : Nonempty digits := ‚ü®0‚ü©

@[simp, norm_cast]
lemma Digits.coe_zero (digits : Digits R) : ((0 : digits) : R) = 0 := rfl

lemma Digits.ext_iff {digits : Digits R} {x y : digits} : x = y ‚Üî (x : R) = y := by
  simp

@[simp]
lemma Digits.isUnit_iff {digits : Digits R} {x : digits} :
    IsUnit (x : R) ‚Üî x ‚â† 0 := by
  rw [iff_not_comm]
  constructor <;> intro h
  ¬∑ simp [h]
  rw [Digits.ext_iff, Digits.coe_zero]
  exact digits.bij.injOn x.prop digits.zero (by simpa using h)

lemma Digits.not_isUnit_dvd_iff {digits : Digits R} {œñ : R} (hœñ : ¬¨ IsUnit œñ) {x : digits} :
    œñ ‚à£ x ‚Üî x = 0 := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ by simp [h]‚ü©
  rw [‚Üê not_not (a := x = 0), ‚Üê ne_eq, ‚Üê isUnit_iff]
  exact not_isUnit_of_not_isUnit_dvd hœñ h

lemma Digits.coe_sub_eq_iff {digits : Digits R} {x y : digits} :
    (x : R) - y = 0 ‚Üî x = y := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ by simp [h]‚ü©
  rw [Digits.ext_iff, ‚Üê sub_eq_zero, h]

lemma Digits.not_isUnit_dvd_sub_iff {digits : Digits R} {œñ : R} (hœñ : ¬¨ IsUnit œñ)
    {x y : digits} :
    œñ ‚à£ x - y ‚Üî x = y := by
  constructor
  ¬∑ rintro ‚ü®c, hc‚ü©
    apply_fun IsLocalRing.residue R at hc
    ext
    refine digits.bij.injOn x.prop y.prop ?_
    rw [‚Üê sub_eq_zero, ‚Üê map_sub, hc, (IsLocalRing.residue_eq_zero_iff _).mpr]
    simp [hœñ]
  ¬∑ intro h
    simp [h]

end Digits

end AdicExpansion

open AdicExpansion

/-- A formal expansion of an element in the local ring, at the digits specified. Meant to
be evaluated using `AdicExpansion.evalAtUpto` and related definitions. -/
def AdicExpansion [IsLocalRing R] (d : Digits R) := ‚Ñï ‚Üí d

namespace AdicExpansion

variable [IsLocalRing R] {D : Digits R}

protected lemma ext_iff {f g : AdicExpansion D} :
    f = g ‚Üî ‚àÄ n, f n = g n :=
  funext_iff

@[ext]
protected lemma ext {f g : AdicExpansion D} (h : ‚àÄ n, f n = g n) : f = g :=
  funext h

noncomputable
instance : Zero (AdicExpansion D) := inferInstanceAs (Zero (‚Ñï ‚Üí D))

@[simp]
lemma zero_apply (n : ‚Ñï) : (0 : AdicExpansion D) n = 0 := rfl

/-- Evaluation of an `AdicExpansion` up to the indicated power, using the provided "base". -/
noncomputable
def evalAtUpto (œñ : R) (f : AdicExpansion D) (n : ‚Ñï) : R :=
  ‚àë i ‚àà Finset.range n, f i * œñ ^ i

@[simp]
lemma evalAtUpto_zero (œñ : R) (f : AdicExpansion D) :
    evalAtUpto œñ f 0 = 0 := by
  simp only [evalAtUpto, Finset.sum_range_zero, zero_mul]

@[simp]
lemma evalAtUpto_one (œñ : R) (f : AdicExpansion D) :
    evalAtUpto œñ f 1 = f 0 := by
  simp [evalAtUpto]

lemma evalAtUpto_add_one (œñ : R) (f : AdicExpansion D) (n : ‚Ñï) :
    evalAtUpto œñ f (n + 1) = evalAtUpto œñ f n + f n * œñ ^ n := by
  simp only [evalAtUpto, Finset.sum_range_succ]

@[simp]
lemma zero_evalAtUpto (œñ : R) (n : ‚Ñï) :
    evalAtUpto œñ (0 : ‚Ñï ‚Üí D) n = 0 := by
  induction n with
  | zero => simp
  | succ n ih => simp [evalAtUpto_add_one, ih]

@[simp]
lemma evalAtUpto_at_zero (f : AdicExpansion D) (n : ‚Ñï) :
    evalAtUpto 0 f (n + 1) = f 0 := by
  induction n with
  | zero => simp
  | succ n ih =>
    rw [evalAtUpto_add_one, ih]
    simp

lemma congr_of_eqOn (œñ : R) {f g : AdicExpansion D} {n : ‚Ñï}
    (h : ‚àÄ i < n, f i = g i) :
    evalAtUpto œñ f n = evalAtUpto œñ g n := by
  induction n with
  | zero => simp
  | succ n ih =>
    simp only [evalAtUpto_add_one]
    rw [ih (fun i hi ‚Ü¶ h i (Nat.lt_succ_of_lt hi)), h _ (by simp)]

lemma mul_evalAtUpto_of_add_one (œñ : R) (f : AdicExpansion D) (n : ‚Ñï) :
    œñ * evalAtUpto œñ (f ‚àò (¬∑ + 1)) n = evalAtUpto œñ f (n + 1) - f 0 := by
  induction n with
  | zero => simp
  | succ n ih =>
    simp only [evalAtUpto_add_one, Function.comp_apply, mul_add, ih]
    ring

lemma evalAtUpto_add_one' (œñ : R) (f : AdicExpansion D) (n : ‚Ñï) :
    evalAtUpto œñ f (n + 1) = f 0 + œñ * evalAtUpto œñ (f ‚àò (¬∑ + 1)) n := by
  rw [mul_evalAtUpto_of_add_one]
  ring

lemma dvd_evalAtUpto_iff_apply_zero {œñ : R} (hœñ : ¬¨ IsUnit œñ)
    {f : AdicExpansion D} {n : ‚Ñï} :
    œñ ‚à£ evalAtUpto œñ f (n + 1) ‚Üî f 0 = 0 := by
  constructor
  ¬∑ intro h
    induction n with
    | zero => simpa using not_isUnit_of_not_isUnit_dvd hœñ h
    | succ n ih =>
      obtain ‚ü®c, h‚ü© := h
      rw [evalAtUpto_add_one, eq_comm, ‚Üê sub_eq_iff_eq_add, pow_succ', mul_left_comm,
        ‚Üê mul_sub] at h
      exact ih ‚ü®_, h.symm‚ü©
  ¬∑ intro h
    refine ‚ü®evalAtUpto œñ (f ‚àò (¬∑ + 1)) n, ?_‚ü©
    simp [mul_evalAtUpto_of_add_one, h]

lemma evalAtUpto_eq_zero_iff [IsDomain R] {œñ : R} (hœñ : ¬¨ IsUnit œñ) (hn : œñ ‚â† 0)
    {f : AdicExpansion D} {n : ‚Ñï} :
    evalAtUpto œñ f (n + 1) = 0 ‚Üî ‚àÄ i < n + 1, f i = 0 := by
  constructor
  ¬∑ intro h
    induction n generalizing f with
    | zero => simpa [Digits.ext_iff] using h
    | succ n ih =>
      have h' := h
      rw [evalAtUpto_add_one, add_eq_zero_iff_eq_neg, ‚Üê neg_mul, mul_comm] at h'
      replace h' : œñ ^ (n + 1) ‚à£ evalAtUpto œñ f (n + 1) := by
        rw [h']
        exact ‚ü®_, rfl‚ü©
      replace h' : œñ ‚à£ evalAtUpto œñ f (n + 1) := dvd_trans (dvd_pow_self _ (by simp)) h'
      rw [dvd_evalAtUpto_iff_apply_zero hœñ, Digits.ext_iff, Digits.coe_zero] at h'
      rw [‚Üê sub_zero (evalAtUpto _ _ _), ‚Üê h', ‚Üê mul_evalAtUpto_of_add_one, h'] at h
      simp only [mul_eq_zero, hn, false_or] at h
      specialize ih h
      simp only [Function.comp_apply, Digits.ext_iff, Digits.coe_zero] at ih
      rintro (_|i) hi
      ¬∑ simp [Digits.ext_iff, h']
      ¬∑ simpa [Digits.ext_iff] using ih i (by linarith)
  ¬∑ intro h
    rw [‚Üê zero_evalAtUpto (D := D) œñ (n + 1)]
    refine congr_of_eqOn œñ ?_
    simpa using h

lemma pow_not_dvd_evalAtUpto [IsDomain R] {œñ : R} (hœñ : ¬¨ IsUnit œñ) (hn : œñ ‚â† 0)
    (f : AdicExpansion D)
    (n : ‚Ñï) (h : ‚àÉ i < n + 1, f i ‚â† 0) :
    ¬¨œñ ^ (n + 1) ‚à£ evalAtUpto œñ f (n + 1) := by
  contrapose! h
  rw [‚Üê evalAtUpto_eq_zero_iff hœñ hn]
  induction n generalizing f with
  | zero =>
    simp only [zero_add, pow_one, evalAtUpto_one] at h
    simpa [Digits.ext_iff] using not_isUnit_of_not_isUnit_dvd hœñ h
  | succ n ih =>
    rw [evalAtUpto_add_one, pow_succ] at h
    obtain ‚ü®c, h‚ü© := h
    rw [mul_comm, eq_comm, ‚Üê sub_eq_iff_eq_add, mul_assoc, ‚Üê mul_sub] at h
    specialize ih _ ‚ü®_, h.symm‚ü©
    simp only [ih, mul_eq_zero, ne_eq, AddLeftCancelMonoid.add_eq_zero, one_ne_zero, and_false,
      not_false_eq_true, pow_eq_zero_iff, hn, false_or, sub_eq_zero] at h
    replace h : f (n + 1) = 0 := by simpa using not_isUnit_of_not_isUnit_dvd hœñ ‚ü®_, h.symm‚ü©
    rw [evalAtUpto_add_one, ih, h, Digits.coe_zero]
    simp [hn]

lemma evalAtUpto_injOn [IsDomain R]
    {œñ : R} (hœñ : ¬¨ IsUnit œñ) (hœñ0 : œñ ‚â† 0) (n : ‚Ñï) (z : D) :
    Set.InjOn (evalAtUpto œñ ¬∑ n) {f : AdicExpansion D | ‚àÄ i ‚â• n, f i = z} := by
  induction n generalizing z with
  | zero =>
    intro f hf g hg _
    simp only [ge_iff_le, zero_le, forall_const, Set.mem_setOf_eq] at hf hg
    ext
    simp [hf, hg]
  | succ n ih =>
    intro f hf g hg h
    simp only [ge_iff_le, Set.mem_setOf_eq] at hf hg h
    apply_fun (¬∑ - (f 0 : R)) at h
    apply_fun (¬∑ - (g 0 : R)) at h
    rw [‚Üê mul_evalAtUpto_of_add_one, sub_sub, add_comm (f 0 : R), ‚Üê sub_sub,
      ‚Üê mul_evalAtUpto_of_add_one, sub_eq_sub_iff_sub_eq_sub, ‚Üê mul_sub] at h
    have h0 : g 0 = f 0 := by simp [‚Üê Digits.not_isUnit_dvd_sub_iff hœñ, ‚Üê h]
    simp only [h0, sub_self, mul_eq_zero, hœñ0, false_or, sub_eq_zero] at h
    specialize ih z (fun i hi ‚Ü¶ hf (i + 1) (by simpa using hi))
      (fun i hi ‚Ü¶ hg (i + 1) (by simpa using hi)) h
    ext (_|n)
    ¬∑ simp [h0]
    ¬∑ simp [congr_fun ih n]

section CompleteSpace

open Filter Topology

variable {D : Digits ùí™[K]}

local notation "O" => ùí™[K]

/-- In a complete ring of integers of a nonarchimedean normed field, an adic expansion can
be summed entirely, as a limit of the partial sums. -/
noncomputable
def evalAt (œñ : O) (f : AdicExpansion D) : O :=
  ‚àë' n, f n * œñ ^ n

@[simp]
lemma evalAt_zero (œñ : O) :
    evalAt œñ (0 : AdicExpansion D) = 0 := by
  simp [evalAt]

lemma cauchySeq_evalAtUpto {œñ : O} (hœñ : ¬¨ IsUnit œñ) (f : AdicExpansion D) :
    CauchySeq (evalAtUpto œñ f ¬∑) := by
  refine NonarchimedeanAddGroup.cauchySeq_of_tendsto_sub_nhds_zero ?_
  simp only [evalAtUpto_add_one, add_sub_cancel_left]
  have := tendsto_norm.comp (tendsto_pow_atTop_nhds_zero_of_norm_lt_one (x := œñ) ?_)
  ¬∑ simp only [norm_zero] at this
    refine squeeze_zero_norm ?_ this
    intro n
    dsimp
    refine (norm_mul_le _ _).trans ?_
    exact mul_le_of_le_one_left (norm_nonneg _) (Valued.integer.norm_le_one _)
  ¬∑ rw [Valued.integer.isUnit_iff_norm_eq_one] at hœñ
    exact lt_of_le_of_ne (Valued.integer.norm_le_one _) hœñ

lemma Digits.norm_eq_one_iff {x : D} :
    ‚Äñ(x : O)‚Äñ = 1 ‚Üî x ‚â† 0 := by
  rw [‚Üê Valued.integer.isUnit_iff_norm_eq_one, Digits.isUnit_iff]

@[simp]
lemma Digits.norm_coe_eq_one_iff {x : D} :
    ‚Äñ((x : O) : K)‚Äñ = 1 ‚Üî x ‚â† 0 := by
  simp [‚Üê Digits.norm_eq_one_iff]

lemma norm_evalAtUpto {œñ : O} (hœñ : ¬¨ IsUnit œñ) (f : AdicExpansion D) (n : ‚Ñï)
    [DecidablePred fun i : ‚Ñï ‚Ü¶ i < n + 1 ‚àß f i ‚â† 0]
    (h : ‚àÉ i < n + 1, f i ‚â† 0) :
    ‚ÄñevalAtUpto œñ f (n + 1)‚Äñ = ‚Äñœñ‚Äñ ^ (Nat.find h) := by
  rcases eq_or_ne œñ 0 with rfl|hœñ0
  ¬∑ simp
    by_cases H : Nat.find h = 0
    ¬∑ rw [H]
      rw [Nat.find_eq_zero] at H
      simpa using H.right
    ¬∑ rw [zero_pow_eq_zero.mpr H]
      rw [‚Üê ne_eq, ‚Üê Nat.pos_iff_ne_zero, Nat.lt_find_iff] at H
      push_neg at H
      simp [H _ le_rfl]
  induction n generalizing f with
  | zero =>
    rw [(Nat.find_eq_zero h).mpr] <;>
    simpa using h
  | succ n ih =>
    rw [evalAtUpto_add_one]
    generalize hk : Nat.find h = k
    rw [Nat.find_eq_iff] at hk
    simp_rw [Nat.lt_succ_iff] at h hk
    classical
    by_cases H : ‚àÉ i < n + 1, f i ‚â† 0
    ¬∑ specialize ih _ H
      have hn : ‚Äñœñ‚Äñ ^ (n + 1) < ‚Äñœñ‚Äñ ^ Nat.find H := by
        refine pow_lt_pow_right_of_lt_one‚ÇÄ ?_ ?_ ?_
        ¬∑ simp [hœñ0]
        ¬∑ exact lt_of_le_of_ne (Valued.integer.norm_le_one œñ)
            (mt Valued.integer.isUnit_iff_norm_eq_one.mpr hœñ)
        ¬∑ exact (Nat.find_spec H).left
      have hf : ‚Äñ‚Üë(f (n + 1)) * œñ ^ (n + 1)‚Äñ < ‚ÄñevalAtUpto œñ f (n + 1)‚Äñ := by
        rw [ih]
        refine (norm_mul_le _ _).trans_lt ?_
        rw [mul_comm]
        exact mul_lt_of_lt_of_le_one_of_nonneg (by simpa using hn)
          (Valued.integer.norm_le_one _) (norm_nonneg _)
      rw [IsUltrametricDist.norm_add_eq_max_of_norm_ne_norm, max_eq_left hf.le, ih]
      ¬∑ congr
        rw [Nat.find_eq_iff]
        push_neg at hk ‚ä¢
        rcases hk.left.left.eq_or_lt with rfl|hk'
        ¬∑ obtain ‚ü®i, hi, hi'‚ü© := H
          exact absurd (hk.right i hi hi.le) hi'
        ¬∑ exact ‚ü®‚ü®hk', hk.left.right‚ü©, fun m hm hm' ‚Ü¶ hk.right m hm hm'.le‚ü©
      ¬∑ exact hf.ne'
    ¬∑ push_neg at H
      rw [(evalAtUpto_eq_zero_iff hœñ hœñ0).mpr H]
      rcases hk.left.left.eq_or_lt with rfl|hk'
      ¬∑ simp [Digits.norm_coe_eq_one_iff.mpr hk.left.right]
      ¬∑ exact absurd (H _ hk') hk.left.right

variable [CompleteSpace ùí™[K]] {D : Digits ùí™[K]}

lemma summable_evalAt {œñ : O} (hœñ : ¬¨ IsUnit œñ) (f : ‚Ñï ‚Üí O) :
    Summable (fun n ‚Ü¶ f n * œñ ^ n) := by
  refine NonarchimedeanAddGroup.summable_of_tendsto_cofinite_zero ?_
  rw [Nat.cofinite_eq_atTop]
  have := tendsto_norm.comp (tendsto_pow_atTop_nhds_zero_of_norm_lt_one (x := œñ) ?_)
  ¬∑ simp only [norm_zero] at this
    refine squeeze_zero_norm ?_ this
    intro n
    dsimp
    refine (norm_mul_le _ _).trans ?_
    exact mul_le_of_le_one_left (norm_nonneg _) (Valued.integer.norm_le_one _)
  ¬∑ rw [Valued.integer.isUnit_iff_norm_eq_one] at hœñ
    exact lt_of_le_of_ne (Valued.integer.norm_le_one _) hœñ

lemma tendsto_evalAtUpto_nhds_evalAt {œñ : O} (hœñ : ¬¨ IsUnit œñ) (f : AdicExpansion D) :
    Tendsto (evalAtUpto œñ f ¬∑) atTop (ùìù (evalAt œñ f)) := by
  simpa [evalAt, evalAtUpto] using (summable_evalAt hœñ ((‚Üë) ‚àò f)).tendsto_sum_tsum_nat

lemma norm_evalAt {œñ : O} (hœñ : ¬¨ IsUnit œñ) (f : AdicExpansion D) :
    ‚ÄñevalAt œñ f‚Äñ = ‚®Ü n, ‚Äñf n * œñ ^ n‚Äñ := by
  classical
  rcases eq_or_ne f 0 with rfl|H
  ¬∑ simp
  simp only [ne_eq, AdicExpansion.ext_iff, zero_apply, not_forall] at H
  trans ‚Äñœñ‚Äñ ^ (Nat.find H)
  ¬∑ apply tendsto_nhds_unique (tendsto_norm.comp (tendsto_evalAtUpto_nhds_evalAt hœñ f))
    rw [NormedAddCommGroup.tendsto_atTop]
    intro Œµ hŒµ
    refine ‚ü®Nat.find H + 1, fun n hn ‚Ü¶ hŒµ.trans_le' ?_‚ü©
    simp only [Function.comp_apply, Real.norm_eq_abs, abs_nonpos_iff, sub_eq_zero]
    rcases n with (_|n)
    ¬∑ simp at hn
    rw [Nat.succ_le_iff] at hn
    have : ‚àÉ i < n + 1, f i ‚â† 0 := ‚ü®Nat.find H, hn, Nat.find_spec H‚ü©
    rw [norm_evalAtUpto hœñ f n this]
    congr 1
    rw [Nat.find_eq_iff]
    refine ‚ü®‚ü®hn, Nat.find_spec H‚ü©, fun m hm ‚Ü¶ ?_‚ü©
    push_neg
    intro
    simpa using Nat.find_min H hm
  rw [eq_comm]
  apply ciSup_eq_of_forall_le_of_forall_lt_exists_gt
  ¬∑ intro i
    by_cases h : f i = 0
    ¬∑ simp [h]
    ¬∑ simp only [AddSubgroupClass.coe_norm, Subring.coe_mul, SubmonoidClass.coe_pow, norm_mul,
      Digits.norm_coe_eq_one_iff.mpr h, norm_pow, one_mul, ne_eq]
      refine pow_le_pow_of_le_one (norm_nonneg _) (Valued.integer.norm_le_one _) ?_
      rw [Nat.find_le_iff]
      exact ‚ü®_, le_rfl, h‚ü©
  ¬∑ intro Œµ hŒµ
    refine ‚ü®Nat.find H, hŒµ.trans_le ?_‚ü©
    simp [Digits.norm_coe_eq_one_iff.mpr (Nat.find_spec H)]

lemma evalAt_eq_zero_iff {œñ : O} (hœñ : ¬¨ IsUnit œñ) {f : AdicExpansion D} :
    evalAt œñ f = 0 ‚Üî (œñ = 0 ‚àß f 0 = 0) ‚à® f = 0 := by
  constructor
  ¬∑ intro h
    apply_fun (‚Äñ¬∑‚Äñ) at h
    rw [norm_evalAt hœñ, norm_zero] at h
    rcases eq_or_ne f 0 with rfl|hf
    ¬∑ simp
    rw [Function.ne_iff] at hf
    obtain ‚ü®i, hi‚ü© := hf
    simp only [AdicExpansion.ext_iff, Pi.zero_apply, Digits.ext_iff, Digits.coe_zero, ne_eq,
      zero_apply] at hi
    have hb : BddAbove (Set.range fun n ‚Ü¶ ‚Äñf n * œñ ^ n‚Äñ) := by
      refine ‚ü®1, ?_‚ü©
      rw [mem_upperBounds]
      simp [- norm_mul, - AddSubgroupClass.coe_norm, Valued.integer.norm_le_one]
    have := h.le
    rw [ciSup_le_iff hb] at this
    specialize this i
    replace this := le_antisymm this (norm_nonneg _)
    simp only [AddSubgroupClass.coe_norm, Subring.coe_mul, SubmonoidClass.coe_pow, norm_mul,
      norm_pow, mul_eq_zero, norm_eq_zero, ZeroMemClass.coe_eq_zero, hi, pow_eq_zero_iff', ne_eq,
      false_or] at this
    refine Or.inl ‚ü®this.left, ?_‚ü©
    simpa [Digits.ext_iff] using le_antisymm ((le_ciSup hb 0).trans h.le) (norm_nonneg _)
  ¬∑ rintro (h|h) <;>
    simp [evalAt, h, tsum_eq_zero_add (summable_evalAt (not_isUnit_zero) (fun n ‚Ü¶ (f n : O)))]

lemma quotient_mk_evalAt_eq_quotient_mk_evalAtUpto {œñ : O}
    (n : ‚Ñï) (f : AdicExpansion D) :
    Ideal.Quotient.mk (Ideal.span {œñ ^ n}) (evalAt œñ f) =
    Ideal.Quotient.mk (Ideal.span {œñ ^ n}) (evalAtUpto œñ f n) := by
  by_cases hu : IsUnit œñ
  ¬∑ rw [Ideal.span_singleton_eq_top.mpr (hu.pow n)]
    exact Subsingleton.elim _ _
  rw [evalAt, ‚Üê sum_add_tsum_nat_add n (summable_evalAt hu _), ‚Üê evalAtUpto]
  simp_rw [pow_add œñ _ n, ‚Üê mul_assoc, (summable_evalAt hu _).tsum_mul_right (a := œñ ^ n),
    RingHom.map_add, RingHom.map_mul]
  simp

lemma injective_evalAt {œñ : O} (hœñ : Irreducible œñ) :
    Function.Injective (evalAt (D := D) œñ) := by
  intro f g h
  contrapose! h
  intro H
  rw [Function.ne_iff] at h
  classical
  let k := Nat.find h
  have hkm : ‚àÄ m < k, f m = g m := fun m hm ‚Ü¶ by simpa using Nat.find_min h hm
  have hk := Nat.find_spec h
  apply_fun Ideal.Quotient.mk (Ideal.span {œñ ^ (k + 1)}) at H
  rw [quotient_mk_evalAt_eq_quotient_mk_evalAtUpto,
    quotient_mk_evalAt_eq_quotient_mk_evalAtUpto, evalAtUpto_add_one, evalAtUpto_add_one,
    congr_of_eqOn _ hkm, RingHom.map_add, RingHom.map_add, add_right_inj, ‚Üê sub_eq_zero,
    ‚Üê RingHom.map_sub, ‚Üê sub_mul, Ideal.Quotient.eq_zero_iff_dvd] at H
  suffices œñ ‚à£ f k - g k by
    rw [Digits.not_isUnit_dvd_sub_iff hœñ.not_unit] at this
    exact absurd this hk
  rw [pow_dvd_iff_le_emultiplicity, emultiplicity_mul hœñ.prime,
    emultiplicity_pow_self hœñ.ne_zero hœñ.not_unit, Nat.cast_add, Nat.cast_one, add_comm,
    (ENat.addLECancellable_of_ne_top (ENat.coe_ne_top _)).add_le_add_iff_right] at H
  exact dvd_of_emultiplicity_pos (H.trans_lt' zero_lt_one)

end CompleteSpace

end AdicExpansion
