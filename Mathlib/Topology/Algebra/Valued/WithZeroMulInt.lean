/-
Copyright (c) 2025 Salvatore Mercuri. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Salvatore Mercuri
-/
import Mathlib.GroupTheory.ArchimedeanDensely
import Mathlib.Topology.Algebra.Valued.ValuationTopology

/-!
# Topological results for integer-valued rings

This file contains topological results for valuation rings taking values in the
multiplicative integers with zero adjoined. These are useful for cases where there
is a `Valued R ‚Ñ§‚Çò‚ÇÄ` instance but no canonical base with which to embed this into
`NNReal`.
-/

open Filter WithZero Set
open scoped Topology

namespace Valued
variable {R Œì‚ÇÄ : Type*} [Ring R] [LinearOrderedCommGroupWithZero Œì‚ÇÄ]

-- TODO: use ValuativeRel after #26833
lemma tendsto_zero_pow_of_v_lt_one [MulArchimedean Œì‚ÇÄ] [Valued R Œì‚ÇÄ] {x : R} (hx : v x < 1) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ x ^ n) atTop (ùìù 0) := by
  simp only [(hasBasis_nhds_zero _ _).tendsto_right_iff, mem_setOf_eq, map_pow, eventually_atTop,
    forall_const]
  intro y
  obtain ‚ü®n, hn‚ü© := exists_pow_lt‚ÇÄ hx y
  refine ‚ü®n, fun m hm ‚Ü¶ ?_‚ü©
  refine hn.trans_le' ?_
  exact pow_le_pow_right_of_le_one' hx.le hm

/-- In a `‚Ñ§·µê‚Å∞`-valued ring, powers of `x` tend to zero if `v x ‚â§ exp (-1)`. -/
lemma tendsto_zero_pow_of_le_exp_neg_one [Valued R ‚Ñ§·µê‚Å∞] {x : R} (hx : v x ‚â§ exp (-1)) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ x ^ n) atTop (ùìù 0) := by
  refine tendsto_zero_pow_of_v_lt_one (hx.trans_lt ?_)
  rw [‚Üê exp_zero, exp_lt_exp]
  norm_num

lemma exists_pow_lt_of_le_exp_neg_one [Valued R ‚Ñ§·µê‚Å∞] {x : R} (hx : v x ‚â§ exp (-1)) (Œ≥ : ‚Ñ§·µê‚Å∞À£) :
    ‚àÉ n, v x ^ n < Œ≥ := by
  refine exists_pow_lt‚ÇÄ (hx.trans_lt ?_) _
  rw [‚Üê exp_zero, exp_lt_exp]
  norm_num

variable {K : Type*} [Field K] [Valued K ‚Ñ§‚Çò‚ÇÄ]

theorem irreducible_valuation_lt_one {œñ : ùí™[K]} (h : Irreducible œñ) : v œñ.1 < 1 :=
  lt_of_le_of_ne (Valuation.mem_integer_iff _ _ |>.1 œñ.2) <|
    mt (Valuation.integer.integers _).isUnit_iff_valuation_eq_one.2 h.not_isUnit

theorem irreducible_valuation_le_ofAdd_neg_one {œñ : ùí™[K]} (h : Irreducible œñ) :
    v œñ.1 ‚â§ ofAdd (-1 : ‚Ñ§) := by
  have := (lt_ofAdd_iff (show v œñ.1 ‚â† 0 by simp [h.ne_zero])).1 (irreducible_valuation_lt_one h)
  rw [le_ofAdd_iff (show v œñ.1 ‚â† 0 by simp [h.ne_zero])]
  omega

theorem mem_maximalIdeal_pow_valuation [IsDiscreteValuationRing ùí™[K]]
    {x : ùí™[K]} {n : ‚Ñï} (hx : x ‚àà ùìÇ[K] ^ n) {œñ : ùí™[K]} (h : Irreducible œñ) :
    v x.val ‚â§ v œñ.1 ^ n := by
  by_cases hx‚ÇÄ : x = 0
  ¬∑ simp [hx‚ÇÄ]
  ¬∑ simp_rw [h.maximalIdeal_eq, Ideal.span_singleton_pow, Ideal.mem_span_singleton] at hx
    let ‚ü®y, hy‚ü© := hx
    simpa [hy] using le_trans (mul_le_of_le_one_right' <| (Valuation.mem_integer_iff _ _).1 y.2)
      le_rfl

/-- The ring of integers `ùí™[K]` of a `‚Ñ§‚Çò‚ÇÄ`-valued field `K` with finite residue
field has a finite covering by elements of the basis of uniformity of `K`, whenever
`ùí™[K]` is a discrete valuation ring. -/
theorem finite_cover_of_uniformity_basis [IsDiscreteValuationRing ùí™[K]] {Œ≥ : ‚Ñ§‚Çò‚ÇÄÀ£}
    (h : Finite ùìÄ[K]) :
    ‚àÉ t : Set K, Set.Finite t ‚àß
      (ùí™[K]).carrier ‚äÜ ‚ãÉ y ‚àà t, { x | (x, y) ‚àà { p | v (p.2 - p.1) < Œ≥.val } } := by
  classical
  let ‚ü®œñ, hœñ‚ü© := IsDiscreteValuationRing.exists_irreducible ùí™[K]
  let ‚ü®m, hm‚ü© := exists_pow_lt_of_le_neg_one (irreducible_valuation_le_ofAdd_neg_one hœñ) Œ≥
  have := integer.finite_quotient_maximalIdeal_pow_of_finite_residueField h m
  have h := Fintype.ofFinite (ùí™[K] ‚ß∏ ùìÇ[K] ^ m)
  let T := Subtype.val '' (h.elems.image Quotient.out).toSet
  refine ‚ü®T, (Set.Finite.image _ (Finset.finite_toSet _)), fun x hx => ?_‚ü©
  simp only [Set.mem_iUnion]
  let y := (Ideal.Quotient.mk (ùìÇ[K] ^ m) ‚ü®x, hx‚ü©).out
  exact ‚ü®y, Set.mem_image_of_mem _ <| Finset.mem_image_of_mem _ (h.complete _),
    lt_of_le_of_lt (mem_maximalIdeal_pow_valuation (Ideal.Quotient.out_sub _ _) hœñ) hm‚ü©

variable (K)

/-- The ring of integers `ùí™[K]` of a complete `‚Ñ§‚Çò‚ÇÄ`-valued field `K` with finite residue
field is compact, whenever `ùí™[K]` is a discrete valuation ring. -/
theorem integer_compactSpace [CompleteSpace K] [IsDiscreteValuationRing ùí™[K]] (h : Finite ùìÄ[K]) :
    CompactSpace ùí™[K] where
   isCompact_univ :=
     isCompact_iff_isCompact_univ.1 <|
       isCompact_iff_totallyBounded_isComplete.2
         ‚ü®(hasBasis_uniformity _ _).totallyBounded_iff.2 <| fun _ _ =>
           finite_cover_of_uniformity_basis h, (integer_isClosed K).isComplete‚ü©

end Valued.WithZeroMulInt
