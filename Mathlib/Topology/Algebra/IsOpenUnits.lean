/-
Copyright (c) 2025 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.RingTheory.Jacobson.Ideal
import Mathlib.Topology.Algebra.GroupWithZero
import Mathlib.Topology.Algebra.Nonarchimedean.AdicTopology

/-!

# Topological monoids with open units

We say that a topological monoid `M` has open units (`IsOpenUnits`) if `MÀ£` is open in `M` and
has the subspace topology (i.e. inverse is continuous).

Typical examples include monoids with discrete topology, topological groups (or fields),
and rings `R` equipped with the `I`-adic topology where `I ‚â§ J(R)` (`IsOpenUnits.of_isAdic`).

A non-example is `ùî∏‚Çñ`, because the topology on ideles is not the induced topology from adeles.

This condition is necessary and sufficient for `U(R)` to be an open subspace of `X(R)`
for all affine scheme `X` over `R` and all affine open subscheme `U ‚äÜ X`.
-/

open Topology

/--
We say that a topological monoid `M` has open units if `MÀ£` is open in `M` and
has the subspace topology (i.e. inverse is continuous).

Typical examples include monoids with discrete topology, topological groups (or fields),
and rings `R` equipped with the `I`-adic topology where `I ‚â§ J(R)`.
-/
@[mk_iff]
class IsOpenUnits (M : Type*) [Monoid M] [TopologicalSpace M] : Prop where
  isOpenEmbedding_unitsVal : IsOpenEmbedding (Units.val : MÀ£ ‚Üí M)

instance (priority := 900) (M : Type*) [Monoid M] [TopologicalSpace M] [DiscreteTopology M] :
    IsOpenUnits M := ‚ü®.of_continuous_injective_isOpenMap Units.continuous_val Units.ext
      fun _ _ ‚Ü¶ isOpen_discrete _‚ü©

instance (priority := 900) {M : Type*} [Group M] [TopologicalSpace M] [ContinuousInv M] :
    IsOpenUnits M where
  isOpenEmbedding_unitsVal := toUnits_homeomorph.symm.isOpenEmbedding

instance (priority := 900) {M : Type*} [GroupWithZero M]
    [TopologicalSpace M] [HasContinuousInv‚ÇÄ M] [T1Space M] : IsOpenUnits M where
  isOpenEmbedding_unitsVal := by
    refine ‚ü®Units.isEmbedding_val‚ÇÄ, ?_‚ü©
    convert (isClosed_singleton (X := M) (x := 0)).isOpen_compl
    ext
    simp only [Set.mem_range, Set.mem_compl_iff, Set.mem_singleton_iff]
    exact isUnit_iff_ne_zero

/-- If `R` has the `I`-adic topology where `I` is contained in the jacobson radical
(e.g. when `R` is complete or local), then `RÀ£` is an open subspace of `R`. -/
lemma IsOpenUnits.of_isAdic {R : Type*} [CommRing R] [TopologicalSpace R] [TopologicalRing R]
    {I : Ideal R}
    (hR : IsAdic I) (hI : I ‚â§ Ideal.jacobson ‚ä•) :
    IsOpenUnits R := by
  refine ‚ü®.of_continuous_injective_isOpenMap Units.continuous_val Units.ext ?_‚ü©
  refine (TopologicalGroup.isOpenMap_iff_nhds_one (f := Units.coeHom R)).mpr ?_
  rw [nhds_induced, nhds_prod_eq]
  simp only [Units.embedProduct_apply, Units.val_one, inv_one, MulOpposite.op_one,
    Prod.mk_one_one, Prod.fst_one, Prod.snd_one]
  intro s hs
  have H := hR ‚ñ∏ Ideal.hasBasis_nhds_adic I 1
  have := (H.prod (H.comap MulOpposite.opHomeomorph.symm))
  simp only [Homeomorph.comap_nhds_eq, Homeomorph.symm_symm, MulOpposite.opHomeomorph_apply,
    MulOpposite.op_one, and_self, Set.image_add_left] at this
  have : ‚àÉ n‚ÇÅ n‚ÇÇ, ‚àÄ (u : RÀ£), (-1 + u : R) ‚àà I ^ n‚ÇÅ ‚Üí (-1 + u‚Åª¬π : R) ‚àà I ^ n‚ÇÇ ‚Üí ‚Üëu ‚àà s := by
    simpa [Set.subset_def, forall_comm (Œ≤ := RÀ£), forall_comm (Œ≤ := _ = _)] using
      (((this.comap (Units.embedProduct R)).map (Units.coeHom R)).1 _).mp hs
  obtain ‚ü®n, hn, hn'‚ü© : ‚àÉ n ‚â† 0, ‚àÄ (u : RÀ£), (-1 + u : R) ‚àà I ^ n ‚Üí
      (-1 + u‚Åª¬π : R) ‚àà I ^ n ‚Üí ‚Üëu ‚àà s := by
    obtain ‚ü®n‚ÇÅ, n‚ÇÇ, H‚ü© := this
    exact ‚ü®n‚ÇÅ ‚äî n‚ÇÇ ‚äî 1, by simp, fun u h‚ÇÅ h‚ÇÇ ‚Ü¶ H u
      (Ideal.pow_le_pow_right (by simp) h‚ÇÅ)
      (Ideal.pow_le_pow_right (by simp) h‚ÇÇ)‚ü©
  rw [H.1]
  refine ‚ü®n, trivial, ?_‚ü©
  rintro _ ‚ü®x, hx, rfl‚ü©
  have := Ideal.mem_jacobson_bot.mp (hI (Ideal.pow_le_self hn hx)) 1
  rw [mul_one, add_comm] at this
  refine hn' this.unit (by simpa using hx) ?_
  have : -1 + ‚Üëthis.unit‚Åª¬π = -this.unit‚Åª¬π * x := by
    trans this.unit‚Åª¬π * (-(1 + x) + 1)
    ¬∑ rw [mul_add, mul_neg, IsUnit.val_inv_mul, mul_one]
    ¬∑ simp
  rw [this]
  exact Ideal.mul_mem_left _ _ hx
