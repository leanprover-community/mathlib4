/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import Mathlib.Topology.Algebra.Group.Basic
import Mathlib.Topology.UniformSpace.Basic

/-!
# Uniform structure on topological groups

This file defines uniform groups and its additive counterpart. These typeclasses should be
preferred over using `[TopologicalSpace Œ±] [TopologicalGroup Œ±]` since every topological
group naturally induces a uniform structure.

## Main declarations
* `UniformGroup` and `UniformAddGroup`: Multiplicative and additive uniform groups,
  i.e., groups with uniformly continuous `(*)` and `(‚Åª¬π)` / `(+)` and `(-)`.

## Main results

* `TopologicalAddGroup.toUniformSpace` and `comm_topologicalAddGroup_is_uniform` can be used
  to construct a canonical uniformity for a topological add group.

See `Mathlib.Topology.Algebra.UniformGroup.Basic` for further results.
-/

assert_not_exists Cauchy

noncomputable section

open Uniformity Topology Filter Pointwise

section UniformGroup

open Filter Set

variable {Œ± : Type*} {Œ≤ : Type*}

/-- A uniform group is a group in which multiplication and inversion are uniformly continuous. -/
class UniformGroup (Œ± : Type*) [UniformSpace Œ±] [Group Œ±] : Prop where
  uniformContinuous_div : UniformContinuous fun p : Œ± √ó Œ± => p.1 / p.2

/-- A uniform additive group is an additive group in which addition
  and negation are uniformly continuous. -/
class UniformAddGroup (Œ± : Type*) [UniformSpace Œ±] [AddGroup Œ±] : Prop where
  uniformContinuous_sub : UniformContinuous fun p : Œ± √ó Œ± => p.1 - p.2

attribute [to_additive] UniformGroup

@[to_additive]
theorem UniformGroup.mk' {Œ±} [UniformSpace Œ±] [Group Œ±]
    (h‚ÇÅ : UniformContinuous fun p : Œ± √ó Œ± => p.1 * p.2) (h‚ÇÇ : UniformContinuous fun p : Œ± => p‚Åª¬π) :
    UniformGroup Œ± :=
  ‚ü®by simpa only [div_eq_mul_inv] using
    h‚ÇÅ.comp (uniformContinuous_fst.prod_mk (h‚ÇÇ.comp uniformContinuous_snd))‚ü©

variable [UniformSpace Œ±] [Group Œ±] [UniformGroup Œ±]

@[to_additive]
theorem uniformContinuous_div : UniformContinuous fun p : Œ± √ó Œ± => p.1 / p.2 :=
  UniformGroup.uniformContinuous_div

@[to_additive]
theorem UniformContinuous.div [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (hg : UniformContinuous g) : UniformContinuous fun x => f x / g x :=
  uniformContinuous_div.comp (hf.prod_mk hg)

@[to_additive]
theorem UniformContinuous.inv [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f) :
    UniformContinuous fun x => (f x)‚Åª¬π := by
  have : UniformContinuous fun x => 1 / f x := uniformContinuous_const.div hf
  simp_all

@[to_additive]
theorem uniformContinuous_inv : UniformContinuous fun x : Œ± => x‚Åª¬π :=
  uniformContinuous_id.inv

@[to_additive]
theorem UniformContinuous.mul [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (hg : UniformContinuous g) : UniformContinuous fun x => f x * g x := by
  have : UniformContinuous fun x => f x / (g x)‚Åª¬π := hf.div hg.inv
  simp_all

@[to_additive]
theorem uniformContinuous_mul : UniformContinuous fun p : Œ± √ó Œ± => p.1 * p.2 :=
  uniformContinuous_fst.mul uniformContinuous_snd

@[to_additive]
theorem UniformContinuous.mul_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (a : Œ±) : UniformContinuous fun x ‚Ü¶ f x * a :=
  hf.mul uniformContinuous_const

@[to_additive]
theorem UniformContinuous.const_mul [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (a : Œ±) : UniformContinuous fun x ‚Ü¶ a * f x :=
  uniformContinuous_const.mul hf

@[to_additive]
theorem uniformContinuous_mul_left (a : Œ±) : UniformContinuous fun b : Œ± => a * b :=
  uniformContinuous_id.const_mul _

@[to_additive]
theorem uniformContinuous_mul_right (a : Œ±) : UniformContinuous fun b : Œ± => b * a :=
  uniformContinuous_id.mul_const _

@[to_additive]
theorem UniformContinuous.div_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (a : Œ±) : UniformContinuous fun x ‚Ü¶ f x / a :=
  hf.div uniformContinuous_const

@[to_additive]
theorem uniformContinuous_div_const (a : Œ±) : UniformContinuous fun b : Œ± => b / a :=
  uniformContinuous_id.div_const _

@[to_additive UniformContinuous.const_nsmul]
theorem UniformContinuous.pow_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f) :
    ‚àÄ n : ‚Ñï, UniformContinuous fun x => f x ^ n
  | 0 => by
    simp_rw [pow_zero]
    exact uniformContinuous_const
  | n + 1 => by
    simp_rw [pow_succ']
    exact hf.mul (hf.pow_const n)

@[to_additive uniformContinuous_const_nsmul]
theorem uniformContinuous_pow_const (n : ‚Ñï) : UniformContinuous fun x : Œ± => x ^ n :=
  uniformContinuous_id.pow_const n

@[to_additive UniformContinuous.const_zsmul]
theorem UniformContinuous.zpow_const [UniformSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f) :
    ‚àÄ n : ‚Ñ§, UniformContinuous fun x => f x ^ n
  | (n : ‚Ñï) => by
    simp_rw [zpow_natCast]
    exact hf.pow_const _
  | Int.negSucc n => by
    simp_rw [zpow_negSucc]
    exact (hf.pow_const _).inv

@[to_additive uniformContinuous_const_zsmul]
theorem uniformContinuous_zpow_const (n : ‚Ñ§) : UniformContinuous fun x : Œ± => x ^ n :=
  uniformContinuous_id.zpow_const n

@[to_additive]
instance (priority := 10) UniformGroup.to_topologicalGroup : TopologicalGroup Œ± where
  continuous_mul := uniformContinuous_mul.continuous
  continuous_inv := uniformContinuous_inv.continuous

@[to_additive]
instance [UniformSpace Œ≤] [Group Œ≤] [UniformGroup Œ≤] : UniformGroup (Œ± √ó Œ≤) :=
  ‚ü®((uniformContinuous_fst.comp uniformContinuous_fst).div
          (uniformContinuous_fst.comp uniformContinuous_snd)).prod_mk
      ((uniformContinuous_snd.comp uniformContinuous_fst).div
        (uniformContinuous_snd.comp uniformContinuous_snd))‚ü©

@[to_additive]
theorem uniformity_translate_mul (a : Œ±) : ((ùì§ Œ±).map fun x : Œ± √ó Œ± => (x.1 * a, x.2 * a)) = ùì§ Œ± :=
  le_antisymm (uniformContinuous_id.mul uniformContinuous_const)
    (calc
      ùì§ Œ± =
          ((ùì§ Œ±).map fun x : Œ± √ó Œ± => (x.1 * a‚Åª¬π, x.2 * a‚Åª¬π)).map fun x : Œ± √ó Œ± =>
            (x.1 * a, x.2 * a) := by simp [Filter.map_map, Function.comp_def]
      _ ‚â§ (ùì§ Œ±).map fun x : Œ± √ó Œ± => (x.1 * a, x.2 * a) :=
        Filter.map_mono (uniformContinuous_id.mul uniformContinuous_const)
      )

namespace MulOpposite

@[to_additive]
instance : UniformGroup Œ±·µê·µí·µñ :=
  ‚ü®uniformContinuous_op.comp
      ((uniformContinuous_unop.comp uniformContinuous_snd).inv.mul <|
        uniformContinuous_unop.comp uniformContinuous_fst)‚ü©

end MulOpposite

section LatticeOps

variable [Group Œ≤]

@[to_additive]
theorem uniformGroup_sInf {us : Set (UniformSpace Œ≤)} (h : ‚àÄ u ‚àà us, @UniformGroup Œ≤ u _) :
    @UniformGroup Œ≤ (sInf us) _ :=
  -- Porting note: {_} does not find `sInf us` instance, see `continuousSMul_sInf`
  @UniformGroup.mk Œ≤ (_) _ <|
    uniformContinuous_sInf_rng.mpr fun u hu =>
      uniformContinuous_sInf_dom‚ÇÇ hu hu (@UniformGroup.uniformContinuous_div Œ≤ u _ (h u hu))

@[to_additive]
theorem uniformGroup_iInf {Œπ : Sort*} {us' : Œπ ‚Üí UniformSpace Œ≤}
    (h' : ‚àÄ i, @UniformGroup Œ≤ (us' i) _) : @UniformGroup Œ≤ (‚®Ö i, us' i) _ := by
  rw [‚Üê sInf_range]
  exact uniformGroup_sInf (Set.forall_mem_range.mpr h')

@[to_additive]
theorem uniformGroup_inf {u‚ÇÅ u‚ÇÇ : UniformSpace Œ≤} (h‚ÇÅ : @UniformGroup Œ≤ u‚ÇÅ _)
    (h‚ÇÇ : @UniformGroup Œ≤ u‚ÇÇ _) : @UniformGroup Œ≤ (u‚ÇÅ ‚äì u‚ÇÇ) _ := by
  rw [inf_eq_iInf]
  refine uniformGroup_iInf fun b => ?_
  cases b <;> assumption

end LatticeOps

section

variable (Œ±)

@[to_additive]
theorem uniformity_eq_comap_nhds_one : ùì§ Œ± = comap (fun x : Œ± √ó Œ± => x.2 / x.1) (ùìù (1 : Œ±)) := by
  rw [nhds_eq_comap_uniformity, Filter.comap_comap]
  refine le_antisymm (Filter.map_le_iff_le_comap.1 ?_) ?_
  ¬∑ intro s hs
    rcases mem_uniformity_of_uniformContinuous_invariant uniformContinuous_div hs with ‚ü®t, ht, hts‚ü©
    refine mem_map.2 (mem_of_superset ht ?_)
    rintro ‚ü®a, b‚ü©
    simpa [subset_def] using hts a b a
  ¬∑ intro s hs
    rcases mem_uniformity_of_uniformContinuous_invariant uniformContinuous_mul hs with ‚ü®t, ht, hts‚ü©
    refine ‚ü®_, ht, ?_‚ü©
    rintro ‚ü®a, b‚ü©
    simpa [subset_def] using hts 1 (b / a) a

@[to_additive]
theorem uniformity_eq_comap_nhds_one_swapped :
    ùì§ Œ± = comap (fun x : Œ± √ó Œ± => x.1 / x.2) (ùìù (1 : Œ±)) := by
  rw [‚Üê comap_swap_uniformity, uniformity_eq_comap_nhds_one, comap_comap]
  rfl

@[to_additive]
theorem UniformGroup.ext {G : Type*} [Group G] {u v : UniformSpace G} (hu : @UniformGroup G u _)
    (hv : @UniformGroup G v _)
    (h : @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1) : u = v :=
  UniformSpace.ext <| by
    rw [@uniformity_eq_comap_nhds_one _ u _ hu, @uniformity_eq_comap_nhds_one _ v _ hv, h]

@[to_additive]
theorem UniformGroup.ext_iff {G : Type*} [Group G] {u v : UniformSpace G}
    (hu : @UniformGroup G u _) (hv : @UniformGroup G v _) :
    u = v ‚Üî @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1 :=
  ‚ü®fun h => h ‚ñ∏ rfl, hu.ext hv‚ü©

variable {Œ±}

@[to_additive]
theorem UniformGroup.uniformity_countably_generated [(ùìù (1 : Œ±)).IsCountablyGenerated] :
    (ùì§ Œ±).IsCountablyGenerated := by
  rw [uniformity_eq_comap_nhds_one]
  exact Filter.comap.isCountablyGenerated _ _

open MulOpposite

@[to_additive]
theorem uniformity_eq_comap_inv_mul_nhds_one :
    ùì§ Œ± = comap (fun x : Œ± √ó Œ± => x.1‚Åª¬π * x.2) (ùìù (1 : Œ±)) := by
  rw [‚Üê comap_uniformity_mulOpposite, uniformity_eq_comap_nhds_one, ‚Üê op_one, ‚Üê comap_unop_nhds,
    comap_comap, comap_comap]
  simp [Function.comp_def]

@[to_additive]
theorem uniformity_eq_comap_inv_mul_nhds_one_swapped :
    ùì§ Œ± = comap (fun x : Œ± √ó Œ± => x.2‚Åª¬π * x.1) (ùìù (1 : Œ±)) := by
  rw [‚Üê comap_swap_uniformity, uniformity_eq_comap_inv_mul_nhds_one, comap_comap]
  rfl

end

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set Œ±}
    (h : (ùìù (1 : Œ±)).HasBasis p U) :
    (ùì§ Œ±).HasBasis p fun i => { x : Œ± √ó Œ± | x.2 / x.1 ‚àà U i } := by
  rw [uniformity_eq_comap_nhds_one]
  exact h.comap _

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_inv_mul {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set Œ±}
    (h : (ùìù (1 : Œ±)).HasBasis p U) :
    (ùì§ Œ±).HasBasis p fun i => { x : Œ± √ó Œ± | x.1‚Åª¬π * x.2 ‚àà U i } := by
  rw [uniformity_eq_comap_inv_mul_nhds_one]
  exact h.comap _

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_swapped {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set Œ±}
    (h : (ùìù (1 : Œ±)).HasBasis p U) :
    (ùì§ Œ±).HasBasis p fun i => { x : Œ± √ó Œ± | x.1 / x.2 ‚àà U i } := by
  rw [uniformity_eq_comap_nhds_one_swapped]
  exact h.comap _

@[to_additive]
theorem Filter.HasBasis.uniformity_of_nhds_one_inv_mul_swapped {Œπ} {p : Œπ ‚Üí Prop} {U : Œπ ‚Üí Set Œ±}
    (h : (ùìù (1 : Œ±)).HasBasis p U) :
    (ùì§ Œ±).HasBasis p fun i => { x : Œ± √ó Œ± | x.2‚Åª¬π * x.1 ‚àà U i } := by
  rw [uniformity_eq_comap_inv_mul_nhds_one_swapped]
  exact h.comap _

@[to_additive]
theorem uniformContinuous_of_tendsto_one {hom : Type*} [UniformSpace Œ≤] [Group Œ≤] [UniformGroup Œ≤]
    [FunLike hom Œ± Œ≤] [MonoidHomClass hom Œ± Œ≤] {f : hom} (h : Tendsto f (ùìù 1) (ùìù 1)) :
    UniformContinuous f := by
  have :
    ((fun x : Œ≤ √ó Œ≤ => x.2 / x.1) ‚àò fun x : Œ± √ó Œ± => (f x.1, f x.2)) = fun x : Œ± √ó Œ± =>
      f (x.2 / x.1) := by ext; simp only [Function.comp_apply, map_div]
  rw [UniformContinuous, uniformity_eq_comap_nhds_one Œ±, uniformity_eq_comap_nhds_one Œ≤,
    tendsto_comap_iff, this]
  exact Tendsto.comp h tendsto_comap

/-- A group homomorphism (a bundled morphism of a type that implements `MonoidHomClass`) between
two uniform groups is uniformly continuous provided that it is continuous at one. See also
`continuous_of_continuousAt_one`. -/
@[to_additive "An additive group homomorphism (a bundled morphism of a type that implements
`AddMonoidHomClass`) between two uniform additive groups is uniformly continuous provided that it
is continuous at zero. See also `continuous_of_continuousAt_zero`."]
theorem uniformContinuous_of_continuousAt_one {hom : Type*} [UniformSpace Œ≤] [Group Œ≤]
    [UniformGroup Œ≤] [FunLike hom Œ± Œ≤] [MonoidHomClass hom Œ± Œ≤]
    (f : hom) (hf : ContinuousAt f 1) :
    UniformContinuous f :=
  uniformContinuous_of_tendsto_one (by simpa using hf.tendsto)

@[to_additive]
theorem MonoidHom.uniformContinuous_of_continuousAt_one [UniformSpace Œ≤] [Group Œ≤] [UniformGroup Œ≤]
    (f : Œ± ‚Üí* Œ≤) (hf : ContinuousAt f 1) : UniformContinuous f :=
  _root_.uniformContinuous_of_continuousAt_one f hf

/-- A homomorphism from a uniform group to a discrete uniform group is continuous if and only if
its kernel is open. -/
@[to_additive "A homomorphism from a uniform additive group to a discrete uniform additive group is
continuous if and only if its kernel is open."]
theorem UniformGroup.uniformContinuous_iff_isOpen_ker {hom : Type*} [UniformSpace Œ≤]
    [DiscreteTopology Œ≤] [Group Œ≤] [UniformGroup Œ≤] [FunLike hom Œ± Œ≤] [MonoidHomClass hom Œ± Œ≤]
    {f : hom} :
    UniformContinuous f ‚Üî IsOpen ((f : Œ± ‚Üí* Œ≤).ker : Set Œ±) := by
  refine ‚ü®fun hf => ?_, fun hf => ?_‚ü©
  ¬∑ apply (isOpen_discrete ({1} : Set Œ≤)).preimage hf.continuous
  ¬∑ apply uniformContinuous_of_continuousAt_one
    rw [ContinuousAt, nhds_discrete Œ≤, map_one, tendsto_pure]
    exact hf.mem_nhds (map_one f)

@[deprecated (since := "2024-11-18")] alias UniformGroup.uniformContinuous_iff_open_ker :=
  UniformGroup.uniformContinuous_iff_isOpen_ker
@[deprecated (since := "2024-11-18")] alias UniformAddGroup.uniformContinuous_iff_open_ker :=
  UniformAddGroup.uniformContinuous_iff_isOpen_ker

@[to_additive]
theorem uniformContinuous_monoidHom_of_continuous {hom : Type*} [UniformSpace Œ≤] [Group Œ≤]
    [UniformGroup Œ≤] [FunLike hom Œ± Œ≤] [MonoidHomClass hom Œ± Œ≤] {f : hom} (h : Continuous f) :
    UniformContinuous f :=
  uniformContinuous_of_tendsto_one <|
    suffices Tendsto f (ùìù 1) (ùìù (f 1)) by rwa [map_one] at this
    h.tendsto 1

end UniformGroup

section TopologicalGroup

open Filter

variable (G : Type*) [Group G] [TopologicalSpace G] [TopologicalGroup G]

/-- The right uniformity on a topological group (as opposed to the left uniformity).

Warning: in general the right and left uniformities do not coincide and so one does not obtain a
`UniformGroup` structure. Two important special cases where they _do_ coincide are for
commutative groups (see `comm_topologicalGroup_is_uniform`) and for compact groups (see
`topologicalGroup_is_uniform_of_compactSpace`). -/
@[to_additive "The right uniformity on a topological additive group (as opposed to the left
uniformity).

Warning: in general the right and left uniformities do not coincide and so one does not obtain a
`UniformAddGroup` structure. Two important special cases where they _do_ coincide are for
commutative additive groups (see `comm_topologicalAddGroup_is_uniform`) and for compact
additive groups (see `topologicalAddGroup_is_uniform_of_compactSpace`)."]
def TopologicalGroup.toUniformSpace : UniformSpace G where
  uniformity := comap (fun p : G √ó G => p.2 / p.1) (ùìù 1)
  symm :=
    have : Tendsto (fun p : G √ó G ‚Ü¶ (p.2 / p.1)‚Åª¬π) (comap (fun p : G √ó G ‚Ü¶ p.2 / p.1) (ùìù 1))
      (ùìù 1‚Åª¬π) := tendsto_id.inv.comp tendsto_comap
    by simpa [tendsto_comap_iff]
  comp := Tendsto.le_comap fun U H ‚Ü¶ by
    rcases exists_nhds_one_split H with ‚ü®V, V_nhds, V_mul‚ü©
    refine mem_map.2 (mem_of_superset (mem_lift' <| preimage_mem_comap V_nhds) ?_)
    rintro ‚ü®x, y‚ü© ‚ü®z, hz‚ÇÅ, hz‚ÇÇ‚ü©
    simpa using V_mul _ hz‚ÇÇ _ hz‚ÇÅ
  nhds_eq_comap_uniformity _ := by simp only [comap_comap, Function.comp_def, nhds_translation_div]

attribute [local instance] TopologicalGroup.toUniformSpace

@[to_additive]
theorem uniformity_eq_comap_nhds_one' : ùì§ G = comap (fun p : G √ó G => p.2 / p.1) (ùìù (1 : G)) :=
  rfl

end TopologicalGroup

section TopologicalCommGroup

universe u v w x

open Filter

variable (G : Type*) [CommGroup G] [TopologicalSpace G] [TopologicalGroup G]

section

attribute [local instance] TopologicalGroup.toUniformSpace

variable {G}

@[to_additive]
-- Porting note: renamed theorem to conform to naming convention
theorem comm_topologicalGroup_is_uniform : UniformGroup G := by
  constructor
  simp only [UniformContinuous, uniformity_prod_eq_prod, uniformity_eq_comap_nhds_one',
    tendsto_comap_iff, tendsto_map'_iff, prod_comap_comap_eq, Function.comp_def,
    div_div_div_comm _ (Prod.snd (Prod.snd _)), ‚Üê nhds_prod_eq, Prod.mk_one_one]
  exact (continuous_div'.tendsto' 1 1 (div_one 1)).comp tendsto_comap

open Set

end

@[to_additive]
theorem UniformGroup.toUniformSpace_eq {G : Type*} [u : UniformSpace G] [Group G]
    [UniformGroup G] : TopologicalGroup.toUniformSpace G = u := by
  ext : 1
  rw [uniformity_eq_comap_nhds_one' G, uniformity_eq_comap_nhds_one G]

end TopologicalCommGroup

open Filter Set Function

section

variable {Œ± : Type*} {Œ≤ : Type*} {hom : Type*}
variable [TopologicalSpace Œ±] [Group Œ±] [TopologicalGroup Œ±]

-- Œ≤ is a dense subgroup of Œ±, inclusion is denoted by e
variable [TopologicalSpace Œ≤] [Group Œ≤]
variable [FunLike hom Œ≤ Œ±] [MonoidHomClass hom Œ≤ Œ±] {e : hom}

@[to_additive]
theorem tendsto_div_comap_self (de : IsDenseInducing e) (x‚ÇÄ : Œ±) :
    Tendsto (fun t : Œ≤ √ó Œ≤ => t.2 / t.1) ((comap fun p : Œ≤ √ó Œ≤ => (e p.1, e p.2)) <| ùìù (x‚ÇÄ, x‚ÇÄ))
      (ùìù 1) := by
  have comm : ((fun x : Œ± √ó Œ± => x.2 / x.1) ‚àò fun t : Œ≤ √ó Œ≤ => (e t.1, e t.2)) =
      e ‚àò fun t : Œ≤ √ó Œ≤ => t.2 / t.1 := by
    ext t
    change e t.2 / e t.1 = e (t.2 / t.1)
    rw [‚Üê map_div e t.2 t.1]
  have lim : Tendsto (fun x : Œ± √ó Œ± => x.2 / x.1) (ùìù (x‚ÇÄ, x‚ÇÄ)) (ùìù (e 1)) := by
    simpa using (continuous_div'.comp (@continuous_swap Œ± Œ± _ _)).tendsto (x‚ÇÄ, x‚ÇÄ)
  simpa using de.tendsto_comap_nhds_nhds lim comm

end

namespace IsDenseInducing

variable {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œ¥ : Type*}
variable {G : Type*}

-- Œ≤ is a dense subgroup of Œ±, inclusion is denoted by e
-- Œ¥ is a dense subgroup of Œ≥, inclusion is denoted by f
variable [TopologicalSpace Œ±] [AddCommGroup Œ±] [TopologicalAddGroup Œ±]
variable [TopologicalSpace Œ≤] [AddCommGroup Œ≤]
variable [TopologicalSpace Œ≥] [AddCommGroup Œ≥] [TopologicalAddGroup Œ≥]
variable [TopologicalSpace Œ¥] [AddCommGroup Œ¥]
variable [UniformSpace G] [AddCommGroup G]
variable {e : Œ≤ ‚Üí+ Œ±} (de : IsDenseInducing e)
variable {f : Œ¥ ‚Üí+ Œ≥} (df : IsDenseInducing f)
variable {œÜ : Œ≤ ‚Üí+ Œ¥ ‚Üí+ G}
variable (hœÜ : Continuous (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2))
variable {W' : Set G} (W'_nhd : W' ‚àà ùìù (0 : G))
include de hœÜ

include W'_nhd in
private theorem extend_Z_bilin_aux (x‚ÇÄ : Œ±) (y‚ÇÅ : Œ¥) : ‚àÉ U‚ÇÇ ‚àà comap e (ùìù x‚ÇÄ), ‚àÄ x ‚àà U‚ÇÇ, ‚àÄ x' ‚àà U‚ÇÇ,
    (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (x' - x, y‚ÇÅ) ‚àà W' := by
  let Nx := ùìù x‚ÇÄ
  let ee := fun u : Œ≤ √ó Œ≤ => (e u.1, e u.2)
  have lim1 : Tendsto (fun a : Œ≤ √ó Œ≤ => (a.2 - a.1, y‚ÇÅ))
      (comap e Nx √óÀ¢ comap e Nx) (ùìù (0, y‚ÇÅ)) := by
    have := Tendsto.prod_mk (tendsto_sub_comap_self de x‚ÇÄ)
      (tendsto_const_nhds : Tendsto (fun _ : Œ≤ √ó Œ≤ => y‚ÇÅ) (comap ee <| ùìù (x‚ÇÄ, x‚ÇÄ)) (ùìù y‚ÇÅ))
    rw [nhds_prod_eq, prod_comap_comap_eq, ‚Üê nhds_prod_eq]
    exact (this : _)
  have lim2 : Tendsto (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (ùìù (0, y‚ÇÅ)) (ùìù 0) := by
    simpa using hœÜ.tendsto (0, y‚ÇÅ)
  have lim := lim2.comp lim1
  rw [tendsto_prod_self_iff] at lim
  simp_rw [forall_mem_comm]
  exact lim W' W'_nhd

variable [UniformAddGroup G]

include df W'_nhd in
private theorem extend_Z_bilin_key (x‚ÇÄ : Œ±) (y‚ÇÄ : Œ≥) : ‚àÉ U ‚àà comap e (ùìù x‚ÇÄ), ‚àÉ V ‚àà comap f (ùìù y‚ÇÄ),
    ‚àÄ x ‚àà U, ‚àÄ x' ‚àà U, ‚àÄ (y) (_ : y ‚àà V) (y') (_ : y' ‚àà V),
    (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (x', y') - (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (x, y) ‚àà W' := by
  let ee := fun u : Œ≤ √ó Œ≤ => (e u.1, e u.2)
  let ff := fun u : Œ¥ √ó Œ¥ => (f u.1, f u.2)
  have lim_œÜ : Filter.Tendsto (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (ùìù (0, 0)) (ùìù 0) := by
    simpa using hœÜ.tendsto (0, 0)
  have lim_œÜ_sub_sub :
    Tendsto (fun p : (Œ≤ √ó Œ≤) √ó Œ¥ √ó Œ¥ => (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (p.1.2 - p.1.1, p.2.2 - p.2.1))
      ((comap ee <| ùìù (x‚ÇÄ, x‚ÇÄ)) √óÀ¢ (comap ff <| ùìù (y‚ÇÄ, y‚ÇÄ))) (ùìù 0) := by
    have lim_sub_sub :
      Tendsto (fun p : (Œ≤ √ó Œ≤) √ó Œ¥ √ó Œ¥ => (p.1.2 - p.1.1, p.2.2 - p.2.1))
        (comap ee (ùìù (x‚ÇÄ, x‚ÇÄ)) √óÀ¢ comap ff (ùìù (y‚ÇÄ, y‚ÇÄ))) (ùìù 0 √óÀ¢ ùìù 0) := by
      have := Filter.prod_mono (tendsto_sub_comap_self de x‚ÇÄ) (tendsto_sub_comap_self df y‚ÇÄ)
      rwa [prod_map_map_eq] at this
    rw [‚Üê nhds_prod_eq] at lim_sub_sub
    exact Tendsto.comp lim_œÜ lim_sub_sub
  rcases exists_nhds_zero_quarter W'_nhd with ‚ü®W, W_nhd, W4‚ü©
  have :
    ‚àÉ U‚ÇÅ ‚àà comap e (ùìù x‚ÇÄ), ‚àÉ V‚ÇÅ ‚àà comap f (ùìù y‚ÇÄ), ‚àÄ (x) (_ : x ‚àà U‚ÇÅ) (x') (_ : x' ‚àà U‚ÇÅ),
      ‚àÄ (y) (_ : y ‚àà V‚ÇÅ) (y') (_ : y' ‚àà V‚ÇÅ), (fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) (x' - x, y' - y) ‚àà W := by
    rcases tendsto_prod_iff.1 lim_œÜ_sub_sub W W_nhd with ‚ü®U, U_in, V, V_in, H‚ü©
    rw [nhds_prod_eq, ‚Üê prod_comap_comap_eq, mem_prod_same_iff] at U_in V_in
    rcases U_in with ‚ü®U‚ÇÅ, U‚ÇÅ_in, HU‚ÇÅ‚ü©
    rcases V_in with ‚ü®V‚ÇÅ, V‚ÇÅ_in, HV‚ÇÅ‚ü©
    exists U‚ÇÅ, U‚ÇÅ_in, V‚ÇÅ, V‚ÇÅ_in
    intro x x_in x' x'_in y y_in y' y'_in
    exact H _ _ (HU‚ÇÅ (mk_mem_prod x_in x'_in)) (HV‚ÇÅ (mk_mem_prod y_in y'_in))
  rcases this with ‚ü®U‚ÇÅ, U‚ÇÅ_nhd, V‚ÇÅ, V‚ÇÅ_nhd, H‚ü©
  obtain ‚ü®x‚ÇÅ, x‚ÇÅ_in‚ü© : U‚ÇÅ.Nonempty := (de.comap_nhds_neBot _).nonempty_of_mem U‚ÇÅ_nhd
  obtain ‚ü®y‚ÇÅ, y‚ÇÅ_in‚ü© : V‚ÇÅ.Nonempty := (df.comap_nhds_neBot _).nonempty_of_mem V‚ÇÅ_nhd
  have cont_flip : Continuous fun p : Œ¥ √ó Œ≤ => œÜ.flip p.1 p.2 := by
    show Continuous ((fun p : Œ≤ √ó Œ¥ => œÜ p.1 p.2) ‚àò Prod.swap)
    exact hœÜ.comp continuous_swap
  rcases extend_Z_bilin_aux de hœÜ W_nhd x‚ÇÄ y‚ÇÅ with ‚ü®U‚ÇÇ, U‚ÇÇ_nhd, HU‚ü©
  rcases extend_Z_bilin_aux df cont_flip W_nhd y‚ÇÄ x‚ÇÅ with ‚ü®V‚ÇÇ, V‚ÇÇ_nhd, HV‚ü©
  exists U‚ÇÅ ‚à© U‚ÇÇ, inter_mem U‚ÇÅ_nhd U‚ÇÇ_nhd, V‚ÇÅ ‚à© V‚ÇÇ, inter_mem V‚ÇÅ_nhd V‚ÇÇ_nhd
  rintro x ‚ü®xU‚ÇÅ, xU‚ÇÇ‚ü© x' ‚ü®x'U‚ÇÅ, x'U‚ÇÇ‚ü© y ‚ü®yV‚ÇÅ, yV‚ÇÇ‚ü© y' ‚ü®y'V‚ÇÅ, y'V‚ÇÇ‚ü©
  have key_formula : œÜ x' y' - œÜ x y
    = œÜ (x' - x) y‚ÇÅ + œÜ (x' - x) (y' - y‚ÇÅ) + œÜ x‚ÇÅ (y' - y) + œÜ (x - x‚ÇÅ) (y' - y) := by simp; abel
  rw [key_formula]
  have h‚ÇÅ := HU x xU‚ÇÇ x' x'U‚ÇÇ
  have h‚ÇÇ := H x xU‚ÇÅ x' x'U‚ÇÅ y‚ÇÅ y‚ÇÅ_in y' y'V‚ÇÅ
  have h‚ÇÉ := HV y yV‚ÇÇ y' y'V‚ÇÇ
  have h‚ÇÑ := H x‚ÇÅ x‚ÇÅ_in x xU‚ÇÅ y yV‚ÇÅ y' y'V‚ÇÅ
  exact W4 h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ

end IsDenseInducing
