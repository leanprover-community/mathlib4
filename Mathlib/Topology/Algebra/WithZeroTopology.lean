/-
Copyright (c) 2021 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot
-/
import Mathlib.Topology.Algebra.GroupWithZero
import Mathlib.Topology.Order.OrderClosed

#align_import topology.algebra.with_zero_topology from "leanprover-community/mathlib"@"3e0c4d76b6ebe9dfafb67d16f7286d2731ed6064"

/-!
# The topology on linearly ordered commutative groups with zero

Let `Œì‚ÇÄ` be a linearly ordered commutative group to which we have adjoined a zero element.  Then
`Œì‚ÇÄ` may naturally be endowed with a topology that turns `Œì‚ÇÄ` into a topological monoid.
Neighborhoods of zero are sets containing `{ Œ≥ | Œ≥ < Œ≥‚ÇÄ }` for some invertible element `Œ≥‚ÇÄ` and
every invertible element is open.  In particular the topology is the following: "a subset `U ‚äÜ Œì‚ÇÄ`
is open if `0 ‚àâ U` or if there is an invertible `Œ≥‚ÇÄ ‚àà Œì‚ÇÄ` such that `{ Œ≥ | Œ≥ < Œ≥‚ÇÄ } ‚äÜ U`", see
`WithZeroTopology.isOpen_iff`.

We prove this topology is ordered and T‚ÇÖ (in addition to be compatible with the monoid
structure).

All this is useful to extend a valuation to a completion. This is an abstract version of how the
absolute value (resp. `p`-adic absolute value) on `‚Ñö` is extended to `‚Ñù` (resp. `‚Ñö‚Çö`).

## Implementation notes

This topology is defined as a scoped instance since it may not be the desired topology on
a linearly ordered commutative group with zero. You can locally activate this topology using
`open WithZeroTopology`.
-/

open Topology Filter TopologicalSpace Filter Set Function

namespace WithZeroTopology

variable {Œ± Œì‚ÇÄ : Type*} [LinearOrderedCommGroupWithZero Œì‚ÇÄ] {Œ≥ Œ≥‚ÇÅ Œ≥‚ÇÇ : Œì‚ÇÄ} {l : Filter Œ±}
  {f : Œ± ‚Üí Œì‚ÇÄ}

/-- The topology on a linearly ordered commutative group with a zero element adjoined.
A subset U is open if 0 ‚àâ U or if there is an invertible element Œ≥‚ÇÄ such that {Œ≥ | Œ≥ < Œ≥‚ÇÄ} ‚äÜ U. -/
scoped instance (priority := 100) topologicalSpace : TopologicalSpace Œì‚ÇÄ :=
  nhdsAdjoint 0 <| ‚®Ö Œ≥ ‚â† 0, ùìü (Iio Œ≥)
#align with_zero_topology.topological_space WithZeroTopology.topologicalSpace

theorem nhds_eq_update : (ùìù : Œì‚ÇÄ ‚Üí Filter Œì‚ÇÄ) = update pure 0 (‚®Ö Œ≥ ‚â† 0, ùìü (Iio Œ≥)) := by
   rw [nhds_nhdsAdjoint, sup_of_le_right]
   exact le_iInf‚ÇÇ fun Œ≥ hŒ≥ ‚Ü¶ le_principal_iff.2 <| zero_lt_iff.2 hŒ≥
 #align with_zero_topology.nhds_eq_update WithZeroTopology.nhds_eq_update

/-!
### Neighbourhoods of zero
-/

theorem nhds_zero : ùìù (0 : Œì‚ÇÄ) = ‚®Ö Œ≥ ‚â† 0, ùìü (Iio Œ≥) := by
  rw [nhds_eq_update, update_same]
#align with_zero_topology.nhds_zero WithZeroTopology.nhds_zero

/-- In a linearly ordered group with zero element adjoined, `U` is a neighbourhood of `0` if and
only if there exists a nonzero element `Œ≥‚ÇÄ` such that `Iio Œ≥‚ÇÄ ‚äÜ U`. -/
theorem hasBasis_nhds_zero : (ùìù (0 : Œì‚ÇÄ)).HasBasis (fun Œ≥ : Œì‚ÇÄ => Œ≥ ‚â† 0) Iio := by
  rw [nhds_zero]
  refine' hasBasis_biInf_principal _ ‚ü®1, one_ne_zero‚ü©
  exact directedOn_iff_directed.2 (Monotone.directed_ge fun a b hab => Iio_subset_Iio hab)
#align with_zero_topology.has_basis_nhds_zero WithZeroTopology.hasBasis_nhds_zero

theorem Iio_mem_nhds_zero (hŒ≥ : Œ≥ ‚â† 0) : Iio Œ≥ ‚àà ùìù (0 : Œì‚ÇÄ) :=
  hasBasis_nhds_zero.mem_of_mem hŒ≥
#align with_zero_topology.Iio_mem_nhds_zero WithZeroTopology.Iio_mem_nhds_zero

/-- If `Œ≥` is an invertible element of a linearly ordered group with zero element adjoined, then
`Iio (Œ≥ : Œì‚ÇÄ)` is a neighbourhood of `0`. -/
theorem nhds_zero_of_units (Œ≥ : Œì‚ÇÄÀ£) : Iio ‚ÜëŒ≥ ‚àà ùìù (0 : Œì‚ÇÄ) :=
  Iio_mem_nhds_zero Œ≥.ne_zero
#align with_zero_topology.nhds_zero_of_units WithZeroTopology.nhds_zero_of_units

theorem tendsto_zero : Tendsto f l (ùìù (0 : Œì‚ÇÄ)) ‚Üî ‚àÄ (Œ≥‚ÇÄ) (_ : Œ≥‚ÇÄ ‚â† 0), ‚àÄ·∂† x in l, f x < Œ≥‚ÇÄ := by
  simp [nhds_zero]
#align with_zero_topology.tendsto_zero WithZeroTopology.tendsto_zero

/-!
### Neighbourhoods of non-zero elements
-/

/-- The neighbourhood filter of a nonzero element consists of all sets containing that
element. -/
@[simp]
theorem nhds_of_ne_zero {Œ≥ : Œì‚ÇÄ} (h‚ÇÄ : Œ≥ ‚â† 0) : ùìù Œ≥ = pure Œ≥ :=
  nhds_nhdsAdjoint_of_ne _ h‚ÇÄ
#align with_zero_topology.nhds_of_ne_zero WithZeroTopology.nhds_of_ne_zero

/-- The neighbourhood filter of an invertible element consists of all sets containing that
element. -/
theorem nhds_coe_units (Œ≥ : Œì‚ÇÄÀ£) : ùìù (Œ≥ : Œì‚ÇÄ) = pure (Œ≥ : Œì‚ÇÄ) :=
  nhds_of_ne_zero Œ≥.ne_zero
#align with_zero_topology.nhds_coe_units WithZeroTopology.nhds_coe_units

/-- If `Œ≥` is an invertible element of a linearly ordered group with zero element adjoined, then
`{Œ≥}` is a neighbourhood of `Œ≥`. -/
theorem singleton_mem_nhds_of_units (Œ≥ : Œì‚ÇÄÀ£) : ({‚ÜëŒ≥} : Set Œì‚ÇÄ) ‚àà ùìù (Œ≥ : Œì‚ÇÄ) := by simp
#align with_zero_topology.singleton_mem_nhds_of_units WithZeroTopology.singleton_mem_nhds_of_units

/-- If `Œ≥` is a nonzero element of a linearly ordered group with zero element adjoined, then `{Œ≥}`
is a neighbourhood of `Œ≥`. -/
theorem singleton_mem_nhds_of_ne_zero (h : Œ≥ ‚â† 0) : ({Œ≥} : Set Œì‚ÇÄ) ‚àà ùìù (Œ≥ : Œì‚ÇÄ) := by simp [h]
#align with_zero_topology.singleton_mem_nhds_of_ne_zero WithZeroTopology.singleton_mem_nhds_of_ne_zero

theorem hasBasis_nhds_of_ne_zero {x : Œì‚ÇÄ} (h : x ‚â† 0) :
    HasBasis (ùìù x) (fun _ : Unit => True) fun _ => {x} := by
  rw [nhds_of_ne_zero h]
  exact hasBasis_pure _
#align with_zero_topology.has_basis_nhds_of_ne_zero WithZeroTopology.hasBasis_nhds_of_ne_zero

theorem hasBasis_nhds_units (Œ≥ : Œì‚ÇÄÀ£) :
    HasBasis (ùìù (Œ≥ : Œì‚ÇÄ)) (fun _ : Unit => True) fun _ => {‚ÜëŒ≥} :=
  hasBasis_nhds_of_ne_zero Œ≥.ne_zero
#align with_zero_topology.has_basis_nhds_units WithZeroTopology.hasBasis_nhds_units

theorem tendsto_of_ne_zero {Œ≥ : Œì‚ÇÄ} (h : Œ≥ ‚â† 0) : Tendsto f l (ùìù Œ≥) ‚Üî ‚àÄ·∂† x in l, f x = Œ≥ := by
  rw [nhds_of_ne_zero h, tendsto_pure]
#align with_zero_topology.tendsto_of_ne_zero WithZeroTopology.tendsto_of_ne_zero

theorem tendsto_units {Œ≥‚ÇÄ : Œì‚ÇÄÀ£} : Tendsto f l (ùìù (Œ≥‚ÇÄ : Œì‚ÇÄ)) ‚Üî ‚àÄ·∂† x in l, f x = Œ≥‚ÇÄ :=
  tendsto_of_ne_zero Œ≥‚ÇÄ.ne_zero
#align with_zero_topology.tendsto_units WithZeroTopology.tendsto_units

theorem Iio_mem_nhds (h : Œ≥‚ÇÅ < Œ≥‚ÇÇ) : Iio Œ≥‚ÇÇ ‚àà ùìù Œ≥‚ÇÅ := by
  rcases eq_or_ne Œ≥‚ÇÅ 0 with (rfl | h‚ÇÄ) <;> simp [*, h.ne', Iio_mem_nhds_zero]
#align with_zero_topology.Iio_mem_nhds WithZeroTopology.Iio_mem_nhds

/-!
### Open/closed sets
-/

theorem isOpen_iff {s : Set Œì‚ÇÄ} : IsOpen s ‚Üî (0 : Œì‚ÇÄ) ‚àâ s ‚à® ‚àÉ Œ≥, Œ≥ ‚â† 0 ‚àß Iio Œ≥ ‚äÜ s := by
  rw [isOpen_iff_mem_nhds, ‚Üê and_forall_ne (0 : Œì‚ÇÄ)]
  simp (config := { contextual := true }) [nhds_of_ne_zero, imp_iff_not_or,
    hasBasis_nhds_zero.mem_iff]
#align with_zero_topology.is_open_iff WithZeroTopology.isOpen_iff

theorem isClosed_iff {s : Set Œì‚ÇÄ} : IsClosed s ‚Üî (0 : Œì‚ÇÄ) ‚àà s ‚à® ‚àÉ Œ≥, Œ≥ ‚â† 0 ‚àß s ‚äÜ Ici Œ≥ := by
  simp only [‚Üê isOpen_compl_iff, isOpen_iff, mem_compl_iff, not_not, ‚Üê compl_Ici,
    compl_subset_compl]
#align with_zero_topology.is_closed_iff WithZeroTopology.isClosed_iff

theorem isOpen_Iio {a : Œì‚ÇÄ} : IsOpen (Iio a) :=
  isOpen_iff.mpr <| imp_iff_not_or.mp fun ha => ‚ü®a, ne_of_gt ha, Subset.rfl‚ü©
#align with_zero_topology.is_open_Iio WithZeroTopology.isOpen_Iio

/-!
### Instances
-/

/-- The topology on a linearly ordered group with zero element adjoined is compatible with the order
structure: the set `{p : Œì‚ÇÄ √ó Œì‚ÇÄ | p.1 ‚â§ p.2}` is closed. -/
@[nolint defLemma]
scoped instance (priority := 100) orderClosedTopology : OrderClosedTopology Œì‚ÇÄ where
  isClosed_le' := by
    simp only [‚Üê isOpen_compl_iff, compl_setOf, not_le, isOpen_iff_mem_nhds]
    rintro ‚ü®a, b‚ü© (hab : b < a)
    rw [nhds_prod_eq, nhds_of_ne_zero (zero_le'.trans_lt hab).ne', pure_prod]
    exact Iio_mem_nhds hab
#align with_zero_topology.order_closed_topology WithZeroTopology.orderClosedTopology

/-- The topology on a linearly ordered group with zero element adjoined is T‚ÇÖ. -/
@[nolint defLemma]
scoped instance (priority := 100) t5Space : T5Space Œì‚ÇÄ where
  completely_normal := fun s t h‚ÇÅ h‚ÇÇ => by
    by_cases hs : 0 ‚àà s
    ¬∑ have ht : 0 ‚àâ t := fun ht => disjoint_left.1 h‚ÇÅ (subset_closure hs) ht
      rwa [(isOpen_iff.2 (.inl ht)).nhdsSet_eq, disjoint_nhdsSet_principal]
    ¬∑ rwa [(isOpen_iff.2 (.inl hs)).nhdsSet_eq, disjoint_principal_nhdsSet]

/-- The topology on a linearly ordered group with zero element adjoined is T‚ÇÉ. -/
@[deprecated t5Space] lemma t3Space : T3Space Œì‚ÇÄ := inferInstance
#align with_zero_topology.t3_space WithZeroTopology.t3Space

/-- The topology on a linearly ordered group with zero element adjoined makes it a topological
monoid. -/
@[nolint defLemma]
scoped instance (priority := 100) : ContinuousMul Œì‚ÇÄ where
  continuous_mul := by
    simp only [continuous_iff_continuousAt, ContinuousAt]
    rintro ‚ü®x, y‚ü©
    wlog hle : x ‚â§ y generalizing x y
    ¬∑ have := (this y x (le_of_not_le hle)).comp (continuous_swap.tendsto (x, y))
      simpa only [mul_comm, Function.comp, Prod.swap] using this
    rcases eq_or_ne x 0 with (rfl | hx) <;> [rcases eq_or_ne y 0 with (rfl | hy); skip]
    ¬∑ rw [zero_mul]
      refine ((hasBasis_nhds_zero.prod_nhds hasBasis_nhds_zero).tendsto_iff hasBasis_nhds_zero).2
        fun Œ≥ hŒ≥ => ‚ü®(Œ≥, 1), ‚ü®hŒ≥, one_ne_zero‚ü©, ?_‚ü©
      rintro ‚ü®x, y‚ü© ‚ü®hx : x < Œ≥, hy : y < 1‚ü©
      exact (mul_lt_mul‚ÇÄ hx hy).trans_eq (mul_one Œ≥)
    ¬∑ rw [zero_mul, nhds_prod_eq, nhds_of_ne_zero hy, prod_pure, tendsto_map'_iff]
      refine' (hasBasis_nhds_zero.tendsto_iff hasBasis_nhds_zero).2 fun Œ≥ hŒ≥ => _
      refine' ‚ü®Œ≥ / y, div_ne_zero hŒ≥ hy, fun x hx => _‚ü©
      calc x * y < Œ≥ / y * y := mul_lt_right‚ÇÄ _ hx hy
      _ = Œ≥ := div_mul_cancel‚ÇÄ _ hy
    ¬∑ have hy : y ‚â† 0 := ((zero_lt_iff.mpr hx).trans_le hle).ne'
      rw [nhds_prod_eq, nhds_of_ne_zero hx, nhds_of_ne_zero hy, prod_pure_pure]
      exact pure_le_nhds (x * y)

@[nolint defLemma]
scoped instance (priority := 100) : HasContinuousInv‚ÇÄ Œì‚ÇÄ :=
  ‚ü®fun Œ≥ h => by
    rw [ContinuousAt, nhds_of_ne_zero h]
    exact pure_le_nhds Œ≥‚Åª¬π‚ü©

end WithZeroTopology
