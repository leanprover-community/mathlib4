/-
Copyright (c) 2021 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot
-/
import Mathlib.Topology.Algebra.Nonarchimedean.Bases
import Mathlib.Topology.Algebra.UniformFilterBasis
import Mathlib.RingTheory.Valuation.Basic

#align_import topology.algebra.valuation from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# The topology on a valued ring

In this file, we define the non archimedean topology induced by a valuation on a ring.
The main definition is a `Valued` type class which equips a ring with a valuation taking
values in a group with zero. Other instances are then deduced from this.
-/


open Classical Topology uniformity

open Set Valuation

noncomputable section

universe v u

variable {R : Type u} [Ring R] {Œì‚ÇÄ : Type v} [LinearOrderedCommGroupWithZero Œì‚ÇÄ]

namespace Valuation

variable (v : Valuation R Œì‚ÇÄ)

/-- The basis of open subgroups for the topology on a ring determined by a valuation. -/
theorem subgroups_basis : RingSubgroupsBasis fun Œ≥ : Œì‚ÇÄÀ£ => (v.ltAddSubgroup Œ≥ : AddSubgroup R) :=
  { inter := by
      rintro Œ≥‚ÇÄ Œ≥‚ÇÅ
      use min Œ≥‚ÇÄ Œ≥‚ÇÅ
      simp only [ltAddSubgroup, ge_iff_le, Units.min_val, Units.val_le_val, lt_min_iff,
        AddSubgroup.mk_le_mk, setOf_subset_setOf, le_inf_iff, and_imp, imp_self, implies_true,
        forall_const, and_true]
      tauto
    mul := by
      rintro Œ≥
      cases' exists_square_le Œ≥ with Œ≥‚ÇÄ h
      use Œ≥‚ÇÄ
      rintro - ‚ü®r, s, r_in, s_in, rfl‚ü©
      calc
        (v (r * s) : Œì‚ÇÄ) = v r * v s := Valuation.map_mul _ _ _
        _ < Œ≥‚ÇÄ * Œ≥‚ÇÄ := (mul_lt_mul‚ÇÄ r_in s_in)
        _ ‚â§ Œ≥ := mod_cast h
    leftMul := by
      rintro x Œ≥
      rcases GroupWithZero.eq_zero_or_unit (v x) with (Hx | ‚ü®Œ≥x, Hx‚ü©)
      ¬∑ use (1 : Œì‚ÇÄÀ£)
        rintro y _
        change v (x * y) < _
        rw [Valuation.map_mul, Hx, zero_mul]
        exact Units.zero_lt Œ≥
      ¬∑ use Œ≥x‚Åª¬π * Œ≥
        rintro y (vy_lt : v y < ‚Üë(Œ≥x‚Åª¬π * Œ≥))
        change (v (x * y) : Œì‚ÇÄ) < Œ≥
        rw [Valuation.map_mul, Hx, mul_comm]
        rw [Units.val_mul, mul_comm] at vy_lt
        simpa using mul_inv_lt_of_lt_mul‚ÇÄ vy_lt
    rightMul := by
      rintro x Œ≥
      rcases GroupWithZero.eq_zero_or_unit (v x) with (Hx | ‚ü®Œ≥x, Hx‚ü©)
      ¬∑ use 1
        rintro y _
        change v (y * x) < _
        rw [Valuation.map_mul, Hx, mul_zero]
        exact Units.zero_lt Œ≥
      ¬∑ use Œ≥x‚Åª¬π * Œ≥
        rintro y (vy_lt : v y < ‚Üë(Œ≥x‚Åª¬π * Œ≥))
        change (v (y * x) : Œì‚ÇÄ) < Œ≥
        rw [Valuation.map_mul, Hx]
        rw [Units.val_mul, mul_comm] at vy_lt
        simpa using mul_inv_lt_of_lt_mul‚ÇÄ vy_lt }
#align valuation.subgroups_basis Valuation.subgroups_basis

end Valuation

/-- A valued ring is a ring that comes equipped with a distinguished valuation. The class `Valued`
is designed for the situation that there is a canonical valuation on the ring.

TODO: show that there always exists an equivalent valuation taking values in a type belonging to
the same universe as the ring.

See Note [forgetful inheritance] for why we extend `UniformSpace`, `UniformAddGroup`. -/
class Valued (R : Type u) [Ring R] (Œì‚ÇÄ : outParam (Type v))
  [LinearOrderedCommGroupWithZero Œì‚ÇÄ] extends UniformSpace R, UniformAddGroup R where
  v : Valuation R Œì‚ÇÄ
  is_topological_valuation : ‚àÄ s, s ‚àà ùìù (0 : R) ‚Üî ‚àÉ Œ≥ : Œì‚ÇÄÀ£, { x : R | v x < Œ≥ } ‚äÜ s
#align valued Valued

-- Porting note: removed
--attribute [nolint dangerous_instance] Valued.toUniformSpace

namespace Valued

/-- Alternative `Valued` constructor for use when there is no preferred `UniformSpace` structure. -/
def mk' (v : Valuation R Œì‚ÇÄ) : Valued R Œì‚ÇÄ :=
  { v
    toUniformSpace := @TopologicalAddGroup.toUniformSpace R _ v.subgroups_basis.topology _
    toUniformAddGroup := @comm_topologicalAddGroup_is_uniform _ _ v.subgroups_basis.topology _
    is_topological_valuation := by
      letI := @TopologicalAddGroup.toUniformSpace R _ v.subgroups_basis.topology _
      intro s
      rw [Filter.hasBasis_iff.mp v.subgroups_basis.hasBasis_nhds_zero s]
      exact exists_congr fun Œ≥ => by rw [true_and]; rfl }
#align valued.mk' Valued.mk'

variable (R Œì‚ÇÄ)
variable [_i : Valued R Œì‚ÇÄ]

theorem hasBasis_nhds_zero :
    (ùìù (0 : R)).HasBasis (fun _ => True) fun Œ≥ : Œì‚ÇÄÀ£ => { x | v x < (Œ≥ : Œì‚ÇÄ) } := by
  simp [Filter.hasBasis_iff, is_topological_valuation]
#align valued.has_basis_nhds_zero Valued.hasBasis_nhds_zero

-- Porting note: Replaced `ùì§ R` with `uniformity R`
theorem hasBasis_uniformity : (uniformity R).HasBasis (fun _ => True)
    fun Œ≥ : Œì‚ÇÄÀ£ => { p : R √ó R | v (p.2 - p.1) < (Œ≥ : Œì‚ÇÄ) } := by
  rw [uniformity_eq_comap_nhds_zero]
  exact (hasBasis_nhds_zero R Œì‚ÇÄ).comap _
#align valued.has_basis_uniformity Valued.hasBasis_uniformity

theorem toUniformSpace_eq :
    toUniformSpace = @TopologicalAddGroup.toUniformSpace R _ v.subgroups_basis.topology _ :=
  UniformSpace.ext
    ((hasBasis_uniformity R Œì‚ÇÄ).eq_of_same_basis <| v.subgroups_basis.hasBasis_nhds_zero.comap _)
#align valued.to_uniform_space_eq Valued.toUniformSpace_eq

variable {R Œì‚ÇÄ}

theorem mem_nhds {s : Set R} {x : R} : s ‚àà ùìù x ‚Üî ‚àÉ Œ≥ : Œì‚ÇÄÀ£, { y | (v (y - x) : Œì‚ÇÄ) < Œ≥ } ‚äÜ s := by
  simp only [‚Üê nhds_translation_add_neg x, ‚Üê sub_eq_add_neg, preimage_setOf_eq, true_and,
    ((hasBasis_nhds_zero R Œì‚ÇÄ).comap fun y => y - x).mem_iff]
#align valued.mem_nhds Valued.mem_nhds

theorem mem_nhds_zero {s : Set R} : s ‚àà ùìù (0 : R) ‚Üî ‚àÉ Œ≥ : Œì‚ÇÄÀ£, { x | v x < (Œ≥ : Œì‚ÇÄ) } ‚äÜ s := by
  simp only [mem_nhds, sub_zero]
#align valued.mem_nhds_zero Valued.mem_nhds_zero

theorem loc_const {x : R} (h : (v x : Œì‚ÇÄ) ‚â† 0) : { y : R | v y = v x } ‚àà ùìù x := by
  rw [mem_nhds]
  rcases Units.exists_iff_ne_zero.mpr h with ‚ü®Œ≥, hx‚ü©
  use Œ≥
  rw [hx]
  intro y y_in
  exact Valuation.map_eq_of_sub_lt _ y_in
#align valued.loc_const Valued.loc_const

instance (priority := 100) : TopologicalRing R :=
  (toUniformSpace_eq R Œì‚ÇÄ).symm ‚ñ∏ v.subgroups_basis.toRingFilterBasis.isTopologicalRing

theorem cauchy_iff {F : Filter R} : Cauchy F ‚Üî
    F.NeBot ‚àß ‚àÄ Œ≥ : Œì‚ÇÄÀ£, ‚àÉ M ‚àà F, ‚àÄ (x) (_ : x ‚àà M) (y) (_ : y ‚àà M), (v (y - x) : Œì‚ÇÄ) < Œ≥ := by
  rw [toUniformSpace_eq, AddGroupFilterBasis.cauchy_iff]
  apply and_congr Iff.rfl
  simp_rw [Valued.v.subgroups_basis.mem_addGroupFilterBasis_iff]
  constructor
  ¬∑ intro h Œ≥
    exact h _ (Valued.v.subgroups_basis.mem_addGroupFilterBasis _)
  ¬∑ rintro h - ‚ü®Œ≥, rfl‚ü©
    exact h Œ≥
#align valued.cauchy_iff Valued.cauchy_iff

end Valued
