/-
Copyright (c) 2024 Yaël Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yaël Dillies
-/
import Mathlib.Order.BooleanSubalgebra
import Mathlib.Topology.Spectral.Hom

/-!
# Constructible sets

This file defines constructible sets, which are morally sets in a topological space which we can
make out of finite unions and intersections of open and closed sets.

Precisely, constructible sets are the boolean subalgebra generated by open retro-compact sets,
where a set is retro-compact if its intersection with every compact open set is compact.

Constructible sets are useful because the image of a constructible set under a finitely presented
morphism of schemes is a constructible set (and this is *not* true at the level of varieties).

## Main declarations

* `IsRetroCompact`: Predicate for a set to be retro-compact, namely to have its intersection with
  every compact open is compact.
* `IsConstructible`: Predicate for a set to be constructible, namely to belong to the boolean
  subalgebra generated by open retro-compact sets.
* `IsLocallyConstructible`: Predicate for a set to be locally constructible, namely to be
  partitionable along an open cover such that each of its parts is constructible.
-/

open Set TopologicalSpace Topology

variable {ι : Sort*} {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] {f : X → Y}
  {s t U : Set X} {a : X}

/-! ### Retro-compact sets -/

/-- A retro-compact set is a set whose intersection with every compact open is compact. -/
@[stacks 005A]
def IsRetroCompact (s : Set X) : Prop := ∀ ⦃U⦄, IsCompact U → IsOpen U → IsCompact (s ∩ U)

@[simp] lemma IsRetroCompact.empty : IsRetroCompact (∅ : Set X) := by simp [IsRetroCompact]
@[simp] lemma IsRetroCompact.univ : IsRetroCompact (univ : Set X) := by
  simp +contextual [IsRetroCompact]

@[simp] lemma IsRetroCompact.singleton : IsRetroCompact {a} :=
  fun _ _ _ ↦ Subsingleton.singleton_inter.isCompact

lemma IsRetroCompact.union (hs : IsRetroCompact s) (ht : IsRetroCompact t) :
    IsRetroCompact (s ∪ t : Set X) :=
  fun _U hUcomp hUopen ↦ union_inter_distrib_right .. ▸ (hs hUcomp hUopen).union (ht hUcomp hUopen)

lemma IsRetroCompact.finsetSup {ι : Type*} {s : Finset ι} {t : ι → Set X}
    (ht : ∀ i ∈ s, IsRetroCompact (t i)) : IsRetroCompact (s.sup t) := by
  induction' s using Finset.cons_induction with i s ih hi
  · simp
  · rw [Finset.sup_cons]
    exact (ht _ <| by simp).union <| hi <| Finset.forall_of_forall_cons ht

set_option linter.docPrime false in
lemma IsRetroCompact.finsetSup' {ι : Type*} {s : Finset ι} {hs} {t : ι → Set X}
    (ht : ∀ i ∈ s, IsRetroCompact (t i)) : IsRetroCompact (s.sup' hs t) := by
  rw [Finset.sup'_eq_sup]; exact .finsetSup ht

lemma IsRetroCompact.inter [T2Space X] (hs : IsRetroCompact s) (ht : IsRetroCompact t) :
    IsRetroCompact (s ∩ t : Set X) :=
  fun _U hUcomp hUopen ↦ inter_inter_distrib_right .. ▸ (hs hUcomp hUopen).inter (ht hUcomp hUopen)

lemma IsRetroCompact.finsetInf [T2Space X] {ι : Type*} {s : Finset ι} {t : ι → Set X}
    (ht : ∀ i ∈ s, IsRetroCompact (t i)) : IsRetroCompact (s.inf t) := by
  induction' s using Finset.cons_induction with i s ih hi
  · simp
  · rw [Finset.inf_cons]
    exact (ht _ <| by simp).inter <| hi <| Finset.forall_of_forall_cons ht

set_option linter.docPrime false in
lemma IsRetroCompact.finsetInf' [T2Space X] {ι : Type*} {s : Finset ι} {hs} {t : ι → Set X}
    (ht : ∀ i ∈ s, IsRetroCompact (t i)) : IsRetroCompact (s.inf' hs t) := by
  rw [Finset.inf'_eq_inf]; exact .finsetInf ht

lemma IsRetroCompact.inter_isOpen (hs : IsRetroCompact s) (ht : IsRetroCompact t)
    (htopen : IsOpen t) : IsRetroCompact (s ∩ t : Set X) :=
  fun _U hUcomp hUopen ↦ inter_assoc .. ▸ hs (ht hUcomp hUopen) (htopen.inter hUopen)

lemma IsRetroCompact.isOpen_inter (hs : IsRetroCompact s) (ht : IsRetroCompact t)
    (hsopen : IsOpen s) : IsRetroCompact (s ∩ t : Set X) :=
  inter_comm .. ▸ ht.inter_isOpen hs hsopen

lemma isRetroCompact_iff_isSpectralMap_subtypeVal :
    IsRetroCompact s ↔ IsSpectralMap (Subtype.val : s → X) := by
  refine ⟨fun hs ↦ ⟨continuous_subtype_val, fun t htopen htcomp ↦ ?_⟩, fun hs t htcomp htopen ↦ ?_⟩
  · rw [IsEmbedding.subtypeVal.isCompact_iff, image_preimage_eq_inter_range,
      Subtype.range_coe_subtype, setOf_mem_eq, inter_comm]
    exact hs htcomp htopen
  · simpa using (hs.isCompact_preimage_of_isOpen htopen htcomp).image continuous_subtype_val

@[stacks 005B]
lemma IsRetroCompact.image_of_isEmbedding (hs : IsRetroCompact s) (hfemb : IsEmbedding f)
    (hfcomp : IsRetroCompact (range f)) : IsRetroCompact (f '' s) := by
  rintro U hUcomp hUopen
  rw [← image_inter_preimage, ← hfemb.isCompact_iff]
  refine hs ?_ <| hUopen.preimage hfemb.continuous
  rw [hfemb.isCompact_iff, image_preimage_eq_inter_range, inter_comm]
  exact hfcomp hUcomp hUopen

@[stacks 005J] -- Extracted from the proof of `005J`
lemma IsRetroCompact.preimage_of_isOpenEmbedding {s : Set Y} (hf : IsOpenEmbedding f)
    (hs : IsRetroCompact s) : IsRetroCompact (f ⁻¹' s) := by
  rintro U hUcomp hUopen
  rw [hf.isCompact_iff, image_preimage_inter]
  exact hs (hUcomp.image hf.continuous) <| hf.isOpenMap _ hUopen

@[stacks 09YE] -- Extracted from the proof of `09YE`
lemma IsRetroCompact.preimage_of_isClosedEmbedding {s : Set Y} (hf : IsClosedEmbedding f)
    (hf' : IsCompact (range f)ᶜ) (hs : IsRetroCompact s) : IsRetroCompact (f ⁻¹' s) := by
  rintro U hUcomp hUopen
  have hfUopen : IsOpen (f '' U ∪ (range f)ᶜ) := by
    simpa [← range_diff_image hf.injective, sdiff_eq, compl_inter, union_comm]
      using (hf.isClosedMap _ hUopen.isClosed_compl).isOpen_compl
  have hfUcomp : IsCompact (f '' U ∪ (range f)ᶜ) := (hUcomp.image hf.continuous).union hf'
  simpa [inter_union_distrib_left, inter_left_comm, inter_eq_right.2 (image_subset_range ..),
    hf.isCompact_iff, image_preimage_inter] using (hs hfUcomp hfUopen).inter_left hf.isClosed_range

/-! ### Constructible sets -/

/-- A constructible set is a set that can be written as the
finite union/finite intersection/complement of open retrocompact sets.

In other words, constructible sets form the boolean subalgebra generated by open retrocompact sets.
-/
def IsConstructible (s : Set X) : Prop :=
  s ∈ BooleanSubalgebra.closure {U | IsOpen U ∧ IsRetroCompact U}

@[simp]
protected lemma IsConstructible.empty : IsConstructible (∅ : Set X) := BooleanSubalgebra.bot_mem

@[simp]
protected lemma IsConstructible.univ : IsConstructible (univ : Set X) := BooleanSubalgebra.top_mem

lemma IsConstructible.union : IsConstructible s → IsConstructible t → IsConstructible (s ∪ t) :=
  BooleanSubalgebra.sup_mem

lemma IsConstructible.inter : IsConstructible s → IsConstructible t → IsConstructible (s ∩ t) :=
  BooleanSubalgebra.inf_mem

lemma IsConstructible.sdiff : IsConstructible s → IsConstructible t → IsConstructible (s \ t) :=
  BooleanSubalgebra.sdiff_mem

lemma IsConstructible.himp : IsConstructible s → IsConstructible t → IsConstructible (s ⇨ t) :=
  BooleanSubalgebra.himp_mem

@[simp] lemma isConstructible_compl : IsConstructible sᶜ ↔ IsConstructible s :=
  BooleanSubalgebra.compl_mem_iff

alias ⟨IsConstructible.of_compl, IsConstructible.compl⟩ := isConstructible_compl

lemma IsConstructible.iUnion [Finite ι] {f : ι → Set X} (hf : ∀ i, IsConstructible (f i)) :
    IsConstructible (⋃ i, f i) := BooleanSubalgebra.iSup_mem hf

lemma IsConstructible.iInter [Finite ι] {f : ι → Set X} (hf : ∀ i, IsConstructible (f i)) :
    IsConstructible (⋂ i, f i) := BooleanSubalgebra.iInf_mem hf

lemma IsConstructible.sUnion {S : Set (Set X)} (hS : S.Finite) (hS' : ∀ s ∈ S, IsConstructible s) :
    IsConstructible (⋃₀ S) := BooleanSubalgebra.sSup_mem hS hS'

lemma IsConstructible.sInter {S : Set (Set X)} (hS : S.Finite) (hS' : ∀ s ∈ S, IsConstructible s) :
    IsConstructible (⋂₀ S) := BooleanSubalgebra.sInf_mem hS hS'

lemma IsConstructible.biUnion {ι : Type*} {f : ι → Set X} {t : Set ι} (ht : t.Finite)
    (hf : ∀ i ∈ t, IsConstructible (f i)) : IsConstructible (⋃ i ∈ t, f i) :=
  BooleanSubalgebra.biSup_mem ht hf

lemma IsConstructible.biInter {ι : Type*} {f : ι → Set X} {t : Set ι} (ht : t.Finite)
    (hf : ∀ i ∈ t, IsConstructible (f i)) : IsConstructible (⋂ i ∈ t, f i) :=
  BooleanSubalgebra.biInf_mem ht hf

lemma IsRetroCompact.isConstructible (hUopen : IsOpen U) (hUcomp : IsRetroCompact U) :
    IsConstructible U := BooleanSubalgebra.subset_closure ⟨hUopen, hUcomp⟩

/-- An induction principle for constructible sets. If `p` holds for all open retrocompact
sets, and is preserved under union and complement, then `p` holds for all constructible sets. -/
@[elab_as_elim]
lemma IsConstructible.empty_union_induction {p : ∀ s : Set X, IsConstructible s → Prop}
    (open_retrocompact : ∀ U (hUopen : IsOpen U) (hUcomp : IsRetroCompact U),
      p U (BooleanSubalgebra.subset_closure ⟨hUopen, hUcomp⟩))
    (union : ∀ s hs t ht, p s hs → p t ht → p (s ∪ t) (hs.union ht))
    (compl : ∀ s hs, p s hs → p sᶜ hs.compl) {s} (hs : IsConstructible s) : p s hs := by
  induction hs using BooleanSubalgebra.closure_bot_sup_induction with
  | mem U hU => exact open_retrocompact _ hU.1 hU.2
  | bot => exact open_retrocompact _ isOpen_empty .empty
  | sup s hs t ht hs' ht' => exact union _ _ _ _ hs' ht'
  | compl s hs hs' => exact compl _ _ hs'

/-- If `f` is continuous and is such that preimages of retrocompact sets are retrocompact, then
preimages of constructible sets are constructible. -/
@[stacks 005I]
lemma IsConstructible.preimage {s : Set Y} (hfcont : Continuous f)
    (hf : ∀ s, IsRetroCompact s → IsRetroCompact (f ⁻¹' s)) (hs : IsConstructible s) :
    IsConstructible (f ⁻¹' s) := by
  induction hs using IsConstructible.empty_union_induction with
  | open_retrocompact U hUopen hUcomp =>
    exact (hf _ hUcomp).isConstructible <| hUopen.preimage hfcont
  | union s hs t ht hs' ht' => rw [preimage_union]; exact hs'.union ht'
  | compl s hs hs' => rw [preimage_compl]; exact hs'.compl

@[stacks 005J]
lemma IsConstructible.preimage_of_isOpenEmbedding {s : Set Y} (hf : IsOpenEmbedding f)
    (hs : IsConstructible s) : IsConstructible (f ⁻¹' s) :=
  hs.preimage hf.continuous fun _t ht ↦ ht.preimage_of_isOpenEmbedding hf

@[stacks 09YE]
lemma IsConstructible.preimage_of_isClosedEmbedding {s : Set Y} (hf : IsClosedEmbedding f)
    (hf' : IsCompact (range f)ᶜ) (hs : IsConstructible s) : IsConstructible (f ⁻¹' s) :=
  hs.preimage hf.continuous fun _t ht ↦ ht.preimage_of_isClosedEmbedding hf hf'

@[stacks 09YD]
lemma IsConstructible.image_of_isOpenEmbedding (hfopen : IsOpenEmbedding f)
    (hfcomp : IsRetroCompact (range f)) (hs : IsConstructible s) : IsConstructible (f '' s) := by
  induction hs using IsConstructible.empty_union_induction with
  | open_retrocompact U hUopen hUcomp =>
    exact (hUcomp.image_of_isEmbedding hfopen.isEmbedding hfcomp).isConstructible <|
      hfopen.isOpenMap _ hUopen
  | union s hs t ht hs' ht' => rw [image_union]; exact hs'.union ht'
  | compl s hs hs' =>
    rw [← range_diff_image hfopen.injective]
    exact (hfcomp.isConstructible hfopen.isOpen_range).sdiff hs'

@[stacks 09YG]
lemma IsConstructible.image_of_isClosedEmbedding (hf : IsClosedEmbedding f)
    (hfcomp : IsRetroCompact (range f)ᶜ) (hs : IsConstructible s) : IsConstructible (f '' s) := by
  induction hs using IsConstructible.empty_union_induction with
  | open_retrocompact U hUopen hUcomp =>
    have hfU : IsOpen (f '' U ∪ (range f)ᶜ) := by
      simpa [← range_diff_image hf.injective, sdiff_eq, compl_inter, union_comm]
        using (hf.isClosedMap _ hUopen.isClosed_compl).isOpen_compl
    suffices h : IsRetroCompact (f '' U ∪ (range f)ᶜ) by
      simpa [union_inter_distrib_right, inter_eq_left.2 (image_subset_range ..)]
        using (h.isConstructible hfU).sdiff (hfcomp.isConstructible hf.isClosed_range.isOpen_compl)
    rintro V hVcomp hVopen
    rw [union_inter_distrib_right, ← image_inter_preimage]
    exact ((hUcomp (hf.isCompact_preimage hVcomp) (hVopen.preimage hf.continuous)).image
      hf.continuous).union <| hfcomp hVcomp hVopen
  | union s hs t ht hs' ht' => rw [image_union]; exact hs'.union ht'
  | compl s hs hs' =>
    rw [← range_diff_image hf.injective]
    exact (hfcomp.isConstructible hf.isClosed_range.isOpen_compl).of_compl.sdiff hs'

section CompactSpace
variable [CompactSpace X] {P : ∀ s : Set X, IsConstructible s → Prop} {B : Set (Set X)}

lemma IsRetroCompact.isCompact (hs : IsRetroCompact s) : IsCompact s := by
  simpa using hs CompactSpace.isCompact_univ

lemma TopologicalSpace.IsTopologicalBasis.isRetroCompact_iff_isCompact
    (basis : IsTopologicalBasis B) (compact_inter : ∀ U ∈ B, ∀ V ∈ B, IsCompact (U ∩ V))
    (hU : IsOpen U) : IsRetroCompact U ↔ IsCompact U := by
  refine ⟨IsRetroCompact.isCompact, fun hU' {V} hV' hV ↦ ?_⟩
  -- have hb (i : PLift ι) : IsCompact (b i.down) := by simpa using compact_inter i.down i.down
  -- have := isCompact_open_iff_eq_finite_iUnion_of_isTopologicalBasis (b ∘ PLift.down)
  --   (by simpa [PLift.down_surjective.range_comp] using basis) hb
  obtain ⟨s, rfl⟩ := eq_sUnion_finset_of_isTopologicalBasis_of_isCompact_open _ basis _ hU' hU
  obtain ⟨t, rfl⟩ := eq_sUnion_finset_of_isTopologicalBasis_of_isCompact_open _ basis _ hV' hV
  rw [Set.sUnion_inter_sUnion]
  refine ((s.finite_toSet.image _).prod (t.finite_toSet.image _)).isCompact_biUnion ?_
  simp only [mem_prod, mem_image, Finset.mem_coe, Subtype.exists, exists_and_right, exists_eq_right,
    and_imp, forall_exists_index, Prod.forall]
  exact fun u v hu _ hv _ ↦ compact_inter _ hu _ hv

lemma TopologicalSpace.IsTopologicalBasis.isRetroCompact (basis : IsTopologicalBasis B)
    (compact_inter : ∀ U ∈ B, ∀ V ∈ B, IsCompact (U ∩ V)) (hU : U ∈ B) : IsRetroCompact U :=
  (basis.isRetroCompact_iff_isCompact compact_inter <| basis.isOpen hU).2 <| by
    simpa using compact_inter _ hU _ hU

lemma TopologicalSpace.IsTopologicalBasis.isConstructible (basis : IsTopologicalBasis B)
    (compact_inter : ∀ U ∈ B, ∀ V ∈ B, IsCompact (U ∩ V)) (hU : U ∈ B) : IsConstructible U :=
  (basis.isRetroCompact compact_inter hU).isConstructible <| basis.isOpen hU

proof_wanted IsConstructible.induction_of_isTopologicalBasis (basis : IsTopologicalBasis B)
    (compact_inter : ∀ U ∈ B, ∀ V ∈ B, IsCompact (U ∩ V))
    (sdiff : ∀ U (hU : U ∈ B) 𝒱 (h𝒱B : 𝒱 ⊆ B) (h𝒱 : 𝒱.Finite), P (U \ ⋃ V ∈ 𝒱, V)
      ((basis.isConstructible compact_inter hU).sdiff <| .biUnion h𝒱 fun V hV ↦
        basis.isConstructible compact_inter <| h𝒱B hV))
    (union : ∀ s hs t ht, P s hs → P t ht → P (s ∪ t) (hs.union ht))
    (s : Set X) (hs : IsConstructible s) : P s hs

end CompactSpace

/-! ### Locally constructible sets -/

/-- A set in a topological space is locally constructible, if it can be partitioned along an open
cover such that every part is constructible -/
@[stacks 005G]
def IsLocallyConstructible (s : Set X) : Prop :=
  ∃ 𝒰 : Set (Set X),
    (∀ x, ∃ U ∈ 𝒰, x ∈ U) ∧ (∀ U ∈ 𝒰, IsOpen U) ∧ ∀ U ∈ 𝒰, IsConstructible (s ∩ U)

lemma IsLocallyConstructible.of_iUnion {ι : Sort*} {f : ι → Set X} (cover : ∀ x, ∃ i, x ∈ f i)
    (isOpen : ∀ i, IsOpen (f i)) (constructible : ∀ i, IsConstructible (s ∩ f i)) :
    IsLocallyConstructible s := ⟨range f, by simpa, by simpa, by simpa⟩

lemma IsConstructible.isLocallyConstructible (hs : IsConstructible s) : IsLocallyConstructible s :=
  ⟨{univ}, by simpa⟩

lemma IsRetroCompact.isLocallyConstructible (hUopen : IsOpen U) (hUcomp : IsRetroCompact U) :
    IsLocallyConstructible U := (hUcomp.isConstructible hUopen).isLocallyConstructible

@[simp] protected lemma IsLocallyConstructible.empty : IsLocallyConstructible (∅ : Set X) :=
  IsConstructible.empty.isLocallyConstructible

@[simp] protected lemma IsLocallyConstructible.univ : IsLocallyConstructible (univ : Set X) :=
  IsConstructible.univ.isLocallyConstructible

lemma IsLocallyConstructible.inter :
    IsLocallyConstructible s → IsLocallyConstructible t → IsLocallyConstructible (s ∩ t) := by
  rintro ⟨F, hFcov, hFopen, hFcons⟩ ⟨G, hGcov, hGopen, hGcons⟩
  refine .of_iUnion (f := fun ((U, V) : F × G) ↦ U.1 ∩ V.1) (fun x ↦ ?_)
    (fun (⟨U, hU⟩, ⟨V, hV⟩) ↦ (hFopen _ hU).inter (hGopen _ hV)) fun (⟨U, hU⟩, ⟨V, hV⟩) ↦ ?_
  · obtain ⟨U, hU, hxU⟩ := hFcov x
    obtain ⟨V, hV, hxV⟩ := hGcov x
    exact ⟨(⟨U, hU⟩, ⟨V, hV⟩), hxU, hxV⟩
  · rw [inter_inter_inter_comm]
    exact (hFcons _ hU).inter (hGcons _ hV)

lemma IsLocallyConstructible.finsetInf {ι : Type*} {s : Finset ι} {t : ι → Set X}
    (ht : ∀ i ∈ s, IsLocallyConstructible (t i)) : IsLocallyConstructible (s.inf t) := by
  induction' s using Finset.cons_induction with i s ih hi
  · simp
  · rw [Finset.inf_cons]
    exact (ht _ <| by simp).inter <| hi <| Finset.forall_of_forall_cons ht

set_option linter.docPrime false in
lemma IsLocallyConstructible.finsetInf' {ι : Type*} {s : Finset ι} {hs} {t : ι → Set X}
    (ht : ∀ i ∈ s, IsLocallyConstructible (t i)) : IsLocallyConstructible (s.inf' hs t) := by
  rw [Finset.inf'_eq_inf]; exact .finsetInf ht

private lemma infClosed_isLocallyConstructible : InfClosed {s : Set X | IsLocallyConstructible s} :=
  fun _s hs _t ht ↦ hs.inter ht

lemma IsLocallyConstructible.iInter [Finite ι] {f : ι → Set X}
    (hf : ∀ i, IsLocallyConstructible (f i)) : IsLocallyConstructible (⋂ i, f i) :=
  infClosed_isLocallyConstructible.iInf_mem .univ hf

lemma IsLocallyConstructible.sInter {S : Set (Set X)} (hS : S.Finite)
    (hS' : ∀ s ∈ S, IsLocallyConstructible s) : IsLocallyConstructible (⋂₀ S) :=
  infClosed_isLocallyConstructible.sInf_mem hS .univ hS'
