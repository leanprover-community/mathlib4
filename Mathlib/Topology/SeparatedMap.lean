/-
Copyright (c) 2023 Junyan Xu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Junyan Xu
-/
import Mathlib.Topology.Connected.Basic
import Mathlib.Topology.Separation.Basic
/-!
# Separated maps and locally injective maps out of a topological space.

This module introduces a pair of dual notions `IsSeparatedMap` and `IsLocallyInjective`.

A function from a topological space `X` to a type `Y` is a separated map if any two distinct
points in `X` with the same image in `Y` can be separated by open neighborhoods.
A constant function is a separated map if and only if `X` is a `T2Space`.

A function from a topological space `X` is locally injective if every point of `X`
has a neighborhood on which `f` is injective.
A constant function is locally injective if and only if `X` is discrete.

Given `f : X ‚Üí Y` we can form the pullback $X \times_Y X$; the diagonal map
$\Delta: X \to X \times_Y X$ is always an embedding. It is a closed embedding
iff `f` is a separated map, iff the equal locus of any two continuous maps
coequalized by `f` is closed. It is an open embedding iff `f` is locally injective,
iff any such equal locus is open. Therefore, if `f` is a locally injective separated map,
the equal locus of two continuous maps coequalized by `f` is clopen, so if the two maps
agree on a point, then they agree on the whole connected component.

The analogue of separated maps and locally injective maps in algebraic geometry are
separated morphisms and unramified morphisms, respectively.

## Reference

https://stacks.math.columbia.edu/tag/0CY0
-/

open Topology

variable {X Y A} [TopologicalSpace X] [TopologicalSpace A]

protected lemma Topology.IsEmbedding.toPullbackDiag (f : X ‚Üí Y) : IsEmbedding (toPullbackDiag f) :=
  .mk' _ (injective_toPullbackDiag f) fun x ‚Ü¶ by
    rw [toPullbackDiag, nhds_induced, Filter.comap_comap, nhds_prod_eq, Filter.comap_prod]
    erw [Filter.comap_id, inf_idem]

@[deprecated (since := "2024-10-26")]
alias embedding_toPullbackDiag := IsEmbedding.toPullbackDiag

lemma Continuous.mapPullback {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ Z‚ÇÅ Z‚ÇÇ}
    [TopologicalSpace X‚ÇÅ] [TopologicalSpace X‚ÇÇ] [TopologicalSpace Z‚ÇÅ] [TopologicalSpace Z‚ÇÇ]
    {f‚ÇÅ : X‚ÇÅ ‚Üí Y‚ÇÅ} {g‚ÇÅ : Z‚ÇÅ ‚Üí Y‚ÇÅ} {f‚ÇÇ : X‚ÇÇ ‚Üí Y‚ÇÇ} {g‚ÇÇ : Z‚ÇÇ ‚Üí Y‚ÇÇ}
    {mapX : X‚ÇÅ ‚Üí X‚ÇÇ} (contX : Continuous mapX) {mapY : Y‚ÇÅ ‚Üí Y‚ÇÇ}
    {mapZ : Z‚ÇÅ ‚Üí Z‚ÇÇ} (contZ : Continuous mapZ)
    {commX : f‚ÇÇ ‚àò mapX = mapY ‚àò f‚ÇÅ} {commZ : g‚ÇÇ ‚àò mapZ = mapY ‚àò g‚ÇÅ} :
    Continuous (Function.mapPullback mapX mapY mapZ commX commZ) := by
  refine continuous_induced_rng.mpr (continuous_prod_mk.mpr ‚ü®?_, ?_‚ü©) <;>
  apply_rules [continuous_fst, continuous_snd, continuous_subtype_val, Continuous.comp]

/-- A function from a topological space `X` to a type `Y` is a separated map if any two distinct
  points in `X` with the same image in `Y` can be separated by open neighborhoods. -/
def IsSeparatedMap (f : X ‚Üí Y) : Prop := ‚àÄ x‚ÇÅ x‚ÇÇ, f x‚ÇÅ = f x‚ÇÇ ‚Üí
    x‚ÇÅ ‚â† x‚ÇÇ ‚Üí ‚àÉ s‚ÇÅ s‚ÇÇ, IsOpen s‚ÇÅ ‚àß IsOpen s‚ÇÇ ‚àß x‚ÇÅ ‚àà s‚ÇÅ ‚àß x‚ÇÇ ‚àà s‚ÇÇ ‚àß Disjoint s‚ÇÅ s‚ÇÇ

lemma t2space_iff_isSeparatedMap (y : Y) : T2Space X ‚Üî IsSeparatedMap fun _ : X ‚Ü¶ y :=
  ‚ü®fun ‚ü®t2‚ü© _ _ _ hne ‚Ü¶ t2 hne, fun sep ‚Ü¶ ‚ü®fun x‚ÇÅ x‚ÇÇ hne ‚Ü¶ sep x‚ÇÅ x‚ÇÇ rfl hne‚ü©‚ü©

lemma T2Space.isSeparatedMap [T2Space X] (f : X ‚Üí Y) : IsSeparatedMap f := fun _ _ _ ‚Ü¶ t2_separation

lemma Function.Injective.isSeparatedMap {f : X ‚Üí Y} (inj : f.Injective) : IsSeparatedMap f :=
  fun _ _ he hne ‚Ü¶ (hne (inj he)).elim

lemma isSeparatedMap_iff_disjoint_nhds {f : X ‚Üí Y} : IsSeparatedMap f ‚Üî
    ‚àÄ x‚ÇÅ x‚ÇÇ, f x‚ÇÅ = f x‚ÇÇ ‚Üí x‚ÇÅ ‚â† x‚ÇÇ ‚Üí Disjoint (ùìù x‚ÇÅ) (ùìù x‚ÇÇ) :=
  forall‚ÇÉ_congr fun x x' _ ‚Ü¶ by simp only [(nhds_basis_opens x).disjoint_iff (nhds_basis_opens x'),
    exists_prop, ‚Üê exists_and_left, and_assoc, and_comm, and_left_comm]

lemma isSeparatedMap_iff_nhds {f : X ‚Üí Y} : IsSeparatedMap f ‚Üî
    ‚àÄ x‚ÇÅ x‚ÇÇ, f x‚ÇÅ = f x‚ÇÇ ‚Üí x‚ÇÅ ‚â† x‚ÇÇ ‚Üí ‚àÉ s‚ÇÅ ‚àà ùìù x‚ÇÅ, ‚àÉ s‚ÇÇ ‚àà ùìù x‚ÇÇ, Disjoint s‚ÇÅ s‚ÇÇ := by
  simp_rw [isSeparatedMap_iff_disjoint_nhds, Filter.disjoint_iff]

open Set Filter in
theorem isSeparatedMap_iff_isClosed_diagonal {f : X ‚Üí Y} :
    IsSeparatedMap f ‚Üî IsClosed f.pullbackDiagonal := by
  simp_rw [isSeparatedMap_iff_nhds, ‚Üê isOpen_compl_iff, isOpen_iff_mem_nhds,
    Subtype.forall, Prod.forall, nhds_induced, nhds_prod_eq]
  refine forall‚ÇÑ_congr fun x‚ÇÅ x‚ÇÇ _ _ ‚Ü¶ ‚ü®fun h ‚Ü¶ ?_, fun ‚ü®t, ht, t_sub‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ simp_rw [‚Üê Filter.disjoint_iff, ‚Üê compl_diagonal_mem_prod] at h
    exact ‚ü®_, h, subset_rfl‚ü©
  ¬∑ obtain ‚ü®s‚ÇÅ, h‚ÇÅ, s‚ÇÇ, h‚ÇÇ, s_sub‚ü© := mem_prod_iff.mp ht
    exact ‚ü®s‚ÇÅ, h‚ÇÅ, s‚ÇÇ, h‚ÇÇ, disjoint_left.2 fun x h‚ÇÅ h‚ÇÇ ‚Ü¶ @t_sub ‚ü®(x, x), rfl‚ü© (s_sub ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©) rfl‚ü©

theorem isSeparatedMap_iff_isClosedEmbedding {f : X ‚Üí Y} :
    IsSeparatedMap f ‚Üî IsClosedEmbedding (toPullbackDiag f) := by
  rw [isSeparatedMap_iff_isClosed_diagonal, ‚Üê range_toPullbackDiag]
  exact ‚ü®fun h ‚Ü¶ ‚ü®.toPullbackDiag f, h‚ü©, fun h ‚Ü¶ h.isClosed_range‚ü©

@[deprecated (since := "2024-10-20")]
alias isSeparatedMap_iff_closedEmbedding := isSeparatedMap_iff_isClosedEmbedding

theorem isSeparatedMap_iff_isClosedMap {f : X ‚Üí Y} :
    IsSeparatedMap f ‚Üî IsClosedMap (toPullbackDiag f) :=
  isSeparatedMap_iff_isClosedEmbedding.trans
    ‚ü®IsClosedEmbedding.isClosedMap, .of_continuous_injective_isClosedMap
      (IsEmbedding.toPullbackDiag f).continuous (injective_toPullbackDiag f)‚ü©

open Function.Pullback in
theorem IsSeparatedMap.pullback {f : X ‚Üí Y} (sep : IsSeparatedMap f) (g : A ‚Üí Y) :
    IsSeparatedMap (@snd X Y A f g) := by
  rw [isSeparatedMap_iff_isClosed_diagonal] at sep ‚ä¢
  rw [‚Üê preimage_map_fst_pullbackDiagonal]
  refine sep.preimage (Continuous.mapPullback ?_ ?_) <;>
  apply_rules [continuous_fst, continuous_subtype_val, Continuous.comp]

theorem IsSeparatedMap.comp_left {A} {f : X ‚Üí Y} (sep : IsSeparatedMap f) {g : Y ‚Üí A}
    (inj : g.Injective) : IsSeparatedMap (g ‚àò f) := fun x‚ÇÅ x‚ÇÇ he ‚Ü¶ sep x‚ÇÅ x‚ÇÇ (inj he)

theorem IsSeparatedMap.comp_right {f : X ‚Üí Y} (sep : IsSeparatedMap f) {g : A ‚Üí X}
    (cont : Continuous g) (inj : g.Injective) : IsSeparatedMap (f ‚àò g) := by
  rw [isSeparatedMap_iff_isClosed_diagonal] at sep ‚ä¢
  rw [‚Üê inj.preimage_pullbackDiagonal]
  exact sep.preimage (cont.mapPullback cont)

/-- A function from a topological space `X` is locally injective if every point of `X`
  has a neighborhood on which `f` is injective. -/
def IsLocallyInjective (f : X ‚Üí Y) : Prop := ‚àÄ x : X, ‚àÉ U, IsOpen U ‚àß x ‚àà U ‚àß U.InjOn f

lemma Function.Injective.IsLocallyInjective {f : X ‚Üí Y} (inj : f.Injective) :
    IsLocallyInjective f := fun _ ‚Ü¶ ‚ü®_, isOpen_univ, trivial, fun _ _ _ _ ‚Ü¶ @inj _ _‚ü©

lemma isLocallyInjective_iff_nhds {f : X ‚Üí Y} :
    IsLocallyInjective f ‚Üî ‚àÄ x : X, ‚àÉ U ‚àà ùìù x, U.InjOn f := by
  constructor <;> intro h x
  ¬∑ obtain ‚ü®U, ho, hm, hi‚ü© := h x; exact ‚ü®U, ho.mem_nhds hm, hi‚ü©
  ¬∑ obtain ‚ü®U, hn, hi‚ü© := h x
    exact ‚ü®interior U, isOpen_interior, mem_interior_iff_mem_nhds.mpr hn, hi.mono interior_subset‚ü©

theorem isLocallyInjective_iff_isOpen_diagonal {f : X ‚Üí Y} :
    IsLocallyInjective f ‚Üî IsOpen f.pullbackDiagonal := by
  simp_rw [isLocallyInjective_iff_nhds, isOpen_iff_mem_nhds,
    Subtype.forall, Prod.forall, nhds_induced, nhds_prod_eq, Filter.mem_comap]
  refine ‚ü®?_, fun h x ‚Ü¶ ?_‚ü©
  ¬∑ rintro h x x' hx (rfl : x = x')
    obtain ‚ü®U, hn, hi‚ü© := h x
    exact ‚ü®_, Filter.prod_mem_prod hn hn, fun {p} hp ‚Ü¶ hi hp.1 hp.2 p.2‚ü©
  ¬∑ obtain ‚ü®t, ht, t_sub‚ü© := h x x rfl rfl
    obtain ‚ü®t‚ÇÅ, h‚ÇÅ, t‚ÇÇ, h‚ÇÇ, prod_sub‚ü© := Filter.mem_prod_iff.mp ht
    exact ‚ü®t‚ÇÅ ‚à© t‚ÇÇ, Filter.inter_mem h‚ÇÅ h‚ÇÇ,
      fun x‚ÇÅ h‚ÇÅ x‚ÇÇ h‚ÇÇ he ‚Ü¶ @t_sub ‚ü®(x‚ÇÅ, x‚ÇÇ), he‚ü© (prod_sub ‚ü®h‚ÇÅ.1, h‚ÇÇ.2‚ü©)‚ü©

theorem IsLocallyInjective_iff_isOpenEmbedding {f : X ‚Üí Y} :
    IsLocallyInjective f ‚Üî IsOpenEmbedding (toPullbackDiag f) := by
  rw [isLocallyInjective_iff_isOpen_diagonal, ‚Üê range_toPullbackDiag]
  exact ‚ü®fun h ‚Ü¶ ‚ü®.toPullbackDiag f, h‚ü©, fun h ‚Ü¶ h.isOpen_range‚ü©

@[deprecated (since := "2024-10-18")]
alias IsLocallyInjective_iff_openEmbedding := IsLocallyInjective_iff_isOpenEmbedding

theorem isLocallyInjective_iff_isOpenMap {f : X ‚Üí Y} :
    IsLocallyInjective f ‚Üî IsOpenMap (toPullbackDiag f) :=
  IsLocallyInjective_iff_isOpenEmbedding.trans
    ‚ü®IsOpenEmbedding.isOpenMap, .of_continuous_injective_isOpenMap
      (IsEmbedding.toPullbackDiag f).continuous (injective_toPullbackDiag f)‚ü©

theorem discreteTopology_iff_locallyInjective (y : Y) :
    DiscreteTopology X ‚Üî IsLocallyInjective fun _ : X ‚Ü¶ y := by
  rw [discreteTopology_iff_singleton_mem_nhds, isLocallyInjective_iff_nhds]
  refine forall_congr' fun x ‚Ü¶ ‚ü®fun h ‚Ü¶ ‚ü®{x}, h, Set.injOn_singleton _ _‚ü©, fun ‚ü®U, hU, inj‚ü© ‚Ü¶ ?_‚ü©
  convert hU; ext x'; refine ‚ü®?_, fun h ‚Ü¶ inj h (mem_of_mem_nhds hU) rfl‚ü©
  rintro rfl; exact mem_of_mem_nhds hU

theorem IsLocallyInjective.comp_left {A} {f : X ‚Üí Y} (hf : IsLocallyInjective f) {g : Y ‚Üí A}
    (hg : g.Injective) : IsLocallyInjective (g ‚àò f) :=
  fun x ‚Ü¶ let ‚ü®U, hU, hx, inj‚ü© := hf x; ‚ü®U, hU, hx, hg.comp_injOn inj‚ü©

theorem IsLocallyInjective.comp_right {f : X ‚Üí Y} (hf : IsLocallyInjective f) {g : A ‚Üí X}
    (cont : Continuous g) (hg : g.Injective) : IsLocallyInjective (f ‚àò g) := by
  rw [isLocallyInjective_iff_isOpen_diagonal] at hf ‚ä¢
  rw [‚Üê hg.preimage_pullbackDiagonal]
  apply hf.preimage (cont.mapPullback cont)

section eqLocus

variable {f : X ‚Üí Y} {g‚ÇÅ g‚ÇÇ : A ‚Üí X} (h‚ÇÅ : Continuous g‚ÇÅ) (h‚ÇÇ : Continuous g‚ÇÇ)
include h‚ÇÅ h‚ÇÇ

#adaptation_note
/--
After https://github.com/leanprover/lean4/pull/5338,
the unused variable linter flags `g` here,
but it is used in a type ascription to direct `fun_prop`.
-/
set_option linter.unusedVariables false in
theorem IsSeparatedMap.isClosed_eqLocus (sep : IsSeparatedMap f) (he : f ‚àò g‚ÇÅ = f ‚àò g‚ÇÇ) :
    IsClosed {a | g‚ÇÅ a = g‚ÇÇ a} :=
  let g : A ‚Üí f.Pullback f := fun a ‚Ü¶ ‚ü®‚ü®g‚ÇÅ a, g‚ÇÇ a‚ü©, congr_fun he a‚ü©
  (isSeparatedMap_iff_isClosed_diagonal.mp sep).preimage (by fun_prop : Continuous g)

#adaptation_note
/--
After https://github.com/leanprover/lean4/pull/5338,
the unused variable linter flags `g` here,
but it is used in a type ascription to direct `fun_prop`.
-/
set_option linter.unusedVariables false in
theorem IsLocallyInjective.isOpen_eqLocus (inj : IsLocallyInjective f) (he : f ‚àò g‚ÇÅ = f ‚àò g‚ÇÇ) :
    IsOpen {a | g‚ÇÅ a = g‚ÇÇ a} :=
  let g : A ‚Üí f.Pullback f := fun a ‚Ü¶ ‚ü®‚ü®g‚ÇÅ a, g‚ÇÇ a‚ü©, congr_fun he a‚ü©
  (isLocallyInjective_iff_isOpen_diagonal.mp inj).preimage (by fun_prop : Continuous g)

end eqLocus

variable {X E A : Type*} [TopologicalSpace E] [TopologicalSpace A] {p : E ‚Üí X}

namespace IsSeparatedMap

variable {s : Set A} {g g‚ÇÅ g‚ÇÇ : A ‚Üí E} (sep : IsSeparatedMap p) (inj : IsLocallyInjective p)
include sep inj

/-- If `p` is a locally injective separated map, and `A` is a connected space,
  then two lifts `g‚ÇÅ, g‚ÇÇ : A ‚Üí E` of a map `f : A ‚Üí X` are equal if they agree at one point. -/
theorem eq_of_comp_eq
    [PreconnectedSpace A] (h‚ÇÅ : Continuous g‚ÇÅ) (h‚ÇÇ : Continuous g‚ÇÇ)
    (he : p ‚àò g‚ÇÅ = p ‚àò g‚ÇÇ) (a : A) (ha : g‚ÇÅ a = g‚ÇÇ a) : g‚ÇÅ = g‚ÇÇ := funext fun a' ‚Ü¶ by
  apply (IsClopen.eq_univ ‚ü®sep.isClosed_eqLocus h‚ÇÅ h‚ÇÇ he, inj.isOpen_eqLocus h‚ÇÅ h‚ÇÇ he‚ü© ‚ü®a, ha‚ü©).symm
    ‚ñ∏ Set.mem_univ a'

theorem eqOn_of_comp_eqOn (hs : IsPreconnected s) (h‚ÇÅ : ContinuousOn g‚ÇÅ s) (h‚ÇÇ : ContinuousOn g‚ÇÇ s)
    (he : s.EqOn (p ‚àò g‚ÇÅ) (p ‚àò g‚ÇÇ)) {a : A} (has : a ‚àà s) (ha : g‚ÇÅ a = g‚ÇÇ a) : s.EqOn g‚ÇÅ g‚ÇÇ := by
  rw [‚Üê Set.restrict_eq_restrict_iff] at he ‚ä¢
  rw [continuousOn_iff_continuous_restrict] at h‚ÇÅ h‚ÇÇ
  rw [isPreconnected_iff_preconnectedSpace] at hs
  exact sep.eq_of_comp_eq inj h‚ÇÅ h‚ÇÇ he ‚ü®a, has‚ü© ha

theorem const_of_comp [PreconnectedSpace A] (cont : Continuous g)
    (he : ‚àÄ a a', p (g a) = p (g a')) (a a') : g a = g a' :=
  congr_fun (sep.eq_of_comp_eq inj cont continuous_const (funext fun a ‚Ü¶ he a a') a' rfl) a

theorem constOn_of_comp (hs : IsPreconnected s) (cont : ContinuousOn g s)
    (he : ‚àÄ a ‚àà s, ‚àÄ a' ‚àà s, p (g a) = p (g a'))
    {a a'} (ha : a ‚àà s) (ha' : a' ‚àà s) : g a = g a' :=
  sep.eqOn_of_comp_eqOn inj hs cont continuous_const.continuousOn
    (fun a ha ‚Ü¶ he a ha a' ha') ha' rfl ha

end IsSeparatedMap
