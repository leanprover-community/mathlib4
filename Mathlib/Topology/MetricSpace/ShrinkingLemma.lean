/-
Copyright (c) 2021 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov
-/
import Mathlib.Topology.MetricSpace.Basic
import Mathlib.Topology.EMetricSpace.Paracompact
import Mathlib.Topology.ShrinkingLemma

#align_import topology.metric_space.shrinking_lemma from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# Shrinking lemma in a proper metric space

In this file we prove a few versions of the shrinking lemma for coverings by balls in a proper
(pseudo) metric space.

## Tags

shrinking lemma, metric space
-/


universe u v

open Set Metric

open Topology

variable {Œ± : Type u} {Œπ : Type v} [MetricSpace Œ±] [ProperSpace Œ±] {c : Œπ ‚Üí Œ±}

variable {x : Œ±} {r : ‚Ñù} {s : Set Œ±}

/-- Shrinking lemma for coverings by open balls in a proper metric space. A point-finite open cover
of a closed subset of a proper metric space by open balls can be shrunk to a new cover by open balls
so that each of the new balls has strictly smaller radius than the old one. This version assumes
that `fun x ‚Ü¶ ball (c i) (r i)` is a locally finite covering and provides a covering indexed by the
same type. -/
theorem exists_subset_iUnion_ball_radius_lt {r : Œπ ‚Üí ‚Ñù} (hs : IsClosed s)
    (uf : ‚àÄ x ‚àà s, { i | x ‚àà ball (c i) (r i) }.Finite) (us : s ‚äÜ ‚ãÉ i, ball (c i) (r i)) :
    ‚àÉ r' : Œπ ‚Üí ‚Ñù, (s ‚äÜ ‚ãÉ i, ball (c i) (r' i)) ‚àß ‚àÄ i, r' i < r i := by
  rcases exists_subset_iUnion_closed_subset hs (fun i => @isOpen_ball _ _ (c i) (r i)) uf us with
    ‚ü®v, hsv, hvc, hcv‚ü©
  have := fun i => exists_lt_subset_ball (hvc i) (hcv i)
  choose r' hlt hsub using this
  exact ‚ü®r', hsv.trans <| iUnion_mono <| hsub, hlt‚ü©
#align exists_subset_Union_ball_radius_lt exists_subset_iUnion_ball_radius_lt

/-- Shrinking lemma for coverings by open balls in a proper metric space. A point-finite open cover
of a proper metric space by open balls can be shrunk to a new cover by open balls so that each of
the new balls has strictly smaller radius than the old one. -/
theorem exists_iUnion_ball_eq_radius_lt {r : Œπ ‚Üí ‚Ñù} (uf : ‚àÄ x, { i | x ‚àà ball (c i) (r i) }.Finite)
    (uU : ‚ãÉ i, ball (c i) (r i) = univ) :
    ‚àÉ r' : Œπ ‚Üí ‚Ñù, ‚ãÉ i, ball (c i) (r' i) = univ ‚àß ‚àÄ i, r' i < r i :=
  let ‚ü®r', hU, hv‚ü© := exists_subset_iUnion_ball_radius_lt isClosed_univ (fun x _ => uf x) uU.ge
  ‚ü®r', univ_subset_iff.1 hU, hv‚ü©
#align exists_Union_ball_eq_radius_lt exists_iUnion_ball_eq_radius_lt

/-- Shrinking lemma for coverings by open balls in a proper metric space. A point-finite open cover
of a closed subset of a proper metric space by nonempty open balls can be shrunk to a new cover by
nonempty open balls so that each of the new balls has strictly smaller radius than the old one. -/
theorem exists_subset_iUnion_ball_radius_pos_lt {r : Œπ ‚Üí ‚Ñù} (hr : ‚àÄ i, 0 < r i) (hs : IsClosed s)
    (uf : ‚àÄ x ‚àà s, { i | x ‚àà ball (c i) (r i) }.Finite) (us : s ‚äÜ ‚ãÉ i, ball (c i) (r i)) :
    ‚àÉ r' : Œπ ‚Üí ‚Ñù, (s ‚äÜ ‚ãÉ i, ball (c i) (r' i)) ‚àß ‚àÄ i, r' i ‚àà Ioo 0 (r i) := by
  rcases exists_subset_iUnion_closed_subset hs (fun i => @isOpen_ball _ _ (c i) (r i)) uf us with
    ‚ü®v, hsv, hvc, hcv‚ü©
  have := fun i => exists_pos_lt_subset_ball (hr i) (hvc i) (hcv i)
  choose r' hlt hsub using this
  exact ‚ü®r', hsv.trans <| iUnion_mono hsub, hlt‚ü©
#align exists_subset_Union_ball_radius_pos_lt exists_subset_iUnion_ball_radius_pos_lt

/-- Shrinking lemma for coverings by open balls in a proper metric space. A point-finite open cover
of a proper metric space by nonempty open balls can be shrunk to a new cover by nonempty open balls
so that each of the new balls has strictly smaller radius than the old one. -/
theorem exists_iUnion_ball_eq_radius_pos_lt {r : Œπ ‚Üí ‚Ñù} (hr : ‚àÄ i, 0 < r i)
    (uf : ‚àÄ x, { i | x ‚àà ball (c i) (r i) }.Finite) (uU : ‚ãÉ i, ball (c i) (r i) = univ) :
    ‚àÉ r' : Œπ ‚Üí ‚Ñù, ‚ãÉ i, ball (c i) (r' i) = univ ‚àß ‚àÄ i, r' i ‚àà Ioo 0 (r i) :=
  let ‚ü®r', hU, hv‚ü© :=
    exists_subset_iUnion_ball_radius_pos_lt hr isClosed_univ (fun x _ => uf x) uU.ge
  ‚ü®r', univ_subset_iff.1 hU, hv‚ü©
#align exists_Union_ball_eq_radius_pos_lt exists_iUnion_ball_eq_radius_pos_lt

/-- Let `R : Œ± ‚Üí ‚Ñù` be a (possibly discontinuous) function on a proper metric space.
Let `s` be a closed set in `Œ±` such that `R` is positive on `s`. Then there exists a collection of
pairs of balls `Metric.ball (c i) (r i)`, `Metric.ball (c i) (r' i)` such that

* all centers belong to `s`;
* for all `i` we have `0 < r i < r' i < R (c i)`;
* the family of balls `Metric.ball (c i) (r' i)` is locally finite;
* the balls `Metric.ball (c i) (r i)` cover `s`.

This is a simple corollary of `refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set`
and `exists_subset_iUnion_ball_radius_pos_lt`. -/
theorem exists_locallyFinite_subset_iUnion_ball_radius_lt (hs : IsClosed s) {R : Œ± ‚Üí ‚Ñù}
    (hR : ‚àÄ x ‚àà s, 0 < R x) :
    ‚àÉ (Œπ : Type u) (c : Œπ ‚Üí Œ±) (r r' : Œπ ‚Üí ‚Ñù),
      (‚àÄ i, c i ‚àà s ‚àß 0 < r i ‚àß r i < r' i ‚àß r' i < R (c i)) ‚àß
        (LocallyFinite fun i => ball (c i) (r' i)) ‚àß s ‚äÜ ‚ãÉ i, ball (c i) (r i) := by
  have : ‚àÄ x ‚àà s, (ùìù x).HasBasis (fun r : ‚Ñù => 0 < r ‚àß r < R x) fun r => ball x r := fun x hx =>
    nhds_basis_uniformity (uniformity_basis_dist_lt (hR x hx))
  rcases refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set hs this with
    ‚ü®Œπ, c, r', hr', hsub', hfin‚ü©
  rcases exists_subset_iUnion_ball_radius_pos_lt (fun i => (hr' i).2.1) hs
      (fun x _ => hfin.point_finite x) hsub' with
    ‚ü®r, hsub, hlt‚ü©
  exact ‚ü®Œπ, c, r, r', fun i => ‚ü®(hr' i).1, (hlt i).1, (hlt i).2, (hr' i).2.2‚ü©, hfin, hsub‚ü©
#align exists_locally_finite_subset_Union_ball_radius_lt exists_locallyFinite_subset_iUnion_ball_radius_lt

/-- Let `R : Œ± ‚Üí ‚Ñù` be a (possibly discontinuous) positive function on a proper metric space. Then
there exists a collection of pairs of balls `Metric.ball (c i) (r i)`, `Metric.ball (c i) (r' i)`
such that

* for all `i` we have `0 < r i < r' i < R (c i)`;
* the family of balls `Metric.ball (c i) (r' i)` is locally finite;
* the balls `Metric.ball (c i) (r i)` cover the whole space.

This is a simple corollary of `refinement_of_locallyCompact_sigmaCompact_of_nhds_basis`
and `exists_iUnion_ball_eq_radius_pos_lt` or `exists_locallyFinite_subset_iUnion_ball_radius_lt`. -/
theorem exists_locallyFinite_iUnion_eq_ball_radius_lt {R : Œ± ‚Üí ‚Ñù} (hR : ‚àÄ x, 0 < R x) :
    ‚àÉ (Œπ : Type u) (c : Œπ ‚Üí Œ±) (r r' : Œπ ‚Üí ‚Ñù),
      (‚àÄ i, 0 < r i ‚àß r i < r' i ‚àß r' i < R (c i)) ‚àß
        (LocallyFinite fun i => ball (c i) (r' i)) ‚àß ‚ãÉ i, ball (c i) (r i) = univ :=
  let ‚ü®Œπ, c, r, r', hlt, hfin, hsub‚ü© :=
    exists_locallyFinite_subset_iUnion_ball_radius_lt isClosed_univ fun x _ => hR x
  ‚ü®Œπ, c, r, r', fun i => (hlt i).2, hfin, univ_subset_iff.1 hsub‚ü©
#align exists_locally_finite_Union_eq_ball_radius_lt exists_locallyFinite_iUnion_eq_ball_radius_lt
