/-
Copyright (c) 2018 Robert Y. Lewis. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robert Y. Lewis, S√©bastien Gou√´zel
-/
import Mathlib.Analysis.Normed.Field.Basic

#align_import topology.metric_space.cau_seq_filter from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# Completeness in terms of `Cauchy` filters vs `isCauSeq` sequences

In this file we apply `Metric.complete_of_cauchySeq_tendsto` to prove that a `NormedRing`
is complete in terms of `Cauchy` filter if and only if it is complete in terms
of `CauSeq` Cauchy sequences.
-/


universe u v

open Set Filter

open Topology Classical

variable {Œ≤ : Type v}

theorem CauSeq.tendsto_limit [NormedRing Œ≤] [hn : IsAbsoluteValue (norm : Œ≤ ‚Üí ‚Ñù)]
    (f : CauSeq Œ≤ norm) [CauSeq.IsComplete Œ≤ norm] : Tendsto f atTop (ùìù f.lim) :=
  tendsto_nhds.mpr
    (by
      intro s os lfs
      suffices ‚àÉ a : ‚Ñï, ‚àÄ b : ‚Ñï, b ‚â• a ‚Üí f b ‚àà s by simpa using this
      rcases Metric.isOpen_iff.1 os _ lfs with ‚ü®Œµ, ‚ü®hŒµ, hŒµs‚ü©‚ü©
      cases' Setoid.symm (CauSeq.equiv_lim f) _ hŒµ with N hN
      exists N
      intro b hb
      apply hŒµs
      dsimp [Metric.ball]
      rw [dist_comm, dist_eq_norm]
      solve_by_elim)
#align cau_seq.tendsto_limit CauSeq.tendsto_limit

variable [NormedField Œ≤]

/-
 This section shows that if we have a uniform space generated by an absolute value, topological
 completeness and Cauchy sequence completeness coincide. The problem is that there isn't
 a good notion of "uniform space generated by an absolute value", so right now this is
 specific to norm. Furthermore, norm only instantiates IsAbsoluteValue on NormedDivisionRing.
 This needs to be fixed, since it prevents showing that ‚Ñ§_[hp] is complete.
-/
open Metric

theorem CauchySeq.isCauSeq {f : ‚Ñï ‚Üí Œ≤} (hf : CauchySeq f) : IsCauSeq norm f := by
  cases' cauchy_iff.1 hf with hf1 hf2
  intro Œµ hŒµ
  rcases hf2 { x | dist x.1 x.2 < Œµ } (dist_mem_uniformity hŒµ) with ‚ü®t, ‚ü®ht, htsub‚ü©‚ü©
  simp only [mem_map, mem_atTop_sets, ge_iff_le, mem_preimage] at ht; cases' ht with N hN
  exists N
  intro j hj
  rw [‚Üê dist_eq_norm]
  apply @htsub (f j, f N)
  apply Set.mk_mem_prod <;> solve_by_elim [le_refl]
#align cauchy_seq.is_cau_seq CauchySeq.isCauSeq

theorem CauSeq.cauchySeq (f : CauSeq Œ≤ norm) : CauchySeq f := by
  refine' cauchy_iff.2 ‚ü®by infer_instance, fun s hs => _‚ü©
  rcases mem_uniformity_dist.1 hs with ‚ü®Œµ, ‚ü®hŒµ, hŒµs‚ü©‚ü©
  cases' CauSeq.cauchy‚ÇÇ f hŒµ with N hN
  exists { n | n ‚â• N }.image f
  simp only [exists_prop, mem_atTop_sets, mem_map, mem_image, ge_iff_le, mem_setOf_eq]
  constructor
  ¬∑ exists N
    intro b hb
    exists b
  ¬∑ rintro ‚ü®a, b‚ü© ‚ü®‚ü®a', ‚ü®ha'1, ha'2‚ü©‚ü©, ‚ü®b', ‚ü®hb'1, hb'2‚ü©‚ü©‚ü©
    dsimp at ha'1 ha'2 hb'1 hb'2
    rw [‚Üê ha'2, ‚Üê hb'2]
    apply hŒµs
    rw [dist_eq_norm]
    apply hN <;> assumption
#align cau_seq.cauchy_seq CauSeq.cauchySeq

/-- In a normed field, `CauSeq` coincides with the usual notion of Cauchy sequences. -/
theorem isCauSeq_iff_cauchySeq {Œ± : Type u} [NormedField Œ±] {u : ‚Ñï ‚Üí Œ±} :
    IsCauSeq norm u ‚Üî CauchySeq u :=
  ‚ü®fun h => CauSeq.cauchySeq ‚ü®u, h‚ü©, fun h => h.isCauSeq‚ü©
#align cau_seq_iff_cauchy_seq isCauSeq_iff_cauchySeq

-- see Note [lower instance priority]
/-- A complete normed field is complete as a metric space, as Cauchy sequences converge by
assumption and this suffices to characterize completeness. -/
instance (priority := 100) completeSpace_of_cauSeq_isComplete [CauSeq.IsComplete Œ≤ norm] :
    CompleteSpace Œ≤ := by
  apply complete_of_cauchySeq_tendsto
  intro u hu
  have C : IsCauSeq norm u := isCauSeq_iff_cauchySeq.2 hu
  exists CauSeq.lim ‚ü®u, C‚ü©
  rw [Metric.tendsto_atTop]
  intro Œµ Œµpos
  cases' (CauSeq.equiv_lim ‚ü®u, C‚ü©) _ Œµpos with N hN
  exists N
  simpa [dist_eq_norm] using hN
#align complete_space_of_cau_seq_complete completeSpace_of_cauSeq_isComplete
