/-
Copyright (c) 2015, 2017 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jeremy Avigad, Robert Y. Lewis, Johannes H√∂lzl, Mario Carneiro, S√©bastien Gou√´zel
-/
import Mathlib.Topology.Bornology.Constructions
import Mathlib.Topology.MetricSpace.Pseudo.Defs
import Mathlib.Topology.UniformSpace.UniformEmbedding

/-!
# Products of pseudometric spaces and other constructions

This file constructs the supremum distance on binary products of pseudometric spaces and provides
instances for type synonyms.
-/

open Bornology Filter Metric Set Topology
open scoped NNReal

variable {Œ± Œ≤ : Type*} [PseudoMetricSpace Œ±]

/-- Pseudometric space structure pulled back by a function. -/
abbrev PseudoMetricSpace.induced {Œ± Œ≤} (f : Œ± ‚Üí Œ≤) (m : PseudoMetricSpace Œ≤) :
    PseudoMetricSpace Œ± where
  dist x y := dist (f x) (f y)
  dist_self _ := dist_self _
  dist_comm _ _ := dist_comm _ _
  dist_triangle _ _ _ := dist_triangle _ _ _
  edist x y := edist (f x) (f y)
  edist_dist _ _ := edist_dist _ _
  toUniformSpace := UniformSpace.comap f m.toUniformSpace
  uniformity_dist := (uniformity_basis_dist.comap _).eq_biInf
  toBornology := Bornology.induced f
  cobounded_sets := Set.ext fun s => mem_comap_iff_compl.trans <| by
    simp only [‚Üê isBounded_def, isBounded_iff, forall_mem_image, mem_setOf]

/-- Pull back a pseudometric space structure by an inducing map. This is a version of
`PseudoMetricSpace.induced` useful in case if the domain already has a `TopologicalSpace`
structure. -/
def Topology.IsInducing.comapPseudoMetricSpace {Œ± Œ≤ : Type*} [TopologicalSpace Œ±]
    [m : PseudoMetricSpace Œ≤] {f : Œ± ‚Üí Œ≤} (hf : IsInducing f) : PseudoMetricSpace Œ± :=
  .replaceTopology (.induced f m) hf.eq_induced

@[deprecated (since := "2024-10-28")]
alias Inducing.comapPseudoMetricSpace := IsInducing.comapPseudoMetricSpace

/-- Pull back a pseudometric space structure by a uniform inducing map. This is a version of
`PseudoMetricSpace.induced` useful in case if the domain already has a `UniformSpace`
structure. -/
def IsUniformInducing.comapPseudoMetricSpace {Œ± Œ≤} [UniformSpace Œ±] [m : PseudoMetricSpace Œ≤]
    (f : Œ± ‚Üí Œ≤) (h : IsUniformInducing f) : PseudoMetricSpace Œ± :=
  .replaceUniformity (.induced f m) h.comap_uniformity.symm

@[deprecated (since := "2024-10-08")] alias UniformInducing.comapPseudoMetricSpace :=
  IsUniformInducing.comapPseudoMetricSpace

instance Subtype.pseudoMetricSpace {p : Œ± ‚Üí Prop} : PseudoMetricSpace (Subtype p) :=
  PseudoMetricSpace.induced Subtype.val ‚Äπ_‚Ä∫

lemma Subtype.dist_eq {p : Œ± ‚Üí Prop} (x y : Subtype p) : dist x y = dist (x : Œ±) y := rfl

lemma Subtype.nndist_eq {p : Œ± ‚Üí Prop} (x y : Subtype p) : nndist x y = nndist (x : Œ±) y := rfl

namespace MulOpposite

@[to_additive]
instance instPseudoMetricSpace : PseudoMetricSpace Œ±·µê·µí·µñ :=
  PseudoMetricSpace.induced MulOpposite.unop ‚Äπ_‚Ä∫

@[to_additive (attr := simp)]
lemma dist_unop (x y : Œ±·µê·µí·µñ) : dist (unop x) (unop y) = dist x y := rfl

@[to_additive (attr := simp)]
lemma dist_op (x y : Œ±) : dist (op x) (op y) = dist x y := rfl

@[to_additive (attr := simp)]
lemma nndist_unop (x y : Œ±·µê·µí·µñ) : nndist (unop x) (unop y) = nndist x y := rfl

@[to_additive (attr := simp)]
lemma nndist_op (x y : Œ±) : nndist (op x) (op y) = nndist x y := rfl

end MulOpposite

section NNReal

instance : PseudoMetricSpace ‚Ñù‚â•0 := Subtype.pseudoMetricSpace

lemma NNReal.dist_eq (a b : ‚Ñù‚â•0) : dist a b = |(a : ‚Ñù) - b| := rfl

lemma NNReal.nndist_eq (a b : ‚Ñù‚â•0) : nndist a b = max (a - b) (b - a) :=
  eq_of_forall_ge_iff fun _ => by
    simp only [max_le_iff, tsub_le_iff_right (Œ± := ‚Ñù‚â•0)]
    simp only [‚Üê NNReal.coe_le_coe, coe_nndist, dist_eq, abs_sub_le_iff,
      tsub_le_iff_right, NNReal.coe_add]

@[simp]
lemma NNReal.nndist_zero_eq_val (z : ‚Ñù‚â•0) : nndist 0 z = z := by
  simp only [NNReal.nndist_eq, max_eq_right, tsub_zero, zero_tsub, zero_le']

@[simp]
lemma NNReal.nndist_zero_eq_val' (z : ‚Ñù‚â•0) : nndist z 0 = z := by
  rw [nndist_comm]
  exact NNReal.nndist_zero_eq_val z

lemma NNReal.le_add_nndist (a b : ‚Ñù‚â•0) : a ‚â§ b + nndist a b := by
  suffices (a : ‚Ñù) ‚â§ (b : ‚Ñù) + dist a b by
    rwa [‚Üê NNReal.coe_le_coe, NNReal.coe_add, coe_nndist]
  rw [‚Üê sub_le_iff_le_add']
  exact le_of_abs_le (dist_eq a b).ge

lemma NNReal.ball_zero_eq_Ico' (c : ‚Ñù‚â•0) :
    Metric.ball (0 : ‚Ñù‚â•0) c.toReal = Set.Ico 0 c := by ext x; simp

lemma NNReal.ball_zero_eq_Ico (c : ‚Ñù) :
    Metric.ball (0 : ‚Ñù‚â•0) c = Set.Ico 0 c.toNNReal := by
  by_cases c_pos : 0 < c
  ¬∑ convert NNReal.ball_zero_eq_Ico' ‚ü®c, c_pos.le‚ü©
    simp [Real.toNNReal, c_pos.le]
  simp [not_lt.mp c_pos]

lemma NNReal.closedBall_zero_eq_Icc' (c : ‚Ñù‚â•0) :
    Metric.closedBall (0 : ‚Ñù‚â•0) c.toReal = Set.Icc 0 c := by ext x; simp

lemma NNReal.closedBall_zero_eq_Icc {c : ‚Ñù} (c_nn : 0 ‚â§ c) :
    Metric.closedBall (0 : ‚Ñù‚â•0) c = Set.Icc 0 c.toNNReal := by
  convert NNReal.closedBall_zero_eq_Icc' ‚ü®c, c_nn‚ü©
  simp [Real.toNNReal, c_nn]

end NNReal

namespace ULift
variable [PseudoMetricSpace Œ≤]

instance : PseudoMetricSpace (ULift Œ≤) := PseudoMetricSpace.induced ULift.down ‚Äπ_‚Ä∫

lemma dist_eq (x y : ULift Œ≤) : dist x y = dist x.down y.down := rfl

lemma nndist_eq (x y : ULift Œ≤) : nndist x y = nndist x.down y.down := rfl

@[simp] lemma dist_up_up (x y : Œ≤) : dist (ULift.up x) (ULift.up y) = dist x y := rfl

@[simp] lemma nndist_up_up (x y : Œ≤) : nndist (ULift.up x) (ULift.up y) = nndist x y := rfl

end ULift

section Prod
variable [PseudoMetricSpace Œ≤]

-- Porting note: added `let`, otherwise `simp` failed
instance Prod.pseudoMetricSpaceMax : PseudoMetricSpace (Œ± √ó Œ≤) :=
  let i := PseudoEMetricSpace.toPseudoMetricSpaceOfDist
    (fun x y : Œ± √ó Œ≤ => dist x.1 y.1 ‚äî dist x.2 y.2)
    (fun _ _ => (max_lt (edist_lt_top _ _) (edist_lt_top _ _)).ne) fun x y => by
      simp only [dist_edist, ‚Üê ENNReal.toReal_max (edist_ne_top _ _) (edist_ne_top _ _),
        Prod.edist_eq]
  i.replaceBornology fun s => by
    simp only [‚Üê isBounded_image_fst_and_snd, isBounded_iff_eventually, forall_mem_image, ‚Üê
      eventually_and, ‚Üê forall_and, ‚Üê max_le_iff]
    rfl

lemma Prod.dist_eq {x y : Œ± √ó Œ≤} : dist x y = max (dist x.1 y.1) (dist x.2 y.2) := rfl

@[simp]
lemma dist_prod_same_left {x : Œ±} {y‚ÇÅ y‚ÇÇ : Œ≤} : dist (x, y‚ÇÅ) (x, y‚ÇÇ) = dist y‚ÇÅ y‚ÇÇ := by
  simp [Prod.dist_eq, dist_nonneg]

@[simp]
lemma dist_prod_same_right {x‚ÇÅ x‚ÇÇ : Œ±} {y : Œ≤} : dist (x‚ÇÅ, y) (x‚ÇÇ, y) = dist x‚ÇÅ x‚ÇÇ := by
  simp [Prod.dist_eq, dist_nonneg]

lemma ball_prod_same (x : Œ±) (y : Œ≤) (r : ‚Ñù) : ball x r √óÀ¢ ball y r = ball (x, y) r :=
  ext fun z => by simp [Prod.dist_eq]

lemma closedBall_prod_same (x : Œ±) (y : Œ≤) (r : ‚Ñù) :
    closedBall x r √óÀ¢ closedBall y r = closedBall (x, y) r := ext fun z => by simp [Prod.dist_eq]

lemma sphere_prod (x : Œ± √ó Œ≤) (r : ‚Ñù) :
    sphere x r = sphere x.1 r √óÀ¢ closedBall x.2 r ‚à™ closedBall x.1 r √óÀ¢ sphere x.2 r := by
  obtain hr | rfl | hr := lt_trichotomy r 0
  ¬∑ simp [hr]
  ¬∑ cases x
    simp_rw [‚Üê closedBall_eq_sphere_of_nonpos le_rfl, union_self, closedBall_prod_same]
  ¬∑ ext ‚ü®x', y'‚ü©
    simp_rw [Set.mem_union, Set.mem_prod, Metric.mem_closedBall, Metric.mem_sphere, Prod.dist_eq,
      max_eq_iff]
    refine or_congr (and_congr_right ?_) (and_comm.trans (and_congr_left ?_))
    all_goals rintro rfl; rfl

end Prod

lemma uniformContinuous_dist : UniformContinuous fun p : Œ± √ó Œ± => dist p.1 p.2 :=
  Metric.uniformContinuous_iff.2 fun Œµ Œµ0 =>
    ‚ü®Œµ / 2, half_pos Œµ0, fun {a b} h =>
      calc dist (dist a.1 a.2) (dist b.1 b.2) ‚â§ dist a.1 b.1 + dist a.2 b.2 :=
        dist_dist_dist_le _ _ _ _
      _ ‚â§ dist a b + dist a b := add_le_add (le_max_left _ _) (le_max_right _ _)
      _ < Œµ / 2 + Œµ / 2 := add_lt_add h h
      _ = Œµ := add_halves Œµ‚ü©

protected lemma UniformContinuous.dist [UniformSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (hg : UniformContinuous g) : UniformContinuous fun b => dist (f b) (g b) :=
  uniformContinuous_dist.comp (hf.prod_mk hg)

@[continuity]
lemma continuous_dist : Continuous fun p : Œ± √ó Œ± ‚Ü¶ dist p.1 p.2 := uniformContinuous_dist.continuous

@[continuity, fun_prop]
protected lemma Continuous.dist [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f)
    (hg : Continuous g) : Continuous fun b => dist (f b) (g b) :=
  continuous_dist.comp (hf.prod_mk hg : _)

protected lemma Filter.Tendsto.dist {f g : Œ≤ ‚Üí Œ±} {x : Filter Œ≤} {a b : Œ±}
    (hf : Tendsto f x (ùìù a)) (hg : Tendsto g x (ùìù b)) :
    Tendsto (fun x => dist (f x) (g x)) x (ùìù (dist a b)) :=
  (continuous_dist.tendsto (a, b)).comp (hf.prod_mk_nhds hg)

lemma continuous_iff_continuous_dist [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±} :
    Continuous f ‚Üî Continuous fun x : Œ≤ √ó Œ≤ => dist (f x.1) (f x.2) :=
  ‚ü®fun h => h.fst'.dist h.snd', fun h =>
    continuous_iff_continuousAt.2 fun _ => tendsto_iff_dist_tendsto_zero.2 <|
      (h.comp (continuous_id.prod_mk continuous_const)).tendsto' _ _ <| dist_self _‚ü©

lemma uniformContinuous_nndist : UniformContinuous fun p : Œ± √ó Œ± => nndist p.1 p.2 :=
  uniformContinuous_dist.subtype_mk _

protected lemma UniformContinuous.nndist [UniformSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (hg : UniformContinuous g) : UniformContinuous fun b => nndist (f b) (g b) :=
  uniformContinuous_nndist.comp (hf.prod_mk hg)

lemma continuous_nndist : Continuous fun p : Œ± √ó Œ± => nndist p.1 p.2 :=
  uniformContinuous_nndist.continuous

@[fun_prop]
protected lemma Continuous.nndist [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f)
    (hg : Continuous g) : Continuous fun b => nndist (f b) (g b) :=
  continuous_nndist.comp (hf.prod_mk hg : _)

protected lemma Filter.Tendsto.nndist {f g : Œ≤ ‚Üí Œ±} {x : Filter Œ≤} {a b : Œ±}
    (hf : Tendsto f x (ùìù a)) (hg : Tendsto g x (ùìù b)) :
    Tendsto (fun x => nndist (f x) (g x)) x (ùìù (nndist a b)) :=
  (continuous_nndist.tendsto (a, b)).comp (hf.prod_mk_nhds hg)
