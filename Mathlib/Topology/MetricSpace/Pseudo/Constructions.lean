/-
Copyright (c) 2015, 2017 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jeremy Avigad, Robert Y. Lewis, Johannes H√∂lzl, Mario Carneiro, S√©bastien Gou√´zel
-/
import Mathlib.Topology.Bornology.Constructions
import Mathlib.Topology.MetricSpace.Pseudo.Defs

/-!
# Product of pseudo-metric spaces and other constructions

This file constructs the infinity distance on finite products of normed groups and provides
instances for type synonyms.
-/

open Bornology Filter Metric Set
open scoped NNReal Topology

variable {Œ± Œ≤ : Type*} [PseudoMetricSpace Œ±]

/-- Pseudometric space structure pulled back by a function. -/
abbrev PseudoMetricSpace.induced {Œ± Œ≤} (f : Œ± ‚Üí Œ≤) (m : PseudoMetricSpace Œ≤) :
    PseudoMetricSpace Œ± where
  dist x y := dist (f x) (f y)
  dist_self x := dist_self _
  dist_comm x y := dist_comm _ _
  dist_triangle x y z := dist_triangle _ _ _
  edist x y := edist (f x) (f y)
  edist_dist x y := edist_dist _ _
  toUniformSpace := UniformSpace.comap f m.toUniformSpace
  uniformity_dist := (uniformity_basis_dist.comap _).eq_biInf
  toBornology := Bornology.induced f
  cobounded_sets := Set.ext fun s => mem_comap_iff_compl.trans <| by
    simp only [‚Üê isBounded_def, isBounded_iff, forall_mem_image, mem_setOf]
#align pseudo_metric_space.induced PseudoMetricSpace.induced

/-- Pull back a pseudometric space structure by an inducing map. This is a version of
`PseudoMetricSpace.induced` useful in case if the domain already has a `TopologicalSpace`
structure. -/
def Inducing.comapPseudoMetricSpace {Œ± Œ≤} [TopologicalSpace Œ±] [m : PseudoMetricSpace Œ≤] {f : Œ± ‚Üí Œ≤}
    (hf : Inducing f) : PseudoMetricSpace Œ± :=
  .replaceTopology (.induced f m) hf.induced
#align inducing.comap_pseudo_metric_space Inducing.comapPseudoMetricSpace

/-- Pull back a pseudometric space structure by a uniform inducing map. This is a version of
`PseudoMetricSpace.induced` useful in case if the domain already has a `UniformSpace`
structure. -/
def UniformInducing.comapPseudoMetricSpace {Œ± Œ≤} [UniformSpace Œ±] [m : PseudoMetricSpace Œ≤]
    (f : Œ± ‚Üí Œ≤) (h : UniformInducing f) : PseudoMetricSpace Œ± :=
  .replaceUniformity (.induced f m) h.comap_uniformity.symm
#align uniform_inducing.comap_pseudo_metric_space UniformInducing.comapPseudoMetricSpace

instance Subtype.pseudoMetricSpace {p : Œ± ‚Üí Prop} : PseudoMetricSpace (Subtype p) :=
  PseudoMetricSpace.induced Subtype.val ‚Äπ_‚Ä∫
#align subtype.pseudo_metric_space Subtype.pseudoMetricSpace

lemma Subtype.dist_eq {p : Œ± ‚Üí Prop} (x y : Subtype p) : dist x y = dist (x : Œ±) y := rfl
#align subtype.dist_eq Subtype.dist_eq

lemma Subtype.nndist_eq {p : Œ± ‚Üí Prop} (x y : Subtype p) : nndist x y = nndist (x : Œ±) y := rfl
#align subtype.nndist_eq Subtype.nndist_eq

namespace MulOpposite

@[to_additive]
instance instPseudoMetricSpace : PseudoMetricSpace Œ±·µê·µí·µñ :=
  PseudoMetricSpace.induced MulOpposite.unop ‚Äπ_‚Ä∫

@[to_additive (attr := simp)]
lemma dist_unop (x y : Œ±·µê·µí·µñ) : dist (unop x) (unop y) = dist x y := rfl
#align mul_opposite.dist_unop MulOpposite.dist_unop
#align add_opposite.dist_unop AddOpposite.dist_unop

@[to_additive (attr := simp)]
lemma dist_op (x y : Œ±) : dist (op x) (op y) = dist x y := rfl
#align mul_opposite.dist_op MulOpposite.dist_op
#align add_opposite.dist_op AddOpposite.dist_op

@[to_additive (attr := simp)]
lemma nndist_unop (x y : Œ±·µê·µí·µñ) : nndist (unop x) (unop y) = nndist x y := rfl
#align mul_opposite.nndist_unop MulOpposite.nndist_unop
#align add_opposite.nndist_unop AddOpposite.nndist_unop

@[to_additive (attr := simp)]
lemma nndist_op (x y : Œ±) : nndist (op x) (op y) = nndist x y := rfl
#align mul_opposite.nndist_op MulOpposite.nndist_op
#align add_opposite.nndist_op AddOpposite.nndist_op

end MulOpposite

section NNReal

instance : PseudoMetricSpace ‚Ñù‚â•0 := Subtype.pseudoMetricSpace

lemma NNReal.dist_eq (a b : ‚Ñù‚â•0) : dist a b = |(a : ‚Ñù) - b| := rfl
#align nnreal.dist_eq NNReal.dist_eq

lemma NNReal.nndist_eq (a b : ‚Ñù‚â•0) : nndist a b = max (a - b) (b - a) :=
  eq_of_forall_ge_iff fun _ => by
    simp only [max_le_iff, tsub_le_iff_right (Œ± := ‚Ñù‚â•0)]
    simp only [‚Üê NNReal.coe_le_coe, coe_nndist, dist_eq, abs_sub_le_iff,
      tsub_le_iff_right, NNReal.coe_add]
#align nnreal.nndist_eq NNReal.nndist_eq

@[simp]
lemma NNReal.nndist_zero_eq_val (z : ‚Ñù‚â•0) : nndist 0 z = z := by
  simp only [NNReal.nndist_eq, max_eq_right, tsub_zero, zero_tsub, zero_le']
#align nnreal.nndist_zero_eq_val NNReal.nndist_zero_eq_val

@[simp]
lemma NNReal.nndist_zero_eq_val' (z : ‚Ñù‚â•0) : nndist z 0 = z := by
  rw [nndist_comm]
  exact NNReal.nndist_zero_eq_val z
#align nnreal.nndist_zero_eq_val' NNReal.nndist_zero_eq_val'

lemma NNReal.le_add_nndist (a b : ‚Ñù‚â•0) : a ‚â§ b + nndist a b := by
  suffices (a : ‚Ñù) ‚â§ (b : ‚Ñù) + dist a b by
    rwa [‚Üê NNReal.coe_le_coe, NNReal.coe_add, coe_nndist]
  rw [‚Üê sub_le_iff_le_add']
  exact le_of_abs_le (dist_eq a b).ge
#align nnreal.le_add_nndist NNReal.le_add_nndist

lemma NNReal.ball_zero_eq_Ico' (c : ‚Ñù‚â•0) :
    Metric.ball (0 : ‚Ñù‚â•0) c.toReal = Set.Ico 0 c := by ext x; simp

lemma NNReal.ball_zero_eq_Ico (c : ‚Ñù) :
    Metric.ball (0 : ‚Ñù‚â•0) c = Set.Ico 0 c.toNNReal := by
  by_cases c_pos : 0 < c
  ¬∑ convert NNReal.ball_zero_eq_Ico' ‚ü®c, c_pos.le‚ü©
    simp [Real.toNNReal, c_pos.le]
  simp [not_lt.mp c_pos]

lemma NNReal.closedBall_zero_eq_Icc' (c : ‚Ñù‚â•0) :
    Metric.closedBall (0 : ‚Ñù‚â•0) c.toReal = Set.Icc 0 c := by ext x; simp

lemma NNReal.closedBall_zero_eq_Icc {c : ‚Ñù} (c_nn : 0 ‚â§ c) :
    Metric.closedBall (0 : ‚Ñù‚â•0) c = Set.Icc 0 c.toNNReal := by
  convert NNReal.closedBall_zero_eq_Icc' ‚ü®c, c_nn‚ü©
  simp [Real.toNNReal, c_nn]

end NNReal

namespace ULift
variable [PseudoMetricSpace Œ≤]

instance : PseudoMetricSpace (ULift Œ≤) := PseudoMetricSpace.induced ULift.down ‚Äπ_‚Ä∫

lemma dist_eq (x y : ULift Œ≤) : dist x y = dist x.down y.down := rfl
#align ulift.dist_eq ULift.dist_eq

lemma nndist_eq (x y : ULift Œ≤) : nndist x y = nndist x.down y.down := rfl
#align ulift.nndist_eq ULift.nndist_eq

@[simp] lemma dist_up_up (x y : Œ≤) : dist (ULift.up x) (ULift.up y) = dist x y := rfl
#align ulift.dist_up_up ULift.dist_up_up

@[simp] lemma nndist_up_up (x y : Œ≤) : nndist (ULift.up x) (ULift.up y) = nndist x y := rfl
#align ulift.nndist_up_up ULift.nndist_up_up

end ULift

section Prod
variable [PseudoMetricSpace Œ≤]

-- Porting note: added `let`, otherwise `simp` failed
instance Prod.pseudoMetricSpaceMax : PseudoMetricSpace (Œ± √ó Œ≤) :=
  let i := PseudoEMetricSpace.toPseudoMetricSpaceOfDist
    (fun x y : Œ± √ó Œ≤ => dist x.1 y.1 ‚äî dist x.2 y.2)
    (fun x y => (max_lt (edist_lt_top _ _) (edist_lt_top _ _)).ne) fun x y => by
      simp only [sup_eq_max, dist_edist, ‚Üê ENNReal.toReal_max (edist_ne_top _ _) (edist_ne_top _ _),
        Prod.edist_eq]
  i.replaceBornology fun s => by
    simp only [‚Üê isBounded_image_fst_and_snd, isBounded_iff_eventually, forall_mem_image, ‚Üê
      eventually_and, ‚Üê forall_and, ‚Üê max_le_iff]
    rfl
#align prod.pseudo_metric_space_max Prod.pseudoMetricSpaceMax

lemma Prod.dist_eq {x y : Œ± √ó Œ≤} : dist x y = max (dist x.1 y.1) (dist x.2 y.2) := rfl
#align prod.dist_eq Prod.dist_eq

@[simp]
lemma dist_prod_same_left {x : Œ±} {y‚ÇÅ y‚ÇÇ : Œ≤} : dist (x, y‚ÇÅ) (x, y‚ÇÇ) = dist y‚ÇÅ y‚ÇÇ := by
  simp [Prod.dist_eq, dist_nonneg]
#align dist_prod_same_left dist_prod_same_left

@[simp]
lemma dist_prod_same_right {x‚ÇÅ x‚ÇÇ : Œ±} {y : Œ≤} : dist (x‚ÇÅ, y) (x‚ÇÇ, y) = dist x‚ÇÅ x‚ÇÇ := by
  simp [Prod.dist_eq, dist_nonneg]
#align dist_prod_same_right dist_prod_same_right

lemma ball_prod_same (x : Œ±) (y : Œ≤) (r : ‚Ñù) : ball x r √óÀ¢ ball y r = ball (x, y) r :=
  ext fun z => by simp [Prod.dist_eq]
#align ball_prod_same ball_prod_same

lemma closedBall_prod_same (x : Œ±) (y : Œ≤) (r : ‚Ñù) :
    closedBall x r √óÀ¢ closedBall y r = closedBall (x, y) r := ext fun z => by simp [Prod.dist_eq]
#align closed_ball_prod_same closedBall_prod_same

lemma sphere_prod (x : Œ± √ó Œ≤) (r : ‚Ñù) :
    sphere x r = sphere x.1 r √óÀ¢ closedBall x.2 r ‚à™ closedBall x.1 r √óÀ¢ sphere x.2 r := by
  obtain hr | rfl | hr := lt_trichotomy r 0
  ¬∑ simp [hr]
  ¬∑ cases x
    simp_rw [‚Üê closedBall_eq_sphere_of_nonpos le_rfl, union_self, closedBall_prod_same]
  ¬∑ ext ‚ü®x', y'‚ü©
    simp_rw [Set.mem_union, Set.mem_prod, Metric.mem_closedBall, Metric.mem_sphere, Prod.dist_eq,
      max_eq_iff]
    refine or_congr (and_congr_right ?_) (and_comm.trans (and_congr_left ?_))
    all_goals rintro rfl; rfl
#align sphere_prod sphere_prod

end Prod

lemma uniformContinuous_dist : UniformContinuous fun p : Œ± √ó Œ± => dist p.1 p.2 :=
  Metric.uniformContinuous_iff.2 fun Œµ Œµ0 =>
    ‚ü®Œµ / 2, half_pos Œµ0, fun {a b} h =>
      calc dist (dist a.1 a.2) (dist b.1 b.2) ‚â§ dist a.1 b.1 + dist a.2 b.2 :=
        dist_dist_dist_le _ _ _ _
      _ ‚â§ dist a b + dist a b := add_le_add (le_max_left _ _) (le_max_right _ _)
      _ < Œµ / 2 + Œµ / 2 := add_lt_add h h
      _ = Œµ := add_halves Œµ‚ü©
#align uniform_continuous_dist uniformContinuous_dist

protected lemma UniformContinuous.dist [UniformSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (hg : UniformContinuous g) : UniformContinuous fun b => dist (f b) (g b) :=
  uniformContinuous_dist.comp (hf.prod_mk hg)
#align uniform_continuous.dist UniformContinuous.dist

@[continuity]
lemma continuous_dist : Continuous fun p : Œ± √ó Œ± ‚Ü¶ dist p.1 p.2 := uniformContinuous_dist.continuous
#align continuous_dist continuous_dist

@[continuity, fun_prop]
protected lemma Continuous.dist [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f)
    (hg : Continuous g) : Continuous fun b => dist (f b) (g b) :=
  continuous_dist.comp (hf.prod_mk hg : _)
#align continuous.dist Continuous.dist

protected lemma Filter.Tendsto.dist {f g : Œ≤ ‚Üí Œ±} {x : Filter Œ≤} {a b : Œ±}
    (hf : Tendsto f x (ùìù a)) (hg : Tendsto g x (ùìù b)) :
    Tendsto (fun x => dist (f x) (g x)) x (ùìù (dist a b)) :=
  (continuous_dist.tendsto (a, b)).comp (hf.prod_mk_nhds hg)
#align filter.tendsto.dist Filter.Tendsto.dist

lemma continuous_iff_continuous_dist [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±} :
    Continuous f ‚Üî Continuous fun x : Œ≤ √ó Œ≤ => dist (f x.1) (f x.2) :=
  ‚ü®fun h => h.fst'.dist h.snd', fun h =>
    continuous_iff_continuousAt.2 fun _ => tendsto_iff_dist_tendsto_zero.2 <|
      (h.comp (continuous_id.prod_mk continuous_const)).tendsto' _ _ <| dist_self _‚ü©
#align continuous_iff_continuous_dist continuous_iff_continuous_dist

lemma uniformContinuous_nndist : UniformContinuous fun p : Œ± √ó Œ± => nndist p.1 p.2 :=
  uniformContinuous_dist.subtype_mk _
#align uniform_continuous_nndist uniformContinuous_nndist

protected lemma UniformContinuous.nndist [UniformSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : UniformContinuous f)
    (hg : UniformContinuous g) : UniformContinuous fun b => nndist (f b) (g b) :=
  uniformContinuous_nndist.comp (hf.prod_mk hg)
#align uniform_continuous.nndist UniformContinuous.nndist

lemma continuous_nndist : Continuous fun p : Œ± √ó Œ± => nndist p.1 p.2 :=
  uniformContinuous_nndist.continuous
#align continuous_nndist continuous_nndist

@[fun_prop]
protected lemma Continuous.nndist [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f)
    (hg : Continuous g) : Continuous fun b => nndist (f b) (g b) :=
  continuous_nndist.comp (hf.prod_mk hg : _)
#align continuous.nndist Continuous.nndist

protected lemma Filter.Tendsto.nndist {f g : Œ≤ ‚Üí Œ±} {x : Filter Œ≤} {a b : Œ±}
    (hf : Tendsto f x (ùìù a)) (hg : Tendsto g x (ùìù b)) :
    Tendsto (fun x => nndist (f x) (g x)) x (ùìù (nndist a b)) :=
  (continuous_nndist.tendsto (a, b)).comp (hf.prod_mk_nhds hg)
#align filter.tendsto.nndist Filter.Tendsto.nndist

section Pi

open Finset

variable {œÄ : Œ≤ ‚Üí Type*} [Fintype Œ≤] [‚àÄ b, PseudoMetricSpace (œÄ b)]

/-- A finite product of pseudometric spaces is a pseudometric space, with the sup distance. -/
instance pseudoMetricSpacePi : PseudoMetricSpace (‚àÄ b, œÄ b) := by
  /- we construct the instance from the pseudoemetric space instance to avoid checking again that
    the uniformity is the same as the product uniformity, but we register nevertheless a nice
    formula for the distance -/
  let i := PseudoEMetricSpace.toPseudoMetricSpaceOfDist
    (fun f g : ‚àÄ b, œÄ b => ((sup univ fun b => nndist (f b) (g b) : ‚Ñù‚â•0) : ‚Ñù))
    (fun f g => ((Finset.sup_lt_iff bot_lt_top).2 fun b _ => edist_lt_top _ _).ne)
    (fun f g => by
      simp only [edist_pi_def, edist_nndist, ‚Üê ENNReal.coe_finset_sup, ENNReal.coe_toReal])
  refine i.replaceBornology fun s => ?_
  simp only [‚Üê isBounded_def, isBounded_iff_eventually, ‚Üê forall_isBounded_image_eval_iff,
    forall_mem_image, ‚Üê Filter.eventually_all, Function.eval_apply, @dist_nndist (œÄ _)]
  refine eventually_congr ((eventually_ge_atTop 0).mono fun C hC ‚Ü¶ ?_)
  lift C to ‚Ñù‚â•0 using hC
  refine ‚ü®fun H x hx y hy ‚Ü¶ NNReal.coe_le_coe.2 <| Finset.sup_le fun b _ ‚Ü¶ H b hx hy,
    fun H b x hx y hy ‚Ü¶ NNReal.coe_le_coe.2 ?_‚ü©
  simpa only using Finset.sup_le_iff.1 (NNReal.coe_le_coe.1 <| H hx hy) b (Finset.mem_univ b)
#align pseudo_metric_space_pi pseudoMetricSpacePi

lemma nndist_pi_def (f g : ‚àÄ b, œÄ b) : nndist f g = sup univ fun b => nndist (f b) (g b) := rfl
#align nndist_pi_def nndist_pi_def

lemma dist_pi_def (f g : ‚àÄ b, œÄ b) : dist f g = (sup univ fun b => nndist (f b) (g b) : ‚Ñù‚â•0) := rfl
#align dist_pi_def dist_pi_def

lemma nndist_pi_le_iff {f g : ‚àÄ b, œÄ b} {r : ‚Ñù‚â•0} :
    nndist f g ‚â§ r ‚Üî ‚àÄ b, nndist (f b) (g b) ‚â§ r := by simp [nndist_pi_def]
#align nndist_pi_le_iff nndist_pi_le_iff

lemma nndist_pi_lt_iff {f g : ‚àÄ b, œÄ b} {r : ‚Ñù‚â•0} (hr : 0 < r) :
    nndist f g < r ‚Üî ‚àÄ b, nndist (f b) (g b) < r := by
  rw [‚Üê bot_eq_zero'] at hr
  simp [nndist_pi_def, Finset.sup_lt_iff hr]
#align nndist_pi_lt_iff nndist_pi_lt_iff

lemma nndist_pi_eq_iff {f g : ‚àÄ b, œÄ b} {r : ‚Ñù‚â•0} (hr : 0 < r) :
    nndist f g = r ‚Üî (‚àÉ i, nndist (f i) (g i) = r) ‚àß ‚àÄ b, nndist (f b) (g b) ‚â§ r := by
  rw [eq_iff_le_not_lt, nndist_pi_lt_iff hr, nndist_pi_le_iff, not_forall, and_comm]
  simp_rw [not_lt, and_congr_left_iff, le_antisymm_iff]
  intro h
  refine exists_congr fun b => ?_
  apply (and_iff_right <| h _).symm
#align nndist_pi_eq_iff nndist_pi_eq_iff

lemma dist_pi_lt_iff {f g : ‚àÄ b, œÄ b} {r : ‚Ñù} (hr : 0 < r) :
    dist f g < r ‚Üî ‚àÄ b, dist (f b) (g b) < r := by
  lift r to ‚Ñù‚â•0 using hr.le
  exact nndist_pi_lt_iff hr
#align dist_pi_lt_iff dist_pi_lt_iff

lemma dist_pi_le_iff {f g : ‚àÄ b, œÄ b} {r : ‚Ñù} (hr : 0 ‚â§ r) :
    dist f g ‚â§ r ‚Üî ‚àÄ b, dist (f b) (g b) ‚â§ r := by
  lift r to ‚Ñù‚â•0 using hr
  exact nndist_pi_le_iff
#align dist_pi_le_iff dist_pi_le_iff

lemma dist_pi_eq_iff {f g : ‚àÄ b, œÄ b} {r : ‚Ñù} (hr : 0 < r) :
    dist f g = r ‚Üî (‚àÉ i, dist (f i) (g i) = r) ‚àß ‚àÄ b, dist (f b) (g b) ‚â§ r := by
  lift r to ‚Ñù‚â•0 using hr.le
  simp_rw [‚Üê coe_nndist, NNReal.coe_inj, nndist_pi_eq_iff hr, NNReal.coe_le_coe]
#align dist_pi_eq_iff dist_pi_eq_iff

lemma dist_pi_le_iff' [Nonempty Œ≤] {f g : ‚àÄ b, œÄ b} {r : ‚Ñù} :
    dist f g ‚â§ r ‚Üî ‚àÄ b, dist (f b) (g b) ‚â§ r := by
  by_cases hr : 0 ‚â§ r
  ¬∑ exact dist_pi_le_iff hr
  ¬∑ exact iff_of_false (fun h => hr <| dist_nonneg.trans h) fun h =>
      hr <| dist_nonneg.trans <| h <| Classical.arbitrary _
#align dist_pi_le_iff' dist_pi_le_iff'

lemma dist_pi_const_le (a b : Œ±) : (dist (fun _ : Œ≤ => a) fun _ => b) ‚â§ dist a b :=
  (dist_pi_le_iff dist_nonneg).2 fun _ => le_rfl
#align dist_pi_const_le dist_pi_const_le

lemma nndist_pi_const_le (a b : Œ±) : (nndist (fun _ : Œ≤ => a) fun _ => b) ‚â§ nndist a b :=
  nndist_pi_le_iff.2 fun _ => le_rfl
#align nndist_pi_const_le nndist_pi_const_le

@[simp]
lemma dist_pi_const [Nonempty Œ≤] (a b : Œ±) : (dist (fun _ : Œ≤ => a) fun _ => b) = dist a b := by
  simpa only [dist_edist] using congr_arg ENNReal.toReal (edist_pi_const a b)
#align dist_pi_const dist_pi_const

@[simp]
lemma nndist_pi_const [Nonempty Œ≤] (a b : Œ±) : (nndist (fun _ : Œ≤ => a) fun _ => b) = nndist a b :=
  NNReal.eq <| dist_pi_const a b
#align nndist_pi_const nndist_pi_const

lemma nndist_le_pi_nndist (f g : ‚àÄ b, œÄ b) (b : Œ≤) : nndist (f b) (g b) ‚â§ nndist f g := by
  rw [‚Üê ENNReal.coe_le_coe, ‚Üê edist_nndist, ‚Üê edist_nndist]
  exact edist_le_pi_edist f g b
#align nndist_le_pi_nndist nndist_le_pi_nndist

lemma dist_le_pi_dist (f g : ‚àÄ b, œÄ b) (b : Œ≤) : dist (f b) (g b) ‚â§ dist f g := by
  simp only [dist_nndist, NNReal.coe_le_coe, nndist_le_pi_nndist f g b]
#align dist_le_pi_dist dist_le_pi_dist

/-- An open ball in a product space is a product of open balls. See also `ball_pi'`
for a version assuming `Nonempty Œ≤` instead of `0 < r`. -/
lemma ball_pi (x : ‚àÄ b, œÄ b) {r : ‚Ñù} (hr : 0 < r) :
    ball x r = Set.pi univ fun b => ball (x b) r := by
  ext p
  simp [dist_pi_lt_iff hr]
#align ball_pi ball_pi

/-- An open ball in a product space is a product of open balls. See also `ball_pi`
for a version assuming `0 < r` instead of `Nonempty Œ≤`. -/
lemma ball_pi' [Nonempty Œ≤] (x : ‚àÄ b, œÄ b) (r : ‚Ñù) :
    ball x r = Set.pi univ fun b => ball (x b) r :=
  (lt_or_le 0 r).elim (ball_pi x) fun hr => by simp [ball_eq_empty.2 hr]
#align ball_pi' ball_pi'

/-- A closed ball in a product space is a product of closed balls. See also `closedBall_pi'`
for a version assuming `Nonempty Œ≤` instead of `0 ‚â§ r`. -/
lemma closedBall_pi (x : ‚àÄ b, œÄ b) {r : ‚Ñù} (hr : 0 ‚â§ r) :
    closedBall x r = Set.pi univ fun b => closedBall (x b) r := by
  ext p
  simp [dist_pi_le_iff hr]
#align closed_ball_pi closedBall_pi

/-- A closed ball in a product space is a product of closed balls. See also `closedBall_pi`
for a version assuming `0 ‚â§ r` instead of `Nonempty Œ≤`. -/
lemma closedBall_pi' [Nonempty Œ≤] (x : ‚àÄ b, œÄ b) (r : ‚Ñù) :
    closedBall x r = Set.pi univ fun b => closedBall (x b) r :=
  (le_or_lt 0 r).elim (closedBall_pi x) fun hr => by simp [closedBall_eq_empty.2 hr]
#align closed_ball_pi' closedBall_pi'

/-- A sphere in a product space is a union of spheres on each component restricted to the closed
ball. -/
lemma sphere_pi (x : ‚àÄ b, œÄ b) {r : ‚Ñù} (h : 0 < r ‚à® Nonempty Œ≤) :
    sphere x r = (‚ãÉ i : Œ≤, Function.eval i ‚Åª¬π' sphere (x i) r) ‚à© closedBall x r := by
  obtain hr | rfl | hr := lt_trichotomy r 0
  ¬∑ simp [hr]
  ¬∑ rw [closedBall_eq_sphere_of_nonpos le_rfl, eq_comm, Set.inter_eq_right]
    letI := h.resolve_left (lt_irrefl _)
    inhabit Œ≤
    refine subset_iUnion_of_subset default ?_
    intro x hx
    replace hx := hx.le
    rw [dist_pi_le_iff le_rfl] at hx
    exact le_antisymm (hx default) dist_nonneg
  ¬∑ ext
    simp [dist_pi_eq_iff hr, dist_pi_le_iff hr.le]
#align sphere_pi sphere_pi

@[simp]
lemma Fin.nndist_insertNth_insertNth {n : ‚Ñï} {Œ± : Fin (n + 1) ‚Üí Type*}
    [‚àÄ i, PseudoMetricSpace (Œ± i)] (i : Fin (n + 1)) (x y : Œ± i) (f g : ‚àÄ j, Œ± (i.succAbove j)) :
    nndist (i.insertNth x f) (i.insertNth y g) = max (nndist x y) (nndist f g) :=
  eq_of_forall_ge_iff fun c => by simp [nndist_pi_le_iff, i.forall_iff_succAbove]
#align fin.nndist_insert_nth_insert_nth Fin.nndist_insertNth_insertNth

@[simp]
lemma Fin.dist_insertNth_insertNth {n : ‚Ñï} {Œ± : Fin (n + 1) ‚Üí Type*}
    [‚àÄ i, PseudoMetricSpace (Œ± i)] (i : Fin (n + 1)) (x y : Œ± i) (f g : ‚àÄ j, Œ± (i.succAbove j)) :
    dist (i.insertNth x f) (i.insertNth y g) = max (dist x y) (dist f g) := by
  simp only [dist_nndist, Fin.nndist_insertNth_insertNth, NNReal.coe_max]
#align fin.dist_insert_nth_insert_nth Fin.dist_insertNth_insertNth

end Pi

instance : PseudoMetricSpace (Additive Œ±) := ‚Äπ_‚Ä∫
instance : PseudoMetricSpace (Multiplicative Œ±) := ‚Äπ_‚Ä∫
instance : PseudoMetricSpace Œ±·µí·µà := ‚Äπ_‚Ä∫
