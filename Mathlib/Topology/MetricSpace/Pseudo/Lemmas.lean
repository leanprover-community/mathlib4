/-
Copyright (c) 2015, 2017 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jeremy Avigad, Robert Y. Lewis, Johannes H√∂lzl, Mario Carneiro, S√©bastien Gou√´zel
-/
import Mathlib.Data.Set.Pointwise.Interval
import Mathlib.Topology.MetricSpace.Pseudo.Constructions
import Mathlib.Topology.Order.DenselyOrdered

/-!
# Extra lemmas about pseudo-metric spaces
-/

open Bornology Filter Metric Set
open scoped NNReal Topology

variable {Œπ Œ± : Type*} [PseudoMetricSpace Œ±]

lemma Real.dist_left_le_of_mem_uIcc {x y z : ‚Ñù} (h : y ‚àà uIcc x z) : dist x y ‚â§ dist x z := by
  simpa only [dist_comm x] using abs_sub_left_of_mem_uIcc h

lemma Real.dist_right_le_of_mem_uIcc {x y z : ‚Ñù} (h : y ‚àà uIcc x z) : dist y z ‚â§ dist x z := by
  simpa only [dist_comm _ z] using abs_sub_right_of_mem_uIcc h

lemma Real.dist_le_of_mem_uIcc {x y x' y' : ‚Ñù} (hx : x ‚àà uIcc x' y') (hy : y ‚àà uIcc x' y') :
    dist x y ‚â§ dist x' y' :=
  abs_sub_le_of_uIcc_subset_uIcc <| uIcc_subset_uIcc (by rwa [uIcc_comm]) (by rwa [uIcc_comm])

lemma Real.dist_le_of_mem_Icc {x y x' y' : ‚Ñù} (hx : x ‚àà Icc x' y') (hy : y ‚àà Icc x' y') :
    dist x y ‚â§ y' - x' := by
  simpa only [Real.dist_eq, abs_of_nonpos (sub_nonpos.2 <| hx.1.trans hx.2), neg_sub] using
    Real.dist_le_of_mem_uIcc (Icc_subset_uIcc hx) (Icc_subset_uIcc hy)

lemma Real.dist_le_of_mem_Icc_01 {x y : ‚Ñù} (hx : x ‚àà Icc (0 : ‚Ñù) 1) (hy : y ‚àà Icc (0 : ‚Ñù) 1) :
    dist x y ‚â§ 1 := by simpa only [sub_zero] using Real.dist_le_of_mem_Icc hx hy

instance : OrderTopology ‚Ñù :=
  orderTopology_of_nhds_abs fun x => by
    simp only [nhds_basis_ball.eq_biInf, ball, Real.dist_eq, abs_sub_comm]

/-- Special case of the sandwich lemma; see `tendsto_of_tendsto_of_tendsto_of_le_of_le'` for the
general case. -/
lemma squeeze_zero' {Œ±} {f g : Œ± ‚Üí ‚Ñù} {t‚ÇÄ : Filter Œ±} (hf : ‚àÄ·∂† t in t‚ÇÄ, 0 ‚â§ f t)
    (hft : ‚àÄ·∂† t in t‚ÇÄ, f t ‚â§ g t) (g0 : Tendsto g t‚ÇÄ (ùìù 0)) : Tendsto f t‚ÇÄ (ùìù 0) :=
  tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds g0 hf hft

/-- Special case of the sandwich lemma; see `tendsto_of_tendsto_of_tendsto_of_le_of_le`
and `tendsto_of_tendsto_of_tendsto_of_le_of_le'` for the general case. -/
lemma squeeze_zero {Œ±} {f g : Œ± ‚Üí ‚Ñù} {t‚ÇÄ : Filter Œ±} (hf : ‚àÄ t, 0 ‚â§ f t) (hft : ‚àÄ t, f t ‚â§ g t)
    (g0 : Tendsto g t‚ÇÄ (ùìù 0)) : Tendsto f t‚ÇÄ (ùìù 0) :=
  squeeze_zero' (eventually_of_forall hf) (eventually_of_forall hft) g0

/-- If `u` is a neighborhood of `x`, then for small enough `r`, the closed ball
`Metric.closedBall x r` is contained in `u`. -/
lemma eventually_closedBall_subset {x : Œ±} {u : Set Œ±} (hu : u ‚àà ùìù x) :
    ‚àÄ·∂† r in ùìù (0 : ‚Ñù), closedBall x r ‚äÜ u := by
  obtain ‚ü®Œµ, Œµpos, hŒµ‚ü© : ‚àÉ Œµ, 0 < Œµ ‚àß closedBall x Œµ ‚äÜ u := nhds_basis_closedBall.mem_iff.1 hu
  have : Iic Œµ ‚àà ùìù (0 : ‚Ñù) := Iic_mem_nhds Œµpos
  filter_upwards [this] with _ hr using Subset.trans (closedBall_subset_closedBall hr) hŒµ

lemma tendsto_closedBall_smallSets (x : Œ±) : Tendsto (closedBall x) (ùìù 0) (ùìù x).smallSets :=
  tendsto_smallSets_iff.2 fun _ ‚Ü¶ eventually_closedBall_subset

namespace Metric
variable {x y z : Œ±} {Œµ Œµ‚ÇÅ Œµ‚ÇÇ : ‚Ñù} {s : Set Œ±}

lemma isClosed_ball : IsClosed (closedBall x Œµ) :=
  isClosed_le (continuous_id.dist continuous_const) continuous_const

lemma isClosed_sphere : IsClosed (sphere x Œµ) :=
  isClosed_eq (continuous_id.dist continuous_const) continuous_const

@[simp]
lemma closure_closedBall : closure (closedBall x Œµ) = closedBall x Œµ :=
  isClosed_ball.closure_eq

@[simp]
lemma closure_sphere : closure (sphere x Œµ) = sphere x Œµ :=
  isClosed_sphere.closure_eq

lemma closure_ball_subset_closedBall : closure (ball x Œµ) ‚äÜ closedBall x Œµ :=
  closure_minimal ball_subset_closedBall isClosed_ball

lemma frontier_ball_subset_sphere : frontier (ball x Œµ) ‚äÜ sphere x Œµ :=
  frontier_lt_subset_eq (continuous_id.dist continuous_const) continuous_const

lemma frontier_closedBall_subset_sphere : frontier (closedBall x Œµ) ‚äÜ sphere x Œµ :=
  frontier_le_subset_eq (continuous_id.dist continuous_const) continuous_const

lemma closedBall_zero' (x : Œ±) : closedBall x 0 = closure {x} :=
  Subset.antisymm
    (fun _y hy =>
      mem_closure_iff.2 fun _Œµ Œµ0 => ‚ü®x, mem_singleton x, (mem_closedBall.1 hy).trans_lt Œµ0‚ü©)
    (closure_minimal (singleton_subset_iff.2 (dist_self x).le) isClosed_ball)

lemma eventually_isCompact_closedBall [WeaklyLocallyCompactSpace Œ±] (x : Œ±) :
    ‚àÄ·∂† r in ùìù (0 : ‚Ñù), IsCompact (closedBall x r) := by
  rcases exists_compact_mem_nhds x with ‚ü®s, s_compact, hs‚ü©
  filter_upwards [eventually_closedBall_subset hs] with r hr
  exact IsCompact.of_isClosed_subset s_compact isClosed_ball hr

lemma exists_isCompact_closedBall [WeaklyLocallyCompactSpace Œ±] (x : Œ±) :
    ‚àÉ r, 0 < r ‚àß IsCompact (closedBall x r) := by
  have : ‚àÄ·∂† r in ùìù[>] 0, IsCompact (closedBall x r) :=
    eventually_nhdsWithin_of_eventually_nhds (eventually_isCompact_closedBall x)
  simpa only [and_comm] using (this.and self_mem_nhdsWithin).exists

end Metric

namespace Real
variable {œÄ : Œπ ‚Üí Type*} [Fintype Œπ] [‚àÄ i, PseudoMetricSpace (œÄ i)] {x y x' y' : Œπ ‚Üí ‚Ñù}

lemma dist_le_of_mem_pi_Icc (hx : x ‚àà Icc x' y') (hy : y ‚àà Icc x' y') : dist x y ‚â§ dist x' y' := by
  refine (dist_pi_le_iff dist_nonneg).2 fun b =>
    (Real.dist_le_of_mem_uIcc ?_ ?_).trans (dist_le_pi_dist x' y' b) <;> refine Icc_subset_uIcc ?_
  exacts [‚ü®hx.1 _, hx.2 _‚ü©, ‚ü®hy.1 _, hy.2 _‚ü©]

end Real
