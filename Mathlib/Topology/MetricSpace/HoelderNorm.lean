/-
Copyright (c) 2024 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import Mathlib.Topology.MetricSpace.Hoelder

/-!
# H√∂lder norm

This file defines the H√∂lder (semi-)norm for H√∂lder functions alongside some basic properties.
The `r`-H√∂lder norm of a function `f : X ‚Üí Y` between two metric spaces is the least non-negative
real number `C` for which `f` is `r`-H√∂lder continuous with constant `C`, i.e. it is the least `C`
for which `WithHoelder C r f` is true.

## Main definitions

* `eHoelderNorm r f`: `r`-H√∂lder (semi-)norm in `‚Ñù‚â•0‚àû` of a function `f`.
* `nnHoelderNorm r f`: `r`-H√∂lder (semi-)norm in `‚Ñù‚â•0` of a function `f`.
* `MemHoelder r f`: Predicate for a function `f` being `r`-H√∂lder continuous.

## Main results

* `eHoelderNorm_eq_zero`: the H√∂lder norm of a function is zero if and only if it is constant.
* `MemHoelder.hoelderWith`: The H√∂lder norm of a H√∂lder function `f` is a H√∂lder constant of `f`.

## Tags

H√∂lder norm, Hoeder norm

-/

variable {X Y Z : Type*}

open Filter Set

open NNReal ENNReal Topology

section PseudoEMetricSpace

variable [PseudoEMetricSpace X] [PseudoEMetricSpace Y] {r : ‚Ñù‚â•0} {f : X ‚Üí Y}

/-- The `r`-H√∂lder (semi-)norm in `‚Ñù‚â•0‚àû` of a function `f` is the least non-negative real
number `C` for which `f` is `r`-H√∂lder continuous with constant `C`. This is `‚àû` if no such
non-negative real exists. -/
noncomputable
def eHoelderNorm (r : ‚Ñù‚â•0) (f : X ‚Üí Y) : ‚Ñù‚â•0‚àû := ‚®Ö (C) (_ : HoelderWith C r f), C

/-- The `r`-H√∂lder (semi)norm in `‚Ñù‚â•0`. -/
noncomputable
def nnHoelderNorm (r : ‚Ñù‚â•0) (f : X ‚Üí Y) : ‚Ñù‚â•0 := (eHoelderNorm r f).toNNReal

/-- A function `f` is `MemHoelder r f` if it is H√∂lder continuous. Namely, `f` has a finite
`r`-H√∂lder constant. This is equivalent to `f` having finite H√∂lder norm.
c.f. `memHoelder_iff`. -/
def MemHoelder (r : ‚Ñù‚â•0) (f : X ‚Üí Y) : Prop := ‚àÉ C, HoelderWith C r f

lemma HoelderWith.memHoelder {C : ‚Ñù‚â•0} (hf : HoelderWith C r f) : MemHoelder r f := ‚ü®C, hf‚ü©

@[simp] lemma eHoelderNorm_lt_top_iff : eHoelderNorm r f < ‚àû ‚Üî MemHoelder r f := by
  refine ‚ü®fun h => ?_,
    fun hf => let ‚ü®C, hC‚ü© := hf; iInf_lt_top.2 ‚ü®C, iInf_lt_top.2 ‚ü®hC, coe_lt_top‚ü©‚ü©‚ü©
  simp_rw [eHoelderNorm, iInf_lt_top] at h
  exact let ‚ü®C, hC, _‚ü© := h; ‚ü®C, hC‚ü©

lemma eHoelderNorm_ne_top_iff : eHoelderNorm r f ‚â† ‚àû ‚Üî MemHoelder r f := by
  rw [‚Üê eHoelderNorm_lt_top_iff, lt_top_iff_ne_top]

@[simp] lemma eHoelderNorm_eq_top : eHoelderNorm r f = ‚àû ‚Üî ¬¨ MemHoelder r f := by
  rw [‚Üê eHoelderNorm_ne_top_iff, not_not]

protected alias ‚ü®_, MemHoelder.eHoelderNorm_lt_top‚ü© := eHoelderNorm_lt_top_iff
protected alias ‚ü®_, MemHoelder.eHoelderNorm_ne_top‚ü© := eHoelderNorm_ne_top_iff

variable (X) in
lemma eHoelderNorm_const (r : ‚Ñù‚â•0) (c : Y) : eHoelderNorm r (Function.const X c) = 0 := by
  rw [eHoelderNorm, ‚Üê ENNReal.bot_eq_zero, iInf‚ÇÇ_eq_bot]
  exact fun C' hC' => ‚ü®0, .const, hC'‚ü©

variable (X) in
lemma eHoelderNorm_zero [Zero Y] (r : ‚Ñù‚â•0) : eHoelderNorm r (0 : X ‚Üí Y) = 0 :=
  eHoelderNorm_const X r 0

attribute [simp] eHoelderNorm_const eHoelderNorm_zero

lemma eHoelderNorm_of_isEmpty [hX : IsEmpty X] :
    eHoelderNorm r f = 0 := by
  rw [eHoelderNorm, ‚Üê ENNReal.bot_eq_zero, iInf‚ÇÇ_eq_bot]
  exact fun Œµ hŒµ => ‚ü®0, .of_isEmpty, hŒµ‚ü©

lemma HoelderWith.eHoelderNorm_le {C : ‚Ñù‚â•0} (hf : HoelderWith C r f) :
    eHoelderNorm r f ‚â§ C :=
  iInf‚ÇÇ_le C hf

@[simp]
lemma memHoelder_const {c : Y} : MemHoelder r (Function.const X c) :=
  (HoelderWith.const (C := 0)).memHoelder

@[simp]
lemma memHoelder_zero [Zero Y] : MemHoelder r (0 : X ‚Üí Y) :=
  memHoelder_const

end PseudoEMetricSpace

section MetricSpace

variable [MetricSpace X] [EMetricSpace Y]

lemma eHoelderNorm_eq_zero {r : ‚Ñù‚â•0} {f : X ‚Üí Y} :
    eHoelderNorm r f = 0 ‚Üî ‚àÄ x‚ÇÅ x‚ÇÇ, f x‚ÇÅ = f x‚ÇÇ := by
  constructor
  ¬∑ refine fun h x‚ÇÅ x‚ÇÇ => ?_
    by_cases hx : x‚ÇÅ = x‚ÇÇ
    ¬∑ rw [hx]
    ¬∑ rw [eHoelderNorm, ‚Üê ENNReal.bot_eq_zero, iInf‚ÇÇ_eq_bot] at h
      rw [‚Üê edist_eq_zero, ‚Üê le_zero_iff]
      refine le_of_forall_lt' fun b hb => ?_
      obtain ‚ü®C, hC, hC'‚ü© := h (b / edist x‚ÇÅ x‚ÇÇ ^ (r : ‚Ñù))
        (ENNReal.div_pos hb.ne.symm (ENNReal.rpow_lt_top_of_nonneg zero_le_coe
          (edist_lt_top x‚ÇÅ x‚ÇÇ).ne).ne)
      exact lt_of_le_of_lt (hC x‚ÇÅ x‚ÇÇ) <| ENNReal.mul_lt_of_lt_div hC'
  ¬∑ intro h
    cases' isEmpty_or_nonempty X with hX hX
    ¬∑ haveI := hX
      exact eHoelderNorm_of_isEmpty
    ¬∑ rw [‚Üê eHoelderNorm_const X r (f hX.some)]
      congr
      simp [funext_iff, h _ hX.some]

lemma MemHoelder.hoelderWith {r : ‚Ñù‚â•0} {f : X ‚Üí Y} (hf : MemHoelder r f) :
    HoelderWith (nnHoelderNorm r f) r f := by
  intros x‚ÇÅ x‚ÇÇ
  by_cases hx : x‚ÇÅ = x‚ÇÇ
  ¬∑ simp only [hx, edist_self, zero_le]
  rw [nnHoelderNorm, eHoelderNorm, coe_toNNReal]
  swap; exact hf.eHoelderNorm_lt_top.ne
  have h‚ÇÅ : edist x‚ÇÅ x‚ÇÇ ^ (r : ‚Ñù) ‚â† 0 :=
    (Ne.symm <| ne_of_lt <| ENNReal.rpow_pos (edist_pos.2 hx) (edist_lt_top x‚ÇÅ x‚ÇÇ).ne)
  have h‚ÇÇ : edist x‚ÇÅ x‚ÇÇ ^ (r : ‚Ñù) ‚â† ‚àû := by
    simp [(edist_lt_top x‚ÇÅ x‚ÇÇ).ne]
  rw [‚Üê ENNReal.div_le_iff h‚ÇÅ h‚ÇÇ]
  refine le_iInf‚ÇÇ fun C hC => ?_
  rw [ENNReal.div_le_iff h‚ÇÅ h‚ÇÇ]
  exact hC x‚ÇÅ x‚ÇÇ

lemma memHoelder_iff_hoelderWith {r : ‚Ñù‚â•0} {f : X ‚Üí Y} :
    MemHoelder r f ‚Üî HoelderWith (nnHoelderNorm r f) r f :=
  ‚ü®MemHoelder.hoelderWith, HoelderWith.memHoelder‚ü©

lemma coe_nnHoelderNorm_le_eHoelderNorm {r : ‚Ñù‚â•0} {f : X ‚Üí Y} :
    (nnHoelderNorm r f : ‚Ñù‚â•0‚àû) ‚â§ eHoelderNorm r f :=
  coe_toNNReal_le_self

lemma HoelderWith.coe_nnHoelderNorm_eq_eHoelderNorm
    {C r : ‚Ñù‚â•0} {f : X ‚Üí Y} (hf : HoelderWith C r f) :
    (nnHoelderNorm r f : ‚Ñù‚â•0‚àû) = eHoelderNorm r f := by
  rw [nnHoelderNorm, coe_toNNReal]
  exact ne_of_lt <| lt_of_le_of_lt hf.eHoelderNorm_le <| coe_lt_top (r := C)

lemma MemHoelder.coe_nnHoelderNorm_eq_eHoelderNorm
    {r : ‚Ñù‚â•0} {f : X ‚Üí Y} (hf : MemHoelder r f) :
    (nnHoelderNorm r f : ‚Ñù‚â•0‚àû) = eHoelderNorm r f :=
  hf.hoelderWith.coe_nnHoelderNorm_eq_eHoelderNorm

lemma HoelderWith.nnhoelderNorm_le {C r : ‚Ñù‚â•0} {f : X ‚Üí Y} (hf : HoelderWith C r f) :
    nnHoelderNorm r f ‚â§ C := by
  rw [‚Üê ENNReal.coe_le_coe, hf.coe_nnHoelderNorm_eq_eHoelderNorm]
  exact hf.eHoelderNorm_le

lemma MemHoelder.comp {r s : ‚Ñù‚â•0} {Z : Type*} [MetricSpace Z] {f : Z ‚Üí X} {g : X ‚Üí Y}
    (hf : MemHoelder r f) (hg : MemHoelder s g) : MemHoelder (s * r) (g ‚àò f) :=
  (hg.hoelderWith.comp hf.hoelderWith).memHoelder

end MetricSpace

section SeminormedAddCommGroup

variable [MetricSpace X] [NormedAddCommGroup Y]
variable {C r : ‚Ñù‚â•0} {f g : X ‚Üí Y}

lemma MemHoelder.add (hf : MemHoelder r f) (hg : MemHoelder r g) : MemHoelder r (f + g) :=
  (hf.hoelderWith.add hg.hoelderWith).memHoelder

lemma MemHoelder.smul {ùïú} [NormedDivisionRing ùïú] [Module ùïú Y] [BoundedSMul ùïú Y]
    {c : ùïú} (hf : MemHoelder r f) : MemHoelder r (c ‚Ä¢ f) :=
  (hf.hoelderWith.smul c).memHoelder

lemma eHoelderNorm_add_le :
    eHoelderNorm r (f + g) ‚â§ eHoelderNorm r f + eHoelderNorm r g := by
  by_cases hfg : MemHoelder r f  ‚àß MemHoelder r g
  ¬∑ obtain ‚ü®hf, hg‚ü© := hfg
    rw [‚Üê hf.coe_nnHoelderNorm_eq_eHoelderNorm, ‚Üê hg.coe_nnHoelderNorm_eq_eHoelderNorm, ‚Üê coe_add]
    exact (hf.add hg).hoelderWith.eHoelderNorm_le.trans <|
      coe_le_coe.2 (hf.hoelderWith.add hg.hoelderWith).nnhoelderNorm_le
  ¬∑ rw [Classical.not_and_iff_or_not_not, ‚Üê eHoelderNorm_eq_top, ‚Üê eHoelderNorm_eq_top] at hfg
    obtain (h | h) := hfg
    all_goals simp [h]

lemma eHoelderNorm_smul {Œ±} [NormedDivisionRing Œ±] [Module Œ± Y] [BoundedSMul Œ± Y] (c : Œ±) :
    eHoelderNorm r (c ‚Ä¢ f) = ‚Äñc‚Äñ‚Çä * eHoelderNorm r f := by
  by_cases hc : ‚Äñc‚Äñ‚Çä = 0
  ¬∑ rw [nnnorm_eq_zero] at hc
    simp [hc]
  by_cases hf : MemHoelder r f
  ¬∑ refine le_antisymm ((hf.hoelderWith.smul c).eHoelderNorm_le.trans ?_) <| mul_le_of_le_div' ?_
    ¬∑ rw [coe_mul, hf.coe_nnHoelderNorm_eq_eHoelderNorm, mul_comm]
    ¬∑ rw [‚Üê (hf.hoelderWith.smul c).coe_nnHoelderNorm_eq_eHoelderNorm, ‚Üê coe_div hc]
      refine HoelderWith.eHoelderNorm_le fun x‚ÇÅ x‚ÇÇ => ?_
      rw [coe_div hc, ‚Üê ENNReal.mul_div_right_comm,
        ENNReal.le_div_iff_mul_le (Or.inl <| coe_ne_zero.2 hc) <| Or.inl coe_ne_top,
        mul_comm, ‚Üê smul_eq_mul, ‚Üê ENNReal.smul_def, ‚Üê edist_smul‚ÇÄ, ‚Üê Pi.smul_apply,
        ‚Üê Pi.smul_apply]
      exact hf.smul.hoelderWith x‚ÇÅ x‚ÇÇ
  ¬∑ rw [‚Üê eHoelderNorm_eq_top] at hf
    rw [hf, mul_top <| coe_ne_zero.2 hc, eHoelderNorm_eq_top]
    rw [nnnorm_eq_zero] at hc
    intro h
    have := h.smul (c := c‚Åª¬π)
    rw [inv_smul_smul‚ÇÄ hc] at this
    exact this.eHoelderNorm_lt_top.ne hf

lemma eHoelderNorm_nsmul [Module ‚Ñù Y] [BoundedSMul ‚Ñù Y] (n : ‚Ñï) :
    eHoelderNorm r (n ‚Ä¢ f) = n ‚Ä¢ eHoelderNorm r f := by
  simp [‚Üê Nat.cast_smul_eq_nsmul (R := ‚Ñù), eHoelderNorm_smul]

end SeminormedAddCommGroup
