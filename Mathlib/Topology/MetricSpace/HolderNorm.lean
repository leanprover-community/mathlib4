/-
Copyright (c) 2024 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import Mathlib.Topology.MetricSpace.Holder

/-!
# H√∂lder norm

This file defines the H√∂lder (semi-)norm for H√∂lder functions alongside some basic properties.
The `r`-H√∂lder norm of a function `f : X ‚Üí Y` between two metric spaces is the least non-negative
real number `C` for which `f` is `r`-H√∂lder continuous with constant `C`, i.e. it is the least `C`
for which `WithHolder C r f` is true.

## Main definitions

* `eHolderNorm r f`: `r`-H√∂lder (semi-)norm in `‚Ñù‚â•0‚àû` of a function `f`.
* `nnHolderNorm r f`: `r`-H√∂lder (semi-)norm in `‚Ñù‚â•0` of a function `f`.
* `MemHolder r f`: Predicate for a function `f` being `r`-H√∂lder continuous.

## Main results

* `eHolderNorm_eq_zero`: the H√∂lder norm of a function is zero if and only if it is constant.
* `MemHolder.holderWith`: The H√∂lder norm of a H√∂lder function `f` is a H√∂lder constant of `f`.

## Tags

H√∂lder norm, Hoelder norm, Holder norm

-/

variable {X Y : Type*}

open Filter Set

open NNReal ENNReal Topology

section PseudoEMetricSpace

variable [PseudoEMetricSpace X] [PseudoEMetricSpace Y] {r : ‚Ñù‚â•0} {f : X ‚Üí Y}

/-- The `r`-H√∂lder (semi-)norm in `‚Ñù‚â•0‚àû` of a function `f` is the least non-negative real
number `C` for which `f` is `r`-H√∂lder continuous with constant `C`. This is `‚àû` if no such
non-negative real exists. -/
noncomputable
def eHolderNorm (r : ‚Ñù‚â•0) (f : X ‚Üí Y) : ‚Ñù‚â•0‚àû := ‚®Ö (C) (_ : HolderWith C r f), C

/-- The `r`-H√∂lder (semi)norm in `‚Ñù‚â•0`. -/
noncomputable
def nnHolderNorm (r : ‚Ñù‚â•0) (f : X ‚Üí Y) : ‚Ñù‚â•0 := (eHolderNorm r f).toNNReal

/-- A function `f` is `MemHolder r f` if it is H√∂lder continuous. Namely, `f` has a finite
`r`-H√∂lder constant. This is equivalent to `f` having finite H√∂lder norm.
c.f. `memHolder_iff`. -/
def MemHolder (r : ‚Ñù‚â•0) (f : X ‚Üí Y) : Prop := ‚àÉ C, HolderWith C r f

lemma HolderWith.memHolder {C : ‚Ñù‚â•0} (hf : HolderWith C r f) : MemHolder r f := ‚ü®C, hf‚ü©

@[simp] lemma eHolderNorm_lt_top : eHolderNorm r f < ‚àû ‚Üî MemHolder r f := by
  refine ‚ü®fun h => ?_,
    fun hf => let ‚ü®C, hC‚ü© := hf; iInf_lt_top.2 ‚ü®C, iInf_lt_top.2 ‚ü®hC, coe_lt_top‚ü©‚ü©‚ü©
  simp_rw [eHolderNorm, iInf_lt_top] at h
  exact let ‚ü®C, hC, _‚ü© := h; ‚ü®C, hC‚ü©

lemma eHolderNorm_ne_top : eHolderNorm r f ‚â† ‚àû ‚Üî MemHolder r f := by
  rw [‚Üê eHolderNorm_lt_top, lt_top_iff_ne_top]

@[simp] lemma eHolderNorm_eq_top : eHolderNorm r f = ‚àû ‚Üî ¬¨ MemHolder r f := by
  rw [‚Üê eHolderNorm_ne_top, not_not]

protected alias ‚ü®_, MemHolder.eHolderNorm_lt_top‚ü© := eHolderNorm_lt_top
protected alias ‚ü®_, MemHolder.eHolderNorm_ne_top‚ü© := eHolderNorm_ne_top

lemma coe_nnHolderNorm_le_eHolderNorm {r : ‚Ñù‚â•0} {f : X ‚Üí Y} :
    (nnHolderNorm r f : ‚Ñù‚â•0‚àû) ‚â§ eHolderNorm r f :=
  coe_toNNReal_le_self

variable (X) in
@[simp]
lemma eHolderNorm_const (r : ‚Ñù‚â•0) (c : Y) : eHolderNorm r (Function.const X c) = 0 := by
  rw [eHolderNorm, ‚Üê ENNReal.bot_eq_zero, iInf‚ÇÇ_eq_bot]
  exact fun C' hC' => ‚ü®0, .const, hC'‚ü©

variable (X) in
@[simp]
lemma eHolderNorm_zero [Zero Y] (r : ‚Ñù‚â•0) : eHolderNorm r (0 : X ‚Üí Y) = 0 :=
  eHolderNorm_const X r 0

variable (X) in
@[simp]
lemma nnHolderNorm_const (r : ‚Ñù‚â•0) (c : Y) : nnHolderNorm r (Function.const X c) = 0 := by
  refine le_antisymm (ENNReal.coe_le_coe.1 <|
    le_trans coe_nnHolderNorm_le_eHolderNorm ?_) (zero_le _)
  rw [eHolderNorm_const]
  rfl

variable (X) in
@[simp]
lemma nnHolderNorm_zero [Zero Y] (r : ‚Ñù‚â•0) : nnHolderNorm r (0 : X ‚Üí Y) = 0 :=
  nnHolderNorm_const X r 0

attribute [simp] eHolderNorm_const eHolderNorm_zero

lemma eHolderNorm_of_isEmpty [hX : IsEmpty X] :
    eHolderNorm r f = 0 := by
  rw [eHolderNorm, ‚Üê ENNReal.bot_eq_zero, iInf‚ÇÇ_eq_bot]
  exact fun Œµ hŒµ => ‚ü®0, .of_isEmpty, hŒµ‚ü©

lemma HolderWith.eHolderNorm_le {C : ‚Ñù‚â•0} (hf : HolderWith C r f) :
    eHolderNorm r f ‚â§ C :=
  iInf‚ÇÇ_le C hf

/-- See also `memHolder_const` for the version with the spelling `fun _ ‚Ü¶ c`. -/
@[simp]
lemma memHolder_const {c : Y} : MemHolder r (Function.const X c) :=
  (HolderWith.const (C := 0)).memHolder

/-- Version of `memHolder_const` with the spelling `fun _ ‚Ü¶ c` for the constant function. -/
@[simp]
lemma memHolder_const' {c : Y} : MemHolder r (fun _ ‚Ü¶ c : X ‚Üí Y) :=
  memHolder_const

@[simp]
lemma memHolder_zero [Zero Y] : MemHolder r (0 : X ‚Üí Y) :=
  memHolder_const

end PseudoEMetricSpace

section MetricSpace

variable [MetricSpace X] [EMetricSpace Y]

lemma eHolderNorm_eq_zero {r : ‚Ñù‚â•0} {f : X ‚Üí Y} :
    eHolderNorm r f = 0 ‚Üî ‚àÄ x‚ÇÅ x‚ÇÇ, f x‚ÇÅ = f x‚ÇÇ := by
  constructor
  ¬∑ refine fun h x‚ÇÅ x‚ÇÇ => ?_
    by_cases hx : x‚ÇÅ = x‚ÇÇ
    ¬∑ rw [hx]
    ¬∑ rw [eHolderNorm, ‚Üê ENNReal.bot_eq_zero, iInf‚ÇÇ_eq_bot] at h
      rw [‚Üê edist_eq_zero, ‚Üê le_zero_iff]
      refine le_of_forall_lt' fun b hb => ?_
      obtain ‚ü®C, hC, hC'‚ü© := h (b / edist x‚ÇÅ x‚ÇÇ ^ (r : ‚Ñù))
        (ENNReal.div_pos hb.ne.symm (ENNReal.rpow_lt_top_of_nonneg zero_le_coe
          (edist_lt_top x‚ÇÅ x‚ÇÇ).ne).ne)
      exact lt_of_le_of_lt (hC x‚ÇÅ x‚ÇÇ) <| ENNReal.mul_lt_of_lt_div hC'
  ¬∑ intro h
    cases' isEmpty_or_nonempty X with hX hX
    ¬∑ haveI := hX
      exact eHolderNorm_of_isEmpty
    ¬∑ rw [‚Üê eHolderNorm_const X r (f hX.some)]
      congr
      simp [funext_iff, h _ hX.some]

lemma MemHolder.holderWith {r : ‚Ñù‚â•0} {f : X ‚Üí Y} (hf : MemHolder r f) :
    HolderWith (nnHolderNorm r f) r f := by
  intros x‚ÇÅ x‚ÇÇ
  by_cases hx : x‚ÇÅ = x‚ÇÇ
  ¬∑ simp only [hx, edist_self, zero_le]
  rw [nnHolderNorm, eHolderNorm, coe_toNNReal]
  on_goal 2 => exact hf.eHolderNorm_lt_top.ne
  have h‚ÇÅ : edist x‚ÇÅ x‚ÇÇ ^ (r : ‚Ñù) ‚â† 0 :=
    (Ne.symm <| ne_of_lt <| ENNReal.rpow_pos (edist_pos.2 hx) (edist_lt_top x‚ÇÅ x‚ÇÇ).ne)
  have h‚ÇÇ : edist x‚ÇÅ x‚ÇÇ ^ (r : ‚Ñù) ‚â† ‚àû := by
    simp [(edist_lt_top x‚ÇÅ x‚ÇÇ).ne]
  rw [‚Üê ENNReal.div_le_iff h‚ÇÅ h‚ÇÇ]
  refine le_iInf‚ÇÇ fun C hC => ?_
  rw [ENNReal.div_le_iff h‚ÇÅ h‚ÇÇ]
  exact hC x‚ÇÅ x‚ÇÇ

lemma memHolder_iff_holderWith {r : ‚Ñù‚â•0} {f : X ‚Üí Y} :
    MemHolder r f ‚Üî HolderWith (nnHolderNorm r f) r f :=
  ‚ü®MemHolder.holderWith, HolderWith.memHolder‚ü©

lemma MemHolder.coe_nnHolderNorm_eq_eHolderNorm
    {r : ‚Ñù‚â•0} {f : X ‚Üí Y} (hf : MemHolder r f) :
    (nnHolderNorm r f : ‚Ñù‚â•0‚àû) = eHolderNorm r f := by
  rw [nnHolderNorm, coe_toNNReal]
  exact ne_of_lt <| lt_of_le_of_lt hf.holderWith.eHolderNorm_le <| coe_lt_top

lemma HolderWith.nnholderNorm_le {C r : ‚Ñù‚â•0} {f : X ‚Üí Y} (hf : HolderWith C r f) :
    nnHolderNorm r f ‚â§ C := by
  rw [‚Üê ENNReal.coe_le_coe, hf.memHolder.coe_nnHolderNorm_eq_eHolderNorm]
  exact hf.eHolderNorm_le

lemma MemHolder.comp {r s : ‚Ñù‚â•0} {Z : Type*} [MetricSpace Z] {f : Z ‚Üí X} {g : X ‚Üí Y}
    (hf : MemHolder r f) (hg : MemHolder s g) : MemHolder (s * r) (g ‚àò f) :=
  (hg.holderWith.comp hf.holderWith).memHolder

lemma MemHolder.nnHolderNorm_eq_zero {r : ‚Ñù‚â•0} {f : X ‚Üí Y} (hf : MemHolder r f) :
    nnHolderNorm r f = 0 ‚Üî ‚àÄ x‚ÇÅ x‚ÇÇ, f x‚ÇÅ = f x‚ÇÇ := by
  rw [‚Üê ENNReal.coe_eq_zero, hf.coe_nnHolderNorm_eq_eHolderNorm, eHolderNorm_eq_zero]

end MetricSpace

section SeminormedAddCommGroup

variable [MetricSpace X] [NormedAddCommGroup Y]
variable {r : ‚Ñù‚â•0} {f g : X ‚Üí Y}

lemma MemHolder.add (hf : MemHolder r f) (hg : MemHolder r g) : MemHolder r (f + g) :=
  (hf.holderWith.add hg.holderWith).memHolder

lemma MemHolder.smul {ùïú} [NormedDivisionRing ùïú] [Module ùïú Y] [BoundedSMul ùïú Y]
    {c : ùïú} (hf : MemHolder r f) : MemHolder r (c ‚Ä¢ f) :=
  (hf.holderWith.smul c).memHolder

lemma MemHolder.nsmul [Module ‚Ñù Y] [BoundedSMul ‚Ñù Y] (n : ‚Ñï) (hf : MemHolder r f) :
    MemHolder r (n ‚Ä¢ f) := by
  simp [‚Üê Nat.cast_smul_eq_nsmul (R := ‚Ñù), hf.smul]

lemma MemHolder.nnHolderNorm_add_le (hf : MemHolder r f) (hg : MemHolder r g) :
    nnHolderNorm r (f + g) ‚â§ nnHolderNorm r f + nnHolderNorm r g :=
  (hf.add hg).holderWith.nnholderNorm_le.trans <|
    coe_le_coe.2 (hf.holderWith.add hg.holderWith).nnholderNorm_le

lemma eHolderNorm_add_le :
    eHolderNorm r (f + g) ‚â§ eHolderNorm r f + eHolderNorm r g := by
  by_cases hfg : MemHolder r f  ‚àß MemHolder r g
  ¬∑ obtain ‚ü®hf, hg‚ü© := hfg
    rw [‚Üê hf.coe_nnHolderNorm_eq_eHolderNorm, ‚Üê hg.coe_nnHolderNorm_eq_eHolderNorm,
      ‚Üê (hf.add hg).coe_nnHolderNorm_eq_eHolderNorm, ‚Üê coe_add, ENNReal.coe_le_coe]
    exact hf.nnHolderNorm_add_le hg
  ¬∑ rw [Classical.not_and_iff_or_not_not, ‚Üê eHolderNorm_eq_top, ‚Üê eHolderNorm_eq_top] at hfg
    obtain (h | h) := hfg
    all_goals simp [h]

lemma eHolderNorm_smul {Œ±} [NormedDivisionRing Œ±] [Module Œ± Y] [BoundedSMul Œ± Y] (c : Œ±) :
    eHolderNorm r (c ‚Ä¢ f) = ‚Äñc‚Äñ‚Çä * eHolderNorm r f := by
  by_cases hc : ‚Äñc‚Äñ‚Çä = 0
  ¬∑ rw [nnnorm_eq_zero] at hc
    simp [hc]
  by_cases hf : MemHolder r f
  ¬∑ refine le_antisymm ((hf.holderWith.smul c).eHolderNorm_le.trans ?_) <| mul_le_of_le_div' ?_
    ¬∑ rw [coe_mul, hf.coe_nnHolderNorm_eq_eHolderNorm, mul_comm]
    ¬∑ rw [‚Üê (hf.holderWith.smul c).memHolder.coe_nnHolderNorm_eq_eHolderNorm, ‚Üê coe_div hc]
      refine HolderWith.eHolderNorm_le fun x‚ÇÅ x‚ÇÇ => ?_
      rw [coe_div hc, ‚Üê ENNReal.mul_div_right_comm,
        ENNReal.le_div_iff_mul_le (Or.inl <| coe_ne_zero.2 hc) <| Or.inl coe_ne_top,
        mul_comm, ‚Üê smul_eq_mul, ‚Üê ENNReal.smul_def, ‚Üê edist_smul‚ÇÄ, ‚Üê Pi.smul_apply,
        ‚Üê Pi.smul_apply]
      exact hf.smul.holderWith x‚ÇÅ x‚ÇÇ
  ¬∑ rw [‚Üê eHolderNorm_eq_top] at hf
    rw [hf, mul_top <| coe_ne_zero.2 hc, eHolderNorm_eq_top]
    rw [nnnorm_eq_zero] at hc
    intro h
    have := h.smul (c := c‚Åª¬π)
    rw [inv_smul_smul‚ÇÄ hc] at this
    exact this.eHolderNorm_lt_top.ne hf

lemma MemHolder.nnHolderNorm_smul {Œ±} [NormedDivisionRing Œ±] [Module Œ± Y] [BoundedSMul Œ± Y]
    (hf : MemHolder r f) (c : Œ±) :
    nnHolderNorm r (c ‚Ä¢ f) = ‚Äñc‚Äñ‚Çä * nnHolderNorm r f := by
  rw [‚Üê ENNReal.coe_inj, coe_mul, hf.coe_nnHolderNorm_eq_eHolderNorm,
    hf.smul.coe_nnHolderNorm_eq_eHolderNorm, eHolderNorm_smul]

lemma eHolderNorm_nsmul [Module ‚Ñù Y] [BoundedSMul ‚Ñù Y] (n : ‚Ñï) :
    eHolderNorm r (n ‚Ä¢ f) = n ‚Ä¢ eHolderNorm r f := by
  simp [‚Üê Nat.cast_smul_eq_nsmul (R := ‚Ñù), eHolderNorm_smul]

lemma MemHolder.nnHolderNorm_nsmul [Module ‚Ñù Y] [BoundedSMul ‚Ñù Y] (n : ‚Ñï) (hf : MemHolder r f) :
    nnHolderNorm r (n ‚Ä¢ f) = n ‚Ä¢ nnHolderNorm r f := by
  simp [‚Üê Nat.cast_smul_eq_nsmul (R := ‚Ñù), hf.nnHolderNorm_smul]

end SeminormedAddCommGroup
