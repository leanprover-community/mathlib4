/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.Analysis.SpecificLimits.Basic
import Mathlib.Topology.MetricSpace.HausdorffDistance
import Mathlib.Topology.Sets.Compacts

#align_import topology.metric_space.closeds from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# Closed subsets

This file defines the metric and emetric space structure on the types of closed subsets and nonempty
compact subsets of a metric or emetric space.

The Hausdorff distance induces an emetric space structure on the type of closed subsets
of an emetric space, called `Closeds`. Its completeness, resp. compactness, resp.
second-countability, follow from the corresponding properties of the original space.

In a metric space, the type of nonempty compact subsets (called `NonemptyCompacts`) also
inherits a metric space structure from the Hausdorff distance, as the Hausdorff edistance is
always finite in this context.
-/


noncomputable section

open scoped Classical
open Topology ENNReal

universe u

open scoped Classical
open Set Function TopologicalSpace Filter

namespace EMetric

section

variable {Œ± : Type u} [EMetricSpace Œ±] {s : Set Œ±}

/-- In emetric spaces, the Hausdorff edistance defines an emetric space structure
on the type of closed subsets -/
instance Closeds.emetricSpace : EMetricSpace (Closeds Œ±) where
  edist s t := hausdorffEdist (s : Set Œ±) t
  edist_self s := hausdorffEdist_self
  edist_comm s t := hausdorffEdist_comm
  edist_triangle s t u := hausdorffEdist_triangle
  eq_of_edist_eq_zero {s t} h :=
    Closeds.ext <| (hausdorffEdist_zero_iff_eq_of_closed s.closed t.closed).1 h
#align emetric.closeds.emetric_space EMetric.Closeds.emetricSpace

/-- The edistance to a closed set depends continuously on the point and the set -/
theorem continuous_infEdist_hausdorffEdist :
    Continuous fun p : Œ± √ó Closeds Œ± => infEdist p.1 p.2 := by
  refine' continuous_of_le_add_edist 2 (by simp) _
  rintro ‚ü®x, s‚ü© ‚ü®y, t‚ü©
  calc
    infEdist x s ‚â§ infEdist x t + hausdorffEdist (t : Set Œ±) s :=
      infEdist_le_infEdist_add_hausdorffEdist
    _ ‚â§ infEdist y t + edist x y + hausdorffEdist (t : Set Œ±) s :=
      (add_le_add_right infEdist_le_infEdist_add_edist _)
    _ = infEdist y t + (edist x y + hausdorffEdist (s : Set Œ±) t) := by
      rw [add_assoc, hausdorffEdist_comm]
    _ ‚â§ infEdist y t + (edist (x, s) (y, t) + edist (x, s) (y, t)) :=
      (add_le_add_left (add_le_add (le_max_left _ _) (le_max_right _ _)) _)
    _ = infEdist y t + 2 * edist (x, s) (y, t) := by rw [‚Üê mul_two, mul_comm]
set_option linter.uppercaseLean3 false in
#align emetric.continuous_infEdist_hausdorffEdist EMetric.continuous_infEdist_hausdorffEdist

/-- Subsets of a given closed subset form a closed set -/
theorem isClosed_subsets_of_isClosed (hs : IsClosed s) :
    IsClosed { t : Closeds Œ± | (t : Set Œ±) ‚äÜ s } := by
  refine isClosed_of_closure_subset fun
    (t : Closeds Œ±) (ht : t ‚àà closure {t : Closeds Œ± | (t : Set Œ±) ‚äÜ s}) (x : Œ±) (hx : x ‚àà t) => ?_
  have : x ‚àà closure s := by
    refine' mem_closure_iff.2 fun Œµ Œµpos => _
    obtain ‚ü®u : Closeds Œ±, hu : u ‚àà {t : Closeds Œ± | (t : Set Œ±) ‚äÜ s}, Dtu : edist t u < Œµ‚ü© :=
      mem_closure_iff.1 ht Œµ Œµpos
    obtain ‚ü®y : Œ±, hy : y ‚àà u, Dxy : edist x y < Œµ‚ü© := exists_edist_lt_of_hausdorffEdist_lt hx Dtu
    exact ‚ü®y, hu hy, Dxy‚ü©
  rwa [hs.closure_eq] at this
#align emetric.is_closed_subsets_of_is_closed EMetric.isClosed_subsets_of_isClosed

/-- By definition, the edistance on `Closeds Œ±` is given by the Hausdorff edistance -/
theorem Closeds.edist_eq {s t : Closeds Œ±} : edist s t = hausdorffEdist (s : Set Œ±) t :=
  rfl
#align emetric.closeds.edist_eq EMetric.Closeds.edist_eq

/-- In a complete space, the type of closed subsets is complete for the
Hausdorff edistance. -/
instance Closeds.completeSpace [CompleteSpace Œ±] : CompleteSpace (Closeds Œ±) := by
  /- We will show that, if a sequence of sets `s n` satisfies
    `edist (s n) (s (n+1)) < 2^{-n}`, then it converges. This is enough to guarantee
    completeness, by a standard completeness criterion.
    We use the shorthand `B n = 2^{-n}` in ennreal. -/
  let B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû := fun n => 2‚Åª¬π ^ n
  have B_pos : ‚àÄ n, (0 : ‚Ñù‚â•0‚àû) < B n := by simp [B, ENNReal.pow_pos]
  have B_ne_top : ‚àÄ n, B n ‚â† ‚ä§ := by simp [B, ENNReal.pow_ne_top]
  /- Consider a sequence of closed sets `s n` with `edist (s n) (s (n+1)) < B n`.
    We will show that it converges. The limit set is `t0 = ‚ãÇn, closure (‚ãÉm‚â•n, s m)`.
    We will have to show that a point in `s n` is close to a point in `t0`, and a point
    in `t0` is close to a point in `s n`. The completeness then follows from a
    standard criterion. -/
  refine' complete_of_convergent_controlled_sequences B B_pos fun s hs => _
  let t0 := ‚ãÇ n, closure (‚ãÉ m ‚â• n, s m : Set Œ±)
  let t : Closeds Œ± := ‚ü®t0, isClosed_iInter fun _ => isClosed_closure‚ü©
  use t
  -- The inequality is written this way to agree with `edist_le_of_edist_le_geometric_of_tendsto‚ÇÄ`
  have I1 : ‚àÄ n, ‚àÄ x ‚àà s n, ‚àÉ y ‚àà t0, edist x y ‚â§ 2 * B n := by
    /- This is the main difficulty of the proof. Starting from `x ‚àà s n`, we want
           to find a point in `t0` which is close to `x`. Define inductively a sequence of
           points `z m` with `z n = x` and `z m ‚àà s m` and `edist (z m) (z (m+1)) ‚â§ B m`. This is
           possible since the Hausdorff distance between `s m` and `s (m+1)` is at most `B m`.
           This sequence is a Cauchy sequence, therefore converging as the space is complete, to
           a limit which satisfies the required properties. -/
    intro n x hx
    obtain ‚ü®z, hz‚ÇÄ, hz‚ü© :
      ‚àÉ z : ‚àÄ l, s (n + l), (z 0 : Œ±) = x ‚àß ‚àÄ k, edist (z k : Œ±) (z (k + 1) : Œ±) ‚â§ B n / 2 ^ k := by
      -- We prove existence of the sequence by induction.
      have : ‚àÄ (l) (z : s (n + l)), ‚àÉ z' : s (n + l + 1), edist (z : Œ±) z' ‚â§ B n / 2 ^ l := by
        intro l z
        obtain ‚ü®z', z'_mem, hz'‚ü© : ‚àÉ z' ‚àà s (n + l + 1), edist (z : Œ±) z' < B n / 2 ^ l := by
          refine' exists_edist_lt_of_hausdorffEdist_lt _ _
          ¬∑ exact (s (n + l) : Set Œ±)
          ¬∑ exact z.2
          simp only [ENNReal.inv_pow, div_eq_mul_inv]
          rw [‚Üê pow_add]
          apply hs <;> simp
        exact ‚ü®‚ü®z', z'_mem‚ü©, le_of_lt hz'‚ü©
      use fun k => Nat.recOn k ‚ü®x, hx‚ü© fun l z => (this l z).choose
      simp only [Nat.add_zero, Nat.zero_eq, Nat.rec_zero, Nat.rec_add_one, true_and]
      exact fun k => (this k _).choose_spec
    -- it follows from the previous bound that `z` is a Cauchy sequence
    have : CauchySeq fun k => (z k : Œ±) := cauchySeq_of_edist_le_geometric_two (B n) (B_ne_top n) hz
    -- therefore, it converges
    rcases cauchySeq_tendsto_of_complete this with ‚ü®y, y_lim‚ü©
    use y
    -- the limit point `y` will be the desired point, in `t0` and close to our initial point `x`.
    -- First, we check it belongs to `t0`.
    have : y ‚àà t0 :=
      mem_iInter.2 fun k =>
        mem_closure_of_tendsto y_lim
          (by
            simp only [exists_prop, Set.mem_iUnion, Filter.eventually_atTop, Set.mem_preimage,
              Set.preimage_iUnion]
            exact ‚ü®k, fun m hm => ‚ü®n + m, zero_add k ‚ñ∏ add_le_add (zero_le n) hm, (z m).2‚ü©‚ü©)
    use this
    -- Then, we check that `y` is close to `x = z n`. This follows from the fact that `y`
    -- is the limit of `z k`, and the distance between `z n` and `z k` has already been estimated.
    rw [‚Üê hz‚ÇÄ]
    exact edist_le_of_edist_le_geometric_two_of_tendsto‚ÇÄ (B n) hz y_lim
  have I2 : ‚àÄ n, ‚àÄ x ‚àà t0, ‚àÉ y ‚àà s n, edist x y ‚â§ 2 * B n := by
    /- For the (much easier) reverse inequality, we start from a point `x ‚àà t0` and we want
            to find a point `y ‚àà s n` which is close to `x`.
            `x` belongs to `t0`, the intersection of the closures. In particular, it is well
            approximated by a point `z` in `‚ãÉm‚â•n, s m`, say in `s m`. Since `s m` and
            `s n` are close, this point is itself well approximated by a point `y` in `s n`,
            as required. -/
    intro n x xt0
    have : x ‚àà closure (‚ãÉ m ‚â• n, s m : Set Œ±) := by apply mem_iInter.1 xt0 n
    obtain ‚ü®z : Œ±, hz, Dxz : edist x z < B n‚ü© := mem_closure_iff.1 this (B n) (B_pos n)
    simp only [exists_prop, Set.mem_iUnion] at hz
    obtain ‚ü®m : ‚Ñï, m_ge_n : m ‚â• n, hm : z ‚àà (s m : Set Œ±)‚ü© := hz
    have : hausdorffEdist (s m : Set Œ±) (s n) < B n := hs n m n m_ge_n (le_refl n)
    obtain ‚ü®y : Œ±, hy : y ‚àà (s n : Set Œ±), Dzy : edist z y < B n‚ü© :=
      exists_edist_lt_of_hausdorffEdist_lt hm this
    exact
      ‚ü®y, hy,
        calc
          edist x y ‚â§ edist x z + edist z y := edist_triangle _ _ _
          _ ‚â§ B n + B n := add_le_add (le_of_lt Dxz) (le_of_lt Dzy)
          _ = 2 * B n := (two_mul _).symm
          ‚ü©
  -- Deduce from the above inequalities that the distance between `s n` and `t0` is at most `2 B n`.
  have main : ‚àÄ n : ‚Ñï, edist (s n) t ‚â§ 2 * B n := fun n =>
    hausdorffEdist_le_of_mem_edist (I1 n) (I2 n)
  -- from this, the convergence of `s n` to `t0` follows.
  refine' tendsto_atTop.2 fun Œµ Œµpos => _
  have : Tendsto (fun n => 2 * B n) atTop (ùìù (2 * 0)) :=
    ENNReal.Tendsto.const_mul (ENNReal.tendsto_pow_atTop_nhds_zero_of_lt_one <|
      by simp [ENNReal.one_lt_two]) (Or.inr <| by simp)
  rw [mul_zero] at this
  obtain ‚ü®N, hN‚ü© : ‚àÉ N, ‚àÄ b ‚â• N, Œµ > 2 * B b :=
    ((tendsto_order.1 this).2 Œµ Œµpos).exists_forall_of_atTop
  exact ‚ü®N, fun n hn => lt_of_le_of_lt (main n) (hN n hn)‚ü©
#align emetric.closeds.complete_space EMetric.Closeds.completeSpace

/-- In a compact space, the type of closed subsets is compact. -/
instance Closeds.compactSpace [CompactSpace Œ±] : CompactSpace (Closeds Œ±) :=
  ‚ü®by
    /- by completeness, it suffices to show that it is totally bounded,
        i.e., for all Œµ>0, there is a finite set which is Œµ-dense.
        start from a set `s` which is Œµ-dense in Œ±. Then the subsets of `s`
        are finitely many, and Œµ-dense for the Hausdorff distance. -/
    refine'
      isCompact_of_totallyBounded_isClosed (EMetric.totallyBounded_iff.2 fun Œµ Œµpos => _)
        isClosed_univ
    rcases exists_between Œµpos with ‚ü®Œ¥, Œ¥pos, Œ¥lt‚ü©
    obtain ‚ü®s : Set Œ±, fs : s.Finite, hs : univ ‚äÜ ‚ãÉ y ‚àà s, ball y Œ¥‚ü© :=
      EMetric.totallyBounded_iff.1
        (isCompact_iff_totallyBounded_isComplete.1 (@isCompact_univ Œ± _ _)).1 Œ¥ Œ¥pos
    -- we first show that any set is well approximated by a subset of `s`.
    have main : ‚àÄ u : Set Œ±, ‚àÉ v ‚äÜ s, hausdorffEdist u v ‚â§ Œ¥ := by
      intro u
      let v := { x : Œ± | x ‚àà s ‚àß ‚àÉ y ‚àà u, edist x y < Œ¥ }
      exists v, (fun x hx => hx.1 : v ‚äÜ s)
      refine' hausdorffEdist_le_of_mem_edist _ _
      ¬∑ intro x hx
        have : x ‚àà ‚ãÉ y ‚àà s, ball y Œ¥ := hs (by simp)
        rcases mem_iUnion‚ÇÇ.1 this with ‚ü®y, ys, dy‚ü©
        have : edist y x < Œ¥ := by simp at dy; rwa [edist_comm] at dy
        exact ‚ü®y, ‚ü®ys, ‚ü®x, hx, this‚ü©‚ü©, le_of_lt dy‚ü©
      ¬∑ rintro x ‚ü®_, ‚ü®y, yu, hy‚ü©‚ü©
        exact ‚ü®y, yu, le_of_lt hy‚ü©
    -- introduce the set F of all subsets of `s` (seen as members of `Closeds Œ±`).
    let F := { f : Closeds Œ± | (f : Set Œ±) ‚äÜ s }
    refine' ‚ü®F, _, fun u _ => _‚ü©
    -- `F` is finite
    ¬∑ apply @Finite.of_finite_image _ _ F _
      ¬∑ apply fs.finite_subsets.subset fun b => _
        ¬∑ exact fun s => (s : Set Œ±)
        simp only [F, and_imp, Set.mem_image, Set.mem_setOf_eq, exists_imp]
        intro _ x hx hx'
        rwa [hx'] at hx
      ¬∑ exact SetLike.coe_injective.injOn F
    -- `F` is Œµ-dense
    ¬∑ obtain ‚ü®t0, t0s, Dut0‚ü© := main u
      have : IsClosed t0 := (fs.subset t0s).isCompact.isClosed
      let t : Closeds Œ± := ‚ü®t0, this‚ü©
      have : t ‚àà F := t0s
      have : edist u t < Œµ := lt_of_le_of_lt Dut0 Œ¥lt
      apply mem_iUnion‚ÇÇ.2
      exact ‚ü®t, ‚Äπt ‚àà F‚Ä∫, this‚ü©‚ü©
#align emetric.closeds.compact_space EMetric.Closeds.compactSpace

/-- In an emetric space, the type of non-empty compact subsets is an emetric space,
where the edistance is the Hausdorff edistance -/
instance NonemptyCompacts.emetricSpace : EMetricSpace (NonemptyCompacts Œ±) where
  edist s t := hausdorffEdist (s : Set Œ±) t
  edist_self s := hausdorffEdist_self
  edist_comm s t := hausdorffEdist_comm
  edist_triangle s t u := hausdorffEdist_triangle
  eq_of_edist_eq_zero {s t} h := NonemptyCompacts.ext <| by
    have : closure (s : Set Œ±) = closure t := hausdorffEdist_zero_iff_closure_eq_closure.1 h
    rwa [s.isCompact.isClosed.closure_eq, t.isCompact.isClosed.closure_eq] at this
#align emetric.nonempty_compacts.emetric_space EMetric.NonemptyCompacts.emetricSpace

/-- `NonemptyCompacts.toCloseds` is a uniform embedding (as it is an isometry) -/
theorem NonemptyCompacts.ToCloseds.uniformEmbedding :
    UniformEmbedding (@NonemptyCompacts.toCloseds Œ± _ _) :=
  Isometry.uniformEmbedding fun _ _ => rfl
#align emetric.nonempty_compacts.to_closeds.uniform_embedding EMetric.NonemptyCompacts.ToCloseds.uniformEmbedding

/-- The range of `NonemptyCompacts.toCloseds` is closed in a complete space -/
theorem NonemptyCompacts.isClosed_in_closeds [CompleteSpace Œ±] :
    IsClosed (range <| @NonemptyCompacts.toCloseds Œ± _ _) := by
  have :
    range NonemptyCompacts.toCloseds =
      { s : Closeds Œ± | (s : Set Œ±).Nonempty ‚àß IsCompact (s : Set Œ±) } := by
    ext s
    refine ‚ü®?_, fun h => ‚ü®‚ü®‚ü®s, h.2‚ü©, h.1‚ü©, Closeds.ext rfl‚ü©‚ü©
    rintro ‚ü®s, hs, rfl‚ü©
    exact ‚ü®s.nonempty, s.isCompact‚ü©
  rw [this]
  refine' isClosed_of_closure_subset fun s hs => ‚ü®_, _‚ü©
  ¬∑ -- take a set t which is nonempty and at a finite distance of s
    rcases mem_closure_iff.1 hs ‚ä§ ENNReal.coe_lt_top with ‚ü®t, ht, Dst‚ü©
    rw [edist_comm] at Dst
    -- since `t` is nonempty, so is `s`
    exact nonempty_of_hausdorffEdist_ne_top ht.1 (ne_of_lt Dst)
  ¬∑ refine' isCompact_iff_totallyBounded_isComplete.2 ‚ü®_, s.closed.isComplete‚ü©
    refine' totallyBounded_iff.2 fun Œµ (Œµpos : 0 < Œµ) => _
    -- we have to show that s is covered by finitely many eballs of radius Œµ
    -- pick a nonempty compact set t at distance at most Œµ/2 of s
    rcases mem_closure_iff.1 hs (Œµ / 2) (ENNReal.half_pos Œµpos.ne') with ‚ü®t, ht, Dst‚ü©
    -- cover this space with finitely many balls of radius Œµ/2
    rcases totallyBounded_iff.1 (isCompact_iff_totallyBounded_isComplete.1 ht.2).1 (Œµ / 2)
        (ENNReal.half_pos Œµpos.ne') with
      ‚ü®u, fu, ut‚ü©
    refine ‚ü®u, ‚ü®fu, fun x hx => ?_‚ü©‚ü©
    -- u : set Œ±, fu : u.finite, ut : t ‚äÜ ‚ãÉ (y : Œ±) (H : y ‚àà u), eball y (Œµ / 2)
    -- then s is covered by the union of the balls centered at u of radius Œµ
    rcases exists_edist_lt_of_hausdorffEdist_lt hx Dst with ‚ü®z, hz, Dxz‚ü©
    rcases mem_iUnion‚ÇÇ.1 (ut hz) with ‚ü®y, hy, Dzy‚ü©
    have : edist x y < Œµ :=
      calc
        edist x y ‚â§ edist x z + edist z y := edist_triangle _ _ _
        _ < Œµ / 2 + Œµ / 2 := ENNReal.add_lt_add Dxz Dzy
        _ = Œµ := ENNReal.add_halves _
    exact mem_biUnion hy this
#align emetric.nonempty_compacts.is_closed_in_closeds EMetric.NonemptyCompacts.isClosed_in_closeds

/-- In a complete space, the type of nonempty compact subsets is complete. This follows
from the same statement for closed subsets -/
instance NonemptyCompacts.completeSpace [CompleteSpace Œ±] : CompleteSpace (NonemptyCompacts Œ±) :=
  (completeSpace_iff_isComplete_range
        NonemptyCompacts.ToCloseds.uniformEmbedding.toUniformInducing).2 <|
    NonemptyCompacts.isClosed_in_closeds.isComplete
#align emetric.nonempty_compacts.complete_space EMetric.NonemptyCompacts.completeSpace

/-- In a compact space, the type of nonempty compact subsets is compact. This follows from
the same statement for closed subsets -/
instance NonemptyCompacts.compactSpace [CompactSpace Œ±] : CompactSpace (NonemptyCompacts Œ±) :=
  ‚ü®by
    rw [NonemptyCompacts.ToCloseds.uniformEmbedding.embedding.isCompact_iff, image_univ]
    exact NonemptyCompacts.isClosed_in_closeds.isCompact‚ü©
#align emetric.nonempty_compacts.compact_space EMetric.NonemptyCompacts.compactSpace

/-- In a second countable space, the type of nonempty compact subsets is second countable -/
instance NonemptyCompacts.secondCountableTopology [SecondCountableTopology Œ±] :
    SecondCountableTopology (NonemptyCompacts Œ±) :=
  haveI : SeparableSpace (NonemptyCompacts Œ±) := by
    /- To obtain a countable dense subset of `NonemptyCompacts Œ±`, start from
        a countable dense subset `s` of Œ±, and then consider all its finite nonempty subsets.
        This set is countable and made of nonempty compact sets. It turns out to be dense:
        by total boundedness, any compact set `t` can be covered by finitely many small balls, and
        approximations in `s` of the centers of these balls give the required finite approximation
        of `t`. -/
    rcases exists_countable_dense Œ± with ‚ü®s, cs, s_dense‚ü©
    let v0 := { t : Set Œ± | t.Finite ‚àß t ‚äÜ s }
    let v : Set (NonemptyCompacts Œ±) := { t : NonemptyCompacts Œ± | (t : Set Œ±) ‚àà v0 }
    refine' ‚ü®‚ü®v, _, _‚ü©‚ü©
    ¬∑ have : v0.Countable := countable_setOf_finite_subset cs
      exact this.preimage SetLike.coe_injective
    ¬∑ refine' fun t => mem_closure_iff.2 fun Œµ Œµpos => _
      -- t is a compact nonempty set, that we have to approximate uniformly by a a set in `v`.
      rcases exists_between Œµpos with ‚ü®Œ¥, Œ¥pos, Œ¥lt‚ü©
      have Œ¥pos' : 0 < Œ¥ / 2 := ENNReal.half_pos Œ¥pos.ne'
      -- construct a map F associating to a point in Œ± an approximating point in s, up to Œ¥/2.
      have Exy : ‚àÄ x, ‚àÉ y, y ‚àà s ‚àß edist x y < Œ¥ / 2 := by
        intro x
        rcases mem_closure_iff.1 (s_dense x) (Œ¥ / 2) Œ¥pos' with ‚ü®y, ys, hy‚ü©
        exact ‚ü®y, ‚ü®ys, hy‚ü©‚ü©
      let F x := (Exy x).choose
      have Fspec : ‚àÄ x, F x ‚àà s ‚àß edist x (F x) < Œ¥ / 2 := fun x => (Exy x).choose_spec
      -- cover `t` with finitely many balls. Their centers form a set `a`
      have : TotallyBounded (t : Set Œ±) := t.isCompact.totallyBounded
      obtain ‚ü®a : Set Œ±, af : Set.Finite a, ta : (t : Set Œ±) ‚äÜ ‚ãÉ y ‚àà a, ball y (Œ¥ / 2)‚ü© :=
        totallyBounded_iff.1 this (Œ¥ / 2) Œ¥pos'
      -- replace each center by a nearby approximation in `s`, giving a new set `b`
      let b := F '' a
      have : b.Finite := af.image _
      have tb : ‚àÄ x ‚àà t, ‚àÉ y ‚àà b, edist x y < Œ¥ := by
        intro x hx
        rcases mem_iUnion‚ÇÇ.1 (ta hx) with ‚ü®z, za, Dxz‚ü©
        exists F z, mem_image_of_mem _ za
        calc
          edist x (F z) ‚â§ edist x z + edist z (F z) := edist_triangle _ _ _
          _ < Œ¥ / 2 + Œ¥ / 2 := ENNReal.add_lt_add Dxz (Fspec z).2
          _ = Œ¥ := ENNReal.add_halves _
      -- keep only the points in `b` that are close to point in `t`, yielding a new set `c`
      let c := { y ‚àà b | ‚àÉ x ‚àà t, edist x y < Œ¥ }
      have : c.Finite := ‚Äπb.Finite‚Ä∫.subset fun x hx => hx.1
      -- points in `t` are well approximated by points in `c`
      have tc : ‚àÄ x ‚àà t, ‚àÉ y ‚àà c, edist x y ‚â§ Œ¥ := by
        intro x hx
        rcases tb x hx with ‚ü®y, yv, Dxy‚ü©
        have : y ‚àà c := by simp [c, -mem_image]; exact ‚ü®yv, ‚ü®x, hx, Dxy‚ü©‚ü©
        exact ‚ü®y, this, le_of_lt Dxy‚ü©
      -- points in `c` are well approximated by points in `t`
      have ct : ‚àÄ y ‚àà c, ‚àÉ x ‚àà t, edist y x ‚â§ Œ¥ := by
        rintro y ‚ü®_, x, xt, Dyx‚ü©
        have : edist y x ‚â§ Œ¥ :=
          calc
            edist y x = edist x y := edist_comm _ _
            _ ‚â§ Œ¥ := le_of_lt Dyx
        exact ‚ü®x, xt, this‚ü©
      -- it follows that their Hausdorff distance is small
      have : hausdorffEdist (t : Set Œ±) c ‚â§ Œ¥ := hausdorffEdist_le_of_mem_edist tc ct
      have Dtc : hausdorffEdist (t : Set Œ±) c < Œµ := this.trans_lt Œ¥lt
      -- the set `c` is not empty, as it is well approximated by a nonempty set
      have hc : c.Nonempty := nonempty_of_hausdorffEdist_ne_top t.nonempty (ne_top_of_lt Dtc)
      -- let `d` be the version of `c` in the type `NonemptyCompacts Œ±`
      let d : NonemptyCompacts Œ± := ‚ü®‚ü®c, ‚Äπc.Finite‚Ä∫.isCompact‚ü©, hc‚ü©
      have : c ‚äÜ s := by
        intro x hx
        rcases (mem_image _ _ _).1 hx.1 with ‚ü®y, ‚ü®_, yx‚ü©‚ü©
        rw [‚Üê yx]
        exact (Fspec y).1
      have : d ‚àà v := ‚ü®‚Äπc.Finite‚Ä∫, this‚ü©
      -- we have proved that `d` is a good approximation of `t` as requested
      exact ‚ü®d, ‚Äπd ‚àà v‚Ä∫, Dtc‚ü©
  UniformSpace.secondCountable_of_separable (NonemptyCompacts Œ±)
#align emetric.nonempty_compacts.second_countable_topology EMetric.NonemptyCompacts.secondCountableTopology

end

--section
end EMetric

--namespace
namespace Metric

section

variable {Œ± : Type u} [MetricSpace Œ±]

/-- `NonemptyCompacts Œ±` inherits a metric space structure, as the Hausdorff
edistance between two such sets is finite. -/
instance NonemptyCompacts.metricSpace : MetricSpace (NonemptyCompacts Œ±) :=
  EMetricSpace.toMetricSpace fun x y =>
    hausdorffEdist_ne_top_of_nonempty_of_bounded x.nonempty y.nonempty x.isCompact.isBounded
      y.isCompact.isBounded
#align metric.nonempty_compacts.metric_space Metric.NonemptyCompacts.metricSpace

/-- The distance on `NonemptyCompacts Œ±` is the Hausdorff distance, by construction -/
theorem NonemptyCompacts.dist_eq {x y : NonemptyCompacts Œ±} :
    dist x y = hausdorffDist (x : Set Œ±) y :=
  rfl
#align metric.nonempty_compacts.dist_eq Metric.NonemptyCompacts.dist_eq

theorem lipschitz_infDist_set (x : Œ±) : LipschitzWith 1 fun s : NonemptyCompacts Œ± => infDist x s :=
  LipschitzWith.of_le_add fun s t => by
    rw [dist_comm]
    exact infDist_le_infDist_add_hausdorffDist (edist_ne_top t s)
#align metric.lipschitz_inf_dist_set Metric.lipschitz_infDist_set

theorem lipschitz_infDist : LipschitzWith 2 fun p : Œ± √ó NonemptyCompacts Œ± => infDist p.1 p.2 := by
  -- Porting note: Changed tactic from `exact` to `convert`, because Lean had trouble with 2 = 1 + 1
  convert @LipschitzWith.uncurry Œ± (NonemptyCompacts Œ±) ‚Ñù _ _ _
    (fun (x : Œ±) (s : NonemptyCompacts Œ±) => infDist x s) 1 1
    (fun s => lipschitz_infDist_pt ‚Üës) lipschitz_infDist_set
  norm_num
#align metric.lipschitz_inf_dist Metric.lipschitz_infDist

theorem uniformContinuous_infDist_Hausdorff_dist :
    UniformContinuous fun p : Œ± √ó NonemptyCompacts Œ± => infDist p.1 p.2 :=
  lipschitz_infDist.uniformContinuous
#align metric.uniform_continuous_inf_dist_Hausdorff_dist Metric.uniformContinuous_infDist_Hausdorff_dist

end --section

end Metric --namespace
