/-
Copyright (c) 2021 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§
-/
import Mathlib.Topology.MetricSpace.HausdorffDistance

/-!
# Thickenings in pseudo-metric spaces

## Main definitions
* `Metric.thickening Œ¥ s`, the open thickening by radius `Œ¥` of a set `s` in a pseudo emetric space.
* `Metric.cthickening Œ¥ s`, the closed thickening by radius `Œ¥` of a set `s` in a pseudo emetric
  space.

## Main results
* `Disjoint.exists_thickenings`: two disjoint sets admit disjoint thickenings
* `Disjoint.exists_cthickenings`: two disjoint sets admit disjoint closed thickenings
* `IsCompact.exists_cthickening_subset_open`: if `s` is compact, `t` is open and `s ‚äÜ t`,
  some `cthickening` of `s` is contained in `t`.

* `Metric.hasBasis_nhdsSet_cthickening`: the `cthickening`s of a compact set `K` form a basis
  of the neighbourhoods of `K`
* `Metric.closure_eq_iInter_cthickening'`: the closure of a set equals the intersection
  of its closed thickenings of positive radii accumulating at zero.
  The same holds for open thickenings.
* `IsCompact.cthickening_eq_biUnion_closedBall`: if `s` is compact, `cthickening Œ¥ s` is the union
  of `closedBall`s of radius `Œ¥` around `x : E`.

-/

noncomputable section
open NNReal ENNReal Topology Set Filter Bornology

universe u v w

variable {Œπ : Sort*} {Œ± : Type u}

namespace Metric

section Thickening

variable [PseudoEMetricSpace Œ±] {Œ¥ : ‚Ñù} {s : Set Œ±} {x : Œ±}

open EMetric

/-- The (open) `Œ¥`-thickening `Metric.thickening Œ¥ E` of a subset `E` in a pseudo emetric space
consists of those points that are at distance less than `Œ¥` from some point of `E`. -/
def thickening (Œ¥ : ‚Ñù) (E : Set Œ±) : Set Œ± :=
  { x : Œ± | infEdist x E < ENNReal.ofReal Œ¥ }

theorem mem_thickening_iff_infEdist_lt : x ‚àà thickening Œ¥ s ‚Üî infEdist x s < ENNReal.ofReal Œ¥ :=
  Iff.rfl

/-- An exterior point of a subset `E` (i.e., a point outside the closure of `E`) is not in the
(open) `Œ¥`-thickening of `E` for small enough positive `Œ¥`. -/
lemma eventually_not_mem_thickening_of_infEdist_pos {E : Set Œ±} {x : Œ±} (h : x ‚àâ closure E) :
    ‚àÄ·∂† Œ¥ in ùìù (0 : ‚Ñù), x ‚àâ Metric.thickening Œ¥ E := by
  obtain ‚ü®Œµ, ‚ü®Œµ_pos, Œµ_lt‚ü©‚ü© := exists_real_pos_lt_infEdist_of_not_mem_closure h
  filter_upwards [eventually_lt_nhds Œµ_pos] with Œ¥ hŒ¥
  simp only [thickening, mem_setOf_eq, not_lt]
  exact (ENNReal.ofReal_le_ofReal hŒ¥.le).trans Œµ_lt.le

/-- The (open) thickening equals the preimage of an open interval under `EMetric.infEdist`. -/
theorem thickening_eq_preimage_infEdist (Œ¥ : ‚Ñù) (E : Set Œ±) :
    thickening Œ¥ E = (infEdist ¬∑ E) ‚Åª¬π' Iio (ENNReal.ofReal Œ¥) :=
  rfl

/-- The (open) thickening is an open set. -/
theorem isOpen_thickening {Œ¥ : ‚Ñù} {E : Set Œ±} : IsOpen (thickening Œ¥ E) :=
  Continuous.isOpen_preimage continuous_infEdist _ isOpen_Iio

/-- The (open) thickening of the empty set is empty. -/
@[simp]
theorem thickening_empty (Œ¥ : ‚Ñù) : thickening Œ¥ (‚àÖ : Set Œ±) = ‚àÖ := by
  simp only [thickening, setOf_false, infEdist_empty, not_top_lt]

theorem thickening_of_nonpos (hŒ¥ : Œ¥ ‚â§ 0) (s : Set Œ±) : thickening Œ¥ s = ‚àÖ :=
  eq_empty_of_forall_not_mem fun _ => ((ENNReal.ofReal_of_nonpos hŒ¥).trans_le bot_le).not_lt

/-- The (open) thickening `Metric.thickening Œ¥ E` of a fixed subset `E` is an increasing function of
the thickening radius `Œ¥`. -/
theorem thickening_mono {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) :
    thickening Œ¥‚ÇÅ E ‚äÜ thickening Œ¥‚ÇÇ E :=
  preimage_mono (Iio_subset_Iio (ENNReal.ofReal_le_ofReal hle))

/-- The (open) thickening `Metric.thickening Œ¥ E` with a fixed thickening radius `Œ¥` is
an increasing function of the subset `E`. -/
theorem thickening_subset_of_subset (Œ¥ : ‚Ñù) {E‚ÇÅ E‚ÇÇ : Set Œ±} (h : E‚ÇÅ ‚äÜ E‚ÇÇ) :
    thickening Œ¥ E‚ÇÅ ‚äÜ thickening Œ¥ E‚ÇÇ := fun _ hx => lt_of_le_of_lt (infEdist_anti h) hx

theorem mem_thickening_iff_exists_edist_lt {Œ¥ : ‚Ñù} (E : Set Œ±) (x : Œ±) :
    x ‚àà thickening Œ¥ E ‚Üî ‚àÉ z ‚àà E, edist x z < ENNReal.ofReal Œ¥ :=
  infEdist_lt_iff

/-- The frontier of the (open) thickening of a set is contained in an `EMetric.infEdist` level
set. -/
theorem frontier_thickening_subset (E : Set Œ±) {Œ¥ : ‚Ñù} :
    frontier (thickening Œ¥ E) ‚äÜ { x : Œ± | infEdist x E = ENNReal.ofReal Œ¥ } :=
  frontier_lt_subset_eq continuous_infEdist continuous_const

theorem frontier_thickening_disjoint (A : Set Œ±) :
    Pairwise (Disjoint on fun r : ‚Ñù => frontier (thickening r A)) := by
  refine (pairwise_disjoint_on _).2 fun r‚ÇÅ r‚ÇÇ hr => ?_
  rcases le_total r‚ÇÅ 0 with h‚ÇÅ | h‚ÇÅ
  ¬∑ simp [thickening_of_nonpos h‚ÇÅ]
  refine ((disjoint_singleton.2 fun h => hr.ne ?_).preimage _).mono (frontier_thickening_subset _)
    (frontier_thickening_subset _)
  apply_fun ENNReal.toReal at h
  rwa [ENNReal.toReal_ofReal h‚ÇÅ, ENNReal.toReal_ofReal (h‚ÇÅ.trans hr.le)] at h

/-- Any set is contained in the complement of the Œ¥-thickening of the complement of its
Œ¥-thickening. -/
lemma subset_compl_thickening_compl_thickening_self (Œ¥ : ‚Ñù) (E : Set Œ±) :
    E ‚äÜ (thickening Œ¥ (thickening Œ¥ E)·∂ú)·∂ú := by
  intro x x_in_E
  simp only [thickening, mem_compl_iff, mem_setOf_eq, not_lt]
  apply EMetric.le_infEdist.mpr fun y hy ‚Ü¶ ?_
  simp only [mem_compl_iff, mem_setOf_eq, not_lt] at hy
  simpa only [edist_comm] using le_trans hy <| EMetric.infEdist_le_edist_of_mem x_in_E

/-- The Œ¥-thickening of the complement of the Œ¥-thickening of a set is contained in the complement
of the set. -/
lemma thickening_compl_thickening_self_subset_compl (Œ¥ : ‚Ñù) (E : Set Œ±) :
    thickening Œ¥ (thickening Œ¥ E)·∂ú ‚äÜ E·∂ú := by
  apply compl_subset_compl.mp
  simpa only [compl_compl] using subset_compl_thickening_compl_thickening_self Œ¥ E

variable {X : Type u} [PseudoMetricSpace X]

theorem mem_thickening_iff_infDist_lt {E : Set X} {x : X} (h : E.Nonempty) :
    x ‚àà thickening Œ¥ E ‚Üî infDist x E < Œ¥ :=
  lt_ofReal_iff_toReal_lt (infEdist_ne_top h)

/-- A point in a metric space belongs to the (open) `Œ¥`-thickening of a subset `E` if and only if
it is at distance less than `Œ¥` from some point of `E`. -/
theorem mem_thickening_iff {E : Set X} {x : X} : x ‚àà thickening Œ¥ E ‚Üî ‚àÉ z ‚àà E, dist x z < Œ¥ := by
  have key_iff : ‚àÄ z : X, edist x z < ENNReal.ofReal Œ¥ ‚Üî dist x z < Œ¥ := fun z ‚Ü¶ by
    rw [dist_edist, lt_ofReal_iff_toReal_lt (edist_ne_top _ _)]
  simp_rw [mem_thickening_iff_exists_edist_lt, key_iff]

@[simp]
theorem thickening_singleton (Œ¥ : ‚Ñù) (x : X) : thickening Œ¥ ({x} : Set X) = ball x Œ¥ := by
  ext
  simp [mem_thickening_iff]

theorem ball_subset_thickening {x : X} {E : Set X} (hx : x ‚àà E) (Œ¥ : ‚Ñù) :
    ball x Œ¥ ‚äÜ thickening Œ¥ E :=
  Subset.trans (by simp [Subset.rfl]) (thickening_subset_of_subset Œ¥ <| singleton_subset_iff.mpr hx)

/-- The (open) `Œ¥`-thickening `Metric.thickening Œ¥ E` of a subset `E` in a metric space equals the
union of balls of radius `Œ¥` centered at points of `E`. -/
theorem thickening_eq_biUnion_ball {Œ¥ : ‚Ñù} {E : Set X} : thickening Œ¥ E = ‚ãÉ x ‚àà E, ball x Œ¥ := by
  ext x
  simp only [mem_iUnion‚ÇÇ, exists_prop]
  exact mem_thickening_iff

protected theorem _root_.Bornology.IsBounded.thickening {Œ¥ : ‚Ñù} {E : Set X} (h : IsBounded E) :
    IsBounded (thickening Œ¥ E) := by
  rcases E.eq_empty_or_nonempty with rfl | ‚ü®x, hx‚ü©
  ¬∑ simp
  ¬∑ refine (isBounded_iff_subset_closedBall x).2 ‚ü®Œ¥ + diam E, fun y hy ‚Ü¶ ?_‚ü©
    calc
      dist y x ‚â§ infDist y E + diam E := dist_le_infDist_add_diam (x := y) h hx
      _ ‚â§ Œ¥ + diam E := add_le_add_right ((mem_thickening_iff_infDist_lt ‚ü®x, hx‚ü©).1 hy).le _

end Thickening

section Cthickening

variable [PseudoEMetricSpace Œ±] {Œ¥ Œµ : ‚Ñù} {s t : Set Œ±} {x : Œ±}

open EMetric

/-- The closed `Œ¥`-thickening `Metric.cthickening Œ¥ E` of a subset `E` in a pseudo emetric space
consists of those points that are at infimum distance at most `Œ¥` from `E`. -/
def cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) : Set Œ± :=
  { x : Œ± | infEdist x E ‚â§ ENNReal.ofReal Œ¥ }

@[simp]
theorem mem_cthickening_iff : x ‚àà cthickening Œ¥ s ‚Üî infEdist x s ‚â§ ENNReal.ofReal Œ¥ :=
  Iff.rfl

/-- An exterior point of a subset `E` (i.e., a point outside the closure of `E`) is not in the
closed `Œ¥`-thickening of `E` for small enough positive `Œ¥`. -/
lemma eventually_not_mem_cthickening_of_infEdist_pos {E : Set Œ±} {x : Œ±} (h : x ‚àâ closure E) :
    ‚àÄ·∂† Œ¥ in ùìù (0 : ‚Ñù), x ‚àâ Metric.cthickening Œ¥ E := by
  obtain ‚ü®Œµ, ‚ü®Œµ_pos, Œµ_lt‚ü©‚ü© := exists_real_pos_lt_infEdist_of_not_mem_closure h
  filter_upwards [eventually_lt_nhds Œµ_pos] with Œ¥ hŒ¥
  simp only [cthickening, mem_setOf_eq, not_le]
  exact ((ofReal_lt_ofReal_iff Œµ_pos).mpr hŒ¥).trans Œµ_lt

theorem mem_cthickening_of_edist_le (x y : Œ±) (Œ¥ : ‚Ñù) (E : Set Œ±) (h : y ‚àà E)
    (h' : edist x y ‚â§ ENNReal.ofReal Œ¥) : x ‚àà cthickening Œ¥ E :=
  (infEdist_le_edist_of_mem h).trans h'

theorem mem_cthickening_of_dist_le {Œ± : Type*} [PseudoMetricSpace Œ±] (x y : Œ±) (Œ¥ : ‚Ñù) (E : Set Œ±)
    (h : y ‚àà E) (h' : dist x y ‚â§ Œ¥) : x ‚àà cthickening Œ¥ E := by
  apply mem_cthickening_of_edist_le x y Œ¥ E h
  rw [edist_dist]
  exact ENNReal.ofReal_le_ofReal h'

theorem cthickening_eq_preimage_infEdist (Œ¥ : ‚Ñù) (E : Set Œ±) :
    cthickening Œ¥ E = (fun x => infEdist x E) ‚Åª¬π' Iic (ENNReal.ofReal Œ¥) :=
  rfl

/-- The closed thickening is a closed set. -/
theorem isClosed_cthickening {Œ¥ : ‚Ñù} {E : Set Œ±} : IsClosed (cthickening Œ¥ E) :=
  IsClosed.preimage continuous_infEdist isClosed_Iic

/-- The closed thickening of the empty set is empty. -/
@[simp]
theorem cthickening_empty (Œ¥ : ‚Ñù) : cthickening Œ¥ (‚àÖ : Set Œ±) = ‚àÖ := by
  simp only [cthickening, ENNReal.ofReal_ne_top, setOf_false, infEdist_empty, top_le_iff]

theorem cthickening_of_nonpos {Œ¥ : ‚Ñù} (hŒ¥ : Œ¥ ‚â§ 0) (E : Set Œ±) : cthickening Œ¥ E = closure E := by
  ext x
  simp [mem_closure_iff_infEdist_zero, cthickening, ENNReal.ofReal_eq_zero.2 hŒ¥]

/-- The closed thickening with radius zero is the closure of the set. -/
@[simp]
theorem cthickening_zero (E : Set Œ±) : cthickening 0 E = closure E :=
  cthickening_of_nonpos le_rfl E

theorem cthickening_max_zero (Œ¥ : ‚Ñù) (E : Set Œ±) : cthickening (max 0 Œ¥) E = cthickening Œ¥ E := by
  cases le_total Œ¥ 0 <;> simp [cthickening_of_nonpos, *]

/-- The closed thickening `Metric.cthickening Œ¥ E` of a fixed subset `E` is an increasing function
of the thickening radius `Œ¥`. -/
theorem cthickening_mono {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) :
    cthickening Œ¥‚ÇÅ E ‚äÜ cthickening Œ¥‚ÇÇ E :=
  preimage_mono (Iic_subset_Iic.mpr (ENNReal.ofReal_le_ofReal hle))

@[simp]
theorem cthickening_singleton {Œ± : Type*} [PseudoMetricSpace Œ±] (x : Œ±) {Œ¥ : ‚Ñù} (hŒ¥ : 0 ‚â§ Œ¥) :
    cthickening Œ¥ ({x} : Set Œ±) = closedBall x Œ¥ := by
  ext y
  simp [cthickening, edist_dist, ENNReal.ofReal_le_ofReal_iff hŒ¥]

theorem closedBall_subset_cthickening_singleton {Œ± : Type*} [PseudoMetricSpace Œ±] (x : Œ±) (Œ¥ : ‚Ñù) :
    closedBall x Œ¥ ‚äÜ cthickening Œ¥ ({x} : Set Œ±) := by
  rcases lt_or_le Œ¥ 0 with (hŒ¥ | hŒ¥)
  ¬∑ simp only [closedBall_eq_empty.mpr hŒ¥, empty_subset]
  ¬∑ simp only [cthickening_singleton x hŒ¥, Subset.rfl]

/-- The closed thickening `Metric.cthickening Œ¥ E` with a fixed thickening radius `Œ¥` is
an increasing function of the subset `E`. -/
theorem cthickening_subset_of_subset (Œ¥ : ‚Ñù) {E‚ÇÅ E‚ÇÇ : Set Œ±} (h : E‚ÇÅ ‚äÜ E‚ÇÇ) :
    cthickening Œ¥ E‚ÇÅ ‚äÜ cthickening Œ¥ E‚ÇÇ := fun _ hx => le_trans (infEdist_anti h) hx

theorem cthickening_subset_thickening {Œ¥‚ÇÅ : ‚Ñù‚â•0} {Œ¥‚ÇÇ : ‚Ñù} (hlt : (Œ¥‚ÇÅ : ‚Ñù) < Œ¥‚ÇÇ) (E : Set Œ±) :
    cthickening Œ¥‚ÇÅ E ‚äÜ thickening Œ¥‚ÇÇ E := fun _ hx =>
  hx.out.trans_lt ((ENNReal.ofReal_lt_ofReal_iff (lt_of_le_of_lt Œ¥‚ÇÅ.prop hlt)).mpr hlt)

/-- The closed thickening `Metric.cthickening Œ¥‚ÇÅ E` is contained in the open thickening
`Metric.thickening Œ¥‚ÇÇ E` if the radius of the latter is positive and larger. -/
theorem cthickening_subset_thickening' {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (Œ¥‚ÇÇ_pos : 0 < Œ¥‚ÇÇ) (hlt : Œ¥‚ÇÅ < Œ¥‚ÇÇ) (E : Set Œ±) :
    cthickening Œ¥‚ÇÅ E ‚äÜ thickening Œ¥‚ÇÇ E := fun _ hx =>
  lt_of_le_of_lt hx.out ((ENNReal.ofReal_lt_ofReal_iff Œ¥‚ÇÇ_pos).mpr hlt)

/-- The open thickening `Metric.thickening Œ¥ E` is contained in the closed thickening
`Metric.cthickening Œ¥ E` with the same radius. -/
theorem thickening_subset_cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) : thickening Œ¥ E ‚äÜ cthickening Œ¥ E := by
  intro x hx
  rw [thickening, mem_setOf_eq] at hx
  exact hx.le

theorem thickening_subset_cthickening_of_le {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) :
    thickening Œ¥‚ÇÅ E ‚äÜ cthickening Œ¥‚ÇÇ E :=
  (thickening_subset_cthickening Œ¥‚ÇÅ E).trans (cthickening_mono hle E)

theorem _root_.Bornology.IsBounded.cthickening {Œ± : Type*} [PseudoMetricSpace Œ±] {Œ¥ : ‚Ñù} {E : Set Œ±}
    (h : IsBounded E) : IsBounded (cthickening Œ¥ E) := by
  have : IsBounded (thickening (max (Œ¥ + 1) 1) E) := h.thickening
  apply this.subset
  exact cthickening_subset_thickening' (zero_lt_one.trans_le (le_max_right _ _))
    ((lt_add_one _).trans_le (le_max_left _ _)) _

protected theorem _root_.IsCompact.cthickening
    {Œ± : Type*} [PseudoMetricSpace Œ±] [ProperSpace Œ±] {s : Set Œ±}
    (hs : IsCompact s) {r : ‚Ñù} : IsCompact (cthickening r s) :=
  isCompact_of_isClosed_isBounded isClosed_cthickening hs.isBounded.cthickening

theorem thickening_subset_interior_cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) :
    thickening Œ¥ E ‚äÜ interior (cthickening Œ¥ E) :=
  (subset_interior_iff_isOpen.mpr isOpen_thickening).trans
    (interior_mono (thickening_subset_cthickening Œ¥ E))

theorem closure_thickening_subset_cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) :
    closure (thickening Œ¥ E) ‚äÜ cthickening Œ¥ E :=
  (closure_mono (thickening_subset_cthickening Œ¥ E)).trans isClosed_cthickening.closure_subset

/-- The closed thickening of a set contains the closure of the set. -/
theorem closure_subset_cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) : closure E ‚äÜ cthickening Œ¥ E := by
  rw [‚Üê cthickening_of_nonpos (min_le_right Œ¥ 0)]
  exact cthickening_mono (min_le_left Œ¥ 0) E

/-- The (open) thickening of a set contains the closure of the set. -/
theorem closure_subset_thickening {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) :
    closure E ‚äÜ thickening Œ¥ E := by
  rw [‚Üê cthickening_zero]
  exact cthickening_subset_thickening' Œ¥_pos Œ¥_pos E

/-- A set is contained in its own (open) thickening. -/
theorem self_subset_thickening {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) : E ‚äÜ thickening Œ¥ E :=
  (@subset_closure _ E).trans (closure_subset_thickening Œ¥_pos E)

/-- A set is contained in its own closed thickening. -/
theorem self_subset_cthickening {Œ¥ : ‚Ñù} (E : Set Œ±) : E ‚äÜ cthickening Œ¥ E :=
  subset_closure.trans (closure_subset_cthickening Œ¥ E)

theorem thickening_mem_nhdsSet (E : Set Œ±) {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) : thickening Œ¥ E ‚àà ùìùÀ¢ E :=
  isOpen_thickening.mem_nhdsSet.2 <| self_subset_thickening hŒ¥ E

theorem cthickening_mem_nhdsSet (E : Set Œ±) {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) : cthickening Œ¥ E ‚àà ùìùÀ¢ E :=
  mem_of_superset (thickening_mem_nhdsSet E hŒ¥) (thickening_subset_cthickening _ _)

@[simp]
theorem thickening_union (Œ¥ : ‚Ñù) (s t : Set Œ±) :
    thickening Œ¥ (s ‚à™ t) = thickening Œ¥ s ‚à™ thickening Œ¥ t := by
  simp_rw [thickening, infEdist_union, min_lt_iff, setOf_or]

@[simp]
theorem cthickening_union (Œ¥ : ‚Ñù) (s t : Set Œ±) :
    cthickening Œ¥ (s ‚à™ t) = cthickening Œ¥ s ‚à™ cthickening Œ¥ t := by
  simp_rw [cthickening, infEdist_union, min_le_iff, setOf_or]

@[simp]
theorem thickening_iUnion (Œ¥ : ‚Ñù) (f : Œπ ‚Üí Set Œ±) :
    thickening Œ¥ (‚ãÉ i, f i) = ‚ãÉ i, thickening Œ¥ (f i) := by
  simp_rw [thickening, infEdist_iUnion, iInf_lt_iff, setOf_exists]

lemma thickening_biUnion {Œπ : Type*} (Œ¥ : ‚Ñù) (f : Œπ ‚Üí Set Œ±) (I : Set Œπ) :
    thickening Œ¥ (‚ãÉ i ‚àà I, f i) = ‚ãÉ i ‚àà I, thickening Œ¥ (f i) := by simp only [thickening_iUnion]

theorem ediam_cthickening_le (Œµ : ‚Ñù‚â•0) :
    EMetric.diam (cthickening Œµ s) ‚â§ EMetric.diam s + 2 * Œµ := by
  refine diam_le fun x hx y hy => ENNReal.le_of_forall_pos_le_add fun Œ¥ hŒ¥ _ => ?_
  rw [mem_cthickening_iff, ENNReal.ofReal_coe_nnreal] at hx hy
  have hŒµ : (Œµ : ‚Ñù‚â•0‚àû) < Œµ + Œ¥ := ENNReal.coe_lt_coe.2 (lt_add_of_pos_right _ hŒ¥)
  replace hx := hx.trans_lt hŒµ
  obtain ‚ü®x', hx', hxx'‚ü© := infEdist_lt_iff.mp hx
  calc
    edist x y ‚â§ edist x x' + edist y x' := edist_triangle_right _ _ _
    _ ‚â§ Œµ + Œ¥ + (infEdist y s + EMetric.diam s) :=
      add_le_add hxx'.le (edist_le_infEdist_add_ediam hx')
    _ ‚â§ Œµ + Œ¥ + (Œµ + EMetric.diam s) := add_le_add_left (add_le_add_right hy _) _
    _ = _ := by rw [two_mul]; ac_rfl

theorem ediam_thickening_le (Œµ : ‚Ñù‚â•0) : EMetric.diam (thickening Œµ s) ‚â§ EMetric.diam s + 2 * Œµ :=
  (EMetric.diam_mono <| thickening_subset_cthickening _ _).trans <| ediam_cthickening_le _

theorem diam_cthickening_le {Œ± : Type*} [PseudoMetricSpace Œ±] (s : Set Œ±) (hŒµ : 0 ‚â§ Œµ) :
    diam (cthickening Œµ s) ‚â§ diam s + 2 * Œµ := by
  lift Œµ to ‚Ñù‚â•0 using hŒµ
  refine (toReal_le_add' (ediam_cthickening_le _) ?_ ?_).trans_eq ?_
  ¬∑ exact fun h ‚Ü¶ top_unique <| h ‚ñ∏ EMetric.diam_mono (self_subset_cthickening _)
  ¬∑ simp [mul_eq_top]
  ¬∑ simp [diam]

theorem diam_thickening_le {Œ± : Type*} [PseudoMetricSpace Œ±] (s : Set Œ±) (hŒµ : 0 ‚â§ Œµ) :
    diam (thickening Œµ s) ‚â§ diam s + 2 * Œµ := by
  by_cases hs : IsBounded s
  ¬∑ exact (diam_mono (thickening_subset_cthickening _ _) hs.cthickening).trans
      (diam_cthickening_le _ hŒµ)
  obtain rfl | hŒµ := hŒµ.eq_or_lt
  ¬∑ simp [thickening_of_nonpos, diam_nonneg]
  ¬∑ rw [diam_eq_zero_of_unbounded (mt (IsBounded.subset ¬∑ <| self_subset_thickening hŒµ _) hs)]
    positivity

@[simp]
theorem thickening_closure : thickening Œ¥ (closure s) = thickening Œ¥ s := by
  simp_rw [thickening, infEdist_closure]

@[simp]
theorem cthickening_closure : cthickening Œ¥ (closure s) = cthickening Œ¥ s := by
  simp_rw [cthickening, infEdist_closure]

open ENNReal

theorem _root_.Disjoint.exists_thickenings (hst : Disjoint s t) (hs : IsCompact s)
    (ht : IsClosed t) :
    ‚àÉ Œ¥, 0 < Œ¥ ‚àß Disjoint (thickening Œ¥ s) (thickening Œ¥ t) := by
  obtain ‚ü®r, hr, h‚ü© := exists_pos_forall_lt_edist hs ht hst
  refine ‚ü®r / 2, half_pos (NNReal.coe_pos.2 hr), ?_‚ü©
  rw [disjoint_iff_inf_le]
  rintro z ‚ü®hzs, hzt‚ü©
  rw [mem_thickening_iff_exists_edist_lt] at hzs hzt
  rw [‚Üê NNReal.coe_two, ‚Üê NNReal.coe_div, ENNReal.ofReal_coe_nnreal] at hzs hzt
  obtain ‚ü®x, hx, hzx‚ü© := hzs
  obtain ‚ü®y, hy, hzy‚ü© := hzt
  refine (h x hx y hy).not_le ?_
  calc
    edist x y ‚â§ edist z x + edist z y := edist_triangle_left _ _ _
    _ ‚â§ ‚Üë(r / 2) + ‚Üë(r / 2) := add_le_add hzx.le hzy.le
    _ = r := by rw [‚Üê ENNReal.coe_add, add_halves]

theorem _root_.Disjoint.exists_cthickenings (hst : Disjoint s t) (hs : IsCompact s)
    (ht : IsClosed t) :
    ‚àÉ Œ¥, 0 < Œ¥ ‚àß Disjoint (cthickening Œ¥ s) (cthickening Œ¥ t) := by
  obtain ‚ü®Œ¥, hŒ¥, h‚ü© := hst.exists_thickenings hs ht
  refine ‚ü®Œ¥ / 2, half_pos hŒ¥, h.mono ?_ ?_‚ü© <;>
    exact cthickening_subset_thickening' hŒ¥ (half_lt_self hŒ¥) _

/-- If `s` is compact, `t` is open and `s ‚äÜ t`, some `cthickening` of `s` is contained in `t`. -/
theorem _root_.IsCompact.exists_cthickening_subset_open (hs : IsCompact s) (ht : IsOpen t)
    (hst : s ‚äÜ t) :
    ‚àÉ Œ¥, 0 < Œ¥ ‚àß cthickening Œ¥ s ‚äÜ t :=
  (hst.disjoint_compl_right.exists_cthickenings hs ht.isClosed_compl).imp fun _ h =>
    ‚ü®h.1, disjoint_compl_right_iff_subset.1 <| h.2.mono_right <| self_subset_cthickening _‚ü©

theorem _root_.IsCompact.exists_isCompact_cthickening [LocallyCompactSpace Œ±] (hs : IsCompact s) :
    ‚àÉ Œ¥, 0 < Œ¥ ‚àß IsCompact (cthickening Œ¥ s) := by
  rcases exists_compact_superset hs with ‚ü®K, K_compact, hK‚ü©
  rcases hs.exists_cthickening_subset_open isOpen_interior hK with ‚ü®Œ¥, Œ¥pos, hŒ¥‚ü©
  refine ‚ü®Œ¥, Œ¥pos, ?_‚ü©
  exact K_compact.of_isClosed_subset isClosed_cthickening (hŒ¥.trans interior_subset)

theorem _root_.IsCompact.exists_thickening_subset_open (hs : IsCompact s) (ht : IsOpen t)
    (hst : s ‚äÜ t) : ‚àÉ Œ¥, 0 < Œ¥ ‚àß thickening Œ¥ s ‚äÜ t :=
  let ‚ü®Œ¥, h‚ÇÄ, hŒ¥‚ü© := hs.exists_cthickening_subset_open ht hst
  ‚ü®Œ¥, h‚ÇÄ, (thickening_subset_cthickening _ _).trans hŒ¥‚ü©

theorem hasBasis_nhdsSet_thickening {K : Set Œ±} (hK : IsCompact K) :
    (ùìùÀ¢ K).HasBasis (fun Œ¥ : ‚Ñù => 0 < Œ¥) fun Œ¥ => thickening Œ¥ K :=
  (hasBasis_nhdsSet K).to_hasBasis' (fun _U hU => hK.exists_thickening_subset_open hU.1 hU.2)
    fun _ => thickening_mem_nhdsSet K

theorem hasBasis_nhdsSet_cthickening {K : Set Œ±} (hK : IsCompact K) :
    (ùìùÀ¢ K).HasBasis (fun Œ¥ : ‚Ñù => 0 < Œ¥) fun Œ¥ => cthickening Œ¥ K :=
  (hasBasis_nhdsSet K).to_hasBasis' (fun _U hU => hK.exists_cthickening_subset_open hU.1 hU.2)
    fun _ => cthickening_mem_nhdsSet K

theorem cthickening_eq_iInter_cthickening' {Œ¥ : ‚Ñù} (s : Set ‚Ñù) (hsŒ¥ : s ‚äÜ Ioi Œ¥)
    (hs : ‚àÄ Œµ, Œ¥ < Œµ ‚Üí (s ‚à© Ioc Œ¥ Œµ).Nonempty) (E : Set Œ±) :
    cthickening Œ¥ E = ‚ãÇ Œµ ‚àà s, cthickening Œµ E := by
  apply Subset.antisymm
  ¬∑ exact subset_iInter‚ÇÇ fun _ hŒµ => cthickening_mono (le_of_lt (hsŒ¥ hŒµ)) E
  ¬∑ unfold cthickening
    intro x hx
    simp only [mem_iInter, mem_setOf_eq] at *
    apply ENNReal.le_of_forall_pos_le_add
    intro Œ∑ Œ∑_pos _
    rcases hs (Œ¥ + Œ∑) (lt_add_of_pos_right _ (NNReal.coe_pos.mpr Œ∑_pos)) with ‚ü®Œµ, ‚ü®hsŒµ, hŒµ‚ü©‚ü©
    apply ((hx Œµ hsŒµ).trans (ENNReal.ofReal_le_ofReal hŒµ.2)).trans
    rw [ENNReal.coe_nnreal_eq Œ∑]
    exact ENNReal.ofReal_add_le

theorem cthickening_eq_iInter_cthickening {Œ¥ : ‚Ñù} (E : Set Œ±) :
    cthickening Œ¥ E = ‚ãÇ (Œµ : ‚Ñù) (_ : Œ¥ < Œµ), cthickening Œµ E := by
  apply cthickening_eq_iInter_cthickening' (Ioi Œ¥) rfl.subset
  simp_rw [inter_eq_right.mpr Ioc_subset_Ioi_self]
  exact fun _ hŒµ => nonempty_Ioc.mpr hŒµ

theorem cthickening_eq_iInter_thickening' {Œ¥ : ‚Ñù} (Œ¥_nn : 0 ‚â§ Œ¥) (s : Set ‚Ñù) (hsŒ¥ : s ‚äÜ Ioi Œ¥)
    (hs : ‚àÄ Œµ, Œ¥ < Œµ ‚Üí (s ‚à© Ioc Œ¥ Œµ).Nonempty) (E : Set Œ±) :
    cthickening Œ¥ E = ‚ãÇ Œµ ‚àà s, thickening Œµ E := by
  refine (subset_iInter‚ÇÇ fun Œµ hŒµ => ?_).antisymm ?_
  ¬∑ obtain ‚ü®Œµ', -, hŒµ'‚ü© := hs Œµ (hsŒ¥ hŒµ)
    have ss := cthickening_subset_thickening' (lt_of_le_of_lt Œ¥_nn hŒµ'.1) hŒµ'.1 E
    exact ss.trans (thickening_mono hŒµ'.2 E)
  ¬∑ rw [cthickening_eq_iInter_cthickening' s hsŒ¥ hs E]
    exact iInter‚ÇÇ_mono fun Œµ _ => thickening_subset_cthickening Œµ E

theorem cthickening_eq_iInter_thickening {Œ¥ : ‚Ñù} (Œ¥_nn : 0 ‚â§ Œ¥) (E : Set Œ±) :
    cthickening Œ¥ E = ‚ãÇ (Œµ : ‚Ñù) (_ : Œ¥ < Œµ), thickening Œµ E := by
  apply cthickening_eq_iInter_thickening' Œ¥_nn (Ioi Œ¥) rfl.subset
  simp_rw [inter_eq_right.mpr Ioc_subset_Ioi_self]
  exact fun _ hŒµ => nonempty_Ioc.mpr hŒµ

theorem cthickening_eq_iInter_thickening'' (Œ¥ : ‚Ñù) (E : Set Œ±) :
    cthickening Œ¥ E = ‚ãÇ (Œµ : ‚Ñù) (_ : max 0 Œ¥ < Œµ), thickening Œµ E := by
  rw [‚Üê cthickening_max_zero, cthickening_eq_iInter_thickening]
  exact le_max_left _ _

/-- The closure of a set equals the intersection of its closed thickenings of positive radii
accumulating at zero. -/
theorem closure_eq_iInter_cthickening' (E : Set Œ±) (s : Set ‚Ñù)
    (hs : ‚àÄ Œµ, 0 < Œµ ‚Üí (s ‚à© Ioc 0 Œµ).Nonempty) : closure E = ‚ãÇ Œ¥ ‚àà s, cthickening Œ¥ E := by
  by_cases hs‚ÇÄ : s ‚äÜ Ioi 0
  ¬∑ rw [‚Üê cthickening_zero]
    apply cthickening_eq_iInter_cthickening' _ hs‚ÇÄ hs
  obtain ‚ü®Œ¥, hŒ¥s, Œ¥_nonpos‚ü© := not_subset.mp hs‚ÇÄ
  rw [Set.mem_Ioi, not_lt] at Œ¥_nonpos
  apply Subset.antisymm
  ¬∑ exact subset_iInter‚ÇÇ fun Œµ _ => closure_subset_cthickening Œµ E
  ¬∑ rw [‚Üê cthickening_of_nonpos Œ¥_nonpos E]
    exact biInter_subset_of_mem hŒ¥s

/-- The closure of a set equals the intersection of its closed thickenings of positive radii. -/
theorem closure_eq_iInter_cthickening (E : Set Œ±) :
    closure E = ‚ãÇ (Œ¥ : ‚Ñù) (_ : 0 < Œ¥), cthickening Œ¥ E := by
  rw [‚Üê cthickening_zero]
  exact cthickening_eq_iInter_cthickening E

/-- The closure of a set equals the intersection of its open thickenings of positive radii
accumulating at zero. -/
theorem closure_eq_iInter_thickening' (E : Set Œ±) (s : Set ‚Ñù) (hs‚ÇÄ : s ‚äÜ Ioi 0)
    (hs : ‚àÄ Œµ, 0 < Œµ ‚Üí (s ‚à© Ioc 0 Œµ).Nonempty) : closure E = ‚ãÇ Œ¥ ‚àà s, thickening Œ¥ E := by
  rw [‚Üê cthickening_zero]
  apply cthickening_eq_iInter_thickening' le_rfl _ hs‚ÇÄ hs

/-- The closure of a set equals the intersection of its (open) thickenings of positive radii. -/
theorem closure_eq_iInter_thickening (E : Set Œ±) :
    closure E = ‚ãÇ (Œ¥ : ‚Ñù) (_ : 0 < Œ¥), thickening Œ¥ E := by
  rw [‚Üê cthickening_zero]
  exact cthickening_eq_iInter_thickening rfl.ge E

/-- The frontier of the closed thickening of a set is contained in an `EMetric.infEdist` level
set. -/
theorem frontier_cthickening_subset (E : Set Œ±) {Œ¥ : ‚Ñù} :
    frontier (cthickening Œ¥ E) ‚äÜ { x : Œ± | infEdist x E = ENNReal.ofReal Œ¥ } :=
  frontier_le_subset_eq continuous_infEdist continuous_const

/-- The closed ball of radius `Œ¥` centered at a point of `E` is included in the closed
thickening of `E`. -/
theorem closedBall_subset_cthickening {Œ± : Type*} [PseudoMetricSpace Œ±] {x : Œ±} {E : Set Œ±}
    (hx : x ‚àà E) (Œ¥ : ‚Ñù) : closedBall x Œ¥ ‚äÜ cthickening Œ¥ E := by
  refine (closedBall_subset_cthickening_singleton _ _).trans (cthickening_subset_of_subset _ ?_)
  simpa using hx

theorem cthickening_subset_iUnion_closedBall_of_lt {Œ± : Type*} [PseudoMetricSpace Œ±] (E : Set Œ±)
    {Œ¥ Œ¥' : ‚Ñù} (hŒ¥‚ÇÄ : 0 < Œ¥') (hŒ¥Œ¥' : Œ¥ < Œ¥') : cthickening Œ¥ E ‚äÜ ‚ãÉ x ‚àà E, closedBall x Œ¥' := by
  refine (cthickening_subset_thickening' hŒ¥‚ÇÄ hŒ¥Œ¥' E).trans fun x hx => ?_
  obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü© := mem_thickening_iff.mp hx
  exact mem_iUnion‚ÇÇ.mpr ‚ü®y, hy‚ÇÅ, hy‚ÇÇ.le‚ü©

/-- The closed thickening of a compact set `E` is the union of the balls `Metric.closedBall x Œ¥`
over `x ‚àà E`.

See also `Metric.cthickening_eq_biUnion_closedBall`. -/
theorem _root_.IsCompact.cthickening_eq_biUnion_closedBall {Œ± : Type*} [PseudoMetricSpace Œ±]
    {Œ¥ : ‚Ñù} {E : Set Œ±} (hE : IsCompact E) (hŒ¥ : 0 ‚â§ Œ¥) :
    cthickening Œ¥ E = ‚ãÉ x ‚àà E, closedBall x Œ¥ := by
  rcases eq_empty_or_nonempty E with (rfl | hne)
  ¬∑ simp only [cthickening_empty, biUnion_empty]
  refine Subset.antisymm (fun x hx ‚Ü¶ ?_)
    (iUnion‚ÇÇ_subset fun x hx ‚Ü¶ closedBall_subset_cthickening hx _)
  obtain ‚ü®y, yE, hy‚ü© : ‚àÉ y ‚àà E, infEdist x E = edist x y := hE.exists_infEdist_eq_edist hne _
  have D1 : edist x y ‚â§ ENNReal.ofReal Œ¥ := (le_of_eq hy.symm).trans hx
  have D2 : dist x y ‚â§ Œ¥ := by
    rw [edist_dist] at D1
    exact (ENNReal.ofReal_le_ofReal_iff hŒ¥).1 D1
  exact mem_biUnion yE D2

theorem cthickening_eq_biUnion_closedBall {Œ± : Type*} [PseudoMetricSpace Œ±] [ProperSpace Œ±]
    (E : Set Œ±) (hŒ¥ : 0 ‚â§ Œ¥) : cthickening Œ¥ E = ‚ãÉ x ‚àà closure E, closedBall x Œ¥ := by
  rcases eq_empty_or_nonempty E with (rfl | hne)
  ¬∑ simp only [cthickening_empty, biUnion_empty, closure_empty]
  rw [‚Üê cthickening_closure]
  refine Subset.antisymm (fun x hx ‚Ü¶ ?_)
    (iUnion‚ÇÇ_subset fun x hx ‚Ü¶ closedBall_subset_cthickening hx _)
  obtain ‚ü®y, yE, hy‚ü© : ‚àÉ y ‚àà closure E, infDist x (closure E) = dist x y :=
    isClosed_closure.exists_infDist_eq_dist (closure_nonempty_iff.mpr hne) x
  replace hy : dist x y ‚â§ Œ¥ :=
    (ENNReal.ofReal_le_ofReal_iff hŒ¥).mp
      (((congr_arg ENNReal.ofReal hy.symm).le.trans ENNReal.ofReal_toReal_le).trans hx)
  exact mem_biUnion yE hy

nonrec theorem _root_.IsClosed.cthickening_eq_biUnion_closedBall {Œ± : Type*} [PseudoMetricSpace Œ±]
    [ProperSpace Œ±] {E : Set Œ±} (hE : IsClosed E) (hŒ¥ : 0 ‚â§ Œ¥) :
    cthickening Œ¥ E = ‚ãÉ x ‚àà E, closedBall x Œ¥ := by
  rw [cthickening_eq_biUnion_closedBall E hŒ¥, hE.closure_eq]

/-- For the equality, see `infEdist_cthickening`. -/
theorem infEdist_le_infEdist_cthickening_add :
    infEdist x s ‚â§ infEdist x (cthickening Œ¥ s) + ENNReal.ofReal Œ¥ := by
  refine le_of_forall_lt' fun r h => ?_
  simp_rw [‚Üê lt_tsub_iff_right, infEdist_lt_iff, mem_cthickening_iff] at h
  obtain ‚ü®y, hy, hxy‚ü© := h
  exact infEdist_le_edist_add_infEdist.trans_lt
    ((ENNReal.add_lt_add_of_lt_of_le (hy.trans_lt ENNReal.ofReal_lt_top).ne hxy hy).trans_eq
      (tsub_add_cancel_of_le <| le_self_add.trans (lt_tsub_iff_left.1 hxy).le))

/-- For the equality, see `infEdist_thickening`. -/
theorem infEdist_le_infEdist_thickening_add :
    infEdist x s ‚â§ infEdist x (thickening Œ¥ s) + ENNReal.ofReal Œ¥ :=
  infEdist_le_infEdist_cthickening_add.trans <|
    add_le_add_right (infEdist_anti <| thickening_subset_cthickening _ _) _

/-- For the equality, see `thickening_thickening`. -/
@[simp]
theorem thickening_thickening_subset (Œµ Œ¥ : ‚Ñù) (s : Set Œ±) :
    thickening Œµ (thickening Œ¥ s) ‚äÜ thickening (Œµ + Œ¥) s := by
  obtain hŒµ | hŒµ := le_total Œµ 0
  ¬∑ simp only [thickening_of_nonpos hŒµ, empty_subset]
  obtain hŒ¥ | hŒ¥ := le_total Œ¥ 0
  ¬∑ simp only [thickening_of_nonpos hŒ¥, thickening_empty, empty_subset]
  intro x
  simp_rw [mem_thickening_iff_exists_edist_lt, ENNReal.ofReal_add hŒµ hŒ¥]
  exact fun ‚ü®y, ‚ü®z, hz, hy‚ü©, hx‚ü© =>
    ‚ü®z, hz, (edist_triangle _ _ _).trans_lt <| ENNReal.add_lt_add hx hy‚ü©

/-- For the equality, see `thickening_cthickening`. -/
@[simp]
theorem thickening_cthickening_subset (Œµ : ‚Ñù) (hŒ¥ : 0 ‚â§ Œ¥) (s : Set Œ±) :
    thickening Œµ (cthickening Œ¥ s) ‚äÜ thickening (Œµ + Œ¥) s := by
  obtain hŒµ | hŒµ := le_total Œµ 0
  ¬∑ simp only [thickening_of_nonpos hŒµ, empty_subset]
  intro x
  simp_rw [mem_thickening_iff_exists_edist_lt, mem_cthickening_iff, ‚Üê infEdist_lt_iff,
    ENNReal.ofReal_add hŒµ hŒ¥]
  rintro ‚ü®y, hy, hxy‚ü©
  exact infEdist_le_edist_add_infEdist.trans_lt
    (ENNReal.add_lt_add_of_lt_of_le (hy.trans_lt ENNReal.ofReal_lt_top).ne hxy hy)

/-- For the equality, see `cthickening_thickening`. -/
@[simp]
theorem cthickening_thickening_subset (hŒµ : 0 ‚â§ Œµ) (Œ¥ : ‚Ñù) (s : Set Œ±) :
    cthickening Œµ (thickening Œ¥ s) ‚äÜ cthickening (Œµ + Œ¥) s := by
  obtain hŒ¥ | hŒ¥ := le_total Œ¥ 0
  ¬∑ simp only [thickening_of_nonpos hŒ¥, cthickening_empty, empty_subset]
  intro x
  simp_rw [mem_cthickening_iff, ENNReal.ofReal_add hŒµ hŒ¥]
  exact fun hx => infEdist_le_infEdist_thickening_add.trans (add_le_add_right hx _)

/-- For the equality, see `cthickening_cthickening`. -/
@[simp]
theorem cthickening_cthickening_subset (hŒµ : 0 ‚â§ Œµ) (hŒ¥ : 0 ‚â§ Œ¥) (s : Set Œ±) :
    cthickening Œµ (cthickening Œ¥ s) ‚äÜ cthickening (Œµ + Œ¥) s := by
  intro x
  simp_rw [mem_cthickening_iff, ENNReal.ofReal_add hŒµ hŒ¥]
  exact fun hx => infEdist_le_infEdist_cthickening_add.trans (add_le_add_right hx _)

theorem frontier_cthickening_disjoint (A : Set Œ±) :
    Pairwise (Disjoint on fun r : ‚Ñù‚â•0 => frontier (cthickening r A)) := fun r‚ÇÅ r‚ÇÇ hr =>
  ((disjoint_singleton.2 <| by simpa).preimage _).mono (frontier_cthickening_subset _)
    (frontier_cthickening_subset _)

end Cthickening

end Metric
