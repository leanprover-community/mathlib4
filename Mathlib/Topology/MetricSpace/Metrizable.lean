/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov

! This file was ported from Lean 3 source module topology.metric_space.metrizable
! leanprover-community/mathlib commit f2ce6086713c78a7f880485f7917ea547a215982
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.SpecificLimits.Basic
import Mathbin.Topology.UrysohnsLemma
import Mathbin.Topology.ContinuousFunction.Bounded
import Mathbin.Topology.UniformSpace.Cauchy

/-!
# Metrizability of a T‚ÇÉ topological space with second countable topology

In this file we define metrizable topological spaces, i.e., topological spaces for which there
exists a metric space structure that generates the same topology.

We also show that a T‚ÇÉ topological space with second countable topology `X` is metrizable.

First we prove that `X` can be embedded into `l^‚àû`, then use this embedding to pull back the metric
space structure.
-/


open Set Filter Metric

open BoundedContinuousFunction Filter Topology

namespace TopologicalSpace

variable {Œπ X Y : Type _} {œÄ : Œπ ‚Üí Type _} [TopologicalSpace X] [TopologicalSpace Y] [Finite Œπ]
  [‚àÄ i, TopologicalSpace (œÄ i)]

/-- A topological space is *pseudo metrizable* if there exists a pseudo metric space structure
compatible with the topology. To endow such a space with a compatible distance, use
`letI : pseudo_metric_space X := topological_space.pseudo_metrizable_space_pseudo_metric X`. -/
class PseudoMetrizableSpace (X : Type _) [t : TopologicalSpace X] : Prop where
  exists_pseudo_metric : ‚àÉ m : PseudoMetricSpace X, m.toUniformSpace.toTopologicalSpace = t
#align topological_space.pseudo_metrizable_space TopologicalSpace.PseudoMetrizableSpace

instance (priority := 100) PseudoMetricSpace.to_pseudoMetrizableSpace {X : Type _}
    [m : PseudoMetricSpace X] : PseudoMetrizableSpace X :=
  ‚ü®‚ü®m, rfl‚ü©‚ü©
#align pseudo_metric_space.to_pseudo_metrizable_space PseudoMetricSpace.to_pseudoMetrizableSpace

/-- Construct on a metrizable space a metric compatible with the topology. -/
noncomputable def pseudoMetrizableSpacePseudoMetric (X : Type _) [TopologicalSpace X]
    [h : PseudoMetrizableSpace X] : PseudoMetricSpace X :=
  h.exists_pseudo_metric.some.replaceTopology h.exists_pseudo_metric.choose_spec.symm
#align topological_space.pseudo_metrizable_space_pseudo_metric TopologicalSpace.pseudoMetrizableSpacePseudoMetric

instance pseudoMetrizableSpace_prod [PseudoMetrizableSpace X] [PseudoMetrizableSpace Y] :
    PseudoMetrizableSpace (X √ó Y) :=
  by
  letI : PseudoMetricSpace X := pseudo_metrizable_space_pseudo_metric X
  letI : PseudoMetricSpace Y := pseudo_metrizable_space_pseudo_metric Y
  infer_instance
#align topological_space.pseudo_metrizable_space_prod TopologicalSpace.pseudoMetrizableSpace_prod

/-- Given an inducing map of a topological space into a pseudo metrizable space, the source space
is also pseudo metrizable. -/
theorem Inducing.pseudoMetrizableSpace [PseudoMetrizableSpace Y] {f : X ‚Üí Y} (hf : Inducing f) :
    PseudoMetrizableSpace X :=
  letI : PseudoMetricSpace Y := pseudo_metrizable_space_pseudo_metric Y
  ‚ü®‚ü®hf.comap_pseudo_metric_space, rfl‚ü©‚ü©
#align inducing.pseudo_metrizable_space Inducing.pseudoMetrizableSpace

/-- Every pseudo-metrizable space is first countable. -/
instance (priority := 100) PseudoMetrizableSpace.firstCountableTopology
    [h : PseudoMetrizableSpace X] : TopologicalSpace.FirstCountableTopology X :=
  by
  rcases h with ‚ü®_, hm‚ü©
  rw [‚Üê hm]
  exact
    @UniformSpace.firstCountableTopology X PseudoMetricSpace.toUniformSpace
      Emetric.Uniformity.Filter.isCountablyGenerated
#align topological_space.pseudo_metrizable_space.first_countable_topology TopologicalSpace.PseudoMetrizableSpace.firstCountableTopology

instance PseudoMetrizableSpace.subtype [PseudoMetrizableSpace X] (s : Set X) :
    PseudoMetrizableSpace s :=
  inducing_subtype_val.PseudoMetrizableSpace
#align topological_space.pseudo_metrizable_space.subtype TopologicalSpace.PseudoMetrizableSpace.subtype

instance pseudoMetrizableSpace_pi [‚àÄ i, PseudoMetrizableSpace (œÄ i)] :
    PseudoMetrizableSpace (‚àÄ i, œÄ i) :=
  by
  cases nonempty_fintype Œπ
  letI := fun i => pseudo_metrizable_space_pseudo_metric (œÄ i)
  infer_instance
#align topological_space.pseudo_metrizable_space_pi TopologicalSpace.pseudoMetrizableSpace_pi

/-- A topological space is metrizable if there exists a metric space structure compatible with the
topology. To endow such a space with a compatible distance, use
`letI : metric_space X := topological_space.metrizable_space_metric X` -/
class MetrizableSpace (X : Type _) [t : TopologicalSpace X] : Prop where
  exists_metric : ‚àÉ m : MetricSpace X, m.toUniformSpace.toTopologicalSpace = t
#align topological_space.metrizable_space TopologicalSpace.MetrizableSpace

instance (priority := 100) MetricSpace.to_metrizableSpace {X : Type _} [m : MetricSpace X] :
    MetrizableSpace X :=
  ‚ü®‚ü®m, rfl‚ü©‚ü©
#align metric_space.to_metrizable_space MetricSpace.to_metrizableSpace

instance (priority := 100) MetrizableSpace.to_pseudoMetrizableSpace [h : MetrizableSpace X] :
    PseudoMetrizableSpace X :=
  ‚ü®let ‚ü®m, hm‚ü© := h.1
    ‚ü®m.toPseudoMetricSpace, hm‚ü©‚ü©
#align topological_space.metrizable_space.to_pseudo_metrizable_space TopologicalSpace.MetrizableSpace.to_pseudoMetrizableSpace

/-- Construct on a metrizable space a metric compatible with the topology. -/
noncomputable def metrizableSpaceMetric (X : Type _) [TopologicalSpace X] [h : MetrizableSpace X] :
    MetricSpace X :=
  h.exists_metric.some.replaceTopology h.exists_metric.choose_spec.symm
#align topological_space.metrizable_space_metric TopologicalSpace.metrizableSpaceMetric

instance (priority := 100) t2Space_of_metrizableSpace [MetrizableSpace X] : T2Space X :=
  by
  letI : MetricSpace X := metrizable_space_metric X
  infer_instance
#align topological_space.t2_space_of_metrizable_space TopologicalSpace.t2Space_of_metrizableSpace

instance metrizableSpace_prod [MetrizableSpace X] [MetrizableSpace Y] : MetrizableSpace (X √ó Y) :=
  by
  letI : MetricSpace X := metrizable_space_metric X
  letI : MetricSpace Y := metrizable_space_metric Y
  infer_instance
#align topological_space.metrizable_space_prod TopologicalSpace.metrizableSpace_prod

/-- Given an embedding of a topological space into a metrizable space, the source space is also
metrizable. -/
theorem Embedding.metrizableSpace [MetrizableSpace Y] {f : X ‚Üí Y} (hf : Embedding f) :
    MetrizableSpace X :=
  letI : MetricSpace Y := metrizable_space_metric Y
  ‚ü®‚ü®hf.comap_metric_space f, rfl‚ü©‚ü©
#align embedding.metrizable_space Embedding.metrizableSpace

instance MetrizableSpace.subtype [MetrizableSpace X] (s : Set X) : MetrizableSpace s :=
  embedding_subtype_val.MetrizableSpace
#align topological_space.metrizable_space.subtype TopologicalSpace.MetrizableSpace.subtype

instance metrizableSpace_pi [‚àÄ i, MetrizableSpace (œÄ i)] : MetrizableSpace (‚àÄ i, œÄ i) :=
  by
  cases nonempty_fintype Œπ
  letI := fun i => metrizable_space_metric (œÄ i)
  infer_instance
#align topological_space.metrizable_space_pi TopologicalSpace.metrizableSpace_pi

variable (X) [T3Space X] [SecondCountableTopology X]

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- A T‚ÇÉ topological space with second countable topology can be embedded into `l^‚àû = ‚Ñï ‚Üí·µá ‚Ñù`.
-/
theorem exists_embedding_l_infty : ‚àÉ f : X ‚Üí ‚Ñï ‚Üí·µá ‚Ñù, Embedding f :=
  by
  haveI : NormalSpace X := normalSpaceOfT3SecondCountable X
  -- Choose a countable basis, and consider the set `s` of pairs of set `(U, V)` such that `U ‚àà B`,
  -- `V ‚àà B`, and `closure U ‚äÜ V`.
  rcases exists_countable_basis X with ‚ü®B, hBc, -, hB‚ü©
  set s : Set (Set X √ó Set X) := { UV ‚àà B √óÀ¢ B | closure UV.1 ‚äÜ UV.2 }
  -- `s` is a countable set.
  haveI : Encodable s := ((hBc.prod hBc).mono (inter_subset_left _ _)).toEncodable
  -- We don't have the space of bounded (possibly discontinuous) functions, so we equip `s`
  -- with the discrete topology and deal with `s ‚Üí·µá ‚Ñù` instead.
  letI : TopologicalSpace s := ‚ä•
  haveI : DiscreteTopology s := ‚ü®rfl‚ü©
  rsuffices ‚ü®f, hf‚ü© : ‚àÉ f : X ‚Üí s ‚Üí·µá ‚Ñù, Embedding f
  ¬∑
    exact
      ‚ü®fun x => (f x).extend (Encodable.encode' s) 0,
        (BoundedContinuousFunction.isometry_extend (Encodable.encode' s)
                (0 : ‚Ñï ‚Üí·µá ‚Ñù)).Embedding.comp
          hf‚ü©
  have hd : ‚àÄ UV : s, Disjoint (closure UV.1.1) (UV.1.2·∂ú) := fun UV =>
    disjoint_compl_right.mono_right (compl_subset_compl.2 UV.2.2)
  -- Choose a sequence of `Œµ‚Çô > 0`, `n : s`, that is bounded above by `1` and tends to zero
  -- along the `cofinite` filter.
  obtain ‚ü®Œµ, Œµ01, hŒµ‚ü© : ‚àÉ Œµ : s ‚Üí ‚Ñù, (‚àÄ UV, Œµ UV ‚àà Ioc (0 : ‚Ñù) 1) ‚àß tendsto Œµ cofinite (ùìù 0) :=
    by
    rcases posSumOfEncodable zero_lt_one s with ‚ü®Œµ, Œµ0, c, hŒµc, hc1‚ü©
    refine' ‚ü®Œµ, fun UV => ‚ü®Œµ0 UV, _‚ü©, hŒµc.summable.tendsto_cofinite_zero‚ü©
    exact (le_hasSum hŒµc UV fun _ _ => (Œµ0 _).le).trans hc1
  /- For each `UV = (U, V) ‚àà s` we use Urysohn's lemma to choose a function `f UV` that is equal to
    zero on `U` and is equal to `Œµ UV` on the complement to `V`. -/
  have :
    ‚àÄ UV : s,
      ‚àÉ f : C(X, ‚Ñù),
        eq_on f 0 UV.1.1 ‚àß eq_on f (fun _ => Œµ UV) (UV.1.2·∂ú) ‚àß ‚àÄ x, f x ‚àà Icc 0 (Œµ UV) :=
    by
    intro UV
    rcases exists_continuous_zero_one_of_closed isClosed_closure
        (hB.is_open UV.2.1.2).isClosed_compl (hd UV) with
      ‚ü®f, hf‚ÇÄ, hf‚ÇÅ, hf01‚ü©
    exact
      ‚ü®Œµ UV ‚Ä¢ f, fun x hx => by simp [hf‚ÇÄ (subset_closure hx)], fun x hx => by simp [hf‚ÇÅ hx],
        fun x =>
        ‚ü®mul_nonneg (Œµ01 _).1.le (hf01 _).1, mul_le_of_le_one_right (Œµ01 _).1.le (hf01 _).2‚ü©‚ü©
  choose f hf0 hfŒµ hf0Œµ
  have hf01 : ‚àÄ UV x, f UV x ‚àà Icc (0 : ‚Ñù) 1 := fun UV x =>
    Icc_subset_Icc_right (Œµ01 _).2 (hf0Œµ _ _)
  -- The embedding is given by `F x UV = f UV x`.
  set F : X ‚Üí s ‚Üí·µá ‚Ñù := fun x =>
    ‚ü®‚ü®fun UV => f UV x, continuous_of_discreteTopology‚ü©, 1, fun UV‚ÇÅ UV‚ÇÇ =>
      Real.dist_le_of_mem_Icc_01 (hf01 _ _) (hf01 _ _)‚ü©
  have hF : ‚àÄ x UV, F x UV = f UV x := fun _ _ => rfl
  refine' ‚ü®F, Embedding.mk' _ (fun x y hxy => _) fun x => le_antisymm _ _‚ü©
  ¬∑ /- First we prove that `F` is injective. Indeed, if `F x = F y` and `x ‚â† y`, then we can find
        `(U, V) ‚àà s` such that `x ‚àà U` and `y ‚àâ V`, hence `F x UV = 0 ‚â† Œµ UV = F y UV`. -/
    refine' Classical.not_not.1 fun Hne => _
    -- `by_contra Hne` timeouts
    rcases hB.mem_nhds_iff.1 (is_open_ne.mem_nhds Hne) with ‚ü®V, hVB, hxV, hVy‚ü©
    rcases hB.exists_closure_subset (hB.mem_nhds hVB hxV) with ‚ü®U, hUB, hxU, hUV‚ü©
    set UV : ‚Ü•s := ‚ü®(U, V), ‚ü®hUB, hVB‚ü©, hUV‚ü©
    apply (Œµ01 UV).1.Ne
    calc
      (0 : ‚Ñù) = F x UV := (hf0 UV hxU).symm
      _ = F y UV := by rw [hxy]
      _ = Œµ UV := hfŒµ UV fun h : y ‚àà V => hVy h rfl
      
  ¬∑ /- Now we prove that each neighborhood `V` of `x : X` include a preimage of a neighborhood of
        `F x` under `F`. Without loss of generality, `V` belongs to `B`. Choose `U ‚àà B` such that
        `x ‚àà V` and `closure V ‚äÜ U`. Then the preimage of the `(Œµ (U, V))`-neighborhood of `F x`
        is included by `V`. -/
    refine' ((nhds_basis_ball.comap _).le_basis_iff‚Çì hB.nhds_has_basis).2 _
    rintro V ‚ü®hVB, hxV‚ü©
    rcases hB.exists_closure_subset (hB.mem_nhds hVB hxV) with ‚ü®U, hUB, hxU, hUV‚ü©
    set UV : ‚Ü•s := ‚ü®(U, V), ‚ü®hUB, hVB‚ü©, hUV‚ü©
    refine' ‚ü®Œµ UV, (Œµ01 UV).1, fun y (hy : dist (F y) (F x) < Œµ UV) => _‚ü©
    replace hy : dist (F y UV) (F x UV) < Œµ UV
    exact (BoundedContinuousFunction.dist_coe_le_dist _).trans_lt hy
    contrapose! hy
    rw [hF, hF, hfŒµ UV hy, hf0 UV hxU, Pi.zero_apply, dist_zero_right]
    exact le_abs_self _
  ¬∑ /- Finally, we prove that `F` is continuous. Given `Œ¥ > 0`, consider the set `T` of `(U, V) ‚àà s`
        such that `Œµ (U, V) ‚â• Œ¥`. Since `Œµ` tends to zero, `T` is finite. Since each `f` is continuous,
        we can choose a neighborhood such that `dist (F y (U, V)) (F x (U, V)) ‚â§ Œ¥` for any
        `(U, V) ‚àà T`. For `(U, V) ‚àâ T`, the same inequality is true because both `F y (U, V)` and
        `F x (U, V)` belong to the interval `[0, Œµ (U, V)]`. -/
    refine' (nhds_basis_closed_ball.comap _).ge_iff.2 fun Œ¥ Œ¥0 => _
    have h_fin : { UV : s | Œ¥ ‚â§ Œµ UV }.Finite := by simpa only [‚Üê not_lt] using hŒµ (gt_mem_nhds Œ¥0)
    have : ‚àÄ·∂† y in ùìù x, ‚àÄ UV, Œ¥ ‚â§ Œµ UV ‚Üí dist (F y UV) (F x UV) ‚â§ Œ¥ :=
      by
      refine' (eventually_all_finite h_fin).2 fun UV hUV => _
      exact (f UV).Continuous.Tendsto x (closed_ball_mem_nhds _ Œ¥0)
    refine' this.mono fun y hy => (BoundedContinuousFunction.dist_le Œ¥0.le).2 fun UV => _
    cases' le_total Œ¥ (Œµ UV) with hle hle
    exacts[hy _ hle, (Real.dist_le_of_mem_Icc (hf0Œµ _ _) (hf0Œµ _ _)).trans (by rwa [sub_zero])]
#align topological_space.exists_embedding_l_infty TopologicalSpace.exists_embedding_l_infty

/-- *Urysohn's metrization theorem* (Tychonoff's version): a T‚ÇÉ topological space with second
countable topology `X` is metrizable, i.e., there exists a metric space structure that generates the
same topology. -/
theorem metrizableSpace_of_t3_second_countable : MetrizableSpace X :=
  let ‚ü®f, hf‚ü© := exists_embedding_l_infty X
  hf.MetrizableSpace
#align topological_space.metrizable_space_of_t3_second_countable TopologicalSpace.metrizableSpace_of_t3_second_countable

instance : MetrizableSpace ENNReal :=
  metrizableSpace_of_t3_second_countable ENNReal

end TopologicalSpace

