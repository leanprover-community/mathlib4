/-
Copyright (c) 2015, 2017 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jeremy Avigad, Robert Y. Lewis, Johannes H√∂lzl, Mario Carneiro, S√©bastien Gou√´zel
-/
import Mathlib.Topology.MetricSpace.PseudoMetric

/-!
## Cauchy sequences in (pseudo-)metric spaces

Various results on Cauchy sequences in (pseudo-)metric spaces, including

* `Metric.complete_of_cauchySeq_tendsto` A pseudo-metric space is complete iff each Cauchy sequences
converges to some limit point.
* `cauchySeq_bdd`: a Cauchy sequence on the natural numbers is bounded
* various characterisation of Cauchy and uniformly Cauchy sequences

## Tags

metric, pseudo_metric, Cauchy sequence
-/

open Filter
open scoped Uniformity Topology

universe u v w

variable {Œ± : Type u} {Œ≤ : Type v} {X Œπ : Type*}
variable [PseudoMetricSpace Œ±]

/-- A very useful criterion to show that a space is complete is to show that all sequences
which satisfy a bound of the form `dist (u n) (u m) < B N` for all `n m ‚â• N` are
converging. This is often applied for `B N = 2^{-N}`, i.e., with a very fast convergence to
`0`, which makes it possible to use arguments of converging series, while this is impossible
to do in general for arbitrary Cauchy sequences. -/
theorem Metric.complete_of_convergent_controlled_sequences (B : ‚Ñï ‚Üí Real) (hB : ‚àÄ n, 0 < B n)
    (H : ‚àÄ u : ‚Ñï ‚Üí Œ±, (‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí dist (u n) (u m) < B N) ‚Üí
      ‚àÉ x, Tendsto u atTop (ùìù x)) :
    CompleteSpace Œ± :=
  UniformSpace.complete_of_convergent_controlled_sequences
    (fun n => { p : Œ± √ó Œ± | dist p.1 p.2 < B n }) (fun n => dist_mem_uniformity <| hB n) H
#align metric.complete_of_convergent_controlled_sequences Metric.complete_of_convergent_controlled_sequences

/-- A pseudo-metric space is complete iff every Cauchy sequence converges. -/
theorem Metric.complete_of_cauchySeq_tendsto :
    (‚àÄ u : ‚Ñï ‚Üí Œ±, CauchySeq u ‚Üí ‚àÉ a, Tendsto u atTop (ùìù a)) ‚Üí CompleteSpace Œ± :=
  EMetric.complete_of_cauchySeq_tendsto
#align metric.complete_of_cauchy_seq_tendsto Metric.complete_of_cauchySeq_tendsto

section CauchySeq

variable [Nonempty Œ≤] [SemilatticeSup Œ≤]

/-- In a pseudometric space, Cauchy sequences are characterized by the fact that, eventually,
the distance between its elements is arbitrarily small -/
-- Porting note: @[nolint ge_or_gt] doesn't exist
theorem Metric.cauchySeq_iff {u : Œ≤ ‚Üí Œ±} :
    CauchySeq u ‚Üî ‚àÄ Œµ > 0, ‚àÉ N, ‚àÄ m ‚â• N, ‚àÄ n ‚â• N, dist (u m) (u n) < Œµ :=
  uniformity_basis_dist.cauchySeq_iff
#align metric.cauchy_seq_iff Metric.cauchySeq_iff

/-- A variation around the pseudometric characterization of Cauchy sequences -/
theorem Metric.cauchySeq_iff' {u : Œ≤ ‚Üí Œ±} :
    CauchySeq u ‚Üî ‚àÄ Œµ > 0, ‚àÉ N, ‚àÄ n ‚â• N, dist (u n) (u N) < Œµ :=
  uniformity_basis_dist.cauchySeq_iff'
#align metric.cauchy_seq_iff' Metric.cauchySeq_iff'

-- see Note [nolint_ge]
/-- In a pseudometric space, uniform Cauchy sequences are characterized by the fact that,
eventually, the distance between all its elements is uniformly, arbitrarily small. -/
-- Porting note: no attr @[nolint ge_or_gt]
theorem Metric.uniformCauchySeqOn_iff {Œ≥ : Type*} {F : Œ≤ ‚Üí Œ≥ ‚Üí Œ±} {s : Set Œ≥} :
    UniformCauchySeqOn F atTop s ‚Üî ‚àÄ Œµ > (0 : ‚Ñù),
      ‚àÉ N : Œ≤, ‚àÄ m ‚â• N, ‚àÄ n ‚â• N, ‚àÄ x ‚àà s, dist (F m x) (F n x) < Œµ := by
  constructor
  ¬∑ intro h Œµ hŒµ
    let u := { a : Œ± √ó Œ± | dist a.fst a.snd < Œµ }
    have hu : u ‚àà ùì§ Œ± := Metric.mem_uniformity_dist.mpr ‚ü®Œµ, hŒµ, by simp [u]‚ü©
    rw [‚Üê @Filter.eventually_atTop_prod_self' _ _ _ fun m =>
      ‚àÄ x ‚àà s, dist (F m.fst x) (F m.snd x) < Œµ]
    specialize h u hu
    rw [prod_atTop_atTop_eq] at h
    exact h.mono fun n h x hx => h x hx
  ¬∑ intro h u hu
    rcases Metric.mem_uniformity_dist.mp hu with ‚ü®Œµ, hŒµ, hab‚ü©
    rcases h Œµ hŒµ with ‚ü®N, hN‚ü©
    rw [prod_atTop_atTop_eq, eventually_atTop]
    use (N, N)
    intro b hb x hx
    rcases hb with ‚ü®hbl, hbr‚ü©
    exact hab (hN b.fst hbl.ge b.snd hbr.ge x hx)
#align metric.uniform_cauchy_seq_on_iff Metric.uniformCauchySeqOn_iff

/-- If the distance between `s n` and `s m`, `n ‚â§ m` is bounded above by `b n`
and `b` converges to zero, then `s` is a Cauchy sequence.  -/
theorem cauchySeq_of_le_tendsto_0' {s : Œ≤ ‚Üí Œ±} (b : Œ≤ ‚Üí ‚Ñù)
    (h : ‚àÄ n m : Œ≤, n ‚â§ m ‚Üí dist (s n) (s m) ‚â§ b n) (h‚ÇÄ : Tendsto b atTop (ùìù 0)) : CauchySeq s :=
  Metric.cauchySeq_iff'.2 fun Œµ Œµ0 => (h‚ÇÄ.eventually (gt_mem_nhds Œµ0)).exists.imp fun N hN n hn =>
    calc dist (s n) (s N) = dist (s N) (s n) := dist_comm _ _
    _ ‚â§ b N := h _ _ hn
    _ < Œµ := hN
#align cauchy_seq_of_le_tendsto_0' cauchySeq_of_le_tendsto_0'

/-- If the distance between `s n` and `s m`, `n, m ‚â• N` is bounded above by `b N`
and `b` converges to zero, then `s` is a Cauchy sequence.  -/
theorem cauchySeq_of_le_tendsto_0 {s : Œ≤ ‚Üí Œ±} (b : Œ≤ ‚Üí ‚Ñù)
    (h : ‚àÄ n m N : Œ≤, N ‚â§ n ‚Üí N ‚â§ m ‚Üí dist (s n) (s m) ‚â§ b N) (h‚ÇÄ : Tendsto b atTop (ùìù 0)) :
    CauchySeq s :=
  cauchySeq_of_le_tendsto_0' b (fun _n _m hnm => h _ _ _ le_rfl hnm) h‚ÇÄ
#align cauchy_seq_of_le_tendsto_0 cauchySeq_of_le_tendsto_0

/-- A Cauchy sequence on the natural numbers is bounded. -/
theorem cauchySeq_bdd {u : ‚Ñï ‚Üí Œ±} (hu : CauchySeq u) : ‚àÉ R > 0, ‚àÄ m n, dist (u m) (u n) < R := by
  rcases Metric.cauchySeq_iff'.1 hu 1 zero_lt_one with ‚ü®N, hN‚ü©
  rsuffices ‚ü®R, R0, H‚ü© : ‚àÉ R > 0, ‚àÄ n, dist (u n) (u N) < R
  ¬∑ exact ‚ü®_, add_pos R0 R0, fun m n =>
      lt_of_le_of_lt (dist_triangle_right _ _ _) (add_lt_add (H m) (H n))‚ü©
  let R := Finset.sup (Finset.range N) fun n => nndist (u n) (u N)
  refine' ‚ü®‚ÜëR + 1, add_pos_of_nonneg_of_pos R.2 zero_lt_one, fun n => _‚ü©
  rcases le_or_lt N n with h | h
  ¬∑ exact lt_of_lt_of_le (hN _ h) (le_add_of_nonneg_left R.2)
  ¬∑ have : _ ‚â§ R := Finset.le_sup (Finset.mem_range.2 h)
    exact lt_of_le_of_lt this (lt_add_of_pos_right _ zero_lt_one)
#align cauchy_seq_bdd cauchySeq_bdd

/-- Yet another metric characterization of Cauchy sequences on integers. This one is often the
most efficient. -/
theorem cauchySeq_iff_le_tendsto_0 {s : ‚Ñï ‚Üí Œ±} :
    CauchySeq s ‚Üî
      ‚àÉ b : ‚Ñï ‚Üí ‚Ñù,
        (‚àÄ n, 0 ‚â§ b n) ‚àß
          (‚àÄ n m N : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí dist (s n) (s m) ‚â§ b N) ‚àß Tendsto b atTop (ùìù 0) :=
  ‚ü®fun hs => by
    /- `s` is a Cauchy sequence. The sequence `b` will be constructed by taking
      the supremum of the distances between `s n` and `s m` for `n m ‚â• N`.
      First, we prove that all these distances are bounded, as otherwise the Sup
      would not make sense. -/
    let S N := (fun p : ‚Ñï √ó ‚Ñï => dist (s p.1) (s p.2)) '' { p | p.1 ‚â• N ‚àß p.2 ‚â• N }
    have hS : ‚àÄ N, ‚àÉ x, ‚àÄ y ‚àà S N, y ‚â§ x := by
      rcases cauchySeq_bdd hs with ‚ü®R, -, hR‚ü©
      refine' fun N => ‚ü®R, _‚ü©
      rintro _ ‚ü®‚ü®m, n‚ü©, _, rfl‚ü©
      exact le_of_lt (hR m n)
    -- Prove that it bounds the distances of points in the Cauchy sequence
    have ub : ‚àÄ m n N, N ‚â§ m ‚Üí N ‚â§ n ‚Üí dist (s m) (s n) ‚â§ sSup (S N) := fun m n N hm hn =>
      le_csSup (hS N) ‚ü®‚ü®_, _‚ü©, ‚ü®hm, hn‚ü©, rfl‚ü©
    have S0m : ‚àÄ n, (0 : ‚Ñù) ‚àà S n := fun n => ‚ü®‚ü®n, n‚ü©, ‚ü®le_rfl, le_rfl‚ü©, dist_self _‚ü©
    have S0 := fun n => le_csSup (hS n) (S0m n)
    -- Prove that it tends to `0`, by using the Cauchy property of `s`
    refine' ‚ü®fun N => sSup (S N), S0, ub, Metric.tendsto_atTop.2 fun Œµ Œµ0 => _‚ü©
    refine' (Metric.cauchySeq_iff.1 hs (Œµ / 2) (half_pos Œµ0)).imp fun N hN n hn => _
    rw [Real.dist_0_eq_abs, abs_of_nonneg (S0 n)]
    refine' lt_of_le_of_lt (csSup_le ‚ü®_, S0m _‚ü© _) (half_lt_self Œµ0)
    rintro _ ‚ü®‚ü®m', n'‚ü©, ‚ü®hm', hn'‚ü©, rfl‚ü©
    exact le_of_lt (hN _ (le_trans hn hm') _ (le_trans hn hn')),
   fun ‚ü®b, _, b_bound, b_lim‚ü© => cauchySeq_of_le_tendsto_0 b b_bound b_lim‚ü©
#align cauchy_seq_iff_le_tendsto_0 cauchySeq_iff_le_tendsto_0

lemma Metric.exists_subseq_bounded_of_cauchySeq (u : ‚Ñï ‚Üí Œ±) (hu : CauchySeq u) (b : ‚Ñï ‚Üí ‚Ñù)
    (hb : ‚àÄ n, 0 < b n) :
    ‚àÉ f : ‚Ñï ‚Üí ‚Ñï, StrictMono f ‚àß ‚àÄ n, ‚àÄ m ‚â• f n, dist (u m) (u (f n)) < b n := by
  rw [cauchySeq_iff] at hu
  have hu' : ‚àÄ k, ‚àÄ·∂† (n : ‚Ñï) in atTop, ‚àÄ m ‚â• n, dist (u m) (u n) < b k := by
    intro k
    rw [eventually_atTop]
    obtain ‚ü®N, hN‚ü© := hu (b k) (hb k)
    exact ‚ü®N, fun m hm r hr => hN r (hm.trans hr) m hm‚ü©
  exact Filter.extraction_forall_of_eventually hu'

end CauchySeq
