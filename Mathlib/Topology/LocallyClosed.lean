/-
Copyright (c) 2024 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.Topology.Constructions
import Mathlib.Tactic.TFAE

/-!
# Locally closed sets

## Main definitions

* `IsLocallyClosed`: Predicate saying that a set is locally closed

## Main results

* `isLocallyClosed_tfae`:
  A set `s` is locally closed if one of the equivalent conditions below hold
  1. It is the intersection of some open set and some closed set.
  2. The coborder `(closure s \ s)·∂ú` is open.
  3. `s` is closed in some neighborhood of `x` for all `x ‚àà s`.
  4. Every `x ‚àà s` has some open neighborhood `U` such that `U ‚à© closure s ‚äÜ s`.
  5. `s` is open in the closure of `s`.

-/

variable {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] {s t : Set X} {f : X ‚Üí Y}

open scoped Topology Set.Notation

open Set

lemma subset_coborder :
    s ‚äÜ coborder s := by
  rw [coborder, subset_compl_iff_disjoint_right]
  exact disjoint_sdiff_self_right

lemma coborder_inter_closure :
    coborder s ‚à© closure s = s := by
  rw [coborder, ‚Üê diff_eq_compl_inter, diff_diff_right_self, inter_eq_right]
  exact subset_closure

lemma closure_inter_coborder :
    closure s ‚à© coborder s = s := by
  rw [inter_comm, coborder_inter_closure]

lemma coborder_eq_union_frontier_compl :
    coborder s = s ‚à™ (frontier s)·∂ú := by
  rw [coborder, compl_eq_comm, compl_union, compl_compl, ‚Üê diff_eq_compl_inter,
    ‚Üê union_diff_right, union_comm, ‚Üê closure_eq_self_union_frontier]

lemma coborder_eq_univ_iff :
    coborder s = univ ‚Üî IsClosed s := by
  simp [coborder, diff_eq_empty, closure_subset_iff_isClosed]

alias ‚ü®_, IsClosed.coborder_eq‚ü© := coborder_eq_univ_iff

lemma coborder_eq_compl_frontier_iff :
    coborder s = (frontier s)·∂ú ‚Üî IsOpen s := by
  simp_rw [coborder_eq_union_frontier_compl, union_eq_right, subset_compl_iff_disjoint_left,
    disjoint_frontier_iff_isOpen]

alias ‚ü®_, IsOpen.coborder_eq‚ü© := coborder_eq_compl_frontier_iff

lemma IsOpenMap.coborder_preimage_subset (hf : IsOpenMap f) (s : Set Y) :
    coborder (f ‚Åª¬π' s) ‚äÜ f ‚Åª¬π' (coborder s) := by
  rw [coborder, coborder, preimage_compl, preimage_diff, compl_subset_compl]
  apply diff_subset_diff_left
  exact hf.preimage_closure_subset_closure_preimage

lemma Continuous.preimage_coborder_subset (hf : Continuous f) (s : Set Y) :
    f ‚Åª¬π' (coborder s) ‚äÜ coborder (f ‚Åª¬π' s) := by
  rw [coborder, coborder, preimage_compl, preimage_diff, compl_subset_compl]
  apply diff_subset_diff_left
  exact hf.closure_preimage_subset s

lemma coborder_preimage (hf : IsOpenMap f) (hf' : Continuous f) (s : Set Y) :
    coborder (f ‚Åª¬π' s) = f ‚Åª¬π' (coborder s) :=
  (hf.coborder_preimage_subset s).antisymm (hf'.preimage_coborder_subset s)

protected
lemma OpenEmbedding.coborder_preimage (hf : OpenEmbedding f) (s : Set Y) :
    coborder (f ‚Åª¬π' s) = f ‚Åª¬π' (coborder s) :=
  coborder_preimage hf.isOpenMap hf.continuous s

lemma isClosed_preimage_val_coborder :
    IsClosed (coborder s ‚Üì‚à© s) := by
  rw [isClosed_preimage_val, inter_eq_right.mpr subset_coborder, coborder_inter_closure]

lemma IsLocallyClosed.inter (hs : IsLocallyClosed s) (ht : IsLocallyClosed t) :
    IsLocallyClosed (s ‚à© t) := by
  obtain ‚ü®U‚ÇÅ, Z‚ÇÅ, hU‚ÇÅ, hZ‚ÇÅ, rfl‚ü© := hs
  obtain ‚ü®U‚ÇÇ, Z‚ÇÇ, hU‚ÇÇ, hZ‚ÇÇ, rfl‚ü© := ht
  refine ‚ü®_, _, hU‚ÇÅ.inter hU‚ÇÇ, hZ‚ÇÅ.inter hZ‚ÇÇ, inter_inter_inter_comm U‚ÇÅ Z‚ÇÅ U‚ÇÇ Z‚ÇÇ‚ü©

lemma IsLocallyClosed.preimage {s : Set Y} (hs : IsLocallyClosed s)
    {f : X ‚Üí Y} (hf : Continuous f) :
    IsLocallyClosed (f ‚Åª¬π' s) := by
  obtain ‚ü®U, Z, hU, hZ, rfl‚ü© := hs
  exact ‚ü®_, _, hU.preimage hf, hZ.preimage hf, preimage_inter‚ü©

nonrec
lemma Inducing.isLocallyClosed_iff {s : Set X}
    {f : X ‚Üí Y} (hf : Inducing f) :
    IsLocallyClosed s ‚Üî ‚àÉ s' : Set Y, IsLocallyClosed s' ‚àß f ‚Åª¬π' s' = s := by
  simp_rw [IsLocallyClosed, hf.isOpen_iff, hf.isClosed_iff]
  constructor
  ¬∑ rintro ‚ü®_, _, ‚ü®U, hU, rfl‚ü©, ‚ü®Z, hZ, rfl‚ü©, rfl‚ü©
    exact ‚ü®_, ‚ü®U, Z, hU, hZ, rfl‚ü©, rfl‚ü©
  ¬∑ rintro ‚ü®_, ‚ü®U, Z, hU, hZ, rfl‚ü©, rfl‚ü©
    exact ‚ü®_, _, ‚ü®U, hU, rfl‚ü©, ‚ü®Z, hZ, rfl‚ü©, rfl‚ü©

lemma Embedding.isLocallyClosed_iff {s : Set X}
    {f : X ‚Üí Y} (hf : Embedding f) :
    IsLocallyClosed s ‚Üî ‚àÉ s' : Set Y, IsLocallyClosed s' ‚àß s' ‚à© range f = f '' s := by
  simp_rw [hf.toInducing.isLocallyClosed_iff,
    ‚Üê (image_injective.mpr hf.inj).eq_iff, image_preimage_eq_inter_range]

lemma IsLocallyClosed.image {s : Set X} (hs : IsLocallyClosed s)
    {f : X ‚Üí Y} (hf : Inducing f) (hf' : IsLocallyClosed (range f)) :
    IsLocallyClosed (f '' s) := by
  obtain ‚ü®t, ht, rfl‚ü© := hf.isLocallyClosed_iff.mp hs
  rw [image_preimage_eq_inter_range]
  exact ht.inter hf'

/--
A set `s` is locally closed if one of the equivalent conditions below hold
1. It is the intersection of some open set and some closed set.
2. The coborder `(closure s \ s)·∂ú` is open.
3. `s` is closed in some neighborhood of `x` for all `x ‚àà s`.
4. Every `x ‚àà s` has some open neighborhood `U` such that `U ‚à© closure s ‚äÜ s`.
5. `s` is open in the closure of `s`.
-/
lemma isLocallyClosed_tfae (s : Set X) :
    List.TFAE
    [ IsLocallyClosed s,
      IsOpen (coborder s),
      ‚àÄ x ‚àà s, ‚àÉ U ‚àà ùìù x, IsClosed (U ‚Üì‚à© s),
      ‚àÄ x ‚àà s, ‚àÉ U, x ‚àà U ‚àß IsOpen U ‚àß U ‚à© closure s ‚äÜ s,
      IsOpen (closure s ‚Üì‚à© s)] := by
  tfae_have 1 ‚Üí 2
  ¬∑ rintro ‚ü®U, Z, hU, hZ, rfl‚ü©
    have : Z ‚à™ (frontier (U ‚à© Z))·∂ú = univ := by
      nth_rw 1 [‚Üê hZ.closure_eq]
      rw [‚Üê compl_subset_iff_union, compl_subset_compl]
      refine frontier_subset_closure.trans (closure_mono inter_subset_right)
    rw [coborder_eq_union_frontier_compl, inter_union_distrib_right, this,
      inter_univ]
    exact hU.union isClosed_frontier.isOpen_compl
  tfae_have 2 ‚Üí 3
  ¬∑ exact fun h x ‚Ü¶ (‚ü®coborder s, h.mem_nhds <| subset_coborder ¬∑, isClosed_preimage_val_coborder‚ü©)
  tfae_have 3 ‚Üí 4
  ¬∑ intro h x hx
    obtain ‚ü®t, ht, ht'‚ü© := h x hx
    obtain ‚ü®U, hUt, hU, hxU‚ü© := mem_nhds_iff.mp ht
    rw [isClosed_preimage_val] at ht'
    exact ‚ü®U, hxU, hU, (subset_inter (inter_subset_left.trans hUt) (hU.inter_closure.trans
      (closure_mono <| inter_subset_inter hUt subset_rfl))).trans ht'‚ü©
  tfae_have 4 ‚Üí 5
  ¬∑ intro H
    choose U hxU hU e using H
    refine ‚ü®‚ãÉ x ‚àà s, U x ‚Äπ_‚Ä∫, isOpen_iUnion (isOpen_iUnion <| hU ¬∑), ext fun x ‚Ü¶ ‚ü®?_, ?_‚ü©‚ü©
    ¬∑ rintro ‚ü®_, ‚ü®‚ü®y, rfl‚ü©, ‚ü®_, ‚ü®hy, rfl‚ü©, hxU‚ü©‚ü©‚ü©
      exact e y hy ‚ü®hxU, x.2‚ü©
    ¬∑ exact (subset_iUnion‚ÇÇ _ _ <| hxU x ¬∑)
  tfae_have 5 ‚Üí 1
  ¬∑ intro H
    convert H.isLocallyClosed.image inducing_subtype_val
      (by simpa using isClosed_closure.isLocallyClosed)
    simpa using subset_closure
  tfae_finish

lemma isLocallyClosed_iff_isOpen_coborder : IsLocallyClosed s ‚Üî IsOpen (coborder s) :=
  (isLocallyClosed_tfae s).out 0 1

alias ‚ü®IsLocallyClosed.isOpen_coborder, _‚ü© := isLocallyClosed_iff_isOpen_coborder

lemma IsLocallyClosed.isOpen_preimage_val_closure (hs : IsLocallyClosed s) :
    IsOpen (closure s ‚Üì‚à© s) :=
  ((isLocallyClosed_tfae s).out 0 4).mp hs
