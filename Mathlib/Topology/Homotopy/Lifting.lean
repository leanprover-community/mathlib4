/-
Copyright (c) 2025 Junyan Xu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Junyan Xu
-/
import Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected
import Mathlib.Topology.Connected.LocPathConnected
import Mathlib.Topology.Covering
import Mathlib.Topology.Homotopy.Path
import Mathlib.Topology.UnitInterval

/-!
# The homotopy lifting property for covering maps

- `IsCoveringMap.exists_path_lifts`, `IsCoveringMap.liftPath`: any path in the base of a covering
  map lifts uniquely to the covering space (given a lift of the starting point).

- `IsCoveringMap.liftHomotopy`: any homotopy `I √ó A ‚Üí X` in the base of a covering map `E ‚Üí X` can
  be lifted to a homotopy `I √ó A ‚Üí E`, starting from a given lift of the restriction `{0} √ó A ‚Üí X`.

- `IsCoveringMap.existsUnique_continuousMap_lifts`: any continuous map from a simply-connected,
  locally path-connected space lifts uniquely through a covering map (given a lift of an
  arbitrary point).
-/

open Topology unitInterval

variable {E X A : Type*} [TopologicalSpace E] [TopologicalSpace X] [TopologicalSpace A] {p : E ‚Üí X}

namespace IsLocalHomeomorph

variable (homeo : IsLocalHomeomorph p)
include homeo

/-- If `p : E ‚Üí X` is a local homeomorphism, and if `g : I √ó A ‚Üí E` is a lift of `f : C(I √ó A, X)`
  continuous on `{0} √ó A ‚à™ I √ó {a}` for some `a : A`, then there exists a neighborhood `N ‚àà ùìù a`
  and `g' : I √ó A ‚Üí E` continuous on `I √ó N` that agrees with `g` on `{0} √ó A ‚à™ I √ó {a}`.
  The proof follows [hatcher02], Proof of Theorem 1.7, p.30.

  Possible TODO: replace `I` by an arbitrary space assuming `A` is locally connected
  and `p` is a separated map, which guarantees uniqueness and therefore well-definedness
  on the intersections. -/
theorem exists_lift_nhds {f : C(I √ó A, X)} {g : I √ó A ‚Üí E} (g_lifts : p ‚àò g = f)
    (cont_0 : Continuous (g ‚ü®0, ¬∑‚ü©)) (a : A) (cont_a : Continuous (g ‚ü®¬∑, a‚ü©)) :
    ‚àÉ N ‚àà ùìù a, ‚àÉ g' : I √ó A ‚Üí E, ContinuousOn g' (Set.univ √óÀ¢ N) ‚àß p ‚àò g' = f ‚àß
      (‚àÄ a, g' (0, a) = g (0, a)) ‚àß ‚àÄ t, g' (t, a) = g (t, a) := by
  -- For every `e : E`, upgrade `p` to a LocalHomeomorph `q e` around `e`.
  choose q mem_source hpq using homeo
  /- Using the hypothesis `cont_a`, we partition the unit interval so that for each
    subinterval `[t‚Çô, t‚Çô‚Çä‚ÇÅ]`, the image `g ([t‚Çô, t‚Çô‚Çä‚ÇÅ] √ó {a})` is contained in the
    domain of some local homeomorphism `q e`. -/
  obtain ‚ü®t, t_0, t_mono, ‚ü®n_max, h_max‚ü©, t_sub‚ü© :=
    exists_monotone_Icc_subset_open_cover_unitInterval
      (fun e ‚Ü¶ (q e).open_source.preimage cont_a)
      fun t _ ‚Ü¶ Set.mem_iUnion.mpr ‚ü®g (t, a), mem_source _‚ü©
  /- We aim to inductively prove the existence of N‚Çô and g' continuous on [0, t‚Çô] √ó N‚Çô for each n,
    and get the desired result by taking some n with t‚Çô = 1. -/
  suffices ‚àÄ n, ‚àÉ N, a ‚àà N ‚àß IsOpen N ‚àß ‚àÉ g' : I √ó A ‚Üí E, ContinuousOn g' (Set.Icc 0 (t n) √óÀ¢ N) ‚àß
      p ‚àò g' = f ‚àß (‚àÄ a, g' (0, a) = g (0, a)) ‚àß ‚àÄ t' ‚â§ t n, g' (t', a) = g (t', a) by
    obtain ‚ü®N, haN, N_open, hN‚ü© := this n_max
    simp_rw [h_max _ le_rfl] at hN
    refine ‚ü®N, N_open.mem_nhds haN, ?_‚ü©; convert hN
    ¬∑ rw [eq_comm, Set.eq_univ_iff_forall]; exact fun t ‚Ü¶ ‚ü®bot_le, le_top‚ü©
    ¬∑ rw [imp_iff_right]; exact le_top
  refine Nat.rec ‚ü®_, Set.mem_univ a, isOpen_univ, g, ?_, g_lifts, fun a ‚Ü¶ rfl, fun _ _ ‚Ü¶ rfl‚ü©
    (fun n ‚ü®N, haN, N_open, g', cont_g', g'_lifts, g'_0, g'_a‚ü© ‚Ü¶ ?_)
  ¬∑ -- the n = 0 case is covered by the hypothesis cont_0.
    refine (cont_0.comp continuous_snd).continuousOn.congr (fun ta ‚ü®ht, _‚ü© ‚Ü¶ ?_)
    rw [t_0, Set.Icc_self, Set.mem_singleton_iff] at ht; rw [‚Üê ta.eta, ht]; rfl
  /- Since g ([t‚Çô, t‚Çô‚Çä‚ÇÅ] √ó {a}) is contained in the domain of some local homeomorphism `q e` and
    g lifts f, f ([t‚Çô, t‚Çô‚Çä‚ÇÅ] √ó {a}) is contained in the codomain (`target`) of `q e`. -/
  obtain ‚ü®e, h_sub‚ü© := t_sub n
  have : Set.Icc (t n) (t (n+1)) √óÀ¢ {a} ‚äÜ f ‚Åª¬π' (q e).target := by
    rintro ‚ü®t0, a'‚ü© ‚ü®ht, ha‚ü©
    rw [Set.mem_singleton_iff] at ha; dsimp only at ha
    rw [‚Üê g_lifts, hpq e, ha]
    exact (q e).map_source (h_sub ht)
  /- Using compactness of [t‚Çô, t‚Çô‚Çä‚ÇÅ], we can find a neighborhood v of a such that
    f ([t‚Çô, t‚Çô‚Çä‚ÇÅ] √ó v) is contained in the codomain of `q e`. -/
  obtain ‚ü®u, v, -, v_open, hu, hav, huv‚ü© := generalized_tube_lemma isClosed_Icc.isCompact
    isCompact_singleton ((q e).open_target.preimage f.continuous) this
  classical
  /- Use the inverse of `q e` to extend g' from [0, t‚Çô] √ó N‚Çô‚Çä‚ÇÅ to [0, t‚Çô‚Çä‚ÇÅ] √ó N‚Çô‚Çä‚ÇÅ, where
    N‚Çô‚Çä‚ÇÅ ‚äÜ v ‚à© N‚Çô is such that {t‚Çô} √ó N‚Çô‚Çä‚ÇÅ is mapped to the domain (`source`) of `q e` by `g'`. -/
  refine ‚ü®_, ?_, v_open.inter <| (cont_g'.comp (Continuous.prodMk_right <| t n).continuousOn
      fun a ha ‚Ü¶ ‚ü®?_, ha‚ü©).isOpen_inter_preimage N_open (q e).open_source,
    fun ta ‚Ü¶ if ta.1 ‚â§ t n then g' ta else if f ta ‚àà (q e).target then (q e).symm (f ta) else g ta,
    .if (fun ta ‚ü®‚ü®_, hav, _, ha‚ü©, hfr‚ü© ‚Ü¶ ?_) (cont_g'.mono fun ta ‚ü®hta, ht‚ü© ‚Ü¶ ?_) ?_,
    ?_, fun a ‚Ü¶ ?_, fun t0 htn1 ‚Ü¶ ?_‚ü©
  ¬∑ refine ‚ü®Set.singleton_subset_iff.mp hav, haN, ?_‚ü©
    change g' (t n, a) ‚àà (q e).source; rw [g'_a _ le_rfl]
    exact h_sub ‚ü®le_rfl, t_mono n.le_succ‚ü©
  ¬∑ rw [‚Üê t_0]; exact ‚ü®t_mono n.zero_le, le_rfl‚ü©
  ¬∑ have ht := Set.mem_setOf.mp (frontier_le_subset_eq continuous_fst continuous_const hfr)
    have : f ta ‚àà (q e).target := huv ‚ü®hu (by rw [ht]; exact ‚ü®le_rfl, t_mono n.le_succ‚ü©), hav‚ü©
    rw [if_pos this]
    -- here we use that {t‚Çô} √ó N‚Çô‚Çä‚ÇÅ is mapped to the domain of `q e`
    apply (q e).injOn (by rwa [‚Üê ta.eta, ht]) ((q e).map_target this)
    rw [(q e).right_inv this, ‚Üê hpq e]; exact congr_fun g'_lifts ta
  ¬∑ rw [closure_le_eq continuous_fst continuous_const] at ht
    exact ‚ü®‚ü®hta.1.1, ht‚ü©, hta.2.2.1‚ü©
  ¬∑ simp_rw [not_le]; exact (ContinuousOn.congr ((q e).continuousOn_invFun.comp f.2.continuousOn
      fun _ h ‚Ü¶ huv ‚ü®hu ‚ü®h.2, h.1.1.2‚ü©, h.1.2.1‚ü©)
      fun _ h ‚Ü¶ if_pos <| huv ‚ü®hu ‚ü®h.2, h.1.1.2‚ü©, h.1.2.1‚ü©).mono
        (Set.inter_subset_inter_right _ <| closure_lt_subset_le continuous_const continuous_fst)
  ¬∑ ext ta; rw [Function.comp_apply]; split_ifs with _ hv
    ¬∑ exact congr_fun g'_lifts ta
    ¬∑ rw [hpq e, (q e).right_inv hv]
    ¬∑ exact congr_fun g_lifts ta
  ¬∑ rw [‚Üê g'_0]; exact if_pos bot_le
  ¬∑ dsimp only; split_ifs with htn hf
    ¬∑ exact g'_a t0 htn
    ¬∑ apply (q e).injOn ((q e).map_target hf) (h_sub ‚ü®le_of_not_ge htn, htn1‚ü©)
      rw [(q e).right_inv hf, ‚Üê hpq e]; exact (congr_fun g_lifts _).symm
    ¬∑ rfl

variable (sep : IsSeparatedMap p)
include sep

theorem continuous_lift (f : C(I √ó A, X)) {g : I √ó A ‚Üí E} (g_lifts : p ‚àò g = f)
    (cont_0 : Continuous (g ‚ü®0, ¬∑‚ü©)) (cont_A : ‚àÄ a, Continuous (g ‚ü®¬∑, a‚ü©)) : Continuous g := by
  rw [continuous_iff_continuousAt]
  intro ‚ü®t, a‚ü©
  obtain ‚ü®N, haN, g', cont_g', g'_lifts, g'_0, -‚ü© :=
    homeo.exists_lift_nhds g_lifts cont_0 a (cont_A a)
  refine (cont_g'.congr fun ‚ü®t, a‚ü© ‚ü®_, ha‚ü© ‚Ü¶ ?_).continuousAt (prod_mem_nhds Filter.univ_mem haN)
  refine congr_fun (sep.eq_of_comp_eq homeo.isLocallyInjective (cont_A a)
    (cont_g'.comp_continuous (.prodMk_left a) fun _ ‚Ü¶ ‚ü®‚ü®‚ü©, ha‚ü©) ?_ 0 (g'_0 a).symm) t
  ext t; apply congr_fun (g_lifts.trans g'_lifts.symm)

/-- The abstract monodromy theorem: if `Œ≥‚ÇÄ` and `Œ≥‚ÇÅ` are two paths in a topological space `X`,
  `Œ≥` is a homotopy between them relative to the endpoints, and the path at each time step of
  the homotopy, `Œ≥ (t, ¬∑)`, lifts to a continuous path `Œì t` through a separated local
  homeomorphism `p : E ‚Üí X`, starting from some point in `E` independent of `t`. Then the
  endpoints of these lifts are also independent of `t`.

  This can be applied to continuation of analytic functions as follows: for a sheaf of analytic
  functions on an analytic manifold `X`, we may consider its √©tale space `E` (whose points are
  analytic germs) with the natural projection `p : E ‚Üí X`, which is a local homeomorphism and a
  separated map (because two analytic functions agreeing on a nonempty open set agree on the
  whole connected component). An analytic continuation of a germ along a path `Œ≥ (t, ¬∑) : C(I, X)`
  corresponds to a continuous lift of `Œ≥ (t, ¬∑)` to `E` starting from that germ. If `Œ≥` is a
  homotopy and the germ admits continuation along every path `Œ≥ (t, ¬∑)`, then the result of the
  continuations are independent of `t`. In particular, if `X` is simply connected and an analytic
  germ at `p : X` admits a continuation along every path in `X` from `p` to `q : X`, then the
  continuation to `q` is independent of the path chosen. -/
theorem monodromy_theorem {Œ≥‚ÇÄ Œ≥‚ÇÅ : C(I, X)} (Œ≥ : Œ≥‚ÇÄ.HomotopyRel Œ≥‚ÇÅ {0,1}) (Œì : I ‚Üí C(I, E))
    (Œì_lifts : ‚àÄ t s, p (Œì t s) = Œ≥ (t, s)) (Œì_0 : ‚àÄ t, Œì t 0 = Œì 0 0) (t : I) :
    Œì t 1 = Œì 0 1 := by
  have := homeo.continuous_lift sep (Œ≥.comp .prodSwap) (g := fun st ‚Ü¶ Œì st.2 st.1) ?_ ?_ ?_
  ¬∑ apply sep.const_of_comp homeo.isLocallyInjective (this.comp (.prodMk_right 1))
    intro t t'; change p (Œì _ _) = p (Œì _ _); simp_rw [Œì_lifts, Œ≥.eq_fst _ (.inr rfl)]
  ¬∑ ext; apply Œì_lifts
  ¬∑ simp_rw [Œì_0]; exact continuous_const
  ¬∑ exact fun t ‚Ü¶ (Œì t).2

omit sep
open PathConnectedSpace (somePath) in
/-- A map `f` from a path-connected, locally path-connected space `A` to another space `X` lifts
  uniquely through a local homeomorphism `p : E ‚Üí X` if for every path `Œ≥` in `A`, the composed
  path `f ‚àò Œ≥` in `X` lifts to `E` with endpoint only dependent on the endpoint of `Œ≥` and
  independent of the path chosen. In this theorem, we require that a specific point `a‚ÇÄ : A` is
  lifted to a specific point `e‚ÇÄ : E` over `a‚ÇÄ`. -/
theorem existsUnique_continuousMap_lifts [PathConnectedSpace A] [LocPathConnectedSpace A]
    (f : C(A, X)) (a‚ÇÄ : A) (e‚ÇÄ : E) (he : p e‚ÇÄ = f a‚ÇÄ)
    (ex : ‚àÄ Œ≥ : C(I, A), Œ≥ 0 = a‚ÇÄ ‚Üí ‚àÉ Œì : C(I, E), Œì 0 = e‚ÇÄ ‚àß p ‚àò Œì = f.comp Œ≥)
    (uniq : ‚àÄ Œ≥ Œ≥' : C(I, A), ‚àÄ Œì Œì' : C(I, E), Œ≥ 0 = a‚ÇÄ ‚Üí Œ≥' 0 = a‚ÇÄ ‚Üí Œì 0 = e‚ÇÄ ‚Üí Œì' 0 = e‚ÇÄ ‚Üí
      p ‚àò Œì = f.comp Œ≥ ‚Üí p ‚àò Œì' = f.comp Œ≥' ‚Üí Œ≥ 1 = Œ≥' 1 ‚Üí Œì 1 = Œì' 1) :
    ‚àÉ! F : C(A, E), F a‚ÇÄ = e‚ÇÄ ‚àß p ‚àò F = f := by
  choose Œì Œì_0 Œì_lifts using ex
  let F (a : A) : E := Œì _ (somePath a‚ÇÄ a).source 1
  have (a : A) : p (F a) = f a := by simpa using congr_fun (Œì_lifts _ (Path.source _)) 1
  refine ‚ü®‚ü®F, continuous_iff_continuousAt.mpr fun a ‚Ü¶ ?_‚ü©, ‚ü®?_, funext this‚ü©, fun F' ‚ü®F'_0, hpF'‚ü© ‚Ü¶
    DFunLike.ext _ _ fun a ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®p, hep, rfl‚ü© := homeo (F a)
    have hfap : f a ‚àà p.target := by rw [‚Üê this]; exact p.map_source hep
    refine ContinuousAt.congr (f := p.symm ‚àò f) ((p.continuousOn_symm.continuousAt <|
      p.open_target.mem_nhds hfap).comp f.2.continuousAt) ?_
    have ‚ü®U, ‚ü®haU, U_conn‚ü©, hUp‚ü© := (path_connected_basis a).mem_iff.mp
      ((p.open_target.preimage f.continuous).mem_nhds hfap)
    refine Filter.mem_of_superset haU fun x hxU ‚Ü¶ ?_
    have ‚ü®Œ≥, hŒ≥‚ü© := U_conn.joinedIn _ (mem_of_mem_nhds haU) _ hxU
    let Œì' : Path e‚ÇÄ ((p.symm ‚àò f) a) :=
      ‚ü®Œì _ (somePath a‚ÇÄ a).source, Œì_0 .., by simp [‚Üê this, hep, F]‚ü©
    specialize uniq ((somePath a‚ÇÄ a).trans Œ≥) _ (Œì'.trans <| Œ≥.map' <| p.continuousOn_symm.comp
      f.2.continuousOn <| by rintro _ ‚ü®t, rfl‚ü©; exact hUp (hŒ≥ _)) _ (by simp) (somePath a‚ÇÄ x).source
      (by simp) (Œì_0 _ (somePath a‚ÇÄ x).source) _ (Œì_lifts ..) (by simp)
    ¬∑ ext
      simp only [Function.comp, ContinuousMap.coe_coe, Path.trans_apply, ContinuousMap.coe_comp]
      split_ifs
      ¬∑ apply congr_fun (Œì_lifts ..)
      ¬∑ simp [Path.map', p.right_inv (hUp (hŒ≥ _))]
    simpa using uniq
  ¬∑ exact uniq _ (.const I a‚ÇÄ) _ (.const I e‚ÇÄ) (somePath a‚ÇÄ a‚ÇÄ).source rfl (Œì_0 ..) rfl (Œì_lifts ..)
      (by simpa) (Path.target _)
  ¬∑ let Œ≥ := somePath a‚ÇÄ a
    simpa using uniq _ _ (F'.comp Œ≥) (Œì _ Œ≥.source) Œ≥.source Œ≥.source (by simpa) (Œì_0 ..)
      (by simp [‚Üê Function.comp_assoc, hpF']) (Œì_lifts ..) rfl

end IsLocalHomeomorph

namespace IsCoveringMap
variable (cov : IsCoveringMap p)
include cov

section path_lifting
variable (Œ≥ : C(I,X)) (e : E) (Œ≥_0 : Œ≥ 0 = p e)
include Œ≥_0

/-- The path lifting property (existence) for covering maps. -/
theorem exists_path_lifts : ‚àÉ Œì : C(I,E), p ‚àò Œì = Œ≥ ‚àß Œì 0 = e := by
  choose _ q mem_base using cov
  obtain ‚ü®t, t_0, t_mono, ‚ü®n_max, h_max‚ü©, t_sub‚ü© :=
    exists_monotone_Icc_subset_open_cover_unitInterval
    (fun x ‚Ü¶ (q x).open_baseSet.preimage Œ≥.continuous) fun t _ ‚Ü¶ Set.mem_iUnion.2 ‚ü®Œ≥ t, mem_base _‚ü©
  suffices ‚àÄ n, ‚àÉ Œì : I ‚Üí E, ContinuousOn Œì (Set.Icc 0 (t n)) ‚àß
      (Set.Icc 0 (t n)).EqOn (p ‚àò Œì) Œ≥ ‚àß Œì 0 = e by
    obtain ‚ü®Œì, cont, eqOn, Œì_0‚ü© := this n_max
    rw [h_max _ le_rfl] at cont eqOn
    exact ‚ü®‚ü®Œì, continuous_iff_continuousOn_univ.mpr
      (by convert cont; rw [eq_comm, Set.eq_univ_iff_forall]; exact fun t ‚Ü¶ ‚ü®bot_le, le_top‚ü©)‚ü©,
      funext fun _ ‚Ü¶ eqOn ‚ü®bot_le, le_top‚ü©, Œì_0‚ü©
  intro n
  induction n with
  | zero =>
    refine ‚ü®fun _ ‚Ü¶ e, continuous_const.continuousOn, fun t ht ‚Ü¶ ?_, rfl‚ü©
    rw [t_0, Set.Icc_self, Set.mem_singleton_iff] at ht; subst ht; exact Œ≥_0.symm
  | succ n ih => ?_
  obtain ‚ü®Œì, cont, eqOn, Œì_0‚ü© := ih
  obtain ‚ü®x, t_sub‚ü© := t_sub n
  refine ‚ü®fun s ‚Ü¶ if s ‚â§ t n then Œì s else (q x).invFun (Œ≥ s, (q x (Œì (t n))).2),
    .if (fun s hs ‚Ü¶ ?_) (cont.mono fun _ h ‚Ü¶ ?_) ?_, fun s hs ‚Ü¶ ?_, ?_‚ü©
  ¬∑ have pŒìtn : p (Œì (t n)) = Œ≥ (t n) := eqOn ‚ü®t_0 ‚ñ∏ t_mono n.zero_le, le_rfl‚ü©
    cases frontier_Iic_subset _ hs.2
    rw [‚Üê pŒìtn]
    refine ((q x).symm_apply_mk_proj ?_).symm
    rw [(q x).mem_source, pŒìtn]
    exact t_sub ‚ü®le_rfl, t_mono n.le_succ‚ü©
  ¬∑ rw [closure_le_eq continuous_id' continuous_const] at h; exact ‚ü®h.1.1, h.2‚ü©
  ¬∑ apply (q x).continuousOn_invFun.comp ((Continuous.prodMk_left _).comp Œ≥.2).continuousOn
    simp_rw [not_le, (q x).target_eq]; intro s h
    exact ‚ü®t_sub ‚ü®closure_lt_subset_le continuous_const continuous_subtype_val h.2, h.1.2‚ü©, ‚ü®‚ü©‚ü©
  ¬∑ rw [Function.comp_apply]; split_ifs with h
    exacts [eqOn ‚ü®hs.1, h‚ü©, (q x).proj_symm_apply' (t_sub ‚ü®le_of_not_le h, hs.2‚ü©)]
  ¬∑ dsimp only; rwa [if_pos (t_0 ‚ñ∏ t_mono n.zero_le)]

/-- The lift of a path to a covering space given a lift of the left endpoint. -/
noncomputable def liftPath : C(I,E) := (cov.exists_path_lifts Œ≥ e Œ≥_0).choose

lemma liftPath_lifts : p ‚àò cov.liftPath Œ≥ e Œ≥_0 = Œ≥ := (cov.exists_path_lifts Œ≥ e Œ≥_0).choose_spec.1
lemma liftPath_zero : cov.liftPath Œ≥ e Œ≥_0 0 = e := (cov.exists_path_lifts Œ≥ e Œ≥_0).choose_spec.2

variable {Œ≥ e}
lemma eq_liftPath_iff {Œì : I ‚Üí E} : Œì = cov.liftPath Œ≥ e Œ≥_0 ‚Üî Continuous Œì ‚àß p ‚àò Œì = Œ≥ ‚àß Œì 0 = e :=
  have lifts := cov.liftPath_lifts Œ≥ e Œ≥_0
  have zero := cov.liftPath_zero Œ≥ e Œ≥_0
  ‚ü®(¬∑ ‚ñ∏ ‚ü®(cov.liftPath Œ≥ e Œ≥_0).2, lifts, zero‚ü©), fun ‚ü®Œì_cont, Œì_lifts, Œì_0‚ü© ‚Ü¶ cov.eq_of_comp_eq
    Œì_cont (cov.liftPath Œ≥ e Œ≥_0).continuous (Œì_lifts ‚ñ∏ lifts.symm) 0 (Œì_0 ‚ñ∏ zero.symm)‚ü©

/-- Unique characterization of the lifted path. -/
lemma eq_liftPath_iff' {Œì : C(I,E)} : Œì = cov.liftPath Œ≥ e Œ≥_0 ‚Üî p ‚àò Œì = Œ≥ ‚àß Œì 0 = e := by
  simp_rw [‚Üê DFunLike.coe_fn_eq, eq_liftPath_iff, and_iff_right (ContinuousMap.continuous _)]

end path_lifting

section homotopy_lifting
variable (H : C(I √ó A, X)) (f : C(A, E)) (H_0 : ‚àÄ a, H (0, a) = p (f a))

/-- The existence of `liftHomotopy` satisfying `liftHomotopy_lifts` and `liftHomotopy_zero` is
  the homotopy lifting property for covering maps.
  In other words, a covering map is a Hurewicz fibration. -/
@[simps] noncomputable def liftHomotopy : C(I √ó A, E) where
  toFun ta := cov.liftPath (H.comp <| (ContinuousMap.id I).prodMk <| .const I ta.2)
    (f ta.2) (H_0 ta.2) ta.1
  continuous_toFun := cov.isLocalHomeomorph.continuous_lift cov.isSeparatedMap H
    (by ext ‚ü®t, a‚ü©; exact congr_fun (cov.liftPath_lifts ..) t)
    (by convert f.continuous with a; exact cov.liftPath_zero ..)
    fun a ‚Ü¶ by dsimp only; exact (cov.liftPath ..).2

lemma liftHomotopy_lifts : p ‚àò cov.liftHomotopy H f H_0 = H :=
  funext fun ‚ü®t, _‚ü© ‚Ü¶ congr_fun (cov.liftPath_lifts ..) t

lemma liftHomotopy_zero (a : A) : cov.liftHomotopy H f H_0 (0, a) = f a := cov.liftPath_zero ..

variable {H f}
lemma eq_liftHomotopy_iff (H' : I √ó A ‚Üí E) : H' = cov.liftHomotopy H f H_0 ‚Üî
    (‚àÄ a, Continuous (H' ‚ü®¬∑, a‚ü©)) ‚àß p ‚àò H' = H ‚àß ‚àÄ a, H' (0, a) = f a := by
  refine ‚ü®?_, fun ‚ü®H'_cont, H'_lifts, H'_0‚ü© ‚Ü¶ funext fun ‚ü®t, a‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ rintro rfl; refine ‚ü®fun a ‚Ü¶ ?_, cov.liftHomotopy_lifts H f H_0, cov.liftHomotopy_zero H f H_0‚ü©
    simp_rw [liftHomotopy_apply]; exact (cov.liftPath _ _ <| H_0 a).2
  ¬∑ apply congr_fun ((cov.eq_liftPath_iff _).mpr ‚ü®H'_cont a, _, H'_0 a‚ü©) t
    ext ‚ü®t, a‚ü©; exact congr_fun H'_lifts _

lemma eq_liftHomotopy_iff' (H' : C(I √ó A, E)) :
    H' = cov.liftHomotopy H f H_0 ‚Üî p ‚àò H' = H ‚àß ‚àÄ a, H' (0, a) = f a := by
  simp_rw [‚Üê DFunLike.coe_fn_eq, eq_liftHomotopy_iff]
  exact and_iff_right fun a ‚Ü¶ H'.2.comp (.prodMk_left a)

variable {f‚ÇÄ f‚ÇÅ : C(A, X)} {S : Set A} (F : f‚ÇÄ.HomotopyRel f‚ÇÅ S)

open ContinuousMap in
/-- The lift to a covering space of a homotopy between two continuous maps relative to a set
given compatible lifts of the continuous maps. -/
noncomputable def liftHomotopyRel [PreconnectedSpace A]
    {f‚ÇÄ' f‚ÇÅ' : C(A, E)} (he : ‚àÉ a ‚àà S, f‚ÇÄ' a = f‚ÇÅ' a)
    (h‚ÇÄ : p ‚àò f‚ÇÄ' = f‚ÇÄ) (h‚ÇÅ : p ‚àò f‚ÇÅ' = f‚ÇÅ) : f‚ÇÄ'.HomotopyRel f‚ÇÅ' S :=
  have F_0 : ‚àÄ a, F (0, a) = p (f‚ÇÄ' a) := fun a ‚Ü¶ (F.apply_zero a).trans (congr_fun h‚ÇÄ a).symm
  have rel : ‚àÄ t, ‚àÄ a ‚àà S, cov.liftHomotopy F f‚ÇÄ' F_0 (t, a) = f‚ÇÄ' a := fun t a ha ‚Ü¶ by
    rw [liftHomotopy_apply, cov.const_of_comp (ContinuousMap.continuous _) _ t 0]
    ¬∑ apply cov.liftPath_zero
    ¬∑ intro t t'; simp_rw [‚Üê p.comp_apply, cov.liftPath_lifts]
      exact (F.prop t a ha).trans (F.prop t' a ha).symm
  { toContinuousMap := cov.liftHomotopy F f‚ÇÄ' F_0
    map_zero_left := cov.liftHomotopy_zero F f‚ÇÄ' F_0
    map_one_left := by
      obtain ‚ü®a, ha, he‚ü© := he
      simp_rw [toFun_eq_coe, ‚Üê curry_apply]
      refine congr_fun (cov.eq_of_comp_eq
        (ContinuousMap.continuous _) f‚ÇÅ'.continuous ?_ a <| (rel 1 a ha).trans he)
      ext a; rw [h‚ÇÅ, Function.comp_apply, curry_apply]
      exact (congr_fun (cov.liftHomotopy_lifts F f‚ÇÄ' _) (1, a)).trans (F.apply_one a)
    prop' := rel }

/-- Two continuous maps from a preconnected space to the total space of a covering map
  are homotopic relative to a set `S` if and only if their compositions with the covering map
  are homotopic relative to `S`, assuming that they agree at a point in `S`. -/
theorem homotopicRel_iff_comp [PreconnectedSpace A] {f‚ÇÄ f‚ÇÅ : C(A, E)} {S : Set A}
    (he : ‚àÉ a ‚àà S, f‚ÇÄ a = f‚ÇÅ a) : f‚ÇÄ.HomotopicRel f‚ÇÅ S ‚Üî
      (ContinuousMap.comp ‚ü®p, cov.continuous‚ü© f‚ÇÄ).HomotopicRel (.comp ‚ü®p, cov.continuous‚ü© f‚ÇÅ) S :=
  ‚ü®fun ‚ü®F‚ü© ‚Ü¶ ‚ü®F.compContinuousMap _‚ü©, fun ‚ü®F‚ü© ‚Ü¶ ‚ü®cov.liftHomotopyRel F he rfl rfl‚ü©‚ü©

/-- Lifting two paths that are homotopic relative to {0,1}
  starting from the same point also ends up in the same point. -/
theorem liftPath_apply_one_eq_of_homotopicRel {Œ≥‚ÇÄ Œ≥‚ÇÅ : C(I, X)}
    (h : Œ≥‚ÇÄ.HomotopicRel Œ≥‚ÇÅ {0,1}) (e : E) (h‚ÇÄ : Œ≥‚ÇÄ 0 = p e) (h‚ÇÅ : Œ≥‚ÇÅ 0 = p e) :
    cov.liftPath Œ≥‚ÇÄ e h‚ÇÄ 1 = cov.liftPath Œ≥‚ÇÅ e h‚ÇÅ 1 := by
  obtain ‚ü®H‚ü© := h
  have := cov.liftHomotopyRel (f‚ÇÄ' := cov.liftPath Œ≥‚ÇÄ e h‚ÇÄ) (f‚ÇÅ' := cov.liftPath Œ≥‚ÇÅ e h‚ÇÅ) H
    ‚ü®0, .inl rfl, by simp_rw [liftPath_zero]‚ü© (liftPath_lifts ..) (liftPath_lifts ..)
  rw [‚Üê this.eq_fst 0 (.inr rfl), ‚Üê this.eq_snd 0 (.inr rfl)]

/-- A covering map induces an injection on all Hom-sets of the fundamental groupoid,
  in particular on the fundamental group. -/
lemma injective_path_homotopic_mapFn (e‚ÇÄ e‚ÇÅ : E) :
    Function.Injective fun Œ≥ : Path.Homotopic.Quotient e‚ÇÄ e‚ÇÅ ‚Ü¶ Œ≥.mapFn ‚ü®p, cov.continuous‚ü© := by
  refine Quotient.ind‚ÇÇ fun Œ≥‚ÇÄ Œ≥‚ÇÅ ‚Ü¶ ?_
  dsimp only
  simp_rw [‚Üê Path.Homotopic.map_lift]
  iterate 2 rw [Quotient.eq]
  exact (cov.homotopicRel_iff_comp ‚ü®0, .inl rfl, Œ≥‚ÇÄ.source.trans Œ≥‚ÇÅ.source.symm‚ü©).mpr

/-- A map `f` from a simply-connected, locally path-connected space `A` to another space `X` lifts
  uniquely through a covering map `p : E ‚Üí X`, after specifying any lift `e‚ÇÄ : E` of any point
  `a‚ÇÄ : A`. -/
theorem existsUnique_continuousMap_lifts [SimplyConnectedSpace A] [LocPathConnectedSpace A]
    (f : C(A, X)) (a‚ÇÄ : A) (e‚ÇÄ : E) (he : p e‚ÇÄ = f a‚ÇÄ) :
    ‚àÉ! F : C(A, E), F a‚ÇÄ = e‚ÇÄ ‚àß p ‚àò F = f := by
  refine cov.isLocalHomeomorph.existsUnique_continuousMap_lifts f a‚ÇÄ e‚ÇÄ he (fun Œ≥ Œ≥_0 ‚Ü¶ ?_)
    fun Œ≥ Œ≥' Œì Œì' Œ≥_0 Œ≥'_0 Œì_0 Œì'_0 Œì_lifts Œì'_lifts Œ≥Œ≥'1 ‚Ü¶ ?_
  ¬∑ simpa [and_comm] using cov.exists_path_lifts (f.comp Œ≥) e‚ÇÄ (by simp [Œ≥_0, he])
  let pŒ≥ : Path a‚ÇÄ (Œ≥ 1) := ‚ü®Œ≥, Œ≥_0, rfl‚ü©
  let pŒ≥' : Path a‚ÇÄ (Œ≥ 1) := ‚ü®Œ≥', Œ≥'_0, Œ≥Œ≥'1.symm‚ü©
  convert cov.liftPath_apply_one_eq_of_homotopicRel (ContinuousMap.HomotopicRel.comp_continuousMap
    (SimplyConnectedSpace.paths_homotopic pŒ≥ pŒ≥') f) e‚ÇÄ (by simp [he]) (by simp [he]) <;>
    rw [eq_liftPath_iff']
  exacts [‚ü®Œì_lifts, Œì_0‚ü©, ‚ü®Œì'_lifts, Œì'_0‚ü©]

end homotopy_lifting

end IsCoveringMap
