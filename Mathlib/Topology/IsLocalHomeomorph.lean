/-
Copyright (c) 2021 Thomas Browning. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Thomas Browning
-/
import Mathlib.Topology.PartialHomeomorph
import Mathlib.Topology.SeparatedMap

/-!
# Local homeomorphisms

This file defines local homeomorphisms.

## Main definitions

For a function `f : X ‚Üí Y ` between topological spaces, we say
* `IsLocalHomeomorphOn f s` if `f` is a local homeomorphism around each point of `s`: for each
  `x : X`, the restriction of `f` to some open neighborhood `U` of `x` gives a homeomorphism
  between `U` and an open subset of `Y`.
* `IsLocalHomeomorph f`: `f` is a local homeomorphism, i.e. it's a local homeomorphism on `univ`.

Note that `IsLocalHomeomorph` is a global condition. This is in contrast to
`PartialHomeomorph`, which is a homeomorphism between specific open subsets.

## Main results
* local homeomorphisms are locally injective open maps
* more!

-/


open Topology

variable {X Y Z : Type*} [TopologicalSpace X] [TopologicalSpace Y] [TopologicalSpace Z] (g : Y ‚Üí Z)
  (f : X ‚Üí Y) (s : Set X) (t : Set Y)

/-- A function `f : X ‚Üí Y` satisfies `IsLocalHomeomorphOn f s` if each `x ‚àà s` is contained in
the source of some `e : PartialHomeomorph X Y` with `f = e`. -/
def IsLocalHomeomorphOn :=
  ‚àÄ x ‚àà s, ‚àÉ e : PartialHomeomorph X Y, x ‚àà e.source ‚àß f = e

/-- A `PartialHomeomorph` is a local homeomorphism on its source. -/
lemma PartialHomeomorph.isLocalHomeomorphOn (e : PartialHomeomorph X Y) :
    IsLocalHomeomorphOn e e.source :=
  fun _ hx ‚Ü¶ ‚ü®e, hx, rfl‚ü©

theorem isLocalHomeomorphOn_iff_isOpenEmbedding_restrict {f : X ‚Üí Y} :
    IsLocalHomeomorphOn f s ‚Üî ‚àÄ x ‚àà s, ‚àÉ U ‚àà ùìù x, IsOpenEmbedding (U.restrict f) := by
  refine ‚ü®fun h x hx ‚Ü¶ ?_, fun h x hx ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®e, hxe, rfl‚ü© := h x hx
    exact ‚ü®e.source, e.open_source.mem_nhds hxe, e.isOpenEmbedding_restrict‚ü©
  ¬∑ obtain ‚ü®U, hU, emb‚ü© := h x hx
    have : IsOpenEmbedding ((interior U).restrict f) := by
      refine emb.comp ‚ü®.inclusion interior_subset, ?_‚ü©
      rw [Set.range_inclusion]; exact isOpen_induced isOpen_interior
    obtain ‚ü®cont, inj, openMap‚ü© := isOpenEmbedding_iff_continuous_injective_isOpenMap.mp this
    haveI : Nonempty X := ‚ü®x‚ü©
    exact ‚ü®PartialHomeomorph.ofContinuousOpenRestrict
      (Set.injOn_iff_injective.mpr inj).toPartialEquiv
      (continuousOn_iff_continuous_restrict.mpr cont) openMap isOpen_interior,
      mem_interior_iff_mem_nhds.mpr hU, rfl‚ü©

namespace IsLocalHomeomorphOn

variable {f s}

theorem discreteTopology_of_image (h : IsLocalHomeomorphOn f s)
    [DiscreteTopology (f '' s)] : DiscreteTopology s :=
  singletons_open_iff_discrete.mp fun x ‚Ü¶ by
    obtain ‚ü®e, hx, rfl‚ü© := h x x.2
    have ‚ü®U, hU, eq‚ü© := isOpen_discrete {(‚ü®_, _, x.2, rfl‚ü© : e '' s)}
    refine ‚ü®e.source ‚à© e ‚Åª¬π' U, e.continuousOn_toFun.isOpen_inter_preimage e.open_source hU,
      subset_antisymm (fun x' mem ‚Ü¶ Subtype.ext <| e.injOn mem.1 hx ?_) ?_‚ü©
    ¬∑ exact Subtype.ext_iff.mp (eq.subset (a := ‚ü®_, x', x'.2, rfl‚ü©) mem.2)
    ¬∑ rintro x rfl; exact ‚ü®hx, eq.superset rfl‚ü©

theorem discreteTopology_image_iff (h : IsLocalHomeomorphOn f s) (hs : IsOpen s) :
    DiscreteTopology (f '' s) ‚Üî DiscreteTopology s := by
  refine ‚ü®fun _ ‚Ü¶ h.discreteTopology_of_image, ?_‚ü©
  simp_rw [‚Üê singletons_open_iff_discrete]
  rintro hX ‚ü®_, x, hx, rfl‚ü©
  obtain ‚ü®e, hxe, rfl‚ü© := h x hx
  refine ‚ü®e '' {x}, e.isOpen_image_of_subset_source ?_ (Set.singleton_subset_iff.mpr hxe), ?_‚ü©
  ¬∑ simpa using hs.isOpenMap_subtype_val _ (hX ‚ü®x, hx‚ü©)
  ¬∑ ext; simp [Subtype.ext_iff]

variable (f s) in
/-- Proves that `f` satisfies `IsLocalHomeomorphOn f s`. The condition `h` is weaker than the
definition of `IsLocalHomeomorphOn f s`, since it only requires `e : PartialHomeomorph X Y` to
agree with `f` on its source `e.source`, as opposed to on the whole space `X`. -/
theorem mk (h : ‚àÄ x ‚àà s, ‚àÉ e : PartialHomeomorph X Y, x ‚àà e.source ‚àß Set.EqOn f e e.source) :
    IsLocalHomeomorphOn f s := by
  intro x hx
  obtain ‚ü®e, hx, he‚ü© := h x hx
  exact
    ‚ü®{ e with
        toFun := f
        map_source' := fun _x hx ‚Ü¶ by rw [he hx]; exact e.map_source' hx
        left_inv' := fun _x hx ‚Ü¶ by rw [he hx]; exact e.left_inv' hx
        right_inv' := fun _y hy ‚Ü¶ by rw [he (e.map_target' hy)]; exact e.right_inv' hy
        continuousOn_toFun := (continuousOn_congr he).mpr e.continuousOn_toFun },
      hx, rfl‚ü©

@[deprecated (since := "2025-07-04")]
alias PartialHomeomorph.isLocalHomeomorphOn := _root_.PartialHomeomorph.isLocalHomeomorphOn

variable {g t}

theorem mono {t : Set X} (hf : IsLocalHomeomorphOn f t) (hst : s ‚äÜ t) : IsLocalHomeomorphOn f s :=
  fun x hx ‚Ü¶ hf x (hst hx)

theorem of_comp_left (hgf : IsLocalHomeomorphOn (g ‚àò f) s) (hg : IsLocalHomeomorphOn g (f '' s))
    (cont : ‚àÄ x ‚àà s, ContinuousAt f x) : IsLocalHomeomorphOn f s := mk f s fun x hx ‚Ü¶ by
  obtain ‚ü®g, hxg, rfl‚ü© := hg (f x) ‚ü®x, hx, rfl‚ü©
  obtain ‚ü®gf, hgf, he‚ü© := hgf x hx
  refine ‚ü®(gf.restr <| f ‚Åª¬π' g.source).trans g.symm, ‚ü®‚ü®hgf, mem_interior_iff_mem_nhds.mpr
    ((cont x hx).preimage_mem_nhds <| g.open_source.mem_nhds hxg)‚ü©, he ‚ñ∏ g.map_source hxg‚ü©,
    fun y hy ‚Ü¶ ?_‚ü©
  change f y = g.symm (gf y)
  have : f y ‚àà g.source := by apply interior_subset hy.1.2
  rw [‚Üê he, g.eq_symm_apply this (by apply g.map_source this), Function.comp_apply]

theorem of_comp_right (hgf : IsLocalHomeomorphOn (g ‚àò f) s) (hf : IsLocalHomeomorphOn f s) :
    IsLocalHomeomorphOn g (f '' s) := mk g _ <| by
  rintro _ ‚ü®x, hx, rfl‚ü©
  obtain ‚ü®f, hxf, rfl‚ü© := hf x hx
  obtain ‚ü®gf, hgf, he‚ü© := hgf x hx
  refine ‚ü®f.symm.trans gf, ‚ü®f.map_source hxf, ?_‚ü©, fun y hy ‚Ü¶ ?_‚ü©
  ¬∑ apply (f.left_inv hxf).symm ‚ñ∏ hgf
  ¬∑ change g y = gf (f.symm y)
    rw [‚Üê he, Function.comp_apply, f.right_inv hy.1]

theorem map_nhds_eq (hf : IsLocalHomeomorphOn f s) {x : X} (hx : x ‚àà s) : (ùìù x).map f = ùìù (f x) :=
  let ‚ü®e, hx, he‚ü© := hf x hx
  he.symm ‚ñ∏ e.map_nhds_eq hx

protected theorem continuousAt (hf : IsLocalHomeomorphOn f s) {x : X} (hx : x ‚àà s) :
    ContinuousAt f x :=
  (hf.map_nhds_eq hx).le

protected theorem continuousOn (hf : IsLocalHomeomorphOn f s) : ContinuousOn f s :=
  continuousOn_of_forall_continuousAt fun _x ‚Ü¶ hf.continuousAt

protected theorem comp (hg : IsLocalHomeomorphOn g t) (hf : IsLocalHomeomorphOn f s)
    (h : Set.MapsTo f s t) : IsLocalHomeomorphOn (g ‚àò f) s := by
  intro x hx
  obtain ‚ü®eg, hxg, rfl‚ü© := hg (f x) (h hx)
  obtain ‚ü®ef, hxf, rfl‚ü© := hf x hx
  exact ‚ü®ef.trans eg, ‚ü®hxf, hxg‚ü©, rfl‚ü©

end IsLocalHomeomorphOn

/-- A function `f : X ‚Üí Y` satisfies `IsLocalHomeomorph f` if each `x : x` is contained in
  the source of some `e : PartialHomeomorph X Y` with `f = e`. -/
def IsLocalHomeomorph :=
  ‚àÄ x : X, ‚àÉ e : PartialHomeomorph X Y, x ‚àà e.source ‚àß f = e

/-- A homeomorphism is a local homeomorphism. -/
theorem Homeomorph.isLocalHomeomorph (f : X ‚âÉ‚Çú Y) : IsLocalHomeomorph f :=
  fun _ ‚Ü¶ ‚ü®f.toPartialHomeomorph, trivial, rfl‚ü©

variable {f s}

theorem isLocalHomeomorph_iff_isLocalHomeomorphOn_univ :
    IsLocalHomeomorph f ‚Üî IsLocalHomeomorphOn f Set.univ :=
  ‚ü®fun h x _ ‚Ü¶ h x, fun h x ‚Ü¶ h x trivial‚ü©

protected theorem IsLocalHomeomorph.isLocalHomeomorphOn (hf : IsLocalHomeomorph f) :
    IsLocalHomeomorphOn f s := fun x _ ‚Ü¶ hf x

theorem isLocalHomeomorph_iff_isOpenEmbedding_restrict {f : X ‚Üí Y} :
    IsLocalHomeomorph f ‚Üî ‚àÄ x : X, ‚àÉ U ‚àà ùìù x, IsOpenEmbedding (U.restrict f) := by
  simp_rw [isLocalHomeomorph_iff_isLocalHomeomorphOn_univ,
    isLocalHomeomorphOn_iff_isOpenEmbedding_restrict, imp_iff_right (Set.mem_univ _)]

theorem Topology.IsOpenEmbedding.isLocalHomeomorph (hf : IsOpenEmbedding f) : IsLocalHomeomorph f :=
  isLocalHomeomorph_iff_isOpenEmbedding_restrict.mpr fun _ ‚Ü¶
    ‚ü®_, Filter.univ_mem, hf.comp (Homeomorph.Set.univ X).isOpenEmbedding‚ü©

namespace IsLocalHomeomorph

/-- A space that admits a local homeomorphism to a discrete space is itself discrete. -/
theorem comap_discreteTopology (h : IsLocalHomeomorph f)
    [DiscreteTopology Y] : DiscreteTopology X :=
  (Homeomorph.Set.univ X).discreteTopology_iff.mp h.isLocalHomeomorphOn.discreteTopology_of_image

theorem discreteTopology_range_iff (h : IsLocalHomeomorph f) :
    DiscreteTopology (Set.range f) ‚Üî DiscreteTopology X := by
  rw [‚Üê Set.image_univ, ‚Üê (Homeomorph.Set.univ X).discreteTopology_iff]
  exact h.isLocalHomeomorphOn.discreteTopology_image_iff isOpen_univ

/-- If there is a surjective local homeomorphism between two spaces and one of them is discrete,
then both spaces are discrete. -/
theorem discreteTopology_iff_of_surjective (h : IsLocalHomeomorph f) (hs : Function.Surjective f) :
    DiscreteTopology X ‚Üî DiscreteTopology Y := by
  rw [‚Üê (Homeomorph.Set.univ Y).discreteTopology_iff, ‚Üê hs.range_eq, h.discreteTopology_range_iff]

variable (f)

/-- Proves that `f` satisfies `IsLocalHomeomorph f`. The condition `h` is weaker than the
definition of `IsLocalHomeomorph f`, since it only requires `e : PartialHomeomorph X Y` to
agree with `f` on its source `e.source`, as opposed to on the whole space `X`. -/
theorem mk (h : ‚àÄ x : X, ‚àÉ e : PartialHomeomorph X Y, x ‚àà e.source ‚àß Set.EqOn f e e.source) :
    IsLocalHomeomorph f :=
  isLocalHomeomorph_iff_isLocalHomeomorphOn_univ.mpr
    (IsLocalHomeomorphOn.mk f Set.univ fun x _hx ‚Ü¶ h x)

@[deprecated (since := "2025-07-04")]
alias Homeomorph.isLocalHomeomorph := _root_.Homeomorph.isLocalHomeomorph

variable {g f}

lemma isLocallyInjective (hf : IsLocalHomeomorph f) : IsLocallyInjective f :=
  fun x ‚Ü¶ by obtain ‚ü®f, hx, rfl‚ü© := hf x; exact ‚ü®f.source, f.open_source, hx, f.injOn‚ü©

theorem of_comp (hgf : IsLocalHomeomorph (g ‚àò f)) (hg : IsLocalHomeomorph g)
    (cont : Continuous f) : IsLocalHomeomorph f :=
  isLocalHomeomorph_iff_isLocalHomeomorphOn_univ.mpr <|
    hgf.isLocalHomeomorphOn.of_comp_left hg.isLocalHomeomorphOn fun _ _ ‚Ü¶ cont.continuousAt

theorem map_nhds_eq (hf : IsLocalHomeomorph f) (x : X) : (ùìù x).map f = ùìù (f x) :=
  hf.isLocalHomeomorphOn.map_nhds_eq (Set.mem_univ x)

/-- A local homeomorphism is continuous. -/
protected theorem continuous (hf : IsLocalHomeomorph f) : Continuous f :=
  continuousOn_univ.mp hf.isLocalHomeomorphOn.continuousOn

/-- A local homeomorphism is an open map. -/
protected theorem isOpenMap (hf : IsLocalHomeomorph f) : IsOpenMap f :=
  IsOpenMap.of_nhds_le fun x ‚Ü¶ ge_of_eq (hf.map_nhds_eq x)

/-- The composition of local homeomorphisms is a local homeomorphism. -/
protected theorem comp (hg : IsLocalHomeomorph g) (hf : IsLocalHomeomorph f) :
    IsLocalHomeomorph (g ‚àò f) :=
  isLocalHomeomorph_iff_isLocalHomeomorphOn_univ.mpr
    (hg.isLocalHomeomorphOn.comp hf.isLocalHomeomorphOn (Set.univ.mapsTo_univ f))

/-- An injective local homeomorphism is an open embedding. -/
theorem isOpenEmbedding_of_injective (hf : IsLocalHomeomorph f) (hi : f.Injective) :
    IsOpenEmbedding f :=
  .of_continuous_injective_isOpenMap hf.continuous hi hf.isOpenMap

/-- A bijective local homeomorphism is a homeomorphism. -/
noncomputable def toHomeomorph_of_bijective (hf : IsLocalHomeomorph f) (hb : f.Bijective) :
    X ‚âÉ‚Çú Y :=
  (Equiv.ofBijective f hb).toHomeomorphOfContinuousOpen hf.continuous hf.isOpenMap

/-- Continuous local sections of a local homeomorphism are open embeddings. -/
theorem isOpenEmbedding_of_comp (hf : IsLocalHomeomorph g) (hgf : IsOpenEmbedding (g ‚àò f))
    (cont : Continuous f) : IsOpenEmbedding f :=
  (hgf.isLocalHomeomorph.of_comp hf cont).isOpenEmbedding_of_injective hgf.injective.of_comp

variable {t} in
theorem isOpenEmbedding_section (hf : IsLocalHomeomorph f) (ht : IsOpen t) {sec : t ‚Üí X}
    (hsec : f ‚àò sec = (‚Üë)) (cont : Continuous sec) : IsOpenEmbedding sec :=
  hf.isOpenEmbedding_of_comp (hsec ‚ñ∏ ht.isOpenEmbedding_subtypeVal) cont

variable (s) in
theorem isOpen_injOn_tfae (hf : IsLocalHomeomorph f) : List.TFAE
    [IsOpen s ‚àß s.InjOn f,
      IsOpenEmbedding (s.restrict f),
      IsOpen (f '' s) ‚àß ‚àÉ h : s.InjOn f, Continuous (Equiv.ofInjective _ h.injective).symm,
      IsOpen (f '' s) ‚àß ‚àÉ sec : C(f '' s, X), f ‚àò sec = (‚Üë) ‚àß Set.range sec = s,
      ‚àÉ U : Set Y, IsOpen U ‚àß ‚àÉ sec : C(U, X), f ‚àò sec = (‚Üë) ‚àß Set.range sec = s] := by
  tfae_have 1 ‚Üí 2 := fun h ‚Ü¶ isOpenEmbedding_iff_continuous_injective_isOpenMap.mpr ‚ü®hf.continuous
    |>.comp continuous_subtype_val, h.2.injective, hf.isOpenMap.comp h.1.isOpenMap_subtype_val‚ü©
  tfae_have 2 ‚Üí 3 := fun h ‚Ü¶ ‚ü®Set.range_restrict .. ‚ñ∏ h.isOpen_range,
    Set.injOn_iff_injective.mpr h.injective, h.toHomeomorph.symm.continuous‚ü©
  tfae_have 3 ‚Üí 4 := fun h ‚Ü¶ ‚ü®h.1, by
    refine Set.range_restrict .. ‚ñ∏ ‚ü®‚ü®_, continuous_subtype_val.comp h.2.2‚ü©, ?_‚ü©
    simp_rw [ContinuousMap.coe_mk, ‚Üê Function.comp_assoc]
    exact ‚ü®(Equiv.comp_symm_eq ..).mpr rfl, by simp‚ü©‚ü©
  tfae_have 4 ‚Üí 5 := fun h ‚Ü¶ ‚ü®_, h‚ü©
  tfae_have 5 ‚Üí 1 := by
    rintro ‚ü®U, hU, sec, hsec, rfl‚ü©
    exact ‚ü®(hf.isOpenEmbedding_section hU hsec sec.continuous).isOpen_range,
      Set.injOn_range_subtype_section hsec‚ü©
  tfae_finish

theorem isOpen_range_section_iff (hf : IsLocalHomeomorph f) {sec : t ‚Üí X} (hsec : f ‚àò sec = (‚Üë)) :
    IsOpen (Set.range sec) ‚Üî IsOpen t ‚àß Continuous sec := by
  have : f '' Set.range sec = t := by rw [‚Üê Set.range_comp, hsec, Subtype.range_val]
  convert ‚Üê (hf.isOpen_injOn_tfae (Set.range sec)).out 0 3
  ¬∑ exact and_iff_left (Set.injOn_range_subtype_section hsec)
  refine this.symm ‚ñ∏ ‚ü®fun ‚ü®‚ü®s, _‚ü©, hfs, eq‚ü© ‚Ü¶ ?_, fun h ‚Ü¶ ‚ü®‚ü®_, h‚ü©, hsec, rfl‚ü©‚ü©
  rwa [‚Üê Set.subtype_section_ext hfs hsec eq]

theorem isOpenEmbedding_restrict (hf : IsLocalHomeomorph f) (hs : IsOpen s) (hsf : s.InjOn f) :
    IsOpenEmbedding (s.restrict f) :=
  isOpenEmbedding_iff_continuous_injective_isOpenMap.mpr ‚ü®hf.continuous.comp continuous_subtype_val,
    hsf.injective, hf.isOpenMap.comp hs.isOpenMap_subtype_val‚ü©

theorem exists_section (hf : IsLocalHomeomorph f) (x : X) :
    ‚àÉ U : Set Y, IsOpen U ‚àß ‚àÉ s : C(U, X), f ‚àò s = (‚Üë) ‚àß ‚àÉ h : f x ‚àà U, s ‚ü®_, h‚ü© = x := by
  have ‚ü®V, hxV, hfV‚ü© := isLocalHomeomorph_iff_isOpenEmbedding_restrict.mp hf x
  obtain ‚ü®U, hU, s, hs, rfl‚ü© := ((hf.isOpen_injOn_tfae V).out 1 4).mp hfV
  obtain ‚ü®y, rfl‚ü© := mem_of_mem_nhds hxV
  rw [‚Üê f.comp_apply, hs]
  exact ‚ü®U, hU, s, hs, y.2, rfl‚ü©

open TopologicalSpace in
/-- Ranges of continuous local sections of a local homeomorphism form a basis of
the source space. See `isOpen_injOn_tfae` for more characterizations of sets in the basis. -/
theorem isTopologicalBasis (hf : IsLocalHomeomorph f) : IsTopologicalBasis
    {U : Set X | ‚àÉ V : Set Y, IsOpen V ‚àß ‚àÉ s : C(V,X), f ‚àò s = (‚Üë) ‚àß Set.range s = U} := by
  refine isTopologicalBasis_of_isOpen_of_nhds ?_ fun x U hx hU ‚Ü¶ ?_
  ¬∑ rintro _ ‚ü®U, hU, s, hs, rfl‚ü©
    exact (hf.isOpenEmbedding_section hU hs s.continuous).isOpen_range
  ¬∑ have ‚ü®V, hV, hfV‚ü© := isLocalHomeomorph_iff_isOpenEmbedding_restrict.mp hf x
    have := ((hf.isOpen_injOn_tfae (V ‚à© U)).out 1 4).mp <| hfV.comp
      (.inclusion Set.inter_subset_left <| by simpa using hU.preimage continuous_subtype_val)
    exact ‚ü®_, this, ‚ü®mem_of_mem_nhds hV, hx‚ü©, Set.inter_subset_right‚ü©

end IsLocalHomeomorph

theorem isLocalHomeomorph_iff_isLocallyInjective_continuous_isOpenMap :
    IsLocalHomeomorph f ‚Üî IsLocallyInjective f ‚àß Continuous f ‚àß IsOpenMap f where
  mp h := ‚ü®h.isLocallyInjective, h.continuous, h.isOpenMap‚ü©
  mpr h := isLocalHomeomorph_iff_isOpenEmbedding_restrict.mpr fun x ‚Ü¶
    have ‚ü®U, hU, hxU, inj‚ü© := h.1 x
    ‚ü®U, hU.mem_nhds hxU, isOpenEmbedding_iff_continuous_injective_isOpenMap.mpr
      ‚ü®h.2.1.comp continuous_subtype_val, Set.injOn_iff_injective.mp inj, h.2.2.restrict hU‚ü©‚ü©
