/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel, Yury Kudryashov
-/
import Mathlib.Topology.UniformSpace.Basic
import Mathlib.Topology.Separation
import Mathlib.Order.Filter.CountableInter

#align_import topology.G_delta from "leanprover-community/mathlib"@"b9e46fe101fc897fb2e7edaf0bf1f09ea49eb81a"

/-!
# `GŒ¥` sets

In this file we define `GŒ¥` sets and prove their basic properties.

## Main definitions

* `IsGŒ¥`: a set `s` is a `GŒ¥` set if it can be represented as an intersection
  of countably many open sets;

* `residual`: the œÉ-filter of residual sets. A set `s` is called *residual* if it includes a
  countable intersection of dense open sets.

* `IsNowhereDense`: a set is called *nowhere dense* iff its closure has empty interior
* `IsMeagre`: a set `s` is called *meagre* iff its complement is residual

## Main results

We prove that finite or countable intersections of GŒ¥ sets are GŒ¥ sets. We also prove that the
continuity set of a function from a topological space to an (e)metric space is a GŒ¥ set.

- `isClosed_isNowhereDense_iff_compl`: a closed set is nowhere dense iff
its complement is open and dense
- `isMeagre_iff_countable_union_isNowhereDense`: a set is meagre iff it is contained in a countable
union of nowhere dense sets
- subsets of meagre sets are meagre; countable unions of meagre sets are meagre

## Tags

GŒ¥ set, residual set, nowhere dense set, meagre set
-/


noncomputable section

open Topology TopologicalSpace Filter Encodable Set
open scoped Uniformity

variable {X Y Œπ : Type*} {Œπ' : Sort*}

set_option linter.uppercaseLean3 false

section IsGŒ¥

variable [TopologicalSpace X]

/-- A GŒ¥ set is a countable intersection of open sets. -/
def IsGŒ¥ (s : Set X) : Prop :=
  ‚àÉ T : Set (Set X), (‚àÄ t ‚àà T, IsOpen t) ‚àß T.Countable ‚àß s = ‚ãÇ‚ÇÄ T
#align is_GŒ¥ IsGŒ¥

/-- An open set is a GŒ¥ set. -/
theorem IsOpen.isGŒ¥ {s : Set X} (h : IsOpen s) : IsGŒ¥ s :=
  ‚ü®{s}, by simp [h], countable_singleton _, (Set.sInter_singleton _).symm‚ü©
#align is_open.is_GŒ¥ IsOpen.isGŒ¥

@[simp]
protected theorem IsGŒ¥.empty : IsGŒ¥ (‚àÖ : Set X) :=
  isOpen_empty.isGŒ¥
#align is_GŒ¥_empty IsGŒ¥.empty

@[deprecated] alias isGŒ¥_empty := IsGŒ¥.empty -- 2024-02-15

@[simp]
protected theorem IsGŒ¥.univ : IsGŒ¥ (univ : Set X) :=
  isOpen_univ.isGŒ¥
#align is_GŒ¥_univ IsGŒ¥.univ

@[deprecated] alias isGŒ¥_univ := IsGŒ¥.univ -- 2024-02-15

theorem IsGŒ¥.biInter_of_isOpen {I : Set Œπ} (hI : I.Countable) {f : Œπ ‚Üí Set X}
    (hf : ‚àÄ i ‚àà I, IsOpen (f i)) : IsGŒ¥ (‚ãÇ i ‚àà I, f i) :=
  ‚ü®f '' I, by rwa [forall_mem_image], hI.image _, by rw [sInter_image]‚ü©
#align is_GŒ¥_bInter_of_open IsGŒ¥.biInter_of_isOpen

@[deprecated] alias isGŒ¥_biInter_of_isOpen := IsGŒ¥.biInter_of_isOpen -- 2024-02-15

theorem IsGŒ¥.iInter_of_isOpen [Countable Œπ'] {f : Œπ' ‚Üí Set X} (hf : ‚àÄ i, IsOpen (f i)) :
    IsGŒ¥ (‚ãÇ i, f i) :=
  ‚ü®range f, by rwa [forall_mem_range], countable_range _, by rw [sInter_range]‚ü©
#align is_GŒ¥_Inter_of_open IsGŒ¥.iInter_of_isOpen

@[deprecated] alias isGŒ¥_iInter_of_isOpen := IsGŒ¥.iInter_of_isOpen -- 2024-02-15

lemma isGŒ¥_iff_eq_iInter_nat {s : Set X} :
    IsGŒ¥ s ‚Üî ‚àÉ (f : ‚Ñï ‚Üí Set X), (‚àÄ n, IsOpen (f n)) ‚àß s = ‚ãÇ n, f n := by
  refine ‚ü®?_, ?_‚ü©
  ¬∑ rintro ‚ü®T, hT, T_count, rfl‚ü©
    rcases Set.eq_empty_or_nonempty T with rfl|hT
    ¬∑ exact ‚ü®fun _n ‚Ü¶ univ, fun _n ‚Ü¶ isOpen_univ, by simp‚ü©
    ¬∑ obtain ‚ü®f, hf‚ü© : ‚àÉ (f : ‚Ñï ‚Üí Set X), T = range f := Countable.exists_eq_range T_count hT
      exact ‚ü®f, by aesop, by simp [hf]‚ü©
  ¬∑ rintro ‚ü®f, hf, rfl‚ü©
    exact .iInter_of_isOpen hf

alias ‚ü®IsGŒ¥.eq_iInter_nat, _‚ü© := isGŒ¥_iff_eq_iInter_nat

/-- The intersection of an encodable family of GŒ¥ sets is a GŒ¥ set. -/
protected theorem IsGŒ¥.iInter [Countable Œπ'] {s : Œπ' ‚Üí Set X} (hs : ‚àÄ i, IsGŒ¥ (s i)) :
    IsGŒ¥ (‚ãÇ i, s i) := by
  choose T hTo hTc hTs using hs
  obtain rfl : s = fun i => ‚ãÇ‚ÇÄ T i := funext hTs
  refine' ‚ü®‚ãÉ i, T i, _, countable_iUnion hTc, (sInter_iUnion _).symm‚ü©
  simpa [@forall_swap Œπ'] using hTo
#align is_GŒ¥_Inter IsGŒ¥.iInter

@[deprecated] alias isGŒ¥_iInter := IsGŒ¥.iInter

theorem IsGŒ¥.biInter {s : Set Œπ} (hs : s.Countable) {t : ‚àÄ i ‚àà s, Set X}
    (ht : ‚àÄ (i) (hi : i ‚àà s), IsGŒ¥ (t i hi)) : IsGŒ¥ (‚ãÇ i ‚àà s, t i ‚Äπ_‚Ä∫) := by
  rw [biInter_eq_iInter]
  haveI := hs.to_subtype
  exact .iInter fun x => ht x x.2
#align is_GŒ¥_bInter IsGŒ¥.biInter

@[deprecated] alias isGŒ¥_biInter := IsGŒ¥.biInter -- 2024-02-15

/-- A countable intersection of GŒ¥ sets is a GŒ¥ set. -/
theorem IsGŒ¥.sInter {S : Set (Set X)} (h : ‚àÄ s ‚àà S, IsGŒ¥ s) (hS : S.Countable) : IsGŒ¥ (‚ãÇ‚ÇÄ S) := by
  simpa only [sInter_eq_biInter] using IsGŒ¥.biInter hS h
#align is_GŒ¥_sInter IsGŒ¥.sInter

@[deprecated] -- 2024-02-15
alias isGŒ¥_sInter := IsGŒ¥.sInter

theorem IsGŒ¥.inter {s t : Set X} (hs : IsGŒ¥ s) (ht : IsGŒ¥ t) : IsGŒ¥ (s ‚à© t) := by
  rw [inter_eq_iInter]
  exact .iInter (Bool.forall_bool.2 ‚ü®ht, hs‚ü©)
#align is_GŒ¥.inter IsGŒ¥.inter

/-- The union of two GŒ¥ sets is a GŒ¥ set. -/
theorem IsGŒ¥.union {s t : Set X} (hs : IsGŒ¥ s) (ht : IsGŒ¥ t) : IsGŒ¥ (s ‚à™ t) := by
  rcases hs with ‚ü®S, Sopen, Scount, rfl‚ü©
  rcases ht with ‚ü®T, Topen, Tcount, rfl‚ü©
  rw [sInter_union_sInter]
  refine .biInter_of_isOpen (Scount.prod Tcount) ?_
  rintro ‚ü®a, b‚ü© ‚ü®ha, hb‚ü©
  exact (Sopen a ha).union (Topen b hb)
#align is_GŒ¥.union IsGŒ¥.union

/-- The union of finitely many GŒ¥ sets is a GŒ¥ set, `Set.sUnion` version. -/
theorem IsGŒ¥.sUnion {S : Set (Set X)} (hS : S.Finite) (h : ‚àÄ s ‚àà S, IsGŒ¥ s) : IsGŒ¥ (‚ãÉ‚ÇÄ S) := by
  induction S, hS using Set.Finite.dinduction_on with
  | H0 => simp
  | H1 _ _ ih =>
    simp only [ball_insert_iff, sUnion_insert] at *
    exact h.1.union (ih h.2)

/-- The union of finitely many GŒ¥ sets is a GŒ¥ set, bounded indexed union version. -/
theorem IsGŒ¥.biUnion {s : Set Œπ} (hs : s.Finite) {f : Œπ ‚Üí Set X} (h : ‚àÄ i ‚àà s, IsGŒ¥ (f i)) :
    IsGŒ¥ (‚ãÉ i ‚àà s, f i) := by
  rw [‚Üê sUnion_image]
  exact .sUnion (hs.image _) (forall_mem_image.2 h)
#align is_GŒ¥_bUnion IsGŒ¥.biUnion

@[deprecated] -- 2024-02-15
alias isGŒ¥_biUnion := IsGŒ¥.biUnion

/-- The union of finitely many GŒ¥ sets is a GŒ¥ set, bounded indexed union version. -/
theorem IsGŒ¥.iUnion [Finite Œπ'] {f : Œπ' ‚Üí Set X} (h : ‚àÄ i, IsGŒ¥ (f i)) : IsGŒ¥ (‚ãÉ i, f i) :=
  .sUnion (finite_range _) <| forall_mem_range.2 h

theorem IsClosed.isGŒ¥ {X : Type*} [UniformSpace X] [IsCountablyGenerated (ùì§ X)] {s : Set X}
    (hs : IsClosed s) : IsGŒ¥ s := by
  rcases (@uniformity_hasBasis_open X _).exists_antitone_subbasis with ‚ü®U, hUo, hU, -‚ü©
  rw [‚Üê hs.closure_eq, ‚Üê hU.biInter_biUnion_ball]
  refine .biInter (to_countable _) fun n _ => IsOpen.isGŒ¥ ?_
  exact isOpen_biUnion fun x _ => UniformSpace.isOpen_ball _ (hUo _).2
#align is_closed.is_GŒ¥ IsClosed.isGŒ¥

section T1Space

variable [T1Space X]

theorem IsGŒ¥.compl_singleton (x : X) : IsGŒ¥ ({x}·∂ú : Set X) :=
  isOpen_compl_singleton.isGŒ¥
#align is_GŒ¥_compl_singleton IsGŒ¥.compl_singleton

@[deprecated] alias isGŒ¥_compl_singleton := IsGŒ¥.compl_singleton -- 2024-02-15

theorem Set.Countable.isGŒ¥_compl {s : Set X} (hs : s.Countable) : IsGŒ¥ s·∂ú := by
  rw [‚Üê biUnion_of_singleton s, compl_iUnion‚ÇÇ]
  exact .biInter hs fun x _ => .compl_singleton x
#align set.countable.is_GŒ¥_compl Set.Countable.isGŒ¥_compl

theorem Set.Finite.isGŒ¥_compl {s : Set X} (hs : s.Finite) : IsGŒ¥ s·∂ú :=
  hs.countable.isGŒ¥_compl
#align set.finite.is_GŒ¥_compl Set.Finite.isGŒ¥_compl

theorem Set.Subsingleton.isGŒ¥_compl {s : Set X} (hs : s.Subsingleton) : IsGŒ¥ s·∂ú :=
  hs.finite.isGŒ¥_compl
#align set.subsingleton.is_GŒ¥_compl Set.Subsingleton.isGŒ¥_compl

theorem Finset.isGŒ¥_compl (s : Finset X) : IsGŒ¥ (s·∂ú : Set X) :=
  s.finite_toSet.isGŒ¥_compl
#align finset.is_GŒ¥_compl Finset.isGŒ¥_compl

variable [FirstCountableTopology X]

protected theorem IsGŒ¥.singleton (x : X) : IsGŒ¥ ({x} : Set X) := by
  rcases (nhds_basis_opens x).exists_antitone_subbasis with ‚ü®U, hU, h_basis‚ü©
  rw [‚Üê biInter_basis_nhds h_basis.toHasBasis]
  exact .biInter (to_countable _) fun n _ => (hU n).2.isGŒ¥
#align is_GŒ¥_singleton IsGŒ¥.singleton

@[deprecated] alias isGŒ¥_singleton := IsGŒ¥.singleton -- 2024-02-15

theorem Set.Finite.isGŒ¥ {s : Set X} (hs : s.Finite) : IsGŒ¥ s :=
  Finite.induction_on hs .empty fun _ _ ‚Ü¶ .union (.singleton _)
#align set.finite.is_GŒ¥ Set.Finite.isGŒ¥

end T1Space

end IsGŒ¥

section ContinuousAt

variable [TopologicalSpace X]

/-- The set of points where a function is continuous is a GŒ¥ set. -/
theorem IsGŒ¥.setOf_continuousAt [UniformSpace Y] [IsCountablyGenerated (ùì§ Y)] (f : X ‚Üí Y) :
    IsGŒ¥ { x | ContinuousAt f x } := by
  obtain ‚ü®U, _, hU‚ü© := (@uniformity_hasBasis_open_symmetric Y _).exists_antitone_subbasis
  simp only [Uniform.continuousAt_iff_prod, nhds_prod_eq]
  simp only [(nhds_basis_opens _).prod_self.tendsto_iff hU.toHasBasis, forall_prop_of_true,
    setOf_forall, id]
  refine .iInter fun k ‚Ü¶ IsOpen.isGŒ¥ <| isOpen_iff_mem_nhds.2 fun x ‚Ü¶ ?_
  rintro ‚ü®s, ‚ü®hsx, hso‚ü©, hsU‚ü©
  filter_upwards [IsOpen.mem_nhds hso hsx] with _ hy using ‚ü®s, ‚ü®hy, hso‚ü©, hsU‚ü©
#align is_GŒ¥_set_of_continuous_at IsGŒ¥.setOf_continuousAt

@[deprecated] alias isGŒ¥_setOf_continuousAt := IsGŒ¥.setOf_continuousAt -- 2024-02-15

end ContinuousAt

section residual

variable [TopologicalSpace X]

/-- A set `s` is called *residual* if it includes a countable intersection of dense open sets. -/
def residual (X : Type*) [TopologicalSpace X] : Filter X :=
  Filter.countableGenerate { t | IsOpen t ‚àß Dense t }
#align residual residual

instance countableInterFilter_residual : CountableInterFilter (residual X) := by
  rw [residual]; infer_instance
#align countable_Inter_filter_residual countableInterFilter_residual

/-- Dense open sets are residual. -/
theorem residual_of_dense_open {s : Set X} (ho : IsOpen s) (hd : Dense s) : s ‚àà residual X :=
  CountableGenerateSets.basic ‚ü®ho, hd‚ü©
#align residual_of_dense_open residual_of_dense_open

/-- Dense GŒ¥ sets are residual. -/
theorem residual_of_dense_GŒ¥ {s : Set X} (ho : IsGŒ¥ s) (hd : Dense s) : s ‚àà residual X := by
  rcases ho with ‚ü®T, To, Tct, rfl‚ü©
  exact
    (countable_sInter_mem Tct).mpr fun t tT =>
      residual_of_dense_open (To t tT) (hd.mono (sInter_subset_of_mem tT))
#align residual_of_dense_GŒ¥ residual_of_dense_GŒ¥

/-- A set is residual iff it includes a countable intersection of dense open sets. -/
theorem mem_residual_iff {s : Set X} :
    s ‚àà residual X ‚Üî
      ‚àÉ S : Set (Set X), (‚àÄ t ‚àà S, IsOpen t) ‚àß (‚àÄ t ‚àà S, Dense t) ‚àß S.Countable ‚àß ‚ãÇ‚ÇÄ S ‚äÜ s :=
  mem_countableGenerate_iff.trans <| by simp_rw [subset_def, mem_setOf, forall_and, and_assoc]
#align mem_residual_iff mem_residual_iff

end residual

section meagre
open Function TopologicalSpace Set
variable {X : Type*} [TopologicalSpace X]

/-- A set is called **nowhere dense** iff its closure has empty interior. -/
def IsNowhereDense (s : Set X) := interior (closure s) = ‚àÖ

/-- The empty set is nowhere dense. -/
@[simp]
lemma isNowhereDense_empty : IsNowhereDense (‚àÖ : Set X) := by
  rw [IsNowhereDense, closure_empty, interior_empty]

/-- A closed set is nowhere dense iff its interior is empty. -/
lemma IsClosed.isNowhereDense_iff {s : Set X} (hs : IsClosed s) :
    IsNowhereDense s ‚Üî interior s = ‚àÖ := by
  rw [IsNowhereDense, IsClosed.closure_eq hs]

/-- If a set `s` is nowhere dense, so is its closure.-/
protected lemma IsNowhereDense.closure {s : Set X} (hs : IsNowhereDense s) :
    IsNowhereDense (closure s) := by
  rwa [IsNowhereDense, closure_closure]

/-- A nowhere dense set `s` is contained in a closed nowhere dense set (namely, its closure). -/
lemma IsNowhereDense.subset_of_closed_isNowhereDense {s : Set X} (hs : IsNowhereDense s) :
    ‚àÉ t : Set X, s ‚äÜ t ‚àß IsNowhereDense t ‚àß IsClosed t :=
  ‚ü®closure s, subset_closure, ‚ü®hs.closure, isClosed_closure‚ü©‚ü©

/-- A set `s` is closed and nowhere dense iff its complement `s·∂ú` is open and dense. -/
lemma isClosed_isNowhereDense_iff_compl {s : Set X} :
    IsClosed s ‚àß IsNowhereDense s ‚Üî IsOpen s·∂ú ‚àß Dense s·∂ú := by
  rw [and_congr_right IsClosed.isNowhereDense_iff,
    isOpen_compl_iff, interior_eq_empty_iff_dense_compl]

/-- A set is called **meagre** iff its complement is a residual (or comeagre) set. -/
def IsMeagre (s : Set X) := s·∂ú ‚àà residual X

/-- The empty set is meagre. -/
lemma meagre_empty : IsMeagre (‚àÖ : Set X) := by
  rw [IsMeagre, compl_empty]
  exact Filter.univ_mem

/-- Subsets of meagre sets are meagre. -/
lemma IsMeagre.mono {s t : Set X} (hs : IsMeagre s) (hts: t ‚äÜ s) : IsMeagre t :=
  Filter.mem_of_superset hs (compl_subset_compl.mpr hts)

/-- An intersection with a meagre set is meagre. -/
lemma IsMeagre.inter {s t : Set X} (hs : IsMeagre s) : IsMeagre (s ‚à© t) :=
  hs.mono (inter_subset_left s t)

/-- A countable union of meagre sets is meagre. -/
lemma isMeagre_iUnion {s : ‚Ñï ‚Üí Set X} (hs : ‚àÄ n, IsMeagre (s n)) : IsMeagre (‚ãÉ n, s n) := by
  rw [IsMeagre, compl_iUnion]
  exact countable_iInter_mem.mpr hs

/-- A set is meagre iff it is contained in a countable union of nowhere dense sets. -/
lemma isMeagre_iff_countable_union_isNowhereDense {s : Set X} :
    IsMeagre s ‚Üî ‚àÉ S : Set (Set X), (‚àÄ t ‚àà S, IsNowhereDense t) ‚àß S.Countable ‚àß s ‚äÜ ‚ãÉ‚ÇÄ S := by
  rw [IsMeagre, mem_residual_iff, compl_bijective.surjective.image_surjective.exists]
  simp_rw [‚Üê and_assoc, ‚Üê forall_and, forall_mem_image, ‚Üê isClosed_isNowhereDense_iff_compl,
    sInter_image, ‚Üê compl_iUnion‚ÇÇ, compl_subset_compl, ‚Üê sUnion_eq_biUnion, and_assoc]
  refine ‚ü®fun ‚ü®S, hS, hc, hsub‚ü© ‚Ü¶ ‚ü®S, fun s hs ‚Ü¶ (hS hs).2, ?_, hsub‚ü©, ?_‚ü©
  ¬∑ rw [‚Üê compl_compl_image S]; exact hc.image _
  ¬∑ intro ‚ü®S, hS, hc, hsub‚ü©
    use closure '' S
    rw [forall_mem_image]
    exact ‚ü®fun s hs ‚Ü¶ ‚ü®isClosed_closure, (hS s hs).closure‚ü©,
      (hc.image _).image _, hsub.trans (sUnion_mono_subsets fun s ‚Ü¶ subset_closure)‚ü©

end meagre
