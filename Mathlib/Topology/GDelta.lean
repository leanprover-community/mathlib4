/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel, Yury Kudryashov

! This file was ported from Lean 3 source module topology.G_delta
! leanprover-community/mathlib commit b363547b3113d350d053abdf2884e9850a56b205
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathlib.Topology.UniformSpace.Basic
import Mathlib.Topology.Separation

/-!
# `GŒ¥` sets

In this file we define `GŒ¥` sets and prove their basic properties.

## Main definitions

* `IsGŒ¥`: a set `s` is a `GŒ¥` set if it can be represented as an intersection
  of countably many open sets;

* `residual`: the filter of residual sets. A set `s` is called *residual* if it includes a dense
  `GŒ¥` set. In a Baire space (e.g., in a complete (e)metric space), residual sets form a filter.

  For technical reasons, we define `residual` in any topological space but the definition agrees
  with the description above only in Baire spaces.

## Main results

We prove that finite or countable intersections of GŒ¥ sets is a GŒ¥ set. We also prove that the
continuity set of a function from a topological space to an (e)metric space is a GŒ¥ set.

## Tags

GŒ¥ set, residual set
-/


noncomputable section

open Topology TopologicalSpace Filter Encodable Set

variable {Œ± Œ≤ Œ≥ Œπ : Type _}

set_option linter.uppercaseLean3 false

section IsGŒ¥

variable [TopologicalSpace Œ±]

/-- A GŒ¥ set is a countable intersection of open sets. -/
def IsGŒ¥ (s : Set Œ±) : Prop :=
  ‚àÉ T : Set (Set Œ±), (‚àÄ t ‚àà T, IsOpen t) ‚àß T.Countable ‚àß s = ‚ãÇ‚ÇÄ T
#align is_GŒ¥ IsGŒ¥

/-- An open set is a GŒ¥ set. -/
theorem IsOpen.isGŒ¥ {s : Set Œ±} (h : IsOpen s) : IsGŒ¥ s :=
  ‚ü®{s}, by simp [h], countable_singleton _, (Set.inter‚Çõ_singleton _).symm‚ü©
#align is_open.is_GŒ¥ IsOpen.isGŒ¥

@[simp]
theorem isGŒ¥_empty : IsGŒ¥ (‚àÖ : Set Œ±) :=
  isOpen_empty.isGŒ¥
#align is_GŒ¥_empty isGŒ¥_empty

@[simp]
theorem isGŒ¥_univ : IsGŒ¥ (univ : Set Œ±) :=
  isOpen_univ.isGŒ¥
#align is_GŒ¥_univ isGŒ¥_univ

theorem isGŒ¥_binter·µ¢_of_open {I : Set Œπ} (hI : I.Countable) {f : Œπ ‚Üí Set Œ±}
    (hf : ‚àÄ i ‚àà I, IsOpen (f i)) : IsGŒ¥ (‚ãÇ i ‚àà I, f i) :=
  ‚ü®f '' I, by rwa [ball_image_iff], hI.image _, by rw [inter‚Çõ_image]‚ü©
#align is_GŒ¥_bInter_of_open isGŒ¥_binter·µ¢_of_open

-- porting note: TODO: generalize to `Sort _` + `Countable _`
theorem isGŒ¥_inter·µ¢_of_open [Encodable Œπ] {f : Œπ ‚Üí Set Œ±} (hf : ‚àÄ i, IsOpen (f i)) :
    IsGŒ¥ (‚ãÇ i, f i) :=
  ‚ü®range f, by rwa [forall_range_iff], countable_range _, by rw [inter‚Çõ_range]‚ü©
#align is_GŒ¥_Inter_of_open isGŒ¥_inter·µ¢_of_open

-- porting note: TODO: generalize to `Sort _` + `Countable _`
/-- The intersection of an encodable family of GŒ¥ sets is a GŒ¥ set. -/
theorem isGŒ¥_inter·µ¢ [Encodable Œπ] {s : Œπ ‚Üí Set Œ±} (hs : ‚àÄ i, IsGŒ¥ (s i)) : IsGŒ¥ (‚ãÇ i, s i) := by
  choose T hTo hTc hTs using hs
  obtain rfl : s = fun i => ‚ãÇ‚ÇÄ T i := funext hTs
  refine' ‚ü®‚ãÉ i, T i, _, countable_union·µ¢ hTc, (inter‚Çõ_union·µ¢ _).symm‚ü©
  simpa [@forall_swap Œπ] using hTo
#align is_GŒ¥_Inter isGŒ¥_inter·µ¢

theorem isGŒ¥_binter·µ¢ {s : Set Œπ} (hs : s.Countable) {t : ‚àÄ i ‚àà s, Set Œ±}
    (ht : ‚àÄ (i) (hi : i ‚àà s), IsGŒ¥ (t i hi)) : IsGŒ¥ (‚ãÇ i ‚àà s, t i ‚Äπ_‚Ä∫) := by
  rw [binter·µ¢_eq_inter·µ¢]
  haveI := hs.toEncodable
  exact isGŒ¥_inter·µ¢ fun x => ht x x.2
#align is_GŒ¥_bInter isGŒ¥_binter·µ¢

/-- A countable intersection of GŒ¥ sets is a GŒ¥ set. -/
theorem isGŒ¥_inter‚Çõ {S : Set (Set Œ±)} (h : ‚àÄ s ‚àà S, IsGŒ¥ s) (hS : S.Countable) : IsGŒ¥ (‚ãÇ‚ÇÄ S) := by
  simpa only [inter‚Çõ_eq_binter·µ¢] using isGŒ¥_binter·µ¢ hS h
#align is_GŒ¥_sInter isGŒ¥_inter‚Çõ

theorem IsGŒ¥.inter {s t : Set Œ±} (hs : IsGŒ¥ s) (ht : IsGŒ¥ t) : IsGŒ¥ (s ‚à© t) := by
  rw [inter_eq_inter·µ¢]
  exact isGŒ¥_inter·µ¢ (Bool.forall_bool.2 ‚ü®ht, hs‚ü©)
#align is_GŒ¥.inter IsGŒ¥.inter

/-- The union of two GŒ¥ sets is a GŒ¥ set. -/
theorem IsGŒ¥.union {s t : Set Œ±} (hs : IsGŒ¥ s) (ht : IsGŒ¥ t) : IsGŒ¥ (s ‚à™ t) := by
  rcases hs with ‚ü®S, Sopen, Scount, rfl‚ü©
  rcases ht with ‚ü®T, Topen, Tcount, rfl‚ü©
  rw [inter‚Çõ_union_inter‚Çõ]
  apply isGŒ¥_binter·µ¢_of_open (Scount.prod Tcount)
  rintro ‚ü®a, b‚ü© ‚ü®ha, hb‚ü©
  exact (Sopen a ha).union (Topen b hb)
#align is_GŒ¥.union IsGŒ¥.union

-- porting note: TODO: add `union·µ¢` and `union‚Çõ` versions
/-- The union of finitely many GŒ¥ sets is a GŒ¥ set. -/
theorem isGŒ¥_bunion·µ¢ {s : Set Œπ} (hs : s.Finite) {f : Œπ ‚Üí Set Œ±} (h : ‚àÄ i ‚àà s, IsGŒ¥ (f i)) :
    IsGŒ¥ (‚ãÉ i ‚àà s, f i) := by
  refine' Finite.induction_on hs (by simp) _ h
  simp only [ball_insert_iff, bunion·µ¢_insert]
  exact fun _ _ ihs H => H.1.union (ihs H.2)
#align is_GŒ¥_bUnion isGŒ¥_bunion·µ¢

-- Porting note: Did not recognize notation ùì§ Œ±, needed to replace with uniformity Œ±
theorem IsClosed.isGŒ¥ {Œ±} [UniformSpace Œ±] [IsCountablyGenerated (uniformity Œ±)] {s : Set Œ±}
    (hs : IsClosed s) : IsGŒ¥ s := by
  rcases(@uniformity_hasBasis_open Œ± _).exists_antitone_subbasis with ‚ü®U, hUo, hU, -‚ü©
  rw [‚Üê hs.closure_eq, ‚Üê hU.binter·µ¢_bunion·µ¢_ball]
  refine' isGŒ¥_binter·µ¢ (to_countable _) fun n _ => IsOpen.isGŒ¥ _
  exact isOpen_bunion·µ¢ fun x _ => UniformSpace.isOpen_ball _ (hUo _).2
#align is_closed.is_GŒ¥ IsClosed.isGŒ¥

section T1Space

variable [T1Space Œ±]

theorem isGŒ¥_compl_singleton (a : Œ±) : IsGŒ¥ ({a}·∂ú : Set Œ±) :=
  isOpen_compl_singleton.isGŒ¥
#align is_GŒ¥_compl_singleton isGŒ¥_compl_singleton

theorem Set.Countable.isGŒ¥_compl {s : Set Œ±} (hs : s.Countable) : IsGŒ¥ (s·∂ú) := by
  rw [‚Üê bunion·µ¢_of_singleton s, compl_union·µ¢‚ÇÇ]
  exact isGŒ¥_binter·µ¢ hs fun x _ => isGŒ¥_compl_singleton x
#align set.countable.is_GŒ¥_compl Set.Countable.isGŒ¥_compl

theorem Set.Finite.isGŒ¥_compl {s : Set Œ±} (hs : s.Finite) : IsGŒ¥ (s·∂ú) :=
  hs.countable.isGŒ¥_compl
#align set.finite.is_GŒ¥_compl Set.Finite.isGŒ¥_compl

theorem Set.Subsingleton.isGŒ¥_compl {s : Set Œ±} (hs : s.Subsingleton) : IsGŒ¥ (s·∂ú) :=
  hs.finite.isGŒ¥_compl
#align set.subsingleton.is_GŒ¥_compl Set.Subsingleton.isGŒ¥_compl

theorem Finset.isGŒ¥_compl (s : Finset Œ±) : IsGŒ¥ (s·∂ú : Set Œ±) :=
  s.finite_toSet.isGŒ¥_compl
#align finset.is_GŒ¥_compl Finset.isGŒ¥_compl

variable [FirstCountableTopology Œ±]

theorem isGŒ¥_singleton (a : Œ±) : IsGŒ¥ ({a} : Set Œ±) := by
  rcases (nhds_basis_opens a).exists_antitone_subbasis with ‚ü®U, hU, h_basis‚ü©
  rw [‚Üê binter·µ¢_basis_nhds h_basis.toHasBasis]
  exact isGŒ¥_binter·µ¢ (to_countable _) fun n _ => (hU n).2.isGŒ¥
#align is_GŒ¥_singleton isGŒ¥_singleton

theorem Set.Finite.isGŒ¥ {s : Set Œ±} (hs : s.Finite) : IsGŒ¥ s :=
  Finite.induction_on hs isGŒ¥_empty fun _ _ hs => (isGŒ¥_singleton _).union hs
#align set.finite.is_GŒ¥ Set.Finite.isGŒ¥

end T1Space

end IsGŒ¥

section ContinuousAt

variable [TopologicalSpace Œ±]

/-- The set of points where a function is continuous is a GŒ¥ set. -/
theorem isGŒ¥_setOf_continuousAt [UniformSpace Œ≤] [IsCountablyGenerated (uniformity Œ≤)] (f : Œ± ‚Üí Œ≤) :
    IsGŒ¥ { x | ContinuousAt f x } := by
  obtain ‚ü®U, _, hU‚ü© := (@uniformity_hasBasis_open_symmetric Œ≤ _).exists_antitone_subbasis
  simp only [Uniform.continuousAt_iff_prod, nhds_prod_eq]
  simp only [(nhds_basis_opens _).prod_self.tendsto_iff hU.toHasBasis, forall_prop_of_true,
    setOf_forall, id]
  refine' isGŒ¥_inter·µ¢ fun k => IsOpen.isGŒ¥ <| isOpen_iff_mem_nhds.2 fun x => _
  rintro ‚ü®s, ‚ü®hsx, hso‚ü©, hsU‚ü©
  filter_upwards [IsOpen.mem_nhds hso hsx]with _ hy using‚ü®s, ‚ü®hy, hso‚ü©, hsU‚ü©
#align is_GŒ¥_set_of_continuous_at isGŒ¥_setOf_continuousAt

end ContinuousAt

/-- A set `s` is called *residual* if it includes a dense `GŒ¥` set. If `Œ±` is a Baire space
(e.g., a complete metric space), then residual sets form a filter, see `mem_residual`.

For technical reasons we define the filter `residual` in any topological space but in a non-Baire
space it is not useful because it may contain some non-residual sets. -/
def residual (Œ± : Type _) [TopologicalSpace Œ±] : Filter Œ± :=
  ‚®Ö (t) (_ht : IsGŒ¥ t) (_ht' : Dense t), ùìü t
#align residual residual
