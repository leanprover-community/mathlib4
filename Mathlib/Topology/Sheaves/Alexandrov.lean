import Mathlib.Combinatorics.Quiver.ReflQuiver
import Mathlib.Order.CompletePartialOrder
import Mathlib.Topology.Sheaves.SheafCondition.OpensLeCover

noncomputable section

universe v u
open CategoryTheory Limits

variable {X : Type v} [Preorder X] {C : Type u}
  [Category.{v} C] [HasLimits C]

variable (F : X ‚•§ C)

open TopologicalSpace

variable (X)

def alexandrov : TopologicalSpace X where
  IsOpen S := ‚àÄ ‚¶Éx y : X‚¶Ñ, x ‚àà S ‚Üí x ‚â§ y ‚Üí y ‚àà S
  isOpen_univ := fun _ _ _ _ => trivial
  isOpen_inter A B hA hB x y hx h :=
    ‚ü®hA hx.left h, hB hx.right h‚ü©
  isOpen_sUnion S hS x y hx h := by
    obtain ‚ü®T, hT, hx‚ü© := hx
    refine ‚ü®T, hT, hS T hT hx h‚ü©

def Alexandrov : TopCat where
  Œ± := X
  str := alexandrov X

namespace Alexandrov

variable {X}

lemma mem_of_le {U : Opens (Alexandrov X)}
    (x y : X) (h : x ‚â§ y) (hx : x ‚àà U) :
    y ‚àà U :=
  U.2 hx h

def principalOpen (x : X) : Opens (Alexandrov X) :=
  .mk { y | x ‚â§ y } <| fun _ _ h h' => le_trans h h'

lemma principalOpen_le {x y : X} (h : x ‚â§ y) : principalOpen y ‚â§ principalOpen x :=
  fun _ hc => le_trans h hc

lemma mem_principalOpen (x : X) : x ‚àà principalOpen x := le_refl _

@[simp]
lemma principalOpen_le_iff {x : X} (U : Opens (Alexandrov X)) :
    principalOpen x ‚â§ U ‚Üî x ‚àà U := by
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro h
    apply h
    exact mem_principalOpen _
  ¬∑ intro hx y hy
    exact mem_of_le _ _ hy hx

@[simps]
def principals : X ‚•§ (Opens (Alexandrov X))·µí·µñ where
  obj x := .op <| principalOpen x
  map {x y} f := .op <| principalOpen_le f.le |>.hom

lemma exists_le_of_le_sup {Œπ : Type v} {x : X}
    (Us : Œπ ‚Üí Opens (Alexandrov X))
    (h : principalOpen x ‚â§ iSup Us) :
    ‚àÉ i : Œπ, principalOpen x ‚â§ Us i := by
  have : x ‚àà iSup Us := h <| mem_principalOpen x
  simp only [Opens.mem_iSup] at this
  obtain ‚ü®i, hi‚ü© := this
  refine ‚ü®i, ?_‚ü©
  simpa

open TopCat


abbrev ŒπŒπ : Presheaf C (Alexandrov X) :=
  principals.pointwiseRightKanExtension F

def forget (U : Opens (Alexandrov X)) :
    StructuredArrow (.op U) principals ‚•§ X :=
  StructuredArrow.proj (.op U) principals

@[simps]
def forgetiSup {Œπ : Type v} (Us : Œπ ‚Üí Opens (Alexandrov X)) :
    StructuredArrow (.op <| iSup Us) principals ‚•§ (FullSubcategory fun V => ‚àÉ i, V ‚â§ Us i)·µí·µñ where
  obj f := .op <| .mk (principalOpen f.right) <| exists_le_of_le_sup Us f.hom.unop.le
  map e := .op <| LE.le.hom <| principalOpen_le <| e.right.le

variable {F} in
@[simps]
def lowerCone {Œ± : Type v} (Us : Œ± ‚Üí Opens (Alexandrov X))
  (S : Cone ((fullSubcategoryInclusion fun V => ‚àÉ i, V ‚â§ Us i).op ‚ãô ŒπŒπ F)) :
    Cone (forget (iSup Us) ‚ãô F) where
  pt := S.pt
  œÄ := {
    app := fun f =>
      S.œÄ.app ((forgetiSup Us).obj f) ‚â´
      limit.œÄ (StructuredArrow.proj (Opposite.op <| principalOpen f.right) principals ‚ãô F)
        ‚ü®.mk .unit, f.right, ùüô _‚ü©
    naturality := by
      rintro x y e
      simp only [Functor.const_obj_obj, Functor.comp_obj, Functor.const_obj_map, principals_obj,
        Functor.op_obj, fullSubcategoryInclusion.obj, Functor.pointwiseRightKanExtension_obj,
        Category.id_comp, Functor.comp_map, Category.assoc]
      rw [‚Üê S.w ((forgetiSup Us).map e), Category.assoc]
      congr 1
      simp only [forgetiSup_obj, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj,
        Functor.pointwiseRightKanExtension_obj, forgetiSup_map, homOfLE_leOfHom, Functor.comp_map,
        Functor.op_map, Quiver.Hom.unop_op, fullSubcategoryInclusion.map,
        Functor.pointwiseRightKanExtension_map, limit.lift_œÄ]
      let xx : StructuredArrow (Opposite.op (principalOpen x.right)) principals :=
        ‚ü®.mk .unit, x.right, ùüô _‚ü©
      let yy : StructuredArrow (Opposite.op (principalOpen x.right)) principals :=
        ‚ü®.mk .unit, y.right, .op <| LE.le.hom <| principalOpen_le e.right.le‚ü©
      let ee : xx ‚ü∂ yy := { left := ùüô _, right := e.right }
      exact limit.w
        (StructuredArrow.proj (Opposite.op (principalOpen x.right)) principals ‚ãô F) ee |>.symm
  }

open Presheaf Functor SheafCondition
def isLimit (Œ± : Type v) (Us : Œ± ‚Üí Opens (Alexandrov X)) :
    IsLimit (mapCone (ŒπŒπ F) (SheafCondition.opensLeCoverCocone Us).op) where
  lift S := limit.lift _ (lowerCone Us S)
  fac := by
    rintro S ‚ü®V, i, hV‚ü©
    dsimp [forget, opensLeCoverCocone]
    ext ‚ü®_, x, f‚ü©
    simp only [comp_obj, StructuredArrow.proj_obj, Category.assoc, limit.lift_œÄ, lowerCone_pt,
      lowerCone_œÄ_app, const_obj_obj, forgetiSup_obj, StructuredArrow.map_obj_right, op_obj,
      fullSubcategoryInclusion.obj, pointwiseRightKanExtension_obj]
    have e : principalOpen x ‚â§ V := f.unop.le
    let VV : (FullSubcategory fun V => ‚àÉ i, V ‚â§ Us i) := ‚ü®V, i, hV‚ü©
    let xx : (FullSubcategory fun V => ‚àÉ i, V ‚â§ Us i) := ‚ü®principalOpen x, i, le_trans e hV‚ü©
    let ee : xx ‚ü∂ VV := e.hom
    rw [‚Üê S.w ee.op, Category.assoc]
    congr 1
    simp only [comp_obj, op_obj, fullSubcategoryInclusion.obj, pointwiseRightKanExtension_obj,
      Functor.comp_map, op_map, Quiver.Hom.unop_op, fullSubcategoryInclusion.map,
      pointwiseRightKanExtension_map, limit.lift_œÄ, xx, VV]
    congr
  uniq := by
    intro S m hm
    dsimp
    symm
    ext ‚ü®_, x, f‚ü©
    simp only [lowerCone_pt, comp_obj, limit.lift_œÄ, lowerCone_œÄ_app, const_obj_obj, forgetiSup_obj,
      op_obj, fullSubcategoryInclusion.obj, pointwiseRightKanExtension_obj]
    specialize hm ‚ü®principalOpen x, ?_‚ü©
    ¬∑ apply exists_le_of_le_sup
      exact f.unop.le
    ¬∑ rw [‚Üê hm]
      simp only [mapCone_pt, Cocone.op_pt, pointwiseRightKanExtension_obj, principals_obj,
        const_obj_obj, comp_obj, op_obj, fullSubcategoryInclusion.obj, mapCone_œÄ_app, Cocone.op_œÄ,
        NatTrans.op_app, pointwiseRightKanExtension_map, Category.assoc, limit.lift_œÄ]
      congr

theorem is_sheaf_ŒπŒπ : (ŒπŒπ F).IsSheaf := by
  rw [isSheaf_iff_isSheafOpensLeCover]
  intro Œπ Us
  constructor
  apply isLimit

theorem is_sheaf_of_is_Kan_extension
    (P : (Opens (Alexandrov X))·µí·µñ ‚•§ C)
    (Œ∑ : principals ‚ãô P ‚ü∂ F)
    [P.IsRightKanExtension Œ∑] :
    IsSheaf P := by
  let Œ≥ : principals ‚ãô ŒπŒπ F ‚ü∂ F := principals.pointwiseRightKanExtensionCounit F
  let h2 : (ŒπŒπ F).IsRightKanExtension Œ≥ := inferInstance
  have : P ‚âÖ ŒπŒπ F := @rightKanExtensionUnique _ _ _ _ _ _ _ _ _ _ (by assumption) _ _ h2
  rw [isSheaf_iso_iff this]
  exact is_sheaf_ŒπŒπ F

end Alexandrov
