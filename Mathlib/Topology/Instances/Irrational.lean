/-
Copyright (c) 2021 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov
-/
import Mathlib.Data.Real.Irrational
import Mathlib.Data.Rat.Encodable
import Mathlib.Topology.MetricSpace.Baire

#align_import topology.instances.irrational from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# Topology of irrational numbers

In this file we prove the following theorems:

* `isGŒ¥_irrational`, `dense_irrational`, `eventually_residual_irrational`: irrational numbers
  form a dense GŒ¥ set;

* `Irrational.eventually_forall_le_dist_cast_div`,
  `Irrational.eventually_forall_le_dist_cast_div_of_denom_le`;
  `Irrational.eventually_forall_le_dist_cast_rat_of_denom_le`: a sufficiently small neighborhood of
  an irrational number is disjoint with the set of rational numbers with bounded denominator.

We also provide `OrderTopology`, `NoMinOrder`, `NoMaxOrder`, and `DenselyOrdered`
instances for `{x // Irrational x}`.

## Tags

irrational, residual
-/


open Set Filter Metric

open Filter Topology

theorem isGŒ¥_irrational : IsGŒ¥ { x | Irrational x } :=
  (countable_range _).isGŒ¥_compl
set_option linter.uppercaseLean3 false in
#align is_GŒ¥_irrational isGŒ¥_irrational

theorem dense_irrational : Dense { x : ‚Ñù | Irrational x } := by
  refine' Real.isTopologicalBasis_Ioo_rat.dense_iff.2 _
  simp only [gt_iff_lt, Rat.cast_lt, not_lt, ge_iff_le, Rat.cast_le, mem_iUnion, mem_singleton_iff,
    exists_prop, forall_exists_index, and_imp]
  rintro _ a b hlt rfl _
  rw [inter_comm]
  exact exists_irrational_btwn (Rat.cast_lt.2 hlt)
#align dense_irrational dense_irrational

theorem eventually_residual_irrational : ‚àÄ·∂† x in residual ‚Ñù, Irrational x :=
  eventually_residual.2 ‚ü®_, isGŒ¥_irrational, dense_irrational, fun _ => id‚ü©
#align eventually_residual_irrational eventually_residual_irrational

namespace Irrational

variable {x : ‚Ñù}

instance : OrderTopology { x // Irrational x } :=
  induced_orderTopology _ Iff.rfl <| @fun _ _ hlt =>
    let ‚ü®z, hz, hxz, hzy‚ü© := exists_irrational_btwn hlt
    ‚ü®‚ü®z, hz‚ü©, hxz, hzy‚ü©

instance : NoMaxOrder { x // Irrational x } :=
  ‚ü®fun ‚ü®x, hx‚ü© => ‚ü®‚ü®x + (1 : ‚Ñï), hx.add_nat 1‚ü©, by simp‚ü©‚ü©

instance : NoMinOrder { x // Irrational x } :=
  ‚ü®fun ‚ü®x, hx‚ü© => ‚ü®‚ü®x - (1 : ‚Ñï), hx.sub_nat 1‚ü©, by simp‚ü©‚ü©

instance : DenselyOrdered { x // Irrational x } :=
  ‚ü®fun _ _ hlt =>
    let ‚ü®z, hz, hxz, hzy‚ü© := exists_irrational_btwn hlt
    ‚ü®‚ü®z, hz‚ü©, hxz, hzy‚ü©‚ü©

theorem eventually_forall_le_dist_cast_div (hx : Irrational x) (n : ‚Ñï) :
    ‚àÄ·∂† Œµ : ‚Ñù in ùìù 0, ‚àÄ m : ‚Ñ§, Œµ ‚â§ dist x (m / n) := by
  have A : IsClosed (range (fun m => (n : ‚Ñù)‚Åª¬π * m : ‚Ñ§ ‚Üí ‚Ñù)) :=
    ((isClosedMap_smul‚ÇÄ (n‚Åª¬π : ‚Ñù)).comp Int.closedEmbedding_coe_real.isClosedMap).closed_range
  have B : x ‚àâ range (fun m => (n : ‚Ñù)‚Åª¬π * m : ‚Ñ§ ‚Üí ‚Ñù) := by
    rintro ‚ü®m, rfl‚ü©
    simp at hx
  rcases Metric.mem_nhds_iff.1 (A.isOpen_compl.mem_nhds B) with ‚ü®Œµ, Œµ0, hŒµ‚ü©
  refine' (ge_mem_nhds Œµ0).mono fun Œ¥ hŒ¥ m => not_lt.1 fun hlt => _
  rw [dist_comm] at hlt
  refine' hŒµ (ball_subset_ball hŒ¥ hlt) ‚ü®m, _‚ü©
  simp [div_eq_inv_mul]
#align irrational.eventually_forall_le_dist_cast_div Irrational.eventually_forall_le_dist_cast_div

theorem eventually_forall_le_dist_cast_div_of_denom_le (hx : Irrational x) (n : ‚Ñï) :
    ‚àÄ·∂† Œµ : ‚Ñù in ùìù 0, ‚àÄ k ‚â§ n, ‚àÄ (m : ‚Ñ§), Œµ ‚â§ dist x (m / k) :=
  (finite_le_nat n).eventually_all.2 fun k _ => hx.eventually_forall_le_dist_cast_div k
#align irrational.eventually_forall_le_dist_cast_div_of_denom_le Irrational.eventually_forall_le_dist_cast_div_of_denom_le

theorem eventually_forall_le_dist_cast_rat_of_den_le (hx : Irrational x) (n : ‚Ñï) :
    ‚àÄ·∂† Œµ : ‚Ñù in ùìù 0, ‚àÄ r : ‚Ñö, r.den ‚â§ n ‚Üí Œµ ‚â§ dist x r :=
  (hx.eventually_forall_le_dist_cast_div_of_denom_le n).mono fun Œµ H r hr => by
    simpa only [Rat.cast_def] using H r.den hr r.num
#align irrational.eventually_forall_le_dist_cast_rat_of_denom_le Irrational.eventually_forall_le_dist_cast_rat_of_den_le

end Irrational
