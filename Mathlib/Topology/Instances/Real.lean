/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro
-/
import Mathlib.Algebra.Periodic
import Mathlib.Topology.Algebra.UniformMulAction
import Mathlib.Topology.Algebra.Star
import Mathlib.Topology.Algebra.Order.Field
import Mathlib.Topology.Instances.Int

#align_import topology.instances.real from "leanprover-community/mathlib"@"9a59dcb7a2d06bf55da57b9030169219980660cd"

/-!
# Topological properties of ‚Ñù
-/


noncomputable section

open Classical Filter Int Metric Set TopologicalSpace Bornology
open scoped Topology Uniformity Interval

universe u v w

variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

instance : NoncompactSpace ‚Ñù := Int.closedEmbedding_coe_real.noncompactSpace

theorem Real.uniformContinuous_add : UniformContinuous fun p : ‚Ñù √ó ‚Ñù => p.1 + p.2 :=
  Metric.uniformContinuous_iff.2 fun _Œµ Œµ0 =>
    let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_add_continuous_lemma abs Œµ0
    ‚ü®Œ¥, Œ¥0, fun h =>
      let ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := max_lt_iff.1 h
      HŒ¥ h‚ÇÅ h‚ÇÇ‚ü©
#align real.uniform_continuous_add Real.uniformContinuous_add

theorem Real.uniformContinuous_neg : UniformContinuous (@Neg.neg ‚Ñù _) :=
  Metric.uniformContinuous_iff.2 fun Œµ Œµ0 =>
    ‚ü®_, Œµ0, fun h => by rw [dist_comm] at h; simpa only [Real.dist_eq, neg_sub_neg] using h‚ü©
#align real.uniform_continuous_neg Real.uniformContinuous_neg

instance : ContinuousStar ‚Ñù := ‚ü®continuous_id‚ü©

instance : UniformAddGroup ‚Ñù :=
  UniformAddGroup.mk' Real.uniformContinuous_add Real.uniformContinuous_neg

-- short-circuit type class inference
instance : TopologicalAddGroup ‚Ñù := by infer_instance
instance : TopologicalRing ‚Ñù := inferInstance
instance : TopologicalDivisionRing ‚Ñù := inferInstance

instance : ProperSpace ‚Ñù where
  isCompact_closedBall x r := by
    rw [Real.closedBall_eq_Icc]
    apply isCompact_Icc

instance : SecondCountableTopology ‚Ñù := secondCountable_of_proper

theorem Real.isTopologicalBasis_Ioo_rat :
    @IsTopologicalBasis ‚Ñù _ (‚ãÉ (a : ‚Ñö) (b : ‚Ñö) (_ : a < b), {Ioo (a : ‚Ñù) b}) :=
  isTopologicalBasis_of_isOpen_of_nhds (by simp (config := { contextual := true }) [isOpen_Ioo])
    fun a v hav hv =>
    let ‚ü®l, u, ‚ü®hl, hu‚ü©, h‚ü© := mem_nhds_iff_exists_Ioo_subset.mp (IsOpen.mem_nhds hv hav)
    let ‚ü®q, hlq, hqa‚ü© := exists_rat_btwn hl
    let ‚ü®p, hap, hpu‚ü© := exists_rat_btwn hu
    ‚ü®Ioo q p, by
      simp only [mem_iUnion]
      exact ‚ü®q, p, Rat.cast_lt.1 <| hqa.trans hap, rfl‚ü©, ‚ü®hqa, hap‚ü©, fun a' ‚ü®hqa', ha'p‚ü© =>
      h ‚ü®hlq.trans hqa', ha'p.trans hpu‚ü©‚ü©
#align real.is_topological_basis_Ioo_rat Real.isTopologicalBasis_Ioo_rat

@[simp]
theorem Real.cobounded_eq : cobounded ‚Ñù = atBot ‚äî atTop := by
  simp only [‚Üê comap_dist_right_atTop (0 : ‚Ñù), Real.dist_eq, sub_zero, comap_abs_atTop]

@[deprecated] alias Real.cocompact_eq := cocompact_eq_atBot_atTop
#align real.cocompact_eq Real.cocompact_eq

@[deprecated] alias Real.atBot_le_cocompact := atBot_le_cocompact -- deprecated on 2024-02-07
@[deprecated] alias Real.atTop_le_cocompact := atBot_le_cocompact -- deprecated on 2024-02-07

/- TODO(Mario): Prove that these are uniform isomorphisms instead of uniform embeddings
lemma uniform_embedding_add_rat {r : ‚Ñö} : uniform_embedding (fun p : ‚Ñö => p + r) :=
_

lemma uniform_embedding_mul_rat {q : ‚Ñö} (hq : q ‚â† 0) : uniform_embedding ((*) q) :=
_ -/
theorem Real.mem_closure_iff {s : Set ‚Ñù} {x : ‚Ñù} : x ‚àà closure s ‚Üî ‚àÄ Œµ > 0, ‚àÉ y ‚àà s, |y - x| < Œµ :=
  by simp [mem_closure_iff_nhds_basis nhds_basis_ball, Real.dist_eq]
#align real.mem_closure_iff Real.mem_closure_iff

theorem Real.uniformContinuous_inv (s : Set ‚Ñù) {r : ‚Ñù} (r0 : 0 < r) (H : ‚àÄ x ‚àà s, r ‚â§ |x|) :
    UniformContinuous fun p : s => p.1‚Åª¬π :=
  Metric.uniformContinuous_iff.2 fun _Œµ Œµ0 =>
    let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_inv_continuous_lemma abs Œµ0 r0
    ‚ü®Œ¥, Œ¥0, fun {a b} h => HŒ¥ (H _ a.2) (H _ b.2) h‚ü©
#align real.uniform_continuous_inv Real.uniformContinuous_inv

theorem Real.uniformContinuous_abs : UniformContinuous (abs : ‚Ñù ‚Üí ‚Ñù) :=
  Metric.uniformContinuous_iff.2 fun Œµ Œµ0 =>
    ‚ü®Œµ, Œµ0, lt_of_le_of_lt (abs_abs_sub_abs_le_abs_sub _ _)‚ü©
#align real.uniform_continuous_abs Real.uniformContinuous_abs

@[deprecated continuousAt_inv‚ÇÄ]
theorem Real.tendsto_inv {r : ‚Ñù} (r0 : r ‚â† 0) : Tendsto (fun q => q‚Åª¬π) (ùìù r) (ùìù r‚Åª¬π) :=
  continuousAt_inv‚ÇÄ r0
#align real.tendsto_inv Real.tendsto_inv

theorem Real.continuous_inv : Continuous fun a : { r : ‚Ñù // r ‚â† 0 } => a.val‚Åª¬π :=
  continuousOn_inv‚ÇÄ.restrict
#align real.continuous_inv Real.continuous_inv

@[deprecated Continuous.inv‚ÇÄ]
theorem Real.Continuous.inv [TopologicalSpace Œ±] {f : Œ± ‚Üí ‚Ñù} (h : ‚àÄ a, f a ‚â† 0)
    (hf : Continuous f) : Continuous fun a => (f a)‚Åª¬π :=
  hf.inv‚ÇÄ h
#align real.continuous.inv Real.Continuous.inv

theorem Real.uniformContinuous_const_mul {x : ‚Ñù} : UniformContinuous (x * ¬∑) :=
  uniformContinuous_const_smul x
#align real.uniform_continuous_const_mul Real.uniformContinuous_const_mul

theorem Real.uniformContinuous_mul (s : Set (‚Ñù √ó ‚Ñù)) {r‚ÇÅ r‚ÇÇ : ‚Ñù}
    (H : ‚àÄ x ‚àà s, |(x : ‚Ñù √ó ‚Ñù).1| < r‚ÇÅ ‚àß |x.2| < r‚ÇÇ) :
    UniformContinuous fun p : s => p.1.1 * p.1.2 :=
  Metric.uniformContinuous_iff.2 fun _Œµ Œµ0 =>
    let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_mul_continuous_lemma abs Œµ0
    ‚ü®Œ¥, Œ¥0, fun {a b} h =>
      let ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := max_lt_iff.1 h
      HŒ¥ (H _ a.2).1 (H _ b.2).2 h‚ÇÅ h‚ÇÇ‚ü©
#align real.uniform_continuous_mul Real.uniformContinuous_mul

@[deprecated continuous_mul]
protected theorem Real.continuous_mul : Continuous fun p : ‚Ñù √ó ‚Ñù => p.1 * p.2 := continuous_mul
#align real.continuous_mul Real.continuous_mul

-- porting note: moved `TopologicalRing` instance up

instance : CompleteSpace ‚Ñù := by
  apply complete_of_cauchySeq_tendsto
  intro u hu
  let c : CauSeq ‚Ñù abs := ‚ü®u, Metric.cauchySeq_iff'.1 hu‚ü©
  refine' ‚ü®c.lim, fun s h => _‚ü©
  rcases Metric.mem_nhds_iff.1 h with ‚ü®Œµ, Œµ0, hŒµ‚ü©
  have := c.equiv_lim Œµ Œµ0
  simp only [mem_map, mem_atTop_sets, mem_setOf_eq]
  refine' this.imp fun N hN n hn => hŒµ (hN n hn)

theorem Real.totallyBounded_ball (x Œµ : ‚Ñù) : TotallyBounded (ball x Œµ) := by
  rw [Real.ball_eq_Ioo]; apply totallyBounded_Ioo
#align real.totally_bounded_ball Real.totallyBounded_ball

section

theorem closure_of_rat_image_lt {q : ‚Ñö} :
    closure (((‚Üë) : ‚Ñö ‚Üí ‚Ñù) '' { x | q < x }) = { r | ‚Üëq ‚â§ r } :=
  Subset.antisymm
    ((isClosed_ge' _).closure_subset_iff.2
      (image_subset_iff.2 fun p h => le_of_lt <| (@Rat.cast_lt ‚Ñù _ _ _).2 h))
    fun x hx => mem_closure_iff_nhds.2 fun t ht =>
      let ‚ü®Œµ, Œµ0, hŒµ‚ü© := Metric.mem_nhds_iff.1 ht
      let ‚ü®p, h‚ÇÅ, h‚ÇÇ‚ü© := exists_rat_btwn ((lt_add_iff_pos_right x).2 Œµ0)
      ‚ü®p, hŒµ <| by rwa [mem_ball, Real.dist_eq, abs_of_pos (sub_pos.2 h‚ÇÅ), sub_lt_iff_lt_add'],
        mem_image_of_mem _ <| Rat.cast_lt.1 <| lt_of_le_of_lt hx.out h‚ÇÅ‚ü©
#align closure_of_rat_image_lt closure_of_rat_image_lt

/- TODO(Mario): Put these back only if needed later
lemma closure_of_rat_image_le_eq {q : ‚Ñö} : closure ((coe : ‚Ñö ‚Üí ‚Ñù) '' {x | q ‚â§ x}) = {r | ‚Üëq ‚â§ r} :=
  _

lemma closure_of_rat_image_le_le_eq {a b : ‚Ñö} (hab : a ‚â§ b) :
    closure (of_rat '' {q:‚Ñö | a ‚â§ q ‚àß q ‚â§ b}) = {r:‚Ñù | of_rat a ‚â§ r ‚àß r ‚â§ of_rat b} :=
  _
-/
theorem Real.isBounded_iff_bddBelow_bddAbove {s : Set ‚Ñù} : IsBounded s ‚Üî BddBelow s ‚àß BddAbove s :=
  ‚ü®fun bdd ‚Ü¶ by
    obtain ‚ü®r, hr‚ü© : ‚àÉ r : ‚Ñù, s ‚äÜ Icc (-r) r := by
      simpa [Real.closedBall_eq_Icc] using bdd.subset_closedBall 0
    exact ‚ü®bddBelow_Icc.mono hr, bddAbove_Icc.mono hr‚ü©,
    fun h => isBounded_of_bddAbove_of_bddBelow h.2 h.1‚ü©
#align real.bounded_iff_bdd_below_bdd_above Real.isBounded_iff_bddBelow_bddAbove

theorem Real.subset_Icc_sInf_sSup_of_isBounded {s : Set ‚Ñù} (h : IsBounded s) :
    s ‚äÜ Icc (sInf s) (sSup s) :=
  subset_Icc_csInf_csSup (Real.isBounded_iff_bddBelow_bddAbove.1 h).1
    (Real.isBounded_iff_bddBelow_bddAbove.1 h).2
#align real.subset_Icc_Inf_Sup_of_bounded Real.subset_Icc_sInf_sSup_of_isBounded

end

section Periodic

namespace Function

/-- A continuous, periodic function has compact range. -/
theorem Periodic.compact_of_continuous [TopologicalSpace Œ±] {f : ‚Ñù ‚Üí Œ±} {c : ‚Ñù} (hp : Periodic f c)
    (hc : c ‚â† 0) (hf : Continuous f) : IsCompact (range f) := by
  rw [‚Üê hp.image_uIcc hc 0]
  exact isCompact_uIcc.image hf
#align function.periodic.compact_of_continuous Function.Periodic.compact_of_continuous

@[deprecated Function.Periodic.compact_of_continuous]
theorem Periodic.compact_of_continuous' [TopologicalSpace Œ±] {f : ‚Ñù ‚Üí Œ±} {c : ‚Ñù} (hp : Periodic f c)
    (hc : 0 < c) (hf : Continuous f) : IsCompact (range f) :=
  hp.compact_of_continuous hc.ne' hf
#align function.periodic.compact_of_continuous' Function.Periodic.compact_of_continuous'

/-- A continuous, periodic function is bounded. -/
theorem Periodic.isBounded_of_continuous [PseudoMetricSpace Œ±] {f : ‚Ñù ‚Üí Œ±} {c : ‚Ñù}
    (hp : Periodic f c) (hc : c ‚â† 0) (hf : Continuous f) : IsBounded (range f) :=
  (hp.compact_of_continuous hc hf).isBounded
#align function.periodic.bounded_of_continuous Function.Periodic.isBounded_of_continuous

end Function

end Periodic

section Subgroups

namespace Int

open Metric

/-- This is a special case of `NormedSpace.discreteTopology_zmultiples`. It exists only to simplify
dependencies. -/
instance {a : ‚Ñù} : DiscreteTopology (AddSubgroup.zmultiples a) := by
  rcases eq_or_ne a 0 with (rfl | ha)
  ¬∑ rw [AddSubgroup.zmultiples_zero_eq_bot]
    exact Subsingleton.discreteTopology (Œ± := (‚ä• : Submodule ‚Ñ§ ‚Ñù))
  rw [discreteTopology_iff_isOpen_singleton_zero, isOpen_induced_iff]
  refine' ‚ü®ball 0 |a|, isOpen_ball, _‚ü©
  ext ‚ü®x, hx‚ü©
  obtain ‚ü®k, rfl‚ü© := AddSubgroup.mem_zmultiples_iff.mp hx
  simp [ha, Real.dist_eq, abs_mul, (by norm_cast : |(k : ‚Ñù)| < 1 ‚Üî |k| < 1)]

/-- Under the coercion from `‚Ñ§` to `‚Ñù`, inverse images of compact sets are finite. -/
theorem tendsto_coe_cofinite : Tendsto ((‚Üë) : ‚Ñ§ ‚Üí ‚Ñù) cofinite (cocompact ‚Ñù) := by
  apply (castAddHom ‚Ñù).tendsto_coe_cofinite_of_discrete cast_injective
  rw [range_castAddHom]
  infer_instance
#align int.tendsto_coe_cofinite Int.tendsto_coe_cofinite

/-- For nonzero `a`, the "multiples of `a`" map `zmultiplesHom` from `‚Ñ§` to `‚Ñù` is discrete, i.e.
inverse images of compact sets are finite. -/
theorem tendsto_zmultiplesHom_cofinite {a : ‚Ñù} (ha : a ‚â† 0) :
    Tendsto (zmultiplesHom ‚Ñù a) cofinite (cocompact ‚Ñù) := by
  apply (zmultiplesHom ‚Ñù a).tendsto_coe_cofinite_of_discrete <| smul_left_injective ‚Ñ§ ha
  rw [AddSubgroup.range_zmultiplesHom]
  infer_instance
#align int.tendsto_zmultiples_hom_cofinite Int.tendsto_zmultiplesHom_cofinite

end Int

namespace AddSubgroup

/-- The subgroup "multiples of `a`" (`zmultiples a`) is a discrete subgroup of `‚Ñù`, i.e. its
intersection with compact sets is finite. -/
theorem tendsto_zmultiples_subtype_cofinite (a : ‚Ñù) :
    Tendsto (zmultiples a).subtype cofinite (cocompact ‚Ñù) :=
  (zmultiples a).tendsto_coe_cofinite_of_discrete
#align add_subgroup.tendsto_zmultiples_subtype_cofinite AddSubgroup.tendsto_zmultiples_subtype_cofinite

end AddSubgroup

end Subgroups
