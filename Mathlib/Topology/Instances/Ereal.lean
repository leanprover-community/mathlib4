/-
Copyright (c) 2021 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel

! This file was ported from Lean 3 source module topology.instances.ereal
! leanprover-community/mathlib commit f2ce6086713c78a7f880485f7917ea547a215982
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Data.Rat.Encodable
import Mathbin.Data.Real.Ereal
import Mathbin.Topology.Algebra.Order.MonotoneContinuity
import Mathbin.Topology.Instances.Ennreal

/-!
# Topological structure on `ereal`

We endow `ereal` with the order topology, and prove basic properties of this topology.

## Main results

* `coe : ‚Ñù ‚Üí ereal` is an open embedding
* `coe : ‚Ñù‚â•0‚àû ‚Üí ereal` is an embedding
* The addition on `ereal` is continuous except at `(‚ä•, ‚ä§)` and at `(‚ä§, ‚ä•)`.
* Negation is a homeomorphism on `ereal`.

## Implementation

Most proofs are adapted from the corresponding proofs on `‚Ñù‚â•0‚àû`.
-/


noncomputable section

open Classical Set Filter Metric TopologicalSpace

open Classical Topology ENNReal NNReal BigOperators Filter

variable {Œ± : Type _} [TopologicalSpace Œ±]

namespace EReal

instance : TopologicalSpace EReal :=
  Preorder.topology EReal

instance : OrderTopology EReal :=
  ‚ü®rfl‚ü©

instance : T2Space EReal := by infer_instance

instance : SecondCountableTopology EReal :=
  ‚ü®by
    refine'
      ‚ü®‚ãÉ q : ‚Ñö, {{ a : EReal | a < (q : ‚Ñù) }, { a : EReal | ((q : ‚Ñù) : EReal) < a }},
        countable_Union fun a => (countable_singleton _).insert _, _‚ü©
    refine'
      le_antisymm
        (le_generateFrom <| by
          simp (config := { contextual := true }) [or_imp, isOpen_lt', isOpen_gt'])
        _
    apply le_generateFrom fun s h => _
    rcases h with ‚ü®a, hs | hs‚ü© <;>
        [rw [show s = ‚ãÉ q ‚àà { q : ‚Ñö | a < (q : ‚Ñù) }, { b | ((q : ‚Ñù) : EReal) < b }
            by
            ext x
            simpa only [hs, exists_prop, mem_Union] using lt_iff_exists_rat_btwn],
        rw [show s = ‚ãÉ q ‚àà { q : ‚Ñö | ((q : ‚Ñù) : EReal) < a }, { b | b < ((q : ‚Ñù) : EReal) }
            by
            ext x
            simpa only [hs, and_comm', exists_prop, mem_Union] using lt_iff_exists_rat_btwn]] <;>
      ¬∑ apply isOpen_union·µ¢
        intro q
        apply isOpen_union·µ¢
        intro hq
        apply generate_open.basic
        exact mem_Union.2 ‚ü®q, by simp‚ü©‚ü©

/-! ### Real coercion -/


theorem embedding_coe : Embedding (coe : ‚Ñù ‚Üí EReal) :=
  ‚ü®‚ü®by
      refine' le_antisymm _ _
      ¬∑ rw [@OrderTopology.topology_eq_generate_intervals EReal _, ‚Üê coinduced_le_iff_le_induced]
        refine' le_generateFrom fun s ha => _
        rcases ha with ‚ü®a, rfl | rfl‚ü©
        show IsOpen { b : ‚Ñù | a < ‚Üëb }
        ¬∑ induction a using EReal.rec
          ¬∑ simp only [isOpen_univ, bot_lt_coe, set_of_true]
          ¬∑ simp only [EReal.coe_lt_coe_iff]
            exact isOpen_Ioi
          ¬∑ simp only [set_of_false, isOpen_empty, not_top_lt]
        show IsOpen { b : ‚Ñù | ‚Üëb < a }
        ¬∑ induction a using EReal.rec
          ¬∑ simp only [not_lt_bot, set_of_false, isOpen_empty]
          ¬∑ simp only [EReal.coe_lt_coe_iff]
            exact isOpen_Iio
          ¬∑ simp only [isOpen_univ, coe_lt_top, set_of_true]
      ¬∑ rw [@OrderTopology.topology_eq_generate_intervals ‚Ñù _]
        refine' le_generateFrom fun s ha => _
        rcases ha with ‚ü®a, rfl | rfl‚ü©
        exact ‚ü®Ioi a, isOpen_Ioi, by simp [Ioi]‚ü©
        exact ‚ü®Iio a, isOpen_Iio, by simp [Iio]‚ü©‚ü©, fun a b => by
    simp only [imp_self, EReal.coe_eq_coe_iff]‚ü©
#align ereal.embedding_coe EReal.embedding_coe

theorem openEmbedding_coe : OpenEmbedding (coe : ‚Ñù ‚Üí EReal) :=
  ‚ü®embedding_coe, by
    convert @isOpen_Ioo EReal _ _ _ ‚ä• ‚ä§
    ext x
    induction x using EReal.rec
    ¬∑ simp only [left_mem_Ioo, mem_range, coe_ne_bot, exists_false, not_false_iff]
    ¬∑ simp only [mem_range_self, mem_Ioo, bot_lt_coe, coe_lt_top, and_self_iff]
    ¬∑ simp only [mem_range, right_mem_Ioo, exists_false, coe_ne_top]‚ü©
#align ereal.open_embedding_coe EReal.openEmbedding_coe

@[norm_cast]
theorem tendsto_coe {Œ± : Type _} {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñù} {a : ‚Ñù} :
    Tendsto (fun a => (m a : EReal)) f (ùìù ‚Üëa) ‚Üî Tendsto m f (ùìù a) :=
  embedding_coe.tendsto_nhds_iff.symm
#align ereal.tendsto_coe EReal.tendsto_coe

theorem continuous_coe_real_eReal : Continuous (coe : ‚Ñù ‚Üí EReal) :=
  embedding_coe.Continuous
#align continuous_coe_real_ereal continuous_coe_real_eReal

theorem continuous_coe_iff {f : Œ± ‚Üí ‚Ñù} : (Continuous fun a => (f a : EReal)) ‚Üî Continuous f :=
  embedding_coe.continuous_iff.symm
#align ereal.continuous_coe_iff EReal.continuous_coe_iff

theorem nhds_coe {r : ‚Ñù} : ùìù (r : EReal) = (ùìù r).map coe :=
  (openEmbedding_coe.map_nhds_eq r).symm
#align ereal.nhds_coe EReal.nhds_coe

theorem nhds_coe_coe {r p : ‚Ñù} :
    ùìù ((r : EReal), (p : EReal)) = (ùìù (r, p)).map fun p : ‚Ñù √ó ‚Ñù => (p.1, p.2) :=
  ((openEmbedding_coe.Prod openEmbedding_coe).map_nhds_eq (r, p)).symm
#align ereal.nhds_coe_coe EReal.nhds_coe_coe

theorem tendsto_toReal {a : EReal} (ha : a ‚â† ‚ä§) (h'a : a ‚â† ‚ä•) :
    Tendsto EReal.toReal (ùìù a) (ùìù a.toReal) :=
  by
  lift a to ‚Ñù using And.intro ha h'a
  rw [nhds_coe, tendsto_map'_iff]
  exact tendsto_id
#align ereal.tendsto_to_real EReal.tendsto_toReal

theorem continuousOn_toReal : ContinuousOn EReal.toReal ({‚ä•, ‚ä§}·∂ú : Set EReal) := fun a ha =>
  ContinuousAt.continuousWithinAt
    (tendsto_toReal
      (by
        simp [not_or] at ha
        exact ha.2)
      (by
        simp [not_or] at ha
        exact ha.1))
#align ereal.continuous_on_to_real EReal.continuousOn_toReal

/-- The set of finite `ereal` numbers is homeomorphic to `‚Ñù`. -/
def neBotTopHomeomorphReal : ({‚ä•, ‚ä§}·∂ú : Set EReal) ‚âÉ‚Çú ‚Ñù :=
  {
    neTopBotEquivReal with
    continuous_toFun := continuousOn_iff_continuous_restrict.1 continuousOn_toReal
    continuous_invFun := continuous_coe_real_eReal.subtype_mk _ }
#align ereal.ne_bot_top_homeomorph_real EReal.neBotTopHomeomorphReal

/-! ### ennreal coercion -/


theorem embedding_coe_eNNReal : Embedding (coe : ‚Ñù‚â•0‚àû ‚Üí EReal) :=
  ‚ü®‚ü®by
      refine' le_antisymm _ _
      ¬∑ rw [@OrderTopology.topology_eq_generate_intervals EReal _, ‚Üê coinduced_le_iff_le_induced]
        refine' le_generateFrom fun s ha => _
        rcases ha with ‚ü®a, rfl | rfl‚ü©
        show IsOpen { b : ‚Ñù‚â•0‚àû | a < ‚Üëb }
        ¬∑ induction' a using EReal.rec with x
          ¬∑ simp only [isOpen_univ, bot_lt_coe_ennreal, set_of_true]
          ¬∑ rcases le_or_lt 0 x with (h | h)
            ¬∑ have : (x : EReal) = ((id ‚ü®x, h‚ü© : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû) := rfl
              rw [this]
              simp only [id.def, coe_ennreal_lt_coe_ennreal_iff]
              exact isOpen_Ioi
            ¬∑ have : ‚àÄ y : ‚Ñù‚â•0‚àû, (x : EReal) < y := fun y =>
                (EReal.coe_lt_coe_iff.2 h).trans_le (coe_ennreal_nonneg _)
              simp only [this, isOpen_univ, set_of_true]
          ¬∑ simp only [set_of_false, isOpen_empty, not_top_lt]
        show IsOpen { b : ‚Ñù‚â•0‚àû | ‚Üëb < a }
        ¬∑ induction' a using EReal.rec with x
          ¬∑ simp only [not_lt_bot, set_of_false, isOpen_empty]
          ¬∑ rcases le_or_lt 0 x with (h | h)
            ¬∑ have : (x : EReal) = ((id ‚ü®x, h‚ü© : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû) := rfl
              rw [this]
              simp only [id.def, coe_ennreal_lt_coe_ennreal_iff]
              exact isOpen_Iio
            ¬∑ convert isOpen_empty
              apply eq_empty_iff_forall_not_mem.2 fun y hy => lt_irrefl (x : EReal) _
              exact ((EReal.coe_lt_coe_iff.2 h).trans_le (coe_ennreal_nonneg y)).trans hy
          ¬∑ simp only [‚Üê coe_ennreal_top, coe_ennreal_lt_coe_ennreal_iff]
            exact isOpen_Iio
      ¬∑ rw [@OrderTopology.topology_eq_generate_intervals ‚Ñù‚â•0‚àû _]
        refine' le_generateFrom fun s ha => _
        rcases ha with ‚ü®a, rfl | rfl‚ü©
        exact ‚ü®Ioi a, isOpen_Ioi, by simp [Ioi]‚ü©
        exact ‚ü®Iio a, isOpen_Iio, by simp [Iio]‚ü©‚ü©, fun a b => by
    simp only [imp_self, coe_ennreal_eq_coe_ennreal_iff]‚ü©
#align ereal.embedding_coe_ennreal EReal.embedding_coe_eNNReal

@[norm_cast]
theorem tendsto_coe_eNNReal {Œ± : Type _} {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} :
    Tendsto (fun a => (m a : EReal)) f (ùìù ‚Üëa) ‚Üî Tendsto m f (ùìù a) :=
  embedding_coe_eNNReal.tendsto_nhds_iff.symm
#align ereal.tendsto_coe_ennreal EReal.tendsto_coe_eNNReal

theorem continuous_coe_eNNReal_eReal : Continuous (coe : ‚Ñù‚â•0‚àû ‚Üí EReal) :=
  embedding_coe_eNNReal.Continuous
#align continuous_coe_ennreal_ereal continuous_coe_eNNReal_eReal

theorem continuous_coe_eNNReal_iff {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} :
    (Continuous fun a => (f a : EReal)) ‚Üî Continuous f :=
  embedding_coe_eNNReal.continuous_iff.symm
#align ereal.continuous_coe_ennreal_iff EReal.continuous_coe_eNNReal_iff

/-! ### Neighborhoods of infinity -/


/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (a ¬´expr ‚â† ¬ª ¬´expr‚ä§¬ª()) -/
theorem nhds_top : ùìù (‚ä§ : EReal) = ‚®Ö (a) (_ : a ‚â† ‚ä§), ùìü (Ioi a) :=
  nhds_top_order.trans <| by simp [lt_top_iff_ne_top, Ioi]
#align ereal.nhds_top EReal.nhds_top

theorem nhds_top' : ùìù (‚ä§ : EReal) = ‚®Ö a : ‚Ñù, ùìü (Ioi a) :=
  by
  rw [nhds_top]
  apply le_antisymm
  ¬∑ exact inf·µ¢_mono' fun x => ‚ü®x, by simp‚ü©
  ¬∑ refine' le_inf·µ¢ fun r => le_inf·µ¢ fun hr => _
    induction r using EReal.rec
    ¬∑ exact (inf·µ¢_le _ 0).trans (by simp)
    ¬∑ exact inf·µ¢_le _ _
    ¬∑ simpa using hr
#align ereal.nhds_top' EReal.nhds_top'

theorem mem_nhds_top_iff {s : Set EReal} : s ‚àà ùìù (‚ä§ : EReal) ‚Üî ‚àÉ y : ‚Ñù, Ioi (y : EReal) ‚äÜ s :=
  by
  rw [nhds_top', mem_infi_of_directed]
  ¬∑ rfl
  exact fun x y => ‚ü®max x y, by simp [le_refl], by simp [le_refl]‚ü©
#align ereal.mem_nhds_top_iff EReal.mem_nhds_top_iff

theorem tendsto_nhds_top_iff_real {Œ± : Type _} {m : Œ± ‚Üí EReal} {f : Filter Œ±} :
    Tendsto m f (ùìù ‚ä§) ‚Üî ‚àÄ x : ‚Ñù, ‚àÄ·∂† a in f, ‚Üëx < m a := by
  simp only [nhds_top', mem_Ioi, tendsto_infi, tendsto_principal]
#align ereal.tendsto_nhds_top_iff_real EReal.tendsto_nhds_top_iff_real

/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (a ¬´expr ‚â† ¬ª ¬´expr‚ä•¬ª()) -/
theorem nhds_bot : ùìù (‚ä• : EReal) = ‚®Ö (a) (_ : a ‚â† ‚ä•), ùìü (Iio a) :=
  nhds_bot_order.trans <| by simp [bot_lt_iff_ne_bot]
#align ereal.nhds_bot EReal.nhds_bot

theorem nhds_bot' : ùìù (‚ä• : EReal) = ‚®Ö a : ‚Ñù, ùìü (Iio a) :=
  by
  rw [nhds_bot]
  apply le_antisymm
  ¬∑ exact inf·µ¢_mono' fun x => ‚ü®x, by simp‚ü©
  ¬∑ refine' le_inf·µ¢ fun r => le_inf·µ¢ fun hr => _
    induction r using EReal.rec
    ¬∑ simpa using hr
    ¬∑ exact inf·µ¢_le _ _
    ¬∑ exact (inf·µ¢_le _ 0).trans (by simp)
#align ereal.nhds_bot' EReal.nhds_bot'

theorem mem_nhds_bot_iff {s : Set EReal} : s ‚àà ùìù (‚ä• : EReal) ‚Üî ‚àÉ y : ‚Ñù, Iio (y : EReal) ‚äÜ s :=
  by
  rw [nhds_bot', mem_infi_of_directed]
  ¬∑ rfl
  exact fun x y => ‚ü®min x y, by simp [le_refl], by simp [le_refl]‚ü©
#align ereal.mem_nhds_bot_iff EReal.mem_nhds_bot_iff

theorem tendsto_nhds_bot_iff_real {Œ± : Type _} {m : Œ± ‚Üí EReal} {f : Filter Œ±} :
    Tendsto m f (ùìù ‚ä•) ‚Üî ‚àÄ x : ‚Ñù, ‚àÄ·∂† a in f, m a < x := by
  simp only [nhds_bot', mem_Iio, tendsto_infi, tendsto_principal]
#align ereal.tendsto_nhds_bot_iff_real EReal.tendsto_nhds_bot_iff_real

/-! ### Continuity of addition -/


theorem continuousAt_add_coe_coe (a b : ‚Ñù) :
    ContinuousAt (fun p : EReal √ó EReal => p.1 + p.2) (a, b) := by
  simp only [ContinuousAt, nhds_coe_coe, ‚Üê coe_add, tendsto_map'_iff, (¬∑ ‚àò ¬∑), tendsto_coe,
    tendsto_add]
#align ereal.continuous_at_add_coe_coe EReal.continuousAt_add_coe_coe

theorem continuousAt_add_top_coe (a : ‚Ñù) :
    ContinuousAt (fun p : EReal √ó EReal => p.1 + p.2) (‚ä§, a) :=
  by
  simp only [ContinuousAt, tendsto_nhds_top_iff_real, top_add_coe, nhds_prod_eq]
  intro r
  rw [eventually_prod_iff]
  refine'
    ‚ü®fun z => ((r - (a - 1) : ‚Ñù) : EReal) < z, Ioi_mem_nhds (coe_lt_top _), fun z =>
      ((a - 1 : ‚Ñù) : EReal) < z, Ioi_mem_nhds (by simp [-EReal.coe_sub]), fun x hx y hy => _‚ü©
  dsimp
  convert add_lt_add hx hy
  simp
#align ereal.continuous_at_add_top_coe EReal.continuousAt_add_top_coe

theorem continuousAt_add_coe_top (a : ‚Ñù) :
    ContinuousAt (fun p : EReal √ó EReal => p.1 + p.2) (a, ‚ä§) :=
  by
  change ContinuousAt ((fun p : EReal √ó EReal => p.2 + p.1) ‚àò Prod.swap) (a, ‚ä§)
  apply ContinuousAt.comp _ continuous_swap.continuous_at
  simp_rw [add_comm]
  exact continuous_at_add_top_coe a
#align ereal.continuous_at_add_coe_top EReal.continuousAt_add_coe_top

theorem continuousAt_add_top_top : ContinuousAt (fun p : EReal √ó EReal => p.1 + p.2) (‚ä§, ‚ä§) :=
  by
  simp only [ContinuousAt, tendsto_nhds_top_iff_real, top_add_top, nhds_prod_eq]
  intro r
  rw [eventually_prod_iff]
  refine'
    ‚ü®fun z => (r : EReal) < z, Ioi_mem_nhds (coe_lt_top _), fun z => ((0 : ‚Ñù) : EReal) < z,
      Ioi_mem_nhds (by simp [zero_lt_one]), fun x hx y hy => _‚ü©
  dsimp
  convert add_lt_add hx hy
  simp
#align ereal.continuous_at_add_top_top EReal.continuousAt_add_top_top

theorem continuousAt_add_bot_coe (a : ‚Ñù) :
    ContinuousAt (fun p : EReal √ó EReal => p.1 + p.2) (‚ä•, a) :=
  by
  simp only [ContinuousAt, tendsto_nhds_bot_iff_real, nhds_prod_eq, bot_add]
  intro r
  rw [eventually_prod_iff]
  refine'
    ‚ü®fun z => z < ((r - (a + 1) : ‚Ñù) : EReal), Iio_mem_nhds (bot_lt_coe _), fun z =>
      z < ((a + 1 : ‚Ñù) : EReal), Iio_mem_nhds (by simp [-coe_add, zero_lt_one]), fun x hx y hy => _‚ü©
  convert add_lt_add hx hy
  rw [sub_add_cancel]
#align ereal.continuous_at_add_bot_coe EReal.continuousAt_add_bot_coe

theorem continuousAt_add_coe_bot (a : ‚Ñù) :
    ContinuousAt (fun p : EReal √ó EReal => p.1 + p.2) (a, ‚ä•) :=
  by
  change ContinuousAt ((fun p : EReal √ó EReal => p.2 + p.1) ‚àò Prod.swap) (a, ‚ä•)
  apply ContinuousAt.comp _ continuous_swap.continuous_at
  simp_rw [add_comm]
  exact continuous_at_add_bot_coe a
#align ereal.continuous_at_add_coe_bot EReal.continuousAt_add_coe_bot

theorem continuousAt_add_bot_bot : ContinuousAt (fun p : EReal √ó EReal => p.1 + p.2) (‚ä•, ‚ä•) :=
  by
  simp only [ContinuousAt, tendsto_nhds_bot_iff_real, nhds_prod_eq, bot_add]
  intro r
  rw [eventually_prod_iff]
  refine'
    ‚ü®fun z => z < r, Iio_mem_nhds (bot_lt_coe _), fun z => z < 0, Iio_mem_nhds (bot_lt_coe _),
      fun x hx y hy => _‚ü©
  dsimp
  convert add_lt_add hx hy
  simp
#align ereal.continuous_at_add_bot_bot EReal.continuousAt_add_bot_bot

/-- The addition on `ereal` is continuous except where it doesn't make sense (i.e., at `(‚ä•, ‚ä§)`
and at `(‚ä§, ‚ä•)`). -/
theorem continuousAt_add {p : EReal √ó EReal} (h : p.1 ‚â† ‚ä§ ‚à® p.2 ‚â† ‚ä•) (h' : p.1 ‚â† ‚ä• ‚à® p.2 ‚â† ‚ä§) :
    ContinuousAt (fun p : EReal √ó EReal => p.1 + p.2) p :=
  by
  rcases p with ‚ü®x, y‚ü©
  induction x using EReal.rec <;> induction y using EReal.rec
  ¬∑ exact continuous_at_add_bot_bot
  ¬∑ exact continuous_at_add_bot_coe _
  ¬∑ simpa using h'
  ¬∑ exact continuous_at_add_coe_bot _
  ¬∑ exact continuous_at_add_coe_coe _ _
  ¬∑ exact continuous_at_add_coe_top _
  ¬∑ simpa using h
  ¬∑ exact continuous_at_add_top_coe _
  ¬∑ exact continuous_at_add_top_top
#align ereal.continuous_at_add EReal.continuousAt_add

/-! ### Negation-/


/-- Negation on `ereal` as a homeomorphism -/
def negHomeo : EReal ‚âÉ‚Çú EReal :=
  negOrderIso.toHomeomorph
#align ereal.neg_homeo EReal.negHomeo

theorem continuous_neg : Continuous fun x : EReal => -x :=
  negHomeo.Continuous
#align ereal.continuous_neg EReal.continuous_neg

end EReal

