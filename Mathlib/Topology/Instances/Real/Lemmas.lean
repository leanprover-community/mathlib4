/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro
-/
import Mathlib.Algebra.Field.Periodic
import Mathlib.Algebra.Field.Subfield.Basic
import Mathlib.Topology.Algebra.Order.Archimedean
import Mathlib.Topology.Algebra.Ring.Real

/-!
# Topological properties of ‚Ñù
-/

assert_not_exists UniformOnFun

noncomputable section

open Filter Int Metric Set TopologicalSpace Bornology
open scoped Topology Uniformity Interval

universe u v w

variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

theorem Real.isTopologicalBasis_Ioo_rat :
    @IsTopologicalBasis ‚Ñù _ (‚ãÉ (a : ‚Ñö) (b : ‚Ñö) (_ : a < b), {Ioo (a : ‚Ñù) b}) :=
  isTopologicalBasis_of_isOpen_of_nhds (by simp +contextual [isOpen_Ioo])
    fun a _ hav hv =>
    let ‚ü®_, _, ‚ü®hl, hu‚ü©, h‚ü© := mem_nhds_iff_exists_Ioo_subset.mp (IsOpen.mem_nhds hv hav)
    let ‚ü®q, hlq, hqa‚ü© := exists_rat_btwn hl
    let ‚ü®p, hap, hpu‚ü© := exists_rat_btwn hu
    ‚ü®Ioo q p, by
      simp only [mem_iUnion]
      exact ‚ü®q, p, Rat.cast_lt.1 <| hqa.trans hap, rfl‚ü©, ‚ü®hqa, hap‚ü©, fun _ ‚ü®hqa', ha'p‚ü© =>
      h ‚ü®hlq.trans hqa', ha'p.trans hpu‚ü©‚ü©

@[simp]
theorem Real.cobounded_eq : cobounded ‚Ñù = atBot ‚äî atTop := by
  simp only [‚Üê comap_dist_right_atTop (0 : ‚Ñù), Real.dist_eq, sub_zero, comap_abs_atTop]

/- TODO(Mario): Prove that these are uniform isomorphisms instead of uniform embeddings
lemma uniform_embedding_add_rat {r : ‚Ñö} : uniform_embedding (fun p : ‚Ñö => p + r) :=
_

lemma uniform_embedding_mul_rat {q : ‚Ñö} (hq : q ‚â† 0) : uniform_embedding ((*) q) :=
_ -/
theorem Real.mem_closure_iff {s : Set ‚Ñù} {x : ‚Ñù} :
    x ‚àà closure s ‚Üî ‚àÄ Œµ > 0, ‚àÉ y ‚àà s, |y - x| < Œµ := by
  simp [mem_closure_iff_nhds_basis nhds_basis_ball, Real.dist_eq]

theorem Real.uniformContinuous_inv (s : Set ‚Ñù) {r : ‚Ñù} (r0 : 0 < r) (H : ‚àÄ x ‚àà s, r ‚â§ |x|) :
    UniformContinuous fun p : s => p.1‚Åª¬π :=
  Metric.uniformContinuous_iff.2 fun _Œµ Œµ0 =>
    let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_inv_continuous_lemma abs Œµ0 r0
    ‚ü®Œ¥, Œ¥0, fun {a b} h => HŒ¥ (H _ a.2) (H _ b.2) h‚ü©

theorem Real.uniformContinuous_abs : UniformContinuous (abs : ‚Ñù ‚Üí ‚Ñù) :=
  Metric.uniformContinuous_iff.2 fun Œµ Œµ0 =>
    ‚ü®Œµ, Œµ0, fun _ _ ‚Ü¶ lt_of_le_of_lt (abs_abs_sub_abs_le_abs_sub _ _)‚ü©

theorem Real.continuous_inv : Continuous fun a : { r : ‚Ñù // r ‚â† 0 } => a.val‚Åª¬π :=
  continuousOn_inv‚ÇÄ.restrict

theorem Real.uniformContinuous_mul (s : Set (‚Ñù √ó ‚Ñù)) {r‚ÇÅ r‚ÇÇ : ‚Ñù}
    (H : ‚àÄ x ‚àà s, |(x : ‚Ñù √ó ‚Ñù).1| < r‚ÇÅ ‚àß |x.2| < r‚ÇÇ) :
    UniformContinuous fun p : s => p.1.1 * p.1.2 :=
  Metric.uniformContinuous_iff.2 fun _Œµ Œµ0 =>
    let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_mul_continuous_lemma abs Œµ0
    ‚ü®Œ¥, Œ¥0, fun {a b} h =>
      let ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := max_lt_iff.1 h
      HŒ¥ (H _ a.2).1 (H _ b.2).2 h‚ÇÅ h‚ÇÇ‚ü©

theorem Real.totallyBounded_ball (x Œµ : ‚Ñù) : TotallyBounded (ball x Œµ) := by
  rw [Real.ball_eq_Ioo]; apply totallyBounded_Ioo

theorem Real.subfield_eq_of_closed {K : Subfield ‚Ñù} (hc : IsClosed (K : Set ‚Ñù)) : K = ‚ä§ := by
  rw [SetLike.ext'_iff, Subfield.coe_top, ‚Üê hc.closure_eq]
  refine Rat.denseRange_cast.mono ?_ |>.closure_eq
  rintro - ‚ü®_, rfl‚ü©
  exact SubfieldClass.ratCast_mem K _

theorem Real.exists_seq_rat_strictMono_tendsto (x : ‚Ñù) :
    ‚àÉ u : ‚Ñï ‚Üí ‚Ñö, StrictMono u ‚àß (‚àÄ n, u n < x) ‚àß Tendsto (u ¬∑ : ‚Ñï ‚Üí ‚Ñù) atTop (ùìù x) :=
  Rat.denseRange_cast.exists_seq_strictMono_tendsto Rat.cast_strictMono.monotone x

theorem Real.exists_seq_rat_strictAnti_tendsto (x : ‚Ñù) :
    ‚àÉ u : ‚Ñï ‚Üí ‚Ñö, StrictAnti u ‚àß (‚àÄ n, x < u n) ‚àß Tendsto (u ¬∑ : ‚Ñï ‚Üí ‚Ñù) atTop (ùìù x) :=
  Rat.denseRange_cast.exists_seq_strictAnti_tendsto Rat.cast_strictMono.monotone x

section

theorem closure_ordConnected_inter_rat {s : Set ‚Ñù} (conn : s.OrdConnected) (nt : s.Nontrivial) :
    closure (s ‚à© .range Rat.cast) = closure s :=
  (closure_mono inter_subset_left).antisymm <| isClosed_closure.closure_subset_iff.mpr fun x hx ‚Ü¶
    Real.mem_closure_iff.mpr fun Œµ Œµ_pos ‚Ü¶ by
      have ‚ü®z, hz, ne‚ü© := nt.exists_ne x
      refine ne.lt_or_gt.elim (fun lt ‚Ü¶ ?_) fun lt ‚Ü¶ ?_
      ¬∑ have ‚ü®q, h‚ÇÅ, h‚ÇÇ‚ü© := exists_rat_btwn (max_lt lt (sub_lt_self x Œµ_pos))
        rw [max_lt_iff] at h‚ÇÅ
        refine ‚ü®q, ‚ü®conn.out hz hx ‚ü®h‚ÇÅ.1.le, h‚ÇÇ.le‚ü©, q, rfl‚ü©, ?_‚ü©
        simpa only [abs_sub_comm, abs_of_pos (sub_pos.mpr h‚ÇÇ), sub_lt_comm] using h‚ÇÅ.2
      ¬∑ have ‚ü®q, h‚ÇÅ, h‚ÇÇ‚ü© := exists_rat_btwn (lt_min lt (lt_add_of_pos_right x Œµ_pos))
        rw [lt_min_iff] at h‚ÇÇ
        refine ‚ü®q, ‚ü®conn.out hx hz ‚ü®h‚ÇÅ.le, h‚ÇÇ.1.le‚ü©, q, rfl‚ü©, ?_‚ü©
        simpa only [abs_of_pos (sub_pos.2 h‚ÇÅ), sub_lt_iff_lt_add'] using h‚ÇÇ.2

theorem closure_of_rat_image_lt {q : ‚Ñö} :
    closure (((‚Üë) : ‚Ñö ‚Üí ‚Ñù) '' { x | q < x }) = { r | ‚Üëq ‚â§ r } := by
  convert closure_ordConnected_inter_rat (ordConnected_Ioi (a := (q : ‚Ñù))) _ using 1
  ¬∑ congr!; aesop
  ¬∑ exact (closure_Ioi _).symm
  ¬∑ exact ‚ü®q + 1, show (q : ‚Ñù) < _ by linarith, q + 2, show (q : ‚Ñù) < _ by linarith, by simp‚ü©

/- TODO(Mario): Put these back only if needed later
lemma closure_of_rat_image_le_eq {q : ‚Ñö} : closure ((coe : ‚Ñö ‚Üí ‚Ñù) '' {x | q ‚â§ x}) = {r | ‚Üëq ‚â§ r} :=
  _

lemma closure_of_rat_image_le_le_eq {a b : ‚Ñö} (hab : a ‚â§ b) :
    closure (of_rat '' {q:‚Ñö | a ‚â§ q ‚àß q ‚â§ b}) = {r:‚Ñù | of_rat a ‚â§ r ‚àß r ‚â§ of_rat b} :=
  _
-/

end

section Periodic

namespace Function

/-- A continuous, periodic function has compact range. -/
theorem Periodic.compact_of_continuous [TopologicalSpace Œ±] {f : ‚Ñù ‚Üí Œ±} {c : ‚Ñù} (hp : Periodic f c)
    (hc : c ‚â† 0) (hf : Continuous f) : IsCompact (range f) := by
  rw [‚Üê hp.image_uIcc hc 0]
  exact isCompact_uIcc.image hf

/-- A continuous, periodic function is bounded. -/
theorem Periodic.isBounded_of_continuous [PseudoMetricSpace Œ±] {f : ‚Ñù ‚Üí Œ±} {c : ‚Ñù}
    (hp : Periodic f c) (hc : c ‚â† 0) (hf : Continuous f) : IsBounded (range f) :=
  (hp.compact_of_continuous hc hf).isBounded

end Function

end Periodic
