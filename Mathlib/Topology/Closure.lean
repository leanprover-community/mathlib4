/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Jeremy Avigad
-/
import Mathlib.Order.Filter.Lift
import Mathlib.Topology.Basic

/-!
# Interior, closure and frontier of a set

This file provides lemmas relating to the functions `interior`, `closure` and `frontier` of a set
endowed with a topology.

## Notation

* `ùìù x`: the filter `nhds x` of neighborhoods of a point `x`;
* `ùìü s`: the principal filter of a set `s`;
* `ùìù[s] x`: the filter `nhdsWithin x s` of neighborhoods of a point `x` within a set `s`;
* `ùìù[‚â†] x`: the filter `nhdsWithin x {x}·∂ú` of punctured neighborhoods of `x`.

## Tags

interior, closure, frontier
-/

open Set

universe u v

variable {X : Type u} [TopologicalSpace X] {Œπ : Sort v} {x : X} {s s‚ÇÅ s‚ÇÇ t : Set X}

section Interior

theorem mem_interior : x ‚àà interior s ‚Üî ‚àÉ t ‚äÜ s, IsOpen t ‚àß x ‚àà t := by
  simp only [interior, mem_sUnion, mem_setOf_eq, and_assoc, and_left_comm]

@[simp]
theorem isOpen_interior : IsOpen (interior s) :=
  isOpen_sUnion fun _ => And.left

theorem interior_subset : interior s ‚äÜ s :=
  sUnion_subset fun _ => And.right

theorem interior_maximal (h‚ÇÅ : t ‚äÜ s) (h‚ÇÇ : IsOpen t) : t ‚äÜ interior s :=
  subset_sUnion_of_mem ‚ü®h‚ÇÇ, h‚ÇÅ‚ü©

theorem IsOpen.interior_eq (h : IsOpen s) : interior s = s :=
  interior_subset.antisymm (interior_maximal (Subset.refl s) h)

theorem interior_eq_iff_isOpen : interior s = s ‚Üî IsOpen s :=
  ‚ü®fun h => h ‚ñ∏ isOpen_interior, IsOpen.interior_eq‚ü©

theorem subset_interior_iff_isOpen : s ‚äÜ interior s ‚Üî IsOpen s := by
  simp only [interior_eq_iff_isOpen.symm, Subset.antisymm_iff, interior_subset, true_and]

theorem IsOpen.subset_interior_iff (h‚ÇÅ : IsOpen s) : s ‚äÜ interior t ‚Üî s ‚äÜ t :=
  ‚ü®fun h => Subset.trans h interior_subset, fun h‚ÇÇ => interior_maximal h‚ÇÇ h‚ÇÅ‚ü©

theorem subset_interior_iff : t ‚äÜ interior s ‚Üî ‚àÉ U, IsOpen U ‚àß t ‚äÜ U ‚àß U ‚äÜ s :=
  ‚ü®fun h => ‚ü®interior s, isOpen_interior, h, interior_subset‚ü©, fun ‚ü®_U, hU, htU, hUs‚ü© =>
    htU.trans (interior_maximal hUs hU)‚ü©

lemma interior_subset_iff : interior s ‚äÜ t ‚Üî ‚àÄ U, IsOpen U ‚Üí U ‚äÜ s ‚Üí U ‚äÜ t := by
  simp [interior]

@[mono, gcongr]
theorem interior_mono (h : s ‚äÜ t) : interior s ‚äÜ interior t :=
  interior_maximal (Subset.trans interior_subset h) isOpen_interior

@[simp]
theorem interior_empty : interior (‚àÖ : Set X) = ‚àÖ :=
  isOpen_empty.interior_eq

@[simp]
theorem interior_univ : interior (univ : Set X) = univ :=
  isOpen_univ.interior_eq

@[simp]
theorem interior_eq_univ : interior s = univ ‚Üî s = univ :=
  ‚ü®fun h => univ_subset_iff.mp <| h.symm.trans_le interior_subset, fun h => h.symm ‚ñ∏ interior_univ‚ü©

@[simp]
theorem interior_interior : interior (interior s) = interior s :=
  isOpen_interior.interior_eq

@[simp]
theorem interior_inter : interior (s ‚à© t) = interior s ‚à© interior t :=
  (Monotone.map_inf_le (fun _ _ ‚Ü¶ interior_mono) s t).antisymm <|
    interior_maximal (inter_subset_inter interior_subset interior_subset) <|
      isOpen_interior.inter isOpen_interior

theorem Set.Finite.interior_biInter {Œπ : Type*} {s : Set Œπ} (hs : s.Finite) (f : Œπ ‚Üí Set X) :
    interior (‚ãÇ i ‚àà s, f i) = ‚ãÇ i ‚àà s, interior (f i) := by
  induction s, hs using Set.Finite.induction_on with
  | empty => simp
  | insert _ _ _ => simp [*]

theorem Set.Finite.interior_sInter {S : Set (Set X)} (hS : S.Finite) :
    interior (‚ãÇ‚ÇÄ S) = ‚ãÇ s ‚àà S, interior s := by
  rw [sInter_eq_biInter, hS.interior_biInter]

@[simp]
theorem Finset.interior_iInter {Œπ : Type*} (s : Finset Œπ) (f : Œπ ‚Üí Set X) :
    interior (‚ãÇ i ‚àà s, f i) = ‚ãÇ i ‚àà s, interior (f i) :=
  s.finite_toSet.interior_biInter f

@[simp]
theorem interior_iInter_of_finite [Finite Œπ] (f : Œπ ‚Üí Set X) :
    interior (‚ãÇ i, f i) = ‚ãÇ i, interior (f i) := by
  rw [‚Üê sInter_range, (finite_range f).interior_sInter, biInter_range]

@[simp]
theorem interior_iInter‚ÇÇ_lt_nat {n : ‚Ñï} (f : ‚Ñï ‚Üí Set X) :
    interior (‚ãÇ m < n, f m) = ‚ãÇ m < n, interior (f m) :=
  (finite_lt_nat n).interior_biInter f

@[simp]
theorem interior_iInter‚ÇÇ_le_nat {n : ‚Ñï} (f : ‚Ñï ‚Üí Set X) :
    interior (‚ãÇ m ‚â§ n, f m) = ‚ãÇ m ‚â§ n, interior (f m) :=
  (finite_le_nat n).interior_biInter f

theorem interior_union_isClosed_of_interior_empty (h‚ÇÅ : IsClosed s)
    (h‚ÇÇ : interior t = ‚àÖ) : interior (s ‚à™ t) = interior s :=
  have : interior (s ‚à™ t) ‚äÜ s := fun x ‚ü®u, ‚ü®(hu‚ÇÅ : IsOpen u), (hu‚ÇÇ : u ‚äÜ s ‚à™ t)‚ü©, (hx‚ÇÅ : x ‚àà u)‚ü© =>
    by_contradiction fun hx‚ÇÇ : x ‚àâ s =>
      have : u \ s ‚äÜ t := fun _ ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© => Or.resolve_left (hu‚ÇÇ h‚ÇÅ) h‚ÇÇ
      have : u \ s ‚äÜ interior t := by rwa [(IsOpen.sdiff hu‚ÇÅ h‚ÇÅ).subset_interior_iff]
      have : u \ s ‚äÜ ‚àÖ := by rwa [h‚ÇÇ] at this
      this ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©
  Subset.antisymm (interior_maximal this isOpen_interior) (interior_mono subset_union_left)

theorem isOpen_iff_forall_mem_open : IsOpen s ‚Üî ‚àÄ x ‚àà s, ‚àÉ t, t ‚äÜ s ‚àß IsOpen t ‚àß x ‚àà t := by
  rw [‚Üê subset_interior_iff_isOpen]
  simp only [subset_def, mem_interior]

theorem interior_iInter_subset (s : Œπ ‚Üí Set X) : interior (‚ãÇ i, s i) ‚äÜ ‚ãÇ i, interior (s i) :=
  subset_iInter fun _ => interior_mono <| iInter_subset _ _

theorem interior_iInter‚ÇÇ_subset (p : Œπ ‚Üí Sort*) (s : ‚àÄ i, p i ‚Üí Set X) :
    interior (‚ãÇ (i) (j), s i j) ‚äÜ ‚ãÇ (i) (j), interior (s i j) :=
  (interior_iInter_subset _).trans <| iInter_mono fun _ => interior_iInter_subset _

theorem interior_sInter_subset (S : Set (Set X)) : interior (‚ãÇ‚ÇÄ S) ‚äÜ ‚ãÇ s ‚àà S, interior s :=
  calc
    interior (‚ãÇ‚ÇÄ S) = interior (‚ãÇ s ‚àà S, s) := by rw [sInter_eq_biInter]
    _ ‚äÜ ‚ãÇ s ‚àà S, interior s := interior_iInter‚ÇÇ_subset _ _

theorem Filter.HasBasis.lift'_interior {l : Filter X} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set X}
    (h : l.HasBasis p s) : (l.lift' interior).HasBasis p fun i => interior (s i) :=
  h.lift' fun _ _ ‚Ü¶ interior_mono

theorem Filter.lift'_interior_le (l : Filter X) : l.lift' interior ‚â§ l := fun _s hs ‚Ü¶
  mem_of_superset (mem_lift' hs) interior_subset

theorem Filter.HasBasis.lift'_interior_eq_self {l : Filter X} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set X}
    (h : l.HasBasis p s) (ho : ‚àÄ i, p i ‚Üí IsOpen (s i)) : l.lift' interior = l :=
  le_antisymm l.lift'_interior_le <| h.lift'_interior.ge_iff.2 fun i hi ‚Ü¶ by
    simpa only [(ho i hi).interior_eq] using h.mem_of_mem hi

end Interior

section Closure

@[simp]
theorem isClosed_closure : IsClosed (closure s) :=
  isClosed_sInter fun _ => And.left

theorem subset_closure : s ‚äÜ closure s :=
  subset_sInter fun _ => And.right

theorem notMem_of_notMem_closure {P : X} (hP : P ‚àâ closure s) : P ‚àâ s := fun h =>
  hP (subset_closure h)

@[deprecated (since := "2025-05-23")] alias not_mem_of_not_mem_closure := notMem_of_notMem_closure

theorem closure_minimal (h‚ÇÅ : s ‚äÜ t) (h‚ÇÇ : IsClosed t) : closure s ‚äÜ t :=
  sInter_subset_of_mem ‚ü®h‚ÇÇ, h‚ÇÅ‚ü©

theorem Disjoint.closure_left (hd : Disjoint s t) (ht : IsOpen t) :
    Disjoint (closure s) t :=
  disjoint_compl_left.mono_left <| closure_minimal hd.subset_compl_right ht.isClosed_compl

theorem Disjoint.closure_right (hd : Disjoint s t) (hs : IsOpen s) :
    Disjoint s (closure t) :=
  (hd.symm.closure_left hs).symm

@[simp] theorem IsClosed.closure_eq (h : IsClosed s) : closure s = s :=
  Subset.antisymm (closure_minimal (Subset.refl s) h) subset_closure

theorem IsClosed.closure_subset (hs : IsClosed s) : closure s ‚äÜ s :=
  closure_minimal (Subset.refl _) hs

theorem IsClosed.closure_subset_iff (h‚ÇÅ : IsClosed t) : closure s ‚äÜ t ‚Üî s ‚äÜ t :=
  ‚ü®Subset.trans subset_closure, fun h => closure_minimal h h‚ÇÅ‚ü©

theorem IsClosed.mem_iff_closure_subset (hs : IsClosed s) :
    x ‚àà s ‚Üî closure ({x} : Set X) ‚äÜ s :=
  (hs.closure_subset_iff.trans Set.singleton_subset_iff).symm

@[mono, gcongr]
theorem closure_mono (h : s ‚äÜ t) : closure s ‚äÜ closure t :=
  closure_minimal (Subset.trans h subset_closure) isClosed_closure

theorem monotone_closure (X : Type*) [TopologicalSpace X] : Monotone (@closure X _) := fun _ _ =>
  closure_mono

theorem diff_subset_closure_iff : s \ t ‚äÜ closure t ‚Üî s ‚äÜ closure t := by
  rw [diff_subset_iff, union_eq_self_of_subset_left subset_closure]

theorem closure_inter_subset_inter_closure (s t : Set X) :
    closure (s ‚à© t) ‚äÜ closure s ‚à© closure t :=
  (monotone_closure X).map_inf_le s t

theorem isClosed_of_closure_subset (h : closure s ‚äÜ s) : IsClosed s := by
  rw [subset_closure.antisymm h]; exact isClosed_closure

theorem closure_eq_iff_isClosed : closure s = s ‚Üî IsClosed s :=
  ‚ü®fun h => h ‚ñ∏ isClosed_closure, IsClosed.closure_eq‚ü©

theorem closure_subset_iff_isClosed : closure s ‚äÜ s ‚Üî IsClosed s :=
  ‚ü®isClosed_of_closure_subset, IsClosed.closure_subset‚ü©

theorem closure_empty : closure (‚àÖ : Set X) = ‚àÖ :=
  isClosed_empty.closure_eq

@[simp]
theorem closure_empty_iff (s : Set X) : closure s = ‚àÖ ‚Üî s = ‚àÖ :=
  ‚ü®subset_eq_empty subset_closure, fun h => h.symm ‚ñ∏ closure_empty‚ü©

@[simp]
theorem closure_nonempty_iff : (closure s).Nonempty ‚Üî s.Nonempty := by
  simp only [nonempty_iff_ne_empty, Ne, closure_empty_iff]

alias ‚ü®Set.Nonempty.of_closure, Set.Nonempty.closure‚ü© := closure_nonempty_iff

theorem closure_univ : closure (univ : Set X) = univ :=
  isClosed_univ.closure_eq

theorem closure_closure : closure (closure s) = closure s :=
  isClosed_closure.closure_eq

theorem closure_eq_compl_interior_compl : closure s = (interior s·∂ú)·∂ú := by
  rw [interior, closure, compl_sUnion, compl_image_set_of]
  simp only [compl_subset_compl, isOpen_compl_iff]

@[simp]
theorem closure_union : closure (s ‚à™ t) = closure s ‚à™ closure t := by
  simp [closure_eq_compl_interior_compl, compl_inter]

theorem Set.Finite.closure_biUnion {Œπ : Type*} {s : Set Œπ} (hs : s.Finite) (f : Œπ ‚Üí Set X) :
    closure (‚ãÉ i ‚àà s, f i) = ‚ãÉ i ‚àà s, closure (f i) := by
  simp [closure_eq_compl_interior_compl, hs.interior_biInter]

theorem Set.Finite.closure_sUnion {S : Set (Set X)} (hS : S.Finite) :
    closure (‚ãÉ‚ÇÄ S) = ‚ãÉ s ‚àà S, closure s := by
  rw [sUnion_eq_biUnion, hS.closure_biUnion]

@[simp]
theorem Finset.closure_biUnion {Œπ : Type*} (s : Finset Œπ) (f : Œπ ‚Üí Set X) :
    closure (‚ãÉ i ‚àà s, f i) = ‚ãÉ i ‚àà s, closure (f i) :=
  s.finite_toSet.closure_biUnion f

@[simp]
theorem closure_iUnion_of_finite [Finite Œπ] (f : Œπ ‚Üí Set X) :
    closure (‚ãÉ i, f i) = ‚ãÉ i, closure (f i) := by
  rw [‚Üê sUnion_range, (finite_range _).closure_sUnion, biUnion_range]

@[simp]
theorem closure_iUnion‚ÇÇ_lt_nat {n : ‚Ñï} (f : ‚Ñï ‚Üí Set X) :
    closure (‚ãÉ m < n, f m) = ‚ãÉ m < n, closure (f m) :=
  (finite_lt_nat n).closure_biUnion f

@[simp]
theorem closure_iUnion‚ÇÇ_le_nat {n : ‚Ñï} (f : ‚Ñï ‚Üí Set X) :
    closure (‚ãÉ m ‚â§ n, f m) = ‚ãÉ m ‚â§ n, closure (f m) :=
  (finite_le_nat n).closure_biUnion f

theorem interior_subset_closure : interior s ‚äÜ closure s :=
  Subset.trans interior_subset subset_closure

@[simp]
theorem interior_compl : interior s·∂ú = (closure s)·∂ú := by
  simp [closure_eq_compl_interior_compl]

@[simp]
theorem closure_compl : closure s·∂ú = (interior s)·∂ú := by
  simp [closure_eq_compl_interior_compl]

theorem mem_closure_iff :
    x ‚àà closure s ‚Üî ‚àÄ o, IsOpen o ‚Üí x ‚àà o ‚Üí (o ‚à© s).Nonempty :=
  ‚ü®fun h o oo ao =>
    by_contradiction fun os =>
      have : s ‚äÜ o·∂ú := fun x xs xo => os ‚ü®x, xo, xs‚ü©
      closure_minimal this (isClosed_compl_iff.2 oo) h ao,
    fun H _ ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© =>
    by_contradiction fun nc =>
      let ‚ü®_, hc, hs‚ü© := H _ h‚ÇÅ.isOpen_compl nc
      hc (h‚ÇÇ hs)‚ü©

theorem closure_inter_open_nonempty_iff (h : IsOpen t) :
    (closure s ‚à© t).Nonempty ‚Üî (s ‚à© t).Nonempty :=
  ‚ü®fun ‚ü®_x, hxcs, hxt‚ü© => inter_comm t s ‚ñ∏ mem_closure_iff.1 hxcs t h hxt, fun h =>
    h.mono <| inf_le_inf_right t subset_closure‚ü©

theorem Filter.le_lift'_closure (l : Filter X) : l ‚â§ l.lift' closure :=
  le_lift'.2 fun _ h => mem_of_superset h subset_closure

theorem Filter.HasBasis.lift'_closure {l : Filter X} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set X}
    (h : l.HasBasis p s) : (l.lift' closure).HasBasis p fun i => closure (s i) :=
  h.lift' (monotone_closure X)

theorem Filter.HasBasis.lift'_closure_eq_self {l : Filter X} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set X}
    (h : l.HasBasis p s) (hc : ‚àÄ i, p i ‚Üí IsClosed (s i)) : l.lift' closure = l :=
  le_antisymm (h.ge_iff.2 fun i hi => (hc i hi).closure_eq ‚ñ∏ mem_lift' (h.mem_of_mem hi))
    l.le_lift'_closure

@[simp]
theorem Filter.lift'_closure_eq_bot {l : Filter X} : l.lift' closure = ‚ä• ‚Üî l = ‚ä• :=
  ‚ü®fun h => bot_unique <| h ‚ñ∏ l.le_lift'_closure, fun h =>
    h.symm ‚ñ∏ by rw [lift'_bot (monotone_closure _), closure_empty, principal_empty]‚ü©

theorem dense_iff_closure_eq : Dense s ‚Üî closure s = univ :=
  eq_univ_iff_forall.symm

alias ‚ü®Dense.closure_eq, _‚ü© := dense_iff_closure_eq

theorem interior_eq_empty_iff_dense_compl : interior s = ‚àÖ ‚Üî Dense s·∂ú := by
  rw [dense_iff_closure_eq, closure_compl, compl_univ_iff]

theorem Dense.interior_compl (h : Dense s) : interior s·∂ú = ‚àÖ :=
  interior_eq_empty_iff_dense_compl.2 <| by rwa [compl_compl]

/-- The closure of a set `s` is dense if and only if `s` is dense. -/
@[simp]
theorem dense_closure : Dense (closure s) ‚Üî Dense s := by
  rw [Dense, Dense, closure_closure]

protected alias ‚ü®_, Dense.closure‚ü© := dense_closure
alias ‚ü®Dense.of_closure, _‚ü© := dense_closure

@[simp]
theorem dense_univ : Dense (univ : Set X) := fun _ => subset_closure trivial

/-- A set is dense if and only if it has a nonempty intersection with each nonempty open set. -/
theorem dense_iff_inter_open :
    Dense s ‚Üî ‚àÄ U, IsOpen U ‚Üí U.Nonempty ‚Üí (U ‚à© s).Nonempty := by
  constructor <;> intro h
  ¬∑ rintro U U_op ‚ü®x, x_in‚ü©
    exact mem_closure_iff.1 (h _) U U_op x_in
  ¬∑ intro x
    rw [mem_closure_iff]
    intro U U_op x_in
    exact h U U_op ‚ü®_, x_in‚ü©

alias ‚ü®Dense.inter_open_nonempty, _‚ü© := dense_iff_inter_open

theorem Dense.exists_mem_open (hs : Dense s) {U : Set X} (ho : IsOpen U)
    (hne : U.Nonempty) : ‚àÉ x ‚àà s, x ‚àà U :=
  let ‚ü®x, hx‚ü© := hs.inter_open_nonempty U ho hne
  ‚ü®x, hx.2, hx.1‚ü©

theorem Dense.nonempty_iff (hs : Dense s) : s.Nonempty ‚Üî Nonempty X :=
  ‚ü®fun ‚ü®x, _‚ü© => ‚ü®x‚ü©, fun ‚ü®x‚ü© =>
    let ‚ü®y, hy‚ü© := hs.inter_open_nonempty _ isOpen_univ ‚ü®x, trivial‚ü©
    ‚ü®y, hy.2‚ü©‚ü©

theorem Dense.nonempty [h : Nonempty X] (hs : Dense s) : s.Nonempty :=
  hs.nonempty_iff.2 h

@[mono]
theorem Dense.mono (h : s‚ÇÅ ‚äÜ s‚ÇÇ) (hd : Dense s‚ÇÅ) : Dense s‚ÇÇ := fun x =>
  closure_mono h (hd x)

/-- Complement to a singleton is dense if and only if the singleton is not an open set. -/
theorem dense_compl_singleton_iff_not_open :
    Dense ({x}·∂ú : Set X) ‚Üî ¬¨IsOpen ({x} : Set X) := by
  constructor
  ¬∑ intro hd ho
    exact (hd.inter_open_nonempty _ ho (singleton_nonempty _)).ne_empty (inter_compl_self _)
  ¬∑ refine fun ho => dense_iff_inter_open.2 fun U hU hne => inter_compl_nonempty_iff.2 fun hUx => ?_
    obtain rfl : U = {x} := eq_singleton_iff_nonempty_unique_mem.2 ‚ü®hne, hUx‚ü©
    exact ho hU

/-- If a closed property holds for a dense subset, it holds for the whole space. -/
@[elab_as_elim]
lemma Dense.induction (hs : Dense s) {P : X ‚Üí Prop}
    (mem : ‚àÄ x ‚àà s, P x) (isClosed : IsClosed { x | P x }) (x : X) : P x :=
  hs.closure_eq.symm.subset.trans (isClosed.closure_subset_iff.mpr mem) (Set.mem_univ _)

theorem IsOpen.subset_interior_closure {s : Set X} (s_open : IsOpen s) :
    s ‚äÜ interior (closure s) := s_open.subset_interior_iff.mpr subset_closure

theorem IsClosed.closure_interior_subset {s : Set X} (s_closed : IsClosed s) :
    closure (interior s) ‚äÜ s := s_closed.closure_subset_iff.mpr interior_subset

end Closure

section Frontier

@[simp]
theorem closure_diff_interior (s : Set X) : closure s \ interior s = frontier s :=
  rfl

/-- Interior and frontier are disjoint. -/
lemma disjoint_interior_frontier : Disjoint (interior s) (frontier s) := by
  rw [disjoint_iff_inter_eq_empty, ‚Üê closure_diff_interior, diff_eq,
    ‚Üê inter_assoc, inter_comm, ‚Üê inter_assoc, compl_inter_self, empty_inter]

@[simp]
theorem closure_diff_frontier (s : Set X) : closure s \ frontier s = interior s := by
  rw [frontier, diff_diff_right_self, inter_eq_self_of_subset_right interior_subset_closure]

@[simp]
theorem self_diff_frontier (s : Set X) : s \ frontier s = interior s := by
  rw [frontier, diff_diff_right, diff_eq_empty.2 subset_closure,
    inter_eq_self_of_subset_right interior_subset, empty_union]

theorem frontier_eq_closure_inter_closure : frontier s = closure s ‚à© closure s·∂ú := by
  rw [closure_compl, frontier, diff_eq]

theorem frontier_subset_closure : frontier s ‚äÜ closure s :=
  diff_subset

theorem frontier_subset_iff_isClosed : frontier s ‚äÜ s ‚Üî IsClosed s := by
  rw [frontier, diff_subset_iff, union_eq_right.mpr interior_subset, closure_subset_iff_isClosed]

alias ‚ü®_, IsClosed.frontier_subset‚ü© := frontier_subset_iff_isClosed

theorem frontier_closure_subset : frontier (closure s) ‚äÜ frontier s :=
  diff_subset_diff closure_closure.subset <| interior_mono subset_closure

theorem frontier_interior_subset : frontier (interior s) ‚äÜ frontier s :=
  diff_subset_diff (closure_mono interior_subset) interior_interior.symm.subset

/-- The complement of a set has the same frontier as the original set. -/
@[simp]
theorem frontier_compl (s : Set X) : frontier s·∂ú = frontier s := by
  simp only [frontier_eq_closure_inter_closure, compl_compl, inter_comm]

@[simp]
theorem frontier_univ : frontier (univ : Set X) = ‚àÖ := by simp [frontier]

@[simp]
theorem frontier_empty : frontier (‚àÖ : Set X) = ‚àÖ := by simp [frontier]

theorem frontier_inter_subset (s t : Set X) :
    frontier (s ‚à© t) ‚äÜ frontier s ‚à© closure t ‚à™ closure s ‚à© frontier t := by
  simp only [frontier_eq_closure_inter_closure, compl_inter, closure_union]
  refine (inter_subset_inter_left _ (closure_inter_subset_inter_closure s t)).trans_eq ?_
  simp only [inter_union_distrib_left, union_inter_distrib_right, inter_assoc,
    inter_comm (closure t)]

theorem frontier_union_subset (s t : Set X) :
    frontier (s ‚à™ t) ‚äÜ frontier s ‚à© closure t·∂ú ‚à™ closure s·∂ú ‚à© frontier t := by
  simpa only [frontier_compl, ‚Üê compl_union] using frontier_inter_subset s·∂ú t·∂ú

theorem IsClosed.frontier_eq (hs : IsClosed s) : frontier s = s \ interior s := by
  rw [frontier, hs.closure_eq]

theorem IsOpen.frontier_eq (hs : IsOpen s) : frontier s = closure s \ s := by
  rw [frontier, hs.interior_eq]

theorem IsOpen.inter_frontier_eq (hs : IsOpen s) : s ‚à© frontier s = ‚àÖ := by
  rw [hs.frontier_eq, inter_diff_self]

theorem disjoint_frontier_iff_isOpen : Disjoint (frontier s) s ‚Üî IsOpen s := by
  rw [‚Üê isClosed_compl_iff, ‚Üê frontier_subset_iff_isClosed,
    frontier_compl, subset_compl_iff_disjoint_right]

/-- The frontier of a set is closed. -/
theorem isClosed_frontier : IsClosed (frontier s) := by
  rw [frontier_eq_closure_inter_closure]; exact IsClosed.inter isClosed_closure isClosed_closure

/-- The frontier of a closed set has no interior point. -/
theorem interior_frontier (h : IsClosed s) : interior (frontier s) = ‚àÖ := by
  have A : frontier s = s \ interior s := h.frontier_eq
  have B : interior (frontier s) ‚äÜ interior s := by rw [A]; exact interior_mono diff_subset
  have C : interior (frontier s) ‚äÜ frontier s := interior_subset
  have : interior (frontier s) ‚äÜ interior s ‚à© (s \ interior s) :=
    subset_inter B (by simpa [A] using C)
  rwa [inter_diff_self, subset_empty_iff] at this

theorem closure_eq_interior_union_frontier (s : Set X) : closure s = interior s ‚à™ frontier s :=
  (union_diff_cancel interior_subset_closure).symm

theorem closure_eq_self_union_frontier (s : Set X) : closure s = s ‚à™ frontier s :=
  (union_diff_cancel' interior_subset subset_closure).symm

theorem Disjoint.frontier_left (ht : IsOpen t) (hd : Disjoint s t) : Disjoint (frontier s) t :=
  subset_compl_iff_disjoint_right.1 <|
    frontier_subset_closure.trans <| closure_minimal (disjoint_left.1 hd) <| isClosed_compl_iff.2 ht

theorem Disjoint.frontier_right (hs : IsOpen s) (hd : Disjoint s t) : Disjoint s (frontier t) :=
  (hd.symm.frontier_left hs).symm

theorem frontier_eq_inter_compl_interior : frontier s = (interior s)·∂ú ‚à© (interior s·∂ú)·∂ú := by
  rw [‚Üê frontier_compl, ‚Üê closure_compl, ‚Üê diff_eq, closure_diff_interior]

theorem compl_frontier_eq_union_interior : (frontier s)·∂ú = interior s ‚à™ interior s·∂ú := by
  rw [frontier_eq_inter_compl_interior]
  simp only [compl_inter, compl_compl]

end Frontier
