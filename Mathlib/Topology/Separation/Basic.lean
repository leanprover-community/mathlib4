/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro
-/
import Mathlib.Algebra.Group.Support
import Mathlib.Topology.Connected.TotallyDisconnected
import Mathlib.Topology.Inseparable
import Mathlib.Topology.Separation.SeparatedNhds
import Mathlib.Topology.Compactness.LocallyCompact

/-!
# Separation properties of topological spaces

This file defines some of the weaker separation axioms (under the Kolmogorov classification),
notably T‚ÇÄ, R‚ÇÄ, T‚ÇÅ and R‚ÇÅ spaces. For T‚ÇÇ (Hausdorff) spaces and other stronger
conditions, see the file `Topology/Separation/Hausdorff.lean`.

## Main definitions

* `SeparatedNhds`: Two `Set`s are separated by neighbourhoods if they are contained in disjoint
  open sets.
* `HasSeparatingCover`: A set has a countable cover that can be used with
  `hasSeparatingCovers_iff_separatedNhds` to witness when two `Set`s have `SeparatedNhds`.
* `T0Space`: A T‚ÇÄ/Kolmogorov space is a space where, for every two points `x ‚â† y`,
  there is an open set that contains one, but not the other.
* `R0Space`: An R‚ÇÄ space (sometimes called a *symmetric space*) is a topological space
  such that the `Specializes` relation is symmetric.
* `T1Space`: A T‚ÇÅ/Fr√©chet space is a space where every singleton set is closed.
  This is equivalent to, for every pair `x ‚â† y`, there existing an open set containing `x`
  but not `y` (`t1Space_iff_exists_open` shows that these conditions are equivalent.)
  T‚ÇÅ implies T‚ÇÄ and R‚ÇÄ.
* `R1Space`: An R‚ÇÅ/preregular space is a space where any two topologically distinguishable points
  have disjoint neighbourhoods. R‚ÇÅ implies R‚ÇÄ.

Note that `mathlib` adopts the modern convention that `m ‚â§ n` if and only if `T_m ‚Üí T_n`, but
occasionally the literature swaps definitions for e.g. T‚ÇÉ and regular.

## Main results

### T‚ÇÄ spaces

* `IsClosed.exists_closed_singleton`: Given a closed set `S` in a compact T‚ÇÄ space,
  there is some `x ‚àà S` such that `{x}` is closed.
* `exists_isOpen_singleton_of_isOpen_finite`: Given an open finite set `S` in a T‚ÇÄ space,
  there is some `x ‚àà S` such that `{x}` is open.

### T‚ÇÅ spaces

* `isClosedMap_const`: The constant map is a closed map.
* `Finite.instDiscreteTopology`: A finite T‚ÇÅ space must have the discrete topology.

## References

* <https://en.wikipedia.org/wiki/Separation_axiom>
* [Willard's *General Topology*][zbMATH02107988]
-/

open Function Set Filter Topology TopologicalSpace

universe u v

variable {X : Type*} {Y : Type*} [TopologicalSpace X]

section Separation

/-- A T‚ÇÄ space, also known as a Kolmogorov space, is a topological space such that for every pair
`x ‚â† y`, there is an open set containing one but not the other. We formulate the definition in terms
of the `Inseparable` relation. -/
class T0Space (X : Type u) [TopologicalSpace X] : Prop where
  /-- Two inseparable points in a T‚ÇÄ space are equal. -/
  t0 : ‚àÄ ‚¶Éx y : X‚¶Ñ, Inseparable x y ‚Üí x = y

theorem t0Space_iff_inseparable (X : Type u) [TopologicalSpace X] :
    T0Space X ‚Üî ‚àÄ x y : X, Inseparable x y ‚Üí x = y :=
  ‚ü®fun ‚ü®h‚ü© => h, fun h => ‚ü®h‚ü©‚ü©

theorem t0Space_iff_not_inseparable (X : Type u) [TopologicalSpace X] :
    T0Space X ‚Üî Pairwise fun x y : X => ¬¨Inseparable x y := by
  simp only [t0Space_iff_inseparable, Ne, not_imp_not, Pairwise]

theorem Inseparable.eq [T0Space X] {x y : X} (h : Inseparable x y) : x = y :=
  T0Space.t0 h

/-- A topology inducing map from a T‚ÇÄ space is injective. -/
protected theorem Topology.IsInducing.injective [TopologicalSpace Y] [T0Space X] {f : X ‚Üí Y}
    (hf : IsInducing f) : Injective f := fun _ _ h =>
  (hf.inseparable_iff.1 <| .of_eq h).eq

@[deprecated (since := "2024-10-28")] alias Inducing.injective := IsInducing.injective

/-- A topology inducing map from a T‚ÇÄ space is a topological embedding. -/
protected theorem Topology.IsInducing.isEmbedding [TopologicalSpace Y] [T0Space X] {f : X ‚Üí Y}
    (hf : IsInducing f) : IsEmbedding f :=
  ‚ü®hf, hf.injective‚ü©

@[deprecated (since := "2024-10-28")] alias Inducing.isEmbedding := IsInducing.isEmbedding

@[deprecated (since := "2024-10-26")]
alias Inducing.embedding := Topology.IsInducing.isEmbedding

lemma isEmbedding_iff_isInducing [TopologicalSpace Y] [T0Space X] {f : X ‚Üí Y} :
    IsEmbedding f ‚Üî IsInducing f :=
  ‚ü®IsEmbedding.isInducing, IsInducing.isEmbedding‚ü©

@[deprecated (since := "2024-10-28")] alias isEmbedding_iff_inducing := isEmbedding_iff_isInducing

@[deprecated (since := "2024-10-26")]
alias embedding_iff_inducing := isEmbedding_iff_isInducing

theorem t0Space_iff_nhds_injective (X : Type u) [TopologicalSpace X] :
    T0Space X ‚Üî Injective (ùìù : X ‚Üí Filter X) :=
  t0Space_iff_inseparable X

theorem nhds_injective [T0Space X] : Injective (ùìù : X ‚Üí Filter X) :=
  (t0Space_iff_nhds_injective X).1 ‚Äπ_‚Ä∫

theorem inseparable_iff_eq [T0Space X] {x y : X} : Inseparable x y ‚Üî x = y :=
  nhds_injective.eq_iff

@[simp]
theorem nhds_eq_nhds_iff [T0Space X] {a b : X} : ùìù a = ùìù b ‚Üî a = b :=
  nhds_injective.eq_iff

@[simp]
theorem inseparable_eq_eq [T0Space X] : Inseparable = @Eq X :=
  funext‚ÇÇ fun _ _ => propext inseparable_iff_eq

theorem TopologicalSpace.IsTopologicalBasis.inseparable_iff {b : Set (Set X)}
    (hb : IsTopologicalBasis b) {x y : X} : Inseparable x y ‚Üî ‚àÄ s ‚àà b, (x ‚àà s ‚Üî y ‚àà s) :=
  ‚ü®fun h _ hs ‚Ü¶ inseparable_iff_forall_isOpen.1 h _ (hb.isOpen hs),
    fun h ‚Ü¶ hb.nhds_hasBasis.eq_of_same_basis <| by
      convert hb.nhds_hasBasis using 2
      exact and_congr_right (h _)‚ü©

theorem TopologicalSpace.IsTopologicalBasis.eq_iff [T0Space X] {b : Set (Set X)}
    (hb : IsTopologicalBasis b) {x y : X} : x = y ‚Üî ‚àÄ s ‚àà b, (x ‚àà s ‚Üî y ‚àà s) :=
  inseparable_iff_eq.symm.trans hb.inseparable_iff

theorem t0Space_iff_exists_isOpen_xor'_mem (X : Type u) [TopologicalSpace X] :
    T0Space X ‚Üî Pairwise fun x y => ‚àÉ U : Set X, IsOpen U ‚àß Xor' (x ‚àà U) (y ‚àà U) := by
  simp only [t0Space_iff_not_inseparable, xor_iff_not_iff, not_forall, exists_prop,
    inseparable_iff_forall_isOpen, Pairwise]

theorem exists_isOpen_xor'_mem [T0Space X] {x y : X} (h : x ‚â† y) :
    ‚àÉ U : Set X, IsOpen U ‚àß Xor' (x ‚àà U) (y ‚àà U) :=
  (t0Space_iff_exists_isOpen_xor'_mem X).1 ‚Äπ_‚Ä∫ h

/-- Specialization forms a partial order on a t0 topological space. -/
def specializationOrder (X) [TopologicalSpace X] [T0Space X] : PartialOrder X :=
  { specializationPreorder X, PartialOrder.lift (OrderDual.toDual ‚àò ùìù) nhds_injective with }

instance SeparationQuotient.instT0Space : T0Space (SeparationQuotient X) :=
  ‚ü®fun x y => Quotient.inductionOn‚ÇÇ' x y fun _ _ h =>
    SeparationQuotient.mk_eq_mk.2 <| SeparationQuotient.isInducing_mk.inseparable_iff.1 h‚ü©

theorem minimal_nonempty_closed_subsingleton [T0Space X] {s : Set X} (hs : IsClosed s)
    (hmin : ‚àÄ t, t ‚äÜ s ‚Üí t.Nonempty ‚Üí IsClosed t ‚Üí t = s) : s.Subsingleton := by
  refine fun x hx y hy => of_not_not fun hxy => ?_
  rcases exists_isOpen_xor'_mem hxy with ‚ü®U, hUo, hU‚ü©
  wlog h : x ‚àà U ‚àß y ‚àâ U
  ¬∑ refine this hs hmin y hy x hx (Ne.symm hxy) U hUo hU.symm (hU.resolve_left h)
  cases' h with hxU hyU
  have : s \ U = s := hmin (s \ U) diff_subset ‚ü®y, hy, hyU‚ü© (hs.sdiff hUo)
  exact (this.symm.subset hx).2 hxU

theorem minimal_nonempty_closed_eq_singleton [T0Space X] {s : Set X} (hs : IsClosed s)
    (hne : s.Nonempty) (hmin : ‚àÄ t, t ‚äÜ s ‚Üí t.Nonempty ‚Üí IsClosed t ‚Üí t = s) : ‚àÉ x, s = {x} :=
  exists_eq_singleton_iff_nonempty_subsingleton.2
    ‚ü®hne, minimal_nonempty_closed_subsingleton hs hmin‚ü©

/-- Given a closed set `S` in a compact T‚ÇÄ space, there is some `x ‚àà S` such that `{x}` is
closed. -/
theorem IsClosed.exists_closed_singleton [T0Space X] [CompactSpace X] {S : Set X}
    (hS : IsClosed S) (hne : S.Nonempty) : ‚àÉ x : X, x ‚àà S ‚àß IsClosed ({x} : Set X) := by
  obtain ‚ü®V, Vsub, Vne, Vcls, hV‚ü© := hS.exists_minimal_nonempty_closed_subset hne
  rcases minimal_nonempty_closed_eq_singleton Vcls Vne hV with ‚ü®x, rfl‚ü©
  exact ‚ü®x, Vsub (mem_singleton x), Vcls‚ü©

theorem minimal_nonempty_open_subsingleton [T0Space X] {s : Set X} (hs : IsOpen s)
    (hmin : ‚àÄ t, t ‚äÜ s ‚Üí t.Nonempty ‚Üí IsOpen t ‚Üí t = s) : s.Subsingleton := by
  refine fun x hx y hy => of_not_not fun hxy => ?_
  rcases exists_isOpen_xor'_mem hxy with ‚ü®U, hUo, hU‚ü©
  wlog h : x ‚àà U ‚àß y ‚àâ U
  ¬∑ exact this hs hmin y hy x hx (Ne.symm hxy) U hUo hU.symm (hU.resolve_left h)
  cases' h with hxU hyU
  have : s ‚à© U = s := hmin (s ‚à© U) inter_subset_left ‚ü®x, hx, hxU‚ü© (hs.inter hUo)
  exact hyU (this.symm.subset hy).2

theorem minimal_nonempty_open_eq_singleton [T0Space X] {s : Set X} (hs : IsOpen s)
    (hne : s.Nonempty) (hmin : ‚àÄ t, t ‚äÜ s ‚Üí t.Nonempty ‚Üí IsOpen t ‚Üí t = s) : ‚àÉ x, s = {x} :=
  exists_eq_singleton_iff_nonempty_subsingleton.2 ‚ü®hne, minimal_nonempty_open_subsingleton hs hmin‚ü©

/-- Given an open finite set `S` in a T‚ÇÄ space, there is some `x ‚àà S` such that `{x}` is open. -/
theorem exists_isOpen_singleton_of_isOpen_finite [T0Space X] {s : Set X} (hfin : s.Finite)
    (hne : s.Nonempty) (ho : IsOpen s) : ‚àÉ x ‚àà s, IsOpen ({x} : Set X) := by
  lift s to Finset X using hfin
  induction' s using Finset.strongInductionOn with s ihs
  rcases em (‚àÉ t, t ‚äÇ s ‚àß t.Nonempty ‚àß IsOpen (t : Set X)) with (‚ü®t, hts, htne, hto‚ü© | ht)
  ¬∑ rcases ihs t hts htne hto with ‚ü®x, hxt, hxo‚ü©
    exact ‚ü®x, hts.1 hxt, hxo‚ü©
  ¬∑ -- Porting note: was `rcases minimal_nonempty_open_eq_singleton ho hne _ with ‚ü®x, hx‚ü©`
    --               https://github.com/leanprover/std4/issues/116
    rsuffices ‚ü®x, hx‚ü© : ‚àÉ x, s.toSet = {x}
    ¬∑ exact ‚ü®x, hx.symm ‚ñ∏ rfl, hx ‚ñ∏ ho‚ü©
    refine minimal_nonempty_open_eq_singleton ho hne ?_
    refine fun t hts htne hto => of_not_not fun hts' => ht ?_
    lift t to Finset X using s.finite_toSet.subset hts
    exact ‚ü®t, ssubset_iff_subset_ne.2 ‚ü®hts, mt Finset.coe_inj.2 hts'‚ü©, htne, hto‚ü©

theorem exists_open_singleton_of_finite [T0Space X] [Finite X] [Nonempty X] :
    ‚àÉ x : X, IsOpen ({x} : Set X) :=
  let ‚ü®x, _, h‚ü© := exists_isOpen_singleton_of_isOpen_finite (Set.toFinite _)
    univ_nonempty isOpen_univ
  ‚ü®x, h‚ü©

theorem t0Space_of_injective_of_continuous [TopologicalSpace Y] {f : X ‚Üí Y}
    (hf : Function.Injective f) (hf' : Continuous f) [T0Space Y] : T0Space X :=
  ‚ü®fun _ _ h => hf <| (h.map hf').eq‚ü©

protected theorem Topology.IsEmbedding.t0Space [TopologicalSpace Y] [T0Space Y] {f : X ‚Üí Y}
    (hf : IsEmbedding f) : T0Space X :=
  t0Space_of_injective_of_continuous hf.injective hf.continuous

@[deprecated (since := "2024-10-26")]
alias Embedding.t0Space := IsEmbedding.t0Space

instance Subtype.t0Space [T0Space X] {p : X ‚Üí Prop} : T0Space (Subtype p) :=
  IsEmbedding.subtypeVal.t0Space

theorem t0Space_iff_or_not_mem_closure (X : Type u) [TopologicalSpace X] :
    T0Space X ‚Üî Pairwise fun a b : X => a ‚àâ closure ({b} : Set X) ‚à® b ‚àâ closure ({a} : Set X) := by
  simp only [t0Space_iff_not_inseparable, inseparable_iff_mem_closure, not_and_or]

instance Prod.instT0Space [TopologicalSpace Y] [T0Space X] [T0Space Y] : T0Space (X √ó Y) :=
  ‚ü®fun _ _ h => Prod.ext (h.map continuous_fst).eq (h.map continuous_snd).eq‚ü©

instance Pi.instT0Space {Œπ : Type*} {X : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (X i)]
    [‚àÄ i, T0Space (X i)] :
    T0Space (‚àÄ i, X i) :=
  ‚ü®fun _ _ h => funext fun i => (h.map (continuous_apply i)).eq‚ü©

instance ULift.instT0Space [T0Space X] : T0Space (ULift X) := IsEmbedding.uliftDown.t0Space

theorem T0Space.of_cover (h : ‚àÄ x y, Inseparable x y ‚Üí ‚àÉ s : Set X, x ‚àà s ‚àß y ‚àà s ‚àß T0Space s) :
    T0Space X := by
  refine ‚ü®fun x y hxy => ?_‚ü©
  rcases h x y hxy with ‚ü®s, hxs, hys, hs‚ü©
  lift x to s using hxs; lift y to s using hys
  rw [‚Üê subtype_inseparable_iff] at hxy
  exact congr_arg Subtype.val hxy.eq

theorem T0Space.of_open_cover (h : ‚àÄ x, ‚àÉ s : Set X, x ‚àà s ‚àß IsOpen s ‚àß T0Space s) : T0Space X :=
  T0Space.of_cover fun x _ hxy =>
    let ‚ü®s, hxs, hso, hs‚ü© := h x
    ‚ü®s, hxs, (hxy.mem_open_iff hso).1 hxs, hs‚ü©

/-- A topological space is called an R‚ÇÄ space, if `Specializes` relation is symmetric.

In other words, given two points `x y : X`,
if every neighborhood of `y` contains `x`, then every neighborhood of `x` contains `y`. -/
@[mk_iff]
class R0Space (X : Type u) [TopologicalSpace X] : Prop where
  /-- In an R‚ÇÄ space, the `Specializes` relation is symmetric. -/
  specializes_symmetric : Symmetric (Specializes : X ‚Üí X ‚Üí Prop)

export R0Space (specializes_symmetric)

section R0Space

variable [R0Space X] {x y : X}

/-- In an R‚ÇÄ space, the `Specializes` relation is symmetric, dot notation version. -/
theorem Specializes.symm (h : x ‚§≥ y) : y ‚§≥ x := specializes_symmetric h

/-- In an R‚ÇÄ space, the `Specializes` relation is symmetric, `Iff` version. -/
theorem specializes_comm : x ‚§≥ y ‚Üî y ‚§≥ x := ‚ü®Specializes.symm, Specializes.symm‚ü©

/-- In an R‚ÇÄ space, `Specializes` is equivalent to `Inseparable`. -/
theorem specializes_iff_inseparable : x ‚§≥ y ‚Üî Inseparable x y :=
  ‚ü®fun h ‚Ü¶ h.antisymm h.symm, Inseparable.specializes‚ü©

/-- In an R‚ÇÄ space, `Specializes` implies `Inseparable`. -/
alias ‚ü®Specializes.inseparable, _‚ü© := specializes_iff_inseparable

theorem Topology.IsInducing.r0Space [TopologicalSpace Y] {f : Y ‚Üí X} (hf : IsInducing f) :
    R0Space Y where
  specializes_symmetric a b := by
    simpa only [‚Üê hf.specializes_iff] using Specializes.symm

@[deprecated (since := "2024-10-28")] alias Inducing.r0Space := IsInducing.r0Space

instance {p : X ‚Üí Prop} : R0Space {x // p x} := IsInducing.subtypeVal.r0Space

instance [TopologicalSpace Y] [R0Space Y] : R0Space (X √ó Y) where
  specializes_symmetric _ _ h := h.fst.symm.prod h.snd.symm

instance {Œπ : Type*} {X : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (X i)] [‚àÄ i, R0Space (X i)] :
    R0Space (‚àÄ i, X i) where
  specializes_symmetric _ _ h := specializes_pi.2 fun i ‚Ü¶ (specializes_pi.1 h i).symm

/-- In an R‚ÇÄ space, the closure of a singleton is a compact set. -/
theorem isCompact_closure_singleton : IsCompact (closure {x}) := by
  refine isCompact_of_finite_subcover fun U hUo hxU ‚Ü¶ ?_
  obtain ‚ü®i, hi‚ü© : ‚àÉ i, x ‚àà U i := mem_iUnion.1 <| hxU <| subset_closure rfl
  refine ‚ü®{i}, fun y hy ‚Ü¶ ?_‚ü©
  rw [‚Üê specializes_iff_mem_closure, specializes_comm] at hy
  simpa using hy.mem_open (hUo i) hi

theorem Filter.coclosedCompact_le_cofinite : coclosedCompact X ‚â§ cofinite :=
  le_cofinite_iff_compl_singleton_mem.2 fun _ ‚Ü¶
    compl_mem_coclosedCompact.2 isCompact_closure_singleton

variable (X)

/-- In an R‚ÇÄ space, relatively compact sets form a bornology.
Its cobounded filter is `Filter.coclosedCompact`.
See also `Bornology.inCompact` the bornology of sets contained in a compact set. -/
def Bornology.relativelyCompact : Bornology X where
  cobounded' := Filter.coclosedCompact X
  le_cofinite' := Filter.coclosedCompact_le_cofinite

variable {X}

theorem Bornology.relativelyCompact.isBounded_iff {s : Set X} :
    @Bornology.IsBounded _ (Bornology.relativelyCompact X) s ‚Üî IsCompact (closure s) :=
  compl_mem_coclosedCompact

/-- In an R‚ÇÄ space, the closure of a finite set is a compact set. -/
theorem Set.Finite.isCompact_closure {s : Set X} (hs : s.Finite) : IsCompact (closure s) :=
  let _ : Bornology X := .relativelyCompact X
  Bornology.relativelyCompact.isBounded_iff.1 hs.isBounded

end R0Space

/-- A T‚ÇÅ space, also known as a Fr√©chet space, is a topological space
  where every singleton set is closed. Equivalently, for every pair
  `x ‚â† y`, there is an open set containing `x` and not `y`. -/
class T1Space (X : Type u) [TopologicalSpace X] : Prop where
  /-- A singleton in a T‚ÇÅ space is a closed set. -/
  t1 : ‚àÄ x, IsClosed ({x} : Set X)

theorem isClosed_singleton [T1Space X] {x : X} : IsClosed ({x} : Set X) :=
  T1Space.t1 x

theorem isOpen_compl_singleton [T1Space X] {x : X} : IsOpen ({x}·∂ú : Set X) :=
  isClosed_singleton.isOpen_compl

theorem isOpen_ne [T1Space X] {x : X} : IsOpen { y | y ‚â† x } :=
  isOpen_compl_singleton

@[to_additive]
theorem Continuous.isOpen_mulSupport [T1Space X] [One X] [TopologicalSpace Y] {f : Y ‚Üí X}
    (hf : Continuous f) : IsOpen (mulSupport f) :=
  isOpen_ne.preimage hf

theorem Ne.nhdsWithin_compl_singleton [T1Space X] {x y : X} (h : x ‚â† y) : ùìù[{y}·∂ú] x = ùìù x :=
  isOpen_ne.nhdsWithin_eq h

theorem Ne.nhdsWithin_diff_singleton [T1Space X] {x y : X} (h : x ‚â† y) (s : Set X) :
    ùìù[s \ {y}] x = ùìù[s] x := by
  rw [diff_eq, inter_comm, nhdsWithin_inter_of_mem]
  exact mem_nhdsWithin_of_mem_nhds (isOpen_ne.mem_nhds h)

lemma nhdsWithin_compl_singleton_le [T1Space X] (x y : X) : ùìù[{x}·∂ú] x ‚â§ ùìù[{y}·∂ú] x := by
  rcases eq_or_ne x y with rfl|hy
  ¬∑ exact Eq.le rfl
  ¬∑ rw [Ne.nhdsWithin_compl_singleton hy]
    exact nhdsWithin_le_nhds

theorem isOpen_setOf_eventually_nhdsWithin [T1Space X] {p : X ‚Üí Prop} :
    IsOpen { x | ‚àÄ·∂† y in ùìù[‚â†] x, p y } := by
  refine isOpen_iff_mem_nhds.mpr fun a ha => ?_
  filter_upwards [eventually_nhds_nhdsWithin.mpr ha] with b hb
  rcases eq_or_ne a b with rfl | h
  ¬∑ exact hb
  ¬∑ rw [h.symm.nhdsWithin_compl_singleton] at hb
    exact hb.filter_mono nhdsWithin_le_nhds

protected theorem Set.Finite.isClosed [T1Space X] {s : Set X} (hs : Set.Finite s) : IsClosed s := by
  rw [‚Üê biUnion_of_singleton s]
  exact hs.isClosed_biUnion fun i _ => isClosed_singleton

theorem TopologicalSpace.IsTopologicalBasis.exists_mem_of_ne [T1Space X] {b : Set (Set X)}
    (hb : IsTopologicalBasis b) {x y : X} (h : x ‚â† y) : ‚àÉ a ‚àà b, x ‚àà a ‚àß y ‚àâ a := by
  rcases hb.isOpen_iff.1 isOpen_ne x h with ‚ü®a, ab, xa, ha‚ü©
  exact ‚ü®a, ab, xa, fun h => ha h rfl‚ü©

protected theorem Finset.isClosed [T1Space X] (s : Finset X) : IsClosed (s : Set X) :=
  s.finite_toSet.isClosed

theorem t1Space_TFAE (X : Type u) [TopologicalSpace X] :
    List.TFAE [T1Space X,
      ‚àÄ x, IsClosed ({ x } : Set X),
      ‚àÄ x, IsOpen ({ x }·∂ú : Set X),
      Continuous (@CofiniteTopology.of X),
      ‚àÄ ‚¶Éx y : X‚¶Ñ, x ‚â† y ‚Üí {y}·∂ú ‚àà ùìù x,
      ‚àÄ ‚¶Éx y : X‚¶Ñ, x ‚â† y ‚Üí ‚àÉ s ‚àà ùìù x, y ‚àâ s,
      ‚àÄ ‚¶Éx y : X‚¶Ñ, x ‚â† y ‚Üí ‚àÉ U : Set X, IsOpen U ‚àß x ‚àà U ‚àß y ‚àâ U,
      ‚àÄ ‚¶Éx y : X‚¶Ñ, x ‚â† y ‚Üí Disjoint (ùìù x) (pure y),
      ‚àÄ ‚¶Éx y : X‚¶Ñ, x ‚â† y ‚Üí Disjoint (pure x) (ùìù y),
      ‚àÄ ‚¶Éx y : X‚¶Ñ, x ‚§≥ y ‚Üí x = y] := by
  tfae_have 1 ‚Üî 2 := ‚ü®fun h => h.1, fun h => ‚ü®h‚ü©‚ü©
  tfae_have 2 ‚Üî 3 := by
    simp only [isOpen_compl_iff]
  tfae_have 5 ‚Üî 3 := by
    refine forall_swap.trans ?_
    simp only [isOpen_iff_mem_nhds, mem_compl_iff, mem_singleton_iff]
  tfae_have 5 ‚Üî 6 := by
    simp only [‚Üê subset_compl_singleton_iff, exists_mem_subset_iff]
  tfae_have 5 ‚Üî 7 := by
    simp only [(nhds_basis_opens _).mem_iff, subset_compl_singleton_iff, exists_prop, and_assoc,
      and_left_comm]
  tfae_have 5 ‚Üî 8 := by
    simp only [‚Üê principal_singleton, disjoint_principal_right]
  tfae_have 8 ‚Üî 9 := forall_swap.trans (by simp only [disjoint_comm, ne_comm])
  tfae_have 1 ‚Üí 4 := by
    simp only [continuous_def, CofiniteTopology.isOpen_iff']
    rintro H s (rfl | hs)
    exacts [isOpen_empty, compl_compl s ‚ñ∏ (@Set.Finite.isClosed _ _ H _ hs).isOpen_compl]
  tfae_have 4 ‚Üí 2 :=
    fun h x => (CofiniteTopology.isClosed_iff.2 <| Or.inr (finite_singleton _)).preimage h
  tfae_have 2 ‚Üî 10 := by
    simp only [‚Üê closure_subset_iff_isClosed, specializes_iff_mem_closure, subset_def,
      mem_singleton_iff, eq_comm]
  tfae_finish

theorem t1Space_iff_continuous_cofinite_of : T1Space X ‚Üî Continuous (@CofiniteTopology.of X) :=
  (t1Space_TFAE X).out 0 3

theorem CofiniteTopology.continuous_of [T1Space X] : Continuous (@CofiniteTopology.of X) :=
  t1Space_iff_continuous_cofinite_of.mp ‚Äπ_‚Ä∫

theorem t1Space_iff_exists_open :
    T1Space X ‚Üî Pairwise fun x y => ‚àÉ U : Set X, IsOpen U ‚àß x ‚àà U ‚àß y ‚àâ U :=
  (t1Space_TFAE X).out 0 6

theorem t1Space_iff_disjoint_pure_nhds : T1Space X ‚Üî ‚àÄ ‚¶Éx y : X‚¶Ñ, x ‚â† y ‚Üí Disjoint (pure x) (ùìù y) :=
  (t1Space_TFAE X).out 0 8

theorem t1Space_iff_disjoint_nhds_pure : T1Space X ‚Üî ‚àÄ ‚¶Éx y : X‚¶Ñ, x ‚â† y ‚Üí Disjoint (ùìù x) (pure y) :=
  (t1Space_TFAE X).out 0 7

theorem t1Space_iff_specializes_imp_eq : T1Space X ‚Üî ‚àÄ ‚¶Éx y : X‚¶Ñ, x ‚§≥ y ‚Üí x = y :=
  (t1Space_TFAE X).out 0 9

theorem disjoint_pure_nhds [T1Space X] {x y : X} (h : x ‚â† y) : Disjoint (pure x) (ùìù y) :=
  t1Space_iff_disjoint_pure_nhds.mp ‚Äπ_‚Ä∫ h

theorem disjoint_nhds_pure [T1Space X] {x y : X} (h : x ‚â† y) : Disjoint (ùìù x) (pure y) :=
  t1Space_iff_disjoint_nhds_pure.mp ‚Äπ_‚Ä∫ h

theorem Specializes.eq [T1Space X] {x y : X} (h : x ‚§≥ y) : x = y :=
  t1Space_iff_specializes_imp_eq.1 ‚Äπ_‚Ä∫ h

theorem specializes_iff_eq [T1Space X] {x y : X} : x ‚§≥ y ‚Üî x = y :=
  ‚ü®Specializes.eq, fun h => h ‚ñ∏ specializes_rfl‚ü©

@[simp] theorem specializes_eq_eq [T1Space X] : (¬∑ ‚§≥ ¬∑) = @Eq X :=
  funext‚ÇÇ fun _ _ => propext specializes_iff_eq

@[simp]
theorem pure_le_nhds_iff [T1Space X] {a b : X} : pure a ‚â§ ùìù b ‚Üî a = b :=
  specializes_iff_pure.symm.trans specializes_iff_eq

@[simp]
theorem nhds_le_nhds_iff [T1Space X] {a b : X} : ùìù a ‚â§ ùìù b ‚Üî a = b :=
  specializes_iff_eq

instance (priority := 100) [T1Space X] : R0Space X where
  specializes_symmetric _ _ := by rw [specializes_iff_eq, specializes_iff_eq]; exact Eq.symm

instance : T1Space (CofiniteTopology X) :=
  t1Space_iff_continuous_cofinite_of.mpr continuous_id

theorem t1Space_antitone {X} : Antitone (@T1Space X) := fun a _ h _ =>
  @T1Space.mk _ a fun x => (T1Space.t1 x).mono h

theorem continuousWithinAt_update_of_ne [T1Space X] [DecidableEq X] [TopologicalSpace Y] {f : X ‚Üí Y}
    {s : Set X} {x x' : X} {y : Y} (hne : x' ‚â† x) :
    ContinuousWithinAt (Function.update f x y) s x' ‚Üî ContinuousWithinAt f s x' :=
  EventuallyEq.congr_continuousWithinAt
    (mem_nhdsWithin_of_mem_nhds <| mem_of_superset (isOpen_ne.mem_nhds hne) fun _y' hy' =>
      Function.update_of_ne hy' _ _)
    (Function.update_of_ne hne ..)

theorem continuousAt_update_of_ne [T1Space X] [DecidableEq X] [TopologicalSpace Y]
    {f : X ‚Üí Y} {x x' : X} {y : Y} (hne : x' ‚â† x) :
    ContinuousAt (Function.update f x y) x' ‚Üî ContinuousAt f x' := by
  simp only [‚Üê continuousWithinAt_univ, continuousWithinAt_update_of_ne hne]

theorem continuousOn_update_iff [T1Space X] [DecidableEq X] [TopologicalSpace Y] {f : X ‚Üí Y}
    {s : Set X} {x : X} {y : Y} :
    ContinuousOn (Function.update f x y) s ‚Üî
      ContinuousOn f (s \ {x}) ‚àß (x ‚àà s ‚Üí Tendsto f (ùìù[s \ {x}] x) (ùìù y)) := by
  rw [ContinuousOn, ‚Üê and_forall_ne x, and_comm]
  refine and_congr ‚ü®fun H z hz => ?_, fun H z hzx hzs => ?_‚ü© (forall_congr' fun _ => ?_)
  ¬∑ specialize H z hz.2 hz.1
    rw [continuousWithinAt_update_of_ne hz.2] at H
    exact H.mono diff_subset
  ¬∑ rw [continuousWithinAt_update_of_ne hzx]
    refine (H z ‚ü®hzs, hzx‚ü©).mono_of_mem_nhdsWithin (inter_mem_nhdsWithin _ ?_)
    exact isOpen_ne.mem_nhds hzx
  ¬∑ exact continuousWithinAt_update_same

theorem t1Space_of_injective_of_continuous [TopologicalSpace Y] {f : X ‚Üí Y}
    (hf : Function.Injective f) (hf' : Continuous f) [T1Space Y] : T1Space X :=
  t1Space_iff_specializes_imp_eq.2 fun _ _ h => hf (h.map hf').eq

protected theorem Topology.IsEmbedding.t1Space [TopologicalSpace Y] [T1Space Y] {f : X ‚Üí Y}
    (hf : IsEmbedding f) : T1Space X :=
  t1Space_of_injective_of_continuous hf.injective hf.continuous

@[deprecated (since := "2024-10-26")]
alias Embedding.t1Space := IsEmbedding.t1Space

instance Subtype.t1Space {X : Type u} [TopologicalSpace X] [T1Space X] {p : X ‚Üí Prop} :
    T1Space (Subtype p) :=
  IsEmbedding.subtypeVal.t1Space

instance [TopologicalSpace Y] [T1Space X] [T1Space Y] : T1Space (X √ó Y) :=
  ‚ü®fun ‚ü®a, b‚ü© => @singleton_prod_singleton _ _ a b ‚ñ∏ isClosed_singleton.prod isClosed_singleton‚ü©

instance {Œπ : Type*} {X : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (X i)] [‚àÄ i, T1Space (X i)] :
    T1Space (‚àÄ i, X i) :=
  ‚ü®fun f => univ_pi_singleton f ‚ñ∏ isClosed_set_pi fun _ _ => isClosed_singleton‚ü©

instance ULift.instT1Space [T1Space X] : T1Space (ULift X) :=
  IsEmbedding.uliftDown.t1Space

-- see Note [lower instance priority]
instance (priority := 100) TotallyDisconnectedSpace.t1Space [h : TotallyDisconnectedSpace X] :
    T1Space X := by
  rw [((t1Space_TFAE X).out 0 1 :)]
  intro x
  rw [‚Üê totallyDisconnectedSpace_iff_connectedComponent_singleton.mp h x]
  exact isClosed_connectedComponent

-- see Note [lower instance priority]
instance (priority := 100) T1Space.t0Space [T1Space X] : T0Space X :=
  ‚ü®fun _ _ h => h.specializes.eq‚ü©

@[simp]
theorem compl_singleton_mem_nhds_iff [T1Space X] {x y : X} : {x}·∂ú ‚àà ùìù y ‚Üî y ‚â† x :=
  isOpen_compl_singleton.mem_nhds_iff

theorem compl_singleton_mem_nhds [T1Space X] {x y : X} (h : y ‚â† x) : {x}·∂ú ‚àà ùìù y :=
  compl_singleton_mem_nhds_iff.mpr h

@[simp]
theorem closure_singleton [T1Space X] {x : X} : closure ({x} : Set X) = {x} :=
  isClosed_singleton.closure_eq

-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: the proof was `hs.induction_on (by simp) fun x => by simp`
theorem Set.Subsingleton.closure [T1Space X] {s : Set X} (hs : s.Subsingleton) :
    (closure s).Subsingleton := by
  rcases hs.eq_empty_or_singleton with (rfl | ‚ü®x, rfl‚ü©) <;> simp

@[simp]
theorem subsingleton_closure [T1Space X] {s : Set X} : (closure s).Subsingleton ‚Üî s.Subsingleton :=
  ‚ü®fun h => h.anti subset_closure, fun h => h.closure‚ü©

theorem isClosedMap_const {X Y} [TopologicalSpace X] [TopologicalSpace Y] [T1Space Y] {y : Y} :
    IsClosedMap (Function.const X y) :=
  IsClosedMap.of_nonempty fun s _ h2s => by simp_rw [const, h2s.image_const, isClosed_singleton]

theorem nhdsWithin_insert_of_ne [T1Space X] {x y : X} {s : Set X} (hxy : x ‚â† y) :
    ùìù[insert y s] x = ùìù[s] x := by
  refine le_antisymm (Filter.le_def.2 fun t ht => ?_) (nhdsWithin_mono x <| subset_insert y s)
  obtain ‚ü®o, ho, hxo, host‚ü© := mem_nhdsWithin.mp ht
  refine mem_nhdsWithin.mpr ‚ü®o \ {y}, ho.sdiff isClosed_singleton, ‚ü®hxo, hxy‚ü©, ?_‚ü©
  rw [inter_insert_of_not_mem <| not_mem_diff_of_mem (mem_singleton y)]
  exact (inter_subset_inter diff_subset Subset.rfl).trans host

/-- If `t` is a subset of `s`, except for one point,
then `insert x s` is a neighborhood of `x` within `t`. -/
theorem insert_mem_nhdsWithin_of_subset_insert [T1Space X] {x y : X} {s t : Set X}
    (hu : t ‚äÜ insert y s) : insert x s ‚àà ùìù[t] x := by
  rcases eq_or_ne x y with (rfl | h)
  ¬∑ exact mem_of_superset self_mem_nhdsWithin hu
  refine nhdsWithin_mono x hu ?_
  rw [nhdsWithin_insert_of_ne h]
  exact mem_of_superset self_mem_nhdsWithin (subset_insert x s)

lemma eventuallyEq_insert [T1Space X] {s t : Set X} {x y : X} (h : s =·∂†[ùìù[{y}·∂ú] x] t) :
    (insert x s : Set X) =·∂†[ùìù x] (insert x t : Set X) := by
  simp_rw [eventuallyEq_set] at h ‚ä¢
  simp_rw [‚Üê union_singleton, ‚Üê nhdsWithin_univ, ‚Üê compl_union_self {x},
    nhdsWithin_union, eventually_sup, nhdsWithin_singleton,
    eventually_pure, union_singleton, mem_insert_iff, true_or, and_true]
  filter_upwards [nhdsWithin_compl_singleton_le x y h] with y using or_congr (Iff.rfl)

@[simp]
theorem ker_nhds [T1Space X] (x : X) : (ùìù x).ker = {x} := by
  simp [ker_nhds_eq_specializes]

theorem biInter_basis_nhds [T1Space X] {Œπ : Sort*} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set X} {x : X}
    (h : (ùìù x).HasBasis p s) : ‚ãÇ (i) (_ : p i), s i = {x} := by
  rw [‚Üê h.ker, ker_nhds]

@[simp]
theorem compl_singleton_mem_nhdsSet_iff [T1Space X] {x : X} {s : Set X} : {x}·∂ú ‚àà ùìùÀ¢ s ‚Üî x ‚àâ s := by
  rw [isOpen_compl_singleton.mem_nhdsSet, subset_compl_singleton_iff]

@[simp]
theorem nhdsSet_le_iff [T1Space X] {s t : Set X} : ùìùÀ¢ s ‚â§ ùìùÀ¢ t ‚Üî s ‚äÜ t := by
  refine ‚ü®?_, fun h => monotone_nhdsSet h‚ü©
  simp_rw [Filter.le_def]; intro h x hx
  specialize h {x}·∂ú
  simp_rw [compl_singleton_mem_nhdsSet_iff] at h
  by_contra hxt
  exact h hxt hx

@[simp]
theorem nhdsSet_inj_iff [T1Space X] {s t : Set X} : ùìùÀ¢ s = ùìùÀ¢ t ‚Üî s = t := by
  simp_rw [le_antisymm_iff]
  exact and_congr nhdsSet_le_iff nhdsSet_le_iff

theorem injective_nhdsSet [T1Space X] : Function.Injective (ùìùÀ¢ : Set X ‚Üí Filter X) := fun _ _ hst =>
  nhdsSet_inj_iff.mp hst

theorem strictMono_nhdsSet [T1Space X] : StrictMono (ùìùÀ¢ : Set X ‚Üí Filter X) :=
  monotone_nhdsSet.strictMono_of_injective injective_nhdsSet

@[simp]
theorem nhds_le_nhdsSet_iff [T1Space X] {s : Set X} {x : X} : ùìù x ‚â§ ùìùÀ¢ s ‚Üî x ‚àà s := by
  rw [‚Üê nhdsSet_singleton, nhdsSet_le_iff, singleton_subset_iff]

/-- Removing a non-isolated point from a dense set, one still obtains a dense set. -/
theorem Dense.diff_singleton [T1Space X] {s : Set X} (hs : Dense s) (x : X) [NeBot (ùìù[‚â†] x)] :
    Dense (s \ {x}) :=
  hs.inter_of_isOpen_right (dense_compl_singleton x) isOpen_compl_singleton

/-- Removing a finset from a dense set in a space without isolated points, one still
obtains a dense set. -/
theorem Dense.diff_finset [T1Space X] [‚àÄ x : X, NeBot (ùìù[‚â†] x)] {s : Set X} (hs : Dense s)
    (t : Finset X) : Dense (s \ t) := by
  classical
  induction t using Finset.induction_on with
  | empty => simpa using hs
  | insert _ ih =>
    rw [Finset.coe_insert, ‚Üê union_singleton, ‚Üê diff_diff]
    exact ih.diff_singleton _

/-- Removing a finite set from a dense set in a space without isolated points, one still
obtains a dense set. -/
theorem Dense.diff_finite [T1Space X] [‚àÄ x : X, NeBot (ùìù[‚â†] x)] {s : Set X} (hs : Dense s)
    {t : Set X} (ht : t.Finite) : Dense (s \ t) := by
  convert hs.diff_finset ht.toFinset
  exact (Finite.coe_toFinset _).symm

/-- If a function to a `T1Space` tends to some limit `y` at some point `x`, then necessarily
`y = f x`. -/
theorem eq_of_tendsto_nhds [TopologicalSpace Y] [T1Space Y] {f : X ‚Üí Y} {x : X} {y : Y}
    (h : Tendsto f (ùìù x) (ùìù y)) : f x = y :=
  by_contra fun hfa : f x ‚â† y =>
    have fact‚ÇÅ : {f x}·∂ú ‚àà ùìù y := compl_singleton_mem_nhds hfa.symm
    have fact‚ÇÇ : Tendsto f (pure x) (ùìù y) := h.comp (tendsto_id'.2 <| pure_le_nhds x)
    fact‚ÇÇ fact‚ÇÅ (Eq.refl <| f x)

theorem Filter.Tendsto.eventually_ne {X} [TopologicalSpace Y] [T1Space Y] {g : X ‚Üí Y}
    {l : Filter X} {b‚ÇÅ b‚ÇÇ : Y} (hg : Tendsto g l (ùìù b‚ÇÅ)) (hb : b‚ÇÅ ‚â† b‚ÇÇ) : ‚àÄ·∂† z in l, g z ‚â† b‚ÇÇ :=
  hg.eventually (isOpen_compl_singleton.eventually_mem hb)

theorem ContinuousAt.eventually_ne [TopologicalSpace Y] [T1Space Y] {g : X ‚Üí Y} {x : X} {y : Y}
    (hg1 : ContinuousAt g x) (hg2 : g x ‚â† y) : ‚àÄ·∂† z in ùìù x, g z ‚â† y :=
  hg1.tendsto.eventually_ne hg2

theorem eventually_ne_nhds [T1Space X] {a b : X} (h : a ‚â† b) : ‚àÄ·∂† x in ùìù a, x ‚â† b :=
  IsOpen.eventually_mem isOpen_ne h

theorem eventually_ne_nhdsWithin [T1Space X] {a b : X} {s : Set X} (h : a ‚â† b) :
    ‚àÄ·∂† x in ùìù[s] a, x ‚â† b :=
  Filter.Eventually.filter_mono nhdsWithin_le_nhds <| eventually_ne_nhds h

theorem continuousWithinAt_insert [TopologicalSpace Y] [T1Space X]
    {x y : X} {s : Set X} {f : X ‚Üí Y} :
    ContinuousWithinAt f (insert y s) x ‚Üî ContinuousWithinAt f s x := by
  rcases eq_or_ne x y with (rfl | h)
  ¬∑ exact continuousWithinAt_insert_self
  simp_rw [ContinuousWithinAt, nhdsWithin_insert_of_ne h]

alias ‚ü®ContinuousWithinAt.of_insert, ContinuousWithinAt.insert'‚ü© := continuousWithinAt_insert

/-- See also `continuousWithinAt_diff_self` for the case `y = x` but not requiring `T1Space`. -/
theorem continuousWithinAt_diff_singleton [TopologicalSpace Y] [T1Space X]
    {x y : X} {s : Set X} {f : X ‚Üí Y} :
    ContinuousWithinAt f (s \ {y}) x ‚Üî ContinuousWithinAt f s x := by
  rw [‚Üê continuousWithinAt_insert, insert_diff_singleton, continuousWithinAt_insert]

/-- If two sets coincide locally around `x`, except maybe at `y`, then it is equivalent to be
continuous at `x` within one set or the other. -/
theorem continuousWithinAt_congr_set' [TopologicalSpace Y] [T1Space X]
    {x : X} {s t : Set X} {f : X ‚Üí Y} (y : X) (h : s =·∂†[ùìù[{y}·∂ú] x] t) :
    ContinuousWithinAt f s x ‚Üî ContinuousWithinAt f t x := by
  rw [‚Üê continuousWithinAt_insert_self (s := s), ‚Üê continuousWithinAt_insert_self (s := t)]
  exact continuousWithinAt_congr_set (eventuallyEq_insert h)

/-- To prove a function to a `T1Space` is continuous at some point `x`, it suffices to prove that
`f` admits *some* limit at `x`. -/
theorem continuousAt_of_tendsto_nhds [TopologicalSpace Y] [T1Space Y] {f : X ‚Üí Y} {x : X} {y : Y}
    (h : Tendsto f (ùìù x) (ùìù y)) : ContinuousAt f x := by
  rwa [ContinuousAt, eq_of_tendsto_nhds h]

@[simp]
theorem tendsto_const_nhds_iff [T1Space X] {l : Filter Y} [NeBot l] {c d : X} :
    Tendsto (fun _ => c) l (ùìù d) ‚Üî c = d := by simp_rw [Tendsto, Filter.map_const, pure_le_nhds_iff]

/-- A point with a finite neighborhood has to be isolated. -/
theorem isOpen_singleton_of_finite_mem_nhds [T1Space X] (x : X)
    {s : Set X} (hs : s ‚àà ùìù x) (hsf : s.Finite) : IsOpen ({x} : Set X) := by
  have A : {x} ‚äÜ s := by simp only [singleton_subset_iff, mem_of_mem_nhds hs]
  have B : IsClosed (s \ {x}) := (hsf.subset diff_subset).isClosed
  have C : (s \ {x})·∂ú ‚àà ùìù x := B.isOpen_compl.mem_nhds fun h => h.2 rfl
  have D : {x} ‚àà ùìù x := by simpa only [‚Üê diff_eq, diff_diff_cancel_left A] using inter_mem hs C
  rwa [‚Üê mem_interior_iff_mem_nhds, ‚Üê singleton_subset_iff, subset_interior_iff_isOpen] at D

/-- If the punctured neighborhoods of a point form a nontrivial filter, then any neighborhood is
infinite. -/
theorem infinite_of_mem_nhds {X} [TopologicalSpace X] [T1Space X] (x : X) [hx : NeBot (ùìù[‚â†] x)]
    {s : Set X} (hs : s ‚àà ùìù x) : Set.Infinite s := by
  refine fun hsf => hx.1 ?_
  rw [‚Üê isOpen_singleton_iff_punctured_nhds]
  exact isOpen_singleton_of_finite_mem_nhds x hs hsf

instance Finite.instDiscreteTopology [T1Space X] [Finite X] : DiscreteTopology X :=
  discreteTopology_iff_forall_isClosed.mpr (¬∑ |>.toFinite.isClosed)

theorem Set.Finite.continuousOn [T1Space X] [TopologicalSpace Y] {s : Set X} (hs : s.Finite)
    (f : X ‚Üí Y) : ContinuousOn f s := by
  rw [continuousOn_iff_continuous_restrict]
  have : Finite s := hs
  fun_prop

theorem PreconnectedSpace.trivial_of_discrete [PreconnectedSpace X] [DiscreteTopology X] :
    Subsingleton X := by
  rw [‚Üê not_nontrivial_iff_subsingleton]
  rintro ‚ü®x, y, hxy‚ü©
  rw [Ne, ‚Üê mem_singleton_iff, (isClopen_discrete _).eq_univ <| singleton_nonempty y] at hxy
  exact hxy (mem_univ x)

theorem IsPreconnected.infinite_of_nontrivial [T1Space X] {s : Set X} (h : IsPreconnected s)
    (hs : s.Nontrivial) : s.Infinite := by
  refine mt (fun hf => (subsingleton_coe s).mp ?_) (not_subsingleton_iff.mpr hs)
  haveI := @Finite.instDiscreteTopology s _ _ hf.to_subtype
  exact @PreconnectedSpace.trivial_of_discrete _ _ (Subtype.preconnectedSpace h) _

theorem ConnectedSpace.infinite [ConnectedSpace X] [Nontrivial X] [T1Space X] : Infinite X :=
  infinite_univ_iff.mp <| isPreconnected_univ.infinite_of_nontrivial nontrivial_univ

/-- A non-trivial connected T1 space has no isolated points. -/
instance (priority := 100) ConnectedSpace.neBot_nhdsWithin_compl_of_nontrivial_of_t1space
    [ConnectedSpace X] [Nontrivial X] [T1Space X] (x : X) :
    NeBot (ùìù[‚â†] x) := by
  by_contra contra
  rw [not_neBot, ‚Üê isOpen_singleton_iff_punctured_nhds] at contra
  replace contra := nonempty_inter isOpen_compl_singleton
    contra (compl_union_self _) (Set.nonempty_compl_of_nontrivial _) (singleton_nonempty _)
  simp [compl_inter_self {x}] at contra

theorem SeparationQuotient.t1Space_iff : T1Space (SeparationQuotient X) ‚Üî R0Space X := by
  rw [r0Space_iff, ((t1Space_TFAE (SeparationQuotient X)).out 0 9 :)]
  constructor
  ¬∑ intro h x y xspecy
    rw [‚Üê IsInducing.specializes_iff isInducing_mk, h xspecy] at *
  ¬∑ rintro h ‚ü®x‚ü© ‚ü®y‚ü© sxspecsy
    have xspecy : x ‚§≥ y := isInducing_mk.specializes_iff.mp sxspecsy
    have yspecx : y ‚§≥ x := h xspecy
    erw [mk_eq_mk, inseparable_iff_specializes_and]
    exact ‚ü®xspecy, yspecx‚ü©

lemma Set.Subsingleton.isClosed [T1Space X] {A : Set X} (h : A.Subsingleton) : IsClosed A := by
  rcases h.eq_empty_or_singleton with rfl | ‚ü®x, rfl‚ü©
  ¬∑ exact isClosed_empty
  ¬∑ exact isClosed_singleton

lemma isClosed_inter_singleton [T1Space X] {A : Set X} {a : X} : IsClosed (A ‚à© {a}) :=
  Subsingleton.inter_singleton.isClosed

lemma isClosed_singleton_inter [T1Space X] {A : Set X} {a : X} : IsClosed ({a} ‚à© A) :=
  Subsingleton.singleton_inter.isClosed

theorem singleton_mem_nhdsWithin_of_mem_discrete {s : Set X} [DiscreteTopology s] {x : X}
    (hx : x ‚àà s) : {x} ‚àà ùìù[s] x := by
  have : ({‚ü®x, hx‚ü©} : Set s) ‚àà ùìù (‚ü®x, hx‚ü© : s) := by simp [nhds_discrete]
  simpa only [nhdsWithin_eq_map_subtype_coe hx, image_singleton] using
    @image_mem_map _ _ _ ((‚Üë) : s ‚Üí X) _ this

/-- The neighbourhoods filter of `x` within `s`, under the discrete topology, is equal to
the pure `x` filter (which is the principal filter at the singleton `{x}`.) -/
theorem nhdsWithin_of_mem_discrete {s : Set X} [DiscreteTopology s] {x : X} (hx : x ‚àà s) :
    ùìù[s] x = pure x :=
  le_antisymm (le_pure_iff.2 <| singleton_mem_nhdsWithin_of_mem_discrete hx) (pure_le_nhdsWithin hx)

theorem Filter.HasBasis.exists_inter_eq_singleton_of_mem_discrete {Œπ : Type*} {p : Œπ ‚Üí Prop}
    {t : Œπ ‚Üí Set X} {s : Set X} [DiscreteTopology s] {x : X} (hb : (ùìù x).HasBasis p t)
    (hx : x ‚àà s) : ‚àÉ i, p i ‚àß t i ‚à© s = {x} := by
  rcases (nhdsWithin_hasBasis hb s).mem_iff.1 (singleton_mem_nhdsWithin_of_mem_discrete hx) with
    ‚ü®i, hi, hix‚ü©
  exact ‚ü®i, hi, hix.antisymm <| singleton_subset_iff.2 ‚ü®mem_of_mem_nhds <| hb.mem_of_mem hi, hx‚ü©‚ü©

/-- A point `x` in a discrete subset `s` of a topological space admits a neighbourhood
that only meets `s` at `x`. -/
theorem nhds_inter_eq_singleton_of_mem_discrete {s : Set X} [DiscreteTopology s] {x : X}
    (hx : x ‚àà s) : ‚àÉ U ‚àà ùìù x, U ‚à© s = {x} := by
  simpa using (ùìù x).basis_sets.exists_inter_eq_singleton_of_mem_discrete hx

/-- Let `x` be a point in a discrete subset `s` of a topological space, then there exists an open
set that only meets `s` at `x`. -/
theorem isOpen_inter_eq_singleton_of_mem_discrete {s : Set X} [DiscreteTopology s] {x : X}
    (hx : x ‚àà s) : ‚àÉ U : Set X, IsOpen U ‚àß U ‚à© s = {x} := by
  obtain ‚ü®U, hU_nhds, hU_inter‚ü© := nhds_inter_eq_singleton_of_mem_discrete hx
  obtain ‚ü®t, ht_sub, ht_open, ht_x‚ü© := mem_nhds_iff.mp hU_nhds
  refine ‚ü®t, ht_open, Set.Subset.antisymm ?_ ?_‚ü©
  ¬∑ exact hU_inter ‚ñ∏ Set.inter_subset_inter_left s ht_sub
  ¬∑ rw [Set.subset_inter_iff, Set.singleton_subset_iff, Set.singleton_subset_iff]
    exact ‚ü®ht_x, hx‚ü©

/-- For point `x` in a discrete subset `s` of a topological space, there is a set `U`
such that
1. `U` is a punctured neighborhood of `x` (ie. `U ‚à™ {x}` is a neighbourhood of `x`),
2. `U` is disjoint from `s`.
-/
theorem disjoint_nhdsWithin_of_mem_discrete {s : Set X} [DiscreteTopology s] {x : X} (hx : x ‚àà s) :
    ‚àÉ U ‚àà ùìù[‚â†] x, Disjoint U s :=
  let ‚ü®V, h, h'‚ü© := nhds_inter_eq_singleton_of_mem_discrete hx
  ‚ü®{x}·∂ú ‚à© V, inter_mem_nhdsWithin _ h,
    disjoint_iff_inter_eq_empty.mpr (by rw [inter_assoc, h', compl_inter_self])‚ü©

theorem isClosedEmbedding_update {Œπ : Type*} {Œ≤ : Œπ ‚Üí Type*}
    [DecidableEq Œπ] [(i : Œπ) ‚Üí TopologicalSpace (Œ≤ i)]
    (x : (i : Œπ) ‚Üí Œ≤ i) (i : Œπ) [(i : Œπ) ‚Üí T1Space (Œ≤ i)] :
    IsClosedEmbedding (update x i) := by
  refine .of_continuous_injective_isClosedMap (continuous_const.update i continuous_id)
    (update_injective x i) fun s hs ‚Ü¶ ?_
  rw [update_image]
  apply isClosed_set_pi
  simp [forall_update_iff, hs, isClosed_singleton]

@[deprecated (since := "2024-10-20")]
alias closedEmbedding_update := isClosedEmbedding_update

/-! ### R‚ÇÅ (preregular) spaces -/

section R1Space

/-- A topological space is called a *preregular* (a.k.a. R‚ÇÅ) space,
if any two topologically distinguishable points have disjoint neighbourhoods. -/
@[mk_iff r1Space_iff_specializes_or_disjoint_nhds]
class R1Space (X : Type*) [TopologicalSpace X] : Prop where
  specializes_or_disjoint_nhds (x y : X) : Specializes x y ‚à® Disjoint (ùìù x) (ùìù y)

export R1Space (specializes_or_disjoint_nhds)

variable [R1Space X] {x y : X}

instance (priority := 100) : R0Space X where
  specializes_symmetric _ _ h := (specializes_or_disjoint_nhds _ _).resolve_right <| fun hd ‚Ü¶
    h.not_disjoint hd.symm

theorem disjoint_nhds_nhds_iff_not_specializes : Disjoint (ùìù x) (ùìù y) ‚Üî ¬¨x ‚§≥ y :=
  ‚ü®fun hd hspec ‚Ü¶ hspec.not_disjoint hd, (specializes_or_disjoint_nhds _ _).resolve_left‚ü©

theorem specializes_iff_not_disjoint : x ‚§≥ y ‚Üî ¬¨Disjoint (ùìù x) (ùìù y) :=
  disjoint_nhds_nhds_iff_not_specializes.not_left.symm

theorem disjoint_nhds_nhds_iff_not_inseparable : Disjoint (ùìù x) (ùìù y) ‚Üî ¬¨Inseparable x y := by
  rw [disjoint_nhds_nhds_iff_not_specializes, specializes_iff_inseparable]

theorem r1Space_iff_inseparable_or_disjoint_nhds {X : Type*} [TopologicalSpace X] :
    R1Space X ‚Üî ‚àÄ x y : X, Inseparable x y ‚à® Disjoint (ùìù x) (ùìù y) :=
  ‚ü®fun _h x y ‚Ü¶ (specializes_or_disjoint_nhds x y).imp_left Specializes.inseparable, fun h ‚Ü¶
    ‚ü®fun x y ‚Ü¶ (h x y).imp_left Inseparable.specializes‚ü©‚ü©

theorem Inseparable.of_nhds_neBot {x y : X} (h : NeBot (ùìù x ‚äì ùìù y)) :
    Inseparable x y :=
  (r1Space_iff_inseparable_or_disjoint_nhds.mp ‚Äπ_‚Ä∫ _ _).resolve_right fun h' => h.ne h'.eq_bot

/-- Limits are unique up to separability.

A weaker version of `tendsto_nhds_unique` for `R1Space`. -/
theorem tendsto_nhds_unique_inseparable {f : Y ‚Üí X} {l : Filter Y} {a b : X} [NeBot l]
    (ha : Tendsto f l (ùìù a)) (hb : Tendsto f l (ùìù b)) : Inseparable a b :=
  .of_nhds_neBot <| neBot_of_le <| le_inf ha hb

theorem isClosed_setOf_specializes : IsClosed { p : X √ó X | p.1 ‚§≥ p.2 } := by
  simp only [‚Üê isOpen_compl_iff, compl_setOf, ‚Üê disjoint_nhds_nhds_iff_not_specializes,
    isOpen_setOf_disjoint_nhds_nhds]

theorem isClosed_setOf_inseparable : IsClosed { p : X √ó X | Inseparable p.1 p.2 } := by
  simp only [‚Üê specializes_iff_inseparable, isClosed_setOf_specializes]

/-- In an R‚ÇÅ space, a point belongs to the closure of a compact set `K`
if and only if it is topologically inseparable from some point of `K`. -/
theorem IsCompact.mem_closure_iff_exists_inseparable {K : Set X} (hK : IsCompact K) :
    y ‚àà closure K ‚Üî ‚àÉ x ‚àà K, Inseparable x y := by
  refine ‚ü®fun hy ‚Ü¶ ?_, fun ‚ü®x, hxK, hxy‚ü© ‚Ü¶
    (hxy.mem_closed_iff isClosed_closure).1 <| subset_closure hxK‚ü©
  contrapose! hy
  have : Disjoint (ùìù y) (ùìùÀ¢ K) := hK.disjoint_nhdsSet_right.2 fun x hx ‚Ü¶
    (disjoint_nhds_nhds_iff_not_inseparable.2 (hy x hx)).symm
  simpa only [disjoint_iff, not_mem_closure_iff_nhdsWithin_eq_bot]
    using this.mono_right principal_le_nhdsSet

theorem IsCompact.closure_eq_biUnion_inseparable {K : Set X} (hK : IsCompact K) :
    closure K = ‚ãÉ x ‚àà K, {y | Inseparable x y} := by
  ext; simp [hK.mem_closure_iff_exists_inseparable]

/-- In an R‚ÇÅ space, the closure of a compact set is the union of the closures of its points. -/
theorem IsCompact.closure_eq_biUnion_closure_singleton {K : Set X} (hK : IsCompact K) :
    closure K = ‚ãÉ x ‚àà K, closure {x} := by
  simp only [hK.closure_eq_biUnion_inseparable, ‚Üê specializes_iff_inseparable,
    specializes_iff_mem_closure, setOf_mem_eq]

/-- In an R‚ÇÅ space, if a compact set `K` is contained in an open set `U`,
then its closure is also contained in `U`. -/
theorem IsCompact.closure_subset_of_isOpen {K : Set X} (hK : IsCompact K)
    {U : Set X} (hU : IsOpen U) (hKU : K ‚äÜ U) : closure K ‚äÜ U := by
  rw [hK.closure_eq_biUnion_inseparable, iUnion‚ÇÇ_subset_iff]
  exact fun x hx y hxy ‚Ü¶ (hxy.mem_open_iff hU).1 (hKU hx)

/-- The closure of a compact set in an R‚ÇÅ space is a compact set. -/
protected theorem IsCompact.closure {K : Set X} (hK : IsCompact K) : IsCompact (closure K) := by
  refine isCompact_of_finite_subcover fun U hUo hKU ‚Ü¶ ?_
  rcases hK.elim_finite_subcover U hUo (subset_closure.trans hKU) with ‚ü®t, ht‚ü©
  exact ‚ü®t, hK.closure_subset_of_isOpen (isOpen_biUnion fun _ _ ‚Ü¶ hUo _) ht‚ü©

theorem IsCompact.closure_of_subset {s K : Set X} (hK : IsCompact K) (h : s ‚äÜ K) :
    IsCompact (closure s) :=
  hK.closure.of_isClosed_subset isClosed_closure (closure_mono h)

@[simp]
theorem exists_isCompact_superset_iff {s : Set X} :
    (‚àÉ K, IsCompact K ‚àß s ‚äÜ K) ‚Üî IsCompact (closure s) :=
  ‚ü®fun ‚ü®_K, hK, hsK‚ü© => hK.closure_of_subset hsK, fun h => ‚ü®closure s, h, subset_closure‚ü©‚ü©

/-- If `K` and `L` are disjoint compact sets in an R‚ÇÅ topological space
and `L` is also closed, then `K` and `L` have disjoint neighborhoods. -/
theorem SeparatedNhds.of_isCompact_isCompact_isClosed {K L : Set X} (hK : IsCompact K)
    (hL : IsCompact L) (h'L : IsClosed L) (hd : Disjoint K L) : SeparatedNhds K L := by
  simp_rw [separatedNhds_iff_disjoint, hK.disjoint_nhdsSet_left, hL.disjoint_nhdsSet_right,
    disjoint_nhds_nhds_iff_not_inseparable]
  intro x hx y hy h
  exact absurd ((h.mem_closed_iff h'L).2 hy) <| disjoint_left.1 hd hx

/-- If a compact set is covered by two open sets, then we can cover it by two compact subsets. -/
theorem IsCompact.binary_compact_cover {K U V : Set X}
    (hK : IsCompact K) (hU : IsOpen U) (hV : IsOpen V) (h2K : K ‚äÜ U ‚à™ V) :
    ‚àÉ K‚ÇÅ K‚ÇÇ : Set X, IsCompact K‚ÇÅ ‚àß IsCompact K‚ÇÇ ‚àß K‚ÇÅ ‚äÜ U ‚àß K‚ÇÇ ‚äÜ V ‚àß K = K‚ÇÅ ‚à™ K‚ÇÇ := by
  have hK' : IsCompact (closure K) := hK.closure
  have : SeparatedNhds (closure K \ U) (closure K \ V) := by
    apply SeparatedNhds.of_isCompact_isCompact_isClosed (hK'.diff hU) (hK'.diff hV)
      (isClosed_closure.sdiff hV)
    rw [disjoint_iff_inter_eq_empty, diff_inter_diff, diff_eq_empty]
    exact hK.closure_subset_of_isOpen (hU.union hV) h2K
  have : SeparatedNhds (K \ U) (K \ V) :=
    this.mono (diff_subset_diff_left (subset_closure)) (diff_subset_diff_left (subset_closure))
  rcases this with ‚ü®O‚ÇÅ, O‚ÇÇ, h1O‚ÇÅ, h1O‚ÇÇ, h2O‚ÇÅ, h2O‚ÇÇ, hO‚ü©
  exact ‚ü®K \ O‚ÇÅ, K \ O‚ÇÇ, hK.diff h1O‚ÇÅ, hK.diff h1O‚ÇÇ, diff_subset_comm.mp h2O‚ÇÅ,
    diff_subset_comm.mp h2O‚ÇÇ, by rw [‚Üê diff_inter, hO.inter_eq, diff_empty]‚ü©

/-- For every finite open cover `U·µ¢` of a compact set, there exists a compact cover `K·µ¢ ‚äÜ U·µ¢`. -/
theorem IsCompact.finite_compact_cover {s : Set X} (hs : IsCompact s) {Œπ : Type*}
    (t : Finset Œπ) (U : Œπ ‚Üí Set X) (hU : ‚àÄ i ‚àà t, IsOpen (U i)) (hsC : s ‚äÜ ‚ãÉ i ‚àà t, U i) :
    ‚àÉ K : Œπ ‚Üí Set X, (‚àÄ i, IsCompact (K i)) ‚àß (‚àÄ i, K i ‚äÜ U i) ‚àß s = ‚ãÉ i ‚àà t, K i := by
  classical
  induction' t using Finset.induction with x t hx ih generalizing U s
  ¬∑ refine ‚ü®fun _ => ‚àÖ, fun _ => isCompact_empty, fun i => empty_subset _, ?_‚ü©
    simpa only [subset_empty_iff, Finset.not_mem_empty, iUnion_false, iUnion_empty] using hsC
  simp only [Finset.set_biUnion_insert] at hsC
  simp only [Finset.forall_mem_insert] at hU
  have hU' : ‚àÄ i ‚àà t, IsOpen (U i) := fun i hi => hU.2 i hi
  rcases hs.binary_compact_cover hU.1 (isOpen_biUnion hU') hsC with
    ‚ü®K‚ÇÅ, K‚ÇÇ, h1K‚ÇÅ, h1K‚ÇÇ, h2K‚ÇÅ, h2K‚ÇÇ, hK‚ü©
  rcases ih h1K‚ÇÇ U hU' h2K‚ÇÇ with ‚ü®K, h1K, h2K, h3K‚ü©
  refine ‚ü®update K x K‚ÇÅ, ?_, ?_, ?_‚ü©
  ¬∑ intro i
    rcases eq_or_ne i x with rfl | hi
    ¬∑ simp only [update_self, h1K‚ÇÅ]
    ¬∑ simp only [update_of_ne hi, h1K]
  ¬∑ intro i
    rcases eq_or_ne i x with rfl | hi
    ¬∑ simp only [update_self, h2K‚ÇÅ]
    ¬∑ simp only [update_of_ne hi, h2K]
  ¬∑ simp only [Finset.set_biUnion_insert_update _ hx, hK, h3K]

theorem R1Space.of_continuous_specializes_imp [TopologicalSpace Y] {f : Y ‚Üí X} (hc : Continuous f)
    (hspec : ‚àÄ x y, f x ‚§≥ f y ‚Üí x ‚§≥ y) : R1Space Y where
  specializes_or_disjoint_nhds x y := (specializes_or_disjoint_nhds (f x) (f y)).imp (hspec x y) <|
    ((hc.tendsto _).disjoint ¬∑ (hc.tendsto _))

theorem Topology.IsInducing.r1Space [TopologicalSpace Y] {f : Y ‚Üí X} (hf : IsInducing f) :
    R1Space Y := .of_continuous_specializes_imp hf.continuous fun _ _ ‚Ü¶ hf.specializes_iff.1

@[deprecated (since := "2024-10-28")] alias Inducing.r1Space := IsInducing.r1Space

protected theorem R1Space.induced (f : Y ‚Üí X) : @R1Space Y (.induced f ‚Äπ_‚Ä∫) :=
  @IsInducing.r1Space _ _ _ _ (.induced f _) f (.induced f)

instance (p : X ‚Üí Prop) : R1Space (Subtype p) := .induced _

protected theorem R1Space.sInf {X : Type*} {T : Set (TopologicalSpace X)}
    (hT : ‚àÄ t ‚àà T, @R1Space X t) : @R1Space X (sInf T) := by
  let _ := sInf T
  refine ‚ü®fun x y ‚Ü¶ ?_‚ü©
  simp only [Specializes, nhds_sInf]
  rcases em (‚àÉ t ‚àà T, Disjoint (@nhds X t x) (@nhds X t y)) with ‚ü®t, htT, htd‚ü© | hTd
  ¬∑ exact .inr <| htd.mono (iInf‚ÇÇ_le t htT) (iInf‚ÇÇ_le t htT)
  ¬∑ push_neg at hTd
    exact .inl <| iInf‚ÇÇ_mono fun t ht ‚Ü¶ ((hT t ht).1 x y).resolve_right (hTd t ht)

protected theorem R1Space.iInf {Œπ X : Type*} {t : Œπ ‚Üí TopologicalSpace X}
    (ht : ‚àÄ i, @R1Space X (t i)) : @R1Space X (iInf t) :=
  .sInf <| forall_mem_range.2 ht

protected theorem R1Space.inf {X : Type*} {t‚ÇÅ t‚ÇÇ : TopologicalSpace X}
    (h‚ÇÅ : @R1Space X t‚ÇÅ) (h‚ÇÇ : @R1Space X t‚ÇÇ) : @R1Space X (t‚ÇÅ ‚äì t‚ÇÇ) := by
  rw [inf_eq_iInf]
  apply R1Space.iInf
  simp [*]

instance [TopologicalSpace Y] [R1Space Y] : R1Space (X √ó Y) :=
  .inf (.induced _) (.induced _)

instance {Œπ : Type*} {X : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (X i)] [‚àÄ i, R1Space (X i)] :
    R1Space (‚àÄ i, X i) :=
  .iInf fun _ ‚Ü¶ .induced _

theorem exists_mem_nhds_isCompact_mapsTo_of_isCompact_mem_nhds
    {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] [R1Space Y] {f : X ‚Üí Y} {x : X}
    {K : Set X} {s : Set Y} (hf : Continuous f) (hs : s ‚àà ùìù (f x)) (hKc : IsCompact K)
    (hKx : K ‚àà ùìù x) : ‚àÉ L ‚àà ùìù x, IsCompact L ‚àß MapsTo f L s := by
  have hc : IsCompact (f '' K \ interior s) := (hKc.image hf).diff isOpen_interior
  obtain ‚ü®U, V, Uo, Vo, hxU, hV, hd‚ü© : SeparatedNhds {f x} (f '' K \ interior s) := by
    simp_rw [separatedNhds_iff_disjoint, nhdsSet_singleton, hc.disjoint_nhdsSet_right,
      disjoint_nhds_nhds_iff_not_inseparable]
    rintro y ‚ü®-, hys‚ü© hxy
    refine hys <| (hxy.mem_open_iff isOpen_interior).1 ?_
    rwa [mem_interior_iff_mem_nhds]
  refine ‚ü®K \ f ‚Åª¬π' V, diff_mem hKx ?_, hKc.diff <| Vo.preimage hf, fun y hy ‚Ü¶ ?_‚ü©
  ¬∑ filter_upwards [hf.continuousAt <| Uo.mem_nhds (hxU rfl)] with x hx
      using Set.disjoint_left.1 hd hx
  ¬∑ by_contra hys
    exact hy.2 (hV ‚ü®mem_image_of_mem _ hy.1, not_mem_subset interior_subset hys‚ü©)

instance (priority := 900) {X Y : Type*} [TopologicalSpace X] [WeaklyLocallyCompactSpace X]
    [TopologicalSpace Y] [R1Space Y] : LocallyCompactPair X Y where
  exists_mem_nhds_isCompact_mapsTo hf hs :=
    let ‚ü®_K, hKc, hKx‚ü© := exists_compact_mem_nhds _
    exists_mem_nhds_isCompact_mapsTo_of_isCompact_mem_nhds hf hs hKc hKx

/-- If a point in an R‚ÇÅ space has a compact neighborhood,
then it has a basis of compact closed neighborhoods. -/
theorem IsCompact.isCompact_isClosed_basis_nhds {x : X} {L : Set X} (hLc : IsCompact L)
    (hxL : L ‚àà ùìù x) : (ùìù x).HasBasis (fun K ‚Ü¶ K ‚àà ùìù x ‚àß IsCompact K ‚àß IsClosed K) (¬∑) :=
  hasBasis_self.2 fun _U hU ‚Ü¶
    let ‚ü®K, hKx, hKc, hKU‚ü© := exists_mem_nhds_isCompact_mapsTo_of_isCompact_mem_nhds
      continuous_id (interior_mem_nhds.2 hU) hLc hxL
    ‚ü®closure K, mem_of_superset hKx subset_closure, ‚ü®hKc.closure, isClosed_closure‚ü©,
      (hKc.closure_subset_of_isOpen isOpen_interior hKU).trans interior_subset‚ü©

/-- In an R‚ÇÅ space, the filters `coclosedCompact` and `cocompact` are equal. -/
@[simp]
theorem Filter.coclosedCompact_eq_cocompact : coclosedCompact X = cocompact X := by
  refine le_antisymm ?_ cocompact_le_coclosedCompact
  rw [hasBasis_coclosedCompact.le_basis_iff hasBasis_cocompact]
  exact fun K hK ‚Ü¶ ‚ü®closure K, ‚ü®isClosed_closure, hK.closure‚ü©, compl_subset_compl.2 subset_closure‚ü©

/-- In an R‚ÇÅ space, the bornologies `relativelyCompact` and `inCompact` are equal. -/
@[simp]
theorem Bornology.relativelyCompact_eq_inCompact :
    Bornology.relativelyCompact X = Bornology.inCompact X :=
  Bornology.ext _ _ Filter.coclosedCompact_eq_cocompact

/-!
### Lemmas about a weakly locally compact R‚ÇÅ space

In fact, a space with these properties is locally compact and regular.
Some lemmas are formulated using the latter assumptions below.
-/

variable [WeaklyLocallyCompactSpace X]

/-- In a (weakly) locally compact R‚ÇÅ space, compact closed neighborhoods of a point `x`
form a basis of neighborhoods of `x`. -/
theorem isCompact_isClosed_basis_nhds (x : X) :
    (ùìù x).HasBasis (fun K => K ‚àà ùìù x ‚àß IsCompact K ‚àß IsClosed K) (¬∑) :=
  let ‚ü®_L, hLc, hLx‚ü© := exists_compact_mem_nhds x
  hLc.isCompact_isClosed_basis_nhds hLx

/-- In a (weakly) locally compact R‚ÇÅ space, each point admits a compact closed neighborhood. -/
theorem exists_mem_nhds_isCompact_isClosed (x : X) : ‚àÉ K ‚àà ùìù x, IsCompact K ‚àß IsClosed K :=
  (isCompact_isClosed_basis_nhds x).ex_mem

-- see Note [lower instance priority]
/-- A weakly locally compact R‚ÇÅ space is locally compact. -/
instance (priority := 80) WeaklyLocallyCompactSpace.locallyCompactSpace : LocallyCompactSpace X :=
  .of_hasBasis isCompact_isClosed_basis_nhds fun _ _ ‚ü®_, h, _‚ü© ‚Ü¶ h

/-- In a weakly locally compact R‚ÇÅ space,
every compact set has an open neighborhood with compact closure. -/
theorem exists_isOpen_superset_and_isCompact_closure {K : Set X} (hK : IsCompact K) :
    ‚àÉ V, IsOpen V ‚àß K ‚äÜ V ‚àß IsCompact (closure V) := by
  rcases exists_compact_superset hK with ‚ü®K', hK', hKK'‚ü©
  exact ‚ü®interior K', isOpen_interior, hKK', hK'.closure_of_subset interior_subset‚ü©

/-- In a weakly locally compact R‚ÇÅ space,
every point has an open neighborhood with compact closure. -/
theorem exists_isOpen_mem_isCompact_closure (x : X) :
    ‚àÉ U : Set X, IsOpen U ‚àß x ‚àà U ‚àß IsCompact (closure U) := by
  simpa only [singleton_subset_iff]
    using exists_isOpen_superset_and_isCompact_closure isCompact_singleton

end R1Space

end Separation
