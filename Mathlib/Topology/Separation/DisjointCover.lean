/-
Copyright (c) 2024 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import Mathlib.Data.Fintype.BigOperators
import Mathlib.Order.Disjointed
import Mathlib.Topology.Separation.Profinite
import Mathlib.Topology.Sets.Closeds
import Mathlib.Topology.Sets.OpenCover

/-!
# Disjoint covers of profinite spaces

We prove various results about covering profinite spaces by disjoint clopens, including

* `TopologicalSpace.IsOpenCover.exists_finite_nonempty_disjoint_clopen_cover`: any open cover of a
  profinite space can be refined to a finite cover by pairwise disjoint nonempty clopens.

* `ContinuousMap.exists_finite_approximation_of_mem_nhds_diagonal`: if `f : X ‚Üí V` is continuous
  with `X` profinite, and `S` is a neighbourhood of the diagonal in `V √ó V`, then `f` can be
  `S`-approximated by a function factoring through `Fin n` for some `n`.
-/

open Set TopologicalSpace

open scoped Function Finset Topology

namespace TopologicalSpace.IsOpenCover

variable {Œπ X : Type*}
  [TopologicalSpace X] [TotallyDisconnectedSpace X] [T2Space X] [CompactSpace X] {U : Œπ ‚Üí Opens X}

/-- Any open cover of a profinite space can be refined to a finite cover by clopens. -/
lemma exists_finite_clopen_cover (hU : IsOpenCover U) : ‚àÉ (n : ‚Ñï) (V : Fin n ‚Üí Clopens X),
    (‚àÄ j, ‚àÉ i, (V j : Set X) ‚äÜ U i) ‚àß univ ‚äÜ ‚ãÉ j, (V j : Set X) := by
  -- Choose an index `r x` for each point in `X` such that `‚àÄ x, x ‚àà U (r x)`.
  choose r hr using hU.exists_mem
  -- Choose a clopen neighbourhood `V x` of each `x` contained in `U (r x)`.
  choose V hV hVx hVU using fun x ‚Ü¶ compact_exists_isClopen_in_isOpen (U _).isOpen (hr x)
  -- Apply compactness to extract a finite subset of the `V`s which covers `X`.
  obtain ‚ü®t, ht‚ü© : ‚àÉ t, univ ‚äÜ ‚ãÉ i ‚àà t, V i :=
    isCompact_univ.elim_finite_subcover V (fun x ‚Ü¶ (hV x).2) (fun x _ ‚Ü¶ mem_iUnion.mpr ‚ü®x, hVx x‚ü©)
  -- Biject it noncanonically with `Fin n` for some `n`.
  refine ‚ü®_, fun j ‚Ü¶ ‚ü®_, hV (t.equivFin.symm j)‚ü©, fun j ‚Ü¶ ‚ü®_, hVU _‚ü©, fun x hx ‚Ü¶ ?_‚ü©
  obtain ‚ü®m, hm, hm'‚ü© := mem_iUnion‚ÇÇ.mp (ht hx)
  exact Set.mem_iUnion_of_mem (t.equivFin ‚ü®m, hm‚ü©) (by simpa)

/-- Any open cover of a profinite space can be refined to a finite cover by pairwise disjoint
nonempty clopens. -/
lemma exists_finite_nonempty_disjoint_clopen_cover (hU : IsOpenCover U) :
    ‚àÉ (n : ‚Ñï) (W : Fin n ‚Üí Clopens X), (‚àÄ j, W j ‚â† ‚ä• ‚àß ‚àÉ i, (W j : Set X) ‚äÜ U i)
    ‚àß (univ : Set X) ‚äÜ ‚ãÉ j, ‚Üë(W j) ‚àß Pairwise (Disjoint on W) := by
  classical
  obtain ‚ü®n, V, hVle, hVun‚ü© := hU.exists_finite_clopen_cover
  obtain ‚ü®W, hWle, hWun, hWd‚ü© := Fintype.exists_disjointed_le V
  simp only [‚Üê SetLike.coe_set_eq, Clopens.coe_finset_sup, Finset.mem_univ, iUnion_true] at hWun
  let t : Finset (Fin n) := {j | W j ‚â† ‚ä•}
  refine ‚ü®#t, fun k ‚Ü¶ W (t.equivFin.symm k), fun k ‚Ü¶ ‚ü®?_, ?_‚ü©, fun x hx ‚Ü¶ ?_, ?_‚ü©
  ¬∑ exact (Finset.mem_filter.mp (t.equivFin.symm k).2).2
  ¬∑ exact match hVle (t.equivFin.symm k) with | ‚ü®i, hi‚ü© => ‚ü®i, subset_trans (hWle _) hi‚ü©
  ¬∑ obtain ‚ü®j, hj‚ü© := mem_iUnion.mp <| (hWun ‚ñ∏ hVun) hx
    have : W j ‚â† ‚ä• := by simpa [‚Üê SetLike.coe_ne_coe, ‚Üê Set.nonempty_iff_ne_empty] using ‚ü®x, hj‚ü©
    exact mem_iUnion.mpr ‚ü®t.equivFin ‚ü®j, Finset.mem_filter.mpr ‚ü®Finset.mem_univ _, this‚ü©‚ü©, by simpa‚ü©
  ¬∑ exact hWd.comp_of_injective <| Subtype.val_injective.comp t.equivFin.symm.injective

end TopologicalSpace.IsOpenCover

namespace TopologicalSpace
variable {X : Type*} [TopologicalSpace X] {S : Set (X √ó X)}

/-- If `S` is any neighbourhood of the diagonal in a topological space `X`, any point of `X` has an
open neighbourhood `U` such that `U √óÀ¢ U ‚äÜ S`. -/
lemma exists_open_prod_subset_of_mem_nhds_diagonal (hS : S ‚àà nhdsSet (diagonal X)) (x : X) :
    ‚àÉ U : Set X, IsOpen U ‚àß x ‚àà U ‚àß U √óÀ¢ U ‚äÜ S := by
  have : S ‚àà ùìù (x, x) := mem_nhdsSet_iff_forall.mp hS _ rfl
  obtain ‚ü®u, v, huo, hux, hvo, hvx, H‚ü© := by rwa [mem_nhds_prod_iff'] at this
  exact ‚ü®_, huo.inter hvo, ‚ü®hux, hvx‚ü©, fun p hp ‚Ü¶ H ‚ü®hp.1.1, hp.2.2‚ü©‚ü©

variable [CompactSpace X]

/-- If `S` is any neighbourhood of the diagonal in a compact topological space `X`, then there
exists a finite cover of `X` by opens `U i` such that `U i √óÀ¢ U i ‚äÜ S` for all `i`.

That the indexing set is a finset of `X` is an artifact of the proof; it could be any finite type.
-/
lemma exists_finite_open_cover_prod_subset_of_mem_nhds_diagonal_of_compact
    (hS : S ‚àà nhdsSet (diagonal X)) :
    ‚àÉ (t : Finset X) (U : t ‚Üí Opens X), IsOpenCover U ‚àß ‚àÄ i, (U i : Set X) √óÀ¢ U i ‚äÜ S := by
  choose U hUo hUx hUp using exists_open_prod_subset_of_mem_nhds_diagonal hS
  obtain ‚ü®t, ht‚ü© := isCompact_univ.elim_finite_subcover _ hUo (fun x _ ‚Ü¶ mem_iUnion.mpr ‚ü®_, hUx x‚ü©)
  refine ‚ü®t, fun i ‚Ü¶ ‚ü®_, hUo i‚ü©, .of_sets _ ?_, (hUp ¬∑)‚ü©
  simpa [iUnion_subtype, ‚Üê univ_subset_iff] using ht

variable [TotallyDisconnectedSpace X] [T2Space X]

/-- If `S` is any neighbourhood of the diagonal in a profinite topological space `X`, then there
exists a finite cover of `X` by disjoint nonempty clopens `U i` with `U i √óÀ¢ U i ‚äÜ S` for all `i`.
-/
private lemma exists_finite_disjoint_nonempty_clopen_cover_of_mem_nhds_diagonal_of_profinite
    (hS : S ‚àà nhdsSet (diagonal X)) :
    ‚àÉ (n : ‚Ñï) (D : Fin n ‚Üí Clopens X), (‚àÄ i, D i ‚â† ‚ä•) ‚àß (‚àÄ i, ‚àÄ y ‚àà D i, ‚àÄ z ‚àà D i, (y, z) ‚àà S)
    ‚àß (univ : Set X) ‚äÜ ‚ãÉ i, D i ‚àß Pairwise (Disjoint on D) := by
  obtain ‚ü®t, U, hUc, hUS‚ü© := exists_finite_open_cover_prod_subset_of_mem_nhds_diagonal_of_compact hS
  -- Now refine it to a disjoint covering.
  obtain ‚ü®n, W, hW‚ÇÅ, hW‚ÇÇ, hW‚ÇÉ‚ü© := hUc.exists_finite_nonempty_disjoint_clopen_cover
  refine ‚ü®n, W, fun j ‚Ü¶ (hW‚ÇÅ j).1, fun j y hy z hz ‚Ü¶ ?_, hW‚ÇÇ, hW‚ÇÉ‚ü©
  exact match (hW‚ÇÅ j).2 with | ‚ü®i, hi‚ü© => hUS i ‚ü®hi hy, hi hz‚ü©

end TopologicalSpace

namespace ContinuousMap

variable {X V : Type*} [TopologicalSpace X] [TopologicalSpace V] [TotallyDisconnectedSpace X]
  [T2Space X] [CompactSpace X] {S : Set (V √ó V)} (f : C(X, V))

/--
For any continuous function `f : X ‚Üí V`, with `X` profinite, and `S` a neighbourhood of the
diagonal in `V √ó V`, there exists a finite cover of `X` by pairwise-disjoint nonempty clopens, on
each of which `f` varies within `S`.
-/
lemma exists_disjoint_nonempty_clopen_cover_of_mem_nhds_diagonal (hS : S ‚àà nhdsSet (diagonal V)) :
    ‚àÉ (n : ‚Ñï) (D : Fin n ‚Üí Clopens X), (‚àÄ i, D i ‚â† ‚ä•) ‚àß (‚àÄ i, ‚àÄ y ‚àà D i, ‚àÄ z ‚àà D i, (f y, f z) ‚àà S)
    ‚àß (univ : Set X) ‚äÜ ‚ãÉ i, D i ‚àß Pairwise (Disjoint on D) := by
  have : (f.prodMap f) ‚Åª¬π' S ‚àà nhdsSet (diagonal X) := by
    rw [mem_nhdsSet_iff_forall] at hS ‚ä¢
    rintro ‚ü®x, y‚ü© (rfl : x = y)
    exact (map_continuous _).continuousAt.preimage_mem_nhds (hS _ rfl)
  exact exists_finite_disjoint_nonempty_clopen_cover_of_mem_nhds_diagonal_of_profinite this

/--
For any continuous function `f : X ‚Üí V`, with `X` profinite, and `S` a neighbourhood of the
diagonal in `V √ó V`, the function `f` can be `S`-approximated by a function factoring through
`Fin n`, for some `n`. -/
lemma exists_finite_approximation_of_mem_nhds_diagonal (hS : S ‚àà nhdsSet (diagonal V)) :
    ‚àÉ (n : ‚Ñï) (g : X ‚Üí Fin n) (h : Fin n ‚Üí V), Continuous g ‚àß ‚àÄ x, (f x, h (g x)) ‚àà S := by
  obtain ‚ü®n, E, hEne, hES, hEuniv, hEdis‚ü© :=
    exists_disjoint_nonempty_clopen_cover_of_mem_nhds_diagonal f hS
  have h_uniq (x) : ‚àÉ! i, x ‚àà E i := by
    refine match mem_iUnion.mp (hEuniv <| mem_univ x) with
      | ‚ü®i, hi‚ü© => ‚ü®i, hi, fun j hj ‚Ü¶ hEdis.eq ?_‚ü©
    simpa [‚Üê Clopens.coe_disjoint, not_disjoint_iff] using ‚ü®x, hj, hi‚ü©
  choose g hg hg' using h_uniq -- for each `x`, `g x` is the unique `i` such that `x ‚àà E i`
  have h_ex (i) : ‚àÉ x, x ‚àà E i := by
    simpa [‚Üê SetLike.coe_set_eq, ‚Üê nonempty_iff_ne_empty] using hEne i
  choose r hr using h_ex -- for each `i`, choose an `r i ‚àà E i`
  refine ‚ü®n, g, f ‚àò r, continuous_discrete_rng.mpr fun j ‚Ü¶ ?_, fun x ‚Ü¶ (hES _) _ (hg _) _ (hr _)‚ü©
  convert (E j).isOpen
  exact Set.ext fun x ‚Ü¶ ‚ü®fun hj ‚Ü¶ hj ‚ñ∏ hg x, fun hx ‚Ü¶ (hg' _ _ hx).symm‚ü©

/--
If `f` is a continuous map from a profinite space to a topological space with a commutative monoid
structure, then we can approximate `f` by finite products of indicator functions of clopen sets.

(Note no compatibility is assumed between the monoid structure on `V` and the topology.)
-/
@[to_additive "If `f` is a continuous map from a profinite space to a topological space with a
commutative additive monoid structure, then we can approximate `f` by finite sums of indicator
functions of clopen sets.

(Note no compatibility is assumed between the monoid structure on `V` and the topology.)"]
lemma exists_finite_sum_const_mulIndicator_approximation_of_mem_nhds_diagonal [CommMonoid V]
    (hS : S ‚àà nhdsSet (diagonal V)) :
    ‚àÉ (n : ‚Ñï) (U : Fin n ‚Üí Clopens X) (v : Fin n ‚Üí V),
    ‚àÄ x, (f x, ‚àè n, mulIndicator (U n) (fun _ ‚Ü¶ v n) x) ‚àà S := by
  obtain ‚ü®n, g, h, hg, hgh‚ü© := exists_finite_approximation_of_mem_nhds_diagonal f hS
  refine ‚ü®n, fun i ‚Ü¶ ‚ü®_, (isClopen_discrete {i}).preimage hg‚ü©, h, fun x ‚Ü¶ ?_‚ü©
  convert hgh x
  exact (Fintype.prod_eq_single _ fun i hi ‚Ü¶ mulIndicator_of_not_mem hi.symm _).trans
    (mulIndicator_of_mem rfl _)

end ContinuousMap
