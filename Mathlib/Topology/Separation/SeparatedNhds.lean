/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro
-/
import Mathlib.Topology.NhdsSet

/-!
# Separated neighbourhoods

This file defines the predicates `SeparatedNhds` and `HasSeparatingCover`, which are used in
formulating separation axioms for topological spaces.

## Main definitions

* `SeparatedNhds`: Two `Set`s are separated by neighbourhoods if they are contained in disjoint
  open sets.
* `HasSeparatingCover`: A set has a countable cover that can be used with
  `hasSeparatingCovers_iff_separatedNhds` to witness when two `Set`s have `SeparatedNhds`.

## References

* <https://en.wikipedia.org/wiki/Separation_axiom>
* [Willard's *General Topology*][zbMATH02107988]
-/

open Function Set Filter Topology TopologicalSpace

universe u v

variable {X : Type*} {Y : Type*} [TopologicalSpace X]

section Separation

/--
`SeparatedNhds` is a predicate on pairs of sub`Set`s of a topological space.  It holds if the two
sub`Set`s are contained in disjoint open sets.
-/
def SeparatedNhds : Set X ‚Üí Set X ‚Üí Prop := fun s t : Set X =>
  ‚àÉ U V : Set X, IsOpen U ‚àß IsOpen V ‚àß s ‚äÜ U ‚àß t ‚äÜ V ‚àß Disjoint U V

theorem separatedNhds_iff_disjoint {s t : Set X} : SeparatedNhds s t ‚Üî Disjoint (ùìùÀ¢ s) (ùìùÀ¢ t) := by
  simp only [(hasBasis_nhdsSet s).disjoint_iff (hasBasis_nhdsSet t), SeparatedNhds, exists_prop, ‚Üê
    exists_and_left, and_assoc, and_comm, and_left_comm]

alias ‚ü®SeparatedNhds.disjoint_nhdsSet, _‚ü© := separatedNhds_iff_disjoint

/-- `HasSeparatingCover`s can be useful witnesses for `SeparatedNhds`. -/
def HasSeparatingCover : Set X ‚Üí Set X ‚Üí Prop := fun s t ‚Ü¶
  ‚àÉ u : ‚Ñï ‚Üí Set X, s ‚äÜ ‚ãÉ n, u n ‚àß ‚àÄ n, IsOpen (u n) ‚àß Disjoint (closure (u n)) t

/-- Used to prove that a regular topological space with Lindel√∂f topology is a normal space,
and a perfectly normal space is a completely normal space. -/
theorem hasSeparatingCovers_iff_separatedNhds {s t : Set X} :
    HasSeparatingCover s t ‚àß HasSeparatingCover t s ‚Üî SeparatedNhds s t := by
  constructor
  ¬∑ rintro ‚ü®‚ü®u, u_cov, u_props‚ü©, ‚ü®v, v_cov, v_props‚ü©‚ü©
    have open_lemma : ‚àÄ (u‚ÇÄ a : ‚Ñï ‚Üí Set X), (‚àÄ n, IsOpen (u‚ÇÄ n)) ‚Üí
      IsOpen (‚ãÉ n, u‚ÇÄ n \ closure (a n)) := fun _ _ u‚ÇÄi_open ‚Ü¶
        isOpen_iUnion fun i ‚Ü¶ (u‚ÇÄi_open i).sdiff isClosed_closure
    have cover_lemma : ‚àÄ (h‚ÇÄ : Set X) (u‚ÇÄ v‚ÇÄ : ‚Ñï ‚Üí Set X),
        (h‚ÇÄ ‚äÜ ‚ãÉ n, u‚ÇÄ n) ‚Üí (‚àÄ n, Disjoint (closure (v‚ÇÄ n)) h‚ÇÄ) ‚Üí
        (h‚ÇÄ ‚äÜ ‚ãÉ n, u‚ÇÄ n \ closure (‚ãÉ m ‚â§ n, v‚ÇÄ m)) :=
        fun h‚ÇÄ u‚ÇÄ v‚ÇÄ h‚ÇÄ_cov dis x xinh ‚Ü¶ by
      rcases h‚ÇÄ_cov xinh with ‚ü®un , ‚ü®n, rfl‚ü© , xinun‚ü©
      simp only [mem_iUnion]
      refine ‚ü®n, xinun, ?_‚ü©
      simp_all only [closure_iUnion‚ÇÇ_le_nat, disjoint_right, mem_setOf_eq, mem_iUnion,
        exists_false, exists_const, not_false_eq_true]
    refine
      ‚ü®‚ãÉ n : ‚Ñï, u n \ (closure (‚ãÉ m ‚â§ n, v m)),
       ‚ãÉ n : ‚Ñï, v n \ (closure (‚ãÉ m ‚â§ n, u m)),
       open_lemma u (fun n ‚Ü¶ ‚ãÉ m ‚â§ n, v m) (fun n ‚Ü¶ (u_props n).1),
       open_lemma v (fun n ‚Ü¶ ‚ãÉ m ‚â§ n, u m) (fun n ‚Ü¶ (v_props n).1),
       cover_lemma s u v u_cov (fun n ‚Ü¶ (v_props n).2),
       cover_lemma t v u v_cov (fun n ‚Ü¶ (u_props n).2),
       ?_‚ü©
    rw [Set.disjoint_left]
    rintro x ‚ü®un, ‚ü®n, rfl‚ü©, xinun‚ü©
    suffices ‚àÄ (m : ‚Ñï), x ‚àà v m ‚Üí x ‚àà closure (‚ãÉ m' ‚àà {m' | m' ‚â§ m}, u m') by simpa
    intro m xinvm
    have n_le_m : n ‚â§ m := by
      by_contra m_gt_n
      exact xinun.2 (subset_closure (mem_biUnion (le_of_lt (not_le.mp m_gt_n)) xinvm))
    exact subset_closure (mem_biUnion n_le_m xinun.1)
  ¬∑ rintro ‚ü®U, V, U_open, V_open, h_sub_U, k_sub_V, UV_dis‚ü©
    exact
      ‚ü®‚ü®fun _ ‚Ü¶ U,
        h_sub_U.trans (iUnion_const U).symm.subset,
        fun _ ‚Ü¶
          ‚ü®U_open, disjoint_of_subset (fun ‚¶Éa‚¶Ñ a ‚Ü¶ a) k_sub_V (UV_dis.closure_left V_open)‚ü©‚ü©,
       ‚ü®fun _ ‚Ü¶ V,
        k_sub_V.trans (iUnion_const V).symm.subset,
        fun _ ‚Ü¶
          ‚ü®V_open, disjoint_of_subset (fun ‚¶Éa‚¶Ñ a ‚Ü¶ a) h_sub_U (UV_dis.closure_right U_open).symm‚ü©‚ü©‚ü©

theorem Set.hasSeparatingCover_empty_left (s : Set X) : HasSeparatingCover ‚àÖ s :=
  ‚ü®fun _ ‚Ü¶ ‚àÖ, empty_subset (‚ãÉ _, ‚àÖ),
   fun _ ‚Ü¶ ‚ü®isOpen_empty, by simp only [closure_empty, empty_disjoint]‚ü©‚ü©

theorem Set.hasSeparatingCover_empty_right (s : Set X) : HasSeparatingCover s ‚àÖ :=
  ‚ü®fun _ ‚Ü¶ univ, (subset_univ s).trans univ.iUnion_const.symm.subset,
   fun _ ‚Ü¶ ‚ü®isOpen_univ, by apply disjoint_empty‚ü©‚ü©

theorem HasSeparatingCover.mono {s‚ÇÅ s‚ÇÇ t‚ÇÅ t‚ÇÇ : Set X} (sc_st : HasSeparatingCover s‚ÇÇ t‚ÇÇ)
    (s_sub : s‚ÇÅ ‚äÜ s‚ÇÇ) (t_sub : t‚ÇÅ ‚äÜ t‚ÇÇ) : HasSeparatingCover s‚ÇÅ t‚ÇÅ := by
  obtain ‚ü®u, u_cov, u_props‚ü© := sc_st
  exact
    ‚ü®u,
     s_sub.trans u_cov,
     fun n ‚Ü¶
       ‚ü®(u_props n).1,
        disjoint_of_subset (fun ‚¶É_‚¶Ñ a ‚Ü¶ a) t_sub (u_props n).2‚ü©‚ü©

namespace SeparatedNhds

variable {s s‚ÇÅ s‚ÇÇ t t‚ÇÅ t‚ÇÇ u : Set X}

@[symm]
theorem symm : SeparatedNhds s t ‚Üí SeparatedNhds t s := fun ‚ü®U, V, oU, oV, aU, bV, UV‚ü© =>
  ‚ü®V, U, oV, oU, bV, aU, Disjoint.symm UV‚ü©

theorem comm (s t : Set X) : SeparatedNhds s t ‚Üî SeparatedNhds t s :=
  ‚ü®symm, symm‚ü©

theorem preimage [TopologicalSpace Y] {f : X ‚Üí Y} {s t : Set Y} (h : SeparatedNhds s t)
    (hf : Continuous f) : SeparatedNhds (f ‚Åª¬π' s) (f ‚Åª¬π' t) :=
  let ‚ü®U, V, oU, oV, sU, tV, UV‚ü© := h
  ‚ü®f ‚Åª¬π' U, f ‚Åª¬π' V, oU.preimage hf, oV.preimage hf, preimage_mono sU, preimage_mono tV,
    UV.preimage f‚ü©

protected theorem disjoint (h : SeparatedNhds s t) : Disjoint s t :=
  let ‚ü®_, _, _, _, hsU, htV, hd‚ü© := h; hd.mono hsU htV

theorem disjoint_closure_left (h : SeparatedNhds s t) : Disjoint (closure s) t :=
  let ‚ü®_U, _V, _, hV, hsU, htV, hd‚ü© := h
  (hd.closure_left hV).mono (closure_mono hsU) htV

theorem disjoint_closure_right (h : SeparatedNhds s t) : Disjoint s (closure t) :=
  h.symm.disjoint_closure_left.symm

@[simp] theorem empty_right (s : Set X) : SeparatedNhds s ‚àÖ :=
  ‚ü®_, _, isOpen_univ, isOpen_empty, fun a _ => mem_univ a, Subset.rfl, disjoint_empty _‚ü©

@[simp] theorem empty_left (s : Set X) : SeparatedNhds ‚àÖ s :=
  (empty_right _).symm

theorem mono (h : SeparatedNhds s‚ÇÇ t‚ÇÇ) (hs : s‚ÇÅ ‚äÜ s‚ÇÇ) (ht : t‚ÇÅ ‚äÜ t‚ÇÇ) : SeparatedNhds s‚ÇÅ t‚ÇÅ :=
  let ‚ü®U, V, hU, hV, hsU, htV, hd‚ü© := h
  ‚ü®U, V, hU, hV, hs.trans hsU, ht.trans htV, hd‚ü©

theorem union_left : SeparatedNhds s u ‚Üí SeparatedNhds t u ‚Üí SeparatedNhds (s ‚à™ t) u := by
  simpa only [separatedNhds_iff_disjoint, nhdsSet_union, disjoint_sup_left] using And.intro

theorem union_right (ht : SeparatedNhds s t) (hu : SeparatedNhds s u) : SeparatedNhds s (t ‚à™ u) :=
  (ht.symm.union_left hu.symm).symm

end SeparatedNhds

end Separation
