/-
Copyright (c) 2022 Anatole Dedecker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anatole Dedecker
-/
import Mathlib.Topology.Connected.Basic

/-!
# Locally connected topological spaces

A topological space is **locally connected** if each neighborhood filter admits a basis
of connected *open* sets. Local connectivity is equivalent to each point having a basis
of connected (not necessarily open) sets --- but in a non-trivial way, so we choose this definition
and prove the equivalence later in `locallyConnectedSpace_iff_connected_basis`.
-/

open Set Topology

universe u v

variable {Œ± : Type u} {Œ≤ : Type v} {Œπ : Type*} {œÄ : Œπ ‚Üí Type*} [TopologicalSpace Œ±]
  {s t u v : Set Œ±}

section LocallyConnectedSpace

/-- A topological space is **locally connected** if each neighborhood filter admits a basis
of connected *open* sets. Note that it is equivalent to each point having a basis of connected
(non necessarily open) sets but in a non-trivial way, so we choose this definition and prove the
equivalence later in `locallyConnectedSpace_iff_connected_basis`. -/
class LocallyConnectedSpace (Œ± : Type*) [TopologicalSpace Œ±] : Prop where
  /-- Open connected neighborhoods form a basis of the neighborhoods filter. -/
  open_connected_basis : ‚àÄ x, (ùìù x).HasBasis (fun s : Set Œ± => IsOpen s ‚àß x ‚àà s ‚àß IsConnected s) id
#align locally_connected_space LocallyConnectedSpace

theorem locallyConnectedSpace_iff_open_connected_basis :
    LocallyConnectedSpace Œ± ‚Üî
      ‚àÄ x, (ùìù x).HasBasis (fun s : Set Œ± => IsOpen s ‚àß x ‚àà s ‚àß IsConnected s) id :=
  ‚ü®@LocallyConnectedSpace.open_connected_basis _ _, LocallyConnectedSpace.mk‚ü©
#align locally_connected_space_iff_open_connected_basis locallyConnectedSpace_iff_open_connected_basis

theorem locallyConnectedSpace_iff_open_connected_subsets :
    LocallyConnectedSpace Œ± ‚Üî
      ‚àÄ x, ‚àÄ U ‚àà ùìù x, ‚àÉ V : Set Œ±, V ‚äÜ U ‚àß IsOpen V ‚àß x ‚àà V ‚àß IsConnected V := by
  simp_rw [locallyConnectedSpace_iff_open_connected_basis]
  refine forall_congr' fun _ => ?_
  constructor
  ¬∑ intro h U hU
    rcases h.mem_iff.mp hU with ‚ü®V, hV, hVU‚ü©
    exact ‚ü®V, hVU, hV‚ü©
  ¬∑ exact fun h => ‚ü®fun U => ‚ü®fun hU =>
      let ‚ü®V, hVU, hV‚ü© := h U hU
      ‚ü®V, hV, hVU‚ü©, fun ‚ü®V, ‚ü®hV, hxV, _‚ü©, hVU‚ü© => mem_nhds_iff.mpr ‚ü®V, hVU, hV, hxV‚ü©‚ü©‚ü©
#align locally_connected_space_iff_open_connected_subsets locallyConnectedSpace_iff_open_connected_subsets

/-- A space with discrete topology is a locally connected space. -/
instance (priority := 100) DiscreteTopology.toLocallyConnectedSpace (Œ±) [TopologicalSpace Œ±]
    [DiscreteTopology Œ±] : LocallyConnectedSpace Œ± :=
  locallyConnectedSpace_iff_open_connected_subsets.2 fun x _U hU =>
    ‚ü®{x}, singleton_subset_iff.2 <| mem_of_mem_nhds hU, isOpen_discrete _, rfl,
      isConnected_singleton‚ü©
#align discrete_topology.to_locally_connected_space DiscreteTopology.toLocallyConnectedSpace

theorem connectedComponentIn_mem_nhds [LocallyConnectedSpace Œ±] {F : Set Œ±} {x : Œ±} (h : F ‚àà ùìù x) :
    connectedComponentIn F x ‚àà ùìù x := by
  rw [(LocallyConnectedSpace.open_connected_basis x).mem_iff] at h
  rcases h with ‚ü®s, ‚ü®h1s, hxs, h2s‚ü©, hsF‚ü©
  exact mem_nhds_iff.mpr ‚ü®s, h2s.isPreconnected.subset_connectedComponentIn hxs hsF, h1s, hxs‚ü©
#align connected_component_in_mem_nhds connectedComponentIn_mem_nhds

protected theorem IsOpen.connectedComponentIn [LocallyConnectedSpace Œ±] {F : Set Œ±} {x : Œ±}
    (hF : IsOpen F) : IsOpen (connectedComponentIn F x) := by
  rw [isOpen_iff_mem_nhds]
  intro y hy
  rw [connectedComponentIn_eq hy]
  exact connectedComponentIn_mem_nhds (hF.mem_nhds <| connectedComponentIn_subset F x hy)
#align is_open.connected_component_in IsOpen.connectedComponentIn

theorem isOpen_connectedComponent [LocallyConnectedSpace Œ±] {x : Œ±} :
    IsOpen (connectedComponent x) := by
  rw [‚Üê connectedComponentIn_univ]
  exact isOpen_univ.connectedComponentIn
#align is_open_connected_component isOpen_connectedComponent

theorem isClopen_connectedComponent [LocallyConnectedSpace Œ±] {x : Œ±} :
    IsClopen (connectedComponent x) :=
  ‚ü®isOpen_connectedComponent, isClosed_connectedComponent‚ü©
#align is_clopen_connected_component isClopen_connectedComponent

theorem locallyConnectedSpace_iff_connectedComponentIn_open :
    LocallyConnectedSpace Œ± ‚Üî
      ‚àÄ F : Set Œ±, IsOpen F ‚Üí ‚àÄ x ‚àà F, IsOpen (connectedComponentIn F x) := by
  constructor
  ¬∑ intro h
    exact fun F hF x _ => hF.connectedComponentIn
  ¬∑ intro h
    rw [locallyConnectedSpace_iff_open_connected_subsets]
    refine' fun x U hU =>
        ‚ü®connectedComponentIn (interior U) x,
          (connectedComponentIn_subset _ _).trans interior_subset, h _ isOpen_interior x _,
          mem_connectedComponentIn _, isConnected_connectedComponentIn_iff.mpr _‚ü© <;>
      exact mem_interior_iff_mem_nhds.mpr hU
#align locally_connected_space_iff_connected_component_in_open locallyConnectedSpace_iff_connectedComponentIn_open

theorem locallyConnectedSpace_iff_connected_subsets :
    LocallyConnectedSpace Œ± ‚Üî ‚àÄ (x : Œ±), ‚àÄ U ‚àà ùìù x, ‚àÉ V ‚àà ùìù x, IsPreconnected V ‚àß V ‚äÜ U := by
  constructor
  ¬∑ rw [locallyConnectedSpace_iff_open_connected_subsets]
    intro h x U hxU
    rcases h x U hxU with ‚ü®V, hVU, hV‚ÇÅ, hxV, hV‚ÇÇ‚ü©
    exact ‚ü®V, hV‚ÇÅ.mem_nhds hxV, hV‚ÇÇ.isPreconnected, hVU‚ü©
  ¬∑ rw [locallyConnectedSpace_iff_connectedComponentIn_open]
    refine' fun h U hU x _ => isOpen_iff_mem_nhds.mpr fun y hy => _
    rw [connectedComponentIn_eq hy]
    rcases h y U (hU.mem_nhds <| (connectedComponentIn_subset _ _) hy) with ‚ü®V, hVy, hV, hVU‚ü©
    exact Filter.mem_of_superset hVy (hV.subset_connectedComponentIn (mem_of_mem_nhds hVy) hVU)
#align locally_connected_space_iff_connected_subsets locallyConnectedSpace_iff_connected_subsets

theorem locallyConnectedSpace_iff_connected_basis :
    LocallyConnectedSpace Œ± ‚Üî
      ‚àÄ x, (ùìù x).HasBasis (fun s : Set Œ± => s ‚àà ùìù x ‚àß IsPreconnected s) id := by
  rw [locallyConnectedSpace_iff_connected_subsets]
  exact forall_congr' <| fun x => Filter.hasBasis_self.symm
#align locally_connected_space_iff_connected_basis locallyConnectedSpace_iff_connected_basis

theorem locallyConnectedSpace_of_connected_bases {Œπ : Type*} (b : Œ± ‚Üí Œπ ‚Üí Set Œ±) (p : Œ± ‚Üí Œπ ‚Üí Prop)
    (hbasis : ‚àÄ x, (ùìù x).HasBasis (p x) (b x))
    (hconnected : ‚àÄ x i, p x i ‚Üí IsPreconnected (b x i)) : LocallyConnectedSpace Œ± := by
  rw [locallyConnectedSpace_iff_connected_basis]
  exact fun x =>
    (hbasis x).to_hasBasis
      (fun i hi => ‚ü®b x i, ‚ü®(hbasis x).mem_of_mem hi, hconnected x i hi‚ü©, subset_rfl‚ü©) fun s hs =>
      ‚ü®(hbasis x).index s hs.1, ‚ü®(hbasis x).property_index hs.1, (hbasis x).set_index_subset hs.1‚ü©‚ü©
#align locally_connected_space_of_connected_bases locallyConnectedSpace_of_connected_bases

theorem OpenEmbedding.locallyConnectedSpace [LocallyConnectedSpace Œ±] [TopologicalSpace Œ≤]
    {f : Œ≤ ‚Üí Œ±} (h : OpenEmbedding f) : LocallyConnectedSpace Œ≤ := by
  refine locallyConnectedSpace_of_connected_bases (fun _ s ‚Ü¶ f ‚Åª¬π' s)
    (fun x s ‚Ü¶ (IsOpen s ‚àß f x ‚àà s ‚àß IsConnected s) ‚àß s ‚äÜ range f) (fun x ‚Ü¶ ?_)
    (fun x s hxs ‚Ü¶ hxs.1.2.2.isPreconnected.preimage_of_open_map h.inj h.isOpenMap hxs.2)
  rw [h.nhds_eq_comap]
  exact LocallyConnectedSpace.open_connected_basis (f x) |>.restrict_subset
    (h.open_range.mem_nhds <| mem_range_self _) |>.comap _

theorem IsOpen.locallyConnectedSpace [LocallyConnectedSpace Œ±] {U : Set Œ±} (hU : IsOpen U) :
    LocallyConnectedSpace U :=
  hU.openEmbedding_subtype_val.locallyConnectedSpace

end LocallyConnectedSpace
