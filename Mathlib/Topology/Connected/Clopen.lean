/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Yury Kudryashov
-/
import Mathlib.Data.Set.Subset
import Mathlib.Data.Fintype.Sum
import Mathlib.Topology.Clopen
import Mathlib.Topology.Connected.Basic

/-!
# Connected subsets and their relation to clopen sets

In this file we show how connected subsets of a topological space are intimately connected
to clopen sets.

## Main declarations

+ `IsClopen.biUnion_connectedComponent_eq`: a clopen set is the union of its connected components.
+ `PreconnectedSpace.induction‚ÇÇ`: an induction principle for preconnected spaces.
+ `ConnectedComponents`: The connected components of a topological space, as a quotient type.

-/

open Set Function Topology TopologicalSpace Relation

universe u v

variable {Œ± : Type u} {Œ≤ : Type v} {Œπ : Type*} {X : Œπ ‚Üí Type*} [TopologicalSpace Œ±]
  {s t u v : Set Œ±}

section Preconnected

/-- Preconnected sets are either contained in or disjoint to any given clopen set. -/
theorem IsPreconnected.subset_isClopen {s t : Set Œ±} (hs : IsPreconnected s) (ht : IsClopen t)
    (hne : (s ‚à© t).Nonempty) : s ‚äÜ t :=
  hs.subset_left_of_subset_union ht.isOpen ht.compl.isOpen disjoint_compl_right (by simp) hne

theorem Sigma.isConnected_iff [‚àÄ i, TopologicalSpace (X i)] {s : Set (Œ£ i, X i)} :
    IsConnected s ‚Üî ‚àÉ i t, IsConnected t ‚àß s = Sigma.mk i '' t := by
  refine ‚ü®fun hs => ?_, ?_‚ü©
  ¬∑ obtain ‚ü®‚ü®i, x‚ü©, hx‚ü© := hs.nonempty
    have : s ‚äÜ range (Sigma.mk i) :=
      hs.isPreconnected.subset_isClopen isClopen_range_sigmaMk ‚ü®‚ü®i, x‚ü©, hx, x, rfl‚ü©
    exact ‚ü®i, Sigma.mk i ‚Åª¬π' s, hs.preimage_of_isOpenMap sigma_mk_injective isOpenMap_sigmaMk this,
      (Set.image_preimage_eq_of_subset this).symm‚ü©
  ¬∑ rintro ‚ü®i, t, ht, rfl‚ü©
    exact ht.image _ continuous_sigmaMk.continuousOn

theorem Sigma.isPreconnected_iff [hŒπ : Nonempty Œπ] [‚àÄ i, TopologicalSpace (X i)]
    {s : Set (Œ£ i, X i)} : IsPreconnected s ‚Üî ‚àÉ i t, IsPreconnected t ‚àß s = Sigma.mk i '' t := by
  refine ‚ü®fun hs => ?_, ?_‚ü©
  ¬∑ obtain rfl | h := s.eq_empty_or_nonempty
    ¬∑ exact ‚ü®Classical.choice hŒπ, ‚àÖ, isPreconnected_empty, (Set.image_empty _).symm‚ü©
    ¬∑ obtain ‚ü®a, t, ht, rfl‚ü© := Sigma.isConnected_iff.1 ‚ü®h, hs‚ü©
      exact ‚ü®a, t, ht.isPreconnected, rfl‚ü©
  ¬∑ rintro ‚ü®a, t, ht, rfl‚ü©
    exact ht.image _ continuous_sigmaMk.continuousOn

theorem Sum.isConnected_iff [TopologicalSpace Œ≤] {s : Set (Œ± ‚äï Œ≤)} :
    IsConnected s ‚Üî
      (‚àÉ t, IsConnected t ‚àß s = Sum.inl '' t) ‚à® ‚àÉ t, IsConnected t ‚àß s = Sum.inr '' t := by
  refine ‚ü®fun hs => ?_, ?_‚ü©
  ¬∑ obtain ‚ü®x | x, hx‚ü© := hs.nonempty
    ¬∑ have h : s ‚äÜ range Sum.inl :=
        hs.isPreconnected.subset_isClopen isClopen_range_inl ‚ü®.inl x, hx, x, rfl‚ü©
      refine Or.inl ‚ü®Sum.inl ‚Åª¬π' s, ?_, ?_‚ü©
      ¬∑ exact hs.preimage_of_isOpenMap Sum.inl_injective isOpenMap_inl h
      ¬∑ exact (image_preimage_eq_of_subset h).symm
    ¬∑ have h : s ‚äÜ range Sum.inr :=
        hs.isPreconnected.subset_isClopen isClopen_range_inr ‚ü®.inr x, hx, x, rfl‚ü©
      refine Or.inr ‚ü®Sum.inr ‚Åª¬π' s, ?_, ?_‚ü©
      ¬∑ exact hs.preimage_of_isOpenMap Sum.inr_injective isOpenMap_inr h
      ¬∑ exact (image_preimage_eq_of_subset h).symm
  ¬∑ rintro (‚ü®t, ht, rfl‚ü© | ‚ü®t, ht, rfl‚ü©)
    ¬∑ exact ht.image _ continuous_inl.continuousOn
    ¬∑ exact ht.image _ continuous_inr.continuousOn

theorem Sum.isPreconnected_iff [TopologicalSpace Œ≤] {s : Set (Œ± ‚äï Œ≤)} :
    IsPreconnected s ‚Üî
      (‚àÉ t, IsPreconnected t ‚àß s = Sum.inl '' t) ‚à® ‚àÉ t, IsPreconnected t ‚àß s = Sum.inr '' t := by
  refine ‚ü®fun hs => ?_, ?_‚ü©
  ¬∑ obtain rfl | h := s.eq_empty_or_nonempty
    ¬∑ exact Or.inl ‚ü®‚àÖ, isPreconnected_empty, (Set.image_empty _).symm‚ü©
    obtain ‚ü®t, ht, rfl‚ü© | ‚ü®t, ht, rfl‚ü© := Sum.isConnected_iff.1 ‚ü®h, hs‚ü©
    ¬∑ exact Or.inl ‚ü®t, ht.isPreconnected, rfl‚ü©
    ¬∑ exact Or.inr ‚ü®t, ht.isPreconnected, rfl‚ü©
  ¬∑ rintro (‚ü®t, ht, rfl‚ü© | ‚ü®t, ht, rfl‚ü©)
    ¬∑ exact ht.image _ continuous_inl.continuousOn
    ¬∑ exact ht.image _ continuous_inr.continuousOn

/-- A continuous map from a connected space to a disjoint union `Œ£ i, X i` can be lifted to one of
the components `X i`. See also `ContinuousMap.exists_lift_sigma` for a version with bundled
`ContinuousMap`s. -/
theorem Continuous.exists_lift_sigma [ConnectedSpace Œ±] [‚àÄ i, TopologicalSpace (X i)]
    {f : Œ± ‚Üí Œ£ i, X i} (hf : Continuous f) :
    ‚àÉ (i : Œπ) (g : Œ± ‚Üí X i), Continuous g ‚àß f = Sigma.mk i ‚àò g := by
  obtain ‚ü®i, hi‚ü© : ‚àÉ i, range f ‚äÜ range (.mk i) := by
    rcases Sigma.isConnected_iff.1 (isConnected_range hf) with ‚ü®i, s, -, hs‚ü©
    exact ‚ü®i, hs.trans_subset (image_subset_range _ _)‚ü©
  rcases range_subset_range_iff_exists_comp.1 hi with ‚ü®g, rfl‚ü©
  refine ‚ü®i, g, ?_, rfl‚ü©
  rwa [‚Üê IsEmbedding.sigmaMk.continuous_iff] at hf

theorem nonempty_inter [PreconnectedSpace Œ±] {s t : Set Œ±} :
    IsOpen s ‚Üí IsOpen t ‚Üí s ‚à™ t = univ ‚Üí s.Nonempty ‚Üí t.Nonempty ‚Üí (s ‚à© t).Nonempty := by
  simpa only [univ_inter, univ_subset_iff] using @PreconnectedSpace.isPreconnected_univ Œ± _ _ s t

theorem isClopen_iff [PreconnectedSpace Œ±] {s : Set Œ±} : IsClopen s ‚Üî s = ‚àÖ ‚à® s = univ :=
  ‚ü®fun hs =>
    by_contradiction fun h =>
      have h1 : s ‚â† ‚àÖ ‚àß s·∂ú ‚â† ‚àÖ :=
        ‚ü®mt Or.inl h,
          mt (fun h2 => Or.inr <| (by rw [‚Üê compl_compl s, h2, compl_empty] : s = univ)) h‚ü©
      let ‚ü®_, h2, h3‚ü© :=
        nonempty_inter hs.2 hs.1.isOpen_compl (union_compl_self s) (nonempty_iff_ne_empty.2 h1.1)
          (nonempty_iff_ne_empty.2 h1.2)
      h3 h2,
    by rintro (rfl | rfl) <;> [exact isClopen_empty; exact isClopen_univ]‚ü©

theorem IsClopen.eq_univ [PreconnectedSpace Œ±] {s : Set Œ±} (h' : IsClopen s) (h : s.Nonempty) :
    s = univ :=
  (isClopen_iff.mp h').resolve_left h.ne_empty

open Set.Notation in
lemma isClopen_preimage_val {X : Type*} [TopologicalSpace X] {u v : Set X}
    (hu : IsOpen u) (huv : Disjoint (frontier u) v) : IsClopen (v ‚Üì‚à© u) := by
  refine ‚ü®?_, isOpen_induced hu (f := Subtype.val)‚ü©
  refine isClosed_induced_iff.mpr ‚ü®closure u, isClosed_closure, ?_‚ü©
  apply image_val_injective
  simp only [Subtype.image_preimage_coe]
  rw [closure_eq_self_union_frontier, inter_union_distrib_left, inter_comm _ (frontier u),
    huv.inter_eq, union_empty]

section disjoint_subsets

variable [PreconnectedSpace Œ±]
  {s : Œπ ‚Üí Set Œ±} (h_nonempty : ‚àÄ i, (s i).Nonempty) (h_disj : Pairwise (Disjoint on s))
include h_nonempty h_disj

/-- In a preconnected space, any disjoint family of non-empty clopen subsets has at most one
element. -/
lemma subsingleton_of_disjoint_isClopen
    (h_clopen : ‚àÄ i, IsClopen (s i)) :
    Subsingleton Œπ := by
  replace h_nonempty : ‚àÄ i, s i ‚â† ‚àÖ := by intro i; rw [‚Üê nonempty_iff_ne_empty]; exact h_nonempty i
  rw [‚Üê not_nontrivial_iff_subsingleton]
  by_contra contra
  obtain ‚ü®i, j, h_ne‚ü© := contra
  replace h_ne : s i ‚à© s j = ‚àÖ := by
    simpa only [‚Üê bot_eq_empty, eq_bot_iff, ‚Üê inf_eq_inter, ‚Üê disjoint_iff_inf_le] using h_disj h_ne
  rcases isClopen_iff.mp (h_clopen i) with hi | hi
  ¬∑ exact h_nonempty i hi
  ¬∑ rw [hi, univ_inter] at h_ne
    exact h_nonempty j h_ne

/-- In a preconnected space, any disjoint cover by non-empty open subsets has at most one
element. -/
lemma subsingleton_of_disjoint_isOpen_iUnion_eq_univ
    (h_open : ‚àÄ i, IsOpen (s i)) (h_Union : ‚ãÉ i, s i = univ) :
    Subsingleton Œπ := by
  refine subsingleton_of_disjoint_isClopen h_nonempty h_disj (fun i ‚Ü¶ ‚ü®?_, h_open i‚ü©)
  rw [‚Üê isOpen_compl_iff, compl_eq_univ_diff, ‚Üê h_Union, iUnion_diff]
  refine isOpen_iUnion (fun j ‚Ü¶ ?_)
  rcases eq_or_ne i j with rfl | h_ne
  ¬∑ simp
  ¬∑ simpa only [(h_disj h_ne.symm).sdiff_eq_left] using h_open j

/-- In a preconnected space, any finite disjoint cover by non-empty closed subsets has at most one
element. -/
lemma subsingleton_of_disjoint_isClosed_iUnion_eq_univ [Finite Œπ]
    (h_closed : ‚àÄ i, IsClosed (s i)) (h_Union : ‚ãÉ i, s i = univ) :
    Subsingleton Œπ := by
  refine subsingleton_of_disjoint_isClopen h_nonempty h_disj (fun i ‚Ü¶ ‚ü®h_closed i, ?_‚ü©)
  rw [‚Üê isClosed_compl_iff, compl_eq_univ_diff, ‚Üê h_Union, iUnion_diff]
  refine isClosed_iUnion_of_finite (fun j ‚Ü¶ ?_)
  rcases eq_or_ne i j with rfl | h_ne
  ¬∑ simp
  ¬∑ simpa only [(h_disj h_ne.symm).sdiff_eq_left] using h_closed j

end disjoint_subsets

theorem frontier_eq_empty_iff [PreconnectedSpace Œ±] {s : Set Œ±} :
    frontier s = ‚àÖ ‚Üî s = ‚àÖ ‚à® s = univ :=
  isClopen_iff_frontier_eq_empty.symm.trans isClopen_iff

theorem nonempty_frontier_iff [PreconnectedSpace Œ±] {s : Set Œ±} :
    (frontier s).Nonempty ‚Üî s.Nonempty ‚àß s ‚â† univ := by
  simp only [nonempty_iff_ne_empty, Ne, frontier_eq_empty_iff, not_or]

/-- In a preconnected space, given a transitive relation `P`, if `P x y` and `P y x` are true
for `y` close enough to `x`, then `P x y` holds for all `x, y`. This is a version of the fact
that, if an equivalence relation has open classes, then it has a single equivalence class. -/
lemma PreconnectedSpace.induction‚ÇÇ' [PreconnectedSpace Œ±] (P : Œ± ‚Üí Œ± ‚Üí Prop)
    (h : ‚àÄ x, ‚àÄ·∂† y in ùìù x, P x y ‚àß P y x) (h' : Transitive P) (x y : Œ±) :
    P x y := by
  let u := {z | P x z}
  have A : IsClosed u := by
    apply isClosed_iff_nhds.2 (fun z hz ‚Ü¶ ?_)
    rcases hz _ (h z) with ‚ü®t, ht, h't‚ü©
    exact h' h't ht.2
  have B : IsOpen u := by
    apply isOpen_iff_mem_nhds.2 (fun z hz ‚Ü¶ ?_)
    filter_upwards [h z] with t ht
    exact h' hz ht.1
  have C : u.Nonempty := ‚ü®x, (mem_of_mem_nhds (h x)).1‚ü©
  have D : u = Set.univ := IsClopen.eq_univ ‚ü®A, B‚ü© C
  change y ‚àà u
  simp [D]

/-- In a preconnected space, if a symmetric transitive relation `P x y` is true for `y` close
enough to `x`, then it holds for all `x, y`. This is a version of the fact that, if an equivalence
relation has open classes, then it has a single equivalence class. -/
lemma PreconnectedSpace.induction‚ÇÇ [PreconnectedSpace Œ±] (P : Œ± ‚Üí Œ± ‚Üí Prop)
    (h : ‚àÄ x, ‚àÄ·∂† y in ùìù x, P x y) (h' : Transitive P) (h'' : Symmetric P) (x y : Œ±) :
    P x y := by
  refine PreconnectedSpace.induction‚ÇÇ' P (fun z ‚Ü¶ ?_) h' x y
  filter_upwards [h z] with a ha
  exact ‚ü®ha, h'' ha‚ü©

/-- In a preconnected set, given a transitive relation `P`, if `P x y` and `P y x` are true
for `y` close enough to `x`, then `P x y` holds for all `x, y`. This is a version of the fact
that, if an equivalence relation has open classes, then it has a single equivalence class. -/
lemma IsPreconnected.induction‚ÇÇ' {s : Set Œ±} (hs : IsPreconnected s) (P : Œ± ‚Üí Œ± ‚Üí Prop)
    (h : ‚àÄ x ‚àà s, ‚àÄ·∂† y in ùìù[s] x, P x y ‚àß P y x)
    (h' : ‚àÄ x y z, x ‚àà s ‚Üí y ‚àà s ‚Üí z ‚àà s ‚Üí P x y ‚Üí P y z ‚Üí P x z)
    {x y : Œ±} (hx : x ‚àà s) (hy : y ‚àà s) : P x y := by
  let Q : s ‚Üí s ‚Üí Prop := fun a b ‚Ü¶ P a b
  change Q ‚ü®x, hx‚ü© ‚ü®y, hy‚ü©
  have : PreconnectedSpace s := Subtype.preconnectedSpace hs
  apply PreconnectedSpace.induction‚ÇÇ'
  ¬∑ rintro ‚ü®x, hx‚ü©
    have Z := h x hx
    rwa [nhdsWithin_eq_map_subtype_coe] at Z
  ¬∑ rintro ‚ü®a, ha‚ü© ‚ü®b, hb‚ü© ‚ü®c, hc‚ü© hab hbc
    exact h' a b c ha hb hc hab hbc

/-- In a preconnected set, if a symmetric transitive relation `P x y` is true for `y` close
enough to `x`, then it holds for all `x, y`. This is a version of the fact that, if an equivalence
relation has open classes, then it has a single equivalence class. -/
lemma IsPreconnected.induction‚ÇÇ {s : Set Œ±} (hs : IsPreconnected s) (P : Œ± ‚Üí Œ± ‚Üí Prop)
    (h : ‚àÄ x ‚àà s, ‚àÄ·∂† y in ùìù[s] x, P x y)
    (h' : ‚àÄ x y z, x ‚àà s ‚Üí y ‚àà s ‚Üí z ‚àà s ‚Üí P x y ‚Üí P y z ‚Üí P x z)
    (h'' : ‚àÄ x y, x ‚àà s ‚Üí y ‚àà s ‚Üí P x y ‚Üí P y x)
    {x y : Œ±} (hx : x ‚àà s) (hy : y ‚àà s) : P x y := by
  apply hs.induction‚ÇÇ' P (fun z hz ‚Ü¶ ?_) h' hx hy
  filter_upwards [h z hz, self_mem_nhdsWithin] with a ha h'a
  exact ‚ü®ha, h'' z a hz h'a ha‚ü©

/-- A set `s` is preconnected if and only if for every cover by two open sets that are disjoint on
`s`, it is contained in one of the two covering sets. -/
theorem isPreconnected_iff_subset_of_disjoint {s : Set Œ±} :
    IsPreconnected s ‚Üî
      ‚àÄ u v, IsOpen u ‚Üí IsOpen v ‚Üí s ‚äÜ u ‚à™ v ‚Üí s ‚à© (u ‚à© v) = ‚àÖ ‚Üí s ‚äÜ u ‚à® s ‚äÜ v := by
  constructor <;> intro h
  ¬∑ intro u v hu hv hs huv
    specialize h u v hu hv hs
    contrapose! huv
    simp only [not_subset] at huv
    rcases huv with ‚ü®‚ü®x, hxs, hxu‚ü©, ‚ü®y, hys, hyv‚ü©‚ü©
    have hxv : x ‚àà v := or_iff_not_imp_left.mp (hs hxs) hxu
    have hyu : y ‚àà u := or_iff_not_imp_right.mp (hs hys) hyv
    exact h ‚ü®y, hys, hyu‚ü© ‚ü®x, hxs, hxv‚ü©
  ¬∑ intro u v hu hv hs hsu hsv
    by_contra H
    specialize h u v hu hv hs (Set.not_nonempty_iff_eq_empty.mp H)
    apply H
    rcases h with h | h
    ¬∑ rcases hsv with ‚ü®x, hxs, hxv‚ü©
      exact ‚ü®x, hxs, ‚ü®h hxs, hxv‚ü©‚ü©
    ¬∑ rcases hsu with ‚ü®x, hxs, hxu‚ü©
      exact ‚ü®x, hxs, ‚ü®hxu, h hxs‚ü©‚ü©

/-- A set `s` is connected if and only if
for every cover by a finite collection of open sets that are pairwise disjoint on `s`,
it is contained in one of the members of the collection. -/
theorem isConnected_iff_sUnion_disjoint_open {s : Set Œ±} :
    IsConnected s ‚Üî
      ‚àÄ U : Finset (Set Œ±), (‚àÄ u v : Set Œ±, u ‚àà U ‚Üí v ‚àà U ‚Üí (s ‚à© (u ‚à© v)).Nonempty ‚Üí u = v) ‚Üí
        (‚àÄ u ‚àà U, IsOpen u) ‚Üí (s ‚äÜ ‚ãÉ‚ÇÄ ‚ÜëU) ‚Üí ‚àÉ u ‚àà U, s ‚äÜ u := by
  rw [IsConnected, isPreconnected_iff_subset_of_disjoint]
  classical
  refine ‚ü®fun ‚ü®hne, h‚ü© U hU hUo hsU => ?_, fun h => ‚ü®?_, fun u v hu hv hs hsuv => ?_‚ü©‚ü©
  ¬∑ induction U using Finset.induction_on with
    | empty => exact absurd (by simpa using hsU) hne.not_subset_empty
    | insert u U uU IH =>
      simp only [‚Üê forall_cond_comm, Finset.forall_mem_insert, Finset.exists_mem_insert,
        Finset.coe_insert, sUnion_insert, implies_true, true_and] at *
      refine (h _ hUo.1 (‚ãÉ‚ÇÄ ‚ÜëU) (isOpen_sUnion hUo.2) hsU ?_).imp_right ?_
      ¬∑ refine subset_empty_iff.1 fun x ‚ü®hxs, hxu, v, hvU, hxv‚ü© => ?_
        exact ne_of_mem_of_not_mem hvU uU (hU.1 v hvU ‚ü®x, hxs, hxu, hxv‚ü©).symm
      ¬∑ exact IH (fun u hu => (hU.2 u hu).2) hUo.2
  ¬∑ simpa [subset_empty_iff, nonempty_iff_ne_empty] using h ‚àÖ
  ¬∑ rw [‚Üê not_nonempty_iff_eq_empty] at hsuv
    have := hsuv; rw [inter_comm u] at this
    simpa [*, or_imp, forall_and] using h {u, v}

/-- Preconnected sets are either contained in or disjoint to any given clopen set. -/
theorem disjoint_or_subset_of_isClopen {s t : Set Œ±} (hs : IsPreconnected s) (ht : IsClopen t) :
    Disjoint s t ‚à® s ‚äÜ t :=
  (disjoint_or_nonempty_inter s t).imp_right <| hs.subset_isClopen ht

/-- A set `s` is preconnected if and only if
for every cover by two closed sets that are disjoint on `s`,
it is contained in one of the two covering sets. -/
theorem isPreconnected_iff_subset_of_disjoint_closed :
    IsPreconnected s ‚Üî
      ‚àÄ u v, IsClosed u ‚Üí IsClosed v ‚Üí s ‚äÜ u ‚à™ v ‚Üí s ‚à© (u ‚à© v) = ‚àÖ ‚Üí s ‚äÜ u ‚à® s ‚äÜ v := by
  constructor <;> intro h
  ¬∑ intro u v hu hv hs huv
    rw [isPreconnected_closed_iff] at h
    specialize h u v hu hv hs
    contrapose! huv
    simp only [not_subset] at huv
    rcases huv with ‚ü®‚ü®x, hxs, hxu‚ü©, ‚ü®y, hys, hyv‚ü©‚ü©
    have hxv : x ‚àà v := or_iff_not_imp_left.mp (hs hxs) hxu
    have hyu : y ‚àà u := or_iff_not_imp_right.mp (hs hys) hyv
    exact h ‚ü®y, hys, hyu‚ü© ‚ü®x, hxs, hxv‚ü©
  ¬∑ rw [isPreconnected_closed_iff]
    intro u v hu hv hs hsu hsv
    by_contra H
    specialize h u v hu hv hs (Set.not_nonempty_iff_eq_empty.mp H)
    apply H
    rcases h with h | h
    ¬∑ rcases hsv with ‚ü®x, hxs, hxv‚ü©
      exact ‚ü®x, hxs, ‚ü®h hxs, hxv‚ü©‚ü©
    ¬∑ rcases hsu with ‚ü®x, hxs, hxu‚ü©
      exact ‚ü®x, hxs, ‚ü®hxu, h hxs‚ü©‚ü©

/-- A closed set `s` is preconnected if and only if for every cover by two closed sets that are
disjoint, it is contained in one of the two covering sets. -/
theorem isPreconnected_iff_subset_of_fully_disjoint_closed {s : Set Œ±} (hs : IsClosed s) :
    IsPreconnected s ‚Üî
      ‚àÄ u v, IsClosed u ‚Üí IsClosed v ‚Üí s ‚äÜ u ‚à™ v ‚Üí Disjoint u v ‚Üí s ‚äÜ u ‚à® s ‚äÜ v := by
  refine isPreconnected_iff_subset_of_disjoint_closed.trans ‚ü®?_, ?_‚ü© <;> intro H u v hu hv hss huv
  ¬∑ apply H u v hu hv hss
    rw [huv.inter_eq, inter_empty]
  have H1 := H (u ‚à© s) (v ‚à© s)
  rw [subset_inter_iff, subset_inter_iff] at H1
  simp only [Subset.refl, and_true] at H1
  apply H1 (hu.inter hs) (hv.inter hs)
  ¬∑ rw [‚Üê union_inter_distrib_right]
    exact subset_inter hss Subset.rfl
  ¬∑ rwa [disjoint_iff_inter_eq_empty, ‚Üê inter_inter_distrib_right, inter_comm]

theorem IsClopen.connectedComponent_subset {x} (hs : IsClopen s) (hx : x ‚àà s) :
    connectedComponent x ‚äÜ s :=
  isPreconnected_connectedComponent.subset_isClopen hs ‚ü®x, mem_connectedComponent, hx‚ü©

/-- The connected component of a point is always a subset of the intersection of all its clopen
neighbourhoods. -/
theorem connectedComponent_subset_iInter_isClopen {x : Œ±} :
    connectedComponent x ‚äÜ ‚ãÇ Z : { Z : Set Œ± // IsClopen Z ‚àß x ‚àà Z }, Z :=
  subset_iInter fun Z => Z.2.1.connectedComponent_subset Z.2.2

/-- A clopen set is the union of its connected components. -/
theorem IsClopen.biUnion_connectedComponent_eq {Z : Set Œ±} (h : IsClopen Z) :
    ‚ãÉ x ‚àà Z, connectedComponent x = Z :=
  Subset.antisymm (iUnion‚ÇÇ_subset fun _ => h.connectedComponent_subset) fun _ h =>
    mem_iUnion‚ÇÇ_of_mem h mem_connectedComponent

open Set.Notation in
/-- If `u v : Set X` and `u ‚äÜ v` is clopen in `v`, then `u` is the union of the connected
components of `v` in `X` which intersect `u`. -/
lemma IsClopen.biUnion_connectedComponentIn {X : Type*} [TopologicalSpace X] {u v : Set X}
    (hu : IsClopen (v ‚Üì‚à© u)) (huv‚ÇÅ : u ‚äÜ v) :
    u = ‚ãÉ x ‚àà u, connectedComponentIn v x := by
  have := congr(((‚Üë) : Set v ‚Üí Set X) $(hu.biUnion_connectedComponent_eq.symm))
  simp only [Subtype.image_preimage_coe, mem_preimage, iUnion_coe_set, image_val_iUnion,
    inter_eq_right.mpr huv‚ÇÅ] at this
  nth_rw 1 [this]
  congr! 2 with x hx
  simp only [‚Üê connectedComponentIn_eq_image]
  exact le_antisymm (iUnion_subset fun _ ‚Ü¶ le_rfl) <|
    iUnion_subset fun hx ‚Ü¶ subset_iUnion‚ÇÇ_of_subset (huv‚ÇÅ hx) hx le_rfl

lemma IsClopen.connectedComponentIn_eq {U : Set Œ±} (hU : IsClopen U) {x : Œ±} (hx : x ‚àà U) :
    connectedComponentIn U x = connectedComponent x :=
  subset_antisymm ((isPreconnected_connectedComponentIn).subset_connectedComponent
    (mem_connectedComponentIn hx)) <|
    (isPreconnected_connectedComponent).subset_connectedComponentIn (mem_connectedComponent)
    (hU.connectedComponent_subset hx)

variable [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤}

/-- The preimage of a connected component is preconnected if the function has connected fibers
and a subset is closed iff the preimage is. -/
theorem preimage_connectedComponent_connected
    (connected_fibers : ‚àÄ t : Œ≤, IsConnected (f ‚Åª¬π' {t}))
    (hcl : ‚àÄ T : Set Œ≤, IsClosed T ‚Üî IsClosed (f ‚Åª¬π' T)) (t : Œ≤) :
    IsConnected (f ‚Åª¬π' connectedComponent t) := by
  -- The following proof is essentially https://stacks.math.columbia.edu/tag/0377
  -- although the statement is slightly different
  have hf : Surjective f := Surjective.of_comp fun t : Œ≤ => (connected_fibers t).1
  refine ‚ü®Nonempty.preimage connectedComponent_nonempty hf, ?_‚ü©
  have hT : IsClosed (f ‚Åª¬π' connectedComponent t) :=
    (hcl (connectedComponent t)).1 isClosed_connectedComponent
  -- To show it's preconnected we decompose (f ‚Åª¬π' connectedComponent t) as a subset of two
  -- closed disjoint sets in Œ±. We want to show that it's a subset of either.
  rw [isPreconnected_iff_subset_of_fully_disjoint_closed hT]
  intro u v hu hv huv uv_disj
  -- To do this we decompose connectedComponent t into T‚ÇÅ and T‚ÇÇ
  -- we will show that connectedComponent t is a subset of either and hence
  -- (f ‚Åª¬π' connectedComponent t) is a subset of u or v
  let T‚ÇÅ := { t' ‚àà connectedComponent t | f ‚Åª¬π' {t'} ‚äÜ u }
  let T‚ÇÇ := { t' ‚àà connectedComponent t | f ‚Åª¬π' {t'} ‚äÜ v }
  have fiber_decomp : ‚àÄ t' ‚àà connectedComponent t, f ‚Åª¬π' {t'} ‚äÜ u ‚à® f ‚Åª¬π' {t'} ‚äÜ v := by
    intro t' ht'
    apply isPreconnected_iff_subset_of_disjoint_closed.1 (connected_fibers t').2 u v hu hv
    ¬∑ exact Subset.trans (preimage_mono (singleton_subset_iff.2 ht')) huv
    rw [uv_disj.inter_eq, inter_empty]
  have T‚ÇÅ_u : f ‚Åª¬π' T‚ÇÅ = f ‚Åª¬π' connectedComponent t ‚à© u := by
    apply eq_of_subset_of_subset
    ¬∑ rw [‚Üê biUnion_preimage_singleton]
      refine iUnion‚ÇÇ_subset fun t' ht' => subset_inter ?_ ht'.2
      rw [hf.preimage_subset_preimage_iff, singleton_subset_iff]
      exact ht'.1
    rintro a ‚ü®hat, hau‚ü©
    constructor
    ¬∑ exact mem_preimage.1 hat
    refine (fiber_decomp (f a) (mem_preimage.1 hat)).resolve_right fun h => ?_
    exact uv_disj.subset_compl_right hau (h rfl)
  -- This proof is exactly the same as the above (modulo some symmetry)
  have T‚ÇÇ_v : f ‚Åª¬π' T‚ÇÇ = f ‚Åª¬π' connectedComponent t ‚à© v := by
    apply eq_of_subset_of_subset
    ¬∑ rw [‚Üê biUnion_preimage_singleton]
      refine iUnion‚ÇÇ_subset fun t' ht' => subset_inter ?_ ht'.2
      rw [hf.preimage_subset_preimage_iff, singleton_subset_iff]
      exact ht'.1
    rintro a ‚ü®hat, hav‚ü©
    constructor
    ¬∑ exact mem_preimage.1 hat
    ¬∑ refine (fiber_decomp (f a) (mem_preimage.1 hat)).resolve_left fun h => ?_
      exact uv_disj.subset_compl_left hav (h rfl)
  -- Now we show T‚ÇÅ, T‚ÇÇ are closed, cover connectedComponent t and are disjoint.
  have hT‚ÇÅ : IsClosed T‚ÇÅ := (hcl T‚ÇÅ).2 (T‚ÇÅ_u.symm ‚ñ∏ IsClosed.inter hT hu)
  have hT‚ÇÇ : IsClosed T‚ÇÇ := (hcl T‚ÇÇ).2 (T‚ÇÇ_v.symm ‚ñ∏ IsClosed.inter hT hv)
  have T_decomp : connectedComponent t ‚äÜ T‚ÇÅ ‚à™ T‚ÇÇ := fun t' ht' => by
    rw [mem_union t' T‚ÇÅ T‚ÇÇ]
    rcases fiber_decomp t' ht' with htu | htv
    ¬∑ left; exact ‚ü®ht', htu‚ü©
    ¬∑ right; exact ‚ü®ht', htv‚ü©
  have T_disjoint : Disjoint T‚ÇÅ T‚ÇÇ := by
    refine Disjoint.of_preimage hf ?_
    rw [T‚ÇÅ_u, T‚ÇÇ_v, disjoint_iff_inter_eq_empty, ‚Üê inter_inter_distrib_left, uv_disj.inter_eq,
      inter_empty]
  -- Now we do cases on whether (connectedComponent t) is a subset of T‚ÇÅ or T‚ÇÇ to show
  -- that the preimage is a subset of u or v.
  rcases (isPreconnected_iff_subset_of_fully_disjoint_closed isClosed_connectedComponent).1
    isPreconnected_connectedComponent T‚ÇÅ T‚ÇÇ hT‚ÇÅ hT‚ÇÇ T_decomp T_disjoint with h | h
  ¬∑ left
    rw [Subset.antisymm_iff] at T‚ÇÅ_u
    suffices f ‚Åª¬π' connectedComponent t ‚äÜ f ‚Åª¬π' T‚ÇÅ
      from (this.trans T‚ÇÅ_u.1).trans inter_subset_right
    exact preimage_mono h
  ¬∑ right
    rw [Subset.antisymm_iff] at T‚ÇÇ_v
    suffices f ‚Åª¬π' connectedComponent t ‚äÜ f ‚Åª¬π' T‚ÇÇ
      from (this.trans T‚ÇÇ_v.1).trans inter_subset_right
    exact preimage_mono h

theorem Topology.IsQuotientMap.preimage_connectedComponent (hf : IsQuotientMap f)
    (h_fibers : ‚àÄ y : Œ≤, IsConnected (f ‚Åª¬π' {y})) (a : Œ±) :
    f ‚Åª¬π' connectedComponent (f a) = connectedComponent a :=
  ((preimage_connectedComponent_connected h_fibers (fun _ => hf.isClosed_preimage.symm)
      _).subset_connectedComponent mem_connectedComponent).antisymm
    (hf.continuous.mapsTo_connectedComponent a)

lemma Topology.IsQuotientMap.image_connectedComponent {f : Œ± ‚Üí Œ≤} (hf : IsQuotientMap f)
    (h_fibers : ‚àÄ y : Œ≤, IsConnected (f ‚Åª¬π' {y})) (a : Œ±) :
    f '' connectedComponent a = connectedComponent (f a) := by
  rw [‚Üê hf.preimage_connectedComponent h_fibers, image_preimage_eq _ hf.surjective]

end Preconnected

section connectedComponentSetoid
/-- The setoid of connected components of a topological space -/
def connectedComponentSetoid (Œ± : Type*) [TopologicalSpace Œ±] : Setoid Œ± :=
  ‚ü®fun x y => connectedComponent x = connectedComponent y,
    ‚ü®fun x => by trivial, fun h1 => h1.symm, fun h1 h2 => h1.trans h2‚ü©‚ü©

/-- The quotient of a space by its connected components -/
def ConnectedComponents (Œ± : Type u) [TopologicalSpace Œ±] :=
  Quotient (connectedComponentSetoid Œ±)

namespace ConnectedComponents

/-- Coercion from a topological space to the set of connected components of this space. -/
def mk : Œ± ‚Üí ConnectedComponents Œ± := Quotient.mk''

instance : CoeTC Œ± (ConnectedComponents Œ±) := ‚ü®mk‚ü©

@[simp]
theorem coe_eq_coe {x y : Œ±} :
    (x : ConnectedComponents Œ±) = y ‚Üî connectedComponent x = connectedComponent y :=
  Quotient.eq''

theorem coe_ne_coe {x y : Œ±} :
    (x : ConnectedComponents Œ±) ‚â† y ‚Üî connectedComponent x ‚â† connectedComponent y :=
  coe_eq_coe.not

theorem coe_eq_coe' {x y : Œ±} : (x : ConnectedComponents Œ±) = y ‚Üî x ‚àà connectedComponent y :=
  coe_eq_coe.trans connectedComponent_eq_iff_mem

instance [Inhabited Œ±] : Inhabited (ConnectedComponents Œ±) :=
  ‚ü®mk default‚ü©

instance : TopologicalSpace (ConnectedComponents Œ±) :=
  inferInstanceAs (TopologicalSpace (Quotient _))

theorem surjective_coe : Surjective (mk : Œ± ‚Üí ConnectedComponents Œ±) :=
  Quot.mk_surjective

theorem isQuotientMap_coe : IsQuotientMap (mk : Œ± ‚Üí ConnectedComponents Œ±) :=
  isQuotientMap_quot_mk

@[continuity]
theorem continuous_coe : Continuous (mk : Œ± ‚Üí ConnectedComponents Œ±) :=
  isQuotientMap_coe.continuous

@[simp]
theorem range_coe : range (mk : Œ± ‚Üí ConnectedComponents Œ±) = univ :=
  surjective_coe.range_eq

lemma nonempty_iff_nonempty : Nonempty (ConnectedComponents Œ±) ‚Üî Nonempty Œ± :=
  ‚ü®fun _ ‚Ü¶ ConnectedComponents.surjective_coe.nonempty, fun h ‚Ü¶ h.map ConnectedComponents.mk‚ü©

instance [Nonempty Œ±] : Nonempty (ConnectedComponents Œ±) := by
  rwa [ConnectedComponents.nonempty_iff_nonempty]

lemma isEmpty_iff_isEmpty : IsEmpty (ConnectedComponents Œ±) ‚Üî IsEmpty Œ± := by
  rw [‚Üê not_iff_not, not_isEmpty_iff, not_isEmpty_iff, nonempty_iff_nonempty]

instance subsingleton [PreconnectedSpace Œ±] : Subsingleton (ConnectedComponents Œ±) := by
  refine ‚ü®fun x y ‚Ü¶ ?_‚ü©
  obtain ‚ü®x, rfl‚ü© := surjective_coe x
  obtain ‚ü®y, rfl‚ü© := surjective_coe y
  simp_rw [coe_eq_coe, PreconnectedSpace.connectedComponent_eq_univ, ]

section

variable {Œπ : Type*} {U : Œπ ‚Üí Set Œ±} (hclopen : ‚àÄ i, IsClopen (U i))
  (hdisj : Pairwise (Disjoint on U)) (hunion : ‚ãÉ i, U i = Set.univ)
  (hconn : ‚àÄ i, IsPreconnected (U i))

include hclopen hdisj hunion in
/-- A pairwise disjoint cover by clopens partitions the connected components. -/
noncomputable def equivOfIsClopen : ConnectedComponents Œ± ‚âÉ Œ£ i, ConnectedComponents (U i) := by
  have heq {x : Œ±} {i} (hx : x ‚àà U i) :
      Subtype.val '' connectedComponent ‚ü®x, hx‚ü© = connectedComponent x := by
    rw [‚Üê connectedComponentIn_eq_image hx, (hclopen i).connectedComponentIn_eq hx]
  refine .symm <| .ofBijective
    (fun ‚ü®i, x‚ü© ‚Ü¶
      Quotient.lift (ConnectedComponents.mk ‚àò Subtype.val)
        (fun x y (hxy : connectedComponent x = connectedComponent y) ‚Ü¶ by
          simp [‚Üê heq x.2, ‚Üê heq y.2, hxy])
        x)
    ‚ü®fun ‚ü®i, x‚ü© ‚ü®j, y‚ü© hxy ‚Ü¶ ?_, fun x ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®x, rfl‚ü© := ConnectedComponents.surjective_coe x
    obtain ‚ü®i, hi‚ü© := Set.iUnion_eq_univ_iff.mp hunion x
    simp only [Sigma.exists]
    use i, .mk ‚ü®x, hi‚ü©
    rfl
  ¬∑ obtain ‚ü®x, rfl‚ü© := ConnectedComponents.surjective_coe x
    obtain ‚ü®y, rfl‚ü© := ConnectedComponents.surjective_coe y
    replace hxy : ConnectedComponents.mk x.val = ConnectedComponents.mk y.val := hxy
    rw [ConnectedComponents.coe_eq_coe] at hxy
    obtain rfl : i = j := by
      apply hdisj.eq
      rw [Set.not_disjoint_iff]
      exact ‚ü®x, x.2, (hclopen j).connectedComponent_subset y.2 (hxy ‚ñ∏ mem_connectedComponent)‚ü©
    simp [‚Üê Set.image_val_inj, heq, hxy]

include hclopen hdisj hunion in
/-- If `Œπ` indexes a disjoint union decomposition of `Œ±`, it is equivalent to the connected
components of `Œ±`. -/
noncomputable def equivOfIsClopenOfIsConnected (hconn : ‚àÄ i, IsConnected (U i)) :
    ConnectedComponents Œ± ‚âÉ Œπ :=
  have _ (i) : ConnectedSpace (U i) := isConnected_iff_connectedSpace.mp (hconn i)
  letI _ (i) : Unique (ConnectedComponents <| U i) := (nonempty_unique _).some
  (equivOfIsClopen hclopen hdisj hunion).trans (.sigmaUnique _ _)

end

variable (Œ±) in
open Set in
/-- If `X` has infinitely many connected components, it admits disjoint union decompositions with
arbitrarily many summands. -/
lemma exists_fun_isClopen_of_infinite [Infinite (ConnectedComponents Œ±)] (n : ‚Ñï) (hn : 0 < n) :
    ‚àÉ (U : Fin n ‚Üí Set Œ±), (‚àÄ i, IsClopen (U i)) ‚àß (‚àÄ i, (U i).Nonempty) ‚àß
      Pairwise (Function.onFun Disjoint U) ‚àß ‚ãÉ i, U i = Set.univ :=
  suffices h : ‚àÉ (Œπ : Type) (e : Œπ ‚âÉ Fin n) (U : Œπ ‚Üí Set Œ±), (‚àÄ i, IsClopen (U i)) ‚àß
      (‚àÄ i, (U i).Nonempty) ‚àß Pairwise (Function.onFun Disjoint U) ‚àß ‚ãÉ i, U i = Set.univ by
    obtain ‚ü®Œπ, e, U, hU1, hU2, hU3, hU4‚ü© := h
    refine ‚ü®U ‚àò e.symm, fun i ‚Ü¶ hU1 _, fun i ‚Ü¶ hU2 _,
      fun i j h ‚Ü¶ hU3 <| e.symm.injective.ne_iff.mpr h, iUnion_eq_univ_iff.mpr fun x ‚Ü¶ ?_‚ü©
    obtain ‚ü®i, hi‚ü© := Set.iUnion_eq_univ_iff.mp hU4 x
    exact ‚ü®e i, by simp [hi]‚ü©
  have : Nonempty Œ± := ConnectedComponents.nonempty_iff_nonempty.mp inferInstance
  match n with
  | 1 => ‚ü®Unit, Fintype.equivFinOfCardEq rfl, fun _ ‚Ü¶ Set.univ, by simp [isClopen_univ],
    by simp, Subsingleton.pairwise, by simp [Set.iUnion_const]‚ü©
  | n + 2 => by
    obtain ‚ü®U, hU‚ÇÅ, hU‚ÇÇ, hU‚ÇÉ, hU‚ÇÑ‚ü© := exists_fun_isClopen_of_infinite (n + 1) (by simp)
    obtain ‚ü®i, hi‚ü© : ‚àÉ (i : Fin (n + 1)), ¬¨ IsPreconnected (U i) := by
      by_contra! h
      exact Infinite.not_finite <|
        .of_equiv _ (equivOfIsClopenOfIsConnected hU‚ÇÅ hU‚ÇÉ hU‚ÇÑ fun i ‚Ü¶ ‚ü®hU‚ÇÇ i, h i‚ü©).symm
    simp only [IsPreconnected, not_forall] at hi
    obtain ‚ü®V, W, hV, hW, hle, hVU, hWU, h‚ü© := hi
    rw [Set.not_nonempty_iff_eq_empty, ‚Üê Set.inter_assoc] at h
    have hunion : V ‚à© U i ‚à™ W ‚à© U i = U i := by rwa [‚Üê union_inter_distrib_right, inter_eq_right]
    refine ‚ü®{ x : Fin (n + 1) // x ‚â† i } ‚äï Unit ‚äï Unit, Fintype.equivFinOfCardEq (by simp),
        Sum.elim (fun j ‚Ü¶ U j) (Sum.elim (fun _ ‚Ü¶ V ‚à© U i) fun _ ‚Ü¶ W ‚à© U i), ?_, ?_, ?_, ?_‚ü©
    ¬∑ rintro (x|-|-)
      ¬∑ exact hU‚ÇÅ _
      all_goals simp only [ne_eq, Sum.elim_inr, Sum.elim_inl]; rw [Set.inter_comm]
      ¬∑ exact isClopen_inter_of_disjoint_cover_clopen' (hU‚ÇÅ _) hle hV hW h
      ¬∑ refine isClopen_inter_of_disjoint_cover_clopen' (hU‚ÇÅ _) (union_comm _ _ ‚ñ∏ hle) hW hV ?_
        rwa [Set.inter_assoc, Set.inter_comm W V, ‚Üê Set.inter_assoc]
    ¬∑ rintro (x|x|x)
      ¬∑ exact hU‚ÇÇ _
      ¬∑ rwa [Sum.elim_inr, Sum.elim_inl, Set.inter_comm]
      ¬∑ rwa [Sum.elim_inr, Sum.elim_inr, Set.inter_comm]
    ¬∑ rintro (x|x|x) (y|y|y) hxy
      ¬∑ exact hU‚ÇÉ fun hxy' ‚Ü¶ hxy (congrArg Sum.inl <| Subtype.ext_iff.mpr hxy')
      ¬∑ exact Disjoint.inter_right' _ (hU‚ÇÉ x.2)
      ¬∑ exact Disjoint.inter_right' _ (hU‚ÇÉ x.2)
      ¬∑ exact Disjoint.inter_left' _ (hU‚ÇÉ <| Ne.symm y.2)
      ¬∑ contradiction
      ¬∑ exact Disjoint.inter_right _ (disjoint_iff_inter_eq_empty.mpr <| inter_comm V (U i) ‚ñ∏ h)
      ¬∑ exact Disjoint.inter_left' _ (hU‚ÇÉ <| Ne.symm y.2)
      ¬∑ apply Disjoint.inter_right _ (disjoint_iff_inter_eq_empty.mpr ?_)
        rwa [Sum.elim_inr, Sum.elim_inr, inter_comm W, inter_assoc, inter_comm W V, ‚Üê inter_assoc]
      ¬∑ contradiction
    ¬∑ simp only [iUnion_sumElim, iUnion_const, hunion, eq_univ_iff_forall, mem_union, mem_iUnion]
      intro x
      obtain ‚ü®j, hj‚ü© := (Set.iUnion_eq_univ_iff.mp hU‚ÇÑ) x
      by_cases h : j = i
      ¬∑ exact h ‚ñ∏ Or.inr hj
      ¬∑ exact Or.inl ‚ü®‚ü®j, h‚ü©, hj‚ü©

end ConnectedComponents

/-- The preimage of a singleton in `connectedComponents` is the connected component
of an element in the equivalence class. -/
theorem connectedComponents_preimage_singleton {x : Œ±} :
    (‚Üë) ‚Åª¬π' ({‚Üëx} : Set (ConnectedComponents Œ±)) = connectedComponent x := by
  ext y
  rw [mem_preimage, mem_singleton_iff, ConnectedComponents.coe_eq_coe']

/-- The preimage of the image of a set under the quotient map to `connectedComponents Œ±`
is the union of the connected components of the elements in it. -/
theorem connectedComponents_preimage_image (U : Set Œ±) :
    (‚Üë) ‚Åª¬π' ((‚Üë) '' U : Set (ConnectedComponents Œ±)) = ‚ãÉ x ‚àà U, connectedComponent x := by
  simp only [connectedComponents_preimage_singleton, preimage_iUnion‚ÇÇ, image_eq_iUnion]

lemma ConnectedComponents.discreteTopology_iff :
    DiscreteTopology (ConnectedComponents Œ±) ‚Üî ‚àÄ x : Œ±, IsOpen (connectedComponent x) := by
  simp_rw [‚Üê singletons_open_iff_discrete, ‚Üê connectedComponents_preimage_singleton,
    isQuotientMap_coe.isOpen_preimage, surjective_coe.forall]

end connectedComponentSetoid

/-- If every map to `Bool` (a discrete two-element space), that is
continuous on a set `s`, is constant on s, then s is preconnected -/
theorem isPreconnected_of_forall_constant {s : Set Œ±}
    (hs : ‚àÄ f : Œ± ‚Üí Bool, ContinuousOn f s ‚Üí ‚àÄ x ‚àà s, ‚àÄ y ‚àà s, f x = f y) : IsPreconnected s := by
  unfold IsPreconnected
  by_contra!
  rcases this with ‚ü®u, v, u_op, v_op, hsuv, ‚ü®x, x_in_s, x_in_u‚ü©, ‚ü®y, y_in_s, y_in_v‚ü©, H‚ü©
  have hy : y ‚àâ u := fun y_in_u => eq_empty_iff_forall_notMem.mp H y ‚ü®y_in_s, ‚ü®y_in_u, y_in_v‚ü©‚ü©
  have : ContinuousOn u.boolIndicator s := by
    apply (continuousOn_boolIndicator_iff_isClopen _ _).mpr ‚ü®_, _‚ü©
    ¬∑ rw [preimage_subtype_coe_eq_compl hsuv H]
      exact (v_op.preimage continuous_subtype_val).isClosed_compl
    ¬∑ exact u_op.preimage continuous_subtype_val
  simpa [(u.mem_iff_boolIndicator _).mp x_in_u, (u.notMem_iff_boolIndicator _).mp hy] using
    hs _ this x x_in_s y y_in_s

/-- A `PreconnectedSpace` version of `isPreconnected_of_forall_constant` -/
theorem preconnectedSpace_of_forall_constant
    (hs : ‚àÄ f : Œ± ‚Üí Bool, Continuous f ‚Üí ‚àÄ x y, f x = f y) : PreconnectedSpace Œ± :=
  ‚ü®isPreconnected_of_forall_constant fun f hf x _ y _ =>
      hs f (continuousOn_univ.mp hf) x y‚ü©

theorem preconnectedSpace_iff_clopen :
    PreconnectedSpace Œ± ‚Üî ‚àÄ s : Set Œ±, IsClopen s ‚Üí s = ‚àÖ ‚à® s = Set.univ := by
  refine ‚ü®fun _ _ => isClopen_iff.mp, fun h ‚Ü¶ ?_‚ü©
  refine preconnectedSpace_of_forall_constant fun f hf x y ‚Ü¶ ?_
  have : f ‚Åª¬π' {false} = (f ‚Åª¬π' {true})·∂ú := by
    rw [‚Üê Set.preimage_compl, Bool.compl_singleton, Bool.not_true]
  obtain (h | h) := h _ ((isClopen_discrete {true}).preimage hf) <;> simp_all

theorem connectedSpace_iff_clopen :
    ConnectedSpace Œ± ‚Üî Nonempty Œ± ‚àß ‚àÄ s : Set Œ±, IsClopen s ‚Üí s = ‚àÖ ‚à® s = Set.univ := by
  rw [connectedSpace_iff_univ, IsConnected, ‚Üê preconnectedSpace_iff_univ,
    preconnectedSpace_iff_clopen, Set.nonempty_iff_univ_nonempty]
