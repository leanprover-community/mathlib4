/-
Copyright (c) 2020 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot
-/
import Mathlib.Topology.Order.ProjIcc
import Mathlib.Topology.CompactOpen
import Mathlib.Topology.UnitInterval

/-!
# Path connectedness

## Main definitions

In the file the unit interval `[0, 1]` in `‚Ñù` is denoted by `I`, and `X` is a topological space.

* `Path (x y : X)` is the type of paths from `x` to `y`, i.e., continuous maps from `I` to `X`
  mapping `0` to `x` and `1` to `y`.
* `Path.map` is the image of a path under a continuous map.
* `Joined (x y : X)` means there is a path between `x` and `y`.
* `Joined.somePath (h : Joined x y)` selects some path between two points `x` and `y`.
* `pathComponent (x : X)` is the set of points joined to `x`.
* `PathConnectedSpace X` is a predicate class asserting that `X` is non-empty and every two
  points of `X` are joined.

Then there are corresponding relative notions for `F : Set X`.

* `JoinedIn F (x y : X)` means there is a path `Œ≥` joining `x` to `y` with values in `F`.
* `JoinedIn.somePath (h : JoinedIn F x y)` selects a path from `x` to `y` inside `F`.
* `pathComponentIn F (x : X)` is the set of points joined to `x` in `F`.
* `IsPathConnected F` asserts that `F` is non-empty and every two
  points of `F` are joined in `F`.
* `LocPathConnectedSpace X` is a predicate class asserting that `X` is locally path-connected:
  each point has a basis of path-connected neighborhoods (we do *not* ask these to be open).

## Main theorems

* `Joined` and `JoinedIn F` are transitive relations.

One can link the absolute and relative version in two directions, using `(univ : Set X)` or the
subtype `‚Ü•F`.

* `pathConnectedSpace_iff_univ : PathConnectedSpace X ‚Üî IsPathConnected (univ : Set X)`
* `isPathConnected_iff_pathConnectedSpace : IsPathConnected F ‚Üî PathConnectedSpace ‚Ü•F`

For locally path connected spaces, we have
* `pathConnectedSpace_iff_connectedSpace : PathConnectedSpace X ‚Üî ConnectedSpace X`
* `IsOpen.isConnected_iff_isPathConnected (U_op : IsOpen U) : IsPathConnected U ‚Üî IsConnected U`

## Implementation notes

By default, all paths have `I` as their source and `X` as their target, but there is an
operation `Set.IccExtend` that will extend any continuous map `Œ≥ : I ‚Üí X` into a continuous map
`IccExtend zero_le_one Œ≥ : ‚Ñù ‚Üí X` that is constant before `0` and after `1`.

This is used to define `Path.extend` that turns `Œ≥ : Path x y` into a continuous map
`Œ≥.extend : ‚Ñù ‚Üí X` whose restriction to `I` is the original `Œ≥`, and is equal to `x`
on `(-‚àû, 0]` and to `y` on `[1, +‚àû)`.
-/

noncomputable section

open Topology Filter unitInterval Set Function

variable {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] {x y z : X} {Œπ : Type*}

/-! ### Paths -/

/-- Continuous path connecting two points `x` and `y` in a topological space -/
-- porting note (#5171): removed @[nolint has_nonempty_instance]
structure Path (x y : X) extends C(I, X) where
  /-- The start point of a `Path`. -/
  source' : toFun 0 = x
  /-- The end point of a `Path`. -/
  target' : toFun 1 = y

instance Path.funLike : FunLike (Path x y) I X where
  coe := fun Œ≥ ‚Ü¶ ‚áëŒ≥.toContinuousMap
  coe_injective' := fun Œ≥‚ÇÅ Œ≥‚ÇÇ h => by
    simp only [DFunLike.coe_fn_eq] at h
    cases Œ≥‚ÇÅ; cases Œ≥‚ÇÇ; congr

-- Porting note (#10754): added this instance so that we can use `FunLike.coe` for `CoeFun`
-- this also fixed very strange `simp` timeout issues
instance Path.continuousMapClass : ContinuousMapClass (Path x y) I X where
  map_continuous Œ≥ := show Continuous Œ≥.toContinuousMap by fun_prop

-- Porting note: not necessary in light of the instance above
/-
instance : CoeFun (Path x y) fun _ => I ‚Üí X :=
  ‚ü®fun p => p.toFun‚ü©
-/

@[ext]
protected theorem Path.ext : ‚àÄ {Œ≥‚ÇÅ Œ≥‚ÇÇ : Path x y}, (Œ≥‚ÇÅ : I ‚Üí X) = Œ≥‚ÇÇ ‚Üí Œ≥‚ÇÅ = Œ≥‚ÇÇ := by
  rintro ‚ü®‚ü®x, h11‚ü©, h12, h13‚ü© ‚ü®‚ü®x, h21‚ü©, h22, h23‚ü© rfl
  rfl

namespace Path

@[simp]
theorem coe_mk_mk (f : I ‚Üí X) (h‚ÇÅ) (h‚ÇÇ : f 0 = x) (h‚ÇÉ : f 1 = y) :
    ‚áë(mk ‚ü®f, h‚ÇÅ‚ü© h‚ÇÇ h‚ÇÉ : Path x y) = f :=
  rfl
-- Porting note: the name `Path.coe_mk` better refers to a new lemma below

variable (Œ≥ : Path x y)

@[continuity]
protected theorem continuous : Continuous Œ≥ :=
  Œ≥.continuous_toFun

@[simp]
protected theorem source : Œ≥ 0 = x :=
  Œ≥.source'

@[simp]
protected theorem target : Œ≥ 1 = y :=
  Œ≥.target'

/-- See Note [custom simps projection]. We need to specify this projection explicitly in this case,
because it is a composition of multiple projections. -/
def simps.apply : I ‚Üí X :=
  Œ≥

initialize_simps_projections Path (toFun ‚Üí simps.apply, -toContinuousMap)

@[simp]
theorem coe_toContinuousMap : ‚áëŒ≥.toContinuousMap = Œ≥ :=
  rfl

-- Porting note: this is needed because of the `Path.continuousMapClass` instance
@[simp]
theorem coe_mk : ‚áë(Œ≥ : C(I, X)) = Œ≥ :=
  rfl

/-- Any function `œÜ : Œ† (a : Œ±), Path (x a) (y a)` can be seen as a function `Œ± √ó I ‚Üí X`. -/
instance hasUncurryPath {X Œ± : Type*} [TopologicalSpace X] {x y : Œ± ‚Üí X} :
    HasUncurry (‚àÄ a : Œ±, Path (x a) (y a)) (Œ± √ó I) X :=
  ‚ü®fun œÜ p => œÜ p.1 p.2‚ü©

/-- The constant path from a point to itself -/
@[refl, simps]
def refl (x : X) : Path x x where
  toFun _t := x
  continuous_toFun := continuous_const
  source' := rfl
  target' := rfl

@[simp]
theorem refl_range {a : X} : range (Path.refl a) = {a} := by simp [Path.refl, CoeFun.coe]

/-- The reverse of a path from `x` to `y`, as a path from `y` to `x` -/
@[symm, simps]
def symm (Œ≥ : Path x y) : Path y x where
  toFun := Œ≥ ‚àò œÉ
  continuous_toFun := by continuity
  source' := by simpa [-Path.target] using Œ≥.target
  target' := by simpa [-Path.source] using Œ≥.source

@[simp]
theorem symm_symm (Œ≥ : Path x y) : Œ≥.symm.symm = Œ≥ := by
  ext t
  show Œ≥ (œÉ (œÉ t)) = Œ≥ t
  rw [unitInterval.symm_symm]

theorem symm_bijective : Function.Bijective (Path.symm : Path x y ‚Üí Path y x) :=
  Function.bijective_iff_has_inverse.mpr ‚ü®_, symm_symm, symm_symm‚ü©

@[simp]
theorem refl_symm {a : X} : (Path.refl a).symm = Path.refl a := by
  ext
  rfl

@[simp]
theorem symm_range {a b : X} (Œ≥ : Path a b) : range Œ≥.symm = range Œ≥ := by
  ext x
  simp only [mem_range, Path.symm, DFunLike.coe, unitInterval.symm, SetCoe.exists, comp_apply,
    Subtype.coe_mk]
  constructor <;> rintro ‚ü®y, hy, hxy‚ü© <;> refine ‚ü®1 - y, mem_iff_one_sub_mem.mp hy, ?_‚ü© <;>
    convert hxy
  simp

/-! #### Space of paths -/


open ContinuousMap

/- porting note: because of the `DFunLike` instance, we already have a coercion to `C(I, X)`
so we avoid adding another.
--instance : Coe (Path x y) C(I, X) :=
  --‚ü®fun Œ≥ => Œ≥.1‚ü©
-/

/-- The following instance defines the topology on the path space to be induced from the
compact-open topology on the space `C(I,X)` of continuous maps from `I` to `X`.
-/
instance topologicalSpace : TopologicalSpace (Path x y) :=
  TopologicalSpace.induced ((‚Üë) : _ ‚Üí C(I, X)) ContinuousMap.compactOpen

theorem continuous_eval : Continuous fun p : Path x y √ó I => p.1 p.2 :=
  ContinuousMap.continuous_eval.comp <|
    (continuous_induced_dom (Œ± := Path x y)).prod_map continuous_id

@[continuity]
theorem _root_.Continuous.path_eval {Y} [TopologicalSpace Y] {f : Y ‚Üí Path x y} {g : Y ‚Üí I}
    (hf : Continuous f) (hg : Continuous g) : Continuous fun y => f y (g y) :=
  Continuous.comp continuous_eval (hf.prod_mk hg)

theorem continuous_uncurry_iff {Y} [TopologicalSpace Y] {g : Y ‚Üí Path x y} :
    Continuous ‚Üøg ‚Üî Continuous g :=
  Iff.symm <| continuous_induced_rng.trans
    ‚ü®fun h => continuous_uncurry_of_continuous ‚ü®_, h‚ü©,
    continuous_of_continuous_uncurry (fun (y : Y) ‚Ü¶ ContinuousMap.mk (g y))‚ü©

/-- A continuous map extending a path to `‚Ñù`, constant before `0` and after `1`. -/
def extend : ‚Ñù ‚Üí X :=
  IccExtend zero_le_one Œ≥

/-- See Note [continuity lemma statement]. -/
theorem _root_.Continuous.path_extend {Œ≥ : Y ‚Üí Path x y} {f : Y ‚Üí ‚Ñù} (hŒ≥ : Continuous ‚ÜøŒ≥)
    (hf : Continuous f) : Continuous fun t => (Œ≥ t).extend (f t) :=
  Continuous.IccExtend hŒ≥ hf

/-- A useful special case of `Continuous.path_extend`. -/
@[continuity, fun_prop]
theorem continuous_extend : Continuous Œ≥.extend :=
  Œ≥.continuous.Icc_extend'

theorem _root_.Filter.Tendsto.path_extend
    {l r : Y ‚Üí X} {y : Y} {l‚ÇÅ : Filter ‚Ñù} {l‚ÇÇ : Filter X} {Œ≥ : ‚àÄ y, Path (l y) (r y)}
    (hŒ≥ : Tendsto (‚ÜøŒ≥) (ùìù y √óÀ¢ l‚ÇÅ.map (projIcc 0 1 zero_le_one)) l‚ÇÇ) :
    Tendsto (‚Üøfun x => (Œ≥ x).extend) (ùìù y √óÀ¢ l‚ÇÅ) l‚ÇÇ :=
  Filter.Tendsto.IccExtend _ hŒ≥

theorem _root_.ContinuousAt.path_extend {g : Y ‚Üí ‚Ñù} {l r : Y ‚Üí X} (Œ≥ : ‚àÄ y, Path (l y) (r y))
    {y : Y} (hŒ≥ : ContinuousAt (‚ÜøŒ≥) (y, projIcc 0 1 zero_le_one (g y))) (hg : ContinuousAt g y) :
    ContinuousAt (fun i => (Œ≥ i).extend (g i)) y :=
  hŒ≥.IccExtend (fun x => Œ≥ x) hg

@[simp]
theorem extend_extends {a b : X} (Œ≥ : Path a b) {t : ‚Ñù}
    (ht : t ‚àà (Icc 0 1 : Set ‚Ñù)) : Œ≥.extend t = Œ≥ ‚ü®t, ht‚ü© :=
  IccExtend_of_mem _ Œ≥ ht

theorem extend_zero : Œ≥.extend 0 = x := by simp

theorem extend_one : Œ≥.extend 1 = y := by simp

theorem extend_extends' {a b : X} (Œ≥ : Path a b) (t : (Icc 0 1 : Set ‚Ñù)) : Œ≥.extend t = Œ≥ t :=
  IccExtend_val _ Œ≥ t

@[simp]
theorem extend_range {a b : X} (Œ≥ : Path a b) :
    range Œ≥.extend = range Œ≥ :=
  IccExtend_range _ Œ≥

theorem extend_of_le_zero {a b : X} (Œ≥ : Path a b) {t : ‚Ñù}
    (ht : t ‚â§ 0) : Œ≥.extend t = a :=
  (IccExtend_of_le_left _ _ ht).trans Œ≥.source

theorem extend_of_one_le {a b : X} (Œ≥ : Path a b) {t : ‚Ñù}
    (ht : 1 ‚â§ t) : Œ≥.extend t = b :=
  (IccExtend_of_right_le _ _ ht).trans Œ≥.target

@[simp]
theorem refl_extend {a : X} : (Path.refl a).extend = fun _ => a :=
  rfl

/-- The path obtained from a map defined on `‚Ñù` by restriction to the unit interval. -/
def ofLine {f : ‚Ñù ‚Üí X} (hf : ContinuousOn f I) (h‚ÇÄ : f 0 = x) (h‚ÇÅ : f 1 = y) : Path x y where
  toFun := f ‚àò ((‚Üë) : unitInterval ‚Üí ‚Ñù)
  continuous_toFun := hf.comp_continuous continuous_subtype_val Subtype.prop
  source' := h‚ÇÄ
  target' := h‚ÇÅ

theorem ofLine_mem {f : ‚Ñù ‚Üí X} (hf : ContinuousOn f I) (h‚ÇÄ : f 0 = x) (h‚ÇÅ : f 1 = y) :
    ‚àÄ t, ofLine hf h‚ÇÄ h‚ÇÅ t ‚àà f '' I := fun ‚ü®t, t_in‚ü© => ‚ü®t, t_in, rfl‚ü©

attribute [local simp] Iic_def

/-- Concatenation of two paths from `x` to `y` and from `y` to `z`, putting the first
path on `[0, 1/2]` and the second one on `[1/2, 1]`. -/
@[trans]
def trans (Œ≥ : Path x y) (Œ≥' : Path y z) : Path x z where
  toFun := (fun t : ‚Ñù => if t ‚â§ 1 / 2 then Œ≥.extend (2 * t) else Œ≥'.extend (2 * t - 1)) ‚àò (‚Üë)
  continuous_toFun := by
    refine
      (Continuous.if_le ?_ ?_ continuous_id continuous_const (by norm_num)).comp
        continuous_subtype_val <;>
    fun_prop
  source' := by norm_num
  target' := by norm_num

theorem trans_apply (Œ≥ : Path x y) (Œ≥' : Path y z) (t : I) :
    (Œ≥.trans Œ≥') t =
      if h : (t : ‚Ñù) ‚â§ 1 / 2 then Œ≥ ‚ü®2 * t, (mul_pos_mem_iff zero_lt_two).2 ‚ü®t.2.1, h‚ü©‚ü©
      else Œ≥' ‚ü®2 * t - 1, two_mul_sub_one_mem_iff.2 ‚ü®(not_le.1 h).le, t.2.2‚ü©‚ü© :=
  show ite _ _ _ = _ by split_ifs <;> rw [extend_extends]

@[simp]
theorem trans_symm (Œ≥ : Path x y) (Œ≥' : Path y z) : (Œ≥.trans Œ≥').symm = Œ≥'.symm.trans Œ≥.symm := by
  ext t
  simp only [trans_apply, ‚Üê one_div, symm_apply, not_le, Function.comp_apply]
  split_ifs with h h‚ÇÅ h‚ÇÇ <;> rw [coe_symm_eq] at h
  ¬∑ have ht : (t : ‚Ñù) = 1 / 2 := by linarith
    norm_num [ht]
  ¬∑ refine congr_arg _ (Subtype.ext ?_)
    norm_num [sub_sub_eq_add_sub, mul_sub]
  ¬∑ refine congr_arg _ (Subtype.ext ?_)
    norm_num [mul_sub, h]
    ring -- TODO norm_num should really do this
  ¬∑ exfalso
    linarith

@[simp]
theorem refl_trans_refl {a : X} :
    (Path.refl a).trans (Path.refl a) = Path.refl a := by
  ext
  simp only [Path.trans, ite_self, one_div, Path.refl_extend]
  rfl

theorem trans_range {a b c : X} (Œ≥‚ÇÅ : Path a b) (Œ≥‚ÇÇ : Path b c) :
    range (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) = range Œ≥‚ÇÅ ‚à™ range Œ≥‚ÇÇ := by
  rw [Path.trans]
  apply eq_of_subset_of_subset
  ¬∑ rintro x ‚ü®‚ü®t, ht0, ht1‚ü©, hxt‚ü©
    by_cases h : t ‚â§ 1 / 2
    ¬∑ left
      use ‚ü®2 * t, ‚ü®by linarith, by linarith‚ü©‚ü©
      rw [‚Üê Œ≥‚ÇÅ.extend_extends]
      rwa [coe_mk_mk, Function.comp_apply, if_pos h] at hxt
    ¬∑ right
      use ‚ü®2 * t - 1, ‚ü®by linarith, by linarith‚ü©‚ü©
      rw [‚Üê Œ≥‚ÇÇ.extend_extends]
      rwa [coe_mk_mk, Function.comp_apply, if_neg h] at hxt
  ¬∑ rintro x (‚ü®‚ü®t, ht0, ht1‚ü©, hxt‚ü© | ‚ü®‚ü®t, ht0, ht1‚ü©, hxt‚ü©)
    ¬∑ use ‚ü®t / 2, ‚ü®by linarith, by linarith‚ü©‚ü©
      have : t / 2 ‚â§ 1 / 2 := (div_le_div_right (zero_lt_two : (0 : ‚Ñù) < 2)).mpr ht1
      rw [coe_mk_mk, Function.comp_apply, if_pos this, Subtype.coe_mk]
      ring_nf
      rwa [Œ≥‚ÇÅ.extend_extends]
    ¬∑ by_cases h : t = 0
      ¬∑ use ‚ü®1 / 2, ‚ü®by linarith, by linarith‚ü©‚ü©
        rw [coe_mk_mk, Function.comp_apply, if_pos le_rfl, Subtype.coe_mk,
          mul_one_div_cancel (two_ne_zero' ‚Ñù)]
        rw [Œ≥‚ÇÅ.extend_one]
        rwa [‚Üê Œ≥‚ÇÇ.extend_extends, h, Œ≥‚ÇÇ.extend_zero] at hxt
      ¬∑ use ‚ü®(t + 1) / 2, ‚ü®by linarith, by linarith‚ü©‚ü©
        replace h : t ‚â† 0 := h
        have ht0 := lt_of_le_of_ne ht0 h.symm
        have : ¬¨(t + 1) / 2 ‚â§ 1 / 2 := by
          rw [not_le]
          linarith
        rw [coe_mk_mk, Function.comp_apply, Subtype.coe_mk, if_neg this]
        ring_nf
        rwa [Œ≥‚ÇÇ.extend_extends]

/-- Image of a path from `x` to `y` by a map which is continuous on the path. -/
def map' (Œ≥ : Path x y) {f : X ‚Üí Y} (h : ContinuousOn f (range Œ≥)) : Path (f x) (f y) where
  toFun := f ‚àò Œ≥
  continuous_toFun := h.comp_continuous Œ≥.continuous (fun x ‚Ü¶ mem_range_self x)
  source' := by simp
  target' := by simp

/-- Image of a path from `x` to `y` by a continuous map -/
def map (Œ≥ : Path x y) {f : X ‚Üí Y} (h : Continuous f) :
    Path (f x) (f y) := Œ≥.map' h.continuousOn

@[simp]
theorem map_coe (Œ≥ : Path x y) {f : X ‚Üí Y} (h : Continuous f) :
    (Œ≥.map h : I ‚Üí Y) = f ‚àò Œ≥ := by
  ext t
  rfl

@[simp]
theorem map_symm (Œ≥ : Path x y) {f : X ‚Üí Y} (h : Continuous f) :
    (Œ≥.map h).symm = Œ≥.symm.map h :=
  rfl

@[simp]
theorem map_trans (Œ≥ : Path x y) (Œ≥' : Path y z) {f : X ‚Üí Y}
    (h : Continuous f) : (Œ≥.trans Œ≥').map h = (Œ≥.map h).trans (Œ≥'.map h) := by
  ext t
  rw [trans_apply, map_coe, Function.comp_apply, trans_apply]
  split_ifs <;> rfl

@[simp]
theorem map_id (Œ≥ : Path x y) : Œ≥.map continuous_id = Œ≥ := by
  ext
  rfl

@[simp]
theorem map_map (Œ≥ : Path x y) {Z : Type*} [TopologicalSpace Z]
    {f : X ‚Üí Y} (hf : Continuous f) {g : Y ‚Üí Z} (hg : Continuous g) :
    (Œ≥.map hf).map hg = Œ≥.map (hg.comp hf) := by
  ext
  rfl

/-- Casting a path from `x` to `y` to a path from `x'` to `y'` when `x' = x` and `y' = y` -/
def cast (Œ≥ : Path x y) {x' y'} (hx : x' = x) (hy : y' = y) : Path x' y' where
  toFun := Œ≥
  continuous_toFun := Œ≥.continuous
  source' := by simp [hx]
  target' := by simp [hy]

@[simp]
theorem symm_cast {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : X} (Œ≥ : Path a‚ÇÇ b‚ÇÇ) (ha : a‚ÇÅ = a‚ÇÇ) (hb : b‚ÇÅ = b‚ÇÇ) :
    (Œ≥.cast ha hb).symm = Œ≥.symm.cast hb ha :=
  rfl

@[simp]
theorem trans_cast {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : X} (Œ≥ : Path a‚ÇÇ b‚ÇÇ)
    (Œ≥' : Path b‚ÇÇ c‚ÇÇ) (ha : a‚ÇÅ = a‚ÇÇ) (hb : b‚ÇÅ = b‚ÇÇ) (hc : c‚ÇÅ = c‚ÇÇ) :
    (Œ≥.cast ha hb).trans (Œ≥'.cast hb hc) = (Œ≥.trans Œ≥').cast ha hc :=
  rfl

@[simp]
theorem cast_coe (Œ≥ : Path x y) {x' y'} (hx : x' = x) (hy : y' = y) : (Œ≥.cast hx hy : I ‚Üí X) = Œ≥ :=
  rfl

@[continuity, fun_prop]
theorem symm_continuous_family {Œπ : Type*} [TopologicalSpace Œπ]
    {a b : Œπ ‚Üí X} (Œ≥ : ‚àÄ t : Œπ, Path (a t) (b t)) (h : Continuous ‚ÜøŒ≥) :
    Continuous ‚Üøfun t => (Œ≥ t).symm :=
  h.comp (continuous_id.prod_map continuous_symm)

@[continuity]
theorem continuous_symm : Continuous (symm : Path x y ‚Üí Path y x) :=
  continuous_uncurry_iff.mp <| symm_continuous_family _ (continuous_fst.path_eval continuous_snd)

@[continuity]
theorem continuous_uncurry_extend_of_continuous_family {Œπ : Type*} [TopologicalSpace Œπ]
    {a b : Œπ ‚Üí X} (Œ≥ : ‚àÄ t : Œπ, Path (a t) (b t)) (h : Continuous ‚ÜøŒ≥) :
    Continuous ‚Üøfun t => (Œ≥ t).extend := by
  apply h.comp (continuous_id.prod_map continuous_projIcc)
  exact zero_le_one

@[continuity]
theorem trans_continuous_family {Œπ : Type*} [TopologicalSpace Œπ]
    {a b c : Œπ ‚Üí X} (Œ≥‚ÇÅ : ‚àÄ t : Œπ, Path (a t) (b t)) (h‚ÇÅ : Continuous ‚ÜøŒ≥‚ÇÅ)
    (Œ≥‚ÇÇ : ‚àÄ t : Œπ, Path (b t) (c t)) (h‚ÇÇ : Continuous ‚ÜøŒ≥‚ÇÇ) :
    Continuous ‚Üøfun t => (Œ≥‚ÇÅ t).trans (Œ≥‚ÇÇ t) := by
  have h‚ÇÅ' := Path.continuous_uncurry_extend_of_continuous_family Œ≥‚ÇÅ h‚ÇÅ
  have h‚ÇÇ' := Path.continuous_uncurry_extend_of_continuous_family Œ≥‚ÇÇ h‚ÇÇ
  simp only [HasUncurry.uncurry, CoeFun.coe, Path.trans, (¬∑ ‚àò ¬∑)]
  refine Continuous.if_le ?_ ?_ (continuous_subtype_val.comp continuous_snd) continuous_const ?_
  ¬∑ change
      Continuous ((fun p : Œπ √ó ‚Ñù => (Œ≥‚ÇÅ p.1).extend p.2) ‚àò Prod.map id (fun x => 2 * x : I ‚Üí ‚Ñù))
    exact h‚ÇÅ'.comp (continuous_id.prod_map <| continuous_const.mul continuous_subtype_val)
  ¬∑ change
      Continuous ((fun p : Œπ √ó ‚Ñù => (Œ≥‚ÇÇ p.1).extend p.2) ‚àò Prod.map id (fun x => 2 * x - 1 : I ‚Üí ‚Ñù))
    exact
      h‚ÇÇ'.comp
        (continuous_id.prod_map <|
          (continuous_const.mul continuous_subtype_val).sub continuous_const)
  ¬∑ rintro st hst
    simp [hst, mul_inv_cancel‚ÇÄ (two_ne_zero' ‚Ñù)]

@[continuity]
theorem _root_.Continuous.path_trans {f : Y ‚Üí Path x y} {g : Y ‚Üí Path y z} :
    Continuous f ‚Üí Continuous g ‚Üí Continuous fun t => (f t).trans (g t) := by
  intro hf hg
  apply continuous_uncurry_iff.mp
  exact trans_continuous_family _ (continuous_uncurry_iff.mpr hf) _ (continuous_uncurry_iff.mpr hg)

@[continuity]
theorem continuous_trans {x y z : X} : Continuous fun œÅ : Path x y √ó Path y z => œÅ.1.trans œÅ.2 :=
  continuous_fst.path_trans continuous_snd

/-! #### Product of paths -/


section Prod

variable {a‚ÇÅ a‚ÇÇ a‚ÇÉ : X} {b‚ÇÅ b‚ÇÇ b‚ÇÉ : Y}

/-- Given a path in `X` and a path in `Y`, we can take their pointwise product to get a path in
`X √ó Y`. -/
protected def prod (Œ≥‚ÇÅ : Path a‚ÇÅ a‚ÇÇ) (Œ≥‚ÇÇ : Path b‚ÇÅ b‚ÇÇ) : Path (a‚ÇÅ, b‚ÇÅ) (a‚ÇÇ, b‚ÇÇ) where
  toContinuousMap := ContinuousMap.prodMk Œ≥‚ÇÅ.toContinuousMap Œ≥‚ÇÇ.toContinuousMap
  source' := by simp
  target' := by simp

@[simp]
theorem prod_coe (Œ≥‚ÇÅ : Path a‚ÇÅ a‚ÇÇ) (Œ≥‚ÇÇ : Path b‚ÇÅ b‚ÇÇ) :
    ‚áë(Œ≥‚ÇÅ.prod Œ≥‚ÇÇ) = fun t => (Œ≥‚ÇÅ t, Œ≥‚ÇÇ t) :=
  rfl

/-- Path composition commutes with products -/
theorem trans_prod_eq_prod_trans (Œ≥‚ÇÅ : Path a‚ÇÅ a‚ÇÇ) (Œ¥‚ÇÅ : Path a‚ÇÇ a‚ÇÉ) (Œ≥‚ÇÇ : Path b‚ÇÅ b‚ÇÇ)
    (Œ¥‚ÇÇ : Path b‚ÇÇ b‚ÇÉ) : (Œ≥‚ÇÅ.prod Œ≥‚ÇÇ).trans (Œ¥‚ÇÅ.prod Œ¥‚ÇÇ) = (Œ≥‚ÇÅ.trans Œ¥‚ÇÅ).prod (Œ≥‚ÇÇ.trans Œ¥‚ÇÇ) := by
  ext t <;>
  unfold Path.trans <;>
  simp only [Path.coe_mk_mk, Path.prod_coe, Function.comp_apply] <;>
  split_ifs <;>
  rfl

end Prod

section Pi

variable {œá : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (œá i)] {as bs cs : ‚àÄ i, œá i}

/-- Given a family of paths, one in each X·µ¢, we take their pointwise product to get a path in
Œ† i, X·µ¢. -/
protected def pi (Œ≥ : ‚àÄ i, Path (as i) (bs i)) : Path as bs where
  toContinuousMap := ContinuousMap.pi fun i => (Œ≥ i).toContinuousMap
  source' := by simp
  target' := by simp

@[simp]
theorem pi_coe (Œ≥ : ‚àÄ i, Path (as i) (bs i)) : ‚áë(Path.pi Œ≥) = fun t i => Œ≥ i t :=
  rfl

/-- Path composition commutes with products -/
theorem trans_pi_eq_pi_trans (Œ≥‚ÇÄ : ‚àÄ i, Path (as i) (bs i)) (Œ≥‚ÇÅ : ‚àÄ i, Path (bs i) (cs i)) :
    (Path.pi Œ≥‚ÇÄ).trans (Path.pi Œ≥‚ÇÅ) = Path.pi fun i => (Œ≥‚ÇÄ i).trans (Œ≥‚ÇÅ i) := by
  ext t i
  unfold Path.trans
  simp only [Path.coe_mk_mk, Function.comp_apply, pi_coe]
  split_ifs <;> rfl

end Pi

/-! #### Pointwise multiplication/addition of two paths in a topological (additive) group -/


/-- Pointwise multiplication of paths in a topological group. The additive version is probably more
useful. -/
@[to_additive "Pointwise addition of paths in a topological additive group."]
protected def mul [Mul X] [ContinuousMul X] {a‚ÇÅ b‚ÇÅ a‚ÇÇ b‚ÇÇ : X} (Œ≥‚ÇÅ : Path a‚ÇÅ b‚ÇÅ) (Œ≥‚ÇÇ : Path a‚ÇÇ b‚ÇÇ) :
    Path (a‚ÇÅ * a‚ÇÇ) (b‚ÇÅ * b‚ÇÇ) :=
  (Œ≥‚ÇÅ.prod Œ≥‚ÇÇ).map continuous_mul

@[to_additive]
protected theorem mul_apply [Mul X] [ContinuousMul X] {a‚ÇÅ b‚ÇÅ a‚ÇÇ b‚ÇÇ : X} (Œ≥‚ÇÅ : Path a‚ÇÅ b‚ÇÅ)
    (Œ≥‚ÇÇ : Path a‚ÇÇ b‚ÇÇ) (t : unitInterval) : (Œ≥‚ÇÅ.mul Œ≥‚ÇÇ) t = Œ≥‚ÇÅ t * Œ≥‚ÇÇ t :=
  rfl

/-! #### Truncating a path -/


/-- `Œ≥.truncate t‚ÇÄ t‚ÇÅ` is the path which follows the path `Œ≥` on the
  time interval `[t‚ÇÄ, t‚ÇÅ]` and stays still otherwise. -/
def truncate {X : Type*} [TopologicalSpace X] {a b : X} (Œ≥ : Path a b) (t‚ÇÄ t‚ÇÅ : ‚Ñù) :
    Path (Œ≥.extend <| min t‚ÇÄ t‚ÇÅ) (Œ≥.extend t‚ÇÅ) where
  toFun s := Œ≥.extend (min (max s t‚ÇÄ) t‚ÇÅ)
  continuous_toFun :=
    Œ≥.continuous_extend.comp ((continuous_subtype_val.max continuous_const).min continuous_const)
  source' := by
    simp only [min_def, max_def']
    norm_cast
    split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ
    ¬∑ simp [Œ≥.extend_of_le_zero h‚ÇÅ]
    ¬∑ congr
      linarith
    ¬∑ have h‚ÇÑ : t‚ÇÅ ‚â§ 0 := le_of_lt (by simpa using h‚ÇÇ)
      simp [Œ≥.extend_of_le_zero h‚ÇÑ, Œ≥.extend_of_le_zero h‚ÇÅ]
    all_goals rfl
  target' := by
    simp only [min_def, max_def']
    norm_cast
    split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÉ
    ¬∑ simp [Œ≥.extend_of_one_le h‚ÇÇ]
    ¬∑ rfl
    ¬∑ have h‚ÇÑ : 1 ‚â§ t‚ÇÄ := le_of_lt (by simpa using h‚ÇÅ)
      simp [Œ≥.extend_of_one_le h‚ÇÑ, Œ≥.extend_of_one_le (h‚ÇÑ.trans h‚ÇÉ)]
    ¬∑ rfl

/-- `Œ≥.truncateOfLE t‚ÇÄ t‚ÇÅ h`, where `h : t‚ÇÄ ‚â§ t‚ÇÅ` is `Œ≥.truncate t‚ÇÄ t‚ÇÅ`
  casted as a path from `Œ≥.extend t‚ÇÄ` to `Œ≥.extend t‚ÇÅ`. -/
def truncateOfLE {X : Type*} [TopologicalSpace X] {a b : X} (Œ≥ : Path a b) {t‚ÇÄ t‚ÇÅ : ‚Ñù}
    (h : t‚ÇÄ ‚â§ t‚ÇÅ) : Path (Œ≥.extend t‚ÇÄ) (Œ≥.extend t‚ÇÅ) :=
  (Œ≥.truncate t‚ÇÄ t‚ÇÅ).cast (by rw [min_eq_left h]) rfl

theorem truncate_range {a b : X} (Œ≥ : Path a b) {t‚ÇÄ t‚ÇÅ : ‚Ñù} :
    range (Œ≥.truncate t‚ÇÄ t‚ÇÅ) ‚äÜ range Œ≥ := by
  rw [‚Üê Œ≥.extend_range]
  simp only [range_subset_iff, SetCoe.exists, SetCoe.forall]
  intro x _hx
  simp only [DFunLike.coe, Path.truncate, mem_range_self]

/-- For a path `Œ≥`, `Œ≥.truncate` gives a "continuous family of paths", by which we
  mean the uncurried function which maps `(t‚ÇÄ, t‚ÇÅ, s)` to `Œ≥.truncate t‚ÇÄ t‚ÇÅ s` is continuous. -/
@[continuity]
theorem truncate_continuous_family {a b : X} (Œ≥ : Path a b) :
    Continuous (fun x => Œ≥.truncate x.1 x.2.1 x.2.2 : ‚Ñù √ó ‚Ñù √ó I ‚Üí X) :=
  Œ≥.continuous_extend.comp
    (((continuous_subtype_val.comp (continuous_snd.comp continuous_snd)).max continuous_fst).min
      (continuous_fst.comp continuous_snd))

@[continuity]
theorem truncate_const_continuous_family {a b : X} (Œ≥ : Path a b)
    (t : ‚Ñù) : Continuous ‚Üø(Œ≥.truncate t) := by
  have key : Continuous (fun x => (t, x) : ‚Ñù √ó I ‚Üí ‚Ñù √ó ‚Ñù √ó I) := by fun_prop
  exact Œ≥.truncate_continuous_family.comp key

@[simp]
theorem truncate_self {a b : X} (Œ≥ : Path a b) (t : ‚Ñù) :
    Œ≥.truncate t t = (Path.refl <| Œ≥.extend t).cast (by rw [min_self]) rfl := by
  ext x
  rw [cast_coe]
  simp only [truncate, DFunLike.coe, refl, min_def, max_def]
  split_ifs with h‚ÇÅ h‚ÇÇ <;> congr

@[simp 1001] -- Porting note: increase `simp` priority so left-hand side doesn't simplify
theorem truncate_zero_zero {a b : X} (Œ≥ : Path a b) :
    Œ≥.truncate 0 0 = (Path.refl a).cast (by rw [min_self, Œ≥.extend_zero]) Œ≥.extend_zero := by
  convert Œ≥.truncate_self 0

@[simp 1001] -- Porting note: increase `simp` priority so left-hand side doesn't simplify
theorem truncate_one_one {a b : X} (Œ≥ : Path a b) :
    Œ≥.truncate 1 1 = (Path.refl b).cast (by rw [min_self, Œ≥.extend_one]) Œ≥.extend_one := by
  convert Œ≥.truncate_self 1

@[simp]
theorem truncate_zero_one {a b : X} (Œ≥ : Path a b) :
    Œ≥.truncate 0 1 = Œ≥.cast (by simp [zero_le_one, extend_zero]) (by simp) := by
  ext x
  rw [cast_coe]
  have : ‚Üëx ‚àà (Icc 0 1 : Set ‚Ñù) := x.2
  rw [truncate, coe_mk_mk, max_eq_left this.1, min_eq_left this.2, extend_extends']

/-! #### Reparametrising a path -/


/-- Given a path `Œ≥` and a function `f : I ‚Üí I` where `f 0 = 0` and `f 1 = 1`, `Œ≥.reparam f` is the
path defined by `Œ≥ ‚àò f`.
-/
def reparam (Œ≥ : Path x y) (f : I ‚Üí I) (hfcont : Continuous f) (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
    Path x y where
  toFun := Œ≥ ‚àò f
  continuous_toFun := by fun_prop
  source' := by simp [hf‚ÇÄ]
  target' := by simp [hf‚ÇÅ]

@[simp]
theorem coe_reparam (Œ≥ : Path x y) {f : I ‚Üí I} (hfcont : Continuous f) (hf‚ÇÄ : f 0 = 0)
    (hf‚ÇÅ : f 1 = 1) : ‚áë(Œ≥.reparam f hfcont hf‚ÇÄ hf‚ÇÅ) = Œ≥ ‚àò f :=
  rfl
-- Porting note: this seems like it was poorly named (was: `coe_to_fun`)

@[simp]
theorem reparam_id (Œ≥ : Path x y) : Œ≥.reparam id continuous_id rfl rfl = Œ≥ := by
  ext
  rfl

theorem range_reparam (Œ≥ : Path x y) {f : I ‚Üí I} (hfcont : Continuous f) (hf‚ÇÄ : f 0 = 0)
    (hf‚ÇÅ : f 1 = 1) : range (Œ≥.reparam f hfcont hf‚ÇÄ hf‚ÇÅ) = range Œ≥ := by
  change range (Œ≥ ‚àò f) = range Œ≥
  have : range f = univ := by
    rw [range_iff_surjective]
    intro t
    have h‚ÇÅ : Continuous (Set.IccExtend (zero_le_one' ‚Ñù) f) := by continuity
    have := intermediate_value_Icc (zero_le_one' ‚Ñù) h‚ÇÅ.continuousOn
    ¬∑ rw [IccExtend_left, IccExtend_right, Icc.mk_zero, Icc.mk_one, hf‚ÇÄ, hf‚ÇÅ] at this
      rcases this t.2 with ‚ü®w, hw‚ÇÅ, hw‚ÇÇ‚ü©
      rw [IccExtend_of_mem _ _ hw‚ÇÅ] at hw‚ÇÇ
      exact ‚ü®_, hw‚ÇÇ‚ü©
  rw [range_comp, this, image_univ]

theorem refl_reparam {f : I ‚Üí I} (hfcont : Continuous f) (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
    (refl x).reparam f hfcont hf‚ÇÄ hf‚ÇÅ = refl x := by
  ext
  simp

end Path

/-! ### Being joined by a path -/


/-- The relation "being joined by a path". This is an equivalence relation. -/
def Joined (x y : X) : Prop :=
  Nonempty (Path x y)

@[refl]
theorem Joined.refl (x : X) : Joined x x :=
  ‚ü®Path.refl x‚ü©

/-- When two points are joined, choose some path from `x` to `y`. -/
def Joined.somePath (h : Joined x y) : Path x y :=
  Nonempty.some h

@[symm]
theorem Joined.symm {x y : X} (h : Joined x y) : Joined y x :=
  ‚ü®h.somePath.symm‚ü©

@[trans]
theorem Joined.trans {x y z : X} (hxy : Joined x y) (hyz : Joined y z) : Joined x z :=
  ‚ü®hxy.somePath.trans hyz.somePath‚ü©

variable (X)

/-- The setoid corresponding the equivalence relation of being joined by a continuous path. -/
def pathSetoid : Setoid X where
  r := Joined
  iseqv := Equivalence.mk Joined.refl Joined.symm Joined.trans

/-- The quotient type of points of a topological space modulo being joined by a continuous path. -/
def ZerothHomotopy :=
  Quotient (pathSetoid X)

instance ZerothHomotopy.inhabited : Inhabited (ZerothHomotopy ‚Ñù) :=
  ‚ü®@Quotient.mk' ‚Ñù (pathSetoid ‚Ñù) 0‚ü©

variable {X}

/-! ### Being joined by a path inside a set -/


/-- The relation "being joined by a path in `F`". Not quite an equivalence relation since it's not
reflexive for points that do not belong to `F`. -/
def JoinedIn (F : Set X) (x y : X) : Prop :=
  ‚àÉ Œ≥ : Path x y, ‚àÄ t, Œ≥ t ‚àà F

variable {F : Set X}

theorem JoinedIn.mem (h : JoinedIn F x y) : x ‚àà F ‚àß y ‚àà F := by
  rcases h with ‚ü®Œ≥, Œ≥_in‚ü©
  have : Œ≥ 0 ‚àà F ‚àß Œ≥ 1 ‚àà F := by constructor <;> apply Œ≥_in
  simpa using this

theorem JoinedIn.source_mem (h : JoinedIn F x y) : x ‚àà F :=
  h.mem.1

theorem JoinedIn.target_mem (h : JoinedIn F x y) : y ‚àà F :=
  h.mem.2

/-- When `x` and `y` are joined in `F`, choose a path from `x` to `y` inside `F` -/
def JoinedIn.somePath (h : JoinedIn F x y) : Path x y :=
  Classical.choose h

theorem JoinedIn.somePath_mem (h : JoinedIn F x y) (t : I) : h.somePath t ‚àà F :=
  Classical.choose_spec h t

/-- If `x` and `y` are joined in the set `F`, then they are joined in the subtype `F`. -/
theorem JoinedIn.joined_subtype (h : JoinedIn F x y) :
    Joined (‚ü®x, h.source_mem‚ü© : F) (‚ü®y, h.target_mem‚ü© : F) :=
  ‚ü®{  toFun := fun t => ‚ü®h.somePath t, h.somePath_mem t‚ü©
      continuous_toFun := by fun_prop
      source' := by simp
      target' := by simp }‚ü©

theorem JoinedIn.ofLine {f : ‚Ñù ‚Üí X} (hf : ContinuousOn f I) (h‚ÇÄ : f 0 = x) (h‚ÇÅ : f 1 = y)
    (hF : f '' I ‚äÜ F) : JoinedIn F x y :=
  ‚ü®Path.ofLine hf h‚ÇÄ h‚ÇÅ, fun t => hF <| Path.ofLine_mem hf h‚ÇÄ h‚ÇÅ t‚ü©

theorem JoinedIn.joined (h : JoinedIn F x y) : Joined x y :=
  ‚ü®h.somePath‚ü©

theorem joinedIn_iff_joined (x_in : x ‚àà F) (y_in : y ‚àà F) :
    JoinedIn F x y ‚Üî Joined (‚ü®x, x_in‚ü© : F) (‚ü®y, y_in‚ü© : F) :=
  ‚ü®fun h => h.joined_subtype, fun h => ‚ü®h.somePath.map continuous_subtype_val, by simp‚ü©‚ü©

@[simp]
theorem joinedIn_univ : JoinedIn univ x y ‚Üî Joined x y := by
  simp [JoinedIn, Joined, exists_true_iff_nonempty]

theorem JoinedIn.mono {U V : Set X} (h : JoinedIn U x y) (hUV : U ‚äÜ V) : JoinedIn V x y :=
  ‚ü®h.somePath, fun t => hUV (h.somePath_mem t)‚ü©

theorem JoinedIn.refl (h : x ‚àà F) : JoinedIn F x x :=
  ‚ü®Path.refl x, fun _t => h‚ü©

@[symm]
theorem JoinedIn.symm (h : JoinedIn F x y) : JoinedIn F y x := by
  cases' h.mem with hx hy
  simp_all only [joinedIn_iff_joined]
  exact h.symm

theorem JoinedIn.trans (hxy : JoinedIn F x y) (hyz : JoinedIn F y z) : JoinedIn F x z := by
  cases' hxy.mem with hx hy
  cases' hyz.mem with hx hy
  simp_all only [joinedIn_iff_joined]
  exact hxy.trans hyz

theorem Specializes.joinedIn (h : x ‚§≥ y) (hx : x ‚àà F) (hy : y ‚àà F) : JoinedIn F x y := by
  refine ‚ü®‚ü®‚ü®Set.piecewise {1} (const I y) (const I x), ?_‚ü©, by simp, by simp‚ü©, fun t ‚Ü¶ ?_‚ü©
  ¬∑ exact isClosed_singleton.continuous_piecewise_of_specializes continuous_const continuous_const
      fun _ ‚Ü¶ h
  ¬∑ simp only [Path.coe_mk_mk, piecewise]
    split_ifs <;> assumption

theorem Inseparable.joinedIn (h : Inseparable x y) (hx : x ‚àà F) (hy : y ‚àà F) : JoinedIn F x y :=
  h.specializes.joinedIn hx hy

/-! ### Path component -/


/-- The path component of `x` is the set of points that can be joined to `x`. -/
def pathComponent (x : X) :=
  { y | Joined x y }

@[simp]
theorem mem_pathComponent_self (x : X) : x ‚àà pathComponent x :=
  Joined.refl x

@[simp]
theorem pathComponent.nonempty (x : X) : (pathComponent x).Nonempty :=
  ‚ü®x, mem_pathComponent_self x‚ü©

theorem mem_pathComponent_of_mem (h : x ‚àà pathComponent y) : y ‚àà pathComponent x :=
  Joined.symm h

theorem pathComponent_symm : x ‚àà pathComponent y ‚Üî y ‚àà pathComponent x :=
  ‚ü®fun h => mem_pathComponent_of_mem h, fun h => mem_pathComponent_of_mem h‚ü©

theorem pathComponent_congr (h : x ‚àà pathComponent y) : pathComponent x = pathComponent y := by
  ext z
  constructor
  ¬∑ intro h'
    rw [pathComponent_symm]
    exact (h.trans h').symm
  ¬∑ intro h'
    rw [pathComponent_symm] at h' ‚ä¢
    exact h'.trans h

theorem pathComponent_subset_component (x : X) : pathComponent x ‚äÜ connectedComponent x :=
  fun y h =>
  (isConnected_range h.somePath.continuous).subset_connectedComponent ‚ü®0, by simp‚ü© ‚ü®1, by simp‚ü©

/-- The path component of `x` in `F` is the set of points that can be joined to `x` in `F`. -/
def pathComponentIn (x : X) (F : Set X) :=
  { y | JoinedIn F x y }

@[simp]
theorem pathComponentIn_univ (x : X) : pathComponentIn x univ = pathComponent x := by
  simp [pathComponentIn, pathComponent, JoinedIn, Joined, exists_true_iff_nonempty]

theorem Joined.mem_pathComponent (hyz : Joined y z) (hxy : y ‚àà pathComponent x) :
    z ‚àà pathComponent x :=
  hxy.trans hyz

/-! ### Path connected sets -/


/-- A set `F` is path connected if it contains a point that can be joined to all other in `F`. -/
def IsPathConnected (F : Set X) : Prop :=
  ‚àÉ x ‚àà F, ‚àÄ {y}, y ‚àà F ‚Üí JoinedIn F x y

theorem isPathConnected_iff_eq : IsPathConnected F ‚Üî ‚àÉ x ‚àà F, pathComponentIn x F = F := by
  constructor <;> rintro ‚ü®x, x_in, h‚ü© <;> use x, x_in
  ¬∑ ext y
    exact ‚ü®fun hy => hy.mem.2, h‚ü©
  ¬∑ intro y y_in
    rwa [‚Üê h] at y_in

theorem IsPathConnected.joinedIn (h : IsPathConnected F) :
    ‚àÄ·µâ (x ‚àà F) (y ‚àà F), JoinedIn F x y := fun _x x_in _y y_in =>
  let ‚ü®_b, _b_in, hb‚ü© := h
  (hb x_in).symm.trans (hb y_in)

theorem isPathConnected_iff :
    IsPathConnected F ‚Üî F.Nonempty ‚àß ‚àÄ·µâ (x ‚àà F) (y ‚àà F), JoinedIn F x y :=
  ‚ü®fun h =>
    ‚ü®let ‚ü®b, b_in, _hb‚ü© := h; ‚ü®b, b_in‚ü©, h.joinedIn‚ü©,
    fun ‚ü®‚ü®b, b_in‚ü©, h‚ü© => ‚ü®b, b_in, fun x_in => h _ b_in _ x_in‚ü©‚ü©

/-- If `f` is continuous on `F` and `F` is path-connected, so is `f(F)`. -/
theorem IsPathConnected.image' (hF : IsPathConnected F)
    {f : X ‚Üí Y} (hf : ContinuousOn f F) : IsPathConnected (f '' F) := by
  rcases hF with ‚ü®x, x_in, hx‚ü©
  use f x, mem_image_of_mem f x_in
  rintro _ ‚ü®y, y_in, rfl‚ü©
  refine ‚ü®(hx y_in).somePath.map' ?_, fun t ‚Ü¶ ‚ü®_, (hx y_in).somePath_mem t, rfl‚ü©‚ü©
  exact hf.mono (range_subset_iff.2 (hx y_in).somePath_mem)

/-- If `f` is continuous and `F` is path-connected, so is `f(F)`. -/
theorem IsPathConnected.image (hF : IsPathConnected F) {f : X ‚Üí Y}
    (hf : Continuous f) : IsPathConnected (f '' F) := hF.image' hf.continuousOn

/-- If `f : X ‚Üí Y` is a `Inducing`, `f(F)` is path-connected iff `F` is. -/
nonrec theorem Inducing.isPathConnected_iff {f : X ‚Üí Y} (hf : Inducing f) :
    IsPathConnected F ‚Üî IsPathConnected (f '' F) := by
  refine ‚ü®fun hF ‚Ü¶ hF.image hf.continuous, fun hF ‚Ü¶ ?_‚ü©
  simp? [isPathConnected_iff] at hF ‚ä¢ says
    simp only [isPathConnected_iff, image_nonempty, mem_image, forall_exists_index,
      and_imp, forall_apply_eq_imp_iff‚ÇÇ] at hF ‚ä¢
  refine ‚ü®hF.1, fun x hx y hy ‚Ü¶ ?_‚ü©
  rcases hF.2 x hx y hy with ‚ü®Œ≥, hŒ≥‚ü©
  choose Œ≥' hŒ≥' hŒ≥Œ≥' using hŒ≥
  have key‚ÇÅ : Inseparable x (Œ≥' 0) := by rw [‚Üê hf.inseparable_iff, hŒ≥Œ≥' 0, Œ≥.source]
  have key‚ÇÇ : Inseparable (Œ≥' 1) y := by rw [‚Üê hf.inseparable_iff, hŒ≥Œ≥' 1, Œ≥.target]
  refine key‚ÇÅ.joinedIn hx (hŒ≥' 0) |>.trans ‚ü®‚ü®‚ü®Œ≥', ?_‚ü©, rfl, rfl‚ü©, hŒ≥'‚ü© |>.trans
    (key‚ÇÇ.joinedIn (hŒ≥' 1) hy)
  simpa [hf.continuous_iff] using Œ≥.continuous.congr fun t ‚Ü¶ (hŒ≥Œ≥' t).symm

/-- If `h : X ‚Üí Y` is a homeomorphism, `h(s)` is path-connected iff `s` is. -/
@[simp]
theorem Homeomorph.isPathConnected_image {s : Set X} (h : X ‚âÉ‚Çú Y) :
    IsPathConnected (h '' s) ‚Üî IsPathConnected s :=
  h.inducing.isPathConnected_iff.symm

/-- If `h : X ‚Üí Y` is a homeomorphism, `h‚Åª¬π(s)` is path-connected iff `s` is. -/
@[simp]
theorem Homeomorph.isPathConnected_preimage {s : Set Y} (h : X ‚âÉ‚Çú Y) :
    IsPathConnected (h ‚Åª¬π' s) ‚Üî IsPathConnected s := by
  rw [‚Üê Homeomorph.image_symm]; exact h.symm.isPathConnected_image

theorem IsPathConnected.mem_pathComponent (h : IsPathConnected F) (x_in : x ‚àà F) (y_in : y ‚àà F) :
    y ‚àà pathComponent x :=
  (h.joinedIn x x_in y y_in).joined

theorem IsPathConnected.subset_pathComponent (h : IsPathConnected F) (x_in : x ‚àà F) :
    F ‚äÜ pathComponent x := fun _y y_in => h.mem_pathComponent x_in y_in

theorem isPathConnected_singleton (x : X) : IsPathConnected ({x} : Set X) := by
  refine ‚ü®x, rfl, ?_‚ü©
  rintro y rfl
  exact JoinedIn.refl rfl

theorem IsPathConnected.union {U V : Set X} (hU : IsPathConnected U) (hV : IsPathConnected V)
    (hUV : (U ‚à© V).Nonempty) : IsPathConnected (U ‚à™ V) := by
  rcases hUV with ‚ü®x, xU, xV‚ü©
  use x, Or.inl xU
  rintro y (yU | yV)
  ¬∑ exact (hU.joinedIn x xU y yU).mono subset_union_left
  ¬∑ exact (hV.joinedIn x xV y yV).mono subset_union_right

/-- If a set `W` is path-connected, then it is also path-connected when seen as a set in a smaller
ambient type `U` (when `U` contains `W`). -/
theorem IsPathConnected.preimage_coe {U W : Set X} (hW : IsPathConnected W) (hWU : W ‚äÜ U) :
    IsPathConnected (((‚Üë) : U ‚Üí X) ‚Åª¬π' W) := by
  rcases hW with ‚ü®x, x_in, hx‚ü©
  use ‚ü®x, hWU x_in‚ü©, by simp [x_in]
  rintro ‚ü®y, hyU‚ü© hyW
  exact ‚ü®(hx hyW).joined_subtype.somePath.map (continuous_inclusion hWU), by simp‚ü©

theorem IsPathConnected.exists_path_through_family {n : ‚Ñï}
    {s : Set X} (h : IsPathConnected s) (p : Fin (n + 1) ‚Üí X) (hp : ‚àÄ i, p i ‚àà s) :
    ‚àÉ Œ≥ : Path (p 0) (p n), range Œ≥ ‚äÜ s ‚àß ‚àÄ i, p i ‚àà range Œ≥ := by
  let p' : ‚Ñï ‚Üí X := fun k => if h : k < n + 1 then p ‚ü®k, h‚ü© else p ‚ü®0, n.zero_lt_succ‚ü©
  obtain ‚ü®Œ≥, hŒ≥‚ü© : ‚àÉ Œ≥ : Path (p' 0) (p' n), (‚àÄ i ‚â§ n, p' i ‚àà range Œ≥) ‚àß range Œ≥ ‚äÜ s := by
    have hp' : ‚àÄ i ‚â§ n, p' i ‚àà s := by
      intro i hi
      simp [p', Nat.lt_succ_of_le hi, hp]
    clear_value p'
    clear hp p
    induction' n with n hn
    ¬∑ use Path.refl (p' 0)
      constructor
      ¬∑ rintro i hi
        rw [Nat.le_zero.mp hi]
        exact ‚ü®0, rfl‚ü©
      ¬∑ rw [range_subset_iff]
        rintro _x
        exact hp' 0 le_rfl
    ¬∑ rcases hn fun i hi => hp' i <| Nat.le_succ_of_le hi with ‚ü®Œ≥‚ÇÄ, hŒ≥‚ÇÄ‚ü©
      rcases h.joinedIn (p' n) (hp' n n.le_succ) (p' <| n + 1) (hp' (n + 1) <| le_rfl) with
        ‚ü®Œ≥‚ÇÅ, hŒ≥‚ÇÅ‚ü©
      let Œ≥ : Path (p' 0) (p' <| n + 1) := Œ≥‚ÇÄ.trans Œ≥‚ÇÅ
      use Œ≥
      have range_eq : range Œ≥ = range Œ≥‚ÇÄ ‚à™ range Œ≥‚ÇÅ := Œ≥‚ÇÄ.trans_range Œ≥‚ÇÅ
      constructor
      ¬∑ rintro i hi
        by_cases hi' : i ‚â§ n
        ¬∑ rw [range_eq]
          left
          exact hŒ≥‚ÇÄ.1 i hi'
        ¬∑ rw [not_le, ‚Üê Nat.succ_le_iff] at hi'
          have : i = n.succ := le_antisymm hi hi'
          rw [this]
          use 1
          exact Œ≥.target
      ¬∑ rw [range_eq]
        apply union_subset hŒ≥‚ÇÄ.2
        rw [range_subset_iff]
        exact hŒ≥‚ÇÅ
  have hpp' : ‚àÄ k < n + 1, p k = p' k := by
    intro k hk
    simp only [p', hk, dif_pos]
    congr
    ext
    rw [Fin.val_cast_of_lt hk]
  use Œ≥.cast (hpp' 0 n.zero_lt_succ) (hpp' n n.lt_succ_self)
  simp only [Œ≥.cast_coe]
  refine And.intro hŒ≥.2 ?_
  rintro ‚ü®i, hi‚ü©
  suffices p ‚ü®i, hi‚ü© = p' i by convert hŒ≥.1 i (Nat.le_of_lt_succ hi)
  rw [‚Üê hpp' i hi]
  suffices i = i % n.succ by congr
  rw [Nat.mod_eq_of_lt hi]

theorem IsPathConnected.exists_path_through_family' {n : ‚Ñï}
    {s : Set X} (h : IsPathConnected s) (p : Fin (n + 1) ‚Üí X) (hp : ‚àÄ i, p i ‚àà s) :
    ‚àÉ (Œ≥ : Path (p 0) (p n)) (t : Fin (n + 1) ‚Üí I), (‚àÄ t, Œ≥ t ‚àà s) ‚àß ‚àÄ i, Œ≥ (t i) = p i := by
  rcases h.exists_path_through_family p hp with ‚ü®Œ≥, hŒ≥‚ü©
  rcases hŒ≥ with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
  simp only [range, mem_setOf_eq] at h‚ÇÇ
  rw [range_subset_iff] at h‚ÇÅ
  choose! t ht using h‚ÇÇ
  exact ‚ü®Œ≥, t, h‚ÇÅ, ht‚ü©

/-! ### Path connected spaces -/


/-- A topological space is path-connected if it is non-empty and every two points can be
joined by a continuous path. -/
class PathConnectedSpace (X : Type*) [TopologicalSpace X] : Prop where
  /-- A path-connected space must be nonempty. -/
  nonempty : Nonempty X
  /-- Any two points in a path-connected space must be joined by a continuous path. -/
  joined : ‚àÄ x y : X, Joined x y

theorem pathConnectedSpace_iff_zerothHomotopy :
    PathConnectedSpace X ‚Üî Nonempty (ZerothHomotopy X) ‚àß Subsingleton (ZerothHomotopy X) := by
  letI := pathSetoid X
  constructor
  ¬∑ intro h
    refine ‚ü®(nonempty_quotient_iff _).mpr h.1, ‚ü®?_‚ü©‚ü©
    rintro ‚ü®x‚ü© ‚ü®y‚ü©
    exact Quotient.sound (PathConnectedSpace.joined x y)
  ¬∑ unfold ZerothHomotopy
    rintro ‚ü®h, h'‚ü©
    exact ‚ü®(nonempty_quotient_iff _).mp h, fun x y => Quotient.exact <| Subsingleton.elim ‚ü¶x‚üß ‚ü¶y‚üß‚ü©

namespace PathConnectedSpace

variable [PathConnectedSpace X]

/-- Use path-connectedness to build a path between two points. -/
def somePath (x y : X) : Path x y :=
  Nonempty.some (joined x y)

end PathConnectedSpace

theorem isPathConnected_iff_pathConnectedSpace : IsPathConnected F ‚Üî PathConnectedSpace F := by
  rw [isPathConnected_iff]
  constructor
  ¬∑ rintro ‚ü®‚ü®x, x_in‚ü©, h‚ü©
    refine ‚ü®‚ü®‚ü®x, x_in‚ü©‚ü©, ?_‚ü©
    rintro ‚ü®y, y_in‚ü© ‚ü®z, z_in‚ü©
    have H := h y y_in z z_in
    rwa [joinedIn_iff_joined y_in z_in] at H
  ¬∑ rintro ‚ü®‚ü®x, x_in‚ü©, H‚ü©
    refine ‚ü®‚ü®x, x_in‚ü©, fun y y_in z z_in => ?_‚ü©
    rw [joinedIn_iff_joined y_in z_in]
    apply H

theorem pathConnectedSpace_iff_univ : PathConnectedSpace X ‚Üî IsPathConnected (univ : Set X) := by
  constructor
  ¬∑ intro h
    haveI := @PathConnectedSpace.nonempty X _ _
    inhabit X
    refine ‚ü®default, mem_univ _, ?_‚ü©
    intros y _hy
    simpa using PathConnectedSpace.joined default y
  ¬∑ intro h
    have h' := h.joinedIn
    cases' h with x h
    exact ‚ü®‚ü®x‚ü©, by simpa using h'‚ü©

theorem isPathConnected_univ [PathConnectedSpace X] : IsPathConnected (univ : Set X) :=
  pathConnectedSpace_iff_univ.mp inferInstance

theorem isPathConnected_range [PathConnectedSpace X] {f : X ‚Üí Y} (hf : Continuous f) :
    IsPathConnected (range f) := by
  rw [‚Üê image_univ]
  exact isPathConnected_univ.image hf

theorem Function.Surjective.pathConnectedSpace [PathConnectedSpace X]
    {f : X ‚Üí Y} (hf : Surjective f) (hf' : Continuous f) : PathConnectedSpace Y := by
  rw [pathConnectedSpace_iff_univ, ‚Üê hf.range_eq]
  exact isPathConnected_range hf'

instance Quotient.instPathConnectedSpace {s : Setoid X} [PathConnectedSpace X] :
    PathConnectedSpace (Quotient s) :=
  (surjective_quotient_mk' X).pathConnectedSpace continuous_coinduced_rng

/-- This is a special case of `NormedSpace.instPathConnectedSpace` (and
`TopologicalAddGroup.pathConnectedSpace`). It exists only to simplify dependencies. -/
instance Real.instPathConnectedSpace : PathConnectedSpace ‚Ñù where
  joined x y := ‚ü®‚ü®‚ü®fun (t : I) ‚Ü¶ (1 - t) * x + t * y, by fun_prop‚ü©, by simp, by simp‚ü©‚ü©
  nonempty := inferInstance

theorem pathConnectedSpace_iff_eq : PathConnectedSpace X ‚Üî ‚àÉ x : X, pathComponent x = univ := by
  simp [pathConnectedSpace_iff_univ, isPathConnected_iff_eq]

-- see Note [lower instance priority]
instance (priority := 100) PathConnectedSpace.connectedSpace [PathConnectedSpace X] :
    ConnectedSpace X := by
  rw [connectedSpace_iff_connectedComponent]
  rcases isPathConnected_iff_eq.mp (pathConnectedSpace_iff_univ.mp ‚Äπ_‚Ä∫) with ‚ü®x, _x_in, hx‚ü©
  use x
  rw [‚Üê univ_subset_iff]
  exact (by simpa using hx : pathComponent x = univ) ‚ñ∏ pathComponent_subset_component x

theorem IsPathConnected.isConnected (hF : IsPathConnected F) : IsConnected F := by
  rw [isConnected_iff_connectedSpace]
  rw [isPathConnected_iff_pathConnectedSpace] at hF
  exact @PathConnectedSpace.connectedSpace _ _ hF

namespace PathConnectedSpace

variable [PathConnectedSpace X]

theorem exists_path_through_family {n : ‚Ñï} (p : Fin (n + 1) ‚Üí X) :
    ‚àÉ Œ≥ : Path (p 0) (p n), ‚àÄ i, p i ‚àà range Œ≥ := by
  have : IsPathConnected (univ : Set X) := pathConnectedSpace_iff_univ.mp (by infer_instance)
  rcases this.exists_path_through_family p fun _i => True.intro with ‚ü®Œ≥, -, h‚ü©
  exact ‚ü®Œ≥, h‚ü©

theorem exists_path_through_family' {n : ‚Ñï} (p : Fin (n + 1) ‚Üí X) :
    ‚àÉ (Œ≥ : Path (p 0) (p n)) (t : Fin (n + 1) ‚Üí I), ‚àÄ i, Œ≥ (t i) = p i := by
  have : IsPathConnected (univ : Set X) := pathConnectedSpace_iff_univ.mp (by infer_instance)
  rcases this.exists_path_through_family' p fun _i => True.intro with ‚ü®Œ≥, t, -, h‚ü©
  exact ‚ü®Œ≥, t, h‚ü©

end PathConnectedSpace

/-! ### Locally path connected spaces -/


/-- A topological space is locally path connected, at every point, path connected
neighborhoods form a neighborhood basis. -/
class LocPathConnectedSpace (X : Type*) [TopologicalSpace X] : Prop where
  /-- Each neighborhood filter has a basis of path-connected neighborhoods. -/
  path_connected_basis : ‚àÄ x : X, (ùìù x).HasBasis (fun s : Set X => s ‚àà ùìù x ‚àß IsPathConnected s) id

export LocPathConnectedSpace (path_connected_basis)

theorem locPathConnected_of_bases {p : Œπ ‚Üí Prop} {s : X ‚Üí Œπ ‚Üí Set X}
    (h : ‚àÄ x, (ùìù x).HasBasis p (s x)) (h' : ‚àÄ x i, p i ‚Üí IsPathConnected (s x i)) :
    LocPathConnectedSpace X := by
  constructor
  intro x
  apply (h x).to_hasBasis
  ¬∑ intro i pi
    exact ‚ü®s x i, ‚ü®(h x).mem_of_mem pi, h' x i pi‚ü©, by rfl‚ü©
  ¬∑ rintro U ‚ü®U_in, _hU‚ü©
    rcases (h x).mem_iff.mp U_in with ‚ü®i, pi, hi‚ü©
    tauto

theorem pathConnectedSpace_iff_connectedSpace [LocPathConnectedSpace X] :
    PathConnectedSpace X ‚Üî ConnectedSpace X := by
  constructor
  ¬∑ intro h
    infer_instance
  ¬∑ intro hX
    rw [pathConnectedSpace_iff_eq]
    use Classical.arbitrary X
    refine IsClopen.eq_univ ‚ü®?_, ?_‚ü© (by simp)
    ¬∑ rw [isClosed_iff_nhds]
      intro y H
      rcases (path_connected_basis y).ex_mem with ‚ü®U, ‚ü®U_in, hU‚ü©‚ü©
      rcases H U U_in with ‚ü®z, hz, hz'‚ü©
      exact (hU.joinedIn z hz y <| mem_of_mem_nhds U_in).joined.mem_pathComponent hz'
    ¬∑ rw [isOpen_iff_mem_nhds]
      intro y y_in
      rcases (path_connected_basis y).ex_mem with ‚ü®U, ‚ü®U_in, hU‚ü©‚ü©
      apply mem_of_superset U_in
      rw [‚Üê pathComponent_congr y_in]
      exact hU.subset_pathComponent (mem_of_mem_nhds U_in)

theorem pathConnected_subset_basis [LocPathConnectedSpace X] {U : Set X} (h : IsOpen U)
    (hx : x ‚àà U) : (ùìù x).HasBasis (fun s : Set X => s ‚àà ùìù x ‚àß IsPathConnected s ‚àß s ‚äÜ U) id :=
  (path_connected_basis x).hasBasis_self_subset (IsOpen.mem_nhds h hx)

theorem locPathConnected_of_isOpen [LocPathConnectedSpace X] {U : Set X} (h : IsOpen U) :
    LocPathConnectedSpace U :=
  ‚ü®by
    rintro ‚ü®x, x_in‚ü©
    rw [nhds_subtype_eq_comap]
    constructor
    intro V
    rw [(HasBasis.comap ((‚Üë) : U ‚Üí X) (pathConnected_subset_basis h x_in)).mem_iff]
    constructor
    ¬∑ rintro ‚ü®W, ‚ü®W_in, hW, hWU‚ü©, hWV‚ü©
      exact ‚ü®Subtype.val ‚Åª¬π' W, ‚ü®‚ü®preimage_mem_comap W_in, hW.preimage_coe hWU‚ü©, hWV‚ü©‚ü©
    ¬∑ rintro ‚ü®W, ‚ü®W_in, hW‚ü©, hWV‚ü©
      refine
        ‚ü®(‚Üë) '' W,
          ‚ü®Filter.image_coe_mem_of_mem_comap (IsOpen.mem_nhds h x_in) W_in,
            hW.image continuous_subtype_val, Subtype.coe_image_subset U W‚ü©,
          ?_‚ü©
      rintro x ‚ü®y, ‚ü®y_in, hy‚ü©‚ü©
      rw [‚Üê Subtype.coe_injective hy]
      tauto‚ü©

theorem IsOpen.isConnected_iff_isPathConnected [LocPathConnectedSpace X] {U : Set X}
    (U_op : IsOpen U) : IsPathConnected U ‚Üî IsConnected U := by
  rw [isConnected_iff_connectedSpace, isPathConnected_iff_pathConnectedSpace]
  haveI := locPathConnected_of_isOpen U_op
  exact pathConnectedSpace_iff_connectedSpace
