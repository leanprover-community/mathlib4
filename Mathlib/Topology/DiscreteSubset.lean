/-
Copyright (c) 2023 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash, Bhavik Mehta
-/
import Mathlib.Topology.Constructions
import Mathlib.Topology.Separation

/-!
# Discrete subsets of topological spaces

This file contains various additional properties of discrete subsets of topological spaces.

## Discreteness and compact sets

Given a topological space `X` together with a subset `s ‚äÜ X`, there are two distinct concepts of
"discreteness" which may hold. These are:
  (i) Every point of `s` is isolated (i.e., the subset topology induced on `s` is the discrete
      topology).
 (ii) Every compact subset of `X` meets `s` only finitely often (i.e., the inclusion map `s ‚Üí X`
      tends to the cocompact filter along the cofinite filter on `s`).

When `s` is closed, the two conditions are equivalent provided `X` is locally compact and T1,
see `IsClosed.tendsto_coe_cofinite_iff`.

### Main statements

 * `tendsto_cofinite_cocompact_iff`:
 * `IsClosed.tendsto_coe_cofinite_iff`:

## Co-discrete open sets

In a topological space the sets which are open with discrete complement form a filter. We
formalise this as `Filter.codiscrete`.

-/

open Set Filter Function Topology

variable {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] {f : X ‚Üí Y}

section cofinite_cocompact

lemma tendsto_cofinite_cocompact_iff :
    Tendsto f cofinite (cocompact _) ‚Üî ‚àÄ K, IsCompact K ‚Üí Set.Finite (f ‚Åª¬π' K) := by
  rw [hasBasis_cocompact.tendsto_right_iff]
  refine' forall‚ÇÇ_congr (fun K _ ‚Ü¶ _)
  simp only [mem_compl_iff, eventually_cofinite, not_not, preimage]

lemma Continuous.discrete_of_tendsto_cofinite_cocompact [T1Space X] [WeaklyLocallyCompactSpace Y]
    (hf' : Continuous f) (hf : Tendsto f cofinite (cocompact _)) :
    DiscreteTopology X := by
  refine' singletons_open_iff_discrete.mp (fun x ‚Ü¶ _)
  obtain ‚ü®K : Set Y, hK : IsCompact K, hK' : K ‚àà ùìù (f x)‚ü© := exists_compact_mem_nhds (f x)
  obtain ‚ü®U : Set Y, hU‚ÇÅ : U ‚äÜ K, hU‚ÇÇ : IsOpen U, hU‚ÇÉ : f x ‚àà U‚ü© := mem_nhds_iff.mp hK'
  have hU‚ÇÑ : Set.Finite (f‚Åª¬π' U) :=
    Finite.subset (tendsto_cofinite_cocompact_iff.mp hf K hK) (preimage_mono hU‚ÇÅ)
  exact isOpen_singleton_of_finite_mem_nhds _ ((hU‚ÇÇ.preimage hf').mem_nhds hU‚ÇÉ) hU‚ÇÑ

lemma tendsto_cofinite_cocompact_of_discrete [DiscreteTopology X]
    (hf : Tendsto f (cocompact _) (cocompact _)) :
    Tendsto f cofinite (cocompact _) := by
  convert hf
  rw [cocompact_eq_cofinite X]

lemma IsClosed.tendsto_coe_cofinite_of_discreteTopology
    {s : Set X} (hs : IsClosed s) (_hs' : DiscreteTopology s) :
    Tendsto ((‚Üë) : s ‚Üí X) cofinite (cocompact _) :=
  tendsto_cofinite_cocompact_of_discrete hs.closedEmbedding_subtype_val.tendsto_cocompact

lemma IsClosed.tendsto_coe_cofinite_iff [T1Space X] [WeaklyLocallyCompactSpace X]
    {s : Set X} (hs : IsClosed s) :
    Tendsto ((‚Üë) : s ‚Üí X) cofinite (cocompact _) ‚Üî DiscreteTopology s :=
  ‚ü®continuous_subtype_val.discrete_of_tendsto_cofinite_cocompact,
   fun _ ‚Ü¶ hs.tendsto_coe_cofinite_of_discreteTopology inferInstance‚ü©

end cofinite_cocompact

section codiscrete_filter

/-- Criterion for a subset `S ‚äÜ X` to be closed and discrete in terms of the punctured
neighbourhood filter at an arbitrary point of `X`. (Compare `discreteTopology_subtype_iff`.) -/
theorem isClosed_and_discrete_iff {S : Set X} :
    IsClosed S ‚àß DiscreteTopology S ‚Üî ‚àÄ x, Disjoint (ùìù[‚â†] x) (ùìü S) := by
  rw [discreteTopology_subtype_iff, isClosed_iff_clusterPt, ‚Üê forall_and]
  congrm (‚àÄ x, ?_)
  rw [‚Üê not_imp_not, clusterPt_iff_not_disjoint, not_not, ‚Üê disjoint_iff]
  constructor <;> intro H
  ¬∑ by_cases hx : x ‚àà S
    exacts [H.2 hx, (H.1 hx).mono_left nhdsWithin_le_nhds]
  ¬∑ refine ‚ü®fun hx ‚Ü¶ ?_, fun _ ‚Ü¶ H‚ü©
    simpa [disjoint_iff, nhdsWithin, inf_assoc, hx] using H

/-- In any topological space, the open sets with with discrete complement form a filter. -/
def Filter.codiscrete (X : Type*) [TopologicalSpace X] : Filter X where
  sets := {U | IsOpen U ‚àß DiscreteTopology ‚ÜëU·∂ú}
  univ_sets := ‚ü®isOpen_univ, compl_univ.symm ‚ñ∏ Subsingleton.discreteTopology‚ü©
  sets_of_superset := by
    intro U V hU hV
    simp_rw [‚Üê isClosed_compl_iff, isClosed_and_discrete_iff] at hU ‚ä¢
    exact fun x ‚Ü¶ (hU x).mono_right (principal_mono.mpr <| compl_subset_compl.mpr hV)
  inter_sets := by
    intro U V hU hV
    simp_rw [‚Üê isClosed_compl_iff, isClosed_and_discrete_iff] at hU hV ‚ä¢
    exact fun x ‚Ü¶ compl_inter U V ‚ñ∏ sup_principal ‚ñ∏ disjoint_sup_right.mpr ‚ü®hU x, hV x‚ü©

end codiscrete_filter
