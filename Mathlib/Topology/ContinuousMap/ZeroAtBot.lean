/-
Copyright (c) 2025 Hanliu Jiang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Shanwen Wang , Hanliu Jiang
-/
import Mathlib.Topology.ContinuousMap.Bounded.Star
import Mathlib.Topology.ContinuousMap.CocompactMap

/-!
# Continuous functions vanishing atBot

The type of continuous functions vanishing atBot.

## TODO

* Create more instances of algebraic structures (e.g., `NonUnitalSemiring`) once the necessary
  type classes (e.g., `IsTopologicalRing`) are sufficiently generalized.
* Relate the unitization of `C_‚ÇÄ(Œ±, Œ≤)` to the Alexandroff compactification.
-/


universe u v w

variable {F : Type*} {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}
[Preorder Œ±] [TopologicalSpace Œ±]

open BoundedContinuousFunction Topology Bornology

open Filter Metric

/-- `C_‚ÇÄ(Œ±, Œ≤)` is the type of continuous functions `Œ± ‚Üí Œ≤` which vanish at infinity from a
topological space to a metric space with a zero element.

When possible, instead of parametrizing results over `(f : C_‚ÇÄ(Œ±, Œ≤))`,
you should parametrize over `(F : Type*) [ZeroAtBotContinuousMapClass F Œ± Œ≤] (f : F)`.

When you extend this structure, make sure to extend `ZeroAtBotContinuousMapClass`. -/
structure ZeroAtBotContinuousMap (Œ± : Type u) (Œ≤ : Type v) [Preorder Œ±]
[TopologicalSpace Œ±][Zero Œ≤][TopologicalSpace Œ≤] : Type max u v extends ContinuousMap Œ± Œ≤ where
  /-- The function tends to zero along the `cocompact` filter. -/
  zero_atBot' : Tendsto toFun (atBot) (ùìù 0)

@[inherit_doc]
scoped[zero_atBot] notation (priority := 2000) "C_‚ÇÄ(" Œ± ", " Œ≤ ")" =>
ZeroAtBotContinuousMap Œ± Œ≤

@[inherit_doc]
scoped[zero_atBot] notation Œ± " ‚ÜíC_‚ÇÄ " Œ≤ => ZeroAtBotContinuousMap Œ± Œ≤

open zero_atBot

section

/-- `ZeroAtInftyContinuousMapClass F Œ± Œ≤` states that `F` is a type of continuous maps which
vanish at infinity.

You should also extend this typeclass when you extend `ZeroAtInftyContinuousMap`. -/
class ZeroAtBotContinuousMapClass (F : Type*) (Œ± Œ≤ : outParam Type*) [Preorder Œ±]
[TopologicalSpace Œ±]
    [Zero Œ≤] [TopologicalSpace Œ≤] [FunLike F Œ± Œ≤] : Prop extends ContinuousMapClass F Œ± Œ≤ where
  /-- Each member of the class tends to zero along the `cocompact` filter. -/
  zero_atBot (f : F) : Tendsto f (atBot) (ùìù 0)

end

export ZeroAtBotContinuousMapClass (zero_atBot)

namespace ZeroAtBotContinuousMap

section Basics

variable [TopologicalSpace Œ≤] [Zero Œ≤] [FunLike F Œ± Œ≤] [ZeroAtBotContinuousMapClass F Œ± Œ≤]

instance instFunLike : FunLike C_‚ÇÄ(Œ±, Œ≤) Œ± Œ≤ where
  coe f := f.toFun
  coe_injective' f g h := by
    obtain ‚ü®‚ü®_, _‚ü©, _‚ü© := f
    obtain ‚ü®‚ü®_, _‚ü©, _‚ü© := g
    congr

instance instZeroAtBotContinuousMapClass : ZeroAtBotContinuousMapClass C_‚ÇÄ(Œ±, Œ≤) Œ± Œ≤ where
  map_continuous f := f.continuous_toFun
  zero_atBot f := f.zero_atBot'

instance instCoeTC : CoeTC F C_‚ÇÄ(Œ±, Œ≤) :=
  ‚ü®fun f =>
    { toFun := f
      continuous_toFun := map_continuous f
      zero_atBot' := zero_atBot f }‚ü©

@[simp]
theorem coe_toContinuousMap (f : C_‚ÇÄ(Œ±, Œ≤)) : (f.toContinuousMap : Œ± ‚Üí Œ≤) = f :=
  rfl

@[ext]
theorem ext {f g : C_‚ÇÄ(Œ±, Œ≤)} (h : ‚àÄ x, f x = g x) : f = g :=
  DFunLike.ext _ _ h

@[simp]
lemma coe_mk {f : Œ± ‚Üí Œ≤} (hf : Continuous f) (hf' : Tendsto f (atBot) (ùìù 0)) :
    { toFun := f,
      continuous_toFun := hf,
      zero_atBot' := hf' : ZeroAtBotContinuousMap Œ± Œ≤} = f :=
  rfl

/-- Copy of a `ZeroAtInftyContinuousMap` with a new `toFun` equal to the old one. Useful
to fix definitional equalities. -/
protected def copy (f : C_‚ÇÄ(Œ±, Œ≤)) (f' : Œ± ‚Üí Œ≤) (h : f' = f) : C_‚ÇÄ(Œ±, Œ≤) where
  toFun := f'
  continuous_toFun := by
    rw [h]
    exact f.continuous_toFun
  zero_atBot' := by
    simp_rw [h]
    exact f.zero_atBot'

@[simp]
theorem coe_copy (f : C_‚ÇÄ(Œ±, Œ≤)) (f' : Œ± ‚Üí Œ≤) (h : f' = f) : ‚áë(f.copy f' h) = f' :=
  rfl

theorem copy_eq (f : C_‚ÇÄ(Œ±, Œ≤)) (f' : Œ± ‚Üí Œ≤) (h : f' = f) : f.copy f' h = f :=
  DFunLike.ext' h

theorem eq_of_empty [IsEmpty Œ±] (f g : C_‚ÇÄ(Œ±, Œ≤)) : f = g :=
  ext <| IsEmpty.elim ‚Äπ_‚Ä∫

end Basics

/-! ### Algebraic structure

Whenever `Œ≤` has suitable algebraic structure and a compatible topological structure, then
`C_‚ÇÄ(Œ±, Œ≤)` inherits a corresponding algebraic structure. The primary exception to this is that
`C_‚ÇÄ(Œ±, Œ≤)` will not have a multiplicative identity.
-/


section AlgebraicStructure

variable [TopologicalSpace Œ≤] (x : Œ±)

instance instZero [Zero Œ≤] : Zero C_‚ÇÄ(Œ±, Œ≤) :=
  ‚ü®‚ü®0, tendsto_const_nhds‚ü©‚ü©

instance instInhabited [Zero Œ≤] : Inhabited C_‚ÇÄ(Œ±, Œ≤) :=
  ‚ü®0‚ü©

@[simp]
theorem coe_zero [Zero Œ≤] : ‚áë(0 : C_‚ÇÄ(Œ±, Œ≤)) = 0 :=
  rfl

theorem zero_apply [Zero Œ≤] : (0 : C_‚ÇÄ(Œ±, Œ≤)) x = 0 :=
  rfl

instance instMul [MulZeroClass Œ≤] [ContinuousMul Œ≤] : Mul C_‚ÇÄ(Œ±, Œ≤) :=
  ‚ü®fun f g =>
    ‚ü®f * g, by simpa only [mul_zero] using (zero_atBot f).mul (zero_atBot g)‚ü©‚ü©

@[simp]
theorem coe_mul [MulZeroClass Œ≤] [ContinuousMul Œ≤] (f g : C_‚ÇÄ(Œ±, Œ≤)) : ‚áë(f * g) = f * g :=
  rfl

theorem mul_apply [MulZeroClass Œ≤] [ContinuousMul Œ≤] (f g : C_‚ÇÄ(Œ±, Œ≤)) :
 (f * g) x = f x * g x :=
  rfl

instance instMulZeroClass [MulZeroClass Œ≤] [ContinuousMul Œ≤] : MulZeroClass C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.mulZeroClass _ coe_zero coe_mul

instance instSemigroupWithZero [SemigroupWithZero Œ≤] [ContinuousMul Œ≤] :
    SemigroupWithZero C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.semigroupWithZero _ coe_zero coe_mul

instance instAdd [AddZeroClass Œ≤] [ContinuousAdd Œ≤] : Add C_‚ÇÄ(Œ±, Œ≤) :=
  ‚ü®fun f g => ‚ü®f + g, by simpa only [add_zero] using (zero_atBot f).add (zero_atBot g)‚ü©‚ü©

@[simp]
theorem coe_add [AddZeroClass Œ≤] [ContinuousAdd Œ≤] (f g : C_‚ÇÄ(Œ±, Œ≤)) : ‚áë(f + g) = f + g :=
  rfl

theorem add_apply [AddZeroClass Œ≤] [ContinuousAdd Œ≤] (f g : C_‚ÇÄ(Œ±, Œ≤)) :
(f + g) x = f x + g x :=
  rfl

instance instAddZeroClass [AddZeroClass Œ≤] [ContinuousAdd Œ≤] : AddZeroClass C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.addZeroClass _ coe_zero coe_add

instance instSMul [Zero Œ≤] {R : Type*} [Zero R] [SMulWithZero R Œ≤] [ContinuousConstSMul R Œ≤] :
    SMul R C_‚ÇÄ(Œ±, Œ≤) :=
  -- Porting note: Original version didn't have `Continuous.const_smul f.continuous r`
  ‚ü®fun r f => ‚ü®‚ü®r ‚Ä¢ ‚áëf, Continuous.const_smul f.continuous r‚ü©,
    by simpa [smul_zero] using (zero_atBot f).const_smul r‚ü©‚ü©

@[simp, norm_cast]
theorem coe_smul [Zero Œ≤] {R : Type*} [Zero R] [SMulWithZero R Œ≤] [ContinuousConstSMul R Œ≤] (r : R)
    (f : C_‚ÇÄ(Œ±, Œ≤)) : ‚áë(r ‚Ä¢ f) = r ‚Ä¢ ‚áëf :=
  rfl

theorem smul_apply [Zero Œ≤] {R : Type*} [Zero R] [SMulWithZero R Œ≤] [ContinuousConstSMul R Œ≤]
    (r : R) (f : C_‚ÇÄ(Œ±, Œ≤)) (x : Œ±) : (r ‚Ä¢ f) x = r ‚Ä¢ f x :=
  rfl

section AddMonoid

variable [AddMonoid Œ≤] [ContinuousAdd Œ≤] (f g : C_‚ÇÄ(Œ±, Œ≤))

instance instAddMonoid : AddMonoid C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.addMonoid _ coe_zero coe_add fun _ _ => rfl

end AddMonoid

instance instAddCommMonoid [AddCommMonoid Œ≤] [ContinuousAdd Œ≤] : AddCommMonoid C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.addCommMonoid _ coe_zero coe_add fun _ _ => rfl

section AddGroup

variable [AddGroup Œ≤] [IsTopologicalAddGroup Œ≤] (f g : C_‚ÇÄ(Œ±, Œ≤))

instance instNeg : Neg C_‚ÇÄ(Œ±, Œ≤) :=
  ‚ü®fun f => ‚ü®-f, by simpa only [neg_zero] using (zero_atBot f).neg‚ü©‚ü©

@[simp]
theorem coe_neg : ‚áë(-f) = -f :=
  rfl

theorem neg_apply : (-f) x = -f x :=
  rfl

instance instSub : Sub C_‚ÇÄ(Œ±, Œ≤) :=
  ‚ü®fun f g => ‚ü®f - g, by simpa only [sub_zero] using (zero_atBot f).sub (zero_atBot g)‚ü©‚ü©

@[simp]
theorem coe_sub : ‚áë(f - g) = f - g :=
  rfl

theorem sub_apply : (f - g) x = f x - g x :=
  rfl

instance instAddGroup : AddGroup C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.addGroup _ coe_zero coe_add coe_neg coe_sub (fun _ _ => rfl) fun _ _ => rfl

end AddGroup

instance instAddCommGroup [AddCommGroup Œ≤] [IsTopologicalAddGroup Œ≤] : AddCommGroup C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.addCommGroup _ coe_zero coe_add coe_neg coe_sub (fun _ _ => rfl) fun _ _ =>
    rfl

instance instIsCentralScalar [Zero Œ≤] {R : Type*} [Zero R] [SMulWithZero R Œ≤] [SMulWithZero R·µê·µí·µñ Œ≤]
    [ContinuousConstSMul R Œ≤] [IsCentralScalar R Œ≤] : IsCentralScalar R C_‚ÇÄ(Œ±, Œ≤) :=
  ‚ü®fun _ _ => ext fun _ => op_smul_eq_smul _ _‚ü©

instance instSMulWithZero [Zero Œ≤] {R : Type*} [Zero R] [SMulWithZero R Œ≤]
    [ContinuousConstSMul R Œ≤] : SMulWithZero R C_‚ÇÄ(Œ±, Œ≤) :=
  Function.Injective.smulWithZero ‚ü®_, coe_zero‚ü© DFunLike.coe_injective coe_smul

instance instMulActionWithZero [Zero Œ≤] {R : Type*} [MonoidWithZero R] [MulActionWithZero R Œ≤]
    [ContinuousConstSMul R Œ≤] : MulActionWithZero R C_‚ÇÄ(Œ±, Œ≤) :=
  Function.Injective.mulActionWithZero ‚ü®_, coe_zero‚ü© DFunLike.coe_injective coe_smul

instance instModule [AddCommMonoid Œ≤] [ContinuousAdd Œ≤] {R : Type*} [Semiring R] [Module R Œ≤]
    [ContinuousConstSMul R Œ≤] : Module R C_‚ÇÄ(Œ±, Œ≤) :=
  Function.Injective.module R ‚ü®‚ü®_, coe_zero‚ü©, coe_add‚ü© DFunLike.coe_injective coe_smul

instance instNonUnitalNonAssocSemiring [NonUnitalNonAssocSemiring Œ≤] [IsTopologicalSemiring Œ≤] :
    NonUnitalNonAssocSemiring C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.nonUnitalNonAssocSemiring _ coe_zero coe_add coe_mul fun _ _ => rfl

instance instNonUnitalSemiring [NonUnitalSemiring Œ≤] [IsTopologicalSemiring Œ≤] :
    NonUnitalSemiring C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.nonUnitalSemiring _ coe_zero coe_add coe_mul fun _ _ => rfl

instance instNonUnitalCommSemiring [NonUnitalCommSemiring Œ≤] [IsTopologicalSemiring Œ≤] :
    NonUnitalCommSemiring C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.nonUnitalCommSemiring _ coe_zero coe_add coe_mul fun _ _ => rfl

instance instNonUnitalNonAssocRing [NonUnitalNonAssocRing Œ≤] [IsTopologicalRing Œ≤] :
    NonUnitalNonAssocRing C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.nonUnitalNonAssocRing _ coe_zero coe_add coe_mul coe_neg coe_sub
    (fun _ _ => rfl) fun _ _ => rfl

instance instNonUnitalRing [NonUnitalRing Œ≤] [IsTopologicalRing Œ≤] : NonUnitalRing C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.nonUnitalRing _ coe_zero coe_add coe_mul coe_neg coe_sub (fun _ _ => rfl)
    fun _ _ => rfl

instance instNonUnitalCommRing [NonUnitalCommRing Œ≤] [IsTopologicalRing Œ≤] :
    NonUnitalCommRing C_‚ÇÄ(Œ±, Œ≤) :=
  DFunLike.coe_injective.nonUnitalCommRing _ coe_zero coe_add coe_mul coe_neg coe_sub
    (fun _ _ => rfl) fun _ _ => rfl

instance instIsScalarTower {R : Type*} [Semiring R] [NonUnitalNonAssocSemiring Œ≤]
    [IsTopologicalSemiring Œ≤] [Module R Œ≤] [ContinuousConstSMul R Œ≤] [IsScalarTower R Œ≤ Œ≤] :
    IsScalarTower R C_‚ÇÄ(Œ±, Œ≤) C_‚ÇÄ(Œ±, Œ≤) where
  smul_assoc r f g := by
    ext
    simp only [smul_eq_mul, coe_mul, coe_smul, Pi.mul_apply, Pi.smul_apply]
    rw [‚Üê smul_eq_mul, ‚Üê smul_eq_mul, smul_assoc]

instance instSMulCommClass {R : Type*} [Semiring R] [NonUnitalNonAssocSemiring Œ≤]
    [IsTopologicalSemiring Œ≤] [Module R Œ≤] [ContinuousConstSMul R Œ≤] [SMulCommClass R Œ≤ Œ≤] :
    SMulCommClass R C_‚ÇÄ(Œ±, Œ≤) C_‚ÇÄ(Œ±, Œ≤) where
  smul_comm r f g := by
    ext
    simp only [smul_eq_mul, coe_smul, coe_mul, Pi.smul_apply, Pi.mul_apply]
    rw [‚Üê smul_eq_mul, ‚Üê smul_eq_mul, smul_comm]

end AlgebraicStructure

end ZeroAtBotContinuousMap
