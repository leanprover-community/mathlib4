import Mathlib

section NumberField

open NumberField

@[simp]
theorem RingOfIntegers.minpoly_coe {K : Type*} [Field K] (x : ùìû K) :
    minpoly ‚Ñ§ (x : K) = minpoly ‚Ñ§ x :=
  minpoly.algebraMap_eq RingOfIntegers.coe_injective x

end NumberField

section Ideal.map

theorem Ideal.map_algEquiv {R A B : Type*} [CommSemiring R] [Semiring A] [Semiring B] [Algebra R A]
    [Algebra R B] (f : A ‚âÉ‚Çê[R] B) (I : Ideal A) :
    map f I = map (f : A ‚âÉ+* B) I := rfl

theorem Ideal.comap_algEquiv {R A B : Type*} [CommSemiring R] [Semiring A] [Semiring B]
    [Algebra R A] [Algebra R B] (f : B ‚âÉ‚Çê[R] A) (I : Ideal A) :
    comap f I = comap (f : B ‚âÉ+* A) I := rfl

theorem Ideal.map_ringEquiv {R S : Type*} [Semiring R] [Semiring S] (f : R ‚âÉ+* S) (I : Ideal R) :
    map f I = map (f : R ‚Üí+* S) I := rfl

theorem Ideal.comap_ringEquiv {R S : Type*} [Semiring R] [Semiring S] (f : S ‚âÉ+* R) (I : Ideal R) :
    comap f I = comap (f : S ‚Üí+* R) I := rfl

theorem Ideal.map_eq_iff_eq_comap {R S : Type*} [Semiring R] [Semiring S] {I : Ideal R}
    {J : Ideal S} {f : R ‚âÉ+* S} :
    map f I = J ‚Üî I = comap f J :=
  ‚ü®fun h ‚Ü¶ by rw [‚Üê h, ‚Üê map_symm, ‚Üê map_coe f.symm, ‚Üê map_coe f, map_of_equiv],
    fun h ‚Ü¶ by
      rw [h, ‚Üê comap_symm, ‚Üê comap_coe f.symm, ‚Üê comap_coe f]
      exact (RingEquiv.symm_symm f) ‚ñ∏ comap_of_equiv f.symm‚ü©

theorem Ideal.map_injective_of_equiv {R S : Type*} [Semiring R] [Semiring S] (f : R ‚âÉ+* S) :
    Function.Injective (map f) := by
  intro _ _ h
  rwa [map_eq_iff_eq_comap, comap_map_of_bijective _ f.bijective ] at h

theorem Ideal.comap_injective_of_equiv {R S : Type*} [Semiring R] [Semiring S] (f : R ‚âÉ+* S) :
    Function.Injective (comap f) := by
  intro _ _ h
  rw [‚Üê map_symm, ‚Üê map_symm] at h
  exact Ideal.map_injective_of_equiv f.symm h

end Ideal.map

noncomputable section AlgEquiv.restrictNormal'

variable {A C‚ÇÅ C‚ÇÇ : Type*} (K B L M‚ÇÅ M‚ÇÇ : Type*) [CommRing A] [CommRing C‚ÇÅ] [Algebra A C‚ÇÅ]
  [Field K]
  [Field M‚ÇÅ] [CommRing C‚ÇÇ] [Algebra A C‚ÇÇ] [Field M‚ÇÇ] [Algebra A K] [IsFractionRing A K]
  [Algebra K M‚ÇÅ] [Algebra K M‚ÇÇ] [Algebra A M‚ÇÅ] [Algebra A M‚ÇÇ]
  [IsScalarTower A K M‚ÇÅ] [Algebra C‚ÇÅ M‚ÇÅ] [IsScalarTower A C‚ÇÅ M‚ÇÅ] [IsIntegralClosure C‚ÇÅ A M‚ÇÅ]
  [Algebra.IsAlgebraic K M‚ÇÅ]
  [IsScalarTower A K M‚ÇÇ] [Algebra C‚ÇÇ M‚ÇÇ] [IsScalarTower A C‚ÇÇ M‚ÇÇ] [IsIntegralClosure C‚ÇÇ A M‚ÇÇ]
  [Algebra.IsAlgebraic K M‚ÇÇ]
  [CommRing B] [Field L]
  [Algebra B L] [Algebra A B] [Algebra K L] [Algebra L M‚ÇÅ] [Algebra L M‚ÇÇ]
  [IsScalarTower K L M‚ÇÅ] [IsScalarTower K L M‚ÇÇ]
  [Normal K L]
  [Algebra A L] [IsScalarTower A K L] [IsScalarTower A B L] [IsIntegralClosure B A L]

/-- Docstring. -/
def AlgEquiv.restrictNormal' (œÉ : C‚ÇÅ ‚âÉ‚Çê[A] C‚ÇÇ) : B ‚âÉ‚Çê[A] B :=
  galRestrict A K L B ((galLiftEquiv K M‚ÇÅ M‚ÇÇ œÉ).restrictNormal L)

variable [Algebra B C‚ÇÅ] [Algebra B C‚ÇÇ] [Algebra B M‚ÇÅ] [IsScalarTower B C‚ÇÅ M‚ÇÅ] [Algebra B M‚ÇÇ]
  [IsScalarTower B C‚ÇÇ M‚ÇÇ] [IsScalarTower B L M‚ÇÅ] [IsScalarTower B L M‚ÇÇ]

@[simp]
theorem AlgEquiv.restrictNormal'_commutes (œÉ : C‚ÇÅ ‚âÉ‚Çê[A] C‚ÇÇ) (x : B) :
    algebraMap B C‚ÇÇ (œÉ.restrictNormal' K B L M‚ÇÅ M‚ÇÇ x) = œÉ (algebraMap B C‚ÇÅ x) := by
  unfold restrictNormal'
  apply IsIntegralClosure.algebraMap_injective C‚ÇÇ A M‚ÇÇ
  rw [‚Üê IsScalarTower.algebraMap_apply, IsScalarTower.algebraMap_apply B L M‚ÇÇ,
    algebraMap_galRestrict_apply, AlgEquiv.restrictNormal_commutes,
    ‚Üê IsScalarTower.algebraMap_apply, IsScalarTower.algebraMap_apply B C‚ÇÅ M‚ÇÅ,
    galLiftEquiv_algebraMap_apply]

end AlgEquiv.restrictNormal'

noncomputable section AlgEquiv.liftNormal'

variable {A B‚ÇÅ B‚ÇÇ : Type*} (K L‚ÇÅ L‚ÇÇ C M) [CommRing A] [CommRing B‚ÇÅ] [Algebra A B‚ÇÅ] [Field K]
  [Field L‚ÇÅ]
  [Algebra A K] [IsFractionRing A K] [Algebra K L‚ÇÅ] [Algebra A L‚ÇÅ] [IsScalarTower A K L‚ÇÅ]
  [CommRing B‚ÇÇ] [Algebra A B‚ÇÇ] [Field L‚ÇÇ] [Algebra K L‚ÇÇ] [Algebra A L‚ÇÇ] [IsScalarTower A K L‚ÇÇ]
  [CommRing C] [Algebra.IsAlgebraic K L‚ÇÅ] [Algebra.IsAlgebraic K L‚ÇÇ]
  [Algebra B‚ÇÅ L‚ÇÅ] [IsScalarTower A B‚ÇÅ L‚ÇÅ] [IsIntegralClosure B‚ÇÅ A L‚ÇÅ]
  [Algebra B‚ÇÇ L‚ÇÇ] [IsScalarTower A B‚ÇÇ L‚ÇÇ] [IsIntegralClosure B‚ÇÇ A L‚ÇÇ]
  [Field M] [Algebra K M] [Algebra L‚ÇÅ M] [Algebra L‚ÇÇ M] [IsScalarTower K L‚ÇÅ M]
  [IsScalarTower K L‚ÇÇ M] [Normal K M] [Algebra A C] [Algebra A M] [IsScalarTower A K M]
  [Algebra C M] [IsScalarTower A C M] [IsIntegralClosure C A M]

/-- Docstring. -/
def AlgEquiv.liftNormal' (œÉ : B‚ÇÅ ‚âÉ‚Çê[A] B‚ÇÇ) : C ‚âÉ‚Çê[A] C :=
  galRestrict A K M C ((galLiftEquiv K L‚ÇÅ L‚ÇÇ œÉ).liftNormal M)

variable [Algebra B‚ÇÅ C] [Algebra B‚ÇÇ C] [Algebra B‚ÇÅ M] [IsScalarTower B‚ÇÅ C M]
  [IsScalarTower B‚ÇÅ L‚ÇÅ M] [Algebra B‚ÇÇ M] [IsScalarTower B‚ÇÇ C M] [IsScalarTower B‚ÇÇ L‚ÇÇ M]

@[simp]
theorem AlgEquiv.liftNormal'_commutes (œÉ : B‚ÇÅ ‚âÉ‚Çê[A] B‚ÇÇ) (x : B‚ÇÅ) :
    (œÉ.liftNormal' K L‚ÇÅ L‚ÇÇ C M) (algebraMap B‚ÇÅ C x) = algebraMap B‚ÇÇ C (œÉ x) := by
  unfold liftNormal'
  apply IsIntegralClosure.algebraMap_injective C A M
  rw [algebraMap_galRestrict_apply, ‚Üê IsScalarTower.algebraMap_apply,
    ‚Üê IsScalarTower.algebraMap_apply, IsScalarTower.algebraMap_apply B‚ÇÅ L‚ÇÅ M,
    AlgEquiv.liftNormal_commutes, galLiftEquiv_algebraMap_apply, ‚Üê IsScalarTower.algebraMap_apply]

@[simp]
theorem AlgEquiv.restrict_liftNormal' [FaithfulSMul B‚ÇÅ C] [Normal K L‚ÇÅ] (œÉ : B‚ÇÅ ‚âÉ‚Çê[A] B‚ÇÅ) :
    (œÉ.liftNormal' K L‚ÇÅ L‚ÇÅ C M).restrictNormal' K B‚ÇÅ L‚ÇÅ M M = œÉ := by
  ext
  apply FaithfulSMul.algebraMap_injective B‚ÇÅ C
  rw [AlgEquiv.restrictNormal'_commutes, AlgEquiv.liftNormal'_commutes]

end AlgEquiv.liftNormal'

section primesOverGalois

variable {A C‚ÇÅ C‚ÇÇ : Type*} [CommRing A]
  [CommRing C‚ÇÅ] [IsIntegrallyClosed C‚ÇÅ] [Algebra A C‚ÇÅ] [Module.Finite A C‚ÇÅ]
  [CommRing C‚ÇÇ] [IsIntegrallyClosed C‚ÇÇ] [Algebra A C‚ÇÇ] [Module.Finite A C‚ÇÇ]
  {K L M‚ÇÅ M‚ÇÇ : Type*} [Field K] [Field M‚ÇÅ] [Field M‚ÇÇ] [Algebra A K] [IsFractionRing A K]
  [Algebra C‚ÇÅ M‚ÇÅ] [IsFractionRing C‚ÇÅ M‚ÇÅ] [Algebra K M‚ÇÅ] [Algebra A M‚ÇÅ] [IsScalarTower A C‚ÇÅ M‚ÇÅ]
  [IsScalarTower A K M‚ÇÅ] [FiniteDimensional K M‚ÇÅ]
  [Algebra C‚ÇÇ M‚ÇÇ] [IsFractionRing C‚ÇÇ M‚ÇÇ] [Algebra K M‚ÇÇ] [Algebra A M‚ÇÇ] [IsScalarTower A C‚ÇÇ M‚ÇÇ]
  [IsScalarTower A K M‚ÇÇ] [FiniteDimensional K M‚ÇÇ]
  {B : Type*} [CommRing B] [Field L] [Algebra B L] [Algebra A B]
  [Algebra K L] [Normal K L] [Algebra A L] [IsScalarTower A K L] [IsScalarTower A B L]
  [IsIntegralClosure B A L]
  [Algebra B C‚ÇÅ] [Algebra L M‚ÇÅ] [IsScalarTower K L M‚ÇÅ] [Algebra B M‚ÇÅ] [IsScalarTower B L M‚ÇÅ]
  [IsScalarTower B C‚ÇÅ M‚ÇÅ]
  [Algebra B C‚ÇÇ] [Algebra L M‚ÇÇ] [IsScalarTower K L M‚ÇÇ] [Algebra B M‚ÇÇ] [IsScalarTower B L M‚ÇÇ]
  [IsScalarTower B C‚ÇÇ M‚ÇÇ]

variable (K L M‚ÇÅ M‚ÇÇ) in
theorem Ideal.liesOver_iff_map_liesOver_map (P : Ideal B) (Q : Ideal C‚ÇÅ) (œÉ : C‚ÇÅ ‚âÉ‚Çê[A] C‚ÇÇ) :
    (Q.map œÉ).LiesOver (P.map (œÉ.restrictNormal' K B L M‚ÇÅ M‚ÇÇ)) ‚Üî Q.LiesOver P := by
  rw [liesOver_iff, under_def, liesOver_iff, under_def, map_algEquiv, map_eq_iff_eq_comap,
    comap_ringEquiv, comap_comap, map_algEquiv, ‚Üê comap_symm, comap_ringEquiv, comap_comap]
  congr!
  ext
  simp [‚Üê AlgEquiv.symm_toRingEquiv]

variable (K L M‚ÇÅ M‚ÇÇ) in
theorem Ideal.liesOver_iff_comap_liesOver_comap (P : Ideal B) (Q : Ideal C‚ÇÅ) (œÉ : C‚ÇÅ ‚âÉ‚Çê[A] C‚ÇÅ) :
    (Q.comap œÉ).LiesOver (P.comap (œÉ.restrictNormal' K B L M‚ÇÅ M‚ÇÅ)) ‚Üî Q.LiesOver P := by
  rw [‚Üê liesOver_iff_map_liesOver_map K L M‚ÇÅ M‚ÇÅ _ _ œÉ, map_comap_eq_self_of_equiv,
    map_comap_eq_self_of_equiv]

variable [IsDomain A] [IsIntegrallyClosed A] [IsDomain B] [IsIntegrallyClosed B] [Module.Finite A B]
  [IsFractionRing B L] [FiniteDimensional K L] {C M : Type*} [CommRing C]
  [IsIntegrallyClosed C] [Field M] [Algebra C M] [IsFractionRing C M] [Algebra A C] [Algebra B C]
  [Algebra A M] [Algebra K M] [Algebra L M] [IsScalarTower K L M] [IsScalarTower A K M]
  [IsScalarTower A C M] [IsIntegralClosure C A M] [Module.Finite A C] [Algebra B M]
  [IsScalarTower B C M] [FiniteDimensional K M] [IsScalarTower B L M]
  [FaithfulSMul B C]

open Ideal in

variable (K L M) in
theorem Ideal.ncard_primesOver_eq_ncard_primesOver (p : Ideal A) (P‚ÇÅ P‚ÇÇ : Ideal B) [P‚ÇÅ.IsPrime]
    [P‚ÇÇ.IsPrime] [P‚ÇÅ.LiesOver p] [P‚ÇÇ.LiesOver p] [IsGalois K L] [Normal K M] :
    (P‚ÇÅ.primesOver C).ncard = (P‚ÇÇ.primesOver C).ncard := by
  obtain ‚ü®œÉ, hœÉ‚ü© := exists_map_eq_of_isGalois p P‚ÇÅ P‚ÇÇ K L
  let œÑ := œÉ.liftNormal' K L L C M
  refine Set.ncard_congr ?_ (fun Q ‚Ü¶ ?_) ?_ ?_
  ¬∑ exact fun Q _ ‚Ü¶ Q.map (œÉ.liftNormal' K L L C M)
  ¬∑ intro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    refine ‚ü®map_isPrime_of_equiv _, ?_‚ü©
    ¬∑ rwa [‚Üê liesOver_iff_map_liesOver_map K L M M _ _ (œÉ.liftNormal' K L L C M),
        AlgEquiv.restrict_liftNormal', hœÉ] at h‚ÇÇ
  ¬∑ exact fun _ _ _ _ h ‚Ü¶ map_injective_of_equiv (AlgEquiv.liftNormal' K L L C M œÉ).toRingEquiv h
  ¬∑ intro Q ‚ü®hQ‚ÇÅ, hQ‚ÇÇ‚ü©
    refine ‚ü®?_, ‚ü®?_, ?_‚ü© , ?_‚ü©
    ¬∑ exact comap (AlgEquiv.liftNormal' K L L C M œÉ) Q
    ¬∑ exact comap_isPrime _ _
    ¬∑ have := liesOver_iff_comap_liesOver_comap (œÉ := œÉ.liftNormal' K L L C M)
        (Q := Q) (P := P‚ÇÇ) (M‚ÇÅ := M) (L := L) (K := K) ..
      rwa [‚Üê this, AlgEquiv.restrict_liftNormal', ‚Üê hœÉ, comap_map_of_bijective] at hQ‚ÇÇ
      exact œÉ.bijective
    ¬∑ rw [map_comap_eq_self_of_equiv]









end primesOverGalois


section primesOverRestrict

@[simp]
theorem Ideal.primesOverFinset_bot (A : Type*) [CommRing A] (B : Type*) [CommRing B] [Algebra A B]
    [IsDedekindDomain B] :
    primesOverFinset (‚ä• : Ideal A) B = ‚àÖ := by
  classical
  rw [primesOverFinset, map_bot, UniqueFactorizationMonoid.factors_eq_normalizedFactors,
    ‚Üê zero_eq_bot, UniqueFactorizationMonoid.normalizedFactors_zero, Multiset.toFinset_eq_empty]

-- variable {A : Type*} [CommSemiring A] (p : Ideal A)

-- def Ideal.primesOverRestrict (B C : Type*) [CommSemiring B] [Semiring C] [Algebra A B]
--     [Algebra A C] [Algebra B C] [IsScalarTower A B C] :
--     p.primesOver C ‚Üí p.primesOver B :=
--   fun P ‚Ü¶
--     ‚ü®comap (algebraMap B C) P, ‚ü®IsPrime.under B P.1, under_liesOver_of_liesOver B P.1 p‚ü©‚ü©

-- @[simp]
-- theorem Ideal.primesOverRestrict_apply (B C : Type*) [CommSemiring B] [Semiring C] [Algebra A B]
--     [Algebra A C] [Algebra B C] [IsScalarTower A B C] (P : p.primesOver C) :
--     p.primesOverRestrict B C P = comap (algebraMap B C) P := rfl

-- theorem Ideal.primesOverRestrict_surjective (B C : Type*) [CommRing B] [CommRing C]
--     [Algebra A B] [Algebra A C] [Algebra B C] [IsScalarTower A B C] [FaithfulSMul B C]
--     [Algebra.IsIntegral B C] :
--     Function.Surjective (p.primesOverRestrict B C) := by
--   intro P
--   have hQ := exists_ideal_over_prime_of_isIntegral P.1 (‚ä• : Ideal C)
--     (by simp [comap_bot_of_injective _ (FaithfulSMul.algebraMap_injective B C)])
--   refine ‚ü®‚ü®hQ.choose, ‚ü®hQ.choose_spec.2.1, ?_‚ü©‚ü©, ?_‚ü©
--   ¬∑ have : hQ.choose.LiesOver P.1 := (liesOver_iff _ _).mpr hQ.choose_spec.2.2.symm
--     exact LiesOver.trans hQ.choose P.1 p
--   ¬∑ simpa [Subtype.ext_iff] using hQ.choose_spec.2.2

open Ideal in
theorem Ideal.mem_primesOver_of_mem_primesOver_and_liesOver {A : Type*} [CommSemiring A]
    (p : Ideal A) {B C : Type*} [CommSemiring B] [Semiring C]
    [Algebra A B] [Algebra A C] [Algebra B C] [IsScalarTower A B C] (P : Ideal B) (Q : Ideal C)
    [P.LiesOver p] :
    Q ‚àà p.primesOver C ‚àß Q.LiesOver P ‚Üî Q ‚àà P.primesOver C :=
  ‚ü®fun ‚ü®‚ü®h‚ÇÅ, _‚ü©, h‚ÇÉ‚ü© ‚Ü¶ ‚ü®h‚ÇÅ, h‚ÇÉ‚ü©, fun ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ ‚ü®‚ü®h‚ÇÅ, LiesOver.trans Q P p‚ü©, h‚ÇÇ‚ü©‚ü©



-- theorem Ideal.primesOverRestrict_eq_iff (B C : Type*) [CommSemiring B] [Semiring C] [Algebra A B]
--     [Algebra A C] [Algebra B C] [IsScalarTower A B C] (P : p.primesOver B)
--     (Q : p.primesOver C) : p.primesOverRestrict B C Q = P ‚Üî Q.1.LiesOver P.1 := by
--   sorry

-- theorem Ideal.primesOverRestrict_eq_iff' (B C : Type*) [CommSemiring B] [Semiring C] [Algebra A B]
--     [Algebra A C] [Algebra B C] [IsScalarTower A B C] (P : Ideal B) [P.LiesOver p]
--     (Q : p.primesOver C) : p.primesOverRestrict B C Q = P ‚Üî Q.1 ‚àà P.primesOver C := by
--   simp [primesOver, primesOver.isPrime, liesOver_iff, under_def, eq_comm]

theorem Ideal.card_primesOverFinset_eq_sum_card_primesOverFinset (A B C : Type*) [CommRing A]
    [CommRing B] [IsDedekindDomain B] [CommRing C] [IsDedekindDomain C] [Algebra A B]
    [NoZeroSMulDivisors A B] [Algebra A C] [NoZeroSMulDivisors A C] [Algebra B C]
    [NoZeroSMulDivisors B C] [IsScalarTower A B C] (p : Ideal A) [p.IsMaximal] :
    (primesOverFinset p C).card = ‚àë P ‚àà primesOverFinset p B, (primesOverFinset P C).card := by
  classical
  by_cases hp : p = ‚ä•
  ¬∑ simp [hp]
  rw [Finset.card_eq_sum_ones, ‚Üê Finset.sum_fiberwise_of_maps_to (t := primesOverFinset p B)
    (g := fun x ‚Ü¶ comap (algebraMap B C) x)]
  ¬∑ refine Finset.sum_congr rfl fun P hP ‚Ü¶ ?_
    rw [‚Üê Finset.card_eq_sum_ones]
    refine Finset.card_bijective (fun Q ‚Ü¶ Q) Function.bijective_id fun Q ‚Ü¶ ?_
    rw [mem_primesOverFinset_iff hp] at hP
    have hP' : P ‚â† ‚ä• := by
      have := hP.2
      apply ne_bot_of_liesOver_of_ne_bot hp
    have : P.IsMaximal := by
      have := hP.1
      exact Ring.DimensionLEOne.maximalOfPrime hP' this
    rw [Finset.mem_filter, mem_primesOverFinset_iff hp, mem_primesOverFinset_iff hP',
      ‚Üê under_def, eq_comm, ‚Üê liesOver_iff]
    have : P.LiesOver p := by
      exact hP.2
    exact mem_primesOver_of_mem_primesOver_and_liesOver p P Q
  ¬∑ intro Q hQ
    rw [mem_primesOverFinset_iff hp] at hQ ‚ä¢
    have := hQ.1
    have := hQ.2
    exact ‚ü®IsPrime.under B Q, under_liesOver_of_liesOver B Q p‚ü©

theorem Ideal.ncard_primesOver_eq_sum_ncard_primesOver (A B C : Type*) [CommRing A] [Nontrivial A]
    [CommRing B] [IsDedekindDomain B] [CommRing C] [IsDedekindDomain C] [Algebra A B]
    [NoZeroSMulDivisors A B] [Algebra A C] [NoZeroSMulDivisors A C] [Algebra B C]
    [NoZeroSMulDivisors B C] [IsScalarTower A B C] [Algebra.IsIntegral A C]
    [Algebra.IsIntegral A B] [Algebra.IsIntegral B C] (p : Ideal A) [p.IsMaximal] :
    (p.primesOver C).ncard = ‚àë P : p.primesOver B, (P.1.primesOver C).ncard := by
  by_cases hp : p = ‚ä•
  ¬∑ simp [hp, primesOver_bot]
    let _ : Unique (p.primesOver B) := by
      rw [hp, primesOver_bot]
      exact Set.uniqueSingleton ‚ä•
    rw [Fintype.sum_subsingleton _  ‚ü®‚ä•, Ideal.bot_prime, hp ‚ñ∏ Ideal.bot_liesOver_bot A B‚ü©,
      primesOver_bot, Set.ncard_singleton]
  have (P : p.primesOver B) : P.1 ‚â† ‚ä• := ne_bot_of_liesOver_of_ne_bot hp _
  simp_rw [‚Üê coe_primesOverFinset hp C, ‚Üê coe_primesOverFinset (this _) C, Set.ncard_coe_finset]
  rw [card_primesOverFinset_eq_sum_card_primesOverFinset A B C, Finset.sum_subtype]
  exact fun  _ ‚Ü¶ by rw [mem_primesOverFinset_iff hp]

end primesOverRestrict


theorem Ideal.eq_of_dvd_of_isPrime {A : Type*} [CommRing A] [IsDedekindDomain A] {I J : Ideal A}
    [hIP : I.IsPrime] [hJP : J.IsPrime] (hJ : J ‚â† ‚ä•) (h : I ‚à£ J) : I = J := by
  by_cases hI : I = ‚ä•
  ¬∑ rw [hI, Ideal.dvd_iff_le, le_bot_iff] at h
    rw [h, hI]
  exact (prime_dvd_prime_iff_eq (prime_of_isPrime hI hIP) (prime_of_isPrime hJ hJP)).mp h

section ExpChar

variable (p : ‚Ñï)

local notation3 "ùíë" => (Ideal.span {(p : ‚Ñ§)})

attribute [local instance] Ideal.Quotient.field

instance [hp : Fact (Nat.Prime p)] : CharP (‚Ñ§ ‚ß∏ ùíë) p := by
  refine CharP.quotient ‚Ñ§ p ?_
  rw [mem_nonunits_iff, isUnit_iff_dvd_one, Int.natCast_dvd_ofNat]
  exact Nat.Prime.not_dvd_one hp.out

theorem Int.ideal_span_ne_bot [NeZero p] : ùíë ‚â† ‚ä• := by
  rw [ne_eq, Ideal.span_singleton_eq_bot]
  exact NeZero.ne _

instance [NeZero p] : Finite (‚Ñ§ ‚ß∏ ùíë) := by
  refine Ideal.finiteQuotientOfFreeOfNeBot ùíë ?_
  exact Int.ideal_span_ne_bot _

theorem Int.card_ideal_quot : Nat.card (‚Ñ§ ‚ß∏ ùíë) = p := by
  simp [‚Üê Submodule.cardQuot_apply, ‚Üê Ideal.absNorm_apply]

end ExpChar

@[simp]
theorem rootsOfUnity_pow_eq_one {M : Type*} [CommMonoid M] (k : ‚Ñï) (Œ∂ : rootsOfUnity k M) :
    Œ∂ ^ k = 1 := by
  rw [Subtype.ext_iff, Subgroup.coe_pow, Subgroup.coe_one, ‚Üê mem_rootsOfUnity]
  exact Œ∂.prop

open Ideal in
theorem Int.mem_ideal_of_liesOver_span {R : Type*} [Ring R] (d : ‚Ñ§) (I : Ideal R)
    [h : I.LiesOver (span {d})] : (d : R) ‚àà I := by
  simp [Int.cast_mem_ideal_iff, ‚Üê (liesOver_iff _ _).mp h]

@[simp]
theorem MulChar.one_apply_zero {R : Type*} [Nontrivial R] [CommMonoidWithZero R] {R' : Type*}
    [CommMonoidWithZero R'] : (1 : MulChar R R') 0 = 0 := dif_neg not_isUnit_zero

theorem gaussSum_one {R : Type*} [CommRing R] [Fintype R] [DecidableEq R] {R' : Type*}
    [CommRing R'] : gaussSum (1 : MulChar R R') (1 : AddChar R R') = (Fintype.card RÀ£) := by
  classical
  simp [gaussSum, MulChar.sum_one_eq_card_units]

theorem gaussSum_one_left {R : Type*} [Field R] [Fintype R] {R' : Type*} [CommRing R'] [IsDomain R']
    (œà : AddChar R R') : gaussSum 1 œà = if œà = 0 then (Fintype.card R : R') - 1 else -1 := by
  classical
  rw [gaussSum, ‚Üê Finset.univ.add_sum_erase _ (Finset.mem_univ 0), MulChar.one_apply_zero,
    zero_mul, zero_add]
  have : ‚àÄ x ‚àà Finset.univ.erase (0 : R), (1 : MulChar R R') x = 1 := by
    intro x hx
    exact MulChar.one_apply <| isUnit_iff_ne_zero.mpr <| Finset.ne_of_mem_erase hx
  simp_rw +contextual [this, one_mul]
  rw [Finset.sum_erase_eq_sub (Finset.mem_univ 0), AddChar.map_zero_eq_one, AddChar.sum_eq_ite,
    ite_sub, zero_sub]

theorem gaussSum_one_right {R : Type*} [CommRing R] [Fintype R] {R' : Type*} [CommRing R']
    [IsDomain R'] {œá : MulChar R R'} (hœá : œá ‚â† 1) : gaussSum œá 1 = 0 := by
  simpa [gaussSum] using MulChar.sum_eq_zero_of_ne_one hœá

theorem Nat.eq_or_eq_of_totient_eq_totient {a b : ‚Ñï} (h : a ‚à£ b) (h' : a.totient = b.totient) :
    a = b ‚à® 2 * a = b := by
  by_cases ha : a = 0
  ¬∑ rw [ha, totient_zero, eq_comm, totient_eq_zero] at h'
    simp [ha, h']
  by_cases hb : b = 0
  ¬∑ rw [hb, totient_zero, totient_eq_zero] at h'
    exact False.elim (ha h')
  obtain ‚ü®c, rfl‚ü© := h
  suffices a.Coprime c by
    rw [totient_mul this, eq_comm, mul_eq_left (totient_eq_zero.not.mpr ha),
      totient_eq_one_iff] at h'
    obtain rfl | rfl := h'
    ¬∑ simp
    ¬∑ simp [mul_comm]
  refine coprime_of_dvd fun p hp hap ‚Ü¶ ?_
  rintro ‚ü®d, rfl‚ü©
  suffices a.totient < (p * a * d).totient by
    rw [‚Üê mul_assoc, mul_comm a] at h'
    exact h'.not_lt this
  rw [mul_comm p]
  refine lt_of_lt_of_le ?_ (Nat.le_of_dvd ?_ (totient_dvd_of_dvd ‚ü®d, rfl‚ü©))
  ¬∑ rw [mul_comm, totient_mul_of_prime_of_dvd hp hap, Nat.lt_mul_iff_one_lt_left]
    ¬∑ exact hp.one_lt
    ¬∑ exact totient_pos.mpr <| pos_of_ne_zero ha
  ¬∑ exact totient_pos.mpr <| zero_lt_of_ne_zero (by rwa [mul_assoc])

theorem Nat.eq_of_totient_eq_totient {a b : ‚Ñï} (h : a ‚à£ b) (ha : Even a)
    (h' : a.totient = b.totient) : a = b := by
  by_cases ha' : a = 0
  ¬∑ rw [ha', totient_zero, eq_comm, totient_eq_zero] at h'
    rw [h', ha']
  refine (eq_or_eq_of_totient_eq_totient h h').resolve_right fun h ‚Ü¶ ?_
  rw [‚Üê h, totient_mul_of_prime_of_dvd (prime_two) (even_iff_two_dvd.mp ha), eq_comm,
    mul_eq_right (totient_eq_zero.not.mpr ha')] at h'
  cutsat

theorem ZMod.orderOf_mod_self_pow_sub_one {n k : ‚Ñï} (hn : 1 < n) (hk : 0 < k) :
    orderOf (n : ZMod (n ^ k - 1)) = k := by
  have : NeZero n := NeZero.of_gt hn
  refine (orderOf_eq_iff hk).mpr ‚ü®?_, fun m hm‚ÇÅ hm‚ÇÇ ‚Ü¶ ?_‚ü©
  ¬∑ rw [‚Üê Nat.cast_npow, ‚Üê sub_eq_zero, ‚Üê Nat.cast_one (R := ZMod (n ^ k - 1)),
      ‚Üê Nat.cast_sub NeZero.one_le]
    exact ZMod.natCast_self _
  ¬∑ rw [ne_eq, ‚Üê Nat.cast_npow, ‚Üê sub_eq_zero, ‚Üê Nat.cast_one (R := ZMod (n ^ k - 1)),
      ‚Üê Nat.cast_sub NeZero.one_le, ZMod.natCast_eq_zero_iff]
    refine (Nat.le_of_dvd ?_).mt (not_le.mpr ?_)
    ¬∑ exact Nat.zero_lt_sub_of_lt <| Nat.one_lt_pow hm‚ÇÇ.ne' hn
    ¬∑ exact Nat.sub_lt_sub_iff_right NeZero.one_le (c := 1).mpr <| Nat.pow_lt_pow_right hn hm‚ÇÅ

theorem mem_torsion_iff_isPrimitiveRoot {G : Type*} [CommGroup G] {Œ∂ : G} :
    Œ∂ ‚àà CommGroup.torsion G ‚Üî (‚àÉ k, k ‚â† 0 ‚àß IsPrimitiveRoot Œ∂ k) := by
  rw [CommGroup.mem_torsion, isOfFinOrder_iff_pow_eq_one]
  refine ‚ü®fun ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© ‚Ü¶ ?_, fun ‚ü®k, hk‚ÇÅ, hk‚ÇÇ‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ exact ‚ü®orderOf Œ∂, orderOf_ne_zero_iff.mpr ‚ü®n, hn‚ÇÅ, (isPeriodicPt_mul_iff_pow_eq_one _).mpr hn‚ÇÇ‚ü©,
      IsPrimitiveRoot.orderOf Œ∂‚ü©
  ¬∑ exact ‚ü®k, Nat.zero_lt_of_ne_zero hk‚ÇÅ, hk‚ÇÇ.pow_eq_one‚ü©

theorem mem_torsion_of_isPrimitiveRoot (k : ‚Ñï) [NeZero k] {G : Type*} [CommGroup G]
    {Œ∂ : G} (hŒ∂ : IsPrimitiveRoot Œ∂ k) :
    Œ∂ ‚àà CommGroup.torsion G :=
  mem_torsion_iff_isPrimitiveRoot.mpr ‚ü®k, NeZero.ne _, hŒ∂‚ü©

@[simp]
lemma RingHom.rangeRestrict_injective_iff {R S : Type*} [Ring R] [Ring S] {f : R ‚Üí+* S} :
    Function.Injective f.rangeRestrict ‚Üî Function.Injective f := by
  convert Set.injective_codRestrict _

@[to_additive]
theorem MonoidAlgebra.single_sub {R M : Type*} [Ring R] (a : M) (b‚ÇÅ b‚ÇÇ : R) :
    single a (b‚ÇÅ - b‚ÇÇ) = single a b‚ÇÅ - single a b‚ÇÇ :=
  Finsupp.single_sub _ _ _

@[to_additive (attr := simp)]
theorem MonoidAlgebra.fintype_sum_single {k G : Type*} [Fintype G] [Semiring k]
    (f : MonoidAlgebra k G) : ‚àë g : G, single g (f g) = f := by
  classical
  rw [‚Üê sum_single f, Finsupp.sum_fintype]
  ¬∑ conv_lhs =>
      enter [2, g, 2]
      rw [Finset.sum_apply']
      simp [single_apply]
  ¬∑ intro _
    simp

theorem IsCyclotomicExtension.union_of_isPrimitiveRoot (S : Set ‚Ñï) (A B : Type*) [CommRing A]
    [CommRing B] [Algebra A B] [hB : IsCyclotomicExtension S A B] {n : ‚Ñï} {r : B}
    (hr : IsPrimitiveRoot r n) :
    IsCyclotomicExtension (S ‚à™ {n}) A B := by
  by_cases hn : n = 0
  ¬∑ rwa [hn, eq_self_sdiff_zero, Set.union_diff_right, ‚Üê eq_self_sdiff_zero]
  rw [iff_adjoin_eq_top]
  refine ‚ü®fun m hm‚ÇÅ hm‚ÇÇ ‚Ü¶ ?_, le_antisymm (by aesop) ?_‚ü©
  ¬∑ obtain hm‚ÇÅ | rfl := hm‚ÇÅ
    ¬∑ exact exists_isPrimitiveRoot A B hm‚ÇÅ hm‚ÇÇ
    ¬∑ use r
  ¬∑ rw [‚Üê ((iff_adjoin_eq_top _ _ _).mp hB).2]
    exact Algebra.adjoin_mono (by aesop)

-- lifted from #29517

lemma IsPrimitiveRoot.div_of_dvd {M : Type*} [CommMonoid M] {Œ∂ : M} {n m : ‚Ñï} [NeZero n]
    (hŒ∂ : IsPrimitiveRoot Œ∂ n) (h : m ‚à£ n) :
    IsPrimitiveRoot (Œ∂ ^ (n / m)) m := by
  have hm0 : 0 < m := by
    rw [Nat.pos_iff_ne_zero]
    rintro rfl
    simp only [zero_dvd_iff] at h
    exact NeZero.out h
  obtain ‚ü®k, rfl‚ü© := id h
  have hk0 : 0 < k := by
    rw [Nat.pos_iff_ne_zero]
    rintro rfl
    simp_all
  simpa [hm0, hk0] using hŒ∂.pow_of_dvd hk0.ne' (dvd_mul_left _ _)

-- These should be generalized

open NumberField in
theorem NumberField.Units.rootsOfUnity_eq_rootsOfUnity (K : Type*) [Field K] [NumberField K]
    (n : ‚Ñï) [NeZero n] :
    rootsOfUnity n (ùìû K) = rootsOfUnity (n.gcd (torsionOrder K)) (ùìû K) := by
  ext Œ∂
  rw [mem_rootsOfUnity, mem_rootsOfUnity]
  refine ‚ü®fun h ‚Ü¶ pow_gcd_eq_one Œ∂ h ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ have : Œ∂ ‚àà torsion K := by
      rw [torsion, CommGroup.mem_torsion, isOfFinOrder_iff_pow_eq_one]
      exact ‚ü®n, NeZero.pos n, h‚ü©
    rwa [‚Üê rootsOfUnity_eq_torsion] at this
  ¬∑ obtain ‚ü®d, hd‚ü© := Nat.gcd_dvd_left n (torsionOrder K)
    rw [hd, pow_mul, h, one_pow]

open NumberField in
theorem NumberField.Units.card_rootsOfUnity (K : Type*) [Field K] [NumberField K]
    (n : ‚Ñï) [NeZero n] (hn : n ‚à£ torsionOrder K) :
    Fintype.card (rootsOfUnity n (ùìû K)) = n := by
  obtain ‚ü®g, hg‚ü© : ‚àÉ g : ùìû K, IsPrimitiveRoot g (torsionOrder K) := by
    rw [‚Üê card_rootsOfUnity_eq_iff_exists_isPrimitiveRoot]
    simp_rw [rootsOfUnity_eq_torsion, torsionOrder]
  exact IsPrimitiveRoot.card_rootsOfUnity (hg.div_of_dvd hn)
