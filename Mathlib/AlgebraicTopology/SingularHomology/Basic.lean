/-
Copyright (c) 2025 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.Algebra.Homology.AlternatingConst
import Mathlib.AlgebraicTopology.SingularSet

/-!
# Singular homology

In this file, we define the singular chain complex and singular homology of a topological space.
We also calculate the homology of a totally disconnected space as an example.

-/

noncomputable section

namespace AlgebraicTopology

open CategoryTheory Limits

universe w v u

variable (C : Type u) [Category.{v} C] [HasCoproducts.{w} C]
variable [Preadditive C] [CategoryWithHomology C] (n : ‚Ñï)

/--
The singular chain complex associated to a simplicial set, with coefficients in `X : C`.
One can recover the ordinary singular chain complex when `C := Ab` and `X := ‚Ñ§`.
-/
def SSet.singularChainComplexFunctor :
    C ‚•§ SSet.{w} ‚•§ ChainComplex C ‚Ñï :=
  (Functor.postcompose‚ÇÇ.obj (AlgebraicTopology.alternatingFaceMapComplex _)).obj
    (sigmaConst ‚ãô SimplicialObject.whiskering _ _)

/-- The singular chain complex functor with coefficients in `C`. -/
def singularChainComplexFunctor :
    C ‚•§ TopCat.{w} ‚•§ ChainComplex C ‚Ñï :=
  SSet.singularChainComplexFunctor.{w} C ‚ãô (Functor.whiskeringLeft _ _ _).obj TopCat.toSSet.{w}

/-- The `n`-th singular homology functor with coefficients in `C`. -/
def singularHomologyFunctor : C ‚•§ TopCat.{w} ‚•§ C :=
  singularChainComplexFunctor C ‚ãô
    (Functor.whiskeringRight _ _ _).obj (HomologicalComplex.homologyFunctor _ _ n)

section TotallyDisconnectedSpace

variable (R : C) (X : TopCat.{w}) [TotallyDisconnectedSpace X]

/-- If `X` is totally disconnected,
its singular chain complex is given by `R[X] ‚Üê0- R[X] ‚Üêùüô- R[X] ‚Üê0- R[X] ‚ãØ`,
where `R[X]` is the coproduct of copies of `R` indexed by elements of `X`. -/
noncomputable
def singularChainComplexFunctorIsoOfTotallyDisconnectedSpace :
    ((singularChainComplexFunctor C).obj R).obj X ‚âÖ
      (ChainComplex.alternatingConst.obj (‚àê fun _ : X ‚Ü¶ R)) :=
  (AlgebraicTopology.alternatingFaceMapComplex _).mapIso
    (((SimplicialObject.whiskering _ _).obj _).mapIso
    (TopCat.toSSetIsoConst X) ‚â™‚â´ Functor.constComp _ _ _) ‚â™‚â´
    AlgebraicTopology.alternatingFaceMapComplexConst.app _

omit [CategoryWithHomology C] in
lemma singularChainComplexFunctor_exactAt_of_totallyDisconnectedSpace
    (hn : n ‚â† 0) :
    (((singularChainComplexFunctor C).obj R).obj X).ExactAt n :=
  have := hasCoproducts_shrink.{0, w} (C := C)
  have : HasZeroObject C := ‚ü®_, initialIsInitial.isZero‚ü©
  .of_iso (ChainComplex.alternatingConst_exactAt _ _ hn)
    (singularChainComplexFunctorIsoOfTotallyDisconnectedSpace C R X).symm

lemma isZero_singularHomologyFunctor_of_totallyDisconnectedSpace (hn : n ‚â† 0) :
    IsZero (((singularHomologyFunctor C n).obj R).obj X) :=
  have := hasCoproducts_shrink.{0, w} (C := C)
  have : HasZeroObject C := ‚ü®_, initialIsInitial.isZero‚ü©
  (singularChainComplexFunctor_exactAt_of_totallyDisconnectedSpace C n R X hn).isZero_homology

/-- The zeroth singular homology of a totally disconnected space is the
free `R`-module generated by elements of `X`. -/
noncomputable
def singularHomologyFunctorZeroOfTotallyDisconnectedSpace :
    ((singularHomologyFunctor C 0).obj R).obj X ‚âÖ ‚àê fun _ : X ‚Ü¶ R :=
  have := hasCoproducts_shrink.{0, w} (C := C)
  have : HasZeroObject C := ‚ü®_, initialIsInitial.isZero‚ü©
  (HomologicalComplex.homologyFunctor _ _ 0).mapIso
      (singularChainComplexFunctorIsoOfTotallyDisconnectedSpace C R X) ‚â™‚â´
    ChainComplex.alternatingConstHomologyZero _

end TotallyDisconnectedSpace

end AlgebraicTopology
