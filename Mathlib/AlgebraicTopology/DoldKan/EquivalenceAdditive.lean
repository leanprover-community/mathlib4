/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.DoldKan.NCompGamma

/-! The Dold-Kan equivalence for additive categories.

This file defines `Preadditive.DoldKan.equivalence` which is the equivalence
of categories `Karoubi (SimplicialObject C) ‚âå Karoubi (ChainComplex C ‚Ñï)`.

(See `Equivalence.lean` for the general strategy of proof of the Dold-Kan equivalence.)

-/


noncomputable section

open CategoryTheory CategoryTheory.Category CategoryTheory.Limits
  CategoryTheory.Idempotents AlgebraicTopology.DoldKan

variable {C : Type*} [Category C] [Preadditive C]

namespace CategoryTheory

namespace Preadditive

namespace DoldKan

/-- The functor `Karoubi (SimplicialObject C) ‚•§ Karoubi (ChainComplex C ‚Ñï)` of
the Dold-Kan equivalence for additive categories. -/
@[simp]
def N : Karoubi (SimplicialObject C) ‚•§ Karoubi (ChainComplex C ‚Ñï) :=
  N‚ÇÇ

variable [HasFiniteCoproducts C]

/-- The inverse functor `Karoubi (ChainComplex C ‚Ñï) ‚•§ Karoubi (SimplicialObject C)` of
the Dold-Kan equivalence for additive categories. -/
@[simp]
def Œì : Karoubi (ChainComplex C ‚Ñï) ‚•§ Karoubi (SimplicialObject C) :=
  Œì‚ÇÇ

/-- The Dold-Kan equivalence `Karoubi (SimplicialObject C) ‚âå Karoubi (ChainComplex C ‚Ñï)`
for additive categories. -/
@[simps]
def equivalence : Karoubi (SimplicialObject C) ‚âå Karoubi (ChainComplex C ‚Ñï) where
  functor := N
  inverse := Œì
  unitIso := Œì‚ÇÇN‚ÇÇ
  counitIso := N‚ÇÇŒì‚ÇÇ
  functor_unitIso_comp P := by
    let Œ± := N.mapIso (Œì‚ÇÇN‚ÇÇ.app P)
    let Œ≤ := N‚ÇÇŒì‚ÇÇ.app (N.obj P)
    symm
    change ùüô _ = Œ±.hom ‚â´ Œ≤.hom
    rw [‚Üê Iso.inv_comp_eq, comp_id, ‚Üê comp_id Œ≤.hom, ‚Üê Iso.inv_comp_eq]
    exact AlgebraicTopology.DoldKan.identity_N‚ÇÇ_objectwise P

end DoldKan

end Preadditive

end CategoryTheory
