/-
Copyright (c) 2024 Emily Riehl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mario Carneiro, Emily Riehl, Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.SimplicialObject.Coskeletal
import Mathlib.AlgebraicTopology.SimplicialSet.StrictSegal
import Mathlib.CategoryTheory.Functor.KanExtension.Adjunction
import Mathlib.CategoryTheory.Functor.KanExtension.Basic

/-!
# Coskeletal simplicial sets

In this file, we prove that if `X` is `StrictSegal` then `X` is 2-coskeletal,
i.e. `X ‚âÖ (cosk 2).obj X`. In particular, nerves of categories are 2-coskeletal.

This isomorphism follows from the fact that `rightExtensionInclusion X 2` is a right Kan
extension. In fact, we show that when `X` is `StrictSegal` then
`(rightExtensionInclusion X n).IsPointwiseRightKanExtension` holds.

As an example, `SimplicialObject.IsCoskeletal (nerve C) 2` shows that that nerves of categories
are 2-coskeletal.
-/


universe v u

open CategoryTheory Simplicial SimplexCategory Opposite Category Functor Limits

namespace SSet

namespace Truncated

/-- The identity natural transformation exhibits a simplicial set as a right extension of its
restriction along `(Truncated.inclusion (n := n)).op`.-/
@[simps!]
def rightExtensionInclusion (X : SSet.{u}) (n : ‚Ñï) :
    RightExtension (Truncated.inclusion (n := n)).op
      ((Truncated.inclusion n).op ‚ãô X) := RightExtension.mk _ (ùüô _)

end Truncated

section

local notation (priority := high) "[" n "]" => SimplexCategory.mk n

local macro:max (priority := high) "[" n:term "]‚ÇÇ" : term =>
  `((‚ü®SimplexCategory.mk $n, by dsimp; omega‚ü© : SimplexCategory.Truncated 2))

open StructuredArrow

namespace StrictSegal
variable (X : SSet.{u}) [StrictSegal X]

namespace isPointwiseRightKanExtensionAt

/-- A morphism in `SimplexCategory` with domain `[0]`, `[1]`, or `[2]` defines an object in the
comma category `StructuredArrow (op [n]) (Truncated.inclusion (n := 2)).op`.-/
abbrev strArrowMk‚ÇÇ {i : ‚Ñï} {n : ‚Ñï} (œÜ : [i] ‚ü∂ [n]) (hi : i ‚â§ 2) :
    StructuredArrow (op [n]) (Truncated.inclusion (n := 2)).op :=
  StructuredArrow.mk (Y := op ‚ü®[i], hi‚ü©) (by exact œÜ.op)

/-- Given a term in the cone over the diagram
`(proj (op [n]) ((Truncated.inclusion 2).op ‚ãô (Truncated.inclusion 2).op ‚ãô X)` where `X` is
Strict Segal, one can produce an `n`-simplex in `X`. -/
@[simp]
noncomputable def lift {X : SSet.{u}} [StrictSegal X] {n}
    (s : Cone (proj (op [n]) (Truncated.inclusion 2).op ‚ãô
      (Truncated.inclusion 2).op ‚ãô X)) (x : s.pt) : X _[n] :=
  StrictSegal.spineToSimplex {
    vertex := fun i ‚Ü¶ s.œÄ.app (.mk (Y := op [0]‚ÇÇ) (.op (SimplexCategory.const _ _ i))) x
    arrow := fun i ‚Ü¶ s.œÄ.app (.mk (Y := op [1]‚ÇÇ) (.op (mkOfLe _ _ (Fin.castSucc_le_succ i)))) x
    arrow_src := fun i ‚Ü¶ by
      let œÜ : strArrowMk‚ÇÇ (mkOfLe _ _ (Fin.castSucc_le_succ i)) (by simp) ‚ü∂
        strArrowMk‚ÇÇ ([0].const _ i.castSucc) (by simp) :=
          StructuredArrow.homMk (Œ¥ 1).op
          (Quiver.Hom.unop_inj (by ext x; fin_cases x; rfl))
      exact congr_fun (s.w œÜ) x
    arrow_tgt := fun i ‚Ü¶ by
      dsimp
      let œÜ : strArrowMk‚ÇÇ (mkOfLe _ _ (Fin.castSucc_le_succ i)) (by simp) ‚ü∂
          strArrowMk‚ÇÇ ([0].const _ i.succ) (by simp) :=
        StructuredArrow.homMk (Œ¥ 0).op
          (Quiver.Hom.unop_inj (by ext x; fin_cases x; rfl))
      exact congr_fun (s.w œÜ) x }

lemma fac_aux‚ÇÅ {n : ‚Ñï}
    (s : Cone (proj (op [n]) (Truncated.inclusion 2).op ‚ãô (Truncated.inclusion 2).op ‚ãô X))
    (x : s.pt) (i : ‚Ñï) (hi : i < n) :
    X.map (mkOfSucc ‚ü®i, hi‚ü©).op (lift s x) =
      s.œÄ.app (strArrowMk‚ÇÇ (mkOfSucc ‚ü®i, hi‚ü©) (by omega)) x := by
  dsimp [lift]
  rw [spineToSimplex_arrow]
  rfl

lemma fac_aux‚ÇÇ {n : ‚Ñï}
    (s : Cone (proj (op [n]) (Truncated.inclusion 2).op ‚ãô (Truncated.inclusion 2).op ‚ãô X))
    (x : s.pt) (i j : ‚Ñï) (hij : i ‚â§ j) (hj : j ‚â§ n) :
    X.map (mkOfLe ‚ü®i, by omega‚ü© ‚ü®j, by omega‚ü© hij).op (lift s x) =
      s.œÄ.app (strArrowMk‚ÇÇ (mkOfLe ‚ü®i, by omega‚ü© ‚ü®j, by omega‚ü© hij) (by omega)) x := by
  obtain ‚ü®k, hk‚ü© := Nat.le.dest hij
  revert i j
  induction k with
  | zero =>
      rintro i j hij hj hik
      obtain rfl : i = j := by omega
      have : mkOfLe ‚ü®i, Nat.lt_add_one_of_le hj‚ü© ‚ü®i, Nat.lt_add_one_of_le hj‚ü© (by omega) =
        [1].const [0] 0 ‚â´ [0].const [n] ‚ü®i, Nat.lt_add_one_of_le hj‚ü© := Hom.ext_one_left _ _
      rw [this]
      let Œ± : (strArrowMk‚ÇÇ ([0].const [n] ‚ü®i, Nat.lt_add_one_of_le hj‚ü©) (by omega)) ‚ü∂
        (strArrowMk‚ÇÇ ([1].const [0] 0 ‚â´ [0].const [n] ‚ü®i, Nat.lt_add_one_of_le hj‚ü©) (by omega)) :=
            StructuredArrow.homMk (([1].const [0] 0).op) (by simp; rfl)
      have nat := congr_fun (s.œÄ.naturality Œ±) x
      dsimp only [Fin.val_zero, Nat.add_zero, id_eq, Int.reduceNeg, Int.Nat.cast_ofNat_Int,
        Int.reduceAdd, Fin.eta, comp_obj, StructuredArrow.proj_obj, op_obj, const_obj_obj,
        const_obj_map, types_comp_apply, types_id_apply, Functor.comp_map, StructuredArrow.proj_map,
        op_map] at nat
      rw [nat, op_comp, Functor.map_comp]
      simp only [types_comp_apply]
      refine congrArg (X.map ([1].const [0] 0).op) ?_
      unfold strArrowMk‚ÇÇ
      rw [lift, StrictSegal.spineToSimplex_vertex]
      congr
  | succ k hk =>
      intro i j hij hj hik
      let Œ± := strArrowMk‚ÇÇ (mkOfLeComp (n := n) ‚ü®i, by omega‚ü© ‚ü®i + k, by omega‚ü©
          ‚ü®j, by omega‚ü© (by simp)
        (by simp only [Fin.mk_le_mk]; omega)) (by rfl)
      let Œ±‚ÇÄ := strArrowMk‚ÇÇ (mkOfLe (n := n) ‚ü®i + k, by omega‚ü© ‚ü®j, by omega‚ü©
        (by simp only [Fin.mk_le_mk]; omega)) (by simp)
      let Œ±‚ÇÅ := strArrowMk‚ÇÇ (mkOfLe (n := n) ‚ü®i, by omega‚ü© ‚ü®j, by omega‚ü©
        (by simp only [Fin.mk_le_mk]; omega)) (by simp)
      let Œ±‚ÇÇ := strArrowMk‚ÇÇ (mkOfLe (n := n) ‚ü®i, by omega‚ü© ‚ü®i + k, by omega‚ü© (by simp)) (by simp)
      let Œ≤‚ÇÄ : Œ± ‚ü∂ Œ±‚ÇÄ := StructuredArrow.homMk ((mkOfSucc 1).op) (Quiver.Hom.unop_inj
        (by ext x; fin_cases x <;> rfl))
      let Œ≤‚ÇÅ : Œ± ‚ü∂ Œ±‚ÇÅ := StructuredArrow.homMk ((Œ¥ 1).op) (Quiver.Hom.unop_inj
        (by ext x; fin_cases x <;> rfl))
      let Œ≤‚ÇÇ : Œ± ‚ü∂ Œ±‚ÇÇ := StructuredArrow.homMk ((mkOfSucc 0).op) (Quiver.Hom.unop_inj
        (by ext x; fin_cases x <;> rfl))
      have h‚ÇÄ : X.map Œ±‚ÇÄ.hom (lift s x) = s.œÄ.app Œ±‚ÇÄ x := by
        obtain rfl : j = (i + k) + 1 := by omega
        exact fac_aux‚ÇÅ _ _ _ _ (by omega)
      have h‚ÇÇ : X.map Œ±‚ÇÇ.hom (lift s x) = s.œÄ.app Œ±‚ÇÇ x :=
        hk i (i + k) (by simp) (by omega) rfl
      change X.map Œ±‚ÇÅ.hom (lift s x) = s.œÄ.app Œ±‚ÇÅ x
      have : X.map Œ±.hom (lift s x) = s.œÄ.app Œ± x := by
        apply StrictSegal.spineInjective
        apply Path.ext'
        intro t
        dsimp only [spineEquiv]
        rw [Equiv.coe_fn_mk, spine_arrow, spine_arrow,
            ‚Üê FunctorToTypes.map_comp_apply]
        match t with
        | 0 =>
            have : Œ±.hom ‚â´ (mkOfSucc 0).op = Œ±‚ÇÇ.hom :=
              Quiver.Hom.unop_inj (by ext x ; fin_cases x <;> rfl)
            rw [this, h‚ÇÇ, ‚Üê congr_fun (s.w Œ≤‚ÇÇ) x]
            rfl
        | 1 =>
            have : Œ±.hom ‚â´ (mkOfSucc 1).op = Œ±‚ÇÄ.hom :=
              Quiver.Hom.unop_inj (by ext x ; fin_cases x <;> rfl)
            rw [this, h‚ÇÄ, ‚Üê congr_fun (s.w Œ≤‚ÇÄ) x]
            rfl
      rw [‚Üê StructuredArrow.w Œ≤‚ÇÅ, FunctorToTypes.map_comp_apply, this, ‚Üê s.w Œ≤‚ÇÅ]
      dsimp

lemma fac_aux‚ÇÉ {n : ‚Ñï}
    (s : Cone (proj (op [n]) (Truncated.inclusion 2).op ‚ãô (Truncated.inclusion 2).op ‚ãô X))
    (x : s.pt) (œÜ : [1] ‚ü∂ [n]) :
    X.map œÜ.op (lift s x) = s.œÄ.app (strArrowMk‚ÇÇ œÜ (by omega)) x := by
  obtain ‚ü®i, j, hij, rfl‚ü© : ‚àÉ i j hij, œÜ = mkOfLe i j hij :=
    ‚ü®œÜ.toOrderHom 0, œÜ.toOrderHom 1, œÜ.toOrderHom.monotone (by simp),
      Hom.ext_one_left _ _ rfl rfl‚ü©
  exact fac_aux‚ÇÇ _ _ _ _ _ _ (by omega)

end isPointwiseRightKanExtensionAt

open Truncated

open isPointwiseRightKanExtensionAt in
/-- A strict Segal simplicial set is 2-coskeletal. -/
noncomputable def isPointwiseRightKanExtensionAt (n : ‚Ñï) :
    (rightExtensionInclusion X 2).IsPointwiseRightKanExtensionAt ‚ü®[n]‚ü© where
  lift s x := lift (X := X) s x
  fac s j := by
    ext x
    obtain ‚ü®‚ü®i, hi‚ü©, ‚ü®f :  _ ‚ü∂ _‚ü©, rfl‚ü© := j.mk_surjective
    obtain ‚ü®i, rfl‚ü© : ‚àÉ j, SimplexCategory.mk j = i := ‚ü®_, i.mk_len‚ü©
    dsimp at hi ‚ä¢
    apply StrictSegal.spineInjective
    dsimp
    ext k
    ¬∑ dsimp only [spineEquiv, Equiv.coe_fn_mk]
      erw [spine_map_vertex]
      rw [spine_spineToSimplex, spine_vertex]
      let Œ± : strArrowMk‚ÇÇ f hi ‚ü∂ strArrowMk‚ÇÇ ([0].const [n] (f.toOrderHom k)) (by omega) :=
        StructuredArrow.homMk (([0].const _ (by exact k)).op) (by simp; rfl)
      exact congr_fun (s.w Œ±).symm x
    ¬∑ dsimp only [spineEquiv, Equiv.coe_fn_mk, spine_arrow]
      rw [‚Üê FunctorToTypes.map_comp_apply]
      let Œ± : strArrowMk‚ÇÇ f hi ‚ü∂ strArrowMk‚ÇÇ (mkOfSucc k ‚â´ f) (by omega) :=
        StructuredArrow.homMk (mkOfSucc k).op (by simp; rfl)
      exact (isPointwiseRightKanExtensionAt.fac_aux‚ÇÉ _ _ _ _).trans (congr_fun (s.w Œ±).symm x)
  uniq s m hm := by
    ext x
    apply StrictSegal.spineInjective (X := X)
    dsimp [spineEquiv]
    rw [StrictSegal.spine_spineToSimplex]
    ext i
    ¬∑ exact congr_fun (hm (StructuredArrow.mk (Y := op [0]‚ÇÇ) ([0].const [n] i).op)) x
    ¬∑ exact congr_fun (hm (.mk (Y := op [1]‚ÇÇ) (.op (mkOfLe _ _ (Fin.castSucc_le_succ i))))) x

/-- Since `StrictSegal.isPointwiseRightKanExtensionAt` proves that the appropriate
cones are limit cones, `rightExtensionInclusion X 2` is a pointwise right Kan extension.-/
noncomputable def isPointwiseRightKanExtension :
    (rightExtensionInclusion X 2).IsPointwiseRightKanExtension :=
  fun Œî => isPointwiseRightKanExtensionAt X Œî.unop.len

theorem isRightKanExtension :
    X.IsRightKanExtension (ùüô ((inclusion 2).op ‚ãô X)) :=
  RightExtension.IsPointwiseRightKanExtension.isRightKanExtension
    (isPointwiseRightKanExtension X)

/-- When `X` is `StrictSegal`, `X` is 2-coskeletal. -/
instance isCoskeletal : SimplicialObject.IsCoskeletal X 2 where
  isRightKanExtension := isRightKanExtension X

end StrictSegal

end

end SSet

namespace CategoryTheory

namespace Nerve

open SSet

example (C : Type u) [Category.{v} C] :
    SimplicialObject.IsCoskeletal (nerve C) 2 := by infer_instance

/-- The essential data of the nerve functor is contained in the 2-truncation, which is
recorded by the composite functor `nerveFunctor‚ÇÇ`.-/
def nerveFunctor‚ÇÇ : Cat.{v, u} ‚•§ SSet.Truncated 2 := nerveFunctor ‚ãô truncation 2

/-- The natural isomorphism between `nerveFunctor` and `nerveFunctor‚ÇÇ ‚ãô Truncated.cosk 2` whose
components `nerve C ‚âÖ (Truncated.cosk 2).obj (nerveFunctor‚ÇÇ.obj C)` shows that nerves of categories
are 2-coskeletal.-/
noncomputable def cosk‚ÇÇIso : nerveFunctor.{v, u} ‚âÖ nerveFunctor‚ÇÇ.{v, u} ‚ãô Truncated.cosk 2 :=
  NatIso.ofComponents (fun C ‚Ü¶ (nerve C).isoCoskOfIsCoskeletal 2)
    (fun _ ‚Ü¶ (coskAdj 2).unit.naturality _)

end Nerve

end CategoryTheory
