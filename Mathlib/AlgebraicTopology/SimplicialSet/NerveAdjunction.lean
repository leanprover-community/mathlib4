/-
Copyright (c) 2024 Mario Carneiro and Emily Riehl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mario Carneiro, Emily Riehl, Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.SimplicialSet.HomotopyCat
import Mathlib.AlgebraicTopology.SimplexCategory.MorphismProperty
import Mathlib.CategoryTheory.MorphismProperty.Composition

/-!

# The adjunction between the nerve and the homotopy category functor.

We define an adjunction `nerveAdjunction : hoFunctor ‚ä£ nerveFunctor` between the functor that
takes a simplicial set to its homotopy category and the functor that takes a category to its nerve.

Up to natural isomorphism, this is constructed as the composite of two other adjunctions,
namely `nerve‚ÇÇAdj : hoFunctor‚ÇÇ ‚ä£ nerveFunctor‚ÇÇ` between analogously-defined functors involving
the category of 2-truncated simplicial sets and `coskAdj 2 : truncation 2 ‚ä£ Truncated.cosk 2`. The
aforementioned natural isomorphism

`cosk‚ÇÇIso : nerveFunctor ‚âÖ nerveFunctor‚ÇÇ ‚ãô Truncated.cosk 2`

exists because nerves of categories are 2-coskeletal.

We also prove that `nerveFunctor` is fully faithful, demonstrating that `nerveAdjunction` is
reflective. Since the category of simplicial sets is cocomplete, we conclude in
`CategoryTheory.Category.Cat.Colimit` that the category of categories has colimits.

-/

namespace CategoryTheory

open Category Functor Limits Opposite SimplexCategory Simplicial SSet Nerve Truncated
universe v u

section

set_option quotPrecheck false
local macro:max (priority := high) "[" n:term "]‚ÇÇ" : term =>
  `((‚ü®SimplexCategory.mk $n, by decide‚ü© : SimplexCategory.Truncated 2))

local macro:1000 (priority := high) X:term " _[" n:term "]‚ÇÇ" : term =>
    `(($X : SSet.Truncated 2).obj (Opposite.op ‚ü®SimplexCategory.mk $n, by decide‚ü©))

/-- The components of the counit of `nerve‚ÇÇAdj`. -/
@[simps!]
def nerve‚ÇÇAdj.counit.app (C : Cat.{u, u}) :
    (nerveFunctor‚ÇÇ.obj C).HomotopyCategory ‚•§ C := by
  fapply Quotient.lift
  ¬∑ exact (whiskerRight (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso).hom _ ‚â´ ReflQuiv.adj.{u}.counit).app C
  ¬∑ intro x y f g rel
    cases rel; rename_i œÜ
    simp [ReflQuiv.adj, Quot.liftOn, Cat.FreeRefl.quotientFunctor, Quotient.functor,
      Quiv.adj, Quiv.id_eq_id]
    simp only [OneTruncation‚ÇÇ.nerveHomEquiv, Fin.isValue, OneTruncation‚ÇÇ.nerveEquiv_apply, op_obj,
      ComposableArrows.obj', Fin.zero_eta, Nat.reduceAdd, Equiv.coe_fn_mk, eqToHom_refl, comp_id,
      id_comp]
    exact œÜ.map_comp (X := (0 : Fin 3)) (Y := 1) (Z := 2)
      (homOfLE (by decide)) (homOfLE (by decide))

@[simp]
theorem nerve‚ÇÇAdj.counit.app_eq (C : Cat) :
    SSet.Truncated.HomotopyCategory.quotientFunctor (nerveFunctor‚ÇÇ.obj C) ‚ãô
      nerve‚ÇÇAdj.counit.app.{u} C =
    (whiskerRight OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.hom _ ‚â´
      ReflQuiv.adj.{u}.counit).app C := rfl

/-- Naturality of `nerve‚ÇÇAdj.counit.app` is proven using `HomotopyCategory.lift_unique'`. -/
theorem nerve‚ÇÇAdj.counit.naturality ‚¶ÉC D : Cat.{u, u}‚¶Ñ (F : C ‚ü∂ D) :
    (nerveFunctor‚ÇÇ ‚ãô hoFunctor‚ÇÇ).map F ‚ãô nerve‚ÇÇAdj.counit.app D =
      nerve‚ÇÇAdj.counit.app C ‚ãô F := by
  apply HomotopyCategory.lift_unique'
  have := hoFunctor‚ÇÇ_naturality (nerveFunctor‚ÇÇ.map F)
  conv => lhs; rw [‚Üê Functor.assoc]; lhs; apply this.symm
  simp only [Cat.freeRefl_obj_Œ±, ReflQuiv.of_val, comp_obj, Functor.comp_map]
  rw [‚Üê Functor.assoc _ _ F]
  conv => rhs; lhs; exact (nerve‚ÇÇAdj.counit.app_eq C)
  conv => rhs; exact ((whiskerRight OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.hom Cat.freeRefl ‚â´
    ReflQuiv.adj.counit).naturality F).symm
  simp only [app, Cat.comp_eq_comp, Functor.comp_map, Functor.assoc,
    SSet.Truncated.HomotopyCategory.quotientFunctor]
  rw [Quotient.lift_spec]

/-- The counit of `nerve‚ÇÇAdj.` -/
def nerve‚ÇÇAdj.counit : nerveFunctor‚ÇÇ ‚ãô hoFunctor‚ÇÇ.{u} ‚ü∂ (ùü≠ Cat) where
  app := nerve‚ÇÇAdj.counit.app
  naturality := nerve‚ÇÇAdj.counit.naturality

local notation (priority := high) "[" n "]" => SimplexCategory.mk n

/-- Because nerves are 2-coskeletal, the components of a map of 2-truncated simplicial sets valued
in a nerve can be recovered from the underlying ReflPrefunctor. -/
def toNerve‚ÇÇ.mk.app {X : SSet.Truncated 2} {C : Cat}
    (F : SSet.oneTruncation‚ÇÇ.obj X ‚ü∂ ReflQuiv.of C)
    (n : SimplexCategory.Truncated 2) :
    X.obj (op n) ‚ü∂ (nerveFunctor‚ÇÇ.obj C).obj (op n) := by
  obtain ‚ü®n, hn‚ü© := n
  induction' n using SimplexCategory.rec with n
  match n with
  | 0 => exact fun x => .mk‚ÇÄ (F.obj x)
  | 1 => exact fun f => .mk‚ÇÅ (F.map ‚ü®f, rfl, rfl‚ü©)
  | 2 => exact fun œÜ => .mk‚ÇÇ (F.map (ev01‚ÇÇ œÜ)) (F.map (ev12‚ÇÇ œÜ))

@[simp] theorem toNerve‚ÇÇ.mk.app_zero {X : SSet.Truncated 2} {C : Cat}
    (F : SSet.oneTruncation‚ÇÇ.obj X ‚ü∂ ReflQuiv.of C) (x : X _[0]‚ÇÇ) :
    mk.app F [0]‚ÇÇ x = .mk‚ÇÄ (F.obj x) := rfl

@[simp] theorem toNerve‚ÇÇ.mk.app_one {X : SSet.Truncated 2} {C : Cat}
    (F : SSet.oneTruncation‚ÇÇ.obj X ‚ü∂ ReflQuiv.of C) (f : X _[1]‚ÇÇ) :
    mk.app F [1]‚ÇÇ f = .mk‚ÇÅ (F.map ‚ü®f, rfl, rfl‚ü©) := rfl

@[simp] theorem toNerve‚ÇÇ.mk.app_two {X : SSet.Truncated 2} {C : Cat}
    (F : SSet.oneTruncation‚ÇÇ.obj X ‚ü∂ ReflQuiv.of C) (œÜ : X _[2]‚ÇÇ) :
    mk.app F [2]‚ÇÇ œÜ = .mk‚ÇÇ (F.map (ev01‚ÇÇ œÜ)) (F.map (ev12‚ÇÇ œÜ)) := rfl

/-- This is similar to one of the famous Segal maps, except valued in a product rather than a
pullback.-/
noncomputable def nerve‚ÇÇ.seagull (C : Cat.{v, u}) :
    (nerveFunctor‚ÇÇ.obj C).obj (op [2]‚ÇÇ) ‚ü∂
    (nerveFunctor‚ÇÇ.obj C).obj (op [1]‚ÇÇ) ‚®Ø (nerveFunctor‚ÇÇ.obj C).obj (op [1]‚ÇÇ) :=
  prod.lift ((nerveFunctor‚ÇÇ.obj C).map (.op Œ¥2‚ÇÇ)) ((nerveFunctor‚ÇÇ.obj C).map (.op Œ¥0‚ÇÇ))

instance (C : Cat) : Mono (nerve‚ÇÇ.seagull C) where
  right_cancellation {X} (f g : X ‚Üí ComposableArrows C 2) eq := by
    ext x
    simp [nerve‚ÇÇ.seagull] at eq
    have eq1 := congr($eq ‚â´ prod.fst)
    have eq2 := congr($eq ‚â´ prod.snd)
    simp at eq1 eq2
    replace eq1 := congr_fun eq1 x
    replace eq2 := congr_fun eq2 x
    simp at eq1 eq2
    generalize f x = fx at *
    generalize g x = gx at *
    fapply ComposableArrows.ext‚ÇÇ
    ¬∑ exact congrArg (¬∑.obj 0) <| eq1
    ¬∑ exact congrArg (¬∑.obj 1) <| eq1
    ¬∑ exact congrArg (¬∑.obj 1) <| eq2
    ¬∑ exact (conj_eqToHom_iff_heq' _ _ _ _).2 (congr_arg_heq (¬∑.hom) <| eq1)
    ¬∑ exact (conj_eqToHom_iff_heq' _ _ _ _).2 (congr_arg_heq (¬∑.hom) <| eq2)

-- Truncated.morphismProperty_eq_top
theorem toNerve‚ÇÇ.mk_naturality {X : SSet.Truncated.{u} 2} {C : Cat}
    (F : SSet.oneTruncation‚ÇÇ.obj X ‚ü∂ ReflQuiv.of C)
    (hyp : (œÜ : X _[2]‚ÇÇ) ‚Üí
      F.map (ev02‚ÇÇ œÜ) =
        CategoryStruct.comp (obj := C) (F.map (ev01‚ÇÇ œÜ)) (F.map (ev12‚ÇÇ œÜ))) :
    (MorphismProperty.naturalityProperty (fun n => toNerve‚ÇÇ.mk.app F n.unop)).unop = ‚ä§ := by
  set OK := (MorphismProperty.naturalityProperty (fun n => toNerve‚ÇÇ.mk.app F n.unop)).unop
  have const10 (Œ± : [1]‚ÇÇ ‚ü∂ [0]‚ÇÇ) : OK Œ± := by
    ext x
    cases SimplexCategory.eq_const_to_zero Œ±
    dsimp
    fapply ComposableArrows.ext‚ÇÅ
    ¬∑ simp only [ComposableArrows.mk‚ÇÅ_obj, ComposableArrows.Mk‚ÇÅ.obj]
      congr 1
      refine congr_fun (?_ : X.map _ ‚â´ X.map _ = ùüô _) x
      rw [‚Üê map_comp, ‚Üê map_id]; congr 1
      apply Quiver.Hom.unop_inj
      apply SimplexCategory.hom_zero_zero
    ¬∑ simp only [ComposableArrows.mk‚ÇÅ_obj, ComposableArrows.Mk‚ÇÅ.obj]
      congr 1
      refine congr_fun (?_ : X.map _ ‚â´ X.map _ = ùüô _) x
      rw [‚Üê map_comp, ‚Üê map_id]; congr 1
      apply Quiver.Hom.unop_inj
      apply SimplexCategory.hom_zero_zero
    ¬∑ refine eq_of_heq <|
        (?_ : HEq _ (ComposableArrows.mk‚ÇÅ (C := C) (ùüôrq (F.obj x))).hom).trans ?_
      ¬∑ have : ‚àÄ x' a b (h1 : X.map (Œ¥‚ÇÇ 1).op x' = a) (h2 : X.map (Œ¥‚ÇÇ 0).op x' = b),
          x = a ‚Üí x = b ‚Üí x' = X.map (œÉ‚ÇÇ (n := 0) 0).op x ‚Üí
          HEq (ComposableArrows.mk‚ÇÅ (C := C) (F.map ‚ü®x', h1, h2‚ü©)).hom
            (ComposableArrows.mk‚ÇÅ (C := C) (ùüôrq (F.obj x))).hom := by
          rintro _ _ _ _ _ rfl rfl rfl
          exact congr_arg_heq (fun a => (ComposableArrows.mk‚ÇÅ (C := C) a).hom) (F.map_id x)
        apply this
        ¬∑ simp only [SimplexCategory.len_mk]
          refine congr_fun (?_ : X.map _ ‚â´ X.map _ = ùüô _).symm x
          rw [‚Üê map_comp, ‚Üê map_id]; congr 1
          exact Quiver.Hom.unop_inj (SimplexCategory.hom_zero_zero _)
        ¬∑ simp only [SimplexCategory.len_mk]
          refine congr_fun (?_ : X.map _ ‚â´ X.map _ = ùüô _).symm x
          rw [‚Üê map_comp, ‚Üê map_id]; congr 1
          exact Quiver.Hom.unop_inj (SimplexCategory.hom_zero_zero _)
        ¬∑ rw [‚Üê eq_const_to_zero]
      ¬∑ simp; rfl
  have const01 (Œ± : [0]‚ÇÇ ‚ü∂ [1]‚ÇÇ) : OK Œ± := by
    ext x
    apply ComposableArrows.ext‚ÇÄ
    simp only [SimplexCategory.len_mk]
    obtain ‚ü®i : Fin 2, rfl‚ü© := exists_eq_const_of_zero Œ±
    match i with
    | 0 =>
      revert x; intro f
      refine congrArg F.obj ?_
      refine eq_of_heq (congr_arg_heq (fun x => X.map (op x) f) (?_ : [0].const [1] 0 = Œ¥‚ÇÇ 1))
      ext i; match i with | 0 => rfl
    | 1 =>
      revert x; intro f
      refine congrArg F.obj ?_
      refine eq_of_heq (congr_arg_heq (fun x => X.map (op x) f) (?_ : [0].const [1] 1 = Œ¥‚ÇÇ 0))
      ext i; match i with | 0 => rfl
  have fac : ‚àÄ {n m hn hm} {Œ± : (‚ü®[n], hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[m], hm‚ü©} k hk
      {Œ≤ : (‚ü®[n], hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[k], hk‚ü©}
      {Œ≥ : (‚ü®[k], hk‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[m], hm‚ü©},
      Œ± = Œ≤ ‚â´ Œ≥ ‚Üí OK Œ≤ ‚Üí OK Œ≥ ‚Üí OK Œ± := by
    rintro _ _ _ _ _ k hk Œ≤ Œ≥ rfl h1 h2
    dsimp only [OK, MorphismProperty.naturalityProperty, MorphismProperty.unop] at h1 h2 ‚ä¢
    rw [op_comp, map_comp, map_comp, assoc, h1, ‚Üê assoc, h2, assoc]
  have const02 (Œ± : [0]‚ÇÇ ‚ü∂ [2]‚ÇÇ) : OK Œ± := by
    ext x
    apply ComposableArrows.ext‚ÇÄ
    obtain ‚ü®i : Fin 3, rfl‚ü© := exists_eq_const_of_zero Œ±
    match i with
    | 0 =>
      revert x; intro f
      refine congrArg F.obj (?_ : _ = X.map _ _)
      refine eq_of_heq (congr_arg_heq (fun x => X.map (op x) f) (?_ : [0].const [2] 0 = Œπ0‚ÇÇ))
      ext i; match i with | 0 => rfl
    | 1 =>
      revert x; intro f
      refine congrArg F.obj ?_
      refine eq_of_heq (congr_arg_heq (fun x => X.map (op x) f) (?_ : [0].const [2] 1 = Œπ1‚ÇÇ))
      ext i; match i with | 0 => rfl
    | 2 =>
      revert x; intro f
      refine congrArg F.obj ?_
      refine eq_of_heq (congr_arg_heq (fun x => X.map (op x) f) (?_ : [0].const [2] 2 = Œπ2‚ÇÇ))
      ext i; match i with | 0 => rfl
  have nat1m {m hm} (Œ± : [1]‚ÇÇ ‚ü∂ ‚ü®[m], hm‚ü©) : OK Œ± := by
    match m with
    | 0 => apply const10
    | 1 =>
      match Œ±, eq_of_one_to_one Œ± with
      | _, .inr rfl =>
        dsimp [OK, MorphismProperty.naturalityProperty]
        rw [(_ : X.map _ = id), (_ : Prefunctor.map _ _ = id)]; rfl
        all_goals apply map_id
      | _, .inl ‚ü®i, rfl‚ü© =>
        exact fac 0 (by decide) (const_fac_thru_zero ..) (const10 ..) (const01 ..)
    | 2 =>
      match Œ±, eq_of_one_to_two Œ± with
      | _, .inl rfl =>
        ext x
        simp only [types_comp_apply, mk.app_two, ComposableArrows.mk‚ÇÇ]
        fapply ComposableArrows.ext‚ÇÅ
        ¬∑ simp only [mk.app_one, ComposableArrows.mk‚ÇÅ_obj, ComposableArrows.Mk‚ÇÅ.obj]
          congr 1
          refine congr_fun (?_ : X.map _ ‚â´ X.map _ = _) x
          rw [‚Üê map_comp, ‚Üê op_comp]; congr 2
          ext ‚ü®i, hi‚ü©; match i with | 0 => rfl
        ¬∑ simp only [mk.app_one, ComposableArrows.mk‚ÇÅ_obj, ComposableArrows.Mk‚ÇÅ.obj]
          congr 1
          refine congr_fun (?_ : X.map _ ‚â´ X.map _ = _) x
          rw [‚Üê map_comp]; rfl
        ¬∑ clear fac const01 const10 const02 OK
          dsimp only [nerveFunctor‚ÇÇ, SimplicialObject.truncation,
            SSet.truncation, comp_obj, nerveFunctor_obj,
            whiskeringLeft_obj_obj, Functor.comp_map, nerve_map,
            ComposableArrows.whiskerLeft_map, ComposableArrows.precomp_map]
          show _ = _ ‚â´ ComposableArrows.Precomp.map _ _ ‚ü®1, _‚ü© ‚ü®2, _‚ü© _ ‚â´ _
          rw [ComposableArrows.Precomp.map]; dsimp
          apply (conj_eqToHom_iff_heq' ..).2
          dsimp only [Fin.isValue, Nat.reduceAdd, Œ¥‚ÇÇ, ev1‚ÇÇ, homOfLE_leOfHom]
          have : ‚àÄ {A B A' B' : OneTruncation‚ÇÇ X} (x‚ÇÅ : A ‚ü∂ B) (x‚ÇÇ : A' ‚ü∂ B'),
              A = A' ‚Üí B = B' ‚Üí x‚ÇÅ.1 = x‚ÇÇ.1 ‚Üí HEq (F.map x‚ÇÅ) (F.map x‚ÇÇ) := by
              rintro _ _ _ _ ‚ü®‚ü© ‚ü®‚ü© rfl rfl ‚ü®‚ü©; rfl
          apply this
          ¬∑ refine congr_fun (?_ : X.map _ ‚â´ X.map _ = _) x
            rw [‚Üê map_comp, ‚Üê op_comp]; congr 2
            ext (i : Fin 1); match i with | 0 => rfl
          ¬∑ refine congr_fun (?_ : X.map _ ‚â´ X.map _ = _) x
            rw [‚Üê map_comp]; rfl
          ¬∑ rfl
      | _, .inr (.inl rfl) =>
        ext x
        simp only [types_comp_apply, mk.app_two, ComposableArrows.mk‚ÇÇ]
        fapply ComposableArrows.ext‚ÇÅ
        ¬∑ simp only [mk.app_one, ComposableArrows.mk‚ÇÅ_obj, ComposableArrows.Mk‚ÇÅ.obj]
          congr 1
          refine congr_fun (?_ : X.map _ ‚â´ X.map _ = _) x
          rw [‚Üê map_comp]; rfl
        ¬∑ simp only [mk.app_one, ComposableArrows.mk‚ÇÅ_obj, ComposableArrows.Mk‚ÇÅ.obj]
          congr 1
          refine congr_fun (?_ : X.map _ ‚â´ X.map _ = _) x
          rw [‚Üê map_comp]; rfl
        ¬∑ clear fac const01 const10 const02 OK
          dsimp only [nerveFunctor‚ÇÇ, SimplicialObject.truncation,
            SSet.truncation, comp_obj, nerveFunctor_obj,
            whiskeringLeft_obj_obj, Functor.comp_map, nerve_map,
            ComposableArrows.whiskerLeft_map, ComposableArrows.precomp_map]
          show _ = _ ‚â´ ComposableArrows.Precomp.map _ _ ‚ü®0, _‚ü© ‚ü®2, _‚ü© _ ‚â´ _
          rw [ComposableArrows.Precomp.map]; dsimp
          apply (conj_eqToHom_iff_heq' ..).2
          dsimp only [Fin.isValue, Nat.reduceAdd, Œ¥‚ÇÇ, ev1‚ÇÇ]
          have : ‚àÄ {A B A' B' : OneTruncation‚ÇÇ X} (x‚ÇÅ : A ‚ü∂ B) (x‚ÇÇ : A' ‚ü∂ B'),
              A = A' ‚Üí B = B' ‚Üí x‚ÇÅ.1 = x‚ÇÇ.1 ‚Üí HEq (F.map x‚ÇÅ) (F.map x‚ÇÇ) := by
              rintro _ _ _ _ ‚ü®‚ü© ‚ü®‚ü© rfl rfl ‚ü®‚ü©; rfl
          refine HEq.trans ?_ (heq_of_eq (hyp x))
          apply this
          ¬∑ refine congr_fun (?_ : X.map _ ‚â´ X.map _ = _) x
            rw [‚Üê map_comp]; rfl
          ¬∑ refine congr_fun (?_ : X.map _ ‚â´ X.map _ = _) x
            rw [‚Üê map_comp]; rfl
          ¬∑ rfl
      | _, .inr (.inr (.inl rfl)) =>
        ext x
        simp only [types_comp_apply, mk.app_two, ComposableArrows.mk‚ÇÇ]
        fapply ComposableArrows.ext‚ÇÅ
        ¬∑ simp only [mk.app_one, ComposableArrows.mk‚ÇÅ_obj, ComposableArrows.Mk‚ÇÅ.obj]
          congr 1
          refine congr_fun (?_ : X.map _ ‚â´ X.map _ = _) x
          rw [‚Üê map_comp, ‚Üê op_comp]; congr 2
          ext ‚ü®i, hi‚ü©; match i with | 0 => rfl
        ¬∑ simp only [mk.app_one, ComposableArrows.mk‚ÇÅ_obj, ComposableArrows.Mk‚ÇÅ.obj]
          congr 1
          refine congr_fun (?_ : X.map _ ‚â´ X.map _ = _) x
          rw [‚Üê map_comp]; rfl
        ¬∑ clear fac const01 const10 const02 OK
          dsimp only [nerveFunctor‚ÇÇ, SimplicialObject.truncation,
            SSet.truncation, comp_obj, nerveFunctor_obj,
            whiskeringLeft_obj_obj, Functor.comp_map, nerve_map,
            ComposableArrows.whiskerLeft_map, ComposableArrows.precomp_map]
          show _ = _ ‚â´ ComposableArrows.Precomp.map _ _ ‚ü®0, _‚ü© ‚ü®1, _‚ü© _ ‚â´ _
          rw [ComposableArrows.Precomp.map]; dsimp
          apply (conj_eqToHom_iff_heq' ..).2
          dsimp only [Fin.isValue, Nat.reduceAdd, Œ¥‚ÇÇ, ev1‚ÇÇ]
          have : ‚àÄ {A B A' B' : OneTruncation‚ÇÇ X} (x‚ÇÅ : A ‚ü∂ B) (x‚ÇÇ : A' ‚ü∂ B'),
              A = A' ‚Üí B = B' ‚Üí x‚ÇÅ.1 = x‚ÇÇ.1 ‚Üí HEq (F.map x‚ÇÅ) (F.map x‚ÇÇ) := by
              rintro _ _ _ _ ‚ü®‚ü© ‚ü®‚ü© rfl rfl ‚ü®‚ü©; rfl
          apply this
          ¬∑ refine congr_fun (?_ : X.map _ ‚â´ X.map _ = _) x
            rw [‚Üê map_comp, ‚Üê op_comp]; congr 2
            ext (i : Fin 1); match i with | 0 => rfl
          ¬∑ refine congr_fun (?_ : X.map _ ‚â´ X.map _ = _) x
            rw [‚Üê map_comp]; rfl
          ¬∑ rfl
      | _, .inr (.inr (.inr ‚ü®i, rfl‚ü©)) =>
        exact fac 0 (by decide) (const_fac_thru_zero ..) (const10 ..) (const02 ..)
  have nat2m {m hm} (Œ± : [2]‚ÇÇ ‚ü∂ ‚ü®[m], hm‚ü©) : OK Œ± := by
    dsimp [OK]
    apply (cancel_mono (nerve‚ÇÇ.seagull _)).1
    simp [nerve‚ÇÇ.seagull]
    congr 1 <;> rw [‚Üê map_comp, ‚Üê op_comp, ‚Üê nat1m, ‚Üê nat1m, op_comp, map_comp, assoc]
  exact Truncated.morphismProperty_eq_top OK
    (fun | 0, _, _ => const01 _ | 1, _, _ => nat1m _)
    (fun | 0, _, _ => const10 _ | 1, _, _ => nat2m _)

/-- Because nerves are 2-coskeletal, a map of 2-truncated simplicial sets valued in a nerve can be
recovered from the underlying ReflPrefunctor. -/
@[simps!]
def toNerve‚ÇÇ.mk {X : SSet.Truncated.{u} 2} {C : Cat}
    (F : SSet.oneTruncation‚ÇÇ.obj X ‚ü∂ ReflQuiv.of C)
    (hyp : (œÜ : X _[2]‚ÇÇ) ‚Üí
      F.map (ev02‚ÇÇ œÜ) =
        CategoryStruct.comp (obj := C) (F.map (ev01‚ÇÇ œÜ)) (F.map (ev12‚ÇÇ œÜ))) :
    X ‚ü∂ nerveFunctor‚ÇÇ.obj C where
  app := fun n => toNerve‚ÇÇ.mk.app F n.unop
  naturality _ _ f := MorphismProperty.of_eq_top (toNerve‚ÇÇ.mk_naturality F hyp) f.unop

/-- We might prefer this version where we are using the analogue of the hypothesis hyp
conjugated by the isomorphism nerve‚ÇÇAdj.NatIso.app C -/
@[simps!] def toNerve‚ÇÇ.mk' {X : SSet.Truncated.{u} 2} {C : Cat}
    (f : SSet.oneTruncation‚ÇÇ.obj X ‚ü∂ SSet.oneTruncation‚ÇÇ.obj (nerveFunctor‚ÇÇ.obj C))
    (hyp : (œÜ : X _[2]‚ÇÇ) ‚Üí
      (f ‚â´ (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.app C).hom).map (ev02‚ÇÇ œÜ)
      = CategoryStruct.comp (obj := C)
        ((f ‚â´ (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.app C).hom).map (ev01‚ÇÇ œÜ))
        ((f ‚â´ (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.app C).hom).map (ev12‚ÇÇ œÜ)))
    : X ‚ü∂ nerveFunctor‚ÇÇ.obj C :=
  toNerve‚ÇÇ.mk (f ‚â´ (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.app C).hom) hyp

/-- A computation about `toNerve‚ÇÇ.mk'`. -/
theorem oneTruncation‚ÇÇ_toNerve‚ÇÇMk' {X : SSet.Truncated 2} {C : Cat}
    (f : SSet.oneTruncation‚ÇÇ.obj X ‚ü∂ SSet.oneTruncation‚ÇÇ.obj (nerveFunctor‚ÇÇ.obj C))
    (hyp : (œÜ : X _[2]‚ÇÇ) ‚Üí
      (f ‚â´ (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.app C).hom).map (ev02‚ÇÇ œÜ)
      = CategoryStruct.comp (obj := C)
        ((f ‚â´ (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.app C).hom).map (ev01‚ÇÇ œÜ))
        ((f ‚â´ (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.app C).hom).map (ev12‚ÇÇ œÜ))) :
    oneTruncation‚ÇÇ.map (toNerve‚ÇÇ.mk' f hyp) = f := by
  refine ReflPrefunctor.ext (fun _ ‚Ü¶ ComposableArrows.ext‚ÇÄ rfl)
    (fun X Y g ‚Ü¶ eq_of_heq (heq_eqRec_iff_heq.2 <| heq_eqRec_iff_heq.2 ?_))
  simp [oneTruncation‚ÇÇ]
  have {A B A' B' : OneTruncation‚ÇÇ (nerveFunctor‚ÇÇ.obj C)}
      : A = A' ‚Üí B = B' ‚Üí ‚àÄ (x : A ‚ü∂ B) (y : A' ‚ü∂ B'), x.1 = y.1 ‚Üí HEq x y := by
    rintro rfl rfl ‚ü®‚ü© ‚ü®‚ü© ‚ü®‚ü©; rfl
  apply this
  ¬∑ exact ComposableArrows.ext‚ÇÄ rfl
  ¬∑ exact ComposableArrows.ext‚ÇÄ rfl
  ¬∑ simp
    fapply ComposableArrows.ext‚ÇÅ <;> simp [ReflQuiv.comp_eq_comp]
    ¬∑ rw [g.src_eq]; exact congr_arg (¬∑.obj 0) (f.map g).src_eq.symm
    ¬∑ rw [g.tgt_eq]; exact congr_arg (¬∑.obj 1) (f.map g).tgt_eq.symm
    ¬∑ refine (conj_eqToHom_iff_heq' _ _ _ _).2 ?_
      simp [OneTruncation‚ÇÇ.nerveHomEquiv]
      obtain ‚ü®g, rfl, rfl‚ü© := g
      rfl

/-- Now do a case split. For n = 0 and n = 1 this is covered by the hypothesis.
         For n = 2 this is covered by the new lemma above.-/
theorem toNerve‚ÇÇ.ext {X : SSet.Truncated 2} {C : Cat} (f g : X ‚ü∂ nerveFunctor‚ÇÇ.obj C)
    (hyp : SSet.oneTruncation‚ÇÇ.map f = SSet.oneTruncation‚ÇÇ.map g) : f = g := by
  have eq‚ÇÄ x : f.app (op [0]‚ÇÇ) x = g.app (op [0]‚ÇÇ) x := congr(($hyp).obj x)
  have eq‚ÇÅ x : f.app (op [1]‚ÇÇ) x = g.app (op [1]‚ÇÇ) x := congr((($hyp).map ‚ü®x, rfl, rfl‚ü©).1)
  ext ‚ü®‚ü®n, hn‚ü©‚ü© x
  induction' n using SimplexCategory.rec with n
  match n with
  | 0 => apply eq‚ÇÄ
  | 1 => apply eq‚ÇÅ
  | 2 =>
    apply Functor.hext (fun i : Fin 3 => ?_) (fun (i j : Fin 3) k => ?_)
    ¬∑ let pt : [0]‚ÇÇ ‚ü∂ [2]‚ÇÇ := SimplexCategory.const _ _ i
      refine congr(($(congr_fun (f.naturality pt.op) x)).obj 0).symm.trans ?_
      refine .trans ?_ congr(($(congr_fun (g.naturality pt.op) x)).obj 0)
      exact congr($(eq‚ÇÄ _).obj 0)
    ¬∑ let ar : [1]‚ÇÇ ‚ü∂ [2]‚ÇÇ := mkOfLe _ _ k.le
      have h1 := congr_arg_heq (fun x => x.map' 0 1) (congr_fun (f.naturality (op ar)) x)
      have h2 := congr_arg_heq (fun x => x.map' 0 1) (congr_fun (g.naturality (op ar)) x)
      exact h1.symm.trans <| .trans (congr_arg_heq (fun x => x.map' 0 1) (eq‚ÇÅ _)) h2

/-- ER: This is dumb. -/
theorem toNerve‚ÇÇ.ext' {X : SSet.Truncated 2} {C : Cat} (f g : X ‚ü∂ nerveFunctor‚ÇÇ.obj C)
    (hyp : SSet.oneTruncation‚ÇÇ.map f = SSet.oneTruncation‚ÇÇ.map g) : f = g := by
  let f' : X ‚ü∂ nerveFunctor‚ÇÇ.obj C := f
  let g' : X ‚ü∂ nerveFunctor‚ÇÇ.obj C := g
  exact toNerve‚ÇÇ.ext f' g' hyp

end
end CategoryTheory
