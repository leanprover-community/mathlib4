/-
Copyright (c) 2024 Mario Carneiro and Emily Riehl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mario Carneiro, Emily Riehl, Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.SimplicialSet.HomotopyCat
import Mathlib.AlgebraicTopology.SimplexCategory.MorphismProperty
import Mathlib.CategoryTheory.MorphismProperty.Composition

/-!

# The adjunction between the nerve and the homotopy category functor.

We define an adjunction `nerveAdjunction : hoFunctor ‚ä£ nerveFunctor` between the functor that
takes a simplicial set to its homotopy category and the functor that takes a category to its nerve.

Up to natural isomorphism, this is constructed as the composite of two other adjunctions,
namely `nerve‚ÇÇAdj : hoFunctor‚ÇÇ ‚ä£ nerveFunctor‚ÇÇ` between analogously-defined functors involving
the category of 2-truncated simplicial sets and `coskAdj 2 : truncation 2 ‚ä£ Truncated.cosk 2`. The
aforementioned natural isomorphism

`cosk‚ÇÇIso : nerveFunctor ‚âÖ nerveFunctor‚ÇÇ ‚ãô Truncated.cosk 2`

exists because nerves of categories are 2-coskeletal.

We also prove that `nerveFunctor` is fully faithful, demonstrating that `nerveAdjunction` is
reflective. Since the category of simplicial sets is cocomplete, we conclude in
`CategoryTheory.Category.Cat.Colimit` that the category of categories has colimits.

-/

namespace CategoryTheory

open Category Functor Limits Opposite SimplexCategory Simplicial SSet Nerve Truncated
universe v u v' u'

section

set_option quotPrecheck false
local macro:max (priority := high) "‚¶ã" n:term "‚¶å‚ÇÇ" : term =>
  `((‚ü®SimplexCategory.mk $n, by decide‚ü© : SimplexCategory.Truncated 2))

local macro:1000 (priority := high) X:term " _‚¶ã" n:term "‚¶å‚ÇÇ" : term =>
    `(($X : SSet.Truncated 2).obj (Opposite.op ‚ü®SimplexCategory.mk $n, by decide‚ü©))

/-- The components of the counit of `nerve‚ÇÇAdj`. -/
@[simps!]
def nerve‚ÇÇAdj.counit.app (C : Type u) [SmallCategory C] :
    (nerveFunctor‚ÇÇ.obj (Cat.of C)).HomotopyCategory ‚•§ C := by
  fapply Quotient.lift
  ¬∑ exact
      (whiskerRight (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso).hom _ ‚â´ ReflQuiv.adj.{u}.counit).app (Cat.of C)
  ¬∑ intro x y f g rel
    obtain ‚ü®œÜ‚ü© := rel
    simpa [ReflQuiv.adj, Quot.liftOn, Cat.FreeRefl.quotientFunctor, Quotient.functor,
        Quiv.adj, OneTruncation‚ÇÇ.nerveHomEquiv] using
      œÜ.map_comp (X := 0) (Y := 1) (Z := 2) (homOfLE (by decide)) (homOfLE (by decide))

@[simp]
theorem nerve‚ÇÇAdj.counit.app_eq (C : Type u) [SmallCategory C] :
    SSet.Truncated.HomotopyCategory.quotientFunctor (nerveFunctor‚ÇÇ.obj (Cat.of C)) ‚ãô
      nerve‚ÇÇAdj.counit.app.{u} C =
    (whiskerRight OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.hom _ ‚â´
      ReflQuiv.adj.{u}.counit).app (Cat.of C) := rfl

/-- The naturality of `nerve‚ÇÇAdj.counit.app`. -/
theorem nerve‚ÇÇAdj.counit.naturality {C D : Type u} [SmallCategory C] [SmallCategory D]
    (F : C ‚•§ D) :
    (nerveFunctor‚ÇÇ ‚ãô hoFunctor‚ÇÇ).map F ‚ãô nerve‚ÇÇAdj.counit.app D =
      nerve‚ÇÇAdj.counit.app C ‚ãô F := by
  apply HomotopyCategory.lift_unique'
  change ((oneTruncation‚ÇÇ ‚ãô Cat.freeRefl).map (nerveFunctor‚ÇÇ.map _)) ‚ãô
    HomotopyCategory.quotientFunctor (nerveFunctor‚ÇÇ.obj (Cat.of D)) ‚ãô app D = _
  rw [nerve‚ÇÇAdj.counit.app_eq D]
  rw [‚Üê Functor.assoc _ _ F, nerve‚ÇÇAdj.counit.app_eq C]
  exact (whiskerRight OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.{u}.hom Cat.freeRefl ‚â´
    ReflQuiv.adj.counit).naturality _

/-- The counit of `nerve‚ÇÇAdj.` -/
def nerve‚ÇÇAdj.counit : nerveFunctor‚ÇÇ ‚ãô hoFunctor‚ÇÇ.{u} ‚ü∂ ùü≠ Cat where
  app C := nerve‚ÇÇAdj.counit.app (Cat.of C)
  naturality _ _ F := nerve‚ÇÇAdj.counit.naturality F

local notation (priority := high) "[" n "]" => SimplexCategory.mk n

variable {C : Type u} [SmallCategory C] {X : SSet.Truncated.{u} 2}
    (F : SSet.oneTruncation‚ÇÇ.obj X ‚ü∂ ReflQuiv.of C)

/-- Because nerves are 2-coskeletal, the components of a map of 2-truncated simplicial sets valued
in a nerve can be recovered from the underlying ReflPrefunctor. -/
def toNerve‚ÇÇ.mk.app (n : SimplexCategory.Truncated 2) :
    X.obj (op n) ‚ü∂ (nerveFunctor‚ÇÇ.obj (Cat.of C)).obj (op n) := by
  obtain ‚ü®n, hn‚ü© := n
  induction' n using SimplexCategory.rec with n
  match n with
  | 0 => exact fun x => .mk‚ÇÄ (F.obj x)
  | 1 => exact fun f => .mk‚ÇÅ (F.map ‚ü®f, rfl, rfl‚ü©)
  | 2 => exact fun œÜ => .mk‚ÇÇ (F.map (ev01‚ÇÇ œÜ)) (F.map (ev12‚ÇÇ œÜ))

@[simp] theorem toNerve‚ÇÇ.mk.app_zero (x : X _‚¶ã0‚¶å‚ÇÇ) : mk.app F ‚¶ã0‚¶å‚ÇÇ x = .mk‚ÇÄ (F.obj x) := rfl

@[simp] theorem toNerve‚ÇÇ.mk.app_one (f : X _‚¶ã1‚¶å‚ÇÇ) :
    mk.app F ‚¶ã1‚¶å‚ÇÇ f = .mk‚ÇÅ (F.map ‚ü®f, rfl, rfl‚ü©) := rfl

@[simp] theorem toNerve‚ÇÇ.mk.app_two (œÜ : X _‚¶ã2‚¶å‚ÇÇ) :
    mk.app F ‚¶ã2‚¶å‚ÇÇ œÜ = .mk‚ÇÇ (F.map (ev01‚ÇÇ œÜ)) (F.map (ev12‚ÇÇ œÜ)) := rfl

/-- This is similar to one of the famous Segal maps, except valued in a product rather than a
pullback.-/
noncomputable def nerve‚ÇÇ.seagull (C : Type u) [Category C] :
    (nerveFunctor‚ÇÇ.obj (Cat.of C)).obj (op ‚¶ã2‚¶å‚ÇÇ) ‚ü∂
    (nerveFunctor‚ÇÇ.obj (Cat.of C)).obj (op ‚¶ã1‚¶å‚ÇÇ) ‚®Ø (nerveFunctor‚ÇÇ.obj (Cat.of C)).obj (op ‚¶ã1‚¶å‚ÇÇ) :=
  prod.lift
    ((nerveFunctor‚ÇÇ.obj (Cat.of C)).map (.op Œ¥2‚ÇÇ)) ((nerveFunctor‚ÇÇ.obj (Cat.of C)).map (.op Œ¥0‚ÇÇ))

instance (C : Type u) [Category C] : Mono (nerve‚ÇÇ.seagull C) where
  right_cancellation {X} (f g : X ‚Üí ComposableArrows C 2) eq := by
    ext x
    simp [nerve‚ÇÇ.seagull] at eq
    have eq1 := congr($eq ‚â´ prod.fst)
    have eq2 := congr($eq ‚â´ prod.snd)
    simp only [limit.lift_œÄ, BinaryFan.mk_fst, BinaryFan.mk_snd] at eq1 eq2
    replace eq1 := congr_fun eq1 x
    replace eq2 := congr_fun eq2 x
    simp only [types_comp_apply] at eq1 eq2
    generalize f x = fx at *
    generalize g x = gx at *
    fapply ComposableArrows.ext‚ÇÇ
    ¬∑ exact congrArg (¬∑.obj 0) <| eq1
    ¬∑ exact congrArg (¬∑.obj 1) <| eq1
    ¬∑ exact congrArg (¬∑.obj 1) <| eq2
    ¬∑ exact (conj_eqToHom_iff_heq' _ _ _ _).2 (congr_arg_heq (¬∑.hom) <| eq1)
    ¬∑ exact (conj_eqToHom_iff_heq' _ _ _ _).2 (congr_arg_heq (¬∑.hom) <| eq2)

/-- Naturality of the components defined by `toNerve‚ÇÇ.mk.app` as a morphism property of
maps in `SimplexCategory.Truncated 2`. -/
abbrev toNerve‚ÇÇ.mk.naturalityProperty : MorphismProperty (SimplexCategory.Truncated 2) :=
  (MorphismProperty.naturalityProperty (fun n => toNerve‚ÇÇ.mk.app F n.unop)).unop

lemma ReflPrefunctor.congr_mk‚ÇÅ_map
    {Y : Type u'} [ReflQuiver.{v'} Y] {C : Type u} [Category.{v} C]
    (F : ReflPrefunctor Y (ReflQuiv.of C))
    {x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ : Y} (f : x‚ÇÅ ‚ü∂ y‚ÇÅ) (g : x‚ÇÇ ‚ü∂ y‚ÇÇ)
    (hx : x‚ÇÅ = x‚ÇÇ) (hy : y‚ÇÅ = y‚ÇÇ) (hfg : Quiver.homOfEq f hx hy = g) :
    ComposableArrows.mk‚ÇÅ (C := C) (F.map f) = ComposableArrows.mk‚ÇÅ (C := C) (F.map g) := by
  subst hx hy hfg; rfl

lemma toNerve‚ÇÇ.mk_naturality_œÉ00 : toNerve‚ÇÇ.mk.naturalityProperty F (œÉ‚ÇÇ (n := 0) 0) := by
  ext x
  refine Eq.trans ?_ (nerve.œÉ‚ÇÄ_mk‚ÇÄ_eq (C := C) (F.obj x)).symm
  have := ReflPrefunctor.map_id F x
  dsimp at this ‚ä¢
  rw [‚Üê this, ‚Üê OneTruncation‚ÇÇ.id_edge x]
  fapply ReflPrefunctor.congr_mk‚ÇÅ_map
  ¬∑ simp [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
  ¬∑ simp [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
  ¬∑ aesop

lemma toNerve‚ÇÇ.mk_naturality_Œ¥0i (i : Fin 2) : toNerve‚ÇÇ.mk.naturalityProperty F (Œ¥‚ÇÇ i) := by
  ext x
  apply ComposableArrows.ext‚ÇÄ
  fin_cases i <;> rfl

section
variable
  (hyp : ‚àÄ œÜ, F.map (ev02‚ÇÇ œÜ) = CategoryStruct.comp (obj := C) (F.map (ev01‚ÇÇ œÜ)) (F.map (ev12‚ÇÇ œÜ)))
include hyp

lemma toNerve‚ÇÇ.mk_naturality_Œ¥1i (i : Fin 3) : toNerve‚ÇÇ.mk.naturalityProperty F (Œ¥‚ÇÇ i) := by
  ext x
  simp only [types_comp_apply, mk.app_two, ComposableArrows.mk‚ÇÇ]
  rw [toNerve‚ÇÇ.mk.app_one]
  unfold nerveFunctor‚ÇÇ truncation SimplicialObject.truncation
  simp only [comp_obj, nerveFunctor_obj, Cat.of_Œ±, whiskeringLeft_obj_obj, id_eq, op_obj,
    nerve_obj, oneTruncation‚ÇÇ_obj, ReflQuiv.of_val, Nat.reduceAdd, mk.app_two,
    Functor.comp_map, op_map, Quiver.Hom.unop_op]
  unfold Œ¥‚ÇÇ inclusion
  simp only [fullSubcategoryInclusion.map]
  fin_cases i
  ¬∑ simp only [Fin.zero_eta]
    show _ = (nerve C).Œ¥ 0 _
    rw [nerve.Œ¥‚ÇÄ_mk‚ÇÇ_eq]
    fapply ReflPrefunctor.congr_mk‚ÇÅ_map
    ¬∑ unfold ev1‚ÇÇ Œπ1‚ÇÇ Œ¥‚ÇÇ
      simp only [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
      have := Œ¥_comp_Œ¥ (n := 0) (i := 0) (j := 1) (by decide)
      dsimp at this
      exact congrFun (congrArg X.map (congrArg Quiver.Hom.op this.symm)) x
    ¬∑ unfold ev2‚ÇÇ Œπ2‚ÇÇ Œ¥‚ÇÇ
      simp only [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
      have := Œ¥_comp_Œ¥ (n := 0) (i := 0) (j := 0) (by decide)
      dsimp at this
      exact congrFun (congrArg X.map (congrArg Quiver.Hom.op this.symm)) x
    ¬∑ aesop
  ¬∑ simp only [Fin.mk_one]
    show _ = (nerve C).Œ¥ 1 _
    rw [nerve.Œ¥‚ÇÅ_mk‚ÇÇ_eq]
    rw [‚Üê hyp]
    fapply ReflPrefunctor.congr_mk‚ÇÅ_map
    ¬∑ unfold ev0‚ÇÇ Œπ0‚ÇÇ Œ¥‚ÇÇ
      simp [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
    ¬∑ unfold ev2‚ÇÇ Œπ2‚ÇÇ Œ¥‚ÇÇ
      simp [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
    ¬∑ aesop
  ¬∑ simp only [Fin.reduceFinMk]
    show _ = (nerve C).Œ¥ 2 _
    rw [nerve.Œ¥‚ÇÇ_mk‚ÇÇ_eq]
    fapply ReflPrefunctor.congr_mk‚ÇÅ_map
    ¬∑ unfold ev0‚ÇÇ Œπ0‚ÇÇ Œ¥‚ÇÇ
      simp only [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
      have := Œ¥_comp_Œ¥ (n := 0) (i := 1) (j := 1) (by decide)
      dsimp at this
      exact congrFun (congrArg X.map (congrArg Quiver.Hom.op this)) x
    ¬∑ unfold ev1‚ÇÇ Œπ1‚ÇÇ Œ¥‚ÇÇ
      simp [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
    ¬∑ aesop

lemma toNerve‚ÇÇ.mk_naturality_œÉ1i (i : Fin 2) : toNerve‚ÇÇ.mk.naturalityProperty F (œÉ‚ÇÇ i) := by
  apply (cancel_mono (nerve‚ÇÇ.seagull _)).1
  simp only [nerve‚ÇÇ.seagull, prod.comp_lift, assoc]
  congr 1 <;> rw [‚Üê map_comp, ‚Üê op_comp]
  ¬∑ unfold Œ¥2‚ÇÇ
    rw [‚Üê toNerve‚ÇÇ.mk_naturality_Œ¥1i F hyp, ‚Üê assoc, ‚Üê map_comp, ‚Üê op_comp]
    change toNerve‚ÇÇ.mk.naturalityProperty F (Œ¥‚ÇÇ 2 ‚â´ œÉ‚ÇÇ i)
    fin_cases i
    ¬∑ dsimp only [Fin.zero_eta]
      rw [Œ¥‚ÇÇ_two_comp_œÉ‚ÇÇ_zero]
      exact (toNerve‚ÇÇ.mk.naturalityProperty F).comp_mem _ _
        (toNerve‚ÇÇ.mk_naturality_œÉ00 F) (toNerve‚ÇÇ.mk_naturality_Œ¥0i F _)
    ¬∑ dsimp only [Fin.mk_one]
      rw [Œ¥‚ÇÇ_two_comp_œÉ‚ÇÇ_one]
      exact (toNerve‚ÇÇ.mk.naturalityProperty F).id_mem _
  ¬∑ unfold Œ¥0‚ÇÇ
    rw [‚Üê toNerve‚ÇÇ.mk_naturality_Œ¥1i F hyp, ‚Üê assoc, ‚Üê map_comp, ‚Üê op_comp]
    change toNerve‚ÇÇ.mk.naturalityProperty F (Œ¥‚ÇÇ 0 ‚â´ œÉ‚ÇÇ i)
    fin_cases i <;> dsimp only [Fin.zero_eta, Fin.isValue, Fin.mk_one]
    ¬∑ rw [Œ¥‚ÇÇ_zero_comp_œÉ‚ÇÇ_zero]
      exact (toNerve‚ÇÇ.mk.naturalityProperty F).id_mem _
    ¬∑ rw [Œ¥‚ÇÇ_zero_comp_œÉ‚ÇÇ_one]
      exact (toNerve‚ÇÇ.mk.naturalityProperty F).comp_mem _ _
        (toNerve‚ÇÇ.mk_naturality_œÉ00 F) (toNerve‚ÇÇ.mk_naturality_Œ¥0i F _)

/-- A proof that the components defined by `toNerve‚ÇÇ.mk.app` are natural. -/
theorem toNerve‚ÇÇ.mk_naturality : toNerve‚ÇÇ.mk.naturalityProperty F = ‚ä§ :=
  Truncated.morphismProperty_eq_top (toNerve‚ÇÇ.mk.naturalityProperty F)
    (fun
      | 0, _, _ => toNerve‚ÇÇ.mk_naturality_Œ¥0i F _
      | 1, _, _ => toNerve‚ÇÇ.mk_naturality_Œ¥1i F hyp _)
    (fun
      | 0, _, 0 => toNerve‚ÇÇ.mk_naturality_œÉ00 F
      | 1, _, _ => toNerve‚ÇÇ.mk_naturality_œÉ1i F hyp _)

/-- The morphism `X ‚ü∂ nerveFunctor‚ÇÇ.obj (Cat.of C)` of 2-truncated simplicial sets that is
constructed from a refl prefunctor `F : SSet.oneTruncation‚ÇÇ.obj X ‚ü∂ ReflQuiv.of C` assuming
`‚àÄ (œÜ : : X _‚¶ã2‚¶å‚ÇÇ), F.map (ev02‚ÇÇ œÜ) = F.map (ev01‚ÇÇ œÜ) ‚â´ F.map (ev12‚ÇÇ œÜ)`. -/
@[simps!]
def toNerve‚ÇÇ.mk : X ‚ü∂ nerveFunctor‚ÇÇ.obj (Cat.of C) where
  app n := toNerve‚ÇÇ.mk.app F n.unop
  naturality _ _ f := MorphismProperty.of_eq_top (toNerve‚ÇÇ.mk_naturality F hyp) f.unop

end

section

variable (F : SSet.oneTruncation‚ÇÇ.obj X ‚ü∂ SSet.oneTruncation‚ÇÇ.obj (nerveFunctor‚ÇÇ.obj (Cat.of C)))
variable (hyp : (œÜ : X _‚¶ã2‚¶å‚ÇÇ) ‚Üí
            (F ‚â´ (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.app (Cat.of C)).hom).map (ev02‚ÇÇ œÜ) =
              CategoryStruct.comp (obj := C)
              ((F ‚â´ (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.app (Cat.of C)).hom).map (ev01‚ÇÇ œÜ))
              ((F ‚â´ (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.app (Cat.of C)).hom).map (ev12‚ÇÇ œÜ)))

/-- An alternate version of `toNerve‚ÇÇ.mk`, which constructs a map of 2-truncated simplicial sets
`X ‚ü∂ nerveFunctor‚ÇÇ.obj (Cat.of C)` from the underlying refl prefunctor under a composition
hypothesis, where that prefunctor the central hypothesis is conjugated by the isomorphism
`nerve‚ÇÇAdj.NatIso.app C`. -/
@[simps!] def toNerve‚ÇÇ.mk' : X ‚ü∂ nerveFunctor‚ÇÇ.obj (Cat.of C) :=
  toNerve‚ÇÇ.mk (F ‚â´ (OneTruncation‚ÇÇ.ofNerve‚ÇÇ.natIso.app (Cat.of C)).hom) hyp

/-- A computation about `toNerve‚ÇÇ.mk'`. -/
theorem oneTruncation‚ÇÇ_toNerve‚ÇÇMk' : oneTruncation‚ÇÇ.map (toNerve‚ÇÇ.mk' F hyp) = F := by
  refine ReflPrefunctor.ext (fun _ ‚Ü¶ ComposableArrows.ext‚ÇÄ rfl)
    (fun X Y g ‚Ü¶ eq_of_heq (heq_eqRec_iff_heq.2 <| heq_eqRec_iff_heq.2 ?_))
  simp [oneTruncation‚ÇÇ]
  refine Quiver.heq_of_homOfEq_ext ?_ ?_ (f' := F.map g) ?_
  ¬∑ exact ComposableArrows.ext‚ÇÄ rfl
  ¬∑ exact ComposableArrows.ext‚ÇÄ rfl
  ¬∑ apply OneTruncation‚ÇÇ.Hom.ext
    simp only [oneTruncation‚ÇÇ_obj, ReflQuiv.of_val, OneTruncation‚ÇÇ.homOfEq_edge]
    fapply ComposableArrows.ext‚ÇÅ <;> simp [ReflQuiv.comp_eq_comp]
    ¬∑ rw [g.src_eq]; exact congr_arg (¬∑.obj 0) (F.map g).src_eq.symm
    ¬∑ rw [g.tgt_eq]; exact congr_arg (¬∑.obj 1) (F.map g).tgt_eq.symm
    ¬∑ refine (conj_eqToHom_iff_heq' _ _ _ _).2 ?_
      simp [OneTruncation‚ÇÇ.nerveHomEquiv]
      obtain ‚ü®g, rfl, rfl‚ü© := g
      rfl

end

/-- An equality between maps into the 2-truncated nerve is detected by an equality beteween their
underlying refl prefunctors. -/
theorem toNerve‚ÇÇ.ext (F G : X ‚ü∂ nerveFunctor‚ÇÇ.obj (Cat.of C))
    (hyp : SSet.oneTruncation‚ÇÇ.map F = SSet.oneTruncation‚ÇÇ.map G) : F = G := by
  have eq‚ÇÄ x : F.app (op ‚¶ã0‚¶å‚ÇÇ) x = G.app (op ‚¶ã0‚¶å‚ÇÇ) x := congr(($hyp).obj x)
  have eq‚ÇÅ x : F.app (op ‚¶ã1‚¶å‚ÇÇ) x = G.app (op ‚¶ã1‚¶å‚ÇÇ) x := congr((($hyp).map ‚ü®x, rfl, rfl‚ü©).1)
  ext ‚ü®‚ü®n, hn‚ü©‚ü© x
  induction' n using SimplexCategory.rec with n
  match n with
  | 0 => apply eq‚ÇÄ
  | 1 => apply eq‚ÇÅ
  | 2 =>
    apply Functor.hext (fun i : Fin 3 => ?_) (fun (i j : Fin 3) k => ?_)
    ¬∑ let pt : ‚¶ã0‚¶å‚ÇÇ ‚ü∂ ‚¶ã2‚¶å‚ÇÇ := SimplexCategory.const _ _ i
      refine congr(($(congr_fun (F.naturality pt.op) x)).obj 0).symm.trans ?_
      refine .trans ?_ congr(($(congr_fun (G.naturality pt.op) x)).obj 0)
      exact congr($(eq‚ÇÄ _).obj 0)
    ¬∑ let ar : ‚¶ã1‚¶å‚ÇÇ ‚ü∂ ‚¶ã2‚¶å‚ÇÇ := mkOfLe _ _ k.le
      have h1 := congr_arg_heq (fun x => x.map' 0 1) (congr_fun (F.naturality (op ar)) x)
      have h2 := congr_arg_heq (fun x => x.map' 0 1) (congr_fun (G.naturality (op ar)) x)
      exact h1.symm.trans <| .trans (congr_arg_heq (fun x => x.map' 0 1) (eq‚ÇÅ _)) h2

end
end CategoryTheory
