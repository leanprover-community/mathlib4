/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.SimplicialSet.Subcomplex

/-!
# Degenerate simplices

Given a simplicial set `X` and `n : ‚Ñï`, we define the sets `X.degenerate n`
and `X.nonDegenerate n` of degenerate or non-degenerate simplices of dimension `n`.

Any simplex `x : X _‚¶ãn‚¶å` can be written in a unique way as `X.map f.op y`
for an epimorphism `f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å` and a non-degenerate `m`-simplex `y`
(see lemmas `exists_nonDegenerate`, `unique_nonDegenerate_dim`,
`unique_nonDegenerate_simplex` and `unique_nonDegenerate_map`).

-/

universe u

open CategoryTheory Simplicial Limits Opposite

namespace SSet

variable (X : SSet.{u})

/-- An `n`-simplex of a simplicial set `X` is degenerate if it is in the range
of `X.map f.op` for some morphism `f : [n] ‚ü∂ [m]` with `m < n`. -/
def degenerate (n : ‚Ñï) : Set (X _‚¶ãn‚¶å) :=
  setOf (fun x ‚Ü¶ ‚àÉ (m : ‚Ñï) (_ : m < n) (f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å),
    x ‚àà Set.range (X.map f.op))

/-- The set of `n`-dimensional non-degenerate simplices in a simplicial
set `X` is the complement of `X.degenerate n`. -/
def nonDegenerate (n : ‚Ñï) : Set (X _‚¶ãn‚¶å) := (X.degenerate n)·∂ú

@[simp]
lemma degenerate_zero : X.degenerate 0 = ‚àÖ := by
  ext x
  simp only [Set.mem_empty_iff_false, iff_false]
  rintro ‚ü®m, hm, _‚ü©
  simp at hm

@[simp]
lemma nondegenerate_zero : X.nonDegenerate 0 = Set.univ := by
  simp [nonDegenerate]

variable {n : ‚Ñï}

lemma mem_nonDegenerate_iff_notMem_degenerate (x : X _‚¶ãn‚¶å) :
    x ‚àà X.nonDegenerate n ‚Üî x ‚àâ X.degenerate n := Iff.rfl

@[deprecated (since := "2025-05-23")]
alias mem_nonDegenerate_iff_not_mem_degenerate := mem_nonDegenerate_iff_notMem_degenerate

lemma mem_degenerate_iff_notMem_nonDegenerate (x : X _‚¶ãn‚¶å) :
    x ‚àà X.degenerate n ‚Üî x ‚àâ X.nonDegenerate n := by
  simp [nonDegenerate]

@[deprecated (since := "2025-05-23")]
alias mem_degenerate_iff_not_mem_nonDegenerate := mem_degenerate_iff_notMem_nonDegenerate

lemma œÉ_mem_degenerate (i : Fin (n + 1)) (x : X _‚¶ãn‚¶å) :
    X.œÉ i x ‚àà X.degenerate (n + 1) :=
  ‚ü®n, by cutsat, SimplexCategory.œÉ i, Set.mem_range_self x‚ü©

lemma mem_degenerate_iff (x : X _‚¶ãn‚¶å) :
    x ‚àà X.degenerate n ‚Üî ‚àÉ (m : ‚Ñï) (_ : m < n) (f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å) (_ : Epi f),
        x ‚àà Set.range (X.map f.op) := by
  constructor
  ¬∑ rintro ‚ü®m, hm, f, y, hy‚ü©
    rw [‚Üê image.fac f, op_comp] at hy
    have : _ ‚â§ m := SimplexCategory.len_le_of_mono (image.Œπ f)
    exact ‚ü®(image f).len, by cutsat, factorThruImage f, inferInstance, by aesop‚ü©
  ¬∑ rintro ‚ü®m, hm, f, hf, hx‚ü©
    exact ‚ü®m, hm, f, hx‚ü©

lemma degenerate_eq_iUnion_range_œÉ :
    X.degenerate (n + 1) = ‚ãÉ (i : Fin (n + 1)), Set.range (X.œÉ i) := by
  ext x
  constructor
  ¬∑ intro hx
    rw [mem_degenerate_iff] at hx
    obtain ‚ü®m, hm, f, hf, y, rfl‚ü© := hx
    obtain ‚ü®i, Œ∏, rfl‚ü© := SimplexCategory.eq_œÉ_comp_of_not_injective f (fun hf ‚Ü¶ by
      rw [‚Üê SimplexCategory.mono_iff_injective] at hf
      have := SimplexCategory.le_of_mono f
      cutsat)
    aesop
  ¬∑ intro hx
    simp only [Set.mem_iUnion, Set.mem_range] at hx
    obtain ‚ü®i, y, rfl‚ü© := hx
    apply œÉ_mem_degenerate

lemma exists_nonDegenerate (x : X _‚¶ãn‚¶å) :
    ‚àÉ (m : ‚Ñï) (f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å) (_ : Epi f)
      (y : X.nonDegenerate m), x = X.map f.op y := by
  induction n with
  | zero =>
      exact ‚ü®0, ùüô _, inferInstance, ‚ü®x, by simp‚ü©, by simp‚ü©
  | succ n hn =>
      by_cases hx : x ‚àà X.nonDegenerate (n + 1)
      ¬∑ exact ‚ü®n + 1, ùüô _, inferInstance, ‚ü®x, hx‚ü©, by simp‚ü©
      ¬∑ simp only [‚Üê mem_degenerate_iff_notMem_nonDegenerate,
          degenerate_eq_iUnion_range_œÉ, Set.mem_iUnion, Set.mem_range] at hx
        obtain ‚ü®i, y, rfl‚ü© := hx
        obtain ‚ü®m, f, hf, z, rfl‚ü© := hn y
        exact ‚ü®_, SimplexCategory.œÉ i ‚â´ f, inferInstance, z, by simp; rfl‚ü©

lemma isIso_of_nonDegenerate (x : X.nonDegenerate n)
    {m : SimplexCategory} (f : ‚¶ãn‚¶å ‚ü∂ m) [Epi f]
    (y : X.obj (op m)) (hy : X.map f.op y = x) :
    IsIso f := by
  obtain ‚ü®x, hx‚ü© := x
  induction m using SimplexCategory.rec with | _ m
  rw [mem_nonDegenerate_iff_notMem_degenerate] at hx
  by_contra!
  refine hx ‚ü®_, not_le.1 (fun h ‚Ü¶ this ?_), f, y, hy‚ü©
  rw [SimplexCategory.isIso_iff_of_epi]
  exact le_antisymm h (SimplexCategory.len_le_of_epi f)

lemma mono_of_nonDegenerate (x : X.nonDegenerate n)
    {m : SimplexCategory} (f : ‚¶ãn‚¶å ‚ü∂ m)
    (y : X.obj (op m)) (hy : X.map f.op y = x) :
    Mono f := by
  have := X.isIso_of_nonDegenerate x (factorThruImage f) (y := X.map (image.Œπ f).op y) (by
      rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, image.fac f, hy])
  rw [‚Üê image.fac f]
  infer_instance

namespace unique_nonDegenerate

/-!
Auxiliary definitions and lemmas for the lemmas
`unique_nonDegenerate_dim`, `unique_nonDegenerate_simplex` and
`unique_nonDegenerate_map` which assert the uniqueness of the
decomposition obtained in the lemma `exists_nonDegenerate`.
-/

section

variable {X} {x : X _‚¶ãn‚¶å}
  {m‚ÇÅ m‚ÇÇ : ‚Ñï} {f‚ÇÅ : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚ÇÅ‚¶å} (hf‚ÇÅ : SplitEpi f‚ÇÅ)
  (y‚ÇÅ : X.nonDegenerate m‚ÇÅ) (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
  (f‚ÇÇ : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚ÇÇ‚¶å) (y‚ÇÇ : X _‚¶ãm‚ÇÇ‚¶å) (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ)

/-- The composition of a section of `f‚ÇÅ` and `f‚ÇÇ`. It is proven below that it
is the identity, see `g_eq_id`. -/
private def g := hf‚ÇÅ.section_ ‚â´ f‚ÇÇ

variable {f‚ÇÇ y‚ÇÅ y‚ÇÇ}

include hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ

private lemma map_g_op_y‚ÇÇ : X.map (g hf‚ÇÅ f‚ÇÇ).op y‚ÇÇ = y‚ÇÅ := by
  dsimp [g]
  rw [FunctorToTypes.map_comp_apply, ‚Üê hy‚ÇÇ, hy‚ÇÅ, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp,
    SplitEpi.id, op_id, FunctorToTypes.map_id_apply]

private lemma isIso_factorThruImage_g :
    IsIso (factorThruImage (g hf‚ÇÅ f‚ÇÇ)) := by
  have := map_g_op_y‚ÇÇ hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ
  rw [‚Üê image.fac (g hf‚ÇÅ f‚ÇÇ), op_comp, FunctorToTypes.map_comp_apply] at this
  exact X.isIso_of_nonDegenerate y‚ÇÅ (factorThruImage (g hf‚ÇÅ f‚ÇÇ)) _ this

private lemma mono_g : Mono (g hf‚ÇÅ f‚ÇÇ) := by
  have := isIso_factorThruImage_g hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ
  rw [‚Üê image.fac (g hf‚ÇÅ f‚ÇÇ)]
  infer_instance

private lemma le : m‚ÇÅ ‚â§ m‚ÇÇ :=
  have := isIso_factorThruImage_g hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ
  SimplexCategory.len_le_of_mono
    (factorThruImage (g hf‚ÇÅ f‚ÇÇ) ‚â´ image.Œπ _)

end

variable {X} in
private lemma g_eq_id {x : X _‚¶ãn‚¶å} {m : ‚Ñï} {f‚ÇÅ : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å}
    {y‚ÇÅ : X.nonDegenerate m} (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
    {f‚ÇÇ : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å} {y‚ÇÇ : X _‚¶ãm‚¶å} (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ) (hf‚ÇÅ : SplitEpi f‚ÇÅ) :
    g hf‚ÇÅ f‚ÇÇ = ùüô _ := by
  have := mono_g hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ
  apply SimplexCategory.eq_id_of_mono

end unique_nonDegenerate

section

open unique_nonDegenerate

/-!
The following lemmas `unique_nonDegenerate_dim`, `unique_nonDegenerate_simplex` and
`unique_nonDegenerate_map` assert the uniqueness of the decomposition
obtained in the lemma `exists_nonDegenerate`.
-/

lemma unique_nonDegenerate_dim (x : X _‚¶ãn‚¶å) {m‚ÇÅ m‚ÇÇ : ‚Ñï}
    (f‚ÇÅ : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚ÇÅ‚¶å) [Epi f‚ÇÅ] (y‚ÇÅ : X.nonDegenerate m‚ÇÅ) (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
    (f‚ÇÇ : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚ÇÇ‚¶å) [Epi f‚ÇÇ] (y‚ÇÇ : X.nonDegenerate m‚ÇÇ) (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ) :
    m‚ÇÅ = m‚ÇÇ := by
  obtain ‚ü®‚ü®hf‚ÇÅ‚ü©‚ü© := isSplitEpi_of_epi f‚ÇÅ
  obtain ‚ü®‚ü®hf‚ÇÇ‚ü©‚ü© := isSplitEpi_of_epi f‚ÇÇ
  exact le_antisymm (le hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ) (le hf‚ÇÇ hy‚ÇÇ hy‚ÇÅ)

lemma unique_nonDegenerate_simplex (x : X _‚¶ãn‚¶å) {m : ‚Ñï}
    (f‚ÇÅ : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å) [Epi f‚ÇÅ] (y‚ÇÅ : X.nonDegenerate m) (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
    (f‚ÇÇ : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å) (y‚ÇÇ : X.nonDegenerate m) (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ) :
    y‚ÇÅ = y‚ÇÇ := by
  obtain ‚ü®‚ü®hf‚ÇÅ‚ü©‚ü© := isSplitEpi_of_epi f‚ÇÅ
  ext
  simpa [g_eq_id hy‚ÇÅ hy‚ÇÇ hf‚ÇÅ] using (map_g_op_y‚ÇÇ hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ).symm

lemma unique_nonDegenerate_map (x : X _‚¶ãn‚¶å) {m : ‚Ñï}
    (f‚ÇÅ : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å) [Epi f‚ÇÅ] (y‚ÇÅ : X.nonDegenerate m) (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
    (f‚ÇÇ : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å) (y‚ÇÇ : X.nonDegenerate m) (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ) :
    f‚ÇÅ = f‚ÇÇ := by
  ext x : 3
  suffices ‚àÉ (hf‚ÇÅ : SplitEpi f‚ÇÅ), hf‚ÇÅ.section_.toOrderHom (f‚ÇÅ.toOrderHom x) = x by
    obtain ‚ü®hf‚ÇÅ, hf‚ÇÅ'‚ü© := this
    dsimp at hf‚ÇÅ'
    simpa [g, hf‚ÇÅ'] using (SimplexCategory.congr_toOrderHom_apply (g_eq_id hy‚ÇÅ hy‚ÇÇ hf‚ÇÅ)
      (f‚ÇÅ.toOrderHom x)).symm
  obtain ‚ü®‚ü®hf‚ü©‚ü© := isSplitEpi_of_epi f‚ÇÅ
  let Œ± (y : Fin (m + 1)) : Fin (n + 1) :=
    if y = f‚ÇÅ.toOrderHom x then x else hf.section_.toOrderHom y
  have hŒ±‚ÇÅ (y : Fin (m + 1)) : f‚ÇÅ.toOrderHom (Œ± y) = y := by
    dsimp [Œ±]
    split_ifs with hy
    ¬∑ rw [hy]
    ¬∑ apply SimplexCategory.congr_toOrderHom_apply hf.id
  have hŒ±‚ÇÇ : Monotone Œ± := by
    rintro y‚ÇÅ y‚ÇÇ h
    by_contra! h'
    suffices y‚ÇÇ ‚â§ y‚ÇÅ by simp [show y‚ÇÅ = y‚ÇÇ by cutsat] at h'
    simpa only [hŒ±‚ÇÅ] using f‚ÇÅ.toOrderHom.monotone h'.le
  exact ‚ü®{ section_ := SimplexCategory.Hom.mk ‚ü®Œ±, hŒ±‚ÇÇ‚ü©, id := by ext : 3; apply hŒ±‚ÇÅ },
    by simp [Œ±]‚ü©

end

namespace Subcomplex

variable {X} (A : X.Subcomplex)

lemma mem_degenerate_iff {n : ‚Ñï} (x : A.obj (op ‚¶ãn‚¶å)) :
    x ‚àà degenerate A n ‚Üî x.val ‚àà X.degenerate n := by
  rw [SSet.mem_degenerate_iff, SSet.mem_degenerate_iff]
  constructor
  ¬∑ rintro ‚ü®m, hm, f, _, y, rfl‚ü©
    exact ‚ü®m, hm, f, inferInstance, y.val, rfl‚ü©
  ¬∑ obtain ‚ü®x, hx‚ü© := x
    rintro ‚ü®m, hm, f, _, ‚ü®y, rfl‚ü©‚ü©
    refine ‚ü®m, hm, f, inferInstance, ‚ü®y, ?_‚ü©, rfl‚ü©
    have := isSplitEpi_of_epi f
    simpa [Set.mem_preimage, ‚Üê op_comp, ‚Üê FunctorToTypes.map_comp_apply,
      IsSplitEpi.id, op_id, FunctorToTypes.map_id_apply] using A.map (section_ f).op hx

lemma mem_nonDegenerate_iff {n : ‚Ñï} (x : A.obj (op ‚¶ãn‚¶å)) :
    x ‚àà nonDegenerate A n ‚Üî x.val ‚àà X.nonDegenerate n := by
  rw [mem_nonDegenerate_iff_notMem_degenerate,
    mem_nonDegenerate_iff_notMem_degenerate, mem_degenerate_iff]

lemma le_iff_contains_nonDegenerate (B : X.Subcomplex) :
    A ‚â§ B ‚Üî ‚àÄ (n : ‚Ñï) (x : X.nonDegenerate n), x.val ‚àà A.obj _ ‚Üí x.val ‚àà B.obj _ := by
  constructor
  ¬∑ aesop
  ¬∑ rintro h ‚ü®n‚ü© x hx
    induction n using SimplexCategory.rec with | _ n =>
    obtain ‚ü®m, f, _, ‚ü®a, ha‚ü©, ha'‚ü© := exists_nonDegenerate A ‚ü®x, hx‚ü©
    simp only [Subpresheaf.toPresheaf_obj, Subtype.ext_iff,
      Subpresheaf.toPresheaf_map_coe] at ha'
    subst ha'
    rw [mem_nonDegenerate_iff] at ha
    exact B.map f.op (h _ ‚ü®_, ha‚ü© a.prop)

lemma eq_top_iff_contains_nonDegenerate :
    A = ‚ä§ ‚Üî ‚àÄ (n : ‚Ñï), X.nonDegenerate n ‚äÜ A.obj _ := by
  simpa using le_iff_contains_nonDegenerate ‚ä§ A

lemma degenerate_eq_top_iff (n : ‚Ñï) :
    degenerate A n = ‚ä§ ‚Üî (X.degenerate n ‚äì A.obj _) = A.obj _ := by
  constructor
  ¬∑ intro h
    ext x
    simp only [Set.inf_eq_inter, Set.mem_inter_iff, and_iff_right_iff_imp]
    intro hx
    simp [‚Üê A.mem_degenerate_iff ‚ü®x, hx‚ü©, h, Set.top_eq_univ, Set.mem_univ]
  ¬∑ intro h
    simp only [Set.inf_eq_inter, Set.inter_eq_right] at h
    ext x
    simpa [A.mem_degenerate_iff] using h x.prop

variable (X) in
lemma iSup_ofSimplex_nonDegenerate_eq_top :
    ‚®Ü (x : Œ£ (p : ‚Ñï), X.nonDegenerate p), ofSimplex x.2.val = ‚ä§ := by
  rw [eq_top_iff_contains_nonDegenerate]
  intro n x hx
  simp only [Subpresheaf.iSup_obj, Set.mem_iUnion, Sigma.exists,
    Subtype.exists, exists_prop]
  exact ‚ü®n, x, hx, mem_ofSimplex_obj x‚ü©

end Subcomplex

section

variable {X} {Y : SSet.{u}}

lemma degenerate_app_apply {n : ‚Ñï} {x : X _‚¶ãn‚¶å} (hx : x ‚àà X.degenerate n) (f : X ‚ü∂ Y) :
    f.app _ x ‚àà Y.degenerate n := by
  obtain ‚ü®m, hm, g, y, rfl‚ü© := hx
  exact ‚ü®m, hm, g, f.app _ y, by rw [FunctorToTypes.naturality]‚ü©

lemma degenerate_le_preimage (f : X ‚ü∂ Y) (n : ‚Ñï) :
    X.degenerate n ‚äÜ (f.app _)‚Åª¬π' (Y.degenerate n) :=
  fun _ hx ‚Ü¶ degenerate_app_apply hx f

lemma image_degenerate_le (f : X ‚ü∂ Y) (n : ‚Ñï) :
    (f.app _)'' (X.degenerate n) ‚äÜ Y.degenerate n := by
  simpa using degenerate_le_preimage f n

lemma degenerate_iff_of_isIso (f : X ‚ü∂ Y) [IsIso f] {n : ‚Ñï} (x : X _‚¶ãn‚¶å) :
    f.app _ x ‚àà Y.degenerate n ‚Üî x ‚àà X.degenerate n := by
  constructor
  ¬∑ intro hy
    simpa [‚Üê FunctorToTypes.comp] using degenerate_app_apply hy (inv f)
  ¬∑ exact fun hx ‚Ü¶ degenerate_app_apply hx f

lemma nonDegenerate_iff_of_isIso (f : X ‚ü∂ Y) [IsIso f] {n : ‚Ñï} (x : X _‚¶ãn‚¶å) :
    f.app _ x ‚àà Y.nonDegenerate n ‚Üî x ‚àà X.nonDegenerate n := by
  simp [mem_nonDegenerate_iff_notMem_degenerate,
    degenerate_iff_of_isIso]

attribute [local simp] nonDegenerate_iff_of_isIso in
/-- The bijection on nondegenerate simplices induced by an isomorphism
of simplicial sets. -/
@[simps]
def nonDegenerateEquivOfIso (e : X ‚âÖ Y) {n : ‚Ñï} :
    X.nonDegenerate n ‚âÉ Y.nonDegenerate n where
  toFun := fun ‚ü®x, hx‚ü© ‚Ü¶ ‚ü®e.hom.app _ x, by aesop‚ü©
  invFun := fun ‚ü®y, hy‚ü© ‚Ü¶ ‚ü®e.inv.app _ y, by aesop‚ü©
  left_inv _ := by aesop
  right_inv _ := by aesop

end

variable {X} in
lemma degenerate_iff_of_mono {Y : SSet.{u}} (f : X ‚ü∂ Y) [Mono f] (x : X _‚¶ãn‚¶å) :
    f.app _ x ‚àà Y.degenerate n ‚Üî x ‚àà X.degenerate n := by
  rw [‚Üê degenerate_iff_of_isIso (Subcomplex.toRange f) x,
    Subcomplex.mem_degenerate_iff]
  simp

variable {X} in
lemma nonDegenerate_iff_of_mono {Y : SSet.{u}} (f : X ‚ü∂ Y) [Mono f] (x : X _‚¶ãn‚¶å) :
    f.app _ x ‚àà Y.nonDegenerate n ‚Üî x ‚àà X.nonDegenerate n := by
  simp [mem_nonDegenerate_iff_notMem_degenerate, degenerate_iff_of_mono]

end SSet
