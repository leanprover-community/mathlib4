/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.SimplicialSet.Basic

/-!
# Degenerate simplices

Given a simplicial set `X` and `n : ‚Ñï`, we define the sets `X.degenerate n`
and `X.nonDegenerate n` of degenerate or non-degenerate simplices of dimension `n`.

## TODO (@joelriou)

* `SSet.exists_nonDegenerate` shows that any `n`-simplex can be written as `X.map f.op y`
  for some epimorphism `f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å` and some non-degenerate simplex `y`.
  Show that `f` and `y` are unique.

-/

universe u

open CategoryTheory Simplicial Limits Opposite

namespace SSet

variable (X : SSet.{u})

/-- An `n`-simplex of a simplicial set `X` is degenerate if it is in the range
of `X.map f.op` for some morphism `f : [n] ‚ü∂ [m]` with `m < n`. -/
def degenerate (n : ‚Ñï) : Set (X _‚¶ãn‚¶å) :=
  setOf (fun x ‚Ü¶ ‚àÉ (m : ‚Ñï) (_ : m < n) (f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å),
    x ‚àà Set.range (X.map f.op))

/-- The set of `n`-dimensional non-degenerate simplices in a simplicial
set `X` is the complement of `X.degenerate n`. -/
def nonDegenerate (n : ‚Ñï) : Set (X _‚¶ãn‚¶å) := (X.degenerate n)·∂ú

@[simp]
lemma degenerate_zero : X.degenerate 0 = ‚ä• := by
  ext x
  simp only [Set.bot_eq_empty, Set.mem_empty_iff_false, iff_false]
  rintro ‚ü®m, hm, _‚ü©
  simp at hm

@[simp]
lemma nondegenerate_zero : X.nonDegenerate 0 = ‚ä§ := by
  simp [nonDegenerate]

variable {n : ‚Ñï}

lemma mem_nonDegenerate_iff_notMem_degenerate (x : X _‚¶ãn‚¶å) :
    x ‚àà X.nonDegenerate n ‚Üî x ‚àâ X.degenerate n := Iff.rfl

@[deprecated (since := "2025-05-23")]
alias mem_nonDegenerate_iff_not_mem_degenerate := mem_nonDegenerate_iff_notMem_degenerate

lemma mem_degenerate_iff_notMem_nonDegenerate (x : X _‚¶ãn‚¶å) :
    x ‚àà X.degenerate n ‚Üî x ‚àâ X.nonDegenerate n := by
  simp [nonDegenerate]

@[deprecated (since := "2025-05-23")]
alias mem_degenerate_iff_not_mem_nonDegenerate := mem_degenerate_iff_notMem_nonDegenerate

lemma œÉ_mem_degenerate (i : Fin (n + 1)) (x : X _‚¶ãn‚¶å) :
    X.œÉ i x ‚àà X.degenerate (n + 1) :=
  ‚ü®n, by omega, SimplexCategory.œÉ i, Set.mem_range_self x‚ü©

lemma mem_degenerate_iff (x : X _‚¶ãn‚¶å) :
    x ‚àà X.degenerate n ‚Üî ‚àÉ (m : ‚Ñï) (_ : m < n) (f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å) (_ : Epi f),
        x ‚àà Set.range (X.map f.op) := by
  constructor
  ¬∑ rintro ‚ü®m, hm, f, y, hy‚ü©
    rw [‚Üê image.fac f, op_comp] at hy
    have : _ ‚â§ m := SimplexCategory.len_le_of_mono (f := image.Œπ f) inferInstance
    exact ‚ü®(image f).len, by omega, factorThruImage f, inferInstance, by aesop‚ü©
  ¬∑ rintro ‚ü®m, hm, f, hf, hx‚ü©
    exact ‚ü®m, hm, f, hx‚ü©

lemma degenerate_eq_iUnion_range_œÉ :
    X.degenerate (n + 1) = ‚ãÉ (i : Fin (n + 1)), Set.range (X.œÉ i) := by
  ext x
  constructor
  ¬∑ intro hx
    rw [mem_degenerate_iff] at hx
    obtain ‚ü®m, hm, f, hf, y, rfl‚ü© := hx
    obtain ‚ü®i, Œ∏, rfl‚ü© := SimplexCategory.eq_œÉ_comp_of_not_injective f (fun hf ‚Ü¶ by
      have := SimplexCategory.le_of_mono (f := f) (by
        rwa [SimplexCategory.mono_iff_injective])
      omega)
    aesop
  ¬∑ intro hx
    simp only [Set.mem_iUnion, Set.mem_range] at hx
    obtain ‚ü®i, y, rfl‚ü© := hx
    apply œÉ_mem_degenerate

lemma exists_nonDegenerate (x : X _‚¶ãn‚¶å) :
    ‚àÉ (m : ‚Ñï) (f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å) (_ : Epi f)
      (y : X.nonDegenerate m), x = X.map f.op y := by
  induction n with
  | zero =>
      exact ‚ü®0, ùüô _, inferInstance, ‚ü®x, by simp‚ü©, by simp‚ü©
  | succ n hn =>
      by_cases hx : x ‚àà X.nonDegenerate (n + 1)
      ¬∑ exact ‚ü®n + 1, ùüô _, inferInstance, ‚ü®x, hx‚ü©, by simp‚ü©
      ¬∑ simp only [‚Üê mem_degenerate_iff_notMem_nonDegenerate,
          degenerate_eq_iUnion_range_œÉ, Set.mem_iUnion, Set.mem_range] at hx
        obtain ‚ü®i, y, rfl‚ü© := hx
        obtain ‚ü®m, f, hf, z, rfl‚ü© := hn y
        exact ‚ü®_, SimplexCategory.œÉ i ‚â´ f, inferInstance, z, by simp; rfl‚ü©

lemma isIso_of_nonDegenerate (x : X.nonDegenerate n)
    {m : SimplexCategory} (f : ‚¶ãn‚¶å ‚ü∂ m) [Epi f]
    (y : X.obj (op m)) (hy : X.map f.op y = x) :
    IsIso f := by
  obtain ‚ü®x, hx‚ü© := x
  induction' m using SimplexCategory.rec with m
  rw [mem_nonDegenerate_iff_notMem_degenerate] at hx
  by_contra!
  refine hx ‚ü®_ ,?_, f, y, hy‚ü©
  by_contra!
  obtain rfl : m = n :=
    le_antisymm (SimplexCategory.len_le_of_epi (f := f) inferInstance) this
  obtain rfl := SimplexCategory.eq_id_of_epi f
  exact this inferInstance

end SSet
