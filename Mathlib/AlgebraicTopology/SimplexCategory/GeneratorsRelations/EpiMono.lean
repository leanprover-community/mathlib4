/-
Copyright (c) 2025 Robin Carlier. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robin Carlier
-/
import Mathlib.AlgebraicTopology.SimplexCategory.GeneratorsRelations.Basic
/-! # Epi-mono factorization in the simplex category presented by generators and relations

This file aims to establish that there is a nice epi-mono factorization in `SimplexCategoryGenRel`.
More precisely, we introduce two morphism properties `P_Œ¥` and `P_œÉ` that
single out morphisms that are compositions of `Œ¥ i` (resp. `œÉ i`).

The main result of this file is `exists_P_œÉ_P_Œ¥_factorization`, which asserts that every
moprhism as a decomposition of a `P_œÉ` followed by a `P_Œ¥`.

-/

namespace SimplexCategoryGenRel
open CategoryTheory

section EpiMono

/-- `Œ¥ i` is a split monomorphism thanks to the simplicial identities. -/
def splitMonoŒ¥ {n : ‚Ñï} (i : Fin (n + 2)) : SplitMono (Œ¥ i) where
  retraction := by
    induction i using Fin.lastCases with
    | last => exact œÉ (Fin.last n)
    | cast i => exact œÉ i
  id := by
    cases i using Fin.lastCases
    ¬∑ simp only [Fin.lastCases_last]
      exact Œ¥_comp_œÉ_succ
    ¬∑ simp only [Fin.lastCases_castSucc]
      exact Œ¥_comp_œÉ_self

instance {n : ‚Ñï} {i : Fin (n + 2)} : IsSplitMono (Œ¥ i) := .mk' <| splitMonoŒ¥ i

/-- `Œ¥ i` is a split epimorphism thanks to the simplicial identities. -/
def splitEpiœÉ {n : ‚Ñï} (i : Fin (n + 1)) : SplitEpi (œÉ i) where
  section_ := Œ¥ i.castSucc
  id := Œ¥_comp_œÉ_self

instance {n : ‚Ñï} {i : Fin (n + 1)} : IsSplitEpi (œÉ i) := .mk' <| splitEpiœÉ i

/-- Auxiliary predicate to express that a morphism is purely a composition of `œÉ i`s. -/
abbrev P_œÉ := degeneracies.multiplicativeClosure

/-- Auxiliary predicate to express that a morphism is purely a composition of `Œ¥ i`s. -/
abbrev P_Œ¥ := faces.multiplicativeClosure

lemma P_œÉ.œÉ {n : ‚Ñï} (i : Fin (n + 1)) : P_œÉ (œÉ i) := .of _ (.œÉ i)

lemma P_Œ¥.Œ¥ {n : ‚Ñï} (i : Fin (n + 2)) : P_Œ¥ (Œ¥ i) := .of _ (.Œ¥ i)

/-- All `P_œÉ` are split epis as composition of such. -/
lemma isSplitEpi_P_œÉ {x y : SimplexCategoryGenRel} {e : x ‚ü∂ y} (he : P_œÉ e) : IsSplitEpi e := by
  induction he with
  | of x hx => cases hx; infer_instance
  | id => infer_instance
  | comp_of _ _ _ h => cases h; infer_instance

/-- All `P_Œ¥` are split monos as composition of such. -/
lemma isSplitMono_P_Œ¥ {x y : SimplexCategoryGenRel} {m : x ‚ü∂ y} (hm : P_Œ¥ m) :
    IsSplitMono m := by
  induction hm with
  | of x hx => cases hx; infer_instance
  | id => infer_instance
  | comp_of _ _ _ h => cases h; infer_instance

lemma isSplitEpi_toSimplexCategory_map_of_P_œÉ {x y : SimplexCategoryGenRel} {e : x ‚ü∂ y}
    (he : P_œÉ e) : IsSplitEpi <| toSimplexCategory.map e := by
  constructor
  constructor
  apply SplitEpi.map
  exact isSplitEpi_P_œÉ he |>.exists_splitEpi.some

lemma isSplitMono_toSimplexCategory_map_of_P_Œ¥ {x y : SimplexCategoryGenRel} {m : x ‚ü∂ y}
    (hm : P_Œ¥ m) : IsSplitMono <| toSimplexCategory.map m := by
  constructor
  constructor
  apply SplitMono.map
  exact isSplitMono_P_Œ¥ hm |>.exists_splitMono.some

lemma eq_or_len_le_of_P_Œ¥ {x y : SimplexCategoryGenRel} {f : x ‚ü∂ y} (h_Œ¥ : P_Œ¥ f) :
    (‚àÉ h : x = y, f = eqToHom h) ‚à® x.len < y.len := by
  induction h_Œ¥ with
  | of _ hx => cases hx; right; simp
  | id => left; use rfl; simp
  | comp_of i u _ hg h' =>
    rcases h' with ‚ü®e, _‚ü© | h' <;>
    apply Or.inr <;>
    cases hg
    ¬∑ rw [e]
      exact Nat.lt_add_one _
    ¬∑ exact Nat.lt_succ_of_lt h'

end EpiMono

section ExistenceOfFactorizations

/-- An auxiliary lemma to show that one can always use the simplicial identities to simplify a term
in the form `Œ¥ ‚â´ œÉ` into either an identity, or a term of the form `œÉ ‚â´ Œ¥`. This is the crucial
special case to induct on to get an epi-mono factorization for all morphisms. -/
private lemma switch_Œ¥_œÉ {n : ‚Ñï} (i : Fin (n + 2)) (i' : Fin (n + 3)) :
    Œ¥ i' ‚â´ œÉ i = ùüô _ ‚à® ‚àÉ j j', Œ¥ i' ‚â´ œÉ i = œÉ j ‚â´ Œ¥ j' := by
  obtain h | rfl | h := lt_trichotomy i.castSucc i'
  ¬∑ rw [Fin.castSucc_lt_iff_succ_le] at h
    obtain h | rfl := h.lt_or_eq
    ¬∑ obtain ‚ü®i', rfl‚ü© := Fin.eq_succ_of_ne_zero (Fin.ne_zero_of_lt h)
      rw [Fin.succ_lt_succ_iff] at h
      obtain ‚ü®i, rfl‚ü© := Fin.eq_castSucc_of_ne_last (Fin.ne_last_of_lt h)
      exact Or.inr ‚ü®i, i', by rw [Œ¥_comp_œÉ_of_gt h]‚ü©
    ¬∑ exact Or.inl Œ¥_comp_œÉ_succ
  ¬∑ exact Or.inl Œ¥_comp_œÉ_self
  ¬∑ obtain ‚ü®i', rfl‚ü© := Fin.eq_castSucc_of_ne_last (Fin.ne_last_of_lt h)
    rw [Fin.castSucc_lt_castSucc_iff] at h
    obtain ‚ü®i, rfl‚ü© := Fin.eq_succ_of_ne_zero (Fin.ne_zero_of_lt h)
    rw [‚Üê Fin.le_castSucc_iff] at h
    exact Or.inr ‚ü®i, i', by rw [Œ¥_comp_œÉ_of_le h]‚ü©

/-- A low-dimensional special case of the previous -/
private lemma switch_Œ¥_œÉ‚ÇÄ (i : Fin 1) (i' : Fin 2) :
    Œ¥ i' ‚â´ œÉ i = ùüô _ := by
  fin_cases i; fin_cases i'
  ¬∑ exact Œ¥_comp_œÉ_self
  ¬∑ exact Œ¥_comp_œÉ_succ

private lemma factor_Œ¥_œÉ {n : ‚Ñï} (i : Fin (n + 1)) (i' : Fin (n + 2)) :
    ‚àÉ (z : SimplexCategoryGenRel) (e : mk n ‚ü∂ z) (m : z ‚ü∂ mk n)
      (_ : P_œÉ e) (_ : P_Œ¥ m), Œ¥ i' ‚â´ œÉ i = e ‚â´ m := by
  cases n with
  | zero => exact ‚ü®_, _, _, P_œÉ.id_mem _, P_Œ¥.id_mem _, by simp [switch_Œ¥_œÉ‚ÇÄ]‚ü©
  | succ n =>
    obtain h | ‚ü®j, j', h‚ü© := switch_Œ¥_œÉ i i'
    ¬∑ exact ‚ü®_, _, _, P_œÉ.id_mem _, P_Œ¥.id_mem _, by simp [h]‚ü©
    ¬∑ exact ‚ü®_, _, _, P_œÉ.œÉ _, P_Œ¥.Œ¥ _, h‚ü©

/-- An auxiliary lemma that shows there exists a factorization as a P_Œ¥ followed by a P_œÉ for
morphisms of the form `P_Œ¥ ‚â´ œÉ`. -/
private lemma factor_P_Œ¥_œÉ {n : ‚Ñï} (i : Fin (n + 1)) {x : SimplexCategoryGenRel}
    (f : x ‚ü∂ mk (n + 1)) (hf : P_Œ¥ f) : ‚àÉ (z : SimplexCategoryGenRel) (e : x ‚ü∂ z) (m : z ‚ü∂ mk n)
      (_ : P_œÉ e) (_ : P_Œ¥ m), f ‚â´ œÉ i = e ‚â´ m := by
  induction n generalizing x with
  | zero => cases hf with
    | of _ h => cases h; exact factor_Œ¥_œÉ _ _
    | id  => exact ‚ü®_, _, _, P_œÉ.œÉ i, P_Œ¥.id_mem _, by simp‚ü©
    | comp_of j f hf hg =>
      obtain ‚ü®k‚ü© := hg
      obtain ‚ü®rfl, rfl‚ü© | hf' := eq_or_len_le_of_P_Œ¥ hf
      ¬∑ simpa using factor_Œ¥_œÉ i k
      ¬∑ simp at hf'
  | succ n hn =>
    cases hf with
    | of _ h => cases h; exact factor_Œ¥_œÉ _ _
    | id n => exact ‚ü®_, _, _, P_œÉ.œÉ i, P_Œ¥.id_mem _, by simp‚ü©
    | comp_of f g hf hg =>
      obtain ‚ü®k‚ü© := hg
      obtain ‚ü®rfl, rfl‚ü© | h' := eq_or_len_le_of_P_Œ¥ hf
      ¬∑ simpa using factor_Œ¥_œÉ i k
      ¬∑ obtain h'' | ‚ü®j, j', h''‚ü© := switch_Œ¥_œÉ i k
        ¬∑ exact ‚ü®_, _, _, P_œÉ.id_mem _, hf, by simp [h'']‚ü©
        ¬∑ obtain ‚ü®z, e, m, he, hm, fac‚ü© := hn j f hf
          exact ‚ü®z, e, m ‚â´ Œ¥ j', he, P_Œ¥.comp_mem _ _ hm (P_Œ¥.Œ¥ j'),
            by simp [h'', reassoc_of% fac]‚ü©

/-- Any morphism in `SimplexCategoryGenRel` can be decomposed as a `P_œÉ` followed by a `P_Œ¥`. -/
theorem exists_P_œÉ_P_Œ¥_factorization {x y : SimplexCategoryGenRel} (f : x ‚ü∂ y) :
    ‚àÉ (z : SimplexCategoryGenRel) (e : x ‚ü∂ z) (m : z ‚ü∂ y)
        (_ : P_œÉ e) (_ : P_Œ¥ m), f = e ‚â´ m := by
  induction f with
  | @id n => use (mk n), (ùüô (mk n)), (ùüô (mk n)), P_œÉ.id_mem _, P_Œ¥.id_mem _; simp
  | @comp_Œ¥ n n' f j h =>
    obtain ‚ü®z, e, m, ‚ü®he, hm, rfl‚ü©‚ü© := h
    exact ‚ü®z, e, m ‚â´ Œ¥ j, he, P_Œ¥.comp_mem _ _ hm (P_Œ¥.Œ¥ _), by simp‚ü©
  | @comp_œÉ n n' f j h =>
    obtain ‚ü®z, e, m, ‚ü®he, hm, rfl‚ü©‚ü© := h
    cases hm with
    | of g hg =>
      rcases hg with ‚ü®i‚ü©
      obtain ‚ü®_, _, _, ‚ü®he‚ÇÅ, hm‚ÇÅ, h‚ÇÅ‚ü©‚ü© := factor_Œ¥_œÉ j i
      exact ‚ü®_, _, _, P_œÉ.comp_mem _ _ he he‚ÇÅ, hm‚ÇÅ,
        by simp [‚Üê h‚ÇÅ]‚ü©
    | @id n =>
      exact ‚ü®mk n', e ‚â´ œÉ j, ùüô _, P_œÉ.comp_mem _ _ he (P_œÉ.œÉ _), P_Œ¥.id_mem _, by simp‚ü©
    | comp_of f g hf hg =>
      cases n' with
      | zero =>
        cases hg
        exact ‚ü®_, _, _, he, hf, by simp [switch_Œ¥_œÉ‚ÇÄ]‚ü©
      | succ n =>
        rcases hg with ‚ü®i‚ü©
        obtain h' | ‚ü®j', j'', h'‚ü© := switch_Œ¥_œÉ j i
        ¬∑ exact ‚ü®_, _, _, he, hf, by simp [h']‚ü©
        ¬∑ obtain ‚ü®_, _, m‚ÇÅ, ‚ü®he‚ÇÅ, hm‚ÇÅ, h‚ÇÅ‚ü©‚ü© := factor_P_Œ¥_œÉ j' f hf
          exact ‚ü®_, _, m‚ÇÅ ‚â´ Œ¥ j'', P_œÉ.comp_mem _ _ he he‚ÇÅ, P_Œ¥.comp_mem _ _ hm‚ÇÅ (P_Œ¥.Œ¥ _),
            by simp [‚Üê reassoc_of% h‚ÇÅ, h']‚ü©

instance : MorphismProperty.HasFactorization P_œÉ P_Œ¥ where
  nonempty_mapFactorizationData f := by
    obtain ‚ü®z, e , m, he, hm, fac‚ü© := exists_P_œÉ_P_Œ¥_factorization f
    exact ‚ü®‚ü®z, e , m, fac.symm, he, hm‚ü©‚ü©

end ExistenceOfFactorizations

end SimplexCategoryGenRel
