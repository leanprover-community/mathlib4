/-
Copyright (c) 2025 Robin Carlier. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robin Carlier
-/
import Mathlib.AlgebraicTopology.SimplexCategory.GeneratorsRelations.NormalForms
/-! # Equivalence between `SimplexCategoryGenRel` and `SimplexCategory`.

In this file, we establish that `toSimplexCategory : SimplexCategoryGenRel ‚•§ SimplexCategory` is
an equivalence of categories. We introduce `equivSimplexCategory` as this equivalence.

## References:
* [Kerodon Tag 04FW](https://kerodon.net/tag/04FW)

-/
namespace SimplexCategoryGenRel

open CategoryTheory

section EquivalenceWithSimplexCategory

-- Marked private as the stronger statement with unicity is below.
/-- Every epimorphism in the usual simplex category can be represented in SimplexCategoryGenRel by
a morphism satisfying `P_œÉ`. -/
private lemma exists_P_œÉ_of_epi {m k : ‚Ñï} (f : SimplexCategory.mk (m + k) ‚ü∂ .mk m)
    (hf : Epi f) : ‚àÉ (g : SimplexCategoryGenRel.mk (m + k) ‚ü∂ .mk m),
      P_œÉ g ‚àß toSimplexCategory.map g = f := by
  induction k with
  | zero =>
    dsimp only [Nat.add_zero] at f
    haveI : f = ùüô _ := SimplexCategory.eq_id_of_epi _
    subst this
    exact ‚ü®ùüô _, P_œÉ.id, by simp‚ü©
  | succ k h_rec =>
    have eq_1 : SimplexCategory.mk (m + k + 1) = SimplexCategory.mk (m + (k + 1)) := by
      rw [Nat.add_assoc]
    let f' := eqToHom eq_1 ‚â´ f
    have f'_epi : Epi f' := by apply epi_comp
    haveI : ¬¨(Function.Injective f'.toOrderHom) := by
      intro h
      rw [‚Üê SimplexCategory.mono_iff_injective] at h
      have le := SimplexCategory.len_lt_of_mono f'
        (by intro h0
            apply_fun (fun x ‚Ü¶ x.len) at h0
            simp only [SimplexCategory.len_mk] at h0
            linarith)
      simp only [SimplexCategory.len_mk] at le
      linarith
    obtain ‚ü®j‚ÇÄ, f‚ÇÄ, hf‚ÇÄ‚ü© := SimplexCategory.eq_œÉ_comp_of_not_injective _ this
    haveI : Epi f‚ÇÄ := by
      rw [hf‚ÇÄ] at f'_epi
      apply CategoryTheory.epi_of_epi (SimplexCategory.œÉ j‚ÇÄ)
    obtain ‚ü®g‚ÇÄ, hg‚ÇÄ‚ü© := h_rec f‚ÇÄ this
    use (œÉ j‚ÇÄ ‚â´ g‚ÇÄ)
    constructor
    ¬∑ exact P_œÉ_comp _ _ (P_œÉ.œÉ _) hg‚ÇÄ.left
    ¬∑ rw [Functor.map_comp, hg‚ÇÄ.right, toSimplexCategory_map_œÉ, ‚Üê hf‚ÇÄ]
      dsimp only [toSimplexCategory_obj_mk, eqToHom_refl, f']
      simp

/-- Every epimorphism in the usual simplex category can be uniquely represented in
`SimplexCategoryGenRel` by a morphism satisfying `P_œÉ`. -/
theorem existsUnique_P_œÉ_of_epi {m k : ‚Ñï} (f : SimplexCategory.mk (m + k) ‚ü∂ .mk m)
    (hf : Epi f) : ‚àÉ! (g : SimplexCategoryGenRel.mk (m + k) ‚ü∂ .mk m),
      P_œÉ g ‚àß toSimplexCategory.map g = f := by
  -- We already established existence.
  apply existsUnique_of_exists_of_unique (exists_P_œÉ_of_epi _ hf)
  rintro g‚ÇÅ g‚ÇÇ ‚ü®hg‚ÇÅ, hg‚ÇÅ'‚ü© ‚ü®hg‚ÇÇ, hg‚ÇÇ'‚ü©
  obtain ‚ü®L‚ÇÅ, m‚ÇÅ, b‚ÇÅ, he‚ÇÅ, he‚ÇÅ', hL‚ÇÅ, hL‚ÇÅ_adm, h_comp‚ÇÅ‚ü© := exists_normal_form_P_œÉ g‚ÇÅ hg‚ÇÅ
  obtain ‚ü®L‚ÇÇ, m‚ÇÇ, b‚ÇÇ, he‚ÇÇ, he‚ÇÇ', hL‚ÇÇ, hL‚ÇÇ_adm, h_comp‚ÇÇ‚ü© := exists_normal_form_P_œÉ g‚ÇÇ hg‚ÇÇ
  -- Eliminate as much eqToHom as we can by substitutions, this is just "noise".
  have h‚ÇÅ : m‚ÇÅ = m‚ÇÇ := by
    haveI := he‚ÇÇ.trans he‚ÇÅ.symm |>.symm
    apply_fun (fun x ‚Ü¶ x.len) at this
    exact this
  have h‚ÇÇ : m = m‚ÇÅ := by
    haveI := he‚ÇÅ.symm
    apply_fun (fun x ‚Ü¶ x.len) at this
    exact this
  subst h‚ÇÅ
  subst h‚ÇÇ
  have h‚ÇÉ : b‚ÇÅ = k := by
    haveI := he‚ÇÅ'.symm
    apply_fun (fun x ‚Ü¶ x.len) at this
    simpa using this
  have h‚ÇÑ : b‚ÇÇ = k := by
    haveI := he‚ÇÇ'.symm
    apply_fun (fun x ‚Ü¶ x.len) at this
    simpa using this
  subst h‚ÇÉ
  subst h‚ÇÑ
  symm at hL‚ÇÇ
  subst hL‚ÇÇ
  -- The "actual proof" starts here: it suffices to show the indices in the normal
  -- forms are the same, and they are characterized by simplicialEvalœÉ, which only cares
  -- about the order hom associated with the morphisms.
  suffices hL‚ÇÅ‚ÇÇ : L‚ÇÅ = L‚ÇÇ by
    subst hL‚ÇÅ‚ÇÇ
    rw [h_comp‚ÇÅ, h_comp‚ÇÇ]
  apply isAdmissible_ext L‚ÇÅ L‚ÇÇ hL‚ÇÅ_adm hL‚ÇÇ_adm
  intro x
  apply (mem_isAdmissible_iff L‚ÇÅ hL‚ÇÅ_adm x).trans
  rw [mem_isAdmissible_iff L‚ÇÇ hL‚ÇÇ_adm x]
  have h_length : L‚ÇÅ.length = L‚ÇÇ.length := by
    rwa [‚Üê hL‚ÇÇ] at hL‚ÇÅ
  rw [h_length]
  simp only [Nat.succ_eq_add_one, and_congr_right_iff]
  simp only [eqToHom_refl, Category.comp_id, Category.id_comp] at h_comp‚ÇÅ h_comp‚ÇÇ
  subst h_comp‚ÇÇ h_comp‚ÇÅ
  symm at hg‚ÇÅ'
  subst hg‚ÇÅ'
  intro hx
  rw [‚Üê simplicialEvalœÉ_of_isAdmissible L‚ÇÅ hL‚ÇÅ_adm L‚ÇÇ.length hL‚ÇÅ _ (hx.trans (lt_add_one _)),
    ‚Üê simplicialEvalœÉ_of_isAdmissible L‚ÇÇ hL‚ÇÇ_adm L‚ÇÇ.length rfl _ (hx.trans (lt_add_one _)),
    ‚Üê simplicialEvalœÉ_of_isAdmissible L‚ÇÅ hL‚ÇÅ_adm L‚ÇÇ.length hL‚ÇÅ _ (Nat.succ_lt_succ hx),
    ‚Üê simplicialEvalœÉ_of_isAdmissible L‚ÇÇ hL‚ÇÇ_adm L‚ÇÇ.length rfl _ (Nat.succ_lt_succ hx),
    hg‚ÇÇ' ]

-- Marked private as the stronger statement with unicity is below.
private lemma exists_P_Œ¥_of_mono {m k : ‚Ñï} (f : SimplexCategory.mk m ‚ü∂ .mk (m + k))
    (hf : Mono f) : ‚àÉ (g : SimplexCategoryGenRel.mk m ‚ü∂ .mk (m + k)),
      P_Œ¥ g ‚àß toSimplexCategory.map g = f := by
  induction k with
  | zero =>
    dsimp only [Nat.add_zero] at f
    haveI : f = ùüô _ := SimplexCategory.eq_id_of_mono _
    subst this
    exact ‚ü®ùüô _, P_Œ¥.id, by simp‚ü©
  | succ k h_rec =>
    have eq_1 : SimplexCategory.mk (m + k + 1) = SimplexCategory.mk (m + (k + 1)) := by
      rw [Nat.add_assoc]
    let f' := f ‚â´ eqToHom eq_1
    have f'_mono : Mono f' := by apply mono_comp
    haveI : ¬¨(Function.Surjective f'.toOrderHom) := by
      intro h
      rw [‚Üê SimplexCategory.epi_iff_surjective] at h
      have le := SimplexCategory.len_le_of_epi h
      simp only [SimplexCategory.len_mk] at le
      linarith
    obtain ‚ü®j‚ÇÄ, f‚ÇÄ, hf‚ÇÄ‚ü© := SimplexCategory.eq_comp_Œ¥_of_not_surjective _ this
    haveI : Mono f‚ÇÄ := by
      rw [hf‚ÇÄ] at f'_mono
      apply CategoryTheory.mono_of_mono (f := f‚ÇÄ) (g := SimplexCategory.Œ¥ j‚ÇÄ)
    obtain ‚ü®g‚ÇÄ, hg‚ÇÄ‚ü© := h_rec f‚ÇÄ this
    use (g‚ÇÄ ‚â´ Œ¥ j‚ÇÄ)
    constructor
    ¬∑ exact P_Œ¥_comp _ _ hg‚ÇÄ.left (P_Œ¥.Œ¥ _)
    ¬∑ rw [Functor.map_comp, hg‚ÇÄ.right, toSimplexCategory_map_Œ¥, ‚Üê hf‚ÇÄ]
      dsimp [f']
      simp

/-- Every epimorphism in the usual simplex category can be uniquely represented in
`SimplexCategoryGenRel` by a morphism satisfying `P_Œ¥`. -/
theorem existsUnique_P_Œ¥_of_mono {m k : ‚Ñï} (f : SimplexCategory.mk m ‚ü∂ .mk (m + k))
    (hf : Mono f) : ‚àÉ! (g : SimplexCategoryGenRel.mk m ‚ü∂ .mk (m + k)),
      P_Œ¥ g ‚àß toSimplexCategory.map g = f := by
  apply existsUnique_of_exists_of_unique (exists_P_Œ¥_of_mono _ hf)
  rintro g‚ÇÅ g‚ÇÇ ‚ü®hg‚ÇÅ, hg‚ÇÅ'‚ü© ‚ü®hg‚ÇÇ, hg‚ÇÇ'‚ü©
  obtain ‚ü®L‚ÇÅ, m‚ÇÅ, b‚ÇÅ, he‚ÇÅ, he‚ÇÅ', hL‚ÇÅ, hL‚ÇÅ_adm, h_comp‚ÇÅ‚ü© := exists_normal_form_P_Œ¥ g‚ÇÅ hg‚ÇÅ
  obtain ‚ü®L‚ÇÇ, m‚ÇÇ, b‚ÇÇ, he‚ÇÇ, he‚ÇÇ', hL‚ÇÇ, hL‚ÇÇ_adm, h_comp‚ÇÇ‚ü© := exists_normal_form_P_Œ¥ g‚ÇÇ hg‚ÇÇ
  -- Again get rid of eqToHoms by substitutions
  have h‚ÇÅ : m‚ÇÅ = m‚ÇÇ := congrArg (fun x ‚Ü¶ x.len) (he‚ÇÅ.symm.trans he‚ÇÇ)
  have h‚ÇÇ : m = m‚ÇÅ := congrArg (fun x ‚Ü¶ x.len) he‚ÇÅ
  subst h‚ÇÅ
  subst h‚ÇÇ
  have h‚ÇÉ : b‚ÇÅ = k := by simpa using (congrArg (fun x ‚Ü¶ x.len) he‚ÇÅ')
  have h‚ÇÑ : b‚ÇÇ = k := by simpa using (congrArg (fun x ‚Ü¶ x.len) he‚ÇÇ')
  subst h‚ÇÉ
  subst h‚ÇÑ
  symm at hL‚ÇÇ
  subst hL‚ÇÇ
  suffices hL‚ÇÅ‚ÇÇ : L‚ÇÅ = L‚ÇÇ by
    subst hL‚ÇÅ‚ÇÇ
    rw [h_comp‚ÇÅ, h_comp‚ÇÇ]
  simp only [eqToHom_refl, Category.comp_id, Category.id_comp] at h_comp‚ÇÅ h_comp‚ÇÇ
  apply eq_of_simplicialEvalŒ¥_eq L‚ÇÅ hL‚ÇÅ_adm L‚ÇÇ hL‚ÇÇ_adm
  ¬∑ intro x hx
    rw [‚Üê simplicialEvalŒ¥_of_isAdmissible L‚ÇÅ hL‚ÇÅ_adm L‚ÇÇ.length hL‚ÇÅ x hx,
      ‚Üê simplicialEvalŒ¥_of_isAdmissible L‚ÇÇ hL‚ÇÇ_adm L‚ÇÇ.length hL‚ÇÇ x hx,
      ‚Üê h_comp‚ÇÅ, ‚Üê h_comp‚ÇÇ, hg‚ÇÅ', hg‚ÇÇ']
  ¬∑ tauto

theorem existsUnique_toSimplexCategory_map
    {x y : SimplexCategoryGenRel}
    (f : toSimplexCategory.obj x ‚ü∂ toSimplexCategory.obj y)
    : ‚àÉ! g: x ‚ü∂ y, toSimplexCategory.map g = f := by
  -- First step is to factorize f as an epi followed by a mono
  let strong_fac_f := (Limits.HasStrongEpiMonoFactorisations.has_fac f).some
  let z := strong_fac_f.I
  let epi‚ÇÄ := strong_fac_f.toMonoFactorisation.e
  let mono‚ÇÄ := strong_fac_f.toMonoFactorisation.m
  have fac := strong_fac_f.fac
  induction' x with n
  induction' y with m
  haveI := SimplexCategory.len_le_of_epi
    (Limits.HasStrongEpiMonoFactorisations.has_fac f).some.e_strong_epi.epi
  obtain ‚ü®k, hk‚ü© := Nat.exists_eq_add_of_le this
  dsimp only [toSimplexCategory_obj_mk, SimplexCategory.len_mk] at hk
  let epi‚ÇÅ : SimplexCategory.mk (z.len + k) ‚ü∂ SimplexCategory.mk z.len :=
    eqToHom (by ext; simpa [z] using hk.symm) ‚â´ epi‚ÇÄ
  -- we already have existence and unicity for epis
  obtain ‚ü®e‚ÇÅ, ‚ü®P_œÉ_e‚ÇÅ, he‚ÇÅ‚ü©, he‚ÇÅ'‚ü© := existsUnique_P_œÉ_of_epi epi‚ÇÅ (by infer_instance)
  haveI := SimplexCategory.len_le_of_mono
    (Limits.HasStrongEpiMonoFactorisations.has_fac f).some.m_mono
  obtain ‚ü®l, hl‚ü© := Nat.exists_eq_add_of_le this
  dsimp only [toSimplexCategory_obj_mk, SimplexCategory.len_mk, z] at hl
  let mono‚ÇÅ : SimplexCategory.mk z.len ‚ü∂ SimplexCategory.mk (z.len + l) :=
     mono‚ÇÄ ‚â´ eqToHom (by ext; simpa [z] using hl)
  -- same for monos
  obtain ‚ü®m‚ÇÅ, ‚ü®P_Œ¥_m‚ÇÅ, hm‚ÇÅ‚ü©, hm‚ÇÅ'‚ü© := existsUnique_P_Œ¥_of_mono mono‚ÇÅ (by infer_instance)
  use eqToHom (by ext; tauto) ‚â´ e‚ÇÅ ‚â´ m‚ÇÅ ‚â´ eqToHom (by ext; tauto)
  -- this takes care of existence
  simp [he‚ÇÅ, hm‚ÇÅ, epi‚ÇÅ, mono‚ÇÅ, epi‚ÇÄ, mono‚ÇÄ, eqToHom_map]
  intro g hg
  -- for unicitiy, we use the uniqueness of epi-mono factorisation in SimplexCategory.
  -- plus unicity of e‚ÇÅ and m‚ÇÅ.
  obtain ‚ü®z‚ÇÅ, e‚ÇÇ, m‚ÇÇ, P_œÉ_e‚ÇÇ, P_Œ¥_m‚ÇÇ, fac‚ÇÇ‚ü© := exists_P_œÉ_P_Œ¥_factorisation g
  rw [fac‚ÇÇ] at hg
  haveI : Epi (toSimplexCategory.map e‚ÇÇ) := by
    apply (isSplitEpi_P_œÉ_toSimplexCategory P_œÉ_e‚ÇÇ).epi
  haveI : Mono (toSimplexCategory.map m‚ÇÇ) := by
    apply (isSplitMono_P_Œ¥_toSimplexCategory P_Œ¥_m‚ÇÇ).mono
  simp only [Functor.map_comp, toSimplexCategory_obj_mk, epi‚ÇÅ, z, epi‚ÇÄ, mono‚ÇÅ, mono‚ÇÄ] at hg
  have im‚ÇÅ := SimplexCategory.image_eq hg
  have im‚ÇÇ := SimplexCategory.image_eq fac
  have eq_z‚ÇÅ : z‚ÇÅ = mk z.len := by
    ext
    apply_fun (fun x ‚Ü¶ x.len) at im‚ÇÅ
    apply_fun (fun x ‚Ü¶ x.len) at im‚ÇÇ
    dsimp only [z]
    simp only [toSimplexCategory_len, mono‚ÇÅ, mono‚ÇÄ, z, epi‚ÇÅ, epi‚ÇÄ, strong_fac_f] at im‚ÇÅ
    exact im‚ÇÅ.symm.trans im‚ÇÇ
  generalize_proofs p‚ÇÅ p‚ÇÇ
  -- leveraging epi-mono factorisation unicity in SimplexCategory
  let e‚ÇÉ := toSimplexCategory.map e‚ÇÇ ‚â´ eqToHom im‚ÇÅ.symm
  let m‚ÇÉ := eqToHom im‚ÇÅ ‚â´ toSimplexCategory.map m‚ÇÇ
  have fac‚ÇÉ : e‚ÇÉ ‚â´ m‚ÇÉ = f := by simp [e‚ÇÉ, m‚ÇÉ, hg]
  have eq1 := SimplexCategory.image_Œπ_eq fac‚ÇÉ
  have eq2 := SimplexCategory.factorThruImage_eq fac‚ÇÉ
  let e‚ÇÑ := eqToHom ((by ext; simpa [z] using hk) : SimplexCategory.mk n = _) ‚â´ epi‚ÇÅ ‚â´
    eqToHom im‚ÇÇ.symm
  let m‚ÇÑ := eqToHom im‚ÇÇ ‚â´ mono‚ÇÅ ‚â´
    eqToHom ((by ext; simpa [z] using hl.symm) : _ = SimplexCategory.mk m)
  have fac‚ÇÑ : e‚ÇÑ ‚â´ m‚ÇÑ = f := by simpa [e‚ÇÑ, m‚ÇÑ, epi‚ÇÅ, mono‚ÇÅ, fac]
  have eq3 := SimplexCategory.image_Œπ_eq fac‚ÇÑ
  have eq4 := SimplexCategory.factorThruImage_eq fac‚ÇÑ
  -- Finally we can prove uniqueness of each morphisms
  -- Given that there are eqToHom everywhere, it will be better to show they are HEq.
  have eq‚ÇÅ := he‚ÇÅ' (eqToHom p‚ÇÅ.symm ‚â´ e‚ÇÇ ‚â´ eqToHom eq_z‚ÇÅ) ?_
  ¬∑ have eq‚ÇÇ := hm‚ÇÅ' (eqToHom eq_z‚ÇÅ.symm ‚â´ m‚ÇÇ ‚â´ eqToHom p‚ÇÇ.symm) ?_
    ¬∑ rw [‚Üê eq‚ÇÅ, ‚Üê eq‚ÇÇ]
      simpa
    ¬∑ constructor
      ¬∑ apply P_Œ¥_comp _ _ (P_Œ¥_eqToHom _)
        apply P_Œ¥_comp _ _ _ (P_Œ¥_eqToHom _)
        assumption
      ¬∑ simp only [toSimplexCategory_obj_mk, SimplexCategory.mk_len, Functor.map_comp, eqToHom_map,
          Category.assoc, eqToHom_trans, eqToHom_refl, Category.comp_id, m‚ÇÑ, mono‚ÇÅ, e‚ÇÑ, z, e‚ÇÉ, epi‚ÇÅ,
          epi‚ÇÄ, m‚ÇÉ] at eq1 eq3 ‚ä¢
        rw [‚Üê heq_iff_eq] at eq1 eq3 ‚ä¢
        simp only [heq_comp_eqToHom_iff, eqToHom_comp_heq_iff, comp_eqToHom_heq_iff,
          heq_eqToHom_comp_iff] at eq1 eq3 ‚ä¢
        rw [HEq.comm] at eq3 ‚ä¢
        exact HEq.trans eq3 eq1
  ¬∑ constructor
    ¬∑ apply P_œÉ_comp _ _ (P_œÉ_eqToHom _)
      apply P_œÉ_comp _ _ _ (P_œÉ_eqToHom _)
      assumption
    ¬∑ simp only [toSimplexCategory_obj_mk, SimplexCategory.mk_len, Functor.map_comp, eqToHom_map,
          Category.assoc, eqToHom_trans, eqToHom_refl, Category.comp_id, m‚ÇÑ, epi‚ÇÅ, e‚ÇÑ, z, e‚ÇÉ,
          m‚ÇÉ] at eq2 eq4 ‚ä¢
      rw [‚Üê heq_iff_eq] at eq2 eq4 ‚ä¢
      simp only [heq_comp_eqToHom_iff, eqToHom_comp_heq_iff, comp_eqToHom_heq_iff,
          heq_eqToHom_comp_iff] at eq2 eq4 ‚ä¢
      rw [HEq.comm] at eq4 ‚ä¢
      exact HEq.trans eq4 eq2

instance : toSimplexCategory.Full where
  map_surjective {x y} f := by
    obtain ‚ü®a, ha, _‚ü© := existsUnique_toSimplexCategory_map f
    exact ‚ü®a, ha‚ü©

instance : toSimplexCategory.Faithful where
  map_injective {x y} f g hfg := by
    obtain ‚ü®a, ha, u‚ü© := existsUnique_toSimplexCategory_map (toSimplexCategory.map f)
    exact (u f rfl).trans (u g hfg.symm).symm

instance : toSimplexCategory.EssSurj where
  mem_essImage x := by
    let y := SimplexCategoryGenRel.mk (x.len)
    haveI : toSimplexCategory.obj y ‚âÖ x := Iso.refl _
    apply Functor.essImage.ofIso this
    exact toSimplexCategory.obj_mem_essImage _

instance : toSimplexCategory.IsEquivalence := by
  apply Functor.IsEquivalence.mk <;> infer_instance

/-- The equivalence between `SimplexCategoryGenRel` and `SimplexCategory`. -/
noncomputable def equivSimplexCategory : SimplexCategoryGenRel ‚âå SimplexCategory :=
  toSimplexCategory.asEquivalence

@[simp]
lemma equivSimplexCategory_functor_obj_mk (n : ‚Ñï) :
    equivSimplexCategory.functor.obj (mk n) = .mk n := by
  rfl

@[simp]
lemma equivSimplexCategory_functor_map_œÉ (n : ‚Ñï) (i : Fin (n + 1)) :
    equivSimplexCategory.functor.map (œÉ i) = SimplexCategory.œÉ i := by
  rfl

@[simp]
lemma equivSimplexCategory_functor_map_Œ¥ (n : ‚Ñï) (i : Fin (n + 2)) :
    equivSimplexCategory.functor.map (Œ¥ i) = SimplexCategory.Œ¥ i := by
  rfl

/-- The inverse of equivSimplexCategory at `SimplexCategory.mk n` is isomorphism to
`SimplexCategoryGenRel.mk n`. -/
noncomputable def equivSimplexCategory_inverse_objIsoMk (n : ‚Ñï) :
    equivSimplexCategory.inverse.obj (.mk n) ‚âÖ mk n :=
  (equivSimplexCategory.unitIso.app (mk n)).symm

/-- The inverse of equivSimplexCategory sends the degeneracies to degeneracies, up to
conjugation by the isomorphism `equivSimplexCategory_inverse_objIsoMk`. -/
@[simp]
lemma equivSimplexCategory_inverse_map_œÉ (n : ‚Ñï) (i : Fin (n + 1)) :
   (equivSimplexCategory_inverse_objIsoMk (n + 1)).inv ‚â´
      equivSimplexCategory.inverse.map (SimplexCategory.œÉ i) ‚â´
        (equivSimplexCategory_inverse_objIsoMk n).hom  = œÉ i := by
  apply equivSimplexCategory.functor.map_injective
  simp only [equivSimplexCategory_functor_obj_mk, equivSimplexCategory_inverse_objIsoMk,
    Functor.id_obj, Functor.comp_obj, Iso.symm_inv, Iso.app_hom, Iso.symm_hom, Iso.app_inv,
    Functor.map_comp, Equivalence.fun_inv_map, Category.assoc, equivSimplexCategory_functor_map_œÉ]
  conv_lhs =>
    right
    left
    change equivSimplexCategory.counitIso.hom.app (equivSimplexCategory.functor.obj (mk (n + 1)))
  rw [reassoc_of%(equivSimplexCategory.functor_unitIso_comp (mk (n + 1)))]
  conv_lhs =>
    right
    left
    change equivSimplexCategory.counitInv.app (equivSimplexCategory.functor.obj (mk n))
  rw [equivSimplexCategory.counitInv_app_functor (mk n), ‚Üê Functor.map_comp]
  simp

/-- The inverse of equivSimplexCategory sends the faces to faces, up to
conjugation by the isomorphism `equivSimplexCategory_inverse_objIsoMk`. -/
@[simp]
lemma equivSimplexCategory_inverse_Œ¥ (n : ‚Ñï) (i : Fin (n + 2)):
   (equivSimplexCategory_inverse_objIsoMk n).inv ‚â´
      equivSimplexCategory.inverse.map (SimplexCategory.Œ¥ i) ‚â´
        (equivSimplexCategory_inverse_objIsoMk (n + 1)).hom  = Œ¥ i := by
  apply equivSimplexCategory.functor.map_injective
  simp only [equivSimplexCategory_functor_obj_mk, equivSimplexCategory_inverse_objIsoMk,
    Functor.id_obj, Functor.comp_obj, Iso.symm_inv, Iso.app_hom, Iso.symm_hom, Iso.app_inv,
    Functor.map_comp, Equivalence.fun_inv_map, Category.assoc, equivSimplexCategory_functor_map_Œ¥]
  conv_lhs =>
    right
    left
    change equivSimplexCategory.counitIso.hom.app (equivSimplexCategory.functor.obj (mk n))
  rw [reassoc_of%(equivSimplexCategory.functor_unitIso_comp (mk n))]
  conv_lhs =>
    right
    left
    change equivSimplexCategory.counitInv.app (equivSimplexCategory.functor.obj (mk (n + 1)))
  rw [equivSimplexCategory.counitInv_app_functor (mk (n + 1)), ‚Üê Functor.map_comp]
  simp

end EquivalenceWithSimplexCategory

end SimplexCategoryGenRel
