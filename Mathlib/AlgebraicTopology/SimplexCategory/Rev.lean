/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.SimplexCategory.Basic

/-!
# The covariant involution of the simplex category

In this file, we introduce the functor `rev : SimplexCategory ‚•§ SimplexCategory`
which, via the equivalence between the simplex category and the
category of nonempty finite linearly ordered types, corresponds to
the *covariant* functor which sends a type `Œ±` to `Œ±·µí·µà`.

-/

open CategoryTheory

namespace SimplexCategory

/-- The covariant involution `rev : SimplexCategory ‚•§ SimplexCategory` which,
via the equivalence between the simplex category and the
category of nonempty finite linearly ordered types, corresponds to
the *covariant* functor which sends a type `Œ±` to `Œ±·µí·µà`.
This functor sends the object `‚¶ãn‚¶å` to `‚¶ãn‚¶å` and a map `f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å`
is sent to the monotone map `(i : Fin (n + 1)) ‚Ü¶ (f i.rev).rev`. -/
@[simps obj]
def rev : SimplexCategory ‚•§ SimplexCategory where
  obj n := n
  map {n m} f := Hom.mk ‚ü®fun i ‚Ü¶ (f i.rev).rev, fun i j hij ‚Ü¶ by
    rw [Fin.rev_le_rev]
    exact f.toOrderHom.monotone (by rwa [Fin.rev_le_rev])‚ü©

@[simp]
lemma rev_map_apply {n m : SimplexCategory} (f : n ‚ü∂ m) (i : Fin (n.len + 1)) :
    (rev.map f).toOrderHom (a := n) (b := m) i = (f.toOrderHom i.rev).rev := by
  rfl

@[simp]
lemma rev_map_Œ¥ {n : ‚Ñï} (i : Fin (n + 2)) :
    rev.map (Œ¥ i) = Œ¥ i.rev := by
  ext j : 3
  rw [rev_map_apply]
  dsimp [Œ¥]
  rw [Fin.succAbove_rev_right, Fin.rev_rev]

@[simp]
lemma rev_map_œÉ {n : ‚Ñï} (i : Fin (n + 1)) :
    rev.map (œÉ i) = œÉ i.rev := by
  ext j : 3
  rw [rev_map_apply]
  dsimp [œÉ]
  rw [Fin.predAbove_rev_right, Fin.rev_rev]

/-- The functor `SimplexCategory.rev : SimplexCategory ‚•§ SimplexCategory`
is a covariant involution. -/
@[simps!]
def revCompRevIso : rev ‚ãô rev ‚âÖ ùü≠ _ :=
  NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _)

@[simp]
lemma rev_map_rev_map {n m : SimplexCategory} (f : n ‚ü∂ m) :
    rev.map (rev.map f) = f := by
  aesop

/-- The functor `SimplexCategory.rev : SimplexCategory ‚•§ SimplexCategory`
as an equivalence of category. -/
@[simps]
def revEquivalence : SimplexCategory ‚âå SimplexCategory where
  functor := rev
  inverse := rev
  unitIso := revCompRevIso.symm
  counitIso := revCompRevIso

end SimplexCategory
