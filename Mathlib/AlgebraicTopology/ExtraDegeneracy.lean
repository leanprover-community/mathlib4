/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.AlternatingFaceMapComplex
import Mathlib.AlgebraicTopology.SimplicialSet
import Mathlib.AlgebraicTopology.CechNerve
import Mathlib.Algebra.Homology.Homotopy
import Mathlib.Tactic.FinCases

#align_import algebraic_topology.extra_degeneracy from "leanprover-community/mathlib"@"324a7502510e835cdbd3de1519b6c66b51fb2467"

/-!

# Augmented simplicial objects with an extra degeneracy

In simplicial homotopy theory, in order to prove that the connected components
of a simplicial set `X` are contractible, it suffices to construct an extra
degeneracy as it is defined in *Simplicial Homotopy Theory* by Goerss-Jardine p. 190.
It consists of a series of maps `œÄ‚ÇÄ X ‚Üí X _[0]` and `X _[n] ‚Üí X _[n+1]` which
behave formally like an extra degeneracy `œÉ (-1)`. It can be thought as a datum
associated to the augmented simplicial set `X ‚Üí œÄ‚ÇÄ X`.

In this file, we adapt this definition to the case of augmented
simplicial objects in any category.

## Main definitions

- the structure `ExtraDegeneracy X` for any `X : SimplicialObject.Augmented C`
- `ExtraDegeneracy.map`: extra degeneracies are preserved by the application of any
functor `C ‚•§ D`
- `SSet.Augmented.StandardSimplex.extraDegeneracy`: the standard `n`-simplex has
an extra degeneracy
- `Arrow.AugmentedCechNerve.extraDegeneracy`: the ƒåech nerve of a split
epimorphism has an extra degeneracy
- `ExtraDegeneracy.homotopyEquiv`: in the case the category `C` is preadditive,
if we have an extra degeneracy on `X : SimplicialObject.Augmented C`, then
the augmentation on the alternating face map complex of `X` is a homotopy
equivalence.

## References
* [Paul G. Goerss, John F. Jardine, *Simplical Homotopy Theory*][goerss-jardine-2009]

-/


open CategoryTheory Category SimplicialObject.Augmented Opposite Simplicial

namespace SimplicialObject

namespace Augmented

variable {C : Type*} [Category C]

-- porting note: in the formulation of the axioms `s_comp_Œ¥‚ÇÄ`, etc, `drop.obj X` has been
-- replaced by `X.left` in order to have lemmas with LHS/RHS in normal form
/-- The datum of an extra degeneracy is a technical condition on
augmented simplicial objects. The morphisms `s'` and `s n` of the
structure formally behave like extra degeneracies `œÉ (-1)`. -/
@[ext]
structure ExtraDegeneracy (X : SimplicialObject.Augmented C) where
  s' : point.obj X ‚ü∂ drop.obj X _[0]
  s : ‚àÄ n : ‚Ñï, drop.obj X _[n] ‚ü∂ drop.obj X _[n + 1]
  s'_comp_Œµ : s' ‚â´ X.hom.app (op [0]) = ùüô _
  s‚ÇÄ_comp_Œ¥‚ÇÅ : s 0 ‚â´ X.left.Œ¥ 1 = X.hom.app (op [0]) ‚â´ s'
  s_comp_Œ¥‚ÇÄ : ‚àÄ n : ‚Ñï, s n ‚â´ X.left.Œ¥ 0 = ùüô _
  s_comp_Œ¥ :
    ‚àÄ (n : ‚Ñï) (i : Fin (n + 2)), s (n + 1) ‚â´ X.left.Œ¥ i.succ = X.left.Œ¥ i ‚â´ s n
  s_comp_œÉ :
    ‚àÄ (n : ‚Ñï) (i : Fin (n + 1)), s n ‚â´ X.left.œÉ i.succ = X.left.œÉ i ‚â´ s (n + 1)
#align simplicial_object.augmented.extra_degeneracy SimplicialObject.Augmented.ExtraDegeneracy

namespace ExtraDegeneracy

attribute [reassoc] s‚ÇÄ_comp_Œ¥‚ÇÅ s_comp_Œ¥ s_comp_œÉ
attribute [reassoc (attr := simp)] s'_comp_Œµ s_comp_Œ¥‚ÇÄ

/-- If `ed` is an extra degeneracy for `X : SimplicialObject.Augmented C` and
`F : C ‚•§ D` is a functor, then `ed.map F` is an extra degeneracy for the
augmented simplical object in `D` obtained by applying `F` to `X`. -/
def map {D : Type*} [Category D] {X : SimplicialObject.Augmented C} (ed : ExtraDegeneracy X)
    (F : C ‚•§ D) : ExtraDegeneracy (((whiskering _ _).obj F).obj X) where
  s' := F.map ed.s'
  s n := F.map (ed.s n)
  s'_comp_Œµ := by
    dsimp
    erw [comp_id, ‚Üê F.map_comp, ed.s'_comp_Œµ, F.map_id]
  s‚ÇÄ_comp_Œ¥‚ÇÅ := by
    dsimp
    erw [comp_id, ‚Üê F.map_comp, ‚Üê F.map_comp, ed.s‚ÇÄ_comp_Œ¥‚ÇÅ]
  s_comp_Œ¥‚ÇÄ n := by
    dsimp
    erw [‚Üê F.map_comp, ed.s_comp_Œ¥‚ÇÄ, F.map_id]
  s_comp_Œ¥ n i := by
    dsimp
    erw [‚Üê F.map_comp, ‚Üê F.map_comp, ed.s_comp_Œ¥]
    rfl
  s_comp_œÉ n i := by
    dsimp
    erw [‚Üê F.map_comp, ‚Üê F.map_comp, ed.s_comp_œÉ]
    rfl
#align simplicial_object.augmented.extra_degeneracy.map SimplicialObject.Augmented.ExtraDegeneracy.map

/-- If `X` and `Y` are isomorphic augmented simplicial objects, then an extra
degeneracy for `X` gives also an extra degeneracy for `Y` -/
def ofIso {X Y : SimplicialObject.Augmented C} (e : X ‚âÖ Y) (ed : ExtraDegeneracy X) :
    ExtraDegeneracy Y where
  s' := (point.mapIso e).inv ‚â´ ed.s' ‚â´ (drop.mapIso e).hom.app (op [0])
  s n := (drop.mapIso e).inv.app (op [n]) ‚â´ ed.s n ‚â´ (drop.mapIso e).hom.app (op [n + 1])
  s'_comp_Œµ := by
    simpa only [Functor.mapIso, assoc, w‚ÇÄ, ed.s'_comp_Œµ_assoc] using (point.mapIso e).inv_hom_id
  s‚ÇÄ_comp_Œ¥‚ÇÅ := by
    have h := w‚ÇÄ e.inv
    dsimp at h ‚ä¢
    simp only [assoc, ‚Üê SimplicialObject.Œ¥_naturality, ed.s‚ÇÄ_comp_Œ¥‚ÇÅ_assoc, reassoc_of% h]
  s_comp_Œ¥‚ÇÄ n := by
    have h := ed.s_comp_Œ¥‚ÇÄ
    dsimp at h ‚ä¢
    simpa only [assoc, ‚Üê SimplicialObject.Œ¥_naturality, reassoc_of% h] using
      congr_app (drop.mapIso e).inv_hom_id (op [n])
  s_comp_Œ¥ n i := by
    have h := ed.s_comp_Œ¥ n i
    dsimp at h ‚ä¢
    simp only [assoc, ‚Üê SimplicialObject.Œ¥_naturality, reassoc_of% h,
      ‚Üê SimplicialObject.Œ¥_naturality_assoc]
  s_comp_œÉ n i := by
    have h := ed.s_comp_œÉ n i
    dsimp at h ‚ä¢
    simp only [assoc, ‚Üê SimplicialObject.œÉ_naturality, reassoc_of% h,
      ‚Üê SimplicialObject.œÉ_naturality_assoc]
#align simplicial_object.augmented.extra_degeneracy.of_iso SimplicialObject.Augmented.ExtraDegeneracy.ofIso

end ExtraDegeneracy

end Augmented

end SimplicialObject

namespace SSet

namespace Augmented

namespace StandardSimplex

/-- When `[HasZero X]`, the shift of a map `f : Fin n ‚Üí X`
is a map `Fin (n+1) ‚Üí X` which sends `0` to `0` and `i.succ` to `f i`. -/
def shiftFun {n : ‚Ñï} {X : Type*} [Zero X] (f : Fin n ‚Üí X) (i : Fin (n + 1)) : X :=
  dite (i = 0) (fun _ => 0) fun h => f (i.pred h)
set_option linter.uppercaseLean3 false in
#align sSet.augmented.standard_simplex.shift_fun SSet.Augmented.StandardSimplex.shiftFun

@[simp]
theorem shiftFun_0 {n : ‚Ñï} {X : Type*} [Zero X] (f : Fin n ‚Üí X) : shiftFun f 0 = 0 :=
  rfl
set_option linter.uppercaseLean3 false in
#align sSet.augmented.standard_simplex.shift_fun_0 SSet.Augmented.StandardSimplex.shiftFun_0

@[simp]
theorem shiftFun_succ {n : ‚Ñï} {X : Type*} [Zero X] (f : Fin n ‚Üí X) (i : Fin n) :
    shiftFun f i.succ = f i := by
  dsimp [shiftFun]
  split_ifs with h
  ¬∑ exfalso
    simp only [Fin.ext_iff, Fin.val_succ, Fin.val_zero, add_eq_zero, and_false] at h
  ¬∑ simp only [Fin.pred_succ]
set_option linter.uppercaseLean3 false in
#align sSet.augmented.standard_simplex.shift_fun_succ SSet.Augmented.StandardSimplex.shiftFun_succ

/-- The shift of a morphism `f : [n] ‚Üí Œî` in `SimplexCategory` corresponds to
the monotone map which sends `0` to `0` and `i.succ` to `f.to_order_hom i`. -/
@[simp]
def shift {n : ‚Ñï} {Œî : SimplexCategory}
    (f : ([n] : SimplexCategory) ‚ü∂ Œî) : ([n + 1] : SimplexCategory) ‚ü∂ Œî :=
  SimplexCategory.Hom.mk
    { toFun := shiftFun f.toOrderHom
      monotone' := fun i‚ÇÅ i‚ÇÇ hi => by
        by_cases h‚ÇÅ : i‚ÇÅ = 0
        ¬∑ subst h‚ÇÅ
          simp only [shiftFun_0, Fin.zero_le]
        ¬∑ have h‚ÇÇ : i‚ÇÇ ‚â† 0 := by
            intro h‚ÇÇ
            subst h‚ÇÇ
            exact h‚ÇÅ (le_antisymm hi (Fin.zero_le _))
          cases' Fin.eq_succ_of_ne_zero h‚ÇÅ with j‚ÇÅ hj‚ÇÅ
          cases' Fin.eq_succ_of_ne_zero h‚ÇÇ with j‚ÇÇ hj‚ÇÇ
          substs hj‚ÇÅ hj‚ÇÇ
          simpa only [shiftFun_succ] using f.toOrderHom.monotone (Fin.succ_le_succ_iff.mp hi) }
set_option linter.uppercaseLean3 false in
#align sSet.augmented.standard_simplex.shift SSet.Augmented.StandardSimplex.shift

/-- The obvious extra degeneracy on the standard simplex. -/
protected noncomputable def extraDegeneracy (Œî : SimplexCategory) :
    SimplicialObject.Augmented.ExtraDegeneracy (standardSimplex.obj Œî) where
  s' _ := SimplexCategory.Hom.mk (OrderHom.const _ 0)
  s n f := shift f
  s'_comp_Œµ := by
    dsimp
    apply Subsingleton.elim
  s‚ÇÄ_comp_Œ¥‚ÇÅ := by
    ext1 x
    apply SimplexCategory.Hom.ext
    ext j
    fin_cases j
    rfl
  s_comp_Œ¥‚ÇÄ n := by
    ext1 œÜ
    apply SimplexCategory.Hom.ext
    ext i : 2
    dsimp [SimplicialObject.Œ¥, SimplexCategory.Œ¥, SSet.standardSimplex]
    simp only [shiftFun_succ]
  s_comp_Œ¥ n i := by
    ext1 œÜ
    apply SimplexCategory.Hom.ext
    ext j : 2
    dsimp [SimplicialObject.Œ¥, SimplexCategory.Œ¥, SSet.standardSimplex]
    by_cases j = 0
    ¬∑ subst h
      simp only [Fin.succ_succAbove_zero, shiftFun_0]
    ¬∑ obtain ‚ü®_, rfl‚ü© := Fin.eq_succ_of_ne_zero <| h
      simp only [Fin.succ_succAbove_succ, shiftFun_succ, Function.comp_apply,
        Fin.succAboveEmb_apply]
  s_comp_œÉ n i := by
    ext1 œÜ
    apply SimplexCategory.Hom.ext
    ext j : 2
    dsimp [SimplicialObject.œÉ, SimplexCategory.œÉ, SSet.standardSimplex]
    by_cases j = 0
    ¬∑ subst h
      simp only [shiftFun_0]
      exact shiftFun_0 œÜ.toOrderHom
    ¬∑ obtain ‚ü®_, rfl‚ü© := Fin.eq_succ_of_ne_zero h
      simp only [Fin.succ_predAbove_succ, shiftFun_succ, Function.comp_apply]
set_option linter.uppercaseLean3 false in
#align sSet.augmented.standard_simplex.extra_degeneracy SSet.Augmented.StandardSimplex.extraDegeneracy

instance nonempty_extraDegeneracy_standardSimplex (Œî : SimplexCategory) :
    Nonempty (SimplicialObject.Augmented.ExtraDegeneracy (standardSimplex.obj Œî)) :=
  ‚ü®StandardSimplex.extraDegeneracy Œî‚ü©
set_option linter.uppercaseLean3 false in
#align sSet.augmented.standard_simplex.nonempty_extra_degeneracy_standard_simplex SSet.Augmented.StandardSimplex.nonempty_extraDegeneracy_standardSimplex

end StandardSimplex

end Augmented

end SSet

namespace CategoryTheory

open Limits

namespace Arrow

namespace AugmentedCechNerve

variable {C : Type*} [Category C] (f : Arrow C)
  [‚àÄ n : ‚Ñï, HasWidePullback f.right (fun _ : Fin (n + 1) => f.left) fun _ => f.hom]
  (S : SplitEpi f.hom)

/-- The extra degeneracy map on the ƒåech nerve of a split epi. It is
given on the `0`-projection by the given section of the split epi,
and by shifting the indices on the other projections. -/
noncomputable def ExtraDegeneracy.s (n : ‚Ñï) :
    f.cechNerve.obj (op [n]) ‚ü∂ f.cechNerve.obj (op [n + 1]) :=
  WidePullback.lift (WidePullback.base _)
    (fun i =>
      dite (i = 0)
        (fun _ => WidePullback.base _ ‚â´ S.section_)
        (fun h => WidePullback.œÄ _ (i.pred h)))
    fun i => by
      dsimp
      split_ifs with h
      ¬∑ subst h
        simp only [assoc, SplitEpi.id, comp_id]
      ¬∑ simp only [WidePullback.œÄ_arrow]
#align category_theory.arrow.augmented_cech_nerve.extra_degeneracy.s CategoryTheory.Arrow.AugmentedCechNerve.ExtraDegeneracy.s

-- porting note: @[simp] removed as the linter complains the LHS is not in normal form
theorem ExtraDegeneracy.s_comp_œÄ_0 (n : ‚Ñï) :
    ExtraDegeneracy.s f S n ‚â´ WidePullback.œÄ _ 0 =
      @WidePullback.base _ _ _ f.right (fun _ : Fin (n + 1) => f.left) (fun _ => f.hom) _ ‚â´
        S.section_ := by
  dsimp [ExtraDegeneracy.s]
  simp only [WidePullback.lift_œÄ]
  rfl

-- porting note: @[simp] removed as the linter complains the LHS is not in normal form
theorem ExtraDegeneracy.s_comp_œÄ_succ (n : ‚Ñï) (i : Fin (n + 1)) :
    ExtraDegeneracy.s f S n ‚â´ WidePullback.œÄ _ i.succ =
      @WidePullback.œÄ _ _ _ f.right (fun _ : Fin (n + 1) => f.left) (fun _ => f.hom) _ i := by
  dsimp [ExtraDegeneracy.s]
  simp only [WidePullback.lift_œÄ]
  split_ifs with h
  ¬∑ simp only [Fin.ext_iff, Fin.val_succ, Fin.val_zero, add_eq_zero, and_false] at h
  ¬∑ simp only [Fin.pred_succ]
#align category_theory.arrow.augmented_cech_nerve.extra_degeneracy.s_comp_œÄ_succ CategoryTheory.Arrow.AugmentedCechNerve.ExtraDegeneracy.s_comp_œÄ_succ

-- porting note: @[simp] removed as the linter complains the LHS is not in normal form
theorem ExtraDegeneracy.s_comp_base (n : ‚Ñï) :
    ExtraDegeneracy.s f S n ‚â´ WidePullback.base _ = WidePullback.base _ := by
  apply WidePullback.lift_base
#align category_theory.arrow.augmented_cech_nerve.extra_degeneracy.s_comp_base CategoryTheory.Arrow.AugmentedCechNerve.ExtraDegeneracy.s_comp_base

/-- The augmented ƒåech nerve associated to a split epimorphism has an extra degeneracy. -/
noncomputable def extraDegeneracy : SimplicialObject.Augmented.ExtraDegeneracy f.augmentedCechNerve
    where
  s' := S.section_ ‚â´ WidePullback.lift f.hom (fun _ => ùüô _) fun i => by rw [id_comp]
  s n := ExtraDegeneracy.s f S n
  s'_comp_Œµ := by
    dsimp
    simp only [augmentedCechNerve_hom_app, assoc, WidePullback.lift_base, SplitEpi.id]
  s‚ÇÄ_comp_Œ¥‚ÇÅ := by
    dsimp [cechNerve, SimplicialObject.Œ¥, SimplexCategory.Œ¥]
    ext j
    ¬∑ fin_cases j
      simpa only [assoc, WidePullback.lift_œÄ, comp_id] using ExtraDegeneracy.s_comp_œÄ_0 f S 0
    ¬∑ simpa only [assoc, WidePullback.lift_base, SplitEpi.id, comp_id] using
        ExtraDegeneracy.s_comp_base f S 0
  s_comp_Œ¥‚ÇÄ n := by
    dsimp [cechNerve, SimplicialObject.Œ¥, SimplexCategory.Œ¥]
    ext j
    ¬∑ simpa only [assoc, WidePullback.lift_œÄ, id_comp] using ExtraDegeneracy.s_comp_œÄ_succ f S n j
    ¬∑ simpa only [assoc, WidePullback.lift_base, id_comp] using ExtraDegeneracy.s_comp_base f S n
  s_comp_Œ¥ n i := by
    dsimp [cechNerve, SimplicialObject.Œ¥, SimplexCategory.Œ¥]
    ext j
    ¬∑ simp only [assoc, WidePullback.lift_œÄ]
      by_cases j = 0
      ¬∑ subst h
        erw [Fin.succ_succAbove_zero, ExtraDegeneracy.s_comp_œÄ_0, ExtraDegeneracy.s_comp_œÄ_0]
        dsimp
        simp only [WidePullback.lift_base_assoc]
      ¬∑ cases' Fin.eq_succ_of_ne_zero h with k hk
        subst hk
        erw [Fin.succ_succAbove_succ, ExtraDegeneracy.s_comp_œÄ_succ,
          ExtraDegeneracy.s_comp_œÄ_succ]
        simp only [WidePullback.lift_œÄ]
    ¬∑ simp only [assoc, WidePullback.lift_base]
      erw [ExtraDegeneracy.s_comp_base, ExtraDegeneracy.s_comp_base]
      dsimp
      simp only [WidePullback.lift_base]
  s_comp_œÉ n i := by
    dsimp [cechNerve, SimplicialObject.œÉ, SimplexCategory.œÉ]
    ext j
    ¬∑ simp only [assoc, WidePullback.lift_œÄ]
      by_cases j = 0
      ¬∑ subst h
        erw [ExtraDegeneracy.s_comp_œÄ_0, ExtraDegeneracy.s_comp_œÄ_0]
        dsimp
        simp only [WidePullback.lift_base_assoc]
      ¬∑ cases' Fin.eq_succ_of_ne_zero h with k hk
        subst hk
        erw [Fin.succ_predAbove_succ, ExtraDegeneracy.s_comp_œÄ_succ,
          ExtraDegeneracy.s_comp_œÄ_succ]
        simp only [WidePullback.lift_œÄ]
    ¬∑ simp only [assoc, WidePullback.lift_base]
      erw [ExtraDegeneracy.s_comp_base, ExtraDegeneracy.s_comp_base]
      dsimp
      simp only [WidePullback.lift_base]
#align category_theory.arrow.augmented_cech_nerve.extra_degeneracy CategoryTheory.Arrow.AugmentedCechNerve.extraDegeneracy

end AugmentedCechNerve

end Arrow

end CategoryTheory

namespace SimplicialObject

namespace Augmented

namespace ExtraDegeneracy

open AlgebraicTopology CategoryTheory Limits

/-- If `C` is a preadditive category and `X` is an augmented simplicial object
in `C` that has an extra degeneracy, then the augmentation on the alternating
face map complex of `X` is a homotopy equivalence. -/
noncomputable def homotopyEquiv {C : Type*} [Category C] [Preadditive C] [HasZeroObject C]
    {X : SimplicialObject.Augmented C} (ed : ExtraDegeneracy X) :
    HomotopyEquiv (AlgebraicTopology.AlternatingFaceMapComplex.obj (drop.obj X))
      ((ChainComplex.single‚ÇÄ C).obj (point.obj X)) where
  hom := AlternatingFaceMapComplex.Œµ.app X
  inv := (ChainComplex.fromSingle‚ÇÄEquiv _ _).symm (by exact ed.s')
  homotopyInvHomId := Homotopy.ofEq (by
    ext
    dsimp
    erw [AlternatingFaceMapComplex.Œµ_app_f_zero,
      ChainComplex.fromSingle‚ÇÄEquiv_symm_apply_f_zero, s'_comp_Œµ]
    rfl)
  homotopyHomInvId :=
    { hom := fun i j => by
        by_cases i + 1 = j
        ¬∑ exact (-ed.s i) ‚â´ eqToHom (by congr)
        ¬∑ exact 0
      zero := fun i j hij => by
        dsimp
        split_ifs with h
        ¬∑ exfalso
          exact hij h
        ¬∑ simp only [eq_self_iff_true]
      comm := fun i => by
        rcases i with _|i
        ¬∑ rw [Homotopy.prevD_chainComplex, Homotopy.dNext_zero_chainComplex, zero_add]
          dsimp
          erw [ChainComplex.fromSingle‚ÇÄEquiv_symm_apply_f_zero]
          simp only [comp_id, ite_true, zero_add, ComplexShape.down_Rel, not_true,
            AlternatingFaceMapComplex.obj_d_eq, Preadditive.neg_comp]
          rw [Fin.sum_univ_two]
          simp only [Fin.val_zero, pow_zero, one_smul, Fin.val_one, pow_one, neg_smul,
            Preadditive.comp_add, s_comp_Œ¥‚ÇÄ, drop_obj, Preadditive.comp_neg, neg_add_rev,
            neg_neg, neg_add_cancel_right, s‚ÇÄ_comp_Œ¥‚ÇÅ,
            AlternatingFaceMapComplex.Œµ_app_f_zero]
        ¬∑ rw [Homotopy.prevD_chainComplex, Homotopy.dNext_succ_chainComplex]
          dsimp
          simp only [Preadditive.neg_comp,
            AlternatingFaceMapComplex.obj_d_eq, comp_id, ite_true, Preadditive.comp_neg,
            @Fin.sum_univ_succ _ _ (i + 2), Fin.val_zero, pow_zero, one_smul, Fin.val_succ,
            Preadditive.comp_add, drop_obj, s_comp_Œ¥‚ÇÄ, Preadditive.sum_comp,
            Preadditive.zsmul_comp, Preadditive.comp_sum, Preadditive.comp_zsmul,
            zsmul_neg, s_comp_Œ¥, pow_add, pow_one, mul_neg, mul_one, neg_zsmul, neg_neg,
            neg_add_cancel_comm_assoc, add_left_neg, zero_comp] }
#align simplicial_object.augmented.extra_degeneracy.homotopy_equiv SimplicialObject.Augmented.ExtraDegeneracy.homotopyEquiv

end ExtraDegeneracy

end Augmented

end SimplicialObject
