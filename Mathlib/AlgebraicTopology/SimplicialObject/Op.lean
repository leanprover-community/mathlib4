/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.SimplexCategory.Rev
import Mathlib.AlgebraicTopology.SimplicialObject.Basic

/-!
# The covariant involution of the category of simplicial objects

In this file, we define the covariant involution `SimplicialObject.opFunctor`
of the category of simplicial objects that is induced by the
covariant involution `SimplexCategory.rev : SimplexCategory ‚•§ SimplexCategory`.

-/

universe v

open CategoryTheory

namespace SimplicialObject

variable {C : Type*} [Category.{v} C]

/-- The covariant involution of the category of simplicial objects
that is induced by the involution
`SimplexCategory.rev : SimplexCategory ‚•§ SimplexCategory`. -/
def opFunctor : SimplicialObject C ‚•§ SimplicialObject C :=
  (Functor.whiskeringLeft _ _ _).obj SimplexCategory.rev.op

/-- The isomorphism `(opFunctor.obj X).obj n ‚âÖ X.obj n` when `X` is a simplicial object. -/
def opObjIso {X : SimplicialObject C} {n : SimplexCategory·µí·µñ} :
    (opFunctor.obj X).obj n ‚âÖ X.obj n := Iso.refl _

@[simp]
lemma opFunctor_map_app {X Y : SimplicialObject C} (f : X ‚ü∂ Y) (n : SimplexCategory·µí·µñ) :
    (opFunctor.map f).app n = opObjIso.hom ‚â´ f.app n ‚â´ opObjIso.inv := by
  simp [opFunctor, opObjIso]

@[simp]
lemma opFunctor_obj_map (X : SimplicialObject C) {n m : SimplexCategory·µí·µñ} (f : n ‚ü∂ m) :
    (opFunctor.obj X).map f =
      opObjIso.hom ‚â´ X.map (SimplexCategory.rev.map f.unop).op ‚â´ opObjIso.inv := by
  simp [opFunctor, opObjIso]

@[simp]
lemma opFunctor_obj_Œ¥ (X : SimplicialObject C) {n : ‚Ñï} (i : Fin (n + 2)) :
    (opFunctor.obj X).Œ¥ i = opObjIso.hom ‚â´ X.Œ¥ i.rev ‚â´ opObjIso.inv := by
  simp [SimplicialObject.Œ¥]

@[simp]
lemma opFunctor_obj_œÉ (X : SimplicialObject C) {n : ‚Ñï} (i : Fin (n + 1)) :
    (opFunctor.obj X).œÉ i = opObjIso.hom ‚â´ X.œÉ i.rev ‚â´ opObjIso.inv := by
  simp [SimplicialObject.œÉ]

/-- The functor `opFunctor : SimplicialObject C ‚•§ SimplicialObject C`
is a covariant involution. -/
def opFunctorCompOpFunctorIso : opFunctor (C := C) ‚ãô opFunctor ‚âÖ ùü≠ _ :=
  (Functor.whiskeringLeftObjCompIso _ _).symm ‚â™‚â´
    (Functor.whiskeringLeft _ _ _).mapIso
    ((Functor.opHom _ _).mapIso (SimplexCategory.revCompRevIso).symm.op) ‚â™‚â´
    Functor.whiskeringLeftObjIdIso

@[simp]
lemma opFunctorCompOpFunctorIso_hom_app_app (X : SimplicialObject C) (n : SimplexCategory·µí·µñ) :
    (opFunctorCompOpFunctorIso.hom.app X).app n = opObjIso.hom ‚â´ opObjIso.hom := by
  simp [opFunctorCompOpFunctorIso, opObjIso, opFunctor]

@[simp]
lemma opFunctorCompOpFunctorIso_inv_app_app (X : SimplicialObject C) (n : SimplexCategory·µí·µñ) :
    (opFunctorCompOpFunctorIso.inv.app X).app n = opObjIso.inv ‚â´ opObjIso.inv := by
  simp [opFunctorCompOpFunctorIso, opObjIso, opFunctor]

/-- The functor `opFunctor : SimplicialObject C ‚•§ SimplicialObject C`
as an equivalence of categories. -/
@[simps]
def opEquivalence : SimplicialObject C ‚âå SimplicialObject C where
  functor := opFunctor
  inverse := opFunctor
  unitIso := opFunctorCompOpFunctorIso.symm
  counitIso := opFunctorCompOpFunctorIso

end SimplicialObject
