/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.ModelCategory.IsCofibrant

/-!
# Bifibrant objects

-/

open CategoryTheory Limits

namespace HomotopicalAlgebra

variable (C : Type*) [Category C]

section

variable [CategoryWithCofibrations C] [HasInitial C]

def cofibrantObjects : ObjectProperty C := fun X ‚Ü¶ IsCofibrant X

abbrev CofibrantObject : Type _ := (cofibrantObjects C).FullSubcategory

variable {C}

abbrev CofibrantObject.mk (X : C) [IsCofibrant X] : CofibrantObject C :=
  ‚ü®X, by assumption‚ü©

abbrev CofibrantObject.homMk {X Y : C} [IsCofibrant X] [IsCofibrant Y] (f : X ‚ü∂ Y) :
    mk X ‚ü∂ mk Y := f

@[simp]
lemma CofibrantObject.homMk_id (X : C) [IsCofibrant X] : homMk (ùüô X) = ùüô (mk X) := rfl

@[reassoc (attr := simp)]
lemma CofibrantObject.homMk_homMk {X Y Z : C} [IsCofibrant X] [IsCofibrant Y] [IsCofibrant Z]
    (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    homMk f ‚â´ homMk g = homMk (f ‚â´ g) := rfl

abbrev CofibrantObject.Œπ : CofibrantObject C ‚•§ C := (cofibrantObjects C).Œπ

instance (X : CofibrantObject C) : IsCofibrant X.1 := X.2
instance (X : CofibrantObject C) : IsCofibrant (CofibrantObject.Œπ.obj X) := X.2

end

section

variable [CategoryWithFibrations C] [HasTerminal C]

def fibrantObjects : ObjectProperty C := fun X ‚Ü¶ IsFibrant X

abbrev FibrantObject : Type _ := (fibrantObjects C).FullSubcategory

variable {C}

abbrev FibrantObject.mk (X : C) [IsFibrant X] : FibrantObject C :=
  ‚ü®X, by assumption‚ü©

abbrev FibrantObject.homMk {X Y : C} [IsFibrant X] [IsFibrant Y] (f : X ‚ü∂ Y) :
    mk X ‚ü∂ mk Y := f

@[simp]
lemma FibrantObject.homMk_id (X : C) [IsFibrant X] : homMk (ùüô X) = ùüô (mk X) := rfl

@[reassoc (attr := simp)]
lemma FibrantObject.homMk_homMk {X Y Z : C} [IsFibrant X] [IsFibrant Y] [IsFibrant Z]
    (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    homMk f ‚â´ homMk g = homMk (f ‚â´ g) := rfl

abbrev FibrantObject.Œπ : FibrantObject C ‚•§ C := (fibrantObjects C).Œπ

instance (X : FibrantObject C) : IsFibrant X.1 := X.2
instance (X : FibrantObject C) : IsFibrant (FibrantObject.Œπ.obj X) := X.2

end

section

variable [CategoryWithCofibrations C] [HasInitial C]
  [CategoryWithFibrations C] [HasTerminal C]

def bifibrantObjects : ObjectProperty C :=
    cofibrantObjects C ‚äì fibrantObjects C

lemma bifibrantObjects_le_cofibrantObject :
    bifibrantObjects C ‚â§ cofibrantObjects C := fun _ h ‚Ü¶ h.1

lemma bifibrantObjects_le_fibrantObject :
    bifibrantObjects C ‚â§ fibrantObjects C := fun _ h ‚Ü¶ h.2

abbrev BifibrantObject : Type _ := (bifibrantObjects C).FullSubcategory

variable {C}

abbrev BifibrantObject.mk (X : C) [IsCofibrant X] [IsFibrant X] :
    BifibrantObject C :=
  ‚ü®X, by assumption, by assumption‚ü©

abbrev BifibrantObject.homMk {X Y : C} [IsCofibrant X] [IsCofibrant Y]
    [IsFibrant X] [IsFibrant Y] (f : X ‚ü∂ Y) :
    mk X ‚ü∂ mk Y := f

@[simp]
lemma BifibrantObject.homMk_id (X : C) [IsCofibrant X] [IsFibrant X] :
    homMk (ùüô X) = ùüô (mk X) := rfl

@[reassoc (attr := simp)]
lemma BifibrantObject.homMk_homMk {X Y Z : C} [IsCofibrant X] [IsCofibrant Y] [IsCofibrant Z]
    [IsFibrant X] [IsFibrant Y] [IsFibrant Z]
    (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    homMk f ‚â´ homMk g = homMk (f ‚â´ g) := rfl

abbrev BifibrantObject.Œπ : BifibrantObject C ‚•§ C := (bifibrantObjects C).Œπ

instance (X : BifibrantObject C) : IsCofibrant X.1 := X.2.1
instance (X : BifibrantObject C) : IsFibrant X.1 := X.2.2
instance (X : BifibrantObject C) : IsCofibrant (BifibrantObject.Œπ.obj X) := X.2.1
instance (X : BifibrantObject C) : IsFibrant (BifibrantObject.Œπ.obj X) := X.2.2

end

end HomotopicalAlgebra
