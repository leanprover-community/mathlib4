/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.ModelCategory.Basic
import Mathlib.AlgebraicTopology.ModelCategory.IsCofibrant

/-!
# Path objects

We introduce a notion of path object for an object `A : C` in a model category.
It consists of an object `P`, a weak equivalence `œÉ : P ‚ü∂ A` equipped with two retractions
`p‚ÇÄ` and `p‚ÇÅ`. This notion shall be important in the definition of "right homotopies"
in model categories.

This files dualizes the content of the file `ModelCategory.Cylinder`.

## References
* [Daniel G. Quillen, Homotopical algebra][Quillen1967]
* https://ncatlab.org/nlab/show/cylinder+object

-/

universe v u

open CategoryTheory Category Limits

namespace CategoryTheory

/--
In a category, given a morphism `f : A ‚ü∂ B` and an object `X`,
this is the obvious pullback diagram:
```
A ‚®Ø X ‚ü∂ A
|       |
v       v
B ‚®Ø X ‚ü∂ B
```
-/
lemma IsPullback.of_prod_fst_with_ind {C : Type*} [Category C]
    {A B : C} (f : A ‚ü∂ B) (X : C) [HasBinaryProduct A X]
    [HasBinaryProduct B X] :
    IsPullback prod.fst (prod.map f (ùüô X)) f prod.fst where
  w := by simp
  isLimit' := ‚ü®PullbackCone.isLimitAux' _ (fun s ‚Ü¶ by
    refine ‚ü®prod.lift s.fst (s.snd ‚â´ prod.snd), ?_, ?_, ?_‚ü©
    ¬∑ simp
    ¬∑ ext
      ¬∑ simp [PullbackCone.condition]
      ¬∑ simp
    ¬∑ intro m h‚ÇÅ h‚ÇÇ
      dsimp at m h‚ÇÅ h‚ÇÇ ‚ä¢
      ext
      ¬∑ simpa using h‚ÇÅ
      ¬∑ simp [‚Üê h‚ÇÇ])‚ü©

end CategoryTheory

namespace HomotopicalAlgebra

variable {C : Type u} [Category.{v} C] [ModelCategory C]

/-- In a model category `C`, a cylinder for `A : C` is the data of
a weak equivalence `œÉ : I ‚ü∂ A` equipped with two sections. -/
structure PathObject (A : C) where
  /-- the underlying object of a path object -/
  P : C
  /-- the first "projection" from the path object -/
  p‚ÇÄ : P ‚ü∂ A
  /-- the second "projection" from the path object -/
  p‚ÇÅ : P ‚ü∂ A
  /-- the weak equivalence of the path object -/
  Œπ : A ‚ü∂ P
  Œπ_p‚ÇÄ : Œπ ‚â´ p‚ÇÄ = ùüô A := by aesop_cat
  Œπ_p‚ÇÅ : Œπ ‚â´ p‚ÇÅ = ùüô A := by aesop_cat
  weakEquivalence_Œπ : WeakEquivalence Œπ := by infer_instance

namespace PathObject

attribute [instance] weakEquivalence_Œπ
attribute [reassoc (attr := simp)] Œπ_p‚ÇÄ Œπ_p‚ÇÅ

variable {A : C} (P : PathObject A)

instance : WeakEquivalence P.p‚ÇÄ :=
  weakEquivalence_of_precomp_of_fac P.Œπ_p‚ÇÄ

instance : WeakEquivalence P.p‚ÇÅ :=
  weakEquivalence_of_precomp_of_fac P.Œπ_p‚ÇÅ

/-- the map from `P.P` to the product of two copies of `A`, when `P` is
a path object object for `A`. `P` shall be a *good* path object
when this morphism is a fibration. -/
noncomputable def p : P.P ‚ü∂ A ‚®Ø A := prod.lift P.p‚ÇÄ P.p‚ÇÅ

@[reassoc (attr := simp)]
lemma p_fst : P.p ‚â´ prod.fst = P.p‚ÇÄ := by simp [p]

@[reassoc (attr := simp)]
lemma p_snd : P.p ‚â´ prod.snd = P.p‚ÇÅ := by simp [p]

/-- The cylinder object obtained by switching the two inclusions. -/
@[simps]
def symm : PathObject A where
  P := P.P
  p‚ÇÄ := P.p‚ÇÅ
  p‚ÇÅ := P.p‚ÇÄ
  Œπ := P.Œπ

@[simp, reassoc]
lemma symm_p : P.symm.p =
  P.p ‚â´ (prod.braiding A A).hom := by aesop_cat

/-- A path object `P` is good if the morphism
`P.p : P.P ‚ü∂ A ‚®Ø A` is a fibration. -/
class IsGood : Prop where
  fibration_p : Fibration P.p := by infer_instance

/-- A good path object `P` is very good if `P.Œπ` is a (trivial) cofibration. -/
class IsVeryGood : Prop extends P.IsGood where
  cofibration_Œπ : Cofibration P.Œπ := by infer_instance

attribute [instance] IsGood.fibration_p IsVeryGood.cofibration_Œπ

instance [IsFibrant A] [P.IsGood] : Fibration P.p‚ÇÄ := by
  rw [‚Üê P.p_fst]
  infer_instance

instance [IsFibrant A] [P.IsGood] : Fibration P.p‚ÇÅ := by
  rw [‚Üê P.p_snd]
  infer_instance

instance [IsFibrant A] [P.IsGood] : IsFibrant P.P :=
  isFibrant_of_fibration P.p‚ÇÄ

instance [IsCofibrant A] [P.IsVeryGood] : IsCofibrant P.P :=
  isCofibrant_of_cofibration P.Œπ

instance [P.IsGood] : P.symm.IsGood where
  fibration_p := by
    dsimp
    rw [symm_p]
    infer_instance

instance [P.IsVeryGood] : P.symm.IsVeryGood where
  cofibration_Œπ := by
    dsimp
    infer_instance

section

variable (h : MorphismProperty.MapFactorizationData (trivialCofibrations C) (fibrations C)
    (prod.lift (ùüô A) (ùüô A)))

/-- A path object for `A` can be obtained from a factorization of the obvious
map `A ‚ü∂ A ‚®Ø A` as a trivial cofibration followed by a fibration. -/
@[simps]
noncomputable def ofFactorizationData : PathObject A where
  P := h.Z
  p‚ÇÄ := h.p ‚â´ prod.fst
  p‚ÇÅ := h.p ‚â´ prod.snd
  Œπ := h.i

@[simp]
lemma ofFactorizationData_p : (ofFactorizationData h).p = h.p := by aesop_cat

instance : (ofFactorizationData h).IsVeryGood where
  fibration_p := by simpa using inferInstanceAs (Fibration h.p)
  cofibration_Œπ := by dsimp; infer_instance

instance [HasInitial C] [IsCofibrant A] [(cofibrations C).IsStableUnderComposition] :
    IsCofibrant (ofFactorizationData h).P :=
  isCofibrant_of_cofibration (ofFactorizationData h).Œπ

end

variable (A) in
lemma exists_very_good :
    ‚àÉ (P : PathObject A), P.IsVeryGood :=
  ‚ü®ofFactorizationData (MorphismProperty.factorizationData _ _ _),
    inferInstance‚ü©

instance : Nonempty (PathObject A) := ‚ü®(exists_very_good A).choose‚ü©

/-- The gluing of two good path objects. -/
@[simps]
noncomputable def trans [IsFibrant A] (P P' : PathObject A) [P'.IsGood] :
    PathObject A where
  P := pullback P.p‚ÇÅ P'.p‚ÇÄ
  p‚ÇÄ := pullback.fst _ _ ‚â´ P.p‚ÇÄ
  p‚ÇÅ := pullback.snd _ _ ‚â´ P'.p‚ÇÅ
  Œπ := pullback.lift P.Œπ P'.Œπ (by simp)
  weakEquivalence_Œπ := by
    have : WeakEquivalence (pullback.lift P.Œπ P'.Œπ (by simp) ‚â´ pullback.fst P.p‚ÇÅ P'.p‚ÇÄ ‚â´ P.p‚ÇÄ) := by
      rw [pullback.lift_fst_assoc, Œπ_p‚ÇÄ]
      infer_instance
    apply weakEquivalence_of_postcomp _ (pullback.fst _ _ ‚â´ P.p‚ÇÄ)

instance [IsFibrant A] (P P' : PathObject A) [P.IsGood] [P'.IsGood] :
    (P.trans P').IsGood where
  fibration_p := by
    let œà : (P.trans P').P ‚ü∂ P.P ‚®Ø A := prod.lift (pullback.fst _ _) (pullback.snd _ _ ‚â´ P'.p‚ÇÅ)
    rw [show (P.trans P').p = œà ‚â´ prod.map P.p‚ÇÄ (ùüô A) by simp [PathObject.p, œà]]
    have fac : œà ‚â´ prod.map P.p‚ÇÅ (ùüô A) = pullback.snd _ _ ‚â´ P'.p := by
      ext
      ¬∑ simp [œà, pullback.condition]
      ¬∑ simp [œà]
    have sq : IsPullback (œà ‚â´ prod.fst) (pullback.snd _ _) P.p‚ÇÅ (P'.p ‚â´ prod.fst) := by
      simpa [œà] using IsPullback.of_hasPullback P.p‚ÇÅ P'.p‚ÇÄ
    have : Fibration œà := by
      rw [fibration_iff]
      exact (fibrations C).of_isPullback (IsPullback.of_right sq fac
        (IsPullback.of_prod_fst_with_ind P.p‚ÇÅ A)).flip
        (by rw [‚Üê fibration_iff]; infer_instance)
    infer_instance

end PathObject

end HomotopicalAlgebra
