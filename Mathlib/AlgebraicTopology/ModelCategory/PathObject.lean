/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.ModelCategory.Basic
import Mathlib.AlgebraicTopology.ModelCategory.IsCofibrant

/-!
# Path objects

We introduce a notion of path object for an object `A : C` in a model category.
It consists of an object `P`, a weak equivalence `Œπ : A ‚ü∂ P` equipped with two retractions
`p‚ÇÄ` and `p‚ÇÅ`. This notion shall be important in the definition of "right homotopies"
in model categories.

This file dualizes the definitions in the file `AlgebraicTopology.ModelCategory.Cylinder`.

## Implementation notes

The most important definition in this file is `PathObject A`. This structure
extends another structure `PrepathObject A` (which does not assume that `C`
has a notion of weak equivalences, which can be interesting in situations
where we have not yet obtained the model category axioms).

The good properties of path objects are stated as typeclasses `PathObject.IsGood`
and `PathObject.IsVeryGood`.

The existence of very good path objects in model categories is stated
in the lemma `PathObject.exists_very_good`.

## References
* [Daniel G. Quillen, Homotopical algebra][Quillen1967]
* https://ncatlab.org/nlab/show/path+space+object

-/

universe v u

open CategoryTheory Category Limits

namespace HomotopicalAlgebra

variable {C : Type u} [Category.{v} C]

/-- A pre-path object for `A : C` is the data of a morphism
`Œπ : A ‚ü∂ P` equipped with two retractions. -/
structure PrepathObject (A : C) where
  /-- the underlying object of a (pre)path object -/
  P : C
  /-- the first "projection" from the (pre)path object -/
  p‚ÇÄ : P ‚ü∂ A
  /-- the second "projection" from the (pre)path object -/
  p‚ÇÅ : P ‚ü∂ A
  /-- the diagonal of the (pre)path object -/
  Œπ : A ‚ü∂ P
  Œπ_p‚ÇÄ : Œπ ‚â´ p‚ÇÄ = ùüô A := by aesop_cat
  Œπ_p‚ÇÅ : Œπ ‚â´ p‚ÇÅ = ùüô A := by aesop_cat

namespace PrepathObject

attribute [reassoc (attr := simp)] Œπ_p‚ÇÄ Œπ_p‚ÇÅ

variable {A : C} (P : PrepathObject A)

/-- The pre-path object obtained by switching the two projections. -/
@[simps]
def symm : PrepathObject A where
  P := P.P
  p‚ÇÄ := P.p‚ÇÅ
  p‚ÇÅ := P.p‚ÇÄ
  Œπ := P.Œπ

/-- The gluing of two pre-path objects. -/
@[simps]
noncomputable def trans (P' : PrepathObject A) [HasPullback P.p‚ÇÅ P'.p‚ÇÄ] :
    PrepathObject A where
  P := pullback P.p‚ÇÅ P'.p‚ÇÄ
  p‚ÇÄ := pullback.fst _ _ ‚â´ P.p‚ÇÄ
  p‚ÇÅ := pullback.snd _ _ ‚â´ P'.p‚ÇÅ
  Œπ := pullback.lift P.Œπ P'.Œπ (by simp)

section

variable [HasBinaryProduct A A]

/-- The map from `P.P` to the product of two copies of `A`, when `P` is
a pre-path object for `A`. `P` shall be a *good* path object
when this morphism is a fibration. -/
noncomputable def p : P.P ‚ü∂ A ‚®Ø A := prod.lift P.p‚ÇÄ P.p‚ÇÅ

@[reassoc (attr := simp)]
lemma p_fst : P.p ‚â´ prod.fst = P.p‚ÇÄ := by simp [p]

@[reassoc (attr := simp)]
lemma p_snd : P.p ‚â´ prod.snd = P.p‚ÇÅ := by simp [p]

end

@[simp, reassoc]
lemma symm_p [HasBinaryProducts C] :
    P.symm.p = P.p ‚â´ (prod.braiding A A).hom := by aesop_cat

end PrepathObject

/-- In a category with weak equivalences, a path object is the
data of a weak equivalence `Œπ : A ‚ü∂ P` equipped with two retractions. -/
structure PathObject [CategoryWithWeakEquivalences C] (A : C) extends PrepathObject A where
  weakEquivalence_Œπ : WeakEquivalence Œπ := by infer_instance

namespace PathObject

attribute [instance] weakEquivalence_Œπ

section

variable {A : C} [CategoryWithWeakEquivalences C] (P : PathObject A)

/-- The path object obtained by switching the two projections. -/
@[simps!]
def symm : PathObject A where
  __ := P.toPrepathObject.symm
  weakEquivalence_Œπ := by dsimp; infer_instance

@[simp, reassoc]
lemma symm_p [HasBinaryProducts C] :
    P.symm.p = P.p ‚â´ (prod.braiding A A).hom :=
  P.toPrepathObject.symm_p

section

variable [(weakEquivalences C).HasTwoOutOfThreeProperty]
  [(weakEquivalences C).ContainsIdentities]

instance : WeakEquivalence P.p‚ÇÄ :=
  weakEquivalence_of_precomp_of_fac P.Œπ_p‚ÇÄ

instance : WeakEquivalence P.p‚ÇÅ :=
  weakEquivalence_of_precomp_of_fac P.Œπ_p‚ÇÅ

end

/-- A path object `P` is good if the morphism
`P.p : P.P ‚ü∂ A ‚®Ø A` is a fibration. -/
class IsGood [HasBinaryProduct A A] [CategoryWithFibrations C] : Prop where
  fibration_p : Fibration P.p := by infer_instance

/-- A good path object `P` is very good if `P.Œπ` is a (trivial) cofibration. -/
class IsVeryGood [HasBinaryProduct A A] [CategoryWithFibrations C]
    [CategoryWithCofibrations C] : Prop extends P.IsGood where
  cofibration_Œπ : Cofibration P.Œπ := by infer_instance

attribute [instance] IsGood.fibration_p IsVeryGood.cofibration_Œπ

section

variable [HasBinaryProduct A A] [CategoryWithFibrations C]
  [HasTerminal C] [(fibrations C).IsStableUnderComposition]
  [(fibrations C).IsStableUnderBaseChange]
  [IsFibrant A] [P.IsGood]

instance : Fibration P.p‚ÇÄ := by
  rw [‚Üê P.p_fst]
  infer_instance

instance : Fibration P.p‚ÇÅ := by
  rw [‚Üê P.p_snd]
  infer_instance

instance : IsFibrant P.P :=
  isFibrant_of_fibration P.p‚ÇÄ

end

instance [HasBinaryProducts C] [CategoryWithFibrations C] [P.IsGood]
    [(fibrations C).RespectsIso] : P.symm.IsGood where
  fibration_p := by
    have hp : fibrations C P.p := by rw [‚Üê fibration_iff]; infer_instance
    rw [P.symm_p, fibration_iff]
    refine ((fibrations C).arrow_mk_iso_iff ?_).2 hp
    exact Arrow.isoMk (Iso.refl _) (prod.braiding A A)

section

variable [CategoryWithFibrations C] [CategoryWithCofibrations C]
  [(cofibrations C).IsStableUnderComposition]

instance [HasBinaryProduct A A] [HasInitial C] [IsCofibrant A] [P.IsVeryGood] : IsCofibrant P.P :=
  isCofibrant_of_cofibration P.Œπ

instance [(fibrations C).RespectsIso] [HasBinaryProducts C] [P.IsVeryGood] :
    P.symm.IsVeryGood where
  cofibration_Œπ := by dsimp; infer_instance

end

end

variable [ModelCategory C] {A : C} (P : PathObject A)

section

variable (h : MorphismProperty.MapFactorizationData
  (trivialCofibrations C) (fibrations C) (diag A))

/-- A path object for `A` can be obtained from a factorization of the obvious
map `A ‚ü∂ A ‚®Ø A` as a trivial cofibration followed by a fibration. -/
@[simps]
noncomputable def ofFactorizationData : PathObject A where
  P := h.Z
  p‚ÇÄ := h.p ‚â´ prod.fst
  p‚ÇÅ := h.p ‚â´ prod.snd
  Œπ := h.i

@[simp]
lemma ofFactorizationData_p : (ofFactorizationData h).p = h.p := by aesop_cat

instance : (ofFactorizationData h).IsVeryGood where
  fibration_p := by simpa using inferInstanceAs (Fibration h.p)
  cofibration_Œπ := by dsimp; infer_instance

instance [HasInitial C] [IsCofibrant A] [(cofibrations C).IsStableUnderComposition] :
    IsCofibrant (ofFactorizationData h).P :=
  isCofibrant_of_cofibration (ofFactorizationData h).Œπ

end

variable (A) in
lemma exists_very_good :
    ‚àÉ (P : PathObject A), P.IsVeryGood :=
  ‚ü®ofFactorizationData (MorphismProperty.factorizationData _ _ _),
    inferInstance‚ü©

instance : Nonempty (PathObject A) := ‚ü®(exists_very_good A).choose‚ü©

/-- The gluing of two good path objects. -/
@[simps!]
noncomputable def trans [IsFibrant A] (P P' : PathObject A) [P'.IsGood] :
    PathObject A where
  __ := P.toPrepathObject.trans P'.toPrepathObject
  weakEquivalence_Œπ := by
    have : WeakEquivalence (pullback.lift P.Œπ P'.Œπ (by simp) ‚â´
        pullback.fst P.p‚ÇÅ P'.p‚ÇÄ ‚â´ P.p‚ÇÄ) := by
      rw [pullback.lift_fst_assoc, PrepathObject.Œπ_p‚ÇÄ]
      infer_instance
    dsimp
    apply weakEquivalence_of_postcomp _ (pullback.fst P.p‚ÇÅ P'.p‚ÇÄ ‚â´ P.p‚ÇÄ)

instance [IsFibrant A] (P P' : PathObject A) [P.IsGood] [P'.IsGood] :
    (P.trans P').IsGood where
  fibration_p := by
    let œà : (P.trans P').P ‚ü∂ P.P ‚®Ø A := prod.lift (pullback.fst _ _) (pullback.snd _ _ ‚â´ P'.p‚ÇÅ)
    rw [show (P.trans P').p = œà ‚â´ prod.map P.p‚ÇÄ (ùüô A) by simp [PrepathObject.p, œà]]
    have fac : œà ‚â´ prod.map P.p‚ÇÅ (ùüô A) = pullback.snd _ _ ‚â´ P'.p := by
      ext
      ¬∑ simp [œà, pullback.condition]
      ¬∑ simp [œà]
    have sq : IsPullback (œà ‚â´ prod.fst) (pullback.snd P.p‚ÇÅ P'.p‚ÇÄ) P.p‚ÇÅ (P'.p ‚â´ prod.fst) := by
      simpa [œà] using IsPullback.of_hasPullback P.p‚ÇÅ P'.p‚ÇÄ
    have : Fibration œà := by
      rw [fibration_iff]
      exact (fibrations C).of_isPullback
        (IsPullback.of_right sq fac (IsPullback.of_prod_fst_with_id P.p‚ÇÅ A)).flip
          (by rw [‚Üê fibration_iff]; infer_instance)
    infer_instance

end PathObject

end HomotopicalAlgebra
