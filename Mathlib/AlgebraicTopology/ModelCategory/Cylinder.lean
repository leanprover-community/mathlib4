/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.ModelCategory.Basic
import Mathlib.AlgebraicTopology.ModelCategory.IsCofibrant

/-!
# Cylinders

We introduce a notion of cylinder for an object `A : C` in a model category.
It consists of an object `I`, a weak equivalence `œÄ : I ‚ü∂ A` equipped with two sections
`i‚ÇÄ` and `i‚ÇÅ`. This notion shall be important in the definition of "left homotopies"
in model categories.

## Implementation notes

The most important definition in this file is `Cylinder A`. This structure
extends another structure `Precylinder A` (which does not assume that `C`
has a notion of weak equivalences, which can be interesting in situations
where we have not yet obtained the model category axioms).

The good properties of cylinders are stated as typeclasses `Cylinder.IsGood`
and `Cylinder.IsVeryGood`.

The existence of very good cylinder objects in model categories is stated
in the lemma `Cylinder.exists_very_good`.

## References
* [Daniel G. Quillen, Homotopical algebra][Quillen1967]
* https://ncatlab.org/nlab/show/cylinder+object

-/

universe v u

open CategoryTheory Category Limits

namespace HomotopicalAlgebra

variable {C : Type u} [Category.{v} C]

/-- A precylinder for `A : C` is the data of a morphism
`œÄ : I ‚ü∂ A` equipped with two sections. -/
structure Precylinder (A : C) where
  /-- the underlying object of a (pre)cylinder -/
  I : C
  /-- the first "inclusion" in the (pre)cylinder -/
  i‚ÇÄ : A ‚ü∂ I
  /-- the second "inclusion" in the (pre)cylinder -/
  i‚ÇÅ : A ‚ü∂ I
  /-- the codiagonal of the (pre)cylinder -/
  œÄ : I ‚ü∂ A
  i‚ÇÄ_œÄ : i‚ÇÄ ‚â´ œÄ = ùüô A := by aesop_cat
  i‚ÇÅ_œÄ : i‚ÇÅ ‚â´ œÄ = ùüô A := by aesop_cat

namespace Precylinder

attribute [reassoc (attr := simp)] i‚ÇÄ_œÄ i‚ÇÅ_œÄ

variable {A : C} (P : Precylinder A)

/-- The precylinder object obtained by switching the two inclusions. -/
@[simps]
def symm : Precylinder A where
  I := P.I
  i‚ÇÄ := P.i‚ÇÅ
  i‚ÇÅ := P.i‚ÇÄ
  œÄ := P.œÄ

/-- The gluing of two precylinders. -/
@[simps]
noncomputable def trans (P' : Precylinder A) [HasPushout P.i‚ÇÅ P'.i‚ÇÄ] :
    Precylinder A where
  I := pushout P.i‚ÇÅ P'.i‚ÇÄ
  i‚ÇÄ := P.i‚ÇÄ ‚â´ pushout.inl _ _
  i‚ÇÅ := P'.i‚ÇÅ ‚â´ pushout.inr _ _
  œÄ := pushout.desc P.œÄ P'.œÄ (by simp)

section

variable [HasBinaryCoproduct A A]

/-- the map from the coproduct of two copies of `A` to `P.I`, when `P` is
a cylinder object for `A`. `P` shall be a *good* cylinder object
when this morphism is a cofibration. -/
noncomputable def i : A ‚®ø A ‚ü∂ P.I := coprod.desc P.i‚ÇÄ P.i‚ÇÅ

@[reassoc (attr := simp)]
lemma inl_i : coprod.inl ‚â´ P.i = P.i‚ÇÄ := by simp [i]

@[reassoc (attr := simp)]
lemma inr_i : coprod.inr ‚â´ P.i = P.i‚ÇÅ := by simp [i]

end

@[simp, reassoc]
lemma symm_i [HasBinaryCoproducts C] : P.symm.i = (coprod.braiding A A).hom ‚â´ P.i := by aesop_cat

end Precylinder

/-- In a category with weak equivalences, a cylinder is the
data of a weak equivalence `œÄ : I ‚ü∂ A` equipped with two sections -/
structure Cylinder [CategoryWithWeakEquivalences C] (A : C) extends Precylinder A where
  weakEquivalence_œÄ : WeakEquivalence œÄ := by infer_instance

namespace Cylinder

attribute [instance] weakEquivalence_œÄ

section

variable {A : C} [CategoryWithWeakEquivalences C] (P : Cylinder A)

/-- The cylinder object obtained by switching the two inclusions. -/
@[simps!]
def symm : Cylinder A where
  __ := P.toPrecylinder.symm
  weakEquivalence_œÄ := by dsimp; infer_instance

@[simp, reassoc]
lemma symm_i [HasBinaryCoproducts C] :
    P.symm.i = (coprod.braiding A A).hom ‚â´ P.i :=
  P.toPrecylinder.symm_i

section

variable [(weakEquivalences C).HasTwoOutOfThreeProperty]
  [(weakEquivalences C).ContainsIdentities]

instance : WeakEquivalence P.i‚ÇÄ :=
  weakEquivalence_of_postcomp_of_fac P.i‚ÇÄ_œÄ

instance : WeakEquivalence P.i‚ÇÅ :=
  weakEquivalence_of_postcomp_of_fac P.i‚ÇÅ_œÄ

end

/-- A cylinder object `P` is good if the morphism
`P.i : A ‚®ø A ‚ü∂ P.I` is a cofibration. -/
class IsGood [HasBinaryCoproduct A A] [CategoryWithCofibrations C] : Prop where
  cofibration_i : Cofibration P.i := by infer_instance

/-- A good cylinder object `P` is very good if `P.œÄ` is a (trivial) fibration. -/
class IsVeryGood [HasBinaryCoproduct A A] [CategoryWithCofibrations C]
    [CategoryWithFibrations C] : Prop extends P.IsGood where
  fibration_œÄ : Fibration P.œÄ := by infer_instance

attribute [instance] IsGood.cofibration_i IsVeryGood.fibration_œÄ

section

variable [HasBinaryCoproduct A A] [CategoryWithCofibrations C]
  [HasInitial C] [(cofibrations C).IsStableUnderComposition]
  [(cofibrations C).IsStableUnderCobaseChange]
  [IsCofibrant A] [P.IsGood]

instance : Cofibration P.i‚ÇÄ := by
  rw [‚Üê P.inl_i]
  infer_instance

instance : Cofibration P.i‚ÇÅ := by
  rw [‚Üê P.inr_i]
  infer_instance

instance : IsCofibrant P.I :=
  isCofibrant_of_cofibration P.i‚ÇÄ

end

instance [HasBinaryCoproducts C] [CategoryWithCofibrations C] [P.IsGood]
    [(cofibrations C).RespectsIso] : P.symm.IsGood where
  cofibration_i := by
    have hi : cofibrations C P.i := by rw [‚Üê cofibration_iff]; infer_instance
    rw [P.symm_i, cofibration_iff]
    refine ((cofibrations C).arrow_mk_iso_iff ?_).2 hi
    exact Arrow.isoMk (coprod.braiding A A) (Iso.refl _)

section

variable [CategoryWithCofibrations C] [CategoryWithFibrations C]
  [(fibrations C).IsStableUnderComposition]

instance [HasBinaryCoproduct A A] [HasTerminal C] [IsFibrant A] [P.IsVeryGood] : IsFibrant P.I :=
  isFibrant_of_fibration P.œÄ

instance [(cofibrations C).RespectsIso] [HasBinaryCoproducts C] [P.IsVeryGood] :
    P.symm.IsVeryGood where
  fibration_œÄ := by dsimp; infer_instance

end

end

variable [ModelCategory C] {A : C} (P : Cylinder A)

section

variable (h : MorphismProperty.MapFactorizationData (cofibrations C) (trivialFibrations C)
    (codiag A))

/-- A cylinder object for `A` can be obtained from a factorization of the obvious
map `A ‚®ø A ‚ü∂ A` as a cofibration followed by a trivial fibration. -/
@[simps]
noncomputable def ofFactorizationData : Cylinder A where
  I := h.Z
  i‚ÇÄ := coprod.inl ‚â´ h.i
  i‚ÇÅ := coprod.inr ‚â´ h.i
  œÄ := h.p

@[simp]
lemma ofFactorizationData_i : (ofFactorizationData h).i = h.i := by aesop_cat

instance : (ofFactorizationData h).IsVeryGood where
  cofibration_i := by simpa using inferInstanceAs (Cofibration h.i)
  fibration_œÄ := by dsimp; infer_instance

instance [HasTerminal C] [IsFibrant A] [(fibrations C).IsStableUnderComposition] :
    IsFibrant (ofFactorizationData h).I :=
  isFibrant_of_fibration (ofFactorizationData h).œÄ

end

variable (A) in
lemma exists_very_good :
    ‚àÉ (P : Cylinder A), P.IsVeryGood :=
  ‚ü®ofFactorizationData (MorphismProperty.factorizationData _ _ _),
    inferInstance‚ü©

instance : Nonempty (Cylinder A) := ‚ü®(exists_very_good A).choose‚ü©

/-- The gluing of two good cylinders. -/
@[simps!]
noncomputable def trans [IsCofibrant A] (P P' : Cylinder A) [P'.IsGood] :
    Cylinder A where
  __ := P.toPrecylinder.trans P'.toPrecylinder
  weakEquivalence_œÄ := by
    have : WeakEquivalence ((P.i‚ÇÄ ‚â´ pushout.inl P.i‚ÇÅ P'.i‚ÇÄ) ‚â´
        pushout.desc P.œÄ P'.œÄ (by simp)) := by
      simp only [assoc, colimit.Œπ_desc, PushoutCocone.mk_Œπ_app,
        Precylinder.i‚ÇÄ_œÄ]
      infer_instance
    dsimp
    apply weakEquivalence_of_precomp (P.i‚ÇÄ ‚â´ pushout.inl _ _)

instance [IsCofibrant A] (P P' : Cylinder A) [P.IsGood] [P'.IsGood] :
    (P.trans P').IsGood where
  cofibration_i := by
    let œà : P.I ‚®ø A ‚ü∂ (P.trans P').I := coprod.desc (pushout.inl _ _) (P'.i‚ÇÅ ‚â´ pushout.inr _ _)
    rw [show (P.trans P').i = coprod.map P.i‚ÇÄ (ùüô A) ‚â´ œà by simp [Precylinder.i, œà]]
    have fac : coprod.map P.i‚ÇÅ (ùüô A) ‚â´ œà = P'.i ‚â´ pushout.inr _ _ := by
      ext
      ¬∑ simp [œà, pushout.condition]
      ¬∑ simp [œà]
    have sq : IsPushout P.i‚ÇÅ (coprod.inl ‚â´ P'.i) (coprod.inl ‚â´ œà) (pushout.inr _ _) := by
      simpa [œà] using IsPushout.of_hasPushout P.i‚ÇÅ P'.i‚ÇÄ
    have : Cofibration œà := by
      rw [cofibration_iff]
      exact (cofibrations C).of_isPushout
        (IsPushout.of_top sq fac (IsPushout.of_coprod_inl_with_id P.i‚ÇÅ A).flip)
        (by rw [‚Üê cofibration_iff]; infer_instance)
    infer_instance

end Cylinder

end HomotopicalAlgebra
