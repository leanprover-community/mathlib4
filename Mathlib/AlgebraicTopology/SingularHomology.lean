/-
Copyright (c) 2025 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.Algebra.Category.ModuleCat.Abelian
import Mathlib.Algebra.Category.ModuleCat.Adjunctions
import Mathlib.AlgebraicTopology.AlternatingFaceMapComplex
import Mathlib.AlgebraicTopology.SingularSet

/-!
# Singular homology

In this file, we define the singular chain complex and singular homology of a topological space.
We also calculate the homology of a totally disconnected space as an example.

-/

noncomputable section

namespace AlgebraicTopology

open CategoryTheory Limits

variable (R : Type) [CommRing R] (n : ‚Ñï)

/-- The singular chain complex functor with coefficients in `R`. -/
def singularChainComplexFunctor : TopCat.{0} ‚•§ ChainComplex (ModuleCat R) ‚Ñï :=
  TopCat.toSSet ‚ãô ((SimplicialObject.whiskering _ _).obj (ModuleCat.free R)) ‚ãô
    AlgebraicTopology.alternatingFaceMapComplex _

/-- The `n`-th singular homology functor with coefficients in `R`. -/
def singularHomologyFunctor : TopCat.{0} ‚•§ ModuleCat R :=
  singularChainComplexFunctor R ‚ãô HomologicalComplex.homologyFunctor _ _ n

section TotallyDisconnectedSpace

variable (X : TopCat.{0}) [TotallyDisconnectedSpace X]

/-- If `X` is totally disconnected,
its singular chain complex is given by `R[X] ‚Üê0- R[X] ‚Üêùüô- R[X] ‚Üê0- R[X] ‚ãØ`,
where `R[X]` is the free `R`-module generated by elements of `X`. -/
noncomputable
def singularChainComplexFunctorIsoOfTotallyDisconnectedSpace :
    (singularChainComplexFunctor R).obj X ‚âÖ
      (ChainComplex.alternatingConst.obj ((ModuleCat.free R).obj X)) :=
  (AlgebraicTopology.alternatingFaceMapComplex _).mapIso
    (((SimplicialObject.whiskering _ _).obj (ModuleCat.free R)).mapIso
    (TopCat.toSSetIsoConst X) ‚â™‚â´ Functor.constComp _ _ _) ‚â™‚â´
    AlgebraicTopology.alternatingFaceMapComplexConst.app _

lemma isZero_singularHomologyFunctor_of_totallyDisconnectedSpace (hn : n ‚â† 0) :
    Limits.IsZero ((singularHomologyFunctor R n).obj X) :=
  (ChainComplex.isZero_alternatingConst_homology _ _ hn).of_iso
    ((HomologicalComplex.homologyFunctor _ _ n).mapIso
      (singularChainComplexFunctorIsoOfTotallyDisconnectedSpace R X))

/-- The zeroth singular homology of a totally disconnected space is the
free `R`-module generated by elements of `X`. -/
noncomputable
def singularHomologyFunctorZeroOfTotallyDisconnectedSpace :
    (singularHomologyFunctor R 0).obj X ‚âÖ ModuleCat.of R (X ‚Üí‚ÇÄ R) :=
  (HomologicalComplex.homologyFunctor _ _ 0).mapIso
      (singularChainComplexFunctorIsoOfTotallyDisconnectedSpace R X) ‚â™‚â´
    ChainComplex.alternatingConstHomologyZero _

end TotallyDisconnectedSpace

end AlgebraicTopology
