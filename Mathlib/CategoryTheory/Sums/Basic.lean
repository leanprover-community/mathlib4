/-
Copyright (c) 2019 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison, Robin Carlier
-/
import Mathlib.CategoryTheory.Equivalence

/-!
# Binary disjoint unions of categories

We define the category instance on `C ‚äï D` when `C` and `D` are categories.

We define:
* `inl_`      : the functor `C ‚•§ C ‚äï D`
* `inr_`      : the functor `D ‚•§ C ‚äï D`
* `swap`      : the functor `C ‚äï D ‚•§ D ‚äï C`
    (and the fact this is an equivalence)

We provide an induction principle `Sum.homInduction` to reason and work with morphisms in this
category.

The sum of two functors `F : A ‚•§ C` and `G : B ‚•§ C` is a functor `A ‚äï B ‚•§ C`, written `F.sum' G`.
This construction should be preferred when defining functors out of a sum.

We provide natural isomorphisms `inlCompSum' : inl_ ‚ãô F.sum' G ‚âÖ F` and
`inrCompSum' : inl_ ‚ãô F.sum' G ‚âÖ G`.

Furthermore, we provide `Functor.sumIsoExt`, which
constructs a natural isomorphism of functors out of a sum out of natural isomorphism with
their precomposition with the inclusion. This construction sholud be preferred when trying
to construct isomorphisms between functors out of a sum.

We further define sums of functors and natural transformations, written `F.sum G` and `Œ±.sum Œ≤`.
-/


namespace CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

-- morphism levels before object levels. See note [category_theory universes].
open Sum

section

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]

/- Porting note: `aesop_cat` not firing on `assoc` where autotac in Lean 3 did -/

/-- `sum C D` gives the direct sum of two categories.
-/
instance sum : Category.{max v‚ÇÅ v‚ÇÇ} (C ‚äï D) where
  Hom X Y :=
    match X, Y with
    | inl X, inl Y => ULift.{max v‚ÇÅ v‚ÇÇ} (X ‚ü∂ Y)
    | inl _, inr _ => PEmpty
    | inr _, inl _ => PEmpty
    | inr X, inr Y => ULift.{max v‚ÇÅ v‚ÇÇ} (X ‚ü∂ Y)
  id X :=
    match X with
    | inl X => ULift.up (ùüô X)
    | inr X => ULift.up (ùüô X)
  comp {X Y Z} f g :=
    match X, Y, Z, f, g with
    | inl _, inl _, inl _, f, g => ULift.up <|f.down ‚â´ g.down
    | inr _, inr _, inr _, f, g => ULift.up <| f.down ‚â´ g.down
  assoc {W X Y Z} f g h :=
    match X, Y, Z, W with
    | inl _, inl _, inl _, inl _ => by simp
    | inr _, inr _, inr _, inr _ => by simp

@[aesop norm -10 destruct (rule_sets := [CategoryTheory])]
theorem hom_inl_inr_false {X : C} {Y : D} (f : Sum.inl X ‚ü∂ Sum.inr Y) : False := by
  cases f

@[aesop norm -10 destruct (rule_sets := [CategoryTheory])]
theorem hom_inr_inl_false {X : C} {Y : D} (f : Sum.inr X ‚ü∂ Sum.inl Y) : False := by
  cases f

end

namespace Sum

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]

-- Unfortunate naming here, suggestions welcome.
/-- `inl_` is the functor `X ‚Ü¶ inl X`. -/
@[simps! obj]
def inl_ : C ‚•§ C ‚äï D where
  obj X := inl X
  map f := ULift.up f

/-- `inr_` is the functor `X ‚Ü¶ inr X`. -/
@[simps! obj]
def inr_ : D ‚•§ C ‚äï D where
  obj X := inr X
  map f := ULift.up f

variable {C D}

/-- An induction principle for morphisms in a sum of category: a morphism is either of the form
`(inl_ _ _).map _` or of the form `(inr_ _ _).map _)`. -/
@[elab_as_elim, cases_eliminator, induction_eliminator]
def homInduction {P : {x y : C ‚äï D} ‚Üí (x ‚ü∂ y) ‚Üí Sort*}
    (inl : ‚àÄ x y : C, (f : x ‚ü∂ y) ‚Üí P ((inl_ C D).map f))
    (inr : ‚àÄ x y : D, (f : x ‚ü∂ y) ‚Üí P ((inr_ C D).map f))
    {x y : C ‚äï D} (f : x ‚ü∂ y) : P f :=
  match x, y, f with
  | .inl x, .inl y, f => inl x y f.down
  | .inr x, .inr y, f => inr x y f.down

@[simp]
lemma homInduction_left {P : {x y : C ‚äï D} ‚Üí (x ‚ü∂ y) ‚Üí Sort*}
    (inl : ‚àÄ x y : C, (f : x ‚ü∂ y) ‚Üí P ((inl_ C D).map f))
    (inr : ‚àÄ x y : D, (f : x ‚ü∂ y) ‚Üí P ((inr_ C D).map f))
    {x y : C} (f : x ‚ü∂ y) : homInduction inl inr ((inl_ C D).map f) = inl x y f :=
  rfl

@[simp]
lemma homInduction_right {P : {x y : C ‚äï D} ‚Üí (x ‚ü∂ y) ‚Üí Sort*}
    (inl : ‚àÄ x y : C, (f : x ‚ü∂ y) ‚Üí P ((inl_ C D).map f))
    (inr : ‚àÄ x y : D, (f : x ‚ü∂ y) ‚Üí P ((inr_ C D).map f))
    {x y : D} (f : x ‚ü∂ y) : homInduction inl inr ((inr_ C D).map f) = inr x y f :=
  rfl

end Sum

namespace Functor

variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A] {B : Type u‚ÇÇ} [Category.{v‚ÇÇ} B] {C : Type u‚ÇÉ}
  [Category.{v‚ÇÉ} C] {D : Type u‚ÇÑ} [Category.{v‚ÇÑ} D]

section Sum'

variable (F : A ‚•§ C) (G : B ‚•§ C)

/-- The sum of two functors that land in a given category `C`. -/
def sum' : A ‚äï B ‚•§ C where
  obj
  | inl X => F.obj X
  | inr X => G.obj X
  map {X Y} f := Sum.homInduction (inl := fun _ _ f ‚Ü¶ F.map f) (inr := fun _ _ g ‚Ü¶ G.map g) f
  map_comp {x y z} f g := by
    cases f <;> cases g <;> simp [‚Üê Functor.map_comp]
  map_id x := by
    cases x <;> (simp only [‚Üê map_id]; rfl)

/-- The sum `F.sum' G` precomposed with the left inclusion functor is isomorphic to `F` -/
@[simps!]
def inlCompSum' : Sum.inl_ A B ‚ãô F.sum' G ‚âÖ F :=
  NatIso.ofComponents fun _ => Iso.refl _

/-- The sum `F.sum' G` precomposed with the right inclusion functor is isomorphic to `G` -/
@[simps!]
def inrCompSum' : Sum.inr_ A B ‚ãô F.sum' G ‚âÖ G :=
  NatIso.ofComponents fun _ => Iso.refl _

@[simp]
theorem sum'_obj_inl (a : A) : (F.sum' G).obj (inl a) = (F.obj a) :=
  rfl

@[simp]
theorem sum'_obj_inr (b : B) : (F.sum' G).obj (inr b) = (G.obj b) :=
  rfl

@[simp]
theorem sum'_map_inl {a a' : A} (f : a ‚ü∂ a') :
    (F.sum' G).map ((Sum.inl_ _ _).map f) = F.map f :=
  rfl

@[simp]
theorem sum'_map_inr {b b' : B} (f : b ‚ü∂ b') :
    (F.sum' G).map ((Sum.inr_ _ _).map f) = G.map f :=
  rfl

end Sum'

/-- The sum of two functors. -/
def sum (F : A ‚•§ B) (G : C ‚•§ D) : A ‚äï C ‚•§ B ‚äï D := (F ‚ãô Sum.inl_ _ _).sum' (G ‚ãô Sum.inr_ _ _)

@[simp]
theorem sum_obj_inl (F : A ‚•§ B) (G : C ‚•§ D) (a : A) : (F.sum G).obj (inl a) = inl (F.obj a) :=
  rfl

@[simp]
theorem sum_obj_inr (F : A ‚•§ B) (G : C ‚•§ D) (c : C) : (F.sum G).obj (inr c) = inr (G.obj c) :=
  rfl

@[simp]
theorem sum_map_inl (F : A ‚•§ B) (G : C ‚•§ D) {a a' : A} (f : a ‚ü∂ a') :
    (F.sum G).map ((Sum.inl_ _ _).map f) = (Sum.inl_ _ _).map (F.map f) :=
  rfl

@[simp]
theorem sum_map_inr (F : A ‚•§ B) (G : C ‚•§ D) {c c' : C} (f : c ‚ü∂ c') :
    (F.sum G).map ((Sum.inr_ _ _).map f) = (Sum.inr_ _ _).map (G.map f) :=
  rfl

section

variable {F G: A ‚äï B ‚•§ C}
  (e‚ÇÅ : Sum.inl_ A B ‚ãô F ‚âÖ Sum.inl_ A B ‚ãô G)
  (e‚ÇÇ : Sum.inr_ A B ‚ãô F ‚âÖ Sum.inr_ A B ‚ãô G)

/-- A functor out of a sum is uniquely characterized by its precompositions with `inl_` and `inr_`.
-/
def sumIsoExt : F ‚âÖ G :=
  NatIso.ofComponents (fun x ‚Ü¶
    match x with
    | inl x => e‚ÇÅ.app x
    | inr x => e‚ÇÇ.app x)
    (fun {x y} f ‚Ü¶ by
      cases f
      ¬∑ simpa using e‚ÇÅ.hom.naturality _
      ¬∑ simpa using e‚ÇÇ.hom.naturality _)

@[simp]
lemma sumIsoExt_hom_app_inl (a : A) : (sumIsoExt e‚ÇÅ e‚ÇÇ).hom.app (inl a) = e‚ÇÅ.hom.app a := rfl

@[simp]
lemma sumIsoExt_hom_app_inr (b : B) : (sumIsoExt e‚ÇÅ e‚ÇÇ).hom.app (inr b) = e‚ÇÇ.hom.app b := rfl

@[simp]
lemma sumIsoExt_inv_app_inl (a : A) : (sumIsoExt e‚ÇÅ e‚ÇÇ).inv.app (inl a) = e‚ÇÅ.inv.app a := rfl

@[simp]
lemma sumIsoExt_inv_app_inr (b : B) : (sumIsoExt e‚ÇÅ e‚ÇÇ).inv.app (inr b) = e‚ÇÇ.inv.app b := rfl

end

section

variable (F : A ‚äï B ‚•§ C)

/-- Any functor out of a sum is the sum of its precomposition with the inclusions. -/
def isoSum : F ‚âÖ (Sum.inl_ A B ‚ãô F).sum' (Sum.inr_ A B ‚ãô F) :=
  sumIsoExt (Iso.refl _) (Iso.refl _)

variable (a : A) (b : B)

@[simp]
lemma isoSum_hom_app_inl : (isoSum F).hom.app (inl a) = ùüô (F.obj (inl a)) := rfl

@[simp]
lemma isoSum_hom_app_inr : (isoSum F).hom.app (inr b) = ùüô (F.obj (inr b)) := rfl

@[simp]
lemma isoSum_inv_app_inl : (isoSum F).inv.app (inl a) = ùüô (F.obj (inl a)) := rfl

@[simp]
lemma isoSum_inv_app_inr : (isoSum F).inv.app (inr b) = ùüô (F.obj (inr b)) := rfl

end

end Functor

namespace NatTrans

variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A] {B : Type u‚ÇÇ} [Category.{v‚ÇÇ} B] {C : Type u‚ÇÉ}
  [Category.{v‚ÇÉ} C] {D : Type u‚ÇÑ} [Category.{v‚ÇÑ} D]

/-- The sum of two natural transformations, where all functors have the same target category. -/
def sum' {F G : A ‚•§ C} {H I : B ‚•§ C} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) : F.sum' H ‚ü∂ G.sum' I where
  app X :=
    match X with
    | inl X => Œ±.app X
    | inr X => Œ≤.app X
  naturality X Y f := by
    cases f <;> simp

@[simp]
theorem sum'_app_inl {F G : A ‚•§ C} {H I : B ‚•§ C} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (a : A) :
    (sum' Œ± Œ≤).app (inl a) = Œ±.app a :=
  rfl

@[simp]
theorem sum'_app_inr {F G : A ‚•§ C} {H I : B ‚•§ C} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (b : B) :
    (sum' Œ± Œ≤).app (inr b) = Œ≤.app b :=
  rfl

/-- The sum of two natural transformations. -/
def sum {F G : A ‚•§ B} {H I : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) : F.sum H ‚ü∂ G.sum I where
  app X :=
    match X with
    | inl X => (Sum.inl_ B D).map (Œ±.app X)
    | inr X => (Sum.inr_ B D).map (Œ≤.app X)
  naturality X Y f := by
    cases f <;> simp [‚Üê Functor.map_comp]

@[simp]
theorem sum_app_inl {F G : A ‚•§ B} {H I : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (a : A) :
    (sum Œ± Œ≤).app (inl a) = (Sum.inl_ _ _).map (Œ±.app a) :=
  rfl

@[simp]
theorem sum_app_inr {F G : A ‚•§ B} {H I : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (c : C) :
    (sum Œ± Œ≤).app (inr c) = (Sum.inr_ _ _).map (Œ≤.app c) :=
  rfl

end NatTrans

namespace Sum

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]

/-- The functor exchanging two direct summand categories. -/
def swap : C ‚äï D ‚•§ D ‚äï C := (inr_ D C).sum' (inl_ D C)

@[simp]
theorem swap_obj_inl (X : C) : (swap C D).obj (inl X) = inr X :=
  rfl

@[simp]
theorem swap_obj_inr (X : D) : (swap C D).obj (inr X) = inl X :=
  rfl

@[simp]
theorem swap_map_inl {X Y : C} {f : inl X ‚ü∂ inl Y} : (swap C D).map f = f :=
  rfl

@[simp]
theorem swap_map_inr {X Y : D} {f : inr X ‚ü∂ inr Y} : (swap C D).map f = f :=
  rfl

/-- Precomposing `swap` with the left inclusion gives the right inclusion. -/
@[simps! hom_app inv_app]
def swapCompInl : inl_ C D ‚ãô swap C D ‚âÖ inr_ D C := (Functor.inlCompSum' (inr_ _ _) (inl_ _ _)).symm

/-- Precomposing `swap` with the right inclusion gives the leftt inclusion. -/
@[simps! hom_app inv_app]
def swapCompInr : inr_ C D ‚ãô swap C D ‚âÖ inl_ D C := (Functor.inrCompSum' (inr_ _ _) (inl_ _ _)).symm

namespace Swap

/-- `swap` gives an equivalence between `C ‚äï D` and `D ‚äï C`. -/
@[simps functor inverse]
def equivalence : C ‚äï D ‚âå D ‚äï C where
  functor := swap C D
  inverse := swap D C
  unitIso := Functor.sumIsoExt (swapCompInr D C).symm (swapCompInl D C).symm
  counitIso := Functor.sumIsoExt (swapCompInr C D).symm (swapCompInl C D).symm

instance isEquivalence : (swap C D).IsEquivalence :=
  (by infer_instance : (equivalence C D).functor.IsEquivalence)

/-- The double swap on `C ‚äï D` is naturally isomorphic to the identity functor. -/
def symmetry : swap C D ‚ãô swap D C ‚âÖ ùü≠ (C ‚äï D) :=
  (equivalence C D).unitIso.symm

end Swap

end Sum

end CategoryTheory
