/-
Copyright (c) 2019 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison
-/
import Mathlib.CategoryTheory.Equivalence
import Mathlib.CategoryTheory.Products.Basic

/-!
# Binary disjoint unions of categories

We define the category instance on `C ‚äï D` when `C` and `D` are categories.

We define:
* `inl_`      : the functor `C ‚•§ C ‚äï D`
* `inr_`      : the functor `D ‚•§ C ‚äï D`
* `swap`      : the functor `C ‚äï D ‚•§ D ‚äï C`
    (and the fact this is an equivalence)

We further define sums of functors and natural transformations, written `F.sum G` and `Œ±.sum Œ≤`.
-/


namespace CategoryTheory

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

-- morphism levels before object levels. See note [category_theory universes].
open Sum

section

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÅ) [Category.{v‚ÇÅ} D]

/- Porting note: `aesop_cat` not firing on `assoc` where autotac in Lean 3 did -/

/-- `sum C D` gives the direct sum of two categories.
-/
instance sum : Category.{v‚ÇÅ} (C ‚äï D) where
  Hom X Y :=
    match X, Y with
    | inl X, inl Y => X ‚ü∂ Y
    | inl _, inr _ => PEmpty
    | inr _, inl _ => PEmpty
    | inr X, inr Y => X ‚ü∂ Y
  id X :=
    match X with
    | inl X => ùüô X
    | inr X => ùüô X
  comp {X Y Z} f g :=
    match X, Y, Z, f, g with
    | inl _, inl _, inl _, f, g => f ‚â´ g
    | inr _, inr _, inr _, f, g => f ‚â´ g
  assoc {W X Y Z} f g h :=
    match X, Y, Z, W with
    | inl _, inl _, inl _, inl _ => Category.assoc f g h
    | inr _, inr _, inr _, inr _ => Category.assoc f g h

@[aesop norm -10 destruct (rule_sets := [CategoryTheory])]
theorem hom_inl_inr_false {X : C} {Y : D} (f : Sum.inl X ‚ü∂ Sum.inr Y) : False := by
  cases f

@[aesop norm -10 destruct (rule_sets := [CategoryTheory])]
theorem hom_inr_inl_false {X : C} {Y : D} (f : Sum.inr X ‚ü∂ Sum.inl Y) : False := by
  cases f

theorem sum_comp_inl {P Q R : C} (f : (inl P : C ‚äï D) ‚ü∂ inl Q) (g : (inl Q : C ‚äï D) ‚ü∂ inl R) :
    @CategoryStruct.comp _ _ P Q R (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) =
      @CategoryStruct.comp _ _ (inl P) (inl Q) (inl R) (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) :=
  rfl

theorem sum_comp_inr {P Q R : D} (f : (inr P : C ‚äï D) ‚ü∂ inr Q) (g : (inr Q : C ‚äï D) ‚ü∂ inr R) :
    @CategoryStruct.comp _ _ P Q R (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) =
      @CategoryStruct.comp _ _ (inr P) (inr Q) (inr R) (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) :=
  rfl

end

namespace Sum

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÅ) [Category.{v‚ÇÅ} D]

-- Unfortunate naming here, suggestions welcome.
/-- `inl_` is the functor `X ‚Ü¶ inl X`. -/
@[simps]
def inl_ : C ‚•§ C ‚äï D where
  obj X := inl X
  map {_ _} f := f

/-- `inr_` is the functor `X ‚Ü¶ inr X`. -/
@[simps]
def inr_ : D ‚•§ C ‚äï D where
  obj X := inr X
  map {_ _} f := f

/- Porting note: `aesop_cat` not firing on `map_comp` where autotac in Lean 3 did
but `map_id` was ok. -/

/-- The functor exchanging two direct summand categories. -/
def swap : C ‚äï D ‚•§ D ‚äï C where
  obj X :=
    match X with
    | inl X => inr X
    | inr X => inl X
  map := @fun X Y f =>
    match X, Y, f with
    | inl _, inl _, f => f
    | inr _, inr _, f => f
  map_comp := fun {X} {Y} {Z} _ _ =>
    match X, Y, Z with
    | inl X, inl Y, inl Z => by rfl
    | inr X, inr Y, inr Z => by rfl

@[simp]
theorem swap_obj_inl (X : C) : (swap C D).obj (inl X) = inr X :=
  rfl

@[simp]
theorem swap_obj_inr (X : D) : (swap C D).obj (inr X) = inl X :=
  rfl

@[simp]
theorem swap_map_inl {X Y : C} {f : inl X ‚ü∂ inl Y} : (swap C D).map f = f :=
  rfl

@[simp]
theorem swap_map_inr {X Y : D} {f : inr X ‚ü∂ inr Y} : (swap C D).map f = f :=
  rfl

namespace Swap

/-- `swap` gives an equivalence between `C ‚äï D` and `D ‚äï C`. -/
@[simps functor inverse]
def equivalence : C ‚äï D ‚âå D ‚äï C where
  functor := swap C D
  inverse := swap D C
  unitIso := NatIso.ofComponents (by rintro (_|_) <;> exact Iso.refl _)
  counitIso := NatIso.ofComponents (by rintro (_|_) <;> exact Iso.refl _)

instance isEquivalence : (swap C D).IsEquivalence :=
  (by infer_instance : (equivalence C D).functor.IsEquivalence)

/-- The double swap on `C ‚äï D` is naturally isomorphic to the identity functor. -/
def symmetry : swap C D ‚ãô swap D C ‚âÖ ùü≠ (C ‚äï D) :=
  (equivalence C D).unitIso.symm

end Swap

end Sum

variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A] {A' : Type u‚ÇÅ} [Category.{v‚ÇÅ} A']
  {B : Type u‚ÇÇ} [Category.{v‚ÇÇ} B]
  {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]
  {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

namespace Functor

/-- The sum of two functors. -/
def sum (F : A ‚•§ B) (G : C ‚•§ D) : A ‚äï C ‚•§ B ‚äï D where
  obj X :=
    match X with
    | inl X => inl (F.obj X)
    | inr X => inr (G.obj X)
  map {X Y} f :=
    match X, Y, f with
    | inl _, inl _, f => F.map f
    | inr _, inr _, f => G.map f
  map_id {X} := by cases X <;> (erw [Functor.map_id]; rfl)
  map_comp {X Y Z} f g :=
    match X, Y, Z, f, g with
    | inl X, inl Y, inl Z, f, g => by erw [F.map_comp]; rfl
    | inr X, inr Y, inr Z, f, g => by erw [G.map_comp]; rfl

/-- Similar to `sum`, but both functors land in the same category `C` -/
def sum' (F : A ‚•§ B) (G : A' ‚•§ B) : A ‚äï A' ‚•§ B where
  obj X :=
    match X with
    | inl X => F.obj X
    | inr X => G.obj X
  map {X Y} f :=
    match X, Y, f with
    | inl _, inl _, f => F.map f
    | inr _, inr _, f => G.map f
  map_id {X} := by cases X <;> erw [Functor.map_id]
  map_comp {X Y Z} f g :=
    match X, Y, Z, f, g with
    | inl _, inl _, inl _, f, g => by erw [F.map_comp]
    | inr _, inr _, inr _, f, g => by erw [G.map_comp]

/-- The sum `F.sum' G` precomposed with the left inclusion functor is isomorphic to `F` -/
@[simps!]
def inlCompSum' (F : A ‚•§ B) (G : A' ‚•§ B) : Sum.inl_ A A' ‚ãô F.sum' G ‚âÖ F :=
  NatIso.ofComponents fun _ => Iso.refl _

/-- The sum `F.sum' G` precomposed with the right inclusion functor is isomorphic to `G` -/
@[simps!]
def inrCompSum' (F : A ‚•§ B) (G : A' ‚•§ B) : Sum.inr_ A A' ‚ãô F.sum' G ‚âÖ G :=
  NatIso.ofComponents fun _ => Iso.refl _

@[simp]
theorem sum_obj_inl (F : A ‚•§ B) (G : C ‚•§ D) (a : A) : (F.sum G).obj (inl a) = inl (F.obj a) :=
  rfl

@[simp]
theorem sum_obj_inr (F : A ‚•§ B) (G : C ‚•§ D) (c : C) : (F.sum G).obj (inr c) = inr (G.obj c) :=
  rfl

@[simp]
theorem sum_map_inl (F : A ‚•§ B) (G : C ‚•§ D) {a a' : A} (f : inl a ‚ü∂ inl a') :
    (F.sum G).map f = F.map f :=
  rfl

@[simp]
theorem sum_map_inr (F : A ‚•§ B) (G : C ‚•§ D) {c c' : C} (f : inr c ‚ü∂ inr c') :
    (F.sum G).map f = G.map f :=
  rfl

@[simp]
theorem sum'_obj_inl (F : A ‚•§ B) (G : A' ‚•§ B) (a : A) : (F.sum' G).obj (inl a) = (F.obj a) :=
  rfl

@[simp]
theorem sum'_obj_inr (F : A ‚•§ B) (G : A' ‚•§ B) (a' : A') : (F.sum' G).obj (inr a') = (G.obj a') :=
  rfl

@[simp]
theorem sum'_map_inl (F : A ‚•§ B) (G : A' ‚•§ B) {a a' : A} (f : inl a ‚ü∂ inl a') :
    (F.sum' G).map f = F.map f :=
  rfl

@[simp]
theorem sum'_map_inr (F : A ‚•§ B) (G : A' ‚•§ B) {a a' : A'} (f : inr a ‚ü∂ inr a') :
    (F.sum' G).map f = G.map f :=
  rfl

end Functor

namespace NatTrans

/-- The sum of two natural transformations. -/
def sum {F G : A ‚•§ B} {H I : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) : F.sum H ‚ü∂ G.sum I where
  app X :=
    match X with
    | inl X => Œ±.app X
    | inr X => Œ≤.app X
  naturality X Y f :=
    match X, Y, f with
    | inl X, inl Y, f => by erw [Œ±.naturality]; rfl
    | inr X, inr Y, f => by erw [Œ≤.naturality]; rfl

@[simp]
theorem sum_app_inl {F G : A ‚•§ B} {H I : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (a : A) :
    (sum Œ± Œ≤).app (inl a) = Œ±.app a :=
  rfl

@[simp]
theorem sum_app_inr {F G : A ‚•§ B} {H I : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (c : C) :
    (sum Œ± Œ≤).app (inr c) = Œ≤.app c :=
  rfl

/-- The sum of two natural transformations, where all functors have the same target category. -/
def sum' {F G : A ‚•§ B} {H I : A' ‚•§ B} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) : F.sum' H ‚ü∂ G.sum' I where
  app X :=
    match X with
    | inl X => Œ±.app X
    | inr X => Œ≤.app X
  naturality X Y f :=
    match X, Y, f with
    | inl X, inl Y, f => by change F.map _ ‚â´ _ = _; rw [Œ±.naturality]; rfl
    | inr X, inr Y, f => by change H.map _ ‚â´ _ = _; rw [Œ≤.naturality]; rfl

@[simp]
theorem sum'_app_inl {F G : A ‚•§ B} {H I : A' ‚•§ B} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (a : A) :
    (sum' Œ± Œ≤).app (inl a) = Œ±.app a :=
  rfl

@[simp]
theorem sum'_app_inr {F G : A ‚•§ B} {H I : A' ‚•§ B} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (a' : A') :
    (sum' Œ± Œ≤).app (inr a') = Œ≤.app a' :=
  rfl

end NatTrans

namespace Sum

variable (A A') (B)

/-- The equivalence between functors from a sum and the product of the
 functor categories. -/
@[simps! functor_obj functor_map]
def functorEquiv : A ‚äï A' ‚•§ B ‚âå (A ‚•§ B) √ó (A' ‚•§ B) where
  functor :=
    { obj F := ‚ü®inl_ _ _ ‚ãô F , inr_ _ _ ‚ãô F‚ü©
      map Œ∑ := ‚ü®whiskerLeft _ Œ∑, whiskerLeft _ Œ∑‚ü© }
  inverse :=
    { obj F := Functor.sum' F.1 F.2
      map Œ∑ := NatTrans.sum' Œ∑.1 Œ∑.2
      map_id x := by
        ext x'
        cases x' <;> rfl }
  unitIso :=
    NatIso.ofComponents (fun x ‚Ü¶
      NatIso.ofComponents (fun t ‚Ü¶
        match t with
        | inl x => Iso.refl _
        | inr x => Iso.refl _ ))
  counitIso :=
    NatIso.ofComponents <| fun _ ‚Ü¶
      Iso.prod (NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _)) (NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _))

-- generated simps lemma for `functorEquiv` include match arms in the statements, so we rather
-- state them separately for the two constructors of `A ‚äï A'`.

variable {A A'} {B}

@[simp]
lemma functorEquiv_inverse_obj_obj_inl (F : (A ‚•§ B) √ó (A' ‚•§ B)) (a : A) :
    ((functorEquiv A A' B).inverse.obj F).obj (inl a) = F.1.obj a :=
  rfl

@[simp]
lemma functorEquiv_inverse_obj_obj_inr (F : (A ‚•§ B) √ó (A' ‚•§ B)) (a' : A') :
    ((functorEquiv A A' B).inverse.obj F).obj (inr a') = F.2.obj a' :=
  rfl

@[simp]
lemma functorEquiv_inverse_obj_map_inl (F : (A ‚•§ B) √ó (A' ‚•§ B)) {a‚ÇÄ a‚ÇÅ : A} (f : a‚ÇÄ ‚ü∂ a‚ÇÅ) :
    ((functorEquiv A A' B).inverse.obj F).map (f : inl _ ‚ü∂ inl _) = F.1.map f :=
  rfl

@[simp]
lemma functorEquiv_inverse_obj_map_inr (F : (A ‚•§ B) √ó (A' ‚•§ B)) {a'‚ÇÄ a'‚ÇÅ : A'} (f : a'‚ÇÄ ‚ü∂ a'‚ÇÅ) :
    ((functorEquiv A A' B).inverse.obj F).map (f : inr _ ‚ü∂ inr _) = F.2.map f :=
  rfl

@[simp]
lemma functorEquiv_inverse_map_app_inl {X Y : (A ‚•§ B) √ó (A' ‚•§ B)} (Œ∑ : X ‚ü∂ Y) (a : A) :
    ((functorEquiv A A' B).inverse.map Œ∑).app (inl a) = Œ∑.1.app a :=
  rfl

@[simp]
lemma functorEquiv_inverse_map_app_inr {X Y : (A ‚•§ B) √ó (A' ‚•§ B)} (Œ∑ : X ‚ü∂ Y) (a' : A') :
    ((functorEquiv A A' B).inverse.map Œ∑).app (inr a') = Œ∑.2.app a' :=
  rfl

@[simp]
lemma functorEquiv_counitIso_hom_app (X : (A ‚•§ B) √ó (A' ‚•§ B)) :
    (functorEquiv A A' B).counitIso.hom.app X = ùüô X :=
  rfl

@[simp]
lemma functorEquiv_counit_hom_app (X : (A ‚•§ B) √ó (A' ‚•§ B)) :
    (functorEquiv A A' B).counit.app X = ùüô X :=
  rfl

@[simp]
lemma functorEquiv_counitIso_inv_app (X : (A ‚•§ B) √ó (A' ‚•§ B)) :
    (functorEquiv A A' B).counitIso.inv.app X = ùüô X :=
  rfl

@[simp]
lemma functorEquiv_unitIso_inv_app_app_inl (X : A ‚äï A' ‚•§ B) (a : A) :
    ((functorEquiv A A' B).unitIso.inv.app X).app (inl a) = ùüô (X.obj (inl a)) :=
  rfl

@[simp]
lemma functorEquiv_unitIso_inv_app_app_inr (X : A ‚äï A' ‚•§ B) (a' : A') :
    ((functorEquiv A A' B).unitIso.inv.app X).app (inr a') = ùüô (X.obj (inr a')) :=
  rfl

@[simp]
lemma functorEquiv_unitIso_hom_app_app_inl (X : A ‚äï A' ‚•§ B) (a : A) :
    ((functorEquiv A A' B).unitIso.hom.app X).app (inl a) = ùüô (X.obj (inl a)) :=
  rfl

@[simp]
lemma functorEquiv_unitIso_hom_app_app_inr (X : A ‚äï A' ‚•§ B) (a' : A') :
    ((functorEquiv A A' B).unitIso.hom.app X).app (inr a') = ùüô (X.obj (inr a')) :=
  rfl

@[simp]
lemma functorEquiv_unit_app_app_inl (X : A ‚äï A' ‚•§ B) (a : A) :
    ((functorEquiv A A' B).unit.app X).app (inl a) = ùüô (X.obj (inl a)) :=
  rfl

@[simp]
lemma functorEquiv_unit_app_app_inr (X : A ‚äï A' ‚•§ B) (a' : A') :
    ((functorEquiv A A' B).unit.app X).app (inr a') = ùüô (X.obj (inr a')) :=
  rfl

/-- Composing the forward direction of `functorEquiv` with the first projection is the same as
  precomposition with `inl_ A A'`. -/
@[simps!]
def functorEquivFunctorCompFstIso :
    (functorEquiv _ _ _).functor ‚ãô Prod.fst _ _ ‚âÖ (whiskeringLeft _ _ C).obj (inl_ A A') :=
  NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _)

/-- Composing the forward direction of `functorEquiv` with the second projection is the same as
  precomposition with `inr_ A A'`. -/
@[simps!]
def functorEquivFunctorCompSndIso :
    (functorEquiv _ _ _).functor ‚ãô Prod.snd _ _ ‚âÖ (whiskeringLeft _ _ C).obj (inr_ A A') :=
  NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _)

/-- Composing the backward direction of `functorEquiv` with precomposition with `inl_ A A'`.
  is naturally isomorphic to the first projection. -/
@[simps!]
def functorEquivInverseCompWhiskeringLeftInLIso :
    (functorEquiv _ _ _).inverse ‚ãô (whiskeringLeft _ _ C).obj (inl_ A A') ‚âÖ Prod.fst _ _ :=
  NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _)

/-- Composing the backward direction of `functorEquiv` with the second projection is the same as
  precomposition with `inr_ A A'`. -/
@[simps!]
def functorEquivInverseCompWhiskeringLeftInRIso :
    (functorEquiv _ _ _).inverse ‚ãô (whiskeringLeft _ _ C).obj (inr_ A A') ‚âÖ Prod.snd _ _ :=
  NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _)

/-- A restatement `functorEquiv` : we can construct a natural transformation of functors
`A ‚äï A' ‚•§ B` from the data of natural transformations of their whiskering with `inl_` and `inr_`. -/
@[simps!]
def natTransOfNatTransWhiskerLeftInlInr {F G : A ‚äï A' ‚•§ B}
    (Œ∑‚ÇÅ : inl_ _ _ ‚ãô F ‚ü∂ inl_ _ _ ‚ãô G) (Œ∑‚ÇÇ : inr_ _ _ ‚ãô F ‚ü∂ inr_ _ _ ‚ãô G) : F ‚ü∂ G :=
  (functorEquiv _ _ _).unit.app _ ‚â´
    (functorEquiv _ _ _).inverse.map
      (‚ü®Œ∑‚ÇÅ, Œ∑‚ÇÇ‚ü© : (functorEquiv _ _ _).functor.obj _ ‚ü∂ (functorEquiv _ _ _).functor.obj _) ‚â´
      (functorEquiv _ _ _).unitInv.app _

@[simp]
lemma natTransOfNatTransWhiskerLeftInlInr_id {F : A ‚äï A' ‚•§ B} :
    natTransOfNatTransWhiskerLeftInlInr (ùüô (inl_ _ _ ‚ãô F)) (ùüô (inr_ _ _ ‚ãô F)) = ùüô _ := by
  aesop_cat

@[simp]
lemma natTransOfNatTransWhiskerLeftInlInr_comp {F G H : A ‚äï A' ‚•§ B}
    (Œ∑‚ÇÅ : inl_ _ _ ‚ãô F ‚ü∂ inl_ _ _ ‚ãô G) (Œ∑‚ÇÇ : inr_ _ _ ‚ãô F ‚ü∂ inr_ _ _ ‚ãô G)
    (ŒΩ‚ÇÅ : inl_ _ _ ‚ãô G ‚ü∂ inl_ _ _ ‚ãô H) (ŒΩ‚ÇÇ : inr_ _ _ ‚ãô G ‚ü∂ inr_ _ _ ‚ãô H) :
    natTransOfNatTransWhiskerLeftInlInr (Œ∑‚ÇÅ ‚â´ ŒΩ‚ÇÅ) (Œ∑‚ÇÇ ‚â´ ŒΩ‚ÇÇ) =
      natTransOfNatTransWhiskerLeftInlInr Œ∑‚ÇÅ Œ∑‚ÇÇ ‚â´
        natTransOfNatTransWhiskerLeftInlInr ŒΩ‚ÇÅ ŒΩ‚ÇÇ := by
  aesop_cat

/-- A restatement `functorEquiv` : we can construct a natural isomorphism of functors
`A ‚äï A' ‚•§ B` from the data of natural isomorphisms of their whiskering with `inl_` and `inr_`. -/
@[simps!]
def natIsoOfNatIsoWhiskerLeftInlInr {F G : A ‚äï A' ‚•§ B}
    (Œ∑‚ÇÅ : inl_ _ _ ‚ãô F ‚âÖ inl_ _ _ ‚ãô G) (Œ∑‚ÇÇ : inr_ _ _ ‚ãô F ‚âÖ inr_ _ _ ‚ãô G) : F ‚âÖ G :=
  (functorEquiv _ _ _).unitIso.app _ ‚â™‚â´
    (functorEquiv _ _ _).inverse.mapIso (Iso.prod Œ∑‚ÇÅ Œ∑‚ÇÇ) ‚â™‚â´
      (functorEquiv _ _ _).unitIso.symm.app _

@[simp]
lemma natIsoOfNatIsoWhiskerLeftInlInr_hom {F G : A ‚äï A' ‚•§ B}
    (Œ∑‚ÇÅ : inl_ _ _ ‚ãô F ‚âÖ inl_ _ _ ‚ãô G) (Œ∑‚ÇÇ : inr_ _ _ ‚ãô F ‚âÖ inr_ _ _ ‚ãô G) :
    (natIsoOfNatIsoWhiskerLeftInlInr Œ∑‚ÇÅ Œ∑‚ÇÇ).hom =
      natTransOfNatTransWhiskerLeftInlInr Œ∑‚ÇÅ.hom Œ∑‚ÇÇ.hom := by
  aesop_cat

@[simp]
lemma natIsoOfNatIsoWhiskerLeftInlInr_inv {F G : A ‚äï A' ‚•§ B}
    (Œ∑‚ÇÅ : inl_ _ _ ‚ãô F ‚âÖ inl_ _ _ ‚ãô G) (Œ∑‚ÇÇ : inr_ _ _ ‚ãô F ‚âÖ inr_ _ _ ‚ãô G) :
    (natIsoOfNatIsoWhiskerLeftInlInr Œ∑‚ÇÅ Œ∑‚ÇÇ).inv =
      natTransOfNatTransWhiskerLeftInlInr Œ∑‚ÇÅ.inv Œ∑‚ÇÇ.inv := by
  aesop_cat

end Sum

end CategoryTheory
