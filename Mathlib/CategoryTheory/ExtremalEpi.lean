/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Subobject.Lattice
import Mathlib.CategoryTheory.Limits.Shapes.StrongEpi

/-!
# Extremal epimorphisms

An extremal epimorphism `p : X ‚ü∂ Y` is an epimorphism which does not factor
through any proper subobject of `Y`. In case the category has equalizers,
we show that a morphism `p : X ‚ü∂ Y` which does not factor through
any proper subobject of `Y` is automatically an epimorphism, and also
an extremal epimorphism. We also show that a strong epimorphism
is an extremal epimorphism, and that both notions coincide when
the category has pullbacks.

## References

* https://ncatlab.org/nlab/show/extremal+epimorphism

-/

universe v u

namespace CategoryTheory

open Limits

variable {C : Type u} [Category.{v} C] {X Y : C}

/-- An extremal epimorphism `f : X ‚ü∂ Y` is an epimorphism which does not
factor through any proper subobject of `Y`. -/
class ExtremalEpi (f : X ‚ü∂ Y) : Prop extends Epi f where
  isIso (f) {Z : C} (p : X ‚ü∂ Z) (i : Z ‚ü∂ Y) (fac : p ‚â´ i = f) [Mono i] : IsIso i

variable (f : X ‚ü∂ Y)

lemma ExtremalEpi.subobject_eq_top [ExtremalEpi f]
    {A : Subobject Y} (hA : Subobject.Factors A f) : A = ‚ä§ := by
  rw [‚Üê Subobject.isIso_arrow_iff_eq_top]
  exact isIso f (Subobject.factorThru A f hA) _ (by simp)

lemma ExtremalEpi.mk_of_hasEqualizers [HasEqualizers C]
    (hf : ‚àÄ ‚¶ÉZ : C‚¶Ñ (p : X ‚ü∂ Z) (i : Z ‚ü∂ Y) (_ : p ‚â´ i = f) [Mono i], IsIso i) :
    ExtremalEpi f where
  left_cancellation {Z} p q h := by
    have := hf (equalizer.lift f h) (equalizer.Œπ p q) (by simp)
    rw [‚Üê cancel_epi (equalizer.Œπ p q), equalizer.condition]
  isIso := by tauto

instance [StrongEpi f] : ExtremalEpi f where
  isIso {Z} p i fac _ := by
    have sq : CommSq p f i (ùüô Y) := { }
    exact ‚ü®sq.lift, by simp [‚Üê cancel_mono i], by simp‚ü©

lemma extremalEpi_iff_strongEpi_of_hasPullbacks [HasPullbacks C] :
    ExtremalEpi f ‚Üî StrongEpi f := by
  refine ‚ü®fun _ ‚Ü¶ ‚ü®inferInstance, fun A B i _ ‚Ü¶ ‚ü®fun {t b} sq ‚Ü¶ ‚ü®‚ü®?_‚ü©‚ü©‚ü©‚ü©,
    fun _ ‚Ü¶ inferInstance‚ü©
  have := ExtremalEpi.isIso f (pullback.lift _ _ sq.w)
    (pullback.snd _ _) (by simp)
  exact
    { l := inv (pullback.snd i b) ‚â´ pullback.fst _ _
      fac_left := by
        rw [‚Üê cancel_mono i, sq.w, Category.assoc, Category.assoc]
        congr 1
        rw [‚Üê cancel_epi (pullback.snd i b), IsIso.hom_inv_id_assoc,
          pullback.condition]
      fac_right := by simp [pullback.condition] }

end CategoryTheory
