/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Shift.CommShift
import Mathlib.CategoryTheory.Adjunction.Unique

/-!
# Adjoints commute with shifts

-/

namespace CategoryTheory

open Category

/-- Variant of `Iso.ext`. -/
lemma Iso.ext' {C : Type*} [Category C] {X Y : C} {e‚ÇÅ e‚ÇÇ : X ‚âÖ Y}
    (h : e‚ÇÅ.inv = e‚ÇÇ.inv) : e‚ÇÅ = e‚ÇÇ := by
  change e‚ÇÅ.symm.symm = e‚ÇÇ.symm.symm
  congr 1
  ext
  exact h

namespace Adjunction

variable {C D : Type*} [Category C] [Category D]
  {G‚ÇÅ G‚ÇÇ G‚ÇÉ : C ‚•§ D} {F‚ÇÅ F‚ÇÇ F‚ÇÉ : D ‚•§ C} (adj‚ÇÅ : G‚ÇÅ ‚ä£ F‚ÇÅ) (adj‚ÇÇ : G‚ÇÇ ‚ä£ F‚ÇÇ) (adj‚ÇÉ : G‚ÇÉ ‚ä£ F‚ÇÉ)

/-- natTransEquiv' -/
@[simps! apply_app symm_apply_app]
def natTransEquiv' : (G‚ÇÅ ‚ü∂ G‚ÇÇ) ‚âÉ (F‚ÇÇ ‚ü∂ F‚ÇÅ) where
  toFun Œ± := F‚ÇÇ.rightUnitor.inv ‚â´ whiskerLeft F‚ÇÇ adj‚ÇÅ.unit ‚â´ whiskerLeft _ (whiskerRight Œ± _) ‚â´
    (Functor.associator _ _ _).inv ‚â´ whiskerRight adj‚ÇÇ.counit F‚ÇÅ ‚â´ F‚ÇÅ.leftUnitor.hom
  invFun Œ≤ := G‚ÇÅ.leftUnitor.inv ‚â´ whiskerRight adj‚ÇÇ.unit G‚ÇÅ ‚â´ whiskerRight (whiskerLeft _ Œ≤ ) _ ‚â´
    (Functor.associator _ _ _ ).hom ‚â´ whiskerLeft G‚ÇÇ adj‚ÇÅ.counit ‚â´ G‚ÇÇ.rightUnitor.hom
  left_inv Œ± := by aesop_cat
  right_inv Œ± := by
    ext X
    dsimp
    simp only [Category.comp_id, Category.id_comp, Functor.map_comp, Category.assoc,
      unit_naturality_assoc, right_triangle_components_assoc, ‚Üê Œ±.naturality]

@[simp]
lemma natTransEquiv_id : natTransEquiv' adj‚ÇÅ adj‚ÇÅ (ùüô _) = ùüô _ := by aesop_cat

@[simp]
lemma natTransEquiv_symm_id : (natTransEquiv' adj‚ÇÅ adj‚ÇÅ).symm (ùüô _) = ùüô _ := by aesop_cat

@[reassoc (attr := simp)]
lemma natTransEquiv_comp (Œ± : G‚ÇÅ ‚ü∂ G‚ÇÇ) (Œ≤ : G‚ÇÇ ‚ü∂ G‚ÇÉ) :
    natTransEquiv' adj‚ÇÇ adj‚ÇÉ Œ≤ ‚â´ natTransEquiv' adj‚ÇÅ adj‚ÇÇ Œ± =
      natTransEquiv' adj‚ÇÅ adj‚ÇÉ (Œ± ‚â´ Œ≤) := by
  ext X
  apply (adj‚ÇÅ.homEquiv _ _).symm.injective
  dsimp
  simp [homEquiv_counit]

@[reassoc (attr := simp)]
lemma natTransEquiv_symm_comp (Œ± : F‚ÇÉ ‚ü∂ F‚ÇÇ) (Œ≤ : F‚ÇÇ ‚ü∂ F‚ÇÅ) :
    (natTransEquiv' adj‚ÇÅ adj‚ÇÇ).symm Œ≤ ‚â´ (natTransEquiv' adj‚ÇÇ adj‚ÇÉ).symm Œ± =
      (natTransEquiv' adj‚ÇÅ adj‚ÇÉ).symm (Œ± ‚â´ Œ≤) := by
  obtain ‚ü®Œ±', rfl‚ü© := (natTransEquiv' adj‚ÇÇ adj‚ÇÉ).surjective Œ±
  obtain ‚ü®Œ≤', rfl‚ü© := (natTransEquiv' adj‚ÇÅ adj‚ÇÇ).surjective Œ≤
  simp

/-- natIsoEquiv' -/
@[simps]
def natIsoEquiv' : (G‚ÇÅ ‚âÖ G‚ÇÇ) ‚âÉ (F‚ÇÅ ‚âÖ F‚ÇÇ) where
  toFun e :=
    { hom := natTransEquiv' adj‚ÇÇ adj‚ÇÅ e.inv
      inv := natTransEquiv' adj‚ÇÅ adj‚ÇÇ e.hom }
  invFun e :=
    { hom := (natTransEquiv' adj‚ÇÅ adj‚ÇÇ).symm e.inv
      inv := (natTransEquiv' adj‚ÇÇ adj‚ÇÅ).symm e.hom }
  left_inv e := by dsimp; ext1; simp only [Equiv.symm_apply_apply]
  right_inv e := by dsimp; ext1; simp only [Equiv.apply_symm_apply]

end Adjunction

namespace Adjunction

variable {C D : Type*} [Category C] [Category D]
  {F : C ‚•§ D} {G : D ‚•§ C} (adj : F ‚ä£ G) (A Z : Type*) [AddMonoid A] [AddGroup Z]
  [HasShift C A] [HasShift D A] [F.CommShift A] [G.CommShift A]
  [HasShift C Z] [HasShift D Z]

variable {A}

abbrev compat_unit (a : A) (e‚ÇÅ : shiftFunctor C a ‚ãô F ‚âÖ F ‚ãô shiftFunctor D a)
    (e‚ÇÇ : shiftFunctor D a ‚ãô G ‚âÖ G ‚ãô shiftFunctor C a) :=
  ‚àÄ (X : C),
  (adj.unit.app X)‚ü¶a‚üß' = adj.unit.app (X‚ü¶a‚üß) ‚â´ G.map (e‚ÇÅ.hom.app X) ‚â´ e‚ÇÇ.hom.app (F.obj X)

abbrev compat_counit (a : A) (e‚ÇÅ : shiftFunctor C a ‚ãô F ‚âÖ F ‚ãô shiftFunctor D a)
    (e‚ÇÇ : shiftFunctor D a ‚ãô G ‚âÖ G ‚ãô shiftFunctor C a) :=
  ‚àÄ (Y : D),
  adj.counit.app (Y‚ü¶a‚üß) = F.map (e‚ÇÇ.hom.app Y) ‚â´ e‚ÇÅ.hom.app (G.obj Y) ‚â´ (adj.counit.app Y)‚ü¶a‚üß'

lemma compat_unit_to_counit (a : A) (e‚ÇÅ : shiftFunctor C a ‚ãô F ‚âÖ F ‚ãô shiftFunctor D a)
    (e‚ÇÇ : shiftFunctor D a ‚ãô G ‚âÖ G ‚ãô shiftFunctor C a) (h : adj.compat_unit a e‚ÇÅ e‚ÇÇ) :
    adj.compat_counit a e‚ÇÅ e‚ÇÇ := by
  intro Y
  have eq := h (G.obj Y)
  rw [‚Üê cancel_mono (e‚ÇÇ.inv.app _ ‚â´ G.map (e‚ÇÅ.inv.app _))] at eq
  dsimp at eq ‚ä¢
  conv_rhs at eq => slice 3 4; rw [Iso.hom_inv_id_app]
  conv_rhs at eq => erw [id_comp]; rw [‚Üê Functor.map_comp, Iso.hom_inv_id_app];
                    erw [Functor.map_id]; rw [comp_id]
  apply (adj.homEquiv _ _).injective
  rw [adj.homEquiv_unit, adj.homEquiv_unit, G.map_comp, adj.unit_naturality_assoc, ‚Üê eq]
  slice_rhs 4 5 => rw [‚Üê Functor.map_comp, ‚Üê assoc, Iso.inv_hom_id_app]; erw [id_comp]
  erw [‚Üê e‚ÇÇ.inv.naturality]; rw [‚Üê assoc _ _ (e‚ÇÇ.inv.app Y), Functor.comp_map, ‚Üê Functor.map_comp]
  simp only [Functor.id_obj, Functor.comp_obj, right_triangle_components, Functor.map_id, id_comp,
    Iso.hom_inv_id_app]

lemma compat_unit_right (a : A) (e‚ÇÅ : shiftFunctor C a ‚ãô F ‚âÖ F ‚ãô shiftFunctor D a)
    (e‚ÇÇ : shiftFunctor D a ‚ãô G ‚âÖ G ‚ãô shiftFunctor C a) (h : adj.compat_unit a e‚ÇÅ e‚ÇÇ) (Y : D) :
    e‚ÇÇ.inv.app Y = adj.unit.app _ ‚â´ G.map (e‚ÇÅ.hom.app _) ‚â´ G.map ((adj.counit.app _)‚ü¶a‚üß') := by
  have := h (G.obj Y)
  rw [‚Üê cancel_mono (e‚ÇÇ.inv.app _), assoc, assoc, Iso.hom_inv_id_app] at this
  erw [comp_id] at this
  rw [‚Üê assoc, ‚Üê this, assoc]; erw [‚Üê e‚ÇÇ.inv.naturality]
  rw [‚Üê cancel_mono (e‚ÇÇ.hom.app _)]
  simp only [Functor.comp_obj, Iso.inv_hom_id_app, Functor.id_obj, Functor.comp_map, assoc, comp_id,
    ‚Üê (shiftFunctor C a).map_comp, right_triangle_components, Functor.map_id]

lemma compat_counit_left (a : A) (e‚ÇÅ : shiftFunctor C a ‚ãô F ‚âÖ F ‚ãô shiftFunctor D a)
    (e‚ÇÇ : shiftFunctor D a ‚ãô G ‚âÖ G ‚ãô shiftFunctor C a) (h : adj.compat_counit a e‚ÇÅ e‚ÇÇ) (X : C) :
    e‚ÇÅ.hom.app X = F.map ((adj.unit.app X)‚ü¶a‚üß') ‚â´ F.map (e‚ÇÇ.inv.app _) ‚â´ adj.counit.app _ := by
  have := h (F.obj X)
  rw [‚Üê cancel_epi (F.map (e‚ÇÇ.inv.app _)), ‚Üê assoc, ‚Üê F.map_comp, Iso.inv_hom_id_app, F.map_id,
    id_comp] at this
  rw [this]
  erw [e‚ÇÅ.hom.naturality_assoc]
  rw [Functor.comp_map, ‚Üê Functor.map_comp, left_triangle_components]
  simp only [Functor.comp_obj, Functor.id_obj, Functor.map_id, comp_id]

lemma compat_unique_right (a : A) (e‚ÇÅ : shiftFunctor C a ‚ãô F ‚âÖ F ‚ãô shiftFunctor D a)
    (e‚ÇÇ : shiftFunctor D a ‚ãô G ‚âÖ G ‚ãô shiftFunctor C a)
    (e‚ÇÇ' : shiftFunctor D a ‚ãô G ‚âÖ G ‚ãô shiftFunctor C a)
    (h : adj.compat_unit a e‚ÇÅ e‚ÇÇ) (h' : adj.compat_unit a e‚ÇÅ e‚ÇÇ') : e‚ÇÇ = e‚ÇÇ' := by
  rw [‚Üê Iso.symm_eq_iff]
  ext _
  rw [Iso.symm_hom, Iso.symm_hom, adj.compat_unit_right a e‚ÇÅ e‚ÇÇ h,
    adj.compat_unit_right a e‚ÇÅ e‚ÇÇ' h']

lemma compat_unique_left (a : A) (e‚ÇÅ : shiftFunctor C a ‚ãô F ‚âÖ F ‚ãô shiftFunctor D a)
    (e‚ÇÅ' : shiftFunctor C a ‚ãô F ‚âÖ F ‚ãô shiftFunctor D a)
    (e‚ÇÇ : shiftFunctor D a ‚ãô G ‚âÖ G ‚ãô shiftFunctor C a)
    (h : adj.compat_unit a e‚ÇÅ e‚ÇÇ) (h' : adj.compat_unit a e‚ÇÅ' e‚ÇÇ) : e‚ÇÅ = e‚ÇÅ' := by
  ext _
  rw [adj.compat_counit_left a e‚ÇÅ e‚ÇÇ (adj.compat_unit_to_counit a e‚ÇÅ e‚ÇÇ h),
    adj.compat_counit_left a e‚ÇÅ' e‚ÇÇ (adj.compat_unit_to_counit a e‚ÇÅ' e‚ÇÇ h')]

lemma compat_unit_isoZero : adj.compat_unit 0 (Functor.CommShift.isoZero F A)
    (Functor.CommShift.isoZero G A) := by
  intro X
  simp only [Functor.id_obj, Functor.comp_obj, Functor.CommShift.isoZero_hom_app, Functor.map_comp,
    assoc, unit_naturality_assoc]
  slice_rhs 3 4 => rw [‚Üê G.map_comp, Iso.inv_hom_id_app]
  rw [‚Üê cancel_mono ((shiftFunctorZero C A).hom.app _)]
  simp only [Functor.id_obj, NatTrans.naturality, Functor.id_map, Functor.map_id, id_comp, assoc,
    Iso.inv_hom_id_app, comp_id]

lemma compat_unit_add (a b : A) (e‚ÇÅ : shiftFunctor C a ‚ãô F ‚âÖ F ‚ãô shiftFunctor D a)
    (e‚ÇÅ' : shiftFunctor C b ‚ãô F ‚âÖ F ‚ãô shiftFunctor D b)
    (e‚ÇÇ : shiftFunctor D a ‚ãô G ‚âÖ G ‚ãô shiftFunctor C a)
    (e‚ÇÇ' : shiftFunctor D b ‚ãô G ‚âÖ G ‚ãô shiftFunctor C b)
    (h : adj.compat_unit a e‚ÇÅ e‚ÇÇ) (h' : adj.compat_unit b e‚ÇÅ' e‚ÇÇ') :
    adj.compat_unit (a + b) (Functor.CommShift.isoAdd e‚ÇÅ e‚ÇÅ') (Functor.CommShift.isoAdd e‚ÇÇ e‚ÇÇ') :=
  by
  intro X
  simp only [Functor.id_obj, Functor.comp_obj, Functor.CommShift.isoAdd_hom_app, Functor.map_comp,
    assoc, unit_naturality_assoc]
  slice_rhs 5 6 => rw [‚Üê G.map_comp, Iso.inv_hom_id_app]
  simp only [Functor.comp_obj, Functor.map_id, id_comp, assoc]
  slice_rhs 4 5 => erw [e‚ÇÇ'.hom.naturality]
  have := h' (X‚ü¶a‚üß)
  rw [‚Üê cancel_mono (e‚ÇÇ'.inv.app _), assoc, assoc, Iso.hom_inv_id_app] at this
  simp only [Functor.id_obj, Functor.comp_obj, comp_id] at this
  slice_rhs 2 3 => rw [‚Üê this]
  simp only [Functor.comp_obj, assoc, Iso.inv_hom_id_app, comp_id, Functor.comp_map]
  rw [‚Üê cancel_mono ((shiftFunctorAdd C a b).hom.app _), assoc, assoc, assoc, assoc,
    Iso.inv_hom_id_app]; erw [comp_id]
  rw [‚Üê (shiftFunctor C b).map_comp, ‚Üê (shiftFunctor C b).map_comp, ‚Üê h X]
  simp only [Functor.comp_obj, NatTrans.naturality, Functor.comp_map, Functor.id_obj]


variable (A)

class CommShift : Prop where
  commShift_unit : NatTrans.CommShift adj.unit A := by infer_instance
  commShift_counit : NatTrans.CommShift adj.counit A := by infer_instance

namespace CommShift

attribute [instance] commShift_unit commShift_counit

/-- Constructor for `Adjunction.CommShift`. -/
lemma mk' (h : NatTrans.CommShift adj.unit A) :
    adj.CommShift A where
  commShift_counit := ‚ü®by
    intro a
    ext X
    have eq := NatTrans.CommShift.app_shift adj.unit a (F.obj X)
    dsimp at eq ‚ä¢
    simp only [Functor.commShiftIso_id_hom_app, Functor.comp_obj,
      Functor.id_obj, Functor.commShiftIso_comp_inv_app, id_comp,
      Functor.commShiftIso_comp_hom_app, assoc, comp_id] at eq ‚ä¢
    apply (adj.homEquiv _ _).injective
    rw [adj.homEquiv_unit, adj.homEquiv_unit, F.map_comp]
    dsimp
    rw [adj.unit_naturality_assoc]
    simp only [eq, assoc, ‚Üê F.map_comp, Iso.inv_hom_id_app_assoc, right_triangle_components,
      ‚Üê F.commShiftIso_inv_naturality, ‚Üê Functor.map_comp_assoc, Functor.map_id, id_comp,
      Iso.hom_inv_id_app, Functor.comp_obj]‚ü©

end CommShift

variable {A}

@[reassoc]
lemma shift_unit_app [adj.CommShift A] (a : A) (X : C) :
    (adj.unit.app X)‚ü¶a‚üß' =
      adj.unit.app (X‚ü¶a‚üß) ‚â´
        F.map ((G.commShiftIso a).hom.app X) ‚â´
          (F.commShiftIso a).hom.app (G.obj X) := by
  simpa [Functor.commShiftIso_comp_hom_app] using NatTrans.CommShift.comm_app adj.unit a X

@[reassoc]
lemma shift_counit_app [adj.CommShift A] (a : A) (X : D) :
    (adj.counit.app X)‚ü¶a‚üß' =
      (G.commShiftIso a).inv.app (F.obj X) ‚â´ G.map ((F.commShiftIso a).inv.app X)
        ‚â´ adj.counit.app (X‚ü¶a‚üß) := by
  have eq := NatTrans.CommShift.comm_app adj.counit a X
  simp only [Functor.comp_obj, Functor.id_obj, Functor.commShiftIso_comp_hom_app, assoc,
    Functor.CommShift.commShiftIso_id_hom_app, comp_id] at eq
  simp only [‚Üê eq, Functor.comp_obj, ‚Üê G.map_comp_assoc, Iso.inv_hom_id_app,
    Functor.map_id, id_comp, Iso.inv_hom_id_app_assoc]
