/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Shift.CommShift
import Mathlib.CategoryTheory.Preadditive.AdditiveFunctor

/-! Shifted morphisms

Given a category `C` endowed with a shift by an additive monoid `M` and two
objects `X` and `Y` in `C`, we consider the types `ShiftedHom X Y m`
defined as `X ‚ü∂ (Y‚ü¶m‚üß)` for all `m : M`, and the composition on these
shifted hom.

## TODO

* redefine Ext-groups in abelian categories using `ShiftedHom` in the derived category.
* study the `R`-module structures on `ShiftedHom` when `C` is `R`-linear

-/

namespace CategoryTheory

open Category

variable {C : Type*} [Category C] {D : Type*} [Category D] {E : Type*} [Category E]
  {M : Type*} [AddMonoid M] [HasShift C M] [HasShift D M] [HasShift E M]

/-- In a category `C` equipped with a shift by an additive monoid,
this is the type of morphisms `X ‚ü∂ (Y‚ü¶n‚üß)` for `m : M`. -/
def ShiftedHom (X Y : C) (m : M) : Type _ := X ‚ü∂ (Y‚ü¶m‚üß)

instance [Preadditive C] (X Y : C) (n : M) : AddCommGroup (ShiftedHom X Y n) := by
  dsimp only [ShiftedHom]
  infer_instance

namespace ShiftedHom

variable {X Y Z T : C}

/-- The composition of `f : X ‚ü∂ Y‚ü¶a‚üß` and `g : Y ‚ü∂ Z‚ü¶b‚üß`, as a morphism `X ‚ü∂ Z‚ü¶c‚üß`
when `b + a = c`. -/
noncomputable def comp {a b c : M} (f : ShiftedHom X Y a) (g : ShiftedHom Y Z b) (h : b + a = c) :
    ShiftedHom X Z c :=
  f ‚â´ g‚ü¶a‚üß' ‚â´ (shiftFunctorAdd' C b a c h).inv.app _

lemma comp_assoc {a‚ÇÅ a‚ÇÇ a‚ÇÉ a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÉ a : M}
    (Œ± : ShiftedHom X Y a‚ÇÅ) (Œ≤ : ShiftedHom Y Z a‚ÇÇ) (Œ≥ : ShiftedHom Z T a‚ÇÉ)
    (h‚ÇÅ‚ÇÇ : a‚ÇÇ + a‚ÇÅ = a‚ÇÅ‚ÇÇ) (h‚ÇÇ‚ÇÉ : a‚ÇÉ + a‚ÇÇ = a‚ÇÇ‚ÇÉ) (h : a‚ÇÉ + a‚ÇÇ + a‚ÇÅ = a) :
    (Œ±.comp Œ≤ h‚ÇÅ‚ÇÇ).comp Œ≥ (show a‚ÇÉ + a‚ÇÅ‚ÇÇ = a by rw [‚Üê h‚ÇÅ‚ÇÇ, ‚Üê add_assoc, h]) =
      Œ±.comp (Œ≤.comp Œ≥ h‚ÇÇ‚ÇÉ) (by rw [‚Üê h‚ÇÇ‚ÇÉ, h]) := by
  simp only [comp, assoc, Functor.map_comp,
    shiftFunctorAdd'_assoc_inv_app a‚ÇÉ a‚ÇÇ a‚ÇÅ a‚ÇÇ‚ÇÉ a‚ÇÅ‚ÇÇ a h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÇ h,
    ‚Üê NatTrans.naturality_assoc, Functor.comp_map]

/-! In degree `0 : M`, shifted hom `ShiftedHom X Y 0` identify to morphisms `X ‚ü∂ Y`.
We generalize this to `m‚ÇÄ : M` such that `m‚ÇÄ : 0` as it shall be convenient when we
apply this with `M := ‚Ñ§` and `m‚ÇÄ` the coercion of `0 : ‚Ñï`. -/

/-- The element of `ShiftedHom X Y m‚ÇÄ` (when `m‚ÇÄ = 0`) attached to a morphism `X ‚ü∂ Y`. -/
noncomputable def mk‚ÇÄ (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0) (f : X ‚ü∂ Y) : ShiftedHom X Y m‚ÇÄ :=
  f ‚â´ (shiftFunctorZero' C m‚ÇÄ hm‚ÇÄ).inv.app Y

/-- The bijection `(X ‚ü∂ Y) ‚âÉ ShiftedHom X Y m‚ÇÄ` when `m‚ÇÄ = 0`. -/
@[simps apply]
noncomputable def homEquiv (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0) : (X ‚ü∂ Y) ‚âÉ ShiftedHom X Y m‚ÇÄ where
  toFun f := mk‚ÇÄ m‚ÇÄ hm‚ÇÄ f
  invFun g := g ‚â´ (shiftFunctorZero' C m‚ÇÄ hm‚ÇÄ).hom.app Y
  left_inv f := by simp [mk‚ÇÄ]
  right_inv g := by simp [mk‚ÇÄ]

lemma mk‚ÇÄ_comp (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0) (f : X ‚ü∂ Y) {a : M} (g : ShiftedHom Y Z a) :
    (mk‚ÇÄ m‚ÇÄ hm‚ÇÄ f).comp g (by rw [hm‚ÇÄ, add_zero]) = f ‚â´ g := by
  subst hm‚ÇÄ
  simp [comp, mk‚ÇÄ, shiftFunctorAdd'_add_zero_inv_app, shiftFunctorZero']

@[simp]
lemma mk‚ÇÄ_id_comp (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0) {a : M} (f : ShiftedHom X Y a) :
    (mk‚ÇÄ m‚ÇÄ hm‚ÇÄ (ùüô X)).comp f (by rw [hm‚ÇÄ, add_zero]) = f := by
  simp [mk‚ÇÄ_comp]

lemma comp_mk‚ÇÄ {a : M} (f : ShiftedHom X Y a) (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0) (g : Y ‚ü∂ Z) :
    f.comp (mk‚ÇÄ m‚ÇÄ hm‚ÇÄ g) (by rw [hm‚ÇÄ, zero_add]) = f ‚â´ g‚ü¶a‚üß' := by
  subst hm‚ÇÄ
  simp only [comp, shiftFunctorAdd'_zero_add_inv_app, mk‚ÇÄ, shiftFunctorZero',
    eqToIso_refl, Iso.refl_trans, ‚Üê Functor.map_comp, assoc, Iso.inv_hom_id_app,
    Functor.id_obj, comp_id]

@[simp]
lemma comp_mk‚ÇÄ_id {a : M} (f : ShiftedHom X Y a) (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0) :
    f.comp (mk‚ÇÄ m‚ÇÄ hm‚ÇÄ (ùüô Y)) (by rw [hm‚ÇÄ, zero_add]) = f := by
  simp [comp_mk‚ÇÄ]

@[simp 1100]
lemma mk‚ÇÄ_comp_mk‚ÇÄ (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) {a b c : M} (h : b + a = c)
    (ha : a = 0) (hb : b = 0) :
    (mk‚ÇÄ a ha f).comp (mk‚ÇÄ b hb g) h = mk‚ÇÄ c (by rw [‚Üê h, ha, hb, add_zero]) (f ‚â´ g) := by
  subst ha hb
  obtain rfl : c = 0 := by rw [‚Üê h, zero_add]
  rw [mk‚ÇÄ_comp, mk‚ÇÄ, mk‚ÇÄ, assoc]

@[simp]
lemma mk‚ÇÄ_comp_mk‚ÇÄ_assoc (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) {a : M}
    (ha : a = 0) {d : M} (h : ShiftedHom Z T d) :
    (mk‚ÇÄ a ha f).comp ((mk‚ÇÄ a ha g).comp h
        (show _ = d by rw [ha, add_zero])) (show _ = d by rw [ha, add_zero]) =
      (mk‚ÇÄ a ha (f ‚â´ g)).comp h (by rw [ha, add_zero]) := by
  subst ha
  rw [‚Üê comp_assoc, mk‚ÇÄ_comp_mk‚ÇÄ]
  all_goals simp

section Preadditive

variable [Preadditive C]

variable (X Y) in
@[simp]
lemma mk‚ÇÄ_zero (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0) : mk‚ÇÄ m‚ÇÄ hm‚ÇÄ (0 : X ‚ü∂ Y) = 0 := by simp [mk‚ÇÄ]

@[simp]
lemma comp_add [‚àÄ (a : M), (shiftFunctor C a).Additive]
    {a b c : M} (Œ± : ShiftedHom X Y a) (Œ≤‚ÇÅ Œ≤‚ÇÇ : ShiftedHom Y Z b) (h : b + a = c) :
    Œ±.comp (Œ≤‚ÇÅ + Œ≤‚ÇÇ) h = Œ±.comp Œ≤‚ÇÅ h + Œ±.comp Œ≤‚ÇÇ h := by
  rw [comp, comp, comp, Functor.map_add, Preadditive.add_comp, Preadditive.comp_add]

@[simp]
lemma add_comp
    {a b c : M} (Œ±‚ÇÅ Œ±‚ÇÇ : ShiftedHom X Y a) (Œ≤ : ShiftedHom Y Z b) (h : b + a = c) :
    (Œ±‚ÇÅ + Œ±‚ÇÇ).comp Œ≤ h = Œ±‚ÇÅ.comp Œ≤ h + Œ±‚ÇÇ.comp Œ≤ h := by
  rw [comp, comp, comp, Preadditive.add_comp]

@[simp]
lemma comp_neg [‚àÄ (a : M), (shiftFunctor C a).Additive]
    {a b c : M} (Œ± : ShiftedHom X Y a) (Œ≤ : ShiftedHom Y Z b) (h : b + a = c) :
    Œ±.comp (-Œ≤) h = -Œ±.comp Œ≤ h := by
  rw [comp, comp, Functor.map_neg, Preadditive.neg_comp, Preadditive.comp_neg]

@[simp]
lemma neg_comp
    {a b c : M} (Œ± : ShiftedHom X Y a) (Œ≤ : ShiftedHom Y Z b) (h : b + a = c) :
    (-Œ±).comp Œ≤ h = -Œ±.comp Œ≤ h := by
  rw [comp, comp, Preadditive.neg_comp]

variable (Z) in
@[simp]
lemma comp_zero [‚àÄ (a : M), (shiftFunctor C a).PreservesZeroMorphisms]
    {a : M} (Œ≤ : ShiftedHom X Y a) {b c : M} (h : b + a = c) :
    Œ≤.comp (0 : ShiftedHom Y Z b) h = 0 := by
  rw [comp, Functor.map_zero, Limits.zero_comp, Limits.comp_zero]

variable (X) in
@[simp]
lemma zero_comp (a : M) {b c : M} (Œ≤ : ShiftedHom Y Z b) (h : b + a = c) :
    (0 : ShiftedHom X Y a).comp Œ≤ h = 0 := by
  rw [comp, Limits.zero_comp]

end Preadditive

/-- The action on `ShiftedHom` of a functor which commutes with the shift. -/
def map {a : M} (f : ShiftedHom X Y a) (F : C ‚•§ D) [F.CommShift M] :
    ShiftedHom (F.obj X) (F.obj Y) a :=
  F.map f ‚â´ (F.commShiftIso a).hom.app Y

@[simp]
lemma id_map {a : M} (f : ShiftedHom X Y a) : f.map (ùü≠ C) = f := by
  simp [map, Functor.commShiftIso, Functor.CommShift.iso]

lemma comp_map {a : M} (f : ShiftedHom X Y a) (F : C ‚•§ D) [F.CommShift M]
    (G : D ‚•§ E) [G.CommShift M] : f.map (F ‚ãô G) = (f.map F).map G := by
  simp [map, Functor.commShiftIso_comp_hom_app]

lemma map_comp {a b c : M} (f : ShiftedHom X Y a) (g : ShiftedHom Y Z b)
    (h : b + a = c) (F : C ‚•§ D) [F.CommShift M] :
    (f.comp g h).map F = (f.map F).comp (g.map F) h := by
  dsimp [comp, map]
  simp only [Functor.map_comp, assoc]
  erw [‚Üê NatTrans.naturality_assoc]
  simp only [Functor.comp_map, F.commShiftIso_add' h, Functor.CommShift.isoAdd'_hom_app,
    ‚Üê Functor.map_comp_assoc, Iso.inv_hom_id_app, Functor.comp_obj, comp_id, assoc]

end ShiftedHom

end CategoryTheory
