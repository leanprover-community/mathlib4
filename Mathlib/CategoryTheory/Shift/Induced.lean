/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Shift.CommShift

/-!
# Shift induced from a category to another

In this file, we introduce a sufficient condition on a functor
`F : C ‚•§ D` so that a shift on `C` by a monoid `A` induces a shift on `D`.
More precisely, when the functor `(D ‚•§ D) ‚•§ C ‚•§ D` given
by the precomposition with `F` is fully faithful, and that
all the shift functors on `C` can be lifted to functors `D ‚•§ D`
(i.e. we have functors `s a : D ‚•§ D` for all `a : A`, and isomorphisms
`F ‚ãô s a ‚âÖ shiftFunctor C a ‚ãô F`), then these functors `s a` are
the shift functors of a term of type `HasShift D A`.

As this condition on the functor `F` is satisfied for quotient and localization
functors, the main construction `HasShift.induced` in this file shall be
used for both quotient and localized shifts.

-/

namespace CategoryTheory

variable {C D : Type _} [Category C] [Category D]
  (F : C ‚•§ D) {A : Type _} [AddMonoid A] [HasShift C A]
  (s : A ‚Üí D ‚•§ D) (i : ‚àÄ a, F ‚ãô s a ‚âÖ shiftFunctor C a ‚ãô F)
  (hF : Nonempty (Full ((whiskeringLeft C D D).obj F)) ‚àß Faithful ((whiskeringLeft C D D).obj F))

namespace HasShift

namespace Induced

/-- The `zero` field of the `ShiftMkCore` structure for the induced shift. -/
noncomputable def zero : s 0 ‚âÖ ùü≠ D :=
  letI := hF.1.some
  have := hF.2
  ((whiskeringLeft C D D).obj F).preimageIso ((i 0) ‚â™‚â´
    isoWhiskerRight (shiftFunctorZero C A) F ‚â™‚â´ F.leftUnitor ‚â™‚â´ F.rightUnitor.symm)

/-- The `add` field of the `ShiftMkCore` structure for the induced shift. -/
noncomputable def add (a b : A) : s (a + b) ‚âÖ s a ‚ãô s b :=
  letI := hF.1.some
  have := hF.2
  ((whiskeringLeft C D D).obj F).preimageIso
    (i (a + b) ‚â™‚â´ isoWhiskerRight (shiftFunctorAdd C a b) F ‚â™‚â´
      Functor.associator _ _ _ ‚â™‚â´
        isoWhiskerLeft _ (i b).symm ‚â™‚â´ (Functor.associator _ _ _).symm ‚â™‚â´
        isoWhiskerRight (i a).symm _ ‚â™‚â´ Functor.associator _ _ _)

@[simp]
lemma zero_hom_app_obj (X : C) :
    (zero F s i hF).hom.app (F.obj X) =
      (i 0).hom.app X ‚â´ F.map ((shiftFunctorZero C A).hom.app X) := by
  letI := hF.1.some
  have h : whiskerLeft F (zero F s i hF).hom = _ :=
    ((whiskeringLeft C D D).obj F).image_preimage _
  exact (NatTrans.congr_app h X).trans (by simp)

@[simp]
lemma zero_inv_app_obj (X : C) :
    (zero F s i hF).inv.app (F.obj X) =
      F.map ((shiftFunctorZero C A).inv.app X) ‚â´ (i 0).inv.app X := by
  letI := hF.1.some
  have h : whiskerLeft F (zero F s i hF).inv = _ :=
    ((whiskeringLeft C D D).obj F).image_preimage _
  exact (NatTrans.congr_app h X).trans (by simp)

@[simp]
lemma add_hom_app_obj (a b : A) (X : C) :
    (add F s i hF a b).hom.app (F.obj X) =
      (i (a + b)).hom.app X ‚â´ F.map ((shiftFunctorAdd C a b).hom.app X) ‚â´
        (i b).inv.app ((shiftFunctor C a).obj X) ‚â´ (s b).map ((i a).inv.app X) := by
  letI := hF.1.some
  have h : whiskerLeft F (add F s i hF a b).hom = _ :=
    ((whiskeringLeft C D D).obj F).image_preimage _
  exact (NatTrans.congr_app h X).trans (by simp)

@[simp]
lemma add_inv_app_obj (a b : A) (X : C) :
    (add F s i hF a b).inv.app (F.obj X) =
      (s b).map ((i a).hom.app X) ‚â´ (i b).hom.app ((shiftFunctor C a).obj X) ‚â´
        F.map ((shiftFunctorAdd C a b).inv.app X) ‚â´ (i (a + b)).inv.app X := by
  letI := hF.1.some
  have h : whiskerLeft F (add F s i hF a b).inv = _ :=
    ((whiskeringLeft C D D).obj F).image_preimage _
  exact (NatTrans.congr_app h X).trans (by simp)

end Induced

variable (A)

/-- When `F : C ‚•§ D` is a functor satisfying suitable technical assumptions,
this is the induced term of type `HasShift D A` deduced from `[HasShift C A]`. -/
noncomputable def induced : HasShift D A :=
  hasShiftMk D A
    { F := s
      zero := Induced.zero F s i hF
      add := Induced.add F s i hF
      zero_add_hom_app := fun n => by
        have := hF.2
        suffices (Induced.add F s i hF 0 n).hom =
          eqToHom (by rw [zero_add]; rfl) ‚â´ whiskerRight (Induced.zero F s i hF).inv (s n) by
          intro X
          simpa using NatTrans.congr_app this X
        apply ((whiskeringLeft C D D).obj F).map_injective
        ext X
        have eq := dcongr_arg (fun a => (i a).hom.app X) (zero_add n)
        dsimp
        simp only [Induced.add_hom_app_obj, eq, shiftFunctorAdd_zero_add_hom_app,
          Functor.map_comp, eqToHom_map, Category.assoc, eqToHom_trans_assoc,
          eqToHom_refl, Category.id_comp, eqToHom_app, Induced.zero_inv_app_obj]
        erw [‚Üê NatTrans.naturality_assoc, Iso.hom_inv_id_app_assoc]
        rfl
      add_zero_hom_app := fun n => by
        have := hF.2
        suffices (Induced.add F s i hF n 0).hom =
            eqToHom (by rw [add_zero]; rfl) ‚â´ whiskerLeft (s n) (Induced.zero F s i hF).inv  by
          intro X
          simpa using NatTrans.congr_app this X
        apply ((whiskeringLeft C D D).obj F).map_injective
        ext X
        dsimp
        erw [Induced.add_hom_app_obj, dcongr_arg (fun a => (i a).hom.app X) (add_zero n),
          ‚Üê cancel_mono ((s 0).map ((i n).hom.app X)), Category.assoc,
          Category.assoc, Category.assoc, Category.assoc, Category.assoc,
          Category.assoc, ‚Üê (s 0).map_comp, Iso.inv_hom_id_app, Functor.map_id, Category.comp_id,
          ‚Üê NatTrans.naturality, Induced.zero_inv_app_obj,
          shiftFunctorAdd_add_zero_hom_app]
        simp [eqToHom_map, eqToHom_app]
      assoc_hom_app := fun m‚ÇÅ m‚ÇÇ m‚ÇÉ => by
        have := hF.2
        suffices (Induced.add F s i hF (m‚ÇÅ + m‚ÇÇ) m‚ÇÉ).hom ‚â´
            whiskerRight (Induced.add F s i hF m‚ÇÅ m‚ÇÇ).hom (s m‚ÇÉ) =
            eqToHom (by rw [add_assoc]) ‚â´ (Induced.add F s i hF m‚ÇÅ (m‚ÇÇ + m‚ÇÉ)).hom ‚â´
              whiskerLeft (s m‚ÇÅ) (Induced.add F s i hF m‚ÇÇ m‚ÇÉ).hom by
          intro X
          simpa using NatTrans.congr_app this X
        apply ((whiskeringLeft C D D).obj F).map_injective
        ext X
        dsimp
        have eq := F.congr_map (shiftFunctorAdd'_assoc_hom_app
          m‚ÇÅ m‚ÇÇ m‚ÇÉ _ _ (m‚ÇÅ+m‚ÇÇ+m‚ÇÉ) rfl rfl rfl X)
        simp only [shiftFunctorAdd'_eq_shiftFunctorAdd] at eq
        simp only [Functor.comp_obj, Functor.map_comp, shiftFunctorAdd',
          Iso.trans_hom, eqToIso.hom, NatTrans.comp_app, eqToHom_app,
          Category.assoc] at eq
        rw [‚Üê cancel_mono ((s m‚ÇÉ).map ((s m‚ÇÇ).map ((i m‚ÇÅ).hom.app X)))]
        simp only [Induced.add_hom_app_obj, Category.assoc, Functor.map_comp]
        slice_lhs 4 5 =>
          erw [‚Üê Functor.map_comp, Iso.inv_hom_id_app, Functor.map_id]
        erw [Category.id_comp]
        slice_lhs 6 7 =>
          erw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp, Iso.inv_hom_id_app,
            (s m‚ÇÇ).map_id, (s m‚ÇÉ).map_id]
        erw [Category.comp_id, ‚ÜêNatTrans.naturality_assoc, reassoc_of% eq,
          dcongr_arg (fun a => (i a).hom.app X) (add_assoc m‚ÇÅ m‚ÇÇ m‚ÇÉ).symm]
        simp only [Functor.comp_obj, eqToHom_map, eqToHom_app, NatTrans.naturality_assoc,
          Induced.add_hom_app_obj, Functor.comp_map, Category.assoc, Iso.inv_hom_id_app_assoc,
          eqToHom_trans_assoc, eqToHom_refl, Category.id_comp, Category.comp_id,
          ‚Üê Functor.map_comp, Iso.inv_hom_id_app, Functor.map_id] }

end HasShift

@[simp]
lemma shiftFunctor_of_induced (a : A) :
    letI := HasShift.induced F A s i hF
    shiftFunctor D a = s a := by
  rfl

variable (A)

@[simp]
lemma shiftFunctorZero_hom_app_obj_of_induced (X : C) :
    letI := HasShift.induced F A s i hF
    (shiftFunctorZero D A).hom.app (F.obj X) =
      (i 0).hom.app X ‚â´ F.map ((shiftFunctorZero C A).hom.app X) := by
  letI := HasShift.induced F A s i
  simp only [ShiftMkCore.shiftFunctorZero_eq, HasShift.Induced.zero_hom_app_obj]

@[simp]
lemma shiftFunctorZero_inv_app_obj_of_induced (X : C) :
    letI := HasShift.induced F A s i hF
    (shiftFunctorZero D A).inv.app (F.obj X) =
      F.map ((shiftFunctorZero C A).inv.app X) ‚â´ (i 0).inv.app X := by
  letI := HasShift.induced F A s i
  simp only [ShiftMkCore.shiftFunctorZero_eq, HasShift.Induced.zero_inv_app_obj]

variable {A}

@[simp]
lemma shiftFunctorAdd_hom_app_obj_of_induced (a b : A) (X : C) :
    letI := HasShift.induced F A s i hF
    (shiftFunctorAdd D a b).hom.app (F.obj X) =
      (i (a + b)).hom.app X ‚â´
        F.map ((shiftFunctorAdd C a b).hom.app X) ‚â´
        (i b).inv.app ((shiftFunctor C a).obj X) ‚â´
        (s b).map ((i a).inv.app X) := by
  letI := HasShift.induced F A s i
  simp only [ShiftMkCore.shiftFunctorAdd_eq, HasShift.Induced.add_hom_app_obj]

@[simp]
lemma shiftFunctorAdd_inv_app_obj_of_induced (a b : A) (X : C) :
    letI := HasShift.induced F A s i hF
    (shiftFunctorAdd D a b).inv.app (F.obj X) =
      (s b).map ((i a).hom.app X) ‚â´
      (i b).hom.app ((shiftFunctor C a).obj X) ‚â´
      F.map ((shiftFunctorAdd C a b).inv.app X) ‚â´
      (i (a + b)).inv.app X := by
  letI := HasShift.induced F A s i
  simp only [ShiftMkCore.shiftFunctorAdd_eq, HasShift.Induced.add_inv_app_obj]

variable (A)

/-- When the target category of a functor `F : C ‚•§ D` is equipped with
the induced shift, this is the compatibility of `F` with the shifts on
the categories `C` and `D`. -/
def Functor.CommShift.ofInduced :
    letI := HasShift.induced F A s i hF
    F.CommShift A := by
  letI := HasShift.induced F A s i hF
  exact
    { iso := fun a => (i a).symm
      zero := by
        ext X
        dsimp
        simp only [isoZero_hom_app, shiftFunctorZero_inv_app_obj_of_induced,
          ‚Üê F.map_comp_assoc, Iso.hom_inv_id_app, F.map_id, Category.id_comp]
      add := fun a b => by
        ext X
        dsimp
        simp only [isoAdd_hom_app, Iso.symm_hom, shiftFunctorAdd_inv_app_obj_of_induced,
          shiftFunctor_of_induced]
        erw [‚Üê Functor.map_comp_assoc, Iso.inv_hom_id_app, Functor.map_id,
          Category.id_comp, Iso.inv_hom_id_app_assoc, ‚ÜêF.map_comp_assoc, Iso.hom_inv_id_app,
          F.map_id, Category.id_comp] }

lemma Functor.commShiftIso_eq_ofInduced (a : A) :
    letI := HasShift.induced F A s i hF
    letI := Functor.CommShift.ofInduced F A s i hF
    F.commShiftIso a = (i a).symm := rfl

end CategoryTheory
