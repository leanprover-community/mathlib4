/-
Copyright (c) 2017 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison
-/
import Mathlib.CategoryTheory.Functor.Hom
import Mathlib.CategoryTheory.Products.Basic
import Mathlib.Data.ULift
import Mathlib.Logic.Function.ULift

/-!
# The Yoneda embedding

The Yoneda embedding as a functor `yoneda : C ‚•§ (C·µí·µñ ‚•§ Type v‚ÇÅ)`,
along with an instance that it is `FullyFaithful`.

Also the Yoneda lemma, `yonedaLemma : (yoneda_pairing C) ‚âÖ (yoneda_evaluation C)`.

## References
* [Stacks: Opposite Categories and the Yoneda Lemma](https://stacks.math.columbia.edu/tag/001L)
-/

namespace CategoryTheory

open Opposite

universe v v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

-- morphism levels before object levels. See note [CategoryTheory universes].
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]

/-- The Yoneda embedding, as a functor from `C` into presheaves on `C`.

See <https://stacks.math.columbia.edu/tag/001O>.
-/
@[simps]
def yoneda : C ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ where
  obj X :=
    { obj := fun Y => unop Y ‚ü∂ X
      map := fun f g => f.unop ‚â´ g }
  map f :=
    { app := fun _ g => g ‚â´ f }

/-- The co-Yoneda embedding, as a functor from `C·µí·µñ` into co-presheaves on `C`.
-/
@[simps]
def coyoneda : C·µí·µñ ‚•§ C ‚•§ Type v‚ÇÅ where
  obj X :=
    { obj := fun Y => unop X ‚ü∂ Y
      map := fun f g => g ‚â´ f }
  map f :=
    { app := fun _ g => f.unop ‚â´ g }

namespace Yoneda

theorem obj_map_id {X Y : C} (f : op X ‚ü∂ op Y) :
    (yoneda.obj X).map f (ùüô X) = (yoneda.map f.unop).app (op Y) (ùüô Y) := by
  dsimp
  simp

@[simp]
theorem naturality {X Y : C} (Œ± : yoneda.obj X ‚ü∂ yoneda.obj Y) {Z Z' : C} (f : Z ‚ü∂ Z')
    (h : Z' ‚ü∂ X) : f ‚â´ Œ±.app (op Z') h = Œ±.app (op Z) (f ‚â´ h) :=
  (FunctorToTypes.naturality _ _ Œ± f.op h).symm

/-- The Yoneda embedding is fully faithful. -/
def fullyFaithful : (yoneda (C := C)).FullyFaithful where
  preimage f := f.app _ (ùüô _)

lemma fullyFaithful_preimage {X Y : C} (f : yoneda.obj X ‚ü∂ yoneda.obj Y) :
    fullyFaithful.preimage f = f.app (op X) (ùüô X) := rfl

/-- The Yoneda embedding is full.

See <https://stacks.math.columbia.edu/tag/001P>.
-/
instance yoneda_full : (yoneda : C ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ).Full :=
  fullyFaithful.full

/-- The Yoneda embedding is faithful.

See <https://stacks.math.columbia.edu/tag/001P>.
-/
instance yoneda_faithful : (yoneda : C ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ).Faithful :=
  fullyFaithful.faithful

/-- Extensionality via Yoneda. The typical usage would be
```
-- Goal is `X ‚âÖ Y`
apply yoneda.ext,
-- Goals are now functions `(Z ‚ü∂ X) ‚Üí (Z ‚ü∂ Y)`, `(Z ‚ü∂ Y) ‚Üí (Z ‚ü∂ X)`, and the fact that these
-- functions are inverses and natural in `Z`.
```
-/
def ext (X Y : C) (p : ‚àÄ {Z : C}, (Z ‚ü∂ X) ‚Üí (Z ‚ü∂ Y))
    (q : ‚àÄ {Z : C}, (Z ‚ü∂ Y) ‚Üí (Z ‚ü∂ X))
    (h‚ÇÅ : ‚àÄ {Z : C} (f : Z ‚ü∂ X), q (p f) = f) (h‚ÇÇ : ‚àÄ {Z : C} (f : Z ‚ü∂ Y), p (q f) = f)
    (n : ‚àÄ {Z Z' : C} (f : Z' ‚ü∂ Z) (g : Z ‚ü∂ X), p (f ‚â´ g) = f ‚â´ p g) : X ‚âÖ Y :=
  fullyFaithful.preimageIso
    (NatIso.ofComponents fun Z =>
      { hom := p
        inv := q })

/-- If `yoneda.map f` is an isomorphism, so was `f`.
-/
theorem isIso {X Y : C} (f : X ‚ü∂ Y) [IsIso (yoneda.map f)] : IsIso f :=
  isIso_of_fully_faithful yoneda f

end Yoneda

namespace Coyoneda

@[simp]
theorem naturality {X Y : C·µí·µñ} (Œ± : coyoneda.obj X ‚ü∂ coyoneda.obj Y) {Z Z' : C} (f : Z' ‚ü∂ Z)
    (h : unop X ‚ü∂ Z') : Œ±.app Z' h ‚â´ f = Œ±.app Z (h ‚â´ f) :=
  (FunctorToTypes.naturality _ _ Œ± f h).symm

/-- The co-Yoneda embedding is fully faithful. -/
def fullyFaithful : (coyoneda (C := C)).FullyFaithful where
  preimage f := (f.app _ (ùüô _)).op

lemma fullyFaithful_preimage {X Y : C·µí·µñ} (f : coyoneda.obj X ‚ü∂ coyoneda.obj Y) :
    fullyFaithful.preimage f = (f.app X.unop (ùüô X.unop)).op := rfl

/-- The morphism `X ‚ü∂ Y` corresponding to a natural transformation
`coyoneda.obj X ‚ü∂ coyoneda.obj Y`. -/
def preimage {X Y : C·µí·µñ} (f : coyoneda.obj X ‚ü∂ coyoneda.obj Y) : X ‚ü∂ Y :=
  (f.app _ (ùüô X.unop)).op

instance coyoneda_full : (coyoneda : C·µí·µñ ‚•§ C ‚•§ Type v‚ÇÅ).Full :=
  fullyFaithful.full

instance coyoneda_faithful : (coyoneda : C·µí·µñ ‚•§ C ‚•§ Type v‚ÇÅ).Faithful :=
  fullyFaithful.faithful

/-- If `coyoneda.map f` is an isomorphism, so was `f`.
-/
theorem isIso {X Y : C·µí·µñ} (f : X ‚ü∂ Y) [IsIso (coyoneda.map f)] : IsIso f :=
  isIso_of_fully_faithful coyoneda f

/-- The identity functor on `Type` is isomorphic to the coyoneda functor coming from `PUnit`. -/
def punitIso : coyoneda.obj (Opposite.op PUnit) ‚âÖ ùü≠ (Type v‚ÇÅ) :=
  NatIso.ofComponents fun X =>
    { hom := fun f => f ‚ü®‚ü©
      inv := fun x _ => x }

/-- Taking the `unop` of morphisms is a natural isomorphism. -/
@[simps!]
def objOpOp (X : C) : coyoneda.obj (op (op X)) ‚âÖ yoneda.obj X :=
  NatIso.ofComponents fun _ => (opEquiv _ _).toIso

end Coyoneda

namespace Functor

/-- The data which expresses that a functor `F : C·µí·µñ ‚•§ Type v` is representable by `Y : C`. -/
structure RepresentableBy (F : C·µí·µñ ‚•§ Type v) (Y : C) where
  /-- the natural bijection `(X ‚ü∂ Y) ‚âÉ F.obj (op X)`. -/
  homEquiv {X : C} : (X ‚ü∂ Y) ‚âÉ F.obj (op X)
  homEquiv_comp {X X' : C} (f : X ‚ü∂ X') (g : X' ‚ü∂ Y) :
    homEquiv (f ‚â´ g) = F.map f.op (homEquiv g)

/-- If `F ‚âÖ F'`, and `F` is representable, then `F'` is representable. -/
def RepresentableBy.ofIso {F F' : C·µí·µñ ‚•§ Type v} {Y : C} (e : F.RepresentableBy Y) (e' : F ‚âÖ F') :
    F'.RepresentableBy Y where
  homEquiv {X} := e.homEquiv.trans (e'.app _).toEquiv
  homEquiv_comp {X X'} f g := by
    dsimp
    rw [e.homEquiv_comp]
    apply congr_fun (e'.hom.naturality f.op)

/-- The data which expresses that a functor `F : C ‚•§ Type v` is corepresentable by `X : C`. -/
structure CorepresentableBy (F : C ‚•§ Type v) (X : C) where
  /-- the natural bijection `(X ‚ü∂ Y) ‚âÉ F.obj Y`. -/
  homEquiv {Y : C} : (X ‚ü∂ Y) ‚âÉ F.obj Y
  homEquiv_comp {Y Y' : C} (g : Y ‚ü∂ Y') (f : X ‚ü∂ Y) :
    homEquiv (f ‚â´ g) = F.map g (homEquiv f)

/-- If `F ‚âÖ F'`, and `F` is corepresentable, then `F'` is corepresentable. -/
def CorepresentableBy.ofIso {F F' : C ‚•§ Type v} {X : C} (e : F.CorepresentableBy X)
    (e' : F ‚âÖ F') :
    F'.CorepresentableBy X where
  homEquiv {X} := e.homEquiv.trans (e'.app _).toEquiv
  homEquiv_comp {Y Y'} g f := by
    dsimp
    rw [e.homEquiv_comp]
    apply congr_fun (e'.hom.naturality g)

lemma RepresentableBy.homEquiv_eq {F : C·µí·µñ ‚•§ Type v} {Y : C} (e : F.RepresentableBy Y)
    {X : C} (f : X ‚ü∂ Y) :
    e.homEquiv f = F.map f.op (e.homEquiv (ùüô Y)) := by
  conv_lhs => rw [‚Üê Category.comp_id f, e.homEquiv_comp]

lemma CorepresentableBy.homEquiv_eq {F : C ‚•§ Type v} {X : C} (e : F.CorepresentableBy X)
    {Y : C} (f : X ‚ü∂ Y) :
    e.homEquiv f = F.map f (e.homEquiv (ùüô X)) := by
  conv_lhs => rw [‚Üê Category.id_comp f, e.homEquiv_comp]

@[ext]
lemma RepresentableBy.ext {F : C·µí·µñ ‚•§ Type v} {Y : C} {e e' : F.RepresentableBy Y}
    (h : e.homEquiv (ùüô Y) = e'.homEquiv (ùüô Y)) : e = e' := by
  have : ‚àÄ {X : C} (f : X ‚ü∂ Y), e.homEquiv f = e'.homEquiv f := fun {X} f ‚Ü¶ by
    rw [e.homEquiv_eq, e'.homEquiv_eq, h]
  obtain ‚ü®e, he‚ü© := e
  obtain ‚ü®e', he'‚ü© := e'
  obtain rfl : @e = @e' := by ext; apply this
  rfl

@[ext]
lemma CorepresentableBy.ext {F : C ‚•§ Type v} {X : C} {e e' : F.CorepresentableBy X}
    (h : e.homEquiv (ùüô X) = e'.homEquiv (ùüô X)) : e = e' := by
  have : ‚àÄ {Y : C} (f : X ‚ü∂ Y), e.homEquiv f = e'.homEquiv f := fun {X} f ‚Ü¶ by
    rw [e.homEquiv_eq, e'.homEquiv_eq, h]
  obtain ‚ü®e, he‚ü© := e
  obtain ‚ü®e', he'‚ü© := e'
  obtain rfl : @e = @e' := by ext; apply this
  rfl

/-- The obvious bijection `F.RepresentableBy Y ‚âÉ (yoneda.obj Y ‚âÖ F)`
when `F : C·µí·µñ ‚•§ Type v‚ÇÅ` and `[Category.{v‚ÇÅ} C]`. -/
def representableByEquiv {F : C·µí·µñ ‚•§ Type v‚ÇÅ} {Y : C} :
    F.RepresentableBy Y ‚âÉ (yoneda.obj Y ‚âÖ F) where
  toFun r := NatIso.ofComponents (fun _ ‚Ü¶ r.homEquiv.toIso) (fun {X X'} f ‚Ü¶ by
    ext g
    simp [r.homEquiv_comp])
  invFun e :=
    { homEquiv := (e.app _).toEquiv
      homEquiv_comp := fun {X X'} f g ‚Ü¶ congr_fun (e.hom.naturality f.op) g }
  left_inv _ := rfl
  right_inv _ := rfl

/-- The isomorphism `yoneda.obj Y ‚âÖ F` induced by `e : F.RepresentableBy Y`. -/
def RepresentableBy.toIso {F : C·µí·µñ ‚•§ Type v‚ÇÅ} {Y : C} (e : F.RepresentableBy Y) :
    yoneda.obj Y ‚âÖ F :=
  representableByEquiv e

/-- The obvious bijection `F.CorepresentableBy X ‚âÉ (yoneda.obj Y ‚âÖ F)`
when `F : C ‚•§ Type v‚ÇÅ` and `[Category.{v‚ÇÅ} C]`. -/
def corepresentableByEquiv {F : C ‚•§ Type v‚ÇÅ} {X : C} :
    F.CorepresentableBy X ‚âÉ (coyoneda.obj (op X) ‚âÖ F) where
  toFun r := NatIso.ofComponents (fun _ ‚Ü¶ r.homEquiv.toIso) (fun {X X'} f ‚Ü¶ by
    ext g
    simp [r.homEquiv_comp])
  invFun e :=
    { homEquiv := (e.app _).toEquiv
      homEquiv_comp := fun {X X'} f g ‚Ü¶ congr_fun (e.hom.naturality f) g }
  left_inv _ := rfl
  right_inv _ := rfl

/-- The isomorphism `coyoneda.obj (op X) ‚âÖ F` induced by `e : F.CorepresentableBy X`. -/
def CorepresentableBy.toIso {F : C ‚•§ Type v‚ÇÅ} {X : C} (e : F.CorepresentableBy X) :
    coyoneda.obj (op X) ‚âÖ F :=
  corepresentableByEquiv e

/-- A functor `F : C·µí·µñ ‚•§ Type v` is representable if there is oan bject `Y` with a structure
`F.RepresentableBy Y`, i.e. there is a natural bijection `(X ‚ü∂ Y) ‚âÉ F.obj (op X)`,
which may also be rephrased as a natural isomorphism `yoneda.obj X ‚âÖ F` when `Category.{v} C`.

See <https://stacks.math.columbia.edu/tag/001Q>.
-/
class IsRepresentable (F : C·µí·µñ ‚•§ Type v) : Prop where
  has_representation : ‚àÉ (Y : C), Nonempty (F.RepresentableBy Y)

@[deprecated (since := "2024-10-03")] alias Representable := IsRepresentable

lemma RepresentableBy.isRepresentable {F : C·µí·µñ ‚•§ Type v} {Y : C} (e : F.RepresentableBy Y) :
    F.IsRepresentable where
  has_representation := ‚ü®Y, ‚ü®e‚ü©‚ü©

/-- Alternative constructure for `F.IsRepresentable`, which takes as an input an
isomorphism `yoneda.obj X ‚âÖ F`. -/
lemma IsRepresentable.mk' {F : C·µí·µñ ‚•§ Type v‚ÇÅ} {X : C} (e : yoneda.obj X ‚âÖ F) :
    F.IsRepresentable :=
  (representableByEquiv.symm e).isRepresentable

instance {X : C} : IsRepresentable (yoneda.obj X) :=
  IsRepresentable.mk' (Iso.refl _)

/-- A functor `F : C ‚•§ Type v‚ÇÅ` is corepresentable if there is object `X` so `F ‚âÖ coyoneda.obj X`.

See <https://stacks.math.columbia.edu/tag/001Q>.
-/
class IsCorepresentable (F : C ‚•§ Type v) : Prop where
  has_corepresentation : ‚àÉ (X : C), Nonempty (F.CorepresentableBy X)

@[deprecated (since := "2024-10-03")] alias Corepresentable := IsCorepresentable

lemma CorepresentableBy.isCorepresentable {F : C ‚•§ Type v} {X : C} (e : F.CorepresentableBy X) :
    F.IsCorepresentable where
  has_corepresentation := ‚ü®X, ‚ü®e‚ü©‚ü©

/-- Alternative constructure for `F.IsCorepresentable`, which takes as an input an
isomorphism `coyoneda.obj (op X) ‚âÖ F`. -/
lemma IsCorepresentable.mk' {F : C ‚•§ Type v‚ÇÅ} {X : C} (e : coyoneda.obj (op X) ‚âÖ F) :
    F.IsCorepresentable :=
  (corepresentableByEquiv.symm e).isCorepresentable

instance {X : C·µí·µñ} : IsCorepresentable (coyoneda.obj X) :=
  IsCorepresentable.mk' (Iso.refl _)

-- instance : corepresentable (ùü≠ (Type v‚ÇÅ)) :=
-- corepresentable_of_nat_iso (op punit) coyoneda.punit_iso
section Representable

variable (F : C·µí·µñ ‚•§ Type v) [hF : F.IsRepresentable]

/-- The representing object for the representable functor `F`. -/
noncomputable def reprX : C :=
  hF.has_representation.choose

/-- A chosen term in `F.RepresentableBy (reprX F)` when `F.IsRepresentable` holds. -/
noncomputable def representableBy : F.RepresentableBy F.reprX :=
  hF.has_representation.choose_spec.some

/-- The representing element for the representable functor `F`, sometimes called the universal
element of the functor.
-/
noncomputable def reprx : F.obj (op F.reprX) :=
  F.representableBy.homEquiv (ùüô _)

/-- An isomorphism between a representable `F` and a functor of the
form `C(-, F.reprX)`.  Note the components `F.reprW.app X`
definitionally have type `(X.unop ‚ü∂ F.reprX) ‚âÖ F.obj X`.
-/
noncomputable def reprW (F : C·µí·µñ ‚•§ Type v‚ÇÅ) [F.IsRepresentable] :
    yoneda.obj F.reprX ‚âÖ F := F.representableBy.toIso

theorem reprW_hom_app (F : C·µí·µñ ‚•§ Type v‚ÇÅ) [F.IsRepresentable]
    (X : C·µí·µñ) (f : unop X ‚ü∂ F.reprX) :
    F.reprW.hom.app X f = F.map f.op F.reprx := by
  apply RepresentableBy.homEquiv_eq

end Representable

section Corepresentable

variable (F : C ‚•§ Type v) [hF : F.IsCorepresentable]

/-- The representing object for the corepresentable functor `F`. -/
noncomputable def coreprX : C :=
  hF.has_corepresentation.choose

/-- A chosen term in `F.CorepresentableBy (coreprX F)` when `F.IsCorepresentable` holds. -/
noncomputable def corepresentableBy : F.CorepresentableBy F.coreprX :=
  hF.has_corepresentation.choose_spec.some

/-- The representing element for the corepresentable functor `F`, sometimes called the universal
element of the functor.
-/
noncomputable def coreprx : F.obj F.coreprX :=
  F.corepresentableBy.homEquiv (ùüô _)

/-- An isomorphism between a corepresentable `F` and a functor of the form
`C(F.corepr X, -)`. Note the components `F.coreprW.app X`
definitionally have type `F.corepr_X ‚ü∂ X ‚âÖ F.obj X`.
-/
noncomputable def coreprW (F : C ‚•§ Type v‚ÇÅ) [F.IsCorepresentable] :
    coyoneda.obj (op F.coreprX) ‚âÖ F :=
  F.corepresentableBy.toIso

theorem coreprW_hom_app (F : C ‚•§ Type v‚ÇÅ) [F.IsCorepresentable] (X : C) (f : F.coreprX ‚ü∂ X) :
    F.coreprW.hom.app X f = F.map f F.coreprx := by
  apply CorepresentableBy.homEquiv_eq

end Corepresentable

end Functor

theorem isRepresentable_of_natIso (F : C·µí·µñ ‚•§ Type v‚ÇÅ) {G} (i : F ‚âÖ G) [F.IsRepresentable] :
    G.IsRepresentable :=
  (F.representableBy.ofIso i).isRepresentable

theorem corepresentable_of_natIso (F : C ‚•§ Type v‚ÇÅ) {G} (i : F ‚âÖ G) [F.IsCorepresentable] :
    G.IsCorepresentable :=
  (F.corepresentableBy.ofIso i).isCorepresentable

instance : Functor.IsCorepresentable (ùü≠ (Type v‚ÇÅ)) :=
  corepresentable_of_natIso (coyoneda.obj (op PUnit)) Coyoneda.punitIso

open Opposite

variable (C)

-- We need to help typeclass inference with some awkward universe levels here.
instance prodCategoryInstance1 : Category ((C·µí·µñ ‚•§ Type v‚ÇÅ) √ó C·µí·µñ) :=
  CategoryTheory.prod.{max u‚ÇÅ v‚ÇÅ, v‚ÇÅ} (C·µí·µñ ‚•§ Type v‚ÇÅ) C·µí·µñ

instance prodCategoryInstance2 : Category (C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) :=
  CategoryTheory.prod.{v‚ÇÅ, max u‚ÇÅ v‚ÇÅ} C·µí·µñ (C·µí·µñ ‚•§ Type v‚ÇÅ)

open Yoneda

section YonedaLemma

variable {C}

/-- We have a type-level equivalence between natural transformations from the yoneda embedding
and elements of `F.obj X`, without any universe switching.
-/
def yonedaEquiv {X : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} : (yoneda.obj X ‚ü∂ F) ‚âÉ F.obj (op X) where
  toFun Œ∑ := Œ∑.app (op X) (ùüô X)
  invFun Œæ := { app := fun _ f ‚Ü¶ F.map f.op Œæ }
  left_inv := by
    intro Œ∑
    ext Y f
    dsimp
    rw [‚Üê FunctorToTypes.naturality]
    simp
  right_inv := by intro Œæ; simp

theorem yonedaEquiv_apply {X : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (f : yoneda.obj X ‚ü∂ F) :
    yonedaEquiv f = f.app (op X) (ùüô X) :=
  rfl

@[simp]
theorem yonedaEquiv_symm_app_apply {X : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (x : F.obj (op X)) (Y : C·µí·µñ)
    (f : Y.unop ‚ü∂ X) : (yonedaEquiv.symm x).app Y f = F.map f.op x :=
  rfl

/-- See also `yonedaEquiv_naturality'` for a more general version. -/
lemma yonedaEquiv_naturality {X Y : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (f : yoneda.obj X ‚ü∂ F)
    (g : Y ‚ü∂ X) : F.map g.op (yonedaEquiv f) = yonedaEquiv (yoneda.map g ‚â´ f) := by
  change (f.app (op X) ‚â´ F.map g.op) (ùüô X) = f.app (op Y) (ùüô Y ‚â´ g)
  rw [‚Üê f.naturality]
  dsimp
  simp

/-- Variant of `yonedaEquiv_naturality` with general `g`. This is technically strictly more general
    than `yonedaEquiv_naturality`, but `yonedaEquiv_naturality` is sometimes preferable because it
    can avoid the "motive is not type correct" error. -/
lemma yonedaEquiv_naturality' {X Y : C·µí·µñ} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (f : yoneda.obj (unop X) ‚ü∂ F)
    (g : X ‚ü∂ Y) : F.map g (yonedaEquiv f) = yonedaEquiv (yoneda.map g.unop ‚â´ f) :=
  yonedaEquiv_naturality _ _

lemma yonedaEquiv_comp {X : C} {F G : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ± : yoneda.obj X ‚ü∂ F) (Œ≤ : F ‚ü∂ G) :
    yonedaEquiv (Œ± ‚â´ Œ≤) = Œ≤.app _ (yonedaEquiv Œ±) :=
  rfl

lemma yonedaEquiv_yoneda_map {X Y : C} (f : X ‚ü∂ Y) : yonedaEquiv (yoneda.map f) = f := by
  rw [yonedaEquiv_apply]
  simp

lemma yonedaEquiv_symm_naturality_left {X X' : C} (f : X' ‚ü∂ X) (F : C·µí·µñ ‚•§ Type v‚ÇÅ)
    (x : F.obj ‚ü®X‚ü©) : yoneda.map f ‚â´ yonedaEquiv.symm x = yonedaEquiv.symm ((F.map f.op) x) := by
  apply yonedaEquiv.injective
  simp only [yonedaEquiv_comp, yoneda_obj_obj, yonedaEquiv_symm_app_apply, Equiv.apply_symm_apply]
  erw [yonedaEquiv_yoneda_map]

lemma yonedaEquiv_symm_naturality_right (X : C) {F F' : C·µí·µñ ‚•§ Type v‚ÇÅ} (f : F ‚ü∂ F')
    (x : F.obj ‚ü®X‚ü©) : yonedaEquiv.symm x ‚â´ f = yonedaEquiv.symm (f.app ‚ü®X‚ü© x) := by
  apply yonedaEquiv.injective
  simp [yonedaEquiv_comp]

/-- See also `map_yonedaEquiv'` for a more general version. -/
lemma map_yonedaEquiv {X Y : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (f : yoneda.obj X ‚ü∂ F)
    (g : Y ‚ü∂ X) : F.map g.op (yonedaEquiv f) = f.app (op Y) g := by
  rw [yonedaEquiv_naturality, yonedaEquiv_comp, yonedaEquiv_yoneda_map]

/-- Variant of `map_yonedaEquiv` with general `g`. This is technically strictly more general
    than `map_yonedaEquiv`, but `map_yonedaEquiv` is sometimes preferable because it
    can avoid the "motive is not type correct" error. -/
lemma map_yonedaEquiv' {X Y : C·µí·µñ} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (f : yoneda.obj (unop X) ‚ü∂ F)
    (g : X ‚ü∂ Y) : F.map g (yonedaEquiv f) = f.app Y g.unop := by
  rw [yonedaEquiv_naturality', yonedaEquiv_comp, yonedaEquiv_yoneda_map]

lemma yonedaEquiv_symm_map {X Y : C·µí·µñ} (f : X ‚ü∂ Y) {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (t : F.obj X) :
    yonedaEquiv.symm (F.map f t) = yoneda.map f.unop ‚â´ yonedaEquiv.symm t := by
  obtain ‚ü®u, rfl‚ü© := yonedaEquiv.surjective t
  rw [yonedaEquiv_naturality', Equiv.symm_apply_apply, Equiv.symm_apply_apply]

/-- Two morphisms of presheaves of types `P ‚ü∂ Q` coincide if the precompositions
with morphisms `yoneda.obj X ‚ü∂ P` agree. -/
lemma hom_ext_yoneda {P Q : C·µí·µñ ‚•§ Type v‚ÇÅ} {f g : P ‚ü∂ Q}
    (h : ‚àÄ (X : C) (p : yoneda.obj X ‚ü∂ P), p ‚â´ f = p ‚â´ g) :
    f = g := by
  ext X x
  simpa only [yonedaEquiv_comp, Equiv.apply_symm_apply]
    using congr_arg (yonedaEquiv) (h _ (yonedaEquiv.symm x))

variable (C)

/-- The "Yoneda evaluation" functor, which sends `X : C·µí·µñ` and `F : C·µí·µñ ‚•§ Type`
to `F.obj X`, functorially in both `X` and `F`.
-/
def yonedaEvaluation : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ Type max u‚ÇÅ v‚ÇÅ :=
  evaluationUncurried C·µí·µñ (Type v‚ÇÅ) ‚ãô uliftFunctor

@[simp]
theorem yonedaEvaluation_map_down (P Q : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (Œ± : P ‚ü∂ Q)
    (x : (yonedaEvaluation C).obj P) :
    ((yonedaEvaluation C).map Œ± x).down = Œ±.2.app Q.1 (P.2.map Œ±.1 x.down) :=
  rfl

/-- The "Yoneda pairing" functor, which sends `X : C·µí·µñ` and `F : C·µí·µñ ‚•§ Type`
to `yoneda.op.obj X ‚ü∂ F`, functorially in both `X` and `F`.
-/
def yonedaPairing : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ Type max u‚ÇÅ v‚ÇÅ :=
  Functor.prod yoneda.op (ùü≠ (C·µí·µñ ‚•§ Type v‚ÇÅ)) ‚ãô Functor.hom (C·µí·µñ ‚•§ Type v‚ÇÅ)

@[ext]
lemma yonedaPairingExt {X : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)} {x y : (yonedaPairing C).obj X}
    (w : ‚àÄ Y, x.app Y = y.app Y) : x = y :=
  NatTrans.ext (funext w)

@[simp]
theorem yonedaPairing_map (P Q : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (Œ± : P ‚ü∂ Q) (Œ≤ : (yonedaPairing C).obj P) :
    (yonedaPairing C).map Œ± Œ≤ = yoneda.map Œ±.1.unop ‚â´ Œ≤ ‚â´ Œ±.2 :=
  rfl

universe w in
variable {C} in
/-- A bijection `(yoneda.obj X ‚ãô uliftFunctor ‚ü∂ F) ‚âÉ F.obj (op X)` which is a variant
of `yonedaEquiv` with heterogeneous universes. -/
def yonedaCompUliftFunctorEquiv (F : C·µí·µñ ‚•§ Type max v‚ÇÅ w) (X : C) :
    (yoneda.obj X ‚ãô uliftFunctor ‚ü∂ F) ‚âÉ F.obj (op X) where
  toFun œÜ := œÜ.app (op X) (ULift.up (ùüô _))
  invFun f :=
    { app := fun _ x => F.map (ULift.down x).op f }
  left_inv œÜ := by
    ext Y f
    dsimp
    rw [‚Üê FunctorToTypes.naturality]
    dsimp
    rw [Category.comp_id]
    rfl
  right_inv f := by aesop_cat

/-- The Yoneda lemma asserts that the Yoneda pairing
`(X : C·µí·µñ, F : C·µí·µñ ‚•§ Type) ‚Ü¶ (yoneda.obj (unop X) ‚ü∂ F)`
is naturally isomorphic to the evaluation `(X, F) ‚Ü¶ F.obj X`.

See <https://stacks.math.columbia.edu/tag/001P>.
-/
def yonedaLemma : yonedaPairing C ‚âÖ yonedaEvaluation C :=
  NatIso.ofComponents
    (fun _ ‚Ü¶ Equiv.toIso (yonedaEquiv.trans Equiv.ulift.symm))
    (by intro (X, F) (Y, G) f
        ext (a : yoneda.obj X.unop ‚ü∂ F)
        apply ULift.ext
        simp only [Functor.prod_obj, Functor.id_obj, types_comp_apply, yonedaEvaluation_map_down]
        erw [Equiv.ulift_symm_down, Equiv.ulift_symm_down]
        dsimp [yonedaEquiv]
        simp [‚Üê FunctorToTypes.naturality])

variable {C}

/- Porting note: this used to be two calls to `tidy` -/
/-- The curried version of yoneda lemma when `C` is small. -/
def curriedYonedaLemma {C : Type u‚ÇÅ} [SmallCategory C] :
    (yoneda.op ‚ãô coyoneda : C·µí·µñ ‚•§ (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ Type u‚ÇÅ) ‚âÖ evaluation C·µí·µñ (Type u‚ÇÅ) :=
  NatIso.ofComponents (fun X ‚Ü¶ NatIso.ofComponents (fun _ ‚Ü¶ Equiv.toIso yonedaEquiv)) (by
    intro X Y f
    ext a b
    dsimp [yonedaEquiv]
    simp [‚Üê FunctorToTypes.naturality])

/-- The curried version of the Yoneda lemma. -/
def largeCurriedYonedaLemma {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] :
    yoneda.op ‚ãô coyoneda ‚âÖ
      evaluation C·µí·µñ (Type v‚ÇÅ) ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{u‚ÇÅ} :=
  NatIso.ofComponents
    (fun X => NatIso.ofComponents
      (fun _ => Equiv.toIso <| yonedaEquiv.trans Equiv.ulift.symm)
      (by
        intros Y Z f
        ext g
        rw [‚Üê ULift.down_inj]
        simpa using yonedaEquiv_comp _ _))
    (by
      intros Y Z f
      ext F g
      rw [‚Üê ULift.down_inj]
      simpa using (yonedaEquiv_naturality _ _).symm)

/-- Version of the Yoneda lemma where the presheaf is fixed but the argument varies. -/
def yonedaOpCompYonedaObj {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] (P : C·µí·µñ ‚•§ Type v‚ÇÅ) :
    yoneda.op ‚ãô yoneda.obj P ‚âÖ P ‚ãô uliftFunctor.{u‚ÇÅ} :=
  isoWhiskerRight largeCurriedYonedaLemma ((evaluation _ _).obj P)

/-- The curried version of yoneda lemma when `C` is small. -/
def curriedYonedaLemma' {C : Type u‚ÇÅ} [SmallCategory C] :
    yoneda ‚ãô (whiskeringLeft C·µí·µñ (C·µí·µñ ‚•§ Type u‚ÇÅ)·µí·µñ (Type u‚ÇÅ)).obj yoneda.op
      ‚âÖ ùü≠ (C·µí·µñ ‚•§ Type u‚ÇÅ) :=
  NatIso.ofComponents (fun F ‚Ü¶ NatIso.ofComponents (fun _ ‚Ü¶ Equiv.toIso yonedaEquiv) (by
    intro X Y f
    ext a
    dsimp [yonedaEquiv]
    simp [‚Üê FunctorToTypes.naturality]))

lemma isIso_of_yoneda_map_bijective {X Y : C} (f : X ‚ü∂ Y)
    (hf : ‚àÄ (T : C), Function.Bijective (fun (x : T ‚ü∂ X) => x ‚â´ f)) :
    IsIso f := by
  obtain ‚ü®g, hg : g ‚â´ f = ùüô Y‚ü© := (hf Y).2 (ùüô Y)
  exact ‚ü®g, (hf _).1 (by aesop_cat), hg‚ü©

lemma isIso_iff_yoneda_map_bijective {X Y : C} (f : X ‚ü∂ Y) :
    IsIso f ‚Üî (‚àÄ (T : C), Function.Bijective (fun (x : T ‚ü∂ X) => x ‚â´ f)) := by
  refine ‚ü®fun _ ‚Ü¶ ?_, fun hf ‚Ü¶ isIso_of_yoneda_map_bijective f hf‚ü©
  have : IsIso (yoneda.map f) := inferInstance
  intro T
  rw [‚Üê isIso_iff_bijective]
  exact inferInstanceAs (IsIso ((yoneda.map f).app _))

lemma isIso_iff_isIso_yoneda_map {X Y : C} (f : X ‚ü∂ Y) :
    IsIso f ‚Üî ‚àÄ c : C, IsIso ((yoneda.map f).app ‚ü®c‚ü©) := by
  rw [isIso_iff_yoneda_map_bijective]
  exact forall_congr' fun _ ‚Ü¶ (isIso_iff_bijective _).symm

end YonedaLemma

section CoyonedaLemma

variable {C}

/-- We have a type-level equivalence between natural transformations from the coyoneda embedding
and elements of `F.obj X.unop`, without any universe switching.
-/
def coyonedaEquiv {X : C} {F : C ‚•§ Type v‚ÇÅ} : (coyoneda.obj (op X) ‚ü∂ F) ‚âÉ F.obj X where
  toFun Œ∑ := Œ∑.app X (ùüô X)
  invFun Œæ := { app := fun _ x ‚Ü¶ F.map x Œæ }
  left_inv := fun Œ∑ ‚Ü¶ by
    ext Y (x : X ‚ü∂ Y)
    dsimp
    rw [‚Üê FunctorToTypes.naturality]
    simp
  right_inv := by intro Œæ; simp

theorem coyonedaEquiv_apply {X : C} {F : C ‚•§ Type v‚ÇÅ} (f : coyoneda.obj (op X) ‚ü∂ F) :
    coyonedaEquiv f = f.app X (ùüô X) :=
  rfl

@[simp]
theorem coyonedaEquiv_symm_app_apply {X : C} {F : C ‚•§ Type v‚ÇÅ} (x : F.obj X) (Y : C)
    (f : X ‚ü∂ Y) : (coyonedaEquiv.symm x).app Y f = F.map f x :=
  rfl

lemma coyonedaEquiv_naturality {X Y : C} {F : C ‚•§ Type v‚ÇÅ} (f : coyoneda.obj (op X) ‚ü∂ F)
    (g : X ‚ü∂ Y) : F.map g (coyonedaEquiv f) = coyonedaEquiv (coyoneda.map g.op ‚â´ f) := by
  change (f.app X ‚â´ F.map g) (ùüô X) = f.app Y (g ‚â´ ùüô Y)
  rw [‚Üê f.naturality]
  dsimp
  simp

lemma coyonedaEquiv_comp {X : C} {F G : C ‚•§ Type v‚ÇÅ} (Œ± : coyoneda.obj (op X) ‚ü∂ F) (Œ≤ : F ‚ü∂ G) :
    coyonedaEquiv (Œ± ‚â´ Œ≤) = Œ≤.app _ (coyonedaEquiv Œ±) := by
  rfl

lemma coyonedaEquiv_coyoneda_map {X Y : C} (f : X ‚ü∂ Y) :
    coyonedaEquiv (coyoneda.map f.op) = f := by
  rw [coyonedaEquiv_apply]
  simp

lemma map_coyonedaEquiv {X Y : C} {F : C ‚•§ Type v‚ÇÅ} (f : coyoneda.obj (op X) ‚ü∂ F)
    (g : X ‚ü∂ Y) : F.map g (coyonedaEquiv f) = f.app Y g := by
  rw [coyonedaEquiv_naturality, coyonedaEquiv_comp, coyonedaEquiv_coyoneda_map]

lemma coyonedaEquiv_symm_map {X Y : C} (f : X ‚ü∂ Y) {F : C ‚•§ Type v‚ÇÅ} (t : F.obj X) :
    coyonedaEquiv.symm (F.map f t) = coyoneda.map f.op ‚â´ coyonedaEquiv.symm t := by
  obtain ‚ü®u, rfl‚ü© := coyonedaEquiv.surjective t
  simp [coyonedaEquiv_naturality u f]

variable (C)

/-- The "Coyoneda evaluation" functor, which sends `X : C` and `F : C ‚•§ Type`
to `F.obj X`, functorially in both `X` and `F`.
-/
def coyonedaEvaluation : C √ó (C ‚•§ Type v‚ÇÅ) ‚•§ Type max u‚ÇÅ v‚ÇÅ :=
  evaluationUncurried C (Type v‚ÇÅ) ‚ãô uliftFunctor

@[simp]
theorem coyonedaEvaluation_map_down (P Q : C √ó (C ‚•§ Type v‚ÇÅ)) (Œ± : P ‚ü∂ Q)
    (x : (coyonedaEvaluation C).obj P) :
    ((coyonedaEvaluation C).map Œ± x).down = Œ±.2.app Q.1 (P.2.map Œ±.1 x.down) :=
  rfl

/-- The "Coyoneda pairing" functor, which sends `X : C` and `F : C ‚•§ Type`
to `coyoneda.rightOp.obj X ‚ü∂ F`, functorially in both `X` and `F`.
-/
def coyonedaPairing : C √ó (C ‚•§ Type v‚ÇÅ) ‚•§ Type max u‚ÇÅ v‚ÇÅ :=
  Functor.prod coyoneda.rightOp (ùü≠ (C ‚•§ Type v‚ÇÅ)) ‚ãô Functor.hom (C ‚•§ Type v‚ÇÅ)

@[ext]
lemma coyonedaPairingExt {X : C √ó (C ‚•§ Type v‚ÇÅ)} {x y : (coyonedaPairing C).obj X}
    (w : ‚àÄ Y, x.app Y = y.app Y) : x = y :=
  NatTrans.ext (funext w)

@[simp]
theorem coyonedaPairing_map (P Q : C √ó (C ‚•§ Type v‚ÇÅ)) (Œ± : P ‚ü∂ Q) (Œ≤ : (coyonedaPairing C).obj P) :
    (coyonedaPairing C).map Œ± Œ≤ = coyoneda.map Œ±.1.op ‚â´ Œ≤ ‚â´ Œ±.2 :=
  rfl

universe w in
variable {C} in
/-- A bijection `(coyoneda.obj X ‚ãô uliftFunctor ‚ü∂ F) ‚âÉ F.obj (unop X)` which is a variant
of `coyonedaEquiv` with heterogeneous universes. -/
def coyonedaCompUliftFunctorEquiv (F : C ‚•§ Type max v‚ÇÅ w) (X : C·µí·µñ) :
    (coyoneda.obj X ‚ãô uliftFunctor ‚ü∂ F) ‚âÉ F.obj X.unop where
  toFun œÜ := œÜ.app X.unop (ULift.up (ùüô _))
  invFun f :=
    { app := fun _ x => F.map (ULift.down x) f }
  left_inv œÜ := by
    ext Y f
    dsimp
    rw [‚Üê FunctorToTypes.naturality]
    dsimp
    rw [Category.id_comp]
    rfl
  right_inv f := by aesop_cat

/-- The Coyoneda lemma asserts that the Coyoneda pairing
`(X : C, F : C ‚•§ Type) ‚Ü¶ (coyoneda.obj X ‚ü∂ F)`
is naturally isomorphic to the evaluation `(X, F) ‚Ü¶ F.obj X`.

See <https://stacks.math.columbia.edu/tag/001P>.
-/
def coyonedaLemma : coyonedaPairing C ‚âÖ coyonedaEvaluation C :=
  NatIso.ofComponents
    (fun _ ‚Ü¶ Equiv.toIso (coyonedaEquiv.trans Equiv.ulift.symm))
    (by intro (X, F) (Y, G) f
        ext (a : coyoneda.obj (op X) ‚ü∂ F)
        apply ULift.ext
        simp only [Functor.prod_obj, Functor.id_obj, types_comp_apply, coyonedaEvaluation_map_down]
        erw [Equiv.ulift_symm_down, Equiv.ulift_symm_down]
        simp [coyonedaEquiv, ‚Üê FunctorToTypes.naturality])

variable {C}

/- Porting note: this used to be two calls to `tidy` -/
/-- The curried version of coyoneda lemma when `C` is small. -/
def curriedCoyonedaLemma {C : Type u‚ÇÅ} [SmallCategory C] :
    coyoneda.rightOp ‚ãô coyoneda ‚âÖ evaluation C (Type u‚ÇÅ) :=
  NatIso.ofComponents (fun X ‚Ü¶ NatIso.ofComponents (fun _ ‚Ü¶ Equiv.toIso coyonedaEquiv)) (by
    intro X Y f
    ext a b
    simp [coyonedaEquiv, ‚Üê FunctorToTypes.naturality])

/-- The curried version of the Coyoneda lemma. -/
def largeCurriedCoyonedaLemma {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] :
    (coyoneda.rightOp ‚ãô coyoneda) ‚âÖ
      evaluation C (Type v‚ÇÅ) ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{u‚ÇÅ} :=
  NatIso.ofComponents
    (fun X => NatIso.ofComponents
      (fun _ => Equiv.toIso <| coyonedaEquiv.trans Equiv.ulift.symm)
      (by
        intros Y Z f
        ext g
        rw [‚Üê ULift.down_inj]
        simpa using coyonedaEquiv_comp _ _))
    (by
      intro Y Z f
      ext F g
      rw [‚Üê ULift.down_inj]
      simpa using (coyonedaEquiv_naturality _ _).symm)

/-- Version of the Coyoneda lemma where the presheaf is fixed but the argument varies. -/
def coyonedaCompYonedaObj {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] (P : C ‚•§ Type v‚ÇÅ) :
    coyoneda.rightOp ‚ãô yoneda.obj P ‚âÖ P ‚ãô uliftFunctor.{u‚ÇÅ} :=
  isoWhiskerRight largeCurriedCoyonedaLemma ((evaluation _ _).obj P)

/-- The curried version of coyoneda lemma when `C` is small. -/
def curriedCoyonedaLemma' {C : Type u‚ÇÅ} [SmallCategory C] :
    yoneda ‚ãô (whiskeringLeft C (C ‚•§ Type u‚ÇÅ)·µí·µñ (Type u‚ÇÅ)).obj coyoneda.rightOp
      ‚âÖ ùü≠ (C ‚•§ Type u‚ÇÅ) :=
  NatIso.ofComponents (fun F ‚Ü¶ NatIso.ofComponents (fun _ ‚Ü¶ Equiv.toIso coyonedaEquiv) (by
    intro X Y f
    ext a
    simp [coyonedaEquiv, ‚Üê FunctorToTypes.naturality]))

lemma isIso_of_coyoneda_map_bijective {X Y : C} (f : X ‚ü∂ Y)
    (hf : ‚àÄ (T : C), Function.Bijective (fun (x : Y ‚ü∂ T) => f ‚â´ x)) :
    IsIso f := by
  obtain ‚ü®g, hg : f ‚â´ g = ùüô X‚ü© := (hf X).2 (ùüô X)
  refine ‚ü®g, hg, (hf _).1 ?_‚ü©
  simp only [Category.comp_id, ‚Üê Category.assoc, hg, Category.id_comp]

lemma isIso_iff_coyoneda_map_bijective {X Y : C} (f : X ‚ü∂ Y) :
    IsIso f ‚Üî (‚àÄ (T : C), Function.Bijective (fun (x : Y ‚ü∂ T) => f ‚â´ x)) := by
  refine ‚ü®fun _ ‚Ü¶ ?_, fun hf ‚Ü¶ isIso_of_coyoneda_map_bijective f hf‚ü©
  have : IsIso (coyoneda.map f.op) := inferInstance
  intro T
  rw [‚Üê isIso_iff_bijective]
  exact inferInstanceAs (IsIso ((coyoneda.map f.op).app _))

lemma isIso_iff_isIso_coyoneda_map {X Y : C} (f : X ‚ü∂ Y) :
    IsIso f ‚Üî ‚àÄ c : C, IsIso ((coyoneda.map f.op).app c) := by
  rw [isIso_iff_coyoneda_map_bijective]
  exact forall_congr' fun _ ‚Ü¶ (isIso_iff_bijective _).symm

end CoyonedaLemma

section

variable {C}
variable {D : Type*} [Category.{v‚ÇÅ} D] (F : C ‚•§ D)

/-- The natural transformation `yoneda.obj X ‚ü∂ F.op ‚ãô yoneda.obj (F.obj X)`
when `F : C ‚•§ D` and `X : C`. -/
def yonedaMap (X : C) : yoneda.obj X ‚ü∂ F.op ‚ãô yoneda.obj (F.obj X) where
  app _ f := F.map f

@[simp]
lemma yonedaMap_app_apply {Y : C} {X : C·µí·µñ} (f : X.unop ‚ü∂ Y) :
    (yonedaMap F Y).app X f = F.map f := rfl

end

namespace Functor.FullyFaithful

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]

/-- `FullyFaithful.homEquiv` as a natural isomorphism. -/
@[simps!]
def homNatIso {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] {F : C ‚•§ D} (hF : F.FullyFaithful) (X : C) :
    F.op ‚ãô yoneda.obj (F.obj X) ‚ãô uliftFunctor.{v‚ÇÅ} ‚âÖ yoneda.obj X ‚ãô uliftFunctor.{v‚ÇÇ} :=
  NatIso.ofComponents
    (fun Y => Equiv.toIso (Equiv.ulift.trans <| hF.homEquiv.symm.trans Equiv.ulift.symm))
    (fun f => by ext; exact Equiv.ulift.injective (hF.map_injective (by simp)))

/-- `FullyFaithful.homEquiv` as a natural isomorphism. -/
@[simps!]
def homNatIsoMaxRight {D : Type u‚ÇÇ} [Category.{max v‚ÇÅ v‚ÇÇ} D] {F : C ‚•§ D} (hF : F.FullyFaithful)
    (X : C) : F.op ‚ãô yoneda.obj (F.obj X) ‚âÖ yoneda.obj X ‚ãô uliftFunctor.{v‚ÇÇ} :=
  NatIso.ofComponents
    (fun Y => Equiv.toIso (hF.homEquiv.symm.trans Equiv.ulift.symm))
    (fun f => by ext; exact Equiv.ulift.injective (hF.map_injective (by simp)))

/-- `FullyFaithful.homEquiv` as a natural isomorphism. -/
@[simps!]
def compYonedaCompWhiskeringLeft {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] {F : C ‚•§ D}
    (hF : F.FullyFaithful) : F ‚ãô yoneda ‚ãô (whiskeringLeft _ _ _).obj F.op ‚ãô
      (CategoryTheory.whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÅ} ‚âÖ
      yoneda ‚ãô (CategoryTheory.whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ} :=
  NatIso.ofComponents (fun X => hF.homNatIso _)
    (fun f => by ext; exact Equiv.ulift.injective (hF.map_injective (by simp)))

/-- `FullyFaithful.homEquiv` as a natural isomorphism. -/
@[simps!]
def compYonedaCompWhiskeringLeftMaxRight {D : Type u‚ÇÇ} [Category.{max v‚ÇÅ v‚ÇÇ} D] {F : C ‚•§ D}
    (hF : F.FullyFaithful) : F ‚ãô yoneda ‚ãô (whiskeringLeft _ _ _).obj F.op ‚âÖ
      yoneda ‚ãô (CategoryTheory.whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ} :=
  NatIso.ofComponents (fun X => hF.homNatIsoMaxRight _)
    (fun f => by ext; exact Equiv.ulift.injective (hF.map_injective (by simp)))

end Functor.FullyFaithful

end CategoryTheory
