/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Comma.Arrow
import Mathlib.CategoryTheory.CommSq

/-!
# The category of commutative squares

In this file, we define a bundled version of `CommSq`
which allows to consider commutative squares as
objects in a category `Square C`.

The four objects in a commutative square are
numbered as follows:
```
X‚ÇÅ --> X‚ÇÇ
|      |
v      v
X‚ÇÉ --> X‚ÇÑ
```

We define the flip functor, and two equivalences with
the category `Arrow (Arrow C)`, depending on whether
we consider a commutative square as a horizontal
morphism between two vertical maps (`arrowArrowEquivalence`)
or a vertical morphism betwen two horizontal
maps (`arrowArrowEquivalence'`).

## TODO
* define `Functor.mapSquare`
* introduce the pullback cone, the pushout cocone
attached to `sq : Square C` and define the
properties `IsPushout` and `IsPullback`.
* construct the equivalence `(Square C)·µí·µñ ‚âå Square C`

-/

universe v u

namespace CategoryTheory

open Category

variable (C : Type u) [Category.{v} C]

/-- The category of commutative squares in a category. -/
structure Square where
  /-- the top-left object -/
  {X‚ÇÅ : C}
  /-- the top-right object -/
  {X‚ÇÇ : C}
  /-- the bottom-left object -/
  {X‚ÇÉ : C}
  /-- the bottom-right object -/
  {X‚ÇÑ : C}
  /-- the top morphism -/
  f‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ
  /-- the left morphism -/
  f‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ
  /-- the right morphism -/
  f‚ÇÇ‚ÇÑ : X‚ÇÇ ‚ü∂ X‚ÇÑ
  /-- the bottom morphism -/
  f‚ÇÉ‚ÇÑ : X‚ÇÉ ‚ü∂ X‚ÇÑ
  fac : f‚ÇÅ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÑ = f‚ÇÅ‚ÇÉ ‚â´ f‚ÇÉ‚ÇÑ

namespace Square

variable {C}

lemma commSq (sq : Square C) : CommSq sq.f‚ÇÅ‚ÇÇ sq.f‚ÇÅ‚ÇÉ sq.f‚ÇÇ‚ÇÑ sq.f‚ÇÉ‚ÇÑ where
  w := sq.fac

/-- A morphism between two commutative squares consists of 4 morphisms
which extend these two squares into a commuting cube. -/
@[ext]
structure Hom (sq‚ÇÅ sq‚ÇÇ : Square C) where
  /-- the top-left morphism -/
  œÑ‚ÇÅ : sq‚ÇÅ.X‚ÇÅ ‚ü∂ sq‚ÇÇ.X‚ÇÅ
  /-- the top-right morphism -/
  œÑ‚ÇÇ : sq‚ÇÅ.X‚ÇÇ ‚ü∂ sq‚ÇÇ.X‚ÇÇ
  /-- the bottom-left morphism -/
  œÑ‚ÇÉ : sq‚ÇÅ.X‚ÇÉ ‚ü∂ sq‚ÇÇ.X‚ÇÉ
  /-- the bottom-right morphism -/
  œÑ‚ÇÑ : sq‚ÇÅ.X‚ÇÑ ‚ü∂ sq‚ÇÇ.X‚ÇÑ
  comm‚ÇÅ‚ÇÇ : sq‚ÇÅ.f‚ÇÅ‚ÇÇ ‚â´ œÑ‚ÇÇ = œÑ‚ÇÅ ‚â´ sq‚ÇÇ.f‚ÇÅ‚ÇÇ := by aesop_cat
  comm‚ÇÅ‚ÇÉ : sq‚ÇÅ.f‚ÇÅ‚ÇÉ ‚â´ œÑ‚ÇÉ = œÑ‚ÇÅ ‚â´ sq‚ÇÇ.f‚ÇÅ‚ÇÉ := by aesop_cat
  comm‚ÇÇ‚ÇÑ : sq‚ÇÅ.f‚ÇÇ‚ÇÑ ‚â´ œÑ‚ÇÑ = œÑ‚ÇÇ ‚â´ sq‚ÇÇ.f‚ÇÇ‚ÇÑ := by aesop_cat
  comm‚ÇÉ‚ÇÑ : sq‚ÇÅ.f‚ÇÉ‚ÇÑ ‚â´ œÑ‚ÇÑ = œÑ‚ÇÉ ‚â´ sq‚ÇÇ.f‚ÇÉ‚ÇÑ := by aesop_cat

namespace Hom

attribute [reassoc (attr := simp)] comm‚ÇÅ‚ÇÇ comm‚ÇÅ‚ÇÉ comm‚ÇÇ‚ÇÑ comm‚ÇÉ‚ÇÑ

/-- The identity of a commutative square. -/
@[simps]
def id (sq : Square C) : Hom sq sq where
  œÑ‚ÇÅ := ùüô _
  œÑ‚ÇÇ := ùüô _
  œÑ‚ÇÉ := ùüô _
  œÑ‚ÇÑ := ùüô _

/-- The composition of morphisms of squares. -/
@[simps]
def comp {sq‚ÇÅ sq‚ÇÇ sq‚ÇÉ : Square C} (f : Hom sq‚ÇÅ sq‚ÇÇ) (g : Hom sq‚ÇÇ sq‚ÇÉ) : Hom sq‚ÇÅ sq‚ÇÉ where
  œÑ‚ÇÅ := f.œÑ‚ÇÅ ‚â´ g.œÑ‚ÇÅ
  œÑ‚ÇÇ := f.œÑ‚ÇÇ ‚â´ g.œÑ‚ÇÇ
  œÑ‚ÇÉ := f.œÑ‚ÇÉ ‚â´ g.œÑ‚ÇÉ
  œÑ‚ÇÑ := f.œÑ‚ÇÑ ‚â´ g.œÑ‚ÇÑ

end Hom

@[simps!]
instance category : Category (Square C) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

@[ext]
lemma hom_ext {sq‚ÇÅ sq‚ÇÇ : Square C} {f g : sq‚ÇÅ ‚ü∂ sq‚ÇÇ}
    (h‚ÇÅ : f.œÑ‚ÇÅ = g.œÑ‚ÇÅ) (h‚ÇÇ : f.œÑ‚ÇÇ = g.œÑ‚ÇÇ)
    (h‚ÇÉ : f.œÑ‚ÇÉ = g.œÑ‚ÇÉ) (h‚ÇÑ : f.œÑ‚ÇÑ = g.œÑ‚ÇÑ) : f = g :=
  Hom.ext _ _ h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ

/-- Constructor for isomorphisms in `Square c` -/
def isoMk {sq‚ÇÅ sq‚ÇÇ : Square C} (e‚ÇÅ : sq‚ÇÅ.X‚ÇÅ ‚âÖ sq‚ÇÇ.X‚ÇÅ) (e‚ÇÇ : sq‚ÇÅ.X‚ÇÇ ‚âÖ sq‚ÇÇ.X‚ÇÇ)
    (e‚ÇÉ : sq‚ÇÅ.X‚ÇÉ ‚âÖ sq‚ÇÇ.X‚ÇÉ) (e‚ÇÑ : sq‚ÇÅ.X‚ÇÑ ‚âÖ sq‚ÇÇ.X‚ÇÑ)
    (comm‚ÇÅ‚ÇÇ : sq‚ÇÅ.f‚ÇÅ‚ÇÇ ‚â´ e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ sq‚ÇÇ.f‚ÇÅ‚ÇÇ)
    (comm‚ÇÅ‚ÇÉ : sq‚ÇÅ.f‚ÇÅ‚ÇÉ ‚â´ e‚ÇÉ.hom = e‚ÇÅ.hom ‚â´ sq‚ÇÇ.f‚ÇÅ‚ÇÉ)
    (comm‚ÇÇ‚ÇÑ : sq‚ÇÅ.f‚ÇÇ‚ÇÑ ‚â´ e‚ÇÑ.hom = e‚ÇÇ.hom ‚â´ sq‚ÇÇ.f‚ÇÇ‚ÇÑ)
    (comm‚ÇÉ‚ÇÑ : sq‚ÇÅ.f‚ÇÉ‚ÇÑ ‚â´ e‚ÇÑ.hom = e‚ÇÉ.hom ‚â´ sq‚ÇÇ.f‚ÇÉ‚ÇÑ) :
    sq‚ÇÅ ‚âÖ sq‚ÇÇ where
  hom :=
    { œÑ‚ÇÅ := e‚ÇÅ.hom
      œÑ‚ÇÇ := e‚ÇÇ.hom
      œÑ‚ÇÉ := e‚ÇÉ.hom
      œÑ‚ÇÑ := e‚ÇÑ.hom }
  inv :=
    { œÑ‚ÇÅ := e‚ÇÅ.inv
      œÑ‚ÇÇ := e‚ÇÇ.inv
      œÑ‚ÇÉ := e‚ÇÉ.inv
      œÑ‚ÇÑ := e‚ÇÑ.inv
      comm‚ÇÅ‚ÇÇ := by simp only [‚Üê cancel_mono e‚ÇÇ.hom, assoc, Iso.inv_hom_id,
                      comp_id, comm‚ÇÅ‚ÇÇ, Iso.inv_hom_id_assoc]
      comm‚ÇÅ‚ÇÉ := by simp only [‚Üê cancel_mono e‚ÇÉ.hom, assoc, Iso.inv_hom_id,
                      comp_id, comm‚ÇÅ‚ÇÉ, Iso.inv_hom_id_assoc]
      comm‚ÇÇ‚ÇÑ := by simp only [‚Üê cancel_mono e‚ÇÑ.hom, assoc, Iso.inv_hom_id,
                      comp_id, comm‚ÇÇ‚ÇÑ, Iso.inv_hom_id_assoc]
      comm‚ÇÉ‚ÇÑ := by simp only [‚Üê cancel_mono e‚ÇÑ.hom, assoc, Iso.inv_hom_id,
                      comp_id, comm‚ÇÉ‚ÇÑ, Iso.inv_hom_id_assoc] }

/-- Flipping a square by switching the top-right and the bottom-left objects. -/
@[simps]
def flip (sq : Square C) : Square C where
  fac := sq.fac.symm

/-- The functor which flips commutative squares. -/
@[simps]
def flipFunctor : Square C ‚•§ Square C where
  obj := flip
  map œÜ :=
    { œÑ‚ÇÅ := œÜ.œÑ‚ÇÅ
      œÑ‚ÇÇ := œÜ.œÑ‚ÇÉ
      œÑ‚ÇÉ := œÜ.œÑ‚ÇÇ
      œÑ‚ÇÑ := œÜ.œÑ‚ÇÑ }

/-- Flipping commutative squares is an auto-equivalence. -/
@[simps]
def flipEquivalence : Square C ‚âå Square C where
  functor := flipFunctor
  inverse := flipFunctor
  unitIso := Iso.refl _
  counitIso := Iso.refl _

/-- The functor `Square C ‚•§ Arrow (Arrow C)` which sends a
commutative square `sq` to the obvious arrow from the left morphism of `sq`
to the right morphism of `sq`. -/
@[simps!]
def toArrowArrowFunctor : Square C ‚•§ Arrow (Arrow C) where
  obj sq := Arrow.mk (Arrow.homMk sq.fac : Arrow.mk sq.f‚ÇÅ‚ÇÉ ‚ü∂ Arrow.mk sq.f‚ÇÇ‚ÇÑ)
  map œÜ := Arrow.homMk (u := Arrow.homMk œÜ.comm‚ÇÅ‚ÇÉ.symm)
    (v := Arrow.homMk œÜ.comm‚ÇÇ‚ÇÑ.symm) (by aesop_cat)

/-- The functor `Arrow (Arrow C) ‚•§ Square C` which sends
a morphism `Arrow.mk f ‚ü∂ Arrow.mk g` to the commutative square
with `f` on the left side and `g` on the right side. -/
@[simps!]
def fromArrowArrowFunctor : Arrow (Arrow C) ‚•§ Square C where
  obj f := { fac := f.hom.w }
  map œÜ :=
    { œÑ‚ÇÅ := œÜ.left.left
      œÑ‚ÇÇ := œÜ.right.left
      œÑ‚ÇÉ := œÜ.left.right
      œÑ‚ÇÑ := œÜ.right.right
      comm‚ÇÅ‚ÇÇ := Arrow.leftFunc.congr_map œÜ.w.symm
      comm‚ÇÅ‚ÇÉ := œÜ.left.w.symm
      comm‚ÇÇ‚ÇÑ := œÜ.right.w.symm
      comm‚ÇÉ‚ÇÑ := Arrow.rightFunc.congr_map œÜ.w.symm }

/-- The equivalence `Square C ‚âå Arrow (Arrow C)` which sends a
commutative square `sq` to the obvious arrow from the left morphism of `sq`
to the right morphism of `sq`. -/
@[simps]
def arrowArrowEquivalence : Square C ‚âå Arrow (Arrow C) where
  functor := toArrowArrowFunctor
  inverse := fromArrowArrowFunctor
  unitIso := Iso.refl _
  counitIso := Iso.refl _

/-- The functor `Square C ‚•§ Arrow (Arrow C)` which sends a
commutative square `sq` to the obvious arrow from the top morphism of `sq`
to the bottom morphism of `sq`. -/
@[simps!]
def toArrowArrowFunctor' : Square C ‚•§ Arrow (Arrow C) where
  obj sq := Arrow.mk (Arrow.homMk sq.fac.symm : Arrow.mk sq.f‚ÇÅ‚ÇÇ ‚ü∂ Arrow.mk sq.f‚ÇÉ‚ÇÑ)
  map œÜ := Arrow.homMk (u := Arrow.homMk œÜ.comm‚ÇÅ‚ÇÇ.symm)
    (v := Arrow.homMk œÜ.comm‚ÇÉ‚ÇÑ.symm) (by aesop_cat)

/-- The functor `Arrow (Arrow C) ‚•§ Square C` which sends
a morphism `Arrow.mk f ‚ü∂ Arrow.mk g` to the commutative square
with `f` on the top side and `g` on the bottom side. -/
@[simps!]
def fromArrowArrowFunctor' : Arrow (Arrow C) ‚•§ Square C where
  obj f := { fac := f.hom.w.symm }
  map œÜ :=
    { œÑ‚ÇÅ := œÜ.left.left
      œÑ‚ÇÇ := œÜ.left.right
      œÑ‚ÇÉ := œÜ.right.left
      œÑ‚ÇÑ := œÜ.right.right
      comm‚ÇÅ‚ÇÇ := œÜ.left.w.symm
      comm‚ÇÅ‚ÇÉ := Arrow.leftFunc.congr_map œÜ.w.symm
      comm‚ÇÇ‚ÇÑ := Arrow.rightFunc.congr_map œÜ.w.symm
      comm‚ÇÉ‚ÇÑ := œÜ.right.w.symm }

/-- The equivalence `Square C ‚âå Arrow (Arrow C)` which sends a
commutative square `sq` to the obvious arrow from the top morphism of `sq`
to the bottom morphism of `sq`. -/
@[simps]
def arrowArrowEquivalence' : Square C ‚âå Arrow (Arrow C) where
  functor := toArrowArrowFunctor'
  inverse := fromArrowArrowFunctor'
  unitIso := Iso.refl _
  counitIso := Iso.refl _

end Square

end CategoryTheory
