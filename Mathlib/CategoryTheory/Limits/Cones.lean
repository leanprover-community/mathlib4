/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Scott Morrison, Floris van Doorn
-/
import Mathlib.CategoryTheory.Functor.Const
import Mathlib.CategoryTheory.DiscreteCategory
import Mathlib.CategoryTheory.Yoneda
import Mathlib.CategoryTheory.Functor.ReflectsIso

#align_import category_theory.limits.cones from "leanprover-community/mathlib"@"740acc0e6f9adf4423f92a485d0456fc271482da"

/-!
# Cones and cocones

We define `Cone F`, a cone over a functor `F`,
and `F.cones : C·µí·µñ ‚•§ Type`, the functor associating to `X` the cones over `F` with cone point `X`.

A cone `c` is defined by specifying its cone point `c.pt` and a natural transformation `c.œÄ`
from the constant `c.pt` valued functor to `F`.

We provide `c.w f : c.œÄ.app j ‚â´ F.map f = c.œÄ.app j'` for any `f : j ‚ü∂ j'`
as a wrapper for `c.œÄ.naturality f` avoiding unneeded identity morphisms.

We define `c.extend f`, where `c : cone F` and `f : Y ‚ü∂ c.pt` for some other `Y`,
which replaces the cone point by `Y` and inserts `f` into each of the components of the cone.
Similarly we have `c.whisker F` producing a `Cone (E ‚ãô F)`

We define morphisms of cones, and the category of cones.

We define `Cone.postcompose Œ± : cone F ‚•§ cone G` for `Œ±` a natural transformation `F ‚ü∂ G`.

And, of course, we dualise all this to cocones as well.

For more results about the category of cones, see `cone_category.lean`.
-/


-- morphism levels before object levels. See note [CategoryTheory universes].
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

open CategoryTheory

variable {J : Type u‚ÇÅ} [Category.{v‚ÇÅ} J]

variable {K : Type u‚ÇÇ} [Category.{v‚ÇÇ} K]

variable {C : Type u‚ÇÉ} [Category.{v‚ÇÉ} C]

variable {D : Type u‚ÇÑ} [Category.{v‚ÇÑ} D]

open CategoryTheory

open CategoryTheory.Category

open CategoryTheory.Functor

open Opposite

namespace CategoryTheory

namespace Functor

variable (F : J ‚•§ C)

/-- If `F : J ‚•§ C` then `F.cones` is the functor assigning to an object `X : C` the
type of natural transformations from the constant functor with value `X` to `F`.
An object representing this functor is a limit of `F`.
-/
@[simps!]
def cones : C·µí·µñ ‚•§ Type max u‚ÇÅ v‚ÇÉ :=
  (const J).op ‚ãô yoneda.obj F
#align category_theory.functor.cones CategoryTheory.Functor.cones

/-- If `F : J ‚•§ C` then `F.cocones` is the functor assigning to an object `(X : C)`
the type of natural transformations from `F` to the constant functor with value `X`.
An object corepresenting this functor is a colimit of `F`.
-/
@[simps!]
def cocones : C ‚•§ Type max u‚ÇÅ v‚ÇÉ :=
  const J ‚ãô coyoneda.obj (op F)
#align category_theory.functor.cocones CategoryTheory.Functor.cocones

end Functor

section

variable (J C)

/-- Functorially associated to each functor `J ‚•§ C`, we have the `C`-presheaf consisting of
cones with a given cone point.
-/
@[simps!]
def cones : (J ‚•§ C) ‚•§ C·µí·µñ ‚•§ Type max u‚ÇÅ v‚ÇÉ where
  obj := Functor.cones
  map f := whiskerLeft (const J).op (yoneda.map f)
#align category_theory.cones CategoryTheory.cones

/-- Contravariantly associated to each functor `J ‚•§ C`, we have the `C`-copresheaf consisting of
cocones with a given cocone point.
-/
@[simps!]
def cocones : (J ‚•§ C)·µí·µñ ‚•§ C ‚•§ Type max u‚ÇÅ v‚ÇÉ where
  obj F := Functor.cocones (unop F)
  map f := whiskerLeft (const J) (coyoneda.map f)
#align category_theory.cocones CategoryTheory.cocones

end

namespace Limits

section

/-- A `c : Cone F` is:
* an object `c.pt` and
* a natural transformation `c.œÄ : c.pt ‚ü∂ F` from the constant `c.pt` functor to `F`.

Example: if `J` is a category coming from a poset then the data required to make
a term of type `Cone F` is morphisms `œÄ‚±º : c.pt ‚ü∂ F j` for all `j : J` and,
for all `i ‚â§ j` in `J`, morphisms `œÄ·µ¢‚±º : F i ‚ü∂ F j` such that `œÄ·µ¢ ‚â´ œÄ·µ¢‚±º = œÄ·µ¢`.

`Cone F` is equivalent, via `cone.equiv` below, to `Œ£ X, F.cones.obj X`.
-/
structure Cone (F : J ‚•§ C) where
  /-- An object of `C` -/
  pt : C
  /-- A natural transformation from the constant functor at `X` to `F` -/
  œÄ : (const J).obj pt ‚ü∂ F
#align category_theory.limits.cone CategoryTheory.Limits.Cone
set_option linter.uppercaseLean3 false in
#align category_theory.limits.cone.X CategoryTheory.Limits.Cone.pt

instance inhabitedCone (F : Discrete PUnit ‚•§ C) : Inhabited (Cone F) :=
  ‚ü®{  pt := F.obj ‚ü®‚ü®‚ü©‚ü©
      œÄ := { app := fun ‚ü®‚ü®‚ü©‚ü© => ùüô _
             naturality := by
              intro X Y f
              match X, Y, f with
              | .mk A, .mk B, .up g =>
                aesop_cat
           }
  }‚ü©
#align category_theory.limits.inhabited_cone CategoryTheory.Limits.inhabitedCone

@[reassoc (attr := simp)]
theorem Cone.w {F : J ‚•§ C} (c : Cone F) {j j' : J} (f : j ‚ü∂ j') :
    c.œÄ.app j ‚â´ F.map f = c.œÄ.app j' := by
  rw [‚Üê c.œÄ.naturality f]
  apply id_comp
#align category_theory.limits.cone.w CategoryTheory.Limits.Cone.w

/-- A `c : Cocone F` is
* an object `c.pt` and
* a natural transformation `c.Œπ : F ‚ü∂ c.pt` from `F` to the constant `c.pt` functor.

For example, if the source `J` of `F` is a partially ordered set, then to give
`c : Cocone F` is to give a collection of morphisms `Œπ‚±º : F j ‚ü∂ c.pt` and, for
all `j ‚â§ k` in `J`, morphisms `Œπ‚±º‚Çñ : F j ‚ü∂ F k` such that `F‚±º‚Çñ ‚â´ F‚Çñ = F‚±º` for all `j ‚â§ k`.

`Cocone F` is equivalent, via `Cone.equiv` below, to `Œ£ X, F.cocones.obj X`.
-/
structure Cocone (F : J ‚•§ C) where
  /-- An object of `C` -/
  pt : C
  /-- A natural transformation from `F` to the constant functor at `pt` -/
  Œπ : F ‚ü∂ (const J).obj pt
#align category_theory.limits.cocone CategoryTheory.Limits.Cocone
set_option linter.uppercaseLean3 false in
#align category_theory.limits.cocone.X CategoryTheory.Limits.Cocone.pt

instance inhabitedCocone (F : Discrete PUnit ‚•§ C) : Inhabited (Cocone F) :=
  ‚ü®{  pt := F.obj ‚ü®‚ü®‚ü©‚ü©
      Œπ := { app := fun ‚ü®‚ü®‚ü©‚ü© => ùüô _
             naturality := by
              intro X Y f
              match X, Y, f with
              | .mk A, .mk B, .up g =>
                aesop_cat
           }
  }‚ü©
#align category_theory.limits.inhabited_cocone CategoryTheory.Limits.inhabitedCocone

@[reassoc] -- @[simp] -- Porting note: simp can prove this
theorem Cocone.w {F : J ‚•§ C} (c : Cocone F) {j j' : J} (f : j ‚ü∂ j') :
    F.map f ‚â´ c.Œπ.app j' = c.Œπ.app j := by
  rw [c.Œπ.naturality f]
  apply comp_id
#align category_theory.limits.cocone.w CategoryTheory.Limits.Cocone.w

attribute [simp 1001] Cocone.w_assoc

end

variable {F : J ‚•§ C}

namespace Cone

/-- The isomorphism between a cone on `F` and an element of the functor `F.cones`. -/
@[simps!]
def equiv (F : J ‚•§ C) : Cone F ‚âÖ Œ£X, F.cones.obj X where
  hom c := ‚ü®op c.pt, c.œÄ‚ü©
  inv c :=
    { pt := c.1.unop
      œÄ := c.2 }
  hom_inv_id := by
    funext X
    cases X
    rfl
  inv_hom_id := by
    funext X
    cases X
    rfl
#align category_theory.limits.cone.equiv CategoryTheory.Limits.Cone.equiv

/-- A map to the vertex of a cone naturally induces a cone by composition. -/
@[simps]
def extensions (c : Cone F) : yoneda.obj c.pt ‚ãô uliftFunctor.{u‚ÇÅ} ‚ü∂ F.cones where
  app X f := (const J).map f.down ‚â´ c.œÄ
#align category_theory.limits.cone.extensions CategoryTheory.Limits.Cone.extensions

/-- A map to the vertex of a cone induces a cone by composition. -/
@[simps]
def extend (c : Cone F) {X : C} (f : X ‚ü∂ c.pt) : Cone F :=
  { pt := X
    œÄ := c.extensions.app (op X) ‚ü®f‚ü© }
#align category_theory.limits.cone.extend CategoryTheory.Limits.Cone.extend

/-- Whisker a cone by precomposition of a functor. -/
@[simps]
def whisker (E : K ‚•§ J) (c : Cone F) : Cone (E ‚ãô F) where
  pt := c.pt
  œÄ := whiskerLeft E c.œÄ
#align category_theory.limits.cone.whisker CategoryTheory.Limits.Cone.whisker

end Cone

namespace Cocone

/-- The isomorphism between a cocone on `F` and an element of the functor `F.cocones`. -/
def equiv (F : J ‚•§ C) : Cocone F ‚âÖ Œ£X, F.cocones.obj X where
  hom c := ‚ü®c.pt, c.Œπ‚ü©
  inv c :=
    { pt := c.1
      Œπ := c.2 }
  hom_inv_id := by
    funext X
    cases X
    rfl
  inv_hom_id := by
    funext X
    cases X
    rfl
#align category_theory.limits.cocone.equiv CategoryTheory.Limits.Cocone.equiv

/-- A map from the vertex of a cocone naturally induces a cocone by composition. -/
@[simps]
def extensions (c : Cocone F) : coyoneda.obj (op c.pt) ‚ãô uliftFunctor.{u‚ÇÅ} ‚ü∂ F.cocones where
  app X f := c.Œπ ‚â´ (const J).map f.down
#align category_theory.limits.cocone.extensions CategoryTheory.Limits.Cocone.extensions

/-- A map from the vertex of a cocone induces a cocone by composition. -/
@[simps]
def extend (c : Cocone F) {Y : C} (f : c.pt ‚ü∂ Y) : Cocone F where
  pt := Y
  Œπ := c.extensions.app Y ‚ü®f‚ü©
#align category_theory.limits.cocone.extend CategoryTheory.Limits.Cocone.extend

/-- Whisker a cocone by precomposition of a functor. See `whiskering` for a functorial
version.
-/
@[simps]
def whisker (E : K ‚•§ J) (c : Cocone F) : Cocone (E ‚ãô F) where
  pt := c.pt
  Œπ := whiskerLeft E c.Œπ
#align category_theory.limits.cocone.whisker CategoryTheory.Limits.Cocone.whisker

end Cocone

/-- A cone morphism between two cones for the same diagram is a morphism of the cone points which
commutes with the cone legs. -/
structure ConeMorphism (A B : Cone F) where
  /-- A morphism between the two vertex objects of the cones -/
  hom : A.pt ‚ü∂ B.pt
  /-- The triangle consisting of the two natural transformations and `hom` commutes -/
  w : ‚àÄ j : J, hom ‚â´ B.œÄ.app j = A.œÄ.app j := by aesop_cat
#align category_theory.limits.cone_morphism CategoryTheory.Limits.ConeMorphism
#align category_theory.limits.cone_morphism.w' CategoryTheory.Limits.ConeMorphism.w

attribute [reassoc (attr := simp)] ConeMorphism.w

instance inhabitedConeMorphism (A : Cone F) : Inhabited (ConeMorphism A A) :=
  ‚ü®{ hom := ùüô _ }‚ü©
#align category_theory.limits.inhabited_cone_morphism CategoryTheory.Limits.inhabitedConeMorphism

/-- The category of cones on a given diagram. -/
@[simps]
instance Cone.category : Category (Cone F) where
  Hom A B := ConeMorphism A B
  comp f g := { hom := f.hom ‚â´ g.hom }
  id B := { hom := ùüô B.pt }
#align category_theory.limits.cone.category CategoryTheory.Limits.Cone.category

-- Porting note: if we do not have `simps` automatically generate the lemma for simplifying
-- the hom field of a category, we need to write the `ext` lemma in terms of the categorical
-- morphism, rather than the underlying structure.
@[ext]
theorem ConeMorphism.ext {c c' : Cone F} (f g : c ‚ü∂ c') (w : f.hom = g.hom) : f = g := by
  cases f
  cases g
  congr

namespace Cones

/-- To give an isomorphism between cones, it suffices to give an
  isomorphism between their vertices which commutes with the cone
  maps. -/
-- Porting note: `@[ext]` used to accept lemmas like this. Now we add an aesop rule
@[aesop apply safe (rule_sets [CategoryTheory]), simps]
def ext {c c' : Cone F} (œÜ : c.pt ‚âÖ c'.pt)
    (w : ‚àÄ j, c.œÄ.app j = œÜ.hom ‚â´ c'.œÄ.app j := by aesop_cat) : c ‚âÖ c' where
  hom := { hom := œÜ.hom }
  inv :=
    { hom := œÜ.inv
      w := fun j => œÜ.inv_comp_eq.mpr (w j) }
#align category_theory.limits.cones.ext CategoryTheory.Limits.Cones.ext

/-- Eta rule for cones. -/
@[simps!]
def eta (c : Cone F) : c ‚âÖ ‚ü®c.pt, c.œÄ‚ü© :=
  Cones.ext (Iso.refl _)
#align category_theory.limits.cones.eta CategoryTheory.Limits.Cones.eta

/-- Given a cone morphism whose object part is an isomorphism, produce an
isomorphism of cones.
-/
theorem cone_iso_of_hom_iso {K : J ‚•§ C} {c d : Cone K} (f : c ‚ü∂ d) [i : IsIso f.hom] : IsIso f :=
  ‚ü®‚ü®{   hom := inv f.hom
        w := fun j => (asIso f.hom).inv_comp_eq.2 (f.w j).symm }, by aesop_cat‚ü©‚ü©
#align category_theory.limits.cones.cone_iso_of_hom_iso CategoryTheory.Limits.Cones.cone_iso_of_hom_iso

/--
Functorially postcompose a cone for `F` by a natural transformation `F ‚ü∂ G` to give a cone for `G`.
-/
@[simps]
def postcompose {G : J ‚•§ C} (Œ± : F ‚ü∂ G) : Cone F ‚•§ Cone G where
  obj c :=
    { pt := c.pt
      œÄ := c.œÄ ‚â´ Œ± }
  map f := { hom := f.hom }
#align category_theory.limits.cones.postcompose CategoryTheory.Limits.Cones.postcompose

/-- Postcomposing a cone by the composite natural transformation `Œ± ‚â´ Œ≤` is the same as
postcomposing by `Œ±` and then by `Œ≤`. -/
@[simps!]
def postcomposeComp {G H : J ‚•§ C} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
    postcompose (Œ± ‚â´ Œ≤) ‚âÖ postcompose Œ± ‚ãô postcompose Œ≤ :=
  NatIso.ofComponents fun s => Cones.ext (Iso.refl _)
#align category_theory.limits.cones.postcompose_comp CategoryTheory.Limits.Cones.postcomposeComp

/-- Postcomposing by the identity does not change the cone up to isomorphism. -/
@[simps!]
def postcomposeId : postcompose (ùüô F) ‚âÖ ùü≠ (Cone F) :=
  NatIso.ofComponents fun s => Cones.ext (Iso.refl _)
#align category_theory.limits.cones.postcompose_id CategoryTheory.Limits.Cones.postcomposeId

/-- If `F` and `G` are naturally isomorphic functors, then they have equivalent categories of
cones.
-/
@[simps]
def postcomposeEquivalence {G : J ‚•§ C} (Œ± : F ‚âÖ G) : Cone F ‚âå Cone G where
  functor := postcompose Œ±.hom
  inverse := postcompose Œ±.inv
  unitIso := NatIso.ofComponents fun s => Cones.ext (Iso.refl _)
  counitIso := NatIso.ofComponents fun s => Cones.ext (Iso.refl _)
#align category_theory.limits.cones.postcompose_equivalence CategoryTheory.Limits.Cones.postcomposeEquivalence

/-- Whiskering on the left by `E : K ‚•§ J` gives a functor from `Cone F` to `Cone (E ‚ãô F)`.
-/
@[simps]
def whiskering (E : K ‚•§ J) : Cone F ‚•§ Cone (E ‚ãô F) where
  obj c := c.whisker E
  map f := { hom := f.hom }
#align category_theory.limits.cones.whiskering CategoryTheory.Limits.Cones.whiskering

/-- Whiskering by an equivalence gives an equivalence between categories of cones.
-/
@[simps]
def whiskeringEquivalence (e : K ‚âå J) : Cone F ‚âå Cone (e.functor ‚ãô F) where
  functor := whiskering e.functor
  inverse := whiskering e.inverse ‚ãô postcompose (e.invFunIdAssoc F).hom
  unitIso := NatIso.ofComponents fun s => Cones.ext (Iso.refl _)
  counitIso :=
    NatIso.ofComponents
      fun s =>
        Cones.ext (Iso.refl _)
          (by
            intro k
            simpa [e.counit_app_functor] using s.w (e.unitInv.app k))
#align category_theory.limits.cones.whiskering_equivalence CategoryTheory.Limits.Cones.whiskeringEquivalence

/-- The categories of cones over `F` and `G` are equivalent if `F` and `G` are naturally isomorphic
(possibly after changing the indexing category by an equivalence).
-/
@[simps! functor inverse unitIso counitIso]
def equivalenceOfReindexing {G : K ‚•§ C} (e : K ‚âå J) (Œ± : e.functor ‚ãô F ‚âÖ G) : Cone F ‚âå Cone G :=
  (whiskeringEquivalence e).trans (postcomposeEquivalence Œ±)
#align category_theory.limits.cones.equivalence_of_reindexing CategoryTheory.Limits.Cones.equivalenceOfReindexing

section

variable (F)

/-- Forget the cone structure and obtain just the cone point. -/
@[simps]
def forget : Cone F ‚•§ C where
  obj t := t.pt
  map f := f.hom
#align category_theory.limits.cones.forget CategoryTheory.Limits.Cones.forget

variable (G : C ‚•§ D)

/-- A functor `G : C ‚•§ D` sends cones over `F` to cones over `F ‚ãô G` functorially. -/
@[simps]
def functoriality : Cone F ‚•§ Cone (F ‚ãô G) where
  obj A :=
    { pt := G.obj A.pt
      œÄ :=
        { app := fun j => G.map (A.œÄ.app j)
          naturality := by intros; erw [‚Üê G.map_comp]; aesop_cat } }
  map f :=
    { hom := G.map f.hom
      w := fun j => by simp [-ConeMorphism.w, ‚Üê f.w j] }
#align category_theory.limits.cones.functoriality CategoryTheory.Limits.Cones.functoriality

instance functorialityFull [Full G] [Faithful G] : Full (functoriality F G) where
  preimage t :=
    { hom := G.preimage t.hom
      w := fun j => G.map_injective (by simpa using t.w j) }
#align category_theory.limits.cones.functoriality_full CategoryTheory.Limits.Cones.functorialityFull

instance functorialityFaithful [Faithful G] : Faithful (Cones.functoriality F G) where
  map_injective {c} {c'} f g e := by
    apply ConeMorphism.ext f g
    let f := ConeMorphism.mk.inj e
    apply G.map_injective f
#align category_theory.limits.cones.functoriality_faithful CategoryTheory.Limits.Cones.functorialityFaithful

/-- If `e : C ‚âå D` is an equivalence of categories, then `functoriality F e.functor` induces an
equivalence between cones over `F` and cones over `F ‚ãô e.functor`.
-/
@[simps]
def functorialityEquivalence (e : C ‚âå D) : Cone F ‚âå Cone (F ‚ãô e.functor) :=
  let f : (F ‚ãô e.functor) ‚ãô e.inverse ‚âÖ F :=
    Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ e.unitIso.symm ‚â™‚â´ Functor.rightUnitor _
  { functor := functoriality F e.functor
    inverse := functoriality (F ‚ãô e.functor) e.inverse ‚ãô (postcomposeEquivalence f).functor
    unitIso := NatIso.ofComponents fun c => Cones.ext (e.unitIso.app _)
    counitIso := NatIso.ofComponents fun c => Cones.ext (e.counitIso.app _)
  }
#align category_theory.limits.cones.functoriality_equivalence CategoryTheory.Limits.Cones.functorialityEquivalence

/-- If `F` reflects isomorphisms, then `Cones.functoriality F` reflects isomorphisms
as well.
-/
instance reflects_cone_isomorphism (F : C ‚•§ D) [ReflectsIsomorphisms F] (K : J ‚•§ C) :
    ReflectsIsomorphisms (Cones.functoriality K F) := by
  constructor
  intro A B f _
  haveI : IsIso (F.map f.hom) :=
    (Cones.forget (K ‚ãô F)).map_isIso ((Cones.functoriality K F).map f)
  haveI := ReflectsIsomorphisms.reflects F f.hom
  apply cone_iso_of_hom_iso
#align category_theory.limits.cones.reflects_cone_isomorphism CategoryTheory.Limits.Cones.reflects_cone_isomorphism

end

end Cones

/-- A cocone morphism between two cocones for the same diagram is a morphism of the cocone points
which commutes with the cocone legs. -/
structure CoconeMorphism (A B : Cocone F) where
  /-- A morphism between the (co)vertex objects in `C` -/
  hom : A.pt ‚ü∂ B.pt
  /-- The triangle made from the two natural transformations and `hom` commutes -/
  w : ‚àÄ j : J, A.Œπ.app j ‚â´ hom = B.Œπ.app j := by aesop_cat
#align category_theory.limits.cocone_morphism CategoryTheory.Limits.CoconeMorphism
#align category_theory.limits.cocone_morphism.w' CategoryTheory.Limits.CoconeMorphism.w

instance inhabitedCoconeMorphism (A : Cocone F) : Inhabited (CoconeMorphism A A) :=
  ‚ü®{ hom := ùüô _ }‚ü©
#align category_theory.limits.inhabited_cocone_morphism CategoryTheory.Limits.inhabitedCoconeMorphism

attribute [reassoc (attr := simp)] CoconeMorphism.w

@[simps]
instance Cocone.category : Category (Cocone F) where
  Hom A B := CoconeMorphism A B
  comp f g := { hom := f.hom ‚â´ g.hom }
  id B := { hom := ùüô B.pt }
#align category_theory.limits.cocone.category CategoryTheory.Limits.Cocone.category

-- Porting note: if we do not have `simps` automatically generate the lemma for simplifying
-- the hom field of a category, we need to write the `ext` lemma in terms of the categorical
-- morphism, rather than the underlying structure.
@[ext]
theorem CoconeMorphism.ext {c c' : Cocone F} (f g : c ‚ü∂ c') (w : f.hom = g.hom) : f = g := by
  cases f
  cases g
  congr

namespace Cocones

/-- To give an isomorphism between cocones, it suffices to give an
  isomorphism between their vertices which commutes with the cocone
  maps. -/
-- Porting note: `@[ext]` used to accept lemmas like this. Now we add an aesop rule
@[aesop apply safe (rule_sets [CategoryTheory]), simps]
def ext {c c' : Cocone F} (œÜ : c.pt ‚âÖ c'.pt)
    (w : ‚àÄ j, c.Œπ.app j ‚â´ œÜ.hom = c'.Œπ.app j := by aesop_cat) : c ‚âÖ c' where
  hom := { hom := œÜ.hom }
  inv :=
    { hom := œÜ.inv
      w := fun j => œÜ.comp_inv_eq.mpr (w j).symm }
#align category_theory.limits.cocones.ext CategoryTheory.Limits.Cocones.ext

/-- Eta rule for cocones. -/
@[simps!]
def eta (c : Cocone F) : c ‚âÖ ‚ü®c.pt, c.Œπ‚ü© :=
  Cocones.ext (Iso.refl _)
#align category_theory.limits.cocones.eta CategoryTheory.Limits.Cocones.eta

/-- Given a cocone morphism whose object part is an isomorphism, produce an
isomorphism of cocones.
-/
theorem cocone_iso_of_hom_iso {K : J ‚•§ C} {c d : Cocone K} (f : c ‚ü∂ d) [i : IsIso f.hom] :
    IsIso f :=
  ‚ü®‚ü®{ hom := inv f.hom
      w := fun j => (asIso f.hom).comp_inv_eq.2 (f.w j).symm }, by aesop_cat‚ü©‚ü©
#align category_theory.limits.cocones.cocone_iso_of_hom_iso CategoryTheory.Limits.Cocones.cocone_iso_of_hom_iso

/-- Functorially precompose a cocone for `F` by a natural transformation `G ‚ü∂ F` to give a cocone
for `G`. -/
@[simps]
def precompose {G : J ‚•§ C} (Œ± : G ‚ü∂ F) : Cocone F ‚•§ Cocone G where
  obj c :=
    { pt := c.pt
      Œπ := Œ± ‚â´ c.Œπ }
  map f := { hom := f.hom }
#align category_theory.limits.cocones.precompose CategoryTheory.Limits.Cocones.precompose

/-- Precomposing a cocone by the composite natural transformation `Œ± ‚â´ Œ≤` is the same as
precomposing by `Œ≤` and then by `Œ±`. -/
def precomposeComp {G H : J ‚•§ C} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
    precompose (Œ± ‚â´ Œ≤) ‚âÖ precompose Œ≤ ‚ãô precompose Œ± :=
  NatIso.ofComponents fun s => Cocones.ext (Iso.refl _)
#align category_theory.limits.cocones.precompose_comp CategoryTheory.Limits.Cocones.precomposeComp

/-- Precomposing by the identity does not change the cocone up to isomorphism. -/
def precomposeId : precompose (ùüô F) ‚âÖ ùü≠ (Cocone F) :=
  NatIso.ofComponents fun s => Cocones.ext (Iso.refl _)
#align category_theory.limits.cocones.precompose_id CategoryTheory.Limits.Cocones.precomposeId

/-- If `F` and `G` are naturally isomorphic functors, then they have equivalent categories of
cocones.
-/
@[simps]
def precomposeEquivalence {G : J ‚•§ C} (Œ± : G ‚âÖ F) : Cocone F ‚âå Cocone G where
  functor := precompose Œ±.hom
  inverse := precompose Œ±.inv
  unitIso := NatIso.ofComponents fun s => Cocones.ext (Iso.refl _)
  counitIso := NatIso.ofComponents fun s => Cocones.ext (Iso.refl _)
#align category_theory.limits.cocones.precompose_equivalence CategoryTheory.Limits.Cocones.precomposeEquivalence

/-- Whiskering on the left by `E : K ‚•§ J` gives a functor from `Cocone F` to `Cocone (E ‚ãô F)`.
-/
@[simps]
def whiskering (E : K ‚•§ J) : Cocone F ‚•§ Cocone (E ‚ãô F) where
  obj c := c.whisker E
  map f := { hom := f.hom }
#align category_theory.limits.cocones.whiskering CategoryTheory.Limits.Cocones.whiskering

/-- Whiskering by an equivalence gives an equivalence between categories of cones.
-/
@[simps]
def whiskeringEquivalence (e : K ‚âå J) : Cocone F ‚âå Cocone (e.functor ‚ãô F) where
  functor := whiskering e.functor
  inverse :=
    whiskering e.inverse ‚ãô
      precompose
        ((Functor.leftUnitor F).inv ‚â´
          whiskerRight e.counitIso.inv F ‚â´ (Functor.associator _ _ _).inv)
  unitIso := NatIso.ofComponents fun s => Cocones.ext (Iso.refl _)
  counitIso := NatIso.ofComponents fun s =>
    Cocones.ext (Iso.refl _) fun k => by simpa [e.counitInv_app_functor k] using s.w (e.unit.app k)
#align category_theory.limits.cocones.whiskering_equivalence CategoryTheory.Limits.Cocones.whiskeringEquivalence

/--
The categories of cocones over `F` and `G` are equivalent if `F` and `G` are naturally isomorphic
(possibly after changing the indexing category by an equivalence).
-/
@[simps! functor_obj]
def equivalenceOfReindexing {G : K ‚•§ C} (e : K ‚âå J) (Œ± : e.functor ‚ãô F ‚âÖ G) : Cocone F ‚âå Cocone G :=
  (whiskeringEquivalence e).trans (precomposeEquivalence Œ±.symm)
#align category_theory.limits.cocones.equivalence_of_reindexing CategoryTheory.Limits.Cocones.equivalenceOfReindexing

section

variable (F)

/-- Forget the cocone structure and obtain just the cocone point. -/
@[simps]
def forget : Cocone F ‚•§ C where
  obj t := t.pt
  map f := f.hom
#align category_theory.limits.cocones.forget CategoryTheory.Limits.Cocones.forget

variable (G : C ‚•§ D)

/-- A functor `G : C ‚•§ D` sends cocones over `F` to cocones over `F ‚ãô G` functorially. -/
@[simps]
def functoriality : Cocone F ‚•§ Cocone (F ‚ãô G) where
  obj A :=
    { pt := G.obj A.pt
      Œπ :=
        { app := fun j => G.map (A.Œπ.app j)
          naturality := by intros; erw [‚Üê G.map_comp]; aesop_cat } }
  map f :=
    { hom := G.map f.hom
      w := by intros; rw [‚Üê Functor.map_comp, CoconeMorphism.w] }
#align category_theory.limits.cocones.functoriality CategoryTheory.Limits.Cocones.functoriality

instance functorialityFull [Full G] [Faithful G] : Full (functoriality F G) where
  preimage t :=
    { hom := G.preimage t.hom
      w := fun j => G.map_injective (by simpa using t.w j) }
#align category_theory.limits.cocones.functoriality_full CategoryTheory.Limits.Cocones.functorialityFull

instance functoriality_faithful [Faithful G] : Faithful (functoriality F G) where
  map_injective {X} {Y} f g e := by
    apply CoconeMorphism.ext
    let h := CoconeMorphism.mk.inj e
    apply G.map_injective h
#align category_theory.limits.cocones.functoriality_faithful CategoryTheory.Limits.Cocones.functoriality_faithful

/-- If `e : C ‚âå D` is an equivalence of categories, then `functoriality F e.functor` induces an
equivalence between cocones over `F` and cocones over `F ‚ãô e.functor`.
-/
@[simps]
def functorialityEquivalence (e : C ‚âå D) : Cocone F ‚âå Cocone (F ‚ãô e.functor) :=
  let f : (F ‚ãô e.functor) ‚ãô e.inverse ‚âÖ F :=
    Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ e.unitIso.symm ‚â™‚â´ Functor.rightUnitor _
  { functor := functoriality F e.functor
    inverse := functoriality (F ‚ãô e.functor) e.inverse ‚ãô (precomposeEquivalence f.symm).functor
    unitIso := NatIso.ofComponents fun c => Cocones.ext (e.unitIso.app _)
    counitIso :=
      NatIso.ofComponents fun c => Cocones.ext (e.counitIso.app _)
        (fun j =>
          -- Unfortunately this doesn't work by `aesop_cat`.
          -- In this configuration `simp` reaches a dead-end and needs help.
          by simp [‚Üê Equivalence.counitInv_app_functor]) }
#align category_theory.limits.cocones.functoriality_equivalence CategoryTheory.Limits.Cocones.functorialityEquivalence

/-- If `F` reflects isomorphisms, then `Cocones.functoriality F` reflects isomorphisms
as well.
-/
instance reflects_cocone_isomorphism (F : C ‚•§ D) [ReflectsIsomorphisms F] (K : J ‚•§ C) :
    ReflectsIsomorphisms (Cocones.functoriality K F) := by
  constructor
  intro A B f _
  haveI : IsIso (F.map f.hom) :=
    (Cocones.forget (K ‚ãô F)).map_isIso ((Cocones.functoriality K F).map f)
  haveI := ReflectsIsomorphisms.reflects F f.hom
  apply cocone_iso_of_hom_iso
#align category_theory.limits.cocones.reflects_cocone_isomorphism CategoryTheory.Limits.Cocones.reflects_cocone_isomorphism

end

end Cocones

end Limits

namespace Functor

variable (H : C ‚•§ D) {F : J ‚•§ C} {G : J ‚•§ C}

open CategoryTheory.Limits

/-- The image of a cone in C under a functor G : C ‚•§ D is a cone in D. -/
@[simps!, pp_dot]
def mapCone (c : Cone F) : Cone (F ‚ãô H) :=
  (Cones.functoriality F H).obj c
#align category_theory.functor.map_cone CategoryTheory.Functor.mapCone

/-- The image of a cocone in C under a functor G : C ‚•§ D is a cocone in D. -/
@[simps!, pp_dot]
def mapCocone (c : Cocone F) : Cocone (F ‚ãô H) :=
  (Cocones.functoriality F H).obj c
#align category_theory.functor.map_cocone CategoryTheory.Functor.mapCocone

/-- Given a cone morphism `c ‚ü∂ c'`, construct a cone morphism on the mapped cones functorially.  -/
def mapConeMorphism {c c' : Cone F} (f : c ‚ü∂ c') : H.mapCone c ‚ü∂ H.mapCone c' :=
  (Cones.functoriality F H).map f
#align category_theory.functor.map_cone_morphism CategoryTheory.Functor.mapConeMorphism

/-- Given a cocone morphism `c ‚ü∂ c'`, construct a cocone morphism on the mapped cocones
functorially. -/
def mapCoconeMorphism {c c' : Cocone F} (f : c ‚ü∂ c') : H.mapCocone c ‚ü∂ H.mapCocone c' :=
  (Cocones.functoriality F H).map f
#align category_theory.functor.map_cocone_morphism CategoryTheory.Functor.mapCoconeMorphism

/-- If `H` is an equivalence, we invert `H.mapCone` and get a cone for `F` from a cone
for `F ‚ãô H`.-/
def mapConeInv [IsEquivalence H] (c : Cone (F ‚ãô H)) : Cone F :=
  (Limits.Cones.functorialityEquivalence F (asEquivalence H)).inverse.obj c
#align category_theory.functor.map_cone_inv CategoryTheory.Functor.mapConeInv

/-- `mapCone` is the left inverse to `mapConeInv`. -/
def mapConeMapConeInv {F : J ‚•§ D} (H : D ‚•§ C) [IsEquivalence H] (c : Cone (F ‚ãô H)) :
    mapCone H (mapConeInv H c) ‚âÖ c :=
  (Limits.Cones.functorialityEquivalence F (asEquivalence H)).counitIso.app c
#align category_theory.functor.map_cone_map_cone_inv CategoryTheory.Functor.mapConeMapConeInv

/-- `MapCone` is the right inverse to `mapConeInv`. -/
def mapConeInvMapCone {F : J ‚•§ D} (H : D ‚•§ C) [IsEquivalence H] (c : Cone F) :
    mapConeInv H (mapCone H c) ‚âÖ c :=
  (Limits.Cones.functorialityEquivalence F (asEquivalence H)).unitIso.symm.app c
#align category_theory.functor.map_cone_inv_map_cone CategoryTheory.Functor.mapConeInvMapCone

/-- If `H` is an equivalence, we invert `H.mapCone` and get a cone for `F` from a cone
for `F ‚ãô H`.-/
def mapCoconeInv [IsEquivalence H] (c : Cocone (F ‚ãô H)) : Cocone F :=
  (Limits.Cocones.functorialityEquivalence F (asEquivalence H)).inverse.obj c
#align category_theory.functor.map_cocone_inv CategoryTheory.Functor.mapCoconeInv

/-- `mapCocone` is the left inverse to `mapCoconeInv`. -/
def mapCoconeMapCoconeInv {F : J ‚•§ D} (H : D ‚•§ C) [IsEquivalence H] (c : Cocone (F ‚ãô H)) :
    mapCocone H (mapCoconeInv H c) ‚âÖ c :=
  (Limits.Cocones.functorialityEquivalence F (asEquivalence H)).counitIso.app c
#align category_theory.functor.map_cocone_map_cocone_inv CategoryTheory.Functor.mapCoconeMapCoconeInv

/-- `mapCocone` is the right inverse to `mapCoconeInv`. -/
def mapCoconeInvMapCocone {F : J ‚•§ D} (H : D ‚•§ C) [IsEquivalence H] (c : Cocone F) :
    mapCoconeInv H (mapCocone H c) ‚âÖ c :=
  (Limits.Cocones.functorialityEquivalence F (asEquivalence H)).unitIso.symm.app c
#align category_theory.functor.map_cocone_inv_map_cocone CategoryTheory.Functor.mapCoconeInvMapCocone

/-- `functoriality F _ ‚ãô postcompose (whisker_left F _)` simplifies to `functoriality F _`. -/
@[simps!]
def functorialityCompPostcompose {H H' : C ‚•§ D} (Œ± : H ‚âÖ H') :
    Cones.functoriality F H ‚ãô Cones.postcompose (whiskerLeft F Œ±.hom) ‚âÖ Cones.functoriality F H' :=
  NatIso.ofComponents fun c => Cones.ext (Œ±.app _)
#align category_theory.functor.functoriality_comp_postcompose CategoryTheory.Functor.functorialityCompPostcompose

/-- For `F : J ‚•§ C`, given a cone `c : Cone F`, and a natural isomorphism `Œ± : H ‚âÖ H'` for functors
`H H' : C ‚•§ D`, the postcomposition of the cone `H.mapCone` using the isomorphism `Œ±` is
isomorphic to the cone `H'.mapCone`.
-/
@[simps!]
def postcomposeWhiskerLeftMapCone {H H' : C ‚•§ D} (Œ± : H ‚âÖ H') (c : Cone F) :
    (Cones.postcompose (whiskerLeft F Œ±.hom : _)).obj (mapCone H c) ‚âÖ mapCone H' c :=
  (functorialityCompPostcompose Œ±).app c
#align category_theory.functor.postcompose_whisker_left_map_cone CategoryTheory.Functor.postcomposeWhiskerLeftMapCone

/--
`mapCone` commutes with `postcompose`. In particular, for `F : J ‚•§ C`, given a cone `c : Cone F`, a
natural transformation `Œ± : F ‚ü∂ G` and a functor `H : C ‚•§ D`, we have two obvious ways of producing
a cone over `G ‚ãô H`, and they are both isomorphic.
-/
@[simps!]
def mapConePostcompose {Œ± : F ‚ü∂ G} {c} :
    mapCone H ((Cones.postcompose Œ±).obj c) ‚âÖ
      (Cones.postcompose (whiskerRight Œ± H : _)).obj (mapCone H c) :=
  Cones.ext (Iso.refl _)
#align category_theory.functor.map_cone_postcompose CategoryTheory.Functor.mapConePostcompose

/-- `mapCone` commutes with `postcomposeEquivalence`
-/
@[simps!]
def mapConePostcomposeEquivalenceFunctor {Œ± : F ‚âÖ G} {c} :
    mapCone H ((Cones.postcomposeEquivalence Œ±).functor.obj c) ‚âÖ
      (Cones.postcomposeEquivalence (isoWhiskerRight Œ± H : _)).functor.obj (mapCone H c) :=
  Cones.ext (Iso.refl _)
#align category_theory.functor.map_cone_postcompose_equivalence_functor CategoryTheory.Functor.mapConePostcomposeEquivalenceFunctor

/-- `functoriality F _ ‚ãô precompose (whiskerLeft F _)` simplifies to `functoriality F _`. -/
@[simps!]
def functorialityCompPrecompose {H H' : C ‚•§ D} (Œ± : H ‚âÖ H') :
    Cocones.functoriality F H ‚ãô Cocones.precompose (whiskerLeft F Œ±.inv) ‚âÖ
      Cocones.functoriality F H' :=
  NatIso.ofComponents fun c => Cocones.ext (Œ±.app _)
#align category_theory.functor.functoriality_comp_precompose CategoryTheory.Functor.functorialityCompPrecompose

/--
For `F : J ‚•§ C`, given a cocone `c : Cocone F`, and a natural isomorphism `Œ± : H ‚âÖ H'` for functors
`H H' : C ‚•§ D`, the precomposition of the cocone `H.mapCocone` using the isomorphism `Œ±` is
isomorphic to the cocone `H'.mapCocone`.
-/
@[simps!]
def precomposeWhiskerLeftMapCocone {H H' : C ‚•§ D} (Œ± : H ‚âÖ H') (c : Cocone F) :
    (Cocones.precompose (whiskerLeft F Œ±.inv : _)).obj (mapCocone H c) ‚âÖ mapCocone H' c :=
  (functorialityCompPrecompose Œ±).app c
#align category_theory.functor.precompose_whisker_left_map_cocone CategoryTheory.Functor.precomposeWhiskerLeftMapCocone

/-- `map_cocone` commutes with `precompose`. In particular, for `F : J ‚•§ C`, given a cocone
`c : Cocone F`, a natural transformation `Œ± : F ‚ü∂ G` and a functor `H : C ‚•§ D`, we have two obvious
ways of producing a cocone over `G ‚ãô H`, and they are both isomorphic.
-/
@[simps!]
def mapCoconePrecompose {Œ± : F ‚ü∂ G} {c} :
    mapCocone H ((Cocones.precompose Œ±).obj c) ‚âÖ
      (Cocones.precompose (whiskerRight Œ± H : _)).obj (mapCocone H c) :=
  Cocones.ext (Iso.refl _)
#align category_theory.functor.map_cocone_precompose CategoryTheory.Functor.mapCoconePrecompose

/-- `mapCocone` commutes with `precomposeEquivalence`
-/
@[simps!]
def mapCoconePrecomposeEquivalenceFunctor {Œ± : F ‚âÖ G} {c} :
    mapCocone H ((Cocones.precomposeEquivalence Œ±).functor.obj c) ‚âÖ
      (Cocones.precomposeEquivalence (isoWhiskerRight Œ± H : _)).functor.obj (mapCocone H c) :=
  Cocones.ext (Iso.refl _)
#align category_theory.functor.map_cocone_precompose_equivalence_functor CategoryTheory.Functor.mapCoconePrecomposeEquivalenceFunctor

/-- `mapCone` commutes with `whisker`
-/
@[simps!]
def mapConeWhisker {E : K ‚•§ J} {c : Cone F} : mapCone H (c.whisker E) ‚âÖ (mapCone H c).whisker E :=
  Cones.ext (Iso.refl _)
#align category_theory.functor.map_cone_whisker CategoryTheory.Functor.mapConeWhisker

/-- `mapCocone` commutes with `whisker`
-/
@[simps!]
def mapCoconeWhisker {E : K ‚•§ J} {c : Cocone F} :
    mapCocone H (c.whisker E) ‚âÖ (mapCocone H c).whisker E :=
  Cocones.ext (Iso.refl _)
#align category_theory.functor.map_cocone_whisker CategoryTheory.Functor.mapCoconeWhisker

end Functor

end CategoryTheory

namespace CategoryTheory.Limits

section

variable {F : J ‚•§ C}

/-- Change a `Cocone F` into a `Cone F.op`. -/
@[simps]
def Cocone.op (c : Cocone F) : Cone F.op where
  pt := Opposite.op c.pt
  œÄ := NatTrans.op c.Œπ
#align category_theory.limits.cocone.op CategoryTheory.Limits.Cocone.op

/-- Change a `Cone F` into a `Cocone F.op`. -/
@[simps]
def Cone.op (c : Cone F) : Cocone F.op where
  pt := Opposite.op c.pt
  Œπ := NatTrans.op c.œÄ
#align category_theory.limits.cone.op CategoryTheory.Limits.Cone.op

/-- Change a `Cocone F.op` into a `Cone F`. -/
@[simps]
def Cocone.unop (c : Cocone F.op) : Cone F where
  pt := Opposite.unop c.pt
  œÄ := NatTrans.removeOp c.Œπ
#align category_theory.limits.cocone.unop CategoryTheory.Limits.Cocone.unop

/-- Change a `Cone F.op` into a `Cocone F`. -/
@[simps]
def Cone.unop (c : Cone F.op) : Cocone F where
  pt := Opposite.unop c.pt
  Œπ := NatTrans.removeOp c.œÄ
#align category_theory.limits.cone.unop CategoryTheory.Limits.Cone.unop

variable (F)

/-- The category of cocones on `F`
is equivalent to the opposite category of
the category of cones on the opposite of `F`.
-/
def coconeEquivalenceOpConeOp : Cocone F ‚âå (Cone F.op)·µí·µñ where
  functor :=
    { obj := fun c => op (Cocone.op c)
      map := fun {X} {Y} f =>
        Quiver.Hom.op
          { hom := f.hom.op
            w := fun j => by
              apply Quiver.Hom.unop_inj
              dsimp
              apply CoconeMorphism.w } }
  inverse :=
    { obj := fun c => Cone.unop (unop c)
      map := fun {X} {Y} f =>
        { hom := f.unop.hom.unop
          w := fun j => by
            apply Quiver.Hom.op_inj
            dsimp
            apply ConeMorphism.w } }
  unitIso := NatIso.ofComponents (fun c => Cocones.ext (Iso.refl _))
  counitIso :=
    NatIso.ofComponents
      (fun c => by
        induction c
        apply Iso.op
        exact Cones.ext (Iso.refl _))
      fun {X} {Y} f =>
      Quiver.Hom.unop_inj (ConeMorphism.ext _ _ (by simp))
  functor_unitIso_comp c := by
    apply Quiver.Hom.unop_inj
    apply ConeMorphism.ext
    dsimp
    apply comp_id
#align category_theory.limits.cocone_equivalence_op_cone_op CategoryTheory.Limits.coconeEquivalenceOpConeOp

attribute [simps] coconeEquivalenceOpConeOp

end

section

variable {F : J ‚•§ C·µí·µñ}

/-- Change a cocone on `F.leftOp : J·µí·µñ ‚•§ C` to a cocone on `F : J ‚•§ C·µí·µñ`. -/
@[simps!]
def coneOfCoconeLeftOp (c : Cocone F.leftOp) : Cone F where
  pt := op c.pt
  œÄ := NatTrans.removeLeftOp c.Œπ
#align category_theory.limits.cone_of_cocone_left_op CategoryTheory.Limits.coneOfCoconeLeftOp

/-- Change a cone on `F : J ‚•§ C·µí·µñ` to a cocone on `F.leftOp : J·µí·µñ ‚•§ C`. -/
@[simps!]
def coconeLeftOpOfCone (c : Cone F) : Cocone F.leftOp where
  pt := unop c.pt
  Œπ := NatTrans.leftOp c.œÄ
#align category_theory.limits.cocone_left_op_of_cone CategoryTheory.Limits.coconeLeftOpOfCone

/- When trying use `@[simps]` to generate the `Œπ_app` field of this definition, `@[simps]` tries to
  reduce the RHS using `expr.dsimp` and `expr.simp`, but for some reason the expression is not
  being simplified properly. -/
/-- Change a cone on `F.leftOp : J·µí·µñ ‚•§ C` to a cocone on `F : J ‚•§ C·µí·µñ`. -/
@[simps pt]
def coconeOfConeLeftOp (c : Cone F.leftOp) : Cocone F where
  pt := op c.pt
  Œπ := NatTrans.removeLeftOp c.œÄ
#align category_theory.limits.cocone_of_cone_left_op CategoryTheory.Limits.coconeOfConeLeftOp

@[simp]
theorem coconeOfConeLeftOp_Œπ_app (c : Cone F.leftOp) (j) :
    (coconeOfConeLeftOp c).Œπ.app j = (c.œÄ.app (op j)).op := by
  dsimp only [coconeOfConeLeftOp]
  simp
#align category_theory.limits.cocone_of_cone_left_op_Œπ_app CategoryTheory.Limits.coconeOfConeLeftOp_Œπ_app

/-- Change a cocone on `F : J ‚•§ C·µí·µñ` to a cone on `F.leftOp : J·µí·µñ ‚•§ C`. -/
@[simps!]
def coneLeftOpOfCocone (c : Cocone F) : Cone F.leftOp where
  pt := unop c.pt
  œÄ := NatTrans.leftOp c.Œπ
#align category_theory.limits.cone_left_op_of_cocone CategoryTheory.Limits.coneLeftOpOfCocone

end

section

variable {F : J·µí·µñ ‚•§ C}

/-- Change a cocone on `F.rightOp : J ‚•§ C·µí·µñ` to a cone on `F : J·µí·µñ ‚•§ C`. -/
@[simps]
def coneOfCoconeRightOp (c : Cocone F.rightOp) : Cone F where
  pt := unop c.pt
  œÄ := NatTrans.removeRightOp c.Œπ
#align category_theory.limits.cone_of_cocone_right_op CategoryTheory.Limits.coneOfCoconeRightOp

/-- Change a cone on `F : J·µí·µñ ‚•§ C` to a cocone on `F.rightOp : J·µí·µñ ‚•§ C`. -/
@[simps]
def coconeRightOpOfCone (c : Cone F) : Cocone F.rightOp where
  pt := op c.pt
  Œπ := NatTrans.rightOp c.œÄ
#align category_theory.limits.cocone_right_op_of_cone CategoryTheory.Limits.coconeRightOpOfCone

/-- Change a cone on `F.rightOp : J ‚•§ C·µí·µñ` to a cocone on `F : J·µí·µñ ‚•§ C`. -/
@[simps]
def coconeOfConeRightOp (c : Cone F.rightOp) : Cocone F where
  pt := unop c.pt
  Œπ := NatTrans.removeRightOp c.œÄ
#align category_theory.limits.cocone_of_cone_right_op CategoryTheory.Limits.coconeOfConeRightOp

/-- Change a cocone on `F : J·µí·µñ ‚•§ C` to a cone on `F.rightOp : J ‚•§ C·µí·µñ`. -/
@[simps]
def coneRightOpOfCocone (c : Cocone F) : Cone F.rightOp where
  pt := op c.pt
  œÄ := NatTrans.rightOp c.Œπ
#align category_theory.limits.cone_right_op_of_cocone CategoryTheory.Limits.coneRightOpOfCocone

end

section

variable {F : J·µí·µñ ‚•§ C·µí·µñ}

/-- Change a cocone on `F.unop : J ‚•§ C` into a cone on `F : J·µí·µñ ‚•§ C·µí·µñ`. -/
@[simps]
def coneOfCoconeUnop (c : Cocone F.unop) : Cone F where
  pt := op c.pt
  œÄ := NatTrans.removeUnop c.Œπ
#align category_theory.limits.cone_of_cocone_unop CategoryTheory.Limits.coneOfCoconeUnop

/-- Change a cone on `F : J·µí·µñ ‚•§ C·µí·µñ` into a cocone on `F.unop : J ‚•§ C`. -/
@[simps]
def coconeUnopOfCone (c : Cone F) : Cocone F.unop where
  pt := unop c.pt
  Œπ := NatTrans.unop c.œÄ
#align category_theory.limits.cocone_unop_of_cone CategoryTheory.Limits.coconeUnopOfCone

/-- Change a cone on `F.unop : J ‚•§ C` into a cocone on `F : J·µí·µñ ‚•§ C·µí·µñ`. -/
@[simps]
def coconeOfConeUnop (c : Cone F.unop) : Cocone F where
  pt := op c.pt
  Œπ := NatTrans.removeUnop c.œÄ
#align category_theory.limits.cocone_of_cone_unop CategoryTheory.Limits.coconeOfConeUnop

/-- Change a cocone on `F : J·µí·µñ ‚•§ C·µí·µñ` into a cone on `F.unop : J ‚•§ C`. -/
@[simps]
def coneUnopOfCocone (c : Cocone F) : Cone F.unop where
  pt := unop c.pt
  œÄ := NatTrans.unop c.Œπ
#align category_theory.limits.cone_unop_of_cocone CategoryTheory.Limits.coneUnopOfCocone

end

end CategoryTheory.Limits

namespace CategoryTheory.Functor

open CategoryTheory.Limits

variable {F : J ‚•§ C}

section

variable (G : C ‚•§ D)

/-- The opposite cocone of the image of a cone is the image of the opposite cocone. -/
-- Porting note: removed @[simps (config := { rhsMd := semireducible })] and replaced with
@[simps!]
def mapConeOp (t : Cone F) : (mapCone G t).op ‚âÖ mapCocone G.op t.op :=
  Cocones.ext (Iso.refl _)
#align category_theory.functor.map_cone_op CategoryTheory.Functor.mapConeOp

/-- The opposite cone of the image of a cocone is the image of the opposite cone. -/
-- Porting note: removed @[simps (config := { rhsMd := semireducible })] and replaced with
@[simps!]
def mapCoconeOp {t : Cocone F} : (mapCocone G t).op ‚âÖ mapCone G.op t.op :=
  Cones.ext (Iso.refl _)
#align category_theory.functor.map_cocone_op CategoryTheory.Functor.mapCoconeOp

end

end CategoryTheory.Functor
