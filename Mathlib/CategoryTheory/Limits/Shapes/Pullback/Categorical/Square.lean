/-
Copyright (c) 2025 Robin Carlier. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robin Carlier
-/
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.Categorical.Basic

/-! # Categorical pullback squares

-/


universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ v‚ÇÖ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÖ

namespace CategoryTheory.Limits
open scoped CategoricalPullback

section

open CategoricalPullback in
/-- A `CatPullbackSquare T L R B` asserts that a `CatCommSq T L R B` is a
categorical pullback square. This is realized as the data of a chosen
(adjoint) inverse to the canonical functor `C‚ÇÅ ‚•§ R ‚ä° B` induced by
the square. The field of this struct are not intended to be accessed directly.
Instead one should use the corresponding fields of
`CatPullbackSquare.equivalence`. -/
class CatPullbackSquare
    {C‚ÇÅ : Type u‚ÇÅ} {C‚ÇÇ : Type u‚ÇÇ} {C‚ÇÉ : Type u‚ÇÉ} {C‚ÇÑ : Type u‚ÇÑ}
    [Category.{v‚ÇÅ} C‚ÇÅ] [Category.{v‚ÇÇ} C‚ÇÇ] [Category.{v‚ÇÉ} C‚ÇÉ] [Category.{v‚ÇÑ} C‚ÇÑ]
    (T : C‚ÇÅ ‚•§ C‚ÇÇ) (L : C‚ÇÅ ‚•§ C‚ÇÉ) (R : C‚ÇÇ ‚•§ C‚ÇÑ) (B : C‚ÇÉ ‚•§ C‚ÇÑ)
    [CatCommSq T L R B] where
  /-- a chosen (adjoint) inverse to the canonical functor `C‚ÇÅ ‚•§ R ‚ä° B`. -/
  inverse (T) (L) (R) (B) : R ‚ä° B ‚•§ C‚ÇÅ
  /-- the unit isomorphism for the equivalence -/
  unitIso (T) (L) (R) (B) :
    ùü≠ C‚ÇÅ ‚âÖ (functorEquiv _ _ _).inverse.obj (.ofSquare T L R B) ‚ãô inverse
  /-- the counit isomorphism for the equivalence -/
  counitIso (T) (L) (R) (B) :
    inverse ‚ãô (functorEquiv _ _ _).inverse.obj (.ofSquare T L R B) ‚âÖ ùü≠ (R ‚ä° B)
  /-- the left triangle identity -/
  functorEquiv_inverse_obj_unitIso_comp (T) (L) (R) (B) (X : C‚ÇÅ) :
    ((functorEquiv _ _ _).inverse.obj (.ofSquare T L R B)).map
      (unitIso.hom.app X) ‚â´
      counitIso.hom.app
        (functorEquiv _ _ _|>.inverse.obj (.ofSquare T L R B)|>.obj X) =
    ùüô _ := by aesop_cat

namespace CatPullbackSquare

variable {C‚ÇÅ : Type u‚ÇÅ} {C‚ÇÇ : Type u‚ÇÇ} {C‚ÇÉ : Type u‚ÇÉ} {C‚ÇÑ : Type u‚ÇÑ}
    [Category.{v‚ÇÅ} C‚ÇÅ] [Category.{v‚ÇÇ} C‚ÇÇ] [Category.{v‚ÇÉ} C‚ÇÉ] [Category.{v‚ÇÑ} C‚ÇÑ]
    (T : C‚ÇÅ ‚•§ C‚ÇÇ) (L : C‚ÇÅ ‚•§ C‚ÇÉ) (R : C‚ÇÇ ‚•§ C‚ÇÑ) (B : C‚ÇÉ ‚•§ C‚ÇÑ)
    [CatCommSq T L R B] [CatPullbackSquare T L R B]

/-- The canonical equivalence `C‚ÇÅ ‚âå R ‚ä° B` bundled by the fields of 
`CatPullbackSquare T L R B`. -/
@[simps! functor_obj_fst functor_obj_snd functor_obj_iso functor_obj_iso_hom
functor_obj_iso_inv functor_map_fst functor_map_snd]
def equivalence : C‚ÇÅ ‚âå R ‚ä° B where
  functor :=
    (CategoricalPullback.functorEquiv _ _ _).inverse.obj (.ofSquare T L R B)
  inverse := inverse T L R B
  unitIso := unitIso T L R B
  counitIso := counitIso T L R B
  functor_unitIso_comp := functorEquiv_inverse_obj_unitIso_comp T L R B

variable {X : Type u‚ÇÖ} [Category.{v‚ÇÖ} X]

@[simps!]
def functorEquiv : (X ‚•§ C‚ÇÅ) ‚âå CategoricalPullback.CatCommSqOver R B X :=
  (equivalence T L R B).congrRight.trans <| 
    CategoricalPullback.functorEquiv R B X

end CatPullbackSquare

end CategoryTheory.Limits
