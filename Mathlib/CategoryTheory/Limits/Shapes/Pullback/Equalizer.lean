/-
Copyright (c) 2024 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.CommSq


/-!
# Equalizers as pullbacks of products

Also see `CategoryTheory.Limits.Constructions.Equalizers` for very similar results.

-/

universe v u

open CategoryTheory.Category CategoryTheory.CartesianMonoidalCategory

namespace CategoryTheory.Limits

variable {C : Type u} [Category.{v} C] {X Y Z : C}

/-- If `e` is an equalizer of `f g : X ‚ü∂ Y`, then `e` is also the pullback of the diagonal map
`Y ‚ü∂ Y ‚®Ø Y` along `‚ü®f, g‚ü© : X ‚ü∂ Y ‚®Ø Y`. Fully explicit version with binary fans and forks -/
lemma isPullback_equalizer_binaryFan_fork {p : BinaryFan Y Y} (hp : IsLimit p)
      (f g : X ‚ü∂ Y) (e : Fork f g) (he : IsLimit e) :
    IsPullback e.Œπ (e.Œπ ‚â´ f)
      (hp.lift (BinaryFan.mk f g)) (hp.lift (BinaryFan.mk (ùüô Y) (ùüô Y))) := by
  refine
    ‚ü® ‚ü® BinaryFan.IsLimit.hom_ext hp (by simp) (by simp[e.condition]) ‚ü©,
      ‚ü® PullbackCone.IsLimit.mk _ ?_ ?_ ?_ ?_ ‚ü© ‚ü©
  ¬∑ exact fun s ‚Ü¶ he.lift (Fork.ofŒπ s.fst (eq_of_lift_eq_diag p hp (s.condition)))
  ¬∑ exact fun s ‚Ü¶ Fork.IsLimit.lift_Œπ he
  ¬∑ exact fun s ‚Ü¶ by simpa using congr($s.condition ‚â´ p.fst)
  ¬∑ exact fun _ _ hm _ ‚Ü¶ Fork.IsLimit.hom_ext he (Eq.symm (Fork.IsLimit.lift_Œπ he) ‚ñ∏ hm)

/-- The equalizer of `f g : X ‚ü∂ Y` is the pullback of the diagonal map `Y ‚ü∂ Y ‚®Ø Y`
  along the map `‚ü®f, g‚ü© : X ‚ü∂ Y ‚®Ø Y`. Version with implicit products and equalizers. -/
lemma isPullback_equalizer_prod (f g : X ‚ü∂ Y) [HasEqualizer f g] [HasBinaryProduct Y Y] :
      IsPullback (equalizer.Œπ f g) (equalizer.Œπ f g ‚â´ f) (prod.lift f g) (diag Y) :=
    isPullback_equalizer_binaryFan_fork _
      f g (equalizer.fork f g) (equalizerIsEqualizer' f g)

/-- If `e` is an coequalizer of `f g : X ‚ü∂ Y`, then `e` is also the pushout of the codiagonal map
`X + X ‚ü∂ X` along `‚ü®f, g‚ü© : X + X ‚ü∂ Y`. Fully explicit version with binary cofans and coforks. -/
lemma isPushout_coequalizer_binaryCofan_coFork {p : BinaryCofan X X} (hp : IsColimit p)
  (f g : X ‚ü∂ Y) (e : Cofork f g) (h : IsColimit e) :
    IsPushout (hp.desc (BinaryCofan.mk f g)) (hp.desc (BinaryCofan.mk (ùüô X) (ùüô X)))
      e.œÄ (f ‚â´ e.œÄ) := by
  refine
    ‚ü® ‚ü® BinaryCofan.IsColimit.hom_ext hp (by simp) (by simp[e.condition]) ‚ü©,
      ‚ü® PushoutCocone.IsColimit.mk _ ?_ ?_ ?_ ?_ ‚ü© ‚ü©
  ¬∑ exact fun s ‚Ü¶ h.desc (Cofork.ofœÄ s.inl (eq_of_desc_eq_codiag p hp (s.condition)))
  ¬∑ exact fun s ‚Ü¶ Cofork.IsColimit.œÄ_desc h
  ¬∑ exact fun s ‚Ü¶ by simpa using congr(p.inl ‚â´ $s.condition)
  ¬∑ exact fun _ _ hm _ ‚Ü¶ Cofork.IsColimit.hom_ext h (Eq.symm (Cofork.IsColimit.œÄ_desc h) ‚ñ∏ hm)

/-- The coequalizer of `f g : X ‚ü∂ Y` is the pushout of the diagonal map `X ‚®ø X ‚ü∂ X`
along the map `(f, g) : X ‚®ø X ‚ü∂ Y`. Version with implicit coproducts and coequalizers -/
lemma isPushout_coequalizer_coprod (f g : X ‚ü∂ Y) [HasCoequalizer f g] [HasBinaryCoproduct X X] :
    IsPushout (coprod.desc f g) (codiag X)
      (coequalizer.œÄ f g) (f ‚â´ coequalizer.œÄ f g) :=
  isPushout_coequalizer_binaryCofan_coFork _
    f g (coequalizer.cofork f g) (coequalizerIsCoequalizer' f g)

end CategoryTheory.Limits
