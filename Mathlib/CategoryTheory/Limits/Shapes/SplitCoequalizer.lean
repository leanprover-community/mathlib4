/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import Mathlib.CategoryTheory.Limits.Shapes.Equalizers

/-!
# Split coequalizers

We define what it means for a triple of morphisms `f g : X ‚ü∂ Y`, `œÄ : Y ‚ü∂ Z` to be a split
coequalizer: there is a section `s` of `œÄ` and a section `t` of `g`, which additionally satisfy
`t ‚â´ f = œÄ ‚â´ s`.

In addition, we show that every split coequalizer is a coequalizer
(`CategoryTheory.IsSplitCoequalizer.isCoequalizer`) and absolute
(`CategoryTheory.IsSplitCoequalizer.map`)

A pair `f g : X ‚ü∂ Y` has a split coequalizer if there is a `Z` and `œÄ : Y ‚ü∂ Z` making `f,g,œÄ` a
split coequalizer.
A pair `f g : X ‚ü∂ Y` has a `G`-split coequalizer if `G f, G g` has a split coequalizer.

These definitions and constructions are useful in particular for the monadicity theorems.

This file has been adapted to `Mathlib.CategoryTheory.Limits.Shapes.SplitEqualizer`. Please try
to keep them in sync.

-/


namespace CategoryTheory

universe v v‚ÇÇ u u‚ÇÇ

variable {C : Type u} [Category.{v} C]
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
variable (G : C ‚•§ D)
variable {X Y : C} (f g : X ‚ü∂ Y)

/-- A split coequalizer diagram consists of morphisms

      f   œÄ
    X ‚áâ Y ‚Üí Z
      g

satisfying `f ‚â´ œÄ = g ‚â´ œÄ` together with morphisms

      t   s
    X ‚Üê Y ‚Üê Z

satisfying `s ‚â´ œÄ = ùüô Z`, `t ‚â´ g = ùüô Y` and `t ‚â´ f = œÄ ‚â´ s`.

The name "coequalizer" is appropriate, since any split coequalizer is a coequalizer, see
`CategoryTheory.IsSplitCoequalizer.isCoequalizer`.
Split coequalizers are also absolute, since a functor preserves all the structure above.
-/
structure IsSplitCoequalizer {Z : C} (œÄ : Y ‚ü∂ Z) where
  /-- A map from the coequalizer to `Y` -/
  rightSection : Z ‚ü∂ Y
  /-- A map in the opposite direction to `f` and `g` -/
  leftSection : Y ‚ü∂ X
  /-- Composition of `œÄ` with `f` and with `g` agree -/
  condition : f ‚â´ œÄ = g ‚â´ œÄ := by aesop_cat
  /-- `rightSection` splits `œÄ` -/
  rightSection_œÄ : rightSection ‚â´ œÄ = ùüô Z := by aesop_cat
  /-- `leftSection` splits `g` -/
  leftSection_bottom : leftSection ‚â´ g = ùüô Y := by aesop_cat
  /-- `leftSection` composed with `f` is `pi` composed with `rightSection` -/
  leftSection_top : leftSection ‚â´ f = œÄ ‚â´ rightSection := by aesop_cat

instance {X : C} : Inhabited (IsSplitCoequalizer (ùüô X) (ùüô X) (ùüô X)) where
  default := { rightSection := ùüô X, leftSection := ùüô X }

open IsSplitCoequalizer

attribute [reassoc] condition

attribute [reassoc (attr := simp)] rightSection_œÄ leftSection_bottom leftSection_top

variable {f g}

/-- Split coequalizers are absolute: they are preserved by any functor. -/
@[simps]
def IsSplitCoequalizer.map {Z : C} {œÄ : Y ‚ü∂ Z} (q : IsSplitCoequalizer f g œÄ) (F : C ‚•§ D) :
    IsSplitCoequalizer (F.map f) (F.map g) (F.map œÄ) where
  rightSection := F.map q.rightSection
  leftSection := F.map q.leftSection
  condition := by rw [‚Üê F.map_comp, q.condition, F.map_comp]
  rightSection_œÄ := by rw [‚Üê F.map_comp, q.rightSection_œÄ, F.map_id]
  leftSection_bottom := by rw [‚Üê F.map_comp, q.leftSection_bottom, F.map_id]
  leftSection_top := by rw [‚Üê F.map_comp, q.leftSection_top, F.map_comp]

section

open Limits

/-- A split coequalizer clearly induces a cofork. -/
@[simps! pt]
def IsSplitCoequalizer.asCofork {Z : C} {h : Y ‚ü∂ Z} (t : IsSplitCoequalizer f g h) :
    Cofork f g := Cofork.ofœÄ h t.condition

@[simp]
theorem IsSplitCoequalizer.asCofork_œÄ {Z : C} {h : Y ‚ü∂ Z} (t : IsSplitCoequalizer f g h) :
    t.asCofork.œÄ = h := rfl

/--
The cofork induced by a split coequalizer is a coequalizer, justifying the name. In some cases it
is more convenient to show a given cofork is a coequalizer by showing it is split.
-/
def IsSplitCoequalizer.isCoequalizer {Z : C} {h : Y ‚ü∂ Z} (t : IsSplitCoequalizer f g h) :
    IsColimit t.asCofork :=
  Cofork.IsColimit.mk' _ fun s =>
    ‚ü®t.rightSection ‚â´ s.œÄ, by
      dsimp
      rw [‚Üê t.leftSection_top_assoc, s.condition, t.leftSection_bottom_assoc], fun hm => by
      simp [‚Üê hm]‚ü©

end

variable (f g)

/--
The pair `f,g` is a split pair if there is an `h : Y ‚ü∂ Z` so that `f, g, h` forms a split
coequalizer in `C`.
-/
class HasSplitCoequalizer : Prop where
  /-- There is some split coequalizer -/
  splittable : ‚àÉ (Z : C) (h : Y ‚ü∂ Z), Nonempty (IsSplitCoequalizer f g h)

/--
The pair `f,g` is a `G`-split pair if there is an `h : G Y ‚ü∂ Z` so that `G f, G g, h` forms a split
coequalizer in `D`.
-/
abbrev Functor.IsSplitPair : Prop :=
  HasSplitCoequalizer (G.map f) (G.map g)

/-- Get the coequalizer object from the typeclass `IsSplitPair`. -/
noncomputable def HasSplitCoequalizer.coequalizerOfSplit [HasSplitCoequalizer f g] : C :=
  (splittable (f := f) (g := g)).choose

/-- Get the coequalizer morphism from the typeclass `IsSplitPair`. -/
noncomputable def HasSplitCoequalizer.coequalizerœÄ [HasSplitCoequalizer f g] :
    Y ‚ü∂ HasSplitCoequalizer.coequalizerOfSplit f g :=
  (splittable (f := f) (g := g)).choose_spec.choose

/-- The coequalizer morphism `coequalizeœÄ` gives a split coequalizer on `f,g`. -/
noncomputable def HasSplitCoequalizer.isSplitCoequalizer [HasSplitCoequalizer f g] :
    IsSplitCoequalizer f g (HasSplitCoequalizer.coequalizerœÄ f g) :=
  Classical.choice (splittable (f := f) (g := g)).choose_spec.choose_spec

/-- If `f, g` is split, then `G f, G g` is split. -/
instance map_is_split_pair [HasSplitCoequalizer f g] : HasSplitCoequalizer (G.map f) (G.map g) where
  splittable :=
    ‚ü®_, _, ‚ü®IsSplitCoequalizer.map (HasSplitCoequalizer.isSplitCoequalizer f g) _‚ü©‚ü©

namespace Limits

/-- If a pair has a split coequalizer, it has a coequalizer. -/
instance (priority := 1) hasCoequalizer_of_hasSplitCoequalizer [HasSplitCoequalizer f g] :
    HasCoequalizer f g :=
  HasColimit.mk ‚ü®_, (HasSplitCoequalizer.isSplitCoequalizer f g).isCoequalizer‚ü©

end Limits

end CategoryTheory
