/-
Copyright (c) 2025 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison, Floris van Doorn
-/
import Mathlib.CategoryTheory.Limits.Opposites
import Mathlib.CategoryTheory.Limits.Shapes.Equalizers
import Mathlib.CategoryTheory.Limits.Shapes.Opposites.Pullbacks

/-!
# Equalizers and coequalizers in `C` and `C·µí·µñ`

We construct equalizers and coequalizers in the opposite categories.

-/

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

noncomputable section

open CategoryTheory

open CategoryTheory.Functor

open Opposite

namespace CategoryTheory.Limits

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]
variable {J : Type u‚ÇÇ} [Category.{v‚ÇÇ} J]

instance hasEqualizers_opposite [HasCoequalizers C] : HasEqualizers C·µí·µñ :=
  haveI : HasColimitsOfShape WalkingParallelPair·µí·µñ C :=
    hasColimitsOfShape_of_equivalence walkingParallelPairOpEquiv
  hasLimitsOfShape_op_of_hasColimitsOfShape

instance hasCoequalizers_opposite [HasEqualizers C] : HasCoequalizers C·µí·µñ :=
  haveI : HasLimitsOfShape WalkingParallelPair·µí·µñ C :=
    hasLimitsOfShape_of_equivalence walkingParallelPairOpEquiv
  hasColimitsOfShape_op_of_hasLimitsOfShape

/-- The canonical isomorphism relating `parallelPair f.op g.op` and `(parallelPair f g).op` -/
def parallelPairOpIso {X Y : C} (f g : X ‚ü∂ Y) :
    parallelPair f.op g.op ‚âÖ walkingParallelPairOpEquiv.functor ‚ãô (parallelPair f g).op :=
  NatIso.ofComponents (fun
    | .zero => .refl _
    | .one => .refl _)
    (by rintro (_ | _ | _) (_ | _ | _) f <;> cases f <;> cat_disch)

@[simp]
lemma parallelPairOpIso_hom_app_zero {X Y : C} (f g : X ‚ü∂ Y) :
  (parallelPairOpIso f g).hom.app WalkingParallelPair.zero = ùüô _ := rfl

@[simp]
lemma parallelPairOpIso_hom_app_one {X Y : C} (f g : X ‚ü∂ Y) :
  (parallelPairOpIso f g).hom.app WalkingParallelPair.one = ùüô _ := rfl

@[simp]
lemma parallelPairOpIso_inv_app_zero {X Y : C} (f g : X ‚ü∂ Y) :
  (parallelPairOpIso f g).inv.app WalkingParallelPair.zero = ùüô _ := rfl

@[simp]
lemma parallelPairOpIso_inv_app_one {X Y : C} (f g : X ‚ü∂ Y) :
  (parallelPairOpIso f g).inv.app WalkingParallelPair.one = ùüô _ := rfl

/-- The canonical isomorphism relating `(parallelPair f g).op` and `parallelPair f.op g.op` -/
def opParallelPairIso {X Y : C} (f g : X ‚ü∂ Y) :
    (parallelPair f g).op ‚âÖ walkingParallelPairOpEquiv.inverse ‚ãô parallelPair f.op g.op :=
  calc
    (parallelPair f g).op ‚âÖ ùü≠ _ ‚ãô (parallelPair f g).op := .refl _
    _ ‚âÖ (walkingParallelPairOpEquiv.inverse ‚ãô walkingParallelPairOpEquiv.functor) ‚ãô _ :=
      isoWhiskerRight walkingParallelPairOpEquiv.symm.unitIso _
    _ ‚âÖ walkingParallelPairOpEquiv.inverse ‚ãô walkingParallelPairOpEquiv.functor ‚ãô _ :=
      Functor.associator _ _ _
    _ ‚âÖ walkingParallelPairOpEquiv.inverse ‚ãô parallelPair f.op g.op :=
      isoWhiskerLeft _ (parallelPairOpIso f g).symm

@[simp]
lemma opParallelPairIso_hom_app_zero {X Y : C} (f g : X ‚ü∂ Y) :
  (opParallelPairIso f g).hom.app (op WalkingParallelPair.zero) = ùüô _ := by simp [opParallelPairIso]

@[simp]
lemma opParallelPairIso_hom_app_one {X Y : C} (f g : X ‚ü∂ Y) :
  (opParallelPairIso f g).hom.app (op WalkingParallelPair.one) = ùüô _ := by simp [opParallelPairIso]

@[simp]
lemma opParallelPairIso_inv_app_zero {X Y : C} (f g : X ‚ü∂ Y) :
  (opParallelPairIso f g).inv.app (op WalkingParallelPair.zero) = ùüô _ := by simp [opParallelPairIso]

@[simp]
lemma opParallelPairIso_inv_app_one {X Y : C} (f g : X ‚ü∂ Y) :
  (opParallelPairIso f g).inv.app (op WalkingParallelPair.one) = ùüô _ := by simp [opParallelPairIso]

namespace Cofork

/-- The obvious map `Cofork f g ‚Üí Fork f.unop g.unop` -/
def unop {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Cofork f g) : Fork f.unop g.unop :=
   Cocone.unop ((Cocones.precompose (opParallelPairIso f.unop g.unop).hom).obj
      (Cocone.whisker walkingParallelPairOpEquiv.inverse c))

lemma unop_œÄ_app_one {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Cofork f g) :
    c.unop.œÄ.app .one = Quiver.Hom.unop (c.Œπ.app .zero) := by
  simp [unop]

lemma unop_œÄ_app_zero {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Cofork f g) :
    c.unop.œÄ.app .zero = Quiver.Hom.unop (c.Œπ.app .one) := by
  simp [unop]

theorem unop_Œπ {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Cofork f g) :
    c.unop.Œπ = c.œÄ.unop := by simp [Cofork.unop, Fork.Œπ]

/-- The obvious map `Cofork f g ‚Üí Fork f.op g.op` -/
def op {X Y : C} {f g : X ‚ü∂ Y} (c : Cofork f g) : Fork f.op g.op :=
  (Cones.postcompose (parallelPairOpIso f g).symm.hom).obj
    (Cone.whisker walkingParallelPairOpEquiv.functor (Cocone.op c))

lemma op_œÄ_app_one {X Y : C} {f g : X ‚ü∂ Y} (c : Cofork f g) :
    c.op.œÄ.app .one = Quiver.Hom.op (c.Œπ.app .zero) := by
  simp [op]

lemma op_œÄ_app_zero {X Y : C} {f g : X ‚ü∂ Y} (c : Cofork f g) :
    c.op.œÄ.app .zero = Quiver.Hom.op (c.Œπ.app .one) := by
  simp [op]

theorem op_Œπ {X Y : C} {f g : X ‚ü∂ Y} (c : Cofork f g) :
    c.op.Œπ = c.œÄ.op := by simp [Cofork.op, Fork.Œπ]

end Cofork

namespace Fork

/-- The obvious map `Fork f g ‚Üí Cofork f.unop g.unop` -/
def unop {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Fork f g) : Cofork f.unop g.unop :=
  Cone.unop ((Cones.postcompose (opParallelPairIso f.unop g.unop).symm.hom).obj
    (Cone.whisker walkingParallelPairOpEquiv.inverse c))

lemma unop_Œπ_app_one {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Fork f g) :
    c.unop.Œπ.app .one = Quiver.Hom.unop (c.œÄ.app .zero) := by
  simp [unop]

lemma unop_Œπ_app_zero {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Fork f g) :
    c.unop.Œπ.app .zero = Quiver.Hom.unop (c.œÄ.app .one) := by
  simp [unop]

theorem unop_œÄ {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Fork f g) :
    c.unop.œÄ = c.Œπ.unop := by simp [Fork.unop, Cofork.œÄ]

/-- The obvious map `Fork f g ‚Üí Cofork f.op g.op` -/
@[simps!]
def op {X Y : C} {f g : X ‚ü∂ Y} (c : Fork f g) : Cofork f.op g.op :=
  (Cocones.precompose (parallelPairOpIso f g).hom).obj
    (Cocone.whisker walkingParallelPairOpEquiv.functor (Cone.op c))

lemma op_Œπ_app_one {X Y : C} {f g : X ‚ü∂ Y} (c : Fork f g) :
    c.op.Œπ.app .one = Quiver.Hom.op (c.œÄ.app .zero) := by
  simp [op]

lemma op_Œπ_app_zero {X Y : C} {f g : X ‚ü∂ Y} (c : Fork f g) :
    c.op.Œπ.app .zero = Quiver.Hom.op (c.œÄ.app .one) := by
  simp [op]

theorem op_œÄ {X Y : C} {f g : X ‚ü∂ Y} (c : Fork f g) :
    c.op.œÄ = c.Œπ.op := by simp [Fork.op, Cofork.œÄ]

end Fork

namespace Cofork

theorem op_unop_œÄ {X Y : C} {f g : X ‚ü∂ Y} (c : Cofork f g) : c.op.unop.œÄ = c.œÄ := by
  simp [Fork.unop_œÄ, Cofork.op_Œπ]

theorem unop_op_œÄ {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Cofork f g) : c.unop.op.œÄ = c.œÄ := by
  simp [Fork.op_œÄ, Cofork.unop_Œπ]

/-- If `c` is a cofork, then `c.op.unop` is isomorphic to `c`. -/
def opUnopIso {X Y : C} {f g : X ‚ü∂ Y} (c : Cofork f g) : c.op.unop ‚âÖ c :=
  Cofork.ext (Iso.refl _) (by simp [op_unop_œÄ])

/-- If `c` is a cofork in `C·µí·µñ`, then `c.unop.op` is isomorphic to `c`. -/
def unopOpIso {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Cofork f g) : c.unop.op ‚âÖ c :=
  Cofork.ext (Iso.refl _) (by simp [unop_op_œÄ])

end Cofork

namespace Fork

theorem op_unop_Œπ {X Y : C} {f g : X ‚ü∂ Y} (c : Fork f g) : c.op.unop.Œπ = c.Œπ := by
  simp [Cofork.unop_Œπ, Fork.op_œÄ]

theorem unop_op_Œπ {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Fork f g) : c.unop.op.Œπ = c.Œπ := by
  simp [Fork.unop_œÄ, Cofork.op_Œπ]

/-- If `c` is a fork, then `c.op.unop` is isomorphic to `c`. -/
def opUnopIso {X Y : C} {f g : X ‚ü∂ Y} (c : Fork f g) : c.op.unop ‚âÖ c :=
  Fork.ext (Iso.refl _) (by simp [op_unop_Œπ])

/-- If `c` is a fork in `C·µí·µñ`, then `c.unop.op` is isomorphic to `c`. -/
def unopOpIso {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Fork f g) : c.unop.op ‚âÖ c :=
  Fork.ext (Iso.refl _) (by simp [unop_op_Œπ])

end Fork

namespace Cofork

/-- A cofork is a colimit cocone if and only if the corresponding fork in the opposite category is
a limit cone. -/
noncomputable -- just for performance; compilation takes several seconds
def isColimitEquivIsLimitOp {X Y : C} {f g : X ‚ü∂ Y} (c : Cofork f g) :
    IsColimit c ‚âÉ IsLimit c.op := by
  apply equivOfSubsingletonOfSubsingleton
  ¬∑ intro h
    exact (IsLimit.postcomposeHomEquiv _ _).invFun ((IsLimit.whiskerEquivalenceEquiv _).toFun h.op)
  ¬∑ intro h
    exact (IsColimit.equivIsoColimit c.opUnopIso).toFun (((IsLimit.postcomposeHomEquiv _ _).invFun
      ((IsLimit.whiskerEquivalenceEquiv walkingParallelPairOpEquiv.symm).toFun h)).unop)

/-- A cofork is a colimit cocone in `C·µí·µñ` if and only if the corresponding fork in `C` is
a limit cone. -/
noncomputable -- just for performance; compilation takes several seconds
def isColimitEquivIsLimitUnop {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Cofork f g) :
    IsColimit c ‚âÉ IsLimit c.unop := by
  apply equivOfSubsingletonOfSubsingleton
  ¬∑ intro h
    exact ((IsColimit.precomposeHomEquiv _ _).invFun
      ((IsColimit.whiskerEquivalenceEquiv walkingParallelPairOpEquiv.symm).toFun h)).unop
  ¬∑ intro h
    exact (IsColimit.equivIsoColimit c.unopOpIso).toFun
      ((IsColimit.precomposeHomEquiv _ _).invFun ((IsColimit.whiskerEquivalenceEquiv _).toFun h.op))

/-- The canonical isomorphism between `(Cofork.ofœÄ œÄ w).op` and `Fork.ofŒπ œÄ.op w'`. -/
def ofœÄOpIsoOfŒπ {X Y P : C} {f g : X ‚ü∂ Y} (œÄ œÄ' : Y ‚ü∂ P) (w : f ‚â´ œÄ = g ‚â´ œÄ)
    (w' : œÄ'.op ‚â´ f.op = œÄ'.op ‚â´ g.op) (h : œÄ = œÄ') :
    (Cofork.ofœÄ œÄ w).op ‚âÖ Fork.ofŒπ œÄ'.op w' :=
  Fork.ext (Iso.refl _) (by simp [Cofork.op_Œπ, h])

/-- The canonical isomorphism between `(Cofork.ofœÄ œÄ w).unop` and `Fork.ofŒπ œÄ.unop w'`. -/
def ofœÄUnopIsoOfŒπ {X Y P : C·µí·µñ} {f g : X ‚ü∂ Y} (œÄ œÄ' : Y ‚ü∂ P) (w : f ‚â´ œÄ = g ‚â´ œÄ)
    (w' : œÄ'.unop ‚â´ f.unop = œÄ'.unop ‚â´ g.unop) (h : œÄ = œÄ') :
    (Cofork.ofœÄ œÄ w).unop ‚âÖ Fork.ofŒπ œÄ'.unop w' :=
  Fork.ext (Iso.refl _) (by simp [Cofork.unop_Œπ, h])

/-- `Cofork.ofœÄ œÄ w` is a colimit cocone if and only if `Fork.ofŒπ œÄ.op w'` in the opposite
category is a limit cone. -/
def isColimitOfœÄEquivIsLimitOp {X Y P : C} {f g : X ‚ü∂ Y} (œÄ œÄ' : Y ‚ü∂ P) (w : f ‚â´ œÄ = g ‚â´ œÄ)
    (w' : œÄ'.op ‚â´ f.op = œÄ'.op ‚â´ g.op) (h : œÄ = œÄ') :
    IsColimit (Cofork.ofœÄ œÄ w) ‚âÉ IsLimit (Fork.ofŒπ œÄ'.op w') :=
  (Cofork.ofœÄ œÄ w).isColimitEquivIsLimitOp.trans (IsLimit.equivIsoLimit (ofœÄOpIsoOfŒπ œÄ œÄ' w w' h))

/-- `Cofork.ofœÄ œÄ w` is a colimit cocone in `C·µí·µñ` if and only if `Fork.ofŒπ œÄ'.unop w'` in `C` is
a limit cone. -/
def isColimitOfœÄEquivIsLimitUnop {X Y P : C·µí·µñ} {f g : X ‚ü∂ Y} (œÄ œÄ' : Y ‚ü∂ P) (w : f ‚â´ œÄ = g ‚â´ œÄ)
    (w' : œÄ'.unop ‚â´ f.unop = œÄ'.unop ‚â´ g.unop) (h : œÄ = œÄ') :
    IsColimit (Cofork.ofœÄ œÄ w) ‚âÉ IsLimit (Fork.ofŒπ œÄ'.unop w') :=
  (Cofork.ofœÄ œÄ w).isColimitEquivIsLimitUnop.trans
    (IsLimit.equivIsoLimit (ofœÄUnopIsoOfŒπ œÄ œÄ' w w' h))

end Cofork

namespace Fork

/-- A fork is a limit cone if and only if the corresponding cofork in the opposite category is
a colimit cocone. -/
def isLimitEquivIsColimitOp {X Y : C} {f g : X ‚ü∂ Y} (c : Fork f g) :
    IsLimit c ‚âÉ IsColimit c.op :=
  (IsLimit.equivIsoLimit c.opUnopIso).symm.trans c.op.isColimitEquivIsLimitUnop.symm

/-- A fork is a limit cone in `C·µí·µñ` if and only if the corresponding cofork in `C` is
a colimit cocone. -/
def isLimitEquivIsColimitUnop {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (c : Fork f g) :
    IsLimit c ‚âÉ IsColimit c.unop :=
  (IsLimit.equivIsoLimit c.unopOpIso).symm.trans c.unop.isColimitEquivIsLimitOp.symm

/-- The canonical isomorphism between `(Fork.ofŒπ Œπ w).op` and `Cofork.ofœÄ Œπ.op w'`. -/
def ofŒπOpIsoOfœÄ {X Y P : C} {f g : X ‚ü∂ Y} (Œπ Œπ' : P ‚ü∂ X) (w : Œπ ‚â´ f = Œπ ‚â´ g)
    (w' : f.op ‚â´ Œπ'.op = g.op ‚â´ Œπ'.op) (h : Œπ = Œπ') :
    (Fork.ofŒπ Œπ w).op ‚âÖ Cofork.ofœÄ Œπ'.op w' :=
  Cofork.ext (Iso.refl _) (by simp [Fork.op_œÄ, h])

/-- The canonical isomorphism between `(Fork.ofŒπ Œπ w).unop` and `Cofork.ofœÄ Œπ.unop w.unop`. -/
def ofŒπUnopIsoOfœÄ {X Y P : C·µí·µñ} {f g : X ‚ü∂ Y} (Œπ Œπ' : P ‚ü∂ X) (w : Œπ ‚â´ f = Œπ ‚â´ g)
    (w' : f.unop ‚â´ Œπ'.unop = g.unop ‚â´ Œπ'.unop) (h : Œπ = Œπ') :
    (Fork.ofŒπ Œπ w).unop ‚âÖ Cofork.ofœÄ Œπ'.unop w' :=
  Cofork.ext (Iso.refl _) (by simp [Fork.unop_œÄ, h])

/-- `Fork.ofŒπ Œπ w` is a limit cone if and only if `Cofork.ofœÄ Œπ'.op w'` in the opposite
category is a colimit cocone. -/
def isLimitOfŒπEquivIsColimitOp {X Y P : C} {f g : X ‚ü∂ Y} (Œπ Œπ' : P ‚ü∂ X) (w : Œπ ‚â´ f = Œπ ‚â´ g)
    (w' : f.op ‚â´ Œπ'.op = g.op ‚â´ Œπ'.op) (h : Œπ = Œπ') :
    IsLimit (Fork.ofŒπ Œπ w) ‚âÉ IsColimit (Cofork.ofœÄ Œπ'.op w') :=
  (Fork.ofŒπ Œπ w).isLimitEquivIsColimitOp.trans (IsColimit.equivIsoColimit (ofŒπOpIsoOfœÄ Œπ Œπ' w w' h))

/-- `Fork.ofŒπ Œπ w` is a limit cone in `C·µí·µñ` if and only if `Cofork.ofœÄ Œπ.unop w.unop` in `C` is
a colimit cocone. -/
def isLimitOfŒπEquivIsColimitUnop {X Y P : C·µí·µñ} {f g : X ‚ü∂ Y} (Œπ Œπ' : P ‚ü∂ X) (w : Œπ ‚â´ f = Œπ ‚â´ g)
    (w' : f.unop ‚â´ Œπ'.unop = g.unop ‚â´ Œπ'.unop) (h : Œπ = Œπ') :
    IsLimit (Fork.ofŒπ Œπ w) ‚âÉ IsColimit (Cofork.ofœÄ Œπ'.unop w') :=
  (Fork.ofŒπ Œπ w).isLimitEquivIsColimitUnop.trans
    (IsColimit.equivIsoColimit (ofŒπUnopIsoOfœÄ Œπ Œπ' w w' h))

end Fork

namespace Cofork

/-- `Cofork.ofœÄ f pullback.condition` is a colimit cocone if and only if
`Fork.ofŒπ f.op pushout.condition` in the opposite category is a limit cone. -/
def isColimitCoforkPushoutEquivIsColimitForkOpPullback
    {X Y : C} {f : X ‚ü∂ Y} [HasPullback f f] [HasPushout f.op f.op] :
    IsColimit (Cofork.ofœÄ f pullback.condition) ‚âÉ IsLimit (Fork.ofŒπ f.op pushout.condition) where
  toFun h := Fork.isLimitOfIsos _ (Cofork.isColimitOfœÄEquivIsLimitOp f f
    pullback.condition (by simp only [‚Üê op_comp, pullback.condition]) rfl h) _ (.refl _)
      (pullbackIsoUnopPushout f f).op.symm (.refl _)
        (by simp [‚Üê op_comp]) (by simp [‚Üê op_comp]) (by simp)
  invFun h := Cofork.isColimitOfIsos _ (Fork.isLimitOfŒπEquivIsColimitUnop f.op f.op
    pushout.condition (by rw [‚Üê unop_comp, ‚Üê unop_comp, pushout.condition]) rfl h) _
      (pullbackIsoUnopPushout f f).symm ( .refl _) (.refl _) (by simp) (by simp) (by simp)
  left_inv := by cat_disch
  right_inv := by cat_disch

/-- `Cofork.ofœÄ f pullback.condition` is a colimit cocone in `C·µí·µñ` if and only if
`Fork.ofŒπ f.unop pushout.condition` in `C` is a limit cone. -/
def isColimitCoforkPushoutEquivIsColimitForkUnopPullback
    {X Y : C·µí·µñ} {f : X ‚ü∂ Y} [HasPullback f f] [HasPushout f.unop f.unop] :
    IsColimit (Cofork.ofœÄ f pullback.condition) ‚âÉ IsLimit (Fork.ofŒπ f.unop pushout.condition) where
  toFun h := Fork.isLimitOfIsos _ (Cofork.isColimitOfœÄEquivIsLimitUnop f f pullback.condition
    (by simp only [‚Üê unop_comp, pullback.condition]) rfl h) _ (.refl _)
      (pullbackIsoOpPushout f f).unop.symm (.refl _)
        (by simp [‚Üê unop_comp]) (by simp [‚Üê unop_comp]) (by simp)
  invFun h :=
    Cofork.isColimitOfIsos _ (Fork.isLimitOfŒπEquivIsColimitOp f.unop f.unop pushout.condition
      (by rw [‚Üê op_comp, ‚Üê op_comp, pushout.condition]) rfl h) _
        (pullbackIsoOpPushout f f).symm ( .refl _) (.refl _) (by simp) (by simp) (by simp)
  left_inv := by cat_disch
  right_inv := by cat_disch

end Cofork

namespace Fork

/-- `Fork.ofŒπ f pushout.condition` is a limit cone if and only if
`Cofork.ofœÄ f.op pullback.condition` in the opposite category is a colimit cocone. -/
def isLimitForkPushoutEquivIsColimitForkOpPullback
    {X Y : C} {f : X ‚ü∂ Y} [HasPushout f f] [HasPullback f.op f.op] :
    IsLimit (Fork.ofŒπ f pushout.condition) ‚âÉ IsColimit (Cofork.ofœÄ f.op pullback.condition) where
  toFun h := Cofork.isColimitOfIsos _ (Fork.isLimitOfŒπEquivIsColimitOp f f
    pushout.condition (by simp only [‚Üê op_comp, pushout.condition]) rfl h) _
      ((pushoutIsoUnopPullback f f).op.symm ‚â™‚â´ eqToIso rfl) (.refl _) (.refl _)
        (by simp) (by simp) (by simp)
  invFun h := by
    refine Fork.isLimitOfIsos _ (Cofork.isColimitOfœÄEquivIsLimitUnop f.op f.op
      pullback.condition (by simp only [‚Üê unop_comp, pullback.condition]) rfl h) _ (.refl _)
        ((pushoutIsoUnopPullback f f).symm) (.refl _) ?_ ?_ (by simp)
    ¬∑ rw [Iso.symm_hom, ‚Üê Quiver.Hom.unop_op (pushoutIsoUnopPullback f f).inv, ‚Üê unop_comp,
        pushoutIsoUnopPullback_inv_fst, Quiver.Hom.unop_op, Iso.refl_hom, Category.id_comp]
    ¬∑ rw [Iso.symm_hom, ‚Üê Quiver.Hom.unop_op (pushoutIsoUnopPullback f f).inv, ‚Üê unop_comp,
        pushoutIsoUnopPullback_inv_snd, Quiver.Hom.unop_op, Iso.refl_hom, Category.id_comp]
  left_inv := by cat_disch
  right_inv := by cat_disch

/-- `Fork.ofŒπ f pushout.condition` is a limit cone in `C·µí·µñ` if and only if
`Cofork.ofœÄ f.op pullback.condition` in `C` is a colimit cocone. -/
def isLimitForkPushoutEquivIsColimitForkUnopPullback
    {X Y : C·µí·µñ} {f : X ‚ü∂ Y} [HasPushout f f] [HasPullback f.unop f.unop] :
    IsLimit (Fork.ofŒπ f pushout.condition) ‚âÉ IsColimit (Cofork.ofœÄ f.unop pullback.condition) where
  toFun h := Cofork.isColimitOfIsos _ (Fork.isLimitOfŒπEquivIsColimitUnop f f pushout.condition
    (by simp only [‚Üê unop_comp, pushout.condition]) rfl h) _
      ((pushoutIsoOpPullback f f).unop.symm ‚â™‚â´ eqToIso rfl) (.refl _) (.refl _)
        (by simp) (by simp) (by simp)
  invFun h := by
    refine Fork.isLimitOfIsos _ (Cofork.isColimitOfœÄEquivIsLimitOp f.unop f.unop pullback.condition
      (by simp only [‚Üê op_comp, pullback.condition]) rfl h) _ (.refl _)
        ((pushoutIsoOpPullback f f).symm) (.refl _) ?_ ?_ (by simp)
    ¬∑ rw [Iso.symm_hom, ‚Üê Quiver.Hom.op_unop (pushoutIsoOpPullback f f).inv, ‚Üê op_comp,
        pushoutIsoOpPullback_inv_fst, Quiver.Hom.op_unop, Iso.refl_hom, Category.id_comp]
    ¬∑ rw [Iso.symm_hom, ‚Üê Quiver.Hom.op_unop (pushoutIsoOpPullback f f).inv, ‚Üê op_comp,
        pushoutIsoOpPullback_inv_snd, Quiver.Hom.op_unop, Iso.refl_hom, Category.id_comp]
  left_inv := by cat_disch
  right_inv := by cat_disch

end Fork

end CategoryTheory.Limits
