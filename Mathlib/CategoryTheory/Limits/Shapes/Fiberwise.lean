/-
Copyright (c) 2025 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kenny Lau
-/

import Mathlib.CategoryTheory.FiberedCategory.Fiber
import Mathlib.CategoryTheory.Limits.Shapes.Products

/-!

# Computing Colimits Fiberwise

In this file, we consider category `J` equipped with a functor `F : J ‚•§ D` to a discrete category
`D`. Then the colimit of any diagram `diagram : J ‚•§ C` can be computed fiberwise, using the
following algorithm:

1. For each `d : D`, construct a cocone over the restricted diagram `fiberInclusion F d ‚ãô diagram`.
2. Take a cofan of the values of these cocones over all `d : D`.

## Main Results

- `colimitOfFiber`: As above, given colimits on each restriction, and coproduct of the values, this
  gives the colimit of the original diagram `diagram`.

-/

universe v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ

open CategoryTheory Functor Category Fiber

variable {J : Type u} {D : Type u‚ÇÅ}
  [Category.{v} J] [Category.{v‚ÇÅ} D] [IsDiscrete D]
  (F : J ‚•§ D)
  {C : Type u‚ÇÇ} [Category.{v‚ÇÇ} C] (diagram : J ‚•§ C)

namespace CategoryTheory

namespace Functor

theorem fiberCongr {j‚ÇÅ j‚ÇÇ : J} (f : j‚ÇÅ ‚ü∂ j‚ÇÇ) : F.obj j‚ÇÅ = F.obj j‚ÇÇ :=
  IsDiscrete.eq_of_hom (F.map f)

instance (d : D) {j‚ÇÅ j‚ÇÇ : F.Fiber d} (f : j‚ÇÅ.1 ‚ü∂ j‚ÇÇ.1) : F.IsHomLift (ùüô d) f :=
  IsHomLift.of_fac _ _ _ j‚ÇÅ.2 j‚ÇÇ.2 (Subsingleton.elim _ _)

/-- Casting a morphism in `J` to a morphism in the category `F.Fiber d`. -/
def fiberPreimage {d : D} (j‚ÇÅ j‚ÇÇ : F.Fiber d) (f : j‚ÇÅ.1 ‚ü∂ j‚ÇÇ.1) : j‚ÇÅ ‚ü∂ j‚ÇÇ :=
  homMk F d f

/-- The inclusion functor from `F.Fiber d` to `J` is fully faithful when `D` is discrete. -/
def fullyFaithfulFiber (d : D) : FullyFaithful (fiberInclusion (p := F) (S := d)) where
  preimage {j‚ÇÅ j‚ÇÇ} := F.fiberPreimage j‚ÇÅ j‚ÇÇ

instance (d : D) : Full (fiberInclusion (p := F) (S := d)) :=
  (fullyFaithfulFiber F d).full

@[elab_as_elim] lemma fiber_inductionOn {motive : ‚àÄ {j‚ÇÅ j‚ÇÇ : J}, (j‚ÇÅ ‚ü∂ j‚ÇÇ) ‚Üí Prop}
    {j‚ÇÅ j‚ÇÇ : J} (f : j‚ÇÅ ‚ü∂ j‚ÇÇ)
    (ih : ‚àÄ d : D, ‚àÄ {j‚ÇÅ j‚ÇÇ : F.Fiber d} (f : j‚ÇÅ ‚ü∂ j‚ÇÇ), motive f.1) :
    motive f :=
  ih _ (F.fiberPreimage (.mk (F.fiberCongr f)) (.mk rfl) f)

end Functor

namespace Limits

open Functor

variable (fiberwiseCocone : ‚àÄ d : D, Cocone (fiberInclusion (p := F) (S := d) ‚ãô diagram))
  (cofan : Cofan fun d : D ‚Ü¶ (fiberwiseCocone d).pt)

/-- Given a functor `F : J ‚•§ D` to a discrete category `D`, and a diagram `diagram : J ‚•§ C`,
we can construct a cocone over `diagram` using the following algorithm:

1. For each `d : D`, construct a cocone over the restricted diagram `fiberInclusion F d ‚ãô diagram`.
2. Take a cofan of the values of these cocones over all `d : D`.
-/
@[simps] def coconeOfFiber : Cocone diagram where
  pt := cofan.pt
  Œπ :=
  { app j := (fiberwiseCocone (F.obj j)).Œπ.app (.mk rfl) ‚â´ cofan.inj (F.obj j)
    naturality j‚ÇÅ j‚ÇÇ f := by
      simp only [const_obj_obj, const_obj_map, comp_id]
      refine F.fiber_inductionOn f fun d j‚ÇÅ j‚ÇÇ f ‚Ü¶ ?_
      rw [‚Üê (fiberwiseCocone (F.obj j‚ÇÅ.1)).w (F.fiberPreimage (.mk rfl)
        (.mk (j‚ÇÇ.2.trans j‚ÇÅ.2.symm)) f.1), Functor.comp_map, assoc]
      congr 1
      suffices h : (fiberwiseCocone d).Œπ.app (mk j‚ÇÇ.2) ‚â´ cofan.inj d =
          (fiberwiseCocone d).Œπ.app (mk j‚ÇÇ.2) ‚â´ cofan.inj d by
        convert h using 1
        ¬∑ obtain ‚ü®_, rfl‚ü© := j‚ÇÇ; rfl
        ¬∑ obtain ‚ü®_, rfl‚ü© := j‚ÇÅ; rfl
      rfl }

variable (fiberwiseColimit : ‚àÄ d : D, IsColimit (fiberwiseCocone d))
  (colimitCofan : IsColimit cofan)

/-- Given a functor `F : J ‚•§ D` to a discrete category, the colimit of any diagram `J ‚•§ C` can
be computed using this algorithm:

1. For each `d : D`, compute the colimit of the restricted diagram `fiberInclusion F d ‚ãô diagram`.
2. Take the coproduct of these colimits over all `d : D`.
-/
@[simps] def colimitOfFiber : IsColimit (coconeOfFiber F diagram fiberwiseCocone cofan) where
  desc c := Cofan.IsColimit.desc colimitCofan fun d ‚Ü¶ (fiberwiseColimit d).desc
    (c.whisker (fiberInclusion))
  uniq c s w := by
    refine Cofan.IsColimit.hom_ext colimitCofan _ _ fun d ‚Ü¶
      (fiberwiseColimit d).hom_ext fun j ‚Ü¶ ?_
    rw [Cofan.IsColimit.fac, IsColimit.fac, Cocone.whisker_Œπ, whiskerLeft_app, ‚Üê w,
      coconeOfFiber_Œπ_app, assoc]
    obtain ‚ü®j, rfl‚ü© := j
    rfl

-- Not an instance because `D` cannot be inferred.
theorem hasColimit_of_fiber [‚àÄ d, HasColimit (fiberInclusion (p := F) (S := d) ‚ãô diagram)]
    [h : HasColimit (Discrete.functor fun d ‚Ü¶
      colimit (fiberInclusion (p := F) (S := d) ‚ãô diagram))] :
    HasColimit diagram :=
  ‚ü®‚ü®‚ü®_, colimitOfFiber F diagram _ _
    (fun d ‚Ü¶ colimit.isColimit (fiberInclusion (p := F) (S := d) ‚ãô diagram))
    (coproductIsCoproduct fun d ‚Ü¶ colimit (fiberInclusion (p := F) (S := d) ‚ãô diagram))‚ü©‚ü©‚ü©

-- Not an instance because `D` cannot be inferred.
theorem hasColimitOfShapes_of_fiber
    [‚àÄ d, HasColimitsOfShape (F.Fiber d) C] [HasCoproductsOfShape D C] :
    HasColimitsOfShape J C :=
  ‚ü®fun diagram ‚Ü¶ hasColimit_of_fiber F diagram‚ü©

end Limits

end CategoryTheory
