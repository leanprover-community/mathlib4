/-
Copyright (c) 2024 Jack McKoen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jack McKoen
-/
import Mathlib.CategoryTheory.Limits.Shapes.Equalizers

/-!
# Split Equalizers

We define what it means for a triple of morphisms `f g : X ‚ü∂ Y`, `Œπ : W ‚ü∂ X` to be a split
equalizer: there is a retraction `r` of `Œπ` and a retraction `t` of `g`, which additionally satisfy
`t ‚â´ f = r ‚â´ Œπ`.

In addition, we show that every split equalizer is an equalizer
(`CategoryTheory.IsSplitEqualizer.isEqualizer`) and absolute
(`CategoryTheory.IsSplitEqualizer.map`)

A pair `f g : X ‚ü∂ Y` has a split equalizer if there is a `W` and `Œπ : W ‚ü∂ X` making `f,g,Œπ` a
split equalizer.
A pair `f g : X ‚ü∂ Y` has a `G`-split equalizer if `G f, G g` has a split equalizer.

These definitions and constructions are useful in particular for the comonadicity theorems.

This file was adapted from `Mathlib.CategoryTheory.Limits.Shapes.SplitCoequalizer`. Please try
to keep them in sync.

-/


namespace CategoryTheory

universe v v‚ÇÇ u u‚ÇÇ

variable {C : Type u} [Category.{v} C]
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
variable (G : C ‚•§ D)
variable {X Y : C} (f g : X ‚ü∂ Y)

/-- A split equalizer diagram consists of morphisms

```
      Œπ   f
    W ‚Üí X ‚áâ Y
          g
```

satisfying `Œπ ‚â´ f = Œπ ‚â´ g` together with morphisms

```
      r   t
    W ‚Üê X ‚Üê Y
```

satisfying `Œπ ‚â´ r = ùüô W`, `g ‚â´ t = ùüô X` and `f ‚â´ t = r ‚â´ Œπ`.

The name "equalizer" is appropriate, since any split equalizer is a equalizer, see
`CategoryTheory.IsSplitEqualizer.isEqualizer`.
Split equalizers are also absolute, since a functor preserves all the structure above.
-/
structure IsSplitEqualizer {W : C} (Œπ : W ‚ü∂ X) where
  /-- A map from `X` to the equalizer -/
  leftRetraction : X ‚ü∂ W
  /-- A map in the opposite direction to `f` and `g` -/
  rightRetraction : Y ‚ü∂ X
  /-- Composition of `Œπ` with `f` and with `g` agree -/
  condition : Œπ ‚â´ f = Œπ ‚â´ g := by aesop_cat
  /-- `leftRetraction` splits `Œπ` -/
  Œπ_leftRetraction : Œπ ‚â´ leftRetraction = ùüô W := by aesop_cat
  /-- `rightRetraction` splits `g` -/
  bottom_rightRetraction : g ‚â´ rightRetraction = ùüô X := by aesop_cat
  /-- `f` composed with `rightRetraction` is `leftRetraction` composed with `Œπ` -/
  top_rightRetraction : f ‚â´ rightRetraction = leftRetraction ‚â´ Œπ := by aesop_cat

instance {X : C} : Inhabited (IsSplitEqualizer (ùüô X) (ùüô X) (ùüô X)) where
  default := { leftRetraction := ùüô X, rightRetraction := ùüô X }

open IsSplitEqualizer

attribute [reassoc] condition

attribute [reassoc (attr := simp)] Œπ_leftRetraction bottom_rightRetraction top_rightRetraction

variable {f g}

/-- Split equalizers are absolute: they are preserved by any functor. -/
@[simps]
def IsSplitEqualizer.map {W : C} {Œπ : W ‚ü∂ X} (q : IsSplitEqualizer f g Œπ) (F : C ‚•§ D) :
    IsSplitEqualizer (F.map f) (F.map g) (F.map Œπ) where
  leftRetraction := F.map q.leftRetraction
  rightRetraction := F.map q.rightRetraction
  condition := by rw [‚Üê F.map_comp, q.condition, F.map_comp]
  Œπ_leftRetraction := by rw [‚Üê F.map_comp, q.Œπ_leftRetraction, F.map_id]
  bottom_rightRetraction := by rw [‚Üê F.map_comp, q.bottom_rightRetraction, F.map_id]
  top_rightRetraction := by rw [‚Üê F.map_comp, q.top_rightRetraction, F.map_comp]

section

open Limits

/-- A split equalizer clearly induces a fork. -/
@[simps! pt]
def IsSplitEqualizer.asFork {W : C} {h : W ‚ü∂ X} (t : IsSplitEqualizer f g h) :
    Fork f g := Fork.ofŒπ h t.condition

@[simp]
theorem IsSplitEqualizer.asFork_Œπ {W : C} {h : W ‚ü∂ X} (t : IsSplitEqualizer f g h) :
    t.asFork.Œπ = h := rfl

/--
The fork induced by a split equalizer is an equalizer, justifying the name. In some cases it
is more convenient to show a given fork is an equalizer by showing it is split.
-/
def IsSplitEqualizer.isEqualizer {W : C} {h : W ‚ü∂ X} (t : IsSplitEqualizer f g h) :
    IsLimit t.asFork :=
  Fork.IsLimit.mk' _ fun s =>
    ‚ü® s.Œπ ‚â´ t.leftRetraction,
      by simp [- top_rightRetraction, ‚Üê t.top_rightRetraction, s.condition_assoc],
      fun hm => by simp [‚Üê hm] ‚ü©

end
variable (f g)

/--
The pair `f,g` is a cosplit pair if there is an `h : W ‚ü∂ X` so that `f, g, h` forms a split
equalizer in `C`.
-/
class HasSplitEqualizer : Prop where
  /-- There is some split equalizer -/
  splittable : ‚àÉ (W : C) (h : W ‚ü∂ X), Nonempty (IsSplitEqualizer f g h)

/--
The pair `f,g` is a `G`-cosplit pair if there is an `h : W ‚ü∂ G X` so that `G f, G g, h` forms a
split equalizer in `D`.
-/
abbrev Functor.IsCosplitPair : Prop :=
  HasSplitEqualizer (G.map f) (G.map g)

/-- Get the equalizer object from the typeclass `IsCosplitPair`. -/
noncomputable def HasSplitEqualizer.equalizerOfSplit [HasSplitEqualizer f g] : C :=
  (splittable (f := f) (g := g)).choose

/-- Get the equalizer morphism from the typeclass `IsCosplitPair`. -/
noncomputable def HasSplitEqualizer.equalizerŒπ [HasSplitEqualizer f g] :
    HasSplitEqualizer.equalizerOfSplit f g ‚ü∂ X :=
  (splittable (f := f) (g := g)).choose_spec.choose

/-- The equalizer morphism `equalizerŒπ` gives a split equalizer on `f,g`. -/
noncomputable def HasSplitEqualizer.isSplitEqualizer [HasSplitEqualizer f g] :
    IsSplitEqualizer f g (HasSplitEqualizer.equalizerŒπ f g) :=
  Classical.choice (splittable (f := f) (g := g)).choose_spec.choose_spec

/-- If `f, g` is cosplit, then `G f, G g` is cosplit. -/
instance map_is_cosplit_pair [HasSplitEqualizer f g] : HasSplitEqualizer (G.map f) (G.map g) where
  splittable :=
    ‚ü®_, _, ‚ü®IsSplitEqualizer.map (HasSplitEqualizer.isSplitEqualizer f g) _‚ü©‚ü©

namespace Limits

/-- If a pair has a split equalizer, it has a equalizer. -/
instance (priority := 1) hasEqualizer_of_hasSplitEqualizer [HasSplitEqualizer f g] :
    HasEqualizer f g :=
  HasLimit.mk ‚ü®_, (HasSplitEqualizer.isSplitEqualizer f g).isEqualizer‚ü©

end Limits

end CategoryTheory
