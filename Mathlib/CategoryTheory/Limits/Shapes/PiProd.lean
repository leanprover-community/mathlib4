/-
Copyright (c) 2024 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson
-/
import Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts
import Mathlib.CategoryTheory.Limits.Shapes.Products
/-!

# A product as a binary product

We write a product indexed by `I` as a binary product of the products indexed by a subset of `I`
and its complement.

-/

namespace CategoryTheory.Limits

variable {C I : Type*} [Category C] {X Y : I ‚Üí C}
  (f : (i : I) ‚Üí X i ‚ü∂ Y i) (P : I ‚Üí Prop) [‚àÄ i, Decidable (P i)]
  [HasProduct X] [HasProduct Y]
  [HasProduct (fun (i : {x : I // P x}) ‚Ü¶ X i.val)]
  [HasProduct (fun (i : {x : I // ¬¨ P x}) ‚Ü¶ X i.val)]
  [HasProduct (fun (i : {x : I // P x}) ‚Ü¶ Y i.val)]
  [HasProduct (fun (i : {x : I // ¬¨ P x}) ‚Ü¶ Y i.val)]

variable (X) in
/--
The projection maps of a product to the products indexed by a subset and its complement, as a
binary fan.
-/
noncomputable def Pi.binaryFanOfProp : BinaryFan (‚àè·∂ú (fun (i : {x : I // P x}) ‚Ü¶ X i.val))
    (‚àè·∂ú (fun (i : {x : I // ¬¨ P x}) ‚Ü¶ X i.val)) :=
  BinaryFan.mk (P := ‚àè·∂ú X) (Pi.map' Subtype.val fun _ ‚Ü¶ ùüô _)
    (Pi.map' Subtype.val fun _ ‚Ü¶ ùüô _)

variable (X) in
/--
A product indexed by `I` is a binary product of the products indexed by a subset of `I` and its
complement.
-/
noncomputable def Pi.binaryFanOfPropIsLimit : IsLimit (Pi.binaryFanOfProp X P) :=
  BinaryFan.isLimitMk
    (fun s ‚Ü¶ Pi.lift fun b ‚Ü¶ if h : P b then
      s.œÄ.app ‚ü®WalkingPair.left‚ü© ‚â´ Pi.œÄ (fun (i : {x : I // P x}) ‚Ü¶ X i.val) ‚ü®b, h‚ü© else
      s.œÄ.app ‚ü®WalkingPair.right‚ü© ‚â´ Pi.œÄ (fun (i : {x : I // ¬¨ P x}) ‚Ü¶ X i.val) ‚ü®b, h‚ü©)
    (by aesop) (by aesop)
    (fun _ _ h‚ÇÅ h‚ÇÇ ‚Ü¶ Pi.hom_ext _ _ fun b ‚Ü¶ by
      by_cases h : P b
      ¬∑ simp [‚Üê h‚ÇÅ, dif_pos h]
      ¬∑ simp [‚Üê h‚ÇÇ, dif_neg h])

lemma hasBinaryProduct_of_products : HasBinaryProduct (‚àè·∂ú (fun (i : {x : I // P x}) ‚Ü¶ X i.val))
    (‚àè·∂ú (fun (i : {x : I // ¬¨ P x}) ‚Ü¶ X i.val)) :=
  ‚ü®Pi.binaryFanOfProp X P, Pi.binaryFanOfPropIsLimit X P‚ü©

attribute [local instance] hasBinaryProduct_of_products

lemma Pi.map_eq_prod_map : Pi.map f =
    ((Pi.binaryFanOfPropIsLimit X P).conePointUniqueUpToIso (prodIsProd _ _)).hom ‚â´
      prod.map (Pi.map (fun (i : {x : I // P x}) ‚Ü¶ f i.val))
      (Pi.map (fun (i : {x : I // ¬¨ P x}) ‚Ü¶ f i.val)) ‚â´
        ((Pi.binaryFanOfPropIsLimit Y P).conePointUniqueUpToIso (prodIsProd _ _)).inv := by
  rw [‚Üê Category.assoc, Iso.eq_comp_inv]
  dsimp only [IsLimit.conePointUniqueUpToIso, binaryFanOfProp, prodIsProd]
  apply prod.hom_ext
  all_goals aesop_cat

end CategoryTheory.Limits
