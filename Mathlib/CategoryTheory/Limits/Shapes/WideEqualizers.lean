/-
Copyright (c) 2021 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import Mathlib.CategoryTheory.Limits.HasLimits
import Mathlib.CategoryTheory.Limits.Shapes.Equalizers

#align_import category_theory.limits.shapes.wide_equalizers from "leanprover-community/mathlib"@"70fd9563a21e7b963887c9360bd29b2393e6225a"

/-!
# Wide equalizers and wide coequalizers

This file defines wide (co)equalizers as special cases of (co)limits.

A wide equalizer for the family of morphisms `X ‚ü∂ Y` indexed by `J` is the categorical
generalization of the subobject `{a ‚àà A | ‚àÄ j‚ÇÅ j‚ÇÇ, f(j‚ÇÅ, a) = f(j‚ÇÇ, a)}`. Note that if `J` has
fewer than two morphisms this condition is trivial, so some lemmas and definitions assume `J` is
nonempty.

## Main definitions

* `WalkingParallelFamily` is the indexing category used for wide (co)equalizer diagrams
* `parallelFamily` is a functor from `WalkingParallelFamily` to our category `C`.
* a `Trident` is a cone over a parallel family.
  * there is really only one interesting morphism in a trident: the arrow from the vertex of the
    trident to the domain of f and g. It is called `Trident.Œπ`.
* a `wideEqualizer` is now just a `limit (parallelFamily f)`

Each of these has a dual.

## Main statements

* `wideEqualizer.Œπ_mono` states that every wideEqualizer map is a monomorphism

## Implementation notes
As with the other special shapes in the limits library, all the definitions here are given as
`abbreviation`s of the general statements for limits, so all the `simp` lemmas and theorems about
general limits can be used.

## References

* [F. Borceux, *Handbook of Categorical Algebra 1*][borceux-vol1]
-/


noncomputable section

namespace CategoryTheory.Limits

open CategoryTheory

universe w v u u‚ÇÇ

variable {J : Type w}

/-- The type of objects for the diagram indexing a wide (co)equalizer. -/
inductive WalkingParallelFamily (J : Type w) : Type w
  | zero : WalkingParallelFamily J
  | one : WalkingParallelFamily J
#align category_theory.limits.walking_parallel_family CategoryTheory.Limits.WalkingParallelFamily

open WalkingParallelFamily

instance : DecidableEq (WalkingParallelFamily J)
  | zero, zero => isTrue rfl
  | zero, one => isFalse fun t => WalkingParallelFamily.noConfusion t
  | one, zero => isFalse fun t => WalkingParallelFamily.noConfusion t
  | one, one => isTrue rfl

instance : Inhabited (WalkingParallelFamily J) :=
  ‚ü®zero‚ü©

/-- The type family of morphisms for the diagram indexing a wide (co)equalizer. -/
inductive WalkingParallelFamily.Hom (J : Type w) :
  WalkingParallelFamily J ‚Üí WalkingParallelFamily J ‚Üí Type w
  | id : ‚àÄ X : WalkingParallelFamily.{w} J, WalkingParallelFamily.Hom J X X
  | line : J ‚Üí WalkingParallelFamily.Hom J zero one
  deriving DecidableEq
#align
  category_theory.limits.walking_parallel_family.hom
  CategoryTheory.Limits.WalkingParallelFamily.Hom

/-- Satisfying the inhabited linter -/
instance (J : Type v) : Inhabited (WalkingParallelFamily.Hom J zero zero) where default := Hom.id _

open WalkingParallelFamily.Hom

/-- Composition of morphisms in the indexing diagram for wide (co)equalizers. -/
def WalkingParallelFamily.Hom.comp :
    ‚àÄ {X Y Z : WalkingParallelFamily J} (_ : WalkingParallelFamily.Hom J X Y)
      (_ : WalkingParallelFamily.Hom J Y Z), WalkingParallelFamily.Hom J X Z
  | _, _, _, id _, h => h
  | _, _, _, line j, id one => line j
#align
  category_theory.limits.walking_parallel_family.hom.comp
  CategoryTheory.Limits.WalkingParallelFamily.Hom.comp

-- attribute [local tidy] tactic.case_bash Porting note: no tidy, no local

instance WalkingParallelFamily.category : SmallCategory (WalkingParallelFamily J) where
  Hom := WalkingParallelFamily.Hom J
  id := WalkingParallelFamily.Hom.id
  comp := WalkingParallelFamily.Hom.comp
  assoc f g h := by cases f <;> cases g <;> cases h <;> aesop_cat
  comp_id f := by cases f <;> aesop_cat
#align
  category_theory.limits.walking_parallel_family.category
  CategoryTheory.Limits.WalkingParallelFamily.category

@[simp]
theorem WalkingParallelFamily.hom_id (X : WalkingParallelFamily J) :
    WalkingParallelFamily.Hom.id X = ùüô X :=
  rfl
#align
  category_theory.limits.walking_parallel_family.hom_id
  CategoryTheory.Limits.WalkingParallelFamily.hom_id

variable {C : Type u} [Category.{v} C]
variable {X Y : C} (f : J ‚Üí (X ‚ü∂ Y))

/-- `parallelFamily f` is the diagram in `C` consisting of the given family of morphisms, each with
common domain and codomain.
-/
def parallelFamily : WalkingParallelFamily J ‚•§ C where
  obj x := WalkingParallelFamily.casesOn x X Y
  map {x y} h :=
    match x, y, h with
    | _, _, Hom.id _ => ùüô _
    | _, _, line j => f j
  map_comp := by
    rintro _ _ _ ‚ü®‚ü© ‚ü®‚ü© <;>
      ¬∑ aesop_cat
#align category_theory.limits.parallel_family CategoryTheory.Limits.parallelFamily

@[simp]
theorem parallelFamily_obj_zero : (parallelFamily f).obj zero = X :=
  rfl
#align category_theory.limits.parallel_family_obj_zero CategoryTheory.Limits.parallelFamily_obj_zero

@[simp]
theorem parallelFamily_obj_one : (parallelFamily f).obj one = Y :=
  rfl
#align category_theory.limits.parallel_family_obj_one CategoryTheory.Limits.parallelFamily_obj_one

@[simp]
theorem parallelFamily_map_left {j : J} : (parallelFamily f).map (line j) = f j :=
  rfl
#align
  category_theory.limits.parallel_family_map_left
  CategoryTheory.Limits.parallelFamily_map_left

/-- Every functor indexing a wide (co)equalizer is naturally isomorphic (actually, equal) to a
    `parallelFamily` -/
@[simps!]
def diagramIsoParallelFamily (F : WalkingParallelFamily J ‚•§ C) :
    F ‚âÖ parallelFamily fun j => F.map (line j) :=
  NatIso.ofComponents (fun j => eqToIso <| by cases j <;> aesop_cat) <| by
    rintro _ _ (_|_) <;> aesop_cat
#align
  category_theory.limits.diagram_iso_parallel_family
  CategoryTheory.Limits.diagramIsoParallelFamily

/-- `WalkingParallelPair` as a category is equivalent to a special case of
`WalkingParallelFamily`.  -/
@[simps!]
def walkingParallelFamilyEquivWalkingParallelPair :
    WalkingParallelFamily.{w} (ULift Bool) ‚âå WalkingParallelPair where
  functor :=
    parallelFamily fun p => cond p.down WalkingParallelPairHom.left WalkingParallelPairHom.right
  inverse := parallelPair (line (ULift.up true)) (line (ULift.up false))
  unitIso := NatIso.ofComponents (fun X => eqToIso (by cases X <;> rfl)) (by
    rintro _ _ (_|‚ü®_|_‚ü©) <;> aesop_cat)
  counitIso := NatIso.ofComponents (fun X => eqToIso (by cases X <;> rfl)) (by
    rintro _ _ (_|_|_) <;> aesop_cat)
  functor_unitIso_comp := by rintro (_|_) <;> aesop_cat
#align
  category_theory.limits.walking_parallel_family_equiv_walking_parallel_pair
  CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair

/-- A trident on `f` is just a `Cone (parallelFamily f)`. -/
abbrev Trident :=
  Cone (parallelFamily f)
#align category_theory.limits.trident CategoryTheory.Limits.Trident

/-- A cotrident on `f` and `g` is just a `Cocone (parallelFamily f)`. -/
abbrev Cotrident :=
  Cocone (parallelFamily f)
#align category_theory.limits.cotrident CategoryTheory.Limits.Cotrident

variable {f}

/-- A trident `t` on the parallel family `f : J ‚Üí (X ‚ü∂ Y)` consists of two morphisms
    `t.œÄ.app zero : t.X ‚ü∂ X` and `t.œÄ.app one : t.X ‚ü∂ Y`. Of these, only the first one is
    interesting, and we give it the shorter name `Trident.Œπ t`. -/
abbrev Trident.Œπ (t : Trident f) :=
  t.œÄ.app zero
#align category_theory.limits.trident.Œπ CategoryTheory.Limits.Trident.Œπ

/-- A cotrident `t` on the parallel family `f : J ‚Üí (X ‚ü∂ Y)` consists of two morphisms
    `t.Œπ.app zero : X ‚ü∂ t.X` and `t.Œπ.app one : Y ‚ü∂ t.X`. Of these, only the second one is
    interesting, and we give it the shorter name `Cotrident.œÄ t`. -/
abbrev Cotrident.œÄ (t : Cotrident f) :=
  t.Œπ.app one
#align category_theory.limits.cotrident.œÄ CategoryTheory.Limits.Cotrident.œÄ

@[simp]
theorem Trident.Œπ_eq_app_zero (t : Trident f) : t.Œπ = t.œÄ.app zero :=
  rfl
#align category_theory.limits.trident.Œπ_eq_app_zero CategoryTheory.Limits.Trident.Œπ_eq_app_zero

@[simp]
theorem Cotrident.œÄ_eq_app_one (t : Cotrident f) : t.œÄ = t.Œπ.app one :=
  rfl
#align category_theory.limits.cotrident.œÄ_eq_app_one CategoryTheory.Limits.Cotrident.œÄ_eq_app_one

@[reassoc (attr := simp)]
theorem Trident.app_zero (s : Trident f) (j : J) : s.œÄ.app zero ‚â´ f j = s.œÄ.app one := by
  rw [‚Üê s.w (line j), parallelFamily_map_left]
#align category_theory.limits.trident.app_zero CategoryTheory.Limits.Trident.app_zero

@[reassoc (attr := simp)]
theorem Cotrident.app_one (s : Cotrident f) (j : J) : f j ‚â´ s.Œπ.app one = s.Œπ.app zero := by
  rw [‚Üê s.w (line j), parallelFamily_map_left]
#align category_theory.limits.cotrident.app_one CategoryTheory.Limits.Cotrident.app_one

/-- A trident on `f : J ‚Üí (X ‚ü∂ Y)` is determined by the morphism `Œπ : P ‚ü∂ X` satisfying
`‚àÄ j‚ÇÅ j‚ÇÇ, Œπ ‚â´ f j‚ÇÅ = Œπ ‚â´ f j‚ÇÇ`.
-/
@[simps]
def Trident.ofŒπ [Nonempty J] {P : C} (Œπ : P ‚ü∂ X) (w : ‚àÄ j‚ÇÅ j‚ÇÇ, Œπ ‚â´ f j‚ÇÅ = Œπ ‚â´ f j‚ÇÇ) : Trident f
    where
  pt := P
  œÄ :=
    { app := fun X => WalkingParallelFamily.casesOn X Œπ (Œπ ‚â´ f (Classical.arbitrary J))
      naturality := fun i j f => by
        dsimp
        cases' f with _ k
        ¬∑ simp
        ¬∑ simp [w (Classical.arbitrary J) k] }
#align category_theory.limits.trident.of_Œπ CategoryTheory.Limits.Trident.ofŒπ

/-- A cotrident on `f : J ‚Üí (X ‚ü∂ Y)` is determined by the morphism `œÄ : Y ‚ü∂ P` satisfying
`‚àÄ j‚ÇÅ j‚ÇÇ, f j‚ÇÅ ‚â´ œÄ = f j‚ÇÇ ‚â´ œÄ`.
-/
@[simps]
def Cotrident.ofœÄ [Nonempty J] {P : C} (œÄ : Y ‚ü∂ P) (w : ‚àÄ j‚ÇÅ j‚ÇÇ, f j‚ÇÅ ‚â´ œÄ = f j‚ÇÇ ‚â´ œÄ) :
    Cotrident f where
  pt := P
  Œπ :=
    { app := fun X => WalkingParallelFamily.casesOn X (f (Classical.arbitrary J) ‚â´ œÄ) œÄ
      naturality := fun i j f => by
        dsimp
        cases' f with _ k
        ¬∑ simp
        ¬∑ simp [w (Classical.arbitrary J) k] }
#align category_theory.limits.cotrident.of_œÄ CategoryTheory.Limits.Cotrident.ofœÄ

-- See note [dsimp, simp]
theorem Trident.Œπ_ofŒπ [Nonempty J] {P : C} (Œπ : P ‚ü∂ X) (w : ‚àÄ j‚ÇÅ j‚ÇÇ, Œπ ‚â´ f j‚ÇÅ = Œπ ‚â´ f j‚ÇÇ) :
    (Trident.ofŒπ Œπ w).Œπ = Œπ :=
  rfl
#align category_theory.limits.trident.Œπ_of_Œπ CategoryTheory.Limits.Trident.Œπ_ofŒπ

theorem Cotrident.œÄ_ofœÄ [Nonempty J] {P : C} (œÄ : Y ‚ü∂ P) (w : ‚àÄ j‚ÇÅ j‚ÇÇ, f j‚ÇÅ ‚â´ œÄ = f j‚ÇÇ ‚â´ œÄ) :
    (Cotrident.ofœÄ œÄ w).œÄ = œÄ :=
  rfl
#align category_theory.limits.cotrident.œÄ_of_œÄ CategoryTheory.Limits.Cotrident.œÄ_ofœÄ

@[reassoc]
theorem Trident.condition (j‚ÇÅ j‚ÇÇ : J) (t : Trident f) : t.Œπ ‚â´ f j‚ÇÅ = t.Œπ ‚â´ f j‚ÇÇ := by
  rw [t.app_zero, t.app_zero]
#align category_theory.limits.trident.condition CategoryTheory.Limits.Trident.condition

@[reassoc]
theorem Cotrident.condition (j‚ÇÅ j‚ÇÇ : J) (t : Cotrident f) : f j‚ÇÅ ‚â´ t.œÄ = f j‚ÇÇ ‚â´ t.œÄ := by
  rw [t.app_one, t.app_one]
#align category_theory.limits.cotrident.condition CategoryTheory.Limits.Cotrident.condition

/-- To check whether two maps are equalized by both maps of a trident, it suffices to check it for
the first map -/
theorem Trident.equalizer_ext [Nonempty J] (s : Trident f) {W : C} {k l : W ‚ü∂ s.pt}
    (h : k ‚â´ s.Œπ = l ‚â´ s.Œπ) : ‚àÄ j : WalkingParallelFamily J, k ‚â´ s.œÄ.app j = l ‚â´ s.œÄ.app j
  | zero => h
  | one => by rw [‚Üê s.app_zero (Classical.arbitrary J), reassoc_of% h]
#align category_theory.limits.trident.equalizer_ext CategoryTheory.Limits.Trident.equalizer_ext

/-- To check whether two maps are coequalized by both maps of a cotrident, it suffices to check it
for the second map -/
theorem Cotrident.coequalizer_ext [Nonempty J] (s : Cotrident f) {W : C} {k l : s.pt ‚ü∂ W}
    (h : s.œÄ ‚â´ k = s.œÄ ‚â´ l) : ‚àÄ j : WalkingParallelFamily J, s.Œπ.app j ‚â´ k = s.Œπ.app j ‚â´ l
  | zero => by rw [‚Üê s.app_one (Classical.arbitrary J), Category.assoc, Category.assoc, h]
  | one => h
#align
  category_theory.limits.cotrident.coequalizer_ext
  CategoryTheory.Limits.Cotrident.coequalizer_ext

theorem Trident.IsLimit.hom_ext [Nonempty J] {s : Trident f} (hs : IsLimit s) {W : C}
    {k l : W ‚ü∂ s.pt} (h : k ‚â´ s.Œπ = l ‚â´ s.Œπ) : k = l :=
  hs.hom_ext <| Trident.equalizer_ext _ h
#align category_theory.limits.trident.is_limit.hom_ext CategoryTheory.Limits.Trident.IsLimit.hom_ext

theorem Cotrident.IsColimit.hom_ext [Nonempty J] {s : Cotrident f} (hs : IsColimit s) {W : C}
    {k l : s.pt ‚ü∂ W} (h : s.œÄ ‚â´ k = s.œÄ ‚â´ l) : k = l :=
  hs.hom_ext <| Cotrident.coequalizer_ext _ h
#align
  category_theory.limits.cotrident.is_colimit.hom_ext
  CategoryTheory.Limits.Cotrident.IsColimit.hom_ext

/-- If `s` is a limit trident over `f`, then a morphism `k : W ‚ü∂ X` satisfying
    `‚àÄ j‚ÇÅ j‚ÇÇ, k ‚â´ f j‚ÇÅ = k ‚â´ f j‚ÇÇ` induces a morphism `l : W ‚ü∂ s.X` such that
    `l ‚â´ Trident.Œπ s = k`. -/
def Trident.IsLimit.lift' [Nonempty J] {s : Trident f} (hs : IsLimit s) {W : C} (k : W ‚ü∂ X)
    (h : ‚àÄ j‚ÇÅ j‚ÇÇ, k ‚â´ f j‚ÇÅ = k ‚â´ f j‚ÇÇ) : { l : W ‚ü∂ s.pt // l ‚â´ Trident.Œπ s = k } :=
  ‚ü®hs.lift <| Trident.ofŒπ _ h, hs.fac _ _‚ü©
#align category_theory.limits.trident.is_limit.lift' CategoryTheory.Limits.Trident.IsLimit.lift'

/-- If `s` is a colimit cotrident over `f`, then a morphism `k : Y ‚ü∂ W` satisfying
    `‚àÄ j‚ÇÅ j‚ÇÇ, f j‚ÇÅ ‚â´ k = f j‚ÇÇ ‚â´ k` induces a morphism `l : s.X ‚ü∂ W` such that
    `Cotrident.œÄ s ‚â´ l = k`. -/
def Cotrident.IsColimit.desc' [Nonempty J] {s : Cotrident f} (hs : IsColimit s) {W : C} (k : Y ‚ü∂ W)
    (h : ‚àÄ j‚ÇÅ j‚ÇÇ, f j‚ÇÅ ‚â´ k = f j‚ÇÇ ‚â´ k) : { l : s.pt ‚ü∂ W // Cotrident.œÄ s ‚â´ l = k } :=
  ‚ü®hs.desc <| Cotrident.ofœÄ _ h, hs.fac _ _‚ü©
#align
  category_theory.limits.cotrident.is_colimit.desc'
  CategoryTheory.Limits.Cotrident.IsColimit.desc'

/-- This is a slightly more convenient method to verify that a trident is a limit cone. It
    only asks for a proof of facts that carry any mathematical content -/
def Trident.IsLimit.mk [Nonempty J] (t : Trident f) (lift : ‚àÄ s : Trident f, s.pt ‚ü∂ t.pt)
    (fac : ‚àÄ s : Trident f, lift s ‚â´ t.Œπ = s.Œπ)
    (uniq :
      ‚àÄ (s : Trident f) (m : s.pt ‚ü∂ t.pt)
        (_ : ‚àÄ j : WalkingParallelFamily J, m ‚â´ t.œÄ.app j = s.œÄ.app j), m = lift s) :
    IsLimit t :=
  { lift
    fac := fun s j =>
      WalkingParallelFamily.casesOn j (fac s)
        (by rw [‚Üê t.w (line (Classical.arbitrary J)), reassoc_of% fac, s.w])
    uniq := uniq }
#align category_theory.limits.trident.is_limit.mk CategoryTheory.Limits.Trident.IsLimit.mk

/-- This is another convenient method to verify that a trident is a limit cone. It
    only asks for a proof of facts that carry any mathematical content, and allows access to the
    same `s` for all parts. -/
def Trident.IsLimit.mk' [Nonempty J] (t : Trident f)
    (create : ‚àÄ s : Trident f, { l // l ‚â´ t.Œπ = s.Œπ ‚àß ‚àÄ {m}, m ‚â´ t.Œπ = s.Œπ ‚Üí m = l }) :
    IsLimit t :=
  Trident.IsLimit.mk t (fun s => (create s).1) (fun s => (create s).2.1) fun s _ w =>
    (create s).2.2 (w zero)
#align category_theory.limits.trident.is_limit.mk' CategoryTheory.Limits.Trident.IsLimit.mk'

/-- This is a slightly more convenient method to verify that a cotrident is a colimit cocone. It
    only asks for a proof of facts that carry any mathematical content -/
def Cotrident.IsColimit.mk [Nonempty J] (t : Cotrident f) (desc : ‚àÄ s : Cotrident f, t.pt ‚ü∂ s.pt)
    (fac : ‚àÄ s : Cotrident f, t.œÄ ‚â´ desc s = s.œÄ)
    (uniq :
      ‚àÄ (s : Cotrident f) (m : t.pt ‚ü∂ s.pt)
        (_ : ‚àÄ j : WalkingParallelFamily J, t.Œπ.app j ‚â´ m = s.Œπ.app j), m = desc s) :
    IsColimit t :=
  { desc
    fac := fun s j =>
      WalkingParallelFamily.casesOn j (by rw [‚Üê t.w_assoc (line (Classical.arbitrary J)), fac, s.w])
        (fac s)
    uniq := uniq }
#align category_theory.limits.cotrident.is_colimit.mk CategoryTheory.Limits.Cotrident.IsColimit.mk

/-- This is another convenient method to verify that a cotrident is a colimit cocone. It
    only asks for a proof of facts that carry any mathematical content, and allows access to the
    same `s` for all parts. -/
def Cotrident.IsColimit.mk' [Nonempty J] (t : Cotrident f)
    (create :
      ‚àÄ s : Cotrident f, { l : t.pt ‚ü∂ s.pt // t.œÄ ‚â´ l = s.œÄ ‚àß ‚àÄ {m}, t.œÄ ‚â´ m = s.œÄ ‚Üí m = l }) :
    IsColimit t :=
  Cotrident.IsColimit.mk t (fun s => (create s).1) (fun s => (create s).2.1) fun s _ w =>
    (create s).2.2 (w one)
#align category_theory.limits.cotrident.is_colimit.mk' CategoryTheory.Limits.Cotrident.IsColimit.mk'

/--
Given a limit cone for the family `f : J ‚Üí (X ‚ü∂ Y)`, for any `Z`, morphisms from `Z` to its point
are in bijection with morphisms `h : Z ‚ü∂ X` such that `‚àÄ j‚ÇÅ j‚ÇÇ, h ‚â´ f j‚ÇÅ = h ‚â´ f j‚ÇÇ`.
Further, this bijection is natural in `Z`: see `Trident.Limits.homIso_natural`.
-/
@[simps]
def Trident.IsLimit.homIso [Nonempty J] {t : Trident f} (ht : IsLimit t) (Z : C) :
    (Z ‚ü∂ t.pt) ‚âÉ { h : Z ‚ü∂ X // ‚àÄ j‚ÇÅ j‚ÇÇ, h ‚â´ f j‚ÇÅ = h ‚â´ f j‚ÇÇ } where
  toFun k := ‚ü®k ‚â´ t.Œπ, by simp‚ü©
  invFun h := (Trident.IsLimit.lift' ht _ h.prop).1
  left_inv k := Trident.IsLimit.hom_ext ht (Trident.IsLimit.lift' _ _ _).prop
  right_inv h := Subtype.ext (Trident.IsLimit.lift' ht _ _).prop
#align category_theory.limits.trident.is_limit.hom_iso CategoryTheory.Limits.Trident.IsLimit.homIso

/-- The bijection of `Trident.IsLimit.homIso` is natural in `Z`. -/
theorem Trident.IsLimit.homIso_natural [Nonempty J] {t : Trident f} (ht : IsLimit t) {Z Z' : C}
    (q : Z' ‚ü∂ Z) (k : Z ‚ü∂ t.pt) :
    (Trident.IsLimit.homIso ht _ (q ‚â´ k) : Z' ‚ü∂ X) =
      q ‚â´ (Trident.IsLimit.homIso ht _ k : Z ‚ü∂ X) :=
  Category.assoc _ _ _
#align
  category_theory.limits.trident.is_limit.hom_iso_natural
  CategoryTheory.Limits.Trident.IsLimit.homIso_natural

/-- Given a colimit cocone for the family `f : J ‚Üí (X ‚ü∂ Y)`, for any `Z`, morphisms from the cocone
point to `Z` are in bijection with morphisms `h : Z ‚ü∂ X` such that
`‚àÄ j‚ÇÅ j‚ÇÇ, f j‚ÇÅ ‚â´ h = f j‚ÇÇ ‚â´ h`.  Further, this bijection is natural in `Z`: see
`Cotrident.IsColimit.homIso_natural`.
-/
@[simps]
def Cotrident.IsColimit.homIso [Nonempty J] {t : Cotrident f} (ht : IsColimit t) (Z : C) :
    (t.pt ‚ü∂ Z) ‚âÉ { h : Y ‚ü∂ Z // ‚àÄ j‚ÇÅ j‚ÇÇ, f j‚ÇÅ ‚â´ h = f j‚ÇÇ ‚â´ h } where
  toFun k := ‚ü®t.œÄ ‚â´ k, by simp‚ü©
  invFun h := (Cotrident.IsColimit.desc' ht _ h.prop).1
  left_inv k := Cotrident.IsColimit.hom_ext ht (Cotrident.IsColimit.desc' _ _ _).prop
  right_inv h := Subtype.ext (Cotrident.IsColimit.desc' ht _ _).prop
#align
  category_theory.limits.cotrident.is_colimit.hom_iso
  CategoryTheory.Limits.Cotrident.IsColimit.homIso

/-- The bijection of `Cotrident.IsColimit.homIso` is natural in `Z`. -/
theorem Cotrident.IsColimit.homIso_natural [Nonempty J] {t : Cotrident f} {Z Z' : C} (q : Z ‚ü∂ Z')
    (ht : IsColimit t) (k : t.pt ‚ü∂ Z) :
    (Cotrident.IsColimit.homIso ht _ (k ‚â´ q) : Y ‚ü∂ Z') =
      (Cotrident.IsColimit.homIso ht _ k : Y ‚ü∂ Z) ‚â´ q :=
  (Category.assoc _ _ _).symm
#align
  category_theory.limits.cotrident.is_colimit.hom_iso_natural
  CategoryTheory.Limits.Cotrident.IsColimit.homIso_natural

/-- This is a helper construction that can be useful when verifying that a category has certain wide
    equalizers. Given `F : WalkingParallelFamily ‚•§ C`, which is really the same as
    `parallelFamily (fun j ‚Ü¶ F.map (line j))`, and a trident on `fun j ‚Ü¶ F.map (line j)`,
    we get a cone on `F`.

    If you're thinking about using this, have a look at
    `hasWideEqualizers_of_hasLimit_parallelFamily`, which you may find to be an easier way of
    achieving your goal. -/
def Cone.ofTrident {F : WalkingParallelFamily J ‚•§ C} (t : Trident fun j => F.map (line j)) : Cone F
    where
  pt := t.pt
  œÄ :=
    { app := fun X => t.œÄ.app X ‚â´ eqToHom (by cases X <;> aesop_cat)
      naturality := fun j j' g => by cases g <;> aesop_cat }
#align category_theory.limits.cone.of_trident CategoryTheory.Limits.Cone.ofTrident

/-- This is a helper construction that can be useful when verifying that a category has all
    coequalizers. Given `F : WalkingParallelFamily ‚•§ C`, which is really the same as
    `parallelFamily (fun j ‚Ü¶ F.map (line j))`, and a cotrident on `fun j ‚Ü¶ F.map (line j)` we get a
    cocone on `F`.

    If you're thinking about using this, have a look at
    `hasWideCoequalizers_of_hasColimit_parallelFamily`, which you may find to be an easier way
    of achieving your goal. -/
def Cocone.ofCotrident {F : WalkingParallelFamily J ‚•§ C} (t : Cotrident fun j => F.map (line j)) :
    Cocone F where
  pt := t.pt
  Œπ :=
    { app := fun X => eqToHom (by cases X <;> aesop_cat) ‚â´ t.Œπ.app X
      naturality := fun j j' g => by cases g <;> dsimp <;> simp [Cotrident.app_one t] }
#align category_theory.limits.cocone.of_cotrident CategoryTheory.Limits.Cocone.ofCotrident

@[simp]
theorem Cone.ofTrident_œÄ {F : WalkingParallelFamily J ‚•§ C} (t : Trident fun j => F.map (line j))
    (j) : (Cone.ofTrident t).œÄ.app j = t.œÄ.app j ‚â´ eqToHom (by cases j <;> aesop_cat) :=
  rfl
#align category_theory.limits.cone.of_trident_œÄ CategoryTheory.Limits.Cone.ofTrident_œÄ

@[simp]
theorem Cocone.ofCotrident_Œπ {F : WalkingParallelFamily J ‚•§ C}
    (t : Cotrident fun j => F.map (line j)) (j) :
    (Cocone.ofCotrident t).Œπ.app j = eqToHom (by cases j <;> aesop_cat) ‚â´ t.Œπ.app j :=
  rfl
#align category_theory.limits.cocone.of_cotrident_Œπ CategoryTheory.Limits.Cocone.ofCotrident_Œπ

/-- Given `F : WalkingParallelFamily ‚•§ C`, which is really the same as
    `parallelFamily (fun j ‚Ü¶ F.map (line j))` and a cone on `F`, we get a trident on
    `fun j ‚Ü¶ F.map (line j)`. -/
def Trident.ofCone {F : WalkingParallelFamily J ‚•§ C} (t : Cone F) : Trident fun j => F.map (line j)
    where
  pt := t.pt
  œÄ :=
    { app := fun X => t.œÄ.app X ‚â´ eqToHom (by cases X <;> aesop_cat)
      naturality := by rintro _ _ (_|_) <;> aesop_cat }
#align category_theory.limits.trident.of_cone CategoryTheory.Limits.Trident.ofCone

/-- Given `F : WalkingParallelFamily ‚•§ C`, which is really the same as
    `parallelFamily (F.map left) (F.map right)` and a cocone on `F`, we get a cotrident on
    `fun j ‚Ü¶ F.map (line j)`. -/
def Cotrident.ofCocone {F : WalkingParallelFamily J ‚•§ C} (t : Cocone F) :
    Cotrident fun j => F.map (line j) where
  pt := t.pt
  Œπ :=
    { app := fun X => eqToHom (by cases X <;> aesop_cat) ‚â´ t.Œπ.app X
      naturality := by rintro _ _ (_|_) <;> aesop_cat }
#align category_theory.limits.cotrident.of_cocone CategoryTheory.Limits.Cotrident.ofCocone

@[simp]
theorem Trident.ofCone_œÄ {F : WalkingParallelFamily J ‚•§ C} (t : Cone F) (j) :
    (Trident.ofCone t).œÄ.app j = t.œÄ.app j ‚â´ eqToHom (by cases j <;> aesop_cat) :=
  rfl
#align category_theory.limits.trident.of_cone_œÄ CategoryTheory.Limits.Trident.ofCone_œÄ

@[simp]
theorem Cotrident.ofCocone_Œπ {F : WalkingParallelFamily J ‚•§ C} (t : Cocone F) (j) :
    (Cotrident.ofCocone t).Œπ.app j = eqToHom (by cases j <;> aesop_cat) ‚â´ t.Œπ.app j :=
  rfl
#align category_theory.limits.cotrident.of_cocone_Œπ CategoryTheory.Limits.Cotrident.ofCocone_Œπ

/-- Helper function for constructing morphisms between wide equalizer tridents.
-/
@[simps]
def Trident.mkHom [Nonempty J] {s t : Trident f} (k : s.pt ‚ü∂ t.pt)
    (w : k ‚â´ t.Œπ = s.Œπ := by aesop_cat) : s ‚ü∂ t where
  hom := k
  w := by
    rintro ‚ü®_ | _‚ü©
    ¬∑ exact w
    ¬∑ simpa using w =‚â´ f (Classical.arbitrary J)
#align category_theory.limits.trident.mk_hom CategoryTheory.Limits.Trident.mkHom

/-- To construct an isomorphism between tridents,
it suffices to give an isomorphism between the cone points
and check that it commutes with the `Œπ` morphisms.
-/
@[simps]
def Trident.ext [Nonempty J] {s t : Trident f} (i : s.pt ‚âÖ t.pt)
    (w : i.hom ‚â´ t.Œπ = s.Œπ := by aesop_cat) : s ‚âÖ t where
  hom := Trident.mkHom i.hom w
  inv := Trident.mkHom i.inv (by rw [‚Üê w, Iso.inv_hom_id_assoc])
#align category_theory.limits.trident.ext CategoryTheory.Limits.Trident.ext

/-- Helper function for constructing morphisms between coequalizer cotridents.
-/
@[simps]
def Cotrident.mkHom [Nonempty J] {s t : Cotrident f} (k : s.pt ‚ü∂ t.pt)
    (w : s.œÄ ‚â´ k = t.œÄ := by aesop_cat) : s ‚ü∂ t where
  hom := k
  w := by
    rintro ‚ü®_ | _‚ü©
    ¬∑ simpa using f (Classical.arbitrary J) ‚â´= w
    ¬∑ exact w
#align category_theory.limits.cotrident.mk_hom CategoryTheory.Limits.Cotrident.mkHom

/-- To construct an isomorphism between cotridents,
it suffices to give an isomorphism between the cocone points
and check that it commutes with the `œÄ` morphisms.
-/
def Cotrident.ext [Nonempty J] {s t : Cotrident f} (i : s.pt ‚âÖ t.pt)
    (w : s.œÄ ‚â´ i.hom = t.œÄ := by aesop_cat) : s ‚âÖ t where
  hom := Cotrident.mkHom i.hom w
  inv := Cotrident.mkHom i.inv (by rw [Iso.comp_inv_eq, w])
#align category_theory.limits.cotrident.ext CategoryTheory.Limits.Cotrident.ext

variable (f)

section

/--
`HasWideEqualizer f` represents a particular choice of limiting cone for the parallel family of
morphisms `f`.
-/
abbrev HasWideEqualizer :=
  HasLimit (parallelFamily f)
#align category_theory.limits.has_wide_equalizer CategoryTheory.Limits.HasWideEqualizer

variable [HasWideEqualizer f]

/-- If a wide equalizer of `f` exists, we can access an arbitrary choice of such by
    saying `wideEqualizer f`. -/
abbrev wideEqualizer : C :=
  limit (parallelFamily f)
#align category_theory.limits.wide_equalizer CategoryTheory.Limits.wideEqualizer

/-- If a wide equalizer of `f` exists, we can access the inclusion `wideEqualizer f ‚ü∂ X` by
    saying `wideEqualizer.Œπ f`. -/
abbrev wideEqualizer.Œπ : wideEqualizer f ‚ü∂ X :=
  limit.œÄ (parallelFamily f) zero
#align category_theory.limits.wide_equalizer.Œπ CategoryTheory.Limits.wideEqualizer.Œπ

/-- A wide equalizer cone for a parallel family `f`.
-/
abbrev wideEqualizer.trident : Trident f :=
  limit.cone (parallelFamily f)
#align category_theory.limits.wide_equalizer.trident CategoryTheory.Limits.wideEqualizer.trident

@[simp]
theorem wideEqualizer.trident_Œπ : (wideEqualizer.trident f).Œπ = wideEqualizer.Œπ f :=
  rfl
#align category_theory.limits.wide_equalizer.trident_Œπ CategoryTheory.Limits.wideEqualizer.trident_Œπ

@[simp 1100]
theorem wideEqualizer.trident_œÄ_app_zero :
    (wideEqualizer.trident f).œÄ.app zero = wideEqualizer.Œπ f :=
  rfl
#align
  category_theory.limits.wide_equalizer.trident_œÄ_app_zero
  CategoryTheory.Limits.wideEqualizer.trident_œÄ_app_zero

@[reassoc]
theorem wideEqualizer.condition (j‚ÇÅ j‚ÇÇ : J) : wideEqualizer.Œπ f ‚â´ f j‚ÇÅ = wideEqualizer.Œπ f ‚â´ f j‚ÇÇ :=
  Trident.condition j‚ÇÅ j‚ÇÇ <| limit.cone <| parallelFamily f
#align category_theory.limits.wide_equalizer.condition CategoryTheory.Limits.wideEqualizer.condition

/-- The wideEqualizer built from `wideEqualizer.Œπ f` is limiting. -/
def wideEqualizerIsWideEqualizer [Nonempty J] :
    IsLimit (Trident.ofŒπ (wideEqualizer.Œπ f) (wideEqualizer.condition f)) :=
  IsLimit.ofIsoLimit (limit.isLimit _) (Trident.ext (Iso.refl _))
#align
  category_theory.limits.wide_equalizer_is_wide_equalizer
  CategoryTheory.Limits.wideEqualizerIsWideEqualizer

variable {f}

/-- A morphism `k : W ‚ü∂ X` satisfying `‚àÄ j‚ÇÅ j‚ÇÇ, k ‚â´ f j‚ÇÅ = k ‚â´ f j‚ÇÇ` factors through the
    wide equalizer of `f` via `wideEqualizer.lift : W ‚ü∂ wideEqualizer f`. -/
abbrev wideEqualizer.lift [Nonempty J] {W : C} (k : W ‚ü∂ X) (h : ‚àÄ j‚ÇÅ j‚ÇÇ, k ‚â´ f j‚ÇÅ = k ‚â´ f j‚ÇÇ) :
    W ‚ü∂ wideEqualizer f :=
  limit.lift (parallelFamily f) (Trident.ofŒπ k h)
#align category_theory.limits.wide_equalizer.lift CategoryTheory.Limits.wideEqualizer.lift

@[reassoc (attr := simp 1100)]
theorem wideEqualizer.lift_Œπ [Nonempty J] {W : C} (k : W ‚ü∂ X)
    (h : ‚àÄ j‚ÇÅ j‚ÇÇ, k ‚â´ f j‚ÇÅ = k ‚â´ f j‚ÇÇ) :
    wideEqualizer.lift k h ‚â´ wideEqualizer.Œπ f = k :=
  limit.lift_œÄ _ _
#align category_theory.limits.wide_equalizer.lift_Œπ CategoryTheory.Limits.wideEqualizer.lift_Œπ

/-- A morphism `k : W ‚ü∂ X` satisfying `‚àÄ j‚ÇÅ j‚ÇÇ, k ‚â´ f j‚ÇÅ = k ‚â´ f j‚ÇÇ` induces a morphism
    `l : W ‚ü∂ wideEqualizer f` satisfying `l ‚â´ wideEqualizer.Œπ f = k`. -/
def wideEqualizer.lift' [Nonempty J] {W : C} (k : W ‚ü∂ X) (h : ‚àÄ j‚ÇÅ j‚ÇÇ, k ‚â´ f j‚ÇÅ = k ‚â´ f j‚ÇÇ) :
    { l : W ‚ü∂ wideEqualizer f // l ‚â´ wideEqualizer.Œπ f = k } :=
  ‚ü®wideEqualizer.lift k h, wideEqualizer.lift_Œπ _ _‚ü©
#align category_theory.limits.wide_equalizer.lift' CategoryTheory.Limits.wideEqualizer.lift'

/-- Two maps into a wide equalizer are equal if they are equal when composed with the wide
    equalizer map. -/
@[ext]
theorem wideEqualizer.hom_ext [Nonempty J] {W : C} {k l : W ‚ü∂ wideEqualizer f}
    (h : k ‚â´ wideEqualizer.Œπ f = l ‚â´ wideEqualizer.Œπ f) : k = l :=
  Trident.IsLimit.hom_ext (limit.isLimit _) h
#align category_theory.limits.wide_equalizer.hom_ext CategoryTheory.Limits.wideEqualizer.hom_ext

/-- A wide equalizer morphism is a monomorphism -/
instance wideEqualizer.Œπ_mono [Nonempty J] : Mono (wideEqualizer.Œπ f) where
  right_cancellation _ _ w := wideEqualizer.hom_ext w
#align category_theory.limits.wide_equalizer.Œπ_mono CategoryTheory.Limits.wideEqualizer.Œπ_mono

end

section

variable {f}

/-- The wide equalizer morphism in any limit cone is a monomorphism. -/
theorem mono_of_isLimit_parallelFamily [Nonempty J] {c : Cone (parallelFamily f)} (i : IsLimit c) :
    Mono (Trident.Œπ c) where
  right_cancellation _ _ w := Trident.IsLimit.hom_ext i w
#align
  category_theory.limits.mono_of_is_limit_parallel_family
  CategoryTheory.Limits.mono_of_isLimit_parallelFamily

end

section

/-- `HasWideCoequalizer f g` represents a particular choice of colimiting cocone
for the parallel family of morphisms `f`.
-/
abbrev HasWideCoequalizer :=
  HasColimit (parallelFamily f)
#align category_theory.limits.has_wide_coequalizer CategoryTheory.Limits.HasWideCoequalizer

variable [HasWideCoequalizer f]

/-- If a wide coequalizer of `f`, we can access an arbitrary choice of such by
    saying `wideCoequalizer f`. -/
abbrev wideCoequalizer : C :=
  colimit (parallelFamily f)
#align category_theory.limits.wide_coequalizer CategoryTheory.Limits.wideCoequalizer

/-- If a wideCoequalizer of `f` exists, we can access the corresponding projection by
    saying `wideCoequalizer.œÄ f`. -/
abbrev wideCoequalizer.œÄ : Y ‚ü∂ wideCoequalizer f :=
  colimit.Œπ (parallelFamily f) one
#align category_theory.limits.wide_coequalizer.œÄ CategoryTheory.Limits.wideCoequalizer.œÄ

/-- An arbitrary choice of coequalizer cocone for a parallel family `f`.
-/
abbrev wideCoequalizer.cotrident : Cotrident f :=
  colimit.cocone (parallelFamily f)
#align
  category_theory.limits.wide_coequalizer.cotrident
  CategoryTheory.Limits.wideCoequalizer.cotrident

@[simp]
theorem wideCoequalizer.cotrident_œÄ : (wideCoequalizer.cotrident f).œÄ = wideCoequalizer.œÄ f :=
  rfl
#align
  category_theory.limits.wide_coequalizer.cotrident_œÄ
  CategoryTheory.Limits.wideCoequalizer.cotrident_œÄ

@[simp 1100]
theorem wideCoequalizer.cotrident_Œπ_app_one :
    (wideCoequalizer.cotrident f).Œπ.app one = wideCoequalizer.œÄ f :=
  rfl
#align
  category_theory.limits.wide_coequalizer.cotrident_Œπ_app_one
  CategoryTheory.Limits.wideCoequalizer.cotrident_Œπ_app_one

@[reassoc]
theorem wideCoequalizer.condition (j‚ÇÅ j‚ÇÇ : J) :
    f j‚ÇÅ ‚â´ wideCoequalizer.œÄ f = f j‚ÇÇ ‚â´ wideCoequalizer.œÄ f :=
  Cotrident.condition j‚ÇÅ j‚ÇÇ <| colimit.cocone <| parallelFamily f
#align
  category_theory.limits.wide_coequalizer.condition
  CategoryTheory.Limits.wideCoequalizer.condition

/-- The cotrident built from `wideCoequalizer.œÄ f` is colimiting. -/
def wideCoequalizerIsWideCoequalizer [Nonempty J] :
    IsColimit (Cotrident.ofœÄ (wideCoequalizer.œÄ f) (wideCoequalizer.condition f)) :=
  IsColimit.ofIsoColimit (colimit.isColimit _) (Cotrident.ext (Iso.refl _))
#align
  category_theory.limits.wide_coequalizer_is_wide_coequalizer
  CategoryTheory.Limits.wideCoequalizerIsWideCoequalizer

variable {f}

/-- Any morphism `k : Y ‚ü∂ W` satisfying `‚àÄ j‚ÇÅ j‚ÇÇ, f j‚ÇÅ ‚â´ k = f j‚ÇÇ ‚â´ k` factors through the
    wide coequalizer of `f` via `wideCoequalizer.desc : wideCoequalizer f ‚ü∂ W`. -/
abbrev wideCoequalizer.desc [Nonempty J] {W : C} (k : Y ‚ü∂ W) (h : ‚àÄ j‚ÇÅ j‚ÇÇ, f j‚ÇÅ ‚â´ k = f j‚ÇÇ ‚â´ k) :
    wideCoequalizer f ‚ü∂ W :=
  colimit.desc (parallelFamily f) (Cotrident.ofœÄ k h)
#align category_theory.limits.wide_coequalizer.desc CategoryTheory.Limits.wideCoequalizer.desc

@[reassoc (attr := simp 1100)]
theorem wideCoequalizer.œÄ_desc [Nonempty J] {W : C} (k : Y ‚ü∂ W)
    (h : ‚àÄ j‚ÇÅ j‚ÇÇ, f j‚ÇÅ ‚â´ k = f j‚ÇÇ ‚â´ k) :
    wideCoequalizer.œÄ f ‚â´ wideCoequalizer.desc k h = k :=
  colimit.Œπ_desc _ _
#align category_theory.limits.wide_coequalizer.œÄ_desc CategoryTheory.Limits.wideCoequalizer.œÄ_desc

/-- Any morphism `k : Y ‚ü∂ W` satisfying `‚àÄ j‚ÇÅ j‚ÇÇ, f j‚ÇÅ ‚â´ k = f j‚ÇÇ ‚â´ k` induces a morphism
    `l : wideCoequalizer f ‚ü∂ W` satisfying `wideCoequalizer.œÄ ‚â´ g = l`. -/
def wideCoequalizer.desc' [Nonempty J] {W : C} (k : Y ‚ü∂ W) (h : ‚àÄ j‚ÇÅ j‚ÇÇ, f j‚ÇÅ ‚â´ k = f j‚ÇÇ ‚â´ k) :
    { l : wideCoequalizer f ‚ü∂ W // wideCoequalizer.œÄ f ‚â´ l = k } :=
  ‚ü®wideCoequalizer.desc k h, wideCoequalizer.œÄ_desc _ _‚ü©
#align category_theory.limits.wide_coequalizer.desc' CategoryTheory.Limits.wideCoequalizer.desc'

/-- Two maps from a wide coequalizer are equal if they are equal when composed with the wide
    coequalizer map -/
@[ext]
theorem wideCoequalizer.hom_ext [Nonempty J] {W : C} {k l : wideCoequalizer f ‚ü∂ W}
    (h : wideCoequalizer.œÄ f ‚â´ k = wideCoequalizer.œÄ f ‚â´ l) : k = l :=
  Cotrident.IsColimit.hom_ext (colimit.isColimit _) h
#align category_theory.limits.wide_coequalizer.hom_ext CategoryTheory.Limits.wideCoequalizer.hom_ext

/-- A wide coequalizer morphism is an epimorphism -/
instance wideCoequalizer.œÄ_epi [Nonempty J] : Epi (wideCoequalizer.œÄ f) where
  left_cancellation _ _ w := wideCoequalizer.hom_ext w
#align category_theory.limits.wide_coequalizer.œÄ_epi CategoryTheory.Limits.wideCoequalizer.œÄ_epi

end

section

variable {f}

/-- The wide coequalizer morphism in any colimit cocone is an epimorphism. -/
theorem epi_of_isColimit_parallelFamily [Nonempty J] {c : Cocone (parallelFamily f)}
    (i : IsColimit c) : Epi (c.Œπ.app one) where
  left_cancellation _ _ w := Cotrident.IsColimit.hom_ext i w
#align
  category_theory.limits.epi_of_is_colimit_parallel_family
  CategoryTheory.Limits.epi_of_isColimit_parallelFamily

end

variable (C)

/-- `HasWideEqualizers` represents a choice of wide equalizer for every family of morphisms -/
abbrev HasWideEqualizers :=
  ‚àÄ J, HasLimitsOfShape (WalkingParallelFamily.{w} J) C
#align category_theory.limits.has_wide_equalizers CategoryTheory.Limits.HasWideEqualizers

/-- `HasWideCoequalizers` represents a choice of wide coequalizer for every family of morphisms -/
abbrev HasWideCoequalizers :=
  ‚àÄ J, HasColimitsOfShape (WalkingParallelFamily.{w} J) C
#align category_theory.limits.has_wide_coequalizers CategoryTheory.Limits.HasWideCoequalizers

/-- If `C` has all limits of diagrams `parallelFamily f`, then it has all wide equalizers -/
theorem hasWideEqualizers_of_hasLimit_parallelFamily
    [‚àÄ {J : Type w} {X Y : C} {f : J ‚Üí (X ‚ü∂ Y)}, HasLimit (parallelFamily f)] :
    HasWideEqualizers.{w} C := fun _ =>
  { has_limit := fun F => hasLimitOfIso (diagramIsoParallelFamily F).symm }
#align
  category_theory.limits.has_wide_equalizers_of_has_limit_parallel_family
  CategoryTheory.Limits.hasWideEqualizers_of_hasLimit_parallelFamily

/-- If `C` has all colimits of diagrams `parallelFamily f`, then it has all wide coequalizers -/
theorem hasWideCoequalizers_of_hasColimit_parallelFamily
    [‚àÄ {J : Type w} {X Y : C} {f : J ‚Üí (X ‚ü∂ Y)}, HasColimit (parallelFamily f)] :
    HasWideCoequalizers.{w} C := fun _ =>
  { has_colimit := fun F => hasColimitOfIso (diagramIsoParallelFamily F) }
#align
  category_theory.limits.has_wide_coequalizers_of_has_colimit_parallel_family
  CategoryTheory.Limits.hasWideCoequalizers_of_hasColimit_parallelFamily

instance (priority := 10) hasEqualizers_of_hasWideEqualizers [HasWideEqualizers.{w} C] :
    HasEqualizers C :=
  hasLimitsOfShape_of_equivalence.{w} walkingParallelFamilyEquivWalkingParallelPair
#align
  category_theory.limits.has_equalizers_of_has_wide_equalizers
  CategoryTheory.Limits.hasEqualizers_of_hasWideEqualizers

instance (priority := 10) hasCoequalizers_of_hasWideCoequalizers [HasWideCoequalizers.{w} C] :
    HasCoequalizers C :=
  hasColimitsOfShape_of_equivalence.{w} walkingParallelFamilyEquivWalkingParallelPair
#align
  category_theory.limits.has_coequalizers_of_has_wide_coequalizers
  CategoryTheory.Limits.hasCoequalizers_of_hasWideCoequalizers

end CategoryTheory.Limits

attribute [nolint simpNF] CategoryTheory.Limits.WalkingParallelFamily.Hom.id.sizeOf_spec
