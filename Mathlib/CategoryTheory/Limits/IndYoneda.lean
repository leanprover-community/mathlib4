/-
Copyright (c) 2024 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.CategoryTheory.Limits.Opposites
import Mathlib.CategoryTheory.Limits.Preserves.Limits
import Mathlib.CategoryTheory.Limits.Yoneda

/-!

# Ind- and pro- (co)yoneda lemmas

We define limit versions of the yoneda and coyoneda lemmas.

## Main results

Notation: categories `C`, `I` and functors `D : I·µí·µñ ‚•§ C`, `F : C ‚•§ Type`.

- `colimitCoyonedaHomIsoLimit`: pro-coyoneda lemma: homorphisms from colimit of coyoneda of
  diagram `D` to `F` is limit of `F` evaluated at `D`.
- `colimitCoyonedaHomIsoLimit'`: a variant of `colimitCoyonedaHomIsoLimit` for a covariant
  diagram.

## TODO:

- define the ind-yoneda versions (for contravariant `F`)

-/

universe u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ

namespace CategoryTheory

namespace Limits

open Opposite

variable {C : Type u‚ÇÅ} [Category.{u‚ÇÇ} C] {I : Type v‚ÇÅ} [Category.{v‚ÇÇ} I]

section LimitOpColimit

instance (F : I ‚•§ C) [HasColimit F] : HasLimit F.op := hasLimit_op_of_hasColimit F

/-- The limit of `F.op` is the opposite of `colimit F`. -/
noncomputable def limitOpIsoOpColimit (F : I ‚•§ C) [HasColimit F] :
    limit F.op ‚âÖ op <| colimit F :=
  limit.isoLimitCone ‚ü®(colimit.cocone F).op, (colimit.isColimit F).op‚ü©

@[reassoc (attr := simp)]
lemma limitOpIsoOpColimit_inv_comp_œÄ (F : I ‚•§ C) [HasColimit F] (i : I) :
    (limitOpIsoOpColimit F).inv ‚â´ limit.œÄ F.op ‚ü®i‚ü© = (colimit.Œπ F i).op := by
  simp [limitOpIsoOpColimit]

@[reassoc (attr := simp)]
lemma limitOpIsoOpColimit_hom_comp_Œπ (F : I ‚•§ C) [HasColimit F] (i : I) :
    (limitOpIsoOpColimit F).hom ‚â´ (colimit.Œπ F i).op = limit.œÄ F.op ‚ü®i‚ü© := by
  rw [‚Üê limitOpIsoOpColimit_inv_comp_œÄ, ‚Üê Category.assoc, Iso.hom_inv_id, Category.id_comp]

instance (F : I·µí·µñ ‚•§ C) [HasColimit F] : HasLimit F.rightOp where
  exists_limit := ‚ü®‚ü®coneRightOpOfCocone (colimit.cocone F),
    isLimitConeRightOpOfCocone F (colimit.isColimit F)‚ü©‚ü©

/-- `limitOpIsoOpColimit` for contravariant functor. -/
noncomputable def limitRightOpIsoOpColimit (F : I·µí·µñ ‚•§ C) [HasColimit F] :
    limit F.rightOp ‚âÖ op <| colimit F :=
  limit.isoLimitCone ‚ü®coneRightOpOfCocone (colimit.cocone F),
    isLimitConeRightOpOfCocone F (colimit.isColimit F)‚ü©

@[reassoc (attr := simp)]
lemma limitRightOpIsoOpColimit_inv_comp_œÄ (F : I·µí·µñ ‚•§ C) [HasColimit F] (i : I) :
    (limitRightOpIsoOpColimit F).inv ‚â´ limit.œÄ F.rightOp i = (colimit.Œπ F ‚ü®i‚ü©).op := by
  simp [limitRightOpIsoOpColimit]

@[reassoc (attr := simp)]
lemma limitRightOpIsoOpColimit_hom_comp_Œπ (F : I·µí·µñ ‚•§ C) [HasColimit F] (i : I) :
    (limitRightOpIsoOpColimit F).hom ‚â´ (colimit.Œπ F ‚ü®i‚ü©).op = limit.œÄ F.rightOp i := by
  rw [‚Üê limitRightOpIsoOpColimit_inv_comp_œÄ, ‚Üê Category.assoc, Iso.hom_inv_id, Category.id_comp]

end LimitOpColimit

section HomCocontinuousCovariant

variable (F : I ‚•§ C) [HasColimit F]

/-- Hom is functorially cocontinuous: coyoneda of a colimit is the limit
over coyoneda of the diagram. -/
noncomputable def coyonedaOpColimitIsoLimitCoyoneda :
    coyoneda.obj (op <| colimit F) ‚âÖ limit (F.op ‚ãô coyoneda) :=
  coyoneda.mapIso (limitOpIsoOpColimit F).symm ‚â™‚â´ (preservesLimitIso coyoneda F.op)

@[reassoc (attr := simp)]
lemma coyonedaOpColimitIsoLimitCoyoneda_hom_comp_œÄ (i : I) :
    (coyonedaOpColimitIsoLimitCoyoneda F).hom ‚â´ limit.œÄ (F.op.comp coyoneda) ‚ü®i‚ü©
      = coyoneda.map (colimit.Œπ F i).op := by
  simp only [coyonedaOpColimitIsoLimitCoyoneda, Functor.mapIso_symm,
    Iso.trans_hom, Iso.symm_hom, Functor.mapIso_inv, Category.assoc, preservesLimitsIso_hom_œÄ,
    ‚Üê Functor.map_comp, limitOpIsoOpColimit_inv_comp_œÄ]

@[reassoc (attr := simp)]
lemma coyonedaOpColimitIsoLimitCoyoneda_inv_comp_œÄ (i : I) :
    (coyonedaOpColimitIsoLimitCoyoneda F).inv ‚â´ coyoneda.map (colimit.Œπ F i).op
      = limit.œÄ (F.op.comp coyoneda) ‚ü®i‚ü© := by
  rw [‚Üê coyonedaOpColimitIsoLimitCoyoneda_hom_comp_œÄ, ‚Üê Category.assoc,
    Iso.inv_hom_id, Category.id_comp]

/-- Hom is cocontinuous: homomorphisms from a colimit is the limit over yoneda of the diagram. -/
noncomputable def colimitHomIsoLimitYoneda
    [HasLimitsOfShape I·µí·µñ (Type u‚ÇÇ)] (A : C) :
    (colimit F ‚ü∂ A) ‚âÖ limit (F.op ‚ãô yoneda.obj A) :=
  (coyonedaOpColimitIsoLimitCoyoneda F).app A ‚â™‚â´ limitObjIsoLimitCompEvaluation _ _

@[reassoc (attr := simp)]
lemma colimitHomIsoLimitYoneda_hom_comp_œÄ [HasLimitsOfShape I·µí·µñ (Type u‚ÇÇ)] (A : C) (i : I) :
    (colimitHomIsoLimitYoneda F A).hom ‚â´ limit.œÄ (F.op ‚ãô yoneda.obj A) ‚ü®i‚ü©
      = (coyoneda.map (colimit.Œπ F i).op).app A := by
  simp only [colimitHomIsoLimitYoneda, Iso.trans_hom, Iso.app_hom, Category.assoc]
  erw [limitObjIsoLimitCompEvaluation_hom_œÄ]
  change ((coyonedaOpColimitIsoLimitCoyoneda F).hom ‚â´ _).app A = _
  rw [coyonedaOpColimitIsoLimitCoyoneda_hom_comp_œÄ]

@[reassoc (attr := simp)]
lemma colimitHomIsoLimitYoneda_inv_comp_œÄ [HasLimitsOfShape I·µí·µñ (Type u‚ÇÇ)] (A : C) (i : I) :
    (colimitHomIsoLimitYoneda F A).inv ‚â´ (coyoneda.map (colimit.Œπ F i).op).app A
      = limit.œÄ (F.op ‚ãô yoneda.obj A) ‚ü®i‚ü© := by
  rw [‚Üê colimitHomIsoLimitYoneda_hom_comp_œÄ, ‚Üê Category.assoc,
    Iso.inv_hom_id, Category.id_comp]

end HomCocontinuousCovariant

section HomCocontinuousContravariant

variable (F : I·µí·µñ ‚•§ C) [HasColimit F]

/-- Variant of `coyonedaOoColimitIsoLimitCoyoneda` for contravariant `F`. -/
noncomputable def coyonedaOpColimitIsoLimitCoyoneda' :
    coyoneda.obj (op <| colimit F) ‚âÖ limit (F.rightOp ‚ãô coyoneda) :=
  coyoneda.mapIso (limitRightOpIsoOpColimit F).symm ‚â™‚â´ preservesLimitIso coyoneda F.rightOp

@[reassoc (attr := simp)]
lemma coyonedaOpColimitIsoLimitCoyoneda'_hom_comp_œÄ (i : I) :
    (coyonedaOpColimitIsoLimitCoyoneda' F).hom ‚â´ limit.œÄ (F.rightOp ‚ãô coyoneda) i
      = coyoneda.map (colimit.Œπ F ‚ü®i‚ü©).op := by
  simp only [coyonedaOpColimitIsoLimitCoyoneda', Functor.mapIso_symm, Iso.trans_hom, Iso.symm_hom,
    Functor.mapIso_inv, Category.assoc, preservesLimitsIso_hom_œÄ, ‚Üê Functor.map_comp,
    limitRightOpIsoOpColimit_inv_comp_œÄ]

@[reassoc (attr := simp)]
lemma coyonedaOpColimitIsoLimitCoyoneda'_inv_comp_œÄ (i : I) :
    (coyonedaOpColimitIsoLimitCoyoneda' F).inv ‚â´ coyoneda.map (colimit.Œπ F ‚ü®i‚ü©).op
      = limit.œÄ (F.rightOp ‚ãô coyoneda) i := by
  rw [‚Üê coyonedaOpColimitIsoLimitCoyoneda'_hom_comp_œÄ, ‚Üê Category.assoc,
    Iso.inv_hom_id, Category.id_comp]

/-- Variant of `colimitHomIsoLimitYoneda` for contravariant `F`. -/
noncomputable def colimitHomIsoLimitYoneda' [HasLimitsOfShape I (Type u‚ÇÇ)] (A : C) :
    (colimit F ‚ü∂ A) ‚âÖ limit (F.rightOp ‚ãô yoneda.obj A) :=
  (coyonedaOpColimitIsoLimitCoyoneda' F).app A ‚â™‚â´ limitObjIsoLimitCompEvaluation _ _

@[reassoc (attr := simp)]
lemma colimitHomIsoLimitYoneda'_hom_comp_œÄ [HasLimitsOfShape I (Type u‚ÇÇ)] (A : C) (i : I) :
    (colimitHomIsoLimitYoneda' F A).hom ‚â´ limit.œÄ (F.rightOp ‚ãô yoneda.obj A) i
      = (coyoneda.map (colimit.Œπ F ‚ü®i‚ü©).op).app A := by
  simp only [yoneda_obj_obj, colimitHomIsoLimitYoneda', Iso.trans_hom,
    Iso.app_hom, Category.assoc]
  erw [limitObjIsoLimitCompEvaluation_hom_œÄ]
  change ((coyonedaOpColimitIsoLimitCoyoneda' F).hom ‚â´ _).app A = _
  rw [coyonedaOpColimitIsoLimitCoyoneda'_hom_comp_œÄ]

@[reassoc (attr := simp)]
lemma colimitHomIsoLimitYoneda'_inv_comp_œÄ [HasLimitsOfShape I (Type u‚ÇÇ)] (A : C) (i : I) :
    (colimitHomIsoLimitYoneda' F A).inv ‚â´ (coyoneda.map (colimit.Œπ F ‚ü®i‚ü©).op).app A
      = limit.œÄ (F.rightOp ‚ãô yoneda.obj A) i := by
  rw [‚Üê colimitHomIsoLimitYoneda'_hom_comp_œÄ, ‚Üê Category.assoc,
    Iso.inv_hom_id, Category.id_comp]

end HomCocontinuousContravariant

section ProCoyonedaContravariant

variable (D : I·µí·µñ ‚•§ C) (F : C ‚•§ Type u‚ÇÇ)
variable [HasColimit (D.rightOp ‚ãô coyoneda)] [HasLimitsOfShape I·µí·µñ (Type (max u‚ÇÅ u‚ÇÇ))]

/-- Pro-Coyoneda lemma: homorphisms from colimit of coyoneda of diagram `D` to `F` is limit
of `F` evaluated at `D`. -/
noncomputable def colimitCoyonedaHomIsoLimit :
    (colimit (D.rightOp ‚ãô coyoneda) ‚ü∂ F) ‚âÖ limit (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) :=
  colimitHomIsoLimitYoneda _ F ‚â™‚â´
    HasLimit.isoOfNatIso (isoWhiskerLeft (D ‚ãô Prod.sectl C F) (coyonedaLemma C))

@[simp]
lemma colimitCoyonedaHomIsoLimit_œÄ_apply (f : colimit (D.rightOp ‚ãô coyoneda) ‚ü∂ F) (i : I) :
    limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) (op i) ((colimitCoyonedaHomIsoLimit D F).hom f)
      = ‚ü®f.app (D.obj (op i)) ((colimit.Œπ (D.rightOp ‚ãô coyoneda) i).app (D.obj (op i))
          (ùüô (D.obj (op i))))‚ü© := by
  change ((colimitCoyonedaHomIsoLimit D F).hom ‚â´ (limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) (op i))) f = _
  simp only [colimitCoyonedaHomIsoLimit, Iso.trans_hom, Category.assoc,
    HasLimit.isoOfNatIso_hom_œÄ]
  rw [‚Üê Category.assoc, colimitHomIsoLimitYoneda_hom_comp_œÄ]
  dsimp [coyonedaLemma, types_comp_apply]
  erw [coyonedaEquiv_comp, coyonedaEquiv_apply]
  rfl

end ProCoyonedaContravariant

section ProCoyonedaCovariant

variable (D : I ‚•§ C) (F : C ‚•§ Type u‚ÇÇ)
variable [HasColimit (D.op ‚ãô coyoneda)] [HasLimitsOfShape I (Type (max u‚ÇÅ u‚ÇÇ))]

/-- A variant of `colimitCoyonedaHomIsoLimit` for a contravariant diagram. -/
noncomputable def colimitCoyonedaHomIsoLimit' :
    (colimit (D.op ‚ãô coyoneda) ‚ü∂ F) ‚âÖ limit (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) :=
  colimitHomIsoLimitYoneda' _ F ‚â™‚â´
    HasLimit.isoOfNatIso (isoWhiskerLeft (D ‚ãô Prod.sectl C F) (coyonedaLemma C))

@[simp]
lemma colimitCoyonedaHomIsoLimit'_œÄ_apply (f : colimit (D.op ‚ãô coyoneda) ‚ü∂ F) (i : I) :
    limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) i ((colimitCoyonedaHomIsoLimit' D F).hom f)
      = ‚ü®f.app (D.obj i) ((colimit.Œπ (D.op ‚ãô coyoneda) ‚ü®i‚ü©).app (D.obj i) (ùüô (D.obj i)))‚ü© := by
  change ((colimitCoyonedaHomIsoLimit' D F).hom ‚â´ (limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) i)) f = _
  simp only [colimitCoyonedaHomIsoLimit', Iso.trans_hom, Category.assoc, HasLimit.isoOfNatIso_hom_œÄ]
  rw [‚Üê Category.assoc, colimitHomIsoLimitYoneda'_hom_comp_œÄ]
  dsimp [coyonedaLemma]
  erw [coyonedaEquiv_comp, coyonedaEquiv_apply]
  rfl

end ProCoyonedaCovariant

end Limits

end CategoryTheory
