/-
Copyright (c) 2024 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.CategoryTheory.Limits.Opposites
import Mathlib.CategoryTheory.Limits.Preserves.Limits
import Mathlib.CategoryTheory.Limits.Yoneda

/-!

# Ind- and pro- (co)yoneda lemmas

We define limit versions of the yoneda and coyoneda lemmas.

## Main results

Notation: categories `C`, `I` and functors `D : I·µí·µñ ‚•§ C`, `F : C ‚•§ Type`.

- `colimitCoyonedaHomIsoLimit`: pro-coyoneda lemma: homorphisms from colimit of coyoneda of
  diagram `D` to `F` is limit of `F` evaluated at `D`.
- `colimitCoyonedaHomIsoLimit'`: a variant of `colimitCoyonedaHomIsoLimit` for a covariant
  diagram.

-/

universe u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ

namespace CategoryTheory

namespace Limits

open Opposite

variable {C : Type u‚ÇÅ} [Category.{u‚ÇÇ} C] {I : Type v‚ÇÅ} [Category.{v‚ÇÇ} I]

section HomCocontinuousCovariant

variable (F : I ‚•§ C) [HasColimit F]

/-- Hom is functorially cocontinuous: coyoneda of a colimit is the limit
over coyoneda of the diagram. -/
noncomputable def coyonedaOpColimitIsoLimitCoyoneda :
    coyoneda.obj (op <| colimit F) ‚âÖ limit (F.op ‚ãô coyoneda) :=
  coyoneda.mapIso (limitOpIsoOpColimit F).symm ‚â™‚â´ (preservesLimitIso coyoneda F.op)

@[reassoc (attr := simp)]
lemma coyonedaOpColimitIsoLimitCoyoneda_hom_comp_œÄ (i : I) :
    (coyonedaOpColimitIsoLimitCoyoneda F).hom ‚â´ limit.œÄ (F.op.comp coyoneda) ‚ü®i‚ü©
      = coyoneda.map (colimit.Œπ F i).op := by
  simp only [coyonedaOpColimitIsoLimitCoyoneda, Functor.mapIso_symm,
    Iso.trans_hom, Iso.symm_hom, Functor.mapIso_inv, Category.assoc, preservesLimitIso_hom_œÄ,
    ‚Üê Functor.map_comp, limitOpIsoOpColimit_inv_comp_œÄ]

@[reassoc (attr := simp)]
lemma coyonedaOpColimitIsoLimitCoyoneda_inv_comp_œÄ (i : I) :
    (coyonedaOpColimitIsoLimitCoyoneda F).inv ‚â´ coyoneda.map (colimit.Œπ F i).op =
      limit.œÄ (F.op.comp coyoneda) ‚ü®i‚ü© := by
  rw [‚Üê coyonedaOpColimitIsoLimitCoyoneda_hom_comp_œÄ, ‚Üê Category.assoc,
    Iso.inv_hom_id, Category.id_comp]

/-- Hom is cocontinuous: homomorphisms from a colimit is the limit over yoneda of the diagram. -/
noncomputable def colimitHomIsoLimitYoneda
    [HasLimitsOfShape I·µí·µñ (Type u‚ÇÇ)] (A : C) :
    (colimit F ‚ü∂ A) ‚âÖ limit (F.op ‚ãô yoneda.obj A) :=
  (coyonedaOpColimitIsoLimitCoyoneda F).app A ‚â™‚â´ limitObjIsoLimitCompEvaluation _ _

@[reassoc (attr := simp)]
lemma colimitHomIsoLimitYoneda_hom_comp_œÄ [HasLimitsOfShape I·µí·µñ (Type u‚ÇÇ)] (A : C) (i : I) :
    (colimitHomIsoLimitYoneda F A).hom ‚â´ limit.œÄ (F.op ‚ãô yoneda.obj A) ‚ü®i‚ü© =
      (coyoneda.map (colimit.Œπ F i).op).app A := by
  simp only [colimitHomIsoLimitYoneda, Iso.trans_hom, Iso.app_hom, Category.assoc]
  erw [limitObjIsoLimitCompEvaluation_hom_œÄ]
  change ((coyonedaOpColimitIsoLimitCoyoneda F).hom ‚â´ _).app A = _
  rw [coyonedaOpColimitIsoLimitCoyoneda_hom_comp_œÄ]

@[reassoc (attr := simp)]
lemma colimitHomIsoLimitYoneda_inv_comp_œÄ [HasLimitsOfShape I·µí·µñ (Type u‚ÇÇ)] (A : C) (i : I) :
    (colimitHomIsoLimitYoneda F A).inv ‚â´ (coyoneda.map (colimit.Œπ F i).op).app A =
      limit.œÄ (F.op ‚ãô yoneda.obj A) ‚ü®i‚ü© := by
  rw [‚Üê colimitHomIsoLimitYoneda_hom_comp_œÄ, ‚Üê Category.assoc,
    Iso.inv_hom_id, Category.id_comp]

end HomCocontinuousCovariant

section HomCocontinuousContravariant

variable (F : I·µí·µñ ‚•§ C) [HasColimit F]

/-- Variant of `coyonedaOoColimitIsoLimitCoyoneda` for contravariant `F`. -/
noncomputable def coyonedaOpColimitIsoLimitCoyoneda' :
    coyoneda.obj (op <| colimit F) ‚âÖ limit (F.rightOp ‚ãô coyoneda) :=
  coyoneda.mapIso (limitRightOpIsoOpColimit F).symm ‚â™‚â´ preservesLimitIso coyoneda F.rightOp

@[reassoc (attr := simp)]
lemma coyonedaOpColimitIsoLimitCoyoneda'_hom_comp_œÄ (i : I) :
    (coyonedaOpColimitIsoLimitCoyoneda' F).hom ‚â´ limit.œÄ (F.rightOp ‚ãô coyoneda) i =
      coyoneda.map (colimit.Œπ F ‚ü®i‚ü©).op := by
  simp only [coyonedaOpColimitIsoLimitCoyoneda', Functor.mapIso_symm, Iso.trans_hom, Iso.symm_hom,
    Functor.mapIso_inv, Category.assoc, preservesLimitIso_hom_œÄ, ‚Üê Functor.map_comp,
    limitRightOpIsoOpColimit_inv_comp_œÄ]

@[reassoc (attr := simp)]
lemma coyonedaOpColimitIsoLimitCoyoneda'_inv_comp_œÄ (i : I) :
    (coyonedaOpColimitIsoLimitCoyoneda' F).inv ‚â´ coyoneda.map (colimit.Œπ F ‚ü®i‚ü©).op =
      limit.œÄ (F.rightOp ‚ãô coyoneda) i := by
  rw [‚Üê coyonedaOpColimitIsoLimitCoyoneda'_hom_comp_œÄ, ‚Üê Category.assoc,
    Iso.inv_hom_id, Category.id_comp]

/-- Variant of `colimitHomIsoLimitYoneda` for contravariant `F`. -/
noncomputable def colimitHomIsoLimitYoneda' [HasLimitsOfShape I (Type u‚ÇÇ)] (A : C) :
    (colimit F ‚ü∂ A) ‚âÖ limit (F.rightOp ‚ãô yoneda.obj A) :=
  (coyonedaOpColimitIsoLimitCoyoneda' F).app A ‚â™‚â´ limitObjIsoLimitCompEvaluation _ _

@[reassoc (attr := simp)]
lemma colimitHomIsoLimitYoneda'_hom_comp_œÄ [HasLimitsOfShape I (Type u‚ÇÇ)] (A : C) (i : I) :
    (colimitHomIsoLimitYoneda' F A).hom ‚â´ limit.œÄ (F.rightOp ‚ãô yoneda.obj A) i =
      (coyoneda.map (colimit.Œπ F ‚ü®i‚ü©).op).app A := by
  simp only [yoneda_obj_obj, colimitHomIsoLimitYoneda', Iso.trans_hom,
    Iso.app_hom, Category.assoc]
  erw [limitObjIsoLimitCompEvaluation_hom_œÄ]
  change ((coyonedaOpColimitIsoLimitCoyoneda' F).hom ‚â´ _).app A = _
  rw [coyonedaOpColimitIsoLimitCoyoneda'_hom_comp_œÄ]

@[reassoc (attr := simp)]
lemma colimitHomIsoLimitYoneda'_inv_comp_œÄ [HasLimitsOfShape I (Type u‚ÇÇ)] (A : C) (i : I) :
    (colimitHomIsoLimitYoneda' F A).inv ‚â´ (coyoneda.map (colimit.Œπ F ‚ü®i‚ü©).op).app A =
      limit.œÄ (F.rightOp ‚ãô yoneda.obj A) i := by
  rw [‚Üê colimitHomIsoLimitYoneda'_hom_comp_œÄ, ‚Üê Category.assoc,
    Iso.inv_hom_id, Category.id_comp]

end HomCocontinuousContravariant

section ProCoyonedaContravariant

variable (D : I·µí·µñ ‚•§ C) (F : C ‚•§ Type u‚ÇÇ)
variable [HasColimit (D.rightOp ‚ãô coyoneda)] [HasLimitsOfShape I·µí·µñ (Type (max u‚ÇÅ u‚ÇÇ))]

/-- Pro-Coyoneda lemma: morphisms from colimit of coyoneda of diagram `D` to `F` is limit
of `F` evaluated at `D`. This variant is for contravariant diagrams, see
`colimitCoyonedaHomIsoLimit'` for a covariant version. -/
noncomputable def colimitCoyonedaHomIsoLimit :
    (colimit (D.rightOp ‚ãô coyoneda) ‚ü∂ F) ‚âÖ limit (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) :=
  colimitHomIsoLimitYoneda _ F ‚â™‚â´
    HasLimit.isoOfNatIso (isoWhiskerLeft (D ‚ãô Prod.sectL C F) (coyonedaLemma C))

@[simp]
lemma colimitCoyonedaHomIsoLimit_œÄ_apply (f : colimit (D.rightOp ‚ãô coyoneda) ‚ü∂ F) (i : I) :
    limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) (op i) ((colimitCoyonedaHomIsoLimit D F).hom f) =
      ‚ü®f.app (D.obj (op i)) ((colimit.Œπ (D.rightOp ‚ãô coyoneda) i).app (D.obj (op i))
          (ùüô (D.obj (op i))))‚ü© := by
  change ((colimitCoyonedaHomIsoLimit D F).hom ‚â´ (limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) (op i))) f = _
  simp only [colimitCoyonedaHomIsoLimit, Iso.trans_hom, Category.assoc,
    HasLimit.isoOfNatIso_hom_œÄ]
  rw [‚Üê Category.assoc, colimitHomIsoLimitYoneda_hom_comp_œÄ]
  dsimp [coyonedaLemma, types_comp_apply]
  erw [coyonedaEquiv_comp, coyonedaEquiv_apply]
  rfl

end ProCoyonedaContravariant

section ProCoyonedaContravariantLeftOp

variable (D : I ‚•§ C·µí·µñ) (F : C ‚•§ Type u‚ÇÇ)
variable [HasColimit (D ‚ãô coyoneda)] [HasLimitsOfShape I·µí·µñ (Type (max u‚ÇÅ u‚ÇÇ))]

/-- Pro-Coyoneda lemma: morphisms from colimit of coyoneda of diagram `D` to `F` is limit
of `F` evaluated at `D`. This variant is for contravariant diagrams, see
`colimitCoyonedaHomIsoLimit'` for a covariant version. -/
noncomputable def colimitCoyonedaHomIsoLimitLeftOp :
    (colimit (D ‚ãô coyoneda) ‚ü∂ F) ‚âÖ limit (D.leftOp ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) :=
  haveI : HasColimit (D.leftOp.rightOp ‚ãô coyoneda) :=
    inferInstanceAs <| HasColimit (D ‚ãô coyoneda)
  colimitCoyonedaHomIsoLimit D.leftOp F

@[simp]
lemma colimitCoyonedaHomIsoLimitLeftOp_œÄ_apply (f : colimit (D ‚ãô coyoneda) ‚ü∂ F) (i : I) :
    limit.œÄ (D.leftOp ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) (op i)
        ((colimitCoyonedaHomIsoLimitLeftOp D F).hom f) =
      ‚ü®f.app (D.obj i).unop ((colimit.Œπ (D ‚ãô coyoneda) i).app (D.obj i).unop
          (ùüô (D.obj i).unop))‚ü© :=
  haveI : HasColimit (D.leftOp.rightOp ‚ãô coyoneda) :=
    inferInstanceAs <| HasColimit (D ‚ãô coyoneda)
  colimitCoyonedaHomIsoLimit_œÄ_apply _ _ _ _

end ProCoyonedaContravariantLeftOp

section IndYonedaCovariant

variable (D : I·µí·µñ ‚•§ C·µí·µñ) (F : C·µí·µñ ‚•§ Type u‚ÇÇ)
variable [HasColimit (D.unop ‚ãô yoneda)] [HasLimitsOfShape I·µí·µñ (Type (max u‚ÇÅ u‚ÇÇ))]

/-- Ind-Yoneda lemma: morphisms from colimit of yoneda of diagram `D` to `F` is limit of `F`
evaluated at `D`. This version is for covariant diagrams, see `colimitYonedaHomIsoLimit'` for a
contravariant version. -/
noncomputable def colimitYonedaHomIsoLimit :
      (colimit (D.unop ‚ãô yoneda) ‚ü∂ F) ‚âÖ limit (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) :=
  colimitHomIsoLimitYoneda _ _ ‚â™‚â´
    HasLimit.isoOfNatIso (isoWhiskerLeft (D ‚ãô Prod.sectL _ _) (yonedaLemma C))

@[simp]
lemma colimitYonedaHomIsoLimit_œÄ_apply (f : colimit (D.unop ‚ãô yoneda) ‚ü∂ F) (i : I·µí·µñ) :
    limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) i ((colimitYonedaHomIsoLimit D F).hom f) =
      ‚ü®f.app (D.obj i)
        ((colimit.Œπ (D.unop ‚ãô yoneda) i.unop).app (D.obj i) (ùüô (D.obj i).unop))‚ü© := by
  change ((colimitYonedaHomIsoLimit D F).hom ‚â´ (limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) i)) f = _
  simp only [colimitYonedaHomIsoLimit, Iso.trans_hom, Category.assoc, HasLimit.isoOfNatIso_hom_œÄ]
  rw [‚Üê Category.assoc, colimitHomIsoLimitYoneda_hom_comp_œÄ]
  dsimp [yonedaLemma]
  erw [yonedaEquiv_comp, yonedaEquiv_apply]
  rfl

end IndYonedaCovariant

section IndYonedaCovariantOp

variable (D : I ‚•§ C) (F : C·µí·µñ ‚•§ Type u‚ÇÇ)
variable [HasColimit (D ‚ãô yoneda)] [HasLimitsOfShape I·µí·µñ (Type (max u‚ÇÅ u‚ÇÇ))]

/-- Ind-Yoneda lemma: morphisms from colimit of yoneda of diagram `D` to `F` is limit of `F`
evaluated at `D`. This version is for covariant diagrams, see `colimitYonedaHomIsoLimit'` for a
contravariant version. -/
noncomputable def colimitYonedaHomIsoLimitOp :
      (colimit (D ‚ãô yoneda) ‚ü∂ F) ‚âÖ limit (D.op ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) :=
  haveI : HasColimit (D.op.unop ‚ãô yoneda) :=
    inferInstanceAs <| HasColimit (D ‚ãô yoneda)
  colimitYonedaHomIsoLimit D.op F

@[simp]
lemma colimitYonedaHomIsoLimitOp_œÄ_apply (f : colimit (D ‚ãô yoneda) ‚ü∂ F) (i : I·µí·µñ) :
    limit.œÄ (D.op ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) i ((colimitYonedaHomIsoLimitOp D F).hom f) =
      ‚ü®f.app (op (D.obj i.unop))
        ((colimit.Œπ (D ‚ãô yoneda) i.unop).app (op (D.obj i.unop)) (ùüô (D.obj i.unop)))‚ü© :=
  haveI : HasColimit (D.op.unop ‚ãô yoneda) :=
    inferInstanceAs <| HasColimit (D ‚ãô yoneda)
  colimitYonedaHomIsoLimit_œÄ_apply _ _ _ _

end IndYonedaCovariantOp

section ProCoyonedaCovariant

variable (D : I ‚•§ C) (F : C ‚•§ Type u‚ÇÇ)
variable [HasColimit (D.op ‚ãô coyoneda)] [HasLimitsOfShape I (Type (max u‚ÇÅ u‚ÇÇ))]

/-- Pro-Coyoneda lemma: morphisms from colimit of coyoneda of diagram `D` to `F` is limit
of `F` evaluated at `D`. This variant is for covariant diagrams, see
`colimitCoyonedaHomIsoLimit` for a covariant version. -/
noncomputable def colimitCoyonedaHomIsoLimit' :
    (colimit (D.op ‚ãô coyoneda) ‚ü∂ F) ‚âÖ limit (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) :=
  colimitHomIsoLimitYoneda' _ F ‚â™‚â´
    HasLimit.isoOfNatIso (isoWhiskerLeft (D ‚ãô Prod.sectL C F) (coyonedaLemma C))

@[simp]
lemma colimitCoyonedaHomIsoLimit'_œÄ_apply (f : colimit (D.op ‚ãô coyoneda) ‚ü∂ F) (i : I) :
    limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) i ((colimitCoyonedaHomIsoLimit' D F).hom f) =
      ‚ü®f.app (D.obj i) ((colimit.Œπ (D.op ‚ãô coyoneda) ‚ü®i‚ü©).app (D.obj i) (ùüô (D.obj i)))‚ü© := by
  change ((colimitCoyonedaHomIsoLimit' D F).hom ‚â´ (limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) i)) f = _
  simp only [colimitCoyonedaHomIsoLimit', Iso.trans_hom, Category.assoc, HasLimit.isoOfNatIso_hom_œÄ]
  rw [‚Üê Category.assoc, colimitHomIsoLimitYoneda'_hom_comp_œÄ]
  dsimp [coyonedaLemma]
  erw [coyonedaEquiv_comp, coyonedaEquiv_apply]
  rfl

end ProCoyonedaCovariant

section ProCoyonedaCovariantUnop

variable (D : I·µí·µñ ‚•§ C·µí·µñ) (F : C ‚•§ Type u‚ÇÇ)
variable [HasColimit (D ‚ãô coyoneda)] [HasLimitsOfShape I (Type (max u‚ÇÅ u‚ÇÇ))]

/-- Pro-Coyoneda lemma: morphisms from colimit of coyoneda of diagram `D` to `F` is limit
of `F` evaluated at `D`. This variant is for covariant diagrams, see
`colimitCoyonedaHomIsoLimit` for a covariant version. -/
noncomputable def colimitCoyonedaHomIsoLimitUnop :
    (colimit (D ‚ãô coyoneda) ‚ü∂ F) ‚âÖ limit (D.unop ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) :=
  haveI : HasColimit (D.unop.op ‚ãô coyoneda) :=
    inferInstanceAs <| HasColimit (D ‚ãô coyoneda)
  colimitCoyonedaHomIsoLimit' D.unop F

@[simp]
lemma colimitCoyonedaHomIsoLimitUnop_œÄ_apply (f : colimit (D ‚ãô coyoneda) ‚ü∂ F) (i : I) :
    limit.œÄ (D.unop ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) i ((colimitCoyonedaHomIsoLimitUnop D F).hom f) =
      ‚ü®f.app (D.obj (op i)).unop
          ((colimit.Œπ (D ‚ãô coyoneda) ‚ü®i‚ü©).app (D.obj (op i)).unop (ùüô (D.obj (op i)).unop))‚ü© :=
  haveI : HasColimit (D.unop.op ‚ãô coyoneda) :=
    inferInstanceAs <| HasColimit (D ‚ãô coyoneda)
  colimitCoyonedaHomIsoLimit'_œÄ_apply _ _ _ _

end ProCoyonedaCovariantUnop

section IndYonedaContravariant

variable (D : I ‚•§ C·µí·µñ) (F : C·µí·µñ ‚•§ Type u‚ÇÇ)
variable [HasColimit (D.leftOp ‚ãô yoneda)] [HasLimitsOfShape I (Type (max u‚ÇÅ u‚ÇÇ))]

/-- Ind-Yoneda lemma: morphisms from colimit of yoneda of diagram `D` to `F` is limit of `F`
evaluated at `D`. This version is for contravariant diagrams, see `colimitYonedaHomIsoLimit` for a
covariant version. -/
noncomputable def colimitYonedaHomIsoLimit' :
    (colimit (D.leftOp ‚ãô yoneda) ‚ü∂ F) ‚âÖ limit (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) :=
  colimitHomIsoLimitYoneda' _ F ‚â™‚â´
    HasLimit.isoOfNatIso (isoWhiskerLeft (D ‚ãô Prod.sectL _ _) (yonedaLemma C))

@[simp]
lemma colimitYonedaHomIsoLimit'_œÄ_apply (f : colimit (D.leftOp ‚ãô yoneda) ‚ü∂ F) (i : I) :
    limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) i ((colimitYonedaHomIsoLimit' D F).hom f) =
      ‚ü®f.app (D.obj i)
        ((colimit.Œπ (D.leftOp ‚ãô yoneda) (op i)).app (D.obj i) (ùüô (D.obj i).unop))‚ü© := by
  change ((colimitYonedaHomIsoLimit' D F).hom ‚â´ (limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) i)) f = _
  simp only [colimitYonedaHomIsoLimit', Iso.trans_hom, Category.assoc, HasLimit.isoOfNatIso_hom_œÄ]
  rw [‚Üê Category.assoc, colimitHomIsoLimitYoneda'_hom_comp_œÄ]
  dsimp [yonedaLemma]
  erw [yonedaEquiv_comp, yonedaEquiv_apply]
  rfl

end IndYonedaContravariant

section IndYonedaContravariantRightOp

variable (D : I·µí·µñ ‚•§ C) (F : C·µí·µñ ‚•§ Type u‚ÇÇ)
variable [HasColimit (D ‚ãô yoneda)] [HasLimitsOfShape I (Type (max u‚ÇÅ u‚ÇÇ))]

/-- Ind-Yoneda lemma: morphisms from colimit of yoneda of diagram `D` to `F` is limit of `F`
evaluated at `D`. This version is for contravariant diagrams, see `colimitYonedaHomIsoLimit` for a
covariant version. -/
noncomputable def colimitYonedaHomIsoLimitRightOp :
    (colimit (D ‚ãô yoneda) ‚ü∂ F) ‚âÖ limit (D.rightOp ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) :=
  haveI : HasColimit (D.rightOp.leftOp ‚ãô yoneda) :=
    inferInstanceAs <| HasColimit (D ‚ãô yoneda)
  colimitYonedaHomIsoLimit' D.rightOp F

@[simp]
lemma colimitYonedaHomIsoLimitRightOp_œÄ_apply (f : colimit (D ‚ãô yoneda) ‚ü∂ F) (i : I) :
    limit.œÄ (D.rightOp ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) i ((colimitYonedaHomIsoLimitRightOp D F).hom f) =
      ‚ü®f.app (op (D.obj (op i)))
        ((colimit.Œπ (D ‚ãô yoneda) (op i)).app (op (D.obj (op i))) (ùüô (D.obj (op i))))‚ü© :=
  haveI : HasColimit (D.rightOp.leftOp ‚ãô yoneda) :=
    inferInstanceAs <| HasColimit (D ‚ãô yoneda)
  colimitYonedaHomIsoLimit'_œÄ_apply _ _ _ _

end IndYonedaContravariantRightOp

end Limits

end CategoryTheory
