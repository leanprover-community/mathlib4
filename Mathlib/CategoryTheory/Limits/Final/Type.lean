/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Limits.Final

/-!
# Action of an initial functor on sections

Given `F : C ‚•§ D` and `P : D ‚•§ Type w`, we define a map
`sectionsPrecomp F : P.sections ‚Üí (F ‚ãô P).sections` and
show that it is a bijection when `F` is initial.
As `Functor.sections` identify to limits of functors to types
(at least under suitable universe assumptions), this could
be deduced from general results about limits and
initial functors, but we provide a more down to earth proof.

-/

universe w v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

namespace Functor

variable {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [Category.{v‚ÇÅ} C] [Category.{v‚ÇÇ} D]

/-- When `F : C ‚•§ D` and `P : D ‚•§ Type _`, this is the obvious map
`P.section ‚Üí (F ‚ãô P).sections`. -/
@[simps]
def sectionsPrecomp (F : C ‚•§ D) {P : D ‚•§ Type w} (x : P.sections) :
    (F ‚ãô P).sections where
  val _ := x.val _
  property _ := x.property _

lemma bijective_sectionsPrecomp (F : C ‚•§ D) (P : D ‚•§ Type w) [F.Initial] :
    Function.Bijective (F.sectionsPrecomp (P := P)) := by
  refine ‚ü®fun s‚ÇÅ s‚ÇÇ h ‚Ü¶ ?_, fun t ‚Ü¶ ?_‚ü©
  ¬∑ ext Y
    let X : CostructuredArrow F Y := Classical.arbitrary _
    have := congr_fun (congr_arg Subtype.val h) X.left
    have h‚ÇÅ := s‚ÇÅ.property X.hom
    have h‚ÇÇ := s‚ÇÇ.property X.hom
    dsimp at this h‚ÇÅ h‚ÇÇ
    rw [‚Üê h‚ÇÅ, this, h‚ÇÇ]
  ¬∑ let X (Y : D) : CostructuredArrow F Y := Classical.arbitrary _
    let val (Y : D) : P.obj Y := P.map (X Y).hom (t.val (X Y).left)
    have h (Y : D) (Z : CostructuredArrow F Y) :
        val Y = P.map Z.hom (t.val Z.left) :=
      constant_of_preserves_morphisms (Œ± := P.obj Y)
        (fun (Z : CostructuredArrow F Y) ‚Ü¶ P.map Z.hom (t.val Z.left)) (by
          intro Z‚ÇÅ Z‚ÇÇ œÜ
          dsimp
          rw [‚Üê t.property œÜ.left]
          dsimp
          rw [‚Üê FunctorToTypes.map_comp_apply, CostructuredArrow.w]) _ _
    refine ‚ü®‚ü®val, fun {Y‚ÇÅ Y‚ÇÇ} f ‚Ü¶ ?_‚ü©, ?_‚ü©
    ¬∑ rw [h Y‚ÇÅ (X Y‚ÇÅ), h Y‚ÇÇ ((CostructuredArrow.map f).obj (X Y‚ÇÅ))]
      simp
    ¬∑ ext X : 2
      simpa using h (F.obj X) (CostructuredArrow.mk (ùüô _))

end Functor

end CategoryTheory
