/-
Copyright (c) 2025 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.CategoryTheory.Limits.Connected
import Mathlib.CategoryTheory.Limits.Final

/-!
# (Co)limit presentations

Let `J` and `C` be categories and `X : C`. We define type `ColimitPresentation J X` that contains
the data of objects `D‚±º` and natural maps `s‚±º : D‚±º ‚ü∂ X` that make `X` the colimit of the `D‚±º`.

(See `Mathlib/CategoryTheory/Presentable/ColimitPresentation.lean` for the construction of a
presentation of a colimit of objects that are equipped with presentations.)

## Main definitions:

- `CategoryTheory.Limits.ColimitPresentation`: A colimit presentation of `X` over `J` is a diagram
  `{D·µ¢}` in `C` and natural maps `s·µ¢ : D·µ¢ ‚ü∂ X` making `X` into the colimit of the `D·µ¢`.
- `CategoryTheory.Limits.LimitPresentation`: A limit presentation of `X` over `J` is a diagram
  `{D·µ¢}` in `C` and natural maps `s·µ¢ : X ‚ü∂ D·µ¢` making `X` into the limit of the `D·µ¢`.

## TODOs:

- Refactor `TransfiniteCompositionOfShape` so that it extends `ColimitPresentation`.
-/

universe s t w v u

namespace CategoryTheory.Limits

variable {C : Type u} [Category.{v} C]

/-- A colimit presentation of `X` over `J` is a diagram `{D·µ¢}` in `C` and natural maps
`s·µ¢ : D·µ¢ ‚ü∂ X` making `X` into the colimit of the `D·µ¢`. -/
structure ColimitPresentation (J : Type w) [Category.{t} J] (X : C) where
  /-- The diagram `{D·µ¢}`. -/
  diag : J ‚•§ C
  /-- The natural maps `s·µ¢ : D·µ¢ ‚ü∂ X`. -/
  Œπ : diag ‚ü∂ (Functor.const J).obj X
  /-- `X` is the colimit of the `D·µ¢` via `s·µ¢`. -/
  isColimit : IsColimit (Cocone.mk _ Œπ)

variable {J : Type w} [Category.{t} J] {X : C}

namespace ColimitPresentation

initialize_simps_projections ColimitPresentation (-isColimit)

/-- The cocone associated to a colimit presentation. -/
abbrev cocone (pres : ColimitPresentation J X) : Cocone pres.diag :=
  Cocone.mk _ pres.Œπ

lemma hasColimit (pres : ColimitPresentation J X) : HasColimit pres.diag :=
  ‚ü®_, pres.isColimit‚ü©

/-- The canonical colimit presentation of any object over a point. -/
@[simps]
noncomputable
def self (X : C) : ColimitPresentation PUnit.{s + 1} X where
  diag := (Functor.const _).obj X
  Œπ := ùüô _
  isColimit := isColimitConstCocone _ _

/-- If `F : J ‚•§ C` is a functor that has a colimit, then this is the obvious
colimit presentation of `colimit F`. -/
noncomputable def colimit (F : J ‚•§ C) [HasColimit F] :
    ColimitPresentation J (colimit F) where
  diag := F
  Œπ := _
  isColimit := colimit.isColimit _

/-- If `F` preserves colimits of shape `J`, it maps colimit presentations of `X` to
colimit presentations of `F(X)`. -/
@[simps]
noncomputable
def map (P : ColimitPresentation J X) {D : Type*} [Category D] (F : C ‚•§ D)
    [PreservesColimitsOfShape J F] : ColimitPresentation J (F.obj X) where
  diag := P.diag ‚ãô F
  Œπ := Functor.whiskerRight P.Œπ F ‚â´ (F.constComp _ _).hom
  isColimit := (isColimitOfPreserves F P.isColimit).ofIsoColimit (Cocones.ext (.refl _) (by simp))

/-- If `P` is a colimit presentation of `X`, it is possible to define another
colimit presentation of `X` where `P.diag` is replaced by an isomorphic functor. -/
@[simps]
def changeDiag (P : ColimitPresentation J X) {F : J ‚•§ C} (e : F ‚âÖ P.diag) :
    ColimitPresentation J X where
  diag := F
  Œπ := e.hom ‚â´ P.Œπ
  isColimit := (IsColimit.precomposeHomEquiv e _).2 P.isColimit

/-- Map a colimit presentation under an isomorphism. -/
@[simps]
def ofIso (P : ColimitPresentation J X) {Y : C} (e : X ‚âÖ Y) : ColimitPresentation J Y where
  diag := P.diag
  Œπ := P.Œπ ‚â´ (Functor.const J).map e.hom
  isColimit := P.isColimit.ofIsoColimit (Cocones.ext e fun _ ‚Ü¶ rfl)

/-- Change the index category of a colimit presentation. -/
@[simps]
noncomputable
def reindex (P : ColimitPresentation J X) {J' : Type*} [Category J'] (F : J' ‚•§ J) [F.Final] :
    ColimitPresentation J' X where
  diag := F ‚ãô P.diag
  Œπ := F.whiskerLeft P.Œπ
  isColimit := (Functor.Final.isColimitWhiskerEquiv F _).symm P.isColimit

end ColimitPresentation

/-- A limit presentation of `X` over `J` is a diagram `{D·µ¢}` in `C` and natural maps
`s·µ¢ : X ‚ü∂ D·µ¢` making `X` into the limit of the `D·µ¢`. -/
structure LimitPresentation (J : Type w) [Category.{t} J] (X : C) where
  /-- The diagram `{D·µ¢}`. -/
  diag : J ‚•§ C
  /-- The natural maps `s·µ¢ : X ‚ü∂ D·µ¢`. -/
  œÄ : (Functor.const J).obj X ‚ü∂ diag
  /-- `X` is the limit of the `D·µ¢` via `s·µ¢`. -/
  isLimit : IsLimit (Cone.mk _ œÄ)

variable {J : Type w} [Category.{t} J] {X : C}

namespace LimitPresentation

initialize_simps_projections LimitPresentation (-isLimit)

/-- The cone associated to a limit presentation. -/
abbrev cone (pres : LimitPresentation J X) : Cone pres.diag :=
  Cone.mk _ pres.œÄ

lemma hasLimit (pres : LimitPresentation J X) : HasLimit pres.diag :=
  ‚ü®_, pres.isLimit‚ü©

/-- The canonical limit presentation of any object over a point. -/
@[simps]
noncomputable
def self (X : C) : LimitPresentation PUnit.{s + 1} X where
  diag := (Functor.const _).obj X
  œÄ := ùüô _
  isLimit := isLimitConstCone _ _

/-- If `F : J ‚•§ C` is a functor that has a limit, then this is the obvious
limit presentation of `limit F`. -/
noncomputable def limit (F : J ‚•§ C) [HasLimit F] :
    LimitPresentation J (limit F) where
  diag := F
  œÄ := _
  isLimit := limit.isLimit _

/-- If `F` preserves limits of shape `J`, it maps limit presentations of `X` to
limit presentations of `F(X)`. -/
@[simps]
noncomputable
def map (P : LimitPresentation J X) {D : Type*} [Category D] (F : C ‚•§ D)
    [PreservesLimitsOfShape J F] : LimitPresentation J (F.obj X) where
  diag := P.diag ‚ãô F
  œÄ := (F.constComp _ _).inv ‚â´ Functor.whiskerRight P.œÄ F
  isLimit := (isLimitOfPreserves F P.isLimit).ofIsoLimit (Cones.ext (.refl _) (by simp))

/-- If `P` is a limit presentation of `X`, it is possible to define another
limit presentation of `X` where `P.diag` is replaced by an isomorphic functor. -/
@[simps]
def changeDiag (P : LimitPresentation J X) {F : J ‚•§ C} (e : F ‚âÖ P.diag) :
    LimitPresentation J X where
  diag := F
  œÄ := P.œÄ ‚â´ e.inv
  isLimit := (IsLimit.postcomposeHomEquiv e.symm _).2 P.isLimit

/-- Map a limit presentation under an isomorphism. -/
@[simps]
def ofIso (P : LimitPresentation J X) {Y : C} (e : X ‚âÖ Y) : LimitPresentation J Y where
  diag := P.diag
  œÄ := (Functor.const J).map e.inv ‚â´ P.œÄ
  isLimit := P.isLimit.ofIsoLimit (Cones.ext e)

/-- Change the index category of a limit presentation. -/
@[simps]
noncomputable
def reindex (P : LimitPresentation J X) {J' : Type*} [Category J'] (F : J' ‚•§ J) [F.Initial] :
    LimitPresentation J' X where
  diag := F ‚ãô P.diag
  œÄ := F.whiskerLeft P.œÄ
  isLimit := (Functor.Initial.isLimitWhiskerEquiv F _).symm P.isLimit

end LimitPresentation

end CategoryTheory.Limits
