/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.CategoryTheory.Limits.Shapes.CommSq
import Mathlib.CategoryTheory.Limits.Shapes.StrictInitial
import Mathlib.CategoryTheory.Limits.Shapes.Types
import Mathlib.Topology.Category.TopCat.Limits.Pullbacks
import Mathlib.CategoryTheory.Limits.FunctorCategory
import Mathlib.CategoryTheory.Limits.Constructions.FiniteProductsOfBinaryProducts

#align_import category_theory.extensive from "leanprover-community/mathlib"@"178a32653e369dce2da68dc6b2694e385d484ef1"

/-!

# Universal colimits and van Kampen colimits

## Main definitions
- `CategoryTheory.IsUniversalColimit`: A (colimit) cocone over a diagram `F : J ‚•§ C` is universal
  if it is stable under pullbacks.
- `CategoryTheory.IsVanKampenColimit`: A (colimit) cocone over a diagram `F : J ‚•§ C` is van
  Kampen if for every cocone `c'` over the pullback of the diagram `F' : J ‚•§ C'`,
  `c'` is colimiting iff `c'` is the pullback of `c`.

## References
- https://ncatlab.org/nlab/show/van+Kampen+colimit
- *Adhesive categories*, Stephen Lack and Pawe≈Ç Soboci≈Ñski

-/


open CategoryTheory.Limits

namespace CategoryTheory

universe v' u' v u

variable {J : Type v'} [Category.{u'} J] {C : Type u} [Category.{v} C]
variable {K : Type*} [Category K] {D : Type*} [Category D]

section NatTrans

/-- A natural transformation is equifibered if every commutative square of the following form is
a pullback.
```
F(X) ‚Üí F(Y)
 ‚Üì      ‚Üì
G(X) ‚Üí G(Y)
```
-/
def NatTrans.Equifibered {F G : J ‚•§ C} (Œ± : F ‚ü∂ G) : Prop :=
  ‚àÄ ‚¶Éi j : J‚¶Ñ (f : i ‚ü∂ j), IsPullback (F.map f) (Œ±.app i) (Œ±.app j) (G.map f)
#align category_theory.nat_trans.equifibered CategoryTheory.NatTrans.Equifibered

theorem NatTrans.equifibered_of_isIso {F G : J ‚•§ C} (Œ± : F ‚ü∂ G) [IsIso Œ±] : Equifibered Œ± :=
  fun _ _ f => IsPullback.of_vert_isIso ‚ü®NatTrans.naturality _ f‚ü©
#align category_theory.nat_trans.equifibered_of_is_iso CategoryTheory.NatTrans.equifibered_of_isIso

theorem NatTrans.Equifibered.comp {F G H : J ‚•§ C} {Œ± : F ‚ü∂ G} {Œ≤ : G ‚ü∂ H} (hŒ± : Equifibered Œ±)
    (hŒ≤ : Equifibered Œ≤) : Equifibered (Œ± ‚â´ Œ≤) :=
  fun _ _ f => (hŒ± f).paste_vert (hŒ≤ f)
#align category_theory.nat_trans.equifibered.comp CategoryTheory.NatTrans.Equifibered.comp

theorem NatTrans.Equifibered.whiskerRight {F G : J ‚•§ C} {Œ± : F ‚ü∂ G} (hŒ± : Equifibered Œ±)
    (H : C ‚•§ D) [PreservesLimitsOfShape WalkingCospan H] : Equifibered (whiskerRight Œ± H) :=
  fun _ _ f => (hŒ± f).map H
#align category_theory.nat_trans.equifibered.whisker_right CategoryTheory.NatTrans.Equifibered.whiskerRight

theorem NatTrans.Equifibered.whiskerLeft {K : Type*} [Category K]  {F G : J ‚•§ C} {Œ± : F ‚ü∂ G}
    (hŒ± : Equifibered Œ±) (H : K ‚•§ J) : Equifibered (whiskerLeft H Œ±) :=
  fun _ _ f => hŒ± (H.map f)

theorem mapPair_equifibered {F F' : Discrete WalkingPair ‚•§ C} (Œ± : F ‚ü∂ F') :
    NatTrans.Equifibered Œ± := by
  rintro ‚ü®‚ü®‚ü©‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : _ = j‚ü©‚ü©
  all_goals
    dsimp; simp only [Discrete.functor_map_id]
    exact IsPullback.of_horiz_isIso ‚ü®by simp only [Category.comp_id, Category.id_comp]‚ü©
#align category_theory.map_pair_equifibered CategoryTheory.mapPair_equifibered

theorem NatTrans.equifibered_of_discrete {Œπ : Type*} {F G : Discrete Œπ ‚•§ C}
    (Œ± : F ‚ü∂ G) : NatTrans.Equifibered Œ± := by
  rintro ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : i = j‚ü©‚ü©
  simp only [Discrete.functor_map_id]
  refine IsPullback.of_horiz_isIso ‚ü®by rw [Category.id_comp, Category.comp_id]‚ü©

end NatTrans

/-- A (colimit) cocone over a diagram `F : J ‚•§ C` is universal if it is stable under pullbacks. -/
def IsUniversalColimit {F : J ‚•§ C} (c : Cocone F) : Prop :=
  ‚àÄ ‚¶ÉF' : J ‚•§ C‚¶Ñ (c' : Cocone F') (Œ± : F' ‚ü∂ F) (f : c'.pt ‚ü∂ c.pt)
    (_ : Œ± ‚â´ c.Œπ = c'.Œπ ‚â´ (Functor.const J).map f) (_ : NatTrans.Equifibered Œ±),
    (‚àÄ j : J, IsPullback (c'.Œπ.app j) (Œ±.app j) f (c.Œπ.app j)) ‚Üí Nonempty (IsColimit c')
#align category_theory.is_universal_colimit CategoryTheory.IsUniversalColimit

/-- A (colimit) cocone over a diagram `F : J ‚•§ C` is van Kampen if for every cocone `c'` over the
pullback of the diagram `F' : J ‚•§ C'`, `c'` is colimiting iff `c'` is the pullback of `c`.

TODO: Show that this is iff the functor `C ‚•§ Cat·µí·µñ` sending `x` to `C/x` preserves it.
TODO: Show that this is iff the inclusion functor `C ‚•§ Span(C)` preserves it.
-/
def IsVanKampenColimit {F : J ‚•§ C} (c : Cocone F) : Prop :=
  ‚àÄ ‚¶ÉF' : J ‚•§ C‚¶Ñ (c' : Cocone F') (Œ± : F' ‚ü∂ F) (f : c'.pt ‚ü∂ c.pt)
    (_ : Œ± ‚â´ c.Œπ = c'.Œπ ‚â´ (Functor.const J).map f) (_ : NatTrans.Equifibered Œ±),
    Nonempty (IsColimit c') ‚Üî ‚àÄ j : J, IsPullback (c'.Œπ.app j) (Œ±.app j) f (c.Œπ.app j)
#align category_theory.is_van_kampen_colimit CategoryTheory.IsVanKampenColimit

theorem IsVanKampenColimit.isUniversal {F : J ‚•§ C} {c : Cocone F} (H : IsVanKampenColimit c) :
    IsUniversalColimit c :=
  fun _ c' Œ± f h hŒ± => (H c' Œ± f h hŒ±).mpr
#align category_theory.is_van_kampen_colimit.is_universal CategoryTheory.IsVanKampenColimit.isUniversal

/-- A van Kampen colimit is a colimit. -/
noncomputable def IsVanKampenColimit.isColimit {F : J ‚•§ C} {c : Cocone F}
    (h : IsVanKampenColimit c) : IsColimit c := by
  refine' ((h c (ùüô F) (ùüô c.pt : _) (by rw [Functor.map_id, Category.comp_id, Category.id_comp])
    (NatTrans.equifibered_of_isIso _)).mpr fun j => _).some
  haveI : IsIso (ùüô c.pt) := inferInstance
  exact IsPullback.of_vert_isIso ‚ü®by erw [NatTrans.id_app, Category.comp_id, Category.id_comp]‚ü©
#align category_theory.is_van_kampen_colimit.is_colimit CategoryTheory.IsVanKampenColimit.isColimit

theorem IsInitial.isVanKampenColimit [HasStrictInitialObjects C] {X : C} (h : IsInitial X) :
    IsVanKampenColimit (asEmptyCocone X) := by
  intro F' c' Œ± f hf hŒ±
  have : F' = Functor.empty C := by apply Functor.hext <;> rintro ‚ü®‚ü®‚ü©‚ü©
  subst this
  haveI := h.isIso_to f
  refine' ‚ü®by rintro _ ‚ü®‚ü®‚ü©‚ü©,
    fun _ => ‚ü®IsColimit.ofIsoColimit h (Cocones.ext (asIso f).symm <| by rintro ‚ü®‚ü®‚ü©‚ü©)‚ü©‚ü©
#align category_theory.is_initial.is_van_kampen_colimit CategoryTheory.IsInitial.isVanKampenColimit

section Functor

theorem IsVanKampenColimit.of_iso {F : J ‚•§ C} {c c' : Cocone F} (H : IsVanKampenColimit c)
    (e : c ‚âÖ c') : IsVanKampenColimit c' := by
  intro F' c'' Œ± f h hŒ±
  have : c'.Œπ ‚â´ (Functor.const J).map e.inv.hom = c.Œπ := by
    ext j
    exact e.inv.2 j
  rw [H c'' Œ± (f ‚â´ e.inv.1) (by rw [Functor.map_comp, ‚Üê reassoc_of% h, this]) hŒ±]
  apply forall_congr'
  intro j
  conv_lhs => rw [‚Üê Category.comp_id (Œ±.app j)]
  haveI : IsIso e.inv.hom := Functor.map_isIso (Cocones.forget _) e.inv
  exact (IsPullback.of_vert_isIso ‚ü®by simp‚ü©).paste_vert_iff (NatTrans.congr_app h j).symm
#align category_theory.is_van_kampen_colimit.of_iso CategoryTheory.IsVanKampenColimit.of_iso

theorem IsVanKampenColimit.precompose_isIso {F G : J ‚•§ C} (Œ± : F ‚ü∂ G) [IsIso Œ±]
    {c : Cocone G} (hc : IsVanKampenColimit c) :
    IsVanKampenColimit ((Cocones.precompose Œ±).obj c) := by
  intros F' c' Œ±' f e hŒ±
  refine (hc c' (Œ±' ‚â´ Œ±) f ((Category.assoc _ _ _).trans e)
    (hŒ±.comp (NatTrans.equifibered_of_isIso _))).trans ?_
  apply forall_congr'
  intro j
  simp only [Functor.const_obj_obj, NatTrans.comp_app,
    Cocones.precompose_obj_pt, Cocones.precompose_obj_Œπ]
  have : IsPullback (Œ±.app j ‚â´ c.Œπ.app j) (Œ±.app j) (ùüô _) (c.Œπ.app j) :=
    IsPullback.of_vert_isIso ‚ü®Category.comp_id _‚ü©
  rw [‚Üê IsPullback.paste_vert_iff this _, Category.comp_id]
  exact (congr_app e j).symm

theorem IsVanKampenColimit.precompose_isIso_iff {F G : J ‚•§ C} (Œ± : F ‚ü∂ G) [IsIso Œ±]
    {c : Cocone G} : IsVanKampenColimit ((Cocones.precompose Œ±).obj c) ‚Üî IsVanKampenColimit c :=
  ‚ü®fun hc ‚Ü¶ IsVanKampenColimit.of_iso (IsVanKampenColimit.precompose_isIso (inv Œ±) hc)
    (Cocones.ext (Iso.refl _) (by simp)),
    IsVanKampenColimit.precompose_isIso Œ±‚ü©

theorem IsVanKampenColimit.of_mapCocone (G : C ‚•§ D) {F : J ‚•§ C} {c : Cocone F}
    [PreservesLimitsOfShape WalkingCospan G] [ReflectsLimitsOfShape WalkingCospan G]
    [PreservesColimitsOfShape J G] [ReflectsColimitsOfShape J G]
    (H : IsVanKampenColimit (G.mapCocone c)) : IsVanKampenColimit c := by
  intro F' c' Œ± f h hŒ±
  refine' (Iff.trans _ (H (G.mapCocone c') (whiskerRight Œ± G) (G.map f)
      (by ext j; simpa using G.congr_map (NatTrans.congr_app h j))
      (hŒ±.whiskerRight G))).trans (forall_congr' fun j => _)
  ¬∑ exact ‚ü®fun h => ‚ü®isColimitOfPreserves G h.some‚ü©, fun h => ‚ü®isColimitOfReflects G h.some‚ü©‚ü©
  ¬∑ exact IsPullback.map_iff G (NatTrans.congr_app h.symm j)
#align category_theory.is_van_kampen_colimit.of_map CategoryTheory.IsVanKampenColimit.of_mapCocone

theorem IsVanKampenColimit.mapCocone_iff (G : C ‚•§ D) {F : J ‚•§ C} {c : Cocone F}
    [IsEquivalence G] : IsVanKampenColimit (G.mapCocone c) ‚Üî IsVanKampenColimit c :=
  ‚ü®IsVanKampenColimit.of_mapCocone G, fun hc ‚Ü¶ by
    let e : F ‚ãô G ‚ãô Functor.inv G ‚âÖ F := NatIso.hcomp (Iso.refl F) G.asEquivalence.unitIso.symm
    apply IsVanKampenColimit.of_mapCocone G.inv
    apply (IsVanKampenColimit.precompose_isIso_iff e.inv).mp
    refine hc.of_iso (Cocones.ext (G.asEquivalence.unitIso.app c.pt) ?_)
    simp [Functor.asEquivalence]‚ü©

theorem IsVanKampenColimit.whiskerEquivalence {K : Type*} [Category K] (e : J ‚âå K)
    {F : K ‚•§ C} {c : Cocone F} (hc : IsVanKampenColimit c) :
    IsVanKampenColimit (c.whisker e.functor) := by
  intro F' c' Œ± f e' hŒ±
  convert hc (c'.whisker e.inverse) (whiskerLeft e.inverse Œ± ‚â´ (e.invFunIdAssoc F).hom) f ?_
    ((hŒ±.whiskerLeft _).comp (NatTrans.equifibered_of_isIso _)) using 1
  ¬∑ exact (IsColimit.whiskerEquivalenceEquiv e.symm).nonempty_congr
  ¬∑ simp only [Functor.const_obj_obj, Functor.comp_obj, Cocone.whisker_pt, Cocone.whisker_Œπ,
      whiskerLeft_app, NatTrans.comp_app, Equivalence.invFunIdAssoc_hom_app, Functor.id_obj]
    constructor
    ¬∑ intro H k
      rw [‚Üê Category.comp_id f]
      refine (H (e.inverse.obj k)).paste_vert ?_
      have : IsIso (ùüô (Cocone.whisker e.functor c).pt) := inferInstance
      exact IsPullback.of_vert_isIso ‚ü®by simp‚ü©
    ¬∑ intro H j
      have : Œ±.app j = F'.map (e.unit.app _) ‚â´ Œ±.app _ ‚â´ F.map (e.counit.app (e.functor.obj j))
      ¬∑ simp [‚Üê Functor.map_comp]
      rw [‚Üê Category.id_comp f, this]
      refine IsPullback.paste_vert ?_ (H (e.functor.obj j))
      exact IsPullback.of_vert_isIso ‚ü®by simp‚ü©
  ¬∑ ext k
    simpa using congr_app e' (e.inverse.obj k)

theorem IsVanKampenColimit.whiskerEquivalence_iff {K : Type*} [Category K] (e : J ‚âå K)
    {F : K ‚•§ C} {c : Cocone F} :
    IsVanKampenColimit (c.whisker e.functor) ‚Üî IsVanKampenColimit c :=
  ‚ü®fun hc ‚Ü¶ ((hc.whiskerEquivalence e.symm).precompose_isIso (e.invFunIdAssoc F).inv).of_iso
      (Cocones.ext (Iso.refl _) (by simp)), IsVanKampenColimit.whiskerEquivalence e‚ü©

theorem isVanKampenColimit_of_evaluation [HasPullbacks D] [HasColimitsOfShape J D] (F : J ‚•§ C ‚•§ D)
    (c : Cocone F) (hc : ‚àÄ x : C, IsVanKampenColimit (((evaluation C D).obj x).mapCocone c)) :
    IsVanKampenColimit c := by
  intro F' c' Œ± f e hŒ±
  have := fun x => hc x (((evaluation C D).obj x).mapCocone c') (whiskerRight Œ± _)
      (((evaluation C D).obj x).map f)
      (by
        ext y
        dsimp
        exact NatTrans.congr_app (NatTrans.congr_app e y) x)
      (hŒ±.whiskerRight _)
  constructor
  ¬∑ rintro ‚ü®hc'‚ü© j
    refine' ‚ü®‚ü®(NatTrans.congr_app e j).symm‚ü©, ‚ü®evaluationJointlyReflectsLimits _ _‚ü©‚ü©
    refine' fun x => (isLimitMapConePullbackConeEquiv _ _).symm _
    exact ((this x).mp ‚ü®PreservesColimit.preserves hc'‚ü© _).isLimit
  ¬∑ exact fun H => ‚ü®evaluationJointlyReflectsColimits _ fun x =>
      ((this x).mpr fun j => (H j).map ((evaluation C D).obj x)).some‚ü©
#align category_theory.is_van_kampen_colimit_of_evaluation CategoryTheory.isVanKampenColimit_of_evaluation

end Functor

section Initial

theorem hasStrictInitial_of_isUniversal [HasInitial C]
    (H : IsUniversalColimit (BinaryCofan.mk (ùüô (‚ä•_ C)) (ùüô (‚ä•_ C)))) : HasStrictInitialObjects C :=
  hasStrictInitialObjects_of_initial_is_strict
    (by
      intro A f
      suffices IsColimit (BinaryCofan.mk (ùüô A) (ùüô A)) by
        obtain ‚ü®l, h‚ÇÅ, h‚ÇÇ‚ü© := Limits.BinaryCofan.IsColimit.desc' this (f ‚â´ initial.to A) (ùüô A)
        rcases(Category.id_comp _).symm.trans h‚ÇÇ with rfl
        exact ‚ü®‚ü®_, ((Category.id_comp _).symm.trans h‚ÇÅ).symm, initialIsInitial.hom_ext _ _‚ü©‚ü©
      refine' (H (BinaryCofan.mk (ùüô _) (ùüô _)) (mapPair f f) f (by ext ‚ü®‚ü®‚ü©‚ü© <;> dsimp <;> simp)
        (mapPair_equifibered _) _).some
      rintro ‚ü®‚ü®‚ü©‚ü© <;> dsimp <;>
        exact IsPullback.of_horiz_isIso ‚ü®(Category.id_comp _).trans (Category.comp_id _).symm‚ü©)
#align category_theory.has_strict_initial_of_is_universal CategoryTheory.hasStrictInitial_of_isUniversal

theorem isVanKampenColimit_of_isEmpty [HasStrictInitialObjects C] [IsEmpty J] {F : J ‚•§ C}
    (c : Cocone F) (hc : IsColimit c) : IsVanKampenColimit c := by
  have : IsInitial c.pt
  ¬∑ have := (IsColimit.precomposeInvEquiv (Functor.uniqueFromEmpty _) _).symm
      (hc.whiskerEquivalence (equivalenceOfIsEmpty (Discrete PEmpty.{1}) J))
    exact IsColimit.ofIsoColimit this (Cocones.ext (Iso.refl c.pt) (fun {X} ‚Ü¶ isEmptyElim X))
  replace this := IsInitial.isVanKampenColimit this
  apply (IsVanKampenColimit.whiskerEquivalence_iff
    (equivalenceOfIsEmpty (Discrete PEmpty.{1}) J)).mp
  exact (this.precompose_isIso (Functor.uniqueFromEmpty
    ((equivalenceOfIsEmpty (Discrete PEmpty.{1}) J).functor ‚ãô F)).hom).of_iso
    (Cocones.ext (Iso.refl _) (by simp))

end Initial

section BinaryCoproduct

variable {X Y : C}

theorem BinaryCofan.isVanKampen_iff (c : BinaryCofan X Y) :
    IsVanKampenColimit c ‚Üî
      ‚àÄ {X' Y' : C} (c' : BinaryCofan X' Y') (Œ±X : X' ‚ü∂ X) (Œ±Y : Y' ‚ü∂ Y) (f : c'.pt ‚ü∂ c.pt)
        (_ : Œ±X ‚â´ c.inl = c'.inl ‚â´ f) (_ : Œ±Y ‚â´ c.inr = c'.inr ‚â´ f),
        Nonempty (IsColimit c') ‚Üî IsPullback c'.inl Œ±X f c.inl ‚àß IsPullback c'.inr Œ±Y f c.inr := by
  constructor
  ¬∑ introv H hŒ±X hŒ±Y
    rw [H c' (mapPair Œ±X Œ±Y) f (by ext ‚ü®‚ü®‚ü©‚ü© <;> dsimp <;> assumption) (mapPair_equifibered _)]
    constructor
    ¬∑ intro H
      exact ‚ü®H _, H _‚ü©
    ¬∑ rintro H ‚ü®‚ü®‚ü©‚ü©
      exacts [H.1, H.2]
  ¬∑ introv H F' hŒ± h
    let X' := F'.obj ‚ü®WalkingPair.left‚ü©
    let Y' := F'.obj ‚ü®WalkingPair.right‚ü©
    have : F' = pair X' Y' := by
      apply Functor.hext
      ¬∑ rintro ‚ü®‚ü®‚ü©‚ü© <;> rfl
      ¬∑ rintro ‚ü®‚ü®‚ü©‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : _ = j‚ü©‚ü© <;> simp
    clear_value X' Y'
    subst this
    change BinaryCofan X' Y' at c'
    rw [H c' _ _ _ (NatTrans.congr_app hŒ± ‚ü®WalkingPair.left‚ü©)
        (NatTrans.congr_app hŒ± ‚ü®WalkingPair.right‚ü©)]
    constructor
    ¬∑ rintro H ‚ü®‚ü®‚ü©‚ü©
      exacts [H.1, H.2]
    ¬∑ intro H
      exact ‚ü®H _, H _‚ü©
#align category_theory.binary_cofan.is_van_kampen_iff CategoryTheory.BinaryCofan.isVanKampen_iff

theorem BinaryCofan.isVanKampen_mk {X Y : C} (c : BinaryCofan X Y)
    (cofans : ‚àÄ X Y : C, BinaryCofan X Y) (colimits : ‚àÄ X Y, IsColimit (cofans X Y))
    (cones : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z), PullbackCone f g)
    (limits : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z), IsLimit (cones f g))
    (h‚ÇÅ : ‚àÄ {X' Y' : C} (Œ±X : X' ‚ü∂ X) (Œ±Y : Y' ‚ü∂ Y) (f : (cofans X' Y').pt ‚ü∂ c.pt)
      (_ : Œ±X ‚â´ c.inl = (cofans X' Y').inl ‚â´ f) (_ : Œ±Y ‚â´ c.inr = (cofans X' Y').inr ‚â´ f),
      IsPullback (cofans X' Y').inl Œ±X f c.inl ‚àß IsPullback (cofans X' Y').inr Œ±Y f c.inr)
    (h‚ÇÇ : ‚àÄ {Z : C} (f : Z ‚ü∂ c.pt),
      IsColimit (BinaryCofan.mk (cones f c.inl).fst (cones f c.inr).fst)) :
    IsVanKampenColimit c := by
  rw [BinaryCofan.isVanKampen_iff]
  introv hX hY
  constructor
  ¬∑ rintro ‚ü®h‚ü©
    let e := h.coconePointUniqueUpToIso (colimits _ _)
    obtain ‚ü®hl, hr‚ü© := h‚ÇÅ Œ±X Œ±Y (e.inv ‚â´ f) (by simp [hX]) (by simp [hY])
    constructor
    ¬∑ rw [‚Üê Category.id_comp Œ±X, ‚Üê Iso.hom_inv_id_assoc e f]
      haveI : IsIso (ùüô X') := inferInstance
      have : c'.inl ‚â´ e.hom = ùüô X' ‚â´ (cofans X' Y').inl := by
        dsimp
        simp
      exact (IsPullback.of_vert_isIso ‚ü®this‚ü©).paste_vert hl
    ¬∑ rw [‚Üê Category.id_comp Œ±Y, ‚Üê Iso.hom_inv_id_assoc e f]
      haveI : IsIso (ùüô Y') := inferInstance
      have : c'.inr ‚â´ e.hom = ùüô Y' ‚â´ (cofans X' Y').inr := by
        dsimp
        simp
      exact (IsPullback.of_vert_isIso ‚ü®this‚ü©).paste_vert hr
  ¬∑ rintro ‚ü®H‚ÇÅ, H‚ÇÇ‚ü©
    refine' ‚ü®IsColimit.ofIsoColimit _ <| (isoBinaryCofanMk _).symm‚ü©
    let e‚ÇÅ : X' ‚âÖ _ := H‚ÇÅ.isLimit.conePointUniqueUpToIso (limits _ _)
    let e‚ÇÇ : Y' ‚âÖ _ := H‚ÇÇ.isLimit.conePointUniqueUpToIso (limits _ _)
    have he‚ÇÅ : c'.inl = e‚ÇÅ.hom ‚â´ (cones f c.inl).fst := by simp
    have he‚ÇÇ : c'.inr = e‚ÇÇ.hom ‚â´ (cones f c.inr).fst := by simp
    rw [he‚ÇÅ, he‚ÇÇ]
    apply BinaryCofan.isColimitCompRightIso (BinaryCofan.mk _ _)
    apply BinaryCofan.isColimitCompLeftIso (BinaryCofan.mk _ _)
    exact h‚ÇÇ f
#align category_theory.binary_cofan.is_van_kampen_mk CategoryTheory.BinaryCofan.isVanKampen_mk

theorem BinaryCofan.mono_inr_of_isVanKampen [HasInitial C] {X Y : C} {c : BinaryCofan X Y}
    (h : IsVanKampenColimit c) : Mono c.inr := by
  refine' PullbackCone.mono_of_isLimitMkIdId _ (IsPullback.isLimit _)
  refine' (h (BinaryCofan.mk (initial.to Y) (ùüô Y)) (mapPair (initial.to X) (ùüô Y)) c.inr _
      (mapPair_equifibered _)).mp ‚ü®_‚ü© ‚ü®WalkingPair.right‚ü©
  ¬∑ ext ‚ü®‚ü®‚ü©‚ü© <;> dsimp; simp
  ¬∑ exact ((BinaryCofan.isColimit_iff_isIso_inr initialIsInitial _).mpr (by
      dsimp
      infer_instance)).some
#align category_theory.binary_cofan.mono_inr_of_is_van_kampen CategoryTheory.BinaryCofan.mono_inr_of_isVanKampen

theorem BinaryCofan.isPullback_initial_to_of_isVanKampen [HasInitial C] {c : BinaryCofan X Y}
    (h : IsVanKampenColimit c) : IsPullback (initial.to _) (initial.to _) c.inl c.inr := by
  refine' ((h (BinaryCofan.mk (initial.to Y) (ùüô Y)) (mapPair (initial.to X) (ùüô Y)) c.inr _
      (mapPair_equifibered _)).mp ‚ü®_‚ü© ‚ü®WalkingPair.left‚ü©).flip
  ¬∑ ext ‚ü®‚ü®‚ü©‚ü© <;> dsimp; simp
  ¬∑ exact ((BinaryCofan.isColimit_iff_isIso_inr initialIsInitial _).mpr (by
      dsimp
      infer_instance)).some
#align category_theory.binary_cofan.is_pullback_initial_to_of_is_van_kampen CategoryTheory.BinaryCofan.isPullback_initial_to_of_isVanKampen

end BinaryCoproduct

section FiniteCoproducts

theorem isUniversalColimit_extendCofan {n : ‚Ñï} (f : Fin (n + 1) ‚Üí C)
    {c‚ÇÅ : Cofan fun i : Fin n ‚Ü¶ f i.succ} {c‚ÇÇ : BinaryCofan (f 0) c‚ÇÅ.pt}
    (t‚ÇÅ : IsUniversalColimit c‚ÇÅ) (t‚ÇÇ : IsUniversalColimit c‚ÇÇ)
    [‚àÄ {Z} (i : Z ‚ü∂ c‚ÇÇ.pt), HasPullback c‚ÇÇ.inr i] :
    IsUniversalColimit (extendCofan c‚ÇÅ c‚ÇÇ) := by
  intro F c Œ± i e hŒ± H
  let F' : Fin (n + 1) ‚Üí C := F.obj ‚àò Discrete.mk
  have : F = Discrete.functor F'
  ¬∑ apply Functor.hext
    ¬∑ exact fun i ‚Ü¶ rfl
    ¬∑ rintro ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : i = j‚ü©‚ü©
      simp
  have t‚ÇÅ' := @t‚ÇÅ (Discrete.functor (fun j ‚Ü¶ F.obj ‚ü®j.succ‚ü©))
    (Cofan.mk (pullback c‚ÇÇ.inr i) <| fun j ‚Ü¶ pullback.lift (Œ±.app _ ‚â´ c‚ÇÅ.inj _) (c.Œπ.app _) ?_)
    (Discrete.natTrans <| fun i ‚Ü¶ Œ±.app _) pullback.fst ?_ (NatTrans.equifibered_of_discrete _) ?_
  rotate_left
  ¬∑ simpa only [Functor.const_obj_obj, pair_obj_right, Discrete.functor_obj, Category.assoc,
      extendCofan_pt, Functor.const_obj_obj, NatTrans.comp_app, extendCofan_Œπ_app,
      Fin.cases_succ, Functor.const_map_app] using congr_app e ‚ü®j.succ‚ü©
  ¬∑ ext j
    dsimp
    simp only [limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app, Cofan.inj]
  ¬∑ intro j
    simp only [pair_obj_right, Functor.const_obj_obj, Discrete.functor_obj, id_eq,
      extendCofan_pt, eq_mpr_eq_cast, Cofan.mk_pt, Cofan.mk_Œπ_app, Discrete.natTrans_app]
    refine IsPullback.of_right ?_ ?_ (IsPullback.of_hasPullback (BinaryCofan.inr c‚ÇÇ) i).flip
    ¬∑ simp only [Functor.const_obj_obj, pair_obj_right, limit.lift_œÄ,
        PullbackCone.mk_pt, PullbackCone.mk_œÄ_app]
      exact H _
    ¬∑ simp only [limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app, Cofan.inj]
  obtain ‚ü®H‚ÇÅ‚ü© := t‚ÇÅ'
  have t‚ÇÇ' := @t‚ÇÇ (pair (F.obj ‚ü®0‚ü©) (pullback c‚ÇÇ.inr i)) (BinaryCofan.mk (c.Œπ.app ‚ü®0‚ü©) pullback.snd)
    (mapPair (Œ±.app _) pullback.fst) i ?_ (mapPair_equifibered _) ?_
  rotate_left
  ¬∑ ext ‚ü®‚ü®‚ü©‚ü©
    ¬∑ simpa [mapPair] using congr_app e ‚ü®0‚ü©
    ¬∑ simpa using pullback.condition
  ¬∑ rintro ‚ü®‚ü®‚ü©‚ü©
    ¬∑ simp only [pair_obj_right, Functor.const_obj_obj, pair_obj_left, BinaryCofan.mk_pt,
        BinaryCofan.Œπ_app_left, BinaryCofan.mk_inl, mapPair_left]
      exact H ‚ü®0‚ü©
    ¬∑ simp only [pair_obj_right, Functor.const_obj_obj, BinaryCofan.mk_pt, BinaryCofan.Œπ_app_right,
        BinaryCofan.mk_inr, mapPair_right]
      exact (IsPullback.of_hasPullback (BinaryCofan.inr c‚ÇÇ) i).flip
  obtain ‚ü®H‚ÇÇ‚ü© := t‚ÇÇ'
  clear_value F'
  subst this
  refine ‚ü®IsColimit.ofIsoColimit (extendCofanIsColimit
    (fun i ‚Ü¶ (Discrete.functor F').obj ‚ü®i‚ü©) H‚ÇÅ H‚ÇÇ) <| Cocones.ext (Iso.refl _) ?_‚ü©
  dsimp
  rintro ‚ü®j‚ü©
  simp only [Discrete.functor_obj, limit.lift_œÄ, PullbackCone.mk_pt,
    PullbackCone.mk_œÄ_app, Category.comp_id]
  induction' j using Fin.inductionOn
  ¬∑ simp only [Fin.cases_zero]
  ¬∑ simp only [Fin.cases_succ]

theorem isVanKampenColimit_extendCofan {n : ‚Ñï} (f : Fin (n + 1) ‚Üí C)
    {c‚ÇÅ : Cofan fun i : Fin n ‚Ü¶ f i.succ} {c‚ÇÇ : BinaryCofan (f 0) c‚ÇÅ.pt}
    (t‚ÇÅ : IsVanKampenColimit c‚ÇÅ) (t‚ÇÇ : IsVanKampenColimit c‚ÇÇ)
    [‚àÄ {Z} (i : Z ‚ü∂ c‚ÇÇ.pt), HasPullback c‚ÇÇ.inr i]
    [HasFiniteCoproducts C] :
    IsVanKampenColimit (extendCofan c‚ÇÅ c‚ÇÇ) := by
  intro F c Œ± i e hŒ±
  refine ‚ü®?_, isUniversalColimit_extendCofan f t‚ÇÅ.isUniversal t‚ÇÇ.isUniversal c Œ± i e hŒ±‚ü©
  intro ‚ü®Hc‚ü© ‚ü®j‚ü©
  have t‚ÇÇ' := (@t‚ÇÇ (pair (F.obj ‚ü®0‚ü©) (‚àê fun (j : Fin n) ‚Ü¶ F.obj ‚ü®j.succ‚ü©))
    (BinaryCofan.mk (P := c.pt) (c.Œπ.app _) (Sigma.desc <| fun b ‚Ü¶ c.Œπ.app _))
    (mapPair (Œ±.app _) (Sigma.desc <| fun b ‚Ü¶ Œ±.app _ ‚â´ c‚ÇÅ.inj _)) i ?_
    (mapPair_equifibered _)).mp ‚ü®?_‚ü©
  rotate_left
  ¬∑ ext ‚ü®‚ü®‚ü©‚ü©
    ¬∑ simpa only [pair_obj_left, Functor.const_obj_obj, pair_obj_right, Discrete.functor_obj,
        NatTrans.comp_app, mapPair_left, BinaryCofan.Œπ_app_left, BinaryCofan.mk_pt,
        BinaryCofan.mk_inl, Functor.const_map_app, extendCofan_pt,
        extendCofan_Œπ_app, Fin.cases_zero] using congr_app e ‚ü®0‚ü©
    ¬∑ dsimp
      ext j
      simpa only [colimit.Œπ_desc_assoc, Discrete.functor_obj, Cofan.mk_pt, Cofan.mk_Œπ_app,
        Category.assoc, extendCofan_pt, Functor.const_obj_obj, NatTrans.comp_app, extendCofan_Œπ_app,
        Fin.cases_succ, Functor.const_map_app] using congr_app e ‚ü®j.succ‚ü©
  ¬∑ let F' : Fin (n + 1) ‚Üí C := F.obj ‚àò Discrete.mk
    have : F = Discrete.functor F'
    ¬∑ apply Functor.hext
      ¬∑ exact fun i ‚Ü¶ rfl
      ¬∑ rintro ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : i = j‚ü©‚ü©
        simp
    clear_value F'
    subst this
    apply BinaryCofan.IsColimit.mk _ (fun {T} f‚ÇÅ f‚ÇÇ ‚Ü¶ Hc.desc (Cofan.mk T (Fin.cases f‚ÇÅ
      (fun i ‚Ü¶ Sigma.Œπ (fun (j : Fin n) ‚Ü¶ (Discrete.functor F').obj ‚ü®j.succ‚ü©) _ ‚â´ f‚ÇÇ))))
    ¬∑ intro T f‚ÇÅ f‚ÇÇ
      simp only [Discrete.functor_obj, pair_obj_left, BinaryCofan.mk_pt, Functor.const_obj_obj,
        BinaryCofan.Œπ_app_left, BinaryCofan.mk_inl, IsColimit.fac, Cofan.mk_pt, Cofan.mk_Œπ_app,
        Fin.cases_zero]
    ¬∑ intro T f‚ÇÅ f‚ÇÇ
      simp only [Discrete.functor_obj, pair_obj_right, BinaryCofan.mk_pt, Functor.const_obj_obj,
        BinaryCofan.Œπ_app_right, BinaryCofan.mk_inr]
      ext j
      simp only [colimit.Œπ_desc_assoc, Discrete.functor_obj, Cofan.mk_pt,
        Cofan.mk_Œπ_app, IsColimit.fac, Fin.cases_succ]
    ¬∑ intro T f‚ÇÅ f‚ÇÇ f‚ÇÉ m‚ÇÅ m‚ÇÇ
      simp at m‚ÇÅ m‚ÇÇ ‚ä¢
      refine Hc.uniq (Cofan.mk T (Fin.cases f‚ÇÅ
        (fun i ‚Ü¶ Sigma.Œπ (fun (j : Fin n) ‚Ü¶ (Discrete.functor F').obj ‚ü®j.succ‚ü©) _ ‚â´ f‚ÇÇ))) _ ?_
      intro ‚ü®j‚ü©
      simp only [Discrete.functor_obj, Cofan.mk_pt, Functor.const_obj_obj, Cofan.mk_Œπ_app]
      induction' j using Fin.inductionOn with j _
      ¬∑ simp only [Fin.cases_zero, m‚ÇÅ]
      ¬∑ simp only [‚Üê m‚ÇÇ, colimit.Œπ_desc_assoc, Discrete.functor_obj,
          Cofan.mk_pt, Cofan.mk_Œπ_app, Fin.cases_succ]
  induction' j using Fin.inductionOn with j _
  ¬∑ exact t‚ÇÇ' ‚ü®WalkingPair.left‚ü©
  ¬∑ have t‚ÇÅ' := (@t‚ÇÅ (Discrete.functor (fun j ‚Ü¶ F.obj ‚ü®j.succ‚ü©)) (Cofan.mk _ _) (Discrete.natTrans
      <| fun i ‚Ü¶ Œ±.app _) (Sigma.desc (fun j ‚Ü¶ Œ±.app _ ‚â´ c‚ÇÅ.inj _)) ?_
      (NatTrans.equifibered_of_discrete _)).mp ‚ü®coproductIsCoproduct _‚ü© ‚ü®j‚ü©
    rotate_left
    ¬∑ ext ‚ü®j‚ü©
      dsimp
      erw [colimit.Œπ_desc] -- Why?
      rfl
    simpa [Functor.const_obj_obj, Discrete.functor_obj, extendCofan_pt, extendCofan_Œπ_app,
      Fin.cases_succ, BinaryCofan.mk_pt, colimit.cocone_x, Cofan.mk_pt, Cofan.mk_Œπ_app,
      BinaryCofan.Œπ_app_right, BinaryCofan.mk_inr, colimit.Œπ_desc,
      Discrete.natTrans_app] using t‚ÇÅ'.paste_horiz (t‚ÇÇ' ‚ü®WalkingPair.right‚ü©)

end FiniteCoproducts

end CategoryTheory
