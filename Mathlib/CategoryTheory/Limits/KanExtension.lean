/-
Copyright (c) 2021 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta, Adam Topaz
-/
import Mathlib.CategoryTheory.Comma.StructuredArrow
import Mathlib.CategoryTheory.Limits.Shapes.Terminal
import Mathlib.CategoryTheory.PUnit

#align_import category_theory.limits.kan_extension from "leanprover-community/mathlib"@"c9c9fa15fec7ca18e9ec97306fb8764bfe988a7e"

/-!

# Right Kan extensions

This file defines the right Kan extensions of a functor.
They exist under the assumption that the target category has enough limits.

The main definition is `Ran Œπ`, where `Œπ : S ‚•§ L` is a functor.
Namely, `Ran Œπ : (S ‚•§ D) ‚•§ (L ‚•§ D)` is the right Kan extension.

To access the adjunction associated to this, use `Ran.adjunction`.

## TODO

- refactor `Ran` so that it relies on the general API for Kan
extensions of functors, similarly as the left Kan extension
adjunction is defined in `CategoryTheory.Functor.KanExtension.Adjunction`.


## Projects

A lot of boilerplate could be generalized by defining and working with pseudofunctors.


-/


noncomputable section

namespace CategoryTheory

open Limits

universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

variable {S : Type u‚ÇÅ} {L : Type u‚ÇÇ} {D : Type u‚ÇÉ}
variable [Category.{v‚ÇÅ} S] [Category.{v‚ÇÇ} L] [Category.{v‚ÇÉ} D]
variable (Œπ : S ‚•§ L)

namespace Ran

attribute [local simp] StructuredArrow.proj

/-- The diagram indexed by `Ran.index Œπ x` used to define `Ran`. -/
abbrev diagram (F : S ‚•§ D) (x : L) : StructuredArrow x Œπ ‚•§ D :=
  StructuredArrow.proj x Œπ ‚ãô F
set_option linter.uppercaseLean3 false in
#align category_theory.Ran.diagram CategoryTheory.Ran.diagram

variable {Œπ}

/-- A cone over `Ran.diagram Œπ F x` used to define `Ran`. -/
@[simp]
def cone {F : S ‚•§ D} {G : L ‚•§ D} (x : L) (f : Œπ ‚ãô G ‚ü∂ F) : Cone (diagram Œπ F x) where
  pt := G.obj x
  œÄ :=
    { app := fun i => G.map i.hom ‚â´ f.app i.right
      naturality := by
        rintro ‚ü®‚ü®il‚ü©, ir, i‚ü© ‚ü®‚ü®jl‚ü©, jr, j‚ü© ‚ü®‚ü®‚ü®fl‚ü©‚ü©, fr, ff‚ü©
        dsimp at *
        dsimp at ff
        simp only [Category.id_comp, Category.assoc] at *
        rw [ff]
        have := f.naturality
        aesop_cat }
set_option linter.uppercaseLean3 false in
#align category_theory.Ran.cone CategoryTheory.Ran.cone

variable (Œπ)

/-- An auxiliary definition used to define `Ran`. -/
@[simps]
def loc (F : S ‚•§ D) [h : ‚àÄ x, HasLimit (diagram Œπ F x)] : L ‚•§ D where
  obj x := limit (diagram Œπ F x)
  map {X Y} f :=
    haveI : HasLimit <| StructuredArrow.map f ‚ãô diagram Œπ F X := h Y
    limit.pre (diagram Œπ F X) (StructuredArrow.map f)
  map_id := by
    intro l
    haveI : HasLimit (StructuredArrow.map (ùüô _) ‚ãô diagram Œπ F l) := h _
    dsimp
    ext j
    simp only [Category.id_comp, limit.pre_œÄ]
    congr 1
    simp
  map_comp := by
    intro x y z f g
    apply limit.hom_ext
    intro j
    erw [limit.pre_pre, limit.pre_œÄ, limit.pre_œÄ]
    congr 1
    aesop_cat
set_option linter.uppercaseLean3 false in
#align category_theory.Ran.loc CategoryTheory.Ran.loc

/-- An auxiliary definition used to define `Ran` and `Ran.adjunction`. -/
@[simps]
def equiv (F : S ‚•§ D) [h : ‚àÄ x, HasLimit (diagram Œπ F x)] (G : L ‚•§ D) :
    (G ‚ü∂ loc Œπ F) ‚âÉ (((whiskeringLeft _ _ _).obj Œπ).obj G ‚ü∂ F) where
  toFun f :=
    { app := fun x => f.app _ ‚â´ limit.œÄ (diagram Œπ F (Œπ.obj x)) (StructuredArrow.mk (ùüô _))
      naturality := by
        intro x y ff
        dsimp only [whiskeringLeft]
        simp only [Functor.comp_map, NatTrans.naturality_assoc, loc_map, Category.assoc]
        congr 1
        haveI : HasLimit (StructuredArrow.map (Œπ.map ff) ‚ãô diagram Œπ F (Œπ.obj x)) := h _
        erw [limit.pre_œÄ]
        let t : StructuredArrow.mk (ùüô (Œπ.obj x)) ‚ü∂
          (StructuredArrow.map (Œπ.map ff)).obj (StructuredArrow.mk (ùüô (Œπ.obj y))) :=
          StructuredArrow.homMk ff ?_
        ¬∑ convert (limit.w (diagram Œπ F (Œπ.obj x)) t).symm using 1
        ¬∑ simp }
  invFun f :=
    { app := fun x => limit.lift (diagram Œπ F x) (cone _ f)
      naturality := by
        intro x y ff
        apply limit.hom_ext
        intros j
        haveI : HasLimit (StructuredArrow.map ff ‚ãô diagram Œπ F x) := h _
        erw [limit.lift_pre, limit.lift_œÄ, Category.assoc, limit.lift_œÄ (cone _ f) j]
        simp }
  left_inv := by
    intro x
    ext k
    apply limit.hom_ext
    intros j
    dsimp only [cone]
    rw [limit.lift_œÄ]
    simp only [NatTrans.naturality_assoc, loc_map]
    haveI : HasLimit (StructuredArrow.map j.hom ‚ãô diagram Œπ F k) := h _
    erw [limit.pre_œÄ]
    congr
    rcases j with ‚ü®‚ü®‚ü©, _, _‚ü©
    aesop_cat
  right_inv := by aesop_cat
set_option linter.uppercaseLean3 false in
#align category_theory.Ran.equiv CategoryTheory.Ran.equiv

end Ran

/-- The right Kan extension of a functor. -/
@[simps!]
def ran [‚àÄ X, HasLimitsOfShape (StructuredArrow X Œπ) D] : (S ‚•§ D) ‚•§ L ‚•§ D :=
  Adjunction.rightAdjointOfEquiv (fun F G => (Ran.equiv Œπ G F).symm) (by {
    -- Porting note (#10936): was `tidy`
    intros X' X Y f g
    ext t
    apply limit.hom_ext
    intros j
    dsimp [Ran.equiv]
    simp })
set_option linter.uppercaseLean3 false in
#align category_theory.Ran CategoryTheory.ran

namespace Ran

variable (D)

/-- The adjunction associated to `Ran`. -/
def adjunction [‚àÄ X, HasLimitsOfShape (StructuredArrow X Œπ) D] :
    (whiskeringLeft _ _ D).obj Œπ ‚ä£ ran Œπ :=
  Adjunction.adjunctionOfEquivRight _ _
set_option linter.uppercaseLean3 false in
#align category_theory.Ran.adjunction CategoryTheory.Ran.adjunction

theorem reflective [Œπ.Full] [Œπ.Faithful] [‚àÄ X, HasLimitsOfShape (StructuredArrow X Œπ) D] :
    IsIso (adjunction D Œπ).counit := by
  simp only [NatTrans.isIso_iff_isIso_app]
  intro F X
  dsimp [adjunction, equiv]
  simp only [Category.id_comp]
  exact ((limit.isLimit _).conePointUniqueUpToIso
    (limitOfDiagramInitial StructuredArrow.mkIdInitial _)).isIso_hom
set_option linter.uppercaseLean3 false in
#align category_theory.Ran.reflective CategoryTheory.Ran.reflective

end Ran

end CategoryTheory

-- These lemmas have always been bad (#7657), but leanprover/lean4#2644 made `simp` start noticing
attribute [nolint simpNF] CategoryTheory.Ran.equiv_symm_apply_app
  CategoryTheory.Ran.equiv_apply_app
