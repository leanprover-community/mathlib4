/-
Copyright (c) 2021 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta, Adam Topaz
-/
import Mathlib.CategoryTheory.Limits.Shapes.Terminal
import Mathlib.CategoryTheory.PUnit
import Mathlib.CategoryTheory.StructuredArrow

#align_import category_theory.limits.kan_extension from "leanprover-community/mathlib"@"c9c9fa15fec7ca18e9ec97306fb8764bfe988a7e"

/-!

# Kan extensions

This file defines the right and left Kan extensions of a functor.
They exist under the assumption that the target category has enough limits
resp. colimits.

The main definitions are `Ran Œπ` and `Lan Œπ`, where `Œπ : S ‚•§ L` is a functor.
Namely, `Ran Œπ` is the right Kan extension, while `Lan Œπ` is the left Kan extension,
both as functors `(S ‚•§ D) ‚•§ (L ‚•§ D)`.

To access the right resp. left adjunction associated to these, use `Ran.adjunction`
resp. `Lan.adjunction`.

# Projects

A lot of boilerplate could be generalized by defining and working with pseudofunctors.

-/


noncomputable section

namespace CategoryTheory

open Limits

universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

variable {S : Type u‚ÇÅ} {L : Type u‚ÇÇ} {D : Type u‚ÇÉ}

variable [Category.{v‚ÇÅ} S] [Category.{v‚ÇÇ} L] [Category.{v‚ÇÉ} D]

variable (Œπ : S ‚•§ L)

namespace Ran

attribute [local simp] StructuredArrow.proj

/-- The diagram indexed by `Ran.index Œπ x` used to define `Ran`. -/
abbrev diagram (F : S ‚•§ D) (x : L) : StructuredArrow x Œπ ‚•§ D :=
  StructuredArrow.proj x Œπ ‚ãô F
set_option linter.uppercaseLean3 false in
#align category_theory.Ran.diagram CategoryTheory.Ran.diagram

variable {Œπ}

/-- A cone over `Ran.diagram Œπ F x` used to define `Ran`. -/
@[simp]
def cone {F : S ‚•§ D} {G : L ‚•§ D} (x : L) (f : Œπ ‚ãô G ‚ü∂ F) : Cone (diagram Œπ F x)
    where
  pt := G.obj x
  œÄ :=
    { app := fun i => G.map i.hom ‚â´ f.app i.right
      naturality := by
        rintro ‚ü®‚ü®il‚ü©, ir, i‚ü© ‚ü®‚ü®jl‚ü©, jr, j‚ü© ‚ü®‚ü®‚ü®fl‚ü©‚ü©, fr, ff‚ü©
        dsimp at *
        dsimp at ff
        simp only [Category.id_comp, Category.assoc] at *
        rw [ff]
        have := f.naturality
        aesop_cat }
set_option linter.uppercaseLean3 false in
#align category_theory.Ran.cone CategoryTheory.Ran.cone

variable (Œπ)

/-- An auxiliary definition used to define `Ran`. -/
@[simps]
def loc (F : S ‚•§ D) [h : ‚àÄ x, HasLimit (diagram Œπ F x)] : L ‚•§ D
    where
  obj x := limit (diagram Œπ F x)
  map {X Y} f :=
    haveI : HasLimit <| StructuredArrow.map f ‚ãô diagram Œπ F X := h Y
    limit.pre (diagram Œπ F X) (StructuredArrow.map f)
  map_id := by
    intro l
    haveI : HasLimit (StructuredArrow.map (ùüô _) ‚ãô diagram Œπ F l) := h _
    dsimp
    ext j
    simp only [Category.id_comp, limit.pre_œÄ]
    congr 1
    simp
  map_comp := by
    intro x y z f g
    apply limit.hom_ext
    intro j
    -- Porting note: The fact that we need to add these instances all over the place
    -- is certainly not ideal.
    haveI : HasLimit (StructuredArrow.map f ‚ãô diagram Œπ F _) := h _
    haveI : HasLimit (StructuredArrow.map g ‚ãô diagram Œπ F _) := h _
    haveI : HasLimit (StructuredArrow.map (f ‚â´ g) ‚ãô diagram Œπ F _) := h _
    haveI : HasLimit (StructuredArrow.map g ‚ãô StructuredArrow.map f ‚ãô diagram Œπ F _) := h _
    haveI : HasLimit ((StructuredArrow.map g ‚ãô StructuredArrow.map f) ‚ãô diagram Œπ F _) := h _
    erw [limit.pre_pre, limit.pre_œÄ, limit.pre_œÄ]
    congr 1
    aesop_cat
set_option linter.uppercaseLean3 false in
#align category_theory.Ran.loc CategoryTheory.Ran.loc

/-- An auxiliary definition used to define `Ran` and `Ran.adjunction`. -/
@[simps]
def equiv (F : S ‚•§ D) [h : ‚àÄ x, HasLimit (diagram Œπ F x)] (G : L ‚•§ D) :
    (G ‚ü∂ loc Œπ F) ‚âÉ (((whiskeringLeft _ _ _).obj Œπ).obj G ‚ü∂ F)
    where
  toFun f :=
    { app := fun x => f.app _ ‚â´ limit.œÄ (diagram Œπ F (Œπ.obj x)) (StructuredArrow.mk (ùüô _))
      naturality := by
        intro x y ff
        dsimp only [whiskeringLeft]
        simp only [Functor.comp_map, NatTrans.naturality_assoc, loc_map, Category.assoc]
        congr 1
        haveI : HasLimit (StructuredArrow.map (Œπ.map ff) ‚ãô diagram Œπ F (Œπ.obj x)) := h _
        erw [limit.pre_œÄ]
        let t : StructuredArrow.mk (ùüô (Œπ.obj x)) ‚ü∂
          (StructuredArrow.map (Œπ.map ff)).obj (StructuredArrow.mk (ùüô (Œπ.obj y))) :=
          StructuredArrow.homMk ff ?_
        convert (limit.w (diagram Œπ F (Œπ.obj x)) t).symm using 1
        simp }
  invFun f :=
    { app := fun x => limit.lift (diagram Œπ F x) (cone _ f)
      naturality := by
        intro x y ff
        apply limit.hom_ext
        intros j
        haveI : HasLimit (StructuredArrow.map ff ‚ãô diagram Œπ F x) := h _
        erw [limit.lift_pre, limit.lift_œÄ, Category.assoc, limit.lift_œÄ (cone _ f) j]
        simp }
  left_inv := by
    intro x
    ext k
    apply limit.hom_ext
    intros j
    dsimp only [cone]
    rw [limit.lift_œÄ]
    simp only [NatTrans.naturality_assoc, loc_map]
    haveI : HasLimit (StructuredArrow.map j.hom ‚ãô diagram Œπ F k) := h _
    erw [limit.pre_œÄ]
    congr
    rcases j with ‚ü®‚ü®‚ü©, _, _‚ü©
    aesop_cat
  right_inv := by aesop_cat
set_option linter.uppercaseLean3 false in
#align category_theory.Ran.equiv CategoryTheory.Ran.equiv

end Ran

/-- The right Kan extension of a functor. -/
@[simps!]
def ran [‚àÄ X, HasLimitsOfShape (StructuredArrow X Œπ) D] : (S ‚•§ D) ‚•§ L ‚•§ D :=
  Adjunction.rightAdjointOfEquiv (fun F G => (Ran.equiv Œπ G F).symm) (by {
    -- Porting note: was `tidy`
    intros X' X Y f g
    ext t
    apply limit.hom_ext
    intros j
    dsimp [Ran.equiv]
    simp })
set_option linter.uppercaseLean3 false in
#align category_theory.Ran CategoryTheory.ran

namespace Ran

variable (D)

/-- The adjunction associated to `Ran`. -/
def adjunction [‚àÄ X, HasLimitsOfShape (StructuredArrow X Œπ) D] :
    (whiskeringLeft _ _ D).obj Œπ ‚ä£ ran Œπ :=
  Adjunction.adjunctionOfEquivRight _ _
set_option linter.uppercaseLean3 false in
#align category_theory.Ran.adjunction CategoryTheory.Ran.adjunction

theorem reflective [Full Œπ] [Faithful Œπ] [‚àÄ X, HasLimitsOfShape (StructuredArrow X Œπ) D] :
    IsIso (adjunction D Œπ).counit := by
  suffices ‚àÄ (X : S ‚•§ D), IsIso (NatTrans.app (adjunction D Œπ).counit X) by
    apply NatIso.isIso_of_isIso_app
  intro F
  suffices ‚àÄ (X : S), IsIso (NatTrans.app (NatTrans.app (adjunction D Œπ).counit F) X) by
    apply NatIso.isIso_of_isIso_app
  intro X
  dsimp [adjunction, equiv]
  simp only [Category.id_comp]
  exact
    IsIso.of_iso
      ((limit.isLimit _).conePointUniqueUpToIso
        (limitOfDiagramInitial StructuredArrow.mkIdInitial _))
set_option linter.uppercaseLean3 false in
#align category_theory.Ran.reflective CategoryTheory.Ran.reflective

end Ran

namespace Lan

attribute [local simp] CostructuredArrow.proj

/-- The diagram indexed by `Lan.index Œπ x` used to define `Lan`. -/
abbrev diagram (F : S ‚•§ D) (x : L) : CostructuredArrow Œπ x ‚•§ D :=
  CostructuredArrow.proj Œπ x ‚ãô F
set_option linter.uppercaseLean3 false in
#align category_theory.Lan.diagram CategoryTheory.Lan.diagram

variable {Œπ}

/-- A cocone over `Lan.diagram Œπ F x` used to define `Lan`. -/
@[simp]
def cocone {F : S ‚•§ D} {G : L ‚•§ D} (x : L) (f : F ‚ü∂ Œπ ‚ãô G) : Cocone (diagram Œπ F x)
    where
  pt := G.obj x
  Œπ :=
    { app := fun i => f.app i.left ‚â´ G.map i.hom
      naturality := by
        rintro ‚ü®ir, ‚ü®il‚ü©, i‚ü© ‚ü®jl, ‚ü®jr‚ü©, j‚ü© ‚ü®fl, ‚ü®‚ü®fl‚ü©‚ü©, ff‚ü©
        dsimp at *
        simp only [Functor.comp_map, Category.comp_id, NatTrans.naturality_assoc]
        rw [‚Üê G.map_comp, ff]
        aesop_cat }
set_option linter.uppercaseLean3 false in
#align category_theory.Lan.cocone CategoryTheory.Lan.cocone

variable (Œπ)

/-- An auxiliary definition used to define `Lan`. -/
@[simps]
def loc (F : S ‚•§ D) [I : ‚àÄ x, HasColimit (diagram Œπ F x)] : L ‚•§ D
    where
  obj x := colimit (diagram Œπ F x)
  map {x y} f :=
    haveI : HasColimit (CostructuredArrow.map f ‚ãô diagram Œπ F y) := I _
    colimit.pre (diagram Œπ F y) (CostructuredArrow.map f)
  map_id := by
    intro l
    dsimp
    haveI : HasColimit (CostructuredArrow.map (ùüô l) ‚ãô diagram Œπ F l) := I _
    ext j
    erw [colimit.Œπ_pre, Category.comp_id]
    congr 1
    simp
  map_comp := by
    intro x y z f g
    dsimp
    haveI : HasColimit (CostructuredArrow.map (f ‚â´ g) ‚ãô diagram Œπ F z) := I _
    ext j
    let ff : CostructuredArrow Œπ _ ‚•§ _ := CostructuredArrow.map f
    let gg : CostructuredArrow Œπ _ ‚•§ _ := CostructuredArrow.map g
    let dd := diagram Œπ F z
    -- Porting note: It seems that even Lean3 had some trouble with instances in this case.
    -- I don't know why lean can't deduce the following three instances...
    haveI : HasColimit (ff ‚ãô gg ‚ãô dd) := I _
    haveI : HasColimit ((ff ‚ãô gg) ‚ãô dd) := I _
    haveI : HasColimit (gg ‚ãô dd) := I _
    change _ = colimit.Œπ ((ff ‚ãô gg) ‚ãô dd) j ‚â´ _ ‚â´ _
    erw [colimit.pre_pre dd gg ff, colimit.Œπ_pre, colimit.Œπ_pre]
    congr 1
    simp
set_option linter.uppercaseLean3 false in
#align category_theory.Lan.loc CategoryTheory.Lan.loc

/-- An auxiliary definition used to define `Lan` and `Lan.adjunction`. -/
@[simps]
def equiv (F : S ‚•§ D) [I : ‚àÄ x, HasColimit (diagram Œπ F x)] (G : L ‚•§ D) :
    (loc Œπ F ‚ü∂ G) ‚âÉ (F ‚ü∂ ((whiskeringLeft _ _ _).obj Œπ).obj G)
    where
  toFun f :=
    { app := fun x => colimit.Œπ (diagram Œπ F (Œπ.obj x)) (CostructuredArrow.mk (ùüô _)) ‚â´ f.app _
      naturality := by
        intro x y ff
        dsimp only [whiskeringLeft]
        simp only [Functor.comp_map, Category.assoc]
        rw [‚Üê f.naturality (Œπ.map ff), ‚Üê Category.assoc, ‚Üê Category.assoc]
        let fff : CostructuredArrow Œπ _ ‚•§ _ := CostructuredArrow.map (Œπ.map ff)
        -- same issue :-(
        haveI : HasColimit (fff ‚ãô diagram Œπ F (Œπ.obj y)) := I _
        erw [colimit.Œπ_pre (diagram Œπ F (Œπ.obj y)) fff (CostructuredArrow.mk (ùüô _))]
        let xx : CostructuredArrow Œπ (Œπ.obj y) := CostructuredArrow.mk (Œπ.map ff)
        let yy : CostructuredArrow Œπ (Œπ.obj y) := CostructuredArrow.mk (ùüô _)
        let fff : xx ‚ü∂ yy :=
          CostructuredArrow.homMk ff
            (by
              simp only [CostructuredArrow.mk_hom_eq_self]
              erw [Category.comp_id])
        erw [colimit.w (diagram Œπ F (Œπ.obj y)) fff]
        congr
        simp }
  invFun f :=
    { app := fun x => colimit.desc (diagram Œπ F x) (cocone _ f)
      naturality := by
        intro x y ff
        apply colimit.hom_ext
        intros j
        haveI : HasColimit (CostructuredArrow.map ff ‚ãô diagram Œπ F y) := I _
        erw [colimit.pre_desc, ‚Üê Category.assoc, colimit.Œπ_desc, colimit.Œπ_desc]
        simp }
  left_inv := by
    intros x
    dsimp
    ext k
    dsimp
    apply colimit.hom_ext
    intros j
    rw [colimit.Œπ_desc]
    dsimp only [cocone]
    rw [Category.assoc, ‚Üê x.naturality j.hom, ‚Üê Category.assoc]
    congr 1
    dsimp [loc]
    haveI : HasColimit (CostructuredArrow.map j.hom ‚ãô diagram Œπ F k) := I _
    erw [colimit.Œπ_pre (diagram Œπ F k) (CostructuredArrow.map j.hom)]
    congr
    rcases j with ‚ü®_, ‚ü®‚ü©, _‚ü©
    simp only [CostructuredArrow.map_mk, Category.id_comp]
    rfl
  right_inv := by aesop_cat
set_option linter.uppercaseLean3 false in
#align category_theory.Lan.equiv CategoryTheory.Lan.equiv

-- These lemmas have always been bad (#7657), but leanprover/lean4#2644 made `simp` start noticing
attribute [nolint simpNF] CategoryTheory.Ran.equiv_symm_apply_app
  CategoryTheory.Ran.equiv_apply_app
  CategoryTheory.Lan.equiv_symm_apply_app
  CategoryTheory.Lan.equiv_apply_app

end Lan

/-- The left Kan extension of a functor. -/
@[simps!]
def lan [‚àÄ X, HasColimitsOfShape (CostructuredArrow Œπ X) D] : (S ‚•§ D) ‚•§ L ‚•§ D :=
  Adjunction.leftAdjointOfEquiv (fun F G => Lan.equiv Œπ F G) (by {
    intros X' X Y f g
    ext
    simp [Lan.equiv]
    -- This used to be the end of the proof before leanprover/lean4#2644
    erw [Equiv.coe_fn_mk, Equiv.coe_fn_mk]
    simp })
set_option linter.uppercaseLean3 false in
#align category_theory.Lan CategoryTheory.lan

namespace Lan

variable (D)

/-- The adjunction associated to `Lan`. -/
def adjunction [‚àÄ X, HasColimitsOfShape (CostructuredArrow Œπ X) D] :
    lan Œπ ‚ä£ (whiskeringLeft _ _ D).obj Œπ :=
  Adjunction.adjunctionOfEquivLeft _ _
set_option linter.uppercaseLean3 false in
#align category_theory.Lan.adjunction CategoryTheory.Lan.adjunction

theorem coreflective [Full Œπ] [Faithful Œπ] [‚àÄ X, HasColimitsOfShape (CostructuredArrow Œπ X) D] :
    IsIso (adjunction D Œπ).unit := by
  suffices ‚àÄ (X : S ‚•§ D), IsIso (NatTrans.app (adjunction D Œπ).unit X) by
    apply NatIso.isIso_of_isIso_app
  intro F
  suffices ‚àÄ (X : S), IsIso (NatTrans.app (NatTrans.app (adjunction D Œπ).unit F) X) by
    apply NatIso.isIso_of_isIso_app
  intro X
  dsimp [adjunction, equiv]
  simp only [Category.comp_id]
  exact
    IsIso.of_iso
      ((colimit.isColimit _).coconePointUniqueUpToIso
          (colimitOfDiagramTerminal CostructuredArrow.mkIdTerminal _)).symm
set_option linter.uppercaseLean3 false in
#align category_theory.Lan.coreflective CategoryTheory.Lan.coreflective

end Lan

end CategoryTheory
