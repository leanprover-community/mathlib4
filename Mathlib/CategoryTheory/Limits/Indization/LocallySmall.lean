/-
Copyright (c) 2024 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/
import Mathlib.CategoryTheory.Limits.Preserves.Ulift
import Mathlib.CategoryTheory.Limits.IndYoneda
import Mathlib.CategoryTheory.Limits.Indization.IndObject

/-!
# There are only `v`-many natural transformations between Ind-objects

We provide the instance `LocallySmall.{v} (FullSubcategory (IsIndObject (C := C)))`, which will
serve as the basis for our definition of the category of Ind-objects.

## Future work

The equivalence established here serves as the basis for a well-known calculation of hom-sets of
ind-objects as a limit of a colimit.
-/

open CategoryTheory Limits Opposite

universe v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ

variable {C : Type u} [Category.{v} C]

namespace CategoryTheory

section

variable {I : Type u‚ÇÅ} [Category.{v‚ÇÅ} I] [HasColimitsOfShape I (Type v)]
  [HasLimitsOfShape I·µí·µñ (Type v)]
variable {J : Type u‚ÇÇ} [Category.{v‚ÇÇ} J]
  [HasLimitsOfShape I·µí·µñ (Type (max u v))]
variable (F : I ‚•§ C) (G : C·µí·µñ ‚•§ Type v)

/-- Variant of `colimitYonedaHomIsoLimitOp`: natural transformations with domain
`colimit (F ‚ãô yoneda)` are equivalent to a limit in a lower universe. -/
noncomputable def colimitYonedaHomEquiv : (colimit (F ‚ãô yoneda) ‚ü∂ G) ‚âÉ limit (F.op ‚ãô G) :=
  Equiv.symm <| Equiv.ulift.symm.trans <| Equiv.symm <| Iso.toEquiv <| calc
  (colimit (F ‚ãô yoneda) ‚ü∂ G) ‚âÖ limit (F.op ‚ãô G ‚ãô uliftFunctor.{u}) :=
        colimitYonedaHomIsoLimitOp _ _
  _ ‚âÖ limit ((F.op ‚ãô G) ‚ãô uliftFunctor.{u}) :=
        HasLimit.isoOfNatIso (Functor.associator _ _ _).symm
  _ ‚âÖ uliftFunctor.{u}.obj (limit (F.op ‚ãô G)) :=
        (preservesLimitIso _ _).symm

@[simp]
theorem colimitYonedaHomEquiv_œÄ_apply (Œ∑ : colimit (F ‚ãô yoneda) ‚ü∂ G) (i : I·µí·µñ) :
    limit.œÄ (F.op ‚ãô G) i (colimitYonedaHomEquiv F G Œ∑) =
      Œ∑.app (op (F.obj i.unop)) ((colimit.Œπ (F ‚ãô yoneda) i.unop).app _ (ùüô _)) := by
  simp only [Functor.comp_obj, Functor.op_obj, colimitYonedaHomEquiv, uliftFunctor_obj,
    Iso.instTransIso_trans, Iso.trans_assoc, Iso.toEquiv_comp, Equiv.symm_trans_apply,
    Equiv.symm_symm, Equiv.trans_apply, Iso.toEquiv_fun, Iso.symm_hom, Equiv.ulift_apply]
  have (a) := congrArg ULift.down
    (congrFun (preservesLimitIso_inv_œÄ uliftFunctor.{u, v} (F.op ‚ãô G) i) a)
  dsimp at this
  rw [this, ‚Üê types_comp_apply (HasLimit.isoOfNatIso _).hom (limit.œÄ _ _),
    HasLimit.isoOfNatIso_hom_œÄ]
  simp

instance : Small.{v} (colimit (F ‚ãô yoneda) ‚ü∂ G) where
  equiv_small := ‚ü®_, ‚ü®colimitYonedaHomEquiv F G‚ü©‚ü©

end

instance : LocallySmall.{v} (FullSubcategory (IsIndObject (C := C))) where
  hom_small X Y := by
    obtain ‚ü®‚ü®P‚ü©‚ü© := X.2
    obtain ‚ü®‚ü®Q‚ü©‚ü© := Y.2
    let e‚ÇÅ := IsColimit.coconePointUniqueUpToIso (P.isColimit) (colimit.isColimit _)
    let e‚ÇÇ := IsColimit.coconePointUniqueUpToIso (Q.isColimit) (colimit.isColimit _)
    let e‚ÇÉ := Iso.homCongr e‚ÇÅ e‚ÇÇ
    dsimp only [colimit.cocone_x] at e‚ÇÉ
    exact small_map e‚ÇÉ

end CategoryTheory
