/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou

! This file was ported from Lean 3 source module category_theory.limits.mono_coprod
! leanprover-community/mathlib commit 70fd9563a21e7b963887c9360bd29b2393e6225a
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.CategoryTheory.Limits.Shapes.RegularMono
import Mathbin.CategoryTheory.Limits.Shapes.ZeroMorphisms

/-!

# Categories where inclusions into coproducts are monomorphisms

If `C` is a category, the class `mono_coprod C` expresses that left
inclusions `A ‚ü∂ A ‚®ø B` are monomorphisms when `has_coproduct A B`
is satisfied. If it is so, it is shown that right inclusions are
also monomorphisms.

TODO @joelriou: show that if `X : I ‚Üí C` and `Œπ : J ‚Üí I` is an injective map,
then the canonical morphism `‚àê (X ‚àò Œπ) ‚ü∂ ‚àê X` is a monomorphism.

TODO: define distributive categories, and show that they satisfy `mono_coprod`, see
<https://ncatlab.org/toddtrimble/published/distributivity+implies+monicity+of+coproduct+inclusions>

-/


noncomputable section

open CategoryTheory CategoryTheory.Category CategoryTheory.Limits

universe u

namespace CategoryTheory

namespace Limits

variable (C : Type _) [Category C]

/-- This condition expresses that inclusion morphisms into coproducts are monomorphisms. -/
class MonoCoprod : Prop where
  binaryCofan_inl : ‚àÄ ‚¶ÉA B : C‚¶Ñ (c : BinaryCofan A B) (hc : IsColimit c), Mono c.inl
#align category_theory.limits.mono_coprod CategoryTheory.Limits.MonoCoprod

variable {C}

instance (priority := 100) monoCoprodOfHasZeroMorphisms [HasZeroMorphisms C] : MonoCoprod C :=
  ‚ü®fun A B c hc =>
    by
    haveI : is_split_mono c.inl :=
      is_split_mono.mk' (split_mono.mk (hc.desc (binary_cofan.mk (ùüô A) 0)) (is_colimit.fac _ _ _))
    infer_instance‚ü©
#align category_theory.limits.mono_coprod_of_has_zero_morphisms CategoryTheory.Limits.monoCoprodOfHasZeroMorphisms

namespace MonoCoprod

theorem binaryCofan_inr {A B : C} [MonoCoprod C] (c : BinaryCofan A B) (hc : IsColimit c) :
    Mono c.inr :=
  haveI hc' : is_colimit (binary_cofan.mk c.inr c.inl) :=
    binary_cofan.is_colimit_mk (fun s => hc.desc (binary_cofan.mk s.inr s.inl)) (by tidy) (by tidy)
      fun s m h‚ÇÅ h‚ÇÇ =>
      binary_cofan.is_colimit.hom_ext hc
        (by simp only [h‚ÇÇ, is_colimit.fac, binary_cofan.Œπ_app_left, binary_cofan.mk_inl])
        (by simp only [h‚ÇÅ, is_colimit.fac, binary_cofan.Œπ_app_right, binary_cofan.mk_inr])
  binary_cofan_inl _ hc'
#align category_theory.limits.mono_coprod.binary_cofan_inr CategoryTheory.Limits.MonoCoprod.binaryCofan_inr

instance {A B : C} [MonoCoprod C] [HasBinaryCoproduct A B] : Mono (coprod.inl : A ‚ü∂ A ‚®ø B) :=
  binaryCofan_inl _ (colimit.isColimit _)

instance {A B : C} [MonoCoprod C] [HasBinaryCoproduct A B] : Mono (coprod.inr : B ‚ü∂ A ‚®ø B) :=
  binaryCofan_inr _ (colimit.isColimit _)

theorem mono_inl_iff {A B : C} {c‚ÇÅ c‚ÇÇ : BinaryCofan A B} (hc‚ÇÅ : IsColimit c‚ÇÅ) (hc‚ÇÇ : IsColimit c‚ÇÇ) :
    Mono c‚ÇÅ.inl ‚Üî Mono c‚ÇÇ.inl :=
  by
  suffices
    ‚àÄ (c‚ÇÅ c‚ÇÇ : binary_cofan A B) (hc‚ÇÅ : is_colimit c‚ÇÅ) (hc‚ÇÇ : is_colimit c‚ÇÇ) (h : mono c‚ÇÅ.inl),
      mono c‚ÇÇ.inl
    by exact ‚ü®fun h‚ÇÅ => this _ _ hc‚ÇÅ hc‚ÇÇ h‚ÇÅ, fun h‚ÇÇ => this _ _ hc‚ÇÇ hc‚ÇÅ h‚ÇÇ‚ü©
  intro c‚ÇÅ c‚ÇÇ hc‚ÇÅ hc‚ÇÇ
  intro
  simpa only [is_colimit.comp_cocone_point_unique_up_to_iso_hom] using
    mono_comp c‚ÇÅ.inl (hc‚ÇÅ.cocone_point_unique_up_to_iso hc‚ÇÇ).Hom
#align category_theory.limits.mono_coprod.mono_inl_iff CategoryTheory.Limits.MonoCoprod.mono_inl_iff

theorem mk' (h : ‚àÄ A B : C, ‚àÉ (c : BinaryCofan A B)(hc : IsColimit c), Mono c.inl) : MonoCoprod C :=
  ‚ü®fun A B c' hc' => by
    obtain ‚ü®c, hc‚ÇÅ, hc‚ÇÇ‚ü© := h A B
    simpa only [mono_inl_iff hc' hc‚ÇÅ] using hc‚ÇÇ‚ü©
#align category_theory.limits.mono_coprod.mk' CategoryTheory.Limits.MonoCoprod.mk'

instance monoCoprodType : MonoCoprod (Type u) :=
  MonoCoprod.mk' fun A B =>
    by
    refine' ‚ü®binary_cofan.mk (Sum.inl : A ‚ü∂ Sum A B) Sum.inr, _, _‚ü©
    ¬∑ refine'
        binary_cofan.is_colimit.mk _
          (fun Y f‚ÇÅ f‚ÇÇ x => by
            cases x
            exacts[f‚ÇÅ x, f‚ÇÇ x])
          (fun Y f‚ÇÅ f‚ÇÇ => rfl) (fun Y f‚ÇÅ f‚ÇÇ => rfl) _
      intro Y f‚ÇÅ f‚ÇÇ m h‚ÇÅ h‚ÇÇ
      ext x
      cases x
      ¬∑ dsimp
        exact congr_fun h‚ÇÅ x
      ¬∑ dsimp
        exact congr_fun h‚ÇÇ x
    ¬∑ rw [mono_iff_injective]
      intro a‚ÇÅ a‚ÇÇ h
      simp only [binary_cofan.mk_inl] at h
      dsimp at h
      simpa only using h
#align category_theory.limits.mono_coprod.mono_coprod_type CategoryTheory.Limits.MonoCoprod.monoCoprodType

end MonoCoprod

end Limits

end CategoryTheory

