/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.ConcreteCategory.Basic
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.BinaryProducts
import Mathlib.CategoryTheory.Limits.Shapes.RegularMono
import Mathlib.CategoryTheory.Limits.Shapes.ZeroMorphisms

#align_import category_theory.limits.mono_coprod from "leanprover-community/mathlib"@"70fd9563a21e7b963887c9360bd29b2393e6225a"

/-!

# Categories where inclusions into coproducts are monomorphisms

If `C` is a category, the class `MonoCoprod C` expresses that left
inclusions `A ‚ü∂ A ‚®ø B` are monomorphisms when `HasCoproduct A B`
is satisfied. If it is so, it is shown that right inclusions are
also monomorphisms.

More generally, we deduce that when suitable coproducts exists, then
if `X : I ‚Üí C` and `Œπ : J ‚Üí I` is an injective map,
then the canonical morphism `‚àê (X ‚àò Œπ) ‚ü∂ ‚àê X` is a monomorphism.
It also follows that for any `i : I`, `Sigma.Œπ X i : X i ‚ü∂ ‚àê X` is
a monomorphism.

TODO: define distributive categories, and show that they satisfy `MonoCoprod`, see
<https://ncatlab.org/toddtrimble/published/distributivity+implies+monicity+of+coproduct+inclusions>

-/


noncomputable section

open CategoryTheory CategoryTheory.Category CategoryTheory.Limits

universe u

namespace CategoryTheory

namespace Limits

variable (C : Type*) [Category C]

/-- This condition expresses that inclusion morphisms into coproducts are monomorphisms. -/
class MonoCoprod : Prop where
  /-- the left inclusion of a colimit binary cofan is mono -/
  binaryCofan_inl : ‚àÄ ‚¶ÉA B : C‚¶Ñ (c : BinaryCofan A B) (_ : IsColimit c), Mono c.inl
#align category_theory.limits.mono_coprod CategoryTheory.Limits.MonoCoprod

variable {C}

instance (priority := 100) monoCoprodOfHasZeroMorphisms [HasZeroMorphisms C] : MonoCoprod C :=
  ‚ü®fun A B c hc => by
    haveI : IsSplitMono c.inl :=
      IsSplitMono.mk' (SplitMono.mk (hc.desc (BinaryCofan.mk (ùüô A) 0)) (IsColimit.fac _ _ _))
    infer_instance‚ü©
#align category_theory.limits.mono_coprod_of_has_zero_morphisms CategoryTheory.Limits.monoCoprodOfHasZeroMorphisms

namespace MonoCoprod

theorem binaryCofan_inr {A B : C} [MonoCoprod C] (c : BinaryCofan A B) (hc : IsColimit c) :
    Mono c.inr := by
  haveI hc' : IsColimit (BinaryCofan.mk c.inr c.inl) :=
    BinaryCofan.IsColimit.mk _ (fun f‚ÇÅ f‚ÇÇ => hc.desc (BinaryCofan.mk f‚ÇÇ f‚ÇÅ))
      (by aesop_cat) (by aesop_cat)
      (fun f‚ÇÅ f‚ÇÇ m h‚ÇÅ h‚ÇÇ => BinaryCofan.IsColimit.hom_ext hc (by aesop_cat) (by aesop_cat))
  exact binaryCofan_inl _ hc'
#align category_theory.limits.mono_coprod.binary_cofan_inr CategoryTheory.Limits.MonoCoprod.binaryCofan_inr

instance {A B : C} [MonoCoprod C] [HasBinaryCoproduct A B] : Mono (coprod.inl : A ‚ü∂ A ‚®ø B) :=
  binaryCofan_inl _ (colimit.isColimit _)

instance {A B : C} [MonoCoprod C] [HasBinaryCoproduct A B] : Mono (coprod.inr : B ‚ü∂ A ‚®ø B) :=
  binaryCofan_inr _ (colimit.isColimit _)

theorem mono_inl_iff {A B : C} {c‚ÇÅ c‚ÇÇ : BinaryCofan A B} (hc‚ÇÅ : IsColimit c‚ÇÅ) (hc‚ÇÇ : IsColimit c‚ÇÇ) :
    Mono c‚ÇÅ.inl ‚Üî Mono c‚ÇÇ.inl := by
  suffices
    ‚àÄ (c‚ÇÅ c‚ÇÇ : BinaryCofan A B) (_ : IsColimit c‚ÇÅ) (_ : IsColimit c‚ÇÇ) (_ : Mono c‚ÇÅ.inl),
      Mono c‚ÇÇ.inl
    by exact ‚ü®fun h‚ÇÅ => this _ _ hc‚ÇÅ hc‚ÇÇ h‚ÇÅ, fun h‚ÇÇ => this _ _ hc‚ÇÇ hc‚ÇÅ h‚ÇÇ‚ü©
  intro c‚ÇÅ c‚ÇÇ hc‚ÇÅ hc‚ÇÇ
  intro
  simpa only [IsColimit.comp_coconePointUniqueUpToIso_hom] using
    mono_comp c‚ÇÅ.inl (hc‚ÇÅ.coconePointUniqueUpToIso hc‚ÇÇ).hom
#align category_theory.limits.mono_coprod.mono_inl_iff CategoryTheory.Limits.MonoCoprod.mono_inl_iff

theorem mk' (h : ‚àÄ A B : C, ‚àÉ (c : BinaryCofan A B) (_ : IsColimit c), Mono c.inl) : MonoCoprod C :=
  ‚ü®fun A B c' hc' => by
    obtain ‚ü®c, hc‚ÇÅ, hc‚ÇÇ‚ü© := h A B
    simpa only [mono_inl_iff hc' hc‚ÇÅ] using hc‚ÇÇ‚ü©
#align category_theory.limits.mono_coprod.mk' CategoryTheory.Limits.MonoCoprod.mk'

instance monoCoprodType : MonoCoprod (Type u) :=
  MonoCoprod.mk' fun A B => by
    refine' ‚ü®BinaryCofan.mk (Sum.inl : A ‚ü∂ Sum A B) Sum.inr, _, _‚ü©
    ¬∑ exact BinaryCofan.IsColimit.mk _
        (fun f‚ÇÅ f‚ÇÇ x => by
          rcases x with x | x
          exacts [f‚ÇÅ x, f‚ÇÇ x])
        (fun f‚ÇÅ f‚ÇÇ => by rfl)
        (fun f‚ÇÅ f‚ÇÇ => by rfl)
        (fun f‚ÇÅ f‚ÇÇ m h‚ÇÅ h‚ÇÇ => by
          funext x
          rcases x with x | x
          ¬∑ exact congr_fun h‚ÇÅ x
          ¬∑ exact congr_fun h‚ÇÇ x)
    ¬∑ rw [mono_iff_injective]
      intro a‚ÇÅ a‚ÇÇ h
      simpa using h
#align category_theory.limits.mono_coprod.mono_coprod_type CategoryTheory.Limits.MonoCoprod.monoCoprodType

section

variable {I‚ÇÅ I‚ÇÇ : Type*} {X : I‚ÇÅ ‚äï I‚ÇÇ ‚Üí C} (c : Cofan X)
  (c‚ÇÅ : Cofan (X ‚àò Sum.inl)) (c‚ÇÇ : Cofan (X ‚àò Sum.inr))
  (hc : IsColimit c) (hc‚ÇÅ : IsColimit c‚ÇÅ) (hc‚ÇÇ : IsColimit c‚ÇÇ)

/-- Given a family of objects `X : I‚ÇÅ ‚äï I‚ÇÇ ‚Üí C`, a cofan of `X`, and two colimit cofans
of `X ‚àò Sum.inl` and `X ‚àò Sum.inr`, this is a cofan for `c‚ÇÅ.pt` and `c‚ÇÇ.pt` whose
point is `c.pt`. -/
@[simp]
def binaryCofanSum : BinaryCofan c‚ÇÅ.pt c‚ÇÇ.pt :=
  BinaryCofan.mk (Cofan.IsColimit.desc hc‚ÇÅ (fun i‚ÇÅ => c.inj (Sum.inl i‚ÇÅ)))
    (Cofan.IsColimit.desc hc‚ÇÇ (fun i‚ÇÇ => c.inj (Sum.inr i‚ÇÇ)))

/-- The binary cofan `binaryCofanSum c c‚ÇÅ c‚ÇÇ hc‚ÇÅ hc‚ÇÇ` is colimit. -/
def isColimitBinaryCofanSum : IsColimit (binaryCofanSum c c‚ÇÅ c‚ÇÇ hc‚ÇÅ hc‚ÇÇ) :=
  BinaryCofan.IsColimit.mk _ (fun f‚ÇÅ f‚ÇÇ => Cofan.IsColimit.desc hc (fun i => match i with
      | Sum.inl i‚ÇÅ => c‚ÇÅ.inj i‚ÇÅ ‚â´ f‚ÇÅ
      | Sum.inr i‚ÇÇ => c‚ÇÇ.inj i‚ÇÇ ‚â´ f‚ÇÇ))
    (fun f‚ÇÅ f‚ÇÇ => Cofan.IsColimit.hom_ext hc‚ÇÅ _ _ (by simp))
    (fun f‚ÇÅ f‚ÇÇ => Cofan.IsColimit.hom_ext hc‚ÇÇ _ _ (by simp))
    (fun f‚ÇÅ f‚ÇÇ m hm‚ÇÅ hm‚ÇÇ => by
      apply Cofan.IsColimit.hom_ext hc
      rintro (i‚ÇÅ|i‚ÇÇ) <;> aesop_cat)

lemma mono_binaryCofanSum_inl [MonoCoprod C] :
    Mono (binaryCofanSum c c‚ÇÅ c‚ÇÇ hc‚ÇÅ hc‚ÇÇ).inl :=
  MonoCoprod.binaryCofan_inl _ (isColimitBinaryCofanSum c c‚ÇÅ c‚ÇÇ hc hc‚ÇÅ hc‚ÇÇ)

lemma mono_binaryCofanSum_inr [MonoCoprod C] :
    Mono (binaryCofanSum c c‚ÇÅ c‚ÇÇ hc‚ÇÅ hc‚ÇÇ).inr :=
  MonoCoprod.binaryCofan_inr _ (isColimitBinaryCofanSum c c‚ÇÅ c‚ÇÇ hc hc‚ÇÅ hc‚ÇÇ)

lemma mono_binaryCofanSum_inl' [MonoCoprod C] (inl : c‚ÇÅ.pt ‚ü∂ c.pt)
    (hinl : ‚àÄ (i‚ÇÅ : I‚ÇÅ), c‚ÇÅ.inj i‚ÇÅ ‚â´ inl = c.inj (Sum.inl i‚ÇÅ)) :
    Mono inl := by
  suffices inl = (binaryCofanSum c c‚ÇÅ c‚ÇÇ hc‚ÇÅ hc‚ÇÇ).inl by
    rw [this]
    exact MonoCoprod.binaryCofan_inl _ (isColimitBinaryCofanSum c c‚ÇÅ c‚ÇÇ hc hc‚ÇÅ hc‚ÇÇ)
  exact Cofan.IsColimit.hom_ext hc‚ÇÅ _ _ (by simpa using hinl)

lemma mono_binaryCofanSum_inr' [MonoCoprod C] (inr : c‚ÇÇ.pt ‚ü∂ c.pt)
    (hinr : ‚àÄ (i‚ÇÇ : I‚ÇÇ), c‚ÇÇ.inj i‚ÇÇ ‚â´ inr = c.inj (Sum.inr i‚ÇÇ)) :
    Mono inr := by
  suffices inr = (binaryCofanSum c c‚ÇÅ c‚ÇÇ hc‚ÇÅ hc‚ÇÇ).inr by
    rw [this]
    exact MonoCoprod.binaryCofan_inr _ (isColimitBinaryCofanSum c c‚ÇÅ c‚ÇÇ hc hc‚ÇÅ hc‚ÇÇ)
  exact Cofan.IsColimit.hom_ext hc‚ÇÇ _ _ (by simpa using hinr)

end

section

variable [MonoCoprod C] {I J : Type*} (X : I ‚Üí C) (Œπ : J ‚Üí I) (hŒπ : Function.Injective Œπ)

section

variable (c : Cofan X) (c‚ÇÅ : Cofan (X ‚àò Œπ)) (hc : IsColimit c) (hc‚ÇÅ : IsColimit c‚ÇÅ)

lemma mono_of_injective_aux (c‚ÇÇ : Cofan (fun (k : ((Set.range Œπ)·∂ú : Set I)) => X k.1))
    (hc‚ÇÇ : IsColimit c‚ÇÇ) : Mono (Cofan.IsColimit.desc hc‚ÇÅ (fun i => c.inj (Œπ i))) := by
  classical
  let e := ((Equiv.ofInjective Œπ hŒπ).sumCongr (Equiv.refl _)).trans (Equiv.Set.sumCompl _)
  refine mono_binaryCofanSum_inl' (Cofan.mk c.pt (fun i' => c.inj (e i'))) _ _ ?_
    hc‚ÇÅ hc‚ÇÇ _ (by simp)
  exact IsColimit.ofIsoColimit ((IsColimit.ofCoconeEquiv (Cocones.equivalenceOfReindexing
    (Discrete.equivalence e) (Iso.refl _))).symm hc) (Cocones.ext (Iso.refl _))

lemma mono_of_injective [HasCoproduct (fun (k : ((Set.range Œπ)·∂ú : Set I)) => X k.1)] :
    Mono (Cofan.IsColimit.desc hc‚ÇÅ (fun i => c.inj (Œπ i))) :=
  mono_of_injective_aux X Œπ hŒπ c c‚ÇÅ hc hc‚ÇÅ _ (colimit.isColimit _)

end

lemma mono_of_injective' [HasCoproduct (X ‚àò Œπ)] [HasCoproduct X]
    [HasCoproduct (fun (k : ((Set.range Œπ)·∂ú : Set I)) => X k.1)] :
    Mono (Sigma.desc (f := X ‚àò Œπ) (fun j => Sigma.Œπ X (Œπ j))) :=
  mono_of_injective X Œπ hŒπ _ _ (colimit.isColimit _) (colimit.isColimit _)

lemma mono_map'_of_injective [HasCoproduct (X ‚àò Œπ)] [HasCoproduct X]
    [HasCoproduct (fun (k : ((Set.range Œπ)·∂ú : Set I)) => X k.1)] :
    Mono (Sigma.map' Œπ (fun j => ùüô ((X ‚àò Œπ) j))) := by
  convert mono_of_injective' X Œπ hŒπ
  apply Sigma.hom_ext
  intro j
  rw [Sigma.Œπ_comp_map', id_comp, colimit.Œπ_desc]
  simp

end

section

variable [MonoCoprod C] {I : Type*} (X : I ‚Üí C)

lemma mono_inj (c : Cofan X) (h : IsColimit c) (i : I)
    [HasCoproduct (fun (k : ((Set.range (fun _ : Unit ‚Ü¶ i))·∂ú : Set I)) => X k.1)] :
    Mono (Cofan.inj c i) := by
  let Œπ : Unit ‚Üí I := fun _ ‚Ü¶ i
  have hŒπ : Function.Injective Œπ := fun _ _ _ ‚Ü¶ rfl
  exact mono_of_injective X Œπ hŒπ c (Cofan.mk (X i) (fun _ ‚Ü¶ ùüô _)) h
    (mkCofanColimit _ (fun s => s.inj ()))

instance mono_Œπ [HasCoproduct X] (i : I)
    [HasCoproduct (fun (k : ((Set.range (fun _ : Unit ‚Ü¶ i))·∂ú : Set I)) => X k.1)] :
    Mono (Sigma.Œπ X i) :=
  mono_inj X _ (colimit.isColimit _) i

end

open Functor

section Preservation

variable {D : Type*} [Category D] (F : C ‚•§ D)

theorem monoCoprod_of_preservesCoprod_of_reflectsMono [MonoCoprod D]
    [PreservesColimitsOfShape (Discrete WalkingPair) F]
    [ReflectsMonomorphisms F] : MonoCoprod C where
  binaryCofan_inl {A B} c h := by
    let c' := BinaryCofan.mk (F.map c.inl) (F.map c.inr)
    apply mono_of_mono_map F
    show Mono c'.inl
    apply MonoCoprod.binaryCofan_inl
    apply mapIsColimitOfPreservesOfIsColimit F
    apply IsColimit.ofIsoColimit h
    refine Cocones.ext (œÜ := eqToIso rfl) ?_
    rintro ‚ü®(j‚ÇÅ|j‚ÇÇ)‚ü© <;> simp only [const_obj_obj, eqToIso_refl, Iso.refl_hom,
      Category.comp_id, BinaryCofan.mk_inl, BinaryCofan.mk_inr]

end Preservation

section Concrete

instance [ConcreteCategory C] [PreservesColimitsOfShape (Discrete WalkingPair) (forget C)]
    [ReflectsMonomorphisms (forget C)] : MonoCoprod C :=
  monoCoprod_of_preservesCoprod_of_reflectsMono (forget C)

end Concrete

end MonoCoprod

end Limits

end CategoryTheory
