/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Limits.Shapes.RegularMono
import Mathlib.CategoryTheory.Limits.Shapes.ZeroMorphisms

#align_import category_theory.limits.mono_coprod from "leanprover-community/mathlib"@"70fd9563a21e7b963887c9360bd29b2393e6225a"

/-!

# Categories where inclusions into coproducts are monomorphisms

If `C` is a category, the class `MonoCoprod C` expresses that left
inclusions `A ‚ü∂ A ‚®ø B` are monomorphisms when `HasCoproduct A B`
is satisfied. If it is so, it is shown that right inclusions are
also monomorphisms.

TODO @joelriou: show that if `X : I ‚Üí C` and `Œπ : J ‚Üí I` is an injective map,
then the canonical morphism `‚àê (X ‚àò Œπ) ‚ü∂ ‚àê X` is a monomorphism.

TODO: define distributive categories, and show that they satisfy `MonoCoprod`, see
<https://ncatlab.org/toddtrimble/published/distributivity+implies+monicity+of+coproduct+inclusions>

-/


noncomputable section

open CategoryTheory CategoryTheory.Category CategoryTheory.Limits

universe u

namespace CategoryTheory

namespace Limits

variable (C : Type _) [Category C]

/-- This condition expresses that inclusion morphisms into coproducts are monomorphisms. -/
class MonoCoprod : Prop where
  /-- the left inclusion of a colimit binary cofan is mono -/
  binaryCofan_inl : ‚àÄ ‚¶ÉA B : C‚¶Ñ (c : BinaryCofan A B) (_ : IsColimit c), Mono c.inl
#align category_theory.limits.mono_coprod CategoryTheory.Limits.MonoCoprod

variable {C}

instance (priority := 100) monoCoprodOfHasZeroMorphisms [HasZeroMorphisms C] : MonoCoprod C :=
  ‚ü®fun A B c hc => by
    haveI : IsSplitMono c.inl :=
      IsSplitMono.mk' (SplitMono.mk (hc.desc (BinaryCofan.mk (ùüô A) 0)) (IsColimit.fac _ _ _))
    infer_instance‚ü©
#align category_theory.limits.mono_coprod_of_has_zero_morphisms CategoryTheory.Limits.monoCoprodOfHasZeroMorphisms

namespace MonoCoprod

theorem binaryCofan_inr {A B : C} [MonoCoprod C] (c : BinaryCofan A B) (hc : IsColimit c) :
    Mono c.inr := by
  haveI hc' : IsColimit (BinaryCofan.mk c.inr c.inl) :=
    BinaryCofan.IsColimit.mk _ (fun f‚ÇÅ f‚ÇÇ => hc.desc (BinaryCofan.mk f‚ÇÇ f‚ÇÅ))
      (by aesop_cat) (by aesop_cat)
      (fun f‚ÇÅ f‚ÇÇ m h‚ÇÅ h‚ÇÇ => BinaryCofan.IsColimit.hom_ext hc (by aesop_cat) (by aesop_cat))
  exact binaryCofan_inl _ hc'
#align category_theory.limits.mono_coprod.binary_cofan_inr CategoryTheory.Limits.MonoCoprod.binaryCofan_inr

instance {A B : C} [MonoCoprod C] [HasBinaryCoproduct A B] : Mono (coprod.inl : A ‚ü∂ A ‚®ø B) :=
  binaryCofan_inl _ (colimit.isColimit _)

instance {A B : C} [MonoCoprod C] [HasBinaryCoproduct A B] : Mono (coprod.inr : B ‚ü∂ A ‚®ø B) :=
  binaryCofan_inr _ (colimit.isColimit _)

theorem mono_inl_iff {A B : C} {c‚ÇÅ c‚ÇÇ : BinaryCofan A B} (hc‚ÇÅ : IsColimit c‚ÇÅ) (hc‚ÇÇ : IsColimit c‚ÇÇ) :
    Mono c‚ÇÅ.inl ‚Üî Mono c‚ÇÇ.inl := by
  suffices
    ‚àÄ (c‚ÇÅ c‚ÇÇ : BinaryCofan A B) (_ : IsColimit c‚ÇÅ) (_ : IsColimit c‚ÇÇ) (_ : Mono c‚ÇÅ.inl),
      Mono c‚ÇÇ.inl
    by exact ‚ü®fun h‚ÇÅ => this _ _ hc‚ÇÅ hc‚ÇÇ h‚ÇÅ, fun h‚ÇÇ => this _ _ hc‚ÇÇ hc‚ÇÅ h‚ÇÇ‚ü©
  intro c‚ÇÅ c‚ÇÇ hc‚ÇÅ hc‚ÇÇ
  intro
  simpa only [IsColimit.comp_coconePointUniqueUpToIso_hom] using
    mono_comp c‚ÇÅ.inl (hc‚ÇÅ.coconePointUniqueUpToIso hc‚ÇÇ).hom
#align category_theory.limits.mono_coprod.mono_inl_iff CategoryTheory.Limits.MonoCoprod.mono_inl_iff

theorem mk' (h : ‚àÄ A B : C, ‚àÉ (c : BinaryCofan A B) (_ : IsColimit c), Mono c.inl) : MonoCoprod C :=
  ‚ü®fun A B c' hc' => by
    obtain ‚ü®c, hc‚ÇÅ, hc‚ÇÇ‚ü© := h A B
    simpa only [mono_inl_iff hc' hc‚ÇÅ] using hc‚ÇÇ‚ü©
#align category_theory.limits.mono_coprod.mk' CategoryTheory.Limits.MonoCoprod.mk'

instance monoCoprodType : MonoCoprod (Type u) :=
  MonoCoprod.mk' fun A B => by
    refine' ‚ü®BinaryCofan.mk (Sum.inl : A ‚ü∂ Sum A B) Sum.inr, _, _‚ü©
    ¬∑ exact BinaryCofan.IsColimit.mk _
        (fun f‚ÇÅ f‚ÇÇ x => by
          rcases x with x | x
          exacts [f‚ÇÅ x, f‚ÇÇ x])
        (fun f‚ÇÅ f‚ÇÇ => by rfl)
        (fun f‚ÇÅ f‚ÇÇ => by rfl)
        (fun f‚ÇÅ f‚ÇÇ m h‚ÇÅ h‚ÇÇ => by
          funext x
          rcases x with x | x
          ¬∑ exact congr_fun h‚ÇÅ x
          ¬∑ exact congr_fun h‚ÇÇ x)
    ¬∑ rw [mono_iff_injective]
      intro a‚ÇÅ a‚ÇÇ h
      simpa using h
#align category_theory.limits.mono_coprod.mono_coprod_type CategoryTheory.Limits.MonoCoprod.monoCoprodType

end MonoCoprod

end Limits

end CategoryTheory
