/-
Copyright (c) 2019 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison, Robin Carlier
-/
import Mathlib.Control.EquivFunctor
import Mathlib.CategoryTheory.Groupoid
import Mathlib.CategoryTheory.Whiskering
import Mathlib.CategoryTheory.Types

/-!
# The core of a category

The core of a category `C` is the (non-full) subcategory of `C` consisting of all objects,
and all isomorphisms. We construct it as a `CategoryTheory.Groupoid`.

`CategoryTheory.Core.inclusion : Core C ‚•§ C` gives the faithful inclusion into the original
category.

Any functor `F` from a groupoid `G` into `C` factors through `CategoryTheory.Core C`,
but this is not functorial with respect to `F`.
-/

namespace CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

-- morphism levels before object levels. See note [CategoryTheory universes].
/-- The core of a category C is the groupoid whose morphisms are all the
isomorphisms of C. -/
structure Core (C : Type u‚ÇÅ) where
  /-- The object of the base category underlying an object in `Core C`. -/
  of : C

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]

/-- The hom-type between two objects of `Core C`.
It is defined as a one-field structure to prevent defeq abuses. -/
@[ext]
structure CoreHom (X Y : Core C) where
  /-- The isomorphism of objects of `C` underlying a morphism in `Core C`. -/
  iso : X.of ‚âÖ Y.of

@[simps!]
instance coreCategory : Groupoid.{v‚ÇÅ} (Core C) where
  Hom (X Y : Core C) := CoreHom X Y
  id (X : Core C) := .mk <| Iso.refl X.of
  comp f g := .mk <| Iso.trans f.iso g.iso
  inv {_ _} f := .mk <| Iso.symm f.iso

@[simp]
lemma coreCategory_comp_iso {x y z : Core C} (f : x ‚ü∂ y) (g : y ‚ü∂ z) :
    (f ‚â´ g).iso = f.iso ‚â™‚â´ g.iso := rfl

namespace Core

variable (C) in
/-- The core of a category is naturally included in the category. -/
@[simps!]
def inclusion : Core C ‚•§ C where
  obj := of
  map f := f.iso.hom

@[ext]
theorem hom_ext {X Y : Core C} {f g : X ‚ü∂ Y} (h : f.iso.hom = g.iso.hom) :
    f = g := by
  apply CoreHom.ext
  exact Iso.ext h

variable (C)

instance : (inclusion C).Faithful where

variable {C} {G : Type u‚ÇÇ} [Groupoid.{v‚ÇÇ} G]

-- Note that this function is not functorial
-- (consider the two functors from [0] to [1], and the natural transformation between them).
/-- A functor from a groupoid to a category C factors through the core of C. -/
@[simps!]
def functorToCore (F : G ‚•§ C) : G ‚•§ Core C where
  obj X := .mk <| F.obj X
  map f := .mk <| { hom := F.map f, inv := F.map (Groupoid.inv f) }

/-- We can functorially associate to any functor from a groupoid to the core of a category `C`,
a functor from the groupoid to `C`, simply by composing with the embedding `Core C ‚•§ C`.
-/
@[simps!]
def forgetFunctorToCore : (G ‚•§ Core C) ‚•§ G ‚•§ C :=
  (whiskeringRight _ _ _).obj (inclusion C)

end Core

section

namespace Functor

variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

/-- A functor `C ‚•§ D` induces a functor `Core C ‚•§ Core D`. -/
@[simps!]
def core (F : C ‚•§ D) : Core C ‚•§ Core D := Core.functorToCore (Core.inclusion _ ‚ãô F)

variable (C) in
/-- The core of the identity functor is the identity functor on the cores. -/
@[simps!]
def coreId : (ùü≠ C).core ‚âÖ ùü≠ (Core C) := Iso.refl _

/-- The core of the composition of F and G is the composition of the cores. -/
@[simps!]
def coreComp {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] (F : C ‚•§ D) (G : D ‚•§ E) :
  (F ‚ãô G).core ‚âÖ F.core ‚ãô G.core := Iso.refl _

end Functor

namespace Iso

variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

/-- A natural isomorphism of functors induces a natural isomorphism between their cores. -/
@[simps!]
def core {F G : C ‚•§ D} (Œ± : F ‚âÖ G) : F.core ‚âÖ G.core :=
  NatIso.ofComponents
    (fun x ‚Ü¶ Groupoid.isoEquivHom _ _|>.symm <| .mk <| Œ±.app x.of)

@[simp]
lemma coreComp {F G H : C ‚•§ D} (Œ± : F ‚âÖ G) (Œ≤ : G ‚âÖ H) : (Œ± ‚â™‚â´ Œ≤).core = Œ±.core ‚â™‚â´ Œ≤.core := rfl

@[simp]
lemma coreId {F : C ‚•§ D} : (Iso.refl F).core = Iso.refl F.core := rfl

lemma coreWhiskerLeft {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] (F : C ‚•§ D) {G H : D ‚•§ E} (Œ∑ : G ‚âÖ H) :
    (isoWhiskerLeft F Œ∑).core =
    F.coreComp G ‚â™‚â´ isoWhiskerLeft F.core Œ∑.core ‚â™‚â´ (F.coreComp H).symm := by
  aesop_cat

lemma coreWhiskerRight {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] {F G : C ‚•§ D} (Œ∑ : F ‚âÖ G) (H : D ‚•§ E) :
    (isoWhiskerRight Œ∑ H ).core =
    F.coreComp H ‚â™‚â´ isoWhiskerRight Œ∑.core H.core ‚â™‚â´ (G.coreComp H).symm := by
  aesop_cat

lemma coreLeftUnitor {F : C ‚•§ D} :
    F.leftUnitor.core =
    (ùü≠ C).coreComp F ‚â™‚â´ isoWhiskerRight (Functor.coreId C) _ ‚â™‚â´ F.core.leftUnitor := by
  aesop_cat

lemma coreRightUnitor {F : C ‚•§ D} :
    F.rightUnitor.core =
    (F).coreComp (ùü≠ D) ‚â™‚â´ isoWhiskerLeft _ (Functor.coreId D) ‚â™‚â´ F.core.rightUnitor := by
  aesop_cat

lemma coreAssociator {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] {E' : Type u‚ÇÑ} [Category.{v‚ÇÑ} E']
    (F : C ‚•§ D) (G : D ‚•§ E) (H : E ‚•§ E') :
    (Functor.associator F G H).core =
    (F ‚ãô G).coreComp H ‚â™‚â´ isoWhiskerRight (F.coreComp G) H.core ‚â™‚â´
      Functor.associator F.core G.core H.core ‚â™‚â´ (isoWhiskerLeft F.core (G.coreComp H)).symm ‚â™‚â´
      (F.coreComp (G ‚ãô H)).symm := by
  aesop_cat

end Iso

variable (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]

namespace Equivalence

variable {D} in
/-- Equivalent categories have equivalent cores. -/
@[simps!]
def core (E : C ‚âå D) : Core C ‚âå Core D where
  functor := E.functor.core
  inverse := E.inverse.core
  unitIso := E.unitIso.core
  counitIso := E.counitIso.core

end Equivalence

variable (C) in
/-- Taking the core of a functor is functorial if we discard non-invertible natural
transformations. -/
@[simps!]
def coreFunctor : Core (C ‚•§ D) ‚•§ Core C ‚•§ Core D where
  obj F := F.of.core
  map Œ∑ := Œ∑.iso.core.hom

end

/-- `ofEquivFunctor m` lifts a type-level `EquivFunctor`
to a categorical functor `Core (Type u‚ÇÅ) ‚•§ Core (Type u‚ÇÇ)`.
-/
def ofEquivFunctor (m : Type u‚ÇÅ ‚Üí Type u‚ÇÇ) [EquivFunctor m] : Core (Type u‚ÇÅ) ‚•§ Core (Type u‚ÇÇ) where
  obj x := .mk <| m x.of
  map f := .mk <| (EquivFunctor.mapEquiv m f.iso.toEquiv).toIso
  map_id Œ± := by ext x; exact congr_fun (EquivFunctor.map_refl' _) x
  map_comp f g := by
    ext
    simp [EquivFunctor.map_trans', Function.comp]

end CategoryTheory
