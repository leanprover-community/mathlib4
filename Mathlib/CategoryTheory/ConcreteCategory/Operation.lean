/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.ConcreteCategory.Basic
import Mathlib.Algebra.Category.Grp.Basic

/-!
# Operations on elements in a concrete category

-/

universe w v u v' u'

namespace CategoryTheory

namespace Types

variable {D : Type u'} [Category.{v'} D]

@[simps]
def functorConcat (F‚ÇÅ F‚ÇÇ : D ‚•§ Type w) : D ‚•§ Type w where
  obj X := F‚ÇÅ.obj X √ó F‚ÇÇ.obj X
  map f a := ‚ü®F‚ÇÅ.map f a.1, F‚ÇÇ.map f a.2‚ü©

@[simps]
def functorPr‚ÇÄ {F : D ‚•§ Type w} : F ‚ü∂ (Functor.const D).obj PUnit where
  app _ _ := PUnit.unit

@[simps]
def functorPr‚ÇÅ {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} : functorConcat F‚ÇÅ F‚ÇÇ ‚ü∂ F‚ÇÅ where
  app X a := a.1

@[simps]
def functorPr‚ÇÇ {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} : functorConcat F‚ÇÅ F‚ÇÇ ‚ü∂ F‚ÇÇ where
  app X a := a.2

@[simp]
def natTransConcat {F F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} (œÑ‚ÇÅ : F ‚ü∂ F‚ÇÅ) (œÑ‚ÇÇ : F ‚ü∂ F‚ÇÇ) :
    F ‚ü∂ functorConcat F‚ÇÅ F‚ÇÇ where
  app X a := ‚ü®œÑ‚ÇÅ.app X a, œÑ‚ÇÇ.app X a‚ü©
  naturality _ _ f := by
    ext x
    exact Prod.ext (congr_fun (œÑ‚ÇÅ.naturality f) x) (congr_fun (œÑ‚ÇÇ.naturality f) x)

@[simp]
def functorConcat‚ÇÉ (F‚ÇÅ F‚ÇÇ F‚ÇÉ : D ‚•§ Type w) :=
  functorConcat F‚ÇÅ (functorConcat F‚ÇÇ F‚ÇÉ)

@[simps!]
def functorPr‚ÇÉ‚ÇÅ {F‚ÇÅ F‚ÇÇ F‚ÇÉ : D ‚•§ Type w} : functorConcat‚ÇÉ F‚ÇÅ F‚ÇÇ F‚ÇÉ ‚ü∂ F‚ÇÅ := functorPr‚ÇÅ

@[simps!]
def functorPr‚ÇÉ‚ÇÇ {F‚ÇÅ F‚ÇÇ F‚ÇÉ : D ‚•§ Type w} : functorConcat‚ÇÉ F‚ÇÅ F‚ÇÇ F‚ÇÉ ‚ü∂ F‚ÇÇ :=
  functorPr‚ÇÇ ‚â´ functorPr‚ÇÅ

@[simps!]
def functorPr‚ÇÉ‚ÇÉ {F‚ÇÅ F‚ÇÇ F‚ÇÉ : D ‚•§ Type w} : functorConcat‚ÇÉ F‚ÇÅ F‚ÇÇ F‚ÇÉ ‚ü∂ F‚ÇÉ :=
  functorPr‚ÇÇ ‚â´ functorPr‚ÇÇ

@[simp]
def natTransConcat‚ÇÉ {F F‚ÇÅ F‚ÇÇ F‚ÇÉ : D ‚•§ Type w} (œÑ‚ÇÅ : F ‚ü∂ F‚ÇÅ) (œÑ‚ÇÇ : F ‚ü∂ F‚ÇÇ) (œÑ‚ÇÉ : F ‚ü∂ F‚ÇÉ) :
    F ‚ü∂ functorConcat‚ÇÉ F‚ÇÅ F‚ÇÇ F‚ÇÉ :=
  natTransConcat œÑ‚ÇÅ (natTransConcat œÑ‚ÇÇ œÑ‚ÇÉ)

def functorOperation‚ÇÄ (F : D ‚•§ Type w) := (Functor.const D).obj PUnit ‚ü∂ F
def functorOperation‚ÇÅ (F : D ‚•§ Type w) := F ‚ü∂ F
def functorOperation‚ÇÇ (F : D ‚•§ Type w) := functorConcat F F ‚ü∂ F
def functorOperation‚ÇÉ (F : D ‚•§ Type w) := functorConcat‚ÇÉ F F F ‚ü∂ F

@[simp]
def functorOperation‚ÇÄ.of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} (h : functorOperation‚ÇÄ F‚ÇÅ)
  (e : F‚ÇÅ ‚âÖ F‚ÇÇ) : functorOperation‚ÇÄ F‚ÇÇ := h ‚â´ e.hom

def functorOperation‚ÇÄ.equiv_of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) :
  functorOperation‚ÇÄ F‚ÇÅ ‚âÉ functorOperation‚ÇÄ F‚ÇÇ where
  toFun h := h.of_iso e
  invFun h := h.of_iso e.symm
  left_inv h := by simp
  right_inv h := by simp

@[simp]
def functorOperation‚ÇÅ.of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} (h : functorOperation‚ÇÅ F‚ÇÅ)
  (e : F‚ÇÅ ‚âÖ F‚ÇÇ) : functorOperation‚ÇÅ F‚ÇÇ := e.inv ‚â´ h ‚â´ e.hom

def functorOperation‚ÇÅ.equiv_of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) :
  functorOperation‚ÇÅ F‚ÇÅ ‚âÉ functorOperation‚ÇÅ F‚ÇÇ where
  toFun h := h.of_iso e
  invFun h := h.of_iso e.symm
  left_inv h := by simp
  right_inv h := by simp

@[simp]
def functorOperation‚ÇÇ.of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} (h : functorOperation‚ÇÇ F‚ÇÅ)
    (e : F‚ÇÅ ‚âÖ F‚ÇÇ) : functorOperation‚ÇÇ F‚ÇÇ :=
  natTransConcat (functorPr‚ÇÅ ‚â´ e.inv) (functorPr‚ÇÇ ‚â´ e.inv) ‚â´ h ‚â´ e.hom

def functorOperation‚ÇÇ.equiv_of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) :
  functorOperation‚ÇÇ F‚ÇÅ ‚âÉ functorOperation‚ÇÇ F‚ÇÇ where
  toFun h := h.of_iso e
  invFun h := h.of_iso e.symm
  left_inv h := by
    apply NatTrans.ext
    ext1 X
    funext
    simp
  right_inv h := by
    apply NatTrans.ext
    ext1 X
    funext
    simp

@[simp]
def functorOperation‚ÇÇ.swap {F : D ‚•§ Type w} (h : functorOperation‚ÇÇ F) :
  functorOperation‚ÇÇ F := natTransConcat functorPr‚ÇÇ functorPr‚ÇÅ ‚â´ h

@[simp]
def functorOperation‚ÇÉ.of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} (h : functorOperation‚ÇÉ F‚ÇÅ)
    (e : F‚ÇÅ ‚âÖ F‚ÇÇ) : functorOperation‚ÇÉ F‚ÇÇ :=
  natTransConcat‚ÇÉ (functorPr‚ÇÉ‚ÇÅ ‚â´ e.inv) (functorPr‚ÇÉ‚ÇÇ ‚â´ e.inv) (functorPr‚ÇÉ‚ÇÉ ‚â´ e.inv) ‚â´
    h ‚â´ e.hom

def functorOperation‚ÇÉ.equiv_of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) :
  functorOperation‚ÇÉ F‚ÇÅ ‚âÉ functorOperation‚ÇÉ F‚ÇÇ where
  toFun h := h.of_iso e
  invFun h := h.of_iso e.symm
  left_inv h := by
    apply NatTrans.ext
    ext1 X
    funext
    simp
  right_inv h := by
    apply NatTrans.ext
    ext1 X
    funext
    simp

section

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÅ‚ÇÇ X‚ÇÇ‚ÇÉ X‚ÇÅ‚ÇÇ‚ÇÉ : D ‚•§ Type w}
  (œÜ‚ÇÅ‚ÇÇ : functorConcat X‚ÇÅ X‚ÇÇ ‚ü∂ X‚ÇÅ‚ÇÇ) (œà‚ÇÅ‚ÇÇ : functorConcat X‚ÇÅ‚ÇÇ X‚ÇÉ ‚ü∂ X‚ÇÅ‚ÇÇ‚ÇÉ)
  (œÜ‚ÇÇ‚ÇÉ : functorConcat X‚ÇÇ X‚ÇÉ ‚ü∂ X‚ÇÇ‚ÇÉ) (œà‚ÇÇ‚ÇÉ : functorConcat X‚ÇÅ X‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÅ‚ÇÇ‚ÇÉ)

/-- Associativity -/
def functorOperation_assoc' : Prop :=
  Types.natTransConcat (Types.natTransConcat Types.functorPr‚ÇÉ‚ÇÅ Types.functorPr‚ÇÉ‚ÇÇ ‚â´ œÜ‚ÇÅ‚ÇÇ)
    Types.functorPr‚ÇÉ‚ÇÉ ‚â´ œà‚ÇÅ‚ÇÇ =
  Types.natTransConcat Types.functorPr‚ÇÉ‚ÇÅ
    (Types.natTransConcat Types.functorPr‚ÇÉ‚ÇÇ Types.functorPr‚ÇÉ‚ÇÉ ‚â´ œÜ‚ÇÇ‚ÇÉ) ‚â´ œà‚ÇÇ‚ÇÉ

def functorOperation‚ÇÇ.assoc {F : D ‚•§ Type w} (oper : functorOperation‚ÇÇ F) : Prop :=
  functorOperation_assoc' oper oper oper oper

lemma functorOperation‚ÇÇ.assoc.of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} {oper : functorOperation‚ÇÇ F‚ÇÅ}
    (h : oper.assoc) (e : F‚ÇÅ ‚âÖ F‚ÇÇ) : (oper.of_iso e).assoc := by
  refine Eq.trans ?_ ((congr_arg (fun (o : functorOperation‚ÇÉ F‚ÇÅ) => o.of_iso e) h).trans ?_)
  all_goals
    apply NatTrans.ext
    ext1 X
    funext ‚ü®a, b, c‚ü©
    dsimp
    simp

end

section

variable {X Y : D ‚•§ Type w}
  (add : functorConcat X Y ‚ü∂ Y)
  (zero : functorOperation‚ÇÄ X)

/-- zero_add -/
def functorOperation_zero_add' : Prop :=
  (natTransConcat (Types.functorPr‚ÇÄ ‚â´ zero) (ùüô Y)) ‚â´ add = ùüô Y

def functorOperation‚ÇÇ.zero_add (add : functorOperation‚ÇÇ Y) (zero : functorOperation‚ÇÄ Y) : Prop :=
  functorOperation_zero_add' add zero

lemma functorOperation‚ÇÇ.zero_add.of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} {add : functorOperation‚ÇÇ F‚ÇÅ}
  {zero : functorOperation‚ÇÄ F‚ÇÅ} (h : add.zero_add zero) (e : F‚ÇÅ ‚âÖ F‚ÇÇ) :
  (add.of_iso e).zero_add (zero.of_iso e) := by
  refine Eq.trans ?_ ((congr_arg (fun (o : functorOperation‚ÇÅ F‚ÇÅ) => o.of_iso e) h).trans ?_)
  all_goals
    apply NatTrans.ext
    ext1
    funext
    dsimp
    simp

end

section

variable {X Y : D ‚•§ Type w}
  (add : functorConcat Y X ‚ü∂ Y)
  (zero : functorOperation‚ÇÄ X)

/-- add_zero -/
def functorOperation_add_zero' : Prop :=
  (natTransConcat (ùüô Y) (Types.functorPr‚ÇÄ ‚â´ zero)) ‚â´ add = ùüô Y

def functorOperation‚ÇÇ.add_zero (add : functorOperation‚ÇÇ Y) (zero : functorOperation‚ÇÄ Y) : Prop :=
  functorOperation_add_zero' add zero

lemma functorOperation‚ÇÇ.add_zero.of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} {add : functorOperation‚ÇÇ F‚ÇÅ}
  {zero : functorOperation‚ÇÄ F‚ÇÅ} (h : add.add_zero zero) (e : F‚ÇÅ ‚âÖ F‚ÇÇ) :
  (add.of_iso e).add_zero (zero.of_iso e) := by
  refine Eq.trans ?_ ((congr_arg (fun (o : functorOperation‚ÇÅ F‚ÇÅ) => o.of_iso e) h).trans ?_)
  all_goals
    apply NatTrans.ext
    ext1
    funext
    dsimp
    simp

end

section

variable {F : D ‚•§ Type w} (add : functorOperation‚ÇÇ F)

def functorOperation‚ÇÇ.comm : Prop := add = add.swap

lemma functorOperation‚ÇÇ.comm.of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} {add : functorOperation‚ÇÇ F‚ÇÅ}
  (h : add.comm) (e : F‚ÇÅ ‚âÖ F‚ÇÇ) : (add.of_iso e).comm :=
  congr_arg (fun (o : functorOperation‚ÇÇ F‚ÇÅ) => o.of_iso e) h

end

section

variable {F : D ‚•§ Type w} (add : functorOperation‚ÇÇ F)
  (neg : functorOperation‚ÇÅ F) (zero : functorOperation‚ÇÄ F)

def functorOperation‚ÇÇ.add_left_neg : Prop :=
  natTransConcat neg (ùüô _) ‚â´ add = functorPr‚ÇÄ ‚â´ zero

lemma functorOperation‚ÇÇ.add_left_neg.of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ Type w} {add : functorOperation‚ÇÇ F‚ÇÅ}
    {neg : functorOperation‚ÇÅ F‚ÇÅ} {zero : functorOperation‚ÇÄ F‚ÇÅ}
    (h : add.add_left_neg neg zero) (e : F‚ÇÅ ‚âÖ F‚ÇÇ) :
    (add.of_iso e).add_left_neg (neg.of_iso e) (zero.of_iso e) := by
  refine Eq.trans ?_ (congr_arg (fun (o : functorOperation‚ÇÅ F‚ÇÅ) => o.of_iso e) h)
  apply NatTrans.ext
  ext1
  funext
  dsimp
  simp

end

end Types

variable (A : Type u) [Category.{v} A] {FA : A ‚Üí A ‚Üí Type*} {CA : A ‚Üí Type w}
  [‚àÄ X Y, FunLike (FA X Y) (CA X) (CA Y)] [ConcreteCategory.{w} A FA]

namespace ConcreteCategory

def Operation‚ÇÄ := (Functor.const A).obj PUnit ‚ü∂ forget A
def Operation‚ÇÅ := forget A ‚ü∂ forget A
def Operation‚ÇÇ := Types.functorConcat (forget A) (forget A) ‚ü∂ forget A
def Operation‚ÇÉ := Types.functorConcat (forget A)
  (Types.functorConcat (forget A) (forget A)) ‚ü∂ forget A

namespace Operation‚ÇÇ

variable {A}
variable (oper : Operation‚ÇÇ A)

@[simp]
def assoc : Prop := Types.functorOperation‚ÇÇ.assoc oper

@[simp]
def zero_add (zero : Operation‚ÇÄ A) : Prop := Types.functorOperation‚ÇÇ.zero_add oper zero

@[simp]
def add_zero (zero : Operation‚ÇÄ A) : Prop := Types.functorOperation‚ÇÇ.add_zero oper zero

@[simp]
def comm : Prop := Types.functorOperation‚ÇÇ.comm oper

@[simp]
def add_left_neg (neg : Operation‚ÇÅ A) (zero : Operation‚ÇÄ A) : Prop :=
  Types.functorOperation‚ÇÇ.add_left_neg oper neg zero

end Operation‚ÇÇ

-- the naturality of these operations should be made automatic...

@[simps]
def addCommGroupCat_zero : Operation‚ÇÄ Ab.{u} where
  app M _ := (0 : M)

@[simps]
def addCommGroupCat_neg : Operation‚ÇÅ Ab.{u} where
  app M (x : M) := -x

@[simps]
def addCommGroupCat_add : Operation‚ÇÇ Ab.{u} where
  app M := fun ‚ü®(x : M), (y : M)‚ü© => x + y

lemma addCommGroupCat_add_assoc : addCommGroupCat_add.assoc := by
  apply NatTrans.ext
  ext1 X
  funext ‚ü®(x : X), ‚ü®(y : X), (z : X)‚ü©‚ü©
  exact add_assoc x y z

lemma addCommGroupCat_add_zero : addCommGroupCat_add.add_zero addCommGroupCat_zero := by
  apply NatTrans.ext
  ext1 X
  funext (x : X)
  exact add_zero x

lemma addCommGroupCat_zero_add : addCommGroupCat_add.zero_add addCommGroupCat_zero := by
  apply NatTrans.ext
  ext1 X
  funext (x : X)
  exact zero_add x

lemma addCommGroupCat_add_comm : addCommGroupCat_add.comm := by
  apply NatTrans.ext
  ext1 X
  funext ‚ü®(x : X), (y : X)‚ü©
  exact add_comm x y

lemma addCommGroupCat_add_left_neg : addCommGroupCat_add.add_left_neg
    addCommGroupCat_neg addCommGroupCat_zero := by
  apply NatTrans.ext
  ext1 X
  funext (x : X)
  exact neg_add_cancel x

end ConcreteCategory

end CategoryTheory
