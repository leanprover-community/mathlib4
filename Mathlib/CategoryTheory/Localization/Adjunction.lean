/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.CatCommSq
import Mathlib.CategoryTheory.Localization.Predicate

/-!
# Localization of adjunctions

In this file, we show that if we have an adjunction `adj : G ‚ä£ F` such that both
functors `G : C‚ÇÅ ‚•§ C‚ÇÇ` and `F : C‚ÇÇ ‚•§ C‚ÇÅ` induce functors
`G' : D‚ÇÅ ‚•§ D‚ÇÇ` and `F' : D‚ÇÇ ‚•§ D‚ÇÅ` on localized categories, i.e. that we
have localization functors `L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ` and `L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ` with respect
to morphism properties `W‚ÇÅ` and `W‚ÇÇ` respectively, and 2-commutative diagrams
`[CatCommSq G L‚ÇÅ L‚ÇÇ G']` and `[CatCommSq F L‚ÇÇ L‚ÇÅ F']`, then we have an
induced adjunction `Adjunction.localization L‚ÇÅ W‚ÇÅ L‚ÇÇ W‚ÇÇ G' F' : G' ‚ä£ F'`.

-/

namespace CategoryTheory

open Localization Category

variable {C‚ÇÅ C‚ÇÇ D‚ÇÅ D‚ÇÇ : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category D‚ÇÅ] [Category D‚ÇÇ]
  {G : C‚ÇÅ ‚•§ C‚ÇÇ} {F : C‚ÇÇ ‚•§ C‚ÇÅ} (adj : G ‚ä£ F)
  (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (W‚ÇÅ : MorphismProperty C‚ÇÅ) [L‚ÇÅ.IsLocalization W‚ÇÅ]
  (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (W‚ÇÇ : MorphismProperty C‚ÇÇ) [L‚ÇÇ.IsLocalization W‚ÇÇ]
  (G' : D‚ÇÅ ‚•§ D‚ÇÇ) (F' : D‚ÇÇ ‚•§ D‚ÇÅ)
  [CatCommSq G L‚ÇÅ L‚ÇÇ G'] [CatCommSq F L‚ÇÇ L‚ÇÅ F']

namespace Adjunction

namespace Localization

/-- Auxiliary definition of the unit morphism for the adjunction `Adjunction.localization` -/
noncomputable def Œµ : ùü≠ D‚ÇÅ ‚ü∂ G' ‚ãô F' := by
  letI : Lifting L‚ÇÅ W‚ÇÅ ((G ‚ãô F) ‚ãô L‚ÇÅ) (G' ‚ãô F') :=
    Lifting.mk (CatCommSq.hComp G F L‚ÇÅ L‚ÇÇ L‚ÇÅ G' F').iso'.symm
  exact Localization.liftNatTrans L‚ÇÅ W‚ÇÅ L‚ÇÅ ((G ‚ãô F) ‚ãô L‚ÇÅ) (ùü≠ D‚ÇÅ) (G' ‚ãô F')
    (whiskerRight adj.unit L‚ÇÅ)

lemma Œµ_app (X‚ÇÅ : C‚ÇÅ) :
    (Œµ adj L‚ÇÅ W‚ÇÅ L‚ÇÇ G' F').app (L‚ÇÅ.obj X‚ÇÅ) =
      L‚ÇÅ.map (adj.unit.app X‚ÇÅ) ‚â´ (CatCommSq.iso F L‚ÇÇ L‚ÇÅ F').hom.app (G.obj X‚ÇÅ) ‚â´
        F'.map ((CatCommSq.iso G L‚ÇÅ L‚ÇÇ G').hom.app X‚ÇÅ) := by
  letI : Lifting L‚ÇÅ W‚ÇÅ ((G ‚ãô F) ‚ãô L‚ÇÅ) (G' ‚ãô F') :=
    Lifting.mk (CatCommSq.hComp G F L‚ÇÅ L‚ÇÇ L‚ÇÅ G' F').iso'.symm
  simp only [Œµ, liftNatTrans_app, Lifting.iso, Iso.symm,
    Functor.id_obj, Functor.comp_obj, Lifting.id_iso', Functor.rightUnitor_hom_app,
      whiskerRight_app, CatCommSq.hComp_iso'_hom_app, id_comp]

/-- Auxiliary definition of the counit morphism for the adjunction `Adjunction.localization` -/
noncomputable def Œ∑ : F' ‚ãô G' ‚ü∂ ùü≠ D‚ÇÇ := by
  letI : Lifting L‚ÇÇ W‚ÇÇ ((F ‚ãô G) ‚ãô L‚ÇÇ) (F' ‚ãô G') :=
    Lifting.mk (CatCommSq.hComp F G L‚ÇÇ L‚ÇÅ L‚ÇÇ F' G').iso'.symm
  exact liftNatTrans L‚ÇÇ W‚ÇÇ ((F ‚ãô G) ‚ãô L‚ÇÇ) L‚ÇÇ (F' ‚ãô G') (ùü≠ D‚ÇÇ) (whiskerRight adj.counit L‚ÇÇ)

lemma Œ∑_app (X‚ÇÇ : C‚ÇÇ) :
    (Œ∑ adj L‚ÇÅ L‚ÇÇ W‚ÇÇ G' F').app (L‚ÇÇ.obj X‚ÇÇ) =
      G'.map ((CatCommSq.iso F L‚ÇÇ L‚ÇÅ F').inv.app X‚ÇÇ) ‚â´
        (CatCommSq.iso G L‚ÇÅ L‚ÇÇ G').inv.app (F.obj X‚ÇÇ) ‚â´
        L‚ÇÇ.map (adj.counit.app X‚ÇÇ) := by
  letI : Lifting L‚ÇÇ W‚ÇÇ ((F ‚ãô G) ‚ãô L‚ÇÇ) (F' ‚ãô G') :=
    Lifting.mk (CatCommSq.hComp F G L‚ÇÇ L‚ÇÅ L‚ÇÇ F' G').iso'.symm
  simp only [Œ∑, liftNatTrans_app, Lifting.iso, Iso.symm, CatCommSq.hComp_iso'_inv_app,
    whiskerRight_app, Lifting.id_iso', Functor.rightUnitor_inv_app, comp_id, assoc]

end Localization

/-- If `adj : G ‚ä£ F` is an adjunction between two categories `C‚ÇÅ` and `C‚ÇÇ` that
are equipped with localization functors `L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ` and `L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ` with
respect to `W‚ÇÅ : MorphismProperty C‚ÇÅ` and `W‚ÇÇ : MorphismProperty C‚ÇÇ`, and that
the functors `F : C‚ÇÇ ‚•§ C‚ÇÅ` and `G : C‚ÇÅ ‚•§ C‚ÇÇ` induce functors `F' : D‚ÇÇ ‚•§ D‚ÇÅ`
and `G' : D‚ÇÅ ‚•§ D‚ÇÇ` on the localized categories, then the adjunction `adj`
induces an adjunction `G' ‚ä£ F'`. -/
noncomputable def localization : G' ‚ä£ F' :=
  Adjunction.mkOfUnitCounit
    { unit := Localization.Œµ adj L‚ÇÅ W‚ÇÅ L‚ÇÇ G' F'
      counit := Localization.Œ∑ adj L‚ÇÅ L‚ÇÇ W‚ÇÇ G' F'
      left_triangle := by
        apply natTrans_ext L‚ÇÅ W‚ÇÅ
        intro X‚ÇÅ
        have eq := congr_app adj.left_triangle X‚ÇÅ
        dsimp at eq
        rw [NatTrans.comp_app, NatTrans.comp_app, whiskerRight_app, Localization.Œµ_app,
          Functor.associator_hom_app, id_comp, whiskerLeft_app, G'.map_comp, G'.map_comp,
          assoc, assoc]
        erw [(Localization.Œ∑ adj L‚ÇÅ L‚ÇÇ W‚ÇÇ G' F').naturality, Localization.Œ∑_app,
          assoc, assoc, ‚Üê G'.map_comp_assoc, ‚Üê G'.map_comp_assoc, assoc, Iso.hom_inv_id_app,
          comp_id, (CatCommSq.iso G L‚ÇÅ L‚ÇÇ G').inv.naturality_assoc, ‚Üê L‚ÇÇ.map_comp_assoc, eq,
          L‚ÇÇ.map_id, id_comp, Iso.inv_hom_id_app]
        rfl
      right_triangle := by
        apply natTrans_ext L‚ÇÇ W‚ÇÇ
        intro X‚ÇÇ
        have eq := congr_app adj.right_triangle X‚ÇÇ
        dsimp at eq
        rw [NatTrans.comp_app, NatTrans.comp_app, whiskerLeft_app, whiskerRight_app,
          Localization.Œ∑_app, Functor.associator_inv_app, id_comp, F'.map_comp, F'.map_comp]
        erw [‚Üê (Localization.Œµ _ _ _ _ _ _).naturality_assoc, Localization.Œµ_app,
          assoc, assoc, ‚Üê F'.map_comp_assoc, Iso.hom_inv_id_app, F'.map_id, id_comp,
          ‚Üê NatTrans.naturality, ‚Üê L‚ÇÅ.map_comp_assoc, eq, L‚ÇÅ.map_id, id_comp,
          Iso.inv_hom_id_app]
        rfl }

@[simp]
lemma localization_unit_app (X‚ÇÅ : C‚ÇÅ) :
    (adj.localization L‚ÇÅ W‚ÇÅ L‚ÇÇ W‚ÇÇ G' F').unit.app (L‚ÇÅ.obj X‚ÇÅ) =
    L‚ÇÅ.map (adj.unit.app X‚ÇÅ) ‚â´ (CatCommSq.iso F L‚ÇÇ L‚ÇÅ F').hom.app (G.obj X‚ÇÅ) ‚â´
      F'.map ((CatCommSq.iso G L‚ÇÅ L‚ÇÇ G').hom.app X‚ÇÅ) := by
  apply Localization.Œµ_app

@[simp]
lemma localization_counit_app (X‚ÇÇ : C‚ÇÇ) :
    (adj.localization L‚ÇÅ W‚ÇÅ L‚ÇÇ W‚ÇÇ G' F').counit.app (L‚ÇÇ.obj X‚ÇÇ) =
    G'.map ((CatCommSq.iso F L‚ÇÇ L‚ÇÅ F').inv.app X‚ÇÇ) ‚â´
      (CatCommSq.iso G L‚ÇÅ L‚ÇÇ G').inv.app (F.obj X‚ÇÇ) ‚â´
      L‚ÇÇ.map (adj.counit.app X‚ÇÇ) := by
  apply Localization.Œ∑_app

end Adjunction

end CategoryTheory
