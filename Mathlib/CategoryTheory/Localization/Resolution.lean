/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Localization.LocalizerMorphism

/-!
# Resolutions for a morphism of localizers

Given a morphism of localizers `Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ` (i.e. `W‚ÇÅ` and `W‚ÇÇ` are
morphism properties on categories `C‚ÇÅ` and `C‚ÇÇ`, and we have a functor
`Œ¶.functor : C‚ÇÅ ‚•§ C‚ÇÇ` which sends morphisms in `W‚ÇÅ` to morphisms in `W‚ÇÇ`), we introduce
the notion of right resolutions of objects in `C‚ÇÇ`: if `X‚ÇÇ : C‚ÇÇ`.
A right resolution consists of an object `X‚ÇÅ : C‚ÇÅ` and a morphism
`w : X‚ÇÇ ‚ü∂ Œ¶.functor.obj X‚ÇÅ` that is in `W‚ÇÇ`. Then, the typeclass
`Œ¶.HasRightResolutions` holds when any `X‚ÇÇ : C‚ÇÇ` has a right resolution.

The type of right resolutions `Œ¶.RightResolution X‚ÇÇ` is endowed with a category
structure when the morphism property `W‚ÇÅ` is multiplicative.

## Future works

* formalize right derivability structures as localizer morphisms admitting right resolutions
and forming a Guitart exact square, as it is defined in
[the paper by Kahn and Maltsiniotis][KahnMaltsiniotis2008] (TODO @joelriou)
* show that if `C` is an abelian category with enough injectives, there is a derivability
structure associated to the inclusion of the full subcategory of complexes of injective
objects into the bounded below homotopy category of `C` (TODO @joelriou)
* formalize dual results

## References
* [Bruno Kahn and Georges Maltsiniotis, *Structures de d√©rivabilit√©*][KahnMaltsiniotis2008]

-/

universe v‚ÇÅ v‚ÇÇ v‚ÇÇ' u‚ÇÅ u‚ÇÇ u‚ÇÇ'

namespace CategoryTheory

open Category Localization

variable {C‚ÇÅ C‚ÇÇ D‚ÇÇ H : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category D‚ÇÇ] [Category H]
  {W‚ÇÅ : MorphismProperty C‚ÇÅ} {W‚ÇÇ : MorphismProperty C‚ÇÇ}

namespace LocalizerMorphism

variable (Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ)

/-- The category of resolutions of an object in the target category of a localizer morphism. -/
structure RightResolution (X‚ÇÇ : C‚ÇÇ) where
  /-- an object in the source category -/
  {X‚ÇÅ : C‚ÇÅ}
  /-- a morphism to an object of the form `Œ¶.functor.obj X‚ÇÅ` -/
  w : X‚ÇÇ ‚ü∂ Œ¶.functor.obj X‚ÇÅ
  hw : W‚ÇÇ w

variable {Œ¶ X‚ÇÇ} in
lemma RightResolution.mk_surjective (R : Œ¶.RightResolution X‚ÇÇ) :
    ‚àÉ (X‚ÇÅ : C‚ÇÅ) (w : X‚ÇÇ ‚ü∂ Œ¶.functor.obj X‚ÇÅ) (hw : W‚ÇÇ w), R = RightResolution.mk w hw :=
  ‚ü®_, R.w, R.hw, rfl‚ü©

/-- A localizer morphism has right resolutions when any object has a right resolution. -/
abbrev HasRightResolutions := ‚àÄ (X‚ÇÇ : C‚ÇÇ), Nonempty (Œ¶.RightResolution X‚ÇÇ)

namespace RightResolution

variable {Œ¶} {X‚ÇÇ : C‚ÇÇ}

/-- The type of morphisms in the category `Œ¶.RightResolution X‚ÇÇ` (when `W‚ÇÅ` is multiplicative). -/
@[ext]
structure Hom (R R' : Œ¶.RightResolution X‚ÇÇ) where
  /-- a morphism in the source category -/
  f : R.X‚ÇÅ ‚ü∂ R'.X‚ÇÅ
  hf : W‚ÇÅ f
  comm : R.w ‚â´ Œ¶.functor.map f = R'.w := by aesop_cat

attribute [reassoc (attr := simp)] Hom.comm

/-- The identity of a object in `Œ¶.RightResolution X‚ÇÇ`. -/
@[simps]
def Hom.id [W‚ÇÅ.ContainsIdentities] (R : Œ¶.RightResolution X‚ÇÇ) : Hom R R where
  f := ùüô _
  hf := W‚ÇÅ.id_mem _

variable [W‚ÇÅ.IsMultiplicative]

/-- The composition of morphisms in `Œ¶.RightResolution X‚ÇÇ`. -/
@[simps]
def Hom.comp {R R' R'' : Œ¶.RightResolution X‚ÇÇ}
    (œÜ : Hom R R') (œà : Hom R' R'') :
    Hom R R'' where
  f := œÜ.f ‚â´ œà.f
  hf := W‚ÇÅ.comp_mem _ _ œÜ.hf œà.hf

instance : Category (Œ¶.RightResolution X‚ÇÇ) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

@[simp]
lemma id_f (R : Œ¶.RightResolution X‚ÇÇ) : Hom.f (ùüô R) = ùüô R.X‚ÇÅ := rfl

@[simp, reassoc]
lemma comp_f {R R' R'' : Œ¶.RightResolution X‚ÇÇ} (œÜ : R ‚ü∂ R') (œà : R' ‚ü∂ R'') :
    (œÜ ‚â´ œà).f = œÜ.f ‚â´ œà.f := rfl

@[ext]
lemma hom_ext {R R' : Œ¶.RightResolution X‚ÇÇ} {œÜ‚ÇÅ œÜ‚ÇÇ : R ‚ü∂ R'} (h : œÜ‚ÇÅ.f = œÜ‚ÇÇ.f) :
    œÜ‚ÇÅ = œÜ‚ÇÇ :=
  Hom.ext _ _ h

end RightResolution

section

variable [Œ¶.HasRightResolutions] (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) [L‚ÇÇ.IsLocalization W‚ÇÇ]

lemma essSurj_of_hasRightResolutions : EssSurj (Œ¶.functor ‚ãô L‚ÇÇ) where
  mem_essImage X‚ÇÇ := by
    have : EssSurj L‚ÇÇ := Localization.essSurj L‚ÇÇ W‚ÇÇ
    have R : Œ¶.RightResolution (L‚ÇÇ.objPreimage X‚ÇÇ) := Classical.arbitrary _
    exact ‚ü®R.X‚ÇÅ, ‚ü®(Localization.isoOfHom L‚ÇÇ W‚ÇÇ _ R.hw).symm ‚â™‚â´ L‚ÇÇ.objObjPreimageIso X‚ÇÇ‚ü©‚ü©

lemma isIso_iff_of_hasRightResolutions {F G : D‚ÇÇ ‚•§ H} (Œ± : F ‚ü∂ G) :
    IsIso Œ± ‚Üî ‚àÄ (X‚ÇÅ : C‚ÇÅ), IsIso (Œ±.app (L‚ÇÇ.obj (Œ¶.functor.obj X‚ÇÅ))) := by
  constructor
  ¬∑ intros
    infer_instance
  ¬∑ intro hŒ±
    have : ‚àÄ (X‚ÇÇ : D‚ÇÇ), IsIso (Œ±.app X‚ÇÇ) := fun X‚ÇÇ => by
      have := Œ¶.essSurj_of_hasRightResolutions L‚ÇÇ
      rw [‚Üê NatTrans.isIso_app_iff_of_iso Œ± ((Œ¶.functor ‚ãô L‚ÇÇ).objObjPreimageIso X‚ÇÇ)]
      apply hŒ±
    exact NatIso.isIso_of_isIso_app Œ±

end

end LocalizerMorphism

end CategoryTheory
