/-
Copyright (c) 2025 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson
-/
import Mathlib.CategoryTheory.EffectiveEpi.RegularEpi
import Mathlib.CategoryTheory.Localization.Monoidal
import Mathlib.Combinatorics.Quiver.ReflQuiver
/-!

# Universal property of localized monoidal categories

This file proves that, given a localization functor `L : C ‚•§ D`, such that `C` is a monoidal
category, and a functor `F : D ‚•§ E` to a monoidal category, such that `L ‚ãô F` is monoidal,
then `F` is monoidal with respect to the localized monoidal structure on `D`. See
`CategoryTheory.Localization.Monoidal.functorMonoidalOfComp`.
-/

universe u

namespace CategoryTheory

open CategoryTheory Limits Opposite MonoidalCategory Functor Functor.Monoidal

namespace Localization.Monoidal

variable {C D : Type*} [Category C] [Category D] (L : C ‚•§ D) (W : MorphismProperty C)
  [MonoidalCategory C]

variable [W.IsMonoidal] [L.IsLocalization W] {unit : D} (Œµ : L.obj (ùüô_ C) ‚âÖ unit)

local notation "L'" => toMonoidalCategory L W Œµ

instance : (L').IsLocalization W := inferInstanceAs (L.IsLocalization W)

variable {E : Type*} [Category E] [MonoidalCategory E] (F : LocalizedMonoidal L W Œµ ‚•§ E)
    [(L ‚ãô F).Monoidal]

instance : (L' ‚ãô F).Monoidal := inferInstanceAs (L ‚ãô F).Monoidal

noncomputable instance : Lifting‚ÇÇ L' L' W W
    ((curriedTensor C) ‚ãô (whiskeringRight C C E).obj (L' ‚ãô F))
    (curriedTensor _ ‚ãô (whiskeringRight _ _ _).obj F) := by
  change (Lifting‚ÇÇ L' L' W W
    (((curriedTensor C) ‚ãô (whiskeringRight C C D).obj L') ‚ãô (whiskeringRight C D E).obj _)
    (tensorBifunctor L W Œµ ‚ãô (whiskeringRight _ _ _).obj F))
  apply (config := {allowSynthFailures := true}) Lifting‚ÇÇ.compRight
  exact inferInstanceAs (Lifting‚ÇÇ L L W W (curriedTensor C ‚ãô (whiskeringRight C C D).obj L')
    (Localization.lift‚ÇÇ _ (isInvertedBy‚ÇÇ L W Œµ) L L))

noncomputable instance : Lifting‚ÇÇ L' L' W W
    ((((whiskeringLeft‚ÇÇ _).obj (L' ‚ãô F)).obj (L' ‚ãô F)).obj (curriedTensor E))
    ((((whiskeringLeft‚ÇÇ _).obj F).obj F).obj (curriedTensor E)) where
  iso' := Iso.refl _

-- curriedTensorPre F ‚âÖ curriedTensorPost F
/--
The natural isomorphism of bifunctors `F - ‚äó F - ‚âÖ F (- ‚äó -)`, given that `L ‚ãô F` is monoidal.
-/
noncomputable def ŒºNatIso : ((((whiskeringLeft‚ÇÇ _).obj F).obj F).obj (curriedTensor E)) ‚âÖ
    (curriedTensor _ ‚ãô (whiskeringRight _ _ _).obj F) := by
  refine lift‚ÇÇNatIso L' L' W W
    ((((whiskeringLeft‚ÇÇ _).obj (L' ‚ãô F)).obj (L' ‚ãô F)).obj (curriedTensor E))
    ((curriedTensor C) ‚ãô (whiskeringRight C C E).obj (L' ‚ãô F))
    ((((whiskeringLeft‚ÇÇ _).obj F).obj F).obj (curriedTensor E))
    (curriedTensor _ ‚ãô (whiskeringRight _ _ _).obj F)
    ?_
  refine NatIso.ofComponents (fun _ ‚Ü¶ (NatIso.ofComponents (fun _ ‚Ü¶ ŒºIso (L' ‚ãô F) _ _) ?_)) ?_
  ¬∑ intros
    simp only [whiskeringLeft‚ÇÇ_obj_obj_obj_obj_obj, Functor.comp_obj, curriedTensor_obj_obj,
      whiskeringRight_obj_obj, whiskeringLeft‚ÇÇ_obj_obj_obj_obj_map, Functor.comp_map,
      curriedTensor_obj_map, ŒºIso_hom]
    change _ =  _ ‚â´ (L' ‚ãô F).map _
    rw [map_whiskerLeft]
    simp
  ¬∑ intros
    ext
    simp only [Functor.comp_obj, whiskeringRight_obj_obj, curriedTensor_obj_obj,
      whiskeringLeft‚ÇÇ_obj_obj_obj_obj_obj, Functor.comp_map, whiskeringRight_obj_map,
      NatTrans.comp_app, Functor.whiskerRight_app, curriedTensor_map_app,
      NatIso.ofComponents_hom_app, whiskeringLeft‚ÇÇ_obj_obj_obj_map_app]
    change _ = _ ‚â´ (L' ‚ãô F).map _
    rw [map_whiskerRight]
    simp

lemma ŒºNatIso_hom_app_app (X Y : C) :
    ((ŒºNatIso L W Œµ F).hom.app ((L').obj X)).app ((L').obj Y) =
      Functor.LaxMonoidal.Œº (L' ‚ãô F) X Y ‚â´
        F.map (Functor.OplaxMonoidal.Œ¥ L' X Y) := by
  simp [ŒºNatIso, lift‚ÇÇNatIso, Lifting‚ÇÇ.iso, Lifting‚ÇÇ.iso']
  rfl

/--
Variant of `ŒºNatIso_hom_app_app` where the notation `L'` in the first argument is replaced by `L`
-/
lemma ŒºNatIso_hom_app_app' (X Y : C) :
  ((ŒºNatIso L W Œµ F).hom.app (L.obj X)).app ((L').obj Y) =
    Functor.LaxMonoidal.Œº (L ‚ãô F) X Y ‚â´
      F.map (Functor.OplaxMonoidal.Œ¥ L' X Y) :=
  ŒºNatIso_hom_app_app _ _ _ _ X Y

/--
Variant of `ŒºNatIso_hom_app_app` where the notation `L'` in the second argument is replaced by `L`
-/
lemma ŒºNatIso_hom_app_app'' (X Y : C) :
  ((ŒºNatIso L W Œµ F).hom.app ((L').obj X)).app (L.obj Y) =
    Functor.LaxMonoidal.Œº (L ‚ãô F) X Y ‚â´
      F.map (Functor.OplaxMonoidal.Œ¥ L' X Y) :=
  ŒºNatIso_hom_app_app _ _ _ _ X Y

/--
Monoidal structure on `F`, given that `L ‚ãô F` is monoidal, where `L` is a localization functor.
-/
noncomputable def functorCoremonoidalOfComp : F.CoreMonoidal := by
  refine Functor.CoreMonoidal.ofBifunctor (ŒµIso (L ‚ãô F) ‚â™‚â´ F.mapIso Œµ) (ŒºNatIso L W Œµ F) ?_ ?_ ?_
  ¬∑ apply natTrans‚ÇÉ_ext (L') (L') (L') W W W
    intro X Y Z
    simp only [curriedTensorPrePre_obj_obj_obj, curriedTensorPostPost'_obj_obj_obj,
      LaxMonoidal.firstMap_app_app_app, LaxMonoidal.secondMap_app_app_app]
    simp only [ŒºNatIso_hom_app_app, comp_obj, CoreMonoidal.toMonoidal_toOplaxMonoidal,
      comp_whiskerRight, Category.assoc, MonoidalCategory.whiskerLeft_comp]
    have := (ŒºNatIso L W Œµ F).hom.naturality ((Functor.LaxMonoidal.Œº L' X Y))
    apply NatTrans.congr_app at this
    specialize this ((L').obj Z)
    simp only [whiskeringLeft‚ÇÇ_obj_obj_obj_obj_obj, curriedTensor_obj_obj, Functor.comp_obj,
      whiskeringRight_obj_obj, Functor.CoreMonoidal.toMonoidal_toLaxMonoidal, NatTrans.comp_app,
      whiskeringLeft‚ÇÇ_obj_obj_obj_map_app, curriedTensor_map_app, Functor.comp_map,
      whiskeringRight_obj_map, Functor.whiskerRight_app] at this
    change _ = _ ‚â´ (F.mapIso ((Functor.mapIso _ (Functor.Monoidal.ŒºIso L' _ _)).app _)).hom at this
    rw [‚Üê Iso.comp_inv_eq] at this
    simp only [Functor.mapIso_inv, Iso.app_inv, Category.assoc] at this
    change _ ‚â´ _ ‚â´ F.map (_ ‚ñ∑ (L').obj Z) = _ at this
    rw [‚Üê this, ŒºNatIso_hom_app_app]
    simp only [comp_obj, CoreMonoidal.toMonoidal_toOplaxMonoidal, ŒºIso_inv, Category.assoc]
    have := ((ŒºNatIso L W Œµ F).hom.app ((L').obj X)).naturality (Functor.LaxMonoidal.Œº L' Y Z)
    simp only [whiskeringLeft‚ÇÇ_obj_obj_obj_obj_obj, curriedTensor_obj_obj, comp_obj,
      whiskeringRight_obj_obj, CoreMonoidal.toMonoidal_toLaxMonoidal,
      whiskeringLeft‚ÇÇ_obj_obj_obj_obj_map, curriedTensor_obj_map, Functor.comp_map] at this
    change _ = _ ‚â´ (F.mapIso (Functor.mapIso _ (Functor.Monoidal.ŒºIso L' Y Z))).hom at this
    rw [‚Üê Iso.comp_inv_eq] at this
    simp only [Functor.mapIso_inv, ŒºIso_inv, Functor.CoreMonoidal.toMonoidal_toOplaxMonoidal,
      Category.assoc] at this
    change _ ‚â´ _ ‚â´ F.map ((L').obj X ‚óÅ _) = _ at this
    rw [‚Üê this]
    simp only [ŒºNatIso_hom_app_app, comp_obj, CoreMonoidal.toMonoidal_toOplaxMonoidal,
      Category.assoc]
    simp only [‚Üê map_comp, OplaxMonoidal.associativity]
    simp only [‚Üê Category.assoc, map_comp]
    congr 2
    simp only [Category.assoc]
    simp only [‚Üê comp_whiskerRight_assoc, map_Œ¥_Œº, id_whiskerRight, Category.id_comp,
      ‚Üê MonoidalCategory.whiskerLeft_comp_assoc, MonoidalCategory.whiskerLeft_id]
    exact Functor.Monoidal.toLaxMonoidal.associativity (F := L' ‚ãô F) _ _ _
  ¬∑ apply natTrans_ext (L') W
    intro X
    simp only [comp_obj, curriedTensor_obj_obj, LaxMonoidal.leftMap‚Çó_app, Iso.trans_hom, ŒµIso_hom,
      mapIso_hom, NatTrans.comp_app, curriedTensorPre_obj_obj, LaxMonoidal.topMap‚Çó_app,
      comp_whiskerRight, curriedTensorPost_obj_obj, LaxMonoidal.bottomMap‚Çó_app,
      LaxMonoidal.left_unitality, CoreMonoidal.toMonoidal_toLaxMonoidal, map_comp, Category.assoc]
    change _ = _ ‚â´ _ ‚â´ ((ŒºNatIso L W Œµ F).hom.app unit).app _ ‚â´ _ ‚â´ _
    have := NatTrans.congr_app ((ŒºNatIso L W Œµ F).hom.naturality Œµ.hom) ((L').obj X)
    simp only [whiskeringLeft‚ÇÇ_obj_obj_obj_obj_obj, curriedTensor_obj_obj, comp_obj,
      whiskeringRight_obj_obj, NatTrans.comp_app, whiskeringLeft‚ÇÇ_obj_obj_obj_map_app,
      curriedTensor_map_app, Functor.comp_map, whiskeringRight_obj_map, whiskerRight_app] at this
    slice_rhs 2 3 => rw [this]
    simp only [comp_obj, whiskeringRight_obj_obj, curriedTensor_obj_obj, ŒºNatIso_hom_app_app',
      CoreMonoidal.toMonoidal_toOplaxMonoidal, Category.assoc]
    change (Œª_ ((L' ‚ãô F).obj _)).hom = _
    rw [Functor.LaxMonoidal.left_unitality (L' ‚ãô F), show LaxMonoidal.Œµ L' = Œµ.inv from rfl]
    simp [‚Üê Functor.map_comp]
    rfl
  ¬∑ apply natTrans_ext (L') W
    intro X
    simp only [comp_obj, flip_obj_obj, curriedTensor_obj_obj, LaxMonoidal.leftMap·µ£_app,
      Iso.trans_hom, ŒµIso_hom, mapIso_hom, flipFunctor_obj, NatTrans.comp_app,
      curriedTensorPre_obj_obj, LaxMonoidal.topMap·µ£_app, MonoidalCategory.whiskerLeft_comp,
      curriedTensorPost_obj_obj, flipFunctor_map_app_app, LaxMonoidal.bottomMap·µ£_app,
      LaxMonoidal.right_unitality, CoreMonoidal.toMonoidal_toLaxMonoidal, map_comp, Category.assoc]
    change _ = _ ‚â´ _ ‚â´ ((ŒºNatIso L W Œµ F).hom.app _).app unit ‚â´ _ ‚â´ _
    have := ((ŒºNatIso L W Œµ F).hom.app ((L').obj X)).naturality Œµ.hom
    simp only [whiskeringLeft‚ÇÇ_obj_obj_obj_obj_obj, curriedTensor_obj_obj, comp_obj,
      whiskeringRight_obj_obj, whiskeringLeft‚ÇÇ_obj_obj_obj_obj_map, curriedTensor_obj_map,
      Functor.comp_map] at this
    slice_rhs 2 3 => rw [this]
    simp only [comp_obj, whiskeringRight_obj_obj, curriedTensor_obj_obj, ŒºNatIso_hom_app_app'',
      CoreMonoidal.toMonoidal_toOplaxMonoidal, Category.assoc]
    change (œÅ_ ((L' ‚ãô F).obj _)).hom = _
    rw [Functor.LaxMonoidal.right_unitality (L' ‚ãô F), show LaxMonoidal.Œµ L' = Œµ.inv from rfl]
    simp [‚Üê Functor.map_comp]
    rfl

/--
Monoidal structure on `F`, given that `L ‚ãô F` is monoidal, where `L` is a localization functor.
-/
noncomputable def functorMonoidalOfComp : F.Monoidal :=
  (functorCoremonoidalOfComp L W Œµ F).toMonoidal

end CategoryTheory.Localization.Monoidal
