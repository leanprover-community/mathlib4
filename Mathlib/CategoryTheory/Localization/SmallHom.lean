/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Localization.HomEquiv
import Mathlib.Logic.Small.Defs

/-!
# Shrinking morphisms in localized categories

Given a class of morphisms `W : MorphismProperty C`, and two objects `X` and `Y`,
we introduce a type-class `HasSmallLocalizedHom.{w} W X Y` which expresses
that in the localized category with respect to `W`, the type of morphisms from `X`
to `Y` is `w`-small for a certain universe `w`. Under this assumption,
we define `SmallHom.{w} W X Y : Type w` as the shrunk type. For any localization
functor `L : C ‚•§ D` for `W`, we provide a bijection
`SmallHom.equiv.{w} W L : SmallHom.{w} W X Y ‚âÉ (L.obj X ‚ü∂ L.obj Y)` that is compatible
with the composition of morphisms.

-/

universe w w' v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ v‚ÇÖ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÖ

namespace CategoryTheory

open Category

namespace Localization

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] (W : MorphismProperty C)
  {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
  {D' : Type u‚ÇÉ} [Category.{v‚ÇÉ} D']

section

variable (L : C ‚•§ D) [L.IsLocalization W] (X Y Z : C)

/-- This property holds if the type of morphisms between `X` and `Y`
in the localized category with respect to `W : MorphismProperty C`
is small. -/
class HasSmallLocalizedHom : Prop where
  small : Small.{w} (W.Q.obj X ‚ü∂ W.Q.obj Y)

attribute [instance] HasSmallLocalizedHom.small

variable {X Y Z}

lemma hasSmallLocalizedHom_iff :
    HasSmallLocalizedHom.{w} W X Y ‚Üî Small.{w} (L.obj X ‚ü∂ L.obj Y) := by
  constructor
  ¬∑ intro h
    have := h.small
    exact small_map (homEquiv W W.Q L).symm
  ¬∑ intro h
    exact ‚ü®small_map (homEquiv W W.Q L)‚ü©

include L in
lemma hasSmallLocalizedHom_of_isLocalization :
    HasSmallLocalizedHom.{v‚ÇÇ} W X Y := by
  rw [hasSmallLocalizedHom_iff W L]
  infer_instance

variable (X Y) in
lemma small_of_hasSmallLocalizedHom [HasSmallLocalizedHom.{w} W X Y] :
    Small.{w} (L.obj X ‚ü∂ L.obj Y) := by
  rwa [‚Üê hasSmallLocalizedHom_iff W]

lemma hasSmallLocalizedHom_iff_of_isos {X' Y' : C} (e : X ‚âÖ X') (e' : Y ‚âÖ Y') :
    HasSmallLocalizedHom.{w} W X Y ‚Üî HasSmallLocalizedHom.{w} W X' Y' := by
  simp only [hasSmallLocalizedHom_iff W W.Q]
  exact small_congr (Iso.homCongr (W.Q.mapIso e) (W.Q.mapIso e'))

variable (X) in
lemma hasSmallLocalizedHom_iff_target {Y Y' : C} (f : Y ‚ü∂  Y') (hf : W f):
    HasSmallLocalizedHom.{w} W X Y ‚Üî HasSmallLocalizedHom.{w} W X Y' := by
  simp only [hasSmallLocalizedHom_iff W W.Q]
  exact small_congr (Iso.homCongr (Iso.refl _) (Localization.isoOfHom W.Q W f hf))

lemma hasSmallLocalizedHom_iff_source {X' : C} (f : X ‚ü∂  X') (hf : W f) (Y : C) :
    HasSmallLocalizedHom.{w} W X Y ‚Üî HasSmallLocalizedHom.{w} W X' Y := by
  simp only [hasSmallLocalizedHom_iff W W.Q]
  exact small_congr (Iso.homCongr (Localization.isoOfHom W.Q W f hf) (Iso.refl _))

end

/-- The type of morphisms from `X` to `Y` in the localized category
with respect to `W : MorphismProperty C` that is shrunk to `Type w`
when `HasSmallLocalizedHom.{w} W X Y` holds. -/
def SmallHom (X Y : C) [HasSmallLocalizedHom.{w} W X Y] : Type w :=
  Shrink.{w} (W.Q.obj X ‚ü∂ W.Q.obj Y)

namespace SmallHom

/-- The canonical bijection `SmallHom.{w} W X Y ‚âÉ (L.obj X ‚ü∂ L.obj Y)`
when `L` is a localization functor for `W : MorphismProperty C` and
that `HasSmallLocalizedHom.{w} W X Y` holds. -/
noncomputable def equiv (L : C ‚•§ D) [L.IsLocalization W] {X Y : C}
    [HasSmallLocalizedHom.{w} W X Y] :
    SmallHom.{w} W X Y ‚âÉ (L.obj X ‚ü∂ L.obj Y) :=
  letI := small_of_hasSmallLocalizedHom.{w} W W.Q X Y
  (equivShrink _).symm.trans (homEquiv W W.Q L)

lemma equiv_equiv_symm (L : C ‚•§ D) [L.IsLocalization W]
    (L' : C ‚•§ D') [L'.IsLocalization W] (G : D ‚•§ D')
    (e : L ‚ãô G ‚âÖ L') {X Y : C} [HasSmallLocalizedHom.{w} W X Y]
    (f : L.obj X ‚ü∂ L.obj Y) :
    equiv W L' ((equiv W L).symm f) =
      e.inv.app X ‚â´ G.map f ‚â´ e.hom.app Y := by
  dsimp [equiv]
  rw [Equiv.symm_apply_apply, homEquiv_trans]
  apply homEquiv_eq

/-- The element in `SmallHom W X Y` induced by `f : X ‚ü∂ Y`. -/
noncomputable def mk {X Y : C} [HasSmallLocalizedHom.{w} W X Y] (f : X ‚ü∂ Y) :
    SmallHom.{w} W X Y :=
  (equiv.{w} W W.Q).symm (W.Q.map f)

@[simp]
lemma equiv_mk (L : C ‚•§ D) [L.IsLocalization W] {X Y : C}
    [HasSmallLocalizedHom.{w} W X Y] (f : X ‚ü∂ Y) :
    equiv.{w} W L (mk W f) = L.map f := by
  simp [equiv, mk]

variable {W}

/-- The formal inverse in `SmallHom W X Y` of a morphism `f : Y ‚ü∂ X` such that `W f`. -/
noncomputable def mkInv {X Y : C} (f : Y ‚ü∂ X) (hf : W f) [HasSmallLocalizedHom.{w} W X Y] :
    SmallHom.{w} W X Y :=
  (equiv.{w} W W.Q).symm (Localization.isoOfHom W.Q W f hf).inv

@[simp]
lemma equiv_mkInv (L : C ‚•§ D) [L.IsLocalization W] {X Y : C} (f : Y ‚ü∂ X) (hf : W f)
    [HasSmallLocalizedHom.{w} W X Y] :
    equiv.{w} W L (mkInv f hf) = (Localization.isoOfHom L W f hf).inv := by
  simp only [equiv, mkInv, Equiv.symm_trans_apply, Equiv.symm_symm, homEquiv_symm_apply,
    Equiv.trans_apply, Equiv.symm_apply_apply, homEquiv_isoOfHom_inv]

/-- The composition on `SmallHom W`. -/
noncomputable def comp {X Y Z : C} [HasSmallLocalizedHom.{w} W X Y]
    [HasSmallLocalizedHom.{w} W Y Z] [HasSmallLocalizedHom.{w} W X Z]
    (Œ± : SmallHom.{w} W X Y) (Œ≤ : SmallHom.{w} W Y Z) :
    SmallHom.{w} W X Z :=
  (equiv W W.Q).symm (equiv W W.Q Œ± ‚â´ equiv W W.Q Œ≤)

lemma equiv_comp (L : C ‚•§ D) [L.IsLocalization W] {X Y Z : C} [HasSmallLocalizedHom.{w} W X Y]
    [HasSmallLocalizedHom.{w} W Y Z] [HasSmallLocalizedHom.{w} W X Z]
    (Œ± : SmallHom.{w} W X Y) (Œ≤ : SmallHom.{w} W Y Z) :
    equiv W L (Œ±.comp Œ≤) = equiv W L Œ± ‚â´ equiv W L Œ≤ := by
  letI := small_of_hasSmallLocalizedHom.{w} W W.Q X Y
  letI := small_of_hasSmallLocalizedHom.{w} W W.Q Y Z
  obtain ‚ü®Œ±, rfl‚ü© := (equivShrink _).surjective Œ±
  obtain ‚ü®Œ≤, rfl‚ü© := (equivShrink _).surjective Œ≤
  dsimp [equiv, comp]
  rw [Equiv.symm_apply_apply]
  erw [(equivShrink _).symm_apply_apply, (equivShrink _).symm_apply_apply]
  simp only [homEquiv_refl, homEquiv_comp]

variable {X Y Z T : C}

lemma mk_comp_mk [HasSmallLocalizedHom.{w} W X Y] [HasSmallLocalizedHom.{w} W Y Z]
    [HasSmallLocalizedHom.{w} W X Z] (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (mk W f).comp (mk W g) = mk W (f ‚â´ g) :=
  (equiv W W.Q).injective (by simp [equiv_comp])

@[simp]
lemma comp_mk_id [HasSmallLocalizedHom.{w} W X Y] [HasSmallLocalizedHom.{w} W Y Y]
    (Œ± : SmallHom.{w} W X Y)  :
    Œ±.comp (mk W (ùüô Y)) = Œ± :=
  (equiv W W.Q).injective (by simp [equiv_comp])

@[simp]
lemma mk_id_comp [HasSmallLocalizedHom.{w} W X Y] [HasSmallLocalizedHom.{w} W X X]
    (Œ± : SmallHom.{w} W X Y) :
    (mk W (ùüô X)).comp Œ± = Œ± :=
  (equiv W W.Q).injective (by simp [equiv_comp])

@[simp]
lemma comp_assoc [HasSmallLocalizedHom.{w} W X Y] [HasSmallLocalizedHom.{w} W X Z]
    [HasSmallLocalizedHom.{w} W X T] [HasSmallLocalizedHom.{w} W Y Z]
    [HasSmallLocalizedHom.{w} W Y T] [HasSmallLocalizedHom.{w} W Z T]
    (Œ± : SmallHom.{w} W X Y) (Œ≤ : SmallHom.{w} W Y Z) (Œ≥ : SmallHom.{w} W Z T) :
    (Œ±.comp Œ≤).comp Œ≥ = Œ±.comp (Œ≤.comp Œ≥) := by
  apply (equiv W W.Q).injective
  simp only [equiv_comp, assoc]

@[simp]
lemma mk_comp_mkInv [HasSmallLocalizedHom.{w} W X Y] [HasSmallLocalizedHom.{w} W Y X]
    [HasSmallLocalizedHom.{w} W Y Y] (f : Y ‚ü∂ X) (hf : W f) :
    (mk W f).comp (mkInv f hf) = mk W (ùüô Y) :=
  (equiv W W.Q).injective (by simp [equiv_comp])

@[simp]
lemma mkInv_comp_mk [HasSmallLocalizedHom.{w} W X X] [HasSmallLocalizedHom.{w} W X Y]
    [HasSmallLocalizedHom.{w} W Y X] (f : Y ‚ü∂ X) (hf : W f) :
    (mkInv f hf).comp (mk W f) = mk W (ùüô X) :=
  (equiv W W.Q).injective (by simp [equiv_comp])

end SmallHom

end Localization

namespace LocalizerMorphism

open Localization

variable {C‚ÇÅ : Type u‚ÇÅ} [Category.{v‚ÇÅ} C‚ÇÅ] {W‚ÇÅ : MorphismProperty C‚ÇÅ}
  {C‚ÇÇ : Type u‚ÇÇ} [Category.{v‚ÇÇ} C‚ÇÇ] {W‚ÇÇ : MorphismProperty C‚ÇÇ}
  {D‚ÇÅ : Type u‚ÇÉ} [Category.{v‚ÇÉ} D‚ÇÅ] {D‚ÇÇ : Type u‚ÇÑ} [Category.{v‚ÇÑ} D‚ÇÇ]
  (Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ) (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) [L‚ÇÅ.IsLocalization W‚ÇÅ]
  (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) [L‚ÇÇ.IsLocalization W‚ÇÇ]

section

variable {X Y : C‚ÇÅ}

variable [HasSmallLocalizedHom.{w} W‚ÇÅ X Y]
  [HasSmallLocalizedHom.{w'} W‚ÇÇ (Œ¶.functor.obj X) (Œ¶.functor.obj Y)]

/-- The action of a localizer morphism on `SmallHom`. -/
noncomputable def smallHomMap (f : SmallHom.{w} W‚ÇÅ X Y) :
    SmallHom.{w'} W‚ÇÇ (Œ¶.functor.obj X) (Œ¶.functor.obj Y) :=
  (SmallHom.equiv W‚ÇÇ W‚ÇÇ.Q).symm
    (Iso.homCongr ((CatCommSq.iso Œ¶.functor W‚ÇÅ.Q W‚ÇÇ.Q _).symm.app _)
      ((CatCommSq.iso Œ¶.functor W‚ÇÅ.Q W‚ÇÇ.Q _).symm.app _)
      ((Œ¶.localizedFunctor W‚ÇÅ.Q W‚ÇÇ.Q).map ((SmallHom.equiv W‚ÇÅ W‚ÇÅ.Q) f)))

lemma equiv_smallHomMap (G : D‚ÇÅ ‚•§ D‚ÇÇ) (e : Œ¶.functor ‚ãô L‚ÇÇ ‚âÖ L‚ÇÅ ‚ãô G)
    (f : SmallHom.{w} W‚ÇÅ X Y) :
    (SmallHom.equiv W‚ÇÇ L‚ÇÇ) (Œ¶.smallHomMap f) =
      e.hom.app X ‚â´ G.map (SmallHom.equiv W‚ÇÅ L‚ÇÅ f) ‚â´ e.inv.app Y := by
  obtain ‚ü®g, rfl‚ü© := (SmallHom.equiv W‚ÇÅ W‚ÇÅ.Q).symm.surjective f
  simp only [smallHomMap, Equiv.apply_symm_apply]
  let G' := Œ¶.localizedFunctor W‚ÇÅ.Q W‚ÇÇ.Q
  let Œ≤ := CatCommSq.iso Œ¶.functor W‚ÇÅ.Q W‚ÇÇ.Q G'
  let E‚ÇÅ := (uniq W‚ÇÅ.Q L‚ÇÅ W‚ÇÅ).functor
  let Œ±‚ÇÅ : W‚ÇÅ.Q ‚ãô E‚ÇÅ ‚âÖ L‚ÇÅ := compUniqFunctor W‚ÇÅ.Q L‚ÇÅ W‚ÇÅ
  let E‚ÇÇ := (uniq W‚ÇÇ.Q L‚ÇÇ W‚ÇÇ).functor
  let Œ±‚ÇÇ : W‚ÇÇ.Q ‚ãô E‚ÇÇ ‚âÖ L‚ÇÇ := compUniqFunctor W‚ÇÇ.Q L‚ÇÇ W‚ÇÇ
  rw [SmallHom.equiv_equiv_symm W‚ÇÅ W‚ÇÅ.Q L‚ÇÅ E‚ÇÅ Œ±‚ÇÅ,
    SmallHom.equiv_equiv_symm W‚ÇÇ W‚ÇÇ.Q L‚ÇÇ E‚ÇÇ Œ±‚ÇÇ]
  change Œ±‚ÇÇ.inv.app _ ‚â´ E‚ÇÇ.map (Œ≤.hom.app X ‚â´ G'.map g ‚â´ Œ≤.inv.app Y) ‚â´ _ = _
  let Œ≥ : G' ‚ãô E‚ÇÇ ‚âÖ E‚ÇÅ ‚ãô G := liftNatIso W‚ÇÅ.Q W‚ÇÅ (W‚ÇÅ.Q ‚ãô G' ‚ãô E‚ÇÇ) (W‚ÇÅ.Q ‚ãô E‚ÇÅ ‚ãô G) _ _
    ((Functor.associator _ _ _).symm ‚â™‚â´ isoWhiskerRight Œ≤.symm E‚ÇÇ ‚â™‚â´
      Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ Œ±‚ÇÇ ‚â™‚â´ e ‚â™‚â´
      isoWhiskerRight Œ±‚ÇÅ.symm G ‚â™‚â´ Functor.associator _ _ _)
  have hŒ≥ : ‚àÄ (X : C‚ÇÅ), Œ≥.hom.app (W‚ÇÅ.Q.obj X) =
      E‚ÇÇ.map (Œ≤.inv.app X) ‚â´ Œ±‚ÇÇ.hom.app (Œ¶.functor.obj X) ‚â´
        e.hom.app X ‚â´ G.map (Œ±‚ÇÅ.inv.app X) := fun X ‚Ü¶ by
    simp [Œ≥, id_comp, comp_id]
  simp only [Functor.map_comp, assoc]
  erw [‚Üê NatIso.naturality_1 Œ≥]
  simp only [Functor.comp_map, ‚Üê cancel_epi (e.inv.app X), ‚Üê cancel_epi (G.map (Œ±‚ÇÅ.hom.app X)),
    ‚Üê cancel_epi (Œ≥.hom.app (W‚ÇÅ.Q.obj X)), assoc, Iso.inv_hom_id_app_assoc,
    ‚Üê Functor.map_comp_assoc, Iso.hom_inv_id_app, Functor.map_id, id_comp,
    Iso.hom_inv_id_app_assoc]
  simp only [hŒ≥, assoc, ‚Üê Functor.map_comp_assoc, Iso.inv_hom_id_app,
    Functor.map_id, id_comp, Iso.hom_inv_id_app_assoc,
    Iso.inv_hom_id_app_assoc, Iso.hom_inv_id_app, Functor.comp_obj, comp_id]

end

variable {X Y Z : C‚ÇÅ}

variable [HasSmallLocalizedHom.{w} W‚ÇÅ X Y] [HasSmallLocalizedHom.{w} W‚ÇÅ Y Z]
  [HasSmallLocalizedHom.{w} W‚ÇÅ X Z]
  [HasSmallLocalizedHom.{w'} W‚ÇÇ (Œ¶.functor.obj X) (Œ¶.functor.obj Y)]
  [HasSmallLocalizedHom.{w'} W‚ÇÇ (Œ¶.functor.obj Y) (Œ¶.functor.obj Z)]
  [HasSmallLocalizedHom.{w'} W‚ÇÇ (Œ¶.functor.obj X) (Œ¶.functor.obj Z)]

lemma smallHomMap_comp (f : SmallHom.{w} W‚ÇÅ X Y) (g : SmallHom.{w} W‚ÇÅ Y Z) :
    Œ¶.smallHomMap (f.comp g) = (Œ¶.smallHomMap f).comp (Œ¶.smallHomMap g) := by
  apply (SmallHom.equiv W‚ÇÇ W‚ÇÇ.Q).injective
  simp [Œ¶.equiv_smallHomMap W‚ÇÅ.Q W‚ÇÇ.Q (Œ¶.localizedFunctor W‚ÇÅ.Q W‚ÇÇ.Q) (CatCommSq.iso _ _ _ _),
    SmallHom.equiv_comp]

end LocalizerMorphism

end CategoryTheory
