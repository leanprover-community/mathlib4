/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Localization.DerivabilityStructure.Constructor

/-!
# Functorial resolutions give derivability structures

In this file, we provide a constructor for right derivability structures.
We assume that `Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ` is given by
a fully faithful functor `Œ¶.functor : C‚ÇÅ ‚•§ C‚ÇÇ` and that we have a resolution
functor `œÅ : C‚ÇÇ ‚•§ C‚ÇÅ` with a natural transformation `i : ùü≠ C‚ÇÇ ‚ü∂ œÅ ‚ãô Œ¶.functor`
such that `W‚ÇÇ (i.app X‚ÇÇ)` for any `X‚ÇÇ : C‚ÇÇ`. If we assume
that `W‚ÇÅ` is induced by `W‚ÇÇ`, that `W‚ÇÇ` is multiplicative and has
the two out of three property, then `Œ¶` is a right derivability structure.

-/

namespace CategoryTheory

variable {C‚ÇÅ C‚ÇÇ : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ]
  {W‚ÇÅ : MorphismProperty C‚ÇÅ} {W‚ÇÇ : MorphismProperty C‚ÇÇ}

namespace LocalizerMorphism

variable (Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ)
  {œÅ : C‚ÇÇ ‚•§ C‚ÇÅ} (i : ùü≠ C‚ÇÇ ‚ü∂ œÅ ‚ãô Œ¶.functor) (hi : ‚àÄ X‚ÇÇ, W‚ÇÇ (i.app X‚ÇÇ))
  (hW‚ÇÅ : W‚ÇÅ = W‚ÇÇ.inverseImage Œ¶.functor)

include hi in
lemma hasRightResolutions_arrow_of_functorial_resolutions :
    Œ¶.arrow.HasRightResolutions :=
  fun f ‚Ü¶
    ‚ü®{ X‚ÇÅ := Arrow.mk (œÅ.map f.hom)
       w := Arrow.homMk (i.app _) (i.app _) (i.naturality f.hom).symm
       hw := ‚ü®hi _, hi _‚ü© }‚ü©

namespace functorialRightResolutions
open Functor

variable {Œ¶ i}

/-- If `Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ` corresponds to a class `W‚ÇÅ` that is
the inverse image of `W‚ÇÇ` by the functor `Œ¶.functor` and that we
have functorial right resolutions, then this is a morphism of localizers
in the other direction. -/
@[simps]
def localizerMorphismInv [W‚ÇÇ.HasTwoOutOfThreeProperty] :
    LocalizerMorphism W‚ÇÇ W‚ÇÅ where
  functor := œÅ
  map := by
    rw [hW‚ÇÅ]
    intro X Y f hf
    have := i.naturality f
    dsimp at this
    simp only [MorphismProperty.inverseImage_iff]
    rw [‚Üê W‚ÇÇ.precomp_iff _ _ (hi X), ‚Üê this]
    exact W‚ÇÇ.comp_mem _ _ hf (hi Y)

variable [Œ¶.functor.Full] [Œ¶.functor.Faithful]

variable (i) in
/-- If `Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ` corresponds to a class `W‚ÇÅ` that is
induced by `W‚ÇÇ` via the fully faithful functor `Œ¶.functor` and we
have functorial right resolutions given by a functor `œÅ : C‚ÇÇ ‚•§ C‚ÇÅ`, then
this is the natural transformation `ùü≠ C‚ÇÅ ‚ü∂ Œ¶.functor ‚ãô œÅ` induced
by `i : ùü≠ C‚ÇÇ ‚ü∂ œÅ ‚ãô Œ¶.functor`. -/
noncomputable def Œπ : ùü≠ C‚ÇÅ ‚ü∂ Œ¶.functor ‚ãô œÅ :=
  ((whiskeringRight C‚ÇÅ C‚ÇÅ C‚ÇÇ).obj Œ¶.functor).preimage (whiskerLeft Œ¶.functor i)

@[simp]
lemma Œ¶_functor_map_Œπ_app (X‚ÇÅ : C‚ÇÅ) :
    Œ¶.functor.map ((Œπ i).app X‚ÇÅ) = i.app (Œ¶.functor.obj X‚ÇÅ) :=
  NatTrans.congr_app (((whiskeringRight C‚ÇÅ C‚ÇÅ C‚ÇÇ).obj Œ¶.functor).map_preimage
    (X := ùü≠ C‚ÇÅ) (Y := Œ¶.functor ‚ãô œÅ) (whiskerLeft Œ¶.functor i)) X‚ÇÅ

include hW‚ÇÅ hi in
lemma W‚ÇÅ_Œπ_app (X‚ÇÅ : C‚ÇÅ) : W‚ÇÅ ((Œπ i).app X‚ÇÅ) := by
  simpa [hW‚ÇÅ] using hi (Œ¶.functor.obj X‚ÇÅ)

end functorialRightResolutions

variable [Œ¶.functor.Full] [Œ¶.functor.Faithful] [W‚ÇÇ.HasTwoOutOfThreeProperty]

open functorialRightResolutions
include hi hW‚ÇÅ

lemma isLocalizedEquivalence_of_functorial_right_resolutions :
    Œ¶.IsLocalizedEquivalence :=
  Œ¶.isLocalizedEquivalence_of_unit_of_unit (localizerMorphismInv hi hW‚ÇÅ) (Œπ i) i
    (W‚ÇÅ_Œπ_app hi hW‚ÇÅ) hi

variable [W‚ÇÇ.IsMultiplicative]

lemma isConnected_rightResolution_of_functorial_resolutions (X‚ÇÇ : C‚ÇÇ) :
    letI : W‚ÇÅ.IsMultiplicative := by rw [hW‚ÇÅ]; infer_instance
    IsConnected (Œ¶.RightResolution X‚ÇÇ) := by
  have : W‚ÇÅ.IsMultiplicative := by rw [hW‚ÇÅ]; infer_instance
  have : Nonempty (Œ¶.RightResolution X‚ÇÇ) := ‚ü®{ hw := hi X‚ÇÇ, .. }‚ü©
  have : IsPreconnected (Œ¶.RightResolution X‚ÇÇ) :=
    zigzag_isPreconnected (fun R‚ÇÄ R‚ÇÑ ‚Ü¶
      calc
        Zigzag R‚ÇÄ { hw := W‚ÇÇ.comp_mem _ _ R‚ÇÄ.hw (hi _), .. } :=
          Zigzag.of_hom { f := (Œπ i).app R‚ÇÄ.X‚ÇÅ }
        Zigzag (J := Œ¶.RightResolution X‚ÇÇ) _ { hw := hi X‚ÇÇ, .. } :=
          Zigzag.of_inv
            { f := œÅ.map R‚ÇÄ.w
              comm := (i.naturality R‚ÇÄ.w).symm }
        Zigzag (J := Œ¶.RightResolution X‚ÇÇ) _ { hw := W‚ÇÇ.comp_mem _ _ R‚ÇÑ.hw (hi _), .. } :=
          Zigzag.of_hom
            { f := œÅ.map R‚ÇÑ.w
              comm := (i.naturality R‚ÇÑ.w).symm }
        Zigzag _ R‚ÇÑ := Zigzag.of_inv { f := (Œπ i).app R‚ÇÑ.X‚ÇÅ })
  constructor

lemma isRightDerivabilityStructure_of_functorial_resolutions :
    Œ¶.IsRightDerivabilityStructure := by
  have : W‚ÇÅ.IsMultiplicative := by rw [hW‚ÇÅ]; infer_instance
  have := Œ¶.isLocalizedEquivalence_of_functorial_right_resolutions i hi hW‚ÇÅ
  have := Œ¶.hasRightResolutions_arrow_of_functorial_resolutions i hi
  have := Œ¶.isConnected_rightResolution_of_functorial_resolutions i hi hW‚ÇÅ
  apply IsRightDerivabilityStructure.mk'

end LocalizerMorphism

end CategoryTheory
