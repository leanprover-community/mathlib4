/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Localization.DerivabilityStructure.Existence
import Mathlib.CategoryTheory.Localization.DerivabilityStructure.Product
import Mathlib.CategoryTheory.Localization.Prod

/-!
#

-/
universe v‚ÇÅ v‚ÇÇ v‚ÇÅ' v‚ÇÇ' v‚ÇÉ v‚ÇÑ v u‚ÇÅ u‚ÇÇ u‚ÇÅ' u‚ÇÇ' u‚ÇÉ u‚ÇÑ u

-- Part of this should be moved to `CategoryTheory.Functor.Derived`,
-- and the rest should be an adaptation of
-- `CategoryTheory.Localization.DerivabilityStructure.Derives`

namespace CategoryTheory

open Category

variable
    (C‚ÇÅ : Type u‚ÇÅ) (C‚ÇÇ : Type u‚ÇÇ) (H : Type u)
    [Category.{v‚ÇÅ} C‚ÇÅ] [Category.{v‚ÇÇ} C‚ÇÇ] [Category.{v} H]
    {D‚ÇÅ : Type u‚ÇÅ'} {D‚ÇÇ : Type u‚ÇÇ'}
    [Category.{v‚ÇÅ'} D‚ÇÅ] [Category.{v‚ÇÇ'} D‚ÇÇ]
    {C‚ÇÅ' : Type u‚ÇÉ} {C‚ÇÇ' : Type u‚ÇÑ}
    [Category.{v‚ÇÉ} C‚ÇÅ'] [Category.{v‚ÇÑ} C‚ÇÇ']

abbrev Bifunctor := C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ H

namespace Bifunctor

variable {C‚ÇÅ C‚ÇÇ H}
variable (RF : Bifunctor D‚ÇÅ D‚ÇÇ H) (F : Bifunctor C‚ÇÅ C‚ÇÇ H)

nonrec abbrev uncurry : C‚ÇÅ √ó C‚ÇÇ ‚•§ H := uncurry.obj F

variable {W‚ÇÅ : MorphismProperty C‚ÇÅ} {W‚ÇÇ : MorphismProperty C‚ÇÇ}
  {W‚ÇÅ' : MorphismProperty C‚ÇÅ'} {W‚ÇÇ' : MorphismProperty C‚ÇÇ'}
  (Œ¶‚ÇÅ : LocalizerMorphism W‚ÇÅ' W‚ÇÅ) (Œ¶‚ÇÇ : LocalizerMorphism W‚ÇÇ' W‚ÇÇ)

class PrecompLocalizerMorphismsInverts : Prop where
  isInvertedBy : (W‚ÇÅ'.prod W‚ÇÇ').IsInvertedBy ((Œ¶‚ÇÅ.functor.prod Œ¶‚ÇÇ.functor) ‚ãô F.uncurry)

lemma precompLocalizerMorphismsInverts_iff [W‚ÇÅ'.ContainsIdentities] [W‚ÇÇ'.ContainsIdentities] :
    PrecompLocalizerMorphismsInverts F Œ¶‚ÇÅ Œ¶‚ÇÇ ‚Üî
        (‚àÄ ‚¶ÉX‚ÇÅ Y‚ÇÅ : C‚ÇÅ'‚¶Ñ (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (X‚ÇÇ : C‚ÇÇ') (_ : W‚ÇÅ' f‚ÇÅ),
            IsIso ((F.map (Œ¶‚ÇÅ.functor.map f‚ÇÅ)).app (Œ¶‚ÇÇ.functor.obj X‚ÇÇ))) ‚àß
        (‚àÄ (X‚ÇÅ : C‚ÇÅ') ‚¶ÉX‚ÇÇ Y‚ÇÇ : C‚ÇÇ'‚¶Ñ (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (_ : W‚ÇÇ' f‚ÇÇ),
            IsIso ((F.obj (Œ¶‚ÇÅ.functor.obj X‚ÇÅ)).map (Œ¶‚ÇÇ.functor.map f‚ÇÇ))) := by
  constructor
  ¬∑ intro hF
    constructor
    ¬∑ intro X‚ÇÅ Y‚ÇÅ f‚ÇÅ X‚ÇÇ hf‚ÇÅ
      let œÜ : (‚ü®X‚ÇÅ, X‚ÇÇ‚ü© : C‚ÇÅ' √ó C‚ÇÇ') ‚ü∂ ‚ü®Y‚ÇÅ, X‚ÇÇ‚ü© := ‚ü®f‚ÇÅ, ùüô _‚ü©
      simpa using hF.isInvertedBy œÜ ‚ü®hf‚ÇÅ, W‚ÇÇ'.id_mem _‚ü©
    ¬∑ intro X‚ÇÅ X‚ÇÇ Y‚ÇÇ f‚ÇÇ hf‚ÇÇ
      let œÜ : (‚ü®X‚ÇÅ, X‚ÇÇ‚ü© : C‚ÇÅ' √ó C‚ÇÇ') ‚ü∂ ‚ü®X‚ÇÅ, Y‚ÇÇ‚ü© := ‚ü®ùüô _, f‚ÇÇ‚ü©
      simpa using hF.isInvertedBy œÜ ‚ü®W‚ÇÅ'.id_mem _, hf‚ÇÇ‚ü©
  ¬∑ rintro ‚ü®hF‚ÇÅ, hF‚ÇÇ‚ü©
    refine ‚ü®fun ‚ü®X‚ÇÅ, X‚ÇÇ‚ü© ‚ü®Y‚ÇÅ, Y‚ÇÇ‚ü© ‚ü®f‚ÇÅ, f‚ÇÇ‚ü© ‚ü®hf‚ÇÅ, hf‚ÇÇ‚ü© => ?_‚ü©
    dsimp
    have := hF‚ÇÅ f‚ÇÅ X‚ÇÇ hf‚ÇÅ
    have := hF‚ÇÇ Y‚ÇÅ f‚ÇÇ hf‚ÇÇ
    infer_instance

variable (W‚ÇÅ W‚ÇÇ)

abbrev HasRightDerivedBifunctor := F.uncurry.HasRightDerivedFunctor (W‚ÇÅ.prod W‚ÇÇ)

@[simps!]
def whiskeringLeft‚ÇÇ (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) : (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ H) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ H) :=
  (whiskeringLeft C‚ÇÅ D‚ÇÅ (D‚ÇÇ ‚•§ H)).obj L‚ÇÅ ‚ãô
    (whiskeringRight C‚ÇÅ (D‚ÇÇ ‚•§ H) (C‚ÇÇ ‚•§ H)).obj ((whiskeringLeft C‚ÇÇ D‚ÇÇ H).obj L‚ÇÇ)


section

variable {F RF}

@[simps!]
def toWhiskeringLeft‚ÇÇEval‚ÇÇ {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ}
    (Œ± : F ‚ü∂ (whiskeringLeft‚ÇÇ L‚ÇÅ L‚ÇÇ).obj RF) (X‚ÇÇ : C‚ÇÇ) :
    F ‚ãô (evaluation C‚ÇÇ H).obj X‚ÇÇ ‚ü∂ (whiskeringLeft‚ÇÇ L‚ÇÅ L‚ÇÇ).obj RF ‚ãô (evaluation C‚ÇÇ H).obj X‚ÇÇ :=
  (((whiskeringRight C‚ÇÅ (C‚ÇÇ ‚•§ H) H).obj ((evaluation C‚ÇÇ H).obj X‚ÇÇ)).map Œ±)

end

@[simps]
def whiskeringLeft‚ÇÇEquiv (F : Bifunctor C‚ÇÅ C‚ÇÇ H) (G : (D‚ÇÅ √ó D‚ÇÇ) ‚•§ H)
    (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) :
    (F ‚ü∂ (whiskeringLeft‚ÇÇ L‚ÇÅ L‚ÇÇ).obj (curry.obj G)) ‚âÉ (F.uncurry ‚ü∂ (L‚ÇÅ.prod L‚ÇÇ) ‚ãô G) where
  toFun Œ± :=
    { app := fun ‚ü®X‚ÇÅ, X‚ÇÇ‚ü© => (Œ±.app X‚ÇÅ).app X‚ÇÇ
      naturality := fun ‚ü®X‚ÇÅ, X‚ÇÇ‚ü© ‚ü®Y‚ÇÅ, Y‚ÇÇ‚ü© _ => by
        dsimp
        rw [assoc, NatTrans.naturality, ‚Üê NatTrans.comp_app_assoc, NatTrans.naturality]
        dsimp
        rw [assoc, ‚Üê Functor.map_comp]
        congr 1
        aesop_cat }
  invFun Œ≤ :=
    { app := fun X‚ÇÅ =>
        { app := fun X‚ÇÇ => Œ≤.app ‚ü®X‚ÇÅ, X‚ÇÇ‚ü©
          naturality := fun X‚ÇÇ Y‚ÇÇ f‚ÇÇ => by
            simpa using Œ≤.naturality (show ‚ü®X‚ÇÅ, X‚ÇÇ‚ü© ‚ü∂ ‚ü®X‚ÇÅ, Y‚ÇÇ‚ü© from ‚ü®ùüô _, f‚ÇÇ‚ü©) }
      naturality := fun X‚ÇÅ Y‚ÇÅ f‚ÇÅ => by
        ext X‚ÇÇ
        simpa using Œ≤.naturality (show ‚ü®X‚ÇÅ, X‚ÇÇ‚ü© ‚ü∂ ‚ü®Y‚ÇÅ, X‚ÇÇ‚ü© from ‚ü®f‚ÇÅ, ùüô _‚ü©) }
  left_inv _ := rfl
  right_inv _ := rfl

/-- whiskeringLeft‚ÇÇEquiv' -/
@[simps!]
def whiskeringLeft‚ÇÇEquiv' (F : Bifunctor C‚ÇÅ C‚ÇÇ H) (G : Bifunctor D‚ÇÅ D‚ÇÇ H)
    (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) :
    (F ‚ü∂ (whiskeringLeft‚ÇÇ L‚ÇÅ L‚ÇÇ).obj G) ‚âÉ (F.uncurry ‚ü∂ (L‚ÇÅ.prod L‚ÇÇ) ‚ãô G.uncurry) :=
  Equiv.trans
    { toFun := fun Œ± => Œ± ‚â´ (whiskeringLeft‚ÇÇ L‚ÇÅ L‚ÇÇ).map (Functor.curryObjUncurryObjIso G).inv
      invFun := fun Œ≤ => Œ≤ ‚â´ (whiskeringLeft‚ÇÇ L‚ÇÅ L‚ÇÇ).map (Functor.curryObjUncurryObjIso G).hom
      left_inv := fun Œ± => by
        dsimp only
        rw [assoc, ‚Üê Functor.map_comp, Iso.inv_hom_id, Functor.map_id, comp_id]
      right_inv := fun Œ≤ => by
        dsimp only
        rw [assoc, ‚Üê Functor.map_comp, Iso.hom_inv_id, Functor.map_id, comp_id] }
    (whiskeringLeft‚ÇÇEquiv F G.uncurry L‚ÇÅ L‚ÇÇ)

variable {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} [L‚ÇÅ.IsLocalization W‚ÇÅ] [L‚ÇÇ.IsLocalization W‚ÇÇ]

variable {F}

abbrev IsRightDerivedBifunctor [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities]
    (Œ± : F ‚ü∂ (whiskeringLeft‚ÇÇ L‚ÇÅ L‚ÇÇ).obj RF) :=
  RF.uncurry.IsRightDerivedFunctor (whiskeringLeft‚ÇÇEquiv' _ _ _ _ Œ±) (W‚ÇÅ.prod W‚ÇÇ)

section

variable [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities] (Œ± : F ‚ü∂ (whiskeringLeft‚ÇÇ L‚ÇÅ L‚ÇÇ).obj RF)
    [Bifunctor.IsRightDerivedBifunctor RF W‚ÇÅ W‚ÇÇ Œ±]

section

variable [Œ¶‚ÇÅ.IsRightDerivabilityStructure] [Œ¶‚ÇÇ.IsRightDerivabilityStructure]
variable {W‚ÇÅ W‚ÇÇ}

lemma isIso_app_app_of_isRightDerivedBifunctor
    [W‚ÇÅ'.ContainsIdentities] [W‚ÇÇ'.ContainsIdentities]
    [hF : PrecompLocalizerMorphismsInverts F Œ¶‚ÇÅ Œ¶‚ÇÇ] (X‚ÇÅ' : C‚ÇÅ') (X‚ÇÇ' : C‚ÇÇ') :
    IsIso ((Œ±.app (Œ¶‚ÇÅ.functor.obj X‚ÇÅ')).app (Œ¶‚ÇÇ.functor.obj X‚ÇÇ')) := by
  convert (Œ¶‚ÇÅ.prod Œ¶‚ÇÇ).isIso_app_of_isRightDerivedFunctor F.uncurry hF.isInvertedBy
    (L‚ÇÅ.prod L‚ÇÇ) RF.uncurry (whiskeringLeft‚ÇÇEquiv' _ _ _ _ Œ±) ‚ü®X‚ÇÅ', X‚ÇÇ'‚ü©
  simp [LocalizerMorphism.prod]

end

section

variable (X‚ÇÅ : C‚ÇÅ) (F‚ÇÇ : D‚ÇÇ ‚•§ H) (Œ±‚ÇÅ : F.obj X‚ÇÅ ‚ü∂ L‚ÇÇ ‚ãô F‚ÇÇ) [F‚ÇÇ.IsRightDerivedFunctor Œ±‚ÇÅ W‚ÇÇ]

noncomputable def rightDerivedNatTrans‚ÇÅ : F‚ÇÇ ‚ü∂ RF.obj (L‚ÇÅ.obj X‚ÇÅ) :=
  Functor.rightDerivedDesc F‚ÇÇ Œ±‚ÇÅ W‚ÇÇ _ (Œ±.app X‚ÇÅ)

omit [W‚ÇÇ.ContainsIdentities] in
lemma rightDerivedNatTrans‚ÇÅ_fac_app (X‚ÇÇ : C‚ÇÇ) :
    Œ±‚ÇÅ.app X‚ÇÇ ‚â´ (rightDerivedNatTrans‚ÇÅ RF W‚ÇÇ Œ± X‚ÇÅ F‚ÇÇ Œ±‚ÇÅ).app (L‚ÇÇ.obj X‚ÇÇ) =
      (Œ±.app X‚ÇÅ).app X‚ÇÇ := by
  apply Functor.rightDerived_fac_app

end

section

variable (X‚ÇÇ : C‚ÇÇ) (F‚ÇÅ : D‚ÇÅ ‚•§ H) (Œ±‚ÇÇ : F.flip.obj X‚ÇÇ ‚ü∂ L‚ÇÅ ‚ãô F‚ÇÅ) [F‚ÇÅ.IsRightDerivedFunctor Œ±‚ÇÇ W‚ÇÅ]

noncomputable def rightDerivedNatTrans‚ÇÇ : F‚ÇÅ ‚ü∂ RF.flip.obj (L‚ÇÇ.obj X‚ÇÇ) :=
  Functor.rightDerivedDesc F‚ÇÅ Œ±‚ÇÇ W‚ÇÅ _
    (toWhiskeringLeft‚ÇÇEval‚ÇÇ Œ± X‚ÇÇ)

omit [W‚ÇÅ.ContainsIdentities] in
lemma rightDerivedNatTrans‚ÇÇ_fac_app (X‚ÇÅ : C‚ÇÅ) :
  Œ±‚ÇÇ.app X‚ÇÅ ‚â´ (rightDerivedNatTrans‚ÇÇ RF W‚ÇÅ Œ± X‚ÇÇ F‚ÇÅ Œ±‚ÇÇ).app (L‚ÇÅ.obj X‚ÇÅ) =
    (Œ±.app X‚ÇÅ).app X‚ÇÇ := by
  apply Functor.rightDerived_fac_app

end

end

section

variable (F L‚ÇÅ L‚ÇÇ)
variable [HasRightDerivedBifunctor F W‚ÇÅ W‚ÇÇ] [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities]

noncomputable def rightDerivedBifunctor : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ H :=
    curry.obj (F.uncurry.totalRightDerived (L‚ÇÅ.prod L‚ÇÇ) (W‚ÇÅ.prod W‚ÇÇ))

noncomputable def rightDerivedUnit :
    F ‚ü∂ (whiskeringLeft‚ÇÇ L‚ÇÅ L‚ÇÇ).obj (Bifunctor.rightDerivedBifunctor F W‚ÇÅ W‚ÇÇ L‚ÇÅ L‚ÇÇ) :=
  (whiskeringLeft‚ÇÇEquiv _ _ _ _).symm
    (F.uncurry.totalRightDerivedUnit (L‚ÇÅ.prod L‚ÇÇ) (W‚ÇÅ.prod W‚ÇÇ))

end

variable {W‚ÇÅ W‚ÇÇ} (F)
section

variable
  [hF : PrecompLocalizerMorphismsInverts F Œ¶‚ÇÅ Œ¶‚ÇÇ]

include hF in
lemma hasRightDerivedBifunctor_of_precompLocalizerMorphismsInverts
    [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities]
    [W‚ÇÅ'.ContainsIdentities] [W‚ÇÇ'.ContainsIdentities]
    [Œ¶‚ÇÅ.IsRightDerivabilityStructure] [Œ¶‚ÇÇ.IsRightDerivabilityStructure] :
    HasRightDerivedBifunctor F W‚ÇÅ W‚ÇÇ :=
  (Œ¶‚ÇÅ.prod Œ¶‚ÇÇ).hasRightDerivedFunctor F.uncurry hF.isInvertedBy

lemma isInverted‚ÇÅ_of_precompLocalizerMorphismsInverts (X‚ÇÅ : C‚ÇÅ') [W‚ÇÅ'.ContainsIdentities] :
    W‚ÇÇ'.IsInvertedBy (Œ¶‚ÇÇ.functor ‚ãô F.obj (Œ¶‚ÇÅ.functor.obj X‚ÇÅ)) := by
  intro X‚ÇÇ Y‚ÇÇ f‚ÇÇ hf‚ÇÇ
  let œÜ : (‚ü®X‚ÇÅ, X‚ÇÇ‚ü© : C‚ÇÅ' √ó C‚ÇÇ') ‚ü∂ ‚ü®X‚ÇÅ, Y‚ÇÇ‚ü© := ‚ü®ùüô _, f‚ÇÇ‚ü©
  simpa using hF.isInvertedBy œÜ ‚ü®W‚ÇÅ'.id_mem _, hf‚ÇÇ‚ü©

lemma hasRightDerivedFunctor‚ÇÅ_of_precompLocalizerMorphismsInverts
    [W‚ÇÅ'.ContainsIdentities]
    [Œ¶‚ÇÇ.IsRightDerivabilityStructure] (X‚ÇÅ : C‚ÇÅ') :
    (F.obj (Œ¶‚ÇÅ.functor.obj X‚ÇÅ)).HasRightDerivedFunctor W‚ÇÇ :=
  Œ¶‚ÇÇ.hasRightDerivedFunctor _ (isInverted‚ÇÅ_of_precompLocalizerMorphismsInverts F Œ¶‚ÇÅ Œ¶‚ÇÇ X‚ÇÅ)

lemma isInverted‚ÇÇ_of_precompLocalizerMorphismsInverts [W‚ÇÇ'.ContainsIdentities] (X‚ÇÇ : C‚ÇÇ') :
    W‚ÇÅ'.IsInvertedBy (Œ¶‚ÇÅ.functor ‚ãô F.flip.obj (Œ¶‚ÇÇ.functor.obj X‚ÇÇ)) := by
  intro X‚ÇÅ Y‚ÇÅ f‚ÇÅ hf‚ÇÅ
  let œÜ : (‚ü®X‚ÇÅ, X‚ÇÇ‚ü© : C‚ÇÅ' √ó C‚ÇÇ') ‚ü∂ ‚ü®Y‚ÇÅ, X‚ÇÇ‚ü© := ‚ü®f‚ÇÅ, ùüô _‚ü©
  simpa using hF.isInvertedBy œÜ ‚ü®hf‚ÇÅ, W‚ÇÇ'.id_mem _‚ü©

lemma hasRightDerivedFunctor‚ÇÇ_of_precompLocalizerMorphismsInverts
    [W‚ÇÇ'.ContainsIdentities] [Œ¶‚ÇÅ.IsRightDerivabilityStructure] (X‚ÇÇ : C‚ÇÇ') :
    (F.flip.obj (Œ¶‚ÇÇ.functor.obj X‚ÇÇ)).HasRightDerivedFunctor W‚ÇÅ :=
  Œ¶‚ÇÅ.hasRightDerivedFunctor _ (isInverted‚ÇÇ_of_precompLocalizerMorphismsInverts F Œ¶‚ÇÅ Œ¶‚ÇÇ X‚ÇÇ)

variable (Œ± : F ‚ü∂ (whiskeringLeft‚ÇÇ L‚ÇÅ L‚ÇÇ).obj RF) [W‚ÇÅ.ContainsIdentities]
  [W‚ÇÇ.ContainsIdentities] [IsRightDerivedBifunctor RF W‚ÇÅ W‚ÇÇ Œ±]

section

variable (X‚ÇÅ : C‚ÇÅ') (F‚ÇÇ : D‚ÇÇ ‚•§ H)
  (Œ±‚ÇÅ : F.obj (Œ¶‚ÇÅ.functor.obj X‚ÇÅ) ‚ü∂ L‚ÇÇ ‚ãô F‚ÇÇ) [F‚ÇÇ.IsRightDerivedFunctor Œ±‚ÇÅ W‚ÇÇ]

lemma isIso_rightDerivedNatTrans‚ÇÅ [Œ¶‚ÇÇ.IsRightDerivabilityStructure]
    [Œ¶‚ÇÅ.IsRightDerivabilityStructure] [W‚ÇÅ'.ContainsIdentities] [W‚ÇÇ'.ContainsIdentities] :
    IsIso (rightDerivedNatTrans‚ÇÅ RF W‚ÇÇ Œ± (Œ¶‚ÇÅ.functor.obj X‚ÇÅ) F‚ÇÇ Œ±‚ÇÅ) := by
  rw [Œ¶‚ÇÇ.isIso_iff_of_hasRightResolutions L‚ÇÇ]
  intro X‚ÇÇ
  have := Œ¶‚ÇÇ.isIso_app_of_isRightDerivedFunctor _
    (isInverted‚ÇÅ_of_precompLocalizerMorphismsInverts F Œ¶‚ÇÅ Œ¶‚ÇÇ X‚ÇÅ) L‚ÇÇ F‚ÇÇ Œ±‚ÇÅ X‚ÇÇ
  have := isIso_app_app_of_isRightDerivedBifunctor RF Œ¶‚ÇÅ Œ¶‚ÇÇ Œ± X‚ÇÅ X‚ÇÇ
  exact IsIso.of_isIso_fac_left (rightDerivedNatTrans‚ÇÅ_fac_app RF W‚ÇÇ Œ± (Œ¶‚ÇÅ.functor.obj X‚ÇÅ)
    F‚ÇÇ Œ±‚ÇÅ (Œ¶‚ÇÇ.functor.obj X‚ÇÇ))

include Œ¶‚ÇÇ in
lemma isRightDerivedFunctor‚ÇÅ_of_isRightDerivedBifunctor [W‚ÇÅ'.ContainsIdentities]
    [W‚ÇÇ'.ContainsIdentities]
    [Œ¶‚ÇÅ.IsRightDerivabilityStructure]
    [Œ¶‚ÇÇ.IsRightDerivabilityStructure] :
    (RF.obj (L‚ÇÅ.obj (Œ¶‚ÇÅ.functor.obj X‚ÇÅ))).IsRightDerivedFunctor
      (Œ±.app (Œ¶‚ÇÅ.functor.obj X‚ÇÅ)) W‚ÇÇ := by
  have := hasRightDerivedFunctor‚ÇÅ_of_precompLocalizerMorphismsInverts F Œ¶‚ÇÅ Œ¶‚ÇÇ X‚ÇÅ
  let RF‚ÇÇ := (F.obj (Œ¶‚ÇÅ.functor.obj X‚ÇÅ)).totalRightDerived L‚ÇÇ W‚ÇÇ
  let Œ±‚ÇÅ := (F.obj (Œ¶‚ÇÅ.functor.obj X‚ÇÅ)).totalRightDerivedUnit L‚ÇÇ W‚ÇÇ
  rw [Functor.isRightDerivedFunctor_iff_isIso_rightDerivedDesc RF‚ÇÇ Œ±‚ÇÅ W‚ÇÇ
    (RF.obj (L‚ÇÅ.obj (Œ¶‚ÇÅ.functor.obj X‚ÇÅ)))
    (Œ±.app (Œ¶‚ÇÅ.functor.obj X‚ÇÅ))]
  exact isIso_rightDerivedNatTrans‚ÇÅ RF F Œ¶‚ÇÅ Œ¶‚ÇÇ Œ± X‚ÇÅ RF‚ÇÇ Œ±‚ÇÅ

end

section

variable (X‚ÇÇ : C‚ÇÇ') (F‚ÇÅ : D‚ÇÅ ‚•§ H) (Œ±‚ÇÇ : F.flip.obj (Œ¶‚ÇÇ.functor.obj X‚ÇÇ) ‚ü∂ L‚ÇÅ ‚ãô F‚ÇÅ)
    [F‚ÇÅ.IsRightDerivedFunctor Œ±‚ÇÇ W‚ÇÅ]

include Œ¶‚ÇÅ in
lemma isIso_rightDerivedNatTrans‚ÇÇ [Œ¶‚ÇÅ.IsRightDerivabilityStructure]
    [Œ¶‚ÇÇ.IsRightDerivabilityStructure] [W‚ÇÅ'.ContainsIdentities] [W‚ÇÇ'.ContainsIdentities] :
    IsIso (rightDerivedNatTrans‚ÇÇ RF W‚ÇÅ Œ± (Œ¶‚ÇÇ.functor.obj X‚ÇÇ) F‚ÇÅ Œ±‚ÇÇ) := by
  rw [Œ¶‚ÇÅ.isIso_iff_of_hasRightResolutions L‚ÇÅ]
  intro X‚ÇÅ
  have := Œ¶‚ÇÅ.isIso_app_of_isRightDerivedFunctor _
    (isInverted‚ÇÇ_of_precompLocalizerMorphismsInverts F Œ¶‚ÇÅ Œ¶‚ÇÇ X‚ÇÇ) L‚ÇÅ F‚ÇÅ Œ±‚ÇÇ X‚ÇÅ
  have := isIso_app_app_of_isRightDerivedBifunctor RF Œ¶‚ÇÅ Œ¶‚ÇÇ Œ± X‚ÇÅ X‚ÇÇ
  exact IsIso.of_isIso_fac_left (rightDerivedNatTrans‚ÇÇ_fac_app RF W‚ÇÅ Œ± (Œ¶‚ÇÇ.functor.obj X‚ÇÇ)
    F‚ÇÅ Œ±‚ÇÇ (Œ¶‚ÇÅ.functor.obj X‚ÇÅ))

lemma isRightDerivedFunctor‚ÇÇ_of_isRightDerivedBifunctor [Œ¶‚ÇÅ.IsRightDerivabilityStructure]
    [Œ¶‚ÇÇ.IsRightDerivabilityStructure] [W‚ÇÅ'.ContainsIdentities] [W‚ÇÇ'.ContainsIdentities] :
    (RF.flip.obj (L‚ÇÇ.obj (Œ¶‚ÇÇ.functor.obj X‚ÇÇ))).IsRightDerivedFunctor
      (toWhiskeringLeft‚ÇÇEval‚ÇÇ Œ± (Œ¶‚ÇÇ.functor.obj X‚ÇÇ)) W‚ÇÅ := by
  have := hasRightDerivedFunctor‚ÇÇ_of_precompLocalizerMorphismsInverts F Œ¶‚ÇÅ Œ¶‚ÇÇ X‚ÇÇ
  let RF‚ÇÅ := (F.flip.obj (Œ¶‚ÇÇ.functor.obj X‚ÇÇ)).totalRightDerived L‚ÇÅ W‚ÇÅ
  let Œ±‚ÇÇ := (F.flip.obj (Œ¶‚ÇÇ.functor.obj X‚ÇÇ)).totalRightDerivedUnit L‚ÇÅ W‚ÇÅ
  rw [Functor.isRightDerivedFunctor_iff_isIso_rightDerivedDesc RF‚ÇÅ Œ±‚ÇÇ W‚ÇÅ
    (RF.flip.obj (L‚ÇÇ.obj (Œ¶‚ÇÇ.functor.obj X‚ÇÇ)))
    (toWhiskeringLeft‚ÇÇEval‚ÇÇ Œ± (Œ¶‚ÇÇ.functor.obj X‚ÇÇ))]
  exact isIso_rightDerivedNatTrans‚ÇÇ RF F Œ¶‚ÇÅ Œ¶‚ÇÇ Œ± X‚ÇÇ RF‚ÇÅ Œ±‚ÇÇ

end

end

end Bifunctor

end CategoryTheory
