/-
Copyright (c) 2025 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson
-/
import Mathlib.CategoryTheory.Localization.Monoidal.Basic
import Mathlib.CategoryTheory.Monoidal.Braided.Multifunctor

/-!

# Localization of symmetric monoidal categories

Let `C` be a monoidal category equipped with a class of morphisms `W` which
is compatible with the monoidal category structure. The file
`Mathlib.CategoryTheory.Localization.Monoidal.Basic` constructs a monoidal structure on
the localized on `D` such that the localization functor is monoidal.

In this file we promote this monoidal structure to a braided structure in the case where `C` is
braided, in such a way that the localization functor is braided. If `C` is symmetric monoidal, then
the monoidal structure on `D` is also symmetric.
-/

open CategoryTheory Category MonoidalCategory BraidedCategory Functor

namespace CategoryTheory.Localization.Monoidal

variable {C D : Type*} [Category C] [Category D] (L : C ‚•§ D) (W : MorphismProperty C)
  [MonoidalCategory C] [W.IsMonoidal] [L.IsLocalization W]
  {unit : D} (Œµ : L.obj (ùüô_ C) ‚âÖ unit)

local notation "L'" => toMonoidalCategory L W Œµ

instance : (L').IsLocalization W := inferInstanceAs (L.IsLocalization W)

section Braided

variable [BraidedCategory C]

noncomputable instance : Lifting‚ÇÇ L' L' W W ((curriedTensor C).flip ‚ãô (whiskeringRight C C
    (LocalizedMonoidal L W Œµ)).obj L') (tensorBifunctor L W Œµ).flip :=
  inferInstanceAs (Lifting‚ÇÇ L' L' W W (((curriedTensor C) ‚ãô (whiskeringRight C C
    (LocalizedMonoidal L W Œµ)).obj L')).flip (tensorBifunctor L W Œµ).flip )

/-- The braiding on the localized category as a natural isomorphism of bifunctors. -/
noncomputable def braidingNatIso : tensorBifunctor L W Œµ ‚âÖ (tensorBifunctor L W Œµ).flip :=
  lift‚ÇÇNatIso L' L' W W
    ((curriedTensor C) ‚ãô (whiskeringRight C C
      (LocalizedMonoidal L W Œµ)).obj L')
    (((curriedTensor C).flip ‚ãô (whiskeringRight C C
      (LocalizedMonoidal L W Œµ)).obj L'))
    _ _  (isoWhiskerRight (curriedBraidingNatIso C) _)

lemma braidingNatIso_hom_app (X Y : C) :
    ((braidingNatIso L W Œµ).hom.app ((L').obj X)).app ((L').obj Y) =
      (Functor.LaxMonoidal.Œº (L') X Y) ‚â´
        (L').map (Œ≤_ X Y).hom ‚â´
          (Functor.OplaxMonoidal.Œ¥ (L') Y X) := by
  simp [braidingNatIso, lift‚ÇÇNatIso]
  rfl

@[reassoc]
lemma braidingNatIso_hom_app_naturality_Œº_left (X Y Z : C) :
    ((braidingNatIso L W Œµ).hom.app ((L').obj X)).app ((L').obj Y ‚äó (L').obj Z) ‚â´
      (Functor.LaxMonoidal.Œº (L') Y Z) ‚ñ∑ (L').obj X =
        (L').obj X ‚óÅ (Functor.LaxMonoidal.Œº (L') Y Z) ‚â´
          ((braidingNatIso L W Œµ).hom.app ((L').obj X)).app ((L').obj (Y ‚äó Z)) :=
  (((braidingNatIso L W Œµ).hom.app ((L').obj X)).naturality ((Functor.LaxMonoidal.Œº (L') Y Z))).symm

@[reassoc]
lemma braidingNatIso_hom_app_naturality_Œº_right (X Y Z : C) :
    ((braidingNatIso L W Œµ).hom.app ((L').obj X ‚äó (L').obj Y)).app ((L').obj Z) ‚â´
      (L').obj Z ‚óÅ (Functor.LaxMonoidal.Œº (L') X Y) =
        (Functor.LaxMonoidal.Œº (L') X Y) ‚ñ∑ (L').obj Z ‚â´
          ((braidingNatIso L W Œµ).hom.app ((L').obj (X ‚äó Y))).app ((L').obj Z) :=
  (NatTrans.congr_app ((braidingNatIso L W Œµ).hom.naturality
    ((Functor.LaxMonoidal.Œº (L') X Y))) ((L').obj Z)).symm

@[reassoc]
lemma map_hexagon_forward (X Y Z : C) :
    (Œ±_ ((L').obj X) ((L').obj Y) ((L').obj Z)).hom ‚â´
      (((braidingNatIso L W Œµ).app ((L').obj X)).app (((L').obj Y) ‚äó ((L').obj Z))).hom ‚â´
        (Œ±_ ((L').obj Y) ((L').obj Z) ((L').obj X)).hom =
      (((braidingNatIso L W Œµ).app ((L').obj X)).app ((L').obj Y)).hom ‚ñ∑ ((L').obj Z) ‚â´
        (Œ±_ ((L').obj Y) ((L').obj X) ((L').obj Z)).hom ‚â´
        ((L').obj Y) ‚óÅ (((braidingNatIso L W Œµ).app ((L').obj X)).app ((L').obj Z)).hom := by
  simp only [associator_hom, Iso.app_hom, braidingNatIso_hom_app]
  slice_rhs 0 4 =>
    simp only [Functor.flip_obj_obj, Functor.CoreMonoidal.toMonoidal_toLaxMonoidal,
      Functor.CoreMonoidal.toMonoidal_toOplaxMonoidal, comp_whiskerRight, assoc,
      Functor.Monoidal.whiskerRight_Œ¥_Œº_assoc, Functor.LaxMonoidal.Œº_natural_left]
  slice_lhs 6 7 =>
    rw [braidingNatIso_hom_app_naturality_Œº_left, braidingNatIso_hom_app]
  simp

@[reassoc]
lemma map_hexagon_reverse (X Y Z : C) :
    (Œ±_ ((L').obj X) ((L').obj Y) ((L').obj Z)).inv ‚â´
      (((braidingNatIso L W Œµ).app ((L').obj X ‚äó (L').obj Y)).app ((L').obj Z)).hom ‚â´
        (Œ±_ ((L').obj Z) ((L').obj X) ((L').obj Y)).inv =
      ((L').obj X) ‚óÅ (((braidingNatIso L W Œµ).app ((L').obj Y)).app ((L').obj Z)).hom ‚â´
        (Œ±_ ((L').obj X) ((L').obj Z) ((L').obj Y)).inv ‚â´
        (((braidingNatIso L W Œµ).app ((L').obj X)).app ((L').obj Z)).hom ‚ñ∑ ((L').obj Y) := by
  simp only [associator_inv, Iso.app_hom, braidingNatIso_hom_app]
  slice_rhs 0 4 =>
    simp only [Functor.flip_obj_obj, Functor.CoreMonoidal.toMonoidal_toLaxMonoidal,
      Functor.CoreMonoidal.toMonoidal_toOplaxMonoidal, MonoidalCategory.whiskerLeft_comp, assoc,
      Functor.Monoidal.whiskerLeft_Œ¥_Œº, comp_id]
  slice_lhs 6 7 =>
    rw [braidingNatIso_hom_app_naturality_Œº_right, braidingNatIso_hom_app]
  simp

noncomputable instance : BraidedCategory (LocalizedMonoidal L W Œµ) := by
  refine .ofBifunctor (braidingNatIso L W Œµ) ?_ ?_
  ¬∑ apply natTrans‚ÇÉ_ext (L') (L') (L') W W W
    simpa using map_hexagon_forward _ _ _
  ¬∑ apply natTrans‚ÇÉ_ext (L') (L') (L') W W W
    simpa using map_hexagon_reverse _ _ _

lemma Œ≤_hom_app (X Y : C) :
    (Œ≤_ ((L').obj X) ((L').obj Y)).hom =
      (Functor.LaxMonoidal.Œº (L') X Y) ‚â´
        (L').map (Œ≤_ X Y).hom ‚â´
          (Functor.OplaxMonoidal.Œ¥ (L') Y X) :=
  braidingNatIso_hom_app L W Œµ X Y

noncomputable instance : (toMonoidalCategory L W Œµ).Braided where
  braided X Y := by simp [Œ≤_hom_app]

end Braided

section Symmetric

variable [SymmetricCategory C]

noncomputable instance : SymmetricCategory (LocalizedMonoidal L W Œµ) := by
  refine .ofCurried (natTrans‚ÇÇ_ext (L') (L') W W fun X Y ‚Ü¶ ?_)
  simp [-Functor.map_braiding, Œ≤_hom_app, ‚Üê Functor.map_comp_assoc]

end Symmetric

end CategoryTheory.Localization.Monoidal
