/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.CategoryTheory.Localization.LocalizerMorphism
import Mathlib.CategoryTheory.Conj

/-!
# Bijections between morphisms in two localized categories

Given two localization functors `L‚ÇÅ : C ‚•§ D‚ÇÅ` and `L‚ÇÇ : C ‚•§ D‚ÇÇ` for the same
class of morphisms `W : MorphismProperty C`, we define a bijection
`Localization.homEquiv W L‚ÇÅ L‚ÇÇ : (L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) ‚âÉ (L‚ÇÇ.obj X ‚ü∂ L‚ÇÇ.obj Y)`
between the types of morphisms in the two localized categories.

More generally, given a localizer morphism `Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ`, we define a map
`Œ¶.homMap L‚ÇÅ L‚ÇÇ : (L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) ‚ü∂ (L‚ÇÇ.obj (Œ¶.functor.obj X) ‚ü∂ L‚ÇÇ.obj (Œ¶.functor.obj Y))`.
The definition `Localization.homEquiv` is obtained by applying the construction
to the identity localizer morphism.

-/

namespace CategoryTheory

open Category

variable {C C‚ÇÅ C‚ÇÇ C‚ÇÉ D‚ÇÅ D‚ÇÇ D‚ÇÉ : Type*} [Category C]
  [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ]
  [Category D‚ÇÅ] [Category D‚ÇÇ] [Category D‚ÇÉ]

namespace LocalizerMorphism

variable {W‚ÇÅ : MorphismProperty C‚ÇÅ} {W‚ÇÇ : MorphismProperty C‚ÇÇ} {W‚ÇÉ : MorphismProperty C‚ÇÉ}
  (Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ) (Œ® : LocalizerMorphism W‚ÇÇ W‚ÇÉ)
  (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) [L‚ÇÅ.IsLocalization W‚ÇÅ]
  (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) [L‚ÇÇ.IsLocalization W‚ÇÇ]
  (L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ) [L‚ÇÉ.IsLocalization W‚ÇÉ]
  {X Y Z : C‚ÇÅ}

/-- If `Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ` is a morphism of localizers, `L‚ÇÅ` and `L‚ÇÇ`
are localization functors for `W‚ÇÅ` and `W‚ÇÇ`, then this is the induced map
`(L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) ‚ü∂ (L‚ÇÇ.obj (Œ¶.functor.obj X) ‚ü∂ L‚ÇÇ.obj (Œ¶.functor.obj Y))`
for all objects `X` and `Y`. -/
noncomputable def homMap (f : L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) :
    L‚ÇÇ.obj (Œ¶.functor.obj X) ‚ü∂ L‚ÇÇ.obj (Œ¶.functor.obj Y) :=
  Iso.homCongr ((CatCommSq.iso _ _ _ _).symm.app _) ((CatCommSq.iso _ _ _ _).symm.app _)
    ((Œ¶.localizedFunctor L‚ÇÅ L‚ÇÇ).map f)

@[simp]
lemma homMap_map (f : X ‚ü∂ Y) :
    Œ¶.homMap L‚ÇÅ L‚ÇÇ (L‚ÇÅ.map f) = L‚ÇÇ.map (Œ¶.functor.map f) := by
  dsimp [homMap]
  erw [‚Üê NatTrans.naturality_assoc]
  simp

variable (X) in
@[simp]
lemma homMap_id  :
    Œ¶.homMap L‚ÇÅ L‚ÇÇ (ùüô (L‚ÇÅ.obj X)) = ùüô (L‚ÇÇ.obj (Œ¶.functor.obj X)) := by
  simpa using Œ¶.homMap_map L‚ÇÅ L‚ÇÇ (ùüô X)

@[reassoc]
lemma homMap_comp (f : L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) (g : L‚ÇÅ.obj Y ‚ü∂ L‚ÇÅ.obj Z) :
    Œ¶.homMap L‚ÇÅ L‚ÇÇ (f ‚â´ g) = Œ¶.homMap L‚ÇÅ L‚ÇÇ f ‚â´ Œ¶.homMap L‚ÇÅ L‚ÇÇ g := by
  simp [homMap]

@[reassoc]
lemma homMap_apply (G : D‚ÇÅ ‚•§ D‚ÇÇ) (e : Œ¶.functor ‚ãô L‚ÇÇ ‚âÖ L‚ÇÅ ‚ãô G) (f : L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) :
    Œ¶.homMap L‚ÇÅ L‚ÇÇ f = e.hom.app X ‚â´ G.map f ‚â´ e.inv.app Y := by
  let G' := Œ¶.localizedFunctor L‚ÇÅ L‚ÇÇ
  let e' := CatCommSq.iso Œ¶.functor L‚ÇÅ L‚ÇÇ G'
  change e'.hom.app X ‚â´ G'.map f ‚â´ e'.inv.app Y = _
  letI : Localization.Lifting L‚ÇÅ W‚ÇÅ (Œ¶.functor ‚ãô L‚ÇÇ) G := ‚ü®e.symm‚ü©
  let Œ± : G' ‚âÖ G := Localization.liftNatIso L‚ÇÅ W‚ÇÅ (L‚ÇÅ ‚ãô G') (Œ¶.functor ‚ãô L‚ÇÇ) _ _ e'.symm
  have : e = e' ‚â™‚â´ isoWhiskerLeft _ Œ± := by
    ext X
    dsimp [Œ±]
    rw [Localization.liftNatTrans_app]
    erw [id_comp]
    rw [Iso.hom_inv_id_app_assoc]
    rfl
  simp [this]

@[simp]
lemma id_homMap (f : L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) :
    (id W‚ÇÅ).homMap L‚ÇÅ L‚ÇÅ f = f := by
  simpa using (id W‚ÇÅ).homMap_apply L‚ÇÅ L‚ÇÅ (ùü≠ D‚ÇÅ) (Iso.refl _) f

@[simp]
lemma homMap_homMap (f : L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) :
    Œ®.homMap L‚ÇÇ L‚ÇÉ (Œ¶.homMap L‚ÇÅ L‚ÇÇ f) = (Œ¶.comp Œ®).homMap L‚ÇÅ L‚ÇÉ f := by
  let G := Œ¶.localizedFunctor L‚ÇÅ L‚ÇÇ
  let G' := Œ®.localizedFunctor L‚ÇÇ L‚ÇÉ
  let e : Œ¶.functor ‚ãô L‚ÇÇ ‚âÖ L‚ÇÅ ‚ãô G := CatCommSq.iso _ _ _ _
  let e' : Œ®.functor ‚ãô L‚ÇÉ ‚âÖ L‚ÇÇ ‚ãô G' := CatCommSq.iso _ _ _ _
  rw [Œ¶.homMap_apply L‚ÇÅ L‚ÇÇ G e, Œ®.homMap_apply L‚ÇÇ L‚ÇÉ G' e',
    (Œ¶.comp Œ®).homMap_apply L‚ÇÅ L‚ÇÉ (G ‚ãô G')
      (Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ e' ‚â™‚â´
      (Functor.associator _ _ _).symm ‚â™‚â´ isoWhiskerRight e _ ‚â™‚â´
      Functor.associator _ _ _)]
  dsimp
  simp only [Functor.map_comp, assoc, comp_id, id_comp]

end LocalizerMorphism

namespace Localization

variable (W : MorphismProperty C) (L‚ÇÅ : C ‚•§ D‚ÇÅ) [L‚ÇÅ.IsLocalization W]
  (L‚ÇÇ : C ‚•§ D‚ÇÇ) [L‚ÇÇ.IsLocalization W] (L‚ÇÉ : C ‚•§ D‚ÇÉ) [L‚ÇÉ.IsLocalization W]
  {X Y Z : C}

/-- Bijection between types of morphisms in two localized categories
for the same class of morphisms `W`. -/
@[simps (config := .lemmasOnly) apply]
noncomputable def homEquiv :
    (L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) ‚âÉ (L‚ÇÇ.obj X ‚ü∂ L‚ÇÇ.obj Y) where
  toFun := (LocalizerMorphism.id W).homMap L‚ÇÅ L‚ÇÇ
  invFun := (LocalizerMorphism.id W).homMap L‚ÇÇ L‚ÇÅ
  left_inv f := by
    rw [LocalizerMorphism.homMap_homMap]
    apply LocalizerMorphism.id_homMap
  right_inv g := by
    rw [LocalizerMorphism.homMap_homMap]
    apply LocalizerMorphism.id_homMap

@[simp]
lemma homEquiv_symm_apply (g : L‚ÇÇ.obj X ‚ü∂ L‚ÇÇ.obj Y) :
    (homEquiv W L‚ÇÅ L‚ÇÇ).symm g = homEquiv W L‚ÇÇ L‚ÇÅ g := rfl

lemma homEquiv_eq (G : D‚ÇÅ ‚•§ D‚ÇÇ) (e : L‚ÇÅ ‚ãô G ‚âÖ L‚ÇÇ) (f : L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) :
    homEquiv W L‚ÇÅ L‚ÇÇ f = e.inv.app X ‚â´ G.map f ‚â´ e.hom.app Y := by
  rw [homEquiv_apply, LocalizerMorphism.homMap_apply (LocalizerMorphism.id W) L‚ÇÅ L‚ÇÇ G e.symm,
    Iso.symm_hom, Iso.symm_inv]

@[simp]
lemma homEquiv_refl (f : L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) :
    homEquiv W L‚ÇÅ L‚ÇÅ f = f := by
  apply LocalizerMorphism.id_homMap

lemma homEquiv_trans (f : L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) :
    homEquiv W L‚ÇÇ L‚ÇÉ (homEquiv W L‚ÇÅ L‚ÇÇ f) = homEquiv W L‚ÇÅ L‚ÇÉ f := by
  dsimp only [homEquiv_apply]
  apply LocalizerMorphism.homMap_homMap

lemma homEquiv_comp (f : L‚ÇÅ.obj X ‚ü∂ L‚ÇÅ.obj Y) (g : L‚ÇÅ.obj Y ‚ü∂ L‚ÇÅ.obj Z) :
    homEquiv W L‚ÇÅ L‚ÇÇ (f ‚â´ g) = homEquiv W L‚ÇÅ L‚ÇÇ f ‚â´ homEquiv W L‚ÇÅ L‚ÇÇ g := by
  apply LocalizerMorphism.homMap_comp

@[simp]
lemma homEquiv_map (f : X ‚ü∂ Y) : homEquiv W L‚ÇÅ L‚ÇÇ (L‚ÇÅ.map f) = L‚ÇÇ.map f := by
  simp [homEquiv_apply]

variable (X) in
@[simp]
lemma homEquiv_id : homEquiv W L‚ÇÅ L‚ÇÇ (ùüô (L‚ÇÅ.obj X)) = ùüô (L‚ÇÇ.obj X) := by
  simp [homEquiv_apply]

lemma homEquiv_isoOfHom_inv (f : Y ‚ü∂ X) (hf : W f) :
    homEquiv W L‚ÇÅ L‚ÇÇ (isoOfHom L‚ÇÅ W f hf).inv = (isoOfHom L‚ÇÇ W f hf).inv := by
  rw [‚Üê cancel_mono (isoOfHom L‚ÇÇ W f hf).hom, Iso.inv_hom_id, isoOfHom_hom,
    ‚Üê homEquiv_map W L‚ÇÅ L‚ÇÇ f, ‚Üê homEquiv_comp, isoOfHom_inv_hom_id, homEquiv_id]

end Localization

end CategoryTheory
