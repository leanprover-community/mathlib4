/-
Copyright (c) 2024 Nicolas Rolland. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicolas Rolland
-/
import Mathlib.CategoryTheory.ChosenFiniteProducts
/-!
`Cat` is a category on its own, views categories as its objects and functors as its morphism.

On one hand, we can build a cartesian product category out of a pair of categories.
On the other hand `Cat`, as a category, comes with its own definition for an object to be a product.

We verify here that the product *in* `Cat` is given by the product *of* categories, when viewed
as an object.
-/

universe v u

namespace CategoryTheory

namespace Cat

open Limits

/-- The chosen terminal object in `Cat`. -/
abbrev OneCat : Cat := Cat.of (ULift (ULiftHom (Discrete Unit)))

example : OneCat := ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©

/-- The chosen terminal object in `Cat` is terminal. -/
def isTerminalPUnit : IsTerminal OneCat :=
  IsTerminal.ofUniqueHom (fun _ ‚Ü¶ (Functor.const _).obj ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©) fun _ _ ‚Ü¶ rfl

/-- The chosen product of categories `C √ó D` yields a product cone in `Cat`. -/
def prodCone (C D : Cat.{v,u}) : BinaryFan C D :=
  .mk (P := .of (C √ó D)) (Prod.fst _ _) (Prod.snd _ _)

/-- The product cone in `Cat` is indeed a product. -/
def isLimitProdCone (X Y : Cat) : IsLimit (prodCone X Y) := BinaryFan.isLimitMk
  (fun S => S.fst.prod' S.snd) (fun _ => rfl) (fun _ => rfl) (fun _ _ h1 h2 =>
    Functor.hext
      (fun _ ‚Ü¶ Prod.ext (by simp [‚Üê h1]) (by simp [‚Üê h2]))
      (fun _ _ _ ‚Ü¶ by dsimp; rw [‚Üê h1, ‚Üê h2]; rfl))

instance : ChosenFiniteProducts Cat where
  product (X Y : Cat) := { isLimit := isLimitProdCone X Y }
  terminal  := { isLimit := isTerminalPUnit }

example : MonoidalCategory Cat := by infer_instance

example : SymmetricCategory Cat := by infer_instance

end Cat

namespace Monoidal

open MonoidalCategory

-- some lemmas about the monoidal structure generated by the finite product-

variable (C : Cat) (D : Cat)

@[simp]
lemma leftUnitor_is_snd (C : Cat) :
    (Œª_ C).hom = Prod.snd _ _  := rfl

@[simp]
lemma leftUnitor_inv_is_sectionr (C : Cat) :
    (Œª_ C).inv = Prod.sectr ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü© _  := rfl

@[simp]
lemma rightUnitor_is_fst (C : Cat) :
    (œÅ_ C).hom = Prod.fst _ _  := rfl

@[simp]
lemma rightUnitor_inv_is_sectionl (C : Cat) :
    (œÅ_ C).inv = Prod.sectl _ ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©  := rfl

@[simp]
lemma whiskerLeft_is_product_with_identity_left (X : Cat) {A : Cat} {B : Cat} (f : A ‚ü∂ B) :
    MonoidalCategoryStruct.whiskerLeft X f = (ùü≠ X).prod f   := rfl

@[simp]
lemma whiskerRight_is_product_with_identity_right {A : Cat} {B : Cat} (f : A ‚ü∂ B)  (X : Cat) :
    MonoidalCategoryStruct.whiskerRight f X  = f.prod (ùü≠ X)   := rfl


end Monoidal


end CategoryTheory
