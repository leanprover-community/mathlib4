/-
Copyright (c) 2024 Nicolas Rolland. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicolas Rolland
-/
import Mathlib.CategoryTheory.ChosenFiniteProducts
/-!
# Chosen finite products in `Cat`

This file proves that the cartesian product of a pair of categories agrees with the
product in `Cat`, and provides the associated `ChosenFiniteProducts` instance.

-/

universe v u

namespace CategoryTheory

namespace Cat

open Limits

/-- The chosen terminal object in `Cat`. -/
abbrev chosenTerminal : Cat := Cat.of (ULift (ULiftHom (Discrete Unit)))

example : chosenTerminal := ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©

/-- The chosen terminal object in `Cat` is terminal. -/
def chosenTerminalIsTerminal : IsTerminal chosenTerminal :=
  IsTerminal.ofUniqueHom (fun _ ‚Ü¶ (Functor.const _).obj ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©) fun _ _ ‚Ü¶ rfl

/-- The chosen product of categories `C √ó D` yields a product cone in `Cat`. -/
def prodCone (C D : Cat.{v,u}) : BinaryFan C D :=
  .mk (P := .of (C √ó D)) (Prod.fst _ _) (Prod.snd _ _)

/-- The product cone in `Cat` is indeed a product. -/
def isLimitProdCone (X Y : Cat) : IsLimit (prodCone X Y) := BinaryFan.isLimitMk
  (fun S => S.fst.prod' S.snd) (fun _ => rfl) (fun _ => rfl) (fun _ _ h1 h2 =>
    Functor.hext
      (fun _ ‚Ü¶ Prod.ext (by simp [‚Üê h1]) (by simp [‚Üê h2]))
      (fun _ _ _ ‚Ü¶ by dsimp; rw [‚Üê h1, ‚Üê h2]; rfl))

instance : ChosenFiniteProducts Cat where
  product (X Y : Cat) := { isLimit := isLimitProdCone X Y }
  terminal  := { isLimit := chosenTerminalIsTerminal }

example : MonoidalCategory Cat := by infer_instance

example : SymmetricCategory Cat := by infer_instance

end Cat

namespace Monoidal

open MonoidalCategory

-- some lemmas about the monoidal structure generated by the finite product-

variable (C : Cat) (D : Cat)

@[simp]
lemma leftUnitor_hom (C : Cat) :
    (Œª_ C).hom = Prod.snd _ _  := rfl

@[simp]
lemma leftUnitor_inv (C : Cat) :
    (Œª_ C).inv = Prod.sectr ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü© _  := rfl

@[simp]
lemma rightUnitor_hom (C : Cat) :
    (œÅ_ C).hom = Prod.fst _ _  := rfl

@[simp]
lemma rightUnitor_inv (C : Cat) :
    (œÅ_ C).inv = Prod.sectl _ ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©  := rfl

@[simp]
lemma whiskerLeft (X : Cat) {A : Cat} {B : Cat} (f : A ‚ü∂ B) :
    MonoidalCategoryStruct.whiskerLeft X f = (ùü≠ X).prod f   := rfl

@[simp]
lemma whiskerRight {A : Cat} {B : Cat} (f : A ‚ü∂ B)  (X : Cat) :
    MonoidalCategoryStruct.whiskerRight f X  = f.prod (ùü≠ X)   := rfl



end Monoidal


end CategoryTheory
