/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Scott Morrison
-/
import Mathlib.CategoryTheory.Equivalence

/-!
# Opposite categories

We provide a category instance on `C·µí·µñ`.
The morphisms `X ‚ü∂ Y` are defined to be the morphisms `unop Y ‚ü∂ unop X` in `C`.

Here `C·µí·µñ` is an irreducible typeclass synonym for `C`
(it is the same one used in the algebra library).

We also provide various mechanisms for constructing opposite morphisms, functors,
and natural transformations.

Unfortunately, because we do not have a definitional equality `op (op X) = X`,
there are quite a few variations that are needed in practice.
-/

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

-- morphism levels before object levels. See note [CategoryTheory universes].
open Opposite

variable {C : Type u‚ÇÅ}

section Quiver

variable [Quiver.{v‚ÇÅ} C]

theorem Quiver.Hom.op_inj {X Y : C} :
    Function.Injective (Quiver.Hom.op : (X ‚ü∂ Y) ‚Üí (Opposite.op Y ‚ü∂ Opposite.op X)) := fun _ _ H =>
  congr_arg Quiver.Hom.unop H

theorem Quiver.Hom.unop_inj {X Y : C·µí·µñ} :
    Function.Injective (Quiver.Hom.unop : (X ‚ü∂ Y) ‚Üí (Opposite.unop Y ‚ü∂ Opposite.unop X)) :=
  fun _ _ H => congr_arg Quiver.Hom.op H

@[simp]
theorem Quiver.Hom.unop_op {X Y : C} (f : X ‚ü∂ Y) : f.op.unop = f :=
  rfl

@[simp]
theorem Quiver.Hom.unop_op' {X Y : C·µí·µñ} {x} :
    @Quiver.Hom.unop C _ X Y no_index (Opposite.op (unop := x)) = x := rfl

@[simp]
theorem Quiver.Hom.op_unop {X Y : C·µí·µñ} (f : X ‚ü∂ Y) : f.unop.op = f :=
  rfl

@[simp] theorem Quiver.Hom.unop_mk {X Y : C·µí·µñ} (f : X ‚ü∂ Y) : Quiver.Hom.unop {unop := f} = f := rfl

end Quiver

namespace CategoryTheory

variable [Category.{v‚ÇÅ} C]

/-- The opposite category.

See <https://stacks.math.columbia.edu/tag/001M>.
-/
instance Category.opposite : Category.{v‚ÇÅ} C·µí·µñ where
  comp f g := (g.unop ‚â´ f.unop).op
  id X := (ùüô (unop X)).op

@[simp, reassoc]
theorem op_comp {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} : (f ‚â´ g).op = g.op ‚â´ f.op :=
  rfl

@[simp]
theorem op_id {X : C} : (ùüô X).op = ùüô (op X) :=
  rfl

@[simp, reassoc]
theorem unop_comp {X Y Z : C·µí·µñ} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} : (f ‚â´ g).unop = g.unop ‚â´ f.unop :=
  rfl

@[simp]
theorem unop_id {X : C·µí·µñ} : (ùüô X).unop = ùüô (unop X) :=
  rfl

@[simp]
theorem unop_id_op {X : C} : (ùüô (op X)).unop = ùüô X :=
  rfl

@[simp]
theorem op_id_unop {X : C·µí·µñ} : (ùüô (unop X)).op = ùüô X :=
  rfl

section

variable (C)

/-- The functor from the double-opposite of a category to the underlying category. -/
@[simps]
def unopUnop : C·µí·µñ·µí·µñ ‚•§ C where
  obj X := unop (unop X)
  map f := f.unop.unop

/-- The functor from a category to its double-opposite. -/
@[simps]
def opOp : C ‚•§ C·µí·µñ·µí·µñ where
  obj X := op (op X)
  map f := f.op.op

/-- The double opposite category is equivalent to the original. -/
@[simps]
def opOpEquivalence : C·µí·µñ·µí·µñ ‚âå C where
  functor := unopUnop C
  inverse := opOp C
  unitIso := Iso.refl (ùü≠ C·µí·µñ·µí·µñ)
  counitIso := Iso.refl (opOp C ‚ãô unopUnop C)

end

/-- If `f` is an isomorphism, so is `f.op` -/
instance isIso_op {X Y : C} (f : X ‚ü∂ Y) [IsIso f] : IsIso f.op :=
  ‚ü®‚ü®(inv f).op, ‚ü®Quiver.Hom.unop_inj (by aesop_cat), Quiver.Hom.unop_inj (by aesop_cat)‚ü©‚ü©‚ü©

/-- If `f.op` is an isomorphism `f` must be too.
(This cannot be an instance as it would immediately loop!)
-/
theorem isIso_of_op {X Y : C} (f : X ‚ü∂ Y) [IsIso f.op] : IsIso f :=
  ‚ü®‚ü®(inv f.op).unop, ‚ü®Quiver.Hom.op_inj (by simp), Quiver.Hom.op_inj (by simp)‚ü©‚ü©‚ü©

theorem isIso_op_iff {X Y : C} (f : X ‚ü∂ Y) : IsIso f.op ‚Üî IsIso f :=
  ‚ü®fun _ => isIso_of_op _, fun _ => inferInstance‚ü©

theorem isIso_unop_iff {X Y : C·µí·µñ} (f : X ‚ü∂ Y) : IsIso f.unop ‚Üî IsIso f := by
  rw [‚Üê isIso_op_iff f.unop, Quiver.Hom.op_unop]

instance isIso_unop {X Y : C·µí·µñ} (f : X ‚ü∂ Y) [IsIso f] : IsIso f.unop :=
  (isIso_unop_iff _).2 inferInstance

@[simp]
theorem op_inv {X Y : C} (f : X ‚ü∂ Y) [IsIso f] : (inv f).op = inv f.op := by
  apply IsIso.eq_inv_of_hom_inv_id
  rw [‚Üê op_comp, IsIso.inv_hom_id, op_id]

@[simp]
theorem unop_inv {X Y : C·µí·µñ} (f : X ‚ü∂ Y) [IsIso f] : (inv f).unop = inv f.unop := by
  apply IsIso.eq_inv_of_hom_inv_id
  rw [‚Üê unop_comp, IsIso.inv_hom_id, unop_id]

namespace Functor

section

variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

/-- The opposite of a functor, i.e. considering a functor `F : C ‚•§ D` as a functor `C·µí·µñ ‚•§ D·µí·µñ`.
In informal mathematics no distinction is made between these. -/
@[simps]
protected def op (F : C ‚•§ D) : C·µí·µñ ‚•§ D·µí·µñ where
  obj X := op (F.obj (unop X))
  map f := (F.map f.unop).op

/-- Given a functor `F : C·µí·µñ ‚•§ D·µí·µñ` we can take the "unopposite" functor `F : C ‚•§ D`.
In informal mathematics no distinction is made between these.
-/
@[simps]
protected def unop (F : C·µí·µñ ‚•§ D·µí·µñ) : C ‚•§ D where
  obj X := unop (F.obj (op X))
  map f := (F.map f.op).unop

/-- The isomorphism between `F.op.unop` and `F`. -/
@[simps!]
def opUnopIso (F : C ‚•§ D) : F.op.unop ‚âÖ F :=
  NatIso.ofComponents fun X => Iso.refl _

/-- The isomorphism between `F.unop.op` and `F`. -/
@[simps!]
def unopOpIso (F : C·µí·µñ ‚•§ D·µí·µñ) : F.unop.op ‚âÖ F :=
  NatIso.ofComponents fun X => Iso.refl _

variable (C D)

/-- Taking the opposite of a functor is functorial.
-/
@[simps]
def opHom : (C ‚•§ D)·µí·µñ ‚•§ C·µí·µñ ‚•§ D·µí·µñ where
  obj F := (unop F).op
  map Œ± :=
    { app := fun X => (Œ±.unop.app (unop X)).op
      naturality := fun X Y f => Quiver.Hom.unop_inj (Œ±.unop.naturality f.unop).symm }

/-- Take the "unopposite" of a functor is functorial.
-/
@[simps]
def opInv : (C·µí·µñ ‚•§ D·µí·µñ) ‚•§ (C ‚•§ D)·µí·µñ where
  obj F := op F.unop
  map Œ± :=
    Quiver.Hom.op
      { app := fun X => (Œ±.app (op X)).unop
        naturality := fun X Y f => Quiver.Hom.op_inj <| (Œ±.naturality f.op).symm }

variable {C D}

/--
Another variant of the opposite of functor, turning a functor `C ‚•§ D·µí·µñ` into a functor `C·µí·µñ ‚•§ D`.
In informal mathematics no distinction is made.
-/
@[simps]
protected def leftOp (F : C ‚•§ D·µí·µñ) : C·µí·µñ ‚•§ D where
  obj X := unop (F.obj (unop X))
  map f := (F.map f.unop).unop

/--
Another variant of the opposite of functor, turning a functor `C·µí·µñ ‚•§ D` into a functor `C ‚•§ D·µí·µñ`.
In informal mathematics no distinction is made.
-/
@[simps]
protected def rightOp (F : C·µí·µñ ‚•§ D) : C ‚•§ D·µí·µñ where
  obj X := op (F.obj (op X))
  map f := (F.map f.op).op

lemma rightOp_map_unop {F : C·µí·µñ ‚•§ D} {X Y} (f : X ‚ü∂ Y) :
    (F.rightOp.map f).unop = F.map f.op := rfl

instance {F : C ‚•§ D} [Full F] : Full F.op where
  map_surjective f := ‚ü®(F.preimage f.unop).op, by simp‚ü©

instance {F : C ‚•§ D} [Faithful F] : Faithful F.op where
  map_injective h := Quiver.Hom.unop_inj <| by simpa using map_injective F (Quiver.Hom.op_inj h)

/-- If F is faithful then the right_op of F is also faithful. -/
instance rightOp_faithful {F : C·µí·µñ ‚•§ D} [Faithful F] : Faithful F.rightOp where
  map_injective h := Quiver.Hom.op_inj (map_injective F (Quiver.Hom.op_inj h))

/-- If F is faithful then the left_op of F is also faithful. -/
instance leftOp_faithful {F : C ‚•§ D·µí·µñ} [Faithful F] : Faithful F.leftOp where
  map_injective h := Quiver.Hom.unop_inj (map_injective F (Quiver.Hom.unop_inj h))

instance rightOp_full {F : C·µí·µñ ‚•§ D} [Full F] : Full F.rightOp where
  map_surjective f := ‚ü®(F.preimage f.unop).unop, by simp‚ü©

instance leftOp_full {F : C ‚•§ D·µí·µñ} [Full F] : Full F.leftOp where
  map_surjective f := ‚ü®(F.preimage f.op).op, by simp‚ü©


/-- The isomorphism between `F.leftOp.rightOp` and `F`. -/
@[simps!]
def leftOpRightOpIso (F : C ‚•§ D·µí·µñ) : F.leftOp.rightOp ‚âÖ F :=
  NatIso.ofComponents fun X => Iso.refl _

/-- The isomorphism between `F.rightOp.leftOp` and `F`. -/
@[simps!]
def rightOpLeftOpIso (F : C·µí·µñ ‚•§ D) : F.rightOp.leftOp ‚âÖ F :=
  NatIso.ofComponents fun X => Iso.refl _

/-- Whenever possible, it is advisable to use the isomorphism `rightOpLeftOpIso`
instead of this equality of functors. -/
theorem rightOp_leftOp_eq (F : C·µí·µñ ‚•§ D) : F.rightOp.leftOp = F := by
  cases F
  rfl

end

end Functor

namespace NatTrans

variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

section

variable {F G : C ‚•§ D}

/-- The opposite of a natural transformation. -/
@[simps]
protected def op (Œ± : F ‚ü∂ G) : G.op ‚ü∂ F.op where
  app X := (Œ±.app (unop X)).op
  naturality X Y f := Quiver.Hom.unop_inj (by simp)

@[simp]
theorem op_id (F : C ‚•§ D) : NatTrans.op (ùüô F) = ùüô F.op :=
  rfl

/-- The "unopposite" of a natural transformation. -/
@[simps]
protected def unop {F G : C·µí·µñ ‚•§ D·µí·µñ} (Œ± : F ‚ü∂ G) : G.unop ‚ü∂ F.unop where
  app X := (Œ±.app (op X)).unop
  naturality X Y f := Quiver.Hom.op_inj (by simp)

@[simp]
theorem unop_id (F : C·µí·µñ ‚•§ D·µí·µñ) : NatTrans.unop (ùüô F) = ùüô F.unop :=
  rfl

/-- Given a natural transformation `Œ± : F.op ‚ü∂ G.op`,
we can take the "unopposite" of each component obtaining a natural transformation `G ‚ü∂ F`.
-/
@[simps]
protected def removeOp (Œ± : F.op ‚ü∂ G.op) : G ‚ü∂ F where
  app X := (Œ±.app (op X)).unop
  naturality X Y f :=
    Quiver.Hom.op_inj <| by simpa only [Functor.op_map] using (Œ±.naturality f.op).symm

@[simp]
theorem removeOp_id (F : C ‚•§ D) : NatTrans.removeOp (ùüô F.op) = ùüô F :=
  rfl

/-- Given a natural transformation `Œ± : F.unop ‚ü∂ G.unop`, we can take the opposite of each
component obtaining a natural transformation `G ‚ü∂ F`. -/
@[simps]
protected def removeUnop {F G : C·µí·µñ ‚•§ D·µí·µñ} (Œ± : F.unop ‚ü∂ G.unop) : G ‚ü∂ F where
  app X := (Œ±.app (unop X)).op
  naturality X Y f :=
    Quiver.Hom.unop_inj <| by simpa only [Functor.unop_map] using (Œ±.naturality f.unop).symm

@[simp]
theorem removeUnop_id (F : C·µí·µñ ‚•§ D·µí·µñ) : NatTrans.removeUnop (ùüô F.unop) = ùüô F :=
  rfl

end

section

variable {F G H : C ‚•§ D·µí·µñ}

/-- Given a natural transformation `Œ± : F ‚ü∂ G`, for `F G : C ‚•§ D·µí·µñ`,
taking `unop` of each component gives a natural transformation `G.leftOp ‚ü∂ F.leftOp`.
-/
@[simps]
protected def leftOp (Œ± : F ‚ü∂ G) : G.leftOp ‚ü∂ F.leftOp where
  app X := (Œ±.app (unop X)).unop
  naturality X Y f := Quiver.Hom.op_inj (by simp)

@[simp]
theorem leftOp_id : NatTrans.leftOp (ùüô F : F ‚ü∂ F) = ùüô F.leftOp :=
  rfl

@[simp]
theorem leftOp_comp (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) : NatTrans.leftOp (Œ± ‚â´ Œ≤) =
    NatTrans.leftOp Œ≤ ‚â´ NatTrans.leftOp Œ± :=
  rfl

/-- Given a natural transformation `Œ± : F.leftOp ‚ü∂ G.leftOp`, for `F G : C ‚•§ D·µí·µñ`,
taking `op` of each component gives a natural transformation `G ‚ü∂ F`.
-/
@[simps]
protected def removeLeftOp (Œ± : F.leftOp ‚ü∂ G.leftOp) : G ‚ü∂ F where
  app X := (Œ±.app (op X)).op
  naturality X Y f :=
    Quiver.Hom.unop_inj <| by simpa only [Functor.leftOp_map] using (Œ±.naturality f.op).symm

@[simp]
theorem removeLeftOp_id : NatTrans.removeLeftOp (ùüô F.leftOp) = ùüô F :=
  rfl

end

section

variable {F G H : C·µí·µñ ‚•§ D}

/-- Given a natural transformation `Œ± : F ‚ü∂ G`, for `F G : C·µí·µñ ‚•§ D`,
taking `op` of each component gives a natural transformation `G.rightOp ‚ü∂ F.rightOp`.
-/
@[simps]
protected def rightOp (Œ± : F ‚ü∂ G) : G.rightOp ‚ü∂ F.rightOp where
  app X := (Œ±.app _).op
  naturality X Y f := Quiver.Hom.unop_inj (by simp)

@[simp]
theorem rightOp_id : NatTrans.rightOp (ùüô F : F ‚ü∂ F) = ùüô F.rightOp :=
  rfl

@[simp]
theorem rightOp_comp (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) : NatTrans.rightOp (Œ± ‚â´ Œ≤) =
    NatTrans.rightOp Œ≤ ‚â´ NatTrans.rightOp Œ± :=
  rfl

/-- Given a natural transformation `Œ± : F.rightOp ‚ü∂ G.rightOp`, for `F G : C·µí·µñ ‚•§ D`,
taking `unop` of each component gives a natural transformation `G ‚ü∂ F`.
-/
@[simps]
protected def removeRightOp (Œ± : F.rightOp ‚ü∂ G.rightOp) : G ‚ü∂ F where
  app X := (Œ±.app X.unop).unop
  naturality X Y f :=
    Quiver.Hom.op_inj <| by simpa only [Functor.rightOp_map] using (Œ±.naturality f.unop).symm

@[simp]
theorem removeRightOp_id : NatTrans.removeRightOp (ùüô F.rightOp) = ùüô F :=
  rfl

end

end NatTrans

namespace Iso

variable {X Y : C}

/-- The opposite isomorphism.
-/
@[simps]
protected def op (Œ± : X ‚âÖ Y) : op Y ‚âÖ op X where
  hom := Œ±.hom.op
  inv := Œ±.inv.op
  hom_inv_id := Quiver.Hom.unop_inj Œ±.inv_hom_id
  inv_hom_id := Quiver.Hom.unop_inj Œ±.hom_inv_id

/-- The isomorphism obtained from an isomorphism in the opposite category. -/
@[simps]
def unop {X Y : C·µí·µñ} (f : X ‚âÖ Y) : Y.unop ‚âÖ X.unop where
  hom := f.hom.unop
  inv := f.inv.unop
  hom_inv_id := by simp only [‚Üê unop_comp, f.inv_hom_id, unop_id]
  inv_hom_id := by simp only [‚Üê unop_comp, f.hom_inv_id, unop_id]

@[simp]
theorem unop_op {X Y : C·µí·µñ} (f : X ‚âÖ Y) : f.unop.op = f := by (ext; rfl)

@[simp]
theorem op_unop {X Y : C} (f : X ‚âÖ Y) : f.op.unop = f := by (ext; rfl)

section

variable {D : Type*} [Category D] {F G : C ‚•§ D·µí·µñ} (e : F ‚âÖ G) (X : C)

@[reassoc (attr := simp)]
lemma unop_hom_inv_id_app : (e.hom.app X).unop ‚â´ (e.inv.app X).unop = ùüô _ := by
  rw [‚Üê unop_comp, inv_hom_id_app, unop_id]

@[reassoc (attr := simp)]
lemma unop_inv_hom_id_app : (e.inv.app X).unop ‚â´ (e.hom.app X).unop = ùüô _ := by
  rw [‚Üê unop_comp, hom_inv_id_app, unop_id]

end

end Iso

namespace NatIso

variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
variable {F G : C ‚•§ D}

/-- The natural isomorphism between opposite functors `G.op ‚âÖ F.op` induced by a natural
isomorphism between the original functors `F ‚âÖ G`. -/
@[simps]
protected def op (Œ± : F ‚âÖ G) : G.op ‚âÖ F.op where
  hom := NatTrans.op Œ±.hom
  inv := NatTrans.op Œ±.inv
  hom_inv_id := by ext; dsimp; rw [‚Üê op_comp]; rw [Œ±.inv_hom_id_app]; rfl
  inv_hom_id := by ext; dsimp; rw [‚Üê op_comp]; rw [Œ±.hom_inv_id_app]; rfl

/-- The natural isomorphism between functors `G ‚âÖ F` induced by a natural isomorphism
between the opposite functors `F.op ‚âÖ G.op`. -/
@[simps]
protected def removeOp (Œ± : F.op ‚âÖ G.op) : G ‚âÖ F where
  hom := NatTrans.removeOp Œ±.hom
  inv := NatTrans.removeOp Œ±.inv

/-- The natural isomorphism between functors `G.unop ‚âÖ F.unop` induced by a natural isomorphism
between the original functors `F ‚âÖ G`. -/
@[simps]
protected def unop {F G : C·µí·µñ ‚•§ D·µí·µñ} (Œ± : F ‚âÖ G) : G.unop ‚âÖ F.unop where
  hom := NatTrans.unop Œ±.hom
  inv := NatTrans.unop Œ±.inv

end NatIso

namespace Equivalence

variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

/-- An equivalence between categories gives an equivalence between the opposite categories.
-/
@[simps]
def op (e : C ‚âå D) : C·µí·µñ ‚âå D·µí·µñ where
  functor := e.functor.op
  inverse := e.inverse.op
  unitIso := (NatIso.op e.unitIso).symm
  counitIso := (NatIso.op e.counitIso).symm
  functor_unitIso_comp X := by
    apply Quiver.Hom.unop_inj
    dsimp
    simp

/-- An equivalence between opposite categories gives an equivalence between the original categories.
-/
@[simps]
def unop (e : C·µí·µñ ‚âå D·µí·µñ) : C ‚âå D where
  functor := e.functor.unop
  inverse := e.inverse.unop
  unitIso := (NatIso.unop e.unitIso).symm
  counitIso := (NatIso.unop e.counitIso).symm
  functor_unitIso_comp X := by
    apply Quiver.Hom.op_inj
    dsimp
    simp

end Equivalence

/-- The equivalence between arrows of the form `A ‚ü∂ B` and `B.unop ‚ü∂ A.unop`. Useful for building
adjunctions.
Note that this (definitionally) gives variants
```
def opEquiv' (A : C) (B : C·µí·µñ) : (Opposite.op A ‚ü∂ B) ‚âÉ (B.unop ‚ü∂ A) :=
  opEquiv _ _

def opEquiv'' (A : C·µí·µñ) (B : C) : (A ‚ü∂ Opposite.op B) ‚âÉ (B ‚ü∂ A.unop) :=
  opEquiv _ _

def opEquiv''' (A B : C) : (Opposite.op A ‚ü∂ Opposite.op B) ‚âÉ (B ‚ü∂ A) :=
  opEquiv _ _
```
-/
@[simps]
def opEquiv (A B : C·µí·µñ) : (A ‚ü∂ B) ‚âÉ (B.unop ‚ü∂ A.unop) where
  toFun f := f.unop
  invFun g := g.op
  left_inv _ := rfl
  right_inv _ := rfl

instance subsingleton_of_unop (A B : C·µí·µñ) [Subsingleton (unop B ‚ü∂ unop A)] : Subsingleton (A ‚ü∂ B) :=
  (opEquiv A B).subsingleton

instance decidableEqOfUnop (A B : C·µí·µñ) [DecidableEq (unop B ‚ü∂ unop A)] : DecidableEq (A ‚ü∂ B) :=
  (opEquiv A B).decidableEq

/-- The equivalence between isomorphisms of the form `A ‚âÖ B` and `B.unop ‚âÖ A.unop`.

Note this is definitionally the same as the other three variants:
* `(Opposite.op A ‚âÖ B) ‚âÉ (B.unop ‚âÖ A)`
* `(A ‚âÖ Opposite.op B) ‚âÉ (B ‚âÖ A.unop)`
* `(Opposite.op A ‚âÖ Opposite.op B) ‚âÉ (B ‚âÖ A)`
-/
@[simps]
def isoOpEquiv (A B : C·µí·µñ) : (A ‚âÖ B) ‚âÉ (B.unop ‚âÖ A.unop) where
  toFun f := f.unop
  invFun g := g.op
  left_inv _ := by
    ext
    rfl
  right_inv _ := by
    ext
    rfl

namespace Functor

variable (C)
variable (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]

/-- The equivalence of functor categories induced by `op` and `unop`.
-/
@[simps]
def opUnopEquiv : (C ‚•§ D)·µí·µñ ‚âå C·µí·µñ ‚•§ D·µí·µñ where
  functor := opHom _ _
  inverse := opInv _ _
  unitIso :=
    NatIso.ofComponents (fun F => F.unop.opUnopIso.op)
      (by
        intro F G f
        dsimp [opUnopIso]
        rw [show f = f.unop.op by simp, ‚Üê op_comp, ‚Üê op_comp]
        congr 1
        aesop_cat)
  counitIso := NatIso.ofComponents fun F => F.unopOpIso

/-- The equivalence of functor categories induced by `leftOp` and `rightOp`.
-/
@[simps!]
def leftOpRightOpEquiv : (C·µí·µñ ‚•§ D)·µí·µñ ‚âå C ‚•§ D·µí·µñ where
  functor :=
    { obj := fun F => F.unop.rightOp
      map := fun Œ∑ => NatTrans.rightOp Œ∑.unop }
  inverse :=
    { obj := fun F => op F.leftOp
      map := fun Œ∑ => Œ∑.leftOp.op }
  unitIso :=
    NatIso.ofComponents (fun F => F.unop.rightOpLeftOpIso.op)
      (by
        intro F G Œ∑
        dsimp
        rw [show Œ∑ = Œ∑.unop.op by simp, ‚Üê op_comp, ‚Üê op_comp]
        congr 1
        aesop_cat)
  counitIso := NatIso.ofComponents fun F => F.leftOpRightOpIso

instance {F : C ‚•§ D} [EssSurj F] : EssSurj F.op where
  mem_essImage X := ‚ü®op _, ‚ü®(F.objObjPreimageIso X.unop).op.symm‚ü©‚ü©

instance {F : C·µí·µñ ‚•§ D} [EssSurj F] : EssSurj F.rightOp where
  mem_essImage X := ‚ü®_, ‚ü®(F.objObjPreimageIso X.unop).op.symm‚ü©‚ü©

instance {F : C ‚•§ D·µí·µñ} [EssSurj F] : EssSurj F.leftOp where
  mem_essImage X := ‚ü®op _, ‚ü®(F.objObjPreimageIso (op X)).unop.symm‚ü©‚ü©

instance {F : C ‚•§ D} [IsEquivalence F] : IsEquivalence F.op where

instance {F : C·µí·µñ ‚•§ D} [IsEquivalence F] : IsEquivalence F.rightOp where

instance {F : C ‚•§ D·µí·µñ} [IsEquivalence F] : IsEquivalence F.leftOp where

end Functor

end CategoryTheory
