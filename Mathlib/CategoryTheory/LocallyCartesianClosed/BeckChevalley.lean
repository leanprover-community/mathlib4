/-
Copyright (c) 2025 Sina Hazratpour. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sina Hazratpour, Emily Riehl
-/
import Mathlib.CategoryTheory.LocallyCartesianClosed.Basic

/-!
# Beck-Chevalley natural transformations and natural isomorphisms

We construct the so-called Beck-Chevalley natural transformations and isomorphisms through the
repeated applications of the mate construction in the vertical and horizontal directions.

## Main declarations

- `Over.mapSquareIso`: The isomorphism between the functors `Over.map h ‚ãô Over.map g` and
  `Over.map f ‚ãô Over.map k` for a commutative square of morphisms `h ‚â´ g = f ‚â´ k`.
- `Over.pullbackBeckChevalleySquare`: The Beck-Chevalley natural transformation for a commutative
  square of morphisms `h ‚â´ g = f ‚â´ k` in the slice category `Over Y`.
- `Over.pullbackBeckChevalleyTriangle`: The Beck-Chevalley natural transformation for the identity
  morphism `f : X ‚ü∂ Y` in the slice category `Over Y`.
- `Over.pullbackSquareIso`: The isomorphism between the pullbacks along a commutative square of
  morphisms `h ‚â´ g = f ‚â´ k`.
- `Over.pushforwardBeckChevalleySquare`: The Beck-Chevalley natural transformation for a commutative
  square of morphisms `h ‚â´ g = f ‚â´ k` in the slice category `Over Y`.
- `Over.pushforwardSquareIso`: The isomorphism between the pushforwards along a commutative
  square of morphisms `h ‚â´ g = f ‚â´ k`.

## Implementation notes
The lax naturality squares are constructed by the mate equivalence `mateEquiv` and
the natural iso-squares are constructed by the more special conjugation equivalence
`conjugateIsoEquiv`.

## References

The methodology and the notation of the successive mate constructions to obtain the Beck-Chevalley
natural transformations and isomorphisms are based on the following paper:

* [A 2-categorical proof of Frobenius for fibrations defined from a generic point,
in Mathematical Structures in Computer Science, 2024][Hazratpour_Riehl_2024]

-/

noncomputable section
namespace CategoryTheory

open Category Functor Adjunction Limits NatTrans ExponentiableMorphism

universe v u

namespace Over

variable {C : Type u} [Category.{v} C]

section BeckChevalleyTrans

--h ‚â´ g = f ‚â´ k -- h ‚Üí k
theorem map_square_eq {X Y Z W : C} {f : X ‚ü∂ Y} {h : X ‚ü∂ Z} {g : Z ‚ü∂ W} {k : Y ‚ü∂ W}
    (sq : CommSq h f g k := by aesop) :
    Over.map h ‚ãô Over.map g = Over.map f ‚ãô Over.map k := by
  rw [‚Üê mapComp_eq, sq.w, mapComp_eq]

/-- Promoting the equality `mapSquare_eq` of functors to an isomorphism.
```
        Over X -- .map h -> Over Z
           |                  |
   .map f  |         ‚âÖ        | .map g
           ‚Üì                  ‚Üì
        Over Y -- .map k -> Over W
```
The Beck Chevalley transformations are iterated mates of this isomorphism in the
horizontal and vertical directions. -/
def mapSquareIso {X Y Z W : C} {f : X ‚ü∂ Y} {h : X ‚ü∂ Z} {g : Z ‚ü∂ W} {k : Y ‚ü∂ W}
    (sq : CommSq h f g k := by aesop) :
    Over.map h ‚ãô Over.map g ‚âÖ Over.map f ‚ãô Over.map k :=
  eqToIso (map_square_eq sq)

variable [HasPullbacks C]

variable {X Y Z W : C} (f : X ‚ü∂ Y) (h : X ‚ü∂ Z) (g : Z ‚ü∂ W) (k : Y ‚ü∂ W)
(sq : CommSq h f g k)

/-- The Beck-Chevalley natural transformation constructed as a mate of `mapSquareIso`:
```
          Over X -- .map h -> Over Z
             ‚Üë                  ‚Üë
.pullback f  |         ‚Üò        | .pullback g
             |                  |
          Over Y -- .map k -> Over W
```
-/
def pullbackBeckChevalleySquare :
    pullback f ‚ãô map h ‚ü∂ map k ‚ãô pullback g :=
  mateEquiv (mapPullbackAdj f) (mapPullbackAdj g) (mapSquareIso sq).hom

/--
Special case of the Beck-Chevalley natural transformation above:
```
          Over X --.forget X -> C
             ‚Üë                  |
.pullback f  |         ‚Üò        | ùü≠
             |                  |
          Over Y --.forget Y -> C
```
-/
def pullbackBeckChevalleyTriangle :
    pullback f ‚ãô forget X ‚ü∂ forget Y := by
  let iso := (mapForget f).inv
  rw [‚Üê Functor.comp_id (forget X)] at iso
  exact (mateEquiv (mapPullbackAdj f) (Adjunction.id)) iso

/-- The isomorphism between the pullbacks along a commutative square.  This is constructed as the
conjugate of the `mapSquareIso`.
```
          Over X ‚Üê--.pullback h-- Over Z
             ‚Üë                       ‚Üë
.pullback f  |          ‚âÖ            | .pullback g
             |                       |
          Over Y ‚Üê--.pullback k-- Over W
```
-/
def pullbackSquareIso : pullback k ‚ãô pullback f ‚âÖ pullback g ‚ãô pullback h :=
  conjugateIsoEquiv ((mapPullbackAdj f).comp (mapPullbackAdj k))
  ((mapPullbackAdj h).comp (mapPullbackAdj g)) (mapSquareIso sq)

/-- The Beck-Chevalley natural transformations in a square of pullbacks and pushforwards.
```
              Over X ‚Üê-.pullback h-- Over Z
                |                     |
.pushforward f  |          ‚Üñ          | .pushforward g
                ‚Üì                     ‚Üì
              Over Y ‚Üê-.pullback k-- Over W
```
-/
def pushforwardBeckChevalleySquare
    [fexp : ExponentiableMorphism f] [gexp : ExponentiableMorphism g] :
    pushforward g ‚ãô pullback k ‚ü∂ pullback h ‚ãô pushforward f :=
  conjugateEquiv ((mapPullbackAdj k).comp gexp.adj) (fexp.adj.comp (mapPullbackAdj h))
    (pullbackBeckChevalleySquare f h g k sq)
-- (pullbackBeckChevalleySquare f h g k sq)

/-- The conjugate isomorphism between the pushforwards along a commutative square.
```
            Over X --.pushforward h -‚Üí Over Z
               |                        |
.pushforward f |           ‚âÖ            | .pushforward g
               ‚Üì                        ‚Üì
            Over Y --.pushforward k -‚Üí Over W
```
-/
def pushforwardSquareIso [fexp : ExponentiableMorphism f] [gexp : ExponentiableMorphism g]
    [hexp : ExponentiableMorphism h] [kexp : ExponentiableMorphism k] :
    pushforward h ‚ãô pushforward g ‚âÖ pushforward f ‚ãô pushforward k :=
  conjugateIsoEquiv (gexp.adj.comp hexp.adj) (kexp.adj.comp fexp.adj) (pullbackSquareIso f h g k sq)
-- pullbackSquareIso f h g k sq

end BeckChevalleyTrans

end Over

section BeckChevalleyComponents

variable {C : Type u} [Category.{v} C]

namespace IsPullback

/--
In a commutative cube diagram if the front, back and the right face are pullback squares then
the the left face is also a pullback square.
```
          P ---p‚ÇÇ------  X
         /|             /|
    i‚ÇÑ  / |       i‚ÇÇ   / |
       /  |           /  | f‚ÇÇ
      Q ----q‚ÇÇ-----  Z   |
      |   |          |   |
      |   W -f‚ÇÅ----- | - S
  q‚ÇÅ  |  /           |  /
      | / i‚ÇÅ         | / i‚ÇÉ
      |/             |/
      Y ----g‚ÇÅ------ T
```
-/
theorem left_face_of_comm_cube {P W X Y Q Z S T : C}
    (p‚ÇÅ : P ‚ü∂ W) (p‚ÇÇ : P ‚ü∂ X) (f‚ÇÅ : W ‚ü∂ S) (f‚ÇÇ : X ‚ü∂ S)
    (q‚ÇÅ : Q ‚ü∂ Y) (q‚ÇÇ : Q ‚ü∂ Z) (g‚ÇÅ : Y ‚ü∂ T) (g‚ÇÇ : Z ‚ü∂ T)
    (i‚ÇÅ : W ‚ü∂ Y) (i‚ÇÇ : X ‚ü∂ Z) (i‚ÇÉ : S ‚ü∂ T) (i‚ÇÑ : P ‚ü∂ Q)
    (sq_top : CommSq p‚ÇÇ i‚ÇÑ i‚ÇÇ q‚ÇÇ)
    (sq_bot : CommSq f‚ÇÅ i‚ÇÅ i‚ÇÉ g‚ÇÅ)
    (sq_left : CommSq i‚ÇÑ p‚ÇÅ q‚ÇÅ i‚ÇÅ)
    (pb_back : IsPullback p‚ÇÇ p‚ÇÅ f‚ÇÇ f‚ÇÅ)
    (pb_front : IsPullback q‚ÇÇ q‚ÇÅ g‚ÇÇ g‚ÇÅ)
    (pb_right : IsPullback i‚ÇÇ f‚ÇÇ g‚ÇÇ i‚ÇÉ) :
    IsPullback i‚ÇÑ p‚ÇÅ q‚ÇÅ i‚ÇÅ := by
  have paste_horiz_pb := paste_horiz pb_back pb_right
  rw [sq_top.w, sq_bot.w] at paste_horiz_pb
  exact of_right paste_horiz_pb sq_left.w pb_front

/--
In a commutative cube diagram if the front, the left and the right face are pullback squares then
the the back face is also a pullback square.
```
          P ---p‚ÇÇ------  X
         /|             /|
    i‚ÇÑ  / |       i‚ÇÇ   / |
       /  |           /  | f‚ÇÇ
      Q ----q‚ÇÇ-----  Z   |
      |   |          |   |
      |   W -f‚ÇÅ----- | - S
  q‚ÇÅ  |  /           |  /
      | / i‚ÇÅ         | / i‚ÇÉ
      |/             |/
      Y ----g‚ÇÅ------ T
```
-/
theorem back_face_of_comm_cube {P W X Y Q Z S T : C}
    (p‚ÇÅ : P ‚ü∂ W) (p‚ÇÇ : P ‚ü∂ X) (f‚ÇÅ : W ‚ü∂ S) (f‚ÇÇ : X ‚ü∂ S)
    (q‚ÇÅ : Q ‚ü∂ Y) (q‚ÇÇ : Q ‚ü∂ Z) (g‚ÇÅ : Y ‚ü∂ T) (g‚ÇÇ : Z ‚ü∂ T)
    (i‚ÇÅ : W ‚ü∂ Y) (i‚ÇÇ : X ‚ü∂ Z) (i‚ÇÉ : S ‚ü∂ T) (i‚ÇÑ : P ‚ü∂ Q)
    (sq_top : CommSq p‚ÇÇ i‚ÇÑ i‚ÇÇ q‚ÇÇ)
    (sq_bot : CommSq f‚ÇÅ i‚ÇÅ i‚ÇÉ g‚ÇÅ)
    (sq_back : CommSq p‚ÇÇ p‚ÇÅ f‚ÇÇ f‚ÇÅ)
    (pb_front : IsPullback q‚ÇÇ q‚ÇÅ g‚ÇÇ g‚ÇÅ)
    (pb_left : IsPullback i‚ÇÑ p‚ÇÅ q‚ÇÅ i‚ÇÅ)
    (pb_right : IsPullback i‚ÇÇ f‚ÇÇ g‚ÇÇ i‚ÇÉ) :
    IsPullback p‚ÇÇ p‚ÇÅ f‚ÇÇ f‚ÇÅ := by
  have paste_horiz_pb := paste_horiz pb_left pb_front
  rw [‚Üê sq_top.w, ‚Üê sq_bot.w] at paste_horiz_pb
  exact of_right paste_horiz_pb sq_back.w pb_right

/-- The pullback comparison map `pullback.map f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ` between two
pullback squares is an isomorphism if  `i‚ÇÅ` is an isomorphism and one of the
connecting morphisms is an isomorphism. -/
theorem pullback.map_isIso_of_pullback_right_of_comm_cube {W X Y Z S T : C}
    (f‚ÇÅ : W ‚ü∂ S) (f‚ÇÇ : X ‚ü∂ S) [HasPullback f‚ÇÅ f‚ÇÇ]
    (g‚ÇÅ : Y ‚ü∂ T) (g‚ÇÇ : Z ‚ü∂ T) [HasPullback g‚ÇÅ g‚ÇÇ]
    (i‚ÇÅ : W ‚ü∂ Y) (i‚ÇÇ : X ‚ü∂ Z) (i‚ÇÉ : S ‚ü∂ T)
    (sq_bot : CommSq f‚ÇÅ i‚ÇÅ i‚ÇÉ g‚ÇÅ)
    [IsIso i‚ÇÅ] (pb_right : IsPullback i‚ÇÇ f‚ÇÇ g‚ÇÇ i‚ÇÉ) :
    IsIso (pullback.map f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ sq_bot.w pb_right.w.symm) := by
  let m := pullback.map f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ sq_bot.w pb_right.w.symm
  have sq_top : CommSq (pullback.snd f‚ÇÅ f‚ÇÇ) m i‚ÇÇ (pullback.snd g‚ÇÅ g‚ÇÇ) := by
    aesop
  have sq_left : CommSq m (pullback.fst f‚ÇÅ f‚ÇÇ) (pullback.fst g‚ÇÅ g‚ÇÇ) i‚ÇÅ := by
    aesop
  let pb' : IsPullback m (pullback.fst f‚ÇÅ f‚ÇÇ)  (pullback.fst g‚ÇÅ g‚ÇÇ) i‚ÇÅ := by
    apply IsPullback.left_face_of_comm_cube (sq_top := sq_top) (sq_bot := sq_bot)
      (sq_left := sq_left) (pb_back := (IsPullback.of_hasPullback f‚ÇÅ f‚ÇÇ).flip)
      (pb_front := (IsPullback.of_hasPullback g‚ÇÅ g‚ÇÇ).flip)
      (pb_right := pb_right)
  have is_iso : IsIso m := isIso_fst_of_isIso pb'
  exact is_iso

end IsPullback

variable [HasPullbacks C]

variable {X Y Z W : C} {f : X ‚ü∂ Y} {h : X ‚ü∂ Z} {g : Z ‚ü∂ W} {k : Y ‚ü∂ W}
(sq : CommSq h f g k) (A : Over Y)

open IsPullback Over

theorem mapPullbackAdj.counit_app_left  :
    ((mapPullbackAdj f).counit.app A).left = pullback.fst _ _ := by
  simp only [mapPullbackAdj_counit_app, homMk_left]

@[simp]
theorem pullbackBeckChevalleySquare_app :
    (pullbackBeckChevalleySquare f h g k sq).app A =
    Over.homMk (pullback.map _ _ (A.hom ‚â´ k) _ _ h k (id_comp _).symm sq.w.symm) (by aesop) := by
  ext
  simp only [homMk_left, pullbackBeckChevalleySquare, mapSquareIso]
  aesop

theorem forget_map_pullbackBeckChevalleySquare :
    (forget Z).map ((pullbackBeckChevalleySquare f h g k sq).app A) =
    pullback.map _ _ _ _ (ùüô _) h k (id_comp _).symm sq.w.symm := by
  simp only [forget_map, pullbackBeckChevalleySquare_app, homMk_left]

theorem isIso_forgetMapPullbackBeckChevalleySquare_of_isPullback (pb : IsPullback h f g k) :
    IsIso ((forget Z).map ((pullbackBeckChevalleySquare f h g k pb.toCommSq).app A)) := by
  rw [forget_map_pullbackBeckChevalleySquare (sq:= pb.toCommSq)]
  let paste_horiz_pb := paste_horiz (IsPullback.of_hasPullback f A.hom) pb
  apply pullback.map_isIso_of_pullback_right_of_comm_cube
  assumption'
  aesop

/-- The pullback Beck-Chevalley natural transformation of a pullback square is an isomorphism. -/
instance pullbackBeckChevalleySquare_of_isPullback_isIso (pb : IsPullback h f g k) :
    IsIso (pullbackBeckChevalleySquare f h g k pb.toCommSq) := by
  apply (config := { allowSynthFailures:= true}) NatIso.isIso_of_isIso_app
  intro A
  have := isIso_forgetMapPullbackBeckChevalleySquare_of_isPullback A pb
  exact ReflectsIsomorphisms.reflects (forget Z)
    ((pullbackBeckChevalleySquare f h g k pb.toCommSq).app A)

/-- The pushforward Beck-Chevalley natural transformation of a pullback square is an isomorphism. -/
instance pushforwardBeckChevalleySquare_of_isPullback_isIso (pb : IsPullback h f g k)
    [fexp : ExponentiableMorphism f] [gexp : ExponentiableMorphism g] :
    IsIso (pushforwardBeckChevalleySquare f h g k pb.toCommSq) := by
  have := pullbackBeckChevalleySquare_of_isPullback_isIso pb
  apply conjugateEquiv_iso


end BeckChevalleyComponents

end CategoryTheory

end
