/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Adjunction.Basic

/-!
# Adjunctions with a parameter

Given bifunctors `F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ` and `G : C‚ÇÅ·µí·µñ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ`,
this file introduces the notation `F ‚ä£‚ÇÇ G` for the adjunctions
with a parameter (in `C‚ÇÅ`) between `F` and `G`.

(See `MonoidalClosed.internalHomAdjunction‚ÇÇ` in the file
`CategoryTheory.Closed.Monoidal` for an example of such an adjunction.)

Note: this notion is weaker than the notion of
"adjunction of two variables" which appears in the mathematical literature.
In order to have an adjunction of two variables, we need
a third functor `H : C‚ÇÇ·µí·µñ ‚•§ C‚ÇÉ ‚•§ C‚ÇÅ` and two adjunctions with
a parameter `F ‚ä£‚ÇÇ G` and `F.flip ‚ä£‚ÇÇ H`.

## TODO

Show that given `F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ`, if `F.obj X‚ÇÅ` has a right adjoint
`G X‚ÇÅ : C‚ÇÉ ‚•§ C‚ÇÇ` for any `X‚ÇÅ : C‚ÇÅ`, then `G` extends as a
bifunctor `G' : C‚ÇÅ·µí·µñ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ` with `F ‚ä£‚ÇÇ G'` (and similarly for
left adjoints).

## References
* https://ncatlab.org/nlab/show/two-variable+adjunction

-/

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace CategoryTheory

open Opposite

variable {C‚ÇÅ : Type u‚ÇÅ} {C‚ÇÇ : Type u‚ÇÇ} {C‚ÇÉ : Type u‚ÇÉ}
  [Category.{v‚ÇÅ} C‚ÇÅ] [Category.{v‚ÇÇ} C‚ÇÇ] [Category.{v‚ÇÉ} C‚ÇÉ]
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ) (G : C‚ÇÅ·µí·µñ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ)

/-- Given bifunctors `F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ` and `G : C‚ÇÅ·µí·µñ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ`,
an adjunction with parameter `F ‚ä£‚ÇÇ G` consists of the data of
adjunctions `F.obj X‚ÇÅ ‚ä£ G.obj (op X‚ÇÅ)` for all `X‚ÇÅ : C‚ÇÅ` which
satisfy a naturality condition with respect to `X‚ÇÅ`. -/
structure ParametrizedAdjunction where
  /-- a family of adjunctions -/
  adj (X‚ÇÅ : C‚ÇÅ) : F.obj X‚ÇÅ ‚ä£ G.obj (op X‚ÇÅ)
  unit_whiskerRight_map {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) :
    (adj X‚ÇÅ).unit ‚â´ whiskerRight (F.map f) _ = (adj Y‚ÇÅ).unit ‚â´ whiskerLeft _ (G.map f.op) :=
      by aesop_cat

/-- The notation `F ‚ä£‚ÇÇ G` stands for `ParametrizedAdjunction F G`
representing that the bifunctor `F` is the left adjoint to `G`
in an adjunction with a parameter. -/
infixl:15 " ‚ä£‚ÇÇ " => ParametrizedAdjunction

namespace ParametrizedAdjunction

attribute [reassoc] unit_whiskerRight_map

variable {F G}

/-- Alternative constructor for parametrized adjunctions, for which
the compatibility is stated in terms of `Adjunction.homEquiv`. -/
@[simps]
def mk' (adj : ‚àÄ (X‚ÇÅ : C‚ÇÅ), F.obj X‚ÇÅ ‚ä£ G.obj (op X‚ÇÅ))
    (h : ‚àÄ {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) {X‚ÇÇ : C‚ÇÇ} {X‚ÇÉ : C‚ÇÉ} (g : (F.obj Y‚ÇÅ).obj X‚ÇÇ ‚ü∂ X‚ÇÉ),
      (adj X‚ÇÅ).homEquiv X‚ÇÇ X‚ÇÉ ((F.map f).app X‚ÇÇ ‚â´ g) =
        (adj Y‚ÇÅ).homEquiv X‚ÇÇ X‚ÇÉ g ‚â´ (G.map f.op).app X‚ÇÉ := by aesop_cat) :
    F ‚ä£‚ÇÇ G where
  adj := adj
  unit_whiskerRight_map {X‚ÇÅ Y‚ÇÅ} f := by
    ext X‚ÇÇ
    simpa [Adjunction.homEquiv_unit] using h f (X‚ÇÇ := X‚ÇÇ) (ùüô _)

variable (adj‚ÇÇ : F ‚ä£‚ÇÇ G)
  {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} {X‚ÇÉ Y‚ÇÉ : C‚ÇÉ}

/-- The bijection `((F.obj X‚ÇÅ).obj X‚ÇÇ ‚ü∂ X‚ÇÉ) ‚âÉ (X‚ÇÇ ‚ü∂ (G.obj (op X‚ÇÅ)).obj X‚ÇÉ)`
given by an adjunction with a parameter `adj‚ÇÇ : F ‚ä£‚ÇÇ G`. -/
def homEquiv : ((F.obj X‚ÇÅ).obj X‚ÇÇ ‚ü∂ X‚ÇÉ) ‚âÉ (X‚ÇÇ ‚ü∂ (G.obj (op X‚ÇÅ)).obj X‚ÇÉ) :=
  (adj‚ÇÇ.adj X‚ÇÅ).homEquiv _ _

lemma homEquiv_eq : adj‚ÇÇ.homEquiv = (adj‚ÇÇ.adj X‚ÇÅ).homEquiv X‚ÇÇ X‚ÇÉ := rfl

@[reassoc]
lemma homEquiv_naturality_one (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g : (F.obj Y‚ÇÅ).obj X‚ÇÇ ‚ü∂ X‚ÇÉ) :
    adj‚ÇÇ.homEquiv ((F.map f‚ÇÅ).app X‚ÇÇ ‚â´ g) =
      adj‚ÇÇ.homEquiv g ‚â´ (G.map f‚ÇÅ.op).app X‚ÇÉ := by
  have := NatTrans.congr_app (adj‚ÇÇ.unit_whiskerRight_map f‚ÇÅ) X‚ÇÇ
  dsimp at this
  simp only [homEquiv_eq, Adjunction.homEquiv_unit, Functor.comp_obj, Functor.map_comp,
    Category.assoc, NatTrans.naturality, reassoc_of% this]

@[reassoc]
lemma homEquiv_naturality_two (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (g : (F.obj X‚ÇÅ).obj Y‚ÇÇ ‚ü∂ X‚ÇÉ) :
    adj‚ÇÇ.homEquiv ((F.obj X‚ÇÅ).map f‚ÇÇ ‚â´ g) = f‚ÇÇ ‚â´ adj‚ÇÇ.homEquiv g :=
  (adj‚ÇÇ.adj X‚ÇÅ).homEquiv_naturality_left _ _

@[reassoc]
lemma homEquiv_naturality_three (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) (g : (F.obj X‚ÇÅ).obj X‚ÇÇ ‚ü∂ X‚ÇÉ) :
    adj‚ÇÇ.homEquiv (g ‚â´ f‚ÇÉ) = adj‚ÇÇ.homEquiv g ‚â´ (G.obj (op X‚ÇÅ)).map f‚ÇÉ :=
  (adj‚ÇÇ.adj X‚ÇÅ).homEquiv_naturality_right _ _

@[reassoc]
lemma homEquiv_symm_naturality_one
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g : X‚ÇÇ ‚ü∂ (G.obj (op Y‚ÇÅ)).obj X‚ÇÉ) :
    adj‚ÇÇ.homEquiv.symm (g ‚â´ (G.map f‚ÇÅ.op).app X‚ÇÉ) =
      (F.map f‚ÇÅ).app X‚ÇÇ ‚â´ adj‚ÇÇ.homEquiv.symm g :=
  adj‚ÇÇ.homEquiv.injective (by simp [homEquiv_naturality_one])

@[reassoc]
lemma homEquiv_symm_naturality_two
    (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (g : Y‚ÇÇ ‚ü∂ (G.obj (op X‚ÇÅ)).obj X‚ÇÉ) :
    adj‚ÇÇ.homEquiv.symm (f‚ÇÇ ‚â´ g) =
      (F.obj X‚ÇÅ).map f‚ÇÇ ‚â´ adj‚ÇÇ.homEquiv.symm g :=
  adj‚ÇÇ.homEquiv.injective (by simp [homEquiv_naturality_two])

@[reassoc]
lemma homEquiv_symm_naturality_three
    (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) (g : X‚ÇÇ ‚ü∂ (G.obj (op X‚ÇÅ)).obj X‚ÇÉ) :
    adj‚ÇÇ.homEquiv.symm (g ‚â´ (G.obj (op X‚ÇÅ)).map f‚ÇÉ) =
      adj‚ÇÇ.homEquiv.symm g ‚â´ f‚ÇÉ :=
  adj‚ÇÇ.homEquiv.injective (by simp [homEquiv_naturality_three])

@[reassoc]
lemma whiskerLeft_map_counit {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) :
    whiskerLeft _ (F.map f) ‚â´ (adj‚ÇÇ.adj Y‚ÇÅ).counit =
      whiskerRight (G.map f.op) _ ‚â´ (adj‚ÇÇ.adj X‚ÇÅ).counit := by
  ext X‚ÇÉ
  dsimp
  apply adj‚ÇÇ.homEquiv.injective
  rw [homEquiv_naturality_one, homEquiv_naturality_two]
  simp [homEquiv_eq, Adjunction.homEquiv_unit]

end ParametrizedAdjunction

end CategoryTheory
