/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Adjunction.Mates

/-!
# Compatibilities for left adjoints from compatibilities satisfied by right adjoints

In this file, given isomorphisms between compositions of right adjoint functors,
we obtain isomorphisms between the corresponding compositions of the left adjoint functors,
and show that the left adjoint functors satisfy properties similar to the left/right
unitality and the associativity of pseudofunctors if the right adjoint functors
satisfy the corresponding properties.

This shall be used to study the behaviour with respect to composition of
the pullback functors on presheaves of modules, by reducing these definitions and
properties to the (obvious) case of the pushforward functors. Similar results shall
be obtained for sheaves of modules (TODO).

-/

namespace CategoryTheory

variable {C‚ÇÄ C‚ÇÅ C‚ÇÇ C‚ÇÉ : Type*} [Category C‚ÇÄ] [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ]

open Functor

namespace Adjunction

/-- If a right adjoint functor is isomorphic to the identity functor,
so is the left adjoint. -/
@[simps! -isSimp]
def leftAdjointIdIso {F : C‚ÇÄ ‚•§ C‚ÇÄ} {G : C‚ÇÄ ‚•§ C‚ÇÄ} (adj : F ‚ä£ G) (e : G ‚âÖ ùü≠ C‚ÇÄ) :
    F ‚âÖ ùü≠ C‚ÇÄ := (conjugateIsoEquiv .id adj).symm e.symm

section

variable {F‚ÇÄ‚ÇÅ : C‚ÇÄ ‚•§ C‚ÇÅ} {F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ} {F‚ÇÄ‚ÇÇ : C‚ÇÄ ‚•§ C‚ÇÇ}
  {G‚ÇÅ‚ÇÄ : C‚ÇÅ ‚•§ C‚ÇÄ} {G‚ÇÇ‚ÇÅ : C‚ÇÇ ‚•§ C‚ÇÅ} {G‚ÇÇ‚ÇÄ : C‚ÇÇ ‚•§ C‚ÇÄ}
  (adj‚ÇÄ‚ÇÅ : F‚ÇÄ‚ÇÅ ‚ä£ G‚ÇÅ‚ÇÄ) (adj‚ÇÅ‚ÇÇ : F‚ÇÅ‚ÇÇ ‚ä£ G‚ÇÇ‚ÇÅ) (adj‚ÇÄ‚ÇÇ : F‚ÇÄ‚ÇÇ ‚ä£ G‚ÇÇ‚ÇÄ)

/-- A natural transformation `G‚ÇÇ‚ÇÄ ‚ü∂ G‚ÇÇ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ` involving right adjoint functors
induces a natural transformation `F‚ÇÄ‚ÇÅ ‚ãô F‚ÇÅ‚ÇÇ ‚ü∂ F‚ÇÄ‚ÇÇ` between the corresponding
left adjoint functors. -/
@[simps! -isSimp]
def leftAdjointCompNatTrans (œÑ‚ÇÄ‚ÇÅ‚ÇÇ : G‚ÇÇ‚ÇÄ ‚ü∂ G‚ÇÇ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ) :
    F‚ÇÄ‚ÇÅ ‚ãô F‚ÇÅ‚ÇÇ ‚ü∂ F‚ÇÄ‚ÇÇ :=
  (conjugateEquiv adj‚ÇÄ‚ÇÇ (adj‚ÇÄ‚ÇÅ.comp adj‚ÇÅ‚ÇÇ)).symm œÑ‚ÇÄ‚ÇÅ‚ÇÇ

/-- A natural isomorphism `G‚ÇÇ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ ‚âÖ G‚ÇÇ‚ÇÄ` involving right adjoint functors
induces a natural isomorphism `F‚ÇÄ‚ÇÅ ‚ãô F‚ÇÅ‚ÇÇ ‚âÖ F‚ÇÄ‚ÇÇ` between the corresponding
left adjoint functors. -/
@[simps! -isSimp]
def leftAdjointCompIso (e‚ÇÄ‚ÇÅ‚ÇÇ : G‚ÇÇ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ ‚âÖ G‚ÇÇ‚ÇÄ) :
    F‚ÇÄ‚ÇÅ ‚ãô F‚ÇÅ‚ÇÇ ‚âÖ F‚ÇÄ‚ÇÇ :=
  (conjugateIsoEquiv adj‚ÇÄ‚ÇÇ (adj‚ÇÄ‚ÇÅ.comp adj‚ÇÅ‚ÇÇ)).symm e‚ÇÄ‚ÇÅ‚ÇÇ.symm

lemma leftAdjointCompIso_hom (e‚ÇÄ‚ÇÅ‚ÇÇ : G‚ÇÇ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ ‚âÖ G‚ÇÇ‚ÇÄ) :
    (leftAdjointCompIso adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÇ adj‚ÇÄ‚ÇÇ e‚ÇÄ‚ÇÅ‚ÇÇ).hom =
      leftAdjointCompNatTrans adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÇ adj‚ÇÄ‚ÇÇ e‚ÇÄ‚ÇÅ‚ÇÇ.inv :=
  rfl

end

lemma leftAdjointCompIso_comp_id
    {F‚ÇÄ‚ÇÅ : C‚ÇÄ ‚•§ C‚ÇÅ} {F‚ÇÅ‚ÇÅ' : C‚ÇÅ ‚•§ C‚ÇÅ} {G‚ÇÅ‚ÇÄ : C‚ÇÅ ‚•§ C‚ÇÄ} {G‚ÇÅ'‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÅ}
    (adj‚ÇÄ‚ÇÅ : F‚ÇÄ‚ÇÅ ‚ä£ G‚ÇÅ‚ÇÄ) (adj‚ÇÅ‚ÇÅ' : F‚ÇÅ‚ÇÅ' ‚ä£ G‚ÇÅ'‚ÇÅ)
    (e‚ÇÄ‚ÇÅ‚ÇÅ' : G‚ÇÅ'‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ ‚âÖ G‚ÇÅ‚ÇÄ) (e‚ÇÅ'‚ÇÅ : G‚ÇÅ'‚ÇÅ ‚âÖ ùü≠ _)
    (h : e‚ÇÄ‚ÇÅ‚ÇÅ' = isoWhiskerRight e‚ÇÅ'‚ÇÅ G‚ÇÅ‚ÇÄ ‚â™‚â´ leftUnitor G‚ÇÅ‚ÇÄ) :
    leftAdjointCompIso adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÅ' adj‚ÇÄ‚ÇÅ e‚ÇÄ‚ÇÅ‚ÇÅ' =
      isoWhiskerLeft _ (leftAdjointIdIso adj‚ÇÅ‚ÇÅ' e‚ÇÅ'‚ÇÅ) ‚â™‚â´ rightUnitor F‚ÇÄ‚ÇÅ := by
  subst h
  ext X‚ÇÄ
  simp [leftAdjointCompIso_hom_app, leftAdjointIdIso_hom_app,
    ‚Üê Functor.map_comp_assoc, -Functor.map_comp]

lemma leftAdjointCompIso_id_comp
    {F‚ÇÄ‚ÇÄ' : C‚ÇÄ ‚•§ C‚ÇÄ} {F‚ÇÄ'‚ÇÅ : C‚ÇÄ ‚•§ C‚ÇÅ} {G‚ÇÄ'‚ÇÄ : C‚ÇÄ ‚•§ C‚ÇÄ} {G‚ÇÅ‚ÇÄ' : C‚ÇÅ ‚•§ C‚ÇÄ}
    (adj‚ÇÄ‚ÇÄ' : F‚ÇÄ‚ÇÄ' ‚ä£ G‚ÇÄ'‚ÇÄ) (adj‚ÇÄ'‚ÇÅ : F‚ÇÄ'‚ÇÅ ‚ä£ G‚ÇÅ‚ÇÄ')
    (e‚ÇÄ‚ÇÄ'‚ÇÅ : G‚ÇÅ‚ÇÄ' ‚ãô G‚ÇÄ'‚ÇÄ ‚âÖ G‚ÇÅ‚ÇÄ') (e‚ÇÄ'‚ÇÄ : G‚ÇÄ'‚ÇÄ ‚âÖ ùü≠ _)
    (h : e‚ÇÄ‚ÇÄ'‚ÇÅ = isoWhiskerLeft G‚ÇÅ‚ÇÄ' e‚ÇÄ'‚ÇÄ ‚â™‚â´ rightUnitor G‚ÇÅ‚ÇÄ') :
    leftAdjointCompIso adj‚ÇÄ‚ÇÄ' adj‚ÇÄ'‚ÇÅ adj‚ÇÄ'‚ÇÅ e‚ÇÄ‚ÇÄ'‚ÇÅ =
      isoWhiskerRight (leftAdjointIdIso adj‚ÇÄ‚ÇÄ' e‚ÇÄ'‚ÇÄ) F‚ÇÄ'‚ÇÅ ‚â™‚â´ leftUnitor F‚ÇÄ'‚ÇÅ := by
  subst h
  ext X‚ÇÄ
  have h‚ÇÅ := congr_map F‚ÇÄ'‚ÇÅ (adj‚ÇÄ‚ÇÄ'.counit.naturality (adj‚ÇÄ'‚ÇÅ.unit.app X‚ÇÄ))
  have h‚ÇÇ := congr_map (F‚ÇÄ‚ÇÄ' ‚ãô F‚ÇÄ'‚ÇÅ) (e‚ÇÄ'‚ÇÄ.inv.naturality (adj‚ÇÄ'‚ÇÅ.unit.app X‚ÇÄ))
  simp only [id_obj, comp_obj, Functor.id_map, Functor.comp_map, Functor.map_comp] at h‚ÇÅ h‚ÇÇ
  simp [leftAdjointCompIso_hom_app, leftAdjointIdIso_hom_app,
    reassoc_of% h‚ÇÇ, reassoc_of% h‚ÇÅ]

section

variable
  {F‚ÇÄ‚ÇÅ : C‚ÇÄ ‚•§ C‚ÇÅ} {F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ} {F‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ} {F‚ÇÄ‚ÇÇ : C‚ÇÄ ‚•§ C‚ÇÇ} {F‚ÇÅ‚ÇÉ : C‚ÇÅ ‚•§ C‚ÇÉ} {F‚ÇÄ‚ÇÉ : C‚ÇÄ ‚•§ C‚ÇÉ}
  {G‚ÇÅ‚ÇÄ : C‚ÇÅ ‚•§ C‚ÇÄ} {G‚ÇÇ‚ÇÅ : C‚ÇÇ ‚•§ C‚ÇÅ} {G‚ÇÉ‚ÇÇ : C‚ÇÉ ‚•§ C‚ÇÇ} {G‚ÇÇ‚ÇÄ : C‚ÇÇ ‚•§ C‚ÇÄ} {G‚ÇÉ‚ÇÅ : C‚ÇÉ ‚•§ C‚ÇÅ} {G‚ÇÉ‚ÇÄ : C‚ÇÉ ‚•§ C‚ÇÄ}
  (adj‚ÇÄ‚ÇÅ : F‚ÇÄ‚ÇÅ ‚ä£ G‚ÇÅ‚ÇÄ) (adj‚ÇÅ‚ÇÇ : F‚ÇÅ‚ÇÇ ‚ä£ G‚ÇÇ‚ÇÅ) (adj‚ÇÇ‚ÇÉ : F‚ÇÇ‚ÇÉ ‚ä£ G‚ÇÉ‚ÇÇ) (adj‚ÇÄ‚ÇÇ : F‚ÇÄ‚ÇÇ ‚ä£ G‚ÇÇ‚ÇÄ)
  (adj‚ÇÅ‚ÇÉ : F‚ÇÅ‚ÇÉ ‚ä£ G‚ÇÉ‚ÇÅ) (adj‚ÇÄ‚ÇÉ : F‚ÇÄ‚ÇÉ ‚ä£ G‚ÇÉ‚ÇÄ)

section

variable (œÑ‚ÇÄ‚ÇÅ‚ÇÇ : G‚ÇÇ‚ÇÄ ‚ü∂ G‚ÇÇ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ) (œÑ‚ÇÅ‚ÇÇ‚ÇÉ : G‚ÇÉ‚ÇÅ ‚ü∂ G‚ÇÉ‚ÇÇ ‚ãô G‚ÇÇ‚ÇÅ)
  (œÑ‚ÇÄ‚ÇÅ‚ÇÉ : G‚ÇÉ‚ÇÄ ‚ü∂ G‚ÇÉ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ) (œÑ‚ÇÄ‚ÇÇ‚ÇÉ : G‚ÇÉ‚ÇÄ ‚ü∂ G‚ÇÉ‚ÇÇ ‚ãô G‚ÇÇ‚ÇÄ)

lemma leftAdjointCompNatTrans‚ÇÄ‚ÇÅ‚ÇÉ_eq_conjugateEquiv_symm :
    whiskerLeft _ (leftAdjointCompNatTrans adj‚ÇÅ‚ÇÇ adj‚ÇÇ‚ÇÉ adj‚ÇÅ‚ÇÉ œÑ‚ÇÅ‚ÇÇ‚ÇÉ) ‚â´
      leftAdjointCompNatTrans adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÉ adj‚ÇÄ‚ÇÉ œÑ‚ÇÄ‚ÇÅ‚ÇÉ =
    (conjugateEquiv adj‚ÇÄ‚ÇÉ (adj‚ÇÄ‚ÇÅ.comp (adj‚ÇÅ‚ÇÇ.comp adj‚ÇÇ‚ÇÉ))).symm
      (œÑ‚ÇÄ‚ÇÅ‚ÇÉ ‚â´ whiskerRight œÑ‚ÇÅ‚ÇÇ‚ÇÉ G‚ÇÅ‚ÇÄ) := by
  obtain ‚ü®œÑ‚ÇÅ‚ÇÇ‚ÇÉ, rfl‚ü© := (conjugateEquiv adj‚ÇÅ‚ÇÉ (adj‚ÇÅ‚ÇÇ.comp adj‚ÇÇ‚ÇÉ)).surjective œÑ‚ÇÅ‚ÇÇ‚ÇÉ
  obtain ‚ü®œÑ‚ÇÄ‚ÇÅ‚ÇÉ, rfl‚ü© := (conjugateEquiv adj‚ÇÄ‚ÇÉ (adj‚ÇÄ‚ÇÅ.comp adj‚ÇÅ‚ÇÉ)).surjective œÑ‚ÇÄ‚ÇÅ‚ÇÉ
  apply (conjugateEquiv adj‚ÇÄ‚ÇÉ (adj‚ÇÄ‚ÇÅ.comp (adj‚ÇÅ‚ÇÇ.comp adj‚ÇÇ‚ÇÉ))).injective
  simp [leftAdjointCompNatTrans, ‚Üê conjugateEquiv_whiskerLeft _ _ adj‚ÇÄ‚ÇÅ]

lemma leftAdjointCompNatTrans‚ÇÄ‚ÇÇ‚ÇÉ_eq_conjugateEquiv_symm :
    (associator _ _ _).inv ‚â´
      whiskerRight (leftAdjointCompNatTrans adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÇ adj‚ÇÄ‚ÇÇ œÑ‚ÇÄ‚ÇÅ‚ÇÇ) F‚ÇÇ‚ÇÉ ‚â´
          leftAdjointCompNatTrans adj‚ÇÄ‚ÇÇ adj‚ÇÇ‚ÇÉ adj‚ÇÄ‚ÇÉ œÑ‚ÇÄ‚ÇÇ‚ÇÉ =
    (conjugateEquiv adj‚ÇÄ‚ÇÉ (adj‚ÇÄ‚ÇÅ.comp (adj‚ÇÅ‚ÇÇ.comp adj‚ÇÇ‚ÇÉ))).symm
      (œÑ‚ÇÄ‚ÇÇ‚ÇÉ ‚â´ whiskerLeft G‚ÇÉ‚ÇÇ œÑ‚ÇÄ‚ÇÅ‚ÇÇ ‚â´ (associator _ _ _).inv) := by
  obtain ‚ü®œÑ‚ÇÄ‚ÇÅ‚ÇÇ, rfl‚ü© := (conjugateEquiv adj‚ÇÄ‚ÇÇ (adj‚ÇÄ‚ÇÅ.comp adj‚ÇÅ‚ÇÇ)).surjective œÑ‚ÇÄ‚ÇÅ‚ÇÇ
  obtain ‚ü®œÑ‚ÇÄ‚ÇÇ‚ÇÉ, rfl‚ü© := (conjugateEquiv adj‚ÇÄ‚ÇÉ (adj‚ÇÄ‚ÇÇ.comp adj‚ÇÇ‚ÇÉ)).surjective œÑ‚ÇÄ‚ÇÇ‚ÇÉ
  apply (conjugateEquiv adj‚ÇÄ‚ÇÉ (adj‚ÇÄ‚ÇÅ.comp (adj‚ÇÅ‚ÇÇ.comp adj‚ÇÇ‚ÇÉ))).injective
  simp only [Equiv.apply_symm_apply, Equiv.symm_apply_apply, leftAdjointCompNatTrans]
  rw [‚Üê cancel_mono (associator G‚ÇÉ‚ÇÇ G‚ÇÇ‚ÇÅ G‚ÇÅ‚ÇÄ).hom, Category.assoc, Category.assoc,
    Iso.inv_hom_id, Category.comp_id, ‚Üê conjugateEquiv_associator_hom adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÇ adj‚ÇÇ‚ÇÉ,
    ‚Üê conjugateEquiv_whiskerRight _ _ adj‚ÇÇ‚ÇÉ, conjugateEquiv_comp, Iso.hom_inv_id_assoc,
    conjugateEquiv_comp]

lemma leftAdjointCompNatTrans_assoc
    (h : œÑ‚ÇÄ‚ÇÇ‚ÇÉ ‚â´ whiskerLeft G‚ÇÉ‚ÇÇ œÑ‚ÇÄ‚ÇÅ‚ÇÇ =
      œÑ‚ÇÄ‚ÇÅ‚ÇÉ ‚â´ whiskerRight œÑ‚ÇÅ‚ÇÇ‚ÇÉ G‚ÇÅ‚ÇÄ ‚â´ (associator _ _ _).hom) :
    whiskerLeft _ (leftAdjointCompNatTrans adj‚ÇÅ‚ÇÇ adj‚ÇÇ‚ÇÉ adj‚ÇÅ‚ÇÉ œÑ‚ÇÅ‚ÇÇ‚ÇÉ) ‚â´
        leftAdjointCompNatTrans adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÉ adj‚ÇÄ‚ÇÉ œÑ‚ÇÄ‚ÇÅ‚ÇÉ =
      (associator _ _ _).inv ‚â´
        whiskerRight (leftAdjointCompNatTrans adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÇ adj‚ÇÄ‚ÇÇ œÑ‚ÇÄ‚ÇÅ‚ÇÇ) F‚ÇÇ‚ÇÉ ‚â´
          leftAdjointCompNatTrans adj‚ÇÄ‚ÇÇ adj‚ÇÇ‚ÇÉ adj‚ÇÄ‚ÇÉ œÑ‚ÇÄ‚ÇÇ‚ÇÉ := by
  simp [leftAdjointCompNatTrans‚ÇÄ‚ÇÅ‚ÇÉ_eq_conjugateEquiv_symm,
    leftAdjointCompNatTrans‚ÇÄ‚ÇÇ‚ÇÉ_eq_conjugateEquiv_symm, reassoc_of% h]

end

lemma leftAdjointCompIso_assoc
    (e‚ÇÄ‚ÇÅ‚ÇÇ : G‚ÇÇ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ ‚âÖ G‚ÇÇ‚ÇÄ) (e‚ÇÅ‚ÇÇ‚ÇÉ : G‚ÇÉ‚ÇÇ ‚ãô G‚ÇÇ‚ÇÅ ‚âÖ G‚ÇÉ‚ÇÅ)
    (e‚ÇÄ‚ÇÅ‚ÇÉ : G‚ÇÉ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ ‚âÖ G‚ÇÉ‚ÇÄ) (e‚ÇÄ‚ÇÇ‚ÇÉ : G‚ÇÉ‚ÇÇ ‚ãô G‚ÇÇ‚ÇÄ ‚âÖ G‚ÇÉ‚ÇÄ)
    (h : isoWhiskerLeft G‚ÇÉ‚ÇÇ e‚ÇÄ‚ÇÅ‚ÇÇ ‚â™‚â´ e‚ÇÄ‚ÇÇ‚ÇÉ =
      (associator _ _ _).symm ‚â™‚â´ isoWhiskerRight e‚ÇÅ‚ÇÇ‚ÇÉ _ ‚â™‚â´ e‚ÇÄ‚ÇÅ‚ÇÉ) :
    isoWhiskerLeft _ (leftAdjointCompIso adj‚ÇÅ‚ÇÇ adj‚ÇÇ‚ÇÉ adj‚ÇÅ‚ÇÉ e‚ÇÅ‚ÇÇ‚ÇÉ) ‚â™‚â´
        leftAdjointCompIso adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÉ adj‚ÇÄ‚ÇÉ e‚ÇÄ‚ÇÅ‚ÇÉ =
      (associator _ _ _).symm ‚â™‚â´
        isoWhiskerRight (leftAdjointCompIso adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÇ adj‚ÇÄ‚ÇÇ e‚ÇÄ‚ÇÅ‚ÇÇ) F‚ÇÇ‚ÇÉ ‚â™‚â´
          leftAdjointCompIso adj‚ÇÄ‚ÇÇ adj‚ÇÇ‚ÇÉ adj‚ÇÄ‚ÇÉ e‚ÇÄ‚ÇÇ‚ÇÉ := by
  ext : 1
  dsimp [leftAdjointCompIso_hom]
  exact leftAdjointCompNatTrans_assoc _ _ _ _ _ _ _ _ _ _
    (by simpa using congr_arg Iso.inv h)

end

end Adjunction

end CategoryTheory
