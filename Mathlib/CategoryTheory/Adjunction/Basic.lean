/-
Copyright (c) 2019 Reid Barton. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Reid Barton, Johan Commelin, Bhavik Mehta
-/
import Mathlib.CategoryTheory.Equivalence
import Mathlib.CategoryTheory.Yoneda

/-!
# Adjunctions between functors

`F ‚ä£ G` represents the data of an adjunction between two functors
`F : C ‚•§ D` and `G : D ‚•§ C`. `F` is the left adjoint and `G` is the right adjoint.

We provide various useful constructors:
* `mkOfHomEquiv`
* `mk'`: construct an adjunction from the data of a hom set equivalence, unit and counit natural
  transformations together with proofs of the equalities `homEquiv_unit` and `homEquiv_counit`
  relating them to each other.
* `leftAdjointOfEquiv` / `rightAdjointOfEquiv`
  construct a left/right adjoint of a given functor given the action on objects and
  the relevant equivalence of morphism spaces.
* `adjunctionOfEquivLeft` / `adjunctionOfEquivRight` witness that these constructions
  give adjunctions.

There are also typeclasses `IsLeftAdjoint` / `IsRightAdjoint`, which asserts the
existence of a adjoint functor. Given `[F.IsLeftAdjoint]`, a chosen right
adjoint can be obtained as `F.rightAdjoint`.

`Adjunction.comp` composes adjunctions.

`toEquivalence` upgrades an adjunction to an equivalence,
given witnesses that the unit and counit are pointwise isomorphisms.
Conversely `Equivalence.toAdjunction` recovers the underlying adjunction from an equivalence.

## Overview of the directory `CategoryTheory.Adjunction`

* Adjoint lifting theorems are in the directory `Lifting`.
* The file `AdjointFunctorTheorems` proves the adjoint functor theorems.
* The file `Comma` shows that for a functor `G : D ‚•§ C` the data of an initial object in each
  `StructuredArrow` category on `G` is equivalent to a left adjoint to `G`, as well as the dual.
* The file `Evaluation` shows that products and coproducts are adjoint to evaluation of functors.
* The file `FullyFaithful` characterizes when adjoints are full or faithful in terms of the unit
  and counit.
* The file `Limits` proves that left adjoints preserve colimits and right adjoints preserve limits.
* The file `Mates` establishes the bijection between the 2-cells
  ```
          L‚ÇÅ                  R‚ÇÅ
        C --‚Üí D             C ‚Üê-- D
      G ‚Üì  ‚Üó  ‚Üì H         G ‚Üì  ‚Üò  ‚Üì H
        E --‚Üí F             E ‚Üê-- F
          L‚ÇÇ                  R‚ÇÇ
  ```
  where `L‚ÇÅ ‚ä£ R‚ÇÅ` and `L‚ÇÇ ‚ä£ R‚ÇÇ`. Specializing to a pair of adjoints `L‚ÇÅ L‚ÇÇ : C ‚•§ D`,
  `R‚ÇÅ R‚ÇÇ : D ‚•§ C`, it provides equivalences `(L‚ÇÇ ‚ü∂ L‚ÇÅ) ‚âÉ (R‚ÇÅ ‚ü∂ R‚ÇÇ)` and `(L‚ÇÇ ‚âÖ L‚ÇÅ) ‚âÉ (R‚ÇÅ ‚âÖ R‚ÇÇ)`.
* The file `Opposites` contains constructions to relate adjunctions of functors to adjunctions of
  their opposites.
* The file `Reflective` defines reflective functors, i.e. fully faithful right adjoints. Note that
  many facts about reflective functors are proved in the earlier file `FullyFaithful`.
* The file `Restrict` defines the restriction of an adjunction along fully faithful functors.
* The file `Triple` proves that in an adjoint triple, the left adjoint is fully faithful if and
  only if the right adjoint is.
* The file `Unique` proves uniqueness of adjoints.
* The file `Whiskering` proves that functors `F : D ‚•§ E` and `G : E ‚•§ D` with an adjunction
  `F ‚ä£ G`, induce adjunctions between the functor categories `C ‚•§ D` and `C ‚•§ E`,
  and the functor categories `E ‚•§ C` and `D ‚•§ C`.

## Other files related to adjunctions

* The file `CategoryTheory.Monad.Adjunction` develops the basic relationship between adjunctions
  and (co)monads. There it is also shown that given an adjunction `L ‚ä£ R` and an isomorphism
  `L ‚ãô R ‚âÖ ùü≠ C`, the unit is an isomorphism, and similarly for the counit.
-/


namespace CategoryTheory

open Category

-- declare the `v`'s first; see `CategoryTheory.Category` for an explanation
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

-- Porting Note: `elab_without_expected_type` cannot be a local attribute
-- attribute [local elab_without_expected_type] whiskerLeft whiskerRight

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

/-- `F ‚ä£ G` represents the data of an adjunction between two functors
`F : C ‚•§ D` and `G : D ‚•§ C`. `F` is the left adjoint and `G` is the right adjoint.

We use the unit-counit definition of an adjunction. There is a constructor `Adjunction.mk'`
which constructs an adjunction from the data of a hom set equivalence, a unit, and a counit,
together with proofs of the equalities `homEquiv_unit` and `homEquiv_counit` relating them to each
other.

There is also a constructor `Adjunction.mkOfHomEquiv` which constructs an adjunction from a natural
hom set equivalence.

To construct adjoints to a given functor, there are constructors `leftAdjointOfEquiv` and
`adjunctionOfEquivLeft` (as well as their duals).

See <https://stacks.math.columbia.edu/tag/0037>.
-/
structure Adjunction (F : C ‚•§ D) (G : D ‚•§ C) where
  /-- The unit of an adjunction -/
  unit : ùü≠ C ‚ü∂ F.comp G
  /-- The counit of an adjunction -/
  counit : G.comp F ‚ü∂ ùü≠ D
  /-- Equality of the composition of the unit and counit with the identity `F ‚ü∂ FGF ‚ü∂ F = ùüô` -/
  left_triangle_components (X : C) :
      F.map (unit.app X) ‚â´ counit.app (F.obj X) = ùüô (F.obj X) := by aesop_cat
  /-- Equality of the composition of the unit and counit with the identity `G ‚ü∂ GFG ‚ü∂ G = ùüô` -/
  right_triangle_components (Y : D) :
      unit.app (G.obj Y) ‚â´ G.map (counit.app Y) = ùüô (G.obj Y) := by aesop_cat

/-- The notation `F ‚ä£ G` stands for `Adjunction F G` representing that `F` is left adjoint to `G` -/
infixl:15 " ‚ä£ " => Adjunction

namespace Functor

/-- A class asserting the existence of a right adjoint. -/
class IsLeftAdjoint (left : C ‚•§ D) : Prop where
  exists_rightAdjoint : ‚àÉ (right : D ‚•§ C), Nonempty (left ‚ä£ right)

/-- A class asserting the existence of a left adjoint. -/
class IsRightAdjoint (right : D ‚•§ C) : Prop where
  exists_leftAdjoint : ‚àÉ (left : C ‚•§ D), Nonempty (left ‚ä£ right)

/-- A chosen left adjoint to a functor that is a right adjoint. -/
noncomputable def leftAdjoint (R : D ‚•§ C) [IsRightAdjoint R] : C ‚•§ D :=
  (IsRightAdjoint.exists_leftAdjoint (right := R)).choose

/-- A chosen right adjoint to a functor that is a left adjoint. -/
noncomputable def rightAdjoint (L : C ‚•§ D) [IsLeftAdjoint L] : D ‚•§ C :=
  (IsLeftAdjoint.exists_rightAdjoint (left := L)).choose

end Functor

/-- The adjunction associated to a functor known to be a left adjoint. -/
noncomputable def Adjunction.ofIsLeftAdjoint (left : C ‚•§ D) [left.IsLeftAdjoint] :
    left ‚ä£ left.rightAdjoint :=
  Functor.IsLeftAdjoint.exists_rightAdjoint.choose_spec.some

/-- The adjunction associated to a functor known to be a right adjoint. -/
noncomputable def Adjunction.ofIsRightAdjoint (right : C ‚•§ D) [right.IsRightAdjoint] :
    right.leftAdjoint ‚ä£ right :=
  Functor.IsRightAdjoint.exists_leftAdjoint.choose_spec.some

namespace Adjunction

attribute [reassoc (attr := simp)] left_triangle_components right_triangle_components

/-- The hom set equivalence associated to an adjunction. -/
@[simps (config := .lemmasOnly)]
def homEquiv {F : C ‚•§ D} {G : D ‚•§ C} (adj : F ‚ä£ G) (X : C) (Y : D) :
    (F.obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ G.obj Y) where
  toFun := fun f => adj.unit.app X ‚â´ G.map f
  invFun := fun g => F.map g ‚â´ adj.counit.app Y
  left_inv := fun f => by
    dsimp
    rw [F.map_comp, assoc, ‚Üê Functor.comp_map, adj.counit.naturality, ‚Üê assoc]
    simp
  right_inv := fun g => by
    simp only [Functor.comp_obj, Functor.map_comp]
    rw [‚Üê assoc, ‚Üê Functor.comp_map, ‚Üê adj.unit.naturality]
    simp

alias homEquiv_unit := homEquiv_apply
alias homEquiv_counit := homEquiv_symm_apply

end Adjunction

-- These lemmas are not global simp lemmas because certain adjunctions
-- are constructed using `Adjunction.mkOfHomEquiv`, and we certainly
-- do not want `dsimp` to apply `homEquiv_unit` or `homEquiv_counit`
-- in that case. However, when proving general API results about adjunctions,
-- it may be advisable to add a local simp attribute to these lemmas.
attribute [local simp] Adjunction.homEquiv_unit Adjunction.homEquiv_counit

namespace Adjunction

@[ext]
lemma ext {F : C ‚•§ D} {G : D ‚•§ C} {adj adj' : F ‚ä£ G}
    (h : adj.unit = adj'.unit) : adj = adj' := by
  suffices h' : adj.counit = adj'.counit by cases adj; cases adj'; aesop
  ext X
  apply (adj.homEquiv _ _).injective
  rw [Adjunction.homEquiv_unit, Adjunction.homEquiv_unit,
    Adjunction.right_triangle_components, h, Adjunction.right_triangle_components]

section

variable {F : C ‚•§ D} {G : D ‚•§ C} (adj : F ‚ä£ G)

lemma isLeftAdjoint (adj : F ‚ä£ G) : F.IsLeftAdjoint := ‚ü®_, ‚ü®adj‚ü©‚ü©

lemma isRightAdjoint (adj : F ‚ä£ G) : G.IsRightAdjoint := ‚ü®_, ‚ü®adj‚ü©‚ü©

instance (R : D ‚•§ C) [R.IsRightAdjoint] : R.leftAdjoint.IsLeftAdjoint :=
  (ofIsRightAdjoint R).isLeftAdjoint

instance (L : C ‚•§ D) [L.IsLeftAdjoint] : L.rightAdjoint.IsRightAdjoint :=
  (ofIsLeftAdjoint L).isRightAdjoint

variable {X' X : C} {Y Y' : D}

theorem homEquiv_id (X : C) : adj.homEquiv X _ (ùüô _) = adj.unit.app X := by simp

theorem homEquiv_symm_id (X : D) : (adj.homEquiv _ X).symm (ùüô _) = adj.counit.app X := by simp

theorem homEquiv_naturality_left_symm (f : X' ‚ü∂ X) (g : X ‚ü∂ G.obj Y) :
    (adj.homEquiv X' Y).symm (f ‚â´ g) = F.map f ‚â´ (adj.homEquiv X Y).symm g := by
  simp

theorem homEquiv_naturality_left (f : X' ‚ü∂ X) (g : F.obj X ‚ü∂ Y) :
    (adj.homEquiv X' Y) (F.map f ‚â´ g) = f ‚â´ (adj.homEquiv X Y) g := by
  rw [‚Üê Equiv.eq_symm_apply]
  simp only [Equiv.symm_apply_apply, eq_self_iff_true, homEquiv_naturality_left_symm]

theorem homEquiv_naturality_right (f : F.obj X ‚ü∂ Y) (g : Y ‚ü∂ Y') :
    (adj.homEquiv X Y') (f ‚â´ g) = (adj.homEquiv X Y) f ‚â´ G.map g := by
  simp

theorem homEquiv_naturality_right_symm (f : X ‚ü∂ G.obj Y) (g : Y ‚ü∂ Y') :
    (adj.homEquiv X Y').symm (f ‚â´ G.map g) = (adj.homEquiv X Y).symm f ‚â´ g := by
  rw [Equiv.symm_apply_eq]
  simp only [homEquiv_naturality_right, eq_self_iff_true, Equiv.apply_symm_apply]

@[reassoc]
theorem homEquiv_naturality_left_square (f : X' ‚ü∂ X) (g : F.obj X ‚ü∂ Y')
    (h : F.obj X' ‚ü∂ Y) (k : Y ‚ü∂ Y') (w : F.map f ‚â´ g = h ‚â´ k) :
    f ‚â´ (adj.homEquiv X Y') g = (adj.homEquiv X' Y) h ‚â´ G.map k := by
  rw [‚Üê homEquiv_naturality_left, ‚Üê homEquiv_naturality_right, w]

@[reassoc]
theorem homEquiv_naturality_right_square (f : X' ‚ü∂ X) (g : X ‚ü∂ G.obj Y')
    (h : X' ‚ü∂ G.obj Y) (k : Y ‚ü∂ Y') (w : f ‚â´ g = h ‚â´ G.map k) :
    F.map f ‚â´ (adj.homEquiv X Y').symm g = (adj.homEquiv X' Y).symm h ‚â´ k := by
  rw [‚Üê homEquiv_naturality_left_symm, ‚Üê homEquiv_naturality_right_symm, w]

theorem homEquiv_naturality_left_square_iff (f : X' ‚ü∂ X) (g : F.obj X ‚ü∂ Y')
    (h : F.obj X' ‚ü∂ Y) (k : Y ‚ü∂ Y') :
    (f ‚â´ (adj.homEquiv X Y') g = (adj.homEquiv X' Y) h ‚â´ G.map k) ‚Üî
      (F.map f ‚â´ g = h ‚â´ k) :=
  ‚ü®fun w ‚Ü¶ by simpa only [Equiv.symm_apply_apply]
      using homEquiv_naturality_right_square adj _ _ _ _ w,
    homEquiv_naturality_left_square adj f g h k‚ü©

theorem homEquiv_naturality_right_square_iff (f : X' ‚ü∂ X) (g : X ‚ü∂ G.obj Y')
    (h : X' ‚ü∂ G.obj Y) (k : Y ‚ü∂ Y') :
    (F.map f ‚â´ (adj.homEquiv X Y').symm g = (adj.homEquiv X' Y).symm h ‚â´ k) ‚Üî
      (f ‚â´ g = h ‚â´ G.map k) :=
  ‚ü®fun w ‚Ü¶ by simpa only [Equiv.apply_symm_apply]
      using homEquiv_naturality_left_square adj _ _ _ _ w,
    homEquiv_naturality_right_square adj f g h k‚ü©

@[simp]
theorem left_triangle : whiskerRight adj.unit F ‚â´ whiskerLeft F adj.counit = ùüô _ := by
  ext; simp

@[simp]
theorem right_triangle : whiskerLeft G adj.unit ‚â´ whiskerRight adj.counit G = ùüô _ := by
  ext; simp

@[reassoc (attr := simp)]
theorem counit_naturality {X Y : D} (f : X ‚ü∂ Y) :
    F.map (G.map f) ‚â´ adj.counit.app Y = adj.counit.app X ‚â´ f :=
  adj.counit.naturality f

@[reassoc (attr := simp)]
theorem unit_naturality {X Y : C} (f : X ‚ü∂ Y) :
    adj.unit.app X ‚â´ G.map (F.map f) = f ‚â´ adj.unit.app Y :=
  (adj.unit.naturality f).symm

lemma unit_comp_map_eq_iff {A : C} {B : D} (f : F.obj A ‚ü∂ B) (g : A ‚ü∂ G.obj B) :
    adj.unit.app A ‚â´ G.map f = g ‚Üî f = F.map g ‚â´ adj.counit.app B :=
  ‚ü®fun h => by simp [‚Üê h], fun h => by simp [h]‚ü©

lemma eq_unit_comp_map_iff {A : C} {B : D} (f : F.obj A ‚ü∂ B) (g : A ‚ü∂ G.obj B) :
    g = adj.unit.app A ‚â´ G.map f ‚Üî F.map g ‚â´ adj.counit.app B = f :=
  ‚ü®fun h => by simp [h], fun h => by simp [‚Üê h]‚ü©

theorem homEquiv_apply_eq {A : C} {B : D} (f : F.obj A ‚ü∂ B) (g : A ‚ü∂ G.obj B) :
    adj.homEquiv A B f = g ‚Üî f = (adj.homEquiv A B).symm g :=
  unit_comp_map_eq_iff adj f g

theorem eq_homEquiv_apply {A : C} {B : D} (f : F.obj A ‚ü∂ B) (g : A ‚ü∂ G.obj B) :
    g = adj.homEquiv A B f ‚Üî (adj.homEquiv A B).symm g = f :=
  eq_unit_comp_map_iff adj f g

/--  If `adj : F ‚ä£ G`, and `X : C`, then `F.obj X` corepresents `Y ‚Ü¶ (X ‚ü∂ G.obj Y)`-/
@[simps]
def corepresentableBy (X : C) :
    (G ‚ãô coyoneda.obj (Opposite.op X)).CorepresentableBy (F.obj X) where
  homEquiv := adj.homEquiv _ _
  homEquiv_comp := by aesop_cat

/--  If `adj : F ‚ä£ G`, and `Y : D`, then `G.obj Y` represents `X ‚Ü¶ (F.obj X ‚ü∂ Y)`-/
@[simps]
def representableBy (Y : D) :
    (F.op ‚ãô yoneda.obj Y).RepresentableBy (G.obj Y) where
  homEquiv := (adj.homEquiv _ _).symm
  homEquiv_comp := by aesop_cat

end

end Adjunction

namespace Adjunction

/--
This is an auxiliary data structure useful for constructing adjunctions.
See `Adjunction.mk'`. This structure won't typically be used anywhere else.
-/
structure CoreHomEquivUnitCounit (F : C ‚•§ D) (G : D ‚•§ C) where
  /-- The equivalence between `Hom (F X) Y` and `Hom X (G Y)` coming from an adjunction -/
  homEquiv : ‚àÄ X Y, (F.obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ G.obj Y)
  /-- The unit of an adjunction -/
  unit : ùü≠ C ‚ü∂ F ‚ãô G
  /-- The counit of an adjunction -/
  counit : G ‚ãô F ‚ü∂ ùü≠ D
  /-- The relationship between the unit and hom set equivalence of an adjunction -/
  homEquiv_unit : ‚àÄ {X Y f}, (homEquiv X Y) f = unit.app X ‚â´ G.map f := by aesop_cat
  /-- The relationship between the counit and hom set equivalence of an adjunction -/
  homEquiv_counit : ‚àÄ {X Y g}, (homEquiv X Y).symm g = F.map g ‚â´ counit.app Y := by aesop_cat

/-- This is an auxiliary data structure useful for constructing adjunctions.
See `Adjunction.mkOfHomEquiv`.
This structure won't typically be used anywhere else.
-/
-- Porting note (https://github.com/leanprover-community/mathlib4/issues/5171): `has_nonempty_instance` linter not ported yet
-- @[nolint has_nonempty_instance]
structure CoreHomEquiv (F : C ‚•§ D) (G : D ‚•§ C) where
  /-- The equivalence between `Hom (F X) Y` and `Hom X (G Y)` -/
  homEquiv : ‚àÄ X Y, (F.obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ G.obj Y)
  /-- The property that describes how `homEquiv.symm` transforms compositions `X' ‚ü∂ X ‚ü∂ G Y` -/
  homEquiv_naturality_left_symm :
    ‚àÄ {X' X Y} (f : X' ‚ü∂ X) (g : X ‚ü∂ G.obj Y),
      (homEquiv X' Y).symm (f ‚â´ g) = F.map f ‚â´ (homEquiv X Y).symm g := by
    aesop_cat
  /-- The property that describes how `homEquiv` transforms compositions `F X ‚ü∂ Y ‚ü∂ Y'` -/
  homEquiv_naturality_right :
    ‚àÄ {X Y Y'} (f : F.obj X ‚ü∂ Y) (g : Y ‚ü∂ Y'),
      (homEquiv X Y') (f ‚â´ g) = (homEquiv X Y) f ‚â´ G.map g := by
    aesop_cat

namespace CoreHomEquiv

attribute [simp] homEquiv_naturality_left_symm homEquiv_naturality_right

variable {F : C ‚•§ D} {G : D ‚•§ C} (adj : CoreHomEquiv F G) {X' X : C} {Y Y' : D}

theorem homEquiv_naturality_left (f : X' ‚ü∂ X) (g : F.obj X ‚ü∂ Y) :
    (adj.homEquiv X' Y) (F.map f ‚â´ g) = f ‚â´ (adj.homEquiv X Y) g := by
  rw [‚Üê Equiv.eq_symm_apply]; simp

theorem homEquiv_naturality_right_symm (f : X ‚ü∂ G.obj Y) (g : Y ‚ü∂ Y') :
    (adj.homEquiv X Y').symm (f ‚â´ G.map g) = (adj.homEquiv X Y).symm f ‚â´ g := by
  rw [Equiv.symm_apply_eq]; simp

end CoreHomEquiv

/-- This is an auxiliary data structure useful for constructing adjunctions.
See `Adjunction.mkOfUnitCounit`.
This structure won't typically be used anywhere else.
-/
-- Porting note (https://github.com/leanprover-community/mathlib4/issues/5171): `has_nonempty_instance` linter not ported yet
-- @[nolint has_nonempty_instance]
structure CoreUnitCounit (F : C ‚•§ D) (G : D ‚•§ C) where
  /-- The unit of an adjunction between `F` and `G` -/
  unit : ùü≠ C ‚ü∂ F.comp G
  /-- The counit of an adjunction between `F` and `G`s -/
  counit : G.comp F ‚ü∂ ùü≠ D
  /-- Equality of the composition of the unit, associator, and counit with the identity
  `F ‚ü∂ (F G) F ‚ü∂ F (G F) ‚ü∂ F = NatTrans.id F` -/
  left_triangle :
    whiskerRight unit F ‚â´ (Functor.associator F G F).hom ‚â´ whiskerLeft F counit =
      NatTrans.id (ùü≠ C ‚ãô F) := by
    aesop_cat
  /-- Equality of the composition of the unit, associator, and counit with the identity
  `G ‚ü∂ G (F G) ‚ü∂ (F G) F ‚ü∂ G = NatTrans.id G` -/
  right_triangle :
    whiskerLeft G unit ‚â´ (Functor.associator G F G).inv ‚â´ whiskerRight counit G =
      NatTrans.id (G ‚ãô ùü≠ C) := by
    aesop_cat

namespace CoreUnitCounit

attribute [simp] left_triangle right_triangle

end CoreUnitCounit

variable {F : C ‚•§ D} {G : D ‚•§ C}

attribute [local simp] CoreHomEquivUnitCounit.homEquiv_unit CoreHomEquivUnitCounit.homEquiv_counit

/--
Construct an adjunction from the data of a `CoreHomEquivUnitCounit`, i.e. a hom set
equivalence, unit and counit natural transformations together with proofs of the equalities
`homEquiv_unit` and `homEquiv_counit` relating them to each other.
-/
@[simps]
def mk' (adj : CoreHomEquivUnitCounit F G) : F ‚ä£ G where
  unit := adj.unit
  counit := adj.counit
  left_triangle_components X := by
    rw [‚Üê adj.homEquiv_counit, (adj.homEquiv _ _).symm_apply_eq, adj.homEquiv_unit]
    simp
  right_triangle_components Y := by
    rw [‚Üê adj.homEquiv_unit, ‚Üê (adj.homEquiv _ _).eq_symm_apply, adj.homEquiv_counit]
    simp

lemma mk'_homEquiv (adj : CoreHomEquivUnitCounit F G) : (mk' adj).homEquiv = adj.homEquiv := by
  ext
  rw [homEquiv_unit, adj.homEquiv_unit, mk'_unit]

/-- Construct an adjunction between `F` and `G` out of a natural bijection between each
`F.obj X ‚ü∂ Y` and `X ‚ü∂ G.obj Y`. -/
@[simps!]
def mkOfHomEquiv (adj : CoreHomEquiv F G) : F ‚ä£ G :=
  mk' {
    unit :=
      { app := fun X => (adj.homEquiv X (F.obj X)) (ùüô (F.obj X))
        naturality := by
          intros
          simp [‚Üê adj.homEquiv_naturality_left, ‚Üê adj.homEquiv_naturality_right] }
    counit :=
      { app := fun Y => (adj.homEquiv _ _).invFun (ùüô (G.obj Y))
        naturality := by
          intros
          simp [‚Üê adj.homEquiv_naturality_left_symm, ‚Üê adj.homEquiv_naturality_right_symm] }
    homEquiv := adj.homEquiv
    homEquiv_unit := fun {X Y f} => by simp [‚Üê adj.homEquiv_naturality_right]
    homEquiv_counit := fun {X Y f} => by simp [‚Üê adj.homEquiv_naturality_left_symm] }

@[simp]
lemma mkOfHomEquiv_homEquiv (adj : CoreHomEquiv F G) :
    (mkOfHomEquiv adj).homEquiv = adj.homEquiv := by
  ext X Y g
  simp [mkOfHomEquiv, ‚Üê adj.homEquiv_naturality_right (ùüô _) g]

/-- Construct an adjunction between functors `F` and `G` given a unit and counit for the adjunction
satisfying the triangle identities. -/
@[simps!]
def mkOfUnitCounit (adj : CoreUnitCounit F G) : F ‚ä£ G where
  unit := adj.unit
  counit := adj.counit
  left_triangle_components X := by
    have := adj.left_triangle
    rw [NatTrans.ext_iff, funext_iff] at this
    simpa [-CoreUnitCounit.left_triangle] using this X
  right_triangle_components Y := by
    have := adj.right_triangle
    rw [NatTrans.ext_iff, funext_iff] at this
    simpa [-CoreUnitCounit.right_triangle] using this Y

/-- The adjunction between the identity functor on a category and itself. -/
def id : ùü≠ C ‚ä£ ùü≠ C where
  unit := ùüô _
  counit := ùüô _

-- Satisfy the inhabited linter.
instance : Inhabited (Adjunction (ùü≠ C) (ùü≠ C)) :=
  ‚ü®id‚ü©

/-- If F and G are naturally isomorphic functors, establish an equivalence of hom-sets. -/
@[simps]
def equivHomsetLeftOfNatIso {F F' : C ‚•§ D} (iso : F ‚âÖ F') {X : C} {Y : D} :
    (F.obj X ‚ü∂ Y) ‚âÉ (F'.obj X ‚ü∂ Y) where
  toFun f := iso.inv.app _ ‚â´ f
  invFun g := iso.hom.app _ ‚â´ g
  left_inv f := by simp
  right_inv g := by simp

/-- If G and H are naturally isomorphic functors, establish an equivalence of hom-sets. -/
@[simps]
def equivHomsetRightOfNatIso {G G' : D ‚•§ C} (iso : G ‚âÖ G') {X : C} {Y : D} :
    (X ‚ü∂ G.obj Y) ‚âÉ (X ‚ü∂ G'.obj Y) where
  toFun f := f ‚â´ iso.hom.app _
  invFun g := g ‚â´ iso.inv.app _
  left_inv f := by simp
  right_inv g := by simp

/-- Transport an adjunction along a natural isomorphism on the left. -/
def ofNatIsoLeft {F G : C ‚•§ D} {H : D ‚•§ C} (adj : F ‚ä£ H) (iso : F ‚âÖ G) : G ‚ä£ H :=
  Adjunction.mkOfHomEquiv
    { homEquiv := fun X Y => (equivHomsetLeftOfNatIso iso.symm).trans (adj.homEquiv X Y) }

/-- Transport an adjunction along a natural isomorphism on the right. -/
def ofNatIsoRight {F : C ‚•§ D} {G H : D ‚•§ C} (adj : F ‚ä£ G) (iso : G ‚âÖ H) : F ‚ä£ H :=
  Adjunction.mkOfHomEquiv
    { homEquiv := fun X Y => (adj.homEquiv X Y).trans (equivHomsetRightOfNatIso iso) }

/-- The isomorpism which an adjunction `F ‚ä£ G` induces on `G ‚ãô yoneda`. This states that
`Adjunction.homEquiv` is natural in both arguments. -/
@[simps!]
def compYonedaIso {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÅ} D]
    {F : C ‚•§ D} {G : D ‚•§ C} (adj : F ‚ä£ G) :
    G ‚ãô yoneda ‚âÖ yoneda ‚ãô (whiskeringLeft _ _ _).obj F.op :=
  NatIso.ofComponents fun X => NatIso.ofComponents fun Y => (adj.homEquiv Y.unop X).toIso.symm

/-- The isomorpism which an adjunction `F ‚ä£ G` induces on `F.op ‚ãô coyoneda`. This states that
`Adjunction.homEquiv` is natural in both arguments. -/
@[simps!]
def compCoyonedaIso {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÅ} D]
    {F : C ‚•§ D} {G : D ‚•§ C} (adj : F ‚ä£ G) :
    F.op ‚ãô coyoneda ‚âÖ coyoneda ‚ãô (whiskeringLeft _ _ _).obj G :=
  NatIso.ofComponents fun X => NatIso.ofComponents fun Y => (adj.homEquiv X.unop Y).toIso

section

variable {E : Type u‚ÇÉ} [‚Ñ∞ : Category.{v‚ÇÉ} E] {H : D ‚•§ E} {I : E ‚•§ D}
  (adj‚ÇÅ : F ‚ä£ G) (adj‚ÇÇ : H ‚ä£ I)

/-- Composition of adjunctions.

See <https://stacks.math.columbia.edu/tag/0DV0>.
-/
def comp : F ‚ãô H ‚ä£ I ‚ãô G :=
  mk' {
    homEquiv := fun _ _ ‚Ü¶ Equiv.trans (adj‚ÇÇ.homEquiv _ _) (adj‚ÇÅ.homEquiv _ _)
    unit := adj‚ÇÅ.unit ‚â´ (whiskerLeft F <| whiskerRight adj‚ÇÇ.unit G) ‚â´ (Functor.associator _ _ _).inv
    counit :=
      (Functor.associator _ _ _).hom ‚â´ (whiskerLeft I <| whiskerRight adj‚ÇÅ.counit H) ‚â´ adj‚ÇÇ.counit }

@[simp, reassoc]
lemma comp_unit_app (X : C) :
    (adj‚ÇÅ.comp adj‚ÇÇ).unit.app X = adj‚ÇÅ.unit.app X ‚â´ G.map (adj‚ÇÇ.unit.app (F.obj X)) := by
  simp [Adjunction.comp]

@[simp, reassoc]
lemma comp_counit_app (X : E) :
    (adj‚ÇÅ.comp adj‚ÇÇ).counit.app X = H.map (adj‚ÇÅ.counit.app (I.obj X)) ‚â´ adj‚ÇÇ.counit.app X := by
  simp [Adjunction.comp]

lemma comp_homEquiv :  (adj‚ÇÅ.comp adj‚ÇÇ).homEquiv =
    fun _ _ ‚Ü¶ Equiv.trans (adj‚ÇÇ.homEquiv _ _) (adj‚ÇÅ.homEquiv _ _) :=
  mk'_homEquiv _

end

section ConstructLeft

-- Construction of a left adjoint. In order to construct a left
-- adjoint to a functor G : D ‚Üí C, it suffices to give the object part
-- of a functor F : C ‚Üí D together with isomorphisms Hom(FX, Y) ‚âÉ
-- Hom(X, GY) natural in Y. The action of F on morphisms can be
-- constructed from this data.
variable {F_obj : C ‚Üí D}
variable (e : ‚àÄ X Y, (F_obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ G.obj Y))

/-- Construct a left adjoint functor to `G`, given the functor's value on objects `F_obj` and
a bijection `e` between `F_obj X ‚ü∂ Y` and `X ‚ü∂ G.obj Y` satisfying a naturality law
`he : ‚àÄ X Y Y' g h, e X Y' (h ‚â´ g) = e X Y h ‚â´ G.map g`.
Dual to `rightAdjointOfEquiv`. -/
@[simps!]
def leftAdjointOfEquiv (he : ‚àÄ X Y Y' g h, e X Y' (h ‚â´ g) = e X Y h ‚â´ G.map g) : C ‚•§ D where
  obj := F_obj
  map {X} {X'} f := (e X (F_obj X')).symm (f ‚â´ e X' (F_obj X') (ùüô _))
  map_comp := fun f f' => by
    rw [Equiv.symm_apply_eq, he, Equiv.apply_symm_apply]
    conv =>
      rhs
      rw [assoc, ‚Üê he, id_comp, Equiv.apply_symm_apply]
    simp

variable (he : ‚àÄ X Y Y' g h, e X Y' (h ‚â´ g) = e X Y h ‚â´ G.map g)

/-- Show that the functor given by `leftAdjointOfEquiv` is indeed left adjoint to `G`. Dual
to `adjunctionOfRightEquiv`. -/
@[simps!]
def adjunctionOfEquivLeft : leftAdjointOfEquiv e he ‚ä£ G :=
  mkOfHomEquiv
    { homEquiv := e
      homEquiv_naturality_left_symm := fun {X'} {X} {Y} f g => by
        have {X : C} {Y Y' : D} (f : X ‚ü∂ G.obj Y) (g : Y ‚ü∂ Y') :
            (e X Y').symm (f ‚â´ G.map g) = (e X Y).symm f ‚â´ g := by
          rw [Equiv.symm_apply_eq, he]; simp
        simp [‚Üê this, ‚Üê Equiv.apply_eq_iff_eq (e X' Y), ‚Üê he] }

end ConstructLeft

section ConstructRight

-- Construction of a right adjoint, analogous to the above.
variable {G_obj : D ‚Üí C}
variable (e : ‚àÄ X Y, (F.obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ G_obj Y))

private theorem he'' (he : ‚àÄ X' X Y f g, e X' Y (F.map f ‚â´ g) = f ‚â´ e X Y g)
    {X' X Y} (f g) : F.map f ‚â´ (e X Y).symm g = (e X' Y).symm (f ‚â´ g) := by
  rw [Equiv.eq_symm_apply, he]; simp

/-- Construct a right adjoint functor to `F`, given the functor's value on objects `G_obj` and
a bijection `e` between `F.obj X ‚ü∂ Y` and `X ‚ü∂ G_obj Y` satisfying a naturality law
`he : ‚àÄ X Y Y' g h, e X' Y (F.map f ‚â´ g) = f ‚â´ e X Y g`.
Dual to `leftAdjointOfEquiv`. -/
@[simps!]
def rightAdjointOfEquiv (he : ‚àÄ X' X Y f g, e X' Y (F.map f ‚â´ g) = f ‚â´ e X Y g) : D ‚•§ C where
  obj := G_obj
  map {Y} {Y'} g := (e (G_obj Y) Y') ((e (G_obj Y) Y).symm (ùüô _) ‚â´ g)
  map_comp := fun {Y} {Y'} {Y''} g g' => by
    rw [‚Üê Equiv.eq_symm_apply, ‚Üê he'' e he, Equiv.symm_apply_apply]
    conv =>
      rhs
      rw [‚Üê assoc, he'' e he, comp_id, Equiv.symm_apply_apply]
    simp

/-- Show that the functor given by `rightAdjointOfEquiv` is indeed right adjoint to `F`. Dual
to `adjunctionOfEquivRight`. -/
@[simps!]
def adjunctionOfEquivRight (he : ‚àÄ X' X Y f g, e X' Y (F.map f ‚â´ g) = f ‚â´ e X Y g) :
    F ‚ä£ (rightAdjointOfEquiv e he) :=
  mkOfHomEquiv
    { homEquiv := e
      homEquiv_naturality_left_symm := by
        intro X X' Y f g; rw [Equiv.symm_apply_eq]; simp [he]
      homEquiv_naturality_right := by
        intro X Y Y' g h
        simp [‚Üê he, reassoc_of% (he'' e)] }

end ConstructRight

/--
If the unit and counit of a given adjunction are (pointwise) isomorphisms, then we can upgrade the
adjunction to an equivalence.
-/
@[simps!]
noncomputable def toEquivalence (adj : F ‚ä£ G) [‚àÄ X, IsIso (adj.unit.app X)]
    [‚àÄ Y, IsIso (adj.counit.app Y)] : C ‚âå D where
  functor := F
  inverse := G
  unitIso := NatIso.ofComponents fun X => asIso (adj.unit.app X)
  counitIso := NatIso.ofComponents fun Y => asIso (adj.counit.app Y)

end Adjunction

open Adjunction

/--
If the unit and counit for the adjunction corresponding to a right adjoint functor are (pointwise)
isomorphisms, then the functor is an equivalence of categories.
-/
lemma Functor.isEquivalence_of_isRightAdjoint (G : C ‚•§ D) [IsRightAdjoint G]
    [‚àÄ X, IsIso ((Adjunction.ofIsRightAdjoint G).unit.app X)]
    [‚àÄ Y, IsIso ((Adjunction.ofIsRightAdjoint G).counit.app Y)] : G.IsEquivalence :=
  (Adjunction.ofIsRightAdjoint G).toEquivalence.isEquivalence_inverse

namespace Equivalence

variable (e : C ‚âå D)

/-- The adjunction given by an equivalence of categories. (To obtain the opposite adjunction,
simply use `e.symm.toAdjunction`. -/
@[simps]
def toAdjunction : e.functor ‚ä£ e.inverse where
  unit := e.unit
  counit := e.counit

lemma isLeftAdjoint_functor : e.functor.IsLeftAdjoint where
  exists_rightAdjoint := ‚ü®_, ‚ü®e.toAdjunction‚ü©‚ü©

lemma isRightAdjoint_inverse : e.inverse.IsRightAdjoint where
  exists_leftAdjoint := ‚ü®_, ‚ü®e.toAdjunction‚ü©‚ü©

lemma isLeftAdjoint_inverse : e.inverse.IsLeftAdjoint :=
  e.symm.isLeftAdjoint_functor

lemma isRightAdjoint_functor : e.functor.IsRightAdjoint :=
  e.symm.isRightAdjoint_inverse

lemma trans_toAdjunction {E : Type*} [Category E] (e' : D ‚âå E) :
    (e.trans e').toAdjunction = e.toAdjunction.comp e'.toAdjunction := by
  ext
  simp [trans]

end Equivalence

namespace Functor

/-- If `F` and `G` are left adjoints then `F ‚ãô G` is a left adjoint too. -/
instance isLeftAdjoint_comp {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] (F : C ‚•§ D) (G : D ‚•§ E)
    [F.IsLeftAdjoint] [G.IsLeftAdjoint] : (F ‚ãô G).IsLeftAdjoint where
  exists_rightAdjoint :=
    ‚ü®_, ‚ü®(Adjunction.ofIsLeftAdjoint F).comp (Adjunction.ofIsLeftAdjoint G)‚ü©‚ü©

/-- If `F` and `G` are right adjoints then `F ‚ãô G` is a right adjoint too. -/
instance isRightAdjoint_comp {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] {F : C ‚•§ D} {G : D ‚•§ E}
    [IsRightAdjoint F] [IsRightAdjoint G] : IsRightAdjoint (F ‚ãô G) where
  exists_leftAdjoint :=
    ‚ü®_, ‚ü®(Adjunction.ofIsRightAdjoint G).comp (Adjunction.ofIsRightAdjoint F)‚ü©‚ü©

/-- Transport being a right adjoint along a natural isomorphism. -/
lemma isRightAdjoint_of_iso {F G : C ‚•§ D} (h : F ‚âÖ G) [F.IsRightAdjoint] :
    IsRightAdjoint G where
  exists_leftAdjoint := ‚ü®_, ‚ü®(Adjunction.ofIsRightAdjoint F).ofNatIsoRight h‚ü©‚ü©

/-- Transport being a left adjoint along a natural isomorphism. -/
lemma isLeftAdjoint_of_iso {F G : C ‚•§ D} (h : F ‚âÖ G) [IsLeftAdjoint F] :
    IsLeftAdjoint G where
  exists_rightAdjoint := ‚ü®_, ‚ü®(Adjunction.ofIsLeftAdjoint F).ofNatIsoLeft h‚ü©‚ü©


/-- An equivalence `E` is left adjoint to its inverse. -/
noncomputable def adjunction (E : C ‚•§ D) [IsEquivalence E] : E ‚ä£ E.inv :=
  E.asEquivalence.toAdjunction

/-- If `F` is an equivalence, it's a left adjoint. -/
instance (priority := 10) isLeftAdjoint_of_isEquivalence {F : C ‚•§ D} [F.IsEquivalence] :
    IsLeftAdjoint F :=
  F.asEquivalence.isLeftAdjoint_functor

/-- If `F` is an equivalence, it's a right adjoint. -/
instance (priority := 10) isRightAdjoint_of_isEquivalence {F : C ‚•§ D} [F.IsEquivalence] :
    IsRightAdjoint F :=
  F.asEquivalence.isRightAdjoint_functor

end Functor

end CategoryTheory
