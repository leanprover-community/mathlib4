/-
Copyright (c) 2024 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson
-/
import Mathlib.CategoryTheory.Adjunction.Unique
import Mathlib.CategoryTheory.Monad.Adjunction
/-!

# Adjoint triples

This file concerns adjoint triples `F ‚ä£ G ‚ä£ H` of functors `F H : C ‚•§ D`, `G : D ‚•§ C`.

Currently, the only result is that `F`¬†is fully faithful if and only if `H` is fully faithful.
-/

namespace CategoryTheory.Adjunction

variable {C D : Type*} [Category C] [Category D]
variable {F H : C ‚•§ D} {G : D ‚•§ C}
variable (adj‚ÇÅ : F ‚ä£ G) (adj‚ÇÇ : G ‚ä£ H)

lemma isIso_unit_iff_isIso_counit : IsIso adj‚ÇÅ.unit ‚Üî IsIso adj‚ÇÇ.counit := by
  let adj : F ‚ãô G ‚ä£ H ‚ãô G := adj‚ÇÅ.comp adj‚ÇÇ
  constructor
  ¬∑ intro h
    let idAdj : ùü≠ C ‚ä£ H ‚ãô G := adj.ofNatIsoLeft (asIso adj‚ÇÅ.unit).symm
    exact adj‚ÇÇ.isIso_counit_of_iso (idAdj.rightAdjointUniq id)
  ¬∑ intro h
    let adjId : F ‚ãô G ‚ä£ ùü≠ C := adj.ofNatIsoRight (asIso adj‚ÇÇ.counit)
    exact adj‚ÇÅ.isIso_unit_of_iso (adjId.leftAdjointUniq id)

/--
Given an adjoint triple `F ‚ä£ G ‚ä£ H`, the left adjoint `F`¬†is fully faithful if and only if the
right adjoint `H` is fully faithful.
-/
noncomputable def fullyFaithfulEquiv : F.FullyFaithful ‚âÉ H.FullyFaithful where
  toFun h :=
    haveI := h.full
    haveI := h.faithful
    haveI : IsIso adj‚ÇÇ.counit := by
      rw [‚Üê adj‚ÇÅ.isIso_unit_iff_isIso_counit adj‚ÇÇ]
      infer_instance
    adj‚ÇÇ.fullyFaithfulROfIsIsoCounit
  invFun h :=
    haveI := h.full
    haveI := h.faithful
    haveI : IsIso adj‚ÇÅ.unit := by
      rw [adj‚ÇÅ.isIso_unit_iff_isIso_counit adj‚ÇÇ]
      infer_instance
    adj‚ÇÅ.fullyFaithfulLOfIsIsoUnit
  left_inv _ := Subsingleton.elim _ _
  right_inv _ := Subsingleton.elim _ _

end CategoryTheory.Adjunction
