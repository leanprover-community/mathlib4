/-
Copyright (c) 2019 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Algebra.Hom.Equiv.Units.Basic
import Mathlib.CategoryTheory.Endomorphism

#align_import category_theory.conj from "leanprover-community/mathlib"@"32253a1a1071173b33dc7d6a218cf722c6feb514"

/-!
# Conjugate morphisms by isomorphisms

An isomorphism `Œ± : X ‚âÖ Y` defines
- a monoid isomorphism
  `CategoryTheory.Iso.conj : End X ‚âÉ* End Y` by `Œ±.conj f = Œ±.inv ‚â´ f ‚â´ Œ±.hom`;
- a group isomorphism `CategoryTheory.Iso.conjAut : Aut X ‚âÉ* Aut Y` by
  `Œ±.conjAut f = Œ±.symm ‚â™‚â´ f ‚â™‚â´ Œ±`.

For completeness, we also define
`CategoryTheory.Iso.homCongr : (X ‚âÖ X‚ÇÅ) ‚Üí (Y ‚âÖ Y‚ÇÅ) ‚Üí (X ‚ü∂ Y) ‚âÉ (X‚ÇÅ ‚ü∂ Y‚ÇÅ)`,
cf. `Equiv.arrowCongr`.
-/


universe v u

namespace CategoryTheory

namespace Iso

variable {C : Type u} [Category.{v} C]

/-- If `X` is isomorphic to `X‚ÇÅ` and `Y` is isomorphic to `Y‚ÇÅ`, then
there is a natural bijection between `X ‚ü∂ Y` and `X‚ÇÅ ‚ü∂ Y‚ÇÅ`. See also `Equiv.arrowCongr`. -/
def homCongr {X Y X‚ÇÅ Y‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) : (X ‚ü∂ Y) ‚âÉ (X‚ÇÅ ‚ü∂ Y‚ÇÅ) where
  toFun f := Œ±.inv ‚â´ f ‚â´ Œ≤.hom
  invFun f := Œ±.hom ‚â´ f ‚â´ Œ≤.inv
  left_inv f :=
    show Œ±.hom ‚â´ (Œ±.inv ‚â´ f ‚â´ Œ≤.hom) ‚â´ Œ≤.inv = f by
      rw [Category.assoc, Category.assoc, Œ≤.hom_inv_id, Œ±.hom_inv_id_assoc, Category.comp_id]
  right_inv f :=
    show Œ±.inv ‚â´ (Œ±.hom ‚â´ f ‚â´ Œ≤.inv) ‚â´ Œ≤.hom = f by
      rw [Category.assoc, Category.assoc, Œ≤.inv_hom_id, Œ±.inv_hom_id_assoc, Category.comp_id]
#align category_theory.iso.hom_congr CategoryTheory.Iso.homCongr

-- @[simp, nolint simpNF] Porting note: dsimp can not prove this
@[simp]
theorem homCongr_apply {X Y X‚ÇÅ Y‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) (f : X ‚ü∂ Y) :
    Œ±.homCongr Œ≤ f = Œ±.inv ‚â´ f ‚â´ Œ≤.hom := by
  rfl
#align category_theory.iso.hom_congr_apply CategoryTheory.Iso.homCongr_apply

theorem homCongr_comp {X Y Z X‚ÇÅ Y‚ÇÅ Z‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) (Œ≥ : Z ‚âÖ Z‚ÇÅ) (f : X ‚ü∂ Y)
    (g : Y ‚ü∂ Z) : Œ±.homCongr Œ≥ (f ‚â´ g) = Œ±.homCongr Œ≤ f ‚â´ Œ≤.homCongr Œ≥ g := by simp
#align category_theory.iso.hom_congr_comp CategoryTheory.Iso.homCongr_comp

/- Porting note: removed `@[simp]`; simp can prove this -/
theorem homCongr_refl {X Y : C} (f : X ‚ü∂ Y) : (Iso.refl X).homCongr (Iso.refl Y) f = f := by simp
#align category_theory.iso.hom_congr_refl CategoryTheory.Iso.homCongr_refl

/- Porting note: removed `@[simp]`; simp can prove this -/
theorem homCongr_trans {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ X‚ÇÉ Y‚ÇÉ : C} (Œ±‚ÇÅ : X‚ÇÅ ‚âÖ X‚ÇÇ) (Œ≤‚ÇÅ : Y‚ÇÅ ‚âÖ Y‚ÇÇ) (Œ±‚ÇÇ : X‚ÇÇ ‚âÖ X‚ÇÉ)
    (Œ≤‚ÇÇ : Y‚ÇÇ ‚âÖ Y‚ÇÉ) (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) :
    (Œ±‚ÇÅ ‚â™‚â´ Œ±‚ÇÇ).homCongr (Œ≤‚ÇÅ ‚â™‚â´ Œ≤‚ÇÇ) f = (Œ±‚ÇÅ.homCongr Œ≤‚ÇÅ).trans (Œ±‚ÇÇ.homCongr Œ≤‚ÇÇ) f := by simp
#align category_theory.iso.hom_congr_trans CategoryTheory.Iso.homCongr_trans

@[simp]
theorem homCongr_symm {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : C} (Œ± : X‚ÇÅ ‚âÖ X‚ÇÇ) (Œ≤ : Y‚ÇÅ ‚âÖ Y‚ÇÇ) :
    (Œ±.homCongr Œ≤).symm = Œ±.symm.homCongr Œ≤.symm :=
  rfl
#align category_theory.iso.hom_congr_symm CategoryTheory.Iso.homCongr_symm

variable {X Y : C} (Œ± : X ‚âÖ Y)

/-- An isomorphism between two objects defines a monoid isomorphism between their
monoid of endomorphisms. -/
def conj : End X ‚âÉ* End Y :=
  { homCongr Œ± Œ± with map_mul' := fun f g => homCongr_comp Œ± Œ± Œ± g f }
#align category_theory.iso.conj CategoryTheory.Iso.conj

theorem conj_apply (f : End X) : Œ±.conj f = Œ±.inv ‚â´ f ‚â´ Œ±.hom :=
  rfl
#align category_theory.iso.conj_apply CategoryTheory.Iso.conj_apply

@[simp]
theorem conj_comp (f g : End X) : Œ±.conj (f ‚â´ g) = Œ±.conj f ‚â´ Œ±.conj g :=
  Œ±.conj.map_mul g f
#align category_theory.iso.conj_comp CategoryTheory.Iso.conj_comp

@[simp]
theorem conj_id : Œ±.conj (ùüô X) = ùüô Y :=
  Œ±.conj.map_one
#align category_theory.iso.conj_id CategoryTheory.Iso.conj_id

@[simp]
theorem refl_conj (f : End X) : (Iso.refl X).conj f = f := by
  rw [conj_apply, Iso.refl_inv, Iso.refl_hom, Category.id_comp, Category.comp_id]
#align category_theory.iso.refl_conj CategoryTheory.Iso.refl_conj

@[simp]
theorem trans_conj {Z : C} (Œ≤ : Y ‚âÖ Z) (f : End X) : (Œ± ‚â™‚â´ Œ≤).conj f = Œ≤.conj (Œ±.conj f) :=
  homCongr_trans Œ± Œ± Œ≤ Œ≤ f
#align category_theory.iso.trans_conj CategoryTheory.Iso.trans_conj

@[simp]
theorem symm_self_conj (f : End X) : Œ±.symm.conj (Œ±.conj f) = f := by
  rw [‚Üê trans_conj, Œ±.self_symm_id, refl_conj]
#align category_theory.iso.symm_self_conj CategoryTheory.Iso.symm_self_conj

@[simp]
theorem self_symm_conj (f : End Y) : Œ±.conj (Œ±.symm.conj f) = f :=
  Œ±.symm.symm_self_conj f
#align category_theory.iso.self_symm_conj CategoryTheory.Iso.self_symm_conj

/- Porting note: removed `@[simp]`; simp can prove this -/
theorem conj_pow (f : End X) (n : ‚Ñï) : Œ±.conj (f ^ n) = Œ±.conj f ^ n :=
  Œ±.conj.toMonoidHom.map_pow f n
#align category_theory.iso.conj_pow CategoryTheory.Iso.conj_pow

-- porting note: todo: change definition so that `conjAut_apply` becomes a `rfl`?
/-- `conj` defines a group isomorphisms between groups of automorphisms -/
def conjAut : Aut X ‚âÉ* Aut Y :=
  (Aut.unitsEndEquivAut X).symm.trans <| (Units.mapEquiv Œ±.conj).trans <| Aut.unitsEndEquivAut Y
set_option linter.uppercaseLean3 false in
#align category_theory.iso.conj_Aut CategoryTheory.Iso.conjAut

theorem conjAut_apply (f : Aut X) : Œ±.conjAut f = Œ±.symm ‚â™‚â´ f ‚â™‚â´ Œ± := by aesop_cat
set_option linter.uppercaseLean3 false in
#align category_theory.iso.conj_Aut_apply CategoryTheory.Iso.conjAut_apply

@[simp]
theorem conjAut_hom (f : Aut X) : (Œ±.conjAut f).hom = Œ±.conj f.hom :=
  rfl
set_option linter.uppercaseLean3 false in
#align category_theory.iso.conj_Aut_hom CategoryTheory.Iso.conjAut_hom

@[simp]
theorem trans_conjAut {Z : C} (Œ≤ : Y ‚âÖ Z) (f : Aut X) :
    (Œ± ‚â™‚â´ Œ≤).conjAut f = Œ≤.conjAut (Œ±.conjAut f) := by
  simp only [conjAut_apply, Iso.trans_symm, Iso.trans_assoc]
set_option linter.uppercaseLean3 false in
#align category_theory.iso.trans_conj_Aut CategoryTheory.Iso.trans_conjAut

/- Porting note: removed `@[simp]`; simp can prove this -/
theorem conjAut_mul (f g : Aut X) : Œ±.conjAut (f * g) = Œ±.conjAut f * Œ±.conjAut g :=
  Œ±.conjAut.map_mul f g
set_option linter.uppercaseLean3 false in
#align category_theory.iso.conj_Aut_mul CategoryTheory.Iso.conjAut_mul

@[simp]
theorem conjAut_trans (f g : Aut X) : Œ±.conjAut (f ‚â™‚â´ g) = Œ±.conjAut f ‚â™‚â´ Œ±.conjAut g :=
  conjAut_mul Œ± g f
set_option linter.uppercaseLean3 false in
#align category_theory.iso.conj_Aut_trans CategoryTheory.Iso.conjAut_trans

/- Porting note: removed `@[simp]`; simp can prove this -/
theorem conjAut_pow (f : Aut X) (n : ‚Ñï) : Œ±.conjAut (f ^ n) = Œ±.conjAut f ^ n :=
  Œ±.conjAut.toMonoidHom.map_pow f n
set_option linter.uppercaseLean3 false in
#align category_theory.iso.conj_Aut_pow CategoryTheory.Iso.conjAut_pow

/- Porting note: removed `@[simp]`; simp can prove this -/
theorem conjAut_zpow (f : Aut X) (n : ‚Ñ§) : Œ±.conjAut (f ^ n) = Œ±.conjAut f ^ n :=
  Œ±.conjAut.toMonoidHom.map_zpow f n
set_option linter.uppercaseLean3 false in
#align category_theory.iso.conj_Aut_zpow CategoryTheory.Iso.conjAut_zpow

end Iso

namespace Functor

universe v‚ÇÅ u‚ÇÅ

variable {C : Type u} [Category.{v} C] {D : Type u‚ÇÅ} [Category.{v‚ÇÅ} D] (F : C ‚•§ D)

theorem map_homCongr {X Y X‚ÇÅ Y‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) (f : X ‚ü∂ Y) :
    F.map (Iso.homCongr Œ± Œ≤ f) = Iso.homCongr (F.mapIso Œ±) (F.mapIso Œ≤) (F.map f) := by simp
#align category_theory.functor.map_hom_congr CategoryTheory.Functor.map_homCongr

theorem map_conj {X Y : C} (Œ± : X ‚âÖ Y) (f : End X) :
    F.map (Œ±.conj f) = (F.mapIso Œ±).conj (F.map f) :=
  map_homCongr F Œ± Œ± f
#align category_theory.functor.map_conj CategoryTheory.Functor.map_conj

theorem map_conjAut (F : C ‚•§ D) {X Y : C} (Œ± : X ‚âÖ Y) (f : Aut X) :
    F.mapIso (Œ±.conjAut f) = (F.mapIso Œ±).conjAut (F.mapIso f) := by
  ext; simp only [mapIso_hom, Iso.conjAut_hom, F.map_conj]
set_option linter.uppercaseLean3 false in
#align category_theory.functor.map_conj_Aut CategoryTheory.Functor.map_conjAut

-- alternative proof: by simp only [Iso.conjAut_apply, F.mapIso_trans, F.mapIso_symm]
end Functor

end CategoryTheory
