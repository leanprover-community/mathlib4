/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.CategoryTheory.Limits.Shapes.CommSq
import Mathlib.CategoryTheory.Limits.Shapes.StrictInitial
import Mathlib.CategoryTheory.Limits.Shapes.Types
import Mathlib.Topology.Category.TopCat.Limits.Pullbacks
import Mathlib.CategoryTheory.Limits.FunctorCategory
import Mathlib.CategoryTheory.Limits.Constructions.FiniteProductsOfBinaryProducts
import Mathlib.CategoryTheory.Limits.VanKampen

#align_import category_theory.extensive from "leanprover-community/mathlib"@"178a32653e369dce2da68dc6b2694e385d484ef1"

/-!

# Extensive categories

## Main definitions
- `CategoryTheory.FinitaryExtensive`: A category is (finitary) extensive if it has finite
  coproducts, and binary coproducts are van Kampen.

## Main Results
- `CategoryTheory.hasStrictInitialObjects_of_finitaryExtensive`: The initial object
  in extensive categories is strict.
- `CategoryTheory.FinitaryExtensive.mono_inr_of_isColimit`: Coproduct injections are monic in
  extensive categories.
- `CategoryTheory.BinaryCofan.isPullback_initial_to_of_isVanKampen`: In extensive categories,
  sums are disjoint, i.e. the pullback of `X ‚ü∂ X ‚®ø Y` and `Y ‚ü∂ X ‚®ø Y` is the initial object.
- `CategoryTheory.types.finitaryExtensive`: The category of types is extensive.
- `CategoryTheory.FinitaryExtensive_TopCat`:
  The category `Top` is extensive.
- `CategoryTheory.FinitaryExtensive_functor`: The category `C ‚•§ D` is extensive if `D`
  has all pullbacks and is extensive.
- `CategoryTheory.FinitaryExtensive.isVanKampen_finiteCoproducts`: Finite coproducts in a
  finitary extensive category are van Kampen.
## TODO

Show that the following are finitary extensive:
- `Scheme`
- `AffineScheme` (`CommRing·µí·µñ`)

## References
- https://ncatlab.org/nlab/show/extensive+category
- [Carboni et al, Introduction to extensive and distributive categories][CARBONI1993145]

-/


open CategoryTheory.Limits

namespace CategoryTheory

universe v' u' v u v'' u''

variable {J : Type v'} [Category.{u'} J] {C : Type u} [Category.{v} C]
variable {D : Type u''} [Category.{v''} D]

section Extensive

variable {X Y : C}

/-- A category has pullback of inclusions if it has all pullbacks along coproduct injections. -/
class HasPullbacksOfInclusions (C : Type u) [Category.{v} C] [HasBinaryCoproducts C] : Prop where
  [hasPullbackInl : ‚àÄ {X Y Z : C} (f : Z ‚ü∂ X ‚®ø Y), HasPullback coprod.inl f]

attribute [instance] HasPullbacksOfInclusions.hasPullbackInl

/--
A functor preserves pullback of inclusions if it preserves all pullbacks along coproduct injections.
-/
class PreservesPullbacksOfInclusions {C : Type*} [Category C] {D : Type*} [Category D]
    (F : C ‚•§ D) [HasBinaryCoproducts C] where
  [preservesPullbackInl : ‚àÄ {X Y Z : C} (f : Z ‚ü∂ X ‚®ø Y), PreservesLimit (cospan coprod.inl f) F]

attribute [instance] PreservesPullbacksOfInclusions.preservesPullbackInl

/-- A category is (finitary) pre-extensive if it has finite coproducts,
and binary coproducts are universal. -/
class FinitaryPreExtensive (C : Type u) [Category.{v} C] : Prop where
  [hasFiniteCoproducts : HasFiniteCoproducts C]
  [hasPullbacksOfInclusions : HasPullbacksOfInclusions C]
  /-- In a finitary extensive category, all coproducts are van Kampen-/
  universal' : ‚àÄ {X Y : C} (c : BinaryCofan X Y), IsColimit c ‚Üí IsUniversalColimit c

attribute [instance] FinitaryPreExtensive.hasFiniteCoproducts
attribute [instance] FinitaryPreExtensive.hasPullbacksOfInclusions

/-- A category is (finitary) extensive if it has finite coproducts,
and binary coproducts are van Kampen. -/
class FinitaryExtensive (C : Type u) [Category.{v} C] : Prop where
  [hasFiniteCoproducts : HasFiniteCoproducts C]
  [hasPullbacksOfInclusions : HasPullbacksOfInclusions C]
  /-- In a finitary extensive category, all coproducts are van Kampen-/
  van_kampen' : ‚àÄ {X Y : C} (c : BinaryCofan X Y), IsColimit c ‚Üí IsVanKampenColimit c
#align category_theory.finitary_extensive CategoryTheory.FinitaryExtensive

attribute [instance] FinitaryExtensive.hasFiniteCoproducts
attribute [instance] FinitaryExtensive.hasPullbacksOfInclusions

theorem FinitaryExtensive.vanKampen [FinitaryExtensive C] {F : Discrete WalkingPair ‚•§ C}
    (c : Cocone F) (hc : IsColimit c) : IsVanKampenColimit c := by
  let X := F.obj ‚ü®WalkingPair.left‚ü©
  let Y := F.obj ‚ü®WalkingPair.right‚ü©
  have : F = pair X Y := by
    apply Functor.hext
    ¬∑ rintro ‚ü®‚ü®‚ü©‚ü© <;> rfl
    ¬∑ rintro ‚ü®‚ü®‚ü©‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : _ = j‚ü©‚ü© <;> simp
  clear_value X Y
  subst this
  exact FinitaryExtensive.van_kampen' c hc
#align category_theory.finitary_extensive.van_kampen CategoryTheory.FinitaryExtensive.vanKampen

namespace HasPullbacksOfInclusions

instance (priority := 100) [HasBinaryCoproducts C] [HasPullbacks C] :
    HasPullbacksOfInclusions C := ‚ü®‚ü©

variable [HasBinaryCoproducts C] [HasPullbacksOfInclusions C] {X Y Z : C} (f : Z ‚ü∂ X ‚®ø Y)

instance preservesPullbackInl' :
    HasPullback f coprod.inl :=
  hasPullback_symmetry _ _

instance hasPullbackInr' :
    HasPullback f coprod.inr := by
  have : IsPullback (ùüô _) (f ‚â´ (coprod.braiding X Y).hom) f (coprod.braiding Y X).hom :=
    IsPullback.of_horiz_isIso ‚ü®by simp‚ü©
  have := (IsPullback.of_hasPullback (f ‚â´ (coprod.braiding X Y).hom) coprod.inl).paste_horiz this
  simp only [coprod.braiding_hom, Category.comp_id, colimit.Œπ_desc, BinaryCofan.mk_pt,
    BinaryCofan.Œπ_app_left, BinaryCofan.mk_inl] at this
  exact ‚ü®‚ü®‚ü®_, this.isLimit‚ü©‚ü©‚ü©

instance hasPullbackInr :
    HasPullback coprod.inr f :=
  hasPullback_symmetry _ _

end HasPullbacksOfInclusions

namespace PreservesPullbacksOfInclusions

variable {D : Type*} [Category D] [HasBinaryCoproducts C] (F : C ‚•§ D)

noncomputable
instance (priority := 100) [PreservesLimitsOfShape WalkingCospan F] :
    PreservesPullbacksOfInclusions F := ‚ü®‚ü©

variable [PreservesPullbacksOfInclusions F] {X Y Z : C} (f : Z ‚ü∂ X ‚®ø Y)

noncomputable
instance preservesPullbackInl' :
    PreservesLimit (cospan f coprod.inl) F :=
  preservesPullbackSymmetry _ _ _

noncomputable
instance preservesPullbackInr' :
    PreservesLimit (cospan f coprod.inr) F := by
  apply preservesLimitOfIsoDiagram (K‚ÇÅ := cospan (f ‚â´ (coprod.braiding X Y).hom) coprod.inl)
  apply cospanExt (Iso.refl _) (Iso.refl _) (coprod.braiding X Y).symm <;> simp

noncomputable
instance preservesPullbackInr :
    PreservesLimit (cospan coprod.inr f) F :=
  preservesPullbackSymmetry _ _ _

end PreservesPullbacksOfInclusions

instance (priority := 100) FinitaryExtensive.toFinitaryPreExtensive [FinitaryExtensive C] :
    FinitaryPreExtensive C :=
  ‚ü®fun c hc ‚Ü¶ (FinitaryExtensive.van_kampen' c hc).isUniversal‚ü©

theorem FinitaryExtensive.mono_inr_of_isColimit [FinitaryExtensive C] {c : BinaryCofan X Y}
    (hc : IsColimit c) : Mono c.inr :=
  BinaryCofan.mono_inr_of_isVanKampen (FinitaryExtensive.vanKampen c hc)
#align category_theory.finitary_extensive.mono_inr_of_is_colimit CategoryTheory.FinitaryExtensive.mono_inr_of_isColimit

theorem FinitaryExtensive.mono_inl_of_isColimit [FinitaryExtensive C] {c : BinaryCofan X Y}
    (hc : IsColimit c) : Mono c.inl :=
  FinitaryExtensive.mono_inr_of_isColimit (BinaryCofan.isColimitFlip hc)
#align category_theory.finitary_extensive.mono_inl_of_is_colimit CategoryTheory.FinitaryExtensive.mono_inl_of_isColimit

instance [FinitaryExtensive C] (X Y : C) : Mono (coprod.inl : X ‚ü∂ X ‚®ø Y) :=
  (FinitaryExtensive.mono_inl_of_isColimit (coprodIsCoprod X Y) : _)

instance [FinitaryExtensive C] (X Y : C) : Mono (coprod.inr : Y ‚ü∂ X ‚®ø Y) :=
  (FinitaryExtensive.mono_inr_of_isColimit (coprodIsCoprod X Y) : _)

theorem FinitaryExtensive.isPullback_initial_to_binaryCofan [FinitaryExtensive C]
    {c : BinaryCofan X Y} (hc : IsColimit c) :
    IsPullback (initial.to _) (initial.to _) c.inl c.inr :=
  BinaryCofan.isPullback_initial_to_of_isVanKampen (FinitaryExtensive.vanKampen c hc)
#align category_theory.finitary_extensive.is_pullback_initial_to_binary_cofan CategoryTheory.FinitaryExtensive.isPullback_initial_to_binaryCofan

instance (priority := 100) hasStrictInitialObjects_of_finitaryPreExtensive
    [FinitaryPreExtensive C] : HasStrictInitialObjects C :=
  hasStrictInitial_of_isUniversal (FinitaryPreExtensive.universal' _
    ((BinaryCofan.isColimit_iff_isIso_inr initialIsInitial _).mpr (by
      dsimp
      infer_instance)).some)
#align category_theory.has_strict_initial_objects_of_finitary_extensive CategoryTheory.hasStrictInitialObjects_of_finitaryPreExtensive

theorem finitaryExtensive_iff_of_isTerminal (C : Type u) [Category.{v} C] [HasFiniteCoproducts C]
    [HasPullbacksOfInclusions C]
    (T : C) (HT : IsTerminal T) (c‚ÇÄ : BinaryCofan T T) (hc‚ÇÄ : IsColimit c‚ÇÄ) :
    FinitaryExtensive C ‚Üî IsVanKampenColimit c‚ÇÄ := by
  refine' ‚ü®fun H => H.van_kampen' c‚ÇÄ hc‚ÇÄ, fun H => _‚ü©
  constructor
  simp_rw [BinaryCofan.isVanKampen_iff] at H ‚ä¢
  intro X Y c hc X' Y' c' Œ±X Œ±Y f hX hY
  obtain ‚ü®d, hd, hd'‚ü© :=
    Limits.BinaryCofan.IsColimit.desc' hc (HT.from _ ‚â´ c‚ÇÄ.inl) (HT.from _ ‚â´ c‚ÇÄ.inr)
  rw [H c' (Œ±X ‚â´ HT.from _) (Œ±Y ‚â´ HT.from _) (f ‚â´ d) (by rw [‚Üê reassoc_of% hX, hd, Category.assoc])
      (by rw [‚Üê reassoc_of% hY, hd', Category.assoc])]
  obtain ‚ü®hl, hr‚ü© := (H c (HT.from _) (HT.from _) d hd.symm hd'.symm).mp ‚ü®hc‚ü©
  rw [hl.paste_vert_iff hX.symm, hr.paste_vert_iff hY.symm]
#align category_theory.finitary_extensive_iff_of_is_terminal CategoryTheory.finitaryExtensive_iff_of_isTerminal

instance types.finitaryExtensive : FinitaryExtensive (Type u) := by
  classical
  rw [finitaryExtensive_iff_of_isTerminal (Type u) PUnit Types.isTerminalPunit _
      (Types.binaryCoproductColimit _ _)]
  apply BinaryCofan.isVanKampen_mk _ _ (fun X Y => Types.binaryCoproductColimit X Y) _
      fun f g => (Limits.Types.pullbackLimitCone f g).2
  ¬∑ intros _ _ _ _ f hŒ±X hŒ±Y
    constructor
    ¬∑ refine' ‚ü®‚ü®hŒ±X.symm‚ü©, ‚ü®PullbackCone.isLimitAux' _ _‚ü©‚ü©
      intro s
      have : ‚àÄ x, ‚àÉ! y, s.fst x = Sum.inl y := by
        intro x
        cases' h : s.fst x with val val
        ¬∑ simp only [Types.binaryCoproductCocone_pt, Functor.const_obj_obj, Sum.inl.injEq,
            exists_unique_eq']
        ¬∑ apply_fun f at h
          cases ((congr_fun s.condition x).symm.trans h).trans (congr_fun hŒ±Y val : _).symm
      delta ExistsUnique at this
      choose l hl hl' using this
      exact ‚ü®l, (funext hl).symm, Types.isTerminalPunit.hom_ext _ _,
        fun {l'} h‚ÇÅ _ => funext fun x => hl' x (l' x) (congr_fun h‚ÇÅ x).symm‚ü©
    ¬∑ refine' ‚ü®‚ü®hŒ±Y.symm‚ü©, ‚ü®PullbackCone.isLimitAux' _ _‚ü©‚ü©
      intro s
      have : ‚àÄ x, ‚àÉ! y, s.fst x = Sum.inr y := by
        intro x
        cases' h : s.fst x with val val
        ¬∑ apply_fun f at h
          cases ((congr_fun s.condition x).symm.trans h).trans (congr_fun hŒ±X val : _).symm
        ¬∑ simp only [Types.binaryCoproductCocone_pt, Functor.const_obj_obj, Sum.inr.injEq,
            exists_unique_eq']
      delta ExistsUnique at this
      choose l hl hl' using this
      exact ‚ü®l, (funext hl).symm, Types.isTerminalPunit.hom_ext _ _,
        fun {l'} h‚ÇÅ _ => funext fun x => hl' x (l' x) (congr_fun h‚ÇÅ x).symm‚ü©
  ¬∑ intro Z f
    dsimp [Limits.Types.binaryCoproductCocone]
    delta Types.PullbackObj
    have : ‚àÄ x, f x = Sum.inl PUnit.unit ‚à® f x = Sum.inr PUnit.unit := by
      intro x
      rcases f x with (‚ü®‚ü®‚ü©‚ü© | ‚ü®‚ü®‚ü©‚ü©)
      exacts [Or.inl rfl, Or.inr rfl]
    let eX : { p : Z √ó PUnit // f p.fst = Sum.inl p.snd } ‚âÉ { x : Z // f x = Sum.inl PUnit.unit } :=
      ‚ü®fun p => ‚ü®p.1.1, by convert p.2‚ü©, fun x => ‚ü®‚ü®_, _‚ü©, x.2‚ü©, fun _ => by ext; rfl,
        fun _ => by ext; rfl‚ü©
    let eY : { p : Z √ó PUnit // f p.fst = Sum.inr p.snd } ‚âÉ { x : Z // f x = Sum.inr PUnit.unit } :=
      ‚ü®fun p => ‚ü®p.1.1, p.2.trans (congr_arg Sum.inr <| Subsingleton.elim _ _)‚ü©,
        fun x => ‚ü®‚ü®_, _‚ü©, x.2‚ü©, fun _ => by ext; rfl, fun _ => by ext; rfl‚ü©
    fapply BinaryCofan.isColimitMk
    ¬∑ exact fun s x => dite _ (fun h => s.inl <| eX.symm ‚ü®x, h‚ü©)
        fun h => s.inr <| eY.symm ‚ü®x, (this x).resolve_left h‚ü©
    ¬∑ intro s
      ext ‚ü®‚ü®x, ‚ü®‚ü©‚ü©, _‚ü©
      dsimp
      split_ifs <;> rfl
    ¬∑ intro s
      ext ‚ü®‚ü®x, ‚ü®‚ü©‚ü©, hx‚ü©
      dsimp
      split_ifs with h
      ¬∑ cases h.symm.trans hx
      ¬∑ rfl
    ¬∑ intro s m e‚ÇÅ e‚ÇÇ
      ext x
      split_ifs
      ¬∑ rw [‚Üê e‚ÇÅ]
        rfl
      ¬∑ rw [‚Üê e‚ÇÇ]
        rfl
#align category_theory.types.finitary_extensive CategoryTheory.types.finitaryExtensive

section TopCat

/-- (Implementation) An auxiliary lemma for the proof that `TopCat` is finitary extensive. -/
-- Porting note: needs to add noncomputable modifier
noncomputable def finitaryExtensiveTopCatAux (Z : TopCat.{u})
    (f : Z ‚ü∂ TopCat.of (Sum PUnit.{u + 1} PUnit.{u + 1})) :
    IsColimit (BinaryCofan.mk
      (TopCat.pullbackFst f (TopCat.binaryCofan (TopCat.of PUnit) (TopCat.of PUnit)).inl)
      (TopCat.pullbackFst f (TopCat.binaryCofan (TopCat.of PUnit) (TopCat.of PUnit)).inr)) := by
  have : ‚àÄ x, f x = Sum.inl PUnit.unit ‚à® f x = Sum.inr PUnit.unit := by
    intro x
    rcases f x with (‚ü®‚ü®‚ü©‚ü© | ‚ü®‚ü®‚ü©‚ü©)
    exacts [Or.inl rfl, Or.inr rfl]
  letI eX : { p : Z √ó PUnit // f p.fst = Sum.inl p.snd } ‚âÉ { x : Z // f x = Sum.inl PUnit.unit } :=
    ‚ü®fun p => ‚ü®p.1.1, p.2.trans (congr_arg Sum.inl <| Subsingleton.elim _ _)‚ü©,
      fun x => ‚ü®‚ü®_, PUnit.unit‚ü©, x.2‚ü©, fun _ => by ext; rfl, fun _ => by ext; rfl‚ü©
  letI eY : { p : Z √ó PUnit // f p.fst = Sum.inr p.snd } ‚âÉ { x : Z // f x = Sum.inr PUnit.unit } :=
    ‚ü®fun p => ‚ü®p.1.1, p.2.trans (congr_arg Sum.inr <| Subsingleton.elim _ _)‚ü©,
      fun x => ‚ü®‚ü®_, PUnit.unit‚ü©, x.2‚ü©, fun _ => by ext; rfl, fun _ => by ext; rfl‚ü©
  fapply BinaryCofan.isColimitMk
  classical -- Porting note: Added
  ¬∑ refine' fun s => ‚ü®fun x => dite _
      (fun h => s.inl <| eX.symm ‚ü®x, h‚ü©) fun h => s.inr <| eY.symm ‚ü®x, (this x).resolve_left h‚ü©, _‚ü©
    rw [continuous_iff_continuousAt]
    intro x
    by_cases h : f x = Sum.inl PUnit.unit
    ¬∑ revert h x
      apply (IsOpen.continuousOn_iff _).mp
      ¬∑ rw [continuousOn_iff_continuous_restrict]
        convert_to Continuous fun x : { x | f x = Sum.inl PUnit.unit } =>
            s.inl ‚ü®(x.1, PUnit.unit), x.2‚ü©
        ¬∑ ext ‚ü®x, hx‚ü©
          exact dif_pos hx
        -- Porting note: this `(BinaryCofan.inl s).2` was unnecessary
        have := (BinaryCofan.inl s).2
        continuity
      ¬∑ convert f.2.1 _ openEmbedding_inl.isOpen_range
        rename_i x
        exact ‚ü®fun h => ‚ü®_, h.symm‚ü©,
          fun ‚ü®e, h‚ü© => h.symm.trans (congr_arg Sum.inl <| Subsingleton.elim _ _)‚ü©
    ¬∑ revert h x
      apply (IsOpen.continuousOn_iff _).mp
      ¬∑ rw [continuousOn_iff_continuous_restrict]
        convert_to Continuous fun x : { x | f x ‚â† Sum.inl PUnit.unit } =>
            s.inr ‚ü®(x.1, PUnit.unit), (this _).resolve_left x.2‚ü©
        ¬∑ ext ‚ü®x, hx‚ü©
          exact dif_neg hx
        -- Porting note: this `(BinaryCofan.inr s).2` was unnecessary
        have := (BinaryCofan.inr s).2
        continuity
      ¬∑ convert f.2.1 _ openEmbedding_inr.isOpen_range
        rename_i x
        change f x ‚â† Sum.inl PUnit.unit ‚Üî f x ‚àà Set.range Sum.inr
        trans f x = Sum.inr PUnit.unit
        ¬∑ rcases f x with (‚ü®‚ü®‚ü©‚ü© | ‚ü®‚ü®‚ü©‚ü©) <;>
            simp only [iff_self_iff, eq_self_iff_true, not_true, Ne, not_false_iff]
        ¬∑ exact ‚ü®fun h => ‚ü®_, h.symm‚ü©,
            fun ‚ü®e, h‚ü© => h.symm.trans (congr_arg Sum.inr <| Subsingleton.elim _ _)‚ü©
  ¬∑ intro s
    ext ‚ü®‚ü®x, ‚ü®‚ü©‚ü©, (hx : f x = Sum.inl PUnit.unit)‚ü©
    change dite _ _ _ = _
    split_ifs with h
    ¬∑ rfl
    ¬∑ cases (h hx) -- Porting note: in Lean3 it is `rfl`
  ¬∑ intro s
    ext ‚ü®‚ü®x, ‚ü®‚ü©‚ü©, hx‚ü©
    change dite _ _ _ = _
    split_ifs with h
    ¬∑ cases h.symm.trans hx
    ¬∑ rfl
  ¬∑ intro s m e‚ÇÅ e‚ÇÇ
    ext x
    change m x = dite _ _ _
    split_ifs
    ¬∑ rw [‚Üê e‚ÇÅ]
      rfl
    ¬∑ rw [‚Üê e‚ÇÇ]
      rfl
set_option linter.uppercaseLean3 false in
#align category_theory.finitary_extensive_Top_aux CategoryTheory.finitaryExtensiveTopCatAux

instance finitaryExtensive_TopCat : FinitaryExtensive TopCat.{u} := by
  rw [finitaryExtensive_iff_of_isTerminal TopCat.{u} _ TopCat.isTerminalPUnit _
      (TopCat.binaryCofanIsColimit _ _)]
  apply BinaryCofan.isVanKampen_mk _ _ (fun X Y => TopCat.binaryCofanIsColimit X Y) _
      fun f g => TopCat.pullbackConeIsLimit f g
  ¬∑ intro X' Y' Œ±X Œ±Y f hŒ±X hŒ±Y
    constructor
    ¬∑ refine' ‚ü®‚ü®hŒ±X.symm‚ü©, ‚ü®PullbackCone.isLimitAux' _ _‚ü©‚ü©
      intro s
      have : ‚àÄ x, ‚àÉ! y, s.fst x = Sum.inl y := by
        intro x
        cases' h : s.fst x with val val
        ¬∑ exact ‚ü®val, rfl, fun y h => Sum.inl_injective h.symm‚ü©
        ¬∑ apply_fun f at h
          cases ((ConcreteCategory.congr_hom s.condition x).symm.trans h).trans
            (ConcreteCategory.congr_hom hŒ±Y val : _).symm
      delta ExistsUnique at this
      choose l hl hl' using this
      refine' ‚ü®‚ü®l, _‚ü©, ContinuousMap.ext fun a => (hl a).symm, TopCat.isTerminalPUnit.hom_ext _ _,
        fun {l'} h‚ÇÅ _ => ContinuousMap.ext fun x =>
          hl' x (l' x) (ConcreteCategory.congr_hom h‚ÇÅ x).symm‚ü©
      apply (embedding_inl (X := X') (Y := Y')).toInducing.continuous_iff.mpr
      convert s.fst.2 using 1
      exact (funext hl).symm
    ¬∑ refine' ‚ü®‚ü®hŒ±Y.symm‚ü©, ‚ü®PullbackCone.isLimitAux' _ _‚ü©‚ü©
      intro s
      have : ‚àÄ x, ‚àÉ! y, s.fst x = Sum.inr y := by
        intro x
        cases' h : s.fst x with val val
        ¬∑ apply_fun f at h
          cases ((ConcreteCategory.congr_hom s.condition x).symm.trans h).trans
            (ConcreteCategory.congr_hom hŒ±X val : _).symm
        ¬∑ exact ‚ü®val, rfl, fun y h => Sum.inr_injective h.symm‚ü©
      delta ExistsUnique at this
      choose l hl hl' using this
      refine' ‚ü®‚ü®l, _‚ü©, ContinuousMap.ext fun a => (hl a).symm, TopCat.isTerminalPUnit.hom_ext _ _,
        fun {l'} h‚ÇÅ _ =>
          ContinuousMap.ext fun x => hl' x (l' x) (ConcreteCategory.congr_hom h‚ÇÅ x).symm‚ü©
      apply (embedding_inr (X := X') (Y := Y')).toInducing.continuous_iff.mpr
      convert s.fst.2 using 1
      exact (funext hl).symm
  ¬∑ intro Z f
    exact finitaryExtensiveTopCatAux Z f

end TopCat

section Functor

theorem finitaryExtensive_of_reflective
    [HasFiniteCoproducts D] [HasPullbacksOfInclusions D] [FinitaryExtensive C]
    {Gl : C ‚•§ D} {Gr : D ‚•§ C} (adj : Gl ‚ä£ Gr) [Full Gr] [Faithful Gr]
    [‚àÄ X Y (f : X ‚ü∂ Gl.obj Y), HasPullback (Gr.map f) (adj.unit.app Y)]
    [‚àÄ X Y (f : X ‚ü∂ Gl.obj Y), PreservesLimit (cospan (Gr.map f) (adj.unit.app Y)) Gl]
    [PreservesPullbacksOfInclusions Gl] :
    FinitaryExtensive D := by
  have : PreservesColimitsOfSize Gl := adj.leftAdjointPreservesColimits
  constructor
  intros X Y c hc
  apply (IsVanKampenColimit.precompose_isIso_iff
    (isoWhiskerLeft _ (asIso adj.counit) ‚â™‚â´ Functor.rightUnitor _).hom).mp
  have : ‚àÄ (Z : C) (i : Discrete WalkingPair) (f : Z ‚ü∂ (colimit.cocone (pair X Y ‚ãô Gr)).pt),
        PreservesLimit (cospan f ((colimit.cocone (pair X Y ‚ãô Gr)).Œπ.app i)) Gl := by
    have : pair X Y ‚ãô Gr = pair (Gr.obj X) (Gr.obj Y) := by
      apply Functor.hext
      ¬∑ rintro ‚ü®‚ü®‚ü©‚ü© <;> rfl
      ¬∑ rintro ‚ü®‚ü®‚ü©‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : _ = j‚ü©‚ü© <;> simp
    rw [this]
    rintro Z ‚ü®_|_‚ü© f <;> dsimp <;> infer_instance
  refine ((FinitaryExtensive.vanKampen _ (colimit.isColimit <| pair X Y ‚ãô _)).map_reflective
    adj).of_iso (IsColimit.uniqueUpToIso ?_ ?_)
  ¬∑ exact isColimitOfPreserves Gl (colimit.isColimit _)
  ¬∑ exact (IsColimit.precomposeHomEquiv _ _).symm hc

instance finitaryExtensive_functor [HasPullbacks C] [FinitaryExtensive C] :
    FinitaryExtensive (D ‚•§ C) :=
  haveI : HasFiniteCoproducts (D ‚•§ C) := ‚ü®fun _ => Limits.functorCategoryHasColimitsOfShape‚ü©
  ‚ü®fun c hc => isVanKampenColimit_of_evaluation _ c fun _ =>
    FinitaryExtensive.vanKampen _ <| PreservesColimit.preserves hc‚ü©

noncomputable
instance {C} [Category C] {D} [Category D] (F : C ‚•§ D)
    {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) [IsIso f] : PreservesLimit (cospan f g) F :=
  have := hasPullback_of_left_iso f g
  preservesLimitOfPreservesLimitCone (IsPullback.of_hasPullback f g).isLimit
    ((isLimitMapConePullbackConeEquiv _ pullback.condition).symm
      (IsPullback.of_vert_isIso ‚ü®by simp only [‚Üê F.map_comp, pullback.condition]‚ü©).isLimit)

noncomputable
instance {C} [Category C] {D} [Category D] (F : C ‚•§ D)
    {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) [IsIso g] : PreservesLimit (cospan f g) F :=
  preservesPullbackSymmetry _ _ _

theorem finitaryExtensive_of_preserves_and_reflects (F : C ‚•§ D) [FinitaryExtensive D]
    [HasFiniteCoproducts C] [HasPullbacksOfInclusions C]
    [PreservesPullbacksOfInclusions F]
    [ReflectsLimitsOfShape WalkingCospan F] [PreservesColimitsOfShape (Discrete WalkingPair) F]
    [ReflectsColimitsOfShape (Discrete WalkingPair) F] : FinitaryExtensive C := by
  constructor
  intros X Y c hc
  refine IsVanKampenColimit.of_iso ?_ (hc.uniqueUpToIso (coprodIsCoprod X Y)).symm
  have (i : Discrete WalkingPair) (Z : C) (f : Z ‚ü∂ X ‚®ø Y) :
    PreservesLimit (cospan f ((BinaryCofan.mk coprod.inl coprod.inr).Œπ.app i)) F := by
    rcases i with ‚ü®_|_‚ü© <;> dsimp <;> infer_instance
  refine (FinitaryExtensive.vanKampen _
    (isColimitOfPreserves F (coprodIsCoprod X Y))).of_mapCocone F
#align category_theory.finitary_extensive_of_preserves_and_reflects CategoryTheory.finitaryExtensive_of_preserves_and_reflects

theorem finitaryExtensive_of_preserves_and_reflects_isomorphism (F : C ‚•§ D) [FinitaryExtensive D]
    [HasFiniteCoproducts C] [HasPullbacks C] [PreservesLimitsOfShape WalkingCospan F]
    [PreservesColimitsOfShape (Discrete WalkingPair) F] [ReflectsIsomorphisms F] :
    FinitaryExtensive C := by
  haveI : ReflectsLimitsOfShape WalkingCospan F := reflectsLimitsOfShapeOfReflectsIsomorphisms
  haveI : ReflectsColimitsOfShape (Discrete WalkingPair) F :=
    reflectsColimitsOfShapeOfReflectsIsomorphisms
  exact finitaryExtensive_of_preserves_and_reflects F
#align category_theory.finitary_extensive_of_preserves_and_reflects_isomorphism CategoryTheory.finitaryExtensive_of_preserves_and_reflects_isomorphism

end Functor

section FiniteCoproducts

theorem FinitaryPreExtensive.isUniversal_finiteCoproducts_Fin [FinitaryPreExtensive C] {n : ‚Ñï}
    {F : Discrete (Fin n) ‚•§ C} {c : Cocone F} (hc : IsColimit c) : IsUniversalColimit c := by
  let f : Fin n ‚Üí C := F.obj ‚àò Discrete.mk
  have : F = Discrete.functor f :=
    Functor.hext (fun _ ‚Ü¶ rfl) (by rintro ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : i = j‚ü©‚ü©; simp [f])
  clear_value f
  subst this
  induction' n with n IH
  ¬∑ exact (isVanKampenColimit_of_isEmpty _ hc).isUniversal
  ¬∑ apply IsUniversalColimit.of_iso _
      ((extendCofanIsColimit f (coproductIsCoproduct _) (coprodIsCoprod _ _)).uniqueUpToIso hc)
    apply @isUniversalColimit_extendCofan _ _ _ _ _ _ _ _ ?_
    ¬∑ apply IH
      exact coproductIsCoproduct _
    ¬∑ apply FinitaryPreExtensive.universal'
      exact coprodIsCoprod _ _
    ¬∑ dsimp
      infer_instance

theorem FinitaryPreExtensive.isUniversal_finiteCoproducts [FinitaryPreExtensive C] {Œπ : Type*}
    [Finite Œπ] {F : Discrete Œπ ‚•§ C} {c : Cocone F} (hc : IsColimit c) : IsUniversalColimit c := by
  obtain ‚ü®n, ‚ü®e‚ü©‚ü© := Finite.exists_equiv_fin Œπ
  apply (IsUniversalColimit.whiskerEquivalence_iff (Discrete.equivalence e).symm).mp
  apply FinitaryPreExtensive.isUniversal_finiteCoproducts_Fin
  exact (IsColimit.whiskerEquivalenceEquiv (Discrete.equivalence e).symm) hc

theorem FinitaryExtensive.isVanKampen_finiteCoproducts_Fin [FinitaryExtensive C] {n : ‚Ñï}
    {F : Discrete (Fin n) ‚•§ C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by
  let f : Fin n ‚Üí C := F.obj ‚àò Discrete.mk
  have : F = Discrete.functor f :=
    Functor.hext (fun _ ‚Ü¶ rfl) (by rintro ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : i = j‚ü©‚ü©; simp [f])
  clear_value f
  subst this
  induction' n with n IH
  ¬∑ exact isVanKampenColimit_of_isEmpty _ hc
  ¬∑ apply IsVanKampenColimit.of_iso _
      ((extendCofanIsColimit f (coproductIsCoproduct _) (coprodIsCoprod _ _)).uniqueUpToIso hc)
    apply @isVanKampenColimit_extendCofan _ _ _ _ _ _ _ _ ?_
    ¬∑ apply IH
      exact coproductIsCoproduct _
    ¬∑ apply FinitaryExtensive.van_kampen'
      exact coprodIsCoprod _ _
    ¬∑ dsimp
      infer_instance

theorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {Œπ : Type*}
    [Finite Œπ] {F : Discrete Œπ ‚•§ C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by
  obtain ‚ü®n, ‚ü®e‚ü©‚ü© := Finite.exists_equiv_fin Œπ
  apply (IsVanKampenColimit.whiskerEquivalence_iff (Discrete.equivalence e).symm).mp
  apply FinitaryExtensive.isVanKampen_finiteCoproducts_Fin
  exact (IsColimit.whiskerEquivalenceEquiv (Discrete.equivalence e).symm) hc

lemma FinitaryPreExtensive.hasPullbacks_of_is_coproduct [FinitaryPreExtensive C] {Œπ : Type*}
    [Finite Œπ] {F : Discrete Œπ ‚•§ C} {c : Cocone F} (hc : IsColimit c) (i : Discrete Œπ) {X : C}
    (g : X ‚ü∂ _) : HasPullback g (c.Œπ.app i) := by
  classical
  let f : Œπ ‚Üí C := F.obj ‚àò Discrete.mk
  have : F = Discrete.functor f :=
    Functor.hext (fun i ‚Ü¶ rfl) (by rintro ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : i = j‚ü©‚ü©; simp [f])
  clear_value f
  subst this
  change Cofan f at c
  obtain ‚ü®i‚ü© := i
  let e : ‚àê f ‚âÖ f i ‚®ø (‚àê fun j : ({i}·∂ú : Set Œπ) ‚Ü¶ f j) :=
  { hom := Sigma.desc (fun j ‚Ü¶ if h : j = i then eqToHom (congr_arg f h) ‚â´ coprod.inl else
      Sigma.Œπ (fun j : ({i}·∂ú : Set Œπ) ‚Ü¶ f j) ‚ü®j, h‚ü© ‚â´ coprod.inr)
    inv := coprod.desc (Sigma.Œπ f i) (Sigma.desc fun j ‚Ü¶ Sigma.Œπ f j)
    hom_inv_id := by aesop_cat
    inv_hom_id := by
      ext j
      ¬∑ simp
      ¬∑ simp only [coprod.desc_comp, colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app,
          eqToHom_refl, Category.id_comp, dite_true, BinaryCofan.mk_pt, BinaryCofan.Œπ_app_right,
          BinaryCofan.mk_inr, colimit.Œπ_desc_assoc, Discrete.functor_obj, Category.comp_id]
        exact dif_neg j.prop }
  let e' : c.pt ‚âÖ f i ‚®ø (‚àê fun j : ({i}·∂ú : Set Œπ) ‚Ü¶ f j) :=
    hc.coconePointUniqueUpToIso (getColimitCocone _).2 ‚â™‚â´ e
  have : coprod.inl ‚â´ e'.inv = c.Œπ.app ‚ü®i‚ü© := by
    simp only [e', Iso.trans_inv, coprod.desc_comp, colimit.Œπ_desc, BinaryCofan.mk_pt,
      BinaryCofan.Œπ_app_left, BinaryCofan.mk_inl]
    exact colimit.comp_coconePointUniqueUpToIso_inv _ _
  clear_value e'
  rw [‚Üê this]
  have : IsPullback (ùüô _) (g ‚â´ e'.hom) g e'.inv := IsPullback.of_horiz_isIso ‚ü®by simp‚ü©
  exact ‚ü®‚ü®‚ü®_, ((IsPullback.of_hasPullback (g ‚â´ e'.hom) coprod.inl).paste_horiz this).isLimit‚ü©‚ü©‚ü©

lemma FinitaryExtensive.mono_Œπ [FinitaryExtensive C] {Œπ : Type*} [Finite Œπ] {F : Discrete Œπ ‚•§ C}
    {c : Cocone F} (hc : IsColimit c) (i : Discrete Œπ) :
    Mono (c.Œπ.app i) :=
  mono_of_cofan_isVanKampen (isVanKampen_finiteCoproducts hc) _

instance [FinitaryExtensive C] {Œπ : Type*} [Finite Œπ] (X : Œπ ‚Üí C) (i : Œπ) :
    Mono (Sigma.Œπ X i) :=
  FinitaryExtensive.mono_Œπ (coproductIsCoproduct _) ‚ü®i‚ü©

lemma FinitaryExtensive.isPullback_initial_to [FinitaryExtensive C]
    {Œπ : Type*} [Finite Œπ] {F : Discrete Œπ ‚•§ C}
    {c : Cocone F} (hc : IsColimit c) (i j : Discrete Œπ) (e : i ‚â† j) :
    IsPullback (initial.to _) (initial.to _) (c.Œπ.app i) (c.Œπ.app j) :=
  isPullback_initial_to_of_cofan_isVanKampen (isVanKampen_finiteCoproducts hc) i j e

lemma FinitaryExtensive.isPullback_initial_to_sigma_Œπ [FinitaryExtensive C] {Œπ : Type*} [Finite Œπ]
    (X : Œπ ‚Üí C) (i j : Œπ) (e : i ‚â† j) :
    IsPullback (initial.to _) (initial.to _) (Sigma.Œπ X i) (Sigma.Œπ X j) :=
  FinitaryExtensive.isPullback_initial_to (coproductIsCoproduct _) ‚ü®i‚ü© ‚ü®j‚ü©
    (ne_of_apply_ne Discrete.as e)

instance FinitaryPreExtensive.hasPullbacks_of_inclusions [FinitaryPreExtensive C] {X Z : C}
    {Œ± : Type*} (f : X ‚ü∂ Z) {Y : (a : Œ±) ‚Üí C} (i : (a : Œ±) ‚Üí Y a ‚ü∂ Z) [Finite Œ±]
    [hi : IsIso (Sigma.desc i)] (a : Œ±) : HasPullback f (i a) := by
  apply FinitaryPreExtensive.hasPullbacks_of_is_coproduct (c := Cofan.mk Z i)
  exact @IsColimit.ofPointIso (t := Cofan.mk Z i) (P := _) hi

lemma FinitaryPreExtensive.sigma_desc_iso [FinitaryPreExtensive C] {Œ± : Type} [Finite Œ±] {X : C}
    {Z : Œ± ‚Üí C} (œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X) {Y : C} (f : Y ‚ü∂ X) (hœÄ : IsIso (Sigma.desc œÄ)) :
    IsIso (Sigma.desc ((fun _ ‚Ü¶ pullback.fst) : (a : Œ±) ‚Üí pullback f (œÄ a) ‚ü∂ _)) := by
  suffices IsColimit (Cofan.mk _ ((fun _ ‚Ü¶ pullback.fst) : (a : Œ±) ‚Üí pullback f (œÄ a) ‚ü∂ _)) by
    change IsIso (this.coconePointUniqueUpToIso (getColimitCocone _).2).inv
    infer_instance
  let this : IsColimit (Cofan.mk X œÄ) := by
    refine @IsColimit.ofPointIso (t := Cofan.mk X œÄ) (P := coproductIsCoproduct Z) ?_
    convert hœÄ
    simp [coproductIsCoproduct]
  refine (FinitaryPreExtensive.isUniversal_finiteCoproducts this
    (Cofan.mk _ ((fun _ ‚Ü¶ pullback.fst) : (a : Œ±) ‚Üí pullback f (œÄ a) ‚ü∂ _))
    (Discrete.natTrans fun i ‚Ü¶ pullback.snd) f ?_
    (NatTrans.equifibered_of_discrete _) ?_).some
  ¬∑ ext
    simp [pullback.condition]
  ¬∑ exact fun j ‚Ü¶ IsPullback.of_hasPullback f (œÄ j.as)

end FiniteCoproducts

end Extensive

end CategoryTheory
