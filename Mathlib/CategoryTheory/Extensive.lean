/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.CategoryTheory.Limits.Shapes.CommSq
import Mathlib.CategoryTheory.Limits.Shapes.StrictInitial
import Mathlib.CategoryTheory.Limits.Shapes.Types
import Mathlib.Topology.Category.TopCat.Limits.Pullbacks
import Mathlib.CategoryTheory.Limits.FunctorCategory
import Mathlib.CategoryTheory.Limits.Constructions.FiniteProductsOfBinaryProducts

#align_import category_theory.extensive from "leanprover-community/mathlib"@"178a32653e369dce2da68dc6b2694e385d484ef1"

/-!

# Extensive categories

## Main definitions
- `CategoryTheory.IsVanKampenColimit`: A (colimit) cocone over a diagram `F : J ‚•§ C` is van
  Kampen if for every cocone `c'` over the pullback of the diagram `F' : J ‚•§ C'`,
  `c'` is colimiting iff `c'` is the pullback of `c`.
- `CategoryTheory.FinitaryExtensive`: A category is (finitary) extensive if it has finite
  coproducts, and binary coproducts are van Kampen.

## Main Results
- `CategoryTheory.hasStrictInitialObjects_of_finitaryExtensive`: The initial object
  in extensive categories is strict.
- `CategoryTheory.FinitaryExtensive.mono_inr_of_isColimit`: Coproduct injections are monic in
  extensive categories.
- `CategoryTheory.BinaryCofan.isPullback_initial_to_of_isVanKampen`: In extensive categories,
  sums are disjoint, i.e. the pullback of `X ‚ü∂ X ‚®ø Y` and `Y ‚ü∂ X ‚®ø Y` is the initial object.
- `CategoryTheory.types.finitaryExtensive`: The category of types is extensive.
- `CategoryTheory.FinitaryExtensive.isVanKampen_finiteCoproducts`: Finite coproducts in a
  finitary extensive category are van Kampen.

## TODO

Show that the following are finitary extensive:
- the categories of sheaves over a site
- `Scheme`
- `AffineScheme` (`CommRing·µí·µñ`)

## References
- https://ncatlab.org/nlab/show/extensive+category
- [Carboni et al, Introduction to extensive and distributive categories][CARBONI1993145]

-/


open CategoryTheory.Limits

namespace CategoryTheory

universe v' u' v u

variable {J : Type v'} [Category.{u'} J] {C : Type u} [Category.{v} C]

/-- A natural transformation is equifibered if every commutative square of the following form is
a pullback.
```
F(X) ‚Üí F(Y)
 ‚Üì      ‚Üì
G(X) ‚Üí G(Y)
```
-/
def NatTrans.Equifibered {F G : J ‚•§ C} (Œ± : F ‚ü∂ G) : Prop :=
  ‚àÄ ‚¶Éi j : J‚¶Ñ (f : i ‚ü∂ j), IsPullback (F.map f) (Œ±.app i) (Œ±.app j) (G.map f)
#align category_theory.nat_trans.equifibered CategoryTheory.NatTrans.Equifibered

theorem NatTrans.equifibered_of_isIso {F G : J ‚•§ C} (Œ± : F ‚ü∂ G) [IsIso Œ±] : Equifibered Œ± :=
  fun _ _ f => IsPullback.of_vert_isIso ‚ü®NatTrans.naturality _ f‚ü©
#align category_theory.nat_trans.equifibered_of_is_iso CategoryTheory.NatTrans.equifibered_of_isIso

theorem NatTrans.Equifibered.comp {F G H : J ‚•§ C} {Œ± : F ‚ü∂ G} {Œ≤ : G ‚ü∂ H} (hŒ± : Equifibered Œ±)
    (hŒ≤ : Equifibered Œ≤) : Equifibered (Œ± ‚â´ Œ≤) :=
  fun _ _ f => (hŒ± f).paste_vert (hŒ≤ f)
#align category_theory.nat_trans.equifibered.comp CategoryTheory.NatTrans.Equifibered.comp

/-- A (colimit) cocone over a diagram `F : J ‚•§ C` is universal if it is stable under pullbacks. -/
def IsUniversalColimit {F : J ‚•§ C} (c : Cocone F) : Prop :=
  ‚àÄ ‚¶ÉF' : J ‚•§ C‚¶Ñ (c' : Cocone F') (Œ± : F' ‚ü∂ F) (f : c'.pt ‚ü∂ c.pt)
    (_ : Œ± ‚â´ c.Œπ = c'.Œπ ‚â´ (Functor.const J).map f) (_ : NatTrans.Equifibered Œ±),
    (‚àÄ j : J, IsPullback (c'.Œπ.app j) (Œ±.app j) f (c.Œπ.app j)) ‚Üí Nonempty (IsColimit c')
#align category_theory.is_universal_colimit CategoryTheory.IsUniversalColimit

/-- A (colimit) cocone over a diagram `F : J ‚•§ C` is van Kampen if for every cocone `c'` over the
pullback of the diagram `F' : J ‚•§ C'`, `c'` is colimiting iff `c'` is the pullback of `c`.

TODO: Show that this is iff the functor `C ‚•§ Cat·µí·µñ` sending `x` to `C/x` preserves it.
TODO: Show that this is iff the inclusion functor `C ‚•§ Span(C)` preserves it.
-/
def IsVanKampenColimit {F : J ‚•§ C} (c : Cocone F) : Prop :=
  ‚àÄ ‚¶ÉF' : J ‚•§ C‚¶Ñ (c' : Cocone F') (Œ± : F' ‚ü∂ F) (f : c'.pt ‚ü∂ c.pt)
    (_ : Œ± ‚â´ c.Œπ = c'.Œπ ‚â´ (Functor.const J).map f) (_ : NatTrans.Equifibered Œ±),
    Nonempty (IsColimit c') ‚Üî ‚àÄ j : J, IsPullback (c'.Œπ.app j) (Œ±.app j) f (c.Œπ.app j)
#align category_theory.is_van_kampen_colimit CategoryTheory.IsVanKampenColimit

theorem IsVanKampenColimit.isUniversal {F : J ‚•§ C} {c : Cocone F} (H : IsVanKampenColimit c) :
    IsUniversalColimit c :=
  fun _ c' Œ± f h hŒ± => (H c' Œ± f h hŒ±).mpr
#align category_theory.is_van_kampen_colimit.is_universal CategoryTheory.IsVanKampenColimit.isUniversal

/-- A van Kampen colimit is a colimit. -/
noncomputable def IsVanKampenColimit.isColimit {F : J ‚•§ C} {c : Cocone F}
    (h : IsVanKampenColimit c) : IsColimit c := by
  refine' ((h c (ùüô F) (ùüô c.pt : _) (by rw [Functor.map_id, Category.comp_id, Category.id_comp])
    (NatTrans.equifibered_of_isIso _)).mpr fun j => _).some
  haveI : IsIso (ùüô c.pt) := inferInstance
  exact IsPullback.of_vert_isIso ‚ü®by erw [NatTrans.id_app, Category.comp_id, Category.id_comp]‚ü©
#align category_theory.is_van_kampen_colimit.is_colimit CategoryTheory.IsVanKampenColimit.isColimit

theorem IsInitial.isVanKampenColimit [HasStrictInitialObjects C] {X : C} (h : IsInitial X) :
    IsVanKampenColimit (asEmptyCocone X) := by
  intro F' c' Œ± f hf hŒ±
  have : F' = Functor.empty C := by apply Functor.hext <;> rintro ‚ü®‚ü®‚ü©‚ü©
  subst this
  haveI := h.isIso_to f
  refine' ‚ü®by rintro _ ‚ü®‚ü®‚ü©‚ü©,
    fun _ => ‚ü®IsColimit.ofIsoColimit h (Cocones.ext (asIso f).symm <| by rintro ‚ü®‚ü®‚ü©‚ü©)‚ü©‚ü©
#align category_theory.is_initial.is_van_kampen_colimit CategoryTheory.IsInitial.isVanKampenColimit

section Extensive

variable {X Y : C}

/-- A category is (finitary) extensive if it has finite coproducts,
and binary coproducts are van Kampen. -/
class FinitaryExtensive (C : Type u) [Category.{v} C] : Prop where
  [hasFiniteCoproducts : HasFiniteCoproducts C]
  [hasPullbackInl : ‚àÄ {X Y Z : C} (f : Z ‚ü∂ X ‚®ø Y), HasPullback coprod.inl f]
  /-- In a finitary extensive category, all coproducts are van Kampen-/
  van_kampen' : ‚àÄ {X Y : C} (c : BinaryCofan X Y), IsColimit c ‚Üí IsVanKampenColimit c
#align category_theory.finitary_extensive CategoryTheory.FinitaryExtensive

attribute [instance] FinitaryExtensive.hasFiniteCoproducts FinitaryExtensive.hasPullbackInl

theorem FinitaryExtensive.vanKampen [FinitaryExtensive C] {F : Discrete WalkingPair ‚•§ C}
    (c : Cocone F) (hc : IsColimit c) : IsVanKampenColimit c := by
  let X := F.obj ‚ü®WalkingPair.left‚ü©
  let Y := F.obj ‚ü®WalkingPair.right‚ü©
  have : F = pair X Y := by
    apply Functor.hext
    ¬∑ rintro ‚ü®‚ü®‚ü©‚ü© <;> rfl
    ¬∑ rintro ‚ü®‚ü®‚ü©‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : _ = j‚ü©‚ü© <;> simp
  clear_value X Y
  subst this
  exact FinitaryExtensive.van_kampen' c hc
#align category_theory.finitary_extensive.van_kampen CategoryTheory.FinitaryExtensive.vanKampen

instance FinitaryExtensive.hasPullbackInl' [FinitaryExtensive C] {X Y Z : C} (f : Z ‚ü∂ X ‚®ø Y) :
    HasPullback f coprod.inl :=
  hasPullback_symmetry _ _

instance FinitaryExtensive.hasPullbackInr' [FinitaryExtensive C] {X Y Z : C} (f : Z ‚ü∂ X ‚®ø Y) :
    HasPullback f coprod.inr := by
  have : IsPullback (ùüô _) (f ‚â´ (coprod.braiding X Y).hom) f (coprod.braiding Y X).hom :=
    IsPullback.of_horiz_isIso ‚ü®by simp‚ü©
  have := (IsPullback.of_hasPullback (f ‚â´ (coprod.braiding X Y).hom) coprod.inl).paste_horiz this
  simp only [coprod.braiding_hom, Category.comp_id, colimit.Œπ_desc, BinaryCofan.mk_pt,
    BinaryCofan.Œπ_app_left, BinaryCofan.mk_inl] at this
  exact ‚ü®‚ü®‚ü®_, this.isLimit‚ü©‚ü©‚ü©

instance FinitaryExtensive.hasPullbackInr [FinitaryExtensive C] {X Y Z : C} (f : Z ‚ü∂ X ‚®ø Y) :
    HasPullback coprod.inr f :=
  hasPullback_symmetry _ _

theorem mapPair_equifibered {F F' : Discrete WalkingPair ‚•§ C} (Œ± : F ‚ü∂ F') :
    NatTrans.Equifibered Œ± := by
  rintro ‚ü®‚ü®‚ü©‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : _ = j‚ü©‚ü©
  all_goals
    dsimp; simp only [Discrete.functor_map_id]
    exact IsPullback.of_horiz_isIso ‚ü®by simp only [Category.comp_id, Category.id_comp]‚ü©
#align category_theory.map_pair_equifibered CategoryTheory.mapPair_equifibered

theorem BinaryCofan.isVanKampen_iff (c : BinaryCofan X Y) :
    IsVanKampenColimit c ‚Üî
      ‚àÄ {X' Y' : C} (c' : BinaryCofan X' Y') (Œ±X : X' ‚ü∂ X) (Œ±Y : Y' ‚ü∂ Y) (f : c'.pt ‚ü∂ c.pt)
        (_ : Œ±X ‚â´ c.inl = c'.inl ‚â´ f) (_ : Œ±Y ‚â´ c.inr = c'.inr ‚â´ f),
        Nonempty (IsColimit c') ‚Üî IsPullback c'.inl Œ±X f c.inl ‚àß IsPullback c'.inr Œ±Y f c.inr := by
  constructor
  ¬∑ introv H hŒ±X hŒ±Y
    rw [H c' (mapPair Œ±X Œ±Y) f (by ext ‚ü®‚ü®‚ü©‚ü© <;> dsimp <;> assumption) (mapPair_equifibered _)]
    constructor
    ¬∑ intro H
      exact ‚ü®H _, H _‚ü©
    ¬∑ rintro H ‚ü®‚ü®‚ü©‚ü©
      exacts [H.1, H.2]
  ¬∑ introv H F' hŒ± h
    let X' := F'.obj ‚ü®WalkingPair.left‚ü©
    let Y' := F'.obj ‚ü®WalkingPair.right‚ü©
    have : F' = pair X' Y' := by
      apply Functor.hext
      ¬∑ rintro ‚ü®‚ü®‚ü©‚ü© <;> rfl
      ¬∑ rintro ‚ü®‚ü®‚ü©‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : _ = j‚ü©‚ü© <;> simp
    clear_value X' Y'
    subst this
    change BinaryCofan X' Y' at c'
    rw [H c' _ _ _ (NatTrans.congr_app hŒ± ‚ü®WalkingPair.left‚ü©)
        (NatTrans.congr_app hŒ± ‚ü®WalkingPair.right‚ü©)]
    constructor
    ¬∑ rintro H ‚ü®‚ü®‚ü©‚ü©
      exacts [H.1, H.2]
    ¬∑ intro H
      exact ‚ü®H _, H _‚ü©
#align category_theory.binary_cofan.is_van_kampen_iff CategoryTheory.BinaryCofan.isVanKampen_iff

theorem BinaryCofan.isVanKampen_mk {X Y : C} (c : BinaryCofan X Y)
    (cofans : ‚àÄ X Y : C, BinaryCofan X Y) (colimits : ‚àÄ X Y, IsColimit (cofans X Y))
    (cones : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z), PullbackCone f g)
    (limits : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z), IsLimit (cones f g))
    (h‚ÇÅ : ‚àÄ {X' Y' : C} (Œ±X : X' ‚ü∂ X) (Œ±Y : Y' ‚ü∂ Y) (f : (cofans X' Y').pt ‚ü∂ c.pt)
      (_ : Œ±X ‚â´ c.inl = (cofans X' Y').inl ‚â´ f) (_ : Œ±Y ‚â´ c.inr = (cofans X' Y').inr ‚â´ f),
      IsPullback (cofans X' Y').inl Œ±X f c.inl ‚àß IsPullback (cofans X' Y').inr Œ±Y f c.inr)
    (h‚ÇÇ : ‚àÄ {Z : C} (f : Z ‚ü∂ c.pt),
      IsColimit (BinaryCofan.mk (cones f c.inl).fst (cones f c.inr).fst)) :
    IsVanKampenColimit c := by
  rw [BinaryCofan.isVanKampen_iff]
  introv hX hY
  constructor
  ¬∑ rintro ‚ü®h‚ü©
    let e := h.coconePointUniqueUpToIso (colimits _ _)
    obtain ‚ü®hl, hr‚ü© := h‚ÇÅ Œ±X Œ±Y (e.inv ‚â´ f) (by simp [hX]) (by simp [hY])
    constructor
    ¬∑ rw [‚Üê Category.id_comp Œ±X, ‚Üê Iso.hom_inv_id_assoc e f]
      haveI : IsIso (ùüô X') := inferInstance
      have : c'.inl ‚â´ e.hom = ùüô X' ‚â´ (cofans X' Y').inl := by
        dsimp
        simp
      exact (IsPullback.of_vert_isIso ‚ü®this‚ü©).paste_vert hl
    ¬∑ rw [‚Üê Category.id_comp Œ±Y, ‚Üê Iso.hom_inv_id_assoc e f]
      haveI : IsIso (ùüô Y') := inferInstance
      have : c'.inr ‚â´ e.hom = ùüô Y' ‚â´ (cofans X' Y').inr := by
        dsimp
        simp
      exact (IsPullback.of_vert_isIso ‚ü®this‚ü©).paste_vert hr
  ¬∑ rintro ‚ü®H‚ÇÅ, H‚ÇÇ‚ü©
    refine' ‚ü®IsColimit.ofIsoColimit _ <| (isoBinaryCofanMk _).symm‚ü©
    let e‚ÇÅ : X' ‚âÖ _ := H‚ÇÅ.isLimit.conePointUniqueUpToIso (limits _ _)
    let e‚ÇÇ : Y' ‚âÖ _ := H‚ÇÇ.isLimit.conePointUniqueUpToIso (limits _ _)
    have he‚ÇÅ : c'.inl = e‚ÇÅ.hom ‚â´ (cones f c.inl).fst := by simp
    have he‚ÇÇ : c'.inr = e‚ÇÇ.hom ‚â´ (cones f c.inr).fst := by simp
    rw [he‚ÇÅ, he‚ÇÇ]
    apply BinaryCofan.isColimitCompRightIso (BinaryCofan.mk _ _)
    apply BinaryCofan.isColimitCompLeftIso (BinaryCofan.mk _ _)
    exact h‚ÇÇ f
#align category_theory.binary_cofan.is_van_kampen_mk CategoryTheory.BinaryCofan.isVanKampen_mk

theorem BinaryCofan.mono_inr_of_isVanKampen [HasInitial C] {X Y : C} {c : BinaryCofan X Y}
    (h : IsVanKampenColimit c) : Mono c.inr := by
  refine' PullbackCone.mono_of_isLimitMkIdId _ (IsPullback.isLimit _)
  refine' (h (BinaryCofan.mk (initial.to Y) (ùüô Y)) (mapPair (initial.to X) (ùüô Y)) c.inr _
      (mapPair_equifibered _)).mp ‚ü®_‚ü© ‚ü®WalkingPair.right‚ü©
  ¬∑ ext ‚ü®‚ü®‚ü©‚ü© <;> dsimp; simp
  ¬∑ exact ((BinaryCofan.isColimit_iff_isIso_inr initialIsInitial _).mpr (by
      dsimp
      infer_instance)).some
#align category_theory.binary_cofan.mono_inr_of_is_van_kampen CategoryTheory.BinaryCofan.mono_inr_of_isVanKampen

theorem FinitaryExtensive.mono_inr_of_isColimit [FinitaryExtensive C] {c : BinaryCofan X Y}
    (hc : IsColimit c) : Mono c.inr :=
  BinaryCofan.mono_inr_of_isVanKampen (FinitaryExtensive.vanKampen c hc)
#align category_theory.finitary_extensive.mono_inr_of_is_colimit CategoryTheory.FinitaryExtensive.mono_inr_of_isColimit

theorem FinitaryExtensive.mono_inl_of_isColimit [FinitaryExtensive C] {c : BinaryCofan X Y}
    (hc : IsColimit c) : Mono c.inl :=
  FinitaryExtensive.mono_inr_of_isColimit (BinaryCofan.isColimitFlip hc)
#align category_theory.finitary_extensive.mono_inl_of_is_colimit CategoryTheory.FinitaryExtensive.mono_inl_of_isColimit

instance [FinitaryExtensive C] (X Y : C) : Mono (coprod.inl : X ‚ü∂ X ‚®ø Y) :=
  (FinitaryExtensive.mono_inl_of_isColimit (coprodIsCoprod X Y) : _)

instance [FinitaryExtensive C] (X Y : C) : Mono (coprod.inr : Y ‚ü∂ X ‚®ø Y) :=
  (FinitaryExtensive.mono_inr_of_isColimit (coprodIsCoprod X Y) : _)

theorem BinaryCofan.isPullback_initial_to_of_isVanKampen [HasInitial C] {c : BinaryCofan X Y}
    (h : IsVanKampenColimit c) : IsPullback (initial.to _) (initial.to _) c.inl c.inr := by
  refine' ((h (BinaryCofan.mk (initial.to Y) (ùüô Y)) (mapPair (initial.to X) (ùüô Y)) c.inr _
      (mapPair_equifibered _)).mp ‚ü®_‚ü© ‚ü®WalkingPair.left‚ü©).flip
  ¬∑ ext ‚ü®‚ü®‚ü©‚ü© <;> dsimp; simp
  ¬∑ exact ((BinaryCofan.isColimit_iff_isIso_inr initialIsInitial _).mpr (by
      dsimp
      infer_instance)).some
#align category_theory.binary_cofan.is_pullback_initial_to_of_is_van_kampen CategoryTheory.BinaryCofan.isPullback_initial_to_of_isVanKampen

theorem FinitaryExtensive.isPullback_initial_to_binaryCofan [FinitaryExtensive C]
    {c : BinaryCofan X Y} (hc : IsColimit c) :
    IsPullback (initial.to _) (initial.to _) c.inl c.inr :=
  BinaryCofan.isPullback_initial_to_of_isVanKampen (FinitaryExtensive.vanKampen c hc)
#align category_theory.finitary_extensive.is_pullback_initial_to_binary_cofan CategoryTheory.FinitaryExtensive.isPullback_initial_to_binaryCofan

theorem hasStrictInitial_of_isUniversal [HasInitial C]
    (H : IsUniversalColimit (BinaryCofan.mk (ùüô (‚ä•_ C)) (ùüô (‚ä•_ C)))) : HasStrictInitialObjects C :=
  hasStrictInitialObjects_of_initial_is_strict
    (by
      intro A f
      suffices IsColimit (BinaryCofan.mk (ùüô A) (ùüô A)) by
        obtain ‚ü®l, h‚ÇÅ, h‚ÇÇ‚ü© := Limits.BinaryCofan.IsColimit.desc' this (f ‚â´ initial.to A) (ùüô A)
        rcases(Category.id_comp _).symm.trans h‚ÇÇ with rfl
        exact ‚ü®‚ü®_, ((Category.id_comp _).symm.trans h‚ÇÅ).symm, initialIsInitial.hom_ext _ _‚ü©‚ü©
      refine' (H (BinaryCofan.mk (ùüô _) (ùüô _)) (mapPair f f) f (by ext ‚ü®‚ü®‚ü©‚ü© <;> dsimp <;> simp)
        (mapPair_equifibered _) _).some
      rintro ‚ü®‚ü®‚ü©‚ü© <;> dsimp <;>
        exact IsPullback.of_horiz_isIso ‚ü®(Category.id_comp _).trans (Category.comp_id _).symm‚ü©)
#align category_theory.has_strict_initial_of_is_universal CategoryTheory.hasStrictInitial_of_isUniversal

instance (priority := 100) hasStrictInitialObjects_of_finitaryExtensive [FinitaryExtensive C] :
    HasStrictInitialObjects C :=
  hasStrictInitial_of_isUniversal (FinitaryExtensive.vanKampen _
    ((BinaryCofan.isColimit_iff_isIso_inr initialIsInitial _).mpr (by
      dsimp
      infer_instance)).some).isUniversal
#align category_theory.has_strict_initial_objects_of_finitary_extensive CategoryTheory.hasStrictInitialObjects_of_finitaryExtensive

theorem finitaryExtensive_iff_of_isTerminal (C : Type u) [Category.{v} C] [HasFiniteCoproducts C]
    [hasPullbackInl : ‚àÄ {X Y Z : C} (f : Z ‚ü∂ X ‚®ø Y), HasPullback coprod.inl f]
    (T : C) (HT : IsTerminal T) (c‚ÇÄ : BinaryCofan T T) (hc‚ÇÄ : IsColimit c‚ÇÄ) :
    FinitaryExtensive C ‚Üî IsVanKampenColimit c‚ÇÄ := by
  refine' ‚ü®fun H => H.van_kampen' c‚ÇÄ hc‚ÇÄ, fun H => _‚ü©
  constructor
  simp_rw [BinaryCofan.isVanKampen_iff] at H ‚ä¢
  intro X Y c hc X' Y' c' Œ±X Œ±Y f hX hY
  obtain ‚ü®d, hd, hd'‚ü© :=
    Limits.BinaryCofan.IsColimit.desc' hc (HT.from _ ‚â´ c‚ÇÄ.inl) (HT.from _ ‚â´ c‚ÇÄ.inr)
  rw [H c' (Œ±X ‚â´ HT.from _) (Œ±Y ‚â´ HT.from _) (f ‚â´ d) (by rw [‚Üê reassoc_of% hX, hd, Category.assoc])
      (by rw [‚Üê reassoc_of% hY, hd', Category.assoc])]
  obtain ‚ü®hl, hr‚ü© := (H c (HT.from _) (HT.from _) d hd.symm hd'.symm).mp ‚ü®hc‚ü©
  rw [hl.paste_vert_iff hX.symm, hr.paste_vert_iff hY.symm]
#align category_theory.finitary_extensive_iff_of_is_terminal CategoryTheory.finitaryExtensive_iff_of_isTerminal

instance types.finitaryExtensive : FinitaryExtensive (Type u) := by
  classical
  rw [finitaryExtensive_iff_of_isTerminal (Type u) PUnit Types.isTerminalPunit _
      (Types.binaryCoproductColimit _ _)]
  apply BinaryCofan.isVanKampen_mk _ _ (fun X Y => Types.binaryCoproductColimit X Y) _
      fun f g => (Limits.Types.pullbackLimitCone f g).2
  ¬∑ intros _ _ _ _ f hŒ±X hŒ±Y
    constructor
    ¬∑ refine' ‚ü®‚ü®hŒ±X.symm‚ü©, ‚ü®PullbackCone.isLimitAux' _ _‚ü©‚ü©
      intro s
      have : ‚àÄ x, ‚àÉ! y, s.fst x = Sum.inl y := by
        intro x
        cases' h : s.fst x with val val
        ¬∑ simp only [Types.binaryCoproductCocone_pt, Functor.const_obj_obj, Sum.inl.injEq,
            exists_unique_eq']
        ¬∑ apply_fun f at h
          cases ((congr_fun s.condition x).symm.trans h).trans (congr_fun hŒ±Y val : _).symm
      delta ExistsUnique at this
      choose l hl hl' using this
      exact ‚ü®l, (funext hl).symm, Types.isTerminalPunit.hom_ext _ _,
        fun {l'} h‚ÇÅ _ => funext fun x => hl' x (l' x) (congr_fun h‚ÇÅ x).symm‚ü©
    ¬∑ refine' ‚ü®‚ü®hŒ±Y.symm‚ü©, ‚ü®PullbackCone.isLimitAux' _ _‚ü©‚ü©
      intro s
      have : ‚àÄ x, ‚àÉ! y, s.fst x = Sum.inr y := by
        intro x
        cases' h : s.fst x with val val
        ¬∑ apply_fun f at h
          cases ((congr_fun s.condition x).symm.trans h).trans (congr_fun hŒ±X val : _).symm
        ¬∑ simp only [Types.binaryCoproductCocone_pt, Functor.const_obj_obj, Sum.inr.injEq,
            exists_unique_eq']
      delta ExistsUnique at this
      choose l hl hl' using this
      exact ‚ü®l, (funext hl).symm, Types.isTerminalPunit.hom_ext _ _,
        fun {l'} h‚ÇÅ _ => funext fun x => hl' x (l' x) (congr_fun h‚ÇÅ x).symm‚ü©
  ¬∑ intro Z f
    dsimp [Limits.Types.binaryCoproductCocone]
    delta Types.PullbackObj
    have : ‚àÄ x, f x = Sum.inl PUnit.unit ‚à® f x = Sum.inr PUnit.unit := by
      intro x
      rcases f x with (‚ü®‚ü®‚ü©‚ü© | ‚ü®‚ü®‚ü©‚ü©)
      exacts [Or.inl rfl, Or.inr rfl]
    let eX : { p : Z √ó PUnit // f p.fst = Sum.inl p.snd } ‚âÉ { x : Z // f x = Sum.inl PUnit.unit } :=
      ‚ü®fun p => ‚ü®p.1.1, by convert p.2‚ü©, fun x => ‚ü®‚ü®_, _‚ü©, x.2‚ü©, fun _ => by ext; rfl,
        fun _ => by ext; rfl‚ü©
    let eY : { p : Z √ó PUnit // f p.fst = Sum.inr p.snd } ‚âÉ { x : Z // f x = Sum.inr PUnit.unit } :=
      ‚ü®fun p => ‚ü®p.1.1, p.2.trans (congr_arg Sum.inr <| Subsingleton.elim _ _)‚ü©,
        fun x => ‚ü®‚ü®_, _‚ü©, x.2‚ü©, fun _ => by ext; rfl, fun _ => by ext; rfl‚ü©
    fapply BinaryCofan.isColimitMk
    ¬∑ exact fun s x => dite _ (fun h => s.inl <| eX.symm ‚ü®x, h‚ü©)
        fun h => s.inr <| eY.symm ‚ü®x, (this x).resolve_left h‚ü©
    ¬∑ intro s
      ext ‚ü®‚ü®x, ‚ü®‚ü©‚ü©, _‚ü©
      dsimp
      split_ifs <;> rfl
    ¬∑ intro s
      ext ‚ü®‚ü®x, ‚ü®‚ü©‚ü©, hx‚ü©
      dsimp
      split_ifs with h
      ¬∑ cases h.symm.trans hx
      ¬∑ rfl
    ¬∑ intro s m e‚ÇÅ e‚ÇÇ
      ext x
      split_ifs
      ¬∑ rw [‚Üê e‚ÇÅ]
        rfl
      ¬∑ rw [‚Üê e‚ÇÇ]
        rfl
#align category_theory.types.finitary_extensive CategoryTheory.types.finitaryExtensive

section TopCat

/-- (Implementation) An auxiliary lemma for the proof that `TopCat` is finitary extensive. -/
-- Porting note : needs to add noncomputable modifier
noncomputable def finitaryExtensiveTopCatAux (Z : TopCat.{u})
    (f : Z ‚ü∂ TopCat.of (Sum PUnit.{u + 1} PUnit.{u + 1})) :
    IsColimit (BinaryCofan.mk
      (TopCat.pullbackFst f (TopCat.binaryCofan (TopCat.of PUnit) (TopCat.of PUnit)).inl)
      (TopCat.pullbackFst f (TopCat.binaryCofan (TopCat.of PUnit) (TopCat.of PUnit)).inr)) := by
  have : ‚àÄ x, f x = Sum.inl PUnit.unit ‚à® f x = Sum.inr PUnit.unit := by
    intro x
    rcases f x with (‚ü®‚ü®‚ü©‚ü© | ‚ü®‚ü®‚ü©‚ü©)
    exacts [Or.inl rfl, Or.inr rfl]
  letI eX : { p : Z √ó PUnit // f p.fst = Sum.inl p.snd } ‚âÉ { x : Z // f x = Sum.inl PUnit.unit } :=
    ‚ü®fun p => ‚ü®p.1.1, p.2.trans (congr_arg Sum.inl <| Subsingleton.elim _ _)‚ü©,
      fun x => ‚ü®‚ü®_, PUnit.unit‚ü©, x.2‚ü©, fun _ => by ext; rfl, fun _ => by ext; rfl‚ü©
  letI eY : { p : Z √ó PUnit // f p.fst = Sum.inr p.snd } ‚âÉ { x : Z // f x = Sum.inr PUnit.unit } :=
    ‚ü®fun p => ‚ü®p.1.1, p.2.trans (congr_arg Sum.inr <| Subsingleton.elim _ _)‚ü©,
      fun x => ‚ü®‚ü®_, PUnit.unit‚ü©, x.2‚ü©, fun _ => by ext; rfl, fun _ => by ext; rfl‚ü©
  fapply BinaryCofan.isColimitMk
  classical -- Porting note: Added
  ¬∑ refine' fun s => ‚ü®fun x => dite _
      (fun h => s.inl <| eX.symm ‚ü®x, h‚ü©) fun h => s.inr <| eY.symm ‚ü®x, (this x).resolve_left h‚ü©, _‚ü©
    rw [continuous_iff_continuousAt]
    intro x
    by_cases f x = Sum.inl PUnit.unit
    ¬∑ revert h x
      apply (IsOpen.continuousOn_iff _).mp
      ¬∑ rw [continuousOn_iff_continuous_restrict]
        convert_to Continuous fun x : { x | f x = Sum.inl PUnit.unit } =>
            s.inl ‚ü®(x.1, PUnit.unit), x.2‚ü©
        ¬∑ ext ‚ü®x, hx‚ü©
          exact dif_pos hx
        -- Porting note : this `(BinaryCofan.inl s).2` was unnecessary
        have := (BinaryCofan.inl s).2
        continuity
      ¬∑ convert f.2.1 _ openEmbedding_inl.open_range
        rename_i x
        exact ‚ü®fun h => ‚ü®_, h.symm‚ü©,
          fun ‚ü®e, h‚ü© => h.symm.trans (congr_arg Sum.inl <| Subsingleton.elim _ _)‚ü©
    ¬∑ revert h x
      apply (IsOpen.continuousOn_iff _).mp
      ¬∑ rw [continuousOn_iff_continuous_restrict]
        convert_to Continuous fun x : { x | f x ‚â† Sum.inl PUnit.unit } =>
            s.inr ‚ü®(x.1, PUnit.unit), (this _).resolve_left x.2‚ü©
        ¬∑ ext ‚ü®x, hx‚ü©
          exact dif_neg hx
        -- Porting note : this `(BinaryCofan.inr s).2` was unnecessary
        have := (BinaryCofan.inr s).2
        continuity
      ¬∑ convert f.2.1 _ openEmbedding_inr.open_range
        rename_i x
        change f x ‚â† Sum.inl PUnit.unit ‚Üî f x ‚àà Set.range Sum.inr
        trans f x = Sum.inr PUnit.unit
        ¬∑ rcases f x with (‚ü®‚ü®‚ü©‚ü© | ‚ü®‚ü®‚ü©‚ü©) <;>
            simp only [iff_self_iff, eq_self_iff_true, not_true, Ne.def, not_false_iff]
        ¬∑ exact ‚ü®fun h => ‚ü®_, h.symm‚ü©,
            fun ‚ü®e, h‚ü© => h.symm.trans (congr_arg Sum.inr <| Subsingleton.elim _ _)‚ü©
  ¬∑ intro s
    ext ‚ü®‚ü®x, ‚ü®‚ü©‚ü©, (hx : f x = Sum.inl PUnit.unit)‚ü©
    change dite _ _ _ = _
    split_ifs with h
    ¬∑ rfl
    ¬∑ cases (h hx) -- Porting note : in Lean3 it is `rfl`
  ¬∑ intro s
    ext ‚ü®‚ü®x, ‚ü®‚ü©‚ü©, hx‚ü©
    change dite _ _ _ = _
    split_ifs with h
    ¬∑ cases h.symm.trans hx
    ¬∑ rfl
  ¬∑ intro s m e‚ÇÅ e‚ÇÇ
    ext x
    change m x = dite _ _ _
    split_ifs
    ¬∑ rw [‚Üê e‚ÇÅ]
      rfl
    ¬∑ rw [‚Üê e‚ÇÇ]
      rfl
set_option linter.uppercaseLean3 false in
#align category_theory.finitary_extensive_Top_aux CategoryTheory.finitaryExtensiveTopCatAux

instance : FinitaryExtensive TopCat.{u} := by
  rw [finitaryExtensive_iff_of_isTerminal TopCat.{u} _ TopCat.isTerminalPUnit _
      (TopCat.binaryCofanIsColimit _ _)]
  apply BinaryCofan.isVanKampen_mk _ _ (fun X Y => TopCat.binaryCofanIsColimit X Y) _
      fun f g => TopCat.pullbackConeIsLimit f g
  ¬∑ intro X' Y' Œ±X Œ±Y f hŒ±X hŒ±Y
    constructor
    ¬∑ refine' ‚ü®‚ü®hŒ±X.symm‚ü©, ‚ü®PullbackCone.isLimitAux' _ _‚ü©‚ü©
      intro s
      have : ‚àÄ x, ‚àÉ! y, s.fst x = Sum.inl y := by
        intro x
        cases' h : s.fst x with val val
        ¬∑ exact ‚ü®val, rfl, fun y h => Sum.inl_injective h.symm‚ü©
        ¬∑ apply_fun f at h
          cases ((ConcreteCategory.congr_hom s.condition x).symm.trans h).trans
            (ConcreteCategory.congr_hom hŒ±Y val : _).symm
      delta ExistsUnique at this
      choose l hl hl' using this
      refine' ‚ü®‚ü®l, _‚ü©, ContinuousMap.ext fun a => (hl a).symm, TopCat.isTerminalPUnit.hom_ext _ _,
        fun {l'} h‚ÇÅ _ => ContinuousMap.ext fun x =>
          hl' x (l' x) (ConcreteCategory.congr_hom h‚ÇÅ x).symm‚ü©
      apply (embedding_inl (Œ± := X') (Œ≤ := Y')).toInducing.continuous_iff.mpr
      convert s.fst.2 using 1
      exact (funext hl).symm
    ¬∑ refine' ‚ü®‚ü®hŒ±Y.symm‚ü©, ‚ü®PullbackCone.isLimitAux' _ _‚ü©‚ü©
      intro s
      have : ‚àÄ x, ‚àÉ! y, s.fst x = Sum.inr y := by
        intro x
        cases' h : s.fst x with val val
        ¬∑ apply_fun f at h
          cases ((ConcreteCategory.congr_hom s.condition x).symm.trans h).trans
            (ConcreteCategory.congr_hom hŒ±X val : _).symm
        ¬∑ exact ‚ü®val, rfl, fun y h => Sum.inr_injective h.symm‚ü©
      delta ExistsUnique at this
      choose l hl hl' using this
      refine' ‚ü®‚ü®l, _‚ü©, ContinuousMap.ext fun a => (hl a).symm, TopCat.isTerminalPUnit.hom_ext _ _,
        fun {l'} h‚ÇÅ _ =>
          ContinuousMap.ext fun x => hl' x (l' x) (ConcreteCategory.congr_hom h‚ÇÅ x).symm‚ü©
      apply (embedding_inr (Œ± := X') (Œ≤ := Y')).toInducing.continuous_iff.mpr
      convert s.fst.2 using 1
      exact (funext hl).symm
  ¬∑ intro Z f
    exact finitaryExtensiveTopCatAux Z f

end TopCat

section Functor

universe v'' u''

variable {D : Type u''} [Category.{v''} D]

theorem NatTrans.Equifibered.whiskerRight {F G : J ‚•§ C} {Œ± : F ‚ü∂ G} (hŒ± : Equifibered Œ±)
    (H : C ‚•§ D) [PreservesLimitsOfShape WalkingCospan H] : Equifibered (whiskerRight Œ± H) :=
  fun _ _ f => (hŒ± f).map H
#align category_theory.nat_trans.equifibered.whisker_right CategoryTheory.NatTrans.Equifibered.whiskerRight

theorem NatTrans.Equifibered.whiskerLeft {K : Type*} [Category K]  {F G : J ‚•§ C} {Œ± : F ‚ü∂ G}
    (hŒ± : Equifibered Œ±) (H : K ‚•§ J) : Equifibered (whiskerLeft H Œ±) :=
  fun _ _ f => hŒ± (H.map f)

theorem IsVanKampenColimit.of_iso {F : J ‚•§ C} {c c' : Cocone F} (H : IsVanKampenColimit c)
    (e : c ‚âÖ c') : IsVanKampenColimit c' := by
  intro F' c'' Œ± f h hŒ±
  have : c'.Œπ ‚â´ (Functor.const J).map e.inv.hom = c.Œπ := by
    ext j
    exact e.inv.2 j
  rw [H c'' Œ± (f ‚â´ e.inv.1) (by rw [Functor.map_comp, ‚Üê reassoc_of% h, this]) hŒ±]
  apply forall_congr'
  intro j
  conv_lhs => rw [‚Üê Category.comp_id (Œ±.app j)]
  haveI : IsIso e.inv.hom := Functor.map_isIso (Cocones.forget _) e.inv
  exact (IsPullback.of_vert_isIso ‚ü®by simp‚ü©).paste_vert_iff (NatTrans.congr_app h j).symm
#align category_theory.is_van_kampen_colimit.of_iso CategoryTheory.IsVanKampenColimit.of_iso

theorem IsVanKampenColimit.of_map {D : Type*} [Category D] (G : C ‚•§ D) {F : J ‚•§ C} {c : Cocone F}
    [PreservesLimitsOfShape WalkingCospan G] [ReflectsLimitsOfShape WalkingCospan G]
    [PreservesColimitsOfShape J G] [ReflectsColimitsOfShape J G]
    (H : IsVanKampenColimit (G.mapCocone c)) : IsVanKampenColimit c := by
  intro F' c' Œ± f h hŒ±
  refine' (Iff.trans _ (H (G.mapCocone c') (whiskerRight Œ± G) (G.map f)
      (by ext j; simpa using G.congr_map (NatTrans.congr_app h j))
      (hŒ±.whiskerRight G))).trans (forall_congr' fun j => _)
  ¬∑ exact ‚ü®fun h => ‚ü®isColimitOfPreserves G h.some‚ü©, fun h => ‚ü®isColimitOfReflects G h.some‚ü©‚ü©
  ¬∑ exact IsPullback.map_iff G (NatTrans.congr_app h.symm j)
#align category_theory.is_van_kampen_colimit.of_map CategoryTheory.IsVanKampenColimit.of_map

theorem IsVanKampenColimit.precompose_isIso {F G : J ‚•§ C} (Œ± : F ‚ü∂ G) [IsIso Œ±]
    {c : Cocone G} (hc : IsVanKampenColimit c) :
    IsVanKampenColimit ((Cocones.precompose Œ±).obj c) := by
  intros F' c' Œ±' f e hŒ±
  refine (hc c' (Œ±' ‚â´ Œ±) f ((Category.assoc _ _ _).trans e)
    (hŒ±.comp (NatTrans.equifibered_of_isIso _))).trans ?_
  apply forall_congr'
  intro j
  simp only [Functor.const_obj_obj, NatTrans.comp_app,
    Cocones.precompose_obj_pt, Cocones.precompose_obj_Œπ]
  have : IsPullback (Œ±.app j ‚â´ c.Œπ.app j) (Œ±.app j) (ùüô _) (c.Œπ.app j) :=
    IsPullback.of_vert_isIso ‚ü®Category.comp_id _‚ü©
  rw [‚Üê IsPullback.paste_vert_iff this _, Category.comp_id]
  exact (congr_app e j).symm

theorem IsVanKampenColimit.precompose_isIso_iff {F G : J ‚•§ C} (Œ± : F ‚ü∂ G) [IsIso Œ±]
    {c : Cocone G} : IsVanKampenColimit ((Cocones.precompose Œ±).obj c) ‚Üî IsVanKampenColimit c :=
  ‚ü®fun hc ‚Ü¶ IsVanKampenColimit.of_iso (IsVanKampenColimit.precompose_isIso (inv Œ±) hc)
    (Cocones.ext (Iso.refl _) (by simp)),
    IsVanKampenColimit.precompose_isIso Œ±‚ü©

theorem IsVanKampenColimit.whiskerEquivalence {K : Type*} [Category K] (e : J ‚âå K)
    {F : K ‚•§ C} {c : Cocone F} (hc : IsVanKampenColimit c) :
    IsVanKampenColimit (c.whisker e.functor) := by
  intro F' c' Œ± f e' hŒ±
  convert hc (c'.whisker e.inverse) (whiskerLeft e.inverse Œ± ‚â´ (e.invFunIdAssoc F).hom) f ?_
    ((hŒ±.whiskerLeft _).comp (NatTrans.equifibered_of_isIso _)) using 1
  ¬∑ exact (IsColimit.whiskerEquivalenceEquiv e.symm).nonempty_congr
  ¬∑ simp only [Functor.const_obj_obj, Functor.comp_obj, Cocone.whisker_pt, Cocone.whisker_Œπ,
      whiskerLeft_app, NatTrans.comp_app, Equivalence.invFunIdAssoc_hom_app, Functor.id_obj]
    constructor
    ¬∑ intro H k
      rw [‚Üê Category.comp_id f]
      refine (H (e.inverse.obj k)).paste_vert ?_
      have : IsIso (ùüô (Cocone.whisker e.functor c).pt) := inferInstance
      exact IsPullback.of_vert_isIso ‚ü®by simp‚ü©
    ¬∑ intro H j
      have : Œ±.app j = F'.map (e.unit.app _) ‚â´ Œ±.app _ ‚â´ F.map (e.counit.app (e.functor.obj j))
      ¬∑ simp [‚Üê Functor.map_comp]
      rw [‚Üê Category.id_comp f, this]
      refine IsPullback.paste_vert ?_ (H (e.functor.obj j))
      exact IsPullback.of_vert_isIso ‚ü®by simp‚ü©
  ¬∑ ext k
    simpa using congr_app e' (e.inverse.obj k)

theorem IsVanKampenColimit.whiskerEquivalence_iff {K : Type*} [Category K] (e : J ‚âå K)
    {F : K ‚•§ C} {c : Cocone F} :
    IsVanKampenColimit (c.whisker e.functor) ‚Üî IsVanKampenColimit c :=
  ‚ü®fun hc ‚Ü¶ ((hc.whiskerEquivalence e.symm).precompose_isIso (e.invFunIdAssoc F).inv).of_iso
      (Cocones.ext (Iso.refl _) (by simp)), IsVanKampenColimit.whiskerEquivalence e‚ü©

theorem isVanKampenColimit_of_evaluation [HasPullbacks D] [HasColimitsOfShape J D] (F : J ‚•§ C ‚•§ D)
    (c : Cocone F) (hc : ‚àÄ x : C, IsVanKampenColimit (((evaluation C D).obj x).mapCocone c)) :
    IsVanKampenColimit c := by
  intro F' c' Œ± f e hŒ±
  have := fun x => hc x (((evaluation C D).obj x).mapCocone c') (whiskerRight Œ± _)
      (((evaluation C D).obj x).map f)
      (by
        ext y
        dsimp
        exact NatTrans.congr_app (NatTrans.congr_app e y) x)
      (hŒ±.whiskerRight _)
  constructor
  ¬∑ rintro ‚ü®hc'‚ü© j
    refine' ‚ü®‚ü®(NatTrans.congr_app e j).symm‚ü©, ‚ü®evaluationJointlyReflectsLimits _ _‚ü©‚ü©
    refine' fun x => (isLimitMapConePullbackConeEquiv _ _).symm _
    exact ((this x).mp ‚ü®PreservesColimit.preserves hc'‚ü© _).isLimit
  ¬∑ exact fun H => ‚ü®evaluationJointlyReflectsColimits _ fun x =>
      ((this x).mpr fun j => (H j).map ((evaluation C D).obj x)).some‚ü©
#align category_theory.is_van_kampen_colimit_of_evaluation CategoryTheory.isVanKampenColimit_of_evaluation

instance [HasPullbacks C] [FinitaryExtensive C] : FinitaryExtensive (D ‚•§ C) :=
  haveI : HasFiniteCoproducts (D ‚•§ C) := ‚ü®fun _ => Limits.functorCategoryHasColimitsOfShape‚ü©
  ‚ü®fun c hc => isVanKampenColimit_of_evaluation _ c fun _ =>
    FinitaryExtensive.vanKampen _ <| PreservesColimit.preserves hc‚ü©

theorem finitaryExtensive_of_preserves_and_reflects (F : C ‚•§ D) [FinitaryExtensive D]
    [HasFiniteCoproducts C] [‚àÄ {X Y Z : C} (f : Z ‚ü∂ X ‚®ø Y), HasPullback coprod.inl f]
    [PreservesLimitsOfShape WalkingCospan F]
    [ReflectsLimitsOfShape WalkingCospan F] [PreservesColimitsOfShape (Discrete WalkingPair) F]
    [ReflectsColimitsOfShape (Discrete WalkingPair) F] : FinitaryExtensive C :=
  ‚ü®fun _ hc => (FinitaryExtensive.vanKampen _ (isColimitOfPreserves F hc)).of_map F‚ü©
#align category_theory.finitary_extensive_of_preserves_and_reflects CategoryTheory.finitaryExtensive_of_preserves_and_reflects

theorem finitaryExtensive_of_preserves_and_reflects_isomorphism (F : C ‚•§ D) [FinitaryExtensive D]
    [HasFiniteCoproducts C] [HasPullbacks C] [PreservesLimitsOfShape WalkingCospan F]
    [PreservesColimitsOfShape (Discrete WalkingPair) F] [ReflectsIsomorphisms F] :
    FinitaryExtensive C := by
  haveI : ReflectsLimitsOfShape WalkingCospan F := reflectsLimitsOfShapeOfReflectsIsomorphisms
  haveI : ReflectsColimitsOfShape (Discrete WalkingPair) F :=
    reflectsColimitsOfShapeOfReflectsIsomorphisms
  exact finitaryExtensive_of_preserves_and_reflects F
#align category_theory.finitary_extensive_of_preserves_and_reflects_isomorphism CategoryTheory.finitaryExtensive_of_preserves_and_reflects_isomorphism

end Functor

section FiniteCoproducts

theorem NatTrans.equifibered_of_discrete {Œπ : Type*} {F G : Discrete Œπ ‚•§ C}
    (Œ± : F ‚ü∂ G) : NatTrans.Equifibered Œ± := by
  rintro ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : i = j‚ü©‚ü©
  simp only [Discrete.functor_map_id]
  refine IsPullback.of_horiz_isIso ‚ü®by rw [Category.id_comp, Category.comp_id]‚ü©

theorem isUniversalColimit_extendCofan {n : ‚Ñï} (f : Fin (n + 1) ‚Üí C)
    {c‚ÇÅ : Cofan fun i : Fin n ‚Ü¶ f i.succ} {c‚ÇÇ : BinaryCofan (f 0) c‚ÇÅ.pt}
    (t‚ÇÅ : IsUniversalColimit c‚ÇÅ) (t‚ÇÇ : IsUniversalColimit c‚ÇÇ)
    [‚àÄ {Z} (i : Z ‚ü∂ c‚ÇÇ.pt), HasPullback c‚ÇÇ.inr i] :
    IsUniversalColimit (extendCofan c‚ÇÅ c‚ÇÇ) := by
  intro F c Œ± i e hŒ± H
  let F' : Fin (n + 1) ‚Üí C := F.obj ‚àò Discrete.mk
  have : F = Discrete.functor F'
  ¬∑ apply Functor.hext
    ¬∑ exact fun i ‚Ü¶ rfl
    ¬∑ rintro ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : i = j‚ü©‚ü©
      simp
  have t‚ÇÅ' := @t‚ÇÅ (Discrete.functor (fun j ‚Ü¶ F.obj ‚ü®j.succ‚ü©))
    (Cofan.mk (pullback c‚ÇÇ.inr i) <| fun j ‚Ü¶ pullback.lift (Œ±.app _ ‚â´ c‚ÇÅ.inj _) (c.Œπ.app _) ?_)
    (Discrete.natTrans <| fun i ‚Ü¶ Œ±.app _) pullback.fst ?_ (NatTrans.equifibered_of_discrete _) ?_
  rotate_left
  ¬∑ simpa only [Functor.const_obj_obj, pair_obj_right, Discrete.functor_obj, Category.assoc,
      extendCofan_pt, Functor.const_obj_obj, NatTrans.comp_app, extendCofan_Œπ_app,
      Fin.cases_succ, Functor.const_map_app] using congr_app e ‚ü®j.succ‚ü©
  ¬∑ ext j
    dsimp
    simp only [limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app, Cofan.inj]
  ¬∑ intro j
    simp only [pair_obj_right, Functor.const_obj_obj, Discrete.functor_obj, id_eq,
      extendCofan_pt, eq_mpr_eq_cast, Cofan.mk_pt, Cofan.mk_Œπ_app, Discrete.natTrans_app]
    refine IsPullback.of_right ?_ ?_ (IsPullback.of_hasPullback (BinaryCofan.inr c‚ÇÇ) i).flip
    ¬∑ simp only [Functor.const_obj_obj, pair_obj_right, limit.lift_œÄ,
        PullbackCone.mk_pt, PullbackCone.mk_œÄ_app]
      exact H _
    ¬∑ simp only [limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app, Cofan.inj]
  obtain ‚ü®H‚ÇÅ‚ü© := t‚ÇÅ'
  have t‚ÇÇ' := @t‚ÇÇ (pair (F.obj ‚ü®0‚ü©) (pullback c‚ÇÇ.inr i)) (BinaryCofan.mk (c.Œπ.app ‚ü®0‚ü©) pullback.snd)
    (mapPair (Œ±.app _) pullback.fst) i ?_ (mapPair_equifibered _) ?_
  rotate_left
  ¬∑ ext ‚ü®‚ü®‚ü©‚ü©
    ¬∑ simpa [mapPair] using congr_app e ‚ü®0‚ü©
    ¬∑ simpa using pullback.condition
  ¬∑ rintro ‚ü®‚ü®‚ü©‚ü©
    ¬∑ simp only [pair_obj_right, Functor.const_obj_obj, pair_obj_left, BinaryCofan.mk_pt,
        BinaryCofan.Œπ_app_left, BinaryCofan.mk_inl, mapPair_left]
      exact H ‚ü®0‚ü©
    ¬∑ simp only [pair_obj_right, Functor.const_obj_obj, BinaryCofan.mk_pt, BinaryCofan.Œπ_app_right,
        BinaryCofan.mk_inr, mapPair_right]
      exact (IsPullback.of_hasPullback (BinaryCofan.inr c‚ÇÇ) i).flip
  obtain ‚ü®H‚ÇÇ‚ü© := t‚ÇÇ'
  clear_value F'
  subst this
  refine ‚ü®IsColimit.ofIsoColimit (extendCofanIsColimit
    (fun i ‚Ü¶ (Discrete.functor F').obj ‚ü®i‚ü©) H‚ÇÅ H‚ÇÇ) <| Cocones.ext (Iso.refl _) ?_‚ü©
  dsimp
  rintro ‚ü®j‚ü©
  simp only [Discrete.functor_obj, limit.lift_œÄ, PullbackCone.mk_pt,
    PullbackCone.mk_œÄ_app, Category.comp_id]
  induction' j using Fin.inductionOn
  ¬∑ simp only [Fin.cases_zero]
  ¬∑ simp only [Fin.cases_succ]

theorem isVanKampenColimit_extendCofan {n : ‚Ñï} (f : Fin (n + 1) ‚Üí C)
    {c‚ÇÅ : Cofan fun i : Fin n ‚Ü¶ f i.succ} {c‚ÇÇ : BinaryCofan (f 0) c‚ÇÅ.pt}
    (t‚ÇÅ : IsVanKampenColimit c‚ÇÅ) (t‚ÇÇ : IsVanKampenColimit c‚ÇÇ)
    [‚àÄ {Z} (i : Z ‚ü∂ c‚ÇÇ.pt), HasPullback c‚ÇÇ.inr i]
    [HasFiniteCoproducts C] :
    IsVanKampenColimit (extendCofan c‚ÇÅ c‚ÇÇ) := by
  intro F c Œ± i e hŒ±
  refine ‚ü®?_, isUniversalColimit_extendCofan f t‚ÇÅ.isUniversal t‚ÇÇ.isUniversal c Œ± i e hŒ±‚ü©
  intro ‚ü®Hc‚ü© ‚ü®j‚ü©
  have t‚ÇÇ' := (@t‚ÇÇ (pair (F.obj ‚ü®0‚ü©) (‚àê fun (j : Fin n) ‚Ü¶ F.obj ‚ü®j.succ‚ü©))
    (BinaryCofan.mk (P := c.pt) (c.Œπ.app _) (Sigma.desc <| fun b ‚Ü¶ c.Œπ.app _))
    (mapPair (Œ±.app _) (Sigma.desc <| fun b ‚Ü¶ Œ±.app _ ‚â´ c‚ÇÅ.inj _)) i ?_
    (mapPair_equifibered _)).mp ‚ü®?_‚ü©
  rotate_left
  ¬∑ ext ‚ü®‚ü®‚ü©‚ü©
    ¬∑ simpa only [pair_obj_left, Functor.const_obj_obj, pair_obj_right, Discrete.functor_obj,
        NatTrans.comp_app, mapPair_left, BinaryCofan.Œπ_app_left, BinaryCofan.mk_pt,
        BinaryCofan.mk_inl, Functor.const_map_app, extendCofan_pt,
        extendCofan_Œπ_app, Fin.cases_zero] using congr_app e ‚ü®0‚ü©
    ¬∑ dsimp
      ext j
      simpa only [colimit.Œπ_desc_assoc, Discrete.functor_obj, Cofan.mk_pt, Cofan.mk_Œπ_app,
        Category.assoc, extendCofan_pt, Functor.const_obj_obj, NatTrans.comp_app, extendCofan_Œπ_app,
        Fin.cases_succ, Functor.const_map_app] using congr_app e ‚ü®j.succ‚ü©
  ¬∑ let F' : Fin (n + 1) ‚Üí C := F.obj ‚àò Discrete.mk
    have : F = Discrete.functor F'
    ¬∑ apply Functor.hext
      ¬∑ exact fun i ‚Ü¶ rfl
      ¬∑ rintro ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : i = j‚ü©‚ü©
        simp
    clear_value F'
    subst this
    apply BinaryCofan.IsColimit.mk _ (fun {T} f‚ÇÅ f‚ÇÇ ‚Ü¶ Hc.desc (Cofan.mk T (Fin.cases f‚ÇÅ
      (fun i ‚Ü¶ Sigma.Œπ (fun (j : Fin n) ‚Ü¶ (Discrete.functor F').obj ‚ü®j.succ‚ü©) _ ‚â´ f‚ÇÇ))))
    ¬∑ intro T f‚ÇÅ f‚ÇÇ
      simp only [Discrete.functor_obj, pair_obj_left, BinaryCofan.mk_pt, Functor.const_obj_obj,
        BinaryCofan.Œπ_app_left, BinaryCofan.mk_inl, IsColimit.fac, Cofan.mk_pt, Cofan.mk_Œπ_app,
        Fin.cases_zero]
    ¬∑ intro T f‚ÇÅ f‚ÇÇ
      simp only [Discrete.functor_obj, pair_obj_right, BinaryCofan.mk_pt, Functor.const_obj_obj,
        BinaryCofan.Œπ_app_right, BinaryCofan.mk_inr]
      ext j
      simp only [colimit.Œπ_desc_assoc, Discrete.functor_obj, Cofan.mk_pt,
        Cofan.mk_Œπ_app, IsColimit.fac, Fin.cases_succ]
    ¬∑ intro T f‚ÇÅ f‚ÇÇ f‚ÇÉ m‚ÇÅ m‚ÇÇ
      simp at m‚ÇÅ m‚ÇÇ ‚ä¢
      refine Hc.uniq (Cofan.mk T (Fin.cases f‚ÇÅ
        (fun i ‚Ü¶ Sigma.Œπ (fun (j : Fin n) ‚Ü¶ (Discrete.functor F').obj ‚ü®j.succ‚ü©) _ ‚â´ f‚ÇÇ))) _ ?_
      intro ‚ü®j‚ü©
      simp only [Discrete.functor_obj, Cofan.mk_pt, Functor.const_obj_obj, Cofan.mk_Œπ_app]
      induction' j using Fin.inductionOn with j _
      ¬∑ simp only [Fin.cases_zero, m‚ÇÅ]
      ¬∑ simp only [‚Üê m‚ÇÇ, colimit.Œπ_desc_assoc, Discrete.functor_obj,
          Cofan.mk_pt, Cofan.mk_Œπ_app, Fin.cases_succ]
  induction' j using Fin.inductionOn with j _
  ¬∑ exact t‚ÇÇ' ‚ü®WalkingPair.left‚ü©
  ¬∑ have t‚ÇÅ' := (@t‚ÇÅ (Discrete.functor (fun j ‚Ü¶ F.obj ‚ü®j.succ‚ü©)) (Cofan.mk _ _) (Discrete.natTrans
      <| fun i ‚Ü¶ Œ±.app _) (Sigma.desc (fun j ‚Ü¶ Œ±.app _ ‚â´ c‚ÇÅ.inj _)) ?_
      (NatTrans.equifibered_of_discrete _)).mp ‚ü®coproductIsCoproduct _‚ü© ‚ü®j‚ü©
    rotate_left
    ¬∑ ext ‚ü®j‚ü©
      dsimp
      erw [colimit.Œπ_desc] -- Why?
      rfl
    simpa [Functor.const_obj_obj, Discrete.functor_obj, extendCofan_pt, extendCofan_Œπ_app,
      Fin.cases_succ, BinaryCofan.mk_pt, colimit.cocone_x, Cofan.mk_pt, Cofan.mk_Œπ_app,
      BinaryCofan.Œπ_app_right, BinaryCofan.mk_inr, colimit.Œπ_desc,
      Discrete.natTrans_app] using t‚ÇÅ'.paste_horiz (t‚ÇÇ' ‚ü®WalkingPair.right‚ü©)

def functorOfIsEmpty (J : Type*) [Category J] (C : Type*) [Category C] [IsEmpty J] : J ‚•§ C where
  obj := isEmptyElim
  map := fun {X} ‚Ü¶ isEmptyElim X
  map_id := fun {X} ‚Ü¶ isEmptyElim X
  map_comp := fun {X} ‚Ü¶ isEmptyElim X

instance (Œ± : Type*) [IsEmpty Œ±] : IsEmpty (Discrete Œ±) := Function.isEmpty Discrete.as

def equivalenceOfIsEmpty (J : Type*) [Category J] [IsEmpty J] (K : Type*) [Category K] [IsEmpty K] :
  J ‚âå K where
  functor := functorOfIsEmpty J K
  inverse := functorOfIsEmpty K J
  unitIso := NatIso.ofComponents isEmptyElim (fun {X} ‚Ü¶ isEmptyElim X)
  counitIso := NatIso.ofComponents isEmptyElim (fun {X} ‚Ü¶ isEmptyElim X)
  functor_unitIso_comp := fun {X} ‚Ü¶ isEmptyElim X

theorem isVanKampenColimit_of_isEmpty [HasStrictInitialObjects C] [IsEmpty J] {F : J ‚•§ C}
  (c : Cocone F) (hc : IsColimit c) : IsVanKampenColimit c := by
  have : IsInitial c.pt
  ¬∑ have := (IsColimit.precomposeInvEquiv (Functor.uniqueFromEmpty _) _).symm
      (hc.whiskerEquivalence (equivalenceOfIsEmpty (Discrete PEmpty.{1}) J))
    exact IsColimit.ofIsoColimit this (Cocones.ext (Iso.refl c.pt) (fun {X} ‚Ü¶ isEmptyElim X))
  replace this := IsInitial.isVanKampenColimit this
  apply (IsVanKampenColimit.whiskerEquivalence_iff
    (equivalenceOfIsEmpty (Discrete PEmpty.{1}) J)).mp
  exact (this.precompose_isIso (Functor.uniqueFromEmpty
    ((equivalenceOfIsEmpty (Discrete PEmpty.{1}) J).functor ‚ãô F)).hom).of_iso
    (Cocones.ext (Iso.refl _) (by simp))

theorem FinitaryExtensive.isVanKampen_finiteCoproducts_Fin [FinitaryExtensive C] {n : ‚Ñï}
  {F : Discrete (Fin n) ‚•§ C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by
  let f : Fin n ‚Üí C := F.obj ‚àò Discrete.mk
  have : F = Discrete.functor f
  ¬∑ refine Functor.hext (fun i ‚Ü¶ rfl) ?_
    rintro ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : i = j‚ü©‚ü©
    simp
  clear_value f
  subst this
  induction' n with n IH
  ¬∑ exact isVanKampenColimit_of_isEmpty _ hc
  ¬∑ apply IsVanKampenColimit.of_iso _
      ((extendCofanIsColimit f (coproductIsCoproduct _) (coprodIsCoprod _ _)).uniqueUpToIso hc)
    apply @isVanKampenColimit_extendCofan _ _ _ _ _ _ _ _ ?_
    ¬∑ apply IH
      exact coproductIsCoproduct _
    ¬∑ apply FinitaryExtensive.van_kampen'
      exact coprodIsCoprod _ _
    ¬∑ dsimp
      infer_instance

theorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {Œπ : Type*}
    [Finite Œπ] {F : Discrete Œπ ‚•§ C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by
  obtain ‚ü®n, ‚ü®e‚ü©‚ü© := Finite.exists_equiv_fin Œπ
  apply (IsVanKampenColimit.whiskerEquivalence_iff (Discrete.equivalence e).symm).mp
  apply FinitaryExtensive.isVanKampen_finiteCoproducts_Fin
  exact (IsColimit.whiskerEquivalenceEquiv (Discrete.equivalence e).symm) hc

lemma FinitaryExtensive.hasPullbacks_of_is_coproduct [FinitaryExtensive C] {Œπ : Type*}
    [Finite Œπ] {F : Discrete Œπ ‚•§ C} {c : Cocone F} (hc : IsColimit c) (i : Discrete Œπ) {X : C}
    (g : X ‚ü∂ _) : HasPullback g (c.Œπ.app i) := by
  classical
  let f : Œπ ‚Üí C := F.obj ‚àò Discrete.mk
  have : F = Discrete.functor f
  ¬∑ refine Functor.hext (fun i ‚Ü¶ rfl) ?_
    rintro ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®rfl : i = j‚ü©‚ü©
    simp
  clear_value f
  subst this
  change Cofan f at c
  obtain ‚ü®i‚ü© := i
  let e : ‚àê f ‚âÖ f i ‚®ø (‚àê fun j : ({i}·∂ú : Set Œπ) ‚Ü¶ f j) :=
  { hom := Sigma.desc (fun j ‚Ü¶ if h : j = i then eqToHom (congr_arg f h) ‚â´ coprod.inl else
      Sigma.Œπ (fun j : ({i}·∂ú : Set Œπ) ‚Ü¶ f j) ‚ü®j, h‚ü© ‚â´ coprod.inr)
    inv := coprod.desc (Sigma.Œπ f i) (Sigma.desc <| fun j ‚Ü¶ Sigma.Œπ f j)
    hom_inv_id := by aesop_cat
    inv_hom_id := by
      ext j
      ¬∑ simp
      ¬∑ simp only [coprod.desc_comp, colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app,
          eqToHom_refl, Category.id_comp, dite_true, BinaryCofan.mk_pt, BinaryCofan.Œπ_app_right,
          BinaryCofan.mk_inr, colimit.Œπ_desc_assoc, Discrete.functor_obj, Category.comp_id]
        exact dif_neg j.prop }
  let e' : c.pt ‚âÖ f i ‚®ø (‚àê fun j : ({i}·∂ú : Set Œπ) ‚Ü¶ f j) :=
    hc.coconePointUniqueUpToIso (getColimitCocone _).2 ‚â™‚â´ e
  have : coprod.inl ‚â´ e'.inv = c.Œπ.app ‚ü®i‚ü©
  ¬∑ simp only [Iso.trans_inv, coprod.desc_comp, colimit.Œπ_desc, BinaryCofan.mk_pt,
      BinaryCofan.Œπ_app_left, BinaryCofan.mk_inl]
    exact colimit.comp_coconePointUniqueUpToIso_inv _ _
  clear_value e'
  rw [‚Üê this]
  have : IsPullback (ùüô _) (g ‚â´ e'.hom) g e'.inv := IsPullback.of_horiz_isIso ‚ü®by simp‚ü©
  exact ‚ü®‚ü®‚ü®_, ((IsPullback.of_hasPullback (g ‚â´ e'.hom) coprod.inl).paste_horiz this).isLimit‚ü©‚ü©‚ü©

instance FinitaryExtensive.hasPullbacks_of_inclusions [FinitaryExtensive C] {X Z : C} {Œ± : Type*}
    (f : X ‚ü∂ Z) {Y : (a : Œ±) ‚Üí C} (i : (a : Œ±) ‚Üí Y a ‚ü∂ Z) [Finite Œ±]
    [hi : IsIso (Sigma.desc i)] (a : Œ±) : HasPullback f (i a) := by
  apply FinitaryExtensive.hasPullbacks_of_is_coproduct (c := Cofan.mk Z i)
  exact @IsColimit.ofPointIso (t := Cofan.mk Z i) (P := _) hi

lemma FinitaryExtensive.sigma_desc_iso [FinitaryExtensive C] {Œ± : Type} [Finite Œ±] {X : C}
    {Z : Œ± ‚Üí C} (œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X) {Y : C} (f : Y ‚ü∂ X) (hœÄ : IsIso (Sigma.desc œÄ)) :
    IsIso (Sigma.desc ((fun _ ‚Ü¶ pullback.fst) : (a : Œ±) ‚Üí pullback f (œÄ a) ‚ü∂ _)) := by
  suffices IsColimit (Cofan.mk _ ((fun _ ‚Ü¶ pullback.fst) : (a : Œ±) ‚Üí pullback f (œÄ a) ‚ü∂ _)) by
    change IsIso (this.coconePointUniqueUpToIso (getColimitCocone _).2).inv
    infer_instance
  let : IsColimit (Cofan.mk X œÄ)
  ¬∑ refine @IsColimit.ofPointIso (t := Cofan.mk X œÄ) (P := coproductIsCoproduct Z) ?_
    convert hœÄ
    simp [coproductIsCoproduct]
  refine ((FinitaryExtensive.isVanKampen_finiteCoproducts this
    (Cofan.mk _ ((fun _ ‚Ü¶ pullback.fst) : (a : Œ±) ‚Üí pullback f (œÄ a) ‚ü∂ _))
    (Discrete.natTrans <| fun i ‚Ü¶ pullback.snd) f ?_
    (NatTrans.equifibered_of_discrete _)).mpr ?_).some
  ¬∑ ext
    simp [pullback.condition]
  ¬∑ exact fun j ‚Ü¶ IsPullback.of_hasPullback f (œÄ j.as)

end FiniteCoproducts

end Extensive

end CategoryTheory
