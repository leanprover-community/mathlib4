/-
Copyright (c) 2020 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison
-/
import Mathlib.Algebra.Category.Grp.Basic
import Mathlib.Algebra.Ring.PUnit
import Mathlib.CategoryTheory.Adjunction.Limits
import Mathlib.CategoryTheory.Conj
import Mathlib.CategoryTheory.Limits.FunctorCategory.Basic
import Mathlib.CategoryTheory.Limits.Preserves.Basic
import Mathlib.CategoryTheory.SingleObj

/-!
# `Action V G`, the category of actions of a monoid `G` inside some category `V`.

The prototypical example is `V = ModuleCat R`,
where `Action (ModuleCat R) G` is the category of `R`-linear representations of `G`.

We check `Action V G ‚âå (CategoryTheory.singleObj G ‚•§ V)`,
and construct the restriction functors
`res {G H} [Monoid G] [Monoid H] (f : G ‚Üí* H) : Action V H ‚•§ Action V G`.
-/


universe u v

open CategoryTheory Limits

variable (V : Type*) [Category V]

-- Note: this is _not_ a categorical action of `G` on `V`.
/-- An `Action V G` represents a bundled action of
the monoid `G` on an object of some category `V`.

As an example, when `V = ModuleCat R`, this is an `R`-linear representation of `G`,
while when `V = Type` this is a `G`-action.
-/
structure Action (G : Type*) [Monoid G] where
  /-- The object this action acts on -/
  V : V
  /-- The underlying monoid homomorphism of this action -/
  œÅ : G ‚Üí* End V

namespace Action

variable {V}

theorem œÅ_one {G : Type*} [Monoid G] (A : Action V G) : A.œÅ 1 = ùüô A.V := by simp

/-- When a group acts, we can lift the action to the group of automorphisms. -/
@[simps]
def œÅAut {G : Type*} [Group G] (A : Action V G) : G ‚Üí* Aut A.V where
  toFun g :=
    { hom := A.œÅ g
      inv := A.œÅ (g‚Åª¬π : G)
      hom_inv_id := (A.œÅ.map_mul (g‚Åª¬π : G) g).symm.trans (by rw [inv_mul_cancel, œÅ_one])
      inv_hom_id := (A.œÅ.map_mul g (g‚Åª¬π : G)).symm.trans (by rw [mul_inv_cancel, œÅ_one]) }
  map_one' := Aut.ext A.œÅ.map_one
  map_mul' x y := Aut.ext (A.œÅ.map_mul x y)

variable (G : Type*) [Monoid G]

section

/-- The action defined by sending every group element to the identity. -/
@[simps]
def trivial (X : V) : Action V G := { V := X, œÅ := 1 }

instance inhabited' : Inhabited (Action (Type*) G) :=
  ‚ü®‚ü®PUnit, 1‚ü©‚ü©

instance : Inhabited (Action AddCommGrp G) :=
  ‚ü®trivial G <| AddCommGrp.of PUnit‚ü©

end

variable {G}

/-- A homomorphism of `Action V G`s is a morphism between the underlying objects,
commuting with the action of `G`.
-/
@[ext]
structure Hom (M N : Action V G) where
  /-- The morphism between the underlying objects of this action -/
  hom : M.V ‚ü∂ N.V
  comm : ‚àÄ g : G, M.œÅ g ‚â´ hom = hom ‚â´ N.œÅ g := by aesop_cat

namespace Hom

attribute [reassoc] comm
attribute [local simp] comm comm_assoc

/-- The identity morphism on an `Action V G`. -/
@[simps]
def id (M : Action V G) : Action.Hom M M where hom := ùüô M.V

instance (M : Action V G) : Inhabited (Action.Hom M M) :=
  ‚ü®id M‚ü©

/-- The composition of two `Action V G` homomorphisms is the composition of the underlying maps.
-/
@[simps]
def comp {M N K : Action V G} (p : Action.Hom M N) (q : Action.Hom N K) : Action.Hom M K where
  hom := p.hom ‚â´ q.hom

end Hom

instance : Category (Action V G) where
  Hom M N := Hom M N
  id M := Hom.id M
  comp f g := Hom.comp f g

@[ext]
lemma hom_ext {M N : Action V G} (œÜ‚ÇÅ œÜ‚ÇÇ : M ‚ü∂ N) (h : œÜ‚ÇÅ.hom = œÜ‚ÇÇ.hom) : œÜ‚ÇÅ = œÜ‚ÇÇ :=
  Hom.ext h

@[simp]
theorem id_hom (M : Action V G) : (ùüô M : Hom M M).hom = ùüô M.V :=
  rfl

@[simp]
theorem comp_hom {M N K : Action V G} (f : M ‚ü∂ N) (g : N ‚ü∂ K) :
    (f ‚â´ g : Hom M K).hom = f.hom ‚â´ g.hom :=
  rfl

@[simp]
theorem hom_inv_hom {M N : Action V G} (f : M ‚âÖ N) :
    f.hom.hom ‚â´ f.inv.hom = ùüô M.V := by
  rw [‚Üê comp_hom, Iso.hom_inv_id, id_hom]

@[simp]
theorem inv_hom_hom {M N : Action V G} (f : M ‚âÖ N) :
    f.inv.hom ‚â´ f.hom.hom = ùüô N.V := by
  rw [‚Üê comp_hom, Iso.inv_hom_id, id_hom]

/-- Construct an isomorphism of `G` actions/representations
from an isomorphism of the underlying objects,
where the forward direction commutes with the group action. -/
@[simps]
def mkIso {M N : Action V G} (f : M.V ‚âÖ N.V)
    (comm : ‚àÄ g : G, M.œÅ g ‚â´ f.hom = f.hom ‚â´ N.œÅ g := by aesop_cat) : M ‚âÖ N where
  hom :=
    { hom := f.hom
      comm := comm }
  inv :=
    { hom := f.inv
      comm := fun g => by have w := comm g =‚â´ f.inv; simp at w; simp [w] }

instance (priority := 100) isIso_of_hom_isIso {M N : Action V G} (f : M ‚ü∂ N) [IsIso f.hom] :
    IsIso f := (mkIso (asIso f.hom) f.comm).isIso_hom

instance isIso_hom_mk {M N : Action V G} (f : M.V ‚ü∂ N.V) [IsIso f] (w) :
    @IsIso _ _ M N (Hom.mk f w) :=
  (mkIso (asIso f) w).isIso_hom

instance {M N : Action V G} (f : M ‚âÖ N) : IsIso f.hom.hom where
  out := ‚ü®f.inv.hom, by simp‚ü©

instance {M N : Action V G} (f : M ‚âÖ N) : IsIso f.inv.hom where
  out := ‚ü®f.hom.hom, by simp‚ü©

namespace FunctorCategoryEquivalence

/-- Auxiliary definition for `functorCategoryEquivalence`. -/
@[simps]
def functor : Action V G ‚•§ SingleObj G ‚•§ V where
  obj M :=
    { obj := fun _ => M.V
      map := fun g => M.œÅ g
      map_id := fun _ => M.œÅ.map_one
      map_comp := fun g h => M.œÅ.map_mul h g }
  map f :=
    { app := fun _ => f.hom
      naturality := fun _ _ g => f.comm g }

/-- Auxiliary definition for `functorCategoryEquivalence`. -/
@[simps]
def inverse : (SingleObj G ‚•§ V) ‚•§ Action V G where
  obj F :=
    { V := F.obj PUnit.unit
      œÅ :=
        { toFun := fun g => F.map g
          map_one' := F.map_id PUnit.unit
          map_mul' := fun g h => F.map_comp h g } }
  map f :=
    { hom := f.app PUnit.unit
      comm := fun g => f.naturality g }

/-- Auxiliary definition for `functorCategoryEquivalence`. -/
@[simps!]
def unitIso : ùü≠ (Action V G) ‚âÖ functor ‚ãô inverse :=
  NatIso.ofComponents fun M => mkIso (Iso.refl _)

/-- Auxiliary definition for `functorCategoryEquivalence`. -/
@[simps!]
def counitIso : inverse ‚ãô functor ‚âÖ ùü≠ (SingleObj G ‚•§ V) :=
  NatIso.ofComponents fun M => NatIso.ofComponents fun _ => Iso.refl _

end FunctorCategoryEquivalence

section

open FunctorCategoryEquivalence

variable (V G)

/-- The category of actions of `G` in the category `V`
is equivalent to the functor category `singleObj G ‚•§ V`.
-/
@[simps]
def functorCategoryEquivalence : Action V G ‚âå SingleObj G ‚•§ V where
  functor := functor
  inverse := inverse
  unitIso := unitIso
  counitIso := counitIso

instance : (FunctorCategoryEquivalence.functor (V := V) (G := G)).IsEquivalence :=
  (functorCategoryEquivalence V G).isEquivalence_functor

instance : (FunctorCategoryEquivalence.inverse (V := V) (G := G)).IsEquivalence :=
  (functorCategoryEquivalence V G).isEquivalence_inverse

end

section Forget

variable (V G)

/-- (implementation) The forgetful functor from bundled actions to the underlying objects.

Use the `CategoryTheory.forget` API provided by the `HasForget` instance below,
rather than using this directly.
-/
@[simps]
def forget : Action V G ‚•§ V where
  obj M := M.V
  map f := f.hom

instance : (forget V G).Faithful where map_injective w := Hom.ext w

instance [HasForget V] : HasForget (Action V G) where
  forget := forget V G ‚ãô HasForget.forget

/-- The type of `V`-morphisms that can be lifted back to morphisms in the category `Action`. -/
abbrev HomSubtype {FV : V ‚Üí V ‚Üí Type*} {CV : V ‚Üí Type*} [‚àÄ X Y, FunLike (FV X Y) (CV X) (CV Y)]
    [ConcreteCategory V FV] (M N : Action V G) :=
  { f : FV M.V N.V // ‚àÄ g : G,
      f ‚àò ConcreteCategory.hom (M.œÅ g) = ConcreteCategory.hom (N.œÅ g) ‚àò f }

instance {FV : V ‚Üí V ‚Üí Type*} {CV : V ‚Üí Type*} [‚àÄ X Y, FunLike (FV X Y) (CV X) (CV Y)]
    [ConcreteCategory V FV] (M N : Action V G) :
    FunLike (HomSubtype V G M N) (CV M.V) (CV N.V) where
  coe f := f.1
  coe_injective' _ _ h := Subtype.ext (DFunLike.coe_injective h)

instance {FV : V ‚Üí V ‚Üí Type*} {CV : V ‚Üí Type*} [‚àÄ X Y, FunLike (FV X Y) (CV X) (CV Y)]
    [ConcreteCategory V FV] : ConcreteCategory (Action V G) (HomSubtype V G) where
  hom f := ‚ü®ConcreteCategory.hom (C := V) f.1, fun g => by
    ext
    simpa using CategoryTheory.congr_fun (f.2 g) _‚ü©
  ofHom f := ‚ü®ConcreteCategory.ofHom (C := V) f, fun g => ConcreteCategory.ext_apply fun x => by
    simpa [ConcreteCategory.hom_ofHom] using congr_fun (f.2 g) x‚ü©
  hom_ofHom _ := by dsimp; ext; simp [ConcreteCategory.hom_ofHom]
  ofHom_hom _ := by ext; simp [ConcreteCategory.ofHom_hom]
  id_apply := ConcreteCategory.id_apply (C := V)
  comp_apply _ _ := ConcreteCategory.comp_apply (C := V) _ _

instance hasForgetToV [HasForget V] : HasForget‚ÇÇ (Action V G) V where forget‚ÇÇ := forget V G

/-- The forgetful functor is intertwined by `functorCategoryEquivalence` with
evaluation at `PUnit.star`. -/
def functorCategoryEquivalenceCompEvaluation :
    (functorCategoryEquivalence V G).functor ‚ãô (evaluation _ _).obj PUnit.unit ‚âÖ forget V G :=
  Iso.refl _

noncomputable instance preservesLimits_forget [HasLimits V] :
    PreservesLimits (forget V G) :=
  Limits.preservesLimits_of_natIso (Action.functorCategoryEquivalenceCompEvaluation V G)

noncomputable instance preservesColimits_forget [HasColimits V] :
    PreservesColimits (forget V G) :=
  preservesColimits_of_natIso (Action.functorCategoryEquivalenceCompEvaluation V G)

-- TODO construct categorical images?
end Forget

theorem Iso.conj_œÅ {M N : Action V G} (f : M ‚âÖ N) (g : G) :
    N.œÅ g = ((forget V G).mapIso f).conj (M.œÅ g) := by
      rw [Iso.conj_apply, Iso.eq_inv_comp]; simp [f.hom.comm]

/-- Actions/representations of the trivial group are just objects in the ambient category. -/
def actionPunitEquivalence : Action V PUnit ‚âå V where
  functor := forget V _
  inverse :=
    { obj := fun X => ‚ü®X, 1‚ü©
      map := fun f => ‚ü®f, fun ‚ü®‚ü© => by simp‚ü© }
  unitIso :=
    NatIso.ofComponents fun X => mkIso (Iso.refl _) fun ‚ü®‚ü© => by
      simp only [Functor.id_obj, MonoidHom.one_apply, End.one_def, id_eq, Functor.comp_obj,
        forget_obj, Iso.refl_hom, Category.comp_id]
      exact œÅ_one X
  counitIso := NatIso.ofComponents fun _ => Iso.refl _

variable (V)

/-- The "restriction" functor along a monoid homomorphism `f : G ‚ü∂ H`,
taking actions of `H` to actions of `G`.

(This makes sense for any homomorphism, but the name is natural when `f` is a monomorphism.)
-/
@[simps]
def res {G H : Type*} [Monoid G] [Monoid H] (f : G ‚Üí* H) : Action V H ‚•§ Action V G where
  obj M :=
    { V := M.V
      œÅ := M.œÅ.comp f }
  map p :=
    { hom := p.hom
      comm := fun g => p.comm (f g) }

/-- The natural isomorphism from restriction along the identity homomorphism to
the identity functor on `Action V G`.
-/
@[simps!]
def resId {G : Type*} [Monoid G] : res V (MonoidHom.id G) ‚âÖ ùü≠ (Action V G) :=
  NatIso.ofComponents fun M => mkIso (Iso.refl _)

/-- The natural isomorphism from the composition of restrictions along homomorphisms
to the restriction along the composition of homomorphism.
-/
@[simps!]
def resComp {G H K : Type*} [Monoid G] [Monoid H] [Monoid K]
    (f : G ‚Üí* H) (g : H ‚Üí* K) : res V g ‚ãô res V f ‚âÖ res V (g.comp f) :=
  NatIso.ofComponents fun M => mkIso (Iso.refl _)

/-- Restricting scalars along equal maps is naturally isomorphic. -/
@[simps! hom inv]
def resCongr {G H : Type*} [Monoid G] [Monoid H] {f f' : G ‚Üí* H} (h : f = f') :
    Action.res V f ‚âÖ Action.res V f' :=
  NatIso.ofComponents (fun _ ‚Ü¶ Action.mkIso (Iso.refl _))

/-- Restricting scalars along a monoid isomorphism induces an equivalence of categories. -/
@[simps! functor inverse]
def resEquiv {G H : Type*} [Monoid G] [Monoid H] (f : G ‚âÉ* H) :
    Action V H ‚âå Action V G where
  functor := Action.res _ f
  inverse := Action.res _ f.symm
  unitIso := Action.resCongr (f := MonoidHom.id H) V (by ext; simp) ‚â™‚â´ (Action.resComp _ _ _).symm
  counitIso := Action.resComp _ _ _ ‚â™‚â´
    Action.resCongr (f' := MonoidHom.id G) V (by ext; simp)

-- TODO promote `res` to a pseudofunctor from
-- the locally discrete bicategory constructed from `Mon·µí·µñ` to `Cat`, sending `G` to `Action V G`.

variable {G H : Type*} [Monoid G] [Monoid H] (f : G ‚Üí* H)

/-- The functor from `Action V H` to `Action V G` induced by a morphism `f : G ‚Üí H` is faithful. -/
instance : (res V f).Faithful where
  map_injective {X} {Y} g‚ÇÅ g‚ÇÇ h := by
    ext
    rw [‚Üê res_map_hom _ f g‚ÇÅ, ‚Üê res_map_hom _ f g‚ÇÇ, h]

/-- The functor from `Action V H` to `Action V G` induced by a morphism `f : G ‚Üí H` is full
if `f` is surjective. -/
lemma full_res (f_surj : Function.Surjective f) : (res V f).Full where
  map_surjective {X} {Y} g := by
    use ‚ü®g.hom, fun h ‚Ü¶ ?_‚ü©
    ¬∑ ext
      simp
    ¬∑ obtain ‚ü®a, rfl‚ü© := f_surj h
      have : X.œÅ (f a) = ((res V f).obj X).œÅ a := rfl
      rw [this, g.comm a]
      simp

end Action

namespace CategoryTheory.Functor

variable {V} {W : Type*} [Category W]

/-- A functor between categories induces a functor between
the categories of `G`-actions within those categories. -/
@[simps]
def mapAction (F : V ‚•§ W) (G : Type*) [Monoid G] : Action V G ‚•§ Action W G where
  obj M :=
    { V := F.obj M.V
      œÅ :=
        { toFun := fun g => F.map (M.œÅ g)
          map_one' := by simp
          map_mul' := fun g h => by
            dsimp
            rw [map_mul, End.mul_def, F.map_comp] } }
  map f :=
    { hom := F.map f.hom
      comm := fun g => by dsimp; rw [‚Üê F.map_comp, f.comm, F.map_comp] }
  map_id M := by ext; simp only [Action.id_hom, F.map_id]
  map_comp f g := by ext; simp only [Action.comp_hom, F.map_comp]

variable (G : Type*) [Monoid G]

/-- `Functor.mapAction` is functorial in the functor. -/
@[simps! hom inv]
def mapActionComp {T : Type*} [Category T] (F : V ‚•§ W) (F' : W ‚•§ T) :
    (F ‚ãô F').mapAction G ‚âÖ F.mapAction G ‚ãô F'.mapAction G :=
  NatIso.ofComponents (fun X ‚Ü¶ Iso.refl _)

/-- `Functor.mapAction` preserves isomorphisms of functors. -/
@[simps! hom inv]
def mapActionCongr {F F' : V ‚•§ W} (e : F ‚âÖ F') :
    F.mapAction G ‚âÖ F'.mapAction G :=
  NatIso.ofComponents (fun X ‚Ü¶ Action.mkIso (e.app X.V))

end Functor

/-- An equivalence of categories induces an equivalence of
the categories of `G`-actions within those categories. -/
@[simps functor inverse]
def Equivalence.mapAction {V W : Type*} [Category V] [Category W] (G : Type*) [Monoid G]
    (E : V ‚âå W) : Action V G ‚âå Action W G where
  functor := E.functor.mapAction G
  inverse := E.inverse.mapAction G
  unitIso := Functor.mapActionCongr G E.unitIso  ‚â™‚â´ Functor.mapActionComp G _ _
  counitIso := (Functor.mapActionComp G _ _).symm ‚â™‚â´ Functor.mapActionCongr G E.counitIso
  functor_unitIso_comp X := by ext; simp

end CategoryTheory
