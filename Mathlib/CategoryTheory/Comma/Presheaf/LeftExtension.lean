/-
Copyright (c) 2025 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kenny Lau
-/

import Mathlib.CategoryTheory.Comma.StructuredArrow.Basic
import Mathlib.CategoryTheory.Functor.KanExtension.Pointwise
import Mathlib.CategoryTheory.Limits.Types.Shapes

/-!

# Left Kan Extension of Presheaf on Costructured Arrow

Let `F : C ‚•§ D` be a functor and `d : D`. Recall that the category `CostructuredArrow F d` is the
category of objects `c` in `C` equipped with a morphism `F.obj c ‚ü∂ d`.

In this file we show that any functor `P : (CostructuredArrow F d)·µí·µñ ‚•§ Type u` has a left Kan
extension along the projection `CostructuredArrow F d ‚•§ C` to form a functor `P' : C·µí·µñ ‚•§ Type u`.

In other words, any presheaf on `CostructuredArrow F d` can be extended to a presheaf on `C`.

Explicitly, `P'.obj (op c)` is defined to be `(u : F.obj c ‚ü∂ d) √ó P.obj (op (mk u))`. In other
words, we just take all possible morphisms `u : F.obj c ‚ü∂ d` and take the disjoint union of the
original functor `P` evaluated on those morphisms.
-/

universe u

open CategoryTheory Opposite Limits Category

namespace CategoryTheory.CostructuredArrow

variable {C D : Type (u + 1)} [Category.{u} C] [Category.{u} D] (F : C ‚•§ D) (d : D)
  (P : (CostructuredArrow F d)·µí·µñ ‚•§ Type u)
  (d‚ÇÅ d‚ÇÇ d‚ÇÉ : D) {c c‚ÇÅ c‚ÇÇ c‚ÇÉ : C} (c' c‚ÇÅ' c‚ÇÇ' c‚ÇÉ' : C·µí·µñ)
  (u : F.obj c ‚ü∂ d)

variable {F d} (c)

/-- The small diagram used for defining the pointwise extension of the presheaf `P`.

For any morphism `u : F.obj c ‚ü∂ d`, the functor `P` assigns a set (i.e. type) to `u`. This function
is the function that takes `u` to the corresponding type defined `P`. -/
abbrev fiberFun : (F.obj c ‚ü∂ d) ‚Üí Type u :=
  fun u ‚Ü¶ P.obj (op (mk u))

/-- The cofan that is the disjoint union (i.e. coproduct) of the values taken by `P` on the
distinct structural morphisms `u : F.obj c ‚ü∂ d`. -/
abbrev fiberCofan : Cofan (fiberFun P c) :=
  (Types.coproductColimitCocone (fiberFun P c)).cocone

@[simp] lemma fiberCofan_inj_fst (y : fiberFun P c u) :
    ((fiberCofan P c).inj u y).fst = u :=
  rfl

@[simp] lemma fiberCofan_inj_snd (y : fiberFun P c u) :
    ((fiberCofan P c).inj u y).snd = y :=
  rfl

/-- The disjoint union (i.e. coproduct) of the values taken by `P` on the distinct structural
morphisms `u : F.obj c ‚ü∂ d`. -/
abbrev FiberObj : Type u :=
  (fiberCofan P c).pt

@[simp] lemma homMk_id {u : F.obj c ‚ü∂ d} (w) :
    homMk (ùüô c) w = ùüô (mk u) :=
  rfl

@[simp] lemma homMk_comp_homMk {u : F.obj c‚ÇÅ ‚ü∂ d} {v : F.obj c‚ÇÇ ‚ü∂ d} {w : F.obj c‚ÇÉ ‚ü∂ d}
    (œÜ : c‚ÇÅ ‚ü∂ c‚ÇÇ) (œà : c‚ÇÇ ‚ü∂ c‚ÇÉ)
    (w‚ÇÅ : F.map œÜ ‚â´ v = u) (w‚ÇÇ : F.map œà ‚â´ w = v) :
    (homMk œÜ w‚ÇÅ : mk u ‚ü∂ mk v) ‚â´ (homMk œà w‚ÇÇ : mk v ‚ü∂ mk w) =
      homMk (œÜ ‚â´ œà) (by rw [F.map_comp, assoc, mk_hom_eq_self, mk_hom_eq_self, w‚ÇÇ, w‚ÇÅ]) :=
  rfl

lemma hom_eta {R S : CostructuredArrow F d} (f : R ‚ü∂ S) :
    homMk f.left (w f) = f :=
  rfl

lemma hom_eta' {R S : (CostructuredArrow F d)·µí·µñ} (f : R ‚ü∂ S) :
    (homMk f.unop.left (w f.unop)).op = f :=
  rfl

variable {P c}

/-- A better extensionality lemma than the built-in `Sigma.ext` to avoid having to talk about
heterogeneous equality. -/
@[ext (iff := false)] lemma FiberObj.ext {j j' : FiberObj P c}
    (h‚ÇÅ : j.fst = j'.fst)
    (h‚ÇÇ : P.map (homMk (eqToHom (show (mk j'.fst).left = (mk j.fst).left from rfl)) <| by
        rw [eqToHom_refl, F.map_id, id_comp, h‚ÇÅ]).op j.snd = j'.snd) :
    j = j' := by
  cases j; cases j'; generalize_proofs at h‚ÇÇ; subst h‚ÇÅ
  obtain rfl := by simpa using h‚ÇÇ
  rfl

variable (F d) in
/-- An intermediate category used for proving the Kan criterion.

An object of this category is given by `b : C` and two morphisms that fill in the diagram
`F.obj c ‚ü∂ F.obj b ‚ü∂ d`, where `c : C` and `d : D` are fixed.

Note that we need to take the opposite category so that `c ‚ü∂ b` is in the correct direction.

This category can be partitioned into disjoint parts based on the "structural morphism"
`F.obj c ‚ü∂ d` obtained (this is `Between.toHom`). This fact is witnessed by `Between.toHom_congr`
saying that the existence of any morphism at all between two objects forces the structural
morphisms to be equal, and also by `Between.sec` which provides an explicit representative in the
`Between` category given a structural morphism `F.obj c ‚ü∂ d`. -/
abbrev Between : Type (u + 1) :=
  CostructuredArrow (proj F d).op c'

variable {c'} (b : Between F d c') {b‚ÇÅ b‚ÇÇ b‚ÇÉ : Between F d c'}

/-- The projection that sends `F.obj c ‚ü∂ F.obj b ‚ü∂ d` to the arrow `F.obj b ‚ü∂ d`. -/
abbrev Between.fst : CostructuredArrow F d :=
  b.left.unop

variable (F d c') in
/-- The projection `Between.fst` as a functor. This is the functor that is used in the criterion
of the existence of a Kan extension. -/
@[simps!] abbrev Between.proj : Between F d c' ‚•§ (CostructuredArrow F d)·µí·µñ :=
  CostructuredArrow.proj (CostructuredArrow.proj F d).op c'

/-- The projection that sends `F.obj c ‚ü∂ F.obj b ‚ü∂ d` to the arrow `c ‚ü∂ b`. -/
abbrev Between.snd : c'.unop ‚ü∂ b.fst.left :=
  b.hom.unop

/-- The structural morphism `F.obj c ‚ü∂ d` determined by `b`. -/
abbrev Between.toHom : F.obj c'.unop ‚ü∂ d :=
  F.map b.snd ‚â´ b.fst.hom

lemma Between.w (f : b‚ÇÅ ‚ü∂ b‚ÇÇ) :
    b‚ÇÇ.snd ‚â´ f.left.unop.left = b‚ÇÅ.snd :=
  congr($(CostructuredArrow.w f).unop)

lemma Between.w' (f : b‚ÇÅ ‚ü∂ b‚ÇÇ) :
    F.map f.left.unop.left ‚â´ b‚ÇÅ.fst.hom = b‚ÇÇ.fst.hom :=
  CostructuredArrow.w f.left.unop

/-- The witness that the `Between` category partitions into disjoint parts based on the structural
morphism `F.obj c ‚ü∂ d` (formed by `Between.toHom`).

The existence of any morphism at all between two `Between` objects forces their `toHom` values to
be equal. -/
lemma Between.toHom_congr (f : b‚ÇÅ ‚ü∂ b‚ÇÇ) :
    b‚ÇÅ.toHom = b‚ÇÇ.toHom := by
  rw [toHom, ‚Üê w f, F.map_comp, assoc, w' f]

/-- A custom constructor for `Between` objects given `g : c ‚ü∂ b` and `f : F.obj b ‚ü∂ d`. -/
def Between.mk (f : F.obj c ‚ü∂ d) (g : c'.unop ‚ü∂ c) : Between F d c' :=
  CostructuredArrow.mk (Y := op (CostructuredArrow.mk f)) g.op

/-- An explicit representative of the disjoint partition given the structural morphism
`u : F.obj c ‚ü∂ d`. -/
def Between.sec (u : F.obj c'.unop ‚ü∂ d) : Between F d c' :=
  mk u (ùüô c'.unop)

@[simp] lemma Between.sec_snd (u : F.obj c'.unop ‚ü∂ d) : (sec u).snd = ùüô c'.unop := rfl

@[simp] lemma Between.toHom_mk (f : F.obj c ‚ü∂ d) (g : c'.unop ‚ü∂ c) :
    (mk f g).toHom = F.map g ‚â´ f := rfl

@[simp] lemma Between.toHom_sec (u : F.obj c'.unop ‚ü∂ d) :
    (sec u).toHom = u := by
  simp [sec]

/-- The representative `sec` is terminal in its subcategory.

More rigorously, for any `b : Between`, the type of morphisms `b ‚ü∂ sec b.toHom` is a subsingleton,
i.e. it is either empty or has a unique element. -/
def Between.homSec : b ‚ü∂ sec b.toHom :=
  homMk (homMk b.snd).op (comp_id _)

instance (u : F.obj c'.unop ‚ü∂ d) : Subsingleton (b ‚ü∂ Between.sec u) where
  allEq f g := hom_ext _ _ <| unop_injective <| hom_ext _ _ <| by
    simpa using (Between.w f).trans (Between.w g).symm

variable (P c')

/-- The cocone that is used in the criterion of the existence of a left Kan extension of `P`
to a sheaf `C·µí·µñ ‚•§ Type u`. -/
@[simps!] def kanCocone : Cocone (Between.proj F d c' ‚ãô P) where
  pt := FiberObj P c'.unop
  Œπ :=
  { app b y := (fiberCofan P c'.unop).inj b.toHom (P.map (homMk b.snd).op y)
    naturality b‚ÇÅ b‚ÇÇ f := funext fun y ‚Ü¶ by
      refine FiberObj.ext ?_ ?_
      ¬∑ simp [Between.toHom_congr f]
      ¬∑ change P.map _ (P.map _ (P.map f.left _)) = P.map _ _
        rw [‚Üê hom_eta' f.left]
        simp_rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, homMk_comp_homMk]
        congr! 3
        rw [eqToHom_refl, Between.w f]
        exact id_comp _ }

lemma kanCocone_Œπ_app (y : (Between.proj F d c' ‚ãô P).obj b) :
    (kanCocone P c').Œπ.app b y = (fiberCofan P c'.unop).inj b.toHom (P.map (homMk b.snd).op y) :=
  rfl

/-- The cocone that is used in the criterion of the existence of a left Kan extension of `P`
to a sheaf `C·µí·µñ ‚•§ Type u` is a colimit. -/
def kanCoconeIsColimit : IsColimit (kanCocone P c') where
  desc c j := c.Œπ.app (.sec j.fst) j.snd
  fac c b := c.Œπ.naturality b.homSec
  uniq c f w := funext fun ‚ü®j‚ÇÅ, j‚ÇÇ‚ü© ‚Ü¶ by
    rw [‚Üê w, types_comp_apply]
    congr! 1
    exact FiberObj.ext (by simp) rfl

instance : (proj F d).op.HasPointwiseLeftKanExtension P :=
  fun c' ‚Ü¶ ‚ü®‚ü®‚ü®_, kanCoconeIsColimit P c'‚ü©‚ü©‚ü©

noncomputable example := (proj F d).op.pointwiseLeftKanExtension P

end CategoryTheory.CostructuredArrow
