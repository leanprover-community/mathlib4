/-
Copyright (c) 2025 Sina Hazratpour. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sina Hazratpour
-/
import Mathlib.CategoryTheory.Comma.Over.Pullback
import Mathlib.CategoryTheory.Closed.Cartesian

/-!
# The section functor as a right adjoint to the star functor

We show that if `C` is cartesian closed then `star I : C ‚•§ Over I`
has a right adjoint `sectionsFunctor` whose object part is the object of sections
of `X` over `I`.

-/

noncomputable section

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Limits MonoidalCategory CartesianClosed Adjunction Over

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]

attribute [local instance] hasBinaryProducts_of_hasTerminal_and_pullbacks
attribute [local instance] hasFiniteProducts_of_has_binary_and_terminal
attribute [local instance] ChosenFiniteProducts.ofFiniteProducts
attribute [local instance] monoidalOfChosenFiniteProducts

section

variable [HasFiniteProducts C]

/-- The isomorphism between `X ‚®Ø Y` and `X ‚äó Y` for objects `X` and `Y` in `C`.
This is tautological by the definition of the cartesian monoidal structure on `C`.
This isomorphism provides an interface between `prod.fst` and `ChosenFiniteProducts.fst`
as well as between `prod.map` and `tensorHom`. -/
def prodIsoTensorObj (X Y : C) : X ‚®Ø Y ‚âÖ X ‚äó Y := Iso.refl _

@[reassoc (attr := simp)]
theorem prodIsoTensorObj_inv_fst {X Y : C} :
    (prodIsoTensorObj X Y).inv ‚â´ prod.fst = ChosenFiniteProducts.fst X Y :=
  Category.id_comp _

@[reassoc (attr := simp)]
theorem prodIsoTensorObj_inv_snd {X Y : C} :
    (prodIsoTensorObj X Y).inv ‚â´ prod.snd = ChosenFiniteProducts.snd X Y :=
  Category.id_comp _

@[reassoc (attr := simp)]
theorem prodIsoTensorObj_hom_fst {X Y : C} :
    (prodIsoTensorObj X Y).hom ‚â´ ChosenFiniteProducts.fst X Y = prod.fst :=
  Category.id_comp _

@[reassoc (attr := simp)]
theorem prodIsoTensorObj_hom_snd {X Y : C} :
    (prodIsoTensorObj X Y).hom ‚â´ ChosenFiniteProducts.snd X Y = prod.snd :=
  Category.id_comp _

@[reassoc (attr := simp)]
theorem prodMap_comp_prodIsoTensorObj_hom {X Y Z W : C} (f : X ‚ü∂ Y) (g : Z ‚ü∂ W) :
    prod.map f g ‚â´ (prodIsoTensorObj _ _).hom = (prodIsoTensorObj _ _).hom ‚â´ (f ‚äó g) := by
  apply ChosenFiniteProducts.hom_ext <;> simp

end

variable [HasTerminal C] [HasPullbacks C]

variable (I : C) [Exponentiable I]

/-- The first leg of a cospan constructing a pullback diagram in `C` used to define `sections` . -/
def curryId : ‚ä§_ C ‚ü∂ (I ‚üπ I) :=
  CartesianClosed.curry (ChosenFiniteProducts.fst I (‚ä§_ C))

variable {I}

namespace Over

/-- Given `X : Over I`, `sectionsObj X` is the object of sections of `X` defined by the following
pullback diagram:

```
 sections X -->  I ‚üπ X
   |               |
   |               |
   v               v
  ‚ä§_ C    ---->  I ‚üπ I
```-/
abbrev sectionsObj (X : Over I) : C :=
  Limits.pullback (curryId I) ((exp I).map X.hom)

/-- The functoriality of `sectionsObj`. -/
def sectionsMap {X X' : Over I} (u : X ‚ü∂ X') :
    sectionsObj X ‚ü∂ sectionsObj X' := by
  fapply pullback.map
  ¬∑ exact ùüô _
  ¬∑ exact (exp I).map u.left
  ¬∑ exact ùüô _
  ¬∑ simp only [comp_id, id_comp]
  ¬∑ simp only [comp_id, ‚Üê Functor.map_comp, w]

@[simp]
lemma sectionsMap_id {X : Over I} : sectionsMap (ùüô X) = ùüô _ := by
  apply pullback.hom_ext
  ¬∑ aesop
  ¬∑ simp [sectionsMap]

@[simp]
lemma sectionsMap_comp {X X' X'' : Over I} (u : X ‚ü∂ X') (v : X' ‚ü∂ X'') :
    sectionsMap (u ‚â´ v) = sectionsMap u ‚â´ sectionsMap v := by
  apply pullback.hom_ext
  ¬∑ aesop
  ¬∑ simp [sectionsMap]

variable (I)

/-- The functor mapping an object `X` in `C` to the object of sections of `X` over `I`. -/
@[simps]
def sections :
    Over I ‚•§ C where
  obj X := sectionsObj X
  map u := sectionsMap u

variable {I}

/-- An auxiliary morphism used to define the currying of a morphism in `Over I` to a morphism
in `C`. See `sectionsCurry`. -/
def sectionsCurryAux {X : Over I} {A : C} (u : (star I).obj A ‚ü∂ X) :
    A ‚ü∂ (I ‚üπ X.left) :=
  CartesianClosed.curry (u.left)

/-- The currying operation `Hom ((star I).obj A) X ‚Üí Hom A (I ‚üπ X.left)`. -/
def sectionsCurry {X : Over I} {A : C} (u : (star I).obj A ‚ü∂ X) :
    A ‚ü∂ (sections I).obj X := by
  apply pullback.lift (terminal.from A)
    (CartesianClosed.curry ((prodIsoTensorObj _ _).inv ‚â´ u.left)) (uncurry_injective _)
  rw [uncurry_natural_left]
  simp [curryId, uncurry_natural_right, uncurry_curry]

/-- The uncurrying operation `Hom A (section X) ‚Üí Hom ((star I).obj A) X`. -/
def sectionsUncurry {X : Over I} {A : C} (v : A ‚ü∂ (sections I).obj X) :
    (star I).obj A ‚ü∂ X := by
  let v‚ÇÇ : A ‚ü∂ (I ‚üπ X.left) := v ‚â´ pullback.snd ..
  have w : terminal.from A ‚â´ (curryId I) = v‚ÇÇ ‚â´ (exp I).map X.hom := by
    rw [IsTerminal.hom_ext terminalIsTerminal (terminal.from A ) (v ‚â´ (pullback.fst ..))]
    simp [v‚ÇÇ, pullback.condition]
  dsimp [curryId] at w
  have w' := homEquiv_naturality_right_square (F := MonoidalCategory.tensorLeft I)
    (adj := exp.adjunction I) _ _ _ _ w
  simp [CartesianClosed.curry] at w'
  refine Over.homMk ((prodIsoTensorObj I A).hom ‚â´ CartesianClosed.uncurry v‚ÇÇ) ?_
  ¬∑ dsimp [CartesianClosed.uncurry] at *
    rw [Category.assoc, ‚Üê w']
    simp [star_obj_hom]

@[simp]
theorem sections_curry_uncurry {X : Over I} {A : C} {v : A ‚ü∂ (sections I).obj X} :
    sectionsCurry (sectionsUncurry v) = v := by
  dsimp [sectionsCurry, sectionsUncurry]
  let v‚ÇÇ : A ‚ü∂ (I ‚üπ X.left) := v ‚â´ pullback.snd _ _
  apply pullback.hom_ext
  ¬∑ simp
    rw [IsTerminal.hom_ext terminalIsTerminal (terminal.from A ) (v ‚â´ (pullback.fst ..))]
  ¬∑ simp

@[simp]
theorem sections_uncurry_curry {X : Over I} {A : C} {u : (star I).obj A ‚ü∂ X} :
    sectionsUncurry (sectionsCurry u) = u := by
  dsimp [sectionsCurry, sectionsUncurry]
  ext
  simp

/-- An auxiliary definition which is used to define the adjunction between the star functor
and the sections functor. See starSectionsAdjunction`. -/
def coreHomEquiv : CoreHomEquiv (star I) (sections I) where
  homEquiv A X := {
    toFun := sectionsCurry
    invFun := sectionsUncurry
    left_inv {u} := sections_uncurry_curry
    right_inv {v} := sections_curry_uncurry
  }
  homEquiv_naturality_left_symm := by
    intro A' A X g v
    dsimp [sectionsCurry, sectionsUncurry, curryId]
    simp only [star_map]
    rw [‚Üê Over.homMk_comp]
    congr 1
    simp [CartesianClosed.uncurry_natural_left]
  homEquiv_naturality_right := by
    intro A X' X u g
    dsimp [sectionsCurry, sectionsUncurry, curryId]
    apply pullback.hom_ext (IsTerminal.hom_ext terminalIsTerminal _ _)
    simp [sectionsMap, curryId]
    rw [‚Üê CartesianClosed.curry_natural_right, Category.assoc]

variable (I)

/-- The adjunction between the star functor and the sections functor. -/
@[simps! unit_app counit_app]
def starSectionsAdj : star I ‚ä£ sections I :=
  .mkOfHomEquiv coreHomEquiv

end Over

end CategoryTheory
