/-
Copyright (c) 2021 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Adam Topaz, Scott Morrison
-/
import Mathlib.CategoryTheory.Comma.Basic
import Mathlib.CategoryTheory.PUnit
import Mathlib.CategoryTheory.Limits.Shapes.Terminal
import Mathlib.CategoryTheory.EssentiallySmall
import Mathlib.Logic.Small.Set

#align_import category_theory.structured_arrow from "leanprover-community/mathlib"@"8a318021995877a44630c898d0b2bc376fceef3b"

/-!
# The category of "structured arrows"

For `T : C ‚•§ D`, a `T`-structured arrow with source `S : D`
is just a morphism `S ‚ü∂ T.obj Y`, for some `Y : C`.

These form a category with morphisms `g : Y ‚ü∂ Y'` making the obvious diagram commute.

We prove that `ùüô (T.obj Y)` is the initial object in `T`-structured objects with source `T.obj Y`.
-/


namespace CategoryTheory

-- morphism levels before object levels. See note [CategoryTheory universes].
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

/-- The category of `T`-structured arrows with domain `S : D` (here `T : C ‚•§ D`),
has as its objects `D`-morphisms of the form `S ‚ü∂ T Y`, for some `Y : C`,
and morphisms `C`-morphisms `Y ‚ü∂ Y'` making the obvious triangle commute.
-/
-- We explicitly come from `PUnit.{1}` here to obtain the correct universe for morphisms of
-- structured arrows.
-- Porting note(#5171): linter not ported yet
-- @[nolint has_nonempty_instance]
def StructuredArrow (S : D) (T : C ‚•§ D) :=
  Comma (Functor.fromPUnit.{0} S) T
#align category_theory.structured_arrow CategoryTheory.StructuredArrow

-- Porting note: not found by inferInstance
instance (S : D) (T : C ‚•§ D) : Category (StructuredArrow S T) := commaCategory

namespace StructuredArrow

/-- The obvious projection functor from structured arrows. -/
@[simps!]
def proj (S : D) (T : C ‚•§ D) : StructuredArrow S T ‚•§ C :=
  Comma.snd _ _
#align category_theory.structured_arrow.proj CategoryTheory.StructuredArrow.proj

variable {S S' S'' : D} {Y Y' Y'' : C} {T T' : C ‚•§ D}

-- Porting note: this lemma was added because `Comma.hom_ext`
-- was not triggered automatically
-- See https://github.com/leanprover-community/mathlib4/issues/5229
@[ext]
lemma hom_ext {X Y : StructuredArrow S T} (f g : X ‚ü∂ Y) (h : f.right = g.right) : f = g :=
  CommaMorphism.ext _ _ (Subsingleton.elim _ _) h

@[simp]
theorem hom_eq_iff {X Y : StructuredArrow S T} (f g : X ‚ü∂ Y) : f = g ‚Üî f.right = g.right :=
  ‚ü®fun h ‚Ü¶ by rw [h], hom_ext _ _‚ü©

/-- Construct a structured arrow from a morphism. -/
def mk (f : S ‚ü∂ T.obj Y) : StructuredArrow S T :=
  ‚ü®‚ü®‚ü®‚ü©‚ü©, Y, f‚ü©
#align category_theory.structured_arrow.mk CategoryTheory.StructuredArrow.mk

@[simp]
theorem mk_left (f : S ‚ü∂ T.obj Y) : (mk f).left = ‚ü®‚ü®‚ü©‚ü© :=
  rfl
#align category_theory.structured_arrow.mk_left CategoryTheory.StructuredArrow.mk_left

@[simp]
theorem mk_right (f : S ‚ü∂ T.obj Y) : (mk f).right = Y :=
  rfl
#align category_theory.structured_arrow.mk_right CategoryTheory.StructuredArrow.mk_right

@[simp]
theorem mk_hom_eq_self (f : S ‚ü∂ T.obj Y) : (mk f).hom = f :=
  rfl
#align category_theory.structured_arrow.mk_hom_eq_self CategoryTheory.StructuredArrow.mk_hom_eq_self

@[reassoc (attr := simp)]
theorem w {A B : StructuredArrow S T} (f : A ‚ü∂ B) : A.hom ‚â´ T.map f.right = B.hom := by
  have := f.w; aesop_cat
#align category_theory.structured_arrow.w CategoryTheory.StructuredArrow.w

@[simp]
theorem comp_right {X Y Z : StructuredArrow S T} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).right = f.right ‚â´ g.right := rfl

@[simp]
theorem id_right (X : StructuredArrow S T) : (ùüô X : X ‚ü∂ X).right = ùüô X.right := rfl

@[simp]
theorem eqToHom_right {X Y : StructuredArrow S T} (h : X = Y) :
    (eqToHom h).right = eqToHom (by rw [h]) := by
  subst h
  simp only [eqToHom_refl, id_right]

@[simp]
theorem left_eq_id {X Y : StructuredArrow S T} (f : X ‚ü∂ Y) : f.left = ùüô _ := rfl

/-- To construct a morphism of structured arrows,
we need a morphism of the objects underlying the target,
and to check that the triangle commutes.
-/
@[simps]
def homMk {f f' : StructuredArrow S T} (g : f.right ‚ü∂ f'.right)
    (w : f.hom ‚â´ T.map g = f'.hom := by aesop_cat) : f ‚ü∂ f' where
  left := ùüô _
  right := g
  w := by
    dsimp
    simpa using w.symm
#align category_theory.structured_arrow.hom_mk CategoryTheory.StructuredArrow.homMk

/- Porting note: it appears the simp lemma is not getting generated but the linter
picks up on it (seems like a bug). Either way simp solves it.  -/
attribute [-simp, nolint simpNF] homMk_left

/-- Given a structured arrow `X ‚ü∂ T(Y)`, and an arrow `Y ‚ü∂ Y'`, we can construct a morphism of
    structured arrows given by `(X ‚ü∂ T(Y)) ‚ü∂ (X ‚ü∂ T(Y) ‚ü∂ T(Y'))`.  -/
@[simps]
def homMk' (f : StructuredArrow S T) (g : f.right ‚ü∂ Y') : f ‚ü∂ mk (f.hom ‚â´ T.map g) where
  left := ùüô _
  right := g
#align category_theory.structured_arrow.hom_mk' CategoryTheory.StructuredArrow.homMk'

lemma homMk'_id (f : StructuredArrow S T) : homMk' f (ùüô f.right) = eqToHom (by aesop_cat) := by
  ext
  simp [eqToHom_right]

lemma homMk'_mk_id (f : S ‚ü∂ T.obj Y) : homMk' (mk f) (ùüô Y) = eqToHom (by aesop_cat) :=
  homMk'_id _

lemma homMk'_comp (f : StructuredArrow S T) (g : f.right ‚ü∂ Y') (g' : Y' ‚ü∂ Y'') :
    homMk' f (g ‚â´ g') = homMk' f g ‚â´ homMk' (mk (f.hom ‚â´ T.map g)) g' ‚â´ eqToHom (by simp) := by
  ext
  simp [eqToHom_right]

lemma homMk'_mk_comp (f : S ‚ü∂ T.obj Y) (g : Y ‚ü∂ Y') (g' : Y' ‚ü∂ Y'') :
    homMk' (mk f) (g ‚â´ g') = homMk' (mk f) g ‚â´ homMk' (mk (f ‚â´ T.map g)) g' ‚â´ eqToHom (by simp) :=
  homMk'_comp _ _ _

/-- Variant of `homMk'` where both objects are applications of `mk`. -/
@[simps]
def mkPostcomp (f : S ‚ü∂ T.obj Y) (g : Y ‚ü∂ Y') : mk f ‚ü∂ mk (f ‚â´ T.map g) where
  left := ùüô _
  right := g

lemma mkPostcomp_id (f : S ‚ü∂ T.obj Y) : mkPostcomp f (ùüô Y) = eqToHom (by aesop_cat) := by aesop_cat
lemma mkPostcomp_comp (f : S ‚ü∂ T.obj Y) (g : Y ‚ü∂ Y') (g' : Y' ‚ü∂ Y'') :
    mkPostcomp f (g ‚â´ g') = mkPostcomp f g ‚â´ mkPostcomp (f ‚â´ T.map g) g' ‚â´ eqToHom (by simp) := by
  aesop_cat

/-- To construct an isomorphism of structured arrows,
we need an isomorphism of the objects underlying the target,
and to check that the triangle commutes.
-/
@[simps!]
def isoMk {f f' : StructuredArrow S T} (g : f.right ‚âÖ f'.right)
    (w : f.hom ‚â´ T.map g.hom = f'.hom := by aesop_cat) :
    f ‚âÖ f' :=
  Comma.isoMk (eqToIso (by ext)) g (by simpa using w.symm)
#align category_theory.structured_arrow.iso_mk CategoryTheory.StructuredArrow.isoMk

/- Porting note: it appears the simp lemma is not getting generated but the linter
picks up on it. Either way simp solves these. -/
attribute [-simp, nolint simpNF] isoMk_hom_left_down_down isoMk_inv_left_down_down

theorem ext {A B : StructuredArrow S T} (f g : A ‚ü∂ B) : f.right = g.right ‚Üí f = g :=
  CommaMorphism.ext _ _ (Subsingleton.elim _ _)
#align category_theory.structured_arrow.ext CategoryTheory.StructuredArrow.ext

theorem ext_iff {A B : StructuredArrow S T} (f g : A ‚ü∂ B) : f = g ‚Üî f.right = g.right :=
  ‚ü®fun h => h ‚ñ∏ rfl, ext f g‚ü©
#align category_theory.structured_arrow.ext_iff CategoryTheory.StructuredArrow.ext_iff

instance proj_faithful : (proj S T).Faithful where
  map_injective {_ _} := ext
#align category_theory.structured_arrow.proj_faithful CategoryTheory.StructuredArrow.proj_faithful

/-- The converse of this is true with additional assumptions, see `mono_iff_mono_right`. -/
theorem mono_of_mono_right {A B : StructuredArrow S T} (f : A ‚ü∂ B) [h : Mono f.right] : Mono f :=
  (proj S T).mono_of_mono_map h
#align category_theory.structured_arrow.mono_of_mono_right CategoryTheory.StructuredArrow.mono_of_mono_right

theorem epi_of_epi_right {A B : StructuredArrow S T} (f : A ‚ü∂ B) [h : Epi f.right] : Epi f :=
  (proj S T).epi_of_epi_map h
#align category_theory.structured_arrow.epi_of_epi_right CategoryTheory.StructuredArrow.epi_of_epi_right

instance mono_homMk {A B : StructuredArrow S T} (f : A.right ‚ü∂ B.right) (w) [h : Mono f] :
    Mono (homMk f w) :=
  (proj S T).mono_of_mono_map h
#align category_theory.structured_arrow.mono_hom_mk CategoryTheory.StructuredArrow.mono_homMk

instance epi_homMk {A B : StructuredArrow S T} (f : A.right ‚ü∂ B.right) (w) [h : Epi f] :
    Epi (homMk f w) :=
  (proj S T).epi_of_epi_map h
#align category_theory.structured_arrow.epi_hom_mk CategoryTheory.StructuredArrow.epi_homMk

/-- Eta rule for structured arrows. Prefer `StructuredArrow.eta` for rewriting, since equality of
    objects tends to cause problems. -/
theorem eq_mk (f : StructuredArrow S T) : f = mk f.hom :=
  rfl
#align category_theory.structured_arrow.eq_mk CategoryTheory.StructuredArrow.eq_mk

/-- Eta rule for structured arrows. -/
@[simps!]
def eta (f : StructuredArrow S T) : f ‚âÖ mk f.hom :=
  isoMk (Iso.refl _)
#align category_theory.structured_arrow.eta CategoryTheory.StructuredArrow.eta

/- Porting note: it appears the simp lemma is not getting generated but the linter
picks up on it. Either way simp solves these. -/
attribute [-simp, nolint simpNF] eta_hom_left_down_down eta_inv_left_down_down

/-- A morphism between source objects `S ‚ü∂ S'`
contravariantly induces a functor between structured arrows,
`StructuredArrow S' T ‚•§ StructuredArrow S T`.

Ideally this would be described as a 2-functor from `D`
(promoted to a 2-category with equations as 2-morphisms)
to `Cat`.
-/
@[simps!]
def map (f : S ‚ü∂ S') : StructuredArrow S' T ‚•§ StructuredArrow S T :=
  Comma.mapLeft _ ((Functor.const _).map f)
#align category_theory.structured_arrow.map CategoryTheory.StructuredArrow.map

@[simp]
theorem map_mk {f : S' ‚ü∂ T.obj Y} (g : S ‚ü∂ S') : (map g).obj (mk f) = mk (g ‚â´ f) :=
  rfl
#align category_theory.structured_arrow.map_mk CategoryTheory.StructuredArrow.map_mk

@[simp]
theorem map_id {f : StructuredArrow S T} : (map (ùüô S)).obj f = f := by
  rw [eq_mk f]
  simp
#align category_theory.structured_arrow.map_id CategoryTheory.StructuredArrow.map_id

@[simp]
theorem map_comp {f : S ‚ü∂ S'} {f' : S' ‚ü∂ S''} {h : StructuredArrow S'' T} :
    (map (f ‚â´ f')).obj h = (map f).obj ((map f').obj h) := by
  rw [eq_mk h]
  simp
#align category_theory.structured_arrow.map_comp CategoryTheory.StructuredArrow.map_comp

/-- An isomorphism `S ‚âÖ S'` induces an equivalence `StructuredArrow S T ‚âå StructuredArrow S' T`. -/
@[simp]
def mapIso (i : S ‚âÖ S') : StructuredArrow S T ‚âå StructuredArrow S' T :=
  Comma.mapLeftIso _ ((Functor.const _).mapIso i)

/-- A natural isomorphism `T ‚âÖ T'` induces an equivalence
    `StructuredArrow S T ‚âå StructuredArrow S T'`. -/
@[simp]
def mapNatIso (i : T ‚âÖ T') : StructuredArrow S T ‚âå StructuredArrow S T' :=
  Comma.mapRightIso _ i

instance proj_reflectsIsomorphisms : (proj S T).ReflectsIsomorphisms where
  reflects {Y Z} f t :=
    ‚ü®‚ü®StructuredArrow.homMk
        (inv ((proj S T).map f))
        (by rw [Functor.map_inv, IsIso.comp_inv_eq]; simp),
      by constructor <;> apply CommaMorphism.ext <;> dsimp at t ‚ä¢ <;> simp‚ü©‚ü©
#align category_theory.structured_arrow.proj_reflects_iso CategoryTheory.StructuredArrow.proj_reflectsIsomorphisms

open CategoryTheory.Limits

/-- The identity structured arrow is initial. -/
noncomputable def mkIdInitial [T.Full] [T.Faithful] : IsInitial (mk (ùüô (T.obj Y))) where
  desc c := homMk (T.preimage c.pt.hom)
  uniq c m _ := by
    apply CommaMorphism.ext
    ¬∑ aesop_cat
    ¬∑ apply T.map_injective
      simpa only [homMk_right, T.map_preimage, ‚Üê w m] using (Category.id_comp _).symm
#align category_theory.structured_arrow.mk_id_initial CategoryTheory.StructuredArrow.mkIdInitial

variable {A : Type u‚ÇÉ} [Category.{v‚ÇÉ} A] {B : Type u‚ÇÑ} [Category.{v‚ÇÑ} B]

/-- The functor `(S, F ‚ãô G) ‚•§ (S, G)`. -/
@[simps!]
def pre (S : D) (F : B ‚•§ C) (G : C ‚•§ D) : StructuredArrow S (F ‚ãô G) ‚•§ StructuredArrow S G :=
  Comma.preRight _ F G
#align category_theory.structured_arrow.pre CategoryTheory.StructuredArrow.pre

instance (S : D) (F : B ‚•§ C) (G : C ‚•§ D) [F.Faithful] : (pre S F G).Faithful :=
  show (Comma.preRight _ _ _).Faithful from inferInstance

instance (S : D) (F : B ‚•§ C) (G : C ‚•§ D) [F.Full] : (pre S F G).Full :=
  show (Comma.preRight _ _ _).Full from inferInstance

instance (S : D) (F : B ‚•§ C) (G : C ‚•§ D) [F.EssSurj] : (pre S F G).EssSurj :=
  show (Comma.preRight _ _ _).EssSurj from inferInstance

/-- If `F` is an equivalence, then so is the functor `(S, F ‚ãô G) ‚•§ (S, G)`. -/
instance isEquivalence_pre (S : D) (F : B ‚•§ C) (G : C ‚•§ D) [F.IsEquivalence] :
    (pre S F G).IsEquivalence :=
  Comma.isEquivalence_preRight _ _ _

/-- The functor `(S, F) ‚•§ (G(S), F ‚ãô G)`. -/
@[simps]
def post (S : C) (F : B ‚•§ C) (G : C ‚•§ D) :
    StructuredArrow S F ‚•§ StructuredArrow (G.obj S) (F ‚ãô G) where
  obj X := StructuredArrow.mk (G.map X.hom)
  map f := StructuredArrow.homMk f.right (by simp [Functor.comp_map, ‚Üê G.map_comp, ‚Üê f.w])
#align category_theory.structured_arrow.post CategoryTheory.StructuredArrow.post

instance (S : C) (F : B ‚•§ C) (G : C ‚•§ D) : (post S F G).Faithful where
  map_injective {_ _} _ _ h := by simpa [ext_iff] using h

instance (S : C) (F : B ‚•§ C) (G : C ‚•§ D) [G.Faithful] : (post S F G).Full where
  map_surjective f := ‚ü®homMk f.right (G.map_injective (by simpa using f.w.symm)), by aesop_cat‚ü©

instance (S : C) (F : B ‚•§ C) (G : C ‚•§ D) [G.Full] : (post S F G).EssSurj where
  mem_essImage h := ‚ü®mk (G.preimage h.hom), ‚ü®isoMk (Iso.refl _) (by simp)‚ü©‚ü©

/-- If `G` is fully faithful, then `post S F G : (S, F) ‚•§ (G(S), F ‚ãô G)` is an equivalence. -/
instance isEquivalence_post (S : C) (F : B ‚•§ C) (G : C ‚•§ D) [G.Full] [G.Faithful] :
    (post S F G).IsEquivalence where

section

variable {L : D} {R : C ‚•§ D} {L' : B} {R' : A ‚•§ B} {F : C ‚•§ A} {G : D ‚•§ B}
  (Œ± : L' ‚ü∂ G.obj L) (Œ≤ : R ‚ãô G ‚ü∂ F ‚ãô R')

/-- The functor `StructuredArrow L R ‚•§ StructuredArrow L' R'` that is deduced from
a natural transformation `R ‚ãô G ‚ü∂ F ‚ãô R'` and a morphism `L' ‚ü∂ G.obj L.` -/
@[simps!]
def map‚ÇÇ : StructuredArrow L R ‚•§ StructuredArrow L' R' :=
  Comma.map (F‚ÇÅ := ùü≠ (Discrete PUnit)) (Discrete.natTrans (fun _ => Œ±)) Œ≤

instance faithful_map‚ÇÇ [F.Faithful] : (map‚ÇÇ Œ± Œ≤).Faithful := by
  apply Comma.faithful_map

instance full_map‚ÇÇ [G.Faithful] [F.Full] [IsIso Œ±] [IsIso Œ≤] : (map‚ÇÇ Œ± Œ≤).Full := by
  apply Comma.full_map

instance essSurj_map‚ÇÇ [F.EssSurj] [G.Full] [IsIso Œ±] [IsIso Œ≤] : (map‚ÇÇ Œ± Œ≤).EssSurj := by
  apply Comma.essSurj_map

noncomputable instance isEquivalenceMap‚ÇÇ
    [F.IsEquivalence] [G.Faithful] [G.Full] [IsIso Œ±] [IsIso Œ≤] :
    (map‚ÇÇ Œ± Œ≤).IsEquivalence := by
  apply Comma.isEquivalenceMap

end

instance small_proj_preimage_of_locallySmall {ùí¢ : Set C} [Small.{v‚ÇÅ} ùí¢] [LocallySmall.{v‚ÇÅ} D] :
    Small.{v‚ÇÅ} ((proj S T).obj ‚Åª¬π' ùí¢) := by
  suffices (proj S T).obj ‚Åª¬π' ùí¢ = Set.range fun f : Œ£G : ùí¢, S ‚ü∂ T.obj G => mk f.2 by
    rw [this]
    infer_instance
  exact Set.ext fun X => ‚ü®fun h => ‚ü®‚ü®‚ü®_, h‚ü©, X.hom‚ü©, (eq_mk _).symm‚ü©, by aesop_cat‚ü©
#align category_theory.structured_arrow.small_proj_preimage_of_locally_small CategoryTheory.StructuredArrow.small_proj_preimage_of_locallySmall

/-- A structured arrow is called universal if it is initial. -/
abbrev IsUniversal (f : StructuredArrow S T) := IsInitial f

namespace IsUniversal

variable {f g : StructuredArrow S T}

theorem uniq (h : IsUniversal f) (Œ∑ : f ‚ü∂ g) : Œ∑ = h.to g :=
  h.hom_ext Œ∑ (h.to g)

/-- The family of morphisms out of a universal arrow. -/
def desc (h : IsUniversal f) (g : StructuredArrow S T) : f.right ‚ü∂ g.right :=
  (h.to g).right

/-- Any structured arrow factors through a universal arrow. -/
@[reassoc (attr := simp)]
theorem fac (h : IsUniversal f) (g : StructuredArrow S T) :
    f.hom ‚â´ T.map (h.desc g) = g.hom :=
  Category.id_comp g.hom ‚ñ∏ (h.to g).w.symm

theorem hom_desc (h : IsUniversal f) {c : C} (Œ∑ : f.right ‚ü∂ c) :
    Œ∑ = h.desc (mk <| f.hom ‚â´ T.map Œ∑) :=
  let g := mk <| f.hom ‚â´ T.map Œ∑
  congrArg CommaMorphism.right (h.hom_ext (homMk Œ∑ rfl : f ‚ü∂ g) (h.to g))

/-- Two morphisms out of a universal `T`-structured arrow are equal if their image under `T` are
equal after precomposing the universal arrow. -/
theorem hom_ext (h : IsUniversal f) {c : C} {Œ∑ Œ∑' : f.right ‚ü∂ c}
    (w : f.hom ‚â´ T.map Œ∑ = f.hom ‚â´ T.map Œ∑') : Œ∑ = Œ∑' := by
  rw [h.hom_desc Œ∑, h.hom_desc Œ∑', w]

theorem existsUnique (h : IsUniversal f) (g : StructuredArrow S T) :
    ‚àÉ! Œ∑ : f.right ‚ü∂ g.right, f.hom ‚â´ T.map Œ∑ = g.hom :=
  ‚ü®h.desc g, h.fac g, fun f w ‚Ü¶ h.hom_ext <| by simp [w]‚ü©

end IsUniversal

end StructuredArrow

/-- The category of `S`-costructured arrows with target `T : D` (here `S : C ‚•§ D`),
has as its objects `D`-morphisms of the form `S Y ‚ü∂ T`, for some `Y : C`,
and morphisms `C`-morphisms `Y ‚ü∂ Y'` making the obvious triangle commute.
-/
-- We explicitly come from `PUnit.{1}` here to obtain the correct universe for morphisms of
-- costructured arrows.
-- @[nolint has_nonempty_instance] -- Porting note(#5171): linter not ported yet
def CostructuredArrow (S : C ‚•§ D) (T : D) :=
  Comma S (Functor.fromPUnit.{0} T)
#align category_theory.costructured_arrow CategoryTheory.CostructuredArrow

instance (S : C ‚•§ D) (T : D) : Category (CostructuredArrow S T) := commaCategory

namespace CostructuredArrow

/-- The obvious projection functor from costructured arrows. -/
@[simps!]
def proj (S : C ‚•§ D) (T : D) : CostructuredArrow S T ‚•§ C :=
  Comma.fst _ _
#align category_theory.costructured_arrow.proj CategoryTheory.CostructuredArrow.proj

variable {T T' T'' : D} {Y Y' Y'' : C} {S S' : C ‚•§ D}

-- Porting note: this lemma was added because `Comma.hom_ext`
-- was not triggered automatically
-- See https://github.com/leanprover-community/mathlib4/issues/5229
@[ext]
lemma hom_ext {X Y : CostructuredArrow S T} (f g : X ‚ü∂ Y) (h : f.left = g.left) : f = g :=
  CommaMorphism.ext _ _ h (Subsingleton.elim _ _)

@[simp]
theorem hom_eq_iff {X Y : CostructuredArrow S T} (f g : X ‚ü∂ Y) : f = g ‚Üî f.left = g.left :=
  ‚ü®fun h ‚Ü¶ by rw [h], hom_ext _ _‚ü©

/-- Construct a costructured arrow from a morphism. -/
def mk (f : S.obj Y ‚ü∂ T) : CostructuredArrow S T :=
  ‚ü®Y, ‚ü®‚ü®‚ü©‚ü©, f‚ü©
#align category_theory.costructured_arrow.mk CategoryTheory.CostructuredArrow.mk

@[simp]
theorem mk_left (f : S.obj Y ‚ü∂ T) : (mk f).left = Y :=
  rfl
#align category_theory.costructured_arrow.mk_left CategoryTheory.CostructuredArrow.mk_left

@[simp]
theorem mk_right (f : S.obj Y ‚ü∂ T) : (mk f).right = ‚ü®‚ü®‚ü©‚ü© :=
  rfl
#align category_theory.costructured_arrow.mk_right CategoryTheory.CostructuredArrow.mk_right

@[simp]
theorem mk_hom_eq_self (f : S.obj Y ‚ü∂ T) : (mk f).hom = f :=
  rfl
#align category_theory.costructured_arrow.mk_hom_eq_self CategoryTheory.CostructuredArrow.mk_hom_eq_self

-- @[reassoc (attr := simp)] Porting note: simp can solve these
@[reassoc]
theorem w {A B : CostructuredArrow S T} (f : A ‚ü∂ B) : S.map f.left ‚â´ B.hom = A.hom := by simp
#align category_theory.costructured_arrow.w CategoryTheory.CostructuredArrow.w

@[simp]
theorem comp_left {X Y Z : CostructuredArrow S T} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).left = f.left ‚â´ g.left := rfl

@[simp]
theorem id_left (X : CostructuredArrow S T) : (ùüô X : X ‚ü∂ X).left = ùüô X.left := rfl

@[simp]
theorem eqToHom_left {X Y : CostructuredArrow S T} (h : X = Y) :
    (eqToHom h).left = eqToHom (by rw [h]) := by
  subst h
  simp only [eqToHom_refl, id_left]

@[simp]
theorem right_eq_id {X Y : CostructuredArrow S T} (f : X ‚ü∂ Y) : f.right = ùüô _ := rfl

/-- To construct a morphism of costructured arrows,
we need a morphism of the objects underlying the source,
and to check that the triangle commutes.
-/
@[simps!]
def homMk {f f' : CostructuredArrow S T} (g : f.left ‚ü∂ f'.left)
    (w : S.map g ‚â´ f'.hom = f.hom := by aesop_cat) : f ‚ü∂ f' where
  left := g
  right := ùüô _
#align category_theory.costructured_arrow.hom_mk CategoryTheory.CostructuredArrow.homMk

/- Porting note: it appears the simp lemma is not getting generated but the linter
picks up on it. Either way simp can prove this -/
attribute [-simp, nolint simpNF] homMk_right_down_down

/-- Given a costructured arrow `S(Y) ‚ü∂ X`, and an arrow `Y' ‚ü∂ Y'`, we can construct a morphism of
    costructured arrows given by `(S(Y) ‚ü∂ X) ‚ü∂ (S(Y') ‚ü∂ S(Y) ‚ü∂ X)`. -/
@[simps]
def homMk' (f : CostructuredArrow S T) (g : Y' ‚ü∂ f.left) : mk (S.map g ‚â´ f.hom) ‚ü∂ f where
  left := g
  right := ùüô _

lemma homMk'_id (f : CostructuredArrow S T) : homMk' f (ùüô f.left) = eqToHom (by aesop_cat) := by
  ext
  simp [eqToHom_left]

lemma homMk'_mk_id (f : S.obj Y ‚ü∂ T) : homMk' (mk f) (ùüô Y) = eqToHom (by aesop_cat) :=
  homMk'_id _

lemma homMk'_comp (f : CostructuredArrow S T) (g : Y' ‚ü∂ f.left) (g' : Y'' ‚ü∂ Y') :
    homMk' f (g' ‚â´ g) = eqToHom (by simp) ‚â´ homMk' (mk (S.map g ‚â´ f.hom)) g' ‚â´ homMk' f g := by
  ext
  simp [eqToHom_left]

lemma homMk'_mk_comp (f : S.obj Y ‚ü∂ T) (g : Y' ‚ü∂ Y) (g' : Y'' ‚ü∂ Y') :
    homMk' (mk f) (g' ‚â´ g) = eqToHom (by simp) ‚â´ homMk' (mk (S.map g ‚â´ f)) g' ‚â´ homMk' (mk f) g :=
  homMk'_comp _ _ _

/-- Variant of `homMk'` where both objects are applications of `mk`. -/
@[simps]
def mkPrecomp (f : S.obj Y ‚ü∂ T) (g : Y' ‚ü∂ Y) : mk (S.map g ‚â´ f) ‚ü∂ mk f where
  left := g
  right := ùüô _

lemma mkPrecomp_id (f : S.obj Y ‚ü∂ T) : mkPrecomp f (ùüô Y) = eqToHom (by aesop_cat) := by aesop_cat
lemma mkPrecomp_comp (f : S.obj Y ‚ü∂ T) (g : Y' ‚ü∂ Y) (g' : Y'' ‚ü∂ Y') :
    mkPrecomp f (g' ‚â´ g) = eqToHom (by simp) ‚â´ mkPrecomp (S.map g ‚â´ f) g' ‚â´ mkPrecomp f g := by
  aesop_cat

/-- To construct an isomorphism of costructured arrows,
we need an isomorphism of the objects underlying the source,
and to check that the triangle commutes.
-/
@[simps!]
def isoMk {f f' : CostructuredArrow S T} (g : f.left ‚âÖ f'.left)
    (w : S.map g.hom ‚â´ f'.hom = f.hom := by aesop_cat) : f ‚âÖ f' :=
  Comma.isoMk g (eqToIso (by ext)) (by simpa using w)
#align category_theory.costructured_arrow.iso_mk CategoryTheory.CostructuredArrow.isoMk

/- Porting note: it appears the simp lemma is not getting generated but the linter
picks up on it. Either way simp solves these. -/
attribute [-simp, nolint simpNF] isoMk_hom_right_down_down isoMk_inv_right_down_down

theorem ext {A B : CostructuredArrow S T} (f g : A ‚ü∂ B) (h : f.left = g.left) : f = g :=
  CommaMorphism.ext _ _ h (Subsingleton.elim _ _)
#align category_theory.costructured_arrow.ext CategoryTheory.CostructuredArrow.ext

theorem ext_iff {A B : CostructuredArrow S T} (f g : A ‚ü∂ B) : f = g ‚Üî f.left = g.left :=
  ‚ü®fun h => h ‚ñ∏ rfl, ext f g‚ü©
#align category_theory.costructured_arrow.ext_iff CategoryTheory.CostructuredArrow.ext_iff

instance proj_faithful : (proj S T).Faithful where map_injective {_ _} := ext
#align category_theory.costructured_arrow.proj_faithful CategoryTheory.CostructuredArrow.proj_faithful

theorem mono_of_mono_left {A B : CostructuredArrow S T} (f : A ‚ü∂ B) [h : Mono f.left] : Mono f :=
  (proj S T).mono_of_mono_map h
#align category_theory.costructured_arrow.mono_of_mono_left CategoryTheory.CostructuredArrow.mono_of_mono_left

/-- The converse of this is true with additional assumptions, see `epi_iff_epi_left`. -/
theorem epi_of_epi_left {A B : CostructuredArrow S T} (f : A ‚ü∂ B) [h : Epi f.left] : Epi f :=
  (proj S T).epi_of_epi_map h
#align category_theory.costructured_arrow.epi_of_epi_left CategoryTheory.CostructuredArrow.epi_of_epi_left

instance mono_homMk {A B : CostructuredArrow S T} (f : A.left ‚ü∂ B.left) (w) [h : Mono f] :
    Mono (homMk f w) :=
  (proj S T).mono_of_mono_map h
#align category_theory.costructured_arrow.mono_hom_mk CategoryTheory.CostructuredArrow.mono_homMk

instance epi_homMk {A B : CostructuredArrow S T} (f : A.left ‚ü∂ B.left) (w) [h : Epi f] :
    Epi (homMk f w) :=
  (proj S T).epi_of_epi_map h
#align category_theory.costructured_arrow.epi_hom_mk CategoryTheory.CostructuredArrow.epi_homMk

/-- Eta rule for costructured arrows. Prefer `CostructuredArrow.eta` for rewriting, as equality of
    objects tends to cause problems. -/
theorem eq_mk (f : CostructuredArrow S T) : f = mk f.hom :=
  rfl
#align category_theory.costructured_arrow.eq_mk CategoryTheory.CostructuredArrow.eq_mk

/-- Eta rule for costructured arrows. -/
@[simps!]
def eta (f : CostructuredArrow S T) : f ‚âÖ mk f.hom :=
  isoMk (Iso.refl _)
#align category_theory.costructured_arrow.eta CategoryTheory.CostructuredArrow.eta

/- Porting note: it appears the simp lemma is not getting generated but the linter
picks up on it. Either way simp solves these. -/
attribute [-simp, nolint simpNF] eta_hom_right_down_down eta_inv_right_down_down

/-- A morphism between target objects `T ‚ü∂ T'`
covariantly induces a functor between costructured arrows,
`CostructuredArrow S T ‚•§ CostructuredArrow S T'`.

Ideally this would be described as a 2-functor from `D`
(promoted to a 2-category with equations as 2-morphisms)
to `Cat`.
-/
@[simps!]
def map (f : T ‚ü∂ T') : CostructuredArrow S T ‚•§ CostructuredArrow S T' :=
  Comma.mapRight _ ((Functor.const _).map f)
#align category_theory.costructured_arrow.map CategoryTheory.CostructuredArrow.map

@[simp]
theorem map_mk {f : S.obj Y ‚ü∂ T} (g : T ‚ü∂ T') : (map g).obj (mk f) = mk (f ‚â´ g) :=
  rfl
#align category_theory.costructured_arrow.map_mk CategoryTheory.CostructuredArrow.map_mk

@[simp]
theorem map_id {f : CostructuredArrow S T} : (map (ùüô T)).obj f = f := by
  rw [eq_mk f]
  simp
#align category_theory.costructured_arrow.map_id CategoryTheory.CostructuredArrow.map_id

@[simp]
theorem map_comp {f : T ‚ü∂ T'} {f' : T' ‚ü∂ T''} {h : CostructuredArrow S T} :
    (map (f ‚â´ f')).obj h = (map f').obj ((map f).obj h) := by
  rw [eq_mk h]
  simp
#align category_theory.costructured_arrow.map_comp CategoryTheory.CostructuredArrow.map_comp

/-- An isomorphism `T ‚âÖ T'` induces an equivalence
    `CostructuredArrow S T ‚âå CostructuredArrow S T'`. -/
@[simp]
def mapIso (i : T ‚âÖ T') : CostructuredArrow S T ‚âå CostructuredArrow S T' :=
  Comma.mapRightIso _ ((Functor.const _).mapIso i)

/-- A natural isomorphism `S ‚âÖ S'` induces an equivalence
    `CostrucutredArrow S T ‚âå CostructuredArrow S' T`. -/
@[simp]
def mapNatIso (i : S ‚âÖ S') : CostructuredArrow S T ‚âå CostructuredArrow S' T :=
  Comma.mapLeftIso _ i

instance proj_reflectsIsomorphisms : (proj S T).ReflectsIsomorphisms where
  reflects {Y Z} f t :=
    ‚ü®‚ü®CostructuredArrow.homMk
        (inv ((proj S T).map f))
        (by rw [Functor.map_inv, IsIso.inv_comp_eq]; simp),
      by constructor <;> ext <;> dsimp at t ‚ä¢ <;> simp‚ü©‚ü©
#align category_theory.costructured_arrow.proj_reflects_iso CategoryTheory.CostructuredArrow.proj_reflectsIsomorphisms

open CategoryTheory.Limits

/-- The identity costructured arrow is terminal. -/
noncomputable def mkIdTerminal [S.Full] [S.Faithful] : IsTerminal (mk (ùüô (S.obj Y))) where
  lift c := homMk (S.preimage c.pt.hom)
  uniq := by
    rintro c m -
    ext
    apply S.map_injective
    simpa only [homMk_left, S.map_preimage, ‚Üê w m] using (Category.comp_id _).symm
#align category_theory.costructured_arrow.mk_id_terminal CategoryTheory.CostructuredArrow.mkIdTerminal

variable {A : Type u‚ÇÉ} [Category.{v‚ÇÉ} A] {B : Type u‚ÇÑ} [Category.{v‚ÇÑ} B]

/-- The functor `(F ‚ãô G, S) ‚•§ (G, S)`. -/
@[simps!]
def pre (F : B ‚•§ C) (G : C ‚•§ D) (S : D) : CostructuredArrow (F ‚ãô G) S ‚•§ CostructuredArrow G S :=
  Comma.preLeft F G _
#align category_theory.costructured_arrow.pre CategoryTheory.CostructuredArrow.pre

instance (F : B ‚•§ C) (G : C ‚•§ D) (S : D) [F.Faithful] : (pre F G S).Faithful :=
  show (Comma.preLeft _ _ _).Faithful from inferInstance

instance (F : B ‚•§ C) (G : C ‚•§ D) (S : D) [F.Full] : (pre F G S).Full :=
  show (Comma.preLeft _ _ _).Full from inferInstance

instance (F : B ‚•§ C) (G : C ‚•§ D) (S : D) [F.EssSurj] : (pre F G S).EssSurj :=
  show (Comma.preLeft _ _ _).EssSurj from inferInstance

/-- If `F` is an equivalence, then so is the functor `(F ‚ãô G, S) ‚•§ (G, S)`. -/
instance isEquivalence_pre (F : B ‚•§ C) (G : C ‚•§ D) (S : D) [F.IsEquivalence] :
    (pre F G S).IsEquivalence :=
  Comma.isEquivalence_preLeft _ _ _

/-- The functor `(F, S) ‚•§ (F ‚ãô G, G(S))`. -/
@[simps]
def post (F : B ‚•§ C) (G : C ‚•§ D) (S : C) :
    CostructuredArrow F S ‚•§ CostructuredArrow (F ‚ãô G) (G.obj S) where
  obj X := CostructuredArrow.mk (G.map X.hom)
  map f := CostructuredArrow.homMk f.left (by simp [Functor.comp_map, ‚Üê G.map_comp, ‚Üê f.w])
#align category_theory.costructured_arrow.post CategoryTheory.CostructuredArrow.post

instance (F : B ‚•§ C) (G : C ‚•§ D) (S : C) : (post F G S).Faithful where
  map_injective {_ _} _ _ h := by simpa [ext_iff] using h

instance (F : B ‚•§ C) (G : C ‚•§ D) (S : C) [G.Faithful] : (post F G S).Full where
  map_surjective f := ‚ü®homMk f.left (G.map_injective (by simpa using f.w)), by aesop_cat‚ü©

instance (F : B ‚•§ C) (G : C ‚•§ D) (S : C) [G.Full] : (post F G S).EssSurj where
  mem_essImage h := ‚ü®mk (G.preimage h.hom), ‚ü®isoMk (Iso.refl _) (by simp)‚ü©‚ü©

/-- If `G` is fully faithful, then `post F G S : (F, S) ‚•§ (F ‚ãô G, G(S))` is an equivalence. -/
instance isEquivalence_post (S : C) (F : B ‚•§ C) (G : C ‚•§ D) [G.Full] [G.Faithful] :
    (post F G S).IsEquivalence where

section

variable {U : A ‚•§ B} {V : B} {F : C ‚•§ A} {G : D ‚•§ B}
  (Œ± : F ‚ãô U ‚ü∂ S ‚ãô G) (Œ≤ : G.obj T ‚ü∂ V)

/-- The functor `CostructuredArrow S T ‚•§ CostructuredArrow U V` that is deduced from
a natural transformation `F ‚ãô U ‚ü∂ S ‚ãô G` and a morphism `G.obj T ‚ü∂ V` -/
@[simps!]
def map‚ÇÇ : CostructuredArrow S T ‚•§ CostructuredArrow U V :=
  Comma.map (F‚ÇÇ := ùü≠ (Discrete PUnit)) Œ± (Discrete.natTrans (fun _ => Œ≤))

instance faithful_map‚ÇÇ [F.Faithful] : (map‚ÇÇ Œ± Œ≤).Faithful := by
  apply Comma.faithful_map

instance full_map‚ÇÇ [G.Faithful] [F.Full] [IsIso Œ±] [IsIso Œ≤] : (map‚ÇÇ Œ± Œ≤).Full := by
  apply Comma.full_map

instance essSurj_map‚ÇÇ [F.EssSurj] [G.Full] [IsIso Œ±] [IsIso Œ≤] : (map‚ÇÇ Œ± Œ≤).EssSurj := by
  apply Comma.essSurj_map

noncomputable instance isEquivalenceMap‚ÇÇ
    [F.IsEquivalence] [G.Faithful] [G.Full] [IsIso Œ±] [IsIso Œ≤] :
    (map‚ÇÇ Œ± Œ≤).IsEquivalence := by
  apply Comma.isEquivalenceMap

end

instance small_proj_preimage_of_locallySmall {ùí¢ : Set C} [Small.{v‚ÇÅ} ùí¢] [LocallySmall.{v‚ÇÅ} D] :
    Small.{v‚ÇÅ} ((proj S T).obj ‚Åª¬π' ùí¢) := by
  suffices (proj S T).obj ‚Åª¬π' ùí¢ = Set.range fun f : Œ£G : ùí¢, S.obj G ‚ü∂ T => mk f.2 by
    rw [this]
    infer_instance
  exact Set.ext fun X => ‚ü®fun h => ‚ü®‚ü®‚ü®_, h‚ü©, X.hom‚ü©, (eq_mk _).symm‚ü©, by aesop_cat‚ü©
#align category_theory.costructured_arrow.small_proj_preimage_of_locally_small CategoryTheory.CostructuredArrow.small_proj_preimage_of_locallySmall

/-- A costructured arrow is called universal if it is terminal. -/
abbrev IsUniversal (f : CostructuredArrow S T) := IsTerminal f

namespace IsUniversal

variable {f g : CostructuredArrow S T}

theorem uniq (h : IsUniversal f) (Œ∑ : g ‚ü∂ f) : Œ∑ = h.from g :=
  h.hom_ext Œ∑ (h.from g)

/-- The family of morphisms into a universal arrow. -/
def lift (h : IsUniversal f) (g : CostructuredArrow S T) : g.left ‚ü∂ f.left :=
  (h.from g).left

/-- Any costructured arrow factors through a universal arrow. -/
@[reassoc (attr := simp)]
theorem fac (h : IsUniversal f) (g : CostructuredArrow S T) :
    S.map (h.lift g) ‚â´ f.hom = g.hom :=
  Category.comp_id g.hom ‚ñ∏ (h.from g).w

theorem hom_desc (h : IsUniversal f) {c : C} (Œ∑ : c ‚ü∂ f.left) :
    Œ∑ = h.lift (mk <| S.map Œ∑ ‚â´ f.hom) :=
  let g := mk <| S.map Œ∑ ‚â´ f.hom
  congrArg CommaMorphism.left (h.hom_ext (homMk Œ∑ rfl : g ‚ü∂ f) (h.from g))

/-- Two morphisms into a universal `S`-costructured arrow are equal if their image under `S` are
equal after postcomposing the universal arrow. -/
theorem hom_ext (h : IsUniversal f) {c : C} {Œ∑ Œ∑' : c ‚ü∂ f.left}
    (w : S.map Œ∑ ‚â´ f.hom = S.map Œ∑' ‚â´ f.hom) : Œ∑ = Œ∑' := by
  rw [h.hom_desc Œ∑, h.hom_desc Œ∑', w]

theorem existsUnique (h : IsUniversal f) (g : CostructuredArrow S T) :
    ‚àÉ! Œ∑ : g.left ‚ü∂ f.left, S.map Œ∑ ‚â´ f.hom = g.hom :=
  ‚ü®h.lift g, h.fac g, fun f w ‚Ü¶ h.hom_ext <| by simp [w]‚ü©

end IsUniversal

end CostructuredArrow

namespace Functor

variable {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E]

/-- Given `X : D` and `F : C ‚•§ D`, to upgrade a functor `G : E ‚•§ C` to a functor
    `E ‚•§ StructuredArrow X F`, it suffices to provide maps `X ‚ü∂ F.obj (G.obj Y)` for all `Y` making
    the obvious triangles involving all `F.map (G.map g)` commute.

    This is of course the same as providing a cone over `F ‚ãô G` with cone point `X`, see
    `Functor.toStructuredArrowIsoToStructuredArrow`. -/
@[simps]
def toStructuredArrow (G : E ‚•§ C) (X : D) (F : C ‚•§ D) (f : (Y : E) ‚Üí X ‚ü∂ F.obj (G.obj Y))
    (h : ‚àÄ {Y Z : E} (g : Y ‚ü∂ Z), f Y ‚â´ F.map (G.map g) = f Z) : E ‚•§ StructuredArrow X F where
  obj Y := StructuredArrow.mk (f Y)
  map g := StructuredArrow.homMk (G.map g) (h g)

/-- Upgrading a functor `E ‚•§ C` to a functor `E ‚•§ StructuredArrow X F` and composing with the
    forgetful functor `StructuredArrow X F ‚•§ C` recovers the original functor. -/
def toStructuredArrowCompProj (G : E ‚•§ C) (X : D) (F : C ‚•§ D) (f : (Y : E) ‚Üí X ‚ü∂ F.obj (G.obj Y))
    (h : ‚àÄ {Y Z : E} (g : Y ‚ü∂ Z), f Y ‚â´ F.map (G.map g) = f Z) :
    G.toStructuredArrow X F f h ‚ãô StructuredArrow.proj _ _ ‚âÖ G :=
  Iso.refl _

@[simp]
lemma toStructuredArrow_comp_proj (G : E ‚•§ C) (X : D) (F : C ‚•§ D)
    (f : (Y : E) ‚Üí X ‚ü∂ F.obj (G.obj Y)) (h : ‚àÄ {Y Z : E} (g : Y ‚ü∂ Z), f Y ‚â´ F.map (G.map g) = f Z) :
    G.toStructuredArrow X F f h ‚ãô StructuredArrow.proj _ _ = G :=
  rfl

/-- Given `F : C ‚•§ D` and `X : D`, to upgrade a functor `G : E ‚•§ C` to a functor
    `E ‚•§ CostructuredArrow F X`, it suffices to provide maps `F.obj (G.obj Y) ‚ü∂ X` for all `Y`
    making the obvious triangles involving all `F.map (G.map g)` commute.

    This is of course the same as providing a cocone over `F ‚ãô G` with cocone point `X`, see
    `Functor.toCostructuredArrowIsoToCostructuredArrow`. -/
@[simps]
def toCostructuredArrow (G : E ‚•§ C) (F : C ‚•§ D) (X : D) (f : (Y : E) ‚Üí F.obj (G.obj Y) ‚ü∂ X)
    (h : ‚àÄ {Y Z : E} (g : Y ‚ü∂ Z), F.map (G.map g) ‚â´ f Z = f Y) : E ‚•§ CostructuredArrow F X where
  obj Y := CostructuredArrow.mk (f Y)
  map g := CostructuredArrow.homMk (G.map g) (h g)

/-- Upgrading a functor `E ‚•§ C` to a functor `E ‚•§ CostructuredArrow F X` and composing with the
    forgetful functor `CostructuredArrow F X ‚•§ C` recovers the original functor. -/
def toCostructuredArrowCompProj (G : E ‚•§ C) (F : C ‚•§ D) (X : D)
    (f : (Y : E) ‚Üí F.obj (G.obj Y) ‚ü∂ X) (h : ‚àÄ {Y Z : E} (g : Y ‚ü∂ Z), F.map (G.map g) ‚â´ f Z = f Y) :
    G.toCostructuredArrow F X f h ‚ãô CostructuredArrow.proj _ _ ‚âÖ G :=
  Iso.refl _

@[simp]
lemma toCostructuredArrow_comp_proj (G : E ‚•§ C) (F : C ‚•§ D) (X : D)
    (f : (Y : E) ‚Üí F.obj (G.obj Y) ‚ü∂ X) (h : ‚àÄ {Y Z : E} (g : Y ‚ü∂ Z), F.map (G.map g) ‚â´ f Z = f Y) :
    G.toCostructuredArrow F X f h ‚ãô CostructuredArrow.proj _ _ = G :=
rfl

end Functor

open Opposite

namespace StructuredArrow

/-- For a functor `F : C ‚•§ D` and an object `d : D`, we obtain a contravariant functor from the
category of structured arrows `d ‚ü∂ F.obj c` to the category of costructured arrows
`F.op.obj c ‚ü∂ (op d)`.
-/
@[simps]
def toCostructuredArrow (F : C ‚•§ D) (d : D) :
    (StructuredArrow d F)·µí·µñ ‚•§ CostructuredArrow F.op (op d) where
  obj X := @CostructuredArrow.mk _ _ _ _ _ (op X.unop.right) F.op X.unop.hom.op
  map f :=
    CostructuredArrow.homMk f.unop.right.op
      (by
        dsimp
        rw [‚Üê op_comp, ‚Üê f.unop.w, Functor.const_obj_map]
        erw [Category.id_comp])
#align category_theory.structured_arrow.to_costructured_arrow CategoryTheory.StructuredArrow.toCostructuredArrow

/-- For a functor `F : C ‚•§ D` and an object `d : D`, we obtain a contravariant functor from the
category of structured arrows `op d ‚ü∂ F.op.obj c` to the category of costructured arrows
`F.obj c ‚ü∂ d`.
-/
@[simps]
def toCostructuredArrow' (F : C ‚•§ D) (d : D) :
    (StructuredArrow (op d) F.op)·µí·µñ ‚•§ CostructuredArrow F d where
  obj X := @CostructuredArrow.mk _ _ _ _ _ (unop X.unop.right) F X.unop.hom.unop
  map f :=
    CostructuredArrow.homMk f.unop.right.unop
      (by
        dsimp
        rw [‚Üê Quiver.Hom.unop_op (F.map (Quiver.Hom.unop f.unop.right)), ‚Üê unop_comp, ‚Üê F.op_map, ‚Üê
          f.unop.w, Functor.const_obj_map]
        erw [Category.id_comp])
#align category_theory.structured_arrow.to_costructured_arrow' CategoryTheory.StructuredArrow.toCostructuredArrow'

end StructuredArrow

namespace CostructuredArrow

/-- For a functor `F : C ‚•§ D` and an object `d : D`, we obtain a contravariant functor from the
category of costructured arrows `F.obj c ‚ü∂ d` to the category of structured arrows
`op d ‚ü∂ F.op.obj c`.
-/
@[simps]
def toStructuredArrow (F : C ‚•§ D) (d : D) :
    (CostructuredArrow F d)·µí·µñ ‚•§ StructuredArrow (op d) F.op where
  obj X := @StructuredArrow.mk _ _ _ _ _ (op X.unop.left) F.op X.unop.hom.op
  map f :=
    StructuredArrow.homMk f.unop.left.op
      (by
        dsimp
        rw [‚Üê op_comp, f.unop.w, Functor.const_obj_map]
        erw [Category.comp_id])
#align category_theory.costructured_arrow.to_structured_arrow CategoryTheory.CostructuredArrow.toStructuredArrow

/-- For a functor `F : C ‚•§ D` and an object `d : D`, we obtain a contravariant functor from the
category of costructured arrows `F.op.obj c ‚ü∂ op d` to the category of structured arrows
`d ‚ü∂ F.obj c`.
-/
@[simps]
def toStructuredArrow' (F : C ‚•§ D) (d : D) :
    (CostructuredArrow F.op (op d))·µí·µñ ‚•§ StructuredArrow d F where
  obj X := @StructuredArrow.mk _ _ _ _ _ (unop X.unop.left) F X.unop.hom.unop
  map f :=
    StructuredArrow.homMk f.unop.left.unop
      (by
        dsimp
        rw [‚Üê Quiver.Hom.unop_op (F.map f.unop.left.unop), ‚Üê unop_comp, ‚Üê F.op_map, f.unop.w,
          Functor.const_obj_map]
        erw [Category.comp_id])
#align category_theory.costructured_arrow.to_structured_arrow' CategoryTheory.CostructuredArrow.toStructuredArrow'

end CostructuredArrow

/-- For a functor `F : C ‚•§ D` and an object `d : D`, the category of structured arrows `d ‚ü∂ F.obj c`
is contravariantly equivalent to the category of costructured arrows `F.op.obj c ‚ü∂ op d`.
-/
def structuredArrowOpEquivalence (F : C ‚•§ D) (d : D) :
    (StructuredArrow d F)·µí·µñ ‚âå CostructuredArrow F.op (op d) :=
  Equivalence.mk (StructuredArrow.toCostructuredArrow F d)
    (CostructuredArrow.toStructuredArrow' F d).rightOp
    (NatIso.ofComponents
      (fun X => (StructuredArrow.isoMk (Iso.refl _)).op)
      fun {X Y} f => Quiver.Hom.unop_inj <| by
        apply CommaMorphism.ext <;>
          dsimp [StructuredArrow.isoMk, Comma.isoMk,StructuredArrow.homMk]; simp)
    (NatIso.ofComponents
      (fun X => CostructuredArrow.isoMk (Iso.refl _))
      fun {X Y} f => by
        apply CommaMorphism.ext <;>
          dsimp [CostructuredArrow.isoMk, Comma.isoMk, CostructuredArrow.homMk]; simp)
#align category_theory.structured_arrow_op_equivalence CategoryTheory.structuredArrowOpEquivalence

/-- For a functor `F : C ‚•§ D` and an object `d : D`, the category of costructured arrows
`F.obj c ‚ü∂ d` is contravariantly equivalent to the category of structured arrows
`op d ‚ü∂ F.op.obj c`.
-/
def costructuredArrowOpEquivalence (F : C ‚•§ D) (d : D) :
    (CostructuredArrow F d)·µí·µñ ‚âå StructuredArrow (op d) F.op :=
  Equivalence.mk (CostructuredArrow.toStructuredArrow F d)
    (StructuredArrow.toCostructuredArrow' F d).rightOp
    (NatIso.ofComponents
      (fun X => (CostructuredArrow.isoMk (Iso.refl _)).op)
      fun {X Y} f => Quiver.Hom.unop_inj <| by
        apply CommaMorphism.ext <;>
          dsimp [CostructuredArrow.isoMk, CostructuredArrow.homMk, Comma.isoMk]; simp)
    (NatIso.ofComponents
      (fun X => StructuredArrow.isoMk (Iso.refl _))
      fun {X Y} f => by
        apply CommaMorphism.ext <;>
          dsimp [StructuredArrow.isoMk, StructuredArrow.homMk, Comma.isoMk]; simp)
#align category_theory.costructured_arrow_op_equivalence CategoryTheory.costructuredArrowOpEquivalence

end CategoryTheory
