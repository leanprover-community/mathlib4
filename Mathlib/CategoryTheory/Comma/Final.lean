/-
Copyright (c) 2024 Jakob von Raumer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jakob von Raumer
-/
import Mathlib.CategoryTheory.Functor.KanExtension.Adjunction
import Mathlib.CategoryTheory.Limits.Final
import Mathlib.CategoryTheory.Grothendieck

/-!
# Finality of Projections in Comma Categories
-/

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace CategoryTheory

namespace Comma

open Limits Functor CostructuredArrow

variable {A : Type v‚ÇÅ} [Category.{v‚ÇÅ} A]
variable {B : Type v‚ÇÅ} [Category.{v‚ÇÅ} B]
variable {T : Type v‚ÇÅ} [Category.{v‚ÇÅ} T]
variable (L : A ‚•§ T) (R : B ‚•§ T)

lemma final_fst [R.Final] : (fst L R).Final := by
  rw  [Functor.final_iff_isIso_colimit_pre]
  intro G
  let i : colimit G ‚âÖ colimit (fst L R ‚ãô G) :=
    colimitIsoColimitGrothendieck L G ‚â™‚â´
    (Final.colimitIso (Grothendieck.pre (functor L) R) (grothendieckProj L ‚ãô G)).symm ‚â™‚â´
    Final.colimitIso (grothendieckPrecompFunctorEquivalence L R).functor (fst L R ‚ãô G)
  convert i.isIso_inv
  apply colimit.hom_ext
  intro ‚ü®l, r, f‚ü©
  simp only [comp_obj, fst_obj, colimit.Œπ_pre, grothendieckPrecompFunctorEquivalence_functor,
    Iso.trans_inv, Iso.symm_inv, colimitIsoColimitGrothendieck_inv, Category.assoc, i]
  simp only [‚Üê Category.assoc, ‚Üê Iso.comp_inv_eq, Iso.eq_comp_inv]
  simp only [Œπ_colimitIsoOfIsLeftKanExtension_inv, comp_obj, Category.assoc,
    HasColimit.isoOfNatIso_Œπ_hom, fiberwiseColimit_obj, functor_obj, Cat.of_Œ±,
    leftKanExtensionIsoFiberwiseColimit_hom_app,
    leftKanExtensionUnit_leftKanExtensionObjIsoColimit_hom_assoc,
    HasColimit.isoOfNatIso_Œπ_inv_assoc, proj_obj, mk_left, Grothendieck.Œπ_obj, grothendieckProj_obj,
    isoWhiskerRight_inv, whiskerRight_app, ŒπCompGrothendieckProj_inv_app, Functor.map_id,
    Category.id_comp]
  rw [Œπ_colimitFiberwiseColimitIso_hom_assoc]
  simp only [functor_obj, Cat.of_Œ±, Grothendieck.Œπ_obj, comp_obj, grothendieckProj_obj, mk_left,
    Final.colimitIso, asIso_inv, asIso_hom]
  rw [‚Üê colimit.w (grothendieckProj L ‚ãô G) (j' := (Grothendieck.pre _ R).obj ‚ü®r, .mk f‚ü©)
    ‚ü®f, (by { simp; exact ùüô _ })‚ü©]
  have : colimit.Œπ (Grothendieck.pre (functor L) R ‚ãô grothendieckProj L ‚ãô G) =
    colimit.Œπ (grothendieckPrecompFunctorToComma L R ‚ãô fst L R ‚ãô G) :=
    rfl
  simp [this, grothendieckPrecompFunctorToComma]

end Comma

end CategoryTheory
