/-
Copyright (c) 2018 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Johan Commelin, Bhavik Mehta
-/
import Mathlib.CategoryTheory.Iso
import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.EqToHom
import Mathlib.CategoryTheory.Products.Unitor

/-!
# Comma categories

A comma category is a construction in category theory, which builds a category out of two functors
with a common codomain. Specifically, for functors `L : A ‚•§ T` and `R : B ‚•§ T`, an object in
`Comma L R` is a morphism `hom : L.obj left ‚ü∂ R.obj right` for some objects `left : A` and
`right : B`, and a morphism in `Comma L R` between `hom : L.obj left ‚ü∂ R.obj right` and
`hom' : L.obj left' ‚ü∂ R.obj right'` is a commutative square

```
L.obj left  ‚ü∂  L.obj left'
      |               |
  hom |               | hom'
      ‚Üì               ‚Üì
R.obj right ‚ü∂  R.obj right',
```

where the top and bottom morphism come from morphisms `left ‚ü∂ left'` and `right ‚ü∂ right'`,
respectively.

## Main definitions

* `Comma L R`: the comma category of the functors `L` and `R`.
* `Over X`: the over category of the object `X` (developed in `Over.lean`).
* `Under X`: the under category of the object `X` (also developed in `Over.lean`).
* `Arrow T`: the arrow category of the category `T` (developed in `Arrow.lean`).

## References

* <https://ncatlab.org/nlab/show/comma+category>

## Tags

comma, slice, coslice, over, under, arrow
-/


namespace CategoryTheory

open Category

-- declare the `v`'s first; see `CategoryTheory.Category` for an explanation
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ v‚ÇÖ v‚ÇÜ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÖ u‚ÇÜ

variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A]
variable {B : Type u‚ÇÇ} [Category.{v‚ÇÇ} B]
variable {T : Type u‚ÇÉ} [Category.{v‚ÇÉ} T]
variable {A' : Type u‚ÇÑ} [Category.{v‚ÇÑ} A']
variable {B' : Type u‚ÇÖ} [Category.{v‚ÇÖ} B']
variable {T' : Type u‚ÇÜ} [Category.{v‚ÇÜ} T']

/-- The objects of the comma category are triples of an object `left : A`, an object
   `right : B` and a morphism `hom : L.obj left ‚ü∂ R.obj right`. -/
structure Comma (L : A ‚•§ T) (R : B ‚•§ T) : Type max u‚ÇÅ u‚ÇÇ v‚ÇÉ where
  left : A
  right : B
  hom : L.obj left ‚ü∂ R.obj right

-- Satisfying the inhabited linter
instance Comma.inhabited [Inhabited T] : Inhabited (Comma (ùü≠ T) (ùü≠ T)) where
  default :=
    { left := default
      right := default
      hom := ùüô default }

variable {L : A ‚•§ T} {R : B ‚•§ T}

/-- A morphism between two objects in the comma category is a commutative square connecting the
    morphisms coming from the two objects using morphisms in the image of the functors `L` and `R`.
-/
@[ext]
structure CommaMorphism (X Y : Comma L R) where
  left : X.left ‚ü∂ Y.left
  right : X.right ‚ü∂ Y.right
  w : L.map left ‚â´ Y.hom = X.hom ‚â´ R.map right := by aesop_cat

-- Satisfying the inhabited linter
instance CommaMorphism.inhabited [Inhabited (Comma L R)] :
    Inhabited (CommaMorphism (default : Comma L R) default) :=
    ‚ü®{ left := ùüô _, right := ùüô _}‚ü©

attribute [reassoc (attr := simp)] CommaMorphism.w

instance commaCategory : Category (Comma L R) where
  Hom X Y := CommaMorphism X Y
  id X :=
    { left := ùüô X.left
      right := ùüô X.right }
  comp f g :=
    { left := f.left ‚â´ g.left
      right := f.right ‚â´ g.right }

namespace Comma

section

variable {X Y Z : Comma L R} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}

-- Porting note: this lemma was added because `CommaMorphism.ext`
-- was not triggered automatically
@[ext]
lemma hom_ext (f g : X ‚ü∂ Y) (h‚ÇÅ : f.left = g.left) (h‚ÇÇ : f.right = g.right) : f = g :=
  CommaMorphism.ext h‚ÇÅ h‚ÇÇ

@[simp]
theorem id_left : (ùüô X : CommaMorphism X X).left = ùüô X.left :=
  rfl

@[simp]
theorem id_right : (ùüô X : CommaMorphism X X).right = ùüô X.right :=
  rfl

@[simp]
theorem comp_left : (f ‚â´ g).left = f.left ‚â´ g.left :=
  rfl

@[simp]
theorem comp_right : (f ‚â´ g).right = f.right ‚â´ g.right :=
  rfl

end

variable (L) (R)

/-- The functor sending an object `X` in the comma category to `X.left`. -/
@[simps]
def fst : Comma L R ‚•§ A where
  obj X := X.left
  map f := f.left

/-- The functor sending an object `X` in the comma category to `X.right`. -/
@[simps]
def snd : Comma L R ‚•§ B where
  obj X := X.right
  map f := f.right

/-- We can interpret the commutative square constituting a morphism in the comma category as a
    natural transformation between the functors `fst ‚ãô L` and `snd ‚ãô R` from the comma category
    to `T`, where the components are given by the morphism that constitutes an object of the comma
    category. -/
@[simps]
def natTrans : fst L R ‚ãô L ‚ü∂ snd L R ‚ãô R where app X := X.hom

@[simp]
theorem eqToHom_left (X Y : Comma L R) (H : X = Y) :
    CommaMorphism.left (eqToHom H) = eqToHom (by cases H; rfl) := by
  cases H
  rfl

@[simp]
theorem eqToHom_right (X Y : Comma L R) (H : X = Y) :
    CommaMorphism.right (eqToHom H) = eqToHom (by cases H; rfl) := by
  cases H
  rfl

section

variable {L‚ÇÅ L‚ÇÇ L‚ÇÉ : A ‚•§ T} {R‚ÇÅ R‚ÇÇ R‚ÇÉ : B ‚•§ T}

/-- Extract the isomorphism between the left objects from an isomorphism in the comma category. -/
@[simps!]
def leftIso {X Y : Comma L‚ÇÅ R‚ÇÅ} (Œ± : X ‚âÖ Y) : X.left ‚âÖ Y.left := (fst L‚ÇÅ R‚ÇÅ).mapIso Œ±

/-- Extract the isomorphism between the right objects from an isomorphism in the comma category. -/
@[simps!]
def rightIso {X Y : Comma L‚ÇÅ R‚ÇÅ} (Œ± : X ‚âÖ Y) : X.right ‚âÖ Y.right := (snd L‚ÇÅ R‚ÇÅ).mapIso Œ±

/-- Construct an isomorphism in the comma category given isomorphisms of the objects whose forward
directions give a commutative square.
-/
@[simps]
def isoMk {X Y : Comma L‚ÇÅ R‚ÇÅ} (l : X.left ‚âÖ Y.left) (r : X.right ‚âÖ Y.right)
    (h : L‚ÇÅ.map l.hom ‚â´ Y.hom = X.hom ‚â´ R‚ÇÅ.map r.hom := by aesop_cat) : X ‚âÖ Y where
  hom :=
    { left := l.hom
      right := r.hom
      w := h }
  inv :=
    { left := l.inv
      right := r.inv
      w := by
        rw [‚Üê L‚ÇÅ.mapIso_inv l, Iso.inv_comp_eq, L‚ÇÅ.mapIso_hom, ‚Üê Category.assoc, h,
          Category.assoc, ‚Üê R‚ÇÅ.map_comp]
        simp }

section

variable {L R}
variable {L' : A' ‚•§ T'} {R' : B' ‚•§ T'}
  {F‚ÇÅ : A ‚•§ A'} {F‚ÇÇ : B ‚•§ B'} {F : T ‚•§ T'}
  (Œ± : F‚ÇÅ ‚ãô L' ‚ü∂ L ‚ãô F) (Œ≤ : R ‚ãô F ‚ü∂ F‚ÇÇ ‚ãô R')

/-- The functor `Comma L R ‚•§ Comma L' R'` induced by three functors `F‚ÇÅ`, `F‚ÇÇ`, `F`
and two natural transformations `F‚ÇÅ ‚ãô L' ‚ü∂ L ‚ãô F` and `R ‚ãô F ‚ü∂ F‚ÇÇ ‚ãô R'`. -/
@[simps]
def map : Comma L R ‚•§ Comma L' R' where
  obj X :=
    { left := F‚ÇÅ.obj X.left
      right := F‚ÇÇ.obj X.right
      hom := Œ±.app X.left ‚â´ F.map X.hom ‚â´ Œ≤.app X.right }
  map {X Y} œÜ :=
    { left := F‚ÇÅ.map œÜ.left
      right := F‚ÇÇ.map œÜ.right
      w := by
        dsimp
        rw [assoc, assoc]
        erw [Œ±.naturality_assoc, ‚Üê Œ≤.naturality]
        dsimp
        rw [‚Üê F.map_comp_assoc, ‚Üê F.map_comp_assoc, œÜ.w] }

instance faithful_map [F‚ÇÅ.Faithful] [F‚ÇÇ.Faithful] : (map Œ± Œ≤).Faithful where
  map_injective {X Y} f g h := by
    ext
    ¬∑ exact F‚ÇÅ.map_injective (congr_arg CommaMorphism.left h)
    ¬∑ exact F‚ÇÇ.map_injective (congr_arg CommaMorphism.right h)

instance full_map [F.Faithful] [F‚ÇÅ.Full] [F‚ÇÇ.Full] [IsIso Œ±] [IsIso Œ≤] : (map Œ± Œ≤).Full where
  map_surjective {X Y} œÜ :=
   ‚ü®{ left := F‚ÇÅ.preimage œÜ.left
      right := F‚ÇÇ.preimage œÜ.right
      w := F.map_injective (by
        rw [‚Üê cancel_mono (Œ≤.app _), ‚Üê cancel_epi (Œ±.app _), F.map_comp, F.map_comp,
          assoc, assoc]
        erw [‚Üê Œ±.naturality_assoc, Œ≤.naturality]
        dsimp
        rw [F‚ÇÅ.map_preimage, F‚ÇÇ.map_preimage]
        simpa using œÜ.w) }, by aesop_cat‚ü©

instance essSurj_map [F‚ÇÅ.EssSurj] [F‚ÇÇ.EssSurj] [F.Full] [IsIso Œ±] [IsIso Œ≤] :
    (map Œ± Œ≤).EssSurj where
  mem_essImage X :=
    ‚ü®{  left := F‚ÇÅ.objPreimage X.left
        right := F‚ÇÇ.objPreimage X.right
        hom := F.preimage ((inv Œ±).app _ ‚â´ L'.map (F‚ÇÅ.objObjPreimageIso X.left).hom ‚â´
          X.hom ‚â´ R'.map (F‚ÇÇ.objObjPreimageIso X.right).inv ‚â´ (inv Œ≤).app _) },
            ‚ü®isoMk (F‚ÇÅ.objObjPreimageIso X.left) (F‚ÇÇ.objObjPreimageIso X.right) (by
              dsimp
              simp only [NatIso.isIso_inv_app, Functor.comp_obj, Functor.map_preimage, assoc,
                IsIso.inv_hom_id, comp_id, IsIso.hom_inv_id_assoc]
              rw [‚Üê R'.map_comp, Iso.inv_hom_id, R'.map_id, comp_id])‚ü©‚ü©

noncomputable instance isEquivalenceMap
    [F‚ÇÅ.IsEquivalence] [F‚ÇÇ.IsEquivalence] [F.Faithful] [F.Full] [IsIso Œ±] [IsIso Œ≤] :
    (map Œ± Œ≤).IsEquivalence where

/-- The equality between `map Œ± Œ≤ ‚ãô fst L' R'` and `fst L R ‚ãô F‚ÇÅ`,
where `Œ± : F‚ÇÅ ‚ãô L' ‚ü∂ L ‚ãô F`. -/
@[simp]
theorem map_fst : map Œ± Œ≤ ‚ãô fst L' R' = fst L R ‚ãô F‚ÇÅ :=
  rfl

/-- The isomorphism between `map Œ± Œ≤ ‚ãô fst L' R'` and `fst L R ‚ãô F‚ÇÅ`,
where `Œ± : F‚ÇÅ ‚ãô L' ‚ü∂ L ‚ãô F`. -/
@[simps!]
def mapFst : map Œ± Œ≤ ‚ãô fst L' R' ‚âÖ fst L R ‚ãô F‚ÇÅ :=
  NatIso.ofComponents (fun _ => Iso.refl _) (by aesop_cat)

/-- The equality between `map Œ± Œ≤ ‚ãô snd L' R'` and `snd L R ‚ãô F‚ÇÇ`,
where `Œ≤ : R ‚ãô F ‚ü∂ F‚ÇÇ ‚ãô R'`. -/
@[simp]
theorem map_snd : map Œ± Œ≤ ‚ãô snd L' R' = snd L R ‚ãô F‚ÇÇ :=
  rfl

/-- The isomorphism between `map Œ± Œ≤ ‚ãô snd L' R'` and `snd L R ‚ãô F‚ÇÇ`,
where `Œ≤ : R ‚ãô F ‚ü∂ F‚ÇÇ ‚ãô R'`. -/
@[simps!]
def mapSnd : map Œ± Œ≤ ‚ãô snd L' R' ‚âÖ snd L R ‚ãô F‚ÇÇ :=
  NatIso.ofComponents (fun _ => Iso.refl _) (by aesop_cat)

end

/-- A natural transformation `L‚ÇÅ ‚ü∂ L‚ÇÇ` induces a functor `Comma L‚ÇÇ R ‚•§ Comma L‚ÇÅ R`. -/
@[simps]
def mapLeft (l : L‚ÇÅ ‚ü∂ L‚ÇÇ) : Comma L‚ÇÇ R ‚•§ Comma L‚ÇÅ R where
  obj X :=
    { left := X.left
      right := X.right
      hom := l.app X.left ‚â´ X.hom }
  map f :=
    { left := f.left
      right := f.right }

/-- The functor `Comma L R ‚•§ Comma L R` induced by the identity natural transformation on `L` is
    naturally isomorphic to the identity functor. -/
@[simps!]
def mapLeftId : mapLeft R (ùüô L) ‚âÖ ùü≠ _ :=
  NatIso.ofComponents (fun X => isoMk (Iso.refl _) (Iso.refl _))

/-- The functor `Comma L‚ÇÅ R ‚•§ Comma L‚ÇÉ R` induced by the composition of two natural transformations
    `l : L‚ÇÅ ‚ü∂ L‚ÇÇ` and `l' : L‚ÇÇ ‚ü∂ L‚ÇÉ` is naturally isomorphic to the composition of the two functors
    induced by these natural transformations. -/
@[simps!]
def mapLeftComp (l : L‚ÇÅ ‚ü∂ L‚ÇÇ) (l' : L‚ÇÇ ‚ü∂ L‚ÇÉ) :
    mapLeft R (l ‚â´ l') ‚âÖ mapLeft R l' ‚ãô mapLeft R l :=
  NatIso.ofComponents (fun X => isoMk (Iso.refl _) (Iso.refl _))

/-- Two equal natural transformations `L‚ÇÅ ‚ü∂ L‚ÇÇ` yield naturally isomorphic functors
    `Comma L‚ÇÅ R ‚•§ Comma L‚ÇÇ R`. -/
@[simps!]
def mapLeftEq (l l' : L‚ÇÅ ‚ü∂ L‚ÇÇ) (h : l = l') : mapLeft R l ‚âÖ mapLeft R l' :=
  NatIso.ofComponents (fun X => isoMk (Iso.refl _) (Iso.refl _))

/-- A natural isomorphism `L‚ÇÅ ‚âÖ L‚ÇÇ` induces an equivalence of categories
    `Comma L‚ÇÅ R ‚âå Comma L‚ÇÇ R`. -/
@[simps!]
def mapLeftIso (i : L‚ÇÅ ‚âÖ L‚ÇÇ) : Comma L‚ÇÅ R ‚âå Comma L‚ÇÇ R where
  functor := mapLeft _ i.inv
  inverse := mapLeft _ i.hom
  unitIso := (mapLeftId _ _).symm ‚â™‚â´ mapLeftEq _ _ _ i.hom_inv_id.symm ‚â™‚â´ mapLeftComp _ _ _
  counitIso := (mapLeftComp _ _ _).symm ‚â™‚â´ mapLeftEq _ _ _ i.inv_hom_id ‚â™‚â´ mapLeftId _ _

/-- A natural transformation `R‚ÇÅ ‚ü∂ R‚ÇÇ` induces a functor `Comma L R‚ÇÅ ‚•§ Comma L R‚ÇÇ`. -/
@[simps]
def mapRight (r : R‚ÇÅ ‚ü∂ R‚ÇÇ) : Comma L R‚ÇÅ ‚•§ Comma L R‚ÇÇ where
  obj X :=
    { left := X.left
      right := X.right
      hom := X.hom ‚â´ r.app X.right }
  map f :=
    { left := f.left
      right := f.right }

/-- The functor `Comma L R ‚•§ Comma L R` induced by the identity natural transformation on `R` is
    naturally isomorphic to the identity functor. -/
@[simps!]
def mapRightId : mapRight L (ùüô R) ‚âÖ ùü≠ _ :=
  NatIso.ofComponents (fun X => isoMk (Iso.refl _) (Iso.refl _))

/-- The functor `Comma L R‚ÇÅ ‚•§ Comma L R‚ÇÉ` induced by the composition of the natural transformations
    `r : R‚ÇÅ ‚ü∂ R‚ÇÇ` and `r' : R‚ÇÇ ‚ü∂ R‚ÇÉ` is naturally isomorphic to the composition of the functors
    induced by these natural transformations. -/
@[simps!]
def mapRightComp (r : R‚ÇÅ ‚ü∂ R‚ÇÇ) (r' : R‚ÇÇ ‚ü∂ R‚ÇÉ) :
    mapRight L (r ‚â´ r') ‚âÖ mapRight L r ‚ãô mapRight L r' :=
  NatIso.ofComponents (fun X => isoMk (Iso.refl _) (Iso.refl _))

/-- Two equal natural transformations `R‚ÇÅ ‚ü∂ R‚ÇÇ` yield naturally isomorphic functors
    `Comma L R‚ÇÅ ‚•§ Comma L R‚ÇÇ`. -/
@[simps!]
def mapRightEq (r r' : R‚ÇÅ ‚ü∂ R‚ÇÇ) (h : r = r') : mapRight L r ‚âÖ mapRight L r' :=
  NatIso.ofComponents (fun X => isoMk (Iso.refl _) (Iso.refl _))

/-- A natural isomorphism `R‚ÇÅ ‚âÖ R‚ÇÇ` induces an equivalence of categories
    `Comma L R‚ÇÅ ‚âå Comma L R‚ÇÇ`. -/
@[simps!]
def mapRightIso (i : R‚ÇÅ ‚âÖ R‚ÇÇ) : Comma L R‚ÇÅ ‚âå Comma L R‚ÇÇ where
  functor := mapRight _ i.hom
  inverse := mapRight _ i.inv
  unitIso := (mapRightId _ _).symm ‚â™‚â´ mapRightEq _ _ _ i.hom_inv_id.symm ‚â™‚â´ mapRightComp _ _ _
  counitIso := (mapRightComp _ _ _).symm ‚â™‚â´ mapRightEq _ _ _ i.inv_hom_id ‚â™‚â´ mapRightId _ _

end

section

variable {C : Type u‚ÇÑ} [Category.{v‚ÇÑ} C] {D : Type u‚ÇÖ} [Category.{v‚ÇÖ} D]

/-- The functor `(F ‚ãô L, R) ‚•§ (L, R)` -/
@[simps]
def preLeft (F : C ‚•§ A) (L : A ‚•§ T) (R : B ‚•§ T) : Comma (F ‚ãô L) R ‚•§ Comma L R where
  obj X :=
    { left := F.obj X.left
      right := X.right
      hom := X.hom }
  map f :=
    { left := F.map f.left
      right := f.right
      w := by simpa using f.w }

/-- `Comma.preLeft` is a particular case of `Comma.map`,
but with better definitional properties. -/
def preLeftIso (F : C ‚•§ A) (L : A ‚•§ T) (R : B ‚•§ T) :
    preLeft F L R ‚âÖ map (F ‚ãô L).rightUnitor.inv (R.rightUnitor.hom ‚â´ R.leftUnitor.inv) :=
  NatIso.ofComponents (fun X => isoMk (Iso.refl _) (Iso.refl _))

instance (F : C ‚•§ A) (L : A ‚•§ T) (R : B ‚•§ T) [F.Faithful] : (preLeft F L R).Faithful :=
  Functor.Faithful.of_iso (preLeftIso F L R).symm

instance (F : C ‚•§ A) (L : A ‚•§ T) (R : B ‚•§ T) [F.Full] : (preLeft F L R).Full :=
  Functor.Full.of_iso (preLeftIso F L R).symm

instance (F : C ‚•§ A) (L : A ‚•§ T) (R : B ‚•§ T) [F.EssSurj] : (preLeft F L R).EssSurj :=
  Functor.essSurj_of_iso (preLeftIso F L R).symm

/-- If `F` is an equivalence, then so is `preLeft F L R`. -/
instance isEquivalence_preLeft (F : C ‚•§ A) (L : A ‚•§ T) (R : B ‚•§ T) [F.IsEquivalence] :
    (preLeft F L R).IsEquivalence where

/-- The functor `(F ‚ãô L, R) ‚•§ (L, R)` -/
@[simps]
def preRight (L : A ‚•§ T) (F : C ‚•§ B) (R : B ‚•§ T) : Comma L (F ‚ãô R) ‚•§ Comma L R where
  obj X :=
    { left := X.left
      right := F.obj X.right
      hom := X.hom }
  map f :=
    { left := f.left
      right := F.map f.right }

/-- `Comma.preRight` is a particular case of `Comma.map`,
but with better definitional properties. -/
def preRightIso (L : A ‚•§ T) (F : C ‚•§ B) (R : B ‚•§ T) :
    preRight L F R ‚âÖ map (L.leftUnitor.hom ‚â´ L.rightUnitor.inv) (F ‚ãô R).rightUnitor.hom :=
  NatIso.ofComponents (fun X => isoMk (Iso.refl _) (Iso.refl _))

instance (L : A ‚•§ T) (F : C ‚•§ B) (R : B ‚•§ T) [F.Faithful] : (preRight L F R).Faithful :=
  Functor.Faithful.of_iso (preRightIso L F R).symm

instance (L : A ‚•§ T) (F : C ‚•§ B) (R : B ‚•§ T) [F.Full] : (preRight L F R).Full :=
  Functor.Full.of_iso (preRightIso L F R).symm

instance (L : A ‚•§ T) (F : C ‚•§ B) (R : B ‚•§ T) [F.EssSurj] : (preRight L F R).EssSurj :=
  Functor.essSurj_of_iso (preRightIso L F R).symm

/-- If `F` is an equivalence, then so is `preRight L F R`. -/
instance isEquivalence_preRight (L : A ‚•§ T) (F : C ‚•§ B) (R : B ‚•§ T) [F.IsEquivalence] :
    (preRight L F R).IsEquivalence where

/-- The functor `(L, R) ‚•§ (L ‚ãô F, R ‚ãô F)` -/
@[simps]
def post (L : A ‚•§ T) (R : B ‚•§ T) (F : T ‚•§ C) : Comma L R ‚•§ Comma (L ‚ãô F) (R ‚ãô F) where
  obj X :=
    { left := X.left
      right := X.right
      hom := F.map X.hom }
  map f :=
    { left := f.left
      right := f.right
      w := by simp only [Functor.comp_map, ‚Üê F.map_comp, f.w] }

/-- The canonical functor from the product of two categories to the comma category of their
respective functors into `Discrete PUnit`. -/
@[simps]
def fromProd (L : A ‚•§ Discrete PUnit) (R : B ‚•§ Discrete PUnit) :
    A √ó B ‚•§ Comma L R where
  obj X :=
    { left := X.1
      right := X.2
      hom := Discrete.eqToHom rfl }
  map {X} {Y} f :=
    { left := f.1
      right := f.2 }

/-- Taking the comma category of two functors into `Discrete PUnit` results in something
is equivalent to their product. -/
@[simps!]
def equivProd (L : A ‚•§ Discrete PUnit) (R : B ‚•§ Discrete PUnit) :
    Comma L R ‚âå A √ó B where
  functor := (fst L R).prod' (snd L R)
  inverse := fromProd L R
  unitIso := Iso.refl _
  counitIso := Iso.refl _

/-- Taking the comma category of a functor into `A ‚•§ Discrete PUnit` and the identity
`Discrete PUnit ‚•§ Discrete PUnit` results in a category equivalent to `A`. -/
@[simps!]
def toPUnitIdEquiv (L : A ‚•§ Discrete PUnit) (R : Discrete PUnit ‚•§ Discrete PUnit) :
    Comma L R ‚âå A :=
  (equivProd L _).trans (prod.rightUnitorEquivalence A)

@[simp]
theorem toPUnitIdEquiv_functor_iso {L : A ‚•§ Discrete PUnit}
    {R : Discrete PUnit ‚•§ Discrete PUnit} :
    (toPUnitIdEquiv L R).functor = fst L R :=
  rfl

/-- Taking the comma category of the identity `Discrete PUnit ‚•§ Discrete PUnit`
and a functor `B ‚•§ Discrete PUnit` results in a category equivalent to `B`. -/
@[simps!]
def toIdPUnitEquiv (L : Discrete PUnit ‚•§ Discrete PUnit) (R : B ‚•§ Discrete PUnit) :
    Comma L R ‚âå B :=
  (equivProd _ R).trans (prod.leftUnitorEquivalence B)

@[simp]
theorem toIdPUnitEquiv_functor_iso {L : Discrete PUnit ‚•§ Discrete PUnit}
    {R : B ‚•§ Discrete PUnit} :
    (toIdPUnitEquiv L R).functor = snd L R :=
  rfl

end

end Comma

end CategoryTheory
