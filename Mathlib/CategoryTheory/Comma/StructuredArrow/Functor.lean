/-
Copyright (c) 2024 Jakob von Raumer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jakob von Raumer
-/
import Mathlib.CategoryTheory.Comma.StructuredArrow.Basic
import Mathlib.CategoryTheory.Grothendieck

/-!
# Structured Arrow Categories as strict functor to Cat

Forming a structured arrow category `StructuredArrow d T` with `d : D` and `T : C ‚•§ D` is strictly
functorial in `S`, inducing a functor `D·µí·µñ ‚•§ Cat`. This file constructs said functor and proves
that, in the dual case, we can precompose it with another functor `L : E ‚•§ D` to obtain a category
equivalent to `Comma L T`.
-/

namespace CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

namespace StructuredArrow

/-- The structured arrow category `StructuredArrow d T` depends on the chosen domain `d : D` in a
functorial way, inducing a functor `D·µí·µñ ‚•§ Cat`. -/
@[simps]
def functor (T : C ‚•§ D) : D·µí·µñ ‚•§ Cat where
  obj d := .of <| StructuredArrow d.unop T
  map f := map f.unop
  map_id d := Functor.ext (fun ‚ü®_, _, _‚ü© => by simp [CostructuredArrow.map, Comma.mapRight])
  map_comp f g := Functor.ext (fun _ => by simp [CostructuredArrow.map, Comma.mapRight])

end StructuredArrow

namespace CostructuredArrow

/-- The costructured arrow category `CostructuredArrow T d` depends on the chosen codomain `d : D`
in a functorial way, inducing a functor `D ‚•§ Cat`. -/
@[simps]
def functor (T : C ‚•§ D) : D ‚•§ Cat where
  obj d := .of <| CostructuredArrow T d
  map f := CostructuredArrow.map f
  map_id d := Functor.ext (fun ‚ü®_, _, _‚ü© => by simp [CostructuredArrow.map, Comma.mapRight])
  map_comp f g := Functor.ext (fun _ => by simp [CostructuredArrow.map, Comma.mapRight])

variable {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E]
variable (L : C ‚•§ D) (R : E ‚•§ D)

/-- The functor used to establish the equivalence `grothendieckPrecompFunctorEquivalence` between
the Grothendieck construction on `CostructuredArrow.functor` and the comma category. -/
@[simps]
def grothendieckPrecompFunctorToComma : Grothendieck (R ‚ãô functor L) ‚•§ Comma L R where
  obj P := ‚ü®P.fiber.left, P.base, P.fiber.hom‚ü©
  map f := ‚ü®f.fiber.left, f.base, by simp‚ü©

/-- Fibers of `grothendieckPrecompFunctorToComma L R`, composed with `Comma.fst L R`, are isomorphic
to the projection `proj L (R.obj X)`. -/
@[simps!]
def ŒπCompGrothendieckPrecompFunctorToCommaCompFst (X : E) :
    Grothendieck.Œπ (R ‚ãô functor L) X ‚ãô grothendieckPrecompFunctorToComma L R ‚ãô Comma.fst _ _ ‚âÖ
    proj L (R.obj X) :=
  NatIso.ofComponents (fun X => Iso.refl _) (fun _ => by simp)

/-- The inverse functor used to establish the equivalence `grothendieckPrecompFunctorEquivalence`
between the Grothendieck construction on `CostructuredArrow.functor` and the comma category. -/
@[simps]
def commaToGrothendieckPrecompFunctor : Comma L R ‚•§ Grothendieck (R ‚ãô functor L) where
  obj X := ‚ü®X.right, mk X.hom‚ü©
  map f := ‚ü®f.right, homMk f.left‚ü©
  map_id X := Grothendieck.ext _ _ rfl (by simp)
  map_comp f g := Grothendieck.ext _ _ rfl (by simp)

/-- For `L : C ‚•§ D`, taking the Grothendieck construction of `CostructuredArrow.functor L`
precomposed with another functor `R : E ‚•§ D` results in a category which is equivalent to
the comma category `Comma L R`. -/
@[simps]
def grothendieckPrecompFunctorEquivalence : Grothendieck (R ‚ãô functor L) ‚âå Comma L R where
  functor := grothendieckPrecompFunctorToComma _ _
  inverse := commaToGrothendieckPrecompFunctor _ _
  unitIso := NatIso.ofComponents (fun _ => Iso.refl _)
  counitIso := NatIso.ofComponents (fun _ => Iso.refl _)

/-- The functor projecting out the domain of arrows from the Grothendieck construction on
costructured arrows. -/
@[simps!]
def grothendieckProj : Grothendieck (functor L) ‚•§ C :=
  grothendieckPrecompFunctorToComma L (ùü≠ _) ‚ãô Comma.fst _ _

/-- Fibers of `grothendieckProj L` are isomorphic to the projection `proj L X`. -/
@[simps!]
def ŒπCompGrothendieckProj (X : D) :
    Grothendieck.Œπ (functor L) X ‚ãô grothendieckProj L ‚âÖ proj L X :=
  ŒπCompGrothendieckPrecompFunctorToCommaCompFst L (ùü≠ _) X

/-- Functors between costructured arrow categories induced by morphisms in the base category
composed with fibers of `grothendieckProj L` are isomorphic to the projection `proj L X`. -/
@[simps!]
def mapCompŒπCompGrothendieckProj {X Y : D} (f : X ‚ü∂ Y) :
    CostructuredArrow.map f ‚ãô Grothendieck.Œπ (functor L) Y ‚ãô grothendieckProj L ‚âÖ proj L X :=
  isoWhiskerLeft (CostructuredArrow.map f) (ŒπCompGrothendieckPrecompFunctorToCommaCompFst L (ùü≠ _) Y)

end CostructuredArrow

end CategoryTheory
