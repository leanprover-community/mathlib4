/-
Copyright (c) 2024 Jakob von Raumer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jakob von Raumer
-/
import Mathlib.CategoryTheory.Comma.StructuredArrow.Basic

/-!
# Structured arrow categories on `Comma.map`

We characterize structured arrow categories on arbitrary instances of `Comma.map` as a
comma category itself.
-/

namespace CategoryTheory

namespace StructuredArrow

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ v‚ÇÖ v‚ÇÜ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÖ u‚ÇÜ

noncomputable section

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
  {T : Type u‚ÇÉ} [Category.{v‚ÇÉ} T] {L : C ‚•§ T} {R : D ‚•§ T}
  {C' : Type u‚ÇÑ} [Category.{v‚ÇÑ} C'] {D' : Type u‚ÇÖ} [Category.{v‚ÇÖ} D'] {T' : Type u‚ÇÜ}
  [Category.{u‚ÇÜ} T'] {L' : C' ‚•§ T'} {R' : D' ‚•§ T'} {F‚ÇÅ : C ‚•§ C'} {F‚ÇÇ : D ‚•§ D'} {F : T ‚•§ T'}
  (Œ± : F‚ÇÅ ‚ãô L' ‚ü∂ L ‚ãô F) (Œ≤ : R ‚ãô F ‚ü∂ F‚ÇÇ ‚ãô R')

/-- The functor establishing the equivalence `StructuredArrow.commaMapEquivalence`. -/
@[simps]
def commaMapEquivalenceFunctor [IsIso Œ≤] (X : Comma L' R') :
    StructuredArrow X (Comma.map Œ± Œ≤) ‚•§ Comma (map‚ÇÇ (ùüô _) Œ±) (map‚ÇÇ X.hom (inv Œ≤)) where
  obj Y := ‚ü®mk Y.hom.left, mk Y.hom.right,
    homMk Y.right.hom
      (by simpa only [Functor.const_obj_obj, map‚ÇÇ_obj_left, mk_left, map‚ÇÇ_obj_right, mk_right,
        map‚ÇÇ_obj_hom, mk_hom_eq_self, Category.id_comp, Category.assoc, NatIso.isIso_inv_app,
        Functor.comp_obj, Comma.map_obj_right, Comma.map_obj_left, Comma.map_obj_hom,
        IsIso.hom_inv_id, Category.comp_id] using
        congrFun (congrArg CategoryStruct.comp Y.hom.w) (inv (Œ≤.app Y.right.right)))‚ü©
  map {Y Z} f := ‚ü®homMk f.right.left (congrArg CommaMorphism.left (StructuredArrow.w f)),
    homMk f.right.right (congrArg CommaMorphism.right (StructuredArrow.w f)),
    by simp only [Functor.const_obj_obj, map‚ÇÇ_obj_left, mk_left, map‚ÇÇ_obj_right, mk_right,
      map‚ÇÇ_obj_hom, mk_hom_eq_self, Functor.comp_obj, id_eq, Comma.map_obj_right,
      Comma.map_obj_left, Comma.map_obj_hom, eq_mp_eq_cast, eq_mpr_eq_cast, hom_eq_iff, comp_right,
      map‚ÇÇ_map_right, homMk_right, CommaMorphism.w] ‚ü©
  map_id X := by ext <;> rfl
  map_comp f g := by ext <;> rfl

/-- The inverse functor establishing the equivalence `StructuredArrow.commaMapEquivalence`. -/
@[simps]
def commaMapEquivalenceInverse [IsIso Œ≤] (X : Comma L' R') :
    Comma (map‚ÇÇ (ùüô _) Œ±) (map‚ÇÇ X.hom (inv Œ≤)) ‚•§ StructuredArrow X (Comma.map Œ± Œ≤) where
  obj Y := mk (Y := ‚ü®Y.left.right, Y.right.right, Y.hom.right‚ü©)
    ‚ü®by exact Y.left.hom, by exact Y.right.hom, by
      simpa using congrFun (congrArg CategoryStruct.comp (StructuredArrow.w Y.hom))
        (Œ≤.app Y.right.right)‚ü©
  map {Y Z} f := homMk ‚ü®by exact f.left.right, by exact f.right.right,
      by exact congrArg CommaMorphism.right f.w‚ü© (by
      ext
      <;> simp only [Comma.map_obj_right, Comma.map_obj_left, Comma.map_obj_hom, Functor.comp_obj,
          map‚ÇÇ_obj_right, map‚ÇÇ_obj_left, Functor.const_obj_obj, map‚ÇÇ_obj_hom, eq_mp_eq_cast, id_eq,
          mk_left, mk_right, mk_hom_eq_self, Comma.comp_left, Comma.map_map_left, w]
      ¬∑ simp only [Comma.map_obj_right, Comma.map_obj_left, Comma.map_obj_hom, Functor.comp_obj,
        map‚ÇÇ_obj_right, map‚ÇÇ_obj_left, Functor.const_obj_obj, map‚ÇÇ_obj_hom, eq_mp_eq_cast, id_eq,
        mk_left, mk_right, mk_hom_eq_self, Comma.comp_right, Comma.map_map_right, w] )
  map_id X := by ext <;> rfl
  map_comp f g := by ext <;> rfl

/-- The unit establishing the equivalence `StructuredArrow.commaMapEquivalence`. -/
@[simps!]
def commaMapEquivalenceUnitIso [IsIso Œ≤] (X : Comma L' R') :
    ùü≠ (StructuredArrow X (Comma.map Œ± Œ≤)) ‚âÖ
      commaMapEquivalenceFunctor Œ± Œ≤ X ‚ãô commaMapEquivalenceInverse Œ± Œ≤ X :=
  NatIso.ofComponents (fun _ => isoMk (Iso.refl _))

/-- The counit functor establishing the equivalence `StructuredArrow.commaMapEquivalence`. -/
@[simps!]
def commaMapEquivalenceCounitIso [IsIso Œ≤] (X : Comma L' R') :
    commaMapEquivalenceInverse Œ± Œ≤ X ‚ãô commaMapEquivalenceFunctor Œ± Œ≤ X ‚âÖ
      ùü≠ (Comma (map‚ÇÇ (ùüô (L'.obj X.left)) Œ±) (map‚ÇÇ X.hom (inv Œ≤))) :=
  NatIso.ofComponents (fun _ => Comma.isoMk (Iso.refl _) (Iso.refl _))

/-- The structured arrow category on the functor `Comma.map Œ± Œ≤`, with `Œ≤` a natural isomorphism,
is equivalent to a comma category on two instances of `StructuredArrow.map‚ÇÇ`. -/
def commaMapEquivalence [IsIso Œ≤] (X : Comma L' R') :
    StructuredArrow X (Comma.map Œ± Œ≤) ‚âå Comma (map‚ÇÇ (ùüô _) Œ±) (map‚ÇÇ X.hom (inv Œ≤)) where
  functor := commaMapEquivalenceFunctor Œ± Œ≤ X
  inverse := commaMapEquivalenceInverse Œ± Œ≤ X
  unitIso := commaMapEquivalenceUnitIso Œ± Œ≤ X
  counitIso := commaMapEquivalenceCounitIso Œ± Œ≤ X

end

end StructuredArrow

end CategoryTheory
