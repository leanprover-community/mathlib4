/-
Copyright (c) 2022 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/
import Mathlib.CategoryTheory.Comma.StructuredArrow.Basic
import Mathlib.CategoryTheory.EssentiallySmall
import Mathlib.Logic.Small.Set

/-!
# Small sets in the category of structured arrows

Here we prove a technical result about small sets in the category of structured arrows that will
be used in the proof of the Special Adjoint Functor Theorem.
-/

namespace CategoryTheory

-- morphism levels before object levels. See note [CategoryTheory universes].
universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

namespace StructuredArrow

variable {S : D} {T : C ‚•§ D}

instance small_proj_preimage_of_locallySmall {ùí¢ : Set C} [Small.{v‚ÇÅ} ùí¢] [LocallySmall.{v‚ÇÅ} D] :
    Small.{v‚ÇÅ} ((proj S T).obj ‚Åª¬π' ùí¢) := by
  suffices (proj S T).obj ‚Åª¬π' ùí¢ = Set.range fun f : Œ£G : ùí¢, S ‚ü∂ T.obj G => mk f.2 by
    rw [this]
    infer_instance
  exact Set.ext fun X => ‚ü®fun h => ‚ü®‚ü®‚ü®_, h‚ü©, X.hom‚ü©, (eq_mk _).symm‚ü©, by aesop_cat‚ü©

end StructuredArrow

namespace CostructuredArrow

variable {S : C ‚•§ D} {T : D}

instance small_proj_preimage_of_locallySmall {ùí¢ : Set C} [Small.{v‚ÇÅ} ùí¢] [LocallySmall.{v‚ÇÅ} D] :
    Small.{v‚ÇÅ} ((proj S T).obj ‚Åª¬π' ùí¢) := by
  suffices (proj S T).obj ‚Åª¬π' ùí¢ = Set.range fun f : Œ£G : ùí¢, S.obj G ‚ü∂ T => mk f.2 by
    rw [this]
    infer_instance
  exact Set.ext fun X => ‚ü®fun h => ‚ü®‚ü®‚ü®_, h‚ü©, X.hom‚ü©, (eq_mk _).symm‚ü©, by aesop_cat‚ü©

end CostructuredArrow

end CategoryTheory
