/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Enriched.Ordinary
import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.Limits.Shapes.End

/-!
# Functor categories are enriched

If `C` is a `V`-enriched ordinary category, then `J ‚•§ C` is also
a `V`-enriched ordinary category, provided `C` has suitable limits.

-/

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace CategoryTheory.Enriched.FunctorCategory

open Category MonoidalCategory Limits

variable (V : Type u‚ÇÅ) [Category.{v‚ÇÅ} V] [MonoidalCategory V]
  {C : Type u‚ÇÇ} [Category.{v‚ÇÇ} C]
  {J : Type u‚ÇÉ} [Category.{v‚ÇÉ} J] [EnrichedOrdinaryCategory V C]

variable (F‚ÇÅ F‚ÇÇ F‚ÇÉ F‚ÇÑ : J ‚•§ C)

/-- Given two functors `F‚ÇÅ` and `F‚ÇÇ` from a category `J` to a `V`-enriched
ordinary category `C`, this is the diagram `J·µí·µñ ‚•§ J ‚•§ V` whose end shall be
the `V`-morphisms in `J ‚•§ V` from `F‚ÇÅ` to `F‚ÇÇ`. -/
@[simps!]
def diagram : J·µí·µñ ‚•§ J ‚•§ V := F‚ÇÅ.op ‚ãô eHomFunctor V C ‚ãô (whiskeringLeft J C V).obj F‚ÇÇ

/-- The condition that the end `diagram V F‚ÇÅ F‚ÇÇ` exists, see `enrichedHom`. -/
abbrev HasEnrichedHom := HasEnd (diagram V F‚ÇÅ F‚ÇÇ)

section

variable [HasEnrichedHom V F‚ÇÅ F‚ÇÇ]

/-- The `V`-enriched hom from `F‚ÇÅ` to `F‚ÇÇ` when `F‚ÇÅ` and `F‚ÇÇ` are functors `J ‚•§ C`
and `C` is a `V`-enriched category. -/
noncomputable abbrev enrichedHom : V := end_ (diagram V F‚ÇÅ F‚ÇÇ)

/-- The projection `enrichedHom V F‚ÇÅ F‚ÇÇ ‚ü∂ F‚ÇÅ.obj j ‚ü∂[V] F‚ÇÇ.obj j` in the category `V`
for any `j : J` when `F‚ÇÅ` and `F‚ÇÇ` are functors `J ‚•§ C` and `C` is a `V`-enriched category. -/
noncomputable abbrev enrichedHomœÄ (j : J) : enrichedHom V F‚ÇÅ F‚ÇÇ ‚ü∂ F‚ÇÅ.obj j ‚ü∂[V] F‚ÇÇ.obj j :=
  end_.œÄ _ j

@[reassoc]
lemma enrichedHom_condition {i j : J} (f : i ‚ü∂ j) :
    enrichedHomœÄ V F‚ÇÅ F‚ÇÇ i ‚â´ (œÅ_ _).inv ‚â´
      _ ‚óÅ (eHomEquiv V) (F‚ÇÇ.map f) ‚â´ eComp V _ _ _  =
    enrichedHomœÄ V F‚ÇÅ F‚ÇÇ j ‚â´ (Œª_ _).inv ‚â´
      (eHomEquiv V) (F‚ÇÅ.map f) ‚ñ∑ _ ‚â´ eComp V _ _ _ :=
  end_.condition (diagram V F‚ÇÅ F‚ÇÇ) f

variable {F‚ÇÅ F‚ÇÇ}

/-- Given functors `F‚ÇÅ` and `F‚ÇÇ` in `J ‚•§ C`, where `C` is a `V`-enriched ordinary category,
this is the isomorphism `(F‚ÇÅ ‚ü∂ F‚ÇÇ) ‚âÉ (ùüô_ V ‚ü∂ enrichedHom V F‚ÇÅ F‚ÇÇ)` in the category `V`. -/
noncomputable def homEquiv : (F‚ÇÅ ‚ü∂ F‚ÇÇ) ‚âÉ (ùüô_ V ‚ü∂ enrichedHom V F‚ÇÅ F‚ÇÇ) where
  toFun œÑ := end_.lift (fun j ‚Ü¶ eHomEquiv V (œÑ.app j)) (fun i j f ‚Ü¶ by
    trans eHomEquiv V (œÑ.app i ‚â´ F‚ÇÇ.map f)
    ¬∑ dsimp
      simp only [eHomEquiv_comp, tensorHom_def_assoc, MonoidalCategory.whiskerRight_id,
        ‚Üê unitors_equal, assoc, Iso.inv_hom_id_assoc, eHomWhiskerLeft]
    ¬∑ dsimp
      simp only [‚Üê NatTrans.naturality, eHomEquiv_comp, tensorHom_def', id_whiskerLeft,
        assoc, Iso.inv_hom_id_assoc, eHomWhiskerRight])
  invFun g :=
    { app := fun j ‚Ü¶ (eHomEquiv V).symm (g ‚â´ end_.œÄ _ j)
      naturality := fun i j f ‚Ü¶ (eHomEquiv V).injective (by
        dsimp
        simp only [eHomEquiv_comp, Equiv.apply_symm_apply, Iso.cancel_iso_inv_left]
        conv_rhs =>
          rw [tensorHom_def_assoc, MonoidalCategory.whiskerRight_id_assoc, assoc,
            enrichedHom_condition V F‚ÇÅ F‚ÇÇ f]
        conv_lhs =>
          rw [tensorHom_def'_assoc, MonoidalCategory.whiskerLeft_comp_assoc,
            id_whiskerLeft_assoc, id_whiskerLeft_assoc, Iso.inv_hom_id_assoc, unitors_equal]) }
  left_inv œÑ := by aesop
  right_inv g := by aesop

@[reassoc (attr := simp)]
lemma homEquiv_apply_œÄ (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (j : J) :
    homEquiv V œÑ ‚â´ enrichedHomœÄ V _ _ j = eHomEquiv V (œÑ.app j) := by
  simp [homEquiv]

end

section

variable [HasEnrichedHom V F‚ÇÅ F‚ÇÅ]

/-- The identity for the `V`-enrichment of the category `J ‚•§ C` over `V`. -/
noncomputable def enrichedId : ùüô_ V ‚ü∂ enrichedHom V F‚ÇÅ F‚ÇÅ := homEquiv _ (ùüô F‚ÇÅ)

@[reassoc (attr := simp)]
lemma enrichedId_œÄ (j : J) : enrichedId V F‚ÇÅ ‚â´ end_.œÄ _ j = eId V (F‚ÇÅ.obj j) := by
  simp [enrichedId]

@[simp]
lemma homEquiv_id : homEquiv V (ùüô F‚ÇÅ) = enrichedId V F‚ÇÅ := rfl

end

section

variable [HasEnrichedHom V F‚ÇÅ F‚ÇÇ] [HasEnrichedHom V F‚ÇÇ F‚ÇÉ] [HasEnrichedHom V F‚ÇÅ F‚ÇÉ]

/-- The composition for the `V`-enrichment of the category `J ‚•§ C` over `V`. -/
noncomputable def enrichedComp : enrichedHom V F‚ÇÅ F‚ÇÇ ‚äó enrichedHom V F‚ÇÇ F‚ÇÉ ‚ü∂ enrichedHom V F‚ÇÅ F‚ÇÉ :=
  end_.lift (fun j ‚Ü¶ (end_.œÄ _ j ‚äó end_.œÄ _ j) ‚â´ eComp V _ _ _) (fun i j f ‚Ü¶ by
    dsimp
    trans (end_.œÄ (diagram V F‚ÇÅ F‚ÇÇ) i ‚äó end_.œÄ (diagram V F‚ÇÇ F‚ÇÉ) j) ‚â´
      (œÅ_ _).inv ‚ñ∑ _ ‚â´ (_ ‚óÅ (eHomEquiv V (F‚ÇÇ.map f))) ‚ñ∑ _ ‚â´ eComp V _ (F‚ÇÇ.obj i) _ ‚ñ∑ _ ‚â´
        eComp V _ (F‚ÇÇ.obj j) _
    ¬∑ have := end_.condition (diagram V F‚ÇÇ F‚ÇÉ) f
      dsimp [eHomWhiskerLeft, eHomWhiskerRight] at this ‚ä¢
      conv_lhs => rw [assoc, tensorHom_def_assoc]
      conv_rhs =>
        rw [tensorHom_def_assoc, whisker_assoc_assoc, e_assoc,
          triangle_assoc_comp_right_inv_assoc, ‚Üê MonoidalCategory.whiskerLeft_comp_assoc,
          ‚Üê MonoidalCategory.whiskerLeft_comp_assoc, ‚Üê MonoidalCategory.whiskerLeft_comp_assoc,
          assoc, assoc, ‚Üê this, MonoidalCategory.whiskerLeft_comp_assoc,
          MonoidalCategory.whiskerLeft_comp_assoc, MonoidalCategory.whiskerLeft_comp_assoc,
          ‚Üê e_assoc, whiskerLeft_rightUnitor_inv_assoc, associator_inv_naturality_right_assoc,
          Iso.hom_inv_id_assoc, whisker_exchange_assoc, MonoidalCategory.whiskerRight_id_assoc,
          Iso.inv_hom_id_assoc]
    ¬∑ have := end_.condition (diagram V F‚ÇÅ F‚ÇÇ) f
      dsimp [eHomWhiskerLeft, eHomWhiskerRight] at this ‚ä¢
      conv_lhs =>
        rw [tensorHom_def'_assoc, ‚Üê comp_whiskerRight_assoc,
          ‚Üê comp_whiskerRight_assoc, ‚Üê comp_whiskerRight_assoc,
          assoc, assoc, this, comp_whiskerRight_assoc, comp_whiskerRight_assoc,
          comp_whiskerRight_assoc, leftUnitor_inv_whiskerRight_assoc,
          ‚Üê associator_inv_naturality_left_assoc, ‚Üê e_assoc',
          Iso.inv_hom_id_assoc, ‚Üê whisker_exchange_assoc, id_whiskerLeft_assoc,
          Iso.inv_hom_id_assoc]
      conv_rhs => rw [assoc, tensorHom_def'_assoc])

@[reassoc (attr := simp)]
lemma enrichedComp_œÄ (j : J) :
    enrichedComp V F‚ÇÅ F‚ÇÇ F‚ÇÉ ‚â´ end_.œÄ _ j =
      (end_.œÄ (diagram V F‚ÇÅ F‚ÇÇ) j ‚äó end_.œÄ (diagram V F‚ÇÇ F‚ÇÉ) j) ‚â´ eComp V _ _ _ := by
  simp [enrichedComp]

variable {F‚ÇÅ F‚ÇÇ F‚ÇÉ}

@[reassoc]
lemma homEquiv_comp (f : F‚ÇÅ ‚ü∂ F‚ÇÇ) (g : F‚ÇÇ ‚ü∂ F‚ÇÉ) :
    (homEquiv V) (f ‚â´ g) = (Œª_ (ùüô_ V)).inv ‚â´ ((homEquiv V) f ‚äó (homEquiv V) g) ‚â´
    enrichedComp V F‚ÇÅ F‚ÇÇ F‚ÇÉ := by
  ext j
  simp only [homEquiv_apply_œÄ, NatTrans.comp_app, eHomEquiv_comp, assoc,
    enrichedComp_œÄ, Functor.op_obj, ‚Üê tensor_comp_assoc]

end

@[reassoc (attr := simp)]
lemma enriched_id_comp [HasEnrichedHom V F‚ÇÅ F‚ÇÅ] [HasEnrichedHom V F‚ÇÅ F‚ÇÇ] :
    (Œª_ (enrichedHom V F‚ÇÅ F‚ÇÇ)).inv ‚â´ enrichedId V F‚ÇÅ ‚ñ∑ enrichedHom V F‚ÇÅ F‚ÇÇ ‚â´
      enrichedComp V F‚ÇÅ F‚ÇÅ F‚ÇÇ = ùüô _ := by
  ext j
  rw [assoc, assoc, enrichedComp_œÄ, id_comp, tensorHom_def, assoc,
    ‚Üê comp_whiskerRight_assoc, enrichedId_œÄ, ‚Üê whisker_exchange_assoc,
    id_whiskerLeft, assoc, assoc, Iso.inv_hom_id_assoc]
  dsimp
  rw [e_id_comp, comp_id]

@[reassoc (attr := simp)]
lemma enriched_comp_id [HasEnrichedHom V F‚ÇÅ F‚ÇÇ] [HasEnrichedHom V F‚ÇÇ F‚ÇÇ] :
    (œÅ_ (enrichedHom V F‚ÇÅ F‚ÇÇ)).inv ‚â´ enrichedHom V F‚ÇÅ F‚ÇÇ ‚óÅ enrichedId V F‚ÇÇ ‚â´
      enrichedComp V F‚ÇÅ F‚ÇÇ F‚ÇÇ = ùüô _ := by
  ext j
  rw [assoc, assoc, enrichedComp_œÄ, id_comp, tensorHom_def', assoc,
    ‚Üê MonoidalCategory.whiskerLeft_comp_assoc, enrichedId_œÄ,
    whisker_exchange_assoc, MonoidalCategory.whiskerRight_id, assoc, assoc,
    Iso.inv_hom_id_assoc]
  dsimp
  rw [e_comp_id, comp_id]

@[reassoc]
lemma enriched_assoc [HasEnrichedHom V F‚ÇÅ F‚ÇÇ] [HasEnrichedHom V F‚ÇÅ F‚ÇÉ] [HasEnrichedHom V F‚ÇÅ F‚ÇÑ]
    [HasEnrichedHom V F‚ÇÇ F‚ÇÉ] [HasEnrichedHom V F‚ÇÇ F‚ÇÑ] [HasEnrichedHom V F‚ÇÉ F‚ÇÑ] :
    (Œ±_ (enrichedHom V F‚ÇÅ F‚ÇÇ) (enrichedHom V F‚ÇÇ F‚ÇÉ) (enrichedHom V F‚ÇÉ F‚ÇÑ)).inv ‚â´
      enrichedComp V F‚ÇÅ F‚ÇÇ F‚ÇÉ ‚ñ∑ enrichedHom V F‚ÇÉ F‚ÇÑ ‚â´ enrichedComp V F‚ÇÅ F‚ÇÉ F‚ÇÑ =
      enrichedHom V F‚ÇÅ F‚ÇÇ ‚óÅ enrichedComp V F‚ÇÇ F‚ÇÉ F‚ÇÑ ‚â´ enrichedComp V F‚ÇÅ F‚ÇÇ F‚ÇÑ := by
  ext j
  conv_lhs =>
    rw [assoc, assoc, enrichedComp_œÄ,
      tensorHom_def_assoc, ‚Üê comp_whiskerRight_assoc, enrichedComp_œÄ,
      comp_whiskerRight_assoc, ‚Üê whisker_exchange_assoc,
      ‚Üê whisker_exchange_assoc, ‚Üê tensorHom_def'_assoc, ‚Üê associator_inv_naturality_assoc]
  conv_rhs =>
    rw [assoc, enrichedComp_œÄ, tensorHom_def'_assoc, ‚Üê MonoidalCategory.whiskerLeft_comp_assoc,
      enrichedComp_œÄ, MonoidalCategory.whiskerLeft_comp_assoc, whisker_exchange_assoc,
      whisker_exchange_assoc, ‚Üê tensorHom_def_assoc]
  dsimp
  rw [e_assoc]

variable (J C)

/-- If `C` is a `V`-enriched ordinary category, and `C` has suitable limits,
then `J ‚•§ C` is also a `V`-enriched ordinary category. -/
noncomputable def enrichedOrdinaryCategory [‚àÄ (F‚ÇÅ F‚ÇÇ : J ‚•§ C), HasEnrichedHom V F‚ÇÅ F‚ÇÇ] :
    EnrichedOrdinaryCategory V (J ‚•§ C) where
  Hom F‚ÇÅ F‚ÇÇ := enrichedHom V F‚ÇÅ F‚ÇÇ
  id F := enrichedId V F
  comp F‚ÇÅ F‚ÇÇ F‚ÇÉ := enrichedComp V F‚ÇÅ F‚ÇÇ F‚ÇÉ
  assoc _ _ _ _ := enriched_assoc _ _ _ _ _
  homEquiv := homEquiv V
  homEquiv_id _ := homEquiv_id V _
  homEquiv_comp f g := homEquiv_comp V f g

end CategoryTheory.Enriched.FunctorCategory
