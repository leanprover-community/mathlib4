/-
Copyright (c) 2024 Daniel Carranza. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Daniel Carranza
-/
import Mathlib.CategoryTheory.Enriched.Ordinary
import Mathlib.CategoryTheory.Monoidal.Braided.Basic

/-!

# The opposite category of an enriched category

When a monoidal category `V` is braided, we may define the opposite `V`-category of a
`V`-category. The symmetry map is required to define the composition morphism.

This file constructs the opposite `V`-category as an instance on the type `C·µí·µñ` and constructs an
equivalence between the underlying category `ForgetEnrichment V (C·µí·µñ)` and the opposite category
`(ForgetEnrichment V C)·µí·µñ`.

We use `C·µí·µñ` for the underlying type as this allows us to construct an instance of
`EnrichedOrdinaryCategory V (C·µí·µñ)` in the case that `C` comes with an instance of
`EnrichedOrdinaryCategory V C`.

-/

universe v‚ÇÅ u‚ÇÅ v u

namespace CategoryTheory

open MonoidalCategory BraidedCategory

variable (V : Type u‚ÇÅ) [Category.{v‚ÇÅ} V] [MonoidalCategory V] [BraidedCategory V]

section

variable (C : Type u) [EnrichedCategory V C]

/-- For a `V`-category `C`, construct the opposite `V`-category structure on the type `C·µí·µñ`
using the braiding in `V`. -/
instance EnrichedCategory.Opposite : EnrichedCategory V C·µí·µñ where
  Hom y x := EnrichedCategory.Hom x.unop y.unop
  id x := EnrichedCategory.id x.unop
  comp z y x := (Œ≤_ _ _).hom ‚â´ EnrichedCategory.comp (x.unop) (y.unop) (z.unop)
  id_comp _ _ := by
    simp only [braiding_naturality_left_assoc, braiding_tensorUnit_left,
      Category.assoc, Iso.inv_hom_id_assoc]
    exact EnrichedCategory.comp_id _ _
  comp_id _ _ := by
    simp only [braiding_naturality_right_assoc, braiding_tensorUnit_right,
      Category.assoc, Iso.inv_hom_id_assoc]
    exact EnrichedCategory.id_comp _ _
  assoc _ _ _ _ := by
    simp only [braiding_naturality_left_assoc,
      MonoidalCategory.whiskerLeft_comp, Category.assoc]
    rw [‚Üê EnrichedCategory.assoc]
    simp only [braiding_tensor_left, Category.assoc, Iso.inv_hom_id_assoc,
      braiding_naturality_right_assoc, braiding_tensor_right]

end

/-- Unfold the definition of composition in the enriched opposite category. -/
@[reassoc]
lemma eComp_op_eq {C : Type u} [EnrichedCategory V C] (x y z : C·µí·µñ) :
    eComp V z y x = (Œ≤_ _ _).hom ‚â´ eComp V x.unop y.unop z.unop :=
  rfl

/-- When composing a tensor product of morphisms with the `V`-composition morphism in `C·µí·µñ`,
this re-writes the `V`-composition to be in `C` and moves the braiding to the left. -/
@[reassoc]
lemma tensorHom_eComp_op_eq {C : Type u} [EnrichedCategory V C] {x y z : C·µí·µñ} {v w : V}
    (f : v ‚ü∂ EnrichedCategory.Hom z y) (g : w ‚ü∂ EnrichedCategory.Hom y x) :
    (f ‚äó g) ‚â´ eComp V z y x = (Œ≤_ v w).hom ‚â´ (g ‚äó f) ‚â´ eComp V x.unop y.unop z.unop := by
  rw [eComp_op_eq]
  exact braiding_naturality_assoc (C := V) f g _

-- In this section, we establish an equivalence between
--  ‚Ä¢ the underlying category of the `V`-category `C·µí·µñ`; and
--  ‚Ä¢ the opposite category of the underlying category of `C`.
-- We also show that if `C` is an enriched ordinary category (i.e. a category enriched in `V`
-- equipped with an identification `(X ‚ü∂ Y) ‚âÉ (ùüô_ V ‚ü∂ (X ‚ü∂[V] Y))`) then `C·µí·µñ` is again
-- an enriched ordinary category.
section

variable (C : Type u) [EnrichedCategory V C]

/-- The functor going from the underlying category of `C·µí·µñ` to the opposite of the underlying
category of `C`. -/
def ForgetEnrichment.Opposite.toOp : ForgetEnrichment V C·µí·µñ ‚•§ (ForgetEnrichment V C)·µí·µñ where
  obj x := x
  map {x y} f := f.op
  map_comp {x y z} f g := by
    have : (f ‚â´ g) = homTo V (f ‚â´ g) := rfl
    rw [this, forgetEnrichment_comp, Category.assoc, tensorHom_eComp_op_eq,
      leftUnitor_inv_braiding_assoc, ‚Üê unitors_inv_equal, ‚Üê Category.assoc]
    congr 1

/-- The functor going from the opposite of the underlying category of `C` to the underlying
category of `C·µí·µñ`. -/
def ForgetEnrichment.Opposite.fromOp : (ForgetEnrichment V C)·µí·µñ ‚•§ ForgetEnrichment V C·µí·µñ where
  obj x := x
  map {x y} f := f.unop
  map_comp {x y z} f g := by
    have : g.unop ‚â´ f.unop = homTo V (g.unop ‚â´ f.unop) := rfl
    dsimp
    rw [this, forgetEnrichment_comp, Category.assoc, unitors_inv_equal,
      ‚Üê leftUnitor_inv_braiding_assoc]
    have : (Œ≤_ _ _).hom ‚â´ (homTo V g.unop ‚äó homTo V f.unop) ‚â´
        eComp V (¬´to¬ª V z.unop) (¬´to¬ª V y.unop) (¬´to¬ª V x.unop) =
        ((homTo V f.unop) ‚äó (homTo V g.unop)) ‚â´ eComp V x y z :=
      by exact (tensorHom_eComp_op_eq V _ _).symm
    rw [this, ‚Üê Category.assoc]
    congr 1

/-- The identity functor on `ForgetEnrichment V (C·µí·µñ)` is naturally isomorphic to the composite
functor from `ForgetEnrichment V (C·µí·µñ)` to `(ForgetEnrichment V C)·µí·µñ` and
back to `ForgetEnrichment V (C·µí·µñ)`. -/
def ForgetEnrichment.Opposite.toFromNatIso :
    ùü≠ (ForgetEnrichment V C·µí·µñ) ‚âÖ toOp V C ‚ãô fromOp V C where
  hom := {app := ùüô}
  inv := {
    app := ùüô
    naturality := fun ‚¶ÉX Y‚¶Ñ f => by
      dsimp
      have :  ùüô ((fromOp V C).obj ((toOp V C).obj Y)) = ùüô Y := rfl
      rw [‚Üê this, Category.comp_id, Category.id_comp f]
      congr 1
  }

/-- The composite functor from `(ForgetEnrichment V C)·µí·µñ` to `ForgetEnrichment V (C·µí·µñ)` and
back to `(ForgetEnrichment V C)·µí·µñ` is naturally isomorphic to the identity functor. -/
def ForgetEnrichment.Opposite.fromToNatIso :
    fromOp V C ‚ãô toOp V C ‚âÖ ùü≠ (ForgetEnrichment V C)·µí·µñ where
  hom := {
    app := ùüô
    naturality := fun ‚¶ÉX Y‚¶Ñ f => by
      dsimp
      have :  ùüô ((toOp V C).obj ((fromOp V C).obj Y)) = ùüô Y := rfl
      rw [‚Üê this, Category.comp_id, Category.id_comp f]
      congr 1
  }
  inv := {app := ùüô}

/-- The equivalence between the underlying category of `C·µí·µñ` and the opposite of the underlying
category of `C`. -/
def ForgetEnrichment.Opposite.equiv : ForgetEnrichment V C·µí·µñ ‚âå (ForgetEnrichment V C)·µí·µñ :=
  Equivalence.mk (toOp V C) (fromOp V C) (toFromNatIso V C) (fromToNatIso V C)

/-- If `D` is an enriched ordinary category then `D·µí·µñ` is an enriched ordinary category. -/
instance EnrichedOrdinaryCategory.Opposite {D : Type u} [Category.{v} D]
    [EnrichedOrdinaryCategory V D] : EnrichedOrdinaryCategory V D·µí·µñ where
  toEnrichedCategory := inferInstanceAs (EnrichedCategory V D·µí·µñ)
  homEquiv := Quiver.Hom.opEquiv.symm.trans homEquiv
  homEquiv_id x := homEquiv_id (x.unop)
  homEquiv_comp f g := by
    simp only [unop_comp, tensorHom_eComp_op_eq, leftUnitor_inv_braiding_assoc, ‚Üê unitors_inv_equal]
    exact homEquiv_comp g.unop f.unop

end

end CategoryTheory
