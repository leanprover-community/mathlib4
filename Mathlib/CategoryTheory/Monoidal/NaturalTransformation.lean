/-
Copyright (c) 2020 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison
-/
import Mathlib.CategoryTheory.Adjunction.FullyFaithful
import Mathlib.CategoryTheory.Monoidal.Functor
import Mathlib.CategoryTheory.FullSubcategory

/-!
# Monoidal natural transformations

Natural transformations between (lax) monoidal functors must satisfy
an additional compatibility relation with the tensorators:
`F.Œº X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº X Y`.

-/

open CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

open CategoryTheory.Category

open CategoryTheory.Functor

namespace CategoryTheory

open MonoidalCategory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory C]
  {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [MonoidalCategory D]
  {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [MonoidalCategory E]
  {E' : Type u‚ÇÑ} [Category.{v‚ÇÑ} E'] [MonoidalCategory E']

variable {F‚ÇÅ F‚ÇÇ F‚ÇÉ : C ‚•§ D} (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) [F‚ÇÅ.LaxMonoidal] [F‚ÇÇ.LaxMonoidal] [F‚ÇÉ.LaxMonoidal]

namespace NatTrans

open Functor.LaxMonoidal

/-- A natural transformation between (lax) monoidal functors is monoidal if it satisfies
`Œµ F ‚â´ œÑ.app (ùüô_ C) = Œµ G` and `Œº F X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ Œº G X Y`. -/
class IsMonoidal : Prop where
  unit : Œµ F‚ÇÅ ‚â´ œÑ.app (ùüô_ C) = Œµ F‚ÇÇ := by aesop_cat
  tensor (X Y : C) : Œº F‚ÇÅ _ _ ‚â´ œÑ.app (X ‚äó Y) = (œÑ.app X ‚äó œÑ.app Y) ‚â´ Œº F‚ÇÇ _ _ := by aesop_cat

namespace IsMonoidal

attribute [reassoc (attr := simp)] unit tensor

instance id : IsMonoidal (ùüô F‚ÇÅ) where

instance comp (œÑ' : F‚ÇÇ ‚ü∂ F‚ÇÉ) [IsMonoidal œÑ] [IsMonoidal œÑ'] :
    IsMonoidal (œÑ ‚â´ œÑ') where

instance hcomp {G‚ÇÅ G‚ÇÇ : D ‚•§ E} [G‚ÇÅ.LaxMonoidal] [G‚ÇÇ.LaxMonoidal] (œÑ' : G‚ÇÅ ‚ü∂ G‚ÇÇ)
    [IsMonoidal œÑ] [IsMonoidal œÑ'] : IsMonoidal (œÑ ‚ó´ œÑ') where
  unit := by
    simp only [comp_obj, comp_Œµ, hcomp_app, assoc, naturality_assoc, unit_assoc, ‚Üê map_comp, unit]
  tensor X Y := by
    simp only [comp_obj, comp_Œº, hcomp_app, assoc, naturality_assoc,
      tensor_assoc, tensor_comp, Œº_natural_assoc]
    simp only [‚Üê map_comp, tensor]

instance (F : C ‚•§ D) [F.LaxMonoidal] : NatTrans.IsMonoidal F.leftUnitor.hom where

instance (F : C ‚•§ D) [F.LaxMonoidal] : NatTrans.IsMonoidal F.rightUnitor.hom where

instance (F : C ‚•§ D) (G : D ‚•§ E) (H : E ‚•§ E') [F.LaxMonoidal] [G.LaxMonoidal] [H.LaxMonoidal] :
    NatTrans.IsMonoidal (Functor.associator F G H).hom where
  unit := by
    simp only [comp_obj, comp_Œµ, assoc, Functor.map_comp, associator_hom_app, comp_id,
      Functor.comp_map]
  tensor X Y := by
    simp only [comp_obj, comp_Œº, associator_hom_app, Functor.comp_map, map_comp,
      comp_id, tensorHom_id, id_whiskerRight, assoc, id_comp]

end IsMonoidal

instance {F G : C ‚•§ D} {H K : C ‚•§ E} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ K)
    [F.LaxMonoidal] [G.LaxMonoidal] [IsMonoidal Œ±]
    [H.LaxMonoidal] [K.LaxMonoidal] [IsMonoidal Œ≤] :
    IsMonoidal (NatTrans.prod' Œ± Œ≤) where
  unit := by
    ext
    ¬∑ rw [prod_comp_fst, prod'_Œµ_fst, prod'_Œµ_fst, prod'_app_fst, IsMonoidal.unit]
    ¬∑ rw [prod_comp_snd, prod'_Œµ_snd, prod'_Œµ_snd, prod'_app_snd, IsMonoidal.unit]
  tensor X Y := by
    ext
    ¬∑ simp only [prod_comp_fst, prod'_Œº_fst, prod'_app_fst,
        prodMonoidal_tensorHom, IsMonoidal.tensor]
    ¬∑ simp only [prod_comp_snd, prod'_Œº_snd, prod'_app_snd,
        prodMonoidal_tensorHom, IsMonoidal.tensor]

end NatTrans

namespace Iso

variable (e : F‚ÇÅ ‚âÖ F‚ÇÇ) [NatTrans.IsMonoidal e.hom]

instance : NatTrans.IsMonoidal e.inv where
  unit := by rw [‚Üê NatTrans.IsMonoidal.unit (œÑ := e.hom), assoc, hom_inv_id_app, comp_id]
  tensor X Y := by
    rw [‚Üê cancel_mono (e.hom.app (X ‚äó Y)), assoc, assoc, inv_hom_id_app, comp_id,
      NatTrans.IsMonoidal.tensor, ‚Üê MonoidalCategory.tensor_comp_assoc,
      inv_hom_id_app, inv_hom_id_app, tensorHom_id, id_whiskerRight, id_comp]

end Iso

namespace Adjunction

variable {F : C ‚•§ D} {G : D ‚•§ C} (adj : F ‚ä£ G)

open Functor.LaxMonoidal Functor.OplaxMonoidal Functor.Monoidal

namespace IsMonoidal

variable [F.Monoidal] [G.LaxMonoidal] [adj.IsMonoidal]

instance : NatTrans.IsMonoidal adj.unit where
  unit := by
    dsimp
    rw [id_comp, ‚Üê unit_app_unit_comp_map_Œ∑ adj, assoc, Monoidal.map_Œ∑_Œµ]
    dsimp
    rw [comp_id]
  tensor X Y := by
    dsimp
    rw [‚Üê unit_app_tensor_comp_map_Œ¥_assoc, id_comp, Monoidal.map_Œ¥_Œº, comp_id]

instance : NatTrans.IsMonoidal adj.counit where
  unit := by
    dsimp
    rw [assoc, map_Œµ_comp_counit_app_unit adj, Œµ_Œ∑]
  tensor X Y := by
    dsimp
    rw [assoc, map_Œº_comp_counit_app_tensor, Œº_Œ¥_assoc, comp_id]

end IsMonoidal

namespace Equivalence

variable (e : C ‚âå D) [e.functor.Monoidal] [e.inverse.Monoidal] [e.IsMonoidal]

instance : NatTrans.IsMonoidal e.unit :=
  inferInstanceAs (NatTrans.IsMonoidal e.toAdjunction.unit)

instance : NatTrans.IsMonoidal e.counit :=
  inferInstanceAs (NatTrans.IsMonoidal e.toAdjunction.counit)

end Equivalence

end Adjunction

namespace LaxMonoidalFunctor

/-- The type of monoidal natural transformations between (bundled) lax monoidal functors. -/
structure Hom (F G : LaxMonoidalFunctor C D) where
  /-- the natural transformation between the underlying functors -/
  hom : F.toFunctor ‚ü∂ G.toFunctor
  isMonoidal : NatTrans.IsMonoidal hom := by infer_instance

attribute [instance] Hom.isMonoidal

instance : Category (LaxMonoidalFunctor C D) where
  Hom := Hom
  comp Œ± Œ≤ := ‚ü®Œ±.1 ‚â´ Œ≤.1, by have := Œ±.2; have := Œ≤.2; infer_instance‚ü©
  id _ := ‚ü®ùüô _, inferInstance‚ü©

@[simp]
lemma id_hom (F : LaxMonoidalFunctor C D) : Hom.hom (ùüô F) = ùüô _ := rfl

@[reassoc, simp]
lemma comp_hom {F G H : LaxMonoidalFunctor C D} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
    (Œ± ‚â´ Œ≤).hom = Œ±.hom ‚â´ Œ≤.hom := rfl

@[ext]
lemma hom_ext {F G : LaxMonoidalFunctor C D} {Œ± Œ≤ : F ‚ü∂ G} (h : Œ±.hom = Œ≤.hom) : Œ± = Œ≤ := by
  cases Œ±; cases Œ≤; subst h; rfl

/-- Constructor for morphisms in the category `LaxMonoidalFunctor C D`. -/
@[simps]
def homMk {F G : LaxMonoidalFunctor C D} (f : F.toFunctor ‚ü∂ G.toFunctor) [NatTrans.IsMonoidal f] :
    F ‚ü∂ G := ‚ü®f, inferInstance‚ü©

/-- Constructor for isomorphisms in the category `LaxMonoidalFunctor C D`. -/
@[simps]
def isoMk {F G : LaxMonoidalFunctor C D} (e : F.toFunctor ‚âÖ G.toFunctor)
    [NatTrans.IsMonoidal e.hom] :
    F ‚âÖ G where
  hom := homMk e.hom
  inv := homMk e.inv

open Functor.LaxMonoidal

/-- Constructor for isomorphisms between lax monoidal functors. -/
@[simps!]
def isoOfComponents {F G : LaxMonoidalFunctor C D} (e : ‚àÄ X, F.obj X ‚âÖ G.obj X)
    (naturality : ‚àÄ {X Y : C} (f : X ‚ü∂ Y), F.map f ‚â´ (e Y).hom = (e X).hom ‚â´ G.map f := by
      aesop_cat)
    (unit : Œµ F.toFunctor ‚â´ (e (ùüô_ C)).hom = Œµ G.toFunctor := by aesop_cat)
    (tensor : ‚àÄ X Y, Œº F.toFunctor X Y ‚â´ (e (X ‚äó Y)).hom =
      ((e X).hom ‚äó (e Y).hom) ‚â´ Œº G.toFunctor X Y := by aesop_cat) :
    F ‚âÖ G :=
  @isoMk _ _ _ _ _ _ _ _ (NatIso.ofComponents e naturality) (by constructor <;> assumption)

end LaxMonoidalFunctor

end CategoryTheory
