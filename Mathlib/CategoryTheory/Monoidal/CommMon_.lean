/-
Copyright (c) 2020 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison
-/
import Mathlib.CategoryTheory.Monoidal.Braided.Basic
import Mathlib.CategoryTheory.Monoidal.Mon_

/-!
# The category of commutative monoids in a braided monoidal category.
-/

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ u

open CategoryTheory MonoidalCategory MonObj

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C] [BraidedCategory.{v‚ÇÅ} C]

variable (C) in
/-- A commutative monoid object internal to a monoidal category.
-/
structure CommMon where
  /-- The underlying object in the ambient monoidal category -/
  X : C
  [mon : MonObj X]
  [comm : IsCommMonObj X]

@[deprecated (since := "2025-09-15")] alias CommMon_ := CommMon

attribute [instance] CommMon.mon CommMon.comm

namespace CommMon

/-- A commutative monoid object is a monoid object. -/
@[simps X]
def toMon (A : CommMon C) : Mon C := ‚ü®A.X‚ü©

@[deprecated (since := "2025-09-15")] alias toMon_ := toMon

variable (C) in
/-- The trivial commutative monoid object. We later show this is initial in `CommMon C`.
-/
@[simps!]
def trivial : CommMon C := { X := ùüô_ C }

instance : Inhabited (CommMon C) :=
  ‚ü®trivial C‚ü©

variable {M : CommMon C}

instance : Category (CommMon C) :=
  InducedCategory.category CommMon.toMon

@[simp]
theorem id_hom (A : CommMon C) : Mon.Hom.hom (ùüô A) = ùüô A.X :=
  rfl

@[simp]
theorem comp_hom {R S T : CommMon C} (f : R ‚ü∂ S) (g : S ‚ü∂ T) :
   Mon.Hom.hom (f ‚â´ g) = f.hom ‚â´ g.hom :=
  rfl

@[ext]
lemma hom_ext {A B : CommMon C} (f g : A ‚ü∂ B) (h : f.hom = g.hom) : f = g :=
 Mon.Hom.ext h

@[simp]
lemma id' (A : CommMon C) : (ùüô A : A.toMon ‚ü∂ A.toMon) = ùüô (A.toMon) := rfl

@[simp]
lemma comp' {A‚ÇÅ A‚ÇÇ A‚ÇÉ : CommMon C} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ) (g : A‚ÇÇ ‚ü∂ A‚ÇÉ) :
    ((f ‚â´ g : A‚ÇÅ ‚ü∂ A‚ÇÉ) : A‚ÇÅ.toMon ‚ü∂ A‚ÇÉ.toMon) = @CategoryStruct.comp (Mon C) _ _ _ _ f g := rfl

section

variable (C)

/-- The forgetful functor from commutative monoid objects to monoid objects. -/
@[simps! obj_X]
def forget‚ÇÇMon : CommMon C ‚•§ Mon C :=
  inducedFunctor CommMon.toMon

@[deprecated (since := "2025-09-15")] alias forget‚ÇÇMon_ := forget‚ÇÇMon

/-- The forgetful functor from commutative monoid objects to monoid objects
is fully faithful. -/
def fullyFaithfulForget‚ÇÇMon : (forget‚ÇÇMon C).FullyFaithful :=
  fullyFaithfulInducedFunctor _
-- The `Full, Faithful` instances should be constructed by a deriving handler.
-- https://github.com/leanprover-community/mathlib4/issues/380

@[deprecated (since := "2025-09-15")] alias fullyFaithfulForget‚ÇÇMon_ := fullyFaithfulForget‚ÇÇMon

instance : (forget‚ÇÇMon C).Full := InducedCategory.full _
instance : (forget‚ÇÇMon C).Faithful := InducedCategory.faithful _

@[simp]
theorem forget‚ÇÇMon_obj_one (A : CommMon C) : Œ∑[((forget‚ÇÇMon C).obj A).X] = Œ∑[A.X] :=
  rfl

@[simp]
theorem forget‚ÇÇMon_obj_mul (A : CommMon C) : Œº[((forget‚ÇÇMon C).obj A).X] = Œº[A.X] :=
  rfl

@[simp]
theorem forget‚ÇÇMon_map_hom {A B : CommMon C} (f : A ‚ü∂ B) : ((forget‚ÇÇMon C).map f).hom = f.hom :=
  rfl

/-- The forgetful functor from commutative monoid objects to the ambient category. -/
@[simps!]
def forget : CommMon C ‚•§ C :=
  forget‚ÇÇMon C ‚ãô Mon.forget C

instance : (forget C).Faithful where

@[simp]
theorem forget‚ÇÇMon_comp_forget : forget‚ÇÇMon C ‚ãô Mon.forget C = forget C := rfl

instance {M N : CommMon C} {f : M ‚ü∂ N} [IsIso f] : IsIso f.hom :=
  inferInstanceAs <| IsIso <| (forget C).map f

end

/-- Construct an isomorphism of commutative monoid objects by giving a monoid isomorphism between
the underlying objects. -/
@[simps!]
def mkIso' {M N : C} (e : M ‚âÖ N) [MonObj M] [IsCommMonObj M] [MonObj N] [IsCommMonObj N]
    [IsMonHom e.hom] : mk M ‚âÖ mk N :=
  (fullyFaithfulForget‚ÇÇMon C).preimageIso (Mon.mkIso' e)

/-- Construct an isomorphism of commutative monoid objects by giving an isomorphism between the
underlying objects and checking compatibility with unit and multiplication only in the forward
direction. -/
@[simps!]
abbrev mkIso {M N : CommMon C} (e : M.X ‚âÖ N.X) (one_f : Œ∑[M.X] ‚â´ e.hom = Œ∑[N.X] := by cat_disch)
    (mul_f : Œº[M.X] ‚â´ e.hom = (e.hom ‚äó‚Çò e.hom) ‚â´ Œº[N.X] := by cat_disch) : M ‚âÖ N :=
  have : IsMonHom e.hom := ‚ü®one_f, mul_f‚ü©
  mkIso' e

instance uniqueHomFromTrivial (A : CommMon C) : Unique (trivial C ‚ü∂ A) :=
 Mon.uniqueHomFromTrivial A.toMon

open CategoryTheory.Limits

instance : HasInitial (CommMon C) :=
  hasInitial_of_unique (trivial C)

end CommMon

namespace CategoryTheory
variable
  {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [MonoidalCategory D] [BraidedCategory D]
  {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [MonoidalCategory E] [BraidedCategory E]
  {F F' : C ‚•§ D} {G : D ‚•§ E}

namespace Functor
section LaxBraided
variable [F.LaxBraided] [F'.LaxBraided] [G.LaxBraided]

open scoped Obj

instance isCommMonObj_obj {M : C} [MonObj M] [IsCommMonObj M] : IsCommMonObj (F.obj M) where
  mul_comm := by
    dsimp; rw [‚Üê Functor.LaxBraided.braided_assoc, ‚Üê Functor.map_comp, IsCommMonObj.mul_comm]

variable (F) in
/-- A lax braided functor takes commutative monoid objects to commutative monoid objects.

That is, a lax braided functor `F : C ‚•§ D` induces a functor `CommMon C ‚•§ CommMon D`.
-/
@[simps!]
def mapCommMon : CommMon C ‚•§ CommMon D where
  obj A :=
    { F.mapMon.obj A.toMon with
      comm :=
        { mul_comm := by
            dsimp
            rw [‚Üê Functor.LaxBraided.braided_assoc, ‚Üê Functor.map_comp, IsCommMonObj.mul_comm] } }
  map f := F.mapMon.map f

@[simp]
theorem mapCommMon_id_one (A : CommMon C) :
    Œ∑[((ùü≠ C).mapCommMon.obj A).X] = ùüô _ ‚â´ Œ∑[A.X] :=
  rfl

@[simp]
theorem mapCommMon_id_mul (A : CommMon C) :
    Œº[((ùü≠ C).mapCommMon.obj A).X] = ùüô _ ‚â´ Œº[A.X] :=
  rfl

@[simp]
theorem comp_mapCommMon_one (A : CommMon C) :
    Œ∑[((F ‚ãô G).mapCommMon.obj A).X] = LaxMonoidal.Œµ (F ‚ãô G) ‚â´ (F ‚ãô G).map Œ∑[A.X] :=
  rfl

@[simp]
theorem comp_mapCommMon_mul (A : CommMon C) :
    Œº[((F ‚ãô G).mapCommMon.obj A).X] = LaxMonoidal.Œº (F ‚ãô G) _ _ ‚â´ (F ‚ãô G).map Œº[A.X] :=
  rfl

/-- The identity functor is also the identity on commutative monoid objects. -/
@[simps!]
def mapCommMonIdIso : mapCommMon (ùü≠ C) ‚âÖ ùü≠ (CommMon C) :=
  NatIso.ofComponents fun X ‚Ü¶ CommMon.mkIso (.refl _)

/-- The composition functor is also the composition on commutative monoid objects. -/
@[simps!]
def mapCommMonCompIso : (F ‚ãô G).mapCommMon ‚âÖ F.mapCommMon ‚ãô G.mapCommMon :=
  NatIso.ofComponents fun X ‚Ü¶ CommMon.mkIso (.refl _)

variable (C D) in
/-- `mapCommMon` is functorial in the lax braided functor. -/
@[simps]
def mapCommMonFunctor : LaxBraidedFunctor C D ‚•§ CommMon C ‚•§ CommMon D where
  obj F := F.mapCommMon
  map Œ± := { app A := .mk' (Œ±.hom.app A.X) }
  map_comp _ _ := rfl

protected instance Faithful.mapCommMon [F.Faithful] : F.mapCommMon.Faithful where
  map_injective hfg := F.mapMon.map_injective hfg

/-- Natural transformations between functors lift to monoid objects. -/
@[simps!]
def mapCommMonNatTrans (f : F ‚ü∂ F') [NatTrans.IsMonoidal f] : F.mapCommMon ‚ü∂ F'.mapCommMon where
  app X := .mk' (f.app _)

/-- Natural isomorphisms between functors lift to monoid objects. -/
@[simps!]
def mapCommMonNatIso (e : F ‚âÖ F') [NatTrans.IsMonoidal e.hom] : F.mapCommMon ‚âÖ F'.mapCommMon :=
  NatIso.ofComponents fun X ‚Ü¶ CommMon.mkIso (e.app _)

end LaxBraided

section Braided
variable [F.Braided]

protected instance Full.mapCommMon [F.Full] [F.Faithful] : F.mapCommMon.Full where
  map_surjective := F.mapMon.map_surjective

/-- If `F : C ‚•§ D` is a fully faithful monoidal functor, then `Grp(F) : Grp C ‚•§ Grp D` is fully
faithful too. -/
@[simps]
protected def FullyFaithful.mapCommMon (hF : F.FullyFaithful) : F.mapCommMon.FullyFaithful where
  preimage f := .mk <| hF.preimage f.hom

end Braided

end Functor

open Functor

namespace Adjunction
variable {F : C ‚•§ D} {G : D ‚•§ C} (a : F ‚ä£ G) [F.Braided] [G.LaxBraided] [a.IsMonoidal]

/-- An adjunction of braided functors lifts to an adjunction of their lifts to commutative monoid
objects. -/
@[simps] def mapCommMon : F.mapCommMon ‚ä£ G.mapCommMon where
  unit := mapCommMonIdIso.inv ‚â´ mapCommMonNatTrans a.unit ‚â´ mapCommMonCompIso.hom
  counit := mapCommMonCompIso.inv ‚â´ mapCommMonNatTrans a.counit ‚â´ mapCommMonIdIso.hom

end Adjunction

namespace Equivalence

/-- An equivalence of categories lifts to an equivalence of their commutative monoid objects. -/
@[simps]
def mapCommMon (e : C ‚âå D) [e.functor.Braided] [e.inverse.Braided] [e.IsMonoidal] :
    CommMon C ‚âå CommMon D where
  functor := e.functor.mapCommMon
  inverse := e.inverse.mapCommMon
  unitIso := mapCommMonIdIso.symm ‚â™‚â´ mapCommMonNatIso e.unitIso ‚â™‚â´ mapCommMonCompIso
  counitIso := mapCommMonCompIso.symm ‚â™‚â´ mapCommMonNatIso e.counitIso ‚â™‚â´ mapCommMonIdIso

end CategoryTheory.Equivalence

namespace CommMon

open CategoryTheory.LaxBraidedFunctor

namespace EquivLaxBraidedFunctorPUnit

variable (C) in
/-- Implementation of `CommMon.equivLaxBraidedFunctorPUnit`. -/
@[simps]
def laxBraidedToCommMon : LaxBraidedFunctor (Discrete PUnit.{u + 1}) C ‚•§ CommMon C where
  obj F := (F.mapCommMon : CommMon _ ‚•§ CommMon C).obj (trivial (Discrete PUnit.{u+1}))
  map Œ± := ((Functor.mapCommMonFunctor (Discrete PUnit) C).map Œ±).app _

/-- Implementation of `CommMon.equivLaxBraidedFunctorPUnit`. -/
@[simps!]
def commMonToLaxBraidedObj (A : CommMon C) :
    Discrete PUnit.{u + 1} ‚•§ C := (Functor.const _).obj A.X

instance (A : CommMon C) : (commMonToLaxBraidedObj A).LaxMonoidal where
  Œµ := Œ∑[A.X]
  ¬´Œº¬ª _ _ := Œº[A.X]

open Functor.LaxMonoidal

@[simp]
lemma commMonToLaxBraidedObj_Œµ (A : CommMon C) :
    Œµ (commMonToLaxBraidedObj A) = Œ∑[A.X] := rfl

@[simp]
lemma commMonToLaxBraidedObj_Œº (A : CommMon C) (X Y) :
    ¬´Œº¬ª (commMonToLaxBraidedObj A) X Y = Œº[A.X] := rfl

instance (A : CommMon C) : (commMonToLaxBraidedObj A).LaxBraided where

variable (C)
/-- Implementation of `CommMon.equivLaxBraidedFunctorPUnit`. -/
@[simps]
def commMonToLaxBraided : CommMon C ‚•§ LaxBraidedFunctor (Discrete PUnit.{u + 1}) C where
  obj A := LaxBraidedFunctor.of (commMonToLaxBraidedObj A)
  map f :=
    { hom := { app := fun _ => f.hom }
      isMonoidal := { } }

/-- Implementation of `CommMon.equivLaxBraidedFunctorPUnit`. -/
@[simps!]
def unitIso :
    ùü≠ (LaxBraidedFunctor (Discrete PUnit.{u + 1}) C) ‚âÖ
        laxBraidedToCommMon C ‚ãô commMonToLaxBraided C :=
  NatIso.ofComponents
    (fun F ‚Ü¶ LaxBraidedFunctor.isoOfComponents (fun _ ‚Ü¶ F.mapIso (eqToIso (by ext))))
    (fun f ‚Ü¶ by ext ‚ü®‚ü®‚ü©‚ü©; dsimp; simp)

@[simp]
theorem counitIso_aux_one (A : CommMon C) :
    Œ∑[((commMonToLaxBraided C ‚ãô laxBraidedToCommMon C).obj A).X] = Œ∑[A.X] ‚â´ ùüô _ :=
  rfl

@[simp]
theorem counitIso_aux_mul (A : CommMon C) :
    Œº[((commMonToLaxBraided C ‚ãô laxBraidedToCommMon C).obj A).X] = Œº[A.X] ‚â´ ùüô _ :=
  rfl

/-- Implementation of `CommMon.equivLaxBraidedFunctorPUnit`. -/
@[simps!]
def counitIso : commMonToLaxBraided C ‚ãô laxBraidedToCommMon C ‚âÖ ùü≠ (CommMon C) :=
  NatIso.ofComponents (fun F ‚Ü¶ mkIso (Iso.refl _))

end EquivLaxBraidedFunctorPUnit

open EquivLaxBraidedFunctorPUnit

/-- Commutative monoid objects in `C` are "just" braided lax monoidal functors from the trivial
braided monoidal category to `C`.
-/
@[simps]
def equivLaxBraidedFunctorPUnit : LaxBraidedFunctor (Discrete PUnit.{u + 1}) C ‚âå CommMon C where
  functor := laxBraidedToCommMon C
  inverse := commMonToLaxBraided C
  unitIso := unitIso C
  counitIso := counitIso C

end CommMon
