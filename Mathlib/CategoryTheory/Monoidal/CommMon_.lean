/-
Copyright (c) 2020 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison
-/
import Mathlib.CategoryTheory.Monoidal.Braided.Basic
import Mathlib.CategoryTheory.Monoidal.Mon_

/-!
# The category of commutative monoids in a braided monoidal category.
-/

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ u

open CategoryTheory MonoidalCategory Mon_Class

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C] [BraidedCategory.{v‚ÇÅ} C]

variable (C) in
/-- A commutative monoid object internal to a monoidal category.
-/
structure CommMon_ where
  /-- The underlying object in the ambient monoidal category -/
  X : C
  [mon : Mon_Class X]
  [comm : IsCommMon X]

attribute [instance] CommMon_.mon CommMon_.comm

namespace CommMon_

/-- A commutative monoid object is a monoid object. -/
@[simps X]
def toMon_ (A : CommMon_ C) : Mon_ C := ‚ü®A.X‚ü©

variable (C) in
/-- The trivial commutative monoid object. We later show this is initial in `CommMon_ C`.
-/
@[simps!]
def trivial : CommMon_ C := { X := ùüô_ C }

instance : Inhabited (CommMon_ C) :=
  ‚ü®trivial C‚ü©

variable {M : CommMon_ C}

instance : Category (CommMon_ C) :=
  InducedCategory.category CommMon_.toMon_

@[simp]
theorem id_hom (A : CommMon_ C) : Mon_.Hom.hom (ùüô A) = ùüô A.X :=
  rfl

@[simp]
theorem comp_hom {R S T : CommMon_ C} (f : R ‚ü∂ S) (g : S ‚ü∂ T) :
    Mon_.Hom.hom (f ‚â´ g) = f.hom ‚â´ g.hom :=
  rfl

@[ext]
lemma hom_ext {A B : CommMon_ C} (f g : A ‚ü∂ B) (h : f.hom = g.hom) : f = g :=
  Mon_.Hom.ext h

-- Porting note (https://github.com/leanprover-community/mathlib4/issues/10688): the following two lemmas `id'` and `comp'`
-- have been added to ease automation;
@[simp]
lemma id' (A : CommMon_ C) : (ùüô A : A.toMon_ ‚ü∂ A.toMon_) = ùüô (A.toMon_) := rfl

@[simp]
lemma comp' {A‚ÇÅ A‚ÇÇ A‚ÇÉ : CommMon_ C} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ) (g : A‚ÇÇ ‚ü∂ A‚ÇÉ) :
    ((f ‚â´ g : A‚ÇÅ ‚ü∂ A‚ÇÉ) : A‚ÇÅ.toMon_ ‚ü∂ A‚ÇÉ.toMon_) = @CategoryStruct.comp (Mon_ C) _ _ _ _ f g := rfl

section

variable (C)

/-- The forgetful functor from commutative monoid objects to monoid objects. -/
def forget‚ÇÇMon_ : CommMon_ C ‚•§ Mon_ C :=
  inducedFunctor CommMon_.toMon_

/-- The forgetful functor from commutative monoid objects to monoid objects
is fully faithful. -/
def fullyFaithfulForget‚ÇÇMon_ : (forget‚ÇÇMon_ C).FullyFaithful :=
  fullyFaithfulInducedFunctor _
-- The `Full, Faithful` instances should be constructed by a deriving handler.
-- https://github.com/leanprover-community/mathlib4/issues/380

instance : (forget‚ÇÇMon_ C).Full := InducedCategory.full _
instance : (forget‚ÇÇMon_ C).Faithful := InducedCategory.faithful _

@[simp]
theorem forget‚ÇÇMon_obj_one (A : CommMon_ C) : Œ∑[((forget‚ÇÇMon_ C).obj A).X] = Œ∑[A.X] :=
  rfl

@[simp]
theorem forget‚ÇÇMon_obj_mul (A : CommMon_ C) : Œº[((forget‚ÇÇMon_ C).obj A).X] = Œº[A.X] :=
  rfl

@[simp]
theorem forget‚ÇÇMon_map_hom {A B : CommMon_ C} (f : A ‚ü∂ B) : ((forget‚ÇÇMon_ C).map f).hom = f.hom :=
  rfl

@[deprecated (since := "2025-02-07")] alias forget‚ÇÇ_Mon_obj_one := forget‚ÇÇMon_obj_one
@[deprecated (since := "2025-02-07")] alias forget‚ÇÇ_Mon_obj_mul := forget‚ÇÇMon_obj_mul
@[deprecated (since := "2025-02-07")] alias forget‚ÇÇ_Mon_map_hom := forget‚ÇÇMon_map_hom

/-- The forgetful functor from commutative monoid objects to the ambient category. -/
@[simps!]
def forget : CommMon_ C ‚•§ C :=
  forget‚ÇÇMon_ C ‚ãô Mon_.forget C

instance : (forget C).Faithful where

@[simp]
theorem forget‚ÇÇMon_comp_forget : forget‚ÇÇMon_ C ‚ãô Mon_.forget C = forget C := rfl

end

section

variable {M N : CommMon_ C} (f : M.X ‚âÖ N.X) (one_f : Œ∑[M.X] ‚â´ f.hom = Œ∑[N.X] := by aesop_cat)
  (mul_f : Œº[M.X] ‚â´ f.hom = (f.hom ‚äó f.hom) ‚â´ Œº[N.X] := by aesop_cat)

/-- Constructor for isomorphisms in the category `CommMon_ C`. -/
def mkIso : M ‚âÖ N :=
  (fullyFaithfulForget‚ÇÇMon_ C).preimageIso (Mon_.mkIso f one_f mul_f)

@[simp] lemma mkIso_hom_hom : (mkIso f one_f mul_f).hom.hom = f.hom := rfl
@[simp] lemma mkIso_inv_hom : (mkIso f one_f mul_f).inv.hom = f.inv := rfl

end

instance uniqueHomFromTrivial (A : CommMon_ C) : Unique (trivial C ‚ü∂ A) :=
  Mon_.uniqueHomFromTrivial A.toMon_

open CategoryTheory.Limits

instance : HasInitial (CommMon_ C) :=
  hasInitial_of_unique (trivial C)

end CommMon_

namespace CategoryTheory
variable
  {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [MonoidalCategory D] [BraidedCategory D]
  {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [MonoidalCategory E] [BraidedCategory E]
  {F F' : C ‚•§ D} [F.LaxBraided] [F'.LaxBraided] {G : D ‚•§ E} [G.LaxBraided]

namespace Functor

variable (F) in
/-- A lax braided functor takes commutative monoid objects to commutative monoid objects.

That is, a lax braided functor `F : C ‚•§ D` induces a functor `CommMon_ C ‚•§ CommMon_ D`.
-/
@[simps!]
def mapCommMon : CommMon_ C ‚•§ CommMon_ D where
  obj A :=
    { F.mapMon.obj A.toMon_ with
      comm :=
        { mul_comm' := by
            dsimp
            rw [‚Üê Functor.LaxBraided.braided_assoc, ‚Üê Functor.map_comp, IsCommMon.mul_comm] } }
  map f := F.mapMon.map f

@[simp]
theorem mapCommMon_id_one (A : CommMon_ C) :
    Œ∑[((ùü≠ C).mapCommMon.obj A).X] = ùüô _ ‚â´ Œ∑[A.X] :=
  rfl

@[simp]
theorem mapCommMon_id_mul (A : CommMon_ C) :
    Œº[((ùü≠ C).mapCommMon.obj A).X] = ùüô _ ‚â´ Œº[A.X] :=
  rfl

@[simp]
theorem comp_mapCommMon_one (A : CommMon_ C) :
    Œ∑[((F ‚ãô G).mapCommMon.obj A).X] = LaxMonoidal.Œµ (F ‚ãô G) ‚â´ (F ‚ãô G).map Œ∑[A.X] :=
  rfl

@[simp]
theorem comp_mapCommMon_mul (A : CommMon_ C) :
    Œº[((F ‚ãô G).mapCommMon.obj A).X] = LaxMonoidal.Œº (F ‚ãô G) _ _ ‚â´ (F ‚ãô G).map Œº[A.X] :=
  rfl

/-- The identity functor is also the identity on commutative monoid objects. -/
@[simps!]
noncomputable def mapCommMonIdIso : mapCommMon (ùü≠ C) ‚âÖ ùü≠ (CommMon_ C) :=
  NatIso.ofComponents fun X ‚Ü¶ CommMon_.mkIso (.refl _)

/-- The composition functor is also the composition on commutative monoid objects. -/
@[simps!]
noncomputable def mapCommMonCompIso : (F ‚ãô G).mapCommMon ‚âÖ F.mapCommMon ‚ãô G.mapCommMon :=
  NatIso.ofComponents fun X ‚Ü¶ CommMon_.mkIso (.refl _)

variable (C D) in
/-- `mapCommMon` is functorial in the lax braided functor. -/
@[simps]
def mapCommMonFunctor : LaxBraidedFunctor C D ‚•§ CommMon_ C ‚•§ CommMon_ D where
  obj F := F.mapCommMon
  map Œ± := { app := fun A => { hom := Œ±.hom.app A.X } }
  map_comp _ _ := rfl

/-- Natural transformations between functors lift to monoid objects. -/
@[simps!]
noncomputable def mapCommMonNatTrans (f : F ‚ü∂ F') [NatTrans.IsMonoidal f] :
    F.mapCommMon ‚ü∂ F'.mapCommMon where
  app X := .mk (f.app _)

/-- Natural isomorphisms between functors lift to monoid objects. -/
@[simps!]
noncomputable def mapCommMonNatIso (e : F ‚âÖ F') [NatTrans.IsMonoidal e.hom] :
    F.mapCommMon ‚âÖ F'.mapCommMon :=
  NatIso.ofComponents fun X ‚Ü¶ CommMon_.mkIso (e.app _)

end Functor

open Functor

namespace Adjunction
variable {F : C ‚•§ D} {G : D ‚•§ C} (a : F ‚ä£ G) [F.Braided] [G.LaxBraided] [a.IsMonoidal]

/-- An adjunction of braided functors lifts to an adjunction of their lifts to commutative monoid
objects. -/
@[simps] noncomputable def mapCommMon : F.mapCommMon ‚ä£ G.mapCommMon where
  unit := mapCommMonIdIso.inv ‚â´ mapCommMonNatTrans a.unit ‚â´ mapCommMonCompIso.hom
  counit := mapCommMonCompIso.inv ‚â´ mapCommMonNatTrans a.counit ‚â´ mapCommMonIdIso.hom

end Adjunction

namespace Equivalence

/-- An equivalence of categories lifts to an equivalence of their commutative monoid objects. -/
@[simps]
noncomputable def mapCommMon (e : C ‚âå D) [e.functor.Braided] [e.inverse.Braided] [e.IsMonoidal] :
    CommMon_ C ‚âå CommMon_ D where
  functor := e.functor.mapCommMon
  inverse := e.inverse.mapCommMon
  unitIso := mapCommMonIdIso.symm ‚â™‚â´ mapCommMonNatIso e.unitIso ‚â™‚â´ mapCommMonCompIso
  counitIso := mapCommMonCompIso.symm ‚â™‚â´ mapCommMonNatIso e.counitIso ‚â™‚â´ mapCommMonIdIso

end CategoryTheory.Equivalence

namespace CommMon_

open CategoryTheory.LaxBraidedFunctor

namespace EquivLaxBraidedFunctorPUnit

variable (C) in
/-- Implementation of `CommMon_.equivLaxBraidedFunctorPUnit`. -/
@[simps]
def laxBraidedToCommMon : LaxBraidedFunctor (Discrete PUnit.{u + 1}) C ‚•§ CommMon_ C where
  obj F := (F.mapCommMon : CommMon_ _ ‚•§ CommMon_ C).obj (trivial (Discrete PUnit.{u+1}))
  map Œ± := ((Functor.mapCommMonFunctor (Discrete PUnit) C).map Œ±).app _

-- variable {C}

/-- Implementation of `CommMon_.equivLaxBraidedFunctorPUnit`. -/
@[simps!]
def commMonToLaxBraidedObj (A : CommMon_ C) :
    Discrete PUnit.{u + 1} ‚•§ C := (Functor.const _).obj A.X

instance (A : CommMon_ C) : (commMonToLaxBraidedObj A).LaxMonoidal where
  Œµ' := Œ∑[A.X]
  Œº' _ _ := Œº[A.X]

open Functor.LaxMonoidal

@[simp]
lemma commMonToLaxBraidedObj_Œµ (A : CommMon_ C) :
    Œµ (commMonToLaxBraidedObj A) = Œ∑[A.X] := rfl

@[simp]
lemma commMonToLaxBraidedObj_Œº (A : CommMon_ C) (X Y) :
    ¬´Œº¬ª (commMonToLaxBraidedObj A) X Y = Œº[A.X] := rfl

instance (A : CommMon_ C) : (commMonToLaxBraidedObj A).LaxBraided where

variable (C)
/-- Implementation of `CommMon_.equivLaxBraidedFunctorPUnit`. -/
@[simps]
def commMonToLaxBraided : CommMon_ C ‚•§ LaxBraidedFunctor (Discrete PUnit.{u + 1}) C where
  obj A := LaxBraidedFunctor.of (commMonToLaxBraidedObj A)
  map f :=
    { hom := { app := fun _ => f.hom }
      isMonoidal := { } }

/-- Implementation of `CommMon_.equivLaxBraidedFunctorPUnit`. -/
@[simps!]
def unitIso :
    ùü≠ (LaxBraidedFunctor (Discrete PUnit.{u + 1}) C) ‚âÖ
        laxBraidedToCommMon C ‚ãô commMonToLaxBraided C :=
  NatIso.ofComponents
    (fun F ‚Ü¶ LaxBraidedFunctor.isoOfComponents (fun _ ‚Ü¶ F.mapIso (eqToIso (by ext))))
    (fun f ‚Ü¶ by ext ‚ü®‚ü®‚ü©‚ü©; dsimp; simp)

@[simp]
theorem counitIso_aux_one (A : CommMon_ C) :
    Œ∑[((commMonToLaxBraided C ‚ãô laxBraidedToCommMon C).obj A).X] = Œ∑[A.X] ‚â´ ùüô _ :=
  rfl

@[simp]
theorem counitIso_aux_mul (A : CommMon_ C) :
    Œº[((commMonToLaxBraided C ‚ãô laxBraidedToCommMon C).obj A).X] = Œº[A.X] ‚â´ ùüô _ :=
  rfl

/-- Implementation of `CommMon_.equivLaxBraidedFunctorPUnit`. -/
@[simps!]
def counitIso : commMonToLaxBraided C ‚ãô laxBraidedToCommMon C ‚âÖ ùü≠ (CommMon_ C) :=
  NatIso.ofComponents (fun F ‚Ü¶ mkIso (Iso.refl _))

end EquivLaxBraidedFunctorPUnit

open EquivLaxBraidedFunctorPUnit

/-- Commutative monoid objects in `C` are "just" braided lax monoidal functors from the trivial
braided monoidal category to `C`.
-/
@[simps]
def equivLaxBraidedFunctorPUnit : LaxBraidedFunctor (Discrete PUnit.{u + 1}) C ‚âå CommMon_ C where
  functor := laxBraidedToCommMon C
  inverse := commMonToLaxBraided C
  unitIso := unitIso C
  counitIso := counitIso C

end CommMon_
