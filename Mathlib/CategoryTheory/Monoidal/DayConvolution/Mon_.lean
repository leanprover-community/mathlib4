/-
Copyright (c) 2025 Robin Carlier. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robin Carlier
-/
import Mathlib.CategoryTheory.Monoidal.DayConvolution.DayFunctor
import Mathlib.CategoryTheory.Monoidal.Mon_

/-!
# Monoid objects internal to Day convolution

Let `C` and `V` be monoidal categories such that we
have a Day convolution monoidal structure on `C ‚äõ‚•§ V` (the
type alias `CategoryTheory.MonoidalCategory.DayFunctor` for
functors endowed with the Day convolution monoidal structure).
In such a situation, we show that given a lax monoidal functor `F : C ‚•§ V`,
there is a canonical monoid object structure on `F` when the
latter is interpreted as an object of `C ‚äõ‚•§ V`. Conversely, we
show that any such object admits a lax monoidal structure on their
underlying functor. We show that this defines an equivalence
(for `F : C ‚äõ‚•§ V`) between lax monoidal structures on `F.functor` and internal
monoid structures on `F`.
-/

noncomputable section

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace CategoryTheory.MonoidalCategory.DayFunctor
open scoped ExternalProduct DayFunctor
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {V : Type u‚ÇÇ} [Category.{v‚ÇÇ} V]
    [MonoidalCategory C] [MonoidalCategory V]

variable
    [‚àÄ (F G : C ‚•§ V),
      (tensor C).HasPointwiseLeftKanExtension (F ‚ä† G)]
    [(Functor.fromPUnit.{0} <| ùüô_ C).HasPointwiseLeftKanExtension
        (Functor.fromPUnit.{0} <| ùüô_ V)]
    [‚àÄ (v : V) (d : C), Limits.PreservesColimitsOfShape
      (CostructuredArrow (tensor C) d) (tensorLeft v)]
    [‚àÄ (v : V) (d : C), Limits.PreservesColimitsOfShape
      (CostructuredArrow (tensor C) d) (tensorRight v)]
    [‚àÄ (v : V) (d : C), Limits.PreservesColimitsOfShape
      (CostructuredArrow (Functor.fromPUnit.{0} <| ùüô_ C) d) (tensorLeft v)]
    [‚àÄ (v : V) (d : C), Limits.PreservesColimitsOfShape
      (CostructuredArrow (Functor.fromPUnit.{0} <| ùüô_ C) d) (tensorRight v)]
    [‚àÄ (v : V) (d : C √ó C),
      Limits.PreservesColimitsOfShape
        (CostructuredArrow ((ùü≠ C).prod <| Functor.fromPUnit.{0} <| ùüô_ C) d)
        (tensorRight v)]
    [‚àÄ (v : V) (d : C √ó C),
      Limits.PreservesColimitsOfShape
        (CostructuredArrow ((tensor C).prod (ùü≠ C)) d) (tensorRight v)]

section asMon_

variable (F : C ‚•§ V) [F.LaxMonoidal]

instance mon_ClassOfLaxMonoidal : Mon_Class (mk F) where
  one := unitDesc <| Functor.LaxMonoidal.Œµ F
  mul :=
    tensorDesc <|
      { app x := Functor.LaxMonoidal.Œº F _ _
        naturality {x y} f := by
          simp [tensorHom_def] }
  one_mul := by
    ext1
    apply Functor.hom_ext_of_isLeftKanExtension
      (ùüô_ (C ‚äõ‚•§ V) ‚äó .mk F).functor (unitLeft (DayFunctor.mk F))
    ext
    dsimp
    simp only [Category.assoc, Œ∑_app_comp_whiskerRight_natTrans_app_tensor_assoc,
      externalProductBifunctor_obj_obj, Œ∑_comp_tensorDesc_app,
      ‚Üê comp_whiskerRight_assoc, ŒΩ_comp_unitDesc]
    rw [DayFunctor.ŒΩ_Œ∑_leftUnitor]
    simp
  mul_one := by
    ext1
    apply Functor.hom_ext_of_isLeftKanExtension
      (DayFunctor.mk F ‚äó ùüô_ (C ‚äõ‚•§ V)).functor (unitRight <| DayFunctor.mk F)
    ext
    dsimp
    simp only [Category.assoc, Œ∑_app_comp_whiskerLeft_natTrans_app_tensor_assoc,
      externalProductBifunctor_obj_obj, Œ∑_comp_tensorDesc_app,
      ‚Üê whiskerLeft_comp_assoc, ŒΩ_comp_unitDesc]
    rw [DayFunctor.ŒΩ_Œ∑_rightUnitor]
    simp
  mul_assoc := by
    ext1
    apply Functor.hom_ext_of_isLeftKanExtension
      ((mk F ‚äó mk F) ‚äó mk F).functor
        (Œ∑ (_ ‚äó _) _)
    letI :
      ((mk F ‚äó mk F).functor ‚ä† (mk F).functor).IsLeftKanExtension
        (ExternalProduct.extensionUnitLeft _ (Œ∑ _ _) _) :=
      isLeftKanExtensionExtensionUnitLeft (mk F) (mk F) (mk F).functor
    apply Functor.hom_ext_of_isLeftKanExtension
      ((DayFunctor.mk F ‚äó DayFunctor.mk F).functor ‚ä† (DayFunctor.mk F).functor)
        (ExternalProduct.extensionUnitLeft (mk F ‚äó mk F).functor (Œ∑ _ _) _)
    ext ‚ü®‚ü®x, y‚ü©, z‚ü©
    dsimp
    simp only [whiskerLeft_id, Category.comp_id,
      Œ∑_app_comp_whiskerRight_natTrans_app_tensor_assoc,
      externalProductBifunctor_obj_obj, Œ∑_comp_tensorDesc_app,
      ‚Üê comp_whiskerRight_assoc]
    rw [Œ∑_Œ∑_associator_hom_assoc]
    simp [‚Üê whiskerLeft_comp_assoc]

@[reassoc (attr := simp)]
lemma Œ∑_comp_mul (x y : C) :
    (Œ∑ (mk F) (mk F)).app (x, y) ‚â´
      (Mon_Class.mul (X := mk F)).natTrans.app (x ‚äó y) =
    Functor.LaxMonoidal.Œº F x y := by
  simp [Mon_Class.mul]

@[reassoc (attr := simp)]
lemma ŒΩ_comp_one :
    ŒΩ C V ‚â´ (Mon_Class.one (X := mk F)).natTrans.app (ùüô_ C) =
    Functor.LaxMonoidal.Œµ F := by
  simp [Mon_Class.one]

end asMon_

section toLaxMonoidal

open scoped Prod

variable (F : C ‚äõ‚•§ V) [Mon_Class F]

@[simps]
instance laxMonoidalOfMon_Class : F.functor.LaxMonoidal where
  Œº x y := (Œ∑ F F).app (x, y) ‚â´ (Mon_Class.mul (X := F)).natTrans.app (x ‚äó y)
  Œµ := ŒΩ C V ‚â´ (Mon_Class.one (X := F)).natTrans.app _
  associativity x y z := by
    haveI :=
      ((Œ∑ F F).app (x, y) ‚ñ∑ F.functor.obj z ‚â´
        (Œ∑ (F ‚äó F) F).app (x ‚äó y, z)) ‚â´=
        congrArg (¬∑.natTrans.app _) (Mon_Class.mul_assoc F)
    dsimp at this
    simpa using this =‚â´ F.functor.map (Œ±_ x y z).hom
  left_unitality x := by
    haveI := ((unitLeft F).app x) ‚â´=
      congrArg (¬∑.natTrans.app _) (Mon_Class.one_mul F)
    dsimp at this
    simpa using this.symm =‚â´ (F.functor.map (Œª_ x).hom)
  right_unitality x := by
    haveI := ((unitRight F).app x) ‚â´=
      congrArg (¬∑.natTrans.app _) (Mon_Class.mul_one F)
    dsimp at this
    simpa using this.symm =‚â´ F.functor.map (œÅ_ x).hom

end toLaxMonoidal

/-- Lax monoidal structures on `F.functor` correspond bijectively with
`Mon_Class` structures on `F`, realizing the slogan that "monoids for Day
convolutions correspond to lax monoidal functors". -/
def mon_ClassLaxMonoidalEquiv (F : C ‚äõ‚•§ V) :
    Mon_Class F ‚âÉ F.functor.LaxMonoidal where
  toFun _ := by infer_instance
  invFun _ := inferInstanceAs <| Mon_Class (mk F.functor)
  left_inv x := by
    ext1
    dsimp [Mon_Class.mul]
    apply tensor_hom_ext
    intro x y
    simp [externalProductBifunctor_obj_obj, Functor.comp_obj, tensor_obj,
      Œ∑_comp_tensorDesc_app]
  right_inv x := by
    ext1
    ¬∑ simp
    ¬∑ ext x x'
      simp [Mon_Class.mul]

end CategoryTheory.MonoidalCategory.DayFunctor

end
