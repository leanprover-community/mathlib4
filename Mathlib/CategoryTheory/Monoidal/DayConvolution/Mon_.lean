/-
Copyright (c) 2025 Robin Carlier. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robin Carlier
-/
import Mathlib.CategoryTheory.Monoidal.DayConvolution.DayFunctor
import Mathlib.CategoryTheory.Monoidal.Mon_

/-!
# Monoid objects internal to Day convolution

Let `C` and `V` be monoidal categories such that we
have a Day convolution monoidal structure on `C ‚äõ‚•§ V` (the
type alias `CategoryTheory.MonoidalCategory.DayFunctor` for
functors endowed with the Day convolution monoidal structure).

In this file, we show that given a lax monoidal functor `F : C ‚•§ V`,
there is a canonical monoid object structure on `F` when the
latter is interpreted as an object of `C ‚äõ‚•§ V`. Conversely, we
show that any such object admits a lax monoidal structure on their
underlying functor.
-/

noncomputable section

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace CategoryTheory.MonoidalCategory.DayFunctor
open scoped ExternalProduct DayFunctor
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {V : Type u‚ÇÇ} [Category.{v‚ÇÇ} V]
    [MonoidalCategory C] [MonoidalCategory V]

variable
    [‚àÄ (F G : C ‚•§ V),
      (tensor C).HasPointwiseLeftKanExtension (F ‚ä† G)]
    [(Functor.fromPUnit.{0} <| ùüô_ C).HasPointwiseLeftKanExtension
        (Functor.fromPUnit.{0} <| ùüô_ V)]
    [‚àÄ (v : V) (d : C), Limits.PreservesColimitsOfShape
      (CostructuredArrow (tensor C) d) (tensorLeft v)]
    [‚àÄ (v : V) (d : C), Limits.PreservesColimitsOfShape
      (CostructuredArrow (tensor C) d) (tensorRight v)]
    [‚àÄ (v : V) (d : C), Limits.PreservesColimitsOfShape
      (CostructuredArrow (Functor.fromPUnit <| ùüô_ C) d) (tensorLeft v)]
    [‚àÄ (v : V) (d : C), Limits.PreservesColimitsOfShape
      (CostructuredArrow (Functor.fromPUnit <| ùüô_ C) d) (tensorRight v)]
    [‚àÄ (v : V) (d : C √ó C),
      Limits.PreservesColimitsOfShape
        (CostructuredArrow ((ùü≠ C).prod <| Functor.fromPUnit.{0} <| ùüô_ C) d)
        (tensorRight v)]
    [‚àÄ (v : V) (d : C √ó C),
      Limits.PreservesColimitsOfShape
        (CostructuredArrow ((tensor C).prod (ùü≠ C)) d) (tensorRight v)]

section asMon_

variable (F : C ‚•§ V) [F.LaxMonoidal]

open LawfulDayConvolutionMonoidalCategoryStruct in
def mulOfLaxMonoidal :
    (DayFunctor.mk F) ‚äó (DayFunctor.mk F) ‚ü∂ (DayFunctor.mk F) :=
  tensorDesc <|
    { app x := Functor.LaxMonoidal.Œº F _ _
      naturality {x y} f := by
        simp [tensorHom_def] }

@[reassoc (attr := simp)]
lemma Œ∑_comp_mulOfLaxMonoidal (x y : C) :
    (Œ∑ (.mk F) (.mk F)).app (x, y) ‚â´
      (mulOfLaxMonoidal F).natTrans.app (x ‚äó y) =
    (Functor.LaxMonoidal.Œº F x y) := by
  simp [mulOfLaxMonoidal]

def unitOfLaxMonoidal : (ùüô_ (C ‚äõ‚•§ V)) ‚ü∂ (DayFunctor.mk F) :=
  unitDesc <| Functor.LaxMonoidal.Œµ F

@[reassoc (attr := simp)]
lemma ŒΩ_comp_unitOfLaxMonoidal :
    (ŒΩ C V) ‚â´ (unitOfLaxMonoidal F).natTrans.app (ùüô_ C) =
    Functor.LaxMonoidal.Œµ F := by
  simp [unitOfLaxMonoidal]

instance : Mon_Class (DayFunctor.mk F) where
  one := unitOfLaxMonoidal F
  mul := mulOfLaxMonoidal F
  one_mul := by
    rw [‚Üê cancel_epi (Œª_ (DayFunctor.mk F)).inv, Iso.inv_hom_id]

    
    -- apply tensor_hom_ext
    -- intro x y
    -- dsimp
    -- simp
  mul_one := by 
    sorry
  mul_assoc := by 
    sorry

end asMon_

section toLaxMonoidal

end toLaxMonoidal

end CategoryTheory.MonoidalCategory.DayFunctor

end
