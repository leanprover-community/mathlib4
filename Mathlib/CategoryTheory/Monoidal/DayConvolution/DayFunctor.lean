/-
Copyright (c) 2025 Robin Carlier. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robin Carlier
-/
import Mathlib.CategoryTheory.Monoidal.DayConvolution

/-!
# Day functors

In this file, given a monoidal category `C` and a monoidal category `V`,
we define a basic type synonym `DayFunctor C V` (denoted `C ‚äõ‚•§ D`)
for the category `C ‚•§ V` and endow it with the monoidal structure coming
from Day convolution. Such a setup is necessary as by default,
the `MonoidalCategory` instance on `C ‚•§ V` is the "pointwise" one,
where the tensor product of `F` and `G` is the functor `x ‚Ü¶ F.obj x ‚äó G.obj x`.

## TODOs
- Given a `LawfulDayConvolutionMonoidalCategoryStruct C V D`, show that
Œπ induce a monoidal functor `D ‚•§ (C ‚äõ‚•§ V)`.
- Specialize to the case `V := Type _`, and prove a universal property stating
that for every monoidal category `W` with suitable colimits,
colimit-preserving monoidal functors `(C·µí·µñ ‚äõ‚•§ Type u) ‚•§ W` are equivalent to
to monoidal functors `C ‚•§ W`. Show that the Yoneda embedding is monoidal.
-/

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace CategoryTheory.MonoidalCategory
open scoped ExternalProduct

noncomputable section

/-- `DayFunctor C V` is a type synonym for `C ‚•§ V`, implemented as a one-field
structure. -/
structure DayFunctor
    (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (V : Type u‚ÇÇ) [Category.{v‚ÇÇ} V]
    [MonoidalCategory C] [MonoidalCategory V] where
  /-- the underlying functor. -/
  functor : C ‚•§ V

namespace DayFunctor

/-- Notation for `DayFunctor`. -/
scoped infixr:26 " ‚äõ‚•§ " => DayFunctor

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {V : Type u‚ÇÇ} [Category.{v‚ÇÇ} V]
    [MonoidalCategory C] [MonoidalCategory V]

@[simp]
lemma mk_functor (F : C ‚•§ V) : (mk F).functor = F := rfl

@[simp]
lemma functor_mk (F : C ‚äõ‚•§ V) : mk (F.functor) = F := rfl

/-- Morphisms of Day functors are natural transformations of the underlying
functors. -/
structure Hom (F G : C ‚äõ‚•§ V) where
  /- the underlying natural transformation -/
  natTrans : F.functor ‚ü∂ G.functor

@[simps id_natTrans comp_natTrans]
instance : Category (C ‚äõ‚•§ V) where
  Hom := Hom
  id x := .mk <| ùüô x.functor
  comp Œ± Œ≤ := .mk <| Œ±.natTrans ‚â´ Œ≤.natTrans

@[ext]
lemma hom_ext {F G : C ‚äõ‚•§ V} {Œ± Œ≤ : F ‚ü∂ G} (h : Œ±.natTrans = Œ≤.natTrans) :
    Œ± = Œ≤ := by
  cases Œ±
  cases Œ≤
  grind

variable (C V) in
/-- The tautological equivalence of categories between `C ‚•§ V` and `C ‚äõ‚•§ V`. -/
@[simps! functor_obj functor_map inverse_obj_functor inverse_map_natTrans
  unitIso_hom_app unitIso_inv_app counitIso_hom_app counitIso_inv_app]
def equiv : (C ‚äõ‚•§ V) ‚âå (C ‚•§ V) where
  functor :=
    { obj F := F.functor
      map Œ± := Œ±.natTrans }
  inverse :=
    { obj F := .mk F
      map Œ± := .mk Œ± }
  unitIso := .refl _
  counitIso := .refl _

variable
    [hasDayConvolution : ‚àÄ (F G : C ‚•§ V),
      (tensor C).HasPointwiseLeftKanExtension (F ‚ä† G)]
    [hasDayConvolutionUnit :
      (Functor.fromPUnit.{0} <| ùüô_ C).HasPointwiseLeftKanExtension
        (Functor.fromPUnit.{0} <| ùüô_ V)]
    [‚àÄ (v : V) (d : C), Limits.PreservesColimitsOfShape
      (CostructuredArrow (tensor C) d) (tensorLeft v)]
    [‚àÄ (v : V) (d : C), Limits.PreservesColimitsOfShape
      (CostructuredArrow (tensor C) d) (tensorRight v)]
    [‚àÄ (v : V) (d : C), Limits.PreservesColimitsOfShape
      (CostructuredArrow (Functor.fromPUnit <| ùüô_ C) d) (tensorLeft v)]
    [‚àÄ (v : V) (d : C), Limits.PreservesColimitsOfShape
      (CostructuredArrow (Functor.fromPUnit <| ùüô_ C) d) (tensorRight v)]
    [‚àÄ (v : V) (d : C √ó C),
      Limits.PreservesColimitsOfShape
        (CostructuredArrow ((ùü≠ C).prod <| Functor.fromPUnit.{0} <| ùüô_ C) d)
        (tensorRight v)]
    [‚àÄ (v : V) (d : C √ó C),
      Limits.PreservesColimitsOfShape
        (CostructuredArrow ((tensor C).prod (ùü≠ C)) d) (tensorRight v)]

instance : MonoidalCategory (C ‚äõ‚•§ V) :=
  monoidalOfHasDayConvolutions
    (equiv C V).functor
    (equiv C V).fullyFaithfulFunctor
    (fun _ _ => ‚ü®_, ‚ü®equiv C V|>.counitIso.app _‚ü©‚ü©)
    (‚ü®_, ‚ü®equiv C V|>.counitIso.app _‚ü©‚ü©)

@[simps! Œπ_obj Œπ_map]
instance : LawfulDayConvolutionMonoidalCategoryStruct C V (C ‚äõ‚•§ V) :=
  lawfulDayConvolutionMonoidalCategoryStructOfHasDayConvolutions
    (equiv C V).functor
    (equiv C V).fullyFaithfulFunctor
    (fun _ _ => ‚ü®_, ‚ü®equiv C V|>.counitIso.app _‚ü©‚ü©)
    (‚ü®_, ‚ü®equiv C V|>.counitIso.app _‚ü©‚ü©)

/-- A shorthand for the unit transformation exhibiting `(F ‚äó G).functor` as a
left Kan extension of `F ‚ä† G` along `tensor C`. -/
abbrev Œ∑ (F G : C ‚äõ‚•§ V) :
    F.functor ‚ä† G.functor ‚ü∂ (tensor C) ‚ãô (F ‚äó G).functor :=
  LawfulDayConvolutionMonoidalCategoryStruct.convolutionExtensionUnit
    C V F G

open LawfulDayConvolutionMonoidalCategoryStruct in
instance (F G : C ‚äõ‚•§ V) : (F ‚äó G).functor.IsLeftKanExtension
    (convolutionExtensionUnit C V F G) :=
  (isPointwiseLeftKanExtensionConvolutionExtensionUnit F G).isLeftKanExtension

open LawfulDayConvolutionMonoidalCategoryStruct in
theorem hom_tensor_ext {F G H : C ‚äõ‚•§ V} {Œ± Œ≤ : F ‚äó G ‚ü∂ H}
    (h : ‚àÄ (x y : C),
      (Œ∑ F G).app (x, y) ‚â´ Œ±.natTrans.app (x ‚äó y) =
      (Œ∑ F G).app (x, y) ‚â´ Œ≤.natTrans.app (x ‚äó y)) :
    Œ± = Œ≤ := by
  ext : 1
  apply Functor.homEquivOfIsLeftKanExtension
    (F ‚äó G).functor (convolutionExtensionUnit C V F G) _|>.injective
  ext ‚ü®x, y‚ü©
  exact h x y

open LawfulDayConvolutionMonoidalCategoryStruct
/-- An abstract isomorphism between `(F ‚äó G).functor` and the generic pointwise
left Kan extension of `F.functor ‚ä† G.functor` along the -/
def isoPointwiseLeftKanExtension (F G : C ‚äõ‚•§ V) :
    (F ‚äó G).functor ‚âÖ
    (tensor C).pointwiseLeftKanExtension (F.functor ‚ä† G.functor) :=
  Functor.leftKanExtensionUnique
    (F ‚äó G).functor
    (convolutionExtensionUnit C V F G)
    _
    ((tensor C).pointwiseLeftKanExtensionUnit (F.functor ‚ä† G.functor))

@[simp]
lemma Œ∑_comp_isoPointwiseLeftKanExtension_hom (F G : C ‚äõ‚•§ V) (x y : C) :
    (Œ∑ F G).app (x, y) ‚â´ (isoPointwiseLeftKanExtension F G).hom.app (x ‚äó y) =
    Limits.colimit.Œπ
      ((CostructuredArrow.proj (tensor C) (x ‚äó y)) ‚ãô F.functor ‚ä† G.functor)
        (.mk (Y := (x, y)) <| ùüô (x ‚äó y)) := by
  simpa [Œ∑, isoPointwiseLeftKanExtension] using
    Functor.descOfIsLeftKanExtension_fac_app
      (F ‚äó G).functor
      (convolutionExtensionUnit C V F G)
      _
      ((tensor C).pointwiseLeftKanExtensionUnit (F.functor ‚ä† G.functor))
      (x, y)

@[simp]
lemma Œπ_comp_isoPointwiseLeftKanExtension_inv (F G : C ‚äõ‚•§ V) (x y : C) :
    Limits.colimit.Œπ
      ((CostructuredArrow.proj (tensor C) (x ‚äó y)) ‚ãô F.functor ‚ä† G.functor)
        (.mk (Y := (x, y)) <| ùüô (x ‚äó y)) ‚â´
      (isoPointwiseLeftKanExtension F G).inv.app (x ‚äó y) =
    (Œ∑ F G).app (x, y) := by
  simp [Œ∑, isoPointwiseLeftKanExtension]

end DayFunctor

end

end CategoryTheory.MonoidalCategory
