/-
Copyright (c) 2018 Michael Jendrusch. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Jendrusch, Kim Morrison
-/
import Mathlib.CategoryTheory.Monoidal.Types.Basic
import Mathlib.CategoryTheory.Monoidal.CoherenceLemmas

/-!
# `(ùüô_ C ‚ü∂ -)` is a lax monoidal functor to `Type`
-/

universe v u

namespace CategoryTheory

open Opposite MonoidalCategory

instance (C : Type u) [Category.{v} C] [MonoidalCategory C] :
    (coyoneda.obj (op (ùüô_ C))).LaxMonoidal :=
  Functor.LaxMonoidal.ofTensorHom
    (Œµ' := fun _ => ùüô _)
    (Œº' := fun X Y p ‚Ü¶ (Œª_ (ùüô_ C)).inv ‚â´ (p.1 ‚äó p.2))
    (Œº'_natural := by aesop_cat)
    (associativity' := fun X Y Z => by
      ext ‚ü®‚ü®f, g‚ü©, h‚ü©; dsimp at f g h
      dsimp; simp only [Iso.cancel_iso_inv_left, Category.assoc]
      conv_lhs =>
        rw [‚Üê Category.id_comp h, tensor_comp, Category.assoc, associator_naturality,
          ‚Üê Category.assoc, unitors_inv_equal, tensorHom_id, triangle_assoc_comp_right_inv]
      conv_rhs => rw [‚Üê Category.id_comp f, tensor_comp]
      simp)
    (left_unitality' := by
      intros
      ext ‚ü®‚ü®‚ü©, f‚ü©; dsimp at f
      dsimp
      simp)
    (right_unitality' := fun X => by
      ext ‚ü®f, ‚ü®‚ü©‚ü©; dsimp at f
      dsimp
      simp [unitors_inv_equal])

end CategoryTheory
