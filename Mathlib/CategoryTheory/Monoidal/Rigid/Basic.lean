/-
Copyright (c) 2021 Jakob von Raumer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jakob von Raumer

! This file was ported from Lean 3 source module category_theory.monoidal.rigid.basic
! leanprover-community/mathlib commit 3d7987cda72abc473c7cdbbb075170e9ac620042
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.CategoryTheory.Monoidal.CoherenceLemmas
import Mathbin.CategoryTheory.Closed.Monoidal
import Mathbin.Tactic.ApplyFun

/-!
# Rigid (autonomous) monoidal categories

This file defines rigid (autonomous) monoidal categories and the necessary theory about
exact pairings and duals.

## Main definitions

* `exact_pairing` of two objects of a monoidal category
* Type classes `has_left_dual` and `has_right_dual` that capture that a pairing exists
* The `right_adjoint_mate f` as a morphism `f·òÅ : Y·òÅ ‚ü∂ X·òÅ` for a morphism `f : X ‚ü∂ Y`
* The classes of `right_rigid_category`, `left_rigid_category` and `rigid_category`

## Main statements

* `comp_right_adjoint_mate`: The adjoint mates of the composition is the composition of
  adjoint mates.

## Notations

* `Œ∑_` and `Œµ_` denote the coevaluation and evaluation morphism of an exact pairing.
* `X·òÅ` and `·òÅX` denote the right and left dual of an object, as well as the adjoint
  mate of a morphism.

## Future work

* Show that `X ‚äó Y` and `Y·òÅ ‚äó X·òÅ` form an exact pairing.
* Show that the left adjoint mate of the right adjoint mate of a morphism is the morphism itself.
* Simplify constructions in the case where a symmetry or braiding is present.
* Show that `·òÅ` gives an equivalence of categories `C ‚âÖ (C·µí·µñ)·¥π·µí·µñ`.
* Define pivotal categories (rigid categories equipped with a natural isomorphism `·òÅ·òÅ ‚âÖ ùüô C`).

## Notes

Although we construct the adjunction `tensor_left Y ‚ä£ tensor_left X` from `exact_pairing X Y`,
this is not a bijective correspondence.
I think the correct statement is that `tensor_left Y` and `tensor_left X` are
module endofunctors of `C` as a right `C` module category,
and `exact_pairing X Y` is in bijection with adjunctions compatible with this right `C` action.

## References

* <https://ncatlab.org/nlab/show/rigid+monoidal+category>

## Tags

rigid category, monoidal category

-/


open CategoryTheory

universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ

noncomputable section

namespace CategoryTheory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory C]

/- ./././Mathport/Syntax/Translate/Command.lean:393:30: infer kinds are unsupported in Lean 4: #[`coevaluation] [] -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Command.lean:393:30: infer kinds are unsupported in Lean 4: #[`evaluation] [] -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Command.lean:393:30: infer kinds are unsupported in Lean 4: #[`coevaluation_evaluation'] [] -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Command.lean:393:30: infer kinds are unsupported in Lean 4: #[`evaluation_coevaluation'] [] -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- An exact pairing is a pair of objects `X Y : C` which admit
  a coevaluation and evaluation morphism which fulfill two triangle equalities. -/
class ExactPairing (X Y : C) where
  coevaluation : ùüô_ C ‚ü∂ X ‚äó Y
  evaluation : Y ‚äó X ‚ü∂ ùüô_ C
  coevaluation_evaluation' :
    (ùüô Y ‚äó coevaluation) ‚â´ (Œ±_ _ _ _).inv ‚â´ (evaluation ‚äó ùüô Y) = (œÅ_ Y).Hom ‚â´ (Œª_ Y).inv := by
    obviously
  evaluation_coevaluation' :
    (coevaluation ‚äó ùüô X) ‚â´ (Œ±_ _ _ _).Hom ‚â´ (ùüô X ‚äó evaluation) = (Œª_ X).Hom ‚â´ (œÅ_ X).inv := by
    obviously
#align category_theory.exact_pairing CategoryTheory.ExactPairing

open ExactPairing

-- mathport name: exprŒ∑_
notation "Œ∑_" => ExactPairing.coevaluation

-- mathport name: exprŒµ_
notation "Œµ_" => ExactPairing.evaluation

restate_axiom coevaluation_evaluation'

attribute [simp, reassoc] exact_pairing.coevaluation_evaluation

restate_axiom evaluation_coevaluation'

attribute [simp, reassoc] exact_pairing.evaluation_coevaluation

instance exactPairingUnit : ExactPairing (ùüô_ C) (ùüô_ C)
    where
  coevaluation := (œÅ_ _).inv
  evaluation := (œÅ_ _).Hom
  coevaluation_evaluation' := by coherence
  evaluation_coevaluation' := by coherence
#align category_theory.exact_pairing_unit CategoryTheory.exactPairingUnit

/-- A class of objects which have a right dual. -/
class HasRightDual (X : C) where
  rightDual : C
  [exact : ExactPairing X right_dual]
#align category_theory.has_right_dual CategoryTheory.HasRightDual

/-- A class of objects with have a left dual. -/
class HasLeftDual (Y : C) where
  leftDual : C
  [exact : ExactPairing left_dual Y]
#align category_theory.has_left_dual CategoryTheory.HasLeftDual

attribute [instance] has_right_dual.exact

attribute [instance] has_left_dual.exact

open ExactPairing HasRightDual HasLeftDual MonoidalCategory

-- mathport name: left_dual
prefix:1024 "·òÅ" => leftDual

-- mathport name: right_dual
postfix:1024 "·òÅ" => rightDual

instance hasRightDualUnit : HasRightDual (ùüô_ C) where rightDual := ùüô_ C
#align category_theory.has_right_dual_unit CategoryTheory.hasRightDualUnit

instance hasLeftDualUnit : HasLeftDual (ùüô_ C) where leftDual := ùüô_ C
#align category_theory.has_left_dual_unit CategoryTheory.hasLeftDualUnit

instance hasRightDualLeftDual {X : C} [HasLeftDual X] : HasRightDual ·òÅX where rightDual := X
#align category_theory.has_right_dual_left_dual CategoryTheory.hasRightDualLeftDual

instance hasLeftDualRightDual {X : C} [HasRightDual X] : HasLeftDual X·òÅ where leftDual := X
#align category_theory.has_left_dual_right_dual CategoryTheory.hasLeftDualRightDual

@[simp]
theorem leftDual_rightDual {X : C} [HasRightDual X] : ·òÅX·òÅ = X :=
  rfl
#align category_theory.left_dual_right_dual CategoryTheory.leftDual_rightDual

@[simp]
theorem rightDual_leftDual {X : C} [HasLeftDual X] : (·òÅX)·òÅ = X :=
  rfl
#align category_theory.right_dual_left_dual CategoryTheory.rightDual_leftDual

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- The right adjoint mate `f·òÅ : X·òÅ ‚ü∂ Y·òÅ` of a morphism `f : X ‚ü∂ Y`. -/
def rightAdjointMate {X Y : C} [HasRightDual X] [HasRightDual Y] (f : X ‚ü∂ Y) : Y·òÅ ‚ü∂ X·òÅ :=
  (œÅ_ _).inv ‚â´ (ùüô _ ‚äó Œ∑_ _ _) ‚â´ (ùüô _ ‚äó f ‚äó ùüô _) ‚â´ (Œ±_ _ _ _).inv ‚â´ (Œµ_ _ _ ‚äó ùüô _) ‚â´ (Œª_ _).Hom
#align category_theory.right_adjoint_mate CategoryTheory.rightAdjointMate

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- The left adjoint mate `·òÅf : ·òÅY ‚ü∂ ·òÅX` of a morphism `f : X ‚ü∂ Y`. -/
def leftAdjointMate {X Y : C} [HasLeftDual X] [HasLeftDual Y] (f : X ‚ü∂ Y) : ·òÅY ‚ü∂ ·òÅX :=
  (Œª_ _).inv ‚â´ (Œ∑_ (·òÅX) X ‚äó ùüô _) ‚â´ ((ùüô _ ‚äó f) ‚äó ùüô _) ‚â´ (Œ±_ _ _ _).Hom ‚â´ (ùüô _ ‚äó Œµ_ _ _) ‚â´ (œÅ_ _).Hom
#align category_theory.left_adjoint_mate CategoryTheory.leftAdjointMate

-- mathport name: right_adjoint_mate
notation f "·òÅ" => rightAdjointMate f

-- mathport name: left_adjoint_mate
notation "·òÅ" f => leftAdjointMate f

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
@[simp]
theorem rightAdjointMate_id {X : C} [HasRightDual X] : ùüô X·òÅ = ùüô (X·òÅ) := by
  simp only [right_adjoint_mate, monoidal_category.tensor_id, category.id_comp,
    coevaluation_evaluation_assoc, category.comp_id, iso.inv_hom_id]
#align category_theory.right_adjoint_mate_id CategoryTheory.rightAdjointMate_id

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
@[simp]
theorem leftAdjointMate_id {X : C} [HasLeftDual X] : (·òÅùüô X) = ùüô (·òÅX) := by
  simp only [left_adjoint_mate, monoidal_category.tensor_id, category.id_comp,
    evaluation_coevaluation_assoc, category.comp_id, iso.inv_hom_id]
#align category_theory.left_adjoint_mate_id CategoryTheory.leftAdjointMate_id

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem rightAdjointMate_comp {X Y Z : C} [HasRightDual X] [HasRightDual Y] {f : X ‚ü∂ Y}
    {g : X·òÅ ‚ü∂ Z} :
    f·òÅ ‚â´ g =
      (œÅ_ (Y·òÅ)).inv ‚â´
        (ùüô _ ‚äó Œ∑_ X (X·òÅ)) ‚â´ (ùüô _ ‚äó f ‚äó g) ‚â´ (Œ±_ (Y·òÅ) Y Z).inv ‚â´ (Œµ_ Y (Y·òÅ) ‚äó ùüô _) ‚â´ (Œª_ Z).Hom :=
  by
  dsimp only [right_adjoint_mate]
  rw [category.assoc, category.assoc, associator_inv_naturality_assoc,
    associator_inv_naturality_assoc, ‚Üê tensor_id_comp_id_tensor g, category.assoc, category.assoc,
    category.assoc, category.assoc, id_tensor_comp_tensor_id_assoc, ‚Üê left_unitor_naturality,
    tensor_id_comp_id_tensor_assoc]
#align category_theory.right_adjoint_mate_comp CategoryTheory.rightAdjointMate_comp

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem leftAdjointMate_comp {X Y Z : C} [HasLeftDual X] [HasLeftDual Y] {f : X ‚ü∂ Y}
    {g : (·òÅX) ‚ü∂ Z} :
    (·òÅf) ‚â´ g =
      (Œª_ _).inv ‚â´
        (Œ∑_ (·òÅX) X ‚äó ùüô _) ‚â´ ((g ‚äó f) ‚äó ùüô _) ‚â´ (Œ±_ _ _ _).Hom ‚â´ (ùüô _ ‚äó Œµ_ _ _) ‚â´ (œÅ_ _).Hom :=
  by
  dsimp only [left_adjoint_mate]
  rw [category.assoc, category.assoc, associator_naturality_assoc, associator_naturality_assoc, ‚Üê
    id_tensor_comp_tensor_id _ g, category.assoc, category.assoc, category.assoc, category.assoc,
    tensor_id_comp_id_tensor_assoc, ‚Üê right_unitor_naturality, id_tensor_comp_tensor_id_assoc]
#align category_theory.left_adjoint_mate_comp CategoryTheory.leftAdjointMate_comp

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- The composition of right adjoint mates is the adjoint mate of the composition. -/
@[reassoc]
theorem comp_rightAdjointMate {X Y Z : C} [HasRightDual X] [HasRightDual Y] [HasRightDual Z]
    {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} : (f ‚â´ g)·òÅ = g·òÅ ‚â´ f·òÅ :=
  by
  rw [right_adjoint_mate_comp]
  simp only [right_adjoint_mate, comp_tensor_id, iso.cancel_iso_inv_left, id_tensor_comp,
    category.assoc]
  symm; iterate 5 trans; rw [‚Üê category.id_comp g, tensor_comp]
  rw [‚Üê category.assoc]
  symm; iterate 2 trans; rw [‚Üê category.assoc]; apply eq_whisker
  repeat' rw [‚Üê id_tensor_comp]; congr 1
  rw [‚Üê id_tensor_comp_tensor_id (Œª_ (X·òÅ)).Hom g, id_tensor_right_unitor_inv, category.assoc,
    category.assoc, right_unitor_inv_naturality_assoc, ‚Üê associator_naturality_assoc, tensor_id,
    tensor_id_comp_id_tensor_assoc, ‚Üê associator_naturality_assoc]
  slice_rhs 2 3 =>
    rw [‚Üê tensor_comp, tensor_id, category.comp_id, ‚Üê category.id_comp (Œ∑_ Y (Y·òÅ)), tensor_comp]
  rw [‚Üê id_tensor_comp_tensor_id _ (Œ∑_ Y (Y·òÅ)), ‚Üê tensor_id]
  repeat' rw [category.assoc]
  rw [pentagon_hom_inv_assoc, ‚Üê associator_naturality_assoc, associator_inv_naturality_assoc]
  slice_rhs 5 7 => rw [‚Üê comp_tensor_id, ‚Üê comp_tensor_id, evaluation_coevaluation, comp_tensor_id]
  rw [associator_inv_naturality_assoc]
  slice_rhs 4 5 => rw [‚Üê tensor_comp, left_unitor_naturality, tensor_comp]
  repeat' rw [category.assoc]
  rw [triangle_assoc_comp_right_inv_assoc, ‚Üê left_unitor_tensor_assoc, left_unitor_naturality_assoc,
    unitors_equal, ‚Üê category.assoc, ‚Üê category.assoc]
  simp
#align category_theory.comp_right_adjoint_mate CategoryTheory.comp_rightAdjointMate

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- The composition of left adjoint mates is the adjoint mate of the composition. -/
@[reassoc]
theorem comp_leftAdjointMate {X Y Z : C} [HasLeftDual X] [HasLeftDual Y] [HasLeftDual Z] {f : X ‚ü∂ Y}
    {g : Y ‚ü∂ Z} : (·òÅf ‚â´ g) = (·òÅg) ‚â´ ·òÅf :=
  by
  rw [left_adjoint_mate_comp]
  simp only [left_adjoint_mate, id_tensor_comp, iso.cancel_iso_inv_left, comp_tensor_id,
    category.assoc]
  symm; iterate 5 trans; rw [‚Üê category.id_comp g, tensor_comp]
  rw [‚Üê category.assoc]
  symm; iterate 2 trans; rw [‚Üê category.assoc]; apply eq_whisker
  repeat' rw [‚Üê comp_tensor_id]; congr 1
  rw [‚Üê tensor_id_comp_id_tensor g (œÅ_ (·òÅX)).Hom, left_unitor_inv_tensor_id, category.assoc,
    category.assoc, left_unitor_inv_naturality_assoc, ‚Üê associator_inv_naturality_assoc, tensor_id,
    id_tensor_comp_tensor_id_assoc, ‚Üê associator_inv_naturality_assoc]
  slice_rhs 2 3 =>
    rw [‚Üê tensor_comp, tensor_id, category.comp_id, ‚Üê category.id_comp (Œ∑_ (·òÅY) Y), tensor_comp]
  rw [‚Üê tensor_id_comp_id_tensor (Œ∑_ (·òÅY) Y), ‚Üê tensor_id]
  repeat' rw [category.assoc]
  rw [pentagon_inv_hom_assoc, ‚Üê associator_inv_naturality_assoc, associator_naturality_assoc]
  slice_rhs 5 7 => rw [‚Üê id_tensor_comp, ‚Üê id_tensor_comp, coevaluation_evaluation, id_tensor_comp]
  rw [associator_naturality_assoc]
  slice_rhs 4 5 => rw [‚Üê tensor_comp, right_unitor_naturality, tensor_comp]
  repeat' rw [category.assoc]
  rw [triangle_assoc_comp_left_inv_assoc, ‚Üê right_unitor_tensor_assoc,
    right_unitor_naturality_assoc, ‚Üê unitors_equal, ‚Üê category.assoc, ‚Üê category.assoc]
  simp
#align category_theory.comp_left_adjoint_mate CategoryTheory.comp_leftAdjointMate

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- Given an exact pairing on `Y Y'`,
we get a bijection on hom-sets `(Y' ‚äó X ‚ü∂ Z) ‚âÉ (X ‚ü∂ Y ‚äó Z)`
by "pulling the string on the left" up or down.

This gives the adjunction `tensor_left_adjunction Y Y' : tensor_left Y' ‚ä£ tensor_left Y`.

This adjunction is often referred to as "Frobenius reciprocity" in the
fusion categories / planar algebras / subfactors literature.
-/
def tensorLeftHomEquiv (X Y Y' Z : C) [ExactPairing Y Y'] : (Y' ‚äó X ‚ü∂ Z) ‚âÉ (X ‚ü∂ Y ‚äó Z)
    where
  toFun f := (Œª_ _).inv ‚â´ (Œ∑_ _ _ ‚äó ùüô _) ‚â´ (Œ±_ _ _ _).Hom ‚â´ (ùüô _ ‚äó f)
  invFun f := (ùüô Y' ‚äó f) ‚â´ (Œ±_ _ _ _).inv ‚â´ (Œµ_ _ _ ‚äó ùüô _) ‚â´ (Œª_ _).Hom
  left_inv f := by
    dsimp
    simp only [id_tensor_comp]
    slice_lhs 4 5 => rw [associator_inv_naturality]
    slice_lhs 5 6 => rw [tensor_id, id_tensor_comp_tensor_id, ‚Üê tensor_id_comp_id_tensor]
    slice_lhs 2 5 => simp only [‚Üê tensor_id, associator_inv_conjugation]
    have c :
      (Œ±_ Y' (Y ‚äó Y') X).Hom ‚â´
          (ùüô Y' ‚äó (Œ±_ Y Y' X).Hom) ‚â´ (Œ±_ Y' Y (Y' ‚äó X)).inv ‚â´ (Œ±_ (Y' ‚äó Y) Y' X).inv =
        (Œ±_ _ _ _).inv ‚äó ùüô _
    pure_coherence
    slice_lhs 4 7 => rw [c]
    slice_lhs 3 5 => rw [‚Üê comp_tensor_id, ‚Üê comp_tensor_id, coevaluation_evaluation]
    simp only [left_unitor_conjugation]
    coherence
  right_inv f := by
    dsimp
    simp only [id_tensor_comp]
    slice_lhs 3 4 => rw [‚Üê associator_naturality]
    slice_lhs 2 3 => rw [tensor_id, tensor_id_comp_id_tensor, ‚Üê id_tensor_comp_tensor_id]
    slice_lhs 3 6 => simp only [‚Üê tensor_id, associator_inv_conjugation]
    have c :
      (Œ±_ (Y ‚äó Y') Y Z).Hom ‚â´
          (Œ±_ Y Y' (Y ‚äó Z)).Hom ‚â´ (ùüô Y ‚äó (Œ±_ Y' Y Z).inv) ‚â´ (Œ±_ Y (Y' ‚äó Y) Z).inv =
        (Œ±_ _ _ _).Hom ‚äó ùüô Z
    pure_coherence
    slice_lhs 5 8 => rw [c]
    slice_lhs 4 6 => rw [‚Üê comp_tensor_id, ‚Üê comp_tensor_id, evaluation_coevaluation]
    simp only [left_unitor_conjugation]
    coherence
#align category_theory.tensor_left_hom_equiv CategoryTheory.tensorLeftHomEquiv

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- Given an exact pairing on `Y Y'`,
we get a bijection on hom-sets `(X ‚äó Y ‚ü∂ Z) ‚âÉ (X ‚ü∂ Z ‚äó Y')`
by "pulling the string on the right" up or down.
-/
def tensorRightHomEquiv (X Y Y' Z : C) [ExactPairing Y Y'] : (X ‚äó Y ‚ü∂ Z) ‚âÉ (X ‚ü∂ Z ‚äó Y')
    where
  toFun f := (œÅ_ _).inv ‚â´ (ùüô _ ‚äó Œ∑_ _ _) ‚â´ (Œ±_ _ _ _).inv ‚â´ (f ‚äó ùüô _)
  invFun f := (f ‚äó ùüô _) ‚â´ (Œ±_ _ _ _).Hom ‚â´ (ùüô _ ‚äó Œµ_ _ _) ‚â´ (œÅ_ _).Hom
  left_inv f := by
    dsimp
    simp only [comp_tensor_id]
    slice_lhs 4 5 => rw [associator_naturality]
    slice_lhs 5 6 => rw [tensor_id, tensor_id_comp_id_tensor, ‚Üê id_tensor_comp_tensor_id]
    slice_lhs 2 5 => simp only [‚Üê tensor_id, associator_conjugation]
    have c :
      (Œ±_ X (Y ‚äó Y') Y).inv ‚â´
          ((Œ±_ X Y Y').inv ‚äó ùüô Y) ‚â´ (Œ±_ (X ‚äó Y) Y' Y).Hom ‚â´ (Œ±_ X Y (Y' ‚äó Y)).Hom =
        ùüô _ ‚äó (Œ±_ _ _ _).Hom
    pure_coherence
    slice_lhs 4 7 => rw [c]
    slice_lhs 3 5 => rw [‚Üê id_tensor_comp, ‚Üê id_tensor_comp, evaluation_coevaluation]
    simp only [right_unitor_conjugation]
    coherence
  right_inv f := by
    dsimp
    simp only [comp_tensor_id]
    slice_lhs 3 4 => rw [‚Üê associator_inv_naturality]
    slice_lhs 2 3 => rw [tensor_id, id_tensor_comp_tensor_id, ‚Üê tensor_id_comp_id_tensor]
    slice_lhs 3 6 => simp only [‚Üê tensor_id, associator_conjugation]
    have c :
      (Œ±_ Z Y' (Y ‚äó Y')).inv ‚â´
          (Œ±_ (Z ‚äó Y') Y Y').inv ‚â´ ((Œ±_ Z Y' Y).Hom ‚äó ùüô Y') ‚â´ (Œ±_ Z (Y' ‚äó Y) Y').Hom =
        ùüô _ ‚äó (Œ±_ _ _ _).inv
    pure_coherence
    slice_lhs 5 8 => rw [c]
    slice_lhs 4 6 => rw [‚Üê id_tensor_comp, ‚Üê id_tensor_comp, coevaluation_evaluation]
    simp only [right_unitor_conjugation]
    coherence
#align category_theory.tensor_right_hom_equiv CategoryTheory.tensorRightHomEquiv

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem tensorLeftHomEquiv_naturality {X Y Y' Z Z' : C} [ExactPairing Y Y'] (f : Y' ‚äó X ‚ü∂ Z)
    (g : Z ‚ü∂ Z') :
    (tensorLeftHomEquiv X Y Y' Z') (f ‚â´ g) = (tensorLeftHomEquiv X Y Y' Z) f ‚â´ (ùüô Y ‚äó g) :=
  by
  dsimp [tensor_left_hom_equiv]
  simp only [id_tensor_comp, category.assoc]
#align category_theory.tensor_left_hom_equiv_naturality CategoryTheory.tensorLeftHomEquiv_naturality

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem tensorLeftHomEquiv_symm_naturality {X X' Y Y' Z : C} [ExactPairing Y Y'] (f : X ‚ü∂ X')
    (g : X' ‚ü∂ Y ‚äó Z) :
    (tensorLeftHomEquiv X Y Y' Z).symm (f ‚â´ g) =
      (ùüô _ ‚äó f) ‚â´ (tensorLeftHomEquiv X' Y Y' Z).symm g :=
  by
  dsimp [tensor_left_hom_equiv]
  simp only [id_tensor_comp, category.assoc]
#align category_theory.tensor_left_hom_equiv_symm_naturality CategoryTheory.tensorLeftHomEquiv_symm_naturality

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem tensorRightHomEquiv_naturality {X Y Y' Z Z' : C} [ExactPairing Y Y'] (f : X ‚äó Y ‚ü∂ Z)
    (g : Z ‚ü∂ Z') :
    (tensorRightHomEquiv X Y Y' Z') (f ‚â´ g) = (tensorRightHomEquiv X Y Y' Z) f ‚â´ (g ‚äó ùüô Y') :=
  by
  dsimp [tensor_right_hom_equiv]
  simp only [comp_tensor_id, category.assoc]
#align category_theory.tensor_right_hom_equiv_naturality CategoryTheory.tensorRightHomEquiv_naturality

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem tensorRightHomEquiv_symm_naturality {X X' Y Y' Z : C} [ExactPairing Y Y'] (f : X ‚ü∂ X')
    (g : X' ‚ü∂ Z ‚äó Y') :
    (tensorRightHomEquiv X Y Y' Z).symm (f ‚â´ g) =
      (f ‚äó ùüô Y) ‚â´ (tensorRightHomEquiv X' Y Y' Z).symm g :=
  by
  dsimp [tensor_right_hom_equiv]
  simp only [comp_tensor_id, category.assoc]
#align category_theory.tensor_right_hom_equiv_symm_naturality CategoryTheory.tensorRightHomEquiv_symm_naturality

/-- If `Y Y'` have an exact pairing,
then the functor `tensor_left Y'` is left adjoint to `tensor_left Y`.
-/
def tensorLeftAdjunction (Y Y' : C) [ExactPairing Y Y'] : tensorLeft Y' ‚ä£ tensorLeft Y :=
  Adjunction.mkOfHomEquiv
    { homEquiv := fun X Z => tensorLeftHomEquiv X Y Y' Z
      homEquiv_naturality_left_symm := fun X X' Z f g => tensorLeftHomEquiv_symm_naturality f g
      homEquiv_naturality_right := fun X Z Z' f g => tensorLeftHomEquiv_naturality f g }
#align category_theory.tensor_left_adjunction CategoryTheory.tensorLeftAdjunction

/-- If `Y Y'` have an exact pairing,
then the functor `tensor_right Y` is left adjoint to `tensor_right Y'`.
-/
def tensorRightAdjunction (Y Y' : C) [ExactPairing Y Y'] : tensorRight Y ‚ä£ tensorRight Y' :=
  Adjunction.mkOfHomEquiv
    { homEquiv := fun X Z => tensorRightHomEquiv X Y Y' Z
      homEquiv_naturality_left_symm := fun X X' Z f g => tensorRightHomEquiv_symm_naturality f g
      homEquiv_naturality_right := fun X Z Z' f g => tensorRightHomEquiv_naturality f g }
#align category_theory.tensor_right_adjunction CategoryTheory.tensorRightAdjunction

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/--
If `Y` has a left dual `·òÅY`, then it is a closed object, with the internal hom functor `Y ‚ü∂[C] -`
given by left tensoring by `·òÅY`.
This has to be a definition rather than an instance to avoid diamonds, for example between
`category_theory.monoidal_closed.functor_closed` and
`category_theory.monoidal.functor_has_left_dual`. Moreover, in concrete applications there is often
a more useful definition of the internal hom object than `·òÅY ‚äó X`, in which case the closed
structure shouldn't come from `has_left_dual` (e.g. in the category `FinVect k`, it is more
convenient to define the internal hom as `Y ‚Üí‚Çó[k] X` rather than `·òÅY ‚äó X` even though these are
naturally isomorphic).
-/
def closedOfHasLeftDual (Y : C) [HasLeftDual Y] : Closed Y
    where isAdj := ‚ü®_, tensorLeftAdjunction (·òÅY) Y‚ü©
#align category_theory.closed_of_has_left_dual CategoryTheory.closedOfHasLeftDual

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- `tensor_left_hom_equiv` commutes with tensoring on the right -/
theorem tensorLeftHomEquiv_tensor {X X' Y Y' Z Z' : C} [ExactPairing Y Y'] (f : X ‚ü∂ Y ‚äó Z)
    (g : X' ‚ü∂ Z') :
    (tensorLeftHomEquiv (X ‚äó X') Y Y' (Z ‚äó Z')).symm ((f ‚äó g) ‚â´ (Œ±_ _ _ _).Hom) =
      (Œ±_ _ _ _).inv ‚â´ ((tensorLeftHomEquiv X Y Y' Z).symm f ‚äó g) :=
  by
  dsimp [tensor_left_hom_equiv]
  simp only [id_tensor_comp]
  simp only [associator_inv_conjugation]
  slice_lhs 2 2 => rw [‚Üê id_tensor_comp_tensor_id]
  conv_rhs => rw [‚Üê id_tensor_comp_tensor_id, comp_tensor_id, comp_tensor_id]
  simp; coherence
#align category_theory.tensor_left_hom_equiv_tensor CategoryTheory.tensorLeftHomEquiv_tensor

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- `tensor_right_hom_equiv` commutes with tensoring on the left -/
theorem tensorRightHomEquiv_tensor {X X' Y Y' Z Z' : C} [ExactPairing Y Y'] (f : X ‚ü∂ Z ‚äó Y')
    (g : X' ‚ü∂ Z') :
    (tensorRightHomEquiv (X' ‚äó X) Y Y' (Z' ‚äó Z)).symm ((g ‚äó f) ‚â´ (Œ±_ _ _ _).inv) =
      (Œ±_ _ _ _).Hom ‚â´ (g ‚äó (tensorRightHomEquiv X Y Y' Z).symm f) :=
  by
  dsimp [tensor_right_hom_equiv]
  simp only [comp_tensor_id]
  simp only [associator_conjugation]
  slice_lhs 2 2 => rw [‚Üê tensor_id_comp_id_tensor]
  conv_rhs => rw [‚Üê tensor_id_comp_id_tensor, id_tensor_comp, id_tensor_comp]
  simp only [‚Üê tensor_id, associator_conjugation]
  simp; coherence
#align category_theory.tensor_right_hom_equiv_tensor CategoryTheory.tensorRightHomEquiv_tensor

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
@[simp]
theorem tensorLeftHomEquiv_symm_coevaluation_comp_id_tensor {Y Y' Z : C} [ExactPairing Y Y']
    (f : Y' ‚ü∂ Z) : (tensorLeftHomEquiv _ _ _ _).symm (Œ∑_ _ _ ‚â´ (ùüô Y ‚äó f)) = (œÅ_ _).Hom ‚â´ f :=
  by
  dsimp [tensor_left_hom_equiv]
  rw [id_tensor_comp]
  slice_lhs 2 3 => rw [associator_inv_naturality]
  slice_lhs 3 4 => rw [tensor_id, id_tensor_comp_tensor_id, ‚Üê tensor_id_comp_id_tensor]
  slice_lhs 1 3 => rw [coevaluation_evaluation]
  simp
#align category_theory.tensor_left_hom_equiv_symm_coevaluation_comp_id_tensor CategoryTheory.tensorLeftHomEquiv_symm_coevaluation_comp_id_tensor

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
@[simp]
theorem tensorLeftHomEquiv_symm_coevaluation_comp_tensor_id {X Y : C} [HasRightDual X]
    [HasRightDual Y] (f : X ‚ü∂ Y) :
    (tensorLeftHomEquiv _ _ _ _).symm (Œ∑_ _ _ ‚â´ (f ‚äó ùüô (X·òÅ))) = (œÅ_ _).Hom ‚â´ f·òÅ :=
  by
  dsimp [tensor_left_hom_equiv, right_adjoint_mate]
  simp
#align category_theory.tensor_left_hom_equiv_symm_coevaluation_comp_tensor_id CategoryTheory.tensorLeftHomEquiv_symm_coevaluation_comp_tensor_id

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
@[simp]
theorem tensorRightHomEquiv_symm_coevaluation_comp_id_tensor {X Y : C} [HasLeftDual X]
    [HasLeftDual Y] (f : X ‚ü∂ Y) :
    (tensorRightHomEquiv _ (·òÅY) _ _).symm (Œ∑_ (·òÅX) X ‚â´ (ùüô (·òÅX) ‚äó f)) = (Œª_ _).Hom ‚â´ ·òÅf :=
  by
  dsimp [tensor_right_hom_equiv, left_adjoint_mate]
  simp
#align category_theory.tensor_right_hom_equiv_symm_coevaluation_comp_id_tensor CategoryTheory.tensorRightHomEquiv_symm_coevaluation_comp_id_tensor

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
@[simp]
theorem tensorRightHomEquiv_symm_coevaluation_comp_tensor_id {Y Y' Z : C} [ExactPairing Y Y']
    (f : Y ‚ü∂ Z) : (tensorRightHomEquiv _ Y _ _).symm (Œ∑_ Y Y' ‚â´ (f ‚äó ùüô Y')) = (Œª_ _).Hom ‚â´ f :=
  by
  dsimp [tensor_right_hom_equiv]
  rw [comp_tensor_id]
  slice_lhs 2 3 => rw [associator_naturality]
  slice_lhs 3 4 => rw [tensor_id, tensor_id_comp_id_tensor, ‚Üê id_tensor_comp_tensor_id]
  slice_lhs 1 3 => rw [evaluation_coevaluation]
  simp
#align category_theory.tensor_right_hom_equiv_symm_coevaluation_comp_tensor_id CategoryTheory.tensorRightHomEquiv_symm_coevaluation_comp_tensor_id

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
@[simp]
theorem tensorLeftHomEquiv_id_tensor_comp_evaluation {Y Z : C} [HasLeftDual Z] (f : Y ‚ü∂ ·òÅZ) :
    (tensorLeftHomEquiv _ _ _ _) ((ùüô Z ‚äó f) ‚â´ Œµ_ _ _) = f ‚â´ (œÅ_ _).inv :=
  by
  dsimp [tensor_left_hom_equiv]
  rw [id_tensor_comp]
  slice_lhs 3 4 => rw [‚Üê associator_naturality]
  slice_lhs 2 3 => rw [tensor_id, tensor_id_comp_id_tensor, ‚Üê id_tensor_comp_tensor_id]
  slice_lhs 3 5 => rw [evaluation_coevaluation]
  simp
#align category_theory.tensor_left_hom_equiv_id_tensor_comp_evaluation CategoryTheory.tensorLeftHomEquiv_id_tensor_comp_evaluation

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
@[simp]
theorem tensorLeftHomEquiv_tensor_id_comp_evaluation {X Y : C} [HasLeftDual X] [HasLeftDual Y]
    (f : X ‚ü∂ Y) : (tensorLeftHomEquiv _ _ _ _) ((f ‚äó ùüô _) ‚â´ Œµ_ _ _) = (·òÅf) ‚â´ (œÅ_ _).inv :=
  by
  dsimp [tensor_left_hom_equiv, left_adjoint_mate]
  simp
#align category_theory.tensor_left_hom_equiv_tensor_id_comp_evaluation CategoryTheory.tensorLeftHomEquiv_tensor_id_comp_evaluation

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
@[simp]
theorem tensorRightHomEquiv_id_tensor_comp_evaluation {X Y : C} [HasRightDual X] [HasRightDual Y]
    (f : X ‚ü∂ Y) : (tensorRightHomEquiv _ _ _ _) ((ùüô (Y·òÅ) ‚äó f) ‚â´ Œµ_ _ _) = f·òÅ ‚â´ (Œª_ _).inv :=
  by
  dsimp [tensor_right_hom_equiv, right_adjoint_mate]
  simp
#align category_theory.tensor_right_hom_equiv_id_tensor_comp_evaluation CategoryTheory.tensorRightHomEquiv_id_tensor_comp_evaluation

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
@[simp]
theorem tensorRightHomEquiv_tensor_id_comp_evaluation {X Y : C} [HasRightDual X] (f : Y ‚ü∂ X·òÅ) :
    (tensorRightHomEquiv _ _ _ _) ((f ‚äó ùüô X) ‚â´ Œµ_ X (X·òÅ)) = f ‚â´ (Œª_ _).inv :=
  by
  dsimp [tensor_right_hom_equiv]
  rw [comp_tensor_id]
  slice_lhs 3 4 => rw [‚Üê associator_inv_naturality]
  slice_lhs 2 3 => rw [tensor_id, id_tensor_comp_tensor_id, ‚Üê tensor_id_comp_id_tensor]
  slice_lhs 3 5 => rw [coevaluation_evaluation]
  simp
#align category_theory.tensor_right_hom_equiv_tensor_id_comp_evaluation CategoryTheory.tensorRightHomEquiv_tensor_id_comp_evaluation

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
-- Next four lemmas passing `f·òÅ` or `·òÅf` through (co)evaluations.
theorem coevaluation_comp_rightAdjointMate {X Y : C} [HasRightDual X] [HasRightDual Y] (f : X ‚ü∂ Y) :
    Œ∑_ Y (Y·òÅ) ‚â´ (ùüô _ ‚äó f·òÅ) = Œ∑_ _ _ ‚â´ (f ‚äó ùüô _) :=
  by
  apply_fun (tensor_left_hom_equiv _ Y (Y·òÅ) _).symm
  simp
#align category_theory.coevaluation_comp_right_adjoint_mate CategoryTheory.coevaluation_comp_rightAdjointMate

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem leftAdjointMate_comp_evaluation {X Y : C} [HasLeftDual X] [HasLeftDual Y] (f : X ‚ü∂ Y) :
    (ùüô X ‚äó ·òÅf) ‚â´ Œµ_ _ _ = (f ‚äó ùüô _) ‚â´ Œµ_ _ _ :=
  by
  apply_fun tensor_left_hom_equiv _ (·òÅX) X _
  simp
#align category_theory.left_adjoint_mate_comp_evaluation CategoryTheory.leftAdjointMate_comp_evaluation

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem coevaluation_comp_leftAdjointMate {X Y : C} [HasLeftDual X] [HasLeftDual Y] (f : X ‚ü∂ Y) :
    Œ∑_ (·òÅY) Y ‚â´ ((·òÅf) ‚äó ùüô Y) = Œ∑_ (·òÅX) X ‚â´ (ùüô (·òÅX) ‚äó f) :=
  by
  apply_fun (tensor_right_hom_equiv _ (·òÅY) Y _).symm
  simp
#align category_theory.coevaluation_comp_left_adjoint_mate CategoryTheory.coevaluation_comp_leftAdjointMate

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem rightAdjointMate_comp_evaluation {X Y : C} [HasRightDual X] [HasRightDual Y] (f : X ‚ü∂ Y) :
    (f·òÅ ‚äó ùüô X) ‚â´ Œµ_ X (X·òÅ) = (ùüô (Y·òÅ) ‚äó f) ‚â´ Œµ_ Y (Y·òÅ) :=
  by
  apply_fun tensor_right_hom_equiv _ X (X·òÅ) _
  simp
#align category_theory.right_adjoint_mate_comp_evaluation CategoryTheory.rightAdjointMate_comp_evaluation

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- Transport an exact pairing across an isomorphism in the first argument. -/
def exactPairingCongrLeft {X X' Y : C} [ExactPairing X' Y] (i : X ‚âÖ X') : ExactPairing X Y
    where
  evaluation := (ùüô Y ‚äó i.Hom) ‚â´ Œµ_ _ _
  coevaluation := Œ∑_ _ _ ‚â´ (i.inv ‚äó ùüô Y)
  evaluation_coevaluation' := by
    rw [id_tensor_comp, comp_tensor_id]
    slice_lhs 2 3 => rw [associator_naturality]
    slice_lhs 3 4 => rw [tensor_id, tensor_id_comp_id_tensor, ‚Üê id_tensor_comp_tensor_id]
    slice_lhs 4 5 => rw [tensor_id_comp_id_tensor, ‚Üê id_tensor_comp_tensor_id]
    slice_lhs 2 3 => rw [‚Üê associator_naturality]
    slice_lhs 1 2 => rw [tensor_id, tensor_id_comp_id_tensor, ‚Üê id_tensor_comp_tensor_id]
    slice_lhs 2 4 => rw [evaluation_coevaluation]
    slice_lhs 1 2 => rw [left_unitor_naturality]
    slice_lhs 3 4 => rw [‚Üê right_unitor_inv_naturality]
    simp
  coevaluation_evaluation' := by
    rw [id_tensor_comp, comp_tensor_id]
    simp only [iso.inv_hom_id_assoc, associator_conjugation, category.assoc]
    slice_lhs 2 3 =>
      rw [‚Üê tensor_comp]
      simp
    simp
#align category_theory.exact_pairing_congr_left CategoryTheory.exactPairingCongrLeft

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- Transport an exact pairing across an isomorphism in the second argument. -/
def exactPairingCongrRight {X Y Y' : C} [ExactPairing X Y'] (i : Y ‚âÖ Y') : ExactPairing X Y
    where
  evaluation := (i.Hom ‚äó ùüô X) ‚â´ Œµ_ _ _
  coevaluation := Œ∑_ _ _ ‚â´ (ùüô X ‚äó i.inv)
  evaluation_coevaluation' := by
    rw [id_tensor_comp, comp_tensor_id]
    simp only [iso.inv_hom_id_assoc, associator_conjugation, category.assoc]
    slice_lhs 3 4 =>
      rw [‚Üê tensor_comp]
      simp
    simp
  coevaluation_evaluation' := by
    rw [id_tensor_comp, comp_tensor_id]
    slice_lhs 3 4 => rw [‚Üê associator_inv_naturality]
    slice_lhs 2 3 => rw [tensor_id, id_tensor_comp_tensor_id, ‚Üê tensor_id_comp_id_tensor]
    slice_lhs 1 2 => rw [id_tensor_comp_tensor_id, ‚Üê tensor_id_comp_id_tensor]
    slice_lhs 3 4 => rw [associator_inv_naturality]
    slice_lhs 4 5 => rw [tensor_id, id_tensor_comp_tensor_id, ‚Üê tensor_id_comp_id_tensor]
    slice_lhs 2 4 => rw [coevaluation_evaluation]
    slice_lhs 1 2 => rw [right_unitor_naturality]
    slice_lhs 3 4 => rw [‚Üê left_unitor_inv_naturality]
    simp
#align category_theory.exact_pairing_congr_right CategoryTheory.exactPairingCongrRight

/-- Transport an exact pairing across isomorphisms. -/
def exactPairingCongr {X X' Y Y' : C} [ExactPairing X' Y'] (i : X ‚âÖ X') (j : Y ‚âÖ Y') :
    ExactPairing X Y :=
  haveI : exact_pairing X' Y := exact_pairing_congr_right j
  exact_pairing_congr_left i
#align category_theory.exact_pairing_congr CategoryTheory.exactPairingCongr

/-- Right duals are isomorphic. -/
def rightDualIso {X Y‚ÇÅ Y‚ÇÇ : C} (_ : ExactPairing X Y‚ÇÅ) (_ : ExactPairing X Y‚ÇÇ) : Y‚ÇÅ ‚âÖ Y‚ÇÇ
    where
  Hom := @rightAdjointMate C _ _ X X ‚ü®Y‚ÇÇ‚ü© ‚ü®Y‚ÇÅ‚ü© (ùüô X)
  inv := @rightAdjointMate C _ _ X X ‚ü®Y‚ÇÅ‚ü© ‚ü®Y‚ÇÇ‚ü© (ùüô X)
  hom_inv_id' := by rw [‚Üê comp_right_adjoint_mate, category.comp_id, right_adjoint_mate_id]
  inv_hom_id' := by rw [‚Üê comp_right_adjoint_mate, category.comp_id, right_adjoint_mate_id]
#align category_theory.right_dual_iso CategoryTheory.rightDualIso

/-- Left duals are isomorphic. -/
def leftDualIso {X‚ÇÅ X‚ÇÇ Y : C} (p‚ÇÅ : ExactPairing X‚ÇÅ Y) (p‚ÇÇ : ExactPairing X‚ÇÇ Y) : X‚ÇÅ ‚âÖ X‚ÇÇ
    where
  Hom := @leftAdjointMate C _ _ Y Y ‚ü®X‚ÇÇ‚ü© ‚ü®X‚ÇÅ‚ü© (ùüô Y)
  inv := @leftAdjointMate C _ _ Y Y ‚ü®X‚ÇÅ‚ü© ‚ü®X‚ÇÇ‚ü© (ùüô Y)
  hom_inv_id' := by rw [‚Üê comp_left_adjoint_mate, category.comp_id, left_adjoint_mate_id]
  inv_hom_id' := by rw [‚Üê comp_left_adjoint_mate, category.comp_id, left_adjoint_mate_id]
#align category_theory.left_dual_iso CategoryTheory.leftDualIso

@[simp]
theorem rightDualIso_id {X Y : C} (p : ExactPairing X Y) : rightDualIso p p = Iso.refl Y := by ext;
  simp only [right_dual_iso, iso.refl_hom, right_adjoint_mate_id]
#align category_theory.right_dual_iso_id CategoryTheory.rightDualIso_id

@[simp]
theorem leftDualIso_id {X Y : C} (p : ExactPairing X Y) : leftDualIso p p = Iso.refl X := by ext;
  simp only [left_dual_iso, iso.refl_hom, left_adjoint_mate_id]
#align category_theory.left_dual_iso_id CategoryTheory.leftDualIso_id

/-- A right rigid monoidal category is one in which every object has a right dual. -/
class RightRigidCategory (C : Type u) [Category.{v} C] [MonoidalCategory.{v} C] where
  [rightDual : ‚àÄ X : C, HasRightDual X]
#align category_theory.right_rigid_category CategoryTheory.RightRigidCategory

/-- A left rigid monoidal category is one in which every object has a right dual. -/
class LeftRigidCategory (C : Type u) [Category.{v} C] [MonoidalCategory.{v} C] where
  [leftDual : ‚àÄ X : C, HasLeftDual X]
#align category_theory.left_rigid_category CategoryTheory.LeftRigidCategory

attribute [instance 100] right_rigid_category.right_dual

attribute [instance 100] left_rigid_category.left_dual

/-- Any left rigid category is monoidal closed, with the internal hom `X ‚ü∂[C] Y = ·òÅX ‚äó Y`.
This has to be a definition rather than an instance to avoid diamonds, for example between
`category_theory.monoidal_closed.functor_category` and
`category_theory.monoidal.left_rigid_functor_category`. Moreover, in concrete applications there is
often a more useful definition of the internal hom object than `·òÅY ‚äó X`, in which case the monoidal
closed structure shouldn't come the rigid structure (e.g. in the category `FinVect k`, it is more
convenient to define the internal hom as `Y ‚Üí‚Çó[k] X` rather than `·òÅY ‚äó X` even though these are
naturally isomorphic). -/
def monoidalClosedOfLeftRigidCategory (C : Type u) [Category.{v} C] [MonoidalCategory.{v} C]
    [LeftRigidCategory C] : MonoidalClosed C where closed' X := closedOfHasLeftDual X
#align category_theory.monoidal_closed_of_left_rigid_category CategoryTheory.monoidalClosedOfLeftRigidCategory

/-- A rigid monoidal category is a monoidal category which is left rigid and right rigid. -/
class RigidCategory (C : Type u) [Category.{v} C] [MonoidalCategory.{v} C] extends
    RightRigidCategory C, LeftRigidCategory C
#align category_theory.rigid_category CategoryTheory.RigidCategory

end CategoryTheory

