/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Simon Hudon

! This file was ported from Lean 3 source module category_theory.monoidal.of_chosen_finite_products.symmetric
! leanprover-community/mathlib commit 95a87616d63b3cb49d3fe678d416fbe9c4217bf4
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.CategoryTheory.Monoidal.Braided
import Mathbin.CategoryTheory.Monoidal.OfChosenFiniteProducts.Basic

/-!
# The symmetric monoidal structure on a category with chosen finite products.

-/


universe v u

noncomputable section

namespace CategoryTheory

variable (C : Type u) [Category.{v} C] {X Y : C}

open CategoryTheory.Limits

section

attribute [local tidy] tactic.case_bash

variable {C}

variable (ùíØ : LimitCone (Functor.empty.{v} C))

variable (‚Ñ¨ : ‚àÄ X Y : C, LimitCone (pair X Y))

open MonoidalOfChosenFiniteProducts

namespace MonoidalOfChosenFiniteProducts

open MonoidalCategory

theorem braiding_naturality {X X' Y Y' : C} (f : X ‚ü∂ Y) (g : X' ‚ü∂ Y') :
    tensorHom ‚Ñ¨ f g ‚â´ (Limits.BinaryFan.braiding (‚Ñ¨ Y Y').IsLimit (‚Ñ¨ Y' Y).IsLimit).Hom =
      (Limits.BinaryFan.braiding (‚Ñ¨ X X').IsLimit (‚Ñ¨ X' X).IsLimit).Hom ‚â´ tensorHom ‚Ñ¨ g f :=
  by
  dsimp [tensor_hom, limits.binary_fan.braiding]
  apply (‚Ñ¨ _ _).IsLimit.hom_ext;
  rintro ‚ü®‚ü®‚ü©‚ü© <;> ¬∑ dsimp [limits.is_limit.cone_point_unique_up_to_iso]; simp
#align category_theory.monoidal_of_chosen_finite_products.braiding_naturality CategoryTheory.monoidalOfChosenFiniteProducts.braiding_naturality

theorem hexagon_forward (X Y Z : C) :
    (BinaryFan.associatorOfLimitCone ‚Ñ¨ X Y Z).Hom ‚â´
        (Limits.BinaryFan.braiding (‚Ñ¨ X (tensorObj ‚Ñ¨ Y Z)).IsLimit
              (‚Ñ¨ (tensorObj ‚Ñ¨ Y Z) X).IsLimit).Hom ‚â´
          (BinaryFan.associatorOfLimitCone ‚Ñ¨ Y Z X).Hom =
      tensorHom ‚Ñ¨ (Limits.BinaryFan.braiding (‚Ñ¨ X Y).IsLimit (‚Ñ¨ Y X).IsLimit).Hom (ùüô Z) ‚â´
        (BinaryFan.associatorOfLimitCone ‚Ñ¨ Y X Z).Hom ‚â´
          tensorHom ‚Ñ¨ (ùüô Y) (Limits.BinaryFan.braiding (‚Ñ¨ X Z).IsLimit (‚Ñ¨ Z X).IsLimit).Hom :=
  by
  dsimp [tensor_hom, limits.binary_fan.braiding]
  apply (‚Ñ¨ _ _).IsLimit.hom_ext; rintro ‚ü®‚ü®‚ü©‚ü©
  ¬∑ dsimp [limits.is_limit.cone_point_unique_up_to_iso]; simp
  ¬∑ apply (‚Ñ¨ _ _).IsLimit.hom_ext;
    rintro ‚ü®‚ü®‚ü©‚ü© <;> ¬∑ dsimp [limits.is_limit.cone_point_unique_up_to_iso]; simp
#align category_theory.monoidal_of_chosen_finite_products.hexagon_forward CategoryTheory.monoidalOfChosenFiniteProducts.hexagon_forward

theorem hexagon_reverse (X Y Z : C) :
    (BinaryFan.associatorOfLimitCone ‚Ñ¨ X Y Z).inv ‚â´
        (Limits.BinaryFan.braiding (‚Ñ¨ (tensorObj ‚Ñ¨ X Y) Z).IsLimit
              (‚Ñ¨ Z (tensorObj ‚Ñ¨ X Y)).IsLimit).Hom ‚â´
          (BinaryFan.associatorOfLimitCone ‚Ñ¨ Z X Y).inv =
      tensorHom ‚Ñ¨ (ùüô X) (Limits.BinaryFan.braiding (‚Ñ¨ Y Z).IsLimit (‚Ñ¨ Z Y).IsLimit).Hom ‚â´
        (BinaryFan.associatorOfLimitCone ‚Ñ¨ X Z Y).inv ‚â´
          tensorHom ‚Ñ¨ (Limits.BinaryFan.braiding (‚Ñ¨ X Z).IsLimit (‚Ñ¨ Z X).IsLimit).Hom (ùüô Y) :=
  by
  dsimp [tensor_hom, limits.binary_fan.braiding]
  apply (‚Ñ¨ _ _).IsLimit.hom_ext; rintro ‚ü®‚ü®‚ü©‚ü©
  ¬∑ apply (‚Ñ¨ _ _).IsLimit.hom_ext;
    rintro ‚ü®‚ü®‚ü©‚ü© <;>
      ¬∑ dsimp [binary_fan.associator_of_limit_cone, binary_fan.associator,
          limits.is_limit.cone_point_unique_up_to_iso]
        simp
  ¬∑ dsimp [binary_fan.associator_of_limit_cone, binary_fan.associator,
      limits.is_limit.cone_point_unique_up_to_iso]
    simp
#align category_theory.monoidal_of_chosen_finite_products.hexagon_reverse CategoryTheory.monoidalOfChosenFiniteProducts.hexagon_reverse

theorem symmetry (X Y : C) :
    (Limits.BinaryFan.braiding (‚Ñ¨ X Y).IsLimit (‚Ñ¨ Y X).IsLimit).Hom ‚â´
        (Limits.BinaryFan.braiding (‚Ñ¨ Y X).IsLimit (‚Ñ¨ X Y).IsLimit).Hom =
      ùüô (tensorObj ‚Ñ¨ X Y) :=
  by
  dsimp [tensor_hom, limits.binary_fan.braiding]
  apply (‚Ñ¨ _ _).IsLimit.hom_ext;
  rintro ‚ü®‚ü®‚ü©‚ü© <;> ¬∑ dsimp [limits.is_limit.cone_point_unique_up_to_iso]; simp
#align category_theory.monoidal_of_chosen_finite_products.symmetry CategoryTheory.monoidalOfChosenFiniteProducts.symmetry

end MonoidalOfChosenFiniteProducts

open MonoidalOfChosenFiniteProducts

/-- The monoidal structure coming from finite products is symmetric.
-/
def symmetricOfChosenFiniteProducts : SymmetricCategory (MonoidalOfChosenFiniteProductsSynonym ùíØ ‚Ñ¨)
    where
  braiding X Y := Limits.BinaryFan.braiding (‚Ñ¨ _ _).IsLimit (‚Ñ¨ _ _).IsLimit
  braiding_naturality' X X' Y Y' f g := braiding_naturality ‚Ñ¨ f g
  hexagon_forward' X Y Z := hexagon_forward ‚Ñ¨ X Y Z
  hexagon_reverse' X Y Z := hexagon_reverse ‚Ñ¨ X Y Z
  symmetry' X Y := symmetry ‚Ñ¨ X Y
#align category_theory.symmetric_of_chosen_finite_products CategoryTheory.symmetricOfChosenFiniteProducts

end

end CategoryTheory

