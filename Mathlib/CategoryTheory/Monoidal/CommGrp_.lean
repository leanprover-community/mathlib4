/-
Copyright (c) 2025 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/
import Mathlib.CategoryTheory.Monoidal.Grp_
import Mathlib.CategoryTheory.Monoidal.CommMon_

/-!
# The category of commutative groups in a cartesian monoidal category
-/

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open CategoryTheory Category Limits MonoidalCategory CartesianMonoidalCategory Mon_ Grp_ CommMon_
open Mon_Class

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] [CartesianMonoidalCategory.{v‚ÇÅ} C] [BraidedCategory C]

/-- A commutative group object internal to a cartesian monoidal category. -/
structure CommGrp_ where
  /-- The underlying object in the ambient monoidal category -/
  X : C
  [grp : Grp_Class X]
  [comm : IsCommMon X]

attribute [instance] CommGrp_.grp CommGrp_.comm

namespace CommGrp_

variable {C}

/-- A commutative group object is a group object. -/
@[simps X]
def toGrp_ (A : CommGrp_ C) : Grp_ C := ‚ü®A.X‚ü©

/-- A commutative group object is a commutative monoid object. -/
@[simps X]
def toCommMon_ (A : CommGrp_ C) : CommMon_ C := ‚ü®A.X‚ü©

/-- A commutative group object is a monoid object. -/
abbrev toMon_ (A : CommGrp_ C) : Mon_ C := (toCommMon_ A).toMon_

variable (C) in
/-- The trivial commutative group object. -/
@[simps!]
def trivial : CommGrp_ C := { X := ùüô_ C }

instance : Inhabited (CommGrp_ C) where
  default := trivial C

instance : Category (CommGrp_ C) :=
  InducedCategory.category CommGrp_.toGrp_

omit [BraidedCategory C] in
@[simp]
theorem id_hom (A : Grp_ C) : Mon_.Hom.hom (ùüô A) = ùüô A.X :=
  rfl

@[simp]
theorem comp_hom {R S T : CommGrp_ C} (f : R ‚ü∂ S) (g : S ‚ü∂ T) :
    Mon_.Hom.hom (f ‚â´ g) = f.hom ‚â´ g.hom :=
  rfl

@[ext]
theorem hom_ext {A B : CommGrp_ C} (f g : A ‚ü∂ B) (h : f.hom = g.hom) : f = g :=
  Mon_.Hom.ext h

@[simp]
lemma id' (A : CommGrp_ C) : (ùüô A : A.toMon_ ‚ü∂ A.toMon_) = ùüô (A.toMon_) := rfl

@[simp]
lemma comp' {A‚ÇÅ A‚ÇÇ A‚ÇÉ : CommGrp_ C} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ) (g : A‚ÇÇ ‚ü∂ A‚ÇÉ) :
    ((f ‚â´ g : A‚ÇÅ ‚ü∂ A‚ÇÉ) : A‚ÇÅ.toMon_ ‚ü∂ A‚ÇÉ.toMon_) = @CategoryStruct.comp (Mon_ C) _ _ _ _ f g := rfl

section

variable (C)

/-- The forgetful functor from commutative group objects to group objects. -/
def forget‚ÇÇGrp_ : CommGrp_ C ‚•§ Grp_ C :=
  inducedFunctor CommGrp_.toGrp_

/-- The forgetful functor from commutative group objects to group objects is fully faithful. -/
def fullyFaithfulForget‚ÇÇGrp_ : (forget‚ÇÇGrp_ C).FullyFaithful :=
  fullyFaithfulInducedFunctor _

instance : (forget‚ÇÇGrp_ C).Full := InducedCategory.full _
instance : (forget‚ÇÇGrp_ C).Faithful := InducedCategory.faithful _

@[simp]
theorem forget‚ÇÇGrp_obj_one (A : CommGrp_ C) : Œ∑[((forget‚ÇÇGrp_ C).obj A).X] = Œ∑[A.X] :=
  rfl

@[simp]
theorem forget‚ÇÇGrp_obj_mul (A : CommGrp_ C) : Œº[((forget‚ÇÇGrp_ C).obj A).X] = Œº[A.X] :=
  rfl

@[simp]
theorem forget‚ÇÇGrp_map_hom {A B : CommGrp_ C} (f : A ‚ü∂ B) : ((forget‚ÇÇGrp_ C).map f).hom = f.hom :=
  rfl

/-- The forgetful functor from commutative group objects to commutative monoid objects. -/
def forget‚ÇÇCommMon_ : CommGrp_ C ‚•§ CommMon_ C :=
  inducedFunctor CommGrp_.toCommMon_

/-- The forgetful functor from commutative group objects to commutative monoid objects is fully
faithful. -/
def fullyFaithfulForget‚ÇÇCommMon_ : (forget‚ÇÇCommMon_ C).FullyFaithful :=
  fullyFaithfulInducedFunctor _

instance : (forget‚ÇÇCommMon_ C).Full := InducedCategory.full _
instance : (forget‚ÇÇCommMon_ C).Faithful := InducedCategory.faithful _

@[simp]
theorem forget‚ÇÇCommMon_obj_one (A : CommGrp_ C) : Œ∑[((forget‚ÇÇCommMon_ C).obj A).X] = Œ∑[A.X] :=
  rfl

@[simp]
theorem forget‚ÇÇCommMon_obj_mul (A : CommGrp_ C) : Œº[((forget‚ÇÇCommMon_ C).obj A).X] = Œº[A.X] :=
  rfl

@[simp]
theorem forget‚ÇÇCommMon_map_hom {A B : CommGrp_ C} (f : A ‚ü∂ B) :
    ((forget‚ÇÇCommMon_ C).map f).hom = f.hom :=
  rfl

/-- The forgetful functor from commutative group objects to the ambient category. -/
@[simps!]
def forget : CommGrp_ C ‚•§ C :=
  forget‚ÇÇGrp_ C ‚ãô Grp_.forget C

instance : (forget C).Faithful where

@[simp]
theorem forget‚ÇÇGrp_comp_forget : forget‚ÇÇGrp_ C ‚ãô Grp_.forget C = forget C := rfl

@[simp]
theorem forget‚ÇÇCommMon_comp_forget : forget‚ÇÇCommMon_ C ‚ãô CommMon_.forget C = forget C := rfl

instance {G H : CommGrp_ C} {f : G ‚ü∂ H} [IsIso f] : IsIso f.hom :=
  inferInstanceAs <| IsIso <| (forget C).map f

end

/-- Construct an isomorphism of commutative group objects by giving a monoid isomorphism between the
underlying objects. -/
@[simps!]
def mkIso' {G H : C} (e : G ‚âÖ H) [Grp_Class G] [IsCommMon G] [Grp_Class H] [IsCommMon H]
    [IsMon_Hom e.hom] : mk G ‚âÖ mk H :=
  (fullyFaithfulForget‚ÇÇGrp_ C).preimageIso (Grp_.mkIso' e)

/-- Construct an isomorphism of group objects by giving an isomorphism between the underlying
objects and checking compatibility with unit and multiplication only in the forward direction. -/
abbrev mkIso {G H : CommGrp_ C} (e : G.X ‚âÖ H.X) (one_f : Œ∑[G.X] ‚â´ e.hom = Œ∑[H.X] := by aesop_cat)
    (mul_f : Œº[G.X] ‚â´ e.hom = (e.hom ‚äó‚Çò e.hom) ‚â´ Œº[H.X] := by aesop_cat) : G ‚âÖ H :=
  have : IsMon_Hom e.hom := ‚ü®one_f, mul_f‚ü©
  mkIso' e

instance uniqueHomFromTrivial (A : CommGrp_ C) : Unique (trivial C ‚ü∂ A) :=
  Mon_.uniqueHomFromTrivial A.toMon_

instance : HasInitial (CommGrp_ C) :=
  hasInitial_of_unique (trivial C)

end CommGrp_

namespace CategoryTheory
variable {C}
  {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [CartesianMonoidalCategory D] [BraidedCategory D]
  {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [CartesianMonoidalCategory E] [BraidedCategory E]

namespace Functor
variable {F F' : C ‚•§ D} [F.Braided] [F'.Braided] {G : D ‚•§ E} [G.Braided]

open Monoidal

variable (F) in
/-- A finite-product-preserving functor takes commutative group objects to commutative group
objects. -/
@[simps!]
def mapCommGrp : CommGrp_ C ‚•§ CommGrp_ D where
  obj A :=
    { F.mapGrp.obj A.toGrp_ with
      comm :=
        { mul_comm := by
            dsimp
            rw [‚Üê Functor.LaxBraided.braided_assoc, ‚Üê Functor.map_comp, IsCommMon.mul_comm] } }
  map f := F.mapMon.map f
  map_id X := show F.mapMon.map (ùüô X.toGrp_.toMon_) = _ by aesop_cat

protected instance Faithful.mapCommGrp [F.Faithful] : F.mapCommGrp.Faithful where
  map_injective hfg := F.mapMon.map_injective hfg

protected instance Full.mapCommGrp [F.Full] [F.Faithful] : F.mapCommGrp.Full where
  map_surjective := F.mapMon.map_surjective

/-- If `F : C ‚•§ D` is a fully faithful monoidal functor, then `Grp(F) : Grp C ‚•§ Grp D` is fully
faithful too. -/
@[simps]
protected def FullyFaithful.mapCommGrp (hF : F.FullyFaithful) : F.mapGrp.FullyFaithful where
  preimage f := .mk <| hF.preimage f.hom

@[simp]
theorem mapCommGrp_id_one (A : CommGrp_ C) :
    Œ∑[((ùü≠ C).mapCommGrp.obj A).X] = ùüô _ ‚â´ Œ∑[A.X] :=
  rfl

@[simp]
theorem mapCommpGrp_id_mul (A : CommGrp_ C) :
    Œº[((ùü≠ C).mapCommGrp.obj A).X] = ùüô _ ‚â´ Œº[A.X] :=
  rfl

@[simp]
theorem comp_mapCommGrp_one (A : CommGrp_ C) :
    Œ∑[((F ‚ãô G).mapCommGrp.obj A).X] = LaxMonoidal.Œµ (F ‚ãô G) ‚â´ (F ‚ãô G).map Œ∑[A.X] :=
  rfl

@[simp]
theorem comp_mapCommGrp_mul (A : CommGrp_ C) :
    Œº[((F ‚ãô G).mapCommGrp.obj A).X] = LaxMonoidal.Œº (F ‚ãô G) _ _ ‚â´ (F ‚ãô G).map Œº[A.X] :=
  rfl

/-- The identity functor is also the identity on commutative group objects. -/
@[simps!]
def mapCommGrpIdIso : mapCommGrp (ùü≠ C) ‚âÖ ùü≠ (CommGrp_ C) :=
  NatIso.ofComponents (fun X ‚Ü¶ CommGrp_.mkIso (.refl _) (by simp)
    (by simp))

/-- The composition functor is also the composition on commutative group objects. -/
@[simps!]
def mapCommGrpCompIso : (F ‚ãô G).mapCommGrp ‚âÖ F.mapCommGrp ‚ãô G.mapCommGrp :=
  NatIso.ofComponents fun X ‚Ü¶ CommGrp_.mkIso (.refl _)

/-- Natural transformations between functors lift to commutative group objects. -/
@[simps!]
def mapCommGrpNatTrans (f : F ‚ü∂ F') : F.mapCommGrp ‚ü∂ F'.mapCommGrp where
  app X := .mk' (f.app _)

/-- Natural isomorphisms between functors lift to commutative group objects. -/
@[simps!]
def mapCommGrpNatIso (e : F ‚âÖ F') : F.mapCommGrp ‚âÖ F'.mapCommGrp :=
  NatIso.ofComponents fun X ‚Ü¶ CommGrp_.mkIso (e.app _)

attribute [local instance] Functor.Braided.ofChosenFiniteProducts in
/-- `mapCommGrp` is functorial in the left-exact functor. -/
@[simps]
noncomputable def mapCommGrpFunctor : (C ‚•§‚Çó D) ‚•§ CommGrp_ C ‚•§ CommGrp_ D where
  obj F := F.1.mapCommGrp
  map {F G} Œ± := { app A := .mk' (Œ±.app A.X) }

end Functor

open Functor

namespace Adjunction
variable {F : C ‚•§ D} {G : D ‚•§ C} (a : F ‚ä£ G) [F.Braided] [G.Braided]

/-- An adjunction of braided functors lifts to an adjunction of their lifts to commutative group
objects. -/
@[simps] noncomputable def mapCommGrp : F.mapCommGrp ‚ä£ G.mapCommGrp where
  unit := mapCommGrpIdIso.inv ‚â´ mapCommGrpNatTrans a.unit ‚â´ mapCommGrpCompIso.hom
  counit := mapCommGrpCompIso.inv ‚â´ mapCommGrpNatTrans a.counit ‚â´ mapCommGrpIdIso.hom

end Adjunction

namespace Equivalence
variable (e : C ‚âå D) [e.functor.Braided] [e.inverse.Braided]

/-- An equivalence of categories lifts to an equivalence of their commutative group objects. -/
@[simps] noncomputable def mapCommGrp : CommGrp_ C ‚âå CommGrp_ D where
  functor := e.functor.mapCommGrp
  inverse := e.inverse.mapCommGrp
  unitIso := mapCommGrpIdIso.symm ‚â™‚â´ mapCommGrpNatIso e.unitIso ‚â™‚â´ mapCommGrpCompIso
  counitIso := mapCommGrpCompIso.symm ‚â™‚â´ mapCommGrpNatIso e.counitIso ‚â™‚â´ mapCommGrpIdIso

end CategoryTheory.Equivalence
