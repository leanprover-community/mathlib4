/-
Copyright (c) 2018 Michael Jendrusch. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Jendrusch, Scott Morrison, Bhavik Mehta
-/
import Mathlib.CategoryTheory.Monoidal.Category
import Mathlib.CategoryTheory.Adjunction.FullyFaithful
import Mathlib.CategoryTheory.Products.Basic

#align_import category_theory.monoidal.functor from "leanprover-community/mathlib"@"3d7987cda72abc473c7cdbbb075170e9ac620042"

/-!
# (Lax) monoidal functors

A lax monoidal functor `F` between monoidal categories `C` and `D`
is a functor between the underlying categories equipped with morphisms
* `Œµ : ùüô_ D ‚ü∂ F.obj (ùüô_ C)` (called the unit morphism)
* `Œº X Y : (F.obj X) ‚äó (F.obj Y) ‚ü∂ F.obj (X ‚äó Y)` (called the tensorator, or strength).
satisfying various axioms.

A monoidal functor is a lax monoidal functor for which `Œµ` and `Œº` are isomorphisms.

We show that the composition of (lax) monoidal functors gives a (lax) monoidal functor.

See also `CategoryTheory.Monoidal.Functorial` for a typeclass decorating an object-level
function with the additional data of a monoidal functor.
This is useful when stating that a pre-existing functor is monoidal.

See `CategoryTheory.Monoidal.NaturalTransformation` for monoidal natural transformations.

We show in `CategoryTheory.Monoidal.Mon_` that lax monoidal functors take monoid objects
to monoid objects.

## Future work
* Oplax monoidal functors.

## References

See <https://stacks.math.columbia.edu/tag/0FFL>.
-/


open CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open CategoryTheory.Category

open CategoryTheory.Functor

namespace CategoryTheory

section

open MonoidalCategory

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]
  [MonoidalCategory.{v‚ÇÇ} D]

-- The direction of `left_unitality` and `right_unitality` as simp lemmas may look strange:
-- remember the rule of thumb that component indices of natural transformations
-- "weigh more" than structural maps.
-- (However by this argument `associativity` is currently stated backwards!)
/-- A lax monoidal functor is a functor `F : C ‚•§ D` between monoidal categories,
equipped with morphisms `Œµ : ùüô _D ‚ü∂ F.obj (ùüô_ C)` and `Œº X Y : F.obj X ‚äó F.obj Y ‚ü∂ F.obj (X ‚äó Y)`,
satisfying the appropriate coherences. -/
structure LaxMonoidalFunctor extends C ‚•§ D where
  /-- unit morphism -/
  Œµ : ùüô_ D ‚ü∂ obj (ùüô_ C)
  /-- tensorator -/
  Œº : ‚àÄ X Y : C, obj X ‚äó obj Y ‚ü∂ obj (X ‚äó Y)
  Œº_natural_left :
    ‚àÄ {X Y : C} (f : X ‚ü∂ Y) (X' : C),
      map f ‚ñ∑ obj X' ‚â´ Œº Y X' = Œº X X' ‚â´ map (f ‚ñ∑ X') := by
    aesop_cat
  Œº_natural_right :
    ‚àÄ {X Y : C} (X' : C) (f : X ‚ü∂ Y) ,
      obj X' ‚óÅ map f ‚â´ Œº X' Y = Œº X' X ‚â´ map (X' ‚óÅ f) := by
    aesop_cat
  /-- associativity of the tensorator -/
  associativity :
    ‚àÄ X Y Z : C,
      Œº X Y ‚ñ∑ obj Z ‚â´ Œº (X ‚äó Y) Z ‚â´ map (Œ±_ X Y Z).hom =
        (Œ±_ (obj X) (obj Y) (obj Z)).hom ‚â´ obj X ‚óÅ Œº Y Z ‚â´ Œº X (Y ‚äó Z) := by
    aesop_cat
  -- unitality
  left_unitality : ‚àÄ X : C, (Œª_ (obj X)).hom = Œµ ‚ñ∑ obj X ‚â´ Œº (ùüô_ C) X ‚â´ map (Œª_ X).hom :=
    by aesop_cat
  right_unitality : ‚àÄ X : C, (œÅ_ (obj X)).hom = obj X ‚óÅ Œµ ‚â´ Œº X (ùüô_ C) ‚â´ map (œÅ_ X).hom :=
    by aesop_cat
#align category_theory.lax_monoidal_functor CategoryTheory.LaxMonoidalFunctor

-- Porting note (#11215): TODO: remove this configuration and use the default configuration.
-- We keep this to be consistent with Lean 3.
-- See also `initialize_simps_projections MonoidalFunctor` below.
-- This may require waiting on https://github.com/leanprover-community/mathlib4/pull/2936
initialize_simps_projections LaxMonoidalFunctor (+toFunctor, -obj, -map)

attribute [reassoc (attr := simp)] LaxMonoidalFunctor.Œº_natural_left
attribute [reassoc (attr := simp)] LaxMonoidalFunctor.Œº_natural_right

attribute [simp] LaxMonoidalFunctor.left_unitality

attribute [simp] LaxMonoidalFunctor.right_unitality

attribute [reassoc (attr := simp)] LaxMonoidalFunctor.associativity

-- When `rewrite_search` lands, add @[search] attributes to
-- LaxMonoidalFunctor.Œº_natural LaxMonoidalFunctor.left_unitality
-- LaxMonoidalFunctor.right_unitality LaxMonoidalFunctor.associativity
section

variable {C D}

@[reassoc (attr := simp)]
theorem LaxMonoidalFunctor.Œº_natural (F : LaxMonoidalFunctor C D) {X Y X' Y' : C}
    (f : X ‚ü∂ Y) (g : X' ‚ü∂ Y') :
      (F.map f ‚äó F.map g) ‚â´ F.Œº Y Y' = F.Œº X X' ‚â´ F.map (f ‚äó g) := by
  simp [tensorHom_def]

/--
A constructor for lax monoidal functors whose axioms are described by `tensorHom` instead of
`whiskerLeft` and `whiskerRight`.
-/
@[simps]
def LaxMonoidalFunctor.ofTensorHom (F : C ‚•§ D)
    /- unit morphism -/
    (Œµ : ùüô_ D ‚ü∂ F.obj (ùüô_ C))
    /- tensorator -/
    (Œº : ‚àÄ X Y : C, F.obj X ‚äó F.obj Y ‚ü∂ F.obj (X ‚äó Y))
    (Œº_natural :
      ‚àÄ {X Y X' Y' : C} (f : X ‚ü∂ Y) (g : X' ‚ü∂ Y'),
        (F.map f ‚äó F.map g) ‚â´ Œº Y Y' = Œº X X' ‚â´ F.map (f ‚äó g) := by
      aesop_cat)
    /- associativity of the tensorator -/
    (associativity :
      ‚àÄ X Y Z : C,
        (Œº X Y ‚äó ùüô (F.obj Z)) ‚â´ Œº (X ‚äó Y) Z ‚â´ F.map (Œ±_ X Y Z).hom =
          (Œ±_ (F.obj X) (F.obj Y) (F.obj Z)).hom ‚â´ (ùüô (F.obj X) ‚äó Œº Y Z) ‚â´ Œº X (Y ‚äó Z) := by
      aesop_cat)
    /- unitality -/
    (left_unitality :
      ‚àÄ X : C, (Œª_ (F.obj X)).hom = (Œµ ‚äó ùüô (F.obj X)) ‚â´ Œº (ùüô_ C) X ‚â´ F.map (Œª_ X).hom :=
        by aesop_cat)
    (right_unitality :
      ‚àÄ X : C, (œÅ_ (F.obj X)).hom = (ùüô (F.obj X) ‚äó Œµ) ‚â´ Œº X (ùüô_ C) ‚â´ F.map (œÅ_ X).hom :=
        by aesop_cat) :
        LaxMonoidalFunctor C D where
  obj := F.obj
  map := F.map
  map_id := F.map_id
  map_comp := F.map_comp
  Œµ := Œµ
  Œº := Œº
  Œº_natural_left := fun f X' => by
    simp_rw [‚Üê tensorHom_id, ‚Üê F.map_id, Œº_natural]
  Œº_natural_right := fun X' f => by
    simp_rw [‚Üê id_tensorHom, ‚Üê F.map_id, Œº_natural]
  associativity := fun X Y Z => by
    simp_rw [‚Üê tensorHom_id, ‚Üê id_tensorHom, associativity]
  left_unitality := fun X => by
    simp_rw [‚Üê tensorHom_id, left_unitality]
  right_unitality := fun X => by
    simp_rw [‚Üê id_tensorHom, right_unitality]

@[reassoc (attr := simp)]
theorem LaxMonoidalFunctor.left_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :
    (Œª_ (F.obj X)).inv ‚â´ F.Œµ ‚ñ∑ F.obj X ‚â´ F.Œº (ùüô_ C) X = F.map (Œª_ X).inv := by
  rw [Iso.inv_comp_eq, F.left_unitality, Category.assoc, Category.assoc, ‚Üê F.toFunctor.map_comp,
    Iso.hom_inv_id, F.toFunctor.map_id, comp_id]
#align category_theory.lax_monoidal_functor.left_unitality_inv CategoryTheory.LaxMonoidalFunctor.left_unitality_inv

@[reassoc (attr := simp)]
theorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :
    (œÅ_ (F.obj X)).inv ‚â´ F.obj X ‚óÅ F.Œµ ‚â´ F.Œº X (ùüô_ C) = F.map (œÅ_ X).inv := by
  rw [Iso.inv_comp_eq, F.right_unitality, Category.assoc, Category.assoc, ‚Üê F.toFunctor.map_comp,
    Iso.hom_inv_id, F.toFunctor.map_id, comp_id]
#align category_theory.lax_monoidal_functor.right_unitality_inv CategoryTheory.LaxMonoidalFunctor.right_unitality_inv

@[reassoc (attr := simp)]
theorem LaxMonoidalFunctor.associativity_inv (F : LaxMonoidalFunctor C D) (X Y Z : C) :
    F.obj X ‚óÅ F.Œº Y Z ‚â´ F.Œº X (Y ‚äó Z) ‚â´ F.map (Œ±_ X Y Z).inv =
      (Œ±_ (F.obj X) (F.obj Y) (F.obj Z)).inv ‚â´ F.Œº X Y ‚ñ∑ F.obj Z ‚â´ F.Œº (X ‚äó Y) Z := by
  rw [Iso.eq_inv_comp, ‚Üê F.associativity_assoc, ‚Üê F.toFunctor.map_comp, Iso.hom_inv_id,
    F.toFunctor.map_id, comp_id]
#align category_theory.lax_monoidal_functor.associativity_inv CategoryTheory.LaxMonoidalFunctor.associativity_inv

end

/--
A monoidal functor is a lax monoidal functor for which the tensorator and unitor as isomorphisms.

See <https://stacks.math.columbia.edu/tag/0FFL>.
-/
structure MonoidalFunctor extends LaxMonoidalFunctor.{v‚ÇÅ, v‚ÇÇ} C D where
  Œµ_isIso : IsIso Œµ := by infer_instance
  Œº_isIso : ‚àÄ X Y : C, IsIso (Œº X Y) := by infer_instance
#align category_theory.monoidal_functor CategoryTheory.MonoidalFunctor

-- See porting note on `initialize_simps_projections LaxMonoidalFunctor`
initialize_simps_projections MonoidalFunctor (+toLaxMonoidalFunctor, -obj, -map, -Œµ, -Œº)

attribute [instance] MonoidalFunctor.Œµ_isIso MonoidalFunctor.Œº_isIso

variable {C D}

/-- The unit morphism of a (strong) monoidal functor as an isomorphism.
-/
noncomputable def MonoidalFunctor.ŒµIso (F : MonoidalFunctor.{v‚ÇÅ, v‚ÇÇ} C D) :
    ùüô_ D ‚âÖ F.obj (ùüô_ C) :=
  asIso F.Œµ
#align category_theory.monoidal_functor.Œµ_iso CategoryTheory.MonoidalFunctor.ŒµIso

/-- The tensorator of a (strong) monoidal functor as an isomorphism.
-/
noncomputable def MonoidalFunctor.ŒºIso (F : MonoidalFunctor.{v‚ÇÅ, v‚ÇÇ} C D) (X Y : C) :
    F.obj X ‚äó F.obj Y ‚âÖ F.obj (X ‚äó Y) :=
  asIso (F.Œº X Y)
#align category_theory.monoidal_functor.Œº_iso CategoryTheory.MonoidalFunctor.ŒºIso

end

open MonoidalCategory

namespace LaxMonoidalFunctor

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C]

/-- The identity lax monoidal functor. -/
@[simps]
def id : LaxMonoidalFunctor.{v‚ÇÅ, v‚ÇÅ} C C :=
  { ùü≠ C with
    Œµ := ùüô _
    Œº := fun X Y => ùüô _ }
#align category_theory.lax_monoidal_functor.id CategoryTheory.LaxMonoidalFunctor.id

instance : Inhabited (LaxMonoidalFunctor C C) :=
  ‚ü®id C‚ü©

end LaxMonoidalFunctor

namespace MonoidalFunctor

section

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C]
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [MonoidalCategory.{v‚ÇÇ} D]
variable (F : MonoidalFunctor.{v‚ÇÅ, v‚ÇÇ} C D)

@[reassoc]
theorem map_tensor {X Y X' Y' : C} (f : X ‚ü∂ Y) (g : X' ‚ü∂ Y') :
    F.map (f ‚äó g) = inv (F.Œº X X') ‚â´ (F.map f ‚äó F.map g) ‚â´ F.Œº Y Y' := by simp
#align category_theory.monoidal_functor.map_tensor CategoryTheory.MonoidalFunctor.map_tensor

@[reassoc]
theorem map_whiskerLeft (X : C) {Y Z : C} (f : Y ‚ü∂ Z) :
    F.map (X ‚óÅ f) = inv (F.Œº X Y) ‚â´ F.obj X ‚óÅ F.map f ‚â´ F.Œº X Z := by simp

@[reassoc]
theorem map_whiskerRight {X Y : C} (f : X ‚ü∂ Y) (Z : C) :
    F.map (f ‚ñ∑ Z) = inv (F.Œº X Z) ‚â´ F.map f ‚ñ∑ F.obj Z ‚â´ F.Œº Y Z := by simp

@[reassoc]
theorem map_leftUnitor (X : C) :
    F.map (Œª_ X).hom = inv (F.Œº (ùüô_ C) X) ‚â´ inv F.Œµ ‚ñ∑ F.obj X ‚â´ (Œª_ (F.obj X)).hom := by
  simp only [LaxMonoidalFunctor.left_unitality]
  slice_rhs 2 3 =>
    rw [‚Üê comp_whiskerRight]
    simp
  simp
#align category_theory.monoidal_functor.map_left_unitor CategoryTheory.MonoidalFunctor.map_leftUnitor

@[reassoc]
theorem map_rightUnitor (X : C) :
    F.map (œÅ_ X).hom = inv (F.Œº X (ùüô_ C)) ‚â´ F.obj X ‚óÅ inv F.Œµ ‚â´ (œÅ_ (F.obj X)).hom := by
  simp only [LaxMonoidalFunctor.right_unitality]
  slice_rhs 2 3 =>
    rw [‚Üê MonoidalCategory.whiskerLeft_comp]
    simp
  simp
#align category_theory.monoidal_functor.map_right_unitor CategoryTheory.MonoidalFunctor.map_rightUnitor

/-- The tensorator as a natural isomorphism. -/
noncomputable def ŒºNatIso :
    Functor.prod F.toFunctor F.toFunctor ‚ãô tensor D ‚âÖ tensor C ‚ãô F.toFunctor :=
  NatIso.ofComponents
    (by
      intros
      apply F.ŒºIso)
    (by
      intros
      apply F.toLaxMonoidalFunctor.Œº_natural)
#align category_theory.monoidal_functor.Œº_nat_iso CategoryTheory.MonoidalFunctor.ŒºNatIso

@[simp]
theorem ŒºIso_hom (X Y : C) : (F.ŒºIso X Y).hom = F.Œº X Y :=
  rfl
#align category_theory.monoidal_functor.Œº_iso_hom CategoryTheory.MonoidalFunctor.ŒºIso_hom

@[reassoc (attr := simp)]
theorem Œº_inv_hom_id (X Y : C) : (F.ŒºIso X Y).inv ‚â´ F.Œº X Y = ùüô _ :=
  (F.ŒºIso X Y).inv_hom_id
#align category_theory.monoidal_functor.Œº_inv_hom_id CategoryTheory.MonoidalFunctor.Œº_inv_hom_id

@[simp]
theorem Œº_hom_inv_id (X Y : C) : F.Œº X Y ‚â´ (F.ŒºIso X Y).inv = ùüô _ :=
  (F.ŒºIso X Y).hom_inv_id
#align category_theory.monoidal_functor.Œº_hom_inv_id CategoryTheory.MonoidalFunctor.Œº_hom_inv_id

@[simp]
theorem ŒµIso_hom : F.ŒµIso.hom = F.Œµ :=
  rfl
#align category_theory.monoidal_functor.Œµ_iso_hom CategoryTheory.MonoidalFunctor.ŒµIso_hom

@[reassoc (attr := simp)]
theorem Œµ_inv_hom_id : F.ŒµIso.inv ‚â´ F.Œµ = ùüô _ :=
  F.ŒµIso.inv_hom_id
#align category_theory.monoidal_functor.Œµ_inv_hom_id CategoryTheory.MonoidalFunctor.Œµ_inv_hom_id

@[simp]
theorem Œµ_hom_inv_id : F.Œµ ‚â´ F.ŒµIso.inv = ùüô _ :=
  F.ŒµIso.hom_inv_id
#align category_theory.monoidal_functor.Œµ_hom_inv_id CategoryTheory.MonoidalFunctor.Œµ_hom_inv_id

/-- Monoidal functors commute with left tensoring up to isomorphism -/
@[simps!]
noncomputable def commTensorLeft (X : C) :
    F.toFunctor ‚ãô tensorLeft (F.toFunctor.obj X) ‚âÖ tensorLeft X ‚ãô F.toFunctor :=
  NatIso.ofComponents (fun Y => F.ŒºIso X Y) fun f => F.Œº_natural_right X f
#align category_theory.monoidal_functor.comm_tensor_left CategoryTheory.MonoidalFunctor.commTensorLeft

/-- Monoidal functors commute with right tensoring up to isomorphism -/
@[simps!]
noncomputable def commTensorRight (X : C) :
    F.toFunctor ‚ãô tensorRight (F.toFunctor.obj X) ‚âÖ tensorRight X ‚ãô F.toFunctor :=
  NatIso.ofComponents (fun Y => F.ŒºIso Y X) fun f => F.Œº_natural_left f X
#align category_theory.monoidal_functor.comm_tensor_right CategoryTheory.MonoidalFunctor.commTensorRight

end

section

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C]

/-- The identity monoidal functor. -/
@[simps]
def id : MonoidalFunctor.{v‚ÇÅ, v‚ÇÅ} C C :=
  { ùü≠ C with
    Œµ := ùüô _
    Œº := fun X Y => ùüô _ }
#align category_theory.monoidal_functor.id CategoryTheory.MonoidalFunctor.id

instance : Inhabited (MonoidalFunctor C C) :=
  ‚ü®id C‚ü©

end

end MonoidalFunctor

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C]
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [MonoidalCategory.{v‚ÇÇ} D]
variable {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [MonoidalCategory.{v‚ÇÉ} E]

namespace LaxMonoidalFunctor

variable (F : LaxMonoidalFunctor.{v‚ÇÅ, v‚ÇÇ} C D) (G : LaxMonoidalFunctor.{v‚ÇÇ, v‚ÇÉ} D E)

-- The proofs here are horrendous; rewrite_search helps a lot.
/-- The composition of two lax monoidal functors is again lax monoidal. -/
@[simps]
def comp : LaxMonoidalFunctor.{v‚ÇÅ, v‚ÇÉ} C E :=
  { F.toFunctor ‚ãô G.toFunctor with
    Œµ := G.Œµ ‚â´ G.map F.Œµ
    Œº := fun X Y => G.Œº (F.obj X) (F.obj Y) ‚â´ G.map (F.Œº X Y)
    Œº_natural_left := by
      intro X Y f X'
      simp_rw [comp_obj, F.comp_map, Œº_natural_left_assoc, assoc, ‚Üê G.map_comp, Œº_natural_left]
    Œº_natural_right := by
      intro X Y f X'
      simp_rw [comp_obj, F.comp_map, Œº_natural_right_assoc, assoc, ‚Üê G.map_comp, Œº_natural_right]
    associativity := fun X Y Z => by
      dsimp
      simp only [comp_whiskerRight, assoc, Œº_natural_left_assoc, MonoidalCategory.whiskerLeft_comp,
        Œº_natural_right_assoc]
      slice_rhs 1 3 => rw [‚Üê G.associativity]
      simp_rw [Category.assoc, ‚Üê G.toFunctor.map_comp, F.associativity] }
#align category_theory.lax_monoidal_functor.comp CategoryTheory.LaxMonoidalFunctor.comp

@[inherit_doc]
infixr:80 " ‚äó‚ãô " => comp

end LaxMonoidalFunctor

namespace LaxMonoidalFunctor

universe v‚ÇÄ u‚ÇÄ

variable {B : Type u‚ÇÄ} [Category.{v‚ÇÄ} B] [MonoidalCategory.{v‚ÇÄ} B]
variable (F : LaxMonoidalFunctor.{v‚ÇÄ, v‚ÇÅ} B C) (G : LaxMonoidalFunctor.{v‚ÇÇ, v‚ÇÉ} D E)

attribute [local simp] Œº_natural associativity left_unitality right_unitality

/-- The cartesian product of two lax monoidal functors is lax monoidal. -/
@[simps]
def prod : LaxMonoidalFunctor (B √ó D) (C √ó E) :=
  { F.toFunctor.prod G.toFunctor with
    Œµ := (Œµ F, Œµ G)
    Œº := fun X Y => (Œº F X.1 Y.1, Œº G X.2 Y.2) }
#align category_theory.lax_monoidal_functor.prod CategoryTheory.LaxMonoidalFunctor.prod

end LaxMonoidalFunctor

namespace MonoidalFunctor

variable (C)

/-- The diagonal functor as a monoidal functor. -/
@[simps]
def diag : MonoidalFunctor C (C √ó C) :=
  { Functor.diag C with
    Œµ := ùüô _
    Œº := fun X Y => ùüô _ }
#align category_theory.monoidal_functor.diag CategoryTheory.MonoidalFunctor.diag

end MonoidalFunctor

namespace LaxMonoidalFunctor

variable (F : LaxMonoidalFunctor.{v‚ÇÅ, v‚ÇÇ} C D) (G : LaxMonoidalFunctor.{v‚ÇÅ, v‚ÇÉ} C E)

/-- The cartesian product of two lax monoidal functors starting from the same monoidal category `C`
    is lax monoidal. -/
def prod' : LaxMonoidalFunctor C (D √ó E) :=
  (MonoidalFunctor.diag C).toLaxMonoidalFunctor ‚äó‚ãô F.prod G
#align category_theory.lax_monoidal_functor.prod' CategoryTheory.LaxMonoidalFunctor.prod'

@[simp]
theorem prod'_toFunctor : (F.prod' G).toFunctor = F.toFunctor.prod' G.toFunctor :=
  rfl
#align category_theory.lax_monoidal_functor.prod'_to_functor CategoryTheory.LaxMonoidalFunctor.prod'_toFunctor

@[simp]
theorem prod'_Œµ : (F.prod' G).Œµ = (F.Œµ, G.Œµ) := by
  dsimp [prod']
  simp
#align category_theory.lax_monoidal_functor.prod'_Œµ CategoryTheory.LaxMonoidalFunctor.prod'_Œµ

@[simp]
theorem prod'_Œº (X Y : C) : (F.prod' G).Œº X Y = (F.Œº X Y, G.Œº X Y) := by
  dsimp [prod']
  simp
#align category_theory.lax_monoidal_functor.prod'_Œº CategoryTheory.LaxMonoidalFunctor.prod'_Œº

end LaxMonoidalFunctor

namespace MonoidalFunctor

variable (F : MonoidalFunctor.{v‚ÇÅ, v‚ÇÇ} C D) (G : MonoidalFunctor.{v‚ÇÇ, v‚ÇÉ} D E)

/-- The composition of two monoidal functors is again monoidal. -/
@[simps]
def comp : MonoidalFunctor.{v‚ÇÅ, v‚ÇÉ} C E :=
  {
    F.toLaxMonoidalFunctor.comp
      G.toLaxMonoidalFunctor with
    Œµ_isIso := by
      dsimp
      infer_instance
    Œº_isIso := by
      dsimp
      infer_instance }
#align category_theory.monoidal_functor.comp CategoryTheory.MonoidalFunctor.comp

@[inherit_doc]
infixr:80
  " ‚äó‚ãô " =>-- We overload notation; potentially dangerous, but it seems to work.
  comp

end MonoidalFunctor

namespace MonoidalFunctor

universe v‚ÇÄ u‚ÇÄ

variable {B : Type u‚ÇÄ} [Category.{v‚ÇÄ} B] [MonoidalCategory.{v‚ÇÄ} B]
variable (F : MonoidalFunctor.{v‚ÇÄ, v‚ÇÅ} B C) (G : MonoidalFunctor.{v‚ÇÇ, v‚ÇÉ} D E)

/-- The cartesian product of two monoidal functors is monoidal. -/
@[simps]
def prod : MonoidalFunctor (B √ó D) (C √ó E) :=
  {
    F.toLaxMonoidalFunctor.prod
      G.toLaxMonoidalFunctor with
    Œµ_isIso := (isIso_prod_iff C E).mpr ‚ü®Œµ_isIso F, Œµ_isIso G‚ü©
    Œº_isIso := fun X Y => (isIso_prod_iff C E).mpr ‚ü®Œº_isIso F X.1 Y.1, Œº_isIso G X.2 Y.2‚ü© }
#align category_theory.monoidal_functor.prod CategoryTheory.MonoidalFunctor.prod

end MonoidalFunctor

namespace MonoidalFunctor

variable (F : MonoidalFunctor.{v‚ÇÅ, v‚ÇÇ} C D) (G : MonoidalFunctor.{v‚ÇÅ, v‚ÇÉ} C E)

/-- The cartesian product of two monoidal functors starting from the same monoidal category `C`
    is monoidal. -/
def prod' : MonoidalFunctor C (D √ó E) :=
  diag C ‚äó‚ãô F.prod G
#align category_theory.monoidal_functor.prod' CategoryTheory.MonoidalFunctor.prod'

@[simp]
theorem prod'_toLaxMonoidalFunctor :
    (F.prod' G).toLaxMonoidalFunctor = F.toLaxMonoidalFunctor.prod' G.toLaxMonoidalFunctor :=
  rfl
#align category_theory.monoidal_functor.prod'_to_lax_monoidal_functor CategoryTheory.MonoidalFunctor.prod'_toLaxMonoidalFunctor

end MonoidalFunctor

section

-- TODO: The definitions below would be slightly better phrased if, in addition to
-- `MonoidalFunctor` (which extends `Functor`), we had a data valued type class
-- `Functor.Monoidal` (resp. `Functor.LaxMonoidal`) so that the definitions below
-- could be phrased in terms of `F : C ‚•§ D`, `G : D ‚•§ D`, `h : F ‚ä£ G` and `[F.Monoidal]`.
-- Then, in the case of an equivalence (see `monoidalInverse`), we could just take as
-- input an equivalence of categories `e : C ‚âå D` and the data `[e.functor.Monoidal]`.

variable (F : MonoidalFunctor C D) {G : D ‚•§ C} (h : F.toFunctor ‚ä£ G)

/-- If we have a right adjoint functor `G` to a monoidal functor `F`, then `G` has a lax monoidal
structure as well.
-/
@[simp]
noncomputable def monoidalAdjoint :
    LaxMonoidalFunctor D C where
  toFunctor := G
  Œµ := h.homEquiv _ _ (inv F.Œµ)
  Œº := fun X Y =>
    h.homEquiv _ _ (inv (F.Œº (G.obj X) (G.obj Y)) ‚â´ (h.counit.app X ‚äó h.counit.app Y))
  Œº_natural_left {X Y} f X' := by
    rw [‚Üê h.homEquiv_naturality_left, ‚Üê h.homEquiv_naturality_right, Equiv.apply_eq_iff_eq,
      assoc, IsIso.eq_inv_comp,
      ‚Üê F.toLaxMonoidalFunctor.Œº_natural_left_assoc, IsIso.hom_inv_id_assoc, tensorHom_def,
      ‚Üê comp_whiskerRight_assoc, Adjunction.counit_naturality, comp_whiskerRight_assoc,
      ‚Üê whisker_exchange, ‚Üê tensorHom_def_assoc]
  Œº_natural_right {X Y} X' f := by
    rw [‚Üê h.homEquiv_naturality_left, ‚Üê h.homEquiv_naturality_right, Equiv.apply_eq_iff_eq,
      assoc, IsIso.eq_inv_comp,
      ‚Üê F.toLaxMonoidalFunctor.Œº_natural_right_assoc, IsIso.hom_inv_id_assoc, tensorHom_def',
      ‚Üê MonoidalCategory.whiskerLeft_comp_assoc, Adjunction.counit_naturality, whisker_exchange,
      MonoidalCategory.whiskerLeft_comp, ‚Üê tensorHom_def_assoc]
  associativity X Y Z := by
    dsimp only
    rw [‚Üê h.homEquiv_naturality_right, ‚Üê h.homEquiv_naturality_left, ‚Üê h.homEquiv_naturality_left,
      ‚Üê h.homEquiv_naturality_left, Equiv.apply_eq_iff_eq,
      ‚Üê cancel_epi (F.Œº (G.obj X ‚äó G.obj Y) (G.obj Z)),
      ‚Üê cancel_epi (F.Œº (G.obj X) (G.obj Y) ‚ñ∑ (F.obj (G.obj Z)))]
    simp only [assoc]
    calc
      _ = (Œ±_ _ _ _).hom ‚â´ (h.counit.app X ‚äó h.counit.app Y ‚äó h.counit.app Z) := by
        rw [‚Üê F.Œº_natural_left_assoc, IsIso.hom_inv_id_assoc, h.homEquiv_unit,
          tensorHom_def_assoc (h.counit.app (X ‚äó Y)) (h.counit.app Z)]
        dsimp only [comp_obj, id_obj]
        simp_rw [‚Üê MonoidalCategory.comp_whiskerRight_assoc]
        rw [F.map_comp_assoc, h.counit_naturality, h.left_triangle_components_assoc,
          IsIso.hom_inv_id_assoc, ‚Üê tensorHom_def_assoc, associator_naturality]
      _ = _ := by
        rw [F.associativity_assoc, ‚Üê F.Œº_natural_right_assoc, IsIso.hom_inv_id_assoc,
          h.homEquiv_unit, tensorHom_def (h.counit.app X) (h.counit.app (Y ‚äó Z))]
        dsimp only [id_obj, comp_obj]
        rw [whisker_exchange_assoc, ‚Üê MonoidalCategory.whiskerLeft_comp, F.map_comp_assoc,
          h.counit_naturality, h.left_triangle_components_assoc, whisker_exchange_assoc,
          ‚Üê MonoidalCategory.whiskerLeft_comp, ‚Üê tensorHom_def, IsIso.hom_inv_id_assoc]
  left_unitality X := by
    rw [‚Üê h.homEquiv_naturality_right, ‚Üê h.homEquiv_naturality_left, ‚Üê Equiv.symm_apply_eq,
      h.homEquiv_counit, F.map_leftUnitor_assoc, h.homEquiv_unit, F.map_whiskerRight_assoc, assoc,
      IsIso.hom_inv_id_assoc, tensorHom_def_assoc, ‚Üê MonoidalCategory.comp_whiskerRight_assoc,
      F.map_comp_assoc, h.counit_naturality, h.left_triangle_components_assoc]
    simp
  right_unitality X := by
    rw [‚Üê h.homEquiv_naturality_right, ‚Üê h.homEquiv_naturality_left, ‚Üê Equiv.symm_apply_eq,
      h.homEquiv_counit, F.map_rightUnitor_assoc, h.homEquiv_unit, F.map_whiskerLeft_assoc, assoc,
      IsIso.hom_inv_id_assoc, tensorHom_def'_assoc, ‚Üê MonoidalCategory.whiskerLeft_comp_assoc,
      F.map_comp_assoc, h.counit_naturality, h.left_triangle_components_assoc]
    simp
#align category_theory.monoidal_adjoint CategoryTheory.monoidalAdjoint

instance [F.IsEquivalence] : IsIso (monoidalAdjoint F h).Œµ := by
  dsimp
  rw [Adjunction.homEquiv_unit]
  infer_instance

instance (X Y : D) [F.IsEquivalence] : IsIso ((monoidalAdjoint F h).Œº X Y) := by
  dsimp
  rw [Adjunction.homEquiv_unit]
  infer_instance

/-- If a monoidal functor `F` is an equivalence of categories then its inverse is also monoidal. -/
@[simps]
noncomputable def monoidalInverse [F.IsEquivalence] :
    MonoidalFunctor D C where
  toLaxMonoidalFunctor := monoidalAdjoint F h
#align category_theory.monoidal_inverse CategoryTheory.monoidalInverse

end

end CategoryTheory
