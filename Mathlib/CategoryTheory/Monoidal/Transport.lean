/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.CategoryTheory.Monoidal.NaturalTransformation

#align_import category_theory.monoidal.transport from "leanprover-community/mathlib"@"31529827d0f68d1fbd429edc393a928f677f4aba"

/-!
# Transport a monoidal structure along an equivalence.

When `C` and `D` are equivalent as categories,
we can transport a monoidal structure on `C` along the equivalence,
obtaining a monoidal structure on `D`.

We then upgrade the original functor and its inverse to monoidal functors
with respect to the new monoidal structure on `D`.
-/


universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

noncomputable section

open CategoryTheory

open CategoryTheory.Category

open CategoryTheory.MonoidalCategory

namespace CategoryTheory.Monoidal

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C]

variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

-- porting note: it was @[simps {attrs := [`_refl_lemma]}]
/-- Transport a monoidal structure along an equivalence of (plain) categories.
-/
@[simps]
def transport (e : C ‚âå D) : MonoidalCategory.{v‚ÇÇ} D where
  tensorObj X Y := e.functor.obj (e.inverse.obj X ‚äó e.inverse.obj Y)
  whiskerLeft := fun X _ _ f ‚Ü¶ e.functor.map (e.inverse.obj X ‚óÅ e.inverse.map f)
  whiskerRight := fun f X ‚Ü¶ e.functor.map (e.inverse.map f ‚ñ∑ e.inverse.obj X)
  tensorHom_def := by simp [tensorHom_def]
  tensorHom f g := e.functor.map (e.inverse.map f ‚äó e.inverse.map g)
  tensorUnit' := e.functor.obj (ùüô_ C)
  associator X Y Z :=
    e.functor.mapIso
      (((e.unitIso.app _).symm ‚äó Iso.refl _) ‚â™‚â´
        Œ±_ (e.inverse.obj X) (e.inverse.obj Y) (e.inverse.obj Z) ‚â™‚â´ (Iso.refl _ ‚äó e.unitIso.app _))
  leftUnitor X :=
    e.functor.mapIso (((e.unitIso.app _).symm ‚äó Iso.refl _) ‚â™‚â´ Œª_ (e.inverse.obj X)) ‚â™‚â´
      e.counitIso.app _
  rightUnitor X :=
    e.functor.mapIso ((Iso.refl _ ‚äó (e.unitIso.app _).symm) ‚â™‚â´ œÅ_ (e.inverse.obj X)) ‚â™‚â´
      e.counitIso.app _
  triangle X Y := by
    dsimp
    simp only [Iso.hom_inv_id_app_assoc, comp_tensor_id, Equivalence.unit_inverse_comp, assoc,
      Equivalence.inv_fun_map, comp_id, Functor.map_comp, id_tensor_comp, e.inverse.map_id]
    simp only [‚Üê e.functor.map_comp]
    congr 2
    slice_lhs 2 3 =>
      rw [‚Üê id_tensor_comp]
      simp
    rw [Category.id_comp, ‚Üê associator_naturality_assoc, triangle]
  pentagon W X Y Z := by
    dsimp
    simp only [Iso.hom_inv_id_app_assoc, comp_tensor_id, assoc, Equivalence.inv_fun_map,
      Functor.map_comp, id_tensor_comp, e.inverse.map_id]
    simp only [‚Üê e.functor.map_comp]
    congr 2
    slice_lhs 4 5 =>
      rw [‚Üê comp_tensor_id, Iso.hom_inv_id_app]
      dsimp
      rw [tensor_id]
    simp only [Category.id_comp, Category.assoc]
    slice_lhs 5 6 =>
      rw [‚Üê id_tensor_comp, Iso.hom_inv_id_app]
      dsimp
      rw [tensor_id]
    simp only [Category.id_comp, Category.assoc]
    slice_rhs 2 3 => rw [id_tensor_comp_tensor_id, ‚Üê tensor_id_comp_id_tensor]
    slice_rhs 1 2 => rw [‚Üê tensor_id, ‚Üê associator_naturality]
    slice_rhs 3 4 => rw [‚Üê tensor_id, associator_naturality]
    slice_rhs 2 3 => rw [‚Üê pentagon]
    simp only [Category.assoc]
    congr 2
    slice_lhs 1 2 => rw [associator_naturality]
    simp only [Category.assoc]
    congr 1
    slice_lhs 1 2 =>
      rw [‚Üê id_tensor_comp, ‚Üê comp_tensor_id, Iso.hom_inv_id_app]
      dsimp
      rw [tensor_id, tensor_id]
    simp only [Category.id_comp, Category.assoc]
  leftUnitor_naturality f := by
    dsimp
    simp only [Functor.map_comp, Functor.map_id, Category.assoc]
    erw [‚Üê e.counitIso.hom.naturality]
    simp only [Functor.comp_map, ‚Üê e.functor.map_comp_assoc]
    congr 2
    rw [id_tensor_comp_tensor_id_assoc, ‚Üê tensor_id_comp_id_tensor_assoc,
      leftUnitor_naturality]
  rightUnitor_naturality f := by
    dsimp
    simp only [Functor.map_comp, Functor.map_id, Category.assoc]
    erw [‚Üê e.counitIso.hom.naturality]
    simp only [Functor.comp_map, ‚Üê e.functor.map_comp_assoc]
    congr 2
    erw [tensor_id_comp_id_tensor_assoc, ‚Üê id_tensor_comp_tensor_id_assoc,
      rightUnitor_naturality]
  associator_naturality f‚ÇÅ f‚ÇÇ f‚ÇÉ := by
    dsimp
    simp only [Equivalence.inv_fun_map, Functor.map_comp, Category.assoc]
    simp only [‚Üê e.functor.map_comp]
    congr 1
    conv_lhs => rw [‚Üê tensor_id_comp_id_tensor]
    slice_lhs 2 3 => rw [id_tensor_comp_tensor_id, ‚Üê tensor_id_comp_id_tensor, ‚Üê tensor_id]
    simp only [Category.assoc]
    slice_lhs 3 4 => rw [associator_naturality]
    conv_lhs => simp only [comp_tensor_id]
    slice_lhs 3 4 =>
      rw [‚Üê comp_tensor_id, Iso.hom_inv_id_app]
      dsimp
      rw [tensor_id]
    simp only [Category.id_comp, Category.assoc]
    slice_lhs 2 3 => rw [associator_naturality]
    simp only [Category.assoc]
    congr 2
    slice_lhs 1 1 => rw [‚Üê tensor_id_comp_id_tensor]
    slice_lhs 2 3 => rw [‚Üê id_tensor_comp, tensor_id_comp_id_tensor]
    slice_lhs 1 2 => rw [tensor_id_comp_id_tensor]
    conv_rhs =>
      congr
      ¬∑ skip
      ¬∑ rw [‚Üê id_tensor_comp_tensor_id, id_tensor_comp]
    simp only [Category.assoc]
    slice_rhs 1 2 =>
      rw [‚Üê id_tensor_comp, Iso.hom_inv_id_app]
      dsimp
      rw [tensor_id]
    simp only [Category.id_comp, Category.assoc]
    conv_rhs => rw [id_tensor_comp]
    slice_rhs 2 3 => rw [id_tensor_comp_tensor_id, ‚Üê tensor_id_comp_id_tensor]
    slice_rhs 1 2 => rw [id_tensor_comp_tensor_id]
#align category_theory.monoidal.transport CategoryTheory.Monoidal.transport

/-- A type synonym for `D`, which will carry the transported monoidal structure. -/
@[nolint unusedArguments]
def Transported (_ : C ‚âå D) := D
#align category_theory.monoidal.transported CategoryTheory.Monoidal.Transported

instance (e : C ‚âå D) : Category (Transported e) := (inferInstance : Category D)

instance (e : C ‚âå D) : MonoidalCategory (Transported e) :=
  transport e

instance (e : C ‚âå D) : Inhabited (Transported e) :=
  ‚ü®ùüô_ _‚ü©

section

attribute [local simp] transport_tensorUnit'

section

attribute [local simp]
  transport_tensorHom transport_associator transport_leftUnitor transport_rightUnitor

/--
We can upgrade `e.functor` to a lax monoidal functor from `C` to `D` with the transported structure.
-/
@[simps]
def laxToTransported (e : C ‚âå D) : LaxMonoidalFunctor C (Transported e) where
  toFunctor := e.functor
  Œµ := ùüô (e.functor.obj (ùüô_ C))
  Œº X Y := e.functor.map (e.unitInv.app X ‚äó e.unitInv.app Y)
  Œº_natural f g := by
    dsimp
    rw [Equivalence.inv_fun_map, Equivalence.inv_fun_map, tensor_comp, Functor.map_comp,
      tensor_comp, ‚Üê e.functor.map_comp, ‚Üê e.functor.map_comp, ‚Üê e.functor.map_comp,
      assoc, assoc, ‚Üê tensor_comp, Iso.hom_inv_id_app, Iso.hom_inv_id_app, ‚Üê tensor_comp]
    dsimp
    rw [comp_id, comp_id]
  associativity X Y Z := by
    dsimp
    rw [Equivalence.inv_fun_map, Equivalence.inv_fun_map, Functor.map_comp,
      Functor.map_comp, assoc, assoc, e.inverse.map_id, e.inverse.map_id,
      comp_tensor_id, id_tensor_comp, Functor.map_comp, assoc, id_tensor_comp,
      comp_tensor_id, ‚Üê e.functor.map_comp, ‚Üê e.functor.map_comp, ‚Üê e.functor.map_comp,
      ‚Üê e.functor.map_comp, ‚Üê e.functor.map_comp, ‚Üê e.functor.map_comp, ‚Üê e.functor.map_comp]
    congr 2
    slice_lhs 3 3 => rw [‚Üê tensor_id_comp_id_tensor]
    slice_lhs 2 3 =>
      rw [‚Üê comp_tensor_id, Iso.hom_inv_id_app]
      dsimp
      rw [tensor_id]
    rw [id_comp]
    slice_rhs 2 3 =>
      rw [‚Üêid_tensor_comp, Iso.hom_inv_id_app]
      dsimp
      rw [tensor_id]
    rw [id_comp]
    conv_rhs => rw [‚Üê id_tensor_comp_tensor_id _ (e.unitInv.app X)]
    dsimp only [Functor.comp_obj]
    slice_rhs 3 4 =>
      rw [‚Üê id_tensor_comp, Iso.hom_inv_id_app]
      dsimp
      rw [tensor_id]
    simp only [associator_conjugation, ‚Üêtensor_id, ‚Üêtensor_comp, Iso.inv_hom_id,
      Iso.inv_hom_id_assoc, assoc, id_comp, comp_id]
  left_unitality X := by
    dsimp
    rw [e.inverse.map_id, e.inverse.map_id, tensor_id, Functor.map_comp, assoc,
      Equivalence.counit_app_functor, ‚Üê e.functor.map_comp, ‚Üê e.functor.map_comp,
      ‚Üê e.functor.map_comp, ‚Üê e.functor.map_comp, ‚Üê leftUnitor_naturality,
      ‚Üê tensor_comp_assoc, comp_id, id_comp, id_comp]
    rfl
  right_unitality X := by
    dsimp
    rw [Functor.map_comp, assoc, e.inverse.map_id, e.inverse.map_id, tensor_id,
      Functor.map_id, id_comp, Equivalence.counit_app_functor, ‚Üê e.functor.map_comp,
      ‚Üê e.functor.map_comp, ‚Üê e.functor.map_comp, ‚Üê rightUnitor_naturality,
      ‚Üê tensor_comp_assoc, id_comp, comp_id]
    rfl
#align category_theory.monoidal.lax_to_transported CategoryTheory.Monoidal.laxToTransported

end

/-- We can upgrade `e.functor` to a monoidal functor from `C` to `D` with the transported structure.
-/
@[simps]
def toTransported (e : C ‚âå D) : MonoidalFunctor C (Transported e) where
  toLaxMonoidalFunctor := laxToTransported e
  Œµ_isIso := by
    dsimp
    infer_instance
  Œº_isIso X Y := by
    dsimp
    infer_instance
#align category_theory.monoidal.to_transported CategoryTheory.Monoidal.toTransported

end

instance (e : C ‚âå D) : IsEquivalence (toTransported e).toFunctor := by
  dsimp
  infer_instance

/-- We can upgrade `e.inverse` to a monoidal functor from `D` with the transported structure to `C`.
-/
@[simps!]
def fromTransported (e : C ‚âå D) : MonoidalFunctor (Transported e) C :=
  monoidalInverse (toTransported e)
#align category_theory.monoidal.from_transported CategoryTheory.Monoidal.fromTransported

instance instIsEquivalence_fromTransported (e : C ‚âå D) :
    IsEquivalence (fromTransported e).toFunctor := by
  dsimp [fromTransported]
  infer_instance

/-- The unit isomorphism upgrades to a monoidal isomorphism. -/
@[simps! hom inv]
def transportedMonoidalUnitIso (e : C ‚âå D) :
    LaxMonoidalFunctor.id C ‚âÖ laxToTransported e ‚äó‚ãô (fromTransported e).toLaxMonoidalFunctor :=
  asIso (monoidalUnit (toTransported e))
#align category_theory.monoidal.transported_monoidal_unit_iso CategoryTheory.Monoidal.transportedMonoidalUnitIso

/-- The counit isomorphism upgrades to a monoidal isomorphism. -/
@[simps! hom inv]
def transportedMonoidalCounitIso (e : C ‚âå D) :
    (fromTransported e).toLaxMonoidalFunctor ‚äó‚ãô laxToTransported e ‚âÖ
      LaxMonoidalFunctor.id (Transported e) :=
  asIso (monoidalCounit (toTransported e))
#align category_theory.monoidal.transported_monoidal_counit_iso CategoryTheory.Monoidal.transportedMonoidalCounitIso

end CategoryTheory.Monoidal
