/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Monoidal.Category
import Mathlib.CategoryTheory.Functor.Quadrifunctor

/-!
# The pentagon identity as an equality of natural transformations

-/

namespace CategoryTheory

variable {C : Type*} [Category C]

namespace NatTrans

variable (F : C ‚•§ C ‚•§ C) (Œ± : bifunctorComp‚ÇÅ‚ÇÇ F F ‚ü∂ bifunctorComp‚ÇÇ‚ÇÉ F F)

namespace Pentagon

-- ((X‚ÇÅ ‚äó X‚ÇÇ) ‚äó X‚ÇÉ) ‚äó X‚ÇÑ
@[simps!]
def functor‚ÇÅ : C ‚•§ C ‚•§ C ‚•§ C ‚•§ C :=
  trifunctorComp‚ÇÅ‚ÇÇ‚ÇÉ (bifunctorComp‚ÇÅ‚ÇÇ F F) F

-- (X‚ÇÅ ‚äó (X‚ÇÇ ‚äó X‚ÇÉ)) ‚äó X‚ÇÑ
@[simps!]
def functor‚ÇÇ : C ‚•§ C ‚•§ C ‚•§ C ‚•§ C :=
  trifunctorComp‚ÇÅ‚ÇÇ‚ÇÉ (bifunctorComp‚ÇÇ‚ÇÉ F F) F

-- X‚ÇÅ ‚äó ((X‚ÇÇ ‚äó X‚ÇÉ) ‚äó X‚ÇÑ)
@[simps!]
def functor‚ÇÉ : C ‚•§ C ‚•§ C ‚•§ C ‚•§ C :=
  trifunctorComp‚ÇÇ‚ÇÉ‚ÇÑ F (bifunctorComp‚ÇÅ‚ÇÇ F F)

-- X‚ÇÅ ‚äó (X‚ÇÇ ‚äó (X‚ÇÉ ‚äó X‚ÇÑ))
@[simps!]
def functor‚ÇÑ : C ‚•§ C ‚•§ C ‚•§ C ‚•§ C :=
  trifunctorComp‚ÇÇ‚ÇÉ‚ÇÑ F (bifunctorComp‚ÇÇ‚ÇÉ F F)

-- (X‚ÇÅ ‚äó X‚ÇÇ) ‚äó (X‚ÇÉ ‚äó X‚ÇÑ)
@[simps!]
def functor‚ÇÖ : C ‚•§ C ‚•§ C ‚•§ C ‚•§ C :=
  bifunctorComp‚ÇÅ‚ÇÇ F (bifunctorComp‚ÇÇ‚ÇÉ F F)

example (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C) :
    ((((functor‚ÇÅ F).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).obj X‚ÇÑ =
    (F.obj ((F.obj ((F.obj X‚ÇÅ).obj X‚ÇÇ)).obj X‚ÇÉ)).obj X‚ÇÑ := by
  dsimp

example (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C) :
    ((((functor‚ÇÇ F).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).obj X‚ÇÑ =
    (F.obj ((F.obj X‚ÇÅ).obj (((F.obj X‚ÇÇ).obj X‚ÇÉ)))).obj X‚ÇÑ := by
  dsimp

example (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C) :
    ((((functor‚ÇÉ F).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).obj X‚ÇÑ =
    (F.obj X‚ÇÅ).obj ((F.obj ((F.obj X‚ÇÇ).obj X‚ÇÉ)).obj X‚ÇÑ) := by
  dsimp

example (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C) :
    ((((functor‚ÇÑ F).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).obj X‚ÇÑ =
    (F.obj X‚ÇÅ).obj ((F.obj X‚ÇÇ).obj ((F.obj X‚ÇÉ).obj X‚ÇÑ)) := by
  dsimp

example (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C) :
    ((((functor‚ÇÖ F).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).obj X‚ÇÑ =
    (F.obj ((F.obj X‚ÇÅ).obj X‚ÇÇ)).obj ((F.obj X‚ÇÉ).obj X‚ÇÑ) := by
  dsimp

variable {F}

@[simps!]
def natTrans‚ÇÅ‚ÇÇ : functor‚ÇÅ F ‚ü∂ functor‚ÇÇ F := (Functor.postcompose‚ÇÉ.obj F).map Œ±

@[simps!]
def natTrans‚ÇÇ‚ÇÉ : functor‚ÇÇ F ‚ü∂ functor‚ÇÉ F where
  app X‚ÇÅ :=
  { app X‚ÇÇ :=
    { app X‚ÇÉ := { app X‚ÇÑ := ((Œ±.app _).app _).app _ }
      naturality _ _ _ := (Œ±.app X‚ÇÅ).naturality _ }
    naturality X‚ÇÇ Y‚ÇÇ f‚ÇÇ := by
      ext X‚ÇÉ : 2
      exact (Œ±.app X‚ÇÅ).naturality ((F.map f‚ÇÇ).app X‚ÇÉ) }
  naturality X‚ÇÅ Y‚ÇÅ f‚ÇÅ := by
    ext X‚ÇÇ X‚ÇÉ : 4
    exact congr_app (Œ±.naturality f‚ÇÅ) ((F.obj X‚ÇÇ).obj X‚ÇÉ)

@[simps!]
def natTrans‚ÇÉ‚ÇÑ : functor‚ÇÉ F ‚ü∂ functor‚ÇÑ F := (F ‚ãô Functor.postcompose‚ÇÉ).flip.map Œ±

@[simps!]
def natTrans‚ÇÅ‚ÇÖ : functor‚ÇÅ F ‚ü∂ functor‚ÇÖ F where
  app X‚ÇÅ :=
  { app X‚ÇÇ :=
    { app X‚ÇÉ := { app X‚ÇÑ := ((Œ±.app _).app _).app _ }
      naturality _ _ _ := (Œ±.app _).naturality _ }
    naturality X‚ÇÇ Y‚ÇÇ f‚ÇÇ := by
      ext X‚ÇÉ : 2
      exact congr_app (Œ±.naturality ((F.obj X‚ÇÅ).map f‚ÇÇ)) X‚ÇÉ }
  naturality X‚ÇÅ Y‚ÇÅ f‚ÇÅ := by
    ext X‚ÇÇ : 2
    exact Œ±.naturality ((F.map f‚ÇÅ).app X‚ÇÇ)

@[simps!]
def natTrans‚ÇÖ‚ÇÑ : functor‚ÇÖ F ‚ü∂ functor‚ÇÑ F where
  app X‚ÇÅ :=
  { app X‚ÇÇ :=
    { app X‚ÇÉ := { app X‚ÇÑ := ((Œ±.app _).app _).app _ }
      naturality X‚ÇÉ Y‚ÇÉ f‚ÇÉ := by
        ext X‚ÇÑ
        exact ((Œ±.app X‚ÇÅ).app X‚ÇÇ).naturality ((F.map f‚ÇÉ).app X‚ÇÑ) }
    naturality X‚ÇÇ Y‚ÇÇ f‚ÇÇ := by
      ext X‚ÇÉ X‚ÇÑ
      exact congr_app ((Œ±.app X‚ÇÅ).naturality f‚ÇÇ) _ }
  naturality X‚ÇÅ Y‚ÇÅ f‚ÇÅ := by
    ext X‚ÇÇ X‚ÇÉ X‚ÇÑ
    exact congr_app (congr_app (Œ±.naturality f‚ÇÅ) X‚ÇÇ) ((F.obj X‚ÇÉ).obj X‚ÇÑ)

end Pentagon

variable {F}

open Pentagon in
structure Pentagon : Prop where
  natTrans‚ÇÅ‚ÇÇ_comp_natTrans‚ÇÇ‚ÇÉ_comp_natTrans‚ÇÉ‚ÇÑ :
    natTrans‚ÇÅ‚ÇÇ Œ± ‚â´ natTrans‚ÇÇ‚ÇÉ Œ± ‚â´ natTrans‚ÇÉ‚ÇÑ Œ± = natTrans‚ÇÅ‚ÇÖ Œ± ‚â´ natTrans‚ÇÖ‚ÇÑ Œ± := by aesop_cat

structure Triangle (Œµ : C) (leftUnitor : F.obj Œµ ‚âÖ ùü≠ C)
    (rightUnitor : F.flip.obj Œµ ‚âÖ ùü≠ C) : Prop where
  -- there is some little abuse of defeq here...
  triangle : ((flipFunctor _ _ _).map Œ±).app Œµ ‚â´
    (flipFunctor _ _ _).map (whiskerRight leftUnitor.hom F.flip) =
      whiskerRight rightUnitor.hom F

end NatTrans

namespace MonoidalCategory

lemma pentagon_curriedAssociatorNatIso_hom [MonoidalCategory C] :
    NatTrans.Pentagon (curriedAssociatorNatIso C).hom where

def ofBifunctor (unit : C) (F : C ‚•§ C ‚•§ C) (Œ± : bifunctorComp‚ÇÅ‚ÇÇ F F ‚âÖ bifunctorComp‚ÇÇ‚ÇÉ F F)
    (leftUnitor : F.obj unit ‚âÖ ùü≠ C) (rightUnitor : F.flip.obj unit ‚âÖ ùü≠ C)
    (pentagon : NatTrans.Pentagon Œ±.hom)
    (triangle : NatTrans.Triangle Œ±.hom unit leftUnitor rightUnitor) :
    MonoidalCategory C where
  tensorUnit := unit
  tensorObj X‚ÇÅ X‚ÇÇ := (F.obj X‚ÇÅ).obj X‚ÇÇ
  whiskerLeft X‚ÇÅ _ _ f‚ÇÇ := (F.obj X‚ÇÅ).map f‚ÇÇ
  whiskerRight f‚ÇÅ X‚ÇÇ := (F.map f‚ÇÅ).app X‚ÇÇ
  associator X‚ÇÅ X‚ÇÇ X‚ÇÉ := ((Œ±.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ
  leftUnitor := leftUnitor.app
  rightUnitor := rightUnitor.app
  rightUnitor_naturality _ := rightUnitor.hom.naturality _
  associator_naturality {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ} f‚ÇÅ f‚ÇÇ f‚ÇÉ := by
    have h‚ÇÅ := congr_app (congr_app (Œ±.hom.naturality f‚ÇÅ) X‚ÇÇ) X‚ÇÉ
    have h‚ÇÇ := congr_app ((Œ±.hom.app Y‚ÇÅ).naturality f‚ÇÇ) X‚ÇÉ
    dsimp at h‚ÇÅ h‚ÇÇ
    simp [‚Üê reassoc_of% h‚ÇÅ, reassoc_of% h‚ÇÇ]
  pentagon X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ :=
    congr_app (congr_app (congr_app
      (congr_app pentagon.natTrans‚ÇÅ‚ÇÇ_comp_natTrans‚ÇÇ‚ÇÉ_comp_natTrans‚ÇÉ‚ÇÑ X‚ÇÅ) X‚ÇÇ) X‚ÇÉ) X‚ÇÑ
  triangle X‚ÇÅ X‚ÇÉ :=
    congr_app (congr_app triangle.triangle X‚ÇÅ) X‚ÇÉ

end MonoidalCategory

end CategoryTheory
