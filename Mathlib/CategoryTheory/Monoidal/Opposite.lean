/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.CategoryTheory.Monoidal.Free.Coherence
import Mathlib.Tactic.CategoryTheory.Coherence

#align_import category_theory.monoidal.opposite from "leanprover-community/mathlib"@"14b69e9f3c16630440a2cbd46f1ddad0d561dee7"

/-!
# Monoidal opposites

We write `C·µê·µí·µñ` for the monoidal opposite of a monoidal category `C`.
-/


universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variable {C : Type u‚ÇÅ}

namespace CategoryTheory

open CategoryTheory.MonoidalCategory

/-- The type of objects of the opposite (or "reverse") monoidal category.
Use the notation `C·¥π·µí·µñ`. -/
-- @[nolint has_nonempty_instance] -- Porting note(#5171): This linter does not exist yet.
structure MonoidalOpposite (C : Type u‚ÇÅ) where
  /-- The object of `MonoidalOpposite C` that represents `x : C`. -/ mop ::
  /-- The object of `C` represented by `x : MonoidalOpposite C`. -/ unmop : C
#align category_theory.monoidal_opposite CategoryTheory.MonoidalOpposite
#align category_theory.monoidal_opposite.mop CategoryTheory.MonoidalOpposite.mop
#align category_theory.monoidal_opposite.unmop CategoryTheory.MonoidalOpposite.unmop

namespace MonoidalOpposite

@[inherit_doc]
notation:max C "·¥π·µí·µñ" => MonoidalOpposite C

theorem mop_injective : Function.Injective (mop : C ‚Üí C·¥π·µí·µñ) := @mop.inj C
#align category_theory.monoidal_opposite.op_injective CategoryTheory.MonoidalOpposite.mop_injective

theorem unmop_injective : Function.Injective (unmop : C·¥π·µí·µñ ‚Üí C) :=
  fun _ _ h => congrArg mop h
#align category_theory.monoidal_opposite.unop_injective CategoryTheory.MonoidalOpposite.unmop_injective

theorem mop_inj_iff (x y : C) : mop x = mop y ‚Üî x = y := mop_injective.eq_iff
#align category_theory.monoidal_opposite.op_inj_iff CategoryTheory.MonoidalOpposite.mop_inj_iff

@[simp]
theorem unmop_inj_iff (x y : C·¥π·µí·µñ) : unmop x = unmop y ‚Üî x = y := unmop_injective.eq_iff
#align category_theory.monoidal_opposite.unop_inj_iff CategoryTheory.MonoidalOpposite.unmop_inj_iff

@[simp]
theorem mop_unmop (X : C·¥π·µí·µñ) : mop (unmop X) = X := rfl
#align category_theory.monoidal_opposite.mop_unmop CategoryTheory.MonoidalOpposite.mop_unmop

-- can't be simp bc after putting the lhs in whnf it's `X = X`
theorem unmop_mop (X : C) : unmop (mop X) = X := rfl
#align category_theory.monoidal_opposite.unmop_mop CategoryTheory.MonoidalOpposite.unmop_mop

instance monoidalOppositeCategory [Category.{v‚ÇÅ} C] : Category C·¥π·µí·µñ where
  Hom X Y := (unmop X ‚ü∂ unmop Y)·¥π·µí·µñ
  id X := mop (ùüô (unmop X))
  comp f g := mop (unmop f ‚â´ unmop g)
#align category_theory.monoidal_opposite.monoidal_opposite_category CategoryTheory.MonoidalOpposite.monoidalOppositeCategory

end MonoidalOpposite

end CategoryTheory

open CategoryTheory

open CategoryTheory.MonoidalOpposite

variable [Category.{v‚ÇÅ} C]

/-- The monoidal opposite of a morphism `f : X ‚ü∂ Y` is just `f`, thought of as `mop X ‚ü∂ mop Y`. -/
def Quiver.Hom.mop {X Y : C} (f : X ‚ü∂ Y) : mop X ‚ü∂ mop Y := MonoidalOpposite.mop f
#align quiver.hom.mop Quiver.Hom.mop

/-- We can think of a morphism `f : mop X ‚ü∂ mop Y` as a morphism `X ‚ü∂ Y`. -/
def Quiver.Hom.unmop {X Y : C·¥π·µí·µñ} (f : X ‚ü∂ Y) : unmop X ‚ü∂ unmop Y := MonoidalOpposite.unmop f
#align quiver.hom.unmop Quiver.Hom.unmop

namespace Quiver.Hom

open MonoidalOpposite renaming mop ‚Üí mop', unmop ‚Üí unmop'

theorem mop_inj {X Y : C} :
    Function.Injective (Quiver.Hom.mop : (X ‚ü∂ Y) ‚Üí (mop' X ‚ü∂ mop' Y)) :=
  fun _ _ H => congr_arg Quiver.Hom.unmop H
#align category_theory.mop_inj Quiver.Hom.mop_inj

theorem unmop_inj {X Y : C·¥π·µí·µñ} :
    Function.Injective (Quiver.Hom.unmop : (X ‚ü∂ Y) ‚Üí (unmop' X ‚ü∂ unmop' Y)) :=
  fun _ _ H => congr_arg Quiver.Hom.mop H
#align category_theory.unmop_inj Quiver.Hom.unmop_inj

@[simp]
theorem unmop_mop {X Y : C} {f : X ‚ü∂ Y} : f.mop.unmop = f :=
  rfl
#align category_theory.unmop_mop Quiver.Hom.unmop_mop

@[simp]
theorem mop_unmop {X Y : C·¥π·µí·µñ} {f : X ‚ü∂ Y} : f.unmop.mop = f :=
  rfl
#align category_theory.mop_unmop Quiver.Hom.mop_unmop

end Quiver.Hom

namespace CategoryTheory

@[simp]
theorem mop_comp {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} :
    (f ‚â´ g).mop = f.mop ‚â´ g.mop := rfl
#align category_theory.mop_comp CategoryTheory.mop_comp

@[simp]
theorem mop_id {X : C} : (ùüô X).mop = ùüô (mop X) := rfl
#align category_theory.mop_id CategoryTheory.mop_id

@[simp]
theorem unmop_comp {X Y Z : C·¥π·µí·µñ} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} :
    (f ‚â´ g).unmop = f.unmop ‚â´ g.unmop := rfl
#align category_theory.unmop_comp CategoryTheory.unmop_comp

@[simp]
theorem unmop_id {X : C·¥π·µí·µñ} : (ùüô X).unmop = ùüô (unmop X) := rfl
#align category_theory.unmop_id CategoryTheory.unmop_id

@[simp]
theorem unmop_id_mop {X : C} : (ùüô (mop X)).unmop = ùüô X := rfl
#align category_theory.unmop_id_mop CategoryTheory.unmop_id_mop

@[simp]
theorem mop_id_unmop {X : C·¥π·µí·µñ} : (ùüô (unmop X)).mop = ùüô X := rfl
#align category_theory.mop_id_unmop CategoryTheory.mop_id_unmop

variable (C)

/-- The identity functor on `C`, viewed as a functor from `C` to its monoidal opposite. -/
@[simps obj map] -- need to specify `obj, map` or else we generate `mopFunctor_obj_unmop`
def mopFunctor : C ‚•§ C·¥π·µí·µñ := Functor.mk ‚ü®mop, .mop‚ü©
/-- The identity functor on `C`, viewed as a functor from the monoidal opposite of `C` to `C`. -/
@[simps obj map] -- not necessary but the symmetry with `mopFunctor` looks nicer
def unmopFunctor : C·¥π·µí·µñ ‚•§ C := Functor.mk ‚ü®unmop, .unmop‚ü©

variable {C}

namespace Iso

/-- An isomorphism in `C` gives an isomorphism in `C·¥π·µí·µñ`. -/
abbrev mop {X Y : C} (f : X ‚âÖ Y) : mop X ‚âÖ mop Y := (mopFunctor C).mapIso f
#align category_theory.iso.mop CategoryTheory.Iso.mop

/-- An isomorphism in `C·¥π·µí·µñ` gives an isomorphism in `C`. -/
abbrev unmop {X Y : C·¥π·µí·µñ} (f : X ‚âÖ Y) : unmop X ‚âÖ unmop Y := (unmopFunctor C).mapIso f

end Iso

namespace IsIso

instance {X Y : C} (f : X ‚ü∂ Y) [IsIso f] : IsIso f.mop :=
  (mopFunctor C).map_isIso f
instance {X Y : C·¥π·µí·µñ} (f : X ‚ü∂ Y) [IsIso f] : IsIso f.unmop :=
  (unmopFunctor C).map_isIso f

end IsIso

variable [MonoidalCategory.{v‚ÇÅ} C]

open Opposite MonoidalCategory

instance monoidalCategoryOp : MonoidalCategory C·µí·µñ where
  tensorObj X Y := op (unop X ‚äó unop Y)
  whiskerLeft X _ _ f := (X.unop ‚óÅ f.unop).op
  whiskerRight f X := (f.unop ‚ñ∑ X.unop).op
  tensorHom f g := (f.unop ‚äó g.unop).op
  tensorHom_def f g := Quiver.Hom.unop_inj (tensorHom_def' _ _)
  tensorUnit := op (ùüô_ C)
  associator X Y Z := (Œ±_ (unop X) (unop Y) (unop Z)).symm.op
  leftUnitor X := (Œª_ (unop X)).symm.op
  rightUnitor X := (œÅ_ (unop X)).symm.op
  associator_naturality f g h := Quiver.Hom.unop_inj <| by simp
  leftUnitor_naturality f := Quiver.Hom.unop_inj <| by simp
  rightUnitor_naturality f := Quiver.Hom.unop_inj <| by simp
  triangle X Y := Quiver.Hom.unop_inj <| by dsimp; coherence
  pentagon W X Y Z := Quiver.Hom.unop_inj <| by dsimp; coherence
#align category_theory.monoidal_category_op CategoryTheory.monoidalCategoryOp

section OppositeLemmas

@[simp] lemma op_tensorObj (X Y : C) : op (X ‚äó Y) = op X ‚äó op Y := rfl
@[simp] lemma unop_tensorObj (X Y : C·µí·µñ) : unop (X ‚äó Y) = unop X ‚äó unop Y := rfl

@[simp] lemma op_tensorUnit : op (ùüô_ C) = ùüô_ C·µí·µñ := rfl
@[simp] lemma unop_tensorUnit : unop (ùüô_ C·µí·µñ) = ùüô_ C := rfl

@[simp] lemma op_tensorHom {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : C} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
    (f ‚äó g).op = f.op ‚äó g.op := rfl
@[simp] lemma unop_tensorHom {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : C·µí·µñ} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
    (f ‚äó g).unop = f.unop ‚äó g.unop := rfl

@[simp] lemma op_whiskerLeft (X : C) {Y Z : C} (f : Y ‚ü∂ Z) :
    (X ‚óÅ f).op = op X ‚óÅ f.op := rfl
@[simp] lemma unop_whiskerLeft (X : C·µí·µñ) {Y Z : C·µí·µñ} (f : Y ‚ü∂ Z) :
    (X ‚óÅ f).unop =  unop X ‚óÅ f.unop := rfl

@[simp] lemma op_whiskerRight {X Y : C} (f : X ‚ü∂ Y) (Z : C) :
    (f ‚ñ∑ Z).op = f.op ‚ñ∑ op Z := rfl
@[simp] lemma unop_whiskerRight {X Y : C·µí·µñ} (f : X ‚ü∂ Y) (Z : C·µí·µñ) :
    (f ‚ñ∑ Z).unop = f.unop ‚ñ∑ unop Z := rfl

@[simp] lemma op_associator (X Y Z : C) :
    (Œ±_ X Y Z).op = (Œ±_ (op X) (op Y) (op Z)).symm := rfl
@[simp] lemma unop_associator (X Y Z : C·µí·µñ) :
    (Œ±_ X Y Z).unop = (Œ±_ (unop X) (unop Y) (unop Z)).symm := rfl

@[simp] lemma op_hom_associator (X Y Z : C) :
    (Œ±_ X Y Z).hom.op = (Œ±_ (op X) (op Y) (op Z)).inv := rfl
@[simp] lemma unop_hom_associator (X Y Z : C·µí·µñ) :
    (Œ±_ X Y Z).hom.unop = (Œ±_ (unop X) (unop Y) (unop Z)).inv := rfl

@[simp] lemma op_inv_associator (X Y Z : C) :
    (Œ±_ X Y Z).inv.op = (Œ±_ (op X) (op Y) (op Z)).hom := rfl
@[simp] lemma unop_inv_associator (X Y Z : C·µí·µñ) :
    (Œ±_ X Y Z).inv.unop = (Œ±_ (unop X) (unop Y) (unop Z)).hom := rfl

@[simp] lemma op_leftUnitor (X : C) : (Œª_ X).op = (Œª_ (op X)).symm := rfl
@[simp] lemma unop_leftUnitor (X : C·µí·µñ) : (Œª_ X).unop = (Œª_ (unop X)).symm := rfl

@[simp] lemma op_hom_leftUnitor (X : C) : (Œª_ X).hom.op = (Œª_ (op X)).inv := rfl
@[simp] lemma unop_hom_leftUnitor (X : C·µí·µñ) : (Œª_ X).hom.unop = (Œª_ (unop X)).inv := rfl

@[simp] lemma op_inv_leftUnitor (X : C) : (Œª_ X).inv.op = (Œª_ (op X)).hom := rfl
@[simp] lemma unop_inv_leftUnitor (X : C·µí·µñ) : (Œª_ X).inv.unop = (Œª_ (unop X)).hom := rfl

@[simp] lemma op_rightUnitor (X : C) : (œÅ_ X).op = (œÅ_ (op X)).symm := rfl
@[simp] lemma unop_rightUnitor (X : C·µí·µñ) : (œÅ_ X).unop = (œÅ_ (unop X)).symm := rfl

@[simp] lemma op_hom_rightUnitor (X : C) : (œÅ_ X).hom.op = (œÅ_ (op X)).inv := rfl
@[simp] lemma unop_hom_rightUnitor (X : C·µí·µñ) : (œÅ_ X).hom.unop = (œÅ_ (unop X)).inv := rfl

@[simp] lemma op_inv_rightUnitor (X : C) : (œÅ_ X).inv.op = (œÅ_ (op X)).hom := rfl
@[simp] lemma unop_inv_rightUnitor (X : C·µí·µñ) : (œÅ_ X).inv.unop = (œÅ_ (unop X)).hom := rfl

end OppositeLemmas

theorem op_tensor_op {W X Y Z : C} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) : f.op ‚äó g.op = (f ‚äó g).op := rfl

theorem unop_tensor_unop {W X Y Z : C·µí·µñ} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) :
    f.unop ‚äó g.unop = (f ‚äó g).unop := rfl

instance monoidalCategoryMop : MonoidalCategory C·¥π·µí·µñ where
  tensorObj X Y := mop (unmop Y ‚äó unmop X)
  whiskerLeft X _ _ f := (f.unmop ‚ñ∑ X.unmop).mop
  whiskerRight f X := (X.unmop ‚óÅ f.unmop).mop
  tensorHom f g := (g.unmop ‚äó f.unmop).mop
  tensorHom_def f g := Quiver.Hom.unmop_inj (tensorHom_def' _ _)
  tensorUnit := mop (ùüô_ C)
  associator X Y Z := (Œ±_ (unmop Z) (unmop Y) (unmop X)).symm.mop
  leftUnitor X := (œÅ_ (unmop X)).mop
  rightUnitor X := (Œª_ (unmop X)).mop
  associator_naturality f g h := Quiver.Hom.unmop_inj <| by simp
  leftUnitor_naturality f := Quiver.Hom.unmop_inj <| by simp
  rightUnitor_naturality f := Quiver.Hom.unmop_inj <| by simp
  -- Porting note: Changed `by coherence` to `by simp` below
  triangle X Y := Quiver.Hom.unmop_inj <| by simp
  pentagon W X Y Z := Quiver.Hom.unmop_inj <| by dsimp; coherence
#align category_theory.monoidal_category_mop CategoryTheory.monoidalCategoryMop

-- it would be nice if we could autogenerate all of these somehow
section MonoidalOppositeLemmas

@[simp] lemma mop_tensorObj (X Y : C) : mop (X ‚äó Y) = mop Y ‚äó mop X := rfl
@[simp] lemma unmop_tensorObj (X Y : C·¥π·µí·µñ) : unmop (X ‚äó Y) = unmop Y ‚äó unmop X := rfl

@[simp] lemma mop_tensorUnit : mop (ùüô_ C) = ùüô_ C·¥π·µí·µñ := rfl
@[simp] lemma unmop_tensorUnit : unmop (ùüô_ C·¥π·µí·µñ) = ùüô_ C := rfl

@[simp] lemma mop_tensorHom {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : C} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
    (f ‚äó g).mop = g.mop ‚äó f.mop := rfl
@[simp] lemma unmop_tensorHom {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : C·¥π·µí·µñ} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
    (f ‚äó g).unmop = g.unmop ‚äó f.unmop := rfl

@[simp] lemma mop_whiskerLeft (X : C) {Y Z : C} (f : Y ‚ü∂ Z) :
    (X ‚óÅ f).mop = f.mop ‚ñ∑ mop X := rfl
@[simp] lemma unmop_whiskerLeft (X : C·¥π·µí·µñ) {Y Z : C·¥π·µí·µñ} (f : Y ‚ü∂ Z) :
    (X ‚óÅ f).unmop = f.unmop ‚ñ∑ unmop X := rfl

@[simp] lemma mop_whiskerRight {X Y : C} (f : X ‚ü∂ Y) (Z : C) :
    (f ‚ñ∑ Z).mop = mop Z ‚óÅ f.mop := rfl
@[simp] lemma unmop_whiskerRight {X Y : C·¥π·µí·µñ} (f : X ‚ü∂ Y) (Z : C·¥π·µí·µñ) :
    (f ‚ñ∑ Z).unmop = unmop Z ‚óÅ f.unmop := rfl

@[simp] lemma mop_associator (X Y Z : C) :
    (Œ±_ X Y Z).mop = (Œ±_ (mop Z) (mop Y) (mop X)).symm := rfl
@[simp] lemma unmop_associator (X Y Z : C·¥π·µí·µñ) :
    (Œ±_ X Y Z).unmop = (Œ±_ (unmop Z) (unmop Y) (unmop X)).symm := rfl

@[simp] lemma mop_hom_associator (X Y Z : C) :
    (Œ±_ X Y Z).hom.mop = (Œ±_ (mop Z) (mop Y) (mop X)).inv := rfl
@[simp] lemma unmop_hom_associator (X Y Z : C·¥π·µí·µñ) :
    (Œ±_ X Y Z).hom.unmop = (Œ±_ (unmop Z) (unmop Y) (unmop X)).inv := rfl

@[simp] lemma mop_inv_associator (X Y Z : C) :
    (Œ±_ X Y Z).inv.mop = (Œ±_ (mop Z) (mop Y) (mop X)).hom := rfl
@[simp] lemma unmop_inv_associator (X Y Z : C·¥π·µí·µñ) :
    (Œ±_ X Y Z).inv.unmop = (Œ±_ (unmop Z) (unmop Y) (unmop X)).hom := rfl

@[simp] lemma mop_leftUnitor (X : C) : (Œª_ X).mop = (œÅ_ (mop X)) := rfl
@[simp] lemma unmop_leftUnitor (X : C·¥π·µí·µñ) : (Œª_ X).unmop = œÅ_ (unmop X) := rfl

@[simp] lemma mop_hom_leftUnitor (X : C) : (Œª_ X).hom.mop = (œÅ_ (mop X)).hom := rfl
@[simp] lemma unmop_hom_leftUnitor (X : C·¥π·µí·µñ) : (Œª_ X).hom.unmop = (œÅ_ (unmop X)).hom := rfl

@[simp] lemma mop_inv_leftUnitor (X : C) : (Œª_ X).inv.mop = (œÅ_ (mop X)).inv := rfl
@[simp] lemma unmop_inv_leftUnitor (X : C·¥π·µí·µñ) : (Œª_ X).inv.unmop = (œÅ_ (unmop X)).inv := rfl

@[simp] lemma mop_rightUnitor (X : C) : (œÅ_ X).mop = (Œª_ (mop X)) := rfl
@[simp] lemma unmop_rightUnitor (X : C·¥π·µí·µñ) : (œÅ_ X).unmop = Œª_ (unmop X) := rfl

@[simp] lemma mop_hom_rightUnitor (X : C) : (œÅ_ X).hom.mop = (Œª_ (mop X)).hom := rfl
@[simp] lemma unmop_hom_rightUnitor (X : C·¥π·µí·µñ) : (œÅ_ X).hom.unmop = (Œª_ (unmop X)).hom := rfl

@[simp] lemma mop_inv_rightUnitor (X : C) : (œÅ_ X).inv.mop = (Œª_ (mop X)).inv := rfl
@[simp] lemma unmop_inv_rightUnitor (X : C·¥π·µí·µñ) : (œÅ_ X).inv.unmop = (Œª_ (unmop X)).inv := rfl

end MonoidalOppositeLemmas

variable (C)

/-- The (identity) equivalence between `C` and its monoidal opposite. -/
@[simps] def MonoidalOpposite.mopEquiv : C ‚âå C·¥π·µí·µñ where
  functor   := mopFunctor C
  inverse   := unmopFunctor C
  unitIso   := Iso.refl _
  counitIso := Iso.refl _

/-- The (identity) equivalence between `C·¥π·µí·µñ` and `C`. -/
@[simps!] def MonoidalOpposite.unmopEquiv : C·¥π·µí·µñ ‚âå C := (mopEquiv C).symm

-- todo: upgrade to monoidal equivalence
/-- The equivalence between `C` and its monoidal opposite's monoidal opposite. -/
@[simps!] def MonoidalOpposite.mopMopEquivalence : C·¥π·µí·µñ·¥π·µí·µñ ‚âå C :=
  .trans (MonoidalOpposite.unmopEquiv C·¥π·µí·µñ) (MonoidalOpposite.unmopEquiv C)

/-- The identification `mop X ‚äó mop Y = mop (Y ‚äó X)` as a natural isomorphism. -/
@[simps!]
def MonoidalOpposite.tensorIso :
    tensor C·¥π·µí·µñ ‚âÖ (unmopFunctor C).prod (unmopFunctor C) ‚ãô
      Prod.swap C C ‚ãô tensor C ‚ãô mopFunctor C :=
  Iso.refl _

variable {C}

/-- The identification `X ‚äó - = mop (- ‚äó unmop X)` as a natural isomorphism. -/
@[simps!]
def MonoidalOpposite.tensorLeftIso (X : C·¥π·µí·µñ) :
    tensorLeft X ‚âÖ unmopFunctor C ‚ãô tensorRight (unmop X) ‚ãô mopFunctor C :=
  Iso.refl _

/-- The identification `mop X ‚äó - = mop (- ‚äó X)` as a natural isomorphism. -/
@[simps!]
def MonoidalOpposite.tensorLeftMopIso (X : C) :
    tensorLeft (mop X) ‚âÖ unmopFunctor C ‚ãô tensorRight X ‚ãô mopFunctor C :=
  Iso.refl _

/-- The identification `unmop X ‚äó - = unmop (mop - ‚äó X)` as a natural isomorphism. -/
@[simps!]
def MonoidalOpposite.tensorLeftUnmopIso (X : C·¥π·µí·µñ) :
    tensorLeft (unmop X) ‚âÖ mopFunctor C ‚ãô tensorRight X ‚ãô unmopFunctor C :=
  Iso.refl _

/-- The identification `- ‚äó X = mop (unmop X ‚äó -)` as a natural isomorphism. -/
@[simps!]
def MonoidalOpposite.tensorRightIso (X : C·¥π·µí·µñ) :
    tensorRight X ‚âÖ unmopFunctor C ‚ãô tensorLeft (unmop X) ‚ãô mopFunctor C :=
  Iso.refl _

/-- The identification `- ‚äó mop X = mop (- ‚äó unmop X)` as a natural isomorphism. -/
@[simps!]
def MonoidalOpposite.tensorRightMopIso (X : C) :
    tensorRight (mop X) ‚âÖ unmopFunctor C ‚ãô tensorLeft X ‚ãô mopFunctor C :=
  Iso.refl _

/-- The identification `- ‚äó unmop X = unmop (X ‚äó mop -)` as a natural isomorphism. -/
@[simps!]
def MonoidalOpposite.tensorRightUnmopIso (X : C·¥π·µí·µñ) :
    tensorRight (unmop X) ‚âÖ mopFunctor C ‚ãô tensorLeft X ‚ãô unmopFunctor C :=
  Iso.refl _

end CategoryTheory
