/-
Copyright (c) 2025 Robin Carlier. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robin Carlier
-/
import Mathlib.CategoryTheory.Monoidal.ExternalProduct.Basic
import Mathlib.CategoryTheory.Functor.KanExtension.Pointwise
import Mathlib.CategoryTheory.Limits.Final

/-!
# Preservation of pointwise left Kan extensions by external products

We prove that if a functor `H' : D' ‚•§ V` is a pointwise left Kan extension of
`H : D ‚•§ V` along `L : D ‚•§ D'`, and if `K : E ‚•§ V` is any functor such that
for any `e : E`, the functor `tensorRight (K.obj e)` commutes with colimits of
shape `CostructuredArrow L d`, then the functor `H' ‚ä† K` is a pointwise left kan extension
of `H ‚ä† K` along `L.prod (ùü≠ E)`.

We also prove a similar criterion to establish that `K ‚ä† H'` is a pointwise left Kan
extendsion of `K ‚ä† H` along `(ùü≠ E).prod L`.
-/
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

namespace CategoryTheory.MonoidalCategory.ExternalProduct

noncomputable section
open scoped Prod

variable {V : Type u‚ÇÅ} [Category.{v‚ÇÅ} V] [MonoidalCategory V]
  {D : Type u‚ÇÇ} {D' : Type u‚ÇÉ} {E : Type u‚ÇÑ}
  [Category.{v‚ÇÇ} D] [Category.{v‚ÇÉ} D'] [Category.{v‚ÇÑ} E]
  {H : D ‚•§ V} {L : D ‚•§ D'} (H' : D' ‚•§ V) (Œ± : H ‚ü∂ L ‚ãô H') (K : E ‚•§ V)

/-- Given an extension `Œ± : H ‚ü∂ L ‚ãô H'`, this is the canonical extension
`H ‚ä† K ‚ü∂ L.prod (ùü≠ E) ‚ãô H' ‚ä† K` it induces through bifunctoriality of the external product. -/
abbrev extensionUnitLeft : H ‚ä† K ‚ü∂ L.prod (ùü≠ E) ‚ãô H' ‚ä† K :=
    (externalProductBifunctor D E V).map (Œ± √ó‚Çò K.leftUnitor.inv)

/-- Given an extension `Œ± : H ‚ü∂ L ‚ãô H'`, this is the canonical extension
`K ‚ä† H ‚ü∂ (ùü≠ E).prod L ‚ãô K ‚ä† H'` it induces through bifunctoriality of the external product. -/
abbrev extensionUnitRight : K ‚ä† H ‚ü∂ (ùü≠ E).prod L ‚ãô K ‚ä† H' :=
    (externalProductBifunctor E D V).map (K.leftUnitor.inv √ó‚Çò Œ±)

/-- If `H' : D' ‚•§ V` is a pointwise left Kan extension along `L : D ‚•§ D'` at `(d : D')`
and if tensoring right with an object preserves colimits in `V`,
then `H' ‚ä† K : D' √ó E ‚•§ V` is a pointwise left Kan extension along `L √ó (ùü≠ E)` at `(d, e)`
for every `e : E`. -/
def isPointwiseLeftKanExtensionAtExtensionUnitLeft
    (d : D') (P : (Functor.LeftExtension.mk H' Œ±).IsPointwiseLeftKanExtensionAt d) (e : E)
    [Limits.PreservesColimitsOfShape (CostructuredArrow L d) (tensorRight <| K.obj e)] :
    Functor.LeftExtension.mk (H' ‚ä† K) (extensionUnitLeft H' Œ± K)|>.IsPointwiseLeftKanExtensionAt
      (d, e) := by
  set cone := Functor.LeftExtension.mk (H' ‚ä† K) (extensionUnitLeft H' Œ± K)|>.coconeAt (d, e)
  let equiv := CostructuredArrow.prodEquivalence L (ùü≠ E) d e|>.symm
  apply Limits.IsColimit.ofWhiskerEquivalence equiv
  let I : CostructuredArrow L d ‚•§ (CostructuredArrow L d) √ó CostructuredArrow (ùü≠ E) e :=
    -- this definition makes it easier to prove finality of I
    (prod.rightUnitorEquivalence (CostructuredArrow L d)).inverse ‚ãô
      (ùü≠ _).prod (Functor.fromPUnit.{0} <| .mk <| ùüô _)
  letI : I.Final := by
    letI : Functor.fromPUnit.{0} (.mk (ùüô e) : CostructuredArrow (ùü≠ E) e)|>.Final :=
      Functor.final_fromPUnit_of_isTerminal <| CostructuredArrow.mkIdTerminal (S := ùü≠ E) (Y := e)
    apply Iff.mp <| Functor.final_iff_final_comp
      (F := (prod.rightUnitorEquivalence <| CostructuredArrow L d).inverse)
      (G := (ùü≠ _).prod <| Functor.fromPUnit.{0} (.mk (ùüô e) : CostructuredArrow (ùü≠ E) e))
    infer_instance
  apply Functor.Final.isColimitWhiskerEquiv I (Limits.Cocone.whisker equiv.functor cone)|>.toFun
  -- through all the equivalences above, the new cocone we consider is in fact
  -- `tensorRight (K.obj e)|>.mapCocone <| (Functor.LeftExtension.mk H' Œ±).coconeAt d`
  let diag_iso :
      (CostructuredArrow.proj L d ‚ãô H) ‚ãô tensorRight (K.obj e) ‚âÖ
      I ‚ãô equiv.functor ‚ãô CostructuredArrow.proj (L.prod <| ùü≠ E) (d, e) ‚ãô H ‚ä† K :=
    NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _)
  apply Limits.IsColimit.equivOfNatIsoOfIso diag_iso
    (d := Limits.Cocone.whisker I (Limits.Cocone.whisker equiv.functor cone))
    (c := tensorRight (K.obj e)|>.mapCocone <| (Functor.LeftExtension.mk H' Œ±).coconeAt d)
    (Limits.Cocones.ext <| .refl _)|>.toFun
  exact Limits.PreservesColimit.preserves (F := tensorRight <| K.obj e) P|>.some

/-- If `H' : D' ‚•§ V` is a pointwise left Kan extension along `L : D ‚•§ D'`,
and if tensoring right with an object preserves colimits in `V`
then `H' ‚ä† K : D' √ó E ‚•§ V` is a pointwise left Kan extension along `L √ó (ùü≠ E)`. -/
def isPointwiseLeftKanExtensionExtensionUnitLeft
    [‚àÄ d : D', ‚àÄ e : E,
      Limits.PreservesColimitsOfShape (CostructuredArrow L d) (tensorRight <| K.obj e)]
    (P : (Functor.LeftExtension.mk H' Œ±).IsPointwiseLeftKanExtension) :
    Functor.LeftExtension.mk (H' ‚ä† K) (extensionUnitLeft H' Œ± K)|>.IsPointwiseLeftKanExtension :=
  fun ‚ü®d, e‚ü© ‚Ü¶ isPointwiseLeftKanExtensionAtExtensionUnitLeft H' Œ± K d (P d) e

/-- If `H' : D' ‚•§ V` is a pointwise left Kan extension along `L : D ‚•§ D'` at `d : D'` and
if tensoring left with an object preserves colimits in `V`,
then `K ‚ä† H' : D' √ó E ‚•§ V` is a pointwise left Kan extension along `(ùü≠ E) √ó L` at `(e, d)` for
every `e`. -/
def isPointwiseLeftKanExtensionAtExtensionUnitRight
    (d : D') (P : (Functor.LeftExtension.mk H' Œ±).IsPointwiseLeftKanExtensionAt d) (e : E)
    [Limits.PreservesColimitsOfShape (CostructuredArrow L d) (tensorLeft <| K.obj e)] :
    (Functor.LeftExtension.mk (K ‚ä† H')
      (extensionUnitRight H' Œ± K)).IsPointwiseLeftKanExtensionAt (e, d) := by
  set cone := Functor.LeftExtension.mk (K ‚ä† H')
    (extensionUnitRight H' Œ± K)|>.coconeAt (e, d)
  let equiv := CostructuredArrow.prodEquivalence (ùü≠ E) L e d|>.symm
  apply Limits.IsColimit.ofWhiskerEquivalence equiv
  let I : CostructuredArrow L d ‚•§ CostructuredArrow (ùü≠ E) e √ó CostructuredArrow L d :=
    -- this definition makes it easier to prove finality of I
    (prod.leftUnitorEquivalence <| CostructuredArrow L d).inverse ‚ãô
      (Functor.fromPUnit.{0} <| .mk <| ùüô _).prod (ùü≠ _)
  letI : I.Final := by
    letI : Functor.fromPUnit.{0} (.mk (ùüô e) : CostructuredArrow (ùü≠ E) e)|>.Final :=
      Functor.final_fromPUnit_of_isTerminal <| CostructuredArrow.mkIdTerminal (S := ùü≠ E) (Y := e)
    apply Iff.mp <| Functor.final_iff_final_comp
      (F := (prod.leftUnitorEquivalence <| CostructuredArrow L d).inverse)
      (G := Functor.fromPUnit.{0} (.mk (ùüô e) : CostructuredArrow (ùü≠ E) e)|>.prod <| ùü≠ _)
    infer_instance
  apply Functor.Final.isColimitWhiskerEquiv I (Limits.Cocone.whisker equiv.functor cone)|>.toFun
  -- through all the equivalences above, the new cocone we consider is in fact
  -- `(tensorLeft <| K.obj e).mapCocone <| (Functor.LeftExtension.mk H' Œ±).coconeAt d`
  let diag_iso :
      (CostructuredArrow.proj L d ‚ãô H) ‚ãô tensorLeft (K.obj e) ‚âÖ
      I ‚ãô equiv.functor ‚ãô CostructuredArrow.proj (ùü≠ E|>.prod L) (e, d) ‚ãô K ‚ä† H :=
    NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _)
  apply Limits.IsColimit.equivOfNatIsoOfIso diag_iso
    (d := Limits.Cocone.whisker I <| Limits.Cocone.whisker equiv.functor cone)
    (c := (tensorLeft <| K.obj e).mapCocone <| (Functor.LeftExtension.mk H' Œ±).coconeAt d)
    (Limits.Cocones.ext <| .refl _)|>.toFun
  exact Limits.PreservesColimit.preserves (F := tensorLeft <| K.obj e) P|>.some

/-- If `H' : D' ‚•§ V` is a pointwise left Kan extension along `L : D ‚•§ D'` and
if tensoring left with an object preserves colimits in `V`,
then `K ‚ä† H' : D' √ó E ‚•§ V` is a pointwise left Kan extension along `(ùü≠ E) √ó L`. -/
def isPointwiseLeftKanExtensionExtensionUnitRight
    [‚àÄ d : D', ‚àÄ e : E,
      Limits.PreservesColimitsOfShape (CostructuredArrow L d) (tensorLeft <| K.obj e)]
    (P : Functor.LeftExtension.mk H' Œ±|>.IsPointwiseLeftKanExtension) :
    Functor.LeftExtension.mk (K ‚ä† H') (extensionUnitRight H' Œ± K)|>.IsPointwiseLeftKanExtension :=
  fun ‚ü®e, d‚ü© ‚Ü¶ isPointwiseLeftKanExtensionAtExtensionUnitRight H' Œ± K d (P d) e

end

end CategoryTheory.MonoidalCategory.ExternalProduct
