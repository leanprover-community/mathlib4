/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.Pretriangulated

#align_import category_theory.triangulated.triangulated from "leanprover-community/mathlib"@"19786714ebe478f40b503acb4705fb058ba47303"

/-!
# Triangulated Categories

This file contains the definition of triangulated categories, which are
pretriangulated categories which satisfy the octahedron axiom.

-/


noncomputable section

namespace CategoryTheory

open Limits Category Preadditive Pretriangulated

open ZeroObject

variable (C : Type*) [Category C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ n : ‚Ñ§, Functor.Additive (shiftFunctor C n)] [Pretriangulated C]

namespace Triangulated

variable {C}

-- Porting note: see https://github.com/leanprover/lean4/issues/2188
set_option genInjectivity false in
/-- An octahedron is a type of datum whose existence is asserted by
the octahedron axiom (TR 4), see https://stacks.math.columbia.edu/tag/05QK -/
structure Octahedron
  {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C}
  {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ} (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
  {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C)
  {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C)
  {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C)
 where
  m‚ÇÅ : Z‚ÇÅ‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÉ
  m‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ
  comm‚ÇÅ : v‚ÇÅ‚ÇÇ ‚â´ m‚ÇÅ = u‚ÇÇ‚ÇÉ ‚â´ v‚ÇÅ‚ÇÉ
  comm‚ÇÇ : m‚ÇÅ ‚â´ w‚ÇÅ‚ÇÉ = w‚ÇÅ‚ÇÇ
  comm‚ÇÉ : v‚ÇÅ‚ÇÉ ‚â´ m‚ÇÉ = v‚ÇÇ‚ÇÉ
  comm‚ÇÑ : w‚ÇÅ‚ÇÉ ‚â´ u‚ÇÅ‚ÇÇ‚ü¶1‚üß' = m‚ÇÉ ‚â´ w‚ÇÇ‚ÇÉ
  mem : Triangle.mk m‚ÇÅ m‚ÇÉ (w‚ÇÇ‚ÇÉ ‚â´ v‚ÇÅ‚ÇÇ‚ü¶1‚üß') ‚àà distTriang C
gen_injective_theorems% Octahedron
#align category_theory.triangulated.octahedron CategoryTheory.Triangulated.Octahedron

instance (X : C) :
    Nonempty (Octahedron (comp_id (ùüô X)) (contractible_distinguished X)
      (contractible_distinguished X) (contractible_distinguished X)) := by
  refine' ‚ü®‚ü®0, 0, _, _, _, _, isomorphic_distinguished _ (contractible_distinguished (0 : C)) _
    (Triangle.isoMk _ _ (by rfl) (by rfl) (by rfl))‚ü©‚ü©
  all_goals apply Subsingleton.elim

namespace Octahedron

attribute [reassoc] comm‚ÇÅ comm‚ÇÇ comm‚ÇÉ comm‚ÇÑ

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C}
  {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ} {comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ}
  {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C}
  {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C}
  {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C}
  (h : Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ)

/-- The triangle `Z‚ÇÅ‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÇ‚ü¶1‚üß` given by an octahedron. -/
@[simps!]
def triangle : Triangle C :=
  Triangle.mk h.m‚ÇÅ h.m‚ÇÉ (w‚ÇÇ‚ÇÉ ‚â´ v‚ÇÅ‚ÇÇ‚ü¶1‚üß')
#align category_theory.triangulated.octahedron.triangle CategoryTheory.Triangulated.Octahedron.triangle

/-- The first morphism of triangles given by an octahedron. -/
@[simps]
def triangleMorphism‚ÇÅ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚ü∂ Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ
    where
  hom‚ÇÅ := ùüô X‚ÇÅ
  hom‚ÇÇ := u‚ÇÇ‚ÇÉ
  hom‚ÇÉ := h.m‚ÇÅ
  comm‚ÇÅ := by
    dsimp
    rw [id_comp, comm]
  comm‚ÇÇ := h.comm‚ÇÅ
  comm‚ÇÉ := by
    dsimp
    simpa only [Functor.map_id, comp_id] using h.comm‚ÇÇ.symm
#align category_theory.triangulated.octahedron.triangle_morphism‚ÇÅ CategoryTheory.Triangulated.Octahedron.triangleMorphism‚ÇÅ

/-- The second morphism of triangles given an octahedron. -/
@[simps]
def triangleMorphism‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚ü∂ Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ
    where
  hom‚ÇÅ := u‚ÇÅ‚ÇÇ
  hom‚ÇÇ := ùüô X‚ÇÉ
  hom‚ÇÉ := h.m‚ÇÉ
  comm‚ÇÅ := by
    dsimp
    rw [comp_id, comm]
  comm‚ÇÇ := by
    dsimp
    rw [id_comp, h.comm‚ÇÉ]
  comm‚ÇÉ := h.comm‚ÇÑ
#align category_theory.triangulated.octahedron.triangle_morphism‚ÇÇ CategoryTheory.Triangulated.Octahedron.triangleMorphism‚ÇÇ


variable (u‚ÇÅ‚ÇÇ u‚ÇÅ‚ÇÉ u‚ÇÇ‚ÇÉ comm h‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÉ h‚ÇÇ‚ÇÉ)

/-- When two diagrams are isomorphic, an octahedron for one gives an octahedron for the other. -/
def ofIso {X‚ÇÅ' X‚ÇÇ' X‚ÇÉ' Z‚ÇÅ‚ÇÇ' Z‚ÇÇ‚ÇÉ' Z‚ÇÅ‚ÇÉ' : C} (u‚ÇÅ‚ÇÇ' : X‚ÇÅ' ‚ü∂ X‚ÇÇ') (u‚ÇÇ‚ÇÉ' : X‚ÇÇ' ‚ü∂ X‚ÇÉ')
    (e‚ÇÅ : X‚ÇÅ ‚âÖ X‚ÇÅ') (e‚ÇÇ : X‚ÇÇ ‚âÖ X‚ÇÇ')(e‚ÇÉ : X‚ÇÉ ‚âÖ X‚ÇÉ')
    (comm‚ÇÅ‚ÇÇ : u‚ÇÅ‚ÇÇ ‚â´ e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ u‚ÇÅ‚ÇÇ') (comm‚ÇÇ‚ÇÉ : u‚ÇÇ‚ÇÉ ‚â´ e‚ÇÉ.hom = e‚ÇÇ.hom ‚â´ u‚ÇÇ‚ÇÉ')
    (v‚ÇÅ‚ÇÇ' : X‚ÇÇ' ‚ü∂ Z‚ÇÅ‚ÇÇ') (w‚ÇÅ‚ÇÇ' : Z‚ÇÅ‚ÇÇ' ‚ü∂ X‚ÇÅ'‚ü¶(1 : ‚Ñ§)‚üß)
    (h‚ÇÅ‚ÇÇ' : Triangle.mk u‚ÇÅ‚ÇÇ' v‚ÇÅ‚ÇÇ' w‚ÇÅ‚ÇÇ' ‚àà distTriang C)
    (v‚ÇÇ‚ÇÉ' : X‚ÇÉ' ‚ü∂ Z‚ÇÇ‚ÇÉ') (w‚ÇÇ‚ÇÉ' : Z‚ÇÇ‚ÇÉ' ‚ü∂ X‚ÇÇ'‚ü¶(1 : ‚Ñ§)‚üß)
    (h‚ÇÇ‚ÇÉ' : Triangle.mk u‚ÇÇ‚ÇÉ' v‚ÇÇ‚ÇÉ' w‚ÇÇ‚ÇÉ' ‚àà distTriang C)
    (v‚ÇÅ‚ÇÉ' : X‚ÇÉ' ‚ü∂ Z‚ÇÅ‚ÇÉ') (w‚ÇÅ‚ÇÉ' : Z‚ÇÅ‚ÇÉ' ‚ü∂ X‚ÇÅ'‚ü¶(1 : ‚Ñ§)‚üß)
    (h‚ÇÅ‚ÇÉ' : Triangle.mk (u‚ÇÅ‚ÇÇ' ‚â´ u‚ÇÇ‚ÇÉ') v‚ÇÅ‚ÇÉ' w‚ÇÅ‚ÇÉ' ‚àà distTriang C)
    (H : Octahedron rfl h‚ÇÅ‚ÇÇ' h‚ÇÇ‚ÇÉ' h‚ÇÅ‚ÇÉ') : Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ := by
  let iso‚ÇÅ‚ÇÇ := isoTriangleOfIso‚ÇÅ‚ÇÇ _ _ h‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ' e‚ÇÅ e‚ÇÇ comm‚ÇÅ‚ÇÇ
  let iso‚ÇÇ‚ÇÉ := isoTriangleOfIso‚ÇÅ‚ÇÇ _ _ h‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ' e‚ÇÇ e‚ÇÉ comm‚ÇÇ‚ÇÉ
  let iso‚ÇÅ‚ÇÉ := isoTriangleOfIso‚ÇÅ‚ÇÇ _ _ h‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ' e‚ÇÅ e‚ÇÉ (by
    dsimp; rw [‚Üê comm, assoc, ‚Üê reassoc_of% comm‚ÇÅ‚ÇÇ, comm‚ÇÇ‚ÇÉ])
  have eq‚ÇÅ‚ÇÇ := iso‚ÇÅ‚ÇÇ.hom.comm‚ÇÇ
  have eq‚ÇÅ‚ÇÇ' := iso‚ÇÅ‚ÇÇ.hom.comm‚ÇÉ
  have eq‚ÇÅ‚ÇÉ := iso‚ÇÅ‚ÇÉ.hom.comm‚ÇÇ
  have eq‚ÇÅ‚ÇÉ' := iso‚ÇÅ‚ÇÉ.hom.comm‚ÇÉ
  have eq‚ÇÇ‚ÇÉ := iso‚ÇÇ‚ÇÉ.hom.comm‚ÇÇ
  have eq‚ÇÇ‚ÇÉ' := iso‚ÇÇ‚ÇÉ.hom.comm‚ÇÉ
  have rel‚ÇÅ‚ÇÇ := H.triangleMorphism‚ÇÅ.comm‚ÇÇ
  have rel‚ÇÅ‚ÇÉ := H.triangleMorphism‚ÇÅ.comm‚ÇÉ
  have rel‚ÇÇ‚ÇÇ := H.triangleMorphism‚ÇÇ.comm‚ÇÇ
  have rel‚ÇÇ‚ÇÉ := H.triangleMorphism‚ÇÇ.comm‚ÇÉ
  dsimp [iso‚ÇÅ‚ÇÇ, iso‚ÇÇ‚ÇÉ, iso‚ÇÅ‚ÇÉ] at eq‚ÇÅ‚ÇÇ eq‚ÇÅ‚ÇÇ' eq‚ÇÅ‚ÇÉ eq‚ÇÅ‚ÇÉ' eq‚ÇÇ‚ÇÉ eq‚ÇÇ‚ÇÉ' rel‚ÇÅ‚ÇÇ rel‚ÇÅ‚ÇÉ rel‚ÇÇ‚ÇÇ rel‚ÇÇ‚ÇÉ
  rw [Functor.map_id, comp_id] at rel‚ÇÅ‚ÇÉ
  rw [id_comp] at rel‚ÇÇ‚ÇÇ
  refine' ‚ü®iso‚ÇÅ‚ÇÇ.hom.hom‚ÇÉ ‚â´ H.m‚ÇÅ ‚â´ iso‚ÇÅ‚ÇÉ.inv.hom‚ÇÉ,
    iso‚ÇÅ‚ÇÉ.hom.hom‚ÇÉ ‚â´ H.m‚ÇÉ ‚â´ iso‚ÇÇ‚ÇÉ.inv.hom‚ÇÉ, _, _, _, _, _‚ü©
  ¬∑ rw [reassoc_of% eq‚ÇÅ‚ÇÇ, ‚Üê cancel_mono iso‚ÇÅ‚ÇÉ.hom.hom‚ÇÉ, assoc, assoc, assoc, assoc,
      iso‚ÇÅ‚ÇÉ.inv_hom_id_triangle_hom‚ÇÉ, eq‚ÇÅ‚ÇÉ, reassoc_of% comm‚ÇÇ‚ÇÉ, ‚Üê rel‚ÇÅ‚ÇÇ]
    dsimp
    rw [comp_id]
  ¬∑ rw [‚Üê cancel_mono (e‚ÇÅ.hom‚ü¶(1 : ‚Ñ§)‚üß'), eq‚ÇÅ‚ÇÇ', assoc, assoc, assoc, eq‚ÇÅ‚ÇÉ',
      iso‚ÇÅ‚ÇÉ.inv_hom_id_triangle_hom‚ÇÉ_assoc, ‚Üê rel‚ÇÅ‚ÇÉ]
  ¬∑ rw [reassoc_of% eq‚ÇÅ‚ÇÉ, reassoc_of% rel‚ÇÇ‚ÇÇ, ‚Üê cancel_mono iso‚ÇÇ‚ÇÉ.hom.hom‚ÇÉ, assoc, assoc,
      iso‚ÇÇ‚ÇÉ.inv_hom_id_triangle_hom‚ÇÉ, eq‚ÇÇ‚ÇÉ]
    dsimp
    rw [comp_id]
  ¬∑ rw [‚Üê cancel_mono (e‚ÇÇ.hom‚ü¶(1 : ‚Ñ§)‚üß'), assoc, assoc, assoc,assoc, eq‚ÇÇ‚ÇÉ',
      iso‚ÇÇ‚ÇÉ.inv_hom_id_triangle_hom‚ÇÉ_assoc, ‚Üê rel‚ÇÇ‚ÇÉ, ‚Üê Functor.map_comp, comm‚ÇÅ‚ÇÇ,
      Functor.map_comp, reassoc_of% eq‚ÇÅ‚ÇÉ']
  ¬∑ refine' isomorphic_distinguished _ H.mem _ _
    refine' Triangle.isoMk _ _ (Triangle.œÄ‚ÇÉ.mapIso iso‚ÇÅ‚ÇÇ) (Triangle.œÄ‚ÇÉ.mapIso iso‚ÇÅ‚ÇÉ)
      (Triangle.œÄ‚ÇÉ.mapIso iso‚ÇÇ‚ÇÉ) (by simp) (by simp) _
    ¬∑ dsimp
      rw [assoc, ‚Üê Functor.map_comp, eq‚ÇÅ‚ÇÇ, Functor.map_comp, reassoc_of% eq‚ÇÇ‚ÇÉ']

end Octahedron

end Triangulated

open Triangulated

/-- A triangulated category is a pretriangulated category which satisfies
the octahedron axiom (TR 4), see https://stacks.math.columbia.edu/tag/05QK -/
class IsTriangulated : Prop where
  /-- the octahedron axiom (TR 4) -/
  octahedron_axiom :
    ‚àÄ {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C}
      {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ} (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
      {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C)
      {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C)
      {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C),
      Nonempty (Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ)
#align category_theory.is_triangulated CategoryTheory.IsTriangulated

namespace Triangulated

variable {C}
variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C}
  {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ} (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
  {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C}
  {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C}
  {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C}
  (h : Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ)

/-- A choice of octahedron given by the octahedron axiom. -/
def someOctahedron' [IsTriangulated C] : Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ :=
  (IsTriangulated.octahedron_axiom comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ).some

/-- A choice of octahedron given by the octahedron axiom. -/
def someOctahedron [IsTriangulated C]
    {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C}
    {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ} (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
    {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C)
    {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C)
    {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C) :
    Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ :=
  someOctahedron' _
#align category_theory.triangulated.some_octahedron CategoryTheory.Triangulated.someOctahedron

end Triangulated

variable {C}

/-- Constructor for `IsTriangulated C` which shows that it suffices to obtain an octahedron
for a suitable isomorphic diagram instead of the given diagram. -/
lemma IsTriangulated.mk' (h : ‚àÄ ‚¶ÉX‚ÇÅ' X‚ÇÇ' X‚ÇÉ' : C‚¶Ñ (u‚ÇÅ‚ÇÇ' : X‚ÇÅ' ‚ü∂ X‚ÇÇ') (u‚ÇÇ‚ÇÉ' : X‚ÇÇ' ‚ü∂ X‚ÇÉ'),
    ‚àÉ (X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C) (u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ) (e‚ÇÅ : X‚ÇÅ' ‚âÖ X‚ÇÅ) (e‚ÇÇ : X‚ÇÇ' ‚âÖ X‚ÇÇ)
    (e‚ÇÉ : X‚ÇÉ' ‚âÖ X‚ÇÉ) (_ : u‚ÇÅ‚ÇÇ' ‚â´ e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ u‚ÇÅ‚ÇÇ)
    (_ : u‚ÇÇ‚ÇÉ' ‚â´ e‚ÇÉ.hom = e‚ÇÇ.hom ‚â´ u‚ÇÇ‚ÇÉ)
    (v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ) (w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶1‚üß) (h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C)
    (v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ) (w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶1‚üß) (h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C)
    (v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ) (w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶1‚üß)
      (h‚ÇÅ‚ÇÉ : Triangle.mk (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C),
        Nonempty (Octahedron rfl h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ)) :
    IsTriangulated C where
  octahedron_axiom {X‚ÇÅ' X‚ÇÇ' X‚ÇÉ' Z‚ÇÅ‚ÇÇ' Z‚ÇÇ‚ÇÉ' Z‚ÇÅ‚ÇÉ' u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ' u‚ÇÅ‚ÇÉ'} comm'
    {v‚ÇÅ‚ÇÇ' w‚ÇÅ‚ÇÇ'} h‚ÇÅ‚ÇÇ' {v‚ÇÇ‚ÇÉ' w‚ÇÇ‚ÇÉ'} h‚ÇÇ‚ÇÉ' {v‚ÇÅ‚ÇÉ' w‚ÇÅ‚ÇÉ'} h‚ÇÅ‚ÇÉ' := by
    obtain ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ, Z‚ÇÅ‚ÇÇ, Z‚ÇÇ‚ÇÉ, Z‚ÇÅ‚ÇÉ, u‚ÇÅ‚ÇÇ, u‚ÇÇ‚ÇÉ, e‚ÇÅ, e‚ÇÇ, e‚ÇÉ, comm‚ÇÅ‚ÇÇ, comm‚ÇÇ‚ÇÉ,
      v‚ÇÅ‚ÇÇ, w‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ, v‚ÇÇ‚ÇÉ, w‚ÇÇ‚ÇÉ, h‚ÇÇ‚ÇÉ, v‚ÇÅ‚ÇÉ, w‚ÇÅ‚ÇÉ, h‚ÇÅ‚ÇÉ, H‚ü© := h u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ'
    exact ‚ü®Octahedron.ofIso u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ' u‚ÇÅ‚ÇÉ' comm' h‚ÇÅ‚ÇÇ' h‚ÇÇ‚ÇÉ' h‚ÇÅ‚ÇÉ'
      u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ e‚ÇÅ e‚ÇÇ e‚ÇÉ comm‚ÇÅ‚ÇÇ comm‚ÇÇ‚ÇÉ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ H.some‚ü©

end CategoryTheory
