/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou

! This file was ported from Lean 3 source module category_theory.triangulated.triangulated
! leanprover-community/mathlib commit 19786714ebe478f40b503acb4705fb058ba47303
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathlib.CategoryTheory.Triangulated.Pretriangulated

/-!
# Triangulated Categories

This file contains the definition of triangulated categories, which are
pretriangulated categories which satisfy the octahedron axiom.

-/


noncomputable section

namespace CategoryTheory

open Limits Category Preadditive Pretriangulated

open ZeroObject

variable (C : Type _) [Category C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ n : ‚Ñ§, Functor.Additive (shiftFunctor C n)] [Pretriangulated C]

namespace Triangulated

-- porting note: this structure was added because otherwise Lean4 would complain that
-- the definition of `Octahedron` contains free variables
/-- in a pretriangulated category `C`, `i : OctahedronInput C` consists of two composable
morphisms `u‚ÇÅ‚ÇÇ`, `u‚ÇÇ‚ÇÉ`, their composition `u‚ÇÅ‚ÇÉ`, and three distinguished triangles which
provide "cones" for `u‚ÇÅ‚ÇÇ`, `u‚ÇÇ‚ÇÉ`, `u‚ÇÅ‚ÇÉ`. The octahedron axiom `Octahedron i` for this
input `i` shall say that the these three cones fit into a suitable distinguished triangle. -/
structure OctahedronInput where
  {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C}
  {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ}
  {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ}
  {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ}
  (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
  {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß}
  (h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C)
  {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß}
  (h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C)
  {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß}
  (h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C)

variable {C}

/-- An octahedron is a type of datum whose existence is asserted by
the octahedron axiom (TR 4), see https://stacks.math.columbia.edu/tag/05QK -/
structure Octahedron (i : OctahedronInput C) where
  m‚ÇÅ : i.Z‚ÇÅ‚ÇÇ ‚ü∂ i.Z‚ÇÅ‚ÇÉ
  m‚ÇÉ : i.Z‚ÇÅ‚ÇÉ ‚ü∂ i.Z‚ÇÇ‚ÇÉ
  comm‚ÇÅ : i.v‚ÇÅ‚ÇÇ ‚â´ m‚ÇÅ = i.u‚ÇÇ‚ÇÉ ‚â´ i.v‚ÇÅ‚ÇÉ
  comm‚ÇÇ : m‚ÇÅ ‚â´ i.w‚ÇÅ‚ÇÉ = i.w‚ÇÅ‚ÇÇ
  comm‚ÇÉ : i.v‚ÇÅ‚ÇÉ ‚â´ m‚ÇÉ = i.v‚ÇÇ‚ÇÉ
  comm‚ÇÑ : i.w‚ÇÅ‚ÇÉ ‚â´ i.u‚ÇÅ‚ÇÇ‚ü¶1‚üß' = m‚ÇÉ ‚â´ i.w‚ÇÇ‚ÇÉ
  mem : Triangle.mk m‚ÇÅ m‚ÇÉ (i.w‚ÇÇ‚ÇÉ ‚â´ i.v‚ÇÅ‚ÇÇ‚ü¶1‚üß') ‚àà distTriang C
#align category_theory.triangulated.octahedron CategoryTheory.Triangulated.Octahedron

instance (X : C) :
    Nonempty (Octahedron (OctahedronInput.mk (comp_id (ùüô X)) (contractible_distinguished X)
      (contractible_distinguished X)
      (contractible_distinguished X))) := by
  refine' ‚ü®‚ü®0, 0, _, _, _, _, isomorphic_distinguished _ (contractible_distinguished (0 : C)) _
    (Triangle.isoMk _ _ (by rfl) (by rfl) (by rfl) (by simp) (by simp) (by simp))‚ü©‚ü©
  all_goals apply Subsingleton.elim

namespace Octahedron

attribute [reassoc] comm‚ÇÅ comm‚ÇÇ comm‚ÇÉ comm‚ÇÑ

variable {i : OctahedronInput C} (h : Octahedron i)

/-- The triangle `Z‚ÇÅ‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÇ‚ü¶1‚üß` given by an octahedron. -/
@[simps!]
def triangle : Triangle C :=
  Triangle.mk h.m‚ÇÅ h.m‚ÇÉ (i.w‚ÇÇ‚ÇÉ ‚â´ i.v‚ÇÅ‚ÇÇ‚ü¶1‚üß')
#align category_theory.triangulated.octahedron.triangle CategoryTheory.Triangulated.Octahedron.triangle

/-- The first morphism of triangles given by an octahedron. -/
@[simps]
def triangleMorphism‚ÇÅ : Triangle.mk i.u‚ÇÅ‚ÇÇ i.v‚ÇÅ‚ÇÇ i.w‚ÇÅ‚ÇÇ ‚ü∂ Triangle.mk i.u‚ÇÅ‚ÇÉ i.v‚ÇÅ‚ÇÉ i.w‚ÇÅ‚ÇÉ
    where
  hom‚ÇÅ := ùüô i.X‚ÇÅ
  hom‚ÇÇ := i.u‚ÇÇ‚ÇÉ
  hom‚ÇÉ := h.m‚ÇÅ
  comm‚ÇÅ := by
    dsimp
    rw [id_comp, i.comm]
  comm‚ÇÇ := h.comm‚ÇÅ
  comm‚ÇÉ := by
    dsimp
    simpa only [Functor.map_id, comp_id] using h.comm‚ÇÇ.symm
#align category_theory.triangulated.octahedron.triangle_morphism‚ÇÅ CategoryTheory.Triangulated.Octahedron.triangleMorphism‚ÇÅ

/-- The second morphism of triangles given an octahedron. -/
@[simps]
def triangleMorphism‚ÇÇ : Triangle.mk i.u‚ÇÅ‚ÇÉ i.v‚ÇÅ‚ÇÉ i.w‚ÇÅ‚ÇÉ ‚ü∂ Triangle.mk i.u‚ÇÇ‚ÇÉ i.v‚ÇÇ‚ÇÉ i.w‚ÇÇ‚ÇÉ
    where
  hom‚ÇÅ := i.u‚ÇÅ‚ÇÇ
  hom‚ÇÇ := ùüô i.X‚ÇÉ
  hom‚ÇÉ := h.m‚ÇÉ
  comm‚ÇÅ := by
    dsimp
    rw [comp_id, i.comm]
  comm‚ÇÇ := by
    dsimp
    rw [id_comp, h.comm‚ÇÉ]
  comm‚ÇÉ := h.comm‚ÇÑ
#align category_theory.triangulated.octahedron.triangle_morphism‚ÇÇ CategoryTheory.Triangulated.Octahedron.triangleMorphism‚ÇÇ

/- TODO (@joelriou): show that in order to verify the existence of an octahedron, one may
replace the composable maps `u‚ÇÅ‚ÇÇ` and `u‚ÇÇ‚ÇÉ` by any isomorphic composable maps
and the given "cones" of `u‚ÇÅ‚ÇÇ`, `u‚ÇÇ‚ÇÉ`, `u‚ÇÅ‚ÇÉ` by any choice of cones. -/
end Octahedron

end Triangulated

open Triangulated

/-- A triangulated category is a pretriangulated category which satisfies
the octahedron axiom (TR 4), see https://stacks.math.columbia.edu/tag/05QK -/
class IsTriangulated where
  /-- the octahedron axiom (TR 4) -/
  octahedron_axiom :
    ‚àÄ (i : OctahedronInput C), Nonempty (Octahedron i)
#align category_theory.is_triangulated CategoryTheory.IsTriangulated

namespace Triangulated

variable {C}

/-- A choice of octahedron given by the octahedron axiom. -/
def someOctahedron' [IsTriangulated C] (i : OctahedronInput C) : Octahedron i :=
  (IsTriangulated.octahedron_axiom i).some

/-- A choice of octahedron given by the octahedron axiom. -/
def someOctahedron [IsTriangulated C]
  {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C} {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ}
  (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
  {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C)
  {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C)
  {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C) :
    Octahedron (OctahedronInput.mk comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ) :=
  someOctahedron' _
#align category_theory.triangulated.some_octahedron CategoryTheory.Triangulated.someOctahedron

end Triangulated

end CategoryTheory
