/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Shift.Opposite
import Mathlib.CategoryTheory.Shift.Pullback
import Mathlib.CategoryTheory.Triangulated.Triangulated
import Mathlib.Tactic.Linarith

/-!
# The (pre)triangulated structure on the opposite category

In this file, we shall construct the (pre)triangulated structure
on the opposite category `C·µí·µñ` of a (pre)triangulated category `C`.

The shift on `C·µí·µñ` is obtained by combining the constructions in the files
`CategoryTheory.Shift.Opposite` and `CategoryTheory.Shift.Pullback`.
When the user opens `CategoryTheory.Pretriangulated.Opposite`, the
category `C·µí·µñ` is equipped with the shift by `‚Ñ§` such that
shifting by `n : ‚Ñ§` on `C·µí·µñ` corresponds to the shift by
`-n` on `C`. This is actually a definitional equality, but the user
should not rely on this, and instead use the isomorphism
`shiftFunctorOpIso C n m hnm : shiftFunctor C·µí·µñ n ‚âÖ (shiftFunctor C m).op`
where `hnm : n + m = 0`.

Some compatibilities between the shifts on `C` and `C·µí·µñ` are also expressed through
the equivalence of categories `opShiftFunctorEquivalence C n : C·µí·µñ ‚âå C·µí·µñ` whose
functor is `shiftFunctor C·µí·µñ n` and whose inverse functor is `(shiftFunctor C n).op`.

-/

namespace CategoryTheory

open Category Limits Preadditive ZeroObject

variable (C : Type*) [Category C]

namespace Pretriangulated

variable [HasShift C ‚Ñ§]

namespace Opposite

/-- As it is unclear whether the opposite category `C·µí·µñ` should always be equipped
with the shift by `‚Ñ§` such that shifting by `n` on `C·µí·µñ` corresponds to shifting
by `-n` on `C`, the user shall have to do `open CategoryTheory.Pretriangulated.Opposite`
in order to get this shift and the (pre)triangulated structure on `C·µí·µñ`. -/

private abbrev OppositeShiftAux :=
  PullbackShift (OppositeShift C ‚Ñ§)
    (AddMonoidHom.mk' (fun (n : ‚Ñ§) => -n) (by intros; dsimp; linarith))

/-- The category `C·µí·µñ` is equipped with the shift such that the shift by `n` on `C·µí·µñ`
corresponds to the shift by `-n` on `C`. -/
noncomputable scoped instance : HasShift C·µí·µñ ‚Ñ§ :=
  (inferInstance : HasShift (OppositeShiftAux C) ‚Ñ§)

instance [Preadditive C] [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] (n : ‚Ñ§) :
    (shiftFunctor C·µí·µñ n).Additive :=
  (inferInstance : (shiftFunctor (OppositeShiftAux C) n).Additive)

end Opposite

open Opposite

/-- The shift functor on the opposite category identifies to the opposite functor
of a shift functor on the original category. -/
noncomputable def shiftFunctorOpIso (n m : ‚Ñ§) (hnm : n + m = 0) :
    shiftFunctor C·µí·µñ n ‚âÖ (shiftFunctor C m).op := eqToIso (by
  obtain rfl : m = -n := by linarith
  rfl)

variable {C}

lemma shiftFunctorZero_op_hom_app (X : C·µí·µñ) :
    (shiftFunctorZero C·µí·µñ ‚Ñ§).hom.app X = (shiftFunctorOpIso C 0 0 (zero_add 0)).hom.app X ‚â´
      ((shiftFunctorZero C ‚Ñ§).inv.app X.unop).op := by
  erw [@pullbackShiftFunctorZero_hom_app (OppositeShift C ‚Ñ§), oppositeShiftFunctorZero_hom_app]
  rfl

attribute [reassoc] op_comp unop_comp

lemma shiftFunctorZero_op_inv_app (X : C·µí·µñ) :
    (shiftFunctorZero C·µí·µñ ‚Ñ§).inv.app X =
      ((shiftFunctorZero C ‚Ñ§).hom.app X.unop).op ‚â´
      (shiftFunctorOpIso C 0 0 (zero_add 0)).inv.app X := by
  rw [‚Üê cancel_epi ((shiftFunctorZero C·µí·µñ ‚Ñ§).hom.app X), Iso.hom_inv_id_app,
    shiftFunctorZero_op_hom_app, assoc, ‚Üê op_comp_assoc, Iso.hom_inv_id_app, op_id,
    id_comp, Iso.hom_inv_id_app]

lemma shiftFunctorAdd'_op_hom_app (X : C·µí·µñ) (a‚ÇÅ a‚ÇÇ a‚ÇÉ : ‚Ñ§) (h : a‚ÇÅ + a‚ÇÇ = a‚ÇÉ)
    (b‚ÇÅ b‚ÇÇ b‚ÇÉ : ‚Ñ§) (h‚ÇÅ : a‚ÇÅ + b‚ÇÅ = 0) (h‚ÇÇ : a‚ÇÇ + b‚ÇÇ = 0) (h‚ÇÉ : a‚ÇÉ + b‚ÇÉ = 0) :
    (shiftFunctorAdd' C·µí·µñ a‚ÇÅ a‚ÇÇ a‚ÇÉ h).hom.app X =
      (shiftFunctorOpIso C _ _ h‚ÇÉ).hom.app X ‚â´
        ((shiftFunctorAdd' C b‚ÇÅ b‚ÇÇ b‚ÇÉ (by linarith)).inv.app X.unop).op ‚â´
        (shiftFunctorOpIso C _ _ h‚ÇÇ).inv.app _ ‚â´
        (shiftFunctor C·µí·µñ a‚ÇÇ).map ((shiftFunctorOpIso C _ _ h‚ÇÅ).inv.app X) := by
  erw [@pullbackShiftFunctorAdd'_hom_app (OppositeShift C ‚Ñ§) _ _ _ _ _ _ _ X
    a‚ÇÅ a‚ÇÇ a‚ÇÉ h b‚ÇÅ b‚ÇÇ b‚ÇÉ (by dsimp; linarith) (by dsimp; linarith) (by dsimp; linarith)]
  erw [oppositeShiftFunctorAdd'_hom_app]
  obtain rfl : b‚ÇÅ = -a‚ÇÅ := by linarith
  obtain rfl : b‚ÇÇ = -a‚ÇÇ := by linarith
  obtain rfl : b‚ÇÉ = -a‚ÇÉ := by linarith
  rfl

lemma shiftFunctorAdd'_op_inv_app (X : C·µí·µñ) (a‚ÇÅ a‚ÇÇ a‚ÇÉ : ‚Ñ§) (h : a‚ÇÅ + a‚ÇÇ = a‚ÇÉ)
    (b‚ÇÅ b‚ÇÇ b‚ÇÉ : ‚Ñ§) (h‚ÇÅ : a‚ÇÅ + b‚ÇÅ = 0) (h‚ÇÇ : a‚ÇÇ + b‚ÇÇ = 0) (h‚ÇÉ : a‚ÇÉ + b‚ÇÉ = 0) :
    (shiftFunctorAdd' C·µí·µñ a‚ÇÅ a‚ÇÇ a‚ÇÉ h).inv.app X =
      (shiftFunctor C·µí·µñ a‚ÇÇ).map ((shiftFunctorOpIso C _ _ h‚ÇÅ).hom.app X) ‚â´
      (shiftFunctorOpIso C _ _ h‚ÇÇ).hom.app _ ‚â´
      ((shiftFunctorAdd' C b‚ÇÅ b‚ÇÇ b‚ÇÉ (by linarith)).hom.app X.unop).op ‚â´
      (shiftFunctorOpIso C _ _ h‚ÇÉ).inv.app X := by
  rw [‚Üê cancel_epi ((shiftFunctorAdd' C·µí·µñ a‚ÇÅ a‚ÇÇ a‚ÇÉ h).hom.app X), Iso.hom_inv_id_app,
    shiftFunctorAdd'_op_hom_app X a‚ÇÅ a‚ÇÇ a‚ÇÉ h b‚ÇÅ b‚ÇÇ b‚ÇÉ h‚ÇÅ h‚ÇÇ h‚ÇÉ,
    assoc, assoc, assoc, ‚Üê Functor.map_comp_assoc, Iso.inv_hom_id_app]
  erw [Functor.map_id, id_comp, Iso.inv_hom_id_app_assoc]
  rw [‚Üê op_comp_assoc, Iso.hom_inv_id_app, op_id, id_comp, Iso.hom_inv_id_app]

lemma shiftFunctor_op_map (n m : ‚Ñ§) (hnm : n + m = 0) {K L : C·µí·µñ} (œÜ : K ‚ü∂ L) :
    (shiftFunctor C·µí·µñ n).map œÜ =
      (shiftFunctorOpIso C n m hnm).hom.app K ‚â´ ((shiftFunctor C m).map œÜ.unop).op ‚â´
        (shiftFunctorOpIso C n m hnm).inv.app L :=
  (NatIso.naturality_2 (shiftFunctorOpIso C n m hnm) œÜ).symm

variable (C)

/-- The autoequivalence `C·µí·µñ ‚âå C·µí·µñ` whose functor is `shiftFunctor C·µí·µñ n` and whose inverse
functor is `(shiftFunctor C n).op`. Do not unfold the definitions of the unit and counit
isomorphisms: the compatibilities they satisfy are stated as separate lemmas. -/
@[simps functor inverse]
noncomputable def opShiftFunctorEquivalence (n : ‚Ñ§) : C·µí·µñ ‚âå C·µí·µñ where
  functor := shiftFunctor C·µí·µñ n
  inverse := (shiftFunctor C n).op
  unitIso := NatIso.op (shiftFunctorCompIsoId C (-n) n n.add_left_neg) ‚â™‚â´
    isoWhiskerRight (shiftFunctorOpIso C n (-n) n.add_right_neg).symm (shiftFunctor C n).op
  counitIso := isoWhiskerLeft _ (shiftFunctorOpIso C n (-n) n.add_right_neg) ‚â™‚â´
    NatIso.op (shiftFunctorCompIsoId C n (-n) n.add_right_neg).symm
  functor_unitIso_comp X := Quiver.Hom.unop_inj (by
    dsimp [shiftFunctorOpIso]
    erw [comp_id, Functor.map_id, comp_id]
    change (shiftFunctorCompIsoId C n (-n) (add_neg_self n)).inv.app (X.unop‚ü¶-n‚üß) ‚â´
      ((shiftFunctorCompIsoId C (-n) n (neg_add_self n)).hom.app X.unop)‚ü¶-n‚üß' = ùüô _
    rw [shift_shiftFunctorCompIsoId_neg_add_self_hom_app n X.unop, Iso.inv_hom_id_app])

variable {C}

lemma shift_unop_opShiftFunctorEquivalence_counitIso_inv_app (X : C·µí·µñ) (n : ‚Ñ§) :
    ((opShiftFunctorEquivalence C n).counitIso.inv.app X).unop‚ü¶n‚üß' =
      ((opShiftFunctorEquivalence C n).unitIso.hom.app ((Opposite.op ((X.unop)‚ü¶n‚üß)))).unop :=
  Quiver.Hom.op_inj ((opShiftFunctorEquivalence C n).unit_app_inverse X).symm

lemma shift_unop_opShiftFunctorEquivalence_counitIso_hom_app (X : C·µí·µñ) (n : ‚Ñ§) :
    ((opShiftFunctorEquivalence C n).counitIso.hom.app X).unop‚ü¶n‚üß' =
      ((opShiftFunctorEquivalence C n).unitIso.inv.app ((Opposite.op (X.unop‚ü¶n‚üß)))).unop :=
  Quiver.Hom.op_inj ((opShiftFunctorEquivalence C n).unitInv_app_inverse X).symm

lemma opShiftFunctorEquivalence_counitIso_inv_app_shift (X : C·µí·µñ) (n : ‚Ñ§) :
    (opShiftFunctorEquivalence C n).counitIso.inv.app (X‚ü¶n‚üß) =
      ((opShiftFunctorEquivalence C n).unitIso.hom.app X)‚ü¶n‚üß' :=
  (opShiftFunctorEquivalence C n).counitInv_app_functor X

lemma opShiftFunctorEquivalence_counitIso_hom_app_shift (X : C·µí·µñ) (n : ‚Ñ§) :
    (opShiftFunctorEquivalence C n).counitIso.hom.app (X‚ü¶n‚üß) =
      ((opShiftFunctorEquivalence C n).unitIso.inv.app X)‚ü¶n‚üß' :=
  (opShiftFunctorEquivalence C n).counit_app_functor X

end Pretriangulated

end CategoryTheory
