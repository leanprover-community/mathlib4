/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.Opposite.Triangle
import Mathlib.CategoryTheory.Triangulated.HomologicalFunctor

/-!
# The (pre)triangulated structure on the opposite category

In this file, we shall construct the (pre)triangulated structure
on the opposite category `C·µí·µñ` of a (pre)triangulated category `C`.

The shift on `C·µí·µñ` was constructed in ``CategoryTheory.Triangulated.Opposite.Basic`,
and is such that shifting by `n : ‚Ñ§` on `C·µí·µñ` corresponds to the shift by
`-n` on `C`. In `CategoryTheory.Triangulated.Opposite.Triangle`, we constructed
an equivalence `(Triangle C)·µí·µñ ‚âå Triangle C·µí·µñ`, called
`CategoryTheory.Pretriangulated.triangleOpEquivalence`.

Here, we defined the notion of distinguished triangles in `C·µí·µñ`, such that
`triangleOpEquivalence` sends distinguished triangles in `C` to distinguished triangles
in `C·µí·µñ`. In other words, if `X ‚ü∂ Y ‚ü∂ Z ‚ü∂ X‚ü¶1‚üß` is a distinguished triangle in `C`,
then the triangle `op Z ‚ü∂ op Y ‚ü∂ op X ‚ü∂ (op Z)‚ü¶1‚üß` that is deduced *without introducing signs*
shall be a distinguished triangle in `C·µí·µñ`. This is equivalent to the definition
in [Verdiers's thesis, p. 96][verdier1996] which would require that the triangle
`(op X)‚ü¶-1‚üß ‚ü∂ op Z ‚ü∂ op Y ‚ü∂ op X` (without signs) is *antidistinguished*.

## References
* [Jean-Louis Verdier, *Des cat√©gories d√©riv√©es des cat√©gories ab√©liennes*][verdier1996]

-/

assert_not_exists TwoSidedIdeal

namespace CategoryTheory

open Category Limits Preadditive ZeroObject

variable (C : Type*) [Category C] [HasShift C ‚Ñ§] [HasZeroObject C] [Preadditive C]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

namespace Pretriangulated

open Opposite

namespace Opposite

/-- A triangle in `C·µí·µñ` shall be distinguished iff it corresponds to a distinguished
triangle in `C` via the equivalence `triangleOpEquivalence C : (Triangle C)·µí·µñ ‚âå Triangle C·µí·µñ`. -/
def distinguishedTriangles : Set (Triangle C·µí·µñ) :=
  fun T => ((triangleOpEquivalence C).inverse.obj T).unop ‚àà distTriang C

variable {C}

lemma mem_distinguishedTriangles_iff (T : Triangle C·µí·µñ) :
    T ‚àà distinguishedTriangles C ‚Üî
      ((triangleOpEquivalence C).inverse.obj T).unop ‚àà distTriang C := by
  rfl

lemma mem_distinguishedTriangles_iff' (T : Triangle C·µí·µñ) :
    T ‚àà distinguishedTriangles C ‚Üî
      ‚àÉ (T' : Triangle C) (_ : T' ‚àà distTriang C),
        Nonempty (T ‚âÖ (triangleOpEquivalence C).functor.obj (Opposite.op T')) := by
  rw [mem_distinguishedTriangles_iff]
  constructor
  ¬∑ intro hT
    exact ‚ü®_ ,hT, ‚ü®(triangleOpEquivalence C).counitIso.symm.app T‚ü©‚ü©
  ¬∑ rintro ‚ü®T', hT', ‚ü®e‚ü©‚ü©
    refine isomorphic_distinguished _ hT' _ ?_
    exact Iso.unop ((triangleOpEquivalence C).unitIso.app (Opposite.op T') ‚â™‚â´
      (triangleOpEquivalence C).inverse.mapIso e.symm)

lemma isomorphic_distinguished (T‚ÇÅ : Triangle C·µí·µñ)
    (hT‚ÇÅ : T‚ÇÅ ‚àà distinguishedTriangles C) (T‚ÇÇ : Triangle C·µí·µñ) (e : T‚ÇÇ ‚âÖ T‚ÇÅ) :
    T‚ÇÇ ‚àà distinguishedTriangles C := by
  simp only [mem_distinguishedTriangles_iff] at hT‚ÇÅ ‚ä¢
  exact Pretriangulated.isomorphic_distinguished _ hT‚ÇÅ _
    ((triangleOpEquivalence C).inverse.mapIso e).unop.symm

/-- Up to rotation, the contractible triangle `X ‚ü∂ X ‚ü∂ 0 ‚ü∂ X‚ü¶1‚üß` for `X : C·µí·µñ` corresponds
to the contractible triangle for `X.unop` in `C`. -/
@[simps!]
noncomputable def contractibleTriangleIso (X : C·µí·µñ) :
    contractibleTriangle X ‚âÖ (triangleOpEquivalence C).functor.obj
      (Opposite.op (contractibleTriangle X.unop).invRotate) :=
  Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _)
    (IsZero.iso (isZero_zero _) (by
      dsimp
      rw [IsZero.iff_id_eq_zero]
      change (ùüô ((0 : C)‚ü¶(-1 : ‚Ñ§)‚üß)).op = 0
      rw [‚Üê Functor.map_id, id_zero, Functor.map_zero, op_zero]))
    (by simp) (by simp) (by simp)

lemma contractible_distinguished (X : C·µí·µñ) :
    contractibleTriangle X ‚àà distinguishedTriangles C := by
  rw [mem_distinguishedTriangles_iff']
  exact ‚ü®_, inv_rot_of_distTriang _ (Pretriangulated.contractible_distinguished X.unop),
    ‚ü®contractibleTriangleIso X‚ü©‚ü©

/-- Isomorphism expressing a compatibility of the equivalence `triangleOpEquivalence C`
with the rotation of triangles. -/
noncomputable def rotateTriangleOpEquivalenceInverseObjRotateUnopIso (T : Triangle C·µí·µñ) :
    ((triangleOpEquivalence C).inverse.obj T.rotate).unop.rotate ‚âÖ
      ((triangleOpEquivalence C).inverse.obj T).unop :=
  Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _)
      (-((opShiftFunctorEquivalence C 1).unitIso.app T.obj‚ÇÅ).unop) (by simp)
        (Quiver.Hom.op_inj (by simp)) (by simp)

lemma rotate_distinguished_triangle (T : Triangle C·µí·µñ) :
    T ‚àà distinguishedTriangles C ‚Üî T.rotate ‚àà distinguishedTriangles C := by
  simp only [mem_distinguishedTriangles_iff, Pretriangulated.rotate_distinguished_triangle
    ((triangleOpEquivalence C).inverse.obj (T.rotate)).unop]
  exact distinguished_iff_of_iso (rotateTriangleOpEquivalenceInverseObjRotateUnopIso T).symm

lemma distinguished_cocone_triangle {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    ‚àÉ (Z : C·µí·µñ) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß),
      Triangle.mk f g h ‚àà distinguishedTriangles C := by
  obtain ‚ü®Z, g, h, H‚ü© := Pretriangulated.distinguished_cocone_triangle‚ÇÅ f.unop
  refine ‚ü®_, g.op, (opShiftFunctorEquivalence C 1).counitIso.inv.app (Opposite.op Z) ‚â´
    (shiftFunctor C·µí·µñ (1 : ‚Ñ§)).map h.op, ?_‚ü©
  simp only [mem_distinguishedTriangles_iff]
  refine Pretriangulated.isomorphic_distinguished _ H _ ?_
  exact Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) (by simp) (by simp)
    (Quiver.Hom.op_inj (by simp [shift_unop_opShiftFunctorEquivalence_counitIso_inv_app]))

lemma complete_distinguished_triangle_morphism (T‚ÇÅ T‚ÇÇ : Triangle C·µí·µñ)
    (hT‚ÇÅ : T‚ÇÅ ‚àà distinguishedTriangles C) (hT‚ÇÇ : T‚ÇÇ ‚àà distinguishedTriangles C)
    (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (comm : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ) :
    ‚àÉ (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ), T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß
      T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶1‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ := by
  rw [mem_distinguishedTriangles_iff] at hT‚ÇÅ hT‚ÇÇ
  obtain ‚ü®c, hc‚ÇÅ, hc‚ÇÇ‚ü© :=
    Pretriangulated.complete_distinguished_triangle_morphism‚ÇÅ _ _ hT‚ÇÇ hT‚ÇÅ
      b.unop a.unop (Quiver.Hom.op_inj comm.symm)
  dsimp at c hc‚ÇÅ hc‚ÇÇ
  replace hc‚ÇÇ := ((opShiftFunctorEquivalence C 1).unitIso.hom.app T‚ÇÇ.obj‚ÇÅ).unop ‚â´= hc‚ÇÇ
  dsimp at hc‚ÇÇ
  simp only [assoc, Iso.unop_hom_inv_id_app_assoc] at hc‚ÇÇ
  refine ‚ü®c.op, Quiver.Hom.unop_inj hc‚ÇÅ.symm, Quiver.Hom.unop_inj ?_‚ü©
  apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
  rw [unop_comp, unop_comp, Functor.map_comp, Functor.map_comp,
    Quiver.Hom.unop_op, hc‚ÇÇ, ‚Üê unop_comp_assoc, ‚Üê unop_comp_assoc,
    ‚Üê opShiftFunctorEquivalence_unitIso_inv_naturality]
  simp

/-- The pretriangulated structure on the opposite category of
a pretriangulated category. It is a scoped instance, so that we need to
`open CategoryTheory.Pretriangulated.Opposite` in order to be able
to use it: the reason is that it relies on the definition of the shift
on the opposite category `C·µí·µñ`, for which it is unclear whether it should
be a global instance or not. -/
scoped instance : Pretriangulated C·µí·µñ where
  distinguishedTriangles := distinguishedTriangles C
  isomorphic_distinguished := isomorphic_distinguished
  contractible_distinguished := contractible_distinguished
  distinguished_cocone_triangle := distinguished_cocone_triangle
  rotate_distinguished_triangle := rotate_distinguished_triangle
  complete_distinguished_triangle_morphism := complete_distinguished_triangle_morphism

end Opposite

variable {C}

lemma mem_distTriang_op_iff (T : Triangle C·µí·µñ) :
    (T ‚àà distTriang C·µí·µñ) ‚Üî ((triangleOpEquivalence C).inverse.obj T).unop ‚àà distTriang C := by
  rfl

lemma mem_distTriang_op_iff' (T : Triangle C·µí·µñ) :
    (T ‚àà distTriang C·µí·µñ) ‚Üî ‚àÉ (T' : Triangle C) (_ : T' ‚àà distTriang C),
      Nonempty (T ‚âÖ (triangleOpEquivalence C).functor.obj (Opposite.op T')) :=
  Opposite.mem_distinguishedTriangles_iff' T

lemma op_distinguished (T : Triangle C) (hT : T ‚àà distTriang C) :
    ((triangleOpEquivalence C).functor.obj (Opposite.op T)) ‚àà distTriang C·µí·µñ := by
  rw [mem_distTriang_op_iff']
  exact ‚ü®T, hT, ‚ü®Iso.refl _‚ü©‚ü©

lemma unop_distinguished (T : Triangle C·µí·µñ) (hT : T ‚àà distTriang C·µí·µñ) :
    ((triangleOpEquivalence C).inverse.obj T).unop ‚àà distTriang C := hT

end Pretriangulated

namespace Functor

open Pretriangulated.Opposite Pretriangulated

variable {C}

lemma map_distinguished_op_exact {A : Type*} [Category A] [Abelian A] (F : C·µí·µñ ‚•§ A)
    [F.IsHomological] (T : Triangle C) (hT : T ‚àà distTriang C) :
    ((shortComplexOfDistTriangle T hT).op.map F).Exact :=
  F.map_distinguished_exact _ (op_distinguished T hT)

end Functor

end CategoryTheory
