/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.Triangulated
import Mathlib.CategoryTheory.ComposableArrows
import Mathlib.CategoryTheory.Shift.CommShift

/-!
# Triangulated functors

In this file, when `C` and `D` are categories equipped with a shift by `‚Ñ§` and
`F : C ‚•§ D` is a functor which commutes with the shift, we define the induced
functor `F.mapTriangle : Triangle C ‚•§ Triangle D` on the categories of
triangles. When `C` and `D` are pretriangulated, a triangulated functor
is such a functor `F` which also sends distinguished triangles to
distinguished triangles: this defines the typeclass `Functor.IsTriangulated`.

-/

namespace CategoryTheory

open Category Limits Pretriangulated Preadditive

namespace Functor

variable {C D E : Type*} [Category C] [Category D] [Category E]
  [HasShift C ‚Ñ§] [HasShift D ‚Ñ§] [HasShift E ‚Ñ§]
  (F : C ‚•§ D) [F.CommShift ‚Ñ§] (G : D ‚•§ E) [G.CommShift ‚Ñ§]

/-- The functor `Triangle C ‚•§ Triangle D` that is induced by a functor `F : C ‚•§ D`
which commutes with shift by `‚Ñ§`. -/
@[simps]
def mapTriangle : Triangle C ‚•§ Triangle D where
  obj T := Triangle.mk (F.map T.mor‚ÇÅ) (F.map T.mor‚ÇÇ)
    (F.map T.mor‚ÇÉ ‚â´ (F.commShiftIso (1 : ‚Ñ§)).hom.app T.obj‚ÇÅ)
  map f :=
    { hom‚ÇÅ := F.map f.hom‚ÇÅ
      hom‚ÇÇ := F.map f.hom‚ÇÇ
      hom‚ÇÉ := F.map f.hom‚ÇÉ
      comm‚ÇÅ := by dsimp; simp only [‚Üê F.map_comp, f.comm‚ÇÅ]
      comm‚ÇÇ := by dsimp; simp only [‚Üê F.map_comp, f.comm‚ÇÇ]
      comm‚ÇÉ := by
        dsimp [Functor.comp]
        simp only [Category.assoc, ‚Üê NatTrans.naturality,
          ‚Üê F.map_comp_assoc, f.comm‚ÇÉ] }

instance [Faithful F] : Faithful F.mapTriangle where
  map_injective {X Y} f g h := by
    ext <;> apply F.map_injective
    ¬∑ exact congr_arg TriangleMorphism.hom‚ÇÅ h
    ¬∑ exact congr_arg TriangleMorphism.hom‚ÇÇ h
    ¬∑ exact congr_arg TriangleMorphism.hom‚ÇÉ h

instance [Full F] [Faithful F] : Full F.mapTriangle where
  map_surjective {X Y} f :=
   ‚ü®{ hom‚ÇÅ := F.preimage f.hom‚ÇÅ
      hom‚ÇÇ := F.preimage f.hom‚ÇÇ
      hom‚ÇÉ := F.preimage f.hom‚ÇÉ
      comm‚ÇÅ := F.map_injective
        (by simpa only [mapTriangle_obj, map_comp, map_preimage] using f.comm‚ÇÅ)
      comm‚ÇÇ := F.map_injective
        (by simpa only [mapTriangle_obj, map_comp, map_preimage] using f.comm‚ÇÇ)
      comm‚ÇÉ := F.map_injective (by
        rw [‚Üê cancel_mono ((F.commShiftIso (1 : ‚Ñ§)).hom.app Y.obj‚ÇÅ)]
        simpa only [mapTriangle_obj, map_comp, assoc, commShiftIso_hom_naturality,
          map_preimage, Triangle.mk_mor‚ÇÉ] using f.comm‚ÇÉ) }, by aesop_cat‚ü©

section Additive

variable [Preadditive C] [Preadditive D] [F.Additive]

#adaptation_note
/--
At nightly-2024-08-08 we needed to increase the maxHeartbeats here.
-/
set_option maxHeartbeats 400000 in
/-- The functor `F.mapTriangle` commutes with the shift. -/
noncomputable def mapTriangleCommShiftIso (n : ‚Ñ§) :
    Triangle.shiftFunctor C n ‚ãô F.mapTriangle ‚âÖ F.mapTriangle ‚ãô Triangle.shiftFunctor D n :=
  NatIso.ofComponents (fun T => Triangle.isoMk _ _
    ((F.commShiftIso n).app _) ((F.commShiftIso n).app _) ((F.commShiftIso n).app _)
    (by aesop_cat) (by aesop_cat) (by
      dsimp
      simp only [map_units_smul, map_comp, Linear.units_smul_comp, assoc,
        Linear.comp_units_smul, ‚Üê F.commShiftIso_hom_naturality_assoc]
      rw [F.map_shiftFunctorComm_hom_app T.obj‚ÇÅ 1 n]
      simp only [comp_obj, assoc, Iso.inv_hom_id_app_assoc,
        ‚Üê Functor.map_comp, Iso.inv_hom_id_app, map_id, comp_id])) (by aesop_cat)

attribute [simps!] mapTriangleCommShiftIso

attribute [local simp] map_zsmul comp_zsmul zsmul_comp
  commShiftIso_zero commShiftIso_add commShiftIso_comp_hom_app
  shiftFunctorAdd'_eq_shiftFunctorAdd

set_option maxHeartbeats 400000 in
noncomputable instance [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive]
    [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive] : (F.mapTriangle).CommShift ‚Ñ§ where
  iso := F.mapTriangleCommShiftIso

/-- `F.mapTriangle` commutes with the rotation of triangles. -/
@[simps!]
def mapTriangleRotateIso :
    F.mapTriangle ‚ãô Pretriangulated.rotate D ‚âÖ
      Pretriangulated.rotate C ‚ãô F.mapTriangle :=
  NatIso.ofComponents
    (fun T => Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _)
      ((F.commShiftIso (1 : ‚Ñ§)).symm.app _)
      (by aesop_cat) (by aesop_cat) (by aesop_cat)) (by aesop_cat)

/-- `F.mapTriangle` commutes with the inverse of the rotation of triangles. -/
@[simps!]
noncomputable def mapTriangleInvRotateIso [F.Additive] :
    F.mapTriangle ‚ãô Pretriangulated.invRotate D ‚âÖ
      Pretriangulated.invRotate C ‚ãô F.mapTriangle :=
  NatIso.ofComponents
    (fun T => Triangle.isoMk _ _ ((F.commShiftIso (-1 : ‚Ñ§)).symm.app _) (Iso.refl _) (Iso.refl _)
      (by aesop_cat) (by aesop_cat) (by aesop_cat)) (by aesop_cat)


variable (C) in
/-- The canonical isomorphism `(ùü≠ C).mapTriangle ‚âÖ ùü≠ (Triangle C)`. -/
@[simps!]
def mapTriangleIdIso : (ùü≠ C).mapTriangle ‚âÖ ùü≠ _ :=
  NatIso.ofComponents (fun T ‚Ü¶ Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _))

/-- The canonical isomorphism `(F ‚ãô G).mapTriangle ‚âÖ F.mapTriangle ‚ãô G.mapTriangle`. -/
@[simps!]
def mapTriangleCompIso : (F ‚ãô G).mapTriangle ‚âÖ F.mapTriangle ‚ãô G.mapTriangle :=
  NatIso.ofComponents (fun T => Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _))

/-- Two isomorphic functors `F‚ÇÅ` and `F‚ÇÇ` induce isomorphic functors
`F‚ÇÅ.mapTriangle` and `F‚ÇÇ.mapTriangle` if the isomorphism `F‚ÇÅ ‚âÖ F‚ÇÇ` is compatible
with the shifts. -/
@[simps!]
def mapTriangleIso {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) [F‚ÇÅ.CommShift ‚Ñ§] [F‚ÇÇ.CommShift ‚Ñ§]
    [NatTrans.CommShift e.hom ‚Ñ§] : F‚ÇÅ.mapTriangle ‚âÖ F‚ÇÇ.mapTriangle :=
  NatIso.ofComponents (fun T =>
    Triangle.isoMk _ _ (e.app _) (e.app _) (e.app _) (by simp) (by simp) (by
      dsimp
      simp only [assoc, NatTrans.CommShift.comm_app e.hom (1 : ‚Ñ§) T.obj‚ÇÅ,
        NatTrans.naturality_assoc])) (by aesop_cat)

end Additive

variable [HasZeroObject C] [HasZeroObject D] [HasZeroObject E]
  [Preadditive C] [Preadditive D] [Preadditive E]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor E n).Additive]
  [Pretriangulated C] [Pretriangulated D] [Pretriangulated E]

/-- A functor which commutes with the shift by `‚Ñ§` is triangulated if
it sends distinguished triangles to distinguished triangles. -/
class IsTriangulated : Prop where
  map_distinguished (T : Triangle C) : (T ‚àà distTriang C) ‚Üí F.mapTriangle.obj T ‚àà distTriang D

lemma map_distinguished [F.IsTriangulated] (T : Triangle C) (hT : T ‚àà distTriang C) :
    F.mapTriangle.obj T ‚àà distTriang D :=
  IsTriangulated.map_distinguished _ hT

namespace IsTriangulated

open ZeroObject

instance (priority := 100) [F.IsTriangulated] : PreservesZeroMorphisms F where
  map_zero X Y := by
    have h‚ÇÅ : (0 : X ‚ü∂ Y) = 0 ‚â´ ùüô 0 ‚â´ 0 := by simp
    have h‚ÇÇ : ùüô (F.obj 0) = 0 := by
      rw [‚Üê IsZero.iff_id_eq_zero]
      apply Triangle.isZero‚ÇÉ_of_isIso‚ÇÅ _
        (F.map_distinguished _ (contractible_distinguished (0 : C)))
      dsimp
      infer_instance
    rw [h‚ÇÅ, F.map_comp, F.map_comp, F.map_id, h‚ÇÇ, zero_comp, comp_zero]

noncomputable instance [F.IsTriangulated] :
    PreservesLimitsOfShape (Discrete WalkingPair) F := by
  suffices ‚àÄ (X‚ÇÅ X‚ÇÉ : C), IsIso (prodComparison F X‚ÇÅ X‚ÇÉ) by
    have := fun (X‚ÇÅ X‚ÇÉ : C) ‚Ü¶ PreservesLimitPair.ofIsoProdComparison F X‚ÇÅ X‚ÇÉ
    exact ‚ü®fun {K} ‚Ü¶ preservesLimitOfIsoDiagram F (diagramIsoPair K).symm‚ü©
  intro X‚ÇÅ X‚ÇÉ
  let œÜ : F.mapTriangle.obj (binaryProductTriangle X‚ÇÅ X‚ÇÉ) ‚ü∂
      binaryProductTriangle (F.obj X‚ÇÅ) (F.obj X‚ÇÉ) :=
    { hom‚ÇÅ := ùüô _
      hom‚ÇÇ := prodComparison F X‚ÇÅ X‚ÇÉ
      hom‚ÇÉ := ùüô _
      comm‚ÇÅ := by
        dsimp
        ext
        ¬∑ simp only [assoc, prodComparison_fst, prod.comp_lift, comp_id, comp_zero,
            limit.lift_œÄ, BinaryFan.mk_pt, BinaryFan.œÄ_app_left, BinaryFan.mk_fst,
            ‚Üê F.map_comp, F.map_id]
        ¬∑ simp only [assoc, prodComparison_snd, prod.comp_lift, comp_id, comp_zero,
            limit.lift_œÄ, BinaryFan.mk_pt, BinaryFan.œÄ_app_right, BinaryFan.mk_snd,
            ‚Üê F.map_comp, F.map_zero]
      comm‚ÇÇ := by simp
      comm‚ÇÉ := by simp }
  exact isIso‚ÇÇ_of_isIso‚ÇÅ‚ÇÉ œÜ (F.map_distinguished _ (binaryProductTriangle_distinguished X‚ÇÅ X‚ÇÉ))
    (binaryProductTriangle_distinguished _ _)
    (by dsimp; infer_instance) (by dsimp; infer_instance)

instance (priority := 100) [F.IsTriangulated] : F.Additive :=
  F.additive_of_preserves_binary_products

instance : (ùü≠ C).IsTriangulated where
  map_distinguished T hT :=
    isomorphic_distinguished _ hT _ ((mapTriangleIdIso C).app T)

instance [F.IsTriangulated] [G.IsTriangulated] : (F ‚ãô G).IsTriangulated where
  map_distinguished T hT :=
    isomorphic_distinguished _ (G.map_distinguished _ (F.map_distinguished T hT)) _
      ((mapTriangleCompIso F G).app T)

end IsTriangulated

lemma isTriangulated_of_iso {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) [F‚ÇÅ.CommShift ‚Ñ§] [F‚ÇÇ.CommShift ‚Ñ§]
    [NatTrans.CommShift e.hom ‚Ñ§] [F‚ÇÅ.IsTriangulated] : F‚ÇÇ.IsTriangulated where
  map_distinguished T hT :=
    isomorphic_distinguished _ (F‚ÇÅ.map_distinguished T hT) _ ((mapTriangleIso e).app T).symm

lemma isTriangulated_iff_of_iso {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) [F‚ÇÅ.CommShift ‚Ñ§] [F‚ÇÇ.CommShift ‚Ñ§]
    [NatTrans.CommShift e.hom ‚Ñ§] : F‚ÇÅ.IsTriangulated ‚Üî F‚ÇÇ.IsTriangulated := by
  constructor
  ¬∑ intro
    exact isTriangulated_of_iso e
  ¬∑ intro
    have : NatTrans.CommShift e.symm.hom ‚Ñ§ := inferInstanceAs (NatTrans.CommShift e.inv ‚Ñ§)
    exact isTriangulated_of_iso e.symm

lemma mem_mapTriangle_essImage_of_distinguished
    [F.IsTriangulated] [F.mapArrow.EssSurj] (T : Triangle D) (hT : T ‚àà distTriang D) :
    ‚àÉ (T' : Triangle C) (_ : T' ‚àà distTriang C), Nonempty (F.mapTriangle.obj T' ‚âÖ T) := by
  obtain ‚ü®X, Y, f, e‚ÇÅ, e‚ÇÇ, w‚ü© : ‚àÉ (X Y : C) (f : X ‚ü∂ Y) (e‚ÇÅ : F.obj X ‚âÖ T.obj‚ÇÅ)
    (e‚ÇÇ : F.obj Y ‚âÖ T.obj‚ÇÇ), F.map f ‚â´ e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ T.mor‚ÇÅ := by
      let e := F.mapArrow.objObjPreimageIso (Arrow.mk T.mor‚ÇÅ)
      exact ‚ü®_, _, _, Arrow.leftFunc.mapIso e, Arrow.rightFunc.mapIso e, e.hom.w.symm‚ü©
  obtain ‚ü®W, g, h, H‚ü© := distinguished_cocone_triangle f
  exact ‚ü®_, H, ‚ü®isoTriangleOfIso‚ÇÅ‚ÇÇ _ _ (F.map_distinguished _ H) hT e‚ÇÅ e‚ÇÇ w‚ü©‚ü©

lemma isTriangulated_of_precomp
    [(F ‚ãô G).IsTriangulated] [F.IsTriangulated] [F.mapArrow.EssSurj] :
    G.IsTriangulated where
  map_distinguished T hT := by
    obtain ‚ü®T', hT', ‚ü®e‚ü©‚ü© := F.mem_mapTriangle_essImage_of_distinguished T hT
    exact isomorphic_distinguished _ ((F ‚ãô G).map_distinguished T' hT') _
      (G.mapTriangle.mapIso e.symm ‚â™‚â´ (mapTriangleCompIso F G).symm.app _)

variable {F G} in
lemma isTriangulated_of_precomp_iso {H : C ‚•§ E} (e : F ‚ãô G ‚âÖ H) [H.CommShift ‚Ñ§]
    [H.IsTriangulated] [F.IsTriangulated] [F.mapArrow.EssSurj] [NatTrans.CommShift e.hom ‚Ñ§] :
    G.IsTriangulated := by
  have := (isTriangulated_iff_of_iso e).2 inferInstance
  exact isTriangulated_of_precomp F G

end Functor

variable {C D : Type*} [Category C] [Category D] [HasShift C ‚Ñ§] [HasShift D ‚Ñ§]
  [HasZeroObject C] [HasZeroObject D] [Preadditive C] [Preadditive D]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive]
  [Pretriangulated C] [Pretriangulated D]

namespace Triangulated

namespace Octahedron

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C}
  {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ} {comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ}
  {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C}
  {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C}
  {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C}
  (h : Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ)
  (F : C ‚•§ D) [F.CommShift ‚Ñ§] [F.IsTriangulated]

/-- The image of an octahedron by a triangulated functor. -/
@[simps]
def map : Octahedron (by dsimp; rw [‚Üê F.map_comp, comm])
    (F.map_distinguished _ h‚ÇÅ‚ÇÇ) (F.map_distinguished _ h‚ÇÇ‚ÇÉ) (F.map_distinguished _ h‚ÇÅ‚ÇÉ) where
  m‚ÇÅ := F.map h.m‚ÇÅ
  m‚ÇÉ := F.map h.m‚ÇÉ
  comm‚ÇÅ := by simpa using F.congr_map h.comm‚ÇÅ
  comm‚ÇÇ := by simpa using F.congr_map h.comm‚ÇÇ =‚â´ (F.commShiftIso 1).hom.app X‚ÇÅ
  comm‚ÇÉ := by simpa using F.congr_map h.comm‚ÇÉ
  comm‚ÇÑ := by simpa using F.congr_map h.comm‚ÇÑ =‚â´ (F.commShiftIso 1).hom.app X‚ÇÇ
  mem := isomorphic_distinguished _ (F.map_distinguished _ h.mem) _
    (Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _))

end Octahedron

end Triangulated

open Triangulated

/-- If `F : C ‚•§ D` is a triangulated functor from a triangulated category, then `D`
is also triangulated if tuples of composables arrows in `D` can be lifted to `C`. -/
lemma isTriangulated_of_essSurj_mapComposableArrows_two
    (F : C ‚•§ D) [F.CommShift ‚Ñ§] [F.IsTriangulated]
    [(F.mapComposableArrows 2).EssSurj] [IsTriangulated C] :
    IsTriangulated D := by
  apply IsTriangulated.mk
  intro Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ u‚ÇÅ‚ÇÉ comm v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ
  obtain ‚ü®Œ±, ‚ü®e‚ü©‚ü© : ‚àÉ (Œ± : ComposableArrows C 2),
      Nonempty ((F.mapComposableArrows 2).obj Œ± ‚âÖ ComposableArrows.mk‚ÇÇ u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ) :=
    ‚ü®_, ‚ü®Functor.objObjPreimageIso _ _‚ü©‚ü©
  obtain ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ, f, g, rfl‚ü© := ComposableArrows.mk‚ÇÇ_surjective Œ±
  obtain ‚ü®_, _, _, h‚ÇÅ‚ÇÇ'‚ü© := distinguished_cocone_triangle f
  obtain ‚ü®_, _, _, h‚ÇÇ‚ÇÉ'‚ü© := distinguished_cocone_triangle g
  obtain ‚ü®_, _, _, h‚ÇÅ‚ÇÉ'‚ü© := distinguished_cocone_triangle (f ‚â´ g)
  exact ‚ü®Octahedron.ofIso (e‚ÇÅ := (e.app 0).symm) (e‚ÇÇ := (e.app 1).symm) (e‚ÇÉ := (e.app 2).symm)
    (comm‚ÇÅ‚ÇÇ := ComposableArrows.naturality' e.inv 0 1)
    (comm‚ÇÇ‚ÇÉ := ComposableArrows.naturality' e.inv 1 2)
    (H := (someOctahedron rfl h‚ÇÅ‚ÇÇ' h‚ÇÇ‚ÇÉ' h‚ÇÅ‚ÇÉ').map F) _ _ _ _ _‚ü©

end CategoryTheory
