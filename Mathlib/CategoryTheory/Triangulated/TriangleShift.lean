/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.Rotate
import Mathlib.Algebra.GroupPower.NegOnePow

/-!
# The shift on the category of triangles

In this file, it is shown that if `C` is a preadditive category with
a shift by `‚Ñ§`, then the category of triangles `Triangle C` is also
endowed with a shift. We also show that rotating triangles three times
identifies with the shift by `1`.

The shift on the category of triangles was also obtained by Adam Topaz,
Johan Commelin and Andrew Yang during the Liquid Tensor Experiment.

-/

universe v u

namespace CategoryTheory

open Category Preadditive

variable (C : Type u) [Category.{v} C] [Preadditive C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (CategoryTheory.shiftFunctor C n).Additive]

namespace Pretriangulated

attribute [local simp] Triangle.eqToHom_hom‚ÇÅ Triangle.eqToHom_hom‚ÇÇ Triangle.eqToHom_hom‚ÇÉ
  shiftFunctorAdd_zero_add_hom_app shiftFunctorAdd_add_zero_hom_app
  shiftFunctorAdd'_eq_shiftFunctorAdd shift_shiftFunctorCompIsoId_inv_app

/-- The shift functor `Triangle C ‚•§ Triangle C` by `n : ‚Ñ§` sends a triangle
to the triangle obtained by shifting the objects by `n` in `C` and by
multiplying the three morphisms by `(-1)^n`. -/
@[simps]
noncomputable def Triangle.shiftFunctor (n : ‚Ñ§) : Triangle C ‚•§ Triangle C where
  obj T := Triangle.mk (n.negOnePow ‚Ä¢ T.mor‚ÇÅ‚ü¶n‚üß') (n.negOnePow ‚Ä¢ T.mor‚ÇÇ‚ü¶n‚üß')
    (n.negOnePow ‚Ä¢ T.mor‚ÇÉ‚ü¶n‚üß' ‚â´ (shiftFunctorComm C 1 n).hom.app T.obj‚ÇÅ)
  map f :=
    { hom‚ÇÅ := f.hom‚ÇÅ‚ü¶n‚üß'
      hom‚ÇÇ := f.hom‚ÇÇ‚ü¶n‚üß'
      hom‚ÇÉ := f.hom‚ÇÉ‚ü¶n‚üß'
      comm‚ÇÅ := by
        dsimp
        simp only [zsmul_comp, comp_zsmul, ‚Üê Functor.map_comp, f.comm‚ÇÅ]
      comm‚ÇÇ := by
        dsimp
        simp only [zsmul_comp, comp_zsmul, ‚Üê Functor.map_comp, f.comm‚ÇÇ]
      comm‚ÇÉ := by
        dsimp
        rw [zsmul_comp, comp_zsmul, ‚Üê Functor.map_comp_assoc, ‚Üê f.comm‚ÇÉ,
          Functor.map_comp, assoc, assoc]
        erw [(shiftFunctorComm C 1 n).hom.naturality]
        rfl }

/-- The canonical isomorphism `Triangle.shiftFunctor C 0 ‚âÖ ùü≠ (Triangle C)`. -/
@[simps!]
noncomputable def Triangle.shiftFunctorZero : Triangle.shiftFunctor C 0 ‚âÖ ùü≠ _ :=
  NatIso.ofComponents
    (fun T => Triangle.isoMk _ _ ((CategoryTheory.shiftFunctorZero C ‚Ñ§).app _)
      ((CategoryTheory.shiftFunctorZero C ‚Ñ§).app _) ((CategoryTheory.shiftFunctorZero C ‚Ñ§).app _)
      (by aesop_cat) (by aesop_cat) (by
        dsimp
        simp only [one_zsmul, assoc, shiftFunctorComm_zero_hom_app,
          ‚Üê Functor.map_comp, Iso.inv_hom_id_app, Functor.id_obj, Functor.map_id,
          comp_id, NatTrans.naturality, Functor.id_map]))
    (by aesop_cat)

/-- The canonical isomorphism
`Triangle.shiftFunctor C n ‚âÖ Triangle.shiftFunctor C a ‚ãô Triangle.shiftFunctor C b`
when `a + b = n`. -/
@[simps!]
noncomputable def Triangle.shiftFunctorAdd' (a b n : ‚Ñ§) (h : a + b = n) :
    Triangle.shiftFunctor C n ‚âÖ Triangle.shiftFunctor C a ‚ãô Triangle.shiftFunctor C b :=
  NatIso.ofComponents
    (fun T => Triangle.isoMk _ _
      ((CategoryTheory.shiftFunctorAdd' C a b n h).app _)
      ((CategoryTheory.shiftFunctorAdd' C a b n h).app _)
      ((CategoryTheory.shiftFunctorAdd' C a b n h).app _)
      (by
        subst h
        dsimp
        rw [zsmul_comp, NatTrans.naturality, comp_zsmul, Functor.comp_map, Functor.map_zsmul,
          comp_zsmul, smul_smul, Int.negOnePow_add, mul_comm])
      (by
        subst h
        dsimp
        rw [zsmul_comp, NatTrans.naturality, comp_zsmul, Functor.comp_map, Functor.map_zsmul,
          comp_zsmul, smul_smul, Int.negOnePow_add, mul_comm])
      (by
        subst h
        dsimp
        rw [zsmul_comp, comp_zsmul, Functor.map_zsmul, zsmul_comp, comp_zsmul, smul_smul,
          assoc, Functor.map_comp, assoc]
        erw [‚Üê NatTrans.naturality_assoc]
        simp only [shiftFunctorAdd'_eq_shiftFunctorAdd, Int.negOnePow_add,
          shiftFunctorComm_hom_app_comp_shift_shiftFunctorAdd_hom_app, add_comm a]))
    (by aesop_cat)

/-- Rotating triangles three times identifies with the shift by `1`. -/
noncomputable def rotateRotateRotateIso :
    rotate C ‚ãô rotate C ‚ãô rotate C ‚âÖ Triangle.shiftFunctor C 1 :=
  NatIso.ofComponents
    (fun T => Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _)
      (by aesop_cat) (by aesop_cat) (by aesop_cat))
    (by aesop_cat)

/-- Rotating triangles three times backwards identifies with the shift by `-1`. -/
noncomputable def invRotateInvRotateInvRotateIso :
    invRotate C ‚ãô invRotate C ‚ãô invRotate C ‚âÖ Triangle.shiftFunctor C (-1) :=
  NatIso.ofComponents
    (fun T => Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _)
      (by aesop_cat)
      (by aesop_cat)
      (by
        dsimp [shiftFunctorCompIsoId]
        simp [shiftFunctorComm_eq C _ _ _ (add_neg_self (1 : ‚Ñ§))]))
    (by aesop_cat)

/-- The inverse of the rotation of triangles can be expressed using a double
rotation and the shift by `-1`. -/
noncomputable def invRotateIsoRotateRotateShiftFunctorNegOne :
    invRotate C ‚âÖ rotate C ‚ãô rotate C ‚ãô Triangle.shiftFunctor C (-1) :=
  calc
    invRotate C ‚âÖ invRotate C ‚ãô ùü≠ _ := (Functor.rightUnitor _).symm
    _ ‚âÖ invRotate C ‚ãô Triangle.shiftFunctor C 0 :=
          isoWhiskerLeft _ (Triangle.shiftFunctorZero C).symm
    _ ‚âÖ invRotate C ‚ãô Triangle.shiftFunctor C 1 ‚ãô Triangle.shiftFunctor C (-1) :=
          isoWhiskerLeft _ (Triangle.shiftFunctorAdd' C 1 (-1) 0 (add_neg_self 1))
    _ ‚âÖ invRotate C ‚ãô (rotate C ‚ãô rotate C ‚ãô rotate C) ‚ãô Triangle.shiftFunctor C (-1) :=
          isoWhiskerLeft _ (isoWhiskerRight (rotateRotateRotateIso C).symm _)
    _ ‚âÖ (invRotate C ‚ãô rotate C) ‚ãô rotate C ‚ãô rotate C ‚ãô Triangle.shiftFunctor C (-1) :=
          isoWhiskerLeft _ (Functor.associator _ _ _ ‚â™‚â´
            isoWhiskerLeft _ (Functor.associator _ _ _)) ‚â™‚â´ (Functor.associator _ _ _).symm
    _ ‚âÖ ùü≠ _ ‚ãô rotate C ‚ãô rotate C ‚ãô Triangle.shiftFunctor C (-1) :=
          isoWhiskerRight (triangleRotation C).counitIso _
    _ ‚âÖ _ := Functor.leftUnitor _

noncomputable instance : HasShift (Triangle C) ‚Ñ§ :=
  hasShiftMk (Triangle C) ‚Ñ§
    { F := Triangle.shiftFunctor C
      zero := Triangle.shiftFunctorZero C
      add := fun a b => Triangle.shiftFunctorAdd' C a b _ rfl
      assoc_hom_app := fun a b c T => by
        ext
        all_goals
          dsimp
          rw [‚Üê shiftFunctorAdd'_assoc_hom_app a b c _ _ _ rfl rfl (add_assoc a b c)]
          dsimp only [CategoryTheory.shiftFunctorAdd']
          simp }

end Pretriangulated

end CategoryTheory
