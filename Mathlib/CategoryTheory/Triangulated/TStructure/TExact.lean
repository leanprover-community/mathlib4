/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.TStructure.Trunc

/-!
# t-exact functors

-/

namespace CategoryTheory

open Category Limits Triangulated Pretriangulated

variable {C D : Type*} [Category C] [Category D] [Preadditive C] [Preadditive D]
  [HasZeroObject C] [HasZeroObject D] [HasShift C ‚Ñ§] [HasShift D ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive]
  [Pretriangulated C] [Pretriangulated D]

namespace Functor

variable (F : C ‚•§ D) [F.CommShift ‚Ñ§] (t‚ÇÅ : TStructure C) (t‚ÇÇ : TStructure D)

class RightTExact [F.IsTriangulated] : Prop where
  objGE (X : C) (n : ‚Ñ§) [t‚ÇÅ.IsGE X n] : t‚ÇÇ.IsGE (F.obj X) n

class LeftTExact [F.IsTriangulated] : Prop where
  objLE (X : C) (n : ‚Ñ§) [t‚ÇÅ.IsLE X n] : t‚ÇÇ.IsLE (F.obj X) n

variable [F.IsTriangulated]

lemma isGE_obj (X : C) (n : ‚Ñ§) [t‚ÇÅ.IsGE X n] [h : F.RightTExact t‚ÇÅ t‚ÇÇ] : t‚ÇÇ.IsGE (F.obj X) n :=
  h.objGE X n

lemma isLE_obj (X : C) (n : ‚Ñ§) [t‚ÇÅ.IsLE X n] [h : F.LeftTExact t‚ÇÅ t‚ÇÇ] : t‚ÇÇ.IsLE (F.obj X) n :=
  h.objLE X n

class TExact : Prop where
  rightTExact : F.RightTExact t‚ÇÅ t‚ÇÇ
  leftTExact : F.LeftTExact t‚ÇÅ t‚ÇÇ

attribute [instance] TExact.rightTExact TExact.leftTExact

/-- Constructor for `RightTExact`. -/
lemma RightTExact.mk' (h : ‚àÄ (X : C) [t‚ÇÅ.IsGE X 0], t‚ÇÇ.IsGE (F.obj X) 0) :
    F.RightTExact t‚ÇÅ t‚ÇÇ where
  objGE X n _ := by
    have := t‚ÇÅ.isGE_shift X n n 0 (add_zero n)
    have : t‚ÇÇ.IsGE ((shiftFunctor C n ‚ãô F).obj X) 0 := h (X‚ü¶n‚üß)
    have : t‚ÇÇ.IsGE ((F.obj X)‚ü¶n‚üß) 0 := t‚ÇÇ.isGE_of_iso ((F.commShiftIso n).app X) 0
    exact t‚ÇÇ.isGE_of_shift (F.obj X) n n 0 (add_zero n)

/-- Constructor for `LeftTExact`. -/
lemma LeftTExact.mk' (h : ‚àÄ (X : C) [t‚ÇÅ.IsLE X 0], t‚ÇÇ.IsLE (F.obj X) 0) :
    F.LeftTExact t‚ÇÅ t‚ÇÇ where
  objLE X n _ := by
    have := t‚ÇÅ.isLE_shift X n n 0 (add_zero n)
    have : t‚ÇÇ.IsLE ((shiftFunctor C n ‚ãô F).obj X) 0 := h (X‚ü¶n‚üß)
    have : t‚ÇÇ.IsLE ((F.obj X)‚ü¶n‚üß) 0 := t‚ÇÇ.isLE_of_iso ((F.commShiftIso n).app X) 0
    exact t‚ÇÇ.isLE_of_shift (F.obj X) n n 0 (add_zero n)

section

variable [h : F.RightTExact t‚ÇÅ t‚ÇÇ]

noncomputable def truncGEComparison (n : ‚Ñ§) : F ‚ãô t‚ÇÇ.truncGE n ‚ü∂ t‚ÇÅ.truncGE n ‚ãô F where
  app X :=
    have := h.objGE ((t‚ÇÅ.truncGE n).obj X) n
    t‚ÇÇ.descTruncGE (F.map ((t‚ÇÅ.truncGEœÄ n).app X)) n
  naturality {X Y} f := by
    have := h.objGE ((t‚ÇÅ.truncGE n).obj X) n
    have := h.objGE ((t‚ÇÅ.truncGE n).obj Y) n
    dsimp
    apply t‚ÇÇ.from_truncGE_obj_ext
    dsimp
    rw [TStructure.œÄ_descTruncGE_assoc]
    erw [‚Üê NatTrans.naturality_assoc]
    dsimp
    rw [TStructure.œÄ_descTruncGE, ‚Üê F.map_comp, ‚Üê F.map_comp, ‚Üê NatTrans.naturality]
    rfl

@[reassoc (attr := simp)]
lemma truncGEComparison_app_fac (X : C) (n : ‚Ñ§) :
    (t‚ÇÇ.truncGEœÄ n).app (F.obj X) ‚â´ (truncGEComparison F t‚ÇÅ t‚ÇÇ n).app X =
      F.map ((t‚ÇÅ.truncGEœÄ n).app X) := by
  dsimp
  have := h.objGE ((t‚ÇÅ.truncGE n).obj X) n
  apply t‚ÇÇ.œÄ_descTruncGE

end

section

variable [h : F.LeftTExact t‚ÇÅ t‚ÇÇ]

noncomputable def truncLEComparison (n : ‚Ñ§) : t‚ÇÅ.truncLE n ‚ãô F ‚ü∂ F ‚ãô t‚ÇÇ.truncLE n where
  app X :=
    have := h.objLE ((t‚ÇÅ.truncLE n).obj X) n
    t‚ÇÇ.liftTruncLE (F.map ((t‚ÇÅ.truncLEŒπ n).app X)) n
  naturality {X Y} f := by
    have := h.objLE ((t‚ÇÅ.truncLE n).obj X) n
    have := h.objLE ((t‚ÇÅ.truncLE n).obj Y) n
    dsimp
    apply t‚ÇÇ.to_truncLE_obj_ext
    dsimp
    simp only [Category.assoc, TStructure.liftTruncLE_Œπ, NatTrans.naturality, id_obj, id_map,
      TStructure.liftTruncLE_Œπ_assoc, ‚Üê F.map_comp]

@[reassoc (attr := simp)]
lemma truncLEComparison_app_fac (X : C) (n : ‚Ñ§) :
    (truncLEComparison F t‚ÇÅ t‚ÇÇ n).app X ‚â´ (t‚ÇÇ.truncLEŒπ n).app (F.obj X) =
      F.map ((t‚ÇÅ.truncLEŒπ n).app X) := by
  dsimp
  have := h.objLE ((t‚ÇÅ.truncLE n).obj X) n
  apply t‚ÇÇ.liftTruncLE_Œπ

end

variable [h : F.TExact t‚ÇÅ t‚ÇÇ]

namespace TExact

def triangleGELEIso_aux (a b : ‚Ñ§) (h : a + 1 = b) (X : C) :
  ‚àÉ (e : (t‚ÇÇ.triangleLEGE a b h).obj (F.obj X) ‚âÖ
    F.mapTriangle.obj ((t‚ÇÅ.triangleLEGE a b h).obj X))
      (_ : e.inv.hom‚ÇÅ = (F.truncLEComparison t‚ÇÅ t‚ÇÇ a).app X)
      (_ : e.hom.hom‚ÇÉ = (F.truncGEComparison t‚ÇÅ t‚ÇÇ b).app X),
      e.hom.hom‚ÇÇ = ùüô _ := by
  have : t‚ÇÇ.IsLE (F.mapTriangle.obj ((t‚ÇÅ.triangleLEGE a b h).obj X)).obj‚ÇÅ a := by
    dsimp
    apply F.isLE_obj t‚ÇÅ t‚ÇÇ
  have : t‚ÇÇ.IsGE (F.mapTriangle.obj ((t‚ÇÅ.triangleLEGE a b h).obj X)).obj‚ÇÉ b := by
    dsimp
    apply F.isGE_obj t‚ÇÅ t‚ÇÇ
  obtain ‚ü®e, h‚ÇÇ‚ü© := t‚ÇÇ.triangle_iso_exists a b (by linarith) _ _
    (t‚ÇÇ.triangleLEGE_distinguished a b h (F.obj X))
    (F.map_distinguished _ (t‚ÇÅ.triangleLEGE_distinguished a b h X)) (Iso.refl _)
    (by dsimp; infer_instance) (by dsimp; infer_instance) inferInstance inferInstance
  dsimp at h‚ÇÇ
  have h‚ÇÇ' : e.inv.hom‚ÇÇ = ùüô _ := by
    rw [‚Üê cancel_mono e.hom.hom‚ÇÇ, Iso.inv_hom_id_triangle_hom‚ÇÇ, h‚ÇÇ]
    dsimp
    rw [comp_id]
  refine ‚ü®e, ?_, ?_, h‚ÇÇ‚ü©
  ¬∑ apply t‚ÇÇ.to_truncLE_obj_ext
    simpa [h‚ÇÇ'] using e.inv.comm‚ÇÅ.symm
  ¬∑ apply t‚ÇÇ.from_truncGE_obj_ext
    simpa [h‚ÇÇ] using e.hom.comm‚ÇÇ

instance (n : ‚Ñ§) (X : C) : IsIso ((truncGEComparison F t‚ÇÅ t‚ÇÇ n).app X) := by
  obtain ‚ü®e, _, h‚ÇÉ, _‚ü© := triangleGELEIso_aux F t‚ÇÅ t‚ÇÇ (n-1) n (by linarith) X
  rw [‚Üê h‚ÇÉ]
  infer_instance

instance (n : ‚Ñ§) (X : C) : IsIso ((truncLEComparison F t‚ÇÅ t‚ÇÇ n).app X) := by
  obtain ‚ü®e, h‚ÇÅ, _, _‚ü© := triangleGELEIso_aux F t‚ÇÅ t‚ÇÇ n (n + 1) (by linarith) X
  rw [‚Üê h‚ÇÅ]
  infer_instance

instance (n : ‚Ñ§) : IsIso (truncGEComparison F t‚ÇÅ t‚ÇÇ n) :=
  NatIso.isIso_of_isIso_app _
instance (n : ‚Ñ§) : IsIso (truncLEComparison F t‚ÇÅ t‚ÇÇ n) :=
  NatIso.isIso_of_isIso_app _


end TExact

@[simps! hom]
noncomputable def truncGEIso (n : ‚Ñ§) : F ‚ãô t‚ÇÇ.truncGE n ‚âÖ t‚ÇÅ.truncGE n ‚ãô F :=
    asIso (F.truncGEComparison t‚ÇÅ t‚ÇÇ n)

@[reassoc (attr := simp)]
lemma truncGEIso_hom_inv_id_app (X : C) (n : ‚Ñ§) :
    (F.truncGEComparison t‚ÇÅ t‚ÇÇ n).app X ‚â´ (F.truncGEIso t‚ÇÅ t‚ÇÇ n).inv.app X = ùüô _ :=
  (F.truncGEIso t‚ÇÅ t‚ÇÇ n).hom_inv_id_app X

@[reassoc (attr := simp)]
lemma truncGEIso_inv_hom_id_app (X : C) (n : ‚Ñ§) :
    (F.truncGEIso t‚ÇÅ t‚ÇÇ n).inv.app X ‚â´ (F.truncGEComparison t‚ÇÅ t‚ÇÇ n).app X = ùüô _ :=
  (F.truncGEIso t‚ÇÅ t‚ÇÇ n).inv_hom_id_app X

@[simps! hom]
noncomputable def truncLEIso (n : ‚Ñ§) : t‚ÇÅ.truncLE n ‚ãô F ‚âÖ F ‚ãô t‚ÇÇ.truncLE n :=
    asIso (F.truncLEComparison t‚ÇÅ t‚ÇÇ n)

@[reassoc (attr := simp)]
lemma truncLEIso_hom_inv_id_app (X : C) (n : ‚Ñ§) :
    (F.truncLEComparison t‚ÇÅ t‚ÇÇ n).app X ‚â´ (F.truncLEIso t‚ÇÅ t‚ÇÇ n).inv.app X = ùüô _ :=
  (F.truncLEIso t‚ÇÅ t‚ÇÇ n).hom_inv_id_app X

@[reassoc (attr := simp)]
lemma truncLEIso_inv_hom_id_app (X : C) (n : ‚Ñ§) :
    (F.truncLEIso t‚ÇÅ t‚ÇÇ n).inv.app X ‚â´ (F.truncLEComparison t‚ÇÅ t‚ÇÇ n).app X = ùüô _ :=
  (F.truncLEIso t‚ÇÅ t‚ÇÇ n).inv_hom_id_app X


noncomputable def triangleLEGEIso (a b : ‚Ñ§) (h : a + 1 = b) :
    F ‚ãô t‚ÇÇ.triangleLEGE a b h ‚âÖ t‚ÇÅ.triangleLEGE a b h ‚ãô F.mapTriangle :=
  Pretriangulated.Triangle.functorIsoMk _ _ (F.truncLEIso t‚ÇÅ t‚ÇÇ a).symm (Iso.refl _)
    (F.truncGEIso t‚ÇÅ t‚ÇÇ b) (by
      ext X
      dsimp
      rw [‚Üê cancel_epi ((F.truncLEIso t‚ÇÅ t‚ÇÇ a).hom.app X)]
      simp) (by aesop_cat) (by
      ext X
      dsimp
      obtain ‚ü®e, h‚ÇÅ, h‚ÇÉ, _‚ü© := TExact.triangleGELEIso_aux F t‚ÇÅ t‚ÇÇ a b h X
      have h‚ÇÅ' : e.hom.hom‚ÇÅ = (F.truncLEIso t‚ÇÅ t‚ÇÇ a).inv.app X := by
        rw [‚Üê cancel_mono e.inv.hom‚ÇÅ, ‚Üê comp_hom‚ÇÅ, e.hom_inv_id, id_hom‚ÇÅ,
          h‚ÇÅ, truncLEIso_inv_hom_id_app]
        rfl
      rw [‚Üê h‚ÇÅ', ‚Üê h‚ÇÉ]
      exact e.hom.comm‚ÇÉ)

noncomputable def truncLEGEIso (a b : ‚Ñ§) : t‚ÇÅ.truncLEGE a b ‚ãô F ‚âÖ F ‚ãô t‚ÇÇ.truncLEGE a b :=
  Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft (t‚ÇÅ.truncGE a) (F.truncLEIso t‚ÇÅ t‚ÇÇ b) ‚â™‚â´
    (Functor.associator _ _ _).symm ‚â™‚â´
    isoWhiskerRight (F.truncGEIso t‚ÇÅ t‚ÇÇ a).symm (t‚ÇÇ.truncLE b) ‚â™‚â´ Functor.associator _ _ _

noncomputable def truncGELEIso (a b : ‚Ñ§) : t‚ÇÅ.truncGELE a b ‚ãô F ‚âÖ F ‚ãô t‚ÇÇ.truncGELE a b :=
  Functor.associator _ _ _ ‚â™‚â´
    isoWhiskerLeft (t‚ÇÅ.truncLE b) (F.truncGEIso t‚ÇÅ t‚ÇÇ a).symm ‚â™‚â´
    (Functor.associator _ _ _).symm ‚â™‚â´
    isoWhiskerRight (F.truncLEIso t‚ÇÅ t‚ÇÇ b) (t‚ÇÇ.truncGE a) ‚â™‚â´ Functor.associator _ _ _

end Functor

end CategoryTheory
