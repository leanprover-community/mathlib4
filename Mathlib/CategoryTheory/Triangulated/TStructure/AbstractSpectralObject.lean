/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.SpectralObject

/-!
# "Abstract" spectral object of truncations

-/

open CategoryTheory Category Limits Pretriangulated

variable (C : Type _) [Category C] [HasShift C ‚Ñ§]

namespace CategoryTheory

namespace Triangulated

namespace SpectralObject

variable (Œπ : Type _) [Preorder Œπ] [OrderBot Œπ] [OrderTop Œπ]

structure AbstractSpectralObject where
  truncLT : Œπ ‚•§ C ‚•§ C
  truncGE : Œπ ‚•§ C ‚•§ C
  truncLTObjTopIso' : truncLT.obj ‚ä§ ‚âÖ ùü≠ C
  truncGEObjBotIso' : truncGE.obj ‚ä• ‚âÖ ùü≠ C
  truncGEŒ¥LT : truncGE ‚ü∂ truncLT ‚ãô ((whiskeringRight C C C).obj (shiftFunctor C (1 : ‚Ñ§)))

variable {C Œπ}
variable (F : AbstractSpectralObject C Œπ)

namespace AbstractSpectralObject

def truncLTObjTopIso : F.truncLT.obj ‚ä§ ‚âÖ ùü≠ C := F.truncLTObjTopIso'
def truncGEObjBotIso : F.truncGE.obj ‚ä• ‚âÖ ùü≠ C := F.truncGEObjBotIso'

def truncLTŒπ (a : Œπ) : F.truncLT.obj a ‚ü∂ ùü≠ C :=
  F.truncLT.map (homOfLE le_top) ‚â´ F.truncLTObjTopIso.hom

@[reassoc (attr := simp)]
lemma truncLTmap_Œπ {a b : Œπ} (œÜ : a ‚ü∂ b) :
    F.truncLT.map œÜ ‚â´ F.truncLTŒπ b = F.truncLTŒπ a := by
  dsimp only [truncLTŒπ]
  simp only [‚Üê Functor.map_comp_assoc]
  congr 1

def truncGEœÄ (a : Œπ) : ùü≠ C ‚ü∂ F.truncGE.obj a :=
  F.truncGEObjBotIso.inv ‚â´ F.truncGE.map (homOfLE bot_le)

@[reassoc (attr := simp)]
lemma truncGEœÄ_map {a b : Œπ} (œÜ : a ‚ü∂ b) :
    F.truncGEœÄ a ‚â´ F.truncGE.map œÜ = F.truncGEœÄ b := by
  dsimp only [truncGEœÄ]
  simp only [assoc, ‚Üê Functor.map_comp]
  congr 1

instance : IsIso (F.truncLTŒπ ‚ä§) := by
  dsimp [truncLTŒπ]
  erw [Functor.map_id, id_comp]
  infer_instance

instance : IsIso (F.truncGEœÄ ‚ä•) := by
  dsimp [truncGEœÄ]
  erw [Functor.map_id, comp_id]
  infer_instance


@[simps]
def triangleLTGE : Œπ ‚•§ C ‚•§ Triangle C where
  obj a := Triangle.functorMk (F.truncLTŒπ a) (F.truncGEœÄ a) (F.truncGEŒ¥LT.app a)
  map œÜ := Triangle.functorHomMk' (F.truncLT.map œÜ) (ùüô _) ((F.truncGE.map œÜ))
    (by simp) (by simp ) (by simp)

def truncGELT : Arrow Œπ ‚•§ C ‚•§ C where
  obj D := F.truncLT.obj D.right ‚ãô F.truncGE.obj D.left
  map œÜ := F.truncLT.map œÜ.right ‚ó´ F.truncGE.map œÜ.left

def triangleLTGEPrecompTruncGELT : Arrow‚ÇÇ Œπ ‚•§ C ‚•§ Triangle C :=
  (((whiskeringRight‚ÇÇ (Arrow‚ÇÇ Œπ) _ _ _).obj ((whiskeringLeft C C (Triangle C)))).obj
    (Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô F.truncGELT)).obj (Arrow‚ÇÇ.obj‚ÇÅ ‚ãô F.triangleLTGE)

@[simp]
def TruncGEToTruncGEGE.app (a b : Œπ) :
    F.truncGE.obj b ‚ü∂ F.truncGE.obj a ‚ãô F.truncGE.obj b :=
  whiskerRight (F.truncGEœÄ a) (F.truncGE.obj b)

@[simp]
def TruncLTLTToTruncLT.app (a b : Œπ) :
    F.truncLT.obj b ‚ãô F.truncLT.obj a ‚ü∂ F.truncLT.obj a :=
  whiskerRight (F.truncLTŒπ b) (F.truncLT.obj a)

@[simps]
def truncGEToTruncGEGE : Arrow.rightFunc ‚ãô F.truncGE ‚ü∂
    (((whiskeringRight‚ÇÇ (Arrow Œπ) _ _ _).obj ((whiskeringLeft C C C))).obj
      (Arrow.leftFunc ‚ãô F.truncGE)).obj (Arrow.rightFunc ‚ãô F.truncGE) where
  app D := (TruncGEToTruncGEGE.app F) D.left D.right
  naturality D‚ÇÅ D‚ÇÇ œÜ := by
    ext X
    dsimp
    simp only [NatTrans.naturality, NatTrans.naturality_assoc,
      ‚Üê Functor.map_comp, ‚Üê NatTrans.comp_app, truncGEœÄ_map]

@[simps]
def truncLTLTToTruncLT :
    (((whiskeringRight‚ÇÇ (Arrow Œπ) _ _ _).obj ((whiskeringLeft C C C))).obj
      (Arrow.rightFunc ‚ãô F.truncLT)).obj (Arrow.leftFunc ‚ãô F.truncLT) ‚ü∂
        Arrow.leftFunc ‚ãô F.truncLT where
  app D := (TruncLTLTToTruncLT.app F) D.left D.right
  naturality D‚ÇÅ D‚ÇÇ œÜ := by
    ext X
    dsimp
    simp only [NatTrans.naturality, assoc, ‚Üê Functor.map_comp,
      ‚Üê NatTrans.comp_app, truncLTmap_Œπ]

def truncLTGE : Arrow Œπ ‚•§ C ‚•§ C where
  obj D := F.truncGE.obj D.left ‚ãô F.truncLT.obj D.right
  map œÜ := F.truncGE.map œÜ.left ‚ó´ F.truncLT.map œÜ.right

def truncLTGELTSelfToTruncLTGE :
    (((whiskeringRight‚ÇÇ (Arrow Œπ) _ _ _).obj ((whiskeringLeft C C C))).obj
      (Arrow.rightFunc ‚ãô F.truncLT)).obj F.truncLTGE ‚ü∂ F.truncLTGE where
  app D := whiskerRight (F.truncLTŒπ D.right) (F.truncLTGE.obj D)
  naturality {D‚ÇÅ D‚ÇÇ} œÜ:= by
    ext X
    dsimp
    simp only [NatTrans.naturality, assoc, ‚Üê Functor.map_comp,
      ‚Üê NatTrans.comp_app, truncLTmap_Œπ]

def truncLTGELTSelfToTruncGELT :
    (((whiskeringRight‚ÇÇ (Arrow Œπ) _ _ _).obj ((whiskeringLeft C C C))).obj
      (Arrow.rightFunc ‚ãô F.truncLT)).obj F.truncLTGE ‚ü∂ F.truncGELT where
  app D := whiskerLeft (F.truncGELT.obj D) (F.truncLTŒπ D.right)
  naturality {D‚ÇÅ D‚ÇÇ} œÜ := by
    ext
    dsimp [truncLTGE, truncGELT]
    simp only [NatTrans.naturality_assoc, assoc, NatTrans.naturality,
      Functor.id_obj, Functor.id_map]
    simp only [‚Üê assoc]
    congr 2
    rw [‚Üê NatTrans.comp_app, truncLTmap_Œπ]

variable
  [Preadditive C] [HasZeroObject C]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

class IsCompatible where
  isIso_truncGEToTruncGEGE : IsIso F.truncGEToTruncGEGE := by infer_instance
  isIso_truncLTLTToTruncLT : IsIso F.truncLTLTToTruncLT := by infer_instance
  isIso_truncLTGELTSelfToTruncLTGE : IsIso F.truncLTGELTSelfToTruncLTGE := by infer_instance
  isIso_truncLTGELTSelfToTruncGELT : IsIso F.truncLTGELTSelfToTruncGELT := by infer_instance
  truncGEœÄ_compatibility' (a : Œπ) (X : C) :
    (F.truncGE.obj a).map ((F.truncGEœÄ a).app X) =
      (F.truncGEœÄ a).app ((F.truncGE.obj a).obj X)
  truncLTŒπ_compatibility' (a : Œπ) (X : C) :
    (F.truncLT.obj a).map ((F.truncLTŒπ a).app X) =
      (F.truncLTŒπ a).app ((F.truncLT.obj a).obj X)
  distinguished (a : Œπ) (X : C) : (F.triangleLTGE.obj a).obj X ‚àà distTriang C

variable [F.IsCompatible]

lemma triangleLTGEPrecompTruncGELT_distinguished (D : Arrow‚ÇÇ Œπ) (X : C) :
    (F.triangleLTGEPrecompTruncGELT.obj D).obj X ‚àà distTriang C :=
  IsCompatible.distinguished _ _

attribute [instance] IsCompatible.isIso_truncGEToTruncGEGE
  IsCompatible.isIso_truncLTLTToTruncLT IsCompatible.isIso_truncLTGELTSelfToTruncLTGE
  IsCompatible.isIso_truncLTGELTSelfToTruncGELT

@[simps! hom]
noncomputable def truncGEIsoTruncGEGE := asIso F.truncGEToTruncGEGE

@[simps! hom]
noncomputable def truncLTLTIsoTruncLT := asIso F.truncLTLTToTruncLT

@[simps!]
noncomputable def truncGEGELTIsoTruncGELT :
  Arrow‚ÇÇ.Œ¥‚ÇÄ ‚ãô F.truncGELT ‚âÖ
    (((whiskeringRight‚ÇÇ (Arrow‚ÇÇ Œπ) _ _ _).obj ((whiskeringLeft C C C))).obj
      (Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô F.truncGELT)).obj (Arrow‚ÇÇ.obj‚ÇÅ ‚ãô F.truncGE) :=
  NatIso.ofComponents (fun D => isoWhiskerLeft (F.truncLT.obj D.X‚ÇÇ)
    (F.truncGEIsoTruncGEGE.app (Arrow‚ÇÇ.Œ¥‚ÇÇ.obj D))) (fun {D‚ÇÅ D‚ÇÇ} œÜ => by
      ext X
      dsimp [truncGELT]
      simp only [assoc, Functor.map_comp, NatTrans.naturality, NatTrans.naturality_assoc]
      simp only [‚Üê Functor.map_comp]
      congr 2
      simp only [‚Üê NatTrans.naturality, ‚Üê NatTrans.naturality_assoc, Functor.id_map,
        ‚Üê NatTrans.comp_app, truncGEœÄ_map])

def truncGELTœÄ := whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ F.truncGELT

lemma truncGEœÄ_compatibility (a : Œπ) (X : C) :
    (F.truncGE.obj a).map ((F.truncGEœÄ a).app X) =
      (F.truncGEœÄ a).app ((F.truncGE.obj a).obj X) :=
  IsCompatible.truncGEœÄ_compatibility' _ _

lemma truncLTŒπ_compatibility (a : Œπ) (X : C) :
    (F.truncLT.obj a).map ((F.truncLTŒπ a).app X) =
      (F.truncLTŒπ a).app ((F.truncLT.obj a).obj X) :=
  IsCompatible.truncLTŒπ_compatibility' _ _

@[reassoc]
lemma truncGEGELTIsoTruncGELT_compatibility (D : Arrow‚ÇÇ Œπ) (X : C) :
  (F.truncGELTœÄ.app D).app X ‚â´ (F.truncGEGELTIsoTruncGELT.hom.app D).app X =
    (F.truncGEœÄ D.X‚ÇÅ).app (((truncGELT F).obj (Arrow‚ÇÇ.Œ¥‚ÇÅ.obj D)).obj X) := by
  dsimp [truncGELTœÄ, truncGELT]
  simp only [Functor.map_id, NatTrans.id_app, comp_id,
    ‚Üê NatTrans.naturality, truncGEœÄ_compatibility]
  exact (congr_app (F.truncGEœÄ_map D.f) (((F.truncGE.obj D.X‚ÇÄ).obj ((F.truncLT.obj D.X‚ÇÇ).obj X))))

@[simps!]
noncomputable def truncGELTIsoTruncGELTLT :
  Arrow‚ÇÇ.Œ¥‚ÇÇ ‚ãô F.truncGELT ‚âÖ
    (((whiskeringRight‚ÇÇ (Arrow‚ÇÇ Œπ) _ _ _).obj ((whiskeringLeft C C C))).obj
      (Arrow‚ÇÇ.obj‚ÇÇ ‚ãô F.truncLT)).obj (Arrow‚ÇÇ.Œ¥‚ÇÇ ‚ãô F.truncGELT) :=
  Iso.symm
    (NatIso.ofComponents (fun D => isoWhiskerRight ((F.truncLTLTIsoTruncLT.app
      (Arrow‚ÇÇ.Œ¥‚ÇÄ.obj D))) (F.truncGE.obj D.X‚ÇÄ)) (fun {D‚ÇÅ D‚ÇÇ} œÜ => by
        ext X
        dsimp [truncGELT]
        simp only [assoc, NatTrans.naturality_assoc, ‚Üê Functor.map_comp]
        congr 2
        rw [NatTrans.naturality, ‚Üê NatTrans.comp_app, truncLTmap_Œπ]))

noncomputable def truncLTGELTSelfIsoTruncLTGE := asIso F.truncLTGELTSelfToTruncLTGE
noncomputable def truncLTGELTSelfIsoTruncGELT := asIso F.truncLTGELTSelfToTruncGELT

noncomputable def truncLTGEIsoTruncGELT : F.truncLTGE ‚âÖ F.truncGELT :=
  F.truncLTGELTSelfIsoTruncLTGE.symm ‚â™‚â´ F.truncLTGELTSelfIsoTruncGELT

@[reassoc]
lemma truncLTGEIsoTruncGELT_compatibility {a b : Œπ} (œÜ : a ‚ü∂ b) (X : C) :
    (F.truncLTGEIsoTruncGELT.hom.app (Arrow.mk œÜ)).app X ‚â´
      (F.truncGE.obj a).map ((F.truncLTŒπ b).app X) =
      (F.truncLTŒπ b).app ((F.truncGE.obj a).obj X) := by
  have eq‚ÇÅ := congr_app (F.truncLTGELTSelfIsoTruncLTGE.hom_inv_id_app (Arrow.mk œÜ)) X
  rw [NatTrans.comp_app] at eq‚ÇÅ
  dsimp [truncLTGEIsoTruncGELT]
  simp only [‚Üê cancel_epi ((F.truncLTGELTSelfIsoTruncLTGE.hom.app (Arrow.mk œÜ)).app X), assoc,
    reassoc_of% eq‚ÇÅ, NatTrans.id_app, id_comp]
  dsimp [truncLTGELTSelfIsoTruncGELT, truncLTGELTSelfIsoTruncLTGE,
    truncLTGELTSelfToTruncGELT, truncLTGELTSelfToTruncLTGE, asIso, truncLTGE, truncGELT]
  simp only [NatTrans.naturality, Functor.id_obj, Functor.id_map]

noncomputable def truncGELTLTIsoTruncGELT :
    (((whiskeringRight‚ÇÇ (Arrow‚ÇÇ Œπ) _ _ _).obj ((whiskeringLeft C C C))).obj
      (Arrow‚ÇÇ.obj‚ÇÇ ‚ãô F.truncLT)).obj (Arrow‚ÇÇ.Œ¥‚ÇÇ ‚ãô F.truncGELT) ‚âÖ
    (((whiskeringRight‚ÇÇ (Arrow‚ÇÇ Œπ) _ _ _).obj ((whiskeringLeft C C C))).obj
      (Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô F.truncGELT)).obj (Arrow‚ÇÇ.obj‚ÇÅ ‚ãô F.truncLT) :=
  (NatIso.ofComponents (fun D => isoWhiskerLeft (F.truncLT.obj D.X‚ÇÇ)
    (F.truncLTGEIsoTruncGELT.app (Arrow‚ÇÇ.Œ¥‚ÇÇ.obj D)).symm) (fun {D‚ÇÅ D‚ÇÇ} œÜ => by
      ext X
      have eq := congr_app (F.truncLTGEIsoTruncGELT.inv.naturality
        (Arrow‚ÇÇ.Œ¥‚ÇÇ.map œÜ)) ((F.truncLT.obj D‚ÇÇ.X‚ÇÇ).obj X)
      have eq' := (F.truncLTGEIsoTruncGELT.inv.app (Arrow.mk D‚ÇÅ.f)).naturality
        ((F.truncLT.map œÜ.œÑ‚ÇÇ).app X)
      simp only [NatTrans.naturality_assoc, assoc, Functor.map_comp, NatTrans.naturality]
      dsimp [truncGELT, truncLTGE] at eq eq' ‚ä¢
      simp only [assoc] at eq eq' ‚ä¢
      rw [eq, reassoc_of% eq']
      congr 1
      simp only [NatTrans.naturality_assoc, Functor.map_comp, assoc, NatTrans.naturality]
      simp only [‚Üê Functor.map_comp, NatTrans.naturality]))

noncomputable def truncLTGELTIsoTruncGELT :
  Arrow‚ÇÇ.Œ¥‚ÇÇ ‚ãô F.truncGELT ‚âÖ
    (((whiskeringRight‚ÇÇ (Arrow‚ÇÇ Œπ) _ _ _).obj ((whiskeringLeft C C C))).obj
      (Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô F.truncGELT)).obj (Arrow‚ÇÇ.obj‚ÇÅ ‚ãô F.truncLT) :=
  F.truncGELTIsoTruncGELTLT ‚â™‚â´ F.truncGELTLTIsoTruncGELT

def truncGELTŒπ := whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ F.truncGELT

/-- truncLTGELTIsoTruncGELT_compatibility' -/
@[reassoc]
lemma truncLTGELTIsoTruncGELT_compatibility' (D : Arrow‚ÇÇ Œπ) (X : C) :
    (F.truncLTGELTIsoTruncGELT.inv.app D).app X ‚â´
      ((F.truncGELTŒπ).app D).app X =
    (F.truncLTŒπ D.X‚ÇÅ).app ((F.truncGELT.obj (Arrow‚ÇÇ.Œ¥‚ÇÅ.obj D)).obj X) := by
  dsimp [truncLTGELTIsoTruncGELT, truncGELTŒπ, truncGELT,
    truncLTLTIsoTruncLT, truncGELTLTIsoTruncGELT]
  rw [Functor.map_id, NatTrans.id_app, id_comp, assoc, ‚Üê Functor.map_comp,
    NatTrans.naturality, F.truncLTŒπ_compatibility, ‚Üê NatTrans.comp_app, truncLTmap_Œπ,
    truncLTGEIsoTruncGELT_compatibility]

@[reassoc]
lemma truncLTGELTIsoTruncGELT_compatibility (D : Arrow‚ÇÇ Œπ) (X : C) :
    (F.truncLTGELTIsoTruncGELT.hom.app D).app X ‚â´
      (F.truncLTŒπ D.X‚ÇÅ).app ((F.truncGELT.obj (Arrow‚ÇÇ.Œ¥‚ÇÅ.obj D)).obj X) =
    ((F.truncGELTŒπ).app D).app X := by
  simp only [‚Üê truncLTGELTIsoTruncGELT_compatibility',
    ‚Üê NatTrans.comp_app, Iso.hom_inv_id_assoc]

noncomputable def truncGELTŒ¥ : Arrow‚ÇÇ.Œ¥‚ÇÄ ‚ãô F.truncGELT ‚ü∂
    Arrow‚ÇÇ.Œ¥‚ÇÇ ‚ãô F.truncGELT ‚ãô ((whiskeringRight C C C).obj (shiftFunctor C (1 : ‚Ñ§))) := by
  refine F.truncGEGELTIsoTruncGELT.hom ‚â´
    (((whiskeringRight‚ÇÇ (Arrow‚ÇÇ Œπ) (C ‚•§ C) (C ‚•§ C) (C ‚•§ C)).obj
      (whiskeringLeft C C C)).obj (Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô F.truncGELT)).map
        (whiskerLeft Arrow‚ÇÇ.obj‚ÇÅ F.truncGEŒ¥LT) ‚â´ ?_ ‚â´
    whiskerRight F.truncLTGELTIsoTruncGELT.inv
      ((whiskeringRight C C C).obj (shiftFunctor C (1 : ‚Ñ§)))
  exact { app := fun D => ùüô _ }

@[simps]
noncomputable def triangle : Arrow‚ÇÇ Œπ ‚•§ C ‚•§ Triangle C where
  obj D := Triangle.functorMk (F.truncGELTŒπ.app D) (F.truncGELTœÄ.app D) (F.truncGELTŒ¥.app D)
  map œÜ := Triangle.functorHomMk' ((Arrow‚ÇÇ.Œ¥‚ÇÇ ‚ãô F.truncGELT).map œÜ)
      (((Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô F.truncGELT).map œÜ)) ((((Arrow‚ÇÇ.Œ¥‚ÇÄ ‚ãô F.truncGELT).map œÜ)))
        (F.truncGELTŒπ.naturality œÜ).symm (F.truncGELTœÄ.naturality œÜ).symm
        (F.truncGELTŒ¥.naturality œÜ).symm

@[simps!]
noncomputable def triangleObjIsoTriangleLTGEPrecompTruncGELTObj (D : Arrow‚ÇÇ Œπ) :
    F.triangle.obj D ‚âÖ F.triangleLTGEPrecompTruncGELT.obj D := by
  refine Triangle.functorIsoMk _ _ (F.truncLTGELTIsoTruncGELT.app D) (Iso.refl _)
    (F.truncGEGELTIsoTruncGELT.app D) ?_ ?_ ?_
  ¬∑ ext X
    dsimp [triangleLTGEPrecompTruncGELT]
    rw [comp_id]
    exact (F.truncLTGELTIsoTruncGELT_compatibility D X).symm
  ¬∑ ext X
    dsimp [triangleLTGEPrecompTruncGELT]
    rw [id_comp]
    exact F.truncGEGELTIsoTruncGELT_compatibility D X
  ¬∑ ext X
    dsimp [truncGELTŒ¥, triangleLTGEPrecompTruncGELT, whiskeringRight‚ÇÇ, triangleLTGE]
    simp only [Functor.map_id, id_comp, assoc]
    rw [‚Üê Functor.map_comp, ‚Üê NatTrans.comp_app, Iso.inv_hom_id_app, NatTrans.id_app]
    erw [Functor.map_id, comp_id]

noncomputable def triangleIsoTriangleLTGEPrecompTruncGELT :
    F.triangle ‚âÖ F.triangleLTGEPrecompTruncGELT :=
  NatIso.ofComponents F.triangleObjIsoTriangleLTGEPrecompTruncGELTObj (fun œÜ => by
    ext X
    ¬∑ exact congr_app (F.truncLTGELTIsoTruncGELT.hom.naturality œÜ) X
    ¬∑ dsimp [triangle, triangleLTGEPrecompTruncGELT, triangleLTGE]
      rw [comp_id, id_comp]
    ¬∑ exact congr_app (F.truncGEGELTIsoTruncGELT.hom.naturality œÜ) X)

lemma triangle_distinguished (D : Arrow‚ÇÇ Œπ) (X : C) :
    (F.triangle.obj D).obj X ‚àà distTriang C :=
  isomorphic_distinguished _ (F.triangleLTGEPrecompTruncGELT_distinguished D X) _
    (((F.triangleIsoTriangleLTGEPrecompTruncGELT).app D).app X)

set_option maxHeartbeats 800000 in
-- it is slow
@[simps]
noncomputable def spectralObject (X : C) :
    SpectralObject C Œπ where
  œâ‚ÇÅ :=
    { obj := fun D => (F.truncGELT.obj (Arrow.mk (D.map' 0 1))).obj X
      map := fun {D‚ÇÅ D‚ÇÇ} f => (F.truncGELT.map
        { left := by exact ComposableArrows.app' f 0
          right := by exact ComposableArrows.app' f 1 }).app X
      map_id := fun D => by
        change ((F.truncGELT).map (ùüô (Arrow.mk (D.map' 0 1)))).app X = _
        simp
      map_comp := fun {D‚ÇÅ D‚ÇÇ d‚ÇÉ} f g => by
        dsimp
        conv_rhs =>
          rw [‚Üê NatTrans.comp_app, ‚Üê Functor.map_comp]
        rfl }
  Œ¥' :=
    { app := fun D => (F.truncGELTŒ¥.app (Arrow‚ÇÇ.mk (D.map' 0 1) (D.map' 1 2))).app X
      naturality := fun {D‚ÇÅ D‚ÇÇ} f => by
        dsimp
        let œÜ : Arrow‚ÇÇ.mk (D‚ÇÅ.map' 0 1) (D‚ÇÅ.map' 1 2) ‚ü∂
            Arrow‚ÇÇ.mk (D‚ÇÇ.map' 0 1) (D‚ÇÇ.map' 1 2) :=
          { œÑ‚ÇÄ := f.app 0
            œÑ‚ÇÅ := f.app 1
            œÑ‚ÇÇ := f.app 2 }
        exact congr_app (F.truncGELTŒ¥.naturality œÜ) X }
  distinguished' D := by
    obtain ‚ü®_, _, _, f, g, rfl‚ü© := ComposableArrows.mk‚ÇÇ_surjective D
    exact F.triangle_distinguished (Arrow‚ÇÇ.mk f g) X

end AbstractSpectralObject

end SpectralObject

end Triangulated

end CategoryTheory
