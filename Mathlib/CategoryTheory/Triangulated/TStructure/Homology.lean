/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.TStructure.TExact
import Mathlib.CategoryTheory.Triangulated.TStructure.Shift
import Mathlib.CategoryTheory.Triangulated.TStructure.AbelianSubcategory
import Mathlib.CategoryTheory.Triangulated.Yoneda
import Mathlib.CategoryTheory.Limits.FullSubcategory
import Mathlib.CategoryTheory.Preadditive.Yoneda.Basic
import Mathlib.Algebra.Homology.ShortComplex.ULift
import Mathlib.Algebra.Homology.ShortComplex.ShortComplexFour

/-!
# Homology for a t-structure

-/

universe v v'

open CategoryTheory Category Limits Pretriangulated Preadditive ZeroObject

namespace CategoryTheory

namespace Limits

namespace CokernelCofork

variable {C : Type*} [Category C] [Preadditive C]

lemma nonempty_isColimit_iff_preadditiveYoneda {X Y : C} {f : X ‚ü∂ Y} (c : CokernelCofork f) :
    Nonempty (IsColimit c) ‚Üî ‚àÄ (A : C), ((ShortComplex.mk _ _ c.condition).op.map
      (preadditiveYoneda.obj A)).Exact ‚àß
      Mono (((ShortComplex.mk _ _ c.condition).op.map (preadditiveYoneda.obj A)).f) := by
  simp_rw [ShortComplex.ab_exact_iff, AddCommGrp.mono_iff_injective]
  constructor
  ¬∑ intro ‚ü®h‚ü© A
    constructor
    ¬∑ rintro (x‚ÇÇ : Y ‚ü∂ A) (hx‚ÇÇ : f ‚â´ x‚ÇÇ = 0)
      exact ‚ü®_, (CokernelCofork.IsColimit.desc' h x‚ÇÇ hx‚ÇÇ).2‚ü©
    ¬∑ rintro (x‚ÇÅ : c.pt ‚ü∂ A) (x‚ÇÅ' : c.pt ‚ü∂ A) (h‚ÇÅ : c.œÄ ‚â´ x‚ÇÅ = c.œÄ ‚â´ x‚ÇÅ')
      exact Cofork.IsColimit.hom_ext h h‚ÇÅ
  ¬∑ rintro h
    exact ‚ü®Cofork.IsColimit.mk _
      (fun s => ((h _).1 s.œÄ (CokernelCofork.condition s)).choose)
      (fun s => ((h _).1 s.œÄ (CokernelCofork.condition s)).choose_spec)
      (fun s m hm => (h _).2
        (hm.trans ((h _).1 s.œÄ (CokernelCofork.condition s)).choose_spec.symm))‚ü©

end CokernelCofork

namespace KernelFork

variable {C : Type*} [Category C] [Preadditive C]

lemma nonempty_isLimit_iff_preadditiveCoyoneda {X Y : C} {f : X ‚ü∂ Y} (c : KernelFork f) :
    Nonempty (IsLimit c) ‚Üî ‚àÄ (A : C), ((ShortComplex.mk _ _ c.condition).map
      (preadditiveCoyoneda.obj (Opposite.op A))).Exact ‚àß
      Mono (((ShortComplex.mk _ _ c.condition).map (preadditiveCoyoneda.obj
        (Opposite.op A))).f) := by
  simp_rw [ShortComplex.ab_exact_iff, AddCommGrp.mono_iff_injective]
  constructor
  ¬∑ intro ‚ü®h‚ü© A
    constructor
    ¬∑ rintro (x‚ÇÇ : A ‚ü∂ X) (hx‚ÇÇ : x‚ÇÇ ‚â´ f = 0)
      exact ‚ü®_, (KernelFork.IsLimit.lift' h x‚ÇÇ hx‚ÇÇ).2‚ü©
    ¬∑ rintro (x‚ÇÅ : A ‚ü∂ c.pt) (x‚ÇÅ' : A ‚ü∂ c.pt) (h‚ÇÅ : x‚ÇÅ ‚â´ c.Œπ = x‚ÇÅ' ‚â´ c.Œπ)
      exact Fork.IsLimit.hom_ext h h‚ÇÅ
  ¬∑ rintro h
    exact ‚ü®Fork.IsLimit.mk _
      (fun s => ((h _).1 s.Œπ (KernelFork.condition s)).choose)
      (fun s => ((h _).1 s.Œπ (KernelFork.condition s)).choose_spec)
      (fun s m hm => (h _).2 (hm.trans ((h _).1 s.Œπ (KernelFork.condition s)).choose_spec.symm))‚ü©

end KernelFork

end Limits

namespace ShortComplex

variable {C : Type*} [Category C]

variable [Preadditive C]

lemma exact_and_epi_g_iff (S : ShortComplex C) [Balanced C] [S.HasHomology] :
    (S.Exact ‚àß Epi S.g) ‚Üî
      Nonempty (IsColimit (CokernelCofork.ofœÄ _ S.zero)) := by
  constructor
  ¬∑ rintro ‚ü®hS, _‚ü©
    exact ‚ü®hS.gIsCokernel‚ü©
  ¬∑ intro ‚ü®h‚ü©
    exact ‚ü®S.exact_of_g_is_cokernel h, ‚ü®fun _ _ => Cofork.IsColimit.hom_ext h‚ü©‚ü©

lemma exact_and_mono_f_iff (S : ShortComplex C) [Balanced C] [S.HasHomology] :
    (S.Exact ‚àß Mono S.f) ‚Üî
      Nonempty (IsLimit (KernelFork.ofŒπ _ S.zero)) := by
  constructor
  ¬∑ rintro ‚ü®hS, _‚ü©
    exact ‚ü®hS.fIsKernel‚ü©
  ¬∑ intro ‚ü®h‚ü©
    exact ‚ü®S.exact_of_f_is_kernel h, ‚ü®fun _ _ => Fork.IsLimit.hom_ext h‚ü©‚ü©

lemma exact_and_epi_g_iff_preadditiveYoneda (S : ShortComplex C) [Balanced C] [S.HasHomology] :
    (S.Exact ‚àß Epi S.g) ‚Üî
      ‚àÄ (A : C), (S.op.map (preadditiveYoneda.obj A)).Exact ‚àß
        Mono (S.op.map (preadditiveYoneda.obj A)).f := by
  rw [exact_and_epi_g_iff, CokernelCofork.nonempty_isColimit_iff_preadditiveYoneda]
  rfl

lemma exact_and_mono_f_iff_preadditiveCoyoneda (S : ShortComplex C) [Balanced C] [S.HasHomology] :
    (S.Exact ‚àß Mono S.f) ‚Üî
      ‚àÄ (A : C), (S.map (preadditiveCoyoneda.obj (Opposite.op A))).Exact ‚àß
        Mono (S.map (preadditiveCoyoneda.obj (Opposite.op A))).f := by
  rw [exact_and_mono_f_iff, KernelFork.nonempty_isLimit_iff_preadditiveCoyoneda]
  rfl

end ShortComplex

namespace Functor

variable {C D H : Type*} [Category C] [Category D] [Category H]
  (i : C ‚•§ D) [Full i] [Faithful i]

noncomputable def preimageNatTrans {F‚ÇÅ F‚ÇÇ : H ‚•§ C} (œÑ : F‚ÇÅ ‚ãô i ‚ü∂ F‚ÇÇ ‚ãô i) : F‚ÇÅ ‚ü∂ F‚ÇÇ where
  app X := i.preimage (œÑ.app X)
  naturality {X Y} f := i.map_injective (by
    simp only [map_comp, map_preimage]
    exact œÑ.naturality f)

@[simp]
lemma image_preimageNatTrans {F‚ÇÅ F‚ÇÇ : H ‚•§ C} (œÑ : F‚ÇÅ ‚ãô i ‚ü∂ F‚ÇÇ ‚ãô i) (X : H) :
    i.map ((i.preimageNatTrans œÑ).app X) = œÑ.app X := by
  simp [preimageNatTrans]

@[simp]
lemma preimageNatTrans_id (F : H ‚•§ C) : i.preimageNatTrans (ùüô (F ‚ãô i)) = ùüô F := by
  ext X
  apply i.map_injective
  simp

@[reassoc (attr := simp)]
lemma preimageNatTrans_comp {F‚ÇÅ F‚ÇÇ F‚ÇÉ : H ‚•§ C} (œÑ : F‚ÇÅ ‚ãô i ‚ü∂ F‚ÇÇ ‚ãô i) (œÑ' : F‚ÇÇ ‚ãô i ‚ü∂ F‚ÇÉ ‚ãô i) :
    i.preimageNatTrans œÑ ‚â´ i.preimageNatTrans œÑ' = i.preimageNatTrans (œÑ ‚â´ œÑ') := by
  ext X
  apply i.map_injective
  simp

@[simps]
noncomputable def preimageNatIso {F‚ÇÅ F‚ÇÇ : H ‚•§ C} (e : F‚ÇÅ ‚ãô i ‚âÖ F‚ÇÇ ‚ãô i) : F‚ÇÅ ‚âÖ F‚ÇÇ where
  hom := i.preimageNatTrans e.hom
  inv := i.preimageNatTrans e.inv

lemma isEquivalenceFullSubcategoryLift (S : ObjectProperty D) (hi : i.essImage = S) :
    IsEquivalence (S.lift i
      (fun X => by rw [‚Üê hi]; exact obj_mem_essImage i X)) := by
  let F := S.lift i
      (fun X => by rw [‚Üê hi]; exact obj_mem_essImage i X)
  have : Full F := ‚ü®fun f ‚Ü¶ ‚ü® i.preimage f, by simp [F]‚ü©‚ü©
  have : Faithful F := ‚ü®fun {X Y} f g h => i.map_injective h‚ü©
  have : EssSurj F := ‚ü®by
    rintro ‚ü®X, hX‚ü©
    rw [‚Üê hi] at hX
    obtain ‚ü®Y, ‚ü®e‚ü©‚ü© := hX
    exact ‚ü®Y, ‚ü®S.Œπ.preimageIso e‚ü©‚ü©‚ü©
  exact { }

end Functor

variable {C : Type*} [Category.{v} C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

namespace Triangulated

namespace TStructure

variable (t : TStructure C) [IsTriangulated C]

lemma truncLE‚ÇÄGE‚ÇÄ_mem_heart (X : C) :
    t.heart ((t.truncLEGE 0 0).obj X) := by
  rw [t.mem_heart_iff]
  dsimp [truncLEGE]
  constructor
  ¬∑ infer_instance
  ¬∑ infer_instance

lemma truncGE‚ÇÄLE‚ÇÄ_mem_heart (X : C) :
    t.heart ((t.truncGELE 0 0).obj X) := by
  rw [t.mem_heart_iff]
  constructor <;> infer_instance

variable [t.HasHeart]

class HasHomology‚ÇÄ where
  homology‚ÇÄ : C ‚•§ t.Heart
  iso : homology‚ÇÄ ‚ãô t.ŒπHeart ‚âÖ t.truncGELE 0 0

noncomputable def hasHomology‚ÇÄ : t.HasHomology‚ÇÄ where
  homology‚ÇÄ := t.liftHeart (t.truncGELE 0 0) t.truncGE‚ÇÄLE‚ÇÄ_mem_heart
  iso := t.liftHeartŒπHeart _ _

variable [ht : t.HasHomology‚ÇÄ]

def homology‚ÇÄ : C ‚•§ t.Heart := ht.homology‚ÇÄ

def homology‚ÇÄŒπHeart : t.homology‚ÇÄ ‚ãô t.ŒπHeart ‚âÖ t.truncGELE 0 0 := ht.iso

end TStructure

end Triangulated

namespace ObjectProperty

open Triangulated

variable (S : ObjectProperty C) [S.IsTriangulated] (t : TStructure C)
  [S.HasInducedTStructure t] [t.HasHeart]

instance : S.Œπ.TExact (S.tStructure t) t where
  rightTExact := ‚ü®fun _ _ ‚ü®hX‚ü© => ‚ü®hX‚ü©‚ü©
  leftTExact := ‚ü®fun _ _ ‚ü®hX‚ü© => ‚ü®hX‚ü©‚ü©

class ContainsHeart : Prop where
  subset : t.heart ‚â§ S

variable [hS : S.ContainsHeart t]

noncomputable instance : (S.tStructure t).HasHeart where
  H := t.Heart
  Œπ := S.lift t.ŒπHeart (fun X => hS.subset _ (t.ŒπHeart_obj_mem X))
  additive_Œπ := ‚ü®fun {X Y f g} => S.Œπ.map_injective (by simp)‚ü©
  fullŒπ := ‚ü®fun f => ‚ü®t.ŒπHeart.preimage f, by simp‚ü©‚ü©
  faithful_Œπ := ‚ü®fun {X Y} f g h => t.ŒπHeart.map_injective h‚ü©
  hŒπ := by
    ext X
    constructor
    ¬∑ rintro ‚ü®Y, ‚ü®e‚ü©‚ü©
      exact prop_of_iso t.heart (S.Œπ.mapIso e)
        (t.ŒπHeart_obj_mem Y)
    ¬∑ intro hX
      exact ‚ü®_, ‚ü®S.Œπ.preimageIso (t.ŒπHeartObjHeartMkIso _ hX)‚ü©‚ü©

noncomputable def ŒπHeartIso : (S.tStructure t).ŒπHeart ‚ãô S.Œπ ‚âÖ t.ŒπHeart := Iso.refl _

variable [t.HasHomology‚ÇÄ]

noncomputable instance : (S.tStructure t).HasHomology‚ÇÄ where
  homology‚ÇÄ := S.Œπ ‚ãô t.homology‚ÇÄ
  iso := S.Œπ.preimageNatIso (Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ (S.ŒπHeartIso t) ‚â™‚â´
      Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ t.homology‚ÇÄŒπHeart ‚â™‚â´
      (S.Œπ.truncGELEIso (S.tStructure t) t 0 0).symm)

noncomputable instance [t.homology‚ÇÄ.ShiftSequence ‚Ñ§] :
    (S.tStructure t).homology‚ÇÄ.ShiftSequence ‚Ñ§ :=
  (inferInstance : (S.Œπ ‚ãô t.homology‚ÇÄ).ShiftSequence ‚Ñ§)

instance : t.plus.ContainsHeart t where
  subset _ hX := ‚ü®0, ‚ü®hX.2‚ü©‚ü©

instance : t.minus.ContainsHeart t where
  subset _ hX := ‚ü®0, ‚ü®hX.1‚ü©‚ü©

instance : t.bounded.ContainsHeart t where
  subset _ hX := ‚ü®‚ü®0, ‚ü®hX.2‚ü©‚ü©, ‚ü®0, ‚ü®hX.1‚ü©‚ü©‚ü©

end ObjectProperty

namespace Triangulated

namespace TStructure

variable (t : TStructure C) [IsTriangulated C]

noncomputable abbrev tPlus := t.plus.tStructure t
noncomputable abbrev tMinus := t.minus.tStructure t
noncomputable abbrev tBounded := t.bounded.tStructure t

section

omit [IsTriangulated C] in
lemma zero_mem_heart : t.heart 0 := by
  rw [t.mem_heart_iff]
  constructor <;> infer_instance

omit [IsTriangulated C] in
lemma prod_mem_heart (X‚ÇÅ X‚ÇÇ : C) (hX‚ÇÅ : t.heart X‚ÇÅ) (hX‚ÇÇ : t.heart X‚ÇÇ) :
    t.heart (X‚ÇÅ ‚®Ø X‚ÇÇ) := by
  rw [t.mem_heart_iff]
  constructor
  ¬∑ exact t.isLE‚ÇÇ _ (binaryProductTriangle_distinguished X‚ÇÅ X‚ÇÇ) 0 ‚ü®hX‚ÇÅ.1‚ü© ‚ü®hX‚ÇÇ.1‚ü©
  ¬∑ exact t.isGE‚ÇÇ _ (binaryProductTriangle_distinguished X‚ÇÅ X‚ÇÇ) 0 ‚ü®hX‚ÇÅ.2‚ü© ‚ü®hX‚ÇÇ.2‚ü©

instance : HasTerminal t.heart.FullSubcategory := by
  let Z : t.heart.FullSubcategory  := ‚ü®0, t.zero_mem_heart‚ü©
  have : ‚àÄ X, Inhabited (X ‚ü∂ Z) := fun X => ‚ü®0‚ü©
  have : ‚àÄ X, Unique (X ‚ü∂ Z) := fun X =>
    { uniq := fun f => t.heart.Œπ.map_injective
        ((isZero_zero C).eq_of_tgt _ _) }
  exact hasTerminal_of_unique Z

instance : HasBinaryProducts t.heart.FullSubcategory := by
  apply hasLimitsOfShape_of_closedUnderLimits
  intro F c hc H
  exact t.heart.prop_of_iso
    (limit.isoLimitCone ‚ü®_, (IsLimit.postcomposeHomEquiv (diagramIsoPair F) _).symm hc‚ü©)
    (prod_mem_heart t _ _ (H _) (H _))

instance : HasFiniteProducts t.heart.FullSubcategory :=
  hasFiniteProducts_of_has_binary_and_terminal

variable [t.HasHeart]

noncomputable def heartEquivalenceFullsubcategory :
    t.Heart ‚âå t.heart.FullSubcategory :=
  have := t.ŒπHeart.isEquivalenceFullSubcategoryLift t.heart (by
    ext X
    rw [t.mem_essImage_ŒπHeart_iff])
  @Functor.asEquivalence _ _ _ _ _ this

instance : HasFiniteProducts t.Heart where
  out _ := Adjunction.hasLimitsOfShape_of_equivalence
      t.heartEquivalenceFullsubcategory.functor

instance (X : C) (n : ‚Ñ§) [t.IsGE X 0] : t.IsGE (X‚ü¶n‚üß) (-n) :=
  t.isGE_shift X 0 n (-n) (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsGE X 0] : t.IsGE (X‚ü¶-n‚üß) n :=
  t.isGE_shift X 0 (-n) n (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsLE X 0] : t.IsLE (X‚ü¶n‚üß) (-n) :=
  t.isLE_shift X 0 n (-n) (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsLE X 0] : t.IsLE (X‚ü¶-n‚üß) n :=
  t.isLE_shift X 0 (-n) n (by linarith)

instance (X : C) [t.IsLE X 0] : t.IsLE X 1 :=
  t.isLE_of_LE X 0 1 (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsLE X n] : t.IsLE (X‚ü¶(1 : ‚Ñ§)‚üß) n :=
  have := t.isLE_shift X n 1 (n - 1) (by linarith)
  t.isLE_of_LE (X‚ü¶(1 : ‚Ñ§)‚üß) (n - 1) n (by linarith)

instance (X : C) [t.IsGE X 0] : t.IsGE X (-1) :=
  t.isGE_of_GE X (-1) 0 (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsLE X n] : t.IsLE (X‚ü¶n‚üß) 0 :=
  t.isLE_shift X n n 0 (add_zero n)

instance (X : C) (n : ‚Ñ§) [t.IsGE X n] : t.IsGE (X‚ü¶n‚üß) 0 :=
  t.isGE_shift X n n 0 (add_zero n)

instance (X : C) : t.IsLE ((t.truncLT 0).obj X) (-1) :=
  t.isLE_of_iso ((t.truncLEIsoTruncLT (-1) 0 (by linarith)).app X) (-1)

section

variable {X‚ÇÅ X‚ÇÇ : t.Heart} {X‚ÇÉ : C} {f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {f‚ÇÇ : t.ŒπHeart.obj X‚ÇÇ ‚ü∂ X‚ÇÉ}
    {f‚ÇÉ : X‚ÇÉ ‚ü∂ (t.ŒπHeart.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß}
    (hT : Triangle.mk (t.ŒπHeart.map f‚ÇÅ) f‚ÇÇ f‚ÇÉ ‚àà distTriang C)

omit [IsTriangulated C]
include hT

lemma cocone_heart_isLE_zero : t.IsLE X‚ÇÉ 0 :=
  t.isLE‚ÇÇ _ (rot_of_distTriang _ hT) 0 (by dsimp; infer_instance)
    (by dsimp; infer_instance)

lemma cocone_heart_isGE_neg_one : t.IsGE X‚ÇÉ (-1) :=
  t.isGE‚ÇÇ _ (rot_of_distTriang _ hT) (-1)
    (by dsimp; infer_instance) (by dsimp; infer_instance)

end

lemma exists_distinguished_triangle_of_isLE_zero_of_isGE_neg_one
    (X : C) [t.IsLE X 0] [t.IsGE X (-1)] :
    ‚àÉ (K Q : t.Heart) (Œ± : (t.ŒπHeart.obj K)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ X) (Œ≤ : X ‚ü∂ t.ŒπHeart.obj Q)
      (Œ≥ : t.ŒπHeart.obj Q ‚ü∂ (t.ŒπHeart.obj K)‚ü¶(1 : ‚Ñ§)‚üß‚ü¶(1 : ‚Ñ§)‚üß),
      Triangle.mk Œ± Œ≤ Œ≥ ‚àà distTriang C := by
  have hK : t.heart (((t.truncLE (-1)).obj X)‚ü¶(-1 : ‚Ñ§)‚üß) := by
    rw [t.mem_heart_iff]
    constructor <;> dsimp <;> infer_instance
  have hQ : t.heart ((t.truncGE 0).obj X) := by
    rw [t.mem_heart_iff]
    constructor <;> infer_instance
  have e‚ÇÅ := (shiftFunctor C (1 : ‚Ñ§)).mapIso (t.ŒπHeartObjHeartMkIso _ hK) ‚â™‚â´
    (shiftEquiv C (1 : ‚Ñ§)).counitIso.app _
  have e‚ÇÉ := t.ŒπHeartObjHeartMkIso _ hQ
  refine ‚ü®t.heartMk _ hK, t.heartMk _ hQ, e‚ÇÅ.hom ‚â´ (t.truncLEŒπ (-1)).app X,
    (t.truncGEœÄ 0).app X ‚â´ e‚ÇÉ.inv,
    e‚ÇÉ.hom ‚â´ (t.truncGEŒ¥LE (-1) 0 (by linarith)).app X ‚â´ e‚ÇÅ.inv‚ü¶(1 : ‚Ñ§)‚üß', ?_‚ü©
  refine isomorphic_distinguished _ (t.triangleLEGE_distinguished (-1) 0 (by linarith) X) _ ?_
  refine Triangle.isoMk _ _ e‚ÇÅ (Iso.refl _) e‚ÇÉ ?_ ?_ ?_
  ¬∑ dsimp
    simp
  ¬∑ dsimp
    simp
  ¬∑ dsimp
    simp only [Category.assoc, Iso.cancel_iso_hom_left, ‚Üê Functor.map_comp,
      e‚ÇÅ.inv_hom_id, Functor.id_obj, Functor.map_id, Category.comp_id]

lemma admissibleMorphism_heart {X‚ÇÅ X‚ÇÇ : t.Heart} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    AbelianSubcategory.admissibleMorphism t.ŒπHeart f := by
  intro X‚ÇÉ f‚ÇÇ f‚ÇÉ hT
  have := t.cocone_heart_isLE_zero hT
  have := t.cocone_heart_isGE_neg_one hT
  exact t.exists_distinguished_triangle_of_isLE_zero_of_isGE_neg_one X‚ÇÉ

noncomputable instance : Abelian t.Heart := by
  apply AbelianSubcategory.abelian t.ŒπHeart
  ¬∑ intro X Y n f hn
    exact t.zero f 0 (-n) (by linarith)
  ¬∑ apply admissibleMorphism_heart

end

section

variable [TStructure.HasHeart.{_, _, _, v'} t] [t.HasHomology‚ÇÄ]

section

variable (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) [t.IsLE T.obj‚ÇÅ n]

@[simps! obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ mor‚ÇÅ mor‚ÇÇ]
noncomputable def truncLETriangle :
    Triangle C :=
  Triangle.mk ((t.truncLE n).map T.mor‚ÇÅ)
    ((t.truncLE n).map T.mor‚ÇÇ)
    ((t.truncLEŒπ n).app T.obj‚ÇÉ ‚â´ T.mor‚ÇÉ ‚â´ (asIso ((t.truncLEŒπ n).app T.obj‚ÇÅ)).inv‚ü¶(1 : ‚Ñ§)‚üß')

instance : t.IsLE (t.truncLETriangle T n).obj‚ÇÅ n := by dsimp; infer_instance
instance : t.IsLE (t.truncLETriangle T n).obj‚ÇÇ n := by dsimp; infer_instance
instance : t.IsLE (t.truncLETriangle T n).obj‚ÇÉ n := by dsimp; infer_instance

omit [t.HasHeart] in
include hT in
lemma truncLETriangle_distinguished :
    t.truncLETriangle T n ‚àà distTriang C := by
  let a : T.obj‚ÇÅ ‚ü∂ (t.truncLE n).obj T.obj‚ÇÇ :=
    (asIso ((t.truncLEŒπ n).app T.obj‚ÇÅ)).inv ‚â´ (t.truncLE n).map T.mor‚ÇÅ
  let b := (t.truncLEŒπ n).app T.obj‚ÇÇ
  have comm : a ‚â´ b = T.mor‚ÇÅ := by simp [a, b]
  obtain ‚ü®Z, f‚ÇÇ, f‚ÇÉ, h‚ÇÅ‚ü© := distinguished_cocone_triangle a
  have h‚ÇÇ := (t.triangleLEGT_distinguished n T.obj‚ÇÇ)
  have H := someOctahedron comm h‚ÇÅ h‚ÇÇ hT
  have : t.IsLE Z n := t.isLE‚ÇÇ _ (rot_of_distTriang _ h‚ÇÅ) n
      (by dsimp; infer_instance) (by dsimp; infer_instance)
  obtain ‚ü®e, he : e.hom.hom‚ÇÇ = ùüô _‚ü© :=
    t.triangle_iso_exists n (n + 1) (by linarith) _ _
      (t.triangleLEGE_distinguished n (n + 1) rfl T.obj‚ÇÉ) H.mem (Iso.refl _)
      (by dsimp; infer_instance) (by dsimp; infer_instance)
      (by dsimp; infer_instance) (by dsimp; infer_instance)
  have he' : e.inv.hom‚ÇÇ = ùüô _ := by
    rw [‚Üê cancel_mono e.hom.hom‚ÇÇ, ‚Üê comp_hom‚ÇÇ, e.inv_hom_id, id_hom‚ÇÇ, he, comp_id]
  have he‚ÇÅ' : (truncLE t n).map T.mor‚ÇÇ = f‚ÇÇ ‚â´ e.inv.hom‚ÇÅ := by
    apply to_truncLE_obj_ext
    have eq‚ÇÅ := e.inv.comm‚ÇÅ
    have eq‚ÇÇ := H.comm‚ÇÅ
    dsimp at eq‚ÇÅ eq‚ÇÇ ‚ä¢
    rw [NatTrans.naturality, Functor.id_map, ‚Üê eq‚ÇÇ, assoc, ‚Üê eq‚ÇÅ, he']
    simp
  have he‚ÇÅ : (truncLE t n).map T.mor‚ÇÇ ‚â´ e.hom.hom‚ÇÅ = f‚ÇÇ := by
    rw [he‚ÇÅ', assoc, ‚Üê comp_hom‚ÇÅ, e.inv_hom_id, id_hom‚ÇÅ]
    simp only [Triangle.mk_obj‚ÇÅ, comp_id]
  have he‚ÇÇ : (t.truncLETriangle T n).mor‚ÇÉ ‚â´
    (shiftFunctor C 1).map ((truncLEŒπ t n).app T.obj‚ÇÅ) = e.hom.hom‚ÇÅ ‚â´ f‚ÇÉ := by
    have eq‚ÇÅ := H.comm‚ÇÇ
    have eq‚ÇÇ := e.hom.comm‚ÇÅ
    dsimp at eq‚ÇÅ eq‚ÇÇ
    dsimp [truncLETriangle]
    erw [he, comp_id] at eq‚ÇÇ
    rw [assoc, assoc, ‚Üê Functor.map_comp, IsIso.inv_hom_id,
      Functor.map_id, comp_id, eq‚ÇÇ, assoc, eq‚ÇÅ]
  refine isomorphic_distinguished _ h‚ÇÅ _ ?_
  exact Triangle.isoMk _ _ (asIso ((t.truncLEŒπ n).app T.obj‚ÇÅ))
    (Iso.refl _) (Triangle.œÄ‚ÇÅ.mapIso e) (by simp [a]) (by simp [he‚ÇÅ]) he‚ÇÇ

end

section

variable (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) [t.IsGE T.obj‚ÇÉ n]

@[simps! obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ mor‚ÇÅ mor‚ÇÇ]
noncomputable def truncGETriangle :
    Triangle C :=
  Triangle.mk ((t.truncGE n).map T.mor‚ÇÅ) ((t.truncGE n).map T.mor‚ÇÇ)
    ((asIso ((t.truncGEœÄ n).app T.obj‚ÇÉ)).inv ‚â´ T.mor‚ÇÉ ‚â´ ((t.truncGEœÄ n).app T.obj‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß')

instance : t.IsGE (t.truncGETriangle T n).obj‚ÇÅ n := by dsimp; infer_instance
instance : t.IsGE (t.truncGETriangle T n).obj‚ÇÇ n := by dsimp; infer_instance
instance : t.IsGE (t.truncGETriangle T n).obj‚ÇÉ n := by dsimp; infer_instance

instance (X : C) [t.IsGE X n] : t.IsGE (X‚ü¶(-1 : ‚Ñ§)‚üß) n := by
  have : t.IsGE (X‚ü¶(-1 : ‚Ñ§)‚üß) (n + 1) :=
    t.isGE_shift X n (-1) (n + 1) (by linarith)
  exact t.isGE_of_GE _ n (n + 1) (by linarith)

omit [t.HasHeart] in
include hT in
lemma truncGETriangle_distinguished :
    t.truncGETriangle T n ‚àà distTriang C := by
  let a := (t.truncGEœÄ n).app T.obj‚ÇÇ
  let b : (t.truncGE n).obj T.obj‚ÇÇ ‚ü∂ T.obj‚ÇÉ :=
    (t.truncGE n).map T.mor‚ÇÇ ‚â´ (asIso ((t.truncGEœÄ n).app T.obj‚ÇÉ)).inv
  have comm : a ‚â´ b = T.mor‚ÇÇ := by simp [a, b]
  have h‚ÇÅ := rot_of_distTriang _ (t.triangleLEGE_distinguished (n-1) n (by linarith) T.obj‚ÇÇ)
  obtain ‚ü®Z, f‚ÇÅ, f‚ÇÉ, h‚ÇÇ‚ü© := distinguished_cocone_triangle‚ÇÅ b
  have H := someOctahedron comm h‚ÇÅ (rot_of_distTriang _ h‚ÇÇ) (rot_of_distTriang _ hT)
  obtain ‚ü®m‚ÇÅ, hm‚ÇÅ‚ü© : ‚àÉ (m‚ÇÅ : (t.truncLE (n-1)).obj T.obj‚ÇÇ ‚ü∂ T.obj‚ÇÅ),
    (shiftFunctor C (1 : ‚Ñ§)).map m‚ÇÅ = H.m‚ÇÅ := ‚ü®(shiftFunctor C (1 : ‚Ñ§)).preimage H.m‚ÇÅ, by simp‚ü©
  obtain ‚ü®m‚ÇÉ, hm‚ÇÉ‚ü© : ‚àÉ (m‚ÇÉ : T.obj‚ÇÅ ‚ü∂ Z), (shiftFunctor C (1 : ‚Ñ§)).map m‚ÇÉ = H.m‚ÇÉ :=
    ‚ü®(shiftFunctor C (1 : ‚Ñ§)).preimage H.m‚ÇÉ, by simp‚ü©
  let T' := Triangle.mk m‚ÇÅ m‚ÇÉ (f‚ÇÅ ‚â´ (t.truncGEŒ¥LE (n-1) n (by linarith)).app T.obj‚ÇÇ)
  have Hmem' : T' ‚àà distTriang C := by
    rw [‚Üê T'.shift_distinguished_iff 1]
    refine isomorphic_distinguished _ H.mem _ ?_
    refine Triangle.isoMk _ _ (Iso.refl _) (-(Iso.refl _)) (Iso.refl _) ?_ ?_ ?_
    ¬∑ dsimp
      simp [hm‚ÇÅ, T']
    ¬∑ dsimp
      simp [hm‚ÇÉ, T']
    ¬∑ dsimp
      simp [T']
  have : t.IsGE Z n := t.isGE‚ÇÇ _ (inv_rot_of_distTriang _ h‚ÇÇ) n
    (by dsimp; infer_instance) (by dsimp; infer_instance)
  obtain ‚ü®e, he : _ = ùüô _‚ü© :=
    t.triangle_iso_exists (n-1) n (by linarith) _ _
      (t.triangleLEGE_distinguished (n - 1) n (by linarith) T.obj‚ÇÅ)
      Hmem' (Iso.refl _) (by dsimp; infer_instance) (by dsimp; infer_instance)
      (by dsimp [T']; infer_instance) (by dsimp [T']; infer_instance)
  refine isomorphic_distinguished _ h‚ÇÇ _ ?_
  refine Triangle.isoMk _ _ (Triangle.œÄ‚ÇÉ.mapIso e) (Iso.refl _)
    (asIso ((t.truncGEœÄ n).app T.obj‚ÇÉ)).symm ?_ ?_ ?_
  ¬∑ dsimp
    simp only [comp_id]
    have eq‚ÇÅ := e.hom.comm‚ÇÇ
    have eq‚ÇÇ := H.comm‚ÇÑ
    dsimp [a] at eq‚ÇÅ eq‚ÇÇ
    simp only [neg_comp, comp_neg, neg_inj] at eq‚ÇÇ
    apply from_truncGE_obj_ext
    rw [reassoc_of% eq‚ÇÅ, he]
    dsimp
    rw [id_comp, ‚Üê NatTrans.naturality]
    dsimp [T']
    apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
    simpa only [Functor.map_comp, hm‚ÇÉ] using eq‚ÇÇ
  ¬∑ dsimp
    simp [b]
  ¬∑ dsimp [truncGETriangle]
    simp only [assoc, IsIso.eq_inv_comp, IsIso.hom_inv_id_assoc]
    have eq‚ÇÅ := H.comm‚ÇÉ
    have eq‚ÇÇ := e.hom.comm‚ÇÇ
    dsimp at eq‚ÇÅ eq‚ÇÇ
    rw [‚Üê eq‚ÇÅ, ‚Üê Functor.map_comp, eq‚ÇÇ, he]
    dsimp [T']
    rw [id_comp, hm‚ÇÉ]

end

noncomputable def toHomology‚ÇÄ (X : C) [t.IsLE X 0] : X ‚ü∂ t.ŒπHeart.obj ((t.homology‚ÇÄ).obj X) :=
  inv ((t.truncLEŒπ 0).app X) ‚â´ (t.truncGEœÄ 0).app _ ‚â´ t.homology‚ÇÄŒπHeart.inv.app X

omit [IsTriangulated C] in
@[reassoc (attr := simp)]
lemma toHomology‚ÇÄ_naturality {X Y : C} (f : X ‚ü∂ Y) [t.IsLE X 0] [t.IsLE Y 0] :
    t.toHomology‚ÇÄ X ‚â´ t.ŒπHeart.map (t.homology‚ÇÄ.map f) = f ‚â´ t.toHomology‚ÇÄ Y := by
  dsimp [toHomology‚ÇÄ]
  rw [‚Üê cancel_epi ((t.truncLEŒπ 0).app X), assoc, assoc, IsIso.hom_inv_id_assoc]
  erw [‚Üê NatTrans.naturality, ‚Üê NatTrans.naturality_assoc,
    ‚Üê NatTrans.naturality_assoc, IsIso.hom_inv_id_assoc]
  rfl

instance (A X : C) [t.IsLE X 0] [t.IsGE A 0] :
    IsIso ((preadditiveYoneda.obj A).map ((t.truncGEœÄ 0).app X).op) := by
  have : Mono ((preadditiveYoneda.obj A).map ((t.truncGEœÄ 0).app X).op) :=
    (preadditiveYoneda_map_distinguished _
      (rot_of_distTriang _ (t.triangleLTGE_distinguished 0 X)) A).mono_g (by
      apply IsZero.eq_of_src
      apply AddCommGrp.isZero
      intro (x : ((t.truncLT 0).obj X)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ A)
      have : t.IsLE (((t.truncLT 0).obj X)‚ü¶(1 : ‚Ñ§)‚üß) (-1) :=
        t.isLE_shift ((t.truncLT 0).obj X) 0 1 (-1) (by linarith)
      exact t.zero x (-1) 0 (by linarith))
  have : Epi ((preadditiveYoneda.obj A).map ((t.truncGEœÄ 0).app X).op) :=
    (preadditiveYoneda_map_distinguished _ (t.triangleLTGE_distinguished 0 X) A).epi_f (by
      apply IsZero.eq_of_tgt
      apply AddCommGrp.isZero
      intro (x : (t.truncLT 0).obj X ‚ü∂ A)
      exact t.zero x (-1) 0 (by linarith))
  apply isIso_of_mono_of_epi

instance (A X : C) [t.IsLE X 0] [t.IsGE A 0]:
    IsIso ((preadditiveYoneda.obj A).map (t.toHomology‚ÇÄ X).op) := by
  dsimp only [toHomology‚ÇÄ]
  rw [op_comp, op_comp, Functor.map_comp, Functor.map_comp]
  infer_instance

noncomputable def fromHomology‚ÇÄ (X : C) [t.IsGE X 0] :
    t.ŒπHeart.obj (t.homology‚ÇÄ.obj X) ‚ü∂ X :=
  t.homology‚ÇÄŒπHeart.hom.app X ‚â´ (t.truncGELEIsoLEGE 0 0).hom.app X ‚â´ (t.truncLEŒπ 0).app _ ‚â´
    inv ((t.truncGEœÄ 0).app X)

@[reassoc (attr := simp)]
lemma fromHomology‚ÇÄ_naturality {X Y : C} (f : X ‚ü∂ Y) [t.IsGE X 0] [t.IsGE Y 0] :
    t.ŒπHeart.map (t.homology‚ÇÄ.map f) ‚â´ t.fromHomology‚ÇÄ Y = t.fromHomology‚ÇÄ X ‚â´ f := by
  dsimp [fromHomology‚ÇÄ]
  rw [‚Üê cancel_mono ((t.truncGEœÄ 0).app Y), assoc, assoc, assoc, assoc, assoc, assoc,
    assoc, assoc, IsIso.inv_hom_id, comp_id]
  erw [t.homology‚ÇÄŒπHeart.hom.naturality_assoc f, NatTrans.naturality_assoc,
    (t.truncGEœÄ 0).naturality, IsIso.inv_hom_id_assoc]
  dsimp [truncLEGE]
  rw [NatTrans.naturality]
  rfl

instance (A X : C) [t.IsGE X 0] [t.IsLE A 0] :
    IsIso ((preadditiveCoyoneda.obj (Opposite.op A)).map ((t.truncLEŒπ 0).app X)) := by
  have : Mono ((preadditiveCoyoneda.obj (Opposite.op A)).map ((t.truncLEŒπ 0).app X)) :=
    ((preadditiveCoyoneda.obj (Opposite.op A)).map_distinguished_exact _
      (inv_rot_of_distTriang _ (t.triangleLEGE_distinguished 0 1 (by linarith) X))).mono_g (by
        apply IsZero.eq_of_src
        apply AddCommGrp.isZero
        intro (x : A ‚ü∂ (((t.truncGE 1).obj X)‚ü¶(-1 : ‚Ñ§)‚üß))
        have : t.IsGE (((t.truncGE 1).obj X)‚ü¶(-1 : ‚Ñ§)‚üß) 1 :=
          t.isGE_shift ((t.truncGE 1).obj X) 0 (-1) 1 (by linarith)
        exact t.zero x 0 1 (by linarith))
  have : Epi ((preadditiveCoyoneda.obj (Opposite.op A)).map ((t.truncLEŒπ 0).app X)) :=
    ((preadditiveCoyoneda.obj (Opposite.op A)).map_distinguished_exact _
      (t.triangleLEGE_distinguished 0 1 (by linarith) X)).epi_f (by
        apply IsZero.eq_of_tgt
        apply AddCommGrp.isZero
        intro (x : A ‚ü∂ (t.truncGE 1).obj X)
        exact t.zero x 0 1 (by linarith))
  apply isIso_of_mono_of_epi

instance (A X : C) [t.IsGE X 0] [t.IsLE A 0] :
    IsIso ((preadditiveCoyoneda.obj (Opposite.op A)).map (t.fromHomology‚ÇÄ X)) := by
  dsimp only [fromHomology‚ÇÄ]
  rw [Functor.map_comp, Functor.map_comp, Functor.map_comp]
  infer_instance

instance : t.homology‚ÇÄ.Additive := by
  have := Functor.additive_of_iso t.homology‚ÇÄŒπHeart.symm
  refine ‚ü®fun {X Y f g} => t.ŒπHeart.map_injective ?_‚ü©
  erw [(t.homology‚ÇÄ ‚ãô t.ŒπHeart).map_add]
  simp

omit [IsTriangulated C] in
lemma isIso_homology‚ÇÄ_iff_isIso_truncGE‚ÇÄLE‚ÇÄ_map {X Y : C} (f : X ‚ü∂ Y) :
    IsIso (t.homology‚ÇÄ.map f) ‚Üî IsIso ((t.truncGELE 0 0).map f) := by
  have : IsIso (t.homology‚ÇÄ.map f) ‚Üî  IsIso (t.ŒπHeart.map (t.homology‚ÇÄ.map f)) := by
    constructor
    ¬∑ intro h
      infer_instance
    ¬∑ intro h
      apply isIso_of_reflects_iso  _ t.ŒπHeart
  rw [this]
  exact NatIso.isIso_map_iff t.homology‚ÇÄŒπHeart f

lemma isIso_homology‚ÇÄ_iff_isIso_truncLE‚ÇÄGE‚ÇÄ_map {X Y : C} (f : X ‚ü∂ Y) :
    IsIso (t.homology‚ÇÄ.map f) ‚Üî IsIso ((t.truncLEGE 0 0).map f) := by
  rw [isIso_homology‚ÇÄ_iff_isIso_truncGE‚ÇÄLE‚ÇÄ_map]
  exact NatIso.isIso_map_iff (t.truncGELEIsoLEGE 0 0) f

instance (X : C) : IsIso (t.homology‚ÇÄ.map ((truncLEŒπ t 0).app X)) := by
  rw [isIso_homology‚ÇÄ_iff_isIso_truncGE‚ÇÄLE‚ÇÄ_map]
  dsimp [truncGELE]
  infer_instance

instance (X : C) : IsIso (t.homology‚ÇÄ.map ((truncGEœÄ t 0).app X)) := by
  rw [isIso_homology‚ÇÄ_iff_isIso_truncLE‚ÇÄGE‚ÇÄ_map]
  dsimp [truncLEGE]
  infer_instance

namespace IsHomologicalAux

variable {T : Triangle C} (hT : T ‚àà distTriang C)

@[simps!]
noncomputable def shortComplex :=
  (ShortComplex.mk _ _ (comp_distTriang_mor_zero‚ÇÅ‚ÇÇ T hT)).map t.homology‚ÇÄ

@[simps]
noncomputable def ŒπHeartAddEquiv (X Y : t.Heart) :
    (X ‚ü∂ Y) ‚âÉ+ (t.ŒπHeart.obj X ‚ü∂ t.ŒπHeart.obj Y) where
  toFun f := t.ŒπHeart.map f
  invFun g := t.ŒπHeart.preimage g
  left_inv f := by simp
  right_inv g := by simp
  map_add' := by aesop_cat

noncomputable def addEquivFromHomology‚ÇÄOfIsLE (X : C) [t.IsLE X 0] (A : t.Heart) :
    (t.homology‚ÇÄ.obj X ‚ü∂ A) ‚âÉ+ (X ‚ü∂ t.ŒπHeart.obj A)  :=
  (ŒπHeartAddEquiv _ _ _).trans
    (asIso ((preadditiveYoneda.obj
      (t.ŒπHeart.obj A)).map (t.toHomology‚ÇÄ _).op)).addCommGroupIsoToAddEquiv

omit [IsTriangulated C] in
lemma addEquivFromHomology‚ÇÄOfIsLE_naturality {X Y : C} (f : X ‚ü∂ Y)
    [t.IsLE X 0] [t.IsLE Y 0] (A : t.Heart) (y : t.homology‚ÇÄ.obj Y ‚ü∂ A) :
    f ‚â´ addEquivFromHomology‚ÇÄOfIsLE t Y A y =
      addEquivFromHomology‚ÇÄOfIsLE t X A (t.homology‚ÇÄ.map f ‚â´ y) := by
  change f ‚â´ t.toHomology‚ÇÄ Y ‚â´ t.ŒπHeart.map y =
    t.toHomology‚ÇÄ X ‚â´ t.ŒπHeart.map (t.homology‚ÇÄ.map f ‚â´ y)
  simp only [Functor.map_comp, toHomology‚ÇÄ_naturality_assoc]

lemma case‚ÇÅ [t.IsLE T.obj‚ÇÅ 0] [t.IsLE T.obj‚ÇÇ 0] [t.IsLE T.obj‚ÇÉ 0] :
    (shortComplex t hT).Exact ‚àß Epi (shortComplex t hT).g := by
  rw [ShortComplex.exact_and_epi_g_iff_preadditiveYoneda]
  intro A
  let S := (shortComplex t hT).op.map (preadditiveYoneda.obj A)
  let S' := (ShortComplex.mk _ _ (comp_distTriang_mor_zero‚ÇÅ‚ÇÇ T hT)).op.map
    (preadditiveYoneda.obj (t.ŒπHeart.obj A))
  refine (ShortComplex.exact_and_mono_f_iff_of_addEquiv S S'
    (addEquivFromHomology‚ÇÄOfIsLE t T.obj‚ÇÉ A) (addEquivFromHomology‚ÇÄOfIsLE t T.obj‚ÇÇ A)
    (addEquivFromHomology‚ÇÄOfIsLE t T.obj‚ÇÅ A) (addEquivFromHomology‚ÇÄOfIsLE_naturality t T.mor‚ÇÇ A)
    (addEquivFromHomology‚ÇÄOfIsLE_naturality t T.mor‚ÇÅ A)).2 ?_
  refine ‚ü®preadditiveYoneda_map_distinguished _ hT (t.ŒπHeart.obj A),
    (preadditiveYoneda_map_distinguished _ (rot_of_distTriang _ hT) (t.ŒπHeart.obj A)).mono_g ?_‚ü©
  apply IsZero.eq_of_src
  apply AddCommGrp.isZero
  intro (x : T.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ t.ŒπHeart.obj A)
  exact t.zero x (-1) 0 (by linarith)

lemma case‚ÇÇ (h‚ÇÅ : t.IsLE T.obj‚ÇÅ 0) :
    (shortComplex t hT).Exact ‚àß Epi (shortComplex t hT).g := by
  have h' := case‚ÇÅ t (t.truncLETriangle_distinguished T hT 0)
  refine (ShortComplex.exact_and_epi_g_iff_of_iso ?_).1 h'
  refine ShortComplex.isoMk
    (asIso (t.homology‚ÇÄ.map ((t.truncLEŒπ 0).app T.obj‚ÇÅ)))
    (asIso (t.homology‚ÇÄ.map ((t.truncLEŒπ 0).app T.obj‚ÇÇ)))
    (asIso (t.homology‚ÇÄ.map ((t.truncLEŒπ 0).app T.obj‚ÇÉ))) ?_ ?_
  all_goals
    dsimp
    simp only [‚Üê Functor.map_comp, NatTrans.naturality, Functor.id_obj, Functor.id_map]

noncomputable def addEquivToHomology‚ÇÄOfIsGE (X : C) [t.IsGE X 0] (A : t.Heart) :
    (A ‚ü∂ t.homology‚ÇÄ.obj X) ‚âÉ+ (t.ŒπHeart.obj A ‚ü∂ X) := by
  exact (ŒπHeartAddEquiv _ _ _).trans
    (asIso ((preadditiveCoyoneda.obj (Opposite.op (t.ŒπHeart.obj A))).map
      (t.fromHomology‚ÇÄ X))).addCommGroupIsoToAddEquiv

lemma addEquivToHomology‚ÇÄOfIsGE_naturality {X Y : C} (f : X ‚ü∂ Y)
    [t.IsGE X 0] [t.IsGE Y 0] (A : t.Heart) (x : A ‚ü∂ t.homology‚ÇÄ.obj X) :
    addEquivToHomology‚ÇÄOfIsGE t X A x ‚â´ f =
      addEquivToHomology‚ÇÄOfIsGE t Y A (x ‚â´ t.homology‚ÇÄ.map f) := by
  change (t.ŒπHeart.map x ‚â´ t.fromHomology‚ÇÄ X) ‚â´ f =
    t.ŒπHeart.map (x ‚â´ t.homology‚ÇÄ.map f) ‚â´ t.fromHomology‚ÇÄ Y
  simp only [assoc, Functor.map_comp, fromHomology‚ÇÄ_naturality]

/-- case‚ÇÅ' -/
lemma case‚ÇÅ' [t.IsGE T.obj‚ÇÅ 0] [t.IsGE T.obj‚ÇÇ 0] [t.IsGE T.obj‚ÇÉ 0] :
    (shortComplex t hT).Exact ‚àß Mono (shortComplex t hT).f := by
  rw [ShortComplex.exact_and_mono_f_iff_preadditiveCoyoneda]
  intro A
  let S := (shortComplex t hT).map (preadditiveCoyoneda.obj (Opposite.op A))
  let S' := (ShortComplex.mk _ _ (comp_distTriang_mor_zero‚ÇÅ‚ÇÇ T hT)).map
    (preadditiveCoyoneda.obj (Opposite.op (t.ŒπHeart.obj A)))
  refine (ShortComplex.exact_and_mono_f_iff_of_addEquiv S S'
    (addEquivToHomology‚ÇÄOfIsGE t T.obj‚ÇÅ A) (addEquivToHomology‚ÇÄOfIsGE t T.obj‚ÇÇ A)
    (addEquivToHomology‚ÇÄOfIsGE t T.obj‚ÇÉ A)
    (addEquivToHomology‚ÇÄOfIsGE_naturality t T.mor‚ÇÅ A)
    (addEquivToHomology‚ÇÄOfIsGE_naturality t T.mor‚ÇÇ A)).2 ?_
  refine ‚ü®(preadditiveCoyoneda.obj (Opposite.op (t.ŒπHeart.obj A))).map_distinguished_exact _ hT,
    ((preadditiveCoyoneda.obj (Opposite.op (t.ŒπHeart.obj A))).map_distinguished_exact _
      (inv_rot_of_distTriang _ hT)).mono_g ?_‚ü©
  apply IsZero.eq_of_src
  apply AddCommGrp.isZero
  intro (x : t.ŒπHeart.obj A ‚ü∂ T.obj‚ÇÉ‚ü¶-1‚üß)
  have : t.IsGE (T.obj‚ÇÉ‚ü¶(-1 : ‚Ñ§)‚üß) 1 := t.isGE_shift T.obj‚ÇÉ 0 (-1) 1 (by linarith)
  exact t.zero x 0 1 (by linarith)

/-- case‚ÇÇ' -/
lemma case‚ÇÇ' (h‚ÇÉ : t.IsGE T.obj‚ÇÉ 0) :
    (shortComplex t hT).Exact ‚àß Mono (shortComplex t hT).f := by
  have h' := case‚ÇÅ' t (t.truncGETriangle_distinguished T hT 0)
  refine (ShortComplex.exact_and_mono_f_iff_of_iso ?_).2 h'
  refine ShortComplex.isoMk
    (asIso (t.homology‚ÇÄ.map ((t.truncGEœÄ 0).app T.obj‚ÇÅ)))
    (asIso (t.homology‚ÇÄ.map ((t.truncGEœÄ 0).app T.obj‚ÇÇ)))
    (asIso (t.homology‚ÇÄ.map ((t.truncGEœÄ 0).app T.obj‚ÇÉ))) ?_ ?_
  all_goals
    dsimp
    simp only [‚Üê Functor.map_comp, ‚Üê NatTrans.naturality, Functor.id_map]

end IsHomologicalAux

open IsHomologicalAux
instance : t.homology‚ÇÄ.IsHomological where
  exact T hT := by
    have h‚ÇÅ := t.triangleLEGE_distinguished 0 1 (by linarith) T.obj‚ÇÅ
    obtain ‚ü®U, f, g, h‚ÇÉ‚ü© := distinguished_cocone_triangle ((t.truncLEŒπ 0).app T.obj‚ÇÅ ‚â´ T.mor‚ÇÅ)
    have H := someOctahedron rfl h‚ÇÅ hT h‚ÇÉ
    have ex‚ÇÅ := case‚ÇÇ t h‚ÇÉ (by dsimp; infer_instance)
    have ex‚ÇÇ := case‚ÇÇ' t (rot_of_distTriang _ H.mem) (by dsimp; infer_instance)
    dsimp [Triangle.rotate] at ex‚ÇÇ
    have := ex‚ÇÅ.2
    have : Mono (shortComplex t (rot_of_distTriang _ H.mem)).f := ex‚ÇÇ.2
    have ex‚ÇÉ := ShortComplex‚ÇÑ.connectShortComplex_exact (shortComplex t h‚ÇÉ)
      (shortComplex t (rot_of_distTriang _ H.mem)) (Iso.refl _)
        (t.homology‚ÇÄ.map T.mor‚ÇÇ) (by
          dsimp [shortComplex, ShortComplex.map]
          rw [id_comp, ‚Üê Functor.map_comp, H.comm‚ÇÉ]) ex‚ÇÅ.1 ex‚ÇÇ.1
    refine ShortComplex.exact_of_iso ?_ ex‚ÇÉ.exact‚ÇÇ
    refine ShortComplex.isoMk (asIso (t.homology‚ÇÄ.map ((t.truncLEŒπ 0).app T.obj‚ÇÅ)))
        (Iso.refl _) (Iso.refl _) ?_ ?_
    all_goals
      dsimp; simp

variable [t.homology‚ÇÄ.ShiftSequence ‚Ñ§]

def homology (n : ‚Ñ§) : C ‚•§ t.Heart := t.homology‚ÇÄ.shift n

instance (n : ‚Ñ§) : (t.homology n).Additive := by
  dsimp [homology]
  infer_instance

variable (T : Triangle C) (hT : T ‚àà distTriang C) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ)

def homologyŒ¥ : (t.homology n‚ÇÄ).obj T.obj‚ÇÉ ‚ü∂ (t.homology n‚ÇÅ).obj T.obj‚ÇÅ :=
  t.homology‚ÇÄ.shiftMap T.mor‚ÇÉ n‚ÇÄ n‚ÇÅ (by linarith)

include hT in
@[reassoc (attr := simp)]
lemma homologyŒ¥_comp : t.homologyŒ¥ T n‚ÇÄ n‚ÇÅ h ‚â´ (t.homology n‚ÇÅ).map T.mor‚ÇÅ = 0 :=
  t.homology‚ÇÄ.homologySequenceŒ¥_comp _ hT _ _ h

include hT in
@[reassoc (attr := simp)]
lemma comp_homologyŒ¥ : (t.homology n‚ÇÄ).map T.mor‚ÇÇ ‚â´ t.homologyŒ¥ T n‚ÇÄ n‚ÇÅ h = 0 :=
  t.homology‚ÇÄ.comp_homologySequenceŒ¥ _ hT _ _ h

lemma homology_exact‚ÇÅ :
    (ShortComplex.mk _ _ (t.homologyŒ¥_comp T hT n‚ÇÄ n‚ÇÅ h)).Exact :=
  t.homology‚ÇÄ.homologySequence_exact‚ÇÅ _ hT _ _ h

lemma homology_exact‚ÇÇ (n : ‚Ñ§) :
    (ShortComplex.mk ((t.homology n).map T.mor‚ÇÅ) ((t.homology n).map T.mor‚ÇÇ)
      (by rw [‚Üê Functor.map_comp, comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ hT, Functor.map_zero])).Exact :=
  t.homology‚ÇÄ.homologySequence_exact‚ÇÇ _ hT _

lemma homology_exact‚ÇÉ :
    (ShortComplex.mk _ _ (t.comp_homologyŒ¥ T hT n‚ÇÄ n‚ÇÅ h)).Exact :=
  t.homology‚ÇÄ.homologySequence_exact‚ÇÉ _ hT _ _ h

omit [IsTriangulated C] [t.homology‚ÇÄ.ShiftSequence ‚Ñ§] in
lemma isZero_homology‚ÇÄ_of_isGE_one (X : C) [t.IsGE X 1] :
    IsZero ((t.homology‚ÇÄ).obj X) := by
  rw [IsZero.iff_id_eq_zero]
  apply t.ŒπHeart.map_injective
  rw [Functor.map_id, Functor.map_zero, ‚Üê IsZero.iff_id_eq_zero]
  refine IsZero.of_iso ?_ (t.homology‚ÇÄŒπHeart.app X)
  dsimp [truncGELE]
  rw [IsZero.iff_id_eq_zero, ‚Üê Functor.map_id]
  have : IsZero ((t.truncLE 0).obj X) := by
    rw [‚Üê t.isGE_iff_isZero_truncLE_obj 0 1 (by linarith)]
    infer_instance
  rw [IsZero.iff_id_eq_zero] at this
  rw [this, Functor.map_zero]

omit [IsTriangulated C] in
lemma isZero_homology_of_isGE (X : C) (q n : ‚Ñ§) (hn‚ÇÅ : q < n) [t.IsGE X n] :
    IsZero ((t.homology q).obj X) := by
  have : t.IsGE (X‚ü¶q‚üß) (n - q) := t.isGE_shift X n q (n - q) (by linarith)
  have : t.IsGE (X‚ü¶q‚üß) 1 := t.isGE_of_GE (X‚ü¶q‚üß) 1 (n - q) (by linarith)
  exact IsZero.of_iso (t.isZero_homology‚ÇÄ_of_isGE_one (X‚ü¶q‚üß))
    (((t.homology‚ÇÄ.shiftIso q 0 q (by linarith)).app X).symm.trans
    ((t.homology‚ÇÄ.isoShiftZero ‚Ñ§).app (X‚ü¶q‚üß)))

omit [t.homology‚ÇÄ.ShiftSequence ‚Ñ§] in
lemma isZero_homology‚ÇÄ_of_isLE_neg_one (X : C) [t.IsLE X (-1)] :
    IsZero ((t.homology‚ÇÄ).obj X) := by
  rw [IsZero.iff_id_eq_zero]
  apply t.ŒπHeart.map_injective
  rw [Functor.map_id, Functor.map_zero, ‚Üê IsZero.iff_id_eq_zero]
  refine IsZero.of_iso ?_ ((t.homology‚ÇÄŒπHeart ‚â™‚â´ t.truncGELEIsoLEGE 0 0).app X)
  dsimp [truncLEGE]
  rw [IsZero.iff_id_eq_zero, ‚Üê Functor.map_id]
  have : IsZero ((t.truncGE 0).obj X) := by
    rw [‚Üê t.isLE_iff_isZero_truncGE_obj (-1) 0 (by linarith)]
    infer_instance
  rw [IsZero.iff_id_eq_zero] at this
  rw [this, Functor.map_zero]

lemma isZero_homology_of_isLE (X : C) (q n : ‚Ñ§) (hn‚ÇÅ : n < q) [t.IsLE X n] :
    IsZero ((t.homology q).obj X) := by
  have : t.IsLE (X‚ü¶q‚üß) (n - q) := t.isLE_shift X n q (n - q) (by linarith)
  have : t.IsLE (X‚ü¶q‚üß) (-1) := t.isLE_of_LE (X‚ü¶q‚üß) (n - q) (-1) (by linarith)
  exact IsZero.of_iso (t.isZero_homology‚ÇÄ_of_isLE_neg_one (X‚ü¶q‚üß))
    (((t.homology‚ÇÄ.shiftIso q 0 q (by linarith)).app X).symm.trans
    ((t.homology‚ÇÄ.isoShiftZero ‚Ñ§).app (X‚ü¶q‚üß)))

omit [t.homology‚ÇÄ.ShiftSequence ‚Ñ§] in
lemma isGE‚ÇÅ_iff_isGE‚ÇÄ_and_isZero_homology‚ÇÄ (X : C) :
    t.IsGE X 1 ‚Üî t.IsGE X 0 ‚àß (IsZero (t.homology‚ÇÄ.obj X)) := by
  constructor
  ¬∑ intro _
    constructor
    ¬∑ exact t.isGE_of_GE X 0 1 (by linarith)
    ¬∑ apply isZero_homology‚ÇÄ_of_isGE_one
  ¬∑ rintro ‚ü®_, hX‚ü©
    rw [t.isGE_iff_isZero_truncLE_obj 0 1 (by linarith)]
    rw [IsZero.iff_id_eq_zero] at hX
    replace hX := t.ŒπHeart.congr_map hX
    rw [Functor.map_id, Functor.map_zero, ‚Üê IsZero.iff_id_eq_zero] at hX
    refine IsZero.of_iso hX ?_
    exact asIso ((t.truncLE 0).map ((t.truncGEœÄ 0).app X)) ‚â™‚â´
      (t.homology‚ÇÄŒπHeart ‚â™‚â´ t.truncGELEIsoLEGE 0 0).symm.app X

lemma isGE_succ_iff_isGE_and_isZero_homology (X : C) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) :
    t.IsGE X n‚ÇÅ ‚Üî t.IsGE X n‚ÇÄ ‚àß (IsZero ((t.homology n‚ÇÄ).obj X)) := by
  have eq‚ÇÅ : t.IsGE (X‚ü¶n‚ÇÄ‚üß) 1 ‚Üî t.IsGE X n‚ÇÅ := t.isGE_shift_iff _ _ _ _ hn‚ÇÅ
  have eq‚ÇÇ : t.IsGE (X‚ü¶n‚ÇÄ‚üß) 0 ‚Üî t.IsGE X n‚ÇÄ := t.isGE_shift_iff _ _ _ _ (by linarith)
  have e : (t.homology n‚ÇÄ).obj X ‚âÖ t.homology‚ÇÄ.obj (X‚ü¶n‚ÇÄ‚üß) :=
    (t.homology‚ÇÄ.shiftIso n‚ÇÄ 0 n‚ÇÄ (add_zero n‚ÇÄ)).symm.app _ ‚â™‚â´
      (t.homology‚ÇÄ.isoShiftZero ‚Ñ§ ).app _
  have eq‚ÇÉ : IsZero ((t.homology n‚ÇÄ).obj X) ‚Üî IsZero (t.homology‚ÇÄ.obj (X‚ü¶n‚ÇÄ‚üß)) :=
    ‚ü®fun h => IsZero.of_iso h e.symm, fun h => IsZero.of_iso h e‚ü©
  rw [‚Üê eq‚ÇÅ, ‚Üêeq‚ÇÇ, eq‚ÇÉ]
  exact t.isGE‚ÇÅ_iff_isGE‚ÇÄ_and_isZero_homology‚ÇÄ _

omit [t.HasHomology‚ÇÄ] [IsTriangulated C] in
lemma isIso_whiskerLeft_ŒπHeart_truncLEŒπ (b : ‚Ñ§) (hb : 0 ‚â§ b) :
    IsIso (whiskerLeft t.ŒπHeart (t.truncLEŒπ b)) := by
  refine @NatIso.isIso_of_isIso_app _ _ _ _ _ _ _ ?_
  intro X
  dsimp
  rw [‚Üê t.isLE_iff_isIso_truncLEŒπ_app]
  exact t.isLE_of_LE _ 0 _ hb

omit [t.HasHomology‚ÇÄ] [IsTriangulated C] in
lemma isIso_whiskerLeft_ŒπHeart_truncGEœÄ (a : ‚Ñ§) (ha : a ‚â§ 0) :
    IsIso (whiskerLeft t.ŒπHeart (t.truncGEœÄ a)) := by
  refine @NatIso.isIso_of_isIso_app _ _ _ _ _ _ _ ?_
  intro X
  dsimp
  rw [‚Üê t.isGE_iff_isIso_truncGEœÄ_app]
  exact t.isGE_of_GE _ _ 0 ha

noncomputable def ŒπHeartTruncLE (b : ‚Ñ§) (hb : 0 ‚â§ b): t.ŒπHeart ‚ãô t.truncLE b ‚âÖ t.ŒπHeart :=
  have := t.isIso_whiskerLeft_ŒπHeart_truncLEŒπ b hb
  asIso (whiskerLeft t.ŒπHeart (t.truncLEŒπ b))

noncomputable def ŒπHeartTruncGE (a : ‚Ñ§) (ha : a ‚â§ 0): t.ŒπHeart ‚ãô t.truncGE a ‚âÖ t.ŒπHeart :=
  have := t.isIso_whiskerLeft_ŒπHeart_truncGEœÄ a ha
  (asIso (whiskerLeft t.ŒπHeart (t.truncGEœÄ a))).symm

noncomputable def ŒπHeartTruncGELE (a b : ‚Ñ§) (ha : a ‚â§ 0) (hb : 0 ‚â§ b) :
    t.ŒπHeart ‚ãô t.truncGELE a b ‚âÖ t.ŒπHeart :=
  (Functor.associator _ _ _).symm ‚â™‚â´
    isoWhiskerRight (t.ŒπHeartTruncLE b hb) (t.truncGE a) ‚â™‚â´ t.ŒπHeartTruncGE a ha

noncomputable def ŒπHeartHomology‚ÇÄ : t.ŒπHeart ‚ãô t.homology‚ÇÄ ‚âÖ ùü≠ _ :=
  t.ŒπHeart.preimageNatIso (Functor.associator _ _ _ ‚â™‚â´
    isoWhiskerLeft _ t.homology‚ÇÄŒπHeart ‚â™‚â´
    t.ŒπHeartTruncGELE 0 0 (by rfl) (by rfl) ‚â™‚â´ (Functor.leftUnitor _).symm)

noncomputable def ŒπHeartHomology_zero : t.ŒπHeart ‚ãô t.homology 0 ‚âÖ ùü≠ _ :=
  isoWhiskerLeft _ (t.homology‚ÇÄ.isoShiftZero ‚Ñ§) ‚â™‚â´ t.ŒπHeartHomology‚ÇÄ

instance {A B : t.Heart} (f : A ‚ü∂ B) [Mono f] (n : ‚Ñ§) :
    Mono ((t.homology n).map (t.ŒπHeart.map f)) := by
  by_cases h : n = 0
  ¬∑ subst h
    exact ((MorphismProperty.monomorphisms _).arrow_mk_iso_iff
      (((Functor.mapArrowFunctor _ _).mapIso t.ŒπHeartHomology_zero).app (Arrow.mk f))).2
      (inferInstance : Mono f)
  ¬∑ constructor
    intros
    apply IsZero.eq_of_tgt
    by_cases h' : 0 < n
    ¬∑ exact t.isZero_homology_of_isLE _ _ 0 h'
    ¬∑ simp only [not_lt] at h'
      obtain h'' : n < 0 := by
        obtain h' | rfl := h'.lt_or_eq
        ¬∑ linarith
        ¬∑ exfalso
          exact h rfl
      apply t.isZero_homology_of_isGE _ _ 0 h''

end

section

variable [t.HasHeart]

lemma shortExact_of_distTriang {X‚ÇÅ X‚ÇÇ X‚ÇÉ : t.Heart} {f : X‚ÇÅ ‚ü∂ X‚ÇÇ}
    {g : X‚ÇÇ ‚ü∂ X‚ÇÉ} (Œ¥ : t.ŒπHeart.obj X‚ÇÉ ‚ü∂ (t.ŒπHeart.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß)
    (h : Triangle.mk (t.ŒπHeart.map f) (t.ŒπHeart.map g) Œ¥ ‚àà distTriang C) :
    (ShortComplex.mk f g (t.ŒπHeart.map_injective
    (by
      rw [Functor.map_comp, Functor.map_zero]
      exact comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ h))).ShortExact := by
  have : t.HasHomology‚ÇÄ := t.hasHomology‚ÇÄ
  have : t.homology‚ÇÄ.ShiftSequence ‚Ñ§ := Functor.ShiftSequence.tautological _ _
  have w : f ‚â´ g = 0 := t.ŒπHeart.map_injective (by
    simpa only [Functor.map_comp, Functor.map_zero]
      using comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ h)
  let S := (ShortComplex.mk _ _ w).map (t.ŒπHeart ‚ãô t.homology 0)
  have : Mono S.f := (t.homology_exact‚ÇÅ _ h (-1) 0 (by linarith)).mono_g (by
    apply IsZero.eq_of_src
    dsimp
    exact t.isZero_homology_of_isGE _ (-1) 0 (by linarith))
  have : Epi S.g := (t.homology_exact‚ÇÉ _ h 0 1 (by linarith)).epi_f (by
    apply IsZero.eq_of_tgt
    dsimp
    exact t.isZero_homology_of_isLE _ 1 0 (by linarith))
  have hS : S.ShortExact := { exact := t.homology_exact‚ÇÇ _ h 0 }
  refine ShortComplex.shortExact_of_iso ?_ hS
  exact ShortComplex.isoMk (t.ŒπHeartHomology_zero.app X‚ÇÅ) (t.ŒπHeartHomology_zero.app X‚ÇÇ)
    (t.ŒπHeartHomology_zero.app X‚ÇÉ) (t.ŒπHeartHomology_zero.hom.naturality f).symm
    (t.ŒπHeartHomology_zero.hom.naturality g).symm

variable (S : ShortComplex t.Heart) (hS : S.ShortExact)

include hS in
lemma exists_distTriang_of_shortExact :
    ‚àÉ (Œ¥ : t.ŒπHeart.obj S.X‚ÇÉ ‚ü∂ (t.ŒπHeart.obj S.X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß),
      Triangle.mk (t.ŒπHeart.map S.f) (t.ŒπHeart.map S.g) Œ¥ ‚àà distTriang C := by
  have : t.HasHomology‚ÇÄ := t.hasHomology‚ÇÄ
  have : t.homology‚ÇÄ.ShiftSequence ‚Ñ§ := Functor.ShiftSequence.tautological _ _
  obtain ‚ü®Z, f‚ÇÇ, f‚ÇÉ, h‚ü© := distinguished_cocone_triangle (t.ŒπHeart.map S.f)
  have := t.cocone_heart_isLE_zero h
  have : t.IsGE Z 0 := by
    rw [t.isGE_succ_iff_isGE_and_isZero_homology Z (-1) 0 (by linarith)]
    constructor
    ¬∑ exact t.cocone_heart_isGE_neg_one h
    ¬∑ apply (t.homology_exact‚ÇÉ _ h (-1) 0 (by linarith)).isZero_X‚ÇÇ
      ¬∑ apply IsZero.eq_of_src
        dsimp
        apply t.isZero_homology_of_isGE _ _ 0 (by linarith)
      ¬∑ apply (t.homology_exact‚ÇÅ _ h (-1) 0 (by linarith)).mono_g_iff.1
        have := hS.mono_f
        dsimp
        infer_instance
  have hZ : t.heart Z := by
    rw [mem_heart_iff]
    constructor <;> infer_instance
  let Y := t.heartMk _ hZ
  let g' : S.X‚ÇÇ ‚ü∂ Y := t.ŒπHeart.preimage (f‚ÇÇ ‚â´ (t.ŒπHeartObjHeartMkIso _ hZ).inv)
  let Œ¥' : t.ŒπHeart.obj Y ‚ü∂ (t.ŒπHeart.obj S.X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß :=
    (t.ŒπHeartObjHeartMkIso _ hZ).hom ‚â´ f‚ÇÉ
  have h' : Triangle.mk (t.ŒπHeart.map S.f) (t.ŒπHeart.map g') Œ¥' ‚àà distTriang C := by
    refine isomorphic_distinguished _ h _ ?_
    refine Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (t.ŒπHeartObjHeartMkIso _ hZ) ?_ ?_ ?_
    all_goals simp [g', Œ¥']
  obtain ‚ü®e, he‚ü© : ‚àÉ (e : S.X‚ÇÉ ‚âÖ Y), S.g ‚â´ e.hom = g' := by
    have h‚ÇÅ := hS.gIsCokernel
    have h‚ÇÇ := (t.shortExact_of_distTriang _ h').gIsCokernel
    exact ‚ü®IsColimit.coconePointUniqueUpToIso h‚ÇÅ h‚ÇÇ,
      IsColimit.comp_coconePointUniqueUpToIso_hom h‚ÇÅ h‚ÇÇ WalkingParallelPair.one‚ü©
  refine ‚ü®t.ŒπHeart.map e.hom ‚â´ Œ¥', isomorphic_distinguished _ h' _ ?_‚ü©
  refine Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (t.ŒπHeart.mapIso e) ?_ ?_ ?_
  ¬∑ dsimp
    simp
  ¬∑ dsimp
    simp only [Functor.map_preimage, id_comp, ‚Üê Functor.map_comp, he]
  ¬∑ dsimp
    simp

noncomputable def heartShortExactŒ¥ : t.ŒπHeart.obj S.X‚ÇÉ ‚ü∂ (t.ŒπHeart.obj S.X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß :=
  (t.exists_distTriang_of_shortExact S hS).choose

@[simps!]
noncomputable def heartShortExactTriangle : Triangle C :=
  Triangle.mk (t.ŒπHeart.map S.f) (t.ŒπHeart.map S.g) (t.heartShortExactŒ¥ S hS)

lemma heartShortExactTriangle_distinguished :
    t.heartShortExactTriangle S hS ‚àà distTriang C :=
  (t.exists_distTriang_of_shortExact S hS).choose_spec

lemma heartShortExactŒ¥_unique (Œ¥ : t.ŒπHeart.obj S.X‚ÇÉ ‚ü∂ (t.ŒπHeart.obj S.X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß)
    (hŒ¥ : Triangle.mk (t.ŒπHeart.map S.f) (t.ŒπHeart.map S.g) Œ¥ ‚àà distTriang C) :
    Œ¥ = t.heartShortExactŒ¥ S hS := by
  obtain ‚ü®Œ±, h‚ÇÅ, h‚ÇÇ‚ü© := complete_distinguished_triangle_morphism‚ÇÅ _ _
    (t.heartShortExactTriangle_distinguished S hS) hŒ¥ (ùüô _) (ùüô _) (by simp)
  obtain ‚ü®Œ≤, rfl‚ü© := t.ŒπHeart.map_surjective Œ±
  dsimp at h‚ÇÅ h‚ÇÇ
  obtain rfl : Œ≤ = ùüô _ := by
    have := hS.mono_f
    rw [‚Üê cancel_mono S.f]
    apply t.ŒπHeart.map_injective
    simpa using h‚ÇÅ.symm
  simpa using h‚ÇÇ.symm

noncomputable def mapHeartShortExactTriangle {S‚ÇÅ S‚ÇÇ : ShortComplex t.Heart} (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
    (hS‚ÇÅ : S‚ÇÅ.ShortExact) (hS‚ÇÇ : S‚ÇÇ.ShortExact) :
    t.heartShortExactTriangle S‚ÇÅ hS‚ÇÅ ‚ü∂ t.heartShortExactTriangle S‚ÇÇ hS‚ÇÇ where
  hom‚ÇÅ := t.ŒπHeart.map œÜ.œÑ‚ÇÅ
  hom‚ÇÇ := t.ŒπHeart.map œÜ.œÑ‚ÇÇ
  hom‚ÇÉ := t.ŒπHeart.map œÜ.œÑ‚ÇÉ
  comm‚ÇÅ := by
    dsimp
    simp only [‚Üê Functor.map_comp, œÜ.comm‚ÇÅ‚ÇÇ]
  comm‚ÇÇ := by
    dsimp
    simp only [‚Üê Functor.map_comp, œÜ.comm‚ÇÇ‚ÇÉ]
  comm‚ÇÉ := by
    dsimp
    obtain ‚ü®Œ±, h‚ÇÅ, h‚ÇÇ‚ü© := complete_distinguished_triangle_morphism‚ÇÅ _ _
      (t.heartShortExactTriangle_distinguished S‚ÇÅ hS‚ÇÅ)
      (t.heartShortExactTriangle_distinguished S‚ÇÇ hS‚ÇÇ)
      (t.ŒπHeart.map œÜ.œÑ‚ÇÇ) (t.ŒπHeart.map œÜ.œÑ‚ÇÉ) (by
        dsimp
        simp only [‚Üê Functor.map_comp, œÜ.comm‚ÇÇ‚ÇÉ])
    obtain ‚ü®Œ≤, rfl‚ü© := t.ŒπHeart.map_surjective Œ±
    dsimp at h‚ÇÅ h‚ÇÇ
    obtain rfl : Œ≤ = œÜ.œÑ‚ÇÅ := by
      have := hS‚ÇÇ.mono_f
      rw [‚Üê cancel_mono S‚ÇÇ.f]
      apply t.ŒπHeart.map_injective
      simp only [œÜ.comm‚ÇÅ‚ÇÇ, Functor.map_comp, h‚ÇÅ]
    exact h‚ÇÇ

end

section

variable [t.HasHeart] [t.HasHomology‚ÇÄ] [(homology‚ÇÄ t).ShiftSequence ‚Ñ§]

/-noncomputable def homology'ŒπHeart'IsoHomoloyŒπHeart (q : ‚Ñ§) :
    t.homology' q ‚ãô t.ŒπHeart' ‚âÖ t.homology q ‚ãô t.ŒπHeart :=
  t.shiftTruncGELE q 0 q 0 q (add_zero q) (add_zero q) ‚â™‚â´
    isoWhiskerLeft _ t.homology‚ÇÄŒπHeart.symm ‚â™‚â´
    (Functor.associator _ _ _).symm ‚â™‚â´
    isoWhiskerRight (isoWhiskerLeft _ (t.homology‚ÇÄ.isoShiftZero ‚Ñ§).symm ‚â™‚â´
    t.homology‚ÇÄ.shiftIso q 0 q (by simp)) _
    -/

noncomputable def homologyCompŒπHeartIso (q : ‚Ñ§) :
    t.homology q ‚ãô t.ŒπHeart ‚âÖ t.truncGELE q q ‚ãô shiftFunctor C q :=
  isoWhiskerRight ((t.homology‚ÇÄ.shiftIso q 0 q (add_zero q)).symm ‚â™‚â´
    isoWhiskerLeft _ (t.homology‚ÇÄ.isoShiftZero ‚Ñ§)) _ ‚â™‚â´ Functor.associator _ _ _ ‚â™‚â´
    isoWhiskerLeft _  t.homology‚ÇÄŒπHeart ‚â™‚â´
    (t.shiftTruncGELE q 0 q 0 q (add_zero q) (add_zero q)).symm

variable (X : C) (q q' : ‚Ñ§) (hqq' : q + 1 = q')

noncomputable def shiftSpectralObjectœâ‚ÇÅIsoHomologyŒπHeart :
    ((spectralObject t X).œâ‚ÇÅ ‚ãô shiftFunctor C q).obj
        (ComposableArrows.mk‚ÇÅ (homOfLE (by simp; linarith) : ‚Ñ§t.mk q ‚ü∂ ‚Ñ§t.mk q')) ‚âÖ
      (t.homology q ‚ãô ŒπHeart t).obj X :=
  (shiftFunctor C q).mapIso ((t.truncGELEIsoTruncGELT q q q' hqq').symm.app X) ‚â™‚â´
    ((t.homologyCompŒπHeartIso q).app X).symm

end

section

variable [t.HasHeart] [t.HasHomology‚ÇÄ] [(homology‚ÇÄ t).ShiftSequence ‚Ñ§]
  (T : Triangle C) (hT : T ‚àà distTriang C)

include hT

lemma mono_homologyFunctor_map_mor‚ÇÇ (n : ‚Ñ§) (h : IsZero ((t.homology n).obj T.obj‚ÇÅ)):
    Mono ((t.homology n).map T.mor‚ÇÇ) :=
  (t.homology_exact‚ÇÇ T hT n).mono_g (h.eq_of_src _ _)

lemma epi_homologyFunctor_map_mor‚ÇÇ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ)
    (h : IsZero ((t.homology n‚ÇÅ).obj T.obj‚ÇÅ)):
    Epi ((t.homology n‚ÇÄ).map T.mor‚ÇÇ) :=
  (t.homology_exact‚ÇÉ T hT _ _ hn‚ÇÅ).epi_f (h.eq_of_tgt _ _)

lemma isIso_homologyFunctor_map_mor‚ÇÇ_of_isGE (n : ‚Ñ§) (a : ‚Ñ§) (h : n + 2 ‚â§ a)
    (h : t.IsGE T.obj‚ÇÅ a) :
    IsIso ((t.homology n).map T.mor‚ÇÇ) := by
  have := t.mono_homologyFunctor_map_mor‚ÇÇ T hT n
    (t.isZero_homology_of_isGE _ _ a (by omega))
  have := t.epi_homologyFunctor_map_mor‚ÇÇ T hT n _ rfl
    (t.isZero_homology_of_isGE _ _ a (by omega))
  apply isIso_of_mono_of_epi

end

end TStructure

end Triangulated

end CategoryTheory
