/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.TStructure.Homology

/-!
# Right t-exact functors

-/

namespace CategoryTheory

open Limits Triangulated Pretriangulated

variable {C D : Type*}
  [Category C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C] [CategoryTheory.IsTriangulated C]
  [Category D] [Preadditive D] [HasZeroObject D] [HasShift D ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive] [Pretriangulated D] [CategoryTheory.IsTriangulated D]
  (F : C ‚•§ D) [F.CommShift ‚Ñ§] [F.IsTriangulated]
  (t‚ÇÅ : TStructure C) (t‚ÇÇ : TStructure D)
  [t‚ÇÅ.HasHeart] [t‚ÇÇ.HasHeart] [t‚ÇÇ.HasHomology‚ÇÄ]
  [t‚ÇÇ.homology‚ÇÄ.ShiftSequence ‚Ñ§]

namespace Functor

def homologyRightTExact (n : ‚Ñï) : t‚ÇÅ.Heart ‚•§ t‚ÇÇ.Heart := t‚ÇÅ.ŒπHeart ‚ãô F ‚ãô t‚ÇÇ.homology n

instance (n : ‚Ñï) : (F.homologyRightTExact t‚ÇÅ t‚ÇÇ n).Additive := by
  dsimp [homologyRightTExact]
  infer_instance

section

variable (S : ShortComplex t‚ÇÅ.Heart) (hS : S.ShortExact) (n‚ÇÄ n‚ÇÅ : ‚Ñï) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ)

noncomputable def homologyRightTExactŒ¥ :
    (F.homologyRightTExact t‚ÇÅ t‚ÇÇ n‚ÇÄ).obj S.X‚ÇÉ ‚ü∂
      (F.homologyRightTExact t‚ÇÅ t‚ÇÇ n‚ÇÅ).obj S.X‚ÇÅ :=
  t‚ÇÇ.homologyŒ¥ (F.mapTriangle.obj (t‚ÇÅ.heartShortExactTriangle S hS)) n‚ÇÄ n‚ÇÅ (by simp [‚Üê hn‚ÇÅ])

@[reassoc (attr := simp)]
lemma homologyRightTExactŒ¥_comp :
    F.homologyRightTExactŒ¥ t‚ÇÅ t‚ÇÇ S hS n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚â´ (F.homologyRightTExact t‚ÇÅ t‚ÇÇ n‚ÇÅ).map S.f = 0 :=
  t‚ÇÇ.homologyŒ¥_comp _ (F.map_distinguished _ (t‚ÇÅ.heartShortExactTriangle_distinguished S hS)) _ _ _

@[reassoc (attr := simp)]
lemma homologyRightTExact_comp_Œ¥ :
     (F.homologyRightTExact t‚ÇÅ t‚ÇÇ n‚ÇÄ).map S.g ‚â´ F.homologyRightTExactŒ¥ t‚ÇÅ t‚ÇÇ S hS n‚ÇÄ n‚ÇÅ hn‚ÇÅ = 0 :=
  t‚ÇÇ.comp_homologyŒ¥ _ (F.map_distinguished _ (t‚ÇÅ.heartShortExactTriangle_distinguished S hS)) _ _ _

lemma homologyRightTExact_exact‚ÇÅ :
    (ShortComplex.mk _ _ (F.homologyRightTExactŒ¥_comp t‚ÇÅ t‚ÇÇ S hS n‚ÇÄ n‚ÇÅ hn‚ÇÅ)).Exact :=
  t‚ÇÇ.homology_exact‚ÇÅ _ (F.map_distinguished _ (t‚ÇÅ.heartShortExactTriangle_distinguished S hS)) _ _ _

include hS in
lemma homologyRightTExact_exact‚ÇÇ (n : ‚Ñï) :
    (S.map (F.homologyRightTExact t‚ÇÅ t‚ÇÇ n)).Exact :=
  t‚ÇÇ.homology_exact‚ÇÇ _ (F.map_distinguished _ (t‚ÇÅ.heartShortExactTriangle_distinguished S hS)) _

lemma homologyRightTExact_exact‚ÇÉ :
    (ShortComplex.mk _ _ (F.homologyRightTExact_comp_Œ¥  t‚ÇÅ t‚ÇÇ S hS n‚ÇÄ n‚ÇÅ hn‚ÇÅ)).Exact :=
  t‚ÇÇ.homology_exact‚ÇÉ _ (F.map_distinguished _ (t‚ÇÅ.heartShortExactTriangle_distinguished S hS)) _ _ _

variable [Functor.RightTExact F t‚ÇÅ t‚ÇÇ]

instance (X : t‚ÇÅ.Heart) :
  t‚ÇÇ.IsGE (F.obj (t‚ÇÅ.ŒπHeart.obj X)) 0 := F.isGE_obj t‚ÇÅ t‚ÇÇ _ 0

instance :
    (F.homologyRightTExact t‚ÇÅ t‚ÇÇ 0).PreservesMonomorphisms where
  preserves {X Y} f _ := by
    let S := ShortComplex.mk _ _ (cokernel.condition f)
    have hS : S.ShortExact :=
      { exact := S.exact_of_g_is_cokernel (cokernelIsCokernel f) }
    apply (t‚ÇÇ.homology_exact‚ÇÅ _ (F.map_distinguished _
      (t‚ÇÅ.heartShortExactTriangle_distinguished S hS)) (-1) 0 (by linarith)).mono_g
    apply IsZero.eq_of_src
    dsimp
    exact t‚ÇÇ.isZero_homology_of_isGE _ _ 0 (by linarith)

lemma homologyRightTExact‚ÇÄ_map_exact (h : S.Exact) [hf : Mono S.f] :
    (S.map (F.homologyRightTExact t‚ÇÅ t‚ÇÇ 0)).Exact := by
  let S' := ShortComplex.mk _ _ S.f_pOpcycles
  let œÜ : S' ‚ü∂ S :=
    { œÑ‚ÇÅ := ùüô _
      œÑ‚ÇÇ := ùüô _
      œÑ‚ÇÉ := S.fromOpcycles }
  have : Mono œÜ.œÑ‚ÇÉ := h.mono_fromOpcycles
  have hS' : S'.ShortExact :=
    { exact := (ShortComplex.exact_iff_of_epi_of_isIso_of_mono œÜ).2 h }
  let œà := (F.homologyRightTExact t‚ÇÅ t‚ÇÇ 0).mapShortComplex.map œÜ
  have : IsIso œà.œÑ‚ÇÅ := by dsimp [œà]; infer_instance
  have : IsIso œà.œÑ‚ÇÇ := by dsimp [œà]; infer_instance
  have : Mono œà.œÑ‚ÇÉ := by dsimp [œà]; infer_instance
  apply (ShortComplex.exact_iff_of_epi_of_isIso_of_mono œà).1
  exact F.homologyRightTExact_exact‚ÇÇ t‚ÇÅ t‚ÇÇ S' hS' 0

end

end Functor

end CategoryTheory
