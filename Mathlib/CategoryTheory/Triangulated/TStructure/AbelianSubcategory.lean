/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.TStructure.Trunc
import Mathlib.CategoryTheory.Abelian.Constructor
import Mathlib.CategoryTheory.Shift.SingleFunctors

/-!
# Abelian subcategories of triangulated categories

-/

namespace CategoryTheory

open Category Limits Preadditive ZeroObject Pretriangulated ZeroObject

namespace Triangulated

variable {C A : Type*} [Category C] [HasZeroObject C] [Preadditive C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

namespace AbelianSubcategory

variable [Category A] {Œπ : A ‚•§ C}
  (hŒπ : ‚àÄ ‚¶ÉX Y : A‚¶Ñ ‚¶Én : ‚Ñ§‚¶Ñ (f : Œπ.obj X ‚ü∂ (Œπ.obj Y)‚ü¶n‚üß), n < 0 ‚Üí f = 0)

include hŒπ in
lemma vanishing_from_positive_shift {X Y : A} {n : ‚Ñ§} (f : (Œπ.obj X)‚ü¶n‚üß ‚ü∂ Œπ.obj Y)
    (hn : 0 < n) : f = 0 := by
  apply (shiftFunctor C (-n)).map_injective
  rw [‚Üê cancel_epi ((shiftEquiv C n).unitIso.hom.app _), Functor.map_zero, comp_zero]
  exact hŒπ _ (by linarith)

section

variable {X‚ÇÅ X‚ÇÇ : A} {f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {X‚ÇÉ : C} (f‚ÇÇ : Œπ.obj X‚ÇÇ ‚ü∂ X‚ÇÉ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ (Œπ.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß)
  (hT : Triangle.mk (Œπ.map f‚ÇÅ) f‚ÇÇ f‚ÇÉ ‚àà distTriang C) {K Q : A}
  (Œ± : (Œπ.obj K)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ X‚ÇÉ) (Œ≤ : X‚ÇÉ ‚ü∂ (Œπ.obj Q)) {Œ≥ : Œπ.obj Q ‚ü∂ (Œπ.obj K)‚ü¶(1 : ‚Ñ§)‚üß‚ü¶(1 : ‚Ñ§)‚üß}
  (hT' : Triangle.mk Œ± Œ≤ Œ≥ ‚àà distTriang C)

variable [Œπ.Full]

noncomputable def ŒπK : K ‚ü∂ X‚ÇÅ := (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).preimage (Œ± ‚â´ f‚ÇÉ)

noncomputable def œÄQ : X‚ÇÇ ‚ü∂ Q := Œπ.preimage (f‚ÇÇ ‚â´ Œ≤)

omit [Preadditive C] [HasZeroObject C] [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive]
  [Pretriangulated C] in
@[simp, reassoc]
lemma shift_Œπ_map_ŒπK : (Œπ.map (ŒπK f‚ÇÉ Œ±))‚ü¶(1 : ‚Ñ§)‚üß' = Œ± ‚â´ f‚ÇÉ := by
  apply (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).map_preimage

omit [Preadditive C] [HasZeroObject C] [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive]
  [Pretriangulated C] [HasShift C ‚Ñ§] in
@[simp, reassoc]
lemma Œπ_map_œÄQ : Œπ.map (œÄQ f‚ÇÇ Œ≤) = f‚ÇÇ ‚â´ Œ≤ := by
  apply Œπ.map_preimage

variable {f‚ÇÇ f‚ÇÉ} [Preadditive A] [Œπ.Faithful]

include hT in
lemma ŒπK_mor‚ÇÅ : ŒπK f‚ÇÉ Œ± ‚â´ f‚ÇÅ = 0 := by
  apply (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).map_injective
  simp only [Functor.comp_map, Functor.map_comp, shift_Œπ_map_ŒπK,
    assoc, Functor.map_zero]
  erw [comp_distTriang_mor_zero‚ÇÉ‚ÇÅ _ hT, comp_zero]

include hT in
lemma mor‚ÇÅ_œÄQ : f‚ÇÅ ‚â´ œÄQ f‚ÇÇ Œ≤ = 0 := by
  apply Œπ.map_injective
  simp only [Functor.map_comp, Functor.map_zero, Œπ_map_œÄQ]
  erw [comp_distTriang_mor_zero‚ÇÅ‚ÇÇ_assoc _ hT, zero_comp]

variable {Œ± Œ≤}

include hT hT' hŒπ

lemma mono_ŒπK : Mono (ŒπK f‚ÇÉ Œ±) := by
  rw [mono_iff_cancel_zero]
  intro B k hk
  replace hk := (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).congr_map hk
  apply (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).map_injective
  simp only [Functor.comp_obj, Functor.comp_map, Functor.map_comp,
    shift_Œπ_map_ŒπK, Functor.map_zero, ‚Üê assoc] at hk ‚ä¢
  obtain ‚ü®l, hl‚ü© := Triangle.coyoneda_exact‚ÇÉ _ hT _ hk
  obtain rfl : l = 0 := vanishing_from_positive_shift hŒπ _ (by linarith)
  rw [zero_comp] at hl
  obtain ‚ü®m, hm‚ü© := Triangle.coyoneda_exact‚ÇÅ _ hT' ((Œπ.map k)‚ü¶(1 : ‚Ñ§)‚üß'‚ü¶(1 : ‚Ñ§)‚üß') (by
    dsimp
    rw [‚Üê Functor.map_comp, hl, Functor.map_zero])
  dsimp at m hm
  obtain rfl : m = 0 := by
    rw [‚Üê cancel_epi ((shiftFunctorAdd' C (1 : ‚Ñ§) 1 2 (by linarith)).hom.app _), comp_zero]
    exact vanishing_from_positive_shift hŒπ _ (by linarith)
  rw [zero_comp] at hm
  apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
  rw [hm, Functor.map_zero]

lemma epi_œÄQ : Epi (œÄQ f‚ÇÇ Œ≤) := by
  rw [epi_iff_cancel_zero]
  intro B k hk
  replace hk := Œπ.congr_map hk
  simp only [Functor.map_comp, Œπ_map_œÄQ, assoc, Functor.map_zero] at hk
  obtain ‚ü®l, hl‚ü© := Triangle.yoneda_exact‚ÇÉ _ hT _ hk
  obtain rfl : l = 0 := vanishing_from_positive_shift hŒπ _ (by linarith)
  rw [comp_zero] at hl
  obtain ‚ü®m, hm‚ü© := Triangle.yoneda_exact‚ÇÉ _ hT' (Œπ.map k) hl
  dsimp at m hm
  obtain rfl : m = 0 := by
    rw [‚Üê cancel_epi ((shiftFunctorAdd' C (1 : ‚Ñ§) 1 2 (by linarith)).hom.app _),
      comp_zero]
    exact vanishing_from_positive_shift hŒπ _ (by linarith)
  apply Œπ.map_injective
  rw [hm, comp_zero, Œπ.map_zero]

lemma ŒπK_lift {B : A} (x‚ÇÅ : B ‚ü∂ X‚ÇÅ) (hx‚ÇÅ : x‚ÇÅ ‚â´ f‚ÇÅ = 0) :
    ‚àÉ (k : B ‚ü∂ K), k ‚â´ ŒπK f‚ÇÉ Œ± = x‚ÇÅ := by
  suffices ‚àÉ (k' : (Œπ.obj B)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ (Œπ.obj K)‚ü¶(1 : ‚Ñ§)‚üß), (Œπ.map x‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß' = k' ‚â´ Œ± ‚â´ f‚ÇÉ by
    obtain ‚ü®k', hk'‚ü© := this
    refine ‚ü®(Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).preimage k', ?_‚ü©
    apply (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).map_injective
    rw [Functor.map_comp, Functor.map_preimage, Functor.comp_map, shift_Œπ_map_ŒπK,
      Functor.comp_map, hk']
  obtain ‚ü®x‚ÇÉ, hx‚ÇÉ‚ü© := Triangle.coyoneda_exact‚ÇÅ _ hT ((Œπ.map x‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß')
    (by
      dsimp
      rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp, hx‚ÇÅ, Functor.map_zero, Functor.map_zero])
  obtain ‚ü®k', hk'‚ü© := Triangle.coyoneda_exact‚ÇÇ _ hT' x‚ÇÉ
    (vanishing_from_positive_shift hŒπ _ (by linarith))
  refine ‚ü®k', ?_‚ü©
  dsimp at hk' hx‚ÇÉ
  rw [hx‚ÇÉ, hk', assoc]

noncomputable def isLimitKernelFork : IsLimit (KernelFork.ofŒπ _ (ŒπK_mor‚ÇÅ hT Œ±)) :=
  KernelFork.IsLimit.ofŒπ _ _  (fun {B} x‚ÇÅ hx‚ÇÅ => (ŒπK_lift hŒπ hT hT' x‚ÇÅ hx‚ÇÅ).choose)
    (fun {B} x‚ÇÅ hx‚ÇÅ => (ŒπK_lift hŒπ hT hT' x‚ÇÅ hx‚ÇÅ).choose_spec)
    (fun {B} x‚ÇÅ hx‚ÇÅ m hm => by
      have := mono_ŒπK hŒπ hT hT'
      rw [‚Üê cancel_mono (ŒπK f‚ÇÉ Œ±), (ŒπK_lift hŒπ hT hT' x‚ÇÅ hx‚ÇÅ).choose_spec, hm])

lemma œÄQ_desc {B : A} (x‚ÇÇ : X‚ÇÇ ‚ü∂ B) (hx‚ÇÇ : f‚ÇÅ ‚â´ x‚ÇÇ = 0) :
    ‚àÉ (k : Q ‚ü∂ B), œÄQ f‚ÇÇ Œ≤ ‚â´ k = x‚ÇÇ := by
  obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© := Triangle.yoneda_exact‚ÇÇ _ hT (Œπ.map x‚ÇÇ) (by
    dsimp
    rw [‚Üê Œπ.map_comp, hx‚ÇÇ, Œπ.map_zero])
  obtain ‚ü®k, hk‚ü© := Triangle.yoneda_exact‚ÇÇ _ hT' x‚ÇÅ
    (vanishing_from_positive_shift hŒπ _ (by linarith))
  dsimp at k hk hx‚ÇÅ
  refine ‚ü®Œπ.preimage k, ?_‚ü©
  apply Œπ.map_injective
  simp only [Functor.map_comp, Œπ_map_œÄQ, Functor.map_preimage, assoc, hx‚ÇÅ, hk]

noncomputable def isColimitCokernelCofork : IsColimit (CokernelCofork.ofœÄ _ (mor‚ÇÅ_œÄQ hT Œ≤)) :=
  CokernelCofork.IsColimit.ofœÄ _ _
    (fun {B} x‚ÇÇ hx‚ÇÇ => (œÄQ_desc hŒπ hT hT' x‚ÇÇ hx‚ÇÇ).choose)
    (fun {B} x‚ÇÇ hx‚ÇÇ => (œÄQ_desc hŒπ hT hT' x‚ÇÇ hx‚ÇÇ).choose_spec)
    (fun {B} x‚ÇÇ hx‚ÇÇ m hm => by
      have := epi_œÄQ hŒπ hT hT'
      rw [‚Üê cancel_epi (œÄQ f‚ÇÇ Œ≤), (œÄQ_desc hŒπ hT hT' x‚ÇÇ hx‚ÇÇ).choose_spec, hm])

-- BBD 1.2.1, p. 27
lemma hasKernel : HasKernel f‚ÇÅ := ‚ü®_, isLimitKernelFork hŒπ hT hT'‚ü©
lemma hasCokernel : HasCokernel f‚ÇÅ := ‚ü®_, isColimitCokernelCofork hŒπ hT hT'‚ü©

end

variable (Œπ)

def admissibleMorphism : MorphismProperty A := fun X‚ÇÅ X‚ÇÇ f‚ÇÅ =>
  ‚àÄ ‚¶ÉX‚ÇÉ : C‚¶Ñ (f‚ÇÇ : Œπ.obj X‚ÇÇ ‚ü∂ X‚ÇÉ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ (Œπ.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß)
    (_ : Triangle.mk (Œπ.map f‚ÇÅ) f‚ÇÇ f‚ÇÉ ‚àà distTriang C),
  ‚àÉ (K Q : A) (Œ± : (Œπ.obj K)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ X‚ÇÉ) (Œ≤ : X‚ÇÉ ‚ü∂ (Œπ.obj Q))
    (Œ≥ : Œπ.obj Q ‚ü∂ (Œπ.obj K)‚ü¶(1 : ‚Ñ§)‚üß‚ü¶(1 : ‚Ñ§)‚üß), Triangle.mk Œ± Œ≤ Œ≥ ‚àà distTriang C

variable {Œπ} [Preadditive A] [Œπ.Full] [Œπ.Faithful]

include hŒπ in
lemma hasKernel_of_admissibleMorphism {X‚ÇÅ X‚ÇÇ : A} (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ)
    (hf‚ÇÅ : admissibleMorphism Œπ f‚ÇÅ) :
    HasKernel f‚ÇÅ := by
  obtain ‚ü®X‚ÇÉ, f‚ÇÇ, f‚ÇÉ, hT‚ü© := distinguished_cocone_triangle (Œπ.map f‚ÇÅ)
  obtain ‚ü®K, Q, Œ±, Œ≤, Œ≥, hT'‚ü© := hf‚ÇÅ f‚ÇÇ f‚ÇÉ hT
  exact hasKernel hŒπ hT hT'

include hŒπ in
lemma hasCokernel_of_admissibleMorphism {X‚ÇÅ X‚ÇÇ : A} (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ)
    (hf‚ÇÅ : admissibleMorphism Œπ f‚ÇÅ) :
    HasCokernel f‚ÇÅ := by
  obtain ‚ü®X‚ÇÉ, f‚ÇÇ, f‚ÇÉ, hT‚ü© := distinguished_cocone_triangle (Œπ.map f‚ÇÅ)
  obtain ‚ü®K, Q, Œ±, Œ≤, Œ≥, hT'‚ü© := hf‚ÇÅ f‚ÇÇ f‚ÇÉ hT
  exact hasCokernel hŒπ hT hT'

section

-- should be moved somewhere
instance hasZeroObject [HasTerminal A] : HasZeroObject A :=
  ‚ü®‚ä§_ A, by
    rw [IsZero.iff_id_eq_zero]
    apply Subsingleton.elim‚ü©

variable [HasFiniteProducts A] [Œπ.Additive]

noncomputable def isLimitKernelForkOfDistTriang {X‚ÇÅ X‚ÇÇ X‚ÇÉ : A}
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ) (f‚ÇÉ : Œπ.obj X‚ÇÉ ‚ü∂ (Œπ.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß)
    (hT : Triangle.mk (Œπ.map f‚ÇÅ) (Œπ.map f‚ÇÇ) f‚ÇÉ ‚àà distTriang C) :
    IsLimit (KernelFork.ofŒπ f‚ÇÅ (show f‚ÇÅ ‚â´ f‚ÇÇ = 0 from Œπ.map_injective (by
        erw [Functor.map_comp, comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ hT, Œπ.map_zero]))) := by
  have hT' : Triangle.mk (ùüô ((Œπ.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß)) (0 : _ ‚ü∂ Œπ.obj 0) 0 ‚àà distTriang C := by
    refine isomorphic_distinguished _ (contractible_distinguished
      (((Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).obj X‚ÇÅ))) _ ?_
    exact Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (IsZero.iso (by
      dsimp
      rw [IsZero.iff_id_eq_zero, ‚Üê Œπ.map_id, id_zero, Œπ.map_zero]) (isZero_zero C))
      (by aesop_cat) (by aesop_cat) (by aesop_cat)
  refine IsLimit.ofIsoLimit (AbelianSubcategory.isLimitKernelFork hŒπ
    (rot_of_distTriang _ hT) hT') ?_
  exact Fork.ext (-(Iso.refl _)) ((Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).map_injective
    (by simp))

noncomputable def isColimitCokernelCoforkOfDistTriang {X‚ÇÅ X‚ÇÇ X‚ÇÉ : A}
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ) (f‚ÇÉ : Œπ.obj X‚ÇÉ ‚ü∂ (Œπ.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß)
    (hT : Triangle.mk (Œπ.map f‚ÇÅ) (Œπ.map f‚ÇÇ) f‚ÇÉ ‚àà distTriang C) :
    IsColimit (CokernelCofork.ofœÄ f‚ÇÇ (show f‚ÇÅ ‚â´ f‚ÇÇ = 0 from Œπ.map_injective (by
        erw [Functor.map_comp, comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ hT, Œπ.map_zero]))) := by
  have hT' : Triangle.mk (0 : ((Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).obj 0) ‚ü∂ _) (ùüô (Œπ.obj X‚ÇÉ)) 0 ‚àà
      distTriang C := by
    refine isomorphic_distinguished _ (inv_rot_of_distTriang _
      (contractible_distinguished (Œπ.obj X‚ÇÉ))) _ ?_
    refine Triangle.isoMk _ _ (IsZero.iso ?_ ?_) (Iso.refl _) (Iso.refl _) (by
      dsimp
      simp only [comp_id, comp_neg, zero_eq_neg, IsIso.comp_left_eq_zero, IsIso.comp_right_eq_zero]
      rw [Functor.map_zero]) (by simp) (by simp)
    ¬∑ dsimp
      rw [IsZero.iff_id_eq_zero, ‚Üê Functor.map_id, ‚Üê Functor.map_id, id_zero,
        Functor.map_zero, Functor.map_zero]
    ¬∑ dsimp
      rw [IsZero.iff_id_eq_zero, ‚Üê Functor.map_id, id_zero, Functor.map_zero]
  refine IsColimit.ofIsoColimit (AbelianSubcategory.isColimitCokernelCofork hŒπ
    hT hT') ?_
  exact Cofork.ext (Iso.refl _) (Œπ.map_injective (by simp))

variable (hA : ‚àÄ ‚¶ÉX‚ÇÅ X‚ÇÇ : A‚¶Ñ (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ), admissibleMorphism Œπ f‚ÇÅ) [IsTriangulated C]

omit [IsTriangulated C] in
include hŒπ hA in
lemma exists_distinguished_triangle_of_epi {X‚ÇÇ X‚ÇÉ : A} (œÄ : X‚ÇÇ ‚ü∂ X‚ÇÉ) [Epi œÄ] :
    ‚àÉ (X‚ÇÅ : A) (i : X‚ÇÅ ‚ü∂ X‚ÇÇ) (Œ¥ : Œπ.obj X‚ÇÉ ‚ü∂ (Œπ.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß),
      Triangle.mk (Œπ.map i) (Œπ.map œÄ) Œ¥ ‚àà distTriang C := by
  obtain ‚ü®X‚ÇÅ, f‚ÇÇ, f‚ÇÉ, hT‚ü© := distinguished_cocone_triangle (Œπ.map œÄ)
  obtain ‚ü®K, Q, Œ±, Œ≤, Œ≥, hT'‚ü© := hA œÄ f‚ÇÇ f‚ÇÉ hT
  have hQ : ùüô Q = 0 := by
    apply Cofork.IsColimit.hom_ext (isColimitCokernelCofork hŒπ hT hT')
    dsimp
    rw [comp_id, comp_zero, ‚Üê cancel_epi œÄ, comp_zero, mor‚ÇÅ_œÄQ hT Œ≤]
  have : IsIso Œ± := (Triangle.isZero‚ÇÉ_iff_isIso‚ÇÅ _ hT').1 (by
    dsimp
    rw [IsZero.iff_id_eq_zero, ‚Üê Œπ.map_id, hQ, Œπ.map_zero])
  refine ‚ü®K, -ŒπK f‚ÇÉ Œ±, f‚ÇÇ ‚â´ inv Œ±, ?_‚ü©
  rw [rotate_distinguished_triangle]
  refine isomorphic_distinguished _ hT _ ?_
  exact Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (asIso Œ±)

variable (Œπ)

noncomputable def abelian : Abelian A := by
  apply Abelian.mk'
  intro X‚ÇÅ X‚ÇÇ f‚ÇÅ
  obtain ‚ü®X‚ÇÉ, f‚ÇÇ, f‚ÇÉ, hT‚ü© := distinguished_cocone_triangle (Œπ.map f‚ÇÅ)
  obtain ‚ü®K, Q, Œ±, Œ≤, Œ≥, hT'‚ü© := hA f‚ÇÅ f‚ÇÇ f‚ÇÉ hT
  have comm : f‚ÇÇ ‚â´ Œ≤ = Œπ.map (œÄQ f‚ÇÇ Œ≤) := by simp
  have := epi_œÄQ hŒπ hT hT'
  obtain ‚ü®I, i, Œ¥, hI‚ü© := exists_distinguished_triangle_of_epi hŒπ hA (œÄQ f‚ÇÇ Œ≤)
  have H := someOctahedron comm (rot_of_distTriang _ hT) (rot_of_distTriang _ hT')
    (rot_of_distTriang _ hI)
  obtain ‚ü®m‚ÇÅ, hm‚ÇÅ‚ü© : ‚àÉ (m‚ÇÅ : X‚ÇÅ ‚ü∂ I), (shiftFunctor C (1 : ‚Ñ§)).map (Œπ.map m‚ÇÅ) = H.m‚ÇÅ :=
    ‚ü®(Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).preimage H.m‚ÇÅ, Functor.map_preimage (Œπ ‚ãô _) _‚ü©
  obtain ‚ü®m‚ÇÉ : Œπ.obj I ‚ü∂ (Œπ.obj K)‚ü¶(1 : ‚Ñ§)‚üß, hm‚ÇÉ‚ü© :
      ‚àÉ m‚ÇÉ, (shiftFunctor C (1 : ‚Ñ§)).map m‚ÇÉ = H.m‚ÇÉ :=
    ‚ü®(shiftFunctor C (1 : ‚Ñ§)).preimage H.m‚ÇÉ, Functor.map_preimage _ _‚ü©
  have Hmem' : Triangle.mk (Œπ.map (ŒπK f‚ÇÉ Œ±)) (Œπ.map m‚ÇÅ) (-m‚ÇÉ) ‚àà distTriang C := by
    rw [rotate_distinguished_triangle, ‚Üê Triangle.shift_distinguished_iff _ 1]
    refine isomorphic_distinguished _ H.mem _ ?_
    refine Triangle.isoMk _ _ (-(Iso.refl _)) (Iso.refl _) (Iso.refl _) ?_ ?_ ?_
    ¬∑ dsimp
      simp [hm‚ÇÅ]
    ¬∑ dsimp
      simp [hm‚ÇÉ]
    ¬∑ dsimp
      simp
  exact ‚ü®K, _, _, isLimitKernelFork hŒπ hT hT',
    Q, _, _, isColimitCokernelCofork hŒπ hT hT',
    I, _, _, isColimitCokernelCoforkOfDistTriang hŒπ _ _ _ Hmem',
    i, _, isLimitKernelForkOfDistTriang hŒπ _ _ _ hI,
    (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).map_injective (by simpa [hm‚ÇÅ] using H.comm‚ÇÇ.symm)‚ü©

end

end AbelianSubcategory

end Triangulated

end CategoryTheory
