/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.TStructure.Basic
import Mathlib.CategoryTheory.Triangulated.TStructure.AbstractSpectralObject
import Mathlib.Algebra.Homology.SpectralSequence.ZTilde

/-!
# Truncations for a t-structure

-/

namespace CategoryTheory

open Category Limits Pretriangulated ZeroObject Preadditive

variable {C : Type _} [Category C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

namespace Triangulated

namespace TStructure

variable (t : TStructure C)

/-- triangle_map_ext' -/
lemma triangle_map_ext' (a b : ‚Ñ§) (hab : a ‚â§ b) {T T' : Triangle C} (f‚ÇÅ f‚ÇÇ : T ‚ü∂ T')
    (hT : T ‚àà distTriang C) (hT' : T' ‚àà distTriang C)
    (h‚ÇÄ : t.IsLE T.obj‚ÇÅ a) (h‚ÇÅ : t.IsGE T'.obj‚ÇÉ b)
    (H : f‚ÇÅ.hom‚ÇÇ = f‚ÇÇ.hom‚ÇÇ) : f‚ÇÅ = f‚ÇÇ := by
  suffices ‚àÄ (f : T ‚ü∂ T') (_ : f.hom‚ÇÇ = 0), f = 0 by
    rw [‚Üê sub_eq_zero]
    apply this
    dsimp
    rw [H, sub_self]
  intro f hf
  ext
  ¬∑ obtain ‚ü®g, hg‚ü© := Triangle.coyoneda_exact‚ÇÇ _ (inv_rot_of_distTriang _ hT') f.hom‚ÇÅ (by
      have eq := f.comm‚ÇÅ
      dsimp at eq ‚ä¢
      rw [‚Üê eq, hf, comp_zero])
    have hg' : g = 0 := t.zero_of_isLE_of_isGE g a (b+1) (by linarith) h‚ÇÄ
      (t.isGE_shift T'.obj‚ÇÉ b (-1) (b+1) (by linarith))
    simp [hg, hg']
  ¬∑ simp [hf]
  ¬∑ obtain ‚ü®g, hg‚ü© := T.yoneda_exact‚ÇÉ hT f.hom‚ÇÉ (by rw [f.comm‚ÇÇ, hf, zero_comp])
    have hg' : g = 0 := t.zero_of_isLE_of_isGE g (a-1) b (by linarith)
      (t.isLE_shift _ a 1 (a-1) (by linarith)) inferInstance
    simp [hg, hg']

lemma triangle_map_exists (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ < n‚ÇÅ) (T T' : Triangle C)
    (hT : T ‚àà distTriang C) (hT' : T' ‚àà distTriang C)
    (œÜ : T.obj‚ÇÇ ‚ü∂ T'.obj‚ÇÇ)
    (h‚ÇÄ : t.IsLE T.obj‚ÇÅ n‚ÇÄ)
    (h‚ÇÅ' : t.IsGE T'.obj‚ÇÉ n‚ÇÅ) :
    ‚àÉ (f : T ‚ü∂ T'), f.hom‚ÇÇ = œÜ := by
  obtain ‚ü®a, comm‚ÇÅ‚ü© := T'.coyoneda_exact‚ÇÇ hT' (T.mor‚ÇÅ ‚â´ œÜ) (t.zero _ n‚ÇÄ n‚ÇÅ h)
  obtain ‚ü®c, ‚ü®comm‚ÇÇ, comm‚ÇÉ‚ü©‚ü© := complete_distinguished_triangle_morphism _ _ hT hT' a œÜ comm‚ÇÅ
  exact ‚ü®
    { hom‚ÇÅ := a
      hom‚ÇÇ := œÜ
      hom‚ÇÉ := c
      comm‚ÇÅ := comm‚ÇÅ
      comm‚ÇÇ := comm‚ÇÇ
      comm‚ÇÉ := comm‚ÇÉ }, rfl‚ü©

lemma triangle_iso_exists (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ < n‚ÇÅ) (T T' : Triangle C)
    (hT : T ‚àà distTriang C) (hT' : T' ‚àà distTriang C)
    (e : T.obj‚ÇÇ ‚âÖ T'.obj‚ÇÇ)
    (h‚ÇÄ : t.IsLE T.obj‚ÇÅ n‚ÇÄ) (h‚ÇÅ : t.IsGE T.obj‚ÇÉ n‚ÇÅ)
    (h‚ÇÄ' : t.IsLE T'.obj‚ÇÅ n‚ÇÄ) (h‚ÇÅ' : t.IsGE T'.obj‚ÇÉ n‚ÇÅ) :
    ‚àÉ (e' : T ‚âÖ T'), e'.hom.hom‚ÇÇ = e.hom := by
  obtain ‚ü®hom, hhom‚ü© := triangle_map_exists t _ _ h _ _ hT hT' e.hom h‚ÇÄ h‚ÇÅ'
  obtain ‚ü®inv, hinv‚ü© := triangle_map_exists t _ _ h _ _ hT' hT e.inv h‚ÇÄ' h‚ÇÅ
  exact ‚ü®
    { hom := hom
      inv := inv
      hom_inv_id := triangle_map_ext' t n‚ÇÄ n‚ÇÅ (by linarith) _ _ hT hT h‚ÇÄ h‚ÇÅ
        (by simp only [comp_hom‚ÇÇ, id_hom‚ÇÇ, hhom, hinv, e.hom_inv_id])
      inv_hom_id := triangle_map_ext' t n‚ÇÄ n‚ÇÅ (by linarith) _ _ hT' hT' h‚ÇÄ' h‚ÇÅ'
        (by simp only [comp_hom‚ÇÇ, id_hom‚ÇÇ, hhom, hinv, e.inv_hom_id]) }, hhom‚ü©

namespace TruncAux

variable (n : ‚Ñ§) (A : C)

noncomputable def triangle : Triangle C :=
  Triangle.mk
    (t.exists_triangle A (n-1) n
      (by linarith)).choose_spec.choose_spec.choose_spec.choose_spec.choose
    (t.exists_triangle A (n-1) n
      (by linarith)).choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose
    (t.exists_triangle A (n-1) n
      (by linarith)).choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose

lemma triangle_distinguished :
    triangle t n A ‚àà distTriang C :=
  (t.exists_triangle A (n-1) n (by linarith)
    ).choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec

instance triangle_obj‚ÇÅ_isLE (n : ‚Ñ§) :
    t.IsLE (triangle t n A).obj‚ÇÅ (n-1) := by
  exact ‚ü®(t.exists_triangle A (n-1) n (by linarith)).choose_spec.choose_spec.choose‚ü©

@[simp]
lemma triangle_obj‚ÇÇ :
    (triangle t n A).obj‚ÇÇ = A := by rfl

instance triangle_obj‚ÇÉ_isGE :
    t.IsGE (triangle t n A).obj‚ÇÉ n :=
  ‚ü®(t.exists_triangle A (n-1) n (by linarith)).choose_spec.choose_spec.choose_spec.choose‚ü©

variable {A}
variable {B : C} (œÜ : A ‚ü∂ B)

lemma triangle_map_ext (f‚ÇÅ f‚ÇÇ : triangle t n A ‚ü∂ triangle t n B)
    (H : f‚ÇÅ.hom‚ÇÇ = f‚ÇÇ.hom‚ÇÇ) : f‚ÇÅ = f‚ÇÇ :=
  triangle_map_ext' t (n-1) n (by linarith) _ _
    (triangle_distinguished t n A) (triangle_distinguished t n B)
    inferInstance inferInstance H

noncomputable def triangleMap : triangle t n A ‚ü∂ triangle t n B :=
  have H := triangle_map_exists t (n-1) n (by linarith) _ _ (triangle_distinguished t n A)
    (triangle_distinguished t n B) œÜ inferInstance inferInstance
  { hom‚ÇÅ := H.choose.hom‚ÇÅ
    hom‚ÇÇ := œÜ
    hom‚ÇÉ := H.choose.hom‚ÇÉ
    comm‚ÇÅ := by rw [‚Üê H.choose.comm‚ÇÅ, H.choose_spec]
    comm‚ÇÇ := by rw [H.choose.comm‚ÇÇ, H.choose_spec]
    comm‚ÇÉ := H.choose.comm‚ÇÉ }

noncomputable def triangleFunctor : C ‚•§ Triangle C where
  obj := triangle t n
  map œÜ := triangleMap t n œÜ
  map_id _ := triangle_map_ext t n _ _ rfl
  map_comp _ _ := triangle_map_ext t n _ _ rfl

variable (A)

lemma triangleFunctor_obj_distinguished :
  (triangleFunctor t n).obj A ‚àà distTriang C :=
    triangle_distinguished t n A

@[simp]
lemma triangleFunctor_obj_obj‚ÇÇ : ((triangleFunctor t n).obj A).obj‚ÇÇ = A := rfl

@[simp]
lemma triangleFunctor_map_hom‚ÇÇ : ((triangleFunctor t n).map œÜ).hom‚ÇÇ = œÜ := rfl

instance isLE_triangleFunctor_obj_obj‚ÇÅ :
    t.IsLE ((triangleFunctor t n).obj A).obj‚ÇÅ (n-1) := by
  dsimp [triangleFunctor]
  infer_instance

instance isGE_triangleFunctor_obj_obj‚ÇÉ :
    t.IsGE ((triangleFunctor t n).obj A).obj‚ÇÉ n := by
  dsimp [triangleFunctor]
  infer_instance

noncomputable def triangleMapOfLE (a b : ‚Ñ§) (h : a ‚â§ b) : triangle t a A ‚ü∂ triangle t b A :=
  have H := triangle_map_exists t (a-1) b (by linarith) _ _ (triangle_distinguished t a A)
    (triangle_distinguished t b A) (ùüô _) inferInstance inferInstance
  { hom‚ÇÅ := H.choose.hom‚ÇÅ
    hom‚ÇÇ := ùüô _
    hom‚ÇÉ := H.choose.hom‚ÇÉ
    comm‚ÇÅ := by rw [‚Üê H.choose.comm‚ÇÅ, H.choose_spec]
    comm‚ÇÇ := by rw [H.choose.comm‚ÇÇ, H.choose_spec]
    comm‚ÇÉ := H.choose.comm‚ÇÉ }

noncomputable def triangleFunctorNatTransOfLE (a b : ‚Ñ§) (h : a ‚â§ b) :
    triangleFunctor t a ‚ü∂ triangleFunctor t b where
  app X := triangleMapOfLE t X a b h
  naturality {X‚ÇÅ X‚ÇÇ} œÜ := by
    refine triangle_map_ext' t (a-1) b (by linarith) _ _
      (triangleFunctor_obj_distinguished t a X‚ÇÅ) (triangleFunctor_obj_distinguished t b X‚ÇÇ)
      inferInstance inferInstance ?_
    dsimp [triangleMapOfLE]
    rw [id_comp, comp_id]

@[simp]
lemma triangleFunctorNatTransOfLE_app_hom‚ÇÇ (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    ((triangleFunctorNatTransOfLE t a b h).app X).hom‚ÇÇ = ùüô X := rfl

lemma triangleFunctorNatTransOfLE_trans (a b c : ‚Ñ§) (hab : a ‚â§ b) (hbc : b ‚â§ c) :
    triangleFunctorNatTransOfLE t a b hab ‚â´ triangleFunctorNatTransOfLE t b c hbc =
      triangleFunctorNatTransOfLE t a c (hab.trans hbc) := by
  apply NatTrans.ext
  ext1 X
  exact triangle_map_ext' t (a-1) c (by linarith) _ _
    (triangleFunctor_obj_distinguished t a X) (triangleFunctor_obj_distinguished t c X)
    inferInstance inferInstance (by aesop_cat)

lemma triangleFunctorNatTransOfLE_refl (a : ‚Ñ§) :
    triangleFunctorNatTransOfLE t a a (by rfl) = ùüô _ := by
  apply NatTrans.ext
  ext1 X
  exact triangle_map_ext' t (a-1) a (by linarith) _ _
    (triangleFunctor_obj_distinguished t a X) (triangleFunctor_obj_distinguished t a X)
    inferInstance inferInstance (by aesop_cat)

instance : (triangleFunctor t n).Additive where
  map_add := triangle_map_ext t n  _ _ rfl

end TruncAux

noncomputable def truncLT (n : ‚Ñ§) : C ‚•§ C :=
  TruncAux.triangleFunctor t n ‚ãô Triangle.œÄ‚ÇÅ

instance (n : ‚Ñ§) : (t.truncLT n).Additive where
  map_add {_ _ f g} := by
    dsimp only [truncLT, Functor.comp_map]
    rw [Functor.map_add]
    rfl

noncomputable def truncLTŒπ (n : ‚Ñ§) : t.truncLT n ‚ü∂ ùü≠ _ :=
  whiskerLeft (TruncAux.triangleFunctor t n) Triangle.œÄ‚ÇÅToœÄ‚ÇÇ

noncomputable def truncGE (n : ‚Ñ§) : C ‚•§ C :=
  TruncAux.triangleFunctor t n ‚ãô Triangle.œÄ‚ÇÉ

instance (n : ‚Ñ§) : (t.truncGE n).Additive where
  map_add {_ _ f g} := by
    dsimp only [truncGE, Functor.comp_map]
    rw [Functor.map_add]
    rfl

noncomputable def truncGEœÄ (n : ‚Ñ§) : ùü≠ _ ‚ü∂ t.truncGE n :=
  whiskerLeft (TruncAux.triangleFunctor t n) Triangle.œÄ‚ÇÇToœÄ‚ÇÉ

instance (X : C) (n : ‚Ñ§) : t.IsLE ((t.truncLT n).obj X) (n-1) := by
  dsimp [truncLT]
  infer_instance

instance (X : C) (n : ‚Ñ§) : t.IsGE ((t.truncGE n).obj X) n := by
  dsimp [truncGE]
  infer_instance

noncomputable def truncGEŒ¥LT (n : ‚Ñ§) :
  t.truncGE n ‚ü∂ t.truncLT n ‚ãô shiftFunctor C (1 : ‚Ñ§) :=
    whiskerLeft (TruncAux.triangleFunctor t n) Triangle.œÄ‚ÇÉToœÄ‚ÇÅ

@[simps!]
noncomputable def triangleLTGE (n : ‚Ñ§) : C ‚•§ Triangle C :=
  Triangle.functorMk (t.truncLTŒπ n) (t.truncGEœÄ n) (t.truncGEŒ¥LT n)

lemma triangleLTGE_distinguished (n : ‚Ñ§) (X : C) :
    (t.triangleLTGE n).obj X ‚àà distTriang C :=
  TruncAux.triangleFunctor_obj_distinguished t n X

@[reassoc (attr := simp)]
lemma truncLTŒπ_comp_truncGEœÄ_app (n : ‚Ñ§) (X : C) :
    (t.truncLTŒπ n).app X ‚â´ (t.truncGEœÄ n).app X = 0 :=
  comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ ((t.triangleLTGE_distinguished n X))

@[reassoc (attr := simp)]
lemma truncGEœÄ_comp_truncGEŒ¥LT_app (n : ‚Ñ§) (X : C) :
    (t.truncGEœÄ n).app X ‚â´ (t.truncGEŒ¥LT n).app X = 0 :=
  comp_distTriang_mor_zero‚ÇÇ‚ÇÉ _ ((t.triangleLTGE_distinguished n X))

@[reassoc (attr := simp)]
lemma truncGEŒ¥LT_comp_truncLTŒπ_app (n : ‚Ñ§) (X : C) :
    (t.truncGEŒ¥LT n).app X ‚â´ ((t.truncLTŒπ n).app X)‚ü¶(1 : ‚Ñ§)‚üß' = 0 :=
  comp_distTriang_mor_zero‚ÇÉ‚ÇÅ _ ((t.triangleLTGE_distinguished n X))

@[reassoc (attr := simp)]
lemma truncLTŒπ_comp_truncGEœÄ (n : ‚Ñ§) :
    t.truncLTŒπ n ‚â´ t.truncGEœÄ n = 0 := by aesop_cat

@[reassoc (attr := simp)]
lemma truncGEœÄ_comp_truncGEŒ¥LT (n : ‚Ñ§) :
    t.truncGEœÄ n ‚â´ t.truncGEŒ¥LT n = 0 := by aesop_cat

@[reassoc (attr := simp)]
lemma truncGEŒ¥LT_comp_truncLTŒπ (n : ‚Ñ§) :
    t.truncGEŒ¥LT n ‚â´ whiskerRight (t.truncLTŒπ n) (shiftFunctor C (1 : ‚Ñ§)) = 0 := by aesop_cat

noncomputable def natTransTruncLTOfLE (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.truncLT a ‚ü∂ t.truncLT b :=
  whiskerRight (TruncAux.triangleFunctorNatTransOfLE t a b h) Triangle.œÄ‚ÇÅ

noncomputable def natTransTruncGEOfLE (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.truncGE a ‚ü∂ t.truncGE b :=
  whiskerRight (TruncAux.triangleFunctorNatTransOfLE t a b h) Triangle.œÄ‚ÇÉ

@[reassoc (attr := simp)]
lemma natTransTruncLTOfLE_Œπ_app (a b : ‚Ñ§) (h : a ‚â§ b) (X : C):
    (t.natTransTruncLTOfLE a b h).app X ‚â´ (t.truncLTŒπ b).app X = (t.truncLTŒπ a).app X := by
  simpa only [TruncAux.triangleFunctorNatTransOfLE_app_hom‚ÇÇ,
    TruncAux.triangleFunctor_obj_obj‚ÇÇ, comp_id]
    using ((TruncAux.triangleFunctorNatTransOfLE t a b h).app X).comm‚ÇÅ.symm

@[reassoc (attr := simp)]
lemma natTransTruncLTOfLE_Œπ (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.natTransTruncLTOfLE a b h ‚â´ t.truncLTŒπ b = t.truncLTŒπ a := by aesop_cat

@[reassoc (attr := simp)]
lemma œÄ_natTransTruncGEOfLE_app (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    (t.truncGEœÄ a).app X ‚â´ (t.natTransTruncGEOfLE a b h).app X = (t.truncGEœÄ b).app X := by
  simpa only [TruncAux.triangleFunctorNatTransOfLE_app_hom‚ÇÇ,
    TruncAux.triangleFunctor_obj_obj‚ÇÇ, id_comp]
    using ((TruncAux.triangleFunctorNatTransOfLE t a b h).app X).comm‚ÇÇ

@[reassoc (attr := simp)]
lemma œÄ_natTransTruncGEOfLE (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.truncGEœÄ a ‚â´ t.natTransTruncGEOfLE a b h = t.truncGEœÄ b := by aesop_cat

@[reassoc]
lemma truncGEŒ¥LT_comp_natTransTruncLTOfLE_app (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
  (t.truncGEŒ¥LT a).app X ‚â´ ((natTransTruncLTOfLE t a b h).app X)‚ü¶(1 :‚Ñ§)‚üß' =
    (t.natTransTruncGEOfLE a b h).app X ‚â´ (t.truncGEŒ¥LT b).app X :=
  ((TruncAux.triangleFunctorNatTransOfLE t a b h).app X).comm‚ÇÉ

@[reassoc]
lemma truncGEŒ¥LT_comp_whiskerRight_natTransTruncLTOfLE (a b : ‚Ñ§) (h : a ‚â§ b) :
  t.truncGEŒ¥LT a ‚â´ whiskerRight (natTransTruncLTOfLE t a b h) (shiftFunctor C (1 : ‚Ñ§)) =
    t.natTransTruncGEOfLE a b h ‚â´ t.truncGEŒ¥LT b := by
  ext X
  exact t.truncGEŒ¥LT_comp_natTransTruncLTOfLE_app a b h X

noncomputable def natTransTriangleLTGEOfLE (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.triangleLTGE a ‚ü∂ t.triangleLTGE b := by
  refine Triangle.functorHomMk' (t.natTransTruncLTOfLE a b h) (ùüô _)
    ((t.natTransTruncGEOfLE a b h)) ?_ ?_ ?_
  ¬∑ dsimp
    simp
  ¬∑ dsimp
    simp
  ¬∑ exact t.truncGEŒ¥LT_comp_whiskerRight_natTransTruncLTOfLE a b h

@[simp]
lemma natTransTriangleLTGEOfLE_refl (a : ‚Ñ§) :
    t.natTransTriangleLTGEOfLE a a (by rfl) = ùüô _ :=
  TruncAux.triangleFunctorNatTransOfLE_refl t a

lemma natTransTriangleLTGEOfLE_trans (a b c : ‚Ñ§) (hab : a ‚â§ b) (hbc : b ‚â§ c):
    t.natTransTriangleLTGEOfLE a b hab ‚â´ t.natTransTriangleLTGEOfLE b c hbc =
      t.natTransTriangleLTGEOfLE a c (hab.trans hbc) :=
  TruncAux.triangleFunctorNatTransOfLE_trans t a b c hab hbc

@[simp]
lemma natTransTruncLTOfLE_refl (a : ‚Ñ§) :
    t.natTransTruncLTOfLE a a (by rfl) = ùüô _ :=
  congr_arg (fun x => whiskerRight x (Triangle.œÄ‚ÇÅ)) (t.natTransTriangleLTGEOfLE_refl a)

@[simp]
lemma natTransTruncLTOfLE_trans (a b c : ‚Ñ§) (hab : a ‚â§ b) (hbc : b ‚â§ c) :
    t.natTransTruncLTOfLE a b hab ‚â´ t.natTransTruncLTOfLE b c hbc =
      t.natTransTruncLTOfLE a c (hab.trans hbc) :=
  congr_arg (fun x => whiskerRight x Triangle.œÄ‚ÇÅ)
    (t.natTransTriangleLTGEOfLE_trans a b c hab hbc)

lemma natTransTruncLTOfLE_refl_app (a : ‚Ñ§) (X : C) :
    (t.natTransTruncLTOfLE a a (by rfl)).app X = ùüô _ :=
  congr_app (t.natTransTruncLTOfLE_refl a) X

lemma natTransTruncLTOfLE_trans_app (a b c : ‚Ñ§) (hab : a ‚â§ b) (hbc : b ‚â§ c) (X : C) :
    (t.natTransTruncLTOfLE a b hab).app X ‚â´ (t.natTransTruncLTOfLE b c hbc).app X =
      (t.natTransTruncLTOfLE a c (hab.trans hbc)).app X :=
  congr_app (t.natTransTruncLTOfLE_trans a b c hab hbc) X

@[simp]
lemma natTransTruncGEOfLE_refl (a : ‚Ñ§) :
    t.natTransTruncGEOfLE a a (by rfl) = ùüô _ :=
  congr_arg (fun x => whiskerRight x (Triangle.œÄ‚ÇÉ)) (t.natTransTriangleLTGEOfLE_refl a)

@[simp]
lemma natTransTruncGEOfLE_trans (a b c : ‚Ñ§) (hab : a ‚â§ b) (hbc : b ‚â§ c) :
    t.natTransTruncGEOfLE a b hab ‚â´ t.natTransTruncGEOfLE b c hbc =
      t.natTransTruncGEOfLE a c (hab.trans hbc) :=
  congr_arg (fun x => whiskerRight x Triangle.œÄ‚ÇÉ)
    (t.natTransTriangleLTGEOfLE_trans a b c hab hbc)

lemma natTransTruncGEOfLE_refl_app (a : ‚Ñ§) (X : C) :
    (t.natTransTruncGEOfLE a a (by rfl)).app X = ùüô _ :=
  congr_app (t.natTransTruncGEOfLE_refl a) X

lemma natTransTruncGEOfLE_trans_app (a b c : ‚Ñ§) (hab : a ‚â§ b) (hbc : b ‚â§ c) (X : C) :
    (t.natTransTruncGEOfLE a b hab).app X ‚â´ (t.natTransTruncGEOfLE b c hbc).app X =
      (t.natTransTruncGEOfLE a c (hab.trans hbc)).app X :=
  congr_app (t.natTransTruncGEOfLE_trans a b c hab hbc) X

attribute [irreducible] truncLT truncGE truncLTŒπ truncGEœÄ truncGEŒ¥LT
  natTransTruncLTOfLE natTransTruncGEOfLE

noncomputable def truncLE (n : ‚Ñ§) : C ‚•§ C := t.truncLT (n+1)

instance (n : ‚Ñ§) : (t.truncLE n).Additive := by
  dsimp only [truncLE]
  infer_instance

instance (n : ‚Ñ§) (X : C) : t.IsLE ((t.truncLE n).obj X) n := by
  have : t.IsLE ((t.truncLE n).obj X) (n+1-1) := by
    dsimp [truncLE]
    infer_instance
  exact t.isLE_of_LE _ (n+1-1) n (by linarith)

noncomputable def truncGT (n : ‚Ñ§) : C ‚•§ C := t.truncGE (n+1)

instance (n : ‚Ñ§) : (t.truncGT n).Additive := by
  dsimp only [truncGT]
  infer_instance

instance (n : ‚Ñ§) (X : C) : t.IsGE ((t.truncGT n).obj X) (n+1) := by
  dsimp [truncGT]
  infer_instance

instance (n : ‚Ñ§) (X : C) : t.IsGE ((t.truncGT (n-1)).obj X) n :=
  t.isGE_of_GE _ n (n-1+1) (by linarith)

noncomputable def truncLEIsoTruncLT (a b : ‚Ñ§) (h : a + 1 = b) : t.truncLE a ‚âÖ t.truncLT b :=
  eqToIso (congr_arg t.truncLT h)

noncomputable def truncGTIsoTruncGE (a b : ‚Ñ§) (h : a + 1 = b) : t.truncGT a ‚âÖ t.truncGE b :=
  eqToIso (congr_arg t.truncGE h)

noncomputable def truncLEŒπ (n : ‚Ñ§) : t.truncLE n ‚ü∂ ùü≠ C := t.truncLTŒπ (n + 1)

@[reassoc (attr := simp)]
lemma truncLEIsoTruncLT_hom_Œπ (a b : ‚Ñ§) (h : a + 1 = b) :
    (t.truncLEIsoTruncLT a b h).hom ‚â´ t.truncLTŒπ b = t.truncLEŒπ a := by
  subst h
  dsimp [truncLEIsoTruncLT, truncLEŒπ]
  rw [id_comp]

@[reassoc (attr := simp)]
lemma truncLEIsoTruncLT_hom_Œπ_app (a b : ‚Ñ§) (h : a + 1 = b) (X : C) :
    (t.truncLEIsoTruncLT a b h).hom.app X ‚â´ (t.truncLTŒπ b).app X = (t.truncLEŒπ a).app X :=
  congr_app (t.truncLEIsoTruncLT_hom_Œπ a b h) X

@[reassoc (attr := simp)]
lemma truncLEIsoTruncLT_inv_Œπ (a b : ‚Ñ§) (h : a + 1 = b) :
    (t.truncLEIsoTruncLT a b h).inv ‚â´ t.truncLEŒπ a = t.truncLTŒπ b := by
  subst h
  dsimp [truncLEIsoTruncLT, truncLEŒπ, truncLE]
  rw [id_comp]

@[reassoc (attr := simp)]
lemma truncLEIsoTruncLT_inv_Œπ_app (a b : ‚Ñ§) (h : a + 1 = b) (X : C) :
    (t.truncLEIsoTruncLT a b h).inv.app X ‚â´ (t.truncLEŒπ a).app X = (t.truncLTŒπ b).app X :=
  congr_app (t.truncLEIsoTruncLT_inv_Œπ a b h) X

noncomputable def truncGTœÄ (n : ‚Ñ§) : ùü≠ C ‚ü∂ t.truncGT n := t.truncGEœÄ (n + 1)

@[reassoc (attr := simp)]
lemma œÄ_truncGTIsoTruncGE_hom (a b : ‚Ñ§) (h : a + 1 = b) :
    t.truncGTœÄ a ‚â´ (t.truncGTIsoTruncGE a b h).hom = t.truncGEœÄ b := by
  subst h
  dsimp [truncGTIsoTruncGE, truncGTœÄ]
  rw [comp_id]

@[reassoc (attr := simp)]
lemma œÄ_truncGTIsoTruncGE_hom_Œπ_app (a b : ‚Ñ§) (h : a + 1 = b) (X : C) :
    (t.truncGTœÄ a).app X ‚â´ (t.truncGTIsoTruncGE a b h).hom.app X = (t.truncGEœÄ b).app X :=
  congr_app (t.œÄ_truncGTIsoTruncGE_hom a b h) X

@[reassoc (attr := simp)]
lemma œÄ_truncGTIsoTruncGE_inv (a b : ‚Ñ§) (h : a + 1 = b) :
    t.truncGEœÄ b ‚â´ (t.truncGTIsoTruncGE a b h).inv = t.truncGTœÄ a := by
  subst h
  dsimp [truncGTIsoTruncGE, truncGTœÄ, truncGT]
  rw [comp_id]

@[reassoc (attr := simp)]
lemma œÄ_truncGTIsoTruncGE_inv_Œπ_app (a b : ‚Ñ§) (h : a + 1 = b) (X : C) :
    (t.truncGEœÄ b).app X ‚â´ (t.truncGTIsoTruncGE a b h).inv.app X = (t.truncGTœÄ a).app X :=
  congr_app (t.œÄ_truncGTIsoTruncGE_inv a b h) X

noncomputable def truncGEŒ¥LE (a b : ‚Ñ§) (h : a + 1 = b) :
    t.truncGE b ‚ü∂ t.truncLE a ‚ãô shiftFunctor C (1 : ‚Ñ§) :=
  t.truncGEŒ¥LT b ‚â´ whiskerRight (t.truncLEIsoTruncLT a b h).inv (shiftFunctor C (1 : ‚Ñ§))

@[simps!]
noncomputable def triangleLEGE (a b : ‚Ñ§) (h : a + 1 = b) : C ‚•§ Triangle C :=
  Triangle.functorMk (t.truncLEŒπ a) (t.truncGEœÄ b) (t.truncGEŒ¥LE a b h)

noncomputable def triangleLEGEIsoTriangleLTGE (a b : ‚Ñ§) (h : a + 1 = b) :
    t.triangleLEGE a b h ‚âÖ t.triangleLTGE b := by
  refine Triangle.functorIsoMk _ _ (t.truncLEIsoTruncLT a b h) (Iso.refl _) (Iso.refl _) ?_ ?_ ?_
  ¬∑ aesop_cat
  ¬∑ aesop_cat
  ¬∑ ext
    dsimp [truncGEŒ¥LE]
    simp only [assoc, id_comp, ‚Üê Functor.map_comp, Iso.inv_hom_id_app, Functor.map_id, comp_id]

lemma triangleLEGE_distinguished (a b : ‚Ñ§) (h : a + 1 = b) (X : C) :
    (t.triangleLEGE a b h).obj X ‚àà distTriang C :=
  isomorphic_distinguished _ (t.triangleLTGE_distinguished b X) _
    ((t.triangleLEGEIsoTriangleLTGE a b h).app X)

noncomputable def truncGTŒ¥LE (n : ‚Ñ§) :
    t.truncGT n ‚ü∂ t.truncLE n ‚ãô shiftFunctor C (1 : ‚Ñ§) :=
  (t.truncGTIsoTruncGE n (n+1) rfl).hom ‚â´ t.truncGEŒ¥LE n (n+1) (by linarith)

@[simps!]
noncomputable def triangleLEGT (n : ‚Ñ§) : C ‚•§ Triangle C :=
  Triangle.functorMk (t.truncLEŒπ n) (t.truncGTœÄ n) (t.truncGTŒ¥LE n)

noncomputable def triangleLEGTIsoTriangleLEGE (a b : ‚Ñ§) (h : a + 1 = b) :
    t.triangleLEGT a ‚âÖ t.triangleLEGE a b h := by
  refine Triangle.functorIsoMk _ _ (Iso.refl _) (Iso.refl _) (t.truncGTIsoTruncGE a b h) ?_ ?_ ?_
  ¬∑ aesop_cat
  ¬∑ aesop_cat
  ¬∑ ext
    dsimp [truncGTŒ¥LE]
    subst h
    simp only [Functor.map_id, comp_id]

lemma triangleLEGT_distinguished (n : ‚Ñ§) (X : C) :
    (t.triangleLEGT n).obj X ‚àà distTriang C :=
  isomorphic_distinguished _ (t.triangleLEGE_distinguished n (n+1) rfl X) _
    ((t.triangleLEGTIsoTriangleLEGE n (n+1) rfl).app X)

namespace TruncLTt

noncomputable def obj : ‚Ñ§t ‚Üí C ‚•§ C
  | some none => 0
  | some (some a) => t.truncLT a
  | none => ùü≠ C

noncomputable def map : ‚àÄ {x y : ‚Ñ§t}, (x ‚ü∂ y) ‚Üí (obj t x ‚ü∂ obj t y)
  | some none, some none => fun _ => ùüô _
  | some none, some (some b) => fun _ => 0
  | some none, none => fun _ => 0
  | some (some a), some none  => fun _ => 0
  | some (some a), some (some b) =>
      fun hab => t.natTransTruncLTOfLE a b (by simpa using (leOfHom hab))
  | some (some a), none => fun _ => t.truncLTŒπ a
  | none, some none  => fun _ => 0
  | none, some (some b) => fun _ => 0
  | none, none => fun _ => ùüô _

end TruncLTt

noncomputable def truncLTt : ‚Ñ§t ‚•§ C ‚•§ C where
  obj := TruncLTt.obj t
  map œÜ := TruncLTt.map t œÜ
  map_id := by
    rintro (_|_|_)
    ¬∑ rfl
    ¬∑ rfl
    ¬∑ dsimp [TruncLTt.map]
      rw [t.natTransTruncLTOfLE_refl]
      rfl
  map_comp {a b c} hab hbc := by
    replace hab := leOfHom hab
    replace hbc := leOfHom hbc
    obtain (_|_|_) := a <;> obtain (_|_|_) := b <;> obtain (_|_|_) := c
    all_goals simp (config := {failIfUnchanged := false}) at hbc hab <;>
      dsimp [TruncLTt.map] <;> simp

@[simp]
lemma truncLTt_obj_top : t.truncLTt.obj ‚ä§ = ùü≠ _ := rfl

@[simp]
lemma truncLTt_obj_bot : t.truncLTt.obj ‚ä• = 0 := rfl

@[simp]
lemma truncLTt_obj_mk (n : ‚Ñ§) : t.truncLTt.obj (‚Ñ§t.mk n) = t.truncLT n := rfl

@[simp]
lemma truncLTt_map_eq_truncLTŒπ (n : ‚Ñ§) :
    t.truncLTt.map (homOfLE (show ‚Ñ§t.mk n ‚â§ ‚ä§ by simp)) = t.truncLTŒπ n := rfl

namespace TruncGEt

noncomputable def obj : ‚Ñ§t ‚Üí C ‚•§ C
  | some none => ùü≠ C
  | some (some a) => t.truncGE a
  | none => 0

noncomputable def map : ‚àÄ {x y : ‚Ñ§t}, (x ‚ü∂ y) ‚Üí (obj t x ‚ü∂ obj t y)
  | some none, some none => fun _ => ùüô _
  | some none, some (some b) => fun _ => t.truncGEœÄ b
  | some none, none => fun _ => 0
  | some (some a), some none  => fun _ => 0
  | some (some a), some (some b) =>
      fun hab => t.natTransTruncGEOfLE a b (by simpa using (leOfHom hab))
  | some (some a), none => fun _ => 0
  | none, some none  => fun _ => 0
  | none, some (some b) => fun _ => 0
  | none, none => fun _ => ùüô _

end TruncGEt

noncomputable def truncGEt : ‚Ñ§t ‚•§ C ‚•§ C where
  obj := TruncGEt.obj t
  map œÜ := TruncGEt.map t œÜ
  map_id := by
    rintro (_|a|_)
    ¬∑ rfl
    ¬∑ rfl
    ¬∑ dsimp [TruncGEt.map]
      rw [natTransTruncGEOfLE_refl]
      rfl
  map_comp {a b c} hab hbc := by
    replace hab := leOfHom hab
    replace hbc := leOfHom hbc
    obtain (_|_|_) := a <;> obtain (_|_|_) := b <;> obtain (_|_|_) := c
    all_goals simp (config := {failIfUnchanged := false}) at hbc hab <;>
      dsimp [TruncGEt.map] <;> simp

@[simp]
lemma truncGEt_obj_bot :
    t.truncGEt.obj ‚ä• = ùü≠ _ := rfl

@[simp]
lemma truncGEt_obj_top :
    t.truncGEt.obj ‚ä§ = 0 := rfl

@[simp]
lemma truncGEt_obj_mk (n : ‚Ñ§) : t.truncGEt.obj (‚Ñ§t.mk n) = t.truncGE n := rfl

namespace TruncGEtŒ¥LTt

noncomputable def app : ‚àÄ (a : ‚Ñ§t), t.truncGEt.obj a ‚ü∂ t.truncLTt.obj a ‚ãô shiftFunctor C (1 : ‚Ñ§)
  | some none => 0
  | some (some a) => t.truncGEŒ¥LT a
  | none => 0

end TruncGEtŒ¥LTt

noncomputable def truncGEtŒ¥LTt :
    t.truncGEt ‚ü∂ t.truncLTt ‚ãô ((whiskeringRight C C C).obj (shiftFunctor C (1 : ‚Ñ§))) where
  app a := TruncGEtŒ¥LTt.app t a
  naturality {a b} hab := by
    replace hab := leOfHom hab
    obtain (_|_|a) := a
    ¬∑ apply IsZero.eq_of_src
      exact isZero_zero _
    all_goals obtain (_|_|b) := b <;> simp (config := {failIfUnchanged := false}) at hab <;>
      dsimp [TruncGEtŒ¥LTt.app, truncGEt, truncLTt, TruncGEt.map, TruncLTt.map] <;>
      simp [t.truncGEŒ¥LT_comp_whiskerRight_natTransTruncLTOfLE]

@[simp]
lemma truncGEtŒ¥LTt_mk (n : ‚Ñ§) :
    t.truncGEtŒ¥LTt.app (‚Ñ§t.mk n) = t.truncGEŒ¥LT n := rfl

@[simps]
noncomputable def abstractSpectralObject : SpectralObject.AbstractSpectralObject C ‚Ñ§t where
  truncLT := t.truncLTt
  truncGE := t.truncGEt
  truncLTObjTopIso' := Iso.refl _
  truncGEObjBotIso' := Iso.refl _
  truncGEŒ¥LT := t.truncGEtŒ¥LTt


namespace AbstractSpectralObject

open SpectralObject

@[simp]
lemma truncGELT_eq (g : Arrow ‚Ñ§t) :
  (abstractSpectralObject t).truncGELT.obj g =
    t.truncLTt.obj g.right ‚ãô t.truncGEt.obj g.left := rfl

lemma isZero_truncGE_obj_top_obj (X : C) :
    IsZero ((t.abstractSpectralObject.truncGE.obj ‚ä§).obj X) :=
  IsZero.obj (isZero_zero _) _

lemma isZero_truncLT_obj_bot_obj (X : C) :
    IsZero ((t.abstractSpectralObject.truncLT.obj ‚ä•).obj X) :=
  IsZero.obj (isZero_zero _) _

@[simp]
lemma truncLEŒπ_mk (n : ‚Ñ§) :
    t.abstractSpectralObject.truncLTŒπ (‚Ñ§t.mk n) = t.truncLTŒπ n :=
  comp_id _

@[simp]
lemma truncGEœÄ_mk (n : ‚Ñ§) :
    t.abstractSpectralObject.truncGEœÄ (‚Ñ§t.mk n) = t.truncGEœÄ n :=
  id_comp _

@[simp]
lemma truncGEŒ¥LT_mk (n : ‚Ñ§) :
    t.abstractSpectralObject.truncGEŒ¥LT.app (‚Ñ§t.mk n) =
      t.truncGEŒ¥LT n := rfl

noncomputable def triangleLTGEIso (n : ‚Ñ§) (X : C) :
    (t.abstractSpectralObject.triangleLTGE.obj (‚Ñ§t.mk n)).obj X ‚âÖ
      (t.triangleLTGE n).obj X :=
  Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _)

@[simp]
lemma truncLTObjTopIso : t.abstractSpectralObject.truncLTObjTopIso = Iso.refl _ := rfl

@[simp]
lemma truncGEObjBotIso : t.abstractSpectralObject.truncGEObjBotIso = Iso.refl _ := rfl

@[simp]
lemma truncLTŒπ_top_app (X : C) :
    (t.abstractSpectralObject.truncLTŒπ ‚ä§).app X = ùüô X := by
  dsimp [AbstractSpectralObject.truncLTŒπ]
  erw [Functor.map_id]
  simp only [truncLTt_obj_top, NatTrans.id_app, Functor.id_obj, comp_id]

@[simp]
lemma truncGEœÄ_bot_app (X : C) :
    (t.abstractSpectralObject.truncGEœÄ ‚ä•).app X = ùüô X := by
  dsimp [AbstractSpectralObject.truncGEœÄ]
  erw [Functor.map_id]
  simp only [truncGEt_obj_bot, NatTrans.id_app, Functor.id_obj, comp_id]

noncomputable def triangleLTGETopIso (X : C) :
  (t.abstractSpectralObject.triangleLTGE.obj ‚ä§).obj X ‚âÖ
    Pretriangulated.contractibleTriangle X := by
  refine Triangle.isoMk _ _ (((abstractSpectralObject t).truncLTObjTopIso).app X)
    (Iso.refl _) (isZero_truncLT_obj_bot_obj t X).isoZero ?_ ?_ ?_
  ¬∑ dsimp
    rw [truncLTŒπ_top_app]
  ¬∑ exact IsZero.eq_of_tgt (isZero_zero _) _ _
  ¬∑ refine IsZero.eq_of_src ?_ _ _
    exact IsZero.obj (isZero_zero _) _

noncomputable def triangleLTGEBotIso (X : C) :
  (t.abstractSpectralObject.triangleLTGE.obj ‚ä•).obj X ‚âÖ
    (Pretriangulated.contractibleTriangle X).invRotate := by
  refine Triangle.isoMk _ _ ((isZero_truncLT_obj_bot_obj t X).isoZero ‚â™‚â´
    (shiftFunctor C (-1 : ‚Ñ§)).mapZeroObject.symm)
    (((abstractSpectralObject t).truncLTObjTopIso).app X) (Iso.refl _) ?_ ?_ ?_
  ¬∑ apply IsZero.eq_of_src
    apply isZero_truncLT_obj_bot_obj
  ¬∑ dsimp
    rw [truncGEœÄ_bot_app]
  ¬∑ apply IsZero.eq_of_tgt _
    dsimp
    rw [IsZero.iff_id_eq_zero, ‚Üê Functor.map_id, ‚Üê Functor.map_id, id_zero,
      Functor.map_zero, Functor.map_zero]

lemma distinguished (n : ‚Ñ§t) (X : C) :
  (t.abstractSpectralObject.triangleLTGE.obj n).obj X ‚àà distTriang C := by
  obtain (_|_|n) := n
  ¬∑ exact isomorphic_distinguished _ (contractible_distinguished X) _
      (triangleLTGETopIso t X)
  ¬∑ exact isomorphic_distinguished _
      (inv_rot_of_distTriang _ (contractible_distinguished X)) _
      (triangleLTGEBotIso t X)
  ¬∑ exact isomorphic_distinguished _ (t.triangleLTGE_distinguished n X) _
      (triangleLTGEIso t n X)

end AbstractSpectralObject

lemma isZero_truncLE_obj_zero (n : ‚Ñ§) : IsZero ((t.truncLE n).obj 0) := by
  let Œ¥ := (t.truncGEŒ¥LE n (n+1) rfl).app 0
  have : IsIso Œ¥ := by
    have h := (t.triangleLEGE_distinguished n (n+1) rfl 0)
    exact (Triangle.isZero‚ÇÇ_iff_isIso‚ÇÉ _ h).1
      ((Triangle.isZero‚ÇÇ_iff _ (t.triangleLEGE_distinguished n (n+1) rfl 0)).2
        ‚ü®(isZero_zero C).eq_of_tgt _ _, (isZero_zero C).eq_of_src _ _‚ü©)
  have : t.IsLE ((t.truncLE n ‚ãô shiftFunctor C (1 : ‚Ñ§)).obj 0) (n-1) :=
    t.isLE_shift _ n 1 (n-1) (by linarith)
  have hŒ¥ := t.zero_of_isLE_of_isGE Œ¥ (n-1) (n+1) (by linarith)
    (t.isLE_of_iso (asIso Œ¥).symm _) (t.isGE_of_iso (asIso Œ¥) _)
  rw [IsZero.iff_id_eq_zero]
  apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
  rw [Functor.map_id, Functor.map_zero, ‚Üê cancel_epi Œ¥, comp_zero, hŒ¥, zero_comp]

lemma isZero_truncGE_obj_zero (n : ‚Ñ§) : IsZero ((t.truncGE n).obj 0) := by
  apply (Triangle.isZero‚ÇÉ_iff_isIso‚ÇÅ _ (t.triangleLEGE_distinguished (n-1) n (by linarith) 0)).2
  exact ‚ü®‚ü®0, (isZero_truncLE_obj_zero t (n-1)).eq_of_src _ _, (isZero_zero _).eq_of_src _ _‚ü©‚ü©

instance (n : ‚Ñ§) : t.IsLE (0 : C) n := t.isLE_of_iso (t.isZero_truncLE_obj_zero n).isoZero n
instance (n : ‚Ñ§) : t.IsGE (0 : C) n := t.isGE_of_iso (t.isZero_truncGE_obj_zero n).isoZero n

lemma isLE_of_isZero (X : C) (hX : IsZero X) (n : ‚Ñ§) : t.IsLE X n :=
  t.isLE_of_iso hX.isoZero.symm n

lemma isGE_of_isZero (X : C) (hX : IsZero X) (n : ‚Ñ§) : t.IsGE X n :=
  t.isGE_of_iso hX.isoZero.symm n

lemma isLE_iff_isIso_truncLEŒπ_app (n : ‚Ñ§) (X : C) :
    t.IsLE X n ‚Üî IsIso ((t.truncLEŒπ n).app X) := by
  constructor
  ¬∑ intro
    obtain ‚ü®e, he‚ü© := t.triangle_iso_exists n (n+1) (by linarith) _ _
      (contractible_distinguished X) (t.triangleLEGT_distinguished n X)
      (Iso.refl X) (by dsimp; infer_instance)
      (by dsimp; infer_instance) (by dsimp; infer_instance) (by dsimp; infer_instance)
    dsimp at he
    have : (truncLEŒπ t n).app X = e.inv.hom‚ÇÅ := by
      have he' : e.inv.hom‚ÇÇ = ùüô X := by
        rw [‚Üê cancel_mono e.hom.hom‚ÇÇ, ‚Üê comp_hom‚ÇÇ, e.inv_hom_id, he]
        dsimp
        rw [id_comp]
      simpa [he'] using e.inv.comm‚ÇÅ
    rw [this]
    infer_instance
  ¬∑ intro
    exact t.isLE_of_iso (asIso ((truncLEŒπ t n).app X)) n

lemma isLE_iff_isIso_truncLTŒπ_app (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsLE X n‚ÇÄ ‚Üî IsIso (((t.truncLTŒπ n‚ÇÅ)).app X) := by
  rw [isLE_iff_isIso_truncLEŒπ_app]
  subst hn‚ÇÅ
  rfl

lemma isGE_iff_isIso_truncGEœÄ_app (n : ‚Ñ§) (X : C) :
    t.IsGE X n ‚Üî IsIso ((t.truncGEœÄ n).app X) := by
  constructor
  ¬∑ intro h
    obtain ‚ü®e, he‚ü© := t.triangle_iso_exists (n-1) n (by linarith) _ _
      (inv_rot_of_distTriang _ (contractible_distinguished X))
      (t.triangleLTGE_distinguished n X) (Iso.refl X)
      (t.isLE_of_iso (shiftFunctor C (-1 : ‚Ñ§)).mapZeroObject.symm _)
      (by dsimp; infer_instance) (by dsimp; infer_instance) (by dsimp; infer_instance)
    dsimp at he
    have : (truncGEœÄ t n).app X = e.hom.hom‚ÇÉ := by
      have eq := e.hom.comm‚ÇÇ
      dsimp at eq
      rw [‚Üê cancel_epi e.hom.hom‚ÇÇ, ‚Üê eq, he]
    rw [this]
    infer_instance
  ¬∑ intro
    exact t.isGE_of_iso (asIso ((truncGEœÄ t n).app X)).symm n

instance (X : C) (n : ‚Ñ§) [t.IsLE X n] : IsIso ((t.truncLEŒπ n).app X) := by
  rw [‚Üê isLE_iff_isIso_truncLEŒπ_app ]
  infer_instance

instance (X : C) (n : ‚Ñ§) [t.IsGE X n] : IsIso ((t.truncGEœÄ n).app X) := by
  rw [‚Üê isGE_iff_isIso_truncGEœÄ_app ]
  infer_instance

lemma isLE_iff_isZero_truncGT_obj (n : ‚Ñ§) (X : C) :
    t.IsLE X n ‚Üî IsZero ((t.truncGT n).obj X) := by
  rw [t.isLE_iff_isIso_truncLEŒπ_app n X]
  exact (Triangle.isZero‚ÇÉ_iff_isIso‚ÇÅ _ (t.triangleLEGT_distinguished n X)).symm

lemma isGE_iff_isZero_truncLT_obj (n : ‚Ñ§) (X : C) :
    t.IsGE X n ‚Üî IsZero ((t.truncLT n).obj X) := by
  rw [t.isGE_iff_isIso_truncGEœÄ_app n X]
  exact (Triangle.isZero‚ÇÅ_iff_isIso‚ÇÇ _ (t.triangleLTGE_distinguished n X)).symm

lemma isLE_iff_isZero_truncGE_obj (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsLE X n‚ÇÄ ‚Üî IsZero ((t.truncGE n‚ÇÅ).obj X) := by
  rw [t.isLE_iff_isIso_truncLEŒπ_app n‚ÇÄ X]
  exact (Triangle.isZero‚ÇÉ_iff_isIso‚ÇÅ _ (t.triangleLEGE_distinguished n‚ÇÄ n‚ÇÅ h X)).symm

lemma isGE_iff_isZero_truncLE_obj (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsGE X n‚ÇÅ ‚Üî IsZero ((t.truncLE n‚ÇÄ).obj X) := by
  rw [t.isGE_iff_isIso_truncGEœÄ_app n‚ÇÅ X]
  exact (Triangle.isZero‚ÇÅ_iff_isIso‚ÇÇ _ (t.triangleLEGE_distinguished n‚ÇÄ n‚ÇÅ h X)).symm

lemma isZero_truncGE_obj_of_isLE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) [t.IsLE X n‚ÇÄ] :
    IsZero ((t.truncGE n‚ÇÅ).obj X) := by
  rw [‚Üê t.isLE_iff_isZero_truncGE_obj _ _ h X]
  infer_instance

lemma isZero_truncLE_obj_of_isGE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) [t.IsGE X n‚ÇÅ] :
    IsZero ((t.truncLE n‚ÇÄ).obj X) := by
  rw [‚Üê t.isGE_iff_isZero_truncLE_obj _ _ h X]
  infer_instance

lemma from_truncGE_obj_ext (n : ‚Ñ§) (X : C) {Y : C}
    (f‚ÇÅ f‚ÇÇ : (t.truncGE n).obj X ‚ü∂ Y) (h : (t.truncGEœÄ n).app X ‚â´ f‚ÇÅ = (t.truncGEœÄ n).app X ‚â´ f‚ÇÇ)
    [t.IsGE Y n] :
    f‚ÇÅ = f‚ÇÇ := by
  suffices ‚àÄ (f : (t.truncGE n).obj X ‚ü∂ Y) (_ : (t.truncGEœÄ n).app X ‚â´ f = 0), f = 0 by
    rw [‚Üê sub_eq_zero, this (f‚ÇÅ - f‚ÇÇ) (by rw [comp_sub, sub_eq_zero, h])]
  intro f hf
  obtain ‚ü®g, hg‚ü© := Triangle.yoneda_exact‚ÇÉ _
    (t.triangleLTGE_distinguished n X) f hf
  have hg' := t.zero_of_isLE_of_isGE g (n-2) n (by linarith)
    (by dsimp; exact t.isLE_shift _ (n-1) 1 (n-2) (by linarith)) (by infer_instance)
  rw [hg, hg', comp_zero]

lemma to_truncLE_obj_ext (n : ‚Ñ§) (Y : C) {X : C}
    (f‚ÇÅ f‚ÇÇ : Y ‚ü∂ (t.truncLE n).obj X) (h : f‚ÇÅ ‚â´ (t.truncLEŒπ n).app X = f‚ÇÇ ‚â´ (t.truncLEŒπ n).app X)
    [t.IsLE Y n] :
    f‚ÇÅ = f‚ÇÇ := by
  suffices ‚àÄ (f : Y ‚ü∂ (t.truncLE n).obj X) (_ : f ‚â´ (t.truncLEŒπ n).app X = 0), f = 0 by
    rw [‚Üê sub_eq_zero, this (f‚ÇÅ - f‚ÇÇ) (by rw [sub_comp, sub_eq_zero, h])]
  intro f hf
  obtain ‚ü®g, hg‚ü© := Triangle.coyoneda_exact‚ÇÇ _ (inv_rot_of_distTriang _
    (t.triangleLEGT_distinguished n X)) f hf
  have hg' := t.zero_of_isLE_of_isGE g n (n+2) (by linarith) (by infer_instance)
    (by dsimp; apply (t.isGE_shift _ (n+1) (-1) (n+2) (by linarith)))
  rw [hg, hg', zero_comp]

lemma to_truncLT_obj_ext (n : ‚Ñ§) (Y : C) {X : C}
    (f‚ÇÅ f‚ÇÇ : Y ‚ü∂ (t.truncLT n).obj X) (h : f‚ÇÅ ‚â´ (t.truncLTŒπ n).app X = f‚ÇÇ ‚â´ (t.truncLTŒπ n).app X)
    [t.IsLE Y (n-1)] :
    f‚ÇÅ = f‚ÇÇ := by
  rw [‚Üê cancel_mono ((t.truncLEIsoTruncLT (n-1) n (by linarith)).inv.app X)]
  apply to_truncLE_obj_ext
  simpa only [Functor.id_obj, assoc, truncLEIsoTruncLT_inv_Œπ_app] using h

/-- liftTruncLE' -/
lemma liftTruncLE' {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsLE X n] :
    ‚àÉ (f' : X ‚ü∂ (t.truncLE n).obj Y), f = f' ‚â´ (t.truncLEŒπ n).app Y :=
  Triangle.coyoneda_exact‚ÇÇ _ (t.triangleLEGT_distinguished n Y) f
    (t.zero_of_isLE_of_isGE  _ n (n+1) (by linarith) inferInstance (by dsimp; infer_instance))

noncomputable def liftTruncLE {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsLE X n] :
    X ‚ü∂ (t.truncLE n).obj Y := (t.liftTruncLE' f n).choose

@[reassoc (attr := simp)]
lemma liftTruncLE_Œπ {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsLE X n] :
    t.liftTruncLE f n ‚â´ (t.truncLEŒπ n).app Y = f :=
  (t.liftTruncLE' f n).choose_spec.symm

noncomputable def liftTruncLT {X Y : C} (f : X ‚ü∂ Y) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) [t.IsLE X n‚ÇÄ] :
    X ‚ü∂ (t.truncLT n‚ÇÅ).obj Y :=
  t.liftTruncLE f n‚ÇÄ ‚â´ (t.truncLEIsoTruncLT _ _ h).hom.app Y

@[reassoc (attr := simp)]
lemma liftTruncLT_Œπ {X Y : C} (f : X ‚ü∂ Y) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) [t.IsLE X n‚ÇÄ] :
    t.liftTruncLT f n‚ÇÄ n‚ÇÅ h ‚â´ (t.truncLTŒπ n‚ÇÅ).app Y = f := by
  dsimp only [liftTruncLT]
  simp only [Functor.id_obj, assoc, truncLEIsoTruncLT_hom_Œπ_app, liftTruncLE_Œπ]

/-- descTruncGE' -/
lemma descTruncGE' {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsGE Y n] :
  ‚àÉ (f' : (t.truncGE n).obj X ‚ü∂ Y), f = (t.truncGEœÄ n).app X ‚â´ f' :=
  Triangle.yoneda_exact‚ÇÇ _ (t.triangleLTGE_distinguished n X) f
    (t.zero_of_isLE_of_isGE _ (n-1)  n (by linarith) (by dsimp; infer_instance) inferInstance)

noncomputable def descTruncGE {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsGE Y n] :
    (t.truncGE n).obj X ‚ü∂ Y := (t.descTruncGE' f n).choose

@[reassoc (attr := simp)]
lemma œÄ_descTruncGE {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsGE Y n] :
    (t.truncGEœÄ n).app X ‚â´ t.descTruncGE f n  = f :=
  (t.descTruncGE' f n).choose_spec.symm

lemma isLE_iff_orthogonal (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsLE X n‚ÇÄ ‚Üî ‚àÄ (Y : C) (f : X ‚ü∂ Y) (_ : t.IsGE Y n‚ÇÅ), f = 0 := by
  constructor
  ¬∑ intro _ Y f _
    exact t.zero f n‚ÇÄ n‚ÇÅ (by linarith)
  ¬∑ intro hX
    rw [isLE_iff_isZero_truncGE_obj t n‚ÇÄ n‚ÇÅ h, IsZero.iff_id_eq_zero]
    apply t.from_truncGE_obj_ext n‚ÇÅ
    rw [comp_zero, comp_id]
    exact hX _ _ inferInstance

lemma isGE_iff_orthogonal (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsGE X n‚ÇÅ ‚Üî ‚àÄ (Y : C) (f : Y ‚ü∂ X) (_ : t.IsLE Y n‚ÇÄ), f = 0 := by
  constructor
  ¬∑ intro _ Y f _
    exact t.zero f n‚ÇÄ n‚ÇÅ (by linarith)
  ¬∑ intro hX
    rw [isGE_iff_isZero_truncLE_obj t n‚ÇÄ n‚ÇÅ h, IsZero.iff_id_eq_zero]
    apply t.to_truncLE_obj_ext n‚ÇÄ
    rw [zero_comp, id_comp]
    exact hX _ _ inferInstance

lemma isLE‚ÇÇ (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) (h‚ÇÅ : t.IsLE T.obj‚ÇÅ n)
    (h‚ÇÉ : t.IsLE T.obj‚ÇÉ n) : t.IsLE T.obj‚ÇÇ n := by
  rw [t.isLE_iff_orthogonal n (n+1) rfl]
  intro Y f hY
  obtain ‚ü®f', hf'‚ü© := Triangle.yoneda_exact‚ÇÇ _ hT f
    (t.zero _ n (n+1) (by linarith) )
  rw [hf', t.zero f' n (n+1) (by linarith), comp_zero]

lemma isGE‚ÇÇ (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) (h‚ÇÅ : t.IsGE T.obj‚ÇÅ n)
    (h‚ÇÉ : t.IsGE T.obj‚ÇÉ n) : t.IsGE T.obj‚ÇÇ n := by
  rw [t.isGE_iff_orthogonal (n-1) n (by linarith)]
  intro Y f hY
  obtain ‚ü®f', hf'‚ü© := Triangle.coyoneda_exact‚ÇÇ _ hT f (t.zero _ (n-1) n (by linarith))
  rw [hf', t.zero f' (n-1) n (by linarith), zero_comp]

instance : t.minus.IsTriangulated where
  exists_zero := ‚ü®0, isZero_zero C, 0, inferInstance‚ü©
  toIsTriangulatedClosed‚ÇÇ := .mk' (fun T hT ‚Ü¶ by
    rintro ‚ü®i‚ÇÅ, hi‚ÇÅ‚ü© ‚ü®i‚ÇÉ, hi‚ÇÉ‚ü©
    exact ‚ü®max i‚ÇÅ i‚ÇÉ, t.isLE‚ÇÇ T hT _ (t.isLE_of_LE _ _ _ (le_max_left i‚ÇÅ i‚ÇÉ))
      (t.isLE_of_LE _ _ _ (le_max_right i‚ÇÅ i‚ÇÉ))‚ü©)

instance : t.plus.IsTriangulated where
  exists_zero := ‚ü®0, isZero_zero C, 0, inferInstance‚ü©
  toIsTriangulatedClosed‚ÇÇ := .mk' (fun T hT ‚Ü¶ by
    rintro ‚ü®i‚ÇÅ, hi‚ÇÅ‚ü© ‚ü®i‚ÇÉ, hi‚ÇÉ‚ü©
    exact ‚ü®min i‚ÇÅ i‚ÇÉ, t.isGE‚ÇÇ T hT _ (t.isGE_of_GE _ _ _ (min_le_left i‚ÇÅ i‚ÇÉ))
      (t.isGE_of_GE _ _ _ (min_le_right i‚ÇÅ i‚ÇÉ))‚ü©)

instance : t.bounded.IsTriangulated := by
  dsimp [bounded]
  infer_instance

noncomputable def natTransTruncLEOfLE (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.truncLE a ‚ü∂ t.truncLE b :=
  t.natTransTruncLTOfLE (a+1) (b+1) (by linarith)

@[reassoc (attr := simp)]
lemma natTransTruncLEOfLE_Œπ_app (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ ‚â§ n‚ÇÅ) (X : C) :
    (t.natTransTruncLEOfLE n‚ÇÄ n‚ÇÅ h).app X ‚â´ (t.truncLEŒπ n‚ÇÅ).app X =
      (t.truncLEŒπ n‚ÇÄ).app X :=
  t.natTransTruncLTOfLE_Œπ_app _ _ _ _

@[reassoc (attr := simp)]
lemma natTransTruncLEOfLE_Œπ (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.natTransTruncLEOfLE a b h ‚â´ t.truncLEŒπ b = t.truncLEŒπ a := by aesop_cat

@[simp]
lemma natTransTruncLEOfLE_refl (a : ‚Ñ§) :
    t.natTransTruncLEOfLE a a (by rfl) = ùüô _ :=
  t.natTransTruncLTOfLE_refl _

@[simp]
lemma natTransTruncLEOfLE_trans (a b c : ‚Ñ§) (hab : a ‚â§ b) (hbc : b ‚â§ c) :
    t.natTransTruncLEOfLE a b hab ‚â´ t.natTransTruncLEOfLE b c hbc =
      t.natTransTruncLEOfLE a c (hab.trans hbc) :=
  t.natTransTruncLTOfLE_trans _ _ _ _ _

lemma natTransTruncLEOfLE_refl_app (a : ‚Ñ§) (X : C) :
    (t.natTransTruncLEOfLE a a (by rfl)).app X = ùüô _ :=
  congr_app (t.natTransTruncLEOfLE_refl a) X

@[reassoc (attr := simp)]
lemma natTransTruncLEOfLE_trans_app (a b c : ‚Ñ§) (hab : a ‚â§ b) (hbc : b ‚â§ c) (X : C) :
    (t.natTransTruncLEOfLE a b hab).app X ‚â´ (t.natTransTruncLEOfLE b c hbc).app X =
      (t.natTransTruncLEOfLE a c (hab.trans hbc)).app X :=
  congr_app (t.natTransTruncLEOfLE_trans a b c hab hbc) X

lemma isIso_truncLTmap_iff {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) :
    IsIso ((t.truncLT n).map f) ‚Üî
      ‚àÉ (Z : C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ ((t.truncLT n).obj X)‚ü¶1‚üß)
        (_ : Triangle.mk ((t.truncLTŒπ n).app X ‚â´ f) g h ‚àà distTriang _), t.IsGE Z n := by
  constructor
  ¬∑ intro hf
    refine ‚ü®(t.truncGE n).obj Y, (t.truncGEœÄ n).app Y,
      (t.truncGEŒ¥LT n).app Y ‚â´ (inv ((t.truncLT n).map f))‚ü¶1‚üß',
      isomorphic_distinguished _ (t.triangleLTGE_distinguished n Y) _ ?_, inferInstance‚ü©
    exact Triangle.isoMk _ _ (asIso ((t.truncLT n).map f)) (Iso.refl _) (Iso.refl _)
  ¬∑ rintro ‚ü®Z, g, h, mem, _‚ü©
    obtain ‚ü®e, he‚ü© := t.triangle_iso_exists (n-1) n (by linarith)  _ _ mem
      (t.triangleLTGE_distinguished n Y) (Iso.refl _)
      (by dsimp; infer_instance) (by dsimp; infer_instance)
      (by dsimp; infer_instance) (by dsimp; infer_instance)
    suffices ((t.truncLT n).map f) = e.hom.hom‚ÇÅ by
      rw [this]
      infer_instance
    apply to_truncLT_obj_ext
    refine Eq.trans ?_ e.hom.comm‚ÇÅ
    aesop_cat

lemma isIso_truncLEmap_iff {X Y : C} (f : X ‚ü∂ Y) (a b : ‚Ñ§) (h : a + 1 = b) :
    IsIso ((t.truncLE a).map f) ‚Üî
      ‚àÉ (Z : C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ ((t.truncLE a).obj X)‚ü¶1‚üß)
        (_ : Triangle.mk ((t.truncLEŒπ a).app X ‚â´ f) g h ‚àà distTriang _), t.IsGE Z b := by
  subst h
  apply isIso_truncLTmap_iff

lemma isIso_truncGEmap_iff {Y Z : C} (g : Y ‚ü∂ Z) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) :
    IsIso ((t.truncGE n‚ÇÅ).map g) ‚Üî
      ‚àÉ (X : C) (f : X ‚ü∂ Y) (h : ((t.truncGE n‚ÇÅ).obj Z) ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß)
        (_ : Triangle.mk f (g ‚â´ (t.truncGEœÄ n‚ÇÅ).app Z) h ‚àà distTriang _), t.IsLE X n‚ÇÄ := by
  constructor
  ¬∑ intro hf
    refine ‚ü®(t.truncLE n‚ÇÄ).obj Y, (t.truncLEŒπ n‚ÇÄ).app Y,
      inv ((t.truncGE n‚ÇÅ).map g) ‚â´ (t.truncGEŒ¥LE n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app Y,
      isomorphic_distinguished _ (t.triangleLEGE_distinguished n‚ÇÄ n‚ÇÅ hn‚ÇÅ Y) _ ?_,
      inferInstance‚ü©
    refine Iso.symm (Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _)
      (asIso ((t.truncGE n‚ÇÅ).map g)) ?_ ?_ ?_)
    ¬∑ aesop_cat
    ¬∑ dsimp
      rw [id_comp]
      exact ((t.truncGEœÄ n‚ÇÅ).naturality g).symm
    ¬∑ aesop_cat
  ¬∑ rintro ‚ü®X, f, h, mem, _‚ü©
    obtain ‚ü®e, he‚ü© := t.triangle_iso_exists n‚ÇÄ n‚ÇÅ (by linarith) _ _
      (t.triangleLEGE_distinguished n‚ÇÄ n‚ÇÅ hn‚ÇÅ Y) mem (Iso.refl _)
      (by dsimp; infer_instance) (by dsimp; infer_instance)
      (by dsimp; infer_instance) (by dsimp; infer_instance)
    suffices ((t.truncGE n‚ÇÅ).map g) = e.hom.hom‚ÇÉ by
      rw [this]
      infer_instance
    apply from_truncGE_obj_ext
    refine Eq.trans ?_ e.hom.comm‚ÇÇ.symm
    dsimp at he ‚ä¢
    rw [he, id_comp]
    exact ((t.truncGEœÄ n‚ÇÅ).naturality g).symm

lemma isIso_truncGTmap_iff {Y Z : C} (g : Y ‚ü∂ Z) (n : ‚Ñ§) :
    IsIso ((t.truncGT n).map g) ‚Üî
      ‚àÉ (X : C) (f : X ‚ü∂ Y) (h : ((t.truncGT n).obj Z) ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß)
        (_ : Triangle.mk f (g ‚â´ (t.truncGTœÄ n).app Z) h ‚àà distTriang _), t.IsLE X n :=
  t.isIso_truncGEmap_iff g n (n+1) rfl

instance (X : C) (a b : ‚Ñ§) [t.IsLE X b] : t.IsLE ((t.truncLE a).obj X) b := by
  by_cases h : a ‚â§ b
  ¬∑ exact t.isLE_of_LE _ _ _ h
  ¬∑ simp only [not_le] at h
    have : t.IsLE X a := t.isLE_of_LE X b a (by linarith)
    apply t.isLE_of_iso (show X ‚âÖ _ from (asIso ((t.truncLEŒπ a).app X)).symm)

instance (X : C) (a b : ‚Ñ§) [t.IsLE X b] : t.IsLE ((t.truncLT a).obj X) b :=
  t.isLE_of_iso ((t.truncLEIsoTruncLT (a-1) a (by linarith)).app X) b

instance (X : C) (a b : ‚Ñ§) [t.IsGE X a] : t.IsGE ((t.truncGE b).obj X) a := by
  by_cases h : a ‚â§ b
  ¬∑ exact t.isGE_of_GE _ _ _ h
  ¬∑ simp only [not_le] at h
    have : t.IsGE X b := t.isGE_of_GE X b a (by linarith)
    apply t.isGE_of_iso (show X ‚âÖ _ from asIso ((t.truncGEœÄ b).app X))

instance (X : C) (a b : ‚Ñ§) [t.IsGE X a] : t.IsGE ((t.truncGT b).obj X) a :=
  t.isGE_of_iso ((t.truncGTIsoTruncGE b (b+1) (by linarith)).symm.app X) a

noncomputable def truncGELT (a b : ‚Ñ§) : C ‚•§ C := t.truncLT b ‚ãô t.truncGE a

noncomputable def truncLTGE (a b : ‚Ñ§) : C ‚•§ C := t.truncGE a ‚ãô t.truncLT b

noncomputable def truncLEGE (a b : ‚Ñ§) : C ‚•§ C := t.truncGE a ‚ãô t.truncLE b

noncomputable def truncGELE (a b : ‚Ñ§) : C ‚•§ C := t.truncLE b ‚ãô t.truncGE a

noncomputable def truncGELEIsoTruncGELT (a b b' : ‚Ñ§) (hb' : b + 1 = b') :
    t.truncGELE a b ‚âÖ t.truncGELT a b' :=
  isoWhiskerRight (t.truncLEIsoTruncLT b b' hb') _

/- Now, we need the octahedron axiom -/

variable [IsTriangulated C]

lemma isIso‚ÇÅ_truncLE_map_of_GE (T : Triangle C) (hT : T ‚àà distTriang C)
    (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (h‚ÇÉ : t.IsGE T.obj‚ÇÉ n‚ÇÅ) :
    IsIso ((t.truncLE n‚ÇÄ).map T.mor‚ÇÅ) := by
  rw [isIso_truncLEmap_iff _ _ _ _ h]
  obtain ‚ü®Z, g, k, mem‚ü© := distinguished_cocone_triangle ((t.truncLEŒπ n‚ÇÄ).app T.obj‚ÇÅ ‚â´ T.mor‚ÇÅ)
  refine ‚ü®_, _, _, mem, ?_‚ü©
  have H := someOctahedron rfl (t.triangleLEGE_distinguished n‚ÇÄ n‚ÇÅ h T.obj‚ÇÅ) hT mem
  exact t.isGE‚ÇÇ _ H.mem n‚ÇÅ (by dsimp; infer_instance) (by dsimp; infer_instance)

lemma isIso‚ÇÅ_truncLT_map_of_GE (T : Triangle C) (hT : T ‚àà distTriang C)
    (n : ‚Ñ§) (h‚ÇÉ : t.IsGE T.obj‚ÇÉ n) : IsIso ((t.truncLT n).map T.mor‚ÇÅ) := by
  rw [‚Üê NatIso.isIso_map_iff (t.truncLEIsoTruncLT (n-1) n (by linarith))]
  exact t.isIso‚ÇÅ_truncLE_map_of_GE T hT (n-1) n (by linarith) h‚ÇÉ

lemma isIso‚ÇÇ_truncGE_map_of_LE (T : Triangle C) (hT : T ‚àà distTriang C)
    (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (h‚ÇÅ : t.IsLE T.obj‚ÇÅ n‚ÇÄ) :
    IsIso ((t.truncGE n‚ÇÅ).map T.mor‚ÇÇ) := by
  rw [isIso_truncGEmap_iff _ _ _ _ h]
  obtain ‚ü®X, f, k, mem‚ü© := distinguished_cocone_triangle‚ÇÅ (T.mor‚ÇÇ ‚â´ (t.truncGEœÄ n‚ÇÅ).app T.obj‚ÇÉ)
  refine ‚ü®_, _, _, mem, ?_‚ü©
  have H := someOctahedron rfl (rot_of_distTriang _ hT)
    (rot_of_distTriang _ (t.triangleLEGE_distinguished n‚ÇÄ n‚ÇÅ h T.obj‚ÇÉ))
    (rot_of_distTriang _ mem)
  have : t.IsLE (X‚ü¶(1 : ‚Ñ§)‚üß) (n‚ÇÄ-1) := t.isLE‚ÇÇ _ H.mem (n‚ÇÄ-1)
    (t.isLE_shift T.obj‚ÇÅ n‚ÇÄ 1 (n‚ÇÄ-1) (by linarith))
    (t.isLE_shift ((t.truncLE n‚ÇÄ).obj T.obj‚ÇÉ) n‚ÇÄ 1 (n‚ÇÄ-1) (by linarith))
  exact t.isLE_of_shift X n‚ÇÄ 1 (n‚ÇÄ-1) (by linarith)

instance (X : C) (a b : ‚Ñ§) [t.IsGE X a] : t.IsGE ((t.truncLE b).obj X) a := by
  rw [t.isGE_iff_isZero_truncLE_obj (a-1) a (by linarith)]
  have := t.isIso‚ÇÅ_truncLE_map_of_GE _ ((t.triangleLEGE_distinguished b (b+1) rfl X))
    (a-1) a (by linarith) (by dsimp; infer_instance)
  dsimp at this
  exact IsZero.of_iso (t.isZero_truncLE_obj_of_isGE (a-1) a (by linarith) X)
    (asIso ((t.truncLE (a - 1)).map ((t.truncLEŒπ b).app X)))

instance (X : C) (a b : ‚Ñ§) [t.IsGE X a] : t.IsGE ((t.truncLT b).obj X) a :=
  t.isGE_of_iso ((t.truncLEIsoTruncLT (b-1) b (by linarith)).app X) a

instance (X : C) (a b : ‚Ñ§) [t.IsLE X b] : t.IsLE ((t.truncGE a).obj X) b := by
  rw [t.isLE_iff_isZero_truncGE_obj b (b+1) rfl]
  have := t.isIso‚ÇÇ_truncGE_map_of_LE _ ((t.triangleLEGE_distinguished (a-1) a (by linarith) X))
    b (b+1) rfl (by dsimp; infer_instance)
  dsimp at this
  exact IsZero.of_iso (t.isZero_truncGE_obj_of_isLE b (b+1) rfl X)
    (asIso ((t.truncGE (b+1)).map ((t.truncGEœÄ  a).app X))).symm

instance (X : C) (a b : ‚Ñ§) : t.IsGE ((t.truncGELE a b).obj X) a := by
  dsimp [truncGELE]
  infer_instance

instance (X : C) (a b : ‚Ñ§) : t.IsLE ((t.truncGELE a b).obj X) b := by
  dsimp [truncGELE]
  infer_instance

instance (X : C) (a b : ‚Ñ§) : t.IsGE ((t.truncGELT a b).obj X) a := by
  dsimp [truncGELT]
  infer_instance

instance (X : C) (a b : ‚Ñ§) : t.IsLE ((t.truncGELT a b).obj X) (b-1) := by
  dsimp [truncGELT]
  infer_instance

instance (X : C) (a b : ‚Ñ§) : t.IsGE ((t.truncLTGE a b).obj X) a := by
  dsimp [truncLTGE]
  infer_instance

instance (X : C) (a b : ‚Ñ§) : t.IsLE ((t.truncLTGE a b).obj X) (b-1) := by
  dsimp [truncLTGE]
  infer_instance

instance (a b : ‚Ñ§) : (t.truncGELT a b).Additive := by
  dsimp only [truncGELT]
  infer_instance

instance (a b : ‚Ñ§) : (t.truncGELE a b).Additive := by
  dsimp only [truncGELE]
  infer_instance

instance (i : ‚Ñ§t) : (t.truncGEt.obj i).Additive := by
  obtain (rfl|‚ü®i, rfl‚ü©|rfl) := i.three_cases
  ¬∑ dsimp
    infer_instance
  ¬∑ dsimp
    infer_instance
  ¬∑ constructor
    aesop_cat

instance (i : ‚Ñ§t) : (t.truncLTt.obj i).Additive := by
  obtain (rfl|‚ü®i, rfl‚ü©|rfl) := i.three_cases
  ¬∑ constructor
    dsimp
    aesop_cat
  ¬∑ dsimp
    infer_instance
  ¬∑ dsimp
    infer_instance

omit [IsTriangulated C] in
lemma isZero_truncLTt_obj_obj (X : C) (n : ‚Ñ§) [t.IsGE X n] (j : ‚Ñ§t) (hj : j ‚â§ ‚Ñ§t.mk n) :
    IsZero ((t.truncLTt.obj j).obj X) := by
  obtain (rfl|‚ü®j, rfl‚ü©|rfl) := j.three_cases
  ¬∑ apply Functor.zero_obj
  ¬∑ simp at hj
    dsimp
    rw [‚Üê t.isGE_iff_isZero_truncLT_obj]
    exact t.isGE_of_GE  _ _ _ hj
  ¬∑ simp at hj

omit [IsTriangulated C] in
lemma isZero_truncGEt_obj_obj (X : C) (n : ‚Ñ§) [t.IsLE X n] (j : ‚Ñ§t) (hj : ‚Ñ§t.mk n < j) :
    IsZero ((t.truncGEt.obj j).obj X) := by
  obtain (rfl|‚ü®j, rfl‚ü©|rfl) := j.three_cases
  ¬∑ simp at hj
  ¬∑ simp at hj
    dsimp
    rw [‚Üê t.isLE_iff_isZero_truncGE_obj (j - 1) j (by simp)]
    exact t.isLE_of_LE X n (j - 1) (by linarith)
  ¬∑ apply Functor.zero_obj

omit [IsTriangulated C] in
lemma truncGEt_obj_obj_isGE (n : ‚Ñ§) (i : ‚Ñ§t) (h : ‚Ñ§t.mk n ‚â§ i) (X : C) :
    t.IsGE ((t.truncGEt.obj i).obj X) n := by
  obtain (rfl|‚ü®i, rfl‚ü©|rfl) := i.three_cases
  ¬∑ simp at h
  ¬∑ simp at h
    dsimp
    exact t.isGE_of_GE  _ _ _ h
  ¬∑ dsimp
    apply t.isGE_of_isZero
    apply Functor.zero_obj

omit [IsTriangulated C] in
lemma truncLTt_obj_obj_isLE (n : ‚Ñ§) (i : ‚Ñ§t) (h : i ‚â§ ‚Ñ§t.mk (n + 1)) (X : C) :
    t.IsLE (((t.truncLTt.obj i)).obj X) n := by
  obtain (rfl|‚ü®i, rfl‚ü©|rfl) := i.three_cases
  ¬∑ dsimp
    apply t.isLE_of_isZero
    apply Functor.zero_obj
  ¬∑ simp at h
    dsimp
    exact t.isLE_of_LE _ (i - 1) n (by linarith)
  ¬∑ simp at h

/-- homology'' -/
noncomputable def homology'' (n : ‚Ñ§) : C ‚•§ C := t.truncGELE n n ‚ãô shiftFunctor C n

instance (X : C) (n : ‚Ñ§) : t.IsLE ((t.homology'' n).obj X) 0 :=
  t.isLE_shift _ n n 0 (add_zero n)

instance (X : C) (n : ‚Ñ§) : t.IsGE ((t.homology'' n).obj X) 0 :=
  t.isGE_shift _ n n 0 (add_zero n)

lemma homology''_obj_mem_heart (n : ‚Ñ§) (X : C) : t.heart ((t.homology'' n).obj X) := by
  rw [mem_heart_iff]
  exact ‚ü®inferInstance, inferInstance‚ü©

/-
noncomputable def homology' (n : ‚Ñ§) : C ‚•§ t.Heart' :=
  FullSubcategory.lift _ (t.truncGELE n n ‚ãô shiftFunctor C n) (t.homology''_obj_mem_heart n)

noncomputable def homologyCompŒπHeart' (n : ‚Ñ§) :
  t.homology' n ‚ãô t.ŒπHeart' ‚âÖ t.truncGELE n n ‚ãô shiftFunctor C n :=
    FullSubcategory.lift_comp_inclusion _ _ _

noncomputable def homology‚ÇÄCompŒπHeart'IsoTruncGELE : t.homology' 0 ‚ãô t.ŒπHeart' ‚âÖ t.truncGELE 0 0 :=
  t.homologyCompŒπHeart' 0 ‚â™‚â´ isoWhiskerLeft (t.truncGELE 0 0) (shiftFunctorZero C ‚Ñ§)

noncomputable def homologyCompŒπHeartDegreeIsoHomology' (q : ‚Ñ§) :
    t.homology' q ‚ãô t.ŒπHeartDegree q ‚âÖ t.truncGELE q q :=
  (Functor.associator _ _ _).symm ‚â™‚â´
    isoWhiskerRight (t.homologyCompŒπHeart' q) _ ‚â™‚â´ Functor.associator _ _ _ ‚â™‚â´
    isoWhiskerLeft _  (shiftFunctorCompIsoId C q (-q) (add_right_neg q)) ‚â™‚â´
    Functor.rightUnitor _-/

lemma isIso_truncGE_map_truncGEœÄ_app (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    IsIso ((t.truncGE b).map ((t.truncGEœÄ a).app X)) :=
  t.isIso‚ÇÇ_truncGE_map_of_LE _
    (t.triangleLEGE_distinguished (a-1) a (by linarith) X) (b-1) b (by linarith)
      (t.isLE_of_LE ((t.truncLE (a-1)).obj X) (a-1) (b-1) (by linarith))

lemma isIso_truncLT_map_truncLTŒπ_app (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    IsIso ((t.truncLT a).map ((t.truncLTŒπ b).app X)) :=
  t.isIso‚ÇÅ_truncLT_map_of_GE _ (t.triangleLTGE_distinguished b X) a
    (t.isGE_of_GE ((t.truncGE b).obj X) a b (by linarith))

lemma isIso_truncLE_map_truncLEŒπ_app (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    IsIso ((t.truncLE a).map ((t.truncLEŒπ b).app X)) := by
  apply isIso_truncLT_map_truncLTŒπ_app
  linarith

instance (X : C) (n : ‚Ñ§) : IsIso ((t.truncLE n).map ((t.truncLEŒπ n).app X)) := by
  apply t.isIso_truncLE_map_truncLEŒπ_app
  rfl

instance (X : C) (n : ‚Ñ§) : IsIso ((t.truncGE n).map ((t.truncGEœÄ n).app X)) := by
  apply t.isIso_truncGE_map_truncGEœÄ_app
  rfl

lemma isIso_truncGEt_obj_map_truncGEœÄ_app (a b : ‚Ñ§t) (h : a ‚â§ b) (X : C) :
    IsIso ((t.truncGEt.obj b).map ((t.abstractSpectralObject.truncGEœÄ a).app X)) := by
  obtain (rfl|‚ü®b, rfl‚ü©|rfl) := b.three_cases
  ¬∑ simp only [‚Ñ§t.le_bot_iff] at h
    subst h
    dsimp
    simp only [AbstractSpectralObject.truncGEœÄ_bot_app]
    infer_instance
  ¬∑ obtain (rfl|‚ü®a, rfl‚ü©|rfl) := a.three_cases
    ¬∑ dsimp
      infer_instance
    ¬∑ simp only [‚Ñ§t.mk_le_mk_iff] at h
      dsimp
      simp only [AbstractSpectralObject.truncGEœÄ_mk]
      exact t.isIso_truncGE_map_truncGEœÄ_app a b h X
    ¬∑ simp at h
  ¬∑ refine ‚ü®0, IsZero.eq_of_src ?_ _ _, IsZero.eq_of_src ?_ _ _‚ü©
    all_goals
      simp only [truncGEt_obj_top, Functor.zero_obj]

lemma isIso_truncLTt_obj_map_truncLTœÄ_app (a b : ‚Ñ§t) (h : a ‚â§ b) (X : C) :
    IsIso ((t.truncLTt.obj a).map ((t.abstractSpectralObject.truncLTŒπ b).app X)) := by
  obtain (rfl|‚ü®a, rfl‚ü©|rfl) := a.three_cases
  ¬∑ refine ‚ü®0, IsZero.eq_of_src ?_ _ _, IsZero.eq_of_src ?_ _ _‚ü©
    all_goals
      simp only [truncLTt_obj_bot, Functor.zero_obj]
  ¬∑ obtain (rfl|‚ü®b, rfl‚ü©|rfl) := b.three_cases
    ¬∑ simp at h
    ¬∑ simp only [‚Ñ§t.mk_le_mk_iff] at h
      dsimp
      simp only [AbstractSpectralObject.truncLEŒπ_mk]
      exact t.isIso_truncLT_map_truncLTŒπ_app a b h X
    ¬∑ dsimp
      infer_instance
  ¬∑ simp only [‚Ñ§t.top_le_iff] at h
    subst h
    dsimp
    simp only [AbstractSpectralObject.truncLTŒπ_top_app]
    infer_instance

instance (D : Arrow ‚Ñ§t) (X : C) :
  IsIso ((t.abstractSpectralObject.truncGEToTruncGEGE.app D).app X) :=
    t.isIso_truncGEt_obj_map_truncGEœÄ_app _ _ (leOfHom D.hom) X

instance (D : Arrow ‚Ñ§t) (X : C) :
  IsIso ((t.abstractSpectralObject.truncLTLTToTruncLT.app D).app X) :=
    t.isIso_truncLTt_obj_map_truncLTœÄ_app _ _ (leOfHom D.hom) X

instance (D : Arrow ‚Ñ§t) : IsIso (t.abstractSpectralObject.truncGEToTruncGEGE.app D) :=
  NatIso.isIso_of_isIso_app _

instance (D : Arrow ‚Ñ§t) : IsIso (t.abstractSpectralObject.truncLTLTToTruncLT.app D) :=
  NatIso.isIso_of_isIso_app _

instance : IsIso (t.abstractSpectralObject.truncGEToTruncGEGE) := NatIso.isIso_of_isIso_app _

instance : IsIso (t.abstractSpectralObject.truncLTLTToTruncLT) := NatIso.isIso_of_isIso_app _

omit [IsTriangulated C] in
lemma truncGEœÄ_compatibility (a : ‚Ñ§t) (X : C) :
  (t.abstractSpectralObject.truncGE.obj a).map ((t.abstractSpectralObject.truncGEœÄ a).app X) =
    (t.abstractSpectralObject.truncGEœÄ a).app
      ((t.abstractSpectralObject.truncGE.obj a).obj X) := by
  obtain (rfl|‚ü®a, rfl‚ü©|rfl) := a.three_cases
  ¬∑ rfl
  ¬∑ dsimp
    simp only [AbstractSpectralObject.truncGEœÄ_mk]
    apply from_truncGE_obj_ext
    exact ((t.truncGEœÄ a).naturality ((t.truncGEœÄ a).app X)).symm
  ¬∑ apply IsZero.eq_of_src
    dsimp
    simp

omit [IsTriangulated C] in
lemma truncLTŒπ_compatibility (a : ‚Ñ§t) (X : C) :
    (t.abstractSpectralObject.truncLT.obj a).map ((t.abstractSpectralObject.truncLTŒπ a).app X) =
      (t.abstractSpectralObject.truncLTŒπ a).app
        ((t.abstractSpectralObject.truncLT.obj a).obj X) := by
  obtain (rfl|‚ü®a, rfl‚ü©|rfl) := a.three_cases
  ¬∑ apply IsZero.eq_of_src
    dsimp
    simp
  ¬∑ dsimp
    simp only [AbstractSpectralObject.truncLEŒπ_mk]
    apply to_truncLT_obj_ext
    exact ((t.truncLTŒπ a).naturality ((t.truncLTŒπ a).app X))
  ¬∑ rfl

lemma isIso_truncLTŒπ_app_truncGELT_obj (a b : ‚Ñ§t) (h : a ‚â§ b) (X : C) :
    IsIso ((t.abstractSpectralObject.truncLTŒπ b).app
      ((t.truncLTt.obj b ‚ãô t.truncGEt.obj a).obj X)) := by
  obtain (rfl|‚ü®b, rfl‚ü©|rfl) := b.three_cases
  ¬∑ refine ‚ü®0, IsZero.eq_of_src ?_ _ _, IsZero.eq_of_src ?_ _ _‚ü©
    ¬∑ dsimp
      simp
    ¬∑ dsimp
      exact IsZero.of_iso (isZero_zero _)
        (Functor.mapIso _ (IsZero.isoZero (Functor.zero_obj _)) ‚â™‚â´
          (t.truncGEt.obj a).mapZeroObject)
  ¬∑ dsimp [SpectralObject.AbstractSpectralObject.truncLTŒπ]
    simp only [comp_id]
    rw [‚Üê t.isLE_iff_isIso_truncLTŒπ_app (b-1) b (by linarith)]
    obtain (rfl|‚ü®a, rfl‚ü©|rfl) := a.three_cases
    ¬∑ dsimp
      infer_instance
    ¬∑ dsimp
      infer_instance
    ¬∑ dsimp
      apply t.isLE_of_isZero
      simp
  ¬∑ dsimp [SpectralObject.AbstractSpectralObject.truncLTŒπ]
    erw [comp_id, Functor.map_id]
    dsimp
    infer_instance

instance (D : Arrow ‚Ñ§t) (X : C) :
    IsIso ((t.abstractSpectralObject.truncLTGELTSelfToTruncGELT.app D).app X) :=
  t.isIso_truncLTŒπ_app_truncGELT_obj D.left D.right (leOfHom D.hom) X

instance (D : Arrow ‚Ñ§t) : IsIso (t.abstractSpectralObject.truncLTGELTSelfToTruncGELT.app D) :=
  NatIso.isIso_of_isIso_app _

instance : IsIso (t.abstractSpectralObject.truncLTGELTSelfToTruncGELT) :=
  NatIso.isIso_of_isIso_app _

instance (a b : ‚Ñ§) (X : C) : t.IsLE ((t.truncGELT a b).obj X) (b-1) := by
  dsimp [truncGELT]
  infer_instance

noncomputable def natTransTruncGELTTruncLTGE (a b : ‚Ñ§) :
    t.truncGELT a b ‚ü∂ t.truncLTGE a b where
  app X := t.liftTruncLT (t.descTruncGE
    ((t.truncLTŒπ b).app X ‚â´ (t.truncGEœÄ a).app X) a) (b-1) b (by linarith)
  naturality X Y f := by
    dsimp [truncGELT, truncLTGE]
    apply t.to_truncLT_obj_ext
    dsimp
    apply t.from_truncGE_obj_ext
    simp only [Functor.id_obj, assoc, liftTruncLT_Œπ, NatTrans.naturality,
      Functor.id_map, liftTruncLT_Œπ_assoc, œÄ_descTruncGE_assoc,
      ‚Üê NatTrans.naturality_assoc, œÄ_descTruncGE]
    rw [‚Üê NatTrans.naturality, NatTrans.naturality_assoc]

@[reassoc (attr := simp)]
lemma natTransTruncGELETruncLEGE_app_pentagon (a b : ‚Ñ§) (X : C) :
    (t.truncGEœÄ a).app _ ‚â´ (t.natTransTruncGELTTruncLTGE a b).app X ‚â´ (t.truncLTŒπ b).app _ =
      (t.truncLTŒπ b).app X ‚â´ (t.truncGEœÄ a).app X := by simp [natTransTruncGELTTruncLTGE]

lemma natTransTruncGELETruncLEGE_app_pentagon_uniqueness (a b : ‚Ñ§) (X : C)
    (œÜ : (t.truncGELT a b).obj X ‚ü∂ (t.truncLTGE a b).obj X)
    (hœÜ : (t.truncGEœÄ a).app _ ‚â´ œÜ ‚â´ (t.truncLTŒπ b).app _ =
      (t.truncLTŒπ b).app X ‚â´ (t.truncGEœÄ a).app X) :
    œÜ = (t.natTransTruncGELTTruncLTGE a b).app X := by
  apply t.to_truncLT_obj_ext
  dsimp
  apply t.from_truncGE_obj_ext
  rw [hœÜ, natTransTruncGELETruncLEGE_app_pentagon]

noncomputable def truncGELTŒ¥LT (a b : ‚Ñ§) :
    t.truncGELT a b ‚ü∂ t.truncLT a ‚ãô shiftFunctor C (1 : ‚Ñ§) :=
  whiskerLeft (t.truncLT b) (t.truncGEŒ¥LT a) ‚â´
    whiskerRight (t.truncLTŒπ b) (t.truncLT a ‚ãô shiftFunctor C (1 : ‚Ñ§))

@[simps!]
noncomputable def triangleLTLTGELT (a b : ‚Ñ§) (h : a ‚â§ b) : C ‚•§ Triangle C :=
  Triangle.functorMk (t.natTransTruncLTOfLE a b h)
    (whiskerLeft (t.truncLT b) (t.truncGEœÄ a)) (t.truncGELTŒ¥LT a b)

lemma triangleLTLTGELT_distinguished (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    (t.triangleLTLTGELT a b h).obj X ‚àà distTriang C := by
  have := t.isIso_truncLT_map_truncLTŒπ_app a b h X
  refine isomorphic_distinguished _ (t.triangleLTGE_distinguished a ((t.truncLT b).obj X)) _ ?_
  refine Triangle.isoMk _ _ ((asIso ((t.truncLT a).map ((t.truncLTŒπ b).app X))).symm)
    (Iso.refl _) (Iso.refl _) ?_ ?_ ?_
  ¬∑ dsimp
    simp only [comp_id, IsIso.eq_inv_comp]
    apply t.to_truncLT_obj_ext
    simp only [Functor.id_obj, NatTrans.naturality, assoc, Functor.id_map,
      natTransTruncLTOfLE_Œπ_app_assoc]
  ¬∑ dsimp
    simp only [comp_id, id_comp]
  ¬∑ dsimp [truncGELTŒ¥LT]
    simp only [Functor.map_inv, assoc, IsIso.hom_inv_id, comp_id, id_comp]

instance (a b : ‚Ñ§) (X : C) : IsIso ((t.natTransTruncGELTTruncLTGE a b).app X) := by
  by_cases h : a ‚â§ b
  ¬∑ let u‚ÇÅ‚ÇÇ := (t.natTransTruncLTOfLE a b h).app X
    let u‚ÇÇ‚ÇÉ : (t.truncLT b).obj X ‚ü∂ X := (t.truncLTŒπ b).app X
    let u‚ÇÅ‚ÇÉ : _ ‚ü∂ X := (t.truncLTŒπ a).app X
    have eq : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ := by simp [u‚ÇÅ‚ÇÇ, u‚ÇÇ‚ÇÉ, u‚ÇÅ‚ÇÉ]
    have H := someOctahedron eq (t.triangleLTLTGELT_distinguished a b h X)
      (t.triangleLTGE_distinguished b X) (t.triangleLTGE_distinguished a X)
    let m‚ÇÅ : (t.truncGELT a b).obj X ‚ü∂  _ := H.m‚ÇÅ
    have := t.isIso‚ÇÅ_truncLT_map_of_GE _ H.mem b (by dsimp; infer_instance)
    dsimp at this
    have eq' : t.liftTruncLT m‚ÇÅ (b-1) b (by linarith) =
        (t.natTransTruncGELTTruncLTGE a b).app X := by
      apply t.to_truncLT_obj_ext
      dsimp
      apply t.from_truncGE_obj_ext
      simp_rw [natTransTruncGELETruncLEGE_app_pentagon, liftTruncLT_Œπ]
      exact H.comm‚ÇÅ
    rw [‚Üê eq']
    have fac : (t.truncLTŒπ b).app ((t.truncGE a).obj ((t.truncLT b).obj X)) ‚â´
        t.liftTruncLT m‚ÇÅ (b-1) b (by linarith) = (t.truncLT b).map m‚ÇÅ :=
      t.to_truncLT_obj_ext _ _ _ _ (by simp [truncGELT])
    have : IsIso ((t.truncLTŒπ b).app ((t.truncGE a).obj ((t.truncLT b).obj X))) := by
      rw [‚Üê t.isLE_iff_isIso_truncLTŒπ_app (b-1) b (by linarith)]
      infer_instance
    exact IsIso.of_isIso_fac_left fac
  ¬∑ refine ‚ü®0, ?_, ?_‚ü©
    all_goals
      apply IsZero.eq_of_src
      exact t.isZero _ (b-1) a (by linarith)

instance (a b : ‚Ñ§) : IsIso (t.natTransTruncGELTTruncLTGE a b) :=
  NatIso.isIso_of_isIso_app _

noncomputable def truncGELTIsoLTGE (a b : ‚Ñ§) : t.truncGELT a b ‚âÖ t.truncLTGE a b :=
  asIso (t.natTransTruncGELTTruncLTGE a b)

noncomputable def truncGELEIsoLEGE (a b : ‚Ñ§) : t.truncGELE a b ‚âÖ t.truncLEGE a b :=
  t.truncGELTIsoLTGE a (b + 1)

instance (a b : ‚Ñ§) (X : C) :
  IsIso ((t.truncLTŒπ b).app ((t.truncGE a).obj ((t.truncLT b).obj X))) := by
    rw [‚Üê t.isLE_iff_isIso_truncLTŒπ_app (b-1) b (by linarith)]
    infer_instance

lemma truncLT_map_truncGE_map_truncLTŒπ_app_fac (a b : ‚Ñ§) (X : C) :
    (t.truncLT b).map ((t.truncGE a).map ((t.truncLTŒπ b).app X)) =
      (t.truncLTŒπ b).app ((t.truncGE a).obj ((t.truncLT b).obj X)) ‚â´
        (t.natTransTruncGELTTruncLTGE a b).app X := by
  rw [‚Üê cancel_epi (inv ((t.truncLTŒπ b).app ((t.truncGE a).obj ((t.truncLT b).obj X)))),
    IsIso.inv_hom_id_assoc]
  apply t.natTransTruncGELETruncLEGE_app_pentagon_uniqueness
  simp only [Functor.id_obj, assoc, NatTrans.naturality, Functor.id_map, IsIso.inv_hom_id_assoc]
  exact ((t.truncGEœÄ a).naturality ((t.truncLTŒπ b).app X)).symm

lemma isIso_truncLT_map_truncGE_map_truncLTŒπ_app (a b : ‚Ñ§) (X : C) :
    IsIso ((t.truncLT b).map ((t.truncGE a).map ((t.truncLTŒπ b).app X))) := by
  rw [t.truncLT_map_truncGE_map_truncLTŒπ_app_fac a b X]
  infer_instance

instance (D : Arrow ‚Ñ§t) (X : C) :
    IsIso ((t.abstractSpectralObject.truncLTGELTSelfToTruncLTGE.app D).app X) := by
  obtain ‚ü®a, b, f : a ‚ü∂ b‚ü© := D
  have h : a ‚â§ b := leOfHom f
  obtain (rfl|‚ü®b, rfl‚ü©|rfl) := b.three_cases
  ¬∑ simp only [‚Ñ§t.le_bot_iff] at h
    subst h
    exact ‚ü®0, IsZero.eq_of_src (Functor.zero_obj _) _ _,
      IsZero.eq_of_src (Functor.zero_obj _) _ _‚ü©
  ¬∑ dsimp [SpectralObject.AbstractSpectralObject.truncLTGELTSelfToTruncLTGE,
      SpectralObject.AbstractSpectralObject.truncLTGE]
    obtain (rfl|‚ü®a, rfl‚ü©|rfl) := a.three_cases
    ¬∑ simp only [AbstractSpectralObject.truncLEŒπ_mk]
      exact t.isIso_truncLT_map_truncLTŒπ_app b b (by rfl) X
    ¬∑ simp only [‚Ñ§t.mk_le_mk_iff] at h
      simp only [truncGEt_obj_mk, AbstractSpectralObject.truncLEŒπ_mk]
      exact t.isIso_truncLT_map_truncGE_map_truncLTŒπ_app a b X
    ¬∑ refine ‚ü®0, IsZero.eq_of_src ?_ _ _,
        IsZero.eq_of_src ?_ _ _‚ü©
      all_goals
        exact IsZero.of_iso (isZero_zero _)
          ((t.truncLT b).mapIso ((Functor.zero_obj _).isoZero) ‚â™‚â´
          (t.truncLT b).mapZeroObject)
  ¬∑ dsimp [SpectralObject.AbstractSpectralObject.truncLTGELTSelfToTruncLTGE]
    simp only [AbstractSpectralObject.truncLTŒπ_top_app, Functor.map_id]
    infer_instance

instance (D : Arrow ‚Ñ§t) : IsIso (t.abstractSpectralObject.truncLTGELTSelfToTruncLTGE.app D) :=
  NatIso.isIso_of_isIso_app _

instance : IsIso (t.abstractSpectralObject.truncLTGELTSelfToTruncLTGE) :=
  NatIso.isIso_of_isIso_app _

instance : t.abstractSpectralObject.IsCompatible where
  distinguished := AbstractSpectralObject.distinguished t
  truncGEœÄ_compatibility' := t.truncGEœÄ_compatibility
  truncLTŒπ_compatibility' := t.truncLTŒπ_compatibility

@[simps!]
noncomputable def spectralObject (X : C) : SpectralObject C ‚Ñ§t :=
  t.abstractSpectralObject.spectralObject X

/-noncomputable def shiftSpectralObjectœâ‚ÇÅIsoHomologyŒπHeart' (X : C) (q q' : ‚Ñ§) (hq' : q + 1 = q') :
    ((t.spectralObject X).œâ‚ÇÅ ‚ãô shiftFunctor C q).obj
      (ComposableArrows.mk‚ÇÅ (homOfLE (by simp; linarith) : ‚Ñ§t.mk q ‚ü∂ ‚Ñ§t.mk q')) ‚âÖ
      (t.homology' q ‚ãô t.ŒπHeart').obj X :=
  (shiftFunctor C q).mapIso ((t.truncGELEIsoTruncGELT q q q' hq').symm.app X) ‚â™‚â´
    (t.homologyCompŒπHeart' q).symm.app X

noncomputable def homology‚ÇÄCompŒπHeartIsoTruncLEGE : t.homology' 0 ‚ãô t.ŒπHeart' ‚âÖ t.truncLEGE 0 0 :=
  t.homology‚ÇÄCompŒπHeart'IsoTruncGELE ‚â™‚â´ t.truncGELEIsoLEGE 0 0-/

end TStructure

end Triangulated

namespace ObjectProperty

open Triangulated

/-- Constructor for `HasInducedTStructure`. -/
lemma HasInducedTStructure.mk' {P : ObjectProperty C} [P.IsTriangulated] {t : TStructure C}
    (h : ‚àÄ (X : C) (_ : P X) (n : ‚Ñ§), P ((t.truncLE n).obj X) ‚àß
      (P ((t.truncGE n).obj X))) :
    P.HasInducedTStructure t where
  exists_triangle_zero_one X hX :=
      ‚ü®_, _, inferInstance, inferInstance, _, _, _,
        t.triangleLEGE_distinguished 0 1 (by omega) X,
          P.le_isoClosure _ ((h X hX _).1), P.le_isoClosure _ ((h X hX _).2)‚ü©

lemma mem_of_hasInductedTStructure (P : ObjectProperty C) [P.IsTriangulated] (t : TStructure C)
    [P.IsClosedUnderIsomorphisms] [P.HasInducedTStructure t]
    (T : Triangle C) (hT : T ‚àà distTriang C)
    (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (h‚ÇÅ : t.IsLE T.obj‚ÇÅ n‚ÇÄ) (h‚ÇÇ : P T.obj‚ÇÇ)
    (h‚ÇÉ : t.IsGE T.obj‚ÇÉ n‚ÇÅ) :
    P T.obj‚ÇÅ ‚àß P T.obj‚ÇÉ := by
  obtain ‚ü®e, _‚ü© := t.triangle_iso_exists n‚ÇÄ n‚ÇÅ (by omega) _ _ hT
    (P.Œπ.map_distinguished _ ((P.tStructure t).triangleLEGE_distinguished n‚ÇÄ n‚ÇÅ h ‚ü®_, h‚ÇÇ‚ü©))
    (Iso.refl _) inferInstance inferInstance (by
      dsimp [-Œπ_obj]
      rw [‚Üê P.tStructure_isLE_iff]
      infer_instance) (by
      dsimp [-Œπ_obj]
      rw [‚Üê P.tStructure_isGE_iff]
      infer_instance)
  exact ‚ü®(P.prop_iff_of_iso (Triangle.œÄ‚ÇÅ.mapIso e)).2 (P.prop_Œπ_obj _),
    (P.prop_iff_of_iso (Triangle.œÄ‚ÇÉ.mapIso e)).2 (P.prop_Œπ_obj _)‚ü©

instance (P P' : ObjectProperty C) [P.IsTriangulated] [P'.IsTriangulated] (t : TStructure C)
    [P.HasInducedTStructure t] [P'.HasInducedTStructure t]
    [P.IsClosedUnderIsomorphisms] [P'.IsClosedUnderIsomorphisms] :
    (P ‚äì P').HasInducedTStructure t :=
  .mk' (by
    rintro X ‚ü®hX, hX'‚ü© n
    exact
      ‚ü®‚ü®(P.mem_of_hasInductedTStructure t _ (t.triangleLEGE_distinguished n _ rfl X) n _ rfl
        (by dsimp; infer_instance) hX (by dsimp; infer_instance)).1,
      (P'.mem_of_hasInductedTStructure t _ (t.triangleLEGE_distinguished n _ rfl X) n _ rfl
        (by dsimp; infer_instance) hX' (by dsimp; infer_instance)).1‚ü©,
        ‚ü®(P.mem_of_hasInductedTStructure t _ (t.triangleLEGE_distinguished (n - 1) n (by omega) X)
        (n - 1) n (by omega) (by dsimp; infer_instance) hX (by dsimp; infer_instance)).2,
      (P'.mem_of_hasInductedTStructure t _ (t.triangleLEGE_distinguished (n - 1) n (by omega) X)
        (n - 1) n (by omega) (by dsimp; infer_instance) hX' (by dsimp; infer_instance)).2‚ü©‚ü©)

end ObjectProperty

namespace Triangulated

variable (t : TStructure C)

instance [IsTriangulated C] : t.plus.HasInducedTStructure t :=
  .mk' (by
    rintro X ‚ü®a, _‚ü© n
    exact ‚ü®‚ü®a, inferInstance‚ü©, ‚ü®a, inferInstance‚ü©‚ü©)

instance [IsTriangulated C] : t.minus.HasInducedTStructure t :=
  .mk' (by
    rintro X ‚ü®a, _‚ü© n
    exact ‚ü®‚ü®a, inferInstance‚ü©, ‚ü®a, inferInstance‚ü©‚ü©)

instance [IsTriangulated C] : t.bounded.HasInducedTStructure t := by
  dsimp [TStructure.bounded]
  infer_instance

namespace TStructure

instance (X : C) (n : ‚Ñ§) [t.IsLE X n] (i : ‚Ñ§t) :
    t.IsLE ((t.truncLTt.obj i).obj X) n := by
  obtain rfl|‚ü®i, rfl‚ü©|rfl := ‚Ñ§t.three_cases i
  ¬∑ apply isLE_of_isZero
    simp
  ¬∑ dsimp
    infer_instance
  ¬∑ dsimp
    infer_instance

instance [IsTriangulated C] (X : C) (n : ‚Ñ§) [t.IsGE X n] (i : ‚Ñ§t) :
    t.IsGE ((t.truncLTt.obj i).obj X) n := by
  obtain rfl|‚ü®i, rfl‚ü©|rfl := ‚Ñ§t.three_cases i
  ¬∑ apply isGE_of_isZero
    simp
  ¬∑ dsimp
    infer_instance
  ¬∑ dsimp
    infer_instance

instance [IsTriangulated C] (X : C) (n : ‚Ñ§) [t.IsLE X n] (i : ‚Ñ§t) :
    t.IsLE ((t.truncGEt.obj i).obj X) n := by
  obtain rfl|‚ü®i, rfl‚ü©|rfl := ‚Ñ§t.three_cases i
  ¬∑ dsimp
    infer_instance
  ¬∑ dsimp
    infer_instance
  ¬∑ apply isLE_of_isZero
    simp

instance (X : C) (n : ‚Ñ§) [t.IsGE X n] (i : ‚Ñ§t) :
    t.IsGE ((t.truncGEt.obj i).obj X) n := by
  obtain rfl|‚ü®i, rfl‚ü©|rfl := ‚Ñ§t.three_cases i
  ¬∑ dsimp
    infer_instance
  ¬∑ dsimp
    infer_instance
  ¬∑ apply isGE_of_isZero
    simp

end TStructure

end Triangulated

end CategoryTheory

set_option linter.style.longFile 1900
