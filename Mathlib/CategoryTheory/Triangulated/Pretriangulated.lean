/-
Copyright (c) 2021 Luke Kershaw. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Luke Kershaw, Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.TriangleShift
import Mathlib.CategoryTheory.Limits.Constructions.FiniteProductsOfBinaryProducts

#align_import category_theory.triangulated.pretriangulated from "leanprover-community/mathlib"@"6876fa15e3158ff3e4a4e2af1fb6e1945c6e8803"

/-!
# Pretriangulated Categories

This file contains the definition of pretriangulated categories and triangulated functors
between them.

## Implementation Notes

We work under the assumption that pretriangulated categories are preadditive categories,
but not necessarily additive categories, as is assumed in some sources.

TODO: generalise this to n-angulated categories as in https://arxiv.org/abs/1006.4592
-/


noncomputable section

open CategoryTheory Preadditive Limits

universe v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Pretriangulated ZeroObject

/-
We work in a preadditive category `C` equipped with an additive shift.
-/
variable (C : Type u) [Category.{v} C] [HasZeroObject C] [HasShift C ‚Ñ§] [Preadditive C]

/-- A preadditive category `C` with an additive shift, and a class of "distinguished triangles"
relative to that shift is called pretriangulated if the following hold:
* Any triangle that is isomorphic to a distinguished triangle is also distinguished.
* Any triangle of the form `(X,X,0,id,0,0)` is distinguished.
* For any morphism `f : X ‚ü∂ Y` there exists a distinguished triangle of the form `(X,Y,Z,f,g,h)`.
* The triangle `(X,Y,Z,f,g,h)` is distinguished if and only if `(Y,Z,X‚ü¶1‚üß,g,h,-f‚ü¶1‚üß)` is.
* Given a diagram:
  ```
        f       g       h
    X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
    ‚îÇ       ‚îÇ                ‚îÇ
    ‚îÇa      ‚îÇb               ‚îÇa‚ü¶1‚üß'
    V       V                V
    X' ‚îÄ‚îÄ‚îÄ> Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß
        f'      g'      h'
  ```
  where the left square commutes, and whose rows are distinguished triangles,
  there exists a morphism `c : Z ‚ü∂ Z'` such that `(a,b,c)` is a triangle morphism.

See <https://stacks.math.columbia.edu/tag/0145>
-/
class Pretriangulated [‚àÄ n : ‚Ñ§, Functor.Additive (shiftFunctor C n)] where
  /-- a class of triangle which are called `distinguished` -/
  distinguishedTriangles : Set (Triangle C)
  /-- a triangle that is isomorphic to a distinguished triangle is distinguished -/
  isomorphic_distinguished :
    ‚àÄ T‚ÇÅ ‚àà distinguishedTriangles, ‚àÄ (T‚ÇÇ) (_ : T‚ÇÇ ‚âÖ T‚ÇÅ), T‚ÇÇ ‚àà distinguishedTriangles
  /-- obvious triangles `X ‚ü∂ X ‚ü∂ 0 ‚ü∂ X‚ü¶1‚üß` are distinguished -/
  contractible_distinguished : ‚àÄ X : C, contractibleTriangle X ‚àà distinguishedTriangles
  /-- any morphism `X ‚ü∂ Y` is part of a distinguished triangle `X ‚ü∂ Y ‚ü∂ Z ‚ü∂ X‚ü¶1‚üß` -/
  distinguished_cocone_triangle :
    ‚àÄ {X Y : C} (f : X ‚ü∂ Y),
      ‚àÉ (Z : C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß), Triangle.mk f g h ‚àà distinguishedTriangles
  /-- a triangle is distinguished iff it is so after rotating it -/
  rotate_distinguished_triangle :
    ‚àÄ T : Triangle C, T ‚àà distinguishedTriangles ‚Üî T.rotate ‚àà distinguishedTriangles
  /-- given two distinguished triangle, a commutative square
        can be extended as morphism of triangles -/
  complete_distinguished_triangle_morphism :
    ‚àÄ (T‚ÇÅ T‚ÇÇ : Triangle C) (_ : T‚ÇÅ ‚àà distinguishedTriangles) (_ : T‚ÇÇ ‚àà distinguishedTriangles)
      (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (_ : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ),
      ‚àÉ c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ, T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶1‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ
#align category_theory.pretriangulated CategoryTheory.Pretriangulated


namespace Pretriangulated

variable [‚àÄ n : ‚Ñ§, Functor.Additive (CategoryTheory.shiftFunctor C n)] [hC : Pretriangulated C]

-- Porting note: increased the priority so that we can write `T ‚àà distTriang C`, and
-- not just `T ‚àà (distTriang C)`
/-- distinguished triangles in a pretriangulated category -/
notation:60 "distTriang " C => @distinguishedTriangles C _ _ _ _ _ _

variable {C}

lemma distinguished_iff_of_iso {T‚ÇÅ T‚ÇÇ : Triangle C} (e : T‚ÇÅ ‚âÖ T‚ÇÇ) :
    (T‚ÇÅ ‚àà distTriang C) ‚Üî T‚ÇÇ ‚àà distTriang C :=
  ‚ü®fun hT‚ÇÅ => isomorphic_distinguished _ hT‚ÇÅ _ e.symm,
    fun hT‚ÇÇ => isomorphic_distinguished _ hT‚ÇÇ _ e‚ü©

/-- Given any distinguished triangle `T`, then we know `T.rotate` is also distinguished.
-/
theorem rot_of_distTriang (T : Triangle C) (H : T ‚àà distTriang C) : T.rotate ‚àà distTriang C :=
  (rotate_distinguished_triangle T).mp H
#align category_theory.pretriangulated.rot_of_dist_triangle CategoryTheory.Pretriangulated.rot_of_distTriang

/-- Given any distinguished triangle `T`, then we know `T.inv_rotate` is also distinguished.
-/
theorem inv_rot_of_distTriang (T : Triangle C) (H : T ‚àà distTriang C) :
    T.invRotate ‚àà distTriang C :=
  (rotate_distinguished_triangle T.invRotate).mpr
    (isomorphic_distinguished T H T.invRotate.rotate (invRotCompRot.app T))
#align category_theory.pretriangulated.inv_rot_of_dist_triangle CategoryTheory.Pretriangulated.inv_rot_of_distTriang

/-- Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `f ‚â´ g = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
@[reassoc]
theorem comp_distTriang_mor_zero‚ÇÅ‚ÇÇ (T) (H : T ‚àà (distTriang C)) : T.mor‚ÇÅ ‚â´ T.mor‚ÇÇ = 0 := by
  obtain ‚ü®c, hc‚ü© :=
    complete_distinguished_triangle_morphism _ _ (contractible_distinguished T.obj‚ÇÅ) H (ùüô T.obj‚ÇÅ)
      T.mor‚ÇÅ rfl
  simpa only [contractibleTriangle_mor‚ÇÇ, zero_comp] using hc.left.symm
#align category_theory.pretriangulated.comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ CategoryTheory.Pretriangulated.comp_distTriang_mor_zero‚ÇÅ‚ÇÇ

/-- Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `g ‚â´ h = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
@[reassoc]
theorem comp_distTriang_mor_zero‚ÇÇ‚ÇÉ (T : Triangle C) (H : T ‚àà distTriang C) :
    T.mor‚ÇÇ ‚â´ T.mor‚ÇÉ = 0 :=
  comp_distTriang_mor_zero‚ÇÅ‚ÇÇ T.rotate (rot_of_distTriang T H)
#align category_theory.pretriangulated.comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ CategoryTheory.Pretriangulated.comp_distTriang_mor_zero‚ÇÇ‚ÇÉ

/-- Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `h ‚â´ f‚ü¶1‚üß = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
@[reassoc]
theorem comp_distTriang_mor_zero‚ÇÉ‚ÇÅ (T : Triangle C) (H : T ‚àà distTriang C) :
    T.mor‚ÇÉ ‚â´ T.mor‚ÇÅ‚ü¶1‚üß' = 0 := by
  have H‚ÇÇ := rot_of_distTriang T.rotate (rot_of_distTriang T H)
  simpa using comp_distTriang_mor_zero‚ÇÅ‚ÇÇ T.rotate.rotate H‚ÇÇ
#align category_theory.pretriangulated.comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ CategoryTheory.Pretriangulated.comp_distTriang_mor_zero‚ÇÉ‚ÇÅ

/-- Any morphism `Y ‚ü∂ Z` is part of a distinguished triangle `X ‚ü∂ Y ‚ü∂ Z ‚ü∂ X‚ü¶1‚üß` -/
lemma distinguished_cocone_triangle‚ÇÅ {Y Z : C} (g : Y ‚ü∂ Z) :
    ‚àÉ (X : C) (f : X ‚ü∂ Y) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß), Triangle.mk f g h ‚àà distTriang C := by
  obtain ‚ü®X', f', g', mem‚ü© := distinguished_cocone_triangle g
  exact ‚ü®_, _, _, inv_rot_of_distTriang _ mem‚ü©

/-- Any morphism `Z ‚ü∂ X‚ü¶1‚üß` is part of a distinguished triangle `X ‚ü∂ Y ‚ü∂ Z ‚ü∂ X‚ü¶1‚üß` -/
lemma distinguished_cocone_triangle‚ÇÇ {Z X : C} (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß) :
    ‚àÉ (Y : C) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), Triangle.mk f g h ‚àà distTriang C := by
  obtain ‚ü®Y', f', g', mem‚ü© := distinguished_cocone_triangle h
  let T' := (Triangle.mk h f' g').invRotate.invRotate
  refine' ‚ü®T'.obj‚ÇÇ, ((shiftEquiv C (1 : ‚Ñ§)).unitIso.app X).hom ‚â´ T'.mor‚ÇÅ, T'.mor‚ÇÇ,
    isomorphic_distinguished _ (inv_rot_of_distTriang _ (inv_rot_of_distTriang _ mem)) _ _‚ü©
  exact Triangle.isoMk _ _ ((shiftEquiv C (1 : ‚Ñ§)).unitIso.app X) (Iso.refl _) (Iso.refl _)
    (by aesop_cat) (by aesop_cat)
    (by dsimp; simp only [shift_shiftFunctorCompIsoId_inv_app, id_comp])

/-- A commutative square involving the morphisms `mor‚ÇÇ` of two distinguished triangles
can be extended as morphism of triangles -/
lemma complete_distinguished_triangle_morphism‚ÇÅ (T‚ÇÅ T‚ÇÇ : Triangle C)
    (hT‚ÇÅ : T‚ÇÅ ‚àà distTriang C) (hT‚ÇÇ : T‚ÇÇ ‚àà distTriang C) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ)
    (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ) (comm : T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ) :
    ‚àÉ (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ), T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ ‚àß
      T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶(1 : ‚Ñ§)‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ := by
  obtain ‚ü®a, ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü©‚ü© := complete_distinguished_triangle_morphism _ _
    (rot_of_distTriang _ hT‚ÇÅ) (rot_of_distTriang _ hT‚ÇÇ) b c comm
  refine' ‚ü®(shiftFunctor C (1 : ‚Ñ§)).preimage a, ‚ü®_, _‚ü©‚ü©
  ¬∑ apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
    dsimp at ha‚ÇÇ
    rw [neg_comp, comp_neg, neg_inj] at ha‚ÇÇ
    simpa only [Functor.map_comp, Functor.image_preimage] using ha‚ÇÇ
  ¬∑ simpa only [Functor.image_preimage] using ha‚ÇÅ

/-- A commutative square involving the morphisms `mor‚ÇÉ` of two distinguished triangles
can be extended as morphism of triangles -/
lemma complete_distinguished_triangle_morphism‚ÇÇ (T‚ÇÅ T‚ÇÇ : Triangle C)
    (hT‚ÇÅ : T‚ÇÅ ‚àà distTriang C) (hT‚ÇÇ : T‚ÇÇ ‚àà distTriang C) (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ)
    (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ) (comm : T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶(1 : ‚Ñ§)‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ) :
    ‚àÉ (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ), T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ ‚àß T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ := by
  obtain ‚ü®a, ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü©‚ü© := complete_distinguished_triangle_morphism _ _
    (inv_rot_of_distTriang _ hT‚ÇÅ) (inv_rot_of_distTriang _ hT‚ÇÇ) (c‚ü¶(-1 : ‚Ñ§)‚üß') a (by
    dsimp
    simp only [neg_comp, comp_neg, ‚Üê Functor.map_comp_assoc, ‚Üê comm,
      Functor.map_comp, shift_shift_neg', Functor.id_obj, assoc, Iso.inv_hom_id_app, comp_id])
  refine' ‚ü®a, ‚ü®ha‚ÇÅ, _‚ü©‚ü©
  dsimp only [Triangle.invRotate, Triangle.mk] at ha‚ÇÇ
  rw [‚Üê cancel_mono ((shiftEquiv C (1 : ‚Ñ§)).counitIso.inv.app T‚ÇÇ.obj‚ÇÉ), assoc, assoc, ‚Üê ha‚ÇÇ]
  simp only [shiftEquiv'_counitIso, shift_neg_shift', assoc, Iso.inv_hom_id_app_assoc]

/-- Obvious triangles `0 ‚ü∂ X ‚ü∂ X ‚ü∂ 0‚ü¶1‚üß` are distinguished -/
lemma contractible_distinguished‚ÇÅ (X : C) :
    Triangle.mk (0 : 0 ‚ü∂ X) (ùüô X) 0 ‚àà distTriang C := by
  refine' isomorphic_distinguished _
    (inv_rot_of_distTriang _ (contractible_distinguished X)) _ _
  exact Triangle.isoMk _ _ (Functor.mapZeroObject _).symm (Iso.refl _) (Iso.refl _)
    (by aesop_cat) (by aesop_cat) (by aesop_cat)

/-- Obvious triangles `X ‚ü∂ 0 ‚ü∂ X‚ü¶1‚üß ‚ü∂ X‚ü¶1‚üß` are distinguished -/
lemma contractible_distinguished‚ÇÇ (X : C) :
    Triangle.mk (0 : X ‚ü∂ 0) 0 (ùüô (X‚ü¶1‚üß)) ‚àà distTriang C := by
  refine' isomorphic_distinguished _
    (inv_rot_of_distTriang _ (contractible_distinguished‚ÇÅ (X‚ü¶(1 : ‚Ñ§)‚üß))) _ _
  exact Triangle.isoMk _ _ ((shiftEquiv C (1 : ‚Ñ§)).unitIso.app X) (Iso.refl _) (Iso.refl _)
    (by aesop_cat) (by aesop_cat)
    (by dsimp; simp only [shift_shiftFunctorCompIsoId_inv_app, id_comp])

namespace Triangle

variable (T : Triangle C) (hT : T ‚àà distTriang C)

lemma yoneda_exact‚ÇÇ {X : C} (f : T.obj‚ÇÇ ‚ü∂ X) (hf : T.mor‚ÇÅ ‚â´ f = 0) :
    ‚àÉ (g : T.obj‚ÇÉ ‚ü∂ X), f = T.mor‚ÇÇ ‚â´ g := by
  obtain ‚ü®g, ‚ü®hg‚ÇÅ, _‚ü©‚ü© := complete_distinguished_triangle_morphism T _ hT
    (contractible_distinguished‚ÇÅ X) 0 f (by aesop_cat)
  exact ‚ü®g, by simpa using hg‚ÇÅ.symm‚ü©

lemma yoneda_exact‚ÇÉ {X : C} (f : T.obj‚ÇÉ ‚ü∂ X) (hf : T.mor‚ÇÇ ‚â´ f = 0) :
    ‚àÉ (g : T.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ X), f = T.mor‚ÇÉ ‚â´ g :=
  yoneda_exact‚ÇÇ _ (rot_of_distTriang _ hT) f hf

lemma coyoneda_exact‚ÇÇ {X : C} (f : X ‚ü∂ T.obj‚ÇÇ) (hf : f ‚â´ T.mor‚ÇÇ = 0) :
    ‚àÉ (g : X ‚ü∂ T.obj‚ÇÅ), f = g ‚â´ T.mor‚ÇÅ := by
  obtain ‚ü®a, ‚ü®ha‚ÇÅ, _‚ü©‚ü© := complete_distinguished_triangle_morphism‚ÇÅ _ T
    (contractible_distinguished X) hT f 0 (by aesop_cat)
  exact ‚ü®a, by simpa using ha‚ÇÅ‚ü©

lemma coyoneda_exact‚ÇÅ {X : C} (f : X ‚ü∂ T.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (hf : f ‚â´ T.mor‚ÇÅ‚ü¶1‚üß' = 0) :
    ‚àÉ (g : X ‚ü∂ T.obj‚ÇÉ), f = g ‚â´ T.mor‚ÇÉ :=
  coyoneda_exact‚ÇÇ _ (rot_of_distTriang _ (rot_of_distTriang _ hT)) f (by aesop_cat)

lemma coyoneda_exact‚ÇÉ {X : C} (f : X ‚ü∂ T.obj‚ÇÉ) (hf : f ‚â´ T.mor‚ÇÉ = 0) :
    ‚àÉ (g : X ‚ü∂ T.obj‚ÇÇ), f = g ‚â´ T.mor‚ÇÇ :=
  coyoneda_exact‚ÇÇ _ (rot_of_distTriang _ hT) f hf

lemma mor‚ÇÉ_eq_zero_iff_epi‚ÇÇ : T.mor‚ÇÉ = 0 ‚Üî Epi T.mor‚ÇÇ := by
  constructor
  ¬∑ intro h
    rw [epi_iff_cancel_zero]
    intro X g hg
    obtain ‚ü®f, rfl‚ü© := yoneda_exact‚ÇÉ T hT g hg
    rw [h, zero_comp]
  ¬∑ intro
    rw [‚Üê cancel_epi T.mor‚ÇÇ, comp_distTriang_mor_zero‚ÇÇ‚ÇÉ _ hT, comp_zero]

lemma mor‚ÇÇ_eq_zero_iff_epi‚ÇÅ : T.mor‚ÇÇ = 0 ‚Üî Epi T.mor‚ÇÅ := by
  have h := mor‚ÇÉ_eq_zero_iff_epi‚ÇÇ _ (inv_rot_of_distTriang _ hT)
  dsimp at h
  rw [‚Üê h, IsIso.comp_right_eq_zero]

lemma mor‚ÇÅ_eq_zero_iff_epi‚ÇÉ : T.mor‚ÇÅ = 0 ‚Üî Epi T.mor‚ÇÉ := by
  have h := mor‚ÇÉ_eq_zero_iff_epi‚ÇÇ _ (rot_of_distTriang _ hT)
  dsimp at h
  rw [‚Üê h, neg_eq_zero]
  constructor
  ¬∑ intro h
    simp only [h, Functor.map_zero]
  ¬∑ intro h
    rw [‚Üê (CategoryTheory.shiftFunctor C (1 : ‚Ñ§)).map_eq_zero_iff, h]

lemma mor‚ÇÉ_eq_zero_of_epi‚ÇÇ (h : Epi T.mor‚ÇÇ) : T.mor‚ÇÉ = 0 := (T.mor‚ÇÉ_eq_zero_iff_epi‚ÇÇ hT).2 h
lemma mor‚ÇÇ_eq_zero_of_epi‚ÇÅ (h : Epi T.mor‚ÇÅ) : T.mor‚ÇÇ = 0 := (T.mor‚ÇÇ_eq_zero_iff_epi‚ÇÅ hT).2 h
lemma mor‚ÇÅ_eq_zero_of_epi‚ÇÉ (h : Epi T.mor‚ÇÉ) : T.mor‚ÇÅ = 0 := (T.mor‚ÇÅ_eq_zero_iff_epi‚ÇÉ hT).2 h

lemma epi‚ÇÇ (h : T.mor‚ÇÉ = 0) : Epi T.mor‚ÇÇ := (T.mor‚ÇÉ_eq_zero_iff_epi‚ÇÇ hT).1 h
lemma epi‚ÇÅ (h : T.mor‚ÇÇ = 0) : Epi T.mor‚ÇÅ := (T.mor‚ÇÇ_eq_zero_iff_epi‚ÇÅ hT).1 h
lemma epi‚ÇÉ (h : T.mor‚ÇÅ = 0) : Epi T.mor‚ÇÉ := (T.mor‚ÇÅ_eq_zero_iff_epi‚ÇÉ hT).1 h

lemma mor‚ÇÅ_eq_zero_iff_mono‚ÇÇ : T.mor‚ÇÅ = 0 ‚Üî Mono T.mor‚ÇÇ := by
  constructor
  ¬∑ intro h
    rw [mono_iff_cancel_zero]
    intro X g hg
    obtain ‚ü®f, rfl‚ü© := coyoneda_exact‚ÇÇ T hT g hg
    rw [h, comp_zero]
  ¬∑ intro
    rw [‚Üê cancel_mono T.mor‚ÇÇ, comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ hT, zero_comp]

lemma mor‚ÇÇ_eq_zero_iff_mono‚ÇÉ : T.mor‚ÇÇ = 0 ‚Üî Mono T.mor‚ÇÉ :=
  mor‚ÇÅ_eq_zero_iff_mono‚ÇÇ _ (rot_of_distTriang _ hT)

lemma mor‚ÇÉ_eq_zero_iff_mono‚ÇÅ : T.mor‚ÇÉ = 0 ‚Üî Mono T.mor‚ÇÅ := by
  have h := mor‚ÇÅ_eq_zero_iff_mono‚ÇÇ _ (inv_rot_of_distTriang _ hT)
  dsimp at h
  rw [‚Üê h, neg_eq_zero, IsIso.comp_right_eq_zero]
  constructor
  ¬∑ intro h
    simp only [h, Functor.map_zero]
  ¬∑ intro h
    rw [‚Üê (CategoryTheory.shiftFunctor C (-1 : ‚Ñ§)).map_eq_zero_iff, h]

lemma mor‚ÇÅ_eq_zero_of_mono‚ÇÇ (h : Mono T.mor‚ÇÇ) : T.mor‚ÇÅ = 0 := (T.mor‚ÇÅ_eq_zero_iff_mono‚ÇÇ hT).2 h
lemma mor‚ÇÇ_eq_zero_of_mono‚ÇÉ (h : Mono T.mor‚ÇÉ) : T.mor‚ÇÇ = 0 := (T.mor‚ÇÇ_eq_zero_iff_mono‚ÇÉ hT).2 h
lemma mor‚ÇÉ_eq_zero_of_mono‚ÇÅ (h : Mono T.mor‚ÇÅ) : T.mor‚ÇÉ = 0 := (T.mor‚ÇÉ_eq_zero_iff_mono‚ÇÅ hT).2 h

lemma mono‚ÇÇ (h : T.mor‚ÇÅ = 0) : Mono T.mor‚ÇÇ := (T.mor‚ÇÅ_eq_zero_iff_mono‚ÇÇ hT).1 h
lemma mono‚ÇÉ (h : T.mor‚ÇÇ = 0) : Mono T.mor‚ÇÉ := (T.mor‚ÇÇ_eq_zero_iff_mono‚ÇÉ hT).1 h
lemma mono‚ÇÅ (h : T.mor‚ÇÉ = 0) : Mono T.mor‚ÇÅ := (T.mor‚ÇÉ_eq_zero_iff_mono‚ÇÅ hT).1 h

lemma isZero‚ÇÇ_iff : IsZero T.obj‚ÇÇ ‚Üî (T.mor‚ÇÅ = 0 ‚àß T.mor‚ÇÇ = 0) := by
  constructor
  ¬∑ intro h
    exact ‚ü®h.eq_of_tgt _ _, h.eq_of_src _ _‚ü©
  ¬∑ intro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    obtain ‚ü®f, hf‚ü© := coyoneda_exact‚ÇÇ T hT (ùüô _) (by rw [h‚ÇÇ, comp_zero])
    rw [IsZero.iff_id_eq_zero, hf, h‚ÇÅ, comp_zero]

lemma isZero‚ÇÅ_iff : IsZero T.obj‚ÇÅ ‚Üî (T.mor‚ÇÅ = 0 ‚àß T.mor‚ÇÉ = 0) := by
  refine' (isZero‚ÇÇ_iff _ (inv_rot_of_distTriang _ hT)).trans _
  dsimp
  simp only [neg_eq_zero, IsIso.comp_right_eq_zero, Functor.map_eq_zero_iff]
  tauto

lemma isZero‚ÇÉ_iff : IsZero T.obj‚ÇÉ ‚Üî (T.mor‚ÇÇ = 0 ‚àß T.mor‚ÇÉ = 0) := by
  refine' (isZero‚ÇÇ_iff _ (rot_of_distTriang _ hT)).trans _
  dsimp
  tauto

lemma isZero‚ÇÅ_of_isZero‚ÇÇ‚ÇÉ (h‚ÇÇ : IsZero T.obj‚ÇÇ) (h‚ÇÉ : IsZero T.obj‚ÇÉ) : IsZero T.obj‚ÇÅ := by
  rw [T.isZero‚ÇÅ_iff hT]
  exact ‚ü®h‚ÇÇ.eq_of_tgt _ _, h‚ÇÉ.eq_of_src _ _‚ü©

lemma isZero‚ÇÇ_of_isZero‚ÇÅ‚ÇÉ (h‚ÇÅ : IsZero T.obj‚ÇÅ) (h‚ÇÉ : IsZero T.obj‚ÇÉ) : IsZero T.obj‚ÇÇ := by
  rw [T.isZero‚ÇÇ_iff hT]
  exact ‚ü®h‚ÇÅ.eq_of_src _ _, h‚ÇÉ.eq_of_tgt _ _‚ü©

lemma isZero‚ÇÉ_of_isZero‚ÇÅ‚ÇÇ (h‚ÇÅ : IsZero T.obj‚ÇÅ) (h‚ÇÇ : IsZero T.obj‚ÇÇ) : IsZero T.obj‚ÇÉ :=
  isZero‚ÇÇ_of_isZero‚ÇÅ‚ÇÉ _ (rot_of_distTriang _ hT) h‚ÇÇ (by
    dsimp
    simp only [IsZero.iff_id_eq_zero] at h‚ÇÅ ‚ä¢
    rw [‚Üê Functor.map_id, h‚ÇÅ, Functor.map_zero])

lemma isZero‚ÇÅ_iff_isIso‚ÇÇ :
    IsZero T.obj‚ÇÅ ‚Üî IsIso T.mor‚ÇÇ := by
  rw [T.isZero‚ÇÅ_iff hT]
  constructor
  ¬∑ intro ‚ü®h‚ÇÅ, h‚ÇÉ‚ü©
    have := T.epi‚ÇÇ hT h‚ÇÉ
    obtain ‚ü®f, hf‚ü© := yoneda_exact‚ÇÇ T hT (ùüô _) (by rw [h‚ÇÅ, zero_comp])
    exact ‚ü®f, hf.symm, by rw [‚Üê cancel_epi T.mor‚ÇÇ, comp_id, ‚Üê reassoc_of% hf]‚ü©
  ¬∑ intro
    rw [T.mor‚ÇÅ_eq_zero_iff_mono‚ÇÇ hT, T.mor‚ÇÉ_eq_zero_iff_epi‚ÇÇ hT]
    constructor <;> infer_instance

lemma isZero‚ÇÇ_iff_isIso‚ÇÉ : IsZero T.obj‚ÇÇ ‚Üî IsIso T.mor‚ÇÉ :=
  isZero‚ÇÅ_iff_isIso‚ÇÇ _ (rot_of_distTriang _ hT)

lemma isZero‚ÇÉ_iff_isIso‚ÇÅ : IsZero T.obj‚ÇÉ ‚Üî IsIso T.mor‚ÇÅ := by
  refine' Iff.trans _ (Triangle.isZero‚ÇÅ_iff_isIso‚ÇÇ _ (inv_rot_of_distTriang _ hT))
  dsimp
  simp only [IsZero.iff_id_eq_zero, ‚Üê Functor.map_id, Functor.map_eq_zero_iff]

lemma isZero‚ÇÅ_of_isIso‚ÇÇ (h : IsIso T.mor‚ÇÇ) : IsZero T.obj‚ÇÅ := (T.isZero‚ÇÅ_iff_isIso‚ÇÇ hT).2 h
lemma isZero‚ÇÇ_of_isIso‚ÇÉ (h : IsIso T.mor‚ÇÉ) : IsZero T.obj‚ÇÇ := (T.isZero‚ÇÇ_iff_isIso‚ÇÉ hT).2 h
lemma isZero‚ÇÉ_of_isIso‚ÇÅ (h : IsIso T.mor‚ÇÅ) : IsZero T.obj‚ÇÉ := (T.isZero‚ÇÉ_iff_isIso‚ÇÅ hT).2 h

lemma shift_distinguished (n : ‚Ñ§) :
    (CategoryTheory.shiftFunctor (Triangle C) n).obj T ‚àà distTriang C := by
  revert T hT
  let H : ‚Ñ§ ‚Üí Prop := fun n => ‚àÄ (T : Triangle C) (_ : T ‚àà distTriang C),
    (Triangle.shiftFunctor C n).obj T ‚àà distTriang C
  change H n
  have H_zero : H 0 := fun T hT =>
    isomorphic_distinguished _ hT _ ((Triangle.shiftFunctorZero C).app T)
  have H_one : H 1 := fun T hT =>
    isomorphic_distinguished _ (rot_of_distTriang _
      (rot_of_distTriang _ (rot_of_distTriang _ hT))) _
        ((rotateRotateRotateIso C).symm.app T)
  have H_neg_one : H (-1) := fun T hT =>
    isomorphic_distinguished _ (inv_rot_of_distTriang _
      (inv_rot_of_distTriang _ (inv_rot_of_distTriang _ hT))) _
        ((invRotateInvRotateInvRotateIso C).symm.app T)
  have H_add : ‚àÄ {a b c : ‚Ñ§}, H a ‚Üí H b ‚Üí a + b = c ‚Üí H c := fun {a b c} ha hb hc T hT =>
    isomorphic_distinguished _ (hb _ (ha _ hT)) _
      ((Triangle.shiftFunctorAdd' C _ _ _ hc).app T)
  obtain (n|n) := n
  ¬∑ induction' n with n hn
    ¬∑ exact H_zero
    ¬∑ exact H_add hn H_one rfl
  ¬∑ induction' n with n hn
    ¬∑ exact H_neg_one
    ¬∑ exact H_add hn H_neg_one rfl

end Triangle

instance : SplitEpiCategory C where
  isSplitEpi_of_epi f hf := by
    obtain ‚ü®Z, g, h, hT‚ü© := distinguished_cocone_triangle f
    obtain ‚ü®r, hr‚ü© := Triangle.coyoneda_exact‚ÇÇ _ hT (ùüô _)
      (by rw [Triangle.mor‚ÇÇ_eq_zero_of_epi‚ÇÅ _ hT hf, comp_zero])
    exact ‚ü®r, hr.symm‚ü©

instance : SplitMonoCategory C where
  isSplitMono_of_mono f hf := by
    obtain ‚ü®X, g, h, hT‚ü© := distinguished_cocone_triangle‚ÇÅ f
    obtain ‚ü®r, hr‚ü© := Triangle.yoneda_exact‚ÇÇ _ hT (ùüô _) (by
      rw [Triangle.mor‚ÇÅ_eq_zero_of_mono‚ÇÇ _ hT hf, zero_comp])
    exact ‚ü®r, hr.symm‚ü©

lemma isIso‚ÇÇ_of_isIso‚ÇÅ‚ÇÉ {T T' : Triangle C} (œÜ : T ‚ü∂ T') (hT : T ‚àà distTriang C)
    (hT' : T' ‚àà distTriang C) (h‚ÇÅ : IsIso œÜ.hom‚ÇÅ) (h‚ÇÉ : IsIso œÜ.hom‚ÇÉ) : IsIso œÜ.hom‚ÇÇ := by
  have : Mono œÜ.hom‚ÇÇ := by
    rw [mono_iff_cancel_zero]
    intro A f hf
    obtain ‚ü®g, rfl‚ü© := Triangle.coyoneda_exact‚ÇÇ _ hT f
      (by rw [‚Üê cancel_mono œÜ.hom‚ÇÉ, assoc, œÜ.comm‚ÇÇ, reassoc_of% hf, zero_comp, zero_comp])
    rw [assoc] at hf
    obtain ‚ü®h, hh‚ü© := Triangle.coyoneda_exact‚ÇÇ T'.invRotate (inv_rot_of_distTriang _ hT')
      (g ‚â´ œÜ.hom‚ÇÅ) (by dsimp; rw [assoc, ‚Üê œÜ.comm‚ÇÅ, hf])
    obtain ‚ü®k, rfl‚ü© : ‚àÉ (k : A ‚ü∂ T.invRotate.obj‚ÇÅ), k ‚â´ T.invRotate.mor‚ÇÅ = g := by
      refine' ‚ü®h ‚â´ inv (œÜ.hom‚ÇÉ‚ü¶(-1 : ‚Ñ§)‚üß'), _‚ü©
      have eq := ((invRotate C).map œÜ).comm‚ÇÅ
      dsimp only [invRotate] at eq
      rw [‚Üê cancel_mono œÜ.hom‚ÇÅ, assoc, assoc, eq, IsIso.inv_hom_id_assoc, hh]
    erw [assoc, comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ (inv_rot_of_distTriang _ hT), comp_zero]
  refine' isIso_of_yoneda_map_bijective _ (fun A => ‚ü®_, _‚ü©)
  ¬∑ intro f‚ÇÅ f‚ÇÇ h
    simpa only [‚Üê cancel_mono œÜ.hom‚ÇÇ] using h
  ¬∑ intro y‚ÇÇ
    obtain ‚ü®x‚ÇÉ, hx‚ÇÉ‚ü© : ‚àÉ (x‚ÇÉ : A ‚ü∂ T.obj‚ÇÉ), x‚ÇÉ ‚â´ œÜ.hom‚ÇÉ = y‚ÇÇ ‚â´ T'.mor‚ÇÇ :=
      ‚ü®y‚ÇÇ ‚â´ T'.mor‚ÇÇ ‚â´ inv œÜ.hom‚ÇÉ, by simp‚ü©
    obtain ‚ü®x‚ÇÇ, hx‚ÇÇ‚ü© := Triangle.coyoneda_exact‚ÇÉ _ hT x‚ÇÉ
      (by rw [‚Üê cancel_mono (œÜ.hom‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß'), assoc, zero_comp, œÜ.comm‚ÇÉ, reassoc_of% hx‚ÇÉ,
        comp_distTriang_mor_zero‚ÇÇ‚ÇÉ _ hT', comp_zero])
    obtain ‚ü®y‚ÇÅ, hy‚ÇÅ‚ü© := Triangle.coyoneda_exact‚ÇÇ _ hT' (y‚ÇÇ - x‚ÇÇ ‚â´ œÜ.hom‚ÇÇ)
      (by rw [sub_comp, assoc, ‚Üê œÜ.comm‚ÇÇ, ‚Üê reassoc_of% hx‚ÇÇ, hx‚ÇÉ, sub_self])
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© : ‚àÉ (x‚ÇÅ : A ‚ü∂ T.obj‚ÇÅ), x‚ÇÅ ‚â´ œÜ.hom‚ÇÅ = y‚ÇÅ := ‚ü®y‚ÇÅ ‚â´ inv œÜ.hom‚ÇÅ, by simp‚ü©
    refine' ‚ü®x‚ÇÇ + x‚ÇÅ ‚â´ T.mor‚ÇÅ, _‚ü©
    dsimp
    rw [add_comp, assoc, œÜ.comm‚ÇÅ, reassoc_of% hx‚ÇÅ, ‚Üê hy‚ÇÅ, add_sub_cancel]

lemma isIso‚ÇÉ_of_isIso‚ÇÅ‚ÇÇ {T T' : Triangle C} (œÜ : T ‚ü∂ T') (hT : T ‚àà distTriang C)
    (hT' : T' ‚àà distTriang C) (h‚ÇÅ : IsIso œÜ.hom‚ÇÅ) (h‚ÇÇ : IsIso œÜ.hom‚ÇÇ) : IsIso œÜ.hom‚ÇÉ :=
  isIso‚ÇÇ_of_isIso‚ÇÅ‚ÇÉ ((rotate C).map œÜ) (rot_of_distTriang _ hT)
    (rot_of_distTriang _ hT') h‚ÇÇ (by dsimp; infer_instance)

lemma isIso‚ÇÅ_of_isIso‚ÇÇ‚ÇÉ {T T' : Triangle C} (œÜ : T ‚ü∂ T') (hT : T ‚àà distTriang C)
    (hT' : T' ‚àà distTriang C) (h‚ÇÇ : IsIso œÜ.hom‚ÇÇ) (h‚ÇÉ : IsIso œÜ.hom‚ÇÉ) : IsIso œÜ.hom‚ÇÅ :=
  isIso‚ÇÇ_of_isIso‚ÇÅ‚ÇÉ ((invRotate C).map œÜ) (inv_rot_of_distTriang _ hT)
    (inv_rot_of_distTriang _ hT') (by dsimp; infer_instance) (by dsimp; infer_instance)

/-- Given a distinguished triangle `T` such that `T.mor‚ÇÉ = 0` and the datum of morphisms
`inr : T.obj‚ÇÉ ‚ü∂ T.obj‚ÇÇ` and `fst : T.obj‚ÇÇ ‚ü∂ T.obj‚ÇÅ` satisfying suitable relations, this
is the binary biproduct data expressing that `T.obj‚ÇÇ` identifies to the binary
biproduct of `T.obj‚ÇÅ` and `T.obj‚ÇÉ`.
See also `exists_iso_binaryBiproduct_of_distTriang`. -/
@[simps]
def binaryBiproductData (T : Triangle C) (hT : T ‚àà distTriang C) (hT‚ÇÄ : T.mor‚ÇÉ = 0)
    (inr : T.obj‚ÇÉ ‚ü∂ T.obj‚ÇÇ) (inr_snd : inr ‚â´ T.mor‚ÇÇ = ùüô _) (fst : T.obj‚ÇÇ ‚ü∂ T.obj‚ÇÅ)
    (total : fst ‚â´ T.mor‚ÇÅ + T.mor‚ÇÇ ‚â´ inr = ùüô T.obj‚ÇÇ) :
    BinaryBiproductData T.obj‚ÇÅ T.obj‚ÇÉ := by
  have : Mono T.mor‚ÇÅ := T.mono‚ÇÅ hT hT‚ÇÄ
  have eq : fst ‚â´ T.mor‚ÇÅ = ùüô T.obj‚ÇÇ - T.mor‚ÇÇ ‚â´ inr := by rw [‚Üê total, add_sub_cancel_right]
  exact
    { bicone :=
      { pt := T.obj‚ÇÇ
        fst := fst
        snd := T.mor‚ÇÇ
        inl := T.mor‚ÇÅ
        inr := inr
        inl_fst := by
          simp only [‚Üê cancel_mono T.mor‚ÇÅ, assoc, id_comp, eq, comp_sub, comp_id,
            comp_distTriang_mor_zero‚ÇÅ‚ÇÇ_assoc _ hT, zero_comp, sub_zero]
        inl_snd := comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ hT
        inr_fst := by
          simp only [‚Üê cancel_mono T.mor‚ÇÅ, assoc, eq, comp_sub, reassoc_of% inr_snd,
            comp_id, sub_self, zero_comp]
        inr_snd := inr_snd }
      isBilimit := isBinaryBilimitOfTotal _ total }

instance : HasBinaryBiproducts C := ‚ü®fun X‚ÇÅ X‚ÇÉ => by
  obtain ‚ü®X‚ÇÇ, inl, snd, mem‚ü© := distinguished_cocone_triangle‚ÇÇ (0 : X‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)
  obtain ‚ü®inr : X‚ÇÉ ‚ü∂ X‚ÇÇ, inr_snd : ùüô _ = inr ‚â´ snd‚ü© :=
    Triangle.coyoneda_exact‚ÇÉ _ mem (ùüô X‚ÇÉ) (by simp)
  obtain ‚ü®fst : X‚ÇÇ ‚ü∂ X‚ÇÅ, hfst : ùüô X‚ÇÇ - snd ‚â´ inr = fst ‚â´ inl‚ü© :=
    Triangle.coyoneda_exact‚ÇÇ _ mem (ùüô X‚ÇÇ - snd ‚â´ inr) (by
      dsimp
      simp only [sub_comp, assoc, id_comp, ‚Üê inr_snd, comp_id, sub_self])
  refine' ‚ü®‚ü®binaryBiproductData _ mem rfl inr inr_snd.symm fst _‚ü©‚ü©
  dsimp
  simp only [‚Üê hfst, sub_add_cancel]‚ü©

instance : HasFiniteProducts C := hasFiniteProducts_of_has_binary_and_terminal
instance : HasFiniteCoproducts C := hasFiniteCoproducts_of_has_binary_and_initial
instance : HasFiniteBiproducts C := HasFiniteBiproducts.of_hasFiniteProducts

lemma exists_iso_binaryBiproduct_of_distTriang (T : Triangle C) (hT : T ‚àà distTriang C)
    (zero : T.mor‚ÇÉ = 0) :
    ‚àÉ (e : T.obj‚ÇÇ ‚âÖ T.obj‚ÇÅ ‚äû T.obj‚ÇÉ), T.mor‚ÇÅ ‚â´ e.hom = biprod.inl ‚àß
      T.mor‚ÇÇ = e.hom ‚â´ biprod.snd := by
  have := T.epi‚ÇÇ hT zero
  have := isSplitEpi_of_epi T.mor‚ÇÇ
  obtain ‚ü®fst, hfst‚ü© := T.coyoneda_exact‚ÇÇ hT (ùüô T.obj‚ÇÇ - T.mor‚ÇÇ ‚â´ section_ T.mor‚ÇÇ) (by simp)
  let d := binaryBiproductData _ hT zero (section_ T.mor‚ÇÇ) (by simp) fst
    (by simp only [‚Üê hfst, sub_add_cancel])
  refine' ‚ü®biprod.uniqueUpToIso _ _ d.isBilimit, ‚ü®_, by simp [d]‚ü©‚ü©
  ext
  ¬∑ simpa [d] using d.bicone.inl_fst
  ¬∑ simpa [d] using d.bicone.inl_snd

lemma binaryBiproductTriangle_distinguished (X‚ÇÅ X‚ÇÇ : C) :
    binaryBiproductTriangle X‚ÇÅ X‚ÇÇ ‚àà distTriang C := by
  obtain ‚ü®Y, g, h, mem‚ü© := distinguished_cocone_triangle‚ÇÇ (0 : X‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)
  obtain ‚ü®e, ‚ü®he‚ÇÅ, he‚ÇÇ‚ü©‚ü© := exists_iso_binaryBiproduct_of_distTriang _ mem rfl
  dsimp at he‚ÇÅ he‚ÇÇ
  refine' isomorphic_distinguished _ mem _ (Iso.symm _)
  refine' Triangle.isoMk _ _ (Iso.refl _) e (Iso.refl _)
    (by aesop_cat) (by aesop_cat) (by aesop_cat)

lemma binaryProductTriangle_distinguished (X‚ÇÅ X‚ÇÇ : C) :
    binaryProductTriangle X‚ÇÅ X‚ÇÇ ‚àà distTriang C :=
  isomorphic_distinguished _ (binaryBiproductTriangle_distinguished X‚ÇÅ X‚ÇÇ) _
    (binaryProductTriangleIsoBinaryBiproductTriangle X‚ÇÅ X‚ÇÇ)

/-- A chosen extension of a commutative square into a morphism of distinguished triangles. -/
@[simps hom‚ÇÅ hom‚ÇÇ]
def completeDistinguishedTriangleMorphism (T‚ÇÅ T‚ÇÇ : Triangle C)
    (hT‚ÇÅ : T‚ÇÅ ‚àà distTriang C) (hT‚ÇÇ : T‚ÇÇ ‚àà distTriang C)
    (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (comm : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ) :
    T‚ÇÅ ‚ü∂ T‚ÇÇ :=
    have h := complete_distinguished_triangle_morphism _ _ hT‚ÇÅ hT‚ÇÇ a b comm
    { hom‚ÇÅ := a
      hom‚ÇÇ := b
      hom‚ÇÉ := h.choose
      comm‚ÇÅ := comm
      comm‚ÇÇ := h.choose_spec.1
      comm‚ÇÉ := h.choose_spec.2 }

/-- A product of distinguished triangles is distinguished -/
lemma productTriangle_distinguished {J : Type*} (T : J ‚Üí Triangle C)
    (hT : ‚àÄ j, T j ‚àà distTriang C)
    [HasProduct (fun j => (T j).obj‚ÇÅ)] [HasProduct (fun j => (T j).obj‚ÇÇ)]
    [HasProduct (fun j => (T j).obj‚ÇÉ)] [HasProduct (fun j => (T j).obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)] :
    productTriangle T ‚àà distTriang C := by
  /- The proof proceeds by constructing a morphism of triangles
    `œÜ' : T' ‚ü∂ productTriangle T` with `T'` distinguished, and such that
    `œÜ'.hom‚ÇÅ` and `œÜ'.hom‚ÇÇ` are identities. Then, it suffices to show that
    `œÜ'.hom‚ÇÉ` is an isomorphism, which is achieved by using Yoneda's lemma
    and diagram chases. -/
  let f‚ÇÅ := Pi.map (fun j => (T j).mor‚ÇÅ)
  obtain ‚ü®Z, f‚ÇÇ, f‚ÇÉ, hT'‚ü© := distinguished_cocone_triangle f‚ÇÅ
  let T' := Triangle.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ
  change T' ‚àà distTriang C at hT'
  let œÜ : ‚àÄ j, T' ‚ü∂ T j := fun j => completeDistinguishedTriangleMorphism _ _
    hT' (hT j) (Pi.œÄ _ j) (Pi.œÄ _ j) (by simp [f‚ÇÅ, T'])
  let œÜ' := productTriangle.lift _ œÜ
  have h‚ÇÅ : œÜ'.hom‚ÇÅ = ùüô _ := by aesop_cat
  have h‚ÇÇ : œÜ'.hom‚ÇÇ = ùüô _ := by aesop_cat
  have : IsIso œÜ'.hom‚ÇÅ := by rw [h‚ÇÅ]; infer_instance
  have : IsIso œÜ'.hom‚ÇÇ := by rw [h‚ÇÇ]; infer_instance
  suffices IsIso œÜ'.hom‚ÇÉ by
    have : IsIso œÜ' := by
      apply Triangle.isIso_of_isIsos
      all_goals infer_instance
    exact isomorphic_distinguished _ hT' _ (asIso œÜ').symm
  refine' isIso_of_yoneda_map_bijective _ (fun A => ‚ü®_, _‚ü©)
  /- the proofs by diagram chase start here -/
  ¬∑ suffices Mono œÜ'.hom‚ÇÉ by
      intro a‚ÇÅ a‚ÇÇ ha
      simpa only [‚Üê cancel_mono œÜ'.hom‚ÇÉ] using ha
    rw [mono_iff_cancel_zero]
    intro A f hf
    have hf' : f ‚â´ T'.mor‚ÇÉ = 0 := by
      rw [‚Üê cancel_mono (œÜ'.hom‚ÇÅ‚ü¶1‚üß'), zero_comp, assoc, œÜ'.comm‚ÇÉ, reassoc_of% hf, zero_comp]
    obtain ‚ü®g, hg‚ü© := T'.coyoneda_exact‚ÇÉ hT' f hf'
    have hg' : ‚àÄ j, (g ‚â´ Pi.œÄ _ j) ‚â´ (T j).mor‚ÇÇ = 0 := fun j => by
      have : g ‚â´ T'.mor‚ÇÇ ‚â´ œÜ'.hom‚ÇÉ ‚â´ Pi.œÄ _ j = 0 :=
        by rw [‚Üê reassoc_of% hg, reassoc_of% hf, zero_comp]
      rw [œÜ'.comm‚ÇÇ_assoc, h‚ÇÇ, id_comp] at this
      simpa using this
    have hg'' := fun j => (T j).coyoneda_exact‚ÇÇ (hT j) _ (hg' j)
    let Œ± := fun j => (hg'' j).choose
    have hŒ± : ‚àÄ j, _ = Œ± j ‚â´ _ := fun j => (hg'' j).choose_spec
    have hg''' : g = Pi.lift Œ± ‚â´ T'.mor‚ÇÅ := by dsimp [f‚ÇÅ, T']; ext j; rw [hŒ±]; simp
    rw [hg, hg''', assoc, comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ hT', comp_zero]
  ¬∑ intro a
    obtain ‚ü®a', ha'‚ü© : ‚àÉ (a' : A ‚ü∂ Z), a' ‚â´ T'.mor‚ÇÉ = a ‚â´ (productTriangle T).mor‚ÇÉ := by
      have zero : ((productTriangle T).mor‚ÇÉ) ‚â´ (shiftFunctor C 1).map T'.mor‚ÇÅ = 0 := by
        rw [‚Üê cancel_mono (œÜ'.hom‚ÇÇ‚ü¶1‚üß'), zero_comp, assoc, ‚Üê Functor.map_comp, œÜ'.comm‚ÇÅ, h‚ÇÅ,
          id_comp, productTriangle.zero‚ÇÉ‚ÇÅ]
        intro j
        exact comp_distTriang_mor_zero‚ÇÉ‚ÇÅ _ (hT j)
      have ‚ü®g, hg‚ü© := T'.coyoneda_exact‚ÇÅ hT' (a ‚â´ (productTriangle T).mor‚ÇÉ) (by
        rw [assoc, zero, comp_zero])
      exact ‚ü®g, hg.symm‚ü©
    have ha'' := fun (j : J) => (T j).coyoneda_exact‚ÇÉ (hT j) ((a - a' ‚â´ œÜ'.hom‚ÇÉ) ‚â´ Pi.œÄ _ j) (by
      simp only [sub_comp, assoc]
      erw [‚Üê (productTriangle.œÄ T j).comm‚ÇÉ]
      rw [‚Üê œÜ'.comm‚ÇÉ_assoc]
      rw [reassoc_of% ha', sub_eq_zero, h‚ÇÅ, Functor.map_id, id_comp])
    let b := fun j => (ha'' j).choose
    have hb : ‚àÄ j, _  = b j ‚â´ _ := fun j => (ha'' j).choose_spec
    have hb' : a - a' ‚â´ œÜ'.hom‚ÇÉ = Pi.lift b ‚â´ (productTriangle T).mor‚ÇÇ :=
      Limits.Pi.hom_ext _ _ (fun j => by rw [hb]; simp)
    have : (a' + (by exact Pi.lift b) ‚â´ T'.mor‚ÇÇ) ‚â´ œÜ'.hom‚ÇÉ = a := by
      rw [add_comp, assoc, œÜ'.comm‚ÇÇ, h‚ÇÇ, id_comp, ‚Üê hb', add_sub_cancel]
    exact ‚ü®_, this‚ü©

lemma exists_iso_of_arrow_iso (T‚ÇÅ T‚ÇÇ : Triangle C) (hT‚ÇÅ : T‚ÇÅ ‚àà distTriang C)
    (hT‚ÇÇ : T‚ÇÇ ‚àà distTriang C) (e : Arrow.mk T‚ÇÅ.mor‚ÇÅ ‚âÖ Arrow.mk T‚ÇÇ.mor‚ÇÅ) :
    ‚àÉ (e' : T‚ÇÅ ‚âÖ T‚ÇÇ), e'.hom.hom‚ÇÅ = e.hom.left ‚àß e'.hom.hom‚ÇÇ = e.hom.right := by
  let œÜ := completeDistinguishedTriangleMorphism T‚ÇÅ T‚ÇÇ hT‚ÇÅ hT‚ÇÇ e.hom.left e.hom.right e.hom.w.symm
  have : IsIso œÜ.hom‚ÇÅ := by dsimp [œÜ]; infer_instance
  have : IsIso œÜ.hom‚ÇÇ := by dsimp [œÜ]; infer_instance
  have : IsIso œÜ.hom‚ÇÉ := isIso‚ÇÉ_of_isIso‚ÇÅ‚ÇÇ œÜ hT‚ÇÅ hT‚ÇÇ inferInstance inferInstance
  have : IsIso œÜ := by
    apply Triangle.isIso_of_isIsos
    all_goals infer_instance
  exact ‚ü®asIso œÜ, by simp [œÜ], by simp [œÜ]‚ü©

/-- A choice of isomorphism `T‚ÇÅ ‚âÖ T‚ÇÇ` between two distinguished triangles
when we are given two isomorphisms `e‚ÇÅ : T‚ÇÅ.obj‚ÇÅ ‚âÖ T‚ÇÇ.obj‚ÇÅ` and `e‚ÇÇ : T‚ÇÅ.obj‚ÇÇ ‚âÖ T‚ÇÇ.obj‚ÇÇ`. -/
@[simps! hom_hom‚ÇÅ hom_hom‚ÇÇ inv_hom‚ÇÅ inv_hom‚ÇÇ]
def isoTriangleOfIso‚ÇÅ‚ÇÇ (T‚ÇÅ T‚ÇÇ : Triangle C) (hT‚ÇÅ : T‚ÇÅ ‚àà distTriang C)
    (hT‚ÇÇ : T‚ÇÇ ‚àà distTriang C) (e‚ÇÅ : T‚ÇÅ.obj‚ÇÅ ‚âÖ T‚ÇÇ.obj‚ÇÅ) (e‚ÇÇ : T‚ÇÅ.obj‚ÇÇ ‚âÖ T‚ÇÇ.obj‚ÇÇ)
    (comm : T‚ÇÅ.mor‚ÇÅ ‚â´ e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ T‚ÇÇ.mor‚ÇÅ) : T‚ÇÅ ‚âÖ T‚ÇÇ := by
  have h := exists_iso_of_arrow_iso T‚ÇÅ T‚ÇÇ hT‚ÇÅ hT‚ÇÇ (Arrow.isoMk e‚ÇÅ e‚ÇÇ comm.symm)
  exact Triangle.isoMk _ _ e‚ÇÅ e‚ÇÇ (Triangle.œÄ‚ÇÉ.mapIso h.choose) comm (by
    have eq := h.choose_spec.2
    dsimp at eq ‚ä¢
    conv_rhs => rw [‚Üê eq, ‚Üê TriangleMorphism.comm‚ÇÇ]) (by
    have eq := h.choose_spec.1
    dsimp at eq ‚ä¢
    conv_lhs => rw [‚Üê eq, TriangleMorphism.comm‚ÇÉ])

end Pretriangulated

end CategoryTheory
