/-
Copyright (c) 2021 Luke Kershaw. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Luke Kershaw
-/
import Mathlib.CategoryTheory.Preadditive.AdditiveFunctor
import Mathlib.CategoryTheory.Shift.Basic
import Mathlib.CategoryTheory.Triangulated.Rotate

#align_import category_theory.triangulated.pretriangulated from "leanprover-community/mathlib"@"6876fa15e3158ff3e4a4e2af1fb6e1945c6e8803"

/-!
# Pretriangulated Categories

This file contains the definition of pretriangulated categories and triangulated functors
between them.

## Implementation Notes

We work under the assumption that pretriangulated categories are preadditive categories,
but not necessarily additive categories, as is assumed in some sources.

TODO: generalise this to n-angulated categories as in https://arxiv.org/abs/1006.4592
-/


noncomputable section

open CategoryTheory

open CategoryTheory.Preadditive

open CategoryTheory.Limits

universe v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Pretriangulated ZeroObject

/-
We work in a preadditive category `C` equipped with an additive shift.
-/
variable (C : Type u) [Category.{v} C] [HasZeroObject C] [HasShift C ‚Ñ§] [Preadditive C]

/-- A preadditive category `C` with an additive shift, and a class of "distinguished triangles"
relative to that shift is called pretriangulated if the following hold:
* Any triangle that is isomorphic to a distinguished triangle is also distinguished.
* Any triangle of the form `(X,X,0,id,0,0)` is distinguished.
* For any morphism `f : X ‚ü∂ Y` there exists a distinguished triangle of the form `(X,Y,Z,f,g,h)`.
* The triangle `(X,Y,Z,f,g,h)` is distinguished if and only if `(Y,Z,X‚ü¶1‚üß,g,h,-f‚ü¶1‚üß)` is.
* Given a diagram:
  ```
        f       g       h
    X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
    ‚îÇ       ‚îÇ                ‚îÇ
    ‚îÇa      ‚îÇb               ‚îÇa‚ü¶1‚üß'
    V       V                V
    X' ‚îÄ‚îÄ‚îÄ> Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß
        f'      g'      h'
  ```
  where the left square commutes, and whose rows are distinguished triangles,
  there exists a morphism `c : Z ‚ü∂ Z'` such that `(a,b,c)` is a triangle morphism.

See <https://stacks.math.columbia.edu/tag/0145>
-/
class Pretriangulated [‚àÄ n : ‚Ñ§, Functor.Additive (shiftFunctor C n)] where
  /-- a class of triangle which are called `distinguished` -/
  distinguishedTriangles : Set (Triangle C)
  /-- a triangle that is isomorphic to a distinguished triangle is distinguished -/
  isomorphic_distinguished :
    ‚àÄ T‚ÇÅ ‚àà distinguishedTriangles, ‚àÄ (T‚ÇÇ) (_ : T‚ÇÇ ‚âÖ T‚ÇÅ), T‚ÇÇ ‚àà distinguishedTriangles
  /-- obvious triangles `X ‚ü∂ X ‚ü∂ 0 ‚ü∂ X‚ü¶1‚üß` are distinguished -/
  contractible_distinguished : ‚àÄ X : C, contractibleTriangle X ‚àà distinguishedTriangles
  /-- any morphism `X ‚ü∂ Y` is part of a distinguished triangle `X ‚ü∂ Y ‚ü∂ Z ‚ü∂ X‚ü¶1‚üß` -/
  distinguished_cocone_triangle :
    ‚àÄ {X Y : C} (f : X ‚ü∂ Y),
      ‚àÉ (Z : C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß), Triangle.mk f g h ‚àà distinguishedTriangles
  /-- a triangle is distinguished iff it is so after rotating it -/
  rotate_distinguished_triangle :
    ‚àÄ T : Triangle C, T ‚àà distinguishedTriangles ‚Üî T.rotate ‚àà distinguishedTriangles
  /-- given two distinguished triangle, a commutative square
        can be extended as morphism of triangles -/
  complete_distinguished_triangle_morphism :
    ‚àÄ (T‚ÇÅ T‚ÇÇ : Triangle C) (_ : T‚ÇÅ ‚àà distinguishedTriangles) (_ : T‚ÇÇ ‚àà distinguishedTriangles)
      (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (_ : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ),
      ‚àÉ c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ, T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶1‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ
#align category_theory.pretriangulated CategoryTheory.Pretriangulated


namespace Pretriangulated

variable [‚àÄ n : ‚Ñ§, Functor.Additive (shiftFunctor C n)] [hC : Pretriangulated C]

-- porting note: increased the priority so that we can write `T ‚àà distTriang C`, and
-- not just `T ‚àà (distTriang C)`
/-- distinguished triangles in a pretriangulated category -/
notation:60 "distTriang " C => @distinguishedTriangles C _ _ _ _ _ _

variable {C}

lemma distinguished_iff_of_iso {T‚ÇÅ T‚ÇÇ : Triangle C} (e : T‚ÇÅ ‚âÖ T‚ÇÇ) :
    (T‚ÇÅ ‚àà distTriang C) ‚Üî T‚ÇÇ ‚àà distTriang C :=
  ‚ü®fun hT‚ÇÅ => isomorphic_distinguished _ hT‚ÇÅ _ e.symm,
    fun hT‚ÇÇ => isomorphic_distinguished _ hT‚ÇÇ _ e‚ü©

/-- Given any distinguished triangle `T`, then we know `T.rotate` is also distinguished.
-/
theorem rot_of_dist_triangle (T : Triangle C) (H : T ‚àà distTriang C) : T.rotate ‚àà distTriang C :=
  (rotate_distinguished_triangle T).mp H
#align category_theory.pretriangulated.rot_of_dist_triangle CategoryTheory.Pretriangulated.rot_of_dist_triangle

/-- Given any distinguished triangle `T`, then we know `T.inv_rotate` is also distinguished.
-/
theorem inv_rot_of_dist_triangle (T : Triangle C) (H : T ‚àà distTriang C) :
    T.invRotate ‚àà distTriang C :=
  (rotate_distinguished_triangle T.invRotate).mpr
    (isomorphic_distinguished T H T.invRotate.rotate (invRotCompRot.app T))
#align category_theory.pretriangulated.inv_rot_of_dist_triangle CategoryTheory.Pretriangulated.inv_rot_of_dist_triangle

/-- Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `f ‚â´ g = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
@[reassoc]
theorem comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ (T) (H : T ‚àà (distTriang C)) : T.mor‚ÇÅ ‚â´ T.mor‚ÇÇ = 0 := by
  obtain ‚ü®c, hc‚ü© :=
    complete_distinguished_triangle_morphism _ _ (contractible_distinguished T.obj‚ÇÅ) H (ùüô T.obj‚ÇÅ)
      T.mor‚ÇÅ rfl
  simpa only [contractibleTriangle_mor‚ÇÇ, zero_comp] using hc.left.symm
#align category_theory.pretriangulated.comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ CategoryTheory.Pretriangulated.comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ

/-- Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `g ‚â´ h = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
@[reassoc]
theorem comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ (T : Triangle C) (H : T ‚àà distTriang C) :
  T.mor‚ÇÇ ‚â´ T.mor‚ÇÉ = 0 :=
  comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ T.rotate (rot_of_dist_triangle T H)
#align category_theory.pretriangulated.comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ CategoryTheory.Pretriangulated.comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ

/-- Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `h ‚â´ f‚ü¶1‚üß = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
@[reassoc]
theorem comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ (T : Triangle C) (H : T ‚àà distTriang C) :
    T.mor‚ÇÉ ‚â´ (shiftEquiv C 1).functor.map T.mor‚ÇÅ = 0 := by
  have H‚ÇÇ := rot_of_dist_triangle T.rotate (rot_of_dist_triangle T H)
  simpa using comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ T.rotate.rotate H‚ÇÇ
#align category_theory.pretriangulated.comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ CategoryTheory.Pretriangulated.comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ

/-- Any morphism `Y ‚ü∂ Z` is part of a distinguished triangle `X ‚ü∂ Y ‚ü∂ Z ‚ü∂ X‚ü¶1‚üß` -/
lemma distinguished_cocone_triangle‚ÇÅ {Y Z : C} (g : Y ‚ü∂ Z) :
    ‚àÉ (X : C) (f : X ‚ü∂ Y) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß), Triangle.mk f g h ‚àà distTriang C := by
  obtain ‚ü®X', f', g', mem‚ü© := distinguished_cocone_triangle g
  exact ‚ü®_, _, _, inv_rot_of_dist_triangle _ mem‚ü©

/-- Any morphism `Z ‚ü∂ X‚ü¶1‚üß` is part of a distinguished triangle `X ‚ü∂ Y ‚ü∂ Z ‚ü∂ X‚ü¶1‚üß` -/
lemma distinguished_cocone_triangle‚ÇÇ {Z X : C} (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß) :
    ‚àÉ (Y : C) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), Triangle.mk f g h ‚àà distTriang C := by
  obtain ‚ü®Y', f', g', mem‚ü© := distinguished_cocone_triangle h
  let T' := (Triangle.mk h f' g').invRotate.invRotate
  refine' ‚ü®T'.obj‚ÇÇ, ((shiftEquiv C (1 : ‚Ñ§)).unitIso.app X).hom ‚â´ T'.mor‚ÇÅ, T'.mor‚ÇÇ,
    isomorphic_distinguished _ (inv_rot_of_dist_triangle _ (inv_rot_of_dist_triangle _ mem)) _ _‚ü©
  exact Triangle.isoMk _ _ ((shiftEquiv C (1 : ‚Ñ§)).unitIso.app X) (Iso.refl _) (Iso.refl _)
    (by aesop_cat) (by aesop_cat)
    (by dsimp; simp only [shift_shiftFunctorCompIsoId_inv_app, id_comp])

/-- A commutative square involving the morphisms `mor‚ÇÇ` of two distinguished triangles
can be extended as morphism of triangles -/
lemma complete_distinguished_triangle_morphism‚ÇÅ (T‚ÇÅ T‚ÇÇ : Triangle C)
    (hT‚ÇÅ : T‚ÇÅ ‚àà distTriang C) (hT‚ÇÇ : T‚ÇÇ ‚àà distTriang C) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ)
    (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ) (comm : T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ) :
    ‚àÉ (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ), T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ ‚àß
      T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶(1 : ‚Ñ§)‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ := by
  obtain ‚ü®a, ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü©‚ü© := complete_distinguished_triangle_morphism _ _
    (rot_of_dist_triangle _ hT‚ÇÅ) (rot_of_dist_triangle _ hT‚ÇÇ) b c comm
  refine' ‚ü®(shiftFunctor C (1 : ‚Ñ§)).preimage a, ‚ü®_, _‚ü©‚ü©
  ¬∑ apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
    dsimp at ha‚ÇÇ
    rw [neg_comp, comp_neg, neg_inj] at ha‚ÇÇ
    simpa only [Functor.map_comp, Functor.image_preimage] using ha‚ÇÇ
  ¬∑ simpa only [Functor.image_preimage] using ha‚ÇÅ

/-- A commutative square involving the morphisms `mor‚ÇÉ` of two distinguished triangles
can be extended as morphism of triangles -/
lemma complete_distinguished_triangle_morphism‚ÇÇ (T‚ÇÅ T‚ÇÇ : Triangle C)
    (hT‚ÇÅ : T‚ÇÅ ‚àà distTriang C) (hT‚ÇÇ : T‚ÇÇ ‚àà distTriang C) (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ)
    (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ) (comm : T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶(1 : ‚Ñ§)‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ) :
    ‚àÉ (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ), T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ ‚àß T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ := by
  obtain ‚ü®a, ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü©‚ü© := complete_distinguished_triangle_morphism _ _
    (inv_rot_of_dist_triangle _ hT‚ÇÅ) (inv_rot_of_dist_triangle _ hT‚ÇÇ) (c‚ü¶(-1 : ‚Ñ§)‚üß') a (by
    dsimp
    simp only [neg_comp, comp_neg, ‚Üê Functor.map_comp_assoc, ‚Üê comm,
      Functor.map_comp, shift_shift_neg', Functor.id_obj, assoc, Iso.inv_hom_id_app, comp_id])
  refine' ‚ü®a, ‚ü®ha‚ÇÅ, _‚ü©‚ü©
  dsimp only [Triangle.invRotate, Triangle.mk] at ha‚ÇÇ
  rw [‚Üê cancel_mono ((shiftEquiv C (1 : ‚Ñ§)).counitIso.inv.app T‚ÇÇ.obj‚ÇÉ), assoc, assoc, ‚Üê ha‚ÇÇ]
  simp only [shiftEquiv'_counitIso, shift_neg_shift', assoc, Iso.inv_hom_id_app_assoc]

/-- Obvious triangles `0 ‚ü∂ X ‚ü∂ X ‚ü∂ 0‚ü¶1‚üß` are distinguished -/
lemma contractible_distinguished‚ÇÅ (X : C) :
    Triangle.mk (0 : 0 ‚ü∂ X) (ùüô X) 0 ‚àà distTriang C := by
  refine' isomorphic_distinguished _
    (inv_rot_of_dist_triangle _ (contractible_distinguished X)) _ _
  exact Triangle.isoMk _ _ (Functor.mapZeroObject _).symm (Iso.refl _) (Iso.refl _)
    (by aesop_cat) (by aesop_cat) (by aesop_cat)

/-- Obvious triangles `X ‚ü∂ 0 ‚ü∂ X‚ü¶1‚üß ‚ü∂ X‚ü¶1‚üß` are distinguished -/
lemma contractible_distinguished‚ÇÇ (X : C) :
    Triangle.mk (0 : X ‚ü∂ 0) 0 (ùüô (X‚ü¶1‚üß)) ‚àà distTriang C := by
  refine' isomorphic_distinguished _
    (inv_rot_of_dist_triangle _ (contractible_distinguished‚ÇÅ (X‚ü¶(1 : ‚Ñ§)‚üß))) _ _
  exact Triangle.isoMk _ _ ((shiftEquiv C (1 : ‚Ñ§)).unitIso.app X) (Iso.refl _) (Iso.refl _)
    (by aesop_cat) (by aesop_cat)
    (by dsimp; simp only [shift_shiftFunctorCompIsoId_inv_app, id_comp])

namespace Triangle

variable (T : Triangle C) (hT : T ‚àà distTriang C)

lemma yoneda_exact‚ÇÇ {X : C} (f : T.obj‚ÇÇ ‚ü∂ X) (hf : T.mor‚ÇÅ ‚â´ f = 0) :
    ‚àÉ (g : T.obj‚ÇÉ ‚ü∂ X), f = T.mor‚ÇÇ ‚â´ g := by
  obtain ‚ü®g, ‚ü®hg‚ÇÅ, _‚ü©‚ü© := complete_distinguished_triangle_morphism T _ hT
    (contractible_distinguished‚ÇÅ X) 0 f (by aesop_cat)
  exact ‚ü®g, by simpa using hg‚ÇÅ.symm‚ü©

lemma yoneda_exact‚ÇÉ {X : C} (f : T.obj‚ÇÉ ‚ü∂ X) (hf : T.mor‚ÇÇ ‚â´ f = 0) :
    ‚àÉ (g : T.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ X), f = T.mor‚ÇÉ ‚â´ g :=
  yoneda_exact‚ÇÇ _ (rot_of_dist_triangle _ hT) f hf

lemma coyoneda_exact‚ÇÇ {X : C} (f : X ‚ü∂ T.obj‚ÇÇ) (hf : f ‚â´ T.mor‚ÇÇ = 0) :
    ‚àÉ (g : X ‚ü∂ T.obj‚ÇÅ), f = g ‚â´ T.mor‚ÇÅ := by
  obtain ‚ü®a, ‚ü®ha‚ÇÅ, _‚ü©‚ü© := complete_distinguished_triangle_morphism‚ÇÅ _ T
    (contractible_distinguished X) hT f 0 (by aesop_cat)
  exact ‚ü®a, by simpa using ha‚ÇÅ‚ü©

lemma coyoneda_exact‚ÇÅ {X : C} (f : X ‚ü∂ T.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (hf : f ‚â´ T.mor‚ÇÅ‚ü¶1‚üß' = 0) :
    ‚àÉ (g : X ‚ü∂ T.obj‚ÇÉ), f = g ‚â´ T.mor‚ÇÉ :=
  coyoneda_exact‚ÇÇ _ (rot_of_dist_triangle _ (rot_of_dist_triangle _ hT)) f (by aesop_cat)

lemma coyoneda_exact‚ÇÉ {X : C} (f : X ‚ü∂ T.obj‚ÇÉ) (hf : f ‚â´ T.mor‚ÇÉ = 0) :
    ‚àÉ (g : X ‚ü∂ T.obj‚ÇÇ), f = g ‚â´ T.mor‚ÇÇ :=
  coyoneda_exact‚ÇÇ _ (rot_of_dist_triangle _ hT) f hf

lemma mor‚ÇÉ_eq_zero_iff_epi‚ÇÇ : T.mor‚ÇÉ = 0 ‚Üî Epi T.mor‚ÇÇ := by
  constructor
  ¬∑ intro h
    rw [epi_iff_cancel_zero]
    intro X g hg
    obtain ‚ü®f, rfl‚ü© := yoneda_exact‚ÇÉ T hT g hg
    rw [h, zero_comp]
  ¬∑ intro
    rw [‚Üê cancel_epi T.mor‚ÇÇ, comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ _ hT, comp_zero]

lemma mor‚ÇÇ_eq_zero_iff_epi‚ÇÅ : T.mor‚ÇÇ = 0 ‚Üî Epi T.mor‚ÇÅ := by
  have h := mor‚ÇÉ_eq_zero_iff_epi‚ÇÇ _ (inv_rot_of_dist_triangle _ hT)
  dsimp at h
  rw [‚Üê h, IsIso.comp_right_eq_zero]

lemma mor‚ÇÅ_eq_zero_iff_epi‚ÇÉ : T.mor‚ÇÅ = 0 ‚Üî Epi T.mor‚ÇÉ := by
  have h := mor‚ÇÉ_eq_zero_iff_epi‚ÇÇ _ (rot_of_dist_triangle _ hT)
  dsimp at h
  rw [‚Üê h, neg_eq_zero]
  constructor
  ¬∑ intro h
    simp only [h, Functor.map_zero]
  ¬∑ intro h
    rw [‚Üê (CategoryTheory.shiftFunctor C (1 : ‚Ñ§)).map_eq_zero_iff, h]

lemma mor‚ÇÉ_eq_zero_of_epi‚ÇÇ (h : Epi T.mor‚ÇÇ) : T.mor‚ÇÉ = 0 := (T.mor‚ÇÉ_eq_zero_iff_epi‚ÇÇ hT).2 h
lemma mor‚ÇÇ_eq_zero_of_epi‚ÇÅ (h : Epi T.mor‚ÇÅ) : T.mor‚ÇÇ = 0 := (T.mor‚ÇÇ_eq_zero_iff_epi‚ÇÅ hT).2 h
lemma mor‚ÇÅ_eq_zero_of_epi‚ÇÉ (h : Epi T.mor‚ÇÉ) : T.mor‚ÇÅ = 0 := (T.mor‚ÇÅ_eq_zero_iff_epi‚ÇÉ hT).2 h

lemma epi‚ÇÇ (h : T.mor‚ÇÉ = 0) : Epi T.mor‚ÇÇ := (T.mor‚ÇÉ_eq_zero_iff_epi‚ÇÇ hT).1 h
lemma epi‚ÇÅ (h : T.mor‚ÇÇ = 0) : Epi T.mor‚ÇÅ := (T.mor‚ÇÇ_eq_zero_iff_epi‚ÇÅ hT).1 h
lemma epi‚ÇÉ (h : T.mor‚ÇÅ = 0) : Epi T.mor‚ÇÉ := (T.mor‚ÇÅ_eq_zero_iff_epi‚ÇÉ hT).1 h

lemma mor‚ÇÅ_eq_zero_iff_mono‚ÇÇ : T.mor‚ÇÅ = 0 ‚Üî Mono T.mor‚ÇÇ := by
  constructor
  ¬∑ intro h
    rw [mono_iff_cancel_zero]
    intro X g hg
    obtain ‚ü®f, rfl‚ü© := coyoneda_exact‚ÇÇ T hT g hg
    rw [h, comp_zero]
  ¬∑ intro
    rw [‚Üê cancel_mono T.mor‚ÇÇ, comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ _ hT, zero_comp]

lemma mor‚ÇÇ_eq_zero_iff_mono‚ÇÉ : T.mor‚ÇÇ = 0 ‚Üî Mono T.mor‚ÇÉ :=
  mor‚ÇÅ_eq_zero_iff_mono‚ÇÇ _ (rot_of_dist_triangle _ hT)

lemma mor‚ÇÉ_eq_zero_iff_mono‚ÇÅ : T.mor‚ÇÉ = 0 ‚Üî Mono T.mor‚ÇÅ := by
  have h := mor‚ÇÅ_eq_zero_iff_mono‚ÇÇ _ (inv_rot_of_dist_triangle _ hT)
  dsimp at h
  rw [‚Üê h, neg_eq_zero, IsIso.comp_right_eq_zero]
  constructor
  ¬∑ intro h
    simp only [h, Functor.map_zero]
  ¬∑ intro h
    rw [‚Üê (CategoryTheory.shiftFunctor C (-1 : ‚Ñ§)).map_eq_zero_iff, h]

lemma mor‚ÇÅ_eq_zero_of_mono‚ÇÇ (h : Mono T.mor‚ÇÇ) : T.mor‚ÇÅ = 0 := (T.mor‚ÇÅ_eq_zero_iff_mono‚ÇÇ hT).2 h
lemma mor‚ÇÇ_eq_zero_of_mono‚ÇÉ (h : Mono T.mor‚ÇÉ) : T.mor‚ÇÇ = 0 := (T.mor‚ÇÇ_eq_zero_iff_mono‚ÇÉ hT).2 h
lemma mor‚ÇÉ_eq_zero_of_mono‚ÇÅ (h : Mono T.mor‚ÇÅ) : T.mor‚ÇÉ = 0 := (T.mor‚ÇÉ_eq_zero_iff_mono‚ÇÅ hT).2 h

lemma mono‚ÇÇ (h : T.mor‚ÇÅ = 0) : Mono T.mor‚ÇÇ := (T.mor‚ÇÅ_eq_zero_iff_mono‚ÇÇ hT).1 h
lemma mono‚ÇÉ (h : T.mor‚ÇÇ = 0) : Mono T.mor‚ÇÉ := (T.mor‚ÇÇ_eq_zero_iff_mono‚ÇÉ hT).1 h
lemma mono‚ÇÅ (h : T.mor‚ÇÉ = 0) : Mono T.mor‚ÇÅ := (T.mor‚ÇÉ_eq_zero_iff_mono‚ÇÅ hT).1 h

lemma isZero‚ÇÇ_iff : IsZero T.obj‚ÇÇ ‚Üî (T.mor‚ÇÅ = 0 ‚àß T.mor‚ÇÇ = 0) := by
  constructor
  ¬∑ intro h
    exact ‚ü®h.eq_of_tgt _ _, h.eq_of_src _ _‚ü©
  ¬∑ intro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    obtain ‚ü®f, hf‚ü© := coyoneda_exact‚ÇÇ T hT (ùüô _) (by rw [h‚ÇÇ, comp_zero])
    rw [IsZero.iff_id_eq_zero, hf, h‚ÇÅ, comp_zero]

lemma isZero‚ÇÅ_iff : IsZero T.obj‚ÇÅ ‚Üî (T.mor‚ÇÅ = 0 ‚àß T.mor‚ÇÉ = 0) := by
  refine' (isZero‚ÇÇ_iff _ (inv_rot_of_dist_triangle _ hT)).trans _
  dsimp
  simp [neg_eq_zero, IsIso.comp_right_eq_zero, Functor.map_eq_zero_iff]
  tauto

lemma isZero‚ÇÉ_iff : IsZero T.obj‚ÇÉ ‚Üî (T.mor‚ÇÇ = 0 ‚àß T.mor‚ÇÉ = 0) := by
  refine' (isZero‚ÇÇ_iff _ (rot_of_dist_triangle _ hT)).trans _
  dsimp
  tauto

lemma isZero‚ÇÅ_of_isZero‚ÇÇ‚ÇÉ (h‚ÇÇ : IsZero T.obj‚ÇÇ) (h‚ÇÉ : IsZero T.obj‚ÇÉ) : IsZero T.obj‚ÇÅ := by
  rw [T.isZero‚ÇÅ_iff hT]
  exact ‚ü®h‚ÇÇ.eq_of_tgt _ _, h‚ÇÉ.eq_of_src _ _‚ü©

lemma isZero‚ÇÇ_of_isZero‚ÇÅ‚ÇÉ (h‚ÇÅ : IsZero T.obj‚ÇÅ) (h‚ÇÉ : IsZero T.obj‚ÇÉ) : IsZero T.obj‚ÇÇ := by
  rw [T.isZero‚ÇÇ_iff hT]
  exact ‚ü®h‚ÇÅ.eq_of_src _ _, h‚ÇÉ.eq_of_tgt _ _‚ü©

lemma isZero‚ÇÉ_of_isZero‚ÇÅ‚ÇÇ (h‚ÇÅ : IsZero T.obj‚ÇÅ) (h‚ÇÇ : IsZero T.obj‚ÇÇ) : IsZero T.obj‚ÇÉ :=
  isZero‚ÇÇ_of_isZero‚ÇÅ‚ÇÉ _ (rot_of_dist_triangle _ hT) h‚ÇÇ (by
    dsimp
    simp only [IsZero.iff_id_eq_zero] at h‚ÇÅ ‚ä¢
    rw [‚Üê Functor.map_id, h‚ÇÅ, Functor.map_zero])

lemma isZero‚ÇÅ_iff_isIso‚ÇÇ :
    IsZero T.obj‚ÇÅ ‚Üî IsIso T.mor‚ÇÇ := by
  rw [T.isZero‚ÇÅ_iff hT]
  constructor
  ¬∑ intro ‚ü®h‚ÇÅ, h‚ÇÉ‚ü©
    have := T.epi‚ÇÇ hT h‚ÇÉ
    obtain ‚ü®f, hf‚ü© := yoneda_exact‚ÇÇ T hT (ùüô _) (by rw [h‚ÇÅ, zero_comp])
    exact ‚ü®f, hf.symm, by rw [‚Üê cancel_epi T.mor‚ÇÇ, comp_id, ‚Üê reassoc_of% hf]‚ü©
  ¬∑ intro
    rw [T.mor‚ÇÅ_eq_zero_iff_mono‚ÇÇ hT, T.mor‚ÇÉ_eq_zero_iff_epi‚ÇÇ hT]
    constructor <;> infer_instance

lemma isZero‚ÇÇ_iff_isIso‚ÇÉ : IsZero T.obj‚ÇÇ ‚Üî IsIso T.mor‚ÇÉ :=
  isZero‚ÇÅ_iff_isIso‚ÇÇ _ (rot_of_dist_triangle _ hT)

lemma isZero‚ÇÉ_iff_isIso‚ÇÅ : IsZero T.obj‚ÇÉ ‚Üî IsIso T.mor‚ÇÅ := by
  refine' Iff.trans _ (Triangle.isZero‚ÇÅ_iff_isIso‚ÇÇ _ (inv_rot_of_dist_triangle _ hT))
  dsimp
  simp only [IsZero.iff_id_eq_zero, ‚Üê Functor.map_id, Functor.map_eq_zero_iff]

lemma isZero‚ÇÅ_of_isIso‚ÇÇ (h : IsIso T.mor‚ÇÇ) : IsZero T.obj‚ÇÅ := (T.isZero‚ÇÅ_iff_isIso‚ÇÇ hT).2 h
lemma isZero‚ÇÇ_of_isIso‚ÇÉ (h : IsIso T.mor‚ÇÉ) : IsZero T.obj‚ÇÇ := (T.isZero‚ÇÇ_iff_isIso‚ÇÉ hT).2 h
lemma isZero‚ÇÉ_of_isIso‚ÇÅ (h : IsIso T.mor‚ÇÅ) : IsZero T.obj‚ÇÉ := (T.isZero‚ÇÉ_iff_isIso‚ÇÅ hT).2 h

end Triangle

instance : SplitEpiCategory C where
  isSplitEpi_of_epi f hf := by
    obtain ‚ü®Z, g, h, hT‚ü© := distinguished_cocone_triangle f
    obtain ‚ü®r, hr‚ü© := Triangle.coyoneda_exact‚ÇÇ _ hT (ùüô _)
      (by rw [Triangle.mor‚ÇÇ_eq_zero_of_epi‚ÇÅ _ hT hf, comp_zero])
    exact ‚ü®r, hr.symm‚ü©

instance : SplitMonoCategory C where
  isSplitMono_of_mono f hf := by
    obtain ‚ü®X, g, h, hT‚ü© := distinguished_cocone_triangle‚ÇÅ f
    obtain ‚ü®r, hr‚ü© := Triangle.yoneda_exact‚ÇÇ _ hT (ùüô _) (by
      rw [Triangle.mor‚ÇÅ_eq_zero_of_mono‚ÇÇ _ hT hf, zero_comp])
    exact ‚ü®r, hr.symm‚ü©

/-
TODO: If `C` is pretriangulated with respect to a shift,
then `C·µí·µñ` is pretriangulated with respect to the inverse shift.
-/

end Pretriangulated

end CategoryTheory
