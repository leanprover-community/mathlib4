/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.ExactCategory.Basic
import Mathlib.CategoryTheory.Subobject.Basic

/-!
# Quillen's Q-construction

-/

open CategoryTheory Category Limits

variable (C : Type _) [Category C] [Preadditive C] [HasZeroObject C]
  [HasBinaryBiproducts C] [ExactCategory C]

namespace CategoryTheory

namespace ExactCategory

structure Q where
  obj : C

namespace Q

variable {C}

structure Hom (X Y : Q C) where
  i : Subobject Y.obj
  hi : AdmissibleMono i.arrow
  j : (i : C) ‚ü∂ X.obj
  hj : AdmissibleEpi j

attribute [instance] Hom.hi Hom.hj

/-- Hom.mk' -/
noncomputable def Hom.mk' (X Y : Q C) {Z : C} (j : Z ‚ü∂ X.obj) (i : Z ‚ü∂ Y.obj)
  [AdmissibleMono i] [AdmissibleEpi j] : Hom X Y where
  i := Subobject.mk i
  hi := by
    have eq := Subobject.underlyingIso_arrow i
    rw [Iso.inv_comp_eq] at eq
    rw [eq]
    infer_instance
  j := (Subobject.underlyingIso i).hom ‚â´ j
  hj := inferInstance

lemma Hom.ext {X Y : Q C} (œÜ‚ÇÅ œÜ‚ÇÇ : Hom X Y) (e : (œÜ‚ÇÅ.i : C) ‚âÖ œÜ‚ÇÇ.i)
    (h‚ÇÅ : œÜ‚ÇÅ.i.arrow = e.hom ‚â´ œÜ‚ÇÇ.i.arrow) (h‚ÇÇ : œÜ‚ÇÅ.j = e.hom ‚â´ œÜ‚ÇÇ.j) : œÜ‚ÇÅ = œÜ‚ÇÇ := by
  rcases œÜ‚ÇÅ with ‚ü®i‚ÇÅ, hi‚ÇÅ, j‚ÇÅ, hj‚ÇÅ‚ü©
  rcases œÜ‚ÇÇ with ‚ü®i‚ÇÇ, hi‚ÇÇ, j‚ÇÇ, hj‚ÇÇ‚ü©
  dsimp at e h‚ÇÅ h‚ÇÇ
  obtain rfl := Subobject.eq_of_comm e h‚ÇÅ.symm
  have : e.hom = ùüô _ := by rw [‚Üê cancel_mono (Subobject.arrow i‚ÇÅ), id_comp, ‚Üê h‚ÇÅ]
  obtain rfl : j‚ÇÅ = j‚ÇÇ := by rw [h‚ÇÇ, this, id_comp]
  rfl

lemma Hom.mk'_surjective {X Y : Q C} (œÜ : Hom X Y) : ‚àÉ (Z : C) (j : Z ‚ü∂ X.obj) (i : Z ‚ü∂ Y.obj)
    (_ : AdmissibleMono i) (_ : AdmissibleEpi j), œÜ = Hom.mk' _ _ j i  := by
  refine ‚ü®_ , œÜ.j, œÜ.i.arrow, inferInstance, inferInstance, ?_‚ü©
  refine Hom.ext _ _ (Subobject.isoOfEq _ _ (Subobject.mk_arrow œÜ.i).symm) ?_ ?_
  ¬∑ dsimp
    simp
  ¬∑ dsimp [mk']
    simp only [‚Üê assoc]
    refine (Category.id_comp œÜ.j).symm.trans ?_
    congr
    aesop_cat

/-- Hom.ext' -/
lemma Hom.ext' {X Y : Q C} {Z‚ÇÅ Z‚ÇÇ : C}
    (j‚ÇÅ : Z‚ÇÅ ‚ü∂ X.obj) (i‚ÇÅ : Z‚ÇÅ ‚ü∂ Y.obj) [AdmissibleMono i‚ÇÅ] [AdmissibleEpi j‚ÇÅ]
    (j‚ÇÇ : Z‚ÇÇ ‚ü∂ X.obj) (i‚ÇÇ : Z‚ÇÇ ‚ü∂ Y.obj) [AdmissibleMono i‚ÇÇ] [AdmissibleEpi j‚ÇÇ]
    (e : Z‚ÇÅ ‚âÖ Z‚ÇÇ) (comm‚ÇÅ : i‚ÇÅ = e.hom ‚â´ i‚ÇÇ) (comm‚ÇÇ : j‚ÇÅ = e.hom ‚â´ j‚ÇÇ) :
    Hom.mk' X Y j‚ÇÅ i‚ÇÅ = Hom.mk' X Y j‚ÇÇ i‚ÇÇ := by
  refine Hom.ext _ _ (Subobject.underlyingIso i‚ÇÅ ‚â™‚â´ e ‚â™‚â´ (Subobject.underlyingIso i‚ÇÇ).symm) ?_ ?_
  ¬∑ dsimp [mk']
    simp only [assoc, Subobject.underlyingIso_arrow, ‚Üê comm‚ÇÅ,
      Subobject.underlyingIso_hom_comp_eq_mk]
  ¬∑ dsimp [mk']
    simp only [assoc, Iso.inv_hom_id_assoc, Iso.cancel_iso_hom_left, comm‚ÇÇ]

noncomputable def Hom.id (X : Q C) : Hom X X :=
  Hom.mk' X X (ùüô _) (ùüô _)

noncomputable def Hom.comp {X Y Z : Q C} (Œ± : Hom X Y) (Œ≤ : Hom Y Z) : Hom X Z :=
  Hom.mk' X Z (pullback.fst Œ±.i.arrow Œ≤.j ‚â´ Œ±.j) (pullback.snd _ _ ‚â´ Œ≤.i.arrow)

lemma Hom.comp_eq {X‚ÇÅ X‚ÇÇ X‚ÇÉ : Q C} {Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C} (j‚ÇÅ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ.obj) (i‚ÇÅ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÇ.obj)
    (j‚ÇÇ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ.obj) (i‚ÇÇ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÉ.obj) [AdmissibleMono i‚ÇÅ] [AdmissibleMono i‚ÇÇ]
    [AdmissibleEpi j‚ÇÅ] [AdmissibleEpi j‚ÇÇ] (j‚ÇÇ' : Z‚ÇÅ‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÇ) (i‚ÇÅ' : Z‚ÇÅ‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ)
    [AdmissibleEpi j‚ÇÇ'] [AdmissibleMono i‚ÇÅ'] (H : IsPullback j‚ÇÇ' i‚ÇÅ' i‚ÇÅ j‚ÇÇ):
    (Hom.mk' X‚ÇÅ X‚ÇÇ j‚ÇÅ i‚ÇÅ).comp (Hom.mk' X‚ÇÇ X‚ÇÉ j‚ÇÇ i‚ÇÇ) = Hom.mk' X‚ÇÅ X‚ÇÉ (j‚ÇÇ' ‚â´ j‚ÇÅ) (i‚ÇÅ' ‚â´ i‚ÇÇ) := by
  let œÜ : Z‚ÇÅ‚ÇÉ ‚ü∂ pullback (Subobject.arrow (mk' X‚ÇÅ X‚ÇÇ j‚ÇÅ i‚ÇÅ).i) (mk' X‚ÇÇ X‚ÇÉ j‚ÇÇ i‚ÇÇ).j :=
    pullback.lift (j‚ÇÇ' ‚â´ (Subobject.underlyingIso i‚ÇÅ).inv)
      (i‚ÇÅ' ‚â´ (Subobject.underlyingIso i‚ÇÇ).inv ) (by
        dsimp [mk']
        simp only [assoc, Subobject.underlyingIso_arrow, Iso.inv_hom_id_assoc, H.w])
  have : IsIso œÜ := by
    let e : cospan (Subobject.arrow (mk' X‚ÇÅ X‚ÇÇ j‚ÇÅ i‚ÇÅ).i) (mk' X‚ÇÇ X‚ÇÉ j‚ÇÇ i‚ÇÇ).j ‚âÖ
        cospan i‚ÇÅ j‚ÇÇ := cospanExt (Subobject.underlyingIso i‚ÇÅ) (Subobject.underlyingIso i‚ÇÇ)
          (Iso.refl _) (by dsimp [mk']; simp) (by dsimp [mk']; simp)
    convert (IsLimit.conePointUniqueUpToIso
      ((IsLimit.postcomposeHomEquiv e.symm _).symm H.isLimit) (limit.isLimit _)).isIso_hom
    aesop_cat
  symm
  refine Hom.ext' _ _ _ _ (asIso œÜ) ?_ ?_
  all_goals dsimp [œÜ, mk', asIso]; simp

noncomputable instance : Category (Q C) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp
  id_comp {X Y} f := by
    obtain ‚ü®Z, j, i, hj, hi, rfl‚ü© := Hom.mk'_surjective f
    simpa only [comp_id, id_comp]
      using (Hom.comp_eq (ùüô X.obj) (ùüô X.obj) j i j (ùüô Z) (IsPullback.of_vert_isIso ‚ü®by simp‚ü©))
  comp_id {X Y} f := by
    obtain ‚ü®Z, j, i, hj, hi, rfl‚ü© := Hom.mk'_surjective f
    change Hom.comp _ (Hom.mk' _ _ _ _) = _
    simpa [id_comp, comp_id]
      using Hom.comp_eq j i (ùüô Y.obj) (ùüô Y.obj) (ùüô _) i (IsPullback.of_horiz_isIso ‚ü®by simp‚ü©)
  assoc {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ} f‚ÇÅ f‚ÇÇ f‚ÇÉ := by
    obtain ‚ü®Z‚ÇÅ‚ÇÇ, j‚ÇÅ‚ÇÇ, i‚ÇÅ‚ÇÇ, hj‚ÇÅ‚ÇÇ, hi‚ÇÅ‚ÇÇ, rfl‚ü© := Hom.mk'_surjective f‚ÇÅ
    obtain ‚ü®Z‚ÇÇ‚ÇÉ, j‚ÇÇ‚ÇÉ, i‚ÇÇ‚ÇÉ, hj‚ÇÇ‚ÇÉ, hi‚ÇÇ‚ÇÉ, rfl‚ü© := Hom.mk'_surjective f‚ÇÇ
    obtain ‚ü®Z‚ÇÉ‚ÇÑ, j‚ÇÉ‚ÇÑ, i‚ÇÉ‚ÇÑ, hj‚ÇÉ‚ÇÑ, hi‚ÇÉ‚ÇÑ, rfl‚ü© := Hom.mk'_surjective f‚ÇÉ
    change Hom.comp (Hom.comp _ _) _ = Hom.comp _ (Hom.comp _ _)
    let Z‚ÇÅ‚ÇÉ := pullback i‚ÇÅ‚ÇÇ j‚ÇÇ‚ÇÉ
    let Z‚ÇÇ‚ÇÑ := pullback i‚ÇÇ‚ÇÉ j‚ÇÉ‚ÇÑ
    let Z‚ÇÅ‚ÇÑ := pullback (pullback.snd _ _ : Z‚ÇÅ‚ÇÉ ‚ü∂ _) (pullback.fst _ _ : Z‚ÇÇ‚ÇÑ ‚ü∂ _)
    rw [Hom.comp_eq j‚ÇÅ‚ÇÇ i‚ÇÅ‚ÇÇ j‚ÇÇ‚ÇÉ i‚ÇÇ‚ÇÉ (pullback.fst _ _ : Z‚ÇÅ‚ÇÉ ‚ü∂ _) (pullback.snd _ _),
      Hom.comp_eq j‚ÇÇ‚ÇÉ i‚ÇÇ‚ÇÉ j‚ÇÉ‚ÇÑ i‚ÇÉ‚ÇÑ (pullback.fst _ _ : Z‚ÇÇ‚ÇÑ ‚ü∂ _) (pullback.snd _ _),
      Hom.comp_eq _ _ j‚ÇÉ‚ÇÑ i‚ÇÉ‚ÇÑ (pullback.fst _ _ : Z‚ÇÅ‚ÇÑ ‚ü∂ _)
        (pullback.snd _ _ ‚â´ pullback.snd _ _),
      Hom.comp_eq j‚ÇÅ‚ÇÇ i‚ÇÅ‚ÇÇ _ _ (pullback.fst _ _ ‚â´ pullback.fst _ _ : Z‚ÇÅ‚ÇÑ ‚ü∂ _) (pullback.snd _ _ )]
    ¬∑ simp only [assoc]
    ¬∑ exact (IsPullback.paste_horiz_iff (IsPullback.of_hasPullback i‚ÇÅ‚ÇÇ j‚ÇÇ‚ÇÉ) pullback.condition).2
        (IsPullback.of_hasPullback (pullback.snd _ _ : Z‚ÇÅ‚ÇÉ ‚ü∂ _) (pullback.fst _ _ : Z‚ÇÇ‚ÇÑ ‚ü∂ _))
    ¬∑ exact (IsPullback.paste_vert_iff (IsPullback.of_hasPullback i‚ÇÇ‚ÇÉ j‚ÇÉ‚ÇÑ) pullback.condition).2
        (IsPullback.of_hasPullback (pullback.snd _ _ : Z‚ÇÅ‚ÇÉ ‚ü∂ _) (pullback.fst _ _ : Z‚ÇÇ‚ÇÑ ‚ü∂ _))
    ¬∑ exact (IsPullback.of_hasPullback i‚ÇÇ‚ÇÉ j‚ÇÉ‚ÇÑ)
    ¬∑ exact (IsPullback.of_hasPullback i‚ÇÅ‚ÇÇ j‚ÇÇ‚ÇÉ)

end Q

end ExactCategory

end CategoryTheory
