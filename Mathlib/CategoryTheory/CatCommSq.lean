/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Equivalence

/-!
# 2-commutative squares of functors

Similarly as `CommSq.lean` defines the notion of commutative squares,
this file introduces the notion of 2-commutative squares of functors.

If `T : C‚ÇÅ ‚•§ C‚ÇÇ`, `L : C‚ÇÅ ‚•§ C‚ÇÉ`, `R : C‚ÇÇ ‚•§ C‚ÇÑ`, `B : C‚ÇÉ ‚•§ C‚ÇÑ` are functors,
then `[CatCommSq T L R B]` contains the datum of an isomorphism `T ‚ãô R ‚âÖ L ‚ãô B`.

Future work: using this notion in the development of the localization of categories
(e.g. localization of adjunctions).

-/

namespace CategoryTheory

open Category Functor

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ C‚ÇÑ C‚ÇÖ C‚ÇÜ : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ] [Category C‚ÇÑ]
  [Category C‚ÇÖ] [Category C‚ÇÜ]

/-- `CatCommSq T L R B` expresses that there is a 2-commutative square of functors, where
the functors `T`, `L`, `R` and `B` are respectively the left, top, right and bottom functors
of the square. -/
@[ext]
class CatCommSq (T : C‚ÇÅ ‚•§ C‚ÇÇ) (L : C‚ÇÅ ‚•§ C‚ÇÉ) (R : C‚ÇÇ ‚•§ C‚ÇÑ) (B : C‚ÇÉ ‚•§ C‚ÇÑ) where
  /-- Assuming `[CatCommSq T L R B]`, `iso T L R B` is the isomorphism `T ‚ãô R ‚âÖ L ‚ãô B`
  given by the 2-commutative square. -/
  iso (T) (L) (R) (B) : T ‚ãô R ‚âÖ L ‚ãô B

variable (T : C‚ÇÅ ‚•§ C‚ÇÇ) (L : C‚ÇÅ ‚•§ C‚ÇÉ) (R : C‚ÇÇ ‚•§ C‚ÇÑ) (B : C‚ÇÉ ‚•§ C‚ÇÑ)

namespace CatCommSq

/-- The vertical identity `CatCommSq` -/
@[simps!]
def vId : CatCommSq T (ùü≠ C‚ÇÅ) (ùü≠ C‚ÇÇ) T where
  iso := (Functor.leftUnitor _) ‚â™‚â´ (Functor.rightUnitor _).symm

/-- The horizontal identity `CatCommSq` -/
@[simps!]
def hId : CatCommSq (ùü≠ C‚ÇÅ) L L (ùü≠ C‚ÇÉ) where
  iso := (Functor.rightUnitor _) ‚â™‚â´ (Functor.leftUnitor _).symm

@[reassoc (attr := simp)]
lemma iso_hom_naturality [h : CatCommSq T L R B] {x y : C‚ÇÅ} (f : x ‚ü∂ y) :
    R.map (T.map f) ‚â´ (iso T L R B).hom.app y = (iso T L R B).hom.app x ‚â´ B.map (L.map f) :=
  (iso T L R B).hom.naturality f

@[reassoc (attr := simp)]
lemma iso_inv_naturality [h : CatCommSq T L R B] {x y : C‚ÇÅ} (f : x ‚ü∂ y) :
    B.map (L.map f) ‚â´ (iso T L R B).inv.app y = (iso T L R B).inv.app x ‚â´ R.map (T.map f) :=
  (iso T L R B).inv.naturality f

/-- Horizontal composition of 2-commutative squares -/
@[simps!]
def hComp (T‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÇ) (T‚ÇÇ : C‚ÇÇ ‚•§ C‚ÇÉ) (V‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÑ) (V‚ÇÇ : C‚ÇÇ ‚•§ C‚ÇÖ) (V‚ÇÉ : C‚ÇÉ ‚•§ C‚ÇÜ)
    (B‚ÇÅ : C‚ÇÑ ‚•§ C‚ÇÖ) (B‚ÇÇ : C‚ÇÖ ‚•§ C‚ÇÜ) [CatCommSq T‚ÇÅ V‚ÇÅ V‚ÇÇ B‚ÇÅ] [CatCommSq T‚ÇÇ V‚ÇÇ V‚ÇÉ B‚ÇÇ] :
    CatCommSq (T‚ÇÅ ‚ãô T‚ÇÇ) V‚ÇÅ V‚ÇÉ (B‚ÇÅ ‚ãô B‚ÇÇ) where
  iso := associator _ _ _ ‚â™‚â´ isoWhiskerLeft T‚ÇÅ (iso T‚ÇÇ V‚ÇÇ V‚ÇÉ B‚ÇÇ) ‚â™‚â´
    (associator _ _ _).symm ‚â™‚â´ isoWhiskerRight (iso T‚ÇÅ V‚ÇÅ V‚ÇÇ B‚ÇÅ) B‚ÇÇ ‚â™‚â´
    associator _ _ _

/-- A variant of `hComp` where both squares can be explicitly provided. -/
abbrev hComp' {T‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÇ} {T‚ÇÇ : C‚ÇÇ ‚•§ C‚ÇÉ} {V‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÑ} {V‚ÇÇ : C‚ÇÇ ‚•§ C‚ÇÖ} {V‚ÇÉ : C‚ÇÉ ‚•§ C‚ÇÜ}
    {B‚ÇÅ : C‚ÇÑ ‚•§ C‚ÇÖ} {B‚ÇÇ : C‚ÇÖ ‚•§ C‚ÇÜ} (S‚ÇÅ : CatCommSq T‚ÇÅ V‚ÇÅ V‚ÇÇ B‚ÇÅ) (S‚ÇÇ : CatCommSq T‚ÇÇ V‚ÇÇ V‚ÇÉ B‚ÇÇ) :
    CatCommSq (T‚ÇÅ ‚ãô T‚ÇÇ) V‚ÇÅ V‚ÇÉ (B‚ÇÅ ‚ãô B‚ÇÇ) :=
  letI := S‚ÇÅ
  letI := S‚ÇÇ
  hComp _ _ _ V‚ÇÇ _ _ _

/-- Vertical composition of 2-commutative squares -/
@[simps!]
def vComp (L‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÇ) (L‚ÇÇ : C‚ÇÇ ‚•§ C‚ÇÉ) (H‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÑ) (H‚ÇÇ : C‚ÇÇ ‚•§ C‚ÇÖ) (H‚ÇÉ : C‚ÇÉ ‚•§ C‚ÇÜ)
    (R‚ÇÅ : C‚ÇÑ ‚•§ C‚ÇÖ) (R‚ÇÇ : C‚ÇÖ ‚•§ C‚ÇÜ) [CatCommSq H‚ÇÅ L‚ÇÅ R‚ÇÅ H‚ÇÇ] [CatCommSq H‚ÇÇ L‚ÇÇ R‚ÇÇ H‚ÇÉ] :
    CatCommSq H‚ÇÅ (L‚ÇÅ ‚ãô L‚ÇÇ) (R‚ÇÅ ‚ãô R‚ÇÇ) H‚ÇÉ where
  iso := (associator _ _ _).symm ‚â™‚â´ isoWhiskerRight (iso H‚ÇÅ L‚ÇÅ R‚ÇÅ H‚ÇÇ) R‚ÇÇ ‚â™‚â´
      associator _ _ _ ‚â™‚â´ isoWhiskerLeft L‚ÇÅ (iso H‚ÇÇ L‚ÇÇ R‚ÇÇ H‚ÇÉ) ‚â™‚â´
      (associator _ _ _).symm

/-- A variant of `vComp` where both squares can be explicitly provided. -/
abbrev vComp' {L‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÇ} {L‚ÇÇ : C‚ÇÇ ‚•§ C‚ÇÉ} {H‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÑ} {H‚ÇÇ : C‚ÇÇ ‚•§ C‚ÇÖ} {H‚ÇÉ : C‚ÇÉ ‚•§ C‚ÇÜ}
    {R‚ÇÅ : C‚ÇÑ ‚•§ C‚ÇÖ} {R‚ÇÇ : C‚ÇÖ ‚•§ C‚ÇÜ} (S‚ÇÅ : CatCommSq H‚ÇÅ L‚ÇÅ R‚ÇÅ H‚ÇÇ) (S‚ÇÇ : CatCommSq H‚ÇÇ L‚ÇÇ R‚ÇÇ H‚ÇÉ) :
    CatCommSq H‚ÇÅ (L‚ÇÅ ‚ãô L‚ÇÇ) (R‚ÇÅ ‚ãô R‚ÇÇ) H‚ÇÉ :=
  letI := S‚ÇÅ
  letI := S‚ÇÇ
  vComp _ _ _ H‚ÇÇ _ _ _

section

variable (T : C‚ÇÅ ‚âå C‚ÇÇ) (L : C‚ÇÅ ‚•§ C‚ÇÉ) (R : C‚ÇÇ ‚•§ C‚ÇÑ) (B : C‚ÇÉ ‚âå C‚ÇÑ)

/-- Horizontal inverse of a 2-commutative square -/
@[simps!]
def hInv (_ : CatCommSq T.functor L R B.functor) : CatCommSq T.inverse R L B.inverse where
  iso := isoWhiskerLeft _ (L.rightUnitor.symm ‚â™‚â´ isoWhiskerLeft L B.unitIso ‚â™‚â´
      (associator _ _ _).symm ‚â™‚â´
      isoWhiskerRight (iso T.functor L R B.functor).symm B.inverse ‚â™‚â´
      associator _ _ _  ) ‚â™‚â´ (associator _ _ _).symm ‚â™‚â´
      isoWhiskerRight T.counitIso _ ‚â™‚â´ leftUnitor _

lemma hInv_hInv (h : CatCommSq T.functor L R B.functor) :
    hInv T.symm R L B.symm (hInv T L R B h) = h := by
  ext X
  rw [‚Üê cancel_mono (B.functor.map (L.map (T.unitIso.hom.app X)))]
  rw [‚Üê Functor.comp_map]
  erw [‚Üê h.iso.hom.naturality (T.unitIso.hom.app X)]
  rw [hInv_iso_hom_app]
  simp only [Equivalence.symm_functor]
  rw [hInv_iso_inv_app]
  dsimp
  simp only [Functor.comp_obj, assoc, ‚Üê Functor.map_comp, Iso.inv_hom_id_app,
    Equivalence.counitInv_app_functor, Functor.map_id]
  simp only [Functor.map_comp, Equivalence.fun_inv_map, assoc,
    Equivalence.counitInv_functor_comp, comp_id, Iso.inv_hom_id_app_assoc]

/-- In a square of categories, when the top and bottom functors are part
of equivalence of categories, it is equivalent to show 2-commutativity for
the functors of these equivalences or for their inverses. -/
def hInvEquiv : CatCommSq T.functor L R B.functor ‚âÉ CatCommSq T.inverse R L B.inverse where
  toFun := hInv T L R B
  invFun := hInv T.symm R L B.symm
  left_inv := hInv_hInv T L R B
  right_inv := hInv_hInv T.symm R L B.symm

end

section

variable (T : C‚ÇÅ ‚•§ C‚ÇÇ) (L : C‚ÇÅ ‚âå C‚ÇÉ) (R : C‚ÇÇ ‚âå C‚ÇÑ) (B : C‚ÇÉ ‚•§ C‚ÇÑ)

/-- Vertical inverse of a 2-commutative square -/
@[simps!]
def vInv (_ : CatCommSq T L.functor R.functor B) : CatCommSq B L.inverse R.inverse T where
  iso := isoWhiskerRight (B.leftUnitor.symm ‚â™‚â´ isoWhiskerRight L.counitIso.symm B ‚â™‚â´
      associator _ _ _ ‚â™‚â´
      isoWhiskerLeft L.inverse (iso T L.functor R.functor B).symm) R.inverse ‚â™‚â´
      associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ (associator _ _ _) ‚â™‚â´
      (associator _ _ _ ).symm ‚â™‚â´ isoWhiskerLeft _ R.unitIso.symm ‚â™‚â´
      rightUnitor _

lemma vInv_vInv (h : CatCommSq T L.functor R.functor B) :
    vInv B L.symm R.symm T (vInv T L R B h) = h := by
  ext X
  rw [vInv_iso_hom_app]
  dsimp
  rw [vInv_iso_inv_app]
  rw [‚Üê cancel_mono (B.map (L.functor.map (NatTrans.app L.unitIso.hom X)))]
  rw [‚Üê Functor.comp_map]
  erw [‚Üê (iso T L.functor R.functor B).hom.naturality (L.unitIso.hom.app X)]
  dsimp
  simp only [Functor.map_comp, Equivalence.fun_inv_map, Functor.comp_obj,
    Functor.id_obj, assoc, Iso.inv_hom_id_app_assoc, Iso.inv_hom_id_app, comp_id]
  rw [‚Üê B.map_comp, L.counit_app_functor, ‚Üê L.functor.map_comp, ‚Üê NatTrans.comp_app,
    Iso.inv_hom_id, NatTrans.id_app, L.functor.map_id]
  simp only [Functor.comp_obj]
  rw [B.map_id]
  rw [comp_id, R.counit_app_functor,
    ‚Üê R.functor.map_comp_assoc, ‚Üê R.functor.map_comp_assoc, assoc, ‚Üê NatTrans.comp_app,
    Iso.hom_inv_id, NatTrans.id_app]
  simp

/-- In a square of categories, when the left and right functors are part
of equivalence of categories, it is equivalent to show 2-commutativity for
the functors of these equivalences or for their inverses. -/
def vInvEquiv : CatCommSq T L.functor R.functor B ‚âÉ CatCommSq B L.inverse R.inverse T where
  toFun := vInv T L R B
  invFun := vInv B L.symm R.symm T
  left_inv := vInv_vInv T L R B
  right_inv := vInv_vInv B L.symm R.symm T

end

end CatCommSq

end CategoryTheory
