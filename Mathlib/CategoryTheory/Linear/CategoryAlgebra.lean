/-
Copyright (c) 2025 Bernhard Reinke. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bernhard Reinke
-/
import Mathlib.Algebra.Module.BigOperators
import Mathlib.Algebra.DirectSum.Basic
import Mathlib.Algebra.DirectSum.Module
import Mathlib.CategoryTheory.Linear.Basic
import Mathlib.Algebra.Ring.Assoc

universe w' w v u

namespace CategoryTheory.Linear

open DirectSum
open CategoryTheory.Preadditive

def CategoryAlgebra (R : Type w) [CommSemiring R] (C : Type u) [Category.{v} C] [Preadditive C]
  [Linear R C] := ‚®Å (p : C √ó C), p.1 ‚ü∂ p.2

variable {R : Type w} [CommSemiring R] {C : Type u} [Category.{v} C] [Preadditive C]
  [Linear R C] [DecidableEq C]


instance CategoryAlgebra.inhabited : Inhabited (CategoryAlgebra R C) :=
  inferInstanceAs (Inhabited (‚®Å (p : C √ó C), p.1 ‚ü∂ p.2))

instance CategoryAlgebra.addCommMonoid : AddCommMonoid (CategoryAlgebra R C) :=
  inferInstanceAs (AddCommMonoid (‚®Å (p : C √ó C), p.1 ‚ü∂ p.2))

instance CategoryAlgebra.instIsCancelAdd [IsCancelAdd R] : IsCancelAdd (CategoryAlgebra R C) :=
  inferInstanceAs (IsCancelAdd (‚®Å (p : C √ó C), p.1 ‚ü∂ p.2))

instance CategoryAlgebra.instModule : Module R (CategoryAlgebra R C) :=
  inferInstanceAs (Module R (‚®Å (p : C √ó C), p.1 ‚ü∂ p.2))

def CategoryAlgebra.of (a b : C) : (a ‚ü∂ b) ‚Üí+ CategoryAlgebra R C :=
  DirectSum.of (fun (p : C √ó C) ‚Ü¶ p.1 ‚ü∂ p.2) (a,b)

theorem CategoryAlgebra.addHom_ext {Œ≥ : Type w'} [AddZeroClass Œ≥] ‚¶Éf g : CategoryAlgebra R C ‚Üí+ Œ≥‚¶Ñ
    (H : ‚àÄ (X Y : C) (y : X ‚ü∂ Y), f (CategoryAlgebra.of X Y y) = g (CategoryAlgebra.of X Y y)) :
    f = g := DFinsupp.addHom_ext (fun p => H p.1 p.2)

theorem CategoryAlgebra.of_eq_single (a b : C) (f : a ‚ü∂ b) :
    (CategoryAlgebra.of a b f : CategoryAlgebra R C) =
    DFinsupp.single (a,b) f := by rfl

def compEq (X Y Z W : C) (h : Y = Z) : (X ‚ü∂ Y) ‚Üí+ (Z ‚ü∂ W) ‚Üí+ (X ‚ü∂ W) where
  toFun f := compHom (f ‚â´ eqToHom h)
  map_add' := by
    intros
    ext
    simp
  map_zero' := by
    ext
    simp

def comp‚ÇÄ (X Y Z W : C): (X ‚ü∂ Y) ‚Üí+ (Z ‚ü∂ W) ‚Üí+ (X ‚ü∂ W) :=
  if h : Y = Z then compEq X Y Z W h else 0

theorem comp‚ÇÄ_assoc (X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ X‚ÇÉ Y‚ÇÉ : C) (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (h : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :
    ((comp‚ÇÄ X‚ÇÅ Y‚ÇÇ X‚ÇÉ Y‚ÇÉ) (((comp‚ÇÄ X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ) f) g)) h =
    ((comp‚ÇÄ X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÉ) f) (((comp‚ÇÄ X‚ÇÇ Y‚ÇÇ X‚ÇÉ Y‚ÇÉ) g) h)
    := by
  by_cases h‚ÇÅ‚ÇÇ : Y‚ÇÅ = X‚ÇÇ <;> by_cases h‚ÇÇ‚ÇÉ : Y‚ÇÇ = X‚ÇÉ <;>
  simp [comp‚ÇÄ, compEq, h‚ÇÅ‚ÇÇ, h‚ÇÇ‚ÇÉ, compHom, Preadditive.leftComp]

@[irreducible] def mul' : CategoryAlgebra R C ‚Üí+ CategoryAlgebra R C ‚Üí+ CategoryAlgebra R C :=
  DFinsupp.sumAddHom‚ÇÇ (fun q p ‚Ü¶ AddMonoidHom.compr‚ÇÇ
    (comp‚ÇÄ q.1 q.2 p.1 p.2) (CategoryAlgebra.of q.1 p.2))

instance instMul : Mul (CategoryAlgebra R C) := ‚ü®fun f g => mul' f g‚ü©

theorem mul_def (f g : CategoryAlgebra R C) :
    f * g = DFinsupp.sumAddHom‚ÇÇ (fun q p ‚Ü¶ AddMonoidHom.compr‚ÇÇ
    (comp‚ÇÄ q.1 q.2 p.1 p.2) (CategoryAlgebra.of q.1 p.2)) f g := by
  with_unfolding_all rfl

instance : NonUnitalNonAssocSemiring (CategoryAlgebra R C) where
  left_distrib := fun a b c => by simp [mul_def]
  right_distrib := fun a b c => by simp [mul_def]
  zero_mul := fun a => by simp [mul_def]
  mul_zero := fun a => by simp [mul_def]

theorem mul_of (X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : C) (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
    (CategoryAlgebra.of X‚ÇÅ Y‚ÇÅ f) * (CategoryAlgebra.of X‚ÇÇ Y‚ÇÇ g : (CategoryAlgebra R C)) =
    CategoryAlgebra.of X‚ÇÅ Y‚ÇÇ (comp‚ÇÄ X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ f g) := by
  simp [mul_def, CategoryAlgebra.of_eq_single, DFinsupp.sumAddHom‚ÇÇ_single]

instance : NonUnitalSemiring (CategoryAlgebra R C) where
  mul_assoc := by
    rw [AddMonoidHom.associative_iff_mull‚ÇÉ_eq_mulr‚ÇÉ]
    apply CategoryAlgebra.addHom_ext
    rintro X‚ÇÅ Y‚ÇÅ f
    apply CategoryAlgebra.addHom_ext
    rintro X‚ÇÇ Y‚ÇÇ g
    apply CategoryAlgebra.addHom_ext
    rintro X‚ÇÉ Y‚ÇÉ h
    simp only [AddMonoidHom.mull‚ÇÉ, AddMonoidHom.mul, AddMonoidHom.mulLeft, AddMonoidHom.coe_mk,
      ZeroHom.coe_mk, AddMonoidHom.coe_comp, Function.comp_apply, mul_of, AddMonoidHom.mulr‚ÇÉ,
      AddMonoidHom.compr‚ÇÇ, AddMonoidHom.compHom_apply_apply]
    apply congrArg
    apply comp‚ÇÄ_assoc

section Unital

variable [Fintype C]

def one' : CategoryAlgebra R C :=  ‚àë i : C, (CategoryAlgebra.of i i (ùüô i))

instance : One (CategoryAlgebra R C) := ‚ü®one'‚ü©

theorem one_def : (1 : CategoryAlgebra R C) = ‚àë i : C, (CategoryAlgebra.of i i (ùüô i)) := rfl

instance [Fintype C] : Semiring (CategoryAlgebra R C) where
  one_mul := by
    have H : (AddMonoidHom.mulLeft (1 : (CategoryAlgebra R C)) = (AddMonoidHom.id _)) := by
      apply CategoryAlgebra.addHom_ext
      rintro X‚ÇÅ Y‚ÇÅ f
      simp only [AddMonoidHom.mulLeft, one_def, Finset.sum_mul, AddMonoidHom.coe_mk, ZeroHom.coe_mk,
        mul_of, AddMonoidHom.id_apply]
      rw [Finset.sum_eq_single_of_mem X‚ÇÅ (Finset.mem_univ _)]
      ¬∑ simp [comp‚ÇÄ, compEq, compHom, Preadditive.leftComp]
      ¬∑ intro b _ h
        simp [comp‚ÇÄ, h]
    apply DFunLike.congr_fun (h‚ÇÅ := H)
  mul_one := by
    have H : (AddMonoidHom.mulRight (1 : (CategoryAlgebra R C)) = (AddMonoidHom.id _)) := by
      apply CategoryAlgebra.addHom_ext
      rintro X‚ÇÅ Y‚ÇÅ f
      simp only [AddMonoidHom.mulRight, one_def, Finset.mul_sum, AddMonoidHom.coe_mk,
        ZeroHom.coe_mk, mul_of, AddMonoidHom.id_apply]
      rw [Finset.sum_eq_single_of_mem Y‚ÇÅ (Finset.mem_univ _)]
      ¬∑ simp [comp‚ÇÄ, compEq, compHom, Preadditive.leftComp]
      ¬∑ intro b _ h
        simp [comp‚ÇÄ, h.symm]
    apply DFunLike.congr_fun (h‚ÇÅ := H)

end Unital
end CategoryTheory.Linear
