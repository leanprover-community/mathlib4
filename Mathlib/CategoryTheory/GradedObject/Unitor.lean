/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.GradedObject.Associator
import Mathlib.CategoryTheory.GradedObject.Single
/-!
# The left and right unitors

Given a bifunctor `F : C ‚•§ D ‚•§ D`, an object `X : C` such that `F.obj X ‚âÖ ùü≠ D` and a
map `p : I √ó J ‚Üí J` such that `hp : ‚àÄ (j : J), p ‚ü®0, j‚ü© = j`,
we define an isomorphism of `J`-graded objects for any `Y : GradedObject J D`.
`mapBifunctorLeftUnitor F X e p hp Y : mapBifunctorMapObj F p ((single‚ÇÄ I).obj X) Y ‚âÖ Y`.
Under similar assumptions, we also obtain a right unitor isomorphism
`mapBifunctorMapObj F p X ((single‚ÇÄ I).obj Y) ‚âÖ X`. Finally,
the lemma `mapBifunctor_triangle` promotes a triangle identity involving functors
to a triangle identity for the induced functors on graded objects.

-/

namespace CategoryTheory

open Category Limits

namespace GradedObject

section LeftUnitor

variable {C D I J : Type*} [Category C] [Category D]
  [Zero I] [DecidableEq I] [HasInitial C]
  (F : C ‚•§ D ‚•§ D) (X : C) (e : F.obj X ‚âÖ ùü≠ D)
  [‚àÄ (Y : D), PreservesColimit (Functor.empty.{0} C) (F.flip.obj Y)]
  (p : I √ó J ‚Üí J) (hp : ‚àÄ (j : J), p ‚ü®0, j‚ü© = j)
  (Y Y' : GradedObject J D) (œÜ : Y ‚ü∂ Y')

/-- Given `F : C ‚•§ D ‚•§ D`, `X : C`, `e : F.obj X ‚âÖ ùü≠ D` and `Y : GradedObject J D`,
this is the isomorphism `((mapBifunctor F I J).obj ((single‚ÇÄ I).obj X)).obj Y a ‚âÖ Y a.2`
when `a : I √ó J` is such that `a.1 = 0`. -/
@[simps!]
noncomputable def mapBifunctorObjSingle‚ÇÄObjIso (a : I √ó J) (ha : a.1 = 0) :
    ((mapBifunctor F I J).obj ((single‚ÇÄ I).obj X)).obj Y a ‚âÖ Y a.2 :=
  (F.mapIso (singleObjApplyIsoOfEq _ X _ ha)).app _ ‚â™‚â´ e.app (Y a.2)

/-- Given `F : C ‚•§ D ‚•§ D`, `X : C` and `Y : GradedObject J D`,
`((mapBifunctor F I J).obj ((single‚ÇÄ I).obj X)).obj Y a` is an initial object
when `a : I √ó J` is such that `a.1 ‚â† 0`. -/
noncomputable def mapBifunctorObjSingle‚ÇÄObjIsInitial (a : I √ó J) (ha : a.1 ‚â† 0) :
    IsInitial (((mapBifunctor F I J).obj ((single‚ÇÄ I).obj X)).obj Y a) :=
  IsInitial.isInitialObj (F.flip.obj (Y a.2)) _ (isInitialSingleObjApply _ _ _ ha)

/-- Given `F : C ‚•§ D ‚•§ D`, `X : C`, `e : F.obj X ‚âÖ ùü≠ D`, `Y : GradedObject J D` and
`p : I √ó J ‚Üí J` such that `p ‚ü®0, j‚ü© = j` for all `j`,
this is the (colimit) cofan which shall be used to construct the isomorphism
`mapBifunctorMapObj F p ((single‚ÇÄ I).obj X) Y ‚âÖ Y`, see `mapBifunctorLeftUnitor`. -/
noncomputable def mapBifunctorLeftUnitorCofan (j : J) :
    (((mapBifunctor F I J).obj ((single‚ÇÄ I).obj X)).obj Y).CofanMapObjFun p j :=
  CofanMapObjFun.mk _ _ _ (Y j) (fun a ha =>
    if ha : a.1 = 0 then
      (mapBifunctorObjSingle‚ÇÄObjIso F X e Y a ha).hom ‚â´ eqToHom (by aesop)
    else
      (mapBifunctorObjSingle‚ÇÄObjIsInitial F X Y a ha).to _)

@[simp, reassoc]
lemma mapBifunctorLeftUnitorCofan_inj (j : J) :
    (mapBifunctorLeftUnitorCofan F X e p hp Y j).inj ‚ü®‚ü®0, j‚ü©, hp j‚ü© =
      (F.map (singleObjApplyIso (0 : I) X).hom).app (Y j) ‚â´ e.hom.app (Y j) := by
  simp [mapBifunctorLeftUnitorCofan]

/-- The cofan `mapBifunctorLeftUnitorCofan F X e p hp Y j` is a colimit. -/
noncomputable def mapBifunctorLeftUnitorCofanIsColimit (j : J) :
    IsColimit (mapBifunctorLeftUnitorCofan F X e p hp Y j) :=
  mkCofanColimit _
    (fun s => e.inv.app (Y j) ‚â´
      (F.map (singleObjApplyIso (0 : I) X).inv).app (Y j) ‚â´ s.inj ‚ü®‚ü®0, j‚ü©, hp j‚ü©)
    (fun s => by
      rintro ‚ü®‚ü®i, j'‚ü©, h‚ü©
      by_cases hi : i = 0
      ¬∑ subst hi
        simp only [Set.mem_preimage, hp, Set.mem_singleton_iff] at h
        subst h
        simp
      ¬∑ apply IsInitial.hom_ext
        exact mapBifunctorObjSingle‚ÇÄObjIsInitial _ _ _ _ hi)
    (fun s m hm => by simp [‚Üê hm ‚ü®‚ü®0, j‚ü©, hp j‚ü©])

lemma mapBifunctorLeftUnitor_hasMap :
    HasMap (((mapBifunctor F I J).obj ((single‚ÇÄ I).obj X)).obj Y) p :=
  CofanMapObjFun.hasMap _ _ _ (mapBifunctorLeftUnitorCofanIsColimit F X e p hp Y)

variable [HasMap (((mapBifunctor F I J).obj ((single‚ÇÄ I).obj X)).obj Y) p]
  [HasMap (((mapBifunctor F I J).obj ((single‚ÇÄ I).obj X)).obj Y') p]

/-- Given `F : C ‚•§ D ‚•§ D`, `X : C`, `e : F.obj X ‚âÖ ùü≠ D`, `Y : GradedObject J D` and
`p : I √ó J ‚Üí J` such that `p ‚ü®0, j‚ü© = j` for all `j`,
this is the left unitor isomorphism `mapBifunctorMapObj F p ((single‚ÇÄ I).obj X) Y ‚âÖ Y`. -/
noncomputable def mapBifunctorLeftUnitor : mapBifunctorMapObj F p ((single‚ÇÄ I).obj X) Y ‚âÖ Y :=
  isoMk _ _ (fun j => (CofanMapObjFun.iso
    (mapBifunctorLeftUnitorCofanIsColimit F X e p hp Y j)).symm)

@[reassoc (attr := simp)]
lemma Œπ_mapBifunctorLeftUnitor_hom_apply (j : J) :
    ŒπMapBifunctorMapObj F p ((single‚ÇÄ I).obj X) Y 0 j j (hp j) ‚â´
      (mapBifunctorLeftUnitor F X e p hp Y).hom j =
      (F.map (singleObjApplyIso (0 : I) X).hom).app _ ‚â´ e.hom.app (Y j) := by
  dsimp [mapBifunctorLeftUnitor]
  erw [CofanMapObjFun.ŒπMapObj_iso_inv]
  rw [mapBifunctorLeftUnitorCofan_inj]

lemma mapBifunctorLeftUnitor_inv_apply (j : J) :
    (mapBifunctorLeftUnitor F X e p hp Y).inv j =
      e.inv.app (Y j) ‚â´ (F.map (singleObjApplyIso (0 : I) X).inv).app (Y j) ‚â´
      ŒπMapBifunctorMapObj F p ((single‚ÇÄ I).obj X) Y 0 j j (hp j) := rfl

variable {Y Y'}

@[reassoc]
lemma mapBifunctorLeftUnitor_inv_naturality :
    œÜ ‚â´ (mapBifunctorLeftUnitor F X e p hp Y').inv =
      (mapBifunctorLeftUnitor F X e p hp Y).inv ‚â´ mapBifunctorMapMap F p (ùüô _) œÜ := by
  ext j
  dsimp
  rw [mapBifunctorLeftUnitor_inv_apply, mapBifunctorLeftUnitor_inv_apply, assoc, assoc,
    Œπ_mapBifunctorMapMap]
  dsimp
  rw [Functor.map_id, NatTrans.id_app, id_comp]
  erw [‚Üê NatTrans.naturality_assoc, ‚Üê NatTrans.naturality_assoc]
  rfl

@[reassoc]
lemma mapBifunctorLeftUnitor_naturality :
    mapBifunctorMapMap F p (ùüô _) œÜ ‚â´ (mapBifunctorLeftUnitor F X e p hp Y').hom =
      (mapBifunctorLeftUnitor F X e p hp Y).hom ‚â´ œÜ := by
  rw [‚Üê cancel_mono (mapBifunctorLeftUnitor F X e p hp Y').inv, assoc, assoc, Iso.hom_inv_id,
    comp_id, mapBifunctorLeftUnitor_inv_naturality, Iso.hom_inv_id_assoc]

end LeftUnitor

section RightUnitor

variable {C D I J : Type*} [Category C] [Category D]
  [Zero I] [DecidableEq I] [HasInitial C]
  (F : D ‚•§ C ‚•§ D) (Y : C) (e : F.flip.obj Y ‚âÖ ùü≠ D)
  [‚àÄ (X : D), PreservesColimit (Functor.empty.{0} C) (F.obj X)]
  (p : J √ó I ‚Üí J)
  (hp : ‚àÄ (j : J), p ‚ü®j, 0‚ü© = j) (X X' : GradedObject J D) (œÜ : X ‚ü∂ X')

/-- Given `F : D ‚•§ C ‚•§ D`, `Y : C`, `e : F.flip.obj X ‚âÖ ùü≠ D` and `X : GradedObject J D`,
this is the isomorphism `((mapBifunctor F J I).obj X).obj ((single‚ÇÄ I).obj Y) a ‚âÖ Y a.2`
when `a : J √ó I` is such that `a.2 = 0`. -/
@[simps!]
noncomputable def mapBifunctorObjObjSingle‚ÇÄIso (a : J √ó I) (ha : a.2 = 0) :
    ((mapBifunctor F J I).obj X).obj ((single‚ÇÄ I).obj Y) a ‚âÖ X a.1 :=
  Functor.mapIso _ (singleObjApplyIsoOfEq _ Y _ ha) ‚â™‚â´ e.app (X a.1)

/-- Given `F : D ‚•§ C ‚•§ D`, `Y : C` and `X : GradedObject J D`,
`((mapBifunctor F J I).obj X).obj ((single‚ÇÄ I).obj X) a` is an initial when `a : J √ó I`
is such that `a.2 ‚â† 0`. -/
noncomputable def mapBifunctorObjObjSingle‚ÇÄIsInitial (a : J √ó I) (ha : a.2 ‚â† 0) :
    IsInitial (((mapBifunctor F J I).obj X).obj ((single‚ÇÄ I).obj Y) a) :=
  IsInitial.isInitialObj (F.obj (X a.1)) _ (isInitialSingleObjApply _ _ _ ha)

/-- Given `F : D ‚•§ C ‚•§ D`, `Y : C`, `e : F.flip.obj Y ‚âÖ ùü≠ D`, `X : GradedObject J D` and
`p : J √ó I ‚Üí J` such that `p ‚ü®j, 0‚ü© = j` for all `j`,
this is the (colimit) cofan which shall be used to construct the isomorphism
`mapBifunctorMapObj F p X ((single‚ÇÄ I).obj Y) ‚âÖ X`, see `mapBifunctorRightUnitor`. -/
noncomputable def mapBifunctorRightUnitorCofan (j : J) :
    (((mapBifunctor F J I).obj X).obj ((single‚ÇÄ I).obj Y)).CofanMapObjFun p j :=
  CofanMapObjFun.mk _ _ _ (X j) (fun a ha =>
    if ha : a.2 = 0 then
      (mapBifunctorObjObjSingle‚ÇÄIso F Y e X a ha).hom ‚â´ eqToHom (by aesop)
    else
      (mapBifunctorObjObjSingle‚ÇÄIsInitial F Y X a ha).to _)

@[simp, reassoc]
lemma mapBifunctorRightUnitorCofan_inj (j : J) :
    (mapBifunctorRightUnitorCofan F Y e p hp X j).inj ‚ü®‚ü®j, 0‚ü©, hp j‚ü© =
      (F.obj (X j)).map (singleObjApplyIso (0 : I) Y).hom ‚â´ e.hom.app (X j) := by
  simp [mapBifunctorRightUnitorCofan]

/-- The cofan `mapBifunctorRightUnitorCofan F Y e p hp X j` is a colimit. -/
noncomputable def mapBifunctorRightUnitorCofanIsColimit (j : J) :
    IsColimit (mapBifunctorRightUnitorCofan F Y e p hp X j) :=
  mkCofanColimit _
    (fun s => e.inv.app (X j) ‚â´
      (F.obj (X j)).map (singleObjApplyIso (0 : I) Y).inv ‚â´ s.inj ‚ü®‚ü®j, 0‚ü©, hp j‚ü©)
    (fun s => by
      rintro ‚ü®‚ü®j', i‚ü©, h‚ü©
      by_cases hi : i = 0
      ¬∑ subst hi
        simp only [Set.mem_preimage, hp, Set.mem_singleton_iff] at h
        subst h
        dsimp
        rw [mapBifunctorRightUnitorCofan_inj, assoc, Iso.hom_inv_id_app_assoc,
          ‚Üê Functor.map_comp_assoc, Iso.hom_inv_id, Functor.map_id, id_comp]
      ¬∑ apply IsInitial.hom_ext
        exact mapBifunctorObjObjSingle‚ÇÄIsInitial _ _ _ _ hi)
    (fun s m hm => by
      dsimp
      rw [‚Üê hm ‚ü®‚ü®j, 0‚ü©, hp j‚ü©, mapBifunctorRightUnitorCofan_inj, assoc, ‚Üê Functor.map_comp_assoc,
        Iso.inv_hom_id, Functor.map_id, id_comp, Iso.inv_hom_id_app_assoc])

lemma mapBifunctorRightUnitor_hasMap :
    HasMap (((mapBifunctor F J I).obj X).obj ((single‚ÇÄ I).obj Y)) p :=
  CofanMapObjFun.hasMap _ _ _ (mapBifunctorRightUnitorCofanIsColimit F Y e p hp X)

variable [HasMap (((mapBifunctor F J I).obj X).obj ((single‚ÇÄ I).obj Y)) p]
  [HasMap (((mapBifunctor F J I).obj X').obj ((single‚ÇÄ I).obj Y)) p]

/-- Given `F : D ‚•§ C ‚•§ D`, `Y : C`, `e : F.flip.obj Y ‚âÖ ùü≠ D`, `X : GradedObject J D` and
`p : J √ó I ‚Üí J` such that `p ‚ü®j, 0‚ü© = j` for all `j`,
this is the right unitor isomorphism `mapBifunctorMapObj F p X ((single‚ÇÄ I).obj Y) ‚âÖ X`. -/
noncomputable def mapBifunctorRightUnitor : mapBifunctorMapObj F p X ((single‚ÇÄ I).obj Y) ‚âÖ X :=
  isoMk _ _ (fun j => (CofanMapObjFun.iso
    (mapBifunctorRightUnitorCofanIsColimit F Y e p hp X j)).symm)

@[reassoc (attr := simp)]
lemma Œπ_mapBifunctorRightUnitor_hom_apply (j : J) :
    ŒπMapBifunctorMapObj F p X ((single‚ÇÄ I).obj Y) j 0 j (hp j) ‚â´
        (mapBifunctorRightUnitor F Y e p hp X).hom j =
      (F.obj (X j)).map (singleObjApplyIso (0 : I) Y).hom ‚â´ e.hom.app (X j) := by
  dsimp [mapBifunctorRightUnitor]
  erw [CofanMapObjFun.ŒπMapObj_iso_inv]
  rw [mapBifunctorRightUnitorCofan_inj]

lemma mapBifunctorRightUnitor_inv_apply (j : J) :
    (mapBifunctorRightUnitor F Y e p hp X).inv j =
      e.inv.app (X j) ‚â´ (F.obj (X j)).map (singleObjApplyIso (0 : I) Y).inv ‚â´
        ŒπMapBifunctorMapObj F p X ((single‚ÇÄ I).obj Y) j 0 j (hp j) := rfl

variable {Y Y'}

@[reassoc]
lemma mapBifunctorRightUnitor_inv_naturality :
    œÜ ‚â´ (mapBifunctorRightUnitor F Y e p hp X').inv =
      (mapBifunctorRightUnitor F Y e p hp X).inv ‚â´ mapBifunctorMapMap F p œÜ (ùüô _) := by
  ext j
  dsimp
  rw [mapBifunctorRightUnitor_inv_apply, mapBifunctorRightUnitor_inv_apply, assoc, assoc,
    Œπ_mapBifunctorMapMap]
  dsimp
  rw [Functor.map_id, id_comp, NatTrans.naturality_assoc]
  erw [‚Üê NatTrans.naturality_assoc]
  rfl

@[reassoc]
lemma mapBifunctorRightUnitor_naturality :
    mapBifunctorMapMap F p œÜ (ùüô _) ‚â´ (mapBifunctorRightUnitor F Y e p hp X').hom =
      (mapBifunctorRightUnitor F Y e p hp X).hom ‚â´ œÜ := by
  rw [‚Üê cancel_mono (mapBifunctorRightUnitor F Y e p hp X').inv, assoc, assoc, Iso.hom_inv_id,
    comp_id, mapBifunctorRightUnitor_inv_naturality, Iso.hom_inv_id_assoc]

end RightUnitor

section

variable {I‚ÇÅ I‚ÇÇ I‚ÇÉ J : Type*} [Zero I‚ÇÇ]

/-- Given two maps `r : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J` and `œÄ : I‚ÇÅ √ó I‚ÇÉ ‚Üí J`, this structure is the
input in the formulation of the triangle equality `mapBifunctor_triangle` which
relates the left and right unitor and the associator for `GradedObject.mapBifunctor`. -/
structure TriangleIndexData (r : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J) (œÄ : I‚ÇÅ √ó I‚ÇÉ ‚Üí J) where
  /-- a map `I‚ÇÅ √ó I‚ÇÇ ‚Üí I‚ÇÅ` -/
  p‚ÇÅ‚ÇÇ : I‚ÇÅ √ó I‚ÇÇ ‚Üí I‚ÇÅ
  hp‚ÇÅ‚ÇÇ (i : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ) : œÄ ‚ü®p‚ÇÅ‚ÇÇ ‚ü®i.1, i.2.1‚ü©, i.2.2‚ü© = r i
  /-- a map `I‚ÇÇ √ó I‚ÇÉ ‚Üí I‚ÇÉ` -/
  p‚ÇÇ‚ÇÉ : I‚ÇÇ √ó I‚ÇÉ ‚Üí I‚ÇÉ
  hp‚ÇÇ‚ÇÉ (i : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ) : œÄ ‚ü®i.1, p‚ÇÇ‚ÇÉ i.2‚ü© = r i
  h‚ÇÅ (i‚ÇÅ : I‚ÇÅ) : p‚ÇÅ‚ÇÇ (i‚ÇÅ, 0) = i‚ÇÅ
  h‚ÇÉ (i‚ÇÉ : I‚ÇÉ) : p‚ÇÇ‚ÇÉ (0, i‚ÇÉ) = i‚ÇÉ

variable {r : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J} {œÄ : I‚ÇÅ √ó I‚ÇÉ ‚Üí J}
  (œÑ : TriangleIndexData r œÄ)

namespace TriangleIndexData

attribute [simp] h‚ÇÅ h‚ÇÉ

lemma r_zero (i‚ÇÅ : I‚ÇÅ) (i‚ÇÉ : I‚ÇÉ) : r ‚ü®i‚ÇÅ, 0, i‚ÇÉ‚ü© = œÄ ‚ü®i‚ÇÅ, i‚ÇÉ‚ü© := by
  rw [‚Üê œÑ.hp‚ÇÇ‚ÇÉ, œÑ.h‚ÇÉ i‚ÇÉ]

/-- The `BifunctorComp‚ÇÅ‚ÇÇIndexData r` attached to a `TriangleIndexData r œÄ`. -/
@[reducible]
def œÅ‚ÇÅ‚ÇÇ : BifunctorComp‚ÇÅ‚ÇÇIndexData r where
  I‚ÇÅ‚ÇÇ := I‚ÇÅ
  p := œÑ.p‚ÇÅ‚ÇÇ
  q := œÄ
  hpq := œÑ.hp‚ÇÅ‚ÇÇ

/-- The `BifunctorComp‚ÇÇ‚ÇÉIndexData r` attached to a `TriangleIndexData r œÄ`. -/
@[reducible]
def œÅ‚ÇÇ‚ÇÉ : BifunctorComp‚ÇÇ‚ÇÉIndexData r where
  I‚ÇÇ‚ÇÉ := I‚ÇÉ
  p := œÑ.p‚ÇÇ‚ÇÉ
  q := œÄ
  hpq := œÑ.hp‚ÇÇ‚ÇÉ

end TriangleIndexData

end

section Triangle

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ D I‚ÇÅ I‚ÇÇ I‚ÇÉ J : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ] [Category D]
  [Zero I‚ÇÇ] [DecidableEq I‚ÇÇ] [HasInitial C‚ÇÇ]
  {F‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ} {F‚ÇÇ : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÉ} {G : C‚ÇÅ ‚•§ C‚ÇÉ ‚•§ D}
  (associator : bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ G ‚âÖ bifunctorComp‚ÇÇ‚ÇÉ G F‚ÇÇ)
  (X‚ÇÇ : C‚ÇÇ) (e‚ÇÅ : F‚ÇÅ.flip.obj X‚ÇÇ ‚âÖ ùü≠ C‚ÇÅ) (e‚ÇÇ : F‚ÇÇ.obj X‚ÇÇ ‚âÖ ùü≠ C‚ÇÉ)
  [‚àÄ (X‚ÇÅ : C‚ÇÅ), PreservesColimit (Functor.empty.{0} C‚ÇÇ) (F‚ÇÅ.obj X‚ÇÅ)]
  [‚àÄ (X‚ÇÉ : C‚ÇÉ), PreservesColimit (Functor.empty.{0} C‚ÇÇ) (F‚ÇÇ.flip.obj X‚ÇÉ)]
  {r : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J} {œÄ : I‚ÇÅ √ó I‚ÇÉ ‚Üí J}
  (œÑ : TriangleIndexData r œÄ)
  (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
  [HasMap (((mapBifunctor F‚ÇÅ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj ((single‚ÇÄ I‚ÇÇ).obj X‚ÇÇ)) œÑ.p‚ÇÅ‚ÇÇ]
  [HasMap (((mapBifunctor G I‚ÇÅ I‚ÇÉ).obj
    (mapBifunctorMapObj F‚ÇÅ œÑ.p‚ÇÅ‚ÇÇ X‚ÇÅ ((single‚ÇÄ I‚ÇÇ).obj X‚ÇÇ))).obj X‚ÇÉ) œÄ]
  [HasMap (((mapBifunctor F‚ÇÇ I‚ÇÇ I‚ÇÉ).obj ((single‚ÇÄ I‚ÇÇ).obj X‚ÇÇ)).obj X‚ÇÉ) œÑ.p‚ÇÇ‚ÇÉ]
  [HasMap (((mapBifunctor G I‚ÇÅ I‚ÇÉ).obj X‚ÇÅ).obj
      (mapBifunctorMapObj F‚ÇÇ œÑ.p‚ÇÇ‚ÇÉ ((single‚ÇÄ I‚ÇÇ).obj X‚ÇÇ) X‚ÇÉ)) œÄ]
  [HasGoodTrifunctor‚ÇÅ‚ÇÇObj F‚ÇÅ G œÑ.œÅ‚ÇÅ‚ÇÇ X‚ÇÅ ((single‚ÇÄ I‚ÇÇ).obj X‚ÇÇ) X‚ÇÉ]
  [HasGoodTrifunctor‚ÇÇ‚ÇÉObj G F‚ÇÇ œÑ.œÅ‚ÇÇ‚ÇÉ X‚ÇÅ ((single‚ÇÄ I‚ÇÇ).obj X‚ÇÇ) X‚ÇÉ]
  [HasMap (((mapBifunctor G I‚ÇÅ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÉ) œÄ]
  (triangle : ‚àÄ (X‚ÇÅ : C‚ÇÅ) (X‚ÇÉ : C‚ÇÉ), ((associator.hom.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ ‚â´
    (G.obj X‚ÇÅ).map (e‚ÇÇ.hom.app X‚ÇÉ) = (G.map (e‚ÇÅ.hom.app X‚ÇÅ)).app X‚ÇÉ)

lemma mapBifunctor_triangle :
    (mapBifunctorAssociator associator œÑ.œÅ‚ÇÅ‚ÇÇ œÑ.œÅ‚ÇÇ‚ÇÉ X‚ÇÅ ((single‚ÇÄ I‚ÇÇ).obj X‚ÇÇ) X‚ÇÉ).hom ‚â´
    mapBifunctorMapMap G œÄ (ùüô X‚ÇÅ) (mapBifunctorLeftUnitor F‚ÇÇ X‚ÇÇ e‚ÇÇ œÑ.p‚ÇÇ‚ÇÉ œÑ.h‚ÇÉ X‚ÇÉ).hom =
      mapBifunctorMapMap G œÄ (mapBifunctorRightUnitor F‚ÇÅ X‚ÇÇ e‚ÇÅ œÑ.p‚ÇÅ‚ÇÇ œÑ.h‚ÇÅ X‚ÇÅ).hom (ùüô X‚ÇÉ) := by
  rw [‚Üê cancel_epi ((mapBifunctorMapMap G œÄ
    (mapBifunctorRightUnitor F‚ÇÅ X‚ÇÇ e‚ÇÅ œÑ.p‚ÇÅ‚ÇÇ œÑ.h‚ÇÅ X‚ÇÅ).inv (ùüô X‚ÇÉ)))]
  ext j i‚ÇÅ i‚ÇÉ hj
  simp only [categoryOfGradedObjects_comp, Œπ_mapBifunctorMapMap_assoc,
    mapBifunctorRightUnitor_inv_apply, Functor.id_obj, Functor.flip_obj_obj, Functor.map_comp,
    NatTrans.comp_app, categoryOfGradedObjects_id, Functor.map_id, id_comp, assoc,
    Œπ_mapBifunctorMapMap]
  congr 2
  rw [‚Üê ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj_eq_assoc F‚ÇÅ G œÑ.œÅ‚ÇÅ‚ÇÇ _ _ _ i‚ÇÅ 0 i‚ÇÉ j
    (by rw [œÑ.r_zero, hj]) i‚ÇÅ (by simp), Œπ_mapBifunctorAssociator_hom_assoc,
    ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj_eq_assoc G F‚ÇÇ œÑ.œÅ‚ÇÇ‚ÇÉ _ _ _ i‚ÇÅ 0 i‚ÇÉ j
    (by rw [œÑ.r_zero, hj]) i‚ÇÉ (by simp), Œπ_mapBifunctorMapMap]
  dsimp
  rw [Functor.map_id, NatTrans.id_app, id_comp,
    ‚Üê Functor.map_comp_assoc, ‚Üê NatTrans.comp_app_assoc, ‚Üê Functor.map_comp,
    Œπ_mapBifunctorLeftUnitor_hom_apply F‚ÇÇ X‚ÇÇ e‚ÇÇ œÑ.p‚ÇÇ‚ÇÉ œÑ.h‚ÇÉ X‚ÇÉ i‚ÇÉ,
    Œπ_mapBifunctorRightUnitor_hom_apply F‚ÇÅ X‚ÇÇ e‚ÇÅ œÑ.p‚ÇÅ‚ÇÇ œÑ.h‚ÇÅ X‚ÇÅ i‚ÇÅ]
  dsimp
  simp only [Functor.map_comp, NatTrans.comp_app, ‚Üê triangle (X‚ÇÅ i‚ÇÅ) (X‚ÇÉ i‚ÇÉ), ‚Üê assoc]
  congr 2
  symm
  apply NatTrans.naturality_app (associator.hom.app (X‚ÇÅ i‚ÇÅ))

end Triangle

end GradedObject

end CategoryTheory
