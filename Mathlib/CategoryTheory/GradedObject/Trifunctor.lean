/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.GradedObject.Bifunctor
/-!
# The action of trifunctors on graded objects

Given a trifunctor `F. C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ` and types `I‚ÇÅ`, `I‚ÇÇ` and `I‚ÇÉ`, we define a functor
`GradedObject I‚ÇÅ C‚ÇÅ ‚•§ GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject (I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ) C‚ÇÑ`
(see `mapTrifunctor`). When we have a map `p : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J` and suitable coproducts
exists, we define a functor
`GradedObject I‚ÇÅ C‚ÇÅ ‚•§ GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject J C‚ÇÑ`
(see `mapTrifunctorMap`) which sends graded objects `X‚ÇÅ`, `X‚ÇÇ`, `X‚ÇÉ` to the graded object
which sets `j` to the coproduct of the objects `((F.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ)).obj (X‚ÇÉ i‚ÇÉ)`
for `p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j`.

This shall be used in order to construct the associator isomorphism for the monoidal
category structure on `GradedObject I C` induced by a monoidal structure on `C` and
an additive monoid structure on `I` (TODO @joelriou).

-/

namespace CategoryTheory

open Category Limits

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ C‚ÇÑ : Type*}
  [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ] [Category C‚ÇÑ]
  (F F' : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ)

namespace GradedObject

/-- Auxiliary definition for `mapTrifunctor`. -/
@[simps]
def mapTrifunctorObj {I‚ÇÅ : Type*} (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (I‚ÇÇ I‚ÇÉ : Type*) :
    GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject (I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ) C‚ÇÑ where
  obj X‚ÇÇ :=
    { obj := fun X‚ÇÉ x => ((F.obj (X‚ÇÅ x.1)).obj (X‚ÇÇ x.2.1)).obj (X‚ÇÉ x.2.2)
      map := fun {X‚ÇÉ Y‚ÇÉ} œÜ x => ((F.obj (X‚ÇÅ x.1)).obj (X‚ÇÇ x.2.1)).map (œÜ x.2.2) }
  map {X‚ÇÇ Y‚ÇÇ} œÜ :=
    { app := fun X‚ÇÉ x => ((F.obj (X‚ÇÅ x.1)).map (œÜ x.2.1)).app (X‚ÇÉ x.2.2) }

/-- Given a trifunctor `F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ` and types `I‚ÇÅ`, `I‚ÇÇ`, `I‚ÇÉ`,
this is the obvious functor
`GradedObject I‚ÇÅ C‚ÇÅ ‚•§ GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject (I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ) C‚ÇÑ`.
-/
@[simps]
def mapTrifunctor (I‚ÇÅ I‚ÇÇ I‚ÇÉ : Type*) :
    GradedObject I‚ÇÅ C‚ÇÅ ‚•§ GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§
      GradedObject (I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ) C‚ÇÑ where
  obj X‚ÇÅ := mapTrifunctorObj F X‚ÇÅ I‚ÇÇ I‚ÇÉ
  map {X‚ÇÅ Y‚ÇÅ} œÜ :=
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ x => ((F.map (œÜ x.1)).app (X‚ÇÇ x.2.1)).app (X‚ÇÉ x.2.2) }
      naturality := fun {X‚ÇÇ Y‚ÇÇ} œà => by
        ext X‚ÇÉ x
        dsimp
        simp only [‚Üê NatTrans.comp_app]
        congr 1
        rw [NatTrans.naturality] }

section

variable {F F'}

/-- The natural transformation `mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ ‚ü∂ mapTrifunctor F' I‚ÇÅ I‚ÇÇ I‚ÇÉ`
induced by a natural transformation `F ‚ü∂ F` of trifunctors. -/
@[simps]
def mapTrifunctorMapNatTrans (Œ± : F ‚ü∂ F') (I‚ÇÅ I‚ÇÇ I‚ÇÉ : Type*) :
    mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ ‚ü∂ mapTrifunctor F' I‚ÇÅ I‚ÇÇ I‚ÇÉ where
  app X‚ÇÅ :=
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ i => ((Œ±.app _).app _).app _ }
      naturality := fun {X‚ÇÇ Y‚ÇÇ} œÜ => by
        ext X‚ÇÉ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©
        dsimp
        simp only [‚Üê NatTrans.comp_app, NatTrans.naturality] }
  naturality := fun {X‚ÇÅ Y‚ÇÅ} œÜ => by
    ext X‚ÇÇ X‚ÇÉ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©
    dsimp
    simp only [‚Üê NatTrans.comp_app, NatTrans.naturality]

/-- The natural isomorphism `mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ ‚âÖ mapTrifunctor F' I‚ÇÅ I‚ÇÇ I‚ÇÉ`
induced by a natural isomorphism `F ‚âÖ F` of trifunctors. -/
@[simps]
def mapTrifunctorMapIso (e : F ‚âÖ F') (I‚ÇÅ I‚ÇÇ I‚ÇÉ : Type*) :
    mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ ‚âÖ mapTrifunctor F' I‚ÇÅ I‚ÇÇ I‚ÇÉ where
  hom := mapTrifunctorMapNatTrans e.hom I‚ÇÅ I‚ÇÇ I‚ÇÉ
  inv := mapTrifunctorMapNatTrans e.inv I‚ÇÅ I‚ÇÇ I‚ÇÉ
  hom_inv_id := by
    ext X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©
    dsimp
    simp only [‚Üê NatTrans.comp_app, e.hom_inv_id, NatTrans.id_app]
  inv_hom_id := by
    ext X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©
    dsimp
    simp only [‚Üê NatTrans.comp_app, e.inv_hom_id, NatTrans.id_app]

end

section

variable {I‚ÇÅ I‚ÇÇ I‚ÇÉ J : Type*} (p : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J)

/-- Given a trifunctor `F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÉ`, graded objects `X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ`,
`X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ`, `X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ`, and a map `p : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J`,
this is the `J`-graded object sending `j` to the coproduct of
`((F.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ)).obj (X‚ÇÉ i‚ÇÉ)` for `p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = k`. -/
noncomputable def mapTrifunctorMapObj (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ)
    (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
    GradedObject J C‚ÇÑ :=
  ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).mapObj p

/-- The obvious inclusion
`((F.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ)).obj (X‚ÇÉ i‚ÇÉ) ‚ü∂ mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ j` when
`p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j`. -/
noncomputable def ŒπMapTrifunctorMapObj (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ)
    (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ) (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j)
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
    ((F.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ)).obj (X‚ÇÉ i‚ÇÉ) ‚ü∂ mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ j :=
  ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).ŒπMapObj p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© j h

/-- The maps `mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚ü∂ mapTrifunctorMapObj F p Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ` which
express the functoriality of `mapTrifunctorMapObj`, see `mapTrifunctorMap` -/
noncomputable def mapTrifunctorMapMap {X‚ÇÅ Y‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ)
    {X‚ÇÇ Y‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ)
    {X‚ÇÉ Y‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ} (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p]
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj Y‚ÇÅ).obj Y‚ÇÇ).obj Y‚ÇÉ) p] :
    mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚ü∂ mapTrifunctorMapObj F p Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ :=
  GradedObject.mapMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).map f‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ ‚â´
    (((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj Y‚ÇÅ).map f‚ÇÇ).app X‚ÇÉ ‚â´
    (((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj Y‚ÇÅ).obj Y‚ÇÇ).map f‚ÇÉ) p

@[reassoc (attr := simp)]
lemma Œπ_mapTrifunctorMapMap {X‚ÇÅ Y‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ)
    {X‚ÇÇ Y‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ)
    {X‚ÇÉ Y‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ} (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p]
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj Y‚ÇÅ).obj Y‚ÇÇ).obj Y‚ÇÉ) p]
    (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j) :
  ŒπMapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ mapTrifunctorMapMap F p f‚ÇÅ f‚ÇÇ f‚ÇÉ j =
    ((F.map (f‚ÇÅ i‚ÇÅ)).app (X‚ÇÇ i‚ÇÇ)).app (X‚ÇÉ i‚ÇÉ) ‚â´
      ((F.obj (Y‚ÇÅ i‚ÇÅ)).map (f‚ÇÇ i‚ÇÇ)).app (X‚ÇÉ i‚ÇÉ) ‚â´
      ((F.obj (Y‚ÇÅ i‚ÇÅ)).obj (Y‚ÇÇ i‚ÇÇ)).map (f‚ÇÉ i‚ÇÉ) ‚â´
      ŒπMapTrifunctorMapObj F p Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := by
  dsimp only [ŒπMapTrifunctorMapObj, mapTrifunctorMapMap]
  rw [Œπ_mapMap]
  dsimp
  rw [assoc, assoc]

@[ext]
lemma mapTrifunctorMapObj_ext {X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ} {X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ}
    {X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ} {Y : C‚ÇÑ} (j : J)
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p]
    {œÜ œÜ' : mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ j ‚ü∂ Y}
    (h : ‚àÄ (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (h : p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j),
      ŒπMapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ œÜ =
        ŒπMapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ œÜ') : œÜ = œÜ' := by
  apply mapObj_ext
  rintro ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© hi
  apply h

instance (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
  [h : HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
      HasMap (((mapTrifunctorObj F X‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ) p := h

/-- Given a trifunctor `F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ`, a map `p : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J`, and
graded objects `X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ`, `X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ` and `X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ`,
this is the `J`-graded object sending `j` to the coproduct of
`((F.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ)).obj (X‚ÇÉ i‚ÇÉ)` for `p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j`. -/
@[simps]
noncomputable def mapTrifunctorMapFunctorObj (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ)
    [‚àÄ X‚ÇÇ X‚ÇÉ, HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
    GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject J C‚ÇÑ where
  obj X‚ÇÇ :=
    { obj := fun X‚ÇÉ => mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ
      map := fun {X‚ÇÉ Y‚ÇÉ} œÜ => mapTrifunctorMapMap F p (ùüô X‚ÇÅ) (ùüô X‚ÇÇ) œÜ
      map_id := fun X‚ÇÉ => by
        ext j i‚ÇÅ i‚ÇÇ i‚ÇÉ h
        dsimp
        simp only [Œπ_mapTrifunctorMapMap, categoryOfGradedObjects_id, Functor.map_id,
          NatTrans.id_app, id_comp, comp_id]
      map_comp := fun {X‚ÇÉ Y‚ÇÉ Z‚ÇÉ} œÜ œà => by
        ext j i‚ÇÅ i‚ÇÇ i‚ÇÉ h
        dsimp
        simp only [Œπ_mapTrifunctorMapMap, categoryOfGradedObjects_id, Functor.map_id,
          NatTrans.id_app, categoryOfGradedObjects_comp, Functor.map_comp, assoc, id_comp,
          Œπ_mapTrifunctorMapMap_assoc] }
  map {X‚ÇÇ Y‚ÇÇ} œÜ :=
    { app := fun X‚ÇÉ => mapTrifunctorMapMap F p (ùüô X‚ÇÅ) œÜ (ùüô X‚ÇÉ)
      naturality := fun {X‚ÇÉ Y‚ÇÉ} œà => by
        ext j i‚ÇÅ i‚ÇÇ i‚ÇÉ h
        dsimp
        simp only [Œπ_mapTrifunctorMapMap_assoc, categoryOfGradedObjects_id, Functor.map_id,
          NatTrans.id_app, Œπ_mapTrifunctorMapMap, id_comp, NatTrans.naturality_assoc] }
  map_id X‚ÇÇ := by
    ext X‚ÇÉ j i‚ÇÅ i‚ÇÇ i‚ÇÉ h
    dsimp
    simp only [Œπ_mapTrifunctorMapMap, categoryOfGradedObjects_id, Functor.map_id,
      NatTrans.id_app, id_comp, comp_id]
  map_comp {X‚ÇÇ Y‚ÇÇ Z‚ÇÇ} œÜ œà := by
    ext X‚ÇÉ j i‚ÇÅ i‚ÇÇ i‚ÇÉ
    dsimp
    simp only [Œπ_mapTrifunctorMapMap, categoryOfGradedObjects_id, Functor.map_id,
      NatTrans.id_app, categoryOfGradedObjects_comp, Functor.map_comp, NatTrans.comp_app,
      id_comp, assoc, Œπ_mapTrifunctorMapMap_assoc]

/-- Given a trifunctor `F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ` and a map `p : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J`,
this is the functor
`GradedObject I‚ÇÅ C‚ÇÅ ‚•§ GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject J C‚ÇÑ`
sending `X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ`, `X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ` and `X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ`
to the `J`-graded object sending `j` to the coproduct of
`((F.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ)).obj (X‚ÇÉ i‚ÇÉ)` for `p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j`. -/
@[simps]
noncomputable def mapTrifunctorMap
    [‚àÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ, HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
    GradedObject I‚ÇÅ C‚ÇÅ ‚•§ GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject J C‚ÇÑ where
  obj X‚ÇÅ := mapTrifunctorMapFunctorObj F p X‚ÇÅ
  map := fun {X‚ÇÅ Y‚ÇÅ} œÜ =>
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ => mapTrifunctorMapMap F p œÜ (ùüô X‚ÇÇ) (ùüô X‚ÇÉ)
          naturality := fun {X‚ÇÉ Y‚ÇÉ} œÜ => by
            dsimp
            ext j i‚ÇÅ i‚ÇÇ i‚ÇÉ h
            dsimp
            simp only [Œπ_mapTrifunctorMapMap_assoc, categoryOfGradedObjects_id, Functor.map_id,
              NatTrans.id_app, Œπ_mapTrifunctorMapMap, id_comp, NatTrans.naturality_assoc] }
      naturality := fun {X‚ÇÇ Y‚ÇÇ} œà => by
        ext X‚ÇÉ j
        dsimp
        ext i‚ÇÅ i‚ÇÇ i‚ÇÉ h
        simp only [Œπ_mapTrifunctorMapMap_assoc, categoryOfGradedObjects_id, Functor.map_id,
          NatTrans.id_app, Œπ_mapTrifunctorMapMap, id_comp,
          NatTrans.naturality_app_assoc] }

end

end GradedObject

end CategoryTheory
