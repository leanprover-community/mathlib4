/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.GradedObject.Monoidal
import Mathlib.CategoryTheory.Monoidal.Braided.Basic
/-!
# The braided and symmetric category structures on graded objects

In this file, we construct the braiding
`GradedObject.Monoidal.braiding : tensorObj X Y ‚âÖ tensorObj Y X`
for two objects `X` and `Y` in `GradedObject I C`, when `I` is a commutative
additive monoid (and suitable coproducts exist in a braided category `C`).

When `C` is a braided category and suitable assumptions are made, we obtain the braided category
structure on `GradedObject I C` and show that it is symmetric if `C` is symmetric.

-/

namespace CategoryTheory

open Category Limits

variable {I : Type*} [AddCommMonoid I] {C : Type*} [Category C] [MonoidalCategory C]

namespace GradedObject

namespace Monoidal

variable (X Y Z : GradedObject I C)

section Braided

variable [BraidedCategory C]

/-- The braiding `tensorObj X Y ‚âÖ tensorObj Y X` when `X` and `Y` are graded objects
indexed by a commutative additive monoid. -/
noncomputable def braiding [HasTensor X Y] [HasTensor Y X] : tensorObj X Y ‚âÖ tensorObj Y X where
  hom k := tensorObjDesc (fun i j hij => (Œ≤_ _ _).hom ‚â´
    ŒπTensorObj Y X j i k (by simpa only [add_comm j i] using hij))
  inv k := tensorObjDesc (fun i j hij => (Œ≤_ _ _).inv ‚â´
    ŒπTensorObj X Y j i k (by simpa only [add_comm j i] using hij))

variable {Y Z} in
lemma braiding_naturality_right [HasTensor X Y] [HasTensor Y X] [HasTensor X Z] [HasTensor Z X]
    (f : Y ‚ü∂ Z) :
    whiskerLeft X f ‚â´ (braiding X Z).hom = (braiding X Y).hom ‚â´ whiskerRight f X  := by
  dsimp [braiding]
  aesop_cat

variable {X Y} in
lemma braiding_naturality_left [HasTensor Y Z] [HasTensor Z Y] [HasTensor X Z] [HasTensor Z X]
    (f : X ‚ü∂ Y) :
    whiskerRight f Z ‚â´ (braiding Y Z).hom = (braiding X Z).hom ‚â´ whiskerLeft Z f  := by
  dsimp [braiding]
  aesop_cat

lemma hexagon_forward [HasTensor X Y] [HasTensor Y X] [HasTensor Y Z]
    [HasTensor Z X] [HasTensor X Z]
    [HasTensor (tensorObj X Y) Z] [HasTensor X (tensorObj Y Z)]
    [HasTensor (tensorObj Y Z) X] [HasTensor Y (tensorObj Z X)]
    [HasTensor (tensorObj Y X) Z] [HasTensor Y (tensorObj X Z)]
    [HasGoodTensor‚ÇÅ‚ÇÇTensor X Y Z] [HasGoodTensorTensor‚ÇÇ‚ÇÉ X Y Z]
    [HasGoodTensor‚ÇÅ‚ÇÇTensor Y Z X] [HasGoodTensorTensor‚ÇÇ‚ÇÉ Y Z X]
    [HasGoodTensor‚ÇÅ‚ÇÇTensor Y X Z] [HasGoodTensorTensor‚ÇÇ‚ÇÉ Y X Z] :
    (associator X Y Z).hom ‚â´ (braiding X (tensorObj Y Z)).hom ‚â´ (associator Y Z X).hom =
      whiskerRight (braiding X Y).hom Z ‚â´ (associator Y X Z).hom ‚â´
        whiskerLeft Y (braiding X Z).hom := by
  ext k i‚ÇÅ i‚ÇÇ i‚ÇÉ h
  dsimp [braiding]
  conv_lhs => rw [ŒπTensorObj‚ÇÉ'_associator_hom_assoc, ŒπTensorObj‚ÇÉ_eq X Y Z i‚ÇÅ i‚ÇÇ i‚ÇÉ k h _ rfl,
    assoc, Œπ_tensorObjDesc_assoc, assoc, ‚Üê MonoidalCategory.id_tensorHom,
    BraidedCategory.braiding_naturality_assoc,
    BraidedCategory.braiding_tensor_right, assoc, assoc, assoc, assoc, Iso.hom_inv_id_assoc,
    MonoidalCategory.tensorHom_id,
    ‚Üê ŒπTensorObj‚ÇÉ'_eq_assoc Y Z X i‚ÇÇ i‚ÇÉ i‚ÇÅ k (by rw [add_comm _ i‚ÇÅ, ‚Üê add_assoc, h]) _ rfl,
    ŒπTensorObj‚ÇÉ'_associator_hom, Iso.inv_hom_id_assoc]
  conv_rhs => rw [ŒπTensorObj‚ÇÉ'_eq X Y Z i‚ÇÅ i‚ÇÇ i‚ÇÉ k h _ rfl, assoc, Œπ_tensorHom_assoc,
    ‚Üê MonoidalCategory.tensorHom_id,
    ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp, Œπ_tensorObjDesc,
    categoryOfGradedObjects_id, MonoidalCategory.comp_tensor_id, assoc,
    MonoidalCategory.tensorHom_id, MonoidalCategory.tensorHom_id,
    ‚Üê ŒπTensorObj‚ÇÉ'_eq_assoc Y X Z i‚ÇÇ i‚ÇÅ i‚ÇÉ k
      (by rw [add_comm i‚ÇÇ i‚ÇÅ, h]) (i‚ÇÅ + i‚ÇÇ) (add_comm i‚ÇÇ i‚ÇÅ),
    ŒπTensorObj‚ÇÉ'_associator_hom_assoc,
    ŒπTensorObj‚ÇÉ_eq Y X Z i‚ÇÇ i‚ÇÅ i‚ÇÉ k (by rw [add_comm i‚ÇÇ i‚ÇÅ, h]) _ rfl, assoc,
    Œπ_tensorHom, categoryOfGradedObjects_id, ‚Üê MonoidalCategory.tensorHom_id,
    ‚Üê MonoidalCategory.id_tensorHom,
    ‚Üê MonoidalCategory.id_tensor_comp_assoc,
    Œπ_tensorObjDesc, MonoidalCategory.id_tensor_comp, assoc,
    ‚Üê MonoidalCategory.id_tensor_comp_assoc, MonoidalCategory.tensorHom_id,
    MonoidalCategory.id_tensorHom, MonoidalCategory.whiskerLeft_comp, assoc,
    ‚Üê ŒπTensorObj‚ÇÉ_eq Y Z X i‚ÇÇ i‚ÇÉ i‚ÇÅ k (by rw [add_comm _ i‚ÇÅ, ‚Üê add_assoc, h])
      (i‚ÇÅ + i‚ÇÉ) (add_comm _ _ )]

lemma hexagon_reverse [HasTensor X Y] [HasTensor Y Z] [HasTensor Z X]
    [HasTensor Z Y] [HasTensor X Z]
    [HasTensor (tensorObj X Y) Z] [HasTensor X (tensorObj Y Z)]
    [HasTensor Z (tensorObj X Y)] [HasTensor (tensorObj Z X) Y]
    [HasTensor X (tensorObj Z Y)] [HasTensor (tensorObj X Z) Y]
    [HasGoodTensor‚ÇÅ‚ÇÇTensor X Y Z] [HasGoodTensorTensor‚ÇÇ‚ÇÉ X Y Z]
    [HasGoodTensor‚ÇÅ‚ÇÇTensor Z X Y] [HasGoodTensorTensor‚ÇÇ‚ÇÉ Z X Y]
    [HasGoodTensor‚ÇÅ‚ÇÇTensor X Z Y] [HasGoodTensorTensor‚ÇÇ‚ÇÉ X Z Y]:
    (associator X Y Z).inv ‚â´ (braiding (tensorObj X Y) Z).hom ‚â´ (associator Z X Y).inv =
      whiskerLeft X (braiding Y Z).hom ‚â´ (associator X Z Y).inv ‚â´
        whiskerRight (braiding X Z).hom Y := by
  ext k i‚ÇÅ i‚ÇÇ i‚ÇÉ h
  dsimp [braiding]
  conv_lhs => rw [ŒπTensorObj‚ÇÉ_associator_inv_assoc, ŒπTensorObj‚ÇÉ'_eq X Y Z i‚ÇÅ i‚ÇÇ i‚ÇÉ k h _ rfl, assoc,
    Œπ_tensorObjDesc_assoc, assoc, ‚Üê MonoidalCategory.tensorHom_id,
    BraidedCategory.braiding_naturality_assoc,
    BraidedCategory.braiding_tensor_left, assoc, assoc, assoc, assoc, Iso.inv_hom_id_assoc,
    MonoidalCategory.id_tensorHom,
    ‚Üê ŒπTensorObj‚ÇÉ_eq_assoc Z X Y i‚ÇÉ i‚ÇÅ i‚ÇÇ k (by rw [add_assoc, add_comm i‚ÇÉ, h]) _ rfl,
    ŒπTensorObj‚ÇÉ_associator_inv, Iso.hom_inv_id_assoc]
  conv_rhs => rw [ŒπTensorObj‚ÇÉ_eq X Y Z i‚ÇÅ i‚ÇÇ i‚ÇÉ k h _ rfl, assoc, Œπ_tensorHom_assoc,
    ‚Üê MonoidalCategory.id_tensorHom,
    ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp, Œπ_tensorObjDesc,
    categoryOfGradedObjects_id, MonoidalCategory.id_tensor_comp, assoc,
    MonoidalCategory.id_tensorHom, MonoidalCategory.id_tensorHom,
    ‚Üê ŒπTensorObj‚ÇÉ_eq_assoc X Z Y i‚ÇÅ i‚ÇÉ i‚ÇÇ k
      (by rw [add_assoc, add_comm i‚ÇÉ, ‚Üê add_assoc, h]) (i‚ÇÇ + i‚ÇÉ) (add_comm _ _),
    ŒπTensorObj‚ÇÉ_associator_inv_assoc,
    ŒπTensorObj‚ÇÉ'_eq X Z Y i‚ÇÅ i‚ÇÉ i‚ÇÇ k (by rw [add_assoc, add_comm i‚ÇÉ, ‚Üê add_assoc, h]) _ rfl,
    assoc, Œπ_tensorHom, categoryOfGradedObjects_id, ‚Üê MonoidalCategory.tensorHom_id,
    ‚Üê MonoidalCategory.comp_tensor_id_assoc,
    Œπ_tensorObjDesc, MonoidalCategory.comp_tensor_id, assoc,
    MonoidalCategory.tensorHom_id, MonoidalCategory.tensorHom_id,
    ‚Üê ŒπTensorObj‚ÇÉ'_eq Z X Y i‚ÇÉ i‚ÇÅ i‚ÇÇ k (by rw [add_assoc, add_comm i‚ÇÉ, h])
      (i‚ÇÅ + i‚ÇÉ) (add_comm _ _)]

end Braided

@[reassoc (attr := simp)]
lemma symmetry [SymmetricCategory C] [HasTensor X Y] [HasTensor Y X] :
    (braiding X Y).hom ‚â´ (braiding Y X).hom = ùüô _ := by
  dsimp [braiding]
  aesop_cat

end Monoidal

section Instances

variable
  [‚àÄ (X‚ÇÅ X‚ÇÇ : GradedObject I C), HasTensor X‚ÇÅ X‚ÇÇ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [DecidableEq I] [HasInitial C]
  [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C)
    ((MonoidalCategory.curriedTensor C).obj X‚ÇÅ)]
  [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C)
    ((MonoidalCategory.curriedTensor C).flip.obj X‚ÇÇ)]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject I C), HasTensor‚ÇÑObjExt X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ]

noncomputable instance braidedCategory [BraidedCategory C] :
    BraidedCategory (GradedObject I C) where
  braiding X Y := Monoidal.braiding X Y
  braiding_naturality_left _ _:= Monoidal.braiding_naturality_left _ _
  braiding_naturality_right _ _ _ _  := Monoidal.braiding_naturality_right _ _
  hexagon_forward _ _ _ := Monoidal.hexagon_forward _ _ _
  hexagon_reverse _ _ _ := Monoidal.hexagon_reverse _ _ _

noncomputable instance symmetricCategory [SymmetricCategory C] :
    SymmetricCategory (GradedObject I C) where
  symmetry _ _ := Monoidal.symmetry _ _

/-!
The braided/symmetric monoidal category structure on `GradedObject ‚Ñï C` can
be inferred from the assumptions `[HasFiniteCoproducts C]`,
`[‚àÄ (X : C), PreservesFiniteCoproducts ((curriedTensor C).obj X)]` and
`[‚àÄ (X : C), PreservesFiniteCoproducts ((curriedTensor C).flip.obj X)]`.
This requires importing `Mathlib.CategoryTheory.Limits.Preserves.Finite`.
-/

end Instances

end GradedObject

end CategoryTheory
