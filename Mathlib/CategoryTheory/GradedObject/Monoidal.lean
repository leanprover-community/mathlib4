/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Kim Morrison
-/
import Mathlib.CategoryTheory.GradedObject.Unitor

/-!
# The monoidal category structures on graded objects

Assuming that `C` is a monoidal category and that `I` is an additive monoid,
we introduce a partially defined tensor product on the category `GradedObject I C`:
given `X‚ÇÅ` and `X‚ÇÇ` two objects in `GradedObject I C`, we define
`GradedObject.Monoidal.tensorObj X‚ÇÅ X‚ÇÇ` under the assumption `HasTensor X‚ÇÅ X‚ÇÇ`
that the coproduct of `X‚ÇÅ i ‚äó X‚ÇÇ j` for `i + j = n` exists for any `n : I`.

-/

universe u

namespace CategoryTheory

open Limits MonoidalCategory Category

variable {I : Type u} [AddMonoid I] {C : Type*} [Category C] [MonoidalCategory C]

namespace GradedObject

/-- The tensor product of two graded objects `X‚ÇÅ` and `X‚ÇÇ` exists if for any `n`,
the coproduct of the objects `X‚ÇÅ i ‚äó X‚ÇÇ j` for `i + j = n` exists. -/
abbrev HasTensor (X‚ÇÅ X‚ÇÇ : GradedObject I C) : Prop :=
  HasMap (((mapBifunctor (curriedTensor C) I I).obj X‚ÇÅ).obj X‚ÇÇ) (fun ‚ü®i, j‚ü© => i + j)

namespace Monoidal

/-- The tensor product of two graded objects. -/
noncomputable abbrev tensorObj (X‚ÇÅ X‚ÇÇ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ] :
    GradedObject I C :=
  mapBifunctorMapObj (curriedTensor C) (fun ‚ü®i, j‚ü© => i + j) X‚ÇÅ X‚ÇÇ

section

variable (X‚ÇÅ X‚ÇÇ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ]

/-- The inclusion of a summand in a tensor product of two graded objects. -/
noncomputable def ŒπTensorObj (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
  X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ tensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ‚ÇÇ :=
    ŒπMapBifunctorMapObj (curriedTensor C) _ _ _ _ _ _ h

variable {X‚ÇÅ X‚ÇÇ}

@[ext]
lemma tensorObj_ext {A : C} {j : I} (f g : tensorObj X‚ÇÅ X‚ÇÇ j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (hi : i‚ÇÅ + i‚ÇÇ = j),
      ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ f = ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ g) : f = g := by
  apply mapObj_ext
  rintro ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© hi
  exact h i‚ÇÅ i‚ÇÇ hi

/-- Constructor for morphisms from a tensor product of two graded objects. -/
noncomputable def tensorObjDesc {A : C} {k : I}
    (f : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (_ : i‚ÇÅ + i‚ÇÇ = k), X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ A) : tensorObj X‚ÇÅ X‚ÇÇ k ‚ü∂ A :=
  mapBifunctorMapObjDesc f

@[reassoc (attr := simp)]
lemma Œπ_tensorObjDesc {A : C} {k : I}
    (f : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (_ : i‚ÇÅ + i‚ÇÇ = k), X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ A) (i‚ÇÅ i‚ÇÇ : I) (hi : i‚ÇÅ + i‚ÇÇ = k) :
    ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ k hi ‚â´ tensorObjDesc f = f i‚ÇÅ i‚ÇÇ hi := by
  apply Œπ_mapBifunctorMapObjDesc

end

/-- The morphism `tensorObj X‚ÇÅ Y‚ÇÅ ‚ü∂ tensorObj X‚ÇÇ Y‚ÇÇ` induced by morphisms of graded
objects `f : X‚ÇÅ ‚ü∂ X‚ÇÇ` and `g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ`. -/
noncomputable def tensorHom {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    [HasTensor X‚ÇÅ Y‚ÇÅ] [HasTensor X‚ÇÇ Y‚ÇÇ] :
    tensorObj X‚ÇÅ Y‚ÇÅ ‚ü∂ tensorObj X‚ÇÇ Y‚ÇÇ :=
  mapBifunctorMapMap _ _ f g

@[reassoc (attr := simp)]
lemma Œπ_tensorHom {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    [HasTensor X‚ÇÅ Y‚ÇÅ] [HasTensor X‚ÇÇ Y‚ÇÇ] (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
    ŒπTensorObj X‚ÇÅ Y‚ÇÅ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h ‚â´ tensorHom f g i‚ÇÅ‚ÇÇ =
      (f i‚ÇÅ ‚äó g i‚ÇÇ) ‚â´ ŒπTensorObj X‚ÇÇ Y‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h := by
  rw [MonoidalCategory.tensorHom_def, assoc]
  apply Œπ_mapBifunctorMapMap

/-- The morphism `tensorObj X Y‚ÇÅ ‚ü∂ tensorObj X Y‚ÇÇ` induced by a morphism of graded objects
`œÜ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ`. -/
noncomputable abbrev whiskerLeft (X : GradedObject I C) {Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (œÜ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    [HasTensor X Y‚ÇÅ] [HasTensor X Y‚ÇÇ] : tensorObj X Y‚ÇÅ ‚ü∂ tensorObj X Y‚ÇÇ :=
  tensorHom (ùüô X) œÜ

/-- The morphism `tensorObj X‚ÇÅ Y ‚ü∂ tensorObj X‚ÇÇ Y` induced by a morphism of graded objects
`œÜ : X‚ÇÅ ‚ü∂ X‚ÇÇ`. -/
noncomputable abbrev whiskerRight {X‚ÇÅ X‚ÇÇ : GradedObject I C} (œÜ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (Y : GradedObject I C)
    [HasTensor X‚ÇÅ Y] [HasTensor X‚ÇÇ Y] : tensorObj X‚ÇÅ Y ‚ü∂ tensorObj X‚ÇÇ Y :=
  tensorHom œÜ (ùüô Y)

@[simp]
lemma tensor_id (X Y : GradedObject I C) [HasTensor X Y] :
    tensorHom (ùüô X) (ùüô Y) = ùüô _ := by
  dsimp [tensorHom, mapBifunctorMapMap]
  simp only [Functor.map_id, NatTrans.id_app, comp_id, mapMap_id]
  rfl

@[reassoc]
lemma tensor_comp {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : GradedObject I C} (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ)
    (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Y‚ÇÉ) [HasTensor X‚ÇÅ Y‚ÇÅ] [HasTensor X‚ÇÇ Y‚ÇÇ] [HasTensor X‚ÇÉ Y‚ÇÉ] :
    tensorHom (f‚ÇÅ ‚â´ f‚ÇÇ) (g‚ÇÅ ‚â´ g‚ÇÇ) = tensorHom f‚ÇÅ g‚ÇÅ ‚â´ tensorHom f‚ÇÇ g‚ÇÇ := by
  dsimp only [tensorHom, mapBifunctorMapMap]
  rw [‚Üê mapMap_comp]
  apply congr_mapMap
  simp

lemma tensorHom_def {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    [HasTensor X‚ÇÅ Y‚ÇÅ] [HasTensor X‚ÇÇ Y‚ÇÇ] [HasTensor X‚ÇÇ Y‚ÇÅ] :
    tensorHom f g = whiskerRight f Y‚ÇÅ ‚â´ whiskerLeft X‚ÇÇ g := by
  rw [‚Üê tensor_comp, id_comp, comp_id]

/-- This is the addition map `I √ó I √ó I ‚Üí I` for an additive monoid `I`. -/
def r‚ÇÅ‚ÇÇ‚ÇÉ : I √ó I √ó I ‚Üí I := fun ‚ü®i, j, k‚ü© => i + j + k

/-- Auxiliary definition for `associator`. -/
@[reducible] def œÅ‚ÇÅ‚ÇÇ : BifunctorComp‚ÇÅ‚ÇÇIndexData (r‚ÇÅ‚ÇÇ‚ÇÉ : _ ‚Üí I) where
  I‚ÇÅ‚ÇÇ := I
  p := fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© => i‚ÇÅ + i‚ÇÇ
  q := fun ‚ü®i‚ÇÅ‚ÇÇ, i‚ÇÉ‚ü© => i‚ÇÅ‚ÇÇ + i‚ÇÉ
  hpq := fun _ => rfl

/-- Auxiliary definition for `associator`. -/
@[reducible] def œÅ‚ÇÇ‚ÇÉ : BifunctorComp‚ÇÇ‚ÇÉIndexData (r‚ÇÅ‚ÇÇ‚ÇÉ : _ ‚Üí I) where
  I‚ÇÇ‚ÇÉ := I
  p := fun ‚ü®i‚ÇÇ, i‚ÇÉ‚ü© => i‚ÇÇ + i‚ÇÉ
  q := fun ‚ü®i‚ÇÅ‚ÇÇ, i‚ÇÉ‚ü© => i‚ÇÅ‚ÇÇ + i‚ÇÉ
  hpq _ := (add_assoc _ _ _).symm

variable (I) in
/-- Auxiliary definition for `associator`. -/
@[reducible]
def triangleIndexData : TriangleIndexData (r‚ÇÅ‚ÇÇ‚ÇÉ : _ ‚Üí I) (fun ‚ü®i‚ÇÅ, i‚ÇÉ‚ü© => i‚ÇÅ + i‚ÇÉ) where
  p‚ÇÅ‚ÇÇ := fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© => i‚ÇÅ + i‚ÇÇ
  p‚ÇÇ‚ÇÉ := fun ‚ü®i‚ÇÇ, i‚ÇÉ‚ü© => i‚ÇÇ + i‚ÇÉ
  hp‚ÇÅ‚ÇÇ := fun _ => rfl
  hp‚ÇÇ‚ÇÉ := fun _ => (add_assoc _ _ _).symm
  h‚ÇÅ := add_zero
  h‚ÇÉ := zero_add

/-- Given three graded objects `X‚ÇÅ`, `X‚ÇÇ`, `X‚ÇÉ` in `GradedObject I C`, this is the
assumption that for all `i‚ÇÅ‚ÇÇ : I` and `i‚ÇÉ : I`, the tensor product functor `- ‚äó X‚ÇÉ i‚ÇÉ`
commutes with the coproduct of the objects `X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ` such that `i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ`. -/
abbrev _root_.CategoryTheory.GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C) :=
  HasGoodTrifunctor‚ÇÅ‚ÇÇObj (curriedTensor C) (curriedTensor C) œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ

/-- Given three graded objects `X‚ÇÅ`, `X‚ÇÇ`, `X‚ÇÉ` in `GradedObject I C`, this is the
assumption that for all `i‚ÇÅ : I` and `i‚ÇÇ‚ÇÉ : I`, the tensor product functor `X‚ÇÅ i‚ÇÅ ‚äó -`
commutes with the coproduct of the objects `X‚ÇÇ i‚ÇÇ ‚äó X‚ÇÉ i‚ÇÉ` such that `i‚ÇÇ + i‚ÇÉ = i‚ÇÇ‚ÇÉ`. -/
abbrev _root_.CategoryTheory.GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C) :=
  HasGoodTrifunctor‚ÇÇ‚ÇÉObj (curriedTensor C) (curriedTensor C) œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ

section

variable (Z : C) (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ] [HasTensor X‚ÇÇ X‚ÇÉ]
  [HasTensor (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ] [HasTensor X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ)]
  {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : GradedObject I C} [HasTensor Y‚ÇÅ Y‚ÇÇ] [HasTensor Y‚ÇÇ Y‚ÇÉ]
  [HasTensor (tensorObj Y‚ÇÅ Y‚ÇÇ) Y‚ÇÉ] [HasTensor Y‚ÇÅ (tensorObj Y‚ÇÇ Y‚ÇÉ)]

/-- The associator isomorphism for graded objects. -/
noncomputable def associator [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ] [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ] :
  tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ ‚âÖ tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) :=
    mapBifunctorAssociator (MonoidalCategory.curriedAssociatorNatIso C) œÅ‚ÇÅ‚ÇÇ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ

/-- The inclusion `X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚äó X‚ÇÉ i‚ÇÉ ‚ü∂ tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) j`
when `i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j`. -/
noncomputable def ŒπTensorObj‚ÇÉ (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚äó X‚ÇÉ i‚ÇÉ ‚ü∂ tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) j :=
  X‚ÇÅ i‚ÇÅ ‚óÅ ŒπTensorObj X‚ÇÇ X‚ÇÉ i‚ÇÇ i‚ÇÉ _ rfl ‚â´ ŒπTensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) i‚ÇÅ (i‚ÇÇ + i‚ÇÉ) j
    (by rw [‚Üê add_assoc, h])

@[reassoc]
lemma ŒπTensorObj‚ÇÉ_eq (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) (i‚ÇÇ‚ÇÉ : I) (h' : i‚ÇÇ + i‚ÇÉ = i‚ÇÇ‚ÇÉ) :
    ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h =
      (X‚ÇÅ i‚ÇÅ ‚óÅ ŒπTensorObj X‚ÇÇ X‚ÇÉ i‚ÇÇ i‚ÇÉ i‚ÇÇ‚ÇÉ h') ‚â´
        ŒπTensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) i‚ÇÅ i‚ÇÇ‚ÇÉ j (by rw [‚Üê h', ‚Üê add_assoc, h]) := by
  subst h'
  rfl

/-- The inclusion `X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚äó X‚ÇÉ i‚ÇÉ ‚ü∂ tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ j`
when `i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j`. -/
noncomputable def ŒπTensorObj‚ÇÉ' (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    (X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ) ‚äó X‚ÇÉ i‚ÇÉ ‚ü∂ tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ j :=
  (ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ (i‚ÇÅ + i‚ÇÇ) rfl ‚ñ∑ X‚ÇÉ i‚ÇÉ) ‚â´
    ŒπTensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ (i‚ÇÅ + i‚ÇÇ) i‚ÇÉ j h

@[reassoc]
lemma ŒπTensorObj‚ÇÉ'_eq (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) (i‚ÇÅ‚ÇÇ : I)
    (h' : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h =
      (ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h' ‚ñ∑ X‚ÇÉ i‚ÇÉ) ‚â´
        ŒπTensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ i‚ÇÅ‚ÇÇ i‚ÇÉ j (by rw [‚Üê h', h]) := by
  subst h'
  rfl

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ}

@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ_tensorHom (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ tensorHom f‚ÇÅ (tensorHom f‚ÇÇ f‚ÇÉ) j =
      (f‚ÇÅ i‚ÇÅ ‚äó f‚ÇÇ i‚ÇÇ ‚äó f‚ÇÉ i‚ÇÉ) ‚â´ ŒπTensorObj‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := by
  rw [ŒπTensorObj‚ÇÉ_eq _ _ _ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h _  rfl,
    ŒπTensorObj‚ÇÉ_eq _ _ _ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h _  rfl, assoc, Œπ_tensorHom,
    ‚Üê id_tensorHom, ‚Üê id_tensorHom, ‚Üê MonoidalCategory.tensor_comp_assoc, Œπ_tensorHom,
    ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp, comp_id]

@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ'_tensorHom (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ tensorHom (tensorHom f‚ÇÅ f‚ÇÇ) f‚ÇÉ j =
      ((f‚ÇÅ i‚ÇÅ ‚äó f‚ÇÇ i‚ÇÇ) ‚äó f‚ÇÉ i‚ÇÉ) ‚â´ ŒπTensorObj‚ÇÉ' Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := by
  rw [ŒπTensorObj‚ÇÉ'_eq _ _ _ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h _  rfl,
    ŒπTensorObj‚ÇÉ'_eq _ _ _ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h _  rfl, assoc, Œπ_tensorHom,
    ‚Üê tensorHom_id, ‚Üê tensorHom_id, ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp,
    Œπ_tensorHom, ‚Üê MonoidalCategory.tensor_comp_assoc, comp_id]

@[ext]
lemma tensorObj‚ÇÉ_ext {j : I} {A : C} (f g : tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) j ‚ü∂ A)
    [H : HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : I) (hi : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j),
      ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j hi ‚â´ f = ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j hi ‚â´ g) :
      f = g := by
  apply mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj_ext (H := H)
  intro i‚ÇÅ i‚ÇÇ i‚ÇÉ hi
  exact h i‚ÇÅ i‚ÇÇ i‚ÇÉ hi

@[ext]
lemma tensorObj‚ÇÉ'_ext {j : I} {A : C} (f g : tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ j ‚ü∂ A)
    [H : HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ]
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j),
      ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ f = ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ g) :
      f = g := by
  apply mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj_ext (H := H)
  intro i‚ÇÅ i‚ÇÇ i‚ÇÉ hi
  exact h i‚ÇÅ i‚ÇÇ i‚ÇÉ hi

variable (X‚ÇÅ X‚ÇÇ X‚ÇÉ)

@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ'_associator_hom
    [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ] [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
    (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j =
      (Œ±_ _ _ _).hom ‚â´ ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h :=
  Œπ_mapBifunctorAssociator_hom (MonoidalCategory.curriedAssociatorNatIso C)
    œÅ‚ÇÅ‚ÇÇ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h

@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ_associator_inv
    [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ] [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
    (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).inv j =
      (Œ±_ _ _ _).inv ‚â´ ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h :=
  Œπ_mapBifunctorAssociator_inv (MonoidalCategory.curriedAssociatorNatIso C)
    œÅ‚ÇÅ‚ÇÇ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ}

lemma associator_naturality (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ] [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
    [HasGoodTensor‚ÇÅ‚ÇÇTensor Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ] [HasGoodTensorTensor‚ÇÇ‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ] :
    tensorHom (tensorHom f‚ÇÅ f‚ÇÇ) f‚ÇÉ ‚â´ (associator Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom =
      (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ tensorHom f‚ÇÅ (tensorHom f‚ÇÇ f‚ÇÉ) := by aesop_cat

end

section TensorUnit

variable [DecidableEq I] [HasInitial C]

/-- The unit of the tensor product on graded objects is `(single‚ÇÄ I).obj (ùüô_ C)`. -/
noncomputable def tensorUnit : GradedObject I C := (single‚ÇÄ I).obj (ùüô_ C)

/-- The canonical isomorphism `tensorUnit 0 ‚âÖ ùüô_ C` -/
noncomputable def tensorUnit‚ÇÄ : (tensorUnit : GradedObject I C) 0 ‚âÖ ùüô_ C :=
  singleObjApplyIso (0 : I) (ùüô_ C)

/-- `tensorUnit i` is an initial object when `i ‚â† 0`. -/
noncomputable def isInitialTensorUnitApply (i : I) (hi : i ‚â† 0) :
    IsInitial ((tensorUnit : GradedObject I C) i) :=
  isInitialSingleObjApply _ _ _ hi

end TensorUnit

section LeftUnitor

variable [DecidableEq I] [HasInitial C]
  [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C) ((curriedTensor C).flip.obj X‚ÇÇ)]
  (X X' : GradedObject I C)

instance : HasTensor tensorUnit X :=
  mapBifunctorLeftUnitor_hasMap _ _ (leftUnitorNatIso C) _ zero_add _

instance : HasMap (((mapBifunctor (curriedTensor C) I I).obj
    ((single‚ÇÄ I).obj (ùüô_ C))).obj X) (fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© => i‚ÇÅ + i‚ÇÇ) :=
  (inferInstance : HasTensor tensorUnit X)

/-- The left unitor isomorphism for graded objects. -/
noncomputable def leftUnitor : tensorObj tensorUnit X ‚âÖ X :=
    mapBifunctorLeftUnitor (curriedTensor C) (ùüô_ C)
      (leftUnitorNatIso C) (fun (‚ü®i‚ÇÅ, i‚ÇÇ‚ü© : I √ó I) => i‚ÇÅ + i‚ÇÇ) zero_add X

lemma leftUnitor_inv_apply (i : I) :
    (leftUnitor X).inv i = (Œª_ (X i)).inv ‚â´ tensorUnit‚ÇÄ.inv ‚ñ∑ (X i) ‚â´
      ŒπTensorObj tensorUnit X 0 i i (zero_add i) := rfl

variable {X X'}

@[reassoc (attr := simp)]
lemma leftUnitor_naturality (œÜ : X ‚ü∂ X') :
    tensorHom (ùüô (tensorUnit)) œÜ ‚â´ (leftUnitor X').hom =
      (leftUnitor X).hom ‚â´ œÜ := by
  apply mapBifunctorLeftUnitor_naturality

end LeftUnitor

section RightUnitor

variable [DecidableEq I] [HasInitial C]
  [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C) ((curriedTensor C).obj X‚ÇÅ)]
  (X X' : GradedObject I C)

instance : HasTensor X tensorUnit :=
  mapBifunctorRightUnitor_hasMap (curriedTensor C) _
    (rightUnitorNatIso C) _ add_zero _

instance : HasMap (((mapBifunctor (curriedTensor C) I I).obj X).obj
    ((single‚ÇÄ I).obj (ùüô_ C))) (fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© => i‚ÇÅ + i‚ÇÇ) :=
  (inferInstance : HasTensor X tensorUnit)

/-- The right unitor isomorphism for graded objects. -/
noncomputable def rightUnitor : tensorObj X tensorUnit ‚âÖ X :=
    mapBifunctorRightUnitor (curriedTensor C) (ùüô_ C)
      (rightUnitorNatIso C) (fun (‚ü®i‚ÇÅ, i‚ÇÇ‚ü© : I √ó I) => i‚ÇÅ + i‚ÇÇ) add_zero X

lemma rightUnitor_inv_apply (i : I) :
    (rightUnitor X).inv i = (œÅ_ (X i)).inv ‚â´ (X i) ‚óÅ tensorUnit‚ÇÄ.inv ‚â´
      ŒπTensorObj X tensorUnit i 0 i (add_zero i) := rfl

variable {X X'}

@[reassoc (attr := simp)]
lemma rightUnitor_naturality (œÜ : X ‚ü∂ X') :
    tensorHom œÜ (ùüô (tensorUnit)) ‚â´ (rightUnitor X').hom =
      (rightUnitor X).hom ‚â´ œÜ := by
  apply mapBifunctorRightUnitor_naturality

end RightUnitor

section Triangle

variable [DecidableEq I] [HasInitial C]
  [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C) ((curriedTensor C).obj X‚ÇÅ)]
  [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C)
    ((curriedTensor C).flip.obj X‚ÇÇ)]
  (X‚ÇÅ X‚ÇÉ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÉ]
  [HasTensor (tensorObj X‚ÇÅ tensorUnit) X‚ÇÉ] [HasTensor X‚ÇÅ (tensorObj tensorUnit X‚ÇÉ)]
  [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ tensorUnit X‚ÇÉ] [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ tensorUnit X‚ÇÉ]

lemma triangle :
    (associator X‚ÇÅ tensorUnit X‚ÇÉ).hom ‚â´ tensorHom (ùüô X‚ÇÅ) (leftUnitor X‚ÇÉ).hom =
      tensorHom (rightUnitor X‚ÇÅ).hom (ùüô X‚ÇÉ) := by
  convert mapBifunctor_triangle (curriedAssociatorNatIso C) (ùüô_ C)
    (rightUnitorNatIso C) (leftUnitorNatIso C) (triangleIndexData I) X‚ÇÅ X‚ÇÉ (by simp)

end Triangle

end Monoidal

end GradedObject

end CategoryTheory
