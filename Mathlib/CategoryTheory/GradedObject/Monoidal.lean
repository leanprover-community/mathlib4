/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Scott Morrison
-/
import Mathlib.CategoryTheory.GradedObject.Bifunctor

/-!
# The monoidal category structures on graded objects

Assuming that `C` is a monoidal category and that `I` is an additive monoid,
we introduce a partially defined tensor product on the category `GradedObject I C`:
given `X‚ÇÅ` and `X‚ÇÇ` two objects in `GradedObject I C`, we define
`GradedObject.Monoidal.tensorObj X‚ÇÅ X‚ÇÇ` under the assumption `HasTensor X‚ÇÅ X‚ÇÇ`
that the coproduct of `X‚ÇÅ i ‚äó X‚ÇÇ j` for `i + j = n` exists for any `n : I`.

-/

universe u

namespace CategoryTheory

open Limits MonoidalCategory Category

variable {I : Type u} [AddMonoid I] {C : Type*} [Category C] [MonoidalCategory C]

namespace GradedObject

/-- The tensor product of two graded objects `X‚ÇÅ` and `X‚ÇÇ` exists if for any `n`,
the coproduct of the objects `X‚ÇÅ i ‚äó X‚ÇÇ j` for `i + j = n` exists. -/
abbrev HasTensor (X‚ÇÅ X‚ÇÇ : GradedObject I C) : Prop :=
  HasMap (((mapBifunctor (curriedTensor C) I I).obj X‚ÇÅ).obj X‚ÇÇ) (fun ‚ü®i, j‚ü© => i + j)

namespace Monoidal

/-- The tensor product of two graded objects. -/
noncomputable abbrev tensorObj (X‚ÇÅ X‚ÇÇ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ] :
    GradedObject I C :=
  mapBifunctorMapObj (curriedTensor C) (fun ‚ü®i, j‚ü© => i + j) X‚ÇÅ X‚ÇÇ

section

variable (X‚ÇÅ X‚ÇÇ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ]

/-- The inclusion of a summand in a tensor product of two graded objects. -/
noncomputable def ŒπTensorObj (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
  X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ tensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ‚ÇÇ :=
    ŒπMapBifunctorMapObj (curriedTensor C) _ _ _ _ _ _ h

variable {X‚ÇÅ X‚ÇÇ}

@[ext]
lemma tensorObj_ext {A : C} {j : I} (f g : tensorObj X‚ÇÅ X‚ÇÇ j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (hi : i‚ÇÅ + i‚ÇÇ = j),
      ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ f = ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ g) : f = g := by
  apply mapObj_ext
  rintro ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© hi
  exact h i‚ÇÅ i‚ÇÇ hi

/-- Constructor for morphisms from a tensor product of two graded objects. -/
noncomputable def tensorObjDesc {A : C} {k : I}
    (f : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (_ : i‚ÇÅ + i‚ÇÇ = k), X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ A) : tensorObj X‚ÇÅ X‚ÇÇ k ‚ü∂ A :=
  mapBifunctorMapObjDesc f

@[reassoc (attr := simp)]
lemma Œπ_tensorObjDesc {A : C} {k : I}
    (f : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (_ : i‚ÇÅ + i‚ÇÇ = k), X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ A) (i‚ÇÅ i‚ÇÇ : I) (hi : i‚ÇÅ + i‚ÇÇ = k) :
    ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ k hi ‚â´ tensorObjDesc f = f i‚ÇÅ i‚ÇÇ hi := by
  apply Œπ_mapBifunctorMapObjDesc

end

/-- The morphism `tensorObj X‚ÇÅ Y‚ÇÅ ‚ü∂ tensorObj X‚ÇÇ Y‚ÇÇ` induced by morphisms of graded
objects `f : X‚ÇÅ ‚ü∂ X‚ÇÇ` and `g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ`. -/
noncomputable def tensorHom {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    [HasTensor X‚ÇÅ Y‚ÇÅ] [HasTensor X‚ÇÇ Y‚ÇÇ] :
    tensorObj X‚ÇÅ Y‚ÇÅ ‚ü∂ tensorObj X‚ÇÇ Y‚ÇÇ :=
  mapBifunctorMapMap _ _ f g

@[reassoc (attr := simp)]
lemma Œπ_tensorHom {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    [HasTensor X‚ÇÅ Y‚ÇÅ] [HasTensor X‚ÇÇ Y‚ÇÇ] (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
    ŒπTensorObj X‚ÇÅ Y‚ÇÅ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h ‚â´ tensorHom f g i‚ÇÅ‚ÇÇ =
      (f i‚ÇÅ ‚äó g i‚ÇÇ) ‚â´ ŒπTensorObj X‚ÇÇ Y‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h := by
  rw [MonoidalCategory.tensorHom_def, assoc]
  apply Œπ_mapBifunctorMapMap

/-- The morphism `tensorObj X Y‚ÇÅ ‚ü∂ tensorObj X Y‚ÇÇ` induced by a morphism of graded objects
`œÜ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ`. -/
noncomputable abbrev whiskerLeft (X : GradedObject I C) {Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (œÜ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    [HasTensor X Y‚ÇÅ] [HasTensor X Y‚ÇÇ] : tensorObj X Y‚ÇÅ ‚ü∂ tensorObj X Y‚ÇÇ :=
  tensorHom (ùüô X) œÜ

/-- The morphism `tensorObj X‚ÇÅ Y ‚ü∂ tensorObj X‚ÇÇ Y` induced by a morphism of graded objects
`œÜ : X‚ÇÅ ‚ü∂ X‚ÇÇ`. -/
noncomputable abbrev whiskerRight {X‚ÇÅ X‚ÇÇ : GradedObject I C} (œÜ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (Y : GradedObject I C)
    [HasTensor X‚ÇÅ Y] [HasTensor X‚ÇÇ Y] : tensorObj X‚ÇÅ Y ‚ü∂ tensorObj X‚ÇÇ Y :=
  tensorHom œÜ (ùüô Y)

@[simp]
lemma tensor_id (X Y : GradedObject I C) [HasTensor X Y] :
    tensorHom (ùüô X) (ùüô Y) = ùüô _ := by
  dsimp [tensorHom, mapBifunctorMapMap]
  simp only [Functor.map_id, NatTrans.id_app, comp_id, mapMap_id]
  rfl

@[reassoc]
lemma tensor_comp {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : GradedObject I C} (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ)
    (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Y‚ÇÉ) [HasTensor X‚ÇÅ Y‚ÇÅ] [HasTensor X‚ÇÇ Y‚ÇÇ] [HasTensor X‚ÇÉ Y‚ÇÉ] :
    tensorHom (f‚ÇÅ ‚â´ f‚ÇÇ) (g‚ÇÅ ‚â´ g‚ÇÇ) = tensorHom f‚ÇÅ g‚ÇÅ ‚â´ tensorHom f‚ÇÇ g‚ÇÇ := by
  dsimp only [tensorHom, mapBifunctorMapMap]
  rw [‚Üê mapMap_comp]
  apply congr_mapMap
  simp

lemma tensorHom_def {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    [HasTensor X‚ÇÅ Y‚ÇÅ] [HasTensor X‚ÇÇ Y‚ÇÇ] [HasTensor X‚ÇÇ Y‚ÇÅ] :
    tensorHom f g = whiskerRight f Y‚ÇÅ ‚â´ whiskerLeft X‚ÇÇ g := by
  rw [‚Üê tensor_comp, id_comp, comp_id]

end Monoidal

end GradedObject

end CategoryTheory
