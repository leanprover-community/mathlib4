/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.GuitartExact.VerticalComposition

/-!
# The opposite of a Guitart exact square

A `2`-square is Guitart exact iff the opposite (transposed) `2`-square
is Guitart exact.

-/

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

namespace CategoryTheory

open Category

variable {C‚ÇÅ : Type u‚ÇÅ} {C‚ÇÇ : Type u‚ÇÇ} {C‚ÇÉ : Type u‚ÇÉ} {C‚ÇÑ : Type u‚ÇÑ}
  [Category.{v‚ÇÅ} C‚ÇÅ] [Category.{v‚ÇÇ} C‚ÇÇ] [Category.{v‚ÇÉ} C‚ÇÉ] [Category.{v‚ÇÑ} C‚ÇÑ]
  {T : C‚ÇÅ ‚•§ C‚ÇÇ} {L : C‚ÇÅ ‚•§ C‚ÇÉ} {R : C‚ÇÇ ‚•§ C‚ÇÑ} {B : C‚ÇÉ ‚•§ C‚ÇÑ}

namespace TwoSquare

variable (w : TwoSquare T L R B)

section

variable {X‚ÇÉ : C‚ÇÉ·µí·µñ} {X‚ÇÇ : C‚ÇÇ·µí·µñ} (g : B.op.obj X‚ÇÉ ‚ü∂ R.op.obj X‚ÇÇ)

namespace structuredArrowRightwardsOpEquivalence

/-- Auxiliary definition for `structuredArrowRightwardsOpEquivalence`. -/
@[simps!]
def functor :
    (w.op.StructuredArrowRightwards g)·µí·µñ ‚•§
      w.CostructuredArrowDownwards g.unop where
  obj f := CostructuredArrowDownwards.mk _ _ f.unop.right.left.unop
      f.unop.right.hom.unop f.unop.hom.left.unop
      (Quiver.Hom.op_inj (by simpa using CostructuredArrow.w f.unop.hom))
  map {f f'} œÜ :=
    CostructuredArrow.homMk
      (StructuredArrow.homMk (œÜ.unop.right.left.unop)
        (Quiver.Hom.op_inj (CostructuredArrow.w œÜ.unop.right))) (by
          ext
          exact Quiver.Hom.op_inj
            ((CostructuredArrow.proj _ _).congr_map (StructuredArrow.w œÜ.unop)))

/-- Auxiliary definition for `structuredArrowRightwardsOpEquivalence`. -/
def inverse :
    w.CostructuredArrowDownwards g.unop ‚•§
      (w.op.StructuredArrowRightwards g)·µí·µñ where
  obj f := Opposite.op
    (StructuredArrowRightwards.mk _ _ (Opposite.op f.left.right)
      f.hom.right.op f.left.hom.op (Quiver.Hom.unop_inj (StructuredArrow.w f.hom)))
  map {f f'} œÜ :=
    (StructuredArrow.homMk
      (CostructuredArrow.homMk (œÜ.left.right.op)
        (Quiver.Hom.unop_inj (by exact StructuredArrow.w œÜ.left)))
          (by
            ext
            exact Quiver.Hom.unop_inj
              ((StructuredArrow.proj _ _).congr_map (CostructuredArrow.w œÜ)))).op

end structuredArrowRightwardsOpEquivalence

/-- If `w : TwoSquare T L R B`, and `g : B.op.obj X‚ÇÉ ‚ü∂ R.op.obj X‚ÇÇ`, this is
the obvious equivalence of categories between
`(w.op.StructuredArrowRightwards g)·µí·µñ` and `w.CostructuredArrowDownwards g.unop`. -/
@[simps]
def structuredArrowRightwardsOpEquivalence :
    (w.op.StructuredArrowRightwards g)·µí·µñ ‚âå
      w.CostructuredArrowDownwards g.unop where
  functor := structuredArrowRightwardsOpEquivalence.functor w g
  inverse := structuredArrowRightwardsOpEquivalence.inverse w g
  unitIso := Iso.refl _
  counitIso := Iso.refl _

end

instance [w.GuitartExact] : w.op.GuitartExact := by
  rw [guitartExact_iff_isConnected_rightwards]
  intro X‚ÇÉ X‚ÇÇ g
  rw [‚Üê isConnected_op_iff_isConnected,
    isConnected_iff_of_equivalence (w.structuredArrowRightwardsOpEquivalence g)]
  infer_instance

lemma guitartExact_op_iff : w.op.GuitartExact ‚Üî w.GuitartExact := by
  constructor
  ¬∑ intro
    let w‚ÇÅ : TwoSquare T (opOp C‚ÇÅ) (opOp C‚ÇÇ) T.op.op := ùüô _
    let w‚ÇÇ : TwoSquare B.op.op (unopUnop C‚ÇÉ) (unopUnop C‚ÇÑ) B := ùüô _
    have : w = (w‚ÇÅ ‚â´·µ• w.op.op) ‚â´·µ• w‚ÇÇ := by aesop_cat
    rw [this]
    infer_instance
  ¬∑ intro
    infer_instance

instance guitartExact_id' (F : C‚ÇÅ ‚•§ C‚ÇÇ) :
    GuitartExact (TwoSquare.mk F (ùü≠ C‚ÇÅ) (ùü≠ C‚ÇÇ) F (ùüô F)) := by
  rw [‚Üê guitartExact_op_iff]
  apply guitartExact_id

end TwoSquare

end CategoryTheory
