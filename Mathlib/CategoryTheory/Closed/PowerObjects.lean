/-
Copyright (c) 2025 Klaus Gy. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Klaus Gy
-/
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.Equalizer
import Mathlib.CategoryTheory.Topos.Classifier
/-!
# Elementary Topos (in Elementary Form)

This ongoing work formalizes the elementary definition of a topos and the direct consequences.

## References

* [S. MacLane and I. Moerdijk, *Sheaves in Geometry and Logic*][MM92]
-/

universe u v

open CategoryTheory
open Category Functor Limits Opposite Prod

variable {‚Ñ∞ : Type u} [Category.{v} ‚Ñ∞]

namespace LeftRepresentable

variable {F : ‚Ñ∞·µí·µñ √ó ‚Ñ∞·µí·µñ ‚•§ Type (max u v)}

variable {B PB : ‚Ñ∞} (hPB : ((curryObj F).obj (op B)).RepresentableBy PB)
  {C PC : ‚Ñ∞} (hPC : ((curryObj F).obj (op C)).RepresentableBy PC)

/-- The morphism induced by a morphism between the base objects. -/
def map (h : B ‚ü∂ C) : PC ‚ü∂ PB :=
  hPB.homEquiv.symm (F.map (h.op √ó‚Çò ùüô (op PC)) (hPC.homEquiv (ùüô PC)))

lemma map_universal (h : B ‚ü∂ C) :
  F.map (ùüô (op B) √ó‚Çò (map hPB hPC h).op) (hPB.homEquiv (ùüô PB))
    = F.map (h.op √ó‚Çò ùüô (op PC)) (hPC.homEquiv (ùüô PC)) := by
  calc
    _ = ((curryObj F).obj (op B)).map (map hPB hPC h).op (hPB.homEquiv (ùüô PB)) := by rfl
    _ = F.map (h.op √ó‚Çò ùüô (op PC)) (hPC.homEquiv (ùüô PC)) := by
      rw [‚Üê hPB.homEquiv_eq, map, hPB.homEquiv.apply_symm_apply]

variable {D PD : ‚Ñ∞} (hPD : ((curryObj F).obj (op D)).RepresentableBy PD)

lemma compose (h : B ‚ü∂ C) (h' : C ‚ü∂ D) :
    map hPB hPD (h ‚â´ h') = map hPC hPD h' ‚â´ map hPB hPC h := by
  let Ph := map hPB hPC h
  let Ph' := map hPC hPD h'
  apply hPB.homEquiv.injective
  calc
    _ = F.map ((h'.op √ó‚Çò ùüô _) ‚â´ (h.op √ó‚Çò ùüô _)) (hPD.homEquiv (ùüô PD)) := by unfold map; simp
    _ = F.map ((ùüô _ √ó‚Çò Ph'.op) ‚â´ (h.op √ó‚Çò ùüô _)) (hPC.homEquiv (ùüô PC)) := by
      rw[FunctorToTypes.map_comp_apply, ‚Üê map_universal, ‚Üê FunctorToTypes.map_comp_apply]
    _ = F.map ((h.op √ó‚Çò ùüô _) ‚â´ (ùüô _ √ó‚Çò Ph'.op)) (hPC.homEquiv (ùüô PC)) := by simp
    _ = F.map ((ùüô _ √ó‚Çò Ph.op) ‚â´ (ùüô _ √ó‚Çò Ph'.op)) (hPB.homEquiv (ùüô PB)) := by
      rw[FunctorToTypes.map_comp_apply, ‚Üê map_universal, ‚Üê FunctorToTypes.map_comp_apply]
    _ = (F.curryObj.obj _).map (Ph' ‚â´ Ph).op (hPB.homEquiv (ùüô PB)) := by simp [curryObj]
    _ = hPB.homEquiv (Ph' ‚â´ Ph) := by rw[‚Üê hPB.homEquiv_eq]

/-- Let `F : ‚Ñ∞·µí·µñ √ó ‚Ñ∞·µí·µñ ‚•§ Type`. If for each `B` we choose an object `P B`
representing the functor `A ‚Ü¶ F (B, A)`, then these choices assemble
into a functor `‚Ñ∞·µí·µñ ‚•§ ‚Ñ∞` that is contravariant in `B`. -/
def functor (P : ‚Ñ∞ ‚Üí ‚Ñ∞) (hP : ‚àÄ B : ‚Ñ∞, ((curryObj F).obj (op B)).RepresentableBy (P B)) :
    ‚Ñ∞·µí·µñ ‚•§ ‚Ñ∞ :=
  { obj (B : ‚Ñ∞·µí·µñ) := P (unop B),
    map {B C : ‚Ñ∞·µí·µñ} (h : B ‚ü∂ C) := map (hP (unop C)) (hP (unop B)) h.unop,
    map_id (_) := by
      change (hP _).homEquiv.symm (F.map (ùüô _) ((hP _).homEquiv (ùüô _))) = ùüô _
      rw[FunctorToTypes.map_id_apply]; simp
    map_comp {B C D : ‚Ñ∞·µí·µñ} (h : B ‚ü∂ C) (h' : C ‚ü∂ D) :=
      compose (hP (unop D)) (hP (unop C)) (hP (unop B)) h'.unop h.unop }

end LeftRepresentable

open CartesianMonoidalCategory MonoidalCategory

variable [CartesianMonoidalCategory ‚Ñ∞]

private abbrev cmdiag (X : ‚Ñ∞) : X ‚ü∂ X ‚äó X := lift (ùüô X) (ùüô X)

private lemma pullback_of_diag {B X : ‚Ñ∞} (b : X ‚ü∂ B) :
    IsPullback b (lift b (ùüô X)) (cmdiag B) (B ‚óÅ b) :=
  let eq : lift b (ùüô X) ‚â´ fst B X = lift b (ùüô X) ‚â´ snd B X ‚â´ b := by simp
  let lim : IsLimit (Fork.ofŒπ (lift b (ùüô X)) eq) :=
    Fork.IsLimit.mk _
      (fun s => s.Œπ ‚â´ (snd B X))
      (fun s => by simp[‚Üê s.condition])
      (fun s m eq => by simp[‚Üê eq])
  let pb : IsPullback _ (_ ‚â´ fst B X) (lift (fst B X) (snd B X ‚â´ b)) (cmdiag B) :=
    isPullback_equalizer_binaryFan_fork _ (fst B X) (snd B X ‚â´ b) _ lim
  IsPullback.flip
    (by simpa using pb)

private lemma eq_of_lift_through_diag {X Y : ‚Ñ∞} {f f' g : X ‚ü∂ Y}
    (h : lift f f' = g ‚â´ cmdiag Y) : f = f' := by
  calc
    _ = (lift f f') ‚â´ (fst Y Y) := by simp
    _ = (lift f f') ‚â´ (snd Y Y) := by simp[h]
    _ = f' := by simp

variable [HasPullbacks ‚Ñ∞]

/-- The subobject functor for products. -/
noncomputable def subobjProd : ‚Ñ∞·µí·µñ √ó ‚Ñ∞·µí·µñ ‚•§ Type (max u v) where
  obj P := Subobject (unop P.1 ‚äó unop P.2)
  map f := (Subobject.pullback (f.1.unop ‚äó‚Çò f.2.unop)).obj
  map_id A := by ext1 x; simp [Subobject.pullback_id]
  map_comp f f' := by ext1 x; simp [Subobject.pullback_comp]

/-- `P` is a power object of `B` if it represents the functor `A ‚Ü¶ Subobject (B ‚äó A)`. -/
def IsPowerObjectOf (B P : ‚Ñ∞) :=
  (subobjProd.curryObj.obj (op B)).RepresentableBy P

namespace PowerObject

variable {B PB : ‚Ñ∞} (hPB : IsPowerObjectOf B PB)

section functoriality

variable {C PC : ‚Ñ∞} (hPC : IsPowerObjectOf C PC)
  {D PD : ‚Ñ∞} (hPD : IsPowerObjectOf D PD)

/-- Functoriality on the left variable of the bifunctor `(B, A) ‚Ü¶ Subobject (B ‚äó A)`:
a map `h : B ‚ü∂ C` induces `PC ‚ü∂ PB` via left-representability. -/
noncomputable def map (h : B ‚ü∂ C) : PC ‚ü∂ PB := LeftRepresentable.map hPB hPC h

lemma compose (h : B ‚ü∂ C) (h' : C ‚ü∂ D) :
    map hPB hPD (h ‚â´ h') = map hPC hPD h' ‚â´ map hPB hPC h :=
  LeftRepresentable.compose hPB hPC hPD h h'

/-- Given a choice of representing objects `P B` for the functors `A ‚Ü¶ Subobject (B ‚äó A)`,
this assembles into a functor `‚Ñ∞·µí·µñ ‚•§ ‚Ñ∞` acting contravariantly in `B`. -/
noncomputable def functor (P : ‚Ñ∞ ‚Üí ‚Ñ∞) (hP : ‚àÄ B : ‚Ñ∞, IsPowerObjectOf B (P B)) : ‚Ñ∞·µí·µñ ‚•§ ‚Ñ∞ :=
  LeftRepresentable.functor P hP

end functoriality

/-- The singleton morphism from `B` to `PB`. -/
def singleton : B ‚ü∂ PB :=
  hPB.homEquiv.invFun (Subobject.mk (cmdiag B))

/-- The classifying subobject on `B ‚äó PB` associated to the chosen representation. -/
def epsilon : Subobject (B ‚äó PB) := hPB.homEquiv (ùüô PB)

private lemma pullback_diag_eq_singleton {X} (f : X ‚ü∂ B) :
      (Subobject.pullback (B ‚óÅ f)).obj (Subobject.mk (cmdiag B)) =
    hPB.homEquiv (f ‚â´ singleton hPB) := by
  calc
    _ = (subobjProd.curryObj.obj (op B)).map f.op (hPB.homEquiv (singleton hPB)) := by
      simp[subobjProd, curryObj, singleton]
    _ = hPB.homEquiv (f ‚â´ singleton hPB) := Eq.symm (hPB.homEquiv_comp f (singleton hPB))

noncomputable instance singleton_is_mono : Mono (singleton hPB) :=
  ‚ü® fun {X} (b b' : X ‚ü∂ B) eq ‚Ü¶
    let B_sub := Subobject.mk (cmdiag B)
    let P := (Subobject.pullback (B ‚óÅ b)).obj B_sub
    let P' := (Subobject.pullback (B ‚óÅ b')).obj B_sub
    let PeqP' : P = P' := by
      unfold P P'
      rw[pullback_diag_eq_singleton hPB b, eq, ‚Üê pullback_diag_eq_singleton hPB b']
    let Œπ : X ‚âÖ Subobject.underlying.obj P :=
      IsPullback.isoIsPullback_congr
        (Subobject.underlyingIso (cmdiag B)).symm (Iso.refl (B ‚äó X))
        (Subobject.underlyingIso_hom_comp_eq_mk (cmdiag B)) (by simp)
        (pullback_of_diag b) (Subobject.isPullback (B ‚óÅ b) B_sub)
    let eq‚ÇÅ : (lift b (ùüô X)) = Œπ.hom ‚â´ P.arrow := by unfold P Œπ; simp
    let eq‚ÇÇ := Eq.symm (Subobject.arrow_congr P P' PeqP')
    let eq‚ÇÉ := Eq.symm (Subobject.isPullback (B ‚óÅ b') B_sub).w
    let eq‚ÇÑ := Eq.symm (Subobject.underlyingIso_hom_comp_eq_mk (cmdiag B))
    have : (lift b b') = _ ‚â´ cmdiag B := by
      calc
        _ = (lift b (ùüô X)) ‚â´ B ‚óÅ b' := by simp
        _ = _ ‚â´ cmdiag B := by rw[eq‚ÇÅ, assoc, eq‚ÇÇ, assoc, eq‚ÇÉ, assoc, eq‚ÇÑ, ‚Üê assoc, ‚Üê assoc]
    eq_of_lift_through_diag this ‚ü©

end PowerObject
