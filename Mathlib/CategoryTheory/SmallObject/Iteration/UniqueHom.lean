/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.SmallObject.Iteration.Basic

/-!
# Uniqueness of morphisms in the category of iterations of functors

Given a functor `Œ¶ : C ‚•§ C` and a natural transformation `Œµ : ùü≠ C ‚ü∂ Œ¶`,
we shall show in this file that there exists a unique morphism (TODO)
between two arbitrary objects in the category `Functor.Iteration Œµ j`
when `j : J` and `J` is a well orderered set.

-/

universe u

namespace CategoryTheory

open Category Limits

variable {C : Type*} [Category C] {Œ¶ : C ‚•§ C} {Œµ : ùü≠ C ‚ü∂ Œ¶}
  {J : Type u} [LinearOrder J] [OrderBot J] [SuccOrder J]

namespace Functor

namespace Iteration

namespace Hom

variable (j : J)

/-- The (unique) morphism between two objects in `Iteration Œµ ‚ä•` -/
def mkOfBot (iter‚ÇÅ iter‚ÇÇ : Iteration Œµ (‚ä• : J)) : iter‚ÇÅ ‚ü∂ iter‚ÇÇ where
  natTrans :=
    { app := fun ‚ü®i, hi‚ü© => eqToHom (by congr; simpa using hi) ‚â´ iter‚ÇÅ.isoZero.hom ‚â´
        iter‚ÇÇ.isoZero.inv ‚â´ eqToHom (by congr; symm; simpa using hi)
      naturality := fun ‚ü®i, hi‚ü© ‚ü®k, hk‚ü© œÜ => by
        obtain rfl : i = ‚ä• := by simpa using hi
        obtain rfl : k = ‚ä• := by simpa using hk
        obtain rfl : œÜ = ùüô _ := rfl
        simp }
  natTrans_app_succ i hi := by simp at hi

section

variable {i : J} {iter‚ÇÅ iter‚ÇÇ : Iteration Œµ (Order.succ i)}
  (hi : ¬¨IsMax i) (œÜ : iter‚ÇÅ.trunc (SuccOrder.le_succ i) ‚ü∂ iter‚ÇÇ.trunc (SuccOrder.le_succ i))

/-- Auxiliary definition for `mkOfSucc`. -/
noncomputable def mkOfSuccNatTransApp (k : J) (hk : k ‚â§ Order.succ i) :
    iter‚ÇÅ.F.obj ‚ü®k, hk‚ü© ‚ü∂ iter‚ÇÇ.F.obj ‚ü®k, hk‚ü© :=
  if hk' : k = Order.succ i then
    eqToHom (by subst hk'; rfl) ‚â´ (iter‚ÇÅ.isoSucc i (Order.lt_succ_of_not_isMax hi)).hom ‚â´
      whiskerRight (œÜ.natTrans.app ‚ü®i, by simp‚ü©) _ ‚â´
      (iter‚ÇÇ.isoSucc i (Order.lt_succ_of_not_isMax hi)).inv ‚â´
      eqToHom (by subst hk'; rfl)
  else
    œÜ.natTrans.app ‚ü®k, Order.le_of_lt_succ (by
      obtain hk | rfl := hk.lt_or_eq
      ¬∑ exact hk
      ¬∑ tauto)‚ü©

lemma mkOfSuccNatTransApp_eq_of_le (k : J) (hk : k ‚â§ i) :
    mkOfSuccNatTransApp hi œÜ k (hk.trans (Order.le_succ i)) =
      œÜ.natTrans.app ‚ü®k, hk‚ü© :=
  dif_neg (by rintro rfl; simpa using lt_of_le_of_lt hk (Order.lt_succ_of_not_isMax hi))

@[simp]
lemma mkOfSuccNatTransApp_succ_eq :
    mkOfSuccNatTransApp hi œÜ (Order.succ i) (by rfl) =
      (iter‚ÇÅ.isoSucc i (Order.lt_succ_of_not_isMax hi)).hom ‚â´
        whiskerRight (œÜ.natTrans.app ‚ü®i, by simp‚ü©) _ ‚â´
        (iter‚ÇÇ.isoSucc i (Order.lt_succ_of_not_isMax hi)).inv := by
  dsimp [mkOfSuccNatTransApp]
  rw [dif_pos rfl, comp_id, id_comp]

/-- Auxiliary definition for `mkOfSucc`. -/
@[simps]
noncomputable def mkOfSuccNatTrans :
    iter‚ÇÅ.F ‚ü∂ iter‚ÇÇ.F where
  app := fun ‚ü®k, hk‚ü© => mkOfSuccNatTransApp hi œÜ k hk
  naturality := fun ‚ü®k‚ÇÅ, hk‚ÇÅ‚ü© ‚ü®k‚ÇÇ, hk‚ÇÇ‚ü© f => by
    dsimp
    have hk : k‚ÇÅ ‚â§ k‚ÇÇ := leOfHom f
    obtain h‚ÇÇ | rfl := hk‚ÇÇ.lt_or_eq
    ¬∑ replace h‚ÇÇ : k‚ÇÇ ‚â§ i := Order.le_of_lt_succ h‚ÇÇ
      rw [mkOfSuccNatTransApp_eq_of_le hi œÜ k‚ÇÇ h‚ÇÇ,
        mkOfSuccNatTransApp_eq_of_le hi œÜ k‚ÇÅ (hk.trans h‚ÇÇ)]
      exact natTrans_naturality œÜ k‚ÇÅ k‚ÇÇ hk h‚ÇÇ
    ¬∑ obtain h‚ÇÅ | rfl := hk.lt_or_eq
      ¬∑ have h‚ÇÇ : k‚ÇÅ ‚â§ i := Order.le_of_lt_succ h‚ÇÅ
        let f‚ÇÅ : (‚ü®k‚ÇÅ, hk‚ü© : { l | l ‚â§ Order.succ i}) ‚ü∂
          ‚ü®i, Order.le_succ i‚ü© := homOfLE h‚ÇÇ
        let f‚ÇÇ : (‚ü®i, Order.le_succ i‚ü© : Set.Iic (Order.succ i)) ‚ü∂
          ‚ü®Order.succ i, by simp‚ü© := homOfLE (Order.le_succ i)
        obtain rfl : f = f‚ÇÅ ‚â´ f‚ÇÇ := rfl
        rw [Functor.map_comp, Functor.map_comp, assoc,
          mkOfSuccNatTransApp_eq_of_le hi œÜ k‚ÇÅ h‚ÇÇ]
        erw [‚Üê natTrans_naturality_assoc œÜ k‚ÇÅ i h‚ÇÇ (by rfl)]
        rw [mkOfSuccNatTransApp_succ_eq]
        dsimp
        have ha : iter‚ÇÅ.F.map f‚ÇÇ = iter‚ÇÅ.mapSucc i (Order.lt_succ_of_not_isMax hi) := rfl
        have hb : iter‚ÇÇ.F.map f‚ÇÇ = iter‚ÇÇ.mapSucc i (Order.lt_succ_of_not_isMax hi) := rfl
        rw [ha, hb]
        rw [iter‚ÇÅ.mapSucc_eq i, iter‚ÇÇ.mapSucc_eq i, assoc,
          Iso.inv_hom_id_assoc]
        ext X
        dsimp
        rw [‚Üê Œµ.naturality_assoc]
        rfl
      ¬∑ obtain rfl : f = ùüô _ := rfl
        rw [Functor.map_id, Functor.map_id, id_comp, comp_id]

end

/-- The (unique) morphism between two objects in `Iteration Œµ (Order.succ i)`,
assuming we have a morphism between the truncations to `Iteration Œµ i`. -/
noncomputable def mkOfSucc
    {i : J} (iter‚ÇÅ iter‚ÇÇ : Iteration Œµ (Order.succ i)) (hi : ¬¨IsMax i)
    (œÜ : iter‚ÇÅ.trunc (SuccOrder.le_succ i) ‚ü∂ iter‚ÇÇ.trunc (SuccOrder.le_succ i)) :
    iter‚ÇÅ ‚ü∂ iter‚ÇÇ where
  natTrans := mkOfSuccNatTrans hi œÜ
  natTrans_app_zero := by
    dsimp
    rw [mkOfSuccNatTransApp_eq_of_le _ _ _ bot_le, œÜ.natTrans_app_zero]
    rfl
  natTrans_app_succ k hk := by
    obtain hk' | rfl := (Order.le_of_lt_succ hk).lt_or_eq
    ¬∑ dsimp
      rw [mkOfSuccNatTransApp_eq_of_le hi œÜ k hk'.le,
        mkOfSuccNatTransApp_eq_of_le hi œÜ (Order.succ k) (Order.succ_le_of_lt hk'),
        œÜ.natTrans_app_succ _ hk']
      rfl
    ¬∑ simp [mkOfSuccNatTransApp_eq_of_le hi œÜ k (by rfl)]

end Hom

end Iteration

end Functor

end CategoryTheory
