/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.CategoryTheory.SmallObject.Iteration.Basic

/-!
# Extension of a functor from `Set.Iic j` to `Set.Iic (Order.succ j)`

Given a linearly ordered type `J` with `SuccOrder J`, `j : J` that is not maximal,
we define the extension of a functor `F : Set.Iic j ‚•§ C` as a
functor `Set.Iic (Order.succ j) ‚•§ C` when an object `X : C` and a morphism
`œÑ : F.obj ‚ü®j, _‚ü© ‚ü∂ X` is given.

-/

universe u

namespace CategoryTheory

open Category

namespace Functor

variable {C : Type*} [Category C]
  {J : Type u} [LinearOrder J] [SuccOrder J] {j : J} (hj : ¬¨IsMax j)
  (F : Set.Iic j ‚•§ C) {X : C} (œÑ : F.obj ‚ü®j, by simp‚ü© ‚ü∂ X)

namespace extendToSucc

variable (X)

/-- `extendToSucc`, on objects: it coincides with `F.obj` for `i ‚â§ j`, and
it sends `Order.succ j` to the given object `X`. -/
def obj (i : Set.Iic (Order.succ j)) : C :=
  if hij : i.1 ‚â§ j then F.obj ‚ü®i.1, hij‚ü© else X

/-- The isomorphism `obj F X ‚ü®i, _‚ü© ‚âÖ F.obj i` when `i : Set.Iic j`. -/
def objIso (i : Set.Iic j) :
    obj F X ‚ü®i, i.2.trans (Order.le_succ j)‚ü© ‚âÖ F.obj i := eqToIso (dif_pos i.2)

/-- The isomorphism `obj F X ‚ü®Order.succ j, _‚ü© ‚âÖ X`. -/
def objSuccIso :
    obj F X ‚ü®Order.succ j, by simp‚ü© ‚âÖ X :=
  eqToIso (dif_neg (by simpa only [Order.succ_le_iff_isMax] using hj))

variable {X}

/-- `extendToSucc`, on morphisms. -/
def map (i‚ÇÅ i‚ÇÇ : J) (hi : i‚ÇÅ ‚â§ i‚ÇÇ) (hi‚ÇÇ : i‚ÇÇ ‚â§ Order.succ j) :
    obj F X ‚ü®i‚ÇÅ, hi.trans hi‚ÇÇ‚ü© ‚ü∂ obj F X ‚ü®i‚ÇÇ, hi‚ÇÇ‚ü© :=
  if h‚ÇÅ : i‚ÇÇ ‚â§ j then
    (objIso F X ‚ü®i‚ÇÅ, hi.trans h‚ÇÅ‚ü©).hom ‚â´ F.map (homOfLE hi) ‚â´ (objIso F X ‚ü®i‚ÇÇ, h‚ÇÅ‚ü©).inv
  else
    if h‚ÇÇ : i‚ÇÅ ‚â§ j then
      (objIso F X ‚ü®i‚ÇÅ, h‚ÇÇ‚ü©).hom ‚â´ F.map (homOfLE h‚ÇÇ) ‚â´ œÑ ‚â´
        (objSuccIso hj F X).inv ‚â´ eqToHom (by
          congr
          exact le_antisymm (Order.succ_le_of_lt (not_le.1 h‚ÇÅ)) hi‚ÇÇ)
    else
      eqToHom (by
        congr
        rw [le_antisymm hi‚ÇÇ (Order.succ_le_of_lt (not_le.1 h‚ÇÅ)),
          le_antisymm (hi.trans hi‚ÇÇ) (Order.succ_le_of_lt (not_le.1 h‚ÇÇ))])

lemma map_eq (i‚ÇÅ i‚ÇÇ : J) (hi : i‚ÇÅ ‚â§ i‚ÇÇ) (hi‚ÇÇ : i‚ÇÇ ‚â§ j) :
    map hj F œÑ i‚ÇÅ i‚ÇÇ hi (hi‚ÇÇ.trans (Order.le_succ j)) =
      (objIso F X ‚ü®i‚ÇÅ, hi.trans hi‚ÇÇ‚ü©).hom ‚â´ F.map (homOfLE hi) ‚â´
        (objIso F X ‚ü®i‚ÇÇ, hi‚ÇÇ‚ü©).inv :=
  dif_pos hi‚ÇÇ

lemma map_self_succ :
    map hj F œÑ j (Order.succ j) (Order.le_succ j) (by rfl) =
      (objIso F X ‚ü®j, by simp‚ü©).hom ‚â´ œÑ ‚â´ (objSuccIso hj F X).inv := by
  dsimp [map]
  rw [dif_neg (by simpa only [Order.succ_le_iff_isMax] using hj),
    dif_pos (by rfl), map_id, comp_id, id_comp]

@[simp]
lemma map_id (i : J) (hi : i ‚â§ Order.succ j) :
    map hj F œÑ i i (by rfl) hi = ùüô _ := by
  dsimp [map]
  by_cases h‚ÇÅ : i ‚â§ j
  ¬∑ rw [dif_pos h‚ÇÅ, CategoryTheory.Functor.map_id, id_comp, Iso.hom_inv_id]
  ¬∑ obtain rfl : i = Order.succ j := le_antisymm hi (Order.succ_le_of_lt (not_le.1 h‚ÇÅ))
    rw [dif_neg (by simpa only [Order.succ_le_iff_isMax] using hj),
      dif_neg h‚ÇÅ]

lemma map_comp (i‚ÇÅ i‚ÇÇ i‚ÇÉ : J) (h‚ÇÅ‚ÇÇ : i‚ÇÅ ‚â§ i‚ÇÇ) (h‚ÇÇ‚ÇÉ : i‚ÇÇ ‚â§ i‚ÇÉ) (h : i‚ÇÉ ‚â§ Order.succ j) :
    map hj F œÑ i‚ÇÅ i‚ÇÉ (h‚ÇÅ‚ÇÇ.trans h‚ÇÇ‚ÇÉ) h =
      map hj F œÑ i‚ÇÅ i‚ÇÇ h‚ÇÅ‚ÇÇ (h‚ÇÇ‚ÇÉ.trans h) ‚â´ map hj F œÑ i‚ÇÇ i‚ÇÉ h‚ÇÇ‚ÇÉ h := by
  by_cases h‚ÇÅ : i‚ÇÉ ‚â§ j
  ¬∑ rw [map_eq hj F œÑ i‚ÇÅ i‚ÇÇ _ (h‚ÇÇ‚ÇÉ.trans h‚ÇÅ), map_eq hj F œÑ i‚ÇÇ i‚ÇÉ _ h‚ÇÅ,
      map_eq hj F œÑ i‚ÇÅ i‚ÇÉ _ h‚ÇÅ, assoc, assoc, Iso.inv_hom_id_assoc, ‚Üê map_comp_assoc,
      homOfLE_comp]
  ¬∑ obtain rfl : i‚ÇÉ = Order.succ j := le_antisymm h (Order.succ_le_of_lt (not_le.1 h‚ÇÅ))
    obtain h‚ÇÇ | rfl := h‚ÇÇ‚ÇÉ.lt_or_eq
    ¬∑ rw [Order.lt_succ_iff_of_not_isMax hj] at h‚ÇÇ
      rw [map_eq hj F œÑ i‚ÇÅ i‚ÇÇ _ h‚ÇÇ]
      dsimp [map]
      rw [dif_neg h‚ÇÅ, dif_pos (h‚ÇÅ‚ÇÇ.trans h‚ÇÇ), dif_neg h‚ÇÅ, dif_pos h‚ÇÇ,
        assoc, assoc, Iso.inv_hom_id_assoc,comp_id, ‚Üê map_comp_assoc, homOfLE_comp]
    ¬∑ rw [map_id, comp_id]

end extendToSucc

open extendToSucc in
include hj in
/-- The extension to `Set.Iic (Order.succ j) ‚•§ C` of a functor `F : Set.Iic j ‚•§ C`,
when we specify a morphism `F.obj ‚ü®j, _‚ü© ‚ü∂ X`. -/
def extendToSucc : Set.Iic (Order.succ j) ‚•§ C where
  obj := obj F X
  map {i‚ÇÅ i‚ÇÇ} f := map hj F œÑ i‚ÇÅ i‚ÇÇ (leOfHom f) i‚ÇÇ.2
  map_id _ := extendToSucc.map_id _ F œÑ _ _
  map_comp {i‚ÇÅ i‚ÇÇ i‚ÇÉ} f g := extendToSucc.map_comp hj F œÑ i‚ÇÅ i‚ÇÇ i‚ÇÉ (leOfHom f) (leOfHom g) i‚ÇÉ.2

/-- The isomorphism `(extendToSucc hj F œÑ).obj ‚ü®i, _‚ü© ‚âÖ F.obj i` when `i : Set.Iic j` -/
def extendToSuccObjIso (i : Set.Iic j) :
    (extendToSucc hj F œÑ).obj ‚ü®i, i.2.trans (Order.le_succ j)‚ü© ‚âÖ F.obj i :=
  extendToSucc.objIso F X i

/-- The isomorphism `(extendToSucc hj F œÑ).obj ‚ü®Order.succ j, _‚ü© ‚âÖ X`. -/
def extendToSuccObjSuccIso :
    (extendToSucc hj F œÑ).obj ‚ü®Order.succ j, by simp‚ü© ‚âÖ X :=
  extendToSucc.objSuccIso hj F X

@[reassoc]
lemma extendToSuccObjIso_hom_naturality (i‚ÇÅ i‚ÇÇ : J) (hi : i‚ÇÅ ‚â§ i‚ÇÇ) (hi‚ÇÇ : i‚ÇÇ ‚â§ j) :
    (extendToSucc hj F œÑ).map (homOfLE hi :
      ‚ü®i‚ÇÅ, hi.trans (hi‚ÇÇ.trans (Order.le_succ j))‚ü© ‚ü∂ ‚ü®i‚ÇÇ, hi‚ÇÇ.trans (Order.le_succ j)‚ü©) ‚â´
    (extendToSuccObjIso hj F œÑ ‚ü®i‚ÇÇ, hi‚ÇÇ‚ü©).hom =
      (extendToSuccObjIso hj F œÑ ‚ü®i‚ÇÅ, hi.trans hi‚ÇÇ‚ü©).hom ‚â´ F.map (homOfLE hi) := by
  dsimp [extendToSucc, extendToSuccObjIso]
  rw [extendToSucc.map_eq _ _ _ _ _ _ hi‚ÇÇ, assoc, assoc, Iso.inv_hom_id, comp_id]

/-- The isomorphism expressing that `extendToSucc hj F œÑ` extends `F`. -/
@[simps!]
def extendToSuccRestrictionLEIso :
    Iteration.restrictionLE (extendToSucc hj F œÑ) (Order.le_succ j) ‚âÖ F :=
  NatIso.ofComponents (extendToSuccObjIso hj F œÑ) (by
    rintro ‚ü®i‚ÇÅ, h‚ÇÅ‚ü© ‚ü®i‚ÇÇ, h‚ÇÇ‚ü© f
    apply extendToSuccObjIso_hom_naturality)

lemma extentToSucc_map (i‚ÇÅ i‚ÇÇ : J) (hi : i‚ÇÅ ‚â§ i‚ÇÇ) (hi‚ÇÇ : i‚ÇÇ ‚â§ j) :
    (extendToSucc hj F œÑ).map (homOfLE hi :
      ‚ü®i‚ÇÅ, hi.trans (hi‚ÇÇ.trans (Order.le_succ j))‚ü© ‚ü∂ ‚ü®i‚ÇÇ, hi‚ÇÇ.trans (Order.le_succ j)‚ü©) =
      (extendToSuccObjIso hj F œÑ ‚ü®i‚ÇÅ, hi.trans hi‚ÇÇ‚ü©).hom ‚â´ F.map (homOfLE hi) ‚â´
      (extendToSuccObjIso hj F œÑ ‚ü®i‚ÇÇ, hi‚ÇÇ‚ü©).inv := by
  rw [‚Üê extendToSuccObjIso_hom_naturality_assoc, Iso.hom_inv_id, comp_id]

lemma extendToSucc_map_le_succ :
    (extendToSucc hj F œÑ).map (homOfLE (Order.le_succ j)) =
        (extendToSuccObjIso hj F œÑ ‚ü®j, by simp‚ü©).hom ‚â´ œÑ ‚â´
          (extendToSuccObjSuccIso hj F œÑ).inv :=
  extendToSucc.map_self_succ _ _ _

end Functor

end CategoryTheory
