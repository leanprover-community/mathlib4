/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.SmallObject.Construction
import Mathlib.CategoryTheory.SmallObject.TransfiniteIteration
import Mathlib.CategoryTheory.SmallObject.TransfiniteCompositionLifting
import Mathlib.CategoryTheory.MorphismProperty.IsSmall
import Mathlib.AlgebraicTopology.RelativeCellComplex.Basic
import Mathlib.SetTheory.Cardinal.Regular

/-!
# Cardinals that are suitable for the small object argument

In this file, given a class of morphisms `I : MorphismProperty C` and
a regular cardinal `Œ∫ : Cardinal.{w}`, we define a typeclass
`IsCardinalForSmallObjectArgument I Œ∫` which requires certain
smallness properties (`I` is `w`-small, `C` is locally `w`-small),
the existence of certain colimits (pushouts, coproducts of size `w`,
and the condition `HasIterationOfShape Œ∫.ord.toType C` about the
existence of colimits indexed by limit ordinal smaller than or equal
to `Œ∫.ord`), and the technical assumption that if `A` is the
a morphism in `I`, then the functor `Hom(A, _)` should commute
with the filtering colimits corresponding to relative
`I`-cell complexes. (This last condition shall hold when `Œ∫`
is the successor of an infinite cardinal `c` such that all these objects `A` are `c`-presentable,
see `Mathlib/CategoryTheory/Presentable/Basic.lean`.)

Given `I : MorphismProperty C`, we shall say that `I` permits
the small object argument if there exists `Œ∫` such that
`IsCardinalForSmallObjectArgument I Œ∫` holds. See the file
`Mathlib/CategoryTheory/SmallObject/Basic.lean` for the definition of this typeclass
`HasSmallObjectArgument` and an outline of the proof.

## Main results

Assuming `IsCardinalForSmallObjectArgument I Œ∫`, any morphism `f : X ‚ü∂ Y`
is factored as `ŒπObj I Œ∫ f ‚â´ œÄObj I Œ∫ f = f`. It is shown that `ŒπObj I Œ∫ f`
is a relative `I`-cell complex (see `SmallObject.relativeCellComplexŒπObj`)
and that `œÄObj I Œ∫ f` has the right lifting property with respect to `I`
(see `SmallObject.rlp_œÄObj`). This construction is obtained by
iterating to the power `Œ∫.ord.toType` the functor `Arrow C ‚•§ Arrow C` defined
in the file `Mathlib/CategoryTheory/SmallObject/Construction.lean`.
This factorization is functorial in `f`
and gives the property `HasFunctorialFactorization I.rlp.llp I.rlp`.
Finally, the lemma `llp_rlp_of_isCardinalForSmallObjectArgument`
(and its primed version) shows that the morphisms in `I.rlp.llp` are exactly
the retracts of the transfinite compositions (of shape `Œ∫.ord.toType`) of
pushouts of coproducts of morphisms in `I`.

## References
- https://ncatlab.org/nlab/show/small+object+argument

-/

universe w v v' u u'

namespace CategoryTheory

open Category HomotopicalAlgebra Limits SmallObject

variable {C : Type u} [Category.{v} C] (I : MorphismProperty C)

namespace MorphismProperty

/-- Given `I : MorphismProperty C` and a regular cardinal `Œ∫ : Cardinal.{w}`,
this property asserts the technical conditions which allow to proceed
to the small object argument by doing a construction by transfinite
induction indexed by the well ordered type `Œ∫.ord.toType`. -/
class IsCardinalForSmallObjectArgument (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular]
    [OrderBot Œ∫.ord.toType] : Prop where
  isSmall : IsSmall.{w} I := by infer_instance
  locallySmall : LocallySmall.{w} C := by infer_instance
  hasPushouts : HasPushouts C := by infer_instance
  hasCoproducts : HasCoproducts.{w} C := by infer_instance
  hasIterationOfShape : HasIterationOfShape Œ∫.ord.toType C := by infer_instance
  preservesColimit {A B X Y : C} (i : A ‚ü∂ B) (_ : I i) (f : X ‚ü∂ Y)
    (hf : RelativeCellComplex.{w} (fun (_ : Œ∫.ord.toType) ‚Ü¶ I.homFamily) f) :
    PreservesColimit hf.F (coyoneda.obj (Opposite.op A))

end MorphismProperty

namespace SmallObject

open MorphismProperty

variable (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular] [OrderBot Œ∫.ord.toType]
  [I.IsCardinalForSmallObjectArgument Œ∫]

include I Œ∫

lemma isSmall : IsSmall.{w} I :=
  IsCardinalForSmallObjectArgument.isSmall Œ∫

lemma locallySmall : LocallySmall.{w} C :=
  IsCardinalForSmallObjectArgument.locallySmall I Œ∫

lemma hasIterationOfShape : HasIterationOfShape Œ∫.ord.toType C :=
  IsCardinalForSmallObjectArgument.hasIterationOfShape I

lemma hasPushouts : HasPushouts C :=
  IsCardinalForSmallObjectArgument.hasPushouts I Œ∫

lemma hasCoproducts : HasCoproducts.{w} C :=
  IsCardinalForSmallObjectArgument.hasCoproducts I Œ∫

lemma preservesColimit {A B X Y : C} (i : A ‚ü∂ B) (hi : I i) (f : X ‚ü∂ Y)
    (hf : RelativeCellComplex.{w} (fun (_ : Œ∫.ord.toType) ‚Ü¶ I.homFamily) f) :
    PreservesColimit hf.F (coyoneda.obj (Opposite.op A)) :=
  IsCardinalForSmallObjectArgument.preservesColimit i hi f hf

lemma hasColimitsOfShape_discrete (X Y : C) (p : X ‚ü∂ Y) :
    HasColimitsOfShape
      (Discrete (FunctorObjIndex I.homFamily p)) C := by
  haveI := locallySmall I Œ∫
  haveI := isSmall I Œ∫
  haveI := hasCoproducts I Œ∫
  exact hasColimitsOfShape_of_equivalence
    (Discrete.equivalence (equivShrink.{w} _)).symm

/-- The successor structure on `Arrow C ‚•§ Arrow C` corresponding
to the iterations of the natural transformation
`Œµ : ùü≠ (Arrow C) ‚ü∂ SmallObject.functor I.homFamily`
(see the file `SmallObject.Construction`). -/
noncomputable def succStruct : SuccStruct (Arrow C ‚•§ Arrow C) :=
  haveI := hasColimitsOfShape_discrete I Œ∫
  haveI := hasPushouts I Œ∫
  SuccStruct.ofNatTrans (Œµ I.homFamily)

/-- For the successor structure `succStruct I Œ∫` on `Arrow C ‚•§ Arrow C`,
the morphism from an object to its successor induces
morphisms in `C` which consists in attaching `I`-cells. -/
noncomputable def attachCellsOfSuccStructProp
    {F G : Arrow C ‚•§ Arrow C} {œÜ : F ‚ü∂ G}
    (h : (succStruct I Œ∫).prop œÜ) (f : Arrow C) :
    AttachCells.{w} I.homFamily (œÜ.app f).left :=
  haveI := locallySmall I Œ∫
  haveI := isSmall I Œ∫
  haveI := hasColimitsOfShape_discrete I Œ∫
  haveI := hasPushouts I Œ∫
  AttachCells.ofArrowIso (attachCellsŒπFunctorObjOfSmall _ _)
    ((Functor.mapArrow ((evaluation _ _).obj f ‚ãô
      Arrow.leftFunc)).mapIso h.arrowIso.symm)

/-- The class of morphisms in `Arrow C` which on the left side are
pushouts of coproducts of morphisms in `I`, and which are
isomorphisms on the right side. -/
def propArrow : MorphismProperty (Arrow C) := fun _ _ f ‚Ü¶
  (coproducts.{w} I).pushouts f.left ‚àß (isomorphisms C) f.right

lemma succStruct_prop_le_propArrow :
    (succStruct I Œ∫).prop ‚â§ (propArrow.{w} I).functorCategory (Arrow C) := by
  haveI := locallySmall I Œ∫
  haveI := isSmall I Œ∫
  haveI := hasColimitsOfShape_discrete I Œ∫
  haveI := hasPushouts I Œ∫
  intro _ _ _ ‚ü®F‚ü© f
  constructor
  ¬∑ nth_rw 1 [‚Üê I.ofHoms_homFamily]
    apply pushouts_mk _ (functorObj_isPushout I.homFamily (F.obj f).hom)
    exact coproducts_of_small _ _ (colimitsOfShape_colimMap _ (by rintro ‚ü®j‚ü©; constructor))
  ¬∑ rw [MorphismProperty.isomorphisms.iff]
    dsimp [succStruct]
    infer_instance

/-- The functor `Œ∫.ord.toType ‚•§ Arrow C ‚•§ Arrow C` corresponding to the
iterations of the successor structure `succStruct I Œ∫`. -/
noncomputable def iterationFunctor : Œ∫.ord.toType ‚•§ Arrow C ‚•§ Arrow C :=
  haveI := hasIterationOfShape I Œ∫
  (succStruct I Œ∫).iterationFunctor Œ∫.ord.toType

/-- The colimit of `iterationFunctor I Œ∫`. -/
noncomputable def iteration : Arrow C ‚•§ Arrow C :=
  haveI := hasIterationOfShape I Œ∫
  (succStruct I Œ∫).iteration Œ∫.ord.toType

/-- The natural "inclusion" `ùü≠ (Arrow C) ‚ü∂ iteration I Œ∫`. -/
noncomputable def ŒπIteration : ùü≠ _ ‚ü∂ iteration I Œ∫ :=
  haveI := hasIterationOfShape I Œ∫
  (succStruct I Œ∫).ŒπIteration Œ∫.ord.toType

/-- The morphism `ŒπIteration I Œ∫` is a transfinite composition of shape
`Œ∫.ord.toType` of morphisms satisfying `(succStruct I Œ∫).prop`. -/
noncomputable def transfiniteCompositionOfShapeSuccStructPropŒπIteration :
    (succStruct I Œ∫).prop.TransfiniteCompositionOfShape Œ∫.ord.toType (ŒπIteration I Œ∫) :=
  haveI := hasIterationOfShape I Œ∫
  (succStruct I Œ∫).transfiniteCompositionOfShapeŒπIteration Œ∫.ord.toType

@[simp]
lemma transfiniteCompositionOfShapeSuccStructPropŒπIteration_F :
    (transfiniteCompositionOfShapeSuccStructPropŒπIteration I Œ∫).F =
      iterationFunctor I Œ∫ :=
  rfl

/-- For any `f : Arrow C`, the map `((ŒπIteration I Œ∫).app f).right` is
a transfinite composition of isomorphisms. -/
noncomputable def transfiniteCompositionOfShapeŒπIterationAppRight (f : Arrow C) :
    (isomorphisms C).TransfiniteCompositionOfShape Œ∫.ord.toType
      ((ŒπIteration I Œ∫).app f).right :=
  haveI := hasIterationOfShape I Œ∫
  let h := transfiniteCompositionOfShapeSuccStructPropŒπIteration I Œ∫
  { toTransfiniteCompositionOfShape :=
      h.toTransfiniteCompositionOfShape.map ((evaluation _ _).obj f ‚ãô Arrow.rightFunc)
    map_mem j hj := ((succStruct_prop_le_propArrow I Œ∫ _ (h.map_mem j hj)) f).2 }

instance (f : Arrow C) : IsIso ((ŒπIteration I Œ∫).app f).right :=
  (transfiniteCompositionOfShapeŒπIterationAppRight I Œ∫ f).isIso

instance {j‚ÇÅ j‚ÇÇ : Œ∫.ord.toType} (œÜ : j‚ÇÅ ‚ü∂ j‚ÇÇ) (f : Arrow C) :
    IsIso (((iterationFunctor I Œ∫).map œÜ).app f).right :=
  inferInstanceAs (IsIso ((transfiniteCompositionOfShapeŒπIterationAppRight I Œ∫ f).F.map œÜ))

/-- For any `f : Arrow C`, the object `((iteration I Œ∫).obj f).right`
identifies to `f.right`. -/
@[simps! hom]
noncomputable def iterationObjRightIso (f : Arrow C) :
    f.right ‚âÖ ((iteration I Œ∫).obj f).right :=
  asIso ((ŒπIteration I Œ∫).app f).right

/-- For any `f : Arrow C` and `j : Œ∫.ord.toType`, the object
`(((iterationFunctor I Œ∫).obj j).obj f).right` identifies to `f.right`. -/
noncomputable def iterationFunctorObjObjRightIso (f : Arrow C) (j : Œ∫.ord.toType) :
    (((iterationFunctor I Œ∫).obj j).obj f).right ‚âÖ f.right :=
  asIso ((transfiniteCompositionOfShapeŒπIterationAppRight I Œ∫ f).incl.app j) ‚â™‚â´
    (iterationObjRightIso I Œ∫ f).symm

@[reassoc (attr := simp)]
lemma iterationFunctorObjObjRightIso_ŒπIteration_app_right (f : Arrow C) (j : Œ∫.ord.toType) :
    (iterationFunctorObjObjRightIso I Œ∫ f j).hom ‚â´ ((ŒπIteration I Œ∫).app f).right =
      (transfiniteCompositionOfShapeŒπIterationAppRight I Œ∫ f).incl.app j := by
  simp [iterationFunctorObjObjRightIso, iterationObjRightIso]

lemma prop_iterationFunctor_map_succ (j : Œ∫.ord.toType) :
    (succStruct I Œ∫).prop ((iterationFunctor I Œ∫).map (homOfLE (Order.le_succ j))) := by
  have := hasIterationOfShape I Œ∫
  have := Cardinal.noMaxOrder (Fact.elim inferInstance : Œ∫.IsRegular).aleph0_le
  exact (succStruct I Œ∫).prop_iterationFunctor_map_succ j (not_isMax j)

/-- For any `f : Arrow C` and `j : Œ∫.ord.toType`, the morphism
`((iterationFunctor I Œ∫).map (homOfLE (Order.le_succ j))).app f` identifies
to a morphism given by `SmallObject.Œµ I.homFamily`. -/
noncomputable def iterationFunctorMapSuccAppArrowIso (f : Arrow C) (j : Œ∫.ord.toType) :
    letI := hasColimitsOfShape_discrete I Œ∫
    letI := hasPushouts I Œ∫
    Arrow.mk (((iterationFunctor I Œ∫).map (homOfLE (Order.le_succ j))).app f) ‚âÖ
      (Œµ I.homFamily).app (((iterationFunctor I Œ∫).obj j).obj f) :=
  have := hasIterationOfShape I Œ∫
  have := Cardinal.noMaxOrder (Fact.elim inferInstance : Œ∫.IsRegular).aleph0_le
  Arrow.isoMk (Iso.refl _)
    (((evaluation _ _).obj f).mapIso
      ((succStruct I Œ∫).iterationFunctorObjSuccIso j (not_isMax j))) (by
    have this := NatTrans.congr_app ((succStruct I Œ∫).iterationFunctor_map_succ j (not_isMax j)) f
    dsimp at this
    dsimp [iterationFunctor]
    rw [id_comp, this, assoc, Iso.inv_hom_id_app, comp_id]
    dsimp [succStruct])

@[simp]
lemma iterationFunctorMapSuccAppArrowIso_hom_left (f : Arrow C) (j : Œ∫.ord.toType) :
    (iterationFunctorMapSuccAppArrowIso I Œ∫ f j).hom.left = ùüô _ := rfl

@[reassoc (attr := simp)]
lemma iterationFunctorMapSuccAppArrowIso_hom_right_right_comp
    (f : Arrow C) (j : Œ∫.ord.toType) :
    (iterationFunctorMapSuccAppArrowIso I Œ∫ f j).hom.right.right ‚â´
      (((iterationFunctor I Œ∫).map (homOfLE (Order.le_succ j))).app f).right = ùüô _ := by
  have := Arrow.rightFunc.congr_map ((iterationFunctorMapSuccAppArrowIso I Œ∫ f j).hom.w)
  dsimp at this ‚ä¢
  rw [‚Üê cancel_epi (((iterationFunctor I Œ∫).map (homOfLE (Order.le_succ j))).app f).right,
    ‚Üê reassoc_of% this, comp_id]

section

variable {X Y : C} (f : X ‚ü∂ Y)

/-- The intermediate object in the factorization given by the
small object argument. -/
noncomputable def obj : C := ((iteration I Œ∫).obj (Arrow.mk f)).left

/-- The "inclusion" morphism in the factorization given by
the the small object argument. -/
noncomputable def ŒπObj : X ‚ü∂ obj I Œ∫ f := ((ŒπIteration I Œ∫).app (Arrow.mk f)).left

/-- The "projection" morphism in the factorization given by
the the small object argument. -/
noncomputable def œÄObj : obj I Œ∫ f ‚ü∂ Y :=
  ((iteration I Œ∫).obj (Arrow.mk f)).hom ‚â´ inv ((ŒπIteration I Œ∫).app f).right

@[reassoc (attr := simp)]
lemma œÄObj_ŒπIteration_app_right :
    œÄObj I Œ∫ f ‚â´ ((ŒπIteration I Œ∫).app f).right =
      ((iteration I Œ∫).obj (Arrow.mk f)).hom := by simp [œÄObj]

@[reassoc (attr := simp)]
lemma ŒπObj_œÄObj : ŒπObj I Œ∫ f ‚â´ œÄObj I Œ∫ f = f := by
  simp [ŒπObj, œÄObj]

/-- The morphism `ŒπObj I Œ∫ f` is a relative `I`-cell complex. -/
noncomputable def relativeCellComplexŒπObj :
    RelativeCellComplex.{w} (fun (_ : Œ∫.ord.toType) ‚Ü¶ I.homFamily)
      (ŒπObj I Œ∫ f) := by
  have := hasIterationOfShape I Œ∫
  let h := transfiniteCompositionOfShapeSuccStructPropŒπIteration I Œ∫
  exact
  { toTransfiniteCompositionOfShape :=
      h.toTransfiniteCompositionOfShape.map ((evaluation _ _).obj f ‚ãô Arrow.leftFunc)
    attachCells j hj :=
      attachCellsOfSuccStructProp I Œ∫ (h.map_mem j hj) f }

lemma transfiniteCompositionsOfShape_ŒπObj :
    (coproducts.{w} I).pushouts.transfiniteCompositionsOfShape Œ∫.ord.toType
      (ŒπObj I Œ∫ f) :=
  ‚ü®((relativeCellComplexŒπObj I Œ∫ f).transfiniteCompositionOfShape).ofLE
    (by simp)‚ü©

lemma llp_rlp_ŒπObj : I.rlp.llp (ŒπObj I Œ∫ f) := by
  apply I.transfiniteCompositionsOfShape_pushouts_coproducts_le_llp_rlp Œ∫.ord.toType
  apply transfiniteCompositionsOfShape_ŒπObj

/-- When `ŒπObj I Œ∫ f` is considered as a relative `I`-cell complex,
the object at the `j`th step is obtained by applying the construction
`SmallObject.functorObj`. -/
noncomputable def relativeCellComplexŒπObjFObjSuccIso (j : Œ∫.ord.toType) :
    letI := hasColimitsOfShape_discrete I Œ∫
    letI := hasPushouts I Œ∫
    (relativeCellComplexŒπObj I Œ∫ f).F.obj (Order.succ j) ‚âÖ
      functorObj I.homFamily (((iterationFunctor I Œ∫).obj j).obj (Arrow.mk f)).hom :=
  (Arrow.rightFunc ‚ãô Arrow.leftFunc).mapIso
    (iterationFunctorMapSuccAppArrowIso I Œ∫ f j)

lemma ŒπFunctorObj_eq (j : Œ∫.ord.toType) :
    letI := hasColimitsOfShape_discrete I Œ∫
    letI := hasPushouts I Œ∫
    ŒπFunctorObj I.homFamily (((iterationFunctor I Œ∫).obj j).obj (Arrow.mk f)).hom =
      (relativeCellComplexŒπObj I Œ∫ f).F.map (homOfLE (Order.le_succ j)) ‚â´
        (relativeCellComplexŒπObjFObjSuccIso I Œ∫ f j).hom := by
  simpa using Arrow.leftFunc.congr_map (iterationFunctorMapSuccAppArrowIso I Œ∫ f j).hom.w

lemma œÄFunctorObj_eq (j : Œ∫.ord.toType) :
    letI := hasColimitsOfShape_discrete I Œ∫
    letI := hasPushouts I Œ∫
    œÄFunctorObj I.homFamily (((iterationFunctor I Œ∫).obj j).obj (Arrow.mk f)).hom =
      (relativeCellComplexŒπObjFObjSuccIso I Œ∫ f j).inv ‚â´
      (relativeCellComplexŒπObj I Œ∫ f).incl.app (Order.succ j) ‚â´
      œÄObj I Œ∫ f ‚â´ (iterationFunctorObjObjRightIso I Œ∫ (Arrow.mk f) j).inv := by
  have h‚ÇÅ := (iterationFunctorMapSuccAppArrowIso I Œ∫ f j).hom.right.w
  have h‚ÇÇ := (transfiniteCompositionOfShapeSuccStructPropŒπIteration I Œ∫).incl.naturality
    (homOfLE (Order.le_succ j))
  dsimp at h‚ÇÅ h‚ÇÇ
  rw [comp_id] at h‚ÇÇ
  rw [‚Üê cancel_mono (iterationFunctorObjObjRightIso I Œ∫ (Arrow.mk f) j).hom,
    ‚Üê cancel_mono ((ŒπIteration I Œ∫).app f).right, assoc, assoc, assoc, assoc, assoc,
    Iso.inv_hom_id_assoc, œÄObj_ŒπIteration_app_right,
    iterationFunctorObjObjRightIso_ŒπIteration_app_right,
    ‚Üê cancel_epi (relativeCellComplexŒπObjFObjSuccIso I Œ∫ f j).hom, Iso.hom_inv_id_assoc]
  dsimp [relativeCellComplexŒπObjFObjSuccIso,
    relativeCellComplexŒπObj, transfiniteCompositionOfShapeŒπIterationAppRight]
  simp only [reassoc_of% h‚ÇÅ, comp_id, comp_id, Arrow.w_mk_right, ‚Üê h‚ÇÇ,
    NatTrans.comp_app, Arrow.comp_right,
    iterationFunctorMapSuccAppArrowIso_hom_right_right_comp_assoc]

lemma hasRightLiftingProperty_œÄObj {A B : C} (i : A ‚ü∂ B) (hi : I i) (f : X ‚ü∂ Y) :
    HasLiftingProperty i (œÄObj I Œ∫ f) := ‚ü®by
  haveI := hasColimitsOfShape_discrete I Œ∫
  haveI := hasPushouts I Œ∫
  haveI := preservesColimit I Œ∫ i hi _ (relativeCellComplexŒπObj I Œ∫ f)
  intro g b sq
  obtain ‚ü®j, t, ht‚ü© := Types.jointly_surjective _
    (isColimitOfPreserves (coyoneda.obj (Opposite.op A))
      (relativeCellComplexŒπObj I Œ∫ f).isColimit) g
  dsimp at g b sq t ht
  obtain ‚ü®l, hl‚ÇÅ, hl‚ÇÇ‚ü© := ŒπFunctorObj_extension' I.homFamily
    ((relativeCellComplexŒπObj I Œ∫ f).incl.app j ‚â´ œÄObj I Œ∫ f)
    ((relativeCellComplexŒπObj I Œ∫ f).F.map (homOfLE (Order.le_succ j)))
    ((relativeCellComplexŒπObj I Œ∫ f).incl.app (Order.succ j) ‚â´ œÄObj I Œ∫ f) (by simp) (Iso.refl _)
    (iterationFunctorObjObjRightIso I Œ∫ (Arrow.mk f) j).symm
    (relativeCellComplexŒπObjFObjSuccIso I Œ∫ f j)
    (by dsimp; rw [ŒπFunctorObj_eq, id_comp])
    (by dsimp; rw [œÄFunctorObj_eq, assoc, Iso.hom_inv_id_assoc])
    (i := ‚ü®i, hi‚ü©) t b (by rw [reassoc_of% ht, sq.w]; dsimp)
  dsimp at hl‚ÇÅ
  exact ‚ü®‚ü®{
    l := l ‚â´ (relativeCellComplexŒπObj I Œ∫ f).incl.app (Order.succ j)
    fac_left := by simp [reassoc_of% hl‚ÇÅ, ‚Üê ht]
    fac_right := by rw [assoc, hl‚ÇÇ]
  }‚ü©‚ü©‚ü©

lemma rlp_œÄObj : I.rlp (œÄObj I Œ∫ f) :=
  fun _ _ _ hi ‚Ü¶ hasRightLiftingProperty_œÄObj _ _ _ hi _

end

/-- The functoriality of the intermediate object in the
factorization of the small object argument. -/
noncomputable def objMap {f g : Arrow C} (œÜ : f ‚ü∂ g) : obj I Œ∫ f.hom ‚ü∂ obj I Œ∫ g.hom :=
  ((iteration I Œ∫).map œÜ).left

@[simp]
lemma objMap_id (f : Arrow C) : objMap I Œ∫ (ùüô f) = ùüô _ := by
  simp only [objMap, Functor.map_id]
  rfl

@[reassoc, simp]
lemma objMap_comp {f g h : Arrow C} (œÜ : f ‚ü∂ g) (œà : g ‚ü∂ h) :
    objMap I Œ∫ (œÜ ‚â´ œà) = objMap I Œ∫ œÜ ‚â´ objMap I Œ∫ œà := by
  simp only [objMap, Functor.map_comp]
  rfl

@[reassoc (attr := simp)]
lemma ŒπObj_naturality {f g : Arrow C} (œÜ : f ‚ü∂ g) :
    ŒπObj I Œ∫ f.hom ‚â´ objMap I Œ∫ œÜ = œÜ.left ‚â´ ŒπObj I Œ∫ g.hom :=
  Arrow.leftFunc.congr_map ((ŒπIteration I Œ∫).naturality œÜ).symm

@[reassoc (attr := simp)]
lemma œÄObj_naturality {f g : Arrow C} (œÜ : f ‚ü∂ g) :
    objMap I Œ∫ œÜ ‚â´ œÄObj I Œ∫ g.hom = œÄObj I Œ∫ f.hom ‚â´ œÜ.right := by
  let e‚ÇÅ := asIso ((ŒπIteration I Œ∫).app (Arrow.mk f.hom)).right
  let e‚ÇÇ := asIso ((ŒπIteration I Œ∫).app (Arrow.mk g.hom)).right
  change _ ‚â´ _ ‚â´ e‚ÇÇ.inv = (_ ‚â´ e‚ÇÅ.inv) ‚â´ _
  have h‚ÇÅ := ((iteration I Œ∫).map œÜ).w =‚â´ e‚ÇÇ.inv
  have h‚ÇÇ : œÜ.right ‚â´ e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ ((iteration I Œ∫).map œÜ).right :=
    ((whiskerRight (ŒπIteration I Œ∫) Arrow.rightFunc).naturality œÜ)
  dsimp at h‚ÇÅ
  rw [assoc] at h‚ÇÅ
  apply h‚ÇÅ.trans
  simp only [‚Üê cancel_mono e‚ÇÇ.hom, assoc, e‚ÇÇ.inv_hom_id, h‚ÇÇ, e‚ÇÅ.inv_hom_id_assoc]
  rw [‚Üê assoc]
  apply comp_id

/-- The functorial factorization `ŒπObj I Œ∫ f ‚â´ œÄObj I Œ∫ f.hom = f`
with `ŒπObj I Œ∫ f` in `I.rlp.llp` and `œÄObj I Œ∫ f.hom` in `I.rlp`. -/
@[simps]
noncomputable def functorialFactorizationData :
    FunctorialFactorizationData I.rlp.llp I.rlp where
  Z :=
    { obj f := obj I Œ∫ f.hom
      map œÜ := objMap I Œ∫ œÜ }
  i := { app f := ŒπObj I Œ∫ f.hom }
  p := { app f := œÄObj I Œ∫ f.hom }
  hi f := llp_rlp_ŒπObj I Œ∫ f.hom
  hp f := rlp_œÄObj I Œ∫ f.hom

lemma hasFunctorialFactorization :
    HasFunctorialFactorization I.rlp.llp I.rlp where
  nonempty_functorialFactorizationData :=
    ‚ü®functorialFactorizationData I Œ∫‚ü©

/-- If `Œ∫` is a suitable cardinal for the small object argument for `I : MorphismProperty C`,
then the class `I.rlp.llp` is exactly the class of morphisms that are retracts
of transfinite compositions (of shape `Œ∫.ord.toType`) of pushouts of coproducts
of maps in `I`. -/
lemma llp_rlp_of_isCardinalForSmallObjectArgument' :
    I.rlp.llp = (transfiniteCompositionsOfShape
      (coproducts.{w} I).pushouts Œ∫.ord.toType).retracts := by
  refine le_antisymm ?_
    (retracts_transfiniteCompositionsOfShape_pushouts_coproducts_le_llp_rlp I Œ∫.ord.toType)
  intro X Y f hf
  have sq : CommSq (ŒπObj I Œ∫ f) f (œÄObj I Œ∫ f) (ùüô _) := ‚ü®by simp‚ü©
  have := hf _ (rlp_œÄObj I Œ∫ f)
  refine ‚ü®_, _, _, ?_, transfiniteCompositionsOfShape_ŒπObj I Œ∫ f‚ü©
  exact
    { i := Arrow.homMk (ùüô _) sq.lift
      r := Arrow.homMk (ùüô _) (œÄObj I Œ∫ f) }

/-- If `Œ∫` is a suitable cardinal for the small object argument for `I : MorphismProperty C`,
then the class `I.rlp.llp` is exactly the class of morphisms that are retracts
of transfinite compositions of pushouts of coproducts of maps in `I`. -/
lemma llp_rlp_of_isCardinalForSmallObjectArgument :
    I.rlp.llp =
      (transfiniteCompositions.{w} (coproducts.{w} I).pushouts).retracts := by
  refine le_antisymm ?_
    (retracts_transfiniteComposition_pushouts_coproducts_le_llp_rlp I)
  rw [llp_rlp_of_isCardinalForSmallObjectArgument' I Œ∫]
  apply retracts_monotone
  apply transfiniteCompositionsOfShape_le_transfiniteCompositions

end SmallObject

end CategoryTheory
