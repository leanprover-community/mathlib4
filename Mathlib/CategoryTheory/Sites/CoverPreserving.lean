/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.CategoryTheory.Functor.Flat
import Mathlib.CategoryTheory.Sites.Sheaf
import Mathlib.Tactic.ApplyFun

#align_import category_theory.sites.cover_preserving from "leanprover-community/mathlib"@"f0c8bf9245297a541f468be517f1bde6195105e9"
/-!
# Cover-preserving and continuous functors between sites.

We define the notion of continuous functor between sites: these are functors `G` such that
the precomposition with `G.op` preserves sheaves of types (and actually sheaves in any
category).

In order to show that a functor is continuous, we define cover-preserving functors
between sites as functors that push covering sieves to covering sieves.
Then, a cover-preserving and compatible-preserving functor is continuous.

## Main definitions

* `CategoryTheory.Functor.IsContinuous`: a functor between sites is continuous if the
precomposition with this functor preserves sheaves.
* `CategoryTheory.CoverPreserving`: a functor between sites is cover-preserving if it
pushes covering sieves to covering sieves
* `CategoryTheory.CompatiblePreserving`: a functor between sites is compatible-preserving
if it pushes compatible families of elements to compatible families.
* `CategoryTheory.Functor.sheafPushforwardContinuous`: the induced functor
`Sheaf K A ‚•§ Sheaf J A` for a continuous functor `G : (C, J) ‚•§ (D, K)`. In case this is
part of a morphism of sites, this would be understood as the pushforward functor
even though it goes in the opposite direction as the functor `G`.

## Main results

- `CategoryTheory.isContinuous_of_coverPreserving`: If `G : C ‚•§ D` is
cover-preserving and compatible-preserving, then `G` is a continuous functor,
i.e. `G.op ‚ãô -` as a functor `(D·µí·µñ ‚•§ A) ‚•§ (C·µí·µñ ‚•§ A)` of presheaves maps sheaves to sheaves.

## References

* [Elephant]: *Sketches of an Elephant*, P. T. Johnstone: C2.3.
* https://stacks.math.columbia.edu/tag/00WU

-/


universe w v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

noncomputable section

open CategoryTheory Opposite CategoryTheory.Presieve.FamilyOfElements CategoryTheory.Presieve
  CategoryTheory.Limits

namespace CategoryTheory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (F : C ‚•§ D)

variable {A : Type u‚ÇÉ} [Category.{v‚ÇÉ} A]

variable (J : GrothendieckTopology C) (K : GrothendieckTopology D)

variable {L : GrothendieckTopology A}

/-- A functor `G : (C, J) ‚•§ (D, K)` between sites is *cover-preserving*
if for all covering sieves `R` in `C`, `R.functorPushforward G` is a covering sieve in `D`.
-/
-- porting note: removed `@[nolint has_nonempty_instance]`
structure CoverPreserving (G : C ‚•§ D) : Prop where
  cover_preserve : ‚àÄ {U : C} {S : Sieve U} (_ : S ‚àà J U), S.functorPushforward G ‚àà K (G.obj U)
#align category_theory.cover_preserving CategoryTheory.CoverPreserving

/-- The identity functor on a site is cover-preserving. -/
theorem idCoverPreserving : CoverPreserving J J (ùü≠ _) :=
  ‚ü®fun hS => by simpa using hS‚ü©
#align category_theory.id_cover_preserving CategoryTheory.idCoverPreserving

/-- The composition of two cover-preserving functors is cover-preserving. -/
theorem CoverPreserving.comp {F} (hF : CoverPreserving J K F) {G} (hG : CoverPreserving K L G) :
    CoverPreserving J L (F ‚ãô G) :=
  ‚ü®fun hS => by
    rw [Sieve.functorPushforward_comp]
    exact hG.cover_preserve (hF.cover_preserve hS)‚ü©
#align category_theory.cover_preserving.comp CategoryTheory.CoverPreserving.comp

/-- A functor `G : (C, J) ‚•§ (D, K)` between sites is called compatible preserving if for each
compatible family of elements at `C` and valued in `G.op ‚ãô ‚Ñ±`, and each commuting diagram
`f‚ÇÅ ‚â´ G.map g‚ÇÅ = f‚ÇÇ ‚â´ G.map g‚ÇÇ`, `x g‚ÇÅ` and `x g‚ÇÇ` coincide when restricted via `f·µ¢`.
This is actually stronger than merely preserving compatible families because of the definition of
`functorPushforward` used.
-/
-- porting note: this doesn't work yet @[nolint has_nonempty_instance]
structure CompatiblePreserving (K : GrothendieckTopology D) (G : C ‚•§ D) : Prop where
  compatible :
    ‚àÄ (‚Ñ± : SheafOfTypes.{w} K) {Z} {T : Presieve Z} {x : FamilyOfElements (G.op ‚ãô ‚Ñ±.val) T}
      (_ : x.Compatible) {Y‚ÇÅ Y‚ÇÇ} {X} (f‚ÇÅ : X ‚ü∂ G.obj Y‚ÇÅ) (f‚ÇÇ : X ‚ü∂ G.obj Y‚ÇÇ) {g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z}
      {g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z} (hg‚ÇÅ : T g‚ÇÅ) (hg‚ÇÇ : T g‚ÇÇ) (_ : f‚ÇÅ ‚â´ G.map g‚ÇÅ = f‚ÇÇ ‚â´ G.map g‚ÇÇ),
      ‚Ñ±.val.map f‚ÇÅ.op (x g‚ÇÅ hg‚ÇÅ) = ‚Ñ±.val.map f‚ÇÇ.op (x g‚ÇÇ hg‚ÇÇ)
#align category_theory.compatible_preserving CategoryTheory.CompatiblePreserving

variable {J K} {G : C ‚•§ D} (hG : CompatiblePreserving.{w} K G) (‚Ñ± : SheafOfTypes.{w} K) {Z : C}

variable {T : Presieve Z} {x : FamilyOfElements (G.op ‚ãô ‚Ñ±.val) T} (h : x.Compatible)

/-- `CompatiblePreserving` functors indeed preserve compatible families. -/
theorem Presieve.FamilyOfElements.Compatible.functorPushforward :
    (x.functorPushforward G).Compatible := by
  rintro Z‚ÇÅ Z‚ÇÇ W g‚ÇÅ g‚ÇÇ f‚ÇÅ' f‚ÇÇ' H‚ÇÅ H‚ÇÇ eq
  unfold FamilyOfElements.functorPushforward
  rcases getFunctorPushforwardStructure H‚ÇÅ with ‚ü®X‚ÇÅ, f‚ÇÅ, h‚ÇÅ, hf‚ÇÅ, rfl‚ü©
  rcases getFunctorPushforwardStructure H‚ÇÇ with ‚ü®X‚ÇÇ, f‚ÇÇ, h‚ÇÇ, hf‚ÇÇ, rfl‚ü©
  suffices ‚Ñ±.val.map (g‚ÇÅ ‚â´ h‚ÇÅ).op (x f‚ÇÅ hf‚ÇÅ) = ‚Ñ±.val.map (g‚ÇÇ ‚â´ h‚ÇÇ).op (x f‚ÇÇ hf‚ÇÇ) by
    simpa using this
  apply hG.compatible ‚Ñ± h _ _ hf‚ÇÅ hf‚ÇÇ
  simpa using eq
#align category_theory.presieve.family_of_elements.compatible.functor_pushforward CategoryTheory.Presieve.FamilyOfElements.Compatible.functorPushforward

@[simp]
theorem CompatiblePreserving.apply_map {Y : C} {f : Y ‚ü∂ Z} (hf : T f) :
    x.functorPushforward G (G.map f) (image_mem_functorPushforward G T hf) = x f hf := by
  unfold FamilyOfElements.functorPushforward
  rcases getFunctorPushforwardStructure (image_mem_functorPushforward G T hf) with
    ‚ü®X, g, f', hg, eq‚ü©
  simpa using hG.compatible ‚Ñ± h f' (ùüô _) hg hf (by simp [eq])
#align category_theory.compatible_preserving.apply_map CategoryTheory.CompatiblePreserving.apply_map

open Limits.WalkingCospan

theorem compatiblePreservingOfFlat {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÅ} [Category.{v‚ÇÅ} D]
    (K : GrothendieckTopology D) (G : C ‚•§ D) [RepresentablyFlat G] : CompatiblePreserving K G := by
  constructor
  intro ‚Ñ± Z T x hx Y‚ÇÅ Y‚ÇÇ X f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ hg‚ÇÅ hg‚ÇÇ e
  -- First, `f‚ÇÅ` and `f‚ÇÇ` form a cone over `cospan g‚ÇÅ g‚ÇÇ ‚ãô u`.
  let c : Cone (cospan g‚ÇÅ g‚ÇÇ ‚ãô G) :=
    (Cones.postcompose (diagramIsoCospan (cospan g‚ÇÅ g‚ÇÇ ‚ãô G)).inv).obj (PullbackCone.mk f‚ÇÅ f‚ÇÇ e)
  /-
    This can then be viewed as a cospan of structured arrows, and we may obtain an arbitrary cone
    over it since `StructuredArrow W u` is cofiltered.
    Then, it suffices to prove that it is compatible when restricted onto `u(c'.X.right)`.
    -/
  let c' := IsCofiltered.cone (c.toStructuredArrow ‚ãô StructuredArrow.pre _ _ _)
  have eq‚ÇÅ : f‚ÇÅ = (c'.pt.hom ‚â´ G.map (c'.œÄ.app left).right) ‚â´ eqToHom (by simp) := by
    erw [‚Üê (c'.œÄ.app left).w]
    dsimp
    simp
  have eq‚ÇÇ : f‚ÇÇ = (c'.pt.hom ‚â´ G.map (c'.œÄ.app right).right) ‚â´ eqToHom (by simp) := by
    erw [‚Üê (c'.œÄ.app right).w]
    dsimp
    simp
  conv_lhs => rw [eq‚ÇÅ]
  conv_rhs => rw [eq‚ÇÇ]
  simp only [op_comp, Functor.map_comp, types_comp_apply, eqToHom_op, eqToHom_map]
  apply congr_arg -- porting note: was `congr 1` which for some reason doesn't do anything here
  -- despite goal being of the form f a = f b, with f=`‚Ñ±.val.map (Quiver.Hom.op c'.pt.hom)`
  /-
    Since everything now falls in the image of `u`,
    the result follows from the compatibility of `x` in the image of `u`.
    -/
  injection c'.œÄ.naturality WalkingCospan.Hom.inl with _ e‚ÇÅ
  injection c'.œÄ.naturality WalkingCospan.Hom.inr with _ e‚ÇÇ
  exact hx (c'.œÄ.app left).right (c'.œÄ.app right).right hg‚ÇÅ hg‚ÇÇ (e‚ÇÅ.symm.trans e‚ÇÇ)
#align category_theory.compatible_preserving_of_flat CategoryTheory.compatiblePreservingOfFlat

theorem compatiblePreservingOfDownwardsClosed (F : C ‚•§ D) [Full F] [Faithful F]
    (hF : ‚àÄ {c : C} {d : D} (_ : d ‚ü∂ F.obj c), Œ£c', F.obj c' ‚âÖ d) : CompatiblePreserving K F := by
  constructor
  introv hx he
  obtain ‚ü®X', e‚ü© := hF f‚ÇÅ
  apply (‚Ñ±.1.mapIso e.op).toEquiv.injective
  simp only [Iso.op_hom, Iso.toEquiv_fun, ‚Ñ±.1.mapIso_hom, ‚Üê FunctorToTypes.map_comp_apply]
  simpa using
    hx (F.preimage <| e.hom ‚â´ f‚ÇÅ) (F.preimage <| e.hom ‚â´ f‚ÇÇ) hg‚ÇÅ hg‚ÇÇ
      (F.map_injective <| by simpa using he)
#align category_theory.compatible_preserving_of_downwards_closed CategoryTheory.compatiblePreservingOfDownwardsClosed

variable (J K)

/-- A functor `F` is continuous if the precomposition with `F.op` sends sheaves of `Type w`
to sheaves. -/
class Functor.IsContinuous : Prop where
  op_comp_isSheafOfTypes (G : SheafOfTypes.{w} K) : Presieve.IsSheaf J (F.op ‚ãô G.val)

lemma Functor.op_comp_isSheafOfTypes [Functor.IsContinuous.{w} F J K]
    (G : SheafOfTypes.{w} K) :
    Presieve.IsSheaf J (F.op ‚ãô G.val) :=
  Functor.IsContinuous.op_comp_isSheafOfTypes _

lemma Functor.isContinuous_of_iso {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (e : F‚ÇÅ ‚âÖ F‚ÇÇ)
    (J : GrothendieckTopology C) (K : GrothendieckTopology D)
    [Functor.IsContinuous.{w} F‚ÇÅ J K] : Functor.IsContinuous.{w} F‚ÇÇ J K where
  op_comp_isSheafOfTypes G :=
    Presieve.isSheaf_iso J (isoWhiskerRight (NatIso.op e.symm) _)
      (F‚ÇÅ.op_comp_isSheafOfTypes J K G)

instance Functor.isContinuous_id : Functor.IsContinuous.{w} (ùü≠ C) J J where
  op_comp_isSheafOfTypes G := G.2

lemma Functor.isContinuous_comp (F‚ÇÅ : C ‚•§ D) (F‚ÇÇ : D ‚•§ A) (J : GrothendieckTopology C)
    (K : GrothendieckTopology D) (L : GrothendieckTopology A)
    [Functor.IsContinuous.{w} F‚ÇÅ J K] [Functor.IsContinuous.{w} F‚ÇÇ K L] :
    Functor.IsContinuous.{w} (F‚ÇÅ ‚ãô F‚ÇÇ) J L where
  op_comp_isSheafOfTypes G := F‚ÇÅ.op_comp_isSheafOfTypes J K ‚ü®_, F‚ÇÇ.op_comp_isSheafOfTypes K L G‚ü©

lemma Functor.isContinuous_comp' {F‚ÇÅ : C ‚•§ D} {F‚ÇÇ : D ‚•§ A} {F‚ÇÅ‚ÇÇ : C ‚•§ A}
    (e : F‚ÇÅ ‚ãô F‚ÇÇ ‚âÖ F‚ÇÅ‚ÇÇ) (J : GrothendieckTopology C)
    (K : GrothendieckTopology D) (L : GrothendieckTopology A)
    [Functor.IsContinuous.{w} F‚ÇÅ J K] [Functor.IsContinuous.{w} F‚ÇÇ K L] :
    Functor.IsContinuous.{w} F‚ÇÅ‚ÇÇ J L := by
  have := Functor.isContinuous_comp F‚ÇÅ F‚ÇÇ J K L
  apply Functor.isContinuous_of_iso e

lemma Functor.op_comp_isSheaf [Functor.IsContinuous.{v‚ÇÉ} F J K] (G : Sheaf K A) :
    Presheaf.IsSheaf J (F.op ‚ãô G.val) :=
  fun T => F.op_comp_isSheafOfTypes J K ‚ü®_, G.cond T‚ü©

variable {F J K}

/-- If `F` is cover-preserving and compatible-preserving,
then `F` is a continuous functor.

This result is basically <https://stacks.math.columbia.edu/tag/00WW>.
-/
lemma Functor.isContinuous_of_coverPreserving (hF‚ÇÅ : CompatiblePreserving.{w} K F)
    (hF‚ÇÇ : CoverPreserving J K F) : Functor.IsContinuous.{w} F J K where
  op_comp_isSheafOfTypes G X S hS x hx := by
    apply exists_unique_of_exists_of_unique
    ¬∑ have H := G.2 _ (hF‚ÇÇ.cover_preserve hS)
      exact ‚ü®H.amalgamate (x.functorPushforward F) (hx.functorPushforward hF‚ÇÅ),
        fun V f hf => (H.isAmalgamation (hx.functorPushforward hF‚ÇÅ) (F.map f) _).trans
          (hF‚ÇÅ.apply_map _ hx hf)‚ü©
    ¬∑ intro y‚ÇÅ y‚ÇÇ hy‚ÇÅ hy‚ÇÇ
      apply (Presieve.isSeparated_of_isSheaf _ _ G.cond _ (hF‚ÇÇ.cover_preserve hS)).ext
      rintro Y _ ‚ü®Z, g, h, hg, rfl‚ü©
      dsimp
      simp only [Functor.map_comp, types_comp_apply]
      have H := (hy‚ÇÅ g hg).trans (hy‚ÇÇ g hg).symm
      dsimp at H
      rw [H]

variable (F J K A)

/-- The induced functor `Sheaf K A ‚•§ Sheaf J A` given by `G.op ‚ãô _`
if `G` is a continuous functor.
-/
def Functor.sheafPushforwardContinuous [Functor.IsContinuous.{v‚ÇÉ} F J K] :
    Sheaf K A ‚•§ Sheaf J A where
  obj ‚Ñ± := ‚ü®F.op ‚ãô ‚Ñ±.val, F.op_comp_isSheaf J K ‚Ñ±‚ü©
  map f := ‚ü®((whiskeringLeft _ _ _).obj F.op).map f.val‚ü©
  map_id ‚Ñ± := by
    ext1
    apply ((whiskeringLeft _ _ _).obj F.op).map_id
  map_comp f g := by
    ext1
    apply ((whiskeringLeft _ _ _).obj F.op).map_comp
#align category_theory.sites.pullback CategoryTheory.Functor.sheafPushforwardContinuous

end CategoryTheory
