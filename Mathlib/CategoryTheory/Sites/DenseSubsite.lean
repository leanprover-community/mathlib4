/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang

! This file was ported from Lean 3 source module category_theory.sites.dense_subsite
! leanprover-community/mathlib commit 1d650c2e131f500f3c17f33b4d19d2ea15987f2c
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.CategoryTheory.Sites.Sheaf
import Mathbin.CategoryTheory.Sites.CoverLifting
import Mathbin.CategoryTheory.Adjunction.FullyFaithful

/-!
# Dense subsites

We define `cover_dense` functors into sites as functors such that there exists a covering sieve
that factors through images of the functor for each object in `D`.

We will primarily consider cover-dense functors that are also full, since this notion is in general
not well-behaved otherwise. Note that https://ncatlab.org/nlab/show/dense+sub-site indeed has a
weaker notion of cover-dense that loosens this requirement, but it would not have all the properties
we would need, and some sheafification would be needed for here and there.

## Main results

- `category_theory.cover_dense.presheaf_hom`: If `G : C ‚•§ (D, K)` is full and cover-dense,
  then given any presheaf `‚Ñ±` and sheaf `‚Ñ±'` on `D`, and a morphism `Œ± : G ‚ãô ‚Ñ± ‚ü∂ G ‚ãô ‚Ñ±'`,
  we may glue them together to obtain a morphism of presheaves `‚Ñ± ‚ü∂ ‚Ñ±'`.
- `category_theory.cover_dense.sheaf_iso`: If `‚Ñ±` above is a sheaf and `Œ±` is an iso,
  then the result is also an iso.
- `category_theory.cover_dense.iso_of_restrict_iso`: If `G : C ‚•§ (D, K)` is full and cover-dense,
  then given any sheaves `‚Ñ±, ‚Ñ±'` on `D`, and a morphism `Œ± : ‚Ñ± ‚ü∂ ‚Ñ±'`, then `Œ±` is an iso if
  `G ‚ãô ‚Ñ± ‚ü∂ G ‚ãô ‚Ñ±'` is iso.
- `category_theory.cover_dense.Sheaf_equiv_of_cover_preserving_cover_lifting`:
  If `G : (C, J) ‚•§ (D, K)` is fully-faithful, cover-lifting, cover-preserving, and cover-dense,
  then it will induce an equivalence of categories of sheaves valued in a complete category.

## References

* [Elephant]: *Sketches of an Elephant*, ‚Ñ±. T. Johnstone: C2.2.
* https://ncatlab.org/nlab/show/dense+sub-site
* https://ncatlab.org/nlab/show/comparison+lemma

-/


universe w v u

namespace CategoryTheory

variable {C : Type _} [Category C] {D : Type _} [Category D] {E : Type _} [Category E]

variable (J : GrothendieckTopology C) (K : GrothendieckTopology D)

variable {L : GrothendieckTopology E}

/-- An auxiliary structure that witnesses the fact that `f` factors through an image object of `G`.
-/
@[nolint has_nonempty_instance]
structure Presieve.CoverByImageStructure (G : C ‚•§ D) {V U : D} (f : V ‚ü∂ U) where
  obj : C
  lift : V ‚ü∂ G.obj obj
  map : G.obj obj ‚ü∂ U
  fac : lift ‚â´ map = f := by obviously
#align category_theory.presieve.cover_by_image_structure CategoryTheory.Presieve.CoverByImageStructure

restate_axiom presieve.cover_by_image_structure.fac'

attribute [simp, reassoc.1] presieve.cover_by_image_structure.fac

/-- For a functor `G : C ‚•§ D`, and an object `U : D`, `presieve.cover_by_image G U` is the presieve
of `U` consisting of those arrows that factor through images of `G`.
-/
def Presieve.coverByImage (G : C ‚•§ D) (U : D) : Presieve U := fun Y f =>
  Nonempty (Presieve.CoverByImageStructure G f)
#align category_theory.presieve.cover_by_image CategoryTheory.Presieve.coverByImage

/-- For a functor `G : C ‚•§ D`, and an object `U : D`, `sieve.cover_by_image G U` is the sieve of `U`
consisting of those arrows that factor through images of `G`.
-/
def Sieve.coverByImage (G : C ‚•§ D) (U : D) : Sieve U :=
  ‚ü®Presieve.coverByImage G U, fun X Y f ‚ü®‚ü®Z, f‚ÇÅ, f‚ÇÇ, (e : _ = _)‚ü©‚ü© g =>
    ‚ü®‚ü®Z, g ‚â´ f‚ÇÅ, f‚ÇÇ, show (g ‚â´ f‚ÇÅ) ‚â´ f‚ÇÇ = g ‚â´ f by rw [category.assoc, ‚Üê e]‚ü©‚ü©‚ü©
#align category_theory.sieve.cover_by_image CategoryTheory.Sieve.coverByImage

theorem Presieve.in_coverByImage (G : C ‚•§ D) {X : D} {Y : C} (f : G.obj Y ‚ü∂ X) :
    Presieve.coverByImage G X f :=
  ‚ü®‚ü®Y, ùüô _, f, by simp‚ü©‚ü©
#align category_theory.presieve.in_cover_by_image CategoryTheory.Presieve.in_coverByImage

/-- A functor `G : (C, J) ‚•§ (D, K)` is called `cover_dense` if for each object in `D`,
  there exists a covering sieve in `D` that factors through images of `G`.

This definition can be found in https://ncatlab.org/nlab/show/dense+sub-site Definition 2.2.
-/
structure CoverDense (K : GrothendieckTopology D) (G : C ‚•§ D) : Prop where
  is_cover : ‚àÄ U : D, Sieve.coverByImage G U ‚àà K U
#align category_theory.cover_dense CategoryTheory.CoverDense

open Presieve Opposite

namespace CoverDense

variable {K}

variable {A : Type _} [Category A] {G : C ‚•§ D} (H : CoverDense K G)

-- this is not marked with `@[ext]` because `H` can not be inferred from the type
theorem ext (H : CoverDense K G) (‚Ñ± : SheafOfTypes K) (X : D) {s t : ‚Ñ±.val.obj (op X)}
    (h : ‚àÄ ‚¶ÉY : C‚¶Ñ (f : G.obj Y ‚ü∂ X), ‚Ñ±.val.map f.op s = ‚Ñ±.val.map f.op t) : s = t :=
  by
  apply (‚Ñ±.cond (sieve.cover_by_image G X) (H.is_cover X)).IsSeparatedFor.ext
  rintro Y _ ‚ü®Z, f‚ÇÅ, f‚ÇÇ, ‚ü®rfl‚ü©‚ü©
  simp [h f‚ÇÇ]
#align category_theory.cover_dense.ext CategoryTheory.CoverDense.ext

theorem functorPullback_pushforward_covering [Full G] (H : CoverDense K G) {X : C}
    (T : K (G.obj X)) : (T.val.functorPullback G).functorPushforward G ‚àà K (G.obj X) :=
  by
  refine' K.superset_covering _ (K.bind_covering T.property fun Y f Hf => H.is_cover Y)
  rintro Y _ ‚ü®Z, _, f, hf, ‚ü®W, g, f', ‚ü®rfl‚ü©‚ü©, rfl‚ü©
  use W; use G.preimage (f' ‚â´ f); use g
  constructor
  ¬∑ simpa using T.val.downward_closed hf f'
  ¬∑ simp
#align category_theory.cover_dense.functor_pullback_pushforward_covering CategoryTheory.CoverDense.functorPullback_pushforward_covering

/-- (Implementation). Given an hom between the pullbacks of two sheaves, we can whisker it with
`coyoneda` to obtain an hom between the pullbacks of the sheaves of maps from `X`.
-/
@[simps]
def homOver {‚Ñ± : D·µí·µñ ‚•§ A} {‚Ñ±' : Sheaf K A} (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) (X : A) :
    G.op ‚ãô ‚Ñ± ‚ãô coyoneda.obj (op X) ‚ü∂ G.op ‚ãô (sheafOver ‚Ñ±' X).val :=
  whiskerRight Œ± (coyoneda.obj (op X))
#align category_theory.cover_dense.hom_over CategoryTheory.CoverDense.homOver

/-- (Implementation). Given an iso between the pullbacks of two sheaves, we can whisker it with
`coyoneda` to obtain an iso between the pullbacks of the sheaves of maps from `X`.
-/
@[simps]
def isoOver {‚Ñ± ‚Ñ±' : Sheaf K A} (Œ± : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) (X : A) :
    G.op ‚ãô (sheafOver ‚Ñ± X).val ‚âÖ G.op ‚ãô (sheafOver ‚Ñ±' X).val :=
  isoWhiskerRight Œ± (coyoneda.obj (op X))
#align category_theory.cover_dense.iso_over CategoryTheory.CoverDense.isoOver

theorem sheaf_eq_amalgamation (‚Ñ± : Sheaf K A) {X : A} {U : D} {T : Sieve U} (hT)
    (x : FamilyOfElements _ T) (hx) (t) (h : x.IsAmalgamation t) :
    t = (‚Ñ±.cond X T hT).amalgamate x hx :=
  (‚Ñ±.cond X T hT).IsSeparatedFor x t _ h ((‚Ñ±.cond X T hT).IsAmalgamation hx)
#align category_theory.cover_dense.sheaf_eq_amalgamation CategoryTheory.CoverDense.sheaf_eq_amalgamation

variable [Full G]

namespace Types

variable {‚Ñ± : D·µí·µñ ‚•§ Type v} {‚Ñ±' : SheafOfTypes.{v} K} (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val)

/--
(Implementation). Given a section of `‚Ñ±` on `X`, we can obtain a family of elements valued in `‚Ñ±'`
that is defined on a cover generated by the images of `G`. -/
@[simp, nolint unused_arguments]
noncomputable def pushforwardFamily {X} (x : ‚Ñ±.obj (op X)) :
    FamilyOfElements ‚Ñ±'.val (coverByImage G X) := fun Y f hf =>
  ‚Ñ±'.val.map hf.some.lift.op <| Œ±.app (op _) (‚Ñ±.map hf.some.map.op x : _)
#align category_theory.cover_dense.types.pushforward_family CategoryTheory.CoverDense.Types.pushforwardFamily

include H

/-- (Implementation). The `pushforward_family` defined is compatible. -/
theorem pushforwardFamily_compatible {X} (x : ‚Ñ±.obj (op X)) : (pushforwardFamily Œ± x).Compatible :=
  by
  intro Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ e
  apply H.ext
  intro Y f
  simp only [pushforward_family, ‚Üê functor_to_types.map_comp_apply, ‚Üê op_comp]
  change (‚Ñ±.map _ ‚â´ Œ±.app (op _) ‚â´ ‚Ñ±'.val.map _) _ = (‚Ñ±.map _ ‚â´ Œ±.app (op _) ‚â´ ‚Ñ±'.val.map _) _
  rw [‚Üê G.image_preimage (f ‚â´ g‚ÇÅ ‚â´ _)]
  rw [‚Üê G.image_preimage (f ‚â´ g‚ÇÇ ‚â´ _)]
  erw [‚Üê Œ±.naturality (G.preimage _).op]
  erw [‚Üê Œ±.naturality (G.preimage _).op]
  refine' congr_fun _ x
  simp only [Quiver.Hom.unop_op, functor.comp_map, ‚Üê op_comp, ‚Üê category.assoc, functor.op_map, ‚Üê
    ‚Ñ±.map_comp, G.image_preimage]
  congr 3
  simp [e]
#align category_theory.cover_dense.types.pushforward_family_compatible CategoryTheory.CoverDense.Types.pushforwardFamily_compatible

omit H

/-- (Implementation). The morphism `‚Ñ±(X) ‚ü∂ ‚Ñ±'(X)` given by gluing the `pushforward_family`. -/
noncomputable def appHom (X : D) : ‚Ñ±.obj (op X) ‚ü∂ ‚Ñ±'.val.obj (op X) := fun x =>
  (‚Ñ±'.cond _ (H.is_cover X)).amalgamate (pushforwardFamily Œ± x) (pushforwardFamily_compatible H Œ± x)
#align category_theory.cover_dense.types.app_hom CategoryTheory.CoverDense.Types.appHom

@[simp]
theorem pushforwardFamily_apply {X} (x : ‚Ñ±.obj (op X)) {Y : C} (f : G.obj Y ‚ü∂ X) :
    pushforwardFamily Œ± x f (Presieve.in_coverByImage G f) = Œ±.app (op Y) (‚Ñ±.map f.op x) :=
  by
  unfold pushforward_family
  refine' congr_fun _ x
  rw [‚Üê G.image_preimage (Nonempty.some _ : presieve.cover_by_image_structure _ _).lift]
  change ‚Ñ±.map _ ‚â´ Œ±.app (op _) ‚â´ ‚Ñ±'.val.map _ = ‚Ñ±.map f.op ‚â´ Œ±.app (op Y)
  erw [‚Üê Œ±.naturality (G.preimage _).op]
  simp only [‚Üê functor.map_comp, ‚Üê category.assoc, functor.comp_map, G.image_preimage, G.op_map,
    Quiver.Hom.unop_op, ‚Üê op_comp, presieve.cover_by_image_structure.fac]
#align category_theory.cover_dense.types.pushforward_family_apply CategoryTheory.CoverDense.Types.pushforwardFamily_apply

@[simp]
theorem appHom_restrict {X : D} {Y : C} (f : op X ‚ü∂ op (G.obj Y)) (x) :
    ‚Ñ±'.val.map f (appHom H Œ± X x) = Œ±.app (op Y) (‚Ñ±.map f x) :=
  by
  refine'
    ((‚Ñ±'.cond _ (H.is_cover X)).valid_glue (pushforward_family_compatible H Œ± x) f.unop
          (presieve.in_cover_by_image G f.unop)).trans
      _
  apply pushforward_family_apply
#align category_theory.cover_dense.types.app_hom_restrict CategoryTheory.CoverDense.Types.appHom_restrict

@[simp]
theorem appHom_valid_glue {X : D} {Y : C} (f : op X ‚ü∂ op (G.obj Y)) :
    appHom H Œ± X ‚â´ ‚Ñ±'.val.map f = ‚Ñ±.map f ‚â´ Œ±.app (op Y) :=
  by
  ext
  apply app_hom_restrict
#align category_theory.cover_dense.types.app_hom_valid_glue CategoryTheory.CoverDense.Types.appHom_valid_glue

/--
(Implementation). The maps given in `app_iso` is inverse to each other and gives a `‚Ñ±(X) ‚âÖ ‚Ñ±'(X)`.
-/
@[simps]
noncomputable def appIso {‚Ñ± ‚Ñ±' : SheafOfTypes.{v} K} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) (X : D) :
    ‚Ñ±.val.obj (op X) ‚âÖ ‚Ñ±'.val.obj (op X)
    where
  Hom := appHom H i.Hom X
  inv := appHom H i.inv X
  hom_inv_id' := by
    ext x
    apply H.ext
    intro Y f
    simp
  inv_hom_id' := by
    ext x
    apply H.ext
    intro Y f
    simp
#align category_theory.cover_dense.types.app_iso CategoryTheory.CoverDense.Types.appIso

/-- Given an natural transformation `G ‚ãô ‚Ñ± ‚ü∂ G ‚ãô ‚Ñ±'` between presheaves of types, where `G` is full
and cover-dense, and `‚Ñ±'` is a sheaf, we may obtain a natural transformation between sheaves.
-/
@[simps]
noncomputable def presheafHom (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) : ‚Ñ± ‚ü∂ ‚Ñ±'.val
    where
  app X := appHom H Œ± (unop X)
  naturality' X Y f := by
    ext x
    apply H.ext ‚Ñ±' (unop Y)
    intro Y' f'
    simp only [app_hom_restrict, types_comp_apply, ‚Üê functor_to_types.map_comp_apply]
    rw [app_hom_restrict H Œ± (f ‚â´ f'.op : op (unop X) ‚ü∂ _)]
#align category_theory.cover_dense.types.presheaf_hom CategoryTheory.CoverDense.Types.presheafHom

/-- Given an natural isomorphism `G ‚ãô ‚Ñ± ‚âÖ G ‚ãô ‚Ñ±'` between presheaves of types, where `G` is full and
cover-dense, and `‚Ñ±, ‚Ñ±'` are sheaves, we may obtain a natural isomorphism between presheaves.
-/
@[simps]
noncomputable def presheafIso {‚Ñ± ‚Ñ±' : SheafOfTypes.{v} K} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) :
    ‚Ñ±.val ‚âÖ ‚Ñ±'.val :=
  NatIso.ofComponents (fun X => appIso H i (unop X)) (presheafHom H i.Hom).naturality
#align category_theory.cover_dense.types.presheaf_iso CategoryTheory.CoverDense.Types.presheafIso

/-- Given an natural isomorphism `G ‚ãô ‚Ñ± ‚âÖ G ‚ãô ‚Ñ±'` between presheaves of types, where `G` is full and
cover-dense, and `‚Ñ±, ‚Ñ±'` are sheaves, we may obtain a natural isomorphism between sheaves.
-/
@[simps]
noncomputable def sheafIso {‚Ñ± ‚Ñ±' : SheafOfTypes.{v} K} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) : ‚Ñ± ‚âÖ ‚Ñ±'
    where
  Hom := ‚ü®(presheafIso H i).Hom‚ü©
  inv := ‚ü®(presheafIso H i).inv‚ü©
  hom_inv_id' := by
    ext1
    apply (presheaf_iso H i).hom_inv_id
  inv_hom_id' := by
    ext1
    apply (presheaf_iso H i).inv_hom_id
#align category_theory.cover_dense.types.sheaf_iso CategoryTheory.CoverDense.Types.sheafIso

end Types

open Types

variable {‚Ñ± : D·µí·µñ ‚•§ A} {‚Ñ±' : Sheaf K A}

/-- (Implementation). The sheaf map given in `types.sheaf_hom` is natural in terms of `X`. -/
@[simps]
noncomputable def sheafCoyonedaHom (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) :
    coyoneda ‚ãô (whiskeringLeft D·µí·µñ A (Type _)).obj ‚Ñ± ‚ü∂
      coyoneda ‚ãô (whiskeringLeft D·µí·µñ A (Type _)).obj ‚Ñ±'.val
    where
  app X := presheafHom H (homOver Œ± (unop X))
  naturality' X Y f := by
    ext (U x)
    change
      app_hom H (hom_over Œ± (unop Y)) (unop U) (f.unop ‚â´ x) =
        f.unop ‚â´ app_hom H (hom_over Œ± (unop X)) (unop U) x
    symm
    apply sheaf_eq_amalgamation
    apply H.is_cover
    intro Y' f' hf'
    change unop X ‚ü∂ ‚Ñ±.obj (op (unop _)) at x
    dsimp
    simp only [pushforward_family, functor.comp_map, coyoneda_obj_map, hom_over_app, category.assoc]
    congr 1
    conv_lhs => rw [‚Üê hf'.some.fac]
    simp only [‚Üê category.assoc, op_comp, functor.map_comp]
    congr 1
    refine' (app_hom_restrict H (hom_over Œ± (unop X)) hf'.some.map.op x).trans _
    simp
#align category_theory.cover_dense.sheaf_coyoneda_hom CategoryTheory.CoverDense.sheafCoyonedaHom

include H

/--
(Implementation). `sheaf_coyoneda_hom` but the order of the arguments of the functor are swapped.
-/
noncomputable def sheafYonedaHom (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) : ‚Ñ± ‚ãô yoneda ‚ü∂ ‚Ñ±'.val ‚ãô yoneda :=
  by
  let Œ± := sheaf_coyoneda_hom H Œ±
  refine'
    { app := _
      naturality' := _ }
  ¬∑ intro U
    refine'
      { app := fun X => (Œ±.app X).app U
        naturality' := fun X Y f => by simpa using congr_app (Œ±.naturality f) U }
  ¬∑ intro U V i
    ext (X x)
    exact congr_fun ((Œ±.app X).naturality i) x
#align category_theory.cover_dense.sheaf_yoneda_hom CategoryTheory.CoverDense.sheafYonedaHom

omit H

/-- Given an natural transformation `G ‚ãô ‚Ñ± ‚ü∂ G ‚ãô ‚Ñ±'` between presheaves of arbitrary category,
where `G` is full and cover-dense, and `‚Ñ±'` is a sheaf, we may obtain a natural transformation
between presheaves.
-/
noncomputable def sheafHom (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) : ‚Ñ± ‚ü∂ ‚Ñ±'.val :=
  let Œ±' := sheafYonedaHom H Œ±
  { app := fun X => yoneda.preimage (Œ±'.app X)
    naturality' := fun X Y f => yoneda.map_injective (by simpa using Œ±'.naturality f) }
#align category_theory.cover_dense.sheaf_hom CategoryTheory.CoverDense.sheafHom

include H

/-- Given an natural isomorphism `G ‚ãô ‚Ñ± ‚âÖ G ‚ãô ‚Ñ±'` between presheaves of arbitrary category,
where `G` is full and cover-dense, and `‚Ñ±', ‚Ñ±` are sheaves,
we may obtain a natural isomorphism between presheaves.
-/
@[simps]
noncomputable def presheafIso {‚Ñ± ‚Ñ±' : Sheaf K A} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) :
    ‚Ñ±.val ‚âÖ ‚Ñ±'.val :=
  by
  have : ‚àÄ X : D·µí·µñ, is_iso ((sheaf_hom H i.hom).app X) :=
    by
    intro X
    apply is_iso_of_reflects_iso _ yoneda
    use (sheaf_yoneda_hom H i.inv).app X
    constructor <;> ext x : 2 <;>
      simp only [sheaf_hom, nat_trans.comp_app, nat_trans.id_app, functor.image_preimage]
    exact ((presheaf_iso H (iso_over i (unop x))).app X).hom_inv_id
    exact ((presheaf_iso H (iso_over i (unop x))).app X).inv_hom_id
    infer_instance
  haveI : is_iso (sheaf_hom H i.hom) := by apply nat_iso.is_iso_of_is_iso_app
  apply as_iso (sheaf_hom H i.hom)
#align category_theory.cover_dense.presheaf_iso CategoryTheory.CoverDense.presheafIso

omit H

/-- Given an natural isomorphism `G ‚ãô ‚Ñ± ‚âÖ G ‚ãô ‚Ñ±'` between presheaves of arbitrary category,
where `G` is full and cover-dense, and `‚Ñ±', ‚Ñ±` are sheaves,
we may obtain a natural isomorphism between presheaves.
-/
@[simps]
noncomputable def sheafIso {‚Ñ± ‚Ñ±' : Sheaf K A} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) : ‚Ñ± ‚âÖ ‚Ñ±'
    where
  Hom := ‚ü®(presheafIso H i).Hom‚ü©
  inv := ‚ü®(presheafIso H i).inv‚ü©
  hom_inv_id' := by
    ext1
    apply (presheaf_iso H i).hom_inv_id
  inv_hom_id' := by
    ext1
    apply (presheaf_iso H i).inv_hom_id
#align category_theory.cover_dense.sheaf_iso CategoryTheory.CoverDense.sheafIso

/-- The constructed `sheaf_hom Œ±` is equal to `Œ±` when restricted onto `C`.
-/
theorem sheafHom_restrict_eq (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) : whiskerLeft G.op (sheafHom H Œ±) = Œ± :=
  by
  ext X
  apply yoneda.map_injective
  ext U
  erw [yoneda.image_preimage]
  symm
  change (show (‚Ñ±'.val ‚ãô coyoneda.obj (op (unop U))).obj (op (G.obj (unop X))) from _) = _
  apply sheaf_eq_amalgamation ‚Ñ±' (H.is_cover _)
  intro Y f hf
  conv_lhs => rw [‚Üê hf.some.fac]
  simp only [pushforward_family, functor.comp_map, yoneda_map_app, coyoneda_obj_map, op_comp,
    functor_to_types.map_comp_apply, hom_over_app, ‚Üê category.assoc]
  congr 1
  simp only [category.assoc]
  congr 1
  rw [‚Üê G.image_preimage hf.some.map]
  symm
  apply Œ±.naturality (G.preimage hf.some.map).op
  infer_instance
#align category_theory.cover_dense.sheaf_hom_restrict_eq CategoryTheory.CoverDense.sheafHom_restrict_eq

/-- If the pullback map is obtained via whiskering,
then the result `sheaf_hom (whisker_left G.op Œ±)` is equal to `Œ±`.
-/
theorem sheafHom_eq (Œ± : ‚Ñ± ‚ü∂ ‚Ñ±'.val) : sheafHom H (whiskerLeft G.op Œ±) = Œ± :=
  by
  ext X
  apply yoneda.map_injective
  swap; ¬∑ infer_instance
  ext U
  erw [yoneda.image_preimage]
  symm
  change (show (‚Ñ±'.val ‚ãô coyoneda.obj (op (unop U))).obj (op (unop X)) from _) = _
  apply sheaf_eq_amalgamation ‚Ñ±' (H.is_cover _)
  intro Y f hf
  conv_lhs => rw [‚Üê hf.some.fac]
  dsimp
  simp
#align category_theory.cover_dense.sheaf_hom_eq CategoryTheory.CoverDense.sheafHom_eq

/-- A full and cover-dense functor `G` induces an equivalence between morphisms into a sheaf and
morphisms over the restrictions via `G`.
-/
noncomputable def restrictHomEquivHom : (G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) ‚âÉ (‚Ñ± ‚ü∂ ‚Ñ±'.val)
    where
  toFun := sheafHom H
  invFun := whiskerLeft G.op
  left_inv := sheafHom_restrict_eq H
  right_inv := sheafHom_eq H
#align category_theory.cover_dense.restrict_hom_equiv_hom CategoryTheory.CoverDense.restrictHomEquivHom

include H

/-- Given a full and cover-dense functor `G` and a natural transformation of sheaves `Œ± : ‚Ñ± ‚ü∂ ‚Ñ±'`,
if the pullback of `Œ±` along `G` is iso, then `Œ±` is also iso.
-/
theorem iso_of_restrict_iso {‚Ñ± ‚Ñ±' : Sheaf K A} (Œ± : ‚Ñ± ‚ü∂ ‚Ñ±') (i : IsIso (whiskerLeft G.op Œ±.val)) :
    IsIso Œ± :=
  by
  convert is_iso.of_iso (sheaf_iso H (as_iso (whisker_left G.op Œ±.val))) using 1
  ext1
  apply (sheaf_hom_eq _ _).symm
#align category_theory.cover_dense.iso_of_restrict_iso CategoryTheory.CoverDense.iso_of_restrict_iso

/-- A fully faithful cover-dense functor preserves compatible families. -/
theorem compatiblePreserving [Faithful G] : CompatiblePreserving K G :=
  by
  constructor
  intro ‚Ñ± Z T x hx Y‚ÇÅ Y‚ÇÇ X f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ hg‚ÇÅ hg‚ÇÇ eq
  apply H.ext
  intro W i
  simp only [‚Üê functor_to_types.map_comp_apply, ‚Üê op_comp]
  rw [‚Üê G.image_preimage (i ‚â´ f‚ÇÅ)]
  rw [‚Üê G.image_preimage (i ‚â´ f‚ÇÇ)]
  apply hx
  apply G.map_injective
  simp [Eq]
#align category_theory.cover_dense.compatible_preserving CategoryTheory.CoverDense.compatiblePreserving

omit H

noncomputable instance Sites.Pullback.full [Faithful G] (Hp : CoverPreserving J K G) :
    Full (Sites.pullback A H.CompatiblePreserving Hp)
    where
  preimage ‚Ñ± ‚Ñ±' Œ± := ‚ü®H.sheafHom Œ±.val‚ü©
  witness' ‚Ñ± ‚Ñ±' Œ± := Sheaf.Hom.ext _ _ <| H.sheafHom_restrict_eq Œ±.val
#align category_theory.cover_dense.sites.pullback.full CategoryTheory.CoverDense.Sites.Pullback.full

instance Sites.Pullback.faithful [Faithful G] (Hp : CoverPreserving J K G) :
    Faithful (Sites.pullback A H.CompatiblePreserving Hp)
    where map_injective' := by
    intro ‚Ñ± ‚Ñ±' Œ± Œ≤ e
    ext1
    apply_fun fun e => e.val  at e
    dsimp at e
    rw [‚Üê H.sheaf_hom_eq Œ±.val, ‚Üê H.sheaf_hom_eq Œ≤.val, e]
#align category_theory.cover_dense.sites.pullback.faithful CategoryTheory.CoverDense.Sites.Pullback.faithful

end CoverDense

end CategoryTheory

namespace CategoryTheory.CoverDense

open CategoryTheory

variable {C D : Type u} [Category.{v} C] [Category.{v} D]

variable {G : C ‚•§ D} [Full G] [Faithful G]

variable {J : GrothendieckTopology C} {K : GrothendieckTopology D}

variable {A : Type w} [Category.{max u v} A] [Limits.HasLimits A]

variable (Hd : CoverDense K G) (Hp : CoverPreserving J K G) (Hl : CoverLifting J K G)

include Hd Hp Hl

/-- Given a functor between small sites that is cover-dense, cover-preserving, and cover-lifting,
it induces an equivalence of category of sheaves valued in a complete category.
-/
@[simps Functor inverse]
noncomputable def sheafEquivOfCoverPreservingCoverLifting : Sheaf J A ‚âå Sheaf K A :=
  by
  symm
  let Œ± := Sites.pullbackCopullbackAdjunction.{w, v, u} A Hp Hl Hd.compatible_preserving
  have : ‚àÄ X : Sheaf J A, is_iso (Œ±.counit.app X) :=
    by
    intro ‚Ñ±
    apply (config := { instances := false }) reflects_isomorphisms.reflects (Sheaf_to_presheaf J A)
    exact is_iso.of_iso ((@as_iso _ _ _ _ _ (Ran.reflective A G.op)).app ‚Ñ±.val)
  haveI : is_iso Œ±.counit := nat_iso.is_iso_of_is_iso_app _
  exact
    { Functor := sites.pullback A Hd.compatible_preserving Hp
      inverse := sites.copullback A Hl
      unitIso := as_iso Œ±.unit
      counitIso := as_iso Œ±.counit
      functor_unitIso_comp' := fun ‚Ñ± => by convert Œ±.left_triangle_components }
#align category_theory.cover_dense.Sheaf_equiv_of_cover_preserving_cover_lifting CategoryTheory.CoverDense.sheafEquivOfCoverPreservingCoverLifting

end CategoryTheory.CoverDense

