/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Andrew Yang
-/
import Mathlib.CategoryTheory.Sites.IsSheafOneHypercover

/-!
# Continuous functors between sites.

We define the notion of continuous functor between sites: these are functors `F` such that
the precomposition with `F.op` preserves sheaves of types (and actually sheaves in any
category).

## Main definitions

* `Functor.IsContinuous`: a functor between sites is continuous if the
precomposition with this functor preserves sheaves with values in
the category `Type t` for a certain auxiliary universe `t`.
* `Functor.sheafPushforwardContinuous`: the induced functor
`Sheaf K A ‚•§ Sheaf J A` for a continuous functor `G : (C, J) ‚•§ (D, K)`. In case this is
part of a morphism of sites, this would be understood as the pushforward functor
even though it goes in the opposite direction as the functor `G`. (Here, the auxiliary
universe `t` in the assumption that `G` is continuous is the one such that morphisms
in the category `A` are in `Type t`.)
* `Functor.PreservesOneHypercovers`: a type-class expressing that a functor preserves
1-hypercovers of a certain size

## Main result

- `Functor.isContinuous_of_preservesOneHypercovers`: if the topology on `C` is generated
by 1-hypercovers of size `w` and that `F : C ‚•§ D` preserves 1-hypercovers of size `w`,
then `F` is continuous (for any auxiliary universe parameter `t`).
This is an instance for `w = max u‚ÇÅ v‚ÇÅ` when `C : Type u‚ÇÅ` and `[Category.{v‚ÇÅ} C]`

## References
* https://stacks.math.columbia.edu/tag/00WU

-/

universe w t v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ u

namespace CategoryTheory

open Limits

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
  {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E]

namespace PreOneHypercover

variable {X : C} (E : PreOneHypercover X) (F : C ‚•§ D)

/-- The image of a 1-pre-hypercover by a functor. -/
@[simps]
def map : PreOneHypercover (F.obj X) where
  I‚ÇÄ := E.I‚ÇÄ
  X i := F.obj (E.X i)
  f i := F.map (E.f i)
  I‚ÇÅ := E.I‚ÇÅ
  Y _ _ j := F.obj (E.Y j)
  p‚ÇÅ _ _ j := F.map (E.p‚ÇÅ j)
  p‚ÇÇ _ _ j := F.map (E.p‚ÇÇ j)
  w _ _ j := by simpa using F.congr_map (E.w j)

/-- If `F : C ‚•§ D`, `P : D·µí·µñ ‚•§ A` and `E` is a 1-pre-hypercover of an object of `X`,
then `(E.map F).multifork P` is a limit iff `E.multifork (F.op ‚ãô P)` is a limit. -/
def isLimitMapMultiforkEquiv {A : Type u} [Category.{t} A] (P : D·µí·µñ ‚•§ A) :
    IsLimit ((E.map F).multifork P) ‚âÉ IsLimit (E.multifork (F.op ‚ãô P)) := by rfl

end PreOneHypercover

namespace GrothendieckTopology

namespace OneHypercover

variable {J : GrothendieckTopology C} {X : C} (E : J.OneHypercover X)

/-- A 1-hypercover in `C` is preserved by a functor `F : C ‚•§ D` if the mapped 1-pre-hypercover
in `D` is a 1-hypercover for the given topology on `D`. -/
class IsPreservedBy (F : C ‚•§ D) (K : GrothendieckTopology D) : Prop where
  mem‚ÇÄ : (E.toPreOneHypercover.map F).sieve‚ÇÄ ‚àà K (F.obj X)
  mem‚ÇÅ (i‚ÇÅ i‚ÇÇ : E.I‚ÇÄ) ‚¶ÉW : D‚¶Ñ (p‚ÇÅ : W ‚ü∂ F.obj (E.X i‚ÇÅ)) (p‚ÇÇ : W ‚ü∂ F.obj (E.X i‚ÇÇ))
    (w : p‚ÇÅ ‚â´ F.map (E.f i‚ÇÅ) = p‚ÇÇ ‚â´ F.map (E.f i‚ÇÇ)) :
      (E.toPreOneHypercover.map F).sieve‚ÇÅ p‚ÇÅ p‚ÇÇ ‚àà K W

/-- Given a 1-hypercover `E : J.OneHypercover X` of an object of `C`, a functor `F : C ‚•§ D`
such that `E.IsPreversedBy F K` for a Grothendieck topology `K` on `D`, this is
the image of `E` by `F`, as a 1-hypercover of `F.obj X` for `K`. -/
@[simps toPreOneHypercover]
def map (F : C ‚•§ D) (K : GrothendieckTopology D) [E.IsPreservedBy F K] :
    K.OneHypercover (F.obj X) where
  toPreOneHypercover := E.toPreOneHypercover.map F
  mem‚ÇÄ := IsPreservedBy.mem‚ÇÄ
  mem‚ÇÅ := IsPreservedBy.mem‚ÇÅ

instance : E.IsPreservedBy (ùü≠ C) J where
  mem‚ÇÄ := E.mem‚ÇÄ
  mem‚ÇÅ := E.mem‚ÇÅ

end OneHypercover

end GrothendieckTopology

namespace Functor

variable (F : C ‚•§ D) {A : Type u} [Category.{t} A]
  (J : GrothendieckTopology C) (K : GrothendieckTopology D)

/-- The condition that a functor `F : C ‚•§ D` sends 1-hypercovers for
`J : GrothendieckTopology C` to 1-hypercovers for `K : GrothendieckTopology D`. -/
abbrev PreservesOneHypercovers :=
  ‚àÄ {X : C} (E : GrothendieckTopology.OneHypercover.{w} J X), E.IsPreservedBy F K

/-- A functor `F` is continuous if the precomposition with `F.op` sends sheaves of `Type t`
to sheaves. -/
class IsContinuous : Prop where
  op_comp_isSheaf_of_types (G : Sheaf K (Type t)) : Presieve.IsSheaf J (F.op ‚ãô G.val)

lemma op_comp_isSheaf_of_types [Functor.IsContinuous.{t} F J K] (G : Sheaf K (Type t)) :
    Presieve.IsSheaf J (F.op ‚ãô G.val) :=
  Functor.IsContinuous.op_comp_isSheaf_of_types _

@[deprecated (since := "2024-11-26")] alias op_comp_isSheafOfTypes := op_comp_isSheaf_of_types

lemma op_comp_isSheaf [Functor.IsContinuous.{t} F J K] (G : Sheaf K A) :
    Presheaf.IsSheaf J (F.op ‚ãô G.val) :=
  fun T => F.op_comp_isSheaf_of_types J K ‚ü®_, (isSheaf_iff_isSheaf_of_type _ _).2 (G.cond T)‚ü©

lemma isContinuous_of_iso {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (e : F‚ÇÅ ‚âÖ F‚ÇÇ)
    (J : GrothendieckTopology C) (K : GrothendieckTopology D)
    [Functor.IsContinuous.{t} F‚ÇÅ J K] : Functor.IsContinuous.{t} F‚ÇÇ J K where
  op_comp_isSheaf_of_types G :=
    Presieve.isSheaf_iso J (isoWhiskerRight (NatIso.op e.symm) _)
      (F‚ÇÅ.op_comp_isSheaf_of_types J K G)

instance isContinuous_id : Functor.IsContinuous.{w} (ùü≠ C) J J where
  op_comp_isSheaf_of_types G := (isSheaf_iff_isSheaf_of_type _ _).1 G.2

lemma isContinuous_comp (F‚ÇÅ : C ‚•§ D) (F‚ÇÇ : D ‚•§ E) (J : GrothendieckTopology C)
    (K : GrothendieckTopology D) (L : GrothendieckTopology E)
    [Functor.IsContinuous.{t} F‚ÇÅ J K] [Functor.IsContinuous.{t} F‚ÇÇ K L] :
    Functor.IsContinuous.{t} (F‚ÇÅ ‚ãô F‚ÇÇ) J L where
  op_comp_isSheaf_of_types G :=
    F‚ÇÅ.op_comp_isSheaf_of_types J K
      ‚ü®_,(isSheaf_iff_isSheaf_of_type _ _).2 (F‚ÇÇ.op_comp_isSheaf_of_types K L G)‚ü©

lemma isContinuous_comp' {F‚ÇÅ : C ‚•§ D} {F‚ÇÇ : D ‚•§ E} {F‚ÇÅ‚ÇÇ : C ‚•§ E}
    (e : F‚ÇÅ ‚ãô F‚ÇÇ ‚âÖ F‚ÇÅ‚ÇÇ) (J : GrothendieckTopology C)
    (K : GrothendieckTopology D) (L : GrothendieckTopology E)
    [Functor.IsContinuous.{t} F‚ÇÅ J K] [Functor.IsContinuous.{t} F‚ÇÇ K L] :
    Functor.IsContinuous.{t} F‚ÇÅ‚ÇÇ J L := by
  have := Functor.isContinuous_comp F‚ÇÅ F‚ÇÇ J K L
  apply Functor.isContinuous_of_iso e

section

lemma op_comp_isSheaf_of_preservesOneHypercovers
    [PreservesOneHypercovers.{w} F J K] [GrothendieckTopology.IsGeneratedByOneHypercovers.{w} J]
    (P : D·µí·µñ ‚•§ A) (hP : Presheaf.IsSheaf K P) :
    Presheaf.IsSheaf J (F.op ‚ãô P) := by
  rw [Presheaf.isSheaf_iff_of_isGeneratedByOneHypercovers.{w}]
  intro X E
  exact ‚ü®(E.toPreOneHypercover.isLimitMapMultiforkEquiv F P)
    ((E.map F K).isLimitMultifork ‚ü®P, hP‚ü©)‚ü©

lemma isContinuous_of_preservesOneHypercovers
    [PreservesOneHypercovers.{w} F J K] [GrothendieckTopology.IsGeneratedByOneHypercovers.{w} J] :
    IsContinuous.{t} F J K where
  op_comp_isSheaf_of_types := by
    rintro ‚ü®P, hP‚ü©
    rw [‚Üê isSheaf_iff_isSheaf_of_type]
    exact F.op_comp_isSheaf_of_preservesOneHypercovers J K P hP

end

instance [PreservesOneHypercovers.{max u‚ÇÅ v‚ÇÅ} F J K] :
    IsContinuous.{t} F J K :=
  isContinuous_of_preservesOneHypercovers.{max u‚ÇÅ v‚ÇÅ} F J K

variable (A)
variable [Functor.IsContinuous.{t} F J K]

/-- The induced functor `Sheaf K A ‚•§ Sheaf J A` given by `F.op ‚ãô _`
if `F` is a continuous functor.
-/
@[simps!]
def sheafPushforwardContinuous : Sheaf K A ‚•§ Sheaf J A where
  obj ‚Ñ± := ‚ü®F.op ‚ãô ‚Ñ±.val, F.op_comp_isSheaf J K ‚Ñ±‚ü©
  map f := ‚ü®((whiskeringLeft _ _ _).obj F.op).map f.val‚ü©

/-- The functor `F.sheafPushforwardContinuous A J K : Sheaf K A ‚•§ Sheaf J A`
is induced by the precomposition with `F.op`. -/
@[simps!]
def sheafPushforwardContinuousCompSheafToPresheafIso :
    F.sheafPushforwardContinuous A J K ‚ãô sheafToPresheaf J A ‚âÖ
      sheafToPresheaf K A ‚ãô (whiskeringLeft _ _ _).obj F.op := Iso.refl _

end Functor

end CategoryTheory
