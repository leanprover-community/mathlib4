/-
Copyright (c) 2020 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kenny Lau

! This file was ported from Lean 3 source module category_theory.sites.types
! leanprover-community/mathlib commit 9f9015c645d85695581237cc761981036be8bd37
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.CategoryTheory.Sites.Canonical

/-!
# Grothendieck Topology and Sheaves on the Category of Types

In this file we define a Grothendieck topology on the category of types,
and construct the canonical functor that sends a type to a sheaf over
the category of types, and make this an equivalence of categories.

Then we prove that the topology defined is the canonical topology.
-/


universe u

namespace CategoryTheory

open scoped CategoryTheory.Type

/-- A Grothendieck topology associated to the category of all types.
A sieve is a covering iff it is jointly surjective. -/
def typesGrothendieckTopology : GrothendieckTopology (Type u)
    where
  sieves Œ± S := ‚àÄ x : Œ±, S fun _ : PUnit => x
  top_mem' Œ± x := trivial
  pullback_stable' Œ± Œ≤ S f hs x := hs (f x)
  transitive' Œ± S hs R hr x := hr (hs x) PUnit.unit
#align category_theory.types_grothendieck_topology CategoryTheory.typesGrothendieckTopology

/-- The discrete sieve on a type, which only includes arrows whose image is a subsingleton. -/
@[simps]
def discreteSieve (Œ± : Type u) : Sieve Œ±
    where
  arrows Œ≤ f := ‚àÉ x, ‚àÄ y, f y = x
  downward_closed' := fun Œ≤ Œ≥ f ‚ü®x, hx‚ü© g => ‚ü®x, fun y => hx <| g y‚ü©
#align category_theory.discrete_sieve CategoryTheory.discreteSieve

theorem discreteSieve_mem (Œ± : Type u) : discreteSieve Œ± ‚àà typesGrothendieckTopology Œ± := fun x =>
  ‚ü®x, fun y => rfl‚ü©
#align category_theory.discrete_sieve_mem CategoryTheory.discreteSieve_mem

/-- The discrete presieve on a type, which only includes arrows whose domain is a singleton. -/
def discretePresieve (Œ± : Type u) : Presieve Œ± := fun Œ≤ f => ‚àÉ x : Œ≤, ‚àÄ y : Œ≤, y = x
#align category_theory.discrete_presieve CategoryTheory.discretePresieve

theorem generate_discretePresieve_mem (Œ± : Type u) :
    Sieve.generate (discretePresieve Œ±) ‚àà typesGrothendieckTopology Œ± := fun x =>
  ‚ü®PUnit, id, fun _ => x, ‚ü®PUnit.unit, fun _ => Subsingleton.elim _ _‚ü©, rfl‚ü©
#align category_theory.generate_discrete_presieve_mem CategoryTheory.generate_discretePresieve_mem

open Presieve

theorem isSheaf_yoneda' {Œ± : Type u} : IsSheaf typesGrothendieckTopology (yoneda.obj Œ±) :=
  fun Œ≤ S hs x hx =>
  ‚ü®fun y => x _ (hs y) PUnit.unit, fun Œ≥ f h =>
    funext fun z =>
      by
      have := congr_fun (hx (ùüô _) (fun _ => z) (hs <| f z) h rfl) PUnit.unit
      convert this
      exact rfl,
    fun f hf => funext fun y => by convert congr_fun (hf _ (hs y)) PUnit.unit‚ü©
#align category_theory.is_sheaf_yoneda' CategoryTheory.isSheaf_yoneda'

/-- The yoneda functor that sends a type to a sheaf over the category of types -/
@[simps]
def yoneda' : Type u ‚•§ SheafOfTypes typesGrothendieckTopology
    where
  obj Œ± := ‚ü®yoneda.obj Œ±, isSheaf_yoneda'‚ü©
  map Œ± Œ≤ f := ‚ü®yoneda.map f‚ü©
#align category_theory.yoneda' CategoryTheory.yoneda'

@[simp]
theorem yoneda'_comp : yoneda'.{u} ‚ãô sheafOfTypesToPresheaf _ = yoneda :=
  rfl
#align category_theory.yoneda'_comp CategoryTheory.yoneda'_comp

open Opposite

/-- Given a presheaf `P` on the category of types, construct
a map `P(Œ±) ‚Üí (Œ± ‚Üí P(*))` for all type `Œ±`. -/
def eval (P : Type u·µí·µñ ‚•§ Type u) (Œ± : Type u) (s : P.obj (op Œ±)) (x : Œ±) : P.obj (op PUnit) :=
  P.map (‚Üæfun _ => x).op s
#align category_theory.eval CategoryTheory.eval

/-- Given a sheaf `S` on the category of types, construct a map
`(Œ± ‚Üí S(*)) ‚Üí S(Œ±)` that is inverse to `eval`. -/
noncomputable def typesGlue (S : Type u·µí·µñ ‚•§ Type u) (hs : IsSheaf typesGrothendieckTopology S)
    (Œ± : Type u) (f : Œ± ‚Üí S.obj (op PUnit)) : S.obj (op Œ±) :=
  (hs.IsSheafFor _ _ (generate_discretePresieve_mem Œ±)).amalgamate
    (fun Œ≤ g hg => S.map (‚Üæfun x => PUnit.unit).op <| f <| g <| Classical.choose hg)
    fun Œ≤ Œ≥ Œ¥ g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ h =>
    (hs.IsSheafFor _ _ (generate_discretePresieve_mem Œ¥)).IsSeparatedFor.ext fun Œµ g ‚ü®x, hx‚ü© =>
      by
      have : f‚ÇÅ (Classical.choose hf‚ÇÅ) = f‚ÇÇ (Classical.choose hf‚ÇÇ) :=
        Classical.choose_spec hf‚ÇÅ (g‚ÇÅ <| g x) ‚ñ∏
          Classical.choose_spec hf‚ÇÇ (g‚ÇÇ <| g x) ‚ñ∏ congr_fun h _
      simp_rw [‚Üê functor_to_types.map_comp_apply, this, ‚Üê op_comp]
      rfl
#align category_theory.types_glue CategoryTheory.typesGlue

theorem eval_typesGlue {S hs Œ±} (f) : eval.{u} S Œ± (typesGlue S hs Œ± f) = f :=
  funext fun x =>
    (IsSheafFor.valid_glue _ _ _ <| ‚ü®PUnit.unit, fun _ => Subsingleton.elim _ _‚ü©).trans <| by
      convert functor_to_types.map_id_apply _ _; rw [‚Üê op_id]; congr
#align category_theory.eval_types_glue CategoryTheory.eval_typesGlue

theorem typesGlue_eval {S hs Œ±} (s) : typesGlue.{u} S hs Œ± (eval S Œ± s) = s :=
  (hs.IsSheafFor _ _ (generate_discretePresieve_mem Œ±)).IsSeparatedFor.ext fun Œ≤ f hf =>
    (IsSheafFor.valid_glue _ _ _ hf).trans <|
      (FunctorToTypes.map_comp_apply _ _ _ _).symm.trans <| by rw [‚Üê op_comp]; congr 2;
        exact funext fun x => congr_arg f (Classical.choose_spec hf x).symm
#align category_theory.types_glue_eval CategoryTheory.typesGlue_eval

/-- Given a sheaf `S`, construct an equivalence `S(Œ±) ‚âÉ (Œ± ‚Üí S(*))`. -/
@[simps]
noncomputable def evalEquiv (S : Type u·µí·µñ ‚•§ Type u) (hs : IsSheaf typesGrothendieckTopology S)
    (Œ± : Type u) : S.obj (op Œ±) ‚âÉ (Œ± ‚Üí S.obj (op PUnit))
    where
  toFun := eval S Œ±
  invFun := typesGlue S hs Œ±
  left_inv := typesGlue_eval
  right_inv := eval_typesGlue
#align category_theory.eval_equiv CategoryTheory.evalEquiv

theorem eval_map (S : Type u·µí·µñ ‚•§ Type u) (Œ± Œ≤) (f : Œ≤ ‚ü∂ Œ±) (s x) :
    eval S Œ≤ (S.map f.op s) x = eval S Œ± s (f x) := by
  simp_rw [eval, ‚Üê functor_to_types.map_comp_apply, ‚Üê op_comp]; rfl
#align category_theory.eval_map CategoryTheory.eval_map

/-- Given a sheaf `S`, construct an isomorphism `S ‚âÖ [-, S(*)]`. -/
@[simps]
noncomputable def equivYoneda (S : Type u·µí·µñ ‚•§ Type u) (hs : IsSheaf typesGrothendieckTopology S) :
    S ‚âÖ yoneda.obj (S.obj (op PUnit)) :=
  NatIso.ofComponents (fun Œ± => Equiv.toIso <| evalEquiv S hs <| unop Œ±) fun Œ± Œ≤ f =>
    funext fun s => funext fun x => eval_map S (unop Œ±) (unop Œ≤) f.unop _ _
#align category_theory.equiv_yoneda CategoryTheory.equivYoneda

/-- Given a sheaf `S`, construct an isomorphism `S ‚âÖ [-, S(*)]`. -/
@[simps]
noncomputable def equivYoneda' (S : SheafOfTypes typesGrothendieckTopology) :
    S ‚âÖ yoneda'.obj (S.1.obj (op PUnit))
    where
  Hom := ‚ü®(equivYoneda S.1 S.2).Hom‚ü©
  inv := ‚ü®(equivYoneda S.1 S.2).inv‚ü©
  hom_inv_id' := by ext1; apply (equiv_yoneda S.1 S.2).hom_inv_id
  inv_hom_id' := by ext1; apply (equiv_yoneda S.1 S.2).inv_hom_id
#align category_theory.equiv_yoneda' CategoryTheory.equivYoneda'

theorem eval_app (S‚ÇÅ S‚ÇÇ : SheafOfTypes.{u} typesGrothendieckTopology) (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) (Œ± : Type u)
    (s : S‚ÇÅ.1.obj (op Œ±)) (x : Œ±) :
    eval S‚ÇÇ.1 Œ± (f.val.app (op Œ±) s) x = f.val.app (op PUnit) (eval S‚ÇÅ.1 Œ± s x) :=
  (congr_fun (f.val.naturality (‚Üæfun _ : PUnit => x).op) s).symm
#align category_theory.eval_app CategoryTheory.eval_app

/-- `yoneda'` induces an equivalence of category between `Type u` and
`Sheaf types_grothendieck_topology`. -/
@[simps]
noncomputable def typeEquiv : Type u ‚âå SheafOfTypes typesGrothendieckTopology :=
  Equivalence.mk yoneda' (sheafOfTypesToPresheaf _ ‚ãô (evaluation _ _).obj (op PUnit))
    (NatIso.ofComponents
      (fun Œ± =>
        -- Œ± ‚âÖ punit ‚ü∂ Œ±
        { Hom := fun x _ => x
          inv := fun f => f PUnit.unit
          hom_inv_id' := funext fun x => rfl
          inv_hom_id' := funext fun f => funext fun y => PUnit.casesOn y rfl })
      fun Œ± Œ≤ f => rfl)
    (Iso.symm <|
      NatIso.ofComponents (fun S => equivYoneda' S) fun S‚ÇÅ S‚ÇÇ f =>
        SheafOfTypes.Hom.ext _ _ <|
          NatTrans.ext _ _ <|
            funext fun Œ± => funext fun s => funext fun x => eval_app S‚ÇÅ S‚ÇÇ f (unop Œ±) s x)
#align category_theory.type_equiv CategoryTheory.typeEquiv

theorem subcanonical_typesGrothendieckTopology : Sheaf.Subcanonical typesGrothendieckTopology.{u} :=
  Sheaf.Subcanonical.of_yoneda_isSheaf _ fun X => isSheaf_yoneda'
#align category_theory.subcanonical_types_grothendieck_topology CategoryTheory.subcanonical_typesGrothendieckTopology

theorem typesGrothendieckTopology_eq_canonical :
    typesGrothendieckTopology.{u} = Sheaf.canonicalTopology (Type u) :=
  le_antisymm subcanonical_typesGrothendieckTopology <|
    sInf_le
      ‚ü®yoneda.obj (ULift Bool), ‚ü®_, rfl‚ü©,
        GrothendieckTopology.ext <|
          funext fun Œ± =>
            Set.ext fun S =>
              ‚ü®fun hs x =>
                by_contradiction fun hsx =>
                  have :
                    (fun _ => ULift.up true : (yoneda.obj (ULift Bool)).obj (op PUnit)) = fun _ =>
                      ULift.up false :=
                    (hs PUnit fun _ => x).IsSeparatedFor.ext fun Œ≤ f hf =>
                      funext fun y => hsx.elim <| S.2 hf fun _ => y
                  Bool.noConfusion <| ULift.up.inj <| (congr_fun this PUnit.unit : _),
                fun hs Œ≤ f => isSheaf_yoneda' _ fun y => hs _‚ü©‚ü©
#align category_theory.types_grothendieck_topology_eq_canonical CategoryTheory.typesGrothendieckTopology_eq_canonical

end CategoryTheory

