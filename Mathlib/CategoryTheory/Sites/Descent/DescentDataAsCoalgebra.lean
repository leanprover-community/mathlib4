/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Sites.Descent.DescentDataDoublePrime
import Mathlib.CategoryTheory.Bicategory.Adjunction.Adj
import Mathlib.CategoryTheory.Monad.Adjunction
import Mathlib.CategoryTheory.Bicategory.Adjunction.BaseChange

/-!
# Descent data as coalgebras...

-/

namespace CategoryTheory

open Opposite Limits Bicategory

namespace Pseudofunctor

variable {C : Type*} [Category C] (F : Pseudofunctor (LocallyDiscrete C·µí·µñ) (Adj Cat))

namespace LocallyDiscreteToAdjCat

set_option quotPrecheck false in
scoped notation g:80 " _* " M:81 => ((_ : Pseudofunctor _ (Adj Cat)).map
  (Quiver.Hom.op g).toLoc).r.obj M

set_option quotPrecheck false in
scoped notation g:80 " ^* " M:81 => ((_ : Pseudofunctor _ (Adj Cat)).map
  (Quiver.Hom.op g).toLoc).l.obj M

end LocallyDiscreteToAdjCat

open LocallyDiscreteToAdjCat

@[ext]
structure DescentDataAsCoalgebra {Œπ : Type*} {S : C} {X : Œπ ‚Üí C} (f : ‚àÄ i, X i ‚ü∂ S) where
  obj (i : Œπ) : (F.obj (.mk (op (X i)))).obj
  hom (i‚ÇÅ i‚ÇÇ : Œπ) : obj i‚ÇÅ ‚ü∂ (f i‚ÇÅ) ^* (f i‚ÇÇ) _* (obj i‚ÇÇ)
  counit (i : Œπ) : hom i i ‚â´ (F.map (f i).op.toLoc).adj.counit.app _ = ùüô _ := by aesop_cat
  coassoc (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ) :
    hom i‚ÇÅ i‚ÇÇ ‚â´ (F.map (f i‚ÇÅ).op.toLoc).l.map ((F.map (f i‚ÇÇ).op.toLoc).r.map (hom i‚ÇÇ i‚ÇÉ)) =
      hom i‚ÇÅ i‚ÇÉ ‚â´
        (F.map (f i‚ÇÅ).op.toLoc).l.map ((F.map (f i‚ÇÇ).op.toLoc).adj.unit.app _) := by aesop_cat

namespace DescentDataAsCoalgebra

attribute [reassoc (attr := simp)] counit coassoc
variable {F}

section

variable {Œπ : Type*} {S : C} {X : Œπ ‚Üí C} {f : ‚àÄ i, X i ‚ü∂ S}

@[ext]
structure Hom (D‚ÇÅ D‚ÇÇ : F.DescentDataAsCoalgebra f) where
  hom (i : Œπ) : D‚ÇÅ.obj i ‚ü∂ D‚ÇÇ.obj i
  comm (i‚ÇÅ i‚ÇÇ : Œπ) :
    D‚ÇÅ.hom i‚ÇÅ i‚ÇÇ ‚â´
      (F.map (f i‚ÇÅ).op.toLoc).l.map ((F.map (f i‚ÇÇ).op.toLoc).r.map (hom i‚ÇÇ)) =
    hom i‚ÇÅ ‚â´ D‚ÇÇ.hom i‚ÇÅ i‚ÇÇ := by aesop_cat

attribute [reassoc (attr := simp)] Hom.comm

@[simps]
def Hom.id (D : F.DescentDataAsCoalgebra f) : Hom D D where
  hom _ := ùüô _

@[simps]
def Hom.comp {D‚ÇÅ D‚ÇÇ D‚ÇÉ : F.DescentDataAsCoalgebra f} (œÜ : Hom D‚ÇÅ D‚ÇÇ) (œÜ' : Hom D‚ÇÇ D‚ÇÉ) :
    Hom D‚ÇÅ D‚ÇÉ where
  hom i := œÜ.hom i ‚â´ œÜ'.hom i

instance : Category (F.DescentDataAsCoalgebra f) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

@[ext]
lemma hom_ext {D‚ÇÅ D‚ÇÇ : F.DescentDataAsCoalgebra f} {œÜ œÜ' : D‚ÇÅ ‚ü∂ D‚ÇÇ}
    (h : ‚àÄ i, œÜ.hom i = œÜ'.hom i): œÜ = œÜ' :=
  Hom.ext (funext h)

@[simp]
lemma id_hom (D : F.DescentDataAsCoalgebra f) (i : Œπ) :
    Hom.hom (ùüô D) i = ùüô _ := rfl

@[reassoc, simp]
lemma comp_hom {D‚ÇÅ D‚ÇÇ D‚ÇÉ : F.DescentDataAsCoalgebra f} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (œÜ' : D‚ÇÇ ‚ü∂ D‚ÇÉ) (i : Œπ) :
    (œÜ ‚â´ œÜ').hom i = œÜ.hom i ‚â´ œÜ'.hom i := rfl

@[simps]
def isoMk {D‚ÇÅ D‚ÇÇ : F.DescentDataAsCoalgebra f} (e : ‚àÄ (i : Œπ), D‚ÇÅ.obj i ‚âÖ D‚ÇÇ.obj i)
    (comm : ‚àÄ (i‚ÇÅ i‚ÇÇ : Œπ), D‚ÇÅ.hom i‚ÇÅ i‚ÇÇ ‚â´
      (F.map (f i‚ÇÅ).op.toLoc).l.map ((F.map (f i‚ÇÇ).op.toLoc).r.map (e i‚ÇÇ).hom) =
      (e i‚ÇÅ).hom ‚â´ D‚ÇÇ.hom i‚ÇÅ i‚ÇÇ := by aesop_cat) :
    D‚ÇÅ ‚âÖ D‚ÇÇ where
  hom.hom i := (e i).hom
  hom.comm := comm
  inv.hom i := (e i).inv
  inv.comm i‚ÇÅ i‚ÇÇ := by
    rw [‚Üê cancel_epi (e i‚ÇÅ).hom, ‚Üê reassoc_of% (comm i‚ÇÅ i‚ÇÇ), ‚Üê Functor.map_comp, ‚Üê Functor.map_comp]
    simp

end

section Unit

variable {X S : C} {f : X ‚ü∂ S}

@[simps]
def toCoalgebra (D : F.DescentDataAsCoalgebra (fun (_ : Unit) ‚Ü¶ f)) :
    (F.map f.op.toLoc).adj.toCategory.toComonad.Coalgebra where
  A := D.obj .unit
  a := D.hom .unit .unit

@[simps]
def ofCoalgebra (A : (F.map f.op.toLoc).adj.toCategory.toComonad.Coalgebra) :
    F.DescentDataAsCoalgebra (fun (_ : Unit) ‚Ü¶ f) where
  obj _ := A.A
  hom _ _ := A.a
  counit _ := A.counit
  coassoc _ _ _ := A.coassoc.symm

variable (F f)

@[simps]
def toCoalgebraFunctor :
    F.DescentDataAsCoalgebra (fun (_ : Unit) ‚Ü¶ f) ‚•§
    (F.map f.op.toLoc).adj.toCategory.toComonad.Coalgebra where
  obj D := D.toCoalgebra
  map œÜ := { f := œÜ.hom .unit }

@[simps]
def fromCoalgebraFunctor :
    (F.map f.op.toLoc).adj.toCategory.toComonad.Coalgebra ‚•§
      F.DescentDataAsCoalgebra (fun (_ : Unit) ‚Ü¶ f) where
  obj A := ofCoalgebra A
  map œÜ :=
    { hom _ := œÜ.f
      comm _ _ := œÜ.h }

@[simps]
def coalgebraEquivalence :
    F.DescentDataAsCoalgebra (fun (_ : Unit) ‚Ü¶ f) ‚âå
    (F.map f.op.toLoc).adj.toCategory.toComonad.Coalgebra where
  functor := toCoalgebraFunctor F f
  inverse := fromCoalgebraFunctor F f
  unitIso := Iso.refl _
  counitIso := Iso.refl _

end Unit

variable (F) {Œπ : Type*} {S : C} {X : Œπ ‚Üí C} {f : ‚àÄ i, X i ‚ü∂ S}
  (sq : ‚àÄ i j, ChosenPullback (f i) (f j))
  (sq‚ÇÉ : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ), ChosenPullback‚ÇÉ (sq i‚ÇÅ i‚ÇÇ) (sq i‚ÇÇ i‚ÇÉ) (sq i‚ÇÅ i‚ÇÉ))

section

variable {F}

variable (A : F.DescentDataAsCoalgebra f)

open DescentData''

variable [‚àÄ i‚ÇÅ i‚ÇÇ, IsIso (F.baseChange (sq i‚ÇÅ i‚ÇÇ).isPullback.toCommSq.flip.op.toLoc)]
  [‚àÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ, IsIso (F.baseChange (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).isPullback‚ÇÇ.toCommSq.flip.op.toLoc)]

@[simps]
noncomputable
def toDescentDataAsCoalgebra : F.DescentData'' sq sq‚ÇÉ ‚•§ F.DescentDataAsCoalgebra f where
  obj D :=
    { obj := D.obj
      hom := dataEquivCoalgebra D.hom
      counit i := by
        obtain ‚ü®Œ¥‚ü© := inferInstanceAs (Nonempty (sq i i).Diagonal)
        rw [‚Üê hom_self_iff_dataEquivCoalgebra _ Œ¥]
        exact D.hom_self i Œ¥
      coassoc i‚ÇÅ i‚ÇÇ i‚ÇÉ := by
        rw [‚Üê hom_comp_iff_dataEquivCoalgebra sq‚ÇÉ]
        exact D.hom_comp i‚ÇÅ i‚ÇÇ i‚ÇÉ }
  map {D‚ÇÅ D‚ÇÇ} g :=
    { hom := g.hom
      comm i‚ÇÅ i‚ÇÇ := by
        rw [‚Üê hom_comm_iff_dataEquivCoalgebra]
        exact g.comm i‚ÇÅ i‚ÇÇ }

set_option maxHeartbeats 400000 in
-- TODO: automation is slow here
@[simps]
noncomputable
def fromDescentDataAsCoalgebra : F.DescentDataAsCoalgebra f ‚•§ F.DescentData'' sq sq‚ÇÉ where
  obj D :=
    { obj := D.obj
      hom := dataEquivCoalgebra.symm D.hom
      hom_self i Œ¥ := by
        rw [hom_self_iff_dataEquivCoalgebra _ Œ¥]
        simp
      hom_comp i‚ÇÅ i‚ÇÇ i‚ÇÉ := by
        rw [hom_comp_iff_dataEquivCoalgebra sq‚ÇÉ]
        simp }
  map {D‚ÇÅ D‚ÇÇ} g :=
    { hom := g.hom
      comm i‚ÇÅ i‚ÇÇ := by
        rw [hom_comm_iff_dataEquivCoalgebra]
        simp }

noncomputable
def equivDescentData'' : F.DescentDataAsCoalgebra f ‚âå F.DescentData'' sq sq‚ÇÉ where
  functor := fromDescentDataAsCoalgebra sq sq‚ÇÉ
  inverse := toDescentDataAsCoalgebra sq sq‚ÇÉ
  unitIso := NatIso.ofComponents
    (fun D ‚Ü¶ isoMk (fun i ‚Ü¶ Iso.refl _)
    (fun i‚ÇÅ i‚ÇÇ ‚Ü¶ by simp [fromDescentDataAsCoalgebra]))
  counitIso := NatIso.ofComponents
    (fun D ‚Ü¶ DescentData''.isoMk (fun i ‚Ü¶ Iso.refl _)
    (fun i‚ÇÅ i‚ÇÇ ‚Ü¶ by simp [toDescentDataAsCoalgebra]))

end

noncomputable
def descentData'Equivalence [‚àÄ i‚ÇÅ i‚ÇÇ, IsIso (F.baseChange (sq i‚ÇÅ i‚ÇÇ).commSq.flip.op.toLoc)]
    [‚àÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ, IsIso (F.baseChange (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).isPullback‚ÇÇ.toCommSq.flip.op.toLoc)] :
    F.DescentDataAsCoalgebra f ‚âå (F.comp Adj.forget‚ÇÅ).DescentData' sq sq‚ÇÉ :=
  (equivDescentData'' sq sq‚ÇÉ).trans (DescentData''.equivDescentData' sq‚ÇÉ)

end DescentDataAsCoalgebra

namespace DescentData'

variable {X S : C} {f : X ‚ü∂ S} (sq : ChosenPullback f f) (sq‚ÇÉ : ChosenPullback‚ÇÉ sq sq sq)

noncomputable def equivalenceOfComonadicLeftAdjoint [IsIso (F.baseChange sq.commSq.flip.op.toLoc)]
    [IsIso (F.baseChange sq‚ÇÉ.isPullback‚ÇÇ.toCommSq.flip.op.toLoc)]
    [(Comonad.comparison (F.map f.op.toLoc).adj.toCategory).IsEquivalence] :
    (F.obj (.mk (op S))).obj ‚âå
      (F.comp Adj.forget‚ÇÅ).DescentData' (fun (_ : Unit) _ ‚Ü¶ sq) (fun _ _ _ ‚Ü¶ sq‚ÇÉ) :=
  (Comonad.comparison (F.map f.op.toLoc).adj.toCategory).asEquivalence.trans
    ((DescentDataAsCoalgebra.coalgebraEquivalence _ _).symm.trans
      (DescentDataAsCoalgebra.descentData'Equivalence _ _ _))

end DescentData'

namespace DescentData

variable {X S : C} (f : X ‚ü∂ S) (sq : ChosenPullback f f) (sq‚ÇÉ : ChosenPullback‚ÇÉ sq sq sq)

noncomputable def equivalenceOfComonadicLeftAdjoint [IsIso (F.baseChange sq.commSq.flip.op.toLoc)]
    [IsIso (F.baseChange sq‚ÇÉ.isPullback‚ÇÇ.toCommSq.flip.op.toLoc)]
    [(Comonad.comparison (F.map f.op.toLoc).adj.toCategory).IsEquivalence] :
    (F.obj (.mk (op S))).obj ‚âå
      (F.comp Adj.forget‚ÇÅ).DescentData (fun (_ : Unit) ‚Ü¶ f) :=
  (DescentData'.equivalenceOfComonadicLeftAdjoint F sq sq‚ÇÉ).trans
    (DescentData'.descentDataEquivalence (F.comp Adj.forget‚ÇÅ) _ _)

end DescentData

end Pseudofunctor

end CategoryTheory
