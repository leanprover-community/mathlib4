/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Bicategory.Functor.Cat
import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete
import Mathlib.CategoryTheory.Sites.Sheaf
import Mathlib.CategoryTheory.Sites.Over

/-!
# Descent of morphisms

Let `C` be a category and `F : Pseudofunctor (LocallyDiscrete C·µí·µñ) Cat`.
Given `S : C`, and objects `M` and `N` in `F.obj (.mk (op S))`,
we define a presheaf of types `F.presheafHom M N` on the category `Over S`:
its sections on a object `T : Over S` corresponding to a morphism `p : X ‚ü∂ S`
are the type of morphisms `p^* M ‚ü∂ p^* N`. We shall say that
`F` satisfies the descent of morphisms for a Grothendieck topology `J`
if these presheaves are all sheaves (typeclass `F.HasDescentForMorphisms J`).

## TODO

* Relate this notion to the property that for any covering family `f i : X i ‚ü∂ S`
for `J`, the functor `F.obj S` to the category of objects in `F.obj (X i)` for all `i`
equipped with a descent datum is fully faithful.
* Define a typeclass `HasEffectiveDescent` extending `HasDescentOfMorphisms`
by saying that the functors mentionned above are essentially surjective.

-/

universe v' v u' u

namespace CategoryTheory

open Opposite Bicategory

namespace Pseudofunctor

variable {C : Type u} [Category.{v} C] {F : Pseudofunctor (LocallyDiscrete C·µí·µñ) Cat.{v', u'}}

namespace LocallyDiscreteOpToCat

def pullHom ‚¶ÉX‚ÇÅ X‚ÇÇ : C‚¶Ñ ‚¶ÉM‚ÇÅ : F.obj (.mk (op X‚ÇÅ))‚¶Ñ ‚¶ÉM‚ÇÇ : F.obj (.mk (op X‚ÇÇ))‚¶Ñ
    ‚¶ÉY : C‚¶Ñ ‚¶Éf‚ÇÅ : Y ‚ü∂ X‚ÇÅ‚¶Ñ ‚¶Éf‚ÇÇ : Y ‚ü∂ X‚ÇÇ‚¶Ñ
    (œÜ : (F.map f‚ÇÅ.op.toLoc).obj M‚ÇÅ ‚ü∂ (F.map f‚ÇÇ.op.toLoc).obj M‚ÇÇ) ‚¶ÉY' : C‚¶Ñ (g : Y' ‚ü∂ Y)
    (gf‚ÇÅ : Y' ‚ü∂ X‚ÇÅ) (gf‚ÇÇ : Y' ‚ü∂ X‚ÇÇ) (hgf‚ÇÅ : g ‚â´ f‚ÇÅ = gf‚ÇÅ := by aesop_cat)
    (hgf‚ÇÇ : g ‚â´ f‚ÇÇ = gf‚ÇÇ := by aesop_cat) :
    (F.map gf‚ÇÅ.op.toLoc).obj M‚ÇÅ ‚ü∂ (F.map gf‚ÇÇ.op.toLoc).obj M‚ÇÇ :=
  (F.mapComp' f‚ÇÅ.op.toLoc g.op.toLoc gf‚ÇÅ.op.toLoc (by aesop)).hom.app _ ‚â´
    (F.map g.op.toLoc).map œÜ ‚â´
      (F.mapComp' f‚ÇÇ.op.toLoc g.op.toLoc gf‚ÇÇ.op.toLoc (by aesop)).inv.app _

@[reassoc]
lemma map_eq_pullHom
    ‚¶ÉX‚ÇÅ X‚ÇÇ : C‚¶Ñ ‚¶ÉM‚ÇÅ : F.obj (.mk (op X‚ÇÅ))‚¶Ñ ‚¶ÉM‚ÇÇ : F.obj (.mk (op X‚ÇÇ))‚¶Ñ
    ‚¶ÉY : C‚¶Ñ ‚¶Éf‚ÇÅ : Y ‚ü∂ X‚ÇÅ‚¶Ñ ‚¶Éf‚ÇÇ : Y ‚ü∂ X‚ÇÇ‚¶Ñ
    (œÜ : (F.map f‚ÇÅ.op.toLoc).obj M‚ÇÅ ‚ü∂ (F.map f‚ÇÇ.op.toLoc).obj M‚ÇÇ) ‚¶ÉY' : C‚¶Ñ (g : Y' ‚ü∂ Y)
    (gf‚ÇÅ : Y' ‚ü∂ X‚ÇÅ) (gf‚ÇÇ : Y' ‚ü∂ X‚ÇÇ) (hgf‚ÇÅ : g ‚â´ f‚ÇÅ = gf‚ÇÅ)
    (hgf‚ÇÇ : g ‚â´ f‚ÇÇ = gf‚ÇÇ) :
    (F.map g.op.toLoc).map œÜ =
    (F.mapComp' f‚ÇÅ.op.toLoc g.op.toLoc gf‚ÇÅ.op.toLoc (by aesop)).inv.app _ ‚â´
    pullHom œÜ g gf‚ÇÅ gf‚ÇÇ hgf‚ÇÅ hgf‚ÇÇ ‚â´
    (F.mapComp' f‚ÇÇ.op.toLoc g.op.toLoc gf‚ÇÇ.op.toLoc (by aesop)).hom.app _ := by
  simp [pullHom]

@[simp]
lemma pullHom_id ‚¶ÉX‚ÇÅ X‚ÇÇ : C‚¶Ñ ‚¶ÉM‚ÇÅ : F.obj (.mk (op X‚ÇÅ))‚¶Ñ ‚¶ÉM‚ÇÇ : F.obj (.mk (op X‚ÇÇ))‚¶Ñ
    ‚¶ÉY : C‚¶Ñ ‚¶Éf‚ÇÅ : Y ‚ü∂ X‚ÇÅ‚¶Ñ ‚¶Éf‚ÇÇ : Y ‚ü∂ X‚ÇÇ‚¶Ñ
    (œÜ : (F.map f‚ÇÅ.op.toLoc).obj M‚ÇÅ ‚ü∂ (F.map f‚ÇÇ.op.toLoc).obj M‚ÇÇ) :
      pullHom œÜ (ùüô _) f‚ÇÅ f‚ÇÇ = œÜ := by
  simp [pullHom, mapComp'_comp_id_hom_app, mapComp'_comp_id_inv_app]

@[simp]
lemma pullHom_pullHom
    ‚¶ÉX‚ÇÅ X‚ÇÇ : C‚¶Ñ ‚¶ÉM‚ÇÅ : F.obj (.mk (op X‚ÇÅ))‚¶Ñ ‚¶ÉM‚ÇÇ : F.obj (.mk (op X‚ÇÇ))‚¶Ñ
    ‚¶ÉY : C‚¶Ñ ‚¶Éf‚ÇÅ : Y ‚ü∂ X‚ÇÅ‚¶Ñ ‚¶Éf‚ÇÇ : Y ‚ü∂ X‚ÇÇ‚¶Ñ
    (œÜ : (F.map f‚ÇÅ.op.toLoc).obj M‚ÇÅ ‚ü∂ (F.map f‚ÇÇ.op.toLoc).obj M‚ÇÇ) ‚¶ÉY' : C‚¶Ñ (g : Y' ‚ü∂ Y)
    (gf‚ÇÅ : Y' ‚ü∂ X‚ÇÅ) (gf‚ÇÇ : Y' ‚ü∂ X‚ÇÇ) ‚¶ÉY'' : C‚¶Ñ
    (g' : Y'' ‚ü∂ Y') (g'f‚ÇÅ : Y'' ‚ü∂ X‚ÇÅ) (g'f‚ÇÇ : Y'' ‚ü∂ X‚ÇÇ)
    (hgf‚ÇÅ : g ‚â´ f‚ÇÅ = gf‚ÇÅ := by aesop_cat)
    (hgf‚ÇÇ : g ‚â´ f‚ÇÇ = gf‚ÇÇ := by aesop_cat)
    (hg'f‚ÇÅ : g' ‚â´ gf‚ÇÅ = g'f‚ÇÅ := by aesop_cat)
    (hg'f‚ÇÇ : g' ‚â´ gf‚ÇÇ = g'f‚ÇÇ := by aesop_cat) :
    pullHom (pullHom œÜ g gf‚ÇÅ gf‚ÇÇ hgf‚ÇÅ hgf‚ÇÇ) g' g'f‚ÇÅ g'f‚ÇÇ hg'f‚ÇÅ hg'f‚ÇÇ =
      pullHom œÜ (g' ‚â´ g) g'f‚ÇÅ g'f‚ÇÇ := by
  dsimp [pullHom]
  rw [Functor.map_comp_assoc, Functor.map_comp_assoc,
    F.map_map_mapComp'_inv_app_comp_mapComp'_inv_app _ _ _ _ _ _ _ rfl (by aesop),
    F.mapComp'_hom_app_comp_map_map_mapComp'_hom_app_assoc _ _ _ _ _ _ _ rfl (by aesop),
    mapComp'_inv_naturality_assoc, Iso.hom_inv_id_app_assoc]

end LocallyDiscreteOpToCat

open LocallyDiscreteOpToCat

variable (F) {S : C} (M N : F.obj (.mk (op S)))
/-- If `F` is a pseudofunctor from `C·µí·µñ` to `Cat`, and `M` and `N` are objects in
`F.obj (.mk (op S))`, this is the presheaf of morphisms from `M` to `N`: it sends
an object `T : Over S` corresponding to a morphism `p : X ‚ü∂ S` to the type
of morphisms $$p^* M ‚ü∂ p^* N$$. -/
@[simps]
def presheafHom : (Over S)·µí·µñ ‚•§ Type v' where
  obj T := (F.map (.toLoc T.unop.hom.op)).obj M ‚ü∂ (F.map (.toLoc T.unop.hom.op)).obj N
  map {T‚ÇÅ T‚ÇÇ} p f := pullHom f p.unop.left T‚ÇÇ.unop.hom T‚ÇÇ.unop.hom

/-- Compatiblity isomorphism of `Pseudofunctor.presheafHom` with the "restrictions". -/
def overMapCompPresheafHomIso {S' : C} (q : S' ‚ü∂ S) :
    (Over.map q).op ‚ãô F.presheafHom M N ‚âÖ
      F.presheafHom ((F.map (.toLoc q.op)).obj M) ((F.map (.toLoc q.op)).obj N) :=
  NatIso.ofComponents (fun T ‚Ü¶ Equiv.toIso (by
    letI e := F.mapComp' (.toLoc q.op) (.toLoc T.unop.hom.op)
      (.toLoc ((Over.map q).obj T.unop).hom.op)
    exact (Iso.homFromEquiv (e.app M)).trans (Iso.homToEquiv (e.app N)))) (by
      rintro ‚ü®T‚ÇÅ‚ü© ‚ü®T‚ÇÇ‚ü© ‚ü®f‚ü©
      ext g
      dsimp [pullHom]
      simp only [Category.assoc, Functor.map_comp]
      rw [F.mapComp'_inv_app_comp_mapComp'_hom_app_assoc _ _ _ _ _ _ rfl _ rfl,
        F.mapComp'_inv_app_comp_mapComp'_hom_app' _ _ _ _ _ _ _ _ rfl])

/-- The property that a pseudofunctor `F : Pseudofunctor (LocallyDiscrete C·µí·µñ) Cat`
satisfies the descent property for morphisms. -/
class IsPrestack (J : GrothendieckTopology C) : Prop where
  isSheaf {S : C} (M N : F.obj (.mk (op S))) :
    Presheaf.IsSheaf (J.over S) (F.presheafHom M N)

variable (J : GrothendieckTopology C) [F.IsPrestack J]

/-- If `F` is a pseudofunctor from `C·µí·µñ` to `Cat` which satisfies the descent
of morphisms for a Grothendieck topology `J`, and `M` and `N` are to objects in
`F.obj (.mk (op S))`, this is the esheaf of morphisms from `M` to `N`: it sends
an object `T : Over S` corresponding to a morphism `p : X ‚ü∂ S` to the type
of morphisms $$p^* M ‚ü∂ p^* N$$. -/
@[simps]
def sheafHom : Sheaf (J.over S) (Type v') where
  val := F.presheafHom M N
  cond := IsPrestack.isSheaf _ _

end Pseudofunctor

end CategoryTheory
