/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Christian Merten
-/
import Mathlib.CategoryTheory.Sites.Descent.IsPrestack

/-!
# Descent data

In this file, given a pseudofunctor `F` from `LocallyDiscrete C·µí·µñ` to `Cat`,
and a family of maps `f i : X i ‚ü∂ S` in the category `C`,
we define the category `F.DescentData f` of objects over the `X i`
equipped with a descent data relative to the morphisms `f i : X i ‚ü∂ S`.

## TODO (@joelriou, @chrisflav)
* Relate the prestack condition to the fully faithfullness of `Pseudofunctor.toDescentData`.
* Define stacks.
* Introduce multiple variants of `DescentData` (when `C` has pullbacks,
when `F` also has a covariant functoriality, etc.).

-/

universe t v' v u' u

namespace CategoryTheory

open Opposite

namespace Pseudofunctor

-- TODO: can we make grind do this?
/-- Tactic which does `simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp]` before applying `aesop`. -/
macro "aesoptoloc" : tactic =>
  `(tactic|(simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp] <;> aesop))

open LocallyDiscreteOpToCat

variable {C : Type u} [Category.{v} C] (F : Pseudofunctor (LocallyDiscrete C·µí·µñ) Cat.{v', u'})
  {Œπ : Type t} {S : C} {X : Œπ ‚Üí C} (f : ‚àÄ i, X i ‚ü∂ S)

/-- Given a pseudofunctor `F` from `LocallyDiscrete C·µí·µñ` to `Cat`, and a family of
morphisms `f i : X i ‚ü∂ S`, the objects of the category of descent data for
the `X i` relative to the morphisms `f i` consists in families of
objects `obj i` in `F.obj (.mk (op (X i)))` together with morphisms `hom`
between the pullbacks of `obj i‚ÇÅ` and `obj i‚ÇÇ` over any object `Y` which maps
to both `X i‚ÇÅ` and `X i‚ÇÇ` (in a way that is compatible with the morphisms to `S`).
The compatibilities these morphisms satisfy imply that the morphisms `hom` are isomorphisms. -/
structure DescentData where
  /-- The objects over `X i` for all `i` -/
  obj (i : Œπ) : F.obj (.mk (op (X i)))
  /-- The compatibility (iso)morphisms after pullbacks. -/
  hom ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ)
    (_hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q := by cat_disch) (_hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q := by cat_disch) :
      (F.map f‚ÇÅ.op.toLoc).obj (obj i‚ÇÅ) ‚ü∂ (F.map f‚ÇÇ.op.toLoc).obj (obj i‚ÇÇ)
  pullHom_hom ‚¶ÉY' Y : C‚¶Ñ (g : Y' ‚ü∂ Y) (q : Y ‚ü∂ S) (q' : Y' ‚ü∂ S) (hq : g ‚â´ q = q')
    ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q)
    (gf‚ÇÅ : Y' ‚ü∂ X i‚ÇÅ) (gf‚ÇÇ : Y' ‚ü∂ X i‚ÇÇ) (hgf‚ÇÅ : g ‚â´ f‚ÇÅ = gf‚ÇÅ) (hgf‚ÇÇ : g ‚â´ f‚ÇÇ = gf‚ÇÇ) :
      pullHom (hom q f‚ÇÅ f‚ÇÇ) g gf‚ÇÅ gf‚ÇÇ = hom q' gf‚ÇÅ gf‚ÇÇ := by cat_disch
  hom_self ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi : Œπ‚¶Ñ (g : Y ‚ü∂ X i) (_ : g ‚â´ f i = q) :
      hom q g g = ùüô _ := by cat_disch
  hom_comp ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (f‚ÇÉ : Y ‚ü∂ X i‚ÇÉ)
      (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q) (hf‚ÇÉ : f‚ÇÉ ‚â´ f i‚ÇÉ = q) :
      hom q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ ‚â´ hom q f‚ÇÇ f‚ÇÉ hf‚ÇÇ hf‚ÇÉ = hom q f‚ÇÅ f‚ÇÉ hf‚ÇÅ hf‚ÇÉ := by cat_disch

namespace DescentData

variable {F f} (D : F.DescentData f)

attribute [local simp] hom_self pullHom_hom
attribute [reassoc (attr := simp)] hom_comp

/-- The morphisms `DescentData.hom`, as isomorphisms. -/
@[simps]
def iso ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ)
    (_hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q := by cat_disch) (_hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q := by cat_disch) :
    (F.map f‚ÇÅ.op.toLoc).obj (D.obj i‚ÇÅ) ‚âÖ (F.map f‚ÇÇ.op.toLoc).obj (D.obj i‚ÇÇ) where
  hom := D.hom q f‚ÇÅ f‚ÇÇ
  inv := D.hom q f‚ÇÇ f‚ÇÅ

instance {Y : C} (q : Y ‚ü∂ S) {i‚ÇÅ i‚ÇÇ : Œπ} (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ)
    (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q) :
    IsIso (D.hom q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ) :=
  (D.iso q f‚ÇÅ f‚ÇÇ).isIso_hom

/-- The type of morphisms in the category `Pseudofunctor.DescentData`. -/
@[ext]
structure Hom (D‚ÇÅ D‚ÇÇ : F.DescentData f) where
  /-- The morphisms between the `obj` fields of descent data. -/
  hom (i : Œπ) : D‚ÇÅ.obj i ‚ü∂ D‚ÇÇ.obj i
  comm ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ)
    (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q) :
    (F.map f‚ÇÅ.op.toLoc).map (hom i‚ÇÅ) ‚â´ D‚ÇÇ.hom q f‚ÇÅ f‚ÇÇ =
        D‚ÇÅ.hom q f‚ÇÅ f‚ÇÇ ‚â´ (F.map f‚ÇÇ.op.toLoc).map (hom i‚ÇÇ) := by cat_disch

attribute [reassoc (attr := local simp)] Hom.comm

instance : Category (F.DescentData f) where
  Hom := Hom
  id D := { hom _ := ùüô _}
  comp œÜ œÜ' := { hom i := œÜ.hom i ‚â´ œÜ'.hom i }

@[ext]
lemma hom_ext {D‚ÇÅ D‚ÇÇ : F.DescentData f} {œÜ œÜ' : D‚ÇÅ ‚ü∂ D‚ÇÇ}
    (h : ‚àÄ i, œÜ.hom i = œÜ'.hom i) : œÜ = œÜ' :=
  Hom.ext (funext h)

@[simp]
lemma id_hom (D : F.DescentData f) (i : Œπ) : Hom.hom (ùüô D) i = ùüô _ := rfl

@[simp, reassoc]
lemma comp_hom {D‚ÇÅ D‚ÇÇ D‚ÇÉ : F.DescentData f} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (œÜ' : D‚ÇÇ ‚ü∂ D‚ÇÉ) (i : Œπ) :
    (œÜ ‚â´ œÜ').hom i = œÜ.hom i ‚â´ œÜ'.hom i := rfl

/-- Given a family of morphisms `f : X i ‚ü∂ S`, and `M : F.obj (.mk (op S))`,
this is the object in `F.DescentData f` that is obtained by pulling back `M`
over the `X i`. -/
@[simps]
def ofObj (M : F.obj (.mk (op S))) : F.DescentData f where
  obj i := (F.map (f i).op.toLoc).obj M
  hom Y q i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ :=
    (F.mapComp' (f i‚ÇÅ).op.toLoc f‚ÇÅ.op.toLoc q.op.toLoc (by aesoptoloc)).inv.app _ ‚â´
      (F.mapComp' (f i‚ÇÇ).op.toLoc f‚ÇÇ.op.toLoc q.op.toLoc (by aesoptoloc)).hom.app _
  pullHom_hom Y' Y g q q' hq i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ gf‚ÇÅ gf‚ÇÇ hgf‚ÇÅ hgf‚ÇÇ := by
    simp only [pullHom, Functor.map_comp, Category.assoc,
      F.mapComp'‚ÇÄ‚ÇÅ‚ÇÉ_inv_app (f i‚ÇÅ).op.toLoc f‚ÇÅ.op.toLoc g.op.toLoc q.op.toLoc
        gf‚ÇÅ.op.toLoc q'.op.toLoc (by aesoptoloc) (by aesoptoloc) (by aesoptoloc),
      F.mapComp'‚ÇÄ‚ÇÇ‚ÇÉ_inv_comp_mapComp'‚ÇÄ‚ÇÅ‚ÇÉ_hom_app (f i‚ÇÇ).op.toLoc f‚ÇÇ.op.toLoc g.op.toLoc
      q.op.toLoc gf‚ÇÇ.op.toLoc q'.op.toLoc (by aesoptoloc) (by aesoptoloc) (by aesoptoloc)]

/-- Constructor for isomorphisms in `Pseudofunctor.DescentData`. -/
@[simps]
def isoMk {D‚ÇÅ D‚ÇÇ : F.DescentData f} (e : ‚àÄ (i : Œπ), D‚ÇÅ.obj i ‚âÖ D‚ÇÇ.obj i)
    (comm : ‚àÄ ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ)
    (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q),
    (F.map f‚ÇÅ.op.toLoc).map (e i‚ÇÅ).hom ‚â´ D‚ÇÇ.hom q f‚ÇÅ f‚ÇÇ =
        D‚ÇÅ.hom q f‚ÇÅ f‚ÇÇ ‚â´ (F.map f‚ÇÇ.op.toLoc).map (e i‚ÇÇ).hom := by cat_disch) : D‚ÇÅ ‚âÖ D‚ÇÇ where
  hom :=
    { hom i := (e i).hom
      comm := comm }
  inv :=
    { hom i := (e i).inv
      comm Y q i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ := by
        rw [‚Üê cancel_mono ((F.map f‚ÇÇ.op.toLoc).map (e i‚ÇÇ).hom), Category.assoc,
          Category.assoc, Iso.map_inv_hom_id, Category.comp_id,
          ‚Üê cancel_epi ((F.map f‚ÇÅ.op.toLoc).map (e i‚ÇÅ).hom),
          Iso.map_hom_inv_id_assoc, comm q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ] }

end DescentData

/-- The functor `F.obj (.mk (op S)) ‚•§ F.DescentData f`. -/
def toDescentData : F.obj (.mk (op S)) ‚•§ F.DescentData f where
  obj M := .ofObj M
  map {M M'} œÜ := { hom i := (F.map (f i).op.toLoc).map œÜ }

end Pseudofunctor

end CategoryTheory
