/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Christian Merten
-/
import Mathlib.CategoryTheory.Sites.Descent.IsPrestack

/-!
# Descent data

In this file, given a pseudofunctor `F` from `LocallyDiscrete C·µí·µñ` to `Cat`,
and a family of maps `f i : X i ‚ü∂ S` in the category `C`,
we define the category `F.DescentData f` of objects over the `X i`
equipped with a descent data relative to the morphisms `f i : X i ‚ü∂ S`.

We show that up to an equivalence, the category `F.DescentData f` is unchanged
when we replace `S` by an isomorphic object, or the family `f i : X i ‚ü∂ S`
by another family which generates the same sieve (see `Pseudofunctor.pullFunctorEquivalence`).

## TODO (@joelriou, @chrisflav)
* Relate the prestack condition to the fully faithfullness of `Pseudofunctor.toDescentData`.
* Define stacks.
* Introduce multiple variants of `DescentData` (when `C` has pullbacks,
when `F` also has a covariant functoriality, etc.).

-/

universe t t' t'' v' v u' u

namespace CategoryTheory

open Opposite

namespace Pseudofunctor

-- TODO: can we make grind do this?
/-- Tactic which does `simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp]` before applying `aesop`. -/
macro "aesoptoloc" : tactic =>
  `(tactic|(simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp] <;> aesop))

open LocallyDiscreteOpToCat

variable {C : Type u} [Category.{v} C] (F : Pseudofunctor (LocallyDiscrete C·µí·µñ) Cat.{v', u'})
  {Œπ : Type t} {S : C} {X : Œπ ‚Üí C} (f : ‚àÄ i, X i ‚ü∂ S)

/-- Given a pseudofunctor `F` from `LocallyDiscrete C·µí·µñ` to `Cat`, and a family of
morphisms `f i : X i ‚ü∂ S`, the objects of the category of descent data for
the `X i` relative to the morphisms `f i` consists in families of
objects `obj i` in `F.obj (.mk (op (X i)))` together with morphisms `hom`
between the pullbacks of `obj i‚ÇÅ` and `obj i‚ÇÇ` over any object `Y` which maps
to both `X i‚ÇÅ` and `X i‚ÇÇ` (in a way that is compatible with the morphisms to `S`).
The compatibilities these morphisms satisfy imply that the morphisms `hom` are isomorphisms. -/
structure DescentData where
  /-- The objects over `X i` for all `i` -/
  obj (i : Œπ) : F.obj (.mk (op (X i)))
  /-- The compatibility (iso)morphisms after pullbacks. -/
  hom ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ)
    (_hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q := by cat_disch) (_hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q := by cat_disch) :
      (F.map f‚ÇÅ.op.toLoc).obj (obj i‚ÇÅ) ‚ü∂ (F.map f‚ÇÇ.op.toLoc).obj (obj i‚ÇÇ)
  pullHom_hom ‚¶ÉY' Y : C‚¶Ñ (g : Y' ‚ü∂ Y) (q : Y ‚ü∂ S) (q' : Y' ‚ü∂ S) (hq : g ‚â´ q = q')
    ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q)
    (gf‚ÇÅ : Y' ‚ü∂ X i‚ÇÅ) (gf‚ÇÇ : Y' ‚ü∂ X i‚ÇÇ) (hgf‚ÇÅ : g ‚â´ f‚ÇÅ = gf‚ÇÅ) (hgf‚ÇÇ : g ‚â´ f‚ÇÇ = gf‚ÇÇ) :
      pullHom (hom q f‚ÇÅ f‚ÇÇ) g gf‚ÇÅ gf‚ÇÇ = hom q' gf‚ÇÅ gf‚ÇÇ := by cat_disch
  hom_self ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi : Œπ‚¶Ñ (g : Y ‚ü∂ X i) (_ : g ‚â´ f i = q) :
      hom q g g = ùüô _ := by cat_disch
  hom_comp ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (f‚ÇÉ : Y ‚ü∂ X i‚ÇÉ)
      (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q) (hf‚ÇÉ : f‚ÇÉ ‚â´ f i‚ÇÉ = q) :
      hom q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ ‚â´ hom q f‚ÇÇ f‚ÇÉ hf‚ÇÇ hf‚ÇÉ = hom q f‚ÇÅ f‚ÇÉ hf‚ÇÅ hf‚ÇÉ := by cat_disch

namespace DescentData

variable {F f} (D : F.DescentData f)

attribute [local simp] hom_self pullHom_hom
attribute [reassoc (attr := simp)] hom_comp

/-- The morphisms `DescentData.hom`, as isomorphisms. -/
@[simps]
def iso ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ)
    (_hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q := by cat_disch) (_hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q := by cat_disch) :
    (F.map f‚ÇÅ.op.toLoc).obj (D.obj i‚ÇÅ) ‚âÖ (F.map f‚ÇÇ.op.toLoc).obj (D.obj i‚ÇÇ) where
  hom := D.hom q f‚ÇÅ f‚ÇÇ
  inv := D.hom q f‚ÇÇ f‚ÇÅ

instance {Y : C} (q : Y ‚ü∂ S) {i‚ÇÅ i‚ÇÇ : Œπ} (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ)
    (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q) :
    IsIso (D.hom q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ) :=
  (D.iso q f‚ÇÅ f‚ÇÇ).isIso_hom

/-- The type of morphisms in the category `Pseudofunctor.DescentData`. -/
@[ext]
structure Hom (D‚ÇÅ D‚ÇÇ : F.DescentData f) where
  /-- The morphisms between the `obj` fields of descent data. -/
  hom (i : Œπ) : D‚ÇÅ.obj i ‚ü∂ D‚ÇÇ.obj i
  comm ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ)
    (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q) :
    (F.map f‚ÇÅ.op.toLoc).map (hom i‚ÇÅ) ‚â´ D‚ÇÇ.hom q f‚ÇÅ f‚ÇÇ =
        D‚ÇÅ.hom q f‚ÇÅ f‚ÇÇ ‚â´ (F.map f‚ÇÇ.op.toLoc).map (hom i‚ÇÇ) := by cat_disch

attribute [reassoc (attr := local simp)] Hom.comm

instance : Category (F.DescentData f) where
  Hom := Hom
  id D := { hom _ := ùüô _}
  comp œÜ œÜ' := { hom i := œÜ.hom i ‚â´ œÜ'.hom i }

@[ext]
lemma hom_ext {D‚ÇÅ D‚ÇÇ : F.DescentData f} {œÜ œÜ' : D‚ÇÅ ‚ü∂ D‚ÇÇ}
    (h : ‚àÄ i, œÜ.hom i = œÜ'.hom i) : œÜ = œÜ' :=
  Hom.ext (funext h)

@[simp]
lemma id_hom (D : F.DescentData f) (i : Œπ) : Hom.hom (ùüô D) i = ùüô _ := rfl

@[simp, reassoc]
lemma comp_hom {D‚ÇÅ D‚ÇÇ D‚ÇÉ : F.DescentData f} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (œÜ' : D‚ÇÇ ‚ü∂ D‚ÇÉ) (i : Œπ) :
    (œÜ ‚â´ œÜ').hom i = œÜ.hom i ‚â´ œÜ'.hom i := rfl

/-- Given a family of morphisms `f : X i ‚ü∂ S`, and `M : F.obj (.mk (op S))`,
this is the object in `F.DescentData f` that is obtained by pulling back `M`
over the `X i`. -/
@[simps]
def ofObj (M : F.obj (.mk (op S))) : F.DescentData f where
  obj i := (F.map (f i).op.toLoc).obj M
  hom Y q i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ :=
    (F.mapComp' (f i‚ÇÅ).op.toLoc f‚ÇÅ.op.toLoc q.op.toLoc (by aesoptoloc)).inv.app _ ‚â´
      (F.mapComp' (f i‚ÇÇ).op.toLoc f‚ÇÇ.op.toLoc q.op.toLoc (by aesoptoloc)).hom.app _
  pullHom_hom Y' Y g q q' hq i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ gf‚ÇÅ gf‚ÇÇ hgf‚ÇÅ hgf‚ÇÇ := by
    simp only [pullHom, Functor.map_comp, Category.assoc,
      F.mapComp'‚ÇÄ‚ÇÅ‚ÇÉ_inv_app (f i‚ÇÅ).op.toLoc f‚ÇÅ.op.toLoc g.op.toLoc q.op.toLoc
        gf‚ÇÅ.op.toLoc q'.op.toLoc (by aesoptoloc) (by aesoptoloc) (by aesoptoloc),
      F.mapComp'‚ÇÄ‚ÇÇ‚ÇÉ_inv_comp_mapComp'‚ÇÄ‚ÇÅ‚ÇÉ_hom_app (f i‚ÇÇ).op.toLoc f‚ÇÇ.op.toLoc g.op.toLoc
      q.op.toLoc gf‚ÇÇ.op.toLoc q'.op.toLoc (by aesoptoloc) (by aesoptoloc) (by aesoptoloc)]

/-- Constructor for isomorphisms in `Pseudofunctor.DescentData`. -/
@[simps]
def isoMk {D‚ÇÅ D‚ÇÇ : F.DescentData f} (e : ‚àÄ (i : Œπ), D‚ÇÅ.obj i ‚âÖ D‚ÇÇ.obj i)
    (comm : ‚àÄ ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ)
    (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q),
    (F.map f‚ÇÅ.op.toLoc).map (e i‚ÇÅ).hom ‚â´ D‚ÇÇ.hom q f‚ÇÅ f‚ÇÇ =
        D‚ÇÅ.hom q f‚ÇÅ f‚ÇÇ ‚â´ (F.map f‚ÇÇ.op.toLoc).map (e i‚ÇÇ).hom := by cat_disch) : D‚ÇÅ ‚âÖ D‚ÇÇ where
  hom :=
    { hom i := (e i).hom
      comm := comm }
  inv :=
    { hom i := (e i).inv
      comm Y q i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ := by
        rw [‚Üê cancel_mono ((F.map f‚ÇÇ.op.toLoc).map (e i‚ÇÇ).hom), Category.assoc,
          Category.assoc, Iso.map_inv_hom_id, Category.comp_id,
          ‚Üê cancel_epi ((F.map f‚ÇÅ.op.toLoc).map (e i‚ÇÅ).hom),
          Iso.map_hom_inv_id_assoc, comm q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ] }

end DescentData

/-- The functor `F.obj (.mk (op S)) ‚•§ F.DescentData f`. -/
@[simps]
def toDescentData : F.obj (.mk (op S)) ‚•§ F.DescentData f where
  obj M := .ofObj M
  map {M M'} œÜ := { hom i := (F.map (f i).op.toLoc).map œÜ }

namespace DescentData

section

variable {F f} {S' : C} {p : S' ‚ü∂ S} {Œπ' : Type t'} {X' : Œπ' ‚Üí C} {f' : ‚àÄ j, X' j ‚ü∂ S'}
  {Œ± : Œπ' ‚Üí Œπ} {p' : ‚àÄ j, X' j ‚ü∂ X (Œ± j)} (w : ‚àÄ j, p' j ‚â´ f (Œ± j) = f' j ‚â´ p)

/-- Auxiliary definition for `pullFunctor`. -/
def pullFunctorObjHom (D : F.DescentData f)
    ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S') ‚¶Éj‚ÇÅ j‚ÇÇ : Œπ'‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X' j‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X' j‚ÇÇ)
    (hf‚ÇÅ : f‚ÇÅ ‚â´ f' j‚ÇÅ = q := by cat_disch) (hf‚ÇÇ : f‚ÇÇ ‚â´ f' j‚ÇÇ = q := by cat_disch) :
    (F.map f‚ÇÅ.op.toLoc).obj ((F.map (p' j‚ÇÅ).op.toLoc).obj (D.obj (Œ± j‚ÇÅ))) ‚ü∂
      (F.map f‚ÇÇ.op.toLoc).obj ((F.map (p' j‚ÇÇ).op.toLoc).obj (D.obj (Œ± j‚ÇÇ))) :=
  (F.mapComp (p' j‚ÇÅ).op.toLoc f‚ÇÅ.op.toLoc).inv.app _ ‚â´
    D.hom (q ‚â´ p) (f‚ÇÅ ‚â´ p' _) (f‚ÇÇ ‚â´ p' _) (by simp [w, reassoc_of% hf‚ÇÅ])
      (by simp [w, reassoc_of% hf‚ÇÇ]) ‚â´
    (F.mapComp (p' j‚ÇÇ).op.toLoc f‚ÇÇ.op.toLoc).hom.app _

@[reassoc]
lemma pullFunctorObjHom_eq (D : F.DescentData f)
    ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S') ‚¶Éj‚ÇÅ j‚ÇÇ : Œπ'‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X' j‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X' j‚ÇÇ)
    (q' : Y ‚ü∂ S) (f‚ÇÅ' : Y ‚ü∂ X (Œ± j‚ÇÅ)) (f‚ÇÇ' : Y ‚ü∂ X (Œ± j‚ÇÇ))
    (hf‚ÇÅ : f‚ÇÅ ‚â´ f' j‚ÇÅ = q := by cat_disch) (hf‚ÇÇ : f‚ÇÇ ‚â´ f' j‚ÇÇ = q := by cat_disch)
    (hq' : q ‚â´ p = q' := by cat_disch)
    (hf‚ÇÅ' : f‚ÇÅ ‚â´ p' j‚ÇÅ = f‚ÇÅ' := by cat_disch)
    (hf‚ÇÇ' : f‚ÇÇ ‚â´ p' j‚ÇÇ = f‚ÇÇ' := by cat_disch) :
  pullFunctorObjHom w D q f‚ÇÅ f‚ÇÇ =
    (F.mapComp' _ _ _).inv.app _ ‚â´ D.hom q' f‚ÇÅ' f‚ÇÇ'
      (by rw [‚Üê hq', ‚Üê hf‚ÇÅ', Category.assoc, w, reassoc_of% hf‚ÇÅ])
      (by rw [‚Üê hq', ‚Üê hf‚ÇÇ', Category.assoc, w, reassoc_of% hf‚ÇÇ]) ‚â´
      (F.mapComp' _ _ _).hom.app _ := by
  subst hq' hf‚ÇÅ' hf‚ÇÇ'
  simp [mapComp'_eq_mapComp, pullFunctorObjHom]

/-- Auxiliary definition for `pullFunctor`. -/
@[simps]
def pullFunctorObj (D : F.DescentData f) :
    F.DescentData f' where
  obj j := (F.map (p' _).op.toLoc).obj (D.obj (Œ± j))
  hom Y q j‚ÇÅ j‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ := pullFunctorObjHom w _ _ _ _
  pullHom_hom Y' Y g q q' hq j‚ÇÅ j‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ gf‚ÇÅ gf‚ÇÇ hgf‚ÇÅ hgf‚ÇÇ := by
    rw [pullFunctorObjHom_eq _ _ _ _ _ (q' ‚â´ p) (gf‚ÇÅ ‚â´ p' j‚ÇÅ) (gf‚ÇÇ ‚â´ p' j‚ÇÇ),
      pullFunctorObjHom_eq _ _ _ _ _ (q ‚â´ p) (f‚ÇÅ ‚â´ p' j‚ÇÅ) (f‚ÇÇ ‚â´ p' j‚ÇÇ)]
    dsimp
    rw [‚Üê D.pullHom_hom g (q ‚â´ p) (q' ‚â´ p) (by rw [reassoc_of% hq])
      (f‚ÇÅ ‚â´ p' j‚ÇÅ) (f‚ÇÇ ‚â´ p' j‚ÇÇ) (by rw [Category.assoc, w, reassoc_of% hf‚ÇÅ])
      (by rw [Category.assoc, w, reassoc_of% hf‚ÇÇ]) (gf‚ÇÅ ‚â´ p' j‚ÇÅ) (gf‚ÇÇ ‚â´ p' j‚ÇÇ)
      (by aesop) (by aesop)]
    dsimp [pullHom]
    simp only [Functor.map_comp, Category.assoc]
    rw [F.mapComp'‚ÇÄ‚ÇÅ‚ÇÉ_inv_comp_mapComp'‚ÇÄ‚ÇÇ‚ÇÉ_hom_app_assoc _ _ _ _ _ _ _ _ (by aesop),
      mapComp'‚ÇÄ‚ÇÇ‚ÇÉ_inv_comp_mapComp'‚ÇÄ‚ÇÅ‚ÇÉ_hom_app _ _ _ _ _ _ _ _ _ (by aesop)]
  hom_self Y q j g hg := by
    rw [pullFunctorObjHom_eq _ _ _ _ _ _ _ _ rfl rfl rfl rfl rfl,
      D.hom_self _ _ (by cat_disch)]
    simp
  hom_comp Y q j‚ÇÅ j‚ÇÇ j‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ hf‚ÇÅ hf‚ÇÇ hf‚ÇÉ := by
    rw [pullFunctorObjHom_eq _ _ _ _ _ (q ‚â´ p) (f‚ÇÅ ‚â´ p' j‚ÇÅ) (f‚ÇÇ ‚â´ p' j‚ÇÇ),
      pullFunctorObjHom_eq _ _ _ _ _ (q ‚â´ p) (f‚ÇÇ ‚â´ p' j‚ÇÇ) (f‚ÇÉ ‚â´ p' j‚ÇÉ),
      pullFunctorObjHom_eq _ _ _ _ _ (q ‚â´ p) (f‚ÇÅ ‚â´ p' j‚ÇÅ) (f‚ÇÉ ‚â´ p' j‚ÇÉ)]
    simp

variable (F)

/-- Given family of morphisms `f : X i ‚ü∂ S` and `f' : X' j ‚ü∂ S'`, and suitable
commutative diagrams `p' j ‚â´ f (Œ± j) = f' j ‚â´ p`, this is the
induced functor `F.DescentData f ‚•§ F.DescentData f'`. (Up to a (unique) isomorphism,
this functor only depends on `f` and `f'`, see `pullFunctorIso`.) -/
@[simps]
def pullFunctor : F.DescentData f ‚•§ F.DescentData f' where
  obj D := pullFunctorObj w D
  map {D‚ÇÅ D‚ÇÇ} œÜ :=
    { hom j := (F.map (p' j).op.toLoc).map (œÜ.hom (Œ± j))
      comm Y q j‚ÇÅ j‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ := by
        have := œÜ.comm (q ‚â´ p) (f‚ÇÅ ‚â´ p' j‚ÇÅ) (f‚ÇÇ ‚â´ p' j‚ÇÇ)
          (by rw [Category.assoc, w, reassoc_of% hf‚ÇÅ])
          (by rw [Category.assoc, w, reassoc_of% hf‚ÇÇ])
        dsimp at this ‚ä¢
        rw [pullFunctorObjHom_eq_assoc _ _ _ _ _ (q ‚â´ p) (f‚ÇÅ ‚â´ p' j‚ÇÅ) (f‚ÇÇ ‚â´ p' j‚ÇÇ),
          pullFunctorObjHom_eq _ _ _ _ _ (q ‚â´ p) (f‚ÇÅ ‚â´ p' j‚ÇÅ) (f‚ÇÇ ‚â´ p' j‚ÇÇ)]
        dsimp
        rw [mapComp'_inv_naturality_assoc, ‚Üê mapComp'_hom_naturality,
          reassoc_of% this] }

/- TODO:
def toDescentDataCompPullFunctorIso :
    F.toDescentData f ‚ãô pullFunctor F w ‚âÖ F.map p.op.toLoc ‚ãô F.toDescentData f' := ...
-/

/-- Up to a (unique) isomorphism, the functor
`pullFunctor : F.DescentData f ‚•§ F.DescentData f'` does not depend
on the auxiliary data. -/
@[simps!]
def pullFunctorIso {Œ≤ : Œπ' ‚Üí Œπ} {p'' : ‚àÄ j, X' j ‚ü∂ X (Œ≤ j)}
    (w' : ‚àÄ j, p'' j ‚â´ f (Œ≤ j) = f' j ‚â´ p) :
    pullFunctor F w ‚âÖ pullFunctor F w' :=
  NatIso.ofComponents (fun D ‚Ü¶ isoMk (fun j ‚Ü¶ D.iso _ _ _) (by
    intro Y q j‚ÇÅ j‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ
    dsimp
    rw [pullFunctorObjHom_eq _ _ _ _ _ (q ‚â´ p) _ _ rfl (by aesop) (by aesop),
      pullFunctorObjHom_eq _ _ _ _ _ (q ‚â´ p) _ _ rfl (by aesop) (by aesop),
      map_eq_pullHom_assoc _ _ (f‚ÇÅ ‚â´ p' j‚ÇÅ) (f‚ÇÅ ‚â´ p'' j‚ÇÅ) (by aesop) (by aesop),
      map_eq_pullHom _ _ (f‚ÇÇ ‚â´ p' j‚ÇÇ) (f‚ÇÇ ‚â´ p'' j‚ÇÇ) (by aesop) (by aesop)]
    dsimp
    simp only [Iso.hom_inv_id_app_assoc, Category.assoc, NatIso.cancel_natIso_inv_left,
      NatIso.cancel_natIso_hom_right_assoc, op_comp, Quiver.Hom.comp_toLoc]
    rw [pullHom_hom _ _ _ (q ‚â´ p) (by rw [w, reassoc_of% hf‚ÇÅ]) _ _
        rfl (by aesop) _ _ rfl rfl, hom_comp,
      pullHom_hom _ _ _ (q ‚â´ p) (by rw [w, reassoc_of% hf‚ÇÇ]) _ _
        rfl (by aesop) _ _ rfl rfl, hom_comp]))
    (fun {D‚ÇÅ D‚ÇÇ} œÜ ‚Ü¶ by
      ext j
      exact œÜ.comm _ _ _ rfl (by aesop))

variable (S) in
/-- The functor `F.DescentData f ‚•§ F.DescentData f` corresponding to `pullFunctor`
applied to identity morphisms is isomorphic to the identity functor. -/
@[simps!]
def pullFunctorIdIso :
    pullFunctor F (p := ùüô S) (p' := fun _ ‚Ü¶ ùüô _) (w := by simp) ‚âÖ ùü≠ (F.DescentData f) :=
  NatIso.ofComponents (fun D ‚Ü¶ isoMk (fun i ‚Ü¶ (F.mapId _).app _) (by
    intro Y q i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ
    dsimp
    rw [pullFunctorObjHom_eq_assoc _ _ _ _ _ q f‚ÇÅ f‚ÇÇ rfl]
    simp [mapComp'_id_comp_inv_app_assoc, mapComp'_id_comp_hom_app, ‚Üê Functor.map_comp]))

/-- The composition of two functors `pullFunctor` is isomorphic to `pullFunctor` applied
to the compositions. -/
@[simps!]
def pullFunctorCompIso
    {S'' : C} {q : S'' ‚ü∂ S'} {Œπ'' : Type t''} {X'' : Œπ'' ‚Üí C} {f'' : ‚àÄ k, X'' k ‚ü∂ S''}
    {Œ≤ : Œπ'' ‚Üí Œπ'} {q' : ‚àÄ k, X'' k ‚ü∂ X' (Œ≤ k)} (w' : ‚àÄ k, q' k ‚â´ f' (Œ≤ k) = f'' k ‚â´ q)
    (r : S'' ‚ü∂ S) {r' : ‚àÄ k, X'' k ‚ü∂ X (Œ± (Œ≤ k))}
    (hr : q ‚â´ p = r := by cat_disch) (hr' : ‚àÄ k, q' k ‚â´ p' (Œ≤ k) = r' k := by cat_disch) :
    pullFunctor F w ‚ãô pullFunctor F w' ‚âÖ
      pullFunctor F (p := r) (Œ± := Œ± ‚àò Œ≤) (p' := r') (fun k ‚Ü¶ by
        dsimp
        rw [‚Üê hr', Category.assoc, w, reassoc_of% w', hr]) :=
  NatIso.ofComponents
    (fun D ‚Ü¶ isoMk (fun _ ‚Ü¶ (F.mapComp' _ _ _ (by aesoptoloc)).symm.app _) (by
      intro Y s k‚ÇÅ k‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ
      dsimp
      rw [pullFunctorObjHom_eq _ _ _ _ _  (s ‚â´ r) _ _ rfl,
        pullFunctorObjHom_eq _ _ _ _ _ (s ‚â´ q) (f‚ÇÅ ‚â´ q' k‚ÇÅ) (f‚ÇÇ ‚â´ q' k‚ÇÇ)]
      dsimp
      rw [pullFunctorObjHom_eq _ _ _ _ _ (s ‚â´ r) (f‚ÇÅ ‚â´ r' k‚ÇÅ) (f‚ÇÇ ‚â´ r' k‚ÇÇ)
        rfl (by simp [w', reassoc_of% hf‚ÇÅ, reassoc_of% hf‚ÇÇ]) (by
          simp [reassoc_of% w', reassoc_of% hf‚ÇÅ, hr])]
      dsimp
      simp only [Category.assoc]
      rw [mapComp'_inv_whiskerRight_mapComp'‚ÇÄ‚ÇÇ‚ÇÉ_inv_app_assoc _ _ _ _ _ _ _
        (by aesoptoloc) rfl rfl, mapComp'‚ÇÄ‚ÇÇ‚ÇÉ_hom_app _ _ _ _ _ _ _ _ rfl rfl]))

end

variable {f} in
/-- Up to an equivalence, the category `DescentData` for a pseudofunctor `F` and
a family of morphisms `f : X i ‚ü∂ S` is unchanged when we replace `S` by an isomorphic object,
or when we replace `f` by another family which generate the same sieve. -/
def pullFunctorEquivalence {S' : C} {Œπ' : Type t'} {X' : Œπ' ‚Üí C} {f' : ‚àÄ j, X' j ‚ü∂ S'}
    (e : S' ‚âÖ S) {Œ± : Œπ' ‚Üí Œπ} {p' : ‚àÄ j, X' j ‚ü∂ X (Œ± j)}
    (w : ‚àÄ j, p' j ‚â´ f (Œ± j) = f' j ‚â´ e.hom)
    {Œ≤ : Œπ ‚Üí Œπ'} {q' : ‚àÄ i, X i ‚ü∂ X' (Œ≤ i)} (w' : ‚àÄ i, q' i ‚â´ f' (Œ≤ i) = f i ‚â´ e.inv) :
    F.DescentData f ‚âå F.DescentData f' where
  functor := pullFunctor F w
  inverse := pullFunctor F w'
  unitIso :=
    (pullFunctorIdIso F S).symm ‚â™‚â´ pullFunctorIso _ _ _ ‚â™‚â´
      (pullFunctorCompIso _ _ _ (hr := e.inv_hom_id) (hr' := fun _ ‚Ü¶ rfl)).symm
  counitIso :=
    (pullFunctorCompIso _ _ _ (hr := e.hom_inv_id) (hr' := fun _ ‚Ü¶ rfl)) ‚â™‚â´
      pullFunctorIso _ _ _ ‚â™‚â´ pullFunctorIdIso F S'
  functor_unitIso_comp D := by
    ext j
    dsimp
    simp only [Category.id_comp, Functor.map_comp, Category.assoc]
    rw [pullFunctorObjHom_eq_assoc _ _ _ _ _  (p' _ ‚â´ f _) (p' _ ‚â´ q' _ ‚â´ p' _) (p' _) (by simp)
        (by simp [w', reassoc_of% w]),
      map_eq_pullHom_assoc _ (p' j) (p' j) (p' _ ‚â´ q' _ ‚â´ p' _) (by simp) (by simp),
      D.pullHom_hom _ _ (p' j ‚â´ f _) (by simp) _ _ (by simp)
        (by simp [w, reassoc_of% w']) _ _ (by simp) rfl]
    dsimp
    rw [‚Üê F.mapComp'‚ÇÄ‚ÇÅ‚ÇÉ_hom_comp_whiskerLeft_mapComp'_hom_app_assoc _ _ _ _ _ _ rfl rfl (by simp),
      mapComp'_comp_id_hom_app, mapComp'_id_comp_inv_app_assoc, ‚Üê Functor.map_comp_assoc,
      Iso.inv_hom_id_app]
    simp [D.hom_self _ _ rfl]

end DescentData

end Pseudofunctor

end CategoryTheory
