/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Christian Merten
-/
import Mathlib.CategoryTheory.Sites.Descent.DescentData
import Mathlib.CategoryTheory.Sites.Descent.IsPrestack

/-!
# Effectiveness of descent

-/

universe t w v' v u' u

namespace CategoryTheory

open Opposite Limits Bicategory

-- to be moved
namespace Presieve

variable {C : Type u} [Category.{v} C] (J : GrothendieckTopology C)
  (P : C·µí·µñ ‚•§ Type w) {S : C} {Œπ : Type t} {S : C} {X : Œπ ‚Üí C} (f : ‚àÄ i, X i ‚ü∂ S)

@[simps]
def Arrows.toCompatible (s : P.obj (op S)) :
    Subtype (Arrows.Compatible P f) where
  val i := P.map (f i).op s
  property i j Y pi pj w := by simp only [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, w]

lemma isSheafFor_ofArrows_iff_bijective_toCompatible :
    IsSheafFor P (ofArrows _ f) ‚Üî Function.Bijective (Arrows.toCompatible P f) := by
  constructor
  ¬∑ intro h
    constructor
    ¬∑ intro s‚ÇÅ s‚ÇÇ hs
      simp only [Subtype.ext_iff] at hs
      apply h.isSeparatedFor.ext
      rintro _ _ ‚ü®i‚ü©
      exact congr_fun hs i
    ¬∑ rw [isSheafFor_arrows_iff] at h
      rintro ‚ü®x, hx‚ü©
      obtain ‚ü®s, hs‚ü© := (h x hx).exists
      exact ‚ü®s, by aesop‚ü©
  ¬∑ rw [isSheafFor_arrows_iff]
    intro h x hx
    apply existsUnique_of_exists_of_unique
    ¬∑ obtain ‚ü®s, hs‚ü© := h.surjective ‚ü®x, hx‚ü©
      simp only [Subtype.ext_iff] at hs
      exact ‚ü®s, congr_fun hs‚ü©
    ¬∑ intro s‚ÇÅ s‚ÇÇ hs i
      apply h.injective (by aesop)

lemma isSheaf_iff_isSheafFor_ofArrows :
    Presieve.IsSheaf J P ‚Üî ‚àÄ ‚¶ÉŒπ : Type max u v‚¶Ñ ‚¶ÉS : C‚¶Ñ ‚¶ÉX : Œπ ‚Üí C‚¶Ñ (f : ‚àÄ i, X i ‚ü∂ S)
        (_ : (Sieve.ofArrows _ f) ‚àà J S),
        IsSheafFor P (ofArrows _ f) := by
  constructor
  ¬∑ intro h Œπ S X f hf
    rw [isSheafFor_iff_generate]
    exact h _ hf
  ¬∑ intro h S R hR
    let X (i : R.arrows.category) : C := i.1.left
    let f (i : R.arrows.category) : X i ‚ü∂ S := i.1.hom
    have : Presieve.ofArrows _ f = R := by
      apply le_antisymm
      ¬∑ rintro _ _ ‚ü®i‚ü©
        exact i.2
      ¬∑ intro _ g hg
        rw [Sieve.arrows] at hg
        exact ‚ü®(‚ü®Over.mk g, hg‚ü© : R.arrows.category)‚ü©
    rw [‚Üê this]
    apply h
    simpa [Sieve.ofArrows, this]

end Presieve

namespace Pseudofunctor

variable {C : Type u} [Category.{v} C] (F : Pseudofunctor (LocallyDiscrete C·µí·µñ) Cat.{v', u'})
  {Œπ : Type t} {S : C} {X : Œπ ‚Üí C} (f : ‚àÄ i, X i ‚ü∂ S)

-- to be moved
instance {X Y : C} (f : X ‚ü∂ Y) [IsIso f] (F : Pseudofunctor (LocallyDiscrete C) Cat.{v', u'}) :
    (F.map (.toLoc f)).IsEquivalence := by
  let e : F.obj (.mk X) ‚âå F.obj (.mk Y) :=
    Equivalence.mk (F.map (.toLoc f)) (F.map (.toLoc (inv f)))
    ((F.mapId _).symm ‚â™‚â´ F.mapComp' f.toLoc (inv f).toLoc (ùüô _) (by
        rw [‚Üê Quiver.Hom.comp_toLoc, IsIso.hom_inv_id, Quiver.Hom.id_toLoc]))
    ((F.mapComp' (inv f).toLoc f.toLoc (ùüô _) (by
        rw [‚Üê Quiver.Hom.comp_toLoc, IsIso.inv_hom_id, Quiver.Hom.id_toLoc])).symm ‚â™‚â´ F.mapId _)
  exact e.isEquivalence_functor

/-- The property that a pseudofunctor `(LocallyDiscrete C·µí·µñ)` to `Cat` has
effective descent relative to a family of morphisms `f i : X i ‚ü∂ S` in `C`. -/
abbrev HasEffectiveDescentRelativeTo : Prop := (F.toDescentData f).IsEquivalence

open LocallyDiscreteOpToCat

lemma toDescentData_fullyFaithful_iff :
    Nonempty (F.toDescentData f).FullyFaithful ‚Üî
      ‚àÄ (M N : F.obj (.mk (op S))),
        Presieve.IsSheafFor (F.presheafHom M N)
          (Presieve.ofArrows (X := Over.mk (ùüô S)) (fun (i : Œπ) ‚Ü¶ Over.mk (f i))
            (fun (i : Œπ) ‚Ü¶ Over.homMk (f i))) := by
  trans ‚àÄ (M N : F.obj (.mk (op S))),
      Function.Bijective ((F.toDescentData f).map : (M ‚ü∂ N) ‚Üí _)
  ¬∑ exact ‚ü®fun ‚ü®h‚ü© ‚Ü¶ h.map_bijective, fun h ‚Ü¶ ‚ü®{
        preimage {M N}:= (Equiv.ofBijective _ (h M N)).invFun
        preimage_map := (Equiv.ofBijective _ (h _ _)).left_inv
        map_preimage := (Equiv.ofBijective _ (h _ _)).right_inv
      }‚ü©‚ü©
  ¬∑ refine forall_congr' (fun M ‚Ü¶ forall_congr' (fun N ‚Ü¶ ?_))
    rw [Presieve.isSheafFor_ofArrows_iff_bijective_toCompatible]
    let T := Subtype (Presieve.Arrows.Compatible (P := F.presheafHom M N)
      (B := Over.mk (ùüô S)) (X := (fun (i : Œπ) ‚Ü¶ Over.mk (f i)))
      (fun (i : Œπ) ‚Ü¶ Over.homMk (f i)))
    let Œ± : ((F.toDescentData f).obj M ‚ü∂ (F.toDescentData f).obj N) ‚âÉ T := {
      toFun œÜ := ‚ü®fun i ‚Ü¶ œÜ.hom i, fun i j Z gi gj w ‚Ü¶ by
        have := œÜ.comm Z.hom gi.left gj.left (Over.w gi) (Over.w gj)
        simp only [Functor.id_obj, toDescentData, DescentData.ofObj_obj,
          DescentData.ofObj_hom, Category.assoc] at this
        rw [‚Üê cancel_mono ((F.mapComp' (f j).op.toLoc gj.left.op.toLoc
          Z.hom.op.toLoc (by simp [‚Üê Over.w gj])).hom.app N)]
        simp [pullHom, this] ‚ü©
      invFun œà :=
        { hom i := œà.1 i
          comm Y q i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ := by
            have this := œà.2 i‚ÇÅ i‚ÇÇ (Over.mk q) (Over.homMk f‚ÇÅ) (Over.homMk f‚ÇÇ)
              (by aesop)
            dsimp at this ‚ä¢
            rw [map_eq_pullHom (œà.1 i‚ÇÅ) f‚ÇÅ q q (by aesop) (by aesop),
              map_eq_pullHom (œà.1 i‚ÇÇ) f‚ÇÇ q q (by aesop) (by aesop), this]
            simp [toDescentData] }
      left_inv _ := rfl
      right_inv _ := rfl
    }
    let Œ≤ : (M ‚ü∂ N) ‚âÉ (F.presheafHom M N).obj (op (Over.mk (ùüô S))) :=
      Equiv.ofBijective _ (Functor.FullyFaithful.map_bijective
        (Functor.FullyFaithful.ofFullyFaithful (F.map (.toLoc (ùüô (op S))))) M N)
    have : Function.comp Œ± (F.toDescentData f).map =
      (Presieve.Arrows.toCompatible _ _).comp Œ≤ := by
        ext œÜ i
        simp [Œ±, Œ≤, pullHom, toDescentData]
    rw [‚Üê Function.Bijective.of_comp_iff' Œ±.bijective, this,
      Function.Bijective.of_comp_iff _ Œ≤.bijective]

class IsStack (J : GrothendieckTopology C) : Prop where
  hasEffectiveDescentRelativeTo_of_sieve_mem {S : C} (U : Sieve S) (hU : U ‚àà J S) :
    F.HasEffectiveDescentRelativeTo (f := fun (i : U.arrows.category) ‚Ü¶ i.obj.hom)

lemma hasEffectiveDescentRelativeTo_of_sieve_mem (J : GrothendieckTopology C)
    [F.IsStack J]
    {S : C} (U : Sieve S) (hU : U ‚àà J S) :
    F.HasEffectiveDescentRelativeTo (f := fun (i : U.arrows.category) ‚Ü¶ i.obj.hom) :=
  IsStack.hasEffectiveDescentRelativeTo_of_sieve_mem _ hU

instance (J : GrothendieckTopology C) [F.IsStack J] :
    F.IsPrestack J where
  isSheaf {S} M N := by
    rw [isSheaf_iff_isSheaf_of_type, Presieve.isSheaf_iff_isSheafFor_ofArrows]
    intro Œπ X Y f hf
    sorry

end Pseudofunctor

end CategoryTheory
