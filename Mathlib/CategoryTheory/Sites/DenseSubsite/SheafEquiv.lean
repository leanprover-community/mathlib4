/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/

import Mathlib.CategoryTheory.Sites.DenseSubsite.Basic

/-!
# The equivalence of categories of sheaves of a dense subsite

- `CategoryTheory.Functor.IsDenseSubsite.sheafEquiv`:
  If `G : C ‚•§ D` exhibits `(C, J)` as a dense subsite of `(D, K)`,
  it induces an equivalence of category of sheaves valued in a category with suitable limits.

## References

* [Elephant]: *Sketches of an Elephant*, ‚Ñ±. T. Johnstone: C2.2.
* https://ncatlab.org/nlab/show/dense+sub-site
* https://ncatlab.org/nlab/show/comparison+lemma

-/

universe w v u w'

namespace CategoryTheory.Functor.IsDenseSubsite

open CategoryTheory Opposite

variable {C D : Type*} [Category C] [Category D]
variable (G : C ‚•§ D)
variable (J : GrothendieckTopology C) (K : GrothendieckTopology D)
variable {A : Type w} [Category.{w'} A] [‚àÄ X, Limits.HasLimitsOfShape (StructuredArrow X G.op) A]
variable [G.IsDenseSubsite J K]

include K in
lemma isIso_ranCounit_app_of_isDenseSubsite (Y : Sheaf J A) (U X) :
    IsIso ((yoneda.map ((G.op.ranCounit.app Y.val).app (op U))).app (op X)) := by
  rw [isIso_iff_bijective]
  constructor
  ¬∑ intro f‚ÇÅ f‚ÇÇ e
    apply (isPointwiseRightKanExtensionRanCounit G.op Y.1 (.op (G.obj U))).hom_ext
    rintro ‚ü®‚ü®‚ü®‚ü©‚ü©, ‚ü®W‚ü©, g‚ü©
    obtain ‚ü®g, rfl‚ü© : ‚àÉ g' : G.obj W ‚ü∂ G.obj U, g = g'.op := ‚ü®g.unop, rfl‚ü©
    apply (Y.2 X _ (IsDenseSubsite.imageSieve_mem J K G g)).isSeparatedFor.ext
    dsimp
    rintro V iVW ‚ü®iVU, e'‚ü©
    have := congr($e ‚â´ Y.1.map iVU.op)
    simp only [comp_obj, yoneda_map_app, Category.assoc, coyoneda_obj_obj, comp_map,
      coyoneda_obj_map, ‚Üê NatTrans.naturality, op_obj, op_map, Quiver.Hom.unop_op, ‚Üê map_comp_assoc,
      ‚Üê op_comp, ‚Üê e'] at this ‚ä¢
    erw [‚Üê NatTrans.naturality] at this
    exact this
  ¬∑ intro f
    have (X Y Z) (f : X ‚ü∂ Y) (g : G.obj Y ‚ü∂ G.obj Z) (hf : G.imageSieve g f) : Exists _ := hf
    choose l hl using this
    let c : Limits.Cone (StructuredArrow.proj (op (G.obj U)) G.op ‚ãô Y.val) := by
      refine ‚ü®X, ‚ü®fun g ‚Ü¶ ?_, ?_‚ü©‚ü©
      ¬∑ refine Y.2.amalgamate ‚ü®_, IsDenseSubsite.imageSieve_mem J K G g.hom.unop‚ü©
          (fun I ‚Ü¶ f ‚â´ Y.1.map (l _ _ _ _ _ I.hf).op) fun I‚ÇÅ I‚ÇÇ r ‚Ü¶ ?_
        apply (Y.2 X _ (IsDenseSubsite.equalizer_mem J K G (r.g‚ÇÅ ‚â´ l _ _ _ _ _ I‚ÇÅ.hf)
          (r.g‚ÇÇ ‚â´ l _ _ _ _ _ I‚ÇÇ.hf) ?_)).isSeparatedFor.ext fun V iUV (hiUV : _ = _) ‚Ü¶ ?_
        ¬∑ simp only [const_obj_obj, op_obj, map_comp, hl]
          simp only [‚Üê map_comp_assoc, r.w]
        ¬∑ simp [‚Üê map_comp, ‚Üê op_comp, hiUV]
      ¬∑ dsimp
        rintro ‚ü®‚ü®‚ü®‚ü©‚ü©, ‚ü®W‚ÇÅ‚ü©, g‚ÇÅ‚ü© ‚ü®‚ü®‚ü®‚ü©‚ü©, ‚ü®W‚ÇÇ‚ü©, g‚ÇÇ‚ü© ‚ü®‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©, i, hi‚ü©
        dsimp at g‚ÇÅ g‚ÇÇ i hi
        -- See issue https://github.com/leanprover-community/mathlib4/pull/15781 for tracking performance regressions of `rintro` as here
        have h : g‚ÇÇ = g‚ÇÅ ‚â´ (G.map i.unop).op := by simpa only [Category.id_comp] using hi
        rcases h with ‚ü®rfl‚ü©
        have h : ‚àÉ g' : G.obj W‚ÇÅ ‚ü∂ G.obj U, g‚ÇÅ = g'.op := ‚ü®g‚ÇÅ.unop, rfl‚ü©
        rcases h with ‚ü®g, rfl‚ü©
        have h : ‚àÉ i' : W‚ÇÇ ‚ü∂ W‚ÇÅ, i = i'.op := ‚ü®i.unop, rfl‚ü©
        rcases h with ‚ü®i, rfl‚ü©
        simp only [const_obj_obj, id_obj, comp_obj, StructuredArrow.proj_obj, const_obj_map, op_obj,
          unop_comp, Quiver.Hom.unop_op, Category.id_comp, comp_map, StructuredArrow.proj_map]
        apply Y.2.hom_ext ‚ü®_, IsDenseSubsite.imageSieve_mem J K G (G.map i ‚â´ g)‚ü©
        intro I
        simp only [Presheaf.IsSheaf.amalgamate_map, Category.assoc, ‚Üê Functor.map_comp, ‚Üê op_comp]
        let I' : GrothendieckTopology.Cover.Arrow ‚ü®_, IsDenseSubsite.imageSieve_mem J K G g‚ü© :=
          ‚ü®_, I.f ‚â´ i, ‚ü®l _ _ _ _ _ I.hf, by simp [hl]‚ü©‚ü©
        refine Eq.trans ?_ (Y.2.amalgamate_map _ _ _ I').symm
        apply (Y.2 X _ (IsDenseSubsite.equalizer_mem J K G (l _ _ _ _ _ I.hf)
          (l _ _ _ _ _ I'.hf) (by simp [I', hl]))).isSeparatedFor.ext
            fun V iUV (hiUV : _ = _) ‚Ü¶ ?_
        simp [I', ‚Üê Functor.map_comp, ‚Üê op_comp, hiUV]
    refine ‚ü®(isPointwiseRightKanExtensionRanCounit G.op Y.1 (.op (G.obj U))).lift c, ?_‚ü©
    ¬∑ have := (isPointwiseRightKanExtensionRanCounit G.op Y.1 (.op (G.obj U))).fac c (.mk (ùüô _))
      simp only [id_obj, comp_obj, StructuredArrow.proj_obj, StructuredArrow.mk_right,
        RightExtension.coneAt_pt, RightExtension.mk_left, RightExtension.coneAt_œÄ_app,
        const_obj_obj, op_obj, StructuredArrow.mk_hom_eq_self, map_id, whiskeringLeft_obj_obj,
        RightExtension.mk_hom, Category.id_comp, StructuredArrow.mk_left, unop_id] at this
      simp only [c, id_obj, yoneda_map_app, this]
      apply Y.2.hom_ext ‚ü®_, IsDenseSubsite.imageSieve_mem J K G (ùüô (G.obj U))‚ü© _ _ fun I ‚Ü¶ ?_
      apply (Y.2 X _ (IsDenseSubsite.equalizer_mem J K G (l _ _ _ _ _ I.hf)
        I.f (by simp [hl]))).isSeparatedFor.ext fun V iUV (hiUV : _ = _) ‚Ü¶ ?_
      simp [‚Üê Functor.map_comp, ‚Üê op_comp, hiUV]

instance (Y : Sheaf J A) : IsIso ((G.sheafAdjunctionCocontinuous A J K).counit.app Y) := by
  apply (config := { allowSynthFailures := true })
    ReflectsIsomorphisms.reflects (sheafToPresheaf J A)
  rw [NatTrans.isIso_iff_isIso_app]
  intro ‚ü®U‚ü©
  apply (config := { allowSynthFailures := true }) ReflectsIsomorphisms.reflects yoneda
  rw [NatTrans.isIso_iff_isIso_app]
  intro ‚ü®X‚ü©
  simp only [comp_obj, sheafToPresheaf_obj, sheafPushforwardContinuous_obj_val_obj, yoneda_obj_obj,
    id_obj, sheafToPresheaf_map, sheafAdjunctionCocontinuous_counit_app_val, ranAdjunction_counit]
  exact isIso_ranCounit_app_of_isDenseSubsite G J K Y U X

variable (A)

/--
If `G : C ‚•§ D` exhibits `(C, J)` as a dense subsite of `(D, K)`,
it induces an equivalence of category of sheaves valued in a category with suitable limits.
-/
@[simps! functor inverse]
noncomputable def sheafEquiv : Sheaf J A ‚âå Sheaf K A :=
  (G.sheafAdjunctionCocontinuous A J K).toEquivalence.symm

instance : (G.sheafPushforwardContinuous A J K).IsEquivalence :=
  inferInstanceAs (IsDenseSubsite.sheafEquiv G _ _ _).inverse.IsEquivalence

variable [HasWeakSheafify J A] [HasWeakSheafify K A]

/-- The natural isomorphism exhibiting the compatibility of
`IsDenseSubsite.sheafEquiv` with sheafification. -/
noncomputable
abbrev sheafEquivSheafificationCompatibility :
    (whiskeringLeft _ _ A).obj G.op ‚ãô presheafToSheaf _ _ ‚âÖ
      presheafToSheaf _ _ ‚ãô (sheafEquiv G J K A).inverse := by
  apply Functor.pushforwardContinuousSheafificationCompatibility

end IsDenseSubsite

@[deprecated (since := "2024-07-23")]
alias IsCoverDense.sheafEquivOfCoverPreservingCoverLifting := IsDenseSubsite.sheafEquiv
@[deprecated (since := "2024-07-23")]
alias IsCoverDense.sheafEquivOfCoverPreservingCoverLiftingSheafificationCompatibility :=
  IsDenseSubsite.sheafEquivSheafificationCompatibility

end CategoryTheory.Functor
