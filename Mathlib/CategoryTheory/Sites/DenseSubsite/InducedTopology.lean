/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.CategoryTheory.Sites.DenseSubsite.SheafEquiv

/-!
# Induced Topology

We say that a functor `G : C ‚•§ (D, K)` is locally dense if for each covering sieve `T` in `D` of
some `X : C`, `T ‚à© mor(C)` generates a covering sieve of `X` in `D`. A locally dense fully faithful
functor then induces a topology on `C` via `{ T ‚à© mor(C) | T ‚àà K }`. Note that this is equal to
the collection of sieves on `C` whose image generates a covering sieve. This construction would
make `C` both cover-lifting and cover-preserving.

Some typical examples are full and cover-dense functors (for example the functor from a basis of a
topological space `X` into `Opens X`). The functor `Over X ‚•§ C` is also locally dense, and the
induced topology can then be used to construct the big sites associated to a scheme.

Given a fully faithful cover-dense functor `G : C ‚•§ (D, K)` between small sites, we then have
`Sheaf (H.inducedTopology) A ‚âå Sheaf K A`. This is known as the comparison lemma.

## References

* [Elephant]: *Sketches of an Elephant*, P. T. Johnstone: C2.2.
* https://ncatlab.org/nlab/show/dense+sub-site
* https://ncatlab.org/nlab/show/comparison+lemma

-/

namespace CategoryTheory

universe v u

open Limits Opposite Presieve CategoryTheory

variable {C : Type*} [Category C] {D : Type*} [Category D] (G : C ‚•§ D)
variable {J : GrothendieckTopology C} (K : GrothendieckTopology D)
variable (A : Type v) [Category.{u} A]

namespace Functor

-- variables (A) [full G] [faithful G]
/-- We say that a functor `C ‚•§ D` into a site is "locally dense" if
for each covering sieve `T` in `D`, `T ‚à© mor(C)` generates a covering sieve in `D`.
-/
class LocallyCoverDense : Prop where
  functorPushforward_functorPullback_mem :
    ‚àÄ ‚¶ÉX : C‚¶Ñ (T : K (G.obj X)), (T.val.functorPullback G).functorPushforward G ‚àà K (G.obj X)

variable [G.LocallyCoverDense K]

theorem pushforward_cover_iff_cover_pullback [G.Full] [G.Faithful] {X : C} (S : Sieve X) :
    K _ (S.functorPushforward G) ‚Üî ‚àÉ T : K (G.obj X), T.val.functorPullback G = S := by
  constructor
  ¬∑ intro hS
    exact ‚ü®‚ü®_, hS‚ü©, (Sieve.fullyFaithfulFunctorGaloisCoinsertion G X).u_l_eq S‚ü©
  ¬∑ rintro ‚ü®T, rfl‚ü©
    exact LocallyCoverDense.functorPushforward_functorPullback_mem T

variable [G.IsLocallyFull K] [G.IsLocallyFaithful K]

/-- If a functor `G : C ‚•§ (D, K)` is fully faithful and locally dense,
then the set `{ T ‚à© mor(C) | T ‚àà K }` is a grothendieck topology of `C`.
-/
@[simps]
def inducedTopology : GrothendieckTopology C where
  sieves _ S := K _ (S.functorPushforward G)
  top_mem' X := by
    change K _ _
    rw [Sieve.functorPushforward_top]
    exact K.top_mem _
  pullback_stable' X Y S iYX hS := by
    apply K.transitive (LocallyCoverDense.functorPushforward_functorPullback_mem
      ‚ü®_, K.pullback_stable (G.map iYX) hS‚ü©)
    rintro Z _ ‚ü®U, iUY, iZU, ‚ü®W, iWX, iUW, hiWX, e‚ÇÅ‚ü©, rfl‚ü©
    rw [Sieve.pullback_comp]
    apply K.pullback_stable
    clear iZU Z
    apply K.transitive (G.functorPushforward_imageSieve_mem _ iUW)
    rintro Z _ ‚ü®U‚ÇÅ, iU‚ÇÅU, iZU‚ÇÅ, ‚ü®iU‚ÇÅW, e‚ÇÇ‚ü©, rfl‚ü©
    rw [Sieve.pullback_comp]
    apply K.pullback_stable
    clear iZU‚ÇÅ Z
    apply K.superset_covering ?_ (G.functorPushforward_equalizer_mem _
      (iU‚ÇÅU ‚â´ iUY ‚â´ iYX) (iU‚ÇÅW ‚â´ iWX) (by simp [e‚ÇÅ, e‚ÇÇ]))
    rintro Z _ ‚ü®U‚ÇÇ, iU‚ÇÇU‚ÇÅ, iZU‚ÇÇ, e‚ÇÉ : _ = _, rfl‚ü©
    refine ‚ü®_, iU‚ÇÇU‚ÇÅ ‚â´ iU‚ÇÅU ‚â´ iUY, iZU‚ÇÇ, ?_, by simp‚ü©
    simpa [e‚ÇÉ] using S.downward_closed hiWX (iU‚ÇÇU‚ÇÅ ‚â´ iU‚ÇÅW)
  transitive' X S hS S' H' := by
    apply K.transitive hS
    rintro Y _ ‚ü®Z, g, i, hg, rfl‚ü©
    rw [Sieve.pullback_comp]
    apply K.pullback_stable i
    refine K.superset_covering ?_ (H' hg)
    rintro W _ ‚ü®Z', g', i', hg, rfl‚ü©
    refine ‚ü®Z', g' ‚â´ g , i', hg, ?_‚ü©
    simp

@[simp]
lemma mem_inducedTopology_sieves_iff {X : C} (S : Sieve X) :
    S ‚àà (G.inducedTopology K) X ‚Üî (S.functorPushforward G) ‚àà K (G.obj X) :=
  Iff.rfl

/-- `G` is cover-lifting wrt the induced topology. -/
instance inducedTopology_isCocontinuous : G.IsCocontinuous (G.inducedTopology K) K :=
  ‚ü®@fun _ S hS => LocallyCoverDense.functorPushforward_functorPullback_mem ‚ü®S, hS‚ü©‚ü©

/-- `G` is cover-preserving wrt the induced topology. -/
theorem inducedTopology_coverPreserving : CoverPreserving (G.inducedTopology K) K G :=
  ‚ü®@fun _ _ hS => hS‚ü©

instance (priority := 900) locallyCoverDense_of_isCoverDense [G.IsCoverDense K] :
    G.LocallyCoverDense K where
  functorPushforward_functorPullback_mem _ _ :=
    IsCoverDense.functorPullback_pushforward_covering _

instance (priority := 900) [G.IsCoverDense K] : G.IsDenseSubsite (G.inducedTopology K) K where
  functorPushforward_mem_iff := Iff.rfl

@[deprecated (since := "2024-07-23")]
alias inducedTopologyOfIsCoverDense := inducedTopology

variable (J)

instance over_forget_locallyCoverDense (X : C) : (Over.forget X).LocallyCoverDense J where
  functorPushforward_functorPullback_mem Y T := by
    convert T.property
    ext Z f
    constructor
    ¬∑ rintro ‚ü®_, _, g', hg, rfl‚ü©
      exact T.val.downward_closed hg g'
    ¬∑ intro hf
      exact ‚ü®Over.mk (f ‚â´ Y.hom), Over.homMk f, ùüô _, hf, (Category.id_comp _).symm‚ü©

/-- Cover-dense functors induces an equivalence of categories of sheaves.

This is known as the comparison lemma. It requires that the sites are small and the value category
is complete.
-/
noncomputable def sheafInducedTopologyEquivOfIsCoverDense
    [G.IsCoverDense K] [‚àÄ (X : D·µí·µñ), HasLimitsOfShape (StructuredArrow X G.op) A] :
    Sheaf (G.inducedTopology K) A ‚âå Sheaf K A :=
  Functor.IsDenseSubsite.sheafEquiv G
    (G.inducedTopology K) K A

end Functor

end CategoryTheory
