/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Sites.DenseSubsite

/-!
# Equivalence of category of sheaves with a dense subsite that is 1-hypercover dense

-/

universe w v‚ÇÄ v v' u‚ÇÄ u u'

namespace CategoryTheory

open Category Limits Opposite

variable {C‚ÇÄ : Type u‚ÇÄ} {C : Type u} [Category.{v‚ÇÄ} C‚ÇÄ] [Category.{v} C]

namespace Sieve

variable {I : Type*} {X : C} {Y : I ‚Üí C} {f : ‚àÄ i, Y i ‚ü∂ X} {W : C} {g : W ‚ü∂ X}
  (hg : ofArrows Y f g)

include hg in
lemma ofArrows.exists : ‚àÉ (i : I) (h : W ‚ü∂ Y i), g = h ‚â´ f i := by
  obtain ‚ü®_, h, _, H, rfl‚ü© := hg
  cases' H with i
  exact ‚ü®i, h, rfl‚ü©

noncomputable def ofArrows.i : I := (ofArrows.exists hg).choose
noncomputable def ofArrows.h : W ‚ü∂ Y (i hg) := (ofArrows.exists hg).choose_spec.choose
@[reassoc]
lemma ofArrows.fac : g = h hg ‚â´ f (i hg) :=
  (ofArrows.exists hg).choose_spec.choose_spec

end Sieve

namespace Functor

variable (F : C‚ÇÄ ‚•§ C) (J‚ÇÄ : GrothendieckTopology C‚ÇÄ)
  (J : GrothendieckTopology C) {A : Type u'} [Category.{v'} A]

structure PreOneHypercoverDenseData (S : C) where
  I‚ÇÄ : Type w
  X (i : I‚ÇÄ) : C‚ÇÄ
  f (i : I‚ÇÄ) : F.obj (X i) ‚ü∂ S
  I‚ÇÅ (i‚ÇÅ i‚ÇÇ : I‚ÇÄ) : Type w
  Y ‚¶Éi‚ÇÅ i‚ÇÇ : I‚ÇÄ‚¶Ñ (j : I‚ÇÅ i‚ÇÅ i‚ÇÇ) : C‚ÇÄ
  p‚ÇÅ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚ÇÄ‚¶Ñ (j : I‚ÇÅ i‚ÇÅ i‚ÇÇ) : Y j ‚ü∂ X i‚ÇÅ
  p‚ÇÇ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚ÇÄ‚¶Ñ (j : I‚ÇÅ i‚ÇÅ i‚ÇÇ) : Y j ‚ü∂ X i‚ÇÇ
  w ‚¶Éi‚ÇÅ i‚ÇÇ : I‚ÇÄ‚¶Ñ (j : I‚ÇÅ i‚ÇÅ i‚ÇÇ) : F.map (p‚ÇÅ j) ‚â´ f i‚ÇÅ = F.map (p‚ÇÇ j) ‚â´ f i‚ÇÇ

namespace PreOneHypercoverDenseData

attribute [reassoc] w

variable {F}

variable {X : C} (data : F.PreOneHypercoverDenseData X)

@[simps]
def toPreOneHypercover : PreOneHypercover X where
  I‚ÇÄ := data.I‚ÇÄ
  X i := F.obj (data.X i)
  f i := data.f i
  I‚ÇÅ := data.I‚ÇÅ
  Y _ _ j := F.obj (data.Y j)
  p‚ÇÅ _ _ j := F.map (data.p‚ÇÅ j)
  p‚ÇÇ _ _ j := F.map (data.p‚ÇÇ j)
  w := data.w

/-- The sigma type of all `data.I‚ÇÅ i‚ÇÅ i‚ÇÇ` for `‚ü®i‚ÇÅ, i‚ÇÇ‚ü© : data.I‚ÇÄ √ó data.I‚ÇÄ`. -/
abbrev I‚ÇÅ' : Type w := Sigma (fun (i : data.I‚ÇÄ √ó data.I‚ÇÄ) => data.I‚ÇÅ i.1 i.2)

@[simps]
def multicospanIndex (P : C‚ÇÄ·µí·µñ ‚•§ A) : MulticospanIndex A where
  L := data.I‚ÇÄ
  R := data.I‚ÇÅ'
  fstTo j := j.1.1
  sndTo j := j.1.2
  left i := P.obj (Opposite.op (data.X i))
  right j := P.obj (Opposite.op (data.Y j.2))
  fst j := P.map ((data.p‚ÇÅ j.2).op)
  snd j := P.map ((data.p‚ÇÇ j.2).op)

@[simps]
def multicospanMap {P Q : C‚ÇÄ·µí·µñ ‚•§ A} (f : P ‚ü∂ Q) :
    (data.multicospanIndex P).multicospan ‚ü∂ (data.multicospanIndex Q).multicospan where
  app x := match x with
    | WalkingMulticospan.left i => f.app _
    | WalkingMulticospan.right j => f.app _
  naturality := by
    rintro (i‚ÇÅ|j‚ÇÅ) (i‚ÇÇ|j‚ÇÇ) (_|_)
    all_goals simp

@[simps]
def multicospanMapIso {P Q : C‚ÇÄ·µí·µñ ‚•§ A} (e : P ‚âÖ Q) :
    (data.multicospanIndex P).multicospan ‚âÖ (data.multicospanIndex Q).multicospan where
  hom := data.multicospanMap e.hom
  inv := data.multicospanMap e.inv

@[simps]
def sieve‚ÇÅ‚ÇÄ {i‚ÇÅ i‚ÇÇ : data.I‚ÇÄ} {W‚ÇÄ : C‚ÇÄ} (p‚ÇÅ : W‚ÇÄ ‚ü∂ data.X i‚ÇÅ) (p‚ÇÇ : W‚ÇÄ ‚ü∂ data.X i‚ÇÇ) :
    Sieve W‚ÇÄ where
  arrows Z‚ÇÄ g := ‚àÉ (j : data.I‚ÇÅ i‚ÇÅ i‚ÇÇ) (h : Z‚ÇÄ ‚ü∂ data.Y j),
    g ‚â´ p‚ÇÅ = h ‚â´ data.p‚ÇÅ j ‚àß g ‚â´ p‚ÇÇ = h ‚â´ data.p‚ÇÇ j
  downward_closed := by
    rintro Z Z' g ‚ü®j, h, fac‚ÇÅ, fac‚ÇÇ‚ü© œÜ
    exact ‚ü®j, œÜ ‚â´ h, by simpa using œÜ ‚â´= fac‚ÇÅ, by simpa using œÜ ‚â´= fac‚ÇÇ‚ü©

end PreOneHypercoverDenseData

structure OneHypercoverDenseData (S : C) extends PreOneHypercoverDenseData.{w} F S where
  mem‚ÇÄ : toPreOneHypercoverDenseData.toPreOneHypercover.sieve‚ÇÄ ‚àà J S
  mem‚ÇÅ‚ÇÄ (i‚ÇÅ i‚ÇÇ : I‚ÇÄ) ‚¶ÉW‚ÇÄ : C‚ÇÄ‚¶Ñ (p‚ÇÅ : W‚ÇÄ ‚ü∂ X i‚ÇÅ) (p‚ÇÇ : W‚ÇÄ ‚ü∂ X i‚ÇÇ)
    (w : F.map p‚ÇÅ ‚â´ f i‚ÇÅ = F.map p‚ÇÇ ‚â´ f i‚ÇÇ) :
    toPreOneHypercoverDenseData.sieve‚ÇÅ‚ÇÄ p‚ÇÅ p‚ÇÇ ‚àà J‚ÇÄ W‚ÇÄ

class IsOneHypercoverDense : Prop where
  nonempty_oneHypercoverDenseData (X : C) :
    Nonempty (OneHypercoverDenseData.{w} F J‚ÇÄ J X)

section

variable [IsOneHypercoverDense.{w} F J‚ÇÄ J]

noncomputable def oneHypercoverDenseData (X : C) : F.OneHypercoverDenseData J‚ÇÄ J X :=
  (IsOneHypercoverDense.nonempty_oneHypercoverDenseData X).some

lemma isDenseSubsite_of_isOneHypercoverDense [F.IsLocallyFull J] [F.IsLocallyFaithful J]
    (h : ‚àÄ {X‚ÇÄ : C‚ÇÄ} {S‚ÇÄ : Sieve X‚ÇÄ},
      Sieve.functorPushforward F S‚ÇÄ ‚àà J.sieves (F.obj X‚ÇÄ) ‚Üî S‚ÇÄ ‚àà J‚ÇÄ.sieves X‚ÇÄ) :
    IsDenseSubsite J‚ÇÄ J F where
  isCoverDense' := ‚ü®fun X ‚Ü¶ by
    refine J.superset_covering ?_ ((F.oneHypercoverDenseData J‚ÇÄ J X).mem‚ÇÄ)
    rintro Y _ ‚ü®_, a, _, h, rfl‚ü©
    cases' h with i
    exact ‚ü®{ fac := rfl}‚ü©‚ü©
  functorPushforward_mem_iff := h

end

variable [IsDenseSubsite J‚ÇÄ J F]

namespace IsDenseSubsite

variable {J‚ÇÄ} (G‚ÇÄ : Sheaf J‚ÇÄ A)

include J in
lemma map_eq_of_eq {X‚ÇÄ Y‚ÇÄ : C‚ÇÄ} (f‚ÇÅ f‚ÇÇ : X‚ÇÄ ‚ü∂ Y‚ÇÄ)
    (h : F.map f‚ÇÅ = F.map f‚ÇÇ) :
    G‚ÇÄ.val.map f‚ÇÅ.op = G‚ÇÄ.val.map f‚ÇÇ.op :=
  Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
    ‚ü®_, IsDenseSubsite.equalizer_mem J‚ÇÄ J F _ _ h‚ü© _ _ (by
      rintro ‚ü®W‚ÇÄ, a, ha‚ü©
      dsimp at ha ‚ä¢
      simp only [‚Üê Functor.map_comp, ‚Üê op_comp, ha])

noncomputable def mapPreimage {X‚ÇÄ Y‚ÇÄ : C‚ÇÄ} (f : F.obj X‚ÇÄ ‚ü∂ F.obj Y‚ÇÄ) :
    G‚ÇÄ.val.obj (op Y‚ÇÄ) ‚ü∂ G‚ÇÄ.val.obj (op X‚ÇÄ) :=
  G‚ÇÄ.2.amalgamate
    ‚ü®_, imageSieve_mem J‚ÇÄ J F f‚ü© (fun ‚ü®W‚ÇÄ, a, ha‚ü© ‚Ü¶ G‚ÇÄ.val.map ha.choose.op) (by
      rintro ‚ü®W‚ÇÄ, a, ha‚ü© ‚ü®W‚ÇÄ', a', ha'‚ü© ‚ü®T‚ÇÄ, p‚ÇÅ, p‚ÇÇ, fac‚ü©
      rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp, ‚Üê op_comp, ‚Üê op_comp]
      apply map_eq_of_eq F J
      rw [Functor.map_comp, Functor.map_comp, ha.choose_spec, ha'.choose_spec,
        ‚Üê Functor.map_comp_assoc, ‚Üê Functor.map_comp_assoc, fac])

lemma mapPreimage_map_of_fac {X‚ÇÄ Y‚ÇÄ Z‚ÇÄ : C‚ÇÄ} (f : F.obj X‚ÇÄ ‚ü∂ F.obj Y‚ÇÄ)
    (p : Z‚ÇÄ ‚ü∂ X‚ÇÄ) (g : Z‚ÇÄ ‚ü∂ Y‚ÇÄ) (fac : F.map p ‚â´ f = F.map g) :
    mapPreimage F J G‚ÇÄ f ‚â´ G‚ÇÄ.val.map p.op = G‚ÇÄ.val.map g.op :=
  Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
    ‚ü®_, J‚ÇÄ.pullback_stable p (imageSieve_mem J‚ÇÄ J F f)‚ü© _ _ (by
      rintro ‚ü®W‚ÇÄ, a, ha‚ü©
      dsimp at ha ‚ä¢
      rw [assoc, ‚Üê Functor.map_comp, ‚Üê op_comp, mapPreimage]
      rw [G‚ÇÄ.2.amalgamate_map ‚ü®_, imageSieve_mem J‚ÇÄ J F f‚ü©
        (fun ‚ü®W‚ÇÄ, a, ha‚ü© ‚Ü¶ G‚ÇÄ.val.map ha.choose.op) _ ‚ü®W‚ÇÄ, a ‚â´ p, ha‚ü©,
        ‚Üê Functor.map_comp, ‚Üê op_comp]
      apply map_eq_of_eq F J
      rw [ha.choose_spec, Functor.map_comp_assoc, Functor.map_comp, fac])

lemma mapPreimage_of_eq {X‚ÇÄ Y‚ÇÄ : C‚ÇÄ} (f : F.obj X‚ÇÄ ‚ü∂ F.obj Y‚ÇÄ)
    (g : X‚ÇÄ ‚ü∂ Y‚ÇÄ) (h : F.map g = f) :
    mapPreimage F J G‚ÇÄ f = G‚ÇÄ.val.map g.op := by
  simpa using mapPreimage_map_of_fac F J G‚ÇÄ f (ùüô _) g (by simpa using h.symm)

@[simp]
lemma mapPreimage_map {X‚ÇÄ Y‚ÇÄ : C‚ÇÄ} (f : X‚ÇÄ ‚ü∂ Y‚ÇÄ) :
    mapPreimage F J G‚ÇÄ (F.map f) = G‚ÇÄ.val.map f.op :=
  mapPreimage_of_eq F J G‚ÇÄ (F.map f) f rfl

@[simp]
lemma mapPreimage_id (X‚ÇÄ : C‚ÇÄ) :
    mapPreimage F J G‚ÇÄ (ùüô (F.obj X‚ÇÄ)) = ùüô _ := by
  rw [‚Üê F.map_id, mapPreimage_map, op_id, map_id]

@[reassoc]
lemma mapPreimage_comp {X‚ÇÄ Y‚ÇÄ Z‚ÇÄ : C‚ÇÄ} (f : F.obj X‚ÇÄ ‚ü∂ F.obj Y‚ÇÄ)
    (g : F.obj Y‚ÇÄ ‚ü∂ F.obj Z‚ÇÄ) :
    mapPreimage F J G‚ÇÄ (f ‚â´ g) = mapPreimage F J G‚ÇÄ g ‚â´ mapPreimage F J G‚ÇÄ f :=
  Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
    ‚ü®_, imageSieve_mem J‚ÇÄ J F f‚ü© _ _ (by
      rintro ‚ü®T‚ÇÄ, a, ‚ü®b, fac‚ÇÅ‚ü©‚ü©
      apply Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
        ‚ü®_, J‚ÇÄ.pullback_stable b (imageSieve_mem J‚ÇÄ J F g)‚ü©
      rintro ‚ü®U‚ÇÄ, c, ‚ü®d, fac‚ÇÇ‚ü©‚ü©
      dsimp
      simp only [assoc, ‚Üê Functor.map_comp, ‚Üê op_comp]
      rw [mapPreimage_map_of_fac F J G‚ÇÄ (f ‚â´ g) (c ‚â´ a) d,
        mapPreimage_map_of_fac F J G‚ÇÄ f (c ‚â´ a) (c ‚â´ b),
        mapPreimage_map_of_fac F J G‚ÇÄ g (c ‚â´ b) d]
      all_goals
        simp only [Functor.map_comp, assoc, fac‚ÇÅ, fac‚ÇÇ])

@[reassoc]
lemma mapPreimage_comp_map {X‚ÇÄ Y‚ÇÄ Z‚ÇÄ : C‚ÇÄ} (f : F.obj X‚ÇÄ ‚ü∂ F.obj Y‚ÇÄ)
    (g : Z‚ÇÄ ‚ü∂ X‚ÇÄ) :
    mapPreimage F J G‚ÇÄ f ‚â´ G‚ÇÄ.val.map g.op =
      mapPreimage F J G‚ÇÄ (F.map g ‚â´ f) := by
  rw [mapPreimage_comp, mapPreimage_map]

end IsDenseSubsite

namespace OneHypercoverDenseData

variable {F J‚ÇÄ J}

section

variable {X : C} (data : F.OneHypercoverDenseData J‚ÇÄ J X)

lemma mem‚ÇÅ (i‚ÇÅ i‚ÇÇ : data.I‚ÇÄ) {W : C} (p‚ÇÅ : W ‚ü∂ F.obj (data.X i‚ÇÅ)) (p‚ÇÇ : W ‚ü∂ F.obj (data.X i‚ÇÇ))
    (w : p‚ÇÅ ‚â´ data.f i‚ÇÅ = p‚ÇÇ ‚â´ data.f i‚ÇÇ) : data.toPreOneHypercover.sieve‚ÇÅ p‚ÇÅ p‚ÇÇ ‚àà J W := by
  have := IsDenseSubsite.isCoverDense J‚ÇÄ J F
  let S := Sieve.bind (Sieve.coverByImage F W).arrows
    (fun Y f hf ‚Ü¶ ((F.imageSieve (hf.some.map ‚â´ p‚ÇÅ) ‚äì
        F.imageSieve (hf.some.map ‚â´ p‚ÇÇ)).functorPushforward F).pullback hf.some.lift)
  let T := Sieve.bind S.arrows (fun Z g hg ‚Ü¶ by
    letI str := Presieve.getFunctorPushforwardStructure (Presieve.bindStruct hg).hg
    exact Sieve.pullback str.lift
      (Sieve.functorPushforward F (data.sieve‚ÇÅ‚ÇÄ str.cover.1.choose str.cover.2.choose)))
  have hS : S ‚àà J W := by
    apply J.bind_covering
    ¬∑ apply is_cover_of_isCoverDense
    ¬∑ intro Y f hf
      apply J.pullback_stable
      rw [Functor.functorPushforward_mem_iff J‚ÇÄ]
      apply J‚ÇÄ.intersection_covering
      all_goals apply IsDenseSubsite.imageSieve_mem J‚ÇÄ J
  have hT : T ‚àà J W := J.bind_covering hS (fun Z g hg ‚Ü¶ by
    apply J.pullback_stable
    rw [Functor.functorPushforward_mem_iff J‚ÇÄ]
    let str := Presieve.getFunctorPushforwardStructure (Presieve.bindStruct hg).hg
    apply data.mem‚ÇÅ‚ÇÄ
    simp only [str.cover.1.choose_spec, str.cover.2.choose_spec, assoc, w])
  refine J.superset_covering ?_ hT
  rintro U f ‚ü®V, a, b, hb, h, _, rfl‚ü©
  let str := Presieve.getFunctorPushforwardStructure (Presieve.bindStruct hb).hg
  obtain ‚ü®W‚ÇÄ, c : _ ‚ü∂ _, d, ‚ü®j, e, h‚ÇÅ, h‚ÇÇ‚ü©, fac‚ü© := h
  dsimp
  refine ‚ü®j, d ‚â´ F.map e, ?_, ?_‚ü©
  ¬∑ rw [assoc, assoc, ‚Üê F.map_comp, ‚Üê h‚ÇÅ, F.map_comp, ‚Üê reassoc_of% fac,
      str.cover.1.choose_spec, ‚Üê reassoc_of% str.fac,
      Presieve.CoverByImageStructure.fac_assoc,
      Presieve.BindStruct.fac_assoc]
  ¬∑ rw [assoc, assoc, ‚Üê F.map_comp, ‚Üê h‚ÇÇ, F.map_comp, ‚Üê reassoc_of% fac,
      str.cover.2.choose_spec, ‚Üê reassoc_of% str.fac,
      Presieve.CoverByImageStructure.fac_assoc,
      Presieve.BindStruct.fac_assoc]

@[simps toPreOneHypercover]
def toOneHypercover {X : C} (data : F.OneHypercoverDenseData J‚ÇÄ J X) :
    J.OneHypercover X where
  toPreOneHypercover := data.toPreOneHypercover
  mem‚ÇÄ := data.mem‚ÇÄ
  mem‚ÇÅ := data.mem‚ÇÅ

variable {X : C} (data : F.OneHypercoverDenseData J‚ÇÄ J X) {X‚ÇÄ : C‚ÇÄ} (f : F.obj X‚ÇÄ ‚ü∂ X)

structure SieveStruct {Y‚ÇÄ : C‚ÇÄ} (g : Y‚ÇÄ ‚ü∂ X‚ÇÄ) where
  i‚ÇÄ : data.I‚ÇÄ
  q : F.obj Y‚ÇÄ ‚ü∂ F.obj (data.X i‚ÇÄ)
  fac : q ‚â´ data.f i‚ÇÄ = F.map g ‚â´ f := by simp

@[simps]
def sieve : Sieve X‚ÇÄ where
  arrows Y‚ÇÄ g := Nonempty (SieveStruct data f g)
  downward_closed := by
    rintro Y‚ÇÄ Z‚ÇÄ g ‚ü®h‚ü© p
    exact ‚ü®{ i‚ÇÄ := h.i‚ÇÄ, q := F.map p ‚â´ h.q, fac := by rw [assoc, h.fac, map_comp_assoc]}‚ü©

lemma _root_.CategoryTheory.Functor.functorPushforward_imageSieve_inter_mem
    {C D : Type*} [Category C] [Category D] (G : C ‚•§ D) (K : GrothendieckTopology D)
    [G.IsLocallyFull K] {U V‚ÇÅ V‚ÇÇ} (f‚ÇÅ : G.obj U ‚ü∂ G.obj V‚ÇÅ) (f‚ÇÇ : G.obj U ‚ü∂ G.obj V‚ÇÇ) :
    (G.imageSieve f‚ÇÅ ‚äì G.imageSieve f‚ÇÇ).functorPushforward G ‚àà K _ := by
  refine K.superset_covering ?_
    (K.bind_covering (G.functorPushforward_imageSieve_mem K f‚ÇÅ)
      (R := fun W p hp ‚Ü¶ by
        letI str := Presieve.getFunctorPushforwardStructure hp
        exact ((G.imageSieve (G.map str.premap ‚â´ f‚ÇÇ)).functorPushforward G).pullback
          str.lift)
      (fun W p hp ‚Ü¶ by
        apply K.pullback_stable
        apply G.functorPushforward_imageSieve_mem))
  rintro W _ ‚ü®T, a, b, hb, ‚ü®P, c, d, ‚ü®x, w‚ü©, fac‚ü©, rfl‚ü©
  let str := Presieve.getFunctorPushforwardStructure hb
  refine ‚ü®P, c ‚â´ str.premap, d, ‚ü®‚ü®c ‚â´ str.cover.choose, ?_‚ü©, ‚ü®x, ?_‚ü©‚ü©, ?_‚ü©
  ¬∑ rw [G.map_comp, G.map_comp_assoc, str.cover.choose_spec]
  ¬∑ rw [G.map_comp_assoc, w]
  ¬∑ rw [G.map_comp, ‚Üê reassoc_of% fac]
    conv_lhs => rw [str.fac]

lemma sieve_mem : sieve data f ‚àà J‚ÇÄ X‚ÇÄ := by
  have := IsDenseSubsite.isCoverDense J‚ÇÄ J F
  have := IsDenseSubsite.isLocallyFull J‚ÇÄ J F
  rw [‚Üê functorPushforward_mem_iff J‚ÇÄ J F]
  let R : ‚¶ÉW : C‚¶Ñ ‚Üí ‚¶Ép : W ‚ü∂ F.obj X‚ÇÄ‚¶Ñ ‚Üí
    (Sieve.pullback f data.toOneHypercover.sieve‚ÇÄ).arrows p ‚Üí Sieve W := fun W p hp ‚Ü¶
      Sieve.bind (Sieve.coverByImage F W).arrows (fun U œÄ hœÄ ‚Ü¶
        Sieve.pullback hœÄ.some.lift
          (Sieve.functorPushforward F (F.imageSieve (hœÄ.some.map ‚â´ p))))
  refine J.superset_covering ?_
    (J.bind_covering (J.pullback_stable f (data.toOneHypercover.mem‚ÇÄ)) (R := R)
    (fun W p hp ‚Ü¶ J.bind_covering (F.is_cover_of_isCoverDense J W) ?_))
  ¬∑ rintro W' _ ‚ü®W, _, p, hp, ‚ü®Y‚ÇÄ, a, b, hb, ‚ü®U, c, d, ‚ü®x‚ÇÅ, w‚ÇÅ‚ü©, fac‚ü©, rfl‚ü©, rfl‚ü©
    have hp' := Sieve.ofArrows.fac hp
    dsimp at hp'
    refine ‚ü®U, x‚ÇÅ, d, ‚ü®Sieve.ofArrows.i hp,
      F.map c ‚â´ (Nonempty.some hb).map ‚â´ Sieve.ofArrows.h hp, ?_‚ü©, ?_‚ü©
    ¬∑ rw [w‚ÇÅ, assoc, assoc, assoc, assoc, ‚Üê hp']
    ¬∑ rw [w‚ÇÅ, assoc, ‚Üê reassoc_of% fac, hb.some.fac_assoc]
  ¬∑ intro U œÄ hœÄ
    apply J.pullback_stable
    apply functorPushforward_imageSieve_mem

end

section

variable (data : ‚àÄ X, F.OneHypercoverDenseData J‚ÇÄ J X) (G : C·µí·µñ ‚•§ A)

namespace isSheaf_iff

variable {data G} (hG‚ÇÄ : Presheaf.IsSheaf J‚ÇÄ (F.op ‚ãô G))
  (hG : ‚àÄ (X : C), IsLimit ((data X).toOneHypercover.multifork G))
  {X : C} (S : J.Cover X)

section

variable {S} (s : Multifork (S.index G))

noncomputable def liftAux (i : (data X).I‚ÇÄ) : s.pt ‚ü∂ G.obj (op (F.obj ((data X).X i))) :=
  hG‚ÇÄ.amalgamate ‚ü®_, cover_lift F J‚ÇÄ _ (J.pullback_stable ((data X).f i) S.2)‚ü©
      (fun ‚ü®W‚ÇÄ, a, ha‚ü© ‚Ü¶ s.Œπ ‚ü®_, F.map a ‚â´ (data X).f i, ha‚ü©) (by
        rintro ‚ü®W‚ÇÄ, a, ha‚ü© ‚ü®Z‚ÇÄ, b, hb‚ü© ‚ü®U‚ÇÄ, p‚ÇÅ, p‚ÇÇ, fac‚ü©
        exact s.condition ‚ü®‚ü®_, _, ha‚ü©, ‚ü®_, _, hb‚ü©, ‚ü®_, F.map p‚ÇÅ, F.map p‚ÇÇ, by
          simp only [‚Üê Functor.map_comp_assoc, fac]‚ü©‚ü©)

lemma liftAux_fac {i : (data X).I‚ÇÄ} {W‚ÇÄ : C‚ÇÄ} (a : W‚ÇÄ ‚ü∂ (data X).X i)
    (ha : S (F.map a ‚â´ (data X).f i)) :
    liftAux hG‚ÇÄ s i ‚â´ G.map (F.map a).op = s.Œπ ‚ü®_, F.map a ‚â´ (data X).f i, ha‚ü© :=
  hG‚ÇÄ.amalgamate_map _ _ _ ‚ü®W‚ÇÄ, a, ha‚ü©

noncomputable def lift : s.pt ‚ü∂ G.obj (op X) :=
  Multifork.IsLimit.lift (hG X) (fun i ‚Ü¶ liftAux hG‚ÇÄ s i) (by
    rintro ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, j‚ü©
    dsimp at i‚ÇÅ i‚ÇÇ j ‚ä¢
    refine Presheaf.IsSheaf.hom_ext
      hG‚ÇÄ ‚ü®_, cover_lift F J‚ÇÄ _
        (J.pullback_stable (F.map ((data X).p‚ÇÅ j) ‚â´ (data X).f i‚ÇÅ) S.2)‚ü© _ _ ?_
    rintro ‚ü®W‚ÇÄ, a, ha : S _‚ü©
    dsimp
    simp only [assoc, ‚Üê Functor.map_comp, ‚Üê op_comp]
    have ha‚ÇÅ : S (F.map (a ‚â´ (data X).p‚ÇÅ j) ‚â´ (data X).f i‚ÇÅ) := by simpa using ha
    have ha‚ÇÇ : S (F.map (a ‚â´ (data X).p‚ÇÇ j) ‚â´ (data X).f i‚ÇÇ) := by
      rw [Functor.map_comp_assoc, ‚Üê (data X).w j]
      exact ha
    rw [liftAux_fac _ _ _ ha‚ÇÅ, liftAux_fac _ _ _ ha‚ÇÇ]
    congr 2
    rw [map_comp_assoc, map_comp_assoc, (data X).w j])

@[reassoc]
lemma lift_map (i : (data X).I‚ÇÄ) :
    lift hG‚ÇÄ hG s ‚â´ G.map ((data X).f i).op = liftAux hG‚ÇÄ s i :=
  Multifork.IsLimit.fac _ _ _ _

@[reassoc]
lemma fac (a : S.Arrow) :
    lift hG‚ÇÄ hG s ‚â´ G.map a.f.op = s.Œπ a :=
  Multifork.IsLimit.hom_ext (hG _) (fun i ‚Ü¶
    Presheaf.IsSheaf.hom_ext hG‚ÇÄ
      ‚ü®_, cover_lift F J‚ÇÄ _
        (J.pullback_stable ((data a.Y).f i ‚â´ a.f) (data X).mem‚ÇÄ)‚ü© _ _ (by
      rintro ‚ü®X‚ÇÄ, b, ‚ü®_, c, _, h, fac‚ÇÅ‚ü©‚ü©
      cases' h with j
      refine Presheaf.IsSheaf.hom_ext hG‚ÇÄ
        ‚ü®_, IsDenseSubsite.imageSieve_mem J‚ÇÄ J F c‚ü© _ _ ?_
      rintro ‚ü®Y‚ÇÄ, d, e, fac‚ÇÇ‚ü©
      dsimp at i j c fac‚ÇÅ ‚ä¢
      have he : S (F.map e ‚â´ (data X).f j) := by
        rw [fac‚ÇÇ, assoc, fac‚ÇÅ]
        simpa only [assoc] using S.1.downward_closed a.hf (F.map d ‚â´ F.map b ‚â´ (data a.Y).f i)
      simp only [assoc, ‚Üê Functor.map_comp, ‚Üê op_comp, ‚Üê fac‚ÇÅ]
      conv_lhs => simp only [op_comp, Functor.map_comp, assoc, lift_map_assoc]
      rw [‚Üê Functor.map_comp, ‚Üê op_comp, ‚Üê fac‚ÇÇ, liftAux_fac _ _ _ he]
      simpa using s.condition ‚ü®{ hf := he }, a,
        ‚ü®_, ùüô _, F.map d ‚â´ F.map b ‚â´ (data a.Y).f i, by
          simp only [fac‚ÇÅ, fac‚ÇÇ, assoc, id_comp]‚ü©‚ü©))

variable {s}

include hG hG‚ÇÄ in
lemma hom_ext {f‚ÇÅ f‚ÇÇ : s.pt ‚ü∂ G.obj (op X)}
    (h : ‚àÄ (a : S.Arrow), f‚ÇÅ ‚â´ G.map a.f.op = f‚ÇÇ ‚â´ G.map a.f.op) : f‚ÇÅ = f‚ÇÇ :=
  Multifork.IsLimit.hom_ext (hG X) (fun i ‚Ü¶ by
    refine Presheaf.IsSheaf.hom_ext hG‚ÇÄ
      ‚ü®_, cover_lift F J‚ÇÄ _ (J.pullback_stable ((data X).f i) S.2)‚ü© _ _ ?_
    rintro ‚ü®X‚ÇÄ, a, ha‚ü©
    dsimp
    simp only [assoc, ‚Üê Functor.map_comp, ‚Üê op_comp]
    exact h ‚ü®_, _, ha‚ü©)

end

noncomputable def isLimit : IsLimit (S.multifork G) :=
  Multifork.IsLimit.mk _
    (lift hG‚ÇÄ hG ) (fac hG‚ÇÄ hG) (fun s _ hm ‚Ü¶
      hom_ext hG‚ÇÄ hG (fun a ‚Ü¶ (hm a).trans (fac hG‚ÇÄ hG s a).symm))

end isSheaf_iff

lemma isSheaf_iff :
    Presheaf.IsSheaf J G ‚Üî
      Presheaf.IsSheaf J‚ÇÄ (F.op ‚ãô G) ‚àß
        ‚àÄ (X : C), Nonempty (IsLimit ((data X).toOneHypercover.multifork G)) := by
  refine ‚ü®fun hG ‚Ü¶ ‚ü®op_comp_isSheaf F J‚ÇÄ J ‚ü®_, hG‚ü©,
    fun X ‚Ü¶ ‚ü®(data X).toOneHypercover.isLimitMultifork ‚ü®G, hG‚ü©‚ü©‚ü©, fun ‚ü®hG‚ÇÄ, hG‚ü© ‚Ü¶ ?_‚ü©
  rw [Presheaf.isSheaf_iff_multifork]
  replace hG := fun X ‚Ü¶ (hG X).some
  exact fun X S ‚Ü¶ ‚ü®isSheaf_iff.isLimit hG‚ÇÄ hG S‚ü©

end

section

variable (data : ‚àÄ X, F.OneHypercoverDenseData J‚ÇÄ J X)
  [HasLimitsOfSize.{w, w} A]

namespace EssSurj

variable (G‚ÇÄ : Sheaf J‚ÇÄ A)

noncomputable def presheafObj (X : C) : A :=
  multiequalizer ((data X).multicospanIndex G‚ÇÄ.val)

noncomputable def presheafObjœÄ (X : C) (i : (data X).I‚ÇÄ) :
    presheafObj data G‚ÇÄ X ‚ü∂ G‚ÇÄ.val.obj (op ((data X).X i)) :=
  Multiequalizer.Œπ ((data X).multicospanIndex G‚ÇÄ.val) i

omit [IsDenseSubsite J‚ÇÄ J F] in
variable {data G‚ÇÄ} in
@[ext]
lemma presheafObj_hom_ext {X : C} {Z : A} {f g : Z ‚ü∂ presheafObj data G‚ÇÄ X}
    (h : ‚àÄ (i : (data X).I‚ÇÄ), f ‚â´ presheafObjœÄ data G‚ÇÄ X i = g ‚â´ presheafObjœÄ data G‚ÇÄ X i) :
    f = g :=
  Multiequalizer.hom_ext _ _ _ h

omit [IsDenseSubsite J‚ÇÄ J F] in
@[reassoc]
lemma presheafObj_condition (X : C) (i i' : (data X).I‚ÇÄ) (j : (data X).I‚ÇÅ i i') :
    presheafObjœÄ data G‚ÇÄ X i ‚â´ G‚ÇÄ.val.map ((data X).p‚ÇÅ j).op =
    presheafObjœÄ data G‚ÇÄ X i' ‚â´ G‚ÇÄ.val.map ((data X).p‚ÇÇ j).op :=
  Multiequalizer.condition ((data X).multicospanIndex G‚ÇÄ.val) ‚ü®‚ü®i, i'‚ü©, j‚ü©

lemma presheafObj_mapPreimage_condition
    (X : C) (i‚ÇÅ i‚ÇÇ : (data X).I‚ÇÄ) {Y‚ÇÄ : C‚ÇÄ}
    (p‚ÇÅ : F.obj Y‚ÇÄ ‚ü∂ F.obj ((data X).X i‚ÇÅ)) (p‚ÇÇ : F.obj Y‚ÇÄ ‚ü∂ F.obj ((data X).X i‚ÇÇ))
    (fac : p‚ÇÅ ‚â´ (data X).f i‚ÇÅ = p‚ÇÇ ‚â´ (data X).f i‚ÇÇ) :
    presheafObjœÄ data G‚ÇÄ X i‚ÇÅ ‚â´ IsDenseSubsite.mapPreimage F J G‚ÇÄ p‚ÇÅ =
      presheafObjœÄ data G‚ÇÄ X i‚ÇÇ ‚â´ IsDenseSubsite.mapPreimage F J G‚ÇÄ p‚ÇÇ := by
  refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond ‚ü®_,
    J‚ÇÄ.intersection_covering (IsDenseSubsite.imageSieve_mem J‚ÇÄ J F p‚ÇÅ)
      (IsDenseSubsite.imageSieve_mem J‚ÇÄ J F p‚ÇÇ)‚ü© _ _ ?_
  rintro ‚ü®W‚ÇÄ, a, ‚ü®b‚ÇÅ, h‚ÇÅ‚ü©, ‚ü®b‚ÇÇ, h‚ÇÇ‚ü©‚ü©
  refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
    ‚ü®_, (data X).mem‚ÇÅ‚ÇÄ i‚ÇÅ i‚ÇÇ b‚ÇÅ b‚ÇÇ (by simp only [h‚ÇÅ, h‚ÇÇ, assoc, fac])‚ü© _ _ ?_
  rintro ‚ü®U‚ÇÄ, c, ‚ü®j, t, fac‚ÇÅ, fac‚ÇÇ‚ü©‚ü©
  dsimp
  simp only [assoc, ‚Üê Functor.map_comp, ‚Üê op_comp]
  rw [IsDenseSubsite.mapPreimage_map_of_fac F J G‚ÇÄ p‚ÇÅ (c ‚â´ a) (c ‚â´ b‚ÇÅ)
      (by rw [map_comp_assoc, ‚Üê h‚ÇÅ, map_comp]),
    IsDenseSubsite.mapPreimage_map_of_fac F J G‚ÇÄ p‚ÇÇ (c ‚â´ a) (c ‚â´ b‚ÇÇ)
      (by rw [map_comp_assoc, ‚Üê h‚ÇÇ, map_comp]), fac‚ÇÅ, fac‚ÇÇ,
    op_comp, op_comp, map_comp, map_comp]
  apply presheafObj_condition_assoc

noncomputable abbrev presheafObjMultifork (X : C) :
    Multifork ((data X).multicospanIndex G‚ÇÄ.val) :=
  Multifork.ofŒπ _ (presheafObj data G‚ÇÄ X) (presheafObjœÄ data G‚ÇÄ X)
    (fun _ ‚Ü¶ presheafObj_condition _ _ _ _ _ _)

def _root_.CategoryTheory.Limits.Multifork.isoMk {C : Type*} [Category C]
    {I : MulticospanIndex C} {c‚ÇÅ c‚ÇÇ : Multifork I} (e : c‚ÇÅ.pt ‚âÖ c‚ÇÇ.pt)
    (h : ‚àÄ (i : I.L), c‚ÇÅ.Œπ i = e.hom ‚â´ c‚ÇÇ.Œπ i := by aesop_cat) : c‚ÇÅ ‚âÖ c‚ÇÇ :=
  Cones.ext e (by rintro (_ | _) <;> simp [h])

noncomputable def presheafObjIsLimit (X : C) :
    IsLimit (presheafObjMultifork data G‚ÇÄ X) :=
  IsLimit.ofIsoLimit (limit.isLimit _) (Multifork.isoMk (Iso.refl _))

namespace restriction

noncomputable def res {X : C} {X‚ÇÄ Y‚ÇÄ : C‚ÇÄ} {f : F.obj X‚ÇÄ ‚ü∂ X} {g : Y‚ÇÄ ‚ü∂ X‚ÇÄ}
    (h : SieveStruct (data X) f g) :
    presheafObj data G‚ÇÄ X ‚ü∂ G‚ÇÄ.val.obj (op Y‚ÇÄ) :=
  presheafObjœÄ data G‚ÇÄ X h.i‚ÇÄ ‚â´ IsDenseSubsite.mapPreimage F J G‚ÇÄ h.q

lemma res_eq_res {X : C} {X‚ÇÄ Y‚ÇÄ : C‚ÇÄ} {f : F.obj X‚ÇÄ ‚ü∂ X} {g : Y‚ÇÄ ‚ü∂ X‚ÇÄ}
    (h‚ÇÅ h‚ÇÇ : SieveStruct (data X) f g) :
    res data G‚ÇÄ h‚ÇÅ = res data G‚ÇÄ h‚ÇÇ := by
  refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
    ‚ü®_, J‚ÇÄ.intersection_covering (IsDenseSubsite.imageSieve_mem J‚ÇÄ J F h‚ÇÅ.q)
      (IsDenseSubsite.imageSieve_mem J‚ÇÄ J F h‚ÇÇ.q)‚ü© _ _ ?_
  rintro ‚ü®Z‚ÇÄ, a, ‚ü®b‚ÇÅ, w‚ÇÅ‚ü©, ‚ü®b‚ÇÇ, w‚ÇÇ‚ü©‚ü©
  refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
    ‚ü®_, (data X).mem‚ÇÅ‚ÇÄ h‚ÇÅ.i‚ÇÄ h‚ÇÇ.i‚ÇÄ b‚ÇÅ b‚ÇÇ (by rw [w‚ÇÅ, w‚ÇÇ, assoc, assoc, h‚ÇÅ.fac, h‚ÇÇ.fac])‚ü© _ _ ?_
  rintro ‚ü®W‚ÇÄ, c, hc‚ü©
  dsimp [res]
  simp only [assoc, ‚Üê Functor.map_comp, ‚Üê op_comp, IsDenseSubsite.mapPreimage_comp_map]
  apply presheafObj_mapPreimage_condition
  simp only [assoc, h‚ÇÅ.fac, h‚ÇÇ.fac]

end restriction

noncomputable def restriction {X : C} {X‚ÇÄ : C‚ÇÄ} (f : F.obj X‚ÇÄ ‚ü∂ X) :
    presheafObj data G‚ÇÄ X ‚ü∂ G‚ÇÄ.val.obj (op X‚ÇÄ) :=
  G‚ÇÄ.2.amalgamate ‚ü®_, (data X).sieve_mem f‚ü©
    (fun ‚ü®Y‚ÇÄ, g, hg‚ü© ‚Ü¶ restriction.res data G‚ÇÄ hg.some) (by
      rintro ‚ü®Z‚ÇÅ, g‚ÇÅ, ‚ü®h‚ÇÅ‚ü©‚ü© ‚ü®Z‚ÇÇ, g‚ÇÇ, ‚ü®h‚ÇÇ‚ü©‚ü© ‚ü®T‚ÇÄ, p‚ÇÅ, p‚ÇÇ, w‚ü©
      dsimp at g‚ÇÅ g‚ÇÇ p‚ÇÅ p‚ÇÇ w ‚ä¢
      rw [restriction.res_eq_res data G‚ÇÄ _ h‚ÇÅ, restriction.res_eq_res data G‚ÇÄ _ h‚ÇÇ]
      refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
        ‚ü®_, J‚ÇÄ.intersection_covering
          (IsDenseSubsite.imageSieve_mem J‚ÇÄ J F (F.map p‚ÇÅ ‚â´ h‚ÇÅ.q))
          (IsDenseSubsite.imageSieve_mem J‚ÇÄ J F (F.map p‚ÇÇ ‚â´ h‚ÇÇ.q))‚ü© _ _ ?_
      rintro ‚ü®W‚ÇÄ, a, ‚ü®q‚ÇÅ, w‚ÇÅ‚ü©, ‚ü®q‚ÇÇ, w‚ÇÇ‚ü©‚ü©
      refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
        ‚ü®_, (data X).mem‚ÇÅ‚ÇÄ h‚ÇÅ.i‚ÇÄ h‚ÇÇ.i‚ÇÄ q‚ÇÅ q‚ÇÇ (by
        simp only [w‚ÇÅ, w‚ÇÇ, assoc, h‚ÇÅ.fac, h‚ÇÇ.fac, ‚Üê Functor.map_comp_assoc, w])‚ü© _ _ ?_
      rintro ‚ü®U‚ÇÄ, b, hb‚ü©
      dsimp
      simp only [assoc, ‚Üê Functor.map_comp, ‚Üê op_comp, restriction.res,
        IsDenseSubsite.mapPreimage_comp_map]
      apply presheafObj_mapPreimage_condition
      simp only [assoc, h‚ÇÅ.fac, h‚ÇÇ.fac, ‚Üê Functor.map_comp_assoc, w])

lemma restriction_map {X : C} {X‚ÇÄ : C‚ÇÄ} (f : F.obj X‚ÇÄ ‚ü∂ X) {Y‚ÇÄ : C‚ÇÄ}
    (g : Y‚ÇÄ ‚ü∂ X‚ÇÄ) {i : (data X).I‚ÇÄ} (p : F.obj Y‚ÇÄ ‚ü∂ F.obj ((data X).X i))
    (fac : p ‚â´ (data X).f i = F.map g ‚â´ f) :
    restriction data G‚ÇÄ f ‚â´ G‚ÇÄ.val.map g.op =
      presheafObjœÄ data G‚ÇÄ X i ‚â´ IsDenseSubsite.mapPreimage F J G‚ÇÄ p := by
  have hg : (data X).sieve f g := ‚ü®i, p, fac‚ü©
  dsimp only [restriction]
  rw [G‚ÇÄ.2.amalgamate_map _ _ _ ‚ü®_, g, hg‚ü©]
  apply presheafObj_mapPreimage_condition
  rw [hg.some.fac, fac]

lemma restriction_eq_of_fac {X : C} {X‚ÇÄ : C‚ÇÄ} (f : F.obj X‚ÇÄ ‚ü∂ X)
    {i : (data X).I‚ÇÄ} (p : F.obj X‚ÇÄ ‚ü∂ F.obj ((data X).X i))
    (fac : p ‚â´ (data X).f i = f) :
    restriction data G‚ÇÄ f =
      presheafObjœÄ data G‚ÇÄ X i ‚â´ IsDenseSubsite.mapPreimage F J G‚ÇÄ p := by
  simpa using restriction_map data G‚ÇÄ f (ùüô _) p (by simpa using fac)

noncomputable def presheafMap {X Y : C} (f : X ‚ü∂ Y) :
    presheafObj data G‚ÇÄ Y ‚ü∂ presheafObj data G‚ÇÄ X :=
  Multiequalizer.lift _ _ (fun i‚ÇÄ ‚Ü¶ restriction data G‚ÇÄ ((data X).f i‚ÇÄ ‚â´ f)) (by
    rintro ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, j‚ü©
    obtain ‚ü®a, h‚ÇÅ, h‚ÇÇ‚ü© : ‚àÉ a, a = F.map ((data X).p‚ÇÅ j) ‚â´ (data X).f i‚ÇÅ ‚â´ f ‚àß
        a = F.map ((data X).p‚ÇÇ j) ‚â´ (data X).f i‚ÇÇ ‚â´ f := ‚ü®_, rfl, (data X).w_assoc j _‚ü©
    refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
      ‚ü®_, cover_lift F J‚ÇÄ _ (J.pullback_stable a (data Y).mem‚ÇÄ)‚ü© _ _ ?_
    rintro ‚ü®W‚ÇÄ, b, ‚ü®_, p, _, h, fac‚ü©‚ü©
    cases' h with i
    dsimp at fac ‚ä¢
    simp only [assoc, ‚Üê map_comp, ‚Üê op_comp]
    rw [restriction_map (p := p), restriction_map (p := p)]
    ¬∑ rw [fac, h‚ÇÇ, map_comp_assoc]
    ¬∑ rw [fac, h‚ÇÅ, map_comp_assoc])

@[reassoc (attr := simp)]
lemma presheafMap_œÄ {X Y : C} (f : X ‚ü∂ Y) (i : (data X).I‚ÇÄ) :
    presheafMap data G‚ÇÄ f ‚â´ presheafObjœÄ data G‚ÇÄ X i =
      restriction data G‚ÇÄ ((data X).f i ‚â´ f) :=
  Multiequalizer.lift_Œπ _ _ _ _ _

@[reassoc (attr := simp)]
lemma presheafMap_restriction {X Y : C} {X‚ÇÄ : C‚ÇÄ} (f : F.obj X‚ÇÄ ‚ü∂ X) (g : X ‚ü∂ Y) :
    presheafMap data G‚ÇÄ g ‚â´ restriction data G‚ÇÄ f = restriction data G‚ÇÄ (f ‚â´ g) := by
  refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond ‚ü®_, GrothendieckTopology.bind_covering
    (hS := cover_lift F J‚ÇÄ J (J.pullback_stable f (data X).mem‚ÇÄ)) (hR := fun Y‚ÇÄ a ha ‚Ü¶
      cover_lift F J‚ÇÄ J (J.pullback_stable
        (Sieve.ofArrows.h ha ‚â´ (data X).f (Sieve.ofArrows.i ha) ‚â´ g) (data Y).mem‚ÇÄ))‚ü© _ _ ?_
  rintro ‚ü®U‚ÇÄ, _, Y‚ÇÄ, c, d, hd, hc, rfl‚ü©
  have hc' := Sieve.ofArrows.fac hc
  have hd' := Sieve.ofArrows.fac hd
  dsimp at hc hd hc' hd' ‚ä¢
  rw [assoc, ‚Üê op_comp, restriction_map (i := Sieve.ofArrows.i hd)
    (p := F.map c ‚â´ Sieve.ofArrows.h hd),
    restriction_map (i := Sieve.ofArrows.i hc) (p := Sieve.ofArrows.h hc),
    presheafMap_œÄ_assoc]; rotate_left
  ¬∑ simp only [map_comp_assoc, hc', reassoc_of% hd']
  ¬∑ simp only [assoc, map_comp_assoc, hd']
  dsimp
  have := J‚ÇÄ.intersection_covering (IsDenseSubsite.imageSieve_mem J‚ÇÄ J F (Sieve.ofArrows.h hc))
    (J‚ÇÄ.pullback_stable c (IsDenseSubsite.imageSieve_mem J‚ÇÄ J F (Sieve.ofArrows.h hd)))
  refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond ‚ü®_, this‚ü© _ _ ?_
  rintro ‚ü®V‚ÇÄ, a, ‚ü®x‚ÇÅ, fac‚ÇÅ‚ü©, ‚ü®x‚ÇÇ, fac‚ÇÇ‚ü©‚ü©
  dsimp
  rw [assoc, assoc,
    IsDenseSubsite.mapPreimage_map_of_fac F J G‚ÇÄ _ _ x‚ÇÇ (by simpa using fac‚ÇÇ.symm),
    IsDenseSubsite.mapPreimage_map_of_fac F J G‚ÇÄ _ _ x‚ÇÅ fac‚ÇÅ.symm]
  rw [restriction_map data G‚ÇÄ _ _ (F.map x‚ÇÅ)
    (by rw [fac‚ÇÅ, fac‚ÇÇ, assoc, assoc, map_comp_assoc, ‚Üê hc']),
    IsDenseSubsite.mapPreimage_map]

lemma presheafMap_id (X : C) :
    presheafMap data G‚ÇÄ (ùüô X) = ùüô _ := by
  ext i
  rw [presheafMap_œÄ, comp_id, id_comp,
    restriction_eq_of_fac data G‚ÇÄ ((data X).f i) (ùüô _) (by simp),
    IsDenseSubsite.mapPreimage_id, comp_id]

lemma presheafMap_comp {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    presheafMap data G‚ÇÄ (f ‚â´ g) = presheafMap data G‚ÇÄ g ‚â´ presheafMap data G‚ÇÄ f := by
  ext i
  dsimp
  rw [assoc, presheafMap_œÄ, presheafMap_œÄ, presheafMap_restriction, assoc]

@[simps]
noncomputable def presheaf : C·µí·µñ ‚•§ A where
  obj X := presheafObj data G‚ÇÄ X.unop
  map f := presheafMap data G‚ÇÄ f.unop
  map_id X := presheafMap_id data G‚ÇÄ X.unop
  map_comp f g := presheafMap_comp data G‚ÇÄ g.unop f.unop

namespace presheafObjObjIso

variable (X‚ÇÄ : C‚ÇÄ)

noncomputable def hom : (presheaf data G‚ÇÄ).obj (op (F.obj X‚ÇÄ)) ‚ü∂ G‚ÇÄ.val.obj (op X‚ÇÄ) :=
  G‚ÇÄ.2.amalgamate ‚ü®_, cover_lift F J‚ÇÄ _ (data (F.obj X‚ÇÄ)).mem‚ÇÄ‚ü© (fun ‚ü®W‚ÇÄ, a, ha‚ü© ‚Ü¶
    presheafObjœÄ data G‚ÇÄ _ (Sieve.ofArrows.i ha) ‚â´
      IsDenseSubsite.mapPreimage F J G‚ÇÄ (Sieve.ofArrows.h ha)) (by
        rintro ‚ü®W‚ÇÄ, a, ha‚ü© ‚ü®T‚ÇÄ, b, hb‚ü© ‚ü®U‚ÇÄ, p‚ÇÅ, p‚ÇÇ, fac‚ü©
        have ha' := Sieve.ofArrows.fac ha
        have hb' := Sieve.ofArrows.fac hb
        dsimp at ha hb ha' hb' p‚ÇÅ p‚ÇÇ fac ‚ä¢
        rw [assoc, assoc, IsDenseSubsite.mapPreimage_comp_map,
          IsDenseSubsite.mapPreimage_comp_map,
          ‚Üê restriction_eq_of_fac data G‚ÇÄ (F.map (p‚ÇÅ ‚â´ a))
            (F.map p‚ÇÅ ‚â´ Sieve.ofArrows.h ha) (by rw [assoc, ‚Üê ha', map_comp]),
          restriction_eq_of_fac data G‚ÇÄ (F.map (p‚ÇÅ ‚â´ a))
            (F.map p‚ÇÇ ‚â´ Sieve.ofArrows.h hb) (by rw [assoc, ‚Üê hb', fac, map_comp])])

variable {X‚ÇÄ}

@[reassoc]
lemma hom_map {W‚ÇÄ : C‚ÇÄ} (a : W‚ÇÄ ‚ü∂ X‚ÇÄ) {i : (data (F.obj X‚ÇÄ)).I‚ÇÄ}
    (p : F.obj W‚ÇÄ ‚ü∂ F.obj ((data (F.obj X‚ÇÄ)).X i))
    (fac : p ‚â´ (data (F.obj X‚ÇÄ)).f i = F.map a) :
    hom data G‚ÇÄ X‚ÇÄ ‚â´ G‚ÇÄ.val.map a.op =
      presheafObjœÄ data G‚ÇÄ _ i ‚â´ IsDenseSubsite.mapPreimage F J G‚ÇÄ p := by
  have ha : Sieve.functorPullback F (data (F.obj X‚ÇÄ)).toPreOneHypercover.sieve‚ÇÄ a :=
    ‚ü®_, p, _, ‚ü®i‚ü©, fac‚ü©
  exact (G‚ÇÄ.2.amalgamate_map _ _ _ ‚ü®W‚ÇÄ, a, ha‚ü©).trans
    (presheafObj_mapPreimage_condition _ _ _ _ _ _ _
      ((Sieve.ofArrows.fac ha).symm.trans fac.symm))

@[reassoc]
lemma hom_mapPreimage {W‚ÇÄ : C‚ÇÄ} (a : F.obj W‚ÇÄ ‚ü∂ F.obj X‚ÇÄ) {i : (data (F.obj X‚ÇÄ)).I‚ÇÄ}
    (p : F.obj W‚ÇÄ ‚ü∂ F.obj ((data (F.obj X‚ÇÄ)).X i))
    (fac : p ‚â´ (data (F.obj X‚ÇÄ)).f i = a) :
    hom data G‚ÇÄ X‚ÇÄ ‚â´ IsDenseSubsite.mapPreimage F J G‚ÇÄ a =
      presheafObjœÄ data G‚ÇÄ _ i ‚â´ IsDenseSubsite.mapPreimage F J G‚ÇÄ p := by
  refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
      ‚ü®_, IsDenseSubsite.imageSieve_mem J‚ÇÄ J F a‚ü© _ _ ?_
  rintro ‚ü®T‚ÇÄ, b, ‚ü®c, hc‚ü©‚ü©
  dsimp
  simp only [assoc, IsDenseSubsite.mapPreimage_comp_map, ‚Üê hc,
    IsDenseSubsite.mapPreimage_map]
  exact hom_map data G‚ÇÄ c _ (by simp only [assoc, fac, hc])

variable (X‚ÇÄ)

noncomputable def inv : G‚ÇÄ.val.obj (op X‚ÇÄ) ‚ü∂ (presheaf data G‚ÇÄ).obj (op (F.obj X‚ÇÄ)) :=
  Multiequalizer.lift _ _
    (fun i ‚Ü¶ IsDenseSubsite.mapPreimage F J G‚ÇÄ ((data (F.obj X‚ÇÄ)).f i)) (by
      rintro ‚ü®‚ü®i, i'‚ü©, j‚ü©
      dsimp
      rw [IsDenseSubsite.mapPreimage_comp_map, IsDenseSubsite.mapPreimage_comp_map,
        (data (F.obj X‚ÇÄ)).w j])

@[reassoc (attr := simp)]
lemma inv_œÄ (i : (data (F.obj X‚ÇÄ)).I‚ÇÄ) :
    inv data G‚ÇÄ X‚ÇÄ ‚â´ presheafObjœÄ data G‚ÇÄ (F.obj X‚ÇÄ) i =
      IsDenseSubsite.mapPreimage F J G‚ÇÄ ((data (F.obj X‚ÇÄ)).f i) :=
  Multiequalizer.lift_Œπ _ _ _ _ _

@[reassoc (attr := simp)]
lemma inv_restriction {Y‚ÇÄ : C‚ÇÄ} (f : F.obj Y‚ÇÄ ‚ü∂ F.obj X‚ÇÄ) :
    inv data G‚ÇÄ X‚ÇÄ ‚â´ restriction data G‚ÇÄ f =
      IsDenseSubsite.mapPreimage F J G‚ÇÄ f := by
  refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
    ‚ü®_, IsDenseSubsite.imageSieve_mem J‚ÇÄ J F f‚ü© _ _ ?_
  rintro ‚ü®W‚ÇÄ, a, b, fac‚ÇÅ‚ü©
  refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
    ‚ü®_, J‚ÇÄ.pullback_stable b (cover_lift F J‚ÇÄ _ (data (F.obj X‚ÇÄ)).mem‚ÇÄ)‚ü© _ _ ?_
  rintro ‚ü®T‚ÇÄ, c, _, d, _, h, fac‚ÇÇ‚ü©
  cases' h with i
  dsimp at i d fac‚ÇÇ ‚ä¢
  simp only [assoc, ‚Üê Functor.map_comp, ‚Üê op_comp]
  rw [restriction_map data G‚ÇÄ f (c ‚â´ a) d
    (by rw [fac‚ÇÇ, map_comp, map_comp_assoc, fac‚ÇÅ]), inv_œÄ_assoc,
    ‚Üê IsDenseSubsite.mapPreimage_comp, fac‚ÇÇ,
    IsDenseSubsite.mapPreimage_comp_map F J G‚ÇÄ, map_comp,
      map_comp_assoc, fac‚ÇÅ]

end presheafObjObjIso

noncomputable def presheafObjObjIso (X‚ÇÄ : C‚ÇÄ) :
    (presheaf data G‚ÇÄ).obj (op (F.obj X‚ÇÄ)) ‚âÖ G‚ÇÄ.val.obj (op X‚ÇÄ) where
  hom := presheafObjObjIso.hom data G‚ÇÄ X‚ÇÄ
  inv := presheafObjObjIso.inv data G‚ÇÄ X‚ÇÄ
  hom_inv_id := presheafObj_hom_ext (fun i ‚Ü¶ by
    rw [assoc, presheafObjObjIso.inv_œÄ, id_comp,
      presheafObjObjIso.hom_mapPreimage data G‚ÇÄ _ (ùüô _) (fac := by simp),
      IsDenseSubsite.mapPreimage_id, comp_id])
  inv_hom_id := by
    refine Presheaf.IsSheaf.hom_ext G‚ÇÄ.cond
      ‚ü®_, cover_lift F J‚ÇÄ _ (data (F.obj X‚ÇÄ)).mem‚ÇÄ‚ü© _ _ ?_
    rintro ‚ü®Y‚ÇÄ, a, X, b, c, ‚ü®i‚ü©, fac‚ü©
    dsimp at i b fac ‚ä¢
    rw [assoc, presheafObjObjIso.hom_map data G‚ÇÄ _ b fac,
      presheafObjObjIso.inv_œÄ_assoc, id_comp,
      ‚Üê IsDenseSubsite.mapPreimage_comp, fac,
      IsDenseSubsite.mapPreimage_map]

@[reassoc (attr := simp)]
lemma presheafMap_presheafObjObjIso_hom (X : C) (i : (data X).I‚ÇÄ) :
    presheafMap data G‚ÇÄ ((data X).f i) ‚â´ (presheafObjObjIso data G‚ÇÄ ((data X).X i)).hom =
      presheafObjœÄ data G‚ÇÄ X i := by
  rw [‚Üê cancel_mono (presheafObjObjIso data G‚ÇÄ ((data X).X i)).inv, assoc, Iso.hom_inv_id,
    comp_id]
  apply presheafObj_hom_ext
  intro j
  rw [assoc, presheafMap_œÄ]
  erw [presheafObjObjIso.inv_œÄ]
  apply restriction_eq_of_fac
  simp

@[reassoc]
lemma presheafObjObjIso_inv_naturality {X‚ÇÄ Y‚ÇÄ : C‚ÇÄ} (f : X‚ÇÄ ‚ü∂ Y‚ÇÄ) :
    G‚ÇÄ.val.map f.op ‚â´ (presheafObjObjIso data G‚ÇÄ X‚ÇÄ).inv =
      (presheafObjObjIso data G‚ÇÄ Y‚ÇÄ).inv ‚â´ presheafMap data G‚ÇÄ (F.map f) := by
  apply presheafObj_hom_ext
  intro j
  dsimp
  rw [assoc, assoc, presheafMap_œÄ]
  erw [presheafObjObjIso.inv_œÄ, presheafObjObjIso.inv_restriction]
  rw [IsDenseSubsite.mapPreimage_comp, IsDenseSubsite.mapPreimage_map]

@[reassoc]
lemma presheafObjObjIso_hom_naturality {X‚ÇÄ Y‚ÇÄ : C‚ÇÄ} (f : X‚ÇÄ ‚ü∂ Y‚ÇÄ) :
    presheafMap data G‚ÇÄ (F.map f) ‚â´ (presheafObjObjIso data G‚ÇÄ X‚ÇÄ).hom =
      (presheafObjObjIso data G‚ÇÄ Y‚ÇÄ).hom ‚â´ G‚ÇÄ.val.map f.op := by
  rw [‚Üê cancel_mono (presheafObjObjIso data G‚ÇÄ X‚ÇÄ).inv, assoc, assoc,
    Iso.hom_inv_id, comp_id, presheafObjObjIso_inv_naturality,
    Iso.hom_inv_id_assoc]

noncomputable def compPresheafIso : F.op ‚ãô presheaf data G‚ÇÄ ‚âÖ G‚ÇÄ.val :=
  NatIso.ofComponents (fun X‚ÇÄ ‚Ü¶ presheafObjObjIso data G‚ÇÄ X‚ÇÄ.unop)
    (fun f ‚Ü¶ presheafObjObjIso_hom_naturality data G‚ÇÄ f.unop)

@[simps!]
def _root_.CategoryTheory.Limits.multicospanIsoMk {L R : Type*} {fst snd : L ‚Üí R}
    {C : Type*} [Category C] {G‚ÇÅ G‚ÇÇ : WalkingMulticospan fst snd ‚•§ C}
    (e : ‚àÄ (i : L), G‚ÇÅ.obj (.right i) ‚âÖ G‚ÇÇ.obj (.right i))
    (e' : ‚àÄ (j : R), G‚ÇÅ.obj (.left j) ‚âÖ G‚ÇÇ.obj (.left j))
    (h‚ÇÅ : ‚àÄ (i : L), G‚ÇÅ.map (WalkingMulticospan.Hom.fst i) ‚â´ (e i).hom =
      (e' (fst i)).hom ‚â´ G‚ÇÇ.map (WalkingMulticospan.Hom.fst i))
    (h‚ÇÇ : ‚àÄ (i : L), G‚ÇÅ.map (WalkingMulticospan.Hom.snd i) ‚â´ (e i).hom =
      (e' (snd i)).hom ‚â´ G‚ÇÇ.map (WalkingMulticospan.Hom.snd i)) :
    G‚ÇÅ ‚âÖ G‚ÇÇ :=
  NatIso.ofComponents (fun x ‚Ü¶ match x with
    | .left j => e' j
    | .right i => e i) (by
        rintro _ _ (_ | _ | _)
        ¬∑ simp
        ¬∑ exact h‚ÇÅ _
        ¬∑ exact h‚ÇÇ _)

lemma isSheaf : Presheaf.IsSheaf J (presheaf data G‚ÇÄ) := by
  rw [isSheaf_iff data]
  constructor
  ¬∑ exact (Presheaf.isSheaf_of_iso_iff (compPresheafIso data G‚ÇÄ)).2 G‚ÇÄ.cond
  ¬∑ intro X
    refine ‚ü®(IsLimit.postcomposeHomEquiv
      (Limits.multicospanIsoMk (fun _ ‚Ü¶ presheafObjObjIso _ _ _)
          (fun _ ‚Ü¶ presheafObjObjIso _ _ _) (fun j ‚Ü¶ ?_) (fun j ‚Ü¶ ?_)) _).1
      (IsLimit.ofIsoLimit (presheafObjIsLimit data G‚ÇÄ X)
        (Multifork.isoMk (Iso.refl _) (fun i ‚Ü¶ ?_)))‚ü©
    ¬∑ apply presheafObjObjIso_hom_naturality
    ¬∑ apply presheafObjObjIso_hom_naturality
    ¬∑ simp [Multifork.Œπ, PreOneHypercover.multifork]

noncomputable def sheaf : Sheaf J A := ‚ü®presheaf data G‚ÇÄ, isSheaf data G‚ÇÄ‚ü©

noncomputable def sheafIso : (sheafPushforwardContinuous F A J‚ÇÄ J).obj (sheaf data G‚ÇÄ) ‚âÖ G‚ÇÄ :=
  (fullyFaithfulSheafToPresheaf J‚ÇÄ A).preimageIso (compPresheafIso data G‚ÇÄ)

end EssSurj

variable (A)

include data in
lemma essSurj : EssSurj (sheafPushforwardContinuous F A J‚ÇÄ J) where
  mem_essImage G‚ÇÄ := ‚ü®_, ‚ü®EssSurj.sheafIso data G‚ÇÄ‚ü©‚ü©

include data in
lemma isEquivalence : IsEquivalence (sheafPushforwardContinuous F A J‚ÇÄ J) where
  essSurj := essSurj A data

end

end OneHypercoverDenseData

variable (A) [HasLimitsOfSize.{w, w} A] [IsOneHypercoverDense.{w} F J‚ÇÄ J]

lemma isEquivalence_of_isOneHypercoverDense :
    IsEquivalence (sheafPushforwardContinuous F A J‚ÇÄ J) :=
  OneHypercoverDenseData.isEquivalence.{w} A (oneHypercoverDenseData F J‚ÇÄ J)

section

variable [HasWeakSheafify J‚ÇÄ A]

noncomputable def sheafifyOfIsOneHypercoverDense :
    (C·µí·µñ ‚•§ A) ‚•§ Sheaf J A :=
  have := isEquivalence_of_isOneHypercoverDense.{w} F J‚ÇÄ J A
  (whiskeringLeft _ _ _).obj F.op ‚ãô presheafToSheaf J‚ÇÄ A ‚ãô
    inv (F.sheafPushforwardContinuous A J‚ÇÄ J)

variable {A}

noncomputable def sheafifyHomEquivOfIsOneHypercoverDense {P : C·µí·µñ ‚•§ A} {Q : Sheaf J A} :
    ((sheafifyOfIsOneHypercoverDense.{w} F J‚ÇÄ J A).obj P ‚ü∂ Q) ‚âÉ (P ‚ü∂ Q.val) :=
  have := isEquivalence_of_isOneHypercoverDense.{w} F J‚ÇÄ J A
  have := IsDenseSubsite.isLocallyFull J‚ÇÄ J F
  have := IsDenseSubsite.isCoverDense J‚ÇÄ J F
  ((F.sheafPushforwardContinuous A J‚ÇÄ J).asEquivalence.symm.toAdjunction.homEquiv _ _).trans
    (((sheafificationAdjunction J‚ÇÄ A).homEquiv _ _).trans IsCoverDense.restrictHomEquivHom)

lemma sheafifyHomEquivOfIsOneHypercoverDense_naturality_left
    {P‚ÇÅ P‚ÇÇ : C·µí·µñ ‚•§ A} (f : P‚ÇÅ ‚ü∂ P‚ÇÇ) {Q : Sheaf J A}
    (g : (F.sheafifyOfIsOneHypercoverDense J‚ÇÄ J A).obj P‚ÇÇ ‚ü∂ Q)  :
      sheafifyHomEquivOfIsOneHypercoverDense.{w} F J‚ÇÄ J
        ((F.sheafifyOfIsOneHypercoverDense J‚ÇÄ J A).map f ‚â´ g) =
        f ‚â´ sheafifyHomEquivOfIsOneHypercoverDense.{w} F J‚ÇÄ J g := by
  have := isEquivalence_of_isOneHypercoverDense.{w} F J‚ÇÄ J A
  have := IsDenseSubsite.isLocallyFull J‚ÇÄ J F
  have := IsDenseSubsite.isCoverDense J‚ÇÄ J F
  let adj‚ÇÅ := (F.sheafPushforwardContinuous A J‚ÇÄ J).asEquivalence.symm.toAdjunction
  let adj‚ÇÇ := sheafificationAdjunction J‚ÇÄ A
  change IsCoverDense.restrictHomEquivHom (adj‚ÇÇ.homEquiv _ _ (adj‚ÇÅ.homEquiv _ _
    ((F.sheafifyOfIsOneHypercoverDense J‚ÇÄ J A).map f ‚â´ g))) =
      f ‚â´ IsCoverDense.restrictHomEquivHom (adj‚ÇÇ.homEquiv _ _ (adj‚ÇÅ.homEquiv _ _ g))
  erw [‚Üê IsCoverDense.restrictHomEquivHom_naturality_left]
  erw [adj‚ÇÅ.homEquiv_naturality_left, adj‚ÇÇ.homEquiv_naturality_left]
  rfl

lemma sheafifyHomEquivOfIsOneHypercoverDense_naturality_right
    {P : C·µí·µñ ‚•§ A} {Q‚ÇÅ Q‚ÇÇ : Sheaf J A}
    (f : (F.sheafifyOfIsOneHypercoverDense J‚ÇÄ J A).obj P ‚ü∂ Q‚ÇÅ) (g : Q‚ÇÅ ‚ü∂ Q‚ÇÇ) :
      sheafifyHomEquivOfIsOneHypercoverDense.{w} F J‚ÇÄ J (f ‚â´ g) =
        sheafifyHomEquivOfIsOneHypercoverDense.{w} F J‚ÇÄ J f ‚â´ g.val := by
  have := isEquivalence_of_isOneHypercoverDense.{w} F J‚ÇÄ J A
  have := IsDenseSubsite.isLocallyFull J‚ÇÄ J F
  have := IsDenseSubsite.isCoverDense J‚ÇÄ J F
  let adj‚ÇÅ := (F.sheafPushforwardContinuous A J‚ÇÄ J).asEquivalence.symm.toAdjunction
  let adj‚ÇÇ := sheafificationAdjunction J‚ÇÄ A
  change IsCoverDense.restrictHomEquivHom (adj‚ÇÇ.homEquiv _ _ (adj‚ÇÅ.homEquiv _ _ (f ‚â´ g))) =
    IsCoverDense.restrictHomEquivHom (adj‚ÇÇ.homEquiv _ _ (adj‚ÇÅ.homEquiv _ _ f)) ‚â´ g.val
  rw [adj‚ÇÅ.homEquiv_naturality_right, adj‚ÇÇ.homEquiv_naturality_right]
  apply IsCoverDense.restrictHomEquivHom_naturality_right

variable (A)

noncomputable def sheafifyAdjunctionOfIsOneHypercoverDense :
    sheafifyOfIsOneHypercoverDense.{w} F J‚ÇÄ J A ‚ä£ sheafToPresheaf J A :=
  Adjunction.mkOfHomEquiv
    { homEquiv := fun P Q ‚Ü¶ sheafifyHomEquivOfIsOneHypercoverDense.{w} F J‚ÇÄ J
      homEquiv_naturality_left_symm := fun {P‚ÇÅ P‚ÇÇ Q} f g ‚Ü¶
        (F.sheafifyHomEquivOfIsOneHypercoverDense J‚ÇÄ J).injective (by
          simp only [sheafToPresheaf_obj, Equiv.apply_symm_apply,
            sheafifyHomEquivOfIsOneHypercoverDense_naturality_left _ _ _ f])
      homEquiv_naturality_right :=
        sheafifyHomEquivOfIsOneHypercoverDense_naturality_right F J‚ÇÄ J }

include F J‚ÇÄ in
lemma hasWeakSheafify_of_isOneHypercoverDense :
    HasWeakSheafify J A := ‚ü®_, ‚ü®sheafifyAdjunctionOfIsOneHypercoverDense.{w} F J‚ÇÄ J A‚ü©‚ü©

end

include F in
lemma hasSheafify_of_isOneHypercoverDense [HasSheafify J‚ÇÄ A] [HasFiniteLimits A] :
    HasSheafify J A := by
  have := isEquivalence_of_isOneHypercoverDense.{w} F J‚ÇÄ J A
  have : PreservesFiniteLimits ((whiskeringLeft _ _ A).obj F.op) := ‚ü®fun _ _ _ ‚Ü¶ inferInstance‚ü©
  have : PreservesFiniteLimits (presheafToSheaf J‚ÇÄ A ‚ãô
    (F.sheafPushforwardContinuous A J‚ÇÄ J).inv) := by
    apply comp_preservesFiniteLimits
  have : PreservesFiniteLimits (F.sheafifyOfIsOneHypercoverDense J‚ÇÄ J A) := by
    apply comp_preservesFiniteLimits
  exact HasSheafify.mk' _ _ (sheafifyAdjunctionOfIsOneHypercoverDense.{w} F J‚ÇÄ J A)

end Functor

end CategoryTheory
