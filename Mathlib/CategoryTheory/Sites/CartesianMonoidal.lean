/-
Copyright (c) 2024 Robin Carlier. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robin Carlier
-/
import Mathlib.CategoryTheory.Monoidal.Cartesian.FunctorCategory
import Mathlib.CategoryTheory.Sites.Limits

/-!
# Chosen finite products on sheaves

In this file, we put a `CartesianMonoidalCategory` instance on `A`-valued sheaves for a
`GrothendieckTopology` whenever `A` has a `CartesianMonoidalCategory` instance.
-/

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Opposite Category Limits Sieve MonoidalCategory CartesianMonoidalCategory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]
variable {A : Type u‚ÇÇ} [Category.{v‚ÇÇ} A]
variable (J : GrothendieckTopology C)
variable [CartesianMonoidalCategory A]

namespace Sheaf
variable (X Y : Sheaf J A)

lemma tensorProd_isSheaf : Presheaf.IsSheaf J (X.val ‚äó Y.val) := by
  apply isSheaf_of_isLimit (E := (Cones.postcompose (pairComp X Y (sheafToPresheaf J A)).inv).obj
    (BinaryFan.mk (fst X.val Y.val) (snd _ _)))
  exact (IsLimit.postcomposeInvEquiv _ _).invFun
    (tensorProductIsBinaryProduct X.val Y.val)

lemma tensorUnit_isSheaf : Presheaf.IsSheaf J (ùüô_ (C·µí·µñ ‚•§ A)) := by
  apply isSheaf_of_isLimit (E := (Cones.postcompose (Functor.uniqueFromEmpty _).inv).obj
    (asEmptyCone (ùüô_ _)))
  ¬∑ exact (IsLimit.postcomposeInvEquiv _ _).invFun isTerminalTensorUnit
  ¬∑ exact .empty _

/-- Any `CartesianMonoidalCategory` on `A` induce a
`CartesianMonoidalCategory` structure on `A`-valued sheaves. -/
noncomputable instance cartesianMonoidalCategory : CartesianMonoidalCategory (Sheaf J A) :=
  .ofChosenFiniteProducts
   ({ cone := asEmptyCone { val := ùüô_ (C·µí·µñ ‚•§ A), cond := tensorUnit_isSheaf _}
      isLimit.lift f := ‚ü®toUnit f.pt.val‚ü©
      isLimit.fac := by rintro _ ‚ü®‚ü®‚ü©‚ü©
      isLimit.uniq x f h := Sheaf.hom_ext _ _ (toUnit_unique f.val _) })
  fun X Y ‚Ü¶ {
    cone := BinaryFan.mk
        (P := { val := X.val ‚äó Y.val
                cond := tensorProd_isSheaf J X Y})
        ‚ü®(fst _ _)‚ü© ‚ü®(snd _ _)‚ü©
    isLimit.lift f := ‚ü®lift (BinaryFan.fst f).val (BinaryFan.snd f).val‚ü©
    isLimit.fac := by rintro s ‚ü®‚ü®j‚ü©‚ü© <;> apply Sheaf.hom_ext <;> simp
    isLimit.uniq x f h := by
      apply Sheaf.hom_ext
      apply CartesianMonoidalCategory.hom_ext
      ¬∑ specialize h ‚ü®.left‚ü©
        rw [Sheaf.hom_ext_iff] at h
        simpa using h
      ¬∑ specialize h ‚ü®.right‚ü©
        rw [Sheaf.hom_ext_iff] at h
        simpa using h
  }

@[simp] lemma cartesianMonoidalCategoryFst_val : (fst X Y).val = fst X.val Y.val := rfl
@[simp] lemma cartesianMonoidalCategorySnd_val : (snd X Y).val = snd X.val Y.val := rfl

variable {X Y}
variable {W : Sheaf J A} (f : W ‚ü∂ X) (g : W ‚ü∂ Y)

@[simp] lemma cartesianMonoidalCategoryLift_val : (lift f g).val = lift f.val g.val := rfl
@[simp] lemma cartesianMonoidalCategoryWhiskerLeft_val : (X ‚óÅ f).val = X.val ‚óÅ f.val := rfl
@[simp] lemma cartesianMonoidalCategoryWhiskerRight_val : (f ‚ñ∑ X).val = f.val ‚ñ∑ X.val := rfl

end Sheaf

/-- The inclusion from sheaves to presheaves is monoidal with respect to the cartesian monoidal
structures. -/
noncomputable instance sheafToPresheafMonoidal : (sheafToPresheaf J A).Monoidal :=
  Functor.CoreMonoidal.toMonoidal
    { ŒµIso := .refl _
      ŒºIso F G := .refl _ }

open Functor.LaxMonoidal Functor.OplaxMonoidal

@[simp] lemma sheafToPresheaf_Œµ : Œµ (sheafToPresheaf J A) = ùüô _ := rfl
@[simp] lemma sheafToPresheaf_Œ∑ : Œ∑ (sheafToPresheaf J A) = ùüô _ := rfl

variable {J}

@[simp] lemma sheafToPresheaf_Œº (X Y : Sheaf J A) : Œº (sheafToPresheaf J A) X Y = ùüô _ := rfl
@[simp] lemma sheafToPresheaf_Œ¥ (X Y : Sheaf J A) : Œ¥ (sheafToPresheaf J A) X Y = ùüô _ := rfl

end CategoryTheory
