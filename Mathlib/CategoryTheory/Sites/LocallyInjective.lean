/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Sites.LeftExact
import Mathlib.CategoryTheory.Sites.PreservesSheafification
import Mathlib.CategoryTheory.Sites.Subsheaf
import Mathlib.CategoryTheory.Sites.Whiskering

/-!
# Locally injective morphisms of (pre)sheaves

Let `C` be a category equipped with a Grothendieck topology `J`,
and let `D` be a concrete category. In this file, we introduce the typeclass
`Presheaf.IsLocallyInjective J œÜ` for a morphism `œÜ : F‚ÇÅ ‚ü∂ F‚ÇÇ` in the category
`C·µí·µñ ‚•§ D`. This means that `œÜ` is locally injective. More precisely,
if `x` and `y` are two elements of some `F‚ÇÅ.obj U` such
the images of `x` and `y` in `F‚ÇÇ.obj U` coincide, then
the equality `x = y` must hold locally, i.e. after restriction
by the maps of a covering sieve.

-/

universe w v' v u' u

namespace CategoryTheory

open Opposite Limits

variable {C : Type u} [Category.{v} C]
  {D : Type u'} [Category.{v'} D] [ConcreteCategory.{w} D]
  (J : GrothendieckTopology C)

attribute [local instance] ConcreteCategory.hasCoeToSort ConcreteCategory.instFunLike

namespace Presheaf

/-- If `F : C·µí·µñ ‚•§ D` is a presheaf with values in a concrete category, if `x` and `y` are
elements in `F.obj X`, this is the sieve of `X.unop` consisting of morphisms `f`
such that `F.map f.op x = F.map f.op y`. -/
@[simps]
def equalizerSieve {F : C·µí·µñ ‚•§ D} {X : C·µí·µñ} (x y : F.obj X) : Sieve X.unop where
  arrows _ f := F.map f.op x = F.map f.op y
  downward_closed {X Y} f hf g := by
    dsimp at hf ‚ä¢
    simp [hf]

@[simp]
lemma equalizerSieve_self_eq_top {F : C·µí·µñ ‚•§ D} {X : C·µí·µñ} (x : F.obj X) :
    equalizerSieve x x = ‚ä§ := by aesop

@[simp]
lemma equalizerSieve_eq_top_iff {F : C·µí·µñ ‚•§ D} {X : C·µí·µñ} (x y : F.obj X) :
    equalizerSieve x y = ‚ä§ ‚Üî x = y := by
  constructor
  ¬∑ intro h
    simpa using (show equalizerSieve x y (ùüô _) by simp [h])
  ¬∑ rintro rfl
    apply equalizerSieve_self_eq_top

variable {F‚ÇÅ F‚ÇÇ F‚ÇÉ : C·µí·µñ ‚•§ D} (œÜ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (œà : F‚ÇÇ ‚ü∂ F‚ÇÉ)

/-- A morphism `œÜ : F‚ÇÅ ‚ü∂ F‚ÇÇ` of presheaves `C·µí·µñ ‚•§ D` (with `D` a concrete category)
is locally injective for a Grothendieck topology `J` on `C` if
whenever two sections of `F‚ÇÅ` are sent to the same section of `F‚ÇÇ`, then these two
sections coincide locally. -/
class IsLocallyInjective : Prop where
  equalizerSieve_mem {X : C·µí·µñ} (x y : F‚ÇÅ.obj X) (h : œÜ.app X x = œÜ.app X y) :
    equalizerSieve x y ‚àà J X.unop

lemma equalizerSieve_mem [IsLocallyInjective J œÜ]
    {X : C·µí·µñ} (x y : F‚ÇÅ.obj X) (h : œÜ.app X x = œÜ.app X y) :
    equalizerSieve x y ‚àà J X.unop :=
  IsLocallyInjective.equalizerSieve_mem x y h

lemma isLocallyInjective_of_injective (hœÜ : ‚àÄ (X : C·µí·µñ), Function.Injective (œÜ.app X)) :
    IsLocallyInjective J œÜ where
  equalizerSieve_mem {X} x y h := by
    convert J.top_mem X.unop
    ext Y f
    simp only [equalizerSieve_apply, op_unop, Sieve.top_apply, iff_true]
    apply hœÜ
    simp [h]

instance [IsIso œÜ] : IsLocallyInjective J œÜ :=
  isLocallyInjective_of_injective J œÜ (fun X => Function.Bijective.injective (by
    rw [‚Üê isIso_iff_bijective]
    change IsIso ((forget D).map (œÜ.app X))
    infer_instance))

instance isLocallyInjective_forget [IsLocallyInjective J œÜ] :
    IsLocallyInjective J (whiskerRight œÜ (forget D)) where
  equalizerSieve_mem x y h := equalizerSieve_mem J œÜ x y h

lemma isLocallyInjective_forget_iff :
    IsLocallyInjective J (whiskerRight œÜ (forget D)) ‚Üî IsLocallyInjective J œÜ := by
  constructor
  ¬∑ intro
    exact ‚ü®fun x y h => equalizerSieve_mem J (whiskerRight œÜ (forget D)) x y h‚ü©
  ¬∑ intro
    infer_instance

lemma isLocallyInjective_iff_equalizerSieve_mem_imp :
    IsLocallyInjective J œÜ ‚Üî ‚àÄ ‚¶ÉX : C·µí·µñ‚¶Ñ (x y : F‚ÇÅ.obj X),
      equalizerSieve (œÜ.app _ x) (œÜ.app _ y) ‚àà J X.unop ‚Üí equalizerSieve x y ‚àà J X.unop := by
  constructor
  ¬∑ intro _ X x y h
    let S := equalizerSieve (œÜ.app _ x) (œÜ.app _ y)
    let T : ‚àÄ ‚¶ÉY : C‚¶Ñ ‚¶Éf : Y ‚ü∂ X.unop‚¶Ñ (_ : S f), Sieve Y := fun Y f _ =>
      equalizerSieve (F‚ÇÅ.map f.op x) ((F‚ÇÅ.map f.op y))
    refine J.superset_covering ?_ (J.transitive h (Sieve.bind S.1 T) ?_)
    ¬∑ rintro Y f ‚ü®Z, a, g, hg, ha, rfl‚ü©
      simpa using ha
    ¬∑ intro Y f hf
      refine J.superset_covering (Sieve.le_pullback_bind S.1 T _ hf)
        (equalizerSieve_mem J œÜ _ _ ?_)
      rw [NatTrans.naturality_apply, NatTrans.naturality_apply]
      exact hf
  ¬∑ intro hœÜ
    exact ‚ü®fun {X} x y h => hœÜ x y (by simp [h])‚ü©

lemma equalizerSieve_mem_of_equalizerSieve_app_mem
    {X : C·µí·µñ} (x y : F‚ÇÅ.obj X) (h : equalizerSieve (œÜ.app _ x) (œÜ.app _ y) ‚àà J X.unop)
    [IsLocallyInjective J œÜ] :
    equalizerSieve x y ‚àà J X.unop :=
  (isLocallyInjective_iff_equalizerSieve_mem_imp J œÜ).1 inferInstance x y h

instance isLocallyInjective_comp [IsLocallyInjective J œÜ] [IsLocallyInjective J œà] :
    IsLocallyInjective J (œÜ ‚â´ œà) where
  equalizerSieve_mem {X} x y h := by
    apply equalizerSieve_mem_of_equalizerSieve_app_mem J œÜ
    exact equalizerSieve_mem J œà _ _ (by simpa using h)

lemma isLocallyInjective_of_isLocallyInjective [IsLocallyInjective J (œÜ ‚â´ œà)] :
    IsLocallyInjective J œÜ where
  equalizerSieve_mem {X} x y h := equalizerSieve_mem J (œÜ ‚â´ œà) x y (by simp [h])

variable {œÜ œà}

lemma isLocallyInjective_of_isLocallyInjective_fac {œÜœà : F‚ÇÅ ‚ü∂ F‚ÇÉ} (fac : œÜ ‚â´ œà = œÜœà)
    [IsLocallyInjective J œÜœà] : IsLocallyInjective J œÜ := by
  subst fac
  exact isLocallyInjective_of_isLocallyInjective J œÜ œà

lemma isLocallyInjective_iff_of_fac {œÜœà : F‚ÇÅ ‚ü∂ F‚ÇÉ} (fac : œÜ ‚â´ œà = œÜœà) [IsLocallyInjective J œà] :
    IsLocallyInjective J œÜœà ‚Üî IsLocallyInjective J œÜ := by
  constructor
  ¬∑ intro
    exact isLocallyInjective_of_isLocallyInjective_fac J fac
  ¬∑ intro
    rw [‚Üê fac]
    infer_instance

variable (œÜ œà)

lemma isLocallyInjective_comp_iff [IsLocallyInjective J œà] :
    IsLocallyInjective J (œÜ ‚â´ œà) ‚Üî IsLocallyInjective J œÜ :=
  isLocallyInjective_iff_of_fac J rfl

lemma isLocallyInjective_iff_injective_of_separated
    (hsep : Presieve.IsSeparated J (F‚ÇÅ ‚ãô forget D)) :
    IsLocallyInjective J œÜ ‚Üî ‚àÄ (X : C·µí·µñ), Function.Injective (œÜ.app X) := by
  constructor
  ¬∑ intro _ X x y h
    exact (hsep _ (equalizerSieve_mem J œÜ x y h)).ext (fun _ _ hf => hf)
  ¬∑ apply isLocallyInjective_of_injective

instance (F : C·µí·µñ ‚•§ Type w) (G : GrothendieckTopology.Subpresheaf F) :
    IsLocallyInjective J G.Œπ :=
  isLocallyInjective_of_injective _ _ (fun X => by
    intro ‚ü®x, _‚ü© ‚ü®y, _‚ü© h
    exact Subtype.ext h)

section

open GrothendieckTopology.Plus

instance isLocallyInjective_toPlus (P : C·µí·µñ ‚•§ Type max u v) :
    IsLocallyInjective J (J.toPlus P) where
  equalizerSieve_mem {X} x y h := by
    rw [toPlus_eq_mk, toPlus_eq_mk, eq_mk_iff_exists] at h
    obtain ‚ü®W, h‚ÇÅ, h‚ÇÇ, eq‚ü© := h
    exact J.superset_covering (fun Y f hf => congr_fun (congr_arg Subtype.val eq) ‚ü®Y, f, hf‚ü©) W.2

instance isLocallyInjective_toSheafify (P : C·µí·µñ ‚•§ Type max u v) :
    IsLocallyInjective J (J.toSheafify P) := by
  dsimp [GrothendieckTopology.toSheafify]
  rw [GrothendieckTopology.plusMap_toPlus]
  infer_instance

instance isLocallyInjective_toSheafify' [ConcreteCategory.{max u v} D]
    (P : C·µí·µñ ‚•§ D) [HasWeakSheafify J D] [J.HasSheafCompose (forget D)]
    [J.PreservesSheafification (forget D)] :
    IsLocallyInjective J (toSheafify J P) := by
  rw [‚Üê isLocallyInjective_forget_iff, ‚Üê sheafComposeIso_hom_fac,
    ‚Üê toSheafify_plusPlusIsoSheafify_hom]
  infer_instance

end

end Presheaf

namespace Sheaf

variable {J}
variable {F‚ÇÅ F‚ÇÇ : Sheaf J D} (œÜ : F‚ÇÅ ‚ü∂ F‚ÇÇ)

/-- If `œÜ : F‚ÇÅ ‚ü∂ F‚ÇÇ` is a morphism of sheaves, this is an abbreviation for
`Presheaf.IsLocallyInjective J œÜ.val`. Under suitable assumptions, it
is equivalent to the injectivity of all maps `œÜ.val.app X`,
see `isLocallyInjective_iff_injective`. -/
abbrev IsLocallyInjective := Presheaf.IsLocallyInjective J œÜ.val

lemma isLocallyInjective_sheafToPresheaf_map_iff :
    Presheaf.IsLocallyInjective J ((sheafToPresheaf J D).map œÜ) ‚Üî IsLocallyInjective œÜ := by rfl

instance isLocallyInjective_of_iso [IsIso œÜ] : IsLocallyInjective œÜ := by
  change Presheaf.IsLocallyInjective J ((sheafToPresheaf _ _).map œÜ)
  infer_instance

lemma mono_of_injective
    (hœÜ : ‚àÄ (X : C·µí·µñ), Function.Injective (œÜ.val.app X)) : Mono œÜ :=
  have := fun X ‚Ü¶ ConcreteCategory.mono_of_injective _ (hœÜ X)
  (sheafToPresheaf _ _).mono_of_mono_map (NatTrans.mono_of_mono_app œÜ.1)

variable [J.HasSheafCompose (forget D)]

instance isLocallyInjective_forget [IsLocallyInjective œÜ] :
    IsLocallyInjective ((sheafCompose J (forget D)).map œÜ) :=
  Presheaf.isLocallyInjective_forget J œÜ.1

lemma isLocallyInjective_iff_injective :
    IsLocallyInjective œÜ ‚Üî ‚àÄ (X : C·µí·µñ), Function.Injective (œÜ.val.app X) :=
  Presheaf.isLocallyInjective_iff_injective_of_separated _ _ (by
    apply Presieve.isSeparated_of_isSheaf
    rw [‚Üê isSheaf_iff_isSheaf_of_type]
    exact ((sheafCompose J (forget D)).obj F‚ÇÅ).2)

lemma mono_of_isLocallyInjective [IsLocallyInjective œÜ] : Mono œÜ := by
  apply mono_of_injective
  rw [‚Üê isLocallyInjective_iff_injective]
  infer_instance

instance {F G : Sheaf J (Type w)} (f : F ‚ü∂ G) :
    IsLocallyInjective (GrothendieckTopology.imageSheafŒπ f) := by
  dsimp [GrothendieckTopology.imageSheafŒπ]
  infer_instance

end Sheaf

end CategoryTheory
