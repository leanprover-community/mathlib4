/-
Copyright (c) 2025 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.CategoryTheory.Sites.OneHypercover

universe w' w v u

namespace CategoryTheory

open Limits

variable {C : Type u} [Category.{v} C] {A : Type*} [Category A]

@[simp]
lemma Sieve.ofArrows_pUnit {X Y : C} (f : X ‚ü∂ Y) :
    Sieve.ofArrows _ (fun _ : PUnit ‚Ü¶ f) = Sieve.generate (Presieve.singleton f) := by
  rw [Sieve.ofArrows, Presieve.ofArrows_pUnit]

namespace PreOneHypercover

variable {S : C}

/-- A refinement data of a pre-`1`-hypercover `{U·µ¢} is a pre-`0`-hypercover for every `U·µ¢`
and coverings of the intersections. -/
structure Refinement (E : PreOneHypercover.{w} S) where
  cover (i : E.I‚ÇÄ) : PreZeroHypercover.{w} (E.X i)
  J {i j : E.I‚ÇÄ} (a : (cover i).I‚ÇÄ) (b : (cover j).I‚ÇÄ) : Type w
  Z {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : J a b) : C
  p {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : J a b) :
    Z k l ‚ü∂ E.Y k
  q‚ÇÅ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : J a b) :
    Z k l ‚ü∂ (cover i).X a
  q‚ÇÇ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : J a b) :
    Z k l ‚ü∂ (cover j).X b
  w {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : J a b) :
    q‚ÇÅ k l ‚â´ (cover _).f _ ‚â´ E.f _ = q‚ÇÇ k l ‚â´ (cover _).f _ ‚â´ E.f _
  w_self {i : E.I‚ÇÄ} (k : E.I‚ÇÅ i i) {a : (cover i).I‚ÇÄ} {b : (cover i).I‚ÇÄ} (l : J a b) :
    q‚ÇÅ k l ‚â´ (cover _).f _ = q‚ÇÇ k l ‚â´ (cover _).f _
  w‚ÇÅ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : J a b) :
    p k l ‚â´ E.p‚ÇÅ k = q‚ÇÅ k l ‚â´ (cover i).f a
  w‚ÇÇ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : J a b) :
    p k l ‚â´ E.p‚ÇÇ k = q‚ÇÇ k l ‚â´ (cover j).f b

attribute [reassoc (attr := grind _=_)] Refinement.w Refinement.w_self Refinement.w‚ÇÅ Refinement.w‚ÇÇ

variable {E : PreOneHypercover.{w} S}

@[simps! toPreZeroHypercover I‚ÇÅ Y p‚ÇÅ p‚ÇÇ]
def Refinement.cover‚ÇÅ (R : E.Refinement) (i : E.I‚ÇÄ) : PreOneHypercover.{w} (E.X i) where
  __ := R.cover i
  I‚ÇÅ a b := E.I‚ÇÅ i i √ó R.J a b
  Y _ _ p := R.Z p.1 p.2
  p‚ÇÅ _ _ _ := R.q‚ÇÅ _ _
  p‚ÇÇ _ _ _ := R.q‚ÇÇ _ _
  w _ _ _ := R.w_self _ _

@[simps!]
def Refinement.bind (R : E.Refinement) : PreOneHypercover.{w} S where
  __ := E.toPreZeroHypercover.bind
    fun i ‚Ü¶ (R.cover i)
  I‚ÇÅ i j := E.I‚ÇÅ i.1 j.1 √ó R.J i.2 j.2
  Y _ _ p := R.Z p.1 p.2
  p‚ÇÅ _ _ p := R.q‚ÇÅ p.1 p.2
  p‚ÇÇ _ _ p := R.q‚ÇÇ p.1 p.2
  w _ _ p := R.w p.1 p.2

@[simps]
def Refinement.toBase (R : E.Refinement) : R.bind ‚ü∂ E where
  s‚ÇÄ i := i.1
  h‚ÇÄ i := (R.cover i.1).f i.2
  s‚ÇÅ p := p.1
  h‚ÇÅ p := R.p p.1 p.2
  w‚ÇÄ _ := rfl
  w‚ÇÅ‚ÇÅ _ := R.w‚ÇÅ _ _
  w‚ÇÅ‚ÇÇ _ := R.w‚ÇÇ _ _

attribute [local grind =] Category.assoc Category.id_comp

@[simps]
noncomputable
def Refinement.homPullback‚ÇÅ [HasPullbacks C] (R : E.Refinement) (i : E.I‚ÇÄ) :
    R.cover‚ÇÅ i ‚ü∂ R.bind.pullback‚ÇÅ (E.f i) where
  s‚ÇÄ a := ‚ü®i, a‚ü©
  h‚ÇÄ a := pullback.lift ((R.cover i).f a) (ùüô _)
  s‚ÇÅ := id
  h‚ÇÅ {a b} p := pullback.lift (R.p _ _ ‚â´ E.p‚ÇÅ _) (ùüô _) <| by simp [w_self_assoc, w‚ÇÅ_assoc]
  w‚ÇÅ‚ÇÅ {a b} p := by apply pullback.hom_ext <;> simp [w‚ÇÅ, w_self]
  w‚ÇÅ‚ÇÇ {a b} p := by apply pullback.hom_ext <;> simp [w‚ÇÅ, w_self]

variable {S : C} {E F G : PreOneHypercover S}

section

@[simps]
noncomputable
def cone (E F : PreOneHypercover S) [‚àÄ i j, HasPullback (E.f i) (F.f j)]
    [‚àÄ (i j : E.I‚ÇÄ) (k : E.I‚ÇÅ i j) (a b : F.I‚ÇÄ) (l : F.I‚ÇÅ a b),
      HasPullback (E.p‚ÇÅ k ‚â´ E.f i) (F.p‚ÇÅ l ‚â´ F.f a)] :
    PreOneHypercover S where
  I‚ÇÄ := E.I‚ÇÄ √ó F.I‚ÇÄ
  X i := pullback (E.f i.1) (F.f i.2)
  f i := pullback.fst _ _ ‚â´ E.f _
  I‚ÇÅ i j := E.I‚ÇÅ i.1 j.1 √ó F.I‚ÇÅ i.2 j.2
  Y i j k := pullback (E.p‚ÇÅ k.1 ‚â´ E.f _) (F.p‚ÇÅ k.2 ‚â´ F.f _)
  p‚ÇÅ i j k := pullback.map _ _ _ _ (E.p‚ÇÅ _) (F.p‚ÇÅ _) (ùüô S) (by simp) (by simp)
  p‚ÇÇ i j k := pullback.map _ _ _ _ (E.p‚ÇÇ _) (F.p‚ÇÇ _) (ùüô S) (by simp [E.w]) (by simp [F.w])
  w := by simp [E.w]

variable (E F : PreOneHypercover S) [‚àÄ i j, HasPullback (E.f i) (F.f j)]
  [‚àÄ (i j : E.I‚ÇÄ) (k : E.I‚ÇÅ i j) (a b : F.I‚ÇÄ) (l : F.I‚ÇÅ a b),
    HasPullback (E.p‚ÇÅ k ‚â´ E.f i) (F.p‚ÇÅ l ‚â´ F.f a)]

lemma sieve‚ÇÄ_cone :
    (cone E F).sieve‚ÇÄ = Sieve.bind E.sieve‚ÇÄ (fun _ f _ ‚Ü¶ F.sieve‚ÇÄ.pullback f) := by
  ext Z f
  refine ‚ü®fun ‚ü®W, a, b, hb, hab‚ü© ‚Ü¶ ?_,
      fun ‚ü®W, a, b, ‚ü®U, u, v, hv, huv‚ü©, ‚ü®V, c, d, hd, hcd‚ü©, hab‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®i‚ü© := hb
    simp only [Sieve.generate_apply, Sieve.bind_apply]
    refine ‚ü®(E.cone F).X i, a, (E.cone F).f i, ?_, ?_, hab‚ü©
    ¬∑ apply E.sieve‚ÇÄ.downward_closed
      exact Sieve.ofArrows_mk E.X E.f i.1
    ¬∑ dsimp
      refine ‚ü®F.X i.2, a ‚â´ pullback.snd _ _, F.f i.2, ‚ü®i.2‚ü©, ?_‚ü©
      simp [pullback.condition]
  ¬∑ subst huv
    obtain ‚ü®i‚ü© := hv
    obtain ‚ü®j‚ü© := hd
    exact ‚ü®(cone E F).X (i, j),
      pullback.lift (a ‚â´ u) c (by simp [hcd]), (cone E F).f (i, j), ‚ü®(i, j)‚ü©, by simpa‚ü©

lemma sieve‚ÇÅ_cone [HasPullbacks C] {i j : E.I‚ÇÄ √ó F.I‚ÇÄ} {W : C}
    (p‚ÇÅ : W ‚ü∂ pullback (E.f i.1) (F.f i.2))
    (p‚ÇÇ : W ‚ü∂ pullback (E.f j.1) (F.f j.2))
    (w : p‚ÇÅ ‚â´ pullback.fst _ _ ‚â´ E.f _ = p‚ÇÇ ‚â´ pullback.fst _ _ ‚â´ E.f _) :
    (cone E F).sieve‚ÇÅ p‚ÇÅ p‚ÇÇ = Sieve.bind
      (E.sieve‚ÇÅ (p‚ÇÅ ‚â´ pullback.fst _ _) (p‚ÇÇ ‚â´ pullback.fst _ _))
      (fun _ f _ ‚Ü¶ (F.sieve‚ÇÅ (p‚ÇÅ ‚â´ pullback.snd _ _) (p‚ÇÇ ‚â´ pullback.snd _ _)).pullback f) := by
  ext Y f
  let p : W ‚ü∂ pullback ((cone E F).f i) ((cone E F).f j) :=
    pullback.lift p‚ÇÅ p‚ÇÇ w
  refine ‚ü®fun ‚ü®k, a, h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ ?_, fun ‚ü®Z, a, b, ‚ü®k, e, h‚ÇÅ, h‚ÇÇ‚ü©, ‚ü®l, u, u‚ÇÅ, u‚ÇÇ‚ü©, hab‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ refine ‚ü®pullback p ((cone E F).toPullback k), ?_, ?_, ?_, ?_, ?_‚ü©
    ¬∑ refine pullback.lift f a ?_
      apply pullback.hom_ext
      ¬∑ apply pullback.hom_ext <;> simp [p, h‚ÇÅ, toPullback]
      ¬∑ apply pullback.hom_ext <;> simp [p, h‚ÇÇ, toPullback]
    ¬∑ exact pullback.fst _ _
    ¬∑ refine ‚ü®k.1, pullback.snd _ _ ‚â´ pullback.fst _ _, ?_, ?_‚ü©
      ¬∑ have : p‚ÇÅ ‚â´ pullback.fst (E.f i.1) (F.f i.2) = p ‚â´ pullback.fst _ _ ‚â´ pullback.fst _ _ := by
          simp [p]
        simp [this, pullback.condition_assoc, toPullback]
      ¬∑ have : p‚ÇÇ ‚â´ pullback.fst (E.f j.1) (F.f j.2) = p ‚â´ pullback.snd _ _ ‚â´ pullback.fst _ _ := by
          simp [p]
        simp [this, pullback.condition_assoc, toPullback]
    ¬∑ refine ‚ü®k.2, a ‚â´ pullback.snd _ _, ?_, ?_‚ü©
      ¬∑ simp [reassoc_of% h‚ÇÅ]
      ¬∑ simp [reassoc_of% h‚ÇÇ]
    ¬∑ simp
  ¬∑ refine ‚ü®(k, l), ?_, ?_, ?_‚ü©
    ¬∑ apply pullback.lift (a ‚â´ e) u _
      simp at u‚ÇÅ
      simp [‚Üê reassoc_of% h‚ÇÅ, w, ‚Üê reassoc_of% u‚ÇÅ]
      congr 2
      sorry
    ¬∑ sorry
    ¬∑ sorry

@[simps]
noncomputable
def coneHomLeft : Hom (cone E F) E where
  s‚ÇÄ i := i.1
  s‚ÇÅ {i j} k := k.1
  h‚ÇÄ _ := pullback.fst _ _
  h‚ÇÅ _ := pullback.fst _ _

@[simps]
noncomputable
def coneHomRight : Hom (cone E F) F where
  s‚ÇÄ i := i.2
  s‚ÇÅ {i j} k := k.2
  h‚ÇÄ _ := pullback.snd _ _
  h‚ÇÅ _ := pullback.snd _ _
  w‚ÇÄ i := by simp [‚Üê pullback.condition]

end

def Hom.homotopic (f g : E.Hom F) : Prop := Nonempty (Homotopy f g)

@[simps]
def Homotopy.whiskerLeft (f : E.Hom F) (g g' : F.Hom G) (h : Homotopy g g') :
    Homotopy (f.comp g) (f.comp g') where
  H i := h.H (f.s‚ÇÄ i)
  a i := f.h‚ÇÄ i ‚â´ h.a (f.s‚ÇÄ i)
  wl i := by simp
  wr i := by simp

def Homotopy.whiskerRight (f f' : E.Hom F) (g : F.Hom G) (h : Homotopy f f') :
    Homotopy (f.comp g) (f'.comp g) where
  H i := g.s‚ÇÅ (h.H i)
  a i := h.a i ‚â´ g.h‚ÇÅ _
  wl i := by simp [Hom.w‚ÇÅ‚ÇÅ]
  wr i := by simp [Hom.w‚ÇÅ‚ÇÇ]

end PreOneHypercover

namespace GrothendieckTopology

open Limits
variable (J : GrothendieckTopology C)

structure HOneHypercover (S : C) where
  oneHypercover : J.OneHypercover S

namespace OneHypercover

variable {S : C}

abbrev Hom.homotopic {E F : J.OneHypercover S} (f g : E.Hom F) : Prop :=
  PreOneHypercover.Hom.homotopic f g

instance : Category (J.OneHypercover S) where
  Hom := Hom
  id E := PreOneHypercover.Hom.id E.toPreOneHypercover
  comp f g := f.comp g

instance : Nonempty (J.OneHypercover S) :=
  ‚ü®{ I‚ÇÄ := PUnit,
     X _ := S,
     f _ := ùüô S,
     I‚ÇÅ _ _ := PUnit,
     Y _ _ _ := S
     p‚ÇÅ _ _ _ := ùüô S
     p‚ÇÇ _ _ _ := ùüô S
     w _ _ _ := rfl
     mem‚ÇÄ := by simp [PreZeroHypercover.sieve‚ÇÄ]
     mem‚ÇÅ _ _ _ _ := by
      simp only [Category.comp_id, PreOneHypercover.sieve‚ÇÅ, exists_eq_left', exists_const,
        forall_eq']
      exact J.top_mem' _
  }‚ü©

noncomputable
def cone (E F : J.OneHypercover S) [‚àÄ (i : E.I‚ÇÄ) (j : F.I‚ÇÄ), HasPullback (E.f i) (F.f j)]
    [‚àÄ (i j : E.I‚ÇÄ) (k : E.I‚ÇÅ i j) (a b : F.I‚ÇÄ) (l : F.I‚ÇÅ a b),
      HasPullback (E.p‚ÇÅ k ‚â´ E.f i) (F.p‚ÇÅ l ‚â´ F.f a)] : J.OneHypercover S where
  __ := E.toPreOneHypercover.cone F.toPreOneHypercover
  mem‚ÇÄ := sorry
  mem‚ÇÅ := sorry

end OneHypercover

namespace HOneHypercover

variable {S : C}

variable (S) in
def Hom (E F : J.HOneHypercover S) : Type _ :=
  Quot (OneHypercover.Hom.homotopic (E := E.oneHypercover) (F := F.oneHypercover))

instance : Category (J.HOneHypercover S) where
  Hom := Hom J S
  id E := Quot.mk _ (ùüô E.oneHypercover)
  comp {E F G} :=
    Quot.lift‚ÇÇ (fun f g ‚Ü¶ Quot.mk _ (f ‚â´ g : E.oneHypercover ‚ü∂ G.oneHypercover))
      (fun f g g' hgg' ‚Ü¶ by
        obtain ‚ü®H‚ü© := hgg'
        dsimp
        apply Quot.sound
        constructor
        exact H.whiskerLeft _ _ _)
      (fun f f' g hff' ‚Ü¶ by
        obtain ‚ü®H‚ü© := hff'
        dsimp
        apply Quot.sound
        constructor
        exact H.whiskerRight _ _ _)
  id_comp f := by
    obtain ‚ü®f, rfl‚ü© := Quot.exists_rep f
    simp
  comp_id f := by
    obtain ‚ü®f, rfl‚ü© := Quot.exists_rep f
    simp
  assoc f g h := by
    obtain ‚ü®f, rfl‚ü© := Quot.exists_rep f
    obtain ‚ü®g, rfl‚ü© := Quot.exists_rep g
    obtain ‚ü®h, rfl‚ü© := Quot.exists_rep h
    simp

instance : Nonempty (J.HOneHypercover S) := ‚ü®‚ü®Nonempty.some inferInstance‚ü©‚ü©

variable (S) in
def _root_.CategoryTheory.GrothendieckTopology.OneHypercover.toHOneHypercover :
    J.OneHypercover S ‚•§ J.HOneHypercover S where
  obj E := ‚ü®E‚ü©
  map f := Quot.mk _ f

open OneHypercover

instance : (toHOneHypercover J S).Full where
  map_surjective := Quot.exists_rep

instance [HasPullbacks C] : IsCofiltered (J.HOneHypercover S) where
  cone_objs {E F} :=
    sorry
  cone_maps {X Y} f g := by
    obtain ‚ü®(f : X.1 ‚ü∂ Y.1), rfl‚ü© := (toHOneHypercover J S).map_surjective f
    obtain ‚ü®(g : X.1 ‚ü∂ Y.1), rfl‚ü© := (toHOneHypercover J S).map_surjective g
    obtain ‚ü®W, h, ‚ü®H‚ü©‚ü© := OneHypercover.exists_nonempty_homotopy f g
    use (toHOneHypercover J S).obj W, (toHOneHypercover J S).map h
    exact Quot.sound ‚ü®H‚ü©

section Sheafification

variable [HasPullbacks C]

noncomputable
def foo (E : J.HOneHypercover S) : HOneHypercover.mk (E.1.pullback‚ÇÅ (ùüô S)) ‚âÖ E where
  hom := Quot.mk _ {
    s‚ÇÄ := id
    h‚ÇÄ i := pullback.snd _ _
    s‚ÇÅ := id
    h‚ÇÅ {i j} k := pullback.snd _ _
    w‚ÇÄ := by simp [‚Üê pullback.condition]
  }
  inv := Quot.mk _ {
    s‚ÇÄ := id
    h‚ÇÄ i := pullback.lift (E.1.f i) (ùüô _)
    s‚ÇÅ := id
    h‚ÇÅ {i j} k := pullback.lift (E.1.p‚ÇÅ k ‚â´ E.1.f _) (ùüô _)
    w‚ÇÅ‚ÇÇ k := by apply pullback.hom_ext <;> simp [E.1.w]
  }
  hom_inv_id := by
    apply Quot.sound
    constructor
    refine ‚ü®fun (i : E.1.I‚ÇÄ) ‚Ü¶ ?_, ?_, ?_, ?_‚ü©
    ¬∑ simp
      change E.1.I‚ÇÅ i i
      sorry
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
  inv_hom_id := sorry

noncomputable
def pullback {T : C} (f : S ‚ü∂ T) : J.HOneHypercover T ‚•§ J.HOneHypercover S where
  obj E := ‚ü®E.1.pullback‚ÇÅ f‚ü©
  map {E F} := Quot.map (fun g ‚Ü¶ g.pullback‚ÇÅ f) fun u v ‚ü®H‚ü© ‚Ü¶ ‚ü®H.pullback‚ÇÅ f‚ü©
  map_id E := by
    apply Quot.sound
    simp
    constructor
    refine ‚ü®fun (i : E.1.I‚ÇÄ) ‚Ü¶ ?_, ?_, ?_, ?_‚ü©
    ¬∑ simp
      change E.1.I‚ÇÅ i i
      sorry
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
  map_comp := sorry

end Sheafification

end HOneHypercover

end GrothendieckTopology

end CategoryTheory
