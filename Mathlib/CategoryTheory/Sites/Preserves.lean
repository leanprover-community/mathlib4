/-
Copyright (c) 2023 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson
-/
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Products
import Mathlib.CategoryTheory.Limits.Shapes.CommSq
import Mathlib.CategoryTheory.Sites.EqualizerSheafCondition

/-!
# Sheaves preserve products

We prove that a presheaf which satisfies the sheaf condition with respect to certain presieves
preserve "the corresponding products".

## Main results

More precisely, given a presheaf `F : C·µí·µñ ‚•§ Type*`, we have:

* If `F` satisfies the sheaf condition with respect to the empty sieve on the initial object of `C`,
  then `F`¬†preserves terminal objects.
See `preservesTerminalOfIsSheafForEmpty`.

* If `F`¬†furthermore satisfies the sheaf condition with respect to the presieve consisting of the
  inclusion arrows in a coproduct in `C`, then `F`¬†preserves the corresponding product.
See `preservesProductOfIsSheafFor`.

* If `F`¬†preserves a product, then it satisfies the sheaf condition with respect to the
  corresponding presieve of arrows.
See `isSheafFor_of_preservesProduct`.
-/

universe v u

namespace CategoryTheory.Presieve

variable {C : Type u} [Category.{v} C] {I : C} (F : C·µí·µñ ‚•§ Type (max u v))

open Limits Opposite

variable (hF : (ofArrows (X := I) Empty.elim instIsEmptyEmpty.elim).IsSheafFor F)

section Terminal

variable (I) in
/--
If `F`¬†is a presheaf which satisfies the sheaf condition with respect to the empty presieve on any
object, then `F`¬†takes that object to the terminal object.
-/
noncomputable
def isTerminal_of_isSheafFor_empty_presieve : IsTerminal (F.obj (op I)) := by
  refine @IsTerminal.ofUnique _ _ _ fun Y ‚Ü¶ ?_
  choose t h using hF (by tauto) (by tauto)
  exact ‚ü®‚ü®fun _ ‚Ü¶ t‚ü©, fun a ‚Ü¶ by ext; exact h.2 _ (by tauto)‚ü©

/--
If `F`¬†is a presheaf which satisfies the sheaf condition with respect to the empty presieve on the
initial object, then `F`¬†preserves terminal objects.
-/
noncomputable
def preservesTerminalOfIsSheafForEmpty (hI : IsInitial I) : PreservesLimit (Functor.empty C·µí·µñ) F :=
  haveI := hI.hasInitial
  (preservesTerminalOfIso F
    ((F.mapIso (terminalIsoIsTerminal (terminalOpOfInitial initialIsInitial)) ‚â™‚â´
    (F.mapIso (initialIsoIsInitial hI).symm.op) ‚â™‚â´
    (terminalIsoIsTerminal (isTerminal_of_isSheafFor_empty_presieve I F hF)).symm)))

end Terminal

section Product

variable (hI : IsInitial I)

-- This is the data of a particular disjoint coproduct in `C`.
variable {Œ± : Type} {X : Œ± ‚Üí C} (c : Cofan X) (hc : IsColimit c) [(ofArrows X c.inj).hasPullbacks]
    [HasInitial C] [‚àÄ i, Mono (c.inj i)]
    (hd : ‚àÄ i j, i ‚â† j ‚Üí IsPullback (initial.to _) (initial.to _) (c.inj i) (c.inj j))

/--
The two parallel maps in the equalizer diagram for the sheaf condition corresponding to the
inclusion maps in a disjoint coproduct are equal.
-/
theorem firstMap_eq_secondMap : Equalizer.Presieve.Arrows.firstMap F X c.inj =
    Equalizer.Presieve.Arrows.secondMap F X c.inj := by
  ext a ‚ü®i, j‚ü©
  simp only [Equalizer.Presieve.Arrows.firstMap, Types.pi_lift_œÄ_apply, types_comp_apply,
    Equalizer.Presieve.Arrows.secondMap]
  by_cases hi : i = j
  ¬∑ subst hi
    suffices pullback.fst (f := c.inj i) (g := c.inj i) =
      pullback.snd (f := c.inj i) (g := c.inj i) by rw [this]
    exact Mono.right_cancellation _ _ pullback.condition
  ¬∑ haveI := preservesTerminalOfIsSheafForEmpty F hF hI
    -- let i‚ÇÅ : op (pullback (c.inj i) (c.inj j)) ‚âÖ op (‚ä•_ _) := ((hd i j hi).isoPullback).op
    -- let i‚ÇÇ : op (‚ä•_ C) ‚âÖ (‚ä§_ C·µí·µñ) :=
    --   (terminalIsoIsTerminal (terminalOpOfInitial initialIsInitial)).symm
    apply_fun (F.mapIso ((hd i j hi).isoPullback).op ‚â™‚â´ F.mapIso (terminalIsoIsTerminal
      (terminalOpOfInitial initialIsInitial)).symm ‚â™‚â´ (PreservesTerminal.iso F)).hom using
      injective_of_mono _
    simp

theorem piComparison_fac'' :
    haveI : HasCoproduct X := ‚ü®‚ü®c, hc‚ü©‚ü©
    piComparison F (fun x ‚Ü¶ op (X x)) = F.map ((opCoproductIsoProduct X).inv ‚â´
    ((coproductIsCoproduct X).coconePointUniqueUpToIso hc).op.inv) ‚â´
    Equalizer.Presieve.Arrows.forkMap F X (fun i ‚Ü¶ c.Œπ.app ‚ü®i‚ü©) := by
  simp only [Cofan.mk_pt, Equalizer.Presieve.Arrows.forkMap, Category.assoc]
  haveI : HasCoproduct X := ‚ü®‚ü®c, hc‚ü©‚ü©
  haveI : HasCoproduct (fun i ‚Ü¶ (Discrete.functor X).obj ‚ü®i‚ü©) := ‚ü®‚ü®c, hc‚ü©‚ü©
  have h‚ÇÅ' : Pi.lift (fun i ‚Ü¶ F.map (c.Œπ.app ‚ü®i‚ü©).op) =
      F.map (Pi.lift (fun i ‚Ü¶ (c.Œπ.app ‚ü®i‚ü©).op)) ‚â´ piComparison F _ := by simp
  erw [h‚ÇÅ', ‚Üê Category.assoc, ‚Üê Functor.map_comp,
    ‚Üê desc_op_comp_opCoproductIsoProduct_hom' hc (œÄ := fun i ‚Ü¶ c.Œπ.app ‚ü®i‚ü©)]
  have h‚ÇÇ : Cofan.IsColimit.desc hc (fun i ‚Ü¶ c.Œπ.app ‚ü®i‚ü©) = ùüô _ := hc.desc_self
  rw [h‚ÇÇ]
  simp only [Discrete.functor_obj, Iso.op_inv, op_id, Cofan.mk_pt, Iso.op_hom, Category.id_comp,
    Category.assoc, ‚Üê Functor.map_comp]
  rw [‚Üê Category.id_comp (piComparison F fun x ‚Ü¶ op (X x))]
  congr
  rw [‚Üê F.map_id]
  congr
  simp [Iso.eq_inv_comp, ‚Üê Category.assoc, ‚Üê op_comp, eq_comm, ‚Üê Iso.eq_comp_inv]

theorem piComparison_fac' {Z : C} [HasCoproduct X] (œÄ : (i : Œ±) ‚Üí X i ‚ü∂ Z) [IsIso (Sigma.desc œÄ)] :
    piComparison F (fun x ‚Ü¶ op (X x)) =
    F.map ((opCoproductIsoProduct X).inv ‚â´ (inv (Sigma.desc œÄ)).op) ‚â´
    Equalizer.Presieve.Arrows.forkMap F X œÄ := by
  have h‚ÇÅ : Pi.lift (fun i ‚Ü¶ F.map (œÄ i).op) =
      F.map (Pi.lift (fun i ‚Ü¶ (œÄ i).op)) ‚â´ piComparison F _ := by simp
  have h‚ÇÇ : (opCoproductIsoProduct X).inv ‚â´ (inv (Sigma.desc œÄ)).op =
      inv ((Sigma.desc œÄ).op ‚â´ (opCoproductIsoProduct X).hom) := by
    simp only [op_inv, IsIso.inv_comp, IsIso.Iso.inv_hom]
  simp only [Equalizer.Presieve.Arrows.forkMap, h‚ÇÇ, h‚ÇÅ,  ‚Üê desc_op_comp_opCoproductIsoProduct_hom,
    ‚Üê Category.assoc, ‚Üê Functor.map_comp, IsIso.inv_comp, IsIso.Iso.inv_hom,
    Category.assoc, IsIso.inv_hom_id, Category.comp_id, Iso.inv_hom_id, Functor.map_id,
    Category.id_comp]

theorem piComparison_fac [HasCoproduct X] : piComparison F (fun x ‚Ü¶ op (X x)) =
    F.map (opCoproductIsoProduct X).inv ‚â´
    Equalizer.Presieve.Arrows.forkMap F X (Sigma.Œπ X) := by
  have : Sigma.desc (Sigma.Œπ X) = ùüô _ := by ext; simp
  have _ : IsIso (Sigma.desc (Sigma.Œπ X)) := by rw [this]; infer_instance
  rw [piComparison_fac' (œÄ := (Sigma.Œπ X))]
  simp only [op_inv, Functor.map_comp, Functor.map_inv, Category.assoc, this]
  congr
  simp only [op_id, Functor.map_id, IsIso.inv_id]
  rfl

/--
If `F` is a presheaf which `IsSheafFor` a presieve of arrows and the empty presieve, then it
preserves the product corresponding to the presieve of arrows.
-/
noncomputable
def preservesProductOfIsSheafFor (hF' : (ofArrows X c.inj).IsSheafFor F) :
    PreservesLimit (Discrete.functor (fun x ‚Ü¶ op (X x))) F := by
  haveI : HasCoproduct X := ‚ü®‚ü®c, hc‚ü©‚ü©
  refine @PreservesProduct.ofIsoComparison _ _ _ _ F _ (fun x ‚Ü¶ op (X x)) _ _ ?_
  rw [piComparison_fac'' (hc := hc)]
  refine @IsIso.comp_isIso _ _ _ _ _ _ _ inferInstance ?_
  rw [isIso_iff_bijective, Function.bijective_iff_existsUnique]
  rw [Equalizer.Presieve.Arrows.sheaf_condition, Limits.Types.type_equalizer_iff_unique] at hF'
  haveI : (ofArrows X (Cofan.mk _ (Sigma.Œπ X)).inj).hasPullbacks := sorry
  exact fun b ‚Ü¶ hF' b (congr_fun (firstMap_eq_secondMap F hF hI c hd) b)

/--
If `F` preserves a particular product, then it `IsSheafFor` the corresponging presieve of arrows.
-/
theorem isSheafFor_of_preservesProduct [PreservesLimit (Discrete.functor (fun x ‚Ü¶ op (X x))) F] :
    (ofArrows X c.inj).IsSheafFor F := by
  rw [Equalizer.Presieve.Arrows.sheaf_condition, Limits.Types.type_equalizer_iff_unique]
  haveI : HasCoproduct X := ‚ü®‚ü®c, hc‚ü©‚ü©
  have hi : IsIso (piComparison F (fun x ‚Ü¶ op (X x))) := inferInstance
  rw [piComparison_fac'' (hc := hc), isIso_iff_bijective, Function.bijective_iff_existsUnique] at hi
  intro b _
  obtain ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü© := hi b
  refine ‚ü®F.map ((opCoproductIsoProduct X).inv ‚â´
    ((coproductIsCoproduct X).coconePointUniqueUpToIso hc).op.inv) t, ht‚ÇÅ, fun y hy ‚Ü¶ ?_‚ü©
  specialize ht‚ÇÇ (F.map (((coproductIsCoproduct X).coconePointUniqueUpToIso hc).hom.op ‚â´
    (opCoproductIsoProduct X).hom) y)
  apply_fun F.map (((coproductIsCoproduct X).coconePointUniqueUpToIso hc).hom.op ‚â´
    (opCoproductIsoProduct X).hom) using injective_of_mono _
  simp only [‚Üê FunctorToTypes.map_comp_apply, Iso.op, Category.assoc]
  rw [ht‚ÇÇ ?_]
  ¬∑ change (ùüô (F.obj (‚àè fun x ‚Ü¶ op (X x)))) t = _
    rw [‚Üê Functor.map_id]
    refine congrFun ?_ t
    congr
    simp [Iso.eq_inv_comp, ‚Üê Category.assoc, ‚Üê op_comp, eq_comm, ‚Üê Iso.eq_comp_inv]
  ¬∑ rw [‚Üê hy]
    simp only [Cofan.mk_pt, Iso.op_inv, Functor.map_comp, FunctorToTypes.map_comp_apply,
      types_comp_apply, FunctorToTypes.map_inv_map_hom_apply]
    congr
    simp only [‚Üê Functor.map_inv, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp,
      Iso.inv_hom_id, op_id, FunctorToTypes.map_id_apply]

theorem isSheafFor_of_preservesProduct' {Z : C} (œÄ : (i : Œ±) ‚Üí X i ‚ü∂ Z)
    [HasCoproduct X] [IsIso (Sigma.desc œÄ)]
    [PreservesLimit (Discrete.functor (fun x ‚Ü¶ op (X x))) F] [(ofArrows X œÄ).hasPullbacks] :
    (ofArrows X œÄ).IsSheafFor F := by
  change (ofArrows X (Cofan.mk Z œÄ).inj).IsSheafFor F
  haveI : (ofArrows (fun b ‚Ü¶ X b) (Cofan.inj (Cofan.mk Z œÄ))).hasPullbacks := by
    change (ofArrows X œÄ).hasPullbacks
    infer_instance
  refine isSheafFor_of_preservesProduct F (Cofan.mk Z œÄ) (isCoproduct_of_sigma_desc_iso œÄ)

theorem isSheafFor_iff_preservesProduct : (ofArrows X c.inj).IsSheafFor F ‚Üî
    Nonempty (PreservesLimit (Discrete.functor (fun x ‚Ü¶ op (X x))) F) := by
  refine ‚ü®fun hF' ‚Ü¶ ‚ü®preservesProductOfIsSheafFor _ hF hI c hc hd hF'‚ü©, fun hF' ‚Ü¶ ?_‚ü©
  let _ := hF'.some
  exact isSheafFor_of_preservesProduct F c hc

end Product

end CategoryTheory.Presieve
