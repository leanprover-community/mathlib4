/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Sites.ObjectsCoverTop
import Mathlib.CategoryTheory.Sites.SheafHom
import Mathlib.CategoryTheory.Sites.InducedTopology

/-! Descent of sheaves

By definition, if `F` is a sheaf of types, we know that sections of `F` can be glued.
The construction of `SheafHom` (see the file `CategoryTheory.Sites.SheafHom`) show
that morphisms of sheaves can be glued. In this file, we shall show that sheaves
may also be glued (TODO).

More precisely, given a site `(C, J)` and a family of objects `Y : I ‚Üí C`
such that `hY : J.ObjectsCoverTop Y`, we construct a category `hY.SheafDescentData A`
(for any category `A`) which consists of families of sheaves `sheaf i : Sheaf (J.over (Y i)) A`
on `Y i` for all `i` that are equipped with a descent data: this data makes it
reasonable to expect that there exists a sheaf `F` on `(C, J)` (well defined up
to a unique isomorphism) such that each `sheaf i` is canonically isomorphic to
the pullback of `F`: if it is so, then for any `X` in `C` with two maps `f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ`
and `f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ`, the pullback on `X` of `sheaf i‚ÇÅ` and `sheaf i‚ÇÇ` must be isomorphic.
This data is encoded in the `iso` field of `SheafDescentData`, and compatibilites
are stated as `pullback_iso` and `iso_trans`. In case `C` has suitable binary products,
it is clear from the `pullback_iso` condition that it suffices to define the `iso`
field on the binary products `Y i‚ÇÅ ‚®Ø Y i‚ÇÇ`, and then, the transitivity condition `iso_trans`
can be formulated using ternary products (TODO: define such a constructor).

Currently, the main result is that the obvious functor
`hY.sheafToDescentData A : Sheaf J A ‚•§ hY.SheafDescentData A` is fully faithful:
this can be understood as the descent of morphisms of sheaves. When we are
able to show that this functor is essentially surjective, we may say that the descent
is effective: this should require that suitable limits exists in `A`, and this
should be a consequence of the results in `Sites.DenseSubsite` (TODO).

More concretely, in the case of topological space `X` and an open covering `i ‚Ü¶ Y i`,
the effectiveness of the descent of sheaves means that if we have sheaves
`F i` on each `Y i`, and isomorphisms between the restrictions
of `F i` and `F j` on the intersections of `Y i` and `Y j` which satisfy certain
compatibilites, then the sheaves `F i` can be glued in order to obtain a sheaf on `X`
whose restriction of `Y i` identifies to `F i`, in a way that is compatible
with the given isomorphisms.

* Giraud, Jean, M√©moires de la Soci√©t√© Math√©matique de France, no. 2 (1964), 156 p.

-/

universe v' v u' u

namespace CategoryTheory

open Category Limits

-- is this a duplicate lemma???
lemma NatTrans.naturality' {C D : Type*} [Category C] [Category D]
    {F G : C ‚•§ D} (Œ± : F ‚ü∂ G) {X Y : C} (e : X ‚âÖ Y) :
    Œ±.app X = F.map e.hom ‚â´ Œ±.app Y ‚â´ G.map e.inv := by
  simp only [naturality_assoc, ‚Üê G.map_comp, e.hom_inv_id, G.map_id, comp_id]

@[simp]
lemma sheafToPresheaf_preimage_val {C : Type*} [Category C] {J : GrothendieckTopology C}
    {A : Type*} [Category A] {F G : Sheaf J A} (œÜ : F.1 ‚ü∂ G.1) :
    ((sheafToPresheaf J A).preimage œÜ).val = œÜ := rfl

namespace GrothendieckTopology

namespace ObjectsCoverTop

variable {C : Type u} [Category.{v} C] {J : GrothendieckTopology C}
  {I : Type*} {Y : I ‚Üí C}

/-- Given a site `(C, J)` and family of objects `Y : I ‚Üí C` which cover the final object,
this is the type of families of sheaves over the `Y i` that are equipped
with a descent data. When the descent is effective, this category
is equivalent to `Sheaf J A` (TODO) -/
structure SheafDescentData (hY : J.ObjectsCoverTop Y)
    (A : Type u') [Category.{v'} A] where
  /-- a sheaf on `J.over (Y i)` -/
  sheaf (i : I) : Sheaf (J.over (Y i)) A
  /-- the descent data -/
  iso ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    (J.overMapPullback A f‚ÇÅ).obj (sheaf i‚ÇÅ) ‚âÖ
      (J.overMapPullback A f‚ÇÇ).obj (sheaf i‚ÇÇ)
  /-- the given isomorphism satisfy a compatibility with precomposition -/
  pullback_iso ‚¶ÉX X' : C‚¶Ñ (g : X' ‚ü∂ X) ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ
      (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
      iso (g ‚â´ f‚ÇÅ) (g ‚â´ f‚ÇÇ) = (J.overMapPullbackComp A g f‚ÇÅ).symm.app _ ‚â™‚â´
        (J.overMapPullback A g).mapIso (iso f‚ÇÅ f‚ÇÇ) ‚â™‚â´
        (J.overMapPullbackComp A g f‚ÇÇ).app _ := by aesop_cat
  /-- the "cocycle" relation of the descent data -/
  iso_trans ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (f‚ÇÉ : X ‚ü∂ Y i‚ÇÉ) :
    iso f‚ÇÅ f‚ÇÇ ‚â™‚â´ iso f‚ÇÇ f‚ÇÉ = iso f‚ÇÅ f‚ÇÉ := by aesop_cat

namespace SheafDescentData

variable {hY : J.ObjectsCoverTop Y} {A : Type u'} [Category.{v'} A]
    (D D‚ÇÅ D‚ÇÇ D‚ÇÉ : hY.SheafDescentData A)

@[reassoc]
lemma iso_trans_hom ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (f‚ÇÉ : X ‚ü∂ Y i‚ÇÉ) :
    (D.iso f‚ÇÅ f‚ÇÇ).hom ‚â´ (D.iso f‚ÇÇ f‚ÇÉ).hom = (D.iso f‚ÇÅ f‚ÇÉ).hom := by
  rw [‚Üê Iso.trans_hom, D.iso_trans]

@[reassoc]
lemma iso_trans_inv ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (f‚ÇÉ : X ‚ü∂ Y i‚ÇÉ) :
    (D.iso f‚ÇÇ f‚ÇÉ).inv ‚â´ (D.iso f‚ÇÅ f‚ÇÇ).inv = (D.iso f‚ÇÅ f‚ÇÉ).inv := by
  rw [‚Üê Iso.trans_inv, D.iso_trans]

lemma iso_refl_hom ‚¶ÉX : C‚¶Ñ ‚¶Éi : I‚¶Ñ (f : X ‚ü∂ Y i) :
    (D.iso f f).hom = ùüô _ := by
  rw [‚Üê cancel_mono (D.iso f f).hom, iso_trans_hom, id_comp]

@[simp 1000]
lemma iso_refl ‚¶ÉX : C‚¶Ñ ‚¶Éi : I‚¶Ñ (f : X ‚ü∂ Y i) :
    D.iso f f = Iso.refl _ := by
  ext1
  rw [iso_refl_hom, Iso.refl_hom]

lemma iso_refl_inv ‚¶ÉX : C‚¶Ñ ‚¶Éi : I‚¶Ñ (f : X ‚ü∂ Y i) :
    (D.iso f f).inv = ùüô _ := by simp

lemma iso_inv ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    (D.iso f‚ÇÅ f‚ÇÇ).inv = (D.iso f‚ÇÇ f‚ÇÅ).hom := by
  rw [‚Üê cancel_mono (D.iso f‚ÇÅ f‚ÇÇ).hom, Iso.inv_hom_id, iso_trans_hom, iso_refl, Iso.refl_hom]

lemma iso_symm ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    (D.iso f‚ÇÅ f‚ÇÇ).symm = D.iso f‚ÇÇ f‚ÇÅ := by
  ext1
  rw [Iso.symm_hom, iso_inv]

/-- Given `D : hY.SheafDescentData A`, this is the isomorphism on
sections of `D.sheaf i‚ÇÅ` and `D.sheaf i‚ÇÇ` on objects which map
to two objects `Y i‚ÇÅ` and `Y i‚ÇÇ` of the family. -/
def isoSections ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    (D.sheaf i‚ÇÅ).1.obj (Opposite.op (Over.mk f‚ÇÅ)) ‚âÖ
      (D.sheaf i‚ÇÇ).1.obj (Opposite.op (Over.mk f‚ÇÇ)) :=
  (overMapPullbackSectionsIso J A f‚ÇÅ (Over.mk (ùüô _)) (Over.mk f‚ÇÅ)
    (Over.isoMk (Iso.refl _))).symm.app (D.sheaf i‚ÇÅ) ‚â™‚â´
    ((sheafSections (J.over X) A).obj (Opposite.op (Over.mk (ùüô X)))).mapIso (D.iso f‚ÇÅ f‚ÇÇ) ‚â™‚â´
    (overMapPullbackSectionsIso J A f‚ÇÇ (Over.mk (ùüô _)) (Over.mk f‚ÇÇ)
      (Over.isoMk (Iso.refl _))).app (D.sheaf i‚ÇÇ)

lemma isoSections_trans ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (f‚ÇÉ : X ‚ü∂ Y i‚ÇÉ) :
    D.isoSections f‚ÇÅ f‚ÇÇ ‚â™‚â´ D.isoSections f‚ÇÇ f‚ÇÉ = D.isoSections f‚ÇÅ f‚ÇÉ := by
  ext1
  simp [isoSections, ‚Üê D.iso_trans_hom f‚ÇÅ f‚ÇÇ f‚ÇÉ]

@[reassoc]
lemma isoSections_trans_hom ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (f‚ÇÉ : X ‚ü∂ Y i‚ÇÉ) :
    (D.isoSections f‚ÇÅ f‚ÇÇ).hom ‚â´ (D.isoSections f‚ÇÇ f‚ÇÉ).hom = (D.isoSections f‚ÇÅ f‚ÇÉ).hom := by
  rw [‚Üê Iso.trans_hom, isoSections_trans ]

@[reassoc]
lemma isoSections_trans_inv ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (f‚ÇÉ : X ‚ü∂ Y i‚ÇÉ) :
    (D.isoSections f‚ÇÇ f‚ÇÉ).inv ‚â´ (D.isoSections f‚ÇÅ f‚ÇÇ).inv = (D.isoSections f‚ÇÅ f‚ÇÉ).inv := by
  rw [‚Üê Iso.trans_inv, isoSections_trans]

lemma isoSections_refl ‚¶ÉX : C‚¶Ñ ‚¶Éi : I‚¶Ñ (f : X ‚ü∂ Y i) :
    D.isoSections f f = Iso.refl _ := by
  ext1
  dsimp
  rw [‚Üê cancel_mono (D.isoSections f f).hom, isoSections_trans_hom, id_comp]

lemma isoSections_inv ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    (D.isoSections f‚ÇÅ f‚ÇÇ).inv = (D.isoSections f‚ÇÇ f‚ÇÅ).hom := by
  rw [‚Üê cancel_mono (D.isoSections f‚ÇÅ f‚ÇÇ).hom, Iso.inv_hom_id, isoSections_trans_hom,
    isoSections_refl, Iso.refl_hom]

lemma isoSections_symm ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    (D.isoSections f‚ÇÅ f‚ÇÇ).symm = (D.isoSections f‚ÇÇ f‚ÇÅ) := by
  ext1
  dsimp
  rw [isoSections_inv]

lemma pullback_iso' ‚¶ÉX Z : C‚¶Ñ (h : X ‚ü∂ Z) ‚¶Éi‚ÇÅ : I‚¶Ñ
    (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (g‚ÇÅ : Z ‚ü∂ Y i‚ÇÅ) (fac‚ÇÅ : h ‚â´ g‚ÇÅ = f‚ÇÅ)
      ‚¶Éi‚ÇÇ : I‚¶Ñ (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (g‚ÇÇ : Z ‚ü∂ Y i‚ÇÇ) (fac‚ÇÇ : h ‚â´ g‚ÇÇ = f‚ÇÇ) :
      D.iso f‚ÇÅ f‚ÇÇ = (J.overMapPullbackComp' A h g‚ÇÅ f‚ÇÅ fac‚ÇÅ).symm.app _ ‚â™‚â´
          (J.overMapPullback A h).mapIso (D.iso g‚ÇÅ g‚ÇÇ) ‚â™‚â´
          (J.overMapPullbackComp' A h g‚ÇÇ f‚ÇÇ fac‚ÇÇ).app _ := by
  subst fac‚ÇÅ fac‚ÇÇ
  apply pullback_iso

lemma pullback_iso'' ‚¶ÉX Z : C‚¶Ñ (h : X ‚ü∂ Z) ‚¶Éi‚ÇÅ : I‚¶Ñ
    (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (g‚ÇÅ : Z ‚ü∂ Y i‚ÇÅ) (fac‚ÇÅ : h ‚â´ g‚ÇÅ = f‚ÇÅ)
      ‚¶Éi‚ÇÇ : I‚¶Ñ (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (g‚ÇÇ : Z ‚ü∂ Y i‚ÇÇ) (fac‚ÇÇ : h ‚â´ g‚ÇÇ = f‚ÇÇ)
      (W : Over X) (W' : Over Z) (e : W' ‚âÖ (Over.map h).obj W):
    (D.iso f‚ÇÅ f‚ÇÇ).hom.val.app (Opposite.op W) =
      (D.sheaf i‚ÇÅ).val.map (Quiver.Hom.op (Over.homMk e.hom.left
          (by simp [‚Üê Over.w e.hom, fac‚ÇÅ]))) ‚â´
        (D.iso g‚ÇÅ g‚ÇÇ).hom.val.app (Opposite.op W') ‚â´
          (D.sheaf i‚ÇÇ).val.map (Quiver.Hom.op (Over.homMk e.inv.left
            (by simp [‚Üê Over.w e.inv, fac‚ÇÇ]))) := by
  rw [D.pullback_iso' h f‚ÇÅ g‚ÇÅ fac‚ÇÅ f‚ÇÇ g‚ÇÇ fac‚ÇÇ]
  dsimp
  rw [NatTrans.naturality' (D.iso g‚ÇÅ g‚ÇÇ).hom.val e.op]
  dsimp [overMapPullbackComp', Functor.sheafPushforwardContinuousComp',
    Functor.sheafPushforwardContinuousComp, Functor.sheafPushforwardContinuousIso]
  rw [id_comp, assoc, assoc, assoc]
  erw [id_comp]
  rw [‚Üê Functor.map_comp_assoc, ‚Üê Functor.map_comp, ‚Üê op_comp, ‚Üê op_comp]
  congr 3
  ¬∑ ext
    simp [Over.mapComp'] -- there should exists a simp lemma Over.mapComp'_left
  ¬∑ congr 1
    ext
    simp [Over.mapComp']

@[reassoc]
lemma isoSections_naturality ‚¶ÉX Z : C‚¶Ñ (h : X ‚ü∂ Z) ‚¶Éi‚ÇÅ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ)
    (g‚ÇÅ : Z ‚ü∂ Y i‚ÇÅ) (fac‚ÇÅ : h ‚â´ g‚ÇÅ = f‚ÇÅ) ‚¶Éi‚ÇÇ : I‚¶Ñ (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (g‚ÇÇ : Z ‚ü∂ Y i‚ÇÇ)
    (fac‚ÇÇ : h ‚â´ g‚ÇÇ = f‚ÇÇ) :
      (D.sheaf i‚ÇÅ).val.map (Quiver.Hom.op (by exact Over.homMk h)) ‚â´
        (D.isoSections f‚ÇÅ f‚ÇÇ).hom = (D.isoSections g‚ÇÅ g‚ÇÇ).hom ‚â´
        (D.sheaf i‚ÇÇ).val.map (Quiver.Hom.op (by exact Over.homMk h)) := by
  dsimp [isoSections]
  rw [D.pullback_iso' h f‚ÇÅ g‚ÇÅ fac‚ÇÅ f‚ÇÇ g‚ÇÇ fac‚ÇÇ]
  dsimp [overMapPullbackSectionsIso]
  simp only [assoc, ‚Üê (D.sheaf i‚ÇÇ).val.map_comp, ‚Üê op_comp]
  let Œ± : (Over.map h).obj (Over.mk (ùüô X)) ‚ü∂ Over.mk (ùüô Z) := Over.homMk h
  have H := (iso D g‚ÇÅ g‚ÇÇ).hom.val.naturality Œ±.op
  dsimp at H
  let Œ≤ : Over.mk f‚ÇÇ ‚ü∂ Over.mk g‚ÇÇ := Over.homMk h
  let Œ≥ : Over.mk g‚ÇÇ ‚âÖ (Over.map g‚ÇÇ).obj (Over.mk (ùüô Z)) := Over.isoMk (Iso.refl _)
  have fac : Œ≤ ‚â´ Œ≥.hom = (by exact Over.homMk (ùüô _)) ‚â´ (Over.map g‚ÇÇ).map Œ± := by
    ext; simp
  conv_rhs =>
    erw [fac]
  rw [op_comp, (D.sheaf i‚ÇÇ).val.map_comp, ‚Üê reassoc_of% H]
  conv_lhs => rw [‚Üê assoc, ‚Üê assoc]
  conv_rhs => rw [‚Üê assoc]
  congr 1
  ¬∑ dsimp [overMapPullbackComp', Functor.sheafPushforwardContinuousComp',
      Functor.sheafPushforwardContinuousComp, Functor.sheafPushforwardContinuousIso]
    simp only [assoc]
    erw [comp_id]
    simp only [‚Üê Functor.map_comp, ‚Üê op_comp]
    congr 2
    ext
    dsimp [Over.mapComp']
    simp
  ¬∑ congr 1
    dsimp [overMapPullbackComp', Functor.sheafPushforwardContinuousComp',
      Functor.sheafPushforwardContinuousComp, Functor.sheafPushforwardContinuousIso]
    simp only [id_comp, ‚Üê Functor.map_comp, ‚Üê op_comp]
    congr 2
    ext
    dsimp [Over.mapComp']
    simp

lemma isoSections_naturality' ‚¶ÉX Z : C‚¶Ñ (h : X ‚ü∂ Z) ‚¶Éi‚ÇÅ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ)
    (g‚ÇÅ : Z ‚ü∂ Y i‚ÇÅ) (fac‚ÇÅ : h ‚â´ g‚ÇÅ = f‚ÇÅ) ‚¶Éi‚ÇÇ : I‚¶Ñ (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (g‚ÇÇ : Z ‚ü∂ Y i‚ÇÇ)
    (fac‚ÇÇ : h ‚â´ g‚ÇÇ = f‚ÇÇ) :
      (D.sheaf i‚ÇÅ).val.map (Quiver.Hom.op (by exact Over.homMk h)) = (D.isoSections g‚ÇÅ g‚ÇÇ).hom ‚â´
        (D.sheaf i‚ÇÇ).val.map (Quiver.Hom.op (by exact Over.homMk h)) ‚â´
          (D.isoSections f‚ÇÅ f‚ÇÇ).inv := by
  rw [‚Üê D.isoSections_naturality_assoc h f‚ÇÅ g‚ÇÅ fac‚ÇÅ f‚ÇÇ g‚ÇÇ fac‚ÇÇ, Iso.hom_inv_id, comp_id]

lemma iso_hom_val_app ‚¶ÉX : C‚¶Ñ (Z : (Over X)·µí·µñ) ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    (D.iso f‚ÇÅ f‚ÇÇ).hom.val.app Z =
      (D.sheaf i‚ÇÅ).val.map (Over.homMk (ùüô _)).op ‚â´
        (D.isoSections (Z.unop.hom ‚â´ f‚ÇÅ) (Z.unop.hom ‚â´ f‚ÇÇ)).hom := by
  have eq := D.pullback_iso'' Z.unop.hom _ f‚ÇÅ rfl _ f‚ÇÇ rfl (Over.mk (ùüô _)) Z.unop
    (Over.isoMk (Iso.refl _))
  dsimp [isoSections] at eq ‚ä¢
  rw [eq, assoc,
    ‚Üê cancel_epi ((D.sheaf i‚ÇÅ).val.map (ùüô (Opposite.op ((Over.map f‚ÇÅ).obj Z.unop)))),
    ‚Üê cancel_mono ((D.sheaf i‚ÇÇ).val.map (ùüô (Opposite.op ((Over.map f‚ÇÇ).obj Z.unop))))]
  dsimp [overMapPullbackSectionsIso]
  simp only [assoc, ‚Üê Functor.map_comp_assoc, ‚Üê Functor.map_comp, ‚Üê op_comp]
  congr 2
  ¬∑ apply Quiver.Hom.unop_inj
    ext
    simp
  ¬∑ congr 1
    apply Quiver.Hom.unop_inj
    ext
    simp

/-- The type of morphisms between families of sheaves equipped with a descent data. -/
@[ext]
structure Hom where
  /-- a family of morphisms of sheaves  -/
  hom (i : I) : D‚ÇÅ.sheaf i ‚ü∂ D‚ÇÇ.sheaf i
  comm ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    (J.overMapPullback A f‚ÇÅ).map (hom i‚ÇÅ) ‚â´ (D‚ÇÇ.iso f‚ÇÅ f‚ÇÇ).hom =
    (D‚ÇÅ.iso f‚ÇÅ f‚ÇÇ).hom ‚â´ (J.overMapPullback A f‚ÇÇ).map (hom i‚ÇÇ) := by aesop_cat

namespace Hom

attribute [reassoc (attr := simp, nolint simpNF)] comm

/-- The identity morphism in `hY.SheafDescentData A`. -/
@[simps]
def id : Hom D D where
  hom _ := ùüô _

variable {D‚ÇÅ D‚ÇÇ D‚ÇÉ}

/-- The composition of morphisms in `hY.SheafDescentData A`. -/
@[simps]
def comp (Œ± : Hom D‚ÇÅ D‚ÇÇ) (Œ≤ : Hom D‚ÇÇ D‚ÇÉ) : Hom D‚ÇÅ D‚ÇÉ where
  hom i := Œ±.hom i ‚â´ Œ≤.hom i

instance : Category (hY.SheafDescentData A) where
  Hom := Hom
  id := id
  comp := comp

end Hom

@[simp, reassoc]
lemma id_hom (i : I) :
    Hom.hom (ùüô D‚ÇÅ) i = ùüô _ := rfl

variable {D‚ÇÅ D‚ÇÇ D‚ÇÉ}

@[simp, reassoc]
lemma comp_hom {Œ± : D‚ÇÅ ‚ü∂ D‚ÇÇ} {Œ≤ : D‚ÇÇ ‚ü∂ D‚ÇÉ} (i : I) :
    (Œ± ‚â´ Œ≤).hom i = Œ±.hom i ‚â´ Œ≤.hom i := rfl

lemma congr_hom {f g : D‚ÇÅ ‚ü∂ D‚ÇÇ} (h : f = g) (i : I) : f.hom i = g.hom i := by
  subst h
  rfl

@[ext]
lemma hom_ext {f g : D‚ÇÅ ‚ü∂ D‚ÇÇ}
    (h : ‚àÄ i, f.hom i = g.hom i) : f = g :=
  Hom.ext _ _ (funext h)

@[reassoc]
lemma isoSections_hom_naturality‚ÇÇ {D‚ÇÅ D‚ÇÇ : hY.SheafDescentData A}
    (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    (œÜ.hom i‚ÇÅ).val.app _ ‚â´ (D‚ÇÇ.isoSections f‚ÇÅ f‚ÇÇ).hom =
      (D‚ÇÅ.isoSections f‚ÇÅ f‚ÇÇ).hom ‚â´ (œÜ.hom i‚ÇÇ).val.app _ := by
  dsimp [isoSections]
  have h‚ÇÅ := (overMapPullbackSectionsIso J A f‚ÇÅ (Over.mk (ùüô X)) (Over.mk f‚ÇÅ)
    (Over.isoMk (Iso.refl X))).inv.naturality (œÜ.hom i‚ÇÅ)
  have h‚ÇÇ := (overMapPullbackSectionsIso J A f‚ÇÇ (Over.mk (ùüô X)) (Over.mk f‚ÇÇ)
    (Over.isoMk (Iso.refl X))).hom.naturality (œÜ.hom i‚ÇÇ)
  have h‚ÇÉ := NatTrans.congr_app ((sheafToPresheaf _ _).congr_map (œÜ.comm f‚ÇÅ f‚ÇÇ))
    (Opposite.op (Over.mk (ùüô X)))
  dsimp at h‚ÇÅ h‚ÇÇ h‚ÇÉ
  simp only [assoc, ‚Üê h‚ÇÇ, reassoc_of% h‚ÇÅ, reassoc_of% h‚ÇÉ]

@[reassoc]
lemma isoSections_inv_naturality‚ÇÇ {D‚ÇÅ D‚ÇÇ : hY.SheafDescentData A}
    (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    (œÜ.hom i‚ÇÇ).val.app _ ‚â´ (D‚ÇÇ.isoSections f‚ÇÅ f‚ÇÇ).inv =
      (D‚ÇÅ.isoSections f‚ÇÅ f‚ÇÇ).inv ‚â´ (œÜ.hom i‚ÇÅ).val.app _ := by
  rw [‚Üê cancel_mono (D‚ÇÇ.isoSections f‚ÇÅ f‚ÇÇ).hom, assoc, assoc,
    Iso.inv_hom_id, comp_id, isoSections_hom_naturality‚ÇÇ œÜ f‚ÇÅ f‚ÇÇ,
    Iso.inv_hom_id_assoc]

/-- Constructor for isomorphisms in `hY.SheafDescentData A`. -/
@[simps]
def isoMk {D‚ÇÅ D‚ÇÇ : hY.SheafDescentData A} (e : ‚àÄ i, D‚ÇÅ.sheaf i ‚âÖ D‚ÇÇ.sheaf i)
    (comm : ‚àÄ ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ),
    (J.overMapPullback A f‚ÇÅ).map (e i‚ÇÅ).hom ‚â´ (D‚ÇÇ.iso f‚ÇÅ f‚ÇÇ).hom =
      (D‚ÇÅ.iso f‚ÇÅ f‚ÇÇ).hom ‚â´ (J.overMapPullback A f‚ÇÇ).map (e i‚ÇÇ).hom) : D‚ÇÅ ‚âÖ D‚ÇÇ where
  hom :=
    { hom := fun i => (e i).hom
      comm := comm }
  inv :=
    { hom := fun i => (e i).inv
      comm := by
        intro X i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ
        dsimp
        rw [‚Üê cancel_mono ((J.overMapPullback A f‚ÇÇ).map (e i‚ÇÇ).hom), assoc, assoc,
          ‚Üê Functor.map_comp, Iso.inv_hom_id, Functor.map_id, comp_id, ‚Üê comm,
          ‚Üê Functor.map_comp_assoc, Iso.inv_hom_id, Functor.map_id, id_comp] }
  hom_inv_id := by
    ext1 i
    exact (e i).hom_inv_id
  inv_hom_id := by
    ext1 i
    exact (e i).inv_hom_id

end SheafDescentData

variable {hY : J.ObjectsCoverTop Y} (A : Type u') [Category.{v'} A]

set_option maxHeartbeats 600000 in
/-- Given a family of objects `Y : I ‚Üí C` which cover the final object for a Grothendieck
topology `J`, this is the functor `Sheaf J A ‚•§ hY.SheafDescentData A`
which sends a sheaf `F` to the family of the pullbacks of `F` to all these `Y i`,
with the obbvious descent data. -/
@[simps! obj_sheaf obj_iso_hom obj_iso_inv map_hom]
def sheafToDescentData : Sheaf J A ‚•§ hY.SheafDescentData A where
  obj F :=
    { sheaf := fun i => (J.overPullback A (Y i)).obj F
      iso := fun _ _ _ _ _ => Iso.refl _
      pullback_iso := fun X X' g i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ => by
        ext W
        dsimp
        erw [overMapPullBackComp'_hom_app_overPullback_obj,
          overMapPullBackComp'_inv_app_overPullback_obj]
        simp }
  map {F G} œÜ :=
    { hom := fun i => (J.overPullback A (Y i)).map œÜ }

instance : Faithful (hY.sheafToDescentData A) where
  map_injective h :=
    (sheafHomSectionsEquiv _ _).symm.injective
      (hY.sections_ext _ (SheafDescentData.congr_hom h))

@[simp]
lemma sheafToDescentData_isoSections
    (F : Sheaf J A) ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    ((hY.sheafToDescentData A).obj F).isoSections f‚ÇÅ f‚ÇÇ = Iso.refl _ := by
  ext
  simp [SheafDescentData.isoSections, overMapPullbackSectionsIso]

namespace SheafToDescentData

namespace Hom

variable {A}

/-- Given two sheaves `F` and `G`, a family of objects `Y : I ‚Üí C` which cover the final
object, a morphism `œÜ : (hY.sheafToDescentData A).obj F ‚ü∂ (hY.sheafToDescentData A).obj G`,
this is `œÜ.hom`, considered as a (compatible) family of sections of `(sheafHom F G).1` over
this family of objects `Y`. -/
abbrev toFamilyOfElementsOnObjects {F G : Sheaf J A}
    (œÜ : (hY.sheafToDescentData A).obj F ‚ü∂ (hY.sheafToDescentData A).obj G) :
  Presheaf.FamilyOfElementsOnObjects (sheafHom F G).1 Y := œÜ.hom

lemma isCompatible_toFamilyOfElementsOnObjects {F G : Sheaf J A}
    (œÜ : (hY.sheafToDescentData A).obj F ‚ü∂ (hY.sheafToDescentData A).obj G) :
    (toFamilyOfElementsOnObjects œÜ).IsCompatible := by
  intro Z i j f g
  simpa using œÜ.comm f g

end Hom

end SheafToDescentData

noncomputable instance : Full (hY.sheafToDescentData A) where
  preimage {F G} œÜ := (sheafHomSectionsEquiv _ _)
    ((SheafToDescentData.Hom.isCompatible_toFamilyOfElementsOnObjects œÜ).section_
      hY (Sheaf.cond _))
  witness œÜ := by
    ext1 i
    simp

/-- Given `Y : I ‚Üí C` (which cover the final object for a certain Grothendieck topology `J`),
this is the full subcategory of `C` consisting of objects `X` such that there is a
morphism `f : X ‚ü∂ Y i` for some `i : I`. The fact that `i` and `f` are data will ease the
gluing process. -/
structure OverSome (hY : J.ObjectsCoverTop Y) where
  /-- an object of the original category -/
  X : C
  /-- an index -/
  i : I
  /-- a morphism to one of the objects of the given family -/
  f : X ‚ü∂ Y i

instance : Category hY.OverSome := InducedCategory.category OverSome.X

variable (hY)

/-- The obvious fully faithful functor `hY.OverSome ‚•§ C`. -/
@[simps! obj]
def overSomeForget : hY.OverSome ‚•§ C := inducedFunctor _

instance : Full hY.overSomeForget := InducedCategory.full _
instance : Faithful hY.overSomeForget := InducedCategory.faithful _

instance : Functor.IsCoverDense hY.overSomeForget J where
  is_cover X := by
    refine' J.superset_covering _ (hY X)
    rintro W f ‚ü®i, ‚ü®g‚ü©‚ü©
    exact
     ‚ü®{ obj := ‚ü®W, i, g‚ü©
        lift := ùüô _
        map := f }‚ü©

/-- The induced Grothendieck topology on `hY.overSome`. -/
abbrev overSomeTopology : GrothendieckTopology hY.OverSome :=
  Functor.inducedTopologyOfIsCoverDense hY.overSomeForget J

/- TODO: a presheaf on `hY.OverSome` is a sheaf iff the restriction to `Over (Y i)`
is for all `i`. -/

/-- The inclusion functor of `Over (Y i)` in `hY.OverSome`. -/
@[simps]
def toOverSome (i : I) : Over (Y i) ‚•§ hY.OverSome where
  obj X :=
    { X := X.left
      i := i
      f := X.hom }
  map f := f.left

/-- The canonical isomorphism
`hY.toOverSome i ‚ãô hY.overSomeForget ‚âÖ Over.forget (Y i)`. -/
@[simps!]
def toOverSomeForget (i : I) :
    hY.toOverSome i ‚ãô hY.overSomeForget ‚âÖ Over.forget (Y i) :=
  Iso.refl _

lemma toOverSome_coverPreserving (i : I) :
    CoverPreserving (J.over (Y i)) hY.overSomeTopology (hY.toOverSome i) where
  cover_preserve {U S} hS := by
    change _ ‚àà J U.left
    rw [mem_over_iff] at hS
    convert hS
    exact (Sieve.functorPushforward_comp (hY.toOverSome i) (hY.overSomeForget) S).symm

lemma toOverSome_compatiblePreserving (i : I) :
    CompatiblePreserving hY.overSomeTopology (hY.toOverSome i) where
  compatible ‚Ñ± Z T x hx Y‚ÇÅ Y‚ÇÇ X f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ hg‚ÇÅ hg‚ÇÇ h := by
    replace h := hY.overSomeForget.congr_map h
    simp at h
    let X' : Over (Y i) := Over.mk (hY.overSomeForget.map f‚ÇÅ ‚â´ Y‚ÇÅ.hom)
    let œÜ‚ÇÅ : X' ‚ü∂ Y‚ÇÅ := Over.homMk f‚ÇÅ
    let œÜ‚ÇÇ : X' ‚ü∂ Y‚ÇÇ := Over.homMk f‚ÇÇ (by
      dsimp
      erw [‚Üê Over.w g‚ÇÇ, ‚Üê reassoc_of% h, Over.w g‚ÇÅ])
    have H := hx œÜ‚ÇÅ œÜ‚ÇÇ hg‚ÇÅ hg‚ÇÇ (by ext; exact h)
    let e : X ‚âÖ (hY.toOverSome i).obj X' := hY.overSomeForget.preimageIso (Iso.refl _)
    refine' Eq.trans _ ((congr_arg (‚Ñ±.val.map e.hom.op) H).trans _)
    all_goals
      dsimp
      rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
      apply congr_fun
      congr 2
      apply hY.overSomeForget.map_injective
      simp
      rfl

instance (i : I) : (hY.toOverSome i).IsContinuous (J.over (Y i)) hY.overSomeTopology :=
  Functor.isContinuous_of_coverPreserving (hY.toOverSome_compatiblePreserving i)
    (hY.toOverSome_coverPreserving i)

/-- The restriction functor from sheaves on `hY.OverSome` to
the sheaves on `Over (Y i)`. -/
abbrev overSomeRestriction (i : I) :
    Sheaf hY.overSomeTopology A ‚•§ Sheaf (J.over (Y i)) A :=
  (hY.toOverSome i).sheafPushforwardContinuous _ _ _

/-- The pullback functor from sheaves on `J` to `hY.overSomeTopology` that is induced
by the composition with `hY.overSomeForget : hY.OverSome ‚•§ C`. -/
abbrev pullbackOverSome : Sheaf J A ‚•§ Sheaf hY.overSomeTopology A :=
  (hY.overSomeForget).sheafPushforwardContinuous _ _ _

/-- The isomorphism `Over.map f‚ÇÅ ‚ãô hY.toOverSome i‚ÇÅ ‚âÖ Over.map f‚ÇÇ ‚ãô hY.toOverSome i‚ÇÇ`
when we have two maps `f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ` and `f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ`. -/
def overMapCompToOverSomeIso ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    Over.map f‚ÇÅ ‚ãô hY.toOverSome i‚ÇÅ ‚âÖ
      Over.map f‚ÇÇ ‚ãô hY.toOverSome i‚ÇÇ :=
  NatIso.ofComponents (fun Z => hY.overSomeForget.preimageIso (Iso.refl _))
    (fun œÜ => hY.overSomeForget.map_injective (by aesop_cat))

@[simp]
lemma overSomeForget_map_overMapCompToOverSomeIso_hom_app
    ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (Z : Over X) :
    (hY.overMapCompToOverSomeIso f‚ÇÅ f‚ÇÇ).hom.app Z = ùüô _ := rfl

@[simp]
lemma overSomeForget_map_overMapCompToOverSomeIso_inv_app
    ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (Z : Over X) :
    (hY.overMapCompToOverSomeIso f‚ÇÅ f‚ÇÇ).inv.app Z = ùüô _ := rfl

variable {A hY}

/-- Equivalence between sieves of objects in `hY.OverSome` and the
induced objects in  -/
def overSomeSieveEquiv (X : hY.OverSome) :
    Sieve X ‚âÉ Sieve X.X where
  toFun S := Sieve.functorPushforward hY.overSomeForget S
  invFun S' := Sieve.functorPullback hY.overSomeForget S'
  left_inv S := by
    ext W g
    dsimp [Sieve.functorPushforward, Sieve.functorPullback]
    constructor
    ¬∑ rintro ‚ü®T, a, b, ha, fac‚ü©
      obtain rfl : g = b ‚â´ a := fac
      exact S.downward_closed ha _
    ¬∑ intro hg
      exact ‚ü®W, g, ùüô _, hg, by simp‚ü©
  right_inv S' := by
    ext W g
    dsimp [Sieve.functorPushforward, Sieve.functorPullback]
    constructor
    ¬∑ rintro ‚ü®T, a, b, ha, rfl‚ü©
      exact S'.downward_closed ha _
    ¬∑ intro hg
      exact ‚ü®‚ü®W, X.i, g ‚â´ X.f‚ü©, g, ùüô _, hg, (id_comp _).symm‚ü©

lemma overSomeSieveEquiv_apply_mem_iff {X : hY.OverSome} (S : Sieve X) :
    overSomeSieveEquiv X S ‚àà J X.X ‚Üî S ‚àà hY.overSomeTopology X := by
  rfl

lemma overSomeSieveEquiv_symm_apply_mem_iff (X : hY.OverSome) (S : Sieve X.X) :
    (overSomeSieveEquiv X).symm S ‚àà hY.overSomeTopology X ‚Üî S ‚àà J X.X := by
  obtain ‚ü®S, rfl‚ü© := (overSomeSieveEquiv X).surjective S
  rw [overSomeSieveEquiv_apply_mem_iff, Equiv.symm_apply_apply]

/-- The diagram category of a presieve. -/
abbrev _root_.CategoryTheory.Presieve.diagramCategory {C : Type*} [Category C] {X : C}
    (S : Presieve X) := FullSubcategory fun f : Over X => S f.hom

section

variable (X : hY.OverSome) (S : Sieve X.X)

/-- Given `X : hY.OverSome` and a sieve of `X.X`,
this is the functor (which is an equivalence) between the diagram categories of
related sieves of `Over.mk X.f : Over (Y X.i)` and `X`. -/
@[simps]
def OverSome.diagramFunctor :
    ((Sieve.overEquiv (Over.mk X.f)).symm S).arrows.diagramCategory ‚•§
      ((overSomeSieveEquiv X).symm S).arrows.diagramCategory where
  obj := fun ‚ü®Z, hZ‚ü© =>
    ‚ü®Over.mk (show OverSome.mk Z.left.left X.i (Z.hom.left ‚â´ X.f) ‚ü∂ X from Z.hom.left), hZ‚ü©
  map {Z‚ÇÅ Z‚ÇÇ} œÜ := Over.homMk œÜ.left.left (by
    dsimp
    rw [‚Üê Over.w œÜ]
    rfl)

instance : Faithful (OverSome.diagramFunctor X S) where
  map_injective := by
    rintro ‚ü®Z‚ÇÅ, hZ‚ÇÅ‚ü© ‚ü®Z‚ÇÇ, hZ‚ÇÇ‚ü© (f f' : Z‚ÇÅ ‚ü∂ Z‚ÇÇ) h
    apply CostructuredArrow.hom_ext
    apply CostructuredArrow.hom_ext
    have := (Over.forget _).congr_map h
    exact this

noncomputable instance : Full (OverSome.diagramFunctor X S) :=
  Functor.fullOfSurjective _ (by
    rintro ‚ü®Z‚ÇÅ, hZ‚ÇÅ‚ü© ‚ü®Z‚ÇÇ, hZ‚ÇÇ‚ü© œÜ
    refine' ‚ü®Over.homMk (Over.homMk œÜ.left _) _, rfl‚ü©
    ¬∑ dsimp
      have h‚ÇÅ := Over.w Z‚ÇÅ.hom
      have h‚ÇÇ := Over.w Z‚ÇÇ.hom
      have h‚ÇÉ := Over.w œÜ
      dsimp at h‚ÇÅ h‚ÇÇ h‚ÇÉ
      simp only [‚Üê h‚ÇÅ, ‚Üê h‚ÇÇ, ‚Üê h‚ÇÉ]
      erw [assoc]
    ¬∑ ext
      exact Over.w œÜ)

instance : EssSurj (OverSome.diagramFunctor X S) where
  mem_essImage := by
    rintro ‚ü®Z, hZ‚ü©
    let W := Over.mk (hY.overSomeForget.map Z.hom ‚â´ X.f)
    let Œ± : W ‚ü∂ Over.mk X.f := Over.homMk Z.hom
    exact ‚ü®‚ü®Over.mk Œ±, hZ‚ü©, ‚ü®(fullSubcategoryInclusion _).preimageIso
      (Over.isoMk (hY.overSomeForget.preimageIso (Iso.refl _)) (id_comp _))‚ü©‚ü©

noncomputable instance : IsEquivalence (OverSome.diagramFunctor X S) :=
  Equivalence.ofFullyFaithfullyEssSurj _

/-- Given `X : hY.OverSome` and a sieve of `X.X`,
this is the equivalence between the diagram categories of
related sieves of `Over.mk X.f : Over (Y X.i)` and `X`. -/
@[simps! functor]
noncomputable def OverSome.diagramFunctorEquivalence :=
  (OverSome.diagramFunctor X S).asEquivalence

end

/-- Auxiliary definition for `OverSome.isSheaf_iff`. -/
def OverSome.diagramIso (P : hY.OverSome·µí·µñ ‚•§ A) (X : hY.OverSome) (S : Sieve X.X) :
    ((((Sieve.overEquiv (Over.mk X.f)).symm S).arrows.diagram).op ‚ãô
        (hY.toOverSome X.i).op ‚ãô P) ‚âÖ
      ((diagramFunctor X S).op ‚ãô (((overSomeSieveEquiv X).symm S).arrows.diagram).op ‚ãô P) :=
  NatIso.ofComponents (fun ‚ü®Z, hZ‚ü© => P.mapIso
    ((hY.overSomeForget.preimageIso (by exact Iso.refl _)).op)) (by
      rintro ‚ü®‚ü®Z‚ÇÅ, hZ‚ÇÅ‚ü©‚ü© ‚ü®‚ü®Z‚ÇÇ, hZ‚ÇÇ‚ü©‚ü© ‚ü®f : Z‚ÇÇ ‚ü∂ Z‚ÇÅ‚ü©
      dsimp
      simp only [‚Üê P.map_comp, ‚Üê op_comp]
      congr 2
      apply hY.overSomeForget.map_injective
      simp
      rfl)

/-- Auxiliary definition for `OverSome.isSheaf_iff`. -/
noncomputable def OverSome.coneIso (P : hY.OverSome·µí·µñ ‚•§ A) (X : hY.OverSome) (S : Sieve X.X) :
  ((toOverSome hY X.i).op ‚ãô P).mapCone (((Sieve.overEquiv (Over.mk X.f)).symm S).arrows.cocone.op) ‚âÖ
  (Cones.postcompose (diagramIso P X S).inv).obj
    (Cone.whisker (Equivalence.op (diagramFunctorEquivalence X S)).functor
      (P.mapCone ((((overSomeSieveEquiv X).symm S).arrows.cocone.op)))) :=
  Cones.ext (Iso.refl _) (by
    rintro ‚ü®Z, hZ‚ü©
    dsimp [diagramIso, diagramFunctor]
    rw [id_comp, ‚Üê P.map_comp, ‚Üê op_comp]
    erw [id_comp])

/-- Auxiliary definition for `OverSome.isSheaf_iff`. -/
noncomputable def OverSome.isLimitCone (P : hY.OverSome·µí·µñ ‚•§ A) (X : hY.OverSome) (S : Sieve X.X)
    (h : IsLimit (((hY.toOverSome X.i).op ‚ãô P).mapCone
      ((Presieve.cocone ((Sieve.overEquiv (Over.mk X.f)).symm S).arrows).op))) :
    IsLimit (P.mapCone (Presieve.cocone ((overSomeSieveEquiv X).symm S).arrows).op) :=
  IsLimit.ofWhiskerEquivalence (diagramFunctorEquivalence X S).op
    ((IsLimit.postcomposeInvEquiv (diagramIso P X S) _).1
      (IsLimit.ofIsoLimit h (coneIso P X S)))

lemma OverSome.isSheaf_iff (P : hY.OverSome·µí·µñ ‚•§ A) :
    Presheaf.IsSheaf hY.overSomeTopology P ‚Üî
      ‚àÄ (i : I), Presheaf.IsSheaf (J.over (Y i)) ((hY.toOverSome i).op ‚ãô P) := by
  constructor
  ¬∑ intro h i
    exact Functor.op_comp_isSheaf (hY.toOverSome i) _ _ ‚ü®_, h‚ü©
  ¬∑ intro h
    rw [Presheaf.isSheaf_iff_isLimit]
    rintro X S hS
    simp only [Presheaf.isSheaf_iff_isLimit] at h
    obtain ‚ü®S, rfl‚ü© := (overSomeSieveEquiv X).symm.surjective S
    refine' ‚ü®isLimitCone P X S (h X.i ((Sieve.overEquiv (Over.mk X.f)).symm S) (by
      rw [overSomeSieveEquiv_symm_apply_mem_iff] at hS
      exact overEquiv_symm_mem_over _ _ _ hS)).some‚ü©

namespace SheafDescentData

variable (F : hY.SheafDescentData A)

namespace ToPresheafOverSome

/-- Auxiliary definition for `toPresheafOverSome`. -/
def obj (W : hY.OverSome) : A :=
  (F.sheaf W.i).1.obj (Opposite.op (Over.mk W.f))

/-- Auxiliary definition for `toPresheafOverSome`. -/
def map {W‚ÇÅ W‚ÇÇ : hY.OverSome} (œÜ : W‚ÇÅ ‚ü∂ W‚ÇÇ) : obj F W‚ÇÇ ‚ü∂ obj F W‚ÇÅ :=
  (F.sheaf W‚ÇÇ.i).1.map (Quiver.Hom.op (by exact Over.homMk (hY.overSomeForget.map œÜ))) ‚â´
    (F.isoSections ((hY.overSomeForget.map œÜ) ‚â´ W‚ÇÇ.f) W‚ÇÅ.f).hom

lemma map_eq {W‚ÇÅ W‚ÇÇ : hY.OverSome} (œÜ : W‚ÇÅ ‚ü∂ W‚ÇÇ) {i : I} (f‚ÇÅ : W‚ÇÅ.X ‚ü∂ Y i) (f‚ÇÇ : W‚ÇÇ.X ‚ü∂ Y i)
    (fac : f‚ÇÅ = hY.overSomeForget.map œÜ ‚â´ f‚ÇÇ) :
    map F œÜ = (F.isoSections W‚ÇÇ.f f‚ÇÇ).hom ‚â´
      (F.sheaf i).1.map (Quiver.Hom.op (by exact Over.homMk (hY.overSomeForget.map œÜ))) ‚â´
        (F.isoSections W‚ÇÅ.f f‚ÇÅ).inv := by
  dsimp [map]
  rw [F.isoSections_naturality' (hY.overSomeForget.map œÜ)
    ((hY.overSomeForget.map œÜ) ‚â´ W‚ÇÇ.f) W‚ÇÇ.f rfl f‚ÇÅ f‚ÇÇ fac.symm]
  simp only [overSomeForget_obj, assoc, Iso.cancel_iso_hom_left,
    isoSections_inv, isoSections_trans_hom]

end ToPresheafOverSome

open ToPresheafOverSome in
/-- The presheaf on `hY.OverSome` induced by `F : hY.SheafDescentData A`. -/
@[simps]
def toPresheafOverSome (F : hY.SheafDescentData A) : hY.OverSome·µí·µñ ‚•§ A where
  obj W := obj F W.unop
  map œÜ := map F œÜ.unop
  map_id := by
    rintro ‚ü®W‚ü©
    dsimp
    rw [map_eq F (ùüô W) W.f W.f (by simp)]
    erw [Functor.map_id, id_comp, Iso.hom_inv_id]
    rfl
  map_comp := by
    rintro ‚ü®W‚ÇÅ‚ü© ‚ü®W‚ÇÇ‚ü© ‚ü®W‚ÇÉ‚ü© ‚ü®f : W‚ÇÇ ‚ü∂ W‚ÇÅ‚ü© ‚ü®g : W‚ÇÉ ‚ü∂ W‚ÇÇ‚ü©
    change map F (g ‚â´ f) = map F f ‚â´ map F g
    rw [map_eq F f _ W‚ÇÅ.f rfl, map_eq F (g ‚â´ f) _ W‚ÇÅ.f rfl,
      map_eq F g (hY.overSomeForget.map (g ‚â´ f) ‚â´ W‚ÇÅ.f)
        (hY.overSomeForget.map f ‚â´ W‚ÇÅ.f) (by simp)]
    simp only [overSomeForget_obj, Functor.map_comp, assoc, Iso.inv_hom_id_assoc,
      Iso.cancel_iso_hom_left]
    rw [‚Üê Functor.map_comp_assoc ]
    rfl

/-- Given `F : hY.SheafDescentData A`, this is the canonical isomorphism
from the restriction of `F.toPresheafOverSome` to `Y i` and `(F.sheaf i).1`. -/
def toOverSomeOpToPresheafSheafOverSome (F : hY.SheafDescentData A) (i : I) :
    (hY.toOverSome i).op ‚ãô F.toPresheafOverSome ‚âÖ (F.sheaf i).1 :=
  NatIso.ofComponents (fun W => Iso.refl _) (by
    rintro ‚ü®W‚ÇÅ‚ü© ‚ü®W‚ÇÇ‚ü© ‚ü®f : W‚ÇÇ ‚ü∂ W‚ÇÅ‚ü©
    dsimp [toPresheafOverSome]
    rw [comp_id, id_comp]
    let œÜ : (toOverSome hY i).obj W‚ÇÇ ‚ü∂ (toOverSome hY i).obj W‚ÇÅ := f.left
    refine' (ToPresheafOverSome.map_eq F œÜ W‚ÇÇ.hom W‚ÇÅ.hom (Over.w f).symm).trans _
    dsimp
    simp only [isoSections_refl, Iso.refl_hom, Iso.refl_inv, comp_id, id_comp]
    rfl)

/-- The sheaf on `hY.OverSome` induced by `F : hY.SheafDescentData A`. -/
@[simps]
def toSheafOverSome (F : hY.SheafDescentData A) : Sheaf hY.overSomeTopology A where
  val := F.toPresheafOverSome
  cond := by
    rw [OverSome.isSheaf_iff]
    intro i
    rw [Presheaf.isSheaf_of_iso_iff (toOverSomeOpToPresheafSheafOverSome F i)]
    apply Sheaf.cond

/-- Given `F : hY.SheafDescentData A`, this is the canonical isomorphism
from the restriction of `F.toSheafOverSome` to `Y i` and `F.sheaf i`. -/
def overSomeRestrictionToSheafOverSome (F : hY.SheafDescentData A) (i : I) :
    (hY.overSomeRestriction A i).obj F.toSheafOverSome ‚âÖ F.sheaf i :=
  (sheafToPresheaf _ _).preimageIso (toOverSomeOpToPresheafSheafOverSome F i)

@[simp]
lemma overSomeRestrictionToSheafOverSome_hom_val_app (F : hY.SheafDescentData A) (i : I)
    (Z : (Over (Y i))·µí·µñ) :
    (F.overSomeRestrictionToSheafOverSome i).hom.val.app Z = ùüô _ := rfl

@[simp]
lemma overSomeRestrictionToSheafOverSome_inv_val_app (F : hY.SheafDescentData A) (i : I)
    (Z : (Over (Y i))·µí·µñ) :
    (F.overSomeRestrictionToSheafOverSome i).inv.val.app Z = ùüô _ := rfl

end SheafDescentData

variable (hY A)

/-- The obvious functor `hY.SheafDescentData A ‚•§ Sheaf hY.overSomeTopology A`. -/
@[simps]
def toSheafOverSomeFunctor : hY.SheafDescentData A ‚•§ Sheaf hY.overSomeTopology A where
  obj F := F.toSheafOverSome
  map {F G} œÜ := ‚ü®
    { app := fun X => (œÜ.hom X.unop.i).val.app _
      naturality := fun {X Y} Œ± => by
        dsimp
        simp only [SheafDescentData.ToPresheafOverSome.map_eq _ Œ±.unop
          ((overSomeForget _).map Œ±.unop ‚â´ X.unop.f) X.unop.f (by simp), assoc,
          SheafDescentData.isoSections_refl, Iso.refl_hom, overSomeForget_obj, id_comp,
          ‚Üê SheafDescentData.isoSections_inv_naturality‚ÇÇ, NatTrans.naturality_assoc] }‚ü©

variable {A}

/-- The canonical isomorphism
`((hY.sheafToDescentData A).obj F).toSheafOverSome ‚âÖ (hY.pullbackOverSome A).obj F` for
a sheaf `F : Sheaf J A`. -/
def sheafToDescentDataToSheafOverSomeIso (F : Sheaf J A) :
    ((hY.sheafToDescentData A).obj F).toSheafOverSome ‚âÖ (hY.pullbackOverSome A).obj F :=
  (sheafToPresheaf _ _).preimageIso (NatIso.ofComponents (fun X => Iso.refl _) (by
    rintro X Y f
    dsimp [SheafDescentData.ToPresheafOverSome.map]
    simp only [comp_id, id_comp, sheafToDescentData_isoSections, Iso.refl_hom]
    dsimp
    simp only [comp_id]))

@[simp]
lemma sheafToDescentDataToSheafOverSomeIso_hom_val_app (F : Sheaf J A) (X : hY.OverSome·µí·µñ) :
    (hY.sheafToDescentDataToSheafOverSomeIso F).hom.val.app X = ùüô _ := rfl

@[simp]
lemma sheafToDescentDataToSheafOverSomeIso_inv_val_app (F : Sheaf J A) (X : hY.OverSome·µí·µñ) :
    (hY.sheafToDescentDataToSheafOverSomeIso F).inv.val.app X = ùüô _ := rfl

variable (A)

/-- The natural isomorphism
`hY.sheafToDescentData A ‚ãô hY.toSheafOverSomeFunctor A ‚âÖ hY.pullbackOverSome A`. -/
@[simps!]
def sheafToDescentDataCompToSheafOverSomeFunctorIso :
    hY.sheafToDescentData A ‚ãô hY.toSheafOverSomeFunctor A ‚âÖ hY.pullbackOverSome A :=
  NatIso.ofComponents hY.sheafToDescentDataToSheafOverSomeIso (by aesop_cat)

/- TODO: show that `toSheafOverSomeFunctor` is an equivalence of categories, then,
as the composition `Sheaf J A ‚•§ hY.SheafDescentData A ‚•§ Sheaf hY.overSomeTopology A`
identifies to the obvious restriction (done below),
which under suitable assumptions is an equivalence of categories
(see `Functor.IsCoverDense.sheafEquivOfCoverPreservingCoverLifting`, we can deduce
that `Sheaf J A ‚•§ hY.SheafDescentData A` is an equivalence.)
-/

namespace SheafDescentData

variable {hY A}
variable (F : Sheaf hY.overSomeTopology A)

namespace OfSheafOverSome

/-- The descent data for `ObjectsCoverTop.SheafDescentData.ofSheafOverSome`. -/
def iso ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) :
    (J.overMapPullback A f‚ÇÅ).obj ((hY.overSomeRestriction A i‚ÇÅ).obj F) ‚âÖ
      (J.overMapPullback A f‚ÇÇ).obj ((hY.overSomeRestriction A i‚ÇÇ).obj F) :=
  (sheafToPresheaf _ _).preimageIso
    (NatIso.ofComponents (fun Z => F.val.mapIso
      ((hY.overMapCompToOverSomeIso f‚ÇÅ f‚ÇÇ).app Z.unop).symm.op) (by
      intros Z‚ÇÅ Z‚ÇÇ Œ±
      dsimp
      simp only [‚Üê Functor.map_comp, ‚Üê op_comp]
      congr 2
      erw [id_comp, comp_id]))

@[simp]
lemma iso_hom_val_app ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (Z : (Over X)·µí·µñ) :
    (iso F f‚ÇÅ f‚ÇÇ).hom.val.app Z = F.1.map (Quiver.Hom.op (ùüô Z.unop.left)) := rfl

@[simp]
lemma iso_inv_val_app ‚¶ÉX : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚¶Ñ (f‚ÇÅ : X ‚ü∂ Y i‚ÇÅ) (f‚ÇÇ : X ‚ü∂ Y i‚ÇÇ) (Z : (Over X)·µí·µñ) :
    (iso F f‚ÇÅ f‚ÇÇ).inv.val.app Z = F.1.map (Quiver.Hom.op (ùüô Z.unop.left)) := rfl

end OfSheafOverSome

/-- The sheaves with descent data attached to a sheaf for `hY.overSomeTopology`. -/
@[simps]
def ofSheafOverSome : hY.SheafDescentData A where
  sheaf i := (hY.overSomeRestriction A i).obj F
  iso {X i‚ÇÅ i‚ÇÇ} f‚ÇÅ f‚ÇÇ := OfSheafOverSome.iso F f‚ÇÅ f‚ÇÇ
  pullback_iso X X' g i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ := by
    ext Z
    dsimp [overMapPullbackComp, overMapPullbackComp',
      Functor.sheafPushforwardContinuousComp',
      Functor.sheafPushforwardContinuousIso, Over.mapComp',
      Functor.sheafPushforwardContinuousComp]
    simp only [id_comp, assoc]
    erw [id_comp]
    simp only [‚Üê Functor.map_comp, ‚Üê op_comp]
    congr 2
    erw [id_comp, id_comp]
  iso_trans X i‚ÇÅ i‚ÇÇ i‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ := by
    ext Z
    dsimp
    rw [‚Üê Functor.map_comp, ‚Üê op_comp]
    congr 2
    erw [id_comp]

@[simp]
lemma ofSheafOverSome_toPresheafOverSome_map {Z‚ÇÅ Z‚ÇÇ : hY.OverSome} (œÜ : Z‚ÇÅ ‚ü∂ Z‚ÇÇ) :
    ToPresheafOverSome.map (ofSheafOverSome F) œÜ = F.1.map œÜ.op := by
  dsimp [ToPresheafOverSome.map, overSomeForget, isoSections,
    overMapPullbackSectionsIso]
  simp only [‚Üê Functor.map_comp, ‚Üê op_comp]
  congr 2
  erw [id_comp, id_comp, id_comp]

end SheafDescentData

/-- The obvious functor `Sheaf hY.overSomeTopology A ‚•§ hY.SheafDescentData A`. -/
@[simps]
def fromSheafOverSomeFunctor : Sheaf hY.overSomeTopology A ‚•§ hY.SheafDescentData A where
  obj := SheafDescentData.ofSheafOverSome
  map {F‚ÇÅ F‚ÇÇ} œÜ :=
    { hom := fun i => (hY.overSomeRestriction A i).map œÜ }

namespace SheafOverFunctorEquivalence

variable {hY A}

/-- Auxiliary definition for `ObjectsCoverTop.sheafOverSomeEquivalence`. -/
@[simps!]
def unitIsoApp (F : hY.SheafDescentData A) :
    F ‚âÖ (hY.fromSheafOverSomeFunctor A).obj ((hY.toSheafOverSomeFunctor A).obj F) :=
  SheafDescentData.isoMk
    (fun i => (F.overSomeRestrictionToSheafOverSome i).symm) (by
      intros X i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ
      dsimp
      ext Z
      dsimp
      rw [id_comp, comp_id]
      let Œ± : ((hY.toOverSome i‚ÇÇ).obj ((Over.map f‚ÇÇ).obj Z.unop)) ‚ü∂
        ((hY.toOverSome i‚ÇÅ).obj ((Over.map f‚ÇÅ).obj Z.unop)) := ùüô Z.unop.left
      rw [SheafDescentData.ToPresheafOverSome.map_eq F Œ± (Z.unop.hom ‚â´ f‚ÇÅ)
        (Z.unop.hom ‚â´ f‚ÇÅ) (by erw [id_comp])]
      dsimp
      rw [SheafDescentData.isoSections_refl, Iso.refl_hom, id_comp,
        SheafDescentData.isoSections_inv]
      exact (F.iso_hom_val_app Z f‚ÇÅ f‚ÇÇ).symm)

/-- Auxiliary definition for `ObjectsCoverTop.sheafOverSomeEquivalence`. -/
def counitIsoApp (F : Sheaf hY.overSomeTopology A) :
    (hY.toSheafOverSomeFunctor A).obj ((hY.fromSheafOverSomeFunctor A).obj F) ‚âÖ F :=
  (sheafToPresheaf _ _).preimageIso (NatIso.ofComponents (fun Z => Iso.refl _)
    (by aesop_cat))

@[simp]
lemma counitIsoApp_hom (F : Sheaf hY.overSomeTopology A) (Z : hY.OverSome·µí·µñ) :
    (counitIsoApp F).hom.val.app Z = ùüô _ := rfl

@[simp]
lemma counitIsoApp_inv (F : Sheaf hY.overSomeTopology A) (Z : hY.OverSome·µí·µñ) :
    (counitIsoApp F).inv.val.app Z = ùüô _ := rfl

variable (hY A)

/-- Auxiliary definition for `ObjectsCoverTop.sheafOverSomeEquivalence`. -/
@[simps!]
def unitIso : ùü≠ _ ‚âÖ hY.toSheafOverSomeFunctor A ‚ãô hY.fromSheafOverSomeFunctor A :=
  NatIso.ofComponents unitIsoApp (by
    intro F G œÜ
    ext i Z
    dsimp
    erw [comp_id, id_comp]
    rfl)

/-- Auxiliary definition for `ObjectsCoverTop.sheafOverSomeEquivalence`. -/
@[simps!]
def counitIso : hY.fromSheafOverSomeFunctor A ‚ãô hY.toSheafOverSomeFunctor A ‚âÖ ùü≠ _ :=
  NatIso.ofComponents counitIsoApp (by aesop_cat)

end SheafOverFunctorEquivalence

/-- The equivalence `hY.SheafDescentData A ‚âå Sheaf hY.overSomeTopology A` between
sheaves equipped with descent data and the category of sheaves
over `hY.overSomeTopology`. -/
def sheafOverSomeEquivalence :
    hY.SheafDescentData A ‚âå Sheaf hY.overSomeTopology A where
  functor := hY.toSheafOverSomeFunctor A
  inverse := hY.fromSheafOverSomeFunctor A
  unitIso := SheafOverFunctorEquivalence.unitIso hY A
  counitIso := SheafOverFunctorEquivalence.counitIso hY A

namespace SheafDescentData

instance : IsEquivalence (hY.toSheafOverSomeFunctor A) := by
  change IsEquivalence (hY.sheafOverSomeEquivalence A).functor
  infer_instance

instance : IsEquivalence (hY.fromSheafOverSomeFunctor A) := by
  change IsEquivalence (hY.sheafOverSomeEquivalence A).inverse
  infer_instance

instance [IsEquivalence (hY.pullbackOverSome A)] :
    IsEquivalence (hY.sheafToDescentData A) :=
  IsEquivalence.cancelCompRight (hY.sheafToDescentData A)
    (hY.toSheafOverSomeFunctor A) inferInstance
    (IsEquivalence.ofIso (hY.sheafToDescentDataCompToSheafOverSomeFunctorIso A).symm
      inferInstance)

section

variable {D : Type u} [Category.{u} D] {K : GrothendieckTopology D}
  {J : Type} {Z : J ‚Üí D} (hZ : K.ObjectsCoverTop Z)
  (B : Type v) [Category.{u} B] [HasLimits B]

noncomputable instance : IsEquivalence (hZ.pullbackOverSome B) :=
  (inferInstance : IsEquivalence (Functor.IsCoverDense.sheafEquivOfCoverPreservingCoverLifting
    hZ.overSomeForget hZ.overSomeTopology K B).inverse)

noncomputable example : IsEquivalence (hZ.sheafToDescentData B) := inferInstance

end

end SheafDescentData

end ObjectsCoverTop

end GrothendieckTopology

end CategoryTheory
