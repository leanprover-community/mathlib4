/-
Copyright (c) 2024 Lagrange Mathematics and Computing Research Center. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anthony Bordg
-/
import Mathlib.CategoryTheory.Sites.Grothendieck

/-!
# The Topology Generated by Covering Families

In this file, given a category `C` we introduce the Grothendieck topology `Basis.GeneratedTopology`
on `C` generated by a basis. This topology is defined as the intersection of all the Grothendieck
topologies `J` on `C` satisfying that for every element `P` of the basis the sieve generated by `P`
is `J`-covering. Following Laurent Lafforgue, we also introduce the notion of covering families,
i.e. a basis satisfying four axioms `IsCoveringFamilies`, and we define by an explicit formula the
Grothendieck topology `CoveringFamilies.GeneratedTopology` generated by these covering families.

## Main Results

- `characterization_of_generatedtopology` : Given a collection of covering families, we show that
the topology generated by this collection and the topology generated by its underlying basis
coincide, offering in this case an explicit characterization of the covering sieves of the latter.

## References

⋆ Le problème de l'engendrement des topologies de Grothendieck, slides (not publicly available yet)
of a talk given by Laurent Lafforgue at Centre Lagrange on 26th April 2024.

## Tags

Grothendieck topology, sieve, generated topology, basis, covering families
-/

universe u v

open CategoryTheory Sieve

variable {C : Type u} [Category.{v} C]

namespace Basis

/-! ### The Grothendieck topology generated by a basis and the notion of covering families -/

/-- `Basis.GeneratedTopology` defines the Grothendieck topology generated by a `basis`, i.e. by
a set of presieves on `X` for every object `X` of the category `C`. -/
def GeneratedTopology (basis : (X : C) → Set (Presieve X)) : GrothendieckTopology C :=
    sInf {J : GrothendieckTopology C | ∀ {X P}, P ∈ basis X → generate P ∈ J.sieves X}

structure CoveringFamilies where
    /-- A notion of covering families consists of a `basis`, i.e. a set of presieves for each object
     `X`, which satisfies some axioms. -/
    basis : (X : C) → Set (Presieve X)
    /-- Every presieve generated by a morphism that has a section belongs to the basis. -/
    retraction_mem : ∀ ⦃X Y : C⦄ ⦃f : Y ⟶ X⦄, IsSplitEpi f → Presieve.singleton f ∈ basis X
    /-- Every presieve whose generated sieve contains an element of the basis belongs to the basis.
    -/
    heredity : ∀ ⦃X : C⦄ (P : Presieve X), (∃ Q, Q ∈ basis X ∧ Q ≤ generate P) → P ∈ basis X
    /-- For every element `P` of `basis X` and every morphism `f : Y ⟶ X`, there exists an element
    `Q` of `basis Y` such that the set of composites `g ≫ f`, where `g` belongs to `Q`, factors
    through the sieve generated by `P`. -/
    pullback_stable : ∀ ⦃X Y : C⦄ (P : Presieve X) (f : Y ⟶ X), P ∈ basis X →
        (∃ Q, Q ∈ basis Y ∧ (fun Z => {g ≫ f | (g : Z ⟶ Y) (_ : Q g)}) ≤ generate P)
    /-- A covering of a covering family is a covering family. -/
    multicomposition_stable : ∀ ⦃X : C⦄ (P : Presieve X)
        (Q : ∀ ⦃Xi : C⦄ ⦃f : Xi ⟶ X⦄, P f → Presieve Xi), P ∈ basis X →
            (hQ : ∀ ⦃Xi : C⦄ ⦃f : Xi ⟶ X⦄ (p : P f), Q p ∈ basis Xi) → P.bind Q ∈ basis X

end Basis

open Basis

variable (cf : CoveringFamilies (C := C))

namespace CoveringFamilies

/-! ### The Grothendieck topology generated by covering families -/

/-- `CoveringFamilies.GeneratedTopology` defines the topology generated by a collection of covering
families. -/
def GeneratedTopology : GrothendieckTopology C where
    sieves X S := ∃ P ∈ cf.basis X, generate P ≤ S
    top_mem' X := by
        use Presieve.singleton (𝟙 X)
        constructor
        · apply cf.retraction_mem; apply IsSplitEpi.of_iso
        · simp
    pullback_stable' X Y S f := by
        intro hS
        rcases hS with ⟨P, h1P, h2P⟩
        rcases cf.pullback_stable P f h1P with ⟨Q, h1Q, h2Q⟩
        use Q
        constructor
        · exact h1Q
        · intros Z g hg; simp; rw [generate_apply Q Z g] at hg
          rcases hg with ⟨Z', h, g', h1g', h2g'⟩
          rw [← h2g']; rw [Category.assoc h g' f]
          apply S.downward_closed;
          have hg : g' ≫ f ∈ {g ≫ f | (g : Z' ⟶ Y) (_ : Q g)} := by
              use g', h1g'
          specialize h2Q Z' hg; apply h2P; exact h2Q
    transitive' := by admit

/-- The covering sieves with respect to the topology generated by a collection of covering families
are exactly the sieves generated by the elements of the underlying basis. -/
@[simp]
theorem generatedTopology_covering_iff {X : C} (S : Sieve X) :
    S ∈ (GeneratedTopology cf).sieves X ↔ ∃ P ∈ cf.basis X, S = generate P := by
    constructor
    · intro hS
      use S
      constructor
      · rcases hS with ⟨P, h1P, h2P⟩; apply cf.heredity S.arrows
        use P, h1P; rw [generate_sieve S]; apply le_trans (le_generate P) h2P
      · apply symm; exact generate_sieve S
    · intro hS; rcases hS with ⟨P, h1P, h2P⟩
      use P, h1P; rw[← h2P]

end CoveringFamilies

namespace Basis

/-- Given a collection of covering families, the topology generated by this collection and the
topology generated by its underlying basis coincide, providing in this case an explicit
characterization of the covering sieves of the latter. -/
theorem characterization_of_generatedTopology {X : C} (S : Sieve X) :
    S ∈ (GeneratedTopology cf.basis).sieves X ↔ ∃ P ∈ cf.basis X, S = generate P := by
    constructor
    · intro hS
      have : S ∈ (CoveringFamilies.GeneratedTopology cf).sieves X := by
          let E := {J : GrothendieckTopology C | ∀ {X P}, P ∈ cf.basis X → generate P ∈ J.sieves X}
          apply CompleteLattice.sInf_le E
          · intros X P hP; rw [CoveringFamilies.generatedTopology_covering_iff]; use P, hP
          · exact hS
      simpa
    · intros hS JX hJX; rcases hJX with ⟨Js, hJX⟩; rcases Js with ⟨Js, J, hJ, hJs⟩; rw [← hJX]; simp
      rw [← hJs]; rcases hS with ⟨P, h1P, h2P⟩; rw [h2P]; apply hJ; exact h1P

end Basis
