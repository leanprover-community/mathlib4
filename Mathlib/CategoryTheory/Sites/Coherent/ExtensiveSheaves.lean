/-
Copyright (c) 2023 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson, Filippo A. E. Nuccio, Riccardo Brasca
-/
import Mathlib.CategoryTheory.Limits.Preserves.Finite
import Mathlib.CategoryTheory.Sites.Canonical
import Mathlib.CategoryTheory.Sites.Coherent.Basic
import Mathlib.CategoryTheory.Sites.Preserves
/-!

# Sheaves for the extensive topology

This file characterises sheaves for the extensive topology.

## Main result

* `isSheaf_iff_preservesFiniteProducts`: In a finitary extensive category, the sheaves for the
  extensive topology are precisely those preserving finite products.
-/

universe w

namespace CategoryTheory

open Limits Presieve Opposite

variable {C : Type*} [Category C] {D : Type*} [Category D]

variable [FinitaryPreExtensive C]

/-- A presieve is *extensive* if it is finite and its arrows induce an isomorphism from the
coproduct to the target. -/
class Presieve.Extensive {X : C} (R : Presieve X) : Prop where
  /-- `R` consists of a finite collection of arrows that together induce an isomorphism from the
  coproduct of their sources. -/
  arrows_nonempty_isColimit : ‚àÉ (Œ± : Type) (_ : Finite Œ±) (Z : Œ± ‚Üí C) (œÄ : (a : Œ±) ‚Üí (Z a ‚ü∂ X)),
    R = Presieve.ofArrows Z œÄ ‚àß Nonempty (IsColimit (Cofan.mk X œÄ))

instance {X : C} (S : Presieve X) [S.Extensive] : S.hasPullbacks where
  has_pullbacks := by
    obtain ‚ü®_, _, _, _, rfl, ‚ü®hc‚ü©‚ü© := Presieve.Extensive.arrows_nonempty_isColimit (R := S)
    intro _ _ _ _ _ hg
    cases hg
    apply FinitaryPreExtensive.hasPullbacks_of_is_coproduct hc

/--
A finite product preserving presheaf is a sheaf for the extensive topology on a category which is
`FinitaryPreExtensive`.
-/
theorem isSheafFor_extensive_of_preservesFiniteProducts {X : C} (S : Presieve X) [S.Extensive]
    (F : C·µí·µñ ‚•§ Type w) [PreservesFiniteProducts F] : S.IsSheafFor F  := by
  obtain ‚ü®Œ±, _, Z, œÄ, rfl, ‚ü®hc‚ü©‚ü© := Extensive.arrows_nonempty_isColimit (R := S)
  have : (ofArrows Z (Cofan.mk X œÄ).inj).hasPullbacks :=
    (inferInstance : (ofArrows Z œÄ).hasPullbacks)
  cases nonempty_fintype Œ±
  exact isSheafFor_of_preservesProduct _ _ hc

instance {Œ± : Type} [Finite Œ±] (Z : Œ± ‚Üí C) : (ofArrows Z (fun i ‚Ü¶ Sigma.Œπ Z i)).Extensive :=
  ‚ü®‚ü®Œ±, inferInstance, Z, (fun i ‚Ü¶ Sigma.Œπ Z i), rfl, ‚ü®coproductIsCoproduct _‚ü©‚ü©‚ü©

/-- Every Yoneda-presheaf is a sheaf for the extensive topology. -/
theorem extensiveTopology.isSheaf_yoneda_obj (W : C) : Presieve.IsSheaf (extensiveTopology C)
    (yoneda.obj W) := by
  rw [extensiveTopology, isSheaf_coverage]
  intro X R ‚ü®Y, Œ±, Z, œÄ, hR, hi‚ü©
  have : IsIso (Sigma.desc (Cofan.inj (Cofan.mk X œÄ))) := hi
  have : R.Extensive := ‚ü®Y, Œ±, Z, œÄ, hR, ‚ü®Cofan.isColimitOfIsIsoSigmaDesc (Cofan.mk X œÄ)‚ü©‚ü©
  exact isSheafFor_extensive_of_preservesFiniteProducts _ _

/-- The extensive topology on a finitary pre-extensive category is subcanonical. -/
theorem extensiveTopology.subcanonical : Sheaf.Subcanonical (extensiveTopology C) :=
  Sheaf.Subcanonical.of_yoneda_isSheaf _ isSheaf_yoneda_obj

variable [FinitaryExtensive C]

/--
A presheaf of sets on a category which is `FinitaryExtensive` is a sheaf iff it preserves finite
products.
-/
theorem Presieve.isSheaf_iff_preservesFiniteProducts (F : C·µí·µñ ‚•§ Type w) :
    Presieve.IsSheaf (extensiveTopology C) F ‚Üî
    Nonempty (PreservesFiniteProducts F) := by
  refine ‚ü®fun hF ‚Ü¶ ‚ü®‚ü®fun Œ± _ ‚Ü¶ ‚ü®fun {K} ‚Ü¶ ?_‚ü©‚ü©‚ü©, fun hF ‚Ü¶ ?_‚ü©
  ¬∑ rw [extensiveTopology, isSheaf_coverage] at hF
    let Z : Œ± ‚Üí C := fun i ‚Ü¶ unop (K.obj ‚ü®i‚ü©)
    have : (ofArrows Z (Cofan.mk (‚àê Z) (Sigma.Œπ Z)).inj).hasPullbacks :=
      inferInstanceAs (ofArrows Z (Sigma.Œπ Z)).hasPullbacks
    have : ‚àÄ (i : Œ±), Mono (Cofan.inj (Cofan.mk (‚àê Z) (Sigma.Œπ Z)) i) :=
      inferInstanceAs <| ‚àÄ (i : Œ±), Mono (Sigma.Œπ Z i)
    let i : K ‚âÖ Discrete.functor (fun i ‚Ü¶ op (Z i)) := Discrete.natIsoFunctor
    let _ : PreservesLimit (Discrete.functor (fun i ‚Ü¶ op (Z i))) F :=
        Presieve.preservesProductOfIsSheafFor F ?_ initialIsInitial _ (coproductIsCoproduct Z)
        (FinitaryExtensive.isPullback_initial_to_sigma_Œπ Z)
        (hF (Presieve.ofArrows Z (fun i ‚Ü¶ Sigma.Œπ Z i)) ?_)
    ¬∑ exact preservesLimitOfIsoDiagram F i.symm
    ¬∑ apply hF
      refine ‚ü®Empty, inferInstance, Empty.elim, IsEmpty.elim inferInstance, rfl, ‚ü®default,?_, ?_‚ü©‚ü©
      ¬∑ ext b
        cases b
      ¬∑ simp only [eq_iff_true_of_subsingleton]
    ¬∑ refine ‚ü®Œ±, inferInstance, Z, (fun i ‚Ü¶ Sigma.Œπ Z i), rfl, ?_‚ü©
      suffices Sigma.desc (fun i ‚Ü¶ Sigma.Œπ Z i) = ùüô _ by rw [this]; infer_instance
      ext
      simp
  ¬∑ let _ := hF.some
    rw [extensiveTopology, Presieve.isSheaf_coverage]
    intro X R ‚ü®Y, Œ±, Z, œÄ, hR, hi‚ü©
    have : IsIso (Sigma.desc (Cofan.inj (Cofan.mk X œÄ))) := hi
    have : R.Extensive := ‚ü®Y, Œ±, Z, œÄ, hR, ‚ü®Cofan.isColimitOfIsIsoSigmaDesc (Cofan.mk X œÄ)‚ü©‚ü©
    exact isSheafFor_extensive_of_preservesFiniteProducts R F

/--
A presheaf on a category which is `FinitaryExtensive` is a sheaf iff it preserves finite products.
-/
theorem Presheaf.isSheaf_iff_preservesFiniteProducts (F : C·µí·µñ ‚•§ D) :
    IsSheaf (extensiveTopology C) F ‚Üî Nonempty (PreservesFiniteProducts F) := by
  constructor
  ¬∑ intro h
    rw [IsSheaf] at h
    refine ‚ü®‚ü®fun J _ ‚Ü¶ ‚ü®fun {K} ‚Ü¶ ‚ü®fun {c} hc ‚Ü¶ ?_‚ü©‚ü©‚ü©‚ü©
    apply coyonedaJointlyReflectsLimits
    intro ‚ü®E‚ü©
    specialize h E
    rw [Presieve.isSheaf_iff_preservesFiniteProducts] at h
    have : PreservesLimit K (F.comp (coyoneda.obj ‚ü®E‚ü©)) := (h.some.preserves J).preservesLimit
    change IsLimit ((F.comp (coyoneda.obj ‚ü®E‚ü©)).mapCone c)
    apply this.preserves
    exact hc
  ¬∑ intro ‚ü®_‚ü© E
    rw [Presieve.isSheaf_iff_preservesFiniteProducts]
    exact ‚ü®inferInstance‚ü©

noncomputable instance (F : Sheaf (extensiveTopology C) D) : PreservesFiniteProducts F.val :=
  ((Presheaf.isSheaf_iff_preservesFiniteProducts F.val).mp F.cond).some

end CategoryTheory
