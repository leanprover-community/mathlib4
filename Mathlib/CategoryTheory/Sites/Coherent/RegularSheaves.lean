/-
Copyright (c) 2023 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson, Filippo A. E. Nuccio, Riccardo Brasca
-/
import Mathlib.CategoryTheory.Preadditive.Projective
import Mathlib.CategoryTheory.Sites.Canonical
import Mathlib.CategoryTheory.Sites.Coherent.Basic
import Mathlib.CategoryTheory.Sites.EffectiveEpimorphic
/-!

# Sheaves for the regular topology

This file characterises sheaves for the regular topology.

## Main results

* `isSheaf_iff_equalizerCondition`:¬†In a preregular category with pullbacks, the sheaves for the
  regular topology are precisely the presheaves satisfying an equaliser condition with respect to
  effective epimorphisms.

* `isSheaf_of_projective`: In a preregular category in which every object is projective, every
  presheaf is a sheaf for the regular topology.
-/

namespace CategoryTheory

open Limits

variable {C : Type*} [Category C]

open Opposite Presieve

/-- A presieve is *regular* if it consists of a single effective epimorphism. -/
class Presieve.regular {X : C} (R : Presieve X) : Prop where
  /-- `R` consists of a single epimorphism. -/
  single_epi : ‚àÉ (Y : C) (f : Y ‚ü∂ X), R = Presieve.ofArrows (fun (_ : Unit) ‚Ü¶ Y)
    (fun (_ : Unit) ‚Ü¶ f) ‚àß EffectiveEpi f

namespace regularCoverage

/--
The map to the explicit equalizer used in the sheaf condition.
-/
def MapToEqualizer (P : C·µí·µñ ‚•§ Type*) {W X B : C} (f : X ‚ü∂ B)
    (g‚ÇÅ g‚ÇÇ : W ‚ü∂ X) (w : g‚ÇÅ ‚â´ f = g‚ÇÇ ‚â´ f) :
    P.obj (op B) ‚Üí { x : P.obj (op X) | P.map g‚ÇÅ.op x = P.map g‚ÇÇ.op x } := fun t ‚Ü¶
  ‚ü®P.map f.op t, by simp only [Set.mem_setOf_eq, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, w]‚ü©

/--
The sheaf condition with respect to regular presieves, given the existence of the relavant pullback.
-/
def EqualizerCondition (P : C·µí·µñ ‚•§ Type*) : Prop :=
  ‚àÄ (X B : C) (œÄ : X ‚ü∂ B) [EffectiveEpi œÄ] [HasPullback œÄ œÄ], Function.Bijective
    (MapToEqualizer P œÄ (pullback.fst (f := œÄ) (g := œÄ)) (pullback.snd (f := œÄ) (g := œÄ))
    pullback.condition)

lemma EqualizerCondition.isSheafFor {B : C} {S : Presieve B} [S.regular] [S.hasPullbacks]
    {F : C·µí·µñ ‚•§ Type*}
    (hF : EqualizerCondition F) : S.IsSheafFor F := by
  obtain ‚ü®X, œÄ, hS, œÄsurj‚ü© := Presieve.regular.single_epi (R := S)
  subst hS
  rw [isSheafFor_arrows_iff_pullbacks]
  intro y h
  have : (Presieve.singleton œÄ).hasPullbacks := by rw [‚Üê ofArrows_pUnit]; infer_instance
  have : HasPullback œÄ œÄ := hasPullbacks.has_pullbacks Presieve.singleton.mk Presieve.singleton.mk
  specialize hF X B œÄ
  rw [Function.bijective_iff_existsUnique] at hF
  obtain ‚ü®t, ht, ht'‚ü© := hF ‚ü®y (), h () ()‚ü©
  refine ‚ü®t, fun _ ‚Ü¶ ?_, fun x h ‚Ü¶ ht' x ?_‚ü©
  ¬∑ simpa [MapToEqualizer] using ht
  ¬∑ simpa [MapToEqualizer] using h ()

lemma equalizerCondition_of_regular {F : C·µí·µñ ‚•§ Type*}
    (hSF : ‚àÄ {B : C} (S : Presieve B) [S.regular] [S.hasPullbacks], S.IsSheafFor F) :
    EqualizerCondition F := by
  intro X B œÄ _ _
  have : (ofArrows (fun _ ‚Ü¶ X) (fun _ ‚Ü¶ œÄ)).regular := ‚ü®X, œÄ, rfl, inferInstance‚ü©
  have : (ofArrows (fun () ‚Ü¶ X) (fun _ ‚Ü¶ œÄ)).hasPullbacks := ‚ü®
      fun hf _ hg ‚Ü¶ (by cases hf; cases hg; infer_instance)‚ü©
  specialize hSF (ofArrows (fun () ‚Ü¶ X) (fun _ ‚Ü¶ œÄ))
  rw [isSheafFor_arrows_iff_pullbacks] at hSF
  rw [Function.bijective_iff_existsUnique]
  intro ‚ü®x, hx‚ü©
  obtain ‚ü®t, ht, ht'‚ü© := hSF (fun _ ‚Ü¶ x) (fun _ _ ‚Ü¶ hx)
  refine ‚ü®t, ?_, fun y h ‚Ü¶ ht' y ?_‚ü©
  ¬∑ simpa [MapToEqualizer] using ht ()
  ¬∑ simpa [MapToEqualizer] using h

lemma isSheafFor_regular_of_projective {X : C} (S : Presieve X) [S.regular] [Projective X]
    (F : C·µí·µñ ‚•§ Type*) : S.IsSheafFor F := by
  obtain ‚ü®Y, f, rfl, hf‚ü© := Presieve.regular.single_epi (R := S)
  rw [isSheafFor_arrows_iff]
  refine fun x hx ‚Ü¶ ‚ü®F.map (Projective.factorThru (ùüô _) f).op <| x (), fun _ ‚Ü¶ ?_, fun y h ‚Ü¶ ?_‚ü©
  ¬∑ simpa using (hx () () Y (ùüô Y) (f ‚â´ (Projective.factorThru (ùüô _) f)) (by simp)).symm
  ¬∑ simp only [‚Üê h (), ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, Projective.factorThru_comp,
      op_id, FunctorToTypes.map_id_apply]

lemma EqualizerCondition.isSheaf_iff (F : C·µí·µñ ‚•§ Type*)
    [‚àÄ ‚¶ÉX Y : C‚¶Ñ (œÄ : X ‚ü∂ Y) [EffectiveEpi œÄ], HasPullback œÄ œÄ] [Preregular C] :
    Presieve.IsSheaf (regularCoverage C).toGrothendieck F ‚Üî EqualizerCondition F := by
  rw [Presieve.isSheaf_coverage]
  refine ‚ü®fun h ‚Ü¶ equalizerCondition_of_regular fun S ‚ü®Y, f, hh‚ü© _ ‚Ü¶ h S ‚ü®Y, f, hh‚ü©, ?_‚ü©
  rintro h X S ‚ü®Y, f, rfl, hf‚ü©
  exact @isSheafFor _ _ _ _ ‚ü®Y, f, rfl, hf‚ü© ‚ü®fun g _ h ‚Ü¶ by cases g; cases h; infer_instance‚ü© _ h

lemma isSheaf_of_projective (F : C·µí·µñ ‚•§ Type*) [Preregular C] [‚àÄ (X : C), Projective X] :
    IsSheaf (regularCoverage C).toGrothendieck F :=
  (isSheaf_coverage _ _).mpr fun S ‚ü®_, h‚ü© ‚Ü¶ have : S.regular := ‚ü®_, h‚ü©
    isSheafFor_regular_of_projective _ _

/-- Every Yoneda-presheaf is a sheaf for the regular topology. -/
theorem isSheaf_yoneda_obj [Preregular C] (W : C)  :
    Presieve.IsSheaf (regularCoverage C).toGrothendieck (yoneda.obj W) := by
  rw [isSheaf_coverage]
  intro X S ‚ü®_, hS‚ü©
  have : S.regular := ‚ü®_, hS‚ü©
  obtain ‚ü®Y, f, rfl, hf‚ü© := Presieve.regular.single_epi (R := S)
  have h_colim := isColimitOfEffectiveEpiStruct f hf.effectiveEpi.some
  rw [‚Üê Sieve.generateSingleton_eq, ‚Üê Presieve.ofArrows_pUnit] at h_colim
  intro x hx
  let x_ext := Presieve.FamilyOfElements.sieveExtend x
  have hx_ext := Presieve.FamilyOfElements.Compatible.sieveExtend hx
  let S := Sieve.generate (Presieve.ofArrows (fun () ‚Ü¶ Y) (fun () ‚Ü¶ f))
  obtain ‚ü®t, t_amalg, t_uniq‚ü© :=
    (Sieve.forallYonedaIsSheaf_iff_colimit S).mpr ‚ü®h_colim‚ü© W x_ext hx_ext
  refine ‚ü®t, ?_, ?_‚ü©
  ¬∑ convert Presieve.isAmalgamation_restrict (Sieve.le_generate
      (Presieve.ofArrows (fun () ‚Ü¶ Y) (fun () ‚Ü¶ f))) _ _ t_amalg
    exact (Presieve.restrict_extend hx).symm
  ¬∑ exact fun y hy ‚Ü¶ t_uniq y <| Presieve.isAmalgamation_sieveExtend x y hy

/-- The regular topology on any preregular category is subcanonical. -/
theorem subcanonical [Preregular C] : Sheaf.Subcanonical (regularCoverage C).toGrothendieck :=
  Sheaf.Subcanonical.of_yoneda_isSheaf _ isSheaf_yoneda_obj

end regularCoverage

end CategoryTheory
