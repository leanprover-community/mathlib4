/-
Copyright (c) 2023 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Adam Topaz
-/

import Mathlib.CategoryTheory.Sites.Coverage

namespace CategoryTheory

variable {C : Type _} [Category C]

@[ext]
structure Presieve.DiagramBase {X : C} (S : Presieve X) where
  Y : C
  f : Y ‚ü∂ X
  hf : S f

@[ext]
structure Presieve.Relation {X : C} (S : Presieve X) (Y‚ÇÅ Y‚ÇÇ : S.DiagramBase) where
  R : C
  g‚ÇÅ : R ‚ü∂ Y‚ÇÅ.Y
  g‚ÇÇ : R ‚ü∂ Y‚ÇÇ.Y
  r : R ‚ü∂ X
  w‚ÇÅ : g‚ÇÅ ‚â´ Y‚ÇÅ.f = r
  w‚ÇÇ : g‚ÇÇ ‚â´ Y‚ÇÇ.f = r

attribute [reassoc (attr := simp)]
  Presieve.Relation.w‚ÇÅ
  Presieve.Relation.w‚ÇÇ

@[ext]
structure Presieve.RelationHom {X : C} (S : Presieve X) {Y‚ÇÅ Y‚ÇÇ : S.DiagramBase}
    (R‚ÇÅ R‚ÇÇ : S.Relation Y‚ÇÅ Y‚ÇÇ) where
  e : R‚ÇÅ.R ‚ü∂ R‚ÇÇ.R
  w‚ÇÅ : e ‚â´ R‚ÇÇ.g‚ÇÅ = R‚ÇÅ.g‚ÇÅ
  w‚ÇÇ : e ‚â´ R‚ÇÇ.g‚ÇÇ = R‚ÇÅ.g‚ÇÇ

@[simps]
def Presieve.RelationHom.comp {X : C} {S : Presieve X} {Y‚ÇÅ Y‚ÇÇ : S.DiagramBase}
    {R‚ÇÅ R‚ÇÇ R‚ÇÉ : S.Relation Y‚ÇÅ Y‚ÇÇ} (f : S.RelationHom R‚ÇÅ R‚ÇÇ) (g : S.RelationHom R‚ÇÇ R‚ÇÉ) :
    S.RelationHom R‚ÇÅ R‚ÇÉ where
  e := f.e ‚â´ g.e
  w‚ÇÅ := by simp [f.w‚ÇÅ, g.w‚ÇÅ]
  w‚ÇÇ := by simp [f.w‚ÇÇ, g.w‚ÇÇ]

@[simps]
def Presieve.RelationHom.id {X : C} {S : Presieve X} {Y‚ÇÅ Y‚ÇÇ : S.DiagramBase}
    (R : S.Relation Y‚ÇÅ Y‚ÇÇ ) : S.RelationHom R R where
  e := ùüô _
  w‚ÇÅ := by simp
  w‚ÇÇ := by simp

instance Presieve.instCategoryRelationHom {X : C} {S : Presieve X} (Y‚ÇÅ Y‚ÇÇ : S.DiagramBase) :
    Category (S.Relation Y‚ÇÅ Y‚ÇÇ) where
  Hom := S.RelationHom
  id := Presieve.RelationHom.id
  comp := Presieve.RelationHom.comp

@[reassoc (attr := simp)]
lemma Presieve.RelationHom_w‚ÇÅ {X : C} {S : Presieve X} {Y‚ÇÅ Y‚ÇÇ : S.DiagramBase}
    (R‚ÇÅ R‚ÇÇ : S.Relation Y‚ÇÅ Y‚ÇÇ) (e : R‚ÇÅ ‚ü∂ R‚ÇÇ) : e.e ‚â´ R‚ÇÇ.g‚ÇÅ = R‚ÇÅ.g‚ÇÅ := e.w‚ÇÅ

@[reassoc (attr := simp)]
lemma Presieve.RelationHom_w‚ÇÇ {X : C} {S : Presieve X} {Y‚ÇÅ Y‚ÇÇ : S.DiagramBase}
    (R‚ÇÅ R‚ÇÇ : S.Relation Y‚ÇÅ Y‚ÇÇ) (e : R‚ÇÅ ‚ü∂ R‚ÇÇ) : e.e ‚â´ R‚ÇÇ.g‚ÇÇ = R‚ÇÅ.g‚ÇÇ := e.w‚ÇÇ

@[reassoc (attr := simp)]
lemma Presieve.RelationHom_e_r {X : C} {S : Presieve X} {Y‚ÇÅ Y‚ÇÇ : S.DiagramBase}
    (R‚ÇÅ R‚ÇÇ : S.Relation Y‚ÇÅ Y‚ÇÇ) (e : S.RelationHom R‚ÇÅ R‚ÇÇ) :
    e.e ‚â´ R‚ÇÇ.r = R‚ÇÅ.r := by
  simp only [‚Üê R‚ÇÅ.w‚ÇÅ, ‚Üê R‚ÇÅ.w‚ÇÇ, ‚Üê R‚ÇÇ.w‚ÇÅ, ‚Üê R‚ÇÇ.w‚ÇÇ, ‚Üê Category.assoc, e.w‚ÇÅ]

@[reassoc (attr := simp)]
lemma Presieve.RelationHom_id_e {X : C} {S : Presieve X} {Y‚ÇÅ Y‚ÇÇ : S.DiagramBase}
    (R : S.Relation Y‚ÇÅ Y‚ÇÇ) : (ùüô R : R ‚ü∂ R).e = ùüô _ := rfl

@[reassoc (attr := simp)]
lemma Presieve.RelationHom_comp_e {X : C} {S : Presieve X} {Y‚ÇÅ Y‚ÇÇ : S.DiagramBase}
    {R‚ÇÅ R‚ÇÇ R‚ÇÉ : S.Relation Y‚ÇÅ Y‚ÇÇ} (f : R‚ÇÅ ‚ü∂ R‚ÇÇ) (g : R‚ÇÇ ‚ü∂ R‚ÇÉ) :
    (f ‚â´ g).e = f.e ‚â´ g.e := rfl

inductive Presieve.Diagram {X : C} (S : Presieve X) where
  | cover (Y : S.DiagramBase) : S.Diagram
  | relation {Y‚ÇÅ Y‚ÇÇ : S.DiagramBase} (R : S.Relation Y‚ÇÅ Y‚ÇÇ) : S.Diagram

inductive Presieve.DiagramHom {X : C} (S : Presieve X) :
    S.Diagram ‚Üí S.Diagram ‚Üí Type _ where
  | id (x : S.Diagram) : S.DiagramHom x x
  | rel {Y‚ÇÅ Y‚ÇÇ : S.DiagramBase} {R‚ÇÅ R‚ÇÇ : S.Relation Y‚ÇÅ Y‚ÇÇ} (e : R‚ÇÅ ‚ü∂ R‚ÇÇ) :
      S.DiagramHom (.relation R‚ÇÅ) (.relation R‚ÇÇ)

def Presieve.DiagramHomComp {X : C} {S : Presieve X} {x y z : S.Diagram}
    (f : S.DiagramHom x y) (g : S.DiagramHom y z) : S.DiagramHom x z :=
  match f, g with
  | .id _, e => e
  | e, .id _ => e
  | .rel e‚ÇÅ, .rel e‚ÇÇ => .rel (e‚ÇÅ ‚â´ e‚ÇÇ)

instance Presieve.instCategoryDiagram {X : C} (S : Presieve X) : Category (S.Diagram) where
  Hom := S.DiagramHom
  id := .id
  comp := Presieve.DiagramHomComp
  id_comp := by rintro D‚ÇÅ D‚ÇÇ (_|_) <;> aesop_cat
  comp_id := by rintro D‚ÇÅ D‚ÇÇ (_|_) <;> aesop_cat
  assoc := by
    rintro D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ (_|_) (_|_) (_|_) <;> try rfl
    dsimp [DiagramHomComp] ; simp


macro_rules
  | `(tactic| aesop $cs*) => `(tactic| aesop_no_checkpoint $cs*)
  | `(tactic| aesop? $cs*) => `(tactic| aesop_no_checkpoint? $cs*)

@[simps]
def Presieve.DiagramFunctor {X : C} (S : Presieve X) : S.Diagram ‚•§ C where
  obj | .cover Y => Y.Y
      | .relation R => R.R
  map | .id _ => ùüô _
      | .rel e => e.e
  map_id := by rintro (_|_) <;> aesop
  map_comp := by rintro (_|_) (_|_) (_|_) (_|_) (_|_) <;> aesop

def Presieve.DiagramCocone {X : C} (S : Presieve X) : Limits.Cocone S.DiagramFunctor where
  pt := X
  Œπ := {
    app := fun Z =>
      match Z with
      | .cover Y => Y.f
      | .relation R => R.r
    naturality := by rintro (_|_) (_|_) (_|_) <;> aesop }

def Presieve.IsEffective {X : C} (S : Presieve X) : Prop :=
  Nonempty <| Limits.IsColimit S.DiagramCocone

end CategoryTheory
