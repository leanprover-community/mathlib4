/-
Copyright (c) 2024 Robin Carlier. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robin Carlier
-/
import Mathlib.CategoryTheory.Sites.Limits
import Mathlib.CategoryTheory.ChosenFiniteProducts.FunctorCategory

/-!
# Chosen finite products on sheaves

In this file, we put a `ChosenFiniteProducts` instance on `A`-valued sheaves for a
`GrothendieckTopology` whenever `A` has a `ChosenFiniteProducts` instance.
-/


universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Opposite CategoryTheory Category Limits Sieve MonoidalCategory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]
variable {A : Type u‚ÇÇ} [Category.{v‚ÇÇ} A]
variable (J : GrothendieckTopology C)
variable [ChosenFiniteProducts A]

namespace Sheaf

variable (X Y : Sheaf J A)

lemma tensorProd_isSheaf : Presheaf.IsSheaf J (X.val ‚äó Y.val) := by
  apply isSheaf_of_isLimit (E := (Cones.postcompose (pairComp X Y (sheafToPresheaf J A)).inv).obj
    (ChosenFiniteProducts.product X.val Y.val).cone)
  exact (IsLimit.postcomposeInvEquiv _ _).invFun (ChosenFiniteProducts.product X.val Y.val).isLimit

lemma tensorUnit_isSheaf : Presheaf.IsSheaf J (ùüô_ (C·µí·µñ ‚•§ A)) := by
  apply isSheaf_of_isLimit (E := (Cones.postcompose (Functor.uniqueFromEmpty _).inv).obj
    ChosenFiniteProducts.terminal.cone)
  ¬∑ exact (IsLimit.postcomposeInvEquiv _ _).invFun ChosenFiniteProducts.terminal.isLimit
  ¬∑ exact Functor.empty _

/-- Any `ChosenFiniteProducts` on `A` induce a `ChosenFiniteProducts` structures on `A`-valued
sheaves. -/
@[simps! product_cone_pt_val terminal_cone_pt_val_obj terminal_cone_pt_val_map]
noncomputable instance chosenFiniteProducts : ChosenFiniteProducts (Sheaf J A) where
  product X Y :=
    { cone := BinaryFan.mk
          (P := { val := X.val ‚äó Y.val
                  cond := tensorProd_isSheaf J X Y})
          ‚ü®(ChosenFiniteProducts.fst _ _)‚ü© ‚ü®(ChosenFiniteProducts.snd _ _)‚ü©
      isLimit :=
        { lift := fun f ‚Ü¶ ‚ü®ChosenFiniteProducts.lift (BinaryFan.fst f).val (BinaryFan.snd f).val‚ü©
          fac := by rintro s ‚ü®‚ü®j‚ü©‚ü© <;> apply Sheaf.hom_ext <;> simp
          uniq := by
            intro x f h
            apply Sheaf.hom_ext
            apply ChosenFiniteProducts.hom_ext
            ¬∑ specialize h ‚ü®WalkingPair.left‚ü©
              rw [Sheaf.hom_ext_iff] at h
              simpa using h
            ¬∑ specialize h ‚ü®WalkingPair.right‚ü©
              rw [Sheaf.hom_ext_iff] at h
              simpa using h } }
  terminal :=
    { cone := asEmptyCone { val := ùüô_ (C·µí·µñ ‚•§ A)
                            cond := tensorUnit_isSheaf _}
      isLimit :=
        { lift := fun f ‚Ü¶ ‚ü®ChosenFiniteProducts.toUnit f.pt.val‚ü©
          fac := by intro s ‚ü®e‚ü©; cases e
          uniq := by
            intro x f h
            apply Sheaf.hom_ext
            exact ChosenFiniteProducts.toUnit_unique f.val _} }

@[simp]
lemma chosenFiniteProducts_fst_val : (ChosenFiniteProducts.fst X Y).val =
    ChosenFiniteProducts.fst X.val Y.val := rfl

@[simp]
lemma chosenFiniteProducts_snd_val : (ChosenFiniteProducts.snd X Y).val =
    ChosenFiniteProducts.snd X.val Y.val := rfl

variable {X Y}
variable {W : Sheaf J A} (f : W ‚ü∂ X) (g : W ‚ü∂ Y)

@[simp]
lemma chosenFiniteProducts_lift_val : (ChosenFiniteProducts.lift f g).val =
    ChosenFiniteProducts.lift f.val g.val := rfl

@[simp]
lemma chosenFiniteProducts_whiskerLeft_val : (X ‚óÅ f).val = (X.val ‚óÅ f.val) := rfl
@[simp]
lemma chosenFiniteProducts_whiskerRight_val : (f ‚ñ∑ X).val = (f.val ‚ñ∑ X.val) := rfl

end Sheaf

/-- The inclusion from sheaves to presheaves is monoidal with respect to the cartesian monoidal
structures. -/
noncomputable instance sheafToPresheafMonoidal : (sheafToPresheaf J A).Monoidal :=
  Functor.CoreMonoidal.toMonoidal
    { ŒµIso := Iso.refl _
      ŒºIso := fun F G ‚Ü¶ Iso.refl _ }

open Functor.LaxMonoidal Functor.OplaxMonoidal

@[simp]
lemma sheafToPresheaf_Œµ : Œµ (sheafToPresheaf J A) = ùüô _ := rfl
@[simp]
lemma sheafToPresheaf_Œ∑ : Œ∑ (sheafToPresheaf J A) = ùüô _ := rfl

variable {J}

@[simp]
lemma sheafToPresheaf_Œº (X Y : Sheaf J A) : Œº (sheafToPresheaf J A) X Y = ùüô _ := rfl
@[simp]
lemma sheafToPresheaf_Œ¥ (X Y : Sheaf J A) : Œ¥ (sheafToPresheaf J A) X Y = ùüô _ := rfl

end CategoryTheory
