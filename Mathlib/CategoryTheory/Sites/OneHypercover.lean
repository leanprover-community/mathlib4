/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Sites.Sheaf
import Mathlib.CategoryTheory.Sites.ZeroHypercover

/-!
# 1-hypercovers

Given a Grothendieck topology `J` on a category `C`, we define the type of
`1`-hypercovers of an object `S : C`. They consists of a covering family
of morphisms `X i ‚ü∂ S` indexed by a type `I‚ÇÄ` and, for each tuple `(i‚ÇÅ, i‚ÇÇ)`
of elements of `I‚ÇÄ`, a "covering `Y j` of the fibre product of `X i‚ÇÅ` and
`X i‚ÇÇ` over `S`", a condition which is phrased here without assuming that
the fibre product actually exist.

The definition `OneHypercover.isLimitMultifork` shows that if `E` is a
`1`-hypercover of `S`, and `F` is a sheaf, then `F.obj (op S)`
identifies to the multiequalizer of suitable maps
`F.obj (op (E.X i)) ‚ü∂ F.obj (op (E.Y j))`.

-/

universe w' w v u

namespace CategoryTheory

open Category Limits

variable {C : Type u} [Category.{v} C] {A : Type*} [Category A]

/-- The categorical data that is involved in a `1`-hypercover of an object `S`. This
consists of a family of morphisms `f i : X i ‚ü∂ S` for `i : I‚ÇÄ`, and for each
tuple `(i‚ÇÅ, i‚ÇÇ)` of elements in `I‚ÇÄ`, a family of objects `Y j` indexed by
a type `I‚ÇÅ i‚ÇÅ i‚ÇÇ`, which are equipped with a map to the fibre product of `X i‚ÇÅ`
and `X i‚ÇÇ`, which is phrased here as the data of the two projections
`p‚ÇÅ : Y j ‚ü∂ X i‚ÇÅ`, `p‚ÇÇ : Y j ‚ü∂ X i‚ÇÇ` and the relation `p‚ÇÅ j ‚â´ f i‚ÇÅ = p‚ÇÇ j ‚â´ f i‚ÇÇ`.
(See `GrothendieckTopology.OneHypercover` for the topological conditions.) -/
structure PreOneHypercover (S : C) extends PreZeroHypercover.{w} S where
  /-- the index type of the coverings of the fibre products -/
  I‚ÇÅ (i‚ÇÅ i‚ÇÇ : I‚ÇÄ) : Type w
  /-- the objects in the coverings of the fibre products -/
  Y ‚¶Éi‚ÇÅ i‚ÇÇ : I‚ÇÄ‚¶Ñ (j : I‚ÇÅ i‚ÇÅ i‚ÇÇ) : C
  /-- the first projection `Y j ‚ü∂ X i‚ÇÅ` -/
  p‚ÇÅ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚ÇÄ‚¶Ñ (j : I‚ÇÅ i‚ÇÅ i‚ÇÇ) : Y j ‚ü∂ X i‚ÇÅ
  /-- the second projection `Y j ‚ü∂ X i‚ÇÇ` -/
  p‚ÇÇ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚ÇÄ‚¶Ñ (j : I‚ÇÅ i‚ÇÅ i‚ÇÇ) : Y j ‚ü∂ X i‚ÇÇ
  w ‚¶Éi‚ÇÅ i‚ÇÇ : I‚ÇÄ‚¶Ñ (j : I‚ÇÅ i‚ÇÅ i‚ÇÇ) : p‚ÇÅ j ‚â´ f i‚ÇÅ = p‚ÇÇ j ‚â´ f i‚ÇÇ

namespace PreOneHypercover

variable {S : C} (E : PreOneHypercover.{w} S)

/-- Given an object `W` equipped with morphisms `p‚ÇÅ : W ‚ü∂ E.X i‚ÇÅ`, `p‚ÇÇ : W ‚ü∂ E.X i‚ÇÇ`,
this is the sieve of `W` which consists of morphisms `g : Z ‚ü∂ W` such that there exists `j`
and `h : Z ‚ü∂ E.Y j` such that `g ‚â´ p‚ÇÅ = h ‚â´ E.p‚ÇÅ j` and `g ‚â´ p‚ÇÇ = h ‚â´ E.p‚ÇÇ j`.
See lemmas `sieve‚ÇÅ_eq_pullback_sieve‚ÇÅ'` and `sieve‚ÇÅ'_eq_sieve‚ÇÅ` for equational lemmas
regarding this sieve. -/
@[simps]
def sieve‚ÇÅ {i‚ÇÅ i‚ÇÇ : E.I‚ÇÄ} {W : C} (p‚ÇÅ : W ‚ü∂ E.X i‚ÇÅ) (p‚ÇÇ : W ‚ü∂ E.X i‚ÇÇ) : Sieve W where
  arrows Z g := ‚àÉ (j : E.I‚ÇÅ i‚ÇÅ i‚ÇÇ) (h : Z ‚ü∂ E.Y j), g ‚â´ p‚ÇÅ = h ‚â´ E.p‚ÇÅ j ‚àß g ‚â´ p‚ÇÇ = h ‚â´ E.p‚ÇÇ j
  downward_closed := by
    rintro Z Z' g ‚ü®j, h, fac‚ÇÅ, fac‚ÇÇ‚ü© œÜ
    exact ‚ü®j, œÜ ‚â´ h, by simpa using œÜ ‚â´= fac‚ÇÅ, by simpa using œÜ ‚â´= fac‚ÇÇ‚ü©

section

variable {i‚ÇÅ i‚ÇÇ : E.I‚ÇÄ} [HasPullback (E.f i‚ÇÅ) (E.f i‚ÇÇ)]

/-- The obvious morphism `E.Y j ‚ü∂ pullback (E.f i‚ÇÅ) (E.f i‚ÇÇ)` given by `E : PreOneHypercover S`. -/
noncomputable abbrev toPullback (j : E.I‚ÇÅ i‚ÇÅ i‚ÇÇ) [HasPullback (E.f i‚ÇÅ) (E.f i‚ÇÇ)] :
    E.Y j ‚ü∂ pullback (E.f i‚ÇÅ) (E.f i‚ÇÇ) :=
  pullback.lift (E.p‚ÇÅ j) (E.p‚ÇÇ j) (E.w j)

variable (i‚ÇÅ i‚ÇÇ) in
/-- The sieve of `pullback (E.f i‚ÇÅ) (E.f i‚ÇÇ)` given by `E : PreOneHypercover S`. -/
noncomputable def sieve‚ÇÅ' : Sieve (pullback (E.f i‚ÇÅ) (E.f i‚ÇÇ)) :=
  Sieve.ofArrows _ (fun (j : E.I‚ÇÅ i‚ÇÅ i‚ÇÇ) => E.toPullback j)

lemma sieve‚ÇÅ_eq_pullback_sieve‚ÇÅ' {W : C} (p‚ÇÅ : W ‚ü∂ E.X i‚ÇÅ) (p‚ÇÇ : W ‚ü∂ E.X i‚ÇÇ)
    (w : p‚ÇÅ ‚â´ E.f i‚ÇÅ = p‚ÇÇ ‚â´ E.f i‚ÇÇ) :
    E.sieve‚ÇÅ p‚ÇÅ p‚ÇÇ = (E.sieve‚ÇÅ' i‚ÇÅ i‚ÇÇ).pullback (pullback.lift _ _ w) := by
  ext Z g
  constructor
  ¬∑ rintro ‚ü®j, h, fac‚ÇÅ, fac‚ÇÇ‚ü©
    exact ‚ü®_, h, _, ‚ü®j‚ü©, by cat_disch‚ü©
  ¬∑ rintro ‚ü®_, h, w, ‚ü®j‚ü©, fac‚ü©
    exact ‚ü®j, h, by simpa using fac.symm =‚â´ pullback.fst _ _,
      by simpa using fac.symm =‚â´ pullback.snd _ _‚ü©

variable (i‚ÇÅ i‚ÇÇ) in
lemma sieve‚ÇÅ'_eq_sieve‚ÇÅ : E.sieve‚ÇÅ' i‚ÇÅ i‚ÇÇ = E.sieve‚ÇÅ (pullback.fst _ _) (pullback.snd _ _) := by
  rw [‚Üê Sieve.pullback_id (S := E.sieve‚ÇÅ' i‚ÇÅ i‚ÇÇ),
    sieve‚ÇÅ_eq_pullback_sieve‚ÇÅ' _ _ _ pullback.condition]
  congr
  cat_disch

variable (i‚ÇÅ i‚ÇÇ) in
@[simps]
noncomputable
def cover‚ÇÄ : PreZeroHypercover (Limits.pullback (E.f i‚ÇÅ) (E.f i‚ÇÇ)) where
  I‚ÇÄ := E.I‚ÇÅ i‚ÇÅ i‚ÇÇ
  X k := E.Y k
  f k := E.toPullback k

end

/-- The sigma type of all `E.I‚ÇÅ i‚ÇÅ i‚ÇÇ` for `‚ü®i‚ÇÅ, i‚ÇÇ‚ü© : E.I‚ÇÄ √ó E.I‚ÇÄ`. -/
abbrev I‚ÇÅ' : Type w := Sigma (fun (i : E.I‚ÇÄ √ó E.I‚ÇÄ) => E.I‚ÇÅ i.1 i.2)

/-- The shape of the multiforks attached to `E : PreOneHypercover S`. -/
@[simps]
def multicospanShape : MulticospanShape where
  L := E.I‚ÇÄ
  R := E.I‚ÇÅ'
  fst j := j.1.1
  snd j := j.1.2

/-- The diagram of the multifork attached to a presheaf
`F : C·µí·µñ ‚•§ A`, `S : C` and `E : PreOneHypercover S`. -/
@[simps]
def multicospanIndex (F : C·µí·µñ ‚•§ A) : MulticospanIndex E.multicospanShape A where
  left i := F.obj (Opposite.op (E.X i))
  right j := F.obj (Opposite.op (E.Y j.2))
  fst j := F.map ((E.p‚ÇÅ j.2).op)
  snd j := F.map ((E.p‚ÇÇ j.2).op)

/-- The multifork attached to a presheaf `F : C·µí·µñ ‚•§ A`, `S : C` and `E : PreOneHypercover S`. -/
def multifork (F : C·µí·µñ ‚•§ A) :
    Multifork (E.multicospanIndex F) :=
  Multifork.ofŒπ _ (F.obj (Opposite.op S)) (fun i‚ÇÄ => F.map (E.f i‚ÇÄ).op) (by
    rintro ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, (j : E.I‚ÇÅ i‚ÇÅ i‚ÇÇ)‚ü©
    dsimp
    simp only [‚Üê F.map_comp, ‚Üê op_comp, E.w])

noncomputable
def toMultiequalizer (F : C·µí·µñ ‚•§ A) [HasMultiequalizer (E.multicospanIndex F)] :
    F.obj (Opposite.op S) ‚ü∂ multiequalizer (E.multicospanIndex F) :=
  limit.lift _ (E.multifork F)

-- if we don't have it, generalise this accordingly
lemma nonempty_isLimit_multifork_iff_isIso (F : C·µí·µñ ‚•§ A)
    [HasMultiequalizer (E.multicospanIndex F)] :
    Nonempty (IsLimit (E.multifork F)) ‚Üî IsIso (E.toMultiequalizer F) := by
  refine ‚ü®fun ‚ü®h‚ü© ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ let c : E.multifork F ‚ü∂ limit.cone _ := (limit.isLimit _).liftConeMorphism _
    have : IsIso c := h.hom_isIso (limit.isLimit _) _
    exact (Cones.forget _).map_isIso c
  ¬∑ constructor
    have : IsIso ((limit.isLimit (E.multicospanIndex F).multicospan).lift (E.multifork F)) := h
    apply IsLimit.ofPointIso (limit.isLimit _)

section Category

/-- A morphism of pre-`1`-hypercovers of `S` is a family of refinement morphisms commuting
with the structure morphisms of `E` and `F`. -/
@[ext]
structure Hom (E F : PreOneHypercover S) extends
    E.toPreZeroHypercover.Hom F.toPreZeroHypercover where
  /-- The map between indexing types of the coverings of the fibre products over `S`. -/
  s‚ÇÅ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) : F.I‚ÇÅ (s‚ÇÄ i) (s‚ÇÄ j)
  /-- The refinement morphisms between objects in the coverings of the fibre products over `S`. -/
  h‚ÇÅ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) : E.Y k ‚ü∂ F.Y (s‚ÇÅ k)
  w‚ÇÅ‚ÇÅ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) : h‚ÇÅ k ‚â´ F.p‚ÇÅ (s‚ÇÅ k) = E.p‚ÇÅ k ‚â´ h‚ÇÄ i := by cat_disch
  w‚ÇÅ‚ÇÇ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) : h‚ÇÅ k ‚â´ F.p‚ÇÇ (s‚ÇÅ k) = E.p‚ÇÇ k ‚â´ h‚ÇÄ j := by cat_disch

attribute [reassoc] Hom.w‚ÇÅ‚ÇÅ Hom.w‚ÇÅ‚ÇÇ

/-- The identity refinement of a pre-`1`-hypercover. -/
@[simps!]
def Hom.id (E : PreOneHypercover S) : Hom E E where
  __ := PreZeroHypercover.Hom.id _
  s‚ÇÅ := _root_.id
  h‚ÇÅ _ := ùüô _

variable {E : PreOneHypercover.{w} S} {F : PreOneHypercover.{w'} S}
  {G : PreOneHypercover S}

/-- Composition of refinement morphisms of pre-`1`-hypercovers. -/
@[simps!]
def Hom.comp (f : E.Hom F) (g : F.Hom G) : E.Hom G where
  __ := PreZeroHypercover.Hom.comp _ _
  s‚ÇÅ := g.s‚ÇÅ ‚àò f.s‚ÇÅ
  h‚ÇÅ i := f.h‚ÇÅ i ‚â´ g.h‚ÇÅ _
  w‚ÇÅ‚ÇÅ := by simp [w‚ÇÅ‚ÇÅ, w‚ÇÅ‚ÇÅ_assoc]
  w‚ÇÅ‚ÇÇ := by simp [w‚ÇÅ‚ÇÇ, w‚ÇÅ‚ÇÇ_assoc]

/-- The induced index map `E.I‚ÇÅ' ‚Üí F.I‚ÇÅ'` from a refinement morphism `E ‚ü∂ F`. -/
@[simp]
def Hom.s‚ÇÅ' (f : E.Hom F) (k : E.I‚ÇÅ') : F.I‚ÇÅ' :=
  ‚ü®‚ü®f.s‚ÇÄ k.1.1, f.s‚ÇÄ k.1.2‚ü©, f.s‚ÇÅ k.2‚ü©

@[simps! id_s‚ÇÄ id_s‚ÇÅ id_h‚ÇÄ id_h‚ÇÅ comp_s‚ÇÄ comp_s‚ÇÅ comp_h‚ÇÄ comp_h‚ÇÅ]
instance : Category (PreOneHypercover S) where
  Hom := Hom
  id E := Hom.id E
  comp f g := f.comp g

lemma Hom.ext' {E : PreOneHypercover.{w} S} {F : PreOneHypercover.{w'} S}
    {f g : E.Hom F} (h : f.toHom = g.toHom)
    (hs‚ÇÅ : ‚àÄ {i j} (k : E.I‚ÇÅ i j), f.s‚ÇÅ k = h ‚ñ∏ g.s‚ÇÅ k)
    (hh‚ÇÅ : ‚àÄ {i j} (k : E.I‚ÇÅ i j),
      f.h‚ÇÅ k = g.h‚ÇÅ k ‚â´ eqToHom (by rw [hs‚ÇÅ]; congr 1 <;> simp [h])) :
    f = g := by
  cases f
  cases g
  simp at h
  subst h
  simp only [mk.injEq, heq_eq_eq, true_and]
  simp at hs‚ÇÅ
  simp at hh‚ÇÅ
  refine ‚ü®?_, ?_‚ü©
  ¬∑ ext k
    apply hs‚ÇÅ
  ¬∑ apply Function.hfunext rfl
    intro i j hij
    simp at hij
    subst hij
    apply Function.hfunext rfl
    intro j j' hjj'
    simp at hjj'
    subst hjj'
    apply Function.hfunext rfl
    intro k k' hkk'
    simp at hkk'
    subst hkk'
    rw [hh‚ÇÅ k]
    simp

lemma Hom.ext'' {E : PreOneHypercover.{w} S} {F : PreOneHypercover.{w'} S}
    {f g : E.Hom F} (hs‚ÇÄ : f.s‚ÇÄ = g.s‚ÇÄ) (hh‚ÇÄ : ‚àÄ i, f.h‚ÇÄ i = g.h‚ÇÄ i ‚â´ eqToHom (by rw [hs‚ÇÄ]))
    (hs‚ÇÅ : ‚àÄ {i j} (k : E.I‚ÇÅ i j), f.s‚ÇÅ k = hs‚ÇÄ ‚ñ∏ g.s‚ÇÅ k)
    (hh‚ÇÅ : ‚àÄ {i j} (k : E.I‚ÇÅ i j),
      f.h‚ÇÅ k = g.h‚ÇÅ k ‚â´ eqToHom (by rw [hs‚ÇÅ]; congr 1 <;> simp [hs‚ÇÄ])) :
    f = g := by
  have : f.toHom = g.toHom := PreZeroHypercover.Hom.ext' hs‚ÇÄ hh‚ÇÄ
  cases f
  cases g
  simp at this
  subst this
  simp only [mk.injEq, heq_eq_eq, true_and]
  simp at hs‚ÇÅ
  simp at hh‚ÇÅ
  refine ‚ü®?_, ?_‚ü©
  ¬∑ ext k
    apply hs‚ÇÅ
  ¬∑ apply Function.hfunext rfl
    intro i j hij
    simp at hij
    subst hij
    apply Function.hfunext rfl
    intro j j' hjj'
    simp at hjj'
    subst hjj'
    apply Function.hfunext rfl
    intro k k' hkk'
    simp at hkk'
    subst hkk'
    rw [hh‚ÇÅ k]
    simp

/-- The forgetful functor from pre-`1`-hypercovers to pre-`0`-hypercovers. -/
@[simps]
def oneToZero : PreOneHypercover.{w} S ‚•§ PreZeroHypercover.{w} S where
  obj f := f.1
  map f := f.1

/-- A homotopy of refinements `E ‚ü∂ F` is a family of morphisms `X·µ¢ ‚ü∂ Y‚Çê` where
`Y‚Çê` is a component of the cover of `X_{f(i)} √ó[S] X_{g(i)}`. -/
structure Homotopy (f g : E.Hom F) where
  /-- The index map sending `i : E.I‚ÇÄ` to `a` above `(f(i), g(i))`. -/
  H (i : E.I‚ÇÄ) : F.I‚ÇÅ (f.s‚ÇÄ i) (g.s‚ÇÄ i)
  /-- The morphism `X·µ¢ ‚ü∂ Y‚Çê`. -/
  a (i : E.I‚ÇÄ) : E.X i ‚ü∂ F.Y (H i)
  wl (i : E.I‚ÇÄ) : a i ‚â´ F.p‚ÇÅ (H i) = f.h‚ÇÄ i
  wr (i : E.I‚ÇÄ) : a i ‚â´ F.p‚ÇÇ (H i) = g.h‚ÇÄ i

attribute [reassoc (attr := simp)] Homotopy.wl Homotopy.wr

/-- A refinement morphism `E ‚ü∂ F` induces a morphism on associated multiequalizers. -/
def Hom.mapMultiforkOfIsLimit (f : E.Hom F) (P : C·µí·µñ ‚•§ A) {c : Multifork (E.multicospanIndex P)}
    (hc : IsLimit c) (d : Multifork (F.multicospanIndex P)) :
    d.pt ‚ü∂ c.pt :=
  Multifork.IsLimit.lift hc (fun a ‚Ü¶ d.Œπ (f.s‚ÇÄ a) ‚â´ P.map (f.h‚ÇÄ a).op) <| by
    intro (k : E.I‚ÇÅ')
    simp only [multicospanIndex_right, multicospanShape_fst, multicospanIndex_left,
      multicospanIndex_fst, assoc, multicospanShape_snd, multicospanIndex_snd]
    have heq := d.condition (f.s‚ÇÅ' k)
    simp only [Hom.s‚ÇÅ', multicospanIndex_right, multicospanShape_fst, multicospanIndex_left,
      multicospanIndex_fst, multicospanShape_snd, multicospanIndex_snd] at heq
    rw [‚Üê Functor.map_comp, ‚Üê op_comp, ‚Üê Hom.w‚ÇÅ‚ÇÅ, ‚Üê Functor.map_comp, ‚Üê op_comp, ‚Üê Hom.w‚ÇÅ‚ÇÇ]
    rw [op_comp, Functor.map_comp, reassoc_of% heq, op_comp, Functor.map_comp]

@[reassoc (attr := simp)]
lemma Hom.mapMultiforkOfIsLimit_Œπ {E F : PreOneHypercover.{w} S}
    (f : E.Hom F) (P : C·µí·µñ ‚•§ A) {c : Multifork (E.multicospanIndex P)} (hc : IsLimit c)
    (d : Multifork (F.multicospanIndex P)) (a : E.I‚ÇÄ) :
    f.mapMultiforkOfIsLimit P hc d ‚â´ c.Œπ a = d.Œπ (f.s‚ÇÄ a) ‚â´ P.map (f.h‚ÇÄ a).op := by
  simp [mapMultiforkOfIsLimit]

/-- Homotopic refinements induce the same map on multiequalizers. -/
lemma Homotopy.mapMultiforkOfIsLimit_eq {E F : PreOneHypercover.{w} S}
    {f g : E.Hom F} (H : Homotopy f g)
    (P : C·µí·µñ ‚•§ A) {c : Multifork (E.multicospanIndex P)} (hc : IsLimit c)
    (d : Multifork (F.multicospanIndex P)) :
    f.mapMultiforkOfIsLimit P hc d = g.mapMultiforkOfIsLimit P hc d := by
  refine Multifork.IsLimit.hom_ext hc fun a ‚Ü¶ ?_
  have heq := d.condition ‚ü®‚ü®(f.s‚ÇÄ a), (g.s‚ÇÄ a)‚ü©, H.H a‚ü©
  simp only [multicospanIndex_right, multicospanShape_fst, multicospanIndex_left,
    multicospanIndex_fst, multicospanShape_snd, multicospanIndex_snd] at heq
  simp [-Homotopy.wl, -Homotopy.wr, ‚Üê H.wl, ‚Üê H.wr, reassoc_of% heq]

noncomputable
def Hom.mapMultifork {E : PreOneHypercover.{w} S} {F : PreOneHypercover.{w'} S}
    (f : E.Hom F) (P : C·µí·µñ ‚•§ A) [HasMultiequalizer (E.multicospanIndex P)]
    [HasMultiequalizer (F.multicospanIndex P)] :
    multiequalizer (F.multicospanIndex P) ‚ü∂ multiequalizer (E.multicospanIndex P) :=
  f.mapMultiforkOfIsLimit P (limit.isLimit _) (Multiequalizer.multifork (F.multicospanIndex P))

lemma Homotopy.mapMultifork {E F : PreOneHypercover.{w} S} {f g : E.Hom F} (H : Homotopy f g)
    (P : C·µí·µñ ‚•§ A) [HasMultiequalizer (E.multicospanIndex P)]
    [HasMultiequalizer (F.multicospanIndex P)] : f.mapMultifork P = g.mapMultifork P :=
  H.mapMultiforkOfIsLimit_eq P _ _

@[reassoc (attr := simp)]
lemma Hom.mapMultifork_Œπ {E F : PreOneHypercover.{w} S} (f : E.Hom F) (P : C·µí·µñ ‚•§ A)
    [HasMultiequalizer (E.multicospanIndex P)] [HasMultiequalizer (F.multicospanIndex P)]
    (a : E.I‚ÇÄ) :
    f.mapMultifork P ‚â´ Multiequalizer.Œπ (E.multicospanIndex P) a =
      Multiequalizer.Œπ (F.multicospanIndex P) (f.s‚ÇÄ a) ‚â´ P.map (f.h‚ÇÄ a).op :=
  f.mapMultiforkOfIsLimit_Œπ _ _ _ a

@[simp]
lemma Hom.mapMultifork_id (P : C·µí·µñ ‚•§ A) [HasMultiequalizer (E.multicospanIndex P)] :
    (ùüô E : E ‚ü∂ E).mapMultifork P = ùüô _ := by
  apply Multiequalizer.hom_ext
  simp

@[simp]
lemma Hom.mapMultifork_comp {E F : PreOneHypercover.{w} S} (f : E ‚ü∂ F) (g : F ‚ü∂ G) (P : C·µí·µñ ‚•§ A)
    [HasMultiequalizer (E.multicospanIndex P)] [HasMultiequalizer (F.multicospanIndex P)]
    [HasMultiequalizer (G.multicospanIndex P)] :
    (f ‚â´ g).mapMultifork P = g.mapMultifork P ‚â´ f.mapMultifork P := by
  apply Multiequalizer.hom_ext
  simp

variable (f g : E.Hom F) [HasPullbacks C]

/-- (Implementation): The covering object of `cylinder f g`. -/
noncomputable
abbrev cylinderX {i : E.I‚ÇÄ} (k : F.I‚ÇÅ (f.s‚ÇÄ i) (g.s‚ÇÄ i)) : C :=
  pullback (pullback.lift (f.h‚ÇÄ i) (g.h‚ÇÄ i) (by simp)) (F.toPullback k)

/-- (Implementation): The structure morphisms of the covering objects of `cylinder f g`. -/
noncomputable
abbrev cylinderf {i : E.I‚ÇÄ} (k : F.I‚ÇÅ (f.s‚ÇÄ i) (g.s‚ÇÄ i)) : cylinderX f g k ‚ü∂ S :=
  pullback.fst _ _ ‚â´ E.f _

/-- Given two refinement morphisms `f, g : E ‚ü∂ F`, this is a (pre-)`1`-hypercover `W` that
admits a morphism `h : W ‚ü∂ E` such that `h ‚â´ f` and `h ‚â´ g` are homotopic. Hence
they become equal after quotienting out by homotopy.
This is a `1`-hypercover, if `E` and `F` are (see `OneHypercover.cylinder`). -/
@[simps]
noncomputable def cylinder (f g : E.Hom F) : PreOneHypercover.{max w w'} S where
  I‚ÇÄ := Œ£ (i : E.I‚ÇÄ), F.I‚ÇÅ (f.s‚ÇÄ i) (g.s‚ÇÄ i)
  X p := cylinderX f g p.2
  f p := cylinderf f g p.2
  I‚ÇÅ p q := ULift.{max w w'} (E.I‚ÇÅ p.1 q.1)
  Y {p q} k :=
    pullback
      (pullback.map (cylinderf f g p.2)
        (cylinderf f g q.2) _ _ (pullback.fst _ _) (pullback.fst _ _) (ùüô S) (by simp)
        (by simp))
      (pullback.lift _ _ (E.w k.down))
  p‚ÇÅ {p q} k := pullback.fst _ _ ‚â´ pullback.fst _ _
  p‚ÇÇ {p q} k := pullback.fst _ _ ‚â´ pullback.snd _ _
  w {_ _} k := by simp [pullback.condition]

lemma toPullback_cylinder {i j : (cylinder f g).I‚ÇÄ} (k : (cylinder f g).I‚ÇÅ i j) :
    (cylinder f g).toPullback k = pullback.fst _ _ := by
  apply pullback.hom_ext <;> simp [toPullback]

lemma sieve‚ÇÄ_cylinder :
    (cylinder f g).sieve‚ÇÄ =
      Sieve.generate
        (Presieve.bindOfArrows _ E.f <| fun i ‚Ü¶
          (Sieve.pullback (pullback.lift (f.h‚ÇÄ _) (g.h‚ÇÄ _) (by simp))
            (F.sieve‚ÇÅ' _ _)).arrows) := by
  refine le_antisymm ?_ ?_
  ¬∑ rw [PreZeroHypercover.sieve‚ÇÄ, Sieve.generate_le_iff]
    rintro - - ‚ü®i‚ü©
    refine ‚ü®_, ùüô _, (cylinder f g).f _, ‚ü®_, _, ?_‚ü©, by simp‚ü©
    simp only [Sieve.pullback_apply, pullback.condition]
    exact Sieve.downward_closed _ (Sieve.ofArrows_mk _ _ _) _
  ¬∑ rw [Sieve.generate_le_iff, PreZeroHypercover.sieve‚ÇÄ]
    rintro Z u ‚ü®i, v, ‚ü®W, o, o', ‚ü®j‚ü©, hoo'‚ü©‚ü©
    exact ‚ü®_, pullback.lift v o hoo'.symm, (cylinder f g).f ‚ü®i, j‚ü©, Presieve.ofArrows.mk _,
      by simp‚ü©

lemma sieve‚ÇÅ'_cylinder (i j : Œ£ (i : E.I‚ÇÄ), F.I‚ÇÅ (f.s‚ÇÄ i) (g.s‚ÇÄ i)) :
    (cylinder f g).sieve‚ÇÅ' i j =
      Sieve.pullback
        (pullback.map _ _ _ _ (pullback.fst _ _) (pullback.fst _ _) (ùüô S) (by simp) (by simp))
        (E.sieve‚ÇÅ' i.1 j.1) := by
  refine le_antisymm ?_ ?_
  ¬∑ rw [sieve‚ÇÅ', Sieve.ofArrows, Sieve.generate_le_iff]
    rintro - - ‚ü®k‚ü©
    refine ‚ü®E.Y k.down, pullback.snd _ _, E.toPullback k.down, Presieve.ofArrows.mk k.down, ?_‚ü©
    simp only [cylinder_Y, cylinder_f, toPullback_cylinder, pullback.condition]
  ¬∑ rw [sieve‚ÇÅ', Sieve.ofArrows, ‚Üê Sieve.pullbackArrows_comm, Sieve.generate_le_iff]
    rintro Z u ‚ü®W, v, ‚ü®k‚ü©‚ü©
    simp_rw [‚Üê pullbackSymmetry_inv_comp_fst]
    apply (((cylinder f g).sieve‚ÇÅ' i j)).downward_closed
    rw [sieve‚ÇÅ']
    convert Sieve.ofArrows_mk _ _ (ULift.up k)
    simp [toPullback_cylinder f g ‚ü®k‚ü©]

/-- (Implementation): The refinement morphism `cylinder f g ‚ü∂ E`. -/
@[simps]
noncomputable def cylinderHom : (cylinder f g).Hom E where
  s‚ÇÄ p := p.1
  s‚ÇÅ k := k.down
  h‚ÇÄ p := pullback.fst _ _
  h‚ÇÅ {p q} k := pullback.snd _ _
  w‚ÇÅ‚ÇÅ k := by
    have : E.p‚ÇÅ k.down = pullback.lift _ _ (E.w k.down) ‚â´ pullback.fst _ _ := by simp
    nth_rw 2 [this]
    rw [‚Üê pullback.condition_assoc]
    simp
  w‚ÇÅ‚ÇÇ {p q} k := by
    have : E.p‚ÇÇ k.down = pullback.lift _ _ (E.w k.down) ‚â´ pullback.snd _ _ := by simp
    nth_rw 2 [this]
    rw [‚Üê pullback.condition_assoc]
    simp
  w‚ÇÄ := by simp

/-- (Implementation): The homotopy of the morphisms `cylinder f g ‚ü∂ E ‚ü∂ F`. -/
noncomputable def cylinderHomotopy :
    Homotopy ((cylinderHom f g).comp f) ((cylinderHom f g).comp g) where
  H p := p.2
  a p := pullback.snd _ _
  wl p := by
    have : F.p‚ÇÅ p.snd = pullback.lift _ _ (F.w p.2) ‚â´ pullback.fst _ _ := by simp
    nth_rw 1 [this]
    rw [‚Üê pullback.condition_assoc]
    simp
  wr p := by
    have : g.h‚ÇÄ p.fst = pullback.lift (f.h‚ÇÄ p.fst) (g.h‚ÇÄ p.fst) (by simp) ‚â´
        pullback.snd (F.f _) (F.f _) := by simp
    dsimp only [cylinder_X, Hom.comp_s‚ÇÄ, cylinder_I‚ÇÄ, Function.comp_apply, cylinderHom_s‚ÇÄ,
      Hom.comp_h‚ÇÄ, cylinderHom_h‚ÇÄ]
    nth_rw 3 [this]
    rw [pullback.condition_assoc]
    simp

/-- Up to homotopy, the category of (pre-)`1`-hypercovers is cofiltered. -/
lemma exists_nonempty_homotopy (f g : E.Hom F) :
    ‚àÉ (W : PreOneHypercover.{max w w'} S) (h : W.Hom E),
      Nonempty (Homotopy (h.comp f) (h.comp g)) :=
  ‚ü®cylinder f g, PreOneHypercover.cylinderHom f g, ‚ü®cylinderHomotopy f g‚ü©‚ü©

end Category

variable {S : C} {E F G : PreOneHypercover S}

@[simps! toPreZeroHypercover p‚ÇÅ p‚ÇÇ I‚ÇÅ Y]
noncomputable
def pullback‚ÇÅ {T : C} (f : T ‚ü∂ S) (E : PreOneHypercover S) [‚àÄ (i : E.I‚ÇÄ), HasPullback f (E.f i)]
    [‚àÄ (i j : E.I‚ÇÄ) (k : E.I‚ÇÅ i j), HasPullback f (E.p‚ÇÅ k ‚â´ E.f i)] :
    PreOneHypercover T where
  __ := E.toPreZeroHypercover.pullback‚ÇÅ f
  I‚ÇÅ := E.I‚ÇÅ
  Y i _ k := pullback f (E.p‚ÇÅ k ‚â´ E.f i)
  p‚ÇÅ _ _ k := pullback.map _ _ _ _ (ùüô T) (E.p‚ÇÅ k) (ùüô S) (by simp) (by simp)
  p‚ÇÇ _ _ k := pullback.map _ _ _ _ (ùüô T) (E.p‚ÇÇ k) (ùüô S) (by simp) (by simp [E.w])
  w := by simp

section

variable [HasPullbacks C]
  {W T : C} (g : W ‚ü∂ T) (f : T ‚ü∂ S) (E : PreOneHypercover S)

@[simps!]
noncomputable
def pullback‚ÇÅIdInv : E ‚ü∂ E.pullback‚ÇÅ (ùüô S) where
  __ := E.toPreZeroHypercover.pullback‚ÇÅId.inv
  s‚ÇÅ := id
  h‚ÇÅ k := pullback.lift (E.p‚ÇÅ k ‚â´ E.f _) (ùüô _) (by simp)
  w‚ÇÅ‚ÇÅ {i j} k := by apply pullback.hom_ext <;> simp
  w‚ÇÅ‚ÇÇ {i j} k := by apply pullback.hom_ext <;> simp [E.w]

@[simps!]
noncomputable
def pullback‚ÇÅId : E.pullback‚ÇÅ (ùüô S) ‚âÖ E where
  hom.toHom := E.toPreZeroHypercover.pullback‚ÇÅId.hom
  hom.s‚ÇÅ := id
  hom.h‚ÇÅ k := pullback.snd _ _
  inv := pullback‚ÇÅIdInv E
  hom_inv_id := by
    apply Hom.ext'' (by rfl)
    ¬∑ intro
      apply pullback.hom_ext <;> simp [‚Üê pullback.condition]
    ¬∑ intro i j k
      apply pullback.hom_ext <;> simp [‚Üê pullback.condition]
    ¬∑ simp
  inv_hom_id := Hom.ext'' (by rfl) (by simp) (by simp) (by simp)

@[simps!]
noncomputable
def pullback‚ÇÅCompHom [HasPullbacks C] : E.pullback‚ÇÅ (g ‚â´ f) ‚ü∂ (E.pullback‚ÇÅ f).pullback‚ÇÅ g where
  __ := (E.toPreZeroHypercover.pullback‚ÇÅComp _ _).hom
  s‚ÇÅ := id
  h‚ÇÅ {i j} k := (pullbackRightPullbackFstIso _ _ _).inv ‚â´ (pullback.congrHom rfl (by simp)).hom
  w‚ÇÅ‚ÇÅ {i j} k := by
    apply pullback.hom_ext
    ¬∑ simp
    ¬∑ apply pullback.hom_ext <;> simp
  w‚ÇÅ‚ÇÇ {i j} k := by
    apply pullback.hom_ext
    ¬∑ simp
    ¬∑ apply pullback.hom_ext <;> simp

@[simps!]
noncomputable
def pullback‚ÇÅCompInv [HasPullbacks C] : (E.pullback‚ÇÅ f).pullback‚ÇÅ g ‚ü∂ E.pullback‚ÇÅ (g ‚â´ f) where
  __ := (E.toPreZeroHypercover.pullback‚ÇÅComp _ _).inv
  s‚ÇÅ := id
  h‚ÇÅ {i j} k := (pullback.congrHom rfl (by simp)).inv ‚â´ (pullbackRightPullbackFstIso _ _ _).hom

@[simps!]
noncomputable
def pullback‚ÇÅComp [HasPullbacks C] : E.pullback‚ÇÅ (g ‚â´ f) ‚âÖ (E.pullback‚ÇÅ f).pullback‚ÇÅ g where
  hom := pullback‚ÇÅCompHom g f E
  inv := pullback‚ÇÅCompInv g f E
  hom_inv_id := by
    apply Hom.ext'' (by rfl) (by simp) (by simp)
    intros
    apply pullback.hom_ext <;> simp
  inv_hom_id := by
    apply Hom.ext'' (by rfl) (by simp) (by simp)
    intros
    apply pullback.hom_ext <;> simp

end

lemma sieve‚ÇÅ_pullback‚ÇÅ {T : C} (f : T ‚ü∂ S) (E : PreOneHypercover S)
    [‚àÄ (i : E.I‚ÇÄ), HasPullback f (E.f i)]
    [‚àÄ (i j : E.I‚ÇÄ) (k : E.I‚ÇÅ i j), HasPullback f (E.p‚ÇÅ k ‚â´ E.f i)]
    {i j : E.I‚ÇÄ} {W : C} (p‚ÇÅ : W ‚ü∂ pullback f (E.f i)) (p‚ÇÇ : W ‚ü∂ pullback f (E.f j))
    (w : p‚ÇÅ ‚â´ pullback.fst _ _ = p‚ÇÇ ‚â´ pullback.fst _ _) :
    (E.pullback‚ÇÅ f).sieve‚ÇÅ p‚ÇÅ p‚ÇÇ = E.sieve‚ÇÅ (p‚ÇÅ ‚â´ pullback.snd _ _) (p‚ÇÇ ‚â´ pullback.snd _ _) := by
  ext U g
  refine ‚ü®fun ‚ü®k, a, h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ ?_, fun ‚ü®k, a, h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ refine ‚ü®k, a ‚â´ pullback.snd _ _, ?_, ?_‚ü©
    ¬∑ simpa using congr($(h‚ÇÅ) ‚â´ pullback.snd f (E.f i))
    ¬∑ simpa using congr($(h‚ÇÇ) ‚â´ pullback.snd f (E.f j))
  ¬∑ refine ‚ü®k, pullback.lift (g ‚â´ p‚ÇÅ ‚â´ pullback.fst _ _) a
      (by simp [pullback.condition, reassoc_of% h‚ÇÅ]), ?_, ?_‚ü©
    ¬∑ apply pullback.hom_ext <;> simp [h‚ÇÅ]
    ¬∑ apply pullback.hom_ext
      ¬∑ simp [w]
      ¬∑ simp [h‚ÇÇ]

@[simps toHom s‚ÇÅ h‚ÇÅ]
noncomputable
def Hom.pullback‚ÇÅ {T : C} (g : T ‚ü∂ S) (f : E ‚ü∂ F) [‚àÄ (i : E.I‚ÇÄ), HasPullback g (E.f i)]
    [‚àÄ (i : F.I‚ÇÄ), HasPullback g (F.f i)]
    [‚àÄ (i j : E.I‚ÇÄ) (k : E.I‚ÇÅ i j), HasPullback g (E.p‚ÇÅ k ‚â´ E.f i)]
    [‚àÄ (i j : F.I‚ÇÄ) (k : F.I‚ÇÅ i j), HasPullback g (F.p‚ÇÅ k ‚â´ F.f i)] :
    E.pullback‚ÇÅ g ‚ü∂ F.pullback‚ÇÅ g where
  s‚ÇÄ := f.s‚ÇÄ
  h‚ÇÄ i := pullback.map _ _ _ _ (ùüô T) (f.h‚ÇÄ i) (ùüô S) (by simp) (by simp)
  s‚ÇÅ {i j} k := f.s‚ÇÅ k
  h‚ÇÅ {i j} k := pullback.map _ _ _ _ (ùüô T) (f.h‚ÇÅ k) (ùüô S) (by simp)
    (by rw [f.w‚ÇÅ‚ÇÅ_assoc, Category.assoc, Category.comp_id, f.w‚ÇÄ])
  w‚ÇÄ i := by simp
  w‚ÇÅ‚ÇÅ {i j} k := by
    apply pullback.hom_ext
    ¬∑ simp
    ¬∑ simp only [PreOneHypercover.pullback‚ÇÅ_Y,
        PreOneHypercover.pullback‚ÇÅ_toPreZeroHypercover, PreZeroHypercover.pullback‚ÇÅ_X,
        PreOneHypercover.pullback‚ÇÅ_p‚ÇÅ, Category.assoc, limit.lift_œÄ, PullbackCone.mk_pt,
        PullbackCone.mk_œÄ_app, limit.lift_œÄ_assoc, cospan_right]
      rw [f.w‚ÇÅ‚ÇÅ k]
  w‚ÇÅ‚ÇÇ {i j} k := by
    apply pullback.hom_ext
    ¬∑ simp
    ¬∑ simp only [PreOneHypercover.pullback‚ÇÅ_Y,
        PreOneHypercover.pullback‚ÇÅ_toPreZeroHypercover, PreZeroHypercover.pullback‚ÇÅ_X,
        PreOneHypercover.pullback‚ÇÅ_p‚ÇÇ, Category.assoc, limit.lift_œÄ, PullbackCone.mk_pt,
        PullbackCone.mk_œÄ_app, limit.lift_œÄ_assoc, cospan_right]
      rw [f.w‚ÇÅ‚ÇÇ k]

section

variable {T : C} (g : T ‚ü∂ S) (f : E ‚ü∂ F) (h : F ‚ü∂ G)
    [‚àÄ (i : E.I‚ÇÄ), HasPullback g (E.f i)] [‚àÄ (i : F.I‚ÇÄ), HasPullback g (F.f i)]
    [‚àÄ (i j : E.I‚ÇÄ) (k : E.I‚ÇÅ i j), HasPullback g (E.p‚ÇÅ k ‚â´ E.f i)]
    [‚àÄ (i j : F.I‚ÇÄ) (k : F.I‚ÇÅ i j), HasPullback g (F.p‚ÇÅ k ‚â´ F.f i)]

lemma Hom.pullback‚ÇÅ_id : (ùüô E : E ‚ü∂ E).pullback‚ÇÅ g = ùüô (E.pullback‚ÇÅ g) :=
  Hom.ext'' (by rfl) (by simp) (by simp) (by simp)

variable [‚àÄ (i : G.I‚ÇÄ), HasPullback g (G.f i)]
  [‚àÄ (i j : G.I‚ÇÄ) (k : G.I‚ÇÅ i j), HasPullback g (G.p‚ÇÅ k ‚â´ G.f i)]

lemma Hom.pullback‚ÇÅ_comp : (f ‚â´ h).pullback‚ÇÅ g = f.pullback‚ÇÅ g ‚â´ h.pullback‚ÇÅ g :=
  Hom.ext'' (by rfl) (fun _ ‚Ü¶ by apply pullback.hom_ext <;> simp) (by simp)
    (fun _ ‚Ü¶ by apply pullback.hom_ext <;> simp)

end

noncomputable
def Homotopy.pullback‚ÇÅ {T : C} (g : T ‚ü∂ S) {u v : E.Hom F} (H : Homotopy u v)
    [‚àÄ (i : E.I‚ÇÄ), HasPullback g (E.f i)] [‚àÄ (i : F.I‚ÇÄ), HasPullback g (F.f i)]
    [‚àÄ (i j : E.I‚ÇÄ) (k : E.I‚ÇÅ i j), HasPullback g (E.p‚ÇÅ k ‚â´ E.f i)]
    [‚àÄ (i j : F.I‚ÇÄ) (k : F.I‚ÇÅ i j), HasPullback g (F.p‚ÇÅ k ‚â´ F.f i)] :
    Homotopy (u.pullback‚ÇÅ g) (v.pullback‚ÇÅ g) where
  H := H.H
  a i := pullback.map _ _ _ _ (ùüô T) (H.a i) (ùüô S) (by simp) (by simp)
  wl i := by apply pullback.hom_ext <;> simp
  wr i := by apply pullback.hom_ext <;> simp

@[simps toPreZeroHypercover I‚ÇÅ Y p‚ÇÅ p‚ÇÇ]
def bind‚ÇÅ (E : PreOneHypercover.{w} S)
    (F : ‚àÄ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j), PreZeroHypercover.{w} (E.Y k)) :
    PreOneHypercover S where
  __ := E.toPreZeroHypercover
  I‚ÇÅ {i j : E.I‚ÇÄ} := Œ£ (k : E.I‚ÇÅ i j), (F k).I‚ÇÄ
  Y {i j : E.I‚ÇÄ} p := (F p.1).X p.2
  p‚ÇÅ {i j : E.I‚ÇÄ} p := (F p.1).f p.2 ‚â´ E.p‚ÇÅ _
  p‚ÇÇ {i j : E.I‚ÇÄ} p := (F p.1).f p.2 ‚â´ E.p‚ÇÇ _
  w {i j : E.I‚ÇÄ} p := by simp [E.w]

@[simps]
noncomputable
def sum (E : PreOneHypercover.{w} S) (F : PreOneHypercover.{w} S)
    [‚àÄ i j, HasPullback (E.f i) (F.f j)]
    (G : ‚àÄ (i : E.I‚ÇÄ) (j : F.I‚ÇÄ), PreZeroHypercover.{w} (pullback (E.f i) (F.f j))) :
    PreOneHypercover.{w} S where
  I‚ÇÄ := E.I‚ÇÄ ‚äï F.I‚ÇÄ
  X := Sum.elim E.X F.X
  f
    | .inl i => E.f i
    | .inr i => F.f i
  I‚ÇÅ
    | .inl i, .inl j => E.I‚ÇÅ i j
    | .inr i, .inr j => F.I‚ÇÅ i j
    | .inl i, .inr j => (G i j).I‚ÇÄ
    | .inr i, .inl j => (G j i).I‚ÇÄ
  Y
    | .inl i, .inl j, k => E.Y k
    | .inr i, .inr j, k => F.Y k
    | .inl i, .inr j, k => (G i j).X k
    | .inr i, .inl j, k => (G j i).X k
  p‚ÇÅ
    | .inl i, .inl j, k => E.p‚ÇÅ k
    | .inr i, .inr j, k => F.p‚ÇÅ k
    | .inl i, .inr j, k => (G i j).f _ ‚â´ pullback.fst _ _
    | .inr i, .inl j, k => (G j i).f _ ‚â´ pullback.snd _ _
  p‚ÇÇ
    | .inl i, .inl j, k => E.p‚ÇÇ k
    | .inr i, .inr j, k => F.p‚ÇÇ k
    | .inl i, .inr j, k => (G i j).f _ ‚â´ pullback.snd _ _
    | .inr i, .inl j, k => (G j i).f _ ‚â´ pullback.fst _ _
  w
    | .inl i, .inl j, k => E.w k
    | .inr i, .inr j, k => F.w k
    | .inl i, .inr j, k => by simp [pullback.condition]
    | .inr i, .inl j, k => by simp [pullback.condition]

@[simps toPreZeroHypercover I‚ÇÅ Y p‚ÇÅ p‚ÇÇ]
def mk' (E : PreZeroHypercover.{w} S) (I‚ÇÅ' : Type w) (Y : I‚ÇÅ' ‚Üí C)
    (i‚ÇÅ i‚ÇÇ : I‚ÇÅ' ‚Üí E.I‚ÇÄ)
    (p‚ÇÅ : ‚àÄ i : I‚ÇÅ', Y i ‚ü∂ E.X (i‚ÇÅ i))
    (p‚ÇÇ : ‚àÄ i : I‚ÇÅ', Y i ‚ü∂ E.X (i‚ÇÇ i))
    (w : ‚àÄ i, p‚ÇÅ i ‚â´ E.f _ = p‚ÇÇ i ‚â´ E.f _) :
    PreOneHypercover.{w} S where
  __ := E
  I‚ÇÅ i j := { x : I‚ÇÅ' // i‚ÇÅ x = i ‚àß i‚ÇÇ x = j }
  Y i j k := Y k.1
  p‚ÇÅ i j k := p‚ÇÅ k.1 ‚â´ eqToHom (by rw [k.2.1])
  p‚ÇÇ i j k := p‚ÇÇ k.1 ‚â´ eqToHom (by rw [k.2.2])
  w i j := fun ‚ü®k, h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ by
    subst h‚ÇÅ h‚ÇÇ
    simp [w]

/-- A refinement data of a pre-`1`-hypercover `{U·µ¢} is a pre-`0`-hypercover for every `U·µ¢`
and coverings of the intersections. -/
structure Refinement' (E : PreOneHypercover.{w} S) where
  cover (i : E.I‚ÇÄ) : PreOneHypercover.{w} (E.X i)
  I {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) (a : (cover i).I‚ÇÄ) (b : (cover j).I‚ÇÄ) : Type w
  Z {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) : C
  s {i : E.I‚ÇÄ} {a b : (cover i).I‚ÇÄ} (c : (cover i).I‚ÇÅ a b) : E.I‚ÇÅ i i
  p {i : E.I‚ÇÄ} {a b : (cover i).I‚ÇÄ} (c : (cover i).I‚ÇÅ a b) : (cover i).Y c ‚ü∂ E.Y (s c)
  --p {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) :
  --  Z k l ‚ü∂ E.Y k
  q‚ÇÅ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) :
    Z k l ‚ü∂ (cover i).X a
  q‚ÇÇ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) :
    Z k l ‚ü∂ (cover j).X b
  w {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) :
    q‚ÇÅ k l ‚â´ (cover _).f _ ‚â´ E.f _ = q‚ÇÇ k l ‚â´ (cover _).f _ ‚â´ E.f _
  --w_self {i : E.I‚ÇÄ} (k : E.I‚ÇÅ i i) {a : (cover i).I‚ÇÄ} {b : (cover i).I‚ÇÄ} (l : I k a b) :
  --  q‚ÇÅ k l ‚â´ (cover _).f _ = q‚ÇÇ k l ‚â´ (cover _).f _
  --w‚ÇÅ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) :
  --  p k l ‚â´ E.p‚ÇÅ k = q‚ÇÅ k l ‚â´ (cover i).f a
  --w‚ÇÇ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) :
  --  p k l ‚â´ E.p‚ÇÇ k = q‚ÇÇ k l ‚â´ (cover j).f b

namespace Refinement'

attribute [reassoc (attr := grind _=_)] w

variable {E : PreOneHypercover.{w} S}

@[simps!]
def bind (R : E.Refinement') :
    PreOneHypercover.{w} S :=
  .mk' (E.toPreZeroHypercover.bind (fun i ‚Ü¶ (R.cover i).toPreZeroHypercover))
    ((Œ£ (i : E.I‚ÇÄ) (a b : (R.cover i).I‚ÇÄ), (R.cover i).I‚ÇÅ a b) ‚äï
      Œ£ (k : E.I‚ÇÅ') (a : (R.cover k.1.1).I‚ÇÄ) (b : (R.cover k.1.2).I‚ÇÄ), R.I k.2 a b)
    (Sum.elim (fun p ‚Ü¶ (R.cover p.1).Y p.2.2.2) (fun k ‚Ü¶ R.Z _ k.2.2.2))
    (Sum.elim (fun p ‚Ü¶ ‚ü®p.1, p.2.1‚ü©) (fun k ‚Ü¶ ‚ü®k.1.1.1, k.2.1‚ü©)) 
    (Sum.elim (fun p ‚Ü¶ ‚ü®p.1, p.2.2.1‚ü©) (fun k ‚Ü¶ ‚ü®k.1.1.2, k.2.2.1‚ü©)) 
    (fun i ‚Ü¶ match i with
      | .inl ‚ü®i, a, b, l‚ü© => (R.cover _).p‚ÇÅ _
      | .inr k => R.q‚ÇÅ _ _)
    (fun i ‚Ü¶ match i with
      | .inl ‚ü®i, a, b, l‚ü© => (R.cover _).p‚ÇÇ _
      | .inr k => R.q‚ÇÇ _ _)
    (fun i ‚Ü¶ match i with
      | .inl p => by simp [reassoc_of% (R.cover p.1).w]
      | .inr k => R.w _ _)

@[simps]
def toBase (R : E.Refinement') : R.bind ‚ü∂ E where
  s‚ÇÄ i := i.1
  h‚ÇÄ i := (R.cover i.1).f i.2
  s‚ÇÅ {i j} := fun ‚ü®p, hp‚ü© ‚Ü¶ match p with
    | .inl p => by
      dsimp at hp
      rw [‚Üê hp.1, ‚Üê hp.2]
      exact R.s p.2.2.2
    | .inr k => hp.1 ‚ñ∏ hp.2 ‚ñ∏ k.1.2
  h‚ÇÅ {i j} := fun ‚ü®p, hp1, hp2‚ü© ‚Ü¶ match p with
    | .inl p => by
        dsimp at hp1 hp2 ‚ä¢
        subst hp1 hp2
        dsimp
        exact R.p _
    | .inr p => by dsimp; sorry
  w‚ÇÄ _ := sorry
  w‚ÇÅ‚ÇÅ _ := sorry
  w‚ÇÅ‚ÇÇ _ := sorry

attribute [local grind =] Category.assoc Category.id_comp

end Refinement'

/-- A refinement data of a pre-`1`-hypercover `{U·µ¢} is a pre-`0`-hypercover for every `U·µ¢`
and coverings of the intersections. -/
structure Refinement (E : PreOneHypercover.{w} S) where
  cover (i : E.I‚ÇÄ) : PreZeroHypercover.{w} (E.X i)
  I {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) (a : (cover i).I‚ÇÄ) (b : (cover j).I‚ÇÄ) : Type w
  Z {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) : C
  p {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) :
    Z k l ‚ü∂ E.Y k
  q‚ÇÅ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) :
    Z k l ‚ü∂ (cover i).X a
  q‚ÇÇ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) :
    Z k l ‚ü∂ (cover j).X b
  w {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) :
    q‚ÇÅ k l ‚â´ (cover _).f _ ‚â´ E.f _ = q‚ÇÇ k l ‚â´ (cover _).f _ ‚â´ E.f _
  w_self {i : E.I‚ÇÄ} (k : E.I‚ÇÅ i i) {a : (cover i).I‚ÇÄ} {b : (cover i).I‚ÇÄ} (l : I k a b) :
    q‚ÇÅ k l ‚â´ (cover _).f _ = q‚ÇÇ k l ‚â´ (cover _).f _
  w‚ÇÅ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) :
    p k l ‚â´ E.p‚ÇÅ k = q‚ÇÅ k l ‚â´ (cover i).f a
  w‚ÇÇ {i j : E.I‚ÇÄ} (k : E.I‚ÇÅ i j) {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} (l : I k a b) :
    p k l ‚â´ E.p‚ÇÇ k = q‚ÇÇ k l ‚â´ (cover j).f b

attribute [reassoc (attr := grind _=_)] Refinement.w Refinement.w_self Refinement.w‚ÇÅ Refinement.w‚ÇÇ

namespace Refinement

variable {E : PreOneHypercover.{w} S}

@[simps! toPreZeroHypercover I‚ÇÅ Y p‚ÇÅ p‚ÇÇ]
def cover‚ÇÅ (R : E.Refinement) (i : E.I‚ÇÄ) : PreOneHypercover.{w} (E.X i) where
  __ := R.cover i
  I‚ÇÅ a b := Œ£ (k : E.I‚ÇÅ i i), R.I k a b
  Y _ _ p := R.Z p.1 p.2
  p‚ÇÅ _ _ _ := R.q‚ÇÅ _ _
  p‚ÇÇ _ _ _ := R.q‚ÇÇ _ _
  w _ _ _ := R.w_self _ _

@[simps!]
def bind (R : E.Refinement) : PreOneHypercover.{w} S where
  __ := E.toPreZeroHypercover.bind
    fun i ‚Ü¶ (R.cover i)
  I‚ÇÅ i j := Œ£ (k : E.I‚ÇÅ i.1 j.1), R.I k i.2 j.2
  Y _ _ p := R.Z p.1 p.2
  p‚ÇÅ _ _ p := R.q‚ÇÅ p.1 p.2
  p‚ÇÇ _ _ p := R.q‚ÇÇ p.1 p.2
  w _ _ p := R.w p.1 p.2

-- TODO: move this close to PreZeroHypercover.bind
lemma presieve‚ÇÄ_bind (R : E.Refinement) :
    R.bind.presieve‚ÇÄ = Presieve.bindOfArrows E.X E.f fun i ‚Ü¶ (R.cover i).presieve‚ÇÄ := by
  refine le_antisymm ?_ ?_
  ¬∑ intro X f ‚ü®i‚ü©
    exact Presieve.bindOfArrows.mk i.1 _ ‚ü®i.2‚ü©
  ¬∑ rintro X f ‚ü®i, g, ‚ü®j‚ü©‚ü©
    exact .mk (Sigma.mk _ _)

def sieve‚ÇÅ (R : E.Refinement) {i j : E.I‚ÇÄ} {a : (R.cover i).I‚ÇÄ} {b : (R.cover j).I‚ÇÄ} {W : C}
    (v‚ÇÅ : W ‚ü∂ (R.cover i).X a) (v‚ÇÇ : W ‚ü∂ (R.cover j).X b) : Sieve W :=
  R.bind.sieve‚ÇÅ (W := W) (i‚ÇÅ := ‚ü®i, a‚ü©) (i‚ÇÇ := ‚ü®j, b‚ü©) v‚ÇÅ v‚ÇÇ

@[simps]
def toBase (R : E.Refinement) : R.bind ‚ü∂ E where
  s‚ÇÄ i := i.1
  h‚ÇÄ i := (R.cover i.1).f i.2
  s‚ÇÅ p := p.1
  h‚ÇÅ p := R.p p.1 p.2
  w‚ÇÄ _ := rfl
  w‚ÇÅ‚ÇÅ _ := R.w‚ÇÅ _ _
  w‚ÇÅ‚ÇÇ _ := R.w‚ÇÇ _ _

attribute [local grind =] Category.assoc Category.id_comp

@[simps]
noncomputable
def homPullback‚ÇÅ [HasPullbacks C] (R : E.Refinement) (i : E.I‚ÇÄ) :
    R.cover‚ÇÅ i ‚ü∂ R.bind.pullback‚ÇÅ (E.f i) where
  s‚ÇÄ a := ‚ü®i, a‚ü©
  h‚ÇÄ a := pullback.lift ((R.cover i).f a) (ùüô _)
  s‚ÇÅ := id
  h‚ÇÅ {a b} p := pullback.lift (R.p _ _ ‚â´ E.p‚ÇÅ _) (ùüô _) <| by simp [w_self_assoc, w‚ÇÅ_assoc]
  w‚ÇÅ‚ÇÅ {a b} p := by apply pullback.hom_ext <;> simp [w‚ÇÅ, w_self]
  w‚ÇÅ‚ÇÇ {a b} p := by apply pullback.hom_ext <;> simp [w‚ÇÅ, w_self]

end Refinement

end PreOneHypercover

namespace GrothendieckTopology

variable (J : GrothendieckTopology C)

/-- The type of `1`-hypercovers of an object `S : C` in a category equipped with a
Grothendieck topology `J`. This can be constructed from a covering of `S` and
a covering of the fibre products of the objects in this covering (see `OneHypercover.mk'`). -/
structure OneHypercover (S : C) extends PreOneHypercover.{w} S where
  mem‚ÇÄ : toPreOneHypercover.sieve‚ÇÄ ‚àà J S
  mem‚ÇÅ (i‚ÇÅ i‚ÇÇ : I‚ÇÄ) ‚¶ÉW : C‚¶Ñ (p‚ÇÅ : W ‚ü∂ X i‚ÇÅ) (p‚ÇÇ : W ‚ü∂ X i‚ÇÇ) (w : p‚ÇÅ ‚â´ f i‚ÇÅ = p‚ÇÇ ‚â´ f i‚ÇÇ) :
    toPreOneHypercover.sieve‚ÇÅ p‚ÇÅ p‚ÇÇ ‚àà J W

variable {J}

lemma OneHypercover.mem_sieve‚ÇÅ' {S : C} (E : J.OneHypercover S)
    (i‚ÇÅ i‚ÇÇ : E.I‚ÇÄ) [HasPullback (E.f i‚ÇÅ) (E.f i‚ÇÇ)] :
    E.sieve‚ÇÅ' i‚ÇÅ i‚ÇÇ ‚àà J _ := by
  rw [E.sieve‚ÇÅ'_eq_sieve‚ÇÅ]
  exact mem‚ÇÅ _ _ _ _ _ pullback.condition

namespace OneHypercover

/-- In order to check that a certain data is a `1`-hypercover of `S`, it suffices to
check that the data provides a covering of `S` and of the fibre products. -/
@[simps toPreOneHypercover]
def mk' {S : C} (E : PreOneHypercover S) [E.HasPullbacks]
    (mem‚ÇÄ : E.sieve‚ÇÄ ‚àà J S) (mem‚ÇÅ' : ‚àÄ (i‚ÇÅ i‚ÇÇ : E.I‚ÇÄ), E.sieve‚ÇÅ' i‚ÇÅ i‚ÇÇ ‚àà J _) :
    J.OneHypercover S where
  toPreOneHypercover := E
  mem‚ÇÄ := mem‚ÇÄ
  mem‚ÇÅ i‚ÇÅ i‚ÇÇ W p‚ÇÅ p‚ÇÇ w := by
    rw [E.sieve‚ÇÅ_eq_pullback_sieve‚ÇÅ' _ _ w]
    exact J.pullback_stable' _ (mem‚ÇÅ' i‚ÇÅ i‚ÇÇ)

section

variable {S : C} (E : J.OneHypercover S) (F : Sheaf J A)

section

variable {E F}
variable (c : Multifork (E.multicospanIndex F.val))

/-- Auxiliary definition of `isLimitMultifork`. -/
noncomputable def multiforkLift : c.pt ‚ü∂ F.val.obj (Opposite.op S) :=
  F.cond.amalgamateOfArrows _ E.mem‚ÇÄ c.Œπ (fun W i‚ÇÅ i‚ÇÇ p‚ÇÅ p‚ÇÇ w => by
    apply F.cond.hom_ext ‚ü®_, E.mem‚ÇÅ _ _ _ _ w‚ü©
    rintro ‚ü®T, g, j, h, fac‚ÇÅ, fac‚ÇÇ‚ü©
    dsimp
    simp only [assoc, ‚Üê Functor.map_comp, ‚Üê op_comp, fac‚ÇÅ, fac‚ÇÇ]
    simp only [op_comp, Functor.map_comp]
    simpa using c.condition ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, j‚ü© =‚â´ F.val.map h.op)

@[reassoc]
lemma multiforkLift_map (i‚ÇÄ : E.I‚ÇÄ) : multiforkLift c ‚â´ F.val.map (E.f i‚ÇÄ).op = c.Œπ i‚ÇÄ := by
  simp [multiforkLift]

end

/-- If `E : J.OneHypercover S` and `F : Sheaf J A`, then `F.obj (op S)` is
a multiequalizer of suitable maps `F.obj (op (E.X i)) ‚ü∂ F.obj (op (E.Y j))`
induced by `E.p‚ÇÅ j` and `E.p‚ÇÇ j`. -/
noncomputable def isLimitMultifork : IsLimit (E.multifork F.1) :=
  Multifork.IsLimit.mk _ (fun c => multiforkLift c) (fun c => multiforkLift_map c) (by
    intro c m hm
    apply F.cond.hom_ext_ofArrows _ E.mem‚ÇÄ
    intro i‚ÇÄ
    dsimp only
    rw [multiforkLift_map]
    exact hm i‚ÇÄ)

end

section Category

variable {S : C} {E : OneHypercover.{w} J S} {F : OneHypercover.{w'} J S}

/-- A morphism of `1`-hypercovers is a morphism of the underlying pre-`1`-hypercovers. -/
abbrev Hom (E : OneHypercover.{w} J S) (F : OneHypercover.{w'} J S) :=
  E.toPreOneHypercover.Hom F.toPreOneHypercover

variable [HasPullbacks C]

/-- Given two refinement morphism `f, g : E ‚ü∂ F`, this is a `1`-hypercover `W` that
admits a morphism `h : W ‚ü∂ E` such that `h ‚â´ f` and `h ‚â´ g` are homotopic. Hence
they become equal after quotienting out by homotopy. -/
@[simps! toPreOneHypercover]
noncomputable def cylinder (f g : E.Hom F) : J.OneHypercover S :=
  mk' (PreOneHypercover.cylinder f g)
    (by
      rw [PreOneHypercover.sieve‚ÇÄ_cylinder]
      refine J.bindOfArrows E.mem‚ÇÄ fun i ‚Ü¶ ?_
      rw [Sieve.generate_sieve]
      exact J.pullback_stable _ (mem_sieve‚ÇÅ' F _ _))
    (fun i j ‚Ü¶ by
      rw [PreOneHypercover.sieve‚ÇÅ'_cylinder]
      exact J.pullback_stable _ (mem_sieve‚ÇÅ' E _ _))

/-- Up to homotopy, the category of `1`-hypercovers is cofiltered. -/
lemma exists_nonempty_homotopy (f g : E.Hom F) :
    ‚àÉ (W : OneHypercover.{max w w'} J S) (h : W.Hom E),
      Nonempty (PreOneHypercover.Homotopy (h.comp f) (h.comp g)) :=
  ‚ü®cylinder f g, PreOneHypercover.cylinderHom f g, ‚ü®PreOneHypercover.cylinderHomotopy f g‚ü©‚ü©

end Category

@[simps! toPreOneHypercover]
noncomputable
def pullback‚ÇÅ {S T : C} (f : T ‚ü∂ S) (E : J.OneHypercover S) [‚àÄ (i : E.I‚ÇÄ), HasPullback f (E.f i)]
    [‚àÄ (i j : E.I‚ÇÄ) (k : E.I‚ÇÅ i j), HasPullback f (E.p‚ÇÅ k ‚â´ E.f i)] :
    J.OneHypercover T where
  __ := E.toPreOneHypercover.pullback‚ÇÅ f
  mem‚ÇÄ := by
    simp only [PreOneHypercover.pullback‚ÇÅ_toPreZeroHypercover, PreZeroHypercover.sieve‚ÇÄ_pullback‚ÇÅ]
    exact J.pullback_stable _ E.mem‚ÇÄ
  mem‚ÇÅ i‚ÇÅ i‚ÇÇ W p‚ÇÅ p‚ÇÇ h := by
    simp only [PreOneHypercover.pullback‚ÇÅ_toPreZeroHypercover, PreZeroHypercover.pullback‚ÇÅ_X,
      PreZeroHypercover.pullback‚ÇÅ_f] at h
    rw [PreOneHypercover.sieve‚ÇÅ_pullback‚ÇÅ _ _ _ _ h]
    apply E.mem‚ÇÅ
    rw [Category.assoc, Category.assoc, ‚Üê pullback.condition, ‚Üê pullback.condition, reassoc_of% h]

variable {S : C}

structure Refinement (E : OneHypercover.{w} J S) extends E.toPreOneHypercover.Refinement where
  mem‚ÇÄ (i : E.I‚ÇÄ) : (cover i).sieve‚ÇÄ ‚àà J (E.X i)
  mem‚ÇÅ {i j : E.I‚ÇÄ} {a : (cover i).I‚ÇÄ} {b : (cover j).I‚ÇÄ} {W : C} (v‚ÇÅ : W ‚ü∂ (cover i).X a)
    (v‚ÇÇ : W ‚ü∂ (cover j).X b) (h : v‚ÇÅ ‚â´ (cover i).f _ ‚â´ E.f _ = v‚ÇÇ ‚â´ (cover j).f _ ‚â´ E.f _) :
    toRefinement.sieve‚ÇÅ v‚ÇÅ v‚ÇÇ ‚àà J W

namespace Refinement

variable {E : OneHypercover.{w} J S}

@[simps toPreOneHypercover]
def cover‚ÇÅ (R : E.Refinement) (i : E.I‚ÇÄ) : J.OneHypercover (E.X i) where
  __ := R.toRefinement.cover‚ÇÅ i
  mem‚ÇÄ := R.mem‚ÇÄ i
  mem‚ÇÅ i‚ÇÅ i‚ÇÇ W v‚ÇÅ v‚ÇÇ hv‚ÇÅ‚ÇÇ := by
    apply R.mem‚ÇÅ
    simp only [PreOneHypercover.Refinement.cover‚ÇÅ_toPreZeroHypercover] at hv‚ÇÅ‚ÇÇ
    rw [reassoc_of% hv‚ÇÅ‚ÇÇ]

@[simps toPreOneHypercover]
def bind (R : E.Refinement) : J.OneHypercover S where
  __ := R.toRefinement.bind
  mem‚ÇÄ := by
    rw [PreZeroHypercover.sieve‚ÇÄ, Sieve.ofArrows, ‚Üê PreZeroHypercover.presieve‚ÇÄ,
      PreOneHypercover.Refinement.presieve‚ÇÄ_bind]
    exact J.bindOfArrows E.mem‚ÇÄ R.mem‚ÇÄ
  mem‚ÇÅ i‚ÇÅ i‚ÇÇ W v‚ÇÅ v‚ÇÇ hv‚ÇÅ‚ÇÇ := R.mem‚ÇÅ v‚ÇÅ v‚ÇÇ hv‚ÇÅ‚ÇÇ

end Refinement

lemma _root_.CategoryTheory.GrothendieckTopology.ofArrows_sumElim_mem
    {Œ± Œ≤ : Type*} {X : Œ± ‚Üí C} {Y : Œ≤ ‚Üí C} (f : ‚àÄ a, X a ‚ü∂ S) (g : ‚àÄ b, Y b ‚ü∂ S)
    (hf : Sieve.ofArrows X f ‚àà J S) :
    Sieve.ofArrows (Sum.elim X Y) (fun i ‚Ü¶ match i with | .inl a => f a | .inr b => g b) ‚àà J S := by
  let p (i : Œ± ‚äï Œ≤) : Sum.elim X Y i ‚ü∂ S := match i with
    | .inl a => f a
    | .inr b => g b
  have : Sieve.ofArrows _ f ‚â§ Sieve.ofArrows _ p := by
    rw [Sieve.ofArrows, Sieve.generate_le_iff]
    rintro W w ‚ü®i‚ü©
    rw [Sieve.ofArrows]
    apply Sieve.le_generate
    exact ‚ü®Sum.inl i‚ü©
  exact superset_covering J this hf

noncomputable
nonrec def sum
    [HasPullbacks C] -- TODO: remove this after updating mathlib
    (E : OneHypercover.{w} J S) (F : OneHypercover.{w} J S)
    [‚àÄ i j, HasPullback (E.f i) (F.f j)]
    (G : ‚àÄ (i : E.I‚ÇÄ) (j : F.I‚ÇÄ), Coverage.ZeroHypercover.{w} (.ofGrothendieck _ J)
      (Limits.pullback (E.f i) (F.f j))) :
    OneHypercover J S where
  __ := E.toPreOneHypercover.sum F.toPreOneHypercover (fun i j ‚Ü¶ (G i j).toPreZeroHypercover)
  mem‚ÇÄ := by
    simp only [PreZeroHypercover.sieve‚ÇÄ, PreOneHypercover.sum]
    convert J.ofArrows_sumElim_mem E.f F.f E.mem‚ÇÄ
    grind
  mem‚ÇÅ
    | .inl i, .inl j, W, p‚ÇÅ, p‚ÇÇ, h => E.mem‚ÇÅ i j p‚ÇÅ p‚ÇÇ h
    | .inr i, .inr j, W, p‚ÇÅ, p‚ÇÇ, h => F.mem‚ÇÅ i j p‚ÇÅ p‚ÇÇ h
    | .inl i, .inr j, W, p‚ÇÅ, p‚ÇÇ, h => by
      have : HasPullback
          ((E.sum F.toPreOneHypercover (fun i j ‚Ü¶ (G i j).toPreZeroHypercover)).f (Sum.inl i))
          ((E.sum F.toPreOneHypercover (fun i j ‚Ü¶ (G i j).toPreZeroHypercover)).f (Sum.inr j)) :=
        inferInstanceAs <| HasPullback (E.f i) (F.f j)
      rw [PreOneHypercover.sieve‚ÇÅ_eq_pullback_sieve‚ÇÅ' _ _ _ h]
      apply J.pullback_stable
      rw [PreOneHypercover.sieve‚ÇÅ']
      rw [Sieve.ofArrows]
      rw [‚Üê Coverage.ofGrothendieck_iff]
      -- have : J = Coverage.toGrothendieck _ (Coverage.ofGrothendieck _ J) := sorry
      have := (G i j).mem‚ÇÄ
      rw [PreZeroHypercover.presieve‚ÇÄ] at this
      simp only [PreOneHypercover.sum_X, Sum.elim_inl, Sum.elim_inr, PreOneHypercover.sum_f,
        PreOneHypercover.sum_I‚ÇÅ]
      convert this using 2
      ext k <;> simp [PreOneHypercover.toPullback]
    | .inr j, .inl i, W, p‚ÇÅ, p‚ÇÇ, h => by
      have : HasPullback
          ((E.sum F.toPreOneHypercover (fun i j ‚Ü¶ (G i j).toPreZeroHypercover)).f (Sum.inr j))
          ((E.sum F.toPreOneHypercover (fun i j ‚Ü¶ (G i j).toPreZeroHypercover)).f (Sum.inl i)) :=
        --inferInstanceAs <| HasPullback (E.f j) (F.f i)
        sorry
      rw [PreOneHypercover.sieve‚ÇÅ_eq_pullback_sieve‚ÇÅ' _ _ _ h]
      apply J.pullback_stable
      dsimp
      rw [‚Üê pullback_mem_iff_of_isIso (i := (pullbackSymmetry _ _).hom)]
      rw [PreOneHypercover.sieve‚ÇÅ']
      rw [Sieve.ofArrows]
      rw [‚Üê Sieve.pullbackArrows_comm]
      rw [‚Üê Coverage.ofGrothendieck_iff]
      -- have : J = Coverage.toGrothendieck _ (Coverage.ofGrothendieck _ J) := sorry
      have := (G i j).mem‚ÇÄ
      rw [PreZeroHypercover.presieve‚ÇÄ] at this
      simp only [PreOneHypercover.sum_X, Sum.elim_inl, Sum.elim_inr, PreOneHypercover.sum_f,
        PreOneHypercover.sum_I‚ÇÅ]
      rw [‚Üê Presieve.ofArrows_pullback]
      convert this using 1
      --ext k <;> simp [PreOneHypercover.toPullback]
      sorry

@[simps! id_s‚ÇÄ id_s‚ÇÅ id_h‚ÇÄ id_h‚ÇÅ comp_s‚ÇÄ comp_s‚ÇÅ comp_h‚ÇÄ comp_h‚ÇÅ]
instance : Category (J.OneHypercover S) where
  Hom := Hom
  id E := PreOneHypercover.Hom.id E.toPreOneHypercover
  comp f g := f.comp g

@[simps]
def isoMk {E F : J.OneHypercover S} (f : E.toPreOneHypercover ‚âÖ F.toPreOneHypercover) :
    E ‚âÖ F where
  __ := f

variable (J) in
@[simps]
noncomputable
def pullback [HasPullbacks C] {T : C} (f : S ‚ü∂ T) : J.OneHypercover T ‚•§ J.OneHypercover S where
  obj E := E.pullback‚ÇÅ f
  map g := g.pullback‚ÇÅ f
  map_id _ := PreOneHypercover.Hom.pullback‚ÇÅ_id f
  map_comp _ _ := PreOneHypercover.Hom.pullback‚ÇÅ_comp f _ _

variable (J) in
@[simps!]
noncomputable
def pullbackId [HasPullbacks C] (S : C) : pullback J (ùüô S) ‚âÖ ùü≠ _ :=
  NatIso.ofComponents (fun E ‚Ü¶ isoMk E.pullback‚ÇÅId) fun {X Y} f ‚Ü¶
    PreOneHypercover.Hom.ext'' (by rfl) (by simp) (by simp) (by simp)

variable (J) in
@[simps!]
noncomputable
def pullbackComp [HasPullbacks C] {S T W : C} (f : S ‚ü∂ T) (g : T ‚ü∂ W) :
    pullback J (f ‚â´ g) ‚âÖ pullback J g ‚ãô pullback J f :=
  NatIso.ofComponents (fun E ‚Ü¶ isoMk (E.pullback‚ÇÅComp f g)) fun {X Y} f ‚Ü¶ by
    apply PreOneHypercover.Hom.ext'' (by rfl)
    ¬∑ intros
      apply pullback.hom_ext
      ¬∑ simp
      ¬∑ apply pullback.hom_ext <;> simp
    ¬∑ intros
      apply pullback.hom_ext
      ¬∑ simp
      ¬∑ apply pullback.hom_ext <;> simp
    ¬∑ simp

end OneHypercover

namespace Cover

variable {X : C} (S : J.Cover X)

/-- The tautological 1-pre-hypercover induced by `S : J.Cover X`. Its index type `I‚ÇÄ`
is given by `S.Arrow` (i.e. all the morphisms in the sieve `S`), while `I‚ÇÅ` is given
by all possible pullback cones. -/
@[simps]
def preOneHypercover : PreOneHypercover.{max u v} X where
  I‚ÇÄ := S.Arrow
  X f := f.Y
  f f := f.f
  I‚ÇÅ f‚ÇÅ f‚ÇÇ := f‚ÇÅ.Relation f‚ÇÇ
  Y _ _ r := r.Z
  p‚ÇÅ _ _ r := r.g‚ÇÅ
  p‚ÇÇ _ _ r := r.g‚ÇÇ
  w _ _ r := r.w

@[simp]
lemma preOneHypercover_sieve‚ÇÄ : S.preOneHypercover.sieve‚ÇÄ = S.1 := by
  ext Y f
  constructor
  ¬∑ rintro ‚ü®_, _, _, ‚ü®g‚ü©, rfl‚ü©
    exact S.1.downward_closed g.hf _
  ¬∑ intro hf
    exact Sieve.ofArrows_mk _ _ ({ hf := hf, .. } : S.Arrow)

lemma preOneHypercover_sieve‚ÇÅ (f‚ÇÅ f‚ÇÇ : S.Arrow) {W : C} (p‚ÇÅ : W ‚ü∂ f‚ÇÅ.Y) (p‚ÇÇ : W ‚ü∂ f‚ÇÇ.Y)
    (w : p‚ÇÅ ‚â´ f‚ÇÅ.f = p‚ÇÇ ‚â´ f‚ÇÇ.f) :
    S.preOneHypercover.sieve‚ÇÅ p‚ÇÅ p‚ÇÇ = ‚ä§ := by
  ext Y f
  simp only [Sieve.top_apply, iff_true]
  exact ‚ü®{ w := w, .. }, f, rfl, rfl‚ü©

/-- The tautological 1-hypercover induced by `S : J.Cover X`. Its index type `I‚ÇÄ`
is given by `S.Arrow` (i.e. all the morphisms in the sieve `S`), while `I‚ÇÅ` is given
by all possible pullback cones. -/
@[simps toPreOneHypercover]
def oneHypercover : J.OneHypercover X where
  toPreOneHypercover := S.preOneHypercover
  mem‚ÇÄ := by simp
  mem‚ÇÅ f‚ÇÅ f‚ÇÇ _ p‚ÇÅ p‚ÇÇ w := by simp [S.preOneHypercover_sieve‚ÇÅ f‚ÇÅ f‚ÇÇ p‚ÇÅ p‚ÇÇ w]

end Cover

end GrothendieckTopology

end CategoryTheory
