/-
Copyright (c) 2024 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.CategoryTheory.Galois.Basic

/-!
# Decomposition of objects into connected components and applications

We show that in a Galois category every object is the (finite) coproduct of connected subobjects.
This has many useful corollaries, in particular that the fiber of every object
is represented by a Galois object (TODO).

## Main results

* `has_decomp_connected_components`: Every object is the sum of its (finitely many) connected
  components.
* `fiber_in_connected_component`: An element of the fiber of `X` lies in the fiber of some
  connected component.
* `connected_component_unique`: Up to isomorphism, for each element `x` in the fiber of `X` there
  is only one connected component whose fiber contains `x`.

-/

universe u‚ÇÅ u‚ÇÇ w

namespace CategoryTheory

open Limits Functor

variable {C : Type u‚ÇÅ} [Category.{u‚ÇÇ} C]

namespace Cofan

variable {Œπ‚ÇÅ Œπ‚ÇÇ : Type} {X X‚ÇÅ X‚ÇÇ : C} (v‚ÇÅ : X‚ÇÅ ‚ü∂ X) (v‚ÇÇ : X‚ÇÇ ‚ü∂ X)
    (f‚ÇÅ : Œπ‚ÇÅ ‚Üí C) (f‚ÇÇ : Œπ‚ÇÇ ‚Üí C) (g‚ÇÅ : (i : Œπ‚ÇÅ) ‚Üí (f‚ÇÅ i) ‚ü∂ X‚ÇÅ) (g‚ÇÇ : (i : Œπ‚ÇÇ) ‚Üí (f‚ÇÇ i) ‚ü∂ X‚ÇÇ)
    (h‚ÇÅ : IsColimit (Cofan.mk X‚ÇÅ g‚ÇÅ)) (h‚ÇÇ : IsColimit (Cofan.mk X‚ÇÇ g‚ÇÇ))
    (h : IsColimit (BinaryCofan.mk v‚ÇÅ v‚ÇÇ))

@[simp]
abbrev combPairG : (i : Œπ‚ÇÅ ‚äï Œπ‚ÇÇ) ‚Üí Sum.elim f‚ÇÅ f‚ÇÇ i ‚ü∂ X
  | .inl a => g‚ÇÅ a ‚â´ v‚ÇÅ
  | .inr a => g‚ÇÇ a ‚â´ v‚ÇÇ

def combPairIsColimit : IsColimit (Cofan.mk X (combPairG v‚ÇÅ v‚ÇÇ f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ)) :=
  mkCofanColimit _
    (fun s ‚Ü¶ Cofan.IsColimit.desc h <| fun i ‚Ü¶ by
      cases i
      ¬∑ exact Cofan.IsColimit.desc h‚ÇÅ (fun a ‚Ü¶ s.inj (.inl a))
      ¬∑ exact Cofan.IsColimit.desc h‚ÇÇ (fun a ‚Ü¶ s.inj (.inr a)))
    (fun s w ‚Ü¶ by
      simp only [cofan_mk_inj, combPairG]
      cases w
      ¬∑ have h1 : v‚ÇÅ = Cofan.inj (BinaryCofan.mk v‚ÇÅ v‚ÇÇ) .left := rfl
        simp only [h1, ‚Üê cofan_mk_inj X‚ÇÅ g‚ÇÅ, Category.assoc, Cofan.IsColimit.fac]
      ¬∑ have h1 : v‚ÇÇ = Cofan.inj (BinaryCofan.mk v‚ÇÅ v‚ÇÇ) .right := rfl
        simp only [h1, ‚Üê cofan_mk_inj X‚ÇÇ g‚ÇÇ, Category.assoc, Cofan.IsColimit.fac])
    (fun s m hm ‚Ü¶ Cofan.IsColimit.hom_ext h _ _ <| fun w ‚Ü¶ by
      cases w
      ¬∑ refine Cofan.IsColimit.hom_ext h‚ÇÅ _ _ (fun a ‚Ü¶ ?_)
        simp only [‚Üê hm, Cofan.IsColimit.fac, cofan_mk_inj]
        rw [‚Üê cofan_mk_inj X‚ÇÅ g‚ÇÅ a, Cofan.IsColimit.fac, combPairG, Category.assoc]; rfl
      ¬∑ refine Cofan.IsColimit.hom_ext h‚ÇÇ _ _ (fun a ‚Ü¶ ?_)
        simp only [‚Üê hm, Cofan.IsColimit.fac, cofan_mk_inj, Category.assoc]
        rw [‚Üê cofan_mk_inj X‚ÇÇ g‚ÇÇ a, Cofan.IsColimit.fac, combPairG, Category.assoc]; rfl)

end Cofan

namespace PreGaloisCategory

variable [GaloisCategory C] (F : C ‚•§ FintypeCat.{w}) [FiberFunctor F]

/-!

To show that an object `X` of a Galois category admits a decomposition into connected objects,
we proceed by induction on the cardinality of the fiber under an arbitrary fiber functor.

If `X` is connected, there is nothing to show. If not, we can write `X` as the sum of two
non-trivial subobjects which have strictly smaller fiber and conclude by the induction hypothesis.

-/

/- The trivial case if `X` is connected. -/
private lemma has_decomp_connected_components_aux_conn (X : C) [IsConnected X] :
    ‚àÉ (Œπ : Type) (f : Œπ ‚Üí C) (g : (i : Œπ) ‚Üí (f i) ‚ü∂ X) (_ : IsColimit (Cofan.mk X g)),
    (‚àÄ i, IsConnected (f i)) ‚àß Finite Œπ := by
  refine ‚ü®Unit, fun _ ‚Ü¶ X, fun _ ‚Ü¶ ùüô X, mkCofanColimit _ (fun s ‚Ü¶ s.inj ()), ?_‚ü©
  exact ‚ü®fun _ ‚Ü¶ inferInstance, inferInstance‚ü©

/- The trivial case if `X` is initial. -/
private lemma has_decomp_connected_components_aux_initial (X : C) (h : IsInitial X) :
    ‚àÉ (Œπ : Type) (f : Œπ ‚Üí C) (g : (i : Œπ) ‚Üí (f i) ‚ü∂ X) (_ : IsColimit (Cofan.mk X g)),
    (‚àÄ i, IsConnected (f i)) ‚àß Finite Œπ := by
  refine ‚ü®Empty, fun _ ‚Ü¶ X, fun _ ‚Ü¶ ùüô X, ?_‚ü©
  use mkCofanColimit _ (fun s ‚Ü¶ IsInitial.to h s.pt) (fun s ‚Ü¶ by aesop)
    (fun s m _ ‚Ü¶ IsInitial.hom_ext h m _)
  refine ‚ü®by simp only [IsEmpty.forall_iff], inferInstance‚ü©

/- Show decomposition by inducting on `Nat.card (F.obj X)`. -/
private lemma has_decomp_connected_components_aux (n : ‚Ñï) :
    ‚àÄ (X : C), n = Nat.card (F.obj X) ‚Üí ‚àÉ (Œπ : Type) (f : Œπ ‚Üí C) (g : (i : Œπ) ‚Üí (f i) ‚ü∂ X)
    (_ : IsColimit (Cofan.mk X g)), (‚àÄ i, IsConnected (f i)) ‚àß Finite Œπ := by
  induction' n using Nat.strongRecOn with n hi
  intro X hn
  by_cases h : IsConnected X
  exact has_decomp_connected_components_aux_conn X
  by_cases nhi : (IsInitial X ‚Üí False)
  ¬∑ obtain ‚ü®Y, v, hni, hvmono, hvnoiso‚ü© :=
      has_non_trivial_subobject_of_not_isConnected_of_not_initial X h nhi
    obtain ‚ü®Z, u, ‚ü®c‚ü©‚ü© := PreGaloisCategory.monoInducesIsoOnDirectSummand v
    let t : ColimitCocone (pair Y Z) := { cocone := BinaryCofan.mk v u, isColimit := c }
    have hn1 : Nat.card (F.obj Y) < n := by
      rw [hn]
      exact ltCardFiber_of_mono_of_notIso F v hvnoiso
    have i : X ‚âÖ Y ‚®ø Z := (colimit.isoColimitCocone t).symm
    have hnn : Nat.card (F.obj X) = Nat.card (F.obj Y) + Nat.card (F.obj Z) := by
      rw [cardFiber_eq_of_iso F i]
      exact cardFiber_coprod_eq_sum F Y Z
    have hn2 : Nat.card (F.obj Z) < n := by
      rw [hn, hnn, lt_add_iff_pos_left]
      exact Nat.pos_of_ne_zero (non_zero_card_fiber_of_not_initial F Y hni)
    let ‚ü®Œπ‚ÇÅ, f‚ÇÅ, g‚ÇÅ, hc‚ÇÅ, hf‚ÇÅ, he‚ÇÅ‚ü© := hi (Nat.card (F.obj Y)) hn1 Y rfl
    let ‚ü®Œπ‚ÇÇ, f‚ÇÇ, g‚ÇÇ, hc‚ÇÇ, hf‚ÇÇ, he‚ÇÇ‚ü© := hi (Nat.card (F.obj Z)) hn2 Z rfl
    refine ‚ü®Œπ‚ÇÅ ‚äï Œπ‚ÇÇ, Sum.elim f‚ÇÅ f‚ÇÇ, Cofan.combPairG v u f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ, ?_‚ü©
    use Cofan.combPairIsColimit v u f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ hc‚ÇÅ hc‚ÇÇ c
    refine ‚ü®fun i ‚Ü¶ ?_, inferInstance‚ü©
    cases i; exact hf‚ÇÅ _; exact hf‚ÇÇ _
  ¬∑ simp at nhi
    obtain ‚ü®hi‚ü© := nhi
    exact has_decomp_connected_components_aux_initial X hi

/-- In a Galois category, every object is the sum of connected objects. -/
theorem has_decomp_connected_components (X : C) :
    ‚àÉ (Œπ : Type) (f : Œπ ‚Üí C)
    (g : (i : Œπ) ‚Üí f i ‚ü∂ X)
    (_ : IsColimit (Cofan.mk X g)),
    (‚àÄ i, IsConnected (f i)) ‚àß Finite Œπ := by
  obtain ‚ü®F, ‚ü®hf‚ü©‚ü© := @GaloisCategory.hasFiberFunctor C _ _
  exact has_decomp_connected_components_aux F (Nat.card <| F.obj X) X rfl

/-- In a Galois category, every object is the sum of connected objects. -/
theorem has_decomp_connected_components' (X : C) :
    ‚àÉ (Œπ : Type) (_ : Finite Œπ) (f : Œπ ‚Üí C) (_ : ‚àê f ‚âÖ X), ‚àÄ i, IsConnected (f i) := by
  obtain ‚ü®Œπ, f, g, hl, hc, hf‚ü© := has_decomp_connected_components X
  refine ‚ü®Œπ, hf, f, colimit.isoColimitCocone ‚ü®Cofan.mk X g, hl‚ü©, hc‚ü©

/-- Every element in the fiber of `X` lies in some connected component of `X`. -/
lemma fiber_in_connected_component (X : C) (x : F.obj X) : ‚àÉ (Y : C) (i : Y ‚ü∂ X) (y : F.obj Y),
    F.map i y = x ‚àß IsConnected Y ‚àß Mono i := by
  obtain ‚ü®Œπ, f, g, hl, hc, he‚ü© := has_decomp_connected_components X
  have : Fintype Œπ := Fintype.ofFinite Œπ
  let s : Cocone (Discrete.functor f ‚ãô F) := F.mapCocone (Cofan.mk X g)
  let s' : IsColimit s := isColimitOfPreserves F hl
  have : ‚àÉ (j : Discrete Œπ) (z : (Discrete.functor f ‚ãô F).obj j), s.Œπ.app j z = x :=
    Concrete.isColimit_exists_rep _ s' x
  obtain ‚ü®‚ü®j‚ü©, z, h‚ü© := this
  refine ‚ü®f j, g j, z, ‚ü®?_, hc j, MonoCoprod.mono_inj _ (Cofan.mk X g) hl j‚ü©‚ü©
  subst h
  simp only [mapCocone_pt, Cofan.mk_pt, mapCocone_Œπ_app, Discrete.functor_obj, Cofan.mk_Œπ_app]

/-- Up to isomorphism an element of the fiber of `X` only lies in one connected component. -/
lemma connected_component_unique {X A B : C} [IsConnected A] [IsConnected B] (a : F.obj A)
    (b : F.obj B) (i : A ‚ü∂ X) (j : B ‚ü∂ X) (h : F.map i a = F.map j b) [Mono i] [Mono j] :
    ‚àÉ (f : A ‚âÖ B), F.map f.hom a = b := by
  /- We consider the fiber product of A and B over X. This is a non-empty (because of `h`)
  subobject of `A` and `B` and hence isomorphic to `A` and `B` by connectedness. -/
  let Y : C := pullback i j
  let u : Y ‚ü∂ A := pullback.fst
  let v : Y ‚ü∂ B := pullback.snd
  let G := F ‚ãô FintypeCat.incl
  let e : F.obj Y ‚âÉ { p : F.obj A √ó F.obj B // F.map i p.1 = F.map j p.2 } :=
    fiberPullbackEquiv F i j
  let y : F.obj Y := e.symm ‚ü®(a, b), h‚ü©
  have hn : IsInitial Y ‚Üí False := not_initial_of_inhabited F y
  have : IsIso u := IsConnected.noTrivialComponent Y u hn
  have : IsIso v := IsConnected.noTrivialComponent Y v hn
  use ((asIso u).symm ‚â™‚â´ asIso v)
  have hu : G.map u y = a := by
    simp only [‚Üê PreservesPullback.iso_hom_fst G, fiberPullbackEquiv, Iso.toEquiv_comp,
      Equiv.symm_trans_apply, Iso.toEquiv_symm_fun, types_comp_apply, inv_hom_id_apply]
    rw [Types.pullbackIsoPullback_inv_fst_apply (F.map i) (F.map j)]
  have hv : G.map v y = b := by
    simp only [‚Üê PreservesPullback.iso_hom_snd G, fiberPullbackEquiv, Iso.toEquiv_comp,
      Equiv.symm_trans_apply, Iso.toEquiv_symm_fun, types_comp_apply, inv_hom_id_apply]
    rw [Types.pullbackIsoPullback_inv_snd_apply (F.map i) (F.map j)]
  rw [‚Üê hu, ‚Üê hv]
  show (F.toPrefunctor.map u ‚â´ F.toPrefunctor.map _) y = F.toPrefunctor.map v y
  simp only [‚Üê F.map_comp, Iso.trans_hom, Iso.symm_hom, asIso_inv, asIso_hom,
    IsIso.hom_inv_id_assoc]

end PreGaloisCategory

end CategoryTheory
