/-
Copyright (c) 2024 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.CategoryTheory.Galois.Prorepresentability
import Mathlib.Topology.Algebra.Group.Basic

/-!

# Topology of fundamental group

In this file we define a natural topology on the automorphism group of a functor
`F : C ‚•§ FintypeCat`: It is defined as the subspace topology induced by the natural
embedding of `Aut F` into `‚àÄ X, Aut (F.obj X)` where
`Aut (F.obj X)` carries the discrete topology.

## References

- Stacks Project: Tag 0BMQ

-/

open Topology

universe u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ v w

namespace CategoryTheory

namespace PreGaloisCategory

open Functor

variable {C : Type u‚ÇÅ} [Category.{u‚ÇÇ} C] (F : C ‚•§ FintypeCat.{w})

/-- For a functor `F : C ‚•§ FintypeCat`, the canonical embedding of `Aut F` into
the product over `Aut (F.obj X)` for all objects `X`. -/
def autEmbedding : Aut F ‚Üí* ‚àÄ X, Aut (F.obj X) :=
  MonoidHom.mk' (fun œÉ X ‚Ü¶ œÉ.app X) (fun _ _ ‚Ü¶ rfl)

@[simp]
lemma autEmbedding_apply (œÉ : Aut F) (X : C) : autEmbedding F œÉ X = œÉ.app X :=
  rfl

lemma autEmbedding_injective : Function.Injective (autEmbedding F) := by
  intro œÉ œÑ h
  ext X x
  have : œÉ.app X = œÑ.app X := congr_fun h X
  rw [‚Üê Iso.app_hom, ‚Üê Iso.app_hom, this]

/-- We put the discrete topology on `F.obj X`. -/
scoped instance (X : C) : TopologicalSpace (F.obj X) := ‚ä•

@[scoped instance]
lemma obj_discreteTopology (X : C) : DiscreteTopology (F.obj X) := ‚ü®rfl‚ü©

/-- We put the discrete topology on `Aut (F.obj X)`. -/
scoped instance (X : C) : TopologicalSpace (Aut (F.obj X)) := ‚ä•

@[scoped instance]
lemma aut_discreteTopology (X : C) : DiscreteTopology (Aut (F.obj X)) := ‚ü®rfl‚ü©

/-- `Aut F` is equipped with the by the embedding into `‚àÄ X, Aut (F.obj X)` induced embedding. -/
instance : TopologicalSpace (Aut F) :=
  TopologicalSpace.induced (autEmbedding F) inferInstance

/-- The image of `Aut F` in `‚àÄ X, Aut (F.obj X)` are precisely the compatible families of
automorphisms. -/
lemma autEmbedding_range :
    Set.range (autEmbedding F) =
      ‚ãÇ (f : Arrow C), { a | F.map f.hom ‚â´ (a f.right).hom = (a f.left).hom ‚â´ F.map f.hom } := by
  ext a
  simp only [Set.mem_range, id_obj, Set.mem_iInter, Set.mem_setOf_eq]
  refine ‚ü®fun ‚ü®œÉ, h‚ü© i ‚Ü¶ h.symm ‚ñ∏ œÉ.hom.naturality i.hom, fun h ‚Ü¶ ?_‚ü©
  ¬∑ use NatIso.ofComponents a (fun {X Y} f ‚Ü¶ h ‚ü®X, Y, f‚ü©)
    rfl

/-- The image of `Aut F` in `‚àÄ X, Aut (F.obj X)` is closed. -/
lemma autEmbedding_range_isClosed : IsClosed (Set.range (autEmbedding F)) := by
  rw [autEmbedding_range]
  refine isClosed_iInter (fun f ‚Ü¶ isClosed_eq (X := F.obj f.left ‚Üí F.obj f.right) ?_ ?_)
  ¬∑ fun_prop
  ¬∑ fun_prop

lemma autEmbedding_isClosedEmbedding : IsClosedEmbedding (autEmbedding F) where
  eq_induced := rfl
  injective := autEmbedding_injective F
  isClosed_range := autEmbedding_range_isClosed F

@[deprecated (since := "2024-10-20")]
alias autEmbedding_closedEmbedding := autEmbedding_isClosedEmbedding

instance : CompactSpace (Aut F) := (autEmbedding_isClosedEmbedding F).compactSpace

instance : T2Space (Aut F) :=
  T2Space.of_injective_continuous (autEmbedding_injective F) continuous_induced_dom

instance : TotallyDisconnectedSpace (Aut F) :=
  (autEmbedding_isClosedEmbedding F).isEmbedding.isTotallyDisconnected_range.mp
    (isTotallyDisconnected_of_totallyDisconnectedSpace _)

instance : ContinuousMul (Aut F) :=
  (autEmbedding_isClosedEmbedding F).isInducing.continuousMul (autEmbedding F)

instance : ContinuousInv (Aut F) :=
  (autEmbedding_isClosedEmbedding F).isInducing.continuousInv fun _ ‚Ü¶ rfl

instance : TopologicalGroup (Aut F) := ‚ü®‚ü©

instance (X : C) : SMul (Aut (F.obj X)) (F.obj X) := ‚ü®fun œÉ a => œÉ.hom a‚ü©

instance (X : C) : ContinuousSMul (Aut (F.obj X)) (F.obj X) := by
  constructor
  fun_prop

instance continuousSMul_aut_fiber (X : C) : ContinuousSMul (Aut F) (F.obj X) where
  continuous_smul := by
    let g : Aut (F.obj X) √ó F.obj X ‚Üí F.obj X := fun ‚ü®œÉ, x‚ü© ‚Ü¶ œÉ.hom x
    let h (q : Aut F √ó F.obj X) : Aut (F.obj X) √ó F.obj X :=
      ‚ü®((fun p ‚Ü¶ p X) ‚àò autEmbedding F) q.1, q.2‚ü©
    show Continuous (g ‚àò h)
    fun_prop

variable [GaloisCategory C] [FiberFunctor F]

/--
If `H` is an open subset of `Aut F` such that `1 ‚àà H`, there exists a finite
set `I` of connected objects of `C` such that every `œÉ : Aut F` that induces the identity
on `F.obj X` for all `X ‚àà I` is contained in `H`. In other words: The kernel
of the evaluation map `Aut F ‚Üí* ‚àè X : I ‚Ü¶ Aut (F.obj X)` is contained in `H`.
-/
lemma exists_set_ker_evaluation_subset_of_isOpen
    {H : Set (Aut F)} (h1 : 1 ‚àà H) (h : IsOpen H) :
    ‚àÉ (I : Set C) (_ : Fintype I), (‚àÄ X ‚àà I, IsConnected X) ‚àß
      (‚àÄ œÉ : Aut F, (‚àÄ X : I, œÉ.hom.app X = ùüô (F.obj X)) ‚Üí œÉ ‚àà H) := by
  obtain ‚ü®U, hUopen, rfl‚ü© := isOpen_induced_iff.mp h
  obtain ‚ü®I, u, ho, ha‚ü© := isOpen_pi_iff.mp hUopen 1 h1
  choose fŒπ ff fc h4 h5 h6 using (fun X : I => has_decomp_connected_components X.val)
  refine ‚ü®‚ãÉ X, Set.range (ff X), Fintype.ofFinite _, ?_, ?_‚ü©
  ¬∑ rintro X ‚ü®A, ‚ü®Y, rfl‚ü©, hA2‚ü©
    obtain ‚ü®i, rfl‚ü© := hA2
    exact h5 Y i
  ¬∑ refine fun œÉ h ‚Ü¶ ha (fun X XinI ‚Ü¶ ?_)
    suffices h : autEmbedding F œÉ X = 1 by
      rw [h]
      exact (ho X XinI).right
    have h : œÉ.hom.app X = ùüô (F.obj X) := by
      have : Fintype (fŒπ ‚ü®X, XinI‚ü©) := Fintype.ofFinite _
      ext x
      obtain ‚ü®‚ü®j‚ü©, a, ha : F.map _ a = x‚ü© := Limits.FintypeCat.jointly_surjective
        (Discrete.functor (ff ‚ü®X, XinI‚ü©) ‚ãô F) _ (Limits.isColimitOfPreserves F (h4 ‚ü®X, XinI‚ü©)) x
      rw [FintypeCat.id_apply, ‚Üê ha, FunctorToFintypeCat.naturality]
      simp [h ‚ü®(ff _) j, ‚ü®Set.range (ff ‚ü®X, XinI‚ü©), ‚ü®‚ü®_, rfl‚ü©, ‚ü®j, rfl‚ü©‚ü©‚ü©‚ü©]
    exact Iso.ext h

open Limits

/-- The stabilizers of points in the fibers of Galois objects form a neighbourhood basis
of the identity in `Aut F`. -/
lemma nhds_one_has_basis_stabilizers : (nhds (1 : Aut F)).HasBasis (fun _ ‚Ü¶ True)
    (fun X : PointedGaloisObject F ‚Ü¶ MulAction.stabilizer (Aut F) X.pt) where
  mem_iff' S := by
    rw [mem_nhds_iff]
    refine ‚ü®?_, ?_‚ü©
    ¬∑ intro ‚ü®U, hU, hUopen, hUone‚ü©
      obtain ‚ü®I, _, hc, hmem‚ü© := exists_set_ker_evaluation_subset_of_isOpen F hUone hUopen
      let P : C := ‚àè·∂ú fun X : I ‚Ü¶ X.val
      obtain ‚ü®A, a, hgal, hbij‚ü© := exists_galois_representative F P
      refine ‚ü®‚ü®A, a, hgal‚ü©, trivial, ?_‚ü©
      intro t (ht : t.hom.app A a = a)
      apply hU
      apply hmem
      haveI (X : I) : IsConnected X.val := hc X.val X.property
      haveI (X : I) : Nonempty (F.obj X.val) := nonempty_fiber_of_isConnected F X
      intro X
      ext x
      simp only [FintypeCat.id_apply]
      obtain ‚ü®z, rfl‚ü© :=
        surjective_of_nonempty_fiber_of_isConnected F (Pi.œÄ (fun X : I ‚Ü¶ X.val) X) x
      obtain ‚ü®f, rfl‚ü© := hbij.surjective z
      rw [FunctorToFintypeCat.naturality, FunctorToFintypeCat.naturality, ht]
    ¬∑ intro ‚ü®X, _, h‚ü©
      exact ‚ü®MulAction.stabilizer (Aut F) X.pt, h, stabilizer_isOpen (Aut F) X.pt,
        Subgroup.one_mem _‚ü©

end PreGaloisCategory

end CategoryTheory
