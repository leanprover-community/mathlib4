/-
Copyright (c) 2017 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Kim Morrison, Johannes H√∂lzl, Reid Barton
-/
import Mathlib.CategoryTheory.Equivalence
import Mathlib.CategoryTheory.EqToHom
import Mathlib.Order.Hom.Basic
import Mathlib.Data.ULift

/-!

# Preorders as categories

We install a category instance on any preorder. This is not to be confused with the category _of_
preorders, defined in `Order.Category.Preorder`.

We show that monotone functions between preorders correspond to functors of the associated
categories.

## Main definitions

* `homOfLE` and `leOfHom` provide translations between inequalities in the preorder, and
  morphisms in the associated category.
* `Monotone.functor` is the functor associated to a monotone function.

-/


universe u v

namespace Preorder

open CategoryTheory

-- see Note [lower instance priority]
/--
The category structure coming from a preorder. There is a morphism `X ‚ü∂ Y` if and only if `X ‚â§ Y`.

Because we don't allow morphisms to live in `Prop`,
we have to define `X ‚ü∂ Y` as `ULift (PLift (X ‚â§ Y))`.
See `CategoryTheory.homOfLE` and `CategoryTheory.leOfHom`.

See <https://stacks.math.columbia.edu/tag/00D3>.
-/
instance (priority := 100) smallCategory (Œ± : Type u) [Preorder Œ±] : SmallCategory Œ± where
  Hom U V := ULift (PLift (U ‚â§ V))
  id X := ‚ü®‚ü®le_refl X‚ü©‚ü©
  comp f g := ‚ü®‚ü®le_trans _ _ _ f.down.down g.down.down‚ü©‚ü©

-- Porting note: added to ease the port of `CategoryTheory.Subobject.Basic`
instance subsingleton_hom {Œ± : Type u} [Preorder Œ±] (U V : Œ±) :
  Subsingleton (U ‚ü∂ V) := ‚ü®fun _ _ => ULift.ext _ _ (Subsingleton.elim _ _ )‚ü©

end Preorder

namespace CategoryTheory

open Opposite

variable {X : Type u} [Preorder X]

/-- Express an inequality as a morphism in the corresponding preorder category.
-/
def homOfLE {x y : X} (h : x ‚â§ y) : x ‚ü∂ y :=
  ULift.up (PLift.up h)

@[inherit_doc homOfLE]
abbrev _root_.LE.le.hom := @homOfLE

@[simp]
theorem homOfLE_refl {x : X} (h : x ‚â§ x) : h.hom = ùüô x :=
  rfl

@[simp]
theorem homOfLE_comp {x y z : X} (h : x ‚â§ y) (k : y ‚â§ z) :
    homOfLE h ‚â´ homOfLE k = homOfLE (h.trans k) :=
  rfl

/-- Extract the underlying inequality from a morphism in a preorder category.
-/
theorem leOfHom {x y : X} (h : x ‚ü∂ y) : x ‚â§ y :=
  h.down.down

@[nolint defLemma, inherit_doc leOfHom]
abbrev _root_.Quiver.Hom.le := @leOfHom

@[simp]
theorem homOfLE_leOfHom {x y : X} (h : x ‚ü∂ y) : h.le.hom = h :=
  rfl

lemma homOfLE_isIso_of_eq {x y : X} (h : x ‚â§ y) (heq : x = y) :
    IsIso (homOfLE h) :=
  ‚ü®homOfLE (le_of_eq heq.symm), by simp‚ü©

@[simp, reassoc]
lemma homOfLE_comp_eqToHom {a b c : X} (hab : a ‚â§ b) (hbc : b = c) :
    homOfLE hab ‚â´ eqToHom hbc = homOfLE (hab.trans (le_of_eq hbc)) :=
  rfl

@[simp, reassoc]
lemma eqToHom_comp_homOfLE {a b c : X} (hab : a = b) (hbc : b ‚â§ c) :
    eqToHom hab ‚â´ homOfLE hbc = homOfLE ((le_of_eq hab).trans hbc) :=
  rfl

@[simp, reassoc]
lemma homOfLE_op_comp_eqToHom {a b c : X} (hab : b ‚â§ a) (hbc : op b = op c) :
    (homOfLE hab).op ‚â´ eqToHom hbc = (homOfLE ((le_of_eq (op_injective hbc.symm)).trans hab)).op :=
  rfl

@[simp, reassoc]
lemma eqToHom_comp_homOfLE_op {a b c : X} (hab : op a = op b) (hbc : c ‚â§ b) :
    eqToHom hab ‚â´ (homOfLE hbc).op = (homOfLE (hbc.trans (le_of_eq (op_injective hab.symm)))).op :=
  rfl

/-- Construct a morphism in the opposite of a preorder category from an inequality. -/
def opHomOfLE {x y : X·µí·µñ} (h : unop x ‚â§ unop y) : y ‚ü∂ x :=
  (homOfLE h).op

theorem le_of_op_hom {x y : X·µí·µñ} (h : x ‚ü∂ y) : unop y ‚â§ unop x :=
  h.unop.le

instance uniqueToTop [OrderTop X] {x : X} : Unique (x ‚ü∂ ‚ä§) where
  default := homOfLE le_top
  uniq := fun a => by rfl

instance uniqueFromBot [OrderBot X] {x : X} : Unique (‚ä• ‚ü∂ x) where
  default := homOfLE bot_le
  uniq := fun a => by rfl

variable (X) in
/-- The equivalence of categories from the order dual of a preordered type `X`
to the opposite category of the preorder `X`. -/
@[simps]
def orderDualEquivalence : X·µí·µà ‚âå X·µí·µñ where
  functor :=
    { obj := fun x => op (OrderDual.ofDual x)
      map := fun f => (homOfLE (leOfHom f)).op }
  inverse :=
    { obj := fun x => OrderDual.toDual x.unop
      map := fun f => (homOfLE (leOfHom f.unop)) }
  unitIso := Iso.refl _
  counitIso := Iso.refl _

end CategoryTheory

section

open CategoryTheory

variable {X : Type u} {Y : Type v} [Preorder X] [Preorder Y]

/-- A monotone function between preorders induces a functor between the associated categories.
-/
def Monotone.functor {f : X ‚Üí Y} (h : Monotone f) : X ‚•§ Y where
  obj := f
  map g := CategoryTheory.homOfLE (h g.le)

@[simp]
theorem Monotone.functor_obj {f : X ‚Üí Y} (h : Monotone f) : h.functor.obj = f :=
  rfl

-- Faithfulness is automatic because preorder categories are thin
instance (f : X ‚Ü™o Y) : f.monotone.functor.Full where
  map_surjective h := ‚ü®homOfLE (f.map_rel_iff.1 h.le), rfl‚ü©

/-- The equivalence of categories `X ‚âå Y` induced by `e : X ‚âÉo Y`. -/
@[simps]
def OrderIso.equivalence (e : X ‚âÉo Y) : X ‚âå Y where
  functor := e.monotone.functor
  inverse := e.symm.monotone.functor
  unitIso := NatIso.ofComponents (fun _ ‚Ü¶ eqToIso (by simp))
  counitIso := NatIso.ofComponents (fun _ ‚Ü¶ eqToIso (by simp))

end

namespace CategoryTheory

section Preorder

variable {X : Type u} {Y : Type v} [Preorder X] [Preorder Y]

/-- A functor between preorder categories is monotone.
-/
@[mono]
theorem Functor.monotone (f : X ‚•§ Y) : Monotone f.obj := fun _ _ hxy => (f.map hxy.hom).le

end Preorder

section PartialOrder

variable {X : Type u} {Y : Type v} [PartialOrder X] [PartialOrder Y]

theorem Iso.to_eq {x y : X} (f : x ‚âÖ y) : x = y :=
  le_antisymm f.hom.le f.inv.le

/-- A categorical equivalence between partial orders is just an order isomorphism.
-/
def Equivalence.toOrderIso (e : X ‚âå Y) : X ‚âÉo Y where
  toFun := e.functor.obj
  invFun := e.inverse.obj
  left_inv a := (e.unitIso.app a).to_eq.symm
  right_inv b := (e.counitIso.app b).to_eq
  map_rel_iff' {a a'} :=
    ‚ü®fun h =>
      ((Equivalence.unit e).app a ‚â´ e.inverse.map h.hom ‚â´ (Equivalence.unitInv e).app a').le,
      fun h : a ‚â§ a' => (e.functor.map h.hom).le‚ü©

-- `@[simps]` on `Equivalence.toOrderIso` produces lemmas that fail the `simpNF` linter,
-- so we provide them by hand:
@[simp]
theorem Equivalence.toOrderIso_apply (e : X ‚âå Y) (x : X) : e.toOrderIso x = e.functor.obj x :=
  rfl

@[simp]
theorem Equivalence.toOrderIso_symm_apply (e : X ‚âå Y) (y : Y) :
    e.toOrderIso.symm y = e.inverse.obj y :=
  rfl

end PartialOrder

end CategoryTheory
