/-
Copyright (c) 2022 Kyle Miller, Adam Topaz, R√©mi Bottinelli, Junyan Xu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kyle Miller, Adam Topaz, R√©mi Bottinelli, Junyan Xu
-/
import Mathlib.CategoryTheory.Filtered.Basic
import Mathlib.Data.Set.Finite
import Mathlib.Topology.Category.TopCat.Limits.Konig
import Mathlib.Data.Set.Basic

#align_import category_theory.cofiltered_system from "leanprover-community/mathlib"@"178a32653e369dce2da68dc6b2694e385d484ef1"

/-!
# Cofiltered systems

This file deals with properties of cofiltered (and inverse) systems.

## Main definitions

Given a functor `F : J ‚•§ Type v`:

* For `j : J`, `F.eventualRange j` is the intersections of all ranges of morphisms `F.map f`
  where `f` has codomain `j`.
* `F.IsMittagLeffler` states that the functor `F` satisfies the Mittag-Leffler
  condition: the ranges of morphisms `F.map f` (with `f` having codomain `j`) stabilize.
* If `J` is cofiltered `F.toEventualRanges` is the subfunctor of `F` obtained by restriction
  to `F.eventualRange`.
* `F.toPreimages` restricts a functor to preimages of a given set in some `F.obj i`. If `J` is
  cofiltered, then it is Mittag-Leffler if `F` is, see `IsMittagLeffler.toPreimages`.

## Main statements

* `nonempty_sections_of_finite_cofiltered_system` shows that if `J` is cofiltered and each
  `F.obj j` is nonempty and finite, `F.sections` is nonempty.
* `nonempty_sections_of_finite_inverse_system` is a specialization of the above to `J` being a
   directed set (and `F : J·µí·µñ ‚•§ Type v`).
* `isMittagLeffler_of_exists_finite_range` shows that if `J` is cofiltered and for all `j`,
  there exists some `i` and `f : i ‚ü∂ j` such that the range of `F.map f` is finite, then
  `F` is Mittag-Leffler.
* `surjective_toEventualRanges` shows that if `F` is Mittag-Leffler, then `F.toEventualRanges`
  has all morphisms `F.map f` surjective.

## Todo

* Prove [Stacks: Lemma 0597](https://stacks.math.columbia.edu/tag/0597)

## References

* [Stacks: Mittag-Leffler systems](https://stacks.math.columbia.edu/tag/0594)

## Tags

Mittag-Leffler, surjective, eventual range, inverse system,

-/


universe u v w

open CategoryTheory CategoryTheory.IsCofiltered Set CategoryTheory.FunctorToTypes

section FiniteKonig

/-- This bootstraps `nonempty_sections_of_finite_inverse_system`. In this version,
the `F` functor is between categories of the same universe, and it is an easy
corollary to `TopCat.nonempty_limitCone_of_compact_t2_cofiltered_system`. -/
theorem nonempty_sections_of_finite_cofiltered_system.init {J : Type u} [SmallCategory J]
    [IsCofilteredOrEmpty J] (F : J ‚•§ Type u) [hf : ‚àÄ j, Finite (F.obj j)]
    [hne : ‚àÄ j, Nonempty (F.obj j)] : F.sections.Nonempty := by
  let F' : J ‚•§ TopCat := F ‚ãô TopCat.discrete
  haveI : ‚àÄ j, DiscreteTopology (F'.obj j) := fun _ => ‚ü®rfl‚ü©
  haveI : ‚àÄ j, Finite (F'.obj j) := hf
  haveI : ‚àÄ j, Nonempty (F'.obj j) := hne
  obtain ‚ü®‚ü®u, hu‚ü©‚ü© := TopCat.nonempty_limitCone_of_compact_t2_cofiltered_system.{u} F'
  exact ‚ü®u, hu‚ü©
#align nonempty_sections_of_finite_cofiltered_system.init nonempty_sections_of_finite_cofiltered_system.init

/-- The cofiltered limit of nonempty finite types is nonempty.

See `nonempty_sections_of_finite_inverse_system` for a specialization to inverse limits. -/
theorem nonempty_sections_of_finite_cofiltered_system {J : Type u} [Category.{w} J]
    [IsCofilteredOrEmpty J] (F : J ‚•§ Type v) [‚àÄ j : J, Finite (F.obj j)]
    [‚àÄ j : J, Nonempty (F.obj j)] : F.sections.Nonempty := by
  -- Step 1: lift everything to the `max u v w` universe.
  let J' : Type max w v u := AsSmall.{max w v} J
  let down : J' ‚•§ J := AsSmall.down
  let F' : J' ‚•§ Type max u v w := down ‚ãô F ‚ãô uliftFunctor.{max u w, v}
  haveI : ‚àÄ i, Nonempty (F'.obj i) := fun i => ‚ü®‚ü®Classical.arbitrary (F.obj (down.obj i))‚ü©‚ü©
  haveI : ‚àÄ i, Finite (F'.obj i) := fun i => Finite.of_equiv (F.obj (down.obj i)) Equiv.ulift.symm
  -- Step 2: apply the bootstrap theorem
  cases isEmpty_or_nonempty J
  ¬∑ fconstructor <;> apply isEmptyElim
  haveI : IsCofiltered J := ‚ü®‚ü©
  obtain ‚ü®u, hu‚ü© := nonempty_sections_of_finite_cofiltered_system.init F'
  -- Step 3: interpret the results
  use fun j => (u ‚ü®j‚ü©).down
  intro j j' f
  have h := @hu (‚ü®j‚ü© : J') (‚ü®j'‚ü© : J') (ULift.up f)
  simp only [F', down, AsSmall.down, Functor.comp_map, uliftFunctor_map, Functor.op_map] at h
  simp_rw [‚Üê h]
#align nonempty_sections_of_finite_cofiltered_system nonempty_sections_of_finite_cofiltered_system

/-- The inverse limit of nonempty finite types is nonempty.

See `nonempty_sections_of_finite_cofiltered_system` for a generalization to cofiltered limits.
That version applies in almost all cases, and the only difference is that this version
allows `J` to be empty.

This may be regarded as a generalization of K≈ënig's lemma.
To specialize: given a locally finite connected graph, take `J·µí·µñ` to be `‚Ñï` and
`F j` to be length-`j` paths that start from an arbitrary fixed vertex.
Elements of `F.sections` can be read off as infinite rays in the graph. -/
theorem nonempty_sections_of_finite_inverse_system {J : Type u} [Preorder J] [IsDirected J (¬∑ ‚â§ ¬∑)]
    (F : J·µí·µñ ‚•§ Type v) [‚àÄ j : J·µí·µñ, Finite (F.obj j)] [‚àÄ j : J·µí·µñ, Nonempty (F.obj j)] :
    F.sections.Nonempty := by
  cases isEmpty_or_nonempty J
  ¬∑ haveI : IsEmpty J·µí·µñ := ‚ü®fun j => isEmptyElim j.unop‚ü© -- TODO: this should be a global instance
    exact ‚ü®isEmptyElim, by apply isEmptyElim‚ü©
  ¬∑ exact nonempty_sections_of_finite_cofiltered_system _
#align nonempty_sections_of_finite_inverse_system nonempty_sections_of_finite_inverse_system

end FiniteKonig

namespace CategoryTheory

namespace Functor

variable {J : Type u} [Category J] (F : J ‚•§ Type v) {i j k : J} (s : Set (F.obj i))

/-- The eventual range of the functor `F : J ‚•§ Type v` at index `j : J` is the intersection
of the ranges of all maps `F.map f` with `i : J` and `f : i ‚ü∂ j`. -/
def eventualRange (j : J) :=
  ‚ãÇ (i) (f : i ‚ü∂ j), range (F.map f)
#align category_theory.functor.eventual_range CategoryTheory.Functor.eventualRange

theorem mem_eventualRange_iff {x : F.obj j} :
    x ‚àà F.eventualRange j ‚Üî ‚àÄ ‚¶Éi‚¶Ñ (f : i ‚ü∂ j), x ‚àà range (F.map f) :=
  mem_iInter‚ÇÇ
#align category_theory.functor.mem_eventual_range_iff CategoryTheory.Functor.mem_eventualRange_iff

/-- The functor `F : J ‚•§ Type v` satisfies the Mittag-Leffler condition if for all `j : J`,
there exists some `i : J` and `f : i ‚ü∂ j` such that for all `k : J` and `g : k ‚ü∂ j`, the range
of `F.map f` is contained in that of `F.map g`;
in other words (see `isMittagLeffler_iff_eventualRange`), the eventual range at `j` is attained
by some `f : i ‚ü∂ j`. -/
def IsMittagLeffler : Prop :=
  ‚àÄ j : J, ‚àÉ (i : _) (f : i ‚ü∂ j), ‚àÄ ‚¶Ék‚¶Ñ (g : k ‚ü∂ j), range (F.map f) ‚äÜ range (F.map g)
#align category_theory.functor.is_mittag_leffler CategoryTheory.Functor.IsMittagLeffler

theorem isMittagLeffler_iff_eventualRange :
    F.IsMittagLeffler ‚Üî ‚àÄ j : J, ‚àÉ (i : _) (f : i ‚ü∂ j), F.eventualRange j = range (F.map f) :=
  forall_congr' fun _ =>
    exists‚ÇÇ_congr fun _ _ =>
      ‚ü®fun h => (iInter‚ÇÇ_subset _ _).antisymm <| subset_iInter‚ÇÇ h, fun h => h ‚ñ∏ iInter‚ÇÇ_subset‚ü©
#align category_theory.functor.is_mittag_leffler_iff_eventual_range CategoryTheory.Functor.isMittagLeffler_iff_eventualRange

theorem IsMittagLeffler.subset_image_eventualRange (h : F.IsMittagLeffler) (f : j ‚ü∂ i) :
    F.eventualRange i ‚äÜ F.map f '' F.eventualRange j := by
  obtain ‚ü®k, g, hg‚ü© := F.isMittagLeffler_iff_eventualRange.1 h j
  rw [hg]; intro x hx
  obtain ‚ü®x, rfl‚ü© := F.mem_eventualRange_iff.1 hx (g ‚â´ f)
  exact ‚ü®_, ‚ü®x, rfl‚ü©, by rw [map_comp_apply]‚ü©
#align category_theory.functor.is_mittag_leffler.subset_image_eventual_range CategoryTheory.Functor.IsMittagLeffler.subset_image_eventualRange

theorem eventualRange_eq_range_precomp (f : i ‚ü∂ j) (g : j ‚ü∂ k)
    (h : F.eventualRange k = range (F.map g)) : F.eventualRange k = range (F.map <| f ‚â´ g) := by
  apply subset_antisymm
  ¬∑ apply iInter‚ÇÇ_subset
  ¬∑ rw [h, F.map_comp]
    apply range_comp_subset_range
#align category_theory.functor.eventual_range_eq_range_precomp CategoryTheory.Functor.eventualRange_eq_range_precomp

theorem isMittagLeffler_of_surjective (h : ‚àÄ ‚¶Éi j : J‚¶Ñ (f : i ‚ü∂ j), (F.map f).Surjective) :
    F.IsMittagLeffler :=
  fun j => ‚ü®j, ùüô j, fun k g => by rw [map_id, types_id, range_id, (h g).range_eq]‚ü©
#align category_theory.functor.is_mittag_leffler_of_surjective CategoryTheory.Functor.isMittagLeffler_of_surjective

/-- The subfunctor of `F` obtained by restricting to the preimages of a set `s ‚àà F.obj i`. -/
@[simps]
def toPreimages : J ‚•§ Type v where
  obj j := ‚ãÇ f : j ‚ü∂ i, F.map f ‚Åª¬π' s
  map g := MapsTo.restrict (F.map g) _ _ fun x h => by
    rw [mem_iInter] at h ‚ä¢
    intro f
    rw [‚Üê mem_preimage, preimage_preimage, mem_preimage]
    convert h (g ‚â´ f); rw [F.map_comp]; rfl
  map_id j := by
    -- Adaptation note: nightly-2024-03-16: simp was
    -- simp (config := { unfoldPartialApp := true }) only [MapsTo.restrict, Subtype.map, F.map_id]
    simp only [MapsTo.restrict, Subtype.map_def, F.map_id]
    ext
    rfl
  map_comp f g := by
    -- Adaptation note: nightly-2024-03-16: simp was
    -- simp (config := { unfoldPartialApp := true }) only [MapsTo.restrict, Subtype.map, F.map_comp]
    simp only [MapsTo.restrict, Subtype.map_def, F.map_comp]
    rfl
#align category_theory.functor.to_preimages CategoryTheory.Functor.toPreimages

instance toPreimages_finite [‚àÄ j, Finite (F.obj j)] : ‚àÄ j, Finite ((F.toPreimages s).obj j) :=
  fun _ => Subtype.finite
#align category_theory.functor.to_preimages_finite CategoryTheory.Functor.toPreimages_finite

variable [IsCofilteredOrEmpty J]

theorem eventualRange_mapsTo (f : j ‚ü∂ i) :
    (F.eventualRange j).MapsTo (F.map f) (F.eventualRange i) := fun x hx => by
  rw [mem_eventualRange_iff] at hx ‚ä¢
  intro k f'
  obtain ‚ü®l, g, g', he‚ü© := cospan f f'
  obtain ‚ü®x, rfl‚ü© := hx g
  rw [‚Üê map_comp_apply, he, F.map_comp]
  exact ‚ü®_, rfl‚ü©
#align category_theory.functor.eventual_range_maps_to CategoryTheory.Functor.eventualRange_mapsTo

theorem IsMittagLeffler.eq_image_eventualRange (h : F.IsMittagLeffler) (f : j ‚ü∂ i) :
    F.eventualRange i = F.map f '' F.eventualRange j :=
  (h.subset_image_eventualRange F f).antisymm <| mapsTo'.1 (F.eventualRange_mapsTo f)
#align category_theory.functor.is_mittag_leffler.eq_image_eventual_range CategoryTheory.Functor.IsMittagLeffler.eq_image_eventualRange

theorem eventualRange_eq_iff {f : i ‚ü∂ j} :
    F.eventualRange j = range (F.map f) ‚Üî
      ‚àÄ ‚¶Ék‚¶Ñ (g : k ‚ü∂ i), range (F.map f) ‚äÜ range (F.map <| g ‚â´ f) := by
  rw [subset_antisymm_iff, eventualRange, and_iff_right (iInter‚ÇÇ_subset _ _), subset_iInter‚ÇÇ_iff]
  refine' ‚ü®fun h k g => h _ _, fun h j' f' => _‚ü©
  obtain ‚ü®k, g, g', he‚ü© := cospan f f'
  refine' (h g).trans _
  rw [he, F.map_comp]
  apply range_comp_subset_range
#align category_theory.functor.eventual_range_eq_iff CategoryTheory.Functor.eventualRange_eq_iff

theorem isMittagLeffler_iff_subset_range_comp : F.IsMittagLeffler ‚Üî
    ‚àÄ j : J, ‚àÉ (i : _) (f : i ‚ü∂ j), ‚àÄ ‚¶Ék‚¶Ñ (g : k ‚ü∂ i), range (F.map f) ‚äÜ range (F.map <| g ‚â´ f) :=
  by simp_rw [isMittagLeffler_iff_eventualRange, eventualRange_eq_iff]
#align category_theory.functor.is_mittag_leffler_iff_subset_range_comp CategoryTheory.Functor.isMittagLeffler_iff_subset_range_comp

theorem IsMittagLeffler.toPreimages (h : F.IsMittagLeffler) : (F.toPreimages s).IsMittagLeffler :=
  (isMittagLeffler_iff_subset_range_comp _).2 fun j => by
    obtain ‚ü®j‚ÇÅ, g‚ÇÅ, f‚ÇÅ, -‚ü© := IsCofilteredOrEmpty.cone_objs i j
    obtain ‚ü®j‚ÇÇ, f‚ÇÇ, h‚ÇÇ‚ü© := F.isMittagLeffler_iff_eventualRange.1 h j‚ÇÅ
    refine' ‚ü®j‚ÇÇ, f‚ÇÇ ‚â´ f‚ÇÅ, fun j‚ÇÉ f‚ÇÉ => _‚ü©
    rintro _ ‚ü®‚ü®x, hx‚ü©, rfl‚ü©
    have : F.map f‚ÇÇ x ‚àà F.eventualRange j‚ÇÅ := by
      rw [h‚ÇÇ]
      exact ‚ü®_, rfl‚ü©
    obtain ‚ü®y, hy, h‚ÇÉ‚ü© := h.subset_image_eventualRange F (f‚ÇÉ ‚â´ f‚ÇÇ) this
    refine' ‚ü®‚ü®y, mem_iInter.2 fun g‚ÇÇ => _‚ü©, Subtype.ext _‚ü©
    ¬∑ obtain ‚ü®j‚ÇÑ, f‚ÇÑ, h‚ÇÑ‚ü© := IsCofilteredOrEmpty.cone_maps g‚ÇÇ ((f‚ÇÉ ‚â´ f‚ÇÇ) ‚â´ g‚ÇÅ)
      obtain ‚ü®y, rfl‚ü© := F.mem_eventualRange_iff.1 hy f‚ÇÑ
      rw [‚Üê map_comp_apply] at h‚ÇÉ
      rw [mem_preimage, ‚Üê map_comp_apply, h‚ÇÑ, ‚Üê Category.assoc, map_comp_apply, h‚ÇÉ,
        ‚Üê map_comp_apply]
      apply mem_iInter.1 hx
    ¬∑ simp_rw [toPreimages_map, MapsTo.val_restrict_apply]
      rw [‚Üê Category.assoc, map_comp_apply, h‚ÇÉ, map_comp_apply]
#align category_theory.functor.is_mittag_leffler.to_preimages CategoryTheory.Functor.IsMittagLeffler.toPreimages

theorem isMittagLeffler_of_exists_finite_range
    (h : ‚àÄ j : J, ‚àÉ (i : _) (f : i ‚ü∂ j), (range <| F.map f).Finite) : F.IsMittagLeffler := by
  intro j
  obtain ‚ü®i, hi, hf‚ü© := h j
  obtain ‚ü®m, ‚ü®i, f, hm‚ü©, hmin‚ü© := Finset.wellFoundedLT.wf.has_min
    { s : Finset (F.obj j) | ‚àÉ (i : _) (f : i ‚ü∂ j), ‚Üës = range (F.map f) }
    ‚ü®_, i, hi, hf.coe_toFinset‚ü©
  refine' ‚ü®i, f, fun k g =>
    (directedOn_range.mp <| F.ranges_directed j).is_bot_of_is_min ‚ü®‚ü®i, f‚ü©, rfl‚ü© _ _ ‚ü®‚ü®k, g‚ü©, rfl‚ü©‚ü©
  rintro _ ‚ü®‚ü®k', g'‚ü©, rfl‚ü© hl
  refine' (eq_of_le_of_not_lt hl _).ge
  have := hmin _ ‚ü®k', g', (m.finite_toSet.subset <| hm.substr hl).coe_toFinset‚ü©
  rwa [Finset.lt_iff_ssubset, ‚Üê Finset.coe_ssubset, Set.Finite.coe_toFinset, hm] at this
#align category_theory.functor.is_mittag_leffler_of_exists_finite_range CategoryTheory.Functor.isMittagLeffler_of_exists_finite_range

/-- The subfunctor of `F` obtained by restricting to the eventual range at each index. -/
@[simps]
def toEventualRanges : J ‚•§ Type v where
  obj j := F.eventualRange j
  map f := (F.eventualRange_mapsTo f).restrict _ _ _
  map_id i := by
    -- Adaptation note: nightly-2024-03-16: simp was
    -- simp (config := { unfoldPartialApp := true }) only [MapsTo.restrict, Subtype.map, F.map_id]
    simp only [MapsTo.restrict, Subtype.map_def, F.map_id]
    ext
    rfl
  map_comp _ _ := by
    -- Adaptation note: nightly-2024-03-16: simp was
    -- simp (config := { unfoldPartialApp := true }) only [MapsTo.restrict, Subtype.map, F.map_comp]
    simp only [MapsTo.restrict, Subtype.map_def, F.map_comp]
    rfl
#align category_theory.functor.to_eventual_ranges CategoryTheory.Functor.toEventualRanges

instance toEventualRanges_finite [‚àÄ j, Finite (F.obj j)] : ‚àÄ j, Finite (F.toEventualRanges.obj j) :=
  fun _ => Subtype.finite
#align category_theory.functor.to_eventual_ranges_finite CategoryTheory.Functor.toEventualRanges_finite

/-- The sections of the functor `F : J ‚•§ Type v` are in bijection with the sections of
`F.toEventualRanges`. -/
def toEventualRangesSectionsEquiv : F.toEventualRanges.sections ‚âÉ F.sections where
  toFun s := ‚ü®_, fun f => Subtype.coe_inj.2 <| s.prop f‚ü©
  invFun s :=
    ‚ü®fun j => ‚ü®_, mem_iInter‚ÇÇ.2 fun i f => ‚ü®_, s.prop f‚ü©‚ü©, fun f => Subtype.ext <| s.prop f‚ü©
  left_inv _ := by
    ext
    rfl
  right_inv _ := by
    ext
    rfl
#align category_theory.functor.to_eventual_ranges_sections_equiv CategoryTheory.Functor.toEventualRangesSectionsEquiv

/-- If `F` satisfies the Mittag-Leffler condition, its restriction to eventual ranges is a
surjective functor. -/
theorem surjective_toEventualRanges (h : F.IsMittagLeffler) ‚¶Éi j‚¶Ñ (f : i ‚ü∂ j) :
    (F.toEventualRanges.map f).Surjective := fun ‚ü®x, hx‚ü© => by
  obtain ‚ü®y, hy, rfl‚ü© := h.subset_image_eventualRange F f hx
  exact ‚ü®‚ü®y, hy‚ü©, rfl‚ü©
#align category_theory.functor.surjective_to_eventual_ranges CategoryTheory.Functor.surjective_toEventualRanges

/-- If `F` is nonempty at each index and Mittag-Leffler, then so is `F.toEventualRanges`. -/
theorem toEventualRanges_nonempty (h : F.IsMittagLeffler) [‚àÄ j : J, Nonempty (F.obj j)] (j : J) :
    Nonempty (F.toEventualRanges.obj j) := by
  let ‚ü®i, f, h‚ü© := F.isMittagLeffler_iff_eventualRange.1 h j
  rw [toEventualRanges_obj, h]
  infer_instance
#align category_theory.functor.to_eventual_ranges_nonempty CategoryTheory.Functor.toEventualRanges_nonempty

/-- If `F` has all arrows surjective, then it "factors through a poset". -/
theorem thin_diagram_of_surjective (Fsur : ‚àÄ ‚¶Éi j : J‚¶Ñ (f : i ‚ü∂ j), (F.map f).Surjective) {i j}
    (f g : i ‚ü∂ j) : F.map f = F.map g :=
  let ‚ü®k, œÜ, hœÜ‚ü© := IsCofilteredOrEmpty.cone_maps f g
  (Fsur œÜ).injective_comp_right <| by simp_rw [‚Üê types_comp, ‚Üê F.map_comp, hœÜ]
#align category_theory.functor.thin_diagram_of_surjective CategoryTheory.Functor.thin_diagram_of_surjective

theorem toPreimages_nonempty_of_surjective [hFn : ‚àÄ j : J, Nonempty (F.obj j)]
    (Fsur : ‚àÄ ‚¶Éi j : J‚¶Ñ (f : i ‚ü∂ j), (F.map f).Surjective) (hs : s.Nonempty) (j) :
    Nonempty ((F.toPreimages s).obj j) := by
  simp only [toPreimages_obj, nonempty_coe_sort, nonempty_iInter, mem_preimage]
  obtain h | ‚ü®‚ü®ji‚ü©‚ü© := isEmpty_or_nonempty (j ‚ü∂ i)
  ¬∑ exact ‚ü®(hFn j).some, fun ji => h.elim ji‚ü©
  ¬∑ obtain ‚ü®y, ys‚ü© := hs
    obtain ‚ü®x, rfl‚ü© := Fsur ji y
    exact ‚ü®x, fun ji' => (F.thin_diagram_of_surjective Fsur ji' ji).symm ‚ñ∏ ys‚ü©
#align category_theory.functor.to_preimages_nonempty_of_surjective CategoryTheory.Functor.toPreimages_nonempty_of_surjective

theorem eval_section_injective_of_eventually_injective {j}
    (Finj : ‚àÄ (i) (f : i ‚ü∂ j), (F.map f).Injective) (i) (f : i ‚ü∂ j) :
    (fun s : F.sections => s.val j).Injective := by
  refine' fun s‚ÇÄ s‚ÇÅ h => Subtype.ext <| funext fun k => _
  obtain ‚ü®m, mi, mk, _‚ü© := IsCofilteredOrEmpty.cone_objs i k
  dsimp at h
  rw [‚Üê s‚ÇÄ.prop (mi ‚â´ f), ‚Üê s‚ÇÅ.prop (mi ‚â´ f)] at h
  rw [‚Üê s‚ÇÄ.prop mk, ‚Üê s‚ÇÅ.prop mk]
  exact congr_arg _ (Finj m (mi ‚â´ f) h)
#align category_theory.functor.eval_section_injective_of_eventually_injective CategoryTheory.Functor.eval_section_injective_of_eventually_injective

section FiniteCofilteredSystem

variable [‚àÄ j : J, Nonempty (F.obj j)] [‚àÄ j : J, Finite (F.obj j)]
  (Fsur : ‚àÄ ‚¶Éi j : J‚¶Ñ (f : i ‚ü∂ j), (F.map f).Surjective)

theorem eval_section_surjective_of_surjective (i : J) :
    (fun s : F.sections => s.val i).Surjective := fun x => by
  let s : Set (F.obj i) := {x}
  haveI := F.toPreimages_nonempty_of_surjective s Fsur (singleton_nonempty x)
  obtain ‚ü®sec, h‚ü© := nonempty_sections_of_finite_cofiltered_system (F.toPreimages s)
  refine' ‚ü®‚ü®fun j => (sec j).val, fun jk => by simpa [Subtype.ext_iff] using h jk‚ü©, _‚ü©
  ¬∑ have := (sec i).prop
    simp only [mem_iInter, mem_preimage, mem_singleton_iff] at this
    have := this (ùüô i)
    rwa [map_id_apply] at this
#align category_theory.functor.eval_section_surjective_of_surjective CategoryTheory.Functor.eval_section_surjective_of_surjective

theorem eventually_injective [Nonempty J] [Finite F.sections] :
    ‚àÉ j, ‚àÄ (i) (f : i ‚ü∂ j), (F.map f).Injective := by
  haveI : ‚àÄ j, Fintype (F.obj j) := fun j => Fintype.ofFinite (F.obj j)
  haveI : Fintype F.sections := Fintype.ofFinite F.sections
  have card_le : ‚àÄ j, Fintype.card (F.obj j) ‚â§ Fintype.card F.sections :=
    fun j => Fintype.card_le_of_surjective _ (F.eval_section_surjective_of_surjective Fsur j)
  let fn j := Fintype.card F.sections - Fintype.card (F.obj j)
  refine' ‚ü®fn.argmin Nat.lt_wfRel.wf,
    fun i f => ((Fintype.bijective_iff_surjective_and_card _).2
      ‚ü®Fsur f, le_antisymm _ (Fintype.card_le_of_surjective _ <| Fsur f)‚ü©).1‚ü©
  rw [‚Üê Nat.sub_sub_self (card_le i), tsub_le_iff_tsub_le]
  apply fn.argmin_le
#align category_theory.functor.eventually_injective CategoryTheory.Functor.eventually_injective

end FiniteCofilteredSystem

end Functor

end CategoryTheory
