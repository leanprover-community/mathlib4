/-
Copyright (c) 2018 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison
-/
import Mathlib.CategoryTheory.Iso
import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.Functor.FullyFaithful

/-!
# Whiskering

Given a functor `F : C ‚•§ D` and functors `G H : D ‚•§ E` and a natural transformation `Œ± : G ‚ü∂ H`,
we can construct a new natural transformation `F ‚ãô G ‚ü∂ F ‚ãô H`,
called `whiskerLeft F Œ±`. This is the same as the horizontal composition of `ùüô F` with `Œ±`.

This operation is functorial in `F`, and we package this as `whiskeringLeft`. Here
`(whiskeringLeft.obj F).obj G` is `F ‚ãô G`, and
`(whiskeringLeft.obj F).map Œ±` is `whiskerLeft F Œ±`.
(That is, we might have alternatively named this as the "left composition functor".)

We also provide analogues for composition on the right, and for these operations on isomorphisms.

We show the associators an unitor natural isomorphisms satisfy the triangle and pentagon
identities.
-/


namespace CategoryTheory

universe u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ v‚ÇÉ u‚ÇÑ v‚ÇÑ

section

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] {E : Type u‚ÇÉ}
  [Category.{v‚ÇÉ} E]

/-- If `Œ± : G ‚ü∂ H` then
`whiskerLeft F Œ± : (F ‚ãô G) ‚ü∂ (F ‚ãô H)` has components `Œ±.app (F.obj X)`.
-/
@[simps]
def whiskerLeft (F : C ‚•§ D) {G H : D ‚•§ E} (Œ± : G ‚ü∂ H) :
    F ‚ãô G ‚ü∂ F ‚ãô H where
  app X := Œ±.app (F.obj X)
  naturality X Y f := by rw [Functor.comp_map, Functor.comp_map, Œ±.naturality]

@[simp]
lemma NatTrans.id_hcomp (F : C ‚•§ D) {G H : D ‚•§ E} (Œ± : G ‚ü∂ H) : ùüô F ‚ó´ Œ± = whiskerLeft F Œ± := by
  ext
  simp

/-- If `Œ± : G ‚ü∂ H` then
`whiskerRight Œ± F : (G ‚ãô F) ‚ü∂ (G ‚ãô F)` has components `F.map (Œ±.app X)`.
-/
@[simps]
def whiskerRight {G H : C ‚•§ D} (Œ± : G ‚ü∂ H) (F : D ‚•§ E) :
    G ‚ãô F ‚ü∂ H ‚ãô F where
  app X := F.map (Œ±.app X)
  naturality X Y f := by
    rw [Functor.comp_map, Functor.comp_map, ‚Üê F.map_comp, ‚Üê F.map_comp, Œ±.naturality]

@[simp]
lemma NatTrans.hcomp_id {G H : C ‚•§ D} (Œ± : G ‚ü∂ H) (F : D ‚•§ E) : Œ± ‚ó´ ùüô F = whiskerRight Œ± F := by
  ext
  simp

variable (C D E)

/-- Left-composition gives a functor `(C ‚•§ D) ‚•§ ((D ‚•§ E) ‚•§ (C ‚•§ E))`.

`(whiskeringLeft.obj F).obj G` is `F ‚ãô G`, and
`(whiskeringLeft.obj F).map Œ±` is `whiskerLeft F Œ±`.
-/
@[simps]
def whiskeringLeft : (C ‚•§ D) ‚•§ (D ‚•§ E) ‚•§ C ‚•§ E where
  obj F :=
    { obj := fun G => F ‚ãô G
      map := fun Œ± => whiskerLeft F Œ± }
  map œÑ :=
    { app := fun H =>
        { app := fun c => H.map (œÑ.app c)
          naturality := fun X Y f => by dsimp; rw [‚Üê H.map_comp, ‚Üê H.map_comp, ‚Üê œÑ.naturality] }
      naturality := fun X Y f => by ext; dsimp; rw [f.naturality] }

/-- Right-composition gives a functor `(D ‚•§ E) ‚•§ ((C ‚•§ D) ‚•§ (C ‚•§ E))`.

`(whiskeringRight.obj H).obj F` is `F ‚ãô H`, and
`(whiskeringRight.obj H).map Œ±` is `whiskerRight Œ± H`.
-/
@[simps]
def whiskeringRight : (D ‚•§ E) ‚•§ (C ‚•§ D) ‚•§ C ‚•§ E where
  obj H :=
    { obj := fun F => F ‚ãô H
      map := fun Œ± => whiskerRight Œ± H }
  map œÑ :=
    { app := fun F =>
        { app := fun c => œÑ.app (F.obj c)
          naturality := fun X Y f => by dsimp; rw [œÑ.naturality] }
      naturality := fun X Y f => by ext; dsimp; rw [‚Üê NatTrans.naturality] }

variable {C} {D} {E}

instance faithful_whiskeringRight_obj {F : D ‚•§ E} [F.Faithful] :
    ((whiskeringRight C D E).obj F).Faithful where
  map_injective hŒ±Œ≤ := by
    ext X
    exact F.map_injective <| congr_fun (congr_arg NatTrans.app hŒ±Œ≤) X

/-- If `F : D ‚•§ E` is fully faithful, then so is
`(whiskeringRight C D E).obj F : (C ‚•§ D) ‚•§ C ‚•§ E`. -/
@[simps]
def Functor.FullyFaithful.whiskeringRight {F : D ‚•§ E} (hF : F.FullyFaithful)
    (C : Type*) [Category C] :
    ((whiskeringRight C D E).obj F).FullyFaithful where
  preimage f :=
    { app := fun X => hF.preimage (f.app X)
      naturality := fun _ _ g => by
        apply hF.map_injective
        dsimp
        simp only [map_comp, map_preimage]
        apply f.naturality }

theorem whiskeringLeft_obj_id : (whiskeringLeft C C E).obj (ùü≠ _) = ùü≠ _ :=
  rfl

/-- The isomorphism between left-whiskering on the identity functor and the identity of the functor
between the resulting functor categories. -/
def whiskeringLeftObjIdIso : (whiskeringLeft C C E).obj (ùü≠ _) ‚âÖ ùü≠ _ :=
  Iso.refl _

theorem whiskeringLeft_obj_comp {D' : Type u‚ÇÑ} [Category.{v‚ÇÑ} D'] (F : C ‚•§ D) (G : D ‚•§ D') :
    (whiskeringLeft C D' E).obj (F ‚ãô G) =
    (whiskeringLeft D D' E).obj G ‚ãô (whiskeringLeft C D E).obj F :=
  rfl

/-- The isomorphism between left-whiskering on the composition of functors and the composition
of two left-whiskering applications. -/
def whiskeringLeftObjCompIso {D' : Type u‚ÇÑ} [Category.{v‚ÇÑ} D'] (F : C ‚•§ D) (G : D ‚•§ D') :
    (whiskeringLeft C D' E).obj (F ‚ãô G) ‚âÖ
    (whiskeringLeft D D' E).obj G ‚ãô (whiskeringLeft C D E).obj F :=
  Iso.refl _

theorem whiskeringRight_obj_id : (whiskeringRight E C C).obj (ùü≠ _) = ùü≠ _ :=
  rfl

/-- The isomorphism between right-whiskering on the identity functor and the identity of the functor
between the resulting functor categories. -/
def whiskeringRightObjIdIso : (whiskeringRight E C C).obj (ùü≠ _) ‚âÖ ùü≠ _ :=
  Iso.refl _

@[deprecated (since := "2025-04-04")] alias wiskeringRightObjIdIso := whiskeringRightObjIdIso

theorem whiskeringRight_obj_comp {D' : Type u‚ÇÑ} [Category.{v‚ÇÑ} D'] (F : C ‚•§ D) (G : D ‚•§ D') :
    (whiskeringRight E C D).obj F ‚ãô (whiskeringRight E D D').obj G =
    (whiskeringRight E C D').obj (F ‚ãô G) :=
  rfl

/-- The isomorphism between right-whiskering on the composition of functors and the composition
of two right-whiskering applications. -/
def whiskeringRightObjCompIso {D' : Type u‚ÇÑ} [Category.{v‚ÇÑ} D'] (F : C ‚•§ D) (G : D ‚•§ D') :
    (whiskeringRight E C D).obj F ‚ãô (whiskeringRight E D D').obj G ‚âÖ
    (whiskeringRight E C D').obj (F ‚ãô G) :=
  Iso.refl _

instance full_whiskeringRight_obj {F : D ‚•§ E} [F.Faithful] [F.Full] :
    ((whiskeringRight C D E).obj F).Full :=
  ((Functor.FullyFaithful.ofFullyFaithful F).whiskeringRight C).full

@[simp]
theorem whiskerLeft_id (F : C ‚•§ D) {G : D ‚•§ E} :
    whiskerLeft F (NatTrans.id G) = NatTrans.id (F.comp G) :=
  rfl

@[simp]
theorem whiskerLeft_id' (F : C ‚•§ D) {G : D ‚•§ E} : whiskerLeft F (ùüô G) = ùüô (F.comp G) :=
  rfl

@[simp]
theorem whiskerRight_id {G : C ‚•§ D} (F : D ‚•§ E) :
    whiskerRight (NatTrans.id G) F = NatTrans.id (G.comp F) :=
  ((whiskeringRight C D E).obj F).map_id _

@[simp]
theorem whiskerRight_id' {G : C ‚•§ D} (F : D ‚•§ E) : whiskerRight (ùüô G) F = ùüô (G.comp F) :=
  ((whiskeringRight C D E).obj F).map_id _

@[simp, reassoc]
theorem whiskerLeft_comp (F : C ‚•§ D) {G H K : D ‚•§ E} (Œ± : G ‚ü∂ H) (Œ≤ : H ‚ü∂ K) :
    whiskerLeft F (Œ± ‚â´ Œ≤) = whiskerLeft F Œ± ‚â´ whiskerLeft F Œ≤ :=
  rfl

@[simp, reassoc]
theorem whiskerRight_comp {G H K : C ‚•§ D} (Œ± : G ‚ü∂ H) (Œ≤ : H ‚ü∂ K) (F : D ‚•§ E) :
    whiskerRight (Œ± ‚â´ Œ≤) F = whiskerRight Œ± F ‚â´ whiskerRight Œ≤ F :=
  ((whiskeringRight C D E).obj F).map_comp Œ± Œ≤

@[reassoc]
theorem whiskerLeft_comp_whiskerRight {F G : C ‚•§ D} {H K : D ‚•§ E} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ K) :
    whiskerLeft F Œ≤ ‚â´ whiskerRight Œ± K = whiskerRight Œ± H ‚â´ whiskerLeft G Œ≤ := by
  ext
  simp

lemma NatTrans.hcomp_eq_whiskerLeft_comp_whiskerRight {F G : C ‚•§ D} {H K : D ‚•§ E}
    (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ K) : Œ± ‚ó´ Œ≤ = whiskerLeft F Œ≤ ‚â´ whiskerRight Œ± K := by
  ext
  simp

/-- If `Œ± : G ‚âÖ H` is a natural isomorphism then
`isoWhiskerLeft F Œ± : (F ‚ãô G) ‚âÖ (F ‚ãô H)` has components `Œ±.app (F.obj X)`.
-/
def isoWhiskerLeft (F : C ‚•§ D) {G H : D ‚•§ E} (Œ± : G ‚âÖ H) : F ‚ãô G ‚âÖ F ‚ãô H :=
  ((whiskeringLeft C D E).obj F).mapIso Œ±

@[simp]
theorem isoWhiskerLeft_hom (F : C ‚•§ D) {G H : D ‚•§ E} (Œ± : G ‚âÖ H) :
    (isoWhiskerLeft F Œ±).hom = whiskerLeft F Œ±.hom :=
  rfl

@[simp]
theorem isoWhiskerLeft_inv (F : C ‚•§ D) {G H : D ‚•§ E} (Œ± : G ‚âÖ H) :
    (isoWhiskerLeft F Œ±).inv = whiskerLeft F Œ±.inv :=
  rfl

/-- If `Œ± : G ‚âÖ H` then
`isoWhiskerRight Œ± F : (G ‚ãô F) ‚âÖ (H ‚ãô F)` has components `F.map_iso (Œ±.app X)`.
-/
def isoWhiskerRight {G H : C ‚•§ D} (Œ± : G ‚âÖ H) (F : D ‚•§ E) : G ‚ãô F ‚âÖ H ‚ãô F :=
  ((whiskeringRight C D E).obj F).mapIso Œ±

@[simp]
theorem isoWhiskerRight_hom {G H : C ‚•§ D} (Œ± : G ‚âÖ H) (F : D ‚•§ E) :
    (isoWhiskerRight Œ± F).hom = whiskerRight Œ±.hom F :=
  rfl

@[simp]
theorem isoWhiskerRight_inv {G H : C ‚•§ D} (Œ± : G ‚âÖ H) (F : D ‚•§ E) :
    (isoWhiskerRight Œ± F).inv = whiskerRight Œ±.inv F :=
  rfl

instance isIso_whiskerLeft (F : C ‚•§ D) {G H : D ‚•§ E} (Œ± : G ‚ü∂ H) [IsIso Œ±] :
    IsIso (whiskerLeft F Œ±) :=
  (isoWhiskerLeft F (asIso Œ±)).isIso_hom

instance isIso_whiskerRight {G H : C ‚•§ D} (Œ± : G ‚ü∂ H) (F : D ‚•§ E) [IsIso Œ±] :
    IsIso (whiskerRight Œ± F) :=
  (isoWhiskerRight (asIso Œ±) F).isIso_hom

variable {B : Type u‚ÇÑ} [Category.{v‚ÇÑ} B]

@[simp]
theorem whiskerLeft_twice (F : B ‚•§ C) (G : C ‚•§ D) {H K : D ‚•§ E} (Œ± : H ‚ü∂ K) :
    whiskerLeft F (whiskerLeft G Œ±) =
    (Functor.associator _ _ _).inv ‚â´ whiskerLeft (F ‚ãô G) Œ± ‚â´ (Functor.associator _ _ _).hom := by
  aesop_cat

@[simp]
theorem whiskerRight_twice {H K : B ‚•§ C} (F : C ‚•§ D) (G : D ‚•§ E) (Œ± : H ‚ü∂ K) :
    whiskerRight (whiskerRight Œ± F) G =
    (Functor.associator _ _ _).hom ‚â´ whiskerRight Œ± (F ‚ãô G) ‚â´ (Functor.associator _ _ _).inv := by
  aesop_cat

theorem whiskerRight_left (F : B ‚•§ C) {G H : C ‚•§ D} (Œ± : G ‚ü∂ H) (K : D ‚•§ E) :
    whiskerRight (whiskerLeft F Œ±) K =
    (Functor.associator _ _ _).hom ‚â´ whiskerLeft F (whiskerRight Œ± K) ‚â´
      (Functor.associator _ _ _).inv := by
  aesop_cat

end

namespace Functor

universe u‚ÇÖ v‚ÇÖ

variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A] {B : Type u‚ÇÇ} [Category.{v‚ÇÇ} B]
  {C : Type u‚ÇÉ} [Category.{v‚ÇÉ} C] {D : Type u‚ÇÑ} [Category.{v‚ÇÑ} D] {E : Type u‚ÇÖ} [Category.{v‚ÇÖ} E]
  (F : A ‚•§ B) (G : B ‚•§ C) (H : C ‚•§ D) (K : D ‚•§ E)

theorem triangle :
    (associator F (ùü≠ B) G).hom ‚â´ whiskerLeft F (leftUnitor G).hom =
      whiskerRight (rightUnitor F).hom G := by aesop_cat

theorem pentagon :
    whiskerRight (associator F G H).hom K ‚â´
        (associator F (G ‚ãô H) K).hom ‚â´ whiskerLeft F (associator G H K).hom =
      (associator (F ‚ãô G) H K).hom ‚â´ (associator F G (H ‚ãô K)).hom := by aesop_cat

end Functor

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ D‚ÇÅ D‚ÇÇ D‚ÇÉ : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ]
  [Category D‚ÇÅ] [Category D‚ÇÇ] [Category D‚ÇÉ] (E : Type*) [Category E]

/-- The obvious functor `(C‚ÇÅ ‚•§ D‚ÇÅ) ‚•§ (C‚ÇÇ ‚•§ D‚ÇÇ) ‚•§ (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E)`. -/
@[simps!]
def whiskeringLeft‚ÇÇ :
    (C‚ÇÅ ‚•§ D‚ÇÅ) ‚•§ (C‚ÇÇ ‚•§ D‚ÇÇ) ‚•§ (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E) where
  obj F‚ÇÅ :=
    { obj := fun F‚ÇÇ ‚Ü¶
        (whiskeringRight D‚ÇÅ (D‚ÇÇ ‚•§ E) (C‚ÇÇ ‚•§ E)).obj ((whiskeringLeft C‚ÇÇ D‚ÇÇ E).obj F‚ÇÇ) ‚ãô
          (whiskeringLeft C‚ÇÅ D‚ÇÅ (C‚ÇÇ ‚•§ E)).obj F‚ÇÅ
      map := fun œÜ ‚Ü¶ whiskerRight
        ((whiskeringRight D‚ÇÅ (D‚ÇÇ ‚•§ E) (C‚ÇÇ ‚•§ E)).map ((whiskeringLeft C‚ÇÇ D‚ÇÇ E).map œÜ)) _ }
  map œà :=
    { app := fun F‚ÇÇ ‚Ü¶ whiskerLeft _ ((whiskeringLeft C‚ÇÅ D‚ÇÅ (C‚ÇÇ ‚•§ E)).map œà) }

/-- Auxiliary definition for `whiskeringLeft‚ÇÉ`. -/
@[simps!]
def whiskeringLeft‚ÇÉObjObjObj (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (F‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ) :
    (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ E) ‚•§ C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E :=
  (whiskeringRight _ _ _).obj (((whiskeringLeft‚ÇÇ E).obj F‚ÇÇ).obj F‚ÇÉ) ‚ãô
    (whiskeringLeft C‚ÇÅ D‚ÇÅ _).obj F‚ÇÅ

/-- Auxiliary definition for `whiskeringLeft‚ÇÉ`. -/
@[simps]
def whiskeringLeft‚ÇÉObjObjMap (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) {F‚ÇÉ F‚ÇÉ' : C‚ÇÉ ‚•§ D‚ÇÉ} (œÑ‚ÇÉ : F‚ÇÉ ‚ü∂ F‚ÇÉ') :
    whiskeringLeft‚ÇÉObjObjObj E F‚ÇÅ F‚ÇÇ F‚ÇÉ ‚ü∂
      whiskeringLeft‚ÇÉObjObjObj E F‚ÇÅ F‚ÇÇ F‚ÇÉ' where
  app F := whiskerLeft _ (whiskerLeft _ (((whiskeringLeft‚ÇÇ E).obj F‚ÇÇ).map œÑ‚ÇÉ))

variable (C‚ÇÉ D‚ÇÉ) in
/-- Auxiliary definition for `whiskeringLeft‚ÇÉ`. -/
@[simps]
def whiskeringLeft‚ÇÉObjObj (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) :
    (C‚ÇÉ ‚•§ D‚ÇÉ) ‚•§ (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) where
  obj F‚ÇÉ := whiskeringLeft‚ÇÉObjObjObj E F‚ÇÅ F‚ÇÇ F‚ÇÉ
  map œÑ‚ÇÉ := whiskeringLeft‚ÇÉObjObjMap E F‚ÇÅ F‚ÇÇ œÑ‚ÇÉ

variable (C‚ÇÉ D‚ÇÉ) in
/-- Auxiliary definition for `whiskeringLeft‚ÇÉ`. -/
@[simps]
def whiskeringLeft‚ÇÉObjMap (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) {F‚ÇÇ F‚ÇÇ' : C‚ÇÇ ‚•§ D‚ÇÇ} (œÑ‚ÇÇ : F‚ÇÇ ‚ü∂ F‚ÇÇ') :
    whiskeringLeft‚ÇÉObjObj C‚ÇÉ D‚ÇÉ E F‚ÇÅ F‚ÇÇ ‚ü∂ whiskeringLeft‚ÇÉObjObj C‚ÇÉ D‚ÇÉ E F‚ÇÅ F‚ÇÇ' where
  app F‚ÇÉ := whiskerRight ((whiskeringRight _ _ _).map (((whiskeringLeft‚ÇÇ E).map œÑ‚ÇÇ).app F‚ÇÉ)) _

variable (C‚ÇÇ C‚ÇÉ D‚ÇÇ D‚ÇÉ) in
/-- Auxiliary definition for `whiskeringLeft‚ÇÉ`. -/
@[simps]
def whiskeringLeft‚ÇÉObj (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) :
    (C‚ÇÇ ‚•§ D‚ÇÇ) ‚•§ (C‚ÇÉ ‚•§ D‚ÇÉ) ‚•§ (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) where
  obj F‚ÇÇ := whiskeringLeft‚ÇÉObjObj C‚ÇÉ D‚ÇÉ E F‚ÇÅ F‚ÇÇ
  map œÑ‚ÇÇ := whiskeringLeft‚ÇÉObjMap C‚ÇÉ D‚ÇÉ E F‚ÇÅ œÑ‚ÇÇ

variable (C‚ÇÇ C‚ÇÉ D‚ÇÇ D‚ÇÉ) in
/-- Auxiliary definition for `whiskeringLeft‚ÇÉ`. -/
@[simps]
def whiskeringLeft‚ÇÉMap {F‚ÇÅ F‚ÇÅ' : C‚ÇÅ ‚•§ D‚ÇÅ} (œÑ‚ÇÅ : F‚ÇÅ ‚ü∂ F‚ÇÅ') :
    whiskeringLeft‚ÇÉObj C‚ÇÇ C‚ÇÉ D‚ÇÇ D‚ÇÉ E F‚ÇÅ ‚ü∂ whiskeringLeft‚ÇÉObj C‚ÇÇ C‚ÇÉ D‚ÇÇ D‚ÇÉ E F‚ÇÅ' where
  app F‚ÇÇ := { app F‚ÇÉ := whiskerLeft _ ((whiskeringLeft _ _ _).map œÑ‚ÇÅ) }

/-- The obvious functor
`(C‚ÇÅ ‚•§ D‚ÇÅ) ‚•§ (C‚ÇÇ ‚•§ D‚ÇÇ) ‚•§ (C‚ÇÉ ‚•§ D‚ÇÉ) ‚•§ (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E)`. -/
@[simps!]
def whiskeringLeft‚ÇÉ :
    (C‚ÇÅ ‚•§ D‚ÇÅ) ‚•§ (C‚ÇÇ ‚•§ D‚ÇÇ) ‚•§ (C‚ÇÉ ‚•§ D‚ÇÉ) ‚•§ (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) where
  obj F‚ÇÅ := whiskeringLeft‚ÇÉObj C‚ÇÇ C‚ÇÉ D‚ÇÇ D‚ÇÉ E F‚ÇÅ
  map œÑ‚ÇÅ := whiskeringLeft‚ÇÉMap C‚ÇÇ C‚ÇÉ D‚ÇÇ D‚ÇÉ E œÑ‚ÇÅ

variable {E}

/-- The "postcomposition" with a functor `E ‚•§ E'` gives a functor
`(E ‚•§ E') ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E) ‚•§ C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E'`. -/
@[simps!]
def Functor.postcompose‚ÇÇ {E' : Type*} [Category E'] :
    (E ‚•§ E') ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E) ‚•§ C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E' :=
  whiskeringRight C‚ÇÇ _ _ ‚ãô whiskeringRight C‚ÇÅ _ _

/-- The "postcomposition" with a functor `E ‚•§ E'` gives a functor
`(E ‚•§ E') ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) ‚•§ C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E'`. -/
@[simps!]
def Functor.postcompose‚ÇÉ {E' : Type*} [Category E'] :
    (E ‚•§ E') ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) ‚•§ C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E' :=
  whiskeringRight C‚ÇÉ _ _ ‚ãô whiskeringRight C‚ÇÇ _ _ ‚ãô whiskeringRight C‚ÇÅ _ _

end CategoryTheory
