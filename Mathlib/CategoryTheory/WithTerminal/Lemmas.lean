/-
Copyright (c) 2025 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.CategoryTheory.Filtered.Basic
import Mathlib.CategoryTheory.WithTerminal.Basic

/-!
# Further lemmas on `WithTerminal`

These lemmas and instances need more imports.
-/

namespace CategoryTheory

variable {C : Type*} [Category C]

namespace WithTerminal

open IsCofiltered in
instance [IsCofilteredOrEmpty C] : IsCofiltered (WithTerminal C) where
  cone_objs x y :=
    match x, y with
    | star, y => ‚ü®y, default, ùüô y, trivial‚ü©
    | x, star => ‚ü®x, ùüô x, default, trivial‚ü©
    | of x, of y => ‚ü®.of <| min x y, minToLeft _ _, minToRight _ _, trivial‚ü©
  cone_maps x y f g :=
    match x, y with
    | star, _ => ‚ü®star, ùüô _, (IsIso.eq_comp_inv f).mp rfl‚ü©
    | x, star => ‚ü®x, ùüô _, Subsingleton.elim _ _‚ü©
    | of _, of _ => ‚ü®.of <| eq f g, eqHom _ _, eq_condition _ _‚ü©

end WithTerminal

namespace WithInitial

instance [IsFilteredOrEmpty C] : IsFiltered (WithInitial C) :=
  have := IsCofiltered.of_equivalence (opEquiv C).symm
  isFiltered_of_isCofiltered_op _

end WithInitial

end CategoryTheory
