/-
Copyright (c) 2024 Shanghe Chen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Shanghe Chen
-/
import Mathlib.CategoryTheory.Products.Basic
import Mathlib.CategoryTheory.DiscreteCategory

/-!
# The left/right unitor equivalences `1 √ó C ‚âå C` and `C √ó 1 ‚âå C`.
-/

universe w v u

open CategoryTheory

namespace CategoryTheory.prod

variable (C : Type u) [Category.{v} C]

/-- The left unitor functor `1 √ó C ‚•§ C` -/
@[simps]
def leftUnitor : Discrete (PUnit : Type w) √ó C ‚•§ C where
  obj X := X.2
  map f := f.2

/-- The right unitor functor `C √ó 1 ‚•§ C` -/
@[simps]
def rightUnitor : C √ó Discrete (PUnit : Type w) ‚•§ C where
  obj X := X.1
  map f := f.1

/-- The left inverse unitor `C ‚•§ 1 √ó C` -/
@[simps]
def leftInverseUnitor : C ‚•§ Discrete (PUnit : Type w) √ó C where
  obj X := ‚ü®‚ü®PUnit.unit‚ü©, X‚ü©
  map f := ‚ü®ùüô _, f‚ü©

/-- The right inverse unitor `C ‚•§ C √ó 1` -/
@[simps]
def rightInverseUnitor : C ‚•§ C √ó Discrete (PUnit : Type w) where
  obj X := ‚ü®X, ‚ü®PUnit.unit‚ü©‚ü©
  map f := ‚ü®f, ùüô _‚ü©

/-- The equivalence of categories expressing left unity of products of categories. -/
@[simps]
def leftUnitorEquivalence : Discrete (PUnit : Type w) √ó C ‚âå C where
  functor := leftUnitor C
  inverse := leftInverseUnitor C
  unitIso := Iso.refl _
  counitIso := Iso.refl _

/-- The equivalence of categories expressing right unity of products of categories. -/
@[simps]
def rightUnitorEquivalence : C √ó Discrete (PUnit : Type w) ‚âå C where
  functor := rightUnitor C
  inverse := rightInverseUnitor C
  unitIso := Iso.refl _
  counitIso := Iso.refl _

instance leftUnitor_isEquivalence : (leftUnitor C).IsEquivalence :=
  (leftUnitorEquivalence C).isEquivalence_functor

instance rightUnitor_isEquivalence : (rightUnitor C).IsEquivalence :=
  (rightUnitorEquivalence C).isEquivalence_functor

end CategoryTheory.prod
