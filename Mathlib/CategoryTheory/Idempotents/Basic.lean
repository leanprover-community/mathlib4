/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou

! This file was ported from Lean 3 source module category_theory.idempotents.basic
! leanprover-community/mathlib commit 3a061790136d13594ec10c7c90d202335ac5d854
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.CategoryTheory.Abelian.Basic

/-!
# Idempotent complete categories

In this file, we define the notion of idempotent complete categories
(also known as Karoubian categories, or pseudoabelian in the case of
preadditive categories).

## Main definitions

- `is_idempotent_complete C` expresses that `C` is idempotent complete, i.e.
all idempotents in `C` split. Other characterisations of idempotent completeness are given
by `is_idempotent_complete_iff_has_equalizer_of_id_and_idempotent` and
`is_idempotent_complete_iff_idempotents_have_kernels`.
- `is_idempotent_complete_of_abelian` expresses that abelian categories are
idempotent complete.
- `is_idempotent_complete_iff_of_equivalence` expresses that if two categories `C` and `D`
are equivalent, then `C` is idempotent complete iff `D` is.
- `is_idempotent_complete_iff_opposite` expresses that `C·µí·µñ` is idempotent complete
iff `C` is.

## References
* [Stacks: Karoubian categories] https://stacks.math.columbia.edu/tag/09SF

-/


open CategoryTheory

open CategoryTheory.Category

open CategoryTheory.Limits

open CategoryTheory.Preadditive

open Opposite

namespace CategoryTheory

variable (C : Type _) [Category C]

/-- A category is idempotent complete iff all idempotent endomorphisms `p`
split as a composition `p = e ‚â´ i` with `i ‚â´ e = ùüô _` -/
class IsIdempotentComplete : Prop where
  idempotents_split :
    ‚àÄ (X : C) (p : X ‚ü∂ X), p ‚â´ p = p ‚Üí ‚àÉ (Y : C)(i : Y ‚ü∂ X)(e : X ‚ü∂ Y), i ‚â´ e = ùüô Y ‚àß e ‚â´ i = p
#align category_theory.is_idempotent_complete CategoryTheory.IsIdempotentComplete

namespace Idempotents

/-- A category is idempotent complete iff for all idempotent endomorphisms,
the equalizer of the identity and this idempotent exists. -/
theorem isIdempotentComplete_iff_hasEqualizer_of_id_and_idempotent :
    IsIdempotentComplete C ‚Üî ‚àÄ (X : C) (p : X ‚ü∂ X), p ‚â´ p = p ‚Üí HasEqualizer (ùüô X) p :=
  by
  constructor
  ¬∑ intro
    intro X p hp
    rcases is_idempotent_complete.idempotents_split X p hp with ‚ü®Y, i, e, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©
    exact
      ‚ü®Nonempty.intro
          { Cone := fork.of_Œπ i (show i ‚â´ ùüô X = i ‚â´ p by rw [comp_id, ‚Üê h‚ÇÇ, ‚Üê assoc, h‚ÇÅ, id_comp])
            IsLimit := by
              apply fork.is_limit.mk'
              intro s
              refine' ‚ü®s.Œπ ‚â´ e, _‚ü©
              constructor
              ¬∑ erw [assoc, h‚ÇÇ, ‚Üê limits.fork.condition s, comp_id]
              ¬∑ intro m hm
                rw [fork.Œπ_of_Œπ] at hm
                rw [‚Üê hm]
                simp only [‚Üê hm, assoc, h‚ÇÅ]
                exact (comp_id m).symm }‚ü©
  ¬∑ intro h
    refine' ‚ü®_‚ü©
    intro X p hp
    haveI := h X p hp
    use equalizer (ùüô X) p
    use equalizer.Œπ (ùüô X) p
    use equalizer.lift p (show p ‚â´ ùüô X = p ‚â´ p by rw [hp, comp_id])
    constructor
    ¬∑ ext
      rw [assoc, equalizer.lift_Œπ, id_comp]
      conv =>
        rhs
        erw [‚Üê comp_id (equalizer.Œπ (ùüô X) p)]
      exact (limits.fork.condition (equalizer.fork (ùüô X) p)).symm
    ¬∑ rw [equalizer.lift_Œπ]
#align category_theory.idempotents.is_idempotent_complete_iff_has_equalizer_of_id_and_idempotent CategoryTheory.Idempotents.isIdempotentComplete_iff_hasEqualizer_of_id_and_idempotent

variable {C}

/-- In a preadditive category, when `p : X ‚ü∂ X` is idempotent,
then `ùüô X - p` is also idempotent. -/
theorem idem_of_id_sub_idem [Preadditive C] {X : C} (p : X ‚ü∂ X) (hp : p ‚â´ p = p) :
    (ùüô _ - p) ‚â´ (ùüô _ - p) = ùüô _ - p := by
  simp only [comp_sub, sub_comp, id_comp, comp_id, hp, sub_self, sub_zero]
#align category_theory.idempotents.idem_of_id_sub_idem CategoryTheory.Idempotents.idem_of_id_sub_idem

variable (C)

/-- A preadditive category is pseudoabelian iff all idempotent endomorphisms have a kernel. -/
theorem isIdempotentComplete_iff_idempotents_have_kernels [Preadditive C] :
    IsIdempotentComplete C ‚Üî ‚àÄ (X : C) (p : X ‚ü∂ X), p ‚â´ p = p ‚Üí HasKernel p :=
  by
  rw [is_idempotent_complete_iff_has_equalizer_of_id_and_idempotent]
  constructor
  ¬∑ intro h X p hp
    haveI := h X (ùüô _ - p) (idem_of_id_sub_idem p hp)
    convert has_kernel_of_has_equalizer (ùüô X) (ùüô X - p)
    rw [sub_sub_cancel]
  ¬∑ intro h X p hp
    haveI : has_kernel (ùüô _ - p) := h X (ùüô _ - p) (idem_of_id_sub_idem p hp)
    apply preadditive.has_equalizer_of_has_kernel
#align category_theory.idempotents.is_idempotent_complete_iff_idempotents_have_kernels CategoryTheory.Idempotents.isIdempotentComplete_iff_idempotents_have_kernels

/-- An abelian category is idempotent complete. -/
instance (priority := 100) isIdempotentComplete_of_abelian (D : Type _) [Category D] [Abelian D] :
    IsIdempotentComplete D :=
  by
  rw [is_idempotent_complete_iff_idempotents_have_kernels]
  intros
  infer_instance
#align category_theory.idempotents.is_idempotent_complete_of_abelian CategoryTheory.Idempotents.isIdempotentComplete_of_abelian

variable {C}

theorem split_imp_of_iso {X X' : C} (œÜ : X ‚âÖ X') (p : X ‚ü∂ X) (p' : X' ‚ü∂ X')
    (hpp' : p ‚â´ œÜ.Hom = œÜ.Hom ‚â´ p') (h : ‚àÉ (Y : C)(i : Y ‚ü∂ X)(e : X ‚ü∂ Y), i ‚â´ e = ùüô Y ‚àß e ‚â´ i = p) :
    ‚àÉ (Y' : C)(i' : Y' ‚ü∂ X')(e' : X' ‚ü∂ Y'), i' ‚â´ e' = ùüô Y' ‚àß e' ‚â´ i' = p' :=
  by
  rcases h with ‚ü®Y, i, e, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©
  use Y, i ‚â´ œÜ.hom, œÜ.inv ‚â´ e
  constructor
  ¬∑ slice_lhs 2 3 => rw [œÜ.hom_inv_id]
    rw [id_comp, h‚ÇÅ]
  ¬∑ slice_lhs 2 3 => rw [h‚ÇÇ]
    rw [hpp', ‚Üê assoc, œÜ.inv_hom_id, id_comp]
#align category_theory.idempotents.split_imp_of_iso CategoryTheory.Idempotents.split_imp_of_iso

theorem split_iff_of_iso {X X' : C} (œÜ : X ‚âÖ X') (p : X ‚ü∂ X) (p' : X' ‚ü∂ X')
    (hpp' : p ‚â´ œÜ.Hom = œÜ.Hom ‚â´ p') :
    (‚àÉ (Y : C)(i : Y ‚ü∂ X)(e : X ‚ü∂ Y), i ‚â´ e = ùüô Y ‚àß e ‚â´ i = p) ‚Üî
      ‚àÉ (Y' : C)(i' : Y' ‚ü∂ X')(e' : X' ‚ü∂ Y'), i' ‚â´ e' = ùüô Y' ‚àß e' ‚â´ i' = p' :=
  by
  constructor
  ¬∑ exact split_imp_of_iso œÜ p p' hpp'
  ¬∑ apply split_imp_of_iso œÜ.symm p' p
    rw [‚Üê comp_id p, ‚Üê œÜ.hom_inv_id]
    slice_rhs 2 3 => rw [hpp']
    slice_rhs 1 2 => erw [œÜ.inv_hom_id]
    simpa only [id_comp]
#align category_theory.idempotents.split_iff_of_iso CategoryTheory.Idempotents.split_iff_of_iso

theorem Equivalence.isIdempotentComplete {D : Type _} [Category D] (Œµ : C ‚âå D)
    (h : IsIdempotentComplete C) : IsIdempotentComplete D :=
  by
  refine' ‚ü®_‚ü©
  intro X' p hp
  let œÜ := Œµ.counit_iso.symm.app X'
  erw [split_iff_of_iso œÜ p (œÜ.inv ‚â´ p ‚â´ œÜ.hom)
      (by
        slice_rhs 1 2 => rw [œÜ.hom_inv_id]
        rw [id_comp])]
  rcases is_idempotent_complete.idempotents_split (Œµ.inverse.obj X') (Œµ.inverse.map p)
      (by rw [‚Üê Œµ.inverse.map_comp, hp]) with
    ‚ü®Y, i, e, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©
  use Œµ.functor.obj Y, Œµ.functor.map i, Œµ.functor.map e
  constructor
  ¬∑ rw [‚Üê Œµ.functor.map_comp, h‚ÇÅ, Œµ.functor.map_id]
  ¬∑ simpa only [‚Üê Œµ.functor.map_comp, h‚ÇÇ, equivalence.fun_inv_map]
#align category_theory.idempotents.equivalence.is_idempotent_complete CategoryTheory.Idempotents.Equivalence.isIdempotentComplete

/-- If `C` and `D` are equivalent categories, that `C` is idempotent complete iff `D` is. -/
theorem isIdempotentComplete_iff_of_equivalence {D : Type _} [Category D] (Œµ : C ‚âå D) :
    IsIdempotentComplete C ‚Üî IsIdempotentComplete D :=
  by
  constructor
  ¬∑ exact equivalence.is_idempotent_complete Œµ
  ¬∑ exact equivalence.is_idempotent_complete Œµ.symm
#align category_theory.idempotents.is_idempotent_complete_iff_of_equivalence CategoryTheory.Idempotents.isIdempotentComplete_iff_of_equivalence

theorem isIdempotentComplete_of_isIdempotentComplete_opposite (h : IsIdempotentComplete C·µí·µñ) :
    IsIdempotentComplete C := by
  refine' ‚ü®_‚ü©
  intro X p hp
  rcases is_idempotent_complete.idempotents_split (op X) p.op (by rw [‚Üê op_comp, hp]) with
    ‚ü®Y, i, e, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©
  use Y.unop, e.unop, i.unop
  constructor
  ¬∑ simpa only [‚Üê unop_comp, h‚ÇÅ]
  ¬∑ simpa only [‚Üê unop_comp, h‚ÇÇ]
#align category_theory.idempotents.is_idempotent_complete_of_is_idempotent_complete_opposite CategoryTheory.Idempotents.isIdempotentComplete_of_isIdempotentComplete_opposite

theorem isIdempotentComplete_iff_opposite : IsIdempotentComplete C·µí·µñ ‚Üî IsIdempotentComplete C :=
  by
  constructor
  ¬∑ exact is_idempotent_complete_of_is_idempotent_complete_opposite
  ¬∑ intro h
    apply is_idempotent_complete_of_is_idempotent_complete_opposite
    rw [is_idempotent_complete_iff_of_equivalence (op_op_equivalence C)]
    exact h
#align category_theory.idempotents.is_idempotent_complete_iff_opposite CategoryTheory.Idempotents.isIdempotentComplete_iff_opposite

instance [IsIdempotentComplete C] : IsIdempotentComplete C·µí·µñ := by
  rwa [is_idempotent_complete_iff_opposite]

end Idempotents

end CategoryTheory

