/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Presentable.LocallyPresentable
import Mathlib.CategoryTheory.ObjectProperty.ColimitsCardinalClosure
import Mathlib.CategoryTheory.ObjectProperty.Equivalence
import Mathlib.CategoryTheory.Functor.KanExtension.Dense

/-!
# Locally presentable categories and strong generators

In this file, we show that a category is locally `Œ∫`-presentable iff
it is cocomplete and has a strong generator consisting of `Œ∫`-presentable objects.
This is theorem 1.20 in the book by Ad√°mek and Rosick√Ω.

In particular, if a category if locally `Œ∫`-presentable, if it also
locally `Œ∫'`-presentable for any regular cardinal `Œ∫'` such that `Œ∫ ‚â§ Œ∫'`.

## References
* [Ad√°mek, J. and Rosick√Ω, J., *Locally presentable and accessible categories*][Adamek_Rosicky_1994]

-/

universe w v' v u' u

namespace CategoryTheory

-- to be moved
instance CostructuredArrow.essentiallySmall {C : Type u} {D : Type u'} [Category.{v} C]
    [Category.{v'} D] (F : C ‚•§ D) (Y : D) [EssentiallySmall.{w} C] [LocallySmall.{w} D] :
    EssentiallySmall.{w} (CostructuredArrow F Y) := by
  rw [‚Üê essentiallySmall_congr
    (CostructuredArrow.pre (equivSmallModel.{w} C).inverse F Y).asEquivalence]
  exact essentiallySmall_of_small_of_locallySmall _

open Limits

variable {C : Type u} [Category.{v} C]

variable (Œ∫) in
lemma IsCardinalFilteredGenerator.of_isDense
    [LocallySmall.{w} C] {J : Type u'} [Category.{v'} J] [EssentiallySmall.{w} J]
    (F : J ‚•§ C) [F.IsDense] (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular]
    [‚àÄ j, IsCardinalPresentable (F.obj j) Œ∫]
    [‚àÄ (X : C), IsCardinalFiltered (CostructuredArrow F X) Œ∫] :
    ((‚ä§ : ObjectProperty J).map F).IsCardinalFilteredGenerator Œ∫ where
  le_isCardinalPresentable := by
    rintro X ‚ü®Y, hY, ‚ü®e‚ü©‚ü©
    exact isCardinalPresentable_of_iso e Œ∫
  exists_colimitsOfShape X := by
    have ip := F.denseAt X
    let e := equivSmallModel.{w} (CostructuredArrow F X)
    exact ‚ü®SmallModel.{w} (CostructuredArrow F X), inferInstance,
      IsCardinalFiltered.of_equivalence Œ∫ e,
      ‚ü®{  diag := _
          Œπ := _
          isColimit := (F.denseAt X).whiskerEquivalence e.symm
          prop_diag_obj j := ‚ü®_, by simp, ‚ü®Iso.refl _‚ü©‚ü© }‚ü©‚ü©

variable (Œ∫) in
lemma IsCardinalFilteredGenerator.of_isDense_Œπ
    (P : ObjectProperty C) [ObjectProperty.EssentiallySmall.{w} P]
    (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular] [P.Œπ.IsDense]
    [LocallySmall.{w} C]
    (hP : P ‚â§ isCardinalPresentable C Œ∫)
    [‚àÄ (X : C), IsCardinalFiltered (CostructuredArrow P.Œπ X) Œ∫] :
    P.IsCardinalFilteredGenerator Œ∫ := by
  rw [‚Üê ObjectProperty.IsCardinalFilteredGenerator.isoClosure_iff]
  have (X : P.FullSubcategory) : IsCardinalPresentable (P.Œπ.obj X) Œ∫ := hP _ X.property
  simpa using IsCardinalFilteredGenerator.of_isDense P.Œπ Œ∫

instance ObjectProperty.isCardinalFiltered_costructuredArrow_colimitsCardinalClosure_Œπ
    (P : ObjectProperty C) (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular]
    [HasColimitsOfSize.{w, w} C] (X : C) :
    IsCardinalFiltered (CostructuredArrow (P.colimitsCardinalClosure Œ∫).Œπ X) Œ∫ where
  nonempty_cocone {J} _ K hJ := ‚ü®by
    have := ObjectProperty.isClosedUnderColimitsOfShape_colimitsCardinalClosure P Œ∫ J hJ
    exact colimit.cocone K‚ü©

instance ObjectProperty.isFiltered_costructuredArrow_colimitsCardinalClosure_Œπ
    (P : ObjectProperty C) (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular]
    [HasColimitsOfSize.{w, w} C] (X : C) :
    IsFiltered (CostructuredArrow (P.colimitsCardinalClosure Œ∫).Œπ X) :=
  isFiltered_of_isCardinalFiltered _ Œ∫

variable {Œ∫ : Cardinal.{w}} [Fact Œ∫.IsRegular]

lemma ObjectProperty.IsStrongGenerator.isDense_colimitsCardinalClosure_Œπ
    [HasColimitsOfSize.{w, w} C] [LocallySmall.{w} C]
    {P : ObjectProperty C} [ObjectProperty.Small.{w} P] (hS‚ÇÅ : P.IsStrongGenerator)
    (hS‚ÇÇ : P ‚â§ isCardinalPresentable C Œ∫) :
    (P.colimitsCardinalClosure Œ∫).Œπ.IsDense where
  isDenseAt X := by
    let E := (Functor.LeftExtension.mk _ (P.colimitsCardinalClosure Œ∫).Œπ.rightUnitor.inv)
    have : HasColimitsOfShape (CostructuredArrow (P.colimitsCardinalClosure Œ∫).Œπ X) C :=
      hasColimitsOfShape_of_equivalence
        (equivSmallModel.{w} (CostructuredArrow (P.colimitsCardinalClosure Œ∫).Œπ X)).symm
    have : Mono (colimit.desc _ (E.coconeAt X)) := by
      let Œ¶ := CostructuredArrow.proj (P.colimitsCardinalClosure Œ∫).Œπ X ‚ãô
        (P.colimitsCardinalClosure Œ∫).Œπ
      rw [hS‚ÇÅ.isSeparating.mono_iff]
      intro G hG (g‚ÇÅ : G ‚ü∂ colimit Œ¶) (g‚ÇÇ : G ‚ü∂ colimit Œ¶)
        (h : g‚ÇÅ ‚â´ colimit.desc Œ¶ (E.coconeAt X) = g‚ÇÇ ‚â´ colimit.desc Œ¶ (E.coconeAt X))
      have : IsCardinalPresentable G Œ∫ := hS‚ÇÇ _ hG
      obtain ‚ü®j, œÜ‚ÇÅ, œÜ‚ÇÇ, rfl, rfl‚ü© :
          ‚àÉ (j :  CostructuredArrow (P.colimitsCardinalClosure Œ∫).Œπ X)
            (œÜ‚ÇÅ œÜ‚ÇÇ : G ‚ü∂ Œ¶.obj j), œÜ‚ÇÅ ‚â´ colimit.Œπ _ _ = g‚ÇÅ ‚àß œÜ‚ÇÇ ‚â´ colimit.Œπ _ _ = g‚ÇÇ := by
        obtain ‚ü®j‚ÇÅ, f‚ÇÅ, hf‚ÇÅ‚ü© :=
          IsCardinalPresentable.exists_hom_of_isColimit Œ∫ (colimit.isColimit _) g‚ÇÅ
        obtain ‚ü®j‚ÇÇ, f‚ÇÇ, hf‚ÇÇ‚ü© :=
          IsCardinalPresentable.exists_hom_of_isColimit Œ∫ (colimit.isColimit _) g‚ÇÇ
        exact ‚ü®IsFiltered.max j‚ÇÅ j‚ÇÇ, f‚ÇÅ ‚â´ Œ¶.map (IsFiltered.leftToMax j‚ÇÅ j‚ÇÇ),
          f‚ÇÇ ‚â´ Œ¶.map (IsFiltered.rightToMax j‚ÇÅ j‚ÇÇ), by simpa, by simpa‚ü©
      have : (P.colimitsCardinalClosure Œ∫).IsClosedUnderColimitsOfShape WalkingParallelPair := by
        apply ObjectProperty.isClosedUnderColimitsOfShape_colimitsCardinalClosure
        refine .of_le ?_ (Cardinal.IsRegular.aleph0_le Fact.out)
        simp only [hasCardinalLT_aleph0_iff]
        infer_instance
      let obj : (P.colimitsCardinalClosure Œ∫).FullSubcategory :=
        ‚ü®coequalizer œÜ‚ÇÅ œÜ‚ÇÇ, by
          apply ObjectProperty.prop_colimit
          rintro (_ | _)
          ¬∑ exact P.le_colimitsCardinalClosure _ _ hG
          ¬∑ exact j.left.2‚ü©
      let a : (P.colimitsCardinalClosure Œ∫).Œπ.obj obj ‚ü∂ X :=
        coequalizer.desc ((E.coconeAt X).Œπ.app j) (by simpa using h)
      let œà : j ‚ü∂ CostructuredArrow.mk a :=
        CostructuredArrow.homMk (coequalizer.œÄ _ _) (by simp [E, a])
      rw [‚Üê colimit.w Œ¶ œà]
      apply coequalizer.condition_assoc
    have : IsIso (colimit.desc _ (E.coconeAt X)) := hS‚ÇÅ.isIso_of_mono _ (fun Y hY g ‚Ü¶ by
      let Œ≥ : CostructuredArrow (P.colimitsCardinalClosure Œ∫).Œπ X :=
        CostructuredArrow.mk (Y := ‚ü®Y, P.le_colimitsCardinalClosure  _ _ hY‚ü©) (by exact g)
      exact ‚ü®colimit.Œπ (CostructuredArrow.proj _ _ ‚ãô (P.colimitsCardinalClosure Œ∫).Œπ) Œ≥,
        by simp [Œ≥, E]‚ü©)
    exact ‚ü®IsColimit.ofIsoColimit (colimit.isColimit _) (Cocones.ext
      (asIso (colimit.desc _ (E.coconeAt X))))‚ü©

lemma ObjectProperty.colimitsCardinalClosure_le_isCardinalPresentable
    [LocallySmall.{w} C] (P : ObjectProperty C) (hP : P ‚â§ isCardinalPresentable C Œ∫) :
    P.colimitsCardinalClosure Œ∫ ‚â§ isCardinalPresentable C Œ∫ :=
  P.colimitsCardinalClosure_le Œ∫
    (fun _ _ hJ ‚Ü¶ isClosedUnderColimitsOfShape_isCardinalPresentable C hJ) hP

lemma IsStrongGenerator.colimitsCardinalClosure_eq_isCardinalPresentable
    [HasColimitsOfSize.{w, w} C] [LocallySmall.{w} C]
    {P : ObjectProperty C} [ObjectProperty.Small.{w} P] (hS‚ÇÅ : P.IsStrongGenerator)
    (hS‚ÇÇ : P ‚â§ isCardinalPresentable C Œ∫) :
    isCardinalPresentable C Œ∫ = P.colimitsCardinalClosure Œ∫ := by
  refine le_antisymm ?_ (P.colimitsCardinalClosure_le_isCardinalPresentable hS‚ÇÇ)
  have := hS‚ÇÅ.isDense_colimitsCardinalClosure_Œπ hS‚ÇÇ
  intro X hX
  rw [isCardinalPresentable_iff] at hX
  rw [‚Üê (P.colimitsCardinalClosure Œ∫).retractClosure_eq_self]
  obtain ‚ü®j, œÜ, hœÜ‚ü© := IsCardinalPresentable.exists_hom_of_isColimit Œ∫
    ((P.colimitsCardinalClosure Œ∫).Œπ.denseAt X) (ùüô X)
  exact ‚ü®_, j.left.2, ‚ü®{ i := _, r := _, retract := hœÜ }‚ü©‚ü©

namespace IsCardinalLocallyPresentable

variable (C Œ∫) in
lemma iff_exists_isStrongGenerator [HasColimitsOfSize.{w, w} C] [LocallySmall.{w} C] :
    IsCardinalLocallyPresentable C Œ∫ ‚Üî
      ‚àÉ (P : ObjectProperty C) (_ : ObjectProperty.Small.{w} P), P.IsStrongGenerator ‚àß
        P ‚â§ isCardinalPresentable C Œ∫ := by
  refine ‚ü®fun _ ‚Ü¶ ?_, fun ‚ü®P, _, hS‚ÇÅ, hS‚ÇÇ‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®P, _, hP‚ü© := HasCardinalFilteredGenerator.exists_small_generator C Œ∫
    exact ‚ü®_, inferInstance, hP.isStrongGenerator, hP.le_isCardinalPresentable‚ü©
  ¬∑ have := hS‚ÇÅ.isDense_colimitsCardinalClosure_Œπ hS‚ÇÇ
    have : HasCardinalFilteredGenerator C Œ∫ :=
      { exists_generator := ‚ü®(P.colimitsCardinalClosure Œ∫), inferInstance,
            IsCardinalFilteredGenerator.of_isDense_Œπ _ _
              (P.colimitsCardinalClosure_le_isCardinalPresentable hS‚ÇÇ)‚ü©
          }
    constructor

variable [IsCardinalLocallyPresentable C Œ∫]

variable (C) in
lemma of_le {Œ∫' : Cardinal.{w}} [Fact Œ∫'.IsRegular]
    (h : Œ∫ ‚â§ Œ∫') :
    IsCardinalLocallyPresentable C Œ∫' := by
  rw [iff_exists_isStrongGenerator]
  obtain ‚ü®S, _, h‚ÇÅ, h‚ÇÇ‚ü© := (iff_exists_isStrongGenerator C Œ∫).1 inferInstance
  exact ‚ü®S, inferInstance, h‚ÇÅ, h‚ÇÇ.trans (isCardinalPresentable_monotone _ h)‚ü©

end IsCardinalLocallyPresentable

end CategoryTheory
