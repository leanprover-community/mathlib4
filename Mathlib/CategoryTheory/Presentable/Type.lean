/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Presentable.StrongGenerator
import Mathlib.CategoryTheory.Generator.Type

/-!
# The category of types is locally presentable

-/

universe u

namespace CategoryTheory.Types

open Opposite Limits

variable (Œ∫ : Cardinal.{u}) [Fact Œ∫.IsRegular]

instance : IsCardinalPresentable PUnit.{u + 1} Œ∫ where
  preservesColimitOfShape J _ _ := by
    let e : coyoneda.obj (op (PUnit.{u + 1})) ‚âÖ ùü≠ _ :=
      NatIso.ofComponents (fun X ‚Ü¶ Equiv.toIso
        { toFun f := f .unit
          invFun x _ := x })
    exact preservesColimitsOfShape_of_natIso e.symm

lemma isStrongGenerator_punit :
    (ObjectProperty.singleton (PUnit.{u + 1})).IsStrongGenerator  := by
  rw [ObjectProperty.isStrongGenerator_iff]
  refine ‚ü®isSeparator_punit, fun _ _ i hi‚ÇÅ hi‚ÇÇ ‚Ü¶ ?_‚ü©
  ¬∑ rw [mono_iff_injective] at hi‚ÇÅ
    rw [isIso_iff_bijective]
    refine ‚ü®hi‚ÇÅ, fun y ‚Ü¶ ?_‚ü©
    obtain ‚ü®f, hf‚ü© := hi‚ÇÇ PUnit ‚ü®.unit‚ü© (fun _ ‚Ü¶ y)
    exact ‚ü®f .unit, congr_fun hf .unit‚ü©

instance : IsCardinalLocallyPresentable (Type u) Œ∫ := by
  rw [IsCardinalLocallyPresentable.iff_exists_isStrongGenerator]
  exact ‚ü®.singleton PUnit, inferInstance, isStrongGenerator_punit,
    by simp [isCardinalPresentable_iff]; infer_instance‚ü©

instance : IsLocallyPresentable.{u} (Type u) where
  exists_cardinal := ‚ü®_, Cardinal.fact_isRegular_aleph0, inferInstance‚ü©

end CategoryTheory.Types
