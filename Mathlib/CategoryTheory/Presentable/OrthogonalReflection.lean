/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Presentable.Basic
import Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer
import Mathlib.CategoryTheory.Limits.Shapes.RegularMono
import Mathlib.CategoryTheory.Localization.Bousfield
import Mathlib.CategoryTheory.ObjectProperty.ColimitsOfShape
import Mathlib.CategoryTheory.SmallObject.Iteration.Basic

/-!
# The Orthogonal-reflection construction

Given `W : MorphismProperty C` (which should be small) and assuming the existence
of certain colimits in `C`, we construct a morphism `toSucc W Z : Z ‚ü∂ succ W Z` for
any `Z : C`. This morphism belongs to `LeftBousfield.W W.isLocal` and
is an isomorphism iff `Z` belongs to `W.isLocal`.

## References
* [Ad√°mek, J. and Rosick√Ω, J., *Locally presentable and accessible categories*][Adamek_Rosicky_1994]

-/

universe w v' u' v u

namespace CategoryTheory

open Limits Localization

variable {C : Type u} [Category.{v} C] (W : MorphismProperty C)

lemma MorphismProperty.isClosedUnderColimitsOfShape_rightOrthogonal
    (J : Type u) [Category.{v} J] [EssentiallySmall.{w} J]
    (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular] [IsCardinalFiltered J Œ∫]
    (hW : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), W f ‚Üí IsCardinalPresentable X Œ∫ ‚àß IsCardinalPresentable Y Œ∫) :
    W.isLocal.IsClosedUnderColimitsOfShape J where
  colimitsOfShape_le := fun Z ‚ü®p‚ü© X Y f hf ‚Ü¶ by
    obtain ‚ü®_, _‚ü© := hW f hf
    refine ‚ü®fun g‚ÇÅ g‚ÇÇ h ‚Ü¶ ?_, fun g ‚Ü¶ ?_‚ü©
    ¬∑ obtain ‚ü®j‚ÇÅ, g‚ÇÅ, rfl‚ü© := IsCardinalPresentable.exists_hom_of_isColimit Œ∫ p.isColimit g‚ÇÅ
      obtain ‚ü®j‚ÇÇ, g‚ÇÇ, rfl‚ü© := IsCardinalPresentable.exists_hom_of_isColimit Œ∫ p.isColimit g‚ÇÇ
      dsimp at h ‚ä¢
      obtain ‚ü®j‚ÇÉ, u, v, huv‚ü© :=
        IsCardinalPresentable.exists_eq_of_isColimit Œ∫ p.isColimit (f ‚â´ g‚ÇÅ) (f ‚â´ g‚ÇÇ)
          (by simpa)
      simp only [Category.assoc] at huv
      rw [‚Üê p.w u, ‚Üê p.w v, reassoc_of% ((p.prop_diag_obj j‚ÇÉ _ hf).1 huv)]
    ¬∑ obtain ‚ü®j, g, rfl‚ü© := IsCardinalPresentable.exists_hom_of_isColimit Œ∫ p.isColimit g
      obtain ‚ü®g, rfl‚ü© := (p.prop_diag_obj j _ hf).2 g
      exact ‚ü®g ‚â´ p.Œπ.app j, by simp‚ü©

namespace OrthogonalReflection

variable (Z : C)

/-- The index type parametrising the data of a morphism `f : X ‚ü∂ Y` satisfying `W`
and a morphism `X ‚ü∂ Z`. -/
def D‚ÇÅ : Type _ := Œ£ (f : W.toSet), f.1.left ‚ü∂ Z

variable {W Z} in
/-- If `d : D‚ÇÅ W Z` corresponds to the data of `f : X ‚ü∂ Y` satisfying `W` and
of a morphism `X ‚ü∂ Z`, this is the object `X`. -/
def D‚ÇÅ.obj‚ÇÅ (d : D‚ÇÅ W Z) : C := d.1.1.left

variable {W Z} in
/-- If `d : D‚ÇÅ W Z` corresponds to the data of `f : X ‚ü∂ Y` satisfying `W` and
of a morphism `X ‚ü∂ Z`, this is the object `Y`. -/
def D‚ÇÅ.obj‚ÇÇ (d : D‚ÇÅ W Z) : C := d.1.1.right

variable [HasCoproduct (D‚ÇÅ.obj‚ÇÅ (W := W) (Z := Z))]

/-- Considering all diagrams consisting of a morphism `f : X ‚ü∂ Y` satisfying `W`
and of a morphism `d : X ‚ü∂ Z`, this is the morphism from the coproduct of
all these `X` objects to `Z` given by these morphisms `d`. -/
noncomputable abbrev D‚ÇÅ.l : ‚àê (obj‚ÇÅ (W := W) (Z := Z)) ‚ü∂ Z :=
  Sigma.desc (fun d ‚Ü¶ d.2)

variable {W Z} in
/-- The inclusion of a summand in `‚àê obj‚ÇÅ`. -/
noncomputable abbrev D‚ÇÅ.ŒπLeft {X Y : C} (f : X ‚ü∂ Y) (hf : W f) (g : X ‚ü∂ Z) :
    X ‚ü∂ ‚àê (obj‚ÇÅ (W := W) (Z := Z)) :=
  Sigma.Œπ (obj‚ÇÅ (W := W) (Z := Z)) ‚ü®‚ü®Arrow.mk f, hf‚ü©, g‚ü©

variable {W Z} in
@[reassoc]
lemma D‚ÇÅ.ŒπLeft_comp_l {X Y : C} (f : X ‚ü∂ Y) (hf : W f) (g : X ‚ü∂ Z) :
    D‚ÇÅ.ŒπLeft f hf g ‚â´ D‚ÇÅ.l W Z = g := by
  apply Sigma.Œπ_desc

variable [HasCoproduct (D‚ÇÅ.obj‚ÇÇ (W := W) (Z := Z))]

/-- The coproduct of all the morphisms `f` indexed by all diagrams
consisting of a morphism `f : X ‚ü∂ Y` satisfying `W` and of a morphism `d : X ‚ü∂ Z`. -/
noncomputable abbrev D‚ÇÅ.t : ‚àê (obj‚ÇÅ (W := W) (Z := Z)) ‚ü∂ ‚àê (obj‚ÇÇ (W := W) (Z := Z)) :=
  Limits.Sigma.map (fun d ‚Ü¶ d.1.1.hom)

variable {W Z} in
/-- The inclusion of a summand in `‚àê obj‚ÇÇ`. -/
noncomputable abbrev D‚ÇÅ.ŒπRight {X Y : C} (f : X ‚ü∂ Y) (hf : W f) (g : X ‚ü∂ Z) :
    Y ‚ü∂ ‚àê (obj‚ÇÇ (W := W) (Z := Z)) :=
  Sigma.Œπ (obj‚ÇÇ (W := W) (Z := Z)) ‚ü®‚ü®Arrow.mk f, hf‚ü©, g‚ü©

variable {W Z} in
@[reassoc]
lemma D‚ÇÅ.Œπ_comp_t (d : D‚ÇÅ W Z) :
    Sigma.Œπ _ d ‚â´ D‚ÇÅ.t W Z = d.1.1.hom ‚â´ Sigma.Œπ obj‚ÇÇ d := by
  apply Œπ_colimMap

variable {W Z} in
@[reassoc]
lemma D‚ÇÅ.ŒπLeft_comp_t {X Y : C} (f : X ‚ü∂ Y) (hf : W f) (g : X ‚ü∂ Z) :
    D‚ÇÅ.ŒπLeft f hf g ‚â´ D‚ÇÅ.t W Z = f ‚â´ D‚ÇÅ.ŒπRight f hf g := by
  apply Œπ_colimMap

variable [HasPushouts C]

/-- The intermediate object in the definition of the morphism `toSucc W Z : Z ‚ü∂ succ W Z`.
It is the pushout of the following square:
```lean
‚àê D‚ÇÅ.obj‚ÇÅ ‚ü∂ ‚àê D‚ÇÅ.obj‚ÇÇ
   |           |
   v           v
   Z      ‚ü∂   step W Z
```
where the coproduct is taken over all the diagram consisting of a morphism `f : X ‚ü∂ Y`
satisfying `W` and a morphism `X ‚ü∂ Z`. The top map is the coproduct of all of these `f`.
-/
noncomputable abbrev step := pushout (D‚ÇÅ.t W Z) (D‚ÇÅ.l W Z)

/-- The canonical map from `Z` to the pushout of `D‚ÇÅ.t W Z` and `D‚ÇÅ.l W Z`. -/
noncomputable abbrev toStep : Z ‚ü∂ step W Z := pushout.inr _ _

/-- The index type parametrising the data of two morphisms `g‚ÇÅ g‚ÇÇ : Y ‚ü∂ step W Z`, and
a map `f : X ‚ü∂ Y` satisfying `W` such that `f ‚â´ g‚ÇÅ = f ‚â´ g‚ÇÇ`. -/
def D‚ÇÇ : Type _ :=
  Œ£ (f : W.toSet),
    { pq : (f.1.right ‚ü∂ step W Z) √ó (f.1.right ‚ü∂ step W Z) // f.1.hom ‚â´ pq.1 = f.1.hom ‚â´ pq.2 }

/-- The shape of the multicoequalizer of all pairs of morphisms `g‚ÇÅ g‚ÇÇ : Y ‚ü∂ step W Z` with
a `f : X ‚ü∂ Y` satisfying `W` such that `f ‚â´ g‚ÇÅ = f ‚â´ g‚ÇÇ`. -/
@[simps]
def D‚ÇÇ.multispanShape : MultispanShape where
  L := D‚ÇÇ W Z
  R := Unit
  fst _ := .unit
  snd _ := .unit

/-- The diagram of the multicoequalizer of all pair of morphisms `g‚ÇÅ g‚ÇÇ : Y ‚ü∂ step W Z` with
a `f : X ‚ü∂ Y` satisfying `W` such that `f ‚â´ g‚ÇÅ = f ‚â´ g‚ÇÇ`. -/
@[simps]
noncomputable def D‚ÇÇ.multispanIndex : MultispanIndex (multispanShape W Z) C where
  left d := d.1.1.right
  right _ := step W Z
  fst d := d.2.1.1
  snd d := d.2.1.2

variable [HasMulticoequalizer (D‚ÇÇ.multispanIndex W Z)]

/-- The object `succ W Z` is the multicoequalizer of all pairs of morphisms
 `g‚ÇÅ g‚ÇÇ : Y ‚ü∂ step W Z` with a `f : X ‚ü∂ Y` satisfying `W` such that `f ‚â´ g‚ÇÅ = f ‚â´ g‚ÇÇ`. -/
noncomputable abbrev succ := multicoequalizer (D‚ÇÇ.multispanIndex W Z)

/-- The projection from `Z` to the multicoequalizer of all morphisms `g‚ÇÅ g‚ÇÇ : Y ‚ü∂ step W Z` with
a `f : X ‚ü∂ Y` satisfying `W` such that `f ‚â´ g‚ÇÅ = f ‚â´ g‚ÇÇ`. -/
noncomputable abbrev fromStep : step W Z ‚ü∂ succ W Z :=
  Multicoequalizer.œÄ (D‚ÇÇ.multispanIndex W Z) .unit

variable {W Z} in
@[reassoc]
lemma D‚ÇÇ.condition {X Y : C} (f : X ‚ü∂ Y) (hf : W f)
    {g‚ÇÅ g‚ÇÇ : Y ‚ü∂ step W Z} (h : f ‚â´ g‚ÇÅ = f ‚â´ g‚ÇÇ) :
      g‚ÇÅ ‚â´ fromStep W Z = g‚ÇÇ ‚â´ fromStep W Z :=
  Multicoequalizer.condition (D‚ÇÇ.multispanIndex W Z)
    ‚ü®‚ü®Arrow.mk f, hf‚ü©, ‚ü®g‚ÇÅ, g‚ÇÇ‚ü©, h‚ü©

/-- The morphism `Z ‚ü∂ succ W Z`. -/
noncomputable abbrev toSucc : Z ‚ü∂ succ W Z := toStep W Z ‚â´ fromStep W Z

variable {W Z} in
lemma toSucc_injectivity {X Y : C} (f : X ‚ü∂ Y) (hf : W f)
    (g‚ÇÅ g‚ÇÇ : Y ‚ü∂ Z) (hg : f ‚â´ g‚ÇÅ = f ‚â´ g‚ÇÇ) :
    g‚ÇÅ ‚â´ toSucc W Z = g‚ÇÇ ‚â´ toSucc W Z := by
  simpa using D‚ÇÇ.condition f hf (g‚ÇÅ := g‚ÇÅ ‚â´ toStep W Z) (g‚ÇÇ := g‚ÇÇ ‚â´ toStep W Z)
    (by simp [reassoc_of% hg])

variable {W Z} in
lemma toSucc_surjectivity {X Y : C} (f : X ‚ü∂ Y) (hf : W f) (g : X ‚ü∂ Z) :
    ‚àÉ (g' : Y ‚ü∂ succ W Z), f ‚â´ g' = g ‚â´ toSucc W Z :=
  ‚ü®D‚ÇÅ.ŒπRight f hf g ‚â´ pushout.inl _ _ ‚â´ fromStep W Z, by
    simp [‚Üê D‚ÇÅ.ŒπLeft_comp_t_assoc, pushout.condition_assoc]‚ü©

lemma leftBousfieldW_isLocal_toSucc :
    LeftBousfield.W W.isLocal (toSucc W Z) := by
  refine fun T hT ‚Ü¶ ‚ü®fun œÜ‚ÇÅ œÜ‚ÇÇ h ‚Ü¶ ?_, fun g ‚Ü¶ ?_‚ü©
  ¬∑ ext ‚ü®‚ü©
    simp at h
    dsimp
    ext d
    ¬∑ apply (hT d.1.1.hom d.1.2).1
      simp only [‚Üê D‚ÇÅ.Œπ_comp_t_assoc, pushout.condition_assoc, h]
    ¬∑ exact h
  ¬∑ choose f hf using fun (d : D‚ÇÅ W Z) ‚Ü¶ (hT d.1.1.hom d.1.2).2 (d.2 ‚â´ g)
    exact ‚ü®Multicoequalizer.desc _ _ (fun ‚ü®‚ü© ‚Ü¶ pushout.desc (Sigma.desc f) g)
      (fun d ‚Ü¶ (hT d.1.1.hom d.1.2).1 (by simp [reassoc_of% d.2.2])), by simp‚ü©

lemma isIso_toSucc_iff :
    IsIso (toSucc W Z) ‚Üî W.isLocal Z := by
  refine ‚ü®fun _ X Y f hf ‚Ü¶ ?_, fun hZ ‚Ü¶ ?_‚ü©
  ¬∑ refine ‚ü®fun g‚ÇÅ g‚ÇÇ h ‚Ü¶ ?_, fun g ‚Ü¶ ?_‚ü©
    ¬∑ simpa [‚Üê cancel_mono (toSucc W Z)] using
        D‚ÇÇ.condition f hf (g‚ÇÅ := g‚ÇÅ ‚â´ toStep W Z) (g‚ÇÇ := g‚ÇÇ ‚â´ toStep W Z)
          (by simp [reassoc_of% h])
    ¬∑ have hZ := IsIso.hom_inv_id (toSucc W Z)
      simp only [Category.assoc] at hZ
      exact ‚ü®D‚ÇÅ.ŒπRight f hf g ‚â´ pushout.inl _ _ ‚â´ fromStep W Z ‚â´ inv (toSucc W Z),
        by simp [‚Üê D‚ÇÅ.ŒπLeft_comp_t_assoc, pushout.condition_assoc, hZ]‚ü©
  ¬∑ obtain ‚ü®f, hf‚ü© := (leftBousfieldW_isLocal_toSucc W Z _ hZ).2 (ùüô _)
    dsimp at hf
    refine ‚ü®f, hf, ?_‚ü©
    ext ‚ü®‚ü©
    dsimp
    ext d
    ¬∑ simp only [Category.assoc] at hf
      simp only [Category.comp_id, ‚Üê Category.assoc]
      apply D‚ÇÇ.condition _ d.1.2
      simp
      rw [‚Üê D‚ÇÅ.Œπ_comp_t_assoc, pushout.condition_assoc, reassoc_of% hf,
        ‚Üê D‚ÇÅ.Œπ_comp_t_assoc, pushout.condition]
    ¬∑ simp [reassoc_of% hf]

open SmallObject

variable [‚àÄ Z, HasCoproduct (D‚ÇÅ.obj‚ÇÅ (W := W) (Z := Z))]
  [‚àÄ Z, HasCoproduct (D‚ÇÅ.obj‚ÇÇ (W := W) (Z := Z))]
  [‚àÄ Z, HasMulticoequalizer (D‚ÇÇ.multispanIndex W Z)]

/-- The successor structure of the orthogonal-reflection construction. -/
noncomputable def succStruct (Z‚ÇÄ : C) : SuccStruct C where
  X‚ÇÄ := Z‚ÇÄ
  succ Z := succ W Z
  toSucc Z := toSucc W Z

end OrthogonalReflection

end CategoryTheory
