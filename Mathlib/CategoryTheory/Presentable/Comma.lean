/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.CategoryTheory.Presentable.LocallyPresentable
import Mathlib.CategoryTheory.Limits.Comma
import Mathlib.CategoryTheory.Limits.Final
import Mathlib.CategoryTheory.Comma.LocallySmall

/-!
# Comma categories are accessible

-/

universe w v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace CategoryTheory

open Category Limits

namespace Comma

variable {C‚ÇÅ : Type u‚ÇÅ} [Category.{v‚ÇÅ} C‚ÇÅ] {C‚ÇÇ : Type u‚ÇÇ} [Category.{v‚ÇÇ} C‚ÇÇ]
  {D : Type u‚ÇÉ} [Category.{v‚ÇÉ} D] (F‚ÇÅ : C‚ÇÅ ‚•§ D) (F‚ÇÇ : C‚ÇÇ ‚•§ D)

variable (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular]

variable {F‚ÇÅ F‚ÇÇ} in
instance isCardinalPresentable_mk {X‚ÇÅ : C‚ÇÅ} {X‚ÇÇ : C‚ÇÇ}
    [IsCardinalPresentable X‚ÇÅ Œ∫] [IsCardinalPresentable X‚ÇÇ Œ∫]
    [IsCardinalPresentable X‚ÇÅ Œ∫] [IsCardinalPresentable X‚ÇÇ Œ∫]
    (f : F‚ÇÅ.obj X‚ÇÅ ‚ü∂ F‚ÇÇ.obj X‚ÇÇ) :
    IsCardinalPresentable (Comma.mk _ _ f) Œ∫ := by
  -- need that `F‚ÇÅ` (and `F‚ÇÇ` ?) preserve Œ∫-presentable objects
  sorry

section

variable [IsCardinalAccessibleCategory C‚ÇÅ Œ∫] [IsCardinalAccessibleCategory C‚ÇÇ Œ∫]
  [IsCardinalAccessibleCategory D Œ∫]
  [F‚ÇÅ.IsCardinalAccessible Œ∫]

instance hasCardinalFilteredColimits :
    HasCardinalFilteredColimits.{w} (Comma F‚ÇÅ F‚ÇÇ) Œ∫ where
  hasColimitsOfShape J _ _ := by
    have := F‚ÇÅ.preservesColimitsOfShape_of_isCardinalAccessible Œ∫
    infer_instance

instance : (Comma.fst F‚ÇÅ F‚ÇÇ).IsCardinalAccessible Œ∫ where
  preservesColimitOfShape J _ _ := by
    have := F‚ÇÅ.preservesColimitsOfShape_of_isCardinalAccessible Œ∫
    infer_instance

instance : (Comma.snd F‚ÇÅ F‚ÇÇ).IsCardinalAccessible Œ∫ where
  preservesColimitOfShape J _ _ := by
    have := F‚ÇÅ.preservesColimitsOfShape_of_isCardinalAccessible Œ∫
    infer_instance

end

namespace hasCardinalFilteredGenerators

variable {F‚ÇÅ F‚ÇÇ Œ∫} {X‚ÇÅ : C‚ÇÅ} {X‚ÇÇ : C‚ÇÇ} (f : F‚ÇÅ.obj X‚ÇÅ ‚ü∂ F‚ÇÇ.obj X‚ÇÇ)
  (p‚ÇÅ : CardinalFilteredPresentation.{w} X‚ÇÅ Œ∫)
  (p‚ÇÇ : CardinalFilteredPresentation.{w} X‚ÇÇ Œ∫)

structure Index where
  j‚ÇÅ : p‚ÇÅ.J
  j‚ÇÇ : p‚ÇÇ.J
  hom : F‚ÇÅ.obj (p‚ÇÅ.F.obj j‚ÇÅ) ‚ü∂ F‚ÇÇ.obj (p‚ÇÇ.F.obj j‚ÇÇ)
  w : hom ‚â´ F‚ÇÇ.map (p‚ÇÇ.Œπ.app j‚ÇÇ) = F‚ÇÅ.map (p‚ÇÅ.Œπ.app j‚ÇÅ) ‚â´ f

namespace Index

attribute [reassoc (attr := simp)] w

variable {f p‚ÇÅ p‚ÇÇ}

@[ext]
structure Hom (S‚ÇÅ S‚ÇÇ : Index f p‚ÇÅ p‚ÇÇ) where
  m‚ÇÅ : S‚ÇÅ.j‚ÇÅ ‚ü∂ S‚ÇÇ.j‚ÇÅ
  m‚ÇÇ : S‚ÇÅ.j‚ÇÇ ‚ü∂ S‚ÇÇ.j‚ÇÇ
  w : S‚ÇÅ.hom ‚â´ F‚ÇÇ.map (p‚ÇÇ.F.map m‚ÇÇ) = F‚ÇÅ.map (p‚ÇÅ.F.map m‚ÇÅ) ‚â´ S‚ÇÇ.hom := by aesop_cat

attribute [reassoc] Hom.w
attribute [local simp] Hom.w_assoc Hom.w

instance : Category (Index f p‚ÇÅ p‚ÇÇ) where
  Hom := Hom
  id S := { m‚ÇÅ := ùüô _, m‚ÇÇ := ùüô _}
  comp œÜ œÜ' := { m‚ÇÅ := œÜ.m‚ÇÅ ‚â´ œÜ'.m‚ÇÅ, m‚ÇÇ := œÜ.m‚ÇÇ ‚â´ œÜ'.m‚ÇÇ }

@[simp] lemma id_m‚ÇÅ (S : Index f p‚ÇÅ p‚ÇÇ) : Hom.m‚ÇÅ (ùüô S) = ùüô _ := rfl
@[simp] lemma id_m‚ÇÇ (S : Index f p‚ÇÅ p‚ÇÇ) : Hom.m‚ÇÇ (ùüô S) = ùüô _ := rfl

section

variable {S‚ÇÅ S‚ÇÇ S‚ÇÉ : Index f p‚ÇÅ p‚ÇÇ} (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ' : S‚ÇÇ ‚ü∂ S‚ÇÉ)

@[reassoc (attr := simp)] lemma comp_m‚ÇÅ : (œÜ ‚â´ œÜ').m‚ÇÅ = œÜ.m‚ÇÅ ‚â´ œÜ'.m‚ÇÅ := rfl
@[reassoc (attr := simp)] lemma comp_m‚ÇÇ : (œÜ ‚â´ œÜ').m‚ÇÇ = œÜ.m‚ÇÇ ‚â´ œÜ'.m‚ÇÇ := rfl

end

variable (f p‚ÇÅ p‚ÇÇ)

@[simps]
def œÄ‚ÇÅ : Index f p‚ÇÅ p‚ÇÇ ‚•§ p‚ÇÅ.J where
  obj S := S.j‚ÇÅ
  map œÜ := œÜ.m‚ÇÅ

@[simps]
def œÄ‚ÇÇ : Index f p‚ÇÅ p‚ÇÇ ‚•§ p‚ÇÇ.J where
  obj S := S.j‚ÇÇ
  map œÜ := œÜ.m‚ÇÇ

end Index

@[simps]
def functor : Index f p‚ÇÅ p‚ÇÇ ‚•§ Comma F‚ÇÅ F‚ÇÇ where
  obj S := Comma.mk _ _ S.hom
  map {S‚ÇÅ S‚ÇÇ} œÜ :=
    { left := p‚ÇÅ.F.map œÜ.m‚ÇÅ
      right := p‚ÇÇ.F.map œÜ.m‚ÇÇ
      w := œÜ.w.symm }

@[simps]
def cocone : Cocone (functor f p‚ÇÅ p‚ÇÇ) where
  pt := Comma.mk _ _ f
  Œπ :=
    { app S :=
        { left := p‚ÇÅ.Œπ.app S.j‚ÇÅ
          right := p‚ÇÇ.Œπ.app S.j‚ÇÇ
          w := S.w.symm } }

instance [LocallySmall.{w} D] : Small.{w} (Index f p‚ÇÅ p‚ÇÇ) := by
  let T := Œ£ (j‚ÇÅ : p‚ÇÅ.J) (j‚ÇÇ : p‚ÇÇ.J), Shrink.{w} (F‚ÇÅ.obj (p‚ÇÅ.F.obj j‚ÇÅ) ‚ü∂ F‚ÇÇ.obj (p‚ÇÇ.F.obj j‚ÇÇ))
  let œÜ : Index f p‚ÇÅ p‚ÇÇ ‚Üí T := fun S ‚Ü¶ ‚ü®S.j‚ÇÅ, S.j‚ÇÇ, equivShrink _ S.hom‚ü©
  have hœÜ : Function.Injective œÜ := by
    rintro ‚ü®j‚ÇÅ, j‚ÇÇ, hom, _‚ü© ‚ü®j‚ÇÅ', j‚ÇÇ', hom', _‚ü© h
    dsimp [œÜ] at h
    obtain rfl : j‚ÇÅ = j‚ÇÅ' := congr_arg Sigma.fst h
    rw [Sigma.ext_iff, heq_eq_eq] at h
    replace h := h.2
    obtain rfl : j‚ÇÇ = j‚ÇÇ' := congr_arg Sigma.fst h
    simpa using h
  exact small_of_injective hœÜ

instance [LocallySmall.{w} D] : EssentiallySmall.{w} (Index f p‚ÇÅ p‚ÇÇ) := by
  apply essentiallySmall_of_small_of_locallySmall

instance : IsCardinalFiltered (Index f p‚ÇÅ p‚ÇÇ) Œ∫ := sorry

instance : IsFiltered (Index f p‚ÇÅ p‚ÇÇ) := by
  apply isFiltered_of_isCardinalDirected _ Œ∫

instance : (Index.œÄ‚ÇÅ f p‚ÇÅ p‚ÇÇ).Final := sorry

instance : (Index.œÄ‚ÇÇ f p‚ÇÅ p‚ÇÇ).Final := sorry

section

variable [IsCardinalAccessibleCategory C‚ÇÅ Œ∫] [IsCardinalAccessibleCategory C‚ÇÇ Œ∫]
  [IsCardinalAccessibleCategory D Œ∫]
  [F‚ÇÅ.IsCardinalAccessible Œ∫] [F‚ÇÇ.IsCardinalAccessible Œ∫]

def isColimitCocone : IsColimit (cocone f p‚ÇÅ p‚ÇÇ) := by
  sorry

noncomputable def cardinalFilteredPresentation :
    CardinalFilteredPresentation (Comma.mk _ _ f) Œ∫ :=
  .ofIsColimitOfEssentiallySmall _ (isColimitCocone f p‚ÇÅ p‚ÇÇ) Œ∫

end

lemma cardinalFilteredPresentation_exists_f_obj_iso
    [IsCardinalAccessibleCategory D Œ∫]
    (x : (cardinalFilteredPresentation f p‚ÇÅ p‚ÇÇ).J) :
    ‚àÉ (j : Index f p‚ÇÅ p‚ÇÇ),
      Nonempty ((cardinalFilteredPresentation f p‚ÇÅ p‚ÇÇ).F.obj x ‚âÖ (functor f p‚ÇÅ p‚ÇÇ).obj j) :=
  CardinalFilteredPresentation.ofIsColimitOfEssentiallySmall_exists_f_obj_iso _ _ _ _

end hasCardinalFilteredGenerators

section

variable [IsCardinalAccessibleCategory C‚ÇÅ Œ∫] [IsCardinalAccessibleCategory C‚ÇÇ Œ∫]
  [IsCardinalAccessibleCategory D Œ∫]
  [F‚ÇÅ.IsCardinalAccessible Œ∫] [F‚ÇÇ.IsCardinalAccessible Œ∫]

open hasCardinalFilteredGenerators in
instance hasCardinalFilteredGenerators :
    HasCardinalFilteredGenerators.{w} (Comma F‚ÇÅ F‚ÇÇ) Œ∫ where
  exists_generators' := by
    obtain ‚ü®Œπ‚ÇÅ, G‚ÇÅ, h‚ÇÅ‚ü© := HasCardinalFilteredGenerators.exists_generators C‚ÇÅ Œ∫
    obtain ‚ü®Œπ‚ÇÇ, G‚ÇÇ, h‚ÇÇ‚ü© := HasCardinalFilteredGenerators.exists_generators C‚ÇÇ Œ∫
    have := h‚ÇÅ.isCardinalPresentable
    have := h‚ÇÇ.isCardinalPresentable
    refine ‚ü®Œ£ (i‚ÇÅ : Œπ‚ÇÅ) (i‚ÇÇ : Œπ‚ÇÇ), Shrink.{w} (F‚ÇÅ.obj (G‚ÇÅ i‚ÇÅ) ‚ü∂ F‚ÇÇ.obj (G‚ÇÇ i‚ÇÇ)),
      fun ‚ü®i‚ÇÅ, i‚ÇÇ, hom‚ü© ‚Ü¶ Comma.mk _ _ ((equivShrink _).symm hom), ?_‚ü©
    constructor
    ¬∑ rintro ‚ü®i‚ÇÅ, i‚ÇÇ, hom‚ü©
      infer_instance
    ¬∑ rintro ‚ü®X‚ÇÅ, X‚ÇÇ, hom‚ü©
      refine ‚ü®cardinalFilteredPresentation hom (h‚ÇÅ.presentation X‚ÇÅ) (h‚ÇÇ.presentation X‚ÇÇ),
        ?_‚ü©
      intro j
      let Z := (cardinalFilteredPresentation hom (h‚ÇÅ.presentation X‚ÇÅ)
        (h‚ÇÇ.presentation X‚ÇÇ)).F.obj j
      obtain ‚ü®S, ‚ü®e : Z ‚âÖ _‚ü©‚ü© := cardinalFilteredPresentation_exists_f_obj_iso _ _ _ j
      obtain ‚ü®i‚ÇÅ, ‚ü®e‚ÇÅ‚ü©‚ü© := h‚ÇÅ.exists_presentation_obj_iso X‚ÇÅ S.j‚ÇÅ
      obtain ‚ü®i‚ÇÇ, ‚ü®e‚ÇÇ‚ü©‚ü© := h‚ÇÇ.exists_presentation_obj_iso X‚ÇÇ S.j‚ÇÇ
      let Œ± : F‚ÇÅ.obj (G‚ÇÅ i‚ÇÅ) ‚ü∂ F‚ÇÇ.obj (G‚ÇÇ i‚ÇÇ) :=
        F‚ÇÅ.map (e‚ÇÅ.inv ‚â´ e.inv.left) ‚â´ Z.hom ‚â´ F‚ÇÇ.map (e.hom.right ‚â´ e‚ÇÇ.hom)
      refine ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, equivShrink _
        (F‚ÇÅ.map (e‚ÇÅ.inv ‚â´ e.inv.left) ‚â´ Z.hom ‚â´ F‚ÇÇ.map (e.hom.right ‚â´ e‚ÇÇ.hom))‚ü©,
        ‚ü®isoMk ((Comma.fst _ _).mapIso e ‚â™‚â´ e‚ÇÅ) ((Comma.snd _ _).mapIso e ‚â™‚â´ e‚ÇÇ) ?_‚ü©‚ü©
      dsimp
      simp only [Functor.map_comp, Category.assoc, CommaMorphism.w_assoc, functor_obj_left,
        functor_obj_right, functor_obj_hom, Equiv.symm_apply_apply, Iso.map_hom_inv_id_assoc]
      have := e.hom.w
      dsimp at this
      rw [reassoc_of% this, ‚Üê F‚ÇÇ.map_comp_assoc e.inv.right, ‚Üê comp_right,
        e.inv_hom_id]
      dsimp
      rw [F‚ÇÇ.map_id, id_comp]

instance isCardinalAccessibleCategory :
    IsCardinalAccessibleCategory (Comma F‚ÇÅ F‚ÇÇ) Œ∫ where

end

section

variable [IsCardinalLocallyPresentable C‚ÇÅ Œ∫] [IsCardinalLocallyPresentable C‚ÇÇ Œ∫]
  [IsCardinalLocallyPresentable D Œ∫] [PreservesColimitsOfSize.{w, w} F‚ÇÅ]

instance isCardinalLocallyPresentable :
    IsCardinalLocallyPresentable (Comma F‚ÇÅ F‚ÇÇ) Œ∫ where

end

end Comma

end CategoryTheory
