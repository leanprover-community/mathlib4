/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.ObjectProperty.Small
import Mathlib.CategoryTheory.Presentable.Limits
import Mathlib.CategoryTheory.Presentable.Retracts
import Mathlib.CategoryTheory.Generator.StrongGenerator

/-!
# Presentable generators

Let `C` be a category, a regular cardinal `Œ∫` and `P : ObjectProperty C`.
We define a predicate `P.IsCardinalFilteredGenerator Œ∫` saying that
`P` consists of `Œ∫`-presentable objects and that any objects in `C`
is a `Œ∫`-filtered colimit of objects satisfying `P`.
We show that if this condition is satisfied, then `P` is a strong generator
(see `IsCardinalFilteredGenerator.isStrongGenerator`). Moreover,
if `C` is locally small, we show that any object in `C` is presentable
(see `IsCardinalFilteredGenerator.presentable`).

Finally, we define a typeclass `HasCardinalFilteredGenerator C Œ∫` saying
that `C` is locally `w`-small and that there exists an (essentially) small `P`
such that `P.IsCardinalFilteredGenerator Œ∫` holds.

## References
* [Ad√°mek, J. and Rosick√Ω, J., *Locally presentable and accessible categories*][Adamek_Rosicky_1994]

-/

universe w v u

namespace CategoryTheory

variable {C : Type u} [Category.{v} C]

namespace Limits.ColimitPresentation

lemma isCardinalPresentable {X : C} {J : Type w} [SmallCategory J]
    (p : ColimitPresentation J X) (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular]
    (h : ‚àÄ (j : J), IsCardinalPresentable (p.diag.obj j) Œ∫) [LocallySmall.{w} C]
    (Œ∫' : Cardinal.{w}) [Fact Œ∫'.IsRegular] (h : Œ∫ ‚â§ Œ∫')
    (hJ : HasCardinalLT (Arrow J) Œ∫') :
    IsCardinalPresentable X Œ∫' :=
  have (k : J) : IsCardinalPresentable (p.diag.obj k) Œ∫' := isCardinalPresentable_of_le _ h
  isCardinalPresentable_of_isColimit _ p.isColimit Œ∫' hJ

end Limits.ColimitPresentation

open Limits

namespace ObjectProperty

variable {P : ObjectProperty C}

lemma ColimitOfShape.isCardinalPresentable {X : C} {J : Type w} [SmallCategory J]
    (p : P.ColimitOfShape J X) {Œ∫ : Cardinal.{w}} [Fact Œ∫.IsRegular]
    (hP : P ‚â§ isCardinalPresentable C Œ∫) [LocallySmall.{w} C]
    (Œ∫' : Cardinal.{w}) [Fact Œ∫'.IsRegular] (h : Œ∫ ‚â§ Œ∫')
    (hJ : HasCardinalLT (Arrow J) Œ∫') :
    IsCardinalPresentable X Œ∫' :=
  p.toColimitPresentation.isCardinalPresentable Œ∫
    (fun j ‚Ü¶ hP _ (p.prop_diag_obj j)) _ h hJ

variable {Œ∫ : Cardinal.{w}} [Fact Œ∫.IsRegular]

variable (P Œ∫) in
/-- The condition that `P : ObjectProperty C` consists of `Œ∫`-presentable objects
and that any object of `C` is a `Œ∫`-filtered colimit of objects satisfying `P`.
(This notion is particularly relevant when `C` is locally `w`-small and `P` is
essentially `w`-small, see `HasCardinalFilteredGenerators`, which appears in
the definitions of locally presentable and accessible categories.) -/
structure IsCardinalFilteredGenerator : Prop where
  le_isCardinalPresentable : P ‚â§ isCardinalPresentable C Œ∫
  exists_colimitsOfShape (X : C) :
    ‚àÉ (J : Type w) (_ : SmallCategory J) (_ : IsCardinalFiltered J Œ∫),
      P.colimitsOfShape J X

namespace IsCardinalFilteredGenerator

variable (h : P.IsCardinalFilteredGenerator Œ∫) (X : C)

include h in
lemma of_le_isoClosure {P' : ObjectProperty C} (h‚ÇÅ : P ‚â§ P'.isoClosure)
    (h‚ÇÇ : P' ‚â§ isCardinalPresentable C Œ∫) :
    P'.IsCardinalFilteredGenerator Œ∫ where
  le_isCardinalPresentable := h‚ÇÇ
  exists_colimitsOfShape X := by
    obtain ‚ü®J, _, _, hX‚ü© := h.exists_colimitsOfShape X
    exact ‚ü®J, inferInstance, inferInstance, by
      simpa only [colimitsOfShape_isoClosure] using colimitsOfShape_monotone J h‚ÇÅ _ hX‚ü©

include h in
lemma isoClosure : P.isoClosure.IsCardinalFilteredGenerator Œ∫ :=
  h.of_le_isoClosure (P.le_isoClosure.trans P.isoClosure.le_isoClosure)
    (by simpa only [ObjectProperty.isoClosure_le_iff] using h.le_isCardinalPresentable)

lemma isoClosure_iff :
    P.isoClosure.IsCardinalFilteredGenerator Œ∫ ‚Üî P.IsCardinalFilteredGenerator Œ∫ :=
  ‚ü®fun h ‚Ü¶ h.of_le_isoClosure (by rfl) (P.le_isoClosure.trans h.le_isCardinalPresentable),
    isoClosure‚ü©

include h

lemma presentable [LocallySmall.{w} C] (X : C) :
    IsPresentable.{w} X := by
  obtain ‚ü®J, _, _, ‚ü®hX‚ü©‚ü© := h.exists_colimitsOfShape X
  obtain ‚ü®Œ∫', _, le, hŒ∫'‚ü© : ‚àÉ (Œ∫' : Cardinal.{w}) (_ : Fact Œ∫'.IsRegular) (_ : Œ∫ ‚â§ Œ∫'),
      HasCardinalLT (Arrow J) Œ∫' := by
    obtain ‚ü®Œ∫', h‚ÇÅ, h‚ÇÇ‚ü© := HasCardinalLT.exists_regular_cardinal_forall.{w}
      (Sum.elim (fun (_ : Unit) ‚Ü¶ Arrow J) (fun (_ : Unit) ‚Ü¶ Œ∫.ord.toType))
    exact ‚ü®Œ∫', ‚ü®h‚ÇÅ‚ü©,
      le_of_lt (by simpa [hasCardinalLT_iff_cardinal_mk_lt] using h‚ÇÇ (Sum.inr ‚ü®‚ü©)),
      h‚ÇÇ (Sum.inl ‚ü®‚ü©)‚ü©
  have := hX.isCardinalPresentable h.le_isCardinalPresentable _ le hŒ∫'
  exact isPresentable_of_isCardinalPresentable _ Œ∫'

lemma isStrongGenerator : P.IsStrongGenerator :=
  IsStrongGenerator.mk_of_exists_colimitsOfShape.{w} (fun X ‚Ü¶ by
    obtain ‚ü®_, _, _, hX‚ü© := h.exists_colimitsOfShape X
    exact ‚ü®_, _, hX‚ü©)

lemma isPresentable_eq_retractClosure :
    isCardinalPresentable C Œ∫ = P.retractClosure := by
  refine le_antisymm (fun X hX ‚Ü¶ ?_) ?_
  ¬∑ rw [isCardinalPresentable_iff] at hX
    obtain ‚ü®J, _, _, ‚ü®p‚ü©‚ü© := h.exists_colimitsOfShape X
    have := essentiallySmall_of_small_of_locallySmall.{w} J
    obtain ‚ü®j, f, hf‚ü© := IsCardinalPresentable.exists_hom_of_isColimit Œ∫ p.isColimit (ùüô X)
    exact ‚ü®_, p.prop_diag_obj j, ‚ü®{ i := _, r := _, retract := hf}‚ü©‚ü©
  ¬∑ simpa only [ObjectProperty.retractClosure_le_iff] using h.le_isCardinalPresentable

lemma essentiallySmall_isPresentable
    [ObjectProperty.EssentiallySmall.{w} P] [LocallySmall.{w} C] :
    ObjectProperty.EssentiallySmall.{w} (isCardinalPresentable C Œ∫) := by
  rw [h.isPresentable_eq_retractClosure]
  infer_instance

end IsCardinalFilteredGenerator

end ObjectProperty

/-- The property that a category `C` and a regular cardinal `Œ∫`
satisfy `P.IsCardinalFilteredGenerators Œ∫` for an suitable essentially
small `P : ObjectProperty C`. -/
class HasCardinalFilteredGenerator (C : Type u) [hC : Category.{v} C]
    (Œ∫ : Cardinal.{w}) [hŒ∫ : Fact Œ∫.IsRegular] : Prop extends LocallySmall.{w} C where
  exists_generator (C Œ∫) [hC] [hŒ∫] :
    ‚àÉ (P : ObjectProperty C) (_ : ObjectProperty.EssentiallySmall.{w} P),
      P.IsCardinalFilteredGenerator Œ∫

lemma ObjectProperty.IsCardinalFilteredGenerator.hasCardinalFilteredGenerator
    {P : ObjectProperty C} [ObjectProperty.EssentiallySmall.{w} P]
    [LocallySmall.{w} C] {Œ∫ : Cardinal.{w}} [hŒ∫ : Fact Œ∫.IsRegular]
    (hP : P.IsCardinalFilteredGenerator Œ∫) :
    HasCardinalFilteredGenerator C Œ∫ where
  exists_generator := ‚ü®P, inferInstance, hP‚ü©

lemma HasCardinalFilteredGenerator.exists_small_generator (C : Type u) [Category.{v} C]
    (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular] [HasCardinalFilteredGenerator C Œ∫] :
    ‚àÉ (P : ObjectProperty C) (_ : ObjectProperty.Small.{w} P),
      P.IsCardinalFilteredGenerator Œ∫ := by
  obtain ‚ü®P, _, hP‚ü© := HasCardinalFilteredGenerator.exists_generator C Œ∫
  obtain ‚ü®Q, _, h‚ÇÅ, h‚ÇÇ‚ü© := ObjectProperty.EssentiallySmall.exists_small_le P
  exact ‚ü®Q, inferInstance, hP.of_le_isoClosure h‚ÇÇ (h‚ÇÅ.trans hP.le_isCardinalPresentable)‚ü©

instance (C : Type u) [Category.{v} C]
    (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular] [HasCardinalFilteredGenerator C Œ∫] :
    ObjectProperty.EssentiallySmall.{w} (isCardinalPresentable C Œ∫) := by
  obtain ‚ü®P, _, hP‚ü© := HasCardinalFilteredGenerator.exists_generator C Œ∫
  exact hP.essentiallySmall_isPresentable

@[deprecated (since := "2025-10-12")] alias AreCardinalFilteredGenerators :=
  ObjectProperty.IsCardinalFilteredGenerator
@[deprecated (since := "2025-10-12")] alias HasCardinalFilteredGenerators :=
  HasCardinalFilteredGenerator

end CategoryTheory
