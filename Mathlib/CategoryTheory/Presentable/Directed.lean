/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Presentable.IsCardinalFiltered
import Mathlib.CategoryTheory.Limits.Final
import Mathlib.CategoryTheory.MorphismProperty.Basic
import Mathlib.CategoryTheory.Filtered.Final
import Mathlib.CategoryTheory.Products.Unitor
import Mathlib.Data.Finite.Sigma

/-!
# `Œ∫`-filtered categories and `Œ∫`-directed poset

In this file, we formalize the proof by Deligne (SGA 4 I 8.1.6) that for
any (small) filtered category `J`, there exists a final functor `F : Œ± ‚•§ J`
where `Œ±` is a directed partially ordered set (`IsFiltered.exists_directed`).
The construction applies more generally to `Œ∫`-filtered categories and
`Œ∫`-directed posets (`IsCardinalFiltered.exists_cardinal_directed`).

Note: the argument by Deligne is reproduced (without reference) in the book
by Ad√°mek and Rosick√Ω (theorem 1.5), but with a mistake:
the construction by Deligne involves considering diagrams
(see `CategoryTheory.IsCardinalFiltered.exists_cardinal_directed.DiagramWithUniqueTerminal`)
which are not necessarily *subcategories* (the class of morphisms `W` does not
have to be multiplicative.)

## References
* [Alexander Grothendieck and Jean-Louis Verdier, *Expos√© I : Pr√©faisceaux*,
  SGA 4 I 8.1.6][sga-4-tome-1]
* [Ad√°mek, J. and Rosick√Ω, J., *Locally presentable and accessible categories*][Adamek_Rosicky_1994]

-/

universe u v w

lemma CategoryTheory.MorphismProperty.toSet_iSup {C : Type*} [Category C]
    {Œπ : Type*} (W : Œπ ‚Üí MorphismProperty C) :
    (‚®Ü i , W i).toSet = ‚ãÉ i, (W i).toSet := by
  ext
  simp [MorphismProperty.toSet]

lemma CategoryTheory.MorphismProperty.toSet_max {C : Type*} [Category C]
    (W‚ÇÅ W‚ÇÇ : MorphismProperty C) :
    (W‚ÇÅ ‚äî W‚ÇÇ).toSet = W‚ÇÅ.toSet ‚à™ W‚ÇÇ.toSet := rfl

section

open CategoryTheory Limits

lemma hasCardinalLT_toSet_morphismPropertyOfHoms {C : Type*} [Category C]
    {Œπ : Type*} {X Y : Œπ ‚Üí C} (f : ‚àÄ i, X i ‚ü∂ Y i) {Œ∫ : Cardinal}
    (h : HasCardinalLT Œπ Œ∫) : HasCardinalLT (MorphismProperty.ofHoms f).toSet Œ∫ :=
  h.of_surjective (fun i ‚Ü¶ ‚ü®Arrow.mk (f i), ‚ü®i‚ü©‚ü©) (by
    rintro ‚ü®f, hf‚ü©
    rw [MorphismProperty.mem_toSet_iff, MorphismProperty.ofHoms_iff] at hf
    obtain ‚ü®i, hf‚ü© := hf
    obtain rfl : f = _ := hf
    exact ‚ü®i, rfl‚ü©)

lemma hasCardinalLT_subtype_objectPropertyOfObj {C : Type*} [Category C]
    {Œπ : Type*} (X : Œπ ‚Üí C) {Œ∫ : Cardinal}
    (h : HasCardinalLT Œπ Œ∫) : HasCardinalLT (Subtype (ObjectProperty.ofObj X)) Œ∫ :=
  h.of_surjective (fun i ‚Ü¶ ‚ü®X i, by simp‚ü©) (by rintro ‚ü®_, ‚ü®i‚ü©‚ü©; exact ‚ü®i, rfl‚ü©)

end

namespace CategoryTheory

open Limits

namespace IsCardinalFiltered

instance prod (J‚ÇÅ J‚ÇÇ : Type*) [Category J‚ÇÅ] [Category J‚ÇÇ]
    (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular]
    [IsCardinalFiltered J‚ÇÅ Œ∫] [IsCardinalFiltered J‚ÇÇ Œ∫] :
    IsCardinalFiltered (J‚ÇÅ √ó J‚ÇÇ) Œ∫ where
  nonempty_cocone {C _} F hC := ‚ü®by
    let c‚ÇÅ := cocone (F ‚ãô Prod.fst _ _) hC
    let c‚ÇÇ := cocone (F ‚ãô Prod.snd _ _) hC
    exact
      { pt := (c‚ÇÅ.pt, c‚ÇÇ.pt)
        Œπ.app i := (c‚ÇÅ.Œπ.app i, c‚ÇÇ.Œπ.app i)
        Œπ.naturality i j f := by
          ext
          ¬∑ simpa using c‚ÇÅ.w f
          ¬∑ simpa using c‚ÇÇ.w f}‚ü©

namespace exists_cardinal_directed

variable (J : Type w) [SmallCategory J] (Œ∫ : Cardinal.{w})

/-!
Let `J` is a `Œ∫`-filtered category. In order to construct a cofinal functor `Œ± ‚•§ J`
with a `Œ∫`-directed poset `Œ±`, we first consider the case where there is no
object `m : J` such that for any object `j : J`, there exists a map `j ‚ü∂ m`.
Under this assumption (`hJ`), the partially ordered type `DiagramWithUniqueTerminal J Œ∫`
of `Œ∫`-bounded diagrams with a unique terminal object in `J` shall be a possible
choice for `Œ±`.
-/

/-- If `Œ∫` is a cardinal, this structure contains the data of a `Œ∫`-bounded diagram
in a category `J`. -/
@[ext]
structure Diagram where
  /-- the morphisms which belongs to the diagram -/
  W : MorphismProperty J
  /-- the objects in the diagram -/
  P : ObjectProperty J
  src {i j : J} {f : i ‚ü∂ j} : W f ‚Üí P i
  tgt {i j : J} {f : i ‚ü∂ j} : W f ‚Üí P j
  hW : HasCardinalLT W.toSet Œ∫
  hP : HasCardinalLT (Subtype P) Œ∫

namespace Diagram

variable {J Œ∫}

/-- Given a `Œ∫`-bounded diagram `D` in a category `J`, an object `e : J`
is terminal if for any object `j` of `D`, there is a unique morphism `j ‚ü∂ e` in `D`,
that these unique morphisms are compatible with precomposition with morphims in `D`,
and that `ùüô e` belongs to `D`. -/
structure IsTerminal (D : Diagram J Œ∫) (e : J) where
  prop_id : D.W (ùüô e)
  /-- the unique map to the terminal object in the diagram -/
  lift {j : J} (hj : D.P j) : j ‚ü∂ e
  hlift {j : J} (hj : D.P j) : D.W (lift hj)
  uniq {j : J} (hj : D.P j) {œÜ : j ‚ü∂ e} (hœÜ : D.W œÜ) : lift hj = œÜ
  comm {i j : J} (f : i ‚ü∂ j) (hf : D.W f) : f ‚â´ lift (D.tgt hf) = lift (D.src hf)

namespace IsTerminal

attribute [reassoc] IsTerminal.comm

variable {D : Diagram J Œ∫} {e : J}

lemma prop (h : D.IsTerminal e) : D.P e := D.src (h.prop_id)

@[simp]
lemma lift_self (h : D.IsTerminal e) : h.lift h.prop = ùüô e := h.uniq _ h.prop_id

instance : Subsingleton (D.IsTerminal e) where
  allEq h‚ÇÅ h‚ÇÇ := by
    have : @h‚ÇÅ.lift = @h‚ÇÇ.lift := by
      ext j hj
      exact h‚ÇÅ.uniq hj (h‚ÇÇ.hlift hj)
    cases h‚ÇÅ
    cases h‚ÇÇ
    aesop

/-- Constructor for `Diagram.IsTerminal` for which no data is provided,
but only its existence. -/
noncomputable def ofExistsUnique (prop_id : D.W (ùüô e))
    (h‚ÇÅ : ‚àÄ ‚¶Éj : J‚¶Ñ (_ : D.P j), ‚àÉ (lift : j ‚ü∂ e), D.W lift)
    (h‚ÇÇ : ‚àÄ ‚¶Éj : J‚¶Ñ (_ : D.P j) (l‚ÇÅ l‚ÇÇ : j ‚ü∂ e), D.W l‚ÇÅ ‚Üí D.W l‚ÇÇ ‚Üí l‚ÇÅ = l‚ÇÇ)
    (h‚ÇÉ : ‚àÄ ‚¶Éi j : J‚¶Ñ (f : i ‚ü∂ j) (_ : D.W f), ‚àÉ (li : i ‚ü∂ e) (lj : j ‚ü∂ e),
      D.W li ‚àß D.W lj ‚àß f ‚â´ lj = li) :
    D.IsTerminal e where
  prop_id := prop_id
  lift hj := (h‚ÇÅ hj).choose
  hlift hj := (h‚ÇÅ hj).choose_spec
  uniq hj œÜ hœÜ := h‚ÇÇ hj (h‚ÇÅ hj).choose œÜ (h‚ÇÅ hj).choose_spec hœÜ
  comm _ hf := by
    obtain ‚ü®li, lj, hli, hlj, fac‚ü© := h‚ÇÉ _ hf
    rw [h‚ÇÇ (D.src hf) _ li (h‚ÇÅ (D.src hf)).choose_spec hli,
      h‚ÇÇ (D.tgt hf) _ lj (h‚ÇÅ (D.tgt hf)).choose_spec hlj, fac]

end IsTerminal

end Diagram

/-- If `Œ∫` is a cardinal, this structure contains the data of a `Œ∫`-bounded diagram
with a unique terminal object in a category `J`. -/
structure DiagramWithUniqueTerminal extends Diagram J Œ∫ where
  /-- the terminal object -/
  top : J
  /-- `top` is terminal -/
  isTerminal : toDiagram.IsTerminal top
  uniq_terminal (j : J) (hj : toDiagram.IsTerminal j) : j = top

@[ext]
lemma DiagramWithUniqueTerminal.ext {D‚ÇÅ D‚ÇÇ : DiagramWithUniqueTerminal J Œ∫}
    (hW : D‚ÇÅ.W = D‚ÇÇ.W) (hP : D‚ÇÅ.P = D‚ÇÇ.P) : D‚ÇÅ = D‚ÇÇ := by
  obtain ‚ü®D‚ÇÅ, top, h‚ÇÅ, h‚ÇÅ'‚ü© := D‚ÇÅ
  obtain ‚ü®D‚ÇÇ, top', h‚ÇÇ, h‚ÇÇ'‚ü© := D‚ÇÇ
  obtain rfl : D‚ÇÅ = D‚ÇÇ := by aesop
  obtain rfl : top = top' := h‚ÇÇ' _ h‚ÇÅ
  obtain rfl : h‚ÇÅ = h‚ÇÇ := by subsingleton
  rfl

instance : PartialOrder (DiagramWithUniqueTerminal J Œ∫) where
  le D‚ÇÅ D‚ÇÇ := D‚ÇÅ.W ‚â§ D‚ÇÇ.W ‚àß D‚ÇÅ.P ‚â§ D‚ÇÇ.P
  le_refl _ := ‚ü®by rfl, by rfl‚ü©
  le_trans _ _ _ h‚ÇÅ h‚ÇÇ := ‚ü®h‚ÇÅ.1.trans h‚ÇÇ.1, h‚ÇÅ.2.trans h‚ÇÇ.2‚ü©
  le_antisymm _ _ h‚ÇÅ h‚ÇÇ := by
    ext : 1
    ¬∑ exact le_antisymm h‚ÇÅ.1 h‚ÇÇ.1
    ¬∑ exact le_antisymm h‚ÇÅ.2 h‚ÇÇ.2

section

variable {J Œ∫}

/-- Auxiliary definition for `functor`. -/
def functorMap {D‚ÇÅ D‚ÇÇ : DiagramWithUniqueTerminal J Œ∫} (h : D‚ÇÅ ‚â§ D‚ÇÇ) : D‚ÇÅ.top ‚ü∂ D‚ÇÇ.top :=
  D‚ÇÇ.isTerminal.lift (h.2 _ D‚ÇÅ.isTerminal.prop)

@[simp]
lemma functorMap_id (D : DiagramWithUniqueTerminal J Œ∫) : functorMap (le_refl D) = ùüô D.top := by
  simp [functorMap]

@[reassoc (attr := simp)]
lemma functorMap_comp {D‚ÇÅ D‚ÇÇ D‚ÇÉ : DiagramWithUniqueTerminal J Œ∫} (h‚ÇÅ‚ÇÇ : D‚ÇÅ ‚â§ D‚ÇÇ) (h‚ÇÇ‚ÇÉ : D‚ÇÇ ‚â§ D‚ÇÉ) :
    functorMap h‚ÇÅ‚ÇÇ ‚â´ functorMap h‚ÇÇ‚ÇÉ = functorMap (h‚ÇÅ‚ÇÇ.trans h‚ÇÇ‚ÇÉ) :=
  D‚ÇÉ.isTerminal.comm _ (h‚ÇÇ‚ÇÉ.1 _ (D‚ÇÇ.isTerminal.hlift _))

end

/-- The functor which sends a `Œ∫`-bounded diagram with a unique terminal object to
its terminal object. -/
@[simps]
def functor : DiagramWithUniqueTerminal J Œ∫ ‚•§ J where
  obj D := D.top
  map h := functorMap (leOfHom h)

variable [Fact Œ∫.IsRegular]

variable {J Œ∫} in
/-- The diagram containing a single object (and its identity morphism). -/
@[simps]
def Diagram.single (j : J) : Diagram J Œ∫ where
  W := .ofHoms (fun (_ : Unit) ‚Ü¶ ùüô j)
  P := .ofObj (fun (_ : Unit) ‚Ü¶ j)
  src := by rintro _ _ _ ‚ü®‚ü©; exact ‚ü®‚ü®‚ü©‚ü©
  tgt := by rintro _ _ _ ‚ü®‚ü©; exact ‚ü®‚ü®‚ü©‚ü©
  hW :=
    (hasCardinalLT_of_finite _ Œ∫ (Cardinal.IsRegular.aleph0_le Fact.out)).of_surjective
        (fun (_ : Unit) ‚Ü¶ ‚ü®Arrow.mk (ùüô j), ‚ü®‚ü®‚ü©‚ü©‚ü©) (by
      rintro ‚ü®f, hf‚ü©
      refine ‚ü®‚ü®‚ü©, ?_‚ü©
      ext
      exact ((MorphismProperty.ofHoms_iff _ _).1
        ((MorphismProperty.arrow_mk_mem_toSet_iff _ _).1 hf)).choose_spec.symm)
  hP :=
    (hasCardinalLT_of_finite _ Œ∫ (Cardinal.IsRegular.aleph0_le Fact.out)).of_surjective
      (fun (_ : Unit) ‚Ü¶ ‚ü®j, by simp‚ü©) (fun ‚ü®k, hk‚ü© ‚Ü¶ ‚ü®‚ü®‚ü©, by aesop‚ü©)

instance (j : J) : Finite (Subtype (Diagram.single (Œ∫ := Œ∫) j).P) :=
  Finite.of_surjective (fun (_ : Unit) ‚Ü¶ ‚ü®j, by simp‚ü©)
    (by rintro ‚ü®_, ‚ü®‚ü©‚ü©; exact ‚ü®‚ü®‚ü©, rfl‚ü©)

variable {J Œ∫} in
/-- The diagram with a unique terminal object containing a single object
(and its identity morphism). -/
noncomputable def DiagramWithUniqueTerminal.single (j : J) :
    DiagramWithUniqueTerminal J Œ∫ where
  toDiagram := .single j
  top := j
  isTerminal := by
    refine .ofExistsUnique ‚ü®‚ü®‚ü©‚ü© (fun _ h ‚Ü¶ ?_) (fun _ h‚ÇÅ _ _ h‚ÇÇ h‚ÇÉ ‚Ü¶ ? _) (fun _ _ _ h ‚Ü¶ ?_)
    ¬∑ simp only [Diagram.single_P, ObjectProperty.singleton_iff] at h
      subst h
      exact ‚ü®ùüô _, ‚ü®‚ü®‚ü©‚ü©‚ü©
    ¬∑ simp only [Diagram.single_P, ObjectProperty.singleton_iff] at h‚ÇÅ
      subst h‚ÇÅ
      obtain ‚ü®‚ü®‚ü©‚ü© := h‚ÇÇ
      obtain ‚ü®‚ü®‚ü©‚ü© := h‚ÇÉ
      simp
    ¬∑ obtain ‚ü®‚ü®‚ü©‚ü© := h
      exact ‚ü®ùüô _, ùüô _, ‚ü®‚ü®‚ü©‚ü©, ‚ü®‚ü®‚ü©‚ü©, by simp‚ü©
  uniq_terminal := by rintro _ ‚ü®‚ü®‚ü©‚ü©; rfl

variable {J Œ∫} in
/-- The union of a `Œ∫`-bounded family of `Œ∫`-bounded diagrams. -/
@[simps]
def Diagram.iSup {Œπ : Type*} (D : Œπ ‚Üí Diagram J Œ∫) (hŒπ : HasCardinalLT Œπ Œ∫) :
    Diagram J Œ∫ where
  W := ‚®Ü (i : Œπ), (D i).W
  P := ‚®Ü (i : Œπ), (D i).P
  src hf := by
    simp only [MorphismProperty.iSup_iff, iSup_apply, iSup_Prop_eq] at hf ‚ä¢
    obtain ‚ü®i, hi‚ü© := hf
    exact ‚ü®i, (D i).src hi‚ü©
  tgt hf := by
    simp only [MorphismProperty.iSup_iff, iSup_apply, iSup_Prop_eq] at hf ‚ä¢
    obtain ‚ü®i, hi‚ü© := hf
    exact ‚ü®i, (D i).tgt hi‚ü©
  hW := by
    rw [MorphismProperty.toSet_iSup]
    exact hasCardinalLT_iUnion _ hŒπ (fun i ‚Ü¶ (D i).hW)
  hP := hasCardinalLT_subtype_iSup _ hŒπ (fun i ‚Ü¶ (D i).hP)

variable {J Œ∫} in
/-- The union of two `Œ∫`-bounded diagrams. -/
@[simps]
def Diagram.max (D‚ÇÅ D‚ÇÇ : Diagram J Œ∫) :
    Diagram J Œ∫ where
  W := D‚ÇÅ.W ‚äî D‚ÇÇ.W
  P := D‚ÇÅ.P ‚äî D‚ÇÇ.P
  src := by
    rintro _ _ _ (h | h)
    ¬∑ exact Or.inl (D‚ÇÅ.src h)
    ¬∑ exact Or.inr (D‚ÇÇ.src h)
  tgt := by
    rintro _ _ _ (h | h)
    ¬∑ exact Or.inl (D‚ÇÅ.tgt h)
    ¬∑ exact Or.inr (D‚ÇÇ.tgt h)
  hW := hasCardinalLT_union (Cardinal.IsRegular.aleph0_le Fact.out) D‚ÇÅ.hW D‚ÇÇ.hW
  hP := hasCardinalLT_union (Cardinal.IsRegular.aleph0_le Fact.out) D‚ÇÅ.hP D‚ÇÇ.hP

variable [IsCardinalFiltered J Œ∫]
  (hJ : ‚àÄ (e : J), ‚àÉ (m : J) (_ : e ‚ü∂ m), IsEmpty (m ‚ü∂ e))

include hJ

lemma isCardinalFiltered_aux
    {Œπ : Type w} (D : Œπ ‚Üí DiagramWithUniqueTerminal J Œ∫) (hŒπ : HasCardinalLT Œπ Œ∫) :
    ‚àÉ (m : J) (u : ‚àÄ i, (D i).top ‚ü∂ m), (‚àÄ (i : Œπ), IsEmpty (m ‚ü∂ (D i).top)) ‚àß
      ‚àÄ (i‚ÇÅ i‚ÇÇ : Œπ) (j : J) (hj‚ÇÅ : (D i‚ÇÅ).P j) (hj‚ÇÇ : (D i‚ÇÇ).P j),
        (D i‚ÇÅ).isTerminal.lift hj‚ÇÅ ‚â´ u i‚ÇÅ = (D i‚ÇÇ).isTerminal.lift hj‚ÇÇ ‚â´ u i‚ÇÇ := by
  choose m‚ÇÄ t‚ÇÄ hm‚ÇÄ using fun i ‚Ü¶ hJ (D i).top
  let m‚ÇÅ := IsCardinalFiltered.max m‚ÇÄ hŒπ
  let t‚ÇÅ (i : Œπ) : m‚ÇÄ i ‚ü∂ m‚ÇÅ := IsCardinalFiltered.toMax m‚ÇÄ hŒπ i
  let u (i : Œπ) : (D i).top ‚ü∂ m‚ÇÅ := t‚ÇÄ i ‚â´ t‚ÇÅ i
  let S := { x : Œπ √ó Œπ √ó J // (D x.1).P x.2.2 ‚àß (D x.2.1).P x.2.2 }
  let shape : MultispanShape.{w, w} :=
    { L := { x : Œπ √ó Œπ √ó J // (D x.1).P x.2.2 ‚àß (D x.2.1).P x.2.2 }
      R := PUnit
      fst _ := ‚ü®‚ü©
      snd _ := ‚ü®‚ü© }
  let index : MultispanIndex shape J :=
    { left x := x.1.2.2
      right _ := m‚ÇÅ
      fst x := (D x.1.1).isTerminal.lift x.2.1 ‚â´ u x.1.1
      snd x := (D x.1.2.1).isTerminal.lift x.2.2 ‚â´ u x.1.2.1 }
  have hŒ∫ : Cardinal.aleph0 ‚â§ Œ∫ := Cardinal.IsRegular.aleph0_le Fact.out
  have hL : HasCardinalLT shape.L Œ∫ := by
    have : HasCardinalLT (Œπ √ó (Œ£ (i : Œπ), Subtype (D i).P)) Œ∫ :=
      hasCardinalLT_prod hŒ∫ hŒπ (hasCardinalLT_sigma _ _ hŒπ (fun i ‚Ü¶ (D i).hP))
    refine this.of_injective (fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, j‚ü©, h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ ‚ü®i‚ÇÅ, i‚ÇÇ, ‚ü®j, h‚ÇÇ‚ü©‚ü©) ?_
    rintro ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, j‚ü©, _, _‚ü© ‚ü®‚ü®i‚ÇÅ', i‚ÇÇ', j'‚ü©, _, _‚ü© h
    rw [Prod.ext_iff, Sigma.ext_iff] at h
    dsimp at h
    obtain rfl : i‚ÇÅ = i‚ÇÅ' := h.1
    obtain rfl : i‚ÇÇ = i‚ÇÇ' := h.2.1
    obtain rfl : j = j' := by simpa using h
    rfl
  have hR : HasCardinalLT shape.R Œ∫ := hasCardinalLT_of_finite _ _ hŒ∫
  have hshape : HasCardinalLT (Arrow (WalkingMultispan shape)) Œ∫ := by
    rw [hasCardinalLT_iff_of_equiv (WalkingMultispan.arrowEquiv shape),
      hasCardinalLT_sum_iff _ _ _ hŒ∫, hasCardinalLT_sum_iff _ _ _ hŒ∫,
      hasCardinalLT_iff_of_equiv (WalkingMultispan.equiv shape),
      hasCardinalLT_sum_iff _ _ _ hŒ∫]
    refine ‚ü®‚ü®?_, ?_‚ü©, ?_, ?_‚ü© <;> assumption
  let c : Multicofork _ := IsCardinalFiltered.cocone index.multispan hshape
  exact ‚ü®c.pt, fun i ‚Ü¶ u i ‚â´ c.œÄ ‚ü®‚ü©,
    fun i ‚Ü¶ ‚ü®fun hi ‚Ü¶ (hm‚ÇÄ i).false (t‚ÇÅ i ‚â´ c.œÄ ‚ü®‚ü© ‚â´ hi)‚ü©,
    fun i‚ÇÅ i‚ÇÇ j h‚ÇÅ h‚ÇÇ ‚Ü¶ by simpa [index, shape] using c.condition ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, j‚ü©, h‚ÇÅ, h‚ÇÇ‚ü©‚ü©

lemma isCardinalFiltered : IsCardinalFiltered (DiagramWithUniqueTerminal J Œ∫) Œ∫ :=
  isCardinalFiltered_preorder _ _ (fun Œπ D hŒπ ‚Ü¶ by
    have hŒ∫ : Cardinal.aleph0 ‚â§ Œ∫ := Cardinal.IsRegular.aleph0_le Fact.out
    simp only [‚Üê hasCardinalLT_iff_cardinal_mk_lt] at hŒπ
    obtain ‚ü®m, u, hm‚ÇÄ, hm‚ü© := isCardinalFiltered_aux J Œ∫ hJ D hŒπ
    let œÜ (x : (Œ£ (i : Œπ), (Subtype (D i).P))) : x.2.1 ‚ü∂ m :=
      (D x.1).isTerminal.lift x.2.2 ‚â´ u x.1
    have hD {i : Œπ} : ¬¨ (D i).P m := fun hi ‚Ü¶ (hm‚ÇÄ i).false ((D i).isTerminal.lift hi)
    let D‚ÇÄ := Diagram.iSup (fun i ‚Ü¶ (D i).toDiagram) hŒπ
    let D‚ÇÅ := D‚ÇÄ.max (.single m)
    let D‚ÇÇ : Diagram J Œ∫ :=
      { W := D‚ÇÅ.W ‚äî .ofHoms œÜ
        P := D‚ÇÅ.P
        src := by
          simp only [Diagram.max_W, Diagram.iSup_W, Diagram.single_W, Diagram.max_P, Pi.sup_apply,
            Diagram.iSup_P, iSup_apply, iSup_Prop_eq, Diagram.single_P,
            ObjectProperty.singleton_iff, sup_Prop_eq, D‚ÇÅ, D‚ÇÄ]
          rintro _ _ _ ((hf | ‚ü®‚ü®‚ü©‚ü©) | ‚ü®i, j, hj‚ü©)
          ¬∑ simp only [MorphismProperty.iSup_iff] at hf
            obtain ‚ü®i, hf‚ü© := hf
            exact Or.inl ‚ü®i, (D i).src hf‚ü©
          ¬∑ exact Or.inr rfl
          ¬∑ exact Or.inl ‚ü®i, hj‚ü©
        tgt := by
          simp only [Diagram.max_W, Diagram.iSup_W, Diagram.single_W, Diagram.max_P, Pi.sup_apply,
            Diagram.iSup_P, iSup_apply, iSup_Prop_eq, Diagram.single_P,
            ObjectProperty.singleton_iff, sup_Prop_eq, D‚ÇÅ, D‚ÇÄ]
          rintro _ _ _ ((hf | ‚ü®‚ü®‚ü©‚ü©) | ‚ü®i, j, hj‚ü©)
          ¬∑ simp only [MorphismProperty.iSup_iff] at hf
            obtain ‚ü®i, hf‚ü© := hf
            exact Or.inl ‚ü®i, (D i).tgt hf‚ü©
          ¬∑ exact Or.inr rfl
          ¬∑ exact Or.inr rfl
        hW := by
          rw [MorphismProperty.toSet_max]
          exact hasCardinalLT_union hŒ∫ D‚ÇÅ.hW
            (hasCardinalLT_toSet_morphismPropertyOfHoms _
              (hasCardinalLT_sigma _ _ hŒπ (fun i ‚Ü¶ (D i).hP)))
        hP := hasCardinalLT_subtype_max hŒ∫
                (hasCardinalLT_subtype_iSup _ hŒπ (fun i ‚Ü¶ (D i).hP))
                (hasCardinalLT_of_finite _ _ hŒ∫) }
    have hD‚ÇÇ {f : m ‚ü∂ m} (hf : D‚ÇÇ.W f) : f = ùüô _ := by
      simp only [Diagram.max_W, Diagram.iSup_W, Diagram.single_W, D‚ÇÅ, D‚ÇÄ, D‚ÇÇ] at hf
      obtain ((hf | ‚ü®‚ü®‚ü©‚ü©) | hf) := hf
      ¬∑ simp only [MorphismProperty.iSup_iff] at hf
        obtain ‚ü®i, hi‚ü© := hf
        exact (hD ((D i).src hi)).elim
      ¬∑ rfl
      ¬∑ rw [MorphismProperty.ofHoms_iff] at hf
        obtain ‚ü®‚ü®i, j, hj‚ü©, hi‚ü© := hf
        obtain rfl : m = j := congr_arg Arrow.leftFunc.obj hi
        exact (hD hj).elim
    let he : D‚ÇÇ.IsTerminal m := by
      have H {i : Œπ} {j : J} (hj : (D i).P j) {f : j ‚ü∂ m} (hf : D‚ÇÇ.W f) :
          f = œÜ ‚ü®i, ‚ü®_, hj‚ü©‚ü© := by
        simp only [Diagram.max_W, Diagram.iSup_W, Diagram.single_W, D‚ÇÅ, D‚ÇÄ, D‚ÇÇ] at hf
        obtain ((hf | ‚ü®‚ü®‚ü©‚ü©) | ‚ü®‚ü®i', j, hj'‚ü©‚ü©) := hf
        ¬∑ simp only [MorphismProperty.iSup_iff] at hf
          obtain ‚ü®i, hf‚ü© := hf
          exact (hD ((D i).tgt hf)).elim
        ¬∑ exact (hD hj).elim
        ¬∑ apply hm
      refine .ofExistsUnique ?_ ?_ ?_ ?_
      ¬∑ exact Or.inl (Or.inr ‚ü®‚ü®‚ü©‚ü©)
      ¬∑ simp only [Diagram.max_P, Pi.sup_apply, Diagram.iSup_P, iSup_apply, iSup_Prop_eq,
          Diagram.single_P, ObjectProperty.singleton_iff, sup_Prop_eq, Diagram.max_W,
          Diagram.iSup_W, Diagram.single_W, D‚ÇÅ, D‚ÇÄ, D‚ÇÇ]
        rintro j (‚ü®i, hi‚ü© | rfl)
        ¬∑ exact ‚ü®œÜ ‚ü®i, _, hi‚ü©, Or.inr (.mk _)‚ü©
        ¬∑ exact ‚ü®ùüô _, Or.inl (Or.inr ‚ü®‚ü®‚ü©‚ü©)‚ü©
      ¬∑ intro j hj l‚ÇÅ l‚ÇÇ hl‚ÇÅ hl‚ÇÇ
        simp only [Diagram.max_P, Pi.sup_apply, Diagram.iSup_P, iSup_apply, iSup_Prop_eq,
          Diagram.single_P, ObjectProperty.singleton_iff, sup_Prop_eq, D‚ÇÅ, D‚ÇÄ, D‚ÇÇ] at hj
        obtain (‚ü®i, hj‚ü© | rfl) := hj
        ¬∑ obtain rfl := H hj hl‚ÇÅ
          obtain rfl := H hj hl‚ÇÇ
          rfl
        ¬∑ rw [hD‚ÇÇ hl‚ÇÅ, hD‚ÇÇ hl‚ÇÇ]
      ¬∑ rintro j k f ((hf | ‚ü®‚ü®‚ü©‚ü©) | ‚ü®‚ü®i, j, hj‚ü©‚ü©)
        ¬∑ simp only [Diagram.iSup_W, MorphismProperty.iSup_iff, D‚ÇÄ] at hf
          obtain ‚ü®i, hf‚ü© := hf
          exact ‚ü®œÜ ‚ü®i, j, (D i).src hf‚ü©, œÜ ‚ü®i, k, (D i).tgt hf‚ü©, Or.inr ‚ü®_‚ü©, Or.inr ‚ü®_‚ü©,
            by simp [œÜ, (D i).isTerminal.comm_assoc _ hf]‚ü©
        ¬∑ exact ‚ü®ùüô _, ùüô _, Or.inl (Or.inr ‚ü®‚ü®‚ü©‚ü©), Or.inl (Or.inr ‚ü®‚ü®‚ü©‚ü©), by simp‚ü©
        ¬∑ exact ‚ü®œÜ ‚ü®i, j, hj‚ü©, ùüô _, Or.inr ‚ü®_‚ü©, Or.inl (Or.inr ‚ü®‚ü®‚ü©‚ü©), by simp‚ü©
    let D‚ÇÇ' : DiagramWithUniqueTerminal J Œ∫ :=
      { toDiagram := D‚ÇÇ
        top := _
        isTerminal := he
        uniq_terminal j hj := by
          have := hj.prop
          simp only [Diagram.max_P, Pi.sup_apply, Diagram.iSup_P, iSup_apply, iSup_Prop_eq,
            Diagram.single_P, ObjectProperty.singleton_iff, sup_Prop_eq, D‚ÇÅ, D‚ÇÄ, D‚ÇÇ] at this
          obtain (‚ü®i, hi‚ü© | rfl) := this
          ¬∑ exfalso
            exact (hm‚ÇÄ i).false (hj.lift (by simp [D‚ÇÇ, D‚ÇÅ]) ‚â´ (D i).isTerminal.lift hi)
          ¬∑ rfl }
    refine ‚ü®D‚ÇÇ', fun i ‚Ü¶ ‚ü®?_, ?_‚ü©‚ü©
    ¬∑ exact le_trans (le_trans (le_trans (by rfl) (le_iSup _ i)) le_sup_left) le_sup_left
    ¬∑ exact le_trans (le_trans (by rfl) (le_iSup _ i)) le_sup_left)

lemma final_functor : (functor J Œ∫).Final := by
  have hŒ∫ : Cardinal.aleph0 ‚â§ Œ∫ := Cardinal.IsRegular.aleph0_le Fact.out
  have := isCardinalFiltered J Œ∫ hJ
  have := isFiltered_of_isCardinalFiltered J Œ∫
  have := isFiltered_of_isCardinalFiltered (DiagramWithUniqueTerminal J Œ∫) Œ∫
  rw [Functor.final_iff_of_isFiltered]
  refine ‚ü®fun j ‚Ü¶ ‚ü®.single j, ‚ü®ùüô _‚ü©‚ü©, fun {j D} (f‚ÇÅ f‚ÇÇ : j ‚ü∂ D.top) ‚Ü¶ ?_‚ü©
  obtain ‚ü®m‚ÇÄ, t, hm‚ÇÄ‚ü© := hJ D.top
  obtain ‚ü®m‚ÇÅ, u, hu‚ü© : ‚àÉ (m‚ÇÅ : J) (u : m‚ÇÄ ‚ü∂ m‚ÇÅ), f‚ÇÅ ‚â´ t ‚â´ u = f‚ÇÇ ‚â´ t ‚â´ u :=
    ‚ü®_, IsFiltered.coeqHom (f‚ÇÅ ‚â´ t) (f‚ÇÇ ‚â´ t),
      by simpa using IsFiltered.coeq_condition (f‚ÇÅ ‚â´ t) (f‚ÇÇ ‚â´ t)‚ü©
  have h‚ÇÅ : ¬¨ (D.P m‚ÇÅ) := fun h‚ÇÅ ‚Ü¶ hm‚ÇÄ.false (u ‚â´ D.isTerminal.lift h‚ÇÅ)
  let œÜ (x : Subtype D.P) : x.1 ‚ü∂ m‚ÇÅ := D.isTerminal.lift x.2 ‚â´ t ‚â´ u
  let D‚ÇÄ := D.toDiagram.max (.single m‚ÇÅ)
  let D‚ÇÅ : Diagram J Œ∫ :=
    { W := D‚ÇÄ.W ‚äî .ofHoms œÜ
      P := D‚ÇÄ.P
      src := by
        rintro i j f (hf | ‚ü®‚ü®j, hj‚ü©‚ü©)
        ¬∑ exact D‚ÇÄ.src hf
        ¬∑ exact Or.inl hj
      tgt := by
        rintro i j f (hf | ‚ü®‚ü®j, hj‚ü©‚ü©)
        ¬∑ exact D‚ÇÄ.tgt hf
        ¬∑ exact Or.inr ‚ü®‚ü®‚ü©‚ü©
      hW :=
        hasCardinalLT_union hŒ∫
          (hasCardinalLT_union hŒ∫ D.hW
            (hasCardinalLT_toSet_morphismPropertyOfHoms _
            (hasCardinalLT_of_finite _ _ hŒ∫)))
          (hasCardinalLT_toSet_morphismPropertyOfHoms _ D.hP)
      hP :=
        hasCardinalLT_union hŒ∫ D.hP
          (hasCardinalLT_subtype_objectPropertyOfObj _
            (hasCardinalLT_of_finite _ _ hŒ∫)) }
  have h‚ÇÇ {j : J} (hj : D.P j) {f : j ‚ü∂ m‚ÇÅ} (hf : D‚ÇÅ.W f) :
      f = œÜ ‚ü®_, hj‚ü© := by
    obtain ((hf | ‚ü®‚ü®‚ü©‚ü©) | ‚ü®‚ü®‚ü©‚ü©) := hf
    ¬∑ exact (h‚ÇÅ (D.tgt hf)).elim
    ¬∑ exact (h‚ÇÅ hj).elim
    ¬∑ rfl
  have h‚ÇÉ {f : m‚ÇÅ ‚ü∂ m‚ÇÅ} (hf : D‚ÇÅ.W f) : f = ùüô _ := by
    obtain ((hf | ‚ü®‚ü®‚ü©‚ü©) | hf) := hf
    ¬∑ exact (h‚ÇÅ (D.src hf)).elim
    ¬∑ rfl
    ¬∑ rw [MorphismProperty.ofHoms_iff] at hf
      obtain ‚ü®‚ü®j, hj‚ü©, hf‚ü© := hf
      obtain rfl : m‚ÇÅ = j := congr_arg Arrow.leftFunc.obj hf
      exact (h‚ÇÅ hj).elim
  let hm‚ÇÅ : D‚ÇÅ.IsTerminal m‚ÇÅ :=
    .ofExistsUnique (Or.inl (Or.inr ‚ü®‚ü®‚ü©‚ü©)) (by
        rintro j (hj | ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©)
        ¬∑ exact ‚ü®œÜ ‚ü®_, hj‚ü©, Or.inr ‚ü®_‚ü©‚ü©
        ¬∑ exact ‚ü®ùüô _, Or.inl (Or.inr ‚ü®‚ü®‚ü©‚ü©)‚ü©) (by
        rintro j (hj | ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©) l‚ÇÅ l‚ÇÇ hl‚ÇÅ hl‚ÇÇ
        ¬∑ obtain rfl := h‚ÇÇ hj hl‚ÇÅ
          obtain rfl := h‚ÇÇ hj hl‚ÇÇ
          rfl
        ¬∑ rw [h‚ÇÉ hl‚ÇÅ, h‚ÇÉ hl‚ÇÇ]) (by
      rintro j k f ((hf | ‚ü®‚ü®‚ü©‚ü©) | ‚ü®‚ü®j, hj‚ü©‚ü©)
      ¬∑ exact ‚ü®œÜ ‚ü®_, D.src hf‚ü©, œÜ ‚ü®_, D.tgt hf‚ü©,
          Or.inr ‚ü®_‚ü©, Or.inr ‚ü®_‚ü©, D.isTerminal.comm_assoc _ hf _‚ü©
      ¬∑ exact ‚ü®ùüô _, ùüô _, Or.inl (Or.inr ‚ü®‚ü®‚ü©‚ü©), Or.inl (Or.inr ‚ü®‚ü®‚ü©‚ü©), by simp‚ü©
      ¬∑ exact ‚ü®œÜ ‚ü®_, hj‚ü©, ùüô _, Or.inr ‚ü®_‚ü©, Or.inl (Or.inr ‚ü®‚ü®‚ü©‚ü©), by simp‚ü©)
  have lift_eq (j : J) (hj : D.P j) : hm‚ÇÅ.lift (Or.inl hj) = œÜ ‚ü®_, hj‚ü© :=
    hm‚ÇÅ.uniq _ (Or.inr ‚ü®_‚ü©)
  let D‚ÇÅ' : DiagramWithUniqueTerminal J Œ∫ :=
    { toDiagram := D‚ÇÅ
      top := m‚ÇÅ
      isTerminal := hm‚ÇÅ
      uniq_terminal j hj := by
        obtain (hj' | ‚ü®‚ü®‚ü©‚ü©) := hj.prop
        ¬∑ exact hm‚ÇÄ.elim (u ‚â´ hj.lift (Or.inr ‚ü®‚ü®‚ü©‚ü©) ‚â´ D.isTerminal.lift hj')
        ¬∑ rfl}
  exact ‚ü®D‚ÇÅ', homOfLE ‚ü®le_sup_left.trans le_sup_left, le_sup_left‚ü©,
    by simpa [functorMap, D‚ÇÅ', lift_eq _ D.isTerminal.prop, œÜ]‚ü©

lemma aux :
    ‚àÉ (Œ± : Type w) (_ : PartialOrder Œ±) (_ : IsCardinalFiltered Œ± Œ∫)
      (F : Œ± ‚•§ J), F.Final :=
  ‚ü®DiagramWithUniqueTerminal J Œ∫, _, isCardinalFiltered J Œ∫ hJ,
    functor J Œ∫, final_functor J Œ∫ hJ‚ü©

end exists_cardinal_directed


/-!
The previous lemma `IsCardinalFiltered.exists_cardinal_directed.aux`
is the particular case of the main lemma
`IsCardinalFiltered.exists_cardinal_directed` below in the particular
case the `Œ∫`-filtered category `J` has no object `m : J` such that for any
object `j : J`, there exists a map `j ‚ü∂ m`.

The general case is obtained by applying the previous result to
the cartesian product `J √ó Œ∫.ord.toType`.
-/

@[stacks 0032]
lemma exists_cardinal_directed (J : Type w) [SmallCategory J] (Œ∫ : Cardinal.{w})
    [Fact Œ∫.IsRegular] [IsCardinalFiltered J Œ∫] :
    ‚àÉ (Œ± : Type w) (_ : PartialOrder Œ±) (_ : IsCardinalFiltered Œ± Œ∫)
      (F : Œ± ‚•§ J), F.Final := by
  have := isFiltered_of_isCardinalFiltered Œ∫.ord.toType Œ∫
  obtain ‚ü®Œ±, _, _, F, _‚ü© :=
    exists_cardinal_directed.aux (J √ó Œ∫.ord.toType) Œ∫ (fun ‚ü®j, x‚ü© ‚Ü¶
      ‚ü®‚ü®j, Order.succ x‚ü©, (ùüô _, homOfLE (Order.le_succ x)), ‚ü®fun ‚ü®_, f‚ü© ‚Ü¶ by
        have : NoMaxOrder Œ∫.ord.toType :=
          Cardinal.noMaxOrder (Cardinal.IsRegular.aleph0_le Fact.out)
        exact not_isMax _ (Order.max_of_succ_le (leOfHom f))‚ü©‚ü©)
  exact ‚ü®_, _, inferInstance, F ‚ãô Prod.fst _ _, inferInstance‚ü©

end IsCardinalFiltered

lemma IsFiltered.isDirected (Œ± : Type w) [PartialOrder Œ±] [IsFiltered Œ±] :
    IsDirected Œ± (¬∑ ‚â§ ¬∑) where
  directed i j := ‚ü®max i j, leOfHom (leftToMax i j), leOfHom (rightToMax i j)‚ü©

attribute [local instance] Cardinal.fact_isRegular_aleph0 in
@[stacks 0032]
lemma IsFiltered.exists_directed
    (J : Type w) [SmallCategory J] [IsFiltered J] :
    ‚àÉ (Œ± : Type w) (_ : PartialOrder Œ±) (_ : IsDirected Œ± (¬∑ ‚â§ ¬∑)) (_ : Nonempty Œ±)
      (F : Œ± ‚•§ J), F.Final := by
  have := (isCardinalFiltered_aleph0_iff.{w} J).2 inferInstance
  obtain ‚ü®Œ±, _, _, F, _‚ü© := IsCardinalFiltered.exists_cardinal_directed J .aleph0
  have : IsFiltered Œ± := by rwa [‚Üê isCardinalFiltered_aleph0_iff.{w}]
  exact ‚ü®Œ±, _, IsFiltered.isDirected _, nonempty, F, inferInstance‚ü©

end CategoryTheory
