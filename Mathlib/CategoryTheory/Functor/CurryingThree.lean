/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.CategoryTheory.Functor.Currying
import Mathlib.CategoryTheory.Functor.Trifunctor
import Mathlib.CategoryTheory.Products.Associator

/-!
# Currying of functors in three variables

We study the equivalence of categories
`currying‚ÇÉ : (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) ‚âå C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E`.

-/

namespace CategoryTheory

variable {C‚ÇÅ C‚ÇÇ C‚ÇÅ‚ÇÇ C‚ÇÉ C‚ÇÇ‚ÇÉ D‚ÇÅ D‚ÇÇ D‚ÇÉ E : Type*}
  [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ] [Category C‚ÇÅ‚ÇÇ] [Category C‚ÇÇ‚ÇÉ]
  [Category D‚ÇÅ] [Category D‚ÇÇ] [Category D‚ÇÉ] [Category E]

/-- The equivalence of categories `(C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) ‚âå C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E`
given by the curryfication of functors in three variables. -/
def currying‚ÇÉ : (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) ‚âå C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E :=
  currying.trans (currying.trans (prod.associativity C‚ÇÅ C‚ÇÇ C‚ÇÉ).congrLeft)

/-- Uncurrying a functor in three variables. -/
abbrev uncurry‚ÇÉ : (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) ‚•§ C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E := currying‚ÇÉ.functor

/-- Currying a functor in three variables. -/
abbrev curry‚ÇÉ : (C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E) ‚•§ C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E := currying‚ÇÉ.inverse

/-- Uncurrying functors in three variables gives a fully faithful functor. -/
def fullyFaithfulUncurry‚ÇÉ :
    (uncurry‚ÇÉ : (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) ‚•§ (C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E)).FullyFaithful :=
  currying‚ÇÉ.fullyFaithfulFunctor

@[simp]
lemma curry‚ÇÉ_obj_map_app_app (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E)
    {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((curry‚ÇÉ.obj F).map f).app X‚ÇÇ).app X‚ÇÉ = F.map ‚ü®f, ùüô X‚ÇÇ, ùüô X‚ÇÉ‚ü© := rfl

@[simp]
lemma curry‚ÇÉ_obj_obj_map_app (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((curry‚ÇÉ.obj F).obj X‚ÇÅ).map f).app X‚ÇÉ = F.map ‚ü®ùüô X‚ÇÅ, f, ùüô X‚ÇÉ‚ü© := rfl

@[simp]
lemma curry‚ÇÉ_obj_obj_obj_map (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) {X‚ÇÉ Y‚ÇÉ : C‚ÇÉ} (f : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :
    (((curry‚ÇÉ.obj F).obj X‚ÇÅ).obj X‚ÇÇ).map f = F.map ‚ü®ùüô X‚ÇÅ, ùüô X‚ÇÇ, f‚ü© := rfl

@[simp]
lemma curry‚ÇÉ_map_app_app_app {F G : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E} (f : F ‚ü∂ G)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((curry‚ÇÉ.map f).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ = f.app ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ‚ü© := rfl

@[simp]
lemma currying‚ÇÉ_unitIso_hom_app_app_app_app (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((currying‚ÇÉ.unitIso.hom.app F).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ = ùüô _ := by
  simp [currying‚ÇÉ, Equivalence.unit]

@[simp]
lemma currying‚ÇÉ_unitIso_inv_app_app_app_app (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((currying‚ÇÉ.unitIso.inv.app F).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ = ùüô _ := by
  simp [currying‚ÇÉ, Equivalence.unitInv]

/-- Given functors `F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ`, `F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ`, `F‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ`
and `G : D‚ÇÅ √ó D‚ÇÇ √ó D‚ÇÉ ‚•§ E`, this is the isomorphism between
`curry‚ÇÉ.obj (F‚ÇÅ.prod (F‚ÇÇ.prod F‚ÇÉ) ‚ãô G) : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E`
and `F‚ÇÅ ‚ãô curry‚ÇÉ.obj G ‚ãô ((whiskeringLeft‚ÇÇ E).obj F‚ÇÇ).obj F‚ÇÉ`. -/
@[simps!]
def curry‚ÇÉObjProdComp (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (F‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ) (G : D‚ÇÅ √ó D‚ÇÇ √ó D‚ÇÉ ‚•§ E) :
    curry‚ÇÉ.obj (F‚ÇÅ.prod (F‚ÇÇ.prod F‚ÇÉ) ‚ãô G) ‚âÖ
      F‚ÇÅ ‚ãô curry‚ÇÉ.obj G ‚ãô ((whiskeringLeft‚ÇÇ E).obj F‚ÇÇ).obj F‚ÇÉ :=
  NatIso.ofComponents
    (fun X‚ÇÅ ‚Ü¶ NatIso.ofComponents
      (fun X‚ÇÇ ‚Ü¶ NatIso.ofComponents (fun X‚ÇÉ ‚Ü¶ Iso.refl _)))

/-- `bifunctorComp‚ÇÅ‚ÇÇ` can be described in terms of the curryfication of functors. -/
@[simps!]
def bifunctorComp‚ÇÅ‚ÇÇIso (F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ) (G : C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) :
    bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G ‚âÖ curry.obj (uncurry.obj F‚ÇÅ‚ÇÇ ‚ãô G) :=
  NatIso.ofComponents (fun _ => NatIso.ofComponents (fun _ => Iso.refl _))

/-- `bifunctorComp‚ÇÇ‚ÇÉ` can be described in terms of the curryfication of functors. -/
@[simps!]
def bifunctorComp‚ÇÇ‚ÇÉIso (F : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ E) (G‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ‚ÇÉ) :
    bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ ‚âÖ
    curry.obj (curry.obj (prod.associator _ _ _ ‚ãô
      uncurry.obj (uncurry.obj G‚ÇÇ‚ÇÉ ‚ãô F.flip).flip)) :=
  NatIso.ofComponents (fun _ ‚Ü¶ NatIso.ofComponents (fun _ ‚Ü¶
    NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _)))

end CategoryTheory
