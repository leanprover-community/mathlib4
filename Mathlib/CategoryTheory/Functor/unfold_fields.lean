namespace CategoryTheory

universe v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ

class Quiver (V : Type u) where
  Hom : V ‚Üí V ‚Üí Sort v

infixr:10 " ‚ü∂ " => Quiver.Hom

structure Prefunctor (V : Type u‚ÇÅ) [Quiver.{v‚ÇÅ} V] (W : Type u‚ÇÇ) [Quiver.{v‚ÇÇ} W] where
  obj : V ‚Üí W
  map : ‚àÄ {X Y : V}, (X ‚ü∂ Y) ‚Üí (obj X ‚ü∂ obj Y)

class CategoryStruct (obj : Type u) extends Quiver.{v + 1} obj : Type max u (v + 1) where
  id : ‚àÄ X : obj, Hom X X
  comp : ‚àÄ {X Y Z : obj}, (X ‚ü∂ Y) ‚Üí (Y ‚ü∂ Z) ‚Üí (X ‚ü∂ Z)

notation "ùüô" => CategoryStruct.id  -- type as \b1

infixr:80 " ‚â´ " => CategoryStruct.comp -- type as \gg

class Category (obj : Type u) extends CategoryStruct.{v} obj : Type max u (v + 1) where
  id_comp : ‚àÄ {X Y : obj} (f : X ‚ü∂ Y), ùüô X ‚â´ f = f
  comp_id : ‚àÄ {X Y : obj} (f : X ‚ü∂ Y), f ‚â´ ùüô Y = f
  assoc : ‚àÄ {W X Y Z : obj} (f : W ‚ü∂ X) (g : X ‚ü∂ Y) (h : Y ‚ü∂ Z), (f ‚â´ g) ‚â´ h = f ‚â´ g ‚â´ h

attribute [simp] Category.id_comp Category.comp_id Category.assoc

structure Functor (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]
    extends Prefunctor C D : Type max v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ where
  map_id : ‚àÄ X : C, map (ùüô X) = ùüô (obj X)
  map_comp : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), map (f ‚â´ g) = map f ‚â´ map g

infixr:26 " ‚•§ " => Functor -- type as \func

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

structure NatTrans (F G : C ‚•§ D) : Type max u‚ÇÅ v‚ÇÇ where
  app : ‚àÄ X : C, F.obj X ‚ü∂ G.obj X
  naturality : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), F.map f ‚â´ app Y = app X ‚â´ G.map f

namespace NatTrans

variable {F G H : C ‚•§ D}

theorem ext {Œ± Œ≤ : NatTrans F G} (w : ‚àÄ X, Œ±.app X = Œ≤.app X) : Œ± = Œ≤ := sorry

/-- `NatTrans.id F` is the identity natural transformation on a functor `F`. -/
protected def id (F : C ‚•§ D) : NatTrans F F where
  app X := ùüô (F.obj X)
  naturality := sorry

@[simp]
theorem id_app (F : C ‚•§ D) (X : C) : (NatTrans.id F).app X = ùüô (F.obj X) := rfl

/-- `vcomp Œ± Œ≤` is the vertical compositions of natural transformations. -/
def vcomp (Œ± : NatTrans F G) (Œ≤ : NatTrans G H) : NatTrans F H where
  app X := Œ±.app X ‚â´ Œ≤.app X
  naturality := sorry

@[simp]
theorem vcomp_app (Œ± : NatTrans F G) (Œ≤ : NatTrans G H) (X : C) :
    (vcomp Œ± Œ≤).app X = Œ±.app X ‚â´ Œ≤.app X := rfl

end NatTrans

open NatTrans

def Functor'.Category : Category.{max u‚ÇÅ v‚ÇÇ} (C ‚•§ D) where
  Hom F G := NatTrans F G
  id F := NatTrans.id F
  comp Œ± Œ≤ := vcomp Œ± Œ≤
  comp_id := by
    intros
    apply NatTrans.ext
    intros
    -- We should be able to close the goal with `simp`, but `vcomp_app` won't fire.
    -- Instead, we resort to:
    erw [vcomp_app]
    erw [id_app]
    simp
  id_comp := sorry
  assoc := sorry


instance Functor.CategoryStruct : CategoryStruct.{max u‚ÇÅ v‚ÇÇ} (C ‚•§ D) where
  Hom F G := NatTrans F G
  id F := NatTrans.id F
  comp Œ± Œ≤ := vcomp Œ± Œ≤

-- Changing this to Functor'.C makes it pick up fields from the `def` above?
def Functor'.CC : Category.{max u‚ÇÅ v‚ÇÇ} (C ‚•§ D) where
  Hom F G := NatTrans F G
  id F := NatTrans.id F
  comp Œ± Œ≤ := vcomp Œ± Œ≤

theorem id_def (F : C ‚•§ D) : ùüô F = NatTrans.id F := rfl
theorem comp_def {F G H : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) : Œ± ‚â´ Œ≤ = vcomp Œ± Œ≤ := rfl

instance Functor.CC : Category.{max u‚ÇÅ v‚ÇÇ} (C ‚•§ D) where
  comp_id := by
    intros
    apply NatTrans.ext
    intros
    simp [id_def, comp_def]
  id_comp := sorry
  assoc := sorry
