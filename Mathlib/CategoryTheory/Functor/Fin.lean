-- from LTE
import Mathlib.CategoryTheory.Category.Preorder
import Mathlib.Tactic.IntervalCases
import Mathlib.Tactic.Linarith

open CategoryTheory

universe v u

namespace CategoryTheory

variable {C : Type u} [Category.{v} C]

namespace fin3FunctorMk

variable (F : Fin 3 ‚Üí C) (a : F 0 ‚ü∂ F 1) (b : F 1 ‚ü∂ F 2)

def map' : ‚àÄ (i j : Fin 3) (_ : i ‚â§ j), F i ‚ü∂ F j
| ‚ü®0,hi‚ü©, ‚ü®0,_‚ü©, _ => ùüô _
| ‚ü®1,hi‚ü©, ‚ü®1,_‚ü©, _ => ùüô _
| ‚ü®2,hi‚ü©, ‚ü®2,_‚ü©, _ => ùüô _
| ‚ü®0,_‚ü©, ‚ü®1,_‚ü©, _ => a
| ‚ü®1,_‚ü©, ‚ü®2,_‚ü©, _ => b
| ‚ü®0,hi‚ü©, ‚ü®2,hj‚ü©, _ => a ‚â´ b
| ‚ü®i+3,hi‚ü©, _, _ => by linarith
| _, ‚ü®j+3,hj‚ü©, _ => by linarith
| ‚ü®i+1,hi‚ü©, ‚ü®0,hj‚ü©, (H : i + 1 ‚â§ 0) => by linarith
| ‚ü®i+2,hi‚ü©, ‚ü®1,hj‚ü©, (H : i + 2 ‚â§ 1) => by linarith

lemma map'_id : ‚àÄ (i : Fin 3), map' F a b i i le_rfl = ùüô _
| ‚ü®0,_‚ü© => rfl
| ‚ü®1,_‚ü© => rfl
| ‚ü®2,_‚ü© => rfl
| ‚ü®i+3,hi‚ü© => by norm_num at hi

lemma map'_comp : ‚àÄ (i j k : Fin 3) (hij : i ‚â§ j) (hjk : j ‚â§ k),
  map' F a b i j hij ‚â´ map' F a b j k hjk = map' F a b i k (hij.trans hjk)
| ‚ü®0, _‚ü©, ‚ü®0, _‚ü©, k, _, _ => Category.id_comp _
| ‚ü®1, _‚ü©, ‚ü®1, _‚ü©, k, _, _ => Category.id_comp _
| i, ‚ü®1, _‚ü©, ‚ü®1, _‚ü©, _, _ => Category.comp_id _
| i, ‚ü®2, _‚ü©, ‚ü®2, _‚ü©, _, _ => Category.comp_id _
| ‚ü®0, _‚ü©, ‚ü®1, _‚ü©, ‚ü®2, _‚ü©, _, _ => rfl
| ‚ü®i+3,hi‚ü©, _, _, _, _ => by norm_num at hi
| _, ‚ü®j+3,hj‚ü©, _, _, _ => by norm_num at hj
| _, _, ‚ü®k+3,hk‚ü©, _, _ => by norm_num at hk
| ‚ü®i+1,hi‚ü©, ‚ü®0,hj‚ü©, _, (H : i + 1 ‚â§ 0), _ => by norm_num at H
| ‚ü®i+2,hi‚ü©, ‚ü®1,hj‚ü©, _, (H : i + 2 ‚â§ 1), _ => by exfalso; linarith
| _, ‚ü®i+1,hi‚ü©, ‚ü®0,hj‚ü©, _, (H : i + 1 ‚â§ 0) => by exfalso; linarith
| _, ‚ü®i+2,hi‚ü©, ‚ü®1,hj‚ü©, _, (H : i + 2 ‚â§ 1) => by exfalso; linarith

end fin3FunctorMk

def fin3FunctorMk (F : Fin 3 ‚Üí C) (a : F 0 ‚ü∂ F 1) (b : F 1 ‚ü∂ F 2) : Fin 3 ‚•§ C where
  obj := F
  map hij := fin3FunctorMk.map' F a b _ _ hij.le
  map_id _ := fin3FunctorMk.map'_id F a b _
  map_comp hij hjk := by rw [fin3FunctorMk.map'_comp F a b _ _ _ hij.le hjk.le]

namespace fin4FunctorMk

variable (F : Fin 4 ‚Üí C) (a : F 0 ‚ü∂ F 1) (b : F 1 ‚ü∂ F 2) (c : F 2 ‚ü∂ F 3)

def map' : ‚àÄ (i j : Fin 4) (_ : i ‚â§ j), F i ‚ü∂ F j
| ‚ü®0,hi‚ü©, ‚ü®0,_‚ü©, _ => ùüô _
| ‚ü®1,hi‚ü©, ‚ü®1,_‚ü©, _ => ùüô _
| ‚ü®2,hi‚ü©, ‚ü®2,_‚ü©, _ => ùüô _
| ‚ü®3,hi‚ü©, ‚ü®3,_‚ü©, _ => ùüô _
| ‚ü®0,_‚ü©, ‚ü®1,_‚ü©, _ => a
| ‚ü®1,_‚ü©, ‚ü®2,_‚ü©, _ => b
| ‚ü®2,_‚ü©, ‚ü®3,_‚ü©, _ => c
| ‚ü®0,hi‚ü©, ‚ü®2,hj‚ü©, _ => a ‚â´ b
| ‚ü®1,hi‚ü©, ‚ü®3,hj‚ü©, _ => b ‚â´ c
| ‚ü®0,hi‚ü©, ‚ü®3,hj‚ü©, _ => a ‚â´ b ‚â´ c
| ‚ü®i+4,hi‚ü©, _, _ => by exfalso; linarith
| _, ‚ü®j+4,hj‚ü©, _ => by exfalso; linarith
| ‚ü®i+1,hi‚ü©, ‚ü®0,hj‚ü©, (H : _ ‚â§ 0) => by exfalso; linarith
| ‚ü®i+2,hi‚ü©, ‚ü®1,hj‚ü©, (H : _ ‚â§ 1) => by exfalso; linarith
| ‚ü®3,hi‚ü©, ‚ü®2,hj‚ü©, (H : 3 ‚â§ 2) => by exfalso; linarith

lemma map'_id : ‚àÄ (i : Fin 4), map' F a b c i i le_rfl = ùüô _
| ‚ü®0,hi‚ü© => rfl
| ‚ü®1,hi‚ü© => rfl
| ‚ü®2,hi‚ü© => rfl
| ‚ü®3,hi‚ü© => rfl
| ‚ü®i+4,hi‚ü© => by exfalso; linarith

lemma map'_comp : ‚àÄ (i j k : Fin 4) (hij : i ‚â§ j) (hjk : j ‚â§ k),
  map' F a b c i j hij ‚â´ map' F a b c j k hjk = map' F a b c i k (hij.trans hjk)
| ‚ü®0, _‚ü©, ‚ü®0, _‚ü©, k, _, _ => Category.id_comp _
| ‚ü®1, _‚ü©, ‚ü®1, _‚ü©, k, _, _ => Category.id_comp _
| ‚ü®2, _‚ü©, ‚ü®2, _‚ü©, k, _, _ => Category.id_comp _
| i, ‚ü®1, _‚ü©, ‚ü®1, _‚ü©, _, _ => Category.comp_id _
| i, ‚ü®2, _‚ü©, ‚ü®2, _‚ü©, _, _ => Category.comp_id _
| i, ‚ü®3, _‚ü©, ‚ü®3, _‚ü©, _, _ => Category.comp_id _
| ‚ü®0, _‚ü©, ‚ü®1, _‚ü©, ‚ü®2, _‚ü©, _, _ => rfl
| ‚ü®0, _‚ü©, ‚ü®1, _‚ü©, ‚ü®3, _‚ü©, _, _ => rfl
| ‚ü®0, _‚ü©, ‚ü®2, _‚ü©, ‚ü®3, _‚ü©, _, _ => Category.assoc a b c
| ‚ü®1, _‚ü©, ‚ü®2, _‚ü©, ‚ü®3, _‚ü©, _, _ => rfl
| ‚ü®i+4,hi‚ü©, _, _, _, _ => by exfalso; linarith
| _, ‚ü®j+4,hj‚ü©, _, _, _ => by exfalso; linarith
| _, _, ‚ü®k+4,hk‚ü©, _, _ => by exfalso; linarith
| ‚ü®i+1,hi‚ü©, ‚ü®0,hj‚ü©, _, (H : _ ‚â§ 0), _ => by exfalso; linarith
| ‚ü®i+2,hi‚ü©, ‚ü®1,hj‚ü©, _, (H : _ ‚â§ 1), _ => by exfalso; linarith
| ‚ü®3,hi‚ü©, ‚ü®2,hj‚ü©, _, (H : _ ‚â§ 2), _ => by exfalso; linarith
| _, ‚ü®i+1,hi‚ü©, ‚ü®0,hj‚ü©, _, (H : _ ‚â§ 0) => by exfalso; linarith
| _, ‚ü®i+2,hi‚ü©, ‚ü®1,hj‚ü©, _, (H : _ ‚â§ 1) => by exfalso; linarith
| _, ‚ü®3,hi‚ü©, ‚ü®2,hj‚ü©, _, (H : _ ‚â§ 2) => by exfalso; linarith


end fin4FunctorMk

def fin4FunctorMk (F : Fin 4 ‚Üí C) (a : F 0 ‚ü∂ F 1) (b : F 1 ‚ü∂ F 2) (c : F 2 ‚ü∂ F 3) : Fin 4 ‚•§ C where
  obj := F
  map hij := fin4FunctorMk.map' F a b c _ _ hij.le
  map_id _ := fin4FunctorMk.map'_id F a b c _
  map_comp hij hjk := by rw [fin4FunctorMk.map'_comp F a b c _ _ _ hij.le hjk.le]

end CategoryTheory
