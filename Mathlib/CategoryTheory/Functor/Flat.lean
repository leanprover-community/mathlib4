/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.CategoryTheory.Limits.ConeCategory
import Mathlib.CategoryTheory.Limits.FilteredColimitCommutesFiniteLimit
import Mathlib.CategoryTheory.Limits.Preserves.FunctorCategory
import Mathlib.CategoryTheory.Limits.Bicones
import Mathlib.CategoryTheory.Limits.Comma
import Mathlib.CategoryTheory.Limits.Preserves.Finite
import Mathlib.CategoryTheory.Limits.Shapes.FiniteLimits

#align_import category_theory.functor.flat from "leanprover-community/mathlib"@"39478763114722f0ec7613cb2f3f7701f9b86c8d"
/-!
# Representably flat functors

We define representably flat functors as functors such that the category of structured arrows
over `X` is cofiltered for each `X`. This concept is also known as flat functors as in [Elephant]
Remark C2.3.7, and this name is suggested by Mike Shulman in
https://golem.ph.utexas.edu/category/2011/06/flat_functors_and_morphisms_of.html to avoid
confusion with other notions of flatness.

This definition is equivalent to left exact functors (functors that preserves finite limits) when
`C` has all finite limits.

## Main results

* `flat_of_preservesFiniteLimits`: If `F : C ‚•§ D` preserves finite limits and `C` has all finite
  limits, then `F` is flat.
* `preservesFiniteLimitsOfFlat`: If `F : C ‚•§ D` is flat, then it preserves all finite limits.
* `preservesFiniteLimitsIffFlat`: If `C` has all finite limits,
  then `F` is flat iff `F` is left_exact.
* `lanPreservesFiniteLimitsOfFlat`: If `F : C ‚•§ D` is a flat functor between small categories,
  then the functor `Lan F.op` between presheaves of sets preserves all finite limits.
* `flat_iff_lan_flat`: If `C`, `D` are small and `C` has all finite limits, then `F` is flat iff
  `Lan F.op : (C·µí·µñ ‚•§ Type*) ‚•§ (D·µí·µñ ‚•§ Type*)` is flat.
* `preservesFiniteLimitsIffLanPreservesFiniteLimits`: If `C`, `D` are small and `C` has all
  finite limits, then `F` preserves finite limits iff `Lan F.op : (C·µí·µñ ‚•§ Type*) ‚•§ (D·µí·µñ ‚•§ Type*)`
  does.

-/


universe w v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open CategoryTheory

open CategoryTheory.Limits

open Opposite

namespace CategoryTheory

section RepresentablyFlat

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

variable {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E]

/-- A functor `F : C ‚•§ D` is representably-flat functor if the comma category `(X/F)`
is cofiltered for each `X : C`.
-/
class RepresentablyFlat (F : C ‚•§ D) : Prop where
  cofiltered : ‚àÄ X : D, IsCofiltered (StructuredArrow X F)
#align category_theory.representably_flat CategoryTheory.RepresentablyFlat

attribute [instance] RepresentablyFlat.cofiltered

attribute [local instance] IsCofiltered.nonempty

instance RepresentablyFlat.id : RepresentablyFlat (ùü≠ C) := by
  constructor
  intro X
  haveI : Nonempty (StructuredArrow X (ùü≠ C)) := ‚ü®StructuredArrow.mk (ùüô _)‚ü©
  suffices : IsCofilteredOrEmpty (StructuredArrow X (ùü≠ C))
  ¬∑ constructor
  constructor
  ¬∑ intro Y Z
    use StructuredArrow.mk (ùüô _)
    use StructuredArrow.homMk Y.hom (by erw [Functor.id_map, Category.id_comp])
    use StructuredArrow.homMk Z.hom (by erw [Functor.id_map, Category.id_comp])
  ¬∑ intro Y Z f g
    use StructuredArrow.mk (ùüô _)
    use StructuredArrow.homMk Y.hom (by erw [Functor.id_map, Category.id_comp])
    ext
    trans Z.hom <;> simp
#align category_theory.representably_flat.id CategoryTheory.RepresentablyFlat.id

instance RepresentablyFlat.comp (F : C ‚•§ D) (G : D ‚•§ E) [RepresentablyFlat F]
    [RepresentablyFlat G] : RepresentablyFlat (F ‚ãô G) := by
  constructor
  intro X
  have : Nonempty (StructuredArrow X (F ‚ãô G)) := by
    have f‚ÇÅ : StructuredArrow X G := Nonempty.some inferInstance
    have f‚ÇÇ : StructuredArrow f‚ÇÅ.right F := Nonempty.some inferInstance
    exact ‚ü®StructuredArrow.mk (f‚ÇÅ.hom ‚â´ G.map f‚ÇÇ.hom)‚ü©
  suffices : IsCofilteredOrEmpty (StructuredArrow X (F ‚ãô G))
  ¬∑ constructor
  constructor
  ¬∑ intro Y Z
    let W :=
      @IsCofiltered.min (StructuredArrow X G) _ _ (StructuredArrow.mk Y.hom)
        (StructuredArrow.mk Z.hom)
    let Y' : W ‚ü∂ _ := IsCofiltered.minToLeft _ _
    let Z' : W ‚ü∂ _ := IsCofiltered.minToRight _ _
    let W' :=
      @IsCofiltered.min (StructuredArrow W.right F) _ _ (StructuredArrow.mk Y'.right)
        (StructuredArrow.mk Z'.right)
    let Y'' : W' ‚ü∂ _ := IsCofiltered.minToLeft _ _
    let Z'' : W' ‚ü∂ _ := IsCofiltered.minToRight _ _
    use StructuredArrow.mk (W.hom ‚â´ G.map W'.hom)
    use StructuredArrow.homMk Y''.right (by simp [‚Üê G.map_comp])
    use StructuredArrow.homMk Z''.right (by simp [‚Üê G.map_comp])
  ¬∑ intro Y Z f g
    let W :=
      @IsCofiltered.eq (StructuredArrow X G) _ _ (StructuredArrow.mk Y.hom)
        (StructuredArrow.mk Z.hom) (StructuredArrow.homMk (F.map f.right) (StructuredArrow.w f))
        (StructuredArrow.homMk (F.map g.right) (StructuredArrow.w g))
    let h : W ‚ü∂ _ := IsCofiltered.eqHom _ _
    let h_cond : h ‚â´ _ = h ‚â´ _ := IsCofiltered.eq_condition _ _
    let W' :=
      @IsCofiltered.eq (StructuredArrow W.right F) _ _ (StructuredArrow.mk h.right)
        (StructuredArrow.mk (h.right ‚â´ F.map f.right)) (StructuredArrow.homMk f.right rfl)
        (StructuredArrow.homMk g.right (congr_arg CommaMorphism.right h_cond).symm)
    let h' : W' ‚ü∂ _ := IsCofiltered.eqHom _ _
    let h'_cond : h' ‚â´ _ = h' ‚â´ _ := IsCofiltered.eq_condition _ _
    use StructuredArrow.mk (W.hom ‚â´ G.map W'.hom)
    use StructuredArrow.homMk h'.right (by simp [‚Üê G.map_comp])
    ext
    exact (congr_arg CommaMorphism.right h'_cond : _)
#align category_theory.representably_flat.comp CategoryTheory.RepresentablyFlat.comp

end RepresentablyFlat

section HasLimit

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÅ} D]

attribute [local instance] hasFiniteLimits_of_hasFiniteLimits_of_size

theorem cofiltered_of_hasFiniteLimits [HasFiniteLimits C] : IsCofiltered C :=
  { cone_objs := fun A B => ‚ü®Limits.prod A B, Limits.prod.fst, Limits.prod.snd, trivial‚ü©
    cone_maps := fun _ _ f g => ‚ü®equalizer f g, equalizer.Œπ f g, equalizer.condition f g‚ü©
    nonempty := ‚ü®‚ä§_ C‚ü© }
#align category_theory.cofiltered_of_has_finite_limits CategoryTheory.cofiltered_of_hasFiniteLimits

theorem flat_of_preservesFiniteLimits [HasFiniteLimits C] (F : C ‚•§ D) [PreservesFiniteLimits F] :
    RepresentablyFlat F :=
  ‚ü®fun X =>
    haveI : HasFiniteLimits (StructuredArrow X F) := by
      apply hasFiniteLimits_of_hasFiniteLimits_of_size.{v‚ÇÅ} (StructuredArrow X F)
      intro J sJ fJ
      constructor
      -- porting note: instance was inferred automatically in Lean 3
      infer_instance
    cofiltered_of_hasFiniteLimits‚ü©
#align category_theory.flat_of_preserves_finite_limits CategoryTheory.flat_of_preservesFiniteLimits

namespace PreservesFiniteLimitsOfFlat

open StructuredArrow

variable {J : Type v‚ÇÅ} [SmallCategory J] [FinCategory J] {K : J ‚•§ C}

variable (F : C ‚•§ D) [RepresentablyFlat F] {c : Cone K} (hc : IsLimit c) (s : Cone (K ‚ãô F))

/-- (Implementation).
Given a limit cone `c : cone K` and a cone `s : cone (K ‚ãô F)` with `F` representably flat,
`s` can factor through `F.map_cone c`.
-/
noncomputable def lift : s.pt ‚ü∂ F.obj c.pt :=
  let s' := IsCofiltered.cone (s.toStructuredArrow ‚ãô StructuredArrow.pre _ K F)
  s'.pt.hom ‚â´
    (F.map <|
      hc.lift <|
        (Cones.postcompose
              ({ app := fun X => ùüô _ } :
                (s.toStructuredArrow ‚ãô pre s.pt K F) ‚ãô proj s.pt F ‚ü∂ K)).obj <|
          (StructuredArrow.proj s.pt F).mapCone s')
#align category_theory.preserves_finite_limits_of_flat.lift CategoryTheory.PreservesFiniteLimitsOfFlat.lift

theorem fac (x : J) : lift F hc s ‚â´ (F.mapCone c).œÄ.app x = s.œÄ.app x := by
  simp [lift, ‚Üê Functor.map_comp]
#align category_theory.preserves_finite_limits_of_flat.fac CategoryTheory.PreservesFiniteLimitsOfFlat.fac

theorem uniq {K : J ‚•§ C} {c : Cone K} (hc : IsLimit c) (s : Cone (K ‚ãô F))
    (f‚ÇÅ f‚ÇÇ : s.pt ‚ü∂ F.obj c.pt) (h‚ÇÅ : ‚àÄ j : J, f‚ÇÅ ‚â´ (F.mapCone c).œÄ.app j = s.œÄ.app j)
    (h‚ÇÇ : ‚àÄ j : J, f‚ÇÇ ‚â´ (F.mapCone c).œÄ.app j = s.œÄ.app j) : f‚ÇÅ = f‚ÇÇ := by
  -- We can make two cones over the diagram of `s` via `f‚ÇÅ` and `f‚ÇÇ`.
  let Œ±‚ÇÅ : (F.mapCone c).toStructuredArrow ‚ãô map f‚ÇÅ ‚ü∂ s.toStructuredArrow :=
    { app := fun X => eqToHom (by simp [‚Üê h‚ÇÅ]) }
  let Œ±‚ÇÇ : (F.mapCone c).toStructuredArrow ‚ãô map f‚ÇÇ ‚ü∂ s.toStructuredArrow :=
    { app := fun X => eqToHom (by simp [‚Üê h‚ÇÇ]) }
  let c‚ÇÅ : Cone (s.toStructuredArrow ‚ãô pre s.pt K F) :=
    (Cones.postcompose (whiskerRight Œ±‚ÇÅ (pre s.pt K F) : _)).obj (c.toStructuredArrowCone F f‚ÇÅ)
  let c‚ÇÇ : Cone (s.toStructuredArrow ‚ãô pre s.pt K F) :=
    (Cones.postcompose (whiskerRight Œ±‚ÇÇ (pre s.pt K F) : _)).obj (c.toStructuredArrowCone F f‚ÇÇ)
  -- The two cones can then be combined and we may obtain a cone over the two cones since
  -- `StructuredArrow s.pt F` is cofiltered.
  let c‚ÇÄ := IsCofiltered.cone (biconeMk _ c‚ÇÅ c‚ÇÇ)
  let g‚ÇÅ : c‚ÇÄ.pt ‚ü∂ c‚ÇÅ.pt := c‚ÇÄ.œÄ.app Bicone.left
  let g‚ÇÇ : c‚ÇÄ.pt ‚ü∂ c‚ÇÇ.pt := c‚ÇÄ.œÄ.app Bicone.right
  -- Then `g‚ÇÅ.right` and `g‚ÇÇ.right` are two maps from the same cone into the `c`.
  have : ‚àÄ j : J, g‚ÇÅ.right ‚â´ c.œÄ.app j = g‚ÇÇ.right ‚â´ c.œÄ.app j := by
    intro j
    injection c‚ÇÄ.œÄ.naturality (BiconeHom.left j) with _ e‚ÇÅ
    injection c‚ÇÄ.œÄ.naturality (BiconeHom.right j) with _ e‚ÇÇ
    convert e‚ÇÅ.symm.trans e‚ÇÇ <;> simp
  have : c.extend g‚ÇÅ.right = c.extend g‚ÇÇ.right := by
    unfold Cone.extend
    congr 1
    ext x
    apply this
  -- And thus they are equal as `c` is the limit.
  have : g‚ÇÅ.right = g‚ÇÇ.right
  calc
    g‚ÇÅ.right = hc.lift (c.extend g‚ÇÅ.right) := by
      apply hc.uniq (c.extend _)
      -- Porting note: was `by tidy`, but `aesop` only works if max heartbeats
      -- is increased, so we replace it by the output of `tidy?`
      intro j; rfl
    _ = hc.lift (c.extend g‚ÇÇ.right) := by
      congr
    _ = g‚ÇÇ.right := by
      symm
      apply hc.uniq (c.extend _)
      -- Porting note: was `by tidy`, but `aesop` only works if max heartbeats
      -- is increased, so we replace it by the output of `tidy?`
      intro _; rfl

  -- Finally, since `f·µ¢` factors through `F(g·µ¢)`, the result follows.
  calc
    f‚ÇÅ = ùüô _ ‚â´ f‚ÇÅ := by simp
    _ = c‚ÇÄ.pt.hom ‚â´ F.map g‚ÇÅ.right := g‚ÇÅ.w
    _ = c‚ÇÄ.pt.hom ‚â´ F.map g‚ÇÇ.right := by rw [this]
    _ = ùüô _ ‚â´ f‚ÇÇ := g‚ÇÇ.w.symm
    _ = f‚ÇÇ := by simp

#align category_theory.preserves_finite_limits_of_flat.uniq CategoryTheory.PreservesFiniteLimitsOfFlat.uniq

end PreservesFiniteLimitsOfFlat

/-- Representably flat functors preserve finite limits. -/
noncomputable def preservesFiniteLimitsOfFlat (F : C ‚•§ D) [RepresentablyFlat F] :
    PreservesFiniteLimits F := by
  apply preservesFiniteLimitsOfPreservesFiniteLimitsOfSize
  intro J _ _; constructor
  intro K; constructor
  intro c hc
  exact
    { lift := PreservesFiniteLimitsOfFlat.lift F hc
      fac := PreservesFiniteLimitsOfFlat.fac F hc
      uniq := fun s m h => by
        apply PreservesFiniteLimitsOfFlat.uniq F hc
        exact h
        exact PreservesFiniteLimitsOfFlat.fac F hc s }
#align category_theory.preserves_finite_limits_of_flat CategoryTheory.preservesFiniteLimitsOfFlat

/-- If `C` is finitely cocomplete, then `F : C ‚•§ D` is representably flat iff it preserves
finite limits.
-/
noncomputable def preservesFiniteLimitsIffFlat [HasFiniteLimits C] (F : C ‚•§ D) :
    RepresentablyFlat F ‚âÉ PreservesFiniteLimits F where
  toFun _ := preservesFiniteLimitsOfFlat F
  invFun _ := flat_of_preservesFiniteLimits F
  left_inv _ := proof_irrel _ _
  right_inv x := by
    cases x
    unfold preservesFiniteLimitsOfFlat
    dsimp only [preservesFiniteLimitsOfPreservesFiniteLimitsOfSize]
    congr
    -- porting note: this next line wasn't needed in lean 3
    apply Subsingleton.elim

#align category_theory.preserves_finite_limits_iff_flat CategoryTheory.preservesFiniteLimitsIffFlat

end HasLimit

section SmallCategory

variable {C D : Type u‚ÇÅ} [SmallCategory C] [SmallCategory D] (E : Type u‚ÇÇ) [Category.{u‚ÇÅ} E]


/-- (Implementation)
The evaluation of `Lan F` at `X` is the colimit over the costructured arrows over `X`.
-/
noncomputable def lanEvaluationIsoColim (F : C ‚•§ D) (X : D)
    [‚àÄ X : D, HasColimitsOfShape (CostructuredArrow F X) E] :
    lan F ‚ãô (evaluation D E).obj X ‚âÖ
      (whiskeringLeft _ _ E).obj (CostructuredArrow.proj F X) ‚ãô colim :=
  NatIso.ofComponents (fun G => colim.mapIso (Iso.refl _))
    (by
      intro G H i
      -- porting note: was `ext` in lean 3
      -- Now `ext` can't see that `lan` is a colimit.
      -- Uncertain whether it makes sense to add another `@[ext]` lemma.
      -- See https://github.com/leanprover-community/mathlib4/issues/5229
      apply colimit.hom_ext
      intro j
      simp only [Functor.comp_map, Functor.mapIso_refl, evaluation_obj_map, whiskeringLeft_obj_map,
        lan_map_app, colimit.Œπ_desc_assoc, Category.comp_id, Category.assoc]
      -- porting note: this deals with the fact that the type of `lan_map_app` has changed
      -- See https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/change.20in.20behaviour.20with.20.60simps.60/near/354350606
      erw [show ((Lan.equiv F H (Lan.loc F H)) (ùüô (Lan.loc F H))).app j.left =
        colimit.Œπ (Lan.diagram F H (F.obj j.left))
        (CostructuredArrow.mk (ùüô (F.obj j.left))) by apply Category.comp_id]
      erw [colimit.Œπ_pre_assoc (Lan.diagram F H X) (CostructuredArrow.map j.hom), Category.id_comp,
        Category.comp_id, colimit.Œπ_map]
      rcases j with ‚ü®j_left, ‚ü®‚ü®‚ü©‚ü©, j_hom‚ü©
      congr
      rw [CostructuredArrow.map_mk, Category.id_comp, CostructuredArrow.mk])
set_option linter.uppercaseLean3 false in
#align category_theory.Lan_evaluation_iso_colim CategoryTheory.lanEvaluationIsoColim

variable [ConcreteCategory.{u‚ÇÅ} E] [HasLimits E] [HasColimits E]

variable [ReflectsLimits (forget E)] [PreservesFilteredColimits (forget E)]

variable [PreservesLimits (forget E)]

/-- If `F : C ‚•§ D` is a representably flat functor between small categories, then the functor
`Lan F.op` that takes presheaves over `C` to presheaves over `D` preserves finite limits.
-/
noncomputable instance lanPreservesFiniteLimitsOfFlat (F : C ‚•§ D) [RepresentablyFlat F] :
    PreservesFiniteLimits (lan F.op : _ ‚•§ D·µí·µñ ‚•§ E) := by
  apply preservesFiniteLimitsOfPreservesFiniteLimitsOfSize.{u‚ÇÅ}
  intro J _ _; skip
  apply preservesLimitsOfShapeOfEvaluation (lan F.op : (C·µí·µñ ‚•§ E) ‚•§ D·µí·µñ ‚•§ E) J
  intro K
  haveI : IsFiltered (CostructuredArrow F.op K) :=
    IsFiltered.of_equivalence (structuredArrowOpEquivalence F (unop K))
  exact preservesLimitsOfShapeOfNatIso (lanEvaluationIsoColim _ _ _).symm
set_option linter.uppercaseLean3 false in
#align category_theory.Lan_preserves_finite_limits_of_flat CategoryTheory.lanPreservesFiniteLimitsOfFlat

instance lan_flat_of_flat (F : C ‚•§ D) [RepresentablyFlat F] :
    RepresentablyFlat (lan F.op : _ ‚•§ D·µí·µñ ‚•§ E) :=
  flat_of_preservesFiniteLimits _
set_option linter.uppercaseLean3 false in
#align category_theory.Lan_flat_of_flat CategoryTheory.lan_flat_of_flat

variable [HasFiniteLimits C]

noncomputable instance lanPreservesFiniteLimitsOfPreservesFiniteLimits (F : C ‚•§ D)
    [PreservesFiniteLimits F] : PreservesFiniteLimits (lan F.op : _ ‚•§ D·µí·µñ ‚•§ E) := by
  haveI := flat_of_preservesFiniteLimits F
  infer_instance
set_option linter.uppercaseLean3 false in
#align category_theory.Lan_preserves_finite_limits_of_preserves_finite_limits CategoryTheory.lanPreservesFiniteLimitsOfPreservesFiniteLimits

theorem flat_iff_lan_flat (F : C ‚•§ D) :
    RepresentablyFlat F ‚Üî RepresentablyFlat (lan F.op : _ ‚•§ D·µí·µñ ‚•§ Type u‚ÇÅ) :=
  ‚ü®fun H => inferInstance, fun H => by
    skip
    haveI := preservesFiniteLimitsOfFlat (lan F.op : _ ‚•§ D·µí·µñ ‚•§ Type u‚ÇÅ)
    haveI : PreservesFiniteLimits F := by
      apply preservesFiniteLimitsOfPreservesFiniteLimitsOfSize.{u‚ÇÅ}
      intros; skip; apply preservesLimitOfLanPreservesLimit
    apply flat_of_preservesFiniteLimits‚ü©
set_option linter.uppercaseLean3 false in
#align category_theory.flat_iff_Lan_flat CategoryTheory.flat_iff_lan_flat

/-- If `C` is finitely complete, then `F : C ‚•§ D` preserves finite limits iff
`Lan F.op : (C·µí·µñ ‚•§ Type*) ‚•§ (D·µí·µñ ‚•§ Type*)` preserves finite limits.
-/
noncomputable def preservesFiniteLimitsIffLanPreservesFiniteLimits (F : C ‚•§ D) :
    PreservesFiniteLimits F ‚âÉ PreservesFiniteLimits (lan F.op : _ ‚•§ D·µí·µñ ‚•§ Type u‚ÇÅ) where
  toFun _ := inferInstance
  invFun _ := by
    apply preservesFiniteLimitsOfPreservesFiniteLimitsOfSize.{u‚ÇÅ}
    intros; apply preservesLimitOfLanPreservesLimit
  left_inv x := by
    -- porting note: `cases x` and an `unfold` not necessary in lean 4.
    -- Remark : in mathlib3 we had `unfold preservesFiniteLimitsOfFlat`
    -- but there was no `preservesFiniteLimitsOfFlat` in the goal! Experimentation
    -- indicates that it was doing the same as `dsimp only`
    dsimp only [preservesFiniteLimitsOfPreservesFiniteLimitsOfSize]; congr
    -- porting note: next line wasn't necessary in lean 3
    apply Subsingleton.elim
  right_inv x := by
    -- cases x; -- porting note: not necessary in lean 4
    dsimp only [lanPreservesFiniteLimitsOfPreservesFiniteLimits,
      lanPreservesFiniteLimitsOfFlat,
      preservesFiniteLimitsOfPreservesFiniteLimitsOfSize]
    congr
    -- porting note: next line wasn't necessary in lean 3
    apply Subsingleton.elim
set_option linter.uppercaseLean3 false in
#align category_theory.preserves_finite_limits_iff_Lan_preserves_finite_limits CategoryTheory.preservesFiniteLimitsIffLanPreservesFiniteLimits

end SmallCategory

end CategoryTheory
