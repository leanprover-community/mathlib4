/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.CategoryTheory.Limits.ConeCategory
import Mathlib.CategoryTheory.Limits.FilteredColimitCommutesFiniteLimit
import Mathlib.CategoryTheory.Limits.Preserves.Filtered
import Mathlib.CategoryTheory.Limits.Preserves.FunctorCategory
import Mathlib.CategoryTheory.Limits.Bicones
import Mathlib.CategoryTheory.Limits.Comma
import Mathlib.CategoryTheory.Limits.Preserves.Finite
import Mathlib.CategoryTheory.Limits.Preserves.Opposites
import Mathlib.CategoryTheory.Limits.Shapes.FiniteLimits
/-!
# Representably flat functors

We define representably flat functors as functors such that the category of structured arrows
over `X` is cofiltered for each `X`. This concept is also known as flat functors as in [Elephant]
Remark C2.3.7, and this name is suggested by Mike Shulman in
https://golem.ph.utexas.edu/category/2011/06/flat_functors_and_morphisms_of.html to avoid
confusion with other notions of flatness.

This definition is equivalent to left exact functors (functors that preserves finite limits) when
`C` has all finite limits.

## Main results

* `flat_of_preservesFiniteLimits`: If `F : C ‚•§ D` preserves finite limits and `C` has all finite
  limits, then `F` is flat.
* `preservesFiniteLimits_of_flat`: If `F : C ‚•§ D` is flat, then it preserves all finite limits.
* `preservesFiniteLimits_iff_flat`: If `C` has all finite limits,
  then `F` is flat iff `F` is left_exact.
* `lan_preservesFiniteLimits_of_flat`: If `F : C ‚•§ D` is a flat functor between small categories,
  then the functor `Lan F.op` between presheaves of sets preserves all finite limits.
* `flat_iff_lan_flat`: If `C`, `D` are small and `C` has all finite limits, then `F` is flat iff
  `Lan F.op : (C·µí·µñ ‚•§ Type*) ‚•§ (D·µí·µñ ‚•§ Type*)` is flat.
* `preservesFiniteLimits_iff_lanPreservesFiniteLimits`: If `C`, `D` are small and `C` has all
  finite limits, then `F` preserves finite limits iff `Lan F.op : (C·µí·µñ ‚•§ Type*) ‚•§ (D·µí·µñ ‚•§ Type*)`
  does.

-/


universe w v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open CategoryTheory

open CategoryTheory.Limits

open Opposite

namespace CategoryTheory

section RepresentablyFlat

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
variable {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E]

/-- A functor `F : C ‚•§ D` is representably flat if the comma category `(X/F)` is cofiltered for
each `X : D`.
-/
class RepresentablyFlat (F : C ‚•§ D) : Prop where
  cofiltered : ‚àÄ X : D, IsCofiltered (StructuredArrow X F)

/-- A functor `F : C ‚•§ D` is representably coflat if the comma category `(F/X)` is filtered for
each `X : D`. -/
class RepresentablyCoflat (F : C ‚•§ D) : Prop where
  filtered : ‚àÄ X : D, IsFiltered (CostructuredArrow F X)

attribute [instance] RepresentablyFlat.cofiltered RepresentablyCoflat.filtered

variable (F : C ‚•§ D)

instance RepresentablyFlat.of_isRightAdjoint [F.IsRightAdjoint] : RepresentablyFlat F where
  cofiltered _ := IsCofiltered.of_isInitial _ (mkInitialOfLeftAdjoint _ (.ofIsRightAdjoint F) _)

instance RepresentablyCoflat.of_isLeftAdjoint [F.IsLeftAdjoint] : RepresentablyCoflat F where
  filtered _ := IsFiltered.of_isTerminal _ (mkTerminalOfRightAdjoint _ (.ofIsLeftAdjoint F) _)

theorem RepresentablyFlat.id : RepresentablyFlat (ùü≠ C) := inferInstance

theorem RepresentablyCoflat.id : RepresentablyCoflat (ùü≠ C) := inferInstance

set_option maxHeartbeats 400000 in
instance RepresentablyFlat.comp (G : D ‚•§ E) [RepresentablyFlat F]
    [RepresentablyFlat G] : RepresentablyFlat (F ‚ãô G) := by
  refine ‚ü®fun X => IsCofiltered.of_cone_nonempty.{0} _ (fun {J} _ _ H => ?_)‚ü©
  obtain ‚ü®c‚ÇÅ‚ü© := IsCofiltered.cone_nonempty (H ‚ãô StructuredArrow.pre X F G)
  let H‚ÇÇ : J ‚•§ StructuredArrow c‚ÇÅ.pt.right F :=
    { obj := fun j => StructuredArrow.mk (c‚ÇÅ.œÄ.app j).right
      map := fun {j j'} f =>
        StructuredArrow.homMk (H.map f).right (congrArg CommaMorphism.right (c‚ÇÅ.w f)) }
  obtain ‚ü®c‚ÇÇ‚ü© := IsCofiltered.cone_nonempty H‚ÇÇ
  simp only [H‚ÇÇ] at c‚ÇÇ
  exact ‚ü®‚ü®StructuredArrow.mk (c‚ÇÅ.pt.hom ‚â´ G.map c‚ÇÇ.pt.hom),
    ‚ü®fun j => StructuredArrow.homMk (c‚ÇÇ.œÄ.app j).right (by simp [‚Üê G.map_comp, (c‚ÇÇ.œÄ.app j).w]),
     fun j j' f => by simpa using (c‚ÇÇ.w f).symm‚ü©‚ü©‚ü©

section

variable {F}

/-- Being a representably flat functor is closed under natural isomorphisms. -/
theorem RepresentablyFlat.of_iso [RepresentablyFlat F] {G : C ‚•§ D} (Œ± : F ‚âÖ G) :
    RepresentablyFlat G where
  cofiltered _ := IsCofiltered.of_equivalence (StructuredArrow.mapNatIso Œ±)

theorem RepresentablyCoflat.of_iso [RepresentablyCoflat F] {G : C ‚•§ D} (Œ± : F ‚âÖ G) :
    RepresentablyCoflat G where
  filtered _ := IsFiltered.of_equivalence (CostructuredArrow.mapNatIso Œ±)

end

theorem representablyCoflat_op_iff : RepresentablyCoflat F.op ‚Üî RepresentablyFlat F := by
  refine ‚ü®fun _ => ‚ü®fun X => ?_‚ü©, fun _ => ‚ü®fun ‚ü®X‚ü© => ?_‚ü©‚ü©
  ¬∑ suffices IsFiltered (StructuredArrow X F)·µí·µñ from isCofiltered_of_isFiltered_op _
    apply IsFiltered.of_equivalence (structuredArrowOpEquivalence _ _).symm
  ¬∑ suffices IsCofiltered (CostructuredArrow F.op (op X))·µí·µñ from isFiltered_of_isCofiltered_op _
    suffices IsCofiltered (StructuredArrow X F)·µí·µñ·µí·µñ from
      IsCofiltered.of_equivalence (structuredArrowOpEquivalence _ _).op
    apply IsCofiltered.of_equivalence (opOpEquivalence _)

theorem representablyFlat_op_iff : RepresentablyFlat F.op ‚Üî RepresentablyCoflat F := by
  refine ‚ü®fun _ => ‚ü®fun X => ?_‚ü©, fun _ => ‚ü®fun ‚ü®X‚ü© => ?_‚ü©‚ü©
  ¬∑ suffices IsCofiltered (CostructuredArrow F X)·µí·µñ from isFiltered_of_isCofiltered_op _
    apply IsCofiltered.of_equivalence (costructuredArrowOpEquivalence _ _).symm
  ¬∑ suffices IsFiltered (StructuredArrow (op X) F.op)·µí·µñ from isCofiltered_of_isFiltered_op _
    suffices IsFiltered (CostructuredArrow F X)·µí·µñ·µí·µñ from
      IsFiltered.of_equivalence (costructuredArrowOpEquivalence _ _).op
    apply IsFiltered.of_equivalence (opOpEquivalence _)

instance [RepresentablyFlat F] : RepresentablyCoflat F.op :=
  (representablyCoflat_op_iff F).2 inferInstance

instance [RepresentablyCoflat F] : RepresentablyFlat F.op :=
  (representablyFlat_op_iff F).2 inferInstance

instance RepresentablyCoflat.comp (G : D ‚•§ E) [RepresentablyCoflat F] [RepresentablyCoflat G] :
    RepresentablyCoflat (F ‚ãô G) :=
  (representablyFlat_op_iff _).1 <| inferInstanceAs <| RepresentablyFlat (F.op ‚ãô G.op)

end RepresentablyFlat

section HasLimit

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

theorem flat_of_preservesFiniteLimits [HasFiniteLimits C] (F : C ‚•§ D) [PreservesFiniteLimits F] :
    RepresentablyFlat F :=
  ‚ü®fun X =>
    haveI : HasFiniteLimits (StructuredArrow X F) := by
      apply hasFiniteLimits_of_hasFiniteLimits_of_size.{v‚ÇÅ} (StructuredArrow X F)
      intro J sJ fJ
      constructor
      -- Porting note: instance was inferred automatically in Lean 3
      infer_instance
    IsCofiltered.of_hasFiniteLimits _‚ü©

theorem coflat_of_preservesFiniteColimits [HasFiniteColimits C] (F : C ‚•§ D)
    [PreservesFiniteColimits F] : RepresentablyCoflat F :=
  let _ := preservesFiniteLimits_op F
  (representablyFlat_op_iff _).1 (flat_of_preservesFiniteLimits _)

namespace PreservesFiniteLimitsOfFlat

open StructuredArrow

variable {J : Type v‚ÇÅ} [SmallCategory J] [FinCategory J] {K : J ‚•§ C}
variable (F : C ‚•§ D) [RepresentablyFlat F] {c : Cone K} (hc : IsLimit c) (s : Cone (K ‚ãô F))

/-- (Implementation).
Given a limit cone `c : cone K` and a cone `s : cone (K ‚ãô F)` with `F` representably flat,
`s` can factor through `F.mapCone c`.
-/
noncomputable def lift : s.pt ‚ü∂ F.obj c.pt :=
  let s' := IsCofiltered.cone (s.toStructuredArrow ‚ãô StructuredArrow.pre _ K F)
  s'.pt.hom ‚â´
    (F.map <|
      hc.lift <|
        (Cones.postcompose
              ({ app := fun _ => ùüô _ } :
                (s.toStructuredArrow ‚ãô pre s.pt K F) ‚ãô proj s.pt F ‚ü∂ K)).obj <|
          (StructuredArrow.proj s.pt F).mapCone s')

theorem fac (x : J) : lift F hc s ‚â´ (F.mapCone c).œÄ.app x = s.œÄ.app x := by
  simp [lift, ‚Üê Functor.map_comp]

theorem uniq {K : J ‚•§ C} {c : Cone K} (hc : IsLimit c) (s : Cone (K ‚ãô F))
    (f‚ÇÅ f‚ÇÇ : s.pt ‚ü∂ F.obj c.pt) (h‚ÇÅ : ‚àÄ j : J, f‚ÇÅ ‚â´ (F.mapCone c).œÄ.app j = s.œÄ.app j)
    (h‚ÇÇ : ‚àÄ j : J, f‚ÇÇ ‚â´ (F.mapCone c).œÄ.app j = s.œÄ.app j) : f‚ÇÅ = f‚ÇÇ := by
  -- We can make two cones over the diagram of `s` via `f‚ÇÅ` and `f‚ÇÇ`.
  let Œ±‚ÇÅ : (F.mapCone c).toStructuredArrow ‚ãô map f‚ÇÅ ‚ü∂ s.toStructuredArrow :=
    { app := fun X => eqToHom (by simp [‚Üê h‚ÇÅ]) }
  let Œ±‚ÇÇ : (F.mapCone c).toStructuredArrow ‚ãô map f‚ÇÇ ‚ü∂ s.toStructuredArrow :=
    { app := fun X => eqToHom (by simp [‚Üê h‚ÇÇ]) }
  let c‚ÇÅ : Cone (s.toStructuredArrow ‚ãô pre s.pt K F) :=
    (Cones.postcompose (whiskerRight Œ±‚ÇÅ (pre s.pt K F) : _)).obj (c.toStructuredArrowCone F f‚ÇÅ)
  let c‚ÇÇ : Cone (s.toStructuredArrow ‚ãô pre s.pt K F) :=
    (Cones.postcompose (whiskerRight Œ±‚ÇÇ (pre s.pt K F) : _)).obj (c.toStructuredArrowCone F f‚ÇÇ)
  -- The two cones can then be combined and we may obtain a cone over the two cones since
  -- `StructuredArrow s.pt F` is cofiltered.
  let c‚ÇÄ := IsCofiltered.cone (biconeMk _ c‚ÇÅ c‚ÇÇ)
  let g‚ÇÅ : c‚ÇÄ.pt ‚ü∂ c‚ÇÅ.pt := c‚ÇÄ.œÄ.app Bicone.left
  let g‚ÇÇ : c‚ÇÄ.pt ‚ü∂ c‚ÇÇ.pt := c‚ÇÄ.œÄ.app Bicone.right
  -- Then `g‚ÇÅ.right` and `g‚ÇÇ.right` are two maps from the same cone into the `c`.
  have : ‚àÄ j : J, g‚ÇÅ.right ‚â´ c.œÄ.app j = g‚ÇÇ.right ‚â´ c.œÄ.app j := by
    intro j
    injection c‚ÇÄ.œÄ.naturality (BiconeHom.left j) with _ e‚ÇÅ
    injection c‚ÇÄ.œÄ.naturality (BiconeHom.right j) with _ e‚ÇÇ
    convert e‚ÇÅ.symm.trans e‚ÇÇ <;> simp [c‚ÇÅ, c‚ÇÇ]
  have : c.extend g‚ÇÅ.right = c.extend g‚ÇÇ.right := by
    unfold Cone.extend
    congr 1
    ext x
    apply this
  -- And thus they are equal as `c` is the limit.
  have : g‚ÇÅ.right = g‚ÇÇ.right := calc
    g‚ÇÅ.right = hc.lift (c.extend g‚ÇÅ.right) := by
      apply hc.uniq (c.extend _)
      -- Porting note: was `by tidy`, but `aesop` only works if max heartbeats
      -- is increased, so we replace it by the output of `tidy?`
      intro j; rfl
    _ = hc.lift (c.extend g‚ÇÇ.right) := by
      congr
    _ = g‚ÇÇ.right := by
      symm
      apply hc.uniq (c.extend _)
      -- Porting note: was `by tidy`, but `aesop` only works if max heartbeats
      -- is increased, so we replace it by the output of `tidy?`
      intro _; rfl

  -- Finally, since `f·µ¢` factors through `F(g·µ¢)`, the result follows.
  calc
    f‚ÇÅ = ùüô _ ‚â´ f‚ÇÅ := by simp
    _ = c‚ÇÄ.pt.hom ‚â´ F.map g‚ÇÅ.right := g‚ÇÅ.w
    _ = c‚ÇÄ.pt.hom ‚â´ F.map g‚ÇÇ.right := by rw [this]
    _ = ùüô _ ‚â´ f‚ÇÇ := g‚ÇÇ.w.symm
    _ = f‚ÇÇ := by simp

end PreservesFiniteLimitsOfFlat

/-- Representably flat functors preserve finite limits. -/
lemma preservesFiniteLimits_of_flat (F : C ‚•§ D) [RepresentablyFlat F] :
    PreservesFiniteLimits F := by
  apply preservesFiniteLimits_of_preservesFiniteLimitsOfSize
  intro J _ _; constructor
  intro K; constructor
  intro c hc
  constructor
  exact
    { lift := PreservesFiniteLimitsOfFlat.lift F hc
      fac := PreservesFiniteLimitsOfFlat.fac F hc
      uniq := fun s m h => by
        apply PreservesFiniteLimitsOfFlat.uniq F hc
        ¬∑ exact h
        ¬∑ exact PreservesFiniteLimitsOfFlat.fac F hc s }

/-- Representably coflat functors preserve finite colimits. -/
lemma preservesFiniteColimits_of_coflat (F : C ‚•§ D) [RepresentablyCoflat F] :
    PreservesFiniteColimits F :=
  letI _ := preservesFiniteLimits_of_flat F.op
  preservesFiniteColimits_of_op _

/-- If `C` is finitely complete, then `F : C ‚•§ D` is representably flat iff it preserves
finite limits.
-/
lemma preservesFiniteLimits_iff_flat [HasFiniteLimits C] (F : C ‚•§ D) :
    RepresentablyFlat F ‚Üî PreservesFiniteLimits F :=
  ‚ü®fun _ ‚Ü¶ preservesFiniteLimits_of_flat F, fun _ ‚Ü¶ flat_of_preservesFiniteLimits F‚ü©

/-- If `C` is finitely cocomplete, then `F : C ‚•§ D` is representably coflat iff it preserves
finite colmits. -/
lemma preservesFiniteColimits_iff_coflat [HasFiniteColimits C] (F : C ‚•§ D) :
    RepresentablyCoflat F ‚Üî PreservesFiniteColimits F :=
  ‚ü®fun _ => preservesFiniteColimits_of_coflat F, fun _ => coflat_of_preservesFiniteColimits F‚ü©

end HasLimit

section SmallCategory

variable {C D : Type u‚ÇÅ} [SmallCategory C] [SmallCategory D] (E : Type u‚ÇÇ) [Category.{u‚ÇÅ} E]


/-- (Implementation)
The evaluation of `F.lan` at `X` is the colimit over the costructured arrows over `X`.
-/
noncomputable def lanEvaluationIsoColim (F : C ‚•§ D) (X : D)
    [‚àÄ X : D, HasColimitsOfShape (CostructuredArrow F X) E] :
    F.lan ‚ãô (evaluation D E).obj X ‚âÖ
      (whiskeringLeft _ _ E).obj (CostructuredArrow.proj F X) ‚ãô colim :=
  NatIso.ofComponents (fun G =>
    IsColimit.coconePointUniqueUpToIso
    (Functor.isPointwiseLeftKanExtensionLeftKanExtensionUnit F G X)
    (colimit.isColimit _)) (fun {G‚ÇÅ G‚ÇÇ} œÜ => by
      apply (Functor.isPointwiseLeftKanExtensionLeftKanExtensionUnit F G‚ÇÅ X).hom_ext
      intro T
      have h‚ÇÅ := fun (G : C ‚•§ E) => IsColimit.comp_coconePointUniqueUpToIso_hom
        (Functor.isPointwiseLeftKanExtensionLeftKanExtensionUnit F G X) (colimit.isColimit _) T
      have h‚ÇÇ := congr_app (F.lanUnit.naturality œÜ) T.left
      dsimp at h‚ÇÅ h‚ÇÇ ‚ä¢
      simp only [Category.assoc] at h‚ÇÅ ‚ä¢
      simp only [Functor.lan, Functor.lanUnit] at h‚ÇÇ ‚ä¢
      rw [reassoc_of% h‚ÇÅ, NatTrans.naturality_assoc, ‚Üê reassoc_of% h‚ÇÇ, h‚ÇÅ,
        Œπ_colimMap, whiskerLeft_app]
      rfl)

variable [ConcreteCategory.{u‚ÇÅ} E] [HasLimits E] [HasColimits E]
variable [ReflectsLimits (forget E)] [PreservesFilteredColimits (forget E)]
variable [PreservesLimits (forget E)]

/-- If `F : C ‚•§ D` is a representably flat functor between small categories, then the functor
`Lan F.op` that takes presheaves over `C` to presheaves over `D` preserves finite limits.
-/
noncomputable instance lan_preservesFiniteLimits_of_flat (F : C ‚•§ D) [RepresentablyFlat F] :
    PreservesFiniteLimits (F.op.lan : _ ‚•§ D·µí·µñ ‚•§ E) := by
  apply preservesFiniteLimits_of_preservesFiniteLimitsOfSize.{u‚ÇÅ}
  intro J _ _
  apply preservesLimitsOfShape_of_evaluation (F.op.lan : (C·µí·µñ ‚•§ E) ‚•§ D·µí·µñ ‚•§ E) J
  intro K
  haveI : IsFiltered (CostructuredArrow F.op K) :=
    IsFiltered.of_equivalence (structuredArrowOpEquivalence F (unop K))
  exact preservesLimitsOfShape_of_natIso (lanEvaluationIsoColim _ _ _).symm

instance lan_flat_of_flat (F : C ‚•§ D) [RepresentablyFlat F] :
    RepresentablyFlat (F.op.lan : _ ‚•§ D·µí·µñ ‚•§ E) :=
  flat_of_preservesFiniteLimits _

variable [HasFiniteLimits C]

instance lan_preservesFiniteLimits_of_preservesFiniteLimits (F : C ‚•§ D)
    [PreservesFiniteLimits F] : PreservesFiniteLimits (F.op.lan : _ ‚•§ D·µí·µñ ‚•§ E) := by
  haveI := flat_of_preservesFiniteLimits F
  infer_instance

theorem flat_iff_lan_flat (F : C ‚•§ D) :
    RepresentablyFlat F ‚Üî RepresentablyFlat (F.op.lan : _ ‚•§ D·µí·µñ ‚•§ Type u‚ÇÅ) :=
  ‚ü®fun _ => inferInstance, fun H => by
    haveI := preservesFiniteLimits_of_flat (F.op.lan : _ ‚•§ D·µí·µñ ‚•§ Type u‚ÇÅ)
    haveI : PreservesFiniteLimits F := by
      apply preservesFiniteLimits_of_preservesFiniteLimitsOfSize.{u‚ÇÅ}
      intros; apply preservesLimit_of_lan_preservesLimit
    apply flat_of_preservesFiniteLimits‚ü©

/-- If `C` is finitely complete, then `F : C ‚•§ D` preserves finite limits iff
`Lan F.op : (C·µí·µñ ‚•§ Type*) ‚•§ (D·µí·µñ ‚•§ Type*)` preserves finite limits.
-/
lemma preservesFiniteLimits_iff_lan_preservesFiniteLimits (F : C ‚•§ D) :
    PreservesFiniteLimits F ‚Üî PreservesFiniteLimits (F.op.lan : _ ‚•§ D·µí·µñ ‚•§ Type u‚ÇÅ) :=
  ‚ü®fun _ ‚Ü¶ inferInstance,
    fun _ ‚Ü¶ preservesFiniteLimits_of_preservesFiniteLimitsOfSize.{u‚ÇÅ} _
      (fun _ _ _ ‚Ü¶ preservesLimit_of_lan_preservesLimit _ _)‚ü©

end SmallCategory

end CategoryTheory
