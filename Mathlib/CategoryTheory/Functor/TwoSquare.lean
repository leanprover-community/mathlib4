/-
Copyright (c) 2025 Jakob von Raumer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Jakob von Raumer
-/
import Mathlib.CategoryTheory.Whiskering
import Mathlib.CategoryTheory.Opposites
import Mathlib.Tactic.CategoryTheory.Slice

/-!
# 2-squares of functors

Given four functors `T`, `L`, `R` and `B`, a 2-square `TwoSquare T L R B` consists of
a natural transformation `w : T ‚ãô R ‚ü∂ L ‚ãô B`:
```
     T
  C‚ÇÅ ‚•§ C‚ÇÇ
L |     | R
  v     v
  C‚ÇÉ ‚•§ C‚ÇÑ
     B
```

We define operations to paste such squares horizontally and vertically and prove the interchange
law of those two operations.

## TODO

Generalize all of this to double categories.

-/

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ v‚ÇÖ v‚ÇÜ v‚Çá v‚Çà v‚Çâ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÖ u‚ÇÜ u‚Çá u‚Çà u‚Çâ

namespace CategoryTheory

open Category

variable {C‚ÇÅ : Type u‚ÇÅ} {C‚ÇÇ : Type u‚ÇÇ} {C‚ÇÉ : Type u‚ÇÉ} {C‚ÇÑ : Type u‚ÇÑ}
  [Category.{v‚ÇÅ} C‚ÇÅ] [Category.{v‚ÇÇ} C‚ÇÇ] [Category.{v‚ÇÉ} C‚ÇÉ] [Category.{v‚ÇÑ} C‚ÇÑ]
  (T : C‚ÇÅ ‚•§ C‚ÇÇ) (L : C‚ÇÅ ‚•§ C‚ÇÉ) (R : C‚ÇÇ ‚•§ C‚ÇÑ) (B : C‚ÇÉ ‚•§ C‚ÇÑ)

/-- A `2`-square consists of a natural transformation `T ‚ãô R ‚ü∂ L ‚ãô B`
involving fours functors `T`, `L`, `R`, `B` that are on the
top/left/right/bottom sides of a square of categories. -/
def TwoSquare := T ‚ãô R ‚ü∂ L ‚ãô B

namespace TwoSquare

/-- Constructor for `TwoSquare`. -/
abbrev mk (Œ± : T ‚ãô R ‚ü∂ L ‚ãô B) : TwoSquare T L R B := Œ±

variable {T} {L} {R} {B} in
/-- The natural transfomration associated to a 2-square. -/
abbrev natTrans (w : TwoSquare T L R B) : T ‚ãô R ‚ü∂ L ‚ãô B := w

/-- The type of 2-squares on functors `T`, `L`, `R`, and `B` is trivially equivalent to
the type of natural transformations `T ‚ãô R ‚ü∂ L ‚ãô B`. -/
@[simps]
def equivNatTrans : TwoSquare T L R B ‚âÉ (T ‚ãô R ‚ü∂ L ‚ãô B) where
  toFun := natTrans
  invFun := mk T L R B
  left_inv _ := rfl
  right_inv _ := rfl

variable {T L R B}

/-- The opposite of a `2`-square. -/
def op (Œ± : TwoSquare T L R B) : TwoSquare L.op T.op B.op R.op := NatTrans.op Œ±

@[simp]
lemma natTrans_op (Œ± : TwoSquare T L R B) :
    Œ±.op.natTrans = NatTrans.op Œ±.natTrans := rfl

@[ext]
lemma ext (w w' : TwoSquare T L R B) (h : ‚àÄ (X : C‚ÇÅ), w.natTrans.app X = w'.natTrans.app X) :
    w = w' :=
  NatTrans.ext (funext h)

/-- The hoizontal identity 2-square. -/
@[simps!]
def hId (L : C‚ÇÅ ‚•§ C‚ÇÉ) : TwoSquare (ùü≠ _) L L (ùü≠ _) :=
  ùüô _

/-- Notation for the horizontal identity 2-square. -/
scoped notation "ùüô‚Çï" => hId  -- type as \b1\_h

/-- The vertical identity 2-square. -/
@[simps!]
def vId (T : C‚ÇÅ ‚•§ C‚ÇÇ) : TwoSquare T (ùü≠ _) (ùü≠ _) T :=
  ùüô _

/-- Notation for the vertical identity 2-square. -/
scoped notation "ùüô·µ•" => vId  -- type as \b1\_v

/-- Whiskering a 2-square with a natural transformation at the top. -/
@[simps!]
protected def whiskerTop {T' : C‚ÇÅ ‚•§ C‚ÇÇ} (w : TwoSquare T' L R B) (Œ± : T ‚ü∂ T') : TwoSquare T L R B :=
  .mk _ _ _ _ <| whiskerRight Œ± R ‚â´ w.natTrans

/-- Whiskering a 2-square with a natural transformation at the left side. -/
@[simps!]
protected def whiskerLeft {L' : C‚ÇÅ ‚•§ C‚ÇÉ} (w : TwoSquare T L R B) (Œ± : L ‚ü∂ L') :
    TwoSquare T L' R B :=
  .mk _ _ _ _ <| w.natTrans ‚â´ whiskerRight Œ± B

/-- Whiskering a 2-square with a natural transformation at the right side. -/
@[simps!]
protected def whiskerRight {R' : C‚ÇÇ ‚•§ C‚ÇÑ} (w : TwoSquare T L R' B) (Œ± : R ‚ü∂ R') :
    TwoSquare T L R B :=
  .mk _ _ _ _ <| whiskerLeft T Œ± ‚â´ w.natTrans

/-- Whiskering a 2-square with a natural transformation at the bottom. -/
@[simps!]
protected def whiskerBottom {B' : C‚ÇÉ ‚•§ C‚ÇÑ} (w : TwoSquare T L R B) (Œ± : B ‚ü∂ B') :
    TwoSquare T L R B' :=
  .mk _ _ _ _ <| w.natTrans ‚â´ whiskerLeft L Œ±

variable {C‚ÇÖ : Type u‚ÇÖ} {C‚ÇÜ : Type u‚ÇÜ} {C‚Çá : Type u‚Çá} {C‚Çà : Type u‚Çà}
  [Category.{v‚ÇÖ} C‚ÇÖ] [Category.{v‚ÇÜ} C‚ÇÜ] [Category.{v‚Çá} C‚Çá] [Category.{v‚Çà} C‚Çà]
  {T' : C‚ÇÇ ‚•§ C‚ÇÖ} {R' : C‚ÇÖ ‚•§ C‚ÇÜ} {B' : C‚ÇÑ ‚•§ C‚ÇÜ} {L' : C‚ÇÉ ‚•§ C‚Çá} {R'' : C‚ÇÑ ‚•§ C‚Çà} {B'' : C‚Çá ‚•§ C‚Çà}

/-- The horizontal composition of 2-squares. -/
@[simps!]
def hComp (w : TwoSquare T L R B) (w' : TwoSquare T' R R' B') :
    TwoSquare (T ‚ãô T') L R' (B ‚ãô B') :=
  .mk _ _ _ _ <| (Functor.associator _ _ _).hom ‚â´ (whiskerLeft T w'.natTrans) ‚â´
    (Functor.associator _ _ _).inv ‚â´ (whiskerRight w.natTrans B') ‚â´ (Functor.associator _ _ _).hom

/-- Notation for the horizontal composition of 2-squares. -/
scoped infixr:80 " ‚â´‚Çï " => hComp -- type as \gg\_h

/-- The vertical composition of 2-squares. -/
@[simps!]
def vComp (w : TwoSquare T L R B) (w' : TwoSquare B L' R'' B'') :
    TwoSquare T (L ‚ãô L') (R ‚ãô R'') B'' :=
  .mk _ _ _ _ <| (Functor.associator _ _ _).hom ‚â´ (whiskerRight w.natTrans R'') ‚â´
    (Functor.associator _ _ _).inv ‚â´ (whiskerLeft L w'.natTrans) ‚â´ (Functor.associator _ _ _).hom

/-- Notation for the vertical composition of 2-squares. -/
scoped infixr:80 " ‚â´·µ• " => vComp -- type as \gg\_v

section Interchange

variable {C‚Çâ : Type u‚Çâ} [Category.{v‚Çâ} C‚Çâ] {R‚ÇÉ : C‚ÇÜ ‚•§ C‚Çâ} {B‚ÇÉ : C‚Çà ‚•§ C‚Çâ}

/-- When composing 2-squares which form a diagram of grid, compositing horionzall first yields the
same result as composing vertically first. -/
lemma hCompVCompHComp (w‚ÇÅ : TwoSquare T L R B) (w‚ÇÇ : TwoSquare T' R R' B')
    (w‚ÇÉ : TwoSquare B L' R'' B'') (w‚ÇÑ : TwoSquare B' R'' R‚ÇÉ B‚ÇÉ) :
    (w‚ÇÅ ‚â´‚Çï w‚ÇÇ) ‚â´·µ• (w‚ÇÉ ‚â´‚Çï w‚ÇÑ) = (w‚ÇÅ ‚â´·µ• w‚ÇÉ) ‚â´‚Çï (w‚ÇÇ ‚â´·µ• w‚ÇÑ) := by
  unfold hComp vComp whiskerLeft whiskerRight
  ext c
  simp only [Functor.comp_obj, NatTrans.comp_app, Functor.associator_hom_app,
    Functor.associator_inv_app, comp_id, id_comp, Functor.map_comp, assoc]
  slice_rhs 2 3 =>
    rw [‚Üê Functor.comp_map _ B‚ÇÉ, ‚Üê w‚ÇÑ.naturality]
  simp

end Interchange

end TwoSquare

end CategoryTheory
