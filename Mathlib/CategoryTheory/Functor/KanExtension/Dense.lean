/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Functor.KanExtension.DenseAt
import Mathlib.CategoryTheory.Limits.Presheaf
import Mathlib.CategoryTheory.Generator.StrongGenerator

/-!
# Dense functors

A functor `F : C ‚•§ D` is dense (`F.IsDense`) if `ùü≠ D` is a pointwise
left Kan extension of `F` along itself, i.e. any `Y : D` is the
colimit of all `F.obj X` for all morphisms `F.obj X ‚ü∂ Y` (which
is the condition `F.DenseAt Y`).
When `F` is full, we show that this
is equivalent to saying that the restricted Yoneda functor
`D ‚•§ C·µí·µñ ‚•§ Type _` is fully faithful (see the lemma
`Functor.isDense_iff_fullyFaithful_restrictedULiftYoneda`).

We also show that the range of a dense functor is a strong
generator (see `Functor.isStrongGenerator_of_isDense`).

## References

* https://ncatlab.org/nlab/show/dense+subcategory

-/

universe w v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Limits Opposite Presheaf

variable {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [Category.{v‚ÇÅ} C] [Category.{v‚ÇÇ} D]

namespace Functor

/-- A functor `F : C ‚•§ D` is dense if any `Y : D` is a canonical colimit
relatively to `F`. -/
class IsDense (F : C ‚•§ D) : Prop where
  isDenseAt (F) (Y : D) : F.isDenseAt Y

/-- This is a choice of structure `F.DenseAt Y` when `F : C ‚•§ D`
is dense, and `Y : D`. -/
noncomputable def denseAt (F : C ‚•§ D) [F.IsDense] (Y : D) : F.DenseAt Y :=
  (IsDense.isDenseAt F Y).some

lemma isDense_iff_nonempty_isPointwiseLeftKanExtension (F : C ‚•§ D) :
    F.IsDense ‚Üî
      Nonempty ((LeftExtension.mk _ (rightUnitor F).inv).IsPointwiseLeftKanExtension) :=
  ‚ü®fun _ ‚Ü¶ ‚ü®fun _ ‚Ü¶ F.denseAt _‚ü©, fun ‚ü®h‚ü© ‚Ü¶ ‚ü®fun _ ‚Ü¶ ‚ü®h _‚ü©‚ü©‚ü©

variable (F : C ‚•§ D)

instance [F.IsDense] : (restrictedULiftYoneda.{w} F).Faithful where
  map_injective h :=
    (F.denseAt _).hom_ext' (fun X p ‚Ü¶ by
      simpa using ULift.up_injective (congr_fun (NatTrans.congr_app h (op X)) (ULift.up p)))

instance [F.IsDense] : (restrictedULiftYoneda.{w} F).Full where
  map_surjective {Y Z} f := by
    let c : Cocone (CostructuredArrow.proj F Y ‚ãô F) :=
      { pt := Z
        Œπ :=
          { app g := ((f.app (op g.left)) (ULift.up g.hom)).down
            naturality g‚ÇÅ g‚ÇÇ œÜ := by
              simpa [uliftFunctor, uliftYoneda,
                restrictedULiftYoneda, ‚Üê ULift.down_inj] using
                (congr_fun (f.naturality œÜ.left.op) (ULift.up g‚ÇÇ.hom)).symm }}
    refine ‚ü®(F.denseAt Y).desc c, ?_‚ü©
    ext ‚ü®X‚ü© ‚ü®x‚ü©
    have := (F.denseAt Y).fac c (.mk x)
    dsimp [c] at this
    simpa using ULift.down_injective this

variable {F} in
lemma IsDense.of_fullyFaithful_restrictedULiftYoneda [F.Full]
    (h : (restrictedULiftYoneda.{w} F).FullyFaithful) :
    F.IsDense where
  isDenseAt Y := by
    let œÜ (s : Cocone (CostructuredArrow.proj F Y ‚ãô F)) :
        (restrictedULiftYoneda.{w} F).obj Y ‚ü∂ (restrictedULiftYoneda F).obj s.pt :=
      { app := fun ‚ü®X‚ü© ‚ü®x‚ü© ‚Ü¶ ULift.up (s.Œπ.app (.mk x))
        naturality := by
          rintro ‚ü®X‚ÇÅ‚ü© ‚ü®X‚ÇÇ‚ü© ‚ü®f‚ü©
          ext ‚ü®x‚ü©
          let Œ± : CostructuredArrow.mk (F.map f ‚â´ x) ‚ü∂ CostructuredArrow.mk x :=
            CostructuredArrow.homMk f
          simp [uliftYoneda, ‚Üê s.w Œ±, Œ±] }
    have hœÜ (s) (j) : (restrictedULiftYoneda F).map j.hom ‚â´ œÜ s =
        (restrictedULiftYoneda F).map (s.Œπ.app j) := by
      ext ‚ü®X‚ü© ‚ü®x‚ü©
      let Œ± : .mk (x ‚â´ j.hom) ‚ü∂ j := CostructuredArrow.homMk (F.preimage x)
      have := s.w Œ±
      dsimp [uliftYoneda, œÜ, Œ±] at this ‚ä¢
      rw [‚Üê this, map_preimage]
    exact
      ‚ü®{desc s := (h.preimage (œÜ s))
        fac s j := h.map_injective (by simp [hœÜ])
        uniq s m hm := h.map_injective (by
          ext ‚ü®X‚ü© ‚ü®x‚ü©
          simp [uliftYoneda, œÜ, ‚Üê hm])}‚ü©

lemma isDense_iff_fullyFaithful_restrictedULiftYoneda [F.Full] :
    F.IsDense ‚Üî Nonempty (restrictedULiftYoneda.{w} F).FullyFaithful :=
  ‚ü®fun _ ‚Ü¶ ‚ü®FullyFaithful.ofFullyFaithful _‚ü©,
    fun ‚ü®h‚ü© ‚Ü¶ IsDense.of_fullyFaithful_restrictedULiftYoneda h‚ü©

open ObjectProperty in
lemma isStrongGenerator_of_isDense [F.IsDense] :
    IsStrongGenerator (.ofObj F.obj) :=
  (IsStrongGenerator.mk_of_exists_colimitsOfShape.{max u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ} (fun Y ‚Ü¶ ‚ü®_, _, ‚ü®{
    Œπ := _
    diag := _
    isColimit := (IsColimit.whiskerEquivalence (F.denseAt Y)
      ((ShrinkHoms.equivalence _).symm.trans ((Shrink.equivalence _)).symm))
    prop_diag_obj := by simp }‚ü©‚ü©))

end Functor

end CategoryTheory
