/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.ShortComplex.Exact

/-!
# Functors which reflect exact sequences

-/

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Limits

variable {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [Category.{v‚ÇÅ} C] [Category.{v‚ÇÇ} D]

namespace Functor

section

variable [HasZeroMorphisms C] [HasZeroMorphisms D]

class ReflectsExactSequences (F : C ‚•§ D) : Prop where
  reflects' {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (w‚ÇÇ : F.map f ‚â´ F.map g = 0)
    (ex‚ÇÇ : (ShortComplex.mk _ _ w‚ÇÇ).Exact) :
    ‚àÉ (zero : f ‚â´ g = 0), (ShortComplex.mk _ _ zero).Exact

lemma ReflectsExactSequences.reflects (F : C ‚•§ D)
    [F.ReflectsExactSequences]
    {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (w‚ÇÇ : F.map f ‚â´ F.map g = 0)
    (ex‚ÇÇ : (ShortComplex.mk _ _ w‚ÇÇ).Exact) :
    ‚àÉ (zero : f ‚â´ g = 0), (ShortComplex.mk _ _ zero).Exact :=
  @ReflectsExactSequences.reflects' _ _ _ _ _ _ F _ _ _ _ f g w‚ÇÇ ex‚ÇÇ

lemma ReflectsExactSequences.reflectsShortComplexExact (F : C ‚•§ D)
    [F.ReflectsExactSequences] [F.PreservesZeroMorphisms] (S : ShortComplex C)
    (hS : (S.map F).Exact) : S.Exact :=
  (reflects F S.f S.g (by simp only [‚Üê F.map_comp, S.zero, F.map_zero]) hS).choose_spec

end

section

variable [HasZeroMorphisms C] [Preadditive D]

lemma eq_zero_of_map_eq_zero (F : C ‚•§ D) [F.ReflectsExactSequences]
    [HasZeroObject D] {X Y : C} (f : X ‚ü∂ Y) (hf : F.map f = 0) : f = 0 := by
  simpa only [comp_id] using (ReflectsExactSequences.reflects F f (ùüô Y)
      (by rw [F.map_id, comp_id, hf]) (by
    simp only [F.map_id, hf, ShortComplex.exact_iff_mono]
    infer_instance)).choose

/-- reflectsExactSequences_iff_reflectsShortComplexExact' -/
lemma reflectsExactSequences_iff_reflectsShortComplexExact' (F : C ‚•§ D)
    [F.PreservesZeroMorphisms] [HasZeroObject D] :
    F.ReflectsExactSequences ‚Üî
      (‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), F.map f = 0 ‚Üí f = 0) ‚àß
      ‚àÄ (S : ShortComplex C), (S.map F).Exact ‚Üí S.Exact := by
  constructor
  ¬∑ intro hF
    exact ‚ü®fun _ _ => F.eq_zero_of_map_eq_zero, ReflectsExactSequences.reflectsShortComplexExact F‚ü©
  ¬∑ rintro ‚ü®hF‚ÇÅ, hF‚ÇÇ‚ü©
    refine ‚ü®fun {X Y Z} f g w‚ÇÇ ex‚ÇÇ => ?_‚ü©
    have H := hF‚ÇÅ (f ‚â´ g) (by rw [F.map_comp, w‚ÇÇ])
    exact ‚ü®H, hF‚ÇÇ (ShortComplex.mk f g H) ex‚ÇÇ‚ü©

end

section

variable [Abelian C] [Abelian D] (F : C ‚•§ D) [F.PreservesZeroMorphisms] [Faithful F]

-- adapted from the proof in `CategoryTheory.Abelian.Exact` using the previous homology API
instance reflectsExactSequencesOfPreservesZeroMorphismsOfFaithful : F.ReflectsExactSequences := by
  rw [reflectsExactSequences_iff_reflectsShortComplexExact']
  refine ‚ü®fun _ _ f hf => F.map_injective (by rw [hf, F.map_zero]),
    fun S hS => ?_‚ü©
  rw [ShortComplex.exact_iff_kernel_Œπ_comp_cokernel_œÄ_zero] at hS ‚ä¢
  dsimp at hS
  obtain ‚ü®k, hk‚ü© := kernel.lift' (F.map S.g) (F.map (kernel.Œπ S.g)) (by
    rw [‚Üê F.map_comp, kernel.condition, F.map_zero])
  obtain ‚ü®l, hl‚ü© := cokernel.desc' (F.map S.f) (F.map (cokernel.œÄ S.f)) (by
    rw [‚Üê F.map_comp, cokernel.condition, F.map_zero])
  apply F.map_injective
  rw [F.map_comp, ‚Üê hk, ‚Üê hl, assoc, reassoc_of% hS, zero_comp, comp_zero, F.map_zero]

end

end Functor

end CategoryTheory
