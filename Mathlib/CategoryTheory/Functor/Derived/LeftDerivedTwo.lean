/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Functor.Derived.LeftDerived
import Mathlib.CategoryTheory.Functor.CurryingThree
import Mathlib.CategoryTheory.Localization.Prod

/-!
# Left derived bifunctors

-/

namespace CategoryTheory

namespace Functor

variable {C‚ÇÅ C‚ÇÇ D‚ÇÅ D‚ÇÇ H : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ]
  [Category D‚ÇÅ] [Category D‚ÇÇ] [Category H]

@[simps]
def whiskeringLeft‚ÇÇEquiv {F : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ H} {G : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ H}
    {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} :
    ((((whiskeringLeft‚ÇÇ H).obj L‚ÇÅ).obj L‚ÇÇ).obj F ‚ü∂ G) ‚âÉ
      (L‚ÇÅ.prod L‚ÇÇ ‚ãô uncurry.obj F ‚ü∂ uncurry.obj G) where
  toFun Œ± :=
    { app := fun ‚ü®X‚ÇÅ, X‚ÇÇ‚ü© ‚Ü¶ (Œ±.app X‚ÇÅ).app X‚ÇÇ
      naturality := by
        rintro X Y f
        have h‚ÇÅ := NatTrans.congr_app (Œ±.naturality f.1) X.2
        have h‚ÇÇ := (Œ±.app Y.1).naturality f.2
        dsimp at h‚ÇÅ h‚ÇÇ ‚ä¢
        rw [Category.assoc, h‚ÇÇ, reassoc_of% h‚ÇÅ] }
  invFun Œ≤ :=
    { app X‚ÇÅ :=
        { app X‚ÇÇ := Œ≤.app (X‚ÇÅ, X‚ÇÇ)
          naturality {X‚ÇÇ Y‚ÇÇ} f‚ÇÇ := by
            simpa using Œ≤.naturality ((ùüô X‚ÇÅ, f‚ÇÇ) : (X‚ÇÅ, X‚ÇÇ) ‚ü∂ (X‚ÇÅ, Y‚ÇÇ)) }
      naturality {X‚ÇÅ Y‚ÇÅ} f‚ÇÅ := by
        ext X‚ÇÇ
        simpa using Œ≤.naturality ((f‚ÇÅ, ùüô X‚ÇÇ) : (X‚ÇÅ, X‚ÇÇ) ‚ü∂ (Y‚ÇÅ, X‚ÇÇ)) }
  left_inv _ := rfl
  right_inv _ := rfl

variable (LF : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ H) (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ H)
  {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ}
  (Œ± : (((whiskeringLeft‚ÇÇ H).obj L‚ÇÅ).obj L‚ÇÇ).obj LF ‚ü∂ F)
  (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ)
  [L‚ÇÅ.IsLocalization W‚ÇÅ] [L‚ÇÇ.IsLocalization W‚ÇÇ]

abbrev HasLeftDerivedFunctor‚ÇÇ := (uncurry.obj F).HasLeftDerivedFunctor (W‚ÇÅ.prod W‚ÇÇ)

variable [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities]

variable {F}

abbrev IsLeftDerivedFunctor‚ÇÇ : Prop :=
  (uncurry.obj LF).IsLeftDerivedFunctor (whiskeringLeft‚ÇÇEquiv Œ±) (W‚ÇÅ.prod W‚ÇÇ)

section

variable (F L‚ÇÅ L‚ÇÇ)
variable [HasLeftDerivedFunctor‚ÇÇ F W‚ÇÅ W‚ÇÇ] [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities]

noncomputable def leftDerived‚ÇÇ : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ H :=
    curry.obj ((uncurry.obj F).totalLeftDerived (L‚ÇÅ.prod L‚ÇÇ) (W‚ÇÅ.prod W‚ÇÇ))

noncomputable def leftDerivedCounit‚ÇÇ :
    (((whiskeringLeft‚ÇÇ H).obj L‚ÇÅ).obj L‚ÇÇ).obj (leftDerived‚ÇÇ F L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ) ‚ü∂ F :=
  whiskeringLeft‚ÇÇEquiv.symm (whiskerLeft _ (currying.counitIso.hom.app _) ‚â´
    ((uncurry.obj F).totalLeftDerivedCounit (L‚ÇÅ.prod L‚ÇÇ) (W‚ÇÅ.prod W‚ÇÇ)))

instance : (leftDerived‚ÇÇ F L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ).IsLeftDerivedFunctor‚ÇÇ
    (leftDerivedCounit‚ÇÇ F L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ) W‚ÇÅ W‚ÇÇ := by
  refine (isLeftDerivedFunctor_iff_of_iso _ _
    ((uncurry.obj F).totalLeftDerivedCounit (L‚ÇÅ.prod L‚ÇÇ) (W‚ÇÅ.prod W‚ÇÇ)) _ _
    (currying.counitIso.symm.app
      (((uncurry.obj F).totalLeftDerived (L‚ÇÅ.prod L‚ÇÇ) (W‚ÇÅ.prod W‚ÇÇ)))) ?_).1 inferInstance
  ext
  simp [leftDerivedCounit‚ÇÇ]

end

section

variable [LF.IsLeftDerivedFunctor‚ÇÇ Œ± W‚ÇÅ W‚ÇÇ]
  (G : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ H)
  (Œ≤ : (((whiskeringLeft‚ÇÇ H).obj L‚ÇÅ).obj L‚ÇÇ).obj G ‚ü∂ F)

noncomputable def leftDerived‚ÇÇLift : G ‚ü∂ LF :=
  fullyFaithfulUncurry.preimage
    (leftDerivedLift (LF := uncurry.obj LF)
      (whiskeringLeft‚ÇÇEquiv Œ±) (W‚ÇÅ.prod W‚ÇÇ) (uncurry.obj G)
      (whiskeringLeft‚ÇÇEquiv Œ≤))

@[reassoc (attr := simp)]
lemma leftDerived‚ÇÇ_fac_app_app (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
    ((leftDerived‚ÇÇLift LF Œ± W‚ÇÅ W‚ÇÇ G Œ≤).app (L‚ÇÅ.obj X‚ÇÅ)).app (L‚ÇÇ.obj X‚ÇÇ) ‚â´
      (Œ±.app X‚ÇÅ).app X‚ÇÇ = (Œ≤.app X‚ÇÅ).app X‚ÇÇ := by
  simpa [leftDerived‚ÇÇLift, fullyFaithfulUncurry, Equivalence.fullyFaithfulFunctor]
    using leftDerived_fac_app (LF := uncurry.obj LF)
      (whiskeringLeft‚ÇÇEquiv Œ±) (W‚ÇÅ.prod W‚ÇÇ) (uncurry.obj G)
      (whiskeringLeft‚ÇÇEquiv Œ≤) (X‚ÇÅ, X‚ÇÇ)

@[reassoc (attr := simp)]
lemma leftDerived‚ÇÇ_fac :
    (((whiskeringLeft‚ÇÇ H).obj L‚ÇÅ).obj L‚ÇÇ).map (leftDerived‚ÇÇLift LF Œ± W‚ÇÅ W‚ÇÇ G Œ≤) ‚â´ Œ± = Œ≤ := by
  aesop

include W‚ÇÅ W‚ÇÇ in
lemma leftDerived‚ÇÇ_ext (G : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ H) (Œ≥‚ÇÅ Œ≥‚ÇÇ : G ‚ü∂ LF)
    (hŒ≥ : (((whiskeringLeft‚ÇÇ H).obj L‚ÇÅ).obj L‚ÇÇ).map Œ≥‚ÇÅ ‚â´ Œ± =
      (((whiskeringLeft‚ÇÇ H).obj L‚ÇÅ).obj L‚ÇÇ).map Œ≥‚ÇÇ ‚â´ Œ±) : Œ≥‚ÇÅ = Œ≥‚ÇÇ := by
  apply uncurry.map_injective
  apply leftDerived_ext (Œ± := (whiskeringLeft‚ÇÇEquiv Œ±)) (W := W‚ÇÅ.prod W‚ÇÇ)
  ext ‚ü®X‚ÇÅ, X‚ÇÇ‚ü©
  exact congr_app (congr_app hŒ≥ X‚ÇÅ) X‚ÇÇ

end

variable {LF}

def bifunctorCounit‚ÇÅ (X‚ÇÅ : C‚ÇÅ) : L‚ÇÇ ‚ãô LF.obj (L‚ÇÅ.obj X‚ÇÅ) ‚ü∂ F.obj X‚ÇÅ := Œ±.app X‚ÇÅ

@[simp]
lemma bifunctorCounit‚ÇÅ_app (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
    (bifunctorCounit‚ÇÅ Œ± X‚ÇÅ).app X‚ÇÇ = (Œ±.app X‚ÇÅ).app X‚ÇÇ := rfl

def bifunctorCounit‚ÇÇ (X‚ÇÇ : C‚ÇÇ) : L‚ÇÅ ‚ãô LF.flip.obj (L‚ÇÇ.obj X‚ÇÇ) ‚ü∂ F.flip.obj X‚ÇÇ :=
  ((flipFunctor _ _ _).map Œ±).app X‚ÇÇ

@[simp]
lemma bifunctorCounit‚ÇÇ_app (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
    (bifunctorCounit‚ÇÇ Œ± X‚ÇÇ).app X‚ÇÅ = (Œ±.app X‚ÇÅ).app X‚ÇÇ := rfl

end Functor

end CategoryTheory
