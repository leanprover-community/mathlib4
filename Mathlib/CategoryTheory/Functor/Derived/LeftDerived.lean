/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Functor.KanExtension.Basic
import Mathlib.CategoryTheory.Localization.Predicate

/-!
# Left derived functors

In this file, given a functor `F : C ‚•§ H`, and `L : C ‚•§ D` that is a
localization functor for `W : MorphismProperty C`, we define
`F.totalLeftDerived L W : D ‚•§ H` as the right Kan extension of `F`
along `L`: it is defined if the type class `F.HasLeftDerivedFunctor W`
asserting the existence of a right Kan extension is satisfied.
(The name `totalLeftDerived` is to avoid name-collision with
`Functor.leftDerived` which are the left derived functors in
the context of abelian categories.)

Given `LF : D ‚•§ H` and `Œ± : L ‚ãô RF ‚ü∂ F`, we also introduce a type class
`F.IsLeftDerivedFunctor Œ± W` saying that `Œ±` is a right Kan extension of `F`
along the localization functor `L`.

(This file was obtained by dualizing the results in the file
`Mathlib.CategoryTheory.Functor.Derived.RightDerived`.)

## References

* https://ncatlab.org/nlab/show/derived+functor

-/

namespace CategoryTheory

namespace Functor

variable {C C' D D' H H' : Type _} [Category C] [Category C']
  [Category D] [Category D'] [Category H] [Category H']
  (LF'' LF' LF : D ‚•§ H) {F F' F'' : C ‚•§ H} (e : F ‚âÖ F') {L : C ‚•§ D}
  (Œ±'' : L ‚ãô LF'' ‚ü∂ F'') (Œ±' : L ‚ãô LF' ‚ü∂ F') (Œ± : L ‚ãô LF ‚ü∂ F) (Œ±'‚ÇÇ : L ‚ãô LF' ‚ü∂ F)
  (W : MorphismProperty C)

/-- A functor `LF : D ‚•§ H` is a left derived functor of `F : C ‚•§ H`
if it is equipped with a natural transformation `Œ± : L ‚ãô LF ‚ü∂ F`
which makes it a right Kan extension of `F` along `L`,
where `L : C ‚•§ D` is a localization functor for `W : MorphismProperty C`. -/
class IsLeftDerivedFunctor (LF : D ‚•§ H) {F : C ‚•§ H} {L : C ‚•§ D} (Œ± : L ‚ãô LF ‚ü∂ F)
    (W : MorphismProperty C) [L.IsLocalization W] : Prop where
  isRightKanExtension (LF Œ±) : LF.IsRightKanExtension Œ±

lemma isLeftDerivedFunctor_iff_isRightKanExtension [L.IsLocalization W] :
    LF.IsLeftDerivedFunctor Œ± W ‚Üî LF.IsRightKanExtension Œ± := by
  constructor
  ¬∑ exact fun _ => IsLeftDerivedFunctor.isRightKanExtension LF Œ± W
  ¬∑ exact fun h => ‚ü®h‚ü©

variable {RF RF'} in
lemma isLeftDerivedFunctor_iff_of_iso (Œ±' : L ‚ãô LF' ‚ü∂ F) (W : MorphismProperty C)
    [L.IsLocalization W] (e : LF ‚âÖ LF') (comm : whiskerLeft L e.hom ‚â´ Œ±' = Œ±) :
    LF.IsLeftDerivedFunctor Œ± W ‚Üî LF'.IsLeftDerivedFunctor Œ±' W := by
  simp only [isLeftDerivedFunctor_iff_isRightKanExtension]
  exact isRightKanExtension_iff_of_iso e _ _ comm

section

variable [L.IsLocalization W] [LF.IsLeftDerivedFunctor Œ± W]

/-- Constructor for natural transformations to a left derived functor. -/
noncomputable def leftDerivedLift (G : D ‚•§ H) (Œ≤ : L ‚ãô G ‚ü∂ F) : G ‚ü∂ LF :=
  have := IsLeftDerivedFunctor.isRightKanExtension LF Œ± W
  LF.liftOfIsRightKanExtension Œ± G Œ≤

@[reassoc (attr := simp)]
lemma leftDerived_fac (G : D ‚•§ H) (Œ≤ : L ‚ãô G ‚ü∂ F) :
    whiskerLeft L (LF.leftDerivedLift Œ± W G Œ≤) ‚â´ Œ± = Œ≤ :=
  have := IsLeftDerivedFunctor.isRightKanExtension LF Œ± W
  LF.liftOfIsRightKanExtension_fac Œ± G Œ≤

@[reassoc (attr := simp)]
lemma leftDerived_fac_app (G : D ‚•§ H) (Œ≤ : L ‚ãô G ‚ü∂ F) (X : C) :
    (LF.leftDerivedLift Œ± W G Œ≤).app (L.obj X) ‚â´ Œ±.app X = Œ≤.app X :=
  have := IsLeftDerivedFunctor.isRightKanExtension LF Œ± W
  LF.liftOfIsRightKanExtension_fac_app Œ± G Œ≤ X

include W in
lemma leftDerived_ext (G : D ‚•§ H) (Œ≥‚ÇÅ Œ≥‚ÇÇ : G ‚ü∂ LF)
    (hŒ≥ : whiskerLeft L Œ≥‚ÇÅ ‚â´ Œ± = whiskerLeft L Œ≥‚ÇÇ ‚â´ Œ±) : Œ≥‚ÇÅ = Œ≥‚ÇÇ :=
  have := IsLeftDerivedFunctor.isRightKanExtension LF Œ± W
  LF.hom_ext_of_isRightKanExtension Œ± Œ≥‚ÇÅ Œ≥‚ÇÇ hŒ≥

/-- The natural transformation `LF' ‚ü∂ LF` on left derived functors that is
induced by a natural transformation `F' ‚ü∂ F`. -/
noncomputable def leftDerivedNatTrans (œÑ : F' ‚ü∂ F) : LF' ‚ü∂ LF :=
  LF.leftDerivedLift Œ± W LF' (Œ±' ‚â´ œÑ)

@[reassoc (attr := simp)]
lemma leftDerivedNatTrans_fac (œÑ : F' ‚ü∂ F) :
    whiskerLeft L (leftDerivedNatTrans LF' LF Œ±' Œ± W œÑ) ‚â´ Œ± = Œ±' ‚â´ œÑ := by
  dsimp only [leftDerivedNatTrans]
  simp

@[reassoc (attr := simp)]
lemma leftDerivedNatTrans_app (œÑ : F' ‚ü∂ F) (X : C) :
    (leftDerivedNatTrans LF' LF Œ±' Œ± W œÑ).app (L.obj X) ‚â´ Œ±.app X =
    Œ±'.app X ‚â´ œÑ.app X := by
  dsimp only [leftDerivedNatTrans]
  simp

@[simp]
lemma leftDerivedNatTrans_id :
    leftDerivedNatTrans LF LF Œ± Œ± W (ùüô F) = ùüô LF :=
  leftDerived_ext LF Œ± W _ _ _ (by simp)

variable [LF'.IsLeftDerivedFunctor Œ±' W]

@[reassoc (attr := simp)]
lemma leftDerivedNatTrans_comp (œÑ' : F'' ‚ü∂ F') (œÑ : F' ‚ü∂ F) :
    leftDerivedNatTrans LF'' LF' Œ±'' Œ±' W œÑ' ‚â´ leftDerivedNatTrans LF' LF Œ±' Œ± W œÑ =
    leftDerivedNatTrans LF'' LF Œ±'' Œ± W (œÑ' ‚â´ œÑ) :=
  leftDerived_ext LF Œ± W _ _ _ (by simp)

/-- The natural isomorphism `LF' ‚âÖ LF` on left derived functors that is
induced by a natural isomorphism `F' ‚âÖ F`. -/
@[simps]
noncomputable def leftDerivedNatIso (œÑ : F' ‚âÖ F) :
    LF' ‚âÖ LF where
  hom := leftDerivedNatTrans LF' LF Œ±' Œ± W œÑ.hom
  inv := leftDerivedNatTrans LF LF' Œ± Œ±' W œÑ.inv

/-- Uniqueness (up to a natural isomorphism) of the left derived functor. -/
noncomputable abbrev leftDerivedUnique [LF'.IsLeftDerivedFunctor Œ±'‚ÇÇ W] : LF ‚âÖ LF' :=
  leftDerivedNatIso LF LF' Œ± Œ±'‚ÇÇ W (Iso.refl F)

lemma isLeftDerivedFunctor_iff_isIso_leftDerivedLift (G : D ‚•§ H) (Œ≤ : L ‚ãô G ‚ü∂ F) :
    G.IsLeftDerivedFunctor Œ≤ W ‚Üî IsIso (LF.leftDerivedLift Œ± W G Œ≤) := by
  rw [isLeftDerivedFunctor_iff_isRightKanExtension]
  have := IsLeftDerivedFunctor.isRightKanExtension _ Œ± W
  exact isRightKanExtension_iff_isIso _ Œ± _ (by simp)

end

variable (F)

/-- A functor `F : C ‚•§ H` has a left derived functor with respect to
`W : MorphismProperty C` if it has a right Kan extension along
`W.Q : C ‚•§ W.Localization` (or any localization functor `L : C ‚•§ D`
for `W`, see `hasLeftDerivedFunctor_iff`). -/
class HasLeftDerivedFunctor : Prop where
  hasRightKanExtension' : HasRightKanExtension W.Q F

variable (L)
variable [L.IsLocalization W]

lemma hasLeftDerivedFunctor_iff :
    F.HasLeftDerivedFunctor W ‚Üî HasRightKanExtension L F := by
  have : HasLeftDerivedFunctor F W ‚Üî HasRightKanExtension W.Q F :=
    ‚ü®fun h => h.hasRightKanExtension', fun h => ‚ü®h‚ü©‚ü©
  rw [this, hasRightExtension_iff_postcomp‚ÇÅ (Localization.compUniqFunctor W.Q L W) F]

variable {F}

include e in
lemma hasLeftDerivedFunctor_iff_of_iso :
    HasLeftDerivedFunctor F W ‚Üî HasLeftDerivedFunctor F' W := by
  rw [hasLeftDerivedFunctor_iff F W.Q W, hasLeftDerivedFunctor_iff F' W.Q W,
    hasRightExtension_iff_of_iso‚ÇÇ W.Q e]

variable (F)

lemma HasLeftDerivedFunctor.hasRightKanExtension [HasLeftDerivedFunctor F W] :
    HasRightKanExtension L F := by
  simpa only [‚Üê hasLeftDerivedFunctor_iff F L W]

variable {F L W}

lemma HasLeftDerivedFunctor.mk' [LF.IsLeftDerivedFunctor Œ± W] :
    HasLeftDerivedFunctor F W := by
  have := IsLeftDerivedFunctor.isRightKanExtension LF Œ± W
  simpa only [hasLeftDerivedFunctor_iff F L W] using HasRightKanExtension.mk LF Œ±

section

variable (F) [F.HasLeftDerivedFunctor W] (L W)

/-- Given a functor `F : C ‚•§ H`, and a localization functor `L : D ‚•§ H` for `W`,
this is the left derived functor `D ‚•§ H` of `F`, i.e. the right Kan extension
of `F` along `L`. -/
noncomputable def totalLeftDerived : D ‚•§ H :=
  have := HasLeftDerivedFunctor.hasRightKanExtension F L W
  rightKanExtension L F

/-- The canonical natural transformation `L ‚ãô F.totalLeftDerived L W ‚ü∂ F`. -/
noncomputable def totalLeftDerivedCounit : L ‚ãô F.totalLeftDerived L W ‚ü∂ F :=
  have := HasLeftDerivedFunctor.hasRightKanExtension F L W
  rightKanExtensionCounit L F

instance : (F.totalLeftDerived L W).IsLeftDerivedFunctor
    (F.totalLeftDerivedCounit L W) W where
  isRightKanExtension := by
    dsimp [totalLeftDerived, totalLeftDerivedCounit]
    infer_instance

end

end Functor

end CategoryTheory
