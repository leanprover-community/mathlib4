/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Functor.Derived.LeftDerivedTwo
import Mathlib.CategoryTheory.Functor.CurryingThree

/-!
# Left derived trifunctors

-/

namespace CategoryTheory

namespace Functor

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ D‚ÇÅ D‚ÇÇ D‚ÇÉ H : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ]
  [Category D‚ÇÅ] [Category D‚ÇÇ] [Category D‚ÇÉ] [Category H]

@[simps]
def whiskeringLeft‚ÇÉEquiv {F : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ H} {G : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ H}
    {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ} :
    (((((whiskeringLeft‚ÇÉ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj F ‚ü∂ G) ‚âÉ
      (L‚ÇÅ.prod (L‚ÇÇ.prod L‚ÇÉ) ‚ãô uncurry‚ÇÉ.obj F ‚ü∂ uncurry‚ÇÉ.obj G) where
  toFun Œ± :=
    { app := fun ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ‚ü© ‚Ü¶ ((Œ±.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ
      naturality X Y f := by
        have h‚ÇÅ := congr_app (congr_app (Œ±.naturality f.1) X.2.1) X.2.2
        have h‚ÇÇ := congr_app ((Œ±.app Y.1).naturality f.2.1) X.2.2
        have h‚ÇÉ := ((Œ±.app Y.1).app Y.2.1).naturality f.2.2
        dsimp at h‚ÇÅ h‚ÇÇ h‚ÇÉ ‚ä¢
        rw [Category.assoc, Category.assoc, Category.assoc, h‚ÇÉ, reassoc_of% h‚ÇÇ, reassoc_of% h‚ÇÅ] }
  invFun Œ≤ :=
    { app X‚ÇÅ :=
        { app X‚ÇÇ :=
            { app X‚ÇÉ := Œ≤.app (X‚ÇÅ, X‚ÇÇ, X‚ÇÉ)
              naturality {X‚ÇÉ Y‚ÇÉ} f‚ÇÉ := by
                simpa using Œ≤.naturality ((ùüô X‚ÇÅ, ùüô X‚ÇÇ, f‚ÇÉ) : (X‚ÇÅ, X‚ÇÇ, X‚ÇÉ) ‚ü∂ (X‚ÇÅ, X‚ÇÇ, Y‚ÇÉ)) }
          naturality {X‚ÇÇ Y‚ÇÇ} f‚ÇÇ := by
            ext X‚ÇÉ
            simpa using Œ≤.naturality ((ùüô X‚ÇÅ, f‚ÇÇ, ùüô X‚ÇÉ) : (X‚ÇÅ, X‚ÇÇ, X‚ÇÉ) ‚ü∂ (X‚ÇÅ, Y‚ÇÇ, X‚ÇÉ)) }
      naturality {X‚ÇÅ Y‚ÇÅ} f‚ÇÅ := by
        ext X‚ÇÇ X‚ÇÉ
        simpa using Œ≤.naturality ((f‚ÇÅ, ùüô X‚ÇÇ, ùüô X‚ÇÉ) : (X‚ÇÅ, X‚ÇÇ, X‚ÇÉ) ‚ü∂ (Y‚ÇÅ, X‚ÇÇ, X‚ÇÉ)) }
  left_inv _ := rfl
  right_inv _ := rfl

variable (LF LF' LF'' : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ H) (F F' F'' : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ H)
  {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ}
  (Œ± : ((((whiskeringLeft‚ÇÉ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj LF ‚ü∂ F)
  (Œ±' : ((((whiskeringLeft‚ÇÉ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj LF' ‚ü∂ F')
  (Œ±'‚ÇÇ : ((((whiskeringLeft‚ÇÉ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj LF' ‚ü∂ F)
  (Œ±'' : ((((whiskeringLeft‚ÇÉ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj LF'' ‚ü∂ F'')
  (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ) (W‚ÇÉ : MorphismProperty C‚ÇÉ)
  [L‚ÇÅ.IsLocalization W‚ÇÅ] [L‚ÇÇ.IsLocalization W‚ÇÇ] [L‚ÇÉ.IsLocalization W‚ÇÉ]

abbrev HasLeftDerivedFunctor‚ÇÉ := (uncurry‚ÇÉ.obj F).HasLeftDerivedFunctor (W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ))

variable [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities] [W‚ÇÉ.ContainsIdentities]

variable {F F'}

abbrev IsLeftDerivedFunctor‚ÇÉ : Prop :=
  (uncurry‚ÇÉ.obj LF).IsLeftDerivedFunctor (whiskeringLeft‚ÇÉEquiv Œ±) (W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ))

section

variable (F L‚ÇÅ L‚ÇÇ L‚ÇÉ) [HasLeftDerivedFunctor‚ÇÉ F W‚ÇÅ W‚ÇÇ W‚ÇÉ]
  [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities] [W‚ÇÉ.ContainsIdentities]

noncomputable def leftDerived‚ÇÉ : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ H :=
    curry‚ÇÉ.obj ((uncurry‚ÇÉ.obj F).totalLeftDerived (L‚ÇÅ.prod (L‚ÇÇ.prod L‚ÇÉ)) (W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ)))

noncomputable def leftDerivedCounit‚ÇÉ :
    ((((whiskeringLeft‚ÇÉ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj (leftDerived‚ÇÉ F L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ) ‚ü∂ F :=
  whiskeringLeft‚ÇÉEquiv.symm (whiskerLeft _ (currying‚ÇÉ.counitIso.hom.app _) ‚â´
    ((uncurry‚ÇÉ.obj F).totalLeftDerivedCounit (L‚ÇÅ.prod (L‚ÇÇ.prod L‚ÇÉ)) (W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ))))

instance : (leftDerived‚ÇÉ F L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ).IsLeftDerivedFunctor‚ÇÉ
    (leftDerivedCounit‚ÇÉ F L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ) W‚ÇÅ W‚ÇÇ W‚ÇÉ := by
  refine (isLeftDerivedFunctor_iff_of_iso _ _
    ((uncurry‚ÇÉ.obj F).totalLeftDerivedCounit (L‚ÇÅ.prod (L‚ÇÇ.prod L‚ÇÉ)) (W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ))) _ _
    (currying‚ÇÉ.counitIso.symm.app
      (((uncurry‚ÇÉ.obj F).totalLeftDerived
      (L‚ÇÅ.prod (L‚ÇÇ.prod L‚ÇÉ)) (W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ))))) ?_).1 inferInstance
  ext
  simp [leftDerivedCounit‚ÇÉ]

end

section

variable [LF.IsLeftDerivedFunctor‚ÇÉ Œ± W‚ÇÅ W‚ÇÇ W‚ÇÉ]
  [LF'.IsLeftDerivedFunctor‚ÇÉ Œ±' W‚ÇÅ W‚ÇÇ W‚ÇÉ]
  [LF''.IsLeftDerivedFunctor‚ÇÉ Œ±'' W‚ÇÅ W‚ÇÇ W‚ÇÉ]
  (G : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ H)
  (Œ≤ : ((((whiskeringLeft‚ÇÉ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj G ‚ü∂ F)

noncomputable def leftDerived‚ÇÉLift : G ‚ü∂ LF :=
  fullyFaithfulUncurry‚ÇÉ.preimage
    (leftDerivedLift (LF := uncurry‚ÇÉ.obj LF)
      (whiskeringLeft‚ÇÉEquiv Œ±) (W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ)) (uncurry‚ÇÉ.obj G)
      (whiskeringLeft‚ÇÉEquiv Œ≤))

@[reassoc (attr := simp)]
lemma leftDerived‚ÇÉ_fac_app_app (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((leftDerived‚ÇÉLift LF Œ± W‚ÇÅ W‚ÇÇ W‚ÇÉ G Œ≤).app (L‚ÇÅ.obj X‚ÇÅ)).app (L‚ÇÇ.obj X‚ÇÇ)).app (L‚ÇÉ.obj X‚ÇÉ) ‚â´
      ((Œ±.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ = ((Œ≤.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ := by
  simpa [leftDerived‚ÇÉLift, fullyFaithfulUncurry‚ÇÉ, Equivalence.fullyFaithfulFunctor] using
    (leftDerived_fac_app (LF := uncurry‚ÇÉ.obj LF)
      (whiskeringLeft‚ÇÉEquiv Œ±) (W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ)) (uncurry‚ÇÉ.obj G)
      (whiskeringLeft‚ÇÉEquiv Œ≤)) (X‚ÇÅ, X‚ÇÇ, X‚ÇÉ)

@[reassoc (attr := simp)]
lemma leftDerived‚ÇÉ_fac :
    ((((whiskeringLeft‚ÇÉ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).map
      (leftDerived‚ÇÉLift LF Œ± W‚ÇÅ W‚ÇÇ W‚ÇÉ G Œ≤) ‚â´ Œ± = Œ≤ := by
  aesop

include W‚ÇÅ W‚ÇÇ W‚ÇÉ in
lemma leftDerived‚ÇÉ_ext (G : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ H) (Œ≥‚ÇÅ Œ≥‚ÇÇ : G ‚ü∂ LF)
    (hŒ≥ : ((((whiskeringLeft‚ÇÉ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).map Œ≥‚ÇÅ ‚â´ Œ± =
      ((((whiskeringLeft‚ÇÉ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).map Œ≥‚ÇÇ ‚â´ Œ±) : Œ≥‚ÇÅ = Œ≥‚ÇÇ := by
  apply uncurry‚ÇÉ.map_injective
  apply leftDerived_ext (Œ± := (whiskeringLeft‚ÇÉEquiv Œ±)) (W := W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ))
  ext ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ‚ü©
  exact congr_app (congr_app (congr_app hŒ≥ X‚ÇÅ) X‚ÇÇ) X‚ÇÉ

noncomputable def leftDerived‚ÇÉNatTrans (œÑ : F ‚ü∂ F') : LF ‚ü∂ LF' :=
  LF'.leftDerived‚ÇÉLift Œ±' W‚ÇÅ W‚ÇÇ W‚ÇÉ LF (Œ± ‚â´ œÑ)

omit [LF.IsLeftDerivedFunctor‚ÇÉ Œ± W‚ÇÅ W‚ÇÇ W‚ÇÉ] in
@[reassoc (attr := simp)]
lemma leftDerived‚ÇÉNatTrans_fac (œÑ : F ‚ü∂ F') :
    ((((whiskeringLeft‚ÇÉ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).map
      (leftDerived‚ÇÉNatTrans LF LF' Œ± Œ±' W‚ÇÅ W‚ÇÇ W‚ÇÉ œÑ) ‚â´ Œ±' =
    Œ± ‚â´ œÑ := by
  dsimp only [leftDerived‚ÇÉNatTrans]
  simp

omit [LF.IsLeftDerivedFunctor‚ÇÉ Œ± W‚ÇÅ W‚ÇÇ W‚ÇÉ] in
@[reassoc (attr := simp)]
lemma leftDerived‚ÇÉNatTrans_fac_app_app_app (œÑ : F ‚ü∂ F') (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((leftDerived‚ÇÉNatTrans LF LF' Œ± Œ±' W‚ÇÅ W‚ÇÇ W‚ÇÉ œÑ).app (L‚ÇÅ.obj X‚ÇÅ)).app
      (L‚ÇÇ.obj X‚ÇÇ)).app (L‚ÇÉ.obj X‚ÇÉ) ‚â´ ((Œ±'.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ =
      ((Œ±.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ ‚â´ ((œÑ.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ := by
  dsimp only [leftDerived‚ÇÉNatTrans]
  simp

@[simp]
lemma leftDerived‚ÇÉNatTrans_id :
    leftDerived‚ÇÉNatTrans LF LF Œ± Œ± W‚ÇÅ W‚ÇÇ W‚ÇÉ (ùüô F) = ùüô LF :=
  leftDerived‚ÇÉ_ext LF Œ± W‚ÇÅ W‚ÇÇ W‚ÇÉ _ _ _ (by aesop_cat)

omit [LF.IsLeftDerivedFunctor‚ÇÉ Œ± W‚ÇÅ W‚ÇÇ W‚ÇÉ] in
@[reassoc (attr := simp)]
lemma leftDerived‚ÇÉNatTrans_comp (œÑ : F ‚ü∂ F') (œÑ' : F' ‚ü∂ F'') :
  leftDerived‚ÇÉNatTrans LF LF' Œ± Œ±' W‚ÇÅ W‚ÇÇ W‚ÇÉ œÑ ‚â´
      leftDerived‚ÇÉNatTrans LF' LF'' Œ±' Œ±'' W‚ÇÅ W‚ÇÇ W‚ÇÉ œÑ' =
    leftDerived‚ÇÉNatTrans LF LF'' Œ± Œ±'' W‚ÇÅ W‚ÇÇ W‚ÇÉ (œÑ ‚â´ œÑ') :=
  leftDerived‚ÇÉ_ext LF'' Œ±'' W‚ÇÅ W‚ÇÇ W‚ÇÉ _ _ _ (by aesop_cat)

@[simps]
noncomputable def leftDerived‚ÇÉNatIso (œÑ : F ‚âÖ F') :
    LF ‚âÖ LF' where
  hom := leftDerived‚ÇÉNatTrans LF LF' Œ± Œ±' W‚ÇÅ W‚ÇÇ W‚ÇÉ œÑ.hom
  inv := leftDerived‚ÇÉNatTrans LF' LF Œ±' Œ± W‚ÇÅ W‚ÇÇ W‚ÇÉ œÑ.inv

@[simp]
noncomputable def leftDerivedFunctor‚ÇÉUnique [LF'.IsLeftDerivedFunctor‚ÇÉ Œ±'‚ÇÇ W‚ÇÅ W‚ÇÇ W‚ÇÉ] :
    LF ‚âÖ LF' :=
  leftDerived‚ÇÉNatIso LF LF' Œ± Œ±'‚ÇÇ W‚ÇÅ W‚ÇÇ W‚ÇÉ (Iso.refl F)

end

end Functor

end CategoryTheory
