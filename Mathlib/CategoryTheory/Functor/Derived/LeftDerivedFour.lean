/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Functor.Derived.LeftDerived
import Mathlib.CategoryTheory.Functor.Quadrifunctor
import Mathlib.CategoryTheory.Localization.Prod

/-!
# Left derived quadrifunctors

-/

namespace CategoryTheory

namespace Functor

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ C‚ÇÑ D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ H : Type*}
  [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ] [Category C‚ÇÑ]
  [Category D‚ÇÅ] [Category D‚ÇÇ] [Category D‚ÇÉ] [Category D‚ÇÑ] [Category H]

set_option maxHeartbeats 800000 in
-- this is slow
@[simps]
def whiskeringLeft‚ÇÑEquiv {F : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D‚ÇÑ ‚•§ H} {G : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ H}
    {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ} {L‚ÇÑ : C‚ÇÑ ‚•§ D‚ÇÑ} :
    ((((((whiskeringLeft‚ÇÑ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj L‚ÇÑ).obj F ‚ü∂ G) ‚âÉ
      (L‚ÇÅ.prod (L‚ÇÇ.prod (L‚ÇÉ.prod L‚ÇÑ)) ‚ãô uncurry‚ÇÑ.obj F ‚ü∂ uncurry‚ÇÑ.obj G) where
  toFun Œ± :=
    { app := fun ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ, X‚ÇÑ‚ü© ‚Ü¶ (((Œ±.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ).app X‚ÇÑ
      naturality := by
        rintro ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ, X‚ÇÑ‚ü© ‚ü®Y‚ÇÅ, Y‚ÇÇ, Y‚ÇÉ, Y‚ÇÑ‚ü© ‚ü®f‚ÇÅ, f‚ÇÇ, f‚ÇÉ, f‚ÇÑ‚ü©
        have h‚ÇÅ := congr_app (congr_app (congr_app (Œ±.naturality f‚ÇÅ) X‚ÇÇ) X‚ÇÉ) X‚ÇÑ
        have h‚ÇÇ := congr_app (congr_app ((Œ±.app Y‚ÇÅ).naturality f‚ÇÇ) X‚ÇÉ) X‚ÇÑ
        have h‚ÇÉ := congr_app (((Œ±.app Y‚ÇÅ).app Y‚ÇÇ).naturality f‚ÇÉ) X‚ÇÑ
        have h‚ÇÑ := (((Œ±.app Y‚ÇÅ).app Y‚ÇÇ).app Y‚ÇÉ).naturality f‚ÇÑ
        dsimp at h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ ‚ä¢
        simp only [Category.assoc]
        rw [‚Üê reassoc_of% h‚ÇÅ, ‚Üê reassoc_of% h‚ÇÇ, ‚Üê reassoc_of% h‚ÇÉ, h‚ÇÑ] }
  invFun Œ≤ :=
    { app X‚ÇÅ :=
      { app X‚ÇÇ :=
        { app X‚ÇÉ :=
          { app X‚ÇÑ := Œ≤.app (X‚ÇÅ, X‚ÇÇ, X‚ÇÉ, X‚ÇÑ)
            naturality _ _ f‚ÇÑ := by
              simpa using Œ≤.naturality ((ùüô X‚ÇÅ, ùüô X‚ÇÇ, ùüô X‚ÇÉ, f‚ÇÑ) : (_, _, _, _) ‚ü∂ (_, _, _, _)) }
          naturality _ _ f‚ÇÉ := by
            ext X‚ÇÑ
            simpa using Œ≤.naturality ((ùüô X‚ÇÅ, ùüô X‚ÇÇ, f‚ÇÉ, ùüô X‚ÇÑ) : (_, _, _, _) ‚ü∂ (_, _, _, _)) }
        naturality _ _ f‚ÇÇ := by
          ext X‚ÇÉ X‚ÇÑ
          simpa using Œ≤.naturality ((ùüô X‚ÇÅ, f‚ÇÇ, ùüô X‚ÇÉ, ùüô X‚ÇÑ) : (_, _, _, _) ‚ü∂ (_, _, _, _)) }
      naturality _ _ f‚ÇÅ := by
        ext X‚ÇÇ X‚ÇÉ X‚ÇÑ
        simpa using Œ≤.naturality ((f‚ÇÅ, ùüô X‚ÇÇ, ùüô X‚ÇÉ, ùüô X‚ÇÑ) : (_, _, _, _) ‚ü∂ (_, _, _, _)) }
  left_inv _ := rfl
  right_inv _ := rfl

variable (LF LF' LF'' : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D‚ÇÑ ‚•§ H) (F F' F'' : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ H)
  {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ} {L‚ÇÑ : C‚ÇÑ ‚•§ D‚ÇÑ}
  (Œ± : (((((whiskeringLeft‚ÇÑ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj L‚ÇÑ).obj LF ‚ü∂ F)
  (Œ±' : (((((whiskeringLeft‚ÇÑ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj L‚ÇÑ).obj LF' ‚ü∂ F')
  (Œ±'‚ÇÇ : (((((whiskeringLeft‚ÇÑ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj L‚ÇÑ).obj LF' ‚ü∂ F)
  (Œ±'' : (((((whiskeringLeft‚ÇÑ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj L‚ÇÑ).obj LF'' ‚ü∂ F'')
  (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ) (W‚ÇÉ : MorphismProperty C‚ÇÉ)
  (W‚ÇÑ : MorphismProperty C‚ÇÑ) [L‚ÇÅ.IsLocalization W‚ÇÅ] [L‚ÇÇ.IsLocalization W‚ÇÇ]
  [L‚ÇÉ.IsLocalization W‚ÇÉ] [L‚ÇÑ.IsLocalization W‚ÇÑ]

abbrev HasLeftDerivedFunctor‚ÇÑ :=
  (uncurry‚ÇÑ.obj F).HasLeftDerivedFunctor (W‚ÇÅ.prod (W‚ÇÇ.prod (W‚ÇÉ.prod W‚ÇÑ)))

variable [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities] [W‚ÇÉ.ContainsIdentities]
  [W‚ÇÑ.ContainsIdentities]

variable {F F'}

abbrev IsLeftDerivedFunctor‚ÇÑ : Prop :=
  (uncurry‚ÇÑ.obj LF).IsLeftDerivedFunctor (whiskeringLeft‚ÇÑEquiv Œ±) (W‚ÇÅ.prod (W‚ÇÇ.prod (W‚ÇÉ.prod W‚ÇÑ)))

section

variable (F L‚ÇÅ L‚ÇÇ L‚ÇÉ L‚ÇÑ) [HasLeftDerivedFunctor‚ÇÑ F W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÑ]
  [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities] [W‚ÇÉ.ContainsIdentities] [W‚ÇÑ.ContainsIdentities]

noncomputable def leftDerived‚ÇÑ : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D‚ÇÑ ‚•§ H :=
    curry‚ÇÑ.obj ((uncurry‚ÇÑ.obj F).totalLeftDerived
      (L‚ÇÅ.prod (L‚ÇÇ.prod (L‚ÇÉ.prod L‚ÇÑ))) (W‚ÇÅ.prod (W‚ÇÇ.prod (W‚ÇÉ.prod W‚ÇÑ))))

noncomputable def leftDerivedCounit‚ÇÑ :
    (((((whiskeringLeft‚ÇÑ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj L‚ÇÑ).obj
      (leftDerived‚ÇÑ F L‚ÇÅ L‚ÇÇ L‚ÇÉ L‚ÇÑ W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÑ) ‚ü∂ F :=
  whiskeringLeft‚ÇÑEquiv.symm (whiskerLeft _ (currying‚ÇÑ.counitIso.hom.app _) ‚â´
    ((uncurry‚ÇÑ.obj F).totalLeftDerivedCounit (L‚ÇÅ.prod (L‚ÇÇ.prod (L‚ÇÉ.prod L‚ÇÑ)))
      (W‚ÇÅ.prod (W‚ÇÇ.prod (W‚ÇÉ.prod W‚ÇÑ)))))

instance : (leftDerived‚ÇÑ F L‚ÇÅ L‚ÇÇ L‚ÇÉ L‚ÇÑ W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÑ).IsLeftDerivedFunctor‚ÇÑ
    (leftDerivedCounit‚ÇÑ F L‚ÇÅ L‚ÇÇ L‚ÇÉ L‚ÇÑ W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÑ) W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÑ := by
  refine (isLeftDerivedFunctor_iff_of_iso _ _
    ((uncurry‚ÇÑ.obj F).totalLeftDerivedCounit (L‚ÇÅ.prod (L‚ÇÇ.prod (L‚ÇÉ.prod L‚ÇÑ)))
      (W‚ÇÅ.prod (W‚ÇÇ.prod (W‚ÇÉ.prod W‚ÇÑ)))) _ _
    (currying‚ÇÑ.counitIso.symm.app
      (((uncurry‚ÇÑ.obj F).totalLeftDerived
      (L‚ÇÅ.prod (L‚ÇÇ.prod (L‚ÇÉ.prod L‚ÇÑ))) (W‚ÇÅ.prod (W‚ÇÇ.prod (W‚ÇÉ.prod W‚ÇÑ)))))) ?_).1 inferInstance
  ext
  simp [leftDerivedCounit‚ÇÑ]

end

section

variable [LF.IsLeftDerivedFunctor‚ÇÑ Œ± W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÑ]
  [LF'.IsLeftDerivedFunctor‚ÇÑ Œ±' W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÑ]
  [LF''.IsLeftDerivedFunctor‚ÇÑ Œ±'' W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÑ]
  (G : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D‚ÇÑ ‚•§ H)
  (Œ≤ : (((((whiskeringLeft‚ÇÑ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj L‚ÇÑ).obj G ‚ü∂ F)

noncomputable def leftDerived‚ÇÑLift : G ‚ü∂ LF :=
  fullyFaithfulUncurry‚ÇÑ.preimage
    (leftDerivedLift (LF := uncurry‚ÇÑ.obj LF)
      (whiskeringLeft‚ÇÑEquiv Œ±) (W‚ÇÅ.prod (W‚ÇÇ.prod (W‚ÇÉ.prod W‚ÇÑ))) (uncurry‚ÇÑ.obj G)
      (whiskeringLeft‚ÇÑEquiv Œ≤))

@[reassoc (attr := simp)]
lemma leftDerived‚ÇÑ_fac_app_app (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) (X‚ÇÑ : C‚ÇÑ) :
    ((((leftDerived‚ÇÑLift LF Œ± W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÑ G Œ≤).app (L‚ÇÅ.obj X‚ÇÅ)).app (L‚ÇÇ.obj X‚ÇÇ)).app
      (L‚ÇÉ.obj X‚ÇÉ)).app (L‚ÇÑ.obj X‚ÇÑ) ‚â´
      (((Œ±.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ).app X‚ÇÑ = (((Œ≤.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ).app X‚ÇÑ := by
  simpa [leftDerived‚ÇÑLift, fullyFaithfulUncurry‚ÇÑ, Equivalence.fullyFaithfulFunctor] using
    (leftDerived_fac_app (LF := uncurry‚ÇÑ.obj LF)
      (whiskeringLeft‚ÇÑEquiv Œ±) (W‚ÇÅ.prod (W‚ÇÇ.prod (W‚ÇÉ.prod W‚ÇÑ))) (uncurry‚ÇÑ.obj G)
      (whiskeringLeft‚ÇÑEquiv Œ≤)) (X‚ÇÅ, X‚ÇÇ, X‚ÇÉ, X‚ÇÑ)

@[reassoc (attr := simp)]
lemma leftDerived‚ÇÑ_fac :
    (((((whiskeringLeft‚ÇÑ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj L‚ÇÑ).map
      (leftDerived‚ÇÑLift LF Œ± W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÑ G Œ≤) ‚â´ Œ± = Œ≤ := by
  aesop

include W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÑ in
lemma leftDerived‚ÇÑ_ext (G : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D‚ÇÑ ‚•§ H) (Œ≥‚ÇÅ Œ≥‚ÇÇ : G ‚ü∂ LF)
    (hŒ≥ : (((((whiskeringLeft‚ÇÑ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj L‚ÇÑ).map Œ≥‚ÇÅ ‚â´ Œ± =
      (((((whiskeringLeft‚ÇÑ H).obj L‚ÇÅ).obj L‚ÇÇ).obj L‚ÇÉ).obj L‚ÇÑ).map Œ≥‚ÇÇ ‚â´ Œ±) : Œ≥‚ÇÅ = Œ≥‚ÇÇ := by
  apply uncurry‚ÇÑ.map_injective
  apply leftDerived_ext (Œ± := (whiskeringLeft‚ÇÑEquiv Œ±)) (W := W‚ÇÅ.prod (W‚ÇÇ.prod (W‚ÇÉ.prod W‚ÇÑ)))
  ext ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ, X‚ÇÑ‚ü©
  exact congr_app (congr_app (congr_app (congr_app hŒ≥ X‚ÇÅ) X‚ÇÇ) X‚ÇÉ) X‚ÇÑ

end

end Functor

end CategoryTheory
