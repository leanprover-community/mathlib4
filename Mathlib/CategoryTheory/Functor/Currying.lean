/-
Copyright (c) 2017 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison
-/
import Mathlib.CategoryTheory.EqToHom
import Mathlib.CategoryTheory.Products.Basic

/-!
# Curry and uncurry, as functors.

We define `curry : ((C √ó D) ‚•§ E) ‚•§ (C ‚•§ (D ‚•§ E))` and `uncurry : (C ‚•§ (D ‚•§ E)) ‚•§ ((C √ó D) ‚•§ E)`,
and verify that they provide an equivalence of categories
`currying : (C ‚•§ (D ‚•§ E)) ‚âå ((C √ó D) ‚•§ E)`.

-/


namespace CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ v‚ÇÖ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÖ

variable {B : Type u‚ÇÅ} [Category.{v‚ÇÅ} B] {C : Type u‚ÇÇ} [Category.{v‚ÇÇ} C] {D : Type u‚ÇÉ}
  [Category.{v‚ÇÉ} D] {E : Type u‚ÇÑ} [Category.{v‚ÇÑ} E] {H : Type u‚ÇÖ} [Category.{v‚ÇÖ} H]

/-- The uncurrying functor, taking a functor `C ‚•§ (D ‚•§ E)` and producing a functor `(C √ó D) ‚•§ E`.
-/
@[simps]
def uncurry : (C ‚•§ D ‚•§ E) ‚•§ C √ó D ‚•§ E where
  obj F :=
    { obj := fun X => (F.obj X.1).obj X.2
      map := fun {X} {Y} f => (F.map f.1).app X.2 ‚â´ (F.obj Y.1).map f.2
      map_comp := fun f g => by
        simp only [prod_comp_fst, prod_comp_snd, Functor.map_comp, NatTrans.comp_app,
          Category.assoc]
        slice_lhs 2 3 => rw [‚Üê NatTrans.naturality]
        rw [Category.assoc] }
  map T :=
    { app := fun X => (T.app X.1).app X.2
      naturality := fun X Y f => by
        simp only [prod_comp_fst, prod_comp_snd, Category.comp_id, Category.assoc, Functor.map_id,
          Functor.map_comp, NatTrans.id_app, NatTrans.comp_app]
        slice_lhs 2 3 => rw [NatTrans.naturality]
        slice_lhs 1 2 => rw [‚Üê NatTrans.comp_app, NatTrans.naturality, NatTrans.comp_app]
        rw [Category.assoc] }

/-- The object level part of the currying functor. (See `curry` for the functorial version.)
-/
def curryObj (F : C √ó D ‚•§ E) : C ‚•§ D ‚•§ E where
  obj X :=
    { obj := fun Y => F.obj (X, Y)
      map := fun g => F.map (ùüô X, g)
      map_id := fun Y => by simp only [F.map_id]; rw [‚Üê prod_id]; exact F.map_id ‚ü®X,Y‚ü©
      map_comp := fun f g => by simp [‚Üê F.map_comp]}
  map f :=
    { app := fun Y => F.map (f, ùüô Y)
      naturality := fun {Y} {Y'} g => by simp [‚Üê F.map_comp] }
  map_id := fun X => by ext Y; exact F.map_id _
  map_comp := fun f g => by ext Y; dsimp; simp [‚Üê F.map_comp]

/-- The currying functor, taking a functor `(C √ó D) ‚•§ E` and producing a functor `C ‚•§ (D ‚•§ E)`.
-/
@[simps! obj_obj_obj obj_obj_map obj_map_app map_app_app]
def curry : (C √ó D ‚•§ E) ‚•§ C ‚•§ D ‚•§ E where
  obj F := curryObj F
  map T :=
    { app := fun X =>
        { app := fun Y => T.app (X, Y)
          naturality := fun Y Y' g => by
            dsimp [curryObj]
            rw [NatTrans.naturality] }
      naturality := fun X X' f => by
        ext; dsimp [curryObj]
        rw [NatTrans.naturality] }

-- create projection simp lemmas even though this isn't a `{ .. }`.
/-- The equivalence of functor categories given by currying/uncurrying.
-/
@[simps!]
def currying : C ‚•§ D ‚•§ E ‚âå C √ó D ‚•§ E where
  functor := uncurry
  inverse := curry
  unitIso := NatIso.ofComponents (fun _ ‚Ü¶ NatIso.ofComponents
    (fun _ ‚Ü¶ NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _)))
  counitIso := NatIso.ofComponents
    (fun F ‚Ü¶ NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _) (by
      rintro ‚ü®X‚ÇÅ, X‚ÇÇ‚ü© ‚ü®Y‚ÇÅ, Y‚ÇÇ‚ü© ‚ü®f‚ÇÅ, f‚ÇÇ‚ü©
      dsimp at f‚ÇÅ f‚ÇÇ ‚ä¢
      simp only [‚Üê F.map_comp, prod_comp, Category.comp_id, Category.id_comp]))

/-- The functor `uncurry : (C ‚•§ D ‚•§ E) ‚•§ C √ó D ‚•§ E` is fully faithful. -/
def fullyFaithfulUncurry : (uncurry : (C ‚•§ D ‚•§ E) ‚•§ C √ó D ‚•§ E).FullyFaithful :=
  currying.fullyFaithfulFunctor

instance : (uncurry : (C ‚•§ D ‚•§ E) ‚•§ C √ó D ‚•§ E).Full :=
  fullyFaithfulUncurry.full

instance : (uncurry : (C ‚•§ D ‚•§ E) ‚•§ C √ó D ‚•§ E).Faithful :=
  fullyFaithfulUncurry.faithful

/-- Given functors `F‚ÇÅ : C ‚•§ D`, `F‚ÇÇ : C' ‚•§ D'` and `G : D √ó D' ‚•§ E`, this is the isomorphism
between `curry.obj ((F‚ÇÅ.prod F‚ÇÇ).comp G)` and
`F‚ÇÅ ‚ãô curry.obj G ‚ãô (whiskeringLeft C' D' E).obj F‚ÇÇ` in the category `C ‚•§ C' ‚•§ E`. -/
@[simps!]
def curryObjProdComp {C' D' : Type*} [Category C'] [Category D']
    (F‚ÇÅ : C ‚•§ D) (F‚ÇÇ : C' ‚•§ D') (G : D √ó D' ‚•§ E) :
    curry.obj ((F‚ÇÅ.prod F‚ÇÇ).comp G) ‚âÖ
      F‚ÇÅ ‚ãô curry.obj G ‚ãô (whiskeringLeft C' D' E).obj F‚ÇÇ :=
  NatIso.ofComponents (fun X‚ÇÅ ‚Ü¶ NatIso.ofComponents (fun X‚ÇÇ ‚Ü¶ Iso.refl _))

/-- `F.flip` is isomorphic to uncurrying `F`, swapping the variables, and currying. -/
@[simps!]
def flipIsoCurrySwapUncurry (F : C ‚•§ D ‚•§ E) : F.flip ‚âÖ curry.obj (Prod.swap _ _ ‚ãô uncurry.obj F) :=
  NatIso.ofComponents fun d => NatIso.ofComponents fun _ => Iso.refl _

/-- The uncurrying of `F.flip` is isomorphic to
swapping the factors followed by the uncurrying of `F`. -/
@[simps!]
def uncurryObjFlip (F : C ‚•§ D ‚•§ E) : uncurry.obj F.flip ‚âÖ Prod.swap _ _ ‚ãô uncurry.obj F :=
  NatIso.ofComponents fun _ => Iso.refl _

variable (B C D E)

/-- A version of `CategoryTheory.whiskeringRight` for bifunctors, obtained by uncurrying,
applying `whiskeringRight` and currying back
-/
@[simps!]
def whiskeringRight‚ÇÇ : (C ‚•§ D ‚•§ E) ‚•§ (B ‚•§ C) ‚•§ (B ‚•§ D) ‚•§ B ‚•§ E :=
  uncurry ‚ãô
    whiskeringRight _ _ _ ‚ãô (whiskeringLeft _ _ _).obj (prodFunctorToFunctorProd _ _ _) ‚ãô curry

namespace Functor

variable {B C D E}

lemma uncurry_obj_curry_obj (F : B √ó C ‚•§ D) : uncurry.obj (curry.obj F) = F :=
  Functor.ext (by simp) (fun ‚ü®x‚ÇÅ, x‚ÇÇ‚ü© ‚ü®y‚ÇÅ, y‚ÇÇ‚ü© ‚ü®f‚ÇÅ, f‚ÇÇ‚ü© => by
    dsimp
    simp only [‚Üê F.map_comp, Category.id_comp, Category.comp_id, prod_comp])

lemma curry_obj_injective {F‚ÇÅ F‚ÇÇ : C √ó D ‚•§ E} (h : curry.obj F‚ÇÅ = curry.obj F‚ÇÇ) :
    F‚ÇÅ = F‚ÇÇ := by
  rw [‚Üê uncurry_obj_curry_obj F‚ÇÅ, ‚Üê uncurry_obj_curry_obj F‚ÇÇ, h]

lemma curry_obj_uncurry_obj (F : B ‚•§ C ‚•§ D) : curry.obj (uncurry.obj F) = F :=
  Functor.ext (fun _ => Functor.ext (by simp) (by simp)) (by aesop_cat)

lemma uncurry_obj_injective {F‚ÇÅ F‚ÇÇ : B ‚•§ C ‚•§ D} (h : uncurry.obj F‚ÇÅ = uncurry.obj F‚ÇÇ) :
    F‚ÇÅ = F‚ÇÇ := by
  rw [‚Üê curry_obj_uncurry_obj F‚ÇÅ, ‚Üê curry_obj_uncurry_obj F‚ÇÇ, h]

lemma flip_flip (F : B ‚•§ C ‚•§ D) : F.flip.flip = F := rfl

lemma flip_injective {F‚ÇÅ F‚ÇÇ : B ‚•§ C ‚•§ D} (h : F‚ÇÅ.flip = F‚ÇÇ.flip) :
    F‚ÇÅ = F‚ÇÇ := by
  rw [‚Üê flip_flip F‚ÇÅ, ‚Üê flip_flip F‚ÇÇ, h]

lemma uncurry_obj_curry_obj_flip_flip (F‚ÇÅ : B ‚•§ C) (F‚ÇÇ : D ‚•§ E) (G : C √ó E ‚•§ H) :
    uncurry.obj (F‚ÇÇ ‚ãô (F‚ÇÅ ‚ãô curry.obj G).flip).flip = (F‚ÇÅ.prod F‚ÇÇ) ‚ãô G :=
  Functor.ext (by simp) (fun ‚ü®x‚ÇÅ, x‚ÇÇ‚ü© ‚ü®y‚ÇÅ, y‚ÇÇ‚ü© ‚ü®f‚ÇÅ, f‚ÇÇ‚ü© => by
    dsimp
    simp only [Category.id_comp, Category.comp_id, ‚Üê G.map_comp, prod_comp])

lemma uncurry_obj_curry_obj_flip_flip' (F‚ÇÅ : B ‚•§ C) (F‚ÇÇ : D ‚•§ E) (G : C √ó E ‚•§ H) :
    uncurry.obj (F‚ÇÅ ‚ãô (F‚ÇÇ ‚ãô (curry.obj G).flip).flip) = (F‚ÇÅ.prod F‚ÇÇ) ‚ãô G :=
  Functor.ext (by simp) (fun ‚ü®x‚ÇÅ, x‚ÇÇ‚ü© ‚ü®y‚ÇÅ, y‚ÇÇ‚ü© ‚ü®f‚ÇÅ, f‚ÇÇ‚ü© => by
    dsimp
    simp only [Category.id_comp, Category.comp_id, ‚Üê G.map_comp, prod_comp])

end Functor

end CategoryTheory
