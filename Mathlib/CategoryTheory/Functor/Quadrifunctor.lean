/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Functor.Trifunctor
import Mathlib.CategoryTheory.Functor.CurryingThree
import Mathlib.CategoryTheory.Whiskering

/-!
# Quatrifunctors

-/

namespace CategoryTheory

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ C‚ÇÑ C‚ÇÅ‚ÇÇ‚ÇÉ C‚ÇÇ‚ÇÉ‚ÇÑ C D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ E : Type*}
  [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ] [Category C‚ÇÅ‚ÇÇ‚ÇÉ]
  [Category C‚ÇÑ] [Category C‚ÇÇ‚ÇÉ‚ÇÑ] [Category C]
  [Category D‚ÇÅ] [Category D‚ÇÇ] [Category D‚ÇÉ] [Category D‚ÇÑ] [Category E]

@[simps!]
def trifunctorComp‚ÇÅ‚ÇÇ‚ÇÉ (F‚ÇÅ‚ÇÇ‚ÇÉ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÅ‚ÇÇ‚ÇÉ) (G : C‚ÇÅ‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ ‚•§ C) :
    C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ C :=
  (Functor.postcompose‚ÇÉ.obj G).obj F‚ÇÅ‚ÇÇ‚ÇÉ

@[simps!]
def trifunctorComp‚ÇÇ‚ÇÉ‚ÇÑ (F : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ‚ÇÑ ‚•§ C) (G‚ÇÇ‚ÇÉ‚ÇÑ : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ C‚ÇÇ‚ÇÉ‚ÇÑ) :
    C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ C :=
  (F ‚ãô Functor.postcompose‚ÇÉ).flip.obj G‚ÇÇ‚ÇÉ‚ÇÑ

variable (E)

/-- Auxiliary definition for `whiskeringLeft‚ÇÑ`. -/
@[simps!]
def whiskeringLeft‚ÇÑObjObjObjObj (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (F‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ) (F‚ÇÑ : C‚ÇÑ ‚•§ D‚ÇÑ) :
    (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D‚ÇÑ ‚•§ E) ‚•§ C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E :=
  (whiskeringRight _ _ _).obj ((((whiskeringLeft‚ÇÉ E).obj F‚ÇÇ).obj F‚ÇÉ).obj F‚ÇÑ) ‚ãô
    (whiskeringLeft C‚ÇÅ D‚ÇÅ _).obj F‚ÇÅ

/-- Auxiliary definition for `whiskeringLeft‚ÇÑ`. -/
@[simps]
def whiskeringLeft‚ÇÑObjObjObjMap (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (F‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ)
    {F‚ÇÑ F‚ÇÑ' : C‚ÇÑ ‚•§ D‚ÇÑ} (œÑ‚ÇÑ : F‚ÇÑ ‚ü∂ F‚ÇÑ') :
    whiskeringLeft‚ÇÑObjObjObjObj E F‚ÇÅ F‚ÇÇ F‚ÇÉ F‚ÇÑ ‚ü∂
      whiskeringLeft‚ÇÑObjObjObjObj E F‚ÇÅ F‚ÇÇ F‚ÇÉ F‚ÇÑ' where
  app F := whiskerLeft _ (whiskerLeft _ ((((whiskeringLeft‚ÇÉ E).obj F‚ÇÇ).obj F‚ÇÉ).map œÑ‚ÇÑ))

variable (C‚ÇÑ D‚ÇÑ) in
/-- Auxiliary definition for `whiskeringLeft‚ÇÑ`. -/
@[simps]
def whiskeringLeft‚ÇÑObjObjObj (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (F‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ) :
    (C‚ÇÑ ‚•§ D‚ÇÑ) ‚•§ (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D‚ÇÑ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E) where
  obj F‚ÇÑ := whiskeringLeft‚ÇÑObjObjObjObj E F‚ÇÅ F‚ÇÇ F‚ÇÉ F‚ÇÑ
  map œÑ‚ÇÑ := whiskeringLeft‚ÇÑObjObjObjMap E F‚ÇÅ F‚ÇÇ F‚ÇÉ œÑ‚ÇÑ

variable (C‚ÇÑ D‚ÇÑ) in
/-- Auxiliary definition for `whiskeringLeft‚ÇÉ`. -/
@[simps]
def whiskeringLeft‚ÇÑObjObjMap (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) {F‚ÇÉ F‚ÇÉ' : C‚ÇÉ ‚•§ D‚ÇÉ} (œÑ‚ÇÉ : F‚ÇÉ ‚ü∂ F‚ÇÉ') :
    whiskeringLeft‚ÇÑObjObjObj C‚ÇÑ D‚ÇÑ E F‚ÇÅ F‚ÇÇ F‚ÇÉ ‚ü∂ whiskeringLeft‚ÇÑObjObjObj C‚ÇÑ D‚ÇÑ E F‚ÇÅ F‚ÇÇ F‚ÇÉ' where
  app F‚ÇÑ := whiskerRight ((whiskeringRight _ _ _).map
    ((((whiskeringLeft‚ÇÉ E).obj F‚ÇÇ).map œÑ‚ÇÉ).app F‚ÇÑ)) _

variable (C‚ÇÉ C‚ÇÑ D‚ÇÉ D‚ÇÑ) in
/-- Auxiliary definition for `whiskeringLeft‚ÇÑ`. -/
@[simps]
def whiskeringLeft‚ÇÑObjObj (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) :
    (C‚ÇÉ ‚•§ D‚ÇÉ) ‚•§ (C‚ÇÑ ‚•§ D‚ÇÑ) ‚•§ (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D‚ÇÑ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E) where
  obj F‚ÇÉ := whiskeringLeft‚ÇÑObjObjObj C‚ÇÑ D‚ÇÑ E F‚ÇÅ F‚ÇÇ F‚ÇÉ
  map œÑ‚ÇÉ := whiskeringLeft‚ÇÑObjObjMap C‚ÇÑ D‚ÇÑ E F‚ÇÅ F‚ÇÇ œÑ‚ÇÉ

variable (C‚ÇÉ C‚ÇÑ D‚ÇÉ D‚ÇÑ) in
/-- Auxiliary definition for `whiskeringLeft‚ÇÉ`. -/
@[simps]
def whiskeringLeft‚ÇÑObjMap (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) {F‚ÇÇ F‚ÇÇ' : C‚ÇÇ ‚•§ D‚ÇÇ} (œÑ‚ÇÇ : F‚ÇÇ ‚ü∂ F‚ÇÇ') :
    whiskeringLeft‚ÇÑObjObj C‚ÇÉ C‚ÇÑ D‚ÇÉ D‚ÇÑ E F‚ÇÅ F‚ÇÇ ‚ü∂ whiskeringLeft‚ÇÑObjObj C‚ÇÉ C‚ÇÑ D‚ÇÉ D‚ÇÑ E F‚ÇÅ F‚ÇÇ' where
  app F‚ÇÉ :=
    { app F‚ÇÑ := whiskerRight ((whiskeringRight _ _ _).map
        ((((whiskeringLeft‚ÇÉ E).map œÑ‚ÇÇ).app F‚ÇÉ).app F‚ÇÑ)) _ }
  naturality F‚ÇÉ F‚ÇÉ' œÑ‚ÇÉ := by
    ext F‚ÇÑ G X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ
    exact congr_app (((G.obj (F‚ÇÅ.obj X‚ÇÅ)).map (œÑ‚ÇÇ.app X‚ÇÇ)).naturality (œÑ‚ÇÉ.app X‚ÇÉ)) (F‚ÇÑ.obj X‚ÇÑ)

variable (C‚ÇÇ C‚ÇÉ C‚ÇÑ D‚ÇÇ D‚ÇÉ D‚ÇÑ) in
/-- Auxiliary definition for `whiskeringLeft‚ÇÑ`. -/
@[simps]
def whiskeringLeft‚ÇÑObj (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) :
    (C‚ÇÇ ‚•§ D‚ÇÇ) ‚•§ (C‚ÇÉ ‚•§ D‚ÇÉ) ‚•§ (C‚ÇÑ ‚•§ D‚ÇÑ) ‚•§ (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D‚ÇÑ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E) where
  obj F‚ÇÇ := whiskeringLeft‚ÇÑObjObj C‚ÇÉ C‚ÇÑ D‚ÇÉ D‚ÇÑ E F‚ÇÅ F‚ÇÇ
  map œÑ‚ÇÇ := whiskeringLeft‚ÇÑObjMap C‚ÇÉ C‚ÇÑ D‚ÇÉ D‚ÇÑ E F‚ÇÅ œÑ‚ÇÇ

set_option maxHeartbeats 800000 in
-- this is slow
variable (C‚ÇÇ C‚ÇÉ C‚ÇÑ D‚ÇÇ D‚ÇÉ D‚ÇÑ) in
/-- Auxiliary definition for `whiskeringLeft‚ÇÑ`. -/
@[simps]
def whiskeringLeft‚ÇÑMap {F‚ÇÅ F‚ÇÅ' : C‚ÇÅ ‚•§ D‚ÇÅ} (œÑ‚ÇÅ : F‚ÇÅ ‚ü∂ F‚ÇÅ') :
    whiskeringLeft‚ÇÑObj C‚ÇÇ C‚ÇÉ C‚ÇÑ D‚ÇÇ D‚ÇÉ D‚ÇÑ E F‚ÇÅ ‚ü∂ whiskeringLeft‚ÇÑObj C‚ÇÇ C‚ÇÉ C‚ÇÑ D‚ÇÇ D‚ÇÉ D‚ÇÑ E F‚ÇÅ' where
  app F‚ÇÇ :=
    { app F‚ÇÉ :=
      { app F‚ÇÑ := whiskerLeft _ ((whiskeringLeft _ _ _).map œÑ‚ÇÅ)
        naturality _ _ _ := by
          ext
          dsimp
          simp only [NatTrans.naturality] }
      naturality F‚ÇÉ F‚ÇÉ' œÑ‚ÇÉ := by
        ext F‚ÇÑ G X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ
        dsimp
        simp only [‚Üê NatTrans.comp_app, NatTrans.naturality] }
  naturality F‚ÇÇ F‚ÇÇ' œÑ‚ÇÇ := by
    ext F‚ÇÉ F‚ÇÑ G X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ
    dsimp
    simp only [‚Üê NatTrans.comp_app, NatTrans.naturality]

/-- The obvious functor
`(C‚ÇÅ ‚•§ D‚ÇÅ) ‚•§ (C‚ÇÇ ‚•§ D‚ÇÇ) ‚•§ (C‚ÇÉ ‚•§ D‚ÇÉ) ‚•§ (C‚ÇÑ ‚•§ D‚ÇÑ) ‚•§ (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D‚ÇÑ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E)`.
-/
@[simps!]
def whiskeringLeft‚ÇÑ :
    (C‚ÇÅ ‚•§ D‚ÇÅ) ‚•§ (C‚ÇÇ ‚•§ D‚ÇÇ) ‚•§ (C‚ÇÉ ‚•§ D‚ÇÉ) ‚•§ (C‚ÇÑ ‚•§ D‚ÇÑ) ‚•§
    (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D‚ÇÑ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E) where
  obj F‚ÇÅ := whiskeringLeft‚ÇÑObj C‚ÇÇ C‚ÇÉ C‚ÇÑ D‚ÇÇ D‚ÇÉ D‚ÇÑ E F‚ÇÅ
  map œÑ‚ÇÅ := whiskeringLeft‚ÇÑMap C‚ÇÇ C‚ÇÉ C‚ÇÑ D‚ÇÇ D‚ÇÉ D‚ÇÑ E œÑ‚ÇÅ

variable {E}

/-- The equivalence of categories `(C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E) ‚âå C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ √ó C‚ÇÑ ‚•§ E`
given by the curryfication of functors in four variables. -/
def currying‚ÇÑ : (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E) ‚âå (C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ √ó C‚ÇÑ ‚•§ E) :=
  currying.trans (currying‚ÇÉ.trans ((prod.associativity C‚ÇÅ C‚ÇÇ (C‚ÇÉ √ó C‚ÇÑ)).congrLeft))

/-- Uncurrying a functor in four variables. -/
abbrev uncurry‚ÇÑ : (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E) ‚•§ C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ √ó C‚ÇÑ ‚•§ E := currying‚ÇÑ.functor

/-- Currying a functor in four variables. -/
abbrev curry‚ÇÑ : (C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ √ó C‚ÇÑ ‚•§ E) ‚•§ C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E := currying‚ÇÑ.inverse

/-- Uncurrying functors in four variables gives a fully faithful functor. -/
def fullyFaithfulUncurry‚ÇÑ :
    (uncurry‚ÇÑ : (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E) ‚•§ (C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ √ó C‚ÇÑ ‚•§ E)).FullyFaithful :=
  currying‚ÇÑ.fullyFaithfulFunctor

@[simp]
lemma curry‚ÇÑ_obj_map_app_app_app (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ √ó C‚ÇÑ ‚•§ E)
    {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) (X‚ÇÑ : C‚ÇÑ):
    ((((curry‚ÇÑ.obj F).map f).app X‚ÇÇ).app X‚ÇÉ).app X‚ÇÑ = F.map ‚ü®f, ùüô X‚ÇÇ, ùüô X‚ÇÉ, ùüô X‚ÇÑ‚ü© := rfl

@[simp]
lemma curry‚ÇÑ_obj_obj_map_app_app (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ √ó C‚ÇÑ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) (X‚ÇÑ : C‚ÇÑ) :
    ((((curry‚ÇÑ.obj F).obj X‚ÇÅ).map f).app X‚ÇÉ).app X‚ÇÑ = F.map ‚ü®ùüô X‚ÇÅ, f, ùüô X‚ÇÉ, ùüô X‚ÇÑ‚ü© := rfl

@[simp]
lemma curry‚ÇÑ_obj_obj_obj_map_app (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ √ó C‚ÇÑ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) {X‚ÇÉ Y‚ÇÉ : C‚ÇÉ} (f : X‚ÇÉ ‚ü∂ Y‚ÇÉ) (X‚ÇÑ : C‚ÇÑ) :
    ((((curry‚ÇÑ.obj F).obj X‚ÇÅ).obj X‚ÇÇ).map f).app X‚ÇÑ = F.map ‚ü®ùüô X‚ÇÅ, ùüô X‚ÇÇ, f, ùüô X‚ÇÑ‚ü© := rfl

@[simp]
lemma curry‚ÇÑ_obj_obj_obj_obj_map (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ √ó C‚ÇÑ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) {X‚ÇÑ Y‚ÇÑ : C‚ÇÑ} (f : X‚ÇÑ ‚ü∂ Y‚ÇÑ) :
    ((((curry‚ÇÑ.obj F).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).map f = F.map ‚ü®ùüô X‚ÇÅ, ùüô X‚ÇÇ, ùüô X‚ÇÉ, f‚ü© := rfl

@[simp]
lemma curry‚ÇÑ_map_app_app_app_app {F G : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ √ó C‚ÇÑ ‚•§ E} (f : F ‚ü∂ G)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) (X‚ÇÑ : C‚ÇÑ) :
    ((((curry‚ÇÑ.map f).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ).app X‚ÇÑ = f.app ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ, X‚ÇÑ‚ü© := rfl

@[simp]
lemma currying‚ÇÑ_unitIso_hom_app_app_app_app_app (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) (X‚ÇÑ : C‚ÇÑ) :
    ((((currying‚ÇÑ.unitIso.hom.app F).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ).app X‚ÇÑ = ùüô _ := by
  simp [currying‚ÇÑ, Equivalence.unit]

@[simp]
lemma currying‚ÇÑ_unitIso_inv_app_app_app_app_app (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) (X‚ÇÑ : C‚ÇÑ) :
    ((((currying‚ÇÑ.unitIso.inv.app F).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ).app X‚ÇÑ = ùüô _ := by
  simp [currying‚ÇÑ, Equivalence.unitInv]
  rfl

@[simp]
lemma uncurry‚ÇÑ_obj_map (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E) {X Y : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ √ó C‚ÇÑ} (f : X ‚ü∂ Y) :
    (uncurry‚ÇÑ.obj F).map f =
      (((((F.map f.1).app X.2.1).app X.2.2.1).app X.2.2.2 ‚â´
        (((F.obj Y.1).map f.2.1).app X.2.2.1).app X.2.2.2) ‚â´
          (((F.obj Y.1).obj Y.2.1).map f.2.2.1).app X.2.2.2) ‚â´
          (((F.obj Y.1).obj Y.2.1).obj Y.2.2.1).map f.2.2.2 := by
  rfl

@[simp]
lemma uncurry‚ÇÑ_map_app {F G : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E} (f : F ‚ü∂ G) (X : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ √ó C‚ÇÑ) :
    (uncurry‚ÇÑ.map f).app X = (((f.app X.1).app X.2.1).app X.2.2.1).app X.2.2.2 := by
  rfl

/-- The "postcomposition" with a functor `E ‚•§ E'` gives a functor
`(E ‚•§ E') ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E) ‚•§ C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E'`. -/
@[simps!]
def Functor.postcompose‚ÇÑ {E' : Type*} [Category E'] :
    (E ‚•§ E') ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E) ‚•§ C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚•§ E' :=
  whiskeringRight C‚ÇÑ _ _ ‚ãô whiskeringRight C‚ÇÉ _ _ ‚ãô whiskeringRight C‚ÇÇ _ _ ‚ãô
    whiskeringRight C‚ÇÅ _ _

end CategoryTheory
