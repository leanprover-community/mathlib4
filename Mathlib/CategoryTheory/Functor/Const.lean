/-
Copyright (c) 2018 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Bhavik Mehta
-/
import Mathlib.CategoryTheory.Opposites

#align_import category_theory.functor.const from "leanprover-community/mathlib"@"dc6c365e751e34d100e80fe6e314c3c3e0fd2988"

/-!
# The constant functor

`const J : C ‚•§ (J ‚•§ C)` is the functor that sends an object `X : C` to the functor `J ‚•§ C` sending
every object in `J` to `X`, and every morphism to `ùüô X`.

When `J` is nonempty, `const` is faithful.

We have `(const J).obj X ‚ãô F ‚âÖ (const J).obj (F.obj X)` for any `F : C ‚•§ D`.
-/


-- declare the `v`'s first; see `CategoryTheory.Category` for an explanation
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open CategoryTheory

namespace CategoryTheory.Functor

variable (J : Type u‚ÇÅ) [Category.{v‚ÇÅ} J]

variable {C : Type u‚ÇÇ} [Category.{v‚ÇÇ} C]

/-- The functor sending `X : C` to the constant functor `J ‚•§ C` sending everything to `X`.
-/
@[simps]
def const : C ‚•§ J ‚•§ C
    where
  obj X :=
    { obj := fun _ => X
      map := fun _ => ùüô X }
  map f := { app := fun _ => f }
#align category_theory.functor.const CategoryTheory.Functor.const

namespace const

open Opposite

variable {J}

/-- The constant functor `J·µí·µñ ‚•§ C·µí·µñ` sending everything to `op X`
is (naturally isomorphic to) the opposite of the constant functor `J ‚•§ C` sending everything to `X`.
-/
@[simps]
def opObjOp (X : C) : (const J·µí·µñ).obj (op X) ‚âÖ ((const J).obj X).op
    where
  hom := { app := fun j => ùüô _ }
  inv := { app := fun j => ùüô _ }
#align category_theory.functor.const.op_obj_op CategoryTheory.Functor.const.opObjOp

/-- The constant functor `J·µí·µñ ‚•§ C` sending everything to `unop X`
is (naturally isomorphic to) the opposite of
the constant functor `J ‚•§ C·µí·µñ` sending everything to `X`.
-/
def opObjUnop (X : C·µí·µñ) : (const J·µí·µñ).obj (unop X) ‚âÖ ((const J).obj X).leftOp
    where
  hom := { app := fun j => ùüô _ }
  inv := { app := fun j => ùüô _ }
#align category_theory.functor.const.op_obj_unop CategoryTheory.Functor.const.opObjUnop

-- Lean needs some help with universes here.
@[simp]
theorem opObjUnop_hom_app (X : C·µí·µñ) (j : J·µí·µñ) : (opObjUnop.{v‚ÇÅ, v‚ÇÇ} X).hom.app j = ùüô _ :=
  rfl
#align category_theory.functor.const.op_obj_unop_hom_app CategoryTheory.Functor.const.opObjUnop_hom_app

@[simp]
theorem opObjUnop_inv_app (X : C·µí·µñ) (j : J·µí·µñ) : (opObjUnop.{v‚ÇÅ, v‚ÇÇ} X).inv.app j = ùüô _ :=
  rfl
#align category_theory.functor.const.op_obj_unop_inv_app CategoryTheory.Functor.const.opObjUnop_inv_app

@[simp]
theorem unop_functor_op_obj_map (X : C·µí·µñ) {j‚ÇÅ j‚ÇÇ : J} (f : j‚ÇÅ ‚ü∂ j‚ÇÇ) :
    (unop ((Functor.op (const J)).obj X)).map f = ùüô (unop X) :=
  rfl
#align category_theory.functor.const.unop_functor_op_obj_map CategoryTheory.Functor.const.unop_functor_op_obj_map

end const

section

variable {D : Type u‚ÇÉ} [Category.{v‚ÇÉ} D]

/-- These are actually equal, of course, but not definitionally equal
  (the equality requires F.map (ùüô _) = ùüô _). A natural isomorphism is
  more convenient than an equality between functors (compare id_to_iso). -/
@[simps]
def constComp (X : C) (F : C ‚•§ D) : (const J).obj X ‚ãô F ‚âÖ (const J).obj (F.obj X)
    where
  hom := { app := fun _ => ùüô _ }
  inv := { app := fun _ => ùüô _ }
#align category_theory.functor.const_comp CategoryTheory.Functor.constComp

/-- If `J` is nonempty, then the constant functor over `J` is faithful. -/
instance [Nonempty J] : Faithful (const J : C ‚•§ J ‚•§ C) where
  map_injective e := NatTrans.congr_app e (Classical.arbitrary J)

end

end CategoryTheory.Functor
