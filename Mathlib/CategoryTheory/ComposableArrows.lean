/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.Nerve

/-!
# Composable arrows

If `C` is a category, the type of `n`-simplices in the nerve of `C` identifies
to the type of functors `Fin (n + 1) ‚•§ C`, which can be thought as families of `n` composable
arrows in `C`. In this file, we introduce and study this category `ComposableArrows C n`
of `n` composable arrows in `C`.

TODO (@joelriou):
* define various constructors for objects, morphisms, isomorphisms in `ComposableArrows C n`
* extensionality lemmas for morphisms
* extensionality lemmas for objects (useful for getting equalities of simplices in `nerve C`)
* construction of `precomp F f : ComposableArrows C (n + 1)` when `F : ComposableArrows C n`
and `f : X ‚ü∂ F.left` with good definitional properties.
* constructors like `mk‚ÇÉ f g h : ComposableArrows C 3` which would take as inputs a certain
number of composable morphisms
* redefine `Arrow C` as `ComposableArrow C 1`?
* construct some elements in `ComposableArrows m (Fin (n + 1))` for small `n`
the precomposition with which shall induce funtors
`ComposableArrows C n ‚•§ ComposableArrows C m` which correspond to simplicial operations
(specifically faces) with good definitional properties (this might be necessary for
up to `n = 7` in order to formalize spectral sequences following Verdier)

-/

namespace CategoryTheory

open Category

variable (C : Type*) [Category C]

/-- `ComposableArrows C n` is the type of functors `Fin (n + 1) ‚•§ C`. -/
abbrev ComposableArrows (n : ‚Ñï) := Fin (n + 1) ‚•§ C

/-- The type of `n`-simplices in the simplicial set `nerve C` is
definitionally equal to `ComposableArrows C n`. -/
lemma nerve_obj_eq_composableArrows (n : ‚Ñï) :
    (nerve C).obj (Opposite.op (SimplexCategory.mk n)) = ComposableArrows C n := rfl

namespace ComposableArrows

variable {C} {n : ‚Ñï}
variable (F G : ComposableArrows C n)

/-- The `i`th object (with `i : ‚Ñï` such that `i ‚â§ n`) of `F : ComposableArrows C n`. -/
@[simp]
abbrev obj' (i : ‚Ñï) (hi : i ‚â§ n := by linarith) : C := F.obj ‚ü®i, by linarith‚ü©

/-- The map `F.obj' i ‚ü∂ F.obj' j` when `F : ComposableArrows C n`, and `i` and `j`
are natural numbers such that `i ‚â§ j ‚â§ n`. -/
@[simp]
abbrev map' (i j : ‚Ñï) (hij : i ‚â§ j := by linarith) (hjn : j ‚â§ n := by linarith) :
  F.obj ‚ü®i, by linarith‚ü© ‚ü∂ F.obj ‚ü®j, by linarith‚ü© := F.map (homOfLE (by
    simp only [Fin.mk_le_mk]
    linarith))

lemma map'_self (i : ‚Ñï) (hi : i ‚â§ n := by linarith) :
    F.map' i i = ùüô _ := F.map_id _

lemma map'_comp (i j k : ‚Ñï) (hij : i ‚â§ j := by linarith)
    (hjk : j ‚â§ k := by linarith) (hk : k ‚â§ n := by linarith) :
    F.map' i k = F.map' i j ‚â´ F.map' j k :=
  F.map_comp _ _

/-- The leftmost object of `F : ComposableArrows C n`. -/
abbrev left := obj' F 0

/-- The rightmost object of `F : ComposableArrows C n`. -/
abbrev right := obj' F n

/-- The canonical map `F.left ‚ü∂ F.right` for `F : ComposableArrows C n`. -/
abbrev hom : F.left ‚ü∂ F.right := map' F 0 n

variable {F G}

/-- The map `F.obj' i ‚ü∂ G.obj' i` induced on `i`th objects by a morphism `F ‚ü∂ G`
in `ComposableArrows C n` when `i` is a natural number such that `i ‚â§ n`. -/
@[simp]
abbrev app' (œÜ : F ‚ü∂ G) (i : ‚Ñï) (hi : i ‚â§ n := by linarith) :
    F.obj' i ‚ü∂ G.obj' i := œÜ.app _

/-- Constructor for `ComposableArrows C 0`. -/
@[simps!]
def mk‚ÇÄ (X : C) : ComposableArrows C 0 := (Functor.const (Fin 1)).obj X

namespace Mk‚ÇÅ

variable (X‚ÇÄ X‚ÇÅ : C)

/-- The map which sends `0 : Fin 2` to `X‚ÇÄ` and `1` to `X‚ÇÅ`. -/
@[simp]
def obj : Fin 2 ‚Üí C
  | ‚ü®0, _‚ü© => X‚ÇÄ
  | ‚ü®1, _‚ü©  => X‚ÇÅ

variable {X‚ÇÄ X‚ÇÅ} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ)

/-- The obvious map `obj X‚ÇÄ X‚ÇÅ i ‚ü∂ obj X‚ÇÄ X‚ÇÅ j` whenever `i j : Fin 2` satisfy `i ‚â§ j`. -/
@[simp]
def map : ‚àÄ (i j : Fin 2) (_ : i ‚â§ j), obj X‚ÇÄ X‚ÇÅ i ‚ü∂ obj X‚ÇÄ X‚ÇÅ j
  | ‚ü®0, _‚ü©, ‚ü®0, _‚ü©, _ => ùüô _
  | ‚ü®0, _‚ü©, ‚ü®1, _‚ü©, _ => f
  | ‚ü®1, _‚ü©, ‚ü®1, _‚ü©, _ => ùüô _

lemma map_id (i : Fin 2) : map f i i (by simp) = ùüô _ :=
  match i with
    | 0 => rfl
    | 1 => rfl

lemma map_comp {i j k : Fin 2} (hij : i ‚â§ j) (hjk : j ‚â§ k) :
    map f i k (hij.trans hjk) = map f i j hij ‚â´ map f j k hjk :=
  match i with
    | 0 =>
        match j with
          | 0 => by rw [map_id, id_comp]
          | 1 => by
              obtain rfl : k = 1 := k.eq_one_of_neq_zero (by rintro rfl; simp at hjk)
              rw [map_id, comp_id]
    | 1 => by
        obtain rfl := j.eq_one_of_neq_zero (by rintro rfl; simp at hij)
        obtain rfl := k.eq_one_of_neq_zero (by rintro rfl; simp at hjk)
        rw [map_id, id_comp]

end Mk‚ÇÅ

/-- Constructor for `ComposableArrows C 1`. -/
@[simps]
def mk‚ÇÅ {X‚ÇÄ X‚ÇÅ : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) : ComposableArrows C 1 where
  obj := Mk‚ÇÅ.obj X‚ÇÄ X‚ÇÅ
  map g := Mk‚ÇÅ.map f _ _ (leOfHom g)
  map_id := Mk‚ÇÅ.map_id f
  map_comp g g' := Mk‚ÇÅ.map_comp f (leOfHom g) (leOfHom g')

end ComposableArrows

end CategoryTheory
