/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Category.Preorder
import Mathlib.CategoryTheory.EqToHom
import Mathlib.CategoryTheory.Functor.Const
import Mathlib.Tactic.FinCases
import Std.Tactic.Omega

/-!
# Composable arrows

If `C` is a category, the type of `n`-simplices in the nerve of `C` identifies
to the type of functors `Fin (n + 1) ‚•§ C`, which can be thought as families of `n` composable
arrows in `C`. In this file, we introduce and study this category `ComposableArrows C n`
of `n` composable arrows in `C`.

If `F : ComposableArrows C n`, we define `F.left` as the leftmost object, `F.right` as the
rightmost object, and `F.hom : F.left ‚ü∂ F.right` is the canonical map.

The most significant definition in this file is the constructor
`F.precomp f : ComposableArrows C (n + 1)` for `F : ComposableArrows C n` and `f : X ‚ü∂ F.left`:
"it shifts `F` towards the right and inserts `f` on the left". This `precomp` has
good definitional properties.

In the namespace `CategoryTheory.ComposableArrows`, we provide constructors
like `mk‚ÇÅ f`, `mk‚ÇÇ f g`, `mk‚ÇÉ f g h` for `ComposableArrows C n` for small `n`.

TODO (@joelriou):
* redefine `Arrow C` as `ComposableArrow C 1`?
* construct some elements in `ComposableArrows m (Fin (n + 1))` for small `n`
the precomposition with which shall induce functors
`ComposableArrows C n ‚•§ ComposableArrows C m` which correspond to simplicial operations
(specifically faces) with good definitional properties (this might be necessary for
up to `n = 7` in order to formalize spectral sequences following Verdier)

-/

namespace CategoryTheory

open Category

variable (C : Type*) [Category C]

/-- `ComposableArrows C n` is the type of functors `Fin (n + 1) ‚•§ C`. -/
abbrev ComposableArrows (n : ‚Ñï) := Fin (n + 1) ‚•§ C

namespace ComposableArrows

variable {C} {n m : ‚Ñï}
variable (F G : ComposableArrows C n)

/-- A wrapper for `omega` which prefaces it with some quick and useful attempts -/
macro "valid" : tactic =>
  `(tactic| first | assumption | apply zero_le | apply le_rfl | transitivity <;> assumption | omega)

/-- The `i`th object (with `i : ‚Ñï` such that `i ‚â§ n`) of `F : ComposableArrows C n`. -/
@[simp]
abbrev obj' (i : ‚Ñï) (hi : i ‚â§ n := by valid) : C := F.obj ‚ü®i, by omega‚ü©

/-- The map `F.obj' i ‚ü∂ F.obj' j` when `F : ComposableArrows C n`, and `i` and `j`
are natural numbers such that `i ‚â§ j ‚â§ n`. -/
@[simp]
abbrev map' (i j : ‚Ñï) (hij : i ‚â§ j := by valid) (hjn : j ‚â§ n := by valid) :
  F.obj ‚ü®i, by omega‚ü© ‚ü∂ F.obj ‚ü®j, by omega‚ü© := F.map (homOfLE (by
    simp only [Fin.mk_le_mk]
    valid))

lemma map'_self (i : ‚Ñï) (hi : i ‚â§ n := by valid) :
    F.map' i i = ùüô _ := F.map_id _

lemma map'_comp (i j k : ‚Ñï) (hij : i ‚â§ j := by valid)
    (hjk : j ‚â§ k := by valid) (hk : k ‚â§ n := by valid) :
    F.map' i k = F.map' i j ‚â´ F.map' j k :=
  F.map_comp _ _

/-- The leftmost object of `F : ComposableArrows C n`. -/
abbrev left := obj' F 0

/-- The rightmost object of `F : ComposableArrows C n`. -/
abbrev right := obj' F n

/-- The canonical map `F.left ‚ü∂ F.right` for `F : ComposableArrows C n`. -/
abbrev hom : F.left ‚ü∂ F.right := map' F 0 n

variable {F G}

/-- The map `F.obj' i ‚ü∂ G.obj' i` induced on `i`th objects by a morphism `F ‚ü∂ G`
in `ComposableArrows C n` when `i` is a natural number such that `i ‚â§ n`. -/
@[simp]
abbrev app' (œÜ : F ‚ü∂ G) (i : ‚Ñï) (hi : i ‚â§ n := by valid) :
    F.obj' i ‚ü∂ G.obj' i := œÜ.app _

@[reassoc]
lemma naturality' (œÜ : F ‚ü∂ G) (i j : ‚Ñï) (hij : i ‚â§ j := by valid)
    (hj : j ‚â§ n := by valid) :
    F.map' i j ‚â´ app' œÜ j = app' œÜ i ‚â´ G.map' i j :=
  œÜ.naturality _

/-- Constructor for `ComposableArrows C 0`. -/
@[simps!]
def mk‚ÇÄ (X : C) : ComposableArrows C 0 := (Functor.const (Fin 1)).obj X

namespace Mk‚ÇÅ

variable (X‚ÇÄ X‚ÇÅ : C)

/-- The map which sends `0 : Fin 2` to `X‚ÇÄ` and `1` to `X‚ÇÅ`. -/
@[simp]
def obj : Fin 2 ‚Üí C
  | ‚ü®0, _‚ü© => X‚ÇÄ
  | ‚ü®1, _‚ü©  => X‚ÇÅ

variable {X‚ÇÄ X‚ÇÅ} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ)

/-- The obvious map `obj X‚ÇÄ X‚ÇÅ i ‚ü∂ obj X‚ÇÄ X‚ÇÅ j` whenever `i j : Fin 2` satisfy `i ‚â§ j`. -/
@[simp]
def map : ‚àÄ (i j : Fin 2) (_ : i ‚â§ j), obj X‚ÇÄ X‚ÇÅ i ‚ü∂ obj X‚ÇÄ X‚ÇÅ j
  | ‚ü®0, _‚ü©, ‚ü®0, _‚ü©, _ => ùüô _
  | ‚ü®0, _‚ü©, ‚ü®1, _‚ü©, _ => f
  | ‚ü®1, _‚ü©, ‚ü®1, _‚ü©, _ => ùüô _

lemma map_id (i : Fin 2) : map f i i (by simp) = ùüô _ :=
  match i with
    | 0 => rfl
    | 1 => rfl

lemma map_comp {i j k : Fin 2} (hij : i ‚â§ j) (hjk : j ‚â§ k) :
    map f i k (hij.trans hjk) = map f i j hij ‚â´ map f j k hjk :=
  match i with
    | 0 =>
        match j with
          | 0 => by rw [map_id, id_comp]
          | 1 => by
              obtain rfl : k = 1 := k.eq_one_of_neq_zero (by rintro rfl; simp at hjk)
              rw [map_id, comp_id]
    | 1 => by
        obtain rfl := j.eq_one_of_neq_zero (by rintro rfl; simp at hij)
        obtain rfl := k.eq_one_of_neq_zero (by rintro rfl; simp at hjk)
        rw [map_id, id_comp]

end Mk‚ÇÅ

/-- Constructor for `ComposableArrows C 1`. -/
@[simps]
def mk‚ÇÅ {X‚ÇÄ X‚ÇÅ : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) : ComposableArrows C 1 where
  obj := Mk‚ÇÅ.obj X‚ÇÄ X‚ÇÅ
  map g := Mk‚ÇÅ.map f _ _ (leOfHom g)
  map_id := Mk‚ÇÅ.map_id f
  map_comp g g' := Mk‚ÇÅ.map_comp f (leOfHom g) (leOfHom g')

/-- Constructor for morphisms `F ‚ü∂ G` in `ComposableArrows C n` which takes as inputs
a family of morphisms `F.obj i ‚ü∂ G.obj i` and the naturality condition only for the
maps in `Fin (n + 1)` given by inequalities of the form `i ‚â§ i + 1`. -/
@[simps]
def homMk {F G : ComposableArrows C n} (app : ‚àÄ i, F.obj i ‚ü∂ G.obj i)
    (w : ‚àÄ (i : ‚Ñï) (hi : i < n), F.map' i (i + 1) ‚â´ app _ = app _ ‚â´ G.map' i (i + 1)) :
    F ‚ü∂ G where
  app := app
  naturality := by
    suffices ‚àÄ (k i j : ‚Ñï) (hj : i + k = j) (hj' : j ‚â§ n),
        F.map' i j ‚â´ app _ = app _ ‚â´ G.map' i j by
      rintro ‚ü®i, hi‚ü© ‚ü®j, hj‚ü© hij
      have hij' := leOfHom hij
      simp only [Fin.mk_le_mk] at hij'
      obtain ‚ü®k, hk‚ü© := Nat.le.dest hij'
      exact this k i j hk (by valid)
    intro k
    induction' k with k hk
    ¬∑ intro i j hj hj'
      simp only [Nat.zero_eq, add_zero] at hj
      obtain rfl := hj
      rw [F.map'_self i, G.map'_self i, id_comp, comp_id]
    ¬∑ intro i j hj hj'
      rw [Nat.succ_eq_add_one, ‚Üê add_assoc] at hj
      subst hj
      rw [F.map'_comp i (i + k) (i + k + 1), G.map'_comp i (i + k) (i + k + 1), assoc,
        w (i + k) (by valid), reassoc_of% (hk i (i + k) rfl (by valid))]

/-- Constructor for isomorphisms `F ‚âÖ G` in `ComposableArrows C n` which takes as inputs
a family of isomorphisms `F.obj i ‚âÖ G.obj i` and the naturality condition only for the
maps in `Fin (n + 1)` given by inequalities of the form `i ‚â§ i + 1`. -/
@[simps]
def isoMk {F G : ComposableArrows C n} (app : ‚àÄ i, F.obj i ‚âÖ G.obj i)
    (w : ‚àÄ (i : ‚Ñï) (hi : i < n),
      F.map' i (i + 1) ‚â´ (app _).hom = (app _).hom ‚â´ G.map' i (i + 1)) :
    F ‚âÖ G where
  hom := homMk (fun i => (app i).hom) w
  inv := homMk (fun i => (app i).inv) (fun i hi => by
    dsimp only
    rw [‚Üê cancel_epi ((app _).hom), ‚Üê reassoc_of% (w i hi), Iso.hom_inv_id, comp_id,
      Iso.hom_inv_id_assoc])

lemma ext {F G : ComposableArrows C n} (h : ‚àÄ i, F.obj i = G.obj i)
    (w : ‚àÄ (i : ‚Ñï) (hi : i < n), F.map' i (i + 1) =
      eqToHom (h _) ‚â´ G.map' i (i + 1) ‚â´ eqToHom (h _).symm) : F = G :=
  Functor.ext_of_iso
    (isoMk (fun i => eqToIso (h i)) (fun i hi => by simp [w i hi])) h (fun i => rfl)

/-- Constructor for morphisms in `ComposableArrows C 0`. -/
@[simps!]
def homMk‚ÇÄ {F G : ComposableArrows C 0} (f : F.obj' 0 ‚ü∂ G.obj' 0) : F ‚ü∂ G :=
  homMk (fun i => match i with
    | ‚ü®0, _‚ü© => f) (fun i hi => by simp at hi)

@[ext]
lemma hom_ext‚ÇÄ {F G : ComposableArrows C 0} {œÜ œÜ' : F ‚ü∂ G}
    (h : app' œÜ 0 = app' œÜ' 0) :
    œÜ = œÜ' := by
  ext i
  fin_cases i
  exact h

/-- Constructor for isomorphisms in `ComposableArrows C 0`. -/
@[simps!]
def isoMk‚ÇÄ {F G : ComposableArrows C 0} (e : F.obj' 0 ‚âÖ G.obj' 0) : F ‚âÖ G where
  hom := homMk‚ÇÄ e.hom
  inv := homMk‚ÇÄ e.inv

lemma ext‚ÇÄ {F G : ComposableArrows C 0} (h : F.obj' 0 = G.obj 0) : F = G :=
  ext (fun i => match i with
    | ‚ü®0, _‚ü© => h) (fun i hi => by simp at hi)

lemma mk‚ÇÄ_surjective (F : ComposableArrows C 0) : ‚àÉ (X : C), F = mk‚ÇÄ X :=
  ‚ü®F.obj' 0, ext‚ÇÄ rfl‚ü©

/-- Constructor for morphisms in `ComposableArrows C 1`. -/
@[simps!]
def homMk‚ÇÅ {F G : ComposableArrows C 1}
    (left : F.obj' 0 ‚ü∂ G.obj' 0) (right : F.obj' 1 ‚ü∂ G.obj' 1)
    (w : F.map' 0 1 ‚â´ right = left ‚â´ G.map' 0 1 := by aesop_cat) :
    F ‚ü∂ G :=
  homMk (fun i => match i with
      | ‚ü®0, _‚ü© => left
      | ‚ü®1, _‚ü© => right) (by
          intro i hi
          obtain rfl : i = 0 := by simpa using hi
          exact w)

@[ext]
lemma hom_ext‚ÇÅ {F G : ComposableArrows C 1} {œÜ œÜ' : F ‚ü∂ G}
    (h‚ÇÄ : app' œÜ 0 = app' œÜ' 0) (h‚ÇÅ : app' œÜ 1 = app' œÜ' 1) :
    œÜ = œÜ' := by
  ext i
  match i with
    | 0 => exact h‚ÇÄ
    | 1 => exact h‚ÇÅ

/-- Constructor for isomorphisms in `ComposableArrows C 1`. -/
@[simps!]
def isoMk‚ÇÅ {F G : ComposableArrows C 1}
    (left : F.obj' 0 ‚âÖ G.obj' 0) (right : F.obj' 1 ‚âÖ G.obj' 1)
    (w : F.map' 0 1 ‚â´ right.hom = left.hom ‚â´ G.map' 0 1 := by aesop_cat) :
    F ‚âÖ G where
  hom := homMk‚ÇÅ left.hom right.hom w
  inv := homMk‚ÇÅ left.inv right.inv (by
    rw [‚Üê cancel_mono right.hom, assoc, assoc, w, right.inv_hom_id, left.inv_hom_id_assoc]
    apply comp_id)

lemma map'_eq_hom‚ÇÅ (F : ComposableArrows C 1) : F.map' 0 1 = F.hom := rfl

lemma ext‚ÇÅ {F G : ComposableArrows C 1}
    (left : F.left = G.left) (right : F.right = G.right)
    (w : F.hom = eqToHom left ‚â´ G.hom ‚â´ eqToHom right.symm) : F = G :=
  Functor.ext_of_iso (isoMk‚ÇÅ (eqToIso left) (eqToIso right) (by simp [map'_eq_hom‚ÇÅ, w]))
    (fun i => by fin_cases i <;> assumption)
    (fun i => by fin_cases i <;> rfl)

lemma mk‚ÇÅ_surjective (X : ComposableArrows C 1) : ‚àÉ (X‚ÇÄ X‚ÇÅ : C) (f : X‚ÇÄ ‚ü∂ X‚ÇÅ), X = mk‚ÇÅ f :=
  ‚ü®_, _, X.map' 0 1, ext‚ÇÅ rfl rfl (by simp)‚ü©

variable (F)

namespace Precomp

variable (X : C)

/-- The map `Fin (n + 1 + 1) ‚Üí C` which "shifts" `F.obj'` to the right and inserts `X` in
the zeroth position. -/
def obj : Fin (n + 1 + 1) ‚Üí C
  | ‚ü®0, _‚ü© => X
  | ‚ü®i + 1, hi‚ü© => F.obj' i

@[simp]
lemma obj_zero : obj F X 0 = X := rfl

@[simp]
lemma obj_one : obj F X 1 = F.obj' 0 := rfl

@[simp]
lemma obj_succ (i : ‚Ñï) (hi : i + 1 < n + 1 + 1) : obj F X ‚ü®i + 1, hi‚ü© = F.obj' i := rfl

variable {X} (f : X ‚ü∂ F.left)

/-- Auxiliary definition for the action on maps of the functor `F.precomp f`.
It sends `0 ‚â§ 1` to `f` and `i + 1 ‚â§ j + 1` to `F.map' i j`. -/
def map : ‚àÄ (i j : Fin (n + 1 + 1)) (_ : i ‚â§ j), obj F X i ‚ü∂ obj F X j
  | ‚ü®0, _‚ü©, ‚ü®0, _‚ü©, _ => ùüô X
  | ‚ü®0, _‚ü©, ‚ü®1, _‚ü©, _ => f
  | ‚ü®0, _‚ü©, ‚ü®j + 2, hj‚ü©, _ => f ‚â´ F.map' 0 (j + 1)
  | ‚ü®i + 1, hi‚ü©, ‚ü®j + 1, hj‚ü©, hij => F.map' i j (by simpa using hij)

@[simp]
lemma map_zero_zero : map F f 0 0 (by simp) = ùüô X := rfl

@[simp]
lemma map_one_one : map F f 1 1 (by simp) = F.map (ùüô _) := rfl

@[simp]
lemma map_zero_one : map F f 0 1 (by simp) = f := rfl

@[simp]
lemma map_zero_one' : map F f 0 ‚ü®0 + 1, by simp‚ü© (by simp) = f := rfl

@[simp]
lemma map_zero_succ_succ (j : ‚Ñï) (hj : j + 2 < n + 1 + 1) :
    map F f 0 ‚ü®j + 2, hj‚ü© (by simp) = f ‚â´ F.map' 0 (j+1) := rfl

@[simp]
lemma map_succ_succ (i j : ‚Ñï) (hi : i + 1 < n + 1 + 1) (hj : j + 1 < n + 1 + 1)
    (hij : i + 1 ‚â§ j + 1) :
    map F f ‚ü®i + 1, hi‚ü© ‚ü®j + 1, hj‚ü© hij = F.map' i j := rfl

@[simp]
lemma map_one_succ (j : ‚Ñï) (hj : j + 1 < n + 1 + 1) :
    map F f 1 ‚ü®j + 1, hj‚ü© (by simp [Fin.le_def]) = F.map' 0 j := rfl

lemma map_id (i : Fin (n + 1 + 1)) : map F f i i (by simp) = ùüô _ := by
  obtain ‚ü®i, hi‚ü© := i
  cases i
  ¬∑ rfl
  ¬∑ apply F.map_id

lemma map_comp {i j k : Fin (n + 1 + 1)} (hij : i ‚â§ j) (hjk : j ‚â§ k) :
    map F f i k (hij.trans hjk) = map F f i j hij ‚â´ map F f j k hjk := by
  obtain ‚ü®i, hi‚ü© := i
  obtain ‚ü®j, hj‚ü© := j
  obtain ‚ü®k, hk‚ü© := k
  cases i
  ¬∑ obtain _ | _ | j := j
    ¬∑ dsimp
      rw [id_comp]
    ¬∑ obtain _ | _ | k := k
      ¬∑ simp at hjk
      ¬∑ dsimp
        rw [F.map_id, comp_id]
      ¬∑ rfl
    ¬∑ obtain _ | _ | k := k
      ¬∑ simp [Fin.ext_iff] at hjk
      ¬∑ simp [Fin.le_def, Nat.succ_eq_add_one] at hjk
      ¬∑ dsimp
        rw [assoc, ‚Üê F.map_comp, homOfLE_comp]
  ¬∑ obtain _ | j := j
    ¬∑ simp [Fin.ext_iff] at hij
    ¬∑ obtain _ | k := k
      ¬∑ simp [Fin.ext_iff] at hjk
      ¬∑ dsimp
        rw [‚Üê F.map_comp, homOfLE_comp]

end Precomp

/-- "Precomposition" of `F : ComposableArrows C n` by a morphism `f : X ‚ü∂ F.left`. -/
@[simps]
def precomp {X : C} (f : X ‚ü∂ F.left) : ComposableArrows C (n + 1) where
  obj := Precomp.obj F X
  map g := Precomp.map F f _ _ (leOfHom g)
  map_id := Precomp.map_id F f
  map_comp g g' := (Precomp.map_comp F f (leOfHom g) (leOfHom g'))

/-- Constructor for `ComposableArrows C 2`. -/
@[simp]
def mk‚ÇÇ {X‚ÇÄ X‚ÇÅ X‚ÇÇ : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) : ComposableArrows C 2 :=
  (mk‚ÇÅ g).precomp f

/-- Constructor for `ComposableArrows C 3`. -/
@[simp]
def mk‚ÇÉ {X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) (h : X‚ÇÇ ‚ü∂ X‚ÇÉ) : ComposableArrows C 3 :=
  (mk‚ÇÇ g h).precomp f

/-- Constructor for `ComposableArrows C 4`. -/
@[simp]
def mk‚ÇÑ {X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) (h : X‚ÇÇ ‚ü∂ X‚ÇÉ) (i : X‚ÇÉ ‚ü∂ X‚ÇÑ) :
    ComposableArrows C 4 :=
  (mk‚ÇÉ g h i).precomp f

/-- Constructor for `ComposableArrows C 5`. -/
@[simp]
def mk‚ÇÖ {X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ X‚ÇÖ : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) (h : X‚ÇÇ ‚ü∂ X‚ÇÉ)
    (i : X‚ÇÉ ‚ü∂ X‚ÇÑ) (j : X‚ÇÑ ‚ü∂ X‚ÇÖ):
    ComposableArrows C 5 :=
  (mk‚ÇÑ g h i j).precomp f

section

variable {X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) (h : X‚ÇÇ ‚ü∂ X‚ÇÉ) (i : X‚ÇÉ ‚ü∂ X‚ÇÑ)

/-! These examples are meant to test the good definitional properties of `precomp`,
and that `dsimp` can see through. -/

example : map' (mk‚ÇÇ f g) 0 1 = f := by dsimp
example : map' (mk‚ÇÇ f g) 1 2 = g := by dsimp
example : map' (mk‚ÇÇ f g) 0 2 = f ‚â´ g := by dsimp
example : (mk‚ÇÇ f g).hom = f ‚â´ g := by dsimp
example : map' (mk‚ÇÇ f g) 0 0 = ùüô _ := by dsimp
example : map' (mk‚ÇÇ f g) 1 1 = ùüô _ := by dsimp
example : map' (mk‚ÇÇ f g) 2 2 = ùüô _ := by dsimp

example : map' (mk‚ÇÉ f g h) 0 1 = f := by dsimp
example : map' (mk‚ÇÉ f g h) 1 2 = g := by dsimp
example : map' (mk‚ÇÉ f g h) 2 3 = h := by dsimp
example : map' (mk‚ÇÉ f g h) 0 3 = f ‚â´ g ‚â´ h := by dsimp
example : (mk‚ÇÉ f g h).hom = f ‚â´ g ‚â´ h := by dsimp
example : map' (mk‚ÇÉ f g h) 0 2 = f ‚â´ g := by dsimp
example : map' (mk‚ÇÉ f g h) 1 3 = g ‚â´ h := by dsimp

end

/-- The map `ComposableArrows C m ‚Üí ComposableArrows C n` obtained by precomposition with
a functor `Fin (n + 1) ‚•§ Fin (m + 1)`. -/
@[simps!]
def whiskerLeft (F : ComposableArrows C m) (Œ¶ : Fin (n + 1) ‚•§ Fin (m + 1)) :
    ComposableArrows C n := Œ¶ ‚ãô F

/-- The functor `ComposableArrows C m ‚•§ ComposableArrows C n` obtained by precomposition with
a functor `Fin (n + 1) ‚•§ Fin (m + 1)`. -/
@[simps!]
def whiskerLeftFunctor (Œ¶ : Fin (n + 1) ‚•§ Fin (m + 1)) :
    ComposableArrows C m ‚•§ ComposableArrows C n where
  obj F := F.whiskerLeft Œ¶
  map f := CategoryTheory.whiskerLeft Œ¶ f

/-- The functor `Fin n ‚•§ Fin (n + 1)` which sends `i` to `i.succ`. -/
@[simps]
def _root_.Fin.succFunctor (n : ‚Ñï) : Fin n ‚•§ Fin (n + 1) where
  obj i := i.succ
  map {i j} hij := homOfLE (Fin.succ_le_succ_iff.2 (leOfHom hij))

/-- The functor `ComposableArrows C (n + 1) ‚•§ ComposableArrows C n` which forgets
the first arrow. -/
@[simps!]
def Œ¥‚ÇÄFunctor : ComposableArrows C (n + 1) ‚•§ ComposableArrows C n :=
  whiskerLeftFunctor (Fin.succFunctor (n + 1))

/-- The `ComposableArrows C n` obtained by forgetting the first arrow. -/
abbrev Œ¥‚ÇÄ (F : ComposableArrows C (n + 1)) := Œ¥‚ÇÄFunctor.obj F

@[simp]
lemma precomp_Œ¥‚ÇÄ {X : C} (f : X ‚ü∂ F.left) : (F.precomp f).Œ¥‚ÇÄ = F := rfl

/-- The functor `Fin n ‚•§ Fin (n + 1)` which sends `i` to `i.castSucc`. -/
@[simps]
def _root_.Fin.castSuccFunctor (n : ‚Ñï) : Fin n ‚•§ Fin (n + 1) where
  obj i := i.castSucc
  map hij := hij

/-- The functor `ComposableArrows C (n + 1) ‚•§ ComposableArrows C n` which forgets
the last arrow. -/
@[simps!]
def Œ¥lastFunctor : ComposableArrows C (n + 1) ‚•§ ComposableArrows C n :=
  whiskerLeftFunctor (Fin.castSuccFunctor (n + 1))

/-- The `ComposableArrows C n` obtained by forgetting the first arrow. -/
abbrev Œ¥last (F : ComposableArrows C (n + 1)) := Œ¥lastFunctor.obj F

section

variable {F G : ComposableArrows C (n + 1)}
  (Œ± : F.obj' 0 ‚ü∂ G.obj' 0)
  (Œ≤ : F.Œ¥‚ÇÄ ‚ü∂ G.Œ¥‚ÇÄ)
  (w : F.map' 0 1 ‚â´ app' Œ≤ 0 = Œ± ‚â´ G.map' 0 1)

/-- Inductive construction of morphisms in `ComposableArrows C (n + 1)`: in order to construct
a morphism `F ‚ü∂ G`, it suffices to provide `Œ± : F.obj' 0 ‚ü∂ G.obj' 0` and `Œ≤ : F.Œ¥‚ÇÄ ‚ü∂ G.Œ¥‚ÇÄ`
such that `F.map' 0 1 ‚â´ app' Œ≤ 0 = Œ± ‚â´ G.map' 0 1`. -/
def homMkSucc : F ‚ü∂ G :=
  homMk
    (fun i => match i with
      | ‚ü®0, _‚ü© => Œ±
      | ‚ü®i + 1, hi‚ü© => app' Œ≤ i)
    (fun i hi => by
      obtain _ | i := i
      ¬∑ exact w
      ¬∑ exact naturality' Œ≤ i (i + 1))

@[simp]
lemma homMkSucc_app_zero : (homMkSucc Œ± Œ≤ w).app 0 = Œ± := rfl

@[simp]
lemma homMkSucc_app_succ (i : ‚Ñï) (hi : i + 1 < n + 1 + 1) :
    (homMkSucc Œ± Œ≤ w).app ‚ü®i + 1, hi‚ü© = app' Œ≤ i := rfl

end

lemma hom_ext_succ {F G : ComposableArrows C (n + 1)} {f g : F ‚ü∂ G}
    (h‚ÇÄ : app' f 0 = app' g 0) (h‚ÇÅ : Œ¥‚ÇÄFunctor.map f = Œ¥‚ÇÄFunctor.map g) : f = g := by
  ext ‚ü®i, hi‚ü©
  obtain _ | i := i
  ¬∑ exact h‚ÇÄ
  ¬∑ rw [Nat.succ_eq_add_one] at hi
    exact congr_app h‚ÇÅ ‚ü®i, by valid‚ü©

/-- Inductive construction of isomorphisms in `ComposableArrows C (n + 1)`: in order to
construct an isomorphism `F ‚âÖ G`, it suffices to provide `Œ± : F.obj' 0 ‚âÖ G.obj' 0` and
`Œ≤ : F.Œ¥‚ÇÄ ‚âÖ G.Œ¥‚ÇÄ` such that `F.map' 0 1 ‚â´ app' Œ≤.hom 0 = Œ±.hom ‚â´ G.map' 0 1`. -/
@[simps]
def isoMkSucc {F G : ComposableArrows C (n + 1)} (Œ± : F.obj' 0 ‚âÖ G.obj' 0)
    (Œ≤ : F.Œ¥‚ÇÄ ‚âÖ G.Œ¥‚ÇÄ) (w : F.map' 0 1 ‚â´ app' Œ≤.hom 0 = Œ±.hom ‚â´ G.map' 0 1) : F ‚âÖ G where
  hom := homMkSucc Œ±.hom Œ≤.hom w
  inv := homMkSucc Œ±.inv Œ≤.inv (by
    rw [‚Üê cancel_epi Œ±.hom, ‚Üê reassoc_of% w, Œ±.hom_inv_id_assoc, Œ≤.hom_inv_id_app]
    dsimp
    rw [comp_id])
  hom_inv_id := by
    apply hom_ext_succ
    ¬∑ simp
    ¬∑ ext ‚ü®i, hi‚ü©
      simp
  inv_hom_id := by
    apply hom_ext_succ
    ¬∑ simp
    ¬∑ ext ‚ü®i, hi‚ü©
      simp

lemma ext_succ {F G : ComposableArrows C (n + 1)} (h‚ÇÄ : F.obj' 0 = G.obj' 0)
    (h : F.Œ¥‚ÇÄ = G.Œ¥‚ÇÄ) (w : F.map' 0 1 = eqToHom h‚ÇÄ ‚â´ G.map' 0 1 ‚â´
      eqToHom (Functor.congr_obj h.symm 0)): F = G := by
  have : ‚àÄ i, F.obj i = G.obj i := by
    intro ‚ü®i, hi‚ü©
    cases' i with i
    ¬∑ exact h‚ÇÄ
    ¬∑ rw [Nat.succ_eq_add_one] at hi
      exact Functor.congr_obj h ‚ü®i, by valid‚ü©
  exact Functor.ext_of_iso (isoMkSucc (eqToIso h‚ÇÄ) (eqToIso h) (by
      rw [w]
      dsimp [app']
      erw [eqToHom_app, assoc, assoc, eqToHom_trans, eqToHom_refl, comp_id])) this (by
    rintro ‚ü®i, hi‚ü©
    dsimp
    cases' i with i
    ¬∑ erw [homMkSucc_app_zero]
    ¬∑ erw [homMkSucc_app_succ]
      dsimp [app']
      erw [eqToHom_app])

lemma precomp_surjective (F : ComposableArrows C (n + 1)) :
    ‚àÉ (F‚ÇÄ : ComposableArrows C n) (X‚ÇÄ : C) (f‚ÇÄ : X‚ÇÄ ‚ü∂ F‚ÇÄ.left), F = F‚ÇÄ.precomp f‚ÇÄ :=
  ‚ü®F.Œ¥‚ÇÄ, _, F.map' 0 1, ext_succ rfl (by simp) (by simp)‚ü©

section

variable
  {f g : ComposableArrows C 2}
    (app‚ÇÄ : f.obj' 0 ‚ü∂ g.obj' 0) (app‚ÇÅ : f.obj' 1 ‚ü∂ g.obj' 1) (app‚ÇÇ : f.obj' 2 ‚ü∂ g.obj' 2)
    (w‚ÇÄ : f.map' 0 1 ‚â´ app‚ÇÅ = app‚ÇÄ ‚â´ g.map' 0 1)
    (w‚ÇÅ : f.map' 1 2 ‚â´ app‚ÇÇ = app‚ÇÅ ‚â´ g.map' 1 2)

/-- Constructor for morphisms in `ComposableArrows C 2`. -/
def homMk‚ÇÇ : f ‚ü∂ g := homMkSucc app‚ÇÄ (homMk‚ÇÅ app‚ÇÅ app‚ÇÇ w‚ÇÅ) w‚ÇÄ

@[simp]
lemma homMk‚ÇÇ_app_zero : (homMk‚ÇÇ app‚ÇÄ app‚ÇÅ app‚ÇÇ w‚ÇÄ w‚ÇÅ).app 0 = app‚ÇÄ := rfl

@[simp]
lemma homMk‚ÇÇ_app_one : (homMk‚ÇÇ app‚ÇÄ app‚ÇÅ app‚ÇÇ w‚ÇÄ w‚ÇÅ).app 1 = app‚ÇÅ := rfl

@[simp]
lemma homMk‚ÇÇ_app_two : (homMk‚ÇÇ app‚ÇÄ app‚ÇÅ app‚ÇÇ w‚ÇÄ w‚ÇÅ).app ‚ü®2, by valid‚ü© = app‚ÇÇ := rfl

end

@[ext]
lemma hom_ext‚ÇÇ {f g : ComposableArrows C 2} {œÜ œÜ' : f ‚ü∂ g}
    (h‚ÇÄ : app' œÜ 0 = app' œÜ' 0) (h‚ÇÅ : app' œÜ 1 = app' œÜ' 1) (h‚ÇÇ : app' œÜ 2 = app' œÜ' 2) :
    œÜ = œÜ' :=
  hom_ext_succ h‚ÇÄ (hom_ext‚ÇÅ h‚ÇÅ h‚ÇÇ)

/-- Constructor for isomorphisms in `ComposableArrows C 2`. -/
@[simps]
def isoMk‚ÇÇ {f g : ComposableArrows C 2}
    (app‚ÇÄ : f.obj' 0 ‚âÖ g.obj' 0) (app‚ÇÅ : f.obj' 1 ‚âÖ g.obj' 1) (app‚ÇÇ : f.obj' 2 ‚âÖ g.obj' 2)
    (w‚ÇÄ : f.map' 0 1 ‚â´ app‚ÇÅ.hom = app‚ÇÄ.hom ‚â´ g.map' 0 1)
    (w‚ÇÅ : f.map' 1 2 ‚â´ app‚ÇÇ.hom = app‚ÇÅ.hom ‚â´ g.map' 1 2) : f ‚âÖ g where
  hom := homMk‚ÇÇ app‚ÇÄ.hom app‚ÇÅ.hom app‚ÇÇ.hom w‚ÇÄ w‚ÇÅ
  inv := homMk‚ÇÇ app‚ÇÄ.inv app‚ÇÅ.inv app‚ÇÇ.inv
    (by rw [‚Üê cancel_epi app‚ÇÄ.hom, ‚Üê reassoc_of% w‚ÇÄ, app‚ÇÅ.hom_inv_id,
      comp_id, app‚ÇÄ.hom_inv_id_assoc])
    (by rw [‚Üê cancel_epi app‚ÇÅ.hom, ‚Üê reassoc_of% w‚ÇÅ, app‚ÇÇ.hom_inv_id,
      comp_id, app‚ÇÅ.hom_inv_id_assoc])

lemma ext‚ÇÇ {f g : ComposableArrows C 2}
    (h‚ÇÄ : f.obj' 0 = g.obj' 0) (h‚ÇÅ : f.obj' 1 = g.obj' 1) (h‚ÇÇ : f.obj' 2 = g.obj' 2)
    (w‚ÇÄ : f.map' 0 1 = eqToHom h‚ÇÄ ‚â´ g.map' 0 1 ‚â´ eqToHom h‚ÇÅ.symm)
    (w‚ÇÅ : f.map' 1 2 = eqToHom h‚ÇÅ ‚â´ g.map' 1 2 ‚â´ eqToHom h‚ÇÇ.symm) : f = g :=
  ext_succ h‚ÇÄ (ext‚ÇÅ h‚ÇÅ h‚ÇÇ w‚ÇÅ) w‚ÇÄ

lemma mk‚ÇÇ_surjective (X : ComposableArrows C 2) :
    ‚àÉ (X‚ÇÄ X‚ÇÅ X‚ÇÇ : C) (f‚ÇÄ : X‚ÇÄ ‚ü∂ X‚ÇÅ) (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ), X = mk‚ÇÇ f‚ÇÄ f‚ÇÅ:=
  ‚ü®_, _, _, X.map' 0 1, X.map' 1 2, ext‚ÇÇ rfl rfl rfl (by simp) (by simp)‚ü©

section

variable
  {f g : ComposableArrows C 3}
  (app‚ÇÄ : f.obj' 0 ‚ü∂ g.obj' 0) (app‚ÇÅ : f.obj' 1 ‚ü∂ g.obj' 1) (app‚ÇÇ : f.obj' 2 ‚ü∂ g.obj' 2)
  (app‚ÇÉ : f.obj' 3 ‚ü∂ g.obj' 3)
  (w‚ÇÄ : f.map' 0 1 ‚â´ app‚ÇÅ = app‚ÇÄ ‚â´ g.map' 0 1)
  (w‚ÇÅ : f.map' 1 2 ‚â´ app‚ÇÇ = app‚ÇÅ ‚â´ g.map' 1 2)
  (w‚ÇÇ : f.map' 2 3 ‚â´ app‚ÇÉ = app‚ÇÇ ‚â´ g.map' 2 3)

/-- Constructor for morphisms in `ComposableArrows C 3`. -/
def homMk‚ÇÉ : f ‚ü∂ g := homMkSucc app‚ÇÄ (homMk‚ÇÇ app‚ÇÅ app‚ÇÇ app‚ÇÉ w‚ÇÅ w‚ÇÇ) w‚ÇÄ

@[simp]
lemma homMk‚ÇÉ_app_zero : (homMk‚ÇÉ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ w‚ÇÄ w‚ÇÅ w‚ÇÇ).app 0 = app‚ÇÄ := rfl

@[simp]
lemma homMk‚ÇÉ_app_one : (homMk‚ÇÉ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ w‚ÇÄ w‚ÇÅ w‚ÇÇ).app 1 = app‚ÇÅ := rfl

@[simp]
lemma homMk‚ÇÉ_app_two : (homMk‚ÇÉ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ w‚ÇÄ w‚ÇÅ w‚ÇÇ).app ‚ü®2, by valid‚ü© = app‚ÇÇ :=
  rfl

@[simp]
lemma homMk‚ÇÉ_app_three : (homMk‚ÇÉ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ w‚ÇÄ w‚ÇÅ w‚ÇÇ).app ‚ü®3, by valid‚ü© = app‚ÇÉ :=
  rfl

end

@[ext]
lemma hom_ext‚ÇÉ {f g : ComposableArrows C 3} {œÜ œÜ' : f ‚ü∂ g}
    (h‚ÇÄ : app' œÜ 0 = app' œÜ' 0) (h‚ÇÅ : app' œÜ 1 = app' œÜ' 1) (h‚ÇÇ : app' œÜ 2 = app' œÜ' 2)
    (h‚ÇÉ : app' œÜ 3 = app' œÜ' 3) :
    œÜ = œÜ' :=
  hom_ext_succ h‚ÇÄ (hom_ext‚ÇÇ h‚ÇÅ h‚ÇÇ h‚ÇÉ)

/-- Constructor for isomorphisms in `ComposableArrows C 3`. -/
@[simps]
def isoMk‚ÇÉ {f g : ComposableArrows C 3}
    (app‚ÇÄ : f.obj' 0 ‚âÖ g.obj' 0) (app‚ÇÅ : f.obj' 1 ‚âÖ g.obj' 1) (app‚ÇÇ : f.obj' 2 ‚âÖ g.obj' 2)
    (app‚ÇÉ : f.obj' 3 ‚âÖ g.obj' 3)
    (w‚ÇÄ : f.map' 0 1 ‚â´ app‚ÇÅ.hom = app‚ÇÄ.hom ‚â´ g.map' 0 1)
    (w‚ÇÅ : f.map' 1 2 ‚â´ app‚ÇÇ.hom = app‚ÇÅ.hom ‚â´ g.map' 1 2)
    (w‚ÇÇ : f.map' 2 3 ‚â´ app‚ÇÉ.hom = app‚ÇÇ.hom ‚â´ g.map' 2 3) : f ‚âÖ g where
  hom := homMk‚ÇÉ app‚ÇÄ.hom app‚ÇÅ.hom app‚ÇÇ.hom app‚ÇÉ.hom w‚ÇÄ w‚ÇÅ w‚ÇÇ
  inv := homMk‚ÇÉ app‚ÇÄ.inv app‚ÇÅ.inv app‚ÇÇ.inv app‚ÇÉ.inv
    (by rw [‚Üê cancel_epi app‚ÇÄ.hom, ‚Üê reassoc_of% w‚ÇÄ, app‚ÇÅ.hom_inv_id,
      comp_id, app‚ÇÄ.hom_inv_id_assoc])
    (by rw [‚Üê cancel_epi app‚ÇÅ.hom, ‚Üê reassoc_of% w‚ÇÅ, app‚ÇÇ.hom_inv_id,
      comp_id, app‚ÇÅ.hom_inv_id_assoc])
    (by rw [‚Üê cancel_epi app‚ÇÇ.hom, ‚Üê reassoc_of% w‚ÇÇ, app‚ÇÉ.hom_inv_id,
      comp_id, app‚ÇÇ.hom_inv_id_assoc])

lemma ext‚ÇÉ {f g : ComposableArrows C 3}
    (h‚ÇÄ : f.obj' 0 = g.obj' 0) (h‚ÇÅ : f.obj' 1 = g.obj' 1) (h‚ÇÇ : f.obj' 2 = g.obj' 2)
    (h‚ÇÉ : f.obj' 3 = g.obj' 3)
    (w‚ÇÄ : f.map' 0 1 = eqToHom h‚ÇÄ ‚â´ g.map' 0 1 ‚â´ eqToHom h‚ÇÅ.symm)
    (w‚ÇÅ : f.map' 1 2 = eqToHom h‚ÇÅ ‚â´ g.map' 1 2 ‚â´ eqToHom h‚ÇÇ.symm)
    (w‚ÇÇ : f.map' 2 3 = eqToHom h‚ÇÇ ‚â´ g.map' 2 3 ‚â´ eqToHom h‚ÇÉ.symm) : f = g :=
  ext_succ h‚ÇÄ (ext‚ÇÇ h‚ÇÅ h‚ÇÇ h‚ÇÉ w‚ÇÅ w‚ÇÇ) w‚ÇÄ

lemma mk‚ÇÉ_surjective (X : ComposableArrows C 3) :
    ‚àÉ (X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ : C) (f‚ÇÄ : X‚ÇÄ ‚ü∂ X‚ÇÅ) (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ), X = mk‚ÇÉ f‚ÇÄ f‚ÇÅ f‚ÇÇ :=
  ‚ü®_, _, _, _, X.map' 0 1, X.map' 1 2, X.map' 2 3,
    ext‚ÇÉ rfl rfl rfl rfl (by simp) (by simp) (by simp)‚ü©

section

variable
  {f g : ComposableArrows C 4}
  (app‚ÇÄ : f.obj' 0 ‚ü∂ g.obj' 0) (app‚ÇÅ : f.obj' 1 ‚ü∂ g.obj' 1) (app‚ÇÇ : f.obj' 2 ‚ü∂ g.obj' 2)
  (app‚ÇÉ : f.obj' 3 ‚ü∂ g.obj' 3) (app‚ÇÑ : f.obj' 4 ‚ü∂ g.obj' 4)
  (w‚ÇÄ : f.map' 0 1 ‚â´ app‚ÇÅ = app‚ÇÄ ‚â´ g.map' 0 1)
  (w‚ÇÅ : f.map' 1 2 ‚â´ app‚ÇÇ = app‚ÇÅ ‚â´ g.map' 1 2)
  (w‚ÇÇ : f.map' 2 3 ‚â´ app‚ÇÉ = app‚ÇÇ ‚â´ g.map' 2 3)
  (w‚ÇÉ : f.map' 3 4 ‚â´ app‚ÇÑ = app‚ÇÉ ‚â´ g.map' 3 4)

/-- Constructor for morphisms in `ComposableArrows C 4`. -/
def homMk‚ÇÑ : f ‚ü∂ g := homMkSucc app‚ÇÄ (homMk‚ÇÉ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ w‚ÇÅ w‚ÇÇ w‚ÇÉ) w‚ÇÄ

@[simp]
lemma homMk‚ÇÑ_app_zero : (homMk‚ÇÑ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ).app 0 = app‚ÇÄ := rfl

@[simp]
lemma homMk‚ÇÑ_app_one : (homMk‚ÇÑ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ).app 1 = app‚ÇÅ := rfl

@[simp]
lemma homMk‚ÇÑ_app_two :
    (homMk‚ÇÑ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ).app ‚ü®2, by valid‚ü© = app‚ÇÇ := rfl

@[simp]
lemma homMk‚ÇÑ_app_three :
    (homMk‚ÇÑ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ).app ‚ü®3, by valid‚ü© = app‚ÇÉ := rfl

@[simp]
lemma homMk‚ÇÑ_app_four :
    (homMk‚ÇÑ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ).app ‚ü®4, by valid‚ü© = app‚ÇÑ := rfl

end

@[ext]
lemma hom_ext‚ÇÑ {f g : ComposableArrows C 4} {œÜ œÜ' : f ‚ü∂ g}
    (h‚ÇÄ : app' œÜ 0 = app' œÜ' 0) (h‚ÇÅ : app' œÜ 1 = app' œÜ' 1) (h‚ÇÇ : app' œÜ 2 = app' œÜ' 2)
    (h‚ÇÉ : app' œÜ 3 = app' œÜ' 3) (h‚ÇÑ : app' œÜ 4 = app' œÜ' 4) :
    œÜ = œÜ' :=
  hom_ext_succ h‚ÇÄ (hom_ext‚ÇÉ h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ)

lemma map'_inv_eq_inv_map' {n m : ‚Ñï} (h : n+1 ‚â§ m) {f g : ComposableArrows C m}
    (app : f.obj' n ‚âÖ g.obj' n) (app' : f.obj' (n+1) ‚âÖ g.obj' (n+1))
    (w : f.map' n (n+1) ‚â´ app'.hom = app.hom ‚â´ g.map' n (n+1)) :
    map' g n (n+1) ‚â´ app'.inv = app.inv ‚â´ map' f n (n+1) := by
  rw [‚Üê cancel_epi app.hom, ‚Üê reassoc_of% w, app'.hom_inv_id, comp_id, app.hom_inv_id_assoc]

/-- Constructor for isomorphisms in `ComposableArrows C 4`. -/
@[simps]
def isoMk‚ÇÑ {f g : ComposableArrows C 4}
    (app‚ÇÄ : f.obj' 0 ‚âÖ g.obj' 0) (app‚ÇÅ : f.obj' 1 ‚âÖ g.obj' 1) (app‚ÇÇ : f.obj' 2 ‚âÖ g.obj' 2)
    (app‚ÇÉ : f.obj' 3 ‚âÖ g.obj' 3) (app‚ÇÑ : f.obj' 4 ‚âÖ g.obj' 4)
    (w‚ÇÄ : f.map' 0 1 ‚â´ app‚ÇÅ.hom = app‚ÇÄ.hom ‚â´ g.map' 0 1)
    (w‚ÇÅ : f.map' 1 2 ‚â´ app‚ÇÇ.hom = app‚ÇÅ.hom ‚â´ g.map' 1 2)
    (w‚ÇÇ : f.map' 2 3 ‚â´ app‚ÇÉ.hom = app‚ÇÇ.hom ‚â´ g.map' 2 3)
    (w‚ÇÉ : f.map' 3 4 ‚â´ app‚ÇÑ.hom = app‚ÇÉ.hom ‚â´ g.map' 3 4) :
    f ‚âÖ g where
  hom := homMk‚ÇÑ app‚ÇÄ.hom app‚ÇÅ.hom app‚ÇÇ.hom app‚ÇÉ.hom app‚ÇÑ.hom w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ
  inv := homMk‚ÇÑ app‚ÇÄ.inv app‚ÇÅ.inv app‚ÇÇ.inv app‚ÇÉ.inv app‚ÇÑ.inv
    (by rw [map'_inv_eq_inv_map' (by valid) app‚ÇÄ app‚ÇÅ w‚ÇÄ])
    (by rw [map'_inv_eq_inv_map' (by valid) app‚ÇÅ app‚ÇÇ w‚ÇÅ])
    (by rw [map'_inv_eq_inv_map' (by valid) app‚ÇÇ app‚ÇÉ w‚ÇÇ])
    (by rw [map'_inv_eq_inv_map' (by valid) app‚ÇÉ app‚ÇÑ w‚ÇÉ])

lemma ext‚ÇÑ {f g : ComposableArrows C 4}
    (h‚ÇÄ : f.obj' 0 = g.obj' 0) (h‚ÇÅ : f.obj' 1 = g.obj' 1) (h‚ÇÇ : f.obj' 2 = g.obj' 2)
    (h‚ÇÉ : f.obj' 3 = g.obj' 3) (h‚ÇÑ : f.obj' 4 = g.obj' 4)
    (w‚ÇÄ : f.map' 0 1 = eqToHom h‚ÇÄ ‚â´ g.map' 0 1 ‚â´ eqToHom h‚ÇÅ.symm)
    (w‚ÇÅ : f.map' 1 2 = eqToHom h‚ÇÅ ‚â´ g.map' 1 2 ‚â´ eqToHom h‚ÇÇ.symm)
    (w‚ÇÇ : f.map' 2 3 = eqToHom h‚ÇÇ ‚â´ g.map' 2 3 ‚â´ eqToHom h‚ÇÉ.symm)
    (w‚ÇÉ : f.map' 3 4 = eqToHom h‚ÇÉ ‚â´ g.map' 3 4 ‚â´ eqToHom h‚ÇÑ.symm) :
    f = g :=
  ext_succ h‚ÇÄ (ext‚ÇÉ h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ w‚ÇÅ w‚ÇÇ w‚ÇÉ) w‚ÇÄ

lemma mk‚ÇÑ_surjective (X : ComposableArrows C 4) :
    ‚àÉ (X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C) (f‚ÇÄ : X‚ÇÄ ‚ü∂ X‚ÇÅ) (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ X‚ÇÑ),
      X = mk‚ÇÑ f‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ :=
  ‚ü®_, _, _, _, _, X.map' 0 1, X.map' 1 2, X.map' 2 3, X.map' 3 4,
    ext‚ÇÑ rfl rfl rfl rfl rfl (by simp) (by simp) (by simp) (by simp)‚ü©

section

variable
  {f g : ComposableArrows C 5}
  (app‚ÇÄ : f.obj' 0 ‚ü∂ g.obj' 0) (app‚ÇÅ : f.obj' 1 ‚ü∂ g.obj' 1) (app‚ÇÇ : f.obj' 2 ‚ü∂ g.obj' 2)
  (app‚ÇÉ : f.obj' 3 ‚ü∂ g.obj' 3) (app‚ÇÑ : f.obj' 4 ‚ü∂ g.obj' 4) (app‚ÇÖ : f.obj' 5 ‚ü∂ g.obj' 5)
  (w‚ÇÄ : f.map' 0 1 ‚â´ app‚ÇÅ = app‚ÇÄ ‚â´ g.map' 0 1)
  (w‚ÇÅ : f.map' 1 2 ‚â´ app‚ÇÇ = app‚ÇÅ ‚â´ g.map' 1 2)
  (w‚ÇÇ : f.map' 2 3 ‚â´ app‚ÇÉ = app‚ÇÇ ‚â´ g.map' 2 3)
  (w‚ÇÉ : f.map' 3 4 ‚â´ app‚ÇÑ = app‚ÇÉ ‚â´ g.map' 3 4)
  (w‚ÇÑ : f.map' 4 5 ‚â´ app‚ÇÖ = app‚ÇÑ ‚â´ g.map' 4 5)

/-- Constructor for morphisms in `ComposableArrows C 5`. -/
def homMk‚ÇÖ : f ‚ü∂ g := homMkSucc app‚ÇÄ (homMk‚ÇÑ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ app‚ÇÖ w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ) w‚ÇÄ

@[simp]
lemma homMk‚ÇÖ_app_zero : (homMk‚ÇÖ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ app‚ÇÖ w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ).app 0 = app‚ÇÄ := rfl

@[simp]
lemma homMk‚ÇÖ_app_one : (homMk‚ÇÖ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ app‚ÇÖ w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ).app 1 = app‚ÇÅ := rfl

@[simp]
lemma homMk‚ÇÖ_app_two :
    (homMk‚ÇÖ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ app‚ÇÖ w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ).app ‚ü®2, by valid‚ü© = app‚ÇÇ := rfl

@[simp]
lemma homMk‚ÇÖ_app_three :
    (homMk‚ÇÖ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ app‚ÇÖ w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ).app ‚ü®3, by valid‚ü© = app‚ÇÉ := rfl

@[simp]
lemma homMk‚ÇÖ_app_four :
    (homMk‚ÇÖ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ app‚ÇÖ w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ).app ‚ü®4, by valid‚ü© = app‚ÇÑ := rfl

@[simp]
lemma homMk‚ÇÖ_app_five :
    (homMk‚ÇÖ app‚ÇÄ app‚ÇÅ app‚ÇÇ app‚ÇÉ app‚ÇÑ app‚ÇÖ w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ).app ‚ü®5, by valid‚ü© = app‚ÇÖ := rfl

end

@[ext]
lemma hom_ext‚ÇÖ {f g : ComposableArrows C 5} {œÜ œÜ' : f ‚ü∂ g}
    (h‚ÇÄ : app' œÜ 0 = app' œÜ' 0) (h‚ÇÅ : app' œÜ 1 = app' œÜ' 1) (h‚ÇÇ : app' œÜ 2 = app' œÜ' 2)
    (h‚ÇÉ : app' œÜ 3 = app' œÜ' 3) (h‚ÇÑ : app' œÜ 4 = app' œÜ' 4) (h‚ÇÖ : app' œÜ 5 = app' œÜ' 5) :
    œÜ = œÜ' :=
  hom_ext_succ h‚ÇÄ (hom_ext‚ÇÑ h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ h‚ÇÖ)

/-- Constructor for isomorphisms in `ComposableArrows C 5`. -/
@[simps]
def isoMk‚ÇÖ {f g : ComposableArrows C 5}
    (app‚ÇÄ : f.obj' 0 ‚âÖ g.obj' 0) (app‚ÇÅ : f.obj' 1 ‚âÖ g.obj' 1) (app‚ÇÇ : f.obj' 2 ‚âÖ g.obj' 2)
    (app‚ÇÉ : f.obj' 3 ‚âÖ g.obj' 3) (app‚ÇÑ : f.obj' 4 ‚âÖ g.obj' 4) (app‚ÇÖ : f.obj' 5 ‚âÖ g.obj' 5)
    (w‚ÇÄ : f.map' 0 1 ‚â´ app‚ÇÅ.hom = app‚ÇÄ.hom ‚â´ g.map' 0 1)
    (w‚ÇÅ : f.map' 1 2 ‚â´ app‚ÇÇ.hom = app‚ÇÅ.hom ‚â´ g.map' 1 2)
    (w‚ÇÇ : f.map' 2 3 ‚â´ app‚ÇÉ.hom = app‚ÇÇ.hom ‚â´ g.map' 2 3)
    (w‚ÇÉ : f.map' 3 4 ‚â´ app‚ÇÑ.hom = app‚ÇÉ.hom ‚â´ g.map' 3 4)
    (w‚ÇÑ : f.map' 4 5 ‚â´ app‚ÇÖ.hom = app‚ÇÑ.hom ‚â´ g.map' 4 5) :
    f ‚âÖ g where
  hom := homMk‚ÇÖ app‚ÇÄ.hom app‚ÇÅ.hom app‚ÇÇ.hom app‚ÇÉ.hom app‚ÇÑ.hom app‚ÇÖ.hom w‚ÇÄ w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ
  inv := homMk‚ÇÖ app‚ÇÄ.inv app‚ÇÅ.inv app‚ÇÇ.inv app‚ÇÉ.inv app‚ÇÑ.inv app‚ÇÖ.inv
    (by rw [map'_inv_eq_inv_map' (by valid) app‚ÇÄ app‚ÇÅ w‚ÇÄ])
    (by rw [map'_inv_eq_inv_map' (by valid) app‚ÇÅ app‚ÇÇ w‚ÇÅ])
    (by rw [map'_inv_eq_inv_map' (by valid) app‚ÇÇ app‚ÇÉ w‚ÇÇ])
    (by rw [map'_inv_eq_inv_map' (by valid) app‚ÇÉ app‚ÇÑ w‚ÇÉ])
    (by rw [map'_inv_eq_inv_map' (by valid) app‚ÇÑ app‚ÇÖ w‚ÇÑ])

lemma ext‚ÇÖ {f g : ComposableArrows C 5}
    (h‚ÇÄ : f.obj' 0 = g.obj' 0) (h‚ÇÅ : f.obj' 1 = g.obj' 1) (h‚ÇÇ : f.obj' 2 = g.obj' 2)
    (h‚ÇÉ : f.obj' 3 = g.obj' 3) (h‚ÇÑ : f.obj' 4 = g.obj' 4) (h‚ÇÖ : f.obj' 5 = g.obj' 5)
    (w‚ÇÄ : f.map' 0 1 = eqToHom h‚ÇÄ ‚â´ g.map' 0 1 ‚â´ eqToHom h‚ÇÅ.symm)
    (w‚ÇÅ : f.map' 1 2 = eqToHom h‚ÇÅ ‚â´ g.map' 1 2 ‚â´ eqToHom h‚ÇÇ.symm)
    (w‚ÇÇ : f.map' 2 3 = eqToHom h‚ÇÇ ‚â´ g.map' 2 3 ‚â´ eqToHom h‚ÇÉ.symm)
    (w‚ÇÉ : f.map' 3 4 = eqToHom h‚ÇÉ ‚â´ g.map' 3 4 ‚â´ eqToHom h‚ÇÑ.symm)
    (w‚ÇÑ : f.map' 4 5 = eqToHom h‚ÇÑ ‚â´ g.map' 4 5 ‚â´ eqToHom h‚ÇÖ.symm) :
    f = g :=
  ext_succ h‚ÇÄ (ext‚ÇÑ h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ h‚ÇÖ w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ) w‚ÇÄ

lemma mk‚ÇÖ_surjective (X : ComposableArrows C 5) :
    ‚àÉ (X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ X‚ÇÖ : C) (f‚ÇÄ : X‚ÇÄ ‚ü∂ X‚ÇÅ) (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ)
      (f‚ÇÉ : X‚ÇÉ ‚ü∂ X‚ÇÑ) (f‚ÇÑ : X‚ÇÑ ‚ü∂ X‚ÇÖ), X = mk‚ÇÖ f‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ :=
  ‚ü®_, _, _, _, _, _, X.map' 0 1, X.map' 1 2, X.map' 2 3, X.map' 3 4, X.map' 4 5,
    ext‚ÇÖ rfl rfl rfl rfl rfl rfl (by simp) (by simp) (by simp) (by simp) (by simp)‚ü©

/-- The `i`th arrow of `F : ComposableArrows C n`. -/
def arrow (i : ‚Ñï) (hi : i < n := by valid) :
    ComposableArrows C 1 := mk‚ÇÅ (F.map' i (i + 1))

section mkOfObjOfMapSucc

variable (obj : Fin (n + 1) ‚Üí C) (mapSucc : ‚àÄ (i : Fin n), obj i.castSucc ‚ü∂ obj i.succ)

lemma mkOfObjOfMapSucc_exists : ‚àÉ (F : ComposableArrows C n) (e : ‚àÄ i, F.obj i ‚âÖ obj i),
    ‚àÄ (i : ‚Ñï) (hi : i < n), mapSucc ‚ü®i, hi‚ü© =
      (e ‚ü®i, _‚ü©).inv ‚â´ F.map' i (i + 1) ‚â´ (e ‚ü®i + 1, _‚ü©).hom := by
  clear F G
  revert obj mapSucc
  induction' n with n hn
  ¬∑ intro obj _
    exact ‚ü®mk‚ÇÄ (obj 0), fun 0 => Iso.refl _, fun i hi => by simp at hi‚ü©
  ¬∑ intro obj mapSucc
    obtain ‚ü®F, e, h‚ü© := hn (fun i => obj i.succ) (fun i => mapSucc i.succ)
    refine' ‚ü®F.precomp (mapSucc 0 ‚â´ (e 0).inv), fun i => match i with
      | 0 => Iso.refl _
      | ‚ü®i + 1, hi‚ü© => e _, fun i hi => _‚ü©
    obtain _ | i := i
    ¬∑ dsimp
      rw [assoc, Iso.inv_hom_id, comp_id]
      erw [id_comp]
    ¬∑ exact h i (by valid)

/-- Given `obj : Fin (n + 1) ‚Üí C` and `mapSucc i : obj i.castSucc ‚ü∂ obj i.succ`
for all `i : Fin n`, this is `F : ComposableArrows C n` such that `F.obj i` is
definitionally equal to `obj i` and such that `F.map' i (i + 1) = mapSucc ‚ü®i, hi‚ü©`. -/
noncomputable def mkOfObjOfMapSucc : ComposableArrows C n :=
  (mkOfObjOfMapSucc_exists obj mapSucc).choose.copyObj obj
    (mkOfObjOfMapSucc_exists obj mapSucc).choose_spec.choose

@[simp]
lemma mkOfObjOfMapSucc_obj (i : Fin (n + 1)) :
    (mkOfObjOfMapSucc obj mapSucc).obj i = obj i := rfl

lemma mkOfObjOfMapSucc_map_succ (i : ‚Ñï) (hi : i < n := by valid) :
    (mkOfObjOfMapSucc obj mapSucc).map' i (i + 1) = mapSucc ‚ü®i, hi‚ü© :=
  ((mkOfObjOfMapSucc_exists obj mapSucc).choose_spec.choose_spec i hi).symm

lemma mkOfObjOfMapSucc_arrow (i : ‚Ñï) (hi : i < n := by valid) :
    (mkOfObjOfMapSucc obj mapSucc).arrow i = mk‚ÇÅ (mapSucc ‚ü®i, hi‚ü©) :=
  ext‚ÇÅ rfl rfl (by simpa using mkOfObjOfMapSucc_map_succ obj mapSucc i hi)

end mkOfObjOfMapSucc

end ComposableArrows

variable {C}

/-- The functor `ComposableArrows C n ‚•§ ComposableArrows D n` obtained by postcomposition
with a functor `C ‚•§ D`. -/
@[simps!]
def Functor.mapComposableArrows {D : Type*} [Category D] (G : C ‚•§ D) (n : ‚Ñï) :
    ComposableArrows C n ‚•§ ComposableArrows D n :=
  (whiskeringRight _ _ _).obj G

end CategoryTheory
