/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.CategoryTheory.Generator.Coproduct
import Mathlib.CategoryTheory.Limits.FunctorCategory.Basic

/-!
# Generators in the category of presheaves

In this file, we show that if `A` is a category with zero morphisms that
has a separator (and suitable coproducts), then the category of
presheaves `C·µí·µñ ‚•§ A` also has a separator.

-/

universe w v' v u' u

namespace CategoryTheory

open Limits Opposite

namespace Presheaf

variable {C : Type u} [Category.{v} C] {A : Type u'} [Category.{v'} A]
  [HasCoproducts.{v} A]

/-- Given `X : C` and `M : A`, this is the presheaf `C·µí·µñ ‚•§ A` which sends
`Y : C·µí·µñ` to the coproduct of copies of `M` indexed by `Y.unop ‚ü∂ X`. -/
@[simps]
noncomputable def freeYoneda (X : C) (M : A) : C·µí·µñ ‚•§ A where
  obj Y := ‚àê (fun (i : (yoneda.obj X).obj Y) ‚Ü¶ M)
  map f := Sigma.map' ((yoneda.obj X).map f) (fun _ ‚Ü¶ ùüô M)

/-- The bijection `(Presheaf.freeYoneda X M ‚ü∂ F) ‚âÉ (M ‚ü∂ F.obj (op X))`. -/
noncomputable def freeYonedaHomEquiv {X : C} {M : A} {F : C·µí·µñ ‚•§ A} :
    (freeYoneda X M ‚ü∂ F) ‚âÉ (M ‚ü∂ F.obj (op X)) where
  toFun f := Sigma.Œπ (fun (i : (yoneda.obj X).obj _) ‚Ü¶ M) (ùüô _) ‚â´ f.app (op X)
  invFun g :=
    { app Y := Sigma.desc (fun œÜ ‚Ü¶ g ‚â´ F.map œÜ.op)
      naturality _ _ _ := Sigma.hom_ext _ _ (by simp)}
  left_inv f := by
    ext Y
    refine Sigma.hom_ext _ _ (fun œÜ ‚Ü¶ ?_)
    simpa using (Sigma.Œπ _ (ùüô _) ‚â´= f.naturality œÜ.op).symm
  right_inv g := by simp

@[reassoc]
lemma freeYonedaHomEquiv_comp {X : C} {M : A} {F G : C·µí·µñ ‚•§ A}
    (Œ± : freeYoneda X M ‚ü∂ F) (f : F ‚ü∂ G) :
    freeYonedaHomEquiv (Œ± ‚â´ f) = freeYonedaHomEquiv Œ± ‚â´ f.app (op X) := by
  simp [freeYonedaHomEquiv]

@[reassoc]
lemma freeYonedaHomEquiv_symm_comp {X : C} {M : A} {F G : C·µí·µñ ‚•§ A} (Œ± : M ‚ü∂ F.obj (op X))
    (f : F ‚ü∂ G) :
    freeYonedaHomEquiv.symm Œ± ‚â´ f = freeYonedaHomEquiv.symm (Œ± ‚â´ f.app (op X)) := by
  obtain ‚ü®Œ≤, rfl‚ü© := freeYonedaHomEquiv.surjective Œ±
  apply freeYonedaHomEquiv.injective
  simp only [Equiv.symm_apply_apply, freeYonedaHomEquiv_comp, Equiv.apply_symm_apply]

variable (C)

lemma isSeparating {Œπ : Type w} {S : Œπ ‚Üí A} (hS : IsSeparating (Set.range S)) :
    IsSeparating (Set.range (fun (‚ü®X, i‚ü© : C √ó Œπ) ‚Ü¶ freeYoneda X (S i))) := by
  intro F G f g h
  ext ‚ü®X‚ü©
  refine hS _ _ ?_
  rintro _ ‚ü®i, rfl‚ü© Œ±
  apply freeYonedaHomEquiv.symm.injective
  simpa only [freeYonedaHomEquiv_symm_comp] using
    h _ ‚ü®‚ü®X, i‚ü©, rfl‚ü© (freeYonedaHomEquiv.symm Œ±)

lemma isSeparator {Œπ : Type w} {S : Œπ ‚Üí A} (hS : IsSeparating (Set.range S))
    [HasCoproduct (fun (‚ü®X, i‚ü© : C √ó Œπ) ‚Ü¶ freeYoneda X (S i))]
    [HasZeroMorphisms A] :
    IsSeparator (‚àê (fun (‚ü®X, i‚ü© : C √ó Œπ) ‚Ü¶ freeYoneda X (S i))) :=
  (isSeparating C hS).isSeparator_coproduct

variable (A) in
instance hasSeparator [HasSeparator A] [HasZeroMorphisms A] [HasCoproducts.{u} A] :
    HasSeparator (C·µí·µñ ‚•§ A) where
  hasSeparator := ‚ü®_, isSeparator C (S := fun (_ : Unit) ‚Ü¶ separator A)
      (by simpa using isSeparator_separator A)‚ü©

end Presheaf

end CategoryTheory
