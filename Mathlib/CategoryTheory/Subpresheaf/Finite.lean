/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Subpresheaf.OfSection

/-!
# Subpresheaves that are generated by finitely many sections

Given `F : C·µí·µñ ‚•§ Type w`, `G : Subpresheaf F`, objects `X : Œπ ‚Üí C·µí·µñ` and sections
`x : (i : Œπ) ‚Üí F.obj (X i)`, we define a predicate `G.IsGeneratedBy x` saying
that `G` is the subpresheaf generated by the sections `x i`. If this holds for
a finite index type `Œπ`, we say that `G` is "finite", and this gives a type
class `G.IsFinite`.

-/

universe w'' w' w v u

namespace CategoryTheory

open Opposite

variable {C : Type u} [Category.{v} C] {F : C·µí·µñ ‚•§ Type w}

namespace Subpresheaf

variable (G : Subpresheaf F)

section

variable {Œπ : Type w'} {X : Œπ ‚Üí C·µí·µñ} (x : (i : Œπ) ‚Üí F.obj (X i))

/-- A subpresheaf `G : Subpresheaf F` is generated by sections `x i : F.obj (X i)`
if `‚®Ü (i : Œπ), ofSection (x i) = G`. -/
def IsGeneratedBy : Prop := ‚®Ü (i : Œπ), ofSection (x i) = G

lemma isGeneratedBy_iff : G.IsGeneratedBy x ‚Üî ‚®Ü (i : Œπ), ofSection (x i) = G := Iff.rfl

namespace IsGeneratedBy

variable {G x} (h : G.IsGeneratedBy x)
include h

lemma iSup_eq : ‚®Ü (i : Œπ), ofSection (x i) = G := h

lemma ofSection_le (i : Œπ) : ofSection (x i) ‚â§ G := by
  rw [‚Üê h.iSup_eq]
  exact le_iSup (fun i ‚Ü¶ ofSection (x i)) i

lemma mem (i : Œπ) : x i ‚àà G.obj (X i) := by
  rw [‚Üê ofSection_le_iff]
  exact h.ofSection_le i

lemma of_equiv {Œπ' : Type w''} (e : Œπ' ‚âÉ Œπ) :
    G.IsGeneratedBy (fun i' ‚Ü¶ x (e i')) := by
  rw [isGeneratedBy_iff, ‚Üê h.iSup_eq]
  apply le_antisymm
  ¬∑ simp only [iSup_le_iff]
    intro i'
    exact le_iSup (fun i ‚Ü¶ ofSection (x i)) (e i')
  ¬∑ simp only [iSup_le_iff]
    intro i'
    convert (le_iSup (fun i' ‚Ü¶ ofSection (x (e i'))) (e.symm i')) <;> simp

lemma image {F' : C·µí·µñ ‚•§ Type w} (f : F ‚ü∂ F') :
    (G.image f).IsGeneratedBy (fun i ‚Ü¶ f.app _ (x i)) := by
  simp only [isGeneratedBy_iff, ‚Üê h.iSup_eq, image_iSup, ofSection_image]

end IsGeneratedBy

end

/-- A subpresheaf of types is "finite" if it is generated by finitely many sections. -/
class IsFinite : Prop where
  exists_isGeneratedBy :
    ‚àÉ (Œπ : Type) (_ : Finite Œπ) (X : Œπ ‚Üí C·µí·µñ) (x : (i : Œπ) ‚Üí F.obj (X i)),
      Nonempty (G.IsGeneratedBy x)

namespace IsFinite

variable [hG : G.IsFinite]

/-- A choice of index type for the generating sections of a finitely generated subpresheaf. -/
def Index : Type := hG.exists_isGeneratedBy.choose

instance : Finite (Index G) := hG.exists_isGeneratedBy.choose_spec.choose

variable {G}

/-- Objects on which a choice of generating sections of a finitely generated subpresheaf
are defined. -/
noncomputable def X : Index G ‚Üí C·µí·µñ :=
  hG.exists_isGeneratedBy.choose_spec.choose_spec.choose

/-- A choice of generating sections of a finitely generated subpresheaf. -/
noncomputable def x : (i : Index G) ‚Üí F.obj (X i) :=
  hG.exists_isGeneratedBy.choose_spec.choose_spec.choose_spec.choose

end IsFinite

lemma isGeneratedBy_of_isFinite [hG : G.IsFinite] :
    G.IsGeneratedBy (IsFinite.x (G := G)) :=
  hG.exists_isGeneratedBy.choose_spec.choose_spec.choose_spec.choose_spec.some

lemma IsGeneratedBy.isFinite
    {Œπ : Type w'} [Finite Œπ] {X : Œπ ‚Üí C·µí·µñ} {x : (i : Œπ) ‚Üí F.obj (X i)}
    (h : G.IsGeneratedBy x) : G.IsFinite := by
  obtain ‚ü®n, ‚ü®e‚ü©‚ü© := Finite.exists_equiv_fin Œπ
  exact ‚ü®Fin n, inferInstance, _, _, ‚ü®h.of_equiv e.symm‚ü©‚ü©

lemma image_isFinite [G.IsFinite] {F' : C·µí·µñ ‚•§ Type w} (f : F ‚ü∂ F') :
    (G.image f).IsFinite :=
  ((isGeneratedBy_of_isFinite G).image f).isFinite

end Subpresheaf

variable (F)

section

variable {Œπ : Type w'} {X : Œπ ‚Üí C·µí·µñ} (x : (i : Œπ) ‚Üí F.obj (X i))

/-- The condition that a presheaf of types `F : C·µí·µñ ‚•§ Type w` is generated by
a family of sections. -/
abbrev PresheafIsGeneratedBy : Prop := (‚ä§ : Subpresheaf F).IsGeneratedBy x

namespace PresheafIsGeneratedBy

variable {F x} (h : PresheafIsGeneratedBy F x) {F' : C·µí·µñ ‚•§ Type w} (f : F ‚ü∂ F')

include h

lemma range : (Subpresheaf.range f).IsGeneratedBy (fun i ‚Ü¶ f.app _ (x i)) := by
  simpa only [‚Üê Subpresheaf.image_top] using h.image f

lemma of_epi [Epi f] : PresheafIsGeneratedBy F' (fun i ‚Ü¶ f.app _ (x i)) := by
  simpa only [Subpresheaf.range_eq_top f] using h.range f

end PresheafIsGeneratedBy

end

/-- A presheaf is "finite" if it is generated by finitely many sections. -/
abbrev PresheafIsFinite : Prop := (‚ä§ : Subpresheaf F).IsFinite

lemma presheafIsGeneratedBy_of_isFinite [PresheafIsFinite F] :
    PresheafIsGeneratedBy F (Subpresheaf.IsFinite.x (G := ‚ä§)) :=
  (Subpresheaf.isGeneratedBy_of_isFinite (‚ä§ : Subpresheaf F))

lemma Subpresheaf.range_isFinite [PresheafIsFinite F] {F' : C·µí·µñ ‚•§ Type w} (f : F ‚ü∂ F') :
    (Subpresheaf.range f).IsFinite :=
  ((presheafIsGeneratedBy_of_isFinite F).range f).isFinite

lemma presheafIsFinite_of_epi [PresheafIsFinite F] {F' : C·µí·µñ ‚•§ Type w} (f : F ‚ü∂ F') [Epi f] :
    PresheafIsFinite F' :=
  ((presheafIsGeneratedBy_of_isFinite F).of_epi f).isFinite

lemma yoneda_obj_isGeneratedBy (X : C) :
    PresheafIsGeneratedBy (yoneda.obj X) (fun (_ : Unit) ‚Ü¶ ùüô X) := by
  simp only [Subpresheaf.isGeneratedBy_iff]
  ext U u
  simp only [yoneda_obj_obj, Subpresheaf.iSup_obj, Set.iSup_eq_iUnion, Set.mem_iUnion,
    exists_const, Subpresheaf.top_obj, Set.top_eq_univ, Set.mem_univ, iff_true]
  exact ‚ü®u.op, by simp‚ü©

instance (X : C) : PresheafIsFinite (yoneda.obj X) :=
  (yoneda_obj_isGeneratedBy X).isFinite

end CategoryTheory
