/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.CategoryTheory.Elementwise
import Mathlib.CategoryTheory.Limits.FunctorCategory.EpiMono
import Mathlib.Tactic.CategoryTheory.Elementwise
import Mathlib.CategoryTheory.Sites.IsSheafFor


/-!

# Subpresheaf of types

We define the subpresheaf of a type valued presheaf.

## Main results

- `CategoryTheory.Subpresheaf` :
  A subpresheaf of a presheaf of types.

-/


universe w v u

open Opposite CategoryTheory

namespace CategoryTheory

variable {C : Type u} [Category.{v} C]

/-- A subpresheaf of a presheaf consists of a subset of `F.obj U` for every `U`,
compatible with the restriction maps `F.map i`. -/
@[ext]
structure Subpresheaf (F : C·µí·µñ ‚•§ Type w) where
  /-- If `G` is a sub-presheaf of `F`, then the sections of `G` on `U` forms a subset of sections of
    `F` on `U`. -/
  obj : ‚àÄ U, Set (F.obj U)
  /-- If `G` is a sub-presheaf of `F` and `i : U ‚ü∂ V`, then for each `G`-sections on `U` `x`,
    `F i x` is in `F(V)`. -/
  map : ‚àÄ {U V : C·µí·µñ} (i : U ‚ü∂ V), obj U ‚äÜ F.map i ‚Åª¬π' obj V

@[deprecated (since := "2025-01-08")] alias GrothendieckTopology.Subpresheaf := Subpresheaf

variable {F F' F'' : C·µí·µñ ‚•§ Type w} (G G' : Subpresheaf F)

instance : PartialOrder (Subpresheaf F) :=
  PartialOrder.lift Subpresheaf.obj (fun _ _ => Subpresheaf.ext)

instance : Top (Subpresheaf F) :=
  ‚ü®‚ü®fun _ => ‚ä§, @fun U _ _ x _ => by simp‚ü©‚ü©

instance : Nonempty (Subpresheaf F) :=
  inferInstance

/-- The subpresheaf as a presheaf. -/
@[simps!]
def Subpresheaf.toPresheaf : C·µí·µñ ‚•§ Type w where
  obj U := G.obj U
  map := @fun _ _ i x => ‚ü®F.map i x, G.map i x.prop‚ü©
  map_id X := by
    ext ‚ü®x, _‚ü©
    dsimp
    simp only [FunctorToTypes.map_id_apply]
  map_comp := @fun X Y Z i j => by
    ext ‚ü®x, _‚ü©
    dsimp
    simp only [FunctorToTypes.map_comp_apply]

instance {U} : CoeHead (G.toPresheaf.obj U) (F.obj U) where
  coe := Subtype.val

/-- The inclusion of a subpresheaf to the original presheaf. -/
@[simps]
def Subpresheaf.Œπ : G.toPresheaf ‚ü∂ F where app _ x := x

instance : Mono G.Œπ :=
  ‚ü®@fun _ _ _ e =>
    NatTrans.ext <|
      funext fun U => funext fun x => Subtype.ext <| congr_fun (congr_app e U) x‚ü©

/-- The inclusion of a subpresheaf to a larger subpresheaf -/
@[simps]
def Subpresheaf.homOfLe {G G' : Subpresheaf F} (h : G ‚â§ G') : G.toPresheaf ‚ü∂ G'.toPresheaf where
  app U x := ‚ü®x, h U x.prop‚ü©

instance {G G' : Subpresheaf F} (h : G ‚â§ G') : Mono (Subpresheaf.homOfLe h) :=
  ‚ü®fun _ _ e =>
    NatTrans.ext <|
      funext fun U =>
        funext fun x =>
          Subtype.ext <| (congr_arg Subtype.val <| (congr_fun (congr_app e U) x :) :)‚ü©

@[reassoc (attr := simp)]
theorem Subpresheaf.homOfLe_Œπ {G G' : Subpresheaf F} (h : G ‚â§ G') :
    Subpresheaf.homOfLe h ‚â´ G'.Œπ = G.Œπ := by
  ext
  rfl

instance : IsIso (Subpresheaf.Œπ (‚ä§ : Subpresheaf F)) := by
  refine @NatIso.isIso_of_isIso_app _ _ _ _ _ _ _ ?_
  intro X
  rw [isIso_iff_bijective]
  exact ‚ü®Subtype.coe_injective, fun x => ‚ü®‚ü®x, _root_.trivial‚ü©, rfl‚ü©‚ü©

theorem Subpresheaf.eq_top_iff_isIso : G = ‚ä§ ‚Üî IsIso G.Œπ := by
  constructor
  ¬∑ rintro rfl
    infer_instance
  ¬∑ intro H
    ext U x
    apply (iff_of_eq (iff_true _)).mpr
    rw [‚Üê IsIso.inv_hom_id_apply (G.Œπ.app U) x]
    exact ((inv (G.Œπ.app U)) x).2

/-- If the image of a morphism falls in a subpresheaf, then the morphism factors through it. -/
@[simps!]
def Subpresheaf.lift (f : F' ‚ü∂ F) (hf : ‚àÄ U x, f.app U x ‚àà G.obj U) : F' ‚ü∂ G.toPresheaf where
  app U x := ‚ü®f.app U x, hf U x‚ü©
  naturality := by
    have := elementwise_of% f.naturality
    intros
    refine funext fun x => Subtype.ext ?_
    simp only [toPresheaf_obj, types_comp_apply]
    exact this _ _

@[reassoc (attr := simp)]
theorem Subpresheaf.lift_Œπ (f : F' ‚ü∂ F) (hf : ‚àÄ U x, f.app U x ‚àà G.obj U) :
    G.lift f hf ‚â´ G.Œπ = f := by
  ext
  rfl

/-- Given a subpresheaf `G` of `F`, an `F`-section `s` on `U`, we may define a sieve of `U`
consisting of all `f : V ‚ü∂ U` such that the restriction of `s` along `f` is in `G`. -/
@[simps]
def Subpresheaf.sieveOfSection {U : C·µí·µñ} (s : F.obj U) : Sieve (unop U) where
  arrows V f := F.map f.op s ‚àà G.obj (op V)
  downward_closed := @fun V W i hi j => by
    simp only [op_unop, op_comp, FunctorToTypes.map_comp_apply]
    exact G.map _ hi

/-- Given an `F`-section `s` on `U` and a subpresheaf `G`, we may define a family of elements in
`G` consisting of the restrictions of `s` -/
def Subpresheaf.familyOfElementsOfSection {U : C·µí·µñ} (s : F.obj U) :
    (G.sieveOfSection s).1.FamilyOfElements G.toPresheaf := fun _ i hi => ‚ü®F.map i.op s, hi‚ü©

theorem Subpresheaf.family_of_elements_compatible {U : C·µí·µñ} (s : F.obj U) :
    (G.familyOfElementsOfSection s).Compatible := by
  intro Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ e
  refine Subtype.ext ?_ -- Porting note: `ext1` does not work here
  change F.map g‚ÇÅ.op (F.map f‚ÇÅ.op s) = F.map g‚ÇÇ.op (F.map f‚ÇÇ.op s)
  rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, ‚Üê op_comp, e]

theorem Subpresheaf.nat_trans_naturality (f : F' ‚ü∂ G.toPresheaf) {U V : C·µí·µñ} (i : U ‚ü∂ V)
    (x : F'.obj U) : (f.app V (F'.map i x)).1 = F.map i (f.app U x).1 :=
  congr_arg Subtype.val (FunctorToTypes.naturality _ _ f i x)

section Image

/-- The image presheaf of a morphism, whose components are the set-theoretic images. -/
@[simps]
def imagePresheaf (f : F' ‚ü∂ F) : Subpresheaf F where
  obj U := Set.range (f.app U)
  map := by
    rintro U V i _ ‚ü®x, rfl‚ü©
    have := elementwise_of% f.naturality
    exact ‚ü®_, this i x‚ü©

@[simp]
theorem top_subpresheaf_obj (U) : (‚ä§ : Subpresheaf F).obj U = ‚ä§ :=
  rfl

@[simp]
theorem imagePresheaf_id : imagePresheaf (ùüô F) = ‚ä§ := by
  ext
  simp

/-- A morphism factors through the image presheaf. -/
@[simps!]
def toImagePresheaf (f : F' ‚ü∂ F) : F' ‚ü∂ (imagePresheaf f).toPresheaf :=
  (imagePresheaf f).lift f fun _ _ => Set.mem_range_self _

@[reassoc (attr := simp)]
theorem toImagePresheaf_Œπ (f : F' ‚ü∂ F) : toImagePresheaf f ‚â´ (imagePresheaf f).Œπ = f :=
  (imagePresheaf f).lift_Œπ _ _

theorem imagePresheaf_comp_le (f‚ÇÅ : F ‚ü∂ F') (f‚ÇÇ : F' ‚ü∂ F'') :
    imagePresheaf (f‚ÇÅ ‚â´ f‚ÇÇ) ‚â§ imagePresheaf f‚ÇÇ := fun U _ hx => ‚ü®f‚ÇÅ.app U hx.choose, hx.choose_spec‚ü©

instance isIso_toImagePresheaf {F F' : C·µí·µñ ‚•§ Type w} (f : F ‚ü∂ F') [hf : Mono f] :
  IsIso (toImagePresheaf f) := by
  have : ‚àÄ (X : C·µí·µñ), IsIso ((toImagePresheaf f).app X) := by
    intro X
    rw [isIso_iff_bijective]
    constructor
    ¬∑ intro x y e
      have := (NatTrans.mono_iff_mono_app f).mp hf X
      rw [mono_iff_injective] at this
      exact this (congr_arg Subtype.val e :)
    ¬∑ rintro ‚ü®_, ‚ü®x, rfl‚ü©‚ü©
      exact ‚ü®x, rfl‚ü©
  apply NatIso.isIso_of_isIso_app

end Image

end CategoryTheory
