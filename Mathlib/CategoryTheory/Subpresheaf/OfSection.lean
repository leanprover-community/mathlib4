/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Subpresheaf.Image
import Mathlib.CategoryTheory.Yoneda

/-!
# The subpresheaf generated by a section

Given a presheaf of types `F : C·µí·µñ ‚•§ Type w` and a section `x : F.obj X`,
we define `Subpresheaf.ofSection x : Subpresheaf F` as the subpresheaf
of `F` generated by `x`.

-/

universe w v u

namespace CategoryTheory

variable {C : Type u} [Category.{v} C]

namespace Subpresheaf

section

variable {F : C·µí·µñ ‚•§ Type w} {X : C·µí·µñ} (x : F.obj X)

/-- The subpresheaf of `F : C·µí·µñ ‚•§ Type w` that is generated
by a section `x : F.obj X`. -/
@[simps -isSimp]
def ofSection : Subpresheaf F where
  obj U := setOf (fun u ‚Ü¶ ‚àÉ (f : X ‚ü∂ U), F.map f x = u)
  map {U V} g := by
    rintro _ ‚ü®f, rfl‚ü©
    exact ‚ü®f ‚â´ g, by simp‚ü©

lemma mem_ofSection_obj : x ‚àà (ofSection x).obj X := ‚ü®ùüô _, by simp‚ü©

@[simp]
lemma ofSection_le_iff (G : Subpresheaf F) :
    ofSection x ‚â§ G ‚Üî x ‚àà G.obj X := by
  constructor
  ¬∑ intro hx
    exact hx _ (mem_ofSection_obj x)
  ¬∑ rintro hx U _ ‚ü®f, rfl‚ü©
    exact G.map f hx

@[simp]
lemma ofSection_image {F' : C·µí·µñ ‚•§ Type w} (f : F ‚ü∂ F') :
    (ofSection x).image f = ofSection (f.app _ x) := by
  apply le_antisymm
  ¬∑ rw [image_le_iff, ofSection_le_iff, preimage_obj, Set.mem_preimage]
    exact ‚ü®ùüô X, by simp‚ü©
  ¬∑ simp only [ofSection_le_iff, image_obj, Set.mem_image]
    exact ‚ü®x, mem_ofSection_obj x, rfl‚ü©

end

section

variable {F : C·µí·µñ ‚•§ Type v}

lemma ofSection_eq_range {X : C·µí·µñ} (x : F.obj X) :
    ofSection x = range (yonedaEquiv.symm x) := by
  ext U y
  simp only [ofSection_obj, Set.mem_setOf_eq, Opposite.op_unop, range_obj, yoneda_obj_obj,
    Set.mem_range]
  constructor
  ¬∑ rintro ‚ü®f, rfl‚ü©
    exact ‚ü®f.unop, rfl‚ü©
  ¬∑ rintro ‚ü®f, rfl‚ü©
    exact ‚ü®f.op, rfl‚ü©

lemma range_eq_ofSection {X : C} (f : yoneda.obj X ‚ü∂ F) :
    range f = ofSection (yonedaEquiv f) := by
  rw [ofSection_eq_range, Equiv.symm_apply_apply]

end

section

variable {F : C·µí·µñ ‚•§ Type max v w}

lemma ofSection_eq_range' {X : C·µí·µñ} (x : F.obj X) :
    ofSection x = range ((yonedaCompUliftFunctorEquiv F X.unop).symm x) := by
  ext U y
  simp only [Opposite.op_unop, range_obj, Functor.comp_obj, yoneda_obj_obj, uliftFunctor_obj,
    Set.mem_range, ULift.exists]
  constructor
  ¬∑ rintro ‚ü®f, rfl‚ü©
    exact ‚ü®f.unop, rfl‚ü©
  ¬∑ rintro ‚ü®f, rfl‚ü©
    exact ‚ü®f.op, rfl‚ü©

lemma range_eq_ofSection' {X : C} (f : yoneda.obj X ‚ãô uliftFunctor.{w} ‚ü∂ F) :
    range f = ofSection ((yonedaCompUliftFunctorEquiv F X) f) := by
  rw [ofSection_eq_range', Equiv.symm_apply_apply]

end

end Subpresheaf

end CategoryTheory
