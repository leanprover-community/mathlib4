/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.MorphismProperty.Basic

/-!
# The factorization axiom

In this file, we introduce a type-class `HasFactorization W‚ÇÅ W‚ÇÇ`, which, given
two classes of morphisms `W‚ÇÅ` and `W‚ÇÇ` in a category `C`, asserts that any morphism
in `C` can be factored as a morphism in `W‚ÇÅ` followed by a morphism in `W‚ÇÇ`. The data
of such factorizations can be packaged in the type `FactorizationData W‚ÇÅ W‚ÇÇ`.

This shall be used in the formalization of model categories for which the CM5 axiom
asserts that any morphism can be factored as a cofibration followed by a trivial
fibration (or a trivial cofibration followed by a fibration).

We also provide a structure `FunctorialFactorizationData W‚ÇÅ W‚ÇÇ` which contains
the data of a functorial factorization as above. With this design, when we
formalize certain constructions (e.g. cylinder objects in model categories),
we may first construct them using using `data : FactorizationData W‚ÇÅ W‚ÇÇ`.
Without duplication of code, it shall be possible to show these cylinders
are functorial when a term `data : FunctorialFactorizationData W‚ÇÅ W‚ÇÇ` is available,
the existence of which is asserted in the type-class `HasFunctorialFactorization W‚ÇÅ W‚ÇÇ`.

We also introduce the class `W‚ÇÅ.comp W‚ÇÇ` of morphisms of the form `i ‚â´ p` with `W‚ÇÅ i`
and `W‚ÇÇ p` and show that `W‚ÇÅ.comp W‚ÇÇ = ‚ä§` iff `HasFactorization W‚ÇÅ W‚ÇÇ` holds (this
is `MorphismProperty.comp_eq_top_iff`).

-/

namespace CategoryTheory

namespace MorphismProperty

variable {C : Type*} [Category C] (W‚ÇÅ W‚ÇÇ : MorphismProperty C)

/-- Given two classes of morphisms `W‚ÇÅ` and `W‚ÇÇ` on a category `C`, this is
the data of the factorization of a morphism `f : X ‚ü∂ Y` as `i ‚â´ p` with
`W‚ÇÅ i` and `W‚ÇÇ p`. -/
structure MapFactorizationData {X Y : C} (f : X ‚ü∂ Y) where
  /-- the intermediate object in the factorization -/
  Z : C
  /-- the first morphism in the factorization -/
  i : X ‚ü∂ Z
  /-- the second morphism in the factorization -/
  p : Z ‚ü∂ Y
  fac : i ‚â´ p = f := by aesop_cat
  hi : W‚ÇÅ i
  hp : W‚ÇÇ p

attribute [reassoc (attr := simp)] MapFactorizationData.fac

/-- The data of a term in `MapFactorizationData W‚ÇÅ W‚ÇÇ f` for any morphism `f`. -/
abbrev FactorizationData := ‚àÄ {X Y : C} (f : X ‚ü∂ Y), MapFactorizationData W‚ÇÅ W‚ÇÇ f

/-- The factorization axiom for two classes of morphisms `W‚ÇÅ` and `W‚ÇÇ` in a category `C`. It
asserts that any morphism can be factored as a morphism in `W‚ÇÅ` followed by a morphism
in `W‚ÇÇ`. -/
class HasFactorization : Prop where
  nonempty_mapFactorizationData {X Y : C} (f : X ‚ü∂ Y) : Nonempty (MapFactorizationData W‚ÇÅ W‚ÇÇ f)

/-- A chosen term in `FactorizationData W‚ÇÅ W‚ÇÇ` when `HasFactorization W‚ÇÅ W‚ÇÇ` holds. -/
noncomputable def factorizationData [HasFactorization W‚ÇÅ W‚ÇÇ] : FactorizationData W‚ÇÅ W‚ÇÇ :=
  fun _ => Nonempty.some (HasFactorization.nonempty_mapFactorizationData _)

/-- The class of morphisms that are of the form `i ‚â´ p` with `W‚ÇÅ i` and `W‚ÇÇ p`. -/
def comp : MorphismProperty C := fun _ _ f => Nonempty (MapFactorizationData W‚ÇÅ W‚ÇÇ f)

lemma comp_eq_top_iff : W‚ÇÅ.comp W‚ÇÇ = ‚ä§ ‚Üî HasFactorization W‚ÇÅ W‚ÇÇ := by
  constructor
  ¬∑ intro h
    refine ‚ü®fun f => ?_‚ü©
    have : W‚ÇÅ.comp W‚ÇÇ f := by simp only [h, top_apply]
    exact ‚ü®this.some‚ü©
  ¬∑ intro
    ext X Y f
    simp only [top_apply, iff_true]
    exact ‚ü®factorizationData W‚ÇÅ W‚ÇÇ f‚ü©

/-- The data of a functorial factorization of any morphism in `C` as a morphism in `W‚ÇÅ`
followed by a morphism in `W‚ÇÇ`. -/
structure FunctorialFactorizationData where
  /-- the intermediate objects in the factorizations -/
  Z : Arrow C ‚•§ C
  /-- the first morphism in the factorizations -/
  i : Arrow.leftFunc ‚ü∂ Z
  /-- the second morphism in the factorizations -/
  p : Z ‚ü∂ Arrow.rightFunc
  fac : i ‚â´ p = Arrow.leftToRight := by aesop_cat
  hi (f : Arrow C) : W‚ÇÅ (i.app f)
  hp (f : Arrow C) : W‚ÇÇ (p.app f)

namespace FunctorialFactorizationData

variable {W‚ÇÅ W‚ÇÇ}
variable (data : FunctorialFactorizationData W‚ÇÅ W‚ÇÇ)

attribute [reassoc (attr := simp)] fac

@[reassoc (attr := simp)]
lemma fac_app {f : Arrow C} : data.i.app f ‚â´ data.p.app f = f.hom := by
  rw [‚Üê NatTrans.comp_app, fac,Arrow.leftToRight_app]

/-- If `W‚ÇÅ ‚â§ W‚ÇÅ'` and `W‚ÇÇ ‚â§ W‚ÇÇ'`, then a functorial factorization for `W‚ÇÅ` and `W‚ÇÇ` induces
a functorial factorization for `W‚ÇÅ'` and `W‚ÇÇ'`. -/
def ofLE {W‚ÇÅ' W‚ÇÇ' : MorphismProperty C} (le‚ÇÅ : W‚ÇÅ ‚â§ W‚ÇÅ') (le‚ÇÇ : W‚ÇÇ ‚â§ W‚ÇÇ') :
    FunctorialFactorizationData W‚ÇÅ' W‚ÇÇ' where
  Z := data.Z
  i := data.i
  p := data.p
  hi f := le‚ÇÅ _ (data.hi f)
  hp f := le‚ÇÇ _ (data.hp f)

/-- The term in `FactorizationData W‚ÇÅ W‚ÇÇ` that is deduced from a functorial factorization. -/
def factorizationData : FactorizationData W‚ÇÅ W‚ÇÇ := fun f =>
  { i := data.i.app (Arrow.mk f)
    p := data.p.app (Arrow.mk f)
    hi := data.hi _
    hp := data.hp _ }

section

variable {X Y X' Y' : C} {f : X ‚ü∂ Y} {g : X' ‚ü∂ Y'} (œÜ : Arrow.mk f ‚ü∂ Arrow.mk g)

/-- When `data : FunctorialFactorizationData W‚ÇÅ W‚ÇÇ`, this is the
morphism `(data.factorizationData f).Z ‚ü∂ (data.factorizationData g).Z` expressing the
functoriality of the intermediate objects of the factorizations
for `œÜ : Arrow.mk f ‚ü∂ Arrow.mk g`. -/
def mapZ : (data.factorizationData f).Z ‚ü∂ (data.factorizationData g).Z := data.Z.map œÜ

@[reassoc (attr := simp)]
lemma i_mapZ :
    (data.factorizationData f).i ‚â´ data.mapZ œÜ = œÜ.left ‚â´ (data.factorizationData g).i :=
  (data.i.naturality œÜ).symm

@[reassoc (attr := simp)]
lemma mapZ_p :
    data.mapZ œÜ ‚â´ (data.factorizationData g).p = (data.factorizationData f).p ‚â´ œÜ.right :=
  data.p.naturality œÜ

variable (f) in
@[simp]
lemma mapZ_id : data.mapZ (ùüô (Arrow.mk f)) = ùüô _ :=
  data.Z.map_id _

@[reassoc, simp]
lemma mapZ_comp {X'' Y'' : C} {h : X'' ‚ü∂ Y''} (œà : Arrow.mk g ‚ü∂ Arrow.mk h) :
    data.mapZ (œÜ ‚â´ œà) = data.mapZ œÜ ‚â´ data.mapZ œà :=
  data.Z.map_comp _ _

end

section

variable (J : Type*) [Category J]

/-- Auxiliary definition for `FunctorialFactorizationData.functorCategory`. -/
@[simps]
def functorCategory.Z : Arrow (J ‚•§ C) ‚•§ J ‚•§ C where
  obj f :=
    { obj := fun j => (data.factorizationData (f.hom.app j)).Z
      map := fun œÜ => data.mapZ
        { left := f.left.map œÜ
          right := f.right.map œÜ }
      map_id := fun j => by
        dsimp
        rw [‚Üê data.mapZ_id (f.hom.app j)]
        congr <;> simp
      map_comp := fun _ _ => by
        dsimp
        rw [‚Üê data.mapZ_comp]
        congr <;> simp }
  map œÑ :=
    { app := fun j => data.mapZ
        { left := œÑ.left.app j
          right := œÑ.right.app j
          w := congr_app œÑ.w j }
      naturality := fun _ _ Œ± => by
        dsimp
        rw [‚Üê data.mapZ_comp, ‚Üê data.mapZ_comp]
        congr 1
        ext <;> simp }
  map_id f := by
    ext j
    dsimp
    rw [‚Üê data.mapZ_id]
    congr 1
  map_comp f g := by
    ext j
    dsimp
    rw [‚Üê data.mapZ_comp]
    congr 1

/-- A functorial factorization in the category `C` extends to the functor category `J ‚•§ C`. -/
def functorCategory :
    FunctorialFactorizationData (W‚ÇÅ.functorCategory J) (W‚ÇÇ.functorCategory J) where
  Z := functorCategory.Z data J
  i := { app := fun f => { app := fun j => (data.factorizationData (f.hom.app j)).i } }
  p := { app := fun f => { app := fun j => (data.factorizationData (f.hom.app j)).p } }
  hi _ _ := data.hi _
  hp _ _ := data.hp _

end

end FunctorialFactorizationData

/-- The functorial factorization axiom for two classes of morphisms `W‚ÇÅ` and `W‚ÇÇ` in a
category `C`. It asserts that any morphism can be factored in a functorial manner
as a morphism in `W‚ÇÅ` followed by a morphism in `W‚ÇÇ`. -/
class HasFunctorialFactorization : Prop where
  nonempty_functorialFactorizationData : Nonempty (FunctorialFactorizationData W‚ÇÅ W‚ÇÇ)

/-- A chosen term in `FunctorialFactorizationData W‚ÇÅ W‚ÇÇ` when the functorial factorization
axiom `HasFunctorialFactorization W‚ÇÅ W‚ÇÇ` holds. -/
noncomputable def functorialFactorizationData [HasFunctorialFactorization W‚ÇÅ W‚ÇÇ] :
    FunctorialFactorizationData W‚ÇÅ W‚ÇÇ :=
  Nonempty.some (HasFunctorialFactorization.nonempty_functorialFactorizationData)

instance [HasFunctorialFactorization W‚ÇÅ W‚ÇÇ] : HasFactorization W‚ÇÅ W‚ÇÇ where
  nonempty_mapFactorizationData f := ‚ü®(functorialFactorizationData W‚ÇÅ W‚ÇÇ).factorizationData f‚ü©

instance [HasFunctorialFactorization W‚ÇÅ W‚ÇÇ] (J : Type*) [Category J] :
    HasFunctorialFactorization (W‚ÇÅ.functorCategory J) (W‚ÇÇ.functorCategory J) :=
  ‚ü®‚ü®(functorialFactorizationData W‚ÇÅ W‚ÇÇ).functorCategory J‚ü©‚ü©

end MorphismProperty

end CategoryTheory
