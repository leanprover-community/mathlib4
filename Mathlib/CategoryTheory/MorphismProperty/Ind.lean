/-
Copyright (c) 2025 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.CategoryTheory.Comma.LocallySmall
import Mathlib.CategoryTheory.Limits.Preserves.Over
import Mathlib.CategoryTheory.MorphismProperty.Comma
import Mathlib.CategoryTheory.MorphismProperty.Limits
import Mathlib.CategoryTheory.ObjectProperty.Ind

/-!
# Ind and pro-properties

Given a morphism property `P`, we define a morphism property `ind P` that is satisfied for
`f : X ‚ü∂ Y` if `Y` is a filtered colimit of `Y·µ¢` and `f·µ¢ : X ‚ü∂ Y·µ¢` satisfy `P`.

We show that `ind P` inherits stability properties from `P`.

## Main definitions

- `CategoryTheory.MorphismProperty.ind`: `f` satisfies `ind P` if `f` is a filtered colimit of
  morphisms in `P`.

## Main results:

- `CategoryTheory.MorphismProperty.ind_ind`: If `P` implies finitely presentable, then
  `P.ind.ind = P.ind`.

## TODOs:

- Dualise to obtain `pro P`.
- Show `ind P` is stable under composition if `P` spreads out (Christian).
-/

universe w v u

namespace CategoryTheory.MorphismProperty

open Limits Opposite

variable {C : Type u} [Category.{v} C] (P : MorphismProperty C)

/--
Let `P` be a property of morphisms. `P.ind` is satisfied for `f : X ‚ü∂ Y`
if there exists a family of natural maps `t·µ¢ : X ‚ü∂ Y·µ¢` and `s·µ¢ : Y·µ¢ ‚ü∂ Y` indexed by `J`
such that
- `J` is filtered
- `Y ‚âÖ colim Y·µ¢` via `{s·µ¢}·µ¢`
- `t·µ¢` satisfies `P` for all `i`
- `f = t·µ¢ ‚â´ s·µ¢` for all `i`.

See `CategoryTheory.MorphismProperty.ind_iff_ind_under_mk` for an equivalent characterization
in terms of `Y` as an object of `Under X`.
-/
def ind (P : MorphismProperty C) : MorphismProperty C :=
  fun X Y f ‚Ü¶ ‚àÉ (J : Type w) (_ : SmallCategory J) (_ : IsFiltered J)
    (D : J ‚•§ C) (t : (Functor.const J).obj X ‚ü∂ D) (s : D ‚ü∂ (Functor.const J).obj Y)
    (_ : IsColimit (Cocone.mk _ s)), ‚àÄ j, P (t.app j) ‚àß t.app j ‚â´ s.app j = f

lemma exists_hom_of_isFinitelyPresentable {J : Type w} [SmallCategory J] [IsFiltered J] {D : J ‚•§ C}
    {c : Cocone D} (hc : IsColimit c) {X A : C} {p : X ‚ü∂ A} (hp : isFinitelyPresentable.{w} C p)
    (s : (Functor.const J).obj X ‚ü∂ D) (f : A ‚ü∂ c.pt) (h : ‚àÄ (j : J), s.app j ‚â´ c.Œπ.app j = p ‚â´ f) :
    ‚àÉ (j : J) (q : A ‚ü∂ D.obj j), p ‚â´ q = s.app j ‚àß q ‚â´ c.Œπ.app j = f :=
  hp.exists_hom_of_isColimit_under hc _ s _ h

lemma le_ind : P ‚â§ ind.{w} P := by
  intro X Y f hf
  refine ‚ü®PUnit, inferInstance, inferInstance, (Functor.const PUnit).obj Y, ?_, ùüô _, ?_, ?_‚ü©
  ¬∑ exact { app _ := f }
  ¬∑ exact isColimitConstCocone _ _
  ¬∑ simpa

variable {P}

lemma ind_iff_ind_underMk {X Y : C} (f : X ‚ü∂ Y) :
    ind.{w} P f ‚Üî ObjectProperty.ind.{w} P.underObj (CategoryTheory.Under.mk f) := by
  refine ‚ü®fun ‚ü®J, _, _, D, t, s, hs, hst‚ü© ‚Ü¶ ?_, fun ‚ü®J, _, _, pres, hpres‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ refine ‚ü®J, ‚Äπ_‚Ä∫, ‚Äπ_‚Ä∫, ‚ü®Under.lift D t, ?_, ?_‚ü©, ?_‚ü©
    ¬∑ exact { app j := CategoryTheory.Under.homMk (s.app j) (by simp [hst]) }
    ¬∑ have : Nonempty J := IsFiltered.nonempty
      exact Under.isColimitLiftCocone _ _ _ _ (by simp [hst]) hs
    ¬∑ simp [underObj, hst]
  ¬∑ refine ‚ü®J, ‚Äπ_‚Ä∫, ‚Äπ_‚Ä∫, pres.diag ‚ãô CategoryTheory.Under.forget _, ?_, ?_, ?_, fun j ‚Ü¶ ‚ü®?_, ?_‚ü©‚ü©
    ¬∑ exact { app j := (pres.diag.obj j).hom }
    ¬∑ exact Functor.whiskerRight pres.Œπ (CategoryTheory.Under.forget X)
    ¬∑ exact isColimitOfPreserves (CategoryTheory.Under.forget _) pres.isColimit
    ¬∑ exact hpres j
    ¬∑ simp

lemma underObj_ind_eq_ind_underObj (X : C) :
    underObj (ind.{w} P) (X := X) = ObjectProperty.ind.{w} P.underObj := by
  ext f
  simp [underObj, show f = CategoryTheory.Under.mk f.hom from rfl, ind_iff_ind_underMk]

variable (Q : MorphismProperty C)

instance [P.RespectsLeft Q] : P.ind.RespectsLeft Q where
  precomp {X Y Z} i hi f := fun ‚ü®J, _, _, D, t, s, hs, hst‚ü© ‚Ü¶ by
    refine ‚ü®J, ‚Äπ_‚Ä∫, ‚Äπ_‚Ä∫, D, (Functor.const J).map i ‚â´ t, s, hs, fun j ‚Ü¶ ‚ü®?_, by simp [hst]‚ü©‚ü©
    exact RespectsLeft.precomp _ hi _ (hst j).1

instance [P.RespectsIso] : P.ind.RespectsIso where
  postcomp {X Y Z} i (hi : IsIso i) f := fun ‚ü®J, _, _, D, t, s, hs, hst‚ü© ‚Ü¶ by
    refine ‚ü®J, ‚Äπ_‚Ä∫, ‚Äπ_‚Ä∫, D, t, s ‚â´ (Functor.const J).map i, ?_, fun j ‚Ü¶ ‚ü®(hst j).1, ?_‚ü©‚ü©
    ¬∑ exact (IsColimit.equivIsoColimit (Cocones.ext (asIso i))) hs
    ¬∑ simp [reassoc_of% (hst j).2]

lemma ind_underObj_pushout {X Y : C} (g : X ‚ü∂ Y) [HasPushouts C] [P.IsStableUnderCobaseChange]
    {f : Under X} (hf : ObjectProperty.ind.{w} P.underObj f) :
    ObjectProperty.ind.{w} P.underObj ((Under.pushout g).obj f) := by
  obtain ‚ü®J, _, _, pres, hpres‚ü© := hf
  use J, inferInstance, inferInstance, pres.map (Under.pushout g)
  intro i
  exact P.pushout_inr _ _ (hpres i)

instance [P.IsStableUnderCobaseChange] [HasPushouts C] : P.ind.IsStableUnderCobaseChange := by
  refine .mk' fun A B A' f g _ hf ‚Ü¶ ?_
  rw [ind_iff_ind_underMk] at hf ‚ä¢
  exact ind_underObj_pushout g hf

/-- `ind` is idempotent if `P` implies finitely presentable. -/
lemma ind_ind (hp : P ‚â§ isFinitelyPresentable.{w} C) [LocallySmall.{w} C] :
    ind.{w} (ind.{w} P) = ind.{w} P := by
  refine le_antisymm (fun X Y f hf ‚Ü¶ ?_) P.ind.le_ind
  have : P.underObj ‚â§ ObjectProperty.isFinitelyPresentable.{w} (Under X) := fun f hf ‚Ü¶ hp _ hf
  simpa [ind_iff_ind_underMk, underObj_ind_eq_ind_underObj,
    ObjectProperty.ind_ind.{w} this] using hf

end CategoryTheory.MorphismProperty
