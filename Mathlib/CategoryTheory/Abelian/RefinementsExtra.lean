/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Abelian.Refinements
import Mathlib.CategoryTheory.Sites.Coherent.RegularSheaves
import Mathlib.CategoryTheory.Sites.Coherent.Comparison
import Mathlib.CategoryTheory.Sites.Balanced
import Mathlib.CategoryTheory.Sites.Limits

/-!
# Additional refinements lemmas

-/

universe w v u

namespace CategoryTheory

open Opposite Limits Category

namespace Limits

variable {C : Type u} [Category.{v} C] [Preadditive C]

namespace PushoutCocone

variable {Z X‚ÇÅ X‚ÇÇ : C} {f‚ÇÅ : Z ‚ü∂ X‚ÇÅ} {f‚ÇÇ : Z ‚ü∂ X‚ÇÇ} (c : PushoutCocone f‚ÇÅ f‚ÇÇ)
  [HasBinaryBiproduct X‚ÇÅ X‚ÇÇ]

@[simps]
noncomputable def shortComplex : ShortComplex C where
  X‚ÇÅ := Z
  X‚ÇÇ := X‚ÇÅ ‚äû X‚ÇÇ
  X‚ÇÉ := c.pt
  f := biprod.lift f‚ÇÅ (-f‚ÇÇ)
  g := biprod.desc c.inl c.inr
  zero := by simp [c.condition]

noncomputable def isColimitOfExactShortComplex [Balanced C]
    (hc : c.shortComplex.Exact) (hc' : Epi c.shortComplex.g) :
    IsColimit c :=
  PushoutCocone.isColimitAux _
    (fun s => hc.desc (biprod.desc s.inl s.inr) (by simp [s.condition]))
    (fun s => by simpa using biprod.inl ‚â´= hc.g_desc (biprod.desc s.inl s.inr) _)
    (fun s => by simpa using biprod.inr ‚â´= hc.g_desc (biprod.desc s.inl s.inr) _)
    (fun s m hm => by
      rw [‚Üê cancel_epi (PushoutCocone.shortComplex c).g, hc.g_desc]
      aesop_cat)


end PushoutCocone

namespace PullbackCone

variable {X‚ÇÅ X‚ÇÇ Y : C} {f‚ÇÅ : X‚ÇÅ ‚ü∂ Y} {f‚ÇÇ : X‚ÇÇ ‚ü∂ Y} (c : PullbackCone f‚ÇÅ f‚ÇÇ)
  [HasBinaryBiproduct X‚ÇÅ X‚ÇÇ]


@[simps]
noncomputable def shortComplex : ShortComplex C where
  X‚ÇÅ := c.pt
  X‚ÇÇ := X‚ÇÅ ‚äû X‚ÇÇ
  X‚ÇÉ := Y
  f := biprod.lift c.fst c.snd
  g := biprod.desc f‚ÇÅ (-f‚ÇÇ)
  zero := by simp [c.condition]

lemma exact_shortComplex_of_isLimit (hc : IsLimit c)
    [(shortComplex c).HasHomology] : c.shortComplex.Exact := by
  apply ShortComplex.exact_of_f_is_kernel
  let pullbackCone : ‚àÄ {W : C} (œÜ : W ‚ü∂ X‚ÇÅ ‚äû X‚ÇÇ), œÜ ‚â´ biprod.desc f‚ÇÅ (-f‚ÇÇ) = 0 ‚Üí
        PullbackCone f‚ÇÅ f‚ÇÇ := fun {W} œÜ hœÜ =>
    PullbackCone.mk (œÜ ‚â´ biprod.fst) (œÜ ‚â´ biprod.snd) (by
      rw [‚Üê sub_eq_zero, assoc, assoc, ‚Üê Preadditive.comp_sub]
      convert hœÜ
      aesop_cat)
  exact KernelFork.IsLimit.ofŒπ _ _
    (fun f hf => hc.lift (pullbackCone f hf))
    (fun f hf => by
      dsimp
      ext <;> simp [pullbackCone])
    (fun f hf m hm => by
      have hm‚ÇÅ := hm =‚â´ biprod.fst
      have hm‚ÇÇ := hm =‚â´ biprod.snd
      dsimp at hm‚ÇÅ hm‚ÇÇ
      simp only [assoc, biprod.lift_fst, biprod.lift_snd] at hm‚ÇÅ hm‚ÇÇ
      apply PullbackCone.IsLimit.hom_ext hc
      ¬∑ simp [hm‚ÇÅ, pullbackCone]
      ¬∑ simp [hm‚ÇÇ, pullbackCone])

end PullbackCone

end Limits

namespace Abelian

section

variable {C : Type u} [Category.{v} C] [Abelian C]

section

variable {X Y Z : C} {f : X ‚ü∂ Y} [Epi f] {œÄ‚ÇÅ œÄ‚ÇÇ : Z ‚ü∂ X}

noncomputable def effectiveEpiStructOfEpiOfIsPushout (hc : IsPushout œÄ‚ÇÅ œÄ‚ÇÇ f f) :
    EffectiveEpiStruct f where
  desc {W} œÜ h := PushoutCocone.IsColimit.desc hc.isColimit œÜ œÜ (h _ _ hc.w)
  fac {W} œÜ h := PushoutCocone.IsColimit.inl_desc hc.isColimit _ _ _
  uniq {W} œÜ h m hm := by
    rw [‚Üê cancel_epi f, hm]
    symm
    apply PushoutCocone.IsColimit.inl_desc hc.isColimit

lemma isPushout_of_isPullback_of_epi (hc : IsPullback œÄ‚ÇÅ œÄ‚ÇÇ f f) :
    IsPushout œÄ‚ÇÅ œÄ‚ÇÇ f f := by
  have hc' : IsColimit (PushoutCocone.mk _ _ hc.w) := by
    apply PushoutCocone.isColimitOfExactShortComplex
    ¬∑ refine ShortComplex.exact_of_iso ?_ (PullbackCone.exact_shortComplex_of_isLimit _ hc.isLimit)
      exact ShortComplex.isoMk (Iso.refl _)
        { hom := biprod.desc biprod.inl (-biprod.inr)
          inv := biprod.desc biprod.inl (-biprod.inr) }
        (Iso.refl _) (by aesop_cat) (by aesop_cat)
    ¬∑ dsimp; infer_instance
  exact IsPushout.of_isColimit hc'

end

lemma effective_epi_of_epi {X Y : C} (f : X ‚ü∂ Y) [Epi f] :
    EffectiveEpi f where
  effectiveEpi := ‚ü®effectiveEpiStructOfEpiOfIsPushout
    (isPushout_of_isPullback_of_epi (IsPullback.of_isLimit (pullbackIsPullback f f)))‚ü©

variable (C)

def refinementsTopology :
    GrothendieckTopology C where
  sieves X S := ‚àÉ (T : C) (p : T ‚ü∂ X) (_ : Epi p), S p
  top_mem' X := ‚ü®X, ùüô X, inferInstance, by simp‚ü©
  pullback_stable' X Y S f hS := by
    obtain ‚ü®T, p, hp, h‚ü© := hS
    refine ‚ü®_, pullback.fst f p, inferInstance, ?_‚ü©
    dsimp
    rw [pullback.condition]
    apply S.downward_closed h
  transitive' X S hS R hR := by
    obtain ‚ü®T, p, hp, h‚ü© := hS
    obtain ‚ü®U, q, hq, h'‚ü© := hR h
    exact ‚ü®_, q ‚â´ p, epi_comp _ _, h'‚ü©

instance : Preregular C where
  exists_fac {X Y Z} f g _ := by
    obtain ‚ü®A, œÄ, hœÄ, i, fac‚ü© := surjective_up_to_refinements_of_epi g f
    exact ‚ü®A, œÄ, effective_epi_of_epi œÄ, i, fac.symm‚ü©

lemma refinementsTopology_eq_regularTopology :
    refinementsTopology C = regularTopology C := by
  apply le_antisymm
  ¬∑ rintro X S ‚ü®T, p, _, hp‚ü©
    refine (regularTopology C).superset_covering ?_
      (Coverage.Saturate.of X _ ‚ü®_, p, rfl, effective_epi_of_epi p‚ü©)
    rw [Sieve.generate_le_iff]
    rintro _ _ ‚ü®‚ü®‚ü©‚ü©
    exact hp
  ¬∑ apply ((Coverage.gi C).gc _ _).2
    rintro X S ‚ü®Y, s, rfl, _‚ü©
    exact ‚ü®_, s, inferInstance, _, ùüô _, s, ‚ü®Unit.unit‚ü©, by simp‚ü©

instance refinementsTopology_subcanonical :
    (refinementsTopology C).Subcanonical := by
  rw [refinementsTopology_eq_regularTopology]
  exact regularTopology.subcanonical

end

namespace refinementsTopology

attribute [local instance] Types.instFunLike Types.instConcreteCategory

lemma epi_iff_isLocallySurjective_yoneda_map {C : Type u} [Category.{v} C] [Abelian C]
  {X Y : C} (f : X ‚ü∂ Y) :
    Epi f ‚Üî Sheaf.IsLocallySurjective ((refinementsTopology C).yoneda.map f) := by
  rw [epi_iff_surjective_up_to_refinements f]
  constructor
  ¬∑ intro hf
    constructor
    intro U (y : U ‚ü∂ Y)
    obtain ‚ü®A', œÄ, hœÄ, x, fac‚ü© := hf y
    exact ‚ü®A', œÄ, hœÄ, x, fac.symm‚ü©
  ¬∑ intro hf
    intro A y
    obtain ‚ü®A', œÄ, hœÄ, x, fac‚ü© := Presheaf.imageSieve_mem (refinementsTopology C)
      ((refinementsTopology C).yoneda.map f).val y
    exact ‚ü®A', œÄ, hœÄ, x, fac.symm‚ü©

lemma epi_iff_epi_yoneda_map {C : Type u} [SmallCategory C] [Abelian C] {X Y : C} (f : X ‚ü∂ Y) :
    Epi f ‚Üî Epi ((refinementsTopology C).yoneda.map f) := by
  rw [epi_iff_isLocallySurjective_yoneda_map, Sheaf.epi_iff_isLocallySurjective]

end refinementsTopology

end Abelian

end CategoryTheory
