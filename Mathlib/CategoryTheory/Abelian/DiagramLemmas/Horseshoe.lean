/-
Copyright (c) 2024 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang
-/

import Mathlib.CategoryTheory.Abelian.DiagramLemmas.Four
import Mathlib.Algebra.Homology.ShortComplex.ShortExact
import Mathlib.Algebra.Homology.ShortComplex.SnakeLemma
import Mathlib.CategoryTheory.Preadditive.ProjectiveResolution

/-!
# Horseshoe Lemma

The Horseshoe Lemma is a result in homological algebra that provides a way to construct a short
exact sequence of projective resolutions. Let `ùíû` be an abelian category with enough projectives
and
```
0 -> A --> B --> C -> 0
```
be a short exact sequence.
In this file, we construct simultaneously three projective resolutions `P` of `A`, `S` of `B`,
and `Q` of `C` such that `S` is the binary biproduct of `P` and `Q`. That is we have the following
commutative diagram:
```
0 -> ... --> ... ----> ... -> 0
      |       |         |
      v       v         v
0 -> P‚ÇÅ --> P‚ÇÅ ‚äï Q‚ÇÅ --> Q‚ÇÅ -> 0
      |       |         |
      v       v         v
0 -> P‚ÇÄ -> P‚ÇÄ ‚äï Q‚ÇÄ ---> Q‚ÇÄ -> 0
      |       |         |
      v       v         v
0 -> A ----> B ------> C -> 0
```
-/

open CategoryTheory Limits
open scoped ZeroObject

noncomputable section

universe u v

variable {ùíû : Type u} [Category.{v} ùíû] [Abelian ùíû] [EnoughProjectives ùíû]

lemma exact_lemma1 {X Y Z W : ùíû}
    (g : Y ‚ü∂ Z) (h : Z ‚ü∂ W) (f : X ‚ü∂ kernel g) (i : kernel g ‚ü∂ Y) (hf : Epi f) (hh : Mono h)
  (hi : i = kernel.Œπ g) : CategoryTheory.Exact (f ‚â´ i) (g ‚â´ h) := by
  suffices Exact i g by
    exact exact_comp_mono (exact_epi_comp this)
  rw [hi]
  exact exact_kernel_Œπ


namespace CategoryTheory.ShortComplex

variable (A B : ShortComplex ùíû) (fAB : A ‚ü∂ B)

open Projective

/--
The first row of the horseshoe lemma.
```
      P‚ÇÅ --> P‚ÇÅ ‚äï Q‚ÇÅ --> Q‚ÇÅ
      |       |         |
      v       v         v
0 --> A ----> B ------> C --> 0
```
-/
@[simps]
def horseshoeBase : ShortComplex ùíû where
  X‚ÇÅ := over A.X‚ÇÅ
  X‚ÇÇ := over A.X‚ÇÅ ‚äû over A.X‚ÇÉ
  X‚ÇÉ := over A.X‚ÇÉ
  f := biprod.inl
  g := biprod.snd
  zero := by simp

/--
The first row `P‚ÇÅ --> P‚ÇÅ ‚äï Q‚ÇÅ --> Q‚ÇÅ` of the horseshoe lemma is split.
-/
def horseshoeBase_splitting : A.horseshoeBase.Splitting where
  r := biprod.fst
  s := biprod.inr
  f_r := by simp
  s_g := by simp
  id := by simp

lemma horseshoeBase_shortExact : A.horseshoeBase.ShortExact :=
  A.horseshoeBase_splitting.shortExact

instance : Fact (ShortExact (horseshoeBase A)) := ‚ü®horseshoeBase_shortExact _‚ü©

/--
The morphism from the first row `P‚ÇÅ --> P‚ÇÅ ‚äï Q‚ÇÅ --> Q‚ÇÅ` to the zeroth row. We will call it `œÄ`.
-/
@[simps]
def horseshoeBaseœÄ [epi : Epi A.g] : A.horseshoeBase ‚ü∂ A where
  œÑ‚ÇÅ := œÄ _
  œÑ‚ÇÇ := biprod.desc (œÄ _ ‚â´ A.f) (factorThru (œÄ _) A.g)
  œÑ‚ÇÉ := œÄ _
  comm‚ÇÅ‚ÇÇ := by simp
  comm‚ÇÇ‚ÇÉ := by aesop_cat

instance horseshoeBaseœÄ_epi_œÑ‚ÇÅ [epi : Epi A.g] : Epi A.horseshoeBaseœÄ.œÑ‚ÇÅ := by
  simp only [horseshoeBase_X‚ÇÅ, horseshoeBaseœÄ_œÑ‚ÇÅ]; infer_instance

instance horseshoeBaseœÄ_epi_œÑ‚ÇÉ [epi : Epi A.g] : Epi A.horseshoeBaseœÄ.œÑ‚ÇÉ := by
  simp only [horseshoeBase_X‚ÇÉ, horseshoeBaseœÄ_œÑ‚ÇÉ]; infer_instance

lemma horseshoeBase_exact1 :
    (ComposableArrows.mk‚ÇÉ
      (horseshoeBase A).f
      (horseshoeBase A).g
      (0 : (horseshoeBase A).X‚ÇÉ ‚ü∂ 0)).Exact := by
  fconstructor
  ¬∑ refine ‚ü®fun n hn => ?_‚ü©
    simp only [ge_iff_le] at hn
    replace hn : n = 0 ‚à® n = 1 := by omega
    rcases hn with (rfl | rfl)
    ¬∑ simp
    ¬∑ simp
  ¬∑ intro n hn
    simp only [ge_iff_le] at hn
    replace hn : n = 0 ‚à® n = 1 := by omega
    rcases hn with (rfl | rfl)
    ¬∑ exact horseshoeBase_shortExact A |>.exact
    ¬∑ rw [‚Üê exact_iff_shortComplex_exact]
      simp only [horseshoeBase_X‚ÇÅ, horseshoeBase_X‚ÇÇ, horseshoeBase_X‚ÇÉ, horseshoeBase_f,
        horseshoeBase_g, ComposableArrows.mk‚ÇÉ, ComposableArrows.mk‚ÇÇ, id_eq, Nat.cast_ofNat,
        Int.Nat.cast_ofNat_Int, ComposableArrows.precomp_obj, ComposableArrows.Precomp.obj_succ,
        ComposableArrows.mk‚ÇÅ_obj, ComposableArrows.Mk‚ÇÅ.obj, ComposableArrows.precomp_map,
        ComposableArrows.Precomp.map_succ_succ, BinaryBiproduct.bicone_inl,
        BinaryBiproduct.bicone_snd, Fin.zero_eta, ComposableArrows.Precomp.obj_zero, Fin.mk_one,
        ComposableArrows.Precomp.obj_one, ComposableArrows.map',
        ComposableArrows.Precomp.map_one_succ, ComposableArrows.Precomp.map_zero_one,
        ComposableArrows.mk‚ÇÅ_map, ComposableArrows.Mk‚ÇÅ.map]
      rw [‚Üê epi_iff_exact_zero_right]
      infer_instance

instance [short_exact : Fact <| A.ShortExact] : Epi A.g := short_exact.out.epi_g

instance [short_exact : Fact <| A.ShortExact] : Mono A.f := short_exact.out.mono_f

instance horseshoeBaseœÄ_epi_œÑ‚ÇÇ [short_exact : Fact <| A.ShortExact] : Epi A.horseshoeBaseœÄ.œÑ‚ÇÇ := by
  classical
  simp only [horseshoeBase_X‚ÇÇ, horseshoeBaseœÄ_œÑ‚ÇÇ]
  refine @Abelian.epi_of_epi_of_epi_of_mono ùíû _ _
    (.mk‚ÇÉ  (horseshoeBase A).f (horseshoeBase A).g (0 : over A.X‚ÇÉ ‚ü∂ 0))
    (.mk‚ÇÉ A.f A.g (0 : A.X‚ÇÉ ‚ü∂ 0))
    (ComposableArrows.homMk‚ÇÉ (œÄ _) (biprod.desc (œÄ _ ‚â´ A.f) (factorThru (œÄ _) A.g)) (œÄ _) 0
    (by simp) (by aesop_cat) (by simp)) ?_ ?_ ?_ ?_ ?_
  ¬∑ apply horseshoeBase_exact1
  ¬∑ fconstructor
    ¬∑ refine ‚ü®fun n hn => ?_‚ü©
      simp only [ge_iff_le] at hn
      replace hn : n = 0 ‚à® n = 1 := by omega
      rcases hn with (rfl | rfl)
      ¬∑ simp
      ¬∑ simp
    ¬∑ intro n hn
      simp only [ge_iff_le] at hn
      replace hn : n = 0 ‚à® n = 1 := by omega
      rcases hn with (rfl | rfl)
      ¬∑ exact short_exact.out.exact
      ¬∑ rw [‚Üê exact_iff_shortComplex_exact]
        simp only [ComposableArrows.mk‚ÇÉ, ComposableArrows.mk‚ÇÇ, id_eq, Nat.cast_ofNat,
          Int.Nat.cast_ofNat_Int, ComposableArrows.precomp_obj, ComposableArrows.Precomp.obj_succ,
          ComposableArrows.mk‚ÇÅ_obj, ComposableArrows.Mk‚ÇÅ.obj, ComposableArrows.precomp_map,
          ComposableArrows.Precomp.map_succ_succ, Fin.zero_eta, ComposableArrows.Precomp.obj_zero,
          Fin.mk_one, ComposableArrows.Precomp.obj_one, ComposableArrows.map',
          ComposableArrows.Precomp.map_one_succ, ComposableArrows.Precomp.map_zero_one,
          ComposableArrows.mk‚ÇÅ_map, ComposableArrows.Mk‚ÇÅ.map]
        rw [‚Üê epi_iff_exact_zero_right]
        infer_instance
  ¬∑ dsimp; infer_instance
  ¬∑ dsimp; infer_instance
  ¬∑ dsimp; infer_instance

-- TODO : move this; this belongs to another file
variable {A B} in
/--
kernel of a short complex
-/
@[simps!]
def horseshoeKer : ShortComplex ùíû where
  X‚ÇÅ := kernel fAB.œÑ‚ÇÅ
  X‚ÇÇ := kernel fAB.œÑ‚ÇÇ
  X‚ÇÉ := kernel fAB.œÑ‚ÇÉ
  f := kernel.map _ _ A.f B.f fAB.comm‚ÇÅ‚ÇÇ
  g := kernel.map _ _ A.g B.g fAB.comm‚ÇÇ‚ÇÉ
  zero := by
    ext
    simp only [horseshoeBase_X‚ÇÅ, horseshoeBaseœÄ_œÑ‚ÇÅ, horseshoeBase_X‚ÇÉ, horseshoeBaseœÄ_œÑ‚ÇÉ,
      horseshoeBase_X‚ÇÇ, horseshoeBaseœÄ_œÑ‚ÇÇ, horseshoeBase_f, horseshoeBase_g, equalizer_as_kernel,
      Category.assoc, zero_comp]
    erw [kernel.lift_Œπ, kernel.lift_Œπ_assoc]
    simp

-- TODO : move this; this belongs to another file
variable {A B} in
/--
the morphism from kernel of a short compelx to itself
-/
@[simps]
def horseshoeKerŒπ : horseshoeKer fAB ‚ü∂ A where
  œÑ‚ÇÅ := kernel.Œπ _
  œÑ‚ÇÇ := kernel.Œπ _
  œÑ‚ÇÉ := kernel.Œπ _
  comm‚ÇÅ‚ÇÇ := by simp
  comm‚ÇÇ‚ÇÉ := by simp


-- TODO : move this; this belongs to another file
variable {A B} in
/--
cokernel of a short complex
-/
@[simps!]
def horseshoeCoker : ShortComplex ùíû where
  X‚ÇÅ := cokernel fAB.œÑ‚ÇÅ
  X‚ÇÇ := cokernel fAB.œÑ‚ÇÇ
  X‚ÇÉ := cokernel fAB.œÑ‚ÇÉ
  f := cokernel.map _ _ A.f B.f fAB.comm‚ÇÅ‚ÇÇ
  g := cokernel.map _ _ A.g B.g fAB.comm‚ÇÇ‚ÇÉ
  zero := by ext; simp

-- TODO : move this; this belongs to another file
variable {A B} in
/--
the morphism a short complex to its cokernel
-/
@[simps]
def horseshoeCokerœÄ : B ‚ü∂ horseshoeCoker fAB where
  œÑ‚ÇÅ := cokernel.œÄ _
  œÑ‚ÇÇ := cokernel.œÄ _
  œÑ‚ÇÉ := cokernel.œÄ _
  comm‚ÇÅ‚ÇÇ := by simp
  comm‚ÇÇ‚ÇÉ := by simp

@[reassoc]
lemma horseshoeKerŒπ_comp [Fact <| A.ShortExact] :
    horseshoeKerŒπ A.horseshoeBaseœÄ ‚â´ A.horseshoeBaseœÄ = 0 := by
  ext <;> simp


variable [a_se : Fact <| A.ShortExact] [b_se : Fact <| B.ShortExact]

variable {A B} in
/-- ker f -> A - f -> B -> coker f -/
@[simps!]
def horseshoeSnakeInput :
    SnakeInput ùíû where
  L‚ÇÄ := horseshoeKer fAB
  L‚ÇÅ := A
  L‚ÇÇ := B
  L‚ÇÉ := horseshoeCoker fAB
  v‚ÇÄ‚ÇÅ := horseshoeKerŒπ fAB
  v‚ÇÅ‚ÇÇ := fAB
  v‚ÇÇ‚ÇÉ := horseshoeCokerœÄ fAB
  h‚ÇÄ := by
    apply (config := {allowSynthFailures := true}) KernelFork.IsLimit.ofŒπ'
    ¬∑ intro C g h
      refine ‚ü®‚ü®kernel.lift _ g.œÑ‚ÇÅ <| ShortComplex.Hom.ext_iff _ _ |>.mp h |>.1,
        kernel.lift _ g.œÑ‚ÇÇ <| ShortComplex.Hom.ext_iff _ _ |>.mp h |>.2.1,
        kernel.lift _ g.œÑ‚ÇÉ <| ShortComplex.Hom.ext_iff _ _ |>.mp h |>.2.2, ?_, ?_‚ü©, ?_‚ü©
      ¬∑ exact equalizer.hom_ext <| by simpa using g.comm‚ÇÅ‚ÇÇ
      ¬∑ exact equalizer.hom_ext <| by simpa using g.comm‚ÇÇ‚ÇÉ
      ¬∑ ext <;> simp
    ¬∑ constructor
      intro C g‚ÇÅ g‚ÇÇ h
      ext
      ¬∑ exact equalizer.hom_ext <| by simpa using ShortComplex.Hom.ext_iff _ _ |>.mp h |>.1
      ¬∑ exact equalizer.hom_ext <| by simpa using ShortComplex.Hom.ext_iff _ _ |>.mp h |>.2.1
      ¬∑ exact equalizer.hom_ext <| by simpa using ShortComplex.Hom.ext_iff _ _ |>.mp h |>.2.2
  h‚ÇÉ := by
    apply (config := {allowSynthFailures := true}) CokernelCofork.IsColimit.ofœÄ'
    ¬∑ intro C g h
      refine ‚ü®‚ü®cokernel.desc _ g.œÑ‚ÇÅ <| ShortComplex.Hom.ext_iff _ _ |>.mp h |>.1,
        cokernel.desc _ g.œÑ‚ÇÇ <| ShortComplex.Hom.ext_iff _ _ |>.mp h |>.2.1,
        cokernel.desc _ g.œÑ‚ÇÉ <| ShortComplex.Hom.ext_iff _ _ |>.mp h |>.2.2, ?_, ?_‚ü©, ?_‚ü©
      ¬∑ exact coequalizer.hom_ext <| by simpa using g.comm‚ÇÅ‚ÇÇ
      ¬∑ exact coequalizer.hom_ext <| by simpa using g.comm‚ÇÇ‚ÇÉ
      ¬∑ ext <;> simp
    ¬∑ constructor
      intro C g‚ÇÅ g‚ÇÇ h
      ext
      ¬∑ exact coequalizer.hom_ext <| by simpa using ShortComplex.Hom.ext_iff _ _ |>.mp h |>.1
      ¬∑ exact coequalizer.hom_ext <| by simpa using ShortComplex.Hom.ext_iff _ _ |>.mp h |>.2.1
      ¬∑ exact coequalizer.hom_ext <| by simpa using ShortComplex.Hom.ext_iff _ _ |>.mp h |>.2.2
  L‚ÇÅ_exact := a_se.out.exact
  epi_L‚ÇÅ_g := inferInstance
  L‚ÇÇ_exact := b_se.out.exact
  mono_L‚ÇÇ_f := inferInstance

lemma horseshoeSnakeInput_L‚ÇÄ_shortExact [Epi fAB.œÑ‚ÇÅ] :
    (horseshoeSnakeInput fAB).L‚ÇÄ.ShortExact where
  exact := (horseshoeSnakeInput fAB).L‚ÇÄ_exact
  mono_f := by dsimp; infer_instance
  epi_g := by
    dsimp only [horseshoeSnakeInput_L‚ÇÄ_X‚ÇÇ, horseshoeSnakeInput_L‚ÇÄ_X‚ÇÉ, horseshoeSnakeInput_L‚ÇÄ_g]
    have h := Abelian.tfae_epi (cokernel fAB.œÑ‚ÇÅ) (kernel.map fAB.œÑ‚ÇÇ fAB.œÑ‚ÇÉ A.g B.g fAB.comm‚ÇÇ‚ÇÉ)
      |>.out 0 2
    refine h.mpr ?_
    have := (horseshoeSnakeInput fAB).snake_lemma.2 1
    rw [‚Üê exact_iff_shortComplex_exact] at this
    simp only [SnakeInput.composableArrows, ComposableArrows.mk‚ÇÖ, horseshoeSnakeInput_L‚ÇÄ_X‚ÇÇ,
      horseshoeSnakeInput_L‚ÇÄ_X‚ÇÉ, horseshoeSnakeInput_L‚ÇÉ_X‚ÇÅ, horseshoeSnakeInput_L‚ÇÉ_X‚ÇÇ,
      horseshoeSnakeInput_L‚ÇÉ_X‚ÇÉ, horseshoeSnakeInput_L‚ÇÄ_g, horseshoeSnakeInput_L‚ÇÉ_f,
      horseshoeSnakeInput_L‚ÇÉ_g, ComposableArrows.mk‚ÇÑ, ComposableArrows.mk‚ÇÉ, ComposableArrows.mk‚ÇÇ,
      horseshoeSnakeInput_L‚ÇÄ_X‚ÇÅ, horseshoeSnakeInput_L‚ÇÄ_f, id_eq, Nat.cast_ofNat,
      Int.Nat.cast_ofNat_Int, Fin.mk_one, ComposableArrows.precomp_obj,
      ComposableArrows.Precomp.obj_one, Fin.zero_eta, ComposableArrows.Precomp.obj_zero,
      ComposableArrows.Precomp.obj_succ, ComposableArrows.map', ComposableArrows.precomp_map,
      ComposableArrows.Precomp.map_one_succ, ComposableArrows.Precomp.map_zero_one,
      ComposableArrows.Precomp.map_succ_succ] at this
    dsimp at this
    convert this using 1
    symm
    convert IsZero.eq_of_tgt _ _ _ using 1
    simp only [horseshoeSnakeInput_L‚ÇÉ_X‚ÇÅ]
    exact (isZero_zero _).of_iso <| Limits.cokernel.ofEpi _

instance [Epi fAB.œÑ‚ÇÅ] : Fact (horseshoeSnakeInput fAB).L‚ÇÄ.ShortExact :=
  ‚ü®horseshoeSnakeInput_L‚ÇÄ_shortExact _ _ _‚ü©

variable (ùíû) in
/--
structure used in the inductive step of the horseshoe lemma
-/
structure STEP where
/--we need three short exact sequences X, Y, Z-/
(X Y Z : ShortComplex ùíû)
/--short exact-/
(X_se : X.ShortExact)
/--short exact-/
(Y_se : Y.ShortExact)
/--short exact-/
(Z_se : Z.ShortExact)
/-- the morphism between X and Y-/
(Œπ : X ‚ü∂ Y)
/-- the morphism between Y and Z-/
(œÄ : Y ‚ü∂ Z)

instance (x : STEP ùíû) : Fact (x.X.ShortExact) := ‚ü®x.X_se‚ü©
instance (x : STEP ùíû) : Fact (x.Y.ShortExact) := ‚ü®x.Y_se‚ü©
instance (x : STEP ùíû) : Fact (x.Z.ShortExact) := ‚ü®x.Z_se‚ü©

/--
induction:

for case zero, we consider the following:
```
0 --> ker a ---> ker b --> ker c -> 0
      |          |         |
      v          v         v
0 --> P‚ÇÅ --> P‚ÇÅ ‚äï Q‚ÇÅ ---> Q‚ÇÅ -> 0
      |a       |b        |c
      v        v         v
0 --> A ----> B ------> C --> 0
```

Assume we have case n:
```
0 -> G --> H --> I -> 0
    |     |     |
    v     v     v
0 -> D --> E --> F -> 0
    |     |     |
    v     v     v
0 -> A --> B --> C -> 0
```
we consider the following:
```
0 -> ker a --> ker b --> ker c -> 0
      |         |          |
      v         v          v
0 -> P_G --> P_G ‚äï P_I --> P_I -> 0
      |a        |b        |c
      v        v          v
0 -> G ------> H -------> I -> 0
```
-/
def horseshoeStep : ‚Ñï ‚Üí STEP ùíû
  | 0 =>
    { X := horseshoeKer (horseshoeBaseœÄ A)
      Y := horseshoeBase A
      Z := A
      X_se := horseshoeSnakeInput_L‚ÇÄ_shortExact _ _ _
      Y_se := horseshoeBase_shortExact A
      Z_se := a_se.out
      Œπ := horseshoeKerŒπ _
      œÄ := horseshoeBaseœÄ _ }
  | n + 1 =>
    { X := horseshoeKer (horseshoeBaseœÄ (horseshoeStep n).X)
      Y := horseshoeBase (horseshoeStep n).X
      Z := (horseshoeStep n).X
      X_se := horseshoeSnakeInput_L‚ÇÄ_shortExact _ _ _
      Y_se := horseshoeBase_shortExact _
      Z_se := (horseshoeStep n).X_se
      Œπ := horseshoeKerŒπ _
      œÄ := horseshoeBaseœÄ _ }

@[reassoc]
lemma horseshoeStep_Œπ_comp_œÄ (n : ‚Ñï) : (horseshoeStep A n).Œπ ‚â´ (horseshoeStep A n).œÄ = 0 :=
match n with
| 0 => by apply horseshoeKerŒπ_comp
| n + 1 => by apply horseshoeKerŒπ_comp

instance horseshoeStep_mono‚ÇÅ (n : ‚Ñï) : Mono (horseshoeStep A n).Œπ.œÑ‚ÇÅ :=
match n with
| 0 => by
  simp [horseshoeStep]
  infer_instance
| n + 1 => by
  simp [horseshoeStep]
  infer_instance


instance horseshoeStep_mono‚ÇÇ (n : ‚Ñï) : Mono (horseshoeStep A n).Œπ.œÑ‚ÇÇ :=
match n with
| 0 => by
  simp [horseshoeStep]
  infer_instance
| n + 1 => by
  simp [horseshoeStep]
  infer_instance


instance horseshoeStep_mono‚ÇÉ (n : ‚Ñï) : Mono (horseshoeStep A n).Œπ.œÑ‚ÇÉ :=
match n with
| 0 => by
  simp [horseshoeStep]
  infer_instance
| n + 1 => by
  simp [horseshoeStep]
  infer_instance

/--
the `n`-th row of the horseshoe lemma
-/
def horseshoeObj (n : ‚Ñï) : ShortComplex ùíû := horseshoeStep A n |>.Y

/--
the morphism from the `n+1`-th row to the `n`-th row of the horseshoe lemma
-/
def horseshoeD (n : ‚Ñï) : horseshoeObj A (n + 1) ‚ü∂ horseshoeObj A n :=
  (horseshoeStep A (n + 1)).œÄ ‚â´ (horseshoeStep A n).Œπ

lemma horseshoeD_square (n : ‚Ñï) : horseshoeD A (n + 1) ‚â´ horseshoeD A n = 0 := by
  simp [horseshoeD, horseshoeStep, horseshoeKerŒπ_comp_assoc]

/--
the chain complex of short complex in the horse lemma, every row is short exact,
every column is exact.
```
0 -> ... -----> ... ----> ....
      |         |          |
      v         v          v
0 -> P‚ÇÇ --> P‚ÇÇ ‚äï Q‚ÇÇ --> Q‚ÇÇ -> 0
      |       |         |
      v       v         v
0 -> P‚ÇÅ --> P‚ÇÅ ‚äï Q‚ÇÅ --> Q‚ÇÅ -> 0
      |       |         |
      v       v         v
0 -> P‚ÇÄ --> P‚ÇÄ ‚äï Q‚ÇÄ --> Q‚ÇÄ -> 0
```
-/
@[simps!]
def horseshoe : ChainComplex (ShortComplex ùíû) ‚Ñï :=
.of (horseshoeObj A) (horseshoeD A) (horseshoeD_square A)

/--
the zeroth row `P‚ÇÄ --> P‚ÇÄ ‚äï Q‚ÇÄ --> Q‚ÇÄ` to the base `A --> B --> C`.
-/
abbrev horseshoeœÄ : (horseshoe A).X 0 ‚ü∂ A := horseshoeBaseœÄ A

lemma horseshoe_d_œÄ : (horseshoe A).d 1 0 ‚â´ horseshoeœÄ A = 0 := by
  simp only [horseshoe_X, horseshoe_d, zero_add, ‚ÜìreduceDite, eqToHom_refl, Category.id_comp]
  have eq := horseshoeStep_Œπ_comp_œÄ A 0
  simp only [horseshoeStep, horseshoeD, Category.assoc] at eq ‚ä¢
  rw [eq, comp_zero]

/--
a chain complex of the left term
-/
abbrev horseshoeChainComplex‚ÇÅ : ChainComplex ùíû ‚Ñï :=
ShortComplex.œÄ‚ÇÅ.mapHomologicalComplex _ |>.obj (horseshoe A)

/--
a chain complex of the middle term
-/
abbrev horseshoeChainComplex‚ÇÇ : ChainComplex ùíû ‚Ñï :=
ShortComplex.œÄ‚ÇÇ.mapHomologicalComplex _ |>.obj (horseshoe A)

/--
a chain complex of the right term
-/
abbrev horseshoeChainComplex‚ÇÉ : ChainComplex ùíû ‚Ñï :=
ShortComplex.œÄ‚ÇÉ.mapHomologicalComplex _ |>.obj (horseshoe A)

instance (n : ‚Ñï) : Projective <| (horseshoeChainComplex‚ÇÅ A).X n := by
  rcases n with (_|n) <;>
  simp only [Nat.zero_eq, Functor.mapHomologicalComplex_obj_X, horseshoe_X,
    horseshoeObj, horseshoeStep, œÄ‚ÇÅ_obj, horseshoeBase_X‚ÇÅ, horseshoeChainComplex‚ÇÅ] <;>
  infer_instance

instance (n : ‚Ñï) : Projective <| (horseshoeChainComplex‚ÇÇ A).X n := by
  rcases n with (_|n) <;>
  simp only [Nat.zero_eq, Functor.mapHomologicalComplex_obj_X, horseshoe_X, horseshoeObj,
    horseshoeStep, œÄ‚ÇÇ_obj, horseshoeBase_X‚ÇÇ] <;>
  infer_instance

instance (n : ‚Ñï) : Projective <| (horseshoeChainComplex‚ÇÉ A).X n := by
  rcases n with (_|n) <;>
  simp only [Nat.zero_eq, Functor.mapHomologicalComplex_obj_X, horseshoe_X, horseshoeObj,
    horseshoeStep, œÄ‚ÇÉ_obj, horseshoeBase_X‚ÇÉ] <;>
  infer_instance

/--
the augmentation map on the left term.
-/
abbrev horseshoeToSingle‚ÇÅ :
    horseshoeChainComplex‚ÇÅ A ‚ü∂ (ChainComplex.single‚ÇÄ ùíû).obj A.X‚ÇÅ :=
  ChainComplex.toSingle‚ÇÄEquiv _ _ |>.symm
    ‚ü®ShortComplex.œÄ‚ÇÅ.map (horseshoeœÄ A), by simp [horseshoeD, horseshoeStep]‚ü©

/--
the augmentation map on the middle term.
-/
abbrev horseshoeToSingle‚ÇÇ :
    horseshoeChainComplex‚ÇÇ A ‚ü∂ (ChainComplex.single‚ÇÄ ùíû).obj A.X‚ÇÇ :=
  ChainComplex.toSingle‚ÇÄEquiv _ _ |>.symm
    ‚ü®ShortComplex.œÄ‚ÇÇ.map (horseshoeœÄ A), by simp [horseshoeD, horseshoeStep]‚ü©

/--
the augmentation map on the right term.
-/
abbrev horseshoeToSingle‚ÇÉ :
    horseshoeChainComplex‚ÇÉ A ‚ü∂ (ChainComplex.single‚ÇÄ ùíû).obj A.X‚ÇÉ :=
  ChainComplex.toSingle‚ÇÄEquiv _ _ |>.symm
  ‚ü®ShortComplex.œÄ‚ÇÉ.map (horseshoeœÄ A), by simp [horseshoeD, horseshoeStep]‚ü©

lemma horseshoeExact‚ÇÅ (n : ‚Ñï) :
    CategoryTheory.Exact
      ((horseshoeChainComplex‚ÇÅ A).d (n + 2) (n + 1))
      ((horseshoeChainComplex‚ÇÅ A).d (n + 1) n) := by
  simp only [horseshoeChainComplex‚ÇÅ, Functor.mapHomologicalComplex_obj_X, horseshoe_X, œÄ‚ÇÅ_obj,
    Functor.mapHomologicalComplex_obj_d, horseshoe_d, eqToHom_refl, horseshoeD, Category.id_comp,
    dite_eq_ite, œÄ‚ÇÅ_map, ‚ÜìreduceDite, comp_œÑ‚ÇÅ]
  rw [if_pos (by abel)]
  apply exact_lemma1
  ¬∑ change Epi (horseshoeBaseœÄ _).œÑ‚ÇÅ
    simp only [horseshoeBase_X‚ÇÅ, horseshoeBaseœÄ_œÑ‚ÇÅ]
    infer_instance
  ¬∑ cases n <;>
    change Mono (horseshoeKerŒπ _).œÑ‚ÇÅ <;>
    simp only [Nat.zero_eq, horseshoeKer_X‚ÇÅ, horseshoeBaseœÄ_œÑ‚ÇÅ, horseshoeKerŒπ_œÑ‚ÇÅ] <;>
    infer_instance
  ¬∑ simp [horseshoeStep]

lemma horseshoeExact‚ÇÇ (n : ‚Ñï) :
    CategoryTheory.Exact
      ((horseshoeChainComplex‚ÇÇ A).d (n + 2) (n + 1))
      ((horseshoeChainComplex‚ÇÇ A).d (n + 1) n) := by
  simp only [Functor.mapHomologicalComplex_obj_X, horseshoe_X, œÄ‚ÇÇ_obj,
    Functor.mapHomologicalComplex_obj_d, horseshoe_d, eqToHom_refl, horseshoeD, Category.id_comp,
    dite_eq_ite, œÄ‚ÇÇ_map, ‚ÜìreduceDite, comp_œÑ‚ÇÇ]
  rw [if_pos (by abel)]
  apply exact_lemma1
  ¬∑ change Epi (horseshoeBaseœÄ _).œÑ‚ÇÇ
    infer_instance
  ¬∑ cases n <;>
    change Mono (horseshoeKerŒπ _).œÑ‚ÇÇ <;>
    simp only [Nat.zero_eq, horseshoeKer_X‚ÇÇ, horseshoeBaseœÄ_œÑ‚ÇÇ, horseshoeKerŒπ_œÑ‚ÇÇ] <;>
    infer_instance
  ¬∑ simp [horseshoeStep]

lemma horseshoeExact‚ÇÉ (n : ‚Ñï) :
    CategoryTheory.Exact
      ((horseshoeChainComplex‚ÇÉ A).d (n + 2) (n + 1))
      ((horseshoeChainComplex‚ÇÉ A).d (n + 1) n) := by
  simp only [Functor.mapHomologicalComplex_obj_X, horseshoe_X, œÄ‚ÇÇ_obj,
    Functor.mapHomologicalComplex_obj_d, horseshoe_d, eqToHom_refl, horseshoeD, Category.id_comp,
    dite_eq_ite, œÄ‚ÇÇ_map, ‚ÜìreduceDite, comp_œÑ‚ÇÇ]
  rw [if_pos (by abel)]
  apply exact_lemma1
  ¬∑ change Epi (horseshoeBaseœÄ _).œÑ‚ÇÉ
    infer_instance
  ¬∑ cases n <;>
    change Mono (horseshoeKerŒπ _).œÑ‚ÇÉ <;>
    simp only [Nat.zero_eq, horseshoeKer_X‚ÇÉ, horseshoeBaseœÄ_œÑ‚ÇÉ, horseshoeKerŒπ_œÑ‚ÇÉ] <;>
    infer_instance
  ¬∑ simp [horseshoeStep]

instance : QuasiIsoAt (horseshoeToSingle‚ÇÅ A) 0 := by
  rw [ChainComplex.quasiIsoAt‚ÇÄ_iff, ShortComplex.quasiIso_iff_of_zeros'] <;> try rfl
  dsimp
  simp only [zero_add, ‚ÜìreduceIte, Category.id_comp, ChainComplex.toSingle‚ÇÄEquiv_symm_apply_f_zero,
    horseshoe_X, œÄ‚ÇÅ_map, horseshoeBaseœÄ_œÑ‚ÇÅ]
  refine ‚ü®?_, inferInstance‚ü©
  rw [‚Üê exact_iff_shortComplex_exact]
  apply (config := {allowSynthFailures := true}) CategoryTheory.exact_epi_comp
  ¬∑ exact exact_kernel_Œπ
  ¬∑ dsimp [horseshoeStep]; infer_instance

instance : QuasiIsoAt (horseshoeToSingle‚ÇÇ A) 0 := by
  rw [ChainComplex.quasiIsoAt‚ÇÄ_iff, ShortComplex.quasiIso_iff_of_zeros'] <;> try rfl
  dsimp
  simp only [zero_add, ‚ÜìreduceIte, Category.id_comp, ChainComplex.toSingle‚ÇÄEquiv_symm_apply_f_zero,
    horseshoe_X, œÄ‚ÇÇ_map, horseshoeBaseœÄ_œÑ‚ÇÇ]
  refine ‚ü®?_, (horseshoeBaseœÄ_epi_œÑ‚ÇÇ A)‚ü©
  rw [‚Üê exact_iff_shortComplex_exact]
  apply (config := {allowSynthFailures := true}) CategoryTheory.exact_epi_comp
  ¬∑ exact exact_kernel_Œπ
  ¬∑ exact horseshoeBaseœÄ_epi_œÑ‚ÇÇ (horseshoeStep A 0).X

instance : QuasiIsoAt (horseshoeToSingle‚ÇÉ A) 0 := by
  rw [ChainComplex.quasiIsoAt‚ÇÄ_iff, ShortComplex.quasiIso_iff_of_zeros'] <;> try rfl
  dsimp
  simp only [zero_add, ‚ÜìreduceIte, Category.id_comp, ChainComplex.toSingle‚ÇÄEquiv_symm_apply_f_zero,
    horseshoe_X, œÄ‚ÇÉ_map, horseshoeBaseœÄ_œÑ‚ÇÉ]
  refine ‚ü®?_, (horseshoeBaseœÄ_epi_œÑ‚ÇÉ A)‚ü©
  rw [‚Üê exact_iff_shortComplex_exact]
  apply (config := {allowSynthFailures := true}) CategoryTheory.exact_epi_comp
  ¬∑ exact exact_kernel_Œπ
  ¬∑ exact horseshoeBaseœÄ_epi_œÑ‚ÇÉ (horseshoeStep A 0).X

lemma stupid_aux (A B : ShortComplex ùíû) (h : A = B)  :
    (eqToHom h).œÑ‚ÇÅ = eqToHom (by simp [h]) := by induction h; simp

lemma stupid_aux' (A B : ShortComplex ùíû) (h : A = B)  :
    (eqToHom h).œÑ‚ÇÇ = eqToHom (by simp [h]) := by induction h; simp

lemma stupid_aux'' (A B : ShortComplex ùíû) (h : A = B)  :
    (eqToHom h).œÑ‚ÇÉ = eqToHom (by simp [h]) := by induction h; simp

lemma stupid_aux2 (m n : ‚Ñï) (h : m = n) :
    eqToHom (by simp [h]) ‚â´ horseshoeD A m = horseshoeD A n ‚â´ eqToHom (by simp [h]) := by
  induction h; simp

lemma stupid_aux2' (m n : ‚Ñï) (h : m = n) :
    eqToHom (by simp [h]) ‚â´ (horseshoeD A m).œÑ‚ÇÅ = (horseshoeD A n).œÑ‚ÇÅ ‚â´ eqToHom (by simp [h]) := by
  induction h; simp

lemma stupid_aux2'' (m n : ‚Ñï) (h : m = n) :
    eqToHom (by simp [h]) ‚â´ (horseshoeD A m).œÑ‚ÇÇ = (horseshoeD A n).œÑ‚ÇÇ ‚â´ eqToHom (by simp [h]) := by
  induction h; simp

lemma stupid_aux2''' (m n : ‚Ñï) (h : m = n) :
    eqToHom (by simp [h]) ‚â´ (horseshoeD A m).œÑ‚ÇÉ = (horseshoeD A n).œÑ‚ÇÉ ‚â´ eqToHom (by simp [h]) := by
  induction h; simp

instance (n : ‚Ñï) : QuasiIsoAt (horseshoeToSingle‚ÇÅ A) (n + 1) := by
  rw [quasiIsoAt_iff_isIso_homologyMap]
  have z1 : IsZero <| ((ChainComplex.single‚ÇÄ _).obj A.X‚ÇÅ).homology (n + 1) := by
    apply HomologicalComplex.isZero_single_obj_homology
    simp

  have z2 : IsZero <| HomologicalComplex.homology (horseshoeChainComplex‚ÇÅ A) (n + 1) := by
    suffices e : HomologicalComplex.homology (horseshoeChainComplex‚ÇÅ A) (n + 1) ‚âÖ 0 from
      e.isZero_iff.mpr (isZero_zero _)

    refine exact_iff_homology_iso_zero _ |>.mp ?_ |>.some
    rw [‚Üê exact_iff_shortComplex_exact]
    have := horseshoeExact‚ÇÅ A n
    simp only [Functor.mapHomologicalComplex_obj_X, horseshoe_X, œÄ‚ÇÅ_obj,
      Functor.mapHomologicalComplex_obj_d, horseshoe_d, eqToHom_refl, Category.id_comp,
      dite_eq_ite, œÄ‚ÇÅ_map, ‚ÜìreduceDite] at this
    rw [if_pos (by abel)] at this

    simp only [horseshoeChainComplex‚ÇÅ, HomologicalComplex.shortComplexFunctor_obj_X‚ÇÅ,
      Functor.mapHomologicalComplex_obj_X, horseshoe_X, œÄ‚ÇÅ_obj,
      HomologicalComplex.shortComplexFunctor_obj_X‚ÇÇ, HomologicalComplex.shortComplexFunctor_obj_X‚ÇÉ,
      HomologicalComplex.shortComplexFunctor_obj_f, Functor.mapHomologicalComplex_obj_d,
      horseshoe_d, ChainComplex.prev, ‚ÜìreduceDite, œÄ‚ÇÅ_map, comp_œÑ‚ÇÅ,
      HomologicalComplex.shortComplexFunctor_obj_g, ChainComplex.next_nat_succ, exact_iso_comp]

    set g := _; change CategoryTheory.Exact _ g
    dsimp at g
    suffices g_eq : g = (horseshoeD A n).œÑ‚ÇÅ ‚â´ eqToHom (by simp) by
      rw [g_eq, exact_comp_iso]
      exact this
    simp only [g]
    generalize_proofs h1 h2
    rw [show (eqToHom h1).œÑ‚ÇÅ = eqToHom (by simp) from stupid_aux _ _ (by simp), stupid_aux2']
    simp

  suffices HomologicalComplex.homologyMap (horseshoeToSingle‚ÇÅ A) (n + 1) = (z2.iso z1).hom by
    rw [this]
    exact IsIso.of_iso _
  exact IsZero.eq_of_tgt z1 _ _

instance (n : ‚Ñï) : QuasiIsoAt (horseshoeToSingle‚ÇÇ A) (n + 1) := by
  rw [quasiIsoAt_iff_isIso_homologyMap]
  have z1 : IsZero <| ((ChainComplex.single‚ÇÄ _).obj A.X‚ÇÇ).homology (n + 1) := by
    apply HomologicalComplex.isZero_single_obj_homology
    simp

  have z2 : IsZero <| HomologicalComplex.homology (horseshoeChainComplex‚ÇÇ A) (n + 1) := by
    suffices e : HomologicalComplex.homology (horseshoeChainComplex‚ÇÇ A) (n + 1) ‚âÖ 0 from
      e.isZero_iff.mpr (isZero_zero _)

    refine exact_iff_homology_iso_zero _ |>.mp ?_ |>.some
    rw [‚Üê exact_iff_shortComplex_exact]
    have := horseshoeExact‚ÇÇ A n
    simp only [Functor.mapHomologicalComplex_obj_X, horseshoe_X, œÄ‚ÇÇ_obj,
      Functor.mapHomologicalComplex_obj_d, horseshoe_d, eqToHom_refl, Category.id_comp, dite_eq_ite,
      œÄ‚ÇÇ_map, ‚ÜìreduceDite] at this
    rw [if_pos (by abel)] at this

    simp only [HomologicalComplex.shortComplexFunctor_obj_X‚ÇÅ, Functor.mapHomologicalComplex_obj_X,
      horseshoe_X, œÄ‚ÇÇ_obj, HomologicalComplex.shortComplexFunctor_obj_X‚ÇÇ,
      HomologicalComplex.shortComplexFunctor_obj_X‚ÇÉ, HomologicalComplex.shortComplexFunctor_obj_f,
      Functor.mapHomologicalComplex_obj_d, horseshoe_d, ChainComplex.prev, ‚ÜìreduceDite, œÄ‚ÇÇ_map,
      comp_œÑ‚ÇÇ, HomologicalComplex.shortComplexFunctor_obj_g, ChainComplex.next_nat_succ,
      exact_iso_comp]

    set g := _; change CategoryTheory.Exact _ g
    dsimp at g
    suffices g_eq : g = (horseshoeD A n).œÑ‚ÇÇ ‚â´ eqToHom (by simp) by
      rw [g_eq, exact_comp_iso]
      exact this
    simp only [g]
    generalize_proofs h1 h2
    rw [show (eqToHom h1).œÑ‚ÇÇ = eqToHom (by simp) from stupid_aux' _ _ (by simp), stupid_aux2'']
    simp

  suffices HomologicalComplex.homologyMap (horseshoeToSingle‚ÇÇ A) (n + 1) = (z2.iso z1).hom by
    rw [this]
    exact IsIso.of_iso _
  exact IsZero.eq_of_tgt z1 _ _

instance (n : ‚Ñï) : QuasiIsoAt (horseshoeToSingle‚ÇÉ A) (n + 1) := by
  rw [quasiIsoAt_iff_isIso_homologyMap]
  have z1 : IsZero <| ((ChainComplex.single‚ÇÄ _).obj A.X‚ÇÉ).homology (n + 1) := by
    apply HomologicalComplex.isZero_single_obj_homology
    simp

  have z2 : IsZero <| HomologicalComplex.homology (horseshoeChainComplex‚ÇÉ A) (n + 1) := by
    suffices e : HomologicalComplex.homology (horseshoeChainComplex‚ÇÉ A) (n + 1) ‚âÖ 0 from
      e.isZero_iff.mpr (isZero_zero _)

    refine exact_iff_homology_iso_zero _ |>.mp ?_ |>.some
    rw [‚Üê exact_iff_shortComplex_exact]
    have := horseshoeExact‚ÇÉ A n
    simp only [Functor.mapHomologicalComplex_obj_X, horseshoe_X, œÄ‚ÇÇ_obj,
      Functor.mapHomologicalComplex_obj_d, horseshoe_d, eqToHom_refl, Category.id_comp, dite_eq_ite,
      œÄ‚ÇÇ_map, ‚ÜìreduceDite] at this
    rw [if_pos (by abel)] at this

    simp only [HomologicalComplex.shortComplexFunctor_obj_X‚ÇÅ, Functor.mapHomologicalComplex_obj_X,
      horseshoe_X, œÄ‚ÇÉ_obj, HomologicalComplex.shortComplexFunctor_obj_X‚ÇÇ,
      HomologicalComplex.shortComplexFunctor_obj_X‚ÇÉ, HomologicalComplex.shortComplexFunctor_obj_f,
      Functor.mapHomologicalComplex_obj_d, horseshoe_d, ChainComplex.prev, ‚ÜìreduceDite, œÄ‚ÇÉ_map,
      comp_œÑ‚ÇÉ, HomologicalComplex.shortComplexFunctor_obj_g, ChainComplex.next_nat_succ,
      exact_iso_comp]

    set g := _; change CategoryTheory.Exact _ g
    dsimp at g
    suffices g_eq : g = (horseshoeD A n).œÑ‚ÇÉ ‚â´ eqToHom (by simp) by
      rw [g_eq, exact_comp_iso]
      exact this
    simp only [g]
    generalize_proofs h1 h2
    rw [show (eqToHom h1).œÑ‚ÇÉ = eqToHom (by simp) from stupid_aux'' _ _ (by simp), stupid_aux2''']
    simp

  suffices HomologicalComplex.homologyMap (horseshoeToSingle‚ÇÉ A) (n + 1) = (z2.iso z1).hom by
    rw [this]
    exact IsIso.of_iso _
  exact IsZero.eq_of_tgt z1 _ _

instance : _root_.QuasiIso (horseshoeToSingle‚ÇÅ A) where
  quasiIsoAt n := by
    cases n <;> infer_instance

instance : _root_.QuasiIso (horseshoeToSingle‚ÇÇ A) where
  quasiIsoAt n := by
    cases n <;> infer_instance

instance : _root_.QuasiIso (horseshoeToSingle‚ÇÉ A) where
  quasiIsoAt n := by
    cases n <;> infer_instance

/--
the first column is a projective resolution
-/
def horseshoeProjectiveResolution‚ÇÅ : ProjectiveResolution A.X‚ÇÅ where
  complex := horseshoeChainComplex‚ÇÅ A
  œÄ := horseshoeToSingle‚ÇÅ A

/--
the second column is a projective resolution
-/
def horseshoeProjectiveResolution‚ÇÇ : ProjectiveResolution A.X‚ÇÇ where
  complex := horseshoeChainComplex‚ÇÇ A
  œÄ := horseshoeToSingle‚ÇÇ A

/--
the third column is a projective resolution
-/
def horseshoeProjectiveResolution‚ÇÉ : ProjectiveResolution A.X‚ÇÉ where
  complex := horseshoeChainComplex‚ÇÉ A
  œÄ := horseshoeToSingle‚ÇÉ A

/--
each row splits
-/
def horseshoe_splitting (n : ‚Ñï) : ((horseshoe A).X n).Splitting :=
match n with
| 0 =>
{ r := biprod.fst
  s := biprod.inr
  f_r := by simp [horseshoeObj, horseshoeStep]
  s_g := by simp [horseshoeObj, horseshoeStep]
  id := by simp [horseshoeObj, horseshoeStep] }
| n + 1 =>
{ r := biprod.fst
  s := biprod.inr
  f_r := by simp [horseshoeObj, horseshoeStep]
  s_g := by simp [horseshoeObj, horseshoeStep]
  id := by simp [horseshoeObj, horseshoeStep] }

lemma horseshoe_g_comp_toSingle‚ÇÉ_f_commute (n : ‚Ñï) :
    ((horseshoe A).X n).g ‚â´ (horseshoeToSingle‚ÇÉ A).f n =
    (horseshoeToSingle‚ÇÇ A).f n ‚â´ ((ChainComplex.single‚ÇÄ _).map A.g).f n := by
  rcases n with (_|n)
  ¬∑ simp only [Nat.zero_eq, horseshoe_X, horseshoeObj, horseshoeStep, horseshoeBase_X‚ÇÇ,
    ChainComplex.single‚ÇÄ_obj_zero, horseshoeBase_X‚ÇÉ, horseshoeBase_g,
    ChainComplex.toSingle‚ÇÄEquiv_symm_apply_f_zero, œÄ‚ÇÉ_map, horseshoeBaseœÄ_œÑ‚ÇÉ,
    Functor.mapHomologicalComplex_obj_X, œÄ‚ÇÇ_obj, œÄ‚ÇÇ_map, horseshoeBaseœÄ_œÑ‚ÇÇ,
    ChainComplex.single‚ÇÄ_map_f_zero]
    aesop_cat
  ¬∑ simp only [horseshoe_X, horseshoeObj, horseshoeStep, horseshoeBase_X‚ÇÇ, horseshoeBase_X‚ÇÉ,
    horseshoeBase_g, horseshoeToSingle‚ÇÉ, Functor.mapHomologicalComplex_obj_X, œÄ‚ÇÉ_obj,
    horseshoeKer_X‚ÇÉ, horseshoeBaseœÄ_œÑ‚ÇÉ, Functor.mapHomologicalComplex_obj_d, horseshoe_d,
    eqToHom_refl, dite_eq_ite, œÄ‚ÇÉ_map, ChainComplex.toSingle‚ÇÄEquiv,
    HomologicalComplex.mkHomToSingle, Equiv.coe_fn_symm_mk, Nat.succ_ne_zero, ‚ÜìreduceDite,
    comp_zero, œÄ‚ÇÇ_obj, horseshoeToSingle‚ÇÇ, horseshoeKer_X‚ÇÅ, horseshoeBase_X‚ÇÅ, horseshoeBaseœÄ_œÑ‚ÇÅ,
    œÄ‚ÇÇ_map, horseshoeBaseœÄ_œÑ‚ÇÇ, zero_comp]

end CategoryTheory.ShortComplex

end
