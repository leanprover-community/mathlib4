/-
Copyright (c) 2025 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel, Jo√´l Riou
-/
import Mathlib.Algebra.Category.ModuleCat.Injective
import Mathlib.CategoryTheory.Abelian.GrothendieckAxioms.Connected
import Mathlib.CategoryTheory.Abelian.GrothendieckCategory.Coseparator
import Mathlib.CategoryTheory.Abelian.SerreClass.Bousfield
import Mathlib.CategoryTheory.Preadditive.Injective.Preserves
import Mathlib.CategoryTheory.Preadditive.LiftToFinset
import Mathlib.CategoryTheory.Preadditive.Yoneda.Limits

/-!
# The Gabriel-Popescu theorem

We prove the following Gabriel-Popescu theorem: if `C` is a Grothendieck abelian category and
`G` is a separator, then the functor `preadditiveCoyonedaObj G : C ‚•§ ModuleCat (End G)·µê·µí·µñ` sending
`X` to `Hom(G, X)` is fully faithful and has an exact left adjoint.

We closely follow the elementary proof given by Barry Mitchell.

The Gabriel-Popescu theorem can also be stated by saying that if `C` is a Grothendieck
abelian category, then `C` identifies to a localization of a category of modules
with respect a Serre class: we introduce a structure `GabrielPopescuPackage C`
which contains the necessary data and properties and show that `GabrielPopescuPackage C`
is nonempty.

## Future work

The left adjoint `tensorObj G` actually exists as soon as `C` is cocomplete and additive, so the
construction could be generalized.

## References

* [Barry Mitchell, *A quick proof of the Gabriel-Popesco theorem*][mitchell1981]
-/

universe w v v' u u'

open CategoryTheory Limits Abelian

namespace CategoryTheory.IsGrothendieckAbelian

section

variable {C : Type u} [Category.{v} C] [Abelian C] [IsGrothendieckAbelian.{v} C]

instance {G : C} : (preadditiveCoyonedaObj G).IsRightAdjoint :=
  isRightAdjoint_of_preservesLimits_of_isCoseparating (isCoseparator_coseparator _) _

/-- The left adjoint of the functor `Hom(G, ¬∑)`, which can be thought of as `¬∑ ‚äó G`. -/
noncomputable def tensorObj (G : C) : ModuleCat (End G)·µê·µí·µñ ‚•§ C :=
  (preadditiveCoyonedaObj G).leftAdjoint

/-- The tensor-hom adjunction `(¬∑ ‚äó G) ‚ä£ Hom(G, ¬∑)`. -/
noncomputable def tensorObjPreadditiveCoyonedaObjAdjunction (G : C) :
    tensorObj G ‚ä£ preadditiveCoyonedaObj G :=
  Adjunction.ofIsRightAdjoint _

instance {G : C} : (tensorObj G).IsLeftAdjoint :=
  (tensorObjPreadditiveCoyonedaObjAdjunction G).isLeftAdjoint

namespace GabrielPopescuAux

open CoproductsFromFiniteFiltered

/-- This is the map `‚®Å‚Çò G ‚ü∂ A` induced by `M ‚ü∂ Hom(G, A)`. -/
noncomputable def d {G A : C} {M : ModuleCat (End G)·µê·µí·µñ}
    (g : M ‚ü∂ ModuleCat.of (End G)·µê·µí·µñ (G ‚ü∂ A)) : ‚àê (fun (_ : M) => G) ‚ü∂ A :=
  Sigma.desc fun (m : M) => g m

@[reassoc]
theorem Œπ_d {G A : C} {M : ModuleCat (End G)·µê·µí·µñ} (g : M ‚ü∂ ModuleCat.of (End G)·µê·µí·µñ (G ‚ü∂ A)) (m : M) :
    Sigma.Œπ _ m ‚â´ d g = g.hom m := by
  simp [d]

attribute [local instance] IsFiltered.isConnected in
/-- This is the "Lemma" in [mitchell1981]. -/
theorem kernel_Œπ_d_comp_d {G : C} (hG : IsSeparator G) {A B : C} {M : ModuleCat (End G)·µê·µí·µñ}
    (g : M ‚ü∂ ModuleCat.of (End G)·µê·µí·µñ (G ‚ü∂ A)) (hg : Mono g)
    (f : M ‚ü∂ ModuleCat.of (End G)·µê·µí·µñ (G ‚ü∂ B)) :
    kernel.Œπ (d g) ‚â´ d f = 0 := by
  refine (isColimitFiniteSubproductsCocone (fun (_ : M) => G)).pullback_zero_ext (fun F => ?_)
  dsimp only [liftToFinsetObj_obj, Discrete.functor_obj_eq_as, finiteSubcoproductsCocone_pt,
    Functor.const_obj_obj]
  classical
  rw [finiteSubcoproductsCocone_Œπ_app_eq_sum, ‚Üê pullback.condition_assoc]
  refine (Preadditive.isSeparator_iff G).1 hG _ (fun h => ?_)
  rw [Preadditive.comp_sum_assoc, Preadditive.comp_sum_assoc, Preadditive.sum_comp]
  simp only [Category.assoc, Œπ_d]
  let r (x : F) : (End G)·µê·µí·µñ := MulOpposite.op (h ‚â´ pullback.fst _ _ ‚â´ Sigma.œÄ _ x)
  suffices ‚àë x ‚àà F.attach, r x ‚Ä¢ f.hom x.1.as = 0 by simpa [End.smul_left, r] using this
  simp only [‚Üê LinearMap.map_smul, ‚Üê map_sum]
  suffices ‚àë x ‚àà F.attach, r x ‚Ä¢ x.1.as = 0 by simp [this]
  simp only [‚Üê g.hom.map_eq_zero_iff ((ModuleCat.mono_iff_injective _).1 hg), map_sum, map_smul]
  simp only [‚Üê Œπ_d g, End.smul_left, MulOpposite.unop_op, Category.assoc, r]
  simp [‚Üê Preadditive.comp_sum, ‚Üê Preadditive.sum_comp', pullback.condition_assoc]

theorem exists_d_comp_eq_d {G : C} (hG : IsSeparator G) {A} (B : C) [Injective B]
    {M : ModuleCat (End G)·µê·µí·µñ} (g : M ‚ü∂ ModuleCat.of (End G)·µê·µí·µñ (G ‚ü∂ A)) (hg : Mono g)
    (f : M ‚ü∂ ModuleCat.of (End G)·µê·µí·µñ (G ‚ü∂ B)) : ‚àÉ (l : A ‚ü∂ B), d g ‚â´ l = d f := by
  let l‚ÇÅ : image (d g) ‚ü∂ B := epiDesc (factorThruImage (d g)) (d f) (by
    rw [‚Üê kernelFactorThruImage_hom_comp_Œπ, Category.assoc, kernel_Œπ_d_comp_d hG _ hg, comp_zero])
  let l‚ÇÇ : A ‚ü∂ B := Injective.factorThru l‚ÇÅ (Limits.image.Œπ (d g))
  refine ‚ü®l‚ÇÇ, ?_‚ü©
  simp only [l‚ÇÇ, l‚ÇÅ]
  conv_lhs => congr; rw [‚Üê Limits.image.fac (d g)]
  simp [-Limits.image.fac]

end GabrielPopescuAux

open GabrielPopescuAux

/-- Faithfulness follows because `G` is a separator, see
`isSeparator_iff_faithful_preadditiveCoyonedaObj`. -/
theorem GabrielPopescu.full (G : C) (hG : IsSeparator G) : (preadditiveCoyonedaObj G).Full where
  map_surjective {A B} f := by
    have := (isSeparator_iff_epi G).1 hG A
    have h := kernel_Œπ_d_comp_d hG (ùüô _) inferInstance f
    simp only [ModuleCat.hom_id, LinearMap.id_coe, id_eq, d] at h
    refine ‚ü®epiDesc _ _ h, ?_‚ü©
    ext q
    simpa [-comp_epiDesc] using Sigma.Œπ _ q ‚â´= comp_epiDesc _ _ h

theorem GabrielPopescu.preservesInjectiveObjects (G : C) (hG : IsSeparator G) :
    (preadditiveCoyonedaObj G).PreservesInjectiveObjects where
  injective_obj {B} hB := by
    rw [‚Üê Module.injective_iff_injective_object]
    simp only [preadditiveCoyonedaObj_obj_carrier, preadditiveCoyonedaObj_obj_isAddCommGroup,
      preadditiveCoyonedaObj_obj_isModule]
    refine Module.Baer.injective (fun M g => ?_)
    have h := exists_d_comp_eq_d hG B (ModuleCat.ofHom
      ‚ü®‚ü®fun i => i.1.unop, by aesop_cat‚ü©, by aesop_cat‚ü©) ?_ (ModuleCat.ofHom g)
    ¬∑ obtain ‚ü®l, hl‚ü© := h
      refine ‚ü®((preadditiveCoyonedaObj G).map l).hom ‚àò‚Çó
        (Preadditive.homSelfLinearEquivEndMulOpposite G).symm.toLinearMap, ?_‚ü©
      intro f hf
      simpa [d] using Sigma.Œπ _ ‚ü®f, hf‚ü© ‚â´= hl
    ¬∑ rw [ModuleCat.mono_iff_injective]
      aesop_cat

/-- Right exactness follows because `tensorObj G` is a left adjoint. -/
theorem GabrielPopescu.preservesFiniteLimits (G : C) (hG : IsSeparator G) :
    PreservesFiniteLimits (tensorObj G) := by
  have := preservesInjectiveObjects G hG
  have : (tensorObj G).PreservesMonomorphisms :=
    (tensorObj G).preservesMonomorphisms_of_adjunction_of_preservesInjectiveObjects
      (tensorObjPreadditiveCoyonedaObjAdjunction G)
  have : PreservesBinaryBiproducts (tensorObj G) :=
    preservesBinaryBiproducts_of_preservesBinaryCoproducts _
  have : (tensorObj G).Additive := Functor.additive_of_preservesBinaryBiproducts _
  have : (tensorObj G).PreservesHomology :=
    (tensorObj G).preservesHomology_of_preservesMonos_and_cokernels
  exact (tensorObj G).preservesFiniteLimits_of_preservesHomology

lemma GabrielPopescu.tensorObj_isLocalization (G : C) (hG : IsSeparator G) :
    letI := preservesFiniteLimits G hG
    (tensorObj G).IsLocalization ((tensorObj G).kernel.isoModSerre) := by
  letI := preservesFiniteLimits G hG
  have := full G hG
  have := (isSeparator_iff_faithful_preadditiveCoyonedaObj G).1 hG
  exact isLocalization_isoModSerre_kernel_of_leftAdjoint
    (tensorObjPreadditiveCoyonedaObjAdjunction G)

end

section

variable (C : Type u) [Category.{v} C]

/-- A Gabriel-Popescu package for an abelian category `C` consists in
the data of a Serre class `P` in a category of modules such
that `C` identifies to the localization of `ModuleCat R` with
respect to `P`, in such a way that the (exact) localization functor has
a fully faithful right adjunction. -/
structure GabrielPopescuPackage [Abelian C] where
  /-- the underlying type of a ring -/
  R : Type w
  /-- `R` is a ring -/
  ring : Ring R := by infer_instance
  /-- a Serre class in the category of modules over `R`. -/
  P : ObjectProperty (ModuleCat.{w} R)
  isSerreClass : P.IsSerreClass := by infer_instance
  /-- the localization functor -/
  L : ModuleCat.{w} R ‚•§ C
  /-- the right adjoint of the localization functor -/
  F : C ‚•§ ModuleCat.{w} R
  /-- the adjunction -/
  adj : L ‚ä£ F
  full : F.Full := by infer_instance
  faithful : F.Faithful := by infer_instance
  /-- the localization functor preserves finite limits (TODO: prove
  that it automatically follows from the `isLocalization` field.) -/
  preservesFiniteLimits : PreservesFiniteLimits L := by infer_instance
  isLocalization : L.IsLocalization P.isoModSerre := by infer_instance


variable [Abelian C]

namespace GabrielPopescuPackage

attribute [instance] ring isSerreClass full faithful preservesFiniteLimits isLocalization

variable {C} (p : GabrielPopescuPackage.{w} C)

instance isRightAdjoint : p.F.IsRightAdjoint := ‚ü®_, ‚ü®p.adj‚ü©‚ü©

instance isLeftAdjoint : p.L.IsLeftAdjoint := ‚ü®_, ‚ü®p.adj‚ü©‚ü©

instance : p.L.Additive := Functor.additive_of_preserves_binary_products _

instance : p.F.Additive := Functor.additive_of_preserves_binary_products _

instance reflective : Reflective p.F where
  adj := p.adj

/-- A Gabriel-Popescu can be transported from a category to an equivalent category. -/
def ofEquivalence {D : Type u'} [Category.{v'} D] [Abelian D] (e : C ‚âå D) :
    GabrielPopescuPackage.{w} D where
  R := p.R
  P := p.P
  L := p.L ‚ãô e.functor
  F := e.inverse ‚ãô p.F
  adj := p.adj.comp e.toAdjunction

end GabrielPopescuPackage

variable {C} in
/-- The Gabriel-Popescu package obtained from a generator of a Grothendieck abelian category. -/
noncomputable def GabrielPopescu.package
    [IsGrothendieckAbelian.{v} C] (G : C) (hG : IsSeparator G) :
    GabrielPopescuPackage.{v} C := by
  have := preservesFiniteLimits G hG
  have := full G hG
  have := (isSeparator_iff_faithful_preadditiveCoyonedaObj G).1 hG
  exact {
    R := (End G)·µê·µí·µñ
    P := (tensorObj G).kernel
    L := tensorObj G
    F := preadditiveCoyonedaObj G
    adj := tensorObjPreadditiveCoyonedaObjAdjunction G
    isLocalization := tensorObj_isLocalization G hG }

instance [IsGrothendieckAbelian.{w} C] :
    Nonempty (GabrielPopescuPackage.{w} C) :=
  ‚ü®GabrielPopescuPackage.ofEquivalence.{w}
    (GabrielPopescu.package.{w} _ (isSeparator_separator _)) (ShrinkHoms.equivalence C).symm‚ü©

/-- A choice of a Gabriel-Popescu package for any Grothendieck abelian category. -/
noncomputable def gabrielPopescuPackage [IsGrothendieckAbelian.{w} C] :
    GabrielPopescuPackage.{w} C :=
  Classical.arbitrary _

end

end CategoryTheory.IsGrothendieckAbelian
