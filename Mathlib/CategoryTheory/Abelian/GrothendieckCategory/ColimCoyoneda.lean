/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Abelian.GrothendieckCategory.Subobject
import Mathlib.CategoryTheory.Limits.FunctorCategory.EpiMono
import Mathlib.CategoryTheory.MorphismProperty.Limits

/-!
# Morphisms to a colimit in a Grothendieck abelian category

Let `C : Type u` be an abelian category `[Category.{v} C]` which
satisfies `IsGrothendieckAbelian.{w} C`. We may expect
that all the objects `X : C` are `Œ∫`-presentable for some regular
cardinal `Œ∫`. However, we only prove a weaker result (which
is enough in order to obtain the existence of enough
injectives (TODO)): let `Œ∫` be a big enough regular
cardinal `Œ∫` such that if `Y : J ‚•§ C` is a functor from
a `Œ∫`-filtered category, and `c : Cocone Y` is a colimit cocone,
then the map from the colimit of the types `X ‚ü∂ Y j` to
`X ‚ü∂ c.pt` is injective, and it is bijective under the
additional assumption that for any map `f : j ‚ü∂ j'` in `J`,
`Y.map f` is a monomorphism, see
`IsGrothendieckAbelian.preservesColimit_coyoneda_obj_of_mono`.

-/

universe w v u

namespace CategoryTheory

open Limits Opposite

attribute [local instance] IsFiltered.isConnected

namespace IsGrothendieckAbelian

variable {C : Type u} [Category.{v} C] [Abelian C] [IsGrothendieckAbelian.{w} C]
  {X : C} {J : Type w} [SmallCategory J]

namespace IsPresentable

variable {Y : J ‚•§ C} {c : Cocone Y} (hc : IsColimit c)

namespace injectivity‚ÇÄ

variable {j‚ÇÄ : J} (y : X ‚ü∂ Y.obj j‚ÇÄ) (hy : y ‚â´ c.Œπ.app j‚ÇÄ = 0)

/-!
Given `y : X ‚ü∂ Y.obj j‚ÇÄ`, we introduce a natural
transformation `g : X ‚ü∂ Y.obj t.right` for `t : Under j‚ÇÄ`.
We consider the kernel of this morphism: we have a natural exact sequence
`kernel (g y) ‚ü∂ X ‚ü∂ Y.obj t.right` for all `t : Under j‚ÇÄ`. Under the
assumption that the composition `y ‚â´ c.Œπ.app j‚ÇÄ : X ‚ü∂ c.pt` is zero,
we get that after passing to the colimit, the right map `X ‚ü∂ c.pt` is
zero, which implies that the left map `f : colimit (kernel (g y)) ‚ü∂ X`
is an epimorphism (see `epi_f`). If `Œ∫` is a regular cardinal that is
bigger than the cardinality of `Subobject X` and `J` is `Œ∫`-filtered,
it follows that for some `œÜ : j‚ÇÄ ‚ü∂ j` in `Under j‚ÇÄ`,
the inclusion `(kernel.Œπ (g y)).app j` is an isomorphism,
which implies that that `y ‚â´ Y.map œÜ = 0` (see the lemma `injectivity‚ÇÄ`).
-/

/-- The natural transformation `X ‚ü∂ Y.obj t.right` for `t : Under j‚ÇÄ`
that is induced by `y : X ‚ü∂ Y.obj j‚ÇÄ`. -/
@[simps]
def g : (Functor.const _).obj X ‚ü∂ Under.forget j‚ÇÄ ‚ãô Y where
  app t := y ‚â´ Y.map t.hom
  naturality t‚ÇÅ t‚ÇÇ f := by
    dsimp
    simp only [Category.id_comp, Category.assoc, ‚Üê Functor.map_comp, Under.w]

/-- The obvious morphism `colimit (kernel (g y)) ‚ü∂ X` (which is an epimorphism
if `J` is filtered, see `epi_f`.). -/
noncomputable def f : colimit (kernel (g y)) ‚ü∂ X :=
  IsColimit.map (colimit.isColimit _) (constCocone _ X) (kernel.Œπ _)

lemma hf (j : Under j‚ÇÄ) :
    colimit.Œπ (kernel (g y)) j ‚â´ f y = (kernel.Œπ (g y)).app j :=
  (IsColimit.Œπ_map _ _ _ _).trans (by simp)

variable {y} in
include hc hy in
lemma epi_f [IsFiltered J] : Epi (f y) := by
  exact (colim.exact_mapShortComplex
    ((ShortComplex.mk _ _ (kernel.condition (g y))).exact_of_f_is_kernel
      (kernelIsKernel (g y)))
    (colimit.isColimit _) (isColimitConstCocone _ _)
    ((Functor.Final.isColimitWhiskerEquiv (Under.forget j‚ÇÄ) c).symm hc) (f y) 0
    (fun j ‚Ü¶ by simpa using hf y j)
    (fun _ ‚Ü¶ by simpa using hy.symm)).epi_f rfl

/-- The kernel of `g y` gives a family of subobjects of `X` indexed by `Under j`0`, and
we consider it as a functor `Under j‚ÇÄ ‚•§ MonoOver X`. -/
@[simps]
noncomputable def F : Under j‚ÇÄ ‚•§ MonoOver X where
  obj j := MonoOver.mk' ((kernel.Œπ (g y)).app j)
  map {j j'} f := MonoOver.homMk ((kernel (g y)).map f)

end injectivity‚ÇÄ

section

variable {Œ∫ : Cardinal.{w}} [hŒ∫ : Fact Œ∫.IsRegular] [IsCardinalFiltered J Œ∫]
  (hXŒ∫ : HasCardinalLT (Subobject X) Œ∫)

include hXŒ∫ hc

open injectivity‚ÇÄ in
lemma injectivity‚ÇÄ {j‚ÇÄ : J} (y : X ‚ü∂ Y.obj j‚ÇÄ) (hy : y ‚â´ c.Œπ.app j‚ÇÄ = 0) :
    ‚àÉ (j : J) (œÜ : j‚ÇÄ ‚ü∂ j), y ‚â´ Y.map œÜ = 0 := by
  have := isFiltered_of_isCardinalDirected J Œ∫
  obtain ‚ü®j, h‚ü© := exists_isIso_of_functor_from_monoOver (F y) hXŒ∫ _
      (colimit.isColimit (kernel (g y))) (f y) (fun j ‚Ü¶ by simpa using hf y j)
      (epi_f hc hy)
  dsimp at h
  refine ‚ü®j.right, j.hom, ?_‚ü©
  simpa only [‚Üê cancel_epi ((kernel.Œπ (g y)).app j), comp_zero]
    using NatTrans.congr_app (kernel.condition (g y)) j

lemma injectivity (j‚ÇÄ : J) (y‚ÇÅ y‚ÇÇ : X ‚ü∂ Y.obj j‚ÇÄ)
    (hy : y‚ÇÅ ‚â´ c.Œπ.app j‚ÇÄ = y‚ÇÇ ‚â´ c.Œπ.app j‚ÇÄ) :
    ‚àÉ (j : J) (œÜ : j‚ÇÄ ‚ü∂ j), y‚ÇÅ ‚â´ Y.map œÜ = y‚ÇÇ ‚â´ Y.map œÜ := by
  obtain ‚ü®j, œÜ, hœÜ‚ü© := injectivity‚ÇÄ hc hXŒ∫ (y‚ÇÅ - y‚ÇÇ)
    (by rw [Preadditive.sub_comp, sub_eq_zero, hy])
  exact ‚ü®j, œÜ, by simpa only [Preadditive.sub_comp, sub_eq_zero] using hœÜ‚ü©

end

namespace surjectivity

variable (z : X ‚ü∂ c.pt)

/-!
Let `z : X ‚ü∂ c.pt` (where `c` is a colimit cocone for `Y : J ‚•§ C`).
We consider the pullback of `c.Œπ` and of the constant
map `(Functor.const J).map z`. If we assume that `c.Œπ` is a monomorphism,
then this pullback evaluated at `j : J` can be identified to a subobject of `X`
(this is the inverse image by `z` of `Y.obj j` considered as a subobject of `c.pt`).
This corresponds to a functor `F z : J ‚•§ MonoOver X`, and when taking the colimit
(computed in `C`), we obtain an epimorphism
`f z : colimit (pullback c.Œπ ((Functor.const J).map z)) ‚ü∂ X`
when `J` is filtered (see `epi_f`). If `Œ∫` is a regular cardinal that is
bigger than the cardinality of `Subobject X` and `J` is `Œ∫`-filtered,
we deduce that `z` factors as `X ‚ü∂ Y.obj j ‚ü∂ c.pt` for some `j`
(see the lemma `surjectivity`).
-/

/-- The functor `J ‚•§ MonoOver X` which sends `j : J` to the inverse image by `z : X ‚ü∂ c.pt`
of the subobject `Y.obj j` of `c.pt`; it is defined here as the object in `MonoOver X`
corresponding to the monomorphism
`(pullback.snd c.Œπ ((Functor.const _).map z)).app j`. -/
@[simps]
noncomputable def F [Mono c.Œπ] : J ‚•§ MonoOver X where
  obj j := MonoOver.mk' ((pullback.snd c.Œπ ((Functor.const _).map z)).app j)
  map {j j'} f := MonoOver.homMk ((pullback c.Œπ ((Functor.const _).map z)).map f)

/-- The canonical map `colimit (pullback c.Œπ ((Functor.const J).map z)) ‚ü∂ X`,
which is an isomorphism when `J` is filtered, see `isIso_f`. -/
noncomputable def f : colimit (pullback c.Œπ ((Functor.const J).map z)) ‚ü∂ X :=
  colimit.desc _ (Cocone.mk X
    { app j := (pullback.snd c.Œπ ((Functor.const _).map z)).app j })

lemma hf (j : J) :
    colimit.Œπ (pullback c.Œπ ((Functor.const J).map z)) j ‚â´ f z =
      (pullback.snd c.Œπ ((Functor.const J).map z)).app j :=
  colimit.Œπ_desc _ _

include hc

lemma isIso_f [IsFiltered J] : IsIso (f z) := by
  refine ((MorphismProperty.isomorphisms C).arrow_mk_iso_iff ?_).1
    (MorphismProperty.of_isPullback
      ((IsPullback.of_hasPullback c.Œπ ((Functor.const _).map z)).map colim) ?_)
  ¬∑ refine Arrow.isoMk (Iso.refl _)
      (IsColimit.coconePointUniqueUpToIso (colimit.isColimit _) (isColimitConstCocone J X)) ?_
    dsimp
    ext j
    rw [Category.id_comp, Œπ_colimMap_assoc, colimit.comp_coconePointUniqueUpToIso_hom,
      constCocone_Œπ, NatTrans.id_app, Category.comp_id]
    apply hf
  ¬∑ refine ((MorphismProperty.isomorphisms C).arrow_mk_iso_iff ?_).2
      (inferInstanceAs (IsIso (ùüô c.pt)))
    exact Arrow.isoMk (IsColimit.coconePointUniqueUpToIso (colimit.isColimit Y) hc)
      (IsColimit.coconePointUniqueUpToIso (colimit.isColimit _)
        (isColimitConstCocone J c.pt))

lemma epi_f [IsFiltered J] : Epi (f z) := by
  have := isIso_f hc z
  infer_instance

end surjectivity

include hc in
open surjectivity in
lemma surjectivity [‚àÄ (j j' : J) (œÜ : j ‚ü∂ j'), Mono (Y.map œÜ)]
    {Œ∫ : Cardinal.{w}} [hŒ∫ : Fact Œ∫.IsRegular] [IsCardinalFiltered J Œ∫]
    (hXŒ∫ : HasCardinalLT (Subobject X) Œ∫) (z : X ‚ü∂ c.pt) :
    ‚àÉ (j‚ÇÄ : J) (y : X ‚ü∂ Y.obj j‚ÇÄ), z = y ‚â´ c.Œπ.app j‚ÇÄ := by
  have := isFiltered_of_isCardinalDirected J Œ∫
  have := hc.mono_Œπ_app_of_isFiltered
  have := NatTrans.mono_of_mono_app c.Œπ
  obtain ‚ü®j, _‚ü© := exists_isIso_of_functor_from_monoOver (F z) hXŒ∫ _
    (colimit.isColimit _) (f z) (hf z) (epi_f hc z)
  refine ‚ü®j, inv ((F z).obj j).obj.hom ‚â´ (pullback.fst c.Œπ _).app j, ?_‚ü©
  dsimp
  rw [Category.assoc, IsIso.eq_inv_comp, ‚Üê NatTrans.comp_app, pullback.condition,
    NatTrans.comp_app, Functor.const_map_app]

end IsPresentable

open IsPresentable in
/-- If `X` is an object in a Grothendieck abelian category, then
the functor `coyoneda.obj (op X)` commutes with colimits corresponding
to diagrams of monomorphisms indexed by `Œ∫`-filtered categories
for a big enough regular cardinal `Œ∫`. -/
lemma preservesColimit_coyoneda_obj_of_mono
    (Y : J ‚•§ C) {Œ∫ : Cardinal.{w}} [hŒ∫ : Fact Œ∫.IsRegular]
    [IsCardinalFiltered J Œ∫] (hXŒ∫ : HasCardinalLT (Subobject X) Œ∫)
    [‚àÄ (j j' : J) (œÜ : j ‚ü∂ j'), Mono (Y.map œÜ)] :
    PreservesColimit Y ((coyoneda.obj (op X))) where
  preserves {c} hc := ‚ü®by
    have := isFiltered_of_isCardinalDirected J Œ∫
    exact Types.FilteredColimit.isColimitOf' _ _
      (surjectivity hc hXŒ∫) (injectivity hc hXŒ∫)‚ü©

end IsGrothendieckAbelian

end CategoryTheory
