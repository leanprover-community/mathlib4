/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Abelian.GrothendieckCategory.Subobject
import Mathlib.CategoryTheory.Limits.FunctorCategory.EpiMono
import Mathlib.CategoryTheory.MorphismProperty.Limits

/-!
# Morphisms to a colimit in a Grothendieck abelian category

Let `C : Type u` be an abelian category `[Category.{v} C]` which
satisfies `IsGrothendieckAbelian.{w} C`. Then, we may expect
that all objects `X : C` are `Œ∫`-presentable for some regular
cardinal `Œ∫`. However, we prove only a weaker result (which
is enough in order to obtain the existence of enough
injectives): let `Œ∫` be a big enough regular cardinal `Œ∫` such that
if `Y : J ‚•§ C` is a functor from a `Œ∫`-filtered
category, and `c : Cocone Y` is a colimit cocone,
then the map from the colimit of the types `X ‚ü∂ Y j` to
`X ‚ü∂ c.pt` is injective, and it is bijective under the
additional assumption that for any map `f : j ‚ü∂ j'` in `J`,
`Y.map f` is a monomorphism.

-/

universe w v' v u' u

namespace CategoryTheory

open Limits Opposite

attribute [local instance] IsFiltered.isConnected

namespace IsGrothendieckAbelian

variable {C : Type u} [Category.{v} C] [Abelian C] [IsGrothendieckAbelian.{w} C]
  {X : C} {J : Type w} [SmallCategory J] (F : J ‚•§ MonoOver X)

end IsGrothendieckAbelian

variable {C : Type u} [Category.{v} C] [Abelian C]

variable [IsGrothendieckAbelian.{w} C]

namespace IsGrothendieckAbelian

namespace IsPresentable

variable {X : C} {J : Type w} [SmallCategory J] (Y : J ‚•§ C)

section injectivity

variable {Y} {c : Cocone Y} (hc : IsColimit c) {j‚ÇÄ : J}
  {y : X ‚ü∂ Y.obj j‚ÇÄ} (hy : y ‚â´ c.Œπ.app j‚ÇÄ = 0)

namespace injectivity‚ÇÄ

variable (y)

@[simps]
def Œ≥ : (Functor.const _).obj X ‚ü∂ Under.forget j‚ÇÄ ‚ãô Y where
  app t := y ‚â´ Y.map t.hom
  naturality t‚ÇÅ t‚ÇÇ f := by
    dsimp
    simp only [Category.id_comp, Category.assoc, ‚Üê Functor.map_comp, Under.w]

@[simps]
noncomputable def S : ShortComplex (Under j‚ÇÄ ‚•§ C) :=
  ShortComplex.mk _ _ (kernel.condition (Œ≥ y))

instance : Mono (S y).f := by dsimp; infer_instance

omit [IsGrothendieckAbelian C] in
lemma S_exact : (S y).Exact :=
  (S y).exact_of_f_is_kernel (kernelIsKernel _)

variable (c j‚ÇÄ) in
abbrev c‚ÇÉ : Cocone (Under.forget j‚ÇÄ ‚ãô Y) := c.whisker _

@[simps]
noncomputable def F : Under j‚ÇÄ ‚•§ MonoOver X where
  obj j := MonoOver.mk' ((kernel.Œπ (Œ≥ y)).app j)
  map {j j'} f := MonoOver.homMk ((kernel (Œ≥ y)).map f)

noncomputable def f : colimit (kernel (Œ≥ y)) ‚ü∂ X :=
  IsColimit.map (colimit.isColimit _) (constCocone _ X) (kernel.Œπ _)

lemma hf (j : Under j‚ÇÄ) :
    colimit.Œπ (kernel (Œ≥ y)) j ‚â´ f y = (kernel.Œπ (Œ≥ y)).app j :=
  (IsColimit.Œπ_map _ _ _ _).trans (by simp)

variable {y}

variable (Œ∫ : Cardinal.{w}) [hŒ∫ : Fact Œ∫.IsRegular] [IsCardinalFiltered J Œ∫]

variable (j‚ÇÄ) in
noncomputable def hc‚ÇÉ : IsColimit (c‚ÇÉ c j‚ÇÄ) :=
  have := isFiltered_of_isCardinalDirected J Œ∫
  (Functor.Final.isColimitWhiskerEquiv _ _).symm hc

include Œ∫ hŒ∫ hc hy in
lemma epi_f : Epi (f y) := by
  have := isFiltered_of_isCardinalDirected J Œ∫
  exact (colim.exact_mapShortComplex (S_exact y)
    (colimit.isColimit _) (isColimitConstCocone _ _) (hc‚ÇÉ hc j‚ÇÄ Œ∫) (f y) 0
    (fun j ‚Ü¶ by simpa using hf y j) (fun _ ‚Ü¶ by simpa using hy.symm)).epi_f rfl

end injectivity‚ÇÄ

variable {Œ∫ : Cardinal.{w}} [hŒ∫ : Fact Œ∫.IsRegular] [IsCardinalFiltered J Œ∫]
  (hXŒ∫ : HasCardinalLT (Subobject X) Œ∫)

include hXŒ∫ hc hy in
open injectivity‚ÇÄ in
lemma injectivity‚ÇÄ : ‚àÉ (j : J) (œÜ : j‚ÇÄ ‚ü∂ j), y ‚â´ Y.map œÜ = 0 := by
  obtain ‚ü®j, h‚ü© := exists_isIso_of_functor_from_monoOver (F y) hXŒ∫ _
      (colimit.isColimit (kernel (Œ≥ y))) (f y) (fun j ‚Ü¶ by simpa using hf y j)
      (epi_f hc hy Œ∫)
  dsimp at h
  refine ‚ü®j.right, j.hom, ?_‚ü©
  simpa only [‚Üê cancel_epi ((kernel.Œπ (Œ≥ y)).app j), comp_zero]
    using NatTrans.congr_app (kernel.condition (Œ≥ y)) j

end injectivity

section surjectivity

variable {Y} {c : Cocone Y} (hc : IsColimit c)

namespace surjectivity

variable (z : X ‚ü∂ c.pt)

@[simps]
noncomputable def F [Mono c.Œπ] : J ‚•§ MonoOver X where
  obj j := MonoOver.mk' ((pullback.snd c.Œπ ((Functor.const _).map z)).app j)
  map {j j'} f := MonoOver.homMk ((pullback c.Œπ ((Functor.const _).map z)).map f)

noncomputable def f : colimit (pullback c.Œπ ((Functor.const J).map z)) ‚ü∂ X :=
  colimit.desc _ (Cocone.mk X
    { app j := (pullback.snd c.Œπ ((Functor.const _).map z)).app j })

lemma hf (j : J) :
    colimit.Œπ (pullback c.Œπ ((Functor.const J).map z)) j ‚â´ f z =
      (pullback.snd c.Œπ ((Functor.const J).map z)).app j :=
  colimit.Œπ_desc _ _

variable (Œ∫ : Cardinal.{w}) [hŒ∫ : Fact Œ∫.IsRegular] [IsCardinalFiltered J Œ∫]

include hc Œ∫ in
lemma epi_f : Epi (f z) := by
  have := isFiltered_of_isCardinalDirected J Œ∫
  have isPullback := (IsPullback.of_hasPullback c.Œπ ((Functor.const _).map z)).map colim
  have : IsIso (f z) := by
    refine ((MorphismProperty.isomorphisms C).arrow_mk_iso_iff ?_).1
      (MorphismProperty.of_isPullback isPullback ?_)
    ¬∑ refine Arrow.isoMk (Iso.refl _)
        (IsColimit.coconePointUniqueUpToIso (colimit.isColimit _) (isColimitConstCocone J X)) ?_
      dsimp
      ext j
      dsimp
      rw [Category.id_comp, Œπ_colimMap_assoc, colimit.comp_coconePointUniqueUpToIso_hom,
        constCocone_Œπ, NatTrans.id_app, Category.comp_id]
      apply hf
    ¬∑ refine ((MorphismProperty.isomorphisms C).arrow_mk_iso_iff ?_).2
        (inferInstanceAs (IsIso (ùüô c.pt)))
      exact Arrow.isoMk (IsColimit.coconePointUniqueUpToIso (colimit.isColimit Y) hc)
        (IsColimit.coconePointUniqueUpToIso (colimit.isColimit _)
          (isColimitConstCocone J c.pt))
  infer_instance

end surjectivity

variable [‚àÄ (j j' : J) (œÜ : j ‚ü∂ j'), Mono (Y.map œÜ)]
  {Œ∫ : Cardinal.{w}} [hŒ∫ : Fact Œ∫.IsRegular] [IsCardinalFiltered J Œ∫]
  (hXŒ∫ : HasCardinalLT (Subobject X) Œ∫) (z : X ‚ü∂ c.pt)

include Œ∫ hXŒ∫ hc in
open surjectivity in
lemma surjectivity : ‚àÉ (j‚ÇÄ : J) (y : X ‚ü∂ Y.obj j‚ÇÄ), z = y ‚â´ c.Œπ.app j‚ÇÄ := by
  have := isFiltered_of_isCardinalDirected J Œ∫
  have := hc.mono_Œπ_app_of_isFiltered
  have := NatTrans.mono_of_mono_app c.Œπ
  obtain ‚ü®j, _‚ü© := exists_isIso_of_functor_from_monoOver (F z) hXŒ∫ _
    (colimit.isColimit _) (f z) (hf z) (epi_f hc z Œ∫)
  refine ‚ü®j, inv ((F z).obj j).obj.hom ‚â´ (pullback.fst c.Œπ _).app j, ?_‚ü©
  dsimp
  rw [Category.assoc, IsIso.eq_inv_comp, ‚Üê NatTrans.comp_app, pullback.condition,
    NatTrans.comp_app, Functor.const_map_app]

end surjectivity

variable {Œ∫ : Cardinal.{w}} [hŒ∫ : Fact Œ∫.IsRegular] [IsCardinalFiltered J Œ∫]
  (hXŒ∫ : HasCardinalLT (Subobject X) Œ∫)

include hXŒ∫ in
lemma preservesColimit_of_mono [‚àÄ (j j' : J) (œÜ : j ‚ü∂ j'), Mono (Y.map œÜ)] :
    PreservesColimit Y ((coyoneda.obj (op X))) where
  preserves {c} hc := ‚ü®by
    have := isFiltered_of_isCardinalDirected J Œ∫
    exact Types.FilteredColimit.isColimitOf' _ _
      (surjectivity hc hXŒ∫) (fun j‚ÇÄ y‚ÇÅ y‚ÇÇ hy ‚Ü¶ by
        dsimp at y‚ÇÅ y‚ÇÇ hy ‚ä¢
        rw [‚Üê sub_eq_zero, ‚Üê Preadditive.sub_comp] at hy
        obtain ‚ü®j, f, hf‚ü© := injectivity‚ÇÄ hc hy hXŒ∫
        exact ‚ü®j, f, by simpa only [Preadditive.sub_comp, sub_eq_zero] using hf‚ü©)‚ü©

end IsPresentable

end IsGrothendieckAbelian

end CategoryTheory
