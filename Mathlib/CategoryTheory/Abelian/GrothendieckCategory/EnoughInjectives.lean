/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.CategoryTheory.MorphismProperty.Limits
import Mathlib.CategoryTheory.Preadditive.Injective.LiftingProperties
import Mathlib.CategoryTheory.Abelian.CommSq
import Mathlib.CategoryTheory.Abelian.GrothendieckCategory.Basic
import Mathlib.CategoryTheory.Abelian.Monomorphisms
import Mathlib.CategoryTheory.Abelian.Refinements
import Mathlib.CategoryTheory.MorphismProperty.LiftingProperty
import Mathlib.CategoryTheory.Subobject.Lattice
import Mathlib.CategoryTheory.Subobject.HasCardinalLT
import Mathlib.CategoryTheory.Abelian.GrothendieckCategory.ColimCoyoneda
import Mathlib.CategoryTheory.Abelian.GrothendieckCategory.Monomorphisms
import Mathlib.CategoryTheory.SmallObject.Basic
import Mathlib.CategoryTheory.SmallObject.TransfiniteCompositionLifting
import Mathlib.Order.TransfiniteIteration
import Mathlib.SetTheory.Ordinal.Basic

/-!
# Grothendieck abelian categories have enough injectives

TODO

-/

universe w v u

lemma Set.Iic.succ_eq {Œ± : Type u} [PartialOrder Œ±] [SuccOrder Œ±] {j : Œ±}
    (k : Set.Iic j) (hk : ¬¨ IsMax k) :
    Order.succ k = Order.succ k.1 :=
  coe_succ_of_mem (by
    obtain ‚ü®k, hk'‚ü© := k
    simp only [mem_Iic] at hk' ‚ä¢
    rw [Order.succ_le_iff_of_not_isMax
      (fun hk' ‚Ü¶ hk (fun ‚ü®a, ha‚ü© hka ‚Ü¶ by exact hk' hka))]
    obtain _ | rfl := hk'.lt_or_eq
    ¬∑ assumption
    ¬∑ exfalso
      exact hk (fun x _ ‚Ü¶ x.2))

lemma _root_.Set.Iio.nonempty {J : Type w} [LinearOrder J] [OrderBot J]
    (j : J) (hj : Order.IsSuccLimit j) : Nonempty (Set.Iio j) :=
  ‚ü®‚ü®‚ä•, Ne.bot_lt (by simpa using hj.not_isMin)‚ü©‚ü©

namespace CategoryTheory

open Category Opposite Limits ZeroObject

variable {C : Type u} [Category.{v} C]

section Abelian

namespace IsPushout

variable [Abelian C] {A B X Y : C} {f : A ‚ü∂ X} {i : A ‚ü∂ B} {j : X ‚ü∂ Y} {g : B ‚ü∂ Y}

lemma mono_of_isPullback_of_mono {A B X Y : C}
    {f : A ‚ü∂ X} {i : A ‚ü∂ B} {j : X ‚ü∂ Y} {g : B ‚ü∂ Y}
    (h‚ÇÅ : IsPushout f i j g) {Z : C} {j' : X ‚ü∂ Z} {g' : B ‚ü∂ Z}
    (h‚ÇÇ : IsPullback f i j' g') (k : Y ‚ü∂ Z)
    (fac‚ÇÅ : j ‚â´ k = j') (fac‚ÇÇ : g ‚â´ k = g') [Mono j'] : Mono k :=
  Preadditive.mono_of_cancel_zero _ (fun {T‚ÇÄ} y hy ‚Ü¶ by
    obtain ‚ü®T‚ÇÅ, œÄ, _, x, b, eq‚ü© := hom_eq_add_up_to_refinements h‚ÇÅ y
    have fac‚ÇÉ : (-x) ‚â´ j' = b ‚â´ g' := by
      rw [Preadditive.neg_comp, neg_eq_iff_add_eq_zero, ‚Üê fac‚ÇÇ, ‚Üê fac‚ÇÅ,
        ‚Üê assoc, ‚Üê assoc, ‚Üê Preadditive.add_comp, ‚Üê eq, assoc, hy, comp_zero]
    obtain ‚ü®x', hx'‚ü© : ‚àÉ x', œÄ ‚â´ y = x' ‚â´ j := by
      refine ‚ü®x + h‚ÇÇ.lift (-x) b fac‚ÇÉ ‚â´ f, ?_‚ü©
      rw [eq, Preadditive.add_comp, assoc, h‚ÇÅ.w, IsPullback.lift_snd_assoc, add_comm]
    rw [‚Üê cancel_epi œÄ, comp_zero, reassoc_of% hx', fac‚ÇÅ] at hy
    obtain rfl := zero_of_comp_mono _ hy
    rw [zero_comp] at hx'
    rw [‚Üê cancel_epi œÄ, hx', comp_zero])

end IsPushout

end Abelian

namespace IsGrothendieckAbelian

def generatingMonomorphisms (G : C) : MorphismProperty C :=
  MorphismProperty.ofHoms (fun (X : Subobject G) ‚Ü¶ X.arrow)

instance (G : C) [Small.{w} (Subobject G)] :
    MorphismProperty.IsSmall.{w} (generatingMonomorphisms G) := by
  dsimp [generatingMonomorphisms]
  infer_instance

lemma generatingMonomorphisms_le_monomorphisms (G : C) :
    generatingMonomorphisms G ‚â§ MorphismProperty.monomorphisms C := by
  rintro _ _ _ ‚ü®X‚ü©
  exact inferInstanceAs (Mono _)

variable (G : C)

variable [Abelian C]

lemma isomorphisms_le_pushouts_generatingMonomorphisms :
    MorphismProperty.isomorphisms C ‚â§ (generatingMonomorphisms G).pushouts :=
  MorphismProperty.isomorphisms_le_pushouts _
    (fun _ ‚Ü¶ ‚ü®_, _, _, ‚ü®‚ä§‚ü©, 0, inferInstance‚ü©)

variable {G}

namespace TransfiniteCompositionMonoPushouts

variable (hG : IsSeparator G)
include hG

lemma exists_pushouts_generatingMonomorphisms
    {X Y : C} (p : X ‚ü∂ Y) [Mono p] (hp : ¬¨ IsIso p) :
    ‚àÉ (X' : C) (i : X ‚ü∂ X') (p' : X' ‚ü∂ Y) (_ : (generatingMonomorphisms G).pushouts i)
      (_ : ¬¨ IsIso i) (_ : Mono p'), i ‚â´ p' = p := by
  rw [hG.isDetector.isIso_iff_of_mono] at hp
  simp only [coyoneda_obj_obj, Subtype.forall, Set.mem_singleton_iff, forall_eq,
    Function.Surjective, not_forall, not_exists] at hp
  obtain ‚ü®f, hf‚ü© := hp
  refine ‚ü®pushout (pullback.fst p f) (pullback.snd p f), pushout.inl _ _,
    pushout.desc p f pullback.condition,
    ‚ü®_, _, _, (Subobject.underlyingIso _).hom ‚â´ pullback.fst _ _,
    pushout.inr _ _, ‚ü®Subobject.mk (pullback.snd p f)‚ü©,
    (IsPushout.of_hasPushout (pullback.fst p f) (pullback.snd p f)).of_iso
      ((Subobject.underlyingIso _).symm) (Iso.refl _) (Iso.refl _)
      (Iso.refl _) (by simp) (by simp) (by simp) (by simp)‚ü©, ?_, ?_, by simp‚ü©
  ¬∑ intro h
    rw [isIso_iff_yoneda_map_bijective] at h
    obtain ‚ü®a, ha‚ü© := (h G).2 (pushout.inr _ _)
    exact hf a (by simpa using ha =‚â´ pushout.desc p f pullback.condition)
  ¬∑ exact (IsPushout.of_hasPushout _ _).mono_of_isPullback_of_mono
      (IsPullback.of_hasPullback p f) _ (by simp) (by simp)

variable {X : C}

lemma exists_larger_subobject {X : C} (A : Subobject X) (hA : A ‚â† ‚ä§) :
    ‚àÉ (A' : Subobject X) (h : A < A'),
      (generatingMonomorphisms G).pushouts (Subobject.ofLE _ _ h.le) := by
  induction' A using Subobject.ind with Y f _
  obtain ‚ü®X', i, p', hi, hi', hp', fac‚ü© := exists_pushouts_generatingMonomorphisms hG f
    (by simpa only [Subobject.isIso_iff_mk_eq_top] using hA)
  refine ‚ü®Subobject.mk p', Subobject.mk_lt_mk_of_comm i fac hi',
    (MorphismProperty.arrow_mk_iso_iff _ ?_).2 hi‚ü©
  refine Arrow.isoMk (Subobject.underlyingIso f) (Subobject.underlyingIso p') ?_
  dsimp
  simp only [‚Üê cancel_mono p', assoc, fac,
    Subobject.underlyingIso_hom_comp_eq_mk, Subobject.ofLE_arrow]

open Classical in
noncomputable def largerSubobject (A : Subobject X) : Subobject X :=
  if hA : A = ‚ä§ then ‚ä§ else (exists_larger_subobject hG A hA).choose

variable (X) in
@[simp]
lemma largerSubobject_top : largerSubobject hG (‚ä§ : Subobject X) = ‚ä§ := dif_pos rfl

lemma lt_largerSubobject (A : Subobject X) (hA : A ‚â† ‚ä§) :
    A < largerSubobject hG A := by
  dsimp only [largerSubobject]
  rw [dif_neg hA]
  exact (exists_larger_subobject hG A hA).choose_spec.choose

lemma le_largerSubobject (A : Subobject X) :
    A ‚â§ largerSubobject hG A := by
  by_cases hA : A = ‚ä§
  ¬∑ subst hA
    simp only [largerSubobject_top, le_refl]
  ¬∑ exact (lt_largerSubobject hG A hA).le

lemma pushouts_generatingMonomorphisms_ofLE_le_largerSubobject (A : Subobject X) :
      (generatingMonomorphisms G).pushouts (Subobject.ofLE _ _ (le_largerSubobject hG A)) := by
  by_cases hA : A = ‚ä§
  ¬∑ subst hA
    have := (Subobject.isIso_arrow_iff_eq_top (largerSubobject hG (‚ä§ : Subobject X))).2 (by simp)
    exact (MorphismProperty.arrow_mk_iso_iff _
      (Arrow.isoMk (asIso (Subobject.arrow _)) (asIso (Subobject.arrow _)) (by simp))).2
        (isomorphisms_le_pushouts_generatingMonomorphisms G (ùüô X)
          (MorphismProperty.isomorphisms.infer_property _))
  ¬∑ refine (MorphismProperty.arrow_mk_iso_iff _ ?_).1
      (exists_larger_subobject hG A hA).choose_spec.choose_spec
    exact Arrow.isoMk (Iso.refl _)
      (Subobject.isoOfEq _ _ ((by simp [largerSubobject, dif_neg hA])))

variable [IsGrothendieckAbelian.{w} C]

lemma top_mem_range (A‚ÇÄ : Subobject X) {J : Type w} [LinearOrder J] [OrderBot J] [SuccOrder J]
  [WellFoundedLT J] (hJ : Cardinal.mk (Shrink (Subobject X)) < Cardinal.mk J) :
    ‚àÉ (j : J), transfiniteIterate (largerSubobject hG) j A‚ÇÄ = ‚ä§ :=
  top_mem_range_transfiniteIterate (largerSubobject hG) A‚ÇÄ (lt_largerSubobject hG) (by simp)
    (fun h ‚Ü¶ (lt_self_iff_false _).1 (lt_of_le_of_lt
      (Cardinal.mk_le_of_injective ((equivShrink.{w} (Subobject X)).injective.comp h)) hJ))

lemma exists_ordinal (A‚ÇÄ : Subobject X) :
    ‚àÉ (o : Ordinal.{w}) (j : o.toType), transfiniteIterate (largerSubobject hG) j A‚ÇÄ = ‚ä§ := by
  let Œ∫ := Order.succ (Cardinal.mk (Shrink.{w} (Subobject X)))
  have : OrderBot Œ∫.ord.toType := Ordinal.toTypeOrderBot (by
    simp only [ne_eq, Cardinal.ord_eq_zero]
    apply Cardinal.succ_ne_zero)
  exact ‚ü®Œ∫.ord, top_mem_range hG A‚ÇÄ (lt_of_lt_of_le (Order.lt_succ _) (by simp [Œ∫]))‚ü©

section

variable (A‚ÇÄ : Subobject X) (J : Type w) [LinearOrder J] [OrderBot J] [SuccOrder J]
  [WellFoundedLT J]

@[simps]
noncomputable def functorToMonoOver : J ‚•§ MonoOver X where
  obj j := MonoOver.mk' (transfiniteIterate (largerSubobject hG) j A‚ÇÄ).arrow
  map {j j'} f := MonoOver.homMk (Subobject.ofLE _ _
      (monotone_transfiniteIterate _ _ (le_largerSubobject hG) (leOfHom f)))

noncomputable abbrev functor : J ‚•§ C :=
  functorToMonoOver hG A‚ÇÄ J ‚ãô MonoOver.forget _ ‚ãô Over.forget _

instance : (functor hG A‚ÇÄ J).IsWellOrderContinuous where
  nonempty_isColimit m hm := ‚ü®by
    have := Set.Iio.nonempty _ hm
    let c := (Set.principalSegIio m).cocone (functorToMonoOver hG A‚ÇÄ J ‚ãô MonoOver.forget _)
    have : Mono c.pt.hom := by dsimp [c]; infer_instance
    apply IsGrothendieckAbelian.isColimitMapCoconeOfSubobjectMkEqISup
      ((Set.principalSegIio m).monotone.functor ‚ãô functorToMonoOver hG A‚ÇÄ J) c
    dsimp [c]
    simp only [Subobject.mk_arrow]
    exact transfiniteIterate_limit (largerSubobject hG) A‚ÇÄ m hm‚ü©

lemma mono_functor_map_le_succ (j : J) (hj : ¬¨IsMax j) :
    (generatingMonomorphisms G).pushouts ((functor hG A‚ÇÄ J).map (homOfLE (Order.le_succ j))) := by
  refine (MorphismProperty.arrow_mk_iso_iff _ ?_).2
    (pushouts_generatingMonomorphisms_ofLE_le_largerSubobject hG
      (transfiniteIterate (largerSubobject hG) j A‚ÇÄ))
  exact Arrow.isoMk (Iso.refl _) (Subobject.isoOfEq _ _ (transfiniteIterate_succ _ _ _ hj))
    (by simp [MonoOver.forget])

variable {J} in
noncomputable def transfiniteCompositionOfShape' (j : J) :
  (generatingMonomorphisms G).pushouts.TransfiniteCompositionOfShape (Set.Iic j)
    ((functor hG A‚ÇÄ J).map (homOfLE bot_le : ‚ä• ‚ü∂ j)) where
  F := (Set.initialSegIic j).monotone.functor ‚ãô functor hG A‚ÇÄ J
  isoBot := Iso.refl _
  incl :=
    { app k := (functor hG A‚ÇÄ J).map (homOfLE k.2)
      naturality k k' h := by simp [MonoOver.forget] }
  isColimit := colimitOfDiagramTerminal isTerminalTop _
  map_mem k hk := by
    dsimp [MonoOver.forget]
    convert pushouts_generatingMonomorphisms_ofLE_le_largerSubobject hG
      (transfiniteIterate (largerSubobject hG) k.1 A‚ÇÄ) using 2
    all_goals
      rw [Set.Iic.succ_eq _ hk, transfiniteIterate_succ _ _ _ (Set.not_isMax_coe _ hk)]

end

variable {A : C} {f : A ‚ü∂ X} [Mono f] {J : Type w} [LinearOrder J] [OrderBot J] [SuccOrder J]
  [WellFoundedLT J] {j : J}

noncomputable def transfiniteCompositionOfShape
    (hj : transfiniteIterate (largerSubobject hG) j (Subobject.mk f) = ‚ä§) :
    (generatingMonomorphisms G).pushouts.TransfiniteCompositionOfShape (Set.Iic j) f := by
  let t := transfiniteIterate (largerSubobject hG) j (Subobject.mk f)
  have := (Subobject.isIso_arrow_iff_eq_top t).mpr hj
  apply (transfiniteCompositionOfShape' hG (Subobject.mk f) j).ofArrowIso
  refine Arrow.isoMk ((Subobject.isoOfEq _ _ (transfiniteIterate_bot _ _) ‚â™‚â´
    Subobject.underlyingIso f)) (asIso t.arrow) ?_
  dsimp [MonoOver.forget]
  rw [assoc, Subobject.underlyingIso_hom_comp_eq_mk, Subobject.ofLE_arrow,
    Subobject.ofLE_arrow]

lemma transfiniteCompositionsOfShape
    (hj : transfiniteIterate (largerSubobject hG) j (Subobject.mk f) = ‚ä§) :
    (generatingMonomorphisms G).pushouts.transfiniteCompositionsOfShape (Set.Iic j) f :=
  (transfiniteCompositionOfShape hG hj).mem

end TransfiniteCompositionMonoPushouts

open TransfiniteCompositionMonoPushouts in
lemma generatingMonomorphisms_rlp [IsGrothendieckAbelian.{w} C] (hG : IsSeparator G) :
    (generatingMonomorphisms G).rlp = (MorphismProperty.monomorphisms C).rlp := by
  apply le_antisymm
  ¬∑ intro X Y p hp A B i (_ : Mono i)
    obtain ‚ü®o, j, hj‚ü© := exists_ordinal hG (Subobject.mk i)
    have ho : Nonempty o.toType := ‚ü®j‚ü©
    rw [o.toType_nonempty_iff_ne_zero] at ho
    let _ : OrderBot o.toType := by
      apply Ordinal.toTypeOrderBot
      by_contra!
      exact ho (by simpa using this)
    refine MorphismProperty.transfiniteCompositionsOfShape_le_llp_rlp _ _ _
      (transfiniteCompositionsOfShape hG hj) _
      (by simpa)
  ¬∑ exact MorphismProperty.antitone_rlp (generatingMonomorphisms_le_monomorphisms _)

open MorphismProperty

instance (Œ∫ : Cardinal.{w}) [hŒ∫ : Fact Œ∫.IsRegular] :
    IsCardinalFiltered Œ∫.ord.toType Œ∫ :=
  isCardinalFiltered_preorder _ _ (fun Œπ f hs ‚Ü¶ by
    have h : Function.Surjective (fun i ‚Ü¶ (‚ü®f i, i, rfl‚ü© : Set.range f)) := fun _ ‚Ü¶ by aesop
    have pif := Cardinal.mk_le_of_surjective h
    obtain ‚ü®j, hj‚ü© := Ordinal.lt_cof_type (Œ± := Œ∫.ord.toType) (r := (¬∑ < ¬∑))
      (S := Set.range f) (lt_of_le_of_lt (Cardinal.mk_le_of_surjective h) (lt_of_lt_of_le hs
          (by simp [hŒ∫.out.cof_eq])))
    exact ‚ü®j, fun i ‚Ü¶ (hj (f i) (by simp)).le‚ü©)

variable (G) in
lemma hasSmallObjectArgument_generatingMonomorphisms
    [IsGrothendieckAbelian.{w} C] :
    HasSmallObjectArgument.{w} (generatingMonomorphisms G) := by
  obtain ‚ü®Œ∫, hŒ∫', hŒ∫‚ü© := HasCardinalLT.exists_regular_cardinal.{w} (Subobject G)
  have : Fact Œ∫.IsRegular := ‚ü®hŒ∫'‚ü©
  letI := Cardinal.toTypeOrderBot hŒ∫'.ne_zero
  exact ‚ü®Œ∫, inferInstance, inferInstance,
    { preservesColimit {A B X Y} i hi f hf := by
        let hf' : (monomorphisms C).TransfiniteCompositionOfShape Œ∫.ord.toType f :=
          { toTransfiniteCompositionOfShape := hf.toTransfiniteCompositionOfShape
            map_mem j hj := by
              have := (hf.attachCells j hj).pushouts_coproducts
              simp only [ofHoms_homFamily] at this
              refine (?_ : _ ‚â§ monomorphisms C) _ this
              simp only [pushouts_le_iff, coproducts_le_iff]
              exact generatingMonomorphisms_le_monomorphisms G }
        have := hf'.mono_map
        apply preservesColimit_coyoneda_obj_of_mono (Y := hf.F) (Œ∫ := Œ∫)
        obtain ‚ü®S‚ü© := hi
        exact Subobject.hasCardinalLT_of_mono hŒ∫ S.arrow }‚ü©


lemma llp_rlp_monomorphisms [IsGrothendieckAbelian.{w} C] (hG : IsSeparator G) :
    (monomorphisms C).rlp.llp = monomorphisms C := by
  have := hasSmallObjectArgument_generatingMonomorphisms.{w} G
  refine le_antisymm ?_ (le_llp_rlp _)
  rw [‚Üê generatingMonomorphisms_rlp hG, llp_rlp_of_hasSmallObjectArgument]
  trans (transfiniteCompositions.{w} (coproducts.{w} (monomorphisms C)).pushouts).retracts
  ¬∑ apply retracts_monotone
    apply transfiniteCompositions_monotone
    apply pushouts_monotone
    apply coproducts_monotone
    apply generatingMonomorphisms_le_monomorphisms
  ¬∑ simp

lemma hasFunctorialFactorization_monomorphisms_rlp_monomorphisms
    [IsGrothendieckAbelian.{w} C] (hG : IsSeparator G) :
    HasFunctorialFactorization (monomorphisms C) (monomorphisms C).rlp := by
  have := hasSmallObjectArgument_generatingMonomorphisms.{w} G
  rw [‚Üê generatingMonomorphisms_rlp hG, ‚Üê llp_rlp_monomorphisms hG,
    ‚Üê generatingMonomorphisms_rlp hG]
  infer_instance

instance enoughInjectives [IsGrothendieckAbelian.{w} C] :
    EnoughInjectives C where
  presentation X := by
    have := hasFunctorialFactorization_monomorphisms_rlp_monomorphisms.{w}
      (isSeparator_separator C)
    have fac := factorizationData (monomorphisms C) (monomorphisms C).rlp (0 : X ‚ü∂ 0)
    exact ‚ü®{
        f := fac.i
        injective := by
          rw [injective_iff_rlp_monomorphisms_zero]
          convert fac.hp
          apply (isZero_zero C).eq_of_tgt
        mono := fac.hi
    }‚ü©

end IsGrothendieckAbelian

end CategoryTheory
