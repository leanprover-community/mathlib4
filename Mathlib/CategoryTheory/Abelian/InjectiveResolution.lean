/-
Copyright (c) 2022 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang, Scott Morrison
-/
import Mathlib.CategoryTheory.Preadditive.InjectiveResolution
import Mathlib.Algebra.Homology.HomotopyCategory

#align_import category_theory.abelian.injective_resolution from "leanprover-community/mathlib"@"f0c8bf9245297a541f468be517f1bde6195105e9"

/-!
# Abelian categories with enough injectives have injective resolutions

## Main results
When the underlying category is abelian:
* `CategoryTheory.InjectiveResolution.desc`: Given `I : InjectiveResolution X` and
  `J : InjectiveResolution Y`, any morphism `X ‚ü∂ Y` admits a descent to a chain map
  `J.cocomplex ‚ü∂ I.cocomplex`. It is a descent in the sense that `I.Œπ` intertwines the descent and
  the original morphism, see `CategoryTheory.InjectiveResolution.desc_commutes`.
* `CategoryTheory.InjectiveResolution.descHomotopy`: Any two such descents are homotopic.
* `CategoryTheory.InjectiveResolution.homotopyEquiv`: Any two injective resolutions of the same
  object are homotopy equivalent.
* `CategoryTheory.injectiveResolutions`: If every object admits an injective resolution, we can
  construct a functor `injectiveResolutions C : C ‚•§ HomotopyCategory C`.

* `CategoryTheory.exact_f_d`: `f` and `Injective.d f` are exact.
* `CategoryTheory.InjectiveResolution.of`: Hence, starting from a monomorphism `X ‚ü∂ J`, where `J`
  is injective, we can apply `Injective.d` repeatedly to obtain an injective resolution of `X`.
-/


noncomputable section

open CategoryTheory Category Limits

universe v u

namespace CategoryTheory

variable {C : Type u} [Category.{v} C]

open Injective

namespace InjectiveResolution
set_option linter.uppercaseLean3 false -- `InjectiveResolution`

section

variable [HasZeroObject C] [HasZeroMorphisms C]

/-- Auxiliary construction for `desc`. -/
def descFZero {Y Z : C} (f : Z ‚ü∂ Y) (I : InjectiveResolution Y) (J : InjectiveResolution Z) :
    J.cocomplex.X 0 ‚ü∂ I.cocomplex.X 0 :=
  factorThru (f ‚â´ I.Œπ.f 0) (J.Œπ.f 0)
#align category_theory.InjectiveResolution.desc_f_zero CategoryTheory.InjectiveResolution.descFZero

end

section Abelian

variable [Abelian C]

lemma exact‚ÇÄ {Z : C} (I : InjectiveResolution Z) :
    (ShortComplex.mk _ _ I.Œπ_f_zero_comp_complex_d).Exact :=
  ShortComplex.exact_of_f_is_kernel _ I.isLimitKernelFork

/-- Auxiliary construction for `desc`. -/
def descFOne {Y Z : C} (f : Z ‚ü∂ Y) (I : InjectiveResolution Y) (J : InjectiveResolution Z) :
    J.cocomplex.X 1 ‚ü∂ I.cocomplex.X 1 :=
  J.exact‚ÇÄ.descToInjective (descFZero f I J ‚â´ I.cocomplex.d 0 1)
    (by dsimp; simp [‚Üê assoc, descFZero])
#align category_theory.InjectiveResolution.desc_f_one CategoryTheory.InjectiveResolution.descFOne

@[simp]
theorem descFOne_zero_comm {Y Z : C} (f : Z ‚ü∂ Y) (I : InjectiveResolution Y)
    (J : InjectiveResolution Z) :
    J.cocomplex.d 0 1 ‚â´ descFOne f I J = descFZero f I J ‚â´ I.cocomplex.d 0 1 := by
  apply J.exact‚ÇÄ.comp_descToInjective
#align category_theory.InjectiveResolution.desc_f_one_zero_comm CategoryTheory.InjectiveResolution.descFOne_zero_comm

/-- Auxiliary construction for `desc`. -/
def descFSucc {Y Z : C} (I : InjectiveResolution Y) (J : InjectiveResolution Z) (n : ‚Ñï)
    (g : J.cocomplex.X n ‚ü∂ I.cocomplex.X n) (g' : J.cocomplex.X (n + 1) ‚ü∂ I.cocomplex.X (n + 1))
    (w : J.cocomplex.d n (n + 1) ‚â´ g' = g ‚â´ I.cocomplex.d n (n + 1)) :
    Œ£'g'' : J.cocomplex.X (n + 2) ‚ü∂ I.cocomplex.X (n + 2),
      J.cocomplex.d (n + 1) (n + 2) ‚â´ g'' = g' ‚â´ I.cocomplex.d (n + 1) (n + 2) :=
  ‚ü®(J.exact_succ n).descToInjective
    (g' ‚â´ I.cocomplex.d (n + 1) (n + 2)) (by simp [reassoc_of% w]),
      (J.exact_succ n).comp_descToInjective _ _‚ü©
#align category_theory.InjectiveResolution.desc_f_succ CategoryTheory.InjectiveResolution.descFSucc

/-- A morphism in `C` descends to a chain map between injective resolutions. -/
def desc {Y Z : C} (f : Z ‚ü∂ Y) (I : InjectiveResolution Y) (J : InjectiveResolution Z) :
    J.cocomplex ‚ü∂ I.cocomplex :=
  CochainComplex.mkHom _ _ (descFZero f _ _) (descFOne f _ _) (descFOne_zero_comm f I J).symm
    fun n ‚ü®g, g', w‚ü© => ‚ü®(descFSucc I J n g g' w.symm).1, (descFSucc I J n g g' w.symm).2.symm‚ü©
#align category_theory.InjectiveResolution.desc CategoryTheory.InjectiveResolution.desc

/-- The resolution maps intertwine the descent of a morphism and that morphism. -/
@[reassoc (attr := simp)]
theorem desc_commutes {Y Z : C} (f : Z ‚ü∂ Y) (I : InjectiveResolution Y)
    (J : InjectiveResolution Z) : J.Œπ ‚â´ desc f I J = (CochainComplex.single‚ÇÄ C).map f ‚â´ I.Œπ := by
  ext
  simp [desc, descFOne, descFZero]
#align category_theory.InjectiveResolution.desc_commutes CategoryTheory.InjectiveResolution.desc_commutes

@[reassoc (attr := simp)]
lemma desc_commutes_zero {Y Z : C} (f : Z ‚ü∂ Y)
    (I : InjectiveResolution Y) (J : InjectiveResolution Z) :
    J.Œπ.f 0 ‚â´ (desc f I J).f 0 = f ‚â´ I.Œπ.f 0 :=
  (HomologicalComplex.congr_hom (desc_commutes f I J) 0).trans (by simp)

-- Now that we've checked this property of the descent, we can seal away the actual definition.
/-- An auxiliary definition for `descHomotopyZero`. -/
def descHomotopyZeroZero {Y Z : C} {I : InjectiveResolution Y} {J : InjectiveResolution Z}
    (f : I.cocomplex ‚ü∂ J.cocomplex) (comm : I.Œπ ‚â´ f = 0) : I.cocomplex.X 1 ‚ü∂ J.cocomplex.X 0 :=
  I.exact‚ÇÄ.descToInjective (f.f 0) (congr_fun (congr_arg HomologicalComplex.Hom.f comm) 0)
#align category_theory.InjectiveResolution.desc_homotopy_zero_zero CategoryTheory.InjectiveResolution.descHomotopyZeroZero

@[reassoc (attr := simp)]
lemma comp_descHomotopyZeroZero {Y Z : C} {I : InjectiveResolution Y} {J : InjectiveResolution Z}
    (f : I.cocomplex ‚ü∂ J.cocomplex) (comm : I.Œπ ‚â´ f = 0) :
    I.cocomplex.d 0 1 ‚â´ descHomotopyZeroZero f comm = f.f 0 :=
  I.exact‚ÇÄ.comp_descToInjective  _ _

/-- An auxiliary definition for `descHomotopyZero`. -/
def descHomotopyZeroOne {Y Z : C} {I : InjectiveResolution Y} {J : InjectiveResolution Z}
    (f : I.cocomplex ‚ü∂ J.cocomplex) (comm : I.Œπ ‚â´ f = (0 : _ ‚ü∂ J.cocomplex)) :
    I.cocomplex.X 2 ‚ü∂ J.cocomplex.X 1 :=
  (I.exact_succ 0).descToInjective (f.f 1 - descHomotopyZeroZero f comm ‚â´ J.cocomplex.d 0 1)
    (by rw [Preadditive.comp_sub, comp_descHomotopyZeroZero_assoc f comm,
          HomologicalComplex.Hom.comm, sub_self])
#align category_theory.InjectiveResolution.desc_homotopy_zero_one CategoryTheory.InjectiveResolution.descHomotopyZeroOne

@[reassoc (attr := simp)]
lemma comp_descHomotopyZeroOne {Y Z : C} {I : InjectiveResolution Y} {J : InjectiveResolution Z}
    (f : I.cocomplex ‚ü∂ J.cocomplex) (comm : I.Œπ ‚â´ f = (0 : _ ‚ü∂ J.cocomplex)) :
    I.cocomplex.d 1 2 ‚â´ descHomotopyZeroOne f comm =
      f.f 1 - descHomotopyZeroZero f comm ‚â´ J.cocomplex.d 0 1 :=
  (I.exact_succ 0).comp_descToInjective _ _

/-- An auxiliary definition for `descHomotopyZero`. -/
def descHomotopyZeroSucc {Y Z : C} {I : InjectiveResolution Y} {J : InjectiveResolution Z}
    (f : I.cocomplex ‚ü∂ J.cocomplex) (n : ‚Ñï) (g : I.cocomplex.X (n + 1) ‚ü∂ J.cocomplex.X n)
    (g' : I.cocomplex.X (n + 2) ‚ü∂ J.cocomplex.X (n + 1))
    (w : f.f (n + 1) = I.cocomplex.d (n + 1) (n + 2) ‚â´ g' + g ‚â´ J.cocomplex.d n (n + 1)) :
    I.cocomplex.X (n + 3) ‚ü∂ J.cocomplex.X (n + 2) :=
  (I.exact_succ (n + 1)).descToInjective (f.f (n + 2) - g' ‚â´ J.cocomplex.d _ _) (by
      dsimp
      rw [Preadditive.comp_sub, ‚Üê HomologicalComplex.Hom.comm, w, Preadditive.add_comp,
        Category.assoc, Category.assoc, HomologicalComplex.d_comp_d, comp_zero,
        add_zero, sub_self])
#align category_theory.InjectiveResolution.desc_homotopy_zero_succ CategoryTheory.InjectiveResolution.descHomotopyZeroSucc

@[reassoc (attr := simp)]
lemma comp_descHomotopyZeroSucc {Y Z : C} {I : InjectiveResolution Y} {J : InjectiveResolution Z}
    (f : I.cocomplex ‚ü∂ J.cocomplex) (n : ‚Ñï) (g : I.cocomplex.X (n + 1) ‚ü∂ J.cocomplex.X n)
    (g' : I.cocomplex.X (n + 2) ‚ü∂ J.cocomplex.X (n + 1))
    (w : f.f (n + 1) = I.cocomplex.d (n + 1) (n + 2) ‚â´ g' + g ‚â´ J.cocomplex.d n (n + 1)) :
    I.cocomplex.d (n+2) (n+3) ‚â´ descHomotopyZeroSucc f n g g' w =
      f.f (n + 2) - g' ‚â´ J.cocomplex.d _ _ :=
  (I.exact_succ (n+1)).comp_descToInjective  _ _

/-- Any descent of the zero morphism is homotopic to zero. -/
def descHomotopyZero {Y Z : C} {I : InjectiveResolution Y} {J : InjectiveResolution Z}
    (f : I.cocomplex ‚ü∂ J.cocomplex) (comm : I.Œπ ‚â´ f = 0) : Homotopy f 0 :=
  Homotopy.mkCoinductive _ (descHomotopyZeroZero f comm) (by simp)
    (descHomotopyZeroOne f comm) (by simp) (fun n ‚ü®g, g', w‚ü© =>
    ‚ü®descHomotopyZeroSucc f n g g' (by simp only [w, add_comm]), by simp‚ü©)
#align category_theory.InjectiveResolution.desc_homotopy_zero CategoryTheory.InjectiveResolution.descHomotopyZero

/-- Two descents of the same morphism are homotopic. -/
def descHomotopy {Y Z : C} (f : Y ‚ü∂ Z) {I : InjectiveResolution Y} {J : InjectiveResolution Z}
    (g h : I.cocomplex ‚ü∂ J.cocomplex) (g_comm : I.Œπ ‚â´ g = (CochainComplex.single‚ÇÄ C).map f ‚â´ J.Œπ)
    (h_comm : I.Œπ ‚â´ h = (CochainComplex.single‚ÇÄ C).map f ‚â´ J.Œπ) : Homotopy g h :=
  Homotopy.equivSubZero.invFun (descHomotopyZero _ (by simp [g_comm, h_comm]))
#align category_theory.InjectiveResolution.desc_homotopy CategoryTheory.InjectiveResolution.descHomotopy

/-- The descent of the identity morphism is homotopic to the identity cochain map. -/
def descIdHomotopy (X : C) (I : InjectiveResolution X) :
    Homotopy (desc (ùüô X) I I) (ùüô I.cocomplex) := by
  apply descHomotopy (ùüô X) <;> simp
#align category_theory.InjectiveResolution.desc_id_homotopy CategoryTheory.InjectiveResolution.descIdHomotopy

/-- The descent of a composition is homotopic to the composition of the descents. -/
def descCompHomotopy {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (I : InjectiveResolution X)
    (J : InjectiveResolution Y) (K : InjectiveResolution Z) :
    Homotopy (desc (f ‚â´ g) K I) (desc f J I ‚â´ desc g K J) := by
  apply descHomotopy (f ‚â´ g) <;> simp
#align category_theory.InjectiveResolution.desc_comp_homotopy CategoryTheory.InjectiveResolution.descCompHomotopy

-- We don't care about the actual definitions of these homotopies.
/-- Any two injective resolutions are homotopy equivalent. -/
def homotopyEquiv {X : C} (I J : InjectiveResolution X) :
    HomotopyEquiv I.cocomplex J.cocomplex where
  hom := desc (ùüô X) J I
  inv := desc (ùüô X) I J
  homotopyHomInvId := (descCompHomotopy (ùüô X) (ùüô X) I J I).symm.trans <| by
    simpa [id_comp] using descIdHomotopy _ _
  homotopyInvHomId := (descCompHomotopy (ùüô X) (ùüô X) J I J).symm.trans <| by
    simpa [id_comp] using descIdHomotopy _ _
#align category_theory.InjectiveResolution.homotopy_equiv CategoryTheory.InjectiveResolution.homotopyEquiv

@[reassoc (attr := simp)] -- Porting note: Originally `@[simp, reassoc.1]`
theorem homotopyEquiv_hom_Œπ {X : C} (I J : InjectiveResolution X) :
    I.Œπ ‚â´ (homotopyEquiv I J).hom = J.Œπ := by simp [homotopyEquiv]
#align category_theory.InjectiveResolution.homotopy_equiv_hom_Œπ CategoryTheory.InjectiveResolution.homotopyEquiv_hom_Œπ

@[reassoc (attr := simp)] -- Porting note: Originally `@[simp, reassoc.1]`
theorem homotopyEquiv_inv_Œπ {X : C} (I J : InjectiveResolution X) :
    J.Œπ ‚â´ (homotopyEquiv I J).inv = I.Œπ := by simp [homotopyEquiv]
#align category_theory.InjectiveResolution.homotopy_equiv_inv_Œπ CategoryTheory.InjectiveResolution.homotopyEquiv_inv_Œπ

end Abelian

end InjectiveResolution

section

variable [Abelian C]

/-- An arbitrarily chosen injective resolution of an object. -/
abbrev injectiveResolution (Z : C) [HasInjectiveResolution Z] : InjectiveResolution Z :=
  (HasInjectiveResolution.out (Z := Z)).some
#align category_theory.injective_resolution CategoryTheory.injectiveResolution

variable (C)
variable [HasInjectiveResolutions C]

/-- Taking injective resolutions is functorial,
if considered with target the homotopy category
(`‚Ñï`-indexed cochain complexes and chain maps up to homotopy).
-/
def injectiveResolutions : C ‚•§ HomotopyCategory C (ComplexShape.up ‚Ñï) where
  obj X := (HomotopyCategory.quotient _ _).obj (injectiveResolution X).cocomplex
  map f := (HomotopyCategory.quotient _ _).map (InjectiveResolution.desc f _ _)
  map_id X := by
    rw [‚Üê (HomotopyCategory.quotient _ _).map_id]
    apply HomotopyCategory.eq_of_homotopy
    apply InjectiveResolution.descIdHomotopy
  map_comp f g := by
    rw [‚Üê (HomotopyCategory.quotient _ _).map_comp]
    apply HomotopyCategory.eq_of_homotopy
    apply InjectiveResolution.descCompHomotopy
#align category_theory.injective_resolutions CategoryTheory.injectiveResolutions
variable {C}

/-- If `I : InjectiveResolution X`, then the chosen `(injectiveResolutions C).obj X`
is isomorphic (in the homotopy category) to `I.cocomplex`. -/
def InjectiveResolution.iso {X : C} (I : InjectiveResolution X) :
    (injectiveResolutions C).obj X ‚âÖ
      (HomotopyCategory.quotient _ _).obj I.cocomplex :=
  HomotopyCategory.isoOfHomotopyEquiv (homotopyEquiv _ _)

@[reassoc]
lemma InjectiveResolution.iso_hom_naturality {X Y : C} (f : X ‚ü∂ Y)
    (I : InjectiveResolution X) (J : InjectiveResolution Y)
    (œÜ : I.cocomplex ‚ü∂ J.cocomplex) (comm : I.Œπ.f 0 ‚â´ œÜ.f 0 = f ‚â´ J.Œπ.f 0) :
    (injectiveResolutions C).map f ‚â´ J.iso.hom =
      I.iso.hom ‚â´ (HomotopyCategory.quotient _ _).map œÜ := by
  apply HomotopyCategory.eq_of_homotopy
  apply descHomotopy f
  all_goals aesop_cat

@[reassoc]
lemma InjectiveResolution.iso_inv_naturality {X Y : C} (f : X ‚ü∂ Y)
    (I : InjectiveResolution X) (J : InjectiveResolution Y)
    (œÜ : I.cocomplex ‚ü∂ J.cocomplex) (comm : I.Œπ.f 0 ‚â´ œÜ.f 0 = f ‚â´ J.Œπ.f 0) :
    I.iso.inv ‚â´ (injectiveResolutions C).map f =
      (HomotopyCategory.quotient _ _).map œÜ ‚â´ J.iso.inv := by
  rw [‚Üê cancel_mono (J.iso).hom, Category.assoc, iso_hom_naturality f I J œÜ comm,
    Iso.inv_hom_id_assoc, Category.assoc, Iso.inv_hom_id, Category.comp_id]

end

section

variable [Abelian C] [EnoughInjectives C]

theorem exact_f_d {X Y : C} (f : X ‚ü∂ Y) :
    (ShortComplex.mk f (d f) (by simp)).Exact := by
  let Œ± : ShortComplex.mk f (cokernel.œÄ f) (by simp) ‚ü∂ ShortComplex.mk f (d f) (by simp) :=
    { œÑ‚ÇÅ := ùüô _
      œÑ‚ÇÇ := ùüô _
      œÑ‚ÇÉ := Injective.Œπ _  }
  have : Epi Œ±.œÑ‚ÇÅ := by dsimp; infer_instance
  have : IsIso Œ±.œÑ‚ÇÇ := by dsimp; infer_instance
  have : Mono Œ±.œÑ‚ÇÉ := by dsimp; infer_instance
  rw [‚Üê ShortComplex.exact_iff_of_epi_of_isIso_of_mono Œ±]
  apply ShortComplex.exact_of_g_is_cokernel
  apply cokernelIsCokernel
#align category_theory.exact_f_d CategoryTheory.exact_f_d

end

namespace InjectiveResolution

/-!
Our goal is to define `InjectiveResolution.of Z : InjectiveResolution Z`.
The `0`-th object in this resolution will just be `Injective.under Z`,
i.e. an arbitrarily chosen injective object with a map from `Z`.
After that, we build the `n+1`-st object as `Injective.syzygies`
applied to the previously constructed morphism,
and the map from the `n`-th object as `Injective.d`.
-/


variable [Abelian C] [EnoughInjectives C] (Z : C)

-- The construction of the injective resolution `of` would be very, very slow
-- if it were not broken into separate definitions and lemmas

/-- Auxiliary definition for `InjectiveResolution.of`. -/
def ofCocomplex : CochainComplex C ‚Ñï :=
  CochainComplex.mk' (Injective.under Z) (Injective.syzygies (Injective.Œπ Z))
    (Injective.d (Injective.Œπ Z)) fun ‚ü®_, _, f‚ü© =>
    ‚ü®Injective.syzygies f, Injective.d f, by simp‚ü©
set_option linter.uppercaseLean3 false in
#align category_theory.InjectiveResolution.of_cocomplex CategoryTheory.InjectiveResolution.ofCocomplex

lemma ofCocomplex_d_0_1 :
    (ofCocomplex Z).d 0 1 = d (Injective.Œπ Z) := by
  simp [ofCocomplex]

lemma ofCocomplex_exactAt_succ (n : ‚Ñï) :
    (ofCocomplex Z).ExactAt (n + 1) := by
  rw [HomologicalComplex.exactAt_iff' _ n (n + 1) (n + 1 + 1) (by simp) (by simp)]
  cases n
  all_goals
    dsimp [ofCocomplex, HomologicalComplex.sc', HomologicalComplex.shortComplexFunctor',
      CochainComplex.mk', CochainComplex.mk]
    simp
    apply exact_f_d

instance (n : ‚Ñï) : Injective ((ofCocomplex Z).X n) := by
  obtain (_ | _ | _ | n) := n <;> apply Injective.injective_under

/-- In any abelian category with enough injectives,
`InjectiveResolution.of Z` constructs an injective resolution of the object `Z`.
-/
irreducible_def of : InjectiveResolution Z where
  cocomplex := ofCocomplex Z
  Œπ := (CochainComplex.fromSingle‚ÇÄEquiv _ _).symm ‚ü®Injective.Œπ Z,
    by rw [ofCocomplex_d_0_1, cokernel.condition_assoc, zero_comp]‚ü©
  quasiIso := ‚ü®fun n => by
    cases n
    ¬∑ rw [CochainComplex.quasiIsoAt‚ÇÄ_iff, ShortComplex.quasiIso_iff_of_zeros]
      ¬∑ refine' (ShortComplex.exact_and_mono_f_iff_of_iso _).2
          ‚ü®exact_f_d (Injective.Œπ Z), by dsimp; infer_instance‚ü©
        exact ShortComplex.isoMk (Iso.refl _) (Iso.refl _) (Iso.refl _) (by simp)
          (by simp [ofCocomplex])
      all_goals rfl
    ¬∑ rw [quasiIsoAt_iff_exactAt]
      ¬∑ apply ofCocomplex_exactAt_succ
      ¬∑ apply CochainComplex.exactAt_succ_single_obj‚ü©
set_option linter.uppercaseLean3 false in
#align category_theory.InjectiveResolution.of CategoryTheory.InjectiveResolution.of

instance (priority := 100) (Z : C) : HasInjectiveResolution Z where out := ‚ü®of Z‚ü©

instance (priority := 100) : HasInjectiveResolutions C where out _ := inferInstance

end InjectiveResolution

end CategoryTheory
