/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Equivalence
import Mathlib.SetTheory.Cardinal.Order

/-!
# Representatives of small categories

Given a type `Œ© : Type w`, we construct a structure `SmallCategoryOfSet Œ© : Type w`
which consists of the data and axioms that allows to define a category
structure such that the type of objects and morphisms identify to subtypes of `Œ©`.

This allows to define a small family of small categories
`SmallCategoryOfSet.categoryFamily : SmallCategoryOfSet Œ© ‚Üí Type w`
which, up to equivalence, represents all categories such that
types of objects and morphisms have cardinalities less than or equal to
that of `Œ©` (see `SmallCategoryOfSet.exists_equivalence`).

-/

universe w v u

namespace CategoryTheory

variable (Œ© : Type w)

/-- Structure which allows to construct a category whose types
of objects and morphisms are subtypes of a fixed type `Œ©`. -/
structure SmallCategoryOfSet where
  /-- objects -/
  obj : Set Œ©
  /-- morphisms -/
  hom (X Y : obj) : Set Œ©
  /-- identity morphisms -/
  id (X : obj) : hom X X
  /-- the composition of morphisms -/
  comp {X Y Z : obj} (f : hom X Y) (g : hom Y Z) : hom X Z
  id_comp {X Y : obj} (f : hom X Y) : comp (id _) f = f := by cat_disch
  comp_id {X Y : obj} (f : hom X Y) : comp f (id _) = f := by cat_disch
  assoc {X Y Z T : obj} (f : hom X Y) (g : hom Y Z) (h : hom Z T) :
      comp (comp f g) h = comp f (comp g h) := by cat_disch

namespace SmallCategoryOfSet

attribute [simp] id_comp comp_id assoc

@[simps]
instance (S : SmallCategoryOfSet Œ©) : SmallCategory S.obj where
  Hom X Y := S.hom X Y
  id := S.id
  comp := S.comp

/-- The family of all categories such that the types of objects and
morphisms are subtypes of a given type `Œ©`. -/
abbrev categoryFamily : SmallCategoryOfSet Œ© ‚Üí Type w := fun S ‚Ü¶ S.obj

end SmallCategoryOfSet

variable (C : Type u) [Category.{v} C]

/-- Helper structure for the construction of a term in `SmallCategoryOfSet`.
This involves the choice of bijections between types of objects and morphisms
in a category `C` and subtypes of a type `Œ©`. -/
structure CoreSmallCategoryOfSet where
  /-- objects -/
  obj : Set Œ©
  /-- morphisms -/
  hom (X Y : obj) : Set Œ©
  /-- a bijection between the types of objects -/
  objEquiv : obj ‚âÉ C
  /-- a bijection between the types of morphisms -/
  homEquiv {X Y : obj} : hom X Y ‚âÉ (objEquiv X ‚ü∂ objEquiv Y)

namespace CoreSmallCategoryOfSet

variable {Œ© C} (h : CoreSmallCategoryOfSet Œ© C)

/-- The `SmallCategoryOfSet` structure induced by a
`CoreSmallCategoryOfSet` structure. -/
@[simps]
def smallCategoryOfSet : SmallCategoryOfSet Œ© where
  obj := h.obj
  hom := h.hom
  id X := h.homEquiv.symm (ùüô _)
  comp f g := h.homEquiv.symm (h.homEquiv f ‚â´ h.homEquiv g)

/-- Given `h : CoreSmallCategoryOfSet Œ© C`, this is the
obvious functor `h.smallCategoryOfSet.obj ‚•§ C`. -/
@[simps!]
def functor : h.smallCategoryOfSet.obj ‚•§ C where
  obj := h.objEquiv
  map := h.homEquiv
  map_id _ := by rw [SmallCategoryOfSet.id_def]; simp
  map_comp _ _ := by rw [SmallCategoryOfSet.comp_def]; simp

/-- Given `h : CoreSmallCategoryOfSet Œ© C`,
the obvious functor `h.smallCategoryOfSet.obj ‚•§ C` is fully faithful. -/
def fullyFaithfulFunctor : h.functor.FullyFaithful where
  preimage := h.homEquiv.symm

instance : h.functor.IsEquivalence where
  faithful := h.fullyFaithfulFunctor.faithful
  full := h.fullyFaithfulFunctor.full
  essSurj.mem_essImage Y := by
    obtain ‚ü®X, rfl‚ü© := h.objEquiv.surjective Y
    exact ‚ü®_, ‚ü®Iso.refl _‚ü©‚ü©

/-- Given `h : CoreSmallCategoryOfSet Œ© C`,
the obvious functor `h.smallCategoryOfSet.obj ‚•§ C` is an equivalence. -/
noncomputable def equivalence : h.smallCategoryOfSet.obj ‚âå C :=
  h.functor.asEquivalence

end CoreSmallCategoryOfSet

namespace SmallCategoryOfSet

lemma exists_equivalence (C : Type u) [Category.{v} C]
    (h‚ÇÅ : Cardinal.lift.{w} (Cardinal.mk C) ‚â§ Cardinal.lift.{u} (Cardinal.mk Œ©))
    (h‚ÇÇ : ‚àÄ (X Y : C), Cardinal.lift.{w} (Cardinal.mk (X ‚ü∂ Y)) ‚â§
      Cardinal.lift.{v} (Cardinal.mk Œ©)) :
    ‚àÉ (h : SmallCategoryOfSet Œ©), Nonempty (categoryFamily Œ© h ‚âå C) := by
  let f‚ÇÅ := (Cardinal.lift_mk_le'.1 h‚ÇÅ).some
  let f‚ÇÇ (X Y) := (Cardinal.lift_mk_le'.1 (h‚ÇÇ X Y)).some
  let e := Equiv.ofInjective _ f‚ÇÅ.injective
  let h : CoreSmallCategoryOfSet Œ© C :=
    { obj := Set.range f‚ÇÅ
      hom X Y := Set.range (f‚ÇÇ (e.symm X) (e.symm Y))
      objEquiv := e.symm
      homEquiv {_ _} := by simpa using (Equiv.ofInjective _ ((f‚ÇÇ _ _).injective)).symm }
  exact ‚ü®h.smallCategoryOfSet, ‚ü®h.equivalence‚ü©‚ü©

end SmallCategoryOfSet

end CategoryTheory
