/-
Copyright (c) 2024 Robin Carlier. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robin Carlier
-/
import Mathlib.CategoryTheory.PathCategory.Basic
import Mathlib.CategoryTheory.MorphismProperty.Composition

/-!
# Properties of morphisms in a path category.

We provide a formulation of induction principles for morphisms in a path category in terms of
`MorphismProperty`. This file is separate from `CategoryTheory.PathCategory.Basic` in order to
reduce transitive imports. -/


universe v‚ÇÅ u‚ÇÅ

namespace CategoryTheory.Paths

section
variable (V : Type u‚ÇÅ) [Quiver.{v‚ÇÅ + 1} V]

/-- A reformulation of `CategoryTheory.Paths.induction` in terms of `MorphismProperty`. -/
lemma morphismProperty_eq_top
    (P : MorphismProperty (Paths V))
    (id : ‚àÄ {v : V}, P (ùüô ((of V).obj v)))
    (comp : ‚àÄ {u v w : V}
      (p : (of V).obj u ‚ü∂ (of V).obj v) (q : v ‚ü∂ w), P p ‚Üí P (p ‚â´ (of V).map q)) :
    P = ‚ä§ := by
  ext; constructor
  ¬∑ simp
  ¬∑ exact fun _ ‚Ü¶ induction (fun f ‚Ü¶ P f) id comp _

/-- A reformulation of `CategoryTheory.Paths.induction'` in terms of `MorphismProperty`. -/
lemma morphismProperty_eq_top'
    (P : MorphismProperty (Paths V))
    (id : ‚àÄ {v : V}, P (ùüô ((of V).obj v)))
    (comp : ‚àÄ {u v w : V}
      (p : u ‚ü∂ v) (q : (of V).obj v ‚ü∂ (of V).obj w), P q ‚Üí P ((of V).map p ‚â´ q)) :
    P = ‚ä§ := by
  ext; constructor
  ¬∑ simp
  ¬∑ exact fun _ ‚Ü¶ induction' (fun f ‚Ü¶ P f) id comp _

lemma morphismProperty_eq_top_of_isMultiplicative (P : MorphismProperty (Paths V))
    [P.IsMultiplicative]
    (hP : ‚àÄ {u v : V} (p : u ‚ü∂ v), P ((of V).map p)) : P = ‚ä§ :=
  morphismProperty_eq_top _ _ (P.id_mem _) (fun _ q hp ‚Ü¶ P.comp_mem _ _ hp (hP q))
end
section

variable {C : Type*} [Category C] {V : Type u‚ÇÅ} [Quiver.{v‚ÇÅ + 1} V]

/-- A natural transformation between `F G : Paths V ‚•§ C` is defined by its components and
its unary naturality squares. -/
@[simps]
def liftNatTrans {F G : Paths V ‚•§ C} (Œ±_app : (v : V) ‚Üí (F.obj v ‚ü∂ G.obj v))
    (Œ±_nat : {X Y : V} ‚Üí (f : X ‚ü∂ Y) ‚Üí
      F.map (Quiver.Hom.toPath f) ‚â´ Œ±_app Y = Œ±_app X ‚â´ G.map (Quiver.Hom.toPath f)) : F ‚ü∂ G where
  app := Œ±_app
  naturality := by
    apply MorphismProperty.of_eq_top
      (P := MorphismProperty.naturalityProperty (F‚ÇÅ := F) Œ±_app)
    exact morphismProperty_eq_top_of_isMultiplicative _ _ Œ±_nat

/-- A natural isomorphism between `F G : Paths V ‚•§ C` is defined by its components and
its unary naturality squares. -/
@[simps!]
def liftNatIso {C} [Category C] {F G : Paths V ‚•§ C} (Œ±_app : (v : V) ‚Üí (F.obj v ‚âÖ G.obj v))
    (Œ±_nat : {X Y : V} ‚Üí (f : X ‚ü∂ Y) ‚Üí
      F.map (Quiver.Hom.toPath f) ‚â´ (Œ±_app Y).hom = (Œ±_app X).hom ‚â´ G.map (Quiver.Hom.toPath f)) :
    F ‚âÖ G :=
  NatIso.ofComponents Œ±_app (fun f ‚Ü¶ (liftNatTrans (fun v ‚Ü¶ (Œ±_app v).hom) Œ±_nat).naturality f)

end

end CategoryTheory.Paths
