/-
Copyright (c) 2020 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta, Kim Morrison
-/
import Mathlib.CategoryTheory.Functor.Currying
import Mathlib.CategoryTheory.Subobject.FactorThru
import Mathlib.CategoryTheory.Subobject.WellPowered

/-!
# The lattice of subobjects

We provide the `SemilatticeInf` with `OrderTop (subobject X)` instance when `[HasPullback C]`,
and the `SemilatticeSup (Subobject X)` instance when `[HasImages C] [HasBinaryCoproducts C]`.
-/


universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

noncomputable section

open CategoryTheory CategoryTheory.Category CategoryTheory.Limits

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {X Y Z : C}
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

namespace CategoryTheory

namespace MonoOver

section Top

instance {X : C} : Top (MonoOver X) where top := mk' (ùüô _)

instance {X : C} : Inhabited (MonoOver X) :=
  ‚ü®‚ä§‚ü©

/-- The morphism to the top object in `MonoOver X`. -/
def leTop (f : MonoOver X) : f ‚ü∂ ‚ä§ :=
  homMk f.arrow (comp_id _)

@[simp]
theorem top_left (X : C) : ((‚ä§ : MonoOver X) : C) = X :=
  rfl

@[simp]
theorem top_arrow (X : C) : (‚ä§ : MonoOver X).arrow = ùüô X :=
  rfl

/-- `map f` sends `‚ä§ : MonoOver X` to `‚ü®X, f‚ü© : MonoOver Y`. -/
def mapTop (f : X ‚ü∂ Y) [Mono f] : (map f).obj ‚ä§ ‚âÖ mk' f :=
  iso_of_both_ways (homMk (ùüô _) rfl) (homMk (ùüô _) (by simp [id_comp f]))

section

variable [HasPullbacks C]

/-- The pullback of the top object in `MonoOver Y`
is (isomorphic to) the top object in `MonoOver X`. -/
def pullbackTop (f : X ‚ü∂ Y) : (pullback f).obj ‚ä§ ‚âÖ ‚ä§ :=
  iso_of_both_ways (leTop _)
    (homMk (pullback.lift f (ùüô _) (by aesop_cat)) (pullback.lift_snd _ _ _))

/-- There is a morphism from `‚ä§ : MonoOver A` to the pullback of a monomorphism along itself;
as the category is thin this is an isomorphism. -/
def topLEPullbackSelf {A B : C} (f : A ‚ü∂ B) [Mono f] :
    (‚ä§ : MonoOver A) ‚ü∂ (pullback f).obj (mk' f) :=
  homMk _ (pullback.lift_snd _ _ rfl)

/-- The pullback of a monomorphism along itself is isomorphic to the top object. -/
def pullbackSelf {A B : C} (f : A ‚ü∂ B) [Mono f] : (pullback f).obj (mk' f) ‚âÖ ‚ä§ :=
  iso_of_both_ways (leTop _) (topLEPullbackSelf _)

end

end Top

section Bot

variable [HasInitial C] [InitialMonoClass C]

instance {X : C} : Bot (MonoOver X) where bot := mk' (initial.to X)

@[simp]
theorem bot_left (X : C) : ((‚ä• : MonoOver X) : C) = ‚ä•_ C :=
  rfl

@[simp]
theorem bot_arrow {X : C} : (‚ä• : MonoOver X).arrow = initial.to X :=
  rfl

/-- The (unique) morphism from `‚ä• : MonoOver X` to any other `f : MonoOver X`. -/
def botLE {X : C} (f : MonoOver X) : ‚ä• ‚ü∂ f :=
  homMk (initial.to _)

/-- `map f` sends `‚ä• : MonoOver X` to `‚ä• : MonoOver Y`. -/
def mapBot (f : X ‚ü∂ Y) [Mono f] : (map f).obj ‚ä• ‚âÖ ‚ä• :=
  iso_of_both_ways (homMk (initial.to _)) (homMk (ùüô _))

end Bot

section ZeroOrderBot

variable [HasZeroObject C]

open ZeroObject

/-- The object underlying `‚ä• : Subobject B` is (up to isomorphism) the zero object. -/
def botCoeIsoZero {B : C} : ((‚ä• : MonoOver B) : C) ‚âÖ 0 :=
  initialIsInitial.uniqueUpToIso HasZeroObject.zeroIsInitial

-- Porting note: removed @[simp] as the LHS simplifies
theorem bot_arrow_eq_zero [HasZeroMorphisms C] {B : C} : (‚ä• : MonoOver B).arrow = 0 :=
  zero_of_source_iso_zero _ botCoeIsoZero

end ZeroOrderBot

section Inf

variable [HasPullbacks C]

/-- When `[HasPullbacks C]`, `MonoOver A` has "intersections", functorial in both arguments.

As `MonoOver A` is only a preorder, this doesn't satisfy the axioms of `SemilatticeInf`,
but we reuse all the names from `SemilatticeInf` because they will be used to construct
`SemilatticeInf (subobject A)` shortly.
-/
@[simps]
def inf {A : C} : MonoOver A ‚•§ MonoOver A ‚•§ MonoOver A where
  obj f := pullback f.arrow ‚ãô map f.arrow
  map k :=
    { app := fun g => by
        apply homMk _ _
        ¬∑ apply pullback.lift (pullback.fst _ _) (pullback.snd _ _ ‚â´ k.left) _
          rw [pullback.condition, assoc, w k]
        dsimp
        rw [pullback.lift_snd_assoc, assoc, w k] }

/-- A morphism from the "infimum" of two objects in `MonoOver A` to the first object. -/
def infLELeft {A : C} (f g : MonoOver A) : (inf.obj f).obj g ‚ü∂ f :=
  homMk _ rfl

/-- A morphism from the "infimum" of two objects in `MonoOver A` to the second object. -/
def infLERight {A : C} (f g : MonoOver A) : (inf.obj f).obj g ‚ü∂ g :=
  homMk _ pullback.condition

/-- A morphism version of the `le_inf` axiom. -/
def leInf {A : C} (f g h : MonoOver A) : (h ‚ü∂ f) ‚Üí (h ‚ü∂ g) ‚Üí (h ‚ü∂ (inf.obj f).obj g) := by
  intro k‚ÇÅ k‚ÇÇ
  refine homMk (pullback.lift k‚ÇÇ.left k‚ÇÅ.left ?_) ?_
  ¬∑ rw [w k‚ÇÅ, w k‚ÇÇ]
  ¬∑ erw [pullback.lift_snd_assoc, w k‚ÇÅ]

end Inf

section Sup

variable [HasImages C] [HasBinaryCoproducts C]

/-- When `[HasImages C] [HasBinaryCoproducts C]`, `MonoOver A` has a `sup` construction,
which is functorial in both arguments,
and which on `Subobject A` will induce a `SemilatticeSup`. -/
def sup {A : C} : MonoOver A ‚•§ MonoOver A ‚•§ MonoOver A :=
  curryObj ((forget A).prod (forget A) ‚ãô uncurry.obj Over.coprod ‚ãô image)

/-- A morphism version of `le_sup_left`. -/
def leSupLeft {A : C} (f g : MonoOver A) : f ‚ü∂ (sup.obj f).obj g := by
  refine homMk (coprod.inl ‚â´ factorThruImage _) ?_
  erw [Category.assoc, image.fac, coprod.inl_desc]
  rfl

/-- A morphism version of `le_sup_right`. -/
def leSupRight {A : C} (f g : MonoOver A) : g ‚ü∂ (sup.obj f).obj g := by
  refine homMk (coprod.inr ‚â´ factorThruImage _) ?_
  erw [Category.assoc, image.fac, coprod.inr_desc]
  rfl

/-- A morphism version of `sup_le`. -/
def supLe {A : C} (f g h : MonoOver A) : (f ‚ü∂ h) ‚Üí (g ‚ü∂ h) ‚Üí ((sup.obj f).obj g ‚ü∂ h) := by
  intro k‚ÇÅ k‚ÇÇ
  refine homMk ?_ ?_
  ¬∑ apply image.lift ‚ü®_, h.arrow, coprod.desc k‚ÇÅ.left k‚ÇÇ.left, _‚ü©
    ext
    ¬∑ simp [w k‚ÇÅ]
    ¬∑ simp [w k‚ÇÇ]
  ¬∑ apply image.lift_fac

end Sup

end MonoOver

namespace Subobject

section OrderTop

instance orderTop {X : C} : OrderTop (Subobject X) where
  top := Quotient.mk'' ‚ä§
  le_top := by
    refine Quotient.ind' fun f => ?_
    exact ‚ü®MonoOver.leTop f‚ü©

instance {X : C} : Inhabited (Subobject X) :=
  ‚ü®‚ä§‚ü©

theorem top_eq_id (B : C) : (‚ä§ : Subobject B) = Subobject.mk (ùüô B) :=
  rfl

theorem underlyingIso_top_hom {B : C} : (underlyingIso (ùüô B)).hom = (‚ä§ : Subobject B).arrow := by
  convert underlyingIso_hom_comp_eq_mk (ùüô B)
  simp only [comp_id]

instance top_arrow_isIso {B : C} : IsIso (‚ä§ : Subobject B).arrow := by
  rw [‚Üê underlyingIso_top_hom]
  infer_instance

@[reassoc (attr := simp)]
theorem underlyingIso_inv_top_arrow {B : C} :
    (underlyingIso _).inv ‚â´ (‚ä§ : Subobject B).arrow = ùüô B :=
  underlyingIso_arrow _

@[simp]
theorem map_top (f : X ‚ü∂ Y) [Mono f] : (map f).obj ‚ä§ = Subobject.mk f :=
  Quotient.sound' ‚ü®MonoOver.mapTop f‚ü©

theorem top_factors {A B : C} (f : A ‚ü∂ B) : (‚ä§ : Subobject B).Factors f :=
  ‚ü®f, comp_id _‚ü©

theorem isIso_iff_mk_eq_top {X Y : C} (f : X ‚ü∂ Y) [Mono f] : IsIso f ‚Üî mk f = ‚ä§ :=
  ‚ü®fun _ => mk_eq_mk_of_comm _ _ (asIso f) (Category.comp_id _), fun h => by
    rw [‚Üê ofMkLEMk_comp h.le, Category.comp_id]
    exact (isoOfMkEqMk _ _ h).isIso_hom‚ü©

theorem isIso_arrow_iff_eq_top {Y : C} (P : Subobject Y) : IsIso P.arrow ‚Üî P = ‚ä§ := by
  rw [isIso_iff_mk_eq_top, mk_arrow]

instance isIso_top_arrow {Y : C} : IsIso (‚ä§ : Subobject Y).arrow := by rw [isIso_arrow_iff_eq_top]

theorem mk_eq_top_of_isIso {X Y : C} (f : X ‚ü∂ Y) [IsIso f] : mk f = ‚ä§ :=
  (isIso_iff_mk_eq_top f).mp inferInstance

theorem eq_top_of_isIso_arrow {Y : C} (P : Subobject Y) [IsIso P.arrow] : P = ‚ä§ :=
  (isIso_arrow_iff_eq_top P).mp inferInstance

section

variable [HasPullbacks C]

theorem pullback_top (f : X ‚ü∂ Y) : (pullback f).obj ‚ä§ = ‚ä§ :=
  Quotient.sound' ‚ü®MonoOver.pullbackTop f‚ü©

theorem pullback_self {A B : C} (f : A ‚ü∂ B) [Mono f] : (pullback f).obj (mk f) = ‚ä§ :=
  Quotient.sound' ‚ü®MonoOver.pullbackSelf f‚ü©

end

end OrderTop

section OrderBot

variable [HasInitial C] [InitialMonoClass C]

instance orderBot {X : C} : OrderBot (Subobject X) where
  bot := Quotient.mk'' ‚ä•
  bot_le := by
    refine Quotient.ind' fun f => ?_
    exact ‚ü®MonoOver.botLE f‚ü©

theorem bot_eq_initial_to {B : C} : (‚ä• : Subobject B) = Subobject.mk (initial.to B) :=
  rfl

/-- The object underlying `‚ä• : Subobject B` is (up to isomorphism) the initial object. -/
def botCoeIsoInitial {B : C} : ((‚ä• : Subobject B) : C) ‚âÖ ‚ä•_ C :=
  underlyingIso _

theorem map_bot (f : X ‚ü∂ Y) [Mono f] : (map f).obj ‚ä• = ‚ä• :=
  Quotient.sound' ‚ü®MonoOver.mapBot f‚ü©

end OrderBot

section ZeroOrderBot

variable [HasZeroObject C]

open ZeroObject

/-- The object underlying `‚ä• : Subobject B` is (up to isomorphism) the zero object. -/
def botCoeIsoZero {B : C} : ((‚ä• : Subobject B) : C) ‚âÖ 0 :=
  botCoeIsoInitial ‚â™‚â´ initialIsInitial.uniqueUpToIso HasZeroObject.zeroIsInitial

variable [HasZeroMorphisms C]

theorem bot_eq_zero {B : C} : (‚ä• : Subobject B) = Subobject.mk (0 : 0 ‚ü∂ B) :=
  mk_eq_mk_of_comm _ _ (initialIsInitial.uniqueUpToIso HasZeroObject.zeroIsInitial)
    (by simp [eq_iff_true_of_subsingleton])

@[simp]
theorem bot_arrow {B : C} : (‚ä• : Subobject B).arrow = 0 :=
  zero_of_source_iso_zero _ botCoeIsoZero

theorem bot_factors_iff_zero {A B : C} (f : A ‚ü∂ B) : (‚ä• : Subobject B).Factors f ‚Üî f = 0 :=
  ‚ü®by
    rintro ‚ü®h, rfl‚ü©
    simp only [MonoOver.bot_arrow_eq_zero, Functor.id_obj, Functor.const_obj_obj,
      MonoOver.bot_left, comp_zero],
   by
    rintro rfl
    exact ‚ü®0, by simp‚ü©‚ü©

theorem mk_eq_bot_iff_zero {f : X ‚ü∂ Y} [Mono f] : Subobject.mk f = ‚ä• ‚Üî f = 0 :=
  ‚ü®fun h => by simpa [h, bot_factors_iff_zero] using mk_factors_self f, fun h =>
    mk_eq_mk_of_comm _ _ ((isoZeroOfMonoEqZero h).trans HasZeroObject.zeroIsoInitial) (by simp [h])‚ü©

end ZeroOrderBot

section Functor

variable (C)

/-- Sending `X : C` to `Subobject X` is a contravariant functor `C·µí·µñ ‚•§ Type`. -/
@[simps]
def functor [HasPullbacks C] : C·µí·µñ ‚•§ Type max u‚ÇÅ v‚ÇÅ where
  obj X := Subobject X.unop
  map f := (pullback f.unop).obj
  map_id _ := funext pullback_id
  map_comp _ _ := funext (pullback_comp _ _)

end Functor

section SemilatticeInfTop

variable [HasPullbacks C]

/-- The functorial infimum on `MonoOver A` descends to an infimum on `Subobject A`. -/
def inf {A : C} : Subobject A ‚•§ Subobject A ‚•§ Subobject A :=
  ThinSkeleton.map‚ÇÇ MonoOver.inf

theorem inf_le_left {A : C} (f g : Subobject A) : (inf.obj f).obj g ‚â§ f :=
  Quotient.inductionOn‚ÇÇ' f g fun _ _ => ‚ü®MonoOver.infLELeft _ _‚ü©

theorem inf_le_right {A : C} (f g : Subobject A) : (inf.obj f).obj g ‚â§ g :=
  Quotient.inductionOn‚ÇÇ' f g fun _ _ => ‚ü®MonoOver.infLERight _ _‚ü©

theorem le_inf {A : C} (h f g : Subobject A) : h ‚â§ f ‚Üí h ‚â§ g ‚Üí h ‚â§ (inf.obj f).obj g :=
  Quotient.inductionOn‚ÇÉ' h f g
    (by
      rintro f g h ‚ü®k‚ü© ‚ü®l‚ü©
      exact ‚ü®MonoOver.leInf _ _ _ k l‚ü©)

instance semilatticeInf {B : C} : SemilatticeInf (Subobject B) where
  inf := fun m n => (inf.obj m).obj n
  inf_le_left := inf_le_left
  inf_le_right := inf_le_right
  le_inf := le_inf

theorem factors_left_of_inf_factors {A B : C} {X Y : Subobject B} {f : A ‚ü∂ B}
    (h : (X ‚äì Y).Factors f) : X.Factors f :=
  factors_of_le _ (inf_le_left _ _) h

theorem factors_right_of_inf_factors {A B : C} {X Y : Subobject B} {f : A ‚ü∂ B}
    (h : (X ‚äì Y).Factors f) : Y.Factors f :=
  factors_of_le _ (inf_le_right _ _) h

@[simp]
theorem inf_factors {A B : C} {X Y : Subobject B} (f : A ‚ü∂ B) :
    (X ‚äì Y).Factors f ‚Üî X.Factors f ‚àß Y.Factors f :=
  ‚ü®fun h => ‚ü®factors_left_of_inf_factors h, factors_right_of_inf_factors h‚ü©, by
    revert X Y
    apply Quotient.ind‚ÇÇ'
    rintro X Y ‚ü®‚ü®g‚ÇÅ, rfl‚ü©, ‚ü®g‚ÇÇ, hg‚ÇÇ‚ü©‚ü©
    exact ‚ü®_, pullback.lift_snd_assoc _ _ hg‚ÇÇ _‚ü©‚ü©

theorem inf_arrow_factors_left {B : C} (X Y : Subobject B) : X.Factors (X ‚äì Y).arrow :=
  (factors_iff _ _).mpr ‚ü®ofLE (X ‚äì Y) X (inf_le_left X Y), by simp‚ü©

theorem inf_arrow_factors_right {B : C} (X Y : Subobject B) : Y.Factors (X ‚äì Y).arrow :=
  (factors_iff _ _).mpr ‚ü®ofLE (X ‚äì Y) Y (inf_le_right X Y), by simp‚ü©

@[simp]
theorem finset_inf_factors {I : Type*} {A B : C} {s : Finset I} {P : I ‚Üí Subobject B} (f : A ‚ü∂ B) :
    (s.inf P).Factors f ‚Üî ‚àÄ i ‚àà s, (P i).Factors f := by
  classical
  induction s using Finset.induction_on with
  | empty => simp [top_factors]
  | insert _ ih => simp [ih]

-- `i` is explicit here because often we'd like to defer a proof of `m`
theorem finset_inf_arrow_factors {I : Type*} {B : C} (s : Finset I) (P : I ‚Üí Subobject B) (i : I)
    (m : i ‚àà s) : (P i).Factors (s.inf P).arrow := by
  classical
  revert i m
  induction s using Finset.induction_on with
  | empty => rintro _ ‚ü®‚ü©
  | insert _ ih =>
    intro _ m
    rw [Finset.inf_insert]
    simp only [Finset.mem_insert] at m
    rcases m with (rfl | m)
    ¬∑ rw [‚Üê factorThru_arrow _ _ (inf_arrow_factors_left _ _)]
      exact factors_comp_arrow _
    ¬∑ rw [‚Üê factorThru_arrow _ _ (inf_arrow_factors_right _ _)]
      apply factors_of_factors_right
      exact ih _ m

theorem inf_eq_map_pullback' {A : C} (f‚ÇÅ : MonoOver A) (f‚ÇÇ : Subobject A) :
    (Subobject.inf.obj (Quotient.mk'' f‚ÇÅ)).obj f‚ÇÇ =
      (Subobject.map f‚ÇÅ.arrow).obj ((Subobject.pullback f‚ÇÅ.arrow).obj f‚ÇÇ) := by
  induction' f‚ÇÇ using Quotient.inductionOn' with f‚ÇÇ
  rfl

theorem inf_eq_map_pullback {A : C} (f‚ÇÅ : MonoOver A) (f‚ÇÇ : Subobject A) :
    (Quotient.mk'' f‚ÇÅ ‚äì f‚ÇÇ : Subobject A) = (map f‚ÇÅ.arrow).obj ((pullback f‚ÇÅ.arrow).obj f‚ÇÇ) :=
  inf_eq_map_pullback' f‚ÇÅ f‚ÇÇ

theorem prod_eq_inf {A : C} {f‚ÇÅ f‚ÇÇ : Subobject A} [HasBinaryProduct f‚ÇÅ f‚ÇÇ] :
    (f‚ÇÅ ‚®Ø f‚ÇÇ) = f‚ÇÅ ‚äì f‚ÇÇ := by
  apply le_antisymm
  ¬∑ refine le_inf _ _ _ (Limits.prod.fst.le) (Limits.prod.snd.le)
  ¬∑ apply leOfHom
    exact prod.lift (inf_le_left _ _).hom (inf_le_right _ _).hom

theorem inf_def {B : C} (m m' : Subobject B) : m ‚äì m' = (inf.obj m).obj m' :=
  rfl

/-- `‚äì` commutes with pullback. -/
theorem inf_pullback {X Y : C} (g : X ‚ü∂ Y) (f‚ÇÅ f‚ÇÇ) :
    (pullback g).obj (f‚ÇÅ ‚äì f‚ÇÇ) = (pullback g).obj f‚ÇÅ ‚äì (pullback g).obj f‚ÇÇ := by
  revert f‚ÇÅ
  apply Quotient.ind'
  intro f‚ÇÅ
  erw [inf_def, inf_def, inf_eq_map_pullback', inf_eq_map_pullback', ‚Üê pullback_comp, ‚Üê
    map_pullback pullback.condition (pullbackIsPullback f‚ÇÅ.arrow g), ‚Üê pullback_comp,
    pullback.condition]
  rfl

/-- `‚äì` commutes with map. -/
theorem inf_map {X Y : C} (g : Y ‚ü∂ X) [Mono g] (f‚ÇÅ f‚ÇÇ) :
    (map g).obj (f‚ÇÅ ‚äì f‚ÇÇ) = (map g).obj f‚ÇÅ ‚äì (map g).obj f‚ÇÇ := by
  revert f‚ÇÅ
  apply Quotient.ind'
  intro f‚ÇÅ
  erw [inf_def, inf_def, inf_eq_map_pullback', inf_eq_map_pullback', ‚Üê map_comp]
  dsimp
  rw [pullback_comp, pullback_map_self]

end SemilatticeInfTop

section SemilatticeSup

variable [HasImages C] [HasBinaryCoproducts C]

/-- The functorial supremum on `MonoOver A` descends to a supremum on `Subobject A`. -/
def sup {A : C} : Subobject A ‚•§ Subobject A ‚•§ Subobject A :=
  ThinSkeleton.map‚ÇÇ MonoOver.sup

instance semilatticeSup {B : C} : SemilatticeSup (Subobject B) where
  sup := fun m n => (sup.obj m).obj n
  le_sup_left := fun m n => Quotient.inductionOn‚ÇÇ' m n fun _ _ => ‚ü®MonoOver.leSupLeft _ _‚ü©
  le_sup_right := fun m n => Quotient.inductionOn‚ÇÇ' m n fun _ _ => ‚ü®MonoOver.leSupRight _ _‚ü©
  sup_le := fun m n k =>
    Quotient.inductionOn‚ÇÉ' m n k fun _ _ _ ‚ü®i‚ü© ‚ü®j‚ü© => ‚ü®MonoOver.supLe _ _ _ i j‚ü©

theorem sup_factors_of_factors_left {A B : C} {X Y : Subobject B} {f : A ‚ü∂ B} (P : X.Factors f) :
    (X ‚äî Y).Factors f :=
  factors_of_le f le_sup_left P

theorem sup_factors_of_factors_right {A B : C} {X Y : Subobject B} {f : A ‚ü∂ B} (P : Y.Factors f) :
    (X ‚äî Y).Factors f :=
  factors_of_le f le_sup_right P

variable [HasInitial C] [InitialMonoClass C]

theorem finset_sup_factors {I : Type*} {A B : C} {s : Finset I} {P : I ‚Üí Subobject B} {f : A ‚ü∂ B}
    (h : ‚àÉ i ‚àà s, (P i).Factors f) : (s.sup P).Factors f := by
  classical
  revert h
  induction s using Finset.induction_on with
  | empty => rintro ‚ü®_, ‚ü®‚ü®‚ü©, _‚ü©‚ü©
  | insert _ ih =>
    rintro ‚ü®j, ‚ü®m, h‚ü©‚ü©
    simp only [Finset.sup_insert]
    simp only [Finset.mem_insert] at m
    rcases m with (rfl | m)
    ¬∑ exact sup_factors_of_factors_left h
    ¬∑ exact sup_factors_of_factors_right (ih ‚ü®j, ‚ü®m, h‚ü©‚ü©)

end SemilatticeSup

section Lattice

instance boundedOrder [HasInitial C] [InitialMonoClass C] {B : C} : BoundedOrder (Subobject B) :=
  { Subobject.orderTop, Subobject.orderBot with }

variable [HasPullbacks C] [HasImages C] [HasBinaryCoproducts C]

instance {B : C} : Lattice (Subobject B) :=
  { Subobject.semilatticeInf, Subobject.semilatticeSup with }

end Lattice

section Inf

variable [WellPowered C]

/-- The "wide cospan" diagram, with a small indexing type, constructed from a set of subobjects.
(This is just the diagram of all the subobjects pasted together, but using `WellPowered C`
to make the diagram small.)
-/
def wideCospan {A : C} (s : Set (Subobject A)) : WidePullbackShape (equivShrink _ '' s) ‚•§ C :=
  WidePullbackShape.wideCospan A
    (fun j : equivShrink _ '' s => ((equivShrink (Subobject A)).symm j : C)) fun j =>
    ((equivShrink (Subobject A)).symm j).arrow

@[simp]
theorem wideCospan_map_term {A : C} (s : Set (Subobject A)) (j) :
    (wideCospan s).map (WidePullbackShape.Hom.term j) =
      ((equivShrink (Subobject A)).symm j).arrow :=
  rfl

/-- Auxiliary construction of a cone for `le_inf`. -/
def leInfCone {A : C} (s : Set (Subobject A)) (f : Subobject A) (k : ‚àÄ g ‚àà s, f ‚â§ g) :
    Cone (wideCospan s) :=
  WidePullbackShape.mkCone f.arrow
    (fun j =>
      underlying.map
        (homOfLE
          (k _
            (by
              rcases j with ‚ü®-, ‚ü®g, ‚ü®m, rfl‚ü©‚ü©‚ü©
              simpa using m))))
    (by aesop_cat)

@[simp]
theorem leInfCone_œÄ_app_none {A : C} (s : Set (Subobject A)) (f : Subobject A)
    (k : ‚àÄ g ‚àà s, f ‚â§ g) : (leInfCone s f k).œÄ.app none = f.arrow :=
  rfl

variable [HasWidePullbacks.{v‚ÇÅ} C]

/-- The limit of `wideCospan s`. (This will be the supremum of the set of subobjects.)
-/
def widePullback {A : C} (s : Set (Subobject A)) : C :=
  Limits.limit (wideCospan s)

/-- The inclusion map from `widePullback s` to `A`
-/
def widePullbackŒπ {A : C} (s : Set (Subobject A)) : widePullback s ‚ü∂ A :=
  Limits.limit.œÄ (wideCospan s) none

instance widePullbackŒπ_mono {A : C} (s : Set (Subobject A)) : Mono (widePullbackŒπ s) :=
  ‚ü®fun u v h =>
    limit.hom_ext fun j => by
      cases j
      ¬∑ exact h
      ¬∑ apply (cancel_mono ((equivShrink (Subobject A)).symm _).arrow).1
        rw [assoc, assoc]
        erw [limit.w (wideCospan s) (WidePullbackShape.Hom.term _)]
        exact h‚ü©

/-- When `[WellPowered C]` and `[HasWidePullbacks C]`, `Subobject A` has arbitrary infimums.
-/
def sInf {A : C} (s : Set (Subobject A)) : Subobject A :=
  Subobject.mk (widePullbackŒπ s)

theorem sInf_le {A : C} (s : Set (Subobject A)) (f) (hf : f ‚àà s) : sInf s ‚â§ f := by
  fapply le_of_comm
  ¬∑ exact (underlyingIso _).hom ‚â´
      Limits.limit.œÄ (wideCospan s)
        (some ‚ü®equivShrink (Subobject A) f,
          Set.mem_image_of_mem (equivShrink (Subobject A)) hf‚ü©) ‚â´
      eqToHom (congr_arg (fun X : Subobject A => (X : C)) (Equiv.symm_apply_apply _ _))
  ¬∑ dsimp [sInf]
    simp only [Category.comp_id, Category.assoc, ‚Üê underlyingIso_hom_comp_eq_mk,
      Subobject.arrow_congr, congrArg_mpr_hom_left, Iso.cancel_iso_hom_left]
    convert limit.w (wideCospan s) (WidePullbackShape.Hom.term _)
    aesop_cat

theorem le_sInf {A : C} (s : Set (Subobject A)) (f : Subobject A) (k : ‚àÄ g ‚àà s, f ‚â§ g) :
    f ‚â§ sInf s := by
  fapply le_of_comm
  ¬∑ exact Limits.limit.lift _ (leInfCone s f k) ‚â´ (underlyingIso _).inv
  ¬∑ dsimp [sInf]
    rw [assoc, underlyingIso_arrow, widePullbackŒπ, limit.lift_œÄ, leInfCone_œÄ_app_none]

instance completeSemilatticeInf {B : C} : CompleteSemilatticeInf (Subobject B) where
  sInf := sInf
  sInf_le := sInf_le
  le_sInf := le_sInf

end Inf

section Sup

variable [WellPowered C] [HasCoproducts.{v‚ÇÅ} C]

/-- The universal morphism out of the coproduct of a set of subobjects,
after using `[WellPowered C]` to reindex by a small type.
-/
def smallCoproductDesc {A : C} (s : Set (Subobject A)) :=
  Limits.Sigma.desc fun j : equivShrink _ '' s => ((equivShrink (Subobject A)).symm j).arrow

variable [HasImages C]

/-- When `[WellPowered C] [HasImages C] [HasCoproducts C]`,
`Subobject A` has arbitrary supremums. -/
def sSup {A : C} (s : Set (Subobject A)) : Subobject A :=
  Subobject.mk (image.Œπ (smallCoproductDesc s))

theorem le_sSup {A : C} (s : Set (Subobject A)) (f) (hf : f ‚àà s) : f ‚â§ sSup s := by
  fapply le_of_comm
  ¬∑ refine eqToHom ?_ ‚â´ Sigma.Œπ _ ‚ü®equivShrink (Subobject A) f, by simpa [Set.mem_image] using hf‚ü©
      ‚â´ factorThruImage _ ‚â´ (underlyingIso _).inv
    exact (congr_arg (fun X : Subobject A => (X : C)) (Equiv.symm_apply_apply _ _).symm)
  ¬∑ simp [sSup, smallCoproductDesc]

theorem symm_apply_mem_iff_mem_image {Œ± Œ≤ : Type*} (e : Œ± ‚âÉ Œ≤) (s : Set Œ±) (x : Œ≤) :
    e.symm x ‚àà s ‚Üî x ‚àà e '' s :=
  ‚ü®fun h => ‚ü®e.symm x, h, by simp‚ü©, by
    rintro ‚ü®a, m, rfl‚ü©
    simpa using m‚ü©

theorem sSup_le {A : C} (s : Set (Subobject A)) (f : Subobject A) (k : ‚àÄ g ‚àà s, g ‚â§ f) :
    sSup s ‚â§ f := by
  fapply le_of_comm
  ¬∑ refine(underlyingIso _).hom ‚â´ image.lift ‚ü®_, f.arrow, ?_, ?_‚ü©
    ¬∑ refine Sigma.desc ?_
      rintro ‚ü®g, m‚ü©
      refine underlying.map (homOfLE (k _ ?_))
      simpa using m
    ¬∑ ext
      dsimp [smallCoproductDesc]
      simp
  ¬∑ dsimp [sSup]
    rw [assoc, image.lift_fac, underlyingIso_hom_comp_eq_mk]

instance completeSemilatticeSup {B : C} : CompleteSemilatticeSup (Subobject B) where
  sSup := sSup
  le_sSup := le_sSup
  sSup_le := sSup_le

end Sup

section CompleteLattice

variable [WellPowered C] [HasWidePullbacks.{v‚ÇÅ} C] [HasImages C] [HasCoproducts.{v‚ÇÅ} C]
  [InitialMonoClass C]

attribute [local instance] has_smallest_coproducts_of_hasCoproducts

instance {B : C} : CompleteLattice (Subobject B) :=
  { Subobject.semilatticeInf, Subobject.semilatticeSup, Subobject.boundedOrder,
    Subobject.completeSemilatticeInf, Subobject.completeSemilatticeSup with }

end CompleteLattice

section ZeroObject

variable [HasZeroMorphisms C] [HasZeroObject C]

open ZeroObject

/-- A nonzero object has nontrivial subobject lattice. -/
theorem nontrivial_of_not_isZero {X : C} (h : ¬¨IsZero X) : Nontrivial (Subobject X) :=
  ‚ü®‚ü®mk (0 : 0 ‚ü∂ X), mk (ùüô X), fun w => h (IsZero.of_iso (isZero_zero C) (isoOfMkEqMk _ _ w).symm)‚ü©‚ü©

end ZeroObject

section SubobjectSubobject

/-- The subobject lattice of a subobject `Y` is order isomorphic to the interval `Set.Iic Y`. -/
def subobjectOrderIso {X : C} (Y : Subobject X) : Subobject (Y : C) ‚âÉo Set.Iic Y where
  toFun Z :=
    ‚ü®Subobject.mk (Z.arrow ‚â´ Y.arrow),
      Set.mem_Iic.mpr (le_of_comm ((underlyingIso _).hom ‚â´ Z.arrow) (by simp))‚ü©
  invFun Z := Subobject.mk (ofLE _ _ Z.2)
  left_inv Z := mk_eq_of_comm _ (underlyingIso _) (by aesop_cat)
  right_inv Z := Subtype.ext (mk_eq_of_comm _ (underlyingIso _) (by
          dsimp
          simp [‚Üê Iso.eq_inv_comp]))
  map_rel_iff' {W Z} := by
    dsimp
    constructor
    ¬∑ intro h
      exact le_of_comm (((underlyingIso _).inv ‚â´ ofLE _ _ (Subtype.mk_le_mk.mp h) ‚â´
        (underlyingIso _).hom)) (by aesop_cat)
    ¬∑ intro h
      exact Subtype.mk_le_mk.mpr (le_of_comm
        ((underlyingIso _).hom ‚â´ ofLE _ _ h ‚â´ (underlyingIso _).inv) (by simp))

end SubobjectSubobject

end Subobject

end CategoryTheory
