/-
Copyright (c) 2020 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta, Kim Morrison
-/
import Mathlib.CategoryTheory.Subobject.Basic
import Mathlib.CategoryTheory.Preadditive.Basic

/-!
# Factoring through subobjects

The predicate `h : P.Factors f`, for `P : Subobject Y` and `f : X ‚ü∂ Y`
asserts the existence of some `P.factorThru f : X ‚ü∂ (P : C)` making the obvious diagram commute.

-/


universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

noncomputable section

open CategoryTheory CategoryTheory.Category CategoryTheory.Limits

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {X Y Z : C}
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

namespace CategoryTheory

namespace MonoOver

/-- When `f : X ‚ü∂ Y` and `P : MonoOver Y`,
`P.Factors f` expresses that there exists a factorisation of `f` through `P`.
Given `h : P.Factors f`, you can recover the morphism as `P.factorThru f h`.
-/
def Factors {X Y : C} (P : MonoOver Y) (f : X ‚ü∂ Y) : Prop :=
  ‚àÉ g : X ‚ü∂ (P : C), g ‚â´ P.arrow = f

theorem factors_congr {X : C} {f g : MonoOver X} {Y : C} (h : Y ‚ü∂ X) (e : f ‚âÖ g) :
    f.Factors h ‚Üî g.Factors h :=
  ‚ü®fun ‚ü®u, hu‚ü© => ‚ü®u ‚â´ ((MonoOver.forget _).map e.hom).left, by simp [hu]‚ü©, fun ‚ü®u, hu‚ü© =>
    ‚ü®u ‚â´ ((MonoOver.forget _).map e.inv).left, by simp [hu]‚ü©‚ü©

/-- `P.factorThru f h` provides a factorisation of `f : X ‚ü∂ Y` through some `P : MonoOver Y`,
given the evidence `h : P.Factors f` that such a factorisation exists. -/
def factorThru {X Y : C} (P : MonoOver Y) (f : X ‚ü∂ Y) (h : Factors P f) : X ‚ü∂ (P : C) :=
  Classical.choose h

end MonoOver

namespace Subobject

/-- When `f : X ‚ü∂ Y` and `P : Subobject Y`,
`P.Factors f` expresses that there exists a factorisation of `f` through `P`.
Given `h : P.Factors f`, you can recover the morphism as `P.factorThru f h`.
-/
def Factors {X Y : C} (P : Subobject Y) (f : X ‚ü∂ Y) : Prop :=
  Quotient.liftOn' P (fun P => P.Factors f)
    (by
      rintro P Q ‚ü®h‚ü©
      apply propext
      constructor
      ¬∑ rintro ‚ü®i, w‚ü©
        exact ‚ü®i ‚â´ h.hom.left, by erw [Category.assoc, Over.w h.hom, w]‚ü©
      ¬∑ rintro ‚ü®i, w‚ü©
        exact ‚ü®i ‚â´ h.inv.left, by erw [Category.assoc, Over.w h.inv, w]‚ü©)

@[simp]
theorem mk_factors_iff {X Y Z : C} (f : Y ‚ü∂ X) [Mono f] (g : Z ‚ü∂ X) :
    (Subobject.mk f).Factors g ‚Üî (MonoOver.mk' f).Factors g :=
  Iff.rfl

theorem mk_factors_self (f : X ‚ü∂ Y) [Mono f] : (mk f).Factors f :=
  ‚ü®ùüô _, by simp‚ü©

theorem factors_iff {X Y : C} (P : Subobject Y) (f : X ‚ü∂ Y) :
    P.Factors f ‚Üî (representative.obj P).Factors f :=
  Quot.inductionOn P fun _ => MonoOver.factors_congr _ (representativeIso _).symm

theorem factors_self {X : C} (P : Subobject X) : P.Factors P.arrow :=
  (factors_iff _ _).mpr ‚ü®ùüô (P : C), by simp‚ü©

theorem factors_comp_arrow {X Y : C} {P : Subobject Y} (f : X ‚ü∂ P) : P.Factors (f ‚â´ P.arrow) :=
  (factors_iff _ _).mpr ‚ü®f, rfl‚ü©

theorem factors_of_factors_right {X Y Z : C} {P : Subobject Z} (f : X ‚ü∂ Y) {g : Y ‚ü∂ Z}
    (h : P.Factors g) : P.Factors (f ‚â´ g) := by
  induction' P using Quotient.ind' with P
  obtain ‚ü®g, rfl‚ü© := h
  exact ‚ü®f ‚â´ g, by simp‚ü©

theorem factors_zero [HasZeroMorphisms C] {X Y : C} {P : Subobject Y} : P.Factors (0 : X ‚ü∂ Y) :=
  (factors_iff _ _).mpr ‚ü®0, by simp‚ü©

theorem factors_of_le {Y Z : C} {P Q : Subobject Y} (f : Z ‚ü∂ Y) (h : P ‚â§ Q) :
    P.Factors f ‚Üí Q.Factors f := by
  simp only [factors_iff]
  exact fun ‚ü®u, hu‚ü© => ‚ü®u ‚â´ ofLE _ _ h, by simp [‚Üê hu]‚ü©

/-- `P.factorThru f h` provides a factorisation of `f : X ‚ü∂ Y` through some `P : Subobject Y`,
given the evidence `h : P.Factors f` that such a factorisation exists. -/
def factorThru {X Y : C} (P : Subobject Y) (f : X ‚ü∂ Y) (h : Factors P f) : X ‚ü∂ P :=
  Classical.choose ((factors_iff _ _).mp h)

@[reassoc (attr := simp)]
theorem factorThru_arrow {X Y : C} (P : Subobject Y) (f : X ‚ü∂ Y) (h : Factors P f) :
    P.factorThru f h ‚â´ P.arrow = f :=
  Classical.choose_spec ((factors_iff _ _).mp h)

@[simp]
theorem factorThru_self {X : C} (P : Subobject X) (h) : P.factorThru P.arrow h = ùüô (P : C) := by
  ext
  simp

@[simp]
theorem factorThru_mk_self (f : X ‚ü∂ Y) [Mono f] :
    (mk f).factorThru f (mk_factors_self f) = (underlyingIso f).inv := by
  ext
  simp

@[simp]
theorem factorThru_comp_arrow {X Y : C} {P : Subobject Y} (f : X ‚ü∂ P) (h) :
    P.factorThru (f ‚â´ P.arrow) h = f := by
  ext
  simp

@[simp]
theorem factorThru_eq_zero [HasZeroMorphisms C] {X Y : C} {P : Subobject Y} {f : X ‚ü∂ Y}
    {h : Factors P f} : P.factorThru f h = 0 ‚Üî f = 0 := by
  fconstructor
  ¬∑ intro w
    replace w := w =‚â´ P.arrow
    simpa using w
  ¬∑ rintro rfl
    ext
    simp

theorem factorThru_right {X Y Z : C} {P : Subobject Z} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : P.Factors g) :
    f ‚â´ P.factorThru g h = P.factorThru (f ‚â´ g) (factors_of_factors_right f h) := by
  apply (cancel_mono P.arrow).mp
  simp

@[simp]
theorem factorThru_zero [HasZeroMorphisms C] {X Y : C} {P : Subobject Y}
    (h : P.Factors (0 : X ‚ü∂ Y)) : P.factorThru 0 h = 0 := by simp

-- `h` is an explicit argument here so we can use
-- `rw factorThru_ofLE h`, obtaining a subgoal `P.Factors f`.
-- (While the reverse direction looks plausible as a simp lemma, it seems to be unproductive.)
theorem factorThru_ofLE {Y Z : C} {P Q : Subobject Y} {f : Z ‚ü∂ Y} (h : P ‚â§ Q) (w : P.Factors f) :
    Q.factorThru f (factors_of_le f h w) = P.factorThru f w ‚â´ ofLE P Q h := by
  ext
  simp

section Preadditive

variable [Preadditive C]

theorem factors_add {X Y : C} {P : Subobject Y} (f g : X ‚ü∂ Y) (wf : P.Factors f)
    (wg : P.Factors g) : P.Factors (f + g) :=
  (factors_iff _ _).mpr ‚ü®P.factorThru f wf + P.factorThru g wg, by simp‚ü©

-- This can't be a `simp` lemma as `wf` and `wg` may not exist.
-- However you can `rw` by it to assert that `f` and `g` factor through `P` separately.
theorem factorThru_add {X Y : C} {P : Subobject Y} (f g : X ‚ü∂ Y) (w : P.Factors (f + g))
    (wf : P.Factors f) (wg : P.Factors g) :
    P.factorThru (f + g) w = P.factorThru f wf + P.factorThru g wg := by
  ext
  simp

theorem factors_left_of_factors_add {X Y : C} {P : Subobject Y} (f g : X ‚ü∂ Y)
    (w : P.Factors (f + g)) (wg : P.Factors g) : P.Factors f :=
  (factors_iff _ _).mpr ‚ü®P.factorThru (f + g) w - P.factorThru g wg, by simp‚ü©

@[simp]
theorem factorThru_add_sub_factorThru_right {X Y : C} {P : Subobject Y} (f g : X ‚ü∂ Y)
    (w : P.Factors (f + g)) (wg : P.Factors g) :
    P.factorThru (f + g) w - P.factorThru g wg =
      P.factorThru f (factors_left_of_factors_add f g w wg) := by
  ext
  simp

theorem factors_right_of_factors_add {X Y : C} {P : Subobject Y} (f g : X ‚ü∂ Y)
    (w : P.Factors (f + g)) (wf : P.Factors f) : P.Factors g :=
  (factors_iff _ _).mpr ‚ü®P.factorThru (f + g) w - P.factorThru f wf, by simp‚ü©

@[simp]
theorem factorThru_add_sub_factorThru_left {X Y : C} {P : Subobject Y} (f g : X ‚ü∂ Y)
    (w : P.Factors (f + g)) (wf : P.Factors f) :
    P.factorThru (f + g) w - P.factorThru f wf =
      P.factorThru g (factors_right_of_factors_add f g w wf) := by
  ext
  simp

end Preadditive

end Subobject

end CategoryTheory
