/-
Copyright (c) 2025 Robin Carlier. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robin Carlier
-/
import Mathlib.CategoryTheory.Bicategory.NaturalTransformation.Lax
import Mathlib.CategoryTheory.Bicategory.EqToHom

/-! # Identity-component oplax natural transformations of lax functors

An identity-component oplax natural transformation ("icon") between
lax functors `F` and `G` is the data of an oplax natural transformation
`Œ∑` from `F` to `G`, along with equalities of objects `h_x : F.obj x = G.obj x`
for every `x`, and equalities of 1-morphisms `Œ∑.app x = eqToHom h_x` for
every `x`. In other words: an icon is an oplax natural transformation that does
nothing at the level of objects.

## References
* [Johnson-Yau, *2-Dimensional Categories*, section 4.6](https://arxiv.org/abs/2002.06055)

-/


namespace CategoryTheory.Lax

open Category Bicategory

universe w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variable {B : Type u‚ÇÅ} [Bicategory.{w‚ÇÅ, v‚ÇÅ} B]
    {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]

/-- An identity-component oplax natural transformation ("icon") between
lax functors `F` `G` bundles an equality `F.obj x = G.obj x`for every
object `x`. And an oplax natural transformation `Œ∑` from `F` to `G` such that
`Œ∑.app x` is the transport `1`-cell along the equality `F.obj x = G.obj x`.
-/
structure Icon (F G : LaxFunctor B C) extends Lax.OplaxTrans F G where
  obj_eq : ‚àÄ (x : B), F.obj x = G.obj x
  app_eq_eqToHom : ‚àÄ (x : B), app x = eqToHom (obj_eq x)

namespace Icon

/-- The identity icon from `F` to itself has the identity oplax natural
transformation as underlying oplax natural transformation. -/
@[simps!]
def id (F : LaxFunctor B C) : Icon F F where
  __ := OplaxTrans.id F
  obj_eq _ := rfl
  app_eq_eqToHom _ := rfl

section vComp
variable {F G H : LaxFunctor B C} (Œ∑ : Icon F G) (Œ∏ : Icon G H)

/-- The app component of the vertical composition of icons. By definition, it is an
`eqToHom` 1-cell along the equality on objects between the source and target functors
that can be deduced from the available icons. -/
abbrev vCompApp (x : B) :
    F.obj x ‚ü∂ H.obj x :=
  eqToHom <| (Œ∑.obj_eq x).trans (Œ∏.obj_eq x)

/-- The naturality component 2-cell of the vertical composition of icons. Up to the equality of
objects and morphisms at hand, this is in fact the naturality component of the underlying oplax
natural transformation of lax functors. -/
abbrev vCompNaturality {x y : B} (f : x ‚ü∂ y) :
    F.map f ‚â´ vCompApp Œ∑ Œ∏ y ‚ü∂ vCompApp Œ∑ Œ∏ x ‚â´ H.map f :=
  letI i‚ÇÅ := eqToHomTransIso (Œ∑.obj_eq y) (Œ∏.obj_eq y)
  letI i‚ÇÇ := eqToHomTransIso (Œ∑.obj_eq x) (Œ∏.obj_eq x)
  letI i‚ÇÉ : Œ∑.app y ‚â´ Œ∏.app y ‚âÖ eqToHom (Œ∑.obj_eq y) ‚â´ eqToHom (Œ∏.obj_eq y) :=
    whiskerLeftIso _ (eqToIso <| Œ∏.app_eq_eqToHom y) ‚â™‚â´
      whiskerRightIso (eqToIso <| Œ∑.app_eq_eqToHom y) _
  letI i‚ÇÑ : Œ∑.app x ‚â´ Œ∏.app x ‚âÖ eqToHom (Œ∑.obj_eq x) ‚â´ eqToHom (Œ∏.obj_eq x) :=
    whiskerLeftIso _ (eqToIso <| Œ∏.app_eq_eqToHom x) ‚â™‚â´
      whiskerRightIso (eqToIso <| Œ∑.app_eq_eqToHom x) _
  F.map f ‚óÅ (i‚ÇÅ.hom ‚â´ i‚ÇÉ.inv) ‚â´
    (Œ∑.toOplaxTrans.vComp Œ∏.toOplaxTrans|>.naturality f) ‚â´
    (i‚ÇÑ.hom ‚â´ i‚ÇÇ.inv) ‚ñ∑ H.map f

lemma vCompNaturality_id (x : B) :
    F.mapId x ‚ñ∑ vCompApp Œ∑ Œ∏ x ‚â´ vCompNaturality Œ∑ Œ∏ (ùüô x) =
    (Œª_ (vCompApp Œ∑ Œ∏ x)).hom ‚â´ (œÅ_ (vCompApp Œ∑ Œ∏ x)).inv ‚â´
      vCompApp Œ∑ Œ∏ x ‚óÅ H.mapId x := by
  have u := (Œ∑.toOplaxTrans.vComp Œ∏.toOplaxTrans|>.naturality_id x)
  dsimp [vCompApp, vCompNaturality, OplaxTrans.vComp,
    OplaxTrans.vCompApp] at u ‚ä¢
  simp only [whiskerRight_comp, assoc, Iso.hom_inv_id_assoc,
    comp_whiskerLeft] at u
  simp only [eqToHom_whiskerRight, whiskerLeft_eqToHom, eqToHom_trans,
    whiskerLeft_comp, comp_whiskerRight, assoc, ‚Üê whisker_exchange_assoc,
    id_whiskerLeft, whiskerRight_comp,
    associator_inv_congr (f := ùüô (F.obj x)) rfl (Œ∑.app_eq_eqToHom x).symm
      (Œ∏.app_eq_eqToHom x).symm,
    associator_hom_congr (f := F.map (ùüô x)) rfl (Œ∑.app_eq_eqToHom x).symm
      (Œ∏.app_eq_eqToHom x).symm,
    eqToHom_trans_assoc, eqToHom_refl, id_comp, Iso.hom_inv_id_assoc,
    Iso.cancel_iso_hom_left]
  rw [whiskerRight_congr (Œ∏.app_eq_eqToHom x).symm,
    whiskerRight_congr (Œ∑.app_eq_eqToHom x).symm]
  let t := eqToHomTransIso (Œ∑.obj_eq x) (Œ∏.obj_eq x)
  have := rightUnitor_inv_naturality
      (eqToHomTransIso (Œ∑.obj_eq x) (Œ∏.obj_eq x)).hom =‚â´
        (eqToHomTransIso (Œ∑.obj_eq x) (Œ∏.obj_eq x)).inv ‚ñ∑ ùüô (H.obj x)
  simp only [assoc, hom_inv_whiskerRight, comp_id] at this
  simp only [comp_whiskerRight, eqToHom_whiskerRight, assoc, eqToHom_trans,
    eqToHom_trans_assoc, eqToHom_refl, id_comp, reassoc_of% u, ‚Üê this,
    rightUnitor_inv_congr (congr_arg‚ÇÇ (¬∑ ‚â´ ¬∑)
      (Œ∑.app_eq_eqToHom x).symm (Œ∏.app_eq_eqToHom x).symm),
    leftUnitor_inv_congr (congr_arg‚ÇÇ (¬∑ ‚â´ ¬∑)
      (Œ∑.app_eq_eqToHom x).symm (Œ∏.app_eq_eqToHom x).symm)]
  congr 2
  dsimp [t]
  rw [‚Üê whisker_exchange]
  simp [associator_inv_congr (h := H.map (ùüô x)) (Œ∑.app_eq_eqToHom x).symm
      (Œ∏.app_eq_eqToHom x).symm rfl,
    associator_hom_congr (h := ùüô (H.obj x)) (Œ∑.app_eq_eqToHom x).symm
      (Œ∏.app_eq_eqToHom x).symm rfl,
    congr_whiskerLeft (Œ∏.app_eq_eqToHom x).symm (H.mapId x),
    congr_whiskerLeft (Œ∑.app_eq_eqToHom x).symm (Œ∏.app x ‚óÅ H.mapId x) ]

lemma vCompNaturality_comp {x y z : B} (f : x ‚ü∂ y) (g : y ‚ü∂ z) :
    F.mapComp f g ‚ñ∑ vCompApp Œ∑ Œ∏ z ‚â´ vCompNaturality Œ∑ Œ∏ (f ‚â´ g) =
    (Œ±_ _ _ _).hom ‚â´ F.map f ‚óÅ vCompNaturality Œ∑ Œ∏ g ‚â´
      (Œ±_ _ _ _).inv ‚â´ vCompNaturality Œ∑ Œ∏ f ‚ñ∑ H.map g ‚â´ (Œ±_ _ _ _).hom ‚â´
      vCompApp Œ∑ Œ∏ x ‚óÅ H.mapComp f g := by
    dsimp [vCompApp, vCompNaturality]
    have u := (Œ∑.toOplaxTrans.vComp Œ∏.toOplaxTrans|>.naturality_comp f g)
    simp only [OplaxTrans.vComp, whiskerRight_comp, assoc, Iso.hom_inv_id_assoc,
      whiskerLeft_comp, comp_whiskerRight, whisker_assoc, comp_whiskerLeft,
      pentagon_inv_hom_hom_hom_hom_assoc, Iso.inv_hom_id_assoc,
      pentagon_inv_assoc] at u
    simp only [eqToHom_whiskerRight,
      whiskerLeft_eqToHom, eqToHom_trans,
      whiskerLeft_comp, comp_whiskerRight, assoc, whisker_assoc,
      Iso.inv_hom_id_assoc, ‚Üê whiskerLeft_comp_assoc,
      inv_hom_whiskerRight, whiskerLeft_id, id_comp]
    simp only [OplaxTrans.vComp, assoc, whiskerLeft_comp, comp_whiskerRight,
      whisker_assoc]
    slice_lhs 1 4 =>
      equals _ ‚óÅ (eqToHomTransIso (Œ∑.obj_eq z) (Œ∏.obj_eq z)).hom ‚â´
          _ ‚óÅ (eqToHom (congr_arg‚ÇÇ (¬∑ ‚â´ ¬∑)
            (Œ∑.app_eq_eqToHom z).symm (Œ∏.app_eq_eqToHom z).symm)) ‚â´
          F.mapComp f g ‚ñ∑ _ ‚â´ (Œ±_ _ _ _).inv =>
        simp only [‚Üê whisker_exchange_assoc, comp_whiskerLeft,
          whiskerRight_comp, assoc, whiskerLeft_eqToHom, Iso.hom_inv_id,
          comp_id, Iso.cancel_iso_hom_left]
        rw [whiskerRight_congr (Œ∏.app_eq_eqToHom z).symm,
          whiskerRight_congr (Œ∑.app_eq_eqToHom z).symm]
        simp [associator_hom_congr (f := (F.map (f ‚â´ g)))
            rfl (Œ∑.app_eq_eqToHom z).symm (Œ∏.app_eq_eqToHom z).symm,
          associator_inv_congr (f := (F.map f ‚â´ F.map g))
            rfl (Œ∑.app_eq_eqToHom z).symm (Œ∏.app_eq_eqToHom z).symm]
    simp only [Category.assoc, whiskerRight_comp, Iso.hom_inv_id_assoc,
      ‚Üê comp_whiskerRight_assoc]
    simp only [comp_whiskerRight, assoc, reassoc_of% u]
    simp only [comp_whiskerLeft, associator_inv_congr
        (f := F.map f) (g := F.map g) rfl rfl (congr_arg‚ÇÇ (¬∑ ‚â´ ¬∑)
          (Œ∑.app_eq_eqToHom z).symm (Œ∏.app_eq_eqToHom z).symm),
      whiskerLeft_eqToHom, OplaxTrans.vCompApp, assoc, eqToHom_trans_assoc,
      eqToHom_refl, id_comp, Iso.inv_hom_id_assoc,
      associator_inv_congr (f := F.map f) (h := H.map g) rfl
        (congr_arg‚ÇÇ (¬∑ ‚â´ ¬∑) (Œ∑.app_eq_eqToHom y).symm (Œ∏.app_eq_eqToHom y).symm)
        rfl,
      pentagon_inv_assoc, Iso.cancel_iso_hom_left]
    congr 12
    rw [associator_naturality_left_assoc, ‚Üê whisker_exchange]
    simp only [comp_whiskerLeft, assoc]
    rw [congr_whiskerLeft (Œ∏.app_eq_eqToHom x).symm,
      congr_whiskerLeft (Œ∑.app_eq_eqToHom x).symm]
    simp [associator_inv_congr (h := H.map (f ‚â´ g))
        (Œ∑.app_eq_eqToHom x).symm (Œ∏.app_eq_eqToHom x).symm rfl,
      associator_hom_congr (h := H.map f ‚â´ H.map g)
        (Œ∑.app_eq_eqToHom x).symm (Œ∏.app_eq_eqToHom x).symm rfl,
      associator_hom_congr (g := H.map f) (h := H.map g)
        (congr_arg‚ÇÇ (¬∑ ‚â´ ¬∑)
          (Œ∑.app_eq_eqToHom x).symm (Œ∏.app_eq_eqToHom x).symm) rfl rfl]

lemma vCompNaturality_naturality {x y : B} {u v : x ‚ü∂ y} (f : u ‚ü∂ v) :
    F.map‚ÇÇ f ‚ñ∑ vCompApp Œ∑ Œ∏ y ‚â´ vCompNaturality Œ∑ Œ∏ v =
    vCompNaturality Œ∑ Œ∏ u ‚â´ vCompApp Œ∑ Œ∏ x ‚óÅ H.map‚ÇÇ f := by
  dsimp [vCompApp, vCompNaturality]
  have n := (Œ∑.toOplaxTrans.vComp Œ∏.toOplaxTrans|>.naturality_naturality f)
  simp only [OplaxTrans.vComp, OplaxTrans.vCompApp, whiskerRight_comp, assoc,
    Iso.hom_inv_id_assoc, comp_whiskerLeft, Iso.inv_hom_id_assoc,
    Iso.cancel_iso_inv_left, eqToHom_whiskerRight,
    whiskerLeft_eqToHom, eqToHom_trans, whiskerLeft_comp,
    comp_whiskerRight] at n ‚ä¢
  simp only [‚Üê whisker_exchange_assoc, whiskerRight_comp,
    associator_inv_congr (f := F.map u)
      rfl (Œ∑.app_eq_eqToHom y).symm (Œ∏.app_eq_eqToHom y).symm,
    whiskerRight_congr (Œ∑.app_eq_eqToHom y).symm (F.map‚ÇÇ f), comp_whiskerRight,
    eqToHom_whiskerRight, assoc, eqToHom_trans, eqToHom_trans_assoc,
    whiskerRight_congr (Œ∏.app_eq_eqToHom y).symm (F.map‚ÇÇ f ‚ñ∑ Œ∑.app y),
    associator_hom_congr (f := F.map v)
      rfl (Œ∑.app_eq_eqToHom y).symm (Œ∏.app_eq_eqToHom y).symm,
    eqToHom_refl, id_comp, Iso.hom_inv_id_assoc, reassoc_of% n]
  congr 6
  simp [‚Üê whisker_exchange,
    associator_hom_congr (h := H.map u)
      (Œ∑.app_eq_eqToHom x).symm (Œ∏.app_eq_eqToHom x).symm rfl,
    associator_inv_congr (h := H.map v)
      (Œ∑.app_eq_eqToHom x).symm (Œ∏.app_eq_eqToHom x).symm rfl,
    congr_whiskerLeft (Œ∏.app_eq_eqToHom x).symm (H.map‚ÇÇ f),
    congr_whiskerLeft (Œ∑.app_eq_eqToHom x).symm (Œ∏.app x ‚óÅ H.map‚ÇÇ f)]

end vComp

/-- Vertical composition of icons. This is in fact the vertical composition of the underlying
oplax natural transformations, with correction terms added so that the app component can be a
single `eqToHom` morphism (rather than a composition of such). -/
def vComp {F G H : LaxFunctor B C} (Œ∑ : Icon F G) (Œ∏ : Icon G H) :
    Icon F H where
  app x := vCompApp Œ∑ Œ∏ x
  naturality f := vCompNaturality Œ∑ Œ∏ f
  obj_eq x := (Œ∑.obj_eq x).trans (Œ∏.obj_eq x)
  app_eq_eqToHom _ := rfl
  naturality_id x := vCompNaturality_id Œ∑ Œ∏ x
  naturality_comp f g := vCompNaturality_comp Œ∑ Œ∏ f g
  naturality_naturality f := vCompNaturality_naturality Œ∑ Œ∏ f

attribute [local ext] Icon in
theorem comp_assoc {F G H K : LaxFunctor B C}
    (Œ∑ : Icon F G) (Œ∏ : Icon G H) (œÑ : Icon H K) :
    (Œ∑.vComp Œ∏).vComp œÑ = Œ∑.vComp (Œ∏.vComp œÑ) := by
  ext
  ¬∑ rfl
  ¬∑ rw [heq_iff_eq]
    ext x y f
    dsimp [vComp, vCompApp, vCompNaturality, OplaxTrans.vComp,
      OplaxTrans.vCompApp, OplaxTrans.vCompNaturality]
    simp only [Category.comp_id, Category.id_comp, Category.assoc,
      whiskerLeft_id, id_whiskerRight,
      whiskerLeft_comp, comp_whiskerRight, Category.assoc]
    -- The proof here is to pull the naturality 2-cells towards the
    -- center of the expressions as much as possible, the "outer morphisms"
    -- will then be a buch of eqToHoms that will eventually cancel out, and
    -- we‚Äôll be left with a simpable bicategory goal.
    -- Abstracting away the proofs speeds up things a bit, it‚Äôs also somewhat
    -- more convenient to give them shorter names
    generalize_proofs t‚ÇÅ t‚ÇÇ t‚ÇÉ oy‚ÇÉ my‚ÇÉ oy‚ÇÅ oy‚ÇÇ my‚ÇÅ my‚ÇÇ
      ox‚ÇÇ mx‚ÇÇ ox‚ÇÅ mx‚ÇÅ t‚ÇÑ ox‚ÇÉ mx‚ÇÉ t‚ÇÖ t‚ÇÜ
    slice_lhs 12 17 =>
      equals (Œ±_ (Œ∑.app x ‚â´ Œ∏.app x) (H.map f) (œÑ.app y)).hom ‚â´
          _ ‚óÅ œÑ.naturality f ‚â´ (eqToHom (congr_arg‚ÇÇ (¬∑ ‚â´ ¬∑) mx‚ÇÅ mx‚ÇÇ) ‚â´
            (eqToHomTransIso ox‚ÇÅ ox‚ÇÇ).inv) ‚ñ∑ _ ‚â´ (Œ±_ _ _ _).inv =>
        dsimp
        simp only [comp_whiskerLeft,
          whiskerRight_comp, comp_whiskerRight, assoc, Iso.hom_inv_id, comp_id]
        rw [associator_inv_naturality_right_assoc, Iso.hom_inv_id_assoc,
          ‚Üê associator_inv_naturality_left_assoc, whisker_exchange_assoc,
          ‚Üê associator_inv_naturality_left, whisker_exchange_assoc]
        simp
    slice_rhs 4 8 =>
      equals (F.map f ‚â´ Œ∑.app y) ‚óÅ (eqToHomTransIso oy‚ÇÇ oy‚ÇÉ).hom ‚â´
          (F.map f ‚â´ Œ∑.app y) ‚óÅ eqToHom (congr_arg‚ÇÇ (¬∑ ‚â´ ¬∑) my‚ÇÇ my‚ÇÉ) ‚â´
          Œ∑.naturality f ‚ñ∑ _ ‚â´ (Œ±_ _ _ _).hom =>
        simp only [comp_whiskerLeft, whiskerRight_comp, assoc,
          Iso.inv_hom_id_assoc]
        rw [associator_naturality_left_assoc, Iso.inv_hom_id_assoc,
          associator_inv_naturality_right_assoc, whisker_exchange_assoc,
          associator_inv_naturality_right_assoc, whisker_exchange_assoc,
          Iso.hom_inv_id_assoc]
        simp [associator_inv_congr (f := Œ∑.app x) (g := G.map f)
          rfl rfl (congr_arg‚ÇÇ (¬∑ ‚â´ ¬∑) my‚ÇÇ my‚ÇÉ)]
    simp only [whisker_assoc, whiskerLeft_comp, assoc, comp_whiskerLeft,
      whiskerRight_comp, comp_whiskerRight, Iso.hom_inv_id, comp_id,
      pentagon_inv_hom_hom_hom_hom_assoc, Iso.inv_hom_id_assoc,
      pentagon_inv_assoc, pentagon_hom_hom_inv_hom_hom,
      whiskerLeft_inv_hom_assoc]
    -- Now we cancel out the outer morphisms that are jjust eqToHoms noise
    let V : F.map f ‚â´ eqToHom ?_ ‚ü∂ F.map f ‚â´ Œ∑.app y ‚â´ Œ∏.app y ‚â´ œÑ.app y := ?_
    slice_rhs 1 4 => change V
    simp only [assoc]
    rw [‚Üê cancel_epi (inv V), IsIso.inv_hom_id_assoc]
    let W : Œ∑.app x ‚â´ Œ∏.app x ‚â´ œÑ.app x ‚â´ K.map f ‚ü∂ eqToHom ?_ ‚â´ K.map f := ?_
    slice_rhs 9 16 => change W
    rw [‚Üê cancel_mono (inv W)]
    simp only [assoc, IsIso.hom_inv_id, comp_id]
    slice_lhs 1 7 => equals ùüô _ =>
      simp only [IsIso.inv_comp, inv_whiskerLeft, inv_eqToHom,
        IsIso.Iso.inv_hom, inv_whiskerRight, assoc, V, ‚Üê whiskerLeft_comp]
      conv_lhs => arg 2; equals ùüô _ =>
        have := eqToHom oy‚ÇÅ ‚óÅ (eqToHomTransIso oy‚ÇÇ oy‚ÇÉ).hom ‚â´=
          associator_eqToHom_inv oy‚ÇÅ oy‚ÇÇ oy‚ÇÉ =‚â´
          (eqToHomTransIso oy‚ÇÅ oy‚ÇÇ).inv ‚ñ∑ eqToHom oy‚ÇÉ
        simp only [assoc, hom_inv_whiskerRight, comp_id,
          whiskerLeft_hom_inv_assoc] at this
        simp [associator_hom_congr (f := Œ∑.app y) (h := œÑ.app y) rfl my‚ÇÇ rfl,
          ‚Üê reassoc_of% this,
          associator_inv_congr my‚ÇÅ my‚ÇÇ my‚ÇÉ,
          congr_whiskerLeft my‚ÇÅ (eqToHomTransIso oy‚ÇÇ oy‚ÇÉ).hom,
          whiskerRight_congr my‚ÇÉ (eqToHomTransIso oy‚ÇÅ oy‚ÇÇ).inv]
      simp
    simp only [Category.assoc, id_comp]
    slice_lhs 9 17 => equals ùüô _ =>
      have n' := congr_arg (fun t ‚Ü¶ t ‚ñ∑ K.map f) <|
        associator_eqToHom_hom ox‚ÇÅ ox‚ÇÇ ox‚ÇÉ =‚â´
          eqToHom ox‚ÇÅ ‚óÅ (eqToHomTransIso ox‚ÇÇ ox‚ÇÉ).inv
      simp only [comp_whiskerRight, whisker_assoc, assoc,
        whiskerLeft_hom_inv, comp_id] at n'
      simp only [IsIso.inv_comp, inv_whiskerRight, IsIso.Iso.inv_inv,
        inv_eqToHom, assoc, inv_whiskerLeft, W]
      rw [associator_naturality_left_assoc, ‚Üê whisker_exchange_assoc,
        associator_inv_naturality_left_assoc, ‚Üê reassoc_of% n']
      simp only [eqToHom_whiskerRight, whiskerLeft_eqToHom, assoc,
        eqToHom_trans_assoc, eqToHom_refl, id_comp, Iso.inv_hom_id_assoc,
        pentagon_inv_hom_hom_hom_inv_assoc, whiskerLeft_comp, eqToHom_trans,
        pentagon_hom_hom_inv_hom_hom_assoc,
        associator_hom_congr (g := œÑ.app x) (h := K.map f)
          (congr_arg‚ÇÇ (¬∑ ‚â´ ¬∑) mx‚ÇÅ.symm mx‚ÇÇ.symm) rfl rfl,
        congr_whiskerLeft mx‚ÇÅ.symm ((eqToHomTransIso ox‚ÇÇ ox‚ÇÉ).inv ‚ñ∑ K.map f),
        associator_inv_congr (g := eqToHom t‚ÇÜ) (h := K.map f) mx‚ÇÅ.symm rfl rfl,
        associator_hom_congr mx‚ÇÅ.symm mx‚ÇÇ.symm
          (congr_arg‚ÇÇ (¬∑ ‚â´ ¬∑) mx‚ÇÉ.symm (rfl : K.map f = _)),
        associator_inv_congr (h := K.map f) mx‚ÇÇ.symm mx‚ÇÉ.symm rfl,
        congr_whiskerLeft mx‚ÇÅ.symm (Œ±_ (Œ∏.app x) (œÑ.app x) (K.map f)).inv]
      simp [‚Üê whiskerLeft_comp_assoc,
        associator_hom_congr (f := Œ∏.app x) (h := K.map f)
          rfl mx‚ÇÉ.symm rfl]
    simp

attribute [local ext] Icon in
theorem comp_id {F G : LaxFunctor B C} (Œ∑ : Icon F G) :
    (Œ∑.vComp (id G)) = Œ∑ := by
  ext
  ¬∑ simp [vComp, id, vCompApp, Œ∑.app_eq_eqToHom]
  ¬∑ -- Deep in the DTT hell
    apply Function.hfunext rfl
    intro a a' h
    rw [heq_iff_eq] at h
    subst h
    apply Function.hfunext rfl
    intro b b' h
    rw [heq_iff_eq] at h
    subst h
    apply Function.hfunext rfl
    intro f f' h
    rw [heq_iff_eq] at h
    subst h
    rw [‚Üê conj_eqToHom_iff_heq]
    rotate_right 2
    ¬∑ simp [vComp, id, vCompApp, Œ∑.app_eq_eqToHom]
    ¬∑ simp [vComp, id, vCompApp, Œ∑.app_eq_eqToHom]
    ¬∑ simp [vComp, vCompApp, vCompNaturality, OplaxTrans.vComp,
        OplaxTrans.vCompApp, OplaxTrans.vCompNaturality,
        eqToHomTransIso_refl_right (Œ∑.obj_eq b),
        eqToHomTransIso_refl_right (Œ∑.obj_eq a)];

attribute [local ext] Icon in
theorem id_comp {F G : LaxFunctor B C} (Œ∑ : Icon F G) :
    ((id F).vComp Œ∑) = Œ∑ := by
  ext
  ¬∑ simp [vComp, id, vCompApp, Œ∑.app_eq_eqToHom]
  ¬∑ apply Function.hfunext rfl
    intro a a' h
    rw [heq_iff_eq] at h
    subst h
    apply Function.hfunext rfl
    intro b b' h
    rw [heq_iff_eq] at h
    subst h
    apply Function.hfunext rfl
    intro f f' h
    rw [heq_iff_eq] at h
    subst h
    rw [‚Üê conj_eqToHom_iff_heq]
    rotate_right 2
    ¬∑ simp [vComp, id, vCompApp, Œ∑.app_eq_eqToHom]
    ¬∑ simp [vComp, id, vCompApp, Œ∑.app_eq_eqToHom]
    ¬∑ simp [vComp, vCompApp, vCompNaturality, OplaxTrans.vComp,
      OplaxTrans.vCompApp, OplaxTrans.vCompNaturality,
      eqToHomTransIso_refl_left (Œ∑.obj_eq b),
      eqToHomTransIso_refl_left (Œ∑.obj_eq a),
      leftUnitor_inv_congr (Œ∑.app_eq_eqToHom b).symm,
      associator_hom_congr (f := ùüô (F.obj a)) (h := G.map f)
        rfl (Œ∑.app_eq_eqToHom a).symm rfl,
      leftUnitor_hom_congr
        (congr_arg‚ÇÇ (¬∑ ‚â´ ¬∑) (Œ∑.app_eq_eqToHom a).symm (rfl : G.map f = _))];

end Icon

end CategoryTheory.Lax
