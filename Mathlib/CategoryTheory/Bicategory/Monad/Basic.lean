/-
Copyright (c) 2024 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete
import Mathlib.CategoryTheory.Bicategory.FunctorBicategory
import Mathlib.Tactic.Widget.StringDiagram
import ProofWidgets.Component.Panel.GoalTypePanel

/-!
# Monads in a bicategory

We define a monad and a comonad in a bicategory `B`.
-/

namespace CategoryTheory

namespace Bicategory

universe w v u u‚ÇÅ

variable {B : Type u} [Bicategory.{w, v} B]

/-- A monad in a bicategory `B` is a 1-morphism `t : a ‚ü∂ a` together with 2-morphisms
`Œº : t ‚â´ t ‚ü∂ t` and `Œ∑ : ùüô a ‚ü∂ t` satisfying the monad laws. -/
class Monad {a : B} (t : a ‚ü∂ a) where
  /-- The multiplication 2-morphism of the monad. -/
  mul : t ‚â´ t ‚ü∂ t
  /-- The unit 2-morphism of the monad. -/
  unit : ùüô a ‚ü∂ t
  assoc : mul ‚ñ∑ t ‚â´ mul = (Œ±_ _ _ _).hom ‚â´ t ‚óÅ mul ‚â´ mul := by aesop_cat
  left_unit : unit ‚ñ∑ t ‚â´ mul = (Œª_ t).hom := by aesop_cat
  right_unit : t ‚óÅ unit ‚â´ mul = (œÅ_ t).hom := by aesop_cat

@[inherit_doc] scoped notation " Œº " => Monad.mul
@[inherit_doc] scoped notation " Œ∑ " => Monad.unit

/-- A comonad in a bicategory `B` is a 1-morphism `g : a ‚ü∂ a` together with 2-morphisms
`Œ¥ : g ‚ü∂ g ‚â´ g` and `Œµ : g ‚ü∂ ùüô a` satisfying the comonad laws. -/
class Comonad {a : B} (g : a ‚ü∂ a) where
  /-- The comultiplication 2-morphism of the comonad. -/
  comul : g ‚ü∂ g ‚â´ g
  /-- The counit 2-morphism of the comonad. -/
  counit : g ‚ü∂ ùüô a
  coassoc : comul ‚â´ comul ‚ñ∑ g = comul ‚â´ g ‚óÅ comul ‚â´ (Œ±_ _ _ _).inv := by aesop_cat
  left_counit : comul ‚â´ counit ‚ñ∑ g = (Œª_ g).inv := by aesop_cat
  right_counit : comul ‚â´ g ‚óÅ counit = (œÅ_ g).inv := by aesop_cat

@[inherit_doc] scoped notation " Œ¥ " => Comonad.comul
@[inherit_doc] scoped notation " Œµ " => Comonad.counit

attribute [reassoc (attr := simp)] Comonad.left_counit Comonad.right_counit

open ProofWidgets

show_panel_widgets [local GoalTypePanel]

example {a : B} (t : a ‚ü∂ a) [Monad t] : Œº ‚ñ∑ t ‚â´ Œº = (Œ±_ _ _ _).hom ‚â´ t ‚óÅ Œº ‚â´ Œº := by
  -- Place cursor here to see the string diagrams
  apply Monad.assoc

example {a : B} (t : a ‚ü∂ a) [Monad t] : Œ∑ ‚ñ∑ t ‚â´ Œº = (Œª_ t).hom := by
  --
  apply Monad.left_unit

example {a : B} (t : a ‚ü∂ a) [Monad t] : t ‚óÅ Œ∑ ‚â´ Œº = (œÅ_ t).hom := by
  --
  apply Monad.right_unit

example {a : B} (g : a ‚ü∂ a) [Comonad g] : Œ¥ ‚â´ Œ¥ ‚ñ∑ g = Œ¥ ‚â´ g ‚óÅ Œ¥ ‚â´ (Œ±_ _ _ _).inv := by
  --
  apply Comonad.coassoc

example {a : B} (g : a ‚ü∂ a) [Comonad g] : Œ¥ ‚â´ Œµ ‚ñ∑ g = (Œª_ g).inv := by
  --
  apply Comonad.left_counit

example {a : B} (g : a ‚ü∂ a) [Comonad g] : Œ¥ ‚â´ g ‚óÅ Œµ = (œÅ_ g).inv := by
  --
  apply Comonad.right_counit


namespace Monad

instance {a : B} : Monad (ùüô a) where
  mul := (œÅ_ _).hom
  unit := ùüô _

/-- Construct a monad in `B` from a lax functor from the trivial bicategory to `B`. -/
def ofLaxFromPUnit (F : LaxFunctor (LocallyDiscrete (Discrete PUnit)) B) :
    Monad (F.map (ùüô ‚ü®‚ü®PUnit.unit‚ü©‚ü©)) where
  mul := F.mapComp _ _ ‚â´ F.map‚ÇÇ (œÅ_ _).hom
  unit := F.mapId _
  assoc := by
    set x : LocallyDiscrete (Discrete PUnit) := ‚ü®‚ü®PUnit.unit‚ü©‚ü©
    simp only [comp_whiskerRight, Category.assoc, whiskerLeft_comp]
    rw [‚Üê F.mapComp_naturality_left_assoc, ‚Üê F.mapComp_naturality_right_assoc]
    simp [F.mapComp_assoc_left_assoc]
  left_unit := (F.map‚ÇÇ_leftUnitor_hom _).symm
  right_unit := (F.map‚ÇÇ_rightUnitor_hom _).symm

end Monad

namespace Comonad

theorem coassoc_symm {a : B} (g : a ‚ü∂ a) [Comonad g] :
    comul ‚â´ g ‚óÅ comul = comul ‚â´ comul ‚ñ∑ g ‚â´ (Œ±_ _ _ _).hom := by
  rw [‚Üê cancel_mono (Œ±_ _ _ _).inv]
  simp [Comonad.coassoc]

instance {a : B} : Comonad (ùüô a) where
  comul := (œÅ_ _).inv
  counit := ùüô _

/-- Construct a comonad in `B` from an oplax functor from the trivial bicategory to `B`. -/
def ofOplaxFromPUnit (F : OplaxFunctor (LocallyDiscrete (Discrete PUnit)) B) :
    Comonad (F.map (ùüô ‚ü®‚ü®PUnit.unit‚ü©‚ü©)) where
  comul := F.map‚ÇÇ (œÅ_ _).inv ‚â´ F.mapComp _ _
  counit := F.mapId _
  coassoc := by
    set x : LocallyDiscrete (Discrete PUnit) := ‚ü®‚ü®PUnit.unit‚ü©‚ü©
    simp only [comp_whiskerRight, Category.assoc, whiskerLeft_comp]
    rw [‚Üê F.mapComp_naturality_left_assoc, ‚Üê F.mapComp_naturality_right_assoc]
    simp only [whiskerRight_id, Iso.hom_inv_id_assoc, whiskerLeft_rightUnitor_inv,
      PrelaxFunctor.map‚ÇÇ_comp, Category.assoc, OplaxFunctor.map‚ÇÇ_associator_assoc, Iso.hom_inv_id,
      Category.comp_id]
  left_counit := by
    set x : LocallyDiscrete (Discrete PUnit) := ‚ü®‚ü®PUnit.unit‚ü©‚ü©
    rw [Category.assoc, F.mapComp_id_left, unitors_equal, F.map‚ÇÇ_inv_hom_assoc]
  right_counit := by
    set x : LocallyDiscrete (Discrete PUnit) := ‚ü®‚ü®PUnit.unit‚ü©‚ü©
    rw [Category.assoc, F.mapComp_id_right, F.map‚ÇÇ_inv_hom_assoc]

/-- The oplax functor from the trivial bicategory to `B` associated with the comonad. -/
def toOplax {a : B} (t : a ‚ü∂ a) [Comonad t] :
    OplaxFunctor (LocallyDiscrete (Discrete PUnit)) B where
  obj := fun _ => a
  map := fun _ => t
  map‚ÇÇ := fun _ => ùüô _
  mapId _ := Œµ
  mapComp _ _ := Œ¥
  map‚ÇÇ_associator _ _ _ := by
    dsimp only
    rw [Category.id_comp]
    apply coassoc_symm

end Comonad

/-- The bicateogry of comonads in `B`. -/
def ComonadBicat (B : Type u) [Bicategory.{w, v} B] :=
  OplaxFunctor (LocallyDiscrete (Discrete PUnit)) B

namespace ComonadBicat

instance : Bicategory (ComonadBicat B) :=
  inferInstanceAs <| Bicategory (OplaxFunctor (LocallyDiscrete (Discrete PUnit)) B)

/-- The oplax functor from the trivial bicategory to `B` associated with the comonad. -/
def toOplax (m : ComonadBicat B) : OplaxFunctor (LocallyDiscrete (Discrete PUnit)) B :=
  m

/-- The object in `B` associated with the comonad. -/
def obj (m : ComonadBicat B) :=
  m.toOplax.obj ‚ü®‚ü®PUnit.unit‚ü©‚ü©

/-- The morphism in `B` associated with the comonad. -/
def hom (m : ComonadBicat B) : m.obj ‚ü∂ m.obj :=
  m.toOplax.map (ùüô ‚ü®‚ü®PUnit.unit‚ü©‚ü©)

instance (m : ComonadBicat B) : Comonad m.hom :=
  Comonad.ofOplaxFromPUnit m.toOplax

/-- Construct a comonad as an object in `ComonadBicat B`. -/
def mkOfComonad {a : B} (g : a ‚ü∂ a) [Comonad g] : ComonadBicat B :=
  Comonad.toOplax g

end ComonadBicat

end Bicategory

end CategoryTheory
