/-
Copyright (c) 2022 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathlib.CategoryTheory.Bicategory.Modification.Oplax

/-!
# The bicategory of oplax functors between two bicategories

Given bicategories `B` and `C`, we give a bicategory structure on `OplaxFunctor B C` whose
* objects are oplax functors,
* 1-morphisms are oplax natural transformations, and
* 2-morphisms are modifications.
-/


namespace CategoryTheory.Oplax

open Category Bicategory

open scoped Bicategory

universe w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variable {B : Type u‚ÇÅ} [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]
variable {F G H I : OplaxFunctor B C}

namespace OplaxTrans

/-- Left whiskering of an oplax natural transformation and a modification. -/
@[simps]
def whiskerLeft (Œ∑ : F ‚ü∂ G) {Œ∏ Œπ : G ‚ü∂ H} (Œì : Œ∏ ‚ü∂ Œπ) : Œ∑ ‚â´ Œ∏ ‚ü∂ Œ∑ ‚â´ Œπ where
  app a := Œ∑.app a ‚óÅ Œì.app a
  naturality {a b} f := by
    dsimp
    rw [associator_inv_naturality_right_assoc, whisker_exchange_assoc]
    simp

/-- Right whiskering of an oplax natural transformation and a modification. -/
@[simps]
def whiskerRight {Œ∑ Œ∏ : F ‚ü∂ G} (Œì : Œ∑ ‚ü∂ Œ∏) (Œπ : G ‚ü∂ H) : Œ∑ ‚â´ Œπ ‚ü∂ Œ∏ ‚â´ Œπ where
  app a := Œì.app a ‚ñ∑ Œπ.app a
  naturality {a b} f := by
    dsimp
    simp_rw [assoc, ‚Üê associator_inv_naturality_left, whisker_exchange_assoc]
    simp

/-- Associator for the vertical composition of oplax natural transformations. -/
@[simps!]
def associator (Œ∑ : F ‚ü∂ G) (Œ∏ : G ‚ü∂ H) (Œπ : H ‚ü∂ I) : (Œ∑ ‚â´ Œ∏) ‚â´ Œπ ‚âÖ Œ∑ ‚â´ Œ∏ ‚â´ Œπ :=
  ModificationIso.ofComponents (fun a => Œ±_ (Œ∑.app a) (Œ∏.app a) (Œπ.app a)) (by simp)

/-- Left unitor for the vertical composition of oplax natural transformations. -/
@[simps!]
def leftUnitor (Œ∑ : F ‚ü∂ G) : ùüô F ‚â´ Œ∑ ‚âÖ Œ∑ :=
  ModificationIso.ofComponents (fun a => Œª_ (Œ∑.app a)) (by simp)

/-- Right unitor for the vertical composition of oplax natural transformations. -/
@[simps!]
def rightUnitor (Œ∑ : F ‚ü∂ G) : Œ∑ ‚â´ ùüô G ‚âÖ Œ∑ :=
  ModificationIso.ofComponents (fun a => œÅ_ (Œ∑.app a)) (by simp)

variable (B C)

/-- A bicategory structure on the oplax functors between bicategories. -/
@[simps!]
scoped instance OplaxFunctor.bicategory : Bicategory (OplaxFunctor B C) where
  whiskerLeft {_ _ _} Œ∑ _ _ Œì := whiskerLeft Œ∑ Œì
  whiskerRight {_ _ _} _ _ Œì Œ∑ := whiskerRight Œì Œ∑
  associator {_ _ _} _ := associator
  leftUnitor {_ _} := leftUnitor
  rightUnitor {_ _} := rightUnitor
  whisker_exchange {a b c f g h i} Œ∑ Œ∏ := by
    ext
    exact whisker_exchange _ _

end OplaxTrans

end CategoryTheory.Oplax
