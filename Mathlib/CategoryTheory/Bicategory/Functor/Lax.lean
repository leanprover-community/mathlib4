/-
Copyright (c) 2024 Calle S√∂nne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Calle S√∂nne
-/

import Mathlib.CategoryTheory.Bicategory.Functor.Prelax
import Mathlib.Tactic.CategoryTheory.Slice

/-!
# Lax functors

A lax functor `F` between bicategories `B` and `C` consists of
* a function between objects `F.obj : B ‚ü∂ C`,
* a family of functions between 1-morphisms `F.map : (a ‚ü∂ b) ‚Üí (F.obj a ‚ü∂ F.obj b)`,
* a family of functions between 2-morphisms `F.map‚ÇÇ : (f ‚ü∂ g) ‚Üí (F.map f ‚ü∂ F.map g)`,
* a family of 2-morphisms `F.mapId a : ùüô (F.obj a) ‚ü∂ F.map (ùüô a)`,
* a family of 2-morphisms `F.mapComp f g : F.map f ‚â´ F.map g ‚ü∂ F.map (f ‚â´ g)`, and
* certain consistency conditions on them.

## Main definitions

* `CategoryTheory.LaxFunctor B C` : an lax functor between bicategories `B` and `C`
* `CategoryTheory.LaxFunctor.comp F G` : the composition of lax functors
* `CategoryTheory.LaxFunctor.Pseudocore` : a structure on an Lax functor that promotes a
  Lax functor to a pseudofunctor

## Future work

Some constructions in the bicategory library have only been done in terms of oplax functors,
since lax functors had not yet been added (e.g `FunctorBicategory.lean`). A possible project would
be to mirror these constructions for lax functors.

-/

namespace CategoryTheory

open Category Bicategory

open Bicategory

universe w‚ÇÅ w‚ÇÇ w‚ÇÉ v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

/-- A lax functor `F` between bicategories `B` and `C` consists of a function between objects
`F.obj`, a function between 1-morphisms `F.map`, and a function between 2-morphisms `F.map‚ÇÇ`.

Unlike functors between categories, `F.map` do not need to strictly commute with the composition,
and do not need to strictly preserve the identity. Instead, there are specified 2-morphisms
`ùüô (F.obj a) ‚ü∂ F.map (ùüô a)` and `F.map f ‚â´ F.map g ‚ü∂ F.map (f ‚â´ g)`.

`F.map‚ÇÇ` strictly commute with compositions and preserve the identity. They also preserve the
associator, the left unitor, and the right unitor modulo some adjustments of domains and codomains
of 2-morphisms.
-/
structure LaxFunctor (B: Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] (C : Type u‚ÇÇ) [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]
    extends PrelaxFunctor B C where
  /-- The 2-morphism underlying the lax unity constraint. -/
  mapId (a : B) : ùüô (obj a) ‚ü∂ map (ùüô a)
  /-- The 2-morphism underlying the lax functoriality constraint. -/
  mapComp {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) : map f ‚â´ map g ‚ü∂ map (f ‚â´ g)
  /-- Naturality of the lax functoriality constraint, on the left. -/
  mapComp_naturality_left :
    ‚àÄ {a b c : B} {f f' : a ‚ü∂ b} (Œ∑ : f ‚ü∂ f') (g : b ‚ü∂ c),
      mapComp f g ‚â´ map‚ÇÇ (Œ∑ ‚ñ∑ g) = map‚ÇÇ Œ∑ ‚ñ∑ map g ‚â´ mapComp f' g:= by aesop_cat
  /-- Naturality of the lax functoriality constraint, on the right. -/
  mapComp_naturality_right :
    ‚àÄ {a b c : B} (f : a ‚ü∂ b) {g g' : b ‚ü∂ c} (Œ∑ : g ‚ü∂ g'),
     mapComp f g ‚â´ map‚ÇÇ (f ‚óÅ Œ∑) = map f ‚óÅ map‚ÇÇ Œ∑ ‚â´ mapComp f g' := by aesop_cat
  /-- Lax associativity. -/
  map‚ÇÇ_associator :
    ‚àÄ {a b c d : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d),
      mapComp f g ‚ñ∑ map h ‚â´ mapComp (f ‚â´ g) h ‚â´ map‚ÇÇ (Œ±_ f g h).hom =
      (Œ±_ (map f) (map g) (map h)).hom ‚â´ map f ‚óÅ mapComp g h ‚â´ mapComp f (g ‚â´ h) := by aesop_cat
  /-- Lax left unity. -/
  map‚ÇÇ_leftUnitor :
    ‚àÄ {a b : B} (f : a ‚ü∂ b),
      map‚ÇÇ (Œª_ f).inv = (Œª_ (map f)).inv ‚â´ mapId a ‚ñ∑ map f ‚â´ mapComp (ùüô a) f := by aesop_cat
  /-- Lax right unity. -/
  map‚ÇÇ_rightUnitor :
    ‚àÄ {a b : B} (f : a ‚ü∂ b),
      map‚ÇÇ (œÅ_ f).inv = (œÅ_ (map f)).inv ‚â´ map f ‚óÅ mapId b ‚â´ mapComp f (ùüô b) := by aesop_cat

initialize_simps_projections LaxFunctor (+toPrelaxFunctor, -obj, -map, -map‚ÇÇ)

namespace LaxFunctor

variable {B : Type u‚ÇÅ} [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]

attribute [reassoc (attr := simp)]
  mapComp_naturality_left mapComp_naturality_right map‚ÇÇ_associator
attribute [simp, reassoc] map‚ÇÇ_leftUnitor map‚ÇÇ_rightUnitor

/-- The underlying prelax functor. -/
add_decl_doc LaxFunctor.toPrelaxFunctor

variable (F : LaxFunctor B C)

@[reassoc]
lemma mapComp_assoc_left {a b c d : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) :
    F.mapComp f g ‚ñ∑ F.map h ‚â´ F.mapComp (f ‚â´ g) h = (Œ±_ (F.map f) (F.map g) (F.map h)).hom ‚â´
      F.map f ‚óÅ F.mapComp g h ‚â´ F.mapComp f (g ‚â´ h) ‚â´ F.map‚ÇÇ (Œ±_ f g h).inv := by
  rw [‚Üê F.map‚ÇÇ_associator_assoc, ‚Üê F.map‚ÇÇ_comp]
  simp only [Iso.hom_inv_id, PrelaxFunctor.map‚ÇÇ_id, comp_id]

@[reassoc]
lemma mapComp_assoc_right {a b c d : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) :
    F.map f ‚óÅ F.mapComp g h ‚â´ F.mapComp f (g ‚â´ h) =
      (Œ±_ (F.map f) (F.map g) (F.map h)).inv ‚â´ F.mapComp f g ‚ñ∑ F.map h ‚â´
        F.mapComp (f ‚â´ g) h ‚â´ F.map‚ÇÇ (Œ±_ f g h).hom := by
  simp only [map‚ÇÇ_associator, Iso.inv_hom_id_assoc]

@[reassoc]
lemma map‚ÇÇ_leftUnitor_hom {a b : B} (f : a ‚ü∂ b) :
    (Œª_ (F.map f)).hom = F.mapId a ‚ñ∑ F.map f ‚â´ F.mapComp (ùüô a) f ‚â´ F.map‚ÇÇ (Œª_ f).hom := by
  rw [‚Üê PrelaxFunctor.map‚ÇÇIso_hom, ‚Üê assoc, ‚Üê Iso.comp_inv_eq, ‚Üê Iso.eq_inv_comp]
  simp only [Functor.mapIso_inv, PrelaxFunctor.mapFunctor_map, map‚ÇÇ_leftUnitor]

@[reassoc]
lemma map‚ÇÇ_rightUnitor_hom {a b : B} (f : a ‚ü∂ b) :
    (œÅ_ (F.map f)).hom = F.map f ‚óÅ F.mapId b ‚â´ F.mapComp f (ùüô b) ‚â´ F.map‚ÇÇ (œÅ_ f).hom := by
  rw [‚Üê PrelaxFunctor.map‚ÇÇIso_hom, ‚Üê assoc, ‚Üê Iso.comp_inv_eq, ‚Üê Iso.eq_inv_comp]
  simp only [Functor.mapIso_inv, PrelaxFunctor.mapFunctor_map, map‚ÇÇ_rightUnitor]

/-- The identity lax functor. -/
@[simps]
def id (B : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] : LaxFunctor B B where
  toPrelaxFunctor := PrelaxFunctor.id B
  mapId := fun a => ùüô (ùüô a)
  mapComp := fun f g => ùüô (f ‚â´ g)

instance : Inhabited (LaxFunctor B B) :=
  ‚ü®id B‚ü©

/-- Composition of lax functors. -/
@[simps]
def comp {D : Type u‚ÇÉ} [Bicategory.{w‚ÇÉ, v‚ÇÉ} D] (F : LaxFunctor B C) (G : LaxFunctor C D) :
    LaxFunctor B D where
  toPrelaxFunctor := PrelaxFunctor.comp F.toPrelaxFunctor G.toPrelaxFunctor
  mapId := fun a => G.mapId (F.obj a) ‚â´ G.map‚ÇÇ (F.mapId a)
  mapComp := fun f g => G.mapComp (F.map f) (F.map g) ‚â´ G.map‚ÇÇ (F.mapComp f g)
  mapComp_naturality_left := fun Œ∑ g => by
    dsimp
    rw [assoc, ‚Üê G.map‚ÇÇ_comp, mapComp_naturality_left, G.map‚ÇÇ_comp, mapComp_naturality_left_assoc]
  mapComp_naturality_right := fun f _ _ Œ∑ => by
    dsimp
    rw [assoc, ‚Üê G.map‚ÇÇ_comp, mapComp_naturality_right, G.map‚ÇÇ_comp, mapComp_naturality_right_assoc]
  map‚ÇÇ_associator := fun f g h => by
    dsimp
    slice_rhs 1 3 =>
      rw [whiskerLeft_comp, assoc, ‚Üê mapComp_naturality_right, ‚Üê map‚ÇÇ_associator_assoc]
    slice_rhs 3 5 =>
      rw [‚Üê G.map‚ÇÇ_comp, ‚Üê G.map‚ÇÇ_comp, ‚Üê F.map‚ÇÇ_associator, G.map‚ÇÇ_comp, G.map‚ÇÇ_comp]
    slice_lhs 1 3 =>
      rw [comp_whiskerRight, assoc, ‚Üê G.mapComp_naturality_left_assoc]
    simp only [assoc]
  map‚ÇÇ_leftUnitor := fun f => by
    dsimp
    simp only [map‚ÇÇ_leftUnitor, PrelaxFunctor.map‚ÇÇ_comp, assoc, mapComp_naturality_left_assoc,
      comp_whiskerRight]
  map‚ÇÇ_rightUnitor := fun f => by
    dsimp
    simp only [map‚ÇÇ_rightUnitor, PrelaxFunctor.map‚ÇÇ_comp, assoc, mapComp_naturality_right_assoc,
      whiskerLeft_comp]

/-- A structure on an Lax functor that promotes an Lax functor to a pseudofunctor.

See `Pseudofunctor.mkOfLax`. -/
structure PseudoCore (F : LaxFunctor B C) where
  /-- The isomorphism giving rise to the lax unity constraint -/
  mapIdIso (a : B) : F.map (ùüô a) ‚âÖ ùüô (F.obj a)
  /-- The isomorphism giving rise to the lax functoriality constraint -/
  mapCompIso {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) : F.map (f ‚â´ g) ‚âÖ F.map f ‚â´ F.map g
  /-- `mapIdIso` gives rise to the lax unity constraint -/
  mapIdIso_inv {a : B} : (mapIdIso a).inv = F.mapId a := by aesop_cat
  /-- `mapCompIso` gives rise to the lax functoriality constraint -/
  mapCompIso_inv {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) : (mapCompIso f g).inv = F.mapComp f g := by
    aesop_cat

attribute [simp] PseudoCore.mapIdIso_inv PseudoCore.mapCompIso_inv

end LaxFunctor

end CategoryTheory
