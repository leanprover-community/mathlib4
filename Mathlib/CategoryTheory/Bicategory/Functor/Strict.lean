/-
Copyright (c) 2025 Calle S√∂nne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Calle S√∂nne
-/

import Mathlib.CategoryTheory.Bicategory.Functor.StrictlyUnitary

/-!
# Strict pseudofunctors

In this file we introduce the notion of strict pseudofunctors, which are pseudofunctors such
that `mapId` and `mapComp` are given by `eqToIso _`.

To a strict pseudofunctor between strict bicategories we can associate a functor between the
underlying categories, see `StrictPseudofunctor.toFunctor`.

-/

namespace CategoryTheory

open Bicategory

universe w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

variable {B : Type u‚ÇÅ} [Bicategory.{w‚ÇÅ, v‚ÇÅ} B]
  {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]
  {D : Type u‚ÇÉ} [Bicategory.{w‚ÇÉ, v‚ÇÉ} D]

variable (B C)

/-- A strict pseudofunctor `F` between bicategories `B` and `C` is a
pseudofunctor `F` from `B` to `C` such that `mapId` and `mapComp` are given by `eqToIso _`. -/
@[kerodon 008H]
structure StrictPseudofunctor extends StrictlyUnitaryPseudofunctor B C where
  map_comp : ‚àÄ {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c), map (f ‚â´ g) = map f ‚â´ map g := by
    cat_disch
  mapComp_eq_eqToIso : ‚àÄ {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c),
    mapComp f g = eqToIso (map_comp f g) := by cat_disch

/-- A helper structure that bundles the necessary data to
construct a `StrictPseudofunctor` without specifying the redundant
fields `mapId` and `mapComp`. -/
structure StrictPseudofunctorCore extends PrelaxFunctor B C where
  map_id (X : B) : map (ùüô X) = ùüô (obj X)
  map_comp : ‚àÄ {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c), map (f ‚â´ g) = map f ‚â´ map g := by
    cat_disch
  map‚ÇÇ_whisker_left :
    ‚àÄ {a b c : B} (f : a ‚ü∂ b) {g g' : b ‚ü∂ c} (Œ∑ : g ‚ü∂ g'),
      map‚ÇÇ (f ‚óÅ Œ∑) = eqToHom (map_comp f g) ‚â´
        map f ‚óÅ map‚ÇÇ Œ∑ ‚â´ eqToHom (map_comp f g').symm := by cat_disch
  map‚ÇÇ_whisker_right :
      ‚àÄ {a b c : B} {f f' : a ‚ü∂ b} (Œ∑ : f ‚ü∂ f') (g : b ‚ü∂ c),
        map‚ÇÇ (Œ∑ ‚ñ∑ g) = eqToHom (map_comp f g) ‚â´
          map‚ÇÇ Œ∑ ‚ñ∑ map g ‚â´ eqToHom (map_comp f' g).symm := by cat_disch
  map‚ÇÇ_left_unitor :
      ‚àÄ {a b : B} (f : a ‚ü∂ b),
        map‚ÇÇ (Œª_ f).hom =
        eqToHom (by rw [map_comp (ùüô a) f, map_id a]) ‚â´
          (Œª_ (map f)).hom := by
    cat_disch
  map‚ÇÇ_right_unitor :
      ‚àÄ {a b : B} (f : a ‚ü∂ b),
        map‚ÇÇ (œÅ_ f).hom =
         eqToHom (by rw [map_comp f (ùüô b), map_id b]) ‚â´
          (œÅ_ (map f)).hom := by
    cat_disch
  map‚ÇÇ_associator :
      ‚àÄ {a b c d : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d),
        map‚ÇÇ (Œ±_ f g h).hom = eqToHom (by simp only [map_comp]) ‚â´
          (Œ±_ (map f) (map g) (map h)).hom ‚â´ eqToHom (by simp only [map_comp]) := by
    cat_disch

namespace StrictPseudofunctor

variable {B C}

/-- An alternate constructor for strictly unitary lax functors that does not
require the `mapId` fields, and that adapts the `map‚ÇÇ_leftUnitor` and
`map‚ÇÇ_rightUnitor` to the fact that the functor is strictly unitary. -/
@[simps]
def mk' (S : StrictPseudofunctorCore B C) : StrictPseudofunctor B C where
  obj := S.obj
  map := S.map
  map_id := S.map_id
  mapId x := eqToIso (S.map_id x)
  mapId_eq_eqToIso x := rfl
  map‚ÇÇ := S.map‚ÇÇ
  map‚ÇÇ_id := S.map‚ÇÇ_id
  map‚ÇÇ_comp := S.map‚ÇÇ_comp
  map_comp := S.map_comp
  mapComp f g := eqToIso <| S.map_comp f g
  map‚ÇÇ_left_unitor f := by
    simpa using S.map‚ÇÇ_left_unitor f
  map‚ÇÇ_right_unitor f := by
    simpa using S.map‚ÇÇ_right_unitor f
  map‚ÇÇ_associator f g h := by
    simpa using S.map‚ÇÇ_associator f g h
  map‚ÇÇ_whisker_left f _ _ Œ∑ := by
    simpa using S.map‚ÇÇ_whisker_left f Œ∑
  map‚ÇÇ_whisker_right Œ∑ f := by
    simpa using S.map‚ÇÇ_whisker_right Œ∑ f

section

variable (F : StrictPseudofunctor B C)

variable (B) in
/-- The identity `StrictPseudofunctor`. -/
@[simps!]
def id : StrictPseudofunctor B B where
  __ := StrictlyUnitaryPseudofunctor.id B

/-- Composition of `StrictPseudofunctor`. -/
@[simps!]
def comp (F : StrictPseudofunctor B C)
    (G : StrictPseudofunctor C D) :
    StrictPseudofunctor B D where
  __ := StrictlyUnitaryPseudofunctor.comp
    F.toStrictlyUnitaryPseudofunctor G.toStrictlyUnitaryPseudofunctor
  map_comp _ := by simp [StrictPseudofunctor.map_comp]
  mapComp_eq_eqToIso _ _ := by
    ext
    simp [StrictPseudofunctor.mapComp_eq_eqToIso,
      PrelaxFunctor.map‚ÇÇ_eqToHom]

end

section

variable [Strict B] [Strict C]

/-- A strict pseudofunctor between strict bicategories induces a functor on the underlying
categories. -/
def toFunctor (F : StrictPseudofunctor B C) : Functor B C where
  obj := F.obj
  map := F.map
  map_id := F.map_id
  map_comp := F.map_comp

end

end StrictPseudofunctor

end CategoryTheory
