/-
Copyright (c) 2022 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathlib.CategoryTheory.Bicategory.Functor.Prelax

/-!
# Oplax functors

An oplax functor `F` between bicategories `B` and `C` consists of
* a function between objects `F.obj : B ‚ü∂ C`,
* a family of functions between 1-morphisms `F.map : (a ‚ü∂ b) ‚Üí (F.obj a ‚ü∂ F.obj b)`,
* a family of functions between 2-morphisms `F.map‚ÇÇ : (f ‚ü∂ g) ‚Üí (F.map f ‚ü∂ F.map g)`,
* a family of 2-morphisms `F.mapId a : F.map (ùüô a) ‚ü∂ ùüô (F.obj a)`,
* a family of 2-morphisms `F.mapComp f g : F.map (f ‚â´ g) ‚ü∂ F.map f ‚â´ F.map g`, and
* certain consistency conditions on them.

## Main definitions

* `CategoryTheory.OplaxFunctor B C` : an oplax functor between bicategories `B` and `C`
* `CategoryTheory.OplaxFunctor.comp F G` : the composition of oplax functors

-/

namespace CategoryTheory

open Category Bicategory

open Bicategory

universe w‚ÇÅ w‚ÇÇ w‚ÇÉ v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

section

variable {B : Type u‚ÇÅ} [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]
variable {D : Type u‚ÇÉ} [Bicategory.{w‚ÇÉ, v‚ÇÉ} D]

/-- An oplax functor `F` between bicategories `B` and `C` consists of a function between objects
`F.obj`, a function between 1-morphisms `F.map`, and a function between 2-morphisms `F.map‚ÇÇ`.

Unlike functors between categories, `F.map` do not need to strictly commute with the composition,
and do not need to strictly preserve the identity. Instead, there are specified 2-morphisms
`F.map (ùüô a) ‚ü∂ ùüô (F.obj a)` and `F.map (f ‚â´ g) ‚ü∂ F.map f ‚â´ F.map g`.

`F.map‚ÇÇ` strictly commute with compositions and preserve the identity. They also preserve the
associator, the left unitor, and the right unitor modulo some adjustments of domains and codomains
of 2-morphisms.
-/
structure OplaxFunctor (B : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] (C : Type u‚ÇÇ)
  [Bicategory.{w‚ÇÇ, v‚ÇÇ} C] extends PrelaxFunctor B C where
  /-- The 2-morphism underlying the oplax unity constraint. -/
  mapId (a : B) : map (ùüô a) ‚ü∂ ùüô (obj a)
  /-- The 2-morphism underlying the oplax functoriality constraint. -/
  mapComp {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) : map (f ‚â´ g) ‚ü∂ map f ‚â´ map g
  /-- Naturality of the oplax functoriality constraint, on the left. -/
  mapComp_naturality_left :
    ‚àÄ {a b c : B} {f f' : a ‚ü∂ b} (Œ∑ : f ‚ü∂ f') (g : b ‚ü∂ c),
      map‚ÇÇ (Œ∑ ‚ñ∑ g) ‚â´ mapComp f' g = mapComp f g ‚â´ map‚ÇÇ Œ∑ ‚ñ∑ map g := by
    aesop_cat
  /-- Naturality of the lax functoriality constraight, on the right. -/
  mapComp_naturality_right :
    ‚àÄ {a b c : B} (f : a ‚ü∂ b) {g g' : b ‚ü∂ c} (Œ∑ : g ‚ü∂ g'),
      map‚ÇÇ (f ‚óÅ Œ∑) ‚â´ mapComp f g' = mapComp f g ‚â´ map f ‚óÅ map‚ÇÇ Œ∑ := by
    aesop_cat
  /-- Oplax associativity. -/
  map‚ÇÇ_associator :
    ‚àÄ {a b c d : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d),
      map‚ÇÇ (Œ±_ f g h).hom ‚â´ mapComp f (g ‚â´ h) ‚â´ map f ‚óÅ mapComp g h =
    mapComp (f ‚â´ g) h ‚â´ mapComp f g ‚ñ∑ map h ‚â´ (Œ±_ (map f) (map g) (map h)).hom := by
    aesop_cat
  /-- Oplax left unity. -/
  map‚ÇÇ_leftUnitor :
    ‚àÄ {a b : B} (f : a ‚ü∂ b),
      map‚ÇÇ (Œª_ f).hom = mapComp (ùüô a) f ‚â´ mapId a ‚ñ∑ map f ‚â´ (Œª_ (map f)).hom := by
    aesop_cat
  /-- Oplax right unity. -/
  map‚ÇÇ_rightUnitor :
    ‚àÄ {a b : B} (f : a ‚ü∂ b),
      map‚ÇÇ (œÅ_ f).hom = mapComp f (ùüô b) ‚â´ map f ‚óÅ mapId b ‚â´ (œÅ_ (map f)).hom := by
    aesop_cat

initialize_simps_projections OplaxFunctor (+toPrelaxFunctor, -obj, -map, -map‚ÇÇ)

namespace OplaxFunctor

attribute [reassoc (attr := simp)]
  mapComp_naturality_left mapComp_naturality_right map‚ÇÇ_associator
attribute [simp, reassoc] map‚ÇÇ_leftUnitor map‚ÇÇ_rightUnitor

section

/-- The underlying prelax functor. -/
add_decl_doc OplaxFunctor.toPrelaxFunctor

variable (F : OplaxFunctor B C)

@[reassoc]
lemma mapComp_assoc_right {a b c d : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) :
    F.mapComp f (g ‚â´ h) ‚â´ F.map f ‚óÅ F.mapComp g h = F.map‚ÇÇ (Œ±_ f g h).inv ‚â´
    F.mapComp (f ‚â´ g) h ‚â´ F.mapComp f g ‚ñ∑ F.map h ‚â´
    (Œ±_ (F.map f) (F.map g) (F.map h)).hom := by
  rw [‚Üê F.map‚ÇÇ_associator, ‚Üê F.map‚ÇÇ_comp_assoc]
  simp

@[reassoc]
lemma mapComp_assoc_left {a b c d : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) :
    F.mapComp (f ‚â´ g) h ‚â´ F.mapComp f g ‚ñ∑ F.map h =
    F.map‚ÇÇ (Œ±_ f g h).hom ‚â´ F.mapComp f (g ‚â´ h) ‚â´ F.map f ‚óÅ F.mapComp g h
    ‚â´ (Œ±_ (F.map f) (F.map g) (F.map h)).inv := by
  simp

/-- The identity oplax functor. -/
@[simps]
def id (B : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] : OplaxFunctor B B where
  toPrelaxFunctor := PrelaxFunctor.id B
  mapId := fun a => ùüô (ùüô a)
  mapComp := fun f g => ùüô (f ‚â´ g)

instance : Inhabited (OplaxFunctor B B) :=
  ‚ü®id B‚ü©

/-- Composition of oplax functors. -/
--@[simps]
def comp (F : OplaxFunctor B C) (G : OplaxFunctor C D) : OplaxFunctor B D where
  toPrelaxFunctor := F.toPrelaxFunctor.comp G.toPrelaxFunctor
  mapId := fun a => (G.mapFunctor _ _).map (F.mapId a) ‚â´ G.mapId (F.obj a)
  mapComp := fun f g => (G.mapFunctor _ _).map (F.mapComp f g) ‚â´ G.mapComp (F.map f) (F.map g)
  mapComp_naturality_left := fun Œ∑ g => by
    dsimp
    rw [‚Üê G.map‚ÇÇ_comp_assoc, mapComp_naturality_left, G.map‚ÇÇ_comp_assoc, mapComp_naturality_left,
      assoc]
  mapComp_naturality_right := fun Œ∑ => by
    dsimp
    intros
    rw [‚Üê G.map‚ÇÇ_comp_assoc, mapComp_naturality_right, G.map‚ÇÇ_comp_assoc,
      mapComp_naturality_right, assoc]
  map‚ÇÇ_associator := fun f g h => by
    dsimp
    simp only [map‚ÇÇ_associator, ‚Üê PrelaxFunctor.map‚ÇÇ_comp_assoc, ‚Üê mapComp_naturality_right_assoc,
      whiskerLeft_comp, assoc]
    simp only [map‚ÇÇ_associator, PrelaxFunctor.map‚ÇÇ_comp, mapComp_naturality_left_assoc,
      comp_whiskerRight, assoc]
  map‚ÇÇ_leftUnitor := fun f => by
    dsimp
    simp only [map‚ÇÇ_leftUnitor, PrelaxFunctor.map‚ÇÇ_comp, mapComp_naturality_left_assoc,
      comp_whiskerRight, assoc]
  map‚ÇÇ_rightUnitor := fun f => by
    dsimp
    simp only [map‚ÇÇ_rightUnitor, PrelaxFunctor.map‚ÇÇ_comp, mapComp_naturality_right_assoc,
      whiskerLeft_comp, assoc]

/-- A structure on an oplax functor that promotes an oplax functor to a pseudofunctor.

See `Pseudofunctor.mkOfOplax`. -/
-- Porting note(#5171): linter not ported yet
-- @[nolint has_nonempty_instance]
structure PseudoCore (F : OplaxFunctor B C) where
  /-- The isomorphism giving rise to the oplax unity constraint -/
  mapIdIso (a : B) : F.map (ùüô a) ‚âÖ ùüô (F.obj a)
  /-- The isomorphism giving rise to the oplax functoriality constraint -/
  mapCompIso {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) : F.map (f ‚â´ g) ‚âÖ F.map f ‚â´ F.map g
  /-- `mapIdIso` gives rise to the oplax unity constraint -/
  mapIdIso_hom : ‚àÄ {a : B}, (mapIdIso a).hom = F.mapId a := by aesop_cat
  /-- `mapCompIso` gives rise to the oplax functoriality constraint -/
  mapCompIso_hom :
    ‚àÄ {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c), (mapCompIso f g).hom = F.mapComp f g := by aesop_cat

attribute [simp] PseudoCore.mapIdIso_hom PseudoCore.mapCompIso_hom

end

end OplaxFunctor

end

end CategoryTheory
