/-
Copyright (c) 2023 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathlib.CategoryTheory.Bicategory.Basic
import Mathlib.CategoryTheory.Comma.StructuredArrow

/-!
# Extensions and lifts in bicategories

We introduce the concept of extensions and lifts within the bicategorical framework. These concepts
are defined by commutative diagrams in the (1-)categorical context. Within the bicategorical
framework, commutative diagrams are replaced by 2-morphisms. Depending on the orientation of the
2-morphisms, we define both left and right extensions (likewise for lifts). The use of left and
right here is a common one in the theory of Kan extensions.

## Implementation notes
We define extensions and lifts as objects in certain comma categories (`StructuredArrow` for left,
and `CostructuredArrow` for right). See the file `CategoryTheory.StructuredArrow` for properties
about these categories. We introduce some intuitive aliases. For example, `LeftExtension.extension`
is an alias for `Comma.right`.

## References
* https://ncatlab.org/nlab/show/lifts+and+extensions
* https://ncatlab.org/nlab/show/Kan+extension

-/

namespace CategoryTheory

namespace Bicategory

universe w v u

variable {B : Type u} [Bicategory.{w, v} B] {a b c : B}

/-- Triangle diagrams for (left) extensions.
```
  b
  ‚ñ≥ \
  |   \ extension  ‚ñ≥
f |     \          | unit
  |       ‚óø
  a - - - ‚ñ∑ c
      g
```
-/
abbrev LeftExtension (f : a ‚ü∂ b) (g : a ‚ü∂ c) := StructuredArrow g (precomp _ f)

namespace LeftExtension

variable {f : a ‚ü∂ b} {g : a ‚ü∂ c}

/-- The extension of `g` along `f`. -/
abbrev extension (t : LeftExtension f g) : b ‚ü∂ c := t.right

/-- The 2-morphism filling the triangle diagram. -/
abbrev unit (t : LeftExtension f g) : g ‚ü∂ f ‚â´ t.extension := t.hom

/-- Construct a left extension from a 1-morphism and a 2-morphism. -/
abbrev mk (h : b ‚ü∂ c) (unit : g ‚ü∂ f ‚â´ h) : LeftExtension f g :=
  StructuredArrow.mk unit

/-- To construct a morphism between left extensions, we need a 2-morphism between the extensions,
and to check that it is compatible with the units. -/
abbrev homMk {s t : LeftExtension f g} (Œ∑ : s.extension ‚ü∂ t.extension)
    (w : s.unit ‚â´ f ‚óÅ Œ∑ = t.unit) : s ‚ü∂ t :=
  StructuredArrow.homMk Œ∑ w

@[reassoc (attr := simp)]
theorem w {s t : LeftExtension f g} (Œ∑ : s ‚ü∂ t) :
    s.unit ‚â´ f ‚óÅ Œ∑.right = t.unit :=
  StructuredArrow.w Œ∑

/-- The left extension along the identity. -/
def alongId (g : a ‚ü∂ c) : LeftExtension (ùüô a) g := .mk _ (Œª_ g).inv

instance : Inhabited (LeftExtension (ùüô a) g) := ‚ü®alongId g‚ü©

/-- Whisker a 1-morphism to an extension.
```
  b
  ‚ñ≥ \
  |   \ extension  ‚ñ≥
f |     \          | unit
  |       ‚óø
  a - - - ‚ñ∑ c - - - ‚ñ∑ x
      g         h
```
-/
def whisker (t : LeftExtension f g) {x : B} (h : c ‚ü∂ x) : LeftExtension f (g ‚â´ h) :=
  .mk _ <| t.unit ‚ñ∑ h ‚â´ (Œ±_ _ _ _).hom

@[simp]
theorem whisker_extension (t : LeftExtension f g) {x : B} (h : c ‚ü∂ x) :
    (t.whisker h).extension = t.extension ‚â´ h :=
  rfl

@[simp]
theorem whisker_unit (t : LeftExtension f g) {x : B} (h : c ‚ü∂ x) :
    (t.whisker h).unit = t.unit ‚ñ∑ h ‚â´ (Œ±_ f t.extension h).hom :=
  rfl

/-- Whiskering a 1-morphism is a functor. -/
@[simps]
def whiskering {x : B} (h : c ‚ü∂ x) : LeftExtension f g ‚•§ LeftExtension f (g ‚â´ h) where
  obj t := t.whisker h
  map Œ∑ := LeftExtension.homMk (Œ∑.right ‚ñ∑ h) <| by
    dsimp only [whisker_extension, whisker_unit]
    rw [‚Üê LeftExtension.w Œ∑]
    simp [- LeftExtension.w]

/-- Define a morphism between left extensions by cancelling the whiskered identities. -/
@[simps! right]
def whiskerIdCancel {s t : LeftExtension f g} (œÑ : s.whisker (ùüô c) ‚ü∂ t.whisker (ùüô c)) :
    s ‚ü∂ t :=
  LeftExtension.homMk ((œÅ_ _).inv ‚â´ œÑ.right ‚â´ (œÅ_ _).hom) <| by
    have := LeftExtension.w œÑ
    simp only [whiskerLeft_comp, whiskerLeft_rightUnitor_inv, whiskerLeft_rightUnitor,
      Category.assoc]
    simp only [whisker_extension, whisker_unit, whiskerRight_id, Category.assoc,
      Iso.cancel_iso_hom_left] at this
    rw [reassoc_of% this]
    simp

end LeftExtension

/-- Triangle diagrams for (left) lifts.
```
            b
          ‚óπ |
   lift /   |      ‚ñ≥
      /     | f    | unit
    /       ‚ñΩ
  c - - - ‚ñ∑ a
       g
```
-/
abbrev LeftLift (f : b ‚ü∂ a) (g : c ‚ü∂ a) := StructuredArrow g (postcomp _ f)

namespace LeftLift

variable {f : b ‚ü∂ a} {g : c ‚ü∂ a}

/-- The lift of `g` along `f`. -/
abbrev lift (t : LeftLift f g) : c ‚ü∂ b := t.right

/-- The 2-morphism filling the triangle diagram. -/
abbrev unit (t : LeftLift f g) : g ‚ü∂ t.lift ‚â´ f := t.hom

/-- Construct a left lift from a 1-morphism and a 2-morphism. -/
abbrev mk (h : c ‚ü∂ b) (unit : g ‚ü∂ h ‚â´ f) : LeftLift f g :=
  StructuredArrow.mk unit

/-- To construct a morphism between left lifts, we need a 2-morphism between the lifts,
and to check that it is compatible with the units. -/
abbrev homMk {s t : LeftLift f g} (Œ∑ : s.lift ‚ü∂ t.lift) (w : s.unit ‚â´ Œ∑ ‚ñ∑ f = t.unit) :
    s ‚ü∂ t :=
  StructuredArrow.homMk Œ∑ w

@[reassoc (attr := simp)]
theorem w {s t : LeftLift f g} (h : s ‚ü∂ t) :
    s.unit ‚â´ h.right ‚ñ∑ f = t.unit :=
  StructuredArrow.w h

/-- The left lift along the identity. -/
def alongId (g : c ‚ü∂ a) : LeftLift (ùüô a) g := .mk _ (œÅ_ g).inv

instance : Inhabited (LeftLift (ùüô a) g) := ‚ü®alongId g‚ü©

/-- Whisker a 1-morphism to a lift.
```
                    b
                  ‚óπ |
           lift /   |      ‚ñ≥
              /     | f    | unit
            /       ‚ñΩ
x - - - ‚ñ∑ c - - - ‚ñ∑ a
     h         g
```
-/
def whisker (t : LeftLift f g) {x : B} (h : x ‚ü∂ c) : LeftLift f (h ‚â´ g) :=
  .mk _ <| h ‚óÅ t.unit ‚â´ (Œ±_ _ _ _).inv

@[simp]
theorem whisker_lift (t : LeftLift f g) {x : B} (h : x ‚ü∂ c) :
    (t.whisker h).lift = h ‚â´ t.lift :=
  rfl

@[simp]
theorem whisker_unit (t : LeftLift f g) {x : B} (h : x ‚ü∂ c) :
    (t.whisker h).unit = h ‚óÅ t.unit ‚â´ (Œ±_ h t.lift f).inv :=
  rfl

/-- Whiskering a 1-morphism is a functor. -/
@[simps]
def whiskering {x : B} (h : x ‚ü∂ c) : LeftLift f g ‚•§ LeftLift f (h ‚â´ g) where
  obj t := t.whisker h
  map Œ∑ := LeftLift.homMk (h ‚óÅ Œ∑.right) <| by
    dsimp only [whisker_lift, whisker_unit]
    rw [‚Üê LeftLift.w Œ∑]
    simp [- LeftLift.w]

/-- Define a morphism between left lifts by cancelling the whiskered identities. -/
@[simps! right]
def whiskerIdCancel {s t : LeftLift f g} (œÑ : s.whisker (ùüô c) ‚ü∂ t.whisker (ùüô c)) :
    s ‚ü∂ t :=
  LeftLift.homMk ((Œª_ _).inv ‚â´ œÑ.right ‚â´ (Œª_ _).hom) <| by
    have := LeftLift.w œÑ
    simp only [whisker_lift, comp_whiskerRight, leftUnitor_inv_whiskerRight,
      leftUnitor_whiskerRight, Category.assoc]
    simp only [whisker_lift, whisker_unit, id_whiskerLeft, Category.assoc,
      Iso.cancel_iso_hom_left] at this
    rw [reassoc_of% this]
    simp

end LeftLift

/-- Triangle diagrams for (right) extensions.
```
  b
  ‚ñ≥ \
  |   \ extension  | counit
f |     \          ‚ñΩ
  |       ‚óø
  a - - - ‚ñ∑ c
      g
```
-/
abbrev RightExtension (f : a ‚ü∂ b) (g : a ‚ü∂ c) := CostructuredArrow (precomp _ f) g

namespace RightExtension

variable {f : a ‚ü∂ b} {g : a ‚ü∂ c}

/-- The extension of `g` along `f`. -/
abbrev extension (t : RightExtension f g) : b ‚ü∂ c := t.left

/-- The 2-morphism filling the triangle diagram. -/
abbrev counit (t : RightExtension f g) : f ‚â´ t.extension ‚ü∂ g := t.hom

/-- Construct a right extension from a 1-morphism and a 2-morphism. -/
abbrev mk (h : b ‚ü∂ c) (counit : f ‚â´ h ‚ü∂ g) : RightExtension f g :=
  CostructuredArrow.mk counit

/-- To construct a morphism between right extensions, we need a 2-morphism between the extensions,
and to check that it is compatible with the counits. -/
abbrev homMk {s t : RightExtension f g} (Œ∑ : s.extension ‚ü∂ t.extension)
    (w : f ‚óÅ Œ∑ ‚â´ t.counit = s.counit) : s ‚ü∂ t :=
  CostructuredArrow.homMk Œ∑ w

@[reassoc (attr := simp)]
theorem w {s t : RightExtension f g} (Œ∑ : s ‚ü∂ t) :
    f ‚óÅ Œ∑.left ‚â´ t.counit = s.counit :=
  CostructuredArrow.w Œ∑

/-- The right extension along the identity. -/
def alongId (g : a ‚ü∂ c) : RightExtension (ùüô a) g := .mk _ (Œª_ g).hom

instance : Inhabited (RightExtension (ùüô a) g) := ‚ü®alongId g‚ü©

end RightExtension

/-- Triangle diagrams for (right) lifts.
```
            b
          ‚óπ |
   lift /   |      | counit
      /     | f    ‚ñΩ
    /       ‚ñΩ
  c - - - ‚ñ∑ a
       g
```
-/
abbrev RightLift (f : b ‚ü∂ a) (g : c ‚ü∂ a) := CostructuredArrow (postcomp _ f) g

namespace RightLift

variable {f : b ‚ü∂ a} {g : c ‚ü∂ a}

/-- The lift of `g` along `f`. -/
abbrev lift (t : RightLift f g) : c ‚ü∂ b := t.left

/-- The 2-morphism filling the triangle diagram. -/
abbrev counit (t : RightLift f g) : t.lift ‚â´ f ‚ü∂ g := t.hom

/-- Construct a right lift from a 1-morphism and a 2-morphism. -/
abbrev mk (h : c ‚ü∂ b) (counit : h ‚â´ f ‚ü∂ g) : RightLift f g :=
  CostructuredArrow.mk counit

/-- To construct a morphism between right lifts, we need a 2-morphism between the lifts,
and to check that it is compatible with the counits. -/
abbrev homMk {s t : RightLift f g} (Œ∑ : s.lift ‚ü∂ t.lift) (w : Œ∑ ‚ñ∑ f ‚â´ t.counit = s.counit) :
    s ‚ü∂ t :=
  CostructuredArrow.homMk Œ∑ w

@[reassoc (attr := simp)]
theorem w {s t : RightLift f g} (h : s ‚ü∂ t) :
    h.left ‚ñ∑ f ‚â´ t.counit = s.counit :=
  CostructuredArrow.w h

/-- The right lift along the identity. -/
def alongId (g : c ‚ü∂ a) : RightLift (ùüô a) g := .mk _ (œÅ_ g).hom

instance : Inhabited (RightLift (ùüô a) g) := ‚ü®alongId g‚ü©

end RightLift

end Bicategory

end CategoryTheory
