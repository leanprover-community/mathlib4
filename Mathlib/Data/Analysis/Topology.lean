/-
Copyright (c) 2017 Mario Carneiro. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mario Carneiro
-/
import Mathlib.Data.Analysis.Filter
import Mathlib.Topology.Bases
import Mathlib.Topology.LocallyFinite

/-!
# Computational realization of topological spaces (experimental)

This file provides infrastructure to compute with topological spaces.

## Main declarations

* `Ctop`: Realization of a topology basis.
* `Ctop.Realizer`: Realization of a topological space. `Ctop` that generates the given topology.
* `LocallyFinite.Realizer`: Realization of the local finiteness of an indexed family of sets.
* `Compact.Realizer`: Realization of the compactness of a set.
-/


open Set

open Filter hiding Realizer

open Topology

/-- A `Ctop Œ± œÉ` is a realization of a topology (basis) on `Œ±`,
  represented by a type `œÉ` together with operations for the top element and
  the intersection operation. -/
structure Ctop (Œ± œÉ : Type*) where
  f : œÉ ‚Üí Set Œ±
  top : Œ± ‚Üí œÉ
  top_mem : ‚àÄ x : Œ±, x ‚àà f (top x)
  inter : ‚àÄ (a b) (x : Œ±), x ‚àà f a ‚à© f b ‚Üí œÉ
  inter_mem : ‚àÄ a b x h, x ‚àà f (inter a b x h)
  inter_sub : ‚àÄ a b x h, f (inter a b x h) ‚äÜ f a ‚à© f b

variable {Œ± : Type*} {Œ≤ : Type*} {œÉ : Type*} {œÑ : Type*}

instance : Inhabited (Ctop Œ± (Set Œ±)) :=
  ‚ü®{  f := id
      top := singleton
      top_mem := mem_singleton
      inter := fun s t _ _ ‚Ü¶ s ‚à© t
      inter_mem := fun _s _t _a ‚Ü¶ id
      inter_sub := fun _s _t _a _ha ‚Ü¶ Subset.rfl }‚ü©

namespace Ctop

section

variable (F : Ctop Œ± œÉ)

instance : CoeFun (Ctop Œ± œÉ) fun _ ‚Ü¶ œÉ ‚Üí Set Œ± :=
  ‚ü®Ctop.f‚ü©

-- @[simp] -- Porting note (#10685): dsimp can prove this
theorem coe_mk (f T h‚ÇÅ I h‚ÇÇ h‚ÇÉ a) : (@Ctop.mk Œ± œÉ f T h‚ÇÅ I h‚ÇÇ h‚ÇÉ) a = f a := rfl

/-- Map a Ctop to an equivalent representation type. -/
def ofEquiv (E : œÉ ‚âÉ œÑ) : Ctop Œ± œÉ ‚Üí Ctop Œ± œÑ
  | ‚ü®f, T, h‚ÇÅ, I, h‚ÇÇ, h‚ÇÉ‚ü© =>
    { f := fun a ‚Ü¶ f (E.symm a)
      top := fun x ‚Ü¶ E (T x)
      top_mem := fun x ‚Ü¶ by simpa using h‚ÇÅ x
      inter := fun a b x h ‚Ü¶ E (I (E.symm a) (E.symm b) x h)
      inter_mem := fun a b x h ‚Ü¶ by simpa using h‚ÇÇ (E.symm a) (E.symm b) x h
      inter_sub := fun a b x h ‚Ü¶ by simpa using h‚ÇÉ (E.symm a) (E.symm b) x h }

@[simp]
theorem ofEquiv_val (E : œÉ ‚âÉ œÑ) (F : Ctop Œ± œÉ) (a : œÑ) : F.ofEquiv E a = F (E.symm a) := by
  cases F; rfl

end

/-- Every `Ctop` is a topological space. -/
def toTopsp (F : Ctop Œ± œÉ) : TopologicalSpace Œ± := TopologicalSpace.generateFrom (Set.range F.f)

theorem toTopsp_isTopologicalBasis (F : Ctop Œ± œÉ) :
    @TopologicalSpace.IsTopologicalBasis _ F.toTopsp (Set.range F.f) :=
  letI := F.toTopsp
  ‚ü®fun _u ‚ü®a, e‚ÇÅ‚ü© _v ‚ü®b, e‚ÇÇ‚ü© ‚Ü¶
    e‚ÇÅ ‚ñ∏ e‚ÇÇ ‚ñ∏ fun x h ‚Ü¶ ‚ü®_, ‚ü®_, rfl‚ü©, F.inter_mem a b x h, F.inter_sub a b x h‚ü©,
    eq_univ_iff_forall.2 fun x ‚Ü¶ ‚ü®_, ‚ü®_, rfl‚ü©, F.top_mem x‚ü©, rfl‚ü©

@[simp]
theorem mem_nhds_toTopsp (F : Ctop Œ± œÉ) {s : Set Œ±} {a : Œ±} :
    s ‚àà @nhds _ F.toTopsp a ‚Üî ‚àÉ b, a ‚àà F b ‚àß F b ‚äÜ s :=
  (@TopologicalSpace.IsTopologicalBasis.mem_nhds_iff _ F.toTopsp _ _ _
        F.toTopsp_isTopologicalBasis).trans <|
    ‚ü®fun ‚ü®_, ‚ü®x, rfl‚ü©, h‚ü© ‚Ü¶ ‚ü®x, h‚ü©, fun ‚ü®x, h‚ü© ‚Ü¶ ‚ü®_, ‚ü®x, rfl‚ü©, h‚ü©‚ü©

end Ctop

/-- A `Ctop` realizer for the topological space `T` is a `Ctop`
  which generates `T`. -/
structure Ctop.Realizer (Œ±) [T : TopologicalSpace Œ±] where
  œÉ : Type*
  F : Ctop Œ± œÉ
  eq : F.toTopsp = T

open Ctop

/-- A `Ctop` realizes the topological space it generates. -/
protected def Ctop.toRealizer (F : Ctop Œ± œÉ) : @Ctop.Realizer _ F.toTopsp :=
  @Ctop.Realizer.mk _ F.toTopsp œÉ F rfl

instance (F : Ctop Œ± œÉ) : Inhabited (@Ctop.Realizer _ F.toTopsp) :=
  ‚ü®F.toRealizer‚ü©

namespace Ctop.Realizer

protected theorem is_basis [T : TopologicalSpace Œ±] (F : Realizer Œ±) :
    TopologicalSpace.IsTopologicalBasis (Set.range F.F.f) := by
  have := toTopsp_isTopologicalBasis F.F; rwa [F.eq] at this

protected theorem mem_nhds [T : TopologicalSpace Œ±] (F : Realizer Œ±) {s : Set Œ±} {a : Œ±} :
    s ‚àà ùìù a ‚Üî ‚àÉ b, a ‚àà F.F b ‚àß F.F b ‚äÜ s := by
  have := @mem_nhds_toTopsp _ _ F.F s a; rwa [F.eq] at this

theorem isOpen_iff [TopologicalSpace Œ±] (F : Realizer Œ±) {s : Set Œ±} :
    IsOpen s ‚Üî ‚àÄ a ‚àà s, ‚àÉ b, a ‚àà F.F b ‚àß F.F b ‚äÜ s :=
  isOpen_iff_mem_nhds.trans <| forall‚ÇÇ_congr fun _a _h ‚Ü¶ F.mem_nhds

theorem isClosed_iff [TopologicalSpace Œ±] (F : Realizer Œ±) {s : Set Œ±} :
    IsClosed s ‚Üî ‚àÄ a, (‚àÄ b, a ‚àà F.F b ‚Üí ‚àÉ z, z ‚àà F.F b ‚à© s) ‚Üí a ‚àà s :=
  isOpen_compl_iff.symm.trans <|
    F.isOpen_iff.trans <|
      forall_congr' fun a ‚Ü¶
        show (a ‚àâ s ‚Üí ‚àÉ b : F.œÉ, a ‚àà F.F b ‚àß ‚àÄ z ‚àà F.F b, z ‚àâ s) ‚Üî _ by
          haveI := Classical.propDecidable; rw [not_imp_comm]
          simp [not_exists, not_and, not_forall, and_comm]

theorem mem_interior_iff [TopologicalSpace Œ±] (F : Realizer Œ±) {s : Set Œ±} {a : Œ±} :
    a ‚àà interior s ‚Üî ‚àÉ b, a ‚àà F.F b ‚àß F.F b ‚äÜ s :=
  mem_interior_iff_mem_nhds.trans F.mem_nhds

protected theorem isOpen [TopologicalSpace Œ±] (F : Realizer Œ±) (s : F.œÉ) : IsOpen (F.F s) :=
  isOpen_iff_nhds.2 fun a m ‚Ü¶ by simpa using F.mem_nhds.2 ‚ü®s, m, Subset.refl _‚ü©

theorem ext' [T : TopologicalSpace Œ±] {œÉ : Type*} {F : Ctop Œ± œÉ}
    (H : ‚àÄ a s, s ‚àà ùìù a ‚Üî ‚àÉ b, a ‚àà F b ‚àß F b ‚äÜ s) : F.toTopsp = T := by
  refine TopologicalSpace.ext_nhds fun x ‚Ü¶ ?_
  ext s
  rw [mem_nhds_toTopsp, H]

theorem ext [T : TopologicalSpace Œ±] {œÉ : Type*} {F : Ctop Œ± œÉ} (H‚ÇÅ : ‚àÄ a, IsOpen (F a))
    (H‚ÇÇ : ‚àÄ a s, s ‚àà ùìù a ‚Üí ‚àÉ b, a ‚àà F b ‚àß F b ‚äÜ s) : F.toTopsp = T :=
  ext' fun a s ‚Ü¶ ‚ü®H‚ÇÇ a s, fun ‚ü®_b, h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ mem_nhds_iff.2 ‚ü®_, h‚ÇÇ, H‚ÇÅ _, h‚ÇÅ‚ü©‚ü©

variable [TopologicalSpace Œ±]

/-- The topological space realizer made of the open sets. -/
protected def id : Realizer Œ± :=
  ‚ü®{ x : Set Œ± // IsOpen x },
    { f := Subtype.val
      top := fun _ ‚Ü¶ ‚ü®univ, isOpen_univ‚ü©
      top_mem := mem_univ
      inter := fun ‚ü®_x, h‚ÇÅ‚ü© ‚ü®_y, h‚ÇÇ‚ü© _a _h‚ÇÉ ‚Ü¶ ‚ü®_, h‚ÇÅ.inter h‚ÇÇ‚ü©
      inter_mem := fun ‚ü®_x, _h‚ÇÅ‚ü© ‚ü®_y, _h‚ÇÇ‚ü© _a ‚Ü¶ id
      inter_sub := fun ‚ü®_x, _h‚ÇÅ‚ü© ‚ü®_y, _h‚ÇÇ‚ü© _a _h‚ÇÉ ‚Ü¶ Subset.refl _ },
    ext Subtype.property fun _x _s h ‚Ü¶
      let ‚ü®t, h, o, m‚ü© := mem_nhds_iff.1 h
      ‚ü®‚ü®t, o‚ü©, m, h‚ü©‚ü©

/-- Replace the representation type of a `Ctop` realizer. -/
def ofEquiv (F : Realizer Œ±) (E : F.œÉ ‚âÉ œÑ) : Realizer Œ± :=
  ‚ü®œÑ, F.F.ofEquiv E,
    ext' fun a s ‚Ü¶
      F.mem_nhds.trans <|
        ‚ü®fun ‚ü®s, h‚ü© ‚Ü¶ ‚ü®E s, by simpa using h‚ü©, fun ‚ü®t, h‚ü© ‚Ü¶ ‚ü®E.symm t, by simpa using h‚ü©‚ü©‚ü©

@[simp]
theorem ofEquiv_œÉ (F : Realizer Œ±) (E : F.œÉ ‚âÉ œÑ) : (F.ofEquiv E).œÉ = œÑ := rfl

@[simp]
theorem ofEquiv_F (F : Realizer Œ±) (E : F.œÉ ‚âÉ œÑ) (s : œÑ) : (F.ofEquiv E).F s = F.F (E.symm s) := by
  delta ofEquiv; simp

/-- A realizer of the neighborhood of a point. -/
protected def nhds (F : Realizer Œ±) (a : Œ±) : (ùìù a).Realizer :=
  ‚ü®{ s : F.œÉ // a ‚àà F.F s },
    { f := fun s ‚Ü¶ F.F s.1
      pt := ‚ü®_, F.F.top_mem a‚ü©
      inf := fun ‚ü®x, h‚ÇÅ‚ü© ‚ü®y, h‚ÇÇ‚ü© ‚Ü¶ ‚ü®_, F.F.inter_mem x y a ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©
      inf_le_left := fun ‚ü®x, h‚ÇÅ‚ü© ‚ü®y, h‚ÇÇ‚ü© _z h ‚Ü¶ (F.F.inter_sub x y a ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© h).1
      inf_le_right := fun ‚ü®x, h‚ÇÅ‚ü© ‚ü®y, h‚ÇÇ‚ü© _z h ‚Ü¶ (F.F.inter_sub x y a ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© h).2 },
    filter_eq <|
      Set.ext fun _x ‚Ü¶
        ‚ü®fun ‚ü®‚ü®_s, as‚ü©, h‚ü© ‚Ü¶ mem_nhds_iff.2 ‚ü®_, h, F.isOpen _, as‚ü©, fun h ‚Ü¶
          let ‚ü®s, h, as‚ü© := F.mem_nhds.1 h
          ‚ü®‚ü®s, h‚ü©, as‚ü©‚ü©‚ü©

@[simp]
theorem nhds_œÉ (F : Realizer Œ±) (a : Œ±) : (F.nhds a).œÉ = { s : F.œÉ // a ‚àà F.F s } := rfl

@[simp]
theorem nhds_F (F : Realizer Œ±) (a : Œ±) (s) : (F.nhds a).F s = F.F s.1 := rfl

theorem tendsto_nhds_iff {m : Œ≤ ‚Üí Œ±} {f : Filter Œ≤} (F : f.Realizer) (R : Realizer Œ±) {a : Œ±} :
    Tendsto m f (ùìù a) ‚Üî ‚àÄ t, a ‚àà R.F t ‚Üí ‚àÉ s, ‚àÄ x ‚àà F.F s, m x ‚àà R.F t :=
  (F.tendsto_iff _ (R.nhds a)).trans Subtype.forall

end Ctop.Realizer

/-- A `LocallyFinite.Realizer F f` is a realization that `f` is locally finite, namely it is a
choice of open sets from the basis of `F` such that they intersect only finitely many of the values
of `f`. -/
structure LocallyFinite.Realizer [TopologicalSpace Œ±] (F : Ctop.Realizer Œ±) (f : Œ≤ ‚Üí Set Œ±) where
  bas : ‚àÄ a, { s // a ‚àà F.F s }
  sets : ‚àÄ x : Œ±, Fintype { i | (f i ‚à© F.F (bas x)).Nonempty }

theorem LocallyFinite.Realizer.to_locallyFinite [TopologicalSpace Œ±] {F : Ctop.Realizer Œ±}
    {f : Œ≤ ‚Üí Set Œ±} (R : LocallyFinite.Realizer F f) : LocallyFinite f := fun a ‚Ü¶
  ‚ü®_, F.mem_nhds.2 ‚ü®(R.bas a).1, (R.bas a).2, Subset.rfl‚ü©, have := R.sets a; Set.toFinite _‚ü©

theorem locallyFinite_iff_exists_realizer [TopologicalSpace Œ±] (F : Ctop.Realizer Œ±)
    {f : Œ≤ ‚Üí Set Œ±} : LocallyFinite f ‚Üî Nonempty (LocallyFinite.Realizer F f) :=
  ‚ü®fun h ‚Ü¶
    let ‚ü®g, h‚ÇÅ‚ü© := Classical.axiom_of_choice h
    let ‚ü®g‚ÇÇ, h‚ÇÇ‚ü© :=
      Classical.axiom_of_choice fun x ‚Ü¶
        show ‚àÉ b : F.œÉ, x ‚àà F.F b ‚àß F.F b ‚äÜ g x from
          let ‚ü®h, _h'‚ü© := h‚ÇÅ x
          F.mem_nhds.1 h
    ‚ü®‚ü®fun x ‚Ü¶ ‚ü®g‚ÇÇ x, (h‚ÇÇ x).1‚ü©, fun x ‚Ü¶
        Finite.fintype <|
          let ‚ü®_h, h'‚ü© := h‚ÇÅ x
          h'.subset fun _i hi ‚Ü¶ hi.mono (inter_subset_inter_right _ (h‚ÇÇ x).2)‚ü©‚ü©,
    fun ‚ü®R‚ü© ‚Ü¶ R.to_locallyFinite‚ü©

instance [TopologicalSpace Œ±] [Finite Œ≤] (F : Ctop.Realizer Œ±) (f : Œ≤ ‚Üí Set Œ±) :
    Nonempty (LocallyFinite.Realizer F f) :=
  (locallyFinite_iff_exists_realizer _).1 <| locallyFinite_of_finite _

/-- A `Compact.Realizer s` is a realization that `s` is compact, namely it is a
choice of finite open covers for each set family covering `s`. -/
def Compact.Realizer [TopologicalSpace Œ±] (s : Set Œ±) :=
  ‚àÄ {f : Filter Œ±} (F : f.Realizer) (x : F.œÉ), f ‚â† ‚ä• ‚Üí F.F x ‚äÜ s ‚Üí { a // a ‚àà s ‚àß ùìù a ‚äì f ‚â† ‚ä• }

instance [TopologicalSpace Œ±] : Inhabited (Compact.Realizer (‚àÖ : Set Œ±)) :=
  ‚ü®fun {f} F x h hF ‚Ü¶ by
    suffices f = ‚ä• from absurd this h
    rw [‚Üê F.eq, eq_bot_iff]
    exact fun s _ ‚Ü¶ ‚ü®x, hF.trans s.empty_subset‚ü©‚ü©
