/-
Copyright (c) 2025 Amelia Livingston. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Amelia Livingston
-/
import Mathlib.RepresentationTheory.Rep

/-!
# Coinvariants a group representation

Given a commutative ring `k` and a monoid `G`, this file introduces the coinvariants of a
`k`-linear `G`-representation `(V, œÅ)`.

We first define `Representation.Coinvariants.ker`, the submodule of `V` generated by elements
of the form `œÅ g x - x` for `x : V`, `g : G`. Then the coinvariants of `(V, œÅ)` are the quotient of
`V` by this submodule. We show that the functor sending a representation to its coinvariants is
left adjoint to the functor equipping a module with the trivial representation.

-/

universe u v

namespace Representation

variable {k G V W X : Type*} [CommRing k] [Monoid G] [AddCommGroup V] [Module k V]
  [AddCommGroup W] [Module k W] [AddCommGroup X] [Module k X]
  (œÅ : Representation k G V) (œÑ : Representation k G W) (œÖ : Representation k G X)

/-- The submodule of a representation generated by elements of the form `œÅ g x - x`. -/
def Coinvariants.ker : Submodule k V :=
  Submodule.span k (Set.range fun (gv : G √ó V) => œÅ gv.1 gv.2 - gv.2)

/-- The coinvariants of a representation, `V ‚ß∏ ‚ü®{œÅ g x - x | g ‚àà G, x ‚àà V}‚ü©`. -/
def Coinvariants := V ‚ß∏ Coinvariants.ker œÅ

namespace Coinvariants

instance : AddCommGroup (Coinvariants œÅ) := inferInstanceAs <| AddCommGroup (_ ‚ß∏ _)
instance : Module k (Coinvariants œÅ) := inferInstanceAs <| Module k (_ ‚ß∏ _)

variable {œÅ}

lemma sub_mem_ker (g : G) (x : V) : œÅ g x - x ‚àà Coinvariants.ker œÅ :=
  Submodule.subset_span <| Set.mem_range_self (g, x)

lemma mem_ker_of_eq (g : G) (x : V) (a : V) (h : œÅ g x - x = a) : a ‚àà ker œÅ :=
  Submodule.subset_span ‚ü®(g, x), h‚ü©

variable (œÅ)

/-- The quotient map from a representation to its coinvariants as a linear map. -/
def mk : V ‚Üí‚Çó[k] Coinvariants œÅ := Submodule.mkQ (ker œÅ)

theorem mk_eq_iff {x y : V} :
    mk œÅ x = mk œÅ y ‚Üî x - y ‚àà Coinvariants.ker œÅ :=
  Submodule.Quotient.eq _

theorem mk_eq_zero {x : V} :
    mk œÅ x = 0 ‚Üî x ‚àà Coinvariants.ker œÅ :=
  Submodule.Quotient.mk_eq_zero _

theorem mk_surjective : Function.Surjective (mk œÅ) :=
  Submodule.Quotient.mk_surjective _

@[simp]
lemma mk_self_apply (g : G) (x : V) :
    mk œÅ (œÅ g x) = mk œÅ x :=
  (mk_eq_iff _).2 <| mem_ker_of_eq g x _ rfl

variable {œÅ} in
@[elab_as_elim]
theorem induction_on {motive : Coinvariants œÅ ‚Üí Prop} (x : Coinvariants œÅ)
    (h : ‚àÄ v : V, motive (mk œÅ v)) :
    motive x :=
  Submodule.Quotient.induction_on _ x h

/-- A `G`-invariant linear map induces a linear map out of the coinvariants of a
`G`-representation. -/
def lift (f : V ‚Üí‚Çó[k] W) (h : ‚àÄ (x : G), f ‚àò‚Çó œÅ x = f) :
    œÅ.Coinvariants ‚Üí‚Çó[k] W :=
  Submodule.liftQ _ f <| Submodule.span_le.2 fun x ‚ü®‚ü®g, y‚ü©, hy‚ü© => by
    simpa only [‚Üê hy, SetLike.mem_coe, LinearMap.mem_ker, map_sub, sub_eq_zero, LinearMap.coe_comp,
      Function.comp_apply] using LinearMap.ext_iff.1 (h g) y

@[simp]
theorem lift_comp_mk (f : V ‚Üí‚Çó[k] W) (h : ‚àÄ (x : G), f ‚àò‚Çó œÅ x = f) :
    lift œÅ f h ‚àò‚Çó mk œÅ = f := rfl

@[simp]
theorem lift_mk (f : V ‚Üí‚Çó[k] W) (h : ‚àÄ (x : G), f ‚àò‚Çó œÅ x = f) (x : V) :
    lift œÅ f h (mk _ x) = f x := rfl

variable {œÅ} in
@[ext high]
lemma hom_ext {f g : Coinvariants œÅ ‚Üí‚Çó[k] W} (H : f ‚àò‚Çó mk œÅ = g ‚àò‚Çó mk œÅ) : f = g :=
  Submodule.linearMap_qext _ H

/-- Given `G`-representations on `k`-modules `V, W`, a linear map `V ‚Üí‚Çó[k] W` commuting with
the representations induces a `k`-linear map between the coinvariants. -/
noncomputable def map (f : V ‚Üí‚Çó[k] W) (hf : ‚àÄ g, f ‚àò‚Çó œÅ g = œÑ g ‚àò‚Çó f) :
    Coinvariants œÅ ‚Üí‚Çó[k] Coinvariants œÑ :=
  lift _ (mk _ ‚àò‚Çó f) fun g => LinearMap.ext fun x => (mk_eq_iff _).2 <|
    mem_ker_of_eq g (f x) _ <| by simpa using congr($((hf g).symm) x)

variable {œÅ œÑ}

@[simp]
lemma map_comp_mk (f : V ‚Üí‚Çó[k] W) (hf : ‚àÄ g, f ‚àò‚Çó œÅ g = œÑ g ‚àò‚Çó f) :
    map œÅ œÑ f hf ‚àò‚Çó mk œÅ = mk œÑ ‚àò‚Çó f := rfl

@[simp]
lemma map_mk (f : V ‚Üí‚Çó[k] W) (hf : ‚àÄ g, f ‚àò‚Çó œÅ g = œÑ g ‚àò‚Çó f) (x : V) :
    map œÅ œÑ f hf (mk _ x) = mk _ (f x) := rfl

@[simp]
lemma map_id (œÅ : Representation k G V) :
    map œÅ œÅ LinearMap.id (by simp) = LinearMap.id := by
  ext; rfl

@[simp]
lemma map_comp (œÜ : V ‚Üí‚Çó[k] W) (œà : W ‚Üí‚Çó[k] X)
    (H : ‚àÄ g, œÜ ‚àò‚Çó œÅ g = œÑ g ‚àò‚Çó œÜ) (h : ‚àÄ g, œà ‚àò‚Çó œÑ g = œÖ g ‚àò‚Çó œà) :
    map œÑ œÖ œà h ‚àò‚Çó map œÅ œÑ œÜ H = map œÅ œÖ (œà ‚àò‚Çó œÜ) (fun g => by
      ext x; have : œÜ _ = _ := congr($(H g) x); have : œà _ = _ := congr($(h g) (œÜ x)); simp_all) :=
  hom_ext rfl

end Representation.Coinvariants

namespace Rep

open CategoryTheory Representation

variable {k G : Type u} [CommRing k] [Monoid G] {A B C : Rep k G} {n : ‚Ñï}

variable (k G)

/-- The functor sending a representation to its coinvariants. -/
@[simps! obj_carrier map_hom]
noncomputable def coinvariantsFunctor : Rep k G ‚•§ ModuleCat k where
  obj A := ModuleCat.of k A.œÅ.Coinvariants
  map f := ModuleCat.ofHom (Representation.Coinvariants.map _ _ f.hom.hom
    fun g => ModuleCat.hom_ext_iff.1 <| f.comm g)
  map_id _ := by simp
  map_comp _ _ := by ext; simp

/-- The quotient map from a representation to its coinvariants induces a natural transformation
from the forgetful functor `Rep k G ‚•§ ModuleCat k` to the coinvariants functor. -/
@[simps! app_hom]
noncomputable def coinvariantsMk : Action.forget (ModuleCat k) G ‚ü∂ coinvariantsFunctor k G where
  app (X : Rep k G) := ModuleCat.ofHom <| Representation.Coinvariants.mk X.œÅ

instance (X : Rep k G) : Epi ((coinvariantsMk k G).app X) :=
  (ModuleCat.epi_iff_surjective _).2 <| Representation.Coinvariants.mk_surjective X.œÅ

variable {k G}

@[ext]
lemma coinvariantsFunctor_hom_ext {M : ModuleCat k} {f g : (coinvariantsFunctor k G).obj A ‚ü∂ M}
    (hfg : (coinvariantsMk k G).app A ‚â´ f = (coinvariantsMk k G).app A ‚â´ g) :
    f = g := (cancel_epi _).1 hfg

/-- The linear map underlying a `G`-representation morphism `A ‚ü∂ B`, where `B` has the trivial
representation, factors through `A_G`. -/
noncomputable abbrev desc [B.œÅ.IsTrivial] (f : A ‚ü∂ B) :
    (coinvariantsFunctor k G).obj A ‚ü∂ B.V :=
  ModuleCat.ofHom <| Representation.Coinvariants.lift _ f.hom.hom fun _ => by
    ext
    have := hom_comm_apply f
    simp_all

variable (k G)

instance : (coinvariantsFunctor k G).Additive where
instance : (coinvariantsFunctor k G).Linear k where

/-- The adjunction between the functor sending a representation to its coinvariants and the functor
equipping a module with the trivial representation. -/
@[simps]
noncomputable def coinvariantsAdjunction : coinvariantsFunctor k G ‚ä£ trivialFunctor k G where
  unit := { app X := {
    hom := (coinvariantsMk k G).app X
    comm _ := by ext; simp [ModuleCat.endRingEquiv, trivialFunctor] }}
  counit := { app X := desc (B := trivial k G X) (ùüô _) }

@[simp]
theorem coinvariantsAdjunction_homEquiv_apply_hom {X : Rep k G} {Y : ModuleCat k}
    (f : (coinvariantsFunctor k G).obj X ‚ü∂ Y) :
    ((coinvariantsAdjunction k G).homEquiv X Y f).hom = (coinvariantsMk k G).app X ‚â´ f := by
  rfl

@[simp]
theorem coinvariantsAdjunction_homEquiv_symm_apply_hom {X : Rep k G} {Y : ModuleCat k}
    (f : X ‚ü∂ (trivialFunctor k G).obj Y) :
    ((coinvariantsAdjunction k G).homEquiv X Y).symm f = desc f := by
  ext
  simp [coinvariantsAdjunction, Adjunction.homEquiv_symm_apply]

instance : (coinvariantsFunctor k G).PreservesZeroMorphisms where
instance : (coinvariantsFunctor k G).IsLeftAdjoint := (coinvariantsAdjunction k G).isLeftAdjoint

end Rep
