/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.RepresentationTheory.Action.Limits
import Mathlib.RepresentationTheory.Action.Concrete
import Mathlib.CategoryTheory.Monoidal.FunctorCategory
import Mathlib.CategoryTheory.Monoidal.Transport
import Mathlib.CategoryTheory.Monoidal.Rigid.OfEquivalence
import Mathlib.CategoryTheory.Monoidal.Rigid.FunctorCategory
import Mathlib.CategoryTheory.Monoidal.Linear
import Mathlib.CategoryTheory.Monoidal.Braided
import Mathlib.CategoryTheory.Monoidal.Types.Basic

/-!
# Induced monoidal structure on `Action V G`

We show:

* When `V` is monoidal, braided, or symmetric, so is `Action V G`.
-/

universe u v

open CategoryTheory Limits

variable {V : Type (u + 1)} [LargeCategory V] {G : MonCat.{u}}

namespace Action

section Monoidal

open MonoidalCategory

variable [MonoidalCategory V]

instance instMonoidalCategory : MonoidalCategory (Action V G) :=
  Monoidal.transport (Action.functorCategoryEquivalence _ _).symm

@[simp]
theorem tensorUnit_v : (ùüô_ (Action V G)).V = ùüô_ V :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.tensor_unit_V Action.tensorUnit_v

-- porting note: removed @[simp] as the simpNF linter complains
theorem tensorUnit_rho {g : G} : (ùüô_ (Action V G)).œÅ g = ùüô (ùüô_ V) :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.tensor_unit_rho Action.tensorUnit_rho

@[simp]
theorem tensor_v {X Y : Action V G} : (X ‚äó Y).V = X.V ‚äó Y.V :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.tensor_V Action.tensor_v

-- porting note: removed @[simp] as the simpNF linter complains
theorem tensor_rho {X Y : Action V G} {g : G} : (X ‚äó Y).œÅ g = X.œÅ g ‚äó Y.œÅ g :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.tensor_rho Action.tensor_rho

@[simp]
theorem tensor_hom {W X Y Z : Action V G} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) : (f ‚äó g).hom = f.hom ‚äó g.hom :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.tensor_hom Action.tensor_hom

@[simp]
theorem whiskerLeft_hom (X : Action V G) {Y Z : Action V G} (f : Y ‚ü∂ Z) :
    (X ‚óÅ f).hom = X.V ‚óÅ f.hom :=
  rfl

@[simp]
theorem whiskerRight_hom {X Y : Action V G} (f : X ‚ü∂ Y) (Z : Action V G) :
    (f ‚ñ∑ Z).hom = f.hom ‚ñ∑ Z.V :=
  rfl

-- porting note: removed @[simp] as the simpNF linter complains
theorem associator_hom_hom {X Y Z : Action V G} :
    Hom.hom (Œ±_ X Y Z).hom = (Œ±_ X.V Y.V Z.V).hom := by
  dsimp
  simp
set_option linter.uppercaseLean3 false in
#align Action.associator_hom_hom Action.associator_hom_hom

-- porting note: removed @[simp] as the simpNF linter complains
theorem associator_inv_hom {X Y Z : Action V G} :
    Hom.hom (Œ±_ X Y Z).inv = (Œ±_ X.V Y.V Z.V).inv := by
  dsimp
  simp
set_option linter.uppercaseLean3 false in
#align Action.associator_inv_hom Action.associator_inv_hom

-- porting note: removed @[simp] as the simpNF linter complains
theorem leftUnitor_hom_hom {X : Action V G} : Hom.hom (Œª_ X).hom = (Œª_ X.V).hom := by
  dsimp
  simp
set_option linter.uppercaseLean3 false in
#align Action.left_unitor_hom_hom Action.leftUnitor_hom_hom

-- porting note: removed @[simp] as the simpNF linter complains
theorem leftUnitor_inv_hom {X : Action V G} : Hom.hom (Œª_ X).inv = (Œª_ X.V).inv := by
  dsimp
  simp
set_option linter.uppercaseLean3 false in
#align Action.left_unitor_inv_hom Action.leftUnitor_inv_hom

-- porting note: removed @[simp] as the simpNF linter complains
theorem rightUnitor_hom_hom {X : Action V G} : Hom.hom (œÅ_ X).hom = (œÅ_ X.V).hom := by
  dsimp
  simp
set_option linter.uppercaseLean3 false in
#align Action.right_unitor_hom_hom Action.rightUnitor_hom_hom

-- porting note: removed @[simp] as the simpNF linter complains
theorem rightUnitor_inv_hom {X : Action V G} : Hom.hom (œÅ_ X).inv = (œÅ_ X.V).inv := by
  dsimp
  simp
set_option linter.uppercaseLean3 false in
#align Action.right_unitor_inv_hom Action.rightUnitor_inv_hom

/-- Given an object `X` isomorphic to the tensor unit of `V`, `X` equipped with the trivial action
is isomorphic to the tensor unit of `Action V G`. -/
def tensorUnitIso {X : V} (f : ùüô_ V ‚âÖ X) : ùüô_ (Action V G) ‚âÖ Action.mk X 1 :=
  Action.mkIso f fun _ => by
    simp only [MonoidHom.one_apply, End.one_def, Category.id_comp f.hom, tensorUnit_rho,
      MonCat.oneHom_apply, MonCat.one_of, Category.comp_id]
set_option linter.uppercaseLean3 false in
#align Action.tensor_unit_iso Action.tensorUnitIso

variable (V G)

/-- When `V` is monoidal the forgetful functor `Action V G` to `V` is monoidal. -/
@[simps]
def forgetMonoidal : MonoidalFunctor (Action V G) V :=
  { toFunctor := Action.forget _ _
    Œµ := ùüô _
    Œº := fun X Y => ùüô _ }
set_option linter.uppercaseLean3 false in
#align Action.forget_monoidal Action.forgetMonoidal

instance forgetMonoidal_faithful : Faithful (forgetMonoidal V G).toFunctor := by
  change Faithful (forget V G); infer_instance
set_option linter.uppercaseLean3 false in
#align Action.forget_monoidal_faithful Action.forgetMonoidal_faithful

section

variable [BraidedCategory V]

instance : BraidedCategory (Action V G) :=
  braidedCategoryOfFaithful (forgetMonoidal V G) (fun X Y => mkIso (Œ≤_ _ _)
    (fun g => by simp [FunctorCategoryEquivalence.inverse])) (by aesop_cat)

/-- When `V` is braided the forgetful functor `Action V G` to `V` is braided. -/
@[simps!]
def forgetBraided : BraidedFunctor (Action V G) V :=
  { forgetMonoidal _ _ with }
set_option linter.uppercaseLean3 false in
#align Action.forget_braided Action.forgetBraided

instance forgetBraided_faithful : Faithful (forgetBraided V G).toFunctor := by
  change Faithful (forget V G); infer_instance
set_option linter.uppercaseLean3 false in
#align Action.forget_braided_faithful Action.forgetBraided_faithful

end

instance [SymmetricCategory V] : SymmetricCategory (Action V G) :=
  symmetricCategoryOfFaithful (forgetBraided V G)

section

variable [Preadditive V] [MonoidalPreadditive V]

attribute [local simp] MonoidalPreadditive.tensor_add MonoidalPreadditive.add_tensor

instance : MonoidalPreadditive (Action V G) where

variable {R : Type*} [Semiring R] [Linear R V] [MonoidalLinear R V]

instance : MonoidalLinear R (Action V G) where

end

noncomputable section

/-- Upgrading the functor `Action V G ‚•§ (SingleObj G ‚•§ V)` to a monoidal functor. -/
def functorCategoryMonoidalEquivalence : MonoidalFunctor (Action V G) (SingleObj G ‚•§ V) :=
  Monoidal.fromTransported (Action.functorCategoryEquivalence _ _).symm
set_option linter.uppercaseLean3 false in
#align Action.functor_category_monoidal_equivalence Action.functorCategoryMonoidalEquivalence

instance : IsEquivalence (functorCategoryMonoidalEquivalence V G).toFunctor := by
  change IsEquivalence (Action.functorCategoryEquivalence _ _).functor; infer_instance

@[simp]
theorem functorCategoryMonoidalEquivalence.Œº_app (A B : Action V G) :
    ((functorCategoryMonoidalEquivalence V G).Œº A B).app PUnit.unit = ùüô _ := by
  dsimp only [functorCategoryMonoidalEquivalence]
  simp only [Monoidal.fromTransported_toLaxMonoidalFunctor_Œº, NatTrans.comp_app]
  -- porting note: Lean3 was able to see through some defeq, as the mathlib3 proof was
  --   show (ùüô A.V ‚äó ùüô B.V) ‚â´ ùüô (A.V ‚äó B.V) ‚â´ (ùüô A.V ‚äó ùüô B.V) = ùüô (A.V ‚äó B.V)
  --   simp only [monoidal_category.tensor_id, category.comp_id]
  rfl
set_option linter.uppercaseLean3 false in
#align Action.functor_category_monoidal_equivalence.Œº_app Action.functorCategoryMonoidalEquivalence.Œº_app

@[simp]
theorem functorCategoryMonoidalEquivalence.ŒºIso_inv_app (A B : Action V G) :
    ((functorCategoryMonoidalEquivalence V G).ŒºIso A B).inv.app PUnit.unit = ùüô _ := by
  rw [‚Üê NatIso.app_inv, ‚Üê IsIso.Iso.inv_hom]
  refine' IsIso.inv_eq_of_hom_inv_id _
  rw [Category.comp_id, NatIso.app_hom, MonoidalFunctor.ŒºIso_hom,
    functorCategoryMonoidalEquivalence.Œº_app]
set_option linter.uppercaseLean3 false in
#align Action.functor_category_monoidal_equivalence.Œº_iso_inv_app Action.functorCategoryMonoidalEquivalence.ŒºIso_inv_app

@[simp]
theorem functorCategoryMonoidalEquivalence.Œµ_app :
    (functorCategoryMonoidalEquivalence V G).Œµ.app PUnit.unit = ùüô _ := by
  dsimp only [functorCategoryMonoidalEquivalence]
  simp only [Monoidal.fromTransported_toLaxMonoidalFunctor_Œµ]
  rfl
set_option linter.uppercaseLean3 false in
#align Action.functor_category_monoidal_equivalence.Œµ_app Action.functorCategoryMonoidalEquivalence.Œµ_app

@[simp]
theorem functorCategoryMonoidalEquivalence.inv_counit_app_hom (A : Action V G) :
    ((functorCategoryMonoidalEquivalence _ _).inv.adjunction.counit.app A).hom = ùüô _ :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.functor_category_monoidal_equivalence.inv_counit_app_hom Action.functorCategoryMonoidalEquivalence.inv_counit_app_hom

@[simp]
theorem functorCategoryMonoidalEquivalence.counit_app (A : SingleObj G ‚•§ V) :
    ((functorCategoryMonoidalEquivalence _ _).adjunction.counit.app A).app PUnit.unit = ùüô _ :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.functor_category_monoidal_equivalence.counit_app Action.functorCategoryMonoidalEquivalence.counit_app

@[simp]
theorem functorCategoryMonoidalEquivalence.inv_unit_app_app (A : SingleObj G ‚•§ V) :
    ((functorCategoryMonoidalEquivalence _ _).inv.adjunction.unit.app A).app PUnit.unit = ùüô _ :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.functor_category_monoidal_equivalence.inv_unit_app_app Action.functorCategoryMonoidalEquivalence.inv_unit_app_app

@[simp]
theorem functorCategoryMonoidalEquivalence.unit_app_hom (A : Action V G) :
    ((functorCategoryMonoidalEquivalence _ _).adjunction.unit.app A).hom = ùüô _ :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.functor_category_monoidal_equivalence.unit_app_hom Action.functorCategoryMonoidalEquivalence.unit_app_hom

@[simp]
theorem functorCategoryMonoidalEquivalence.functor_map {A B : Action V G} (f : A ‚ü∂ B) :
    (functorCategoryMonoidalEquivalence _ _).map f = FunctorCategoryEquivalence.functor.map f :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.functor_category_monoidal_equivalence.functor_map Action.functorCategoryMonoidalEquivalence.functor_map

@[simp]
theorem functorCategoryMonoidalEquivalence.inverse_map {A B : SingleObj G ‚•§ V} (f : A ‚ü∂ B) :
    (functorCategoryMonoidalEquivalence _ _).inv.map f = FunctorCategoryEquivalence.inverse.map f :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.functor_category_monoidal_equivalence.inverse_map Action.functorCategoryMonoidalEquivalence.inverse_map

variable (H : GroupCat.{u})

instance [RightRigidCategory V] : RightRigidCategory (SingleObj (H : MonCat.{u}) ‚•§ V) := by
  change RightRigidCategory (SingleObj H ‚•§ V); infer_instance

/-- If `V` is right rigid, so is `Action V G`. -/
instance [RightRigidCategory V] : RightRigidCategory (Action V H) :=
  rightRigidCategoryOfEquivalence (functorCategoryMonoidalEquivalence V _)

instance [LeftRigidCategory V] : LeftRigidCategory (SingleObj (H : MonCat.{u}) ‚•§ V) := by
  change LeftRigidCategory (SingleObj H ‚•§ V); infer_instance

/-- If `V` is left rigid, so is `Action V G`. -/
instance [LeftRigidCategory V] : LeftRigidCategory (Action V H) :=
  leftRigidCategoryOfEquivalence (functorCategoryMonoidalEquivalence V _)

instance [RigidCategory V] : RigidCategory (SingleObj (H : MonCat.{u}) ‚•§ V) := by
  change RigidCategory (SingleObj H ‚•§ V); infer_instance

/-- If `V` is rigid, so is `Action V G`. -/
instance [RigidCategory V] : RigidCategory (Action V H) :=
  rigidCategoryOfEquivalence (functorCategoryMonoidalEquivalence V _)

variable {V H}
variable (X : Action V H)

@[simp]
theorem rightDual_v [RightRigidCategory V] : X·òÅ.V = X.V·òÅ :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.right_dual_V Action.rightDual_v

@[simp]
theorem leftDual_v [LeftRigidCategory V] : (·òÅX).V = ·òÅX.V :=
  rfl
set_option linter.uppercaseLean3 false in
#align Action.left_dual_V Action.leftDual_v

-- This lemma was always bad, but the linter only noticed after lean4#2644
@[simp, nolint simpNF]
theorem rightDual_œÅ [RightRigidCategory V] (h : H) : X·òÅ.œÅ h = (X.œÅ (h‚Åª¬π : H))·òÅ := by
  rw [‚Üê SingleObj.inv_as_inv]; rfl
set_option linter.uppercaseLean3 false in
#align Action.right_dual_œÅ Action.rightDual_œÅ

-- This lemma was always bad, but the linter only noticed after lean4#2644
@[simp, nolint simpNF]
theorem leftDual_œÅ [LeftRigidCategory V] (h : H) : (·òÅX).œÅ h = ·òÅX.œÅ (h‚Åª¬π : H) := by
  rw [‚Üê SingleObj.inv_as_inv]; rfl
set_option linter.uppercaseLean3 false in
#align Action.left_dual_œÅ Action.leftDual_œÅ

end

end Monoidal

open MonoidalCategory

/-- Given `X : Action (Type u) (Mon.of G)` for `G` a group, then `G √ó X` (with `G` acting as left
multiplication on the first factor and by `X.œÅ` on the second) is isomorphic as a `G`-set to
`G √ó X` (with `G` acting as left multiplication on the first factor and trivially on the second).
The isomorphism is given by `(g, x) ‚Ü¶ (g, g‚Åª¬π ‚Ä¢ x)`. -/
@[simps]
noncomputable def leftRegularTensorIso (G : Type u) [Group G] (X : Action (Type u) (MonCat.of G)) :
    leftRegular G ‚äó X ‚âÖ leftRegular G ‚äó Action.mk X.V 1 where
  hom :=
    { hom := fun g => ‚ü®g.1, (X.œÅ (g.1‚Åª¬π : G) g.2 : X.V)‚ü©
      comm := fun (g : G) => by
        funext ‚ü®(x‚ÇÅ : G), (x‚ÇÇ : X.V)‚ü©
        refine' Prod.ext rfl _
        change (X.œÅ ((g * x‚ÇÅ)‚Åª¬π : G) * X.œÅ g) x‚ÇÇ = X.œÅ _ _
        rw [mul_inv_rev, ‚Üê X.œÅ.map_mul, inv_mul_cancel_right] }
  inv :=
    { hom := fun g => ‚ü®g.1, X.œÅ g.1 g.2‚ü©
      comm := fun (g : G) => by
        funext ‚ü®(x‚ÇÅ : G), (x‚ÇÇ : X.V)‚ü©
        refine' Prod.ext rfl _
        erw [tensor_rho, tensor_rho]
        dsimp
        -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
        erw [leftRegular_œÅ_apply]
        erw [map_mul]
        rfl }
  hom_inv_id := by
    apply Hom.ext
    funext x
    refine' Prod.ext rfl _
    change (X.œÅ x.1 * X.œÅ (x.1‚Åª¬π : G)) x.2 = x.2
    rw [‚Üê X.œÅ.map_mul, mul_inv_self, X.œÅ.map_one, MonCat.one_of, End.one_def, types_id_apply]
  inv_hom_id := by
    apply Hom.ext
    funext x
    refine' Prod.ext rfl _
    change (X.œÅ (x.1‚Åª¬π : G) * X.œÅ x.1) x.2 = x.2
    rw [‚Üê X.œÅ.map_mul, inv_mul_self, X.œÅ.map_one, MonCat.one_of, End.one_def, types_id_apply]
set_option linter.uppercaseLean3 false in
#align Action.left_regular_tensor_iso Action.leftRegularTensorIso

/-- The natural isomorphism of `G`-sets `G‚Åø‚Å∫¬π ‚âÖ G √ó G‚Åø`, where `G` acts by left multiplication on
each factor. -/
@[simps!]
noncomputable def diagonalSucc (G : Type u) [Monoid G] (n : ‚Ñï) :
    diagonal G (n + 1) ‚âÖ leftRegular G ‚äó diagonal G n :=
  mkIso (Equiv.piFinSuccAbove _ 0).toIso fun _ => rfl
set_option linter.uppercaseLean3 false in
#align Action.diagonal_succ Action.diagonalSucc

end Action

namespace CategoryTheory.MonoidalFunctor

open Action

variable {W : Type (u + 1)} [LargeCategory W] [MonoidalCategory V] [MonoidalCategory W]

/-- A lax monoidal functor induces a lax monoidal functor between
the categories of `G`-actions within those categories. -/
@[simps!]
def mapActionLax (F : LaxMonoidalFunctor V W) (G : MonCat.{u}) :
    LaxMonoidalFunctor (Action V G) (Action W G) := .ofTensorHom
  (F := F.toFunctor.mapAction G)
  (Œµ :=
    { hom := F.Œµ
      comm := fun g => by
        dsimp [FunctorCategoryEquivalence.inverse, Functor.mapAction]
        rw [Category.id_comp, F.map_id, Category.comp_id] })
  (Œº := fun X Y =>
    { hom := F.Œº X.V Y.V
      comm := fun g => F.Œº_natural (X.œÅ g) (Y.œÅ g) })
  -- using `dsimp` before `simp` speeds these up
  (Œº_natural := @fun {X Y X' Y'} f g ‚Ü¶ by ext; dsimp; simp)
  (associativity := fun X Y Z ‚Ü¶ by ext; dsimp; simp)
  (left_unitality := fun X ‚Ü¶ by ext; dsimp; simp)
  (right_unitality := fun X ‚Ü¶ by
    ext
    dsimp
    simp only [MonoidalCategory.rightUnitor_conjugation,
      LaxMonoidalFunctor.right_unitality, Category.id_comp, Category.assoc,
      LaxMonoidalFunctor.right_unitality_inv_assoc, Category.comp_id, Iso.hom_inv_id]
    rw [‚Üê F.map_comp, Iso.inv_hom_id, F.map_id, Category.comp_id])

variable (F : MonoidalFunctor V W) (G : MonCat.{u})

/-- A monoidal functor induces a monoidal functor between
the categories of `G`-actions within those categories. -/
@[simps!]
def mapAction : MonoidalFunctor (Action V G) (Action W G) :=
  { mapActionLax F.toLaxMonoidalFunctor G with
    Œµ_isIso := by dsimp [mapActionLax]; infer_instance
    Œº_isIso := by dsimp [mapActionLax]; infer_instance }
set_option linter.uppercaseLean3 false in
#align category_theory.monoidal_functor.map_Action CategoryTheory.MonoidalFunctor.mapAction

@[simp]
theorem mapAction_Œµ_inv_hom : (inv (F.mapAction G).Œµ).hom = inv F.Œµ := by
  rw [‚Üê cancel_mono F.Œµ, IsIso.inv_hom_id, ‚Üê F.mapAction_toLaxMonoidalFunctor_Œµ_hom G,
    ‚Üê Action.comp_hom, IsIso.inv_hom_id, Action.id_hom]
set_option linter.uppercaseLean3 false in
#align category_theory.monoidal_functor.map_Action_Œµ_inv_hom CategoryTheory.MonoidalFunctor.mapAction_Œµ_inv_hom

@[simp]
theorem mapAction_Œº_inv_hom (X Y : Action V G) :
    (inv ((F.mapAction G).Œº X Y)).hom = inv (F.Œº X.V Y.V) := by
  rw [‚Üê cancel_mono (F.Œº X.V Y.V), IsIso.inv_hom_id, ‚Üê F.mapAction_toLaxMonoidalFunctor_Œº_hom G,
    ‚Üê Action.comp_hom, IsIso.inv_hom_id, Action.id_hom]
set_option linter.uppercaseLean3 false in
#align category_theory.monoidal_functor.map_Action_Œº_inv_hom CategoryTheory.MonoidalFunctor.mapAction_Œº_inv_hom

end CategoryTheory.MonoidalFunctor
