/-
Copyright (c) 2025 Amelia Livingston. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Amelia Livingston
-/
import Mathlib.RepresentationTheory.Homological.FiniteCyclic
import Mathlib.RepresentationTheory.Homological.GroupHomology.LowDegree

/-!
# Group homology of a finite cyclic group

Let `k` be a commutative ring, `G` a group and `A` a `k`-linear `G`-representation. Given
endomorphisms `œÜ, œà : A ‚ü∂ A` such that `œÜ ‚àò œà = œà ‚àò œÜ = 0`, denote by `Chains(A, œÜ, œà)` the
periodic chain complex `... ‚ü∂ A --œÜ--> A --œà--> A --œÜ--> A --œà--> A ‚ü∂ 0`.

When `G` is finite and generated by `g : G`, then `P := Chains(k[G], N, œÅ(g) - Id)` (with `œÅ` the
left regular representation) is a projective resolution of `k` as a trivial representation.
In this file we show that for `A : Rep k G`, `(A ‚äó P)_G` is isomorphic to
`Chains(A, N, œÅ_A(g) - Id)` as a complex of `k`-modules, and hence the homology of this complex
computes group homology.

## Main definitions

* `Rep.FiniteCyclicGroup.groupHomologyIso‚ÇÄ A g hg`: given a finite cyclic group `G` generated by
  `g`, and a representation `A : Rep k G`, this is an isomorphism `H‚ÇÄ(G, A) ‚âÖ Coker(œÅ_A(g) - Id)`.
* `Rep.FiniteCyclicGroup.groupHomologyIsoOdd A g hg i hi`: given a finite cyclic group `G`
  generated by `g`, and a representation `A : Rep k G`, this is an isomorphism between `H·µ¢(G, A)`
  and the homology of `A --N--> A --(œÅ(g) - Id)--> A` for all odd `i`.
* `Rep.FiniteCyclicGroup.groupHomologyIsoEven A g hg i hi`: given a finite cyclic group `G`
  generated by `g`, and a representation `A : Rep k G`, this is an isomorphism between `H·µ¢(G, A)`
  and the homology of `A --(œÅ(g) - Id)--> A --N--> A` for all positive even `i`.

-/

universe v u

open CategoryTheory Representation Finsupp Limits

namespace Rep.FiniteCyclicGroup

variable {k G : Type u} [CommRing k] [CommGroup G] [Fintype G] (A : Rep k G) (g : G)

open ModuleCat.MonoidalCategory in
/-- Given a finite cyclic group `G` generated by `g : G` and a `k`-linear `G`-representation `A`,
the period chain complex
`... ‚ü∂ (A ‚äó‚Çñ k[G])_G --‚ü¶Id ‚äó N‚üß--> (A ‚äó‚Çñ k[G])_G --‚ü¶Id ‚äó (œÅ(g‚Åª¬π) - ùüô)‚üß--> (A ‚äó‚Çñ k[G])_G ‚ü∂ 0`
is isomorphic as a complex in `ModuleCat k` to
`... ‚ü∂ A --N--> A --(œÅ(g) - ùüô)--> A --N--> A --(œÅ(g) - ùüô)--> A ‚ü∂ 0`. -/
@[simps!]
noncomputable def coinvariantsTensorResolutionIso (hg : ‚àÄ x, x ‚àà Subgroup.zpowers g) :
    (resolution k g‚Åª¬π ((@Subgroup.zpowers_inv G ..).symm ‚ñ∏ hg)).complex.coinvariantsTensorObj A ‚âÖ
      moduleCatChainComplex A g :=
  HomologicalComplex.Hom.isoOfComponents
    (fun _ => (coinvariantsTprodLeftRegularLEquiv A.œÅ).toModuleIso) fun i j h =>
    coinvariantsTensor_hom_ext (LinearMap.ext fun a => lhom_ext' fun g => LinearMap.ext_ring (by
    subst h
    by_cases hj : Even (j + 1)
    ¬∑ simpa [hj, whiskerLeft_def, coinvariantsTensorMk, whiskerLeft,
        tensorObj_def, ofCoinvariantsTprodLeftRegular, tensorObj, Representation.norm,
        ‚Üê Module.End.mul_apply, ‚Üê map_mul, mul_comm g‚Åª¬π]
        using Finset.sum_bijective _ (MulEquiv.inv G).bijective (by aesop) (by aesop)
    ¬∑ simp [hj, whiskerLeft_def, coinvariantsTensorMk, whiskerLeft, tensorObj_def, tensorObj,
        ‚Üê Module.End.mul_apply, ‚Üê map_mul, mul_comm g‚Åª¬π]))

/-- Given a finite cyclic group `G` generated by `g` and `A : Rep k G`, `H‚ÇÄ(G, A)` is isomorphic
to the cokernel of `œÅ(g) - Id(A)`. -/
noncomputable abbrev groupHomologyIso‚ÇÄ (hg : ‚àÄ x, x ‚àà Subgroup.zpowers g) :
    groupHomology A 0 ‚âÖ ModuleCat.of k (_ ‚ß∏ (LinearMap.range (applyAsHom A g - ùüô A).hom.hom)) :=
  groupHomology.H0Iso A ‚â™‚â´ (Submodule.quotEquivOfEq _ _ (by
    simp [Representation.FiniteCyclicGroup.coinvariantsKer_eq_range A.œÅ g hg])).toModuleIso

variable [DecidableEq G]

/-- Given a finite cyclic group `G` generated by `g` and `A : Rep k G`, `H·µ¢(G, A)` is isomorphic
to the homology of the short complex of `k`-modules `A --(œÅ(g) - ùüô)--> A --N--> A` when `i` is
nonzero and even. -/
noncomputable def groupHomologyIsoEven
    (hg : ‚àÄ x, x ‚àà Subgroup.zpowers g) (i : ‚Ñï) [h‚ÇÄ : NeZero i] (hi : Even i) :
    groupHomology A i ‚âÖ (subCompNormHom A g).homology :=
  groupHomologyIso A i (resolution k g‚Åª¬π <| (@Subgroup.zpowers_inv G ..).symm ‚ñ∏ hg) ‚â™‚â´
  (HomologicalComplex.homologyMapIso (coinvariantsTensorResolutionIso A g hg) i) ‚â™‚â´
  HomologicalComplex.alternatingConstHomologyIsoEven A.V (by ext; simp) (by ext; simp) _ (by aesop)
    (by induction i generalizing h‚ÇÄ with | zero => exact (NeZero.ne 0 rfl).elim | succ n _ => simp)
    hi

/-- Given a finite cyclic group `G` generated by `g` and `A : Rep k G`, this is the quotient map
`Ker(N) ‚ü∂ Ker(N)/Im(œÅ(g) - Id(A)) ‚âÖ H·µ¢(G, A)` for any nonzero even `i`. -/
noncomputable abbrev groupHomologyœÄEven
    (hg : ‚àÄ x, x ‚àà Subgroup.zpowers g) (i : ‚Ñï) [NeZero i] (hi : Even i) :
    ModuleCat.of k (LinearMap.ker A.œÅ.norm) ‚ü∂ groupHomology A i :=
    (ShortComplex.moduleCatCyclesIso <| subCompNormHom A g).inv ‚â´
      ShortComplex.homologyœÄ _ ‚â´ (groupHomologyIsoEven A g hg i hi).inv

lemma groupHomologyœÄEven_eq_zero_iff (hg : ‚àÄ x, x ‚àà Subgroup.zpowers g)
    (i : ‚Ñï) [NeZero i] (hi : Even i) (x : LinearMap.ker A.œÅ.norm) :
    groupHomologyœÄEven A g hg i hi x = 0 ‚Üî
      x.1 ‚àà LinearMap.range (applyAsHom A g - ùüô A).hom.hom := by
  simp [groupHomologyœÄEven, map_eq_zero_iff _ ((ModuleCat.mono_iff_injective _).1 inferInstance),
    ShortComplex.moduleCatToCycles, -LinearMap.mem_range, LinearMap.range_codRestrict]

lemma groupHomologyœÄEven_eq_iff (hg : ‚àÄ x, x ‚àà Subgroup.zpowers g)
    (i : ‚Ñï) [NeZero i] (hi : Even i) (x y : LinearMap.ker A.œÅ.norm) :
    groupHomologyœÄEven A g hg i hi x = groupHomologyœÄEven A g hg i hi y ‚Üî
      x.1 - y.1 ‚àà LinearMap.range (applyAsHom A g - ùüô A).hom.hom := by
  rw [‚Üê sub_eq_zero, ‚Üê map_sub, groupHomologyœÄEven_eq_zero_iff]; rfl

/-- Given a finite cyclic group `G` generated by `g` and `A : Rep k G`, `H‚Å±(G, A)` is isomorphic
to the homology of the short complex of `k`-modules `A --N--> A --(œÅ(g) - ùüô)--> A` when `i` is
odd. -/
noncomputable def groupHomologyIsoOdd (hg : ‚àÄ x, x ‚àà Subgroup.zpowers g) (i : ‚Ñï) (hi : Odd i) :
    groupHomology A i ‚âÖ (normHomCompSub A g).homology :=
  groupHomologyIso A i (resolution k g‚Åª¬π <| (@Subgroup.zpowers_inv G ..).symm ‚ñ∏ hg) ‚â™‚â´
  (HomologicalComplex.homologyMapIso (coinvariantsTensorResolutionIso A g hg) i) ‚â™‚â´
  HomologicalComplex.alternatingConstHomologyIsoOdd A.V (by ext; simp) (by ext; simp) (by aesop)
    (by simp) (by rcases hi with ‚ü®j, rfl‚ü©; simp) hi

/-- Given a finite cyclic group `G` generated by `g` and `A : Rep k G`, this is the quotient map
`Ker(œÅ(g) - Id(A)) ‚ü∂ Ker(œÅ(g) - Id(A))/Im(N) ‚âÖ H·µ¢(G, A)` for any odd `i`. -/
noncomputable abbrev groupHomologyœÄOdd (hg : ‚àÄ x, x ‚àà Subgroup.zpowers g) (i : ‚Ñï) (hi : Odd i) :
    ModuleCat.of k (LinearMap.ker (applyAsHom A g - ùüô A).hom.hom) ‚ü∂ groupHomology A i :=
    (ShortComplex.moduleCatCyclesIso <| normHomCompSub A g).inv ‚â´
      ShortComplex.homologyœÄ _ ‚â´ (groupHomologyIsoOdd A g hg i hi).inv

lemma groupHomologyœÄOdd_eq_zero_iff (hg : ‚àÄ x, x ‚àà Subgroup.zpowers g)
    (i : ‚Ñï) (hi : Odd i) (x : LinearMap.ker (applyAsHom A g - ùüô A).hom.hom) :
    groupHomologyœÄOdd A g hg i hi x = 0 ‚Üî x.1 ‚àà LinearMap.range A.œÅ.norm := by
  simp [groupHomologyœÄOdd, map_eq_zero_iff _ ((ModuleCat.mono_iff_injective _).1 inferInstance),
    ShortComplex.moduleCatToCycles, -LinearMap.mem_range, LinearMap.range_codRestrict]

lemma groupHomologyœÄOdd_eq_iff (g : G) (hg : ‚àÄ x, x ‚àà Subgroup.zpowers g)
    (A : Rep k G) (i : ‚Ñï) (hi : Odd i) (x y : LinearMap.ker (applyAsHom A g - ùüô A).hom.hom) :
    groupHomologyœÄOdd A g hg i hi x = groupHomologyœÄOdd A g hg i hi y ‚Üî
      x.1 - y.1 ‚àà LinearMap.range A.œÅ.norm := by
  rw [‚Üê sub_eq_zero, ‚Üê map_sub, groupHomologyœÄOdd_eq_zero_iff]; rfl

end FiniteCyclicGroup
end Rep
