/-
Copyright (c) 2025 Amelia Livingston. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Amelia Livingston
-/
import Mathlib.RepresentationTheory.Homological.FiniteCyclic
import Mathlib.RepresentationTheory.Homological.GroupCohomology.LowDegree

/-!
# Group cohomology of a finite cyclic group

Let `k` be a commutative ring, `G` a group and `A` a `k`-linear `G`-representation. Given
endomorphisms `φ, ψ : A ⟶ A` such that `φ ∘ ψ = ψ ∘ φ = 0`, denote by `Chains(A, φ, ψ)` the
periodic chain complex `... ⟶ A --φ--> A --ψ--> A --φ--> A --ψ--> A ⟶ 0` and by
`Cochains(A, φ, ψ)` the periodic cochain complex
`0 ⟶ A --ψ--> A --φ--> A --ψ--> A --φ--> A ⟶ ...`.

When `G` is finite and generated by `g : G`, then `P := Chains(k[G], N, ρ(g) - Id)` (with `ρ` the
left regular representation) is a projective resolution of `k` as a trivial representation.
In this file we show that for `A : Rep k G`, `Hom(P, A)` is isomorphic to
`Cochains(A, N, ρ_A(g) - Id)` as a complex of `k`-modules, and hence the cohomology of this complex
computes group cohomology.

## Main definitions

* `Rep.FiniteCyclicGroup.groupCohomologyIso₀ A g hg`: given a finite cyclic group `G` generated by
  `g` and a representation `A : Rep k G`, this is an isomorphism `H⁰(G, A) ≅ Ker(ρ_A(g) - Id)`.
* `Rep.FiniteCyclicGroup.groupCohomologyIsoOdd A g hg i hi`: given a finite cyclic group `G`
  generated by `g` and a representation `A : Rep k G`, this is an isomorphism between `Hⁱ(G, A)`
  and the homology of `A --(ρ(g) - Id)--> A --N--> A` for all odd `i`.
* `Rep.FiniteCyclicGroup.groupCohomologyIsoEven A g hg i hi`: given a finite cyclic group `G`
  generated by `g`, and a representation `A : Rep k G`, this is an isomorphism between `Hⁱ(G, A)`
  and the homology of `A --N--> A --(ρ(g) - Id)--> A` for all positive even `i`.

-/

universe v u

open CategoryTheory

namespace Rep.FiniteCyclicGroup

variable {k G : Type u} [CommRing k] [CommGroup G] [Fintype G] (A : Rep k G) (g : G)
  (hg : ∀ x, x ∈ Subgroup.zpowers g)

/-- Given a finite cyclic group `G` generated by `g : G` and a `k`-linear `G`-representation `A`,
the periodic cochain complex
`0 ⟶ Hom(k[G], A) --(- ∘ (ρ(g) - 𝟙))--> Hom(k[G], A) --(- ∘ N)--> Hom(k[G], A) ⟶ ...`
is isomorphic as a complex in `ModuleCat k` to
`0 ⟶ A --(ρ(g) - 𝟙)--> A --N--> A --(ρ(g) - 𝟙)--> A --N--> A ⟶ ...`. -/
@[simps!]
noncomputable def homResolutionIso :
    (resolution k g hg).complex.linearYonedaObj k A ≅ moduleCatCochainComplex A g :=
  HomologicalComplex.Hom.isoOfComponents (fun _ => (leftRegularHomEquiv A).toModuleIso) <| by
    rintro i j ⟨rfl⟩
    ext (x : leftRegular _ _ ⟶ _)
    by_cases hi : Even i
    · have : ¬(Even (i + 1)) := (not_iff_comm.1 Nat.even_add_one.symm).2 hi
      simp [hi, this, ← hom_comm_apply x]
    · simp [hi, Nat.even_add_one.2 hi, Representation.norm, ← hom_comm_apply x]

open ShortComplex Limits

/-- Given a finite cyclic group `G` generated by `g` and `A : Rep k G`, `H⁰(G, A)` is isomorphic
to the kernel of `ρ(g) - Id(A)`. -/
noncomputable abbrev groupCohomologyIso₀ (hg : ∀ x, x ∈ Subgroup.zpowers g) :
    groupCohomology A 0 ≅ ModuleCat.of k (LinearMap.ker (applyAsHom A g - 𝟙 A).hom.hom) :=
  groupCohomology.H0Iso A ≪≫ (LinearEquiv.ofEq _ _ <| by ext; simpa [sub_eq_zero]
    using Representation.mem_invariants_iff_of_forall_mem_zpowers A.ρ g hg _).toModuleIso

variable [DecidableEq G]

/-- Given a finite cyclic group `G` generated by `g` and `A : Rep k G`, `Hⁱ(G, A)` is isomorphic
to the homology of the short complex of `k`-modules `A --N--> A --(ρ(g) - 𝟙)--> A` when `i` is
nonzero and even. -/
noncomputable def groupCohomologyIsoEven
    (hg : ∀ x, x ∈ Subgroup.zpowers g) (i : ℕ) [h₀ : NeZero i] (hi : Even i) :
    groupCohomology A i ≅ (normHomCompSub A g).homology :=
  groupCohomologyIso A i (resolution k g hg) ≪≫
  (HomologicalComplex.homologyMapIso (homResolutionIso A g hg) i) ≪≫
  HomologicalComplex.alternatingConstHomologyIsoEven A.V (by ext; simp) (by ext; simp) (by simp)
    (by induction i generalizing h₀ with | zero => exact (NeZero.ne 0 rfl).elim | succ n _ => simp)
    (by simp) hi

/-- Given a finite cyclic group `G` generated by `g` and `A : Rep k G`, this is the quotient map
`Ker(ρ(g) - Id(A)) ⟶ Ker(ρ(g) - Id(A))/Im(N) ≅ Hⁱ(G, A)` for any nonzero even `i`. -/
noncomputable abbrev groupCohomologyπEven
    (hg : ∀ x, x ∈ Subgroup.zpowers g) (i : ℕ) [NeZero i] (hi : Even i) :
    ModuleCat.of k (LinearMap.ker (applyAsHom A g - 𝟙 A).hom.hom) ⟶ groupCohomology A i :=
  (moduleCatCyclesIso <| normHomCompSub A g).inv ≫
      ShortComplex.homologyπ _ ≫ (groupCohomologyIsoEven A g hg i hi).inv

lemma groupCohomologyπEven_eq_zero_iff
    (hg : ∀ x, x ∈ Subgroup.zpowers g) (i : ℕ) [NeZero i] (hi : Even i)
    (x : LinearMap.ker (applyAsHom A g - 𝟙 A).hom.hom) :
    groupCohomologyπEven A g hg i hi x = 0 ↔ x.1 ∈ LinearMap.range A.norm.hom.hom := by
  simp [groupCohomologyπEven, map_eq_zero_iff _ ((ModuleCat.mono_iff_injective _).1 inferInstance),
    moduleCatToCycles, -LinearMap.mem_range, LinearMap.range_codRestrict]

lemma groupCohomologyπEven_eq_iff
    (hg : ∀ x, x ∈ Subgroup.zpowers g) (i : ℕ) [NeZero i] (hi : Even i)
    (x y : LinearMap.ker (applyAsHom A g - 𝟙 A).hom.hom) :
    groupCohomologyπEven A g hg i hi x = groupCohomologyπEven A g hg i hi y ↔
      x.1 - y.1 ∈ LinearMap.range A.norm.hom.hom := by
  rw [← sub_eq_zero, ← map_sub, groupCohomologyπEven_eq_zero_iff]; rfl

/-- Given a finite cyclic group `G` generated by `g` and `A : Rep k G`, `Hⁱ(G, A)` is isomorphic
to the homology of the short complex of `k`-modules `A --(ρ(g) - 𝟙)--> A --N--> A` when `i` is
odd. -/
noncomputable def groupCohomologyIsoOdd (hg : ∀ x, x ∈ Subgroup.zpowers g) (i : ℕ) (hi : Odd i) :
    groupCohomology A i ≅ (subCompNormHom A g).homology :=
  groupCohomologyIso A i (resolution k g hg) ≪≫
  (HomologicalComplex.homologyMapIso (homResolutionIso A g hg) i) ≪≫
  HomologicalComplex.alternatingConstHomologyIsoOdd A.V (by ext; simp) (by ext; simp)
    (by simp) (by rcases hi with ⟨j, rfl⟩; simp) (by simp) hi

/-- Given a finite cyclic group `G` generated by `g` and `A : Rep k G`, this is the quotient map
`Ker(N) ⟶ Ker(N)/Im(ρ(g) - Id(A)) ≅ Hⁱ(G, A)` for any odd `i`. -/
noncomputable abbrev groupCohomologyπOdd (hg : ∀ x, x ∈ Subgroup.zpowers g) (i : ℕ) (hi : Odd i) :
    ModuleCat.of k (LinearMap.ker A.norm.hom.hom) ⟶ groupCohomology A i :=
    (moduleCatCyclesIso <| subCompNormHom A g).inv ≫
      ShortComplex.homologyπ _ ≫ (groupCohomologyIsoOdd A g hg i hi).inv

lemma groupCohomologyπOdd_eq_zero_iff (hg : ∀ x, x ∈ Subgroup.zpowers g) (i : ℕ) (hi : Odd i)
    (x : LinearMap.ker A.norm.hom.hom) :
    groupCohomologyπOdd A g hg i hi x = 0 ↔
      x.1 ∈ LinearMap.range (applyAsHom A g - 𝟙 A).hom.hom := by
  simp [groupCohomologyπOdd, map_eq_zero_iff _ ((ModuleCat.mono_iff_injective _).1 inferInstance),
    moduleCatToCycles, -LinearMap.mem_range, LinearMap.range_codRestrict]

lemma groupCohomologyπOdd_eq_iff (hg : ∀ x, x ∈ Subgroup.zpowers g) (i : ℕ) (hi : Odd i)
    (x y : LinearMap.ker A.norm.hom.hom) :
    groupCohomologyπOdd A g hg i hi x = groupCohomologyπOdd A g hg i hi y ↔
      x.1 - y.1 ∈ LinearMap.range (applyAsHom A g - 𝟙 A).hom.hom := by
  rw [← sub_eq_zero, ← map_sub, groupCohomologyπOdd_eq_zero_iff]; rfl

end Rep.FiniteCyclicGroup
