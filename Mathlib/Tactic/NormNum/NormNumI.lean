/-
Copyright (c) 2025 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth, Yunzhou Xie, Sidharth Hariharan
-/
import Mathlib.Analysis.Normed.Ring.Basic
import Mathlib.Analysis.RCLike.Basic
import Mathlib.Analysis.Complex.Basic

/-!
## `norm_num` extension for complex numbers

This file provides a `norm_num` extension for complex numbers, allowing the computation of
additions, multiplications, inversions, conjugates, and powers of complex numbers.

-/

open Lean Meta Elab Qq Tactic Complex Mathlib.Tactic
open ComplexConjugate

namespace Mathlib.Meta
namespace NormNumI

variable {ùïú} [RCLike ùïú]

/-- Assert that a complex number is equal to `re + im * I`. -/
structure IsComplex {ùïú} [RCLike ùïú] (z : ùïú) (re im : ‚Ñù) : Prop where
  re_eq : RCLike.re z = re
  im_eq : RCLike.im z = im

theorem IsComplex.I : IsComplex (RCLike.I : ‚ÑÇ) 0 1 := ‚ü®rfl, rfl‚ü©

theorem IsComplex.zero : IsComplex (0 : ùïú) 0 0 := ‚ü®RCLike.zero_re, RCLike.zero_im‚ü©

theorem IsComplex.one : IsComplex (1 : ùïú) 1 0 := ‚ü®RCLike.one_re, RCLike.one_im‚ü©

theorem IsComplex.add : ‚àÄ {z‚ÇÅ z‚ÇÇ : ùïú} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : ‚Ñù},
    IsComplex z‚ÇÅ a‚ÇÅ b‚ÇÅ ‚Üí IsComplex z‚ÇÇ a‚ÇÇ b‚ÇÇ ‚Üí IsComplex (z‚ÇÅ + z‚ÇÇ) (a‚ÇÅ + a‚ÇÇ) (b‚ÇÅ + b‚ÇÇ)
  | _, _, _, _, _, _, ‚ü®rfl, rfl‚ü©, ‚ü®rfl, rfl‚ü© => ‚ü®map_add _ _ _, map_add _ _ _‚ü©

theorem IsComplex.mul : ‚àÄ {z‚ÇÅ z‚ÇÇ : ùïú} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : ‚Ñù},
    IsComplex z‚ÇÅ a‚ÇÅ b‚ÇÅ ‚Üí IsComplex z‚ÇÇ a‚ÇÇ b‚ÇÇ ‚Üí
      IsComplex (z‚ÇÅ * z‚ÇÇ) (a‚ÇÅ * a‚ÇÇ - b‚ÇÅ * b‚ÇÇ) (a‚ÇÅ * b‚ÇÇ + b‚ÇÅ * a‚ÇÇ)
  | z‚ÇÅ, z‚ÇÇ, _, _, _, _, ‚ü®rfl, rfl‚ü©, ‚ü®rfl, rfl‚ü© => ‚ü®RCLike.mul_re z‚ÇÅ z‚ÇÇ, RCLike.mul_im z‚ÇÅ z‚ÇÇ‚ü©

theorem IsComplex.inv {z : ùïú} {x y : ‚Ñù} (h : IsComplex z x y) :
    IsComplex z‚Åª¬π (x / (x * x + y * y)) (- y / (x * x + y * y)) := by
  obtain ‚ü®rfl, rfl‚ü© := h
  constructor <;> simp [RCLike.normSq]

theorem IsComplex.neg : ‚àÄ {z : ùïú} {a b : ‚Ñù}, IsComplex z a b ‚Üí IsComplex (-z) (-a) (-b)
  | _, _, _, ‚ü®rfl, rfl‚ü© => ‚ü®map_neg _ _, map_neg _ _‚ü©

theorem IsComplex.sub : ‚àÄ {z‚ÇÅ z‚ÇÇ : ùïú} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : ‚Ñù},
    IsComplex z‚ÇÅ a‚ÇÅ b‚ÇÅ ‚Üí IsComplex z‚ÇÇ a‚ÇÇ b‚ÇÇ ‚Üí IsComplex (z‚ÇÅ - z‚ÇÇ) (a‚ÇÅ - a‚ÇÇ) (b‚ÇÅ - b‚ÇÇ)
  | _, _, _, _, _, _, ‚ü®rfl, rfl‚ü©, ‚ü®rfl, rfl‚ü© => ‚ü®map_sub _ _ _, map_sub _ _ _‚ü©

theorem IsComplex.conj : ‚àÄ {z : ùïú} {a b : ‚Ñù}, IsComplex z a b ‚Üí IsComplex (conj z) a (-b)
  | _, _, _, ‚ü®rfl, rfl‚ü© => ‚ü®RCLike.conj_re _, RCLike.conj_im _‚ü©

theorem IsComplex.ofNat (n : ‚Ñï) [n.AtLeastTwo] :
    IsComplex (OfNat.ofNat (Œ± := ùïú) n) (OfNat.ofNat n) 0 := ‚ü®RCLike.ofNat_re _, RCLike.ofNat_im _‚ü©

theorem IsComplex.scientific (m exp : ‚Ñï) (x : Bool) :
    IsComplex (OfScientific.ofScientific m x exp : ùïú) (OfScientific.ofScientific m x exp : ‚Ñù) 0 :=
  ‚ü®RCLike.nnratCast_re _, RCLike.nnratCast_im _‚ü©

theorem eq_eq {z : ùïú} {a b a' b' : ‚Ñù} (pf : IsComplex z a b) (pf_a : a = a') (pf_b : b = b') :
  IsComplex z a' b' := by simp_all

theorem eq_of_eq_of_eq_of_eq {z w : ùïú} {az bz aw bw : ‚Ñù}
    (hz : IsComplex z az bz) (hw : IsComplex w aw bw)
    (ha : az = aw) (hb : bz = bw) : z = w := by
  obtain ‚ü®rfl, rfl‚ü© := hz
  obtain ‚ü®rfl, rfl‚ü© := hw
  apply RCLike.ext <;> assumption

theorem ne_of_re_ne {z w : ùïú} {az bz aw bw : ‚Ñù} (hz : IsComplex z az bz) (hw : IsComplex w aw bw) :
    az ‚â† aw ‚Üí z ‚â† w := (mt ¬∑ ¬∑) <| by
  rintro rfl
  obtain ‚ü®rfl, rfl‚ü© := hz
  obtain ‚ü®rfl, rfl‚ü© := hw
  rfl

theorem ne_of_im_ne {z w : ùïú} {az bz aw bw : ‚Ñù} (hz : IsComplex z az bz) (hw : IsComplex w aw bw) :
    bz ‚â† bw ‚Üí z ‚â† w := (mt ¬∑ ¬∑) <| by
  rintro rfl
  obtain ‚ü®rfl, rfl‚ü© := hz
  obtain ‚ü®rfl, rfl‚ü© := hw
  rfl

theorem IsComplex.of_pow_negSucc {w : ùïú} {a b : ‚Ñù} {n : ‚Ñï} {k' : ‚Ñ§}
    (hk : NormNum.IsInt k' (Int.negSucc n)) (hz : IsComplex (w ^ (n + 1))‚Åª¬π a b) :
    IsComplex (w ^ (k' : ‚Ñ§)) a b := by
  rwa [hk.out, Int.cast_id, zpow_negSucc]

theorem IsComplex.of_pow_ofNat {w : ùïú} {k : ‚Ñ§} {n : ‚Ñï} {a b : ‚Ñù}
    (hkk' : NormNum.IsInt k n) (hw : IsComplex (w ^ n) a b) :
    IsComplex (w ^ k) a b := by
  obtain rfl : k = n := by simpa using hkk'.out
  simpa only [zpow_natCast] using hw

theorem pow_bit_false (z : ùïú) (m : ‚Ñï) : z ^ Nat.bit false m = z ^ m * z ^ m := by
  rw [Nat.bit, cond, pow_mul', sq]

theorem pow_bit_true (z : ùïú) (m : ‚Ñï) : z ^ Nat.bit true m = z ^ m * z ^ m * z := by
  rw [Nat.bit, cond, pow_add, pow_mul', pow_one, sq]

/-- Using fast exponentiation to handle nat powers of complexes. -/
partial def parsePow (n' : ‚Ñï) :
    ‚¶Éa b : Q(‚Ñù)‚¶Ñ ‚Üí (z : Q(‚ÑÇ)) ‚Üí (n : Q(‚Ñï)) ‚Üí Q(NormNum.IsNat $n $n') ‚Üí  Q(IsComplex $z $a $b) ‚Üí
    MetaM (Œ£ a b : Q(‚Ñù), Q(IsComplex ($z ^ $n) $a $b)) :=
  n'.binaryRec'
    (fun {_ _} z n _ _ => do
      have : $n =Q 0 := ‚ü®‚ü©
      return ‚ü®q(1), q(0), q(pow_zero $z ‚ñ∏ .one)‚ü©)
    (fun bit (m : ‚Ñï) _ rec {_ _} z n _ hz => do
      match bit with
      | true =>
        have : $n =Q Nat.bit true $m := ‚ü®‚ü©
        let ‚ü®_, _, hzm‚ü© ‚Üê rec q($z) q($m) q(‚ü®rfl‚ü©) hz
        return ‚ü®_, _, q(have hzm' := $hzm; pow_bit_true $z $m ‚ñ∏ (IsComplex.mul hzm' hzm').mul $hz)‚ü©
      | false =>
        have : $n =Q Nat.bit false $m := ‚ü®‚ü©
        let ‚ü®_, _, hzm‚ü© ‚Üê rec q($z) q($m) q(‚ü®rfl‚ü©) hz
        return ‚ü®_, _, q(have hzm' := $hzm; pow_bit_false $z $m ‚ñ∏ IsComplex.mul hzm' hzm')‚ü©)

/-- Parsing all the basic calculation in complex. -/
partial def parse (z : Q(‚ÑÇ)) : MetaM (Œ£ a b : Q(‚Ñù), Q(IsComplex $z $a $b)) := do
  match z with
  | ~q($z‚ÇÅ + $z‚ÇÇ) =>
    let ‚ü®_a‚ÇÅ, _b‚ÇÅ, pf‚ÇÅ‚ü© ‚Üê parse z‚ÇÅ
    let ‚ü®_a‚ÇÇ, _b‚ÇÇ, pf‚ÇÇ‚ü© ‚Üê parse z‚ÇÇ
    pure ‚ü®_, _, q(.add $pf‚ÇÅ $pf‚ÇÇ)‚ü©
  | ~q($z‚ÇÅ * $z‚ÇÇ) =>
    let ‚ü®_a‚ÇÅ, _b‚ÇÅ, pf‚ÇÅ‚ü© ‚Üê parse z‚ÇÅ
    let ‚ü®_a‚ÇÇ, _b‚ÇÇ, pf‚ÇÇ‚ü© ‚Üê parse z‚ÇÇ
    pure ‚ü®_, _, q(.mul $pf‚ÇÅ $pf‚ÇÇ)‚ü©
  | ~q($z‚Åª¬π) =>
    let ‚ü®_x, _y, pf‚ü© ‚Üê parse z
    pure ‚ü®_, _, q(.inv $pf)‚ü©
  | ~q($z‚ÇÅ / $z‚ÇÇ) => do
    let ‚ü®_a, _b, pf‚ü© ‚Üê parse q($z‚ÇÅ * $z‚ÇÇ‚Åª¬π)
    return ‚ü®_, _, q($pf)‚ü©
  | ~q(-$w) => do
    let ‚ü®_a, _b, pf‚ü© ‚Üê parse w
    return ‚ü®_, _, q(.neg $pf)‚ü©
  | ~q($z‚ÇÅ - $z‚ÇÇ) =>
    let ‚ü®_a‚ÇÅ, _b‚ÇÅ, pf‚ÇÅ‚ü© ‚Üê parse z‚ÇÅ
    let ‚ü®_a‚ÇÇ, _b‚ÇÇ, pf‚ÇÇ‚ü© ‚Üê parse z‚ÇÇ
    pure ‚ü®_, _, q(.sub $pf‚ÇÅ $pf‚ÇÇ)‚ü©
  | ~q(conj $w) =>
    let ‚ü®_a, _b, pf‚ü© ‚Üê parse w
    return ‚ü®_, _, q(.conj $pf)‚ü©
  | ~q($w ^ ($n' : ‚Ñï)) =>
    let ‚ü®n, hn‚ü© ‚Üê NormNum.deriveNat q($n') q(inferInstance)
    let ‚ü®_, _, pf‚ü© ‚Üê parse w
    let ‚ü®_, _, pfp‚ü© ‚Üê parsePow n.natLit! q($w) q($n') hn q($pf)
    return ‚ü®_, _, q($pfp)‚ü©
  | ~q($w ^ ($k : ‚Ñ§)) =>
    let ‚ü®k', hm‚ü© ‚Üê NormNum.deriveInt q($k) q(inferInstance)
    match k'.intLit! with
    | Int.ofNat n =>
      let ‚ü®a, b, pf‚ü© ‚Üê parse q($w ^ $n)
      let _i : $k' =Q $n := ‚ü®‚ü©
      return ‚ü®a, b, q(.of_pow_ofNat $hm $pf)‚ü©
    | Int.negSucc n =>
      let ‚ü®a, b, pf‚ü© ‚Üê parse q(($w ^ ($n + 1))‚Åª¬π)
      let _i : $k' =Q Int.negSucc $n := ‚ü®‚ü©
      return ‚ü®a, b, q(.of_pow_negSucc $hm $pf)‚ü©
  | ~q(Complex.I) =>
    pure ‚ü®_, _, q(.I)‚ü©
  | ~q(0) =>
    pure ‚ü®_, _, q(.zero)‚ü©
  | ~q(1) =>
    pure ‚ü®_, _, q(.one)‚ü©
  | ~q(OfNat.ofNat $en (self := @instOfNatAtLeastTwo ‚ÑÇ _ _ $inst)) =>
    return ‚ü®_, _, q(.ofNat $en)‚ü©
  | ~q(OfScientific.ofScientific $m $x $exp) =>
    return ‚ü®_, _, q(.scientific _ _ _)‚ü©
  | _ => throwError "found the atom {z} which is not a numeral"

/-- Using `norm_num` to normalise expressions -/
def normalize (z : Q(‚ÑÇ)) : MetaM (Œ£ a b : Q(‚Ñù), Q(IsComplex $z $a $b)) := do
  let ‚ü®a, b, pf‚ü© ‚Üê parse z
  let ra ‚Üê Mathlib.Meta.NormNum.derive (Œ± := q(‚Ñù)) a
  let rb ‚Üê Mathlib.Meta.NormNum.derive (Œ± := q(‚Ñù)) b
  let { expr := (a' : Q(‚Ñù)), proof? := (pf_a : Q($a = $a')) } ‚Üê ra.toSimpResult | unreachable!
  let { expr := (b' : Q(‚Ñù)), proof? := (pf_b : Q($b = $b')) } ‚Üê rb.toSimpResult | unreachable!
  return ‚ü®a', b', q(eq_eq $pf $pf_a $pf_b)‚ü©

-- TODO: change to use `x + y*I` so that it's fine for `‚Ñù` too.
theorem IsComplex.out {z : ‚ÑÇ} {re im : ‚Ñù} (h : IsComplex z re im) : z = ‚ü®re, im‚ü© := by
  obtain ‚ü®rfl, rfl‚ü© := h
  rfl

/-- Create the `NormNumI` tactic in `conv` mode. -/
elab "norm_numI" : conv => do
  let z ‚Üê Conv.getLhs
  let ‚ü®1, ~q(‚ÑÇ), z‚ü© ‚Üê inferTypeQ z | throwError "{z} is not a complex number"
  let ‚ü®_, _, pf‚ü© ‚Üê normalize z
  let r : Simp.ResultQ q($z) := .mk _ <| .some q(($pf).out)
  Conv.applySimpResult r

end NormNumI
namespace NormNum

/-- The `norm_num` extension which identifies expressions of the form `(z : ‚ÑÇ) = (w : ‚ÑÇ)`,
such that `norm_num` successfully recognises both the real and imaginary parts of both `z` and `w`.
-/
@[norm_num (_ : ‚ÑÇ) = _] def evalComplexEq : NormNumExt where eval {v Œ≤} e := do
  haveI' : v =QL 0 := ‚ü®‚ü©; haveI' : $Œ≤ =Q Prop := ‚ü®‚ü©
  let ~q(($z : ‚ÑÇ) = $w) := e | failure
  haveI' : $e =Q ($z = $w) := ‚ü®‚ü©
  let ‚ü®az, bz, pfz‚ü© ‚Üê NormNumI.parse z
  let ‚ü®aw, bw, pfw‚ü© ‚Üê NormNumI.parse w
  let ‚ü®ba, ra‚ü© ‚Üê deriveBool q($az = $aw)
  match ba with
  | true =>
    let ‚ü®bb, rb‚ü© ‚Üê deriveBool q($bz = $bw)
    match bb with
    | true => return Result'.isBool true q(NormNumI.eq_of_eq_of_eq_of_eq $pfz $pfw $ra $rb)
    | false => return Result'.isBool false q(NormNumI.ne_of_im_ne $pfz $pfw $rb)
  | false => return Result'.isBool false q(NormNumI.ne_of_re_ne $pfz $pfw $ra)

/-- The `norm_num` extension which identifies expressions of the form `Complex.re (z : ‚ÑÇ)`,
such that `norm_num` successfully recognises the real part of `z`.
-/
@[norm_num Complex.re _] def evalRe : NormNumExt where eval {v Œ≤} e := do
  haveI' : v =QL 0 := ‚ü®‚ü©; haveI' : $Œ≤ =Q ‚Ñù := ‚ü®‚ü©
  let ~q(Complex.re $z) := e | failure
  let ‚ü®a, _, pf‚ü© ‚Üê NormNumI.parse z
  let r ‚Üê derive q($a)
  return r.eqTrans q(($pf).re_eq)

/-- The `norm_num` extension which identifies expressions of the form `Complex.im (z : ‚ÑÇ)`,
such that `norm_num` successfully recognises the imaginary part of `z`.
-/
@[norm_num Complex.im _] def evalIm : NormNumExt where eval {v Œ≤} e := do
  haveI' : v =QL 0 := ‚ü®‚ü©; haveI' : $Œ≤ =Q ‚Ñù := ‚ü®‚ü©
  let ~q(Complex.im $z) := e | failure
  let ‚ü®_, b, pf‚ü© ‚Üê NormNumI.parse z
  let r ‚Üê derive q($b)
  return r.eqTrans q(($pf).im_eq)

end NormNum

end Mathlib.Meta
