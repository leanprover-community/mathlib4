/-
Copyright (c) 2022 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathlib.CategoryTheory.Bicategory.Coherence

#align_import category_theory.bicategory.coherence_tactic from "leanprover-community/mathlib"@"3d7987cda72abc473c7cdbbb075170e9ac620042"

/-!
# A `coherence` tactic for bicategories, and `‚äó‚â´` (composition up to associators)

We provide a `bicategory_coherence` tactic,
which proves that any two 2-morphisms (with the same source and target)
in a bicategory which are built out of associators and unitors
are equal.

We also provide `f ‚äó‚â´ g`, the `bicategoricalComp` operation,
which automatically inserts associators and unitors as needed
to make the target of `f` match the source of `g`.

This file mainly deals with the type class setup for the coherence tactic. The actual front end
tactic is given in `Mathlib.Tactic.CategoryTheory.Coherence` at the same time as the coherence
tactic for monoidal categories.
-/

set_option autoImplicit true


noncomputable section

universe w v u

open CategoryTheory CategoryTheory.FreeBicategory

open scoped Bicategory

variable {B : Type u} [Bicategory.{w, v} B] {a b c d e : B}

namespace Mathlib.Tactic.BicategoryCoherence

/-- A typeclass carrying a choice of lift of a 1-morphism from `B` to `FreeBicategory B`. -/
class LiftHom {a b : B} (f : a ‚ü∂ b) where
  /-- A lift of a morphism to the free bicategory.
  This should only exist for "structural" morphisms. -/
  lift : of.obj a ‚ü∂ of.obj b
#align category_theory.bicategory.lift_hom Mathlib.Tactic.BicategoryCoherence.LiftHom

instance liftHomId : LiftHom (ùüô a) where lift := ùüô (of.obj a)
#align category_theory.bicategory.lift_hom_id Mathlib.Tactic.BicategoryCoherence.liftHomId

instance liftHomComp (f : a ‚ü∂ b) (g : b ‚ü∂ c) [LiftHom f] [LiftHom g] : LiftHom (f ‚â´ g) where
  lift := LiftHom.lift f ‚â´ LiftHom.lift g
#align category_theory.bicategory.lift_hom_comp Mathlib.Tactic.BicategoryCoherence.liftHomComp

instance (priority := 100) liftHomOf (f : a ‚ü∂ b) : LiftHom f where lift := of.map f
#align category_theory.bicategory.lift_hom_of Mathlib.Tactic.BicategoryCoherence.liftHomOf

/-- A typeclass carrying a choice of lift of a 2-morphism from `B` to `FreeBicategory B`. -/
class LiftHom‚ÇÇ {f g : a ‚ü∂ b} [LiftHom f] [LiftHom g] (Œ∑ : f ‚ü∂ g) where
  /-- A lift of a 2-morphism to the free bicategory.
  This should only exist for "structural" 2-morphisms. -/
  lift : LiftHom.lift f ‚ü∂ LiftHom.lift g
#align category_theory.bicategory.lift_hom‚ÇÇ Mathlib.Tactic.BicategoryCoherence.LiftHom‚ÇÇ

instance liftHom‚ÇÇId (f : a ‚ü∂ b) [LiftHom f] : LiftHom‚ÇÇ (ùüô f) where
  lift := ùüô _
#align category_theory.bicategory.lift_hom‚ÇÇ_id Mathlib.Tactic.BicategoryCoherence.liftHom‚ÇÇId

instance liftHom‚ÇÇLeftUnitorHom (f : a ‚ü∂ b) [LiftHom f] : LiftHom‚ÇÇ (Œª_ f).hom where
  lift := (Œª_ (LiftHom.lift f)).hom
#align category_theory.bicategory.lift_hom‚ÇÇ_left_unitor_hom Mathlib.Tactic.BicategoryCoherence.liftHom‚ÇÇLeftUnitorHom

instance liftHom‚ÇÇLeftUnitorInv (f : a ‚ü∂ b) [LiftHom f] : LiftHom‚ÇÇ (Œª_ f).inv where
  lift := (Œª_ (LiftHom.lift f)).inv
#align category_theory.bicategory.lift_hom‚ÇÇ_left_unitor_inv Mathlib.Tactic.BicategoryCoherence.liftHom‚ÇÇLeftUnitorInv

instance liftHom‚ÇÇRightUnitorHom (f : a ‚ü∂ b) [LiftHom f] : LiftHom‚ÇÇ (œÅ_ f).hom where
  lift := (œÅ_ (LiftHom.lift f)).hom
#align category_theory.bicategory.lift_hom‚ÇÇ_right_unitor_hom Mathlib.Tactic.BicategoryCoherence.liftHom‚ÇÇRightUnitorHom

instance liftHom‚ÇÇRightUnitorInv (f : a ‚ü∂ b) [LiftHom f] : LiftHom‚ÇÇ (œÅ_ f).inv where
  lift := (œÅ_ (LiftHom.lift f)).inv
#align category_theory.bicategory.lift_hom‚ÇÇ_right_unitor_inv Mathlib.Tactic.BicategoryCoherence.liftHom‚ÇÇRightUnitorInv

instance liftHom‚ÇÇAssociatorHom (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) [LiftHom f] [LiftHom g]
    [LiftHom h] : LiftHom‚ÇÇ (Œ±_ f g h).hom where
  lift := (Œ±_ (LiftHom.lift f) (LiftHom.lift g) (LiftHom.lift h)).hom
#align category_theory.bicategory.lift_hom‚ÇÇ_associator_hom Mathlib.Tactic.BicategoryCoherence.liftHom‚ÇÇAssociatorHom

instance liftHom‚ÇÇAssociatorInv (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) [LiftHom f] [LiftHom g]
    [LiftHom h] : LiftHom‚ÇÇ (Œ±_ f g h).inv where
  lift := (Œ±_ (LiftHom.lift f) (LiftHom.lift g) (LiftHom.lift h)).inv
#align category_theory.bicategory.lift_hom‚ÇÇ_associator_inv Mathlib.Tactic.BicategoryCoherence.liftHom‚ÇÇAssociatorInv

instance liftHom‚ÇÇComp {f g h : a ‚ü∂ b} [LiftHom f] [LiftHom g] [LiftHom h] (Œ∑ : f ‚ü∂ g) (Œ∏ : g ‚ü∂ h)
    [LiftHom‚ÇÇ Œ∑] [LiftHom‚ÇÇ Œ∏] : LiftHom‚ÇÇ (Œ∑ ‚â´ Œ∏) where
  lift := LiftHom‚ÇÇ.lift Œ∑ ‚â´ LiftHom‚ÇÇ.lift Œ∏
#align category_theory.bicategory.lift_hom‚ÇÇ_comp Mathlib.Tactic.BicategoryCoherence.liftHom‚ÇÇComp

instance liftHom‚ÇÇWhiskerLeft (f : a ‚ü∂ b) [LiftHom f] {g h : b ‚ü∂ c} (Œ∑ : g ‚ü∂ h) [LiftHom g]
    [LiftHom h] [LiftHom‚ÇÇ Œ∑] : LiftHom‚ÇÇ (f ‚óÅ Œ∑) where
  lift := LiftHom.lift f ‚óÅ LiftHom‚ÇÇ.lift Œ∑
#align category_theory.bicategory.lift_hom‚ÇÇ_whisker_left Mathlib.Tactic.BicategoryCoherence.liftHom‚ÇÇWhiskerLeft

instance liftHom‚ÇÇWhiskerRight {f g : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) [LiftHom f] [LiftHom g] [LiftHom‚ÇÇ Œ∑]
    {h : b ‚ü∂ c} [LiftHom h] : LiftHom‚ÇÇ (Œ∑ ‚ñ∑ h) where
  lift := LiftHom‚ÇÇ.lift Œ∑ ‚ñ∑ LiftHom.lift h
#align category_theory.bicategory.lift_hom‚ÇÇ_whisker_right Mathlib.Tactic.BicategoryCoherence.liftHom‚ÇÇWhiskerRight

/-- A typeclass carrying a choice of bicategorical structural isomorphism between two objects.
Used by the `‚äó‚â´` bicategorical composition operator, and the `coherence` tactic.
-/
class BicategoricalCoherence (f g : a ‚ü∂ b) [LiftHom f] [LiftHom g] where
  /-- The chosen structural isomorphism between to 1-morphisms. -/
  hom' : f ‚ü∂ g
  [isIso : IsIso hom']
#align category_theory.bicategory.bicategorical_coherence Mathlib.Tactic.BicategoryCoherence.BicategoricalCoherence


namespace BicategoricalCoherence

attribute [instance] isIso

-- porting note: the field `BicategoricalCoherence.hom'` was named `hom` in mathlib3, but in Lean4
-- `f` and `g` are not explicit parameters, so that we have to redefine `hom` as follows
/-- The chosen structural isomorphism between to 1-morphisms. -/
@[reducible]
def hom (f g : a ‚ü∂ b) [LiftHom f] [LiftHom g] [BicategoricalCoherence f g] : f ‚ü∂ g := hom'

attribute [simp] hom hom'

@[simps]
instance refl (f : a ‚ü∂ b) [LiftHom f] : BicategoricalCoherence f f :=
  ‚ü®ùüô _‚ü©
#align category_theory.bicategory.bicategorical_coherence.refl Mathlib.Tactic.BicategoryCoherence.BicategoricalCoherence.refl

@[simps]
instance whiskerLeft (f : a ‚ü∂ b) (g h : b ‚ü∂ c) [LiftHom f] [LiftHom g] [LiftHom h]
    [BicategoricalCoherence g h] : BicategoricalCoherence (f ‚â´ g) (f ‚â´ h) :=
  ‚ü®f ‚óÅ BicategoricalCoherence.hom g h‚ü©
#align category_theory.bicategory.bicategorical_coherence.whisker_left Mathlib.Tactic.BicategoryCoherence.BicategoricalCoherence.whiskerLeft

@[simps]
instance whiskerRight (f g : a ‚ü∂ b) (h : b ‚ü∂ c) [LiftHom f] [LiftHom g] [LiftHom h]
    [BicategoricalCoherence f g] : BicategoricalCoherence (f ‚â´ h) (g ‚â´ h) :=
  ‚ü®BicategoricalCoherence.hom f g ‚ñ∑ h‚ü©
#align category_theory.bicategory.bicategorical_coherence.whisker_right Mathlib.Tactic.BicategoryCoherence.BicategoricalCoherence.whiskerRight

@[simps]
instance tensorRight (f : a ‚ü∂ b) (g : b ‚ü∂ b) [LiftHom f] [LiftHom g]
    [BicategoricalCoherence (ùüô b) g] : BicategoricalCoherence f (f ‚â´ g) :=
  ‚ü®(œÅ_ f).inv ‚â´ f ‚óÅ BicategoricalCoherence.hom (ùüô b) g‚ü©
#align category_theory.bicategory.bicategorical_coherence.tensor_right Mathlib.Tactic.BicategoryCoherence.BicategoricalCoherence.tensorRight

@[simps]
instance tensorRight' (f : a ‚ü∂ b) (g : b ‚ü∂ b) [LiftHom f] [LiftHom g]
    [BicategoricalCoherence g (ùüô b)] : BicategoricalCoherence (f ‚â´ g) f :=
  ‚ü®f ‚óÅ BicategoricalCoherence.hom g (ùüô b) ‚â´ (œÅ_ f).hom‚ü©
#align category_theory.bicategory.bicategorical_coherence.tensor_right' Mathlib.Tactic.BicategoryCoherence.BicategoricalCoherence.tensorRight'

@[simps]
instance left (f g : a ‚ü∂ b) [LiftHom f] [LiftHom g] [BicategoricalCoherence f g] :
    BicategoricalCoherence (ùüô a ‚â´ f) g :=
  ‚ü®(Œª_ f).hom ‚â´ BicategoricalCoherence.hom f g‚ü©
#align category_theory.bicategory.bicategorical_coherence.left Mathlib.Tactic.BicategoryCoherence.BicategoricalCoherence.left

@[simps]
instance left' (f g : a ‚ü∂ b) [LiftHom f] [LiftHom g] [BicategoricalCoherence f g] :
    BicategoricalCoherence f (ùüô a ‚â´ g) :=
  ‚ü®BicategoricalCoherence.hom f g ‚â´ (Œª_ g).inv‚ü©
#align category_theory.bicategory.bicategorical_coherence.left' Mathlib.Tactic.BicategoryCoherence.BicategoricalCoherence.left'

@[simps]
instance right (f g : a ‚ü∂ b) [LiftHom f] [LiftHom g] [BicategoricalCoherence f g] :
    BicategoricalCoherence (f ‚â´ ùüô b) g :=
  ‚ü®(œÅ_ f).hom ‚â´ BicategoricalCoherence.hom f g‚ü©
#align category_theory.bicategory.bicategorical_coherence.right Mathlib.Tactic.BicategoryCoherence.BicategoricalCoherence.right

@[simps]
instance right' (f g : a ‚ü∂ b) [LiftHom f] [LiftHom g] [BicategoricalCoherence f g] :
    BicategoricalCoherence f (g ‚â´ ùüô b) :=
  ‚ü®BicategoricalCoherence.hom f g ‚â´ (œÅ_ g).inv‚ü©
#align category_theory.bicategory.bicategorical_coherence.right' Mathlib.Tactic.BicategoryCoherence.BicategoricalCoherence.right'

@[simps]
instance assoc (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) (i : a ‚ü∂ d) [LiftHom f] [LiftHom g] [LiftHom h]
    [LiftHom i] [BicategoricalCoherence (f ‚â´ g ‚â´ h) i] :
    BicategoricalCoherence ((f ‚â´ g) ‚â´ h) i :=
  ‚ü®(Œ±_ f g h).hom ‚â´ BicategoricalCoherence.hom (f ‚â´ g ‚â´ h) i‚ü©
#align category_theory.bicategory.bicategorical_coherence.assoc Mathlib.Tactic.BicategoryCoherence.BicategoricalCoherence.assoc

@[simps]
instance assoc' (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) (i : a ‚ü∂ d) [LiftHom f] [LiftHom g] [LiftHom h]
    [LiftHom i] [BicategoricalCoherence i (f ‚â´ g ‚â´ h)] :
    BicategoricalCoherence i ((f ‚â´ g) ‚â´ h) :=
  ‚ü®BicategoricalCoherence.hom i (f ‚â´ g ‚â´ h) ‚â´ (Œ±_ f g h).inv‚ü©
#align category_theory.bicategory.bicategorical_coherence.assoc' Mathlib.Tactic.BicategoryCoherence.BicategoricalCoherence.assoc'

end BicategoricalCoherence

/-- Construct an isomorphism between two objects in a bicategorical category
out of unitors and associators. -/
def bicategoricalIso (f g : a ‚ü∂ b) [LiftHom f] [LiftHom g] [BicategoricalCoherence f g] : f ‚âÖ g :=
  asIso (BicategoricalCoherence.hom f g)
#align category_theory.bicategory.bicategorical_iso Mathlib.Tactic.BicategoryCoherence.bicategoricalIso

/-- Compose two morphisms in a bicategorical category,
inserting unitors and associators between as necessary. -/
def bicategoricalComp {f g h i : a ‚ü∂ b} [LiftHom g] [LiftHom h] [BicategoricalCoherence g h]
    (Œ∑ : f ‚ü∂ g) (Œ∏ : h ‚ü∂ i) : f ‚ü∂ i :=
  Œ∑ ‚â´ BicategoricalCoherence.hom g h ‚â´ Œ∏
#align category_theory.bicategory.bicategorical_comp Mathlib.Tactic.BicategoryCoherence.bicategoricalComp

-- type as \ot \gg
@[inherit_doc Mathlib.Tactic.BicategoryCoherence.bicategoricalComp]
scoped[CategoryTheory.Bicategory] infixr:80 " ‚äó‚â´ " =>
  Mathlib.Tactic.BicategoryCoherence.bicategoricalComp

/-- Compose two isomorphisms in a bicategorical category,
inserting unitors and associators between as necessary. -/
def bicategoricalIsoComp {f g h i : a ‚ü∂ b} [LiftHom g] [LiftHom h] [BicategoricalCoherence g h]
    (Œ∑ : f ‚âÖ g) (Œ∏ : h ‚âÖ i) : f ‚âÖ i :=
  Œ∑ ‚â™‚â´ asIso (BicategoricalCoherence.hom g h) ‚â™‚â´ Œ∏
#align category_theory.bicategory.bicategorical_iso_comp Mathlib.Tactic.BicategoryCoherence.bicategoricalIsoComp

-- type as \ll \ot \gg
@[inherit_doc Mathlib.Tactic.BicategoryCoherence.bicategoricalIsoComp]
scoped[CategoryTheory.Bicategory] infixr:80 " ‚â™‚äó‚â´ " =>
  Mathlib.Tactic.BicategoryCoherence.bicategoricalIsoComp

example {f' : a ‚ü∂ d} {f : a ‚ü∂ b} {g : b ‚ü∂ c} {h : c ‚ü∂ d} {h' : a ‚ü∂ d} (Œ∑ : f' ‚ü∂ f ‚â´ g ‚â´ h)
    (Œ∏ : (f ‚â´ g) ‚â´ h ‚ü∂ h') : f' ‚ü∂ h' :=
    Œ∑ ‚äó‚â´ Œ∏

-- To automatically insert unitors/associators at the beginning or end,
-- you can use `Œ∑ ‚äó‚â´ ùüô _`
example {f' : a ‚ü∂ d} {f : a ‚ü∂ b} {g : b ‚ü∂ c} {h : c ‚ü∂ d} (Œ∑ : f' ‚ü∂ (f ‚â´ g) ‚â´ h) :
    f' ‚ü∂ f ‚â´ g ‚â´ h :=
  Œ∑ ‚äó‚â´ ùüô _

@[simp]
theorem bicategoricalComp_refl {f g h : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) (Œ∏ : g ‚ü∂ h) : Œ∑ ‚äó‚â´ Œ∏ = Œ∑ ‚â´ Œ∏ := by
  dsimp [bicategoricalComp]; simp
#align category_theory.bicategory.bicategorical_comp_refl Mathlib.Tactic.BicategoryCoherence.bicategoricalComp_refl

open Lean Elab Tactic Meta

/-- Helper function for throwing exceptions. -/
def exception (g : MVarId) (msg : MessageData) : MetaM Œ± :=
  throwTacticEx `bicategorical_coherence g msg

/-- Helper function for throwing exceptions with respect to the main goal. -/
def exception' (msg : MessageData) : TacticM Unit := do
  try
    liftMetaTactic (exception (msg := msg))
  catch _ =>
    -- There might not be any goals
    throwError msg

set_option quotPrecheck false in
/-- Auxiliary definition for `bicategorical_coherence`. -/
-- We could construct this expression directly without using `elabTerm`,
-- but it would require preparing many implicit arguments by hand.
def mkLiftMap‚ÇÇLiftExpr (e : Expr) : TermElabM Expr := do
  Term.elabTerm
    (‚Üê ``((FreeBicategory.lift (Prefunctor.id _)).map‚ÇÇ (LiftHom‚ÇÇ.lift $(‚Üê Term.exprToSyntax e))))
    none

/-- Coherence tactic for bicategories. -/
def bicategory_coherence (g : MVarId) : TermElabM Unit := g.withContext do
  withOptions (fun opts => synthInstance.maxSize.set opts
    (max 256 (synthInstance.maxSize.get opts))) do
  -- TODO: is this `dsimp only` step necessary? It doesn't appear to be in the tests below.
  let (ty, _) ‚Üê dsimp (‚Üê g.getType) (‚Üê Simp.Context.ofNames [] true)
  let some (_, lhs, rhs) := (‚Üê whnfR ty).eq? | exception g "Not an equation of morphisms."
  let lift_lhs ‚Üê mkLiftMap‚ÇÇLiftExpr lhs
  let lift_rhs ‚Üê mkLiftMap‚ÇÇLiftExpr rhs
  -- This new equation is defeq to the original by assumption
  -- on the `LiftHom` instances.
  let g‚ÇÅ ‚Üê g.change (‚Üê mkEq lift_lhs lift_rhs)
  let [g‚ÇÇ] ‚Üê g‚ÇÅ.applyConst ``congrArg
    | exception g "congrArg failed in coherence"
  let [] ‚Üê g‚ÇÇ.applyConst ``Subsingleton.elim
    | exception g "This shouldn't happen; Subsingleton.elim does not create goals."

/-- Coherence tactic for bicategories.
Use `pure_coherence` instead, which is a frontend to this one. -/
elab "bicategory_coherence" : tactic => do bicategory_coherence (‚Üê getMainGoal)

open Lean.Parser.Tactic

/--
Simp lemmas for rewriting a 2-morphism into a normal form.
-/
syntax (name := whisker_simps) "whisker_simps" (config)? : tactic

@[inherit_doc whisker_simps]
elab_rules : tactic
| `(tactic| whisker_simps $[$cfg]?) => do
  evalTactic (‚Üê `(tactic|
    simp $[$cfg]? only [Category.assoc,
      Bicategory.comp_whiskerLeft, Bicategory.id_whiskerLeft,
      Bicategory.whiskerRight_comp, Bicategory.whiskerRight_id,
      Bicategory.whiskerLeft_comp, Bicategory.whiskerLeft_id,
      Bicategory.comp_whiskerRight, Bicategory.id_whiskerRight, Bicategory.whisker_assoc]
    ))

-- We have unused typeclass arguments here.
-- They are intentional, to ensure that `simp only [assoc_liftHom‚ÇÇ]` only left associates
-- bicategorical structural morphisms.
/-- Auxiliary simp lemma for the `coherence` tactic:
this move brackets to the left in order to expose a maximal prefix
built out of unitors and associators.
-/
@[nolint unusedArguments]
theorem assoc_liftHom‚ÇÇ {f g h i : a ‚ü∂ b} [LiftHom f] [LiftHom g] [LiftHom h]
    (Œ∑ : f ‚ü∂ g) (Œ∏ : g ‚ü∂ h) (Œπ : h ‚ü∂ i) [LiftHom‚ÇÇ Œ∑] [LiftHom‚ÇÇ Œ∏] : Œ∑ ‚â´ Œ∏ ‚â´ Œπ = (Œ∑ ‚â´ Œ∏) ‚â´ Œπ :=
  (Category.assoc _ _ _).symm
#align tactic.bicategory.coherence.assoc_lift_hom‚ÇÇ Mathlib.Tactic.BicategoryCoherence.assoc_liftHom‚ÇÇ
