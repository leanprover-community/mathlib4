/-
Copyright (c) 2024 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathlib.Tactic.CategoryTheory.Coherence.Datatypes
import Mathlib.Tactic.CategoryTheory.BicategoricalComp

/-!
# Expressions for bicategories

This file converts lean expressions representing 2-morphisms in bicategories into `Mor‚ÇÇIso`
or `Mor` terms. The converted expressions are used in the coherence tactics and the string diagram
widgets.

-/

open Lean Meta Elab Qq
open CategoryTheory Mathlib.Tactic.BicategoryLike Bicategory

namespace Mathlib.Tactic.Bicategory

/-- The domain of a morphism. -/
def srcExpr (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) => return f
  | _ => throwError m!"{Œ∑} is not a morphism"

/-- The codomain of a morphism. -/
def tgtExpr (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, _, g]) => return g
  | _ => throwError m!"{Œ∑} is not a morphism"

/-- The domain of an isomorphism. -/
def srcExprOfIso (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Iso, #[_, _, f, _]) => return f
  | _ => throwError m!"{Œ∑} is not a morphism"

/-- The codomain of an isomorphism. -/
def tgtExprOfIso (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Iso, #[_, _, _, g]) => return g
  | _ => throwError m!"{Œ∑} is not a morphism"

initialize registerTraceClass `bicategory

/-- The context for evaluating expressions. -/
structure Context where
  /-- The level for 2-morphisms. -/
  level‚ÇÇ : Level
  /-- The level for 1-morphisms. -/
  level‚ÇÅ : Level
  /-- The level for objects. -/
  level‚ÇÄ : Level
  /-- The expression for the underlying category. -/
  B : Q(Type level‚ÇÄ)
  /-- The bicategory instance. -/
  instBicategory : Q(Bicategory.{level‚ÇÇ, level‚ÇÅ} $B)

/-- Populate a `context` object for evaluating `e`. -/
def mkContext? (e : Expr) : MetaM (Option Context) := do
  let e ‚Üê instantiateMVars e
  let type ‚Üê instantiateMVars <| ‚Üê inferType e
  match (‚Üê whnfR (‚Üê inferType e)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) =>
    let fType ‚Üê instantiateMVars <| ‚Üê inferType f
    match (‚Üê whnfR fType).getAppFnArgs with
    | (``Quiver.Hom, #[_, _, a, _]) =>
      let B ‚Üê inferType a
      let .succ level‚ÇÄ ‚Üê getLevel B | return none
      let .succ level‚ÇÅ ‚Üê getLevel fType | return none
      let .succ level‚ÇÇ ‚Üê getLevel type | return none
      let .some instBicategory ‚Üê synthInstance?
        (mkAppN (.const ``Bicategory [level‚ÇÇ, level‚ÇÅ, level‚ÇÄ]) #[B]) | return none
      return some ‚ü®level‚ÇÇ, level‚ÇÅ, level‚ÇÄ, B, instBicategory‚ü©
    | _ => return none
  | _ => return none

instance : BicategoryLike.Context Bicategory.Context where
  mkContext? := Bicategory.mkContext?

/-- The monad for the normalization of 2-morphisms. -/
abbrev BicategoryM := CoherenceM Context

instance : MonadMor‚ÇÅ BicategoryM where
  id‚ÇÅM a := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    have a_e : Q($ctx.B) := a.e
    return .id q(ùüô $a_e) a
  comp‚ÇÅM f g := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have c : Q($ctx.B) := g.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($b ‚ü∂ $c) := g.e
    return .comp q($f_e ‚â´ $g_e) f g

section

universe w v u
variable {B : Type u} [Bicategory.{w, v} B] {a b c : B}

theorem structuralIso_inv {f g : a ‚ü∂ b} (Œ∑ : f ‚âÖ g) :
    Œ∑.symm.hom = Œ∑.inv := by
  simp only [Iso.symm_hom]

theorem structuralIsoOfExpr_comp {f g h : a ‚ü∂ b}
    (Œ∑ : f ‚ü∂ g) (Œ∑' : f ‚âÖ g) (ih_Œ∑ : Œ∑'.hom = Œ∑)
    (Œ∏ : g ‚ü∂ h) (Œ∏' : g ‚âÖ h) (ih_Œ∏ : Œ∏'.hom = Œ∏) :
    (Œ∑' ‚â™‚â´ Œ∏').hom  = Œ∑ ‚â´ Œ∏ := by
  simp [ih_Œ∑, ih_Œ∏]

theorem structuralIsoOfExpr_whiskerLeft (f : a ‚ü∂ b) {g h : b ‚ü∂ c}
    (Œ∑ : g ‚ü∂ h) (Œ∑' : g ‚âÖ h) (ih_Œ∑ : Œ∑'.hom = Œ∑)  :
    (whiskerLeftIso f Œ∑').hom = f ‚óÅ Œ∑ := by
  simp [ih_Œ∑]

theorem structuralIsoOfExpr_whiskerRight {f g : a ‚ü∂ b} (h : b ‚ü∂ c)
    (Œ∑ : f ‚ü∂ g) (Œ∑' : f ‚âÖ g) (ih_Œ∑ : Œ∑'.hom = Œ∑)  :
    (whiskerRightIso Œ∑' h).hom = Œ∑ ‚ñ∑ h := by
  simp [ih_Œ∑]

theorem StructuralOfExpr_bicategoricalComp {f g h i : a ‚ü∂ b} [BicategoricalCoherence g h]
    (Œ∑ : f ‚ü∂ g) (Œ∑' : f ‚âÖ g) (ih_Œ∑ : Œ∑'.hom = Œ∑) (Œ∏ : h ‚ü∂ i) (Œ∏' : h ‚âÖ i) (ih_Œ∏ : Œ∏'.hom = Œ∏) :
    (bicategoricalIsoComp Œ∑' Œ∏').hom = Œ∑ ‚äó‚â´ Œ∏ := by
  simp [ih_Œ∑, ih_Œ∏, bicategoricalIsoComp, bicategoricalComp]

end

open MonadMor‚ÇÅ

instance : MonadMor‚ÇÇIso BicategoryM where
  associatorM f g h := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have c : Q($ctx.B) := g.tgt.e
    have d : Q($ctx.B) := h.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($b ‚ü∂ $c) := g.e
    have h_e : Q($c ‚ü∂ $d) := h.e
    return .associator q(Œ±_ $f_e $g_e $h_e) f g h
  leftUnitorM f := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    return .leftUnitor q(Œª_ $f_e) f
  rightUnitorM f := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    return .rightUnitor q(œÅ_ $f_e) f
  id‚ÇÇM f := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    return .id q(Iso.refl $f_e) f
  coherenceHomM f g inst := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($a ‚ü∂ $b) := g.e
    have inst : Q(BicategoricalCoherence $f_e $g_e) := inst
    match (‚Üê whnfI inst).getAppFnArgs with
    | (``BicategoricalCoherence.mk, #[_, _, _, _, _, _, Œ±]) =>
      let e : Q($f_e ‚âÖ $g_e) := q(BicategoricalCoherence.iso)
      return ‚ü®e, f, g, inst, Œ±‚ü©
    | _ => throwError m!"failed to unfold {inst}"
  comp‚ÇÇM Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let h ‚Üê Œ∏.tgtM
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($a ‚ü∂ $b) := g.e
    have h_e : Q($a ‚ü∂ $b) := h.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    have Œ∏_e : Q($g_e ‚âÖ $h_e) := Œ∏.e
    return .comp q($Œ∑_e ‚â™‚â´ $Œ∏_e) f g h Œ∑ Œ∏
  whiskerLeftM f Œ∑ := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let g ‚Üê Œ∑.srcM
    let h ‚Üê Œ∑.tgtM
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have c : Q($ctx.B) := g.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($b ‚ü∂ $c) := g.e
    have h_e : Q($b ‚ü∂ $c) := h.e
    have Œ∑_e : Q($g_e ‚âÖ $h_e) := Œ∑.e
    return .whiskerLeft q(whiskerLeftIso $f_e $Œ∑_e) f g h Œ∑
  whiskerRightM Œ∑ h := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have c : Q($ctx.B) := h.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($a ‚ü∂ $b) := g.e
    have h_e : Q($b ‚ü∂ $c) := h.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    return .whiskerRight q(whiskerRightIso $Œ∑_e $h_e) f g Œ∑ h
  horizontalCompM _ _ := throwError "horizontal composition is not implemented"
  symmM Œ∑ := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($a ‚ü∂ $b) := g.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    return .inv q(Iso.symm $Œ∑_e) f g Œ∑
  coherenceCompM Œ± Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let h ‚Üê Œ∏.srcM
    let i ‚Üê Œ∏.tgtM
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($a ‚ü∂ $b) := g.e
    have h_e : Q($a ‚ü∂ $b) := h.e
    have i_e : Q($a ‚ü∂ $b) := i.e
    have _inst : Q(BicategoricalCoherence $g_e $h_e) := Œ±.inst
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    have Œ∏_e : Q($h_e ‚âÖ $i_e) := Œ∏.e
    return .coherenceComp q($Œ∑_e ‚â™‚äó‚â´ $Œ∏_e) f g h i Œ± Œ∑ Œ∏

open MonadMor‚ÇÇIso

instance : MonadMor‚ÇÇ BicategoryM where
  homM Œ∑ := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($a ‚ü∂ $b) := g.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    let e : Q($f_e ‚ü∂ $g_e) := q(Iso.hom $Œ∑_e)
    have eq : Q(Iso.hom $Œ∑_e = $e) := q(rfl)
    return .isoHom q(Iso.hom $Œ∑_e) ‚ü®Œ∑, eq‚ü© Œ∑
  atomHomM Œ∑ := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let f := Œ∑.src
    let g := Œ∑.tgt
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($a ‚ü∂ $b) := g.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    return .mk q(Iso.hom $Œ∑_e) f g
  invM Œ∑ := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($a ‚ü∂ $b) := g.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    let e : Q($g_e ‚ü∂ $f_e) := q(Iso.inv $Œ∑_e)
    let Œ∑_inv ‚Üê symmM Œ∑
    let eq : Q(Iso.inv $Œ∑_e = $e) := q(Iso.symm_hom $Œ∑_e)
    return .isoInv e ‚ü®Œ∑_inv, eq‚ü© Œ∑
  atomInvM Œ∑ := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let f := Œ∑.src
    let g := Œ∑.tgt
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($a ‚ü∂ $b) := g.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    return .mk q(Iso.inv $Œ∑_e) g f
  id‚ÇÇM f := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    let e : Q($f_e ‚ü∂ $f_e) := q(ùüô $f_e)
    let eq : Q(ùüô $f_e = $e) := q(Iso.refl_hom $f_e)
    return .id e ‚ü®.structuralAtom <| ‚Üê id‚ÇÇM f, eq‚ü© f
  comp‚ÇÇM Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let h ‚Üê Œ∏.tgtM
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($a ‚ü∂ $b) := g.e
    have h_e : Q($a ‚ü∂ $b) := h.e
    have Œ∑_e : Q($f_e ‚ü∂ $g_e) := Œ∑.e
    have Œ∏_e : Q($g_e ‚ü∂ $h_e) := Œ∏.e
    let iso_lift? ‚Üê (match (Œ∑.isoLift?, Œ∏.isoLift?) with
      | (some Œ∑_iso, some Œ∏_iso) =>
        have Œ∑_iso_e : Q($f_e ‚âÖ $g_e) := Œ∑_iso.e.e
        have Œ∏_iso_e : Q($g_e ‚âÖ $h_e) := Œ∏_iso.e.e
        have Œ∑_iso_eq : Q(Iso.hom $Œ∑_iso_e = $Œ∑_e) := Œ∑_iso.eq
        have Œ∏_iso_eq : Q(Iso.hom $Œ∏_iso_e = $Œ∏_e) := Œ∏_iso.eq
        let eq := q(structuralIsoOfExpr_comp _ _ $Œ∑_iso_eq _ _ $Œ∏_iso_eq)
        return .some ‚ü®‚Üê comp‚ÇÇM Œ∑_iso.e Œ∏_iso.e, eq‚ü©
      | _ => return none)
    let e : Q($f_e ‚ü∂ $h_e) := q($Œ∑_e ‚â´ $Œ∏_e)
    return .comp e iso_lift? f g h Œ∑ Œ∏
  whiskerLeftM f Œ∑ := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let g ‚Üê Œ∑.srcM
    let h ‚Üê Œ∑.tgtM
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have c : Q($ctx.B) := g.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($b ‚ü∂ $c) := g.e
    have h_e : Q($b ‚ü∂ $c) := h.e
    have Œ∑_e : Q($g_e ‚ü∂ $h_e) := Œ∑.e
    let iso_lift? ‚Üê (match Œ∑.isoLift? with
      | some Œ∑_iso => do
        have Œ∑_iso_e : Q($g_e ‚âÖ $h_e) := Œ∑_iso.e.e
        have Œ∑_iso_eq : Q(Iso.hom $Œ∑_iso_e = $Œ∑_e) := Œ∑_iso.eq
        let eq := q(structuralIsoOfExpr_whiskerLeft $f_e _ _ $Œ∑_iso_eq)
        return .some ‚ü®‚Üê whiskerLeftM f Œ∑_iso.e, eq‚ü©
      | _ => return none)
    let e : Q($f_e ‚â´ $g_e ‚ü∂ $f_e ‚â´ $h_e) := q($f_e ‚óÅ $Œ∑_e)
    return .whiskerLeft e iso_lift? f g h Œ∑
  whiskerRightM Œ∑ h := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := h.src.e
    have c : Q($ctx.B) := h.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($a ‚ü∂ $b) := g.e
    have h_e : Q($b ‚ü∂ $c) := h.e
    have Œ∑_e : Q($f_e ‚ü∂ $g_e) := Œ∑.e
    let iso_lift? ‚Üê (match Œ∑.isoLift? with
      | some Œ∑_iso => do
        have Œ∑_iso_e : Q($f_e ‚âÖ $g_e) := Œ∑_iso.e.e
        have Œ∑_iso_eq : Q(Iso.hom $Œ∑_iso_e = $Œ∑_e) := Œ∑_iso.eq
        let eq := q(structuralIsoOfExpr_whiskerRight $h_e _ _ $Œ∑_iso_eq)
        return .some ‚ü®‚Üê whiskerRightM Œ∑_iso.e h, eq‚ü©
      | _ => return none)
    let e : Q($f_e ‚â´ $h_e ‚ü∂ $g_e ‚â´ $h_e) := q($Œ∑_e ‚ñ∑ $h_e)
    return .whiskerRight e iso_lift? f g Œ∑ h
  horizontalCompM _ _ := throwError "horizontal composition is not implemented"
  coherenceCompM Œ± Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let _bicat := ctx.instBicategory
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let h ‚Üê Œ∏.srcM
    let i ‚Üê Œ∏.tgtM
    have a : Q($ctx.B) := f.src.e
    have b : Q($ctx.B) := f.tgt.e
    have f_e : Q($a ‚ü∂ $b) := f.e
    have g_e : Q($a ‚ü∂ $b) := g.e
    have h_e : Q($a ‚ü∂ $b) := h.e
    have i_e : Q($a ‚ü∂ $b) := i.e
    have _inst : Q(BicategoricalCoherence $g_e $h_e) := Œ±.inst
    have Œ∑_e : Q($f_e ‚ü∂ $g_e) := Œ∑.e
    have Œ∏_e : Q($h_e ‚ü∂ $i_e) := Œ∏.e
    let iso_lift? ‚Üê (match (Œ∑.isoLift?, Œ∏.isoLift?) with
      | (some Œ∑_iso, some Œ∏_iso) => do
        have Œ∑_iso_e : Q($f_e ‚âÖ $g_e) := Œ∑_iso.e.e
        have Œ∏_iso_e : Q($h_e ‚âÖ $i_e) := Œ∏_iso.e.e
        have Œ∑_iso_eq : Q(Iso.hom $Œ∑_iso_e = $Œ∑_e) := Œ∑_iso.eq
        have Œ∏_iso_eq : Q(Iso.hom $Œ∏_iso_e = $Œ∏_e) := Œ∏_iso.eq
        let eq := q(StructuralOfExpr_bicategoricalComp _ _ $Œ∑_iso_eq _ _ $Œ∏_iso_eq)
        return .some ‚ü®‚Üê coherenceCompM Œ± Œ∑_iso.e Œ∏_iso.e, eq‚ü©
      | _ => return none)
    let e : Q($f_e ‚ü∂ $i_e) := q($Œ∑_e ‚äó‚â´ $Œ∏_e)
    return .coherenceComp e iso_lift? f g h i Œ± Œ∑ Œ∏

/-- Check that `e` is definitionally equal to `ùüô a`. -/
def id‚ÇÅ? (e : Expr) : BicategoryM (Option Obj) := do
  let ctx ‚Üê read
  let _bicat := ctx.instBicategory
  let a : Q($ctx.B) ‚Üê mkFreshExprMVar ctx.B
  if ‚Üê withDefault <| isDefEq e q(ùüô $a) then
    return .some ‚ü®‚Üê instantiateMVars a‚ü©
  else
    return none

/-- Return `(f, g)` if `e` is definitionally equal to `f ‚â´ g`. -/
def comp? (e : Expr) : BicategoryM (Option (Mor‚ÇÅ √ó Mor‚ÇÅ)) := do
  let ctx ‚Üê read
  let _bicat := ctx.instBicategory
  let a ‚Üê mkFreshExprMVarQ ctx.B
  let b ‚Üê mkFreshExprMVarQ ctx.B
  let c ‚Üê mkFreshExprMVarQ ctx.B
  let f ‚Üê mkFreshExprMVarQ q($a ‚ü∂ $b)
  let g ‚Üê mkFreshExprMVarQ q($b ‚ü∂ $c)
  if ‚Üê withDefault <| isDefEq e q($f ‚â´ $g) then
    let a ‚Üê instantiateMVars a
    let b ‚Üê instantiateMVars b
    let c ‚Üê instantiateMVars c
    let f ‚Üê instantiateMVars f
    let g ‚Üê instantiateMVars g
    return some ((.of ‚ü®f, ‚ü®a‚ü©, ‚ü®b‚ü©‚ü©), .of ‚ü®g, ‚ü®b‚ü©, ‚ü®c‚ü©‚ü©)
  else
    return none

/-- Construct a `Mor‚ÇÅ` expression from a Lean expression. -/
partial def mor‚ÇÅOfExpr (e : Expr) : BicategoryM Mor‚ÇÅ := do
  if let some f := (‚Üê get).cache.find? e then
    return f
  let f ‚Üê
    if let some a ‚Üê id‚ÇÅ? e then
      MonadMor‚ÇÅ.id‚ÇÅM a
    else if let some (f, g) ‚Üê comp? e then
      MonadMor‚ÇÅ.comp‚ÇÅM (‚Üê mor‚ÇÅOfExpr f.e) (‚Üê mor‚ÇÅOfExpr g.e)
    else
      return Mor‚ÇÅ.of ‚ü®e, ‚ü®‚Üê srcExpr e‚ü©, ‚ü® ‚Üê tgtExpr e‚ü©‚ü©
  modify fun s => { s with cache := s.cache.insert e f }
  return f

instance : MkMor‚ÇÅ BicategoryM where
  ofExpr := mor‚ÇÅOfExpr

/-- Construct a `Mor‚ÇÇIso` term from a Lean expression. -/
partial def Mor‚ÇÇIsoOfExpr (e : Expr) : BicategoryM Mor‚ÇÇIso := do
  match (‚Üê whnfR e).getAppFnArgs with
  | (``Bicategory.associator, #[_, _, _, _, _, _, f, g, h]) =>
    associatorM' (‚Üê MkMor‚ÇÅ.ofExpr f) (‚Üê MkMor‚ÇÅ.ofExpr g) (‚Üê MkMor‚ÇÅ.ofExpr h)
  | (``Bicategory.leftUnitor, #[_, _, _, _, f]) =>
    leftUnitorM' (‚Üê MkMor‚ÇÅ.ofExpr f)
  | (``Bicategory.rightUnitor, #[_, _, _, _, f]) =>
    rightUnitorM' (‚Üê MkMor‚ÇÅ.ofExpr f)
  | (``Iso.refl, #[_, _, f]) =>
    id‚ÇÇM' (‚Üê MkMor‚ÇÅ.ofExpr f)
  | (``Iso.symm, #[_, _, _, _, Œ∑]) =>
    symmM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑)
  | (``Iso.trans, #[_, _, _, _, _, Œ∑, Œ∏]) =>
    comp‚ÇÇM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑) (‚Üê Mor‚ÇÇIsoOfExpr Œ∏)
  | (``Bicategory.whiskerLeftIso, #[_, _, _, _, _, f, _, _, Œ∑]) =>
    whiskerLeftM (‚Üê MkMor‚ÇÅ.ofExpr f) (‚Üê Mor‚ÇÇIsoOfExpr Œ∑)
  | (``Bicategory.whiskerRightIso, #[_, _, _, _, _, _, _, Œ∑, h]) =>
    whiskerRightM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑) (‚Üê MkMor‚ÇÅ.ofExpr h)
  | (``bicategoricalIsoComp, #[_, _, _, _, _, g, h, _, inst, Œ∑, Œ∏]) =>
    let Œ± ‚Üê coherenceHomM (‚Üê MkMor‚ÇÅ.ofExpr g) (‚Üê MkMor‚ÇÅ.ofExpr h) inst
    coherenceCompM Œ± (‚Üê Mor‚ÇÇIsoOfExpr Œ∑) (‚Üê Mor‚ÇÇIsoOfExpr Œ∏)
  | (``BicategoricalCoherence.iso, #[_, _, _, _, f, g, inst]) =>
    coherenceHomM' (‚Üê MkMor‚ÇÅ.ofExpr f) (‚Üê MkMor‚ÇÅ.ofExpr g) inst
  | _ =>
    return .of ‚ü®e, ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê srcExprOfIso e), ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê tgtExprOfIso e)‚ü©

open MonadMor‚ÇÇ in
/-- Construct a `Mor‚ÇÇ` term from a Lean expression. -/
partial def Mor‚ÇÇOfExpr (e : Expr) : BicategoryM Mor‚ÇÇ := do
  match ‚Üê whnfR e with
  -- whnfR version of `Iso.hom Œ∑`
  | .proj ``Iso 0 Œ∑ => homM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑)
  -- whnfR version of `Iso.inv Œ∑`
  | .proj ``Iso 1 Œ∑ => invM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑)
  | .app .. => match (‚Üê whnfR e).getAppFnArgs with
    | (``CategoryStruct.id, #[_, _, f]) => id‚ÇÇM (‚Üê MkMor‚ÇÅ.ofExpr f)
    | (``CategoryStruct.comp, #[_, _, _, _, _, Œ∑, Œ∏]) =>
      comp‚ÇÇM (‚Üê Mor‚ÇÇOfExpr Œ∑) (‚Üê Mor‚ÇÇOfExpr Œ∏)
    | (``Bicategory.whiskerLeft, #[_, _, _, _, _, f, _, _, Œ∑]) =>
      whiskerLeftM (‚Üê MkMor‚ÇÅ.ofExpr f) (‚Üê Mor‚ÇÇOfExpr Œ∑)
    | (``Bicategory.whiskerRight, #[_, _, _, _, _, _, _, Œ∑, h]) =>
      whiskerRightM (‚Üê Mor‚ÇÇOfExpr Œ∑) (‚Üê MkMor‚ÇÅ.ofExpr h)
    | (``bicategoricalComp, #[_, _, _, _, _, g, h, _, inst, Œ∑, Œ∏]) =>
      let Œ± ‚Üê coherenceHomM (‚Üê MkMor‚ÇÅ.ofExpr g) (‚Üê MkMor‚ÇÅ.ofExpr h) inst
      coherenceCompM Œ± (‚Üê Mor‚ÇÇOfExpr Œ∑) (‚Üê Mor‚ÇÇOfExpr Œ∏)
    | _ => return .of ‚ü®e, ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê srcExpr e), ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê tgtExpr e)‚ü©
  | _ =>
    return .of ‚ü®e, ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê srcExpr e), ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê tgtExpr e)‚ü©

instance : BicategoryLike.MkMor‚ÇÇ BicategoryM where
  ofExpr := Mor‚ÇÇOfExpr

instance : MonadCoherehnceHom BicategoryM where
  unfoldM Œ± := Mor‚ÇÇIsoOfExpr Œ±.unfold

end Mathlib.Tactic.Bicategory
