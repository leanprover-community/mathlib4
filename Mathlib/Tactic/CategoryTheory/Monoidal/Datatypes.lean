/-
Copyright (c) 2024 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathlib.Tactic.CategoryTheory.Coherence.Datatypes
import Mathlib.Tactic.CategoryTheory.MonoidalComp

/-!
# Expressions for monoidal categories

This file converts lean expressions representing morphisms in monoidal categories into `Mor‚ÇÇIso`
or `Mor` terms. The converted expressions are used in the coherence tactics and the string diagram
widgets.

-/

open Lean Meta Elab Qq
open CategoryTheory Mathlib.Tactic.BicategoryLike MonoidalCategory

namespace Mathlib.Tactic.Monoidal

/-- The domain of a morphism. -/
def srcExpr (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) => return f
  | _ => throwError m!"{Œ∑} is not a morphism"

/-- The codomain of a morphism. -/
def tgtExpr (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, _, g]) => return g
  | _ => throwError m!"{Œ∑} is not a morphism"

/-- The domain of an isomorphism. -/
def srcExprOfIso (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Iso, #[_, _, f, _]) => return f
  | _ => throwError m!"{Œ∑} is not a morphism"

/-- The codomain of an isomorphism. -/
def tgtExprOfIso (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Iso, #[_, _, _, g]) => return g
  | _ => throwError m!"{Œ∑} is not a morphism"

initialize registerTraceClass `monoidal

/-- The context for evaluating expressions. -/
structure Context where
  /-- The level for morphisms. -/
  level‚ÇÇ : Level
  /-- The level for objects. -/
  level‚ÇÅ : Level
  /-- The expression for the underlying category. -/
  C : Q(Type level‚ÇÅ)
  /-- The category instance. -/
  instCat : Q(Category.{level‚ÇÇ, level‚ÇÅ} $C)
  /-- The monoidal category instance. -/
  instMonoidal? : Option Q(MonoidalCategory.{level‚ÇÇ, level‚ÇÅ} $C)

/-- Populate a `context` object for evaluating `e`. -/
def mkContext? (e : Expr) : MetaM (Option Context) := do
  let e ‚Üê instantiateMVars e
  let type ‚Üê instantiateMVars <| ‚Üê inferType e
  match (‚Üê whnfR type).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) =>
    let C ‚Üê instantiateMVars <| ‚Üê inferType f
    let .succ level‚ÇÅ ‚Üê getLevel C | return none
    let .succ level‚ÇÇ ‚Üê getLevel type | return none
    let .some instCat ‚Üê synthInstance?
      (mkAppN (.const ``Category [level‚ÇÇ, level‚ÇÅ]) #[C]) | return none
    let instMonoidal? ‚Üê synthInstance?
      (mkAppN (.const ``MonoidalCategory [level‚ÇÇ, level‚ÇÅ]) #[C, instCat])
    return some ‚ü®level‚ÇÇ, level‚ÇÅ, C, instCat, instMonoidal?‚ü©
  | _ => return none

instance : BicategoryLike.Context Monoidal.Context where
  mkContext? := Monoidal.mkContext?

/-- The monad for the normalization of 2-morphisms. -/
abbrev MonoidalM := CoherenceM Context

/-- Throw an error if the monoidal category instance is not found. -/
def synthMonoidalError {Œ± : Type} : MetaM Œ± := do
  throwError "failed to find monoidal category instance"

instance : MonadMor‚ÇÅ MonoidalM where
  id‚ÇÅM a := do
    let ctx ‚Üê read
    let .some _monoidal := ctx.instMonoidal? | synthMonoidalError
    return .id (q(MonoidalCategory.tensorUnit) : Q($ctx.C)) a
  comp‚ÇÅM f g := do
    let ctx ‚Üê read
    let .some _monoidal := ctx.instMonoidal? | synthMonoidalError
    let f_e : Q($ctx.C) := f.e
    let g_e : Q($ctx.C) := g.e
    return .comp (q($f_e ‚äó $g_e)) f g

section

universe v u
variable {C : Type u} [Category.{v} C]

theorem structuralIsoOfExpr_comp {f g h : C}
    (Œ∑ : f ‚ü∂ g) (Œ∑' : f ‚âÖ g) (ih_Œ∑ : Œ∑'.hom = Œ∑)
    (Œ∏ : g ‚ü∂ h) (Œ∏' : g ‚âÖ h) (ih_Œ∏ : Œ∏'.hom = Œ∏) :
    (Œ∑' ‚â™‚â´ Œ∏').hom  = Œ∑ ‚â´ Œ∏ := by
  simp [ih_Œ∑, ih_Œ∏]

theorem StructuralOfExpr_monoidalComp {f g h i : C} [MonoidalCoherence g h]
    (Œ∑ : f ‚ü∂ g) (Œ∑' : f ‚âÖ g) (ih_Œ∑ : Œ∑'.hom = Œ∑) (Œ∏ : h ‚ü∂ i) (Œ∏' : h ‚âÖ i) (ih_Œ∏ : Œ∏'.hom = Œ∏) :
    (Œ∑' ‚â™‚äó‚â´ Œ∏').hom = Œ∑ ‚äó‚â´ Œ∏ := by
  simp [ih_Œ∑, ih_Œ∏, monoidalIsoComp, monoidalComp, MonoidalCoherence.iso]

variable [MonoidalCategory C]

theorem structuralIsoOfExpr_whiskerLeft (f : C) {g h : C}
    (Œ∑ : g ‚ü∂ h) (Œ∑' : g ‚âÖ h) (ih_Œ∑ : Œ∑'.hom = Œ∑)  :
    (whiskerLeftIso f Œ∑').hom = f ‚óÅ Œ∑ := by
  simp [ih_Œ∑]

theorem structuralIsoOfExpr_whiskerRight {f g : C} (h : C)
    (Œ∑ : f ‚ü∂ g) (Œ∑' : f ‚âÖ g) (ih_Œ∑ : Œ∑'.hom = Œ∑)  :
    (whiskerRightIso Œ∑' h).hom = Œ∑ ‚ñ∑ h := by
  simp [ih_Œ∑]

theorem structuralIsoOfExpr_horizontalComp {f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ : C}
    (Œ∑ : f‚ÇÅ ‚ü∂ g‚ÇÅ) (Œ∑' : f‚ÇÅ ‚âÖ g‚ÇÅ) (ih_Œ∑ : Œ∑'.hom = Œ∑)
    (Œ∏ : f‚ÇÇ ‚ü∂ g‚ÇÇ) (Œ∏' : f‚ÇÇ ‚âÖ g‚ÇÇ) (ih_Œ∏ : Œ∏'.hom = Œ∏) :
    (Œ∑' ‚äó Œ∏').hom = Œ∑ ‚äó Œ∏ := by
  simp [ih_Œ∑, ih_Œ∏]

end

open MonadMor‚ÇÅ

instance : MonadMor‚ÇÇIso MonoidalM where
  associatorM f g h := do
    let ctx ‚Üê read
    let .some _monoidal := ctx.instMonoidal? | synthMonoidalError
    let f_e : Q($ctx.C) := f.e
    let g_e : Q($ctx.C) := g.e
    let h_e : Q($ctx.C) := h.e
    return .associator q(Œ±_ $f_e $g_e $h_e) f g h
  leftUnitorM f := do
    let ctx ‚Üê read
    let .some _monoidal := ctx.instMonoidal? | synthMonoidalError
    let f_e : Q($ctx.C) := f.e
    return .leftUnitor q(Œª_ $f_e) f
  rightUnitorM f := do
    let ctx ‚Üê read
    let .some _monoidal := ctx.instMonoidal? | synthMonoidalError
    let f_e : Q($ctx.C) := f.e
    return .rightUnitor q(œÅ_ $f_e) f
  id‚ÇÇM f := do
    let ctx ‚Üê read
    let _cat := ctx.instCat
    have f_e : Q($ctx.C) := f.e
    return .id q(Iso.refl $f_e) f
  coherenceHomM f g inst := do
    let ctx ‚Üê read
    let .some _monoidal := ctx.instMonoidal? | synthMonoidalError
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have inst : Q(MonoidalCoherence $f_e $g_e) := inst
    match (‚Üê whnfI inst).getAppFnArgs with
    | (``MonoidalCoherence.mk, #[_, _, _, _, Œ±]) =>
      let e : Q($f_e ‚âÖ $g_e) := q(MonoidalCoherence.iso)
      return ‚ü®e, f, g, inst, Œ±‚ü©
    | _ => throwError m!"failed to unfold {inst}"
  comp‚ÇÇM Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let _cat := ctx.instCat
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let h ‚Üê Œ∏.tgtM
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have h_e : Q($ctx.C) := h.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    have Œ∏_e : Q($g_e ‚âÖ $h_e) := Œ∏.e
    return .comp q($Œ∑_e ‚â™‚â´ $Œ∏_e) f g h Œ∑ Œ∏
  whiskerLeftM f Œ∑ := do
    let ctx ‚Üê read
    let .some _monoidal := ctx.instMonoidal? | synthMonoidalError
    let g ‚Üê Œ∑.srcM
    let h ‚Üê Œ∑.tgtM
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have h_e : Q($ctx.C) := h.e
    have Œ∑_e : Q($g_e ‚âÖ $h_e) := Œ∑.e
    return .whiskerLeft q(whiskerLeftIso $f_e $Œ∑_e) f g h Œ∑
  whiskerRightM Œ∑ h := do
    let ctx ‚Üê read
    let .some _monoidal := ctx.instMonoidal? | synthMonoidalError
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have h_e : Q($ctx.C) := h.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    return .whiskerRight q(whiskerRightIso $Œ∑_e $h_e) f g Œ∑ h
  horizontalCompM Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let .some _monoidal := ctx.instMonoidal? | synthMonoidalError
    let f‚ÇÅ ‚Üê Œ∑.srcM
    let g‚ÇÅ ‚Üê Œ∑.tgtM
    let f‚ÇÇ ‚Üê Œ∏.srcM
    let g‚ÇÇ ‚Üê Œ∏.tgtM
    have f‚ÇÅ_e : Q($ctx.C) := f‚ÇÅ.e
    have g‚ÇÅ_e : Q($ctx.C) := g‚ÇÅ.e
    have f‚ÇÇ_e : Q($ctx.C) := f‚ÇÇ.e
    have g‚ÇÇ_e : Q($ctx.C) := g‚ÇÇ.e
    have Œ∑_e : Q($f‚ÇÅ_e ‚âÖ $g‚ÇÅ_e) := Œ∑.e
    have Œ∏_e : Q($f‚ÇÇ_e ‚âÖ $g‚ÇÇ_e) := Œ∏.e
    return .horizontalComp q(tensorIso $Œ∑_e $Œ∏_e) f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ Œ∑ Œ∏
  symmM Œ∑ := do
    let ctx ‚Üê read
    let _cat := ctx.instCat
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    return .inv q(Iso.symm $Œ∑_e) f g Œ∑
  coherenceCompM Œ± Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let _cat := ctx.instCat
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let h ‚Üê Œ∏.srcM
    let i ‚Üê Œ∏.tgtM
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have h_e : Q($ctx.C) := h.e
    have i_e : Q($ctx.C) := i.e
    have _inst : Q(MonoidalCoherence $g_e $h_e) := Œ±.inst
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    have Œ∏_e : Q($h_e ‚âÖ $i_e) := Œ∏.e
    return .coherenceComp q($Œ∑_e ‚â™‚äó‚â´ $Œ∏_e) f g h i Œ± Œ∑ Œ∏

open MonadMor‚ÇÇIso

instance : MonadMor‚ÇÇ MonoidalM where
  homM Œ∑ := do
    let ctx ‚Üê read
    let _cat := ctx.instCat
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    let e : Q($f_e ‚ü∂ $g_e) := q(Iso.hom $Œ∑_e)
    have eq : Q(Iso.hom $Œ∑_e = $e) := q(rfl)
    return .isoHom e ‚ü®Œ∑, eq‚ü© Œ∑
  atomHomM Œ∑ := do
    let ctx ‚Üê read
    let _cat := ctx.instCat
    let f := Œ∑.src
    let g := Œ∑.tgt
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    return .mk q(Iso.hom $Œ∑_e) f g
  invM Œ∑ := do
    let ctx ‚Üê read
    let _cat := ctx.instCat
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    let e : Q($g_e ‚ü∂ $f_e) := q(Iso.inv $Œ∑_e)
    let Œ∑_inv ‚Üê symmM Œ∑
    let eq : Q(Iso.inv $Œ∑_e = $e) := q(Iso.symm_hom $Œ∑_e)
    return .isoInv e ‚ü®Œ∑_inv, eq‚ü© Œ∑
  atomInvM Œ∑ := do
    let ctx ‚Üê read
    let _cat := ctx.instCat
    let f := Œ∑.src
    let g := Œ∑.tgt
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have Œ∑_e : Q($f_e ‚âÖ $g_e) := Œ∑.e
    return .mk q(Iso.inv $Œ∑_e) g f
  id‚ÇÇM f := do
    let ctx ‚Üê read
    let _cat := ctx.instCat
    have f_e : Q($ctx.C) := f.e
    let e : Q($f_e ‚ü∂ $f_e) := q(ùüô $f_e)
    let eq : Q(ùüô $f_e = $e) := q(Iso.refl_hom $f_e)
    return .id e ‚ü®.structuralAtom <| ‚Üê id‚ÇÇM f, eq‚ü© f
  comp‚ÇÇM Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let _cat := ctx.instCat
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let h ‚Üê Œ∏.tgtM
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have h_e : Q($ctx.C) := h.e
    have Œ∑_e : Q($f_e ‚ü∂ $g_e) := Œ∑.e
    have Œ∏_e : Q($g_e ‚ü∂ $h_e) := Œ∏.e
    let iso_lift? ‚Üê (match (Œ∑.isoLift?, Œ∏.isoLift?) with
      | (some Œ∑_iso, some Œ∏_iso) =>
        have Œ∑_iso_e : Q($f_e ‚âÖ $g_e) := Œ∑_iso.e.e
        have Œ∏_iso_e : Q($g_e ‚âÖ $h_e) := Œ∏_iso.e.e
        have Œ∑_iso_eq : Q(Iso.hom $Œ∑_iso_e = $Œ∑_e) := Œ∑_iso.eq
        have Œ∏_iso_eq : Q(Iso.hom $Œ∏_iso_e = $Œ∏_e) := Œ∏_iso.eq
        let eq := q(structuralIsoOfExpr_comp _ _ $Œ∑_iso_eq _ _ $Œ∏_iso_eq)
        return .some ‚ü®‚Üê comp‚ÇÇM Œ∑_iso.e Œ∏_iso.e, eq‚ü©
      | _ => return none)
    let e : Q($f_e ‚ü∂ $h_e) := q($Œ∑_e ‚â´ $Œ∏_e)
    return .comp e iso_lift? f g h Œ∑ Œ∏
  whiskerLeftM f Œ∑ := do
    let ctx ‚Üê read
    let .some _monoidal := ctx.instMonoidal? | synthMonoidalError
    let g ‚Üê Œ∑.srcM
    let h ‚Üê Œ∑.tgtM
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have h_e : Q($ctx.C) := h.e
    have Œ∑_e : Q($g_e ‚ü∂ $h_e) := Œ∑.e
    let iso_lift? ‚Üê (match Œ∑.isoLift? with
      | some Œ∑_iso => do
        have Œ∑_iso_e : Q($g_e ‚âÖ $h_e) := Œ∑_iso.e.e
        have Œ∑_iso_eq : Q(Iso.hom $Œ∑_iso_e = $Œ∑_e) := Œ∑_iso.eq
        let eq := q(structuralIsoOfExpr_whiskerLeft $f_e _ _ $Œ∑_iso_eq)
        return .some ‚ü®‚Üê whiskerLeftM f Œ∑_iso.e, eq‚ü©
      | _ => return none)
    let e : Q($f_e ‚äó $g_e ‚ü∂ $f_e ‚äó $h_e) := q($f_e ‚óÅ $Œ∑_e)
    return .whiskerLeft e iso_lift? f g h Œ∑
  whiskerRightM Œ∑ h := do
    let ctx ‚Üê read
    let .some _monoidal := ctx.instMonoidal? | synthMonoidalError
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have h_e : Q($ctx.C) := h.e
    have Œ∑_e : Q($f_e ‚ü∂ $g_e) := Œ∑.e
    let iso_lift? ‚Üê (match Œ∑.isoLift? with
      | some Œ∑_iso => do
        have Œ∑_iso_e : Q($f_e ‚âÖ $g_e) := Œ∑_iso.e.e
        have Œ∑_iso_eq : Q(Iso.hom $Œ∑_iso_e = $Œ∑_e) := Œ∑_iso.eq
        let eq := q(structuralIsoOfExpr_whiskerRight $h_e _ _ $Œ∑_iso_eq)
        return .some ‚ü®‚Üê whiskerRightM Œ∑_iso.e h, eq‚ü©
      | _ => return none)
    let e : Q($f_e ‚äó $h_e ‚ü∂ $g_e ‚äó $h_e) := q($Œ∑_e ‚ñ∑ $h_e)
    return .whiskerRight e iso_lift? f g Œ∑ h
  horizontalCompM Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let .some _monoidal := ctx.instMonoidal? | synthMonoidalError
    let f‚ÇÅ ‚Üê Œ∑.srcM
    let g‚ÇÅ ‚Üê Œ∑.tgtM
    let f‚ÇÇ ‚Üê Œ∏.srcM
    let g‚ÇÇ ‚Üê Œ∏.tgtM
    have f‚ÇÅ_e : Q($ctx.C) := f‚ÇÅ.e
    have g‚ÇÅ_e : Q($ctx.C) := g‚ÇÅ.e
    have f‚ÇÇ_e : Q($ctx.C) := f‚ÇÇ.e
    have g‚ÇÇ_e : Q($ctx.C) := g‚ÇÇ.e
    have Œ∑_e : Q($f‚ÇÅ_e ‚ü∂ $g‚ÇÅ_e) := Œ∑.e
    have Œ∏_e : Q($f‚ÇÇ_e ‚ü∂ $g‚ÇÇ_e) := Œ∏.e
    let iso_lift? ‚Üê (match (Œ∑.isoLift?, Œ∏.isoLift?) with
      | (some Œ∑_iso, some Œ∏_iso) => do
        have Œ∑_iso_e : Q($f‚ÇÅ_e ‚âÖ $g‚ÇÅ_e) := Œ∑_iso.e.e
        have Œ∏_iso_e : Q($f‚ÇÇ_e ‚âÖ $g‚ÇÇ_e) := Œ∏_iso.e.e
        have Œ∑_iso_eq : Q(Iso.hom $Œ∑_iso_e = $Œ∑_e) := Œ∑_iso.eq
        have Œ∏_iso_eq : Q(Iso.hom $Œ∏_iso_e = $Œ∏_e) := Œ∏_iso.eq
        let eq := q(structuralIsoOfExpr_horizontalComp _ _ $Œ∑_iso_eq _ _ $Œ∏_iso_eq)
        return .some ‚ü®‚Üê horizontalCompM Œ∑_iso.e Œ∏_iso.e, eq‚ü©
      | _ => return none)
    let e : Q($f‚ÇÅ_e ‚äó $f‚ÇÇ_e ‚ü∂ $g‚ÇÅ_e ‚äó $g‚ÇÇ_e) := q($Œ∑_e ‚äó $Œ∏_e)
    return .horizontalComp e iso_lift? f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ Œ∑ Œ∏
  coherenceCompM Œ± Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let _cat := ctx.instCat
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let h ‚Üê Œ∏.srcM
    let i ‚Üê Œ∏.tgtM
    have f_e : Q($ctx.C) := f.e
    have g_e : Q($ctx.C) := g.e
    have h_e : Q($ctx.C) := h.e
    have i_e : Q($ctx.C) := i.e
    have _inst : Q(MonoidalCoherence $g_e $h_e) := Œ±.inst
    have Œ∑_e : Q($f_e ‚ü∂ $g_e) := Œ∑.e
    have Œ∏_e : Q($h_e ‚ü∂ $i_e) := Œ∏.e
    let iso_lift? ‚Üê (match (Œ∑.isoLift?, Œ∏.isoLift?) with
      | (some Œ∑_iso, some Œ∏_iso) => do
        have Œ∑_iso_e : Q($f_e ‚âÖ $g_e) := Œ∑_iso.e.e
        have Œ∏_iso_e : Q($h_e ‚âÖ $i_e) := Œ∏_iso.e.e
        have Œ∑_iso_eq : Q(Iso.hom $Œ∑_iso_e = $Œ∑_e) := Œ∑_iso.eq
        have Œ∏_iso_eq : Q(Iso.hom $Œ∏_iso_e = $Œ∏_e) := Œ∏_iso.eq
        let eq := q(StructuralOfExpr_monoidalComp _ _ $Œ∑_iso_eq _ _ $Œ∏_iso_eq)
        return .some ‚ü®‚Üê coherenceCompM Œ± Œ∑_iso.e Œ∏_iso.e, eq‚ü©
      | _ => return none)
    let e : Q($f_e ‚ü∂ $i_e) := q($Œ∑_e ‚äó‚â´ $Œ∏_e)
    return .coherenceComp e iso_lift? f g h i Œ± Œ∑ Œ∏

/-- Check that `e` is definitionally equal to `ùüô_ C`. -/
def id‚ÇÅ? (e : Expr) : MonoidalM (Option Obj) := do
  let ctx ‚Üê read
  match ctx.instMonoidal? with
  | .some _monoidal => do
    if ‚Üê withDefault <| isDefEq e (q(MonoidalCategory.tensorUnit) : Q($ctx.C)) then
      return some ‚ü®none‚ü©
    else
      return none
  | _ => return none

/-- Return `(f, g)` if `e` is definitionally equal to `f ‚äó g`. -/
def comp? (e : Expr) : MonoidalM (Option (Mor‚ÇÅ √ó Mor‚ÇÅ)) := do
  let ctx ‚Üê read
  let f ‚Üê mkFreshExprMVarQ ctx.C
  let g ‚Üê mkFreshExprMVarQ ctx.C
  match ctx.instMonoidal? with
    | .some _monoidal => do
      if ‚Üê withDefault <| isDefEq e q($f ‚äó $g) then
        let f ‚Üê instantiateMVars f
        let g ‚Üê instantiateMVars g
        return some ((.of ‚ü®f, ‚ü®none‚ü©, ‚ü®none‚ü©‚ü© : Mor‚ÇÅ), (.of ‚ü®g, ‚ü®none‚ü©, ‚ü®none‚ü©‚ü© : Mor‚ÇÅ))
      else
        return none
    | _ => return none

/-- Construct a `Mor‚ÇÅ` expression from a Lean expression. -/
partial def mor‚ÇÅOfExpr (e : Expr) : MonoidalM Mor‚ÇÅ := do
  if let some f := (‚Üê get).cache.find? e then
    return f
  let f ‚Üê
    if let some a ‚Üê id‚ÇÅ? e then
      MonadMor‚ÇÅ.id‚ÇÅM a
    else if let some (f, g) ‚Üê comp? e then
      MonadMor‚ÇÅ.comp‚ÇÅM (‚Üê mor‚ÇÅOfExpr f.e) (‚Üê mor‚ÇÅOfExpr g.e)
    else
      return Mor‚ÇÅ.of ‚ü®e, ‚ü®none‚ü©, ‚ü®none‚ü©‚ü©
  modify fun s => { s with cache := s.cache.insert e f }
  return f

instance : MkMor‚ÇÅ MonoidalM where
  ofExpr := mor‚ÇÅOfExpr

/-- Construct a `Mor‚ÇÇIso` term from a Lean expression. -/
partial def Mor‚ÇÇIsoOfExpr (e : Expr) : MonoidalM Mor‚ÇÇIso := do
  match (‚Üê whnfR e).getAppFnArgs with
  | (``MonoidalCategoryStruct.associator, #[_, _, _, f, g, h]) =>
    associatorM' (‚Üê MkMor‚ÇÅ.ofExpr f) (‚Üê MkMor‚ÇÅ.ofExpr g) (‚Üê MkMor‚ÇÅ.ofExpr h)
  | (``MonoidalCategoryStruct.leftUnitor, #[_, _, _, f]) =>
    leftUnitorM' (‚Üê MkMor‚ÇÅ.ofExpr f)
  | (``MonoidalCategoryStruct.rightUnitor, #[_, _, _, f]) =>
    rightUnitorM' (‚Üê MkMor‚ÇÅ.ofExpr f)
  | (``Iso.refl, #[_, _, f]) =>
    id‚ÇÇM' (‚Üê MkMor‚ÇÅ.ofExpr f)
  | (``Iso.symm, #[_, _, _, _, Œ∑]) =>
    symmM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑)
  | (``Iso.trans, #[_, _, _, _, _, Œ∑, Œ∏]) =>
    comp‚ÇÇM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑) (‚Üê Mor‚ÇÇIsoOfExpr Œ∏)
  | (``MonoidalCategory.whiskerLeftIso, #[_, _, _, f, _, _, Œ∑]) =>
    whiskerLeftM (‚Üê MkMor‚ÇÅ.ofExpr f) (‚Üê Mor‚ÇÇIsoOfExpr Œ∑)
  | (``MonoidalCategory.whiskerRightIso, #[_, _, _, _, _, Œ∑, h]) =>
    whiskerRightM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑) (‚Üê MkMor‚ÇÅ.ofExpr h)
  | (``tensorIso, #[_, _, _, _, _, _, _, Œ∑, Œ∏]) =>
    horizontalCompM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑) (‚Üê Mor‚ÇÇIsoOfExpr Œ∏)
  | (``monoidalIsoComp, #[_, _, _, g, h, _, inst, Œ∑, Œ∏]) =>
    let Œ± ‚Üê coherenceHomM (‚Üê MkMor‚ÇÅ.ofExpr g) (‚Üê MkMor‚ÇÅ.ofExpr h) inst
    coherenceCompM Œ± (‚Üê Mor‚ÇÇIsoOfExpr Œ∑) (‚Üê Mor‚ÇÇIsoOfExpr Œ∏)
  | (``MonoidalCoherence.iso, #[_, _, f, g, inst]) =>
    coherenceHomM' (‚Üê MkMor‚ÇÅ.ofExpr f) (‚Üê MkMor‚ÇÅ.ofExpr g) inst
  | _ =>
    return .of ‚ü®e, ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê srcExprOfIso e), ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê tgtExprOfIso e)‚ü©

open MonadMor‚ÇÇ in
/-- Construct a `Mor‚ÇÇ` term from a Lean expression. -/
partial def Mor‚ÇÇOfExpr (e : Expr) : MonoidalM Mor‚ÇÇ := do
  match ‚Üê whnfR e with
  -- whnfR version of `Iso.hom Œ∑`
  | .proj ``Iso 0 Œ∑ => homM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑)
  -- whnfR version of `Iso.inv Œ∑`
  | .proj ``Iso 1 Œ∑ => invM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑)
  | .app .. => match (‚Üê whnfR e).getAppFnArgs with
    | (``CategoryStruct.id, #[_, _, f]) => id‚ÇÇM (‚Üê MkMor‚ÇÅ.ofExpr f)
    | (``CategoryStruct.comp, #[_, _, _, _, _, Œ∑, Œ∏]) =>
      comp‚ÇÇM (‚Üê Mor‚ÇÇOfExpr Œ∑) (‚Üê Mor‚ÇÇOfExpr Œ∏)
    | (``MonoidalCategoryStruct.whiskerLeft, #[_, _, _, f, _, _, Œ∑]) =>
      whiskerLeftM (‚Üê MkMor‚ÇÅ.ofExpr f) (‚Üê Mor‚ÇÇOfExpr Œ∑)
    | (``MonoidalCategoryStruct.whiskerRight, #[_, _, _, _, _, Œ∑, h]) =>
      whiskerRightM (‚Üê Mor‚ÇÇOfExpr Œ∑) (‚Üê MkMor‚ÇÅ.ofExpr h)
    | (``MonoidalCategoryStruct.tensorHom, #[_, _, _, _, _, _, _, Œ∑, Œ∏]) =>
      horizontalCompM (‚Üê Mor‚ÇÇOfExpr Œ∑) (‚Üê Mor‚ÇÇOfExpr Œ∏)
    | (``monoidalComp, #[_, _, _, g, h, _, inst, Œ∑, Œ∏]) =>
      let Œ± ‚Üê coherenceHomM (‚Üê MkMor‚ÇÅ.ofExpr g) (‚Üê MkMor‚ÇÅ.ofExpr h) inst
      coherenceCompM Œ± (‚Üê Mor‚ÇÇOfExpr Œ∑) (‚Üê Mor‚ÇÇOfExpr Œ∏)
    | _ => return .of ‚ü®e, ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê srcExpr e), ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê tgtExpr e)‚ü©
  | _ =>
    return .of ‚ü®e, ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê srcExpr e), ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê tgtExpr e)‚ü©

instance : BicategoryLike.MkMor‚ÇÇ MonoidalM where
  ofExpr := Mor‚ÇÇOfExpr

instance : MonadCoherehnceHom MonoidalM where
  unfoldM Œ± := Mor‚ÇÇIsoOfExpr Œ±.unfold

end Mathlib.Tactic.Monoidal
