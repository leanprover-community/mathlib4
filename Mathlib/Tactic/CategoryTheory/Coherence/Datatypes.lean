/-
Copyright (c) 2024 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Lean.Meta.Basic
import Mathlib.Init

/-!
# Datatypes for bicategory like structures

This file defines the basic datatypes for bicategory like structures. We will use these datatypes
to write tactics that can be applied to both monoidal categories and bicategories:
- `Obj`: objects type
- `Atom‚ÇÅ`: atomic 1-morphisms type
- `Mor‚ÇÅ`: 1-morphisms type
- `Atom`: atomic non-structural 2-morphisms type
- `Mor‚ÇÇ`: 2-morphisms type
- `AtomIso`: atomic non-structural 2-isomorphisms type
- `Mor‚ÇÇIso`: 2-isomorphisms type
- `NormalizedHom`: normalized 1-morphisms type

A term of these datatypes wraps the corresponding `Expr` term, which can be extracted by
e.g. `Œ∑.e` for `Œ∑ : Mor‚ÇÇ`.

The operations of these datatypes are defined in a monad `m` with the corresponding typeclasses:
- `MonadMor‚ÇÅ`: operations on `Mor‚ÇÅ`
- `MonadMor‚ÇÇIso`: operations on `Mor‚ÇÇIso`
- `MonadMor‚ÇÇ`: operations on `Mor‚ÇÇ`

For example, a monad `m` with `[MonadMor‚ÇÇ m]` provides the operation
`MonadMor‚ÇÇ.comp‚ÇÇM : Mor‚ÇÇIso ‚Üí Mor‚ÇÇIso ‚Üí m Mor‚ÇÇIso`, which constructs the expression for the
composition `Œ∑ ‚â´ Œ∏` of 2-morphisms `Œ∑` and `Œ∏` in the monad `m`.

-/

open Lean Meta

namespace Mathlib.Tactic

namespace BicategoryLike

/-- Expressions for objects. -/
structure Obj where
  /-- Extracts a lean expression from an `Obj` term. Return `none` in the monoidal
  category context. -/
  e? : Option Expr
  deriving Inhabited

/-- Extract a lean expression from an `Obj` term. -/
def Obj.e (a : Obj) : Expr :=
  a.e?.get!

/-- Expressions for atomic 1-morphisms. -/
structure Atom‚ÇÅ : Type where
  /-- Extract a lean expression from an `Atom‚ÇÅ` term. -/
  e : Expr
  /-- The domain of the 1-morphism. -/
  src : Obj
  /-- The codomain of the 1-morphism. -/
  tgt : Obj
  deriving Inhabited

/-- A monad equipped with the ability to construct `Atom‚ÇÅ` terms. -/
class MkAtom‚ÇÅ (m : Type ‚Üí Type) where
  /-- Construct a `Atom‚ÇÅ` term from a lean expression. -/
  ofExpr (e : Expr) : m Atom‚ÇÅ

/-- Expressions for 1-morphisms. -/
inductive Mor‚ÇÅ : Type
  /-- `id e a` is the expression for `ùüô a`, where `e` is the underlying lean expression. -/
  | id (e : Expr) (a : Obj) : Mor‚ÇÅ
  /-- `comp e f g` is the expression for `f ‚â´ g`, where `e` is the underlying lean expression. -/
  | comp (e : Expr) : Mor‚ÇÅ ‚Üí Mor‚ÇÅ ‚Üí Mor‚ÇÅ
  /-- The expression for an atomic 1-morphism. -/
  | of : Atom‚ÇÅ ‚Üí Mor‚ÇÅ
  deriving Inhabited

/-- A monad equipped with the ability to construct `Mor‚ÇÅ` terms. -/
class MkMor‚ÇÅ (m : Type ‚Üí Type) where
  /-- Construct a `Mor‚ÇÅ` term from a lean expression. -/
  ofExpr (e : Expr) : m Mor‚ÇÅ

/-- The underlying lean expression of a 1-morphism. -/
def Mor‚ÇÅ.e : Mor‚ÇÅ ‚Üí Expr
  | .id e _ => e
  | .comp e _ _ => e
  | .of a => a.e

/-- The domain of a 1-morphism. -/
def Mor‚ÇÅ.src : Mor‚ÇÅ ‚Üí Obj
  | .id _ a => a
  | .comp _ f _ => f.src
  | .of f => f.src

/-- The codomain of a 1-morphism. -/
def Mor‚ÇÅ.tgt : Mor‚ÇÅ ‚Üí Obj
  | .id _ a => a
  | .comp _ _ g => g.tgt
  | .of f => f.tgt

/-- Converts a 1-morphism into a list of its components. -/
def Mor‚ÇÅ.toList : Mor‚ÇÅ ‚Üí List Atom‚ÇÅ
  | .id _ _ => []
  | .comp _ f g => f.toList ++ g.toList
  | .of f => [f]

/-- A monad equipped with the ability to manipulate 1-morphisms. -/
class MonadMor‚ÇÅ (m : Type ‚Üí Type) where
  /-- The expression for `ùüô a`. -/
  id‚ÇÅM (a : Obj) : m Mor‚ÇÅ
  /-- The expression for `f ‚â´ g`. -/
  comp‚ÇÅM (f g : Mor‚ÇÅ) : m Mor‚ÇÅ

/-- Expressions for coherence isomorphisms (i.e., structural 2-morphisms
giveb by `BicategorycalCoherence.iso`). -/
structure CoherenceHom where
  /-- The underlying lean expression of a coherence isomorphism. -/
  e : Expr
  /-- The domain of a coherence isomorphism. -/
  src : Mor‚ÇÅ
  /-- The codomain of a coherence isomorphism. -/
  tgt : Mor‚ÇÅ
  /-- The `BicategoricalCoherence` instance. -/
  inst : Expr
  /-- Extract the structural 2-isomorphism. -/
  unfold : Expr
  deriving Inhabited

/-- Expressions for atomic non-structural 2-isomorphisms. -/
structure AtomIso where
  /-- The underlying lean expression of an `AtomIso` term. -/
  e : Expr
  /-- The domain of a 2-isomorphism. -/
  src : Mor‚ÇÅ
  /-- The codomain of a 2-isomorphism. -/
  tgt : Mor‚ÇÅ
  deriving Inhabited

/-- Expressions for atomic structural 2-morphisms. -/
inductive StructuralAtom : Type
  /-- The expression for the associator `Œ±_ f g h`. -/
  | associator (e : Expr) (f g h : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the left unitor `Œª_ f`. -/
  | leftUnitor (e : Expr) (f : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the right unitor `œÅ_ f`. -/
  | rightUnitor (e : Expr) (f : Mor‚ÇÅ) : StructuralAtom
  | id (e : Expr) (f : Mor‚ÇÅ) : StructuralAtom
  | coherenceHom (Œ± : CoherenceHom) : StructuralAtom
  deriving Inhabited

/-- Expressions for 2-isomorphisms. -/
inductive Mor‚ÇÇIso : Type where
  | structuralAtom (Œ± : StructuralAtom) : Mor‚ÇÇIso
  | comp (e : Expr) (f g h : Mor‚ÇÅ) (Œ∑ Œ∏ : Mor‚ÇÇIso) : Mor‚ÇÇIso
  | whiskerLeft (e : Expr) (f g h : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇIso) : Mor‚ÇÇIso
  | whiskerRight (e : Expr) (f g : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇIso) (h : Mor‚ÇÅ) : Mor‚ÇÇIso
  | horizontalComp (e : Expr) (f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ : Mor‚ÇÅ) (Œ∑ Œ∏ : Mor‚ÇÇIso) : Mor‚ÇÇIso
  | inv (e : Expr) (f g : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇIso) : Mor‚ÇÇIso
  | coherenceComp (e : Expr) (f g h i : Mor‚ÇÅ) (Œ± : CoherenceHom) (Œ∑ Œ∏ : Mor‚ÇÇIso) : Mor‚ÇÇIso
  | of (Œ∑ : AtomIso) : Mor‚ÇÇIso
  deriving Inhabited

/-- A monad equipped with the ability to unfold `BicategoricalCoherence.iso`. -/
class MonadCoherehnceHom (m : Type ‚Üí Type) where
  /-- Unfold a coherence isomorphism. -/
  unfoldM (Œ± : CoherenceHom) : m Mor‚ÇÇIso

/-- The underlying lean expression of a 2-isomorphism. -/
def StructuralAtom.e : StructuralAtom ‚Üí Expr
  | .associator e .. => e
  | .leftUnitor e .. => e
  | .rightUnitor e .. => e
  | .id e .. => e
  | .coherenceHom Œ± => Œ±.e

open MonadMor‚ÇÅ

variable {m : Type ‚Üí Type} [Monad m]

/-- The domain of a 2-isomorphism. -/
def StructuralAtom.srcM [MonadMor‚ÇÅ m] : StructuralAtom ‚Üí m Mor‚ÇÅ
  | .associator _ f g h => do comp‚ÇÅM (‚Üê comp‚ÇÅM f g) h
  | .leftUnitor _ f => do comp‚ÇÅM (‚Üê id‚ÇÅM f.src) f
  | .rightUnitor _ f => do comp‚ÇÅM f (‚Üê id‚ÇÅM f.tgt)
  | .id _ f => return f
  | .coherenceHom Œ± => return Œ±.src

/-- The codomain of a 2-isomorphism. -/
def StructuralAtom.tgtM [MonadMor‚ÇÅ m] : StructuralAtom ‚Üí m Mor‚ÇÅ
  | .associator _ f g h => do comp‚ÇÅM f (‚Üê comp‚ÇÅM g h)
  | .leftUnitor _ f => return f
  | .rightUnitor _ f => return f
  | .id _ f => return f
  | .coherenceHom Œ± => return Œ±.tgt

/-- The underlying lean expression of a 2-isomorphism. -/
def Mor‚ÇÇIso.e : Mor‚ÇÇIso ‚Üí Expr
  | .structuralAtom Œ± => Œ±.e
  | .comp e .. => e
  | .whiskerLeft e .. => e
  | .whiskerRight e .. => e
  | .horizontalComp e .. => e
  | .inv e .. => e
  | .coherenceComp e .. => e
  | .of Œ∑ => Œ∑.e

/-- The domain of a 2-isomorphism. -/
def Mor‚ÇÇIso.srcM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : Mor‚ÇÇIso ‚Üí m Mor‚ÇÅ
  | .structuralAtom Œ± => Œ±.srcM
  | .comp _ f .. => return f
  | .whiskerLeft _ f g .. => do comp‚ÇÅM f g
  | .whiskerRight _ f _ _ h => do comp‚ÇÅM f h
  | .horizontalComp _ f‚ÇÅ _ f‚ÇÇ .. => do comp‚ÇÅM f‚ÇÅ f‚ÇÇ
  | .inv _ _ g _ => return g
  | .coherenceComp _ f .. => return f
  | .of Œ∑ => return Œ∑.src

/-- The codomain of a 2-isomorphism. -/
def Mor‚ÇÇIso.tgtM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : Mor‚ÇÇIso ‚Üí m Mor‚ÇÅ
  | .structuralAtom Œ± => Œ±.tgtM
  | .comp _ _ _ h .. => return h
  | .whiskerLeft _ f _ h _ => do comp‚ÇÅM f h
  | .whiskerRight _ _ g _ h => do comp‚ÇÅM g h
  | .horizontalComp _ _ g‚ÇÅ _ g‚ÇÇ _ _ => do comp‚ÇÅM g‚ÇÅ g‚ÇÇ
  | .inv _ f _ _ => return f
  | .coherenceComp _ _ _ _ i .. => return i
  | .of Œ∑ => return Œ∑.tgt

/-- A monad equipped with the ability to construct `Mor‚ÇÇIso` terms. -/
class MonadMor‚ÇÇIso (m : Type ‚Üí Type) where
  /-- The expression for the associator `Œ±_ f g h`. -/
  associatorM (f g h : Mor‚ÇÅ) : m StructuralAtom
  /-- The expression for the left unitor `Œª_ f`. -/
  leftUnitorM (f : Mor‚ÇÅ) : m StructuralAtom
  /-- The expression for the right unitor `œÅ_ f`. -/
  rightUnitorM (f : Mor‚ÇÅ) : m StructuralAtom
  /-- The expression for the identity `Iso.refl f`. -/
  id‚ÇÇM (f : Mor‚ÇÅ) : m StructuralAtom
  /-- The expression for the coherence isomorphism `‚äóùüô : f ‚ü∂ g`. -/
  coherenceHomM (f g : Mor‚ÇÅ) (inst : Expr) : m CoherenceHom
  /-- The expression for the composition `Œ∑ ‚â™‚â´ Œ∏`. -/
  comp‚ÇÇM (Œ∑ Œ∏ : Mor‚ÇÇIso) : m Mor‚ÇÇIso
  /-- The expression for the left whiskering `whiskerLeftIso f Œ∑`. -/
  whiskerLeftM (f : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇIso) : m Mor‚ÇÇIso
  /-- The expression for the right whiskering `whiskerRightIso Œ∑ h`. -/
  whiskerRightM (Œ∑ : Mor‚ÇÇIso) (h : Mor‚ÇÅ) : m Mor‚ÇÇIso
  /-- The expression for the horizontal composition `Œ∑ ‚ó´ Œ∏`. -/
  horizontalCompM (Œ∑ Œ∏ : Mor‚ÇÇIso) : m Mor‚ÇÇIso
  /-- The expression for the inverse `Iso.symm Œ∑`. -/
  symmM (Œ∑ : Mor‚ÇÇIso) : m Mor‚ÇÇIso
  /-- The expression for the coherence composition `Œ∑ ‚â™‚äó‚â´ Œ∏ := Œ∑ ‚â™‚â´ Œ± ‚â™‚â´ Œ∏`. -/
  coherenceCompM (Œ± : CoherenceHom) (Œ∑ Œ∏ : Mor‚ÇÇIso) : m Mor‚ÇÇIso

namespace MonadMor‚ÇÇIso

variable {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÇIso m]

/-- The expression for the associator `Œ±_ f g h`. -/
def associatorM' (f g h : Mor‚ÇÅ) : m Mor‚ÇÇIso := do
  return .structuralAtom <| ‚Üê MonadMor‚ÇÇIso.associatorM f g h

/-- The expression for the left unitor `Œª_ f`. -/
def leftUnitorM' (f : Mor‚ÇÅ) : m Mor‚ÇÇIso := do
  return .structuralAtom <| ‚Üê MonadMor‚ÇÇIso.leftUnitorM f

/-- The expression for the right unitor `œÅ_ f`. -/
def rightUnitorM' (f : Mor‚ÇÅ) : m Mor‚ÇÇIso := do
  return .structuralAtom <| ‚Üê MonadMor‚ÇÇIso.rightUnitorM f

/-- The expression for the identity `Iso.refl f`. -/
def id‚ÇÇM' (f : Mor‚ÇÅ) : m Mor‚ÇÇIso := do
  return .structuralAtom <| ‚Üê MonadMor‚ÇÇIso.id‚ÇÇM f

/-- The expression for the coherence isomorphism `‚äóùüô : f ‚ü∂ g`. -/
def coherenceHomM' (f g : Mor‚ÇÅ) (inst : Expr) : m Mor‚ÇÇIso := do
  return .structuralAtom <| .coherenceHom <| ‚Üê MonadMor‚ÇÇIso.coherenceHomM f g inst

end MonadMor‚ÇÇIso

/-- Expressions for atomic non-structural 2-morphisms. -/
structure Atom where
  /-- Extract a lean expression from an `Atom` expression. -/
  e : Expr
  /-- The domain of a 2-morphism. -/
  src : Mor‚ÇÅ
  /-- The codomain of a 2-morphism. -/
  tgt : Mor‚ÇÅ
  deriving Inhabited

/-- `Mor‚ÇÇ` expressions defined below will have the `isoLift? : Option IsoLift` field.
For `Œ∑ : Mor‚ÇÇ` such that `Œ∑.isoLift? = .some isoLift`, we have the following data:
- `isoLift.e`: an expression for a 2-isomorphism `Œ∑'`, given as a `Mor‚ÇÇIso` term,
- `isoLift.eq`: a lean expression for the proof that `Œ∑'.hom = Œ∑`.
-/
structure IsoLift where
  /-- The expression for the 2-isomorphism. -/
  e : Mor‚ÇÇIso
  /-- The expression for the proof that the forward direction of the 2-isomorphism is equal to
  the original 2-morphism. -/
  eq : Expr

/-- Expressions for 2-morphisms. -/
inductive Mor‚ÇÇ : Type where
  /-- The expression for `Iso.hom`. -/
  | isoHom (e : Expr) (isoLift : IsoLift) (iso : Mor‚ÇÇIso) : Mor‚ÇÇ
  /-- The expression for `Iso.inv`. -/
  | isoInv (e : Expr) (isoLift : IsoLift) (iso : Mor‚ÇÇIso) : Mor‚ÇÇ
  /-- The expression for the identity `ùüô f`. -/
  | id (e : Expr) (isoLift : IsoLift) (f : Mor‚ÇÅ) : Mor‚ÇÇ
  /-- The expression for the composition `Œ∑ ‚â´ Œ∏`. -/
  | comp (e : Expr) (isoLift? : Option IsoLift) (f g h : Mor‚ÇÅ) (Œ∑ Œ∏ : Mor‚ÇÇ) : Mor‚ÇÇ
  /-- The expression for the left whiskering `f ‚óÅ Œ∑` with `Œ∑ : g ‚ü∂ h`. -/
  | whiskerLeft (e : Expr) (isoLift? : Option IsoLift) (f g h : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇ) : Mor‚ÇÇ
  /-- The expression for the right whiskering `Œ∑ ‚ñ∑ h` with `Œ∑ : f ‚ü∂ g`. -/
  | whiskerRight (e : Expr) (isoLift? : Option IsoLift) (f g : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇ) (h : Mor‚ÇÅ) : Mor‚ÇÇ
  /-- The expression for the horizontal composition `Œ∑ ‚ó´ Œ∏` with `Œ∑ : f‚ÇÅ ‚ü∂ g‚ÇÅ` and `Œ∏ : f‚ÇÇ ‚ü∂ g‚ÇÇ`. -/
  | horizontalComp (e : Expr) (isoLift? : Option IsoLift) (f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ : Mor‚ÇÅ) (Œ∑ Œ∏ : Mor‚ÇÇ) : Mor‚ÇÇ
  /-- The expression for the coherence composition `Œ∑ ‚äó‚â´ Œ∏ := Œ∑ ‚â´ Œ± ‚â´ Œ∏` with `Œ∑ : f ‚ü∂ g`
  and `Œ∏ : h ‚ü∂ i`. -/
  | coherenceComp (e : Expr) (isoLift? : Option IsoLift) (f g h i : Mor‚ÇÅ)
    (Œ± : CoherenceHom) (Œ∑ Œ∏ : Mor‚ÇÇ) : Mor‚ÇÇ
  /-- The expression for an atomic non-structural 2-morphism. -/
  | of (Œ∑ : Atom) : Mor‚ÇÇ
  deriving Inhabited

/-- A monad equipped with the ability to construct `Mor‚ÇÇ` terms. -/
class MkMor‚ÇÇ (m : Type ‚Üí Type) where
  /-- Construct a `Mor‚ÇÇ` term from a lean expression. -/
  ofExpr (e : Expr) : m Mor‚ÇÇ

/-- The underlying lean expression of a 2-morphism. -/
def Mor‚ÇÇ.e : Mor‚ÇÇ ‚Üí Expr
  | .isoHom e .. => e
  | .isoInv e .. => e
  | .id e .. => e
  | .comp e .. => e
  | .whiskerLeft e .. => e
  | .whiskerRight e .. => e
  | .horizontalComp e .. => e
  | .coherenceComp e .. => e
  | .of Œ∑ => Œ∑.e

/-- `Œ∑.isoLift?` is a pair of a 2-isomorphism `Œ∑'` and a proof that `Œ∑'.hom = Œ∑`. If no such `Œ∑'`
is found, returns `none`. This function does not seek `IsIso` instance. -/
def Mor‚ÇÇ.isoLift? : Mor‚ÇÇ ‚Üí Option IsoLift
  | .isoHom _ isoLift .. => some isoLift
  | .isoInv _ isoLift .. => some isoLift
  | .id _ isoLift .. => some isoLift
  | .comp _ isoLift? .. => isoLift?
  | .whiskerLeft _ isoLift? .. => isoLift?
  | .whiskerRight _ isoLift? .. => isoLift?
  | .horizontalComp _ isoLift? .. => isoLift?
  | .coherenceComp _ isoLift? .. => isoLift?
  | .of _ => none

/-- The domain of a 2-morphism. -/
def Mor‚ÇÇ.srcM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : Mor‚ÇÇ ‚Üí m Mor‚ÇÅ
  | .isoHom _ _ iso => iso.srcM
  | .isoInv _ _ iso => iso.tgtM
  | .id _ _ f => return f
  | .comp _ _ f .. => return f
  | .whiskerLeft _ _ f g .. => do comp‚ÇÅM f g
  | .whiskerRight _ _ f _ _ h => do comp‚ÇÅM f h
  | .horizontalComp _ _ f‚ÇÅ _ f‚ÇÇ .. => do comp‚ÇÅM f‚ÇÅ f‚ÇÇ
  | .coherenceComp _ _ f .. => return f
  | .of Œ∑ => return Œ∑.src

/-- The codomain of a 2-morphism. -/
def Mor‚ÇÇ.tgtM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : Mor‚ÇÇ ‚Üí m Mor‚ÇÅ
  | .isoHom _ _ iso => iso.tgtM
  | .isoInv _ _ iso => iso.srcM
  | .id _ _ f => return f
  | .comp _ _ _ _ h .. => return h
  | .whiskerLeft _ _ f _ h _ => do comp‚ÇÅM f h
  | .whiskerRight _ _ _ g _ h => do comp‚ÇÅM g h
  | .horizontalComp _ _ _ g‚ÇÅ _ g‚ÇÇ _ _ => do comp‚ÇÅM g‚ÇÅ g‚ÇÇ
  | .coherenceComp _ _ _ _ _ i .. => return i
  | .of Œ∑ => return Œ∑.tgt

/-- A monad equipped with the ability to manipulate 2-morphisms. -/
class MonadMor‚ÇÇ (m : Type ‚Üí Type) where
  /-- The expression for `Iso.hom Œ∑`. -/
  homM (Œ∑ : Mor‚ÇÇIso) : m Mor‚ÇÇ
  /-- The expression for `Iso.hom Œ∑`. -/
  atomHomM (Œ∑ : AtomIso) : m Atom
  /-- The expression for `Iso.inv Œ∑`. -/
  invM (Œ∑ : Mor‚ÇÇIso) : m Mor‚ÇÇ
  /-- The expression for `Iso.inv Œ∑`. -/
  atomInvM (Œ∑ : AtomIso) : m Atom
  /-- The expression for the identity `ùüô f`. -/
  id‚ÇÇM (f : Mor‚ÇÅ) : m Mor‚ÇÇ
  /-- The expression for the composition `Œ∑ ‚â´ Œ∏`. -/
  comp‚ÇÇM (Œ∑ Œ∏ : Mor‚ÇÇ) : m Mor‚ÇÇ
  /-- The expression for the left whiskering `f ‚óÅ Œ∑`. -/
  whiskerLeftM (f : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇ) : m Mor‚ÇÇ
  /-- The expression for the right whiskering `Œ∑ ‚ñ∑ h`. -/
  whiskerRightM (Œ∑ : Mor‚ÇÇ) (h : Mor‚ÇÅ) : m Mor‚ÇÇ
  /-- The expression for the horizontal composition `Œ∑ ‚ó´ Œ∏`. -/
  horizontalCompM (Œ∑ Œ∏ : Mor‚ÇÇ) : m Mor‚ÇÇ
  /-- The expression for the coherence composition `Œ∑ ‚äó‚â´ Œ∏ := Œ∑ ‚â´ Œ± ‚â´ Œ∏`. -/
  coherenceCompM (Œ± : CoherenceHom) (Œ∑ Œ∏ : Mor‚ÇÇ) : m Mor‚ÇÇ

/-- Type of normalized 1-morphisms `((... ‚â´ h) ‚â´ g) ‚â´ f`. -/
inductive NormalizedHom : Type
  /-- The identity 1-morphism `ùüô a`. -/
  | nil (e : Mor‚ÇÅ) (a : Obj) : NormalizedHom
  /-- The `cons` composes an atomic 1-morphism at the end of a normalized 1-morphism. -/
  | cons (e : Mor‚ÇÅ) : NormalizedHom ‚Üí Atom‚ÇÅ ‚Üí NormalizedHom
  deriving Inhabited

/-- The underlying expression of a normalized 1-morphism. -/
def NormalizedHom.e : NormalizedHom ‚Üí Mor‚ÇÅ
  | NormalizedHom.nil e _ => e
  | NormalizedHom.cons e _ _  => e

/-- The domain of a normalized 1-morphism. -/
def NormalizedHom.src : NormalizedHom ‚Üí Obj
  | NormalizedHom.nil _ a => a
  | NormalizedHom.cons _ p _ => p.src

/-- The codomain of a normalized 1-morphism. -/
def NormalizedHom.tgt : NormalizedHom ‚Üí Obj
  | NormalizedHom.nil _ a => a
  | NormalizedHom.cons _ _  f => f.tgt

/-- Construct the `NormalizedHom.nil` term in `m`. -/
def normalizedHom.nilM [MonadMor‚ÇÅ m] (a : Obj) : m NormalizedHom := do
  return NormalizedHom.nil (‚Üê id‚ÇÅM a) a

/-- Construct a `NormalizedHom.cons` term in `m`. -/
def NormalizedHom.consM [MonadMor‚ÇÅ m] (p : NormalizedHom) (f : Atom‚ÇÅ) :
    m NormalizedHom := do
  return NormalizedHom.cons (‚Üê comp‚ÇÅM p.e (.of f)) p f

/-- `Context œÅ` provides the context for manipulating 2-morphisms in a monoidal category or
bicategory. In particular, we will store `MonoidalCategory` or `Bicategory` instance in a context,
and use this through a reader monad when we construct the lean expressions for 2-morphisms. -/
class Context (œÅ : Type) where
  /-- Construct a context from a lean expression for a 2-morphism. -/
  mkContext? : Expr ‚Üí MetaM (Option œÅ)

export Context (mkContext?)

/-- Construct a context from a lean expression for a 2-morphism. -/
def mkContext {œÅ  : Type} [Context œÅ] (e : Expr) : MetaM œÅ := do
  match ‚Üê mkContext? e with
  | some c => return c
  | none => throwError "failed to construct a monoidal category or bicategory context from {e}"

/-- The state for the `CoherenceM œÅ` monad. -/
structure State where
  /-- The cache for evaluating lean expressions of 1-morphisms into `Mor‚ÇÅ` terms. -/
  cache : PersistentExprMap Mor‚ÇÅ := {}

/-- The monad for manipulating 2-morphisms in a monoidal category or bicategory. -/
abbrev CoherenceM (œÅ : Type) := ReaderT œÅ <| StateT State MetaM

/-- Run the `CoherenceM œÅ` monad. -/
def CoherenceM.run {Œ± œÅ : Type} (x : CoherenceM œÅ Œ±) (ctx : œÅ) (s : State := {}) :
    MetaM Œ± := do
  Prod.fst <$> ReaderT.run x ctx s

end BicategoryLike

end Tactic

end Mathlib
