/-
Copyright (c) 2025 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathlib.CategoryTheory.Whiskering

/-!
# Inserting associators and unitors


## TODO

- Inserting isomorphisms (not just morphisms). To obtain "simplified" expressions, we need to
  collect simp lemmas for isomorphisms (e.g., pentagon identities in terms of `Iso` terms).

-/

open Lean Meta Elab Qq

namespace Mathlib.Tactic

namespace Associators

open CategoryTheory

structure CategoryExpr where
  /-- The category type. -/
  type : Expr
  /-- The category structure. -/
  inst : Expr
  objLevel : Level
  morLevel : Level
  deriving Inhabited

/-- The domain of a morphism. -/
def srcExpr (Œ∑ : Expr) : MetaM CategoryExpr := do
  let Œ∑ ‚Üê whnfR (‚Üê inferType Œ∑)
  match Œ∑.getAppFn with
  | .const ``CategoryTheory.Functor [v‚ÇÅ, _, u‚ÇÅ, _] => do
    match Œ∑.getAppFnArgs with
    | (``CategoryTheory.Functor, #[C, inst, _, _]) =>
      return ‚ü®C, inst, u‚ÇÅ, v‚ÇÅ‚ü©
    | _ => throwError m!"{Œ∑} is not a functor type"
  | _ => throwError m!"{Œ∑} is not a functor type"

/-- The codomain of a morphism. -/
def tgtExpr (Œ∑ : Expr) : MetaM CategoryExpr := do
  let Œ∑ ‚Üê whnfR (‚Üê inferType Œ∑)
  match Œ∑.getAppFn with
  | .const ``CategoryTheory.Functor [_, v‚ÇÇ, _, u‚ÇÇ] => do
    match Œ∑.getAppFnArgs with
    | (``CategoryTheory.Functor, #[_, _, D, inst]) =>
      return ‚ü®D, inst, u‚ÇÇ, v‚ÇÇ‚ü©
    | _ => throwError m!"{Œ∑} is not a functor type"
  | _ => throwError m!"{Œ∑} is not a functor type"

def isComp? (f : Expr) : MetaM (Option (Expr √ó Expr)) := do
  match (‚Üê whnfR f).getAppFnArgs with
  | (``Functor.comp, #[_, _, _, _, _, _, f, g]) => return some (f, g)
  | _ => return none

def whiskerLeft? (fg fh : Expr) : MetaM (Option (Expr √ó Expr √ó Expr)) := do
  match (‚Üê isComp? fg, ‚Üê isComp? fh) with
  | (some (f, g), some (f', h)) =>
    match ‚Üê withReducible <| isDefEq f f' with
    | true => return some (f, g, h)
    | false => return none
  | _ => return none

def whiskerRight? (fh gh : Expr) : MetaM (Option (Expr √ó Expr √ó Expr)) := do
  match (‚Üê isComp? fh, ‚Üê isComp? gh) with
  | (some (f, h), some (g, h')) =>
    match ‚Üê withReducible <| isDefEq h h' with
    | true => return some (f, g, h)
    | false => return none
  | _ => return none

def refl? (f g : Expr) : MetaM (Option Expr) := do
  match ‚Üê withReducible <| isDefEq f g with
  | true => return some f
  | false => return none

def postCompTgt? (f fg : Expr) : MetaM (Option (Expr √ó Expr)) := do
  match ‚Üê isComp? fg with
  | some (f', g) =>
    match ‚Üê withReducible <| isDefEq f f' with
    | true => return (f, g)
    | _ => return none
  | none => return none

def postCompSrc? (fg g : Expr) : MetaM (Option (Expr √ó Expr)) := do
  match ‚Üê isComp? fg with
  | some (f, g') =>
    match ‚Üê withReducible <| isDefEq g g' with
    | true => return (f, g)
    | false => return none
  | none => return none

def leftUnitor? (id_f g : Expr) : MetaM (Option (Expr √ó Expr)) := do
  match ‚Üê isComp? id_f with
  | some (_id, f) =>
    let _A ‚Üê srcExpr f
    have u‚ÇÅ := _A.objLevel
    have v‚ÇÅ := _A.morLevel
    have A : Q(Type u‚ÇÅ) := _A.type
    have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
    match ‚Üê withReducible <| isDefEq _id q(ùü≠ $A) with
    | true => return some (f, g)
    | false => return none
  | none => return none

def leftUnitorInv? (f id_g : Expr) : MetaM (Option (Expr √ó Expr)) := do
  match ‚Üê isComp? id_g with
  | some (_id, g) =>
    let _A ‚Üê srcExpr g
    have u‚ÇÅ := _A.objLevel
    have v‚ÇÅ := _A.morLevel
    have A : Q(Type u‚ÇÅ) := _A.type
    have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
    match ‚Üê withReducible <| isDefEq _id q(ùü≠ $A) with
    | true => return some (f, g)
    | false => return none
  | none => return none

def rightUnitor? (f_id g : Expr) : MetaM (Option (Expr √ó Expr)) := do
  match ‚Üê isComp? f_id with
  | some (f, _id) =>
    let _B ‚Üê tgtExpr f
    have u‚ÇÅ := _B.objLevel
    have v‚ÇÅ := _B.morLevel
    have B : Q(Type u‚ÇÅ) := _B.type
    have _instB : Q(Category.{v‚ÇÅ} $B) := _B.inst
    match ‚Üê withReducible <| isDefEq _id q(ùü≠ $B) with
    | true => return some (f, g)
    | false => return none
  | none => return none

def rightUnitorInv? (f g_id : Expr) : MetaM (Option (Expr √ó Expr)) := do
  match ‚Üê isComp? g_id with
  | some (g, _id) =>
    let _B ‚Üê tgtExpr g
    have u‚ÇÅ := _B.objLevel
    have v‚ÇÅ := _B.morLevel
    have B : Q(Type u‚ÇÅ) := _B.type
    have _instB : Q(Category.{v‚ÇÅ} $B) := _B.inst
    match ‚Üê withReducible <| isDefEq _id q(ùü≠ $B) with
    | true => return some (f, g)
    | false => return none
  | none => return none

def assoc? (fgh i : Expr) : MetaM (Option (Expr √ó Expr √ó Expr √ó Expr)) := do
  match ‚Üê isComp? fgh with
  | some (fg, h) =>
    match ‚Üê isComp? fg with
    | some (f, g) => return some (f, g, h, i)
    | none => return none
  | none => return none

def assocInv? (i fgh : Expr) : MetaM (Option (Expr √ó Expr √ó Expr √ó Expr)) := do
  match ‚Üê isComp? fgh with
  | some (fg, h) =>
    match ‚Üê isComp? fg with
    | some (f, g) => return some (f, g, h, i)
    | none => return none
  | none => return none

partial def associators (f g : Expr) : MetaM Expr := do
  withIncRecDepth do
    match ‚Üê refl? f g with
    | some f => do
      let _A ‚Üê srcExpr f
      let _B ‚Üê tgtExpr f
      let u‚ÇÅ := _A.objLevel
      let v‚ÇÅ := _A.morLevel
      let u‚ÇÇ := _B.objLevel
      let v‚ÇÇ := _B.morLevel
      have A : Q(Type u‚ÇÅ) := _A.type
      have B : Q(Type u‚ÇÇ) := _B.type
      have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
      have _instB : Q(Category.{v‚ÇÇ} $B) := _B.inst
      have f : Q($A ‚•§ $B) := f
      return q(Iso.refl $f)
    | _ => do
    match ‚Üê leftUnitor? f g with
    | some (f, g) => do
      let _A ‚Üê srcExpr f
      let _B ‚Üê tgtExpr f
      have u‚ÇÅ := _A.objLevel
      have v‚ÇÅ := _A.morLevel
      have u‚ÇÇ := _B.objLevel
      have v‚ÇÇ := _B.morLevel
      have A : Q(Type u‚ÇÅ) := _A.type
      have B : Q(Type u‚ÇÇ) := _B.type
      have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
      have _instB : Q(Category.{v‚ÇÇ} $B) := _B.inst
      have f : Q($A ‚•§ $B) := f
      have g : Q($A ‚•§ $B) := g
      let assoc ‚Üê associators f g
      have assoc : Q($f ‚âÖ $g) := assoc
      return q(Functor.leftUnitor $f ‚â™‚â´ $assoc)
    | _ => do
    match ‚Üê leftUnitorInv? f g with
    | some (f, g) => do
      let _A ‚Üê srcExpr f
      let _B ‚Üê tgtExpr f
      have u‚ÇÅ := _A.objLevel
      have v‚ÇÅ := _A.morLevel
      have u‚ÇÇ := _B.objLevel
      have v‚ÇÇ := _B.morLevel
      have A : Q(Type u‚ÇÅ) := _A.type
      have B : Q(Type u‚ÇÇ) := _B.type
      have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
      have _instB : Q(Category.{v‚ÇÇ} $B) := _B.inst
      have f : Q($A ‚•§ $B) := f
      have g : Q($A ‚•§ $B) := g
      let assoc ‚Üê associators f g
      have assoc : Q($f ‚âÖ $g) := assoc
      return q($assoc ‚â™‚â´ (Functor.leftUnitor $g).symm)
    | _ => do
    match ‚Üê rightUnitor? f g with
    | some (f, g) => do
      let _A ‚Üê srcExpr f
      let _B ‚Üê tgtExpr f
      have u‚ÇÅ := _A.objLevel
      have v‚ÇÅ := _A.morLevel
      have u‚ÇÇ := _B.objLevel
      have v‚ÇÇ := _B.morLevel
      have A : Q(Type u‚ÇÅ) := _A.type
      have B : Q(Type u‚ÇÇ) := _B.type
      have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
      have _instB : Q(Category.{v‚ÇÇ} $B) := _B.inst
      have f : Q($A ‚•§ $B) := f
      have g : Q($A ‚•§ $B) := g
      let assoc ‚Üê associators f g
      have assoc : Q($f ‚âÖ $g) := assoc
      return q(Functor.rightUnitor $f ‚â™‚â´ $assoc)
    | _ => do
    match ‚Üê rightUnitorInv? f g with
    | some (f, g) => do
      let _A ‚Üê srcExpr f
      let _B ‚Üê tgtExpr f
      have u‚ÇÅ := _A.objLevel
      have v‚ÇÅ := _A.morLevel
      have u‚ÇÇ := _B.objLevel
      have v‚ÇÇ := _B.morLevel
      have A : Q(Type u‚ÇÅ) := _A.type
      have B : Q(Type u‚ÇÇ) := _B.type
      have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
      have _instB : Q(Category.{v‚ÇÇ} $B) := _B.inst
      have f : Q($A ‚•§ $B) := f
      have g : Q($A ‚•§ $B) := g
      let assoc ‚Üê associators f g
      have assoc : Q($f ‚âÖ $g) := assoc
      return q($assoc ‚â™‚â´ (Functor.rightUnitor $g).symm)

    | _ => do
    match ‚Üê whiskerLeft? f g with
    | some (f, g, h) => do
      let _A ‚Üê srcExpr f
      let _B ‚Üê tgtExpr f
      let _C ‚Üê tgtExpr g
      let u‚ÇÅ := _A.objLevel
      let v‚ÇÅ := _A.morLevel
      let u‚ÇÇ := _B.objLevel
      let v‚ÇÇ := _B.morLevel
      let u‚ÇÉ := _C.objLevel
      let v‚ÇÉ := _C.morLevel
      have A : Q(Type u‚ÇÅ) := _A.type
      have B : Q(Type u‚ÇÇ) := _B.type
      have C : Q(Type u‚ÇÉ) := _C.type
      have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
      have _instB : Q(Category.{v‚ÇÇ} $B) := _B.inst
      have _instC : Q(Category.{v‚ÇÉ} $C) := _C.inst
      have f : Q($A ‚•§ $B) := f
      have g : Q($B ‚•§ $C) := g
      have h : Q($B ‚•§ $C) := h
      let assoc ‚Üê associators g h
      have assoc : Q($g ‚âÖ $h) := assoc
      return q(Functor.isoWhiskerLeft $f $assoc)
    | _ => do
    match ‚Üê whiskerRight? f g with
    | some (f, g, h) => do
      let _A ‚Üê srcExpr f
      let _B ‚Üê tgtExpr f
      let _C ‚Üê tgtExpr h
      let u‚ÇÅ := _A.objLevel
      let v‚ÇÅ := _A.morLevel
      let u‚ÇÇ := _B.objLevel
      let v‚ÇÇ := _B.morLevel
      let u‚ÇÉ := _C.objLevel
      let v‚ÇÉ := _C.morLevel
      have A : Q(Type u‚ÇÅ) := _A.type
      have B : Q(Type u‚ÇÇ) := _B.type
      have C : Q(Type u‚ÇÉ) := _C.type
      have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
      have _instB : Q(Category.{v‚ÇÇ} $B) := _B.inst
      have _instC : Q(Category.{v‚ÇÉ} $C) := _C.inst
      have f : Q($A ‚•§ $B) := f
      have g : Q($A ‚•§ $B) := g
      have h : Q($B ‚•§ $C) := h
      let assoc ‚Üê associators f g
      have assoc : Q($f ‚âÖ $g) := assoc
      return q(Functor.isoWhiskerRight $assoc $h)
    | _ => do
    match ‚Üê postCompTgt? f g with
    | some (f, g) => do
      let _A ‚Üê srcExpr f
      let _B ‚Üê tgtExpr f
      let u‚ÇÅ := _A.objLevel
      let v‚ÇÅ := _A.morLevel
      let u‚ÇÇ := _B.objLevel
      let v‚ÇÇ := _B.morLevel
      have A : Q(Type u‚ÇÅ) := _A.type
      have B : Q(Type u‚ÇÇ) := _B.type
      have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
      have _instB : Q(Category.{v‚ÇÇ} $B) := _B.inst
      have f : Q($A ‚•§ $B) := f
      have g : Q($B ‚•§ $B) := g
      let assoc ‚Üê associators q(ùü≠ $B) g
      have assoc : Q(ùü≠ $B ‚âÖ $g) := assoc
      return q((Functor.rightUnitor $f).symm ‚â™‚â´ (Functor.isoWhiskerLeft $f $assoc))
    | _ => do
    match ‚Üê postCompSrc? f g with
    | some (f, g) => do
      let _A ‚Üê srcExpr f
      let _B ‚Üê tgtExpr f
      let u‚ÇÅ := _A.objLevel
      let v‚ÇÅ := _A.morLevel
      let u‚ÇÇ := _B.objLevel
      let v‚ÇÇ := _B.morLevel
      have A : Q(Type u‚ÇÅ) := _A.type
      have B : Q(Type u‚ÇÇ) := _B.type
      have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
      have _instB : Q(Category.{v‚ÇÇ} $B) := _B.inst
      have f : Q($A ‚•§ $B) := f
      have g : Q($B ‚•§ $B) := g
      let assoc ‚Üê associators g q(ùü≠ $B)
      have assoc : Q($g ‚âÖ ùü≠ $B) := assoc
      return q(Functor.isoWhiskerLeft $f $assoc ‚â™‚â´ Functor.rightUnitor $f)
    | _ => do
    match ‚Üê assoc? f g with
    | some (f, g, h, i) => do
      let _A ‚Üê srcExpr f
      let _B ‚Üê tgtExpr f
      let _C ‚Üê tgtExpr g
      let _D ‚Üê tgtExpr h
      have u‚ÇÅ := _A.objLevel
      have v‚ÇÅ := _A.morLevel
      have u‚ÇÇ := _B.objLevel
      have v‚ÇÇ := _B.morLevel
      have u‚ÇÉ := _C.objLevel
      have v‚ÇÉ := _C.morLevel
      have u‚ÇÑ := _D.objLevel
      have v‚ÇÑ := _D.morLevel
      have A : Q(Type u‚ÇÅ) := _A.type
      have B : Q(Type u‚ÇÇ) := _B.type
      have C : Q(Type u‚ÇÉ) := _C.type
      have D : Q(Type u‚ÇÑ) := _D.type
      have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
      have _instB : Q(Category.{v‚ÇÇ} $B) := _B.inst
      have _instC : Q(Category.{v‚ÇÉ} $C) := _C.inst
      have _instD : Q(Category.{v‚ÇÑ} $D) := _D.inst
      have f : Q($A ‚•§ $B) := f
      have g : Q($B ‚•§ $C) := g
      have h : Q($C ‚•§ $D) := h
      have i : Q($A ‚•§ $D) := i
      let assoc ‚Üê associators q($f ‚ãô $g ‚ãô $h) i
      have assoc : Q($f ‚ãô $g ‚ãô $h ‚âÖ $i) := assoc
      return q(Functor.associator $f $g $h ‚â™‚â´ $assoc)
    | _ => do
    match ‚Üê assocInv? f g with
    | some (f, g, h, i) => do
      let _A ‚Üê srcExpr f
      let _B ‚Üê tgtExpr f
      let _C ‚Üê tgtExpr g
      let _D ‚Üê tgtExpr i
      have u‚ÇÅ := _A.objLevel
      have v‚ÇÅ := _A.morLevel
      have u‚ÇÇ := _B.objLevel
      have v‚ÇÇ := _B.morLevel
      have u‚ÇÉ := _C.objLevel
      have v‚ÇÉ := _C.morLevel
      have u‚ÇÑ := _D.objLevel
      have v‚ÇÑ := _D.morLevel
      have A : Q(Type u‚ÇÅ) := _A.type
      have B : Q(Type u‚ÇÇ) := _B.type
      have C : Q(Type u‚ÇÉ) := _C.type
      have D : Q(Type u‚ÇÑ) := _D.type
      have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
      have _instB : Q(Category.{v‚ÇÇ} $B) := _B.inst
      have _instC : Q(Category.{v‚ÇÉ} $C) := _C.inst
      have _instD : Q(Category.{v‚ÇÑ} $D) := _D.inst
      have f : Q($A ‚•§ $B) := f
      have g : Q($B ‚•§ $C) := g
      have h : Q($C ‚•§ $D) := h
      have i : Q($A ‚•§ $D) := i
      let assoc ‚Üê associators i q($f ‚ãô $g ‚ãô $h)
      have assoc : Q($i ‚âÖ $f ‚ãô $g ‚ãô $h) := assoc
      return q($assoc ‚â™‚â´ (Functor.associator $f $g $h).symm)
    | _ => do
      throwError
        m!"Failed to insert associators between {f} and {g}."

def associatorsHom (f g : Expr) : MetaM Expr := do
  let _A ‚Üê srcExpr f
  let _B ‚Üê tgtExpr f
  have u‚ÇÅ := _A.objLevel
  have v‚ÇÅ := _A.morLevel
  have u‚ÇÇ := _B.objLevel
  have v‚ÇÇ := _B.morLevel
  have A : Q(Type u‚ÇÅ) := _A.type
  have B : Q(Type u‚ÇÇ) := _B.type
  have _instA : Q(Category.{v‚ÇÅ} $A) := _A.inst
  have _instB : Q(Category.{v‚ÇÇ} $B) := _B.inst
  have f : Q($A ‚•§ $B) := f
  have g : Q($A ‚•§ $B) := g
  let assoc ‚Üê associators f g
  have assoc : Q($f ‚âÖ $g) := assoc
  return q(Iso.hom $assoc)

/-- The domain and the codomain of a morphism. -/
def FunctorExpr (Œ∑ : Expr) : MetaM (Expr √ó Expr) := do
  let Œ∑ ‚Üê whnfR Œ∑
  match Œ∑.getAppFnArgs with
  | (``Quiver.Hom, #[_, _, F, G]) =>
    return ‚ü®F, G‚ü©
  | _ => throwError m!"{Œ∑} is not a natural transformation type"

section SimpTheorems

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ v‚ÇÖ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÖ
variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A]
variable {B : Type u‚ÇÇ} [Category.{v‚ÇÇ} B]
variable {C : Type u‚ÇÉ} [Category.{v‚ÇÉ} C]
variable {D : Type u‚ÇÑ} [Category.{v‚ÇÑ} D]
variable {E : Type u‚ÇÖ} [Category.{v‚ÇÖ} E]

open Functor

theorem id_whiskerLeft {F G : A ‚•§ B} (Œ∑ : F ‚ü∂ G) :
    whiskerLeft (ùü≠ A) Œ∑ = (leftUnitor F).hom ‚â´ Œ∑ ‚â´ (leftUnitor G).inv := by
  aesop_cat

theorem comp_whiskerLeft (F : A ‚•§ B) (G : B ‚•§ C) {H H' : C ‚•§ D} (Œ∑ : H ‚ü∂ H') :
    whiskerLeft (F ‚ãô G) Œ∑ =
      (associator _ _ _).hom ‚â´ (whiskerLeft F (whiskerLeft G Œ∑)) ‚â´ (associator _ _ _).inv := by
  aesop_cat

theorem whiskerRight_id {F G : A ‚•§ B} (Œ∑ : F ‚ü∂ G) :
    whiskerRight Œ∑ (ùü≠ B) = (rightUnitor F).hom ‚â´ Œ∑ ‚â´ (rightUnitor G).inv := by
  aesop_cat

theorem whiskerRight_comp {F F' : A ‚•§ B} (Œ∑ : F ‚ü∂ F') (G : B ‚•§ C) (H : C ‚•§ D) :
    whiskerRight Œ∑ (G ‚ãô H) =
      (associator _ _ _).inv ‚â´ whiskerRight (whiskerRight Œ∑ G) H ‚â´ (associator _ _ _).hom := by
  aesop_cat

theorem whisker_assoc (F : A ‚•§ B) {G G' : B ‚•§ C} (Œ∑ : G ‚ü∂ G') (H : C ‚•§ D) :
    whiskerRight (whiskerLeft F Œ∑) H =
      (associator _ _ _).hom ‚â´ whiskerLeft F (whiskerRight Œ∑ H) ‚â´ (associator _ _ _).inv := by
  aesop_cat

local infixr:81 " ‚óÅ " => Functor.whiskerLeft
local infixl:81 " ‚ñ∑ " => Functor.whiskerRight
local notation "Œ±_" => Functor.associator
local notation "Œª_" => Functor.leftUnitor
local notation "œÅ_" => Functor.rightUnitor

attribute [reassoc] Functor.pentagon

@[reassoc]
theorem pentagon_inv (f : A ‚•§ B) (g : B ‚•§ C) (h : C ‚•§ D) (i : D ‚•§ E) :
    f ‚óÅ (Œ±_ g h i).inv ‚â´ (Œ±_ f (g ‚ãô h) i).inv ‚â´ (Œ±_ f g h).inv ‚ñ∑ i =
      (Œ±_ f g (h ‚ãô i)).inv ‚â´ (Œ±_ (f ‚ãô g) h i).inv := by
  aesop_cat

@[reassoc]
theorem pentagon_inv_inv_hom_hom_inv (f : A ‚•§ B) (g : B ‚•§ C) (h : C ‚•§ D) (i : D ‚•§ E) :
    (Œ±_ f (g ‚ãô h) i).inv ‚â´ (Œ±_ f g h).inv ‚ñ∑ i ‚â´ (Œ±_ (f ‚ãô g) h i).hom =
    f ‚óÅ (Œ±_ g h i).hom ‚â´ (Œ±_ f g (h ‚ãô i)).inv := by
  aesop_cat

@[reassoc]
theorem pentagon_inv_hom_hom_hom_inv (f : A ‚•§ B) (g : B ‚•§ C) (h : C ‚•§ D) (i : D ‚•§ E) :
    (Œ±_ (f ‚ãô g) h i).inv ‚â´ (Œ±_ f g h).hom ‚ñ∑ i ‚â´ (Œ±_ f (g ‚ãô h) i).hom =
      (Œ±_ f g (h ‚ãô i)).hom ‚â´ f ‚óÅ (Œ±_ g h i).inv := by
  aesop_cat

@[reassoc]
theorem pentagon_hom_inv_inv_inv_inv (f : A ‚•§ B) (g : B ‚•§ C) (h : C ‚•§ D) (i : D ‚•§ E) :
    f ‚óÅ (Œ±_ g h i).hom ‚â´ (Œ±_ f g (h ‚ãô i)).inv ‚â´ (Œ±_ (f ‚ãô g) h i).inv =
      (Œ±_ f (g ‚ãô h) i).inv ‚â´ (Œ±_ f g h).inv ‚ñ∑ i := by
  aesop_cat

@[reassoc]
theorem pentagon_hom_hom_inv_hom_hom (f : A ‚•§ B) (g : B ‚•§ C) (h : C ‚•§ D) (i : D ‚•§ E) :
    (Œ±_ (f ‚ãô g) h i).hom ‚â´ (Œ±_ f g (h ‚ãô i)).hom ‚â´ f ‚óÅ (Œ±_ g h i).inv =
      (Œ±_ f g h).hom ‚ñ∑ i ‚â´ (Œ±_ f (g ‚ãô h) i).hom := by
  aesop_cat

@[reassoc]
theorem pentagon_hom_inv_inv_inv_hom (f : A ‚•§ B) (g : B ‚•§ C) (h : C ‚•§ D) (i : D ‚•§ E) :
    (Œ±_ f g (h ‚ãô i)).hom ‚â´ f ‚óÅ (Œ±_ g h i).inv ‚â´ (Œ±_ f (g ‚ãô h) i).inv =
    (Œ±_ (f ‚ãô g) h i).inv ‚â´ (Œ±_ f g h).hom ‚ñ∑ i := by
  aesop_cat

@[reassoc]
theorem pentagon_hom_hom_inv_inv_hom (f : A ‚•§ B) (g : B ‚•§ C) (h : C ‚•§ D) (i : D ‚•§ E) :
    (Œ±_ f (g ‚ãô h) i).hom ‚â´ f ‚óÅ (Œ±_ g h i).hom ‚â´ (Œ±_ f g (h ‚ãô i)).inv =
      (Œ±_ f g h).inv ‚ñ∑ i ‚â´ (Œ±_ (f ‚ãô g) h i).hom := by
  aesop_cat

@[reassoc]
theorem pentagon_inv_hom_hom_hom_hom (f : A ‚•§ B) (g : B ‚•§ C) (h : C ‚•§ D) (i : D ‚•§ E) :
    (Œ±_ f g h).inv ‚ñ∑ i ‚â´ (Œ±_ (f ‚ãô g) h i).hom ‚â´ (Œ±_ f g (h ‚ãô i)).hom =
      (Œ±_ f (g ‚ãô h) i).hom ‚â´ f ‚óÅ (Œ±_ g h i).hom := by
  aesop_cat

@[reassoc]
theorem pentagon_inv_inv_hom_inv_inv (f : A ‚•§ B) (g : B ‚•§ C) (h : C ‚•§ D) (i : D ‚•§ E) :
    (Œ±_ f g (h ‚ãô i)).inv ‚â´ (Œ±_ (f ‚ãô g) h i).inv ‚â´ (Œ±_ f g h).hom ‚ñ∑ i =
      f ‚óÅ (Œ±_ g h i).inv ‚â´ (Œ±_ f (g ‚ãô h) i).inv := by
  aesop_cat

attribute [reassoc] Functor.triangle

@[reassoc]
theorem triangle_assoc_comp_right (f : A ‚•§ B) (g : B ‚•§ C) :
    (Œ±_ f (ùü≠ B) g).inv ‚â´ (œÅ_ f).hom ‚ñ∑ g = f ‚óÅ (Œª_ g).hom := by
  aesop_cat

@[reassoc]
theorem triangle_assoc_comp_right_inv (f : A ‚•§ B) (g : B ‚•§ C) :
    (œÅ_ f).inv ‚ñ∑ g ‚â´ (Œ±_ f (ùü≠ B) g).hom = f ‚óÅ (Œª_ g).inv := by
  aesop_cat

@[reassoc]
theorem triangle_assoc_comp_left_inv (f : A ‚•§ B) (g : B ‚•§ C) :
    f ‚óÅ (Œª_ g).inv ‚â´ (Œ±_ f (ùü≠ B) g).inv = (œÅ_ f).inv ‚ñ∑ g := by
  aesop_cat

theorem leftUnitor_whiskerRight (F : A ‚•§ B) (G : B ‚•§ C) :
    (Œª_ F).hom ‚ñ∑ G = (Œ±_ (ùü≠ A) F G).hom ‚â´ (Œª_ (F ‚ãô G)).hom := by
  aesop_cat

theorem leftUnitor_inv_whiskerRight (F : A ‚•§ B) (G : B ‚•§ C) :
    (Œª_ F).inv ‚ñ∑ G = (Œª_ (F ‚ãô G)).inv ‚â´ (Œ±_ (ùü≠ A) F G).inv := by
  aesop_cat

theorem whiskerLeft_rightUnitor (F : A ‚•§ B) (G : B ‚•§ C) :
    F ‚óÅ (œÅ_ G).hom = (Œ±_ F G (ùü≠ C)).inv ‚â´ (œÅ_ (F ‚ãô G)).hom := by
  aesop_cat

theorem whiskerLeft_rightUnitor_inv (F : A ‚•§ B) (G : B ‚•§ C) :
    F ‚óÅ (œÅ_ G).inv = (œÅ_ (F ‚ãô G)).inv ‚â´ (Œ±_ F G (ùü≠ C)).hom := by
  aesop_cat

def simpTheoremNames : Array Name :=
  #[``Category.id_comp, ``Category.comp_id, ``Category.assoc,
    ``Iso.hom_inv_id, ``Iso.hom_inv_id_assoc,
    ``Iso.inv_hom_id, ``Iso.inv_hom_id_assoc,
    ``Functor.whiskerLeft_id', ``Functor.whiskerRight_id',
    ``Functor.whiskerLeft_comp, ``Functor.whiskerRight_comp,
    ``Associators.id_whiskerLeft, ``Associators.comp_whiskerLeft,
    ``Associators.whiskerRight_id, ``Associators.whiskerRight_comp,
    ``Associators.whisker_assoc,
    ``Functor.pentagon, ``Functor.pentagon_assoc,
    ``Associators.pentagon_inv, ``Associators.pentagon_inv_assoc,
    ``Associators.pentagon_inv_inv_hom_hom_inv, ``Associators.pentagon_inv_inv_hom_hom_inv_assoc,
    ``Associators.pentagon_inv_hom_hom_hom_inv, ``Associators.pentagon_inv_hom_hom_hom_inv_assoc,
    ``Associators.pentagon_hom_inv_inv_inv_inv, ``Associators.pentagon_hom_inv_inv_inv_inv_assoc,
    ``Associators.pentagon_hom_hom_inv_hom_hom, ``Associators.pentagon_hom_hom_inv_hom_hom_assoc,
    ``Associators.pentagon_hom_inv_inv_inv_hom, ``Associators.pentagon_hom_inv_inv_inv_hom_assoc,
    ``Associators.pentagon_hom_hom_inv_inv_hom, ``Associators.pentagon_hom_hom_inv_inv_hom_assoc,
    ``Associators.pentagon_inv_hom_hom_hom_hom, ``Associators.pentagon_inv_hom_hom_hom_hom_assoc,
    ``Associators.pentagon_inv_inv_hom_inv_inv, ``Associators.pentagon_inv_inv_hom_inv_inv_assoc,
    ``Functor.triangle, ``Functor.triangle_assoc,
    ``Associators.triangle_assoc_comp_right, ``Associators.triangle_assoc_comp_right_assoc,
    ``Associators.triangle_assoc_comp_right_inv, ``Associators.triangle_assoc_comp_right_inv_assoc,
    ``Associators.triangle_assoc_comp_left_inv, ``Associators.triangle_assoc_comp_left_inv_assoc,
    ``Associators.leftUnitor_whiskerRight,
    ``Associators.leftUnitor_inv_whiskerRight,
    ``Associators.whiskerLeft_rightUnitor,
    ``Associators.whiskerLeft_rightUnitor_inv,
    ``Iso.refl_hom, ``Iso.refl_inv, ``Iso.trans_hom, ``Iso.trans_inv,
    ``Iso.symm_hom, ``Iso.symm_inv,
    ``Functor.isoWhiskerLeft_hom, ``Functor.isoWhiskerLeft_inv,
    ``Functor.isoWhiskerRight_hom, ``Functor.isoWhiskerRight_inv,
    ``Functor.isoWhiskerLeft_trans, ``Functor.isoWhiskerRight_trans]

end SimpTheorems

syntax (name := assoc) "assoc%" : term

@[term_elab assoc]
def elabAssociators : Term.TermElab := fun _ expectedType? => do
  match expectedType? with
  | none => throwError "expected type not provided for `assoc%`"
  | some e =>
    let ‚ü®F, G‚ü© ‚Üê FunctorExpr e
    let Œ± ‚Üê associatorsHom F G
    let thms := (‚Üê simpTheoremNames.mapM (fun n => mkSimpTheoremFromConst n)).flatten
    let thms : SimpTheorems := (thms.foldl (¬∑.addSimpTheorem ¬∑)) {}
    let (Œ±', _) ‚Üê simp Œ± (‚Üê Simp.mkContext (simpTheorems := #[thms]))
    Tactic.TryThis.addTermSuggestion (‚Üê getRef) Œ±'.expr
    return Œ±'.expr

end Associators

end Mathlib.Tactic
