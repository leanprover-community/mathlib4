/-
Copyright (c) 2023 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import Mathlib.Algebra.Order.BigOperators.Group.Finset
import Mathlib.Data.Finset.Density
import Mathlib.Tactic.NormNum.Basic
import Mathlib.Tactic.Positivity.Core

/-!
# Positivity extensions for finsets

This file provides a few `positivity` extensions that cannot be in either the finset files (because
they don't know about ordered fields) or in `Tactic.Positivity.Basic` (because it doesn't want to
know about finiteness).
-/

namespace Mathlib.Meta.Positivity

open Qq Lean Meta Finset

/-- Extension for `Finset.card`. `#s` is positive if `s` is nonempty.

It calls `Mathlib.Meta.proveFinsetNonempty` to attempt proving that the finset is nonempty. -/
@[positivity Finset.card _]
def evalFinsetCard : PositivityExt where eval {u Œ±} _ _ e := do
  match u, Œ±, e with
  | 0, ~q(‚Ñï), ~q(Finset.card $s) =>
    let some ps ‚Üê proveFinsetNonempty s | return .none
    assertInstancesCommute
    return .positive q(Finset.Nonempty.card_pos $ps)
  | _ => throwError "not Finset.card"

/-- Extension for `Fintype.card`. `Fintype.card Œ±` is positive if `Œ±` is nonempty. -/
@[positivity Fintype.card _]
def evalFintypeCard : PositivityExt where eval {u Œ±} _ _ e := do
  match u, Œ±, e with
  | 0, ~q(‚Ñï), ~q(@Fintype.card $Œ≤ $instŒ≤) =>
    let instŒ≤no ‚Üê synthInstanceQ q(Nonempty $Œ≤)
    assumeInstancesCommute
    return .positive q(@Fintype.card_pos $Œ≤ $instŒ≤ $instŒ≤no)
  | _ => throwError "not Fintype.card"

/-- Extension for `Finset.dens`. `s.dens` is positive if `s` is nonempty.

It calls `Mathlib.Meta.proveFinsetNonempty` to attempt proving that the finset is nonempty. -/
@[positivity Finset.dens _]
def evalFinsetDens : PositivityExt where eval {u ùïú} _ _ e := do
  match u, ùïú, e with
  | 0, ~q(‚Ñö‚â•0), ~q(@Finset.dens $Œ± $instŒ± $s) =>
    let some ps ‚Üê proveFinsetNonempty s | return .none
    assumeInstancesCommute
    return .positive q(@Nonempty.dens_pos $Œ± $instŒ± $s $ps)
  | _, _, _ => throwError "not Finset.dens"

attribute [local instance] monadLiftOptionMetaM in
/-- The `positivity` extension which proves that `‚àë i ‚àà s, f i` is nonnegative if `f` is, and
positive if each `f i` is and `s` is nonempty.

TODO: The following example does not work
```
example (s : Finset ‚Ñï) (f : ‚Ñï ‚Üí ‚Ñ§) (hf : ‚àÄ n, 0 ‚â§ f n) : 0 ‚â§ s.sum f := by positivity
```
because `compareHyp` can't look for assumptions behind binders.
-/
@[positivity Finset.sum _ _]
def evalFinsetSum : PositivityExt where eval {u Œ±} zŒ± pŒ± e := do
  match e with
  | ~q(@Finset.sum $Œπ _ $instŒ± $s $f) =>
    let i : Q($Œπ) ‚Üê mkFreshExprMVarQ q($Œπ) .syntheticOpaque
    have body : Q($Œ±) := .betaRev f #[i]
    let rbody ‚Üê core zŒ± pŒ± body
    let p_pos : Option Q(0 < $e) := ‚Üê (do
      let .positive pbody := rbody | pure none -- Fail if the body is not provably positive
      let .some ps ‚Üê proveFinsetNonempty s | pure none
      let .some pŒ±' ‚Üê trySynthInstanceQ q(OrderedCancelAddCommMonoid $Œ±) | pure none
      assertInstancesCommute
      let pr : Q(‚àÄ i, 0 < $f i) ‚Üê mkLambdaFVars #[i] pbody
      return some q(@sum_pos $Œπ $Œ± $pŒ±' $f $s (fun i _ ‚Ü¶ $pr i) $ps))
    -- Try to show that the sum is positive
    if let some p_pos := p_pos then
      return .positive p_pos
    -- Fall back to showing that the sum is nonnegative
    else
      let pbody ‚Üê rbody.toNonneg
      let pr : Q(‚àÄ i, 0 ‚â§ $f i) ‚Üê mkLambdaFVars #[i] pbody
      let pŒ±' ‚Üê synthInstanceQ q(OrderedAddCommMonoid $Œ±)
      assertInstancesCommute
      return .nonnegative q(@sum_nonneg $Œπ $Œ± $pŒ±' $f $s fun i _ ‚Ü¶ $pr i)
  | _ => throwError "not Finset.sum"

variable {Œ± : Type*} {s : Finset Œ±}

example : 0 ‚â§ #s := by positivity
example (hs : s.Nonempty) : 0 < #s := by positivity

variable [Fintype Œ±]

example : 0 ‚â§ Fintype.card Œ± := by positivity
example : 0 ‚â§ dens s := by positivity
example (hs : s.Nonempty) : 0 < dens s := by positivity
example (hs : s.Nonempty) : dens s ‚â† 0 := by positivity
example [Nonempty Œ±] : 0 < #(univ : Finset Œ±) := by positivity
example [Nonempty Œ±] : 0 < Fintype.card Œ± := by positivity
example [Nonempty Œ±] : 0 < dens (univ : Finset Œ±) := by positivity
example [Nonempty Œ±] : dens (univ : Finset Œ±) ‚â† 0 := by positivity

example {G : Type*} {A : Finset G} :
  let f := fun _ : G ‚Ü¶ 1; (‚àÄ s, f s ^ 2 = 1) ‚Üí 0 ‚â§ #A := by
  intros
  positivity -- Should succeed despite failing to prove `A` is nonempty.

end Mathlib.Meta.Positivity
