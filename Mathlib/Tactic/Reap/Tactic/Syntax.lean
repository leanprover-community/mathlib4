import Lean.Widget.UserWidget

import Mathlib.Tactic.Reap.Options
import Mathlib.Tactic.Reap.Tactic.Generator
import Mathlib.Tactic.Reap.Future.PP

open Lean Elab Tactic

/-  This function is modified from LLMLean.
    Display clickable suggestions in the VSCode Lean Infoview.
    When a suggestion is clicked, this widget replaces the `llmstep` call
    with the suggestion, and saves the call in an adjacent comment.
    Code based on `Std.Tactic.TryThis.tryThisWidget`. -/
@[widget_module] def llmstepTryThisWidget : Widget.UserWidgetDefinition where
  name := "Reap suggestions"
  javascript := "
import * as React from 'react';
import { EditorContext } from '@leanprover/infoview';
const e = React.createElement;
export default function(props) {
  const editorConnection = React.useContext(EditorContext)
  function onClick(suggestion) {
    editorConnection.api.applyEdit({
      changes: { [props.pos.uri]: [{ range:
        props.range,
        newText: suggestion[0]
        }] }
    })
  }
  const suggestionElement = props.suggestions.length > 0
    ? [
      'Try this: ',
      ...(props.suggestions.map((suggestion, i) =>
          [e('li', {onClick: () => onClick(suggestion),
            className:
              suggestion[1][0] === 'ProofDone' ? 'link pointer dim green' :
              suggestion[1][0] === 'Valid' ? 'link pointer dim blue' :
              'link pointer dim',
            title: 'Apply suggestion'},
            suggestion[1][0] === 'ProofDone' ? 'üéâ ' + suggestion[0] : suggestion[0]
        ), e('div', null, suggestion[1][1])]
      )),
      props.info
    ]
    : 'No valid suggestions.';
  return e('div',
  {className: 'ml1'},
  e('ul', {className: 'font-code pre-wrap'},
  suggestionElement))
}"

inductive CheckResult : Type
  | ProofDone
  | Valid
  | Invalid
  deriving ToJson, Ord, Repr, Inhabited

instance : ToString CheckResult where
  toString
    | CheckResult.ProofDone => "ProofDone"
    | CheckResult.Valid => "Valid"
    | CheckResult.Invalid => "Invalid"
-- def runSuggestUntilFailure (generator : ) (proofState : List MVarId) : TacticM <| List <| List MVarId := sorry

def getNumErrors : CoreM Nat := do
  let log := (‚Üê getThe Core.State).messages
  return (log.unreported.map fun m =>
    if m.severity matches .error then 1 else 0).foldl (fun a b => a + b) 0

/- Check whether the suggestion `s` completes the proof, is valid (does
not result in an error message), or is invalid. -/
def checkTactic (tacticStr: String) : TacticM <| CheckResult √ó String := do
  withoutModifyingState do
    try
      match Parser.runParserCategory (‚Üê getEnv) `tactic tacticStr with
        | Except.ok stx =>
          -- logInfo m!"Checking suggestion: {s}"
          try
            _ ‚Üê evalTactic stx
            let goals ‚Üê getUnsolvedGoals

            if (‚Üê getThe Core.State).messages.hasErrors then
              pure (CheckResult.Invalid, "error")
            else if goals.isEmpty then
              pure (CheckResult.ProofDone, "no goals")
            else
              let goal ‚Üê getMainGoal
              Elab.Tactic.withMainContext do
              pure (CheckResult.Valid, toString <| ‚Üê Meta.ppGoalType goal)
              -- pure (CheckResult.Valid, "")
          catch e =>
            -- logInfo m!"All messages: {(‚Üê getThe Core.State).messages.unreported}"
            logInfo m!"Number of errors: {(‚Üê getNumErrors)}"
            logError m!"Error while checking suggestion 1: {e.toMessageData}"
            pure (CheckResult.Invalid, "error")
        | Except.error e =>
          logError m!"Error while parsing suggestion 2: {e}"
          pure (CheckResult.Invalid, "error")
    catch e =>
      logError m!"Error while evaluating suggestion 3: {e.toMessageData}"
      pure (CheckResult.Invalid, "error")


/- Adds multiple suggestions to the Lean InfoView.
   Code based on `Std.Tactic.addSuggestion`. -/
def addSuggestions (tacRef : Syntax) (suggestions: Array (String √ó Float))
    (origSpan? : Option Syntax := none)
    (extraMsg : String := "") : TacticM Unit := do
  let suggestions := suggestions.map fun ‚ü®x, _‚ü© => x
  if let some tacticRange := (origSpan?.getD tacRef).getRange? then
    -- if let some argRange := (origSpan?.getD pfxRef).getRange? then
      let map ‚Üê getFileMap
      let start := String.findLineStart map.source tacticRange.start
      let body := map.source.findAux (¬∑ ‚â† ' ') tacticRange.start start

      let checks ‚Üê suggestions.mapM checkTactic
      let texts := suggestions.map fun text => (
        (Std.Format.pretty text.trim
         (indent := (body - start).1)
         (column := (tacticRange.start - start).1)
      ))
      let textsAndChecks := (texts.zip checks |>.qsort
        fun a b => compare a.2.1 b.2.1 = Ordering.lt).filter fun x =>
          match x.2.1 with
          | CheckResult.ProofDone => true
          | CheckResult.Valid => true
          | CheckResult.Invalid => false

      let start := (tacRef.getRange?.getD tacticRange).start
      let stop := (tacRef.getRange?.getD tacticRange).stop
      let stxRange :=

      { start := map.lineStart (map.toPosition start).line
        stop := map.lineStart ((map.toPosition stop).line + 1) }
      let full_range : String.Range :=
      { start := tacticRange.start, stop := tacticRange.stop }
      let full_range := map.utf8RangeToLspRange full_range
      let tactic := Std.Format.pretty f!"{tacRef.prettyPrint}{tacRef.prettyPrint}"
      let json := Json.mkObj [
        ("tactic", tactic),
        ("suggestions", toJson textsAndChecks),
        ("range", toJson full_range),
        ("info", extraMsg)
      ]
      Widget.savePanelWidgetInfo (hash llmstepTryThisWidget.javascript) (StateT.lift json) (.ofRange stxRange)



def reaperTac (g : MVarId) : TacticM Unit := do
  let suggestions ‚Üê TacticGenerator.generateTactics g
  if suggestions.isEmpty then
    logInfo m!"No suggestions generated."
  else
    let suggestionsWithChecks := (‚Üê suggestions.mapM fun s => do
      let (check, info) ‚Üê checkTactic s.1
      return (s.1, (check, info)))
    let validSuggestions := suggestionsWithChecks.filter fun x =>
      let check := x.2.1
      match check with
      | .ProofDone => true
      | .Valid => true
      | .Invalid => false
    if validSuggestions.isEmpty then
      throwError "No valid suggestions generated."
    else
      let firstSugg := validSuggestions[0]!.1
      match Parser.runParserCategory (‚Üê getEnv) `tactic firstSugg with
      | Except.ok stx =>
        -- logInfo m!"Applying suggestion: {firstSugg}"
        evalTactic stx
      | Except.error e =>
        throwError "Error while parsing suggestion: {e}"

def reaper!Tac (g : MVarId) : TacticM Unit := do
  let suggestions ‚Üê TacticGenerator.generateTactics g
  if suggestions.isEmpty then
    logInfo m!"No suggestions generated."
  else
    let suggestionsWithChecks := (‚Üê suggestions.mapM fun s => do
      let (check, info) ‚Üê checkTactic s.1
      return (s.1, (check, info)))
    let validSuggestions := suggestionsWithChecks.filter fun x =>
      let check := x.2.1
      match check with
      | .ProofDone => true
      | .Valid => false
      | .Invalid => false
    if validSuggestions.isEmpty then
      throwError "No valid suggestions generated."
    else
      let firstSugg := validSuggestions[0]!.1
      match Parser.runParserCategory (‚Üê getEnv) `tactic firstSugg with
      | Except.ok stx =>
        -- logInfo m!"Applying suggestion: {firstSugg}"
        evalTactic stx
      | Except.error e =>
        throwError "Error while parsing suggestion: {e}"
/--
Call the LLM on a goal, asking for suggestions beginning with a prefix.
-/
def reaper?Tac (g : MVarId) : MetaM (Array (String √ó Float)) :=
  TacticGenerator.generateTactics g

syntax "reap" : tactic
elab_rules : tactic
  | `(tactic | reap) => do
    let g ‚Üê getMainGoal
    reaperTac g

syntax "reap?" : tactic
elab_rules : tactic
  | `(tactic | reap?%$tac) => do
    addSuggestions tac (‚Üê liftMetaMAtMain reaper?Tac)

syntax "reap!" : tactic
elab_rules : tactic
  | `(tactic | reap!) => do
    let g ‚Üê getMainGoal
    reaper!Tac g
