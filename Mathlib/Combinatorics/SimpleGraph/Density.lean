/-
Copyright (c) 2022 Ya√´l Dillies, Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Bhavik Mehta
-/
import Mathlib.Combinatorics.SimpleGraph.Basic
import Mathlib.Order.Partition.Finpartition
import Mathlib.Data.Rat.Cast.Order
import Mathlib.Tactic.Positivity
import Mathlib.Tactic.Ring
import Mathlib.Tactic.NormNum
import Mathlib.Tactic.GCongr

#align_import combinatorics.simple_graph.density from "leanprover-community/mathlib"@"a4ec43f53b0bd44c697bcc3f5a62edd56f269ef1"

/-!
# Edge density

This file defines the number and density of edges of a relation/graph.

## Main declarations

Between two finsets of vertices,
* `Rel.interedges`: Finset of edges of a relation.
* `Rel.edgeDensity`: Edge density of a relation.
* `SimpleGraph.interedges`: Finset of edges of a graph.
* `SimpleGraph.edgeDensity`: Edge density of a graph.
-/

open Finset

open BigOperators

variable {ùïú Œπ Œ∫ Œ± Œ≤ : Type*}

/-! ### Density of a relation -/


namespace Rel

section Asymmetric

variable [LinearOrderedField ùïú] (r : Œ± ‚Üí Œ≤ ‚Üí Prop) [‚àÄ a, DecidablePred (r a)] {s s‚ÇÅ s‚ÇÇ : Finset Œ±}
  {t t‚ÇÅ t‚ÇÇ : Finset Œ≤} {a : Œ±} {b : Œ≤} {Œ¥ : ùïú}

/-- Finset of edges of a relation between two finsets of vertices. -/
def interedges (s : Finset Œ±) (t : Finset Œ≤) : Finset (Œ± √ó Œ≤) :=
  (s √óÀ¢ t).filter fun e ‚Ü¶ r e.1 e.2
#align rel.interedges Rel.interedges

/-- Edge density of a relation between two finsets of vertices. -/
def edgeDensity (s : Finset Œ±) (t : Finset Œ≤) : ‚Ñö :=
  (interedges r s t).card / (s.card * t.card)
#align rel.edge_density Rel.edgeDensity

variable {r}

theorem mem_interedges_iff {x : Œ± √ó Œ≤} : x ‚àà interedges r s t ‚Üî x.1 ‚àà s ‚àß x.2 ‚àà t ‚àß r x.1 x.2 := by
  rw [interedges, mem_filter, Finset.mem_product, and_assoc]
#align rel.mem_interedges_iff Rel.mem_interedges_iff

theorem mk_mem_interedges_iff : (a, b) ‚àà interedges r s t ‚Üî a ‚àà s ‚àß b ‚àà t ‚àß r a b :=
  mem_interedges_iff
#align rel.mk_mem_interedges_iff Rel.mk_mem_interedges_iff

@[simp]
theorem interedges_empty_left (t : Finset Œ≤) : interedges r ‚àÖ t = ‚àÖ := by
  rw [interedges, Finset.empty_product, filter_empty]
#align rel.interedges_empty_left Rel.interedges_empty_left

theorem interedges_mono (hs : s‚ÇÇ ‚äÜ s‚ÇÅ) (ht : t‚ÇÇ ‚äÜ t‚ÇÅ) : interedges r s‚ÇÇ t‚ÇÇ ‚äÜ interedges r s‚ÇÅ t‚ÇÅ :=
  fun x ‚Ü¶ by
    simp_rw [mem_interedges_iff]
    exact fun h ‚Ü¶ ‚ü®hs h.1, ht h.2.1, h.2.2‚ü©
#align rel.interedges_mono Rel.interedges_mono

variable (r)

theorem card_interedges_add_card_interedges_compl (s : Finset Œ±) (t : Finset Œ≤) :
    (interedges r s t).card + (interedges (fun x y ‚Ü¶ ¬¨r x y) s t).card = s.card * t.card := by
  classical
  rw [‚Üê card_product, interedges, interedges, ‚Üê card_union_eq, filter_union_filter_neg_eq]
  exact disjoint_filter.2 fun _ _ ‚Ü¶ Classical.not_not.2
#align rel.card_interedges_add_card_interedges_compl Rel.card_interedges_add_card_interedges_compl

theorem interedges_disjoint_left {s s' : Finset Œ±} (hs : Disjoint s s') (t : Finset Œ≤) :
    Disjoint (interedges r s t) (interedges r s' t) := by
  rw [Finset.disjoint_left] at hs ‚ä¢
  intro _ hx hy
  rw [mem_interedges_iff] at hx hy
  exact hs hx.1 hy.1
#align rel.interedges_disjoint_left Rel.interedges_disjoint_left

theorem interedges_disjoint_right (s : Finset Œ±) {t t' : Finset Œ≤} (ht : Disjoint t t') :
    Disjoint (interedges r s t) (interedges r s t') := by
  rw [Finset.disjoint_left] at ht ‚ä¢
  intro _ hx hy
  rw [mem_interedges_iff] at hx hy
  exact ht hx.2.1 hy.2.1
#align rel.interedges_disjoint_right Rel.interedges_disjoint_right

section DecidableEq

variable [DecidableEq Œ±] [DecidableEq Œ≤]

theorem interedges_biUnion_left (s : Finset Œπ) (t : Finset Œ≤) (f : Œπ ‚Üí Finset Œ±) :
    interedges r (s.biUnion f) t = s.biUnion fun a ‚Ü¶ interedges r (f a) t := by
  ext
  simp only [mem_biUnion, mem_interedges_iff, exists_and_right, ‚Üê and_assoc]
#align rel.interedges_bUnion_left Rel.interedges_biUnion_left

theorem interedges_biUnion_right (s : Finset Œ±) (t : Finset Œπ) (f : Œπ ‚Üí Finset Œ≤) :
    interedges r s (t.biUnion f) = t.biUnion fun b ‚Ü¶ interedges r s (f b) := by
  ext a
  simp only [mem_interedges_iff, mem_biUnion]
  exact ‚ü®fun ‚ü®x‚ÇÅ, ‚ü®x‚ÇÇ, x‚ÇÉ, x‚ÇÑ‚ü©, x‚ÇÖ‚ü© ‚Ü¶ ‚ü®x‚ÇÇ, x‚ÇÉ, x‚ÇÅ, x‚ÇÑ, x‚ÇÖ‚ü©,
    fun ‚ü®x‚ÇÇ, x‚ÇÉ, x‚ÇÅ, x‚ÇÑ, x‚ÇÖ‚ü© ‚Ü¶ ‚ü®x‚ÇÅ, ‚ü®x‚ÇÇ, x‚ÇÉ, x‚ÇÑ‚ü©, x‚ÇÖ‚ü©‚ü©
#align rel.interedges_bUnion_right Rel.interedges_biUnion_right

theorem interedges_biUnion (s : Finset Œπ) (t : Finset Œ∫) (f : Œπ ‚Üí Finset Œ±) (g : Œ∫ ‚Üí Finset Œ≤) :
    interedges r (s.biUnion f) (t.biUnion g) =
      (s √óÀ¢ t).biUnion fun ab ‚Ü¶ interedges r (f ab.1) (g ab.2) := by
  simp_rw [product_biUnion, interedges_biUnion_left, interedges_biUnion_right]
#align rel.interedges_bUnion Rel.interedges_biUnion

end DecidableEq

theorem card_interedges_le_mul (s : Finset Œ±) (t : Finset Œ≤) :
    (interedges r s t).card ‚â§ s.card * t.card :=
  (card_filter_le _ _).trans (card_product _ _).le
#align rel.card_interedges_le_mul Rel.card_interedges_le_mul

theorem edgeDensity_nonneg (s : Finset Œ±) (t : Finset Œ≤) : 0 ‚â§ edgeDensity r s t := by
  apply div_nonneg <;> exact mod_cast Nat.zero_le _
#align rel.edge_density_nonneg Rel.edgeDensity_nonneg

theorem edgeDensity_le_one (s : Finset Œ±) (t : Finset Œ≤) : edgeDensity r s t ‚â§ 1 := by
  apply div_le_one_of_le
  ¬∑ exact mod_cast card_interedges_le_mul r s t
  ¬∑ exact mod_cast Nat.zero_le _
#align rel.edge_density_le_one Rel.edgeDensity_le_one

theorem edgeDensity_add_edgeDensity_compl (hs : s.Nonempty) (ht : t.Nonempty) :
    edgeDensity r s t + edgeDensity (fun x y ‚Ü¶ ¬¨r x y) s t = 1 := by
  rw [edgeDensity, edgeDensity, div_add_div_same, div_eq_one_iff_eq]
  ¬∑ exact mod_cast card_interedges_add_card_interedges_compl r s t
  ¬∑ exact mod_cast (mul_pos hs.card_pos ht.card_pos).ne'
#align rel.edge_density_add_edge_density_compl Rel.edgeDensity_add_edgeDensity_compl

@[simp]
theorem edgeDensity_empty_left (t : Finset Œ≤) : edgeDensity r ‚àÖ t = 0 := by
  rw [edgeDensity, Finset.card_empty, Nat.cast_zero, zero_mul, div_zero]
#align rel.edge_density_empty_left Rel.edgeDensity_empty_left

@[simp]
theorem edgeDensity_empty_right (s : Finset Œ±) : edgeDensity r s ‚àÖ = 0 := by
  rw [edgeDensity, Finset.card_empty, Nat.cast_zero, mul_zero, div_zero]
#align rel.edge_density_empty_right Rel.edgeDensity_empty_right

theorem card_interedges_finpartition_left [DecidableEq Œ±] (P : Finpartition s) (t : Finset Œ≤) :
    (interedges r s t).card = ‚àë a in P.parts, (interedges r a t).card := by
  classical
  simp_rw [‚Üê P.biUnion_parts, interedges_biUnion_left, id.def]
  rw [card_biUnion]
  exact fun x hx y hy h ‚Ü¶ interedges_disjoint_left r (P.disjoint hx hy h) _
#align rel.card_interedges_finpartition_left Rel.card_interedges_finpartition_left

theorem card_interedges_finpartition_right [DecidableEq Œ≤] (s : Finset Œ±) (P : Finpartition t) :
    (interedges r s t).card = ‚àë b in P.parts, (interedges r s b).card := by
  classical
  simp_rw [‚Üê P.biUnion_parts, interedges_biUnion_right, id]
  rw [card_biUnion]
  exact fun x hx y hy h ‚Ü¶ interedges_disjoint_right r _ (P.disjoint hx hy h)
#align rel.card_interedges_finpartition_right Rel.card_interedges_finpartition_right

theorem card_interedges_finpartition [DecidableEq Œ±] [DecidableEq Œ≤] (P : Finpartition s)
    (Q : Finpartition t) :
    (interedges r s t).card = ‚àë ab in P.parts √óÀ¢ Q.parts, (interedges r ab.1 ab.2).card := by
  rw [card_interedges_finpartition_left _ P, sum_product]
  congr; ext
  rw [card_interedges_finpartition_right]
#align rel.card_interedges_finpartition Rel.card_interedges_finpartition

theorem mul_edgeDensity_le_edgeDensity (hs : s‚ÇÇ ‚äÜ s‚ÇÅ) (ht : t‚ÇÇ ‚äÜ t‚ÇÅ) (hs‚ÇÇ : s‚ÇÇ.Nonempty)
    (ht‚ÇÇ : t‚ÇÇ.Nonempty) :
    (s‚ÇÇ.card : ‚Ñö) / s‚ÇÅ.card * (t‚ÇÇ.card / t‚ÇÅ.card) * edgeDensity r s‚ÇÇ t‚ÇÇ ‚â§ edgeDensity r s‚ÇÅ t‚ÇÅ := by
  have hst : (s‚ÇÇ.card : ‚Ñö) * t‚ÇÇ.card ‚â† 0 := by simp [hs‚ÇÇ.ne_empty, ht‚ÇÇ.ne_empty]
  rw [edgeDensity, edgeDensity, div_mul_div_comm, mul_comm, div_mul_div_cancel _ hst]
  refine' div_le_div_of_le (mod_cast (s‚ÇÅ.card * t‚ÇÅ.card).zero_le) _
  exact mod_cast card_le_of_subset (interedges_mono hs ht)
#align rel.mul_edge_density_le_edge_density Rel.mul_edgeDensity_le_edgeDensity

theorem edgeDensity_sub_edgeDensity_le_one_sub_mul (hs : s‚ÇÇ ‚äÜ s‚ÇÅ) (ht : t‚ÇÇ ‚äÜ t‚ÇÅ) (hs‚ÇÇ : s‚ÇÇ.Nonempty)
    (ht‚ÇÇ : t‚ÇÇ.Nonempty) :
    edgeDensity r s‚ÇÇ t‚ÇÇ - edgeDensity r s‚ÇÅ t‚ÇÅ ‚â§ 1 - s‚ÇÇ.card / s‚ÇÅ.card * (t‚ÇÇ.card / t‚ÇÅ.card) := by
  refine' (sub_le_sub_left (mul_edgeDensity_le_edgeDensity r hs ht hs‚ÇÇ ht‚ÇÇ) _).trans _
  refine' le_trans _ (mul_le_of_le_one_right _ (edgeDensity_le_one r s‚ÇÇ t‚ÇÇ))
  ¬∑ rw [sub_mul, one_mul]
  refine' sub_nonneg_of_le (mul_le_one _ _ _)
  ¬∑ exact div_le_one_of_le ((@Nat.cast_le ‚Ñö).2 (card_le_of_subset hs)) (Nat.cast_nonneg _)
  ¬∑ apply div_nonneg <;> exact mod_cast Nat.zero_le _
  ¬∑ exact div_le_one_of_le ((@Nat.cast_le ‚Ñö).2 (card_le_of_subset ht)) (Nat.cast_nonneg _)
#align rel.edge_density_sub_edge_density_le_one_sub_mul Rel.edgeDensity_sub_edgeDensity_le_one_sub_mul

theorem abs_edgeDensity_sub_edgeDensity_le_one_sub_mul (hs : s‚ÇÇ ‚äÜ s‚ÇÅ) (ht : t‚ÇÇ ‚äÜ t‚ÇÅ)
    (hs‚ÇÇ : s‚ÇÇ.Nonempty) (ht‚ÇÇ : t‚ÇÇ.Nonempty) :
    |edgeDensity r s‚ÇÇ t‚ÇÇ - edgeDensity r s‚ÇÅ t‚ÇÅ| ‚â§ 1 - s‚ÇÇ.card / s‚ÇÅ.card * (t‚ÇÇ.card / t‚ÇÅ.card) := by
  refine' abs_sub_le_iff.2 ‚ü®edgeDensity_sub_edgeDensity_le_one_sub_mul r hs ht hs‚ÇÇ ht‚ÇÇ, _‚ü©
  rw [‚Üê add_sub_cancel (edgeDensity r s‚ÇÅ t‚ÇÅ) (edgeDensity (fun x y ‚Ü¶ ¬¨r x y) s‚ÇÅ t‚ÇÅ),
    ‚Üê add_sub_cancel (edgeDensity r s‚ÇÇ t‚ÇÇ) (edgeDensity (fun x y ‚Ü¶ ¬¨r x y) s‚ÇÇ t‚ÇÇ),
    edgeDensity_add_edgeDensity_compl _ (hs‚ÇÇ.mono hs) (ht‚ÇÇ.mono ht),
    edgeDensity_add_edgeDensity_compl _ hs‚ÇÇ ht‚ÇÇ, sub_sub_sub_cancel_left]
  exact edgeDensity_sub_edgeDensity_le_one_sub_mul _ hs ht hs‚ÇÇ ht‚ÇÇ
#align rel.abs_edge_density_sub_edge_density_le_one_sub_mul Rel.abs_edgeDensity_sub_edgeDensity_le_one_sub_mul

theorem abs_edgeDensity_sub_edgeDensity_le_two_mul_sub_sq (hs : s‚ÇÇ ‚äÜ s‚ÇÅ) (ht : t‚ÇÇ ‚äÜ t‚ÇÅ)
    (hŒ¥‚ÇÄ : 0 ‚â§ Œ¥) (hŒ¥‚ÇÅ : Œ¥ < 1) (hs‚ÇÇ : (1 - Œ¥) * s‚ÇÅ.card ‚â§ s‚ÇÇ.card)
    (ht‚ÇÇ : (1 - Œ¥) * t‚ÇÅ.card ‚â§ t‚ÇÇ.card) :
    |(edgeDensity r s‚ÇÇ t‚ÇÇ : ùïú) - edgeDensity r s‚ÇÅ t‚ÇÅ| ‚â§ 2 * Œ¥ - Œ¥ ^ 2 := by
  have hŒ¥' : 0 ‚â§ 2 * Œ¥ - Œ¥ ^ 2 := by
    rw [sub_nonneg, sq]
    gcongr
    exact hŒ¥‚ÇÅ.le.trans (by norm_num)
  rw [‚Üê sub_pos] at hŒ¥‚ÇÅ
  obtain rfl | hs‚ÇÇ' := s‚ÇÇ.eq_empty_or_nonempty
  ¬∑ rw [Finset.card_empty, Nat.cast_zero] at hs‚ÇÇ
    simpa [edgeDensity, (nonpos_of_mul_nonpos_right hs‚ÇÇ hŒ¥‚ÇÅ).antisymm (Nat.cast_nonneg _)] using hŒ¥'
  obtain rfl | ht‚ÇÇ' := t‚ÇÇ.eq_empty_or_nonempty
  ¬∑ rw [Finset.card_empty, Nat.cast_zero] at ht‚ÇÇ
    simpa [edgeDensity, (nonpos_of_mul_nonpos_right ht‚ÇÇ hŒ¥‚ÇÅ).antisymm (Nat.cast_nonneg _)] using hŒ¥'
  have hr : 2 * Œ¥ - Œ¥ ^ 2 = 1 - (1 - Œ¥) * (1 - Œ¥) := by ring
  rw [hr]
  norm_cast
  refine'
    (Rat.cast_le.2 <| abs_edgeDensity_sub_edgeDensity_le_one_sub_mul r hs ht hs‚ÇÇ' ht‚ÇÇ').trans _
  push_cast
  have h‚ÇÅ := hs‚ÇÇ'.mono hs
  have h‚ÇÇ := ht‚ÇÇ'.mono ht
  gcongr
  ¬∑ refine' (le_div_iff _).2 hs‚ÇÇ
    exact mod_cast h‚ÇÅ.card_pos
  ¬∑ refine' (le_div_iff _).2 ht‚ÇÇ
    exact mod_cast h‚ÇÇ.card_pos
#align rel.abs_edge_density_sub_edge_density_le_two_mul_sub_sq Rel.abs_edgeDensity_sub_edgeDensity_le_two_mul_sub_sq

/-- If `s‚ÇÇ ‚äÜ s‚ÇÅ`, `t‚ÇÇ ‚äÜ t‚ÇÅ` and they take up all but a `Œ¥`-proportion, then the difference in edge
densities is at most `2 * Œ¥`. -/
theorem abs_edgeDensity_sub_edgeDensity_le_two_mul (hs : s‚ÇÇ ‚äÜ s‚ÇÅ) (ht : t‚ÇÇ ‚äÜ t‚ÇÅ) (hŒ¥ : 0 ‚â§ Œ¥)
    (hscard : (1 - Œ¥) * s‚ÇÅ.card ‚â§ s‚ÇÇ.card) (htcard : (1 - Œ¥) * t‚ÇÅ.card ‚â§ t‚ÇÇ.card) :
    |(edgeDensity r s‚ÇÇ t‚ÇÇ : ùïú) - edgeDensity r s‚ÇÅ t‚ÇÅ| ‚â§ 2 * Œ¥ := by
  cases' lt_or_le Œ¥ 1 with h h
  ¬∑ exact (abs_edgeDensity_sub_edgeDensity_le_two_mul_sub_sq r hs ht hŒ¥ h hscard htcard).trans
      ((sub_le_self_iff _).2 <| sq_nonneg Œ¥)
  rw [two_mul]
  refine' (abs_sub _ _).trans (add_le_add (le_trans _ h) (le_trans _ h)) <;>
    ¬∑ rw [abs_of_nonneg]
      exact mod_cast edgeDensity_le_one r _ _
      exact mod_cast edgeDensity_nonneg r _ _
#align rel.abs_edge_density_sub_edge_density_le_two_mul Rel.abs_edgeDensity_sub_edgeDensity_le_two_mul

end Asymmetric

section Symmetric

variable (r : Œ± ‚Üí Œ± ‚Üí Prop) [DecidableRel r] {s s‚ÇÅ s‚ÇÇ t t‚ÇÅ t‚ÇÇ : Finset Œ±} {a b : Œ±}

variable {r} (hr : Symmetric r)

@[simp]
theorem swap_mem_interedges_iff {x : Œ± √ó Œ±} : x.swap ‚àà interedges r s t ‚Üî x ‚àà interedges r t s := by
  rw [mem_interedges_iff, mem_interedges_iff, hr.iff]
  exact and_left_comm
#align rel.swap_mem_interedges_iff Rel.swap_mem_interedges_iff

theorem mk_mem_interedges_comm : (a, b) ‚àà interedges r s t ‚Üî (b, a) ‚àà interedges r t s :=
  @swap_mem_interedges_iff _ _ _ _ _ hr (b, a)
#align rel.mk_mem_interedges_comm Rel.mk_mem_interedges_comm

theorem card_interedges_comm (s t : Finset Œ±) : (interedges r s t).card = (interedges r t s).card :=
  Finset.card_congr (fun (x : Œ± √ó Œ±) _ ‚Ü¶ x.swap) (fun _ ‚Ü¶ (swap_mem_interedges_iff hr).2)
    (fun _ _ _ _ h ‚Ü¶ Prod.swap_injective h) fun x h ‚Ü¶
    ‚ü®x.swap, (swap_mem_interedges_iff hr).2 h, x.swap_swap‚ü©
#align rel.card_interedges_comm Rel.card_interedges_comm

theorem edgeDensity_comm (s t : Finset Œ±) : edgeDensity r s t = edgeDensity r t s := by
  rw [edgeDensity, mul_comm, card_interedges_comm hr, edgeDensity]
#align rel.edge_density_comm Rel.edgeDensity_comm

end Symmetric

end Rel

open Rel

/-! ### Density of a graph -/


namespace SimpleGraph

variable (G : SimpleGraph Œ±) [DecidableRel G.Adj] {s s‚ÇÅ s‚ÇÇ t t‚ÇÅ t‚ÇÇ : Finset Œ±} {a b : Œ±}

/-- Finset of edges of a relation between two finsets of vertices. -/
def interedges (s t : Finset Œ±) : Finset (Œ± √ó Œ±) :=
  Rel.interedges G.Adj s t
#align simple_graph.interedges SimpleGraph.interedges

/-- Density of edges of a graph between two finsets of vertices. -/
def edgeDensity : Finset Œ± ‚Üí Finset Œ± ‚Üí ‚Ñö :=
  Rel.edgeDensity G.Adj
#align simple_graph.edge_density SimpleGraph.edgeDensity

theorem interedges_def (s t : Finset Œ±) :
    G.interedges s t = (s √óÀ¢ t).filter fun e ‚Ü¶ G.Adj e.1 e.2 :=
  rfl
#align simple_graph.interedges_def SimpleGraph.interedges_def

theorem edgeDensity_def (s t : Finset Œ±) :
    G.edgeDensity s t = (G.interedges s t).card / (s.card * t.card) :=
  rfl
#align simple_graph.edge_density_def SimpleGraph.edgeDensity_def

@[simp]
theorem card_interedges_div_card (s t : Finset Œ±) :
    ((G.interedges s t).card : ‚Ñö) / (s.card * t.card) = G.edgeDensity s t :=
  rfl
#align simple_graph.card_interedges_div_card SimpleGraph.card_interedges_div_card

theorem mem_interedges_iff {x : Œ± √ó Œ±} : x ‚àà G.interedges s t ‚Üî x.1 ‚àà s ‚àß x.2 ‚àà t ‚àß G.Adj x.1 x.2 :=
  Rel.mem_interedges_iff
#align simple_graph.mem_interedges_iff SimpleGraph.mem_interedges_iff

theorem mk_mem_interedges_iff : (a, b) ‚àà G.interedges s t ‚Üî a ‚àà s ‚àß b ‚àà t ‚àß G.Adj a b :=
  Rel.mk_mem_interedges_iff
#align simple_graph.mk_mem_interedges_iff SimpleGraph.mk_mem_interedges_iff

@[simp]
theorem interedges_empty_left (t : Finset Œ±) : G.interedges ‚àÖ t = ‚àÖ :=
  Rel.interedges_empty_left _
#align simple_graph.interedges_empty_left SimpleGraph.interedges_empty_left

theorem interedges_mono : s‚ÇÇ ‚äÜ s‚ÇÅ ‚Üí t‚ÇÇ ‚äÜ t‚ÇÅ ‚Üí G.interedges s‚ÇÇ t‚ÇÇ ‚äÜ G.interedges s‚ÇÅ t‚ÇÅ :=
  Rel.interedges_mono
#align simple_graph.interedges_mono SimpleGraph.interedges_mono

theorem interedges_disjoint_left (hs : Disjoint s‚ÇÅ s‚ÇÇ) (t : Finset Œ±) :
    Disjoint (G.interedges s‚ÇÅ t) (G.interedges s‚ÇÇ t) :=
  Rel.interedges_disjoint_left _ hs _
#align simple_graph.interedges_disjoint_left SimpleGraph.interedges_disjoint_left

theorem interedges_disjoint_right (s : Finset Œ±) (ht : Disjoint t‚ÇÅ t‚ÇÇ) :
    Disjoint (G.interedges s t‚ÇÅ) (G.interedges s t‚ÇÇ) :=
  Rel.interedges_disjoint_right _ _ ht
#align simple_graph.interedges_disjoint_right SimpleGraph.interedges_disjoint_right

section DecidableEq

variable [DecidableEq Œ±]

theorem interedges_biUnion_left (s : Finset Œπ) (t : Finset Œ±) (f : Œπ ‚Üí Finset Œ±) :
    G.interedges (s.biUnion f) t = s.biUnion fun a ‚Ü¶ G.interedges (f a) t :=
  Rel.interedges_biUnion_left _ _ _ _
#align simple_graph.interedges_bUnion_left SimpleGraph.interedges_biUnion_left

theorem interedges_biUnion_right (s : Finset Œ±) (t : Finset Œπ) (f : Œπ ‚Üí Finset Œ±) :
    G.interedges s (t.biUnion f) = t.biUnion fun b ‚Ü¶ G.interedges s (f b) :=
  Rel.interedges_biUnion_right _ _ _ _
#align simple_graph.interedges_bUnion_right SimpleGraph.interedges_biUnion_right

theorem interedges_biUnion (s : Finset Œπ) (t : Finset Œ∫) (f : Œπ ‚Üí Finset Œ±) (g : Œ∫ ‚Üí Finset Œ±) :
    G.interedges (s.biUnion f) (t.biUnion g) =
      (s √óÀ¢ t).biUnion fun ab ‚Ü¶ G.interedges (f ab.1) (g ab.2) :=
  Rel.interedges_biUnion _ _ _ _ _
#align simple_graph.interedges_bUnion SimpleGraph.interedges_biUnion

theorem card_interedges_add_card_interedges_compl (h : Disjoint s t) :
    (G.interedges s t).card + (G·∂ú.interedges s t).card = s.card * t.card := by
  rw [‚Üê card_product, interedges_def, interedges_def]
  have : ((s √óÀ¢ t).filter fun e ‚Ü¶ G·∂ú.Adj e.1 e.2) = (s √óÀ¢ t).filter fun e ‚Ü¶ ¬¨G.Adj e.1 e.2 := by
    refine' filter_congr fun x hx ‚Ü¶ _
    rw [mem_product] at hx
    rw [compl_adj, and_iff_right (h.forall_ne_finset hx.1 hx.2)]
  rw [this, ‚Üê card_union_eq, filter_union_filter_neg_eq]
  exact disjoint_filter.2 fun _ _ ‚Ü¶ Classical.not_not.2
#align simple_graph.card_interedges_add_card_interedges_compl SimpleGraph.card_interedges_add_card_interedges_compl

theorem edgeDensity_add_edgeDensity_compl (hs : s.Nonempty) (ht : t.Nonempty) (h : Disjoint s t) :
    G.edgeDensity s t + G·∂ú.edgeDensity s t = 1 := by
  rw [edgeDensity_def, edgeDensity_def, div_add_div_same, div_eq_one_iff_eq]
  ¬∑ exact mod_cast card_interedges_add_card_interedges_compl _ h
  -- Porting note: Wrote a workaround for `positivity` tactic.
  ¬∑ apply mul_ne_zero <;> exact mod_cast Nat.pos_iff_ne_zero.1 (Nonempty.card_pos ‚Äπ_‚Ä∫)
#align simple_graph.edge_density_add_edge_density_compl SimpleGraph.edgeDensity_add_edgeDensity_compl

end DecidableEq

theorem card_interedges_le_mul (s t : Finset Œ±) : (G.interedges s t).card ‚â§ s.card * t.card :=
  Rel.card_interedges_le_mul _ _ _
#align simple_graph.card_interedges_le_mul SimpleGraph.card_interedges_le_mul

theorem edgeDensity_nonneg (s t : Finset Œ±) : 0 ‚â§ G.edgeDensity s t :=
  Rel.edgeDensity_nonneg _ _ _
#align simple_graph.edge_density_nonneg SimpleGraph.edgeDensity_nonneg

theorem edgeDensity_le_one (s t : Finset Œ±) : G.edgeDensity s t ‚â§ 1 :=
  Rel.edgeDensity_le_one _ _ _
#align simple_graph.edge_density_le_one SimpleGraph.edgeDensity_le_one

@[simp]
theorem edgeDensity_empty_left (t : Finset Œ±) : G.edgeDensity ‚àÖ t = 0 :=
  Rel.edgeDensity_empty_left _ _
#align simple_graph.edge_density_empty_left SimpleGraph.edgeDensity_empty_left

@[simp]
theorem edgeDensity_empty_right (s : Finset Œ±) : G.edgeDensity s ‚àÖ = 0 :=
  Rel.edgeDensity_empty_right _ _
#align simple_graph.edge_density_empty_right SimpleGraph.edgeDensity_empty_right

@[simp]
theorem swap_mem_interedges_iff {x : Œ± √ó Œ±} : x.swap ‚àà G.interedges s t ‚Üî x ‚àà G.interedges t s :=
  Rel.swap_mem_interedges_iff G.symm
#align simple_graph.swap_mem_interedges_iff SimpleGraph.swap_mem_interedges_iff

theorem mk_mem_interedges_comm : (a, b) ‚àà G.interedges s t ‚Üî (b, a) ‚àà G.interedges t s :=
  Rel.mk_mem_interedges_comm G.symm
#align simple_graph.mk_mem_interedges_comm SimpleGraph.mk_mem_interedges_comm

theorem edgeDensity_comm (s t : Finset Œ±) : G.edgeDensity s t = G.edgeDensity t s :=
  Rel.edgeDensity_comm G.symm s t
#align simple_graph.edge_density_comm SimpleGraph.edgeDensity_comm

end SimpleGraph

/- Porting note: Commented out `Tactic` namespace.
namespace Tactic

open Positivity

/-- Extension for the `positivity` tactic: `Rel.edgeDensity` and `SimpleGraph.edgeDensity` are
always nonnegative. -/
@[positivity]
unsafe def positivity_edge_density : expr ‚Üí tactic strictness
  | q(Rel.edgeDensity $(r) $(s) $(t)) =>
    nonnegative <$> mk_mapp `` Rel.edgeDensity_nonneg [none, none, r, none, s, t]
  | q(SimpleGraph.edgeDensity $(G) $(s) $(t)) =>
    nonnegative <$> mk_mapp `` SimpleGraph.edgeDensity_nonneg [none, G, none, s, t]
  | e =>
    pp e >>=
      fail ‚àò
        format.bracket "The expression `"
          "` isn't of the form `Rel.edgeDensity r s t` nor `SimpleGraph.edgeDensity G s t`"
#align tactic.positivity_edge_density Tactic.positivity_edge_density

end Tactic
-/
