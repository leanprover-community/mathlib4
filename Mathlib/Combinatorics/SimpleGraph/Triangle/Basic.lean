/-
Copyright (c) 2022 Ya√´l Dillies, Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Bhavik Mehta
-/
import Mathlib.Combinatorics.SimpleGraph.Clique
import Mathlib.Tactic.GCongr

#align_import combinatorics.simple_graph.triangle.basic from "leanprover-community/mathlib"@"cd7f0626a0b04be1dda223a26123313514a55fb4"

/-!
# Triangles in graphs

A *triangle* in a simple graph is a `3`-clique, namely a set of three vertices that are
pairwise adjacent.

This module defines and proves properties about triangles in simple graphs.

## Main declarations

* `SimpleGraph.FarFromTriangleFree`: Predicate for a graph such that one must remove a lot of edges
  from it for it to become triangle-free. This is the crux of the Triangle Removal Lemma.

## TODO

* Generalise `farFromTriangleFree` to other graphs, to state and prove the Graph Removal Lemma.
-/


open Finset Fintype Nat

open Classical

namespace SimpleGraph

variable {Œ± ùïú : Type*} [Fintype Œ±] [LinearOrderedField ùïú] {G H : SimpleGraph Œ±} {Œµ Œ¥ : ùïú} {n : ‚Ñï}
  {s : Finset Œ±}

/-- A simple graph is *`Œµ`-far from triangle-free* if one must remove at least
`Œµ * (card Œ±) ^ 2` edges to make it triangle-free. -/
def FarFromTriangleFree (G : SimpleGraph Œ±) (Œµ : ùïú) : Prop :=
  (G.DeleteFar fun H => H.CliqueFree 3) <| Œµ * (card Œ± ^ 2 : ‚Ñï)
#align simple_graph.far_from_triangle_free SimpleGraph.FarFromTriangleFree

theorem farFromTriangleFree_iff : G.FarFromTriangleFree Œµ ‚Üî ‚àÄ ‚¶ÉH‚¶Ñ, H ‚â§ G ‚Üí H.CliqueFree 3 ‚Üí
    Œµ * (card Œ± ^ 2 : ‚Ñï) ‚â§ G.edgeFinset.card - H.edgeFinset.card := deleteFar_iff
#align simple_graph.far_from_triangle_free_iff SimpleGraph.farFromTriangleFree_iff

alias ‚ü®farFromTriangleFree.le_card_sub_card, _‚ü© := farFromTriangleFree_iff
#align simple_graph.far_from_triangle_free.le_card_sub_card SimpleGraph.farFromTriangleFree.le_card_sub_card

nonrec theorem FarFromTriangleFree.mono (hŒµ : G.FarFromTriangleFree Œµ) (h : Œ¥ ‚â§ Œµ) :
    G.FarFromTriangleFree Œ¥ := hŒµ.mono <| by gcongr
#align simple_graph.far_from_triangle_free.mono SimpleGraph.FarFromTriangleFree.mono

theorem FarFromTriangleFree.cliqueFinset_nonempty' (hH : H ‚â§ G) (hG : G.FarFromTriangleFree Œµ)
    (hcard : (G.edgeFinset.card - H.edgeFinset.card : ùïú) < Œµ * (card Œ± ^ 2 : ‚Ñï)) :
    (H.cliqueFinset 3).Nonempty :=
  nonempty_of_ne_empty <|
    H.cliqueFinset_eq_empty_iff.not.2 fun hH' => (hG.le_card_sub_card hH hH').not_lt hcard
#align simple_graph.far_from_triangle_free.clique_finset_nonempty' SimpleGraph.FarFromTriangleFree.cliqueFinset_nonempty'

variable [Nonempty Œ±]

theorem FarFromTriangleFree.nonpos (h‚ÇÄ : G.FarFromTriangleFree Œµ) (h‚ÇÅ : G.CliqueFree 3) :
    Œµ ‚â§ 0 := by
  have := h‚ÇÄ (empty_subset _)
  rw [coe_empty, Finset.card_empty, cast_zero, deleteEdges_empty_eq] at this
  exact nonpos_of_mul_nonpos_left (this h‚ÇÅ) (cast_pos.2 <| sq_pos_of_pos Fintype.card_pos)
#align simple_graph.far_from_triangle_free.nonpos SimpleGraph.FarFromTriangleFree.nonpos

theorem CliqueFree.not_farFromTriangleFree (hG : G.CliqueFree 3) (hŒµ : 0 < Œµ) :
    ¬¨G.FarFromTriangleFree Œµ := fun h => (h.nonpos hG).not_lt hŒµ
#align simple_graph.clique_free.not_far_from_triangle_free SimpleGraph.CliqueFree.not_farFromTriangleFree

theorem FarFromTriangleFree.not_cliqueFree (hG : G.FarFromTriangleFree Œµ) (hŒµ : 0 < Œµ) :
    ¬¨G.CliqueFree 3 := fun h => (hG.nonpos h).not_lt hŒµ
#align simple_graph.far_from_triangle_free.not_clique_free SimpleGraph.FarFromTriangleFree.not_cliqueFree

theorem FarFromTriangleFree.cliqueFinset_nonempty (hG : G.FarFromTriangleFree Œµ) (hŒµ : 0 < Œµ) :
    (G.cliqueFinset 3).Nonempty :=
  nonempty_of_ne_empty <| G.cliqueFinset_eq_empty_iff.not.2 <| hG.not_cliqueFree hŒµ
#align simple_graph.far_from_triangle_free.clique_finset_nonempty SimpleGraph.FarFromTriangleFree.cliqueFinset_nonempty

end SimpleGraph
