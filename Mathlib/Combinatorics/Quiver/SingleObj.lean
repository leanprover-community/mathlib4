/-
Copyright (c) 2023 Antoine Labelle. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Antoine Labelle
-/
import Mathlib.Combinatorics.Quiver.Cast
import Mathlib.Combinatorics.Quiver.Symmetric

/-!
# Single-object quiver

Single object quiver with a given arrows type.

## Main definitions

Given a type `Œ±`, `SingleObj Œ±` is the `Unit` type, whose single object is called `star Œ±`, with
`Quiver` structure such that `star Œ± ‚ü∂ star Œ±` is the type `Œ±`.
An element `x : Œ±` can be reinterpreted as an element of `star Œ± ‚ü∂ star Œ±` using
`toHom`.
More generally, a list of elements of `a` can be reinterpreted as a path from `star Œ±` to
itself using `pathEquivList`.
-/

namespace Quiver

/-- Type tag on `Unit` used to define single-object quivers. -/
-- Porting note: Removed `deriving Unique`.
@[nolint unusedArguments]
def SingleObj (_ : Type*) : Type :=
  Unit

-- Porting note: `deriving` from above has been moved to below.
instance {Œ± : Type*} : Unique (SingleObj Œ±) where
  default := ‚ü®‚ü©
  uniq := fun _ => rfl

namespace SingleObj

variable (Œ± Œ≤ Œ≥ : Type*)

instance : Quiver (SingleObj Œ±) :=
  ‚ü®fun _ _ => Œ±‚ü©

/-- The single object in `SingleObj Œ±`. -/
def star : SingleObj Œ± :=
  Unit.unit

instance : Inhabited (SingleObj Œ±) :=
  ‚ü®star Œ±‚ü©

variable {Œ± Œ≤ Œ≥}

lemma ext {x y : SingleObj Œ±} : x = y := Unit.ext x y

-- See note [reducible non-instances]
/-- Equip `SingleObj Œ±` with a reverse operation. -/
abbrev hasReverse (rev : Œ± ‚Üí Œ±) : HasReverse (SingleObj Œ±) := ‚ü®rev‚ü©

-- See note [reducible non-instances]
/-- Equip `SingleObj Œ±` with an involutive reverse operation. -/
abbrev hasInvolutiveReverse (rev : Œ± ‚Üí Œ±) (h : Function.Involutive rev) :
    HasInvolutiveReverse (SingleObj Œ±) where
  toHasReverse := hasReverse rev
  inv' := h

/-- The type of arrows from `star Œ±` to itself is equivalent to the original type `Œ±`. -/
@[simps!]
def toHom : Œ± ‚âÉ (star Œ± ‚ü∂ star Œ±) :=
  Equiv.refl _

/-- Prefunctors between two `SingleObj` quivers correspond to functions between the corresponding
arrows types.
-/
@[simps]
def toPrefunctor : (Œ± ‚Üí Œ≤) ‚âÉ SingleObj Œ± ‚•§q SingleObj Œ≤ where
  toFun f := ‚ü®id, f‚ü©
  invFun f a := f.map (toHom a)
  left_inv _ := rfl
  right_inv _ := rfl

theorem toPrefunctor_id : toPrefunctor id = ùü≠q (SingleObj Œ±) :=
  rfl

@[simp]
theorem toPrefunctor_symm_id : toPrefunctor.symm (ùü≠q (SingleObj Œ±)) = id :=
  rfl

theorem toPrefunctor_comp (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ≥) :
    toPrefunctor (g ‚àò f) = toPrefunctor f ‚ãôq toPrefunctor g :=
  rfl

@[simp]
theorem toPrefunctor_symm_comp (f : SingleObj Œ± ‚•§q SingleObj Œ≤) (g : SingleObj Œ≤ ‚•§q SingleObj Œ≥) :
    toPrefunctor.symm (f ‚ãôq g) = toPrefunctor.symm g ‚àò toPrefunctor.symm f := by
  simp only [Equiv.symm_apply_eq, toPrefunctor_comp, Equiv.apply_symm_apply]

/-- Auxiliary definition for `quiver.SingleObj.pathEquivList`.
Converts a path in the quiver `single_obj Œ±` into a list of elements of type `a`.
-/
def pathToList : ‚àÄ {x : SingleObj Œ±}, Path (star Œ±) x ‚Üí List Œ±
  | _, Path.nil => []
  | _, Path.cons p a => a :: pathToList p

/-- Auxiliary definition for `quiver.SingleObj.pathEquivList`.
Converts a list of elements of type `Œ±` into a path in the quiver `SingleObj Œ±`.
-/
@[simp]
def listToPath : List Œ± ‚Üí Path (star Œ±) (star Œ±)
  | [] => Path.nil
  | a :: l => (listToPath l).cons a

theorem listToPath_pathToList {x : SingleObj Œ±} (p : Path (star Œ±) x) :
    listToPath (pathToList p) = p.cast rfl ext := by
  induction p with
  | nil => rfl
  | cons _ _ ih => dsimp at *; rw [ih]

theorem pathToList_listToPath (l : List Œ±) : pathToList (listToPath l) = l := by
  induction l with
  | nil => rfl
  | cons a l ih => change a :: pathToList (listToPath l) = a :: l; rw [ih]

/-- Paths in `SingleObj Œ±` quiver correspond to lists of elements of type `Œ±`. -/
def pathEquivList : Path (star Œ±) (star Œ±) ‚âÉ List Œ± :=
  ‚ü®pathToList, listToPath, fun p => listToPath_pathToList p, pathToList_listToPath‚ü©

@[simp]
theorem pathEquivList_nil : pathEquivList Path.nil = ([] : List Œ±) :=
  rfl

@[simp]
theorem pathEquivList_cons (p : Path (star Œ±) (star Œ±)) (a : star Œ± ‚ü∂ star Œ±) :
    pathEquivList (Path.cons p a) = a :: pathToList p :=
  rfl

@[simp]
theorem pathEquivList_symm_nil : pathEquivList.symm ([] : List Œ±) = Path.nil :=
  rfl

@[simp]
theorem pathEquivList_symm_cons (l : List Œ±) (a : Œ±) :
    pathEquivList.symm (a :: l) = Path.cons (pathEquivList.symm l) a :=
  rfl

end SingleObj

end Quiver
