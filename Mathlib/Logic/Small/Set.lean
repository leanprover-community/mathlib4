/-
Copyright (c) 2024 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel, Timothy Carlin-Burns
-/
import Mathlib.Data.Set.Lattice
import Mathlib.Logic.Small.Basic

/-!
# Results about `Small` on coerced sets
-/

universe u u1 u2 u3 u4

variable {Œ± : Type u1} {Œ≤ : Type u2} {Œ≥ : Type u3} {Œπ : Type u4}

theorem small_subset {s t : Set Œ±} (hts : t ‚äÜ s) [Small.{u} s] : Small.{u} t :=
  small_of_injective (Set.inclusion_injective hts)

instance small_powerset (s : Set Œ±) [Small.{u} s] : Small.{u} (ùí´ s) :=
  small_map (Equiv.Set.powerset s)

instance small_setProd (s : Set Œ±) (t : Set Œ≤) [Small.{u} s] [Small.{u} t] :
    Small.{u} (s √óÀ¢ t : Set (Œ± √ó Œ≤)) :=
  small_of_injective (Equiv.Set.prod s t).injective

instance small_setPi {Œ≤ : Œ± ‚Üí Type u2} (s : (a : Œ±) ‚Üí Set (Œ≤ a))
    [Small.{u} Œ±] [‚àÄ a, Small.{u} (s a)] : Small.{u} (Set.pi Set.univ s) :=
  small_of_injective (Equiv.Set.univPi s).injective

instance small_range (f : Œ± ‚Üí Œ≤) [Small.{u} Œ±] :
    Small.{u} (Set.range f) :=
  small_of_surjective Set.surjective_onto_range

instance small_image (f : Œ± ‚Üí Œ≤) (s : Set Œ±) [Small.{u} s] :
    Small.{u} (f '' s) :=
  small_of_surjective Set.surjective_onto_image

instance small_image2 (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥) (s : Set Œ±) (t : Set Œ≤) [Small.{u} s] [Small.{u} t] :
    Small.{u} (Set.image2 f s t) := by
  rw [‚Üê Set.image_uncurry_prod]
  infer_instance

theorem small_univ_iff : Small.{u} (@Set.univ Œ±) ‚Üî Small.{u} Œ± :=
  small_congr <| Equiv.Set.univ Œ±

instance small_univ [h : Small.{u} Œ±] : Small.{u} (@Set.univ Œ±) :=
  small_univ_iff.2 h

instance small_union (s t : Set Œ±) [Small.{u} s] [Small.{u} t] :
    Small.{u} (s ‚à™ t : Set Œ±) := by
  rw [‚Üê Subtype.range_val (s := s), ‚Üê Subtype.range_val (s := t), ‚Üê Set.Sum.elim_range]
  infer_instance

instance small_iUnion [Small.{u} Œπ] (s : Œπ ‚Üí Set Œ±)
    [‚àÄ i, Small.{u} (s i)] : Small.{u} (‚ãÉ i, s i) :=
  small_of_surjective <| Set.sigmaToiUnion_surjective _

instance small_sUnion (s : Set (Set Œ±)) [Small.{u} s] [‚àÄ t : s, Small.{u} t] :
    Small.{u} (‚ãÉ‚ÇÄ s) :=
  Set.sUnion_eq_iUnion ‚ñ∏ small_iUnion _

instance small_biUnion (s : Set Œπ) [Small.{u} s]
    (f : (i : Œπ) ‚Üí i ‚àà s ‚Üí Set Œ±) [‚àÄ i hi, Small.{u} (f i hi)] : Small.{u} (‚ãÉ i, ‚ãÉ hi, f i hi) :=
  Set.biUnion_eq_iUnion s f ‚ñ∏ small_iUnion _

instance small_insert (x : Œ±) (s : Set Œ±) [Small.{u} s] :
    Small.{u} (insert x s : Set Œ±) :=
  Set.insert_eq x s ‚ñ∏ small_union.{u} {x} s

instance small_diff (s t : Set Œ±) [Small.{u} s] : Small.{u} (s \ t : Set Œ±) :=
  small_subset (Set.diff_subset)

instance small_sep (s : Set Œ±) (P : Œ± ‚Üí Prop) [Small.{u} s] :
    Small.{u} { x | x ‚àà s ‚àß P x} :=
  small_subset (Set.sep_subset s P)

instance small_inter_of_left (s t : Set Œ±) [Small.{u} s] :
    Small.{u} (s ‚à© t : Set Œ±) :=
  small_subset Set.inter_subset_left

instance small_inter_of_right (s t : Set Œ±) [Small.{u} t] :
    Small.{u} (s ‚à© t : Set Œ±) :=
  small_subset Set.inter_subset_right

theorem small_iInter (s : Œπ ‚Üí Set Œ±) (i : Œπ)
    [Small.{u} (s i)] : Small.{u} (‚ãÇ i, s i) :=
  small_subset (Set.iInter_subset s i)

instance small_iInter' [Nonempty Œπ] (s : Œπ ‚Üí Set Œ±)
    [‚àÄ i, Small.{u} (s i)] : Small.{u} (‚ãÇ i, s i) :=
  let ‚ü®i‚ü© : Nonempty Œπ := inferInstance
  small_iInter s i

theorem small_sInter {s : Set (Set Œ±)} {t : Set Œ±} (ht : t ‚àà s)
    [Small.{u} t] : Small.{u} (‚ãÇ‚ÇÄ s) :=
  Set.sInter_eq_iInter ‚ñ∏ small_iInter _ ‚ü®t, ht‚ü©

instance small_sInter' {s : Set (Set Œ±)} [Nonempty s]
    [‚àÄ t : s, Small.{u} t] : Small.{u} (‚ãÇ‚ÇÄ s) :=
  let ‚ü®t‚ü© : Nonempty s := inferInstance
  small_sInter t.prop

theorem small_biInter {s : Set Œπ} {i : Œπ} (hi : i ‚àà s)
    (f : (i : Œπ) ‚Üí i ‚àà s ‚Üí Set Œ±) [Small.{u} (f i hi)] : Small.{u} (‚ãÇ i, ‚ãÇ hi, f i hi) :=
  Set.biInter_eq_iInter s f ‚ñ∏ small_iInter _ ‚ü®i, hi‚ü©

instance small_biInter' (s : Set Œπ) [Nonempty s]
    (f : (i : Œπ) ‚Üí i ‚àà s ‚Üí Set Œ±) [‚àÄ i hi, Small.{u} (f i hi)] : Small.{u} (‚ãÇ i, ‚ãÇ hi, f i hi) :=
  let ‚ü®t‚ü© : Nonempty s := inferInstance
  small_biInter t.prop f

theorem small_empty : Small.{u} (‚àÖ : Set Œ±) :=
  inferInstance

theorem small_single (x : Œ±) : Small.{u} ({x} : Set Œ±) :=
  inferInstance

theorem small_pair (x y : Œ±) : Small.{u} ({x, y} : Set Œ±) :=
  inferInstance
