/-
Copyright (c) 2016 Microsoft Corporation. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Leonardo de Moura
-/
import Mathlib.Mem

-- This is Lean 3 lib/lean/library/init/data/set.lean

universes u v

def Set (Œ± : Type u) := Œ± ‚Üí Prop

def setOf {Œ± : Type u} (p : Œ± ‚Üí Prop) : Set Œ± :=
p

class Subset (Œ± : Type u) :=
(subset : Œ± ‚Üí Œ± ‚Üí Prop)

infix:50 " ‚äÜ " => Subset.subset

class Union (Œ± : Type u) :=
(union : Œ± ‚Üí Œ± ‚Üí Œ±)

infixl:65 " ‚à™ " => Union.union

class Inter (Œ± : Type u) :=
(inter : Œ± ‚Üí Œ± ‚Üí Œ±)

infixl:70 " ‚à© " => Inter.inter

class Sdiff (Œ± : Type u) :=
(sdiff : Œ± ‚Üí Œ± ‚Üí Œ±)

infix:70 " \\ " => Sdiff.sdiff

namespace Set

variable {Œ± : Type u} {Œ≤ : Type v}

protected def mem (a : Œ±) (s : Set Œ±) :=
s a

instance : Mem Œ± (Set Œ±) :=
‚ü®Set.mem‚ü©

protected def subset (s‚ÇÅ s‚ÇÇ : Set Œ±) :=
‚àÄ {a}, a ‚àà s‚ÇÅ ‚Üí a ‚àà s‚ÇÇ

instance : Subset (Set Œ±) :=
‚ü®Set.subset‚ü©

instance : EmptyCollection (Set Œ±) :=
‚ü®Œª a => false‚ü©

declare_syntax_cat binderterm -- notation for `a` or `a : A` or `a ‚àà S`
syntax ident : binderterm
syntax ident ":" term : binderterm
syntax ident "‚àà" term : binderterm

-- Notation for sets
syntax "{" binderterm "|" term "}" : term

macro_rules
 -- {a : A | p a}
| `({ $x:ident : $t | $p }) => `(setOf (Œª ($x:ident : $t) => $p))
 -- {a | p a}
| `({ $x:ident | $p }) => `(setOf (Œª ($x:ident) => $p))
 -- {a ‚àà s | p a} := {a | a ‚àà s ‚àß p a}
| `({ $x:ident ‚àà $s | $p }) => `(setOf (Œª $x => $x ‚àà $s ‚àß $p))

syntax "‚àÄ" binderterm "," term : term
syntax "‚àÉ" binderterm "," term : term

macro_rules
-- ‚àÄ x ‚àà s, p := ‚àÄ x, x ‚àà s ‚Üí p
| `(‚àÄ $x:ident ‚àà $s, $p) => `(‚àÄ $x:ident, $x ‚àà $s ‚Üí $p)
-- ‚àÉ x ‚àà s, p := ‚àÉ x, x ‚àà s ‚àß p
| `(‚àÉ $x:ident ‚àà $s, $p) => `(‚àÉ $x:ident, $x ‚àà $s ‚àß $p)

def univ : Set Œ± := {a | True }

-- want: {4} : Set Nat and {4,5,6,7} : Set Nat

protected def insert (a : Œ±) (s : Set Œ±) : Set Œ± :=
{b | b = a ‚à® b ‚àà s}

protected def union (s‚ÇÅ s‚ÇÇ : Set Œ±) : Set Œ± :=
{a | a ‚àà s‚ÇÅ ‚à® a ‚àà s‚ÇÇ}

instance : Union (Set Œ±) :=
‚ü®Set.union‚ü©

protected def inter (s‚ÇÅ s‚ÇÇ : Set Œ±) : Set Œ± :=
{a | a ‚àà s‚ÇÅ ‚àß a ‚àà s‚ÇÇ}

instance : Inter (Set Œ±) :=
‚ü®Set.inter‚ü©

def compl (s : Set Œ±) : Set Œ± :=
{a | a ‚àâ s}

protected def diff (s t : Set Œ±) : Set Œ± :=
{a ‚àà s | a ‚àâ t}

instance : Sdiff (Set Œ±) :=
‚ü®Set.diff‚ü©

def powerset (s : Set Œ±) : Set (Set Œ±) :=
{t | t ‚äÜ s}

prefix:100 "ùí´" => powerset

-- TODO: {1,2,3} notation
-- TODO: {1,2,3} prettyprint

@[reducible]
def sUnion (s : Set (Set Œ±)) : Set Œ± := {t | ‚àÉ a ‚àà s, t ‚àà a}

prefix:110 "‚ãÉ‚ÇÄ" => sUnion

def image (f : Œ± ‚Üí Œ≤) (s : Set Œ±) : Set Œ≤ :=
{b | ‚àÉ a, a ‚àà s ‚àß f a = b}

instance : Functor Set :=
{ map := @Set.image }

instance : LawfulFunctor Set :=
{ id_map := Œª s => funext $ Œª b => propext ‚ü®Œª ‚ü®_, sb, rfl‚ü© => sb, Œª sb => ‚ü®_, sb, rfl‚ü©‚ü©,
  comp_map := Œª g h s => funext $ Œª c => propext
    ‚ü®Œª ‚ü®a, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü© => ‚ü®g a, ‚ü®‚ü®a, ‚ü®h‚ÇÅ, rfl‚ü©‚ü©, h‚ÇÇ‚ü©‚ü©,
     Œª ‚ü®b, ‚ü®‚ü®a, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©, h‚ÇÉ‚ü©‚ü© => ‚ü®a, ‚ü®h‚ÇÅ, show h (g a) = c from h‚ÇÇ ‚ñ∏ h‚ÇÉ‚ü©‚ü©‚ü©,
  map_const := rfl }

end Set
