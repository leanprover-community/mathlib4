/-
Copyright (c) 2024 Shogo Saito. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Shogo Saito. Adapted for mathlib by Hunter Monroe
-/
import Mathlib.ProofTheory.Semantics

/-!
# Basic definitions and properties of proof-related notions

This file defines a characterization of the proof/provability/calculus of formulas.
It also defines soundness and completeness.

## Main Definitions
* `Proof`: Proof system of logic.
* `Sound`: Soundness of the proof system.
* `Complete`: Completeness of the proof system.

-/

namespace ProofTheory

variable {F : Type*} [LogicalConnective F]

/-- Deduction Proof -/
class Proof (F : Type*) where
  /-- Proof of formula from an axiom (set of formula) -/
  Prf : Set F ‚Üí F ‚Üí Type*
  /-- A formula of an axiom is provable -/
  axm {f T} : f ‚àà T ‚Üí Prf T f
  /-- If `f` is provable from an axiom `T`, it can be proved from a stronger axiom `U` -/
  weakening' {T U f} : T ‚äÜ U ‚Üí Prf T f ‚Üí Prf U f

namespace Proof

variable [ùìë : Proof F]

instance : Turnstile F Type* := ‚ü®ùìë.Prf‚ü©

/-- `Provable` abbreviates that theory `T` proves formula `f`, i.e., `T ‚ä¢ f` is not empty. -/
abbrev Provable (T : Set F) (f : F) : Prop := Nonempty (T ‚ä¢ f)

/-- Infix notation for `Proof.Provable` -/
infix:45 " ‚ä¢! " => Proof.Provable

/-- `toProof` noncomputably yields a proof of any formula that is provable -/
noncomputable def Provable.toProof {T : Set F} {f : F} (h : T ‚ä¢! f) : T ‚ä¢ f := Classical.choice h

/-- `Unprovable` abbreviates that theory `T` does not prove formula `f`, i.e., `T ‚ä¢ f` is empty -/
abbrev Unprovable (T : Set F) (f : F) : Prop := IsEmpty (T ‚ä¢ f)

/-- Infix notation for `Proof.Unprovable` -/
infix:45 " ‚ä¨ " => Proof.Unprovable

/-- Theory `T` proves the set of formulas in `U` -/
def PrfTheory (T U : Set F) : Type _ := {f : F} ‚Üí f ‚àà U ‚Üí T ‚ä¢ f

/-- Infix notation for `Proof.PrfTheory` -/
infix:45 " ‚ä¢* " => Proof.PrfTheory

/-- Set of formulas `U` has a `ProvableTheory` `T` -/
def ProvableTheory (T U : Set F) : Prop := Nonempty (T ‚ä¢* U)

/-- Infix notation for `Proof.ProvableTheory` -/
infix:45 " ‚ä¢*! " => Proof.ProvableTheory

lemma unprovable_iff_not_provable {T : Set F} {f : F} : T ‚ä¨ f ‚Üî ¬¨T ‚ä¢! f := by
  simp[Proof.Unprovable]

/-- Empty theory is provable from any axiom -/
def PrfTheoryEmpty (T : Set F) : T ‚ä¢* ‚àÖ := fun h ‚Ü¶ by contradiction

/-- Theory `U` is provable if it is a subset of theory `T` -/
def PrfTheory.ofSubset {T U : Set F} (h : U ‚äÜ T) : T ‚ä¢* U := fun hf ‚Ü¶ axm (h hf)

/-- A theory is `ProvableTheory` for itself -/
def PrfTheory.refl (T : Set F) : T ‚ä¢* T := axm

/-- A theory is `Consistent` iff `‚ä•` is unprovable -/
def Consistent (T : Set F) : Prop := T ‚ä¨ ‚ä•

/-- Theory `T` is a `weakening` of theory `U` -/
def weakening {T U : Set F} {f : F} (b : T ‚ä¢ f) (ss : T ‚äÜ U) : U ‚ä¢ f := weakening' ss b

lemma Consistent.of_subset {T U : Set F} (h : Consistent U) (ss : T ‚äÜ U) : Consistent T :=
  ‚ü®fun b ‚Ü¶ h.false (weakening b ss)‚ü©

lemma inconsistent_of_proof {T : Set F} (b : T ‚ä¢ ‚ä•) : ¬¨Consistent T := by
  simp[Consistent]; exact ‚ü®b‚ü©

lemma inconsistent_of_provable {T : Set F} (b : T ‚ä¢! ‚ä•) : ¬¨Consistent T := by simp[Consistent]

lemma consistent_iff_unprovable {T : Set F} : Consistent T ‚Üî T ‚ä¨ ‚ä• := by rfl

/-- A theory is `Complete` iff for all formula, itself or its negation is probable from the
axiom -/
protected def Complete (T : Set F) : Prop := ‚àÄ f, (T ‚ä¢! f) ‚à® (T ‚ä¢! ~f)

/-- A formula is `Independent` from a theory if it does not prove the formula or its negation -/
def Independent (T : Set F) (f : F) : Prop := T ‚ä¨ f ‚àß T ‚ä¨ ~f

lemma incomplete_iff_exists_independent {T : Set F} :
    ¬¨Proof.Complete T ‚Üî ‚àÉ f, Independent T f := by simp[Proof.Complete, not_or, Independent]

/-- A `theory` is a set of formulas which are `Provable` -/
def theory (T : Set F) : Set F := {p | T ‚ä¢! p}

@[simp] lemma subset_theory {T : Set F} : T ‚äÜ theory T := fun _ h ‚Ü¶ ‚ü®Proof.axm h‚ü©

/-- A proof in `T` is noncomputably obtained for any formula in `T` -/
noncomputable def provableTheory_theory {T : Set F} : T ‚ä¢* theory T := Œª b ‚Ü¶ b.toProof

/-- A `Subtheory` proves a subset of formulas -/
class Subtheory (T U : Set F) where
  /-- If `T` proves `f`, `U` proves `f` -/
  sub : {f : F} ‚Üí T ‚ä¢ f ‚Üí U ‚ä¢ f

/-- Infix notation for `Subtheory` -/
scoped[ProofTheory] infix:50 " ‚âæ " => Proof.Subtheory

/-- Definition of equivalent theories -/
class Equivalent (T U : Set F) where
  /-- If `T` proves `f`, `U` proves `f` -/
  ofLeft : {f : F} ‚Üí T ‚ä¢ f ‚Üí U ‚ä¢ f
  /-- If `U` proves `f`, `T` proves `f` -/
  ofRight : {f : F} ‚Üí U ‚ä¢ f ‚Üí T ‚ä¢ f

namespace Subtheory

variable (T U T‚ÇÅ T‚ÇÇ T‚ÇÉ : Set F)

@[refl] instance : T ‚âæ T := ‚ü®id‚ü©

/-- `Subtheory` is transitive -/
@[trans] protected def trans [T‚ÇÅ ‚âæ T‚ÇÇ] [T‚ÇÇ ‚âæ T‚ÇÉ] : T‚ÇÅ ‚âæ T‚ÇÉ :=
  ‚ü®fun {f} b ‚Ü¶ sub (sub b : T‚ÇÇ ‚ä¢ f)‚ü©

variable {T U}

/-- `ofSubset` holds for a `Subtheory` that is a weakening -/
def ofSubset (h : T ‚äÜ U) : T ‚âæ U := ‚ü®fun b ‚Ü¶ weakening b h‚ü©

/-- A `prfTheory` is a subset of axioms -/
def prfTheory [T ‚âæ U] : U ‚ä¢* T := fun hp ‚Ü¶ sub (axm hp)

end Subtheory

namespace Equivalent

variable (T U T‚ÇÅ T‚ÇÇ T‚ÇÉ : Set F)

@[refl] instance : Equivalent T T := ‚ü®id, id‚ü©

@[symm] instance [Equivalent T U] : Equivalent U T := ‚ü®ofRight, ofLeft‚ü©

/-- `Equivalent` is transitive for theories -/
@[trans] protected def trans [Equivalent T‚ÇÅ T‚ÇÇ] [Equivalent T‚ÇÇ T‚ÇÉ] : Equivalent T‚ÇÅ T‚ÇÉ :=
  ‚ü®fun {f} b ‚Ü¶ ofLeft (ofLeft b : T‚ÇÇ ‚ä¢ f), fun {f} b ‚Ü¶ ofRight (ofRight b : T‚ÇÇ ‚ä¢ f)‚ü©

end Equivalent

end Proof

/-- A natural proof system generated by logical connective homomorphism-/
def Proof.ofHom [Proof F] {G : Type*} [LogicalConnective G] (F : G ‚ÜíÀ°·∂ú F) : Proof G where
  Prf := fun T g ‚Ü¶ F '' T ‚ä¢ F g
  axm := fun h ‚Ü¶ Proof.axm (Set.mem_image_of_mem F h)
  weakening' := fun h ‚Ü¶ by simpa using Proof.weakening' (Set.image_subset F h)

variable (F)
variable [LogicalConnective F] [ùìë : Proof F] {Œ±: Type*} [ùì¢ : Semantics F Œ±]

/-- A proof system of `F` is sound -/
class Sound where
  /-- A formula is provable from a theory implies it is a consequence of a theory-/
  sound {T : Set F} {p : F} : T ‚ä¢ p ‚Üí T ‚ä® p

/-- A proof system of `F` is complete -/
class Complete extends Sound F where
  /-- `T` proves any true formula -/
  complete {T : Set F} {p : F} : T ‚ä® p ‚Üí T ‚ä¢ p

variable {F}

namespace Sound

variable [Sound F]
variable {a : Œ±}

lemma sound! {T : Set F} {f : F} : T ‚ä¢! f ‚Üí T ‚ä® f := by rintro ‚ü®b‚ü©; exact sound b

lemma not_provable_of_countermodel {T : Set F} {p : F}
    (hT : a ‚äß* T) (hp : ¬¨a ‚äß p) : IsEmpty (T ‚ä¢ p) :=
  ‚ü®fun b ‚Ü¶ by have : a ‚äß p := Sound.sound b hT; contradiction‚ü©

lemma consistent_of_model {T : Set F} (hT : a ‚äß* T) : Proof.Consistent T :=
  not_provable_of_countermodel (p := ‚ä•) hT (by simp [Prop.bot_eq_false])

lemma consistent_of_satisfiable {T : Set F} :
    Semantics.SatisfiableTheory T ‚Üí Proof.Consistent T := by
  rintro ‚ü®_, h‚ü©; exact consistent_of_model h

lemma models_of_proof {T : Set F} {f} (h : a ‚äß* T) (b : T ‚ä¢ f) : a ‚äß f :=
  Sound.sound b h

lemma modelsTheory_of_proofTheory {s} {T U : Set F} (h : s ‚äß* T) (b : T ‚ä¢* U) : s ‚äß* U :=
  fun _ hf ‚Ü¶ models_of_proof h (b hf)

lemma modelsTheory_of_subtheory {s} {T U : Set F} [U ‚âæ T] (h : s ‚äß* T) : s ‚äß* U :=
  modelsTheory_of_proofTheory h Proof.Subtheory.prfTheory

end Sound

namespace Complete

/-- `of!` yields a proof of any true formula in a `Complete` theory `T`-/
noncomputable def of! [Sound F] (H : ‚àÄ {T : Set F} {p : F}, T ‚ä® p ‚Üí T ‚ä¢! p) : Complete F where
  complete := fun h ‚Ü¶ (H h).toProof

variable [Complete F]

lemma satisfiableTheory_iff_consistent {T : Set F} :
    Semantics.SatisfiableTheory T ‚Üî Proof.Consistent T :=
  ‚ü®Sound.consistent_of_satisfiable,
   by contrapose; intro h
      have : T ‚ä® ‚ä• := by intro a hM; have : Semantics.SatisfiableTheory T := ‚ü®a, hM‚ü©; contradiction
      have : T ‚ä¢ ‚ä• := complete this
      exact Proof.inconsistent_of_proof this‚ü©

lemma not_satisfiable_iff_inconsistent {T : Set F} : ¬¨Semantics.SatisfiableTheory T ‚Üî T ‚ä¢! ‚ä• := by
  simp[satisfiableTheory_iff_consistent, Proof.Consistent]

lemma consequence_iff_provable {T : Set F} {f : F} : T ‚ä® f ‚Üî T ‚ä¢! f :=
‚ü®fun h ‚Ü¶ ‚ü®complete h‚ü©, by rintro ‚ü®b‚ü©; exact Sound.sound b‚ü©

alias ‚ü®complete!, _‚ü© := consequence_iff_provable

end Complete

namespace Proof

variable [ProofTheory.Complete F]

/-- A semantic `Subtheory` is a proof `Subtheory` -/
def ofSemanticsSubtheory {T U : Set F} (h : Semantics.Subtheory T U) : Proof.Subtheory T U :=
  ‚ü®fun hf ‚Ü¶ Complete.complete (h (Sound.sound hf))‚ü©

end Proof

namespace Semantics

variable [ProofTheory.Complete F]

lemma ofProofSubtheory (T‚ÇÅ T‚ÇÇ : Set F) [Proof.Subtheory T‚ÇÅ T‚ÇÇ] : Semantics.Subtheory T‚ÇÅ T‚ÇÇ :=
  fun hf ‚Ü¶ (Sound.sound $ Proof.Subtheory.sub $ Complete.complete hf)

end Semantics

end ProofTheory
