/-
Copyright (c) 2024 Shogo Saito. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Shogo Saito. Adapted for mathlib by Hunter Monroe
-/
import Mathlib.ProofTheory.LogicSymbol
import Mathlib.Data.Finset.Image

/-!
# Basic definitions and properties of semantics-related notions

This file defines the semantics of formulas based on Tarski's truth definitions. It also provides
a characterization of compactness.

## Main Definitions
* `Semantics`: The realization of a formula.
* `Compact`: The semantic compactness of logic.

This file defines similar concepts to `ModelTheory.Semantics`, but for Tait-style formulas.

## References

* <https://plato.stanford.edu/entries/tarski-truth/>

-/

namespace ProofTheory

variable {F : Type*} [LogicalConnective F]

/-- Class `Semantics` defines how a structure realizes a formula -/
class Semantics (F : Type*) [LogicalConnective F] (Œ± : outParam (Type*)) where
  /-- Structure realizes a formula -/
  Realize : Œ± ‚Üí F ‚ÜíÀ°·∂ú Prop

namespace Semantics

variable {Œ± : Type*} [ùì¢ : Semantics F Œ±]

/-- `RealizeTheory` specifices that a structure realizes a theory if it realizes each formula -/
def RealizeTheory (a : Œ±) (T : Set F) : Prop := ‚àÄ ‚¶Éf‚¶Ñ, f ‚àà T ‚Üí Realize a f

/-- Postfix notation for `Realize` -/
notation a:80 " ‚äß " f:25 => Semantics.Realize a f

/-- Infix notation for `RealizeTheory` -/
notation a:80 " ‚äß* " T:25 => Semantics.RealizeTheory a T

/-- `Consequence` holds if xxx -/
def Consequence (T : Set F) (f : F) : Prop := ‚àÄ ‚¶Éa : Œ±‚¶Ñ, (a ‚äß* T) ‚Üí (a ‚äß f)

-- note that ‚ä® (\vDash) is *NOT* ‚äß (\models)
/-- Infix notation for `consquence` -/
infix:55 " ‚ä® " => Consequence

/-- Validity for a formula -/
def Valid (f : F) : Prop := ‚àÄ ‚¶Éa : Œ±‚¶Ñ, a ‚äß f

/-- Validity for a theory -/
def ValidTheory (T : Set F) : Prop := ‚àÄ ‚¶Éa : Œ±‚¶Ñ, a ‚äß* T

/-- Satisfiability for a formula -/
def Satisfiable (f : F) : Prop := ‚àÉ a : Œ±, a ‚äß f

/-- Satisfiability for a theory -/
def SatisfiableTheory (T : Set F) : Prop := ‚àÉ a : Œ±, a ‚äß* T

lemma valid_neg_iff (f : F) : Valid (~f) ‚Üî ¬¨Satisfiable f := by simp [Valid, Satisfiable]

lemma not_satisfiable_finset [DecidableEq F] (t : Finset F) :
    ¬¨SatisfiableTheory (t : Set F) ‚Üî Valid (t.image (~¬∑)).disj :=
  by simp [SatisfiableTheory, RealizeTheory, Valid, Finset.map_disj]

lemma realizeTheory_of_subset {T U : Set F} {a : Œ±} (h : a ‚äß* U) (ss : T ‚äÜ U) : a ‚äß* T :=
  fun _ hf ‚Ü¶ h (ss hf)

@[simp] lemma realizeTheory_empty {a : Œ±} : a ‚äß* (‚àÖ : Set F) := fun p ‚Ü¶ by simp

@[simp] lemma realizeTheory_insert {T : Set F} {f : F} {a : Œ±} :
    a ‚äß* insert f T ‚Üî (a ‚äß f) ‚àß (a ‚äß* T) := by
  simp [RealizeTheory]

@[simp] lemma realizeTheory_union {T U : Set F} {a : Œ±} :
    a ‚äß* T ‚à™ U ‚Üî (a ‚äß* T) ‚àß (a ‚äß* U) := by
  simp [RealizeTheory]
  exact ‚ü®fun h ‚Ü¶ ‚ü®fun f hf ‚Ü¶ h (Or.inl hf), fun f hf ‚Ü¶ h (Or.inr hf)‚ü©,
    by rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© f (h | h); exact h‚ÇÅ h; exact h‚ÇÇ h‚ü©

@[simp] lemma realizeTheory_image {Œπ} {f : Œπ ‚Üí F} {A : Set Œπ} {a : Œ±} :
    a ‚äß* f '' A ‚Üî ‚àÄ i ‚àà A, a ‚äß (f i) := by simp [RealizeTheory]

@[simp] lemma realizeTheory_range {Œπ} {f : Œπ ‚Üí F} {a : Œ±} :
    a ‚äß* Set.range f ‚Üî ‚àÄ i, a ‚äß (f i) := by simp [RealizeTheory]

@[simp] lemma realizeTheory_setOf {P : F ‚Üí Prop} {a : Œ±}:
    a ‚äß* setOf P ‚Üî ‚àÄ f, P f ‚Üí a ‚äß f := by rfl

lemma SatisfiableTheory.of_subset {T U : Set F} (h : SatisfiableTheory U) (ss : T ‚äÜ U) :
    SatisfiableTheory T :=
  by rcases h with ‚ü®a, h‚ü©; exact ‚ü®a, realizeTheory_of_subset h ss‚ü©

lemma consequence_iff_not_satisfiable {f : F} {T : Set F} :
    T ‚ä® f ‚Üî ¬¨SatisfiableTheory (insert (~f) T) :=
  ‚ü®by rintro hT ‚ü®a, ha‚ü©
      have : a ‚äß f := hT (realizeTheory_of_subset ha (Set.subset_insert (~f) T))
      have : ¬¨a ‚äß f := by simpa using ha (Set.mem_insert (~f) T)
      contradiction,
   by intro h a ha; by_contra hn
      have : SatisfiableTheory (insert (~f) T) := ‚ü®a, by simp [*]‚ü©
      contradiction‚ü©

lemma weakening {T U : Set F} {f} (h : T ‚ä® f) (ss : T ‚äÜ U) : U ‚ä® f :=
  fun _ hs ‚Ü¶ h (realizeTheory_of_subset hs ss)

lemma of_mem {T : Set F} {f} (h : f ‚àà T) : T ‚ä® f := fun _ hs ‚Ü¶ hs h

lemma consequence_iff {T : Set F} {f : F} : T ‚ä® f ‚Üî ¬¨SatisfiableTheory (insert (~f) T) := by
  simp [Consequence, SatisfiableTheory]; constructor
  ¬∑ intro h a hf hT; have : a ‚äß f := h hT; contradiction
  ¬∑ intro h a; contrapose; exact h a

/-- A `theory` is a set of formulas realizing a structure -/
def theory (a : Œ±) : Set F := {p | a ‚äß p}

/-- A `Subtheory` is a subset of realized formulas  -/
def Subtheory (T U : Set F) : Prop := ‚àÄ {f}, T ‚ä® f ‚Üí U ‚ä® f

/-- Definition for the equivalence of theories -/
def Equivalent (T U : Set F) : Prop := {f : F} ‚Üí T ‚ä® f ‚Üî U ‚ä® f

namespace Subtheory

variable (T U T‚ÇÅ T‚ÇÇ T‚ÇÉ : Set F)

@[refl] lemma refl : Subtheory T T := id

@[trans] protected lemma trans (h‚ÇÅ : Subtheory T‚ÇÅ T‚ÇÇ) (h‚ÇÇ : Subtheory T‚ÇÇ T‚ÇÉ) : Subtheory T‚ÇÅ T‚ÇÉ :=
  fun {f} b ‚Ü¶ h‚ÇÇ (h‚ÇÅ b : T‚ÇÇ ‚ä® f)

lemma ofSubset (h : T ‚äÜ U) : Subtheory T U := fun b ‚Ü¶ weakening b h

end Subtheory

lemma realizeTheory_of_subtheory {a : Œ±} {T U : Set F} (h : a ‚äß* U) (ss : Subtheory T U) :
    a ‚äß* T := fun _ hf ‚Ü¶ (ss (of_mem hf)) h

namespace Equivalent

variable (T U T‚ÇÅ T‚ÇÇ T‚ÇÉ : Set F)

@[refl] protected lemma refl : Equivalent T T := ‚ü®id, id‚ü©

@[symm] protected lemma symm (h : Equivalent T U) : Equivalent U T := Iff.symm h

@[trans] protected lemma trans (h‚ÇÅ : Equivalent T‚ÇÅ T‚ÇÇ) (h‚ÇÇ : Equivalent T‚ÇÇ T‚ÇÉ) : Equivalent T‚ÇÅ T‚ÇÉ :=
  Iff.trans h‚ÇÅ h‚ÇÇ

end Equivalent

/-- Class `Models` is a model for a theory -/
class Models (a : Œ±) (T : Set F) : Prop where
  RealizeTheory : a ‚äß* T

namespace Models

variable (a : Œ±) {T : Set F} [Models a T]

lemma models {f : F} (hf : f ‚àà T) : a ‚äß f := RealizeTheory hf

lemma iff : Models a T ‚Üî a ‚äß* T := ‚ü®by rintro ‚ü®h‚ü©; exact h, fun h ‚Ü¶ ‚ü®h‚ü©‚ü©

lemma of_subset {T‚ÇÅ T‚ÇÇ : Set F} [Models a T‚ÇÅ] (ss : T‚ÇÇ ‚äÜ T‚ÇÅ) : Models a T‚ÇÇ :=
  ‚ü®realizeTheory_of_subset RealizeTheory ss‚ü©

lemma of_subtheory {T‚ÇÅ T‚ÇÇ : Set F} [Models a T‚ÇÅ] (h : Subtheory T‚ÇÇ T‚ÇÅ) : Models a T‚ÇÇ :=
  ‚ü®realizeTheory_of_subtheory RealizeTheory h‚ü©

end Models

lemma consequence_iff' {T : Set F} {œÉ : F} :
    T ‚ä® œÉ ‚Üî (‚àÄ (a : Œ±) [Models a T], a ‚äß œÉ) :=
  ‚ü®fun h _ hM ‚Ü¶ h hM.RealizeTheory, fun H a hs ‚Ü¶ @H a ‚ü®hs‚ü©‚ü©

end Semantics

variable (F)
variable {Œ± : Type*} [Semantics F Œ±]

/-- A theory is satisfiable iff it is finitely satisfiable -/
class Compact : Prop where
  compact {T : Set F} :
    Semantics.SatisfiableTheory T ‚Üî (‚àÄ u : Finset F, ‚Üëu ‚äÜ T ‚Üí Semantics.SatisfiableTheory
    (u : Set F))

variable {F}

namespace Compact

variable [Compact F]
variable {a : Œ±}

lemma conseq_compact [DecidableEq F] {f : F} {T : Set F}:
    T ‚ä® f ‚Üî ‚àÉ u : Finset F, ‚Üëu ‚äÜ T ‚àß u ‚ä® f := by
  simp [Semantics.consequence_iff, compact (T := insert (~f) T)]
  constructor
  ¬∑ intro ‚ü®u, ss, hu‚ü©
    exact ‚ü®Finset.erase u (~f), by simp [ss],
      by simp; intro h; exact hu (Semantics.SatisfiableTheory.of_subset h (by simp))‚ü©
  ¬∑ intro ‚ü®u, ss, hu‚ü©
    exact ‚ü®insert (~f) u,
      by simpa using Set.insert_subset_insert ss, by simpa using hu‚ü©

end Compact

end ProofTheory
