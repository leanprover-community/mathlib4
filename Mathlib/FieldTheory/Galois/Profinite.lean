/-
Copyright (c) 2024 Nailin Guan. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nailin Guan, Yuyang Zhao, Jujian Zhang
-/

import Mathlib.Algebra.Category.Grp.FiniteGrp
import Mathlib.CategoryTheory.Category.Preorder
import Mathlib.FieldTheory.Galois.GaloisClosure

/-!

# Main definitions and results

In a field extension `K/k`

* `finGaloisGroup L` : The (finite) Galois group `Gal(L/k)` associated to a
  `L : FiniteGaloisIntermediateField k K` `L`.

* `finGaloisGroupMap` : For `FiniteGaloisIntermediateField` s `L‚ÇÅ` and `L‚ÇÇ` with `L‚ÇÇ ‚â§ L‚ÇÅ`
  giving the restriction of `Gal(L‚ÇÅ/k)` to `Gal(L‚ÇÇ/k)`

* `finGaloisGroupFunctor` : Mapping `FiniteGaloisIntermediateField` ordered by inverse inclusion to
  its corresponding Galois Group as `FiniteGrp`.

-/

open CategoryTheory Opposite

variable {k K : Type*} [Field k] [Field K] [Algebra k K]

section Profinite

/-- The (finite) Galois group `Gal(L / k)` associated to a
`L : FiniteGaloisIntermediateField k K` `L`. -/
def FiniteGaloisIntermediateField.finGaloisGroup (L : FiniteGaloisIntermediateField k K) :
    FiniteGrp :=
  letI := AlgEquiv.fintype k L
  FiniteGrp.of <| L ‚âÉ‚Çê[k] L

/-- For `FiniteGaloisIntermediateField` s `L‚ÇÅ` and `L‚ÇÇ` with `L‚ÇÇ ‚â§ L‚ÇÅ`
  the restriction homomorphism from `Gal(L‚ÇÅ/k)` to `Gal(L‚ÇÇ/k)` -/
noncomputable def finGaloisGroupMap {L‚ÇÅ L‚ÇÇ : (FiniteGaloisIntermediateField k K)·µí·µñ}
    (le : L‚ÇÅ ‚ü∂ L‚ÇÇ) : L‚ÇÅ.unop.finGaloisGroup ‚ü∂ L‚ÇÇ.unop.finGaloisGroup :=
  haveI : Normal k L‚ÇÇ.unop := IsGalois.to_normal
  letI : Algebra L‚ÇÇ.unop L‚ÇÅ.unop := RingHom.toAlgebra (Subsemiring.inclusion <| leOfHom le.1)
  haveI : IsScalarTower k L‚ÇÇ.unop L‚ÇÅ.unop := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  FiniteGrp.ofHom (AlgEquiv.restrictNormalHom L‚ÇÇ.unop)

namespace finGaloisGroupMap

@[simp]
lemma map_id (L : (FiniteGaloisIntermediateField k K)·µí·µñ) :
    (finGaloisGroupMap (ùüô L)) = ùüô L.unop.finGaloisGroup :=
  AlgEquiv.restrictNormalHom_id _ _

@[simp]
lemma map_comp {L‚ÇÅ L‚ÇÇ L‚ÇÉ : (FiniteGaloisIntermediateField k K)·µí·µñ} (f : L‚ÇÅ ‚ü∂ L‚ÇÇ) (g : L‚ÇÇ ‚ü∂ L‚ÇÉ) :
    finGaloisGroupMap (f ‚â´ g) = finGaloisGroupMap f ‚â´ finGaloisGroupMap g := by
  iterate 2
    induction L‚ÇÅ with | _ L‚ÇÅ => ?_
    induction L‚ÇÇ with | _ L‚ÇÇ => ?_
    induction L‚ÇÉ with | _ L‚ÇÉ => ?_
  letI : Algebra L‚ÇÉ L‚ÇÇ := RingHom.toAlgebra (Subsemiring.inclusion g.unop.le)
  letI : Algebra L‚ÇÇ L‚ÇÅ := RingHom.toAlgebra (Subsemiring.inclusion f.unop.le)
  letI : Algebra L‚ÇÉ L‚ÇÅ := RingHom.toAlgebra (Subsemiring.inclusion (g.unop.le.trans f.unop.le))
  haveI : IsScalarTower k L‚ÇÇ L‚ÇÅ := IsScalarTower.of_algebraMap_eq' rfl
  haveI : IsScalarTower k L‚ÇÉ L‚ÇÅ := IsScalarTower.of_algebraMap_eq' rfl
  haveI : IsScalarTower k L‚ÇÉ L‚ÇÇ := IsScalarTower.of_algebraMap_eq' rfl
  haveI : IsScalarTower L‚ÇÉ L‚ÇÇ L‚ÇÅ := IsScalarTower.of_algebraMap_eq' rfl
  apply IsScalarTower.AlgEquiv.restrictNormalHom_comp k L‚ÇÉ L‚ÇÇ L‚ÇÅ

end finGaloisGroupMap

variable (k K) in
/-- The functor from `FiniteGaloisIntermediateField` (ordered by reverse inclusion) to `FiniteGrp`,
mapping each intermediate field `K/L/k` to `Gal (L/k)`.-/
noncomputable def finGaloisGroupFunctor : (FiniteGaloisIntermediateField k K)·µí·µñ ‚•§ FiniteGrp where
  obj L := L.unop.finGaloisGroup
  map := finGaloisGroupMap
  map_id := finGaloisGroupMap.map_id
  map_comp := finGaloisGroupMap.map_comp

end Profinite
