/-
Copyright (c) 2025 Ya√´l Dillies, Matthew Johnson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Matthew Johnson
-/
import Mathlib.Algebra.Group.Pointwise.Finset.Basic
import Mathlib.Analysis.Convex.Combination
import Mathlib.Analysis.Convex.Hull

/-!
# Polytopes

We define polytopes as convex hulls of finite sets.
-/

open scoped Pointwise

variable {R ùïú E : Type*}

section Semiring
variable [Semiring R] [PartialOrder R] [AddCommMonoid E] [Module R E] {s t : Set E} {x y : E}

variable (R) in
/-- A set is a polytope if it is the convex hull of finitely many points. -/
def IsPolytope (s : Set E) : Prop := ‚àÉ t : Finset E, s = convexHull R t

@[simp] protected lemma IsPolytope.empty : IsPolytope R (‚àÖ : Set E) := ‚ü®‚àÖ, by simp‚ü©
@[simp] protected lemma IsPolytope.singleton : IsPolytope R {x} := ‚ü®{x}, by simp‚ü©

@[simp]
lemma IsPolytope.convexHull_finset {s : Finset E} : IsPolytope R <| convexHull R s.toSet := by use s

variable [IsOrderedRing R]

@[simp] protected lemma IsPolytope.segment : IsPolytope R <| segment R x y := by
  classical exact ‚ü®{x, y}, by simp‚ü©

end Semiring

section Ring
variable [Ring R] [PartialOrder R] [AddCommGroup E] [Module R E] {s t : Set E} {x y : E}

protected lemma IsPolytope.neg : IsPolytope R s ‚Üí IsPolytope R (-s) := by
  classical rintro ‚ü®A, rfl‚ü©; exact ‚ü®-A, by simp [convexHull_neg]‚ü©

end Ring

section Field
variable [Field ùïú] [LinearOrder ùïú] [IsStrictOrderedRing ùïú]
variable [AddCommGroup E] [Module ùïú E] {s t : Set E} {x y : E}

protected lemma IsPolytope.add : IsPolytope ùïú s ‚Üí IsPolytope ùïú t ‚Üí IsPolytope ùïú (s + t) := by
  classical rintro ‚ü®A, rfl‚ü© ‚ü®B, rfl‚ü©; exact ‚ü®A + B, by simp [convexHull_add]‚ü©

protected lemma IsPolytope.sub (hs : IsPolytope ùïú s) (ht : IsPolytope ùïú t) :
    IsPolytope ùïú (s - t) := by simpa [sub_eq_add_neg] using hs.add ht.neg

end Field
