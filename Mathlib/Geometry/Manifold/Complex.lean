/-
Copyright (c) 2022 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth
-/
import Mathlib.Analysis.Complex.AbsMax
import Mathlib.Analysis.LocallyConvex.WithSeminorms
import Mathlib.Geometry.Manifold.MFDeriv.Basic
import Mathlib.Topology.LocallyConstant.Basic

#align_import geometry.manifold.complex from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-! # Holomorphic functions on complex manifolds

Thanks to the rigidity of complex-differentiability compared to real-differentiability, there are
many results about complex manifolds with no analogue for manifolds over a general normed field. For
now, this file contains just two (closely related) such results:

## Main results

* `MDifferentiable.isLocallyConstant`: A complex-differentiable function on a compact complex
  manifold is locally constant.
* `MDifferentiable.exists_eq_const_of_compactSpace`: A complex-differentiable function on a compact
  preconnected complex manifold is constant.

## TODO

There is a whole theory to develop here.  Maybe a next step would be to develop a theory of
holomorphic vector/line bundles, including:
* the finite-dimensionality of the space of sections of a holomorphic vector bundle
* Siegel's theorem: for any `n + 1` formal ratios `g 0 / h 0`, `g 1 / h 1`, .... `g n / h n` of
  sections of a fixed line bundle `L` over a complex `n`-manifold, there exists a polynomial
  relationship `P (g 0 / h 0, g 1 / h 1, .... g n / h n) = 0`

Another direction would be to develop the relationship with sheaf theory, building the sheaves of
holomorphic and meromorphic functions on a complex manifold and proving algebraic results about the
stalks, such as the Weierstrass preparation theorem.

-/

open scoped Manifold Topology Filter
open Function Set Filter Complex

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚ÑÇ E]
variable {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F]
variable {H : Type*} [TopologicalSpace H] {I : ModelWithCorners ‚ÑÇ E H} [I.Boundaryless]
variable {M : Type*} [TopologicalSpace M] [CompactSpace M] [ChartedSpace H M]
  [SmoothManifoldWithCorners I M]

/-- **Maximum modulus principle**: if `f : M ‚Üí F` is complex differentiable in a neighborhood of `c`
and the norm `‚Äñf z‚Äñ` has a local maximum at `c`, then `‚Äñf z‚Äñ` is locally constant in a neighborhood
of `c`. This is a manifold version of `Complex.norm_eventually_eq_of_isLocalMax`. -/
theorem Complex.norm_eventually_eq_of_mdifferentiableAt_of_isLocalMax {f : M ‚Üí F} {c : M}
    (hd : ‚àÄ·∂† z in ùìù c, MDifferentiableAt I ùìò(‚ÑÇ, F) f z) (hc : IsLocalMax (norm ‚àò f) c) :
    ‚àÄ·∂† y in ùìù c, ‚Äñf y‚Äñ = ‚Äñf c‚Äñ := by
  set e := extChartAt I c
  have hI : range I = univ := ModelWithCorners.Boundaryless.range_eq_univ
  have H‚ÇÅ : ùìù[range I] (e c) = ùìù (e c) := by rw [hI, nhdsWithin_univ]
  have H‚ÇÇ : map e.symm (ùìù (e c)) = ùìù c := by
    rw [‚Üê map_extChartAt_symm_nhdsWithin_range I c, H‚ÇÅ]
  rw [‚Üê H‚ÇÇ, eventually_map]
  replace hd : ‚àÄ·∂† y in ùìù (e c), DifferentiableAt ‚ÑÇ (f ‚àò e.symm) y := by
    have : e.target ‚àà ùìù (e c) := H‚ÇÅ ‚ñ∏ extChartAt_target_mem_nhdsWithin I c
    filter_upwards [this, Tendsto.eventually H‚ÇÇ.le hd] with y hyt hy‚ÇÇ
    have hys : e.symm y ‚àà (chartAt H c).source := by
      rw [‚Üê extChartAt_source I c]
      exact (extChartAt I c).map_target hyt
    have hfy : f (e.symm y) ‚àà (chartAt F (0 : F)).source := mem_univ _
    rw [mdifferentiableAt_iff_of_mem_source hys hfy, hI, differentiableWithinAt_univ,
      e.right_inv hyt] at hy‚ÇÇ
    exact hy‚ÇÇ.2
  convert norm_eventually_eq_of_isLocalMax hd _
  ¬∑ exact congr_arg f (extChartAt_to_inv _ _).symm
  ¬∑ simpa only [e, IsLocalMax, IsMaxFilter, ‚Üê H‚ÇÇ, (¬∑ ‚àò ¬∑), extChartAt_to_inv] using hc

/-!
### Functions holomorphic on a set
-/

namespace MDifferentiableOn

/-- **Maximum modulus principle** on a connected set. Let `U` be a (pre)connected open set in a
complex normed space. Let `f : E ‚Üí F` be a function that is complex differentiable on `U`. Suppose
that `‚Äñf x‚Äñ` takes its maximum value on `U` at `c ‚àà U`. Then `‚Äñf x‚Äñ = ‚Äñf c‚Äñ` for all `x ‚àà U`. -/
theorem norm_eqOn_of_isPreconnected_of_isMaxOn {f : M ‚Üí F} {U : Set M} {c : M}
    (hd : MDifferentiableOn I ùìò(‚ÑÇ, F) f U) (hc : IsPreconnected U) (ho : IsOpen U)
    (hcU : c ‚àà U) (hm : IsMaxOn (norm ‚àò f) U c) : EqOn (norm ‚àò f) (const M ‚Äñf c‚Äñ) U := by
  set V := {z ‚àà U | ‚Äñf z‚Äñ = ‚Äñf c‚Äñ}
  suffices U ‚äÜ V from fun x hx ‚Ü¶ (this hx).2
  have hVo : IsOpen V := by
    refine isOpen_iff_mem_nhds.2 fun x hx ‚Ü¶ inter_mem (ho.mem_nhds hx.1) ?_
    replace hm : IsLocalMax (‚Äñf ¬∑‚Äñ) x :=
      mem_of_superset (ho.mem_nhds hx.1) fun z hz ‚Ü¶ (hm hz).out.trans_eq hx.2.symm
    replace hd : ‚àÄ·∂† y in ùìù x, MDifferentiableAt I ùìò(‚ÑÇ, F) f y :=
      (eventually_mem_nhds.2 (ho.mem_nhds hx.1)).mono fun z ‚Ü¶ hd.mdifferentiableAt
    exact (Complex.norm_eventually_eq_of_mdifferentiableAt_of_isLocalMax hd hm).mono fun _ ‚Ü¶
      (Eq.trans ¬∑ hx.2)
  have hVne : (U ‚à© V).Nonempty := ‚ü®c, hcU, hcU, rfl‚ü©
  set W := U ‚à© {z | ‚Äñf z‚Äñ = ‚Äñf c‚Äñ}·∂ú
  have hWo : IsOpen W := hd.continuousOn.norm.isOpen_inter_preimage ho isOpen_ne
  have hdVW : Disjoint V W := disjoint_compl_right.mono inf_le_right inf_le_right
  have hUVW : U ‚äÜ V ‚à™ W := fun x hx => (eq_or_ne ‚Äñf x‚Äñ ‚Äñf c‚Äñ).imp (.intro hx) (.intro hx)
  exact hc.subset_left_of_subset_union hVo hWo hdVW hUVW hVne

/-- **Maximum modulus principle** on a connected set. Let `U` be a (pre)connected open set in a
complex normed space.  Let `f : E ‚Üí F` be a function that is complex differentiable on `U`. Suppose
that `‚Äñf x‚Äñ` takes its maximum value on `U` at `c ‚àà U`. Then `f x = f c` for all `x ‚àà U`.

TODO: change assumption from `IsMaxOn` to `IsLocalMax`. -/
theorem eqOn_of_isPreconnected_of_isMaxOn_norm [StrictConvexSpace ‚Ñù F] {f : M ‚Üí F} {U : Set M}
    {c : M} (hd : MDifferentiableOn I ùìò(‚ÑÇ, F) f U) (hc : IsPreconnected U) (ho : IsOpen U)
    (hcU : c ‚àà U) (hm : IsMaxOn (norm ‚àò f) U c) : EqOn f (const M (f c)) U := fun x hx =>
  have H‚ÇÅ : ‚Äñf x‚Äñ = ‚Äñf c‚Äñ := hd.norm_eqOn_of_isPreconnected_of_isMaxOn hc ho hcU hm hx
  -- TODO: Add `MDifferentiableOn.add` etc; does it mean importing `Manifold.Algebra.Monoid`?
  have hd' : MDifferentiableOn I ùìò(‚ÑÇ, F) (f ¬∑ + f c) U := fun x hx ‚Ü¶
    ‚ü®(hd x hx).1.add continuousWithinAt_const, (hd x hx).2.add_const _‚ü©
  have H‚ÇÇ : ‚Äñf x + f c‚Äñ = ‚Äñf c + f c‚Äñ :=
    hd'.norm_eqOn_of_isPreconnected_of_isMaxOn hc ho hcU hm.norm_add_self hx
  eq_of_norm_eq_of_norm_add_eq H‚ÇÅ <| by simp only [H‚ÇÇ, SameRay.rfl.norm_add, H‚ÇÅ, Function.const]

/-- If a function `f : M ‚Üí F` from a complex manifold to a complex normed space is holomorphic on a
(pre)connected compact open set, then it is a constant on this set. -/
theorem apply_eq_of_isPreconnected_isCompact_isOpen {f : M ‚Üí F} {U : Set M} {a b : M}
    (hd : MDifferentiableOn I ùìò(‚ÑÇ, F) f U) (hpc : IsPreconnected U) (hc : IsCompact U)
    (ho : IsOpen U) (ha : a ‚àà U) (hb : b ‚àà U) : f a = f b := by
  refine ?_
  -- Subtract `f b` to avoid the assumption `[StrictConvexSpace ‚Ñù F]`
  wlog hb‚ÇÄ : f b = 0 generalizing f
  ¬∑ have hd' : MDifferentiableOn I ùìò(‚ÑÇ, F) (f ¬∑ - f b) U := fun x hx ‚Ü¶
      ‚ü®(hd x hx).1.sub continuousWithinAt_const, (hd x hx).2.sub_const _‚ü©
    simpa [sub_eq_zero] using this hd' (sub_self _)
  rcases hc.exists_isMaxOn ‚ü®a, ha‚ü© hd.continuousOn.norm with ‚ü®c, hcU, hc‚ü©
  have : ‚àÄ x ‚àà U, ‚Äñf x‚Äñ = ‚Äñf c‚Äñ :=
    norm_eqOn_of_isPreconnected_of_isMaxOn hd hpc ho hcU hc
  rw [hb‚ÇÄ, ‚Üê norm_eq_zero, this a ha, ‚Üê this b hb, hb‚ÇÄ, norm_zero]

end MDifferentiableOn

/-!
### Functions holomorphic on the whole manifold

Porting note: lemmas in this section were generalized from `ùìò(‚ÑÇ, E)` to an unspecified boundaryless
model so that it works, e.g., on a product of two manifolds without a boundary. This can break
`apply MDifferentiable.apply_eq_of_compactSpace`, use
`apply MDifferentiable.apply_eq_of_compactSpace (I := I)` instead or dot notation on an existing
`MDifferentiable` hypothesis.
-/

namespace MDifferentiable

/-- A holomorphic function on a compact complex manifold is locally constant. -/
protected theorem isLocallyConstant {f : M ‚Üí F} (hf : MDifferentiable I ùìò(‚ÑÇ, F) f) :
    IsLocallyConstant f :=
  haveI : LocallyConnectedSpace H := I.toHomeomorph.locallyConnectedSpace
  haveI : LocallyConnectedSpace M := ChartedSpace.locallyConnectedSpace H M
  IsLocallyConstant.of_constant_on_preconnected_clopens fun _ hpc hclo _a ha _b hb ‚Ü¶
    hf.mdifferentiableOn.apply_eq_of_isPreconnected_isCompact_isOpen hpc
      hclo.isClosed.isCompact hclo.isOpen hb ha
#align mdifferentiable.is_locally_constant MDifferentiable.isLocallyConstant

/-- A holomorphic function on a compact connected complex manifold is constant. -/
theorem apply_eq_of_compactSpace [PreconnectedSpace M] {f : M ‚Üí F}
    (hf : MDifferentiable I ùìò(‚ÑÇ, F) f) (a b : M) : f a = f b :=
  hf.isLocallyConstant.apply_eq_of_preconnectedSpace _ _
#align mdifferentiable.apply_eq_of_compact_space MDifferentiable.apply_eq_of_compactSpace

/-- A holomorphic function on a compact connected complex manifold is the constant function `f ‚â° v`,
for some value `v`. -/
theorem exists_eq_const_of_compactSpace [PreconnectedSpace M] {f : M ‚Üí F}
    (hf : MDifferentiable I ùìò(‚ÑÇ, F) f) : ‚àÉ v : F, f = Function.const M v :=
  hf.isLocallyConstant.exists_eq_const
#align mdifferentiable.exists_eq_const_of_compact_space MDifferentiable.exists_eq_const_of_compactSpace

end MDifferentiable
