/-
Copyright ¬© 2023 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth, Floris van Doorn
-/
import Mathlib.Geometry.Manifold.MFDeriv.Basic
import Mathlib.Topology.ContinuousFunction.Basic
import Mathlib.Geometry.Manifold.Algebra.LieGroup

#align_import geometry.manifold.vector_bundle.smooth_section from "leanprover-community/mathlib"@"e473c3198bb41f68560cab68a0529c854b618833"

/-!
# Smooth sections

In this file we define the type `ContMDiffSection` of `n` times continuously differentiable
sections of a smooth vector bundle over a manifold `M` and prove that it's a module.
-/


open Bundle Filter Function

open scoped Bundle Manifold

variable {ùïú : Type*} [NontriviallyNormedField ùïú] {E : Type*} [NormedAddCommGroup E]
  [NormedSpace ùïú E] {E' : Type*} [NormedAddCommGroup E'] [NormedSpace ùïú E'] {H : Type*}
  [TopologicalSpace H] {H' : Type*} [TopologicalSpace H'] (I : ModelWithCorners ùïú E H)
  (I' : ModelWithCorners ùïú E' H') {M : Type*} [TopologicalSpace M] [ChartedSpace H M] {M' : Type*}
  [TopologicalSpace M'] [ChartedSpace H' M'] {E'' : Type*} [NormedAddCommGroup E'']
  [NormedSpace ùïú E''] {H'' : Type*} [TopologicalSpace H''] {I'' : ModelWithCorners ùïú E'' H''}
  {M'' : Type*} [TopologicalSpace M''] [ChartedSpace H'' M''] [SmoothManifoldWithCorners I M]

variable (F : Type*) [NormedAddCommGroup F] [NormedSpace ùïú F]
  -- `F` model fiber
  (n : ‚Ñï‚àû)
  (V : M ‚Üí Type*) [TopologicalSpace (TotalSpace F V)]
  -- `V` vector bundle
  [‚àÄ x, AddCommGroup (V x)]
  [‚àÄ x, Module ùïú (V x)]

variable [‚àÄ x : M, TopologicalSpace (V x)] [FiberBundle F V] [VectorBundle ùïú F V]
  [SmoothVectorBundle F V I]

/-- Bundled `n` times continuously differentiable sections of a vector bundle. -/
structure ContMDiffSection where
  protected toFun : ‚àÄ x, V x
  protected contMDiff_toFun : ContMDiff I (I.prod ùìò(ùïú, F)) n fun x ‚Ü¶
    TotalSpace.mk' F x (toFun x)
#align cont_mdiff_section ContMDiffSection

/-- Bundled smooth sections of a vector bundle. -/
@[reducible]
def SmoothSection :=
  ContMDiffSection I F ‚ä§ V
#align smooth_section SmoothSection

@[inherit_doc] scoped[Manifold] notation "C‚Çõ^" n "‚üÆ" I "; " F ", " V "‚üØ" => ContMDiffSection I F n V

namespace ContMDiffSection

variable {I} {I'} {n} {F} {V}

instance : DFunLike C‚Çõ^n‚üÆI; F, V‚üØ M V where
  coe := ContMDiffSection.toFun
  coe_injective' := by rintro ‚ü®‚ü© ‚ü®‚ü© h; congr

variable {s t : C‚Çõ^n‚üÆI; F, V‚üØ}

@[simp]
theorem coeFn_mk (s : ‚àÄ x, V x)
    (hs : ContMDiff I (I.prod ùìò(ùïú, F)) n fun x => TotalSpace.mk x (s x)) :
    (mk s hs : ‚àÄ x, V x) = s :=
  rfl
#align cont_mdiff_section.coe_fn_mk ContMDiffSection.coeFn_mk

protected theorem contMDiff (s : C‚Çõ^n‚üÆI; F, V‚üØ) :
    ContMDiff I (I.prod ùìò(ùïú, F)) n fun x => TotalSpace.mk' F x (s x : V x) :=
  s.contMDiff_toFun
#align cont_mdiff_section.cont_mdiff ContMDiffSection.contMDiff

protected theorem smooth (s : C‚Çõ^‚àû‚üÆI; F, V‚üØ) :
    Smooth I (I.prod ùìò(ùïú, F)) fun x => TotalSpace.mk' F x (s x : V x) :=
  s.contMDiff_toFun
#align cont_mdiff_section.smooth ContMDiffSection.smooth

protected theorem mdifferentiable' (s : C‚Çõ^n‚üÆI; F, V‚üØ) (hn : 1 ‚â§ n) :
    MDifferentiable I (I.prod ùìò(ùïú, F)) fun x => TotalSpace.mk' F x (s x : V x) :=
  s.contMDiff.mdifferentiable hn
#align cont_mdiff_section.mdifferentiable' ContMDiffSection.mdifferentiable'

protected theorem mdifferentiable (s : C‚Çõ^‚àû‚üÆI; F, V‚üØ) :
    MDifferentiable I (I.prod ùìò(ùïú, F)) fun x => TotalSpace.mk' F x (s x : V x) :=
  s.contMDiff.mdifferentiable le_top
#align cont_mdiff_section.mdifferentiable ContMDiffSection.mdifferentiable

protected theorem mdifferentiableAt (s : C‚Çõ^‚àû‚üÆI; F, V‚üØ) {x} :
    MDifferentiableAt I (I.prod ùìò(ùïú, F)) (fun x => TotalSpace.mk' F x (s x : V x)) x :=
  s.mdifferentiable x
#align cont_mdiff_section.mdifferentiable_at ContMDiffSection.mdifferentiableAt

theorem coe_inj ‚¶És t : C‚Çõ^n‚üÆI; F, V‚üØ‚¶Ñ (h : (s : ‚àÄ x, V x) = t) : s = t :=
  DFunLike.ext' h
#align cont_mdiff_section.coe_inj ContMDiffSection.coe_inj

theorem coe_injective : Injective ((‚Üë) : C‚Çõ^n‚üÆI; F, V‚üØ ‚Üí ‚àÄ x, V x) :=
  coe_inj
#align cont_mdiff_section.coe_injective ContMDiffSection.coe_injective

@[ext]
theorem ext (h : ‚àÄ x, s x = t x) : s = t := DFunLike.ext _ _ h
#align cont_mdiff_section.ext ContMDiffSection.ext

instance instAdd : Add C‚Çõ^n‚üÆI; F, V‚üØ := by
  refine' ‚ü®fun s t => ‚ü®s + t, _‚ü©‚ü©
  intro x‚ÇÄ
  have hs := s.contMDiff x‚ÇÄ
  have ht := t.contMDiff x‚ÇÄ
  rw [contMDiffAt_section] at hs ht ‚ä¢
  set e := trivializationAt F V x‚ÇÄ
  refine' (hs.add ht).congr_of_eventuallyEq _
  refine' eventually_of_mem (e.open_baseSet.mem_nhds <| mem_baseSet_trivializationAt F V x‚ÇÄ) _
  intro x hx
  apply (e.linear ùïú hx).1
#align cont_mdiff_section.has_add ContMDiffSection.instAdd

@[simp]
theorem coe_add (s t : C‚Çõ^n‚üÆI; F, V‚üØ) : ‚áë(s + t) = ‚áës + t :=
  rfl
#align cont_mdiff_section.coe_add ContMDiffSection.coe_add

instance instSub : Sub C‚Çõ^n‚üÆI; F, V‚üØ := by
  refine' ‚ü®fun s t => ‚ü®s - t, _‚ü©‚ü©
  intro x‚ÇÄ
  have hs := s.contMDiff x‚ÇÄ
  have ht := t.contMDiff x‚ÇÄ
  rw [contMDiffAt_section] at hs ht ‚ä¢
  set e := trivializationAt F V x‚ÇÄ
  refine' (hs.sub ht).congr_of_eventuallyEq _
  refine' eventually_of_mem (e.open_baseSet.mem_nhds <| mem_baseSet_trivializationAt F V x‚ÇÄ) _
  intro x hx
  apply (e.linear ùïú hx).map_sub
#align cont_mdiff_section.has_sub ContMDiffSection.instSub

@[simp]
theorem coe_sub (s t : C‚Çõ^n‚üÆI; F, V‚üØ) : ‚áë(s - t) = s - t :=
  rfl
#align cont_mdiff_section.coe_sub ContMDiffSection.coe_sub

instance instZero : Zero C‚Çõ^n‚üÆI; F, V‚üØ :=
  ‚ü®‚ü®fun _ => 0, (smooth_zeroSection ùïú V).of_le le_top‚ü©‚ü©
#align cont_mdiff_section.has_zero ContMDiffSection.instZero

instance inhabited : Inhabited C‚Çõ^n‚üÆI; F, V‚üØ :=
  ‚ü®0‚ü©
#align cont_mdiff_section.inhabited ContMDiffSection.inhabited

@[simp]
theorem coe_zero : ‚áë(0 : C‚Çõ^n‚üÆI; F, V‚üØ) = 0 :=
  rfl
#align cont_mdiff_section.coe_zero ContMDiffSection.coe_zero

instance instSMul : SMul ùïú C‚Çõ^n‚üÆI; F, V‚üØ := by
  refine' ‚ü®fun c s => ‚ü®c ‚Ä¢ ‚áës, _‚ü©‚ü©
  intro x‚ÇÄ
  have hs := s.contMDiff x‚ÇÄ
  rw [contMDiffAt_section] at hs ‚ä¢
  set e := trivializationAt F V x‚ÇÄ
  refine' (contMDiffAt_const.smul hs).congr_of_eventuallyEq _
  ¬∑ exact c
  refine' eventually_of_mem (e.open_baseSet.mem_nhds <| mem_baseSet_trivializationAt F V x‚ÇÄ) _
  intro x hx
  apply (e.linear ùïú hx).2
#align cont_mdiff_section.has_smul ContMDiffSection.instSMul

@[simp]
theorem coe_smul (r : ùïú) (s : C‚Çõ^n‚üÆI; F, V‚üØ) : ‚áë(r ‚Ä¢ s : C‚Çõ^n‚üÆI; F, V‚üØ) = r ‚Ä¢ ‚áës :=
  rfl
#align cont_mdiff_section.coe_smul ContMDiffSection.coe_smul

instance instNeg : Neg C‚Çõ^n‚üÆI; F, V‚üØ := by
  refine' ‚ü®fun s => ‚ü®-s, _‚ü©‚ü©
  intro x‚ÇÄ
  have hs := s.contMDiff x‚ÇÄ
  rw [contMDiffAt_section] at hs ‚ä¢
  set e := trivializationAt F V x‚ÇÄ
  refine' hs.neg.congr_of_eventuallyEq _
  refine' eventually_of_mem (e.open_baseSet.mem_nhds <| mem_baseSet_trivializationAt F V x‚ÇÄ) _
  intro x hx
  apply (e.linear ùïú hx).map_neg
#align cont_mdiff_section.has_neg ContMDiffSection.instNeg

@[simp]
theorem coe_neg (s : C‚Çõ^n‚üÆI; F, V‚üØ) : ‚áë(-s : C‚Çõ^n‚üÆI; F, V‚üØ) = -s :=
  rfl
#align cont_mdiff_section.coe_neg ContMDiffSection.coe_neg

instance instNSMul : SMul ‚Ñï C‚Çõ^n‚üÆI; F, V‚üØ :=
  ‚ü®nsmulRec‚ü©
#align cont_mdiff_section.has_nsmul ContMDiffSection.instNSMul

@[simp]
theorem coe_nsmul (s : C‚Çõ^n‚üÆI; F, V‚üØ) (k : ‚Ñï) : ‚áë(k ‚Ä¢ s : C‚Çõ^n‚üÆI; F, V‚üØ) = k ‚Ä¢ ‚áës := by
  induction' k with k ih
  ¬∑ simp_rw [Nat.zero_eq, zero_smul]; rfl
  simp_rw [succ_nsmul, ‚Üê ih]; rfl
#align cont_mdiff_section.coe_nsmul ContMDiffSection.coe_nsmul

instance instZSMul : SMul ‚Ñ§ C‚Çõ^n‚üÆI; F, V‚üØ :=
  ‚ü®zsmulRec‚ü©
#align cont_mdiff_section.has_zsmul ContMDiffSection.instZSMul

@[simp]
theorem coe_zsmul (s : C‚Çõ^n‚üÆI; F, V‚üØ) (z : ‚Ñ§) : ‚áë(z ‚Ä¢ s : C‚Çõ^n‚üÆI; F, V‚üØ) = z ‚Ä¢ ‚áës := by
  cases' z with n n
  refine' (coe_nsmul s n).trans _
  simp only [Int.ofNat_eq_coe, natCast_zsmul]
  refine' (congr_arg Neg.neg (coe_nsmul s (n + 1))).trans _
  simp only [negSucc_zsmul, neg_inj]
#align cont_mdiff_section.coe_zsmul ContMDiffSection.coe_zsmul

instance instAddCommGroup : AddCommGroup C‚Çõ^n‚üÆI; F, V‚üØ :=
  coe_injective.addCommGroup _ coe_zero coe_add coe_neg coe_sub coe_nsmul coe_zsmul
#align cont_mdiff_section.add_comm_group ContMDiffSection.instAddCommGroup

variable (I F V n)

/-- The additive morphism from smooth sections to dependent maps. -/
def coeAddHom : C‚Çõ^n‚üÆI; F, V‚üØ ‚Üí+ ‚àÄ x, V x where
  toFun := (‚Üë)
  map_zero' := coe_zero
  map_add' := coe_add
#align cont_mdiff_section.coe_add_hom ContMDiffSection.coeAddHom

variable {I F V n}

instance instModule : Module ùïú C‚Çõ^n‚üÆI; F, V‚üØ :=
  coe_injective.module ùïú (coeAddHom I F n V) coe_smul
#align cont_mdiff_section.module ContMDiffSection.instModule

end ContMDiffSection
