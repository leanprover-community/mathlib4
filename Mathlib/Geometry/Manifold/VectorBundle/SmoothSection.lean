/-
Copyright (c) 2023 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth, Floris van Doorn
-/
import Mathlib.Geometry.Manifold.Algebra.LieGroup
import Mathlib.Geometry.Manifold.MFDeriv.Basic
import Mathlib.Topology.ContinuousMap.Basic
import Mathlib.Geometry.Manifold.VectorBundle.Basic

/-!
# Smooth sections

In this file we define the type `ContMDiffSection` of `n` times continuously differentiable
sections of a smooth vector bundle over a manifold `M` and prove that it's a module.
-/


open Bundle Filter Function

open scoped Bundle Manifold
/- Next line is necessary while the manifold smoothness class is not extended to `œâ`.
Later, replace with `open scoped ContDiff`. -/
local notation "‚àû" => (‚ä§ : ‚Ñï‚àû)

variable {ùïú : Type*} [NontriviallyNormedField ùïú] {E : Type*} [NormedAddCommGroup E]
  [NormedSpace ùïú E] {H : Type*} [TopologicalSpace H] (I : ModelWithCorners ùïú E H)
  {M : Type*} [TopologicalSpace M] [ChartedSpace H M]

variable (F : Type*) [NormedAddCommGroup F] [NormedSpace ùïú F]
  -- `F` model fiber
  (n : ‚Ñï‚àû)
  (V : M ‚Üí Type*) [TopologicalSpace (TotalSpace F V)]
  -- `V` vector bundle
  [‚àÄ x : M, TopologicalSpace (V x)] [FiberBundle F V]

/-- Bundled `n` times continuously differentiable sections of a vector bundle. -/
structure ContMDiffSection where
  /-- the underlying function of this section -/
  protected toFun : ‚àÄ x, V x
  /-- proof that this section is `C^n` -/
  protected contMDiff_toFun : ContMDiff I (I.prod ùìò(ùïú, F)) n fun x ‚Ü¶
    TotalSpace.mk' F x (toFun x)

@[deprecated (since := "024-11-21")] alias SmoothSection := ContMDiffSection

@[inherit_doc] scoped[Manifold] notation "C‚Çõ^" n "‚üÆ" I "; " F ", " V "‚üØ" => ContMDiffSection I F n V

namespace ContMDiffSection

variable {I} {n} {F} {V}

instance : DFunLike C‚Çõ^n‚üÆI; F, V‚üØ M V where
  coe := ContMDiffSection.toFun
  coe_injective' := by rintro ‚ü®‚ü© ‚ü®‚ü© h; congr

variable {s t : C‚Çõ^n‚üÆI; F, V‚üØ}

@[simp]
theorem coeFn_mk (s : ‚àÄ x, V x)
    (hs : ContMDiff I (I.prod ùìò(ùïú, F)) n fun x => TotalSpace.mk x (s x)) :
    (mk s hs : ‚àÄ x, V x) = s :=
  rfl

protected theorem contMDiff (s : C‚Çõ^n‚üÆI; F, V‚üØ) :
    ContMDiff I (I.prod ùìò(ùïú, F)) n fun x => TotalSpace.mk' F x (s x : V x) :=
  s.contMDiff_toFun

@[deprecated (since := "2024-11-21")] alias smooth := ContMDiffSection.contMDiff

theorem coe_inj ‚¶És t : C‚Çõ^n‚üÆI; F, V‚üØ‚¶Ñ (h : (s : ‚àÄ x, V x) = t) : s = t :=
  DFunLike.ext' h

theorem coe_injective : Injective ((‚Üë) : C‚Çõ^n‚üÆI; F, V‚üØ ‚Üí ‚àÄ x, V x) :=
  coe_inj

@[ext]
theorem ext (h : ‚àÄ x, s x = t x) : s = t := DFunLike.ext _ _ h

section
variable [‚àÄ x, AddCommGroup (V x)] [‚àÄ x, Module ùïú (V x)] [VectorBundle ùïú F V]

instance instAdd : Add C‚Çõ^n‚üÆI; F, V‚üØ := by
  refine ‚ü®fun s t => ‚ü®s + t, ?_‚ü©‚ü©
  intro x‚ÇÄ
  have hs := s.contMDiff x‚ÇÄ
  have ht := t.contMDiff x‚ÇÄ
  rw [contMDiffAt_section] at hs ht ‚ä¢
  set e := trivializationAt F V x‚ÇÄ
  refine (hs.add ht).congr_of_eventuallyEq ?_
  refine eventually_of_mem (e.open_baseSet.mem_nhds <| mem_baseSet_trivializationAt F V x‚ÇÄ) ?_
  intro x hx
  apply (e.linear ùïú hx).1

@[simp]
theorem coe_add (s t : C‚Çõ^n‚üÆI; F, V‚üØ) : ‚áë(s + t) = ‚áës + t :=
  rfl

instance instSub : Sub C‚Çõ^n‚üÆI; F, V‚üØ := by
  refine ‚ü®fun s t => ‚ü®s - t, ?_‚ü©‚ü©
  intro x‚ÇÄ
  have hs := s.contMDiff x‚ÇÄ
  have ht := t.contMDiff x‚ÇÄ
  rw [contMDiffAt_section] at hs ht ‚ä¢
  set e := trivializationAt F V x‚ÇÄ
  refine (hs.sub ht).congr_of_eventuallyEq ?_
  refine eventually_of_mem (e.open_baseSet.mem_nhds <| mem_baseSet_trivializationAt F V x‚ÇÄ) ?_
  intro x hx
  apply (e.linear ùïú hx).map_sub

@[simp]
theorem coe_sub (s t : C‚Çõ^n‚üÆI; F, V‚üØ) : ‚áë(s - t) = s - t :=
  rfl

instance instZero : Zero C‚Çõ^n‚üÆI; F, V‚üØ :=
  ‚ü®‚ü®fun _ => 0, (contMDiff_zeroSection ùïú V).of_le le_top‚ü©‚ü©

instance inhabited : Inhabited C‚Çõ^n‚üÆI; F, V‚üØ :=
  ‚ü®0‚ü©

@[simp]
theorem coe_zero : ‚áë(0 : C‚Çõ^n‚üÆI; F, V‚üØ) = 0 :=
  rfl

instance instNeg : Neg C‚Çõ^n‚üÆI; F, V‚üØ := by
  refine ‚ü®fun s => ‚ü®-s, ?_‚ü©‚ü©
  intro x‚ÇÄ
  have hs := s.contMDiff x‚ÇÄ
  rw [contMDiffAt_section] at hs ‚ä¢
  set e := trivializationAt F V x‚ÇÄ
  refine hs.neg.congr_of_eventuallyEq ?_
  refine eventually_of_mem (e.open_baseSet.mem_nhds <| mem_baseSet_trivializationAt F V x‚ÇÄ) ?_
  intro x hx
  apply (e.linear ùïú hx).map_neg

@[simp]
theorem coe_neg (s : C‚Çõ^n‚üÆI; F, V‚üØ) : ‚áë(-s : C‚Çõ^n‚üÆI; F, V‚üØ) = -s :=
  rfl

instance instNSMul : SMul ‚Ñï C‚Çõ^n‚üÆI; F, V‚üØ :=
  ‚ü®nsmulRec‚ü©

@[simp]
theorem coe_nsmul (s : C‚Çõ^n‚üÆI; F, V‚üØ) (k : ‚Ñï) : ‚áë(k ‚Ä¢ s : C‚Çõ^n‚üÆI; F, V‚üØ) = k ‚Ä¢ ‚áës := by
  induction' k with k ih
  ¬∑ simp_rw [zero_smul]; rfl
  simp_rw [succ_nsmul, ‚Üê ih]; rfl

instance instZSMul : SMul ‚Ñ§ C‚Çõ^n‚üÆI; F, V‚üØ :=
  ‚ü®zsmulRec‚ü©

@[simp]
theorem coe_zsmul (s : C‚Çõ^n‚üÆI; F, V‚üØ) (z : ‚Ñ§) : ‚áë(z ‚Ä¢ s : C‚Çõ^n‚üÆI; F, V‚üØ) = z ‚Ä¢ ‚áës := by
  cases' z with n n
  ¬∑ refine (coe_nsmul s n).trans ?_
    simp only [Int.ofNat_eq_coe, natCast_zsmul]
  ¬∑ refine (congr_arg Neg.neg (coe_nsmul s (n + 1))).trans ?_
    simp only [negSucc_zsmul, neg_inj]

instance instAddCommGroup : AddCommGroup C‚Çõ^n‚üÆI; F, V‚üØ :=
  coe_injective.addCommGroup _ coe_zero coe_add coe_neg coe_sub coe_nsmul coe_zsmul

instance instSMul : SMul ùïú C‚Çõ^n‚üÆI; F, V‚üØ := by
  refine ‚ü®fun c s => ‚ü®c ‚Ä¢ ‚áës, ?_‚ü©‚ü©
  intro x‚ÇÄ
  have hs := s.contMDiff x‚ÇÄ
  rw [contMDiffAt_section] at hs ‚ä¢
  set e := trivializationAt F V x‚ÇÄ
  refine ((contMDiffAt_const (c := c)).smul hs).congr_of_eventuallyEq ?_
  refine eventually_of_mem (e.open_baseSet.mem_nhds <| mem_baseSet_trivializationAt F V x‚ÇÄ) ?_
  intro x hx
  apply (e.linear ùïú hx).2

@[simp]
theorem coe_smul (r : ùïú) (s : C‚Çõ^n‚üÆI; F, V‚üØ) : ‚áë(r ‚Ä¢ s : C‚Çõ^n‚üÆI; F, V‚üØ) = r ‚Ä¢ ‚áës :=
  rfl

variable (I F V n) in
/-- The additive morphism from smooth sections to dependent maps. -/
def coeAddHom : C‚Çõ^n‚üÆI; F, V‚üØ ‚Üí+ ‚àÄ x, V x where
  toFun := (‚Üë)
  map_zero' := coe_zero
  map_add' := coe_add

instance instModule : Module ùïú C‚Çõ^n‚üÆI; F, V‚üØ :=
  coe_injective.module ùïú (coeAddHom I F n V) coe_smul

end

protected theorem mdifferentiable' (s : C‚Çõ^n‚üÆI; F, V‚üØ) (hn : 1 ‚â§ n) :
    MDifferentiable I (I.prod ùìò(ùïú, F)) fun x => TotalSpace.mk' F x (s x : V x) :=
  s.contMDiff.mdifferentiable hn

protected theorem mdifferentiable (s : C‚Çõ^‚àû‚üÆI; F, V‚üØ) :
    MDifferentiable I (I.prod ùìò(ùïú, F)) fun x => TotalSpace.mk' F x (s x : V x) :=
  s.contMDiff.mdifferentiable le_top

protected theorem mdifferentiableAt (s : C‚Çõ^‚àû‚üÆI; F, V‚üØ) {x} :
    MDifferentiableAt I (I.prod ùìò(ùïú, F)) (fun x => TotalSpace.mk' F x (s x : V x)) x :=
  s.mdifferentiable x

end ContMDiffSection
