/-
Copyright (c) 2023 Winston Yin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Winston Yin
-/
import Mathlib.Geometry.Manifold.MFDeriv.Tangent

/-!
# Integral curves of vector fields on a manifold

Let `M` be a manifold and `v : (x : M) ‚Üí TangentSpace I x` be a vector field on `M`. An integral
curve of `v` is a function `Œ≥ : ‚Ñù ‚Üí M` such that the derivative of `Œ≥` at `t` equals `v (Œ≥ t)`. The
integral curve may only be defined for all `t` within some subset of `‚Ñù`.

This is the first of a series of files, organised as follows:
* `Mathlib.Geometry.Manifold.IntegralCurve.Basic` (this file): Basic definitions and lemmas relating
them to each other and to continuity and differentiability
* `Mathlib.Geometry.Manifold.IntegralCurve.Transform`: Lemmas about translating or scaling the
domain of an integral curve by a constant
* `Mathlib.Geometry.Manifold.IntegralCurve.ExistUnique`: Local existence and uniqueness theorems for
integral curves

## Main definitions

Let `v : M ‚Üí TM` be a vector field on `M`, and let `Œ≥ : ‚Ñù ‚Üí M`.
* `IsIntegralCurve Œ≥ v`: `Œ≥ t` is tangent to `v (Œ≥ t)` for all `t : ‚Ñù`. That is, `Œ≥` is a global
integral curve of `v`.
* `IsIntegralCurveOn Œ≥ v s`: `Œ≥ t` is tangent to `v (Œ≥ t)` for all `t ‚àà s`, where `s : Set ‚Ñù`.
* `IsIntegralCurveAt Œ≥ v t‚ÇÄ`: `Œ≥ t` is tangent to `v (Œ≥ t)` for all `t` in some open interval
around `t‚ÇÄ`. That is, `Œ≥` is a local integral curve of `v`.

For `IsIntegralCurveOn Œ≥ v s` and `IsIntegralCurveAt Œ≥ v t‚ÇÄ`, even though `Œ≥` is defined for all
time, its value outside of the set `s` or a small interval around `t‚ÇÄ` is irrelevant and considered
junk.

## Reference

* [Lee, J. M. (2012). _Introduction to Smooth Manifolds_. Springer New York.][lee2012]

## Tags

integral curve, vector field
-/

open scoped Manifold Topology

open Set

variable
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {H : Type*} [TopologicalSpace H] {I : ModelWithCorners ‚Ñù E H}
  {M : Type*} [TopologicalSpace M] [ChartedSpace H M]

/-- If `Œ≥ : ‚Ñù ‚Üí M` is $C^1$ on `s : Set ‚Ñù` and `v` is a vector field on `M`,
`IsIntegralCurveOn Œ≥ v s` means `Œ≥ t` is tangent to `v (Œ≥ t)` for all `t ‚àà s`. The value of `Œ≥`
outside of `s` is irrelevant and considered junk. -/
def IsIntegralCurveOn (Œ≥ : ‚Ñù ‚Üí M) (v : (x : M) ‚Üí TangentSpace I x) (s : Set ‚Ñù) : Prop :=
  ‚àÄ t ‚àà s, HasMFDerivAt ùìò(‚Ñù, ‚Ñù) I Œ≥ t ((1 : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù).smulRight <| v (Œ≥ t))

/-- If `v` is a vector field on `M` and `t‚ÇÄ : ‚Ñù`, `IsIntegralCurveAt Œ≥ v t‚ÇÄ` means `Œ≥ : ‚Ñù ‚Üí M` is a
local integral curve of `v` in a neighbourhood containing `t‚ÇÄ`. The value of `Œ≥` outside of this
interval is irrelevant and considered junk. -/
def IsIntegralCurveAt (Œ≥ : ‚Ñù ‚Üí M) (v : (x : M) ‚Üí TangentSpace I x) (t‚ÇÄ : ‚Ñù) : Prop :=
  ‚àÄ·∂† t in ùìù t‚ÇÄ, HasMFDerivAt ùìò(‚Ñù, ‚Ñù) I Œ≥ t ((1 : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù).smulRight <| v (Œ≥ t))

/-- If `v : M ‚Üí TM` is a vector field on `M`, `IsIntegralCurve Œ≥ v` means `Œ≥ : ‚Ñù ‚Üí M` is a global
integral curve of `v`. That is, `Œ≥ t` is tangent to `v (Œ≥ t)` for all `t : ‚Ñù`. -/
def IsIntegralCurve (Œ≥ : ‚Ñù ‚Üí M) (v : (x : M) ‚Üí TangentSpace I x) : Prop :=
  ‚àÄ t : ‚Ñù, HasMFDerivAt ùìò(‚Ñù, ‚Ñù) I Œ≥ t ((1 : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù).smulRight (v (Œ≥ t)))

variable {Œ≥ Œ≥' : ‚Ñù ‚Üí M} {v : (x : M) ‚Üí TangentSpace I x} {s s' : Set ‚Ñù} {t‚ÇÄ : ‚Ñù}

lemma IsIntegralCurve.isIntegralCurveOn (h : IsIntegralCurve Œ≥ v) (s : Set ‚Ñù) :
    IsIntegralCurveOn Œ≥ v s := fun t _ ‚Ü¶ h t

lemma isIntegralCurve_iff_isIntegralCurveOn : IsIntegralCurve Œ≥ v ‚Üî IsIntegralCurveOn Œ≥ v univ :=
  ‚ü®fun h ‚Ü¶ h.isIntegralCurveOn _, fun h t ‚Ü¶ h t (mem_univ _)‚ü©

lemma isIntegralCurveAt_iff :
    IsIntegralCurveAt Œ≥ v t‚ÇÄ ‚Üî ‚àÉ s ‚àà ùìù t‚ÇÄ, IsIntegralCurveOn Œ≥ v s := by
  simp_rw [IsIntegralCurveOn, ‚Üê Filter.eventually_iff_exists_mem, IsIntegralCurveAt]

/-- `Œ≥` is an integral curve for `v` at `t‚ÇÄ` iff `Œ≥` is an integral curve on some interval
containing `t‚ÇÄ`. -/
lemma isIntegralCurveAt_iff' :
    IsIntegralCurveAt Œ≥ v t‚ÇÄ ‚Üî ‚àÉ Œµ > 0, IsIntegralCurveOn Œ≥ v (Metric.ball t‚ÇÄ Œµ) := by
  simp_rw [IsIntegralCurveOn, ‚Üê Metric.eventually_nhds_iff_ball, IsIntegralCurveAt]

lemma IsIntegralCurve.isIntegralCurveAt (h : IsIntegralCurve Œ≥ v) (t : ‚Ñù) :
    IsIntegralCurveAt Œ≥ v t := isIntegralCurveAt_iff.mpr ‚ü®univ, Filter.univ_mem, fun t _ ‚Ü¶ h t‚ü©

lemma isIntegralCurve_iff_isIntegralCurveAt :
    IsIntegralCurve Œ≥ v ‚Üî ‚àÄ t : ‚Ñù, IsIntegralCurveAt Œ≥ v t :=
  ‚ü®fun h ‚Ü¶ h.isIntegralCurveAt, fun h t ‚Ü¶ by
    obtain ‚ü®s, hs, h‚ü© := isIntegralCurveAt_iff.mp (h t)
    exact h t (mem_of_mem_nhds hs)‚ü©

lemma IsIntegralCurveOn.mono (h : IsIntegralCurveOn Œ≥ v s) (hs : s' ‚äÜ s) :
    IsIntegralCurveOn Œ≥ v s' := fun t ht ‚Ü¶ h t (mem_of_mem_of_subset ht hs)

lemma IsIntegralCurveOn.of_union (h : IsIntegralCurveOn Œ≥ v s) (h' : IsIntegralCurveOn Œ≥ v s') :
    IsIntegralCurveOn Œ≥ v (s ‚à™ s') := fun _ ‚Ü¶ fun | .inl ht => h _ ht | .inr ht => h' _ ht

lemma IsIntegralCurveAt.hasMFDerivAt (h : IsIntegralCurveAt Œ≥ v t‚ÇÄ) :
    HasMFDerivAt ùìò(‚Ñù, ‚Ñù) I Œ≥ t‚ÇÄ ((1 : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù).smulRight (v (Œ≥ t‚ÇÄ))) :=
  have ‚ü®_, hs, h‚ü© := isIntegralCurveAt_iff.mp h
  h t‚ÇÄ (mem_of_mem_nhds hs)

lemma IsIntegralCurveOn.isIntegralCurveAt (h : IsIntegralCurveOn Œ≥ v s) (hs : s ‚àà ùìù t‚ÇÄ) :
    IsIntegralCurveAt Œ≥ v t‚ÇÄ := isIntegralCurveAt_iff.mpr ‚ü®s, hs, h‚ü©

/-- If `Œ≥` is an integral curve at each `t ‚àà s`, it is an integral curve on `s`. -/
lemma IsIntegralCurveAt.isIntegralCurveOn (h : ‚àÄ t ‚àà s, IsIntegralCurveAt Œ≥ v t) :
    IsIntegralCurveOn Œ≥ v s := by
  intros t ht
  obtain ‚ü®s, hs, h‚ü© := isIntegralCurveAt_iff.mp (h t ht)
  exact h t (mem_of_mem_nhds hs)

lemma isIntegralCurveOn_iff_isIntegralCurveAt (hs : IsOpen s) :
    IsIntegralCurveOn Œ≥ v s ‚Üî ‚àÄ t ‚àà s, IsIntegralCurveAt Œ≥ v t :=
  ‚ü®fun h _ ht ‚Ü¶ h.isIntegralCurveAt (hs.mem_nhds ht), IsIntegralCurveAt.isIntegralCurveOn‚ü©

lemma IsIntegralCurveOn.continuousAt (hŒ≥ : IsIntegralCurveOn Œ≥ v s) (ht : t‚ÇÄ ‚àà s) :
    ContinuousAt Œ≥ t‚ÇÄ := (hŒ≥ t‚ÇÄ ht).1

lemma IsIntegralCurveOn.continuousOn (hŒ≥ : IsIntegralCurveOn Œ≥ v s) :
    ContinuousOn Œ≥ s := fun t ht ‚Ü¶ (hŒ≥ t ht).1.continuousWithinAt

lemma IsIntegralCurveAt.continuousAt (hŒ≥ : IsIntegralCurveAt Œ≥ v t‚ÇÄ) :
    ContinuousAt Œ≥ t‚ÇÄ :=
  have ‚ü®_, hs, hŒ≥‚ü© := isIntegralCurveAt_iff.mp hŒ≥
  hŒ≥.continuousAt <| mem_of_mem_nhds hs

lemma IsIntegralCurve.continuous (hŒ≥ : IsIntegralCurve Œ≥ v) : Continuous Œ≥ :=
  continuous_iff_continuousAt.mpr fun _ ‚Ü¶ (hŒ≥.isIntegralCurveOn univ).continuousAt (mem_univ _)

variable [SmoothManifoldWithCorners I M]

/-- If `Œ≥` is an integral curve of a vector field `v`, then `Œ≥ t` is tangent to `v (Œ≥ t)` when
  expressed in the local chart around the initial point `Œ≥ t‚ÇÄ`. -/
lemma IsIntegralCurveOn.hasDerivAt (hŒ≥ : IsIntegralCurveOn Œ≥ v s) {t : ‚Ñù} (ht : t ‚àà s)
    (hsrc : Œ≥ t ‚àà (extChartAt I (Œ≥ t‚ÇÄ)).source) :
    HasDerivAt ((extChartAt I (Œ≥ t‚ÇÄ)) ‚àò Œ≥)
      (tangentCoordChange I (Œ≥ t) (Œ≥ t‚ÇÄ) (Œ≥ t) (v (Œ≥ t))) t := by
  -- turn `HasDerivAt` into comp of `HasMFDerivAt`
  have hsrc := extChartAt_source I (Œ≥ t‚ÇÄ) ‚ñ∏ hsrc
  rw [hasDerivAt_iff_hasFDerivAt, ‚Üê hasMFDerivAt_iff_hasFDerivAt]
  apply (HasMFDerivAt.comp t
    (hasMFDerivAt_extChartAt (I := I) hsrc) (hŒ≥ _ ht)).congr_mfderiv
  rw [ContinuousLinearMap.ext_iff]
  intro a
  rw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.smulRight_apply, map_smul,
    ‚Üê ContinuousLinearMap.one_apply (R‚ÇÅ := ‚Ñù) a, ‚Üê ContinuousLinearMap.smulRight_apply,
    mfderiv_chartAt_eq_tangentCoordChange hsrc]
  rfl

lemma IsIntegralCurveAt.eventually_hasDerivAt (hŒ≥ : IsIntegralCurveAt Œ≥ v t‚ÇÄ) :
    ‚àÄ·∂† t in ùìù t‚ÇÄ, HasDerivAt ((extChartAt I (Œ≥ t‚ÇÄ)) ‚àò Œ≥)
      (tangentCoordChange I (Œ≥ t) (Œ≥ t‚ÇÄ) (Œ≥ t) (v (Œ≥ t))) t := by
  apply eventually_mem_nhds_iff.mpr
    (hŒ≥.continuousAt.preimage_mem_nhds (extChartAt_source_mem_nhds (I := I) _)) |>.and hŒ≥ |>.mono
  rintro t ‚ü®ht1, ht2‚ü©
  have hsrc := mem_of_mem_nhds ht1
  rw [mem_preimage, extChartAt_source I (Œ≥ t‚ÇÄ)] at hsrc
  rw [hasDerivAt_iff_hasFDerivAt, ‚Üê hasMFDerivAt_iff_hasFDerivAt]
  apply (HasMFDerivAt.comp t (hasMFDerivAt_extChartAt (I := I) hsrc) ht2).congr_mfderiv
  rw [ContinuousLinearMap.ext_iff]
  intro a
  rw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.smulRight_apply, map_smul,
    ‚Üê ContinuousLinearMap.one_apply (R‚ÇÅ := ‚Ñù) a, ‚Üê ContinuousLinearMap.smulRight_apply,
    mfderiv_chartAt_eq_tangentCoordChange hsrc]
  rfl
