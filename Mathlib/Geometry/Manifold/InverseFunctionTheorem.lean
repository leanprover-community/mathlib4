/-
Copyright (c) 2023 Michael Rothgang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Rothgang
-/
import Mathlib.Analysis.Calculus.InverseFunctionTheorem.FDeriv
import Mathlib.Analysis.Calculus.InverseFunctionTheorem.ContDiff
import Mathlib.Geometry.Manifold.Diffeomorph
import Mathlib.Topology.IsLocalHomeomorph

/-! # The inverse function theorem for manifolds

In this file, we prove the inverse function theorem for functions between differentiable manifolds.
This theorem holds in different versions, for instance for `C^r` maps (for `r‚â•1`).
We prove an abstract version first, and deduce the `C^r` case from this.

The conclusion of the abstract inverse function theorem is that `f` is a local structomorphism.
The hypotheses are stated as a condition on the pregroupoid of the given atlas.

## Main definitions
* An **IFTPregroupoid** is a pregroupoid which is monotone and stable under local inverses
(in a precise sense). These are the setting for the abstract inverse function theorem.

## Main results
* The groupoid induced by an `IFTPregroupoid` is closed under restriction.
* `HasStrictFDerivAt.isLocalStructomorphWithinAt_of_IFTPregroupoid`:
  the conceptual version of the inverse function theorem. XXX elaborate more!

## TODO
- show that `contDiffPregroupoid` and `analyticPregroupoid` are `IFTPregroupoid`s
- deduce the standard phrasing of the inverse function theorem

## Tags
inverse function theorem, manifold, groupoid
-/

open Function Manifold Set TopologicalSpace Topology

-- Let M and N be manifolds over (E,H) and (E',H), respectively (on the same model space!).
-- We don't assume smoothness, but allow any structure groupoid.
variable {E E' H H' M N : Type*} {ùïÇ : Type*} [NontriviallyNormedField ùïÇ]
  [NormedAddCommGroup E] [NormedSpace ùïÇ E] [NormedAddCommGroup E'] [NormedSpace ùïÇ E']
  [TopologicalSpace H] [TopologicalSpace M] [ChartedSpace H M]
  [TopologicalSpace N] [ChartedSpace H N]
  (I : ModelWithCorners ùïÇ E H) (J : ModelWithCorners ùïÇ E' H)

/-! Re-phrasing the implicit function theorem over normed spaces in categorical language,
  using (pre-)groupoids and local structomorphisms.
  This unifies e.g. the smooth and analytic categories. -/
section IFTBasic

variable {n : WithTop ‚Ñï‚àû} {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïÇ E]

variable (ùïÇ) in
/-- A pregroupoid which satisfies the necessary conditions for the inverse function theorem.
Over the real or complex numbers, this includes the `C^n` and analytic pre-groupoids.
There's a design choice when defining this: one can either
  - assume that `P` contains only continuously differentiable functions on `s`
  (excluding e.g. the category PDiff of piece-wise differentiable functions), or
  - assume in the IFT hypothesis that `f` is cont. differentiable on some open set `s ‚àã x`.
  With this definition, even the trivial and the continuous pregroupoid (over ‚Ñù or ‚ÑÇ) is an
  IFT groupoid, as the inverse `g` needs to satisfy fewer conditions.

We have chosen the latter, for slightly greater generality.In practice, one would only apply the
inverse function theorem in contexts where the differentiability follows anyway. -/
structure IFTPregroupoid (E : Type*) [NormedAddCommGroup E] [NormedSpace ùïÇ E] extends Pregroupoid E
where
  /-- Our property is **monotone** on open sets: if `s` is open and `s ‚äÜ t`, then
    `f ‚àà P` on `t` implies `f ‚àà P` on `s`. -/
  -- xxx: does this follow from the locality property of pregroupoids? think!
  monotonicity : ‚àÄ {f s t}, IsOpen s ‚Üí s ‚äÜ t ‚Üí property f t ‚Üí property f s
  /-- If `f ‚àà P` on `s` and `f` is strictly differentiable at `x` with invertible differential,
    a local inverse `g` of `f` at `f x` also lies in `P` on some open neighbourhood `t` of `f x`.
    It is sufficient to consider the case of `s` open.
    We assume the existence of `g`; this holds automatically over ‚Ñù or ‚ÑÇ. -/
  inverse : ‚àÄ {f g s t x}, ‚àÄ {f' : E ‚âÉL[ùïÇ] E}, IsOpen s ‚Üí x ‚àà s ‚Üí property f s ‚Üí
  -- We need t' to be open to deduce that `f` is a local structomorphism:
  -- that definition requires a partial homeomorphism in the (pre-)groupoid,
  -- which our setting only yields around x; that source is *open*.
    HasStrictFDerivAt (ùïú := ùïÇ) f f' x ‚Üí InvOn g f s t ‚Üí
    ‚àÉ t' ‚äÜ t, f x ‚àà t' ‚àß IsOpen t' ‚àß property g t'

/-- The groupoid associated to an IFT pre-groupoid. -/
def IFTPregroupoid.groupoid (P : IFTPregroupoid ùïÇ E) : StructureGroupoid E :=
  (P.toPregroupoid).groupoid

@[simp]
lemma IFTPregroupoid.groupoid_coe (P : IFTPregroupoid ùïÇ E) :
    P.groupoid = P.toPregroupoid.groupoid :=
  rfl

/-- If `P` is an `IFTPregroupoid`, its induced groupoid is `ClosedUnderRestriction`. -/
-- Note: this proof only uses monotonicity, hence could be generalised to
-- "a monotone pregroupoid induces a groupoid closed under restriction".
-- Is it worth refactoring existing proofs of `ClosedUnderRestriction` this way?
lemma IFTPregroupoid.isClosedUnderRestriction_groupoid (P : IFTPregroupoid ùïÇ E) :
    ClosedUnderRestriction (P.groupoid) := by
  refine { closedUnderRestriction := ?_ }
  intro e he s hs
  obtain ‚ü®l, r ‚ü© := mem_groupoid_of_pregroupoid.mp he
  apply mem_groupoid_of_pregroupoid.mpr
  constructor
  ¬∑ rw [e.restr_source' s hs]
    exact P.monotonicity (e.open_source.inter hs) inter_subset_left l
  ¬∑ show P.property (e.restr s).symm (e.restr s).symm.source
    rw [(e.restr s).symm_source]
    exact P.monotonicity (e.restr s).open_target (by simp) r

/-- Categorical statement of the Inverse Function Theorem on a Banach space.
  Suppose `f` has invertible differential at `x` and lies in an IFTPregroupoid `P` on `s ‚àã x`.
  Then `f` is a local structomorphism at `x` (within some open set `s' ‚àã x`).
  For `P=contDiffPregroupoid n`, this recovers the standard statement. -/
lemma HasStrictFDerivAt.isLocalStructomorphWithinAt_of_IFTPregroupoid [CompleteSpace E] {f : E ‚Üí E}
    {s : Set E} {x : E} {f' : E ‚âÉL[ùïÇ] E} (hf' : HasStrictFDerivAt (ùïú := ùïÇ) f f' x)
    (hf : ContDiffOn ùïÇ n f s) (hs : IsOpen s) (hx : x ‚àà s) (hn : 1 ‚â§ n)
    {P : IFTPregroupoid ùïÇ E} (hfP : P.property f s) :
    ‚àÉ s', x ‚àà s' ‚àß IsOpen s' ‚àß P.groupoid.IsLocalStructomorphWithinAt f s' x := by
  set G := P.groupoid
  -- Apply the local lemma to find a local inverse `g` of `f` at `f x`.
  let f_loc := hf'.toPartialHomeomorph
  have hx' : x ‚àà f_loc.source := hf'.mem_toPartialHomeomorph_source

  -- Since `f` is `P` on `s`, we get a local inverse `f_loc` on `f_loc.source`.
  -- Our IFT groupoid property applies on the intersection, hence we need monotonity of `P`.
  let s' := f_loc.source ‚à© s
  have hs' : IsOpen s' := f_loc.open_source.inter hs
  have hfP' : P.property f s' := P.monotonicity hs' inter_subset_right hfP
  -- Since `P` is an IFTPregroupoid, `P.property g t'` for some open set
  -- `t' ‚äÜ t := f_loc.target` containing `x`.
  have hinv' : InvOn f_loc.symm f_loc s' (f_loc '' s') :=
    f_loc.invOn.mono inter_subset_left (image_subset _ inter_subset_left)
  let p := P.inverse hs' (mem_inter hx' hx) hfP' hf' hinv'

  rcases p with ‚ü®t', htt', hxt', ht', hP‚ü©
  let s'' := s' ‚à© f ‚Åª¬π' t'
  have hs'' : IsOpen s'' :=
    (hf.continuousOn.mono inter_subset_right).isOpen_inter_preimage hs' ht'
  have hG : P.groupoid.IsLocalStructomorphWithinAt f s'' x := by
    intro hx
    refine ‚ü®f_loc.restrOpen s'' hs'', ?_, eqOn_refl f _, ?_‚ü©
    ¬∑ apply mem_groupoid_of_pregroupoid.mpr
      have aux : f_loc.source ‚à© s' = s' := by simp [f_loc, s']
      rw [f_loc.restrOpen_source]--, aux]
      constructor
      ¬∑ apply P.monotonicity (t := s') (f_loc.open_source.inter hs'') ?_ hfP'
        rw [‚Üê aux]
        exact inter_subset_inter_right _ inter_subset_left
      ¬∑ have : (f_loc.restrOpen s' hs').target = f_loc '' s' := by
          rw [f_loc.restrOpen_target s' hs', aux]
        -- TODO: complete proof, using things with t and t'!
        show P.property (f_loc.restrOpen s'' hs'').symm (f_loc.restrOpen s'' hs'').target
        have : P.property f_loc.symm t' := hP
        -- WAIT: do I really need s'' here? re-think the whole proof...
        -- wait: this is false; `htt'` says t' ‚äÜ f_loc '' s', but not s''.
        have : t' ‚äÜ f_loc '' s'' := by
          have : f_loc '' s'' = f_loc '' s' ‚à© t' := by
            --apply image_inter and image of preimage = set
            sorry
          rw [this]
          sorry
        have : t' ‚äÜ f_loc '' s' := htt' --, hence t' ‚äÜ f_loc '' s'' follows
        rw [f_loc.restrOpen_target]
        -- final step: argue with the congr property; restrOpen equals f_loc on s'',
        -- which is an open set (by `hs''`)
        sorry
    ¬∑ rw [f_loc.restrOpen_source]
      exact mem_inter hx' hx
  exact ‚ü®s'', by apply mem_inter (mem_inter hx' hx); exact hxt', hs'', hG‚ü©
  -- -- Thus, f and g define a local homeomorphism.
  -- have : P.groupoid.IsLocalStructomorphWithinAt f s' x := by
  --   intro hx
  --   refine ‚ü®f_loc.restrOpen s' hs', ?_, eqOn_refl f _, ?_‚ü©
  --   ¬∑ apply mem_groupoid_of_pregroupoid.mpr
  --     rw [f_loc.restrOpen_source, aux]
  --     sorry -- TODO: fix proof!
  --     --exact ‚ü®hfP', this ‚ñ∏ p‚ü©

--#exit

/-- The pregroupoid of `C^n` functions on `E`. -/
def contDiffPregroupoidBasic : Pregroupoid E := {
  property := fun f s ‚Ü¶ ContDiffOn ùïÇ n f s
  comp := fun {f g} {u v} hf hg _ _ _ ‚Ü¶ hg.comp_inter hf
  id_mem := contDiffOn_id
  locality := fun _ h ‚Ü¶ contDiffOn_of_locally_contDiffOn h
  congr := by intro f g u _ congr hf; exact (contDiffOn_congr congr).mpr hf
}

-- TODO: prove that contDiffPregroupoid is an IFT groupoid

-- xxx: generalise this argument to ‚ÑÇ also
variable [NormedSpace ‚Ñù E] [NormedSpace ‚Ñù E']
  (I : ModelWithCorners ‚Ñù E H) (J : ModelWithCorners ‚Ñù E' H)

-- This is the key lemma I need to showing that C^n maps define an `IFTPregroupoid`.
-- we need to work over ‚Ñù or ‚ÑÇ, otherwise `toLocalInverse` doesn't apply
lemma contDiffPregroupoindIsIFT_aux [CompleteSpace E] {f g : E ‚Üí E} {s t : Set E} {x : E}
    {f' : E ‚âÉL[‚Ñù] E} (hf : ContDiffAt ‚Ñù n f x) (hf' : HasFDerivAt (ùïú := ‚Ñù) f f' x)
    (hinv : InvOn g f s t) (hm : MapsTo g t s) (hn : 1 ‚â§ n) : ContDiffAt ‚Ñù n g (f x) := by
  let h := hf.toPartialHomeomorph f hf' hn
  have h2 : ContDiffAt ‚Ñù n h.symm (f x) := hf.to_localInverse (f' := f') hf' hn
  have hinv : h.symm (f x) = x := by
    show h.symm (h x) = x
    apply h.left_inv (hf.mem_toPartialHomeomorph_source hf' hn)
  let r := h.contDiffAt_symm (hf.image_mem_toPartialHomeomorph_target hf' hn)
    (hinv.symm ‚ñ∏ hf') (hinv.symm ‚ñ∏ hf)
  -- shrinking s and t (and restricting h), we may assume s = h.source and t = h.target
  -- then both of these are immediate,
  -- as well as x ‚àà s and f x ‚àà t
  have h1' : InvOn h.symm h s t := sorry -- is then h.invOn
  have h2' : InvOn g f s t := sorry -- rewrite h=f in hinv
  -- TODO: shrinking t suitably, can assume it is a neighbourhood of f x
  have hfx : f x ‚àà t := sorry
  have ht : IsOpen t := sorry
  have aux : EqOn h.symm g t := eqOn_of_leftInvOn_of_rightInvOn h1'.1 h2'.2 hm
  apply h2.congr_of_eventuallyEq
  exact Filter.eventuallyEq_of_mem (ht.mem_nhds hfx) aux.symm

section

variable {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] {e : PartialHomeomorph X Y}
  {s U : Set X}

-- Doesn't mathlib have this already?
lemma IsOpen.induction {s : Set X} (hs : ‚àÄ x ‚àà s, ‚àÉ t, IsOpen t ‚àß x ‚àà t ‚àß t ‚äÜ s) : IsOpen s := by
  let t : s ‚Üí Set X := fun ‚ü®x, hx‚ü© ‚Ü¶ Classical.choose (hs x hx)
  have ht (x) (hx : x ‚àà s) : IsOpen (t ‚ü®x, hx‚ü©) := Classical.choose_spec (hs x hx) |>.1
  have hxt (x) (hx : x ‚àà s) : x ‚àà (t ‚ü®x, hx‚ü©) := Classical.choose_spec (hs x hx) |>.2.1
  have hts (x) (hx : x ‚àà s) : (t ‚ü®x, hx‚ü©) ‚äÜ s := Classical.choose_spec (hs x hx) |>.2.2
  let s' := ‚ãÉ x : s, t x
  -- s is the union of all t x
  have : s = s' := by
    ext x
    refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
    ¬∑ exact subset_iUnion t ‚ü®x, h‚ü© (hxt x (hts x h (hxt x (hts x h (hxt x h)))))
    ¬∑ rw [mem_iUnion] at h
      choose i hi' using h
      obtain ‚ü®i, hi‚ü© := i
      exact (hts _ hi) hi'
  rw [this]
  exact isOpen_iUnion fun ‚ü®i, hi‚ü© ‚Ü¶ ht _ hi

lemma IsLocalHomeomorphOn.missing (he : IsLocalHomeomorphOn e U)
    (hs : s ‚äÜ U) (hs' : IsOpen s) : IsOpen (e '' s) := by
  rw [isLocalHomeomorphOn_iff_isOpenEmbedding_restrict] at he
  apply IsOpen.induction
  intro y hy
  obtain ‚ü®x, hxy, hf‚ü© := hy
  choose t ht he using he x (hs hxy)
  rw [mem_nhds_iff] at ht
  choose t' htt' ht' hxt' using ht
  refine ‚ü®e '' (s ‚à© t'), ?_, ?_, ?_‚ü©
  ¬∑ have := he.isOpenMap
    -- TODO: take s ‚à© t', and consider as a subset of t (which this is one of)
    -- then apply this, and done
    sorry
  ¬∑ exact hf ‚ñ∏ mem_image_of_mem e (mem_inter hxy hxt')
  ¬∑ gcongr
    exact inter_subset_left

end

/-- If `E` is complete and `n ‚â• 1`, the pregroupoid of `C^n` functions
  is an IFT pregroupoid.
  The proof relies on the mean value theorem, which is why ‚Ñù or ‚ÑÇ is required. -/
def contDiffBasicIsIFTPregroupoid [CompleteSpace E] (hn : 1 ‚â§ n) : IFTPregroupoid ‚Ñù E where
  toPregroupoid := contDiffPregroupoidBasic (n := n)
  monotonicity := fun {f} _ _ _ hst hf ‚Ü¶ hf.mono hst
  inverse := by
    intro f g s t x f' hs hx hf hf' hinv
    -- Since f is continuously differentiable on s, there's a neighbourhood `U` of `x` s.t.
    -- `df_x'` is an isomorphism for all `x' ‚àà U`.
    rcases mem_nhds_iff.mp f'.nhds with ‚ü®t', ht', ht'open, hft‚ü©
    let U := s ‚à© (fun x ‚Ü¶ fderiv ‚Ñù f x) ‚Åª¬π' t'
    have hU : IsOpen U := (hf.continuousOn_fderiv_of_isOpen hs hn).isOpen_inter_preimage hs ht'open
    have hxU : x ‚àà U := by
      refine ‚ü®hx, ?_‚ü©
      show fderiv ‚Ñù f x ‚àà t'
      exact mem_of_eq_of_mem hf'.hasFDerivAt.fderiv hft

    let fhom := ContDiffAt.toPartialHomeomorph f (hf.contDiffAt (hs.mem_nhds hx)) hf'.hasFDerivAt hn
    have : f = fhom := by rw [ContDiffAt.toPartialHomeomorph_coe]
    have h3 : IsLocalHomeomorphOn f fhom.source :=
      IsLocalHomeomorphOn.mk f fhom.source (fun x hx ‚Ü¶ ‚ü®fhom, hx, fun y hy ‚Ü¶ by rw [this]‚ü©)
    -- XXX: this can surely be streamlined a bit
    have h3' : IsLocalHomeomorphOn fhom fhom.source := by convert h3
    have scifi : IsOpen (fhom '' U) := by
      apply h3'.missing ?_ hU
      -- U ‚äÜ fhom.source... is this true?
      simp only [U, fhom]

      sorry -- U ‚äÜ fhom.source
    -- shrinking s and t, we may assume s = fhom.source, t = fhom.target
    -- use filters to formalise this?
    have shrink1 : s = fhom.source := sorry
    have shrink2 : t = fhom.target := sorry

    have : MapsTo f s t := by
      rw [shrink1, shrink2]
      exact fhom.mapsTo
    have hm : MapsTo g t s := by
      rw [shrink1, shrink2]
      have : EqOn fhom.symm g fhom.target := sorry -- proven in aux lemma above
      rw [‚Üê this.mapsTo_iff (t := fhom.source)]
      exact fhom.symm_mapsTo
    have hu‚ÇÅ : f '' U ‚äÜ t :=
      Subset.trans (image_subset _ inter_subset_left) (mapsTo'.mp this)
    refine ‚ü®f '' U , hu‚ÇÅ, mem_image_of_mem f hxU, scifi, ?_‚ü©
    suffices ‚àÄ y : f '' U, ContDiffAt ‚Ñù n g y from fun y hy ‚Ü¶ (this ‚ü®y, hy‚ü©).contDiffWithinAt
    -- Show g is continuously differentiable at each y ‚àà f(U).
    intro ‚ü®y, x', hx'U, hx'y‚ü©
    have : x' ‚àà (fun x ‚Ü¶ fderiv ‚Ñù f x) ‚Åª¬π' t' := mem_of_mem_inter_right hx'U
    -- Last step: upgrade `fderiv ‚Ñù f x'` to an isomorphism, using `x' ‚àà U`.
    rcases ht' this with ‚ü®f'', hf''eq‚ü©
    have hs : s ‚àà ùìù x' := hs.mem_nhds (mem_of_mem_inter_left hx'U)
    have : HasFDerivAt f f''.toContinuousLinearMap x' := by
      rw [hf''eq]
      exact ((hf.contDiffAt hs).differentiableAt hn).hasFDerivAt
    exact hx'y ‚ñ∏ (contDiffPregroupoindIsIFT_aux (hf.contDiffAt hs) this hinv hm hn)

end IFTBasic

-- FUTURE: show that the analytic pregroupoid is also IFT

/-! General version of the IFT on manifolds. -/
section IFTFull
-- define IFTPregroupoids on H, via (E, I)
-- define contDiffPregroupoid: copy-paste from standard def (later: deduplicate)

-- theorem: contDiffPregroupoid is an IFT pregroupoid
-- local inverse of IFT (mostly already done)

-- categorical IFT: using LiftProp and G.IsLocalStructomorphWithinAt

-- finally: (try to) prove that LiftProp (G.isLocalStructomorphWithinAt) iff f and f.symm ‚àà P
-- this would generalise isLocalStructomorphOn_contDiffGroupoid_iff

end IFTFull
