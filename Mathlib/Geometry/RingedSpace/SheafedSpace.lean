/-
Copyright (c) 2019 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison
-/
import Mathlib.Geometry.RingedSpace.PresheafedSpace.HasColimits
import Mathlib.Geometry.RingedSpace.Stalks
import Mathlib.Topology.Sheaves.Functors

/-!
# Sheafed spaces

Introduces the category of topological spaces equipped with a sheaf (taking values in an
arbitrary target category `C`.)

We further describe how to apply functors and natural transformations to the values of the
presheaves.
-/

open CategoryTheory TopCat TopologicalSpace Opposite CategoryTheory.Limits CategoryTheory.Category
  CategoryTheory.Functor Topology

universe u v w' w

variable (C : Type u) [Category.{v} C]


-- Porting note: removed
-- local attribute [tidy] tactic.op_induction'
-- as it isn't needed here. If it is useful elsewhere
-- attribute [local aesop safe cases (rule_sets := [CategoryTheory])] Opposite
-- should suffice, but may need
-- https://github.com/JLimperg/aesop/issues/59

namespace AlgebraicGeometry

/-- A `SheafedSpace C` is a topological space equipped with a sheaf of `C`s. -/
structure SheafedSpace extends PresheafedSpace C where
  /-- A sheafed space is presheafed space which happens to be sheaf. -/
  IsSheaf : presheaf.IsSheaf

variable {C}

namespace SheafedSpace

-- Porting note: use `CoeOut` for the coercion happens left to right
instance coeCarrier : CoeOut (SheafedSpace C) TopCat where coe X := X.carrier

instance coeSort : CoeSort (SheafedSpace C) Type* where
  coe X := X.1

/-- Extract the `sheaf C (X : Top)` from a `SheafedSpace C`. -/
def sheaf (X : SheafedSpace C) : Sheaf C (X : TopCat) :=
  ‚ü®X.presheaf, X.IsSheaf‚ü©

-- Porting note: this is a syntactic tautology, so removed
-- @[simp]
-- theorem as_coe (X : SheafedSpace C) : X.carrier = (X : TopCat) :=
--   rfl

-- Porting note: this gives a `simpVarHead` error (`LEFT-HAND SIDE HAS VARIABLE AS HEAD SYMBOL.`).
-- so removed @[simp]
theorem mk_coe (carrier) (presheaf) (h) :
    (({ carrier
        presheaf
        IsSheaf := h } : SheafedSpace C) : TopCat) = carrier :=
  rfl

instance (X : SheafedSpace C) : TopologicalSpace X :=
  X.carrier.str

/-- The trivial `unit` valued sheaf on any topological space. -/
def unit (X : TopCat) : SheafedSpace (Discrete Unit) :=
  { @PresheafedSpace.const (Discrete Unit) _ X ‚ü®‚ü®‚ü©‚ü© with IsSheaf := Presheaf.isSheaf_unit _ }

instance : Inhabited (SheafedSpace (Discrete Unit)) :=
  ‚ü®unit (TopCat.of PEmpty)‚ü©

instance : Category (SheafedSpace C) :=
  show Category (InducedCategory (PresheafedSpace C) SheafedSpace.toPresheafedSpace) by
    infer_instance

@[ext (iff := false)]
theorem ext {X Y : SheafedSpace C} (Œ± Œ≤ : X ‚ü∂ Y) (w : Œ±.hom.base = Œ≤.hom.base)
    (h : Œ±.hom.c ‚â´ whiskerRight (eqToHom (by rw [w])) _ = Œ≤.hom.c) : Œ± = Œ≤ :=
  InducedCategory.hom_ext (PresheafedSpace.ext _ _ w h)

/-- Constructor for isomorphisms in the category `SheafedSpace C`. -/
@[simps]
def isoMk {X Y : SheafedSpace C} (e : X.toPresheafedSpace ‚âÖ Y.toPresheafedSpace) : X ‚âÖ Y where
  hom := InducedCategory.homMk e.hom
  inv := InducedCategory.homMk e.inv
  hom_inv_id := InducedCategory.hom_ext e.hom_inv_id
  inv_hom_id := InducedCategory.hom_ext e.inv_hom_id

/-- Forgetting the sheaf condition is a functor from `SheafedSpace C` to `PresheafedSpace C`. -/
@[simps! obj map]
def forgetToPresheafedSpace : SheafedSpace C ‚•§ PresheafedSpace C :=
  inducedFunctor _
-- The `Full, Faithful` instances should be constructed by a deriving handler.
-- https://github.com/leanprover-community/mathlib4/issues/380

/-- The functor `forgetToPresheafedSpace : SheafedSpace C ‚•§ PresheafedSpace C`
is fully faithful. -/
def fullyFaithfulForgetToPresheafedSpace :
    (forgetToPresheafedSpace (C := C)).FullyFaithful where
  preimage f := InducedCategory.homMk f

@[simp]
lemma fullyFaithfulForgetToPresheafedSpace_preimage_hom {X Y : SheafedSpace C}
    (f : forgetToPresheafedSpace.obj X ‚ü∂ forgetToPresheafedSpace.obj Y) :
    (fullyFaithfulForgetToPresheafedSpace.preimage f).hom = f := rfl

instance forgetToPresheafedSpace_full : (forgetToPresheafedSpace (C := C)).Full :=
  fullyFaithfulForgetToPresheafedSpace.full

instance forgetToPresheafedSpace_faithful : (forgetToPresheafedSpace (C := C)).Faithful :=
  fullyFaithfulForgetToPresheafedSpace.faithful

instance is_presheafedSpace_iso {X Y : SheafedSpace C} (f : X ‚ü∂ Y) [IsIso f] :
    IsIso f.hom :=
  SheafedSpace.forgetToPresheafedSpace.map_isIso f

section

attribute [local simp] id comp

@[simp]
theorem id_hom (X : SheafedSpace C) : (ùüô X : X ‚ü∂ X).hom = ùüô X.toPresheafedSpace :=
  rfl

@[simp]
theorem id_hom_base (X : SheafedSpace C) : (ùüô X : X ‚ü∂ X).hom.base = ùüô (X : TopCat) :=
  rfl

theorem id_hom_c (X : SheafedSpace C) :
    (ùüô X : X ‚ü∂ X).hom.c = eqToHom (Presheaf.Pushforward.id_eq X.presheaf).symm :=
  rfl

@[simp]
theorem id_hom_c_app (X : SheafedSpace C) (U) :
    (ùüô X : X ‚ü∂ X).hom.c.app U = ùüô _ := rfl

@[simp]
theorem comp_hom_base {X Y Z : SheafedSpace C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).hom.base = f.hom.base ‚â´ g.hom.base :=
  rfl

@[simp]
theorem comp_hom_c_app {X Y Z : SheafedSpace C} (Œ± : X ‚ü∂ Y) (Œ≤ : Y ‚ü∂ Z) (U) :
    (Œ± ‚â´ Œ≤).hom.c.app U =
      Œ≤.hom.c.app U ‚â´ Œ±.hom.c.app (op ((Opens.map Œ≤.hom.base).obj (unop U))) :=
  rfl

theorem comp_hom_c_app' {X Y Z : SheafedSpace C} (Œ± : X ‚ü∂ Y) (Œ≤ : Y ‚ü∂ Z) (U) :
    (Œ± ‚â´ Œ≤).hom.c.app (op U) =
      Œ≤.hom.c.app (op U) ‚â´ Œ±.hom.c.app (op ((Opens.map Œ≤.hom.base).obj U)) :=
  rfl

theorem congr_hom_app {X Y : SheafedSpace C} {Œ± Œ≤ : X ‚ü∂ Y} (h : Œ± = Œ≤) (U) :
    Œ±.hom.c.app U = Œ≤.hom.c.app U ‚â´ X.presheaf.map (eqToHom (by subst h; rfl)) :=
  (PresheafedSpace.congr_app (by rw [h]) U)

@[deprecated (since := "2025-07-04")] alias id_base := id_hom_base
@[deprecated (since := "2025-07-04")] alias id_c := id_hom_c
@[deprecated (since := "2025-07-04")] alias id_c_app := id_hom_c_app
@[deprecated (since := "2025-07-04")] alias comp_base := comp_hom_base
@[deprecated (since := "2025-07-04")] alias comp_c_app := comp_hom_c_app
@[deprecated (since := "2025-07-04")] alias comp_c_app' := comp_hom_c_app'
@[deprecated (since := "2025-07-04")] alias congr_app := congr_hom_app

variable (C)

/-- The forgetful functor from `SheafedSpace` to `Top`. -/
def forget : SheafedSpace C ‚•§ TopCat where
  obj X := (X : TopCat)
  map {_ _} f := f.hom.base

end

open TopCat.Presheaf

/-- The restriction of a sheafed space along an open embedding into the space.
-/
def restrict {U : TopCat} (X : SheafedSpace C) {f : U ‚ü∂ (X : TopCat)} (h : IsOpenEmbedding f) :
    SheafedSpace C :=
  { X.toPresheafedSpace.restrict h with IsSheaf := isSheaf_of_isOpenEmbedding h X.IsSheaf }

/-- The map from the restriction of a presheafed space.
-/
@[simps!]
def ofRestrict {U : TopCat} (X : SheafedSpace C) {f : U ‚ü∂ (X : TopCat)}
    (h : IsOpenEmbedding f) : X.restrict h ‚ü∂ X :=
  InducedCategory.homMk (X.toPresheafedSpace.ofRestrict h)

/-- The restriction of a sheafed space `X` to the top subspace is isomorphic to `X` itself.
-/
@[simps! hom inv]
def restrictTopIso (X : SheafedSpace C) : X.restrict (Opens.isOpenEmbedding ‚ä§) ‚âÖ X :=
  isoMk (X.toPresheafedSpace.restrictTopIso)

/-- The global sections, notated Gamma.
-/
def Œì : (SheafedSpace C)·µí·µñ ‚•§ C :=
  forgetToPresheafedSpace.op ‚ãô PresheafedSpace.Œì

theorem Œì_def : (Œì : _ ‚•§ C) = forgetToPresheafedSpace.op ‚ãô PresheafedSpace.Œì :=
  rfl

@[simp]
theorem Œì_obj (X : (SheafedSpace C)·µí·µñ) : Œì.obj X = (unop X).presheaf.obj (op ‚ä§) :=
  rfl

theorem Œì_obj_op (X : SheafedSpace C) : Œì.obj (op X) = X.presheaf.obj (op ‚ä§) :=
  rfl

@[simp]
theorem Œì_map {X Y : (SheafedSpace C)·µí·µñ} (f : X ‚ü∂ Y) : Œì.map f = f.unop.hom.c.app (op ‚ä§) :=
  rfl

theorem Œì_map_op {X Y : SheafedSpace C} (f : X ‚ü∂ Y) : Œì.map f.op = f.hom.c.app (op ‚ä§) :=
  rfl

noncomputable instance (J : Type w) [Category.{w'} J] [Small.{v} J] [HasLimitsOfShape J·µí·µñ C] :
    CreatesColimitsOfShape J (forgetToPresheafedSpace : SheafedSpace.{_, _, v} C ‚•§ _) :=
  ‚ü®fun {K} =>
    createsColimitOfFullyFaithfulOfIso
      ‚ü®(PresheafedSpace.colimitCocone (K ‚ãô forgetToPresheafedSpace)).pt,
        limit_isSheaf _ fun j ‚Ü¶ Sheaf.pushforward_sheaf_of_sheaf _ (K.obj (unop j)).2‚ü©
      (colimit.isoColimitCocone ‚ü®_, PresheafedSpace.colimitCoconeIsColimit _‚ü©).symm‚ü©

noncomputable instance [HasLimits C] :
    CreatesColimits (forgetToPresheafedSpace : SheafedSpace C ‚•§ _) where

instance (J : Type w) [Category.{w'} J] [Small.{v} J] [HasLimitsOfShape J·µí·µñ C] :
    HasColimitsOfShape J (SheafedSpace.{_, _, v} C) :=
  hasColimitsOfShape_of_hasColimitsOfShape_createsColimitsOfShape forgetToPresheafedSpace

instance [HasLimits C] : HasColimits.{v} (SheafedSpace C) where

instance (J : Type w) [Category.{w'} J] [Small.{v} J] [HasLimitsOfShape J·µí·µñ C] :
    PreservesColimitsOfShape J (forget.{_, _, v} C) :=
  Limits.comp_preservesColimitsOfShape forgetToPresheafedSpace (PresheafedSpace.forget C)

noncomputable instance [HasLimits C] : PreservesColimits (forget.{_, _, v} C) where

section ConcreteCategory

variable {FC : C ‚Üí C ‚Üí Type*} {CC : C ‚Üí Type v} [‚àÄ X Y, FunLike (FC X Y) (CC X) (CC Y)]
variable [instCC : ConcreteCategory.{v} C FC] [HasColimits C] [HasLimits C]
variable [PreservesLimits (CategoryTheory.forget C)]
variable [PreservesFilteredColimits (CategoryTheory.forget C)]
variable [(CategoryTheory.forget C).ReflectsIsomorphisms]

attribute [local ext] DFunLike.ext in
include instCC in
lemma hom_stalk_ext {X Y : SheafedSpace C} (f g : X ‚ü∂ Y) (h : f.hom.base = g.hom.base)
    (h' : ‚àÄ x, f.hom.stalkMap x = (Y.presheaf.stalkCongr (h ‚ñ∏ rfl)).hom ‚â´ g.hom.stalkMap x) :
    f = g := by
  obtain ‚ü®f, fc‚ü© := f
  obtain ‚ü®g, gc‚ü© := g
  obtain rfl : f = g := h
  congr
  ext U s
  refine section_ext X.sheaf _ _ _ fun x hx ‚Ü¶
    show X.presheaf.germ _ x _ _ = X.presheaf.germ _ x _ _ from ?_
  erw [‚Üê PresheafedSpace.stalkMap_germ_apply ‚ü®f, fc‚ü©, ‚Üê PresheafedSpace.stalkMap_germ_apply ‚ü®f, gc‚ü©]
  simp [h']

attribute [local ext] DFunLike.ext in
include instCC in
lemma mono_of_base_injective_of_stalk_epi {X Y : SheafedSpace C} (f : X ‚ü∂ Y)
    (h‚ÇÅ : Function.Injective f.hom.base)
    (h‚ÇÇ : ‚àÄ x, Epi (f.hom.stalkMap x)) : Mono f := by
  constructor
  intro Z ‚ü®g, gc‚ü© ‚ü®h, hc‚ü© e
  obtain rfl : g = h := ConcreteCategory.hom_ext _ _ fun x ‚Ü¶ h‚ÇÅ congr(($e).hom.base x)
  refine SheafedSpace.hom_stalk_ext ‚ü®g, gc‚ü© ‚ü®g, hc‚ü© rfl fun x ‚Ü¶ ?_
  rw [‚Üê cancel_epi (f.hom.stalkMap (g x)), stalkCongr_hom, stalkSpecializes_refl, Category.id_comp,
    ‚Üê PresheafedSpace.stalkMap.comp ‚ü®g, gc‚ü© f.hom, ‚Üê PresheafedSpace.stalkMap.comp ‚ü®g, hc‚ü© f.hom]
  replace e := congr_arg InducedCategory.Hom.hom e
  congr 1

end ConcreteCategory

end SheafedSpace

end AlgebraicGeometry
