/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.Geometry.RingedSpace.PresheafedSpace
import Mathlib.CategoryTheory.Limits.Final
import Mathlib.Topology.Sheaves.Stalks

#align_import algebraic_geometry.stalks from "leanprover-community/mathlib"@"d39590fc8728fbf6743249802486f8c91ffe07bc"

/-!
# Stalks for presheaved spaces

This file lifts constructions of stalks and pushforwards of stalks to work with
the category of presheafed spaces. Additionally, we prove that restriction of
presheafed spaces does not change the stalks.
-/


noncomputable section

universe v u v' u'

open Opposite CategoryTheory CategoryTheory.Category CategoryTheory.Functor CategoryTheory.Limits
  AlgebraicGeometry TopologicalSpace

variable {C : Type u} [Category.{v} C] [HasColimits C]

-- Porting note : no tidy tactic
-- attribute [local tidy] tactic.auto_cases_opens
-- this could be replaced by
-- attribute [local aesop safe cases (rule_sets [CategoryTheory])] Opens
-- but it doesn't appear to be needed here.

open TopCat.Presheaf

namespace AlgebraicGeometry.PresheafedSpace

/-- The stalk at `x` of a `PresheafedSpace`.
-/
abbrev stalk (X : PresheafedSpace C) (x : X) : C :=
  X.presheaf.stalk x
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.stalk AlgebraicGeometry.PresheafedSpace.stalk

/-- A morphism of presheafed spaces induces a morphism of stalks.
-/
def stalkMap {X Y : PresheafedSpace.{_, _, v} C} (Œ± : X ‚ü∂ Y) (x : X) :
    Y.stalk (Œ±.base x) ‚ü∂ X.stalk x :=
  (stalkFunctor C (Œ±.base x)).map Œ±.c ‚â´ X.presheaf.stalkPushforward C Œ±.base x
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.stalk_map AlgebraicGeometry.PresheafedSpace.stalkMap

@[elementwise, reassoc]
theorem stalkMap_germ {X Y : PresheafedSpace.{_, _, v} C} (Œ± : X ‚ü∂ Y) (U : Opens Y)
    (x : (Opens.map Œ±.base).obj U) :
    Y.presheaf.germ ‚ü®Œ±.base x.1, x.2‚ü© ‚â´ stalkMap Œ± ‚Üëx = Œ±.c.app (op U) ‚â´ X.presheaf.germ x := by
  rw [stalkMap, stalkFunctor_map_germ_assoc, stalkPushforward_germ]
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.stalk_map_germ AlgebraicGeometry.PresheafedSpace.stalkMap_germ

@[simp, elementwise, reassoc]
theorem stalkMap_germ' {X Y : PresheafedSpace.{_, _, v} C}
    (Œ± : X ‚ü∂ Y) (U : Opens Y) (x : X) (hx : Œ±.base x ‚àà U) :
    Y.presheaf.germ ‚ü®Œ±.base x, hx‚ü© ‚â´ stalkMap Œ± x = Œ±.c.app (op U) ‚â´
      X.presheaf.germ (U := (Opens.map Œ±.base).obj U) ‚ü®x, hx‚ü© :=
  PresheafedSpace.stalkMap_germ Œ± U ‚ü®x, hx‚ü©

section Restrict

/-- For an open embedding `f : U ‚ü∂ X` and a point `x : U`, we get an isomorphism between the stalk
of `X` at `f x` and the stalk of the restriction of `X` along `f` at t `x`.
-/
def restrictStalkIso {U : TopCat} (X : PresheafedSpace.{_, _, v} C) {f : U ‚ü∂ (X : TopCat.{v})}
    (h : OpenEmbedding f) (x : U) : (X.restrict h).stalk x ‚âÖ X.stalk (f x) :=
  haveI := initial_of_adjunction (h.isOpenMap.adjunctionNhds x)
  Final.colimitIso (h.isOpenMap.functorNhds x).op ((OpenNhds.inclusion (f x)).op ‚ãô X.presheaf)
  -- As a left adjoint, the functor `h.is_open_map.functor_nhds x` is initial.
  -- Typeclass resolution knows that the opposite of an initial functor is final. The result
  -- follows from the general fact that postcomposing with a final functor doesn't change colimits.
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.restrict_stalk_iso AlgebraicGeometry.PresheafedSpace.restrictStalkIso

-- Porting note : removed `simp` attribute, for left hand side is not in simple normal form.
@[elementwise, reassoc]
theorem restrictStalkIso_hom_eq_germ {U : TopCat} (X : PresheafedSpace.{_, _, v} C)
    {f : U ‚ü∂ (X : TopCat.{v})} (h : OpenEmbedding f) (V : Opens U) (x : U) (hx : x ‚àà V) :
    (X.restrict h).presheaf.germ ‚ü®x, hx‚ü© ‚â´ (restrictStalkIso X h x).hom =
    X.presheaf.germ ‚ü®f x, show f x ‚àà h.isOpenMap.functor.obj V from ‚ü®x, hx, rfl‚ü©‚ü© :=
  colimit.Œπ_pre ((OpenNhds.inclusion (f x)).op ‚ãô X.presheaf) (h.isOpenMap.functorNhds x).op
    (op ‚ü®V, hx‚ü©)
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.restrict_stalk_iso_hom_eq_germ AlgebraicGeometry.PresheafedSpace.restrictStalkIso_hom_eq_germ

-- We intentionally leave `simp` off the lemmas generated by `elementwise` and `reassoc`,
-- as the simpNF linter claims they never apply.
@[simp, elementwise, reassoc]
theorem restrictStalkIso_inv_eq_germ {U : TopCat} (X : PresheafedSpace.{_, _, v} C)
    {f : U ‚ü∂ (X : TopCat.{v})} (h : OpenEmbedding f) (V : Opens U) (x : U) (hx : x ‚àà V) :
    X.presheaf.germ ‚ü®f x, show f x ‚àà h.isOpenMap.functor.obj V from ‚ü®x, hx, rfl‚ü©‚ü© ‚â´
        (restrictStalkIso X h x).inv =
      (X.restrict h).presheaf.germ ‚ü®x, hx‚ü© :=
  by rw [‚Üê restrictStalkIso_hom_eq_germ, Category.assoc, Iso.hom_inv_id, Category.comp_id]
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.restrict_stalk_iso_inv_eq_germ AlgebraicGeometry.PresheafedSpace.restrictStalkIso_inv_eq_germ

theorem restrictStalkIso_inv_eq_ofRestrict {U : TopCat} (X : PresheafedSpace.{_, _, v} C)
    {f : U ‚ü∂ (X : TopCat.{v})} (h : OpenEmbedding f) (x : U) :
    (X.restrictStalkIso h x).inv = stalkMap (X.ofRestrict h) x := by
  -- We can't use `ext` here due to https://github.com/leanprover/std4/pull/159
  refine colimit.hom_ext fun V => ?_
  induction V with | h V => ?_
  let i : (h.isOpenMap.functorNhds x).obj ((OpenNhds.map f x).obj V) ‚ü∂ V :=
    homOfLE (Set.image_preimage_subset f _)
  erw [Iso.comp_inv_eq, colimit.Œπ_map_assoc, colimit.Œπ_map_assoc, colimit.Œπ_pre]
  simp_rw [Category.assoc]
  erw [colimit.Œπ_pre ((OpenNhds.inclusion (f x)).op ‚ãô X.presheaf)
      (h.isOpenMap.functorNhds x).op]
  erw [‚Üê X.presheaf.map_comp_assoc]
  exact (colimit.w ((OpenNhds.inclusion (f x)).op ‚ãô X.presheaf) i.op).symm
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.restrict_stalk_iso_inv_eq_of_restrict AlgebraicGeometry.PresheafedSpace.restrictStalkIso_inv_eq_ofRestrict

instance ofRestrict_stalkMap_isIso {U : TopCat} (X : PresheafedSpace.{_, _, v} C)
    {f : U ‚ü∂ (X : TopCat.{v})} (h : OpenEmbedding f) (x : U) :
    IsIso (stalkMap (X.ofRestrict h) x) := by
  rw [‚Üê restrictStalkIso_inv_eq_ofRestrict]; infer_instance
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.of_restrict_stalk_map_is_iso AlgebraicGeometry.PresheafedSpace.ofRestrict_stalkMap_isIso

end Restrict

namespace stalkMap

@[simp]
theorem id (X : PresheafedSpace.{_, _, v} C) (x : X) :
    stalkMap (ùüô X) x = ùüô (X.stalk x) := by
  dsimp [stalkMap]
  simp only [stalkPushforward.id]
  erw [‚Üê map_comp]
  convert (stalkFunctor C x).map_id X.presheaf
  ext
  simp only [id_c, id_comp, Pushforward.id_hom_app, op_obj, eqToHom_refl, map_id]
  rfl
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.stalk_map.id AlgebraicGeometry.PresheafedSpace.stalkMap.id

@[simp]
theorem comp {X Y Z : PresheafedSpace.{_, _, v} C} (Œ± : X ‚ü∂ Y) (Œ≤ : Y ‚ü∂ Z) (x : X) :
    stalkMap (Œ± ‚â´ Œ≤) x =
      (stalkMap Œ≤ (Œ±.base x) : Z.stalk (Œ≤.base (Œ±.base x)) ‚ü∂ Y.stalk (Œ±.base x)) ‚â´
        (stalkMap Œ± x : Y.stalk (Œ±.base x) ‚ü∂ X.stalk x) := by
  dsimp [stalkMap, stalkFunctor, stalkPushforward]
  -- We can't use `ext` here due to https://github.com/leanprover/std4/pull/159
  refine colimit.hom_ext fun U => ?_
  induction U with | h U => ?_
  cases U
  simp only [whiskeringLeft_obj_obj, comp_obj, op_obj, unop_op, OpenNhds.inclusion_obj,
    Œπ_colimMap_assoc, pushforwardObj_obj, Opens.map_comp_obj, whiskerLeft_app, comp_c_app,
    OpenNhds.map_obj, whiskerRight_app, NatTrans.id_app, map_id, colimit.Œπ_pre, id_comp, assoc,
    colimit.Œπ_pre_assoc]
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.stalk_map.comp AlgebraicGeometry.PresheafedSpace.stalkMap.comp

/-- If `Œ± = Œ≤` and `x = x'`, we would like to say that `stalk_map Œ± x = stalk_map Œ≤ x'`.
Unfortunately, this equality is not well-formed, as their types are not _definitionally_ the same.
To get a proper congruence lemma, we therefore have to introduce these `eq_to_hom` arrows on
either side of the equality.
-/
theorem congr {X Y : PresheafedSpace.{_, _, v} C} (Œ± Œ≤ : X ‚ü∂ Y)
    (h‚ÇÅ : Œ± = Œ≤) (x x' : X) (h‚ÇÇ : x = x') :
    stalkMap Œ± x ‚â´ eqToHom (show X.stalk x = X.stalk x' by rw [h‚ÇÇ]) =
      eqToHom (show Y.stalk (Œ±.base x) = Y.stalk (Œ≤.base x') by rw [h‚ÇÅ, h‚ÇÇ]) ‚â´ stalkMap Œ≤ x' := by
  ext
  substs h‚ÇÅ h‚ÇÇ
  simp
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.stalk_map.congr AlgebraicGeometry.PresheafedSpace.stalkMap.congr

theorem congr_hom {X Y : PresheafedSpace.{_, _, v} C} (Œ± Œ≤ : X ‚ü∂ Y) (h : Œ± = Œ≤) (x : X) :
    stalkMap Œ± x =
      eqToHom (show Y.stalk (Œ±.base x) = Y.stalk (Œ≤.base x) by rw [h]) ‚â´ stalkMap Œ≤ x :=
  by rw [‚Üê stalkMap.congr Œ± Œ≤ h x x rfl, eqToHom_refl, Category.comp_id]
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.stalk_map.congr_hom AlgebraicGeometry.PresheafedSpace.stalkMap.congr_hom

theorem congr_point {X Y : PresheafedSpace.{_, _, v} C}
    (Œ± : X ‚ü∂ Y) (x x' : X) (h : x = x') :
    stalkMap Œ± x ‚â´ eqToHom (show X.stalk x = X.stalk x' by rw [h]) =
      eqToHom (show Y.stalk (Œ±.base x) = Y.stalk (Œ±.base x') by rw [h]) ‚â´ stalkMap Œ± x' :=
  by rw [stalkMap.congr Œ± Œ± rfl x x' h]
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.stalk_map.congr_point AlgebraicGeometry.PresheafedSpace.stalkMap.congr_point

instance isIso {X Y : PresheafedSpace.{_, _, v} C} (Œ± : X ‚ü∂ Y) [IsIso Œ±] (x : X) :
    IsIso (stalkMap Œ± x) where
  out := by
    let Œ≤ : Y ‚ü∂ X := CategoryTheory.inv Œ±
    have h_eq : (Œ± ‚â´ Œ≤).base x = x := by rw [IsIso.hom_inv_id Œ±, id_base, TopCat.id_app]
    -- Intuitively, the inverse of the stalk map of `Œ±` at `x` should just be the stalk map of `Œ≤`
    -- at `Œ± x`. Unfortunately, we have a problem with dependent type theory here: Because `x`
    -- is not *definitionally* equal to `Œ≤ (Œ± x)`, the map `stalk_map Œ≤ (Œ± x)` has not the correct
    -- type for an inverse.
    -- To get a proper inverse, we need to compose with the `eq_to_hom` arrow
    -- `X.stalk x ‚ü∂ X.stalk ((Œ± ‚â´ Œ≤).base x)`.
    refine'
      ‚ü®eqToHom (show X.stalk x = X.stalk ((Œ± ‚â´ Œ≤).base x) by rw [h_eq]) ‚â´
          (stalkMap Œ≤ (Œ±.base x) : _),
        _, _‚ü©
    ¬∑ rw [‚Üê Category.assoc, congr_point Œ± x ((Œ± ‚â´ Œ≤).base x) h_eq.symm, Category.assoc]
      erw [‚Üê stalkMap.comp Œ≤ Œ± (Œ±.base x)]
      rw [congr_hom _ _ (IsIso.inv_hom_id Œ±), stalkMap.id, eqToHom_trans_assoc, eqToHom_refl,
        Category.id_comp]
    ¬∑ rw [Category.assoc, ‚Üê stalkMap.comp, congr_hom _ _ (IsIso.hom_inv_id Œ±), stalkMap.id,
        eqToHom_trans_assoc, eqToHom_refl, Category.id_comp]
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.stalk_map.is_iso AlgebraicGeometry.PresheafedSpace.stalkMap.isIso

/-- An isomorphism between presheafed spaces induces an isomorphism of stalks.
-/
def stalkIso {X Y : PresheafedSpace.{_, _, v} C} (Œ± : X ‚âÖ Y) (x : X) :
    Y.stalk (Œ±.hom.base x) ‚âÖ X.stalk x :=
  asIso (stalkMap Œ±.hom x)
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.stalk_map.stalk_iso AlgebraicGeometry.PresheafedSpace.stalkMap.stalkIso

@[reassoc, elementwise, simp, nolint simpNF] -- see std4#365 for the simpNF issue
theorem stalkSpecializes_stalkMap {X Y : PresheafedSpace.{_, _, v} C}
    (f : X ‚ü∂ Y) {x y : X} (h : x ‚§≥ y) :
    Y.presheaf.stalkSpecializes (f.base.map_specializes h) ‚â´ stalkMap f x =
      stalkMap f y ‚â´ X.presheaf.stalkSpecializes h := by
  -- Porting note : the original one liner `dsimp [stalkMap]; simp [stalkMap]` doesn't work,
  -- I had to uglify this
  dsimp [stalkSpecializes, stalkMap, stalkFunctor, stalkPushforward]
  -- We can't use `ext` here due to https://github.com/leanprover/std4/pull/159
  refine colimit.hom_ext fun j => ?_
  induction j with | h j => ?_
  dsimp
  simp only [colimit.Œπ_desc_assoc, comp_obj, op_obj, unop_op, Œπ_colimMap_assoc, colimit.map_desc,
    OpenNhds.inclusion_obj, pushforwardObj_obj, whiskerLeft_app, OpenNhds.map_obj, whiskerRight_app,
    NatTrans.id_app, map_id, colimit.Œπ_pre, id_comp, assoc, colimit.pre_desc]
  erw [colimit.Œπ_desc]
  dsimp
  erw [X.presheaf.map_id, id_comp]
  rfl
set_option linter.uppercaseLean3 false in
#align algebraic_geometry.PresheafedSpace.stalk_map.stalk_specializes_stalk_map AlgebraicGeometry.PresheafedSpace.stalkMap.stalkSpecializes_stalkMap

end stalkMap

end AlgebraicGeometry.PresheafedSpace
