/-
Copyright (c) 2023 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Geometry.Euclidean.Inversion.Basic
import Mathlib.Analysis.InnerProductSpace.Calculus
import Mathlib.Analysis.Calculus.Deriv.Inv

/-!
# Derivative of the inversion

In this file we prove a formula for the derivative of `EuclideanGeometry.inversion c R`.

## Implementation notes

Since `fderiv` and related definitions do not work for affine spaces, we deal with an inner product
space in this file.

## Keywords

inversion, derivative
-/

open Metric Function AffineMap Set AffineSubspace
open scoped Topology RealInnerProductSpace

variable {E F : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  [NormedAddCommGroup F] [InnerProductSpace ‚Ñù F]

open EuclideanGeometry

section DotNotation

variable {c x : E ‚Üí F} {R : E ‚Üí ‚Ñù} {s : Set E} {a : E} {n : ‚Ñï‚àû}

protected theorem ContDiffWithinAt.inversion (hc : ContDiffWithinAt ‚Ñù n c s a)
    (hR : ContDiffWithinAt ‚Ñù n R s a) (hx : ContDiffWithinAt ‚Ñù n x s a) (hne : x a ‚â† c a) :
    ContDiffWithinAt ‚Ñù n (fun a ‚Ü¶ inversion (c a) (R a) (x a)) s a :=
  (((hR.div (hx.dist ‚Ñù hc hne) (dist_ne_zero.2 hne)).pow _).smul (hx.sub hc)).add hc

protected theorem ContDiffOn.inversion (hc : ContDiffOn ‚Ñù n c s) (hR : ContDiffOn ‚Ñù n R s)
    (hx : ContDiffOn ‚Ñù n x s) (hne : ‚àÄ a ‚àà s, x a ‚â† c a) :
    ContDiffOn ‚Ñù n (fun a ‚Ü¶ inversion (c a) (R a) (x a)) s := fun a ha ‚Ü¶
  (hc a ha).inversion (hR a ha) (hx a ha) (hne a ha)

protected nonrec theorem ContDiffAt.inversion (hc : ContDiffAt ‚Ñù n c a) (hR : ContDiffAt ‚Ñù n R a)
    (hx : ContDiffAt ‚Ñù n x a) (hne : x a ‚â† c a) :
    ContDiffAt ‚Ñù n (fun a ‚Ü¶ inversion (c a) (R a) (x a)) a :=
  hc.inversion hR hx hne

protected nonrec theorem ContDiff.inversion (hc : ContDiff ‚Ñù n c) (hR : ContDiff ‚Ñù n R)
    (hx : ContDiff ‚Ñù n x) (hne : ‚àÄ a, x a ‚â† c a) :
    ContDiff ‚Ñù n (fun a ‚Ü¶ inversion (c a) (R a) (x a)) :=
  contDiff_iff_contDiffAt.2 fun a ‚Ü¶ hc.contDiffAt.inversion hR.contDiffAt hx.contDiffAt (hne a)

protected theorem DifferentiableWithinAt.inversion (hc : DifferentiableWithinAt ‚Ñù c s a)
    (hR : DifferentiableWithinAt ‚Ñù R s a) (hx : DifferentiableWithinAt ‚Ñù x s a) (hne : x a ‚â† c a) :
    DifferentiableWithinAt ‚Ñù (fun a ‚Ü¶ inversion (c a) (R a) (x a)) s a :=
  -- TODO: Use `.div` #5870
  (((hR.mul <| (hx.dist ‚Ñù hc hne).inv (dist_ne_zero.2 hne)).pow _).smul (hx.sub hc)).add hc

protected theorem DifferentiableOn.inversion (hc : DifferentiableOn ‚Ñù c s)
    (hR : DifferentiableOn ‚Ñù R s) (hx : DifferentiableOn ‚Ñù x s) (hne : ‚àÄ a ‚àà s, x a ‚â† c a) :
    DifferentiableOn ‚Ñù (fun a ‚Ü¶ inversion (c a) (R a) (x a)) s := fun a ha ‚Ü¶
  (hc a ha).inversion (hR a ha) (hx a ha) (hne a ha)

protected theorem DifferentiableAt.inversion (hc : DifferentiableAt ‚Ñù c a)
    (hR : DifferentiableAt ‚Ñù R a) (hx : DifferentiableAt ‚Ñù x a) (hne : x a ‚â† c a) :
    DifferentiableAt ‚Ñù (fun a ‚Ü¶ inversion (c a) (R a) (x a)) a := by
  rw [‚Üê differentiableWithinAt_univ] at *
  exact hc.inversion hR hx hne

protected theorem Differentiable.inversion (hc : Differentiable ‚Ñù c)
    (hR : Differentiable ‚Ñù R) (hx : Differentiable ‚Ñù x) (hne : ‚àÄ a, x a ‚â† c a) :
    Differentiable ‚Ñù (fun a ‚Ü¶ inversion (c a) (R a) (x a)) := fun a ‚Ü¶
  (hc a).inversion (hR a) (hx a) (hne a)

end DotNotation

namespace EuclideanGeometry

variable {a b c d x y z : F} {r R : ‚Ñù}

/-- Formula for the Fr√©chet derivative of `EuclideanGeometry.inversion c R`. -/
theorem hasFDerivAt_inversion (hx : x ‚â† c) :
    HasFDerivAt (inversion c R)
      ((R / dist x c) ^ 2 ‚Ä¢ (reflection (‚Ñù ‚àô (x - c))·óÆ : F ‚ÜíL[‚Ñù] F)) x := by
  rcases add_left_surjective c x with ‚ü®x, rfl‚ü©
  have : HasFDerivAt (inversion c R) (_ : F ‚ÜíL[‚Ñù] F) (c + x) := by
    -- Adaptation note: nightly-2024-03-16: simp was
    -- simp (config := { unfoldPartialApp := true }) only [inversion]
    simp only [inversion_def]
    simp_rw [dist_eq_norm, div_pow, div_eq_mul_inv]
    have A := (hasFDerivAt_id (ùïú := ‚Ñù) (c + x)).sub_const c
    have B := ((hasDerivAt_inv <| by simpa using hx).comp_hasFDerivAt _ A.norm_sq).const_mul
      (R ^ 2)
    exact (B.smul A).add_const c
  refine this.congr_fderiv (LinearMap.ext_on_codisjoint
    (Submodule.isCompl_orthogonal_of_completeSpace (K := ‚Ñù ‚àô x)).codisjoint
    (LinearMap.eqOn_span' ?_) fun y hy ‚Ü¶ ?_)
  ¬∑ have : ((‚Äñx‚Äñ ^ 2) ^ 2)‚Åª¬π * (‚Äñx‚Äñ ^ 2) = (‚Äñx‚Äñ ^ 2)‚Åª¬π := by
      rw [‚Üê div_eq_inv_mul, sq (‚Äñx‚Äñ ^ 2), div_self_mul_self']
    simp [reflection_orthogonalComplement_singleton_eq_neg, real_inner_self_eq_norm_sq,
      two_mul, this, div_eq_mul_inv, mul_add, add_smul, mul_pow]
  ¬∑ simp [Submodule.mem_orthogonal_singleton_iff_inner_right.1 hy,
      reflection_mem_subspace_eq_self hy, div_eq_mul_inv, mul_pow]

end EuclideanGeometry
