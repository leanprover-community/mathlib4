/-
Copyright (c) 2020 Joseph Myers. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Myers
-/
import Mathlib.Analysis.Convex.StrictConvexBetween
import Mathlib.Geometry.Euclidean.Basic

#align_import geometry.euclidean.sphere.basic from "leanprover-community/mathlib"@"46b633fd842bef9469441c0209906f6dddd2b4f5"

/-!
# Spheres

This file defines and proves basic results about spheres and cospherical sets of points in
Euclidean affine spaces.

## Main definitions

* `EuclideanGeometry.Sphere` bundles a `center` and a `radius`.

* `EuclideanGeometry.Cospherical` is the property of a set of points being equidistant from some
  point.

* `EuclideanGeometry.Concyclic` is the property of a set of points being cospherical and
  coplanar.

-/


noncomputable section

open RealInnerProductSpace

namespace EuclideanGeometry

variable {V : Type*} (P : Type*)

open FiniteDimensional

/-- A `Sphere P` bundles a `center` and `radius`. This definition does not require the radius to
be positive; that should be given as a hypothesis to lemmas that require it. -/
@[ext]
structure Sphere [MetricSpace P] where
  center : P
  radius : ‚Ñù
#align euclidean_geometry.sphere EuclideanGeometry.Sphere

variable {P}

section MetricSpace

variable [MetricSpace P]

instance [Nonempty P] : Nonempty (Sphere P) :=
  ‚ü®‚ü®Classical.arbitrary P, 0‚ü©‚ü©

instance : Coe (Sphere P) (Set P) :=
  ‚ü®fun s => Metric.sphere s.center s.radius‚ü©

instance : Membership P (Sphere P) :=
  ‚ü®fun p s => p ‚àà (s : Set P)‚ü©

theorem Sphere.mk_center (c : P) (r : ‚Ñù) : (‚ü®c, r‚ü© : Sphere P).center = c :=
  rfl
#align euclidean_geometry.sphere.mk_center EuclideanGeometry.Sphere.mk_center

theorem Sphere.mk_radius (c : P) (r : ‚Ñù) : (‚ü®c, r‚ü© : Sphere P).radius = r :=
  rfl
#align euclidean_geometry.sphere.mk_radius EuclideanGeometry.Sphere.mk_radius

@[simp]
theorem Sphere.mk_center_radius (s : Sphere P) : (‚ü®s.center, s.radius‚ü© : Sphere P) = s := by
  ext <;> rfl
#align euclidean_geometry.sphere.mk_center_radius EuclideanGeometry.Sphere.mk_center_radius

/- Porting note: is a syntactic tautology
theorem Sphere.coe_def (s : Sphere P) : (s : Set P) = Metric.sphere s.center s.radius :=
  rfl -/
#noalign euclidean_geometry.sphere.coe_def

@[simp]
theorem Sphere.coe_mk (c : P) (r : ‚Ñù) : ‚Üë(‚ü®c, r‚ü© : Sphere P) = Metric.sphere c r :=
  rfl
#align euclidean_geometry.sphere.coe_mk EuclideanGeometry.Sphere.coe_mk

-- @[simp] -- Porting note: simp-normal form is `Sphere.mem_coe'`
theorem Sphere.mem_coe {p : P} {s : Sphere P} : p ‚àà (s : Set P) ‚Üî p ‚àà s :=
  Iff.rfl
#align euclidean_geometry.sphere.mem_coe EuclideanGeometry.Sphere.mem_coe

@[simp]
theorem Sphere.mem_coe' {p : P} {s : Sphere P} : dist p s.center = s.radius ‚Üî p ‚àà s :=
  Iff.rfl

theorem mem_sphere {p : P} {s : Sphere P} : p ‚àà s ‚Üî dist p s.center = s.radius :=
  Iff.rfl
#align euclidean_geometry.mem_sphere EuclideanGeometry.mem_sphere

theorem mem_sphere' {p : P} {s : Sphere P} : p ‚àà s ‚Üî dist s.center p = s.radius :=
  Metric.mem_sphere'
#align euclidean_geometry.mem_sphere' EuclideanGeometry.mem_sphere'

theorem subset_sphere {ps : Set P} {s : Sphere P} : ps ‚äÜ s ‚Üî ‚àÄ p ‚àà ps, p ‚àà s :=
  Iff.rfl
#align euclidean_geometry.subset_sphere EuclideanGeometry.subset_sphere

theorem dist_of_mem_subset_sphere {p : P} {ps : Set P} {s : Sphere P} (hp : p ‚àà ps)
    (hps : ps ‚äÜ (s : Set P)) : dist p s.center = s.radius :=
  mem_sphere.1 (Sphere.mem_coe.1 (Set.mem_of_mem_of_subset hp hps))
#align euclidean_geometry.dist_of_mem_subset_sphere EuclideanGeometry.dist_of_mem_subset_sphere

theorem dist_of_mem_subset_mk_sphere {p c : P} {ps : Set P} {r : ‚Ñù} (hp : p ‚àà ps)
    (hps : ps ‚äÜ ‚Üë(‚ü®c, r‚ü© : Sphere P)) : dist p c = r :=
  dist_of_mem_subset_sphere hp hps
#align euclidean_geometry.dist_of_mem_subset_mk_sphere EuclideanGeometry.dist_of_mem_subset_mk_sphere

theorem Sphere.ne_iff {s‚ÇÅ s‚ÇÇ : Sphere P} :
    s‚ÇÅ ‚â† s‚ÇÇ ‚Üî s‚ÇÅ.center ‚â† s‚ÇÇ.center ‚à® s‚ÇÅ.radius ‚â† s‚ÇÇ.radius := by
  rw [‚Üê not_and_or, ‚Üê Sphere.ext_iff]
#align euclidean_geometry.sphere.ne_iff EuclideanGeometry.Sphere.ne_iff

theorem Sphere.center_eq_iff_eq_of_mem {s‚ÇÅ s‚ÇÇ : Sphere P} {p : P} (hs‚ÇÅ : p ‚àà s‚ÇÅ) (hs‚ÇÇ : p ‚àà s‚ÇÇ) :
    s‚ÇÅ.center = s‚ÇÇ.center ‚Üî s‚ÇÅ = s‚ÇÇ := by
  refine' ‚ü®fun h => Sphere.ext _ _ h _, fun h => h ‚ñ∏ rfl‚ü©
  rw [mem_sphere] at hs‚ÇÅ hs‚ÇÇ
  rw [‚Üê hs‚ÇÅ, ‚Üê hs‚ÇÇ, h]
#align euclidean_geometry.sphere.center_eq_iff_eq_of_mem EuclideanGeometry.Sphere.center_eq_iff_eq_of_mem

theorem Sphere.center_ne_iff_ne_of_mem {s‚ÇÅ s‚ÇÇ : Sphere P} {p : P} (hs‚ÇÅ : p ‚àà s‚ÇÅ) (hs‚ÇÇ : p ‚àà s‚ÇÇ) :
    s‚ÇÅ.center ‚â† s‚ÇÇ.center ‚Üî s‚ÇÅ ‚â† s‚ÇÇ :=
  (Sphere.center_eq_iff_eq_of_mem hs‚ÇÅ hs‚ÇÇ).not
#align euclidean_geometry.sphere.center_ne_iff_ne_of_mem EuclideanGeometry.Sphere.center_ne_iff_ne_of_mem

theorem dist_center_eq_dist_center_of_mem_sphere {p‚ÇÅ p‚ÇÇ : P} {s : Sphere P} (hp‚ÇÅ : p‚ÇÅ ‚àà s)
    (hp‚ÇÇ : p‚ÇÇ ‚àà s) : dist p‚ÇÅ s.center = dist p‚ÇÇ s.center := by
  rw [mem_sphere.1 hp‚ÇÅ, mem_sphere.1 hp‚ÇÇ]
#align euclidean_geometry.dist_center_eq_dist_center_of_mem_sphere EuclideanGeometry.dist_center_eq_dist_center_of_mem_sphere

theorem dist_center_eq_dist_center_of_mem_sphere' {p‚ÇÅ p‚ÇÇ : P} {s : Sphere P} (hp‚ÇÅ : p‚ÇÅ ‚àà s)
    (hp‚ÇÇ : p‚ÇÇ ‚àà s) : dist s.center p‚ÇÅ = dist s.center p‚ÇÇ := by
  rw [mem_sphere'.1 hp‚ÇÅ, mem_sphere'.1 hp‚ÇÇ]
#align euclidean_geometry.dist_center_eq_dist_center_of_mem_sphere' EuclideanGeometry.dist_center_eq_dist_center_of_mem_sphere'

/-- A set of points is cospherical if they are equidistant from some
point. In two dimensions, this is the same thing as being
concyclic. -/
def Cospherical (ps : Set P) : Prop :=
  ‚àÉ (center : P) (radius : ‚Ñù), ‚àÄ p ‚àà ps, dist p center = radius
#align euclidean_geometry.cospherical EuclideanGeometry.Cospherical

/-- The definition of `Cospherical`. -/
theorem cospherical_def (ps : Set P) :
    Cospherical ps ‚Üî ‚àÉ (center : P) (radius : ‚Ñù), ‚àÄ p ‚àà ps, dist p center = radius :=
  Iff.rfl
#align euclidean_geometry.cospherical_def EuclideanGeometry.cospherical_def

/-- A set of points is cospherical if and only if they lie in some sphere. -/
theorem cospherical_iff_exists_sphere {ps : Set P} :
    Cospherical ps ‚Üî ‚àÉ s : Sphere P, ps ‚äÜ (s : Set P) := by
  refine' ‚ü®fun h => _, fun h => _‚ü©
  ¬∑ rcases h with ‚ü®c, r, h‚ü©
    exact ‚ü®‚ü®c, r‚ü©, h‚ü©
  ¬∑ rcases h with ‚ü®s, h‚ü©
    exact ‚ü®s.center, s.radius, h‚ü©
#align euclidean_geometry.cospherical_iff_exists_sphere EuclideanGeometry.cospherical_iff_exists_sphere

/-- The set of points in a sphere is cospherical. -/
theorem Sphere.cospherical (s : Sphere P) : Cospherical (s : Set P) :=
  cospherical_iff_exists_sphere.2 ‚ü®s, Set.Subset.rfl‚ü©
#align euclidean_geometry.sphere.cospherical EuclideanGeometry.Sphere.cospherical

/-- A subset of a cospherical set is cospherical. -/
theorem Cospherical.subset {ps‚ÇÅ ps‚ÇÇ : Set P} (hs : ps‚ÇÅ ‚äÜ ps‚ÇÇ) (hc : Cospherical ps‚ÇÇ) :
    Cospherical ps‚ÇÅ := by
  rcases hc with ‚ü®c, r, hcr‚ü©
  exact ‚ü®c, r, fun p hp => hcr p (hs hp)‚ü©
#align euclidean_geometry.cospherical.subset EuclideanGeometry.Cospherical.subset

/-- The empty set is cospherical. -/
theorem cospherical_empty [Nonempty P] : Cospherical (‚àÖ : Set P) :=
  let ‚ü®p‚ü© := ‚ÄπNonempty P‚Ä∫
  ‚ü®p, 0, fun p => False.elim‚ü©
#align euclidean_geometry.cospherical_empty EuclideanGeometry.cospherical_empty

/-- A single point is cospherical. -/
theorem cospherical_singleton (p : P) : Cospherical ({p} : Set P) := by
  use p
  simp
#align euclidean_geometry.cospherical_singleton EuclideanGeometry.cospherical_singleton

end MetricSpace

section NormedSpace

variable [NormedAddCommGroup V] [NormedSpace ‚Ñù V] [MetricSpace P] [NormedAddTorsor V P]

/-- Two points are cospherical. -/
theorem cospherical_pair (p‚ÇÅ p‚ÇÇ : P) : Cospherical ({p‚ÇÅ, p‚ÇÇ} : Set P) :=
  ‚ü®midpoint ‚Ñù p‚ÇÅ p‚ÇÇ, ‚Äñ(2 : ‚Ñù)‚Äñ‚Åª¬π * dist p‚ÇÅ p‚ÇÇ, by
    rintro p (rfl | rfl | _)
    ¬∑ rw [dist_comm, dist_midpoint_left (ùïú := ‚Ñù)]
    ¬∑ rw [dist_comm, dist_midpoint_right (ùïú := ‚Ñù)]‚ü©
#align euclidean_geometry.cospherical_pair EuclideanGeometry.cospherical_pair

/-- A set of points is concyclic if it is cospherical and coplanar. (Most results are stated
directly in terms of `Cospherical` instead of using `Concyclic`.) -/
structure Concyclic (ps : Set P) : Prop where
  Cospherical : Cospherical ps
  Coplanar : Coplanar ‚Ñù ps
#align euclidean_geometry.concyclic EuclideanGeometry.Concyclic

/-- A subset of a concyclic set is concyclic. -/
theorem Concyclic.subset {ps‚ÇÅ ps‚ÇÇ : Set P} (hs : ps‚ÇÅ ‚äÜ ps‚ÇÇ) (h : Concyclic ps‚ÇÇ) : Concyclic ps‚ÇÅ :=
  ‚ü®h.1.subset hs, h.2.subset hs‚ü©
#align euclidean_geometry.concyclic.subset EuclideanGeometry.Concyclic.subset

/-- The empty set is concyclic. -/
theorem concyclic_empty : Concyclic (‚àÖ : Set P) :=
  ‚ü®cospherical_empty, coplanar_empty ‚Ñù P‚ü©
#align euclidean_geometry.concyclic_empty EuclideanGeometry.concyclic_empty

/-- A single point is concyclic. -/
theorem concyclic_singleton (p : P) : Concyclic ({p} : Set P) :=
  ‚ü®cospherical_singleton p, coplanar_singleton ‚Ñù p‚ü©
#align euclidean_geometry.concyclic_singleton EuclideanGeometry.concyclic_singleton

/-- Two points are concyclic. -/
theorem concyclic_pair (p‚ÇÅ p‚ÇÇ : P) : Concyclic ({p‚ÇÅ, p‚ÇÇ} : Set P) :=
  ‚ü®cospherical_pair p‚ÇÅ p‚ÇÇ, coplanar_pair ‚Ñù p‚ÇÅ p‚ÇÇ‚ü©
#align euclidean_geometry.concyclic_pair EuclideanGeometry.concyclic_pair

end NormedSpace

section EuclideanSpace

variable [NormedAddCommGroup V] [InnerProductSpace ‚Ñù V] [MetricSpace P] [NormedAddTorsor V P]

/-- Any three points in a cospherical set are affinely independent. -/
theorem Cospherical.affineIndependent {s : Set P} (hs : Cospherical s) {p : Fin 3 ‚Üí P}
    (hps : Set.range p ‚äÜ s) (hpi : Function.Injective p) : AffineIndependent ‚Ñù p := by
  rw [affineIndependent_iff_not_collinear]
  intro hc
  rw [collinear_iff_of_mem (Set.mem_range_self (0 : Fin 3))] at hc
  rcases hc with ‚ü®v, hv‚ü©
  rw [Set.forall_mem_range] at hv
  have hv0 : v ‚â† 0 := by
    intro h
    have he : p 1 = p 0 := by simpa [h] using hv 1
    exact (by decide : (1 : Fin 3) ‚â† 0) (hpi he)
  rcases hs with ‚ü®c, r, hs‚ü©
  have hs' := fun i => hs (p i) (Set.mem_of_mem_of_subset (Set.mem_range_self _) hps)
  choose f hf using hv
  have hsd : ‚àÄ i, dist (f i ‚Ä¢ v +·µ• p 0) c = r := by
    intro i
    rw [‚Üê hf]
    exact hs' i
  have hf0 : f 0 = 0 := by
    have hf0' := hf 0
    rw [eq_comm, ‚Üê @vsub_eq_zero_iff_eq V, vadd_vsub, smul_eq_zero] at hf0'
    simpa [hv0] using hf0'
  have hfi : Function.Injective f := by
    intro i j h
    have hi := hf i
    rw [h, ‚Üê hf j] at hi
    exact hpi hi
  simp_rw [‚Üê hsd 0, hf0, zero_smul, zero_vadd, dist_smul_vadd_eq_dist (p 0) c hv0] at hsd
  have hfn0 : ‚àÄ i, i ‚â† 0 ‚Üí f i ‚â† 0 := fun i => (hfi.ne_iff' hf0).2
  have hfn0' : ‚àÄ i, i ‚â† 0 ‚Üí f i = -2 * ‚ü™v, p 0 -·µ• c‚ü´ / ‚ü™v, v‚ü´ := by
    intro i hi
    have hsdi := hsd i
    simpa [hfn0, hi] using hsdi
  have hf12 : f 1 = f 2 := by rw [hfn0' 1 (by decide), hfn0' 2 (by decide)]
  exact (by decide : (1 : Fin 3) ‚â† 2) (hfi hf12)
#align euclidean_geometry.cospherical.affine_independent EuclideanGeometry.Cospherical.affineIndependent

/-- Any three points in a cospherical set are affinely independent. -/
theorem Cospherical.affineIndependent_of_mem_of_ne {s : Set P} (hs : Cospherical s) {p‚ÇÅ p‚ÇÇ p‚ÇÉ : P}
    (h‚ÇÅ : p‚ÇÅ ‚àà s) (h‚ÇÇ : p‚ÇÇ ‚àà s) (h‚ÇÉ : p‚ÇÉ ‚àà s) (h‚ÇÅ‚ÇÇ : p‚ÇÅ ‚â† p‚ÇÇ) (h‚ÇÅ‚ÇÉ : p‚ÇÅ ‚â† p‚ÇÉ) (h‚ÇÇ‚ÇÉ : p‚ÇÇ ‚â† p‚ÇÉ) :
    AffineIndependent ‚Ñù ![p‚ÇÅ, p‚ÇÇ, p‚ÇÉ] := by
  refine' hs.affineIndependent _ _
  ¬∑ simp [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ, Set.insert_subset_iff]
  ¬∑ erw [Fin.cons_injective_iff, Fin.cons_injective_iff]
    simp [h‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÉ, h‚ÇÇ‚ÇÉ, Function.Injective, eq_iff_true_of_subsingleton]
#align euclidean_geometry.cospherical.affine_independent_of_mem_of_ne EuclideanGeometry.Cospherical.affineIndependent_of_mem_of_ne

/-- The three points of a cospherical set are affinely independent. -/
theorem Cospherical.affineIndependent_of_ne {p‚ÇÅ p‚ÇÇ p‚ÇÉ : P} (hs : Cospherical ({p‚ÇÅ, p‚ÇÇ, p‚ÇÉ} : Set P))
    (h‚ÇÅ‚ÇÇ : p‚ÇÅ ‚â† p‚ÇÇ) (h‚ÇÅ‚ÇÉ : p‚ÇÅ ‚â† p‚ÇÉ) (h‚ÇÇ‚ÇÉ : p‚ÇÇ ‚â† p‚ÇÉ) : AffineIndependent ‚Ñù ![p‚ÇÅ, p‚ÇÇ, p‚ÇÉ] :=
  hs.affineIndependent_of_mem_of_ne (Set.mem_insert _ _)
    (Set.mem_insert_of_mem _ (Set.mem_insert _ _))
    (Set.mem_insert_of_mem _ (Set.mem_insert_of_mem _ (Set.mem_singleton _))) h‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÉ h‚ÇÇ‚ÇÉ
#align euclidean_geometry.cospherical.affine_independent_of_ne EuclideanGeometry.Cospherical.affineIndependent_of_ne

/-- Suppose that `p‚ÇÅ` and `p‚ÇÇ` lie in spheres `s‚ÇÅ` and `s‚ÇÇ`. Then the vector between the centers
of those spheres is orthogonal to that between `p‚ÇÅ` and `p‚ÇÇ`; this is a version of
`inner_vsub_vsub_of_dist_eq_of_dist_eq` for bundled spheres. (In two dimensions, this says that
the diagonals of a kite are orthogonal.) -/
theorem inner_vsub_vsub_of_mem_sphere_of_mem_sphere {p‚ÇÅ p‚ÇÇ : P} {s‚ÇÅ s‚ÇÇ : Sphere P} (hp‚ÇÅs‚ÇÅ : p‚ÇÅ ‚àà s‚ÇÅ)
    (hp‚ÇÇs‚ÇÅ : p‚ÇÇ ‚àà s‚ÇÅ) (hp‚ÇÅs‚ÇÇ : p‚ÇÅ ‚àà s‚ÇÇ) (hp‚ÇÇs‚ÇÇ : p‚ÇÇ ‚àà s‚ÇÇ) :
    ‚ü™s‚ÇÇ.center -·µ• s‚ÇÅ.center, p‚ÇÇ -·µ• p‚ÇÅ‚ü´ = 0 :=
  inner_vsub_vsub_of_dist_eq_of_dist_eq (dist_center_eq_dist_center_of_mem_sphere hp‚ÇÅs‚ÇÅ hp‚ÇÇs‚ÇÅ)
    (dist_center_eq_dist_center_of_mem_sphere hp‚ÇÅs‚ÇÇ hp‚ÇÇs‚ÇÇ)
#align euclidean_geometry.inner_vsub_vsub_of_mem_sphere_of_mem_sphere EuclideanGeometry.inner_vsub_vsub_of_mem_sphere_of_mem_sphere

/-- Two spheres intersect in at most two points in a two-dimensional subspace containing their
centers; this is a version of `eq_of_dist_eq_of_dist_eq_of_mem_of_finrank_eq_two` for bundled
spheres. -/
theorem eq_of_mem_sphere_of_mem_sphere_of_mem_of_finrank_eq_two {s : AffineSubspace ‚Ñù P}
    [FiniteDimensional ‚Ñù s.direction] (hd : finrank ‚Ñù s.direction = 2) {s‚ÇÅ s‚ÇÇ : Sphere P}
    {p‚ÇÅ p‚ÇÇ p : P} (hs‚ÇÅ : s‚ÇÅ.center ‚àà s) (hs‚ÇÇ : s‚ÇÇ.center ‚àà s) (hp‚ÇÅs : p‚ÇÅ ‚àà s) (hp‚ÇÇs : p‚ÇÇ ‚àà s)
    (hps : p ‚àà s) (hs : s‚ÇÅ ‚â† s‚ÇÇ) (hp : p‚ÇÅ ‚â† p‚ÇÇ) (hp‚ÇÅs‚ÇÅ : p‚ÇÅ ‚àà s‚ÇÅ) (hp‚ÇÇs‚ÇÅ : p‚ÇÇ ‚àà s‚ÇÅ) (hps‚ÇÅ : p ‚àà s‚ÇÅ)
    (hp‚ÇÅs‚ÇÇ : p‚ÇÅ ‚àà s‚ÇÇ) (hp‚ÇÇs‚ÇÇ : p‚ÇÇ ‚àà s‚ÇÇ) (hps‚ÇÇ : p ‚àà s‚ÇÇ) : p = p‚ÇÅ ‚à® p = p‚ÇÇ :=
  eq_of_dist_eq_of_dist_eq_of_mem_of_finrank_eq_two hd hs‚ÇÅ hs‚ÇÇ hp‚ÇÅs hp‚ÇÇs hps
    ((Sphere.center_ne_iff_ne_of_mem hps‚ÇÅ hps‚ÇÇ).2 hs) hp hp‚ÇÅs‚ÇÅ hp‚ÇÇs‚ÇÅ hps‚ÇÅ hp‚ÇÅs‚ÇÇ hp‚ÇÇs‚ÇÇ hps‚ÇÇ
#align euclidean_geometry.eq_of_mem_sphere_of_mem_sphere_of_mem_of_finrank_eq_two EuclideanGeometry.eq_of_mem_sphere_of_mem_sphere_of_mem_of_finrank_eq_two

/-- Two spheres intersect in at most two points in two-dimensional space; this is a version of
`eq_of_dist_eq_of_dist_eq_of_finrank_eq_two` for bundled spheres. -/
theorem eq_of_mem_sphere_of_mem_sphere_of_finrank_eq_two [FiniteDimensional ‚Ñù V]
    (hd : finrank ‚Ñù V = 2) {s‚ÇÅ s‚ÇÇ : Sphere P} {p‚ÇÅ p‚ÇÇ p : P} (hs : s‚ÇÅ ‚â† s‚ÇÇ) (hp : p‚ÇÅ ‚â† p‚ÇÇ)
    (hp‚ÇÅs‚ÇÅ : p‚ÇÅ ‚àà s‚ÇÅ) (hp‚ÇÇs‚ÇÅ : p‚ÇÇ ‚àà s‚ÇÅ) (hps‚ÇÅ : p ‚àà s‚ÇÅ) (hp‚ÇÅs‚ÇÇ : p‚ÇÅ ‚àà s‚ÇÇ) (hp‚ÇÇs‚ÇÇ : p‚ÇÇ ‚àà s‚ÇÇ)
    (hps‚ÇÇ : p ‚àà s‚ÇÇ) : p = p‚ÇÅ ‚à® p = p‚ÇÇ :=
  eq_of_dist_eq_of_dist_eq_of_finrank_eq_two hd ((Sphere.center_ne_iff_ne_of_mem hps‚ÇÅ hps‚ÇÇ).2 hs) hp
    hp‚ÇÅs‚ÇÅ hp‚ÇÇs‚ÇÅ hps‚ÇÅ hp‚ÇÅs‚ÇÇ hp‚ÇÇs‚ÇÇ hps‚ÇÇ
#align euclidean_geometry.eq_of_mem_sphere_of_mem_sphere_of_finrank_eq_two EuclideanGeometry.eq_of_mem_sphere_of_mem_sphere_of_finrank_eq_two

/-- Given a point on a sphere and a point not outside it, the inner product between the
difference of those points and the radius vector is positive unless the points are equal. -/
theorem inner_pos_or_eq_of_dist_le_radius {s : Sphere P} {p‚ÇÅ p‚ÇÇ : P} (hp‚ÇÅ : p‚ÇÅ ‚àà s)
    (hp‚ÇÇ : dist p‚ÇÇ s.center ‚â§ s.radius) : 0 < ‚ü™p‚ÇÅ -·µ• p‚ÇÇ, p‚ÇÅ -·µ• s.center‚ü´ ‚à® p‚ÇÅ = p‚ÇÇ := by
  by_cases h : p‚ÇÅ = p‚ÇÇ; ¬∑ exact Or.inr h
  refine' Or.inl _
  rw [mem_sphere] at hp‚ÇÅ
  rw [‚Üê vsub_sub_vsub_cancel_right p‚ÇÅ p‚ÇÇ s.center, inner_sub_left,
    real_inner_self_eq_norm_mul_norm, sub_pos]
  refine'
    lt_of_le_of_ne ((real_inner_le_norm _ _).trans (mul_le_mul_of_nonneg_right _ (norm_nonneg _))) _
  ¬∑ rwa [‚Üê dist_eq_norm_vsub, ‚Üê dist_eq_norm_vsub, hp‚ÇÅ]
  ¬∑ rcases hp‚ÇÇ.lt_or_eq with (hp‚ÇÇ' | hp‚ÇÇ')
    ¬∑ refine' ((real_inner_le_norm _ _).trans_lt (mul_lt_mul_of_pos_right _ _)).ne
      ¬∑ rwa [‚Üê hp‚ÇÅ, @dist_eq_norm_vsub V, @dist_eq_norm_vsub V] at hp‚ÇÇ'
      ¬∑ rw [norm_pos_iff, vsub_ne_zero]
        rintro rfl
        rw [‚Üê hp‚ÇÅ] at hp‚ÇÇ'
        refine' (dist_nonneg.not_lt : ¬¨dist p‚ÇÇ s.center < 0) _
        simpa using hp‚ÇÇ'
    ¬∑ rw [‚Üê hp‚ÇÅ, @dist_eq_norm_vsub V, @dist_eq_norm_vsub V] at hp‚ÇÇ'
      nth_rw 1 [‚Üê hp‚ÇÇ']
      rw [Ne.def, inner_eq_norm_mul_iff_real, hp‚ÇÇ', ‚Üê sub_eq_zero, ‚Üê smul_sub,
        vsub_sub_vsub_cancel_right, ‚Üê Ne.def, smul_ne_zero_iff, vsub_ne_zero,
        and_iff_left (Ne.symm h), norm_ne_zero_iff, vsub_ne_zero]
      rintro rfl
      refine' h (Eq.symm _)
      simpa using hp‚ÇÇ'
#align euclidean_geometry.inner_pos_or_eq_of_dist_le_radius EuclideanGeometry.inner_pos_or_eq_of_dist_le_radius

/-- Given a point on a sphere and a point not outside it, the inner product between the
difference of those points and the radius vector is nonnegative. -/
theorem inner_nonneg_of_dist_le_radius {s : Sphere P} {p‚ÇÅ p‚ÇÇ : P} (hp‚ÇÅ : p‚ÇÅ ‚àà s)
    (hp‚ÇÇ : dist p‚ÇÇ s.center ‚â§ s.radius) : 0 ‚â§ ‚ü™p‚ÇÅ -·µ• p‚ÇÇ, p‚ÇÅ -·µ• s.center‚ü´ := by
  rcases inner_pos_or_eq_of_dist_le_radius hp‚ÇÅ hp‚ÇÇ with (h | rfl)
  ¬∑ exact h.le
  ¬∑ simp
#align euclidean_geometry.inner_nonneg_of_dist_le_radius EuclideanGeometry.inner_nonneg_of_dist_le_radius

/-- Given a point on a sphere and a point inside it, the inner product between the difference of
those points and the radius vector is positive. -/
theorem inner_pos_of_dist_lt_radius {s : Sphere P} {p‚ÇÅ p‚ÇÇ : P} (hp‚ÇÅ : p‚ÇÅ ‚àà s)
    (hp‚ÇÇ : dist p‚ÇÇ s.center < s.radius) : 0 < ‚ü™p‚ÇÅ -·µ• p‚ÇÇ, p‚ÇÅ -·µ• s.center‚ü´ := by
  by_cases h : p‚ÇÅ = p‚ÇÇ
  ¬∑ rw [h, mem_sphere] at hp‚ÇÅ
    exact False.elim (hp‚ÇÇ.ne hp‚ÇÅ)
  exact (inner_pos_or_eq_of_dist_le_radius hp‚ÇÅ hp‚ÇÇ.le).resolve_right h
#align euclidean_geometry.inner_pos_of_dist_lt_radius EuclideanGeometry.inner_pos_of_dist_lt_radius

/-- Given three collinear points, two on a sphere and one not outside it, the one not outside it
is weakly between the other two points. -/
theorem wbtw_of_collinear_of_dist_center_le_radius {s : Sphere P} {p‚ÇÅ p‚ÇÇ p‚ÇÉ : P}
    (h : Collinear ‚Ñù ({p‚ÇÅ, p‚ÇÇ, p‚ÇÉ} : Set P)) (hp‚ÇÅ : p‚ÇÅ ‚àà s) (hp‚ÇÇ : dist p‚ÇÇ s.center ‚â§ s.radius)
    (hp‚ÇÉ : p‚ÇÉ ‚àà s) (hp‚ÇÅp‚ÇÉ : p‚ÇÅ ‚â† p‚ÇÉ) : Wbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ :=
  h.wbtw_of_dist_eq_of_dist_le hp‚ÇÅ hp‚ÇÇ hp‚ÇÉ hp‚ÇÅp‚ÇÉ
#align euclidean_geometry.wbtw_of_collinear_of_dist_center_le_radius EuclideanGeometry.wbtw_of_collinear_of_dist_center_le_radius

/-- Given three collinear points, two on a sphere and one inside it, the one inside it is
strictly between the other two points. -/
theorem sbtw_of_collinear_of_dist_center_lt_radius {s : Sphere P} {p‚ÇÅ p‚ÇÇ p‚ÇÉ : P}
    (h : Collinear ‚Ñù ({p‚ÇÅ, p‚ÇÇ, p‚ÇÉ} : Set P)) (hp‚ÇÅ : p‚ÇÅ ‚àà s) (hp‚ÇÇ : dist p‚ÇÇ s.center < s.radius)
    (hp‚ÇÉ : p‚ÇÉ ‚àà s) (hp‚ÇÅp‚ÇÉ : p‚ÇÅ ‚â† p‚ÇÉ) : Sbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ :=
  h.sbtw_of_dist_eq_of_dist_lt hp‚ÇÅ hp‚ÇÇ hp‚ÇÉ hp‚ÇÅp‚ÇÉ
#align euclidean_geometry.sbtw_of_collinear_of_dist_center_lt_radius EuclideanGeometry.sbtw_of_collinear_of_dist_center_lt_radius

end EuclideanSpace

end EuclideanGeometry
