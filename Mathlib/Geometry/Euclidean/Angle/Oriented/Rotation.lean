/-
Copyright (c) 2022 Joseph Myers. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Myers, Heather Macbeth
-/
import Mathlib.Analysis.SpecialFunctions.Complex.Circle
import Mathlib.Geometry.Euclidean.Angle.Oriented.Basic

/-!
# Rotations by oriented angles.

This file defines rotations by oriented angles in real inner product spaces.

## Main definitions

* `Orientation.rotation` is the rotation by an oriented angle with respect to an orientation.

-/


noncomputable section

open Module Complex

open scoped Real RealInnerProductSpace ComplexConjugate

namespace Orientation

attribute [local instance] Complex.finrank_real_complex_fact

variable {V V' : Type*}
variable [NormedAddCommGroup V] [NormedAddCommGroup V']
variable [InnerProductSpace ‚Ñù V] [InnerProductSpace ‚Ñù V']
variable [Fact (finrank ‚Ñù V = 2)] [Fact (finrank ‚Ñù V' = 2)] (o : Orientation ‚Ñù V (Fin 2))

local notation "J" => o.rightAngleRotation

/-- Auxiliary construction to build a rotation by the oriented angle `Œ∏`. -/
def rotationAux (Œ∏ : Real.Angle) : V ‚Üí‚Çó·µ¢[‚Ñù] V :=
  LinearMap.isometryOfInner
    (Real.Angle.cos Œ∏ ‚Ä¢ LinearMap.id +
      Real.Angle.sin Œ∏ ‚Ä¢ (LinearIsometryEquiv.toLinearEquiv J).toLinearMap)
    (by
      intro x y
      simp only [RCLike.conj_to_real, id, LinearMap.smul_apply, LinearMap.add_apply,
        LinearMap.id_coe, LinearEquiv.coe_coe, LinearIsometryEquiv.coe_toLinearEquiv,
        Orientation.areaForm_rightAngleRotation_left, Orientation.inner_rightAngleRotation_left,
        Orientation.inner_rightAngleRotation_right, inner_add_left, inner_smul_left,
        inner_add_right, inner_smul_right]
      linear_combination inner (ùïú := ‚Ñù) x y * Œ∏.cos_sq_add_sin_sq)

@[simp]
theorem rotationAux_apply (Œ∏ : Real.Angle) (x : V) :
    o.rotationAux Œ∏ x = Real.Angle.cos Œ∏ ‚Ä¢ x + Real.Angle.sin Œ∏ ‚Ä¢ J x :=
  rfl

/-- A rotation by the oriented angle `Œ∏`. -/
def rotation (Œ∏ : Real.Angle) : V ‚âÉ‚Çó·µ¢[‚Ñù] V :=
  LinearIsometryEquiv.ofLinearIsometry (o.rotationAux Œ∏)
    (Real.Angle.cos Œ∏ ‚Ä¢ LinearMap.id -
      Real.Angle.sin Œ∏ ‚Ä¢ (LinearIsometryEquiv.toLinearEquiv J).toLinearMap)
    (by
      ext x
      convert congr_arg (fun t : ‚Ñù => t ‚Ä¢ x) Œ∏.cos_sq_add_sin_sq using 1
      ¬∑ simp only [o.rightAngleRotation_rightAngleRotation, o.rotationAux_apply,
          Function.comp_apply, id, LinearEquiv.coe_coe, LinearIsometry.coe_toLinearMap,
          LinearIsometryEquiv.coe_toLinearEquiv, map_smul, map_sub, LinearMap.coe_comp,
          LinearMap.id_coe, LinearMap.smul_apply, LinearMap.sub_apply]
        module
      ¬∑ simp)
    (by
      ext x
      convert congr_arg (fun t : ‚Ñù => t ‚Ä¢ x) Œ∏.cos_sq_add_sin_sq using 1
      ¬∑ simp only [o.rightAngleRotation_rightAngleRotation, o.rotationAux_apply,
          Function.comp_apply, id, LinearEquiv.coe_coe, LinearIsometry.coe_toLinearMap,
          LinearIsometryEquiv.coe_toLinearEquiv, map_add, map_smul, LinearMap.coe_comp,
          LinearMap.id_coe, LinearMap.smul_apply, LinearMap.sub_apply]
        module
      ¬∑ simp)

theorem rotation_apply (Œ∏ : Real.Angle) (x : V) :
    o.rotation Œ∏ x = Real.Angle.cos Œ∏ ‚Ä¢ x + Real.Angle.sin Œ∏ ‚Ä¢ J x :=
  rfl

theorem rotation_symm_apply (Œ∏ : Real.Angle) (x : V) :
    (o.rotation Œ∏).symm x = Real.Angle.cos Œ∏ ‚Ä¢ x - Real.Angle.sin Œ∏ ‚Ä¢ J x :=
  rfl

theorem rotation_eq_matrix_toLin (Œ∏ : Real.Angle) {x : V} (hx : x ‚â† 0) :
    (o.rotation Œ∏).toLinearMap =
      Matrix.toLin (o.basisRightAngleRotation x hx) (o.basisRightAngleRotation x hx)
        !![Œ∏.cos, -Œ∏.sin; Œ∏.sin, Œ∏.cos] := by
  apply (o.basisRightAngleRotation x hx).ext
  intro i
  fin_cases i
  ¬∑ rw [Matrix.toLin_self]
    simp [rotation_apply, Fin.sum_univ_succ]
  ¬∑ rw [Matrix.toLin_self]
    simp [rotation_apply, Fin.sum_univ_succ, add_comm]

/-- The determinant of `rotation` (as a linear map) is equal to `1`. -/
@[simp]
theorem det_rotation (Œ∏ : Real.Angle) : LinearMap.det (o.rotation Œ∏).toLinearMap = 1 := by
  haveI : Nontrivial V := nontrivial_of_finrank_eq_succ (@Fact.out (finrank ‚Ñù V = 2) _)
  obtain ‚ü®x, hx‚ü© : ‚àÉ x, x ‚â† (0 : V) := exists_ne (0 : V)
  rw [o.rotation_eq_matrix_toLin Œ∏ hx]
  simpa [sq] using Œ∏.cos_sq_add_sin_sq

/-- The determinant of `rotation` (as a linear equiv) is equal to `1`. -/
@[simp]
theorem linearEquiv_det_rotation (Œ∏ : Real.Angle) :
    LinearEquiv.det (o.rotation Œ∏).toLinearEquiv = 1 :=
  Units.ext <| by
    -- Porting note: Lean can't see through `LinearEquiv.coe_det` and needed the rewrite
    -- in mathlib3 this was just `units.ext <| o.det_rotation Œ∏`
    simpa only [LinearEquiv.coe_det, Units.val_one] using o.det_rotation Œ∏

/-- The inverse of `rotation` is rotation by the negation of the angle. -/
@[simp]
theorem rotation_symm (Œ∏ : Real.Angle) : (o.rotation Œ∏).symm = o.rotation (-Œ∏) := by
  ext; simp [o.rotation_apply, o.rotation_symm_apply, sub_eq_add_neg]

/-- Rotation by 0 is the identity. -/
@[simp]
theorem rotation_zero : o.rotation 0 = LinearIsometryEquiv.refl ‚Ñù V := by ext; simp [rotation]

/-- Rotation by œÄ is negation. -/
@[simp]
theorem rotation_pi : o.rotation œÄ = LinearIsometryEquiv.neg ‚Ñù := by
  ext x
  simp [rotation]

/-- Rotation by œÄ is negation. -/
theorem rotation_pi_apply (x : V) : o.rotation œÄ x = -x := by simp

/-- Rotation by œÄ / 2 is the "right-angle-rotation" map `J`. -/
theorem rotation_pi_div_two : o.rotation (œÄ / 2 : ‚Ñù) = J := by
  ext x
  simp [rotation]

/-- Rotating twice is equivalent to rotating by the sum of the angles. -/
@[simp]
theorem rotation_rotation (Œ∏‚ÇÅ Œ∏‚ÇÇ : Real.Angle) (x : V) :
    o.rotation Œ∏‚ÇÅ (o.rotation Œ∏‚ÇÇ x) = o.rotation (Œ∏‚ÇÅ + Œ∏‚ÇÇ) x := by
  simp only [o.rotation_apply, Real.Angle.cos_add, Real.Angle.sin_add, LinearIsometryEquiv.map_add,
    LinearIsometryEquiv.trans_apply, map_smul, rightAngleRotation_rightAngleRotation]
  module

/-- Rotating twice is equivalent to rotating by the sum of the angles. -/
@[simp]
theorem rotation_trans (Œ∏‚ÇÅ Œ∏‚ÇÇ : Real.Angle) :
    (o.rotation Œ∏‚ÇÅ).trans (o.rotation Œ∏‚ÇÇ) = o.rotation (Œ∏‚ÇÇ + Œ∏‚ÇÅ) :=
  LinearIsometryEquiv.ext fun _ => by rw [‚Üê rotation_rotation, LinearIsometryEquiv.trans_apply]

/-- Rotating the first of two vectors by `Œ∏` scales their Kahler form by `cos Œ∏ - sin Œ∏ * I`. -/
@[simp]
theorem kahler_rotation_left (x y : V) (Œ∏ : Real.Angle) :
    o.kahler (o.rotation Œ∏ x) y = conj (Œ∏.toCircle : ‚ÑÇ) * o.kahler x y := by
  -- Porting note: this needed the `Complex.conj_ofReal` instead of `RCLike.conj_ofReal`;
  -- I believe this is because the respective coercions are no longer defeq, and
  -- `Real.Angle.coe_toCircle` uses the `Complex` version.
  simp only [o.rotation_apply, map_add, map_mul, LinearMap.map_smul‚Çõ‚Çó, RingHom.id_apply,
    LinearMap.add_apply, LinearMap.smul_apply, real_smul, kahler_rightAngleRotation_left,
    Real.Angle.coe_toCircle, Complex.conj_ofReal, conj_I]
  ring

/-- Negating a rotation is equivalent to rotation by œÄ plus the angle. -/
theorem neg_rotation (Œ∏ : Real.Angle) (x : V) : -o.rotation Œ∏ x = o.rotation (œÄ + Œ∏) x := by
  rw [‚Üê o.rotation_pi_apply, rotation_rotation]

/-- Negating a rotation by -œÄ / 2 is equivalent to rotation by œÄ / 2. -/
@[simp]
theorem neg_rotation_neg_pi_div_two (x : V) :
    -o.rotation (-œÄ / 2 : ‚Ñù) x = o.rotation (œÄ / 2 : ‚Ñù) x := by
  rw [neg_rotation, ‚Üê Real.Angle.coe_add, neg_div, ‚Üê sub_eq_add_neg, sub_half]

/-- Negating a rotation by œÄ / 2 is equivalent to rotation by -œÄ / 2. -/
theorem neg_rotation_pi_div_two (x : V) : -o.rotation (œÄ / 2 : ‚Ñù) x = o.rotation (-œÄ / 2 : ‚Ñù) x :=
  (neg_eq_iff_eq_neg.mp <| o.neg_rotation_neg_pi_div_two _).symm

/-- Rotating the first of two vectors by `Œ∏` scales their Kahler form by `cos (-Œ∏) + sin (-Œ∏) * I`.
-/
theorem kahler_rotation_left' (x y : V) (Œ∏ : Real.Angle) :
    o.kahler (o.rotation Œ∏ x) y = (-Œ∏).toCircle * o.kahler x y := by
  simp only [Real.Angle.toCircle_neg, Circle.coe_inv_eq_conj, kahler_rotation_left]

/-- Rotating the second of two vectors by `Œ∏` scales their Kahler form by `cos Œ∏ + sin Œ∏ * I`. -/
@[simp]
theorem kahler_rotation_right (x y : V) (Œ∏ : Real.Angle) :
    o.kahler x (o.rotation Œ∏ y) = Œ∏.toCircle * o.kahler x y := by
  simp only [o.rotation_apply, map_add, LinearMap.map_smul‚Çõ‚Çó, RingHom.id_apply, real_smul,
    kahler_rightAngleRotation_right, Real.Angle.coe_toCircle]
  ring

/-- Rotating the first vector by `Œ∏` subtracts `Œ∏` from the angle between two vectors. -/
@[simp]
theorem oangle_rotation_left {x y : V} (hx : x ‚â† 0) (hy : y ‚â† 0) (Œ∏ : Real.Angle) :
    o.oangle (o.rotation Œ∏ x) y = o.oangle x y - Œ∏ := by
  simp only [oangle, o.kahler_rotation_left']
  rw [Complex.arg_mul_coe_angle, Real.Angle.arg_toCircle]
  ¬∑ abel
  ¬∑ exact Circle.coe_ne_zero _
  ¬∑ exact o.kahler_ne_zero hx hy

/-- Rotating the second vector by `Œ∏` adds `Œ∏` to the angle between two vectors. -/
@[simp]
theorem oangle_rotation_right {x y : V} (hx : x ‚â† 0) (hy : y ‚â† 0) (Œ∏ : Real.Angle) :
    o.oangle x (o.rotation Œ∏ y) = o.oangle x y + Œ∏ := by
  simp only [oangle, o.kahler_rotation_right]
  rw [Complex.arg_mul_coe_angle, Real.Angle.arg_toCircle]
  ¬∑ abel
  ¬∑ exact Circle.coe_ne_zero _
  ¬∑ exact o.kahler_ne_zero hx hy

/-- The rotation of a vector by `Œ∏` has an angle of `-Œ∏` from that vector. -/
@[simp]
theorem oangle_rotation_self_left {x : V} (hx : x ‚â† 0) (Œ∏ : Real.Angle) :
    o.oangle (o.rotation Œ∏ x) x = -Œ∏ := by simp [hx]

/-- A vector has an angle of `Œ∏` from the rotation of that vector by `Œ∏`. -/
@[simp]
theorem oangle_rotation_self_right {x : V} (hx : x ‚â† 0) (Œ∏ : Real.Angle) :
    o.oangle x (o.rotation Œ∏ x) = Œ∏ := by simp [hx]

/-- Rotating the first vector by the angle between the two vectors results in an angle of 0. -/
@[simp]
theorem oangle_rotation_oangle_left (x y : V) : o.oangle (o.rotation (o.oangle x y) x) y = 0 := by
  by_cases hx : x = 0
  ¬∑ simp [hx]
  ¬∑ by_cases hy : y = 0
    ¬∑ simp [hy]
    ¬∑ simp [hx, hy]

/-- Rotating the first vector by the angle between the two vectors and swapping the vectors
results in an angle of 0. -/
@[simp]
theorem oangle_rotation_oangle_right (x y : V) : o.oangle y (o.rotation (o.oangle x y) x) = 0 := by
  rw [oangle_rev]
  simp

/-- Rotating both vectors by the same angle does not change the angle between those vectors. -/
@[simp]
theorem oangle_rotation (x y : V) (Œ∏ : Real.Angle) :
    o.oangle (o.rotation Œ∏ x) (o.rotation Œ∏ y) = o.oangle x y := by
  by_cases hx : x = 0 <;> by_cases hy : y = 0 <;> simp [hx, hy]

/-- A rotation of a nonzero vector equals that vector if and only if the angle is zero. -/
@[simp]
theorem rotation_eq_self_iff_angle_eq_zero {x : V} (hx : x ‚â† 0) (Œ∏ : Real.Angle) :
    o.rotation Œ∏ x = x ‚Üî Œ∏ = 0 := by
  constructor
  ¬∑ intro h
    rw [eq_comm]
    simpa [hx, h] using o.oangle_rotation_right hx hx Œ∏
  ¬∑ intro h
    simp [h]

/-- A nonzero vector equals a rotation of that vector if and only if the angle is zero. -/
@[simp]
theorem eq_rotation_self_iff_angle_eq_zero {x : V} (hx : x ‚â† 0) (Œ∏ : Real.Angle) :
    x = o.rotation Œ∏ x ‚Üî Œ∏ = 0 := by rw [‚Üê o.rotation_eq_self_iff_angle_eq_zero hx, eq_comm]

/-- A rotation of a vector equals that vector if and only if the vector or the angle is zero. -/
theorem rotation_eq_self_iff (x : V) (Œ∏ : Real.Angle) : o.rotation Œ∏ x = x ‚Üî x = 0 ‚à® Œ∏ = 0 := by
  by_cases h : x = 0 <;> simp [h]

/-- A vector equals a rotation of that vector if and only if the vector or the angle is zero. -/
theorem eq_rotation_self_iff (x : V) (Œ∏ : Real.Angle) : x = o.rotation Œ∏ x ‚Üî x = 0 ‚à® Œ∏ = 0 := by
  rw [‚Üê rotation_eq_self_iff, eq_comm]

/-- Rotating a vector by the angle to another vector gives the second vector if and only if the
norms are equal. -/
@[simp]
theorem rotation_oangle_eq_iff_norm_eq (x y : V) : o.rotation (o.oangle x y) x = y ‚Üî ‚Äñx‚Äñ = ‚Äñy‚Äñ := by
  constructor
  ¬∑ intro h
    rw [‚Üê h, LinearIsometryEquiv.norm_map]
  ¬∑ intro h
    rw [o.eq_iff_oangle_eq_zero_of_norm_eq] <;> simp [h]

/-- The angle between two nonzero vectors is `Œ∏` if and only if the second vector is the first
rotated by `Œ∏` and scaled by the ratio of the norms. -/
theorem oangle_eq_iff_eq_norm_div_norm_smul_rotation_of_ne_zero {x y : V} (hx : x ‚â† 0) (hy : y ‚â† 0)
    (Œ∏ : Real.Angle) : o.oangle x y = Œ∏ ‚Üî y = (‚Äñy‚Äñ / ‚Äñx‚Äñ) ‚Ä¢ o.rotation Œ∏ x := by
  have hp := div_pos (norm_pos_iff.2 hy) (norm_pos_iff.2 hx)
  constructor
  ¬∑ rintro rfl
    rw [‚Üê LinearIsometryEquiv.map_smul, ‚Üê o.oangle_smul_left_of_pos x y hp, eq_comm,
      rotation_oangle_eq_iff_norm_eq, norm_smul, Real.norm_of_nonneg hp.le,
      div_mul_cancel‚ÇÄ _ (norm_ne_zero_iff.2 hx)]
  ¬∑ intro hye
    rw [hye, o.oangle_smul_right_of_pos _ _ hp, o.oangle_rotation_self_right hx]

/-- The angle between two nonzero vectors is `Œ∏` if and only if the second vector is the first
rotated by `Œ∏` and scaled by a positive real. -/
theorem oangle_eq_iff_eq_pos_smul_rotation_of_ne_zero {x y : V} (hx : x ‚â† 0) (hy : y ‚â† 0)
    (Œ∏ : Real.Angle) : o.oangle x y = Œ∏ ‚Üî ‚àÉ r : ‚Ñù, 0 < r ‚àß y = r ‚Ä¢ o.rotation Œ∏ x := by
  constructor
  ¬∑ intro h
    rw [o.oangle_eq_iff_eq_norm_div_norm_smul_rotation_of_ne_zero hx hy] at h
    exact ‚ü®‚Äñy‚Äñ / ‚Äñx‚Äñ, div_pos (norm_pos_iff.2 hy) (norm_pos_iff.2 hx), h‚ü©
  ¬∑ rintro ‚ü®r, hr, rfl‚ü©
    rw [o.oangle_smul_right_of_pos _ _ hr, o.oangle_rotation_self_right hx]

/-- The angle between two vectors is `Œ∏` if and only if they are nonzero and the second vector
is the first rotated by `Œ∏` and scaled by the ratio of the norms, or `Œ∏` and at least one of the
vectors are zero. -/
theorem oangle_eq_iff_eq_norm_div_norm_smul_rotation_or_eq_zero {x y : V} (Œ∏ : Real.Angle) :
    o.oangle x y = Œ∏ ‚Üî
      x ‚â† 0 ‚àß y ‚â† 0 ‚àß y = (‚Äñy‚Äñ / ‚Äñx‚Äñ) ‚Ä¢ o.rotation Œ∏ x ‚à® Œ∏ = 0 ‚àß (x = 0 ‚à® y = 0) := by
  by_cases hx : x = 0
  ¬∑ simp [hx, eq_comm]
  ¬∑ by_cases hy : y = 0
    ¬∑ simp [hy, eq_comm]
    ¬∑ rw [o.oangle_eq_iff_eq_norm_div_norm_smul_rotation_of_ne_zero hx hy]
      simp [hx, hy]

/-- The angle between two vectors is `Œ∏` if and only if they are nonzero and the second vector
is the first rotated by `Œ∏` and scaled by a positive real, or `Œ∏` and at least one of the
vectors are zero. -/
theorem oangle_eq_iff_eq_pos_smul_rotation_or_eq_zero {x y : V} (Œ∏ : Real.Angle) :
    o.oangle x y = Œ∏ ‚Üî
      (x ‚â† 0 ‚àß y ‚â† 0 ‚àß ‚àÉ r : ‚Ñù, 0 < r ‚àß y = r ‚Ä¢ o.rotation Œ∏ x) ‚à® Œ∏ = 0 ‚àß (x = 0 ‚à® y = 0) := by
  by_cases hx : x = 0
  ¬∑ simp [hx, eq_comm]
  ¬∑ by_cases hy : y = 0
    ¬∑ simp [hy, eq_comm]
    ¬∑ rw [o.oangle_eq_iff_eq_pos_smul_rotation_of_ne_zero hx hy]
      simp [hx, hy]

/-- Any linear isometric equivalence in `V` with positive determinant is `rotation`. -/
theorem exists_linearIsometryEquiv_eq_of_det_pos {f : V ‚âÉ‚Çó·µ¢[‚Ñù] V}
    (hd : 0 < LinearMap.det (f.toLinearEquiv : V ‚Üí‚Çó[‚Ñù] V)) :
    ‚àÉ Œ∏ : Real.Angle, f = o.rotation Œ∏ := by
  haveI : Nontrivial V := nontrivial_of_finrank_eq_succ (@Fact.out (finrank ‚Ñù V = 2) _)
  obtain ‚ü®x, hx‚ü© : ‚àÉ x, x ‚â† (0 : V) := exists_ne (0 : V)
  use o.oangle x (f x)
  apply LinearIsometryEquiv.toLinearEquiv_injective
  apply LinearEquiv.toLinearMap_injective
  apply (o.basisRightAngleRotation x hx).ext
  intro i
  symm
  fin_cases i
  ¬∑ simp
  have : o.oangle (J x) (f (J x)) = o.oangle x (f x) := by
    simp only [oangle, o.linearIsometryEquiv_comp_rightAngleRotation f hd,
      o.kahler_comp_rightAngleRotation]
  simp [‚Üê this]

theorem rotation_map (Œ∏ : Real.Angle) (f : V ‚âÉ‚Çó·µ¢[‚Ñù] V') (x : V') :
    (Orientation.map (Fin 2) f.toLinearEquiv o).rotation Œ∏ x = f (o.rotation Œ∏ (f.symm x)) := by
  simp [rotation_apply, o.rightAngleRotation_map]

@[simp]
protected theorem _root_.Complex.rotation (Œ∏ : Real.Angle) (z : ‚ÑÇ) :
    Complex.orientation.rotation Œ∏ z = Œ∏.toCircle * z := by
  simp only [rotation_apply, Complex.rightAngleRotation, Real.Angle.coe_toCircle, real_smul]
  ring

/-- Rotation in an oriented real inner product space of dimension 2 can be evaluated in terms of a
complex-number representation of the space. -/
theorem rotation_map_complex (Œ∏ : Real.Angle) (f : V ‚âÉ‚Çó·µ¢[‚Ñù] ‚ÑÇ)
    (hf : Orientation.map (Fin 2) f.toLinearEquiv o = Complex.orientation) (x : V) :
    f (o.rotation Œ∏ x) = Œ∏.toCircle * f x := by
  rw [‚Üê Complex.rotation, ‚Üê hf, o.rotation_map, LinearIsometryEquiv.symm_apply_apply]

/-- Negating the orientation negates the angle in `rotation`. -/
theorem rotation_neg_orientation_eq_neg (Œ∏ : Real.Angle) : (-o).rotation Œ∏ = o.rotation (-Œ∏) :=
  LinearIsometryEquiv.ext <| by simp [rotation_apply]

/-- The inner product between a `œÄ / 2` rotation of a vector and that vector is zero. -/
@[simp]
theorem inner_rotation_pi_div_two_left (x : V) : ‚ü™o.rotation (œÄ / 2 : ‚Ñù) x, x‚ü´ = 0 := by
  rw [rotation_pi_div_two, inner_rightAngleRotation_self]

/-- The inner product between a vector and a `œÄ / 2` rotation of that vector is zero. -/
@[simp]
theorem inner_rotation_pi_div_two_right (x : V) : ‚ü™x, o.rotation (œÄ / 2 : ‚Ñù) x‚ü´ = 0 := by
  rw [real_inner_comm, inner_rotation_pi_div_two_left]

/-- The inner product between a multiple of a `œÄ / 2` rotation of a vector and that vector is
zero. -/
@[simp]
theorem inner_smul_rotation_pi_div_two_left (x : V) (r : ‚Ñù) :
    ‚ü™r ‚Ä¢ o.rotation (œÄ / 2 : ‚Ñù) x, x‚ü´ = 0 := by
  rw [inner_smul_left, inner_rotation_pi_div_two_left, mul_zero]

/-- The inner product between a vector and a multiple of a `œÄ / 2` rotation of that vector is
zero. -/
@[simp]
theorem inner_smul_rotation_pi_div_two_right (x : V) (r : ‚Ñù) :
    ‚ü™x, r ‚Ä¢ o.rotation (œÄ / 2 : ‚Ñù) x‚ü´ = 0 := by
  rw [real_inner_comm, inner_smul_rotation_pi_div_two_left]

/-- The inner product between a `œÄ / 2` rotation of a vector and a multiple of that vector is
zero. -/
@[simp]
theorem inner_rotation_pi_div_two_left_smul (x : V) (r : ‚Ñù) :
    ‚ü™o.rotation (œÄ / 2 : ‚Ñù) x, r ‚Ä¢ x‚ü´ = 0 := by
  rw [inner_smul_right, inner_rotation_pi_div_two_left, mul_zero]

/-- The inner product between a multiple of a vector and a `œÄ / 2` rotation of that vector is
zero. -/
@[simp]
theorem inner_rotation_pi_div_two_right_smul (x : V) (r : ‚Ñù) :
    ‚ü™r ‚Ä¢ x, o.rotation (œÄ / 2 : ‚Ñù) x‚ü´ = 0 := by
  rw [real_inner_comm, inner_rotation_pi_div_two_left_smul]

/-- The inner product between a multiple of a `œÄ / 2` rotation of a vector and a multiple of
that vector is zero. -/
@[simp]
theorem inner_smul_rotation_pi_div_two_smul_left (x : V) (r‚ÇÅ r‚ÇÇ : ‚Ñù) :
    ‚ü™r‚ÇÅ ‚Ä¢ o.rotation (œÄ / 2 : ‚Ñù) x, r‚ÇÇ ‚Ä¢ x‚ü´ = 0 := by
  rw [inner_smul_right, inner_smul_rotation_pi_div_two_left, mul_zero]

/-- The inner product between a multiple of a vector and a multiple of a `œÄ / 2` rotation of
that vector is zero. -/
@[simp]
theorem inner_smul_rotation_pi_div_two_smul_right (x : V) (r‚ÇÅ r‚ÇÇ : ‚Ñù) :
    ‚ü™r‚ÇÇ ‚Ä¢ x, r‚ÇÅ ‚Ä¢ o.rotation (œÄ / 2 : ‚Ñù) x‚ü´ = 0 := by
  rw [real_inner_comm, inner_smul_rotation_pi_div_two_smul_left]

/-- The inner product between two vectors is zero if and only if the first vector is zero or
the second is a multiple of a `œÄ / 2` rotation of that vector. -/
theorem inner_eq_zero_iff_eq_zero_or_eq_smul_rotation_pi_div_two {x y : V} :
    ‚ü™x, y‚ü´ = 0 ‚Üî x = 0 ‚à® ‚àÉ r : ‚Ñù, r ‚Ä¢ o.rotation (œÄ / 2 : ‚Ñù) x = y := by
  rw [‚Üê o.eq_zero_or_oangle_eq_iff_inner_eq_zero]
  refine ‚ü®fun h => ?_, fun h => ?_‚ü©
  ¬∑ rcases h with (rfl | rfl | h | h)
    ¬∑ exact Or.inl rfl
    ¬∑ exact Or.inr ‚ü®0, zero_smul _ _‚ü©
    ¬∑ obtain ‚ü®r, _, rfl‚ü© :=
        (o.oangle_eq_iff_eq_pos_smul_rotation_of_ne_zero (o.left_ne_zero_of_oangle_eq_pi_div_two h)
          (o.right_ne_zero_of_oangle_eq_pi_div_two h) _).1 h
      exact Or.inr ‚ü®r, rfl‚ü©
    ¬∑ obtain ‚ü®r, _, rfl‚ü© :=
        (o.oangle_eq_iff_eq_pos_smul_rotation_of_ne_zero
          (o.left_ne_zero_of_oangle_eq_neg_pi_div_two h)
          (o.right_ne_zero_of_oangle_eq_neg_pi_div_two h) _).1 h
      refine Or.inr ‚ü®-r, ?_‚ü©
      rw [neg_smul, ‚Üê smul_neg, o.neg_rotation_pi_div_two]
  ¬∑ rcases h with (rfl | ‚ü®r, rfl‚ü©)
    ¬∑ exact Or.inl rfl
    ¬∑ by_cases hx : x = 0; ¬∑ exact Or.inl hx
      rcases lt_trichotomy r 0 with (hr | rfl | hr)
      ¬∑ refine Or.inr (Or.inr (Or.inr ?_))
        rw [o.oangle_smul_right_of_neg _ _ hr, o.neg_rotation_pi_div_two,
          o.oangle_rotation_self_right hx]
      ¬∑ exact Or.inr (Or.inl (zero_smul _ _))
      ¬∑ refine Or.inr (Or.inr (Or.inl ?_))
        rw [o.oangle_smul_right_of_pos _ _ hr, o.oangle_rotation_self_right hx]

end Orientation
