/-
Copyright (c) 2022 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import Mathlib.Analysis.NormedSpace.lpSpace
import Mathlib.Analysis.NormedSpace.PiLp
import Mathlib.Topology.ContinuousFunction.Bounded

#align_import analysis.normed_space.lp_equiv from "leanprover-community/mathlib"@"6afc9b06856ad973f6a2619e3e8a0a8d537a58f2"

/-!
# Equivalences among $L^p$ spaces

In this file we collect a variety of equivalences among various $L^p$ spaces.  In particular,
when `Œ±` is a `Fintype`, given `E : Œ± ‚Üí Type u` and `p : ‚Ñù‚â•0‚àû`, there is a natural linear isometric
equivalence `lpPiLp‚Çó·µ¢‚Çì : lp E p ‚âÉ‚Çó·µ¢ PiLp p E`. In addition, when `Œ±` is a discrete topological
space, the bounded continuous functions `Œ± ‚Üí·µá Œ≤` correspond exactly to `lp (fun _ ‚Ü¶ Œ≤) ‚àû`.
Here there can be more structure, including ring and algebra structures,
and we implement these equivalences accordingly as well.

We keep this as a separate file so that the various $L^p$ space files don't import the others.

Recall that `PiLp` is just a type synonym for `Œ† i, E i` but given a different metric and norm
structure, although the topological, uniform and bornological structures coincide definitionally.
These structures are only defined on `PiLp` for `Fintype Œ±`, so there are no issues of convergence
to consider.

While `PreLp` is also a type synonym for `Œ† i, E i`, it allows for infinite index types. On this
type there is a predicate `Mem‚Ñìp` which says that the relevant `p`-norm is finite and `lp E p` is
the subtype of `PreLp` satisfying `Mem‚Ñìp`.

## TODO

* Equivalence between `lp` and `MeasureTheory.Lp`, for `f : Œ± ‚Üí E` (i.e., functions rather than
  pi-types) and the counting measure on `Œ±`

-/


open scoped ENNReal

section LpPiLp

set_option linter.uppercaseLean3 false

variable {Œ± : Type*} {E : Œ± ‚Üí Type*} [‚àÄ i, NormedAddCommGroup (E i)] {p : ‚Ñù‚â•0‚àû}

section Finite

variable [Finite Œ±]

/-- When `Œ±` is `Finite`, every `f : PreLp E p` satisfies `Mem‚Ñìp f p`. -/
theorem Mem‚Ñìp.all (f : ‚àÄ i, E i) : Mem‚Ñìp f p := by
  rcases p.trichotomy with (rfl | rfl | _h)
  ¬∑ exact mem‚Ñìp_zero_iff.mpr { i : Œ± | f i ‚â† 0 }.toFinite
  ¬∑ exact mem‚Ñìp_infty_iff.mpr (Set.Finite.bddAbove (Set.range fun i : Œ± ‚Ü¶ ‚Äñf i‚Äñ).toFinite)
  ¬∑ cases nonempty_fintype Œ±; exact mem‚Ñìp_gen ‚ü®Finset.univ.sum _, hasSum_fintype _‚ü©
#align mem_‚Ñìp.all Mem‚Ñìp.all

/-- The canonical `Equiv` between `lp E p ‚âÉ PiLp p E` when `E : Œ± ‚Üí Type u` with `[Finite Œ±]`. -/
def Equiv.lpPiLp : lp E p ‚âÉ PiLp p E where
  toFun f := ‚áëf
  invFun f := ‚ü®f, Mem‚Ñìp.all f‚ü©
  left_inv _f := rfl
  right_inv _f := rfl
#align equiv.lp_pi_Lp Equiv.lpPiLp

theorem coe_equiv_lpPiLp (f : lp E p) : Equiv.lpPiLp f = ‚áëf :=
  rfl
#align coe_equiv_lp_pi_Lp coe_equiv_lpPiLp

theorem coe_equiv_lpPiLp_symm (f : PiLp p E) : (Equiv.lpPiLp.symm f : ‚àÄ i, E i) = f :=
  rfl
#align coe_equiv_lp_pi_Lp_symm coe_equiv_lpPiLp_symm

/-- The canonical `AddEquiv` between `lp E p` and `PiLp p E` when `E : Œ± ‚Üí Type u` with
`[Fintype Œ±]`. -/
def AddEquiv.lpPiLp : lp E p ‚âÉ+ PiLp p E :=
  { Equiv.lpPiLp with map_add' := fun _f _g ‚Ü¶ rfl }
#align add_equiv.lp_pi_Lp AddEquiv.lpPiLp

theorem coe_addEquiv_lpPiLp  (f : lp E p) : AddEquiv.lpPiLp f = ‚áëf :=
  rfl
#align coe_add_equiv_lp_pi_Lp coe_addEquiv_lpPiLp

theorem coe_addEquiv_lpPiLp_symm (f : PiLp p E) :
    (AddEquiv.lpPiLp.symm f : ‚àÄ i, E i) = f :=
  rfl
#align coe_add_equiv_lp_pi_Lp_symm coe_addEquiv_lpPiLp_symm

end Finite

theorem equiv_lpPiLp_norm [Fintype Œ±] (f : lp E p) : ‚ÄñEquiv.lpPiLp f‚Äñ = ‚Äñf‚Äñ := by
  rcases p.trichotomy with (rfl | rfl | h)
  ¬∑ simp [Equiv.lpPiLp, PiLp.norm_eq_card, lp.norm_eq_card_dsupport]
  ¬∑ rw [PiLp.norm_eq_ciSup, lp.norm_eq_ciSup]; rfl
  ¬∑ rw [PiLp.norm_eq_sum h, lp.norm_eq_tsum_rpow h, tsum_fintype]; rfl
#align equiv_lp_pi_Lp_norm equiv_lpPiLp_norm

section Equiv‚Çó·µ¢

variable [Fintype Œ±] (ùïú : Type*) [NontriviallyNormedField ùïú] [‚àÄ i, NormedSpace ùïú (E i)]
variable (E)
/- porting note: Lean is unable to work with `lpPiLp‚Çó·µ¢` if `E` is implicit without
annotating with `(E := E)` everywhere, so we just make it explicit. This file has no
dependencies. -/

/-- The canonical `LinearIsometryEquiv` between `lp E p` and `PiLp p E` when `E : Œ± ‚Üí Type u`
with `[Fintype Œ±]` and `[Fact (1 ‚â§ p)]`. -/
noncomputable def lpPiLp‚Çó·µ¢ [Fact (1 ‚â§ p)] : lp E p ‚âÉ‚Çó·µ¢[ùïú] PiLp p E :=
  { AddEquiv.lpPiLp with
    map_smul' := fun _k _f ‚Ü¶ rfl
    norm_map' := equiv_lpPiLp_norm }
#align lp_pi_Lp‚Çó·µ¢ lpPiLp‚Çó·µ¢‚Çì
-- Porting note: `#align`ed with an `‚Çì` because `E` is now explicit, see above

variable {ùïú E}

theorem coe_lpPiLp‚Çó·µ¢ [Fact (1 ‚â§ p)] (f : lp E p) : (lpPiLp‚Çó·µ¢ E ùïú f : ‚àÄ i, E i) = ‚áëf :=
  rfl
#align coe_lp_pi_Lp‚Çó·µ¢ coe_lpPiLp‚Çó·µ¢

theorem coe_lpPiLp‚Çó·µ¢_symm [Fact (1 ‚â§ p)] (f : PiLp p E) :
    ((lpPiLp‚Çó·µ¢ E ùïú).symm f : ‚àÄ i, E i) = f :=
  rfl
#align coe_lp_pi_Lp‚Çó·µ¢_symm coe_lpPiLp‚Çó·µ¢_symm

end Equiv‚Çó·µ¢

end LpPiLp

section LpBCF

open scoped BoundedContinuousFunction

open BoundedContinuousFunction

-- note: `R` and `A` are explicit because otherwise Lean has elaboration problems
variable {Œ± E : Type*} (R A ùïú : Type*) [TopologicalSpace Œ±] [DiscreteTopology Œ±]
variable [NormedRing A] [NormOneClass A] [NontriviallyNormedField ùïú] [NormedAlgebra ùïú A]
variable [NormedAddCommGroup E] [NormedSpace ùïú E] [NonUnitalNormedRing R]

section NormedAddCommGroup

/-- The canonical map between `lp (fun _ : Œ± ‚Ü¶ E) ‚àû` and `Œ± ‚Üí·µá E` as an `AddEquiv`. -/
noncomputable def AddEquiv.lpBCF : lp (fun _ : Œ± ‚Ü¶ E) ‚àû ‚âÉ+ (Œ± ‚Üí·µá E) where
  toFun f := ofNormedAddCommGroupDiscrete f ‚Äñf‚Äñ <| le_ciSup (mem‚Ñìp_infty_iff.mp f.prop)
  invFun f := ‚ü®‚áëf, f.bddAbove_range_norm_comp‚ü©
  left_inv _f := lp.ext rfl
  right_inv _f := rfl
  map_add' _f _g := rfl
#align add_equiv.lp_bcf AddEquiv.lpBCF

@[deprecated] alias AddEquiv.lpBcf := AddEquiv.lpBCF -- 2024-03-16

theorem coe_addEquiv_lpBCF (f : lp (fun _ : Œ± ‚Ü¶ E) ‚àû) : (AddEquiv.lpBCF f : Œ± ‚Üí E) = f :=
  rfl
#align coe_add_equiv_lp_bcf coe_addEquiv_lpBCF

theorem coe_addEquiv_lpBCF_symm (f : Œ± ‚Üí·µá E) : (AddEquiv.lpBCF.symm f : Œ± ‚Üí E) = f :=
  rfl
#align coe_add_equiv_lp_bcf_symm coe_addEquiv_lpBCF_symm

variable (E)
/- porting note: Lean is unable to work with `lpPiLp‚Çó·µ¢` if `E` is implicit without
annotating with `(E := E)` everywhere, so we just make it explicit. This file has no
dependencies. -/

/-- The canonical map between `lp (fun _ : Œ± ‚Ü¶ E) ‚àû` and `Œ± ‚Üí·µá E` as a `LinearIsometryEquiv`. -/
noncomputable def lpBCF‚Çó·µ¢ : lp (fun _ : Œ± ‚Ü¶ E) ‚àû ‚âÉ‚Çó·µ¢[ùïú] Œ± ‚Üí·µá E :=
  { AddEquiv.lpBCF with
    map_smul' := fun k f ‚Ü¶ rfl
    norm_map' := fun f ‚Ü¶ by simp only [norm_eq_iSup_norm, lp.norm_eq_ciSup]; rfl }
#align lp_bcf‚Çó·µ¢ lpBCF‚Çó·µ¢‚Çì
-- Porting note: `#align`ed with an `‚Çì` because `E` is now explicit, see above

@[deprecated] alias lpBcf‚Çó·µ¢ := lpBCF‚Çó·µ¢ -- 2024-03-16

variable {ùïú E}

theorem coe_lpBCF‚Çó·µ¢ (f : lp (fun _ : Œ± ‚Ü¶ E) ‚àû) : (lpBCF‚Çó·µ¢ E ùïú f : Œ± ‚Üí E) = f :=
  rfl
#align coe_lp_bcf‚Çó·µ¢ coe_lpBCF‚Çó·µ¢

theorem coe_lpBCF‚Çó·µ¢_symm (f : Œ± ‚Üí·µá E) : ((lpBCF‚Çó·µ¢ E ùïú).symm f : Œ± ‚Üí E) = f :=
  rfl
#align coe_lp_bcf‚Çó·µ¢_symm coe_lpBCF‚Çó·µ¢_symm

end NormedAddCommGroup

section RingAlgebra

/-- The canonical map between `lp (fun _ : Œ± ‚Ü¶ R) ‚àû` and `Œ± ‚Üí·µá R` as a `RingEquiv`. -/
noncomputable def RingEquiv.lpBCF : lp (fun _ : Œ± ‚Ü¶ R) ‚àû ‚âÉ+* (Œ± ‚Üí·µá R) :=
  { @AddEquiv.lpBCF _ R _ _ _ with
    map_mul' := fun _f _g => rfl }
#align ring_equiv.lp_bcf RingEquiv.lpBCF

@[deprecated] alias RingEquiv.lpBcf := RingEquiv.lpBCF -- 2024-03-16

variable {R}

theorem coe_ringEquiv_lpBCF (f : lp (fun _ : Œ± ‚Ü¶ R) ‚àû) : (RingEquiv.lpBCF R f : Œ± ‚Üí R) = f :=
  rfl
#align coe_ring_equiv_lp_bcf coe_ringEquiv_lpBCF

theorem coe_ringEquiv_lpBCF_symm (f : Œ± ‚Üí·µá R) : ((RingEquiv.lpBCF R).symm f : Œ± ‚Üí R) = f :=
  rfl
#align coe_ring_equiv_lp_bcf_symm coe_ringEquiv_lpBCF_symm

variable (Œ±)

-- even `Œ±` needs to be explicit here for elaboration
-- the `NormOneClass A` shouldn't really be necessary, but currently it is for
-- `one_mem‚Ñìp_infty` to get the `Ring` instance on `lp`.
/-- The canonical map between `lp (fun _ : Œ± ‚Ü¶ A) ‚àû` and `Œ± ‚Üí·µá A` as an `AlgEquiv`. -/
noncomputable def AlgEquiv.lpBCF : lp (fun _ : Œ± ‚Ü¶ A) ‚àû ‚âÉ‚Çê[ùïú] Œ± ‚Üí·µá A :=
  { RingEquiv.lpBCF A with commutes' := fun _k ‚Ü¶ rfl }
#align alg_equiv.lp_bcf AlgEquiv.lpBCF

@[deprecated] alias AlgEquiv.lpBcf := AlgEquiv.lpBCF -- 2024-03-16

variable {Œ± A ùïú}

theorem coe_algEquiv_lpBCF (f : lp (fun _ : Œ± ‚Ü¶ A) ‚àû) : (AlgEquiv.lpBCF Œ± A ùïú f : Œ± ‚Üí A) = f :=
  rfl
#align coe_alg_equiv_lp_bcf coe_algEquiv_lpBCF

theorem coe_algEquiv_lpBCF_symm (f : Œ± ‚Üí·µá A) : ((AlgEquiv.lpBCF Œ± A ùïú).symm f : Œ± ‚Üí A) = f :=
  rfl
#align coe_alg_equiv_lp_bcf_symm coe_algEquiv_lpBCF_symm

end RingAlgebra

end LpBCF
