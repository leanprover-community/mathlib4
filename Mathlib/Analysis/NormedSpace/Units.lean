/-
Copyright (c) 2020 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth

! This file was ported from Lean 3 source module analysis.normed_space.units
! leanprover-community/mathlib commit 9a59dcb7a2d06bf55da57b9030169219980660cd
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Topology.Algebra.Ring.Ideal
import Mathbin.Analysis.SpecificLimits.Normed

/-!
# The group of units of a complete normed ring

This file contains the basic theory for the group of units (invertible elements) of a complete
normed ring (Banach algebras being a notable special case).

## Main results

The constructions `one_sub`, `add` and `unit_of_nearby` state, in varying forms, that perturbations
of a unit are units.  The latter two are not stated in their optimal form; more precise versions
would use the spectral radius.

The first main result is `is_open`:  the group of units of a complete normed ring is an open subset
of the ring.

The function `inverse` (defined in `algebra.ring`), for a ring `R`, sends `a : R` to `a‚Åª¬π` if `a` is
a unit and 0 if not.  The other major results of this file (notably `inverse_add`,
`inverse_add_norm` and `inverse_add_norm_diff_nth_order`) cover the asymptotic properties of
`inverse (x + t)` as `t ‚Üí 0`.

-/


noncomputable section

open Topology

variable {R : Type _} [NormedRing R] [CompleteSpace R]

namespace Units

/-- In a complete normed ring, a perturbation of `1` by an element `t` of distance less than `1`
from `1` is a unit.  Here we construct its `units` structure.  -/
@[simps coe]
def oneSub (t : R) (h : ‚Äñt‚Äñ < 1) : RÀ£ where
  val := 1 - t
  inv := ‚àë' n : ‚Ñï, t ^ n
  val_inv := mul_neg_geom_series t h
  inv_val := geom_series_mul_neg t h
#align units.one_sub Units.oneSub

/-- In a complete normed ring, a perturbation of a unit `x` by an element `t` of distance less than
`‚Äñx‚Åª¬π‚Äñ‚Åª¬π` from `x` is a unit.  Here we construct its `units` structure. -/
@[simps coe]
def add (x : RÀ£) (t : R) (h : ‚Äñt‚Äñ < ‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ‚Åª¬π) : RÀ£ :=
  Units.copy
    (-- to make `coe_add` true definitionally, for convenience
      x *
      Units.oneSub (-(‚Üëx‚Åª¬π * t))
        (by
          nontriviality R using zero_lt_one
          have hpos : 0 < ‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ := Units.norm_pos x‚Åª¬π
          calc
            ‚Äñ-(‚Üëx‚Åª¬π * t)‚Äñ = ‚Äñ‚Üëx‚Åª¬π * t‚Äñ := by rw [norm_neg]
            _ ‚â§ ‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ * ‚Äñt‚Äñ := (norm_mul_le ‚Üëx‚Åª¬π _)
            _ < ‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ * ‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ‚Åª¬π := by nlinarith only [h, hpos]
            _ = 1 := mul_inv_cancel (ne_of_gt hpos)
            ))
    (x + t) (by simp [mul_add]) _ rfl
#align units.add Units.add

/-- In a complete normed ring, an element `y` of distance less than `‚Äñx‚Åª¬π‚Äñ‚Åª¬π` from `x` is a unit.
Here we construct its `units` structure. -/
@[simps coe]
def unitOfNearby (x : RÀ£) (y : R) (h : ‚Äñy - x‚Äñ < ‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ‚Åª¬π) : RÀ£ :=
  Units.copy (x.add (y - x : R) h) y (by simp) _ rfl
#align units.unit_of_nearby Units.unitOfNearby

/-- The group of units of a complete normed ring is an open subset of the ring. -/
protected theorem isOpen : IsOpen { x : R | IsUnit x } :=
  by
  nontriviality R
  apply metric.is_open_iff.mpr
  rintro x' ‚ü®x, rfl‚ü©
  refine' ‚ü®‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ‚Åª¬π, _root_.inv_pos.mpr (Units.norm_pos x‚Åª¬π), _‚ü©
  intro y hy
  rw [Metric.mem_ball, dist_eq_norm] at hy
  exact (x.unit_of_nearby y hy).IsUnit
#align units.is_open Units.isOpen

protected theorem nhds (x : RÀ£) : { x : R | IsUnit x } ‚àà ùìù (x : R) :=
  IsOpen.mem_nhds Units.isOpen x.IsUnit
#align units.nhds Units.nhds

end Units

namespace nonunits

/-- The `nonunits` in a complete normed ring are contained in the complement of the ball of radius
`1` centered at `1 : R`. -/
theorem subset_compl_ball : nonunits R ‚äÜ Metric.ball (1 : R) 1·∂ú :=
  Set.subset_compl_comm.mp fun x hx => by
    simpa [sub_sub_self, Units.coe_oneSub] using
      (Units.oneSub (1 - x) (by rwa [Metric.mem_ball, dist_eq_norm, norm_sub_rev] at hx)).IsUnit
#align nonunits.subset_compl_ball nonunits.subset_compl_ball

-- The `nonunits` in a complete normed ring are a closed set
protected theorem isClosed : IsClosed (nonunits R) :=
  Units.isOpen.isClosed_compl
#align nonunits.is_closed nonunits.isClosed

end nonunits

namespace NormedRing

open Classical BigOperators

open Asymptotics Filter Metric Finset Ring

theorem inverse_oneSub (t : R) (h : ‚Äñt‚Äñ < 1) : inverse (1 - t) = ‚Üë(Units.oneSub t h)‚Åª¬π := by
  rw [‚Üê inverse_unit (Units.oneSub t h), Units.coe_oneSub]
#align normed_ring.inverse_one_sub NormedRing.inverse_oneSub

/-- The formula `inverse (x + t) = inverse (1 + x‚Åª¬π * t) * x‚Åª¬π` holds for `t` sufficiently small. -/
theorem inverse_add (x : RÀ£) : ‚àÄ·∂† t in ùìù 0, inverse ((x : R) + t) = inverse (1 + ‚Üëx‚Åª¬π * t) * ‚Üëx‚Åª¬π :=
  by
  nontriviality R
  rw [eventually_iff, Metric.mem_nhds_iff]
  have hinv : 0 < ‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ‚Åª¬π := by cancel_denoms
  use ‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ‚Åª¬π, hinv
  intro t ht
  simp only [mem_ball, dist_zero_right] at ht
  have ht' : ‚Äñ-‚Üëx‚Åª¬π * t‚Äñ < 1 :=
    by
    refine' lt_of_le_of_lt (norm_mul_le _ _) _
    rw [norm_neg]
    refine' lt_of_lt_of_le (mul_lt_mul_of_pos_left ht x‚Åª¬π.norm_pos) _
    cancel_denoms
  have hright := inverse_one_sub (-‚Üëx‚Åª¬π * t) ht'
  have hleft := inverse_unit (x.add t ht)
  simp only [neg_mul, sub_neg_eq_add] at hright
  simp only [Units.coe_add] at hleft
  simp [hleft, hright, Units.add]
#align normed_ring.inverse_add NormedRing.inverse_add

theorem inverse_one_sub_nth_order (n : ‚Ñï) :
    ‚àÄ·∂† t in ùìù 0, inverse ((1 : R) - t) = (‚àë i in range n, t ^ i) + t ^ n * inverse (1 - t) :=
  by
  simp only [eventually_iff, Metric.mem_nhds_iff]
  use 1, by norm_num
  intro t ht
  simp only [mem_ball, dist_zero_right] at ht
  simp only [inverse_one_sub t ht, Set.mem_setOf_eq]
  have h : 1 = ((range n).Sum fun i => t ^ i) * Units.oneSub t ht + t ^ n :=
    by
    simp only [Units.coe_oneSub]
    rw [geom_sum_mul_neg]
    simp
  rw [‚Üê one_mul ‚Üë(Units.oneSub t ht)‚Åª¬π, h, add_mul]
  congr
  ¬∑ rw [mul_assoc, (Units.oneSub t ht).mul_inv]
    simp
  ¬∑ simp only [Units.coe_oneSub]
    rw [‚Üê add_mul, geom_sum_mul_neg]
    simp
#align normed_ring.inverse_one_sub_nth_order NormedRing.inverse_one_sub_nth_order

/-- The formula
`inverse (x + t) = (‚àë i in range n, (- x‚Åª¬π * t) ^ i) * x‚Åª¬π + (- x‚Åª¬π * t) ^ n * inverse (x + t)`
holds for `t` sufficiently small. -/
theorem inverse_add_nth_order (x : RÀ£) (n : ‚Ñï) :
    ‚àÄ·∂† t in ùìù 0,
      inverse ((x : R) + t) =
        (‚àë i in range n, (-‚Üëx‚Åª¬π * t) ^ i) * ‚Üëx‚Åª¬π + (-‚Üëx‚Åª¬π * t) ^ n * inverse (x + t) :=
  by
  refine' (inverse_add x).mp _
  have hzero : tendsto (fun t : R => -‚Üëx‚Åª¬π * t) (ùìù 0) (ùìù 0) :=
    by
    convert((mulLeft_continuous (-(‚Üëx‚Åª¬π : R))).Tendsto 0).comp tendsto_id
    simp
  refine' (hzero.eventually (inverse_one_sub_nth_order n)).mp (eventually_of_forall _)
  simp only [neg_mul, sub_neg_eq_add]
  intro t h1 h2
  have h := congr_arg (fun a : R => a * ‚Üëx‚Åª¬π) h1
  dsimp at h
  convert h
  rw [add_mul, mul_assoc]
  simp [h2.symm]
#align normed_ring.inverse_add_nth_order NormedRing.inverse_add_nth_order

theorem inverse_one_sub_norm : (fun t : R => inverse (1 - t)) =O[ùìù 0] (fun t => 1 : R ‚Üí ‚Ñù) :=
  by
  simp only [is_O, is_O_with, eventually_iff, Metric.mem_nhds_iff]
  refine' ‚ü®‚Äñ(1 : R)‚Äñ + 1, (2 : ‚Ñù)‚Åª¬π, by norm_num, _‚ü©
  intro t ht
  simp only [ball, dist_zero_right, Set.mem_setOf_eq] at ht
  have ht' : ‚Äñt‚Äñ < 1 := by
    have : (2 : ‚Ñù)‚Åª¬π < 1 := by cancel_denoms
    linarith
  simp only [inverse_one_sub t ht', norm_one, mul_one, Set.mem_setOf_eq]
  change ‚Äñ‚àë' n : ‚Ñï, t ^ n‚Äñ ‚â§ _
  have := NormedRing.tsum_geometric_of_norm_lt_1 t ht'
  have : (1 - ‚Äñt‚Äñ)‚Åª¬π ‚â§ 2 := by
    rw [‚Üê inv_inv (2 : ‚Ñù)]
    refine' inv_le_inv_of_le (by norm_num) _
    have : (2 : ‚Ñù)‚Åª¬π + (2 : ‚Ñù)‚Åª¬π = 1 := by ring
    linarith
  linarith
#align normed_ring.inverse_one_sub_norm NormedRing.inverse_one_sub_norm

/-- The function `Œª t, inverse (x + t)` is O(1) as `t ‚Üí 0`. -/
theorem inverse_add_norm (x : RÀ£) : (fun t : R => inverse (‚Üëx + t)) =O[ùìù 0] fun t => (1 : ‚Ñù) :=
  by
  simp only [is_O_iff, norm_one, mul_one]
  cases' is_O_iff.mp (@inverse_one_sub_norm R _ _) with C hC
  use C * ‚Äñ((x‚Åª¬π : RÀ£) : R)‚Äñ
  have hzero : tendsto (fun t => -(‚Üëx‚Åª¬π : R) * t) (ùìù 0) (ùìù 0) :=
    by
    convert((mulLeft_continuous (-‚Üëx‚Åª¬π : R)).Tendsto 0).comp tendsto_id
    simp
  refine' (inverse_add x).mp ((hzero.eventually hC).mp (eventually_of_forall _))
  intro t bound iden
  rw [iden]
  simp at bound
  have hmul := norm_mul_le (inverse (1 + ‚Üëx‚Åª¬π * t)) ‚Üëx‚Åª¬π
  nlinarith [norm_nonneg (‚Üëx‚Åª¬π : R)]
#align normed_ring.inverse_add_norm NormedRing.inverse_add_norm

/-- The function
`Œª t, inverse (x + t) - (‚àë i in range n, (- x‚Åª¬π * t) ^ i) * x‚Åª¬π`
is `O(t ^ n)` as `t ‚Üí 0`. -/
theorem inverse_add_norm_diff_nth_order (x : RÀ£) (n : ‚Ñï) :
    (fun t : R => inverse (‚Üëx + t) - (‚àë i in range n, (-‚Üëx‚Åª¬π * t) ^ i) * ‚Üëx‚Åª¬π) =O[ùìù (0 : R)]
      fun t => ‚Äñt‚Äñ ^ n :=
  by
  by_cases h : n = 0
  ¬∑ simpa [h] using inverse_add_norm x
  have hn : 0 < n := Nat.pos_of_ne_zero h
  simp [is_O_iff]
  cases' is_O_iff.mp (inverse_add_norm x) with C hC
  use C * ‚Äñ(1 : ‚Ñù)‚Äñ * ‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ ^ n
  have h :
    eventually_eq (ùìù (0 : R)) (fun t => inverse (‚Üëx + t) - (‚àë i in range n, (-‚Üëx‚Åª¬π * t) ^ i) * ‚Üëx‚Åª¬π)
      fun t => (-‚Üëx‚Åª¬π * t) ^ n * inverse (x + t) :=
    by
    refine' (inverse_add_nth_order x n).mp (eventually_of_forall _)
    intro t ht
    convert congr_arg (fun a => a - (range n).Sum (pow (-‚Üëx‚Åª¬π * t)) * ‚Üëx‚Åª¬π) ht
    simp
  refine' h.mp (hC.mp (eventually_of_forall _))
  intro t _ hLHS
  simp only [neg_mul] at hLHS
  rw [hLHS]
  refine' le_trans (norm_mul_le _ _) _
  have h' : ‚Äñ(-(‚Üëx‚Åª¬π * t)) ^ n‚Äñ ‚â§ ‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ ^ n * ‚Äñt‚Äñ ^ n :=
    by
    calc
      ‚Äñ(-(‚Üëx‚Åª¬π * t)) ^ n‚Äñ ‚â§ ‚Äñ-(‚Üëx‚Åª¬π * t)‚Äñ ^ n := norm_pow_le' _ hn
      _ = ‚Äñ‚Üëx‚Åª¬π * t‚Äñ ^ n := by rw [norm_neg]
      _ ‚â§ (‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ * ‚Äñt‚Äñ) ^ n := _
      _ = ‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ ^ n * ‚Äñt‚Äñ ^ n := mul_pow _ _ n
      
    exact pow_le_pow_of_le_left (norm_nonneg _) (norm_mul_le (‚Üëx‚Åª¬π) t) n
  have h'' : 0 ‚â§ ‚Äñ(‚Üëx‚Åª¬π : R)‚Äñ ^ n * ‚Äñt‚Äñ ^ n := by
    refine' mul_nonneg _ _ <;> exact pow_nonneg (norm_nonneg _) n
  nlinarith [norm_nonneg (inverse (‚Üëx + t))]
#align normed_ring.inverse_add_norm_diff_nth_order NormedRing.inverse_add_norm_diff_nth_order

/-- The function `Œª t, inverse (x + t) - x‚Åª¬π` is `O(t)` as `t ‚Üí 0`. -/
theorem inverse_add_norm_diff_first_order (x : RÀ£) :
    (fun t : R => inverse (‚Üëx + t) - ‚Üëx‚Åª¬π) =O[ùìù 0] fun t => ‚Äñt‚Äñ := by
  simpa using inverse_add_norm_diff_nth_order x 1
#align normed_ring.inverse_add_norm_diff_first_order NormedRing.inverse_add_norm_diff_first_order

/-- The function
`Œª t, inverse (x + t) - x‚Åª¬π + x‚Åª¬π * t * x‚Åª¬π`
is `O(t ^ 2)` as `t ‚Üí 0`. -/
theorem inverse_add_norm_diff_second_order (x : RÀ£) :
    (fun t : R => inverse (‚Üëx + t) - ‚Üëx‚Åª¬π + ‚Üëx‚Åª¬π * t * ‚Üëx‚Åª¬π) =O[ùìù 0] fun t => ‚Äñt‚Äñ ^ 2 :=
  by
  convert inverse_add_norm_diff_nth_order x 2
  ext t
  simp only [range_succ, range_one, sum_insert, mem_singleton, sum_singleton, not_false_iff,
    one_ne_zero, pow_zero, add_mul, pow_one, one_mul, neg_mul, sub_add_eq_sub_sub_swap,
    sub_neg_eq_add]
#align normed_ring.inverse_add_norm_diff_second_order NormedRing.inverse_add_norm_diff_second_order

/-- The function `inverse` is continuous at each unit of `R`. -/
theorem inverse_continuousAt (x : RÀ£) : ContinuousAt inverse (x : R) :=
  by
  have h_is_o : (fun t : R => inverse (‚Üëx + t) - ‚Üëx‚Åª¬π) =o[ùìù 0] (fun _ => 1 : R ‚Üí ‚Ñù) :=
    (inverse_add_norm_diff_first_order x).trans_isLittleO
      (is_o.norm_left <| is_o_id_const one_ne_zero)
  have h_lim : tendsto (fun y : R => y - x) (ùìù x) (ùìù 0) :=
    by
    refine' tendsto_zero_iff_norm_tendsto_zero.mpr _
    exact tendsto_iff_norm_tendsto_zero.mp tendsto_id
  rw [ContinuousAt, tendsto_iff_norm_tendsto_zero, inverse_unit]
  simpa [(¬∑ ‚àò ¬∑)] using h_is_o.norm_left.tendsto_div_nhds_zero.comp h_lim
#align normed_ring.inverse_continuous_at NormedRing.inverse_continuousAt

end NormedRing

namespace Units

open MulOpposite Filter NormedRing

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- In a normed ring, the coercion from `RÀ£` (equipped with the induced topology from the
embedding in `R √ó R`) to `R` is an open map. -/
theorem isOpenMap_coe : IsOpenMap (coe : RÀ£ ‚Üí R) :=
  by
  rw [isOpenMap_iff_nhds_le]
  intro x s
  rw [mem_map, mem_nhds_induced]
  rintro ‚ü®t, ht, hts‚ü©
  obtain ‚ü®u, hu, v, hv, huvt‚ü© :
    ‚àÉ u : Set R, u ‚àà ùìù ‚Üëx ‚àß ‚àÉ v : Set R·µê·µí·µñ, v ‚àà ùìù (op ‚Üëx‚Åª¬π) ‚àß u √óÀ¢ v ‚äÜ t := by
    simpa [embed_product, mem_nhds_prod_iff] using ht
  have : u ‚à© op ‚àò Ring.inverse ‚Åª¬π' v ‚à© Set.range (coe : RÀ£ ‚Üí R) ‚àà ùìù ‚Üëx :=
    by
    refine' inter_mem (inter_mem hu _) (Units.nhds x)
    refine' (continuous_op.continuous_at.comp (inverse_continuous_at x)).preimage_mem_nhds _
    simpa using hv
  refine' mem_of_superset this _
  rintro _ ‚ü®‚ü®huy, hvy‚ü©, ‚ü®y, rfl‚ü©‚ü©
  have : embed_product R y ‚àà u √óÀ¢ v := ‚ü®huy, by simpa using hvy‚ü©
  simpa using hts (huvt this)
#align units.is_open_map_coe Units.isOpenMap_coe

/-- In a normed ring, the coercion from `RÀ£` (equipped with the induced topology from the
embedding in `R √ó R`) to `R` is an open embedding. -/
theorem openEmbedding_coe : OpenEmbedding (coe : RÀ£ ‚Üí R) :=
  openEmbedding_of_continuous_injective_open continuous_val ext isOpenMap_coe
#align units.open_embedding_coe Units.openEmbedding_coe

end Units

namespace Ideal

/-- An ideal which contains an element within `1` of `1 : R` is the unit ideal. -/
theorem eq_top_of_norm_lt_one (I : Ideal R) {x : R} (hxI : x ‚àà I) (hx : ‚Äñ1 - x‚Äñ < 1) : I = ‚ä§ :=
  let u := Units.oneSub (1 - x) hx
  I.eq_top_iff_one.mpr <| by simpa only [show u.inv * x = 1 by simp] using I.mul_mem_left u.inv hxI
#align ideal.eq_top_of_norm_lt_one Ideal.eq_top_of_norm_lt_one

/-- The `ideal.closure` of a proper ideal in a complete normed ring is proper. -/
theorem closure_ne_top (I : Ideal R) (hI : I ‚â† ‚ä§) : I.closure ‚â† ‚ä§ :=
  by
  have h := closure_minimal (coe_subset_nonunits hI) nonunits.isClosed
  simpa only [I.closure.eq_top_iff_one, Ne.def] using mt (@h 1) one_not_mem_nonunits
#align ideal.closure_ne_top Ideal.closure_ne_top

/-- The `ideal.closure` of a maximal ideal in a complete normed ring is the ideal itself. -/
theorem IsMaximal.closure_eq {I : Ideal R} (hI : I.IsMaximal) : I.closure = I :=
  (hI.eq_of_le (I.closure_ne_top hI.ne_top) subset_closure).symm
#align ideal.is_maximal.closure_eq Ideal.IsMaximal.closure_eq

/-- Maximal ideals in complete normed rings are closed. -/
instance IsMaximal.isClosed {I : Ideal R} [hI : I.IsMaximal] : IsClosed (I : Set R) :=
  isClosed_of_closure_subset <| Eq.subset <| congr_arg (coe : Ideal R ‚Üí Set R) hI.closure_eq
#align ideal.is_maximal.is_closed Ideal.IsMaximal.isClosed

end Ideal

