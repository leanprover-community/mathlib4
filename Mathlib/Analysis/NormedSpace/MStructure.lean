/-
Copyright (c) 2022 Christopher Hoskin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christopher Hoskin
-/
import Mathlib.Algebra.Ring.Idempotents
import Mathlib.Analysis.Normed.Group.Basic
import Mathlib.Order.Basic
import Mathlib.Tactic.NoncommRing

#align_import analysis.normed_space.M_structure from "leanprover-community/mathlib"@"d11893b411025250c8e61ff2f12ccbd7ee35ab15"

/-!
# M-structure

A projection P on a normed space X is said to be an L-projection (`IsLprojection`) if, for all `x`
in `X`,
$\|x\| = \|P x\| + \|(1 - P) x\|$.

A projection P on a normed space X is said to be an M-projection if, for all `x` in `X`,
$\|x\| = max(\|P x\|,\|(1 - P) x\|)$.

The L-projections on `X` form a Boolean algebra (`IsLprojection.Subtype.BooleanAlgebra`).

## TODO (Motivational background)

The M-projections on a normed space form a Boolean algebra.

The range of an L-projection on a normed space `X` is said to be an L-summand of `X`. The range of
an M-projection is said to be an M-summand of `X`.

When `X` is a Banach space, the Boolean algebra of L-projections is complete. Let `X` be a normed
space with dual `X^*`. A closed subspace `M` of `X` is said to be an M-ideal if the topological
annihilator `M^‚àò` is an L-summand of `X^*`.

M-ideal, M-summands and L-summands were introduced by Alfsen and Effros in [alfseneffros1972] to
study the structure of general Banach spaces. When `A` is a JB*-triple, the M-ideals of `A` are
exactly the norm-closed ideals of `A`. When `A` is a JBW*-triple with predual `X`, the M-summands of
`A` are exactly the weak*-closed ideals, and their pre-duals can be identified with the L-summands
of `X`. In the special case when `A` is a C*-algebra, the M-ideals are exactly the norm-closed
two-sided ideals of `A`, when `A` is also a W*-algebra the M-summands are exactly the weak*-closed
two-sided ideals of `A`.

## Implementation notes

The approach to showing that the L-projections form a Boolean algebra is inspired by
`MeasureTheory.MeasurableSpace`.

Instead of using `P : X ‚ÜíL[ùïú] X` to represent projections, we use an arbitrary ring `M` with a
faithful action on `X`. `ContinuousLinearMap.apply_module` can be used to recover the `X ‚ÜíL[ùïú] X`
special case.

## References

* [Behrends, M-structure and the Banach-Stone Theorem][behrends1979]
* [Harmand, Werner, Werner, M-ideals in Banach spaces and Banach algebras][harmandwernerwerner1993]

## Tags

M-summand, M-projection, L-summand, L-projection, M-ideal, M-structure

-/

variable (X : Type*) [NormedAddCommGroup X]
variable {M : Type*} [Ring M] [Module M X]

-- Porting note: Mathlib3 uses names with uppercase 'L' for L-projections
set_option linter.uppercaseLean3 false

/-- A projection on a normed space `X` is said to be an L-projection if, for all `x` in `X`,
$\|x\| = \|P x\| + \|(1 - P) x\|$.

Note that we write `P ‚Ä¢ x` instead of `P x` for reasons described in the module docstring.
-/
structure IsLprojection (P : M) : Prop where
  proj : IsIdempotentElem P
  Lnorm : ‚àÄ x : X, ‚Äñx‚Äñ = ‚ÄñP ‚Ä¢ x‚Äñ + ‚Äñ(1 - P) ‚Ä¢ x‚Äñ
#align is_Lprojection IsLprojection

/-- A projection on a normed space `X` is said to be an M-projection if, for all `x` in `X`,
$\|x\| = max(\|P x\|,\|(1 - P) x\|)$.

Note that we write `P ‚Ä¢ x` instead of `P x` for reasons described in the module docstring.
-/
structure IsMprojection (P : M) : Prop where
  proj : IsIdempotentElem P
  Mnorm : ‚àÄ x : X, ‚Äñx‚Äñ = max ‚ÄñP ‚Ä¢ x‚Äñ ‚Äñ(1 - P) ‚Ä¢ x‚Äñ
#align is_Mprojection IsMprojection

variable {X}

namespace IsLprojection

-- Porting note: The literature always uses uppercase 'L' for L-projections
theorem Lcomplement {P : M} (h : IsLprojection X P) : IsLprojection X (1 - P) :=
  ‚ü®h.proj.one_sub, fun x => by
    rw [add_comm, sub_sub_cancel]
    exact h.Lnorm x‚ü©
#align is_Lprojection.Lcomplement IsLprojection.Lcomplement

theorem Lcomplement_iff (P : M) : IsLprojection X P ‚Üî IsLprojection X (1 - P) :=
  ‚ü®Lcomplement, fun h => sub_sub_cancel 1 P ‚ñ∏ h.Lcomplement‚ü©
#align is_Lprojection.Lcomplement_iff IsLprojection.Lcomplement_iff

theorem commute [FaithfulSMul M X] {P Q : M} (h‚ÇÅ : IsLprojection X P) (h‚ÇÇ : IsLprojection X Q) :
    Commute P Q := by
  have PR_eq_RPR : ‚àÄ R : M, IsLprojection X R ‚Üí P * R = R * P * R := fun R h‚ÇÉ => by
    -- Porting note: Needed to fix function, which changes indent of following lines
    refine @eq_of_smul_eq_smul _ X _ _ _ _ fun x => by
      rw [‚Üê norm_sub_eq_zero_iff]
      have e1 : ‚ÄñR ‚Ä¢ x‚Äñ ‚â• ‚ÄñR ‚Ä¢ x‚Äñ + 2 ‚Ä¢ ‚Äñ(P * R) ‚Ä¢ x - (R * P * R) ‚Ä¢ x‚Äñ :=
        calc
          ‚ÄñR ‚Ä¢ x‚Äñ = ‚ÄñR ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ + ‚Äñ(1 - R) ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ +
              (‚Äñ(R * R) ‚Ä¢ x - R ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ + ‚Äñ(1 - R) ‚Ä¢ (1 - P) ‚Ä¢ R ‚Ä¢ x‚Äñ) := by
            rw [h‚ÇÅ.Lnorm, h‚ÇÉ.Lnorm, h‚ÇÉ.Lnorm ((1 - P) ‚Ä¢ R ‚Ä¢ x), sub_smul 1 P, one_smul, smul_sub,
              mul_smul]
          _ = ‚ÄñR ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ + ‚Äñ(1 - R) ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ +
              (‚ÄñR ‚Ä¢ x - R ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ + ‚Äñ((1 - R) * R) ‚Ä¢ x - (1 - R) ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ) := by
            rw [h‚ÇÉ.proj.eq, sub_smul 1 P, one_smul, smul_sub, mul_smul]
          _ = ‚ÄñR ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ + ‚Äñ(1 - R) ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ +
              (‚ÄñR ‚Ä¢ x - R ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ + ‚Äñ(1 - R) ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ) := by
            rw [sub_mul, h‚ÇÉ.proj.eq, one_mul, sub_self, zero_smul, zero_sub, norm_neg]
          _ = ‚ÄñR ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ + ‚ÄñR ‚Ä¢ x - R ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ + 2 ‚Ä¢ ‚Äñ(1 - R) ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ := by abel
          _ ‚â• ‚ÄñR ‚Ä¢ x‚Äñ + 2 ‚Ä¢ ‚Äñ(P * R) ‚Ä¢ x - (R * P * R) ‚Ä¢ x‚Äñ := by
            rw [GE.ge]
            have :=
              add_le_add_right (norm_le_insert' (R ‚Ä¢ x) (R ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x)) (2 ‚Ä¢ ‚Äñ(1 - R) ‚Ä¢ P ‚Ä¢ R ‚Ä¢ x‚Äñ)
            simpa only [mul_smul, sub_smul, one_smul] using this

      rw [GE.ge] at e1
      -- Porting note: Bump index in nth_rewrite
      nth_rewrite 2 [‚Üê add_zero ‚ÄñR ‚Ä¢ x‚Äñ] at e1
      rw [add_le_add_iff_left, two_smul, ‚Üê two_mul] at e1
      rw [le_antisymm_iff]
      refine' ‚ü®_, norm_nonneg _‚ü©
      rwa [‚Üê mul_zero (2 : ‚Ñù), mul_le_mul_left (show (0 : ‚Ñù) < 2 by norm_num)] at e1
  have QP_eq_QPQ : Q * P = Q * P * Q := by
    have e1 : P * (1 - Q) = P * (1 - Q) - (Q * P - Q * P * Q) :=
      calc
        P * (1 - Q) = (1 - Q) * P * (1 - Q) := by rw [PR_eq_RPR (1 - Q) h‚ÇÇ.Lcomplement]
        _ = P * (1 - Q) - (Q * P - Q * P * Q) := by noncomm_ring
    rwa [eq_sub_iff_add_eq, add_right_eq_self, sub_eq_zero] at e1
  show P * Q = Q * P
  ¬∑ rw [QP_eq_QPQ, PR_eq_RPR Q h‚ÇÇ]
#align is_Lprojection.commute IsLprojection.commute

theorem mul [FaithfulSMul M X] {P Q : M} (h‚ÇÅ : IsLprojection X P) (h‚ÇÇ : IsLprojection X Q) :
    IsLprojection X (P * Q) := by
  refine' ‚ü®IsIdempotentElem.mul_of_commute (h‚ÇÅ.commute h‚ÇÇ) h‚ÇÅ.proj h‚ÇÇ.proj, _‚ü©
  intro x
  refine' le_antisymm _ _
  ¬∑ calc
      ‚Äñx‚Äñ = ‚Äñ(P * Q) ‚Ä¢ x + (x - (P * Q) ‚Ä¢ x)‚Äñ := by rw [add_sub_cancel ((P * Q) ‚Ä¢ x) x]
      _ ‚â§ ‚Äñ(P * Q) ‚Ä¢ x‚Äñ + ‚Äñx - (P * Q) ‚Ä¢ x‚Äñ := by apply norm_add_le
      _ = ‚Äñ(P * Q) ‚Ä¢ x‚Äñ + ‚Äñ(1 - P * Q) ‚Ä¢ x‚Äñ := by rw [sub_smul, one_smul]
  ¬∑ calc
      ‚Äñx‚Äñ = ‚ÄñP ‚Ä¢ Q ‚Ä¢ x‚Äñ + (‚ÄñQ ‚Ä¢ x - P ‚Ä¢ Q ‚Ä¢ x‚Äñ + ‚Äñx - Q ‚Ä¢ x‚Äñ) := by
        rw [h‚ÇÇ.Lnorm x, h‚ÇÅ.Lnorm (Q ‚Ä¢ x), sub_smul, one_smul, sub_smul, one_smul, add_assoc]
      _ ‚â• ‚ÄñP ‚Ä¢ Q ‚Ä¢ x‚Äñ + ‚ÄñQ ‚Ä¢ x - P ‚Ä¢ Q ‚Ä¢ x + (x - Q ‚Ä¢ x)‚Äñ :=
        ((add_le_add_iff_left ‚ÄñP ‚Ä¢ Q ‚Ä¢ x‚Äñ).mpr (norm_add_le (Q ‚Ä¢ x - P ‚Ä¢ Q ‚Ä¢ x) (x - Q ‚Ä¢ x)))
      _ = ‚Äñ(P * Q) ‚Ä¢ x‚Äñ + ‚Äñ(1 - P * Q) ‚Ä¢ x‚Äñ := by
        rw [sub_add_sub_cancel', sub_smul, one_smul, mul_smul]
#align is_Lprojection.mul IsLprojection.mul

theorem join [FaithfulSMul M X] {P Q : M} (h‚ÇÅ : IsLprojection X P) (h‚ÇÇ : IsLprojection X Q) :
    IsLprojection X (P + Q - P * Q) := by
  convert (Lcomplement_iff _).mp (h‚ÇÅ.Lcomplement.mul h‚ÇÇ.Lcomplement) using 1
  noncomm_ring
#align is_Lprojection.join IsLprojection.join

-- Porting note: Advice is to explicitly name instances
-- https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#some-common-fixes
instance Subtype.hasCompl : HasCompl { f : M // IsLprojection X f } :=
  ‚ü®fun P => ‚ü®1 - P, P.prop.Lcomplement‚ü©‚ü©

@[simp]
theorem coe_compl (P : { P : M // IsLprojection X P }) : ‚ÜëP·∂ú = (1 : M) - ‚ÜëP :=
  rfl
#align is_Lprojection.coe_compl IsLprojection.coe_compl

instance Subtype.inf [FaithfulSMul M X] : Inf { P : M // IsLprojection X P } :=
  ‚ü®fun P Q => ‚ü®P * Q, P.prop.mul Q.prop‚ü©‚ü©

@[simp]
theorem coe_inf [FaithfulSMul M X] (P Q : { P : M // IsLprojection X P }) :
    ‚Üë(P ‚äì Q) = (‚ÜëP : M) * ‚ÜëQ :=
  rfl
#align is_Lprojection.coe_inf IsLprojection.coe_inf

instance Subtype.sup [FaithfulSMul M X] : Sup { P : M // IsLprojection X P } :=
  ‚ü®fun P Q => ‚ü®P + Q - P * Q, P.prop.join Q.prop‚ü©‚ü©

@[simp]
theorem coe_sup [FaithfulSMul M X] (P Q : { P : M // IsLprojection X P }) :
    ‚Üë(P ‚äî Q) = (‚ÜëP : M) + ‚ÜëQ - ‚ÜëP * ‚ÜëQ :=
  rfl
#align is_Lprojection.coe_sup IsLprojection.coe_sup

instance Subtype.sdiff [FaithfulSMul M X] : SDiff { P : M // IsLprojection X P } :=
  ‚ü®fun P Q => ‚ü®P * (1 - Q), P.prop.mul Q.prop.Lcomplement‚ü©‚ü©

@[simp]
theorem coe_sdiff [FaithfulSMul M X] (P Q : { P : M // IsLprojection X P }) :
    ‚Üë(P \ Q) = (‚ÜëP : M) * (1 - ‚ÜëQ) :=
  rfl
#align is_Lprojection.coe_sdiff IsLprojection.coe_sdiff

instance Subtype.partialOrder [FaithfulSMul M X] :
    PartialOrder { P : M // IsLprojection X P } where
  le P Q := (‚ÜëP : M) = ‚Üë(P ‚äì Q)
  le_refl P := by simpa only [coe_inf, ‚Üê sq] using P.prop.proj.eq.symm
  le_trans P Q R h‚ÇÅ h‚ÇÇ := by
    simp only [coe_inf] at h‚ÇÅ h‚ÇÇ ‚ä¢
    rw [h‚ÇÅ, mul_assoc, ‚Üê h‚ÇÇ]
  le_antisymm P Q h‚ÇÅ h‚ÇÇ := Subtype.eq (by convert (P.prop.commute Q.prop).eq)

theorem le_def [FaithfulSMul M X] (P Q : { P : M // IsLprojection X P }) :
    P ‚â§ Q ‚Üî (P : M) = ‚Üë(P ‚äì Q) :=
  Iff.rfl
#align is_Lprojection.le_def IsLprojection.le_def

instance Subtype.zero : Zero { P : M // IsLprojection X P } :=
  ‚ü®‚ü®0, ‚ü®by rw [IsIdempotentElem, zero_mul], fun x => by
        simp only [zero_smul, norm_zero, sub_zero, one_smul, zero_add]‚ü©‚ü©‚ü©

@[simp]
theorem coe_zero : ‚Üë(0 : { P : M // IsLprojection X P }) = (0 : M) :=
  rfl
#align is_Lprojection.coe_zero IsLprojection.coe_zero

instance Subtype.one : One { P : M // IsLprojection X P } :=
  ‚ü®‚ü®1, sub_zero (1 : M) ‚ñ∏ (0 : { P : M // IsLprojection X P }).prop.Lcomplement‚ü©‚ü©

@[simp]
theorem coe_one : ‚Üë(1 : { P : M // IsLprojection X P }) = (1 : M) :=
  rfl
#align is_Lprojection.coe_one IsLprojection.coe_one

instance Subtype.boundedOrder [FaithfulSMul M X] :
    BoundedOrder { P : M // IsLprojection X P } where
  top := 1
  le_top P := (mul_one (P : M)).symm
  bot := 0
  bot_le P := (zero_mul (P : M)).symm

@[simp]
theorem coe_bot [FaithfulSMul M X] :
    -- Porting note: Manual correction of name required here
    ‚Üë(BoundedOrder.toOrderBot.toBot.bot : { P : M // IsLprojection X P }) = (0 : M) :=
  rfl
#align is_Lprojection.coe_bot IsLprojection.coe_bot

@[simp]
theorem coe_top [FaithfulSMul M X] :
    -- Porting note: Manual correction of name required here
    ‚Üë(BoundedOrder.toOrderTop.toTop.top : { P : M // IsLprojection X P }) = (1 : M) :=
  rfl
#align is_Lprojection.coe_top IsLprojection.coe_top

theorem compl_mul {P : { P : M // IsLprojection X P }} {Q : M} : ‚ÜëP·∂ú * Q = Q - ‚ÜëP * Q := by
  rw [coe_compl, sub_mul, one_mul]
#align is_Lprojection.compl_mul IsLprojection.compl_mul

theorem mul_compl_self {P : { P : M // IsLprojection X P }} : (‚ÜëP : M) * ‚ÜëP·∂ú = 0 := by
  rw [coe_compl, mul_sub, mul_one, P.prop.proj.eq, sub_self]
#align is_Lprojection.mul_compl_self IsLprojection.mul_compl_self

theorem distrib_lattice_lemma [FaithfulSMul M X] {P Q R : { P : M // IsLprojection X P }} :
    ((‚ÜëP : M) + ‚ÜëP·∂ú * R) * (‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú) = ‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú := by
  rw [add_mul, mul_add, mul_add, (mul_assoc _ (R : M) (‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú)),
    ‚Üê mul_assoc (R : M) (‚ÜëQ * ‚ÜëR) _, ‚Üê coe_inf Q, (P·∂ú.prop.commute R.prop).eq,
    ((Q ‚äì R).prop.commute P·∂ú.prop).eq, (R.prop.commute (Q ‚äì R).prop).eq, coe_inf Q,
    mul_assoc (Q : M), ‚Üê mul_assoc, mul_assoc (R : M), (P·∂ú.prop.commute P.prop).eq, mul_compl_self,
    zero_mul, mul_zero, zero_add, add_zero, ‚Üê mul_assoc, P.prop.proj.eq,
    R.prop.proj.eq, ‚Üê coe_inf Q, mul_assoc, ((Q ‚äì R).prop.commute P·∂ú.prop).eq, ‚Üê mul_assoc,
    P·∂ú.prop.proj.eq]
#align is_Lprojection.distrib_lattice_lemma IsLprojection.distrib_lattice_lemma

-- Porting note: In mathlib3 we were able to directly show that `{ P : M // IsLprojection X P }` was
--  an instance of a `DistribLattice`. Trying to do that in mathlib4 fails with "error:
-- (deterministic) timeout at 'whnf', maximum number of heartbeats (800000) has been reached"
-- My workaround is to show instance Lattice first
instance [FaithfulSMul M X] : Lattice { P : M // IsLprojection X P } where
  le_sup_left P Q := by
    rw [le_def, coe_inf, coe_sup, ‚Üê add_sub, mul_add, mul_sub, ‚Üê mul_assoc, P.prop.proj.eq,
      sub_self, add_zero]
  le_sup_right P Q := by
    rw [le_def, coe_inf, coe_sup, ‚Üê add_sub, mul_add, mul_sub, (P.prop.commute Q.prop).eq,
      ‚Üê mul_assoc, Q.prop.proj.eq, add_sub_cancel]
  sup_le P Q R := by
    rw [le_def, le_def, le_def, coe_inf, coe_inf, coe_sup, coe_inf, coe_sup, ‚Üê add_sub, add_mul,
      sub_mul, mul_assoc]
    intro h‚ÇÅ h‚ÇÇ
    rw [‚Üê h‚ÇÇ, ‚Üê h‚ÇÅ]
  inf_le_left P Q := by
    rw [le_def, coe_inf, coe_inf, coe_inf, mul_assoc, (Q.prop.commute P.prop).eq, ‚Üê mul_assoc,
      P.prop.proj.eq]
  inf_le_right P Q := by rw [le_def, coe_inf, coe_inf, coe_inf, mul_assoc, Q.prop.proj.eq]
  le_inf P Q R := by
    rw [le_def, le_def, le_def, coe_inf, coe_inf, coe_inf, coe_inf, ‚Üê mul_assoc]
    intro h‚ÇÅ h‚ÇÇ
    rw [‚Üê h‚ÇÅ, ‚Üê h‚ÇÇ]

instance Subtype.distribLattice [FaithfulSMul M X] :
    DistribLattice { P : M // IsLprojection X P } where
  le_sup_inf P Q R := by
    have e‚ÇÅ : ‚Üë((P ‚äî Q) ‚äì (P ‚äî R)) = ‚ÜëP + ‚ÜëQ * (R : M) * ‚ÜëP·∂ú := by
      rw [coe_inf, coe_sup, coe_sup, ‚Üê add_sub, ‚Üê add_sub, ‚Üê compl_mul, ‚Üê compl_mul, add_mul,
        mul_add, (P·∂ú.prop.commute Q.prop).eq, mul_add, ‚Üê mul_assoc, mul_assoc (Q: M),
        (P·∂ú.prop.commute P.prop).eq, mul_compl_self, zero_mul, mul_zero,
        zero_add, add_zero, ‚Üê mul_assoc, mul_assoc (Q : M), P.prop.proj.eq, P·∂ú.prop.proj.eq,
        mul_assoc, (P·∂ú.prop.commute R.prop).eq, ‚Üê mul_assoc]
    have e‚ÇÇ : ‚Üë((P ‚äî Q) ‚äì (P ‚äî R)) * ‚Üë(P ‚äî Q ‚äì R) = (P : M) + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú := by
      rw [coe_inf, coe_sup, coe_sup, coe_sup, ‚Üê add_sub, ‚Üê add_sub, ‚Üê add_sub, ‚Üê compl_mul, ‚Üê
        compl_mul, ‚Üê compl_mul, (P·∂ú.prop.commute (Q ‚äì R).prop).eq, coe_inf, mul_assoc,
        distrib_lattice_lemma, (Q.prop.commute R.prop).eq, distrib_lattice_lemma]
    rw [le_def, e‚ÇÅ, coe_inf, e‚ÇÇ]

instance Subtype.BooleanAlgebra [FaithfulSMul M X] :
    BooleanAlgebra { P : M // IsLprojection X P } :=
-- Porting note: use explicitly specified instance names
  { IsLprojection.Subtype.hasCompl,
    IsLprojection.Subtype.sdiff,
    IsLprojection.Subtype.boundedOrder with
    inf_compl_le_bot := fun P =>
      (Subtype.ext (by rw [coe_inf, coe_compl, coe_bot, ‚Üê coe_compl, mul_compl_self])).le
    top_le_sup_compl := fun P =>
      (Subtype.ext
        (by
          rw [coe_top, coe_sup, coe_compl, add_sub_cancel, ‚Üê coe_compl, mul_compl_self,
            sub_zero])).le
    sdiff_eq := fun P Q => Subtype.ext <| by rw [coe_sdiff, ‚Üê coe_compl, coe_inf] }

end IsLprojection
