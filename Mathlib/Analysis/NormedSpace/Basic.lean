/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl

! This file was ported from Lean 3 source module analysis.normed_space.basic
! leanprover-community/mathlib commit d3af0609f6db8691dffdc3e1fb7feb7da72698f2
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Algebra.Algebra.Pi
import Mathbin.Algebra.Algebra.RestrictScalars
import Mathbin.Analysis.Normed.Field.Basic
import Mathbin.Data.Real.Sqrt
import Mathbin.Topology.Algebra.Module.Basic

/-!
# Normed spaces

In this file we define (semi)normed spaces and algebras. We also prove some theorems
about these definitions.
-/


variable {Œ± : Type _} {Œ≤ : Type _} {Œ≥ : Type _} {Œπ : Type _}

open Filter Metric Function Set

open Topology BigOperators NNReal ENNReal uniformity Pointwise

section SeminormedAddCommGroup

section Prio

/- ./././Mathport/Syntax/Translate/Basic.lean:334:40: warning: unsupported option extends_priority -/
set_option extends_priority 920

-- Here, we set a rather high priority for the instance `[normed_space Œ± Œ≤] : module Œ± Œ≤`
-- to take precedence over `semiring.to_module` as this leads to instance paths with better
-- unification properties.
/-- A normed space over a normed field is a vector space endowed with a norm which satisfies the
equality `‚Äñc ‚Ä¢ x‚Äñ = ‚Äñc‚Äñ ‚Äñx‚Äñ`. We require only `‚Äñc ‚Ä¢ x‚Äñ ‚â§ ‚Äñc‚Äñ ‚Äñx‚Äñ` in the definition, then prove
`‚Äñc ‚Ä¢ x‚Äñ = ‚Äñc‚Äñ ‚Äñx‚Äñ` in `norm_smul`.

Note that since this requires `seminormed_add_comm_group` and not `normed_add_comm_group`, this
typeclass can be used for "semi normed spaces" too, just as `module` can be used for
"semi modules". -/
class NormedSpace (Œ± : Type _) (Œ≤ : Type _) [NormedField Œ±] [SeminormedAddCommGroup Œ≤] extends
  Module Œ± Œ≤ where
  norm_smul_le : ‚àÄ (a : Œ±) (b : Œ≤), ‚Äña ‚Ä¢ b‚Äñ ‚â§ ‚Äña‚Äñ * ‚Äñb‚Äñ
#align normed_space NormedSpace

end Prio

variable [NormedField Œ±] [SeminormedAddCommGroup Œ≤]

-- note: while these are currently strictly weaker than the versions without `le`, they will cease
-- to be if we eventually generalize `normed_space` from `normed_field Œ±` to `normed_ring Œ±`.
section Le

theorem norm_smul_le [NormedSpace Œ± Œ≤] (r : Œ±) (x : Œ≤) : ‚Äñr ‚Ä¢ x‚Äñ ‚â§ ‚Äñr‚Äñ * ‚Äñx‚Äñ :=
  NormedSpace.norm_smul_le _ _
#align norm_smul_le norm_smul_le

theorem nnnorm_smul_le [NormedSpace Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚Äñs ‚Ä¢ x‚Äñ‚Çä ‚â§ ‚Äñs‚Äñ‚Çä * ‚Äñx‚Äñ‚Çä :=
  norm_smul_le s x
#align nnnorm_smul_le nnnorm_smul_le

theorem dist_smul_le [NormedSpace Œ± Œ≤] (s : Œ±) (x y : Œ≤) : dist (s ‚Ä¢ x) (s ‚Ä¢ y) ‚â§ ‚Äñs‚Äñ * dist x y :=
  by simpa only [dist_eq_norm, ‚Üê smul_sub] using norm_smul_le _ _
#align dist_smul_le dist_smul_le

theorem nndist_smul_le [NormedSpace Œ± Œ≤] (s : Œ±) (x y : Œ≤) :
    nndist (s ‚Ä¢ x) (s ‚Ä¢ y) ‚â§ ‚Äñs‚Äñ‚Çä * nndist x y :=
  dist_smul_le s x y
#align nndist_smul_le nndist_smul_le

end Le

-- see Note [lower instance priority]
instance (priority := 100) NormedSpace.boundedSMul [NormedSpace Œ± Œ≤] : BoundedSMul Œ± Œ≤
    where
  dist_smul_pair' x y‚ÇÅ y‚ÇÇ := by simpa [dist_eq_norm, smul_sub] using norm_smul_le x (y‚ÇÅ - y‚ÇÇ)
  dist_pair_smul' x‚ÇÅ x‚ÇÇ y := by simpa [dist_eq_norm, sub_smul] using norm_smul_le (x‚ÇÅ - x‚ÇÇ) y
#align normed_space.has_bounded_smul NormedSpace.boundedSMul

-- Shortcut instance, as otherwise this will be found by `normed_space.to_module` and be
-- noncomputable.
instance : Module ‚Ñù ‚Ñù := by infer_instance

instance NormedField.toNormedSpace : NormedSpace Œ± Œ± where norm_smul_le a b := norm_mul_le a b
#align normed_field.to_normed_space NormedField.toNormedSpace

theorem norm_smul [NormedSpace Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚Äñs ‚Ä¢ x‚Äñ = ‚Äñs‚Äñ * ‚Äñx‚Äñ :=
  by
  by_cases h : s = 0
  ¬∑ simp [h]
  ¬∑ refine' le_antisymm (norm_smul_le s x) _
    calc
      ‚Äñs‚Äñ * ‚Äñx‚Äñ = ‚Äñs‚Äñ * ‚Äñs‚Åª¬π ‚Ä¢ s ‚Ä¢ x‚Äñ := by rw [inv_smul_smul‚ÇÄ h]
      _ ‚â§ ‚Äñs‚Äñ * (‚Äñs‚Åª¬π‚Äñ * ‚Äñs ‚Ä¢ x‚Äñ) := (mul_le_mul_of_nonneg_left (norm_smul_le _ _) (norm_nonneg _))
      _ = ‚Äñs ‚Ä¢ x‚Äñ := by rw [norm_inv, ‚Üê mul_assoc, mul_inv_cancel (mt norm_eq_zero.1 h), one_mul]
      
#align norm_smul norm_smul

theorem norm_zsmul (Œ±) [NormedField Œ±] [NormedSpace Œ± Œ≤] (n : ‚Ñ§) (x : Œ≤) :
    ‚Äñn ‚Ä¢ x‚Äñ = ‚Äñ(n : Œ±)‚Äñ * ‚Äñx‚Äñ := by rw [‚Üê norm_smul, ‚Üê Int.smul_one_eq_coe, smul_assoc, one_smul]
#align norm_zsmul norm_zsmul

@[simp]
theorem abs_norm_eq_norm (z : Œ≤) : |‚Äñz‚Äñ| = ‚Äñz‚Äñ :=
  (abs_eq (norm_nonneg z)).mpr (Or.inl rfl)
#align abs_norm_eq_norm abs_norm_eq_norm

theorem inv_norm_smul_mem_closed_unit_ball [NormedSpace ‚Ñù Œ≤] (x : Œ≤) :
    ‚Äñx‚Äñ‚Åª¬π ‚Ä¢ x ‚àà closedBall (0 : Œ≤) 1 := by
  simp only [mem_closedBall_zero_iff, norm_smul, norm_inv, norm_norm, ‚Üê div_eq_inv_mul,
    div_self_le_one]
#align inv_norm_smul_mem_closed_unit_ball inv_norm_smul_mem_closed_unit_ball

theorem dist_smul‚ÇÄ [NormedSpace Œ± Œ≤] (s : Œ±) (x y : Œ≤) : dist (s ‚Ä¢ x) (s ‚Ä¢ y) = ‚Äñs‚Äñ * dist x y := by
  simp only [dist_eq_norm, (norm_smul _ _).symm, smul_sub]
#align dist_smul‚ÇÄ dist_smul‚ÇÄ

theorem nnnorm_smul [NormedSpace Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚Äñs ‚Ä¢ x‚Äñ‚Çä = ‚Äñs‚Äñ‚Çä * ‚Äñx‚Äñ‚Çä :=
  NNReal.eq <| norm_smul s x
#align nnnorm_smul nnnorm_smul

theorem nndist_smul‚ÇÄ [NormedSpace Œ± Œ≤] (s : Œ±) (x y : Œ≤) :
    nndist (s ‚Ä¢ x) (s ‚Ä¢ y) = ‚Äñs‚Äñ‚Çä * nndist x y :=
  NNReal.eq <| dist_smul‚ÇÄ s x y
#align nndist_smul‚ÇÄ nndist_smul‚ÇÄ

theorem lipschitzWith_smul [NormedSpace Œ± Œ≤] (s : Œ±) : LipschitzWith ‚Äñs‚Äñ‚Çä ((¬∑ ‚Ä¢ ¬∑) s : Œ≤ ‚Üí Œ≤) :=
  lipschitzWith_iff_dist_le_mul.2 fun x y => by rw [dist_smul‚ÇÄ, coe_nnnorm]
#align lipschitz_with_smul lipschitzWith_smul

theorem norm_smul_of_nonneg [NormedSpace ‚Ñù Œ≤] {t : ‚Ñù} (ht : 0 ‚â§ t) (x : Œ≤) : ‚Äñt ‚Ä¢ x‚Äñ = t * ‚Äñx‚Äñ := by
  rw [norm_smul, Real.norm_eq_abs, abs_of_nonneg ht]
#align norm_smul_of_nonneg norm_smul_of_nonneg

variable {E : Type _} [SeminormedAddCommGroup E] [NormedSpace Œ± E]

variable {F : Type _} [SeminormedAddCommGroup F] [NormedSpace Œ± F]

theorem eventually_nhds_norm_smul_sub_lt (c : Œ±) (x : E) {Œµ : ‚Ñù} (h : 0 < Œµ) :
    ‚àÄ·∂† y in ùìù x, ‚Äñc ‚Ä¢ (y - x)‚Äñ < Œµ :=
  have : Tendsto (fun y => ‚Äñc ‚Ä¢ (y - x)‚Äñ) (ùìù x) (ùìù 0) :=
    ((continuous_id.sub continuous_const).const_smul _).norm.tendsto' _ _ (by simp)
  this.Eventually (gt_mem_nhds h)
#align eventually_nhds_norm_smul_sub_lt eventually_nhds_norm_smul_sub_lt

theorem Filter.Tendsto.zero_smul_isBoundedUnder_le {f : Œπ ‚Üí Œ±} {g : Œπ ‚Üí E} {l : Filter Œπ}
    (hf : Tendsto f l (ùìù 0)) (hg : IsBoundedUnder (¬∑ ‚â§ ¬∑) l (norm ‚àò g)) :
    Tendsto (fun x => f x ‚Ä¢ g x) l (ùìù 0) :=
  hf.op_zero_isBoundedUnder_le hg (¬∑ ‚Ä¢ ¬∑) norm_smul_le
#align filter.tendsto.zero_smul_is_bounded_under_le Filter.Tendsto.zero_smul_isBoundedUnder_le

theorem Filter.IsBoundedUnder.smul_tendsto_zero {f : Œπ ‚Üí Œ±} {g : Œπ ‚Üí E} {l : Filter Œπ}
    (hf : IsBoundedUnder (¬∑ ‚â§ ¬∑) l (norm ‚àò f)) (hg : Tendsto g l (ùìù 0)) :
    Tendsto (fun x => f x ‚Ä¢ g x) l (ùìù 0) :=
  hg.op_zero_isBoundedUnder_le hf (flip (¬∑ ‚Ä¢ ¬∑)) fun x y =>
    (norm_smul_le y x).trans_eq (mul_comm _ _)
#align filter.is_bounded_under.smul_tendsto_zero Filter.IsBoundedUnder.smul_tendsto_zero

theorem closure_ball [NormedSpace ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :
    closure (ball x r) = closedBall x r :=
  by
  refine' subset.antisymm closure_ball_subset_closed_ball fun y hy => _
  have : ContinuousWithinAt (fun c : ‚Ñù => c ‚Ä¢ (y - x) + x) (Ico 0 1) 1 :=
    ((continuous_id.smul continuous_const).add continuous_const).ContinuousWithinAt
  convert this.mem_closure _ _
  ¬∑ rw [one_smul, sub_add_cancel]
  ¬∑ simp [closure_Ico zero_ne_one, zero_le_one]
  ¬∑ rintro c ‚ü®hc0, hc1‚ü©
    rw [mem_ball, dist_eq_norm, add_sub_cancel, norm_smul, Real.norm_eq_abs, abs_of_nonneg hc0,
      mul_comm, ‚Üê mul_one r]
    rw [mem_closed_ball, dist_eq_norm] at hy
    replace hr : 0 < r
    exact ((norm_nonneg _).trans hy).lt_of_ne hr.symm
    apply mul_lt_mul' <;> assumption
#align closure_ball closure_ball

theorem frontier_ball [NormedSpace ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :
    frontier (ball x r) = sphere x r :=
  by
  rw [frontier, closure_ball x hr, is_open_ball.interior_eq]
  ext x; exact (@eq_iff_le_not_lt ‚Ñù _ _ _).symm
#align frontier_ball frontier_ball

theorem interior_closedBall [NormedSpace ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :
    interior (closedBall x r) = ball x r :=
  by
  cases' hr.lt_or_lt with hr hr
  ¬∑ rw [closed_ball_eq_empty.2 hr, ball_eq_empty.2 hr.le, interior_empty]
  refine' subset.antisymm _ ball_subset_interior_closed_ball
  intro y hy
  rcases(mem_closed_ball.1 <| interior_subset hy).lt_or_eq with (hr | rfl)
  ¬∑ exact hr
  set f : ‚Ñù ‚Üí E := fun c : ‚Ñù => c ‚Ä¢ (y - x) + x
  suffices f ‚Åª¬π' closed_ball x (dist y x) ‚äÜ Icc (-1) 1
    by
    have hfc : Continuous f := (continuous_id.smul continuous_const).add continuous_const
    have hf1 : (1 : ‚Ñù) ‚àà f ‚Åª¬π' interior (closed_ball x <| dist y x) := by simpa [f]
    have h1 : (1 : ‚Ñù) ‚àà interior (Icc (-1 : ‚Ñù) 1) :=
      interior_mono this (preimage_interior_subset_interior_preimage hfc hf1)
    contrapose h1
    simp
  intro c hc
  rw [mem_Icc, ‚Üê abs_le, ‚Üê Real.norm_eq_abs, ‚Üê mul_le_mul_right hr]
  simpa [f, dist_eq_norm, norm_smul] using hc
#align interior_closed_ball interior_closedBall

theorem frontier_closedBall [NormedSpace ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :
    frontier (closedBall x r) = sphere x r := by
  rw [frontier, closure_closed_ball, interior_closedBall x hr, closed_ball_diff_ball]
#align frontier_closed_ball frontier_closedBall

instance {E : Type _} [NormedAddCommGroup E] [NormedSpace ‚Ñö E] (e : E) :
    DiscreteTopology <| AddSubgroup.zmultiples e :=
  by
  rcases eq_or_ne e 0 with (rfl | he)
  ¬∑ rw [AddSubgroup.zmultiples_zero_eq_bot]
    infer_instance
  ¬∑ rw [discreteTopology_iff_open_singleton_zero, isOpen_induced_iff]
    refine' ‚ü®Metric.ball 0 ‚Äñe‚Äñ, Metric.isOpen_ball, _‚ü©
    ext ‚ü®x, hx‚ü©
    obtain ‚ü®k, rfl‚ü© := add_subgroup.mem_zmultiples_iff.mp hx
    rw [mem_preimage, mem_ball_zero_iff, AddSubgroup.coe_mk, mem_singleton_iff, Subtype.ext_iff,
      AddSubgroup.coe_mk, AddSubgroup.coe_zero, norm_zsmul ‚Ñö k e, Int.norm_cast_rat,
      Int.norm_eq_abs, ‚Üê Int.cast_abs, mul_lt_iff_lt_one_left (norm_pos_iff.mpr he), ‚Üê
      @Int.cast_one ‚Ñù _, Int.cast_lt, Int.abs_lt_one_iff, smul_eq_zero, or_iff_left he]

/-- A (semi) normed real vector space is homeomorphic to the unit ball in the same space.
This homeomorphism sends `x : E` to `(1 + ‚Äñx‚Äñ¬≤)^(- ¬Ω) ‚Ä¢ x`.

In many cases the actual implementation is not important, so we don't mark the projection lemmas
`homeomorph_unit_ball_apply_coe` and `homeomorph_unit_ball_symm_apply` as `@[simp]`.

See also `cont_diff_homeomorph_unit_ball` and `cont_diff_on_homeomorph_unit_ball_symm` for
smoothness properties that hold when `E` is an inner-product space. -/
@[simps (config := { attrs := [] })]
noncomputable def homeomorphUnitBall [NormedSpace ‚Ñù E] : E ‚âÉ‚Çú ball (0 : E) 1
    where
  toFun x :=
    ‚ü®(1 + ‚Äñx‚Äñ ^ 2).sqrt‚Åª¬π ‚Ä¢ x, by
      have : 0 < 1 + ‚Äñx‚Äñ ^ 2 := by positivity
      rw [mem_ball_zero_iff, norm_smul, Real.norm_eq_abs, abs_inv, ‚Üê div_eq_inv_mul,
        div_lt_one (abs_pos.mpr <| real.sqrt_ne_zero'.mpr this), ‚Üê abs_norm_eq_norm x, ‚Üê sq_lt_sq,
        abs_norm_eq_norm, Real.sq_sqrt this.le]
      exact lt_one_add _‚ü©
  invFun y := (1 - ‚Äñ(y : E)‚Äñ ^ 2).sqrt‚Åª¬π ‚Ä¢ (y : E)
  left_inv x := by
    field_simp [norm_smul, smul_smul, (zero_lt_one_add_norm_sq x).ne',
      Real.sq_sqrt (zero_lt_one_add_norm_sq x).le, ‚Üê Real.sqrt_div (zero_lt_one_add_norm_sq x).le]
  right_inv y :=
    by
    have : 0 < 1 - ‚Äñ(y : E)‚Äñ ^ 2 := by
      nlinarith [norm_nonneg (y : E), (mem_ball_zero_iff.1 y.2 : ‚Äñ(y : E)‚Äñ < 1)]
    field_simp [norm_smul, smul_smul, this.ne', Real.sq_sqrt this.le, ‚Üê Real.sqrt_div this.le]
  continuous_toFun := by
    suffices : Continuous fun x => (1 + ‚Äñx‚Äñ ^ 2).sqrt‚Åª¬π;
    exact (this.smul continuous_id).subtype_mk _
    refine' Continuous.inv‚ÇÄ _ fun x => real.sqrt_ne_zero'.mpr (by positivity)
    continuity
  continuous_invFun :=
    by
    suffices ‚àÄ y : ball (0 : E) 1, (1 - ‚Äñ(y : E)‚Äñ ^ 2).sqrt ‚â† 0 by continuity
    intro y
    rw [Real.sqrt_ne_zero']
    nlinarith [norm_nonneg (y : E), (mem_ball_zero_iff.1 y.2 : ‚Äñ(y : E)‚Äñ < 1)]
#align homeomorph_unit_ball homeomorphUnitBall

@[simp]
theorem coe_homeomorphUnitBall_apply_zero [NormedSpace ‚Ñù E] :
    (homeomorphUnitBall (0 : E) : E) = 0 := by simp [homeomorphUnitBall]
#align coe_homeomorph_unit_ball_apply_zero coe_homeomorphUnitBall_apply_zero

open NormedField

instance : NormedSpace Œ± (ULift E) :=
  { ULift.normedAddCommGroup, ULift.module' with
    norm_smul_le := fun s x => (norm_smul_le s x.down : _) }

/-- The product of two normed spaces is a normed space, with the sup norm. -/
instance Prod.normedSpace : NormedSpace Œ± (E √ó F) :=
  { Prod.normedAddCommGroup, Prod.module with
    norm_smul_le := fun s x => by simp [Prod.norm_def, norm_smul_le, mul_max_of_nonneg] }
#align prod.normed_space Prod.normedSpace

/-- The product of finitely many normed spaces is a normed space, with the sup norm. -/
instance Pi.normedSpace {E : Œπ ‚Üí Type _} [Fintype Œπ] [‚àÄ i, SeminormedAddCommGroup (E i)]
    [‚àÄ i, NormedSpace Œ± (E i)] : NormedSpace Œ± (‚àÄ i, E i)
    where norm_smul_le a f :=
    by
    simp_rw [‚Üê coe_nnnorm, ‚Üê NNReal.coe_mul, NNReal.coe_le_coe, Pi.nnnorm_def,
      NNReal.mul_finset_sup]
    exact Finset.sup_mono_fun fun _ _ => norm_smul_le _ _
#align pi.normed_space Pi.normedSpace

instance MulOpposite.normedSpace : NormedSpace Œ± E·µê·µí·µñ :=
  { MulOpposite.normedAddCommGroup, MulOpposite.module _ with
    norm_smul_le := fun s x => norm_smul_le s x.unop }
#align mul_opposite.normed_space MulOpposite.normedSpace

/-- A subspace of a normed space is also a normed space, with the restriction of the norm. -/
instance Submodule.normedSpace {ùïú R : Type _} [SMul ùïú R] [NormedField ùïú] [Ring R] {E : Type _}
    [SeminormedAddCommGroup E] [NormedSpace ùïú E] [Module R E] [IsScalarTower ùïú R E]
    (s : Submodule R E) : NormedSpace ùïú s where norm_smul_le c x := norm_smul_le c (x : E)
#align submodule.normed_space Submodule.normedSpace

/-- If there is a scalar `c` with `‚Äñc‚Äñ>1`, then any element with nonzero norm can be
moved by scalar multiplication to any shell of width `‚Äñc‚Äñ`. Also recap information on the norm of
the rescaling element that shows up in applications. -/
theorem rescale_to_shell_semi_normed_zpow {c : Œ±} (hc : 1 < ‚Äñc‚Äñ) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E}
    (hx : ‚Äñx‚Äñ ‚â† 0) :
    ‚àÉ n : ‚Ñ§, c ^ n ‚â† 0 ‚àß ‚Äñc ^ n ‚Ä¢ x‚Äñ < Œµ ‚àß Œµ / ‚Äñc‚Äñ ‚â§ ‚Äñc ^ n ‚Ä¢ x‚Äñ ‚àß ‚Äñc ^ n‚Äñ‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚Äñc‚Äñ * ‚Äñx‚Äñ :=
  by
  have xŒµpos : 0 < ‚Äñx‚Äñ / Œµ := div_pos ((Ne.symm hx).le_iff_lt.1 (norm_nonneg x)) Œµpos
  rcases exists_mem_Ico_zpow xŒµpos hc with ‚ü®n, hn‚ü©
  have cpos : 0 < ‚Äñc‚Äñ := lt_trans (zero_lt_one : (0 : ‚Ñù) < 1) hc
  have cnpos : 0 < ‚Äñc ^ (n + 1)‚Äñ := by
    rw [norm_zpow]
    exact lt_trans xŒµpos hn.2
  refine' ‚ü®-(n + 1), _, _, _, _‚ü©
  show c ^ (-(n + 1)) ‚â† 0; exact zpow_ne_zero _ (norm_pos_iff.1 cpos)
  show ‚Äñc ^ (-(n + 1)) ‚Ä¢ x‚Äñ < Œµ
  ¬∑ rw [norm_smul, zpow_neg, norm_inv, ‚Üê div_eq_inv_mul, div_lt_iff cnpos, mul_comm, norm_zpow]
    exact (div_lt_iff Œµpos).1 hn.2
  show Œµ / ‚Äñc‚Äñ ‚â§ ‚Äñc ^ (-(n + 1)) ‚Ä¢ x‚Äñ
  ¬∑ rw [zpow_neg, div_le_iff cpos, norm_smul, norm_inv, norm_zpow, zpow_add‚ÇÄ (ne_of_gt cpos),
      zpow_one, mul_inv_rev, mul_comm, ‚Üê mul_assoc, ‚Üê mul_assoc, mul_inv_cancel (ne_of_gt cpos),
      one_mul, ‚Üê div_eq_inv_mul, le_div_iff (zpow_pos_of_pos cpos _), mul_comm]
    exact (le_div_iff Œµpos).1 hn.1
  show ‚Äñc ^ (-(n + 1))‚Äñ‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚Äñc‚Äñ * ‚Äñx‚Äñ
  ¬∑ rw [zpow_neg, norm_inv, inv_inv, norm_zpow, zpow_add‚ÇÄ cpos.ne', zpow_one, mul_right_comm, ‚Üê
      div_eq_inv_mul]
    exact mul_le_mul_of_nonneg_right hn.1 (norm_nonneg _)
#align rescale_to_shell_semi_normed_zpow rescale_to_shell_semi_normed_zpow

/-- If there is a scalar `c` with `‚Äñc‚Äñ>1`, then any element with nonzero norm can be
moved by scalar multiplication to any shell of width `‚Äñc‚Äñ`. Also recap information on the norm of
the rescaling element that shows up in applications. -/
theorem rescale_to_shell_semi_normed {c : Œ±} (hc : 1 < ‚Äñc‚Äñ) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E}
    (hx : ‚Äñx‚Äñ ‚â† 0) : ‚àÉ d : Œ±, d ‚â† 0 ‚àß ‚Äñd ‚Ä¢ x‚Äñ < Œµ ‚àß Œµ / ‚Äñc‚Äñ ‚â§ ‚Äñd ‚Ä¢ x‚Äñ ‚àß ‚Äñd‚Äñ‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚Äñc‚Äñ * ‚Äñx‚Äñ :=
  let ‚ü®n, hn‚ü© := rescale_to_shell_semi_normed_zpow hc Œµpos hx
  ‚ü®_, hn‚ü©
#align rescale_to_shell_semi_normed rescale_to_shell_semi_normed

end SeminormedAddCommGroup

/-- A linear map from a `module` to a `normed_space` induces a `normed_space` structure on the
domain, using the `seminormed_add_comm_group.induced` norm.

See note [reducible non-instances] -/
@[reducible]
def NormedSpace.induced {F : Type _} (Œ± Œ≤ Œ≥ : Type _) [NormedField Œ±] [AddCommGroup Œ≤] [Module Œ± Œ≤]
    [SeminormedAddCommGroup Œ≥] [NormedSpace Œ± Œ≥] [LinearMapClass F Œ± Œ≤ Œ≥] (f : F) :
    @NormedSpace Œ± Œ≤ _ (SeminormedAddCommGroup.induced Œ≤ Œ≥ f)
    where norm_smul_le a b := by
    unfold norm
    exact (map_smul f a b).symm ‚ñ∏ norm_smul_le a (f b)
#align normed_space.induced NormedSpace.induced

section NormedAddCommGroup

variable [NormedField Œ±]

variable {E : Type _} [NormedAddCommGroup E] [NormedSpace Œ± E]

variable {F : Type _} [NormedAddCommGroup F] [NormedSpace Œ± F]

open NormedField

/-- While this may appear identical to `normed_space.to_module`, it contains an implicit argument
involving `normed_add_comm_group.to_seminormed_add_comm_group` that typeclass inference has trouble
inferring.

Specifically, the following instance cannot be found without this `normed_space.to_module'`:
```lean
example
  (ùïú Œπ : Type*) (E : Œπ ‚Üí Type*)
  [normed_field ùïú] [Œ† i, normed_add_comm_group (E i)] [Œ† i, normed_space ùïú (E i)] :
  Œ† i, module ùïú (E i) := by apply_instance
```

[This Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Typeclass.20resolution.20under.20binders/near/245151099)
gives some more context. -/
instance (priority := 100) NormedSpace.toModule' : Module Œ± F :=
  NormedSpace.toModule
#align normed_space.to_module' NormedSpace.toModule'

section Surj

variable (E) [NormedSpace ‚Ñù E] [Nontrivial E]

theorem exists_norm_eq {c : ‚Ñù} (hc : 0 ‚â§ c) : ‚àÉ x : E, ‚Äñx‚Äñ = c :=
  by
  rcases exists_ne (0 : E) with ‚ü®x, hx‚ü©
  rw [‚Üê norm_ne_zero_iff] at hx
  use c ‚Ä¢ ‚Äñx‚Äñ‚Åª¬π ‚Ä¢ x
  simp [norm_smul, Real.norm_of_nonneg hc, hx]
#align exists_norm_eq exists_norm_eq

@[simp]
theorem range_norm : range (norm : E ‚Üí ‚Ñù) = Ici 0 :=
  Subset.antisymm (range_subset_iff.2 norm_nonneg) fun _ => exists_norm_eq E
#align range_norm range_norm

theorem nnnorm_surjective : Surjective (nnnorm : E ‚Üí ‚Ñù‚â•0) := fun c =>
  (exists_norm_eq E c.coe_nonneg).imp fun x h => NNReal.eq h
#align nnnorm_surjective nnnorm_surjective

@[simp]
theorem range_nnnorm : range (nnnorm : E ‚Üí ‚Ñù‚â•0) = univ :=
  (nnnorm_surjective E).range_eq
#align range_nnnorm range_nnnorm

end Surj

/-- If `E` is a nontrivial topological module over `‚Ñù`, then `E` has no isolated points.
This is a particular case of `module.punctured_nhds_ne_bot`. -/
instance Real.punctured_nhds_module_neBot {E : Type _} [AddCommGroup E] [TopologicalSpace E]
    [ContinuousAdd E] [Nontrivial E] [Module ‚Ñù E] [ContinuousSMul ‚Ñù E] (x : E) : NeBot (ùìù[‚â†] x) :=
  Module.punctured_nhds_neBot ‚Ñù E x
#align real.punctured_nhds_module_ne_bot Real.punctured_nhds_module_neBot

theorem interior_closed_ball' [NormedSpace ‚Ñù E] [Nontrivial E] (x : E) (r : ‚Ñù) :
    interior (closedBall x r) = ball x r :=
  by
  rcases eq_or_ne r 0 with (rfl | hr)
  ¬∑ rw [closed_ball_zero, ball_zero, interior_singleton]
  ¬∑ exact interior_closedBall x hr
#align interior_closed_ball' interior_closed_ball'

theorem frontier_closed_ball' [NormedSpace ‚Ñù E] [Nontrivial E] (x : E) (r : ‚Ñù) :
    frontier (closedBall x r) = sphere x r := by
  rw [frontier, closure_closed_ball, interior_closed_ball' x r, closed_ball_diff_ball]
#align frontier_closed_ball' frontier_closed_ball'

variable {Œ±}

theorem rescale_to_shell_zpow {c : Œ±} (hc : 1 < ‚Äñc‚Äñ) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E} (hx : x ‚â† 0) :
    ‚àÉ n : ‚Ñ§, c ^ n ‚â† 0 ‚àß ‚Äñc ^ n ‚Ä¢ x‚Äñ < Œµ ‚àß Œµ / ‚Äñc‚Äñ ‚â§ ‚Äñc ^ n ‚Ä¢ x‚Äñ ‚àß ‚Äñc ^ n‚Äñ‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚Äñc‚Äñ * ‚Äñx‚Äñ :=
  rescale_to_shell_semi_normed_zpow hc Œµpos (mt norm_eq_zero.1 hx)
#align rescale_to_shell_zpow rescale_to_shell_zpow

/-- If there is a scalar `c` with `‚Äñc‚Äñ>1`, then any element can be moved by scalar multiplication to
any shell of width `‚Äñc‚Äñ`. Also recap information on the norm of the rescaling element that shows
up in applications. -/
theorem rescale_to_shell {c : Œ±} (hc : 1 < ‚Äñc‚Äñ) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E} (hx : x ‚â† 0) :
    ‚àÉ d : Œ±, d ‚â† 0 ‚àß ‚Äñd ‚Ä¢ x‚Äñ < Œµ ‚àß Œµ / ‚Äñc‚Äñ ‚â§ ‚Äñd ‚Ä¢ x‚Äñ ‚àß ‚Äñd‚Äñ‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚Äñc‚Äñ * ‚Äñx‚Äñ :=
  rescale_to_shell_semi_normed hc Œµpos (mt norm_eq_zero.1 hx)
#align rescale_to_shell rescale_to_shell

end NormedAddCommGroup

section NontriviallyNormedSpace

variable (ùïú E : Type _) [NontriviallyNormedField ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E]
  [Nontrivial E]

include ùïú

/-- If `E` is a nontrivial normed space over a nontrivially normed field `ùïú`, then `E` is unbounded:
for any `c : ‚Ñù`, there exists a vector `x : E` with norm strictly greater than `c`. -/
theorem NormedSpace.exists_lt_norm (c : ‚Ñù) : ‚àÉ x : E, c < ‚Äñx‚Äñ :=
  by
  rcases exists_ne (0 : E) with ‚ü®x, hx‚ü©
  rcases NormedField.exists_lt_norm ùïú (c / ‚Äñx‚Äñ) with ‚ü®r, hr‚ü©
  use r ‚Ä¢ x
  rwa [norm_smul, ‚Üê div_lt_iff]
  rwa [norm_pos_iff]
#align normed_space.exists_lt_norm NormedSpace.exists_lt_norm

protected theorem NormedSpace.unbounded_univ : ¬¨Bounded (univ : Set E) := fun h =>
  let ‚ü®R, hR‚ü© := bounded_iff_forall_norm_le.1 h
  let ‚ü®x, hx‚ü© := NormedSpace.exists_lt_norm ùïú E R
  hx.not_le (hR x trivial)
#align normed_space.unbounded_univ NormedSpace.unbounded_univ

/-- A normed vector space over a nontrivially normed field is a noncompact space. This cannot be
an instance because in order to apply it, Lean would have to search for `normed_space ùïú E` with
unknown `ùïú`. We register this as an instance in two cases: `ùïú = E` and `ùïú = ‚Ñù`. -/
protected theorem NormedSpace.noncompactSpace : NoncompactSpace E :=
  ‚ü®fun h => NormedSpace.unbounded_univ ùïú _ h.Bounded‚ü©
#align normed_space.noncompact_space NormedSpace.noncompactSpace

instance (priority := 100) NontriviallyNormedField.noncompactSpace : NoncompactSpace ùïú :=
  NormedSpace.noncompactSpace ùïú ùïú
#align nontrivially_normed_field.noncompact_space NontriviallyNormedField.noncompactSpace

omit ùïú

instance (priority := 100) RealNormedSpace.noncompactSpace [NormedSpace ‚Ñù E] : NoncompactSpace E :=
  NormedSpace.noncompactSpace ‚Ñù E
#align real_normed_space.noncompact_space RealNormedSpace.noncompactSpace

end NontriviallyNormedSpace

section NormedAlgebra

/-- A normed algebra `ùïú'` over `ùïú` is normed module that is also an algebra.

See the implementation notes for `algebra` for a discussion about non-unital algebras. Following
the strategy there, a non-unital *normed* algebra can be written as:
```lean
variables [normed_field ùïú] [non_unital_semi_normed_ring ùïú']
variables [normed_module ùïú ùïú'] [smul_comm_class ùïú ùïú' ùïú'] [is_scalar_tower ùïú ùïú' ùïú']
```
-/
class NormedAlgebra (ùïú : Type _) (ùïú' : Type _) [NormedField ùïú] [SeminormedRing ùïú'] extends
  Algebra ùïú ùïú' where
  norm_smul_le : ‚àÄ (r : ùïú) (x : ùïú'), ‚Äñr ‚Ä¢ x‚Äñ ‚â§ ‚Äñr‚Äñ * ‚Äñx‚Äñ
#align normed_algebra NormedAlgebra

variable {ùïú : Type _} (ùïú' : Type _) [NormedField ùïú] [SeminormedRing ùïú'] [NormedAlgebra ùïú ùïú']

instance (priority := 100) NormedAlgebra.toNormedSpace : NormedSpace ùïú ùïú'
    where norm_smul_le := NormedAlgebra.norm_smul_le
#align normed_algebra.to_normed_space NormedAlgebra.toNormedSpace

/-- While this may appear identical to `normed_algebra.to_normed_space`, it contains an implicit
argument involving `normed_ring.to_semi_normed_ring` that typeclass inference has trouble inferring.

Specifically, the following instance cannot be found without this `normed_space.to_module'`:
```lean
example
  (ùïú Œπ : Type*) (E : Œπ ‚Üí Type*)
  [normed_field ùïú] [Œ† i, normed_ring (E i)] [Œ† i, normed_algebra ùïú (E i)] :
  Œ† i, module ùïú (E i) := by apply_instance
```

See `normed_space.to_module'` for a similar situation. -/
instance (priority := 100) NormedAlgebra.toNormedSpace' {ùïú'} [NormedRing ùïú'] [NormedAlgebra ùïú ùïú'] :
    NormedSpace ùïú ùïú' := by infer_instance
#align normed_algebra.to_normed_space' NormedAlgebra.toNormedSpace'

theorem norm_algebraMap (x : ùïú) : ‚ÄñalgebraMap ùïú ùïú' x‚Äñ = ‚Äñx‚Äñ * ‚Äñ(1 : ùïú')‚Äñ :=
  by
  rw [Algebra.algebraMap_eq_smul_one]
  exact norm_smul _ _
#align norm_algebra_map norm_algebraMap

theorem nnnorm_algebraMap (x : ùïú) : ‚ÄñalgebraMap ùïú ùïú' x‚Äñ‚Çä = ‚Äñx‚Äñ‚Çä * ‚Äñ(1 : ùïú')‚Äñ‚Çä :=
  Subtype.ext <| norm_algebraMap ùïú' x
#align nnnorm_algebra_map nnnorm_algebraMap

@[simp]
theorem norm_algebra_map' [NormOneClass ùïú'] (x : ùïú) : ‚ÄñalgebraMap ùïú ùïú' x‚Äñ = ‚Äñx‚Äñ := by
  rw [norm_algebraMap, norm_one, mul_one]
#align norm_algebra_map' norm_algebra_map'

@[simp]
theorem nnnorm_algebra_map' [NormOneClass ùïú'] (x : ùïú) : ‚ÄñalgebraMap ùïú ùïú' x‚Äñ‚Çä = ‚Äñx‚Äñ‚Çä :=
  Subtype.ext <| norm_algebra_map' _ _
#align nnnorm_algebra_map' nnnorm_algebra_map'

section NNReal

variable [NormOneClass ùïú'] [NormedAlgebra ‚Ñù ùïú']

@[simp]
theorem norm_algebraMap_nNReal (x : ‚Ñù‚â•0) : ‚ÄñalgebraMap ‚Ñù‚â•0 ùïú' x‚Äñ = x :=
  (norm_algebra_map' ùïú' (x : ‚Ñù)).symm ‚ñ∏ Real.norm_of_nonneg x.Prop
#align norm_algebra_map_nnreal norm_algebraMap_nNReal

@[simp]
theorem nnnorm_algebraMap_nNReal (x : ‚Ñù‚â•0) : ‚ÄñalgebraMap ‚Ñù‚â•0 ùïú' x‚Äñ‚Çä = x :=
  Subtype.ext <| norm_algebraMap_nNReal ùïú' x
#align nnnorm_algebra_map_nnreal nnnorm_algebraMap_nNReal

end NNReal

variable (ùïú ùïú')

/-- In a normed algebra, the inclusion of the base field in the extended field is an isometry. -/
theorem algebraMap_isometry [NormOneClass ùïú'] : Isometry (algebraMap ùïú ùïú') :=
  by
  refine' Isometry.of_dist_eq fun x y => _
  rw [dist_eq_norm, dist_eq_norm, ‚Üê RingHom.map_sub, norm_algebra_map']
#align algebra_map_isometry algebraMap_isometry

instance NormedAlgebra.id : NormedAlgebra ùïú ùïú :=
  { NormedField.toNormedSpace, Algebra.id ùïú with }
#align normed_algebra.id NormedAlgebra.id

/-- Any normed characteristic-zero division ring that is a normed_algebra over the reals is also a
normed algebra over the rationals.

Phrased another way, if `ùïú` is a normed algebra over the reals, then `algebra_rat` respects that
norm. -/
instance normedAlgebraRat {ùïú} [NormedDivisionRing ùïú] [CharZero ùïú] [NormedAlgebra ‚Ñù ùïú] :
    NormedAlgebra ‚Ñö ùïú
    where norm_smul_le q x := by
    rw [‚Üê smul_one_smul ‚Ñù q x, Rat.smul_one_eq_coe, norm_smul, Rat.norm_cast_real]
#align normed_algebra_rat normedAlgebraRat

instance PUnit.normedAlgebra : NormedAlgebra ùïú PUnit
    where norm_smul_le q x := by simp only [PUnit.norm_eq_zero, MulZeroClass.mul_zero]
#align punit.normed_algebra PUnit.normedAlgebra

instance : NormedAlgebra ùïú (ULift ùïú') :=
  { ULift.normedSpace with }

/-- The product of two normed algebras is a normed algebra, with the sup norm. -/
instance Prod.normedAlgebra {E F : Type _} [SeminormedRing E] [SeminormedRing F] [NormedAlgebra ùïú E]
    [NormedAlgebra ùïú F] : NormedAlgebra ùïú (E √ó F) :=
  { Prod.normedSpace with }
#align prod.normed_algebra Prod.normedAlgebra

/-- The product of finitely many normed algebras is a normed algebra, with the sup norm. -/
instance Pi.normedAlgebra {E : Œπ ‚Üí Type _} [Fintype Œπ] [‚àÄ i, SeminormedRing (E i)]
    [‚àÄ i, NormedAlgebra ùïú (E i)] : NormedAlgebra ùïú (‚àÄ i, E i) :=
  { Pi.normedSpace, Pi.algebra _ E with }
#align pi.normed_algebra Pi.normedAlgebra

instance MulOpposite.normedAlgebra {E : Type _} [SeminormedRing E] [NormedAlgebra ùïú E] :
    NormedAlgebra ùïú E·µê·µí·µñ :=
  { MulOpposite.normedSpace with }
#align mul_opposite.normed_algebra MulOpposite.normedAlgebra

end NormedAlgebra

/-- A non-unital algebra homomorphism from an `algebra` to a `normed_algebra` induces a
`normed_algebra` structure on the domain, using the `semi_normed_ring.induced` norm.

See note [reducible non-instances] -/
@[reducible]
def NormedAlgebra.induced {F : Type _} (Œ± Œ≤ Œ≥ : Type _) [NormedField Œ±] [Ring Œ≤] [Algebra Œ± Œ≤]
    [SeminormedRing Œ≥] [NormedAlgebra Œ± Œ≥] [NonUnitalAlgHomClass F Œ± Œ≤ Œ≥] (f : F) :
    @NormedAlgebra Œ± Œ≤ _ (SeminormedRing.induced Œ≤ Œ≥ f)
    where norm_smul_le a b := by
    unfold norm
    exact (map_smul f a b).symm ‚ñ∏ norm_smul_le a (f b)
#align normed_algebra.induced NormedAlgebra.induced

instance Subalgebra.toNormedAlgebra {ùïú A : Type _} [SeminormedRing A] [NormedField ùïú]
    [NormedAlgebra ùïú A] (S : Subalgebra ùïú A) : NormedAlgebra ùïú S :=
  @NormedAlgebra.induced _ ùïú S A _ (SubringClass.toRing S) S.Algebra _ _ _ S.val
#align subalgebra.to_normed_algebra Subalgebra.toNormedAlgebra

section RestrictScalars

variable (ùïú : Type _) (ùïú' : Type _) [NormedField ùïú] [NormedField ùïú'] [NormedAlgebra ùïú ùïú']
  (E : Type _) [SeminormedAddCommGroup E] [NormedSpace ùïú' E]

instance {ùïú : Type _} {ùïú' : Type _} {E : Type _} [I : SeminormedAddCommGroup E] :
    SeminormedAddCommGroup (RestrictScalars ùïú ùïú' E) :=
  I

instance {ùïú : Type _} {ùïú' : Type _} {E : Type _} [I : NormedAddCommGroup E] :
    NormedAddCommGroup (RestrictScalars ùïú ùïú' E) :=
  I

/-- If `E` is a normed space over `ùïú'` and `ùïú` is a normed algebra over `ùïú'`, then
`restrict_scalars.module` is additionally a `normed_space`. -/
instance : NormedSpace ùïú (RestrictScalars ùïú ùïú' E) :=
  { RestrictScalars.module ùïú ùïú' E with
    norm_smul_le := fun c x =>
      (norm_smul_le (algebraMap ùïú ùïú' c) (_ : E)).trans_eq <| by rw [norm_algebra_map'] }

-- If you think you need this, consider instead reproducing `restrict_scalars.lsmul`
-- appropriately modified here.
/-- The action of the original normed_field on `restrict_scalars ùïú ùïú' E`.
This is not an instance as it would be contrary to the purpose of `restrict_scalars`.
-/
def Module.RestrictScalars.normedSpaceOrig {ùïú : Type _} {ùïú' : Type _} {E : Type _} [NormedField ùïú']
    [SeminormedAddCommGroup E] [I : NormedSpace ùïú' E] : NormedSpace ùïú' (RestrictScalars ùïú ùïú' E) :=
  I
#align module.restrict_scalars.normed_space_orig Module.RestrictScalars.normedSpaceOrig

/-- Warning: This declaration should be used judiciously.
Please consider using `is_scalar_tower` and/or `restrict_scalars ùïú ùïú' E` instead.

This definition allows the `restrict_scalars.normed_space` instance to be put directly on `E`
rather on `restrict_scalars ùïú ùïú' E`. This would be a very bad instance; both because `ùïú'` cannot be
inferred, and because it is likely to create instance diamonds.
-/
def NormedSpace.restrictScalars : NormedSpace ùïú E :=
  RestrictScalars.normedSpace _ ùïú' _
#align normed_space.restrict_scalars NormedSpace.restrictScalars

end RestrictScalars

