/-
Copyright (c) 2022 Bhavik Mehta All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta, Ya√´l Dillies
-/
import Mathlib.Analysis.Convex.Cone.Extension
import Mathlib.Analysis.Convex.Gauge
import Mathlib.Topology.Algebra.Module.FiniteDimension
import Mathlib.Topology.Algebra.Module.LocallyConvex

#align_import analysis.normed_space.hahn_banach.separation from "leanprover-community/mathlib"@"915591b2bb3ea303648db07284a161a7f2a9e3d4"

/-!
# Separation Hahn-Banach theorem

In this file we prove the geometric Hahn-Banach theorem. For any two disjoint convex sets, there
exists a continuous linear functional separating them, geometrically meaning that we can intercalate
a plane between them.

We provide many variations to stricten the result under more assumptions on the convex sets:
* `geometric_hahn_banach_open`: One set is open. Weak separation.
* `geometric_hahn_banach_open_point`, `geometric_hahn_banach_point_open`: One set is open, the
  other is a singleton. Weak separation.
* `geometric_hahn_banach_open_open`: Both sets are open. Semistrict separation.
* `geometric_hahn_banach_compact_closed`, `geometric_hahn_banach_closed_compact`: One set is closed,
  the other one is compact. Strict separation.
* `geometric_hahn_banach_point_closed`, `geometric_hahn_banach_closed_point`: One set is closed, the
  other one is a singleton. Strict separation.
* `geometric_hahn_banach_point_point`: Both sets are singletons. Strict separation.

## TODO

* Eidelheit's theorem
* `Convex ‚Ñù s ‚Üí interior (closure s) ‚äÜ s`
-/


open Set

open Pointwise

variable {ùïú E : Type*}

/-- Given a set `s` which is a convex neighbourhood of `0` and a point `x‚ÇÄ` outside of it, there is
a continuous linear functional `f` separating `x‚ÇÄ` and `s`, in the sense that it sends `x‚ÇÄ` to 1 and
all of `s` to values strictly below `1`. -/
theorem separate_convex_open_set [TopologicalSpace E] [AddCommGroup E] [TopologicalAddGroup E]
    [Module ‚Ñù E] [ContinuousSMul ‚Ñù E] {s : Set E} (hs‚ÇÄ : (0 : E) ‚àà s) (hs‚ÇÅ : Convex ‚Ñù s)
    (hs‚ÇÇ : IsOpen s) {x‚ÇÄ : E} (hx‚ÇÄ : x‚ÇÄ ‚àâ s) : ‚àÉ f : E ‚ÜíL[‚Ñù] ‚Ñù, f x‚ÇÄ = 1 ‚àß ‚àÄ x ‚àà s, f x < 1 := by
  let f : E ‚Üí‚Çó.[‚Ñù] ‚Ñù := LinearPMap.mkSpanSingleton x‚ÇÄ 1 (ne_of_mem_of_not_mem hs‚ÇÄ hx‚ÇÄ).symm
  have := exists_extension_of_le_sublinear f (gauge s) (fun c hc => gauge_smul_of_nonneg hc.le)
    (gauge_add_le hs‚ÇÅ <| absorbent_nhds_zero <| hs‚ÇÇ.mem_nhds hs‚ÇÄ) ?_
  obtain ‚ü®œÜ, hœÜ‚ÇÅ, hœÜ‚ÇÇ‚ü© := this
  have hœÜ‚ÇÉ : œÜ x‚ÇÄ = 1 := by
    rw [‚Üê f.domain.coe_mk x‚ÇÄ (Submodule.mem_span_singleton_self _), hœÜ‚ÇÅ,
      LinearPMap.mkSpanSingleton'_apply_self]
  have hœÜ‚ÇÑ : ‚àÄ x ‚àà s, œÜ x < 1 := fun x hx =>
    (hœÜ‚ÇÇ x).trans_lt (gauge_lt_one_of_mem_of_isOpen hs‚ÇÇ hx)
  ¬∑ refine' ‚ü®‚ü®œÜ, _‚ü©, hœÜ‚ÇÉ, hœÜ‚ÇÑ‚ü©
    refine'
      œÜ.continuous_of_nonzero_on_open _ (hs‚ÇÇ.vadd (-x‚ÇÄ)) (Nonempty.vadd_set ‚ü®0, hs‚ÇÄ‚ü©)
        (vadd_set_subset_iff.mpr fun x hx => _)
    change œÜ (-x‚ÇÄ + x) ‚â† 0
    rw [map_add, map_neg]
    specialize hœÜ‚ÇÑ x hx
    linarith
  rintro ‚ü®x, hx‚ü©
  obtain ‚ü®y, rfl‚ü© := Submodule.mem_span_singleton.1 hx
  rw [LinearPMap.mkSpanSingleton'_apply]
  simp only [mul_one, Algebra.id.smul_eq_mul, Submodule.coe_mk]
  obtain h | h := le_or_lt y 0
  ¬∑ exact h.trans (gauge_nonneg _)
  ¬∑ rw [gauge_smul_of_nonneg h.le, smul_eq_mul, le_mul_iff_one_le_right h]
    exact
      one_le_gauge_of_not_mem (hs‚ÇÅ.starConvex hs‚ÇÄ)
        (absorbent_nhds_zero <| hs‚ÇÇ.mem_nhds hs‚ÇÄ).absorbs hx‚ÇÄ
#align separate_convex_open_set separate_convex_open_set

variable [TopologicalSpace E] [AddCommGroup E] [TopologicalAddGroup E] [Module ‚Ñù E]
  [ContinuousSMul ‚Ñù E] {s t : Set E} {x y : E}

/-- A version of the **Hahn-Banach theorem**: given disjoint convex sets `s`, `t` where `s` is open,
there is a continuous linear functional which separates them. -/
theorem geometric_hahn_banach_open (hs‚ÇÅ : Convex ‚Ñù s) (hs‚ÇÇ : IsOpen s) (ht : Convex ‚Ñù t)
    (disj : Disjoint s t) : ‚àÉ (f : E ‚ÜíL[‚Ñù] ‚Ñù) (u : ‚Ñù), (‚àÄ a ‚àà s, f a < u) ‚àß ‚àÄ b ‚àà t, u ‚â§ f b := by
  obtain rfl | ‚ü®a‚ÇÄ, ha‚ÇÄ‚ü© := s.eq_empty_or_nonempty
  ¬∑ exact ‚ü®0, 0, by simp, fun b _hb => le_rfl‚ü©
  obtain rfl | ‚ü®b‚ÇÄ, hb‚ÇÄ‚ü© := t.eq_empty_or_nonempty
  ¬∑ exact ‚ü®0, 1, fun a _ha => zero_lt_one, by simp‚ü©
  let x‚ÇÄ := b‚ÇÄ - a‚ÇÄ
  let C := x‚ÇÄ +·µ• (s - t)
  have : (0 : E) ‚àà C :=
    ‚ü®a‚ÇÄ - b‚ÇÄ, sub_mem_sub ha‚ÇÄ hb‚ÇÄ, by simp_rw [vadd_eq_add, sub_add_sub_cancel', sub_self]‚ü©
  have : Convex ‚Ñù C := (hs‚ÇÅ.sub ht).vadd _
  have : x‚ÇÄ ‚àâ C := by
    intro hx‚ÇÄ
    rw [‚Üê add_zero x‚ÇÄ] at hx‚ÇÄ
    exact disj.zero_not_mem_sub_set (vadd_mem_vadd_set_iff.1 hx‚ÇÄ)
  obtain ‚ü®f, hf‚ÇÅ, hf‚ÇÇ‚ü© := separate_convex_open_set ‚Äπ0 ‚àà C‚Ä∫ ‚Äπ_‚Ä∫ (hs‚ÇÇ.sub_right.vadd _) ‚Äπx‚ÇÄ ‚àâ C‚Ä∫
  have : f b‚ÇÄ = f a‚ÇÄ + 1 := by simp [‚Üê hf‚ÇÅ]
  have forall_le : ‚àÄ a ‚àà s, ‚àÄ b ‚àà t, f a ‚â§ f b := by
    intro a ha b hb
    have := hf‚ÇÇ (x‚ÇÄ + (a - b)) (vadd_mem_vadd_set <| sub_mem_sub ha hb)
    simp only [f.map_add, f.map_sub, hf‚ÇÅ] at this
    linarith
  refine' ‚ü®f, sInf (f '' t), image_subset_iff.1 (_ : f '' s ‚äÜ Iio (sInf (f '' t))), fun b hb => _‚ü©
  ¬∑ rw [‚Üê interior_Iic]
    refine' interior_maximal (image_subset_iff.2 fun a ha => _) (f.isOpenMap_of_ne_zero _ _ hs‚ÇÇ)
    ¬∑ exact le_csInf (Nonempty.image _ ‚ü®_, hb‚ÇÄ‚ü©) (ball_image_of_ball <| forall_le _ ha)
    ¬∑ rintro rfl
      simp at hf‚ÇÅ
  ¬∑ exact csInf_le ‚ü®f a‚ÇÄ, ball_image_of_ball <| forall_le _ ha‚ÇÄ‚ü© (mem_image_of_mem _ hb)
#align geometric_hahn_banach_open geometric_hahn_banach_open

theorem geometric_hahn_banach_open_point (hs‚ÇÅ : Convex ‚Ñù s) (hs‚ÇÇ : IsOpen s) (disj : x ‚àâ s) :
    ‚àÉ f : E ‚ÜíL[‚Ñù] ‚Ñù, ‚àÄ a ‚àà s, f a < f x :=
  let ‚ü®f, _s, hs, hx‚ü© :=
    geometric_hahn_banach_open hs‚ÇÅ hs‚ÇÇ (convex_singleton x) (disjoint_singleton_right.2 disj)
  ‚ü®f, fun a ha => lt_of_lt_of_le (hs a ha) (hx x (mem_singleton _))‚ü©
#align geometric_hahn_banach_open_point geometric_hahn_banach_open_point

theorem geometric_hahn_banach_point_open (ht‚ÇÅ : Convex ‚Ñù t) (ht‚ÇÇ : IsOpen t) (disj : x ‚àâ t) :
    ‚àÉ f : E ‚ÜíL[‚Ñù] ‚Ñù, ‚àÄ b ‚àà t, f x < f b :=
  let ‚ü®f, hf‚ü© := geometric_hahn_banach_open_point ht‚ÇÅ ht‚ÇÇ disj
  ‚ü®-f, by simpa‚ü©
#align geometric_hahn_banach_point_open geometric_hahn_banach_point_open

theorem geometric_hahn_banach_open_open (hs‚ÇÅ : Convex ‚Ñù s) (hs‚ÇÇ : IsOpen s) (ht‚ÇÅ : Convex ‚Ñù t)
    (ht‚ÇÉ : IsOpen t) (disj : Disjoint s t) :
    ‚àÉ (f : E ‚ÜíL[‚Ñù] ‚Ñù) (u : ‚Ñù), (‚àÄ a ‚àà s, f a < u) ‚àß ‚àÄ b ‚àà t, u < f b := by
  obtain rfl | ‚ü®a‚ÇÄ, ha‚ÇÄ‚ü© := s.eq_empty_or_nonempty
  ¬∑ exact ‚ü®0, -1, by simp, fun b _hb => by norm_num‚ü©
  obtain rfl | ‚ü®b‚ÇÄ, hb‚ÇÄ‚ü© := t.eq_empty_or_nonempty
  ¬∑ exact ‚ü®0, 1, fun a _ha => by norm_num, by simp‚ü©
  obtain ‚ü®f, s, hf‚ÇÅ, hf‚ÇÇ‚ü© := geometric_hahn_banach_open hs‚ÇÅ hs‚ÇÇ ht‚ÇÅ disj
  have hf : IsOpenMap f := by
    refine' f.isOpenMap_of_ne_zero _
    rintro rfl
    simp_rw [ContinuousLinearMap.zero_apply] at hf‚ÇÅ hf‚ÇÇ
    exact (hf‚ÇÅ _ ha‚ÇÄ).not_le (hf‚ÇÇ _ hb‚ÇÄ)
  refine' ‚ü®f, s, hf‚ÇÅ, image_subset_iff.1 (_ : f '' t ‚äÜ Ioi s)‚ü©
  rw [‚Üê interior_Ici]
  refine' interior_maximal (image_subset_iff.2 hf‚ÇÇ) (f.isOpenMap_of_ne_zero _ _ ht‚ÇÉ)
  rintro rfl
  simp_rw [ContinuousLinearMap.zero_apply] at hf‚ÇÅ hf‚ÇÇ
  exact (hf‚ÇÅ _ ha‚ÇÄ).not_le (hf‚ÇÇ _ hb‚ÇÄ)
#align geometric_hahn_banach_open_open geometric_hahn_banach_open_open

variable [LocallyConvexSpace ‚Ñù E]

/-- A version of the **Hahn-Banach theorem**: given disjoint convex sets `s`, `t` where `s` is
compact and `t` is closed, there is a continuous linear functional which strongly separates them. -/
theorem geometric_hahn_banach_compact_closed (hs‚ÇÅ : Convex ‚Ñù s) (hs‚ÇÇ : IsCompact s)
    (ht‚ÇÅ : Convex ‚Ñù t) (ht‚ÇÇ : IsClosed t) (disj : Disjoint s t) :
    ‚àÉ (f : E ‚ÜíL[‚Ñù] ‚Ñù) (u v : ‚Ñù), (‚àÄ a ‚àà s, f a < u) ‚àß u < v ‚àß ‚àÄ b ‚àà t, v < f b := by
  obtain rfl | hs := s.eq_empty_or_nonempty
  ¬∑ exact ‚ü®0, -2, -1, by simp, by norm_num, fun b _hb => by norm_num‚ü©
  obtain rfl | _ht := t.eq_empty_or_nonempty
  ¬∑ exact ‚ü®0, 1, 2, fun a _ha => by norm_num, by norm_num, by simp‚ü©
  obtain ‚ü®U, V, hU, hV, hU‚ÇÅ, hV‚ÇÅ, sU, tV, disj'‚ü© := disj.exists_open_convexes hs‚ÇÅ hs‚ÇÇ ht‚ÇÅ ht‚ÇÇ
  obtain ‚ü®f, u, hf‚ÇÅ, hf‚ÇÇ‚ü© := geometric_hahn_banach_open_open hU‚ÇÅ hU hV‚ÇÅ hV disj'
  obtain ‚ü®x, hx‚ÇÅ, hx‚ÇÇ‚ü© := hs‚ÇÇ.exists_forall_ge hs f.continuous.continuousOn
  have : f x < u := hf‚ÇÅ x (sU hx‚ÇÅ)
  exact
    ‚ü®f, (f x + u) / 2, u, fun a ha => by linarith [hx‚ÇÇ a ha], by linarith, fun b hb =>
      hf‚ÇÇ b (tV hb)‚ü©
#align geometric_hahn_banach_compact_closed geometric_hahn_banach_compact_closed

/-- A version of the **Hahn-Banach theorem**: given disjoint convex sets `s`, `t` where `s` is
closed, and `t` is compact, there is a continuous linear functional which strongly separates them.
-/
theorem geometric_hahn_banach_closed_compact (hs‚ÇÅ : Convex ‚Ñù s) (hs‚ÇÇ : IsClosed s)
    (ht‚ÇÅ : Convex ‚Ñù t) (ht‚ÇÇ : IsCompact t) (disj : Disjoint s t) :
    ‚àÉ (f : E ‚ÜíL[‚Ñù] ‚Ñù) (u v : ‚Ñù), (‚àÄ a ‚àà s, f a < u) ‚àß u < v ‚àß ‚àÄ b ‚àà t, v < f b :=
  let ‚ü®f, s, t, hs, st, ht‚ü© := geometric_hahn_banach_compact_closed ht‚ÇÅ ht‚ÇÇ hs‚ÇÅ hs‚ÇÇ disj.symm
  ‚ü®-f, -t, -s, by simpa using ht, by simpa using st, by simpa using hs‚ü©
#align geometric_hahn_banach_closed_compact geometric_hahn_banach_closed_compact

theorem geometric_hahn_banach_point_closed (ht‚ÇÅ : Convex ‚Ñù t) (ht‚ÇÇ : IsClosed t) (disj : x ‚àâ t) :
    ‚àÉ (f : E ‚ÜíL[‚Ñù] ‚Ñù) (u : ‚Ñù), f x < u ‚àß ‚àÄ b ‚àà t, u < f b :=
  let ‚ü®f, _u, v, ha, hst, hb‚ü© :=
    geometric_hahn_banach_compact_closed (convex_singleton x) isCompact_singleton ht‚ÇÅ ht‚ÇÇ
      (disjoint_singleton_left.2 disj)
  ‚ü®f, v, hst.trans' <| ha x <| mem_singleton _, hb‚ü©
#align geometric_hahn_banach_point_closed geometric_hahn_banach_point_closed

theorem geometric_hahn_banach_closed_point (hs‚ÇÅ : Convex ‚Ñù s) (hs‚ÇÇ : IsClosed s) (disj : x ‚àâ s) :
    ‚àÉ (f : E ‚ÜíL[‚Ñù] ‚Ñù) (u : ‚Ñù), (‚àÄ a ‚àà s, f a < u) ‚àß u < f x :=
  let ‚ü®f, s, _t, ha, hst, hb‚ü© :=
    geometric_hahn_banach_closed_compact hs‚ÇÅ hs‚ÇÇ (convex_singleton x) isCompact_singleton
      (disjoint_singleton_right.2 disj)
  ‚ü®f, s, ha, hst.trans <| hb x <| mem_singleton _‚ü©
#align geometric_hahn_banach_closed_point geometric_hahn_banach_closed_point

/-- See also `NormedSpace.eq_iff_forall_dual_eq`. -/
theorem geometric_hahn_banach_point_point [T1Space E] (hxy : x ‚â† y) :
    ‚àÉ f : E ‚ÜíL[‚Ñù] ‚Ñù, f x < f y := by
  obtain ‚ü®f, s, t, hs, st, ht‚ü© :=
    geometric_hahn_banach_compact_closed (convex_singleton x) isCompact_singleton
      (convex_singleton y) isClosed_singleton (disjoint_singleton.2 hxy)
  exact ‚ü®f, by linarith [hs x rfl, ht y rfl]‚ü©
#align geometric_hahn_banach_point_point geometric_hahn_banach_point_point

/-- A closed convex set is the intersection of the halfspaces containing it. -/
theorem iInter_halfspaces_eq (hs‚ÇÅ : Convex ‚Ñù s) (hs‚ÇÇ : IsClosed s) :
    ‚ãÇ l : E ‚ÜíL[‚Ñù] ‚Ñù, { x | ‚àÉ y ‚àà s, l x ‚â§ l y } = s := by
  rw [Set.iInter_setOf]
  refine' Set.Subset.antisymm (fun x hx => _) fun x hx l => ‚ü®x, hx, le_rfl‚ü©
  by_contra h
  obtain ‚ü®l, s, hlA, hl‚ü© := geometric_hahn_banach_closed_point hs‚ÇÅ hs‚ÇÇ h
  obtain ‚ü®y, hy, hxy‚ü© := hx l
  exact ((hxy.trans_lt (hlA y hy)).trans hl).not_le le_rfl
#align Inter_halfspaces_eq iInter_halfspaces_eq
