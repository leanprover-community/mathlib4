/-
Copyright (c) 2023 S√©bastien Gou√´zel All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.Analysis.NormedSpace.HahnBanach.Extension
import Mathlib.Analysis.NormedSpace.HahnBanach.Separation
import Mathlib.LinearAlgebra.Dual

/-!
# Spaces with separating dual

We introduce a typeclass `SeparatingDual R V`, registering that the points of the topological
module `V` over `R` can be separated by continuous linear forms.

This property is satisfied for normed spaces over `‚Ñù` or `‚ÑÇ` (by the analytic Hahn-Banach theorem)
and for locally convex topological spaces over `‚Ñù` (by the geometric Hahn-Banach theorem).

Under the assumption `SeparatingDual R V`, we show in
`SeparatingDual.exists_continuousLinearMap_apply_eq` that the group of continuous linear
equivalences acts transitively on the set of nonzero vectors.
-/

/-- When `E` is a topological module over a topological ring `R`, the class `SeparatingDual R E`
registers that continuous linear forms on `E` separate points of `E`. -/
@[mk_iff separatingDual_def]
class SeparatingDual (R V : Type*) [Ring R] [AddCommGroup V] [TopologicalSpace V]
    [TopologicalSpace R] [Module R V] : Prop :=
  /-- Any nonzero vector can be mapped by a continuous linear map to a nonzero scalar. -/
  exists_ne_zero' : ‚àÄ (x : V), x ‚â† 0 ‚Üí ‚àÉ f : V ‚ÜíL[R] R, f x ‚â† 0

instance {E : Type*} [TopologicalSpace E] [AddCommGroup E] [TopologicalAddGroup E]
    [Module ‚Ñù E] [ContinuousSMul ‚Ñù E] [LocallyConvexSpace ‚Ñù E] [T1Space E] : SeparatingDual ‚Ñù E :=
  ‚ü®fun x hx ‚Ü¶ by
    rcases geometric_hahn_banach_point_point hx.symm with ‚ü®f, hf‚ü©
    simp only [map_zero] at hf
    exact ‚ü®f, hf.ne'‚ü©‚ü©

instance {E ùïú : Type*} [IsROrC ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E] : SeparatingDual ùïú E :=
  ‚ü®fun x hx ‚Ü¶ by
    rcases exists_dual_vector ùïú x hx with ‚ü®f, -, hf‚ü©
    refine ‚ü®f, ?_‚ü©
    simpa [hf] using hx‚ü©

namespace SeparatingDual

section Ring

variable {R V : Type*} [Ring R] [AddCommGroup V] [TopologicalSpace V]
  [TopologicalSpace R] [Module R V] [SeparatingDual R V]

lemma exists_ne_zero {x : V} (hx : x ‚â† 0) :
    ‚àÉ f : V ‚ÜíL[R] R, f x ‚â† 0 :=
  exists_ne_zero' x hx

theorem exists_separating_of_ne {x y : V} (h : x ‚â† y) :
    ‚àÉ f : V ‚ÜíL[R] R, f x ‚â† f y := by
  rcases exists_ne_zero (R := R) (sub_ne_zero_of_ne h) with ‚ü®f, hf‚ü©
  exact ‚ü®f, by simpa [sub_ne_zero] using hf‚ü©

protected theorem t1Space [T1Space R] : T1Space V := by
  apply t1Space_iff_exists_open.2 (fun x y hxy ‚Ü¶ ?_)
  rcases exists_separating_of_ne (R := R) hxy with ‚ü®f, hf‚ü©
  exact ‚ü®f ‚Åª¬π' {f y}·∂ú, isOpen_compl_singleton.preimage f.continuous, hf, by simp‚ü©

protected theorem t2Space [T2Space R] : T2Space V := by
  apply (t2Space_iff _).2 (fun {x} {y} hxy ‚Ü¶ ?_)
  rcases exists_separating_of_ne (R := R) hxy with ‚ü®f, hf‚ü©
  exact separated_by_continuous f.continuous hf

end Ring

section Field

variable {R V : Type*} [Field R] [AddCommGroup V] [TopologicalSpace R] [TopologicalSpace V]
  [TopologicalRing R] [TopologicalAddGroup V] [Module R V] [SeparatingDual R V]

-- TODO (@alreadydone): this could generalize to CommRing R if we were to add a section
theorem _root_.separatingDual_iff_injective : SeparatingDual R V ‚Üî
    Function.Injective (ContinuousLinearMap.coeLM (R := R) R (M := V) (N‚ÇÉ := R)).flip := by
  simp_rw [separatingDual_def, Ne, injective_iff_map_eq_zero]
  congrm ‚àÄ v, ?_
  rw [not_imp_comm, LinearMap.ext_iff]
  push_neg; rfl

open Function in
/-- Given a finite-dimensional subspace `W` of a space `V` with separating dual, any
  linear functional on `W` extends to a continuous linear functional on `V`.
  This is stated more generally for an injective linear map from `W` to `V`. -/
theorem dualMap_surjective_iff {W} [AddCommGroup W] [Module R W] [FiniteDimensional R W]
    {f : W ‚Üí‚Çó[R] V} : Surjective (f.dualMap ‚àò ContinuousLinearMap.toLinearMap) ‚Üî Injective f := by
  constructor <;> intro hf
  ¬∑ exact LinearMap.dualMap_surjective_iff.mp hf.of_comp
  have := (separatingDual_iff_injective.mp ‚Äπ_‚Ä∫).comp hf
  rw [‚Üê LinearMap.coe_comp] at this
  exact LinearMap.flip_surjective_iff‚ÇÅ.mpr this

lemma exists_eq_one {x : V} (hx : x ‚â† 0) :
    ‚àÉ f : V ‚ÜíL[R] R, f x = 1 := by
  rcases exists_ne_zero (R := R) hx with ‚ü®f, hf‚ü©
  exact ‚ü®(f x)‚Åª¬π ‚Ä¢ f, inv_mul_cancel hf‚ü©

theorem exists_eq_one_ne_zero_of_ne_zero_pair {x y : V} (hx : x ‚â† 0) (hy : y ‚â† 0) :
    ‚àÉ f : V ‚ÜíL[R] R, f x = 1 ‚àß f y ‚â† 0 := by
  obtain ‚ü®u, ux‚ü© : ‚àÉ u : V ‚ÜíL[R] R, u x = 1 := exists_eq_one hx
  rcases ne_or_eq (u y) 0 with uy|uy
  ¬∑ exact ‚ü®u, ux, uy‚ü©
  obtain ‚ü®v, vy‚ü© : ‚àÉ v : V ‚ÜíL[R] R, v y = 1 := exists_eq_one hy
  rcases ne_or_eq (v x) 0 with vx|vx
  ¬∑ exact ‚ü®(v x)‚Åª¬π ‚Ä¢ v, inv_mul_cancel vx, show (v x)‚Åª¬π * v y ‚â† 0 by simp [vx, vy]‚ü©
  ¬∑ exact ‚ü®u + v, by simp [ux, vx], by simp [uy, vy]‚ü©

/-- In a topological vector space with separating dual, the group of continuous linear equivalences
acts transitively on the set of nonzero vectors: given two nonzero vectors `x` and `y`, there
exists `A : V ‚âÉL[R] V` mapping `x` to `y`. -/
theorem exists_continuousLinearEquiv_apply_eq [ContinuousSMul R V]
    {x y : V} (hx : x ‚â† 0) (hy : y ‚â† 0) :
    ‚àÉ A : V ‚âÉL[R] V, A x = y := by
  obtain ‚ü®G, Gx, Gy‚ü© : ‚àÉ G : V ‚ÜíL[R] R, G x = 1 ‚àß G y ‚â† 0 :=
    exists_eq_one_ne_zero_of_ne_zero_pair hx hy
  let A : V ‚âÉL[R] V :=
  { toFun := fun z ‚Ü¶ z + G z ‚Ä¢ (y - x)
    invFun := fun z ‚Ü¶ z + ((G y) ‚Åª¬π * G z) ‚Ä¢ (x - y)
    map_add' := fun a b ‚Ü¶ by simp [add_smul]; abel
    map_smul' := by simp [smul_smul]
    left_inv := fun z ‚Ü¶ by
      simp only [id_eq, eq_mpr_eq_cast, RingHom.id_apply, smul_eq_mul, AddHom.toFun_eq_coe,
        -- Note: #8386 had to change `map_smul‚Çõ‚Çó` into `map_smul‚Çõ‚Çó _`
        AddHom.coe_mk, map_add, map_smul‚Çõ‚Çó _, map_sub, Gx, mul_sub, mul_one, add_sub_cancel'_right]
      rw [mul_comm (G z), ‚Üê mul_assoc, inv_mul_cancel Gy]
      simp only [smul_sub, one_mul]
      abel
    right_inv := fun z ‚Ü¶ by
        -- Note: #8386 had to change `map_smul‚Çõ‚Çó` into `map_smul‚Çõ‚Çó _`
      simp only [map_add, map_smul‚Çõ‚Çó _, map_mul, map_inv‚ÇÄ, RingHom.id_apply, map_sub, Gx,
        smul_eq_mul, mul_sub, mul_one]
      rw [mul_comm _ (G y), ‚Üê mul_assoc, mul_inv_cancel Gy]
      simp only [smul_sub, one_mul, add_sub_cancel'_right]
      abel
    continuous_toFun := continuous_id.add (G.continuous.smul continuous_const)
    continuous_invFun :=
      continuous_id.add ((continuous_const.mul G.continuous).smul continuous_const) }
  exact ‚ü®A, show x + G x ‚Ä¢ (y - x) = y by simp [Gx]‚ü©

end Field

end SeparatingDual
