/-
Copyright (c) 2022 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import Mathlib.Analysis.NormedSpace.Star.Unitization
import Mathlib.Analysis.NormedSpace.Spectrum
import Mathlib.Analysis.SpecialFunctions.Exponential
import Mathlib.Algebra.Star.StarAlgHom

#align_import analysis.normed_space.star.spectrum from "leanprover-community/mathlib"@"f0c8bf9245297a541f468be517f1bde6195105e9"

/-! # Spectral properties in C‚ãÜ-algebras
In this file, we establish various properties related to the spectrum of elements in C‚ãÜ-algebras.
-/


local postfix:max "‚ãÜ" => star

section

open scoped Topology ENNReal

open Filter ENNReal spectrum CstarRing NormedSpace

section UnitarySpectrum

variable {ùïú : Type*} [NormedField ùïú] {E : Type*} [NormedRing E] [StarRing E] [CstarRing E]
  [NormedAlgebra ùïú E] [CompleteSpace E]

theorem unitary.spectrum_subset_circle (u : unitary E) :
    spectrum ùïú (u : E) ‚äÜ Metric.sphere 0 1 := by
  nontriviality E
  refine fun k hk => mem_sphere_zero_iff_norm.mpr (le_antisymm ?_ ?_)
  ¬∑ simpa only [CstarRing.norm_coe_unitary u] using norm_le_norm_of_mem hk
  ¬∑ rw [‚Üê unitary.val_toUnits_apply u] at hk
    have hnk := ne_zero_of_mem_of_unit hk
    rw [‚Üê inv_inv (unitary.toUnits u), ‚Üê spectrum.map_inv, Set.mem_inv] at hk
    have : ‚Äñk‚Äñ‚Åª¬π ‚â§ ‚Äñ(‚Üë(unitary.toUnits u)‚Åª¬π : E)‚Äñ := by
      simpa only [norm_inv] using norm_le_norm_of_mem hk
    simpa using inv_le_of_inv_le (norm_pos_iff.mpr hnk) this
#align unitary.spectrum_subset_circle unitary.spectrum_subset_circle

theorem spectrum.subset_circle_of_unitary {u : E} (h : u ‚àà unitary E) :
    spectrum ùïú u ‚äÜ Metric.sphere 0 1 :=
  unitary.spectrum_subset_circle ‚ü®u, h‚ü©
#align spectrum.subset_circle_of_unitary spectrum.subset_circle_of_unitary

end UnitarySpectrum

section ComplexScalars

open Complex

variable {A : Type*} [NormedRing A] [NormedAlgebra ‚ÑÇ A] [CompleteSpace A] [StarRing A]
  [CstarRing A]

local notation "‚Üë‚Çê" => algebraMap ‚ÑÇ A

theorem IsSelfAdjoint.spectralRadius_eq_nnnorm {a : A} (ha : IsSelfAdjoint a) :
    spectralRadius ‚ÑÇ a = ‚Äña‚Äñ‚Çä := by
  have hconst : Tendsto (fun _n : ‚Ñï => (‚Äña‚Äñ‚Çä : ‚Ñù‚â•0‚àû)) atTop _ := tendsto_const_nhds
  refine tendsto_nhds_unique ?_ hconst
  convert
    (spectrum.pow_nnnorm_pow_one_div_tendsto_nhds_spectralRadius (a : A)).comp
      (Nat.tendsto_pow_atTop_atTop_of_one_lt one_lt_two) using 1
  refine funext fun n => ?_
  rw [Function.comp_apply, ha.nnnorm_pow_two_pow, ENNReal.coe_pow, ‚Üê rpow_natCast, ‚Üê rpow_mul]
  simp
#align is_self_adjoint.spectral_radius_eq_nnnorm IsSelfAdjoint.spectralRadius_eq_nnnorm

theorem IsStarNormal.spectralRadius_eq_nnnorm (a : A) [IsStarNormal a] :
    spectralRadius ‚ÑÇ a = ‚Äña‚Äñ‚Çä := by
  refine (ENNReal.pow_strictMono two_ne_zero).injective ?_
  have heq :
    (fun n : ‚Ñï => (‚Äñ(a‚ãÜ * a) ^ n‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ (1 / n : ‚Ñù)) =
      (fun x => x ^ 2) ‚àò fun n : ‚Ñï => (‚Äña ^ n‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ (1 / n : ‚Ñù) := by
    funext n
    rw [Function.comp_apply, ‚Üê rpow_natCast, ‚Üê rpow_mul, mul_comm, rpow_mul, rpow_natCast, ‚Üê
      coe_pow, sq, ‚Üê nnnorm_star_mul_self, Commute.mul_pow (star_comm_self' a), star_pow]
  have h‚ÇÇ :=
    ((ENNReal.continuous_pow 2).tendsto (spectralRadius ‚ÑÇ a)).comp
      (spectrum.pow_nnnorm_pow_one_div_tendsto_nhds_spectralRadius a)
  rw [‚Üê heq] at h‚ÇÇ
  convert tendsto_nhds_unique h‚ÇÇ (pow_nnnorm_pow_one_div_tendsto_nhds_spectralRadius (a‚ãÜ * a))
  rw [(IsSelfAdjoint.star_mul_self a).spectralRadius_eq_nnnorm, sq, nnnorm_star_mul_self, coe_mul]
#align is_star_normal.spectral_radius_eq_nnnorm IsStarNormal.spectralRadius_eq_nnnorm

/-- Any element of the spectrum of a selfadjoint is real. -/
theorem IsSelfAdjoint.mem_spectrum_eq_re [StarModule ‚ÑÇ A] {a : A} (ha : IsSelfAdjoint a) {z : ‚ÑÇ}
    (hz : z ‚àà spectrum ‚ÑÇ a) : z = z.re := by
  have hu := exp_mem_unitary_of_mem_skewAdjoint ‚ÑÇ (ha.smul_mem_skewAdjoint conj_I)
  let Iu := Units.mk0 I I_ne_zero
  have : NormedSpace.exp ‚ÑÇ (I ‚Ä¢ z) ‚àà spectrum ‚ÑÇ (NormedSpace.exp ‚ÑÇ (I ‚Ä¢ a)) := by
    simpa only [Units.smul_def, Units.val_mk0] using
      spectrum.exp_mem_exp (Iu ‚Ä¢ a) (smul_mem_smul_iff.mpr hz)
  exact Complex.ext (ofReal_re _) <| by
    simpa only [‚Üê Complex.exp_eq_exp_‚ÑÇ, mem_sphere_zero_iff_norm, norm_eq_abs, abs_exp,
      Real.exp_eq_one_iff, smul_eq_mul, I_mul, neg_eq_zero] using
      spectrum.subset_circle_of_unitary hu this
#align is_self_adjoint.mem_spectrum_eq_re IsSelfAdjoint.mem_spectrum_eq_re

/-- Any element of the spectrum of a selfadjoint is real. -/
theorem selfAdjoint.mem_spectrum_eq_re [StarModule ‚ÑÇ A] (a : selfAdjoint A) {z : ‚ÑÇ}
    (hz : z ‚àà spectrum ‚ÑÇ (a : A)) : z = z.re :=
  a.prop.mem_spectrum_eq_re hz
#align self_adjoint.mem_spectrum_eq_re selfAdjoint.mem_spectrum_eq_re

/-- The spectrum of a selfadjoint is real -/
theorem IsSelfAdjoint.val_re_map_spectrum [StarModule ‚ÑÇ A] {a : A} (ha : IsSelfAdjoint a) :
    spectrum ‚ÑÇ a = ((‚Üë) ‚àò re '' spectrum ‚ÑÇ a : Set ‚ÑÇ) :=
  le_antisymm (fun z hz => ‚ü®z, hz, (ha.mem_spectrum_eq_re hz).symm‚ü©) fun z => by
    rintro ‚ü®z, hz, rfl‚ü©
    simpa only [(ha.mem_spectrum_eq_re hz).symm, Function.comp_apply] using hz
#align is_self_adjoint.coe_re_map_spectrum IsSelfAdjoint.val_re_map_spectrum

/-- The spectrum of a selfadjoint is real -/
theorem selfAdjoint.val_re_map_spectrum [StarModule ‚ÑÇ A] (a : selfAdjoint A) :
    spectrum ‚ÑÇ (a : A) = ((‚Üë) ‚àò re '' spectrum ‚ÑÇ (a : A) : Set ‚ÑÇ) :=
  a.property.val_re_map_spectrum
#align self_adjoint.coe_re_map_spectrum selfAdjoint.val_re_map_spectrum

end ComplexScalars

namespace NonUnitalStarAlgHom

variable {F A B : Type*}
variable [NonUnitalNormedRing A] [CompleteSpace A] [StarRing A] [CstarRing A]
variable [NormedSpace ‚ÑÇ A] [IsScalarTower ‚ÑÇ A A] [SMulCommClass ‚ÑÇ A A] [StarModule ‚ÑÇ A]
variable [NonUnitalNormedRing B] [CompleteSpace B] [StarRing B] [CstarRing B]
variable [NormedSpace ‚ÑÇ B] [IsScalarTower ‚ÑÇ B B] [SMulCommClass ‚ÑÇ B B] [StarModule ‚ÑÇ B]
variable [FunLike F A B] [NonUnitalAlgHomClass F ‚ÑÇ A B] [NonUnitalStarAlgHomClass F ‚ÑÇ A B]

open Unitization

/-- A non-unital star algebra homomorphism of complex C‚ãÜ-algebras is norm contractive. -/
lemma nnnorm_apply_le (œÜ : F) (a : A) : ‚ÄñœÜ a‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä := by
  have h (œà : Unitization ‚ÑÇ A ‚Üí‚ãÜ‚Çê[‚ÑÇ] Unitization ‚ÑÇ B) (x : Unitization ‚ÑÇ A) :
      ‚Äñœà x‚Äñ‚Çä ‚â§ ‚Äñx‚Äñ‚Çä := by
    suffices ‚àÄ {s}, IsSelfAdjoint s ‚Üí ‚Äñœà s‚Äñ‚Çä ‚â§ ‚Äñs‚Äñ‚Çä by
      refine nonneg_le_nonneg_of_sq_le_sq zero_le' ?_
      simp_rw [‚Üê nnnorm_star_mul_self, ‚Üê map_star, ‚Üê map_mul]
      exact this <| .star_mul_self x
    intro s hs
    suffices this : spectralRadius ‚ÑÇ (œà s) ‚â§ spectralRadius ‚ÑÇ s by
      -- changing the order of `rw`s below runs into https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/weird.20type.20class.20synthesis.20error/near/421224482
      rwa [(hs.starHom_apply œà).spectralRadius_eq_nnnorm, hs.spectralRadius_eq_nnnorm, coe_le_coe]
        at this
    exact iSup_le_iSup_of_subset (AlgHom.spectrum_apply_subset œà s)
  simpa [nnnorm_inr] using h (starLift (inrNonUnitalStarAlgHom ‚ÑÇ B |>.comp (œÜ : A ‚Üí‚ãÜ‚Çô‚Çê[‚ÑÇ] B))) a
#align star_alg_hom.nnnorm_apply_le NonUnitalStarAlgHom.nnnorm_apply_le

/-- A non-unital star algebra homomorphism of complex C‚ãÜ-algebras is norm contractive. -/
lemma norm_apply_le (œÜ : F) (a : A) : ‚ÄñœÜ a‚Äñ ‚â§ ‚Äña‚Äñ := by
  exact_mod_cast nnnorm_apply_le œÜ a
#align star_alg_hom.norm_apply_le NonUnitalStarAlgHom.norm_apply_le

/-- Non-unital star algebra homomorphisms between C‚ãÜ-algebras are continuous linear maps.
See note [lower instance priority] -/
noncomputable instance (priority := 100) : ContinuousLinearMapClass F ‚ÑÇ A B :=
  { NonUnitalAlgHomClass.instLinearMapClass with
    map_continuous := fun œÜ =>
      AddMonoidHomClass.continuous_of_bound œÜ 1 (by simpa only [one_mul] using nnnorm_apply_le œÜ) }

end NonUnitalStarAlgHom

namespace StarAlgEquiv

variable {F A B : Type*} [NormedRing A] [NormedSpace ‚ÑÇ A] [SMulCommClass ‚ÑÇ A A]
variable [IsScalarTower ‚ÑÇ A A] [CompleteSpace A] [StarRing A] [CstarRing A] [StarModule ‚ÑÇ A]
variable [NormedRing B] [NormedSpace ‚ÑÇ B] [SMulCommClass ‚ÑÇ B B] [IsScalarTower ‚ÑÇ B B]
variable [CompleteSpace B] [StarRing B] [CstarRing B] [StarModule ‚ÑÇ B] [EquivLike F A B]
variable [NonUnitalAlgEquivClass F ‚ÑÇ A B] [StarAlgEquivClass F ‚ÑÇ A B]

lemma nnnorm_map (œÜ : F) (a : A) : ‚ÄñœÜ a‚Äñ‚Çä = ‚Äña‚Äñ‚Çä :=
  le_antisymm (NonUnitalStarAlgHom.nnnorm_apply_le œÜ a) <| by
    simpa using NonUnitalStarAlgHom.nnnorm_apply_le (symm (œÜ : A ‚âÉ‚ãÜ‚Çê[‚ÑÇ] B)) ((œÜ : A ‚âÉ‚ãÜ‚Çê[‚ÑÇ] B) a)

lemma norm_map (œÜ : F) (a : A) : ‚ÄñœÜ a‚Äñ = ‚Äña‚Äñ :=
  congr_arg NNReal.toReal (nnnorm_map œÜ a)

lemma isometry (œÜ : F) : Isometry œÜ :=
  AddMonoidHomClass.isometry_of_norm œÜ (norm_map œÜ)

end StarAlgEquiv

end

namespace WeakDual

open ContinuousMap Complex

open scoped ComplexStarModule

variable {F A : Type*} [NormedRing A] [NormedAlgebra ‚ÑÇ A] [CompleteSpace A] [StarRing A]
  [CstarRing A] [StarModule ‚ÑÇ A] [FunLike F A ‚ÑÇ] [hF : AlgHomClass F ‚ÑÇ A ‚ÑÇ]

/-- This instance is provided instead of `StarAlgHomClass` to avoid type class inference loops.
See note [lower instance priority] -/
noncomputable instance (priority := 100) Complex.instStarHomClass : StarHomClass F A ‚ÑÇ where
  map_star œÜ a := by
    suffices hsa : ‚àÄ s : selfAdjoint A, (œÜ s)‚ãÜ = œÜ s by
      rw [‚Üê realPart_add_I_smul_imaginaryPart a]
      simp only [map_add, map_smul, star_add, star_smul, hsa, selfAdjoint.star_val_eq]
    intro s
    have := AlgHom.apply_mem_spectrum œÜ (s : A)
    rw [selfAdjoint.val_re_map_spectrum s] at this
    rcases this with ‚ü®‚ü®_, _‚ü©, _, heq‚ü©
    simp only [Function.comp_apply] at heq
    rw [‚Üê heq, RCLike.star_def]
    exact RCLike.conj_ofReal _

/-- This is not an instance to avoid type class inference loops. See
`WeakDual.Complex.instStarHomClass`. -/
lemma _root_.AlgHomClass.instStarAlgHomClass : StarAlgHomClass F ‚ÑÇ A ‚ÑÇ :=
  { WeakDual.Complex.instStarHomClass, hF with }
#align alg_hom_class.star_alg_hom_class AlgHomClass.instStarAlgHomClass

namespace CharacterSpace

noncomputable instance instStarAlgHomClass : StarAlgHomClass (characterSpace ‚ÑÇ A) ‚ÑÇ A ‚ÑÇ :=
  { AlgHomClass.instStarAlgHomClass with }

end CharacterSpace

end WeakDual
