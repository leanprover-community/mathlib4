/-
Copyright (c) 2021 Fr√©d√©ric Dupuis. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Fr√©d√©ric Dupuis
-/
import Mathlib.Analysis.Normed.Group.Hom
import Mathlib.Analysis.NormedSpace.Basic
import Mathlib.Analysis.NormedSpace.LinearIsometry
import Mathlib.Algebra.Star.SelfAdjoint
import Mathlib.Algebra.Star.Subalgebra
import Mathlib.Algebra.Star.Unitary
import Mathlib.Topology.Algebra.Module.Star

#align_import analysis.normed_space.star.basic from "leanprover-community/mathlib"@"aa6669832974f87406a3d9d70fc5707a60546207"

/-!
# Normed star rings and algebras

A normed star group is a normed group with a compatible `star` which is isometric.

A C‚ãÜ-ring is a normed star group that is also a ring and that verifies the stronger
condition `‚Äñx‚ãÜ * x‚Äñ = ‚Äñx‚Äñ^2` for all `x`.  If a C‚ãÜ-ring is also a star algebra, then it is a
C‚ãÜ-algebra.

To get a C‚ãÜ-algebra `E` over field `ùïú`, use
`[NormedField ùïú] [StarRing ùïú] [NormedRing E] [StarRing E] [CstarRing E]
 [NormedAlgebra ùïú E] [StarModule ùïú E]`.

## TODO

- Show that `‚Äñx‚ãÜ * x‚Äñ = ‚Äñx‚Äñ^2` is equivalent to `‚Äñx‚ãÜ * x‚Äñ = ‚Äñx‚ãÜ‚Äñ * ‚Äñx‚Äñ`, which is used as the
  definition of C*-algebras in some sources (e.g. Wikipedia).

-/


open Topology

local postfix:max "‚ãÜ" => star

/-- A normed star group is a normed group with a compatible `star` which is isometric. -/
class NormedStarGroup (E : Type*) [SeminormedAddCommGroup E] [StarAddMonoid E] : Prop where
  norm_star : ‚àÄ x : E, ‚Äñx‚ãÜ‚Äñ = ‚Äñx‚Äñ
#align normed_star_group NormedStarGroup

export NormedStarGroup (norm_star)

attribute [simp] norm_star

variable {ùïú E Œ± : Type*}

section NormedStarGroup

variable [SeminormedAddCommGroup E] [StarAddMonoid E] [NormedStarGroup E]

@[simp]
theorem nnnorm_star (x : E) : ‚Äñstar x‚Äñ‚Çä = ‚Äñx‚Äñ‚Çä :=
  Subtype.ext <| norm_star _
#align nnnorm_star nnnorm_star

/-- The `star` map in a normed star group is a normed group homomorphism. -/
def starNormedAddGroupHom : NormedAddGroupHom E E :=
  { starAddEquiv with bound' := ‚ü®1, fun _ => le_trans (norm_star _).le (one_mul _).symm.le‚ü© }
#align star_normed_add_group_hom starNormedAddGroupHom

/-- The `star` map in a normed star group is an isometry -/
theorem star_isometry : Isometry (star : E ‚Üí E) :=
  show Isometry starAddEquiv from
    AddMonoidHomClass.isometry_of_norm starAddEquiv (show ‚àÄ x, ‚Äñx‚ãÜ‚Äñ = ‚Äñx‚Äñ from norm_star)
#align star_isometry star_isometry

instance (priority := 100) NormedStarGroup.to_continuousStar : ContinuousStar E :=
  ‚ü®star_isometry.continuous‚ü©
#align normed_star_group.to_has_continuous_star NormedStarGroup.to_continuousStar

end NormedStarGroup

instance RingHomIsometric.starRingEnd [NormedCommRing E] [StarRing E] [NormedStarGroup E] :
    RingHomIsometric (starRingEnd E) :=
  ‚ü®@norm_star _ _ _ _‚ü©
#align ring_hom_isometric.star_ring_end RingHomIsometric.starRingEnd

/-- A C*-ring is a normed star ring that satisfies the stronger condition `‚Äñx‚ãÜ * x‚Äñ = ‚Äñx‚Äñ^2`
for every `x`. -/
class CstarRing (E : Type*) [NonUnitalNormedRing E] [StarRing E] : Prop where
  norm_star_mul_self : ‚àÄ {x : E}, ‚Äñx‚ãÜ * x‚Äñ = ‚Äñx‚Äñ * ‚Äñx‚Äñ
#align cstar_ring CstarRing

instance : CstarRing ‚Ñù where norm_star_mul_self {x} := by simp only [star, id, norm_mul]

namespace CstarRing

section NonUnital

variable [NonUnitalNormedRing E] [StarRing E] [CstarRing E]

-- see Note [lower instance priority]
/-- In a C*-ring, star preserves the norm. -/
instance (priority := 100) to_normedStarGroup : NormedStarGroup E :=
  ‚ü®by
    intro x
    by_cases htriv : x = 0
    ¬∑ simp only [htriv, star_zero]
    ¬∑ have hnt : 0 < ‚Äñx‚Äñ := norm_pos_iff.mpr htriv
      have hnt_star : 0 < ‚Äñx‚ãÜ‚Äñ :=
        norm_pos_iff.mpr ((AddEquiv.map_ne_zero_iff starAddEquiv (M := E)).mpr htriv)
      have h‚ÇÅ :=
        calc
          ‚Äñx‚Äñ * ‚Äñx‚Äñ = ‚Äñx‚ãÜ * x‚Äñ := norm_star_mul_self.symm
          _ ‚â§ ‚Äñx‚ãÜ‚Äñ * ‚Äñx‚Äñ := norm_mul_le _ _
      have h‚ÇÇ :=
        calc
          ‚Äñx‚ãÜ‚Äñ * ‚Äñx‚ãÜ‚Äñ = ‚Äñx * x‚ãÜ‚Äñ := by rw [‚Üê norm_star_mul_self, star_star]
          _ ‚â§ ‚Äñx‚Äñ * ‚Äñx‚ãÜ‚Äñ := norm_mul_le _ _
      exact le_antisymm (le_of_mul_le_mul_right h‚ÇÇ hnt_star) (le_of_mul_le_mul_right h‚ÇÅ hnt)‚ü©
#align cstar_ring.to_normed_star_group CstarRing.to_normedStarGroup

theorem norm_self_mul_star {x : E} : ‚Äñx * x‚ãÜ‚Äñ = ‚Äñx‚Äñ * ‚Äñx‚Äñ := by
  nth_rw 1 [‚Üê star_star x]
  simp only [norm_star_mul_self, norm_star]
#align cstar_ring.norm_self_mul_star CstarRing.norm_self_mul_star

theorem norm_star_mul_self' {x : E} : ‚Äñx‚ãÜ * x‚Äñ = ‚Äñx‚ãÜ‚Äñ * ‚Äñx‚Äñ := by rw [norm_star_mul_self, norm_star]
#align cstar_ring.norm_star_mul_self' CstarRing.norm_star_mul_self'

theorem nnnorm_self_mul_star {x : E} : ‚Äñx * x‚ãÜ‚Äñ‚Çä = ‚Äñx‚Äñ‚Çä * ‚Äñx‚Äñ‚Çä :=
  Subtype.ext norm_self_mul_star
#align cstar_ring.nnnorm_self_mul_star CstarRing.nnnorm_self_mul_star

theorem nnnorm_star_mul_self {x : E} : ‚Äñx‚ãÜ * x‚Äñ‚Çä = ‚Äñx‚Äñ‚Çä * ‚Äñx‚Äñ‚Çä :=
  Subtype.ext norm_star_mul_self
#align cstar_ring.nnnorm_star_mul_self CstarRing.nnnorm_star_mul_self

@[simp]
theorem star_mul_self_eq_zero_iff (x : E) : x‚ãÜ * x = 0 ‚Üî x = 0 := by
  rw [‚Üê norm_eq_zero, norm_star_mul_self]
  exact mul_self_eq_zero.trans norm_eq_zero
#align cstar_ring.star_mul_self_eq_zero_iff CstarRing.star_mul_self_eq_zero_iff

theorem star_mul_self_ne_zero_iff (x : E) : x‚ãÜ * x ‚â† 0 ‚Üî x ‚â† 0 := by
  simp only [Ne, star_mul_self_eq_zero_iff]
#align cstar_ring.star_mul_self_ne_zero_iff CstarRing.star_mul_self_ne_zero_iff

@[simp]
theorem mul_star_self_eq_zero_iff (x : E) : x * x‚ãÜ = 0 ‚Üî x = 0 := by
  simpa only [star_eq_zero, star_star] using @star_mul_self_eq_zero_iff _ _ _ _ (star x)
#align cstar_ring.mul_star_self_eq_zero_iff CstarRing.mul_star_self_eq_zero_iff

theorem mul_star_self_ne_zero_iff (x : E) : x * x‚ãÜ ‚â† 0 ‚Üî x ‚â† 0 := by
  simp only [Ne, mul_star_self_eq_zero_iff]
#align cstar_ring.mul_star_self_ne_zero_iff CstarRing.mul_star_self_ne_zero_iff

end NonUnital

section ProdPi

variable {Œπ R‚ÇÅ R‚ÇÇ : Type*} {R : Œπ ‚Üí Type*}
variable [NonUnitalNormedRing R‚ÇÅ] [StarRing R‚ÇÅ] [CstarRing R‚ÇÅ]
variable [NonUnitalNormedRing R‚ÇÇ] [StarRing R‚ÇÇ] [CstarRing R‚ÇÇ]
variable [‚àÄ i, NonUnitalNormedRing (R i)] [‚àÄ i, StarRing (R i)]

/-- This instance exists to short circuit type class resolution because of problems with
inference involving Œ†-types. -/
instance _root_.Pi.starRing' : StarRing (‚àÄ i, R i) :=
  inferInstance
#align pi.star_ring' Pi.starRing'

variable [Fintype Œπ] [‚àÄ i, CstarRing (R i)]

instance _root_.Prod.cstarRing : CstarRing (R‚ÇÅ √ó R‚ÇÇ) where
  norm_star_mul_self {x} := by
    dsimp only [norm]
    simp only [Prod.fst_mul, Prod.fst_star, Prod.snd_mul, Prod.snd_star, norm_star_mul_self, ‚Üê sq]
    refine' le_antisymm _ _
    ¬∑ refine' max_le _ _ <;> rw [sq_le_sq, abs_of_nonneg (norm_nonneg _)]
      ¬∑ exact (le_max_left _ _).trans (le_abs_self _)
      ¬∑ exact (le_max_right _ _).trans (le_abs_self _)
    ¬∑ rw [le_sup_iff]
      rcases le_total ‚Äñx.fst‚Äñ ‚Äñx.snd‚Äñ with (h | h) <;> simp [h]
#align prod.cstar_ring Prod.cstarRing

instance _root_.Pi.cstarRing : CstarRing (‚àÄ i, R i) where
  norm_star_mul_self {x} := by
    simp only [norm, Pi.mul_apply, Pi.star_apply, nnnorm_star_mul_self, ‚Üê sq]
    norm_cast
    exact
      (Finset.comp_sup_eq_sup_comp_of_is_total (fun x : NNReal => x ^ 2)
          (fun x y h => by simpa only [sq] using mul_le_mul' h h) (by simp)).symm
#align pi.cstar_ring Pi.cstarRing

instance _root_.Pi.cstarRing' : CstarRing (Œπ ‚Üí R‚ÇÅ) :=
  Pi.cstarRing
#align pi.cstar_ring' Pi.cstarRing'

end ProdPi

section Unital


variable [NormedRing E] [StarRing E] [CstarRing E]

@[simp, nolint simpNF] -- Porting note (#10959): simp cannot prove this
theorem norm_one [Nontrivial E] : ‚Äñ(1 : E)‚Äñ = 1 := by
  have : 0 < ‚Äñ(1 : E)‚Äñ := norm_pos_iff.mpr one_ne_zero
  rw [‚Üê mul_left_inj' this.ne', ‚Üê norm_star_mul_self, mul_one, star_one, one_mul]
#align cstar_ring.norm_one CstarRing.norm_one

-- see Note [lower instance priority]
instance (priority := 100) [Nontrivial E] : NormOneClass E :=
  ‚ü®norm_one‚ü©

theorem norm_coe_unitary [Nontrivial E] (U : unitary E) : ‚Äñ(U : E)‚Äñ = 1 := by
  rw [‚Üê sq_eq_sq (norm_nonneg _) zero_le_one, one_pow 2, sq, ‚Üê CstarRing.norm_star_mul_self,
    unitary.coe_star_mul_self, CstarRing.norm_one]
#align cstar_ring.norm_coe_unitary CstarRing.norm_coe_unitary

@[simp]
theorem norm_of_mem_unitary [Nontrivial E] {U : E} (hU : U ‚àà unitary E) : ‚ÄñU‚Äñ = 1 :=
  norm_coe_unitary ‚ü®U, hU‚ü©
#align cstar_ring.norm_of_mem_unitary CstarRing.norm_of_mem_unitary

@[simp]
theorem norm_coe_unitary_mul (U : unitary E) (A : E) : ‚Äñ(U : E) * A‚Äñ = ‚ÄñA‚Äñ := by
  nontriviality E
  refine' le_antisymm _ _
  ¬∑ calc
      _ ‚â§ ‚Äñ(U : E)‚Äñ * ‚ÄñA‚Äñ := norm_mul_le _ _
      _ = ‚ÄñA‚Äñ := by rw [norm_coe_unitary, one_mul]
  ¬∑ calc
      _ = ‚Äñ(U : E)‚ãÜ * U * A‚Äñ := by rw [unitary.coe_star_mul_self U, one_mul]
      _ ‚â§ ‚Äñ(U : E)‚ãÜ‚Äñ * ‚Äñ(U : E) * A‚Äñ := by
        rw [mul_assoc]
        exact norm_mul_le _ _
      _ = ‚Äñ(U : E) * A‚Äñ := by rw [norm_star, norm_coe_unitary, one_mul]
#align cstar_ring.norm_coe_unitary_mul CstarRing.norm_coe_unitary_mul

@[simp]
theorem norm_unitary_smul (U : unitary E) (A : E) : ‚ÄñU ‚Ä¢ A‚Äñ = ‚ÄñA‚Äñ :=
  norm_coe_unitary_mul U A
#align cstar_ring.norm_unitary_smul CstarRing.norm_unitary_smul

theorem norm_mem_unitary_mul {U : E} (A : E) (hU : U ‚àà unitary E) : ‚ÄñU * A‚Äñ = ‚ÄñA‚Äñ :=
  norm_coe_unitary_mul ‚ü®U, hU‚ü© A
#align cstar_ring.norm_mem_unitary_mul CstarRing.norm_mem_unitary_mul

@[simp]
theorem norm_mul_coe_unitary (A : E) (U : unitary E) : ‚ÄñA * U‚Äñ = ‚ÄñA‚Äñ :=
  calc
    _ = ‚Äñ((U : E)‚ãÜ * A‚ãÜ)‚ãÜ‚Äñ := by simp only [star_star, star_mul]
    _ = ‚Äñ(U : E)‚ãÜ * A‚ãÜ‚Äñ := by rw [norm_star]
    _ = ‚ÄñA‚ãÜ‚Äñ := norm_mem_unitary_mul (star A) (unitary.star_mem U.prop)
    _ = ‚ÄñA‚Äñ := norm_star _
#align cstar_ring.norm_mul_coe_unitary CstarRing.norm_mul_coe_unitary

theorem norm_mul_mem_unitary (A : E) {U : E} (hU : U ‚àà unitary E) : ‚ÄñA * U‚Äñ = ‚ÄñA‚Äñ :=
  norm_mul_coe_unitary A ‚ü®U, hU‚ü©
#align cstar_ring.norm_mul_mem_unitary CstarRing.norm_mul_mem_unitary

end Unital

end CstarRing

theorem IsSelfAdjoint.nnnorm_pow_two_pow [NormedRing E] [StarRing E] [CstarRing E] {x : E}
    (hx : IsSelfAdjoint x) (n : ‚Ñï) : ‚Äñx ^ 2 ^ n‚Äñ‚Çä = ‚Äñx‚Äñ‚Çä ^ 2 ^ n := by
  induction' n with k hk
  ¬∑ simp only [pow_zero, pow_one, Nat.zero_eq]
  ¬∑ rw [pow_succ', pow_mul', sq]
    nth_rw 1 [‚Üê selfAdjoint.mem_iff.mp hx]
    rw [‚Üê star_pow, CstarRing.nnnorm_star_mul_self, ‚Üê sq, hk, pow_mul']
#align is_self_adjoint.nnnorm_pow_two_pow IsSelfAdjoint.nnnorm_pow_two_pow

theorem selfAdjoint.nnnorm_pow_two_pow [NormedRing E] [StarRing E] [CstarRing E] (x : selfAdjoint E)
    (n : ‚Ñï) : ‚Äñx ^ 2 ^ n‚Äñ‚Çä = ‚Äñx‚Äñ‚Çä ^ 2 ^ n :=
  x.prop.nnnorm_pow_two_pow _
#align self_adjoint.nnnorm_pow_two_pow selfAdjoint.nnnorm_pow_two_pow

section star‚Çó·µ¢

variable [CommSemiring ùïú] [StarRing ùïú]
variable [SeminormedAddCommGroup E] [StarAddMonoid E] [NormedStarGroup E]
variable [Module ùïú E] [StarModule ùïú E]
variable (ùïú)

/-- `star` bundled as a linear isometric equivalence -/
def star‚Çó·µ¢ : E ‚âÉ‚Çó·µ¢‚ãÜ[ùïú] E :=
  { starAddEquiv with
    map_smul' := star_smul
    norm_map' := norm_star }
#align star‚Çó·µ¢ star‚Çó·µ¢

variable {ùïú}

@[simp]
theorem coe_star‚Çó·µ¢ : (star‚Çó·µ¢ ùïú : E ‚Üí E) = star :=
  rfl
#align coe_star‚Çó·µ¢ coe_star‚Çó·µ¢

theorem star‚Çó·µ¢_apply {x : E} : star‚Çó·µ¢ ùïú x = star x :=
  rfl
#align star‚Çó·µ¢_apply star‚Çó·µ¢_apply

@[simp]
theorem star‚Çó·µ¢_toContinuousLinearEquiv :
    (star‚Çó·µ¢ ùïú : E ‚âÉ‚Çó·µ¢‚ãÜ[ùïú] E).toContinuousLinearEquiv = (starL ùïú : E ‚âÉL‚ãÜ[ùïú] E) :=
  ContinuousLinearEquiv.ext rfl
#align star‚Çó·µ¢_to_continuous_linear_equiv star‚Çó·µ¢_toContinuousLinearEquiv

end star‚Çó·µ¢

namespace StarSubalgebra

instance toNormedAlgebra {ùïú A : Type*} [NormedField ùïú] [StarRing ùïú] [SeminormedRing A] [StarRing A]
    [NormedAlgebra ùïú A] [StarModule ùïú A] (S : StarSubalgebra ùïú A) : NormedAlgebra ùïú S :=
  NormedAlgebra.induced ùïú S A S.subtype
#align star_subalgebra.to_normed_algebra StarSubalgebra.toNormedAlgebra

instance to_cstarRing {R A} [CommRing R] [StarRing R] [NormedRing A] [StarRing A] [CstarRing A]
    [Algebra R A] [StarModule R A] (S : StarSubalgebra R A) : CstarRing S where
  norm_star_mul_self {x} := @CstarRing.norm_star_mul_self A _ _ _ x
#align star_subalgebra.to_cstar_ring StarSubalgebra.to_cstarRing

end StarSubalgebra
