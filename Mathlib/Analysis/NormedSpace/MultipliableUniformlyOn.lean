/-
Copyright (c) 2025 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck
-/
import Mathlib.Analysis.NormedSpace.FunctionSeries
import Mathlib.Analysis.SpecialFunctions.Log.Summable
import Mathlib.Topology.Algebra.InfiniteSum.UniformOn
import Mathlib.Topology.Algebra.IsUniformGroup.Order

/-!
# Uniform convergence of products of functions

We gather some results about the uniform convergence of infinite products, in particular those of
the form `‚àè' i, (1 + f i x)` for a sequence `f` of complex valued functions.
-/

open Filter Function Complex Finset Topology

variable {Œ± Œπ : Type*} {ùîñ : Set (Set Œ±)} {K : Set Œ±} {u : Œπ ‚Üí ‚Ñù}

section Complex

variable {f : Œπ ‚Üí Œ± ‚Üí ‚ÑÇ}

lemma TendstoUniformlyOn.comp_cexp {p : Filter Œπ} {g : Œ± ‚Üí ‚ÑÇ}
    (hf : TendstoUniformlyOn f g p K) (hg : BddAbove <| (fun x ‚Ü¶ (g x).re) '' K) :
    TendstoUniformlyOn (cexp ‚àò f ¬∑) (cexp ‚àò g) p K := by
  obtain ‚ü®v, hv‚ü© : ‚àÉ v, ‚àÄ x ‚àà K, (g x).re ‚â§ v := hg.imp <| by simp [mem_upperBounds]
  have : ‚àÄ·∂† i in p, ‚àÄ x ‚àà K, (f i x).re ‚â§ v + 1 := hf.re.eventually_forall_le (lt_add_one v) hv
  refine (UniformContinuousOn.cexp _).comp_tendstoUniformlyOn_eventually (by simpa) ?_ hf
  exact fun x hx ‚Ü¶ (hv x hx).trans (lt_add_one v).le

lemma Summable.hasSumUniformlyOn_log_one_add (hu : Summable u)
    (h : ‚àÄ·∂† i in cofinite, ‚àÄ x ‚àà K, ‚Äñf i x‚Äñ ‚â§ u i) :
    HasSumUniformlyOn (fun i x ‚Ü¶ log (1 + f i x)) (fun x ‚Ü¶ ‚àë' i, log (1 + f i x)) {K} := by
  simp only [hasSumUniformlyOn_iff_tendstoUniformlyOn, Set.mem_singleton_iff, forall_eq]
  apply tendstoUniformlyOn_tsum_of_cofinite_eventually <| hu.mul_left (3 / 2)
  filter_upwards [h, hu.tendsto_cofinite_zero.eventually_le_const one_half_pos] with i hi hi' x hx
    using (norm_log_one_add_half_le_self <| (hi x hx).trans hi').trans (by simpa using hi x hx)

lemma Summable.tendstoUniformlyOn_tsum_nat_log_one_add {f : ‚Ñï ‚Üí Œ± ‚Üí ‚ÑÇ} {u : ‚Ñï ‚Üí ‚Ñù}
    (hu : Summable u) (h : ‚àÄ·∂† n in atTop, ‚àÄ x ‚àà K, ‚Äñf n x‚Äñ ‚â§ u n) :
    TendstoUniformlyOn (fun n x ‚Ü¶ ‚àë m ‚àà Finset.range n, log (1 + f m x))
    (fun x ‚Ü¶ ‚àë' n, log (1 + f n x)) atTop K := by
  rw [‚Üê Nat.cofinite_eq_atTop] at h
  exact (hu.hasSumUniformlyOn_log_one_add h).tendstoUniformlyOn_finsetRange rfl

/-- If `x ‚Ü¶ ‚àë' i, log (f i x)` is uniformly convergent on `ùîñ`, its sum has bounded-above real part
on each set in `ùîñ`, and the functions `f i x` have no zeroes, then  `‚àè' i, f i x` is uniformly
convergent on `ùîñ`.

Note that the non-vanishing assumption is really needed here: if this assumption is dropped then
one obtains a counterexample if `Œπ = Œ± = ‚Ñï` and `f i x` is `0` if `i = x` and `1` otherwise. -/
lemma hasProdUniformlyOn_of_clog (hf : SummableUniformlyOn (fun i x ‚Ü¶ log (f i x)) ùîñ)
    (hfn : ‚àÄ K ‚àà ùîñ, ‚àÄ x ‚àà K, ‚àÄ i, f i x ‚â† 0)
    (hg : ‚àÄ K ‚àà ùîñ, BddAbove <| (fun x ‚Ü¶ (‚àë' i, log (f i x)).re) '' K) :
    HasProdUniformlyOn f (fun x ‚Ü¶ ‚àè' i, f i x) ùîñ := by
  simp only [hasProdUniformlyOn_iff_tendstoUniformlyOn]
  obtain ‚ü®r, hr‚ü© := hf.exists
  intro K hK
  suffices H : TendstoUniformlyOn (fun s x ‚Ü¶ ‚àè i ‚àà s, f i x) (cexp ‚àò r) atTop K by
    refine H.congr_right ((hr.tsum_eqOn hK).comp_left.symm.trans ?_)
    exact fun x hx ‚Ü¶ (cexp_tsum_eq_tprod (hfn K hK x hx) (hf.summable hK hx))
  have h1 := hr.tsum_eqOn hK
  simp only [hasSumUniformlyOn_iff_tendstoUniformlyOn] at hr
  refine ((hr K hK).comp_cexp ?_).congr ?_
  ¬∑ simp +contextual [‚Üê h1 _]
    exact hg K hK
  ¬∑ filter_upwards with s i hi using by simp [exp_sum, fun y ‚Ü¶ exp_log (hfn K hK i hi y)]

lemma multipliableUniformlyOn_of_clog (hf : SummableUniformlyOn (fun i x ‚Ü¶ log (f i x)) ùîñ)
    (hfn : ‚àÄ K ‚àà ùîñ, ‚àÄ x ‚àà K, ‚àÄ i, f i x ‚â† 0)
    (hg : ‚àÄ K ‚àà ùîñ, BddAbove <| (fun x ‚Ü¶ (‚àë' i, log (f i x)).re) '' K) :
    MultipliableUniformlyOn f ùîñ :=
  ‚ü®_, hasProdUniformlyOn_of_clog hf hfn hg‚ü©

end Complex

namespace Summable

variable {R : Type*} [NormedCommRing R] [NormOneClass R] [CompleteSpace R] [TopologicalSpace Œ±]
  {f : Œπ ‚Üí Œ± ‚Üí R}

/-- If a sequence of continuous functions `f i x` on an open compact `K` have norms eventually
bounded by a summable function, then `‚àè' i, (1 + f i x)` is uniformly convergent on `K`. -/
lemma hasProdUniformlyOn_one_add (hK : IsCompact K) (hu : Summable u)
    (h : ‚àÄ·∂† i in cofinite, ‚àÄ x ‚àà K, ‚Äñf i x‚Äñ ‚â§ u i) (hcts : ‚àÄ i, ContinuousOn (f i) K) :
    HasProdUniformlyOn (fun i x ‚Ü¶ 1 + f i x) (fun x ‚Ü¶ ‚àè' i, (1 + f i x)) {K} := by
  simp only [hasProdUniformlyOn_iff_tendstoUniformlyOn, Set.mem_singleton_iff,
    tendstoUniformlyOn_iff_tendstoUniformly_comp_coe, forall_eq]
  by_cases hKe : K = ‚àÖ
  ¬∑ simp [TendstoUniformly, hKe]
  ¬∑ haveI hCK : CompactSpace K := isCompact_iff_compactSpace.mp hK
    haveI hne : Nonempty K := by rwa [Set.nonempty_coe_sort, Set.nonempty_iff_ne_empty]
    let f' i : C(K, R) := ‚ü®_, continuousOn_iff_continuous_restrict.mp (hcts i)‚ü©
    have hf'_bd : ‚àÄ·∂† i in cofinite, ‚Äñf' i‚Äñ ‚â§ u i := by
      simp only [ContinuousMap.norm_le_of_nonempty]
      filter_upwards [h] with i hi using fun x ‚Ü¶ hi x x.2
    have hM : Multipliable fun i ‚Ü¶ 1 + f' i :=
      multipliable_one_add_of_summable (hu.of_norm_bounded_eventually (by simpa using hf'_bd))
    convert ContinuousMap.tendsto_iff_tendstoUniformly.mp hM.hasProd
    ¬∑ simp [f']
    ¬∑ exact funext fun k ‚Ü¶ ContinuousMap.tprod_apply hM k

lemma multipliableUniformlyOn_one_add (hK : IsCompact K) (hu : Summable u)
    (h : ‚àÄ·∂† i in cofinite, ‚àÄ x ‚àà K, ‚Äñf i x‚Äñ ‚â§ u i) (hcts : ‚àÄ i, ContinuousOn (f i) K) :
    MultipliableUniformlyOn (fun i x ‚Ü¶ 1 + f i x) {K} :=
  ‚ü®_, hasProdUniformlyOn_one_add hK hu h hcts‚ü©

/-- This is a version of `hasProdUniformlyOn_one_add` for sequences indexed by `‚Ñï`. -/
lemma hasProdUniformlyOn_nat_one_add {f : ‚Ñï ‚Üí Œ± ‚Üí R} (hK : IsCompact K) {u : ‚Ñï ‚Üí ‚Ñù}
    (hu : Summable u) (h : ‚àÄ·∂† n in atTop, ‚àÄ x ‚àà K, ‚Äñf n x‚Äñ ‚â§ u n)
    (hcts : ‚àÄ n, ContinuousOn (f n) K) :
    HasProdUniformlyOn (fun n x ‚Ü¶ 1 + f n x) (fun x ‚Ü¶ ‚àè' i, (1 + f i x)) {K} :=
  hasProdUniformlyOn_one_add hK hu (Nat.cofinite_eq_atTop ‚ñ∏ h) hcts

lemma multipliableUniformlyOn_nat_one_add {f : ‚Ñï ‚Üí Œ± ‚Üí R} (hK : IsCompact K)
    {u : ‚Ñï ‚Üí ‚Ñù} (hu : Summable u) (h : ‚àÄ·∂† n in atTop, ‚àÄ x ‚àà K, ‚Äñf n x‚Äñ ‚â§ u n)
    (hcts : ‚àÄ n, ContinuousOn (f n) K) :
    MultipliableUniformlyOn (fun n x ‚Ü¶ 1 + f n x) {K} :=
  ‚ü®_, hasProdUniformlyOn_nat_one_add hK hu h hcts‚ü©

section LocallyCompactSpace

variable [LocallyCompactSpace Œ±]

/-- If a sequence of continuous functions `f i x` on an open subset `K` have norms eventually
bounded by a summable function, then `‚àè' i, (1 + f i x)` is locally uniformly convergent on `K`. -/
lemma hasProdLocallyUniformlyOn_one_add (hK : IsOpen K) (hu : Summable u)
    (h : ‚àÄ·∂† i in cofinite, ‚àÄ x ‚àà K, ‚Äñf i x‚Äñ ‚â§ u i) (hcts : ‚àÄ i, ContinuousOn (f i) K) :
    HasProdLocallyUniformlyOn (fun i x ‚Ü¶ 1 + f i x) (fun x ‚Ü¶ ‚àè' i, (1 + f i x)) K := by
  apply hasProdLocallyUniformlyOn_of_forall_compact hK
  refine fun S hS hC ‚Ü¶ hasProdUniformlyOn_one_add hC hu ?_ fun i ‚Ü¶ (hcts i).mono hS
  filter_upwards [h] with i hi a ha using hi a (hS ha)

lemma multipliableLocallyUniformlyOn_one_add (hK : IsOpen K) (hu : Summable u)
    (h : ‚àÄ·∂† i in cofinite, ‚àÄ x ‚àà K, ‚Äñf i x‚Äñ ‚â§ u i) (hcts : ‚àÄ i, ContinuousOn (f i) K) :
    MultipliableLocallyUniformlyOn (fun i x ‚Ü¶ 1 + f i x) K :=
  ‚ü®_, hasProdLocallyUniformlyOn_one_add hK hu h hcts‚ü©

/-- This is a version of `hasProdLocallyUniformlyOn_one_add` for sequences indexed by `‚Ñï`. -/
lemma hasProdLocallyUniformlyOn_nat_one_add {f : ‚Ñï ‚Üí Œ± ‚Üí R} (hK : IsOpen K) {u : ‚Ñï ‚Üí ‚Ñù}
    (hu : Summable u) (h : ‚àÄ·∂† n in atTop, ‚àÄ x ‚àà K, ‚Äñf n x‚Äñ ‚â§ u n)
    (hcts : ‚àÄ n, ContinuousOn (f n) K) :
    HasProdLocallyUniformlyOn (fun n x ‚Ü¶ 1 + f n x) (fun x ‚Ü¶ ‚àè' i, (1 + f i x)) K :=
  hasProdLocallyUniformlyOn_one_add hK hu (Nat.cofinite_eq_atTop ‚ñ∏ h) hcts

lemma multipliableLocallyUniformlyOn_nat_one_add  {f : ‚Ñï ‚Üí Œ± ‚Üí R} (hK : IsOpen K) {u : ‚Ñï ‚Üí ‚Ñù}
    (hu : Summable u) (h : ‚àÄ·∂† n in atTop, ‚àÄ x ‚àà K, ‚Äñf n x‚Äñ ‚â§ u n)
    (hcts : ‚àÄ n, ContinuousOn (f n) K) :
    MultipliableLocallyUniformlyOn (fun n x ‚Ü¶ 1 + f n x) K :=
  ‚ü®_, hasProdLocallyUniformlyOn_nat_one_add hK hu h hcts‚ü©

end LocallyCompactSpace

end Summable
