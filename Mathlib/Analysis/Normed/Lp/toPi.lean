import Mathlib.Analysis.Normed.Lp.PiLp

open WithLp

open scoped ENNReal Uniformity

variable (p : ‚Ñù‚â•0‚àû) [Fact (1 ‚â§ p)] {Œ± Œ≤ : Type*} [SeminormedAddCommGroup Œ±]
    [SeminormedAddCommGroup Œ≤]

def WithLp.addEquiv {Œ± : Type*} [AddCommGroup Œ±] : Œ± ‚âÉ+ (WithLp p Œ±) where
  toFun := toLp p
  invFun := ofLp
  map_add' := toLp_add p

private noncomputable def aux : SeminormedAddCommGroup (Œ± √ó Œ≤) :=
  SeminormedAddCommGroup.induced (Œ± √ó Œ≤) (WithLp p (Œ± √ó Œ≤)) (WithLp.addEquiv p)

attribute [local instance] aux in
lemma test : ùì§ (Œ± √ó Œ≤) = ùì§[(aux p).toPseudoMetricSpace.toUniformSpace] := by


example (p : ‚Ñù‚â•0‚àû) [Fact (1 ‚â§ p)] {Œ± Œ≤ : Type*} [SeminormedAddCommGroup Œ±]
    [SeminormedAddCommGroup Œ≤] : SeminormedAddCommGroup (Œ± √ó Œ≤) :=
