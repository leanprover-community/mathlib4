/-
Copyright (c) 2024 Mar√≠a In√©s de Frutos-Fern√°ndez. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mar√≠a In√©s de Frutos-Fern√°ndez
-/
import Mathlib.Algebra.Order.GroupWithZero.Bounds
import Mathlib.Analysis.Normed.Unbundled.RingSeminorm
import Mathlib.Analysis.SpecialFunctions.Pow.Continuity
import Mathlib.Topology.MetricSpace.Sequences

/-!
# smoothingSeminorm
In this file, we prove [BGR, Proposition 1.3.2/1][bosch-guntzer-remmert] : if `Œº` is a
nonarchimedean seminorm on a commutative ring `R`, then `
`iInf (fun (n : PNat), (Œº(x ^ (n : ‚Ñï))) ^ (1 / (n : ‚Ñù)))` is a power-multiplicative nonarchimedean
seminorm on `R`.

## Main Definitions
* `smoothingSeminormSeq` : the `‚Ñù`-valued sequence sending `n` to `((f( (x ^ n)) ^ (1 / n : ‚Ñù)`.
* `smoothingFun` : the iInf of the sequence `n ‚Ü¶ f(x ^ (n : ‚Ñï))) ^ (1 / (n : ‚Ñù)`.
* `smoothingSeminorm` : if `Œº 1 ‚â§ 1` and `Œº` is nonarchimedean, then `smoothingFun`
  is a ring seminorm.

## Main Results

* `tendsto_smoothingFun_of_map_one_le_one` : if `Œº 1 ‚â§ 1`, then `smoothingFun Œº x` is the limit
  of `smoothingSeminormSeq Œº x` as `n` tends to infinity.
* `isNonarchimedean_smoothingFun` : if `Œº 1 ‚â§ 1` and `Œº` is nonarchimedean, then
  `smoothingFun` is nonarchimedean.
* `isPowMul_smoothingFun` : if `Œº 1 ‚â§ 1` and `Œº` is nonarchimedean, then
  `smoothingFun Œº` is power-multiplicative.

## References
* [S. Bosch, U. G√ºntzer, R. Remmert, *Non-Archimedean Analysis*][bosch-guntzer-remmert]

## Tags

smoothingSeminorm, seminorm, nonarchimedean
-/

noncomputable section

open Filter Nat Real

open scoped Topology NNReal

variable {R : Type*} [CommRing R] (Œº : RingSeminorm R)

section smoothingSeminorm

/-- The `‚Ñù`-valued sequence sending `n` to `(Œº (x ^ n))^(1/n : ‚Ñù)`. -/
abbrev smoothingSeminormSeq (x : R) : ‚Ñï ‚Üí ‚Ñù := fun n => Œº (x ^ n) ^ (1 / n : ‚Ñù)

/-- For any positive `Œµ`, there exists a positive natural number `m` such that
  `Œº (x ^ (m : ‚Ñï)) ^ (1 / m : ‚Ñù) < iInf (fun (n : PNat), (Œº(x ^(n : ‚Ñï)))^(1/(n : ‚Ñù))) + Œµ/2`. -/
private theorem smoothingSeminormSeq_exists_pnat (x : R) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ m : PNat, Œº (x ^ (m : ‚Ñï)) ^ (1 / m : ‚Ñù) <
        (iInf fun n : PNat => Œº (x ^ (n : ‚Ñï)) ^ (1 / (n : ‚Ñù))) + Œµ / 2 :=
  exists_lt_of_ciInf_lt (lt_add_of_le_of_pos (le_refl _) (half_pos hŒµ))

private theorem smoothingSeminormSeq_tendsto_aux {L : ‚Ñù} (hL : 0 ‚â§ L) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ)
    {m1 : ‚Ñï} (hm1 : 0 < m1) {x : R} (hx : Œº x ‚â† 0) :
    Tendsto
      (fun n : ‚Ñï => (L + Œµ) ^ (-(((n % m1 : ‚Ñï) : ‚Ñù) / (n : ‚Ñù))) * (Œº x ^ (n % m1)) ^ (1 / (n : ‚Ñù)))
      atTop (ùìù 1) := by
  rw [‚Üê mul_one (1 : ‚Ñù)]
  have h_exp : Tendsto (fun n : ‚Ñï => ((n % m1 : ‚Ñï) : ‚Ñù) / (n : ‚Ñù)) atTop (ùìù 0) :=
    tendsto_mod_div_atTop_nhds_zero_nat hm1
  apply Tendsto.mul
  ¬∑ have h0 : Tendsto (fun t : ‚Ñï => -(((t % m1 : ‚Ñï) : ‚Ñù) / (t : ‚Ñù))) atTop (ùìù 0) := by
      rw [‚Üê neg_zero]
      exact Tendsto.neg h_exp
    rw [‚Üê rpow_zero (L + Œµ)]
    apply Tendsto.rpow tendsto_const_nhds h0
    rw [ne_eq, add_eq_zero_iff_of_nonneg hL (le_of_lt hŒµ)]
    exact Or.inl (not_and_of_not_right _ (ne_of_gt hŒµ))
  ¬∑ simp_rw [mul_one, ‚Üê rpow_natCast, ‚Üê rpow_mul (apply_nonneg Œº x), ‚Üê mul_div_assoc, mul_one,
      ‚Üê rpow_zero (Œº x)]
    exact Tendsto.rpow tendsto_const_nhds h_exp (Or.inl hx)

/-- `0` is a lower bound of `smoothingSeminormSeq`. -/
theorem zero_mem_lowerBounds_smoothingSeminormSeq_range (x : R) :
    0 ‚àà lowerBounds (Set.range fun n : ‚Ñï+ => Œº (x ^ (n : ‚Ñï)) ^ (1 / (n : ‚Ñù))) := by
  rintro y ‚ü®n, rfl‚ü©
  exact rpow_nonneg (apply_nonneg Œº _) _

/-- `smoothingSeminormSeq` is bounded below (by zero). -/
theorem smoothingSeminormSeq_bddBelow (x : R) :
    BddBelow (Set.range fun n : ‚Ñï+ => Œº (x ^ (n : ‚Ñï)) ^ (1 / (n : ‚Ñù))) :=
  ‚ü®0, zero_mem_lowerBounds_smoothingSeminormSeq_range Œº x‚ü©

/-- The iInf of the sequence `n ‚Ü¶ Œº(x ^ (n : ‚Ñï)))^(1 / (n : ‚Ñù)`. -/
abbrev smoothingFun (x : R) : ‚Ñù :=
  iInf fun n : PNat => Œº (x ^ (n : ‚Ñï)) ^ (1 / (n : ‚Ñù))

/-- If `Œº x = 0`, then `smoothingFun Œº x` is the limit of `smoothingSeminormSeq Œº x`. -/
theorem tendsto_smoothingFun_of_eq_zero {x : R} (hx : Œº x = 0) :
    Tendsto (smoothingSeminormSeq Œº x) atTop (ùìù (smoothingFun Œº x)) := by
  have h0 (n : ‚Ñï) (hn : 1 ‚â§ n) : Œº (x ^ n) ^ (1 / (n : ‚Ñù)) = 0 := by
    have hŒºn : Œº (x ^ n) = 0 := by
      apply le_antisymm _ (apply_nonneg Œº _)
      rw [‚Üê zero_pow (pos_iff_ne_zero.mp hn), ‚Üê hx]
      exact map_pow_le_pow _ x (one_le_iff_ne_zero.mp hn)
    rw [hŒºn, zero_rpow (one_div_cast_ne_zero (one_le_iff_ne_zero.mp hn))]
  have hL0 : (iInf fun n : PNat => Œº (x ^ (n : ‚Ñï)) ^ (1 / (n : ‚Ñù))) = 0 :=
    le_antisymm
      (ciInf_le_of_le (smoothingSeminormSeq_bddBelow Œº x) (1 : PNat) (le_of_eq (h0 1 (le_refl _))))
      (le_ciInf fun n => rpow_nonneg (apply_nonneg Œº _) _)
  simpa only [hL0] using tendsto_atTop_of_eventually_const h0

/-- If `Œº 1 ‚â§ 1` and `Œº x ‚â† 0`, then `smoothingFun Œº x` is the limit of
`smoothingSeminormSeq Œº x`. -/
theorem tendsto_smoothingFun_of_ne_zero (hŒº1 : Œº 1 ‚â§ 1) {x : R} (hx : Œº x ‚â† 0) :
    Tendsto (smoothingSeminormSeq Œº x) atTop (ùìù (smoothingFun Œº x)) := by
  let L := iInf fun n : PNat => Œº (x ^ (n : ‚Ñï)) ^ (1 / (n : ‚Ñù))
  have hL0 : 0 ‚â§ L := le_ciInf fun x => rpow_nonneg (apply_nonneg _ _) _
  rw [Metric.tendsto_atTop]
  intro Œµ hŒµ
  /- For each `Œµ > 0`, we can find a positive natural number `m1` such that
  `Œº x ^ (1 / m1) < L + Œµ/2`. -/
  obtain ‚ü®m1, hm1‚ü© := smoothingSeminormSeq_exists_pnat Œº x hŒµ
  /- For `n` large enough, we have that
    `(L + Œµ / 2) ^ (-(n % m1) / n)) * (Œº x ^ (n % m1)) ^ (1 / n) - 1 ‚â§ Œµ / (2 * (L + Œµ / 2))`. -/
  obtain ‚ü®m2, hm2‚ü© : ‚àÉ m : ‚Ñï, ‚àÄ n ‚â• m,
      (L + Œµ / 2) ^ (-(((n % m1 : ‚Ñï) : ‚Ñù) / (n : ‚Ñù))) * (Œº x ^ (n % m1)) ^ (1 / (n : ‚Ñù)) - 1 ‚â§
      Œµ / (2 * (L + Œµ / 2)) := by
    have hŒµ2 : 0 < Œµ / 2 := half_pos hŒµ
    have hL2 := smoothingSeminormSeq_tendsto_aux Œº hL0 hŒµ2 (PNat.pos m1) hx
    rw [Metric.tendsto_atTop] at hL2
    set Œ¥ : ‚Ñù := Œµ / (2 * (L + Œµ / 2)) with hŒ¥_def
    have hŒ¥ : 0 < Œ¥ := by
      rw [hŒ¥_def, div_mul_eq_div_mul_one_div]
      exact mul_pos hŒµ2
        ((one_div (L + Œµ / 2)).symm ‚ñ∏ inv_pos_of_pos (add_pos_of_nonneg_of_pos hL0 hŒµ2))
    obtain ‚ü®N, hN‚ü© := hL2 Œ¥ hŒ¥
    use N
    intro n hn
    specialize hN n hn
    rw [Real.dist_eq, abs_lt] at hN
    exact le_of_lt hN.right
  /- We now show that for all `n ‚â• max m1 m2`, we have
    `dist (smoothingSeminormSeq Œº x n) (smoothingFun Œº x) < Œµ`. -/
  use max (m1 : ‚Ñï) m2
  intro n hn
  have hn0 : 0 < n := lt_of_lt_of_le (lt_of_lt_of_le (PNat.pos m1) (le_max_left (m1 : ‚Ñï) m2)) hn
  rw [Real.dist_eq, abs_lt]
  have hL_le : L ‚â§ smoothingSeminormSeq Œº x n := by
    rw [‚Üê PNat.mk_coe n hn0]
    apply ciInf_le (smoothingSeminormSeq_bddBelow Œº x)
  refine ‚ü®lt_of_lt_of_le (neg_lt_zero.mpr hŒµ) (sub_nonneg.mpr hL_le), ?_‚ü©
  -- It is enough to show that `smoothingSeminormSeq Œº x n < L + Œµ`, that is,
  -- `Œº (x ^ n) ^ (1 / ‚Üën) < L + Œµ`.
  suffices h : smoothingSeminormSeq Œº x n < L + Œµ by rwa [tsub_lt_iff_left hL_le]
  by_cases hxn : Œº (x ^ (n % m1)) = 0
  ¬∑ /- If `Œº (x ^ (n % m1)) = 0`, this reduces to showing that
     `Œº (x ^ (‚Üëm1 * (n / ‚Üëm1)) * x ^ (n % ‚Üëm1)) ^ (1 / ‚Üën) ‚â§
     (Œº (x ^ (‚Üëm1 * (n / ‚Üëm1))) * Œº (x ^ (n % ‚Üëm1))) ^ (1 / ‚Üën)`, which follows from the
     submultiplicativity of `Œº`. -/
    simp only [smoothingSeminormSeq]
    nth_rw 1 [‚Üê div_add_mod n m1]
    have hLŒµ : 0 < L + Œµ := add_pos_of_nonneg_of_pos hL0 hŒµ
    apply lt_of_le_of_lt _ hLŒµ
    rw [pow_add, ‚Üê MulZeroClass.mul_zero (Œº (x ^ ((m1 : ‚Ñï) * (n / (m1 : ‚Ñï)))) ^ (1 / (n : ‚Ñù))),
      ‚Üê zero_rpow (one_div_cast_ne_zero (pos_iff_ne_zero.mp hn0)), ‚Üê hxn,
      ‚Üê mul_rpow (apply_nonneg Œº _) (apply_nonneg Œº _)]
    exact rpow_le_rpow (apply_nonneg Œº _) (map_mul_le_mul Œº _ _) (one_div_cast_nonneg _)
  ¬∑ --Otherwise, we have `0 < Œº (x ^ (n % ‚Üëm1))`.
    have hxn' : 0 < Œº (x ^ (n % ‚Üëm1)) := lt_of_le_of_ne (apply_nonneg _ _) (Ne.symm hxn)
    simp only [smoothingSeminormSeq]
    nth_rw 1 [‚Üê div_add_mod n m1]
    /- We use the submultiplicativity of `Œº` to deduce
    `Œº (x ^ (m1 * (n / m1)) ^ (1 / n) ‚â§ (Œº (x ^ m1) ^ (n / m1)) ^ (1 / n)`. -/
    have h : Œº (x ^ ((m1 : ‚Ñï) * (n / (m1 : ‚Ñï)))) ^ (1 / (n : ‚Ñù)) ‚â§
        (Œº (x ^ (m1 : ‚Ñï)) ^ (n / (m1 : ‚Ñï))) ^ (1 / (n : ‚Ñù)) := by
      apply rpow_le_rpow (apply_nonneg Œº _) _ (one_div_cast_nonneg _)
      rw [pow_mul]
      exact map_pow_le_pow Œº (x^(m1 : ‚Ñï))
        (pos_iff_ne_zero.mp (Nat.div_pos (le_trans (le_max_left (m1 : ‚Ñï) m2) hn) (PNat.pos m1)))
    have hL0' : 0 < L + Œµ / 2 := add_pos_of_nonneg_of_pos hL0 (half_pos hŒµ)
    /- We show that `(Œº (x ^ (m1 : ‚Ñï)) ^ (n / (m1 : ‚Ñï))) ^ (1 / (n : ‚Ñù)) <
        (L + Œµ / 2) ^ (1 - (((n % m1 : ‚Ñï) : ‚Ñù) / (n : ‚Ñù)))`. -/
    have h1 : (Œº (x ^ (m1 : ‚Ñï)) ^ (n / (m1 : ‚Ñï))) ^ (1 / (n : ‚Ñù)) <
        (L + Œµ / 2) * (L + Œµ / 2) ^ (-(((n % m1 : ‚Ñï) : ‚Ñù) / (n : ‚Ñù))) := by
      have hm10 : (m1 : ‚Ñù) ‚â† 0 := cast_ne_zero.mpr (_root_.ne_of_gt (PNat.pos m1))
      rw [‚Üê rpow_lt_rpow_iff (rpow_nonneg (apply_nonneg Œº _) _) (le_of_lt hL0')
        (cast_pos.mpr (PNat.pos m1)), ‚Üê rpow_mul (apply_nonneg Œº _), one_div_mul_cancel hm10,
        rpow_one] at hm1
      nth_rw 1 [‚Üê rpow_one (L + Œµ / 2)]
      have : (n : ‚Ñù) / n = (1 : ‚Ñù) := div_self (cast_ne_zero.mpr (_root_.ne_of_gt hn0))
      nth_rw 2 [‚Üê this]; clear this
      nth_rw 3 [‚Üê div_add_mod n m1]
      have h_lt : 0 < ((n / m1 : ‚Ñï) : ‚Ñù) / (n : ‚Ñù) :=
        div_pos (cast_pos.mpr (Nat.div_pos (le_trans (le_max_left _ _) hn) (PNat.pos m1)))
          (cast_pos.mpr hn0)
      rw [‚Üê rpow_natCast, ‚Üê rpow_add hL0', ‚Üê neg_div, div_add_div_same, Nat.cast_add,
        add_neg_cancel_right, Nat.cast_mul, ‚Üê rpow_mul (apply_nonneg Œº _), mul_one_div,
        mul_div_assoc, rpow_mul (le_of_lt hL0')]
      exact rpow_lt_rpow (apply_nonneg Œº _) hm1 h_lt
    /- We again use the submultiplicativity of `Œº` to deduce
    `Œº (x ^ (n % m1)) ^ (1 / n) ‚â§ (Œº x ^ (n % m1)) ^ (1 / n)`. -/
    have h2 : Œº (x ^ (n % m1)) ^ (1 / (n : ‚Ñù)) ‚â§ (Œº x ^ (n % m1)) ^ (1 / (n : ‚Ñù)) := by
      by_cases hnm1 : n % m1 = 0
      ¬∑ simpa [hnm1, pow_zero] using rpow_le_rpow (apply_nonneg Œº _) hŒº1 (one_div_cast_nonneg _)
      ¬∑ exact rpow_le_rpow (apply_nonneg Œº _) (map_pow_le_pow Œº _ hnm1) (one_div_cast_nonneg _)
    /- We bound `(L + Œµ / 2) ^ (1 -n % m1) / n) * (Œº x ^ (n % m1)) ^ (1 / n)` by `L + Œµ`. -/
    have h3 : (L + Œµ / 2) * (L + Œµ / 2) ^ (-(((n % m1 : ‚Ñï) : ‚Ñù) / (n : ‚Ñù))) *
          (Œº x ^ (n % m1)) ^ (1 / (n : ‚Ñù)) ‚â§ L + Œµ := by
      have heq : L + Œµ = L + Œµ / 2 + Œµ / 2 := by rw [add_assoc, add_halves]
      have hL0' : 0 < L + Œµ / 2 := add_pos_of_nonneg_of_pos hL0 (half_pos hŒµ)
      rw [heq, ‚Üê tsub_le_iff_left]
      nth_rw 3 [‚Üê mul_one (L + Œµ / 2)]
      rw [mul_assoc, ‚Üê mul_sub, mul_comm, ‚Üê le_div_iff‚ÇÄ hL0', div_div]
      exact hm2 n (le_trans (le_max_right (m1 : ‚Ñï) m2) hn)
    have h4 : 0 < Œº (x ^ (n % ‚Üëm1)) ^ (1 / (n : ‚Ñù)) := rpow_pos_of_pos hxn' _
    have h5 : 0 < (L + Œµ / 2) * (L + Œµ / 2) ^ (-(‚Üë(n % ‚Üëm1) / (n : ‚Ñù))) :=
      mul_pos hL0' (rpow_pos_of_pos hL0' _)
    /- We combine the previous steps to deduce that
     `Œº (x ^ (‚Üëm1 * (n / ‚Üëm1) + n % ‚Üëm1)) ^ (1 / ‚Üën) < L + Œµ`. -/
    calc Œº (x ^ ((m1 : ‚Ñï) * (n / (m1 : ‚Ñï)) + n % m1)) ^ (1 / (n : ‚Ñù)) =
          Œº (x ^ ((m1 : ‚Ñï) * (n / (m1 : ‚Ñï))) * x ^ (n % m1)) ^ (1 / (n : ‚Ñù)) := by rw [pow_add]
      _ ‚â§ (Œº (x ^ ((m1 : ‚Ñï) * (n / (m1 : ‚Ñï)))) * Œº (x ^ (n % m1))) ^ (1 / (n : ‚Ñù)) :=
        (rpow_le_rpow (apply_nonneg Œº _) (map_mul_le_mul Œº _ _) (one_div_cast_nonneg _))
      _ = Œº (x ^ ((m1 : ‚Ñï) * (n / (m1 : ‚Ñï)))) ^ (1 / (n : ‚Ñù)) *
          Œº (x ^ (n % m1)) ^ (1 / (n : ‚Ñù)) :=
        (mul_rpow (apply_nonneg Œº _) (apply_nonneg Œº _))
      _ ‚â§ (Œº (x ^ (m1 : ‚Ñï)) ^ (n / (m1 : ‚Ñï))) ^ (1 / (n : ‚Ñù)) *
            Œº (x ^ (n % m1)) ^ (1 / (n : ‚Ñù)) := ((mul_le_mul_right h4).mpr h)
      _ < (L + Œµ / 2) * (L + Œµ / 2) ^ (-(((n % m1 : ‚Ñï) : ‚Ñù) / (n : ‚Ñù))) *
            Œº (x ^ (n % m1)) ^ (1 / (n : ‚Ñù)) := (mul_lt_mul h1 (le_refl _) h4 (le_of_lt h5))
      _ ‚â§ (L + Œµ / 2) * (L + Œµ / 2) ^ (-(((n % m1 : ‚Ñï) : ‚Ñù) / (n : ‚Ñù))) *
            (Œº x ^ (n % m1)) ^ (1 / (n : ‚Ñù)) := ((mul_le_mul_left h5).mpr h2)
      _ ‚â§ L + Œµ := h3

/-- If `Œº 1 ‚â§ 1`, then `smoothingFun Œº x` is the limit of `smoothingSeminormSeq Œº x`
  as `n` tends to infinity. -/
theorem tendsto_smoothingFun_of_map_one_le_one (hŒº1 : Œº 1 ‚â§ 1) (x : R) :
    Tendsto (smoothingSeminormSeq Œº x) atTop (ùìù (smoothingFun Œº x)) := by
  by_cases hx : Œº x = 0
  ¬∑ exact tendsto_smoothingFun_of_eq_zero Œº hx
  ¬∑ exact tendsto_smoothingFun_of_ne_zero Œº hŒº1 hx

/-- If `Œº 1 ‚â§ 1`, then `smoothingFun Œº x` is nonnegative. -/
theorem smoothingFun_nonneg (hŒº1 : Œº 1 ‚â§ 1) (x : R) : 0 ‚â§ smoothingFun Œº x := by
  apply ge_of_tendsto (tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 x)
  simpa [eventually_atTop, ge_iff_le] using ‚ü®1, fun _ _ ‚Ü¶ rpow_nonneg (apply_nonneg Œº _) _‚ü©

/-- If `Œº 1 ‚â§ 1`, then `smoothingFun Œº 1 ‚â§ 1`. -/
theorem smoothingFun_one_le (hŒº1 : Œº 1 ‚â§ 1) : smoothingFun Œº 1 ‚â§ 1 := by
  apply le_of_tendsto (tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 (1 : R))
  simp only [eventually_atTop, ge_iff_le]
  use 1
  rintro n hn
  simp only [smoothingSeminormSeq]
  rw [one_pow]
  conv_rhs => rw [‚Üê one_rpow (1 / n : ‚Ñù)]
  have hn1 : 0 < (1 / n : ‚Ñù) := by
    apply _root_.div_pos zero_lt_one
    rw [‚Üê cast_zero, cast_lt]
    exact succ_le_iff.mp hn
  exact (rpow_le_rpow_iff (apply_nonneg Œº _) zero_le_one hn1).mpr hŒº1

/-- For any `x` and any positive `n`, `smoothingFun Œº x ‚â§ Œº (x ^ (n : ‚Ñï))^(1 / n : ‚Ñù)`. -/
theorem smoothingFun_le (x : R) (n : PNat) :
    smoothingFun Œº x ‚â§ Œº (x ^ (n : ‚Ñï)) ^ (1 / n : ‚Ñù) :=
  ciInf_le (smoothingSeminormSeq_bddBelow Œº x) _

/-- For all `x : R`, `smoothingFun Œº x ‚â§ Œº x`. -/
theorem smoothingFun_le_self (x : R) : smoothingFun Œº x ‚â§ Œº x := by
  apply (smoothingFun_le Œº x 1).trans
  rw [PNat.one_coe, pow_one, cast_one, div_one, rpow_one]

/- In this section, we prove that if `Œº` is nonarchimedean, then `smoothingFun Œº` is
  nonarchimedean. -/
section IsNonarchimedean

variable {x y : R} (hn : ‚àÄ n : ‚Ñï, ‚àÉ m < n + 1, Œº ((x + y) ^ (n : ‚Ñï)) ^ (1 / (n : ‚Ñù)) ‚â§
  (Œº (x ^ m) * Œº (y ^ (n - m : ‚Ñï))) ^ (1 / (n : ‚Ñù)))

/-- Auxiliary sequence for the proof that `smoothingFun` is nonarchimedean. -/
private def mu : ‚Ñï ‚Üí ‚Ñï := fun n => Classical.choose (hn n)

private theorem mu_property (n : ‚Ñï) : Œº ((x + y) ^ (n : ‚Ñï)) ^ (1 / (n : ‚Ñù)) ‚â§
    (Œº (x ^ mu Œº hn n) * Œº (y ^ (n - mu Œº hn n : ‚Ñï))) ^ (1 / (n : ‚Ñù)) :=
  (Classical.choose_spec (hn n)).2

private theorem mu_le (n : ‚Ñï) : mu Œº hn n ‚â§ n := by
  simpa [mu, ‚Üê Nat.lt_succ_iff] using (Classical.choose_spec (hn n)).1

private theorem mu_bdd (n : ‚Ñï) : (mu Œº hn n : ‚Ñù) / n ‚àà Set.Icc (0 : ‚Ñù) 1 := by
  refine Set.mem_Icc.mpr ‚ü®div_nonneg (cast_nonneg (mu Œº hn n)) (cast_nonneg n), ?_‚ü©
  by_cases hn0 : n = 0
  ¬∑ rw [hn0, cast_zero, div_zero]; exact zero_le_one
  ¬∑ rw [div_le_one (cast_pos.mpr (Nat.pos_of_ne_zero hn0)), cast_le]
    exact mu_le _ _ _

private theorem Œº_bddBelow (s : ‚Ñï ‚Üí ‚Ñï) {x : R} (œà : ‚Ñï ‚Üí ‚Ñï) :
    BddBelow {a : ‚Ñù |
      ‚àÄ·∂† n : ‚Ñù in map (fun n : ‚Ñï => Œº x ^ (‚Üë(s (œà n)) * (1 / (œà n : ‚Ñù)))) atTop, n ‚â§ a} := by
  use 0
  simp only [mem_lowerBounds, eventually_map, eventually_atTop, ge_iff_le, Set.mem_setOf_eq,
    forall_exists_index]
  intro r m hm
  exact le_trans (rpow_nonneg (apply_nonneg Œº _) _) (hm m (le_refl _))

private theorem Œº_bddAbove (hŒº1 : Œº 1 ‚â§ 1) {s : ‚Ñï ‚Üí ‚Ñï} (hs : ‚àÄ n : ‚Ñï, s n ‚â§ n) (x : R)
    (œà : ‚Ñï ‚Üí ‚Ñï) : BddAbove (Set.range fun n : ‚Ñï => Œº (x ^ s (œà n)) ^ (1 / (œà n : ‚Ñù))) := by
  have hœà : ‚àÄ n, 0 ‚â§ 1 / (œà n : ‚Ñù) := fun _ ‚Ü¶ by simp only [one_div, inv_nonneg, cast_nonneg]
  by_cases hx : Œº x ‚â§ 1
  ¬∑ use 1
    simp only [mem_upperBounds, Set.mem_range, forall_exists_index, forall_apply_eq_imp_iff']
    rintro _ n rfl
    apply le_trans (rpow_le_rpow (apply_nonneg _ _) (map_pow_le_pow' hŒº1 _ _) (hœà n))
    rw [‚Üê rpow_natCast, ‚Üê rpow_mul (apply_nonneg _ _), mul_one_div]
    exact rpow_le_one (apply_nonneg _ _) hx (div_nonneg (cast_nonneg _) (cast_nonneg _))
  ¬∑ use Œº x
    simp only [mem_upperBounds, Set.mem_range, forall_exists_index, forall_apply_eq_imp_iff']
    rintro _ n rfl
    apply le_trans (rpow_le_rpow (apply_nonneg _ _) (map_pow_le_pow' hŒº1 _ _) (hœà n))
    rw [‚Üê rpow_natCast, ‚Üê rpow_mul (apply_nonneg _ _), mul_one_div]
    conv_rhs => rw [‚Üê rpow_one (Œº x)]
    rw [rpow_le_rpow_left_iff (not_le.mp hx)]
    exact div_le_one_of_le‚ÇÄ (cast_le.mpr (hs (œà n))) (cast_nonneg _)

private theorem Œº_bddAbove' (hŒº1 : Œº 1 ‚â§ 1) {s : ‚Ñï ‚Üí ‚Ñï} (hs : ‚àÄ n : ‚Ñï, s n ‚â§ n) (x : R)
    (œà : ‚Ñï ‚Üí ‚Ñï) : BddAbove ((fun n : ‚Ñï => Œº (x ^ s (œà n)) ^ (1 / (œà n : ‚Ñù))) '' Set.univ) := by
  rw [Set.image_eq_range]
  convert Œº_bddAbove Œº hŒº1 hs x œà
  ext
  simp [one_div, Set.mem_range, Subtype.exists, Set.mem_univ, exists_const]

private theorem Œº_nonempty {s : ‚Ñï ‚Üí ‚Ñï} (hs_le : ‚àÄ n : ‚Ñï, s n ‚â§ n) {x : R} (œà : ‚Ñï ‚Üí ‚Ñï) :
    {a : ‚Ñù | ‚àÄ·∂† n : ‚Ñù in map (fun n : ‚Ñï => Œº x ^ (‚Üë(s (œà n)) * (1 / (œà n : ‚Ñù)))) atTop,
      n ‚â§ a}.Nonempty := by
  by_cases hŒºx : Œº x < 1
  ¬∑ use 1
    simp only [eventually_map, eventually_atTop, ge_iff_le, Set.mem_setOf_eq]
    exact ‚ü®0, fun _ _ ‚Ü¶ rpow_le_one (apply_nonneg _ _) (le_of_lt hŒºx)
      (mul_nonneg (cast_nonneg _) (one_div_nonneg.mpr (cast_nonneg _)))‚ü©
  ¬∑ use Œº x
    simp only [eventually_map, eventually_atTop, ge_iff_le, Set.mem_setOf_eq]
    use 0
    intro b _
    nth_rw 2 [‚Üê rpow_one (Œº x)]
    apply rpow_le_rpow_of_exponent_le (not_lt.mp hŒºx)
    rw [mul_one_div]
    exact div_le_one_of_le‚ÇÄ (cast_le.mpr (hs_le (œà b))) (cast_nonneg _)

private theorem Œº_limsup_le_one {s : ‚Ñï ‚Üí ‚Ñï} (hs_le : ‚àÄ n : ‚Ñï, s n ‚â§ n) {x : R} {œà : ‚Ñï ‚Üí ‚Ñï}
    (hœà_lim : Tendsto ((fun n : ‚Ñï => ‚Üë(s n) / (n : ‚Ñù)) ‚àò œà) atTop (ùìù 0)) :
    limsup (fun n : ‚Ñï => Œº x ^ ((s (œà n) : ‚Ñù) * (1 / (œà n : ‚Ñù)))) atTop ‚â§ 1 := by
  simp only [limsup, limsSup]
  rw [csInf_le_iff (Œº_bddBelow Œº s œà) (Œº_nonempty Œº hs_le œà)]
  ¬∑ intro c hc_bd
    simp only [mem_lowerBounds, eventually_map, eventually_atTop, ge_iff_le, Set.mem_setOf_eq,
      forall_exists_index] at hc_bd
    by_cases hŒºx : Œº x < 1
    ¬∑ apply hc_bd (1 : ‚Ñù) 0
      intro b _
      exact rpow_le_one (apply_nonneg _ _) (le_of_lt hŒºx)
          (mul_nonneg (cast_nonneg _) (one_div_nonneg.mpr (cast_nonneg _)))
    ¬∑ have hŒº_lim : Tendsto (fun n : ‚Ñï => Œº x ^ (‚Üë(s (œà n)) * (1 / (œà n : ‚Ñù)))) atTop (ùìù 1) := by
        nth_rw 1 [‚Üê rpow_zero (Œº x)]
        convert Tendsto.rpow tendsto_const_nhds hœà_lim
            (Or.inl (ne_of_gt (lt_of_lt_of_le zero_lt_one (not_lt.mp hŒºx))))
        ¬∑ simp only [rpow_zero, mul_one_div, Function.comp_apply]
        ¬∑ rw [rpow_zero]
      rw [tendsto_atTop_nhds] at hŒº_lim
      apply le_of_forall_pos_le_add
      intro Œµ hŒµ
      have h1 : (1 : ‚Ñù) ‚àà Set.Ioo 0 (1 + Œµ) := by
        simp only [Set.mem_Ioo, zero_lt_one, lt_add_iff_pos_right, hŒµ, and_self]
      obtain ‚ü®k, hk‚ü© := hŒº_lim (Set.Ioo (0 : ‚Ñù) (1 + Œµ)) h1 isOpen_Ioo
      exact hc_bd (1 + Œµ) k fun b hb => le_of_lt (Set.mem_Ioo.mp (hk b hb)).2

private theorem limsup_mu_le (hŒº1 : Œº 1 ‚â§ 1) {s : ‚Ñï ‚Üí ‚Ñï} (hs_le : ‚àÄ n : ‚Ñï, s n ‚â§ n) {x : R}
    {a : ‚Ñù} (a_in : a ‚àà Set.Icc (0 : ‚Ñù) 1) {œà : ‚Ñï ‚Üí ‚Ñï} (hœà_mono : StrictMono œà)
    (hœà_lim : Tendsto ((fun n : ‚Ñï => (s n : ‚Ñù) / ‚Üën) ‚àò œà) atTop (ùìù a)) :
    limsup (fun n : ‚Ñï => Œº (x ^ s (œà n)) ^ (1 / (œà n : ‚Ñù))) atTop ‚â§ smoothingFun Œº x ^ a := by
  by_cases ha : a = 0
  ¬∑ rw [ha] at hœà_lim
    calc limsup (fun n : ‚Ñï => Œº (x ^ s (œà n)) ^ (1 / (œà n : ‚Ñù))) atTop ‚â§
          limsup (fun n : ‚Ñï => Œº x ^ ((s (œà n) : ‚Ñù) * (1 / (œà n : ‚Ñù)))) atTop := by
          apply csInf_le_csInf _ (Œº_nonempty Œº hs_le œà)
          ¬∑ intro b hb
            simp only [eventually_map, eventually_atTop, ge_iff_le, Set.mem_setOf_eq] at hb ‚ä¢
            obtain ‚ü®m, hm‚ü© := hb
            use m
            intro k hkm
            apply le_trans _ (hm k hkm)
            rw [rpow_mul (apply_nonneg Œº x), rpow_natCast]
            exact rpow_le_rpow (apply_nonneg Œº _) (map_pow_le_pow' hŒº1 x _)
              (one_div_nonneg.mpr (cast_nonneg _))
          ¬∑ use 0
            simp only [mem_lowerBounds, eventually_map, eventually_atTop, ge_iff_le,
              Set.mem_setOf_eq, forall_exists_index]
            exact fun _ m hm ‚Ü¶ le_trans (rpow_nonneg (apply_nonneg Œº _) _) (hm m (le_refl _))
      _ ‚â§ 1 := (Œº_limsup_le_one Œº hs_le hœà_lim)
      _ = smoothingFun Œº x ^ a := by rw [ha, rpow_zero]
  ¬∑ have ha_pos : 0 < a := lt_of_le_of_ne a_in.1 (Ne.symm ha)
    have h_eq : (fun n : ‚Ñï =>
        (Œº (x ^ s (œà n)) ^ (1 / (s (œà n) : ‚Ñù))) ^ ((s (œà n) : ‚Ñù) / (œà n : ‚Ñù))) =·∂†[atTop]
        fun n : ‚Ñï => Œº (x ^ s (œà n)) ^ (1 / (œà n : ‚Ñù)) := by
      have h : (fun n : ‚Ñï => (1 : ‚Ñù) / (s (œà n) : ‚Ñù) * (s (œà n) : ‚Ñù)) =·∂†[atTop] 1 := by
        apply Filter.EventuallyEq.div_mul_cancel_atTop
        exact Tendsto.num (tendsto_natCast_atTop_atTop.comp hœà_mono.tendsto_atTop) ha_pos hœà_lim
      simp_rw [‚Üê rpow_mul (apply_nonneg Œº _), mul_div]
      exact EventuallyEq.comp‚ÇÇ EventuallyEq.rfl HPow.hPow (h.div EventuallyEq.rfl)
    exact le_of_eq (Tendsto.limsup_eq (Tendsto.congr' h_eq
      ((((tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 x).comp
      ((tendsto_natCast_atTop_iff (R := ‚Ñù)).mp <|
        Tendsto.num (tendsto_natCast_atTop_atTop.comp hœà_mono.tendsto_atTop)
          ha_pos hœà_lim)).rpow hœà_lim (Or.inr ha_pos)))))

theorem tendsto_smoothingFun_comp (hŒº1 : Œº 1 ‚â§ 1) (x : R) {œà : ‚Ñï ‚Üí ‚Ñï}
    (hœà_mono : StrictMono œà) :
    Tendsto (fun n : ‚Ñï => Œº (x ^ œà n) ^ (1 / œà n : ‚Ñù)) atTop (ùìù (smoothingFun Œº x)) :=
  have hœà_lim' : Tendsto œà atTop atTop := StrictMono.tendsto_atTop hœà_mono
  (tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 x).comp hœà_lim'

/-- If `Œº 1 ‚â§ 1` and `Œº` is nonarchimedean, then `smoothingFun Œº` is nonarchimedean. -/
theorem isNonarchimedean_smoothingFun (hŒº1 : Œº 1 ‚â§ 1) (hna : IsNonarchimedean Œº) :
    IsNonarchimedean (smoothingFun Œº) := by
  -- Fix `x, y : R`.
  intro x y
  have hn : ‚àÄ n : ‚Ñï, ‚àÉ m < n + 1,
      Œº ((x + y) ^ (n : ‚Ñï)) ^ (1 / (n : ‚Ñù)) ‚â§ (Œº (x ^ m) * Œº (y ^ (n - m : ‚Ñï))) ^ (1 / (n : ‚Ñù)) :=
    fun n => RingSeminorm.exists_index_pow_le Œº hna x y n
  /- For each `n : ‚Ñï`, we find `mu n` and `nu n` such that `mu n + nu n = n` and
    `Œº ((x + y) ^ n) ^ (1 / n) ‚â§ (Œº (x ^ (mu n)) * Œº (y ^ (nu n))) ^ (1 / n)`. -/
  let mu : ‚Ñï ‚Üí ‚Ñï := fun n => mu Œº hn n
  set nu : ‚Ñï ‚Üí ‚Ñï := fun n => n - mu n with hnu
  have hmu_le : ‚àÄ n : ‚Ñï, mu n ‚â§ n := fun n => mu_le Œº hn n
  have hmu_bdd : ‚àÄ n : ‚Ñï, (mu n : ‚Ñù) / n ‚àà Set.Icc (0 : ‚Ñù) 1 := fun n => mu_bdd Œº hn n
  have hs : Bornology.IsBounded (Set.Icc (0 : ‚Ñù) 1) := Metric.isBounded_Icc 0 1
  /- Since `0 ‚â§ (mu n) / n ‚â§ 1` for all `n`, we can find a subsequence `(œà n) ‚äÜ ‚Ñï` such that the
    limit of `mu (œà n) / œà n` as `n` tends to infinity exists. We denote this limit by `a`. -/
  obtain ‚ü®a, a_in, œà, hœà_mono, hœà_lim‚ü© := tendsto_subseq_of_bounded hs hmu_bdd
  rw [closure_Icc] at a_in
  /- The limit of `nu (œà n) / œà n` as `n` tends to infinity also exists, and it is equal to
    `b := 1 - a` -/
  set b := 1 - a with hb
  have hb_lim : Tendsto ((fun n : ‚Ñï => (nu n : ‚Ñù) / ‚Üën) ‚àò œà) atTop (ùìù b) := by
    apply Tendsto.congr' _ (Tendsto.const_sub 1 hœà_lim)
    simp only [EventuallyEq, Function.comp_apply, eventually_atTop, ge_iff_le]
    use 1
    intro m hm
    have h0 : (œà m : ‚Ñù) ‚â† 0 := cast_ne_zero.mpr (_root_.ne_of_gt (lt_of_le_of_lt (_root_.zero_le _)
      (hœà_mono (Nat.pos_of_ne_zero (one_le_iff_ne_zero.mp hm)))))
    rw [‚Üê div_self h0, ‚Üê sub_div, cast_sub (hmu_le _)]
  have b_in : b ‚àà Set.Icc (0 : ‚Ñù) 1 := unitInterval.mem_iff_one_sub_mem.mp a_in
  have hnu_le : ‚àÄ n : ‚Ñï, nu n ‚â§ n := fun n => by simp only [hnu, tsub_le_self]
  have hx : limsup (fun n : ‚Ñï => Œº (x ^ mu (œà n)) ^ (1 / (œà n : ‚Ñù))) atTop ‚â§
      smoothingFun Œº x ^ a := limsup_mu_le Œº hŒº1 hmu_le a_in hœà_mono hœà_lim
  have hy : limsup (fun n : ‚Ñï => Œº (y ^ nu (œà n)) ^ (1 / (œà n : ‚Ñù))) atTop ‚â§
      smoothingFun Œº y ^ b :=
    limsup_mu_le Œº hŒº1 hnu_le b_in hœà_mono hb_lim
  have hxy : limsup
      (fun n => Œº (x ^ mu (œà n)) ^ (1 / (œà n : ‚Ñù)) * Œº (y ^ nu (œà n)) ^ (1 / (œà n : ‚Ñù))) atTop ‚â§
        smoothingFun Œº x ^ a * smoothingFun Œº y ^ b := by
    have hxy' :
      limsup (fun n : ‚Ñï => Œº (x ^ mu (œà n)) ^ (1 / (œà n : ‚Ñù)) * Œº (y ^ nu (œà n)) ^ (1 / (œà n : ‚Ñù)))
        atTop ‚â§ limsup (fun n : ‚Ñï => Œº (x ^ mu (œà n)) ^ (1 / (œà n : ‚Ñù))) atTop *
          limsup (fun n : ‚Ñï => Œº (y ^ nu (œà n)) ^ (1 / (œà n : ‚Ñù))) atTop :=
      limsup_mul_le (Eventually.of_forall (fun n => rpow_nonneg (apply_nonneg _ _) _))
        (Œº_bddAbove Œº hŒº1 hmu_le x œà).isBoundedUnder_of_range
        (Eventually.of_forall (fun n => rpow_nonneg (apply_nonneg _ _) _))
        (Œº_bddAbove Œº hŒº1 hnu_le y œà).isBoundedUnder_of_range
    have h_bdd : IsBoundedUnder LE.le atTop fun n : ‚Ñï => Œº (y ^ nu (œà n)) ^ (1 / (œà n : ‚Ñù)) :=
      RingSeminorm.isBoundedUnder Œº hŒº1 hnu_le œà
    apply le_trans hxy' (mul_le_mul hx hy (le_limsup_of_frequently_le (Frequently.of_forall
      (fun n ‚Ü¶ rpow_nonneg (apply_nonneg Œº _) _)) h_bdd)
        (rpow_nonneg (smoothingFun_nonneg Œº hŒº1 x) _))
  apply le_of_forall_sub_le
  /- Fix `Œµ > 0`. We first show that `smoothingFun Œº x ^ a * smoothingFun Œº y ^ b + Œµ ‚â§
    max (smoothingFun Œº x) (smoothingFun Œº y) + Œµ`. -/
  intro Œµ hŒµ
  rw [sub_le_iff_le_add]
  have h_mul : smoothingFun Œº x ^ a * smoothingFun Œº y ^ b + Œµ ‚â§
      max (smoothingFun Œº x) (smoothingFun Œº y) + Œµ :=  by
    rw [max_def]
    split_ifs with h
    ¬∑ rw [add_le_add_iff_right]
      apply le_trans (mul_le_mul_of_nonneg_right
        (rpow_le_rpow (smoothingFun_nonneg Œº hŒº1 _) h a_in.1)
        (rpow_nonneg (smoothingFun_nonneg Œº hŒº1 _) _))
      rw [hb, ‚Üê rpow_add_of_nonneg (smoothingFun_nonneg Œº hŒº1 _) a_in.1
        (sub_nonneg.mpr a_in.2), add_sub, add_sub_cancel_left, rpow_one]
    ¬∑ rw [add_le_add_iff_right]
      apply le_trans (mul_le_mul_of_nonneg_left
        (rpow_le_rpow (smoothingFun_nonneg Œº hŒº1 _) (le_of_lt (not_le.mp h)) b_in.1)
        (rpow_nonneg (smoothingFun_nonneg Œº hŒº1 _) _))
      rw [hb, ‚Üê rpow_add_of_nonneg (smoothingFun_nonneg Œº hŒº1 _) a_in.1
        (sub_nonneg.mpr a_in.2), add_sub, add_sub_cancel_left, rpow_one]
  apply le_trans _ h_mul
  /- We then show that there exists some natural number `N` such that
    `Œº (x ^ mu (œà n)) ^ (1 / (œà n : ‚Ñù)) * Œº (y ^ nu (œà n)) ^ (1 / (œà n : ‚Ñù)) <
      smoothingFun Œº x ^ a * smoothingFun Œº y ^ b + Œµ`. -/
  have hex : ‚àÉ n : PNat, Œº (x ^ mu (œà n)) ^ (1 / (œà n : ‚Ñù)) * Œº (y ^ nu (œà n)) ^ (1 / (œà n : ‚Ñù)) <
      smoothingFun Œº x ^ a * smoothingFun Œº y ^ b + Œµ :=
    Filter.exists_lt_of_limsup_le (bddAbove_range_mul (Œº_bddAbove Œº hŒº1 hmu_le _ _)
      (fun n => rpow_nonneg (apply_nonneg _ _) _) (Œº_bddAbove Œº hŒº1 hnu_le _ _)
        fun n => rpow_nonneg (apply_nonneg _ _) _).isBoundedUnder_of_range hxy hŒµ
  obtain ‚ü®N, hN‚ü© := hex
  /- By definition of `smoothingFun`, and applying the inequality `hN`, it suffices to show that
    `Œº ((x + y) ^ œà N) ^ (1 / œà N) ‚â§ Œº (x ^ mu (œà N)) ^ (1 / œà N) * Œº (y ^ nu œà N) ^ (1 / œà N)`. -/
  apply le_trans (ciInf_le (smoothingSeminormSeq_bddBelow Œº _)
    ‚ü®œà N, lt_of_le_of_lt (_root_.zero_le (œà 0)) (hœà_mono.lt_iff_lt.mpr N.pos)‚ü©)
  apply le_trans _ hN.le
  simpa [PNat.mk_coe, hnu, ‚Üê mul_rpow (apply_nonneg Œº _) (apply_nonneg Œº _)] using
    mu_property Œº hn (œà N)

end IsNonarchimedean

/-- If `Œº 1 ‚â§ 1` and `Œº` is nonarchimedean, then `smoothingFun` is a ring seminorm. -/
def smoothingSeminorm (hŒº1 : Œº 1 ‚â§ 1) (hna : IsNonarchimedean Œº) : RingSeminorm R where
  toFun     := smoothingFun Œº
  map_zero' := by
    apply tendsto_nhds_unique_of_eventuallyEq (tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 0)
      tendsto_const_nhds
    simp only [EventuallyEq, eventually_atTop, ge_iff_le]
    use 1
    intro n hn
    simp only [smoothingSeminormSeq]
    rw [zero_pow (pos_iff_ne_zero.mp hn), map_zero, zero_rpow]
    exact one_div_ne_zero (cast_ne_zero.mpr (one_le_iff_ne_zero.mp hn))
  add_le' _ _ :=  (isNonarchimedean_smoothingFun Œº hŒº1 hna).add_le (smoothingFun_nonneg Œº hŒº1)
  neg' n := by
    simp only [smoothingFun]
    congr
    ext n
    rw [neg_pow]
    rcases neg_one_pow_eq_or R n with hpos | hneg
    ¬∑ rw [hpos, one_mul]
    ¬∑ rw [hneg, neg_one_mul, map_neg_eq_map Œº]
  mul_le' x y := by
    apply le_of_tendsto_of_tendsto' (tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 (x * y))
      (Tendsto.mul (tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 x)
        (tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 y))
    intro n
    have hn : 0 ‚â§ 1 / (n : ‚Ñù) := by simp only [one_div, inv_nonneg, cast_nonneg]
    simp only [smoothingSeminormSeq]
    rw [‚Üê mul_rpow (apply_nonneg Œº _) (apply_nonneg Œº _), mul_pow]
    exact rpow_le_rpow (apply_nonneg Œº _) (map_mul_le_mul Œº _ _) hn

/-- If `Œº 1 ‚â§ 1` and `Œº` is nonarchimedean, then `smoothingSeminorm Œº 1 ‚â§ 1`. -/
theorem smoothingSeminorm_map_one_le_one (hŒº1 : Œº 1 ‚â§ 1)
    (hna : IsNonarchimedean Œº) : smoothingSeminorm Œº hŒº1 hna 1 ‚â§ 1 :=
  smoothingFun_one_le Œº hŒº1

/-- If `Œº 1 ‚â§ 1` and `Œº` is nonarchimedean, then `smoothingFun Œº` is
  power-multiplicative. -/
theorem isPowMul_smoothingFun (hŒº1 : Œº 1 ‚â§ 1) : IsPowMul (smoothingFun Œº) := by
  intro x m hm
  have hlim : Tendsto (fun n => smoothingSeminormSeq Œº x (m * n)) atTop
      (ùìù (smoothingFun Œº x)) :=
    Tendsto.comp (tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 x) (tendsto_atTop_atTop_of_monotone
      (fun n k hnk ‚Ü¶ mul_le_mul_left' hnk m) (fun n ‚Ü¶ ‚ü®n, le_mul_of_one_le_left' hm‚ü©))
  apply tendsto_nhds_unique _ (Tendsto.pow hlim m)
  have h_eq (n : ‚Ñï) : smoothingSeminormSeq Œº x (m * n) ^ m = smoothingSeminormSeq Œº (x ^ m) n := by
    have hm' : (m : ‚Ñù) ‚â† 0 := cast_ne_zero.mpr (_root_.ne_of_gt (lt_of_lt_of_le zero_lt_one hm))
    simp only [smoothingSeminormSeq]
    rw [pow_mul, ‚Üê rpow_natCast, ‚Üê rpow_mul (apply_nonneg Œº _), cast_mul, ‚Üê one_div_mul_one_div,
      mul_comm (1 / (m : ‚Ñù)), mul_assoc, one_div_mul_cancel hm', mul_one]
  simpa [h_eq] using tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 _

/-- If `Œº 1 ‚â§ 1` and `‚àÄ (1 ‚â§ n), Œº (x ^ n) = Œº x ^ n`, then `smoothingFun Œº x = Œº x`. -/
theorem smoothingFun_of_powMul (hŒº1 : Œº 1 ‚â§ 1) {x : R}
    (hx : ‚àÄ (n : ‚Ñï) (_hn : 1 ‚â§ n), Œº (x ^ n) = Œº x ^ n) : smoothingFun Œº x = Œº x := by
  apply tendsto_nhds_unique_of_eventuallyEq (tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 x)
    tendsto_const_nhds
  simp only [EventuallyEq, eventually_atTop, ge_iff_le]
  use 1
  intro n hn
  simp only [smoothingSeminormSeq]
  have hn0 : (n : ‚Ñù) ‚â† 0 := cast_ne_zero.mpr (one_le_iff_ne_zero.mp hn)
  rw [hx n hn, ‚Üê rpow_natCast, ‚Üê rpow_mul (apply_nonneg Œº _), mul_one_div_cancel hn0, rpow_one]

/-- If `Œº 1 ‚â§ 1` and `‚àÄ y : R, Œº (x * y) = Œº x * Œº y`, then `smoothingFun Œº x = Œº x`. -/
theorem smoothingFun_apply_of_map_mul_eq_mul (hŒº1 : Œº 1 ‚â§ 1) {x : R}
    (hx : ‚àÄ y : R, Œº (x * y) = Œº x * Œº y) : smoothingFun Œº x = Œº x := by
  apply tendsto_nhds_unique_of_eventuallyEq (tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 x)
    tendsto_const_nhds
  simp only [EventuallyEq, eventually_atTop, ge_iff_le]
  use 1
  intro n hn
  simp only [smoothingSeminormSeq]
  by_cases hx0 : Œº x = 0
  ¬∑ have hxn : Œº (x ^ n) = 0 := by
      apply le_antisymm _ (apply_nonneg Œº _)
      apply le_trans (map_pow_le_pow Œº x (one_le_iff_ne_zero.mp hn))
      rw [hx0, zero_pow (pos_iff_ne_zero.mp hn)]
    rw [hx0, hxn, zero_rpow (one_div_cast_ne_zero (one_le_iff_ne_zero.mp hn))]
  ¬∑ have h1 : Œº 1 = 1 := by rw [‚Üê mul_right_inj' hx0, ‚Üê hx 1, mul_one, mul_one]
    have hn0 : (n : ‚Ñù) ‚â† 0 := cast_ne_zero.mpr (_root_.ne_of_gt (lt_of_lt_of_le zero_lt_one hn))
    rw [‚Üê mul_one (x ^ n), pow_mul_apply_eq_pow_mul Œº hx, ‚Üê rpow_natCast, h1, mul_one,
      ‚Üê rpow_mul (apply_nonneg Œº _), mul_one_div_cancel hn0, rpow_one]

/-- If `Œº 1 ‚â§ 1`, `Œº` is nonarchimedean, and `‚àÄ y : R, Œº (x * y) = Œº x * Œº y`, then
  `smoothingSeminorm Œº x = Œº x`. -/
theorem smoothingSeminorm_apply_of_map_mul_eq_mul (hŒº1 : Œº 1 ‚â§ 1) (hna : IsNonarchimedean Œº) {x : R}
    (hx : ‚àÄ y : R, Œº (x * y) = Œº x * Œº y) : smoothingSeminorm Œº hŒº1 hna x = Œº x :=
  smoothingFun_apply_of_map_mul_eq_mul Œº hŒº1 hx

/-- If `Œº 1 ‚â§ 1`, and `x` is multiplicative for `Œº`, then it is multiplicative for
  `smoothingFun`. -/
theorem smoothingFun_of_map_mul_eq_mul (hŒº1 : Œº 1 ‚â§ 1) {x : R} (hx : ‚àÄ y : R, Œº (x * y) = Œº x * Œº y)
    (y : R) : smoothingFun Œº (x * y) = smoothingFun Œº x * smoothingFun Œº y := by
  have hlim : Tendsto (fun n => Œº x * smoothingSeminormSeq Œº y n) atTop
      (ùìù (smoothingFun Œº x * smoothingFun Œº y)) := by
    rw [smoothingFun_apply_of_map_mul_eq_mul Œº hŒº1 hx]
    exact Tendsto.const_mul _ (tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 y)
  apply tendsto_nhds_unique_of_eventuallyEq (tendsto_smoothingFun_of_map_one_le_one Œº hŒº1 (x * y))
    hlim
  simp only [EventuallyEq, eventually_atTop, ge_iff_le]
  use 1
  intro n hn1
  have hn0 : (n : ‚Ñù) ‚â† 0 := Nat.cast_ne_zero.mpr (_root_.ne_of_gt (lt_of_lt_of_le zero_lt_one hn1))
  simp only [smoothingSeminormSeq]
  rw [mul_pow, pow_mul_apply_eq_pow_mul Œº hx, mul_rpow (pow_nonneg (apply_nonneg Œº _) _)
    (apply_nonneg Œº _), ‚Üê rpow_natCast, ‚Üê rpow_mul (apply_nonneg Œº _), mul_one_div_cancel hn0,
    rpow_one]

/-- If `Œº 1 ‚â§ 1`, `Œº` is nonarchimedean, and `x` is multiplicative for `Œº`, then `x` is
  multiplicative for `smoothingSeminorm`. -/
theorem smoothingSeminorm_of_mul (hŒº1 : Œº 1 ‚â§ 1) (hna : IsNonarchimedean Œº) {x : R}
    (hx : ‚àÄ y : R, Œº (x * y) = Œº x * Œº y) (y : R) :
    smoothingSeminorm Œº hŒº1 hna (x * y) =
      smoothingSeminorm Œº hŒº1 hna x * smoothingSeminorm Œº hŒº1 hna y :=
  smoothingFun_of_map_mul_eq_mul Œº hŒº1 hx y

end smoothingSeminorm
