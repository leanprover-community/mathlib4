/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alexander Bentkamp, Yury Kudryashov
-/
import Mathlib.Analysis.Convex.Between
import Mathlib.Analysis.Normed.Affine.AddTorsorBases
import Mathlib.Analysis.Normed.Module.Convex

/-!
# Simplices in normed affine spaces
We prove the following facts:

* `exists_mem_interior_convexHull_affineBasis` : We can intercalate a simplex between a point and
  one of its neighborhoods.
-/

variable {E P : Type*}

open AffineBasis Module Metric Set
open scoped Convex Pointwise Topology

section SeminormedAddCommGroup
variable [SeminormedAddCommGroup E] [NormedSpace ‚Ñù E] [PseudoMetricSpace P] [NormedAddTorsor E P]
variable {s : Set E}

theorem Wbtw.dist_add_dist {x y z : P} (h : Wbtw ‚Ñù x y z) :
    dist x y + dist y z = dist x z := by
  obtain ‚ü®a, ‚ü®ha‚ÇÄ, ha‚ÇÅ‚ü©, rfl‚ü© := h
  simp [abs_of_nonneg, ha‚ÇÄ, ha‚ÇÅ, sub_mul]

theorem dist_add_dist_of_mem_segment {x y z : E} (h : y ‚àà [x -[‚Ñù] z]) :
    dist x y + dist y z = dist x z :=
  (mem_segment_iff_wbtw.1 h).dist_add_dist

end SeminormedAddCommGroup

section NormedAddCommGroup
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E] {s : Set E} {x : E}

/-- We can intercalate a simplex between a point and one of its neighborhoods. -/
lemma exists_mem_interior_convexHull_affineBasis (hs : s ‚àà ùìù x) :
    ‚àÉ b : AffineBasis (Fin (finrank ‚Ñù E + 1)) ‚Ñù E,
      x ‚àà interior (convexHull ‚Ñù (range b)) ‚àß convexHull ‚Ñù (range b) ‚äÜ s := by
  classical
  -- By translating, WLOG `x` is the origin.
  wlog hx : x = 0
  ¬∑ obtain ‚ü®b, hb‚ü© := this (s := -x +·µ• s) (by simpa using vadd_mem_nhds_vadd (-x) hs) rfl
    use x +·µ• b
    simpa [subset_vadd_set_iff, mem_vadd_set_iff_neg_vadd_mem, convexHull_vadd, interior_vadd,
      Pi.vadd_def, -vadd_eq_add, vadd_eq_add (a := -x), ‚Üê Set.vadd_set_range] using hb
  subst hx
  -- The strategy is now to find an arbitrary maximal spanning simplex (aka an affine basis)...
  obtain ‚ü®b‚ü© := exists_affineBasis_of_finiteDimensional
    (Œπ := Fin (finrank ‚Ñù E + 1)) (k := ‚Ñù) (P := E) (by simp)
  -- ... translate it to contain the origin...
  set c : AffineBasis (Fin (finrank ‚Ñù E + 1)) ‚Ñù E := -Finset.univ.centroid ‚Ñù b +·µ• b
  have hc‚ÇÄ : 0 ‚àà interior (convexHull ‚Ñù (range c) : Set E) := by
    simpa [c, convexHull_vadd, interior_vadd, range_add, Pi.vadd_def, mem_vadd_set_iff_neg_vadd_mem]
      using b.centroid_mem_interior_convexHull
  set cnorm := Finset.univ.sup' Finset.univ_nonempty (fun i ‚Ü¶ ‚Äñc i‚Äñ)
  have hcnorm : range c ‚äÜ closedBall 0 (cnorm + 1) := by
    simpa only [cnorm, subset_def, Finset.mem_coe, mem_closedBall, dist_zero_right,
      ‚Üê sub_le_iff_le_add, Finset.le_sup'_iff, forall_mem_range] using fun i ‚Ü¶ ‚ü®i, by simp‚ü©
  -- ... and finally scale it to fit inside the neighborhood `s`.
  obtain ‚ü®Œµ, hŒµ, hŒµs‚ü© := Metric.mem_nhds_iff.1 hs
  set Œµ' : ‚Ñù := Œµ / 2 / (cnorm + 1)
  have hc' : 0 < cnorm + 1 := by
    have : 0 ‚â§ cnorm := Finset.le_sup'_of_le _ (Finset.mem_univ 0) (norm_nonneg _)
    positivity
  have hŒµ' : 0 < Œµ' := by positivity
  set d : AffineBasis (Fin (finrank ‚Ñù E + 1)) ‚Ñù E := Units.mk0 Œµ' hŒµ'.ne' ‚Ä¢ c
  have hŒµ‚ÇÄ : 0 < Œµ / 2 := by positivity
  have hdnorm : (range d : Set E) ‚äÜ closedBall 0 (Œµ / 2) := by
    simp [d, Set.smul_set_subset_iff‚ÇÄ hŒµ'.ne', hŒµ‚ÇÄ.le, _root_.smul_closedBall, abs_of_nonneg hŒµ'.le,
      range_subset_iff, norm_smul]
    simpa [Œµ', hŒµ‚ÇÄ.ne', range_subset_iff, ‚Üê mul_div_right_comm (Œµ / 2), div_le_iff‚ÇÄ hc',
      mul_le_mul_left hŒµ‚ÇÄ] using hcnorm
  refine ‚ü®d, ?_, ?_‚ü©
  ¬∑ simpa [d, Pi.smul_def, range_smul, interior_smul‚ÇÄ, convexHull_smul, zero_mem_smul_set_iff,
      hŒµ'.ne']
  ¬∑ calc
      convexHull ‚Ñù (range d) ‚äÜ closedBall 0 (Œµ / 2) := convexHull_min hdnorm (convex_closedBall ..)
      _ ‚äÜ ball 0 Œµ := closedBall_subset_ball (by linarith)
      _ ‚äÜ s := hŒµs

end NormedAddCommGroup
