/-
Copyright (c) 2021 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot
-/
import Mathlib.Analysis.Normed.Group.Hom
import Mathlib.Analysis.SpecificLimits.Normed

#align_import analysis.normed.group.controlled_closure from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-! # Extending a backward bound on a normed group homomorphism from a dense set

Possible TODO (from the PR's review, https://github.com/leanprover-community/mathlib/pull/8498 ):
"This feels a lot like the second step in the proof of the Banach open mapping theorem
(`exists_preimage_norm_le`) ... wonder if it would be possible to refactor it using one of [the
lemmas in this file]."
-/


open Filter Finset

open Topology BigOperators

variable {G : Type*} [NormedAddCommGroup G] [CompleteSpace G]
variable {H : Type*} [NormedAddCommGroup H]

/-- Given `f : NormedAddGroupHom G H` for some complete `G` and a subgroup `K` of `H`, if every
element `x` of `K` has a preimage under `f` whose norm is at most `C*‚Äñx‚Äñ` then the same holds for
elements of the (topological) closure of `K` with constant `C+Œµ` instead of `C`, for any
positive `Œµ`.
-/
theorem controlled_closure_of_complete {f : NormedAddGroupHom G H} {K : AddSubgroup H} {C Œµ : ‚Ñù}
    (hC : 0 < C) (hŒµ : 0 < Œµ) (hyp : f.SurjectiveOnWith K C) :
    f.SurjectiveOnWith K.topologicalClosure (C + Œµ) := by
  rintro (h : H) (h_in : h ‚àà K.topologicalClosure)
  -- We first get rid of the easy case where `h = 0`.
  by_cases hyp_h : h = 0
  ¬∑ rw [hyp_h]
    use 0
    simp
  /- The desired preimage will be constructed as the sum of a series. Convergence of
    the series will be guaranteed by completeness of `G`. We first write `h` as the sum
    of a sequence `v` of elements of `K` which starts close to `h` and then quickly goes to zero.
    The sequence `b` below quantifies this. -/
  set b : ‚Ñï ‚Üí ‚Ñù := fun i => (1 / 2) ^ i * (Œµ * ‚Äñh‚Äñ / 2) / C
  have b_pos (i) : 0 < b i := by field_simp [b, hC, hyp_h]
  obtain
    ‚ü®v : ‚Ñï ‚Üí H, lim_v : Tendsto (fun n : ‚Ñï => ‚àë k in range (n + 1), v k) atTop (ùìù h), v_in :
      ‚àÄ n, v n ‚àà K, hv‚ÇÄ : ‚Äñv 0 - h‚Äñ < b 0, hv : ‚àÄ n > 0, ‚Äñv n‚Äñ < b n‚ü© :=
    controlled_sum_of_mem_closure h_in b_pos
  /- The controlled surjectivity assumption on `f` allows to build preimages `u n` for all
    elements `v n` of the `v` sequence. -/
  have : ‚àÄ n, ‚àÉ m' : G, f m' = v n ‚àß ‚Äñm'‚Äñ ‚â§ C * ‚Äñv n‚Äñ := fun n : ‚Ñï => hyp (v n) (v_in n)
  choose u hu hnorm_u using this
  /- The desired series `s` is then obtained by summing `u`. We then check our choice of
    `b` ensures `s` is Cauchy. -/
  set s : ‚Ñï ‚Üí G := fun n => ‚àë k in range (n + 1), u k
  have : CauchySeq s := by
    apply NormedAddCommGroup.cauchy_series_of_le_geometric'' (by norm_num) one_half_lt_one
    ¬∑ rintro n (hn : n ‚â• 1)
      calc
        ‚Äñu n‚Äñ ‚â§ C * ‚Äñv n‚Äñ := hnorm_u n
        _ ‚â§ C * b n := by gcongr; exact (hv _ <| Nat.succ_le_iff.mp hn).le
        _ = (1 / 2) ^ n * (Œµ * ‚Äñh‚Äñ / 2) := by simp [mul_div_cancel‚ÇÄ _ hC.ne.symm]
        _ = Œµ * ‚Äñh‚Äñ / 2 * (1 / 2) ^ n := mul_comm _ _
  -- We now show that the limit `g` of `s` is the desired preimage.
  obtain ‚ü®g : G, hg‚ü© := cauchySeq_tendsto_of_complete this
  refine' ‚ü®g, _, _‚ü©
  ¬∑ -- We indeed get a preimage. First note:
    have : f ‚àò s = fun n => ‚àë k in range (n + 1), v k := by
      ext n
      simp [s, map_sum, hu]
    /- In the above equality, the left-hand-side converges to `f g` by continuity of `f` and
      definition of `g` while the right-hand-side converges to `h` by construction of `v` so
      `g` is indeed a preimage of `h`. -/
    rw [‚Üê this] at lim_v
    exact tendsto_nhds_unique ((f.continuous.tendsto g).comp hg) lim_v
  ¬∑ -- Then we need to estimate the norm of `g`, using our careful choice of `b`.
    suffices ‚àÄ n, ‚Äñs n‚Äñ ‚â§ (C + Œµ) * ‚Äñh‚Äñ from
      le_of_tendsto' (continuous_norm.continuousAt.tendsto.comp hg) this
    intro n
    have hnorm‚ÇÄ : ‚Äñu 0‚Äñ ‚â§ C * b 0 + C * ‚Äñh‚Äñ := by
      have :=
        calc
          ‚Äñv 0‚Äñ ‚â§ ‚Äñh‚Äñ + ‚Äñv 0 - h‚Äñ := norm_le_insert' _ _
          _ ‚â§ ‚Äñh‚Äñ + b 0 := by gcongr
      calc
        ‚Äñu 0‚Äñ ‚â§ C * ‚Äñv 0‚Äñ := hnorm_u 0
        _ ‚â§ C * (‚Äñh‚Äñ + b 0) := by gcongr
        _ = C * b 0 + C * ‚Äñh‚Äñ := by rw [add_comm, mul_add]
    have : (‚àë k in range (n + 1), C * b k) ‚â§ Œµ * ‚Äñh‚Äñ :=
      calc
        (‚àë k in range (n + 1), C * b k) = (‚àë k in range (n + 1), (1 / 2 : ‚Ñù) ^ k) * (Œµ * ‚Äñh‚Äñ / 2) :=
          by simp only [mul_div_cancel‚ÇÄ _ hC.ne.symm, ‚Üê sum_mul]
        _ ‚â§ 2 * (Œµ * ‚Äñh‚Äñ / 2) := by gcongr; apply sum_geometric_two_le
        _ = Œµ * ‚Äñh‚Äñ := mul_div_cancel‚ÇÄ _ two_ne_zero
    calc
      ‚Äñs n‚Äñ ‚â§ ‚àë k in range (n + 1), ‚Äñu k‚Äñ := norm_sum_le _ _
      _ = (‚àë k in range n, ‚Äñu (k + 1)‚Äñ) + ‚Äñu 0‚Äñ := sum_range_succ' _ _
      _ ‚â§ (‚àë k in range n, C * ‚Äñv (k + 1)‚Äñ) + ‚Äñu 0‚Äñ := by gcongr; apply hnorm_u
      _ ‚â§ (‚àë k in range n, C * b (k + 1)) + (C * b 0 + C * ‚Äñh‚Äñ) := by
        gcongr with k; exact (hv _ k.succ_pos).le
      _ = (‚àë k in range (n + 1), C * b k) + C * ‚Äñh‚Äñ := by rw [‚Üê add_assoc, sum_range_succ']
      _ ‚â§ (C + Œµ) * ‚Äñh‚Äñ := by
        rw [add_comm, add_mul]
        apply add_le_add_left this
#align controlled_closure_of_complete controlled_closure_of_complete

/-- Given `f : NormedAddGroupHom G H` for some complete `G`, if every element `x` of the image of
an isometric immersion `j : NormedAddGroupHom K H` has a preimage under `f` whose norm is at most
`C*‚Äñx‚Äñ` then the same holds for elements of the (topological) closure of this image with constant
`C+Œµ` instead of `C`, for any positive `Œµ`.
This is useful in particular if `j` is the inclusion of a normed group into its completion
(in this case the closure is the full target group).
-/
theorem controlled_closure_range_of_complete {f : NormedAddGroupHom G H} {K : Type*}
    [SeminormedAddCommGroup K] {j : NormedAddGroupHom K H} (hj : ‚àÄ x, ‚Äñj x‚Äñ = ‚Äñx‚Äñ) {C Œµ : ‚Ñù}
    (hC : 0 < C) (hŒµ : 0 < Œµ) (hyp : ‚àÄ k, ‚àÉ g, f g = j k ‚àß ‚Äñg‚Äñ ‚â§ C * ‚Äñk‚Äñ) :
    f.SurjectiveOnWith j.range.topologicalClosure (C + Œµ) := by
  replace hyp : ‚àÄ h ‚àà j.range, ‚àÉ g, f g = h ‚àß ‚Äñg‚Äñ ‚â§ C * ‚Äñh‚Äñ := by
    intro h h_in
    rcases (j.mem_range _).mp h_in with ‚ü®k, rfl‚ü©
    rw [hj]
    exact hyp k
  exact controlled_closure_of_complete hC hŒµ hyp
#align controlled_closure_range_of_complete controlled_closure_range_of_complete
