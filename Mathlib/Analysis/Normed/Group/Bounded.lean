/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl, Ya√´l Dillies
-/
import Mathlib.Analysis.Normed.Group.Basic
import Mathlib.Topology.MetricSpace.Bounded
import Mathlib.Order.Filter.Pointwise
import Mathlib.Order.LiminfLimsup

/-!
# Boundedness in normed groups

This file rephrases metric boundedness in terms of norms.

## Tags

normed group
-/

open Filter Metric Bornology
open scoped Pointwise Topology

variable {Œ± Œπ E F G : Type*}

section SeminormedGroup
variable [SeminormedGroup E] [SeminormedGroup F] [SeminormedGroup G] {s : Set E}
  {a a‚ÇÅ a‚ÇÇ b b‚ÇÅ b‚ÇÇ : E} {r r‚ÇÅ r‚ÇÇ : ‚Ñù}

@[to_additive (attr := simp) comap_norm_atTop]
lemma comap_norm_atTop' : comap norm atTop = cobounded E := by
  simpa only [dist_one_right] using comap_dist_right_atTop (1 : E)

@[to_additive Filter.HasBasis.cobounded_of_norm]
lemma Filter.HasBasis.cobounded_of_norm' {Œπ : Sort*} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set ‚Ñù}
    (h : HasBasis atTop p s) : HasBasis (cobounded E) p fun i ‚Ü¶ norm ‚Åª¬π' s i :=
  comap_norm_atTop' (E := E) ‚ñ∏ h.comap _

@[to_additive Filter.hasBasis_cobounded_norm]
lemma Filter.hasBasis_cobounded_norm' : HasBasis (cobounded E) (fun _ ‚Ü¶ True) ({x | ¬∑ ‚â§ ‚Äñx‚Äñ}) :=
  atTop_basis.cobounded_of_norm'

@[to_additive (attr := simp) tendsto_norm_atTop_iff_cobounded]
lemma tendsto_norm_atTop_iff_cobounded' {f : Œ± ‚Üí E} {l : Filter Œ±} :
    Tendsto (‚Äñf ¬∑‚Äñ) l atTop ‚Üî Tendsto f l (cobounded E) := by
  rw [‚Üê comap_norm_atTop', tendsto_comap_iff]; rfl

@[to_additive tendsto_norm_cobounded_atTop]
lemma tendsto_norm_cobounded_atTop' : Tendsto norm (cobounded E) atTop :=
  tendsto_norm_atTop_iff_cobounded'.2 tendsto_id

@[to_additive eventually_cobounded_le_norm]
lemma eventually_cobounded_le_norm' (a : ‚Ñù) : ‚àÄ·∂† x in cobounded E, a ‚â§ ‚Äñx‚Äñ :=
  tendsto_norm_cobounded_atTop'.eventually_ge_atTop a

@[to_additive tendsto_norm_cocompact_atTop]
lemma tendsto_norm_cocompact_atTop' [ProperSpace E] : Tendsto norm (cocompact E) atTop :=
  cobounded_eq_cocompact (Œ± := E) ‚ñ∏ tendsto_norm_cobounded_atTop'

@[to_additive (attr := simp)]
lemma Filter.inv_cobounded : (cobounded E)‚Åª¬π = cobounded E := by
  simp only [‚Üê comap_norm_atTop', ‚Üê Filter.comap_inv, comap_comap, Function.comp_def, norm_inv']

/-- In a (semi)normed group, inversion `x ‚Ü¶ x‚Åª¬π` tends to infinity at infinity. -/
@[to_additive "In a (semi)normed group, negation `x ‚Ü¶ -x` tends to infinity at infinity."]
theorem Filter.tendsto_inv_cobounded : Tendsto Inv.inv (cobounded E) (cobounded E) :=
  inv_cobounded.le

@[to_additive isBounded_iff_forall_norm_le]
lemma isBounded_iff_forall_norm_le' : Bornology.IsBounded s ‚Üî ‚àÉ C, ‚àÄ x ‚àà s, ‚Äñx‚Äñ ‚â§ C := by
  simpa only [Set.subset_def, mem_closedBall_one_iff] using isBounded_iff_subset_closedBall (1 : E)

alias ‚ü®Bornology.IsBounded.exists_norm_le', _‚ü© := isBounded_iff_forall_norm_le'

alias ‚ü®Bornology.IsBounded.exists_norm_le, _‚ü© := isBounded_iff_forall_norm_le

attribute [to_additive existing exists_norm_le] Bornology.IsBounded.exists_norm_le'

@[to_additive exists_pos_norm_le]
lemma Bornology.IsBounded.exists_pos_norm_le' (hs : IsBounded s) : ‚àÉ R > 0, ‚àÄ x ‚àà s, ‚Äñx‚Äñ ‚â§ R :=
  let ‚ü®R‚ÇÄ, hR‚ÇÄ‚ü© := hs.exists_norm_le'
  ‚ü®max R‚ÇÄ 1, by positivity, fun x hx => (hR‚ÇÄ x hx).trans <| le_max_left _ _‚ü©

@[to_additive Bornology.IsBounded.exists_pos_norm_lt]
lemma Bornology.IsBounded.exists_pos_norm_lt' (hs : IsBounded s) : ‚àÉ R > 0, ‚àÄ x ‚àà s, ‚Äñx‚Äñ < R :=
  let ‚ü®R, hR‚ÇÄ, hR‚ü© := hs.exists_pos_norm_le'
  ‚ü®R + 1, by positivity, fun x hx ‚Ü¶ (hR x hx).trans_lt (lt_add_one _)‚ü©

@[to_additive]
lemma NormedCommGroup.cauchySeq_iff [Nonempty Œ±] [SemilatticeSup Œ±] {u : Œ± ‚Üí E} :
    CauchySeq u ‚Üî ‚àÄ Œµ > 0, ‚àÉ N, ‚àÄ m, N ‚â§ m ‚Üí ‚àÄ n, N ‚â§ n ‚Üí ‚Äñu m / u n‚Äñ < Œµ := by
  simp [Metric.cauchySeq_iff, dist_eq_norm_div]

@[to_additive IsCompact.exists_bound_of_continuousOn]
lemma IsCompact.exists_bound_of_continuousOn' [TopologicalSpace Œ±] {s : Set Œ±} (hs : IsCompact s)
    {f : Œ± ‚Üí E} (hf : ContinuousOn f s) : ‚àÉ C, ‚àÄ x ‚àà s, ‚Äñf x‚Äñ ‚â§ C :=
  (isBounded_iff_forall_norm_le'.1 (hs.image_of_continuousOn hf).isBounded).imp fun _C hC _x hx =>
    hC _ <| Set.mem_image_of_mem _ hx

@[to_additive]
lemma HasCompactMulSupport.exists_bound_of_continuous [TopologicalSpace Œ±]
    {f : Œ± ‚Üí E} (hf : HasCompactMulSupport f) (h'f : Continuous f) : ‚àÉ C, ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C := by
  simpa using (hf.isCompact_range h'f).isBounded.exists_norm_le'

/-- A helper lemma used to prove that the (scalar or usual) product of a function that tends to one
and a bounded function tends to one. This lemma is formulated for any binary operation
`op : E ‚Üí F ‚Üí G` with an estimate `‚Äñop x y‚Äñ ‚â§ A * ‚Äñx‚Äñ * ‚Äñy‚Äñ` for some constant A instead of
multiplication so that it can be applied to `(*)`, `flip (*)`, `(‚Ä¢)`, and `flip (‚Ä¢)`. -/
@[to_additive "A helper lemma used to prove that the (scalar or usual) product of a function that
tends to zero and a bounded function tends to zero. This lemma is formulated for any binary
operation `op : E ‚Üí F ‚Üí G` with an estimate `‚Äñop x y‚Äñ ‚â§ A * ‚Äñx‚Äñ * ‚Äñy‚Äñ` for some constant A instead
of multiplication so that it can be applied to `(*)`, `flip (*)`, `(‚Ä¢)`, and `flip (‚Ä¢)`."]
lemma Filter.Tendsto.op_one_isBoundedUnder_le' {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±}
    (hf : Tendsto f l (ùìù 1)) (hg : IsBoundedUnder (¬∑ ‚â§ ¬∑) l (Norm.norm ‚àò g)) (op : E ‚Üí F ‚Üí G)
    (h_op : ‚àÉ A, ‚àÄ x y, ‚Äñop x y‚Äñ ‚â§ A * ‚Äñx‚Äñ * ‚Äñy‚Äñ) : Tendsto (fun x => op (f x) (g x)) l (ùìù 1) := by
  cases' h_op with A h_op
  rcases hg with ‚ü®C, hC‚ü©; rw [eventually_map] at hC
  rw [NormedCommGroup.tendsto_nhds_one] at hf ‚ä¢
  intro Œµ Œµ‚ÇÄ
  rcases exists_pos_mul_lt Œµ‚ÇÄ (A * C) with ‚ü®Œ¥, Œ¥‚ÇÄ, hŒ¥‚ü©
  filter_upwards [hf Œ¥ Œ¥‚ÇÄ, hC] with i hf hg
  refine (h_op _ _).trans_lt ?_
  rcases le_total A 0 with hA | hA
  ¬∑ exact (mul_nonpos_of_nonpos_of_nonneg (mul_nonpos_of_nonpos_of_nonneg hA <| norm_nonneg' _) <|
      norm_nonneg' _).trans_lt Œµ‚ÇÄ
  calc
    A * ‚Äñf i‚Äñ * ‚Äñg i‚Äñ ‚â§ A * Œ¥ * C := by gcongr; exact hg
    _ = A * C * Œ¥ := mul_right_comm _ _ _
    _ < Œµ := hŒ¥

/-- A helper lemma used to prove that the (scalar or usual) product of a function that tends to one
and a bounded function tends to one. This lemma is formulated for any binary operation
`op : E ‚Üí F ‚Üí G` with an estimate `‚Äñop x y‚Äñ ‚â§ ‚Äñx‚Äñ * ‚Äñy‚Äñ` instead of multiplication so that it
can be applied to `(*)`, `flip (*)`, `(‚Ä¢)`, and `flip (‚Ä¢)`. -/
@[to_additive "A helper lemma used to prove that the (scalar or usual) product of a function that
tends to zero and a bounded function tends to zero. This lemma is formulated for any binary
operation `op : E ‚Üí F ‚Üí G` with an estimate `‚Äñop x y‚Äñ ‚â§ ‚Äñx‚Äñ * ‚Äñy‚Äñ` instead of multiplication so
that it can be applied to `(*)`, `flip (*)`, `(‚Ä¢)`, and `flip (‚Ä¢)`."]
theorem Filter.Tendsto.op_one_isBoundedUnder_le {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±}
    (hf : Tendsto f l (ùìù 1)) (hg : IsBoundedUnder (¬∑ ‚â§ ¬∑) l (Norm.norm ‚àò g)) (op : E ‚Üí F ‚Üí G)
    (h_op : ‚àÄ x y, ‚Äñop x y‚Äñ ‚â§ ‚Äñx‚Äñ * ‚Äñy‚Äñ) : Tendsto (fun x => op (f x) (g x)) l (ùìù 1) :=
  hf.op_one_isBoundedUnder_le' hg op ‚ü®1, fun x y => (one_mul ‚Äñx‚Äñ).symm ‚ñ∏ h_op x y‚ü©

end SeminormedGroup

section NormedAddGroup
variable [NormedAddGroup E] [TopologicalSpace Œ±] {f : Œ± ‚Üí E}

lemma Continuous.bounded_above_of_compact_support (hf : Continuous f) (h : HasCompactSupport f) :
    ‚àÉ C, ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C := by
  simpa [bddAbove_def] using hf.norm.bddAbove_range_of_hasCompactSupport h.norm

end NormedAddGroup

section NormedAddGroupSource
variable [NormedAddGroup Œ±] {f : Œ± ‚Üí E}

@[to_additive]
lemma HasCompactMulSupport.exists_pos_le_norm [One E] (hf : HasCompactMulSupport f) :
    ‚àÉ R : ‚Ñù, 0 < R ‚àß ‚àÄ x : Œ±, R ‚â§ ‚Äñx‚Äñ ‚Üí f x = 1 := by
  obtain ‚ü®K, ‚ü®hK1, hK2‚ü©‚ü© := exists_compact_iff_hasCompactMulSupport.mpr hf
  obtain ‚ü®S, hS, hS'‚ü© := hK1.isBounded.exists_pos_norm_le
  refine ‚ü®S + 1, by positivity, fun x hx => hK2 x ((mt <| hS' x) ?_)‚ü©
  -- Porting note: `ENNReal.add_lt_add` should be `protected`?
  -- [context: we used `_root_.add_lt_add` in a previous version of this proof]
  contrapose! hx
  exact lt_add_of_le_of_pos hx zero_lt_one

end NormedAddGroupSource
