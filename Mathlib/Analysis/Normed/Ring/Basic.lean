/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import Mathlib.Algebra.Algebra.Subalgebra.Basic
import Mathlib.Analysis.Normed.Group.Constructions
import Mathlib.Analysis.Normed.Group.Subgroup
import Mathlib.Analysis.Normed.Group.Submodule

/-!
# Normed rings

In this file we define (semi)normed rings. We also prove some theorems about these definitions.

A normed ring instance can be constructed from a given real absolute value on a ring via
`AbsoluteValue.toNormedRing`.
-/

-- Guard against import creep.
assert_not_exists AddChar comap_norm_atTop DilationEquiv Finset.sup_mul_le_mul_sup_of_nonneg
  IsOfFinOrder Isometry.norm_map_of_map_one NNReal.isOpen_Ico_zero Rat.norm_cast_real
  RestrictScalars

variable {G Œ± Œ≤ Œπ : Type*}

open Filter
open scoped Topology NNReal

/-- A non-unital seminormed ring is a not-necessarily-unital ring
endowed with a seminorm which satisfies the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class WithSeminormedRing (Œ± : Type*) [NonUnitalRing Œ±] extends Norm Œ±,
    PseudoMetricSpace Œ± where
  /-- The distance is induced by the norm. -/
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  /-- The norm is submultiplicative. -/
  protected norm_mul_le : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b

@[class_abbrev]
structure NonUnitalSeminormedRing (Œ± : Type*) where
  [a : NonUnitalRing Œ±]
  [b : WithSeminormedRing Œ±]

attribute [instance] NonUnitalSeminormedRing.mk

@[class_abbrev]
structure SeminormedRing (Œ± : Type*) where
  [a : Ring Œ±]
  [b : WithSeminormedRing Œ±]

attribute [instance] SeminormedRing.mk

/-- A non-unital normed ring is a not-necessarily-unital ring
endowed with a norm which satisfies the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class WithNormedRing (Œ± : Type*) [NonUnitalRing Œ±] extends Norm Œ±, MetricSpace Œ± where
  /-- The distance is induced by the norm. -/
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  /-- The norm is submultiplicative. -/
  norm_mul_le : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b

@[class_abbrev]
structure NonUnitalNormedRing (Œ± : Type*) where
  [a : NonUnitalRing Œ±]
  [b : WithNormedRing Œ±]

attribute [instance] NonUnitalNormedRing.mk

@[class_abbrev]
structure NormedRing (Œ± : Type*) where
  [a : Ring Œ±]
  [b : WithNormedRing Œ±]

attribute [instance] NormedRing.mk

-- see Note [lower instance priority]
/-- A normed ring is a seminormed ring. -/
instance (priority := 100) NormedRing.toSeminormedRing [NonUnitalRing Œ±] [Œ≤ : WithNormedRing Œ±] :
    WithSeminormedRing Œ± :=
  { Œ≤ with }

/-- A non-unital seminormed commutative ring is a non-unital commutative ring endowed with a
seminorm which satisfies the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
@[class_abbrev]
structure NonUnitalSeminormedCommRing (Œ± : Type*) where
  [a : NonUnitalCommRing Œ±]
  [b : WithSeminormedRing Œ±]

attribute [instance] NonUnitalSeminormedCommRing.mk

/-- A non-unital normed commutative ring is a non-unital commutative ring endowed with a
norm which satisfies the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
@[class_abbrev]
structure NonUnitalNormedCommRing (Œ± : Type*) where
  [a : NonUnitalCommRing Œ±]
  [b : WithNormedRing Œ±]

attribute [instance] NonUnitalNormedCommRing.mk

/-- A seminormed commutative ring is a commutative ring endowed with a seminorm which satisfies
the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
@[class_abbrev]
structure SeminormedCommRing (Œ± : Type*) where
  [a : CommRing Œ±]
  [b : WithSeminormedRing Œ±]

attribute [instance] SeminormedCommRing.mk

/-- A normed commutative ring is a commutative ring endowed with a norm which satisfies
the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
@[class_abbrev]
structure NormedCommRing (Œ± : Type*) where
  [a : CommRing Œ±]
  [b : WithNormedRing Œ±]

attribute [instance] NormedCommRing.mk

instance PUnit.normedCommRing : WithNormedRing PUnit :=
  { PUnit.normedAddCommGroup with
    norm_mul_le _ _ := by simp }

section NormOneClass

/-- A mixin class with the axiom `‚Äñ1‚Äñ = 1`. Many `NormedRing`s and all `NormedField`s satisfy this
axiom. -/
class NormOneClass (Œ± : Type*) [Norm Œ±] [One Œ±] : Prop where
  /-- The norm of the multiplicative identity is 1. -/
  norm_one : ‚Äñ(1 : Œ±)‚Äñ = 1

export NormOneClass (norm_one)

attribute [simp] norm_one

section SeminormedAddCommGroup
variable [SeminormedAddCommGroup G] [One G] [NormOneClass G]

@[simp] lemma nnnorm_one : ‚Äñ(1 : G)‚Äñ‚Çä = 1 := NNReal.eq norm_one
@[simp] lemma enorm_one : ‚Äñ(1 : G)‚Äñ‚Çë = 1 := by simp [enorm]

theorem NormOneClass.nontrivial : Nontrivial G :=
  nontrivial_of_ne 0 1 <| ne_of_apply_ne norm <| by simp

end SeminormedAddCommGroup

end NormOneClass

-- see Note [lower instance priority]
instance (priority := 100) NonUnitalNormedRing.toNormedAddCommGroup [NonUnitalRing Œ±]
    [Œ≤ : WithNormedRing Œ±] : WithNormedAddGroup Œ± :=
  { Œ≤ with }

-- see Note [lower instance priority]
instance (priority := 100) NonUnitalSeminormedRing.toSeminormedAddCommGroup
    [NonUnitalRing Œ±] [Œ≤ : WithSeminormedRing Œ±] : WithSeminormedAddGroup Œ± :=
  { Œ≤ with }

instance ULift.normOneClass [SeminormedAddCommGroup Œ±] [One Œ±] [NormOneClass Œ±] :
    NormOneClass (ULift Œ±) :=
  ‚ü®by simp [ULift.norm_def]‚ü©

instance Prod.normOneClass [SeminormedAddCommGroup Œ±] [One Œ±] [NormOneClass Œ±]
    [SeminormedAddCommGroup Œ≤] [One Œ≤] [NormOneClass Œ≤] : NormOneClass (Œ± √ó Œ≤) :=
  ‚ü®by simp [Prod.norm_def]‚ü©

instance Pi.normOneClass {Œπ : Type*} {Œ± : Œπ ‚Üí Type*} [Nonempty Œπ] [Fintype Œπ]
    [‚àÄ i, SeminormedAddCommGroup (Œ± i)] [‚àÄ i, One (Œ± i)] [‚àÄ i, NormOneClass (Œ± i)] :
    NormOneClass (‚àÄ i, Œ± i) :=
  ‚ü®by simpa [Pi.norm_def] using Finset.sup_const Finset.univ_nonempty 1‚ü©

instance MulOpposite.normOneClass [SeminormedAddCommGroup Œ±] [One Œ±] [NormOneClass Œ±] :
    NormOneClass Œ±·µê·µí·µñ :=
  ‚ü®@norm_one Œ± _ _ _‚ü©

section NonUnitalSeminormedRing

variable [NonUnitalSeminormedRing Œ±] {a a‚ÇÅ a‚ÇÇ b c : Œ±}

/-- The norm is submultiplicative. -/
theorem norm_mul_le (a b : Œ±) : ‚Äña * b‚Äñ ‚â§ ‚Äña‚Äñ * ‚Äñb‚Äñ :=
  WithSeminormedRing.norm_mul_le a b

theorem nnnorm_mul_le (a b : Œ±) : ‚Äña * b‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä * ‚Äñb‚Äñ‚Çä := norm_mul_le a b

lemma norm_mul_le_of_le {r‚ÇÅ r‚ÇÇ : ‚Ñù} (h‚ÇÅ : ‚Äña‚ÇÅ‚Äñ ‚â§ r‚ÇÅ) (h‚ÇÇ : ‚Äña‚ÇÇ‚Äñ ‚â§ r‚ÇÇ) : ‚Äña‚ÇÅ * a‚ÇÇ‚Äñ ‚â§ r‚ÇÅ * r‚ÇÇ :=
  (norm_mul_le ..).trans <| mul_le_mul h‚ÇÅ h‚ÇÇ (norm_nonneg _) ((norm_nonneg _).trans h‚ÇÅ)

lemma nnnorm_mul_le_of_le {r‚ÇÅ r‚ÇÇ : ‚Ñù‚â•0} (h‚ÇÅ : ‚Äña‚ÇÅ‚Äñ‚Çä ‚â§ r‚ÇÅ) (h‚ÇÇ : ‚Äña‚ÇÇ‚Äñ‚Çä ‚â§ r‚ÇÇ) :
    ‚Äña‚ÇÅ * a‚ÇÇ‚Äñ‚Çä ‚â§ r‚ÇÅ * r‚ÇÇ := (nnnorm_mul_le ..).trans <| mul_le_mul' h‚ÇÅ h‚ÇÇ

lemma norm_mul‚ÇÉ_le : ‚Äña * b * c‚Äñ ‚â§ ‚Äña‚Äñ * ‚Äñb‚Äñ * ‚Äñc‚Äñ := norm_mul_le_of_le (norm_mul_le ..) le_rfl

lemma nnnorm_mul‚ÇÉ_le : ‚Äña * b * c‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä * ‚Äñb‚Äñ‚Çä * ‚Äñc‚Äñ‚Çä :=
  nnnorm_mul_le_of_le (norm_mul_le ..) le_rfl

theorem one_le_norm_one (Œ≤) [NormedRing Œ≤] [Nontrivial Œ≤] : 1 ‚â§ ‚Äñ(1 : Œ≤)‚Äñ :=
  (le_mul_iff_one_le_left <| norm_pos_iff.mpr (one_ne_zero : (1 : Œ≤) ‚â† 0)).mp
    (by simpa only [mul_one] using norm_mul_le (1 : Œ≤) 1)

theorem one_le_nnnorm_one (Œ≤) [NormedRing Œ≤] [Nontrivial Œ≤] : 1 ‚â§ ‚Äñ(1 : Œ≤)‚Äñ‚Çä :=
  one_le_norm_one Œ≤

/-- In a seminormed ring, the left-multiplication `AddMonoidHom` is bounded. -/
theorem mulLeft_bound (x : Œ±) : ‚àÄ y : Œ±, ‚ÄñAddMonoidHom.mulLeft x y‚Äñ ‚â§ ‚Äñx‚Äñ * ‚Äñy‚Äñ :=
  norm_mul_le x

/-- In a seminormed ring, the right-multiplication `AddMonoidHom` is bounded. -/
theorem mulRight_bound (x : Œ±) : ‚àÄ y : Œ±, ‚ÄñAddMonoidHom.mulRight x y‚Äñ ‚â§ ‚Äñx‚Äñ * ‚Äñy‚Äñ := fun y => by
  rw [mul_comm]
  exact norm_mul_le y x

/-- A non-unital subalgebra of a non-unital seminormed ring is also a non-unital seminormed ring,
with the restriction of the norm. -/
instance NonUnitalSubalgebra.nonUnitalSeminormedRing {ùïú : Type*} [CommRing ùïú] {E : Type*}
    [NonUnitalSeminormedRing E] [Module ùïú E] (s : NonUnitalSubalgebra ùïú E) :
    WithSeminormedRing s :=
  { s.toSubmodule.seminormedAddCommGroup, s.toNonUnitalRing with
    norm_mul_le a b := norm_mul_le a.1 b.1 }

/-- A non-unital subalgebra of a non-unital seminormed ring is also a non-unital seminormed ring,
with the restriction of the norm. -/
-- necessary to require `SMulMemClass S ùïú E` so that `ùïú` can be determined as an `outParam`
@[nolint unusedArguments]
instance (priority := 75) NonUnitalSubalgebraClass.nonUnitalSeminormedRing {S ùïú E : Type*}
    [CommRing ùïú] [NonUnitalSeminormedRing E] [Module ùïú E] [SetLike S E] [NonUnitalSubringClass S E]
    [SMulMemClass S ùïú E] (s : S) :
    WithSeminormedRing s :=
  { AddSubgroupClass.seminormedAddGroup s, NonUnitalSubringClass.toNonUnitalRing s with
    norm_mul_le a b := norm_mul_le a.1 b.1 }

/-- A non-unital subalgebra of a non-unital normed ring is also a non-unital normed ring, with the
restriction of the norm. -/
instance NonUnitalSubalgebra.nonUnitalNormedRing {ùïú : Type*} [CommRing ùïú] {E : Type*}
    [NonUnitalNormedRing E] [Module ùïú E] (s : NonUnitalSubalgebra ùïú E) : WithNormedRing s :=
  { s.nonUnitalSeminormedRing with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }

/-- A non-unital subalgebra of a non-unital normed ring is also a non-unital normed ring,
with the restriction of the norm. -/
instance (priority := 75) NonUnitalSubalgebraClass.nonUnitalNormedRing {S ùïú E : Type*}
    [CommRing ùïú] [NonUnitalNormedRing E] [Module ùïú E] [SetLike S E] [NonUnitalSubringClass S E]
    [SMulMemClass S ùïú E] (s : S) :
    WithNormedRing s :=
  { nonUnitalSeminormedRing s with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }

instance ULift.nonUnitalSeminormedRing : WithSeminormedRing (ULift Œ±) :=
  { ULift.seminormedAddGroup with
    norm_mul_le x y := norm_mul_le x.down y.down }

/-- Non-unital seminormed ring structure on the product of two non-unital seminormed rings,
  using the sup norm. -/
instance Prod.nonUnitalSeminormedRing [NonUnitalSeminormedRing Œ≤] :
    WithSeminormedRing (Œ± √ó Œ≤) :=
  { seminormedAddGroup with
    norm_mul_le x y := calc
      ‚Äñx * y‚Äñ = ‚Äñ(x.1 * y.1, x.2 * y.2)‚Äñ := rfl
      _ = max ‚Äñx.1 * y.1‚Äñ ‚Äñx.2 * y.2‚Äñ := rfl
      _ ‚â§ max (‚Äñx.1‚Äñ * ‚Äñy.1‚Äñ) (‚Äñx.2‚Äñ * ‚Äñy.2‚Äñ) :=
        (max_le_max (norm_mul_le x.1 y.1) (norm_mul_le x.2 y.2))
      _ = max (‚Äñx.1‚Äñ * ‚Äñy.1‚Äñ) (‚Äñy.2‚Äñ * ‚Äñx.2‚Äñ) := by simp [mul_comm]
      _ ‚â§ max ‚Äñx.1‚Äñ ‚Äñx.2‚Äñ * max ‚Äñy.2‚Äñ ‚Äñy.1‚Äñ := by
        apply max_mul_mul_le_max_mul_max <;> simp [norm_nonneg]
      _ = max ‚Äñx.1‚Äñ ‚Äñx.2‚Äñ * max ‚Äñy.1‚Äñ ‚Äñy.2‚Äñ := by simp [max_comm]
      _ = ‚Äñx‚Äñ * ‚Äñy‚Äñ := rfl }

instance MulOpposite.instNonUnitalSeminormedRing : WithSeminormedRing Œ±·µê·µí·µñ where
  __ := instSeminormedAddGroup
  norm_mul_le := MulOpposite.rec' fun x ‚Ü¶ MulOpposite.rec' fun y ‚Ü¶
    (norm_mul_le y x).trans_eq (mul_comm _ _)

end NonUnitalSeminormedRing

section SeminormedRing

variable [SeminormedRing Œ±] {a b c : Œ±}

/-- A subalgebra of a seminormed ring is also a seminormed ring, with the restriction of the
norm. -/
instance Subalgebra.seminormedRing {ùïú : Type*} [CommRing ùïú] {E : Type*} [SeminormedRing E]
    [Algebra ùïú E] (s : Subalgebra ùïú E) : WithSeminormedRing s :=
  { s.toSubmodule.seminormedAddCommGroup, s.toRing with
    norm_mul_le a b := norm_mul_le a.1 b.1 }

/-- A subalgebra of a seminormed ring is also a seminormed ring, with the restriction of the
norm. -/
-- necessary to require `SMulMemClass S ùïú E` so that `ùïú` can be determined as an `outParam`
@[nolint unusedArguments]
instance (priority := 75) SubalgebraClass.seminormedRing {S ùïú E : Type*} [CommRing ùïú]
    [SeminormedRing E] [Algebra ùïú E] [SetLike S E] [SubringClass S E] [SMulMemClass S ùïú E]
    (s : S) : WithSeminormedRing s :=
  { AddSubgroupClass.seminormedAddGroup s, SubringClass.toRing s with
    norm_mul_le a b := norm_mul_le a.1 b.1 }

/-- A subalgebra of a normed ring is also a normed ring, with the restriction of the norm. -/
instance Subalgebra.normedRing {ùïú : Type*} [CommRing ùïú] {E : Type*} [NormedRing E]
    [Algebra ùïú E] (s : Subalgebra ùïú E) : WithNormedRing s :=
  { s.seminormedRing with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }

/-- A subalgebra of a normed ring is also a normed ring, with the restriction of the
norm. -/
instance (priority := 75) SubalgebraClass.normedRing {S ùïú E : Type*} [CommRing ùïú]
    [NormedRing E] [Algebra ùïú E] [SetLike S E] [SubringClass S E] [SMulMemClass S ùïú E]
    (s : S) : WithNormedRing s :=
  { seminormedRing s with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }


theorem Nat.norm_cast_le : ‚àÄ n : ‚Ñï, ‚Äñ(n : Œ±)‚Äñ ‚â§ n * ‚Äñ(1 : Œ±)‚Äñ
  | 0 => by simp
  | n + 1 => by
    rw [n.cast_succ, n.cast_succ, add_mul, one_mul]
    exact norm_add_le_of_le (Nat.norm_cast_le n) le_rfl

theorem List.norm_prod_le' : ‚àÄ {l : List Œ±}, l ‚â† [] ‚Üí ‚Äñl.prod‚Äñ ‚â§ (l.map norm).prod
  | [], h => (h rfl).elim
  | [a], _ => by simp
  | a::b::l, _ => by
    rw [List.map_cons, List.prod_cons, List.prod_cons (a := ‚Äña‚Äñ)]
    refine le_trans (norm_mul_le _ _) (mul_le_mul_of_nonneg_left ?_ (norm_nonneg _))
    exact List.norm_prod_le' (List.cons_ne_nil b l)

theorem List.nnnorm_prod_le' {l : List Œ±} (hl : l ‚â† []) : ‚Äñl.prod‚Äñ‚Çä ‚â§ (l.map nnnorm).prod :=
  (List.norm_prod_le' hl).trans_eq <| by simp [NNReal.coe_list_prod, List.map_map]

theorem List.norm_prod_le [NormOneClass Œ±] : ‚àÄ l : List Œ±, ‚Äñl.prod‚Äñ ‚â§ (l.map norm).prod
  | [] => by simp
  | a::l => List.norm_prod_le' (List.cons_ne_nil a l)

theorem List.nnnorm_prod_le [NormOneClass Œ±] (l : List Œ±) : ‚Äñl.prod‚Äñ‚Çä ‚â§ (l.map nnnorm).prod :=
  l.norm_prod_le.trans_eq <| by simp [NNReal.coe_list_prod, List.map_map]

theorem Finset.norm_prod_le' {Œ± : Type*} [NormedCommRing Œ±] (s : Finset Œπ) (hs : s.Nonempty)
    (f : Œπ ‚Üí Œ±) : ‚Äñ‚àè i ‚àà s, f i‚Äñ ‚â§ ‚àè i ‚àà s, ‚Äñf i‚Äñ := by
  rcases s with ‚ü®‚ü®l‚ü©, hl‚ü©
  have : l.map f ‚â† [] := by simpa using hs
  simpa using List.norm_prod_le' this

theorem Finset.nnnorm_prod_le' {Œ± : Type*} [NormedCommRing Œ±] (s : Finset Œπ) (hs : s.Nonempty)
    (f : Œπ ‚Üí Œ±) : ‚Äñ‚àè i ‚àà s, f i‚Äñ‚Çä ‚â§ ‚àè i ‚àà s, ‚Äñf i‚Äñ‚Çä :=
  (s.norm_prod_le' hs f).trans_eq <| by simp [NNReal.coe_prod]

theorem Finset.norm_prod_le {Œ± : Type*} [NormedCommRing Œ±] [NormOneClass Œ±] (s : Finset Œπ)
    (f : Œπ ‚Üí Œ±) : ‚Äñ‚àè i ‚àà s, f i‚Äñ ‚â§ ‚àè i ‚àà s, ‚Äñf i‚Äñ := by
  rcases s with ‚ü®‚ü®l‚ü©, hl‚ü©
  simpa using (l.map f).norm_prod_le

theorem Finset.nnnorm_prod_le {Œ± : Type*} [NormedCommRing Œ±] [NormOneClass Œ±] (s : Finset Œπ)
    (f : Œπ ‚Üí Œ±) : ‚Äñ‚àè i ‚àà s, f i‚Äñ‚Çä ‚â§ ‚àè i ‚àà s, ‚Äñf i‚Äñ‚Çä :=
  (s.norm_prod_le f).trans_eq <| by simp [NNReal.coe_prod]

lemma norm_natAbs (z : ‚Ñ§) :
    ‚Äñ(z.natAbs : Œ±)‚Äñ = ‚Äñ(z : Œ±)‚Äñ := by
  rcases z.natAbs_eq with hz | hz
  ¬∑ rw [‚Üê Int.cast_natCast, ‚Üê hz]
  ¬∑ rw [‚Üê Int.cast_natCast, ‚Üê norm_neg, ‚Üê Int.cast_neg, ‚Üê hz]

lemma nnnorm_natAbs (z : ‚Ñ§) :
    ‚Äñ(z.natAbs : Œ±)‚Äñ‚Çä = ‚Äñ(z : Œ±)‚Äñ‚Çä := by
  simp [‚Üê NNReal.coe_inj, - Nat.cast_natAbs, norm_natAbs]

@[simp] lemma norm_intCast_abs (z : ‚Ñ§) :
    ‚Äñ((|z| : ‚Ñ§) : Œ±)‚Äñ = ‚Äñ(z : Œ±)‚Äñ := by
  simp [‚Üê norm_natAbs]

@[simp] lemma nnnorm_intCast_abs (z : ‚Ñ§) :
    ‚Äñ((|z| : ‚Ñ§) : Œ±)‚Äñ‚Çä = ‚Äñ(z : Œ±)‚Äñ‚Çä := by
  simp [‚Üê nnnorm_natAbs]

/-- If `Œ±` is a seminormed ring, then `‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä ^ n` for `n > 0`.
See also `nnnorm_pow_le`. -/
theorem nnnorm_pow_le' (a : Œ±) : ‚àÄ {n : ‚Ñï}, 0 < n ‚Üí ‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä ^ n
  | 1, _ => by simp only [pow_one, le_rfl]
  | n + 2, _ => by
    simpa only [pow_succ' _ (n + 1)] using
      le_trans (nnnorm_mul_le _ _) (mul_le_mul_left' (nnnorm_pow_le' a n.succ_pos) _)

/-- If `Œ±` is a seminormed ring with `‚Äñ1‚Äñ‚Çä = 1`, then `‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä ^ n`.
See also `nnnorm_pow_le'`. -/
theorem nnnorm_pow_le [NormOneClass Œ±] (a : Œ±) (n : ‚Ñï) : ‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä ^ n :=
  Nat.recOn n (by simp only [pow_zero, nnnorm_one, le_rfl])
    fun k _hk => nnnorm_pow_le' a k.succ_pos

/-- If `Œ±` is a seminormed ring, then `‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n` for `n > 0`. See also `norm_pow_le`. -/
theorem norm_pow_le' (a : Œ±) {n : ‚Ñï} (h : 0 < n) : ‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n := by
  simpa only [NNReal.coe_pow, coe_nnnorm] using NNReal.coe_mono (nnnorm_pow_le' a h)

/-- If `Œ±` is a seminormed ring with `‚Äñ1‚Äñ = 1`, then `‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n`.
See also `norm_pow_le'`. -/
theorem norm_pow_le [NormOneClass Œ±] (a : Œ±) (n : ‚Ñï) : ‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n :=
  Nat.recOn n (by simp only [pow_zero, norm_one, le_rfl])
    fun n _hn => norm_pow_le' a n.succ_pos

theorem eventually_norm_pow_le (a : Œ±) : ‚àÄ·∂† n : ‚Ñï in atTop, ‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n :=
  eventually_atTop.mpr ‚ü®1, fun _b h => norm_pow_le' a (Nat.succ_le_iff.mp h)‚ü©

instance ULift.seminormedRing : WithSeminormedRing (ULift Œ±) :=
  { ULift.nonUnitalSeminormedRing with }

/-- Seminormed ring structure on the product of two seminormed rings,
  using the sup norm. -/
instance Prod.seminormedRing [SeminormedRing Œ≤] : WithSeminormedRing (Œ± √ó Œ≤) :=
  { nonUnitalSeminormedRing with }

/-- This inequality is particularly useful when `c = 1` and `‚Äña‚Äñ = ‚Äñb‚Äñ = 1` as it then shows that
chord length is a metric on the unit complex numbers. -/
lemma norm_sub_mul_le (ha : ‚Äña‚Äñ ‚â§ 1) : ‚Äñc - a * b‚Äñ ‚â§ ‚Äñc - a‚Äñ + ‚Äñ1 - b‚Äñ :=
  calc
    _ ‚â§ ‚Äñc - a‚Äñ + ‚Äña * (1 - b)‚Äñ := by
        simpa [mul_one_sub] using norm_sub_le_norm_sub_add_norm_sub c a (a * b)
    _ ‚â§ ‚Äñc - a‚Äñ + ‚Äña‚Äñ * ‚Äñ1 - b‚Äñ := by gcongr; exact norm_mul_le ..
    _ ‚â§ ‚Äñc - a‚Äñ + 1 * ‚Äñ1 - b‚Äñ := by gcongr
    _ = ‚Äñc - a‚Äñ + ‚Äñ1 - b‚Äñ := by simp

/-- This inequality is particularly useful when `c = 1` and `‚Äña‚Äñ = ‚Äñb‚Äñ = 1` as it then shows that
chord length is a metric on the unit complex numbers. -/
lemma norm_sub_mul_le' (hb : ‚Äñb‚Äñ ‚â§ 1) : ‚Äñc - a * b‚Äñ ‚â§ ‚Äñ1 - a‚Äñ + ‚Äñc - b‚Äñ := by
  rw [add_comm]; exact norm_sub_mul_le (Œ± := Œ±·µê·µí·µñ) hb

/-- This inequality is particularly useful when `c = 1` and `‚Äña‚Äñ = ‚Äñb‚Äñ = 1` as it then shows that
chord length is a metric on the unit complex numbers. -/
lemma nnnorm_sub_mul_le (ha : ‚Äña‚Äñ‚Çä ‚â§ 1) : ‚Äñc - a * b‚Äñ‚Çä ‚â§ ‚Äñc - a‚Äñ‚Çä + ‚Äñ1 - b‚Äñ‚Çä := norm_sub_mul_le ha

/-- This inequality is particularly useful when `c = 1` and `‚Äña‚Äñ = ‚Äñb‚Äñ = 1` as it then shows that
chord length is a metric on the unit complex numbers. -/
lemma nnnorm_sub_mul_le' (hb : ‚Äñb‚Äñ‚Çä ‚â§ 1) : ‚Äñc - a * b‚Äñ‚Çä ‚â§ ‚Äñ1 - a‚Äñ‚Çä + ‚Äñc - b‚Äñ‚Çä := norm_sub_mul_le' hb

lemma norm_commutator_units_sub_one_le (a b : Œ±À£) :
    ‚Äñ(a * b * a‚Åª¬π * b‚Åª¬π).val - 1‚Äñ ‚â§ 2 * ‚Äña‚Åª¬π.val‚Äñ * ‚Äñb‚Åª¬π.val‚Äñ * ‚Äña.val - 1‚Äñ * ‚Äñb.val - 1‚Äñ :=
  calc
    ‚Äñ(a * b * a‚Åª¬π * b‚Åª¬π).val - 1‚Äñ = ‚Äñ(a * b - b * a) * a‚Åª¬π.val * b‚Åª¬π.val‚Äñ := by simp [sub_mul, *]
    _ ‚â§ ‚Äñ(a * b - b * a : Œ±)‚Äñ * ‚Äña‚Åª¬π.val‚Äñ * ‚Äñb‚Åª¬π.val‚Äñ := norm_mul‚ÇÉ_le
    _ = ‚Äñ(a - 1 : Œ±) * (b - 1) - (b - 1) * (a - 1)‚Äñ * ‚Äña‚Åª¬π.val‚Äñ * ‚Äñb‚Åª¬π.val‚Äñ := by
      simp_rw [sub_one_mul, mul_sub_one]; abel_nf
    _ ‚â§ (‚Äñ(a - 1 : Œ±) * (b - 1)‚Äñ + ‚Äñ(b - 1 : Œ±) * (a - 1)‚Äñ) * ‚Äña‚Åª¬π.val‚Äñ * ‚Äñb‚Åª¬π.val‚Äñ := by
      gcongr; exact norm_sub_le ..
    _ ‚â§ (‚Äña.val - 1‚Äñ * ‚Äñb.val - 1‚Äñ + ‚Äñb.val - 1‚Äñ * ‚Äña.val - 1‚Äñ) * ‚Äña‚Åª¬π.val‚Äñ * ‚Äñb‚Åª¬π.val‚Äñ := by
      gcongr <;> exact norm_mul_le ..
    _ = 2 * ‚Äña‚Åª¬π.val‚Äñ * ‚Äñb‚Åª¬π.val‚Äñ * ‚Äña.val - 1‚Äñ * ‚Äñb.val - 1‚Äñ := by ring

lemma nnnorm_commutator_units_sub_one_le (a b : Œ±À£) :
    ‚Äñ(a * b * a‚Åª¬π * b‚Åª¬π).val - 1‚Äñ‚Çä ‚â§ 2 * ‚Äña‚Åª¬π.val‚Äñ‚Çä * ‚Äñb‚Åª¬π.val‚Äñ‚Çä * ‚Äña.val - 1‚Äñ‚Çä * ‚Äñb.val - 1‚Äñ‚Çä := by
  simpa using norm_commutator_units_sub_one_le a b

/-- A homomorphism `f` between semi_normed_rings is bounded if there exists a positive
  constant `C` such that for all `x` in `Œ±`, `norm (f x) ‚â§ C * norm x`. -/
def RingHom.IsBounded {Œ± : Type*} [SeminormedRing Œ±] {Œ≤ : Type*} [SeminormedRing Œ≤]
    (f : Œ± ‚Üí+* Œ≤) : Prop :=
  ‚àÉ C : ‚Ñù, 0 < C ‚àß ‚àÄ x : Œ±, norm (f x) ‚â§ C * norm x

end SeminormedRing

section NonUnitalNormedRing

variable [NonUnitalNormedRing Œ±]

instance ULift.nonUnitalNormedRing : WithNormedRing (ULift Œ±) :=
  { ULift.nonUnitalSeminormedRing, ULift.normedAddGroup with }

/-- Non-unital normed ring structure on the product of two non-unital normed rings,
using the sup norm. -/
instance Prod.nonUnitalNormedRing [NonUnitalNormedRing Œ≤] : WithNormedRing (Œ± √ó Œ≤) :=
  { Prod.nonUnitalSeminormedRing, Prod.normedAddGroup with }

instance MulOpposite.instNonUnitalNormedRing : WithNormedRing Œ±·µê·µí·µñ where
  __ := instNonUnitalSeminormedRing
  __ := instNormedAddGroup

end NonUnitalNormedRing

section NormedRing

variable [NormedRing Œ±]

theorem Units.norm_pos [Nontrivial Œ±] (x : Œ±À£) : 0 < ‚Äñ(x : Œ±)‚Äñ :=
  norm_pos_iff.mpr (Units.ne_zero x)

theorem Units.nnnorm_pos [Nontrivial Œ±] (x : Œ±À£) : 0 < ‚Äñ(x : Œ±)‚Äñ‚Çä :=
  x.norm_pos

end NormedRing


section NormedCommRing

/-- The restriction of a power-multiplicative function to a subalgebra is power-multiplicative. -/
theorem IsPowMul.restriction {R S : Type*} [CommRing R] [Ring S] [Algebra R S]
    (A : Subalgebra R S) {f : S ‚Üí ‚Ñù} (hf_pm : IsPowMul f) :
    IsPowMul fun x : A => f x.val := fun x n hn => by
  simpa using hf_pm (‚Üëx) hn

end NormedCommRing

instance Real.normedCommRing : WithNormedRing ‚Ñù :=
  { Real.normedAddCommGroup with norm_mul_le x y := (abs_mul x y).le }

namespace NNReal

open NNReal

theorem norm_eq (x : ‚Ñù‚â•0) : ‚Äñ(x : ‚Ñù)‚Äñ = x := by rw [Real.norm_eq_abs, x.abs_eq]

@[simp] lemma nnnorm_eq (x : ‚Ñù‚â•0) : ‚Äñ(x : ‚Ñù)‚Äñ‚Çä = x := by ext; simp [nnnorm]
@[simp] lemma enorm_eq (x : ‚Ñù‚â•0) : ‚Äñ(x : ‚Ñù)‚Äñ‚Çë = x := by simp [enorm]

end NNReal

/-- A restatement of `MetricSpace.tendsto_atTop` in terms of the norm. -/
theorem NormedAddCommGroup.tendsto_atTop [Nonempty Œ±] [Preorder Œ±] [IsDirected Œ± (¬∑ ‚â§ ¬∑)]
    {Œ≤ : Type*} [SeminormedAddCommGroup Œ≤] {f : Œ± ‚Üí Œ≤} {b : Œ≤} :
    Tendsto f atTop (ùìù b) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N ‚â§ n ‚Üí ‚Äñf n - b‚Äñ < Œµ :=
  (atTop_basis.tendsto_iff Metric.nhds_basis_ball).trans (by simp [dist_eq_norm])

/-- A variant of `NormedAddCommGroup.tendsto_atTop` that
uses `‚àÉ N, ‚àÄ n > N, ...` rather than `‚àÉ N, ‚àÄ n ‚â• N, ...`
-/
theorem NormedAddCommGroup.tendsto_atTop' [Nonempty Œ±] [Preorder Œ±] [IsDirected Œ± (¬∑ ‚â§ ¬∑)]
    [NoMaxOrder Œ±] {Œ≤ : Type*} [SeminormedAddCommGroup Œ≤] {f : Œ± ‚Üí Œ≤} {b : Œ≤} :
    Tendsto f atTop (ùìù b) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N < n ‚Üí ‚Äñf n - b‚Äñ < Œµ :=
  (atTop_basis_Ioi.tendsto_iff Metric.nhds_basis_ball).trans (by simp [dist_eq_norm])

section RingHomIsometric

variable {R‚ÇÅ R‚ÇÇ : Type*}

/-- This class states that a ring homomorphism is isometric. This is a sufficient assumption
for a continuous semilinear map to be bounded and this is the main use for this typeclass. -/
class RingHomIsometric [Semiring R‚ÇÅ] [Semiring R‚ÇÇ] [Norm R‚ÇÅ] [Norm R‚ÇÇ] (œÉ : R‚ÇÅ ‚Üí+* R‚ÇÇ) : Prop where
  /-- The ring homomorphism is an isometry. -/
  norm_map : ‚àÄ {x : R‚ÇÅ}, ‚ÄñœÉ x‚Äñ = ‚Äñx‚Äñ

@[deprecated (since := "2025-08-03")] alias RingHomIsometric.is_iso := RingHomIsometric.norm_map

attribute [simp] RingHomIsometric.norm_map

@[simp]
theorem RingHomIsometric.nnnorm_map [SeminormedRing R‚ÇÅ] [SeminormedRing R‚ÇÇ] (œÉ : R‚ÇÅ ‚Üí+* R‚ÇÇ)
    [RingHomIsometric œÉ] (x : R‚ÇÅ) : ‚ÄñœÉ x‚Äñ‚Çä = ‚Äñx‚Äñ‚Çä :=
  NNReal.eq norm_map

@[simp]
theorem RingHomIsometric.enorm_map [SeminormedRing R‚ÇÅ] [SeminormedRing R‚ÇÇ] (œÉ : R‚ÇÅ ‚Üí+* R‚ÇÇ)
    [RingHomIsometric œÉ] (x : R‚ÇÅ) : ‚ÄñœÉ x‚Äñ‚Çë = ‚Äñx‚Äñ‚Çë :=
  congrArg ENNReal.ofNNReal <| nnnorm_map œÉ x

variable [SeminormedRing R‚ÇÅ]

instance RingHomIsometric.ids : RingHomIsometric (RingHom.id R‚ÇÅ) :=
  ‚ü®rfl‚ü©

end RingHomIsometric

section NormMulClass

/-- A mixin class for strict multiplicativity of the norm, `‚Äña * b‚Äñ = ‚Äña‚Äñ * ‚Äñb‚Äñ` (rather than
`‚â§` as in the definition of `NormedRing`). Many `NormedRing`s satisfy this stronger property,
including all `NormedDivisionRing`s and `NormedField`s. -/
class NormMulClass (Œ± : Type*) [Norm Œ±] [Mul Œ±] : Prop where
  /-- The norm is multiplicative. -/
  protected norm_mul : ‚àÄ (a b : Œ±), ‚Äña * b‚Äñ = ‚Äña‚Äñ * ‚Äñb‚Äñ

@[simp] lemma norm_mul [Norm Œ±] [Mul Œ±] [NormMulClass Œ±] (a b : Œ±) :
    ‚Äña * b‚Äñ = ‚Äña‚Äñ * ‚Äñb‚Äñ :=
  NormMulClass.norm_mul a b

section SeminormedAddCommGroup

variable [SeminormedAddCommGroup Œ±] [Mul Œ±] [NormMulClass Œ±] (a b : Œ±)

@[simp] lemma nnnorm_mul : ‚Äña * b‚Äñ‚Çä = ‚Äña‚Äñ‚Çä * ‚Äñb‚Äñ‚Çä := NNReal.eq <| norm_mul a b

@[simp] lemma enorm_mul : ‚Äña * b‚Äñ‚Çë = ‚Äña‚Äñ‚Çë * ‚Äñb‚Äñ‚Çë := by simp [enorm]

end SeminormedAddCommGroup

section SeminormedRing

variable [SeminormedRing Œ±] [NormOneClass Œ±] [NormMulClass Œ±]

/-- `norm` as a `MonoidWithZeroHom`. -/
@[simps]
def normHom : Œ± ‚Üí*‚ÇÄ ‚Ñù where
  toFun := (‚Äñ¬∑‚Äñ)
  map_zero' := norm_zero
  map_one' := norm_one
  map_mul' := norm_mul

/-- `nnnorm` as a `MonoidWithZeroHom`. -/
@[simps]
def nnnormHom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0 where
  toFun := (‚Äñ¬∑‚Äñ‚Çä)
  map_zero' := nnnorm_zero
  map_one' := nnnorm_one
  map_mul' := nnnorm_mul

@[simp]
theorem norm_pow (a : Œ±) : ‚àÄ n : ‚Ñï, ‚Äña ^ n‚Äñ = ‚Äña‚Äñ ^ n :=
  (normHom.toMonoidHom : Œ± ‚Üí* ‚Ñù).map_pow a

@[simp]
theorem nnnorm_pow (a : Œ±) (n : ‚Ñï) : ‚Äña ^ n‚Äñ‚Çä = ‚Äña‚Äñ‚Çä ^ n :=
  (nnnormHom.toMonoidHom : Œ± ‚Üí* ‚Ñù‚â•0).map_pow a n

@[simp] lemma enorm_pow (a : Œ±) (n : ‚Ñï) : ‚Äña ^ n‚Äñ‚Çë = ‚Äña‚Äñ‚Çë ^ n := by simp [enorm]

protected theorem List.norm_prod (l : List Œ±) : ‚Äñl.prod‚Äñ = (l.map norm).prod :=
  map_list_prod (normHom.toMonoidHom : Œ± ‚Üí* ‚Ñù) _

protected theorem List.nnnorm_prod (l : List Œ±) : ‚Äñl.prod‚Äñ‚Çä = (l.map nnnorm).prod :=
  map_list_prod (nnnormHom.toMonoidHom : Œ± ‚Üí* ‚Ñù‚â•0) _

end SeminormedRing

section SeminormedCommRing

variable [SeminormedCommRing Œ±] [NormMulClass Œ±] [NormOneClass Œ±]

@[simp]
theorem norm_prod (s : Finset Œ≤) (f : Œ≤ ‚Üí Œ±) : ‚Äñ‚àè b ‚àà s, f b‚Äñ = ‚àè b ‚àà s, ‚Äñf b‚Äñ :=
  map_prod normHom.toMonoidHom f s

@[simp]
theorem nnnorm_prod (s : Finset Œ≤) (f : Œ≤ ‚Üí Œ±) : ‚Äñ‚àè b ‚àà s, f b‚Äñ‚Çä = ‚àè b ‚àà s, ‚Äñf b‚Äñ‚Çä :=
  map_prod nnnormHom.toMonoidHom f s

end SeminormedCommRing

section NormedAddCommGroup
variable [NormedAddCommGroup Œ±] [MulOneClass Œ±] [NormMulClass Œ±] [Nontrivial Œ±]

/-- Deduce `NormOneClass` from `NormMulClass` under a suitable nontriviality hypothesis. Not
an instance, in order to avoid loops with `NormOneClass.nontrivial`. -/
lemma NormMulClass.toNormOneClass : NormOneClass Œ± where
  norm_one := by
    obtain ‚ü®u, hu‚ü© := exists_ne (0 : Œ±)
    simpa [mul_eq_left‚ÇÄ (norm_ne_zero_iff.mpr hu)] using (norm_mul u 1).symm

end NormedAddCommGroup

section NormedRing
variable [NormedRing Œ±] [NormMulClass Œ±]

instance NormMulClass.isAbsoluteValue_norm : IsAbsoluteValue (norm : Œ± ‚Üí ‚Ñù) where
  abv_nonneg' := norm_nonneg
  abv_eq_zero' := norm_eq_zero
  abv_add' := norm_add_le
  abv_mul' := norm_mul

instance NormMulClass.toNoZeroDivisors : NoZeroDivisors Œ± where
  eq_zero_or_eq_zero_of_mul_eq_zero h := by
    simpa only [‚Üê norm_eq_zero (E := Œ±), norm_mul, mul_eq_zero] using h

end NormedRing

end NormMulClass

/-! ### Induced normed structures -/

section Induced

variable {F : Type*} (R S : Type*) [FunLike F R S]

/-- A non-unital ring homomorphism from a `NonUnitalRing` to a `NonUnitalSeminormedRing`
induces a `NonUnitalSeminormedRing` structure on the domain.

See note [reducible non-instances] -/
abbrev SeminormedRing.induced [NonUnitalRing R] [NonUnitalRing S] [WithSeminormedRing S]
    [NonUnitalRingHomClass F R S] (f : F) : WithSeminormedRing R :=
  { SeminormedAddGroup.induced R S f  with
    norm_mul_le x y := show ‚Äñf _‚Äñ ‚â§ _ from (map_mul f x y).symm ‚ñ∏ norm_mul_le (f x) (f y) }

/-- An injective non-unital ring homomorphism from a `NonUnitalRing` to a
`NonUnitalNormedRing` induces a `NonUnitalNormedRing` structure on the domain.

See note [reducible non-instances] -/
abbrev NormedRing.induced [NonUnitalRing R] [NonUnitalRing S] [WithNormedRing S]
    [NonUnitalRingHomClass F R S] (f : F) (hf : Function.Injective f) : WithNormedRing R :=
  { SeminormedRing.induced R S f, NormedAddGroup.induced R S f hf with }

/-- A ring homomorphism from a `Ring R` to a `SeminormedRing S` which induces the norm structure
`SeminormedRing.induced` makes `R` satisfy `‚Äñ(1 : R)‚Äñ = 1` whenever `‚Äñ(1 : S)‚Äñ = 1`. -/
theorem NormOneClass.induced {F : Type*} (R S : Type*) [Ring R] [Ring S] [WithSeminormedRing S]
    [NormOneClass S] [FunLike F R S] [RingHomClass F R S] (f : F) :
    @NormOneClass R (SeminormedRing.induced R S f).toNorm _ :=
  let _ : WithSeminormedRing R := SeminormedRing.induced R S f
  { norm_one := (congr_arg norm (map_one f)).trans norm_one }

/-- A ring homomorphism from a `Ring R` to a `SeminormedRing S` which induces the norm structure
`SeminormedRing.induced` makes `R` satisfy `‚Äñ(1 : R)‚Äñ = 1` whenever `‚Äñ(1 : S)‚Äñ = 1`. -/
theorem NormMulClass.induced {F : Type*} (R S : Type*) [Ring R] [Ring S] [WithSeminormedRing S]
    [NormMulClass S] [FunLike F R S] [RingHomClass F R S] (f : F) :
    @NormMulClass R (SeminormedRing.induced R S f).toNorm _ :=
  let _ : WithSeminormedRing R := SeminormedRing.induced R S f
  { norm_mul x y := (congr_arg norm (map_mul f x y)).trans <| norm_mul _ _ }

end Induced

namespace SubringClass

variable {S R : Type*} [SetLike S R]

instance toSeminormedRing [SeminormedRing R] [SubringClass S R] (s : S) : WithSeminormedRing s :=
  SeminormedRing.induced s R (SubringClass.subtype s)

instance toNormedRing [NormedRing R] [SubringClass S R] (s : S) : WithNormedRing s :=
  NormedRing.induced s R (SubringClass.subtype s) Subtype.val_injective

instance toNormOneClass [SeminormedRing R] [NormOneClass R] [SubringClass S R] (s : S) :
    NormOneClass s :=
  .induced s R <| SubringClass.subtype _

instance toNormMulClass [SeminormedRing R] [NormMulClass R] [SubringClass S R] (s : S) :
    NormMulClass s :=
  .induced s R <| SubringClass.subtype _

end SubringClass

namespace AbsoluteValue

/-- A real absolute value on a ring determines a `NormedRing` structure. -/
noncomputable def toNormedRing {R : Type*} [Ring R] (v : AbsoluteValue R ‚Ñù) : WithNormedRing R where
  norm := v
  dist x y := v (x - y)
  dist_eq _ _ := rfl
  dist_self x := by simp only [sub_self, map_zero]
  dist_comm := v.map_sub
  dist_triangle := v.sub_le
  edist_dist x y := rfl
  norm_mul_le x y := (v.map_mul x y).le
  eq_of_dist_eq_zero := by simp only [AbsoluteValue.map_sub_eq_zero_iff, imp_self, implies_true]

end AbsoluteValue
