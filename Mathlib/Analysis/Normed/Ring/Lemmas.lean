/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import Mathlib.Algebra.Order.GroupWithZero.Finset
import Mathlib.Analysis.Normed.Group.Bounded
import Mathlib.Analysis.Normed.Group.Int
import Mathlib.Analysis.Normed.Group.Uniform
import Mathlib.Analysis.Normed.Ring.Basic

/-!
# Normed rings

In this file we continue building the theory of (semi)normed rings.
-/

-- Guard against import creep.
assert_not_exists RestrictScalars

variable {Œ± : Type*} {Œ≤ : Type*} {Œπ : Type*}

open Filter Bornology
open scoped Topology NNReal Pointwise

section NonUnitalSeminormedRing

variable [NonUnitalSeminormedRing Œ±]

theorem Filter.Tendsto.zero_mul_isBoundedUnder_le {f g : Œπ ‚Üí Œ±} {l : Filter Œπ}
    (hf : Tendsto f l (ùìù 0)) (hg : IsBoundedUnder (¬∑ ‚â§ ¬∑) l ((‚Äñ¬∑‚Äñ) ‚àò g)) :
    Tendsto (fun x => f x * g x) l (ùìù 0) :=
  hf.op_zero_isBoundedUnder_le hg (¬∑ * ¬∑) norm_mul_le

theorem Filter.isBoundedUnder_le_mul_tendsto_zero {f g : Œπ ‚Üí Œ±} {l : Filter Œπ}
    (hf : IsBoundedUnder (¬∑ ‚â§ ¬∑) l (norm ‚àò f)) (hg : Tendsto g l (ùìù 0)) :
    Tendsto (fun x => f x * g x) l (ùìù 0) :=
  hg.op_zero_isBoundedUnder_le hf (flip (¬∑ * ¬∑)) fun x y =>
    (norm_mul_le y x).trans_eq (mul_comm _ _)

open Finset in
/-- Non-unital seminormed ring structure on the product of finitely many non-unital seminormed
rings, using the sup norm. -/
instance Pi.nonUnitalSeminormedRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ]
    [‚àÄ i, NonUnitalSeminormedRing (œÄ i)] : NonUnitalSeminormedRing (‚àÄ i, œÄ i) :=
  { seminormedAddCommGroup, nonUnitalRing with
    norm_mul_le x y := NNReal.coe_mono <| calc
      (univ.sup fun i ‚Ü¶ ‚Äñx i * y i‚Äñ‚Çä) ‚â§ univ.sup ((‚Äñx ¬∑‚Äñ‚Çä) * (‚Äñy ¬∑‚Äñ‚Çä)) :=
        sup_mono_fun fun _ _ ‚Ü¶ nnnorm_mul_le _ _
      _ ‚â§ (univ.sup (‚Äñx ¬∑‚Äñ‚Çä)) * univ.sup (‚Äñy ¬∑‚Äñ‚Çä) :=
        sup_mul_le_mul_sup_of_nonneg (fun _ _ ‚Ü¶ zero_le _) fun _ _ ‚Ü¶ zero_le _}

end NonUnitalSeminormedRing

section SeminormedRing

variable [SeminormedRing Œ±]

/-- Seminormed ring structure on the product of finitely many seminormed rings,
  using the sup norm. -/
instance Pi.seminormedRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ] [‚àÄ i, SeminormedRing (œÄ i)] :
    SeminormedRing (‚àÄ i, œÄ i) :=
  { Pi.nonUnitalSeminormedRing, Pi.ring with }

end SeminormedRing

section NonUnitalNormedRing

variable [NonUnitalNormedRing Œ±]

/-- Normed ring structure on the product of finitely many non-unital normed rings, using the sup
norm. -/
instance Pi.nonUnitalNormedRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ] [‚àÄ i, NonUnitalNormedRing (œÄ i)] :
    NonUnitalNormedRing (‚àÄ i, œÄ i) :=
  { Pi.nonUnitalSeminormedRing, Pi.normedAddCommGroup with }

end NonUnitalNormedRing

section NormedRing

variable [NormedRing Œ±]

/-- Normed ring structure on the product of finitely many normed rings, using the sup norm. -/
instance Pi.normedRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ] [‚àÄ i, NormedRing (œÄ i)] :
    NormedRing (‚àÄ i, œÄ i) :=
  { Pi.seminormedRing, Pi.normedAddCommGroup with }

end NormedRing

section NonUnitalSeminormedCommRing

variable [NonUnitalSeminormedCommRing Œ±]

/-- Non-unital seminormed commutative ring structure on the product of finitely many non-unital
seminormed commutative rings, using the sup norm. -/
instance Pi.nonUnitalSeminormedCommRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ]
    [‚àÄ i, NonUnitalSeminormedCommRing (œÄ i)] : NonUnitalSeminormedCommRing (‚àÄ i, œÄ i) :=
  { Pi.nonUnitalSeminormedRing, Pi.nonUnitalCommRing with }

end NonUnitalSeminormedCommRing

section NonUnitalNormedCommRing

variable [NonUnitalNormedCommRing Œ±]

/-- Normed commutative ring structure on the product of finitely many non-unital normed
commutative rings, using the sup norm. -/
instance Pi.nonUnitalNormedCommRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ]
    [‚àÄ i, NonUnitalNormedCommRing (œÄ i)] : NonUnitalNormedCommRing (‚àÄ i, œÄ i) :=
  { Pi.nonUnitalSeminormedCommRing, Pi.normedAddCommGroup with }

end NonUnitalNormedCommRing

section SeminormedCommRing

variable [SeminormedCommRing Œ±]

/-- Seminormed commutative ring structure on the product of finitely many seminormed commutative
rings, using the sup norm. -/
instance Pi.seminormedCommRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ] [‚àÄ i, SeminormedCommRing (œÄ i)] :
    SeminormedCommRing (‚àÄ i, œÄ i) :=
  { Pi.nonUnitalSeminormedCommRing, Pi.ring with }

end SeminormedCommRing

section NormedCommRing

variable [NormedCommRing Œ±]

/-- Normed commutative ring structure on the product of finitely many normed commutative rings,
using the sup norm. -/
instance Pi.normedCommutativeRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ] [‚àÄ i, NormedCommRing (œÄ i)] :
    NormedCommRing (‚àÄ i, œÄ i) :=
  { Pi.seminormedCommRing, Pi.normedAddCommGroup with }

end NormedCommRing

-- see Note [lower instance priority]
instance (priority := 100) NonUnitalSeminormedRing.toContinuousMul [NonUnitalSeminormedRing Œ±] :
    ContinuousMul Œ± :=
  ‚ü®continuous_iff_continuousAt.2 fun x =>
      tendsto_iff_norm_sub_tendsto_zero.2 <| by
        have : ‚àÄ e : Œ± √ó Œ±,
            ‚Äñe.1 * e.2 - x.1 * x.2‚Äñ ‚â§ ‚Äñe.1‚Äñ * ‚Äñe.2 - x.2‚Äñ + ‚Äñe.1 - x.1‚Äñ * ‚Äñx.2‚Äñ := by
          intro e
          calc
            ‚Äñe.1 * e.2 - x.1 * x.2‚Äñ ‚â§ ‚Äñe.1 * (e.2 - x.2) + (e.1 - x.1) * x.2‚Äñ := by
              rw [mul_sub, sub_mul, sub_add_sub_cancel]
            _ ‚â§ ‚Äñe.1‚Äñ * ‚Äñe.2 - x.2‚Äñ + ‚Äñe.1 - x.1‚Äñ * ‚Äñx.2‚Äñ :=
              norm_add_le_of_le (norm_mul_le _ _) (norm_mul_le _ _)
        refine squeeze_zero (fun e => norm_nonneg _) this ?_
        convert
          ((continuous_fst.tendsto x).norm.mul
                ((continuous_snd.tendsto x).sub tendsto_const_nhds).norm).add
            (((continuous_fst.tendsto x).sub tendsto_const_nhds).norm.mul _)
        -- Porting note: `show` used to select a goal to work on
        rotate_right
        ¬∑ show Tendsto _ _ _
          exact tendsto_const_nhds
        ¬∑ simp‚ü©

-- see Note [lower instance priority]
/-- A seminormed ring is a topological ring. -/
instance (priority := 100) NonUnitalSeminormedRing.toIsTopologicalRing [NonUnitalSeminormedRing Œ±] :
    IsTopologicalRing Œ± where

namespace SeparationQuotient

instance [NonUnitalSeminormedRing Œ±] : NonUnitalNormedRing (SeparationQuotient Œ±) where
  __ : NonUnitalRing (SeparationQuotient Œ±) := inferInstance
  __ : NormedAddCommGroup (SeparationQuotient Œ±) := inferInstance
  norm_mul_le := Quotient.ind‚ÇÇ norm_mul_le

instance [NonUnitalSeminormedCommRing Œ±] : NonUnitalNormedCommRing (SeparationQuotient Œ±) where
  __ : NonUnitalCommRing (SeparationQuotient Œ±) := inferInstance
  __ : NormedAddCommGroup (SeparationQuotient Œ±) := inferInstance
  norm_mul_le := Quotient.ind‚ÇÇ norm_mul_le

instance [SeminormedRing Œ±] : NormedRing (SeparationQuotient Œ±) where
  __ : Ring (SeparationQuotient Œ±) := inferInstance
  __ : NormedAddCommGroup (SeparationQuotient Œ±) := inferInstance
  norm_mul_le := Quotient.ind‚ÇÇ norm_mul_le

instance [SeminormedCommRing Œ±] : NormedCommRing (SeparationQuotient Œ±) where
  __ : CommRing (SeparationQuotient Œ±) := inferInstance
  __ : NormedAddCommGroup (SeparationQuotient Œ±) := inferInstance
  norm_mul_le := Quotient.ind‚ÇÇ norm_mul_le

instance [SeminormedAddCommGroup Œ±] [One Œ±] [NormOneClass Œ±] :
    NormOneClass (SeparationQuotient Œ±) where
  norm_one := norm_one (Œ± := Œ±)

end SeparationQuotient

namespace NNReal

lemma lipschitzWith_sub : LipschitzWith 2 (fun (p : ‚Ñù‚â•0 √ó ‚Ñù‚â•0) ‚Ü¶ p.1 - p.2) := by
  rw [‚Üê isometry_subtype_coe.lipschitzWith_iff]
  have : Isometry (Prod.map ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù) ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù)) :=
    isometry_subtype_coe.prod_map isometry_subtype_coe
  convert (((LipschitzWith.prod_fst.comp this.lipschitz).sub
    (LipschitzWith.prod_snd.comp this.lipschitz)).max_const 0)
  norm_num

end NNReal

instance Int.instNormedCommRing : NormedCommRing ‚Ñ§ where
  __ := instCommRing
  __ := instNormedAddCommGroup
  norm_mul_le m n := by simp only [norm, Int.cast_mul, abs_mul, le_rfl]

instance Int.instNormOneClass : NormOneClass ‚Ñ§ :=
  ‚ü®by simp [‚Üê Int.norm_cast_real]‚ü©
