/-
Copyright (c) 2025 Michael Stoll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Stoll
-/
import Mathlib.Analysis.Polynomial.Factorization

/-!
# A (new?) proof of the Gelfand-Mazur Theorem

We provide a formalization of proofs of the following versions of the *Gelfand-Mazur* *Theorem*.

* `NormedAlgebra.Complex.algEquivOfNormMul`: if `F` is a nontrivial normed `‚ÑÇ`-algebra
  with multiplicative norm, then we obtain a `‚ÑÇ`-algebra equivalence with `‚ÑÇ`.

  This differs from `NormedRing.algEquivComplexOfComplete` in the assumptions: there,
  * `F` is assumed to be complete,
  * `F` is assumed to be a (nontrivial) division ring,
  * but the norm is only required to be submultiplicative.
* `NormedAlgebra.Complex.nonempty_algEquiv`: A nontrivial normed `‚ÑÇ`-algebra
  with multiplicative norm is isomorphic to `‚ÑÇ` as a `‚ÑÇ`-algebra.
* `NormedAlgebra.Real.nonempty_algEquiv_or`: if a field `F` is a normed `‚Ñù`-algebra,
  then `F` is isomorphic as an `‚Ñù`-algebra either to `‚Ñù` or to `‚ÑÇ`.

### The complex case

The proof we use here is a variant of a proof for the complex case (any normed `‚ÑÇ`-algebra
is isomorphic to `‚ÑÇ`) that is originally due to Ostrowski
[(Section 7 in *√úber einige L√∂sungen der Funktionalgleichung œÜ(x)‚ãÖœÜ(y)=œÜ(xy)*,
Acta Math. 41, 271-284 (1917))}(https://doi.org/10.1007/BF02422947).
See also the concise version provided by Peter Scholze on
[Math Overflow](https://mathoverflow.net/questions/10535/ways-to-prove-the-fundamental-theorem-of-algebra/420803#420803).

This proof goes as follows. Let `x : F` be arbitrary; we need to show that `x = z ‚Ä¢ 1`
for some `z : ‚ÑÇ`. We consider the function `z ‚Ü¶ ‚Äñx - z ‚Ä¢ 1‚Äñ`. It has a minimum `M`,
which it attains at some point `z‚ÇÄ`, which (upon replacing `x` by `x - z‚ÇÄ ‚Ä¢ 1`) we can
assume to be zero. If `M = 0`, we are done, so assume not. For `n : ‚Ñï`,
a primitive `n`th root of unity `Œ∂ : ‚ÑÇ`, and `z : ‚ÑÇ` with `|z| < M = ‚Äñx‚Äñ` we then have that
`M ‚â§ ‚Äñx - z ‚Ä¢ 1‚Äñ = ‚Äñx ^ n - z ^ n ‚Ä¢ 1‚Äñ / ‚àè 0 < k < n, ‚Äñx - (Œ∂ ^ k * z) ‚Ä¢ 1‚Äñ`,
which is bounded by `(M ^ n + |z| ^ n) / M ^ (n - 1) = M * (1 + (|z| / M) ^ n)`.
Letting `n` tend to infinity then shows that `‚Äñx - z ‚Ä¢ 1‚Äñ = M` (see `NormedAlgebra.aux`).
This implies that the set of `z` such that `‚Äñx - z ‚Ä¢ 1‚Äñ = M` is closed and open
(and nonempty), so it is all of `‚ÑÇ`, which contradicts `‚Äñx - z ‚Ä¢ 1‚Äñ ‚â• |z| - M`
when `|z|` is sufficiently large.

### The real case

THe usual proof for the real case is "either `F` contains a square root of `-1`;
then `F` is in fact a normed `‚ÑÇ`-agebra and we can use the result above, or else
we adjoin a square root of `-1` to `F` to obtain a normed `‚ÑÇ`-agebra `F'` and
apply the result to `F'`". The difficulty with formalizing this is that
Mathlib does not provide a normed `‚ÑÇ`-algebra instance for `F'` (neither for
`F' := AdjoinRoot (X ^ 2 + 1 : F[X])` nor for `F' := TensorProduct ‚Ñù ‚ÑÇ F`),
and it is not so straight-forward to set this up. So we take inspiration from the
proof sketched above for the complex case to obtain a direct proof.

Since irreducible polynomials over `‚Ñù` have degree at most `2`, it must be the case
that each element is annihilated by a monic polynomial of degree `2`.
We fix `x : F` in the following.

Because the space `‚Ñù¬≤` of monic polynomials of degree `2` is complete and locally compact
and `‚Äñaeval x p‚Äñ` gets large when `p` has large coefficients (*), there will be some `p‚ÇÄ`
such that `‚Äñaeval x p‚ÇÄ‚Äñ` attains a minimum (see `NormedAlgebra.Real.exists_min_norm_œÜ`).
We assume that this is positive and derive a contradiction. Let `M := ‚Äñaeval x p‚ÇÄ‚Äñ > 0`
be the minimal value.
Since every monic polynomial `f : ‚Ñù[X]` of even degree can be written as a product
of monic polynomials of degree `2`
(see `Polynomial.IsMonicOfDegree.eq_isMonicOfDegree_two_mul_isMonicOfDegree`),
it follows that `‚Äñaeval x f‚Äñ ‚â• M ^ (f.natDegree / 2)`.

(*) This is actually slightly subtle. It is certainly true for `‚Äñx - r ‚Ä¢ 1‚Äñ` with `r : ‚Ñù`.
If the minimum of this is zero, then the minimum for monic polynomials of degree `2`
will also be zero (and is attained on a one-dimensional subset). Otherwise, one can
indeed show that a bound on `‚Äñx ^ 2 - a ‚Ä¢ x + b ‚Ä¢ 1‚Äñ` implies bounds on `|a|` and `|b|`.

The goal is now to show that when `a` and `b` achieve the minimum `M` of `‚Äñx ^ 2 - a ‚Ä¢ x + b ‚Ä¢ 1‚Äñ`,
and `M > 0`, then we can find some neighborhood `U` of `(a, b)` in `‚Ñù √ó ‚Ñù`
such that `‚Äñx ^ 2 - a' ‚Ä¢ x + b' ‚Ä¢ 1‚Äñ = M` for all `(a', b') ‚àà U`
Then the set `S = {(a', b') | ‚Äñx ^ 2 - a' ‚Ä¢ x + b' ‚Ä¢ 1‚Äñ = M}` must be all of `‚Ñù √ó ‚Ñù` (as it is
closed, open, and nonempty). (see `NormedAlgebra.Real.is_const_norm_sq_sub_add`).
This will lead to a contradiction with the growth of `‚Äñx ^ 2 - a ‚Ä¢ x‚Äñ` as `|a|` gets large.

To get there, the idea is, similarly to the complex case, to use the fact that
`X ^ 2 - a' * X + b'` divides the difference
`(X ^ 2 - a * X + b) ^ n - ((a' - a) * X - (b' - b)) ^ n`;
this gives us a monic polynomial `p` of degree `2 * (n - 1)` such that `(X ^ 2 - a' * X + b') * p`
equals this difference. By the above, `‚Äñaeval x p‚Äñ ‚â• M ^ (n - 1)`.

Since `(a', b') ‚Ü¶ x ^ 2 - a' ‚Ä¢ x + b' ‚Ä¢ 1` is continuous, there will be a neighborhood `U`
of `(a, b)` such that
`‚Äñ(a' - a) ‚Ä¢ x - (b' - b) ‚Ä¢ 1‚Äñ = ‚Äñ(x ^ 2 - a ‚Ä¢ x + b ‚Ä¢ 1) - (x ^ 2 -a' ‚Ä¢ x + b' ‚Ä¢ 1)‚Äñ`
is less than `M` for `(a', b') ‚àà U`. For such `(a', b')`, it follows that
`‚Äñx ^ 2 - a' ‚Ä¢ x + b' ‚Ä¢ 1‚Äñ ‚â§ ‚Äñ(x ^ 2 - a ‚Ä¢ x + b ‚Ä¢ 1) ^ n - ((a' - a) ‚Ä¢ x - (b' - b) ‚Ä¢ 1) ^ n‚Äñ /`
`‚Äñaeval x p‚Äñ`,
which is bounded by `(M ^ n + c ^ n) / M ^ (n - 1) = M * (1 + (c / M) ^ n)`, where
`c = ‚Äñ(a' - a) ‚Ä¢ x - (b' - b) ‚Ä¢ 1‚Äñ < M`. So, letting `n` tend to infinity, we obtain that
`M ‚â§ ‚Äñx ^ 2 - a' ‚Ä¢ x + b' ‚Ä¢ 1‚Äñ ‚â§ M`, as desired.
-/

/-!
### Auxiliary results used in both cases
-/

open Polynomial

namespace NormedAlgebra

/- The key step: show that the norm of a suitable function is constant if the norm takes
a positive minimum and condition `H` below is satisfied. -/
private lemma aux {X E : Type*} [TopologicalSpace X] [PreconnectedSpace X]
    [SeminormedAddCommGroup E] {f : X ‚Üí E} {M : ‚Ñù} {x : X} (hM : 0 < M) (hx : ‚Äñf x‚Äñ = M)
    (h : ‚àÄ y, M ‚â§ ‚Äñf y‚Äñ) (hf : Continuous f)
    (H : ‚àÄ {y} z, ‚Äñf y‚Äñ = M ‚Üí ‚àÄ n > 0, ‚Äñf z‚Äñ ‚â§ M * (1 + (‚Äñf z - f y‚Äñ / M) ^ n)) (y : X) :
    ‚Äñf y‚Äñ = M := by
  suffices {y | ‚Äñf y‚Äñ = ‚Äñf x‚Äñ} = Set.univ by simpa only [‚Üê this, hx] using Set.mem_univ y
  refine IsClopen.eq_univ ‚ü®isClosed_eq (by fun_prop) (by fun_prop), ?_‚ü© <| Set.nonempty_of_mem rfl
  refine isOpen_iff_mem_nhds.mpr fun w hw ‚Ü¶ ?_
  simp only [Set.mem_setOf, hx] at hw ‚ä¢
  suffices ‚àÉ U ‚àà nhds w, ‚àÄ u ‚àà U, ‚Äñf u‚Äñ = M by
    obtain ‚ü®U, hU‚ÇÅ, hU‚ÇÇ‚ü© := this
    exact Filter.mem_of_superset hU‚ÇÅ fun u hu ‚Ü¶ Set.mem_setOf.mpr <| hU‚ÇÇ u hu
  obtain ‚ü®U, hU‚ÇÄ, hU‚ü© : ‚àÉ U ‚àà nhds w, ‚àÄ u ‚àà U, ‚Äñf u - f w‚Äñ < M := by
    refine ‚ü®f ‚Åª¬π' {y | ‚Äñy - f w‚Äñ < M}, hf.tendsto w ?_, fun _ H ‚Ü¶ by simpa using H‚ü©
    exact isOpen_lt (by fun_prop) (by fun_prop) |>.mem_nhds (by simpa)
  refine ‚ü®U, hU‚ÇÄ, fun u hu ‚Ü¶ (le_antisymm (h ..) ?_).symm‚ü©
  refine ge_of_tendsto ?_ <| Filter.Eventually.mono (Filter.Ioi_mem_atTop 0) <| H u hw
  conv => enter [3, 1]; rw [show M = M * (1 + 0) by ring] -- preparation
  refine tendsto_const_nhds.mul <| tendsto_const_nhds.add <|
    tendsto_pow_atTop_nhds_zero_of_abs_lt_one ?_
  rw [abs_of_nonneg (by positivity)]
  exact (div_lt_one hM).mpr <| hU u hu

/-- In a normed algebra `F` over a normed field `ùïú` that is a proper space, the function
`z : ùïú ‚Ü¶ ‚Äñx - z ‚Ä¢ 1‚Äñ` achieves a global minimum for every `x : F`. -/
lemma exists_min_norm_sub_smul (ùïú : Type*) {F : Type*} [NormedField ùïú]
    [ProperSpace ùïú] [SeminormedRing F] [NormedAlgebra ùïú F] [NormOneClass F] (x : F) :
  ‚àÉ z : ùïú, ‚àÄ z' : ùïú, ‚Äñx - z ‚Ä¢ 1‚Äñ ‚â§ ‚Äñx - z' ‚Ä¢ 1‚Äñ := by
  have hf : Continuous fun z : ùïú ‚Ü¶ ‚Äñx - z ‚Ä¢ 1‚Äñ := by fun_prop
  refine hf.exists_forall_le_of_isBounded 0 <|
     (Metric.isBounded_iff_subset_closedBall 0).mpr ‚ü®2 * ‚Äñx‚Äñ, fun z hz ‚Ü¶ ?_‚ü©
  rw [Set.mem_setOf, norm_sub_rev] at hz
  simpa [‚Üê two_mul] using (norm_sub_norm_le ..).trans hz

/-!
### The complex case
-/

namespace Complex

variable {F : Type*} [NormedRing F] [NormOneClass F] [NormMulClass F] [NormedAlgebra ‚ÑÇ F]

private lemma le_aeval_of_isMonicOfDegree (x : F) {M : ‚Ñù} (hM : 0 ‚â§ M)
    (h : ‚àÄ z' : ‚ÑÇ, M ‚â§ ‚Äñx - z' ‚Ä¢ 1‚Äñ) {p : ‚ÑÇ[X]} {n : ‚Ñï} (hp : IsMonicOfDegree p n) (c : ‚ÑÇ) :
    M ^ n ‚â§ ‚Äñaeval (x - c ‚Ä¢ 1) p‚Äñ := by
  induction n generalizing p with
  | zero => simp [isMonicOfDegree_zero_iff.mp hp]
  | succ n ih =>
    obtain ‚ü®f‚ÇÅ, f‚ÇÇ, hf‚ÇÅ, hf‚ÇÇ, H‚ü© := hp.eq_isMonicOfDegree_one_mul_isMonicOfDegree
    obtain ‚ü®r, hr‚ü© := isMonicOfDegree_one_iff.mp hf‚ÇÅ
    have H' (y : F) : aeval y (X + C r) = y + r ‚Ä¢ 1 := by
      simp [Algebra.algebraMap_eq_smul_one]
    rw [H, aeval_mul, norm_mul, mul_comm, pow_succ, hr, H', sub_add, ‚Üê sub_smul]
    exact mul_le_mul (ih hf‚ÇÇ) (h (c - r)) hM (norm_nonneg _)

private lemma norm_sub_is_constant {x : F} {z : ‚ÑÇ} (hz : ‚àÄ z' : ‚ÑÇ, ‚Äñx - z ‚Ä¢ 1‚Äñ ‚â§ ‚Äñx - z' ‚Ä¢ 1‚Äñ)
    (H : ‚àÄ z' : ‚ÑÇ, ‚Äñx - z' ‚Ä¢ 1‚Äñ ‚â† 0) (c : ‚ÑÇ) :
    ‚Äñx - c ‚Ä¢ 1‚Äñ = ‚Äñx - z ‚Ä¢ 1‚Äñ := by
  set M := ‚Äñx - z ‚Ä¢ 1‚Äñ with hMdef
  have hM‚ÇÄ : 0 < M := by have := H z; positivity
  refine aux (f := (x - ¬∑ ‚Ä¢ 1)) hM‚ÇÄ hMdef.symm hz (by fun_prop) (fun {y} w hy n hn ‚Ü¶ ?_) c
  dsimp only at hy ‚ä¢
  rw [sub_sub_sub_cancel_left, ‚Üê sub_smul, Algebra.norm_smul_one_eq_norm, norm_sub_rev y w,
    show M * (1 + (‚Äñw - y‚Äñ / M) ^ n) = (M ^ n + ‚Äñw - y‚Äñ ^ n) / M ^ (n - 1) by
      simp only [field, div_pow, ‚Üê pow_succ', Nat.sub_add_cancel hn],
    le_div_iff‚ÇÄ (by positivity)]
  obtain ‚ü®p, hp, hrel‚ü© :=
    (isMonicOfDegree_X_pow ‚ÑÇ n).of_dvd_sub (by omega)
      (isMonicOfDegree_X_sub_one (w - y)) (by compute_degree!) <| sub_dvd_pow_sub_pow X _ n
  grw [le_aeval_of_isMonicOfDegree x hM‚ÇÄ.le hz hp y]
  rw [eq_comm, ‚Üê eq_sub_iff_add_eq, mul_comm] at hrel
  apply_fun (‚Äñaeval (x - y ‚Ä¢ 1) ¬∑‚Äñ) at hrel
  simp only [map_mul, map_sub, aeval_X, aeval_C, Algebra.algebraMap_eq_smul_one, norm_mul,
    map_pow, sub_sub_sub_cancel_right] at hrel
  rw [hrel]
  exact (norm_sub_le ..).trans <| by simp [hy, ‚Üê sub_smul]

lemma exists_norm_sub_smul_one_eq_zero (x : F) :
    ‚àÉ z : ‚ÑÇ, ‚Äñx - z ‚Ä¢ 1‚Äñ = 0 := by
  obtain ‚ü®z, hz‚ü© := exists_min_norm_sub_smul ‚ÑÇ x
  set M := ‚Äñx - z ‚Ä¢ 1‚Äñ with hM
  rcases eq_or_lt_of_le (show 0 ‚â§ M from norm_nonneg _) with hM‚ÇÄ | hM‚ÇÄ
  ¬∑ exact ‚ü®z, hM‚ÇÄ.symm‚ü©
  by_contra! H
  have key := norm_sub_is_constant hz H (‚Äñx‚Äñ + M + 1)
  rw [‚Üê hM, norm_sub_rev] at key
  replace key := (norm_sub_norm_le ..).trans_eq key
  rw [Algebra.norm_smul_one_eq_norm] at key
  norm_cast at key
  rw [Real.norm_eq_abs, abs_of_nonneg (by positivity)] at key
  linarith

variable (F) [Nontrivial F]

/-- A version of the **Gelfand-Mazur Theorem**.

If `F` is a nontrivial normed `‚ÑÇ`-algebra with multiplicative norm, then we obtain a
`‚ÑÇ`-algebra equivalence with `‚ÑÇ`. -/
noncomputable
def algEquivOfNormMul : ‚ÑÇ ‚âÉ‚Çê[‚ÑÇ] F := by
  let e : ‚ÑÇ ‚Üí‚Çê[‚ÑÇ] F := AlgHom.mk' (algebraMap ‚ÑÇ F) (algebraMap.coe_smul ‚ÑÇ ‚ÑÇ F)
  refine AlgEquiv.ofBijective e ‚ü®FaithfulSMul.algebraMap_injective ‚ÑÇ F, fun x ‚Ü¶ ?_‚ü©
  obtain ‚ü®z, hz‚ü© := exists_norm_sub_smul_one_eq_zero x
  refine ‚ü®z, ?_‚ü©
  rw [AlgHom.coe_mk', Algebra.algebraMap_eq_smul_one, eq_comm, ‚Üê sub_eq_zero]
  exact norm_eq_zero.mp hz

/-- A version of the **Gelfand-Mazur Theorem** for nontrivial normed `‚ÑÇ`-algebras `F`
with multiplicative norm. -/
theorem nonempty_algEquiv : Nonempty (‚ÑÇ ‚âÉ‚Çê[‚ÑÇ] F) := ‚ü®algEquivOfNormMul F‚ü©

end Complex


/-!
### The real case
-/

namespace Real

variable {F : Type*} [NormedRing F] [NormedAlgebra ‚Ñù F]

/- An abbreviation introduced for conciseness below. -/
private abbrev œÜ (x : F) (u : ‚Ñù √ó ‚Ñù) : F := x ^ 2 - u.1 ‚Ä¢ x + u.2 ‚Ä¢ 1

private lemma continuous_œÜ (x : F) : Continuous (œÜ x) := by fun_prop

private lemma aeval_eq_œÜ (x : F) (u : ‚Ñù √ó ‚Ñù) : aeval x (X ^ 2 - C u.1 * X + C u.2) = œÜ x u := by
  simp [Algebra.algebraMap_eq_smul_one]

variable [NormOneClass F] [NormMulClass F]

private lemma le_aeval_of_isMonicOfDegree {x : F} {M : ‚Ñù} (hM : 0 ‚â§ M)
    (h : ‚àÄ z : ‚Ñù √ó ‚Ñù, M ‚â§ ‚ÄñœÜ x z‚Äñ) {p : ‚Ñù[X]} {n : ‚Ñï} (hp : IsMonicOfDegree p (2 * n)) :
    M ^ n ‚â§ ‚Äñaeval x p‚Äñ := by
  induction n generalizing p with
  | zero => simp_all
  | succ n ih =>
    rw [mul_add, mul_one] at hp
    obtain ‚ü®f‚ÇÅ, f‚ÇÇ, hf‚ÇÅ, hf‚ÇÇ, H‚ü© := hp.eq_isMonicOfDegree_two_mul_isMonicOfDegree
    obtain ‚ü®a, b, hab‚ü© := isMonicOfDegree_two_iff'.mp hf‚ÇÅ
    rw [H, aeval_mul, norm_mul, mul_comm, pow_succ, hab, aeval_eq_œÜ x (a, b)]
    exact mul_le_mul (ih hf‚ÇÇ) (h (a, b)) hM (norm_nonneg _)

/- The key step in the proof: if `a` and `b` are real numbers minimizing `‚Äñx ^ 2 - a ‚Ä¢ x + b ‚Ä¢ 1‚Äñ`,
and the minimal value is strictly positive, then the function `(s, t) ‚Ü¶ ‚Äñx ^ 2 - s ‚Ä¢ x + t ‚Ä¢ 1‚Äñ`
is constant. -/
private lemma is_const_norm_œÜ {x : F} {z : ‚Ñù √ó ‚Ñù} (h : ‚àÄ w, ‚ÄñœÜ x z‚Äñ ‚â§ ‚ÄñœÜ x w‚Äñ) (H : ‚ÄñœÜ x z‚Äñ ‚â† 0)
    (w : ‚Ñù √ó ‚Ñù) :
    ‚ÄñœÜ x w‚Äñ = ‚ÄñœÜ x z‚Äñ := by
  set M : ‚Ñù := ‚ÄñœÜ x z‚Äñ with hMdef
  have hM‚ÇÄ : 0 < M := by positivity
  refine aux hM‚ÇÄ hMdef.symm h (continuous_œÜ x) (fun {w} u hw n hn ‚Ü¶ ?_) w
  have HH : M * (1 + (‚ÄñœÜ x u - œÜ x w‚Äñ / M) ^ n) = (M ^ n + ‚ÄñœÜ x u - œÜ x w‚Äñ ^ n) / M ^ (n - 1) := by
    simp only [field, div_pow, ‚Üê pow_succ', Nat.sub_add_cancel hn]
  rw [HH, le_div_iff‚ÇÄ (by positivity)]; clear HH
  let q (y : ‚Ñù √ó ‚Ñù) : ‚Ñù[X] := X ^ 2 - C y.1 * X + C y.2
  have hq (y : ‚Ñù √ó ‚Ñù) : IsMonicOfDegree (q y) 2 := isMonicOfDegree_sub_add_two ..
  have hsub : q w - q u = (C u.1 - C w.1) * X + C w.2 - C u.2 := by simp only [q]; ring
  have hdvd : q u ‚à£ q w ^ n - (q w - q u) ^ n := by
    nth_rewrite 1 [‚Üê sub_sub_self (q w) (q u)]
    exact sub_dvd_pow_sub_pow ..
  have H' : ((q w - q u) ^ n).natDegree < 2 * n := by rw [hsub]; compute_degree; omega
  obtain ‚ü®p, hp, hrel‚ü© := ((hq w).pow n).of_dvd_sub (by omega) (hq u) H' hdvd; clear H' hdvd hsub
  rw [show 2 * n - 2 = 2 * (n - 1) by omega] at hp
  grw [le_aeval_of_isMonicOfDegree hM‚ÇÄ.le h hp]
  rw [‚Üê sub_eq_iff_eq_add, eq_comm, mul_comm] at hrel
  apply_fun (‚Äñaeval x ¬∑‚Äñ) at hrel
  rw [map_mul, norm_mul, map_sub, aeval_eq_œÜ x u] at hrel
  rw [hrel, norm_sub_rev (œÜ ..)]
  exact (norm_sub_le ..).trans <| by simp [q, aeval_eq_œÜ, hw]

/- Existence of a minimizing monic polynomial of degree 2 -/

private lemma a_bound {x : F} {c : ‚Ñù} (hc‚ÇÄ : 0 < c) (hbd : ‚àÄ r : ‚Ñù, c ‚â§ ‚Äñx - r ‚Ä¢ 1‚Äñ) {a b : ‚Ñù}
    (h : ‚Äñx ^ 2 - a ‚Ä¢ x + b ‚Ä¢ 1‚Äñ ‚â§ ‚Äñx‚Äñ ^ 2) :
    |a| ‚â§ 2 * ‚Äñx‚Äñ ^ 2 / c := by
  rcases eq_or_ne a 0 with rfl | ha
  ¬∑ simp only [abs_zero]
    positivity
  rw [le_div_iff‚ÇÄ hc‚ÇÄ]
  calc |a| * c
  _ ‚â§ |a| * ‚Äñx - (b / a) ‚Ä¢ 1‚Äñ := by gcongr; exact hbd _
  _ = ‚Äña ‚Ä¢ x - b ‚Ä¢ 1‚Äñ := by
      rw [‚Üê Real.norm_eq_abs, ‚Üê norm_smul, smul_sub, smul_smul, mul_div_cancel‚ÇÄ _ ha]
  _ ‚â§ ‚Äñx‚Äñ ^ 2 + ‚Äñx ^ 2 - a ‚Ä¢ x + b ‚Ä¢ 1‚Äñ := by
      simpa only [‚Üê norm_pow, sub_add, norm_sub_rev (x ^ 2)] using norm_le_norm_add_norm_sub' ..
  _ ‚â§ _ := by rw [two_mul]; exact add_le_add_left h _

private lemma exists_min_norm_œÜ (x : F) : ‚àÉ z : ‚Ñù √ó ‚Ñù, ‚àÄ w : ‚Ñù √ó ‚Ñù, ‚ÄñœÜ x z‚Äñ ‚â§ ‚ÄñœÜ x w‚Äñ := by
  obtain ‚ü®u, hu‚ü© := exists_min_norm_sub_smul ‚Ñù x
  rcases eq_or_lt_of_le (norm_nonneg (x - u ‚Ä¢ 1)) with hc‚ÇÄ | hc‚ÇÄ
  ¬∑ rw [eq_comm, norm_eq_zero, sub_eq_zero] at hc‚ÇÄ
    exact ‚ü®(u, 0), fun z' ‚Ü¶ by simp [œÜ, hc‚ÇÄ, sq]‚ü©
  set c := ‚Äñx - u ‚Ä¢ 1‚Äñ
  refine (continuous_œÜ x).norm.exists_forall_le_of_isBounded (0, 0) ?_
  simp only [œÜ, zero_smul, sub_zero, add_zero, norm_pow]
  refine ((Metric.isBounded_of_abs_le (2 * ‚Äñx‚Äñ ^ 2 / c)).prod
    (Metric.isBounded_of_abs_le (2 * ‚Äñx‚Äñ ^ 2 + 2 * ‚Äñx‚Äñ ^ 3 / c))).subset fun (a, b) hab ‚Ü¶ ?_
  simp only [Set.mem_prod, Set.mem_setOf] at hab ‚ä¢
  have ha : |a| ‚â§ 2 * ‚Äñx‚Äñ ^ 2 / c := a_bound hc‚ÇÄ hu hab
  refine ‚ü®ha, ?_‚ü©
  rw [two_mul, add_assoc, ‚Üê sub_le_iff_le_add, ‚Üê sub_sub]
  calc |b| - ‚Äñx‚Äñ ^ 2 - 2 * ‚Äñx‚Äñ ^ 3 / c
  _ = |b| - ‚Äñx‚Äñ ^ 2 - 2 * ‚Äñx‚Äñ ^ 2 / c * ‚Äñx‚Äñ := by ring
  _ ‚â§ |b| - ‚Äñx‚Äñ ^ 2 - |a| * ‚Äñx‚Äñ := by gcongr
  _ = ‚Äñb ‚Ä¢ (1 : F)‚Äñ - ‚Äña ‚Ä¢ x‚Äñ - ‚Äñx ^ 2‚Äñ := by rw [sub_right_comm, norm_smul a]; simp
  _ ‚â§ ‚Äñb ‚Ä¢ 1 - a ‚Ä¢ x‚Äñ - ‚Äñx ^ 2‚Äñ := by gcongr; exact norm_sub_norm_le ..
  _ ‚â§ ‚Äñx ^ 2 - a ‚Ä¢ x + b ‚Ä¢ 1‚Äñ := by rw [sub_add_comm]; exact norm_sub_le_norm_add ..
  _ ‚â§ ‚Äñx‚Äñ ^ 2 := hab

open Algebra in
/-- If `F` is a normed `‚Ñù`-algebra with a multiplicative norm (and such that `‚Äñ1‚Äñ = 1`),
e.g., a normed division ring, then every `x : F` is the root of a monic quadratic polynomial
with real coefficients. -/
lemma exists_isMonicOfDegree_two_and_aeval_eq_zero (x : F) :
    ‚àÉ p : ‚Ñù[X], IsMonicOfDegree p 2 ‚àß aeval x p = 0 := by
  obtain ‚ü®z, h‚ü© := exists_min_norm_œÜ x
  suffices œÜ x z = 0 from ‚ü®_, isMonicOfDegree_sub_add_two z.1 z.2, by rwa [aeval_eq_œÜ]‚ü©
  by_contra! H
  set M := ‚ÄñœÜ x z‚Äñ
  have hM‚ÇÄ : 0 ‚â§ M := norm_nonneg _
  -- use that `f x t` is constant to produce an inequality that is false for `c` large enough
  suffices |2 * (‚Äñx‚Äñ ^ 2 / ‚àöM + 1)| ‚â§ 2 * ‚Äñx‚Äñ ^ 2 / ‚àöM by
    rw [abs_of_pos <| by positivity, mul_div_assoc] at this
    linarith
  refine a_bound (x := x) (c := ‚àöM) (by positivity) (fun r ‚Ü¶ ?_) (b := 0) ?_
  ¬∑ rw [‚Üê sq_le_sq‚ÇÄ (Real.sqrt_nonneg M) (norm_nonneg _), Real.sq_sqrt hM‚ÇÄ, ‚Üê norm_pow,
      Commute.sub_sq <| algebraMap_eq_smul_one (A := F) r ‚ñ∏ commute_algebraMap_right r x]
    convert h (2 * r, r ^ 2) using 4 <;> simp [two_mul, add_smul, _root_.smul_pow]
  ¬∑ nth_rewrite 2 [show ‚Äñx‚Äñ ^ 2 = ‚Äñx ^ 2 - (0 : ‚Ñù) ‚Ä¢ x + (0 : ‚Ñù) ‚Ä¢ 1‚Äñ by simp]
    rw [is_const_norm_œÜ h (norm_ne_zero_iff.mpr H) (2 * (‚Äñx‚Äñ ^ 2 / ‚àöM + 1), 0)]
    exact h (0, 0)

/-- A version of the **Gelfand-Mazur Theorem** over `‚Ñù`.

If a field `F` is a normed `‚Ñù`-algebra, then `F` is isomorphic as an `‚Ñù`-algebra
either to `‚Ñù` or to `‚ÑÇ`. -/
theorem nonempty_algEquiv_or (F : Type*) [NormedField F] [NormedAlgebra ‚Ñù F] :
    Nonempty (F ‚âÉ‚Çê[‚Ñù] ‚Ñù) ‚à® Nonempty (F ‚âÉ‚Çê[‚Ñù] ‚ÑÇ) := by
  have : Algebra.IsAlgebraic ‚Ñù F := by
    refine ‚ü®fun x ‚Ü¶ IsIntegral.isAlgebraic ?_‚ü©
    obtain ‚ü®f, hf, hfx‚ü© := exists_isMonicOfDegree_two_and_aeval_eq_zero x
    exact (hfx ‚ñ∏ isIntegral_zero).of_aeval_monic hf.monic <| hf.natDegree_eq.trans_ne two_ne_zero
  exact _root_.Real.nonempty_algEquiv_or F

-- without going via `IsIntegral` (missing API for `IsAlgebraic`?):
/-
  have : Algebra.IsAlgebraic ‚Ñù F := by
    refine ‚ü®fun x ‚Ü¶ ?_‚ü©
    obtain ‚ü®f, hf, hfx‚ü© := exists_isMonicOfDegree_two_and_aeval_eq_zero x
    refine (hfx ‚ñ∏ isAlgebraic_zero).of_aeval f ?_ ?_
    ¬∑ exact hf.natDegree_eq.trans_ne two_ne_zero
    ¬∑ rw [hf.monic.leadingCoeff]
      exact Submonoid.one_mem (nonZeroDivisors ‚Ñù)
-/

end Real

end NormedAlgebra
