/-
Copyright (c) 2025 Yi Yuan. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yi Yuan
-/
import Mathlib.Analysis.InnerProductSpace.Basic
import Mathlib.Analysis.Normed.Module.Convex
import Mathlib.Analysis.Normed.Operator.Banach
import Mathlib.Analysis.Normed.Operator.BoundedLinearMaps
import Mathlib.Analysis.NormedSpace.HahnBanach.Separation

open Metric

lemma p12 {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤] [InnerProductSpace ‚Ñù Œ±]
    [InnerProductSpace ‚Ñù Œ≤] (T : Œ± ‚ÜíL[‚Ñù] Œ≤) {Œ¥ : ‚Ñù} (h0 : Œ¥ > 0)
    (h : ‚àÄ f : Œ≤ ‚ÜíL[‚Ñù] ‚Ñù , Œ¥ * ‚Äñf‚Äñ ‚â§ ‚Äñf.comp T‚Äñ) :
    closure (T '' (ball 0 1)) ‚äá ball 0 Œ¥ := fun y hy ‚Ü¶ by
  have t1 : Convex ‚Ñù (closure (T '' (ball 0 1))) :=
    (convex_ball 0 1).is_linear_image T.isBoundedLinearMap.toIsLinearMap |> .closure
  have t3 : Balanced ‚Ñù (closure (T '' ball 0 1)) := by
    refine Balanced.closure fun _ ha _ ‚ü®_, ‚ü®_, hc, hd‚ü©, d‚ü© ‚Ü¶ ?_
    simp only at d
    rw [‚Üê d, ‚Üê hd, ‚Üê ContinuousLinearMap.map_smul]
    exact Set.mem_image_of_mem T (balanced_ball_zero.smul_mem ha hc)
  have t4 : (closure (T '' ball 0 1)).Nonempty := ‚ü®T 0, subset_closure ‚ü®0, by simp‚ü©‚ü©
  have : ‚àÄ z ‚àâ closure (T '' (ball 0 1)), z ‚àâ ball 0 Œ¥ := fun z hz ‚Ü¶ by
    obtain ‚ü®f, hf1, hf2‚ü© := RCLike.geometric_hahn_banach' t1 isClosed_closure t3 t4 z hz
    have ha : ‚àÄ a ‚àà closedBall (0 : Œ±) 1, ‚Äñf (T a)‚Äñ < 1 := fun a ha ‚Ü¶ by
      refine hf2 (T a) ((image_closure_subset_closure_image T.continuous) ?_)
      exact ‚ü®a, by simp [closure_ball (0 : Œ±) (zero_ne_one' ‚Ñù).symm, ha]‚ü©
    have : ‚Äñ(f : Œ≤ ‚ÜíL[‚Ñù] ‚Ñù).comp T‚Äñ ‚â§ 1 := by
      refine (f.comp T).opNorm_le_bound' (zero_le_one' ‚Ñù) fun x hx ‚Ü¶ ?_
      have xin : (1 / ‚Äñx‚Äñ) ‚Ä¢ x ‚àà closedBall 0 1 := by
        simp [norm_smul_of_nonneg ?_ x, hx]
      refine le_of_lt (by calc
        _ = ‚Äñf.comp T ((1 / ‚Äñx‚Äñ) ‚Ä¢ x)‚Äñ * ‚Äñx‚Äñ := by simp [field]
        _ < 1 * ‚Äñx‚Äñ := (mul_lt_mul_iff_of_pos_right (by positivity)).mpr (ha ((1 / ‚Äñx‚Äñ) ‚Ä¢ x) xin))
    have : Œ¥ < ‚Äñz‚Äñ := by calc
      _ < Œ¥ * ‚Äñf z‚Äñ :=(lt_mul_iff_one_lt_right h0).mpr hf1
      _ ‚â§ Œ¥ * (‚Äñf‚Äñ * ‚Äñz‚Äñ) := (mul_le_mul_iff_of_pos_left h0).mpr (f.le_opNorm z)
      _ ‚â§ ‚Äñ(f : Œ≤ ‚ÜíL[‚Ñù] ‚Ñù).comp T‚Äñ * ‚Äñz‚Äñ := by
        rw [‚Üê mul_assoc]
        refine mul_le_mul_of_nonneg_right (h f) (norm_nonneg z)
      _ ‚â§ 1 * ‚Äñz‚Äñ := mul_le_mul_of_nonneg_right this (norm_nonneg z)
      _ = _ := by simp
    simp [le_of_lt this]
  by_contra! nh
  exact (this y nh) hy

/-- Following [Rudin, *Functional Analysis* (Theorem 4.12 (b) => (c))][rudin1991] -/
lemma p23 {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤] [InnerProductSpace ‚Ñù Œ±]
    [InnerProductSpace ‚Ñù Œ≤] [CompleteSpace Œ±] (T : Œ± ‚ÜíL[‚Ñù] Œ≤) {Œ¥ : ‚Ñù}
    (h0 : Œ¥ > 0) (h : closure (T '' (ball 0 1)) ‚äá ball 0 Œ¥) : T '' (ball 0 1) ‚äá ball 0 Œ¥ := by
  have int_t : interior (closure (T '' ball 0 1)) ‚äá ball 0 Œ¥ :=
    (IsOpen.subset_interior_iff isOpen_ball).mpr h
  have convex_t : Convex ‚Ñù ((T '' (ball 0 1))) :=
    (convex_ball 0 1).is_linear_image T.isBoundedLinearMap.toIsLinearMap
  have : IsOpenMap T := T.isOpenMap' ‚ü®1, 0, mem_interior.mpr ‚ü®ball 0 Œ¥, by simpa, by simpa‚ü©‚ü©
  have : interior (closure (T '' ball 0 1)) = interior (T '' ball 0 1) := by
    apply convex_t.interior_closure_eq_interior_of_nonempty_interior
    use 0
    exact mem_interior.mpr ‚ü®T '' ball 0 1, subset_refl (T '' (ball 0 1)),
      this (ball 0 1) (isOpen_ball), ‚ü®0, by simp‚ü©‚ü©
  rw [this] at int_t
  exact fun _ a => interior_subset (int_t a)

lemma p34 {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤] [InnerProductSpace ‚Ñù Œ±]
    [InnerProductSpace ‚Ñù Œ≤] (T : Œ± ‚ÜíL[‚Ñù] Œ≤) {Œ¥ : ‚Ñù} (h0 : Œ¥ > 0)
    (h : T '' (ball 0 1) ‚äá ball 0 Œ¥) : (‚áëT).Surjective := fun y ‚Ü¶ by
  by_cases ch : y = 0
  ¬∑ exact ‚ü®0, by simp [ch]‚ü©
  ¬∑ obtain ‚ü®Œµ, Œµpos, hŒµ‚ü© : ‚àÉ Œµ > 0, Œµ < Œ¥ / ‚Äñy‚Äñ := exists_between (by positivity)
    obtain ‚ü®a, _, ha‚ü© : Œµ ‚Ä¢ y ‚àà T '' (ball 0 1) := by
      refine h (mem_ball_zero_iff.mpr ?_)
      rwa [norm_smul, Real.norm_eq_abs, abs_of_pos Œµpos, mul_comm,
        ‚Üê propext (lt_div_iff‚ÇÄ' (norm_pos_iff.mpr ch))]
    exact ‚ü®(1 / Œµ) ‚Ä¢ a, by simpa [ha] using inv_smul_smul‚ÇÄ (ne_of_lt Œµpos).symm y‚ü©

theorem ContinuousLinearMap.comp_le_opNorm {ùïú ùïú‚ÇÇ ùïú‚ÇÉ : Type*} {E F G : Type*}
    [SeminormedAddCommGroup E] [SeminormedAddCommGroup F] [SeminormedAddCommGroup G]
    [NontriviallyNormedField ùïú] [NontriviallyNormedField ùïú‚ÇÇ] [NontriviallyNormedField ùïú‚ÇÉ]
    [NormedSpace ùïú E] [NormedSpace ùïú‚ÇÇ F] [NormedSpace ùïú‚ÇÉ G] {œÉ‚ÇÅ‚ÇÇ : ùïú ‚Üí+* ùïú‚ÇÇ} {œÉ‚ÇÇ‚ÇÉ : ùïú‚ÇÇ ‚Üí+* ùïú‚ÇÉ}
    [RingHomIsometric œÉ‚ÇÅ‚ÇÇ] [RingHomIsometric œÉ‚ÇÇ‚ÇÉ] (f : E ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] F) (g : F ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] G) (x : E) :
    ‚Äñg (f x)‚Äñ ‚â§ ‚Äñg‚Äñ * ‚Äñf‚Äñ * ‚Äñx‚Äñ := by calc
  _ ‚â§ ‚Äñg‚Äñ * ‚Äñf x‚Äñ := g.le_opNorm (f x)
  _ ‚â§ ‚Äñg‚Äñ * (‚Äñf‚Äñ * ‚Äñx‚Äñ) := mul_le_mul_of_nonneg_left (f.le_opNorm x) (by positivity)
  _ = _ := Eq.symm (mul_assoc ‚Äñg‚Äñ ‚Äñf‚Äñ ‚Äñx‚Äñ)

lemma p41 {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤] [InnerProductSpace ‚Ñù Œ±]
    [InnerProductSpace ‚Ñù Œ≤] [CompleteSpace Œ≤] [CompleteSpace Œ±] (T : Œ± ‚ÜíL[‚Ñù] Œ≤)
    (surj : (‚áëT).Surjective) : ‚àÉ Œ¥ > 0, ‚àÄ f : Œ≤ ‚ÜíL[‚Ñù] ‚Ñù , Œ¥ * ‚Äñf‚Äñ ‚â§ ‚Äñf.comp T‚Äñ := by
  have ho : IsOpen (T '' (ball 0 1)) := T.isOpenMap surj (ball 0 1) isOpen_ball
  rw [Metric.isOpen_iff] at ho
  obtain‚ü®Œ¥, Œ¥pos, hŒ¥‚ü© : ‚àÉ Œ¥ > 0, ball 0 Œ¥ ‚äÜ T '' (ball 0 1) := ho 0 ‚ü®0, by simp‚ü©
  refine ‚ü®Œ¥, Œ¥pos, fun f ‚Ü¶ ?_‚ü©
  have := Real.sSup_smul_of_nonneg (a := Œ¥) (by positivity) ((fun x => ‚Äñf x‚Äñ) '' ball 0 1)
  rw [smul_eq_mul] at this
  rw [‚Üê (f.comp T).sSup_unit_ball_eq_norm, ‚Üê f.sSup_unit_ball_eq_norm, ‚Üê this]
  refine csSup_le_csSup ?_ (by simp) ?_
  ¬∑ use ‚Äñf‚Äñ * ‚ÄñT‚Äñ
    simp [upperBounds]
    intro a ha
    calc
    _ ‚â§ ‚Äñf‚Äñ * ‚ÄñT‚Äñ * ‚Äña‚Äñ := T.comp_le_opNorm f a
    _ ‚â§ ‚Äñf‚Äñ * ‚ÄñT‚Äñ * 1 := mul_le_mul_of_nonneg_left (Std.le_of_lt ha) (by positivity)
    _ = _ := MulOneClass.mul_one (‚Äñf‚Äñ * ‚ÄñT‚Äñ)
  ¬∑ intro _ ‚ü®_, ‚ü®b, bin, beq‚ü©, eq‚ü©
    have : Œ¥ ‚Ä¢ b ‚àà ball 0 Œ¥ := by
      simp [norm_smul, abs_of_pos Œ¥pos] at ‚ä¢ bin
      exact mul_lt_of_lt_one_right Œ¥pos bin
    obtain ‚ü®c, cin, ceq‚ü© := hŒ¥ this
    exact ‚ü®c, by simpa [‚Üê eq, cin, ceq, beq] using Or.inl (Std.le_of_lt Œ¥pos)‚ü©

lemma closedrange {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤]
    [InnerProductSpace ‚Ñù Œ±] [InnerProductSpace ‚Ñù Œ≤] [CompleteSpace Œ≤] [CompleteSpace Œ±]
    (T : Œ± ‚ÜíL[‚Ñù] Œ≤) : List.TFAE [
    ‚àÉ Œ¥ > 0, ‚àÄ f : Œ≤ ‚ÜíL[‚Ñù] ‚Ñù , Œ¥ * ‚Äñf‚Äñ ‚â§ ‚Äñf.comp T‚Äñ,
    ‚àÉ Œ¥ > 0, closure (T '' (ball 0 1)) ‚äá ball 0 Œ¥,
    ‚àÉ Œ¥ > 0, T '' (ball 0 1) ‚äá ball 0 Œ¥,
    (‚áëT).Surjective] := by
  tfae_have 1 ‚Üí 2 := fun ‚ü®Œ¥, Œ¥pos, h‚ü© ‚Ü¶ ‚ü®Œ¥, Œ¥pos, p12 T Œ¥pos h‚ü©
  tfae_have 2 ‚Üí 3 := fun ‚ü®Œ¥, Œ¥pos, h‚ü© ‚Ü¶ ‚ü®Œ¥, Œ¥pos, p23 T Œ¥pos h‚ü©
  tfae_have 3 ‚Üí 4 := fun ‚ü®Œ¥, Œ¥pos, h‚ü© ‚Ü¶ p34 T Œ¥pos h
  tfae_have 4 ‚Üí 1 := p41 T
  tfae_finish
