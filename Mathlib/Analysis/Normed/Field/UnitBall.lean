/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov, Heather Macbeth
-/
import Mathlib.Analysis.Normed.Field.Basic
import Mathlib.Analysis.Normed.Group.BallSphere

#align_import analysis.normed.field.unit_ball from "leanprover-community/mathlib"@"3339976e2bcae9f1c81e620836d1eb736e3c4700"

/-!
# Algebraic structures on unit balls and spheres

In this file we define algebraic structures (`Semigroup`, `CommSemigroup`, `Monoid`, `CommMonoid`,
`Group`, `CommGroup`) on `Metric.ball (0 : ùïú) 1`, `Metric.closedBall (0 : ùïú) 1`, and
`Metric.sphere (0 : ùïú) 1`. In each case we use the weakest possible typeclass assumption on `ùïú`,
from `NonUnitalSeminormedRing` to `NormedField`.
-/


open Set Metric

variable {ùïú : Type*}

/-- Unit ball in a non unital semi normed ring as a bundled `Subsemigroup`. -/
def Subsemigroup.unitBall (ùïú : Type*) [NonUnitalSeminormedRing ùïú] : Subsemigroup ùïú
    where
  carrier := ball (0 : ùïú) 1
  mul_mem' hx hy := by
    rw [mem_ball_zero_iff] at *
    exact (norm_mul_le _ _).trans_lt (mul_lt_one_of_nonneg_of_lt_one_left (norm_nonneg _) hx hy.le)
#align subsemigroup.unit_ball Subsemigroup.unitBall

instance Metric.unitBall.semigroup [NonUnitalSeminormedRing ùïú] : Semigroup (ball (0 : ùïú) 1) :=
  MulMemClass.toSemigroup (Subsemigroup.unitBall ùïú)

instance Metric.unitBall.continuousMul [NonUnitalSeminormedRing ùïú] :
    ContinuousMul (ball (0 : ùïú) 1) :=
  (Subsemigroup.unitBall ùïú).continuousMul

instance Metric.unitBall.commSemigroup [SeminormedCommRing ùïú] : CommSemigroup (ball (0 : ùïú) 1) :=
  MulMemClass.toCommSemigroup (Subsemigroup.unitBall ùïú)

instance Metric.unitBall.hasDistribNeg [NonUnitalSeminormedRing ùïú] :
    HasDistribNeg (ball (0 : ùïú) 1) :=
  Subtype.coe_injective.hasDistribNeg ((‚Üë) : ball (0 : ùïú) 1 ‚Üí ùïú) (fun _ => rfl) fun _ _ => rfl

@[simp, norm_cast]
theorem coe_mul_unitBall [NonUnitalSeminormedRing ùïú] (x y : ball (0 : ùïú) 1) :
    ‚Üë(x * y) = (x * y : ùïú) :=
  rfl
#align coe_mul_unit_ball coe_mul_unitBall

/-- Closed unit ball in a non unital semi normed ring as a bundled `Subsemigroup`. -/
def Subsemigroup.unitClosedBall (ùïú : Type*) [NonUnitalSeminormedRing ùïú] : Subsemigroup ùïú
    where
  carrier := closedBall 0 1
  mul_mem' hx hy := by
    rw [mem_closedBall_zero_iff] at *
    exact (norm_mul_le _ _).trans (mul_le_one hx (norm_nonneg _) hy)
#align subsemigroup.unit_closed_ball Subsemigroup.unitClosedBall

instance Metric.unitClosedBall.semigroup [NonUnitalSeminormedRing ùïú] :
    Semigroup (closedBall (0 : ùïú) 1) :=
  MulMemClass.toSemigroup (Subsemigroup.unitClosedBall ùïú)

instance Metric.unitClosedBall.hasDistribNeg [NonUnitalSeminormedRing ùïú] :
    HasDistribNeg (closedBall (0 : ùïú) 1) :=
  Subtype.coe_injective.hasDistribNeg ((‚Üë) : closedBall (0 : ùïú) 1 ‚Üí ùïú) (fun _ => rfl) fun _ _ => rfl

instance Metric.unitClosedBall.continuousMul [NonUnitalSeminormedRing ùïú] :
    ContinuousMul (closedBall (0 : ùïú) 1) :=
  (Subsemigroup.unitClosedBall ùïú).continuousMul

@[simp, norm_cast]
theorem coe_mul_unitClosedBall [NonUnitalSeminormedRing ùïú] (x y : closedBall (0 : ùïú) 1) :
    ‚Üë(x * y) = (x * y : ùïú) :=
  rfl
#align coe_mul_unit_closed_ball coe_mul_unitClosedBall

/-- Closed unit ball in a semi normed ring as a bundled `Submonoid`. -/
def Submonoid.unitClosedBall (ùïú : Type*) [SeminormedRing ùïú] [NormOneClass ùïú] : Submonoid ùïú :=
  { Subsemigroup.unitClosedBall ùïú with
    carrier := closedBall 0 1
    one_mem' := mem_closedBall_zero_iff.2 norm_one.le }
#align submonoid.unit_closed_ball Submonoid.unitClosedBall

instance Metric.unitClosedBall.monoid [SeminormedRing ùïú] [NormOneClass ùïú] :
    Monoid (closedBall (0 : ùïú) 1) :=
  SubmonoidClass.toMonoid (Submonoid.unitClosedBall ùïú)

instance Metric.unitClosedBall.commMonoid [SeminormedCommRing ùïú] [NormOneClass ùïú] :
    CommMonoid (closedBall (0 : ùïú) 1) :=
  SubmonoidClass.toCommMonoid (Submonoid.unitClosedBall ùïú)

@[simp, norm_cast]
theorem coe_one_unitClosedBall [SeminormedRing ùïú] [NormOneClass ùïú] :
    ((1 : closedBall (0 : ùïú) 1) : ùïú) = 1 :=
  rfl
#align coe_one_unit_closed_ball coe_one_unitClosedBall

@[simp, norm_cast]
theorem coe_pow_unitClosedBall [SeminormedRing ùïú] [NormOneClass ùïú] (x : closedBall (0 : ùïú) 1)
    (n : ‚Ñï) : ‚Üë(x ^ n) = (x : ùïú) ^ n :=
  rfl
#align coe_pow_unit_closed_ball coe_pow_unitClosedBall

/-- Unit sphere in a normed division ring as a bundled `Submonoid`. -/
def Submonoid.unitSphere (ùïú : Type*) [NormedDivisionRing ùïú] : Submonoid ùïú
    where
  carrier := sphere (0 : ùïú) 1
  mul_mem' hx hy := by
    rw [mem_sphere_zero_iff_norm] at *
    simp [*]
  one_mem' := mem_sphere_zero_iff_norm.2 norm_one
#align submonoid.unit_sphere Submonoid.unitSphere

instance Metric.unitSphere.inv [NormedDivisionRing ùïú] : Inv (sphere (0 : ùïú) 1) :=
  ‚ü®fun x =>
    ‚ü®x‚Åª¬π,
      mem_sphere_zero_iff_norm.2 <| by
        rw [norm_inv, mem_sphere_zero_iff_norm.1 x.coe_prop, inv_one]‚ü©‚ü©

@[simp, norm_cast]
theorem coe_inv_unitSphere [NormedDivisionRing ùïú] (x : sphere (0 : ùïú) 1) : ‚Üëx‚Åª¬π = (x‚Åª¬π : ùïú) :=
  rfl
#align coe_inv_unit_sphere coe_inv_unitSphere

instance Metric.unitSphere.div [NormedDivisionRing ùïú] : Div (sphere (0 : ùïú) 1) :=
  ‚ü®fun x y =>
    ‚ü®x / y,
      mem_sphere_zero_iff_norm.2 <| by
        rw [norm_div, mem_sphere_zero_iff_norm.1 x.coe_prop, mem_sphere_zero_iff_norm.1 y.coe_prop,
          div_one]‚ü©‚ü©

@[simp, norm_cast]
theorem coe_div_unitSphere [NormedDivisionRing ùïú] (x y : sphere (0 : ùïú) 1) :
    ‚Üë(x / y) = (x / y : ùïú) :=
  rfl
#align coe_div_unit_sphere coe_div_unitSphere

instance Metric.unitSphere.pow [NormedDivisionRing ùïú] : Pow (sphere (0 : ùïú) 1) ‚Ñ§ :=
  ‚ü®fun x n =>
    ‚ü®(x : ùïú) ^ n, by
      rw [mem_sphere_zero_iff_norm, norm_zpow, mem_sphere_zero_iff_norm.1 x.coe_prop, one_zpow]‚ü©‚ü©

@[simp, norm_cast]
theorem coe_zpow_unitSphere [NormedDivisionRing ùïú] (x : sphere (0 : ùïú) 1) (n : ‚Ñ§) :
    ‚Üë(x ^ n) = (x : ùïú) ^ n :=
  rfl
#align coe_zpow_unit_sphere coe_zpow_unitSphere

instance Metric.unitSphere.monoid [NormedDivisionRing ùïú] : Monoid (sphere (0 : ùïú) 1) :=
  SubmonoidClass.toMonoid (Submonoid.unitSphere ùïú)

@[simp, norm_cast]
theorem coe_one_unitSphere [NormedDivisionRing ùïú] : ((1 : sphere (0 : ùïú) 1) : ùïú) = 1 :=
  rfl
#align coe_one_unit_sphere coe_one_unitSphere

@[simp, norm_cast]
theorem coe_mul_unitSphere [NormedDivisionRing ùïú] (x y : sphere (0 : ùïú) 1) :
    ‚Üë(x * y) = (x * y : ùïú) :=
  rfl
#align coe_mul_unit_sphere coe_mul_unitSphere

@[simp, norm_cast]
theorem coe_pow_unitSphere [NormedDivisionRing ùïú] (x : sphere (0 : ùïú) 1) (n : ‚Ñï) :
    ‚Üë(x ^ n) = (x : ùïú) ^ n :=
  rfl
#align coe_pow_unit_sphere coe_pow_unitSphere

/-- Monoid homomorphism from the unit sphere to the group of units. -/
def unitSphereToUnits (ùïú : Type*) [NormedDivisionRing ùïú] : sphere (0 : ùïú) 1 ‚Üí* Units ùïú :=
  Units.liftRight (Submonoid.unitSphere ùïú).subtype
    (fun x => Units.mk0 x <| ne_zero_of_mem_unit_sphere _) fun _x => rfl
#align unit_sphere_to_units unitSphereToUnits

@[simp]
theorem unitSphereToUnits_apply_coe [NormedDivisionRing ùïú] (x : sphere (0 : ùïú) 1) :
    (unitSphereToUnits ùïú x : ùïú) = x :=
  rfl
#align unit_sphere_to_units_apply_coe unitSphereToUnits_apply_coe

theorem unitSphereToUnits_injective [NormedDivisionRing ùïú] :
    Function.Injective (unitSphereToUnits ùïú) := fun x y h =>
  Subtype.eq <| by convert congr_arg Units.val h
#align unit_sphere_to_units_injective unitSphereToUnits_injective

instance Metric.sphere.group [NormedDivisionRing ùïú] : Group (sphere (0 : ùïú) 1) :=
  unitSphereToUnits_injective.group (unitSphereToUnits ùïú) (Units.ext rfl)
    (fun _x _y => Units.ext rfl)
    (fun _x => Units.ext rfl) (fun _x _y => Units.ext <| div_eq_mul_inv _ _)
    (fun x n => Units.ext (Units.val_pow_eq_pow_val (unitSphereToUnits ùïú x) n).symm) fun x n =>
    Units.ext (Units.val_zpow_eq_zpow_val (unitSphereToUnits ùïú x) n).symm

instance Metric.sphere.hasDistribNeg [NormedDivisionRing ùïú] : HasDistribNeg (sphere (0 : ùïú) 1) :=
  Subtype.coe_injective.hasDistribNeg ((‚Üë) : sphere (0 : ùïú) 1 ‚Üí ùïú) (fun _ => rfl) fun _ _ => rfl

instance Metric.sphere.topologicalGroup [NormedDivisionRing ùïú] : TopologicalGroup (sphere (0 : ùïú) 1)
    where
  toContinuousMul := (Submonoid.unitSphere ùïú).continuousMul
  continuous_inv := (continuous_subtype_val.inv‚ÇÄ ne_zero_of_mem_unit_sphere).subtype_mk _

instance Metric.sphere.commGroup [NormedField ùïú] : CommGroup (sphere (0 : ùïú) 1) :=
  { Metric.sphere.group,
    Subtype.coe_injective.commMonoid (‚Üë) rfl (fun _ _ => rfl) (fun _ _ => rfl) with }
  -- porting note: Lean couldn't see past the type synonym into the subtype.
