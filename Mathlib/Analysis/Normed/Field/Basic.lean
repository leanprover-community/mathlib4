/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import Mathlib.Algebra.Algebra.NonUnitalSubalgebra
import Mathlib.Algebra.Algebra.Subalgebra.Basic
import Mathlib.Algebra.Group.AddChar
import Mathlib.Algebra.Order.Ring.Finset
import Mathlib.Analysis.Normed.Group.Bounded
import Mathlib.Analysis.Normed.Group.Constructions
import Mathlib.Analysis.Normed.Group.Rat
import Mathlib.Analysis.Normed.Group.Submodule
import Mathlib.Analysis.Normed.Group.Uniform
import Mathlib.GroupTheory.OrderOfElement
import Mathlib.Topology.Instances.NNReal
import Mathlib.Topology.MetricSpace.DilationEquiv

/-!
# Normed fields

In this file we define (semi)normed rings and fields. We also prove some theorems about these
definitions.
-/

-- Guard against import creep.
assert_not_exists RestrictScalars

variable {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œπ : Type*}

open Filter Metric Bornology
open scoped Topology NNReal ENNReal uniformity Pointwise

/-- A non-unital seminormed ring is a not-necessarily-unital ring
endowed with a seminorm which satisfies the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class NonUnitalSeminormedRing (Œ± : Type*) extends Norm Œ±, NonUnitalRing Œ±,
  PseudoMetricSpace Œ± where
  /-- The distance is induced by the norm. -/
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  /-- The norm is submultiplicative. -/
  norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b

/-- A seminormed ring is a ring endowed with a seminorm which satisfies the inequality
`‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class SeminormedRing (Œ± : Type*) extends Norm Œ±, Ring Œ±, PseudoMetricSpace Œ± where
  /-- The distance is induced by the norm. -/
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  /-- The norm is submultiplicative. -/
  norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b

-- see Note [lower instance priority]
/-- A seminormed ring is a non-unital seminormed ring. -/
instance (priority := 100) SeminormedRing.toNonUnitalSeminormedRing [Œ≤ : SeminormedRing Œ±] :
    NonUnitalSeminormedRing Œ± :=
  { Œ≤ with }

/-- A non-unital normed ring is a not-necessarily-unital ring
endowed with a norm which satisfies the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class NonUnitalNormedRing (Œ± : Type*) extends Norm Œ±, NonUnitalRing Œ±, MetricSpace Œ± where
  /-- The distance is induced by the norm. -/
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  /-- The norm is submultiplicative. -/
  norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b

-- see Note [lower instance priority]
/-- A non-unital normed ring is a non-unital seminormed ring. -/
instance (priority := 100) NonUnitalNormedRing.toNonUnitalSeminormedRing
    [Œ≤ : NonUnitalNormedRing Œ±] : NonUnitalSeminormedRing Œ± :=
  { Œ≤ with }

/-- A normed ring is a ring endowed with a norm which satisfies the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class NormedRing (Œ± : Type*) extends Norm Œ±, Ring Œ±, MetricSpace Œ± where
  /-- The distance is induced by the norm. -/
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  /-- The norm is submultiplicative. -/
  norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b

/-- A normed division ring is a division ring endowed with a seminorm which satisfies the equality
`‚Äñx y‚Äñ = ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class NormedDivisionRing (Œ± : Type*) extends Norm Œ±, DivisionRing Œ±, MetricSpace Œ± where
  /-- The distance is induced by the norm. -/
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  /-- The norm is multiplicative. -/
  norm_mul' : ‚àÄ a b, norm (a * b) = norm a * norm b

-- see Note [lower instance priority]
/-- A normed division ring is a normed ring. -/
instance (priority := 100) NormedDivisionRing.toNormedRing [Œ≤ : NormedDivisionRing Œ±] :
    NormedRing Œ± :=
  { Œ≤ with norm_mul := fun a b => (NormedDivisionRing.norm_mul' a b).le }

-- see Note [lower instance priority]
/-- A normed ring is a seminormed ring. -/
instance (priority := 100) NormedRing.toSeminormedRing [Œ≤ : NormedRing Œ±] : SeminormedRing Œ± :=
  { Œ≤ with }

-- see Note [lower instance priority]
/-- A normed ring is a non-unital normed ring. -/
instance (priority := 100) NormedRing.toNonUnitalNormedRing [Œ≤ : NormedRing Œ±] :
    NonUnitalNormedRing Œ± :=
  { Œ≤ with }

/-- A non-unital seminormed commutative ring is a non-unital commutative ring endowed with a
seminorm which satisfies the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class NonUnitalSeminormedCommRing (Œ± : Type*) extends NonUnitalSeminormedRing Œ± where
  /-- Multiplication is commutative. -/
  mul_comm : ‚àÄ x y : Œ±, x * y = y * x

/-- A non-unital normed commutative ring is a non-unital commutative ring endowed with a
norm which satisfies the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class NonUnitalNormedCommRing (Œ± : Type*) extends NonUnitalNormedRing Œ± where
  /-- Multiplication is commutative. -/
  mul_comm : ‚àÄ x y : Œ±, x * y = y * x

-- see Note [lower instance priority]
/-- A non-unital normed commutative ring is a non-unital seminormed commutative ring. -/
instance (priority := 100) NonUnitalNormedCommRing.toNonUnitalSeminormedCommRing
    [Œ≤ : NonUnitalNormedCommRing Œ±] : NonUnitalSeminormedCommRing Œ± :=
  { Œ≤ with }

/-- A seminormed commutative ring is a commutative ring endowed with a seminorm which satisfies
the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class SeminormedCommRing (Œ± : Type*) extends SeminormedRing Œ± where
  /-- Multiplication is commutative. -/
  mul_comm : ‚àÄ x y : Œ±, x * y = y * x

/-- A normed commutative ring is a commutative ring endowed with a norm which satisfies
the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class NormedCommRing (Œ± : Type*) extends NormedRing Œ± where
  /-- Multiplication is commutative. -/
  mul_comm : ‚àÄ x y : Œ±, x * y = y * x

-- see Note [lower instance priority]
/-- A seminormed commutative ring is a non-unital seminormed commutative ring. -/
instance (priority := 100) SeminormedCommRing.toNonUnitalSeminormedCommRing
    [Œ≤ : SeminormedCommRing Œ±] : NonUnitalSeminormedCommRing Œ± :=
  { Œ≤ with }

-- see Note [lower instance priority]
/-- A normed commutative ring is a non-unital normed commutative ring. -/
instance (priority := 100) NormedCommRing.toNonUnitalNormedCommRing
    [Œ≤ : NormedCommRing Œ±] : NonUnitalNormedCommRing Œ± :=
  { Œ≤ with }

-- see Note [lower instance priority]
/-- A normed commutative ring is a seminormed commutative ring. -/
instance (priority := 100) NormedCommRing.toSeminormedCommRing [Œ≤ : NormedCommRing Œ±] :
    SeminormedCommRing Œ± :=
  { Œ≤ with }

instance PUnit.normedCommRing : NormedCommRing PUnit :=
  { PUnit.normedAddCommGroup, PUnit.commRing with
    norm_mul := fun _ _ => by simp }

/-- A mixin class with the axiom `‚Äñ1‚Äñ = 1`. Many `NormedRing`s and all `NormedField`s satisfy this
axiom. -/
class NormOneClass (Œ± : Type*) [Norm Œ±] [One Œ±] : Prop where
  /-- The norm of the multiplicative identity is 1. -/
  norm_one : ‚Äñ(1 : Œ±)‚Äñ = 1

export NormOneClass (norm_one)

attribute [simp] norm_one

@[simp]
theorem nnnorm_one [SeminormedAddCommGroup Œ±] [One Œ±] [NormOneClass Œ±] : ‚Äñ(1 : Œ±)‚Äñ‚Çä = 1 :=
  NNReal.eq norm_one

theorem NormOneClass.nontrivial (Œ± : Type*) [SeminormedAddCommGroup Œ±] [One Œ±] [NormOneClass Œ±] :
    Nontrivial Œ± :=
  nontrivial_of_ne 0 1 <| ne_of_apply_ne norm <| by simp

-- see Note [lower instance priority]
instance (priority := 100) NonUnitalSeminormedCommRing.toNonUnitalCommRing
    [Œ≤ : NonUnitalSeminormedCommRing Œ±] : NonUnitalCommRing Œ± :=
  { Œ≤ with }

-- see Note [lower instance priority]
instance (priority := 100) SeminormedCommRing.toCommRing [Œ≤ : SeminormedCommRing Œ±] : CommRing Œ± :=
  { Œ≤ with }

-- see Note [lower instance priority]
instance (priority := 100) NonUnitalNormedRing.toNormedAddCommGroup [Œ≤ : NonUnitalNormedRing Œ±] :
    NormedAddCommGroup Œ± :=
  { Œ≤ with }

-- see Note [lower instance priority]
instance (priority := 100) NonUnitalSeminormedRing.toSeminormedAddCommGroup
    [NonUnitalSeminormedRing Œ±] : SeminormedAddCommGroup Œ± :=
  { ‚ÄπNonUnitalSeminormedRing Œ±‚Ä∫ with }

instance ULift.normOneClass [SeminormedAddCommGroup Œ±] [One Œ±] [NormOneClass Œ±] :
    NormOneClass (ULift Œ±) :=
  ‚ü®by simp [ULift.norm_def]‚ü©

instance Prod.normOneClass [SeminormedAddCommGroup Œ±] [One Œ±] [NormOneClass Œ±]
    [SeminormedAddCommGroup Œ≤] [One Œ≤] [NormOneClass Œ≤] : NormOneClass (Œ± √ó Œ≤) :=
  ‚ü®by simp [Prod.norm_def]‚ü©

instance Pi.normOneClass {Œπ : Type*} {Œ± : Œπ ‚Üí Type*} [Nonempty Œπ] [Fintype Œπ]
    [‚àÄ i, SeminormedAddCommGroup (Œ± i)] [‚àÄ i, One (Œ± i)] [‚àÄ i, NormOneClass (Œ± i)] :
    NormOneClass (‚àÄ i, Œ± i) :=
  ‚ü®by simpa [Pi.norm_def] using Finset.sup_const Finset.univ_nonempty 1‚ü©

instance MulOpposite.normOneClass [SeminormedAddCommGroup Œ±] [One Œ±] [NormOneClass Œ±] :
    NormOneClass Œ±·µê·µí·µñ :=
  ‚ü®@norm_one Œ± _ _ _‚ü©

section NonUnitalSeminormedRing

variable [NonUnitalSeminormedRing Œ±]

theorem norm_mul_le (a b : Œ±) : ‚Äña * b‚Äñ ‚â§ ‚Äña‚Äñ * ‚Äñb‚Äñ :=
  NonUnitalSeminormedRing.norm_mul _ _

theorem nnnorm_mul_le (a b : Œ±) : ‚Äña * b‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä * ‚Äñb‚Äñ‚Çä := by
  simpa only [‚Üê norm_toNNReal, ‚Üê Real.toNNReal_mul (norm_nonneg _)] using
    Real.toNNReal_mono (norm_mul_le _ _)

theorem one_le_norm_one (Œ≤) [NormedRing Œ≤] [Nontrivial Œ≤] : 1 ‚â§ ‚Äñ(1 : Œ≤)‚Äñ :=
  (le_mul_iff_one_le_left <| norm_pos_iff.mpr (one_ne_zero : (1 : Œ≤) ‚â† 0)).mp
    (by simpa only [mul_one] using norm_mul_le (1 : Œ≤) 1)

theorem one_le_nnnorm_one (Œ≤) [NormedRing Œ≤] [Nontrivial Œ≤] : 1 ‚â§ ‚Äñ(1 : Œ≤)‚Äñ‚Çä :=
  one_le_norm_one Œ≤

theorem Filter.Tendsto.zero_mul_isBoundedUnder_le {f g : Œπ ‚Üí Œ±} {l : Filter Œπ}
    (hf : Tendsto f l (ùìù 0)) (hg : IsBoundedUnder (¬∑ ‚â§ ¬∑) l ((‚Äñ¬∑‚Äñ) ‚àò g)) :
    Tendsto (fun x => f x * g x) l (ùìù 0) :=
  hf.op_zero_isBoundedUnder_le hg (¬∑ * ¬∑) norm_mul_le

theorem Filter.isBoundedUnder_le_mul_tendsto_zero {f g : Œπ ‚Üí Œ±} {l : Filter Œπ}
    (hf : IsBoundedUnder (¬∑ ‚â§ ¬∑) l (norm ‚àò f)) (hg : Tendsto g l (ùìù 0)) :
    Tendsto (fun x => f x * g x) l (ùìù 0) :=
  hg.op_zero_isBoundedUnder_le hf (flip (¬∑ * ¬∑)) fun x y =>
    (norm_mul_le y x).trans_eq (mul_comm _ _)

/-- In a seminormed ring, the left-multiplication `AddMonoidHom` is bounded. -/
theorem mulLeft_bound (x : Œ±) : ‚àÄ y : Œ±, ‚ÄñAddMonoidHom.mulLeft x y‚Äñ ‚â§ ‚Äñx‚Äñ * ‚Äñy‚Äñ :=
  norm_mul_le x

/-- In a seminormed ring, the right-multiplication `AddMonoidHom` is bounded. -/
theorem mulRight_bound (x : Œ±) : ‚àÄ y : Œ±, ‚ÄñAddMonoidHom.mulRight x y‚Äñ ‚â§ ‚Äñx‚Äñ * ‚Äñy‚Äñ := fun y => by
  rw [mul_comm]
  exact norm_mul_le y x

/-- A non-unital subalgebra of a non-unital seminormed ring is also a non-unital seminormed ring,
with the restriction of the norm. -/
instance NonUnitalSubalgebra.nonUnitalSeminormedRing {ùïú : Type*} [CommRing ùïú] {E : Type*}
    [NonUnitalSeminormedRing E] [Module ùïú E] (s : NonUnitalSubalgebra ùïú E) :
    NonUnitalSeminormedRing s :=
  { s.toSubmodule.seminormedAddCommGroup, s.toNonUnitalRing with
    norm_mul := fun a b => norm_mul_le a.1 b.1 }

/-- A non-unital subalgebra of a non-unital seminormed ring is also a non-unital seminormed ring,
with the restriction of the norm. -/
-- necessary to require `SMulMemClass S ùïú E` so that `ùïú` can be determined as an `outParam`
@[nolint unusedArguments]
instance (priority := 75) NonUnitalSubalgebraClass.nonUnitalSeminormedRing {S ùïú E : Type*}
    [CommRing ùïú] [NonUnitalSeminormedRing E] [Module ùïú E] [SetLike S E] [NonUnitalSubringClass S E]
    [SMulMemClass S ùïú E] (s : S) :
    NonUnitalSeminormedRing s :=
  { AddSubgroupClass.seminormedAddCommGroup s, NonUnitalSubringClass.toNonUnitalRing s with
    norm_mul := fun a b => norm_mul_le a.1 b.1 }

/-- A non-unital subalgebra of a non-unital normed ring is also a non-unital normed ring, with the
restriction of the norm. -/
instance NonUnitalSubalgebra.nonUnitalNormedRing {ùïú : Type*} [CommRing ùïú] {E : Type*}
    [NonUnitalNormedRing E] [Module ùïú E] (s : NonUnitalSubalgebra ùïú E) : NonUnitalNormedRing s :=
  { s.nonUnitalSeminormedRing with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }

/-- A non-unital subalgebra of a non-unital normed ring is also a non-unital normed ring,
with the restriction of the norm. -/
instance (priority := 75) NonUnitalSubalgebraClass.nonUnitalNormedRing {S ùïú E : Type*}
    [CommRing ùïú] [NonUnitalNormedRing E] [Module ùïú E] [SetLike S E] [NonUnitalSubringClass S E]
    [SMulMemClass S ùïú E] (s : S) :
    NonUnitalNormedRing s :=
  { nonUnitalSeminormedRing s with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }

instance ULift.nonUnitalSeminormedRing : NonUnitalSeminormedRing (ULift Œ±) :=
  { ULift.seminormedAddCommGroup, ULift.nonUnitalRing with
    norm_mul := fun x y => (norm_mul_le x.down y.down : _) }

/-- Non-unital seminormed ring structure on the product of two non-unital seminormed rings,
  using the sup norm. -/
instance Prod.nonUnitalSeminormedRing [NonUnitalSeminormedRing Œ≤] :
    NonUnitalSeminormedRing (Œ± √ó Œ≤) :=
  { seminormedAddCommGroup, instNonUnitalRing with
    norm_mul := fun x y =>
      calc
        ‚Äñx * y‚Äñ = ‚Äñ(x.1 * y.1, x.2 * y.2)‚Äñ := rfl
        _ = max ‚Äñx.1 * y.1‚Äñ ‚Äñx.2 * y.2‚Äñ := rfl
        _ ‚â§ max (‚Äñx.1‚Äñ * ‚Äñy.1‚Äñ) (‚Äñx.2‚Äñ * ‚Äñy.2‚Äñ) :=
          (max_le_max (norm_mul_le x.1 y.1) (norm_mul_le x.2 y.2))
        _ = max (‚Äñx.1‚Äñ * ‚Äñy.1‚Äñ) (‚Äñy.2‚Äñ * ‚Äñx.2‚Äñ) := by simp [mul_comm]
        _ ‚â§ max ‚Äñx.1‚Äñ ‚Äñx.2‚Äñ * max ‚Äñy.2‚Äñ ‚Äñy.1‚Äñ := by
          apply max_mul_mul_le_max_mul_max <;> simp [norm_nonneg]
        _ = max ‚Äñx.1‚Äñ ‚Äñx.2‚Äñ * max ‚Äñy.1‚Äñ ‚Äñy.2‚Äñ := by simp [max_comm]
        _ = ‚Äñx‚Äñ * ‚Äñy‚Äñ := rfl
         }

/-- Non-unital seminormed ring structure on the product of finitely many non-unital seminormed
rings, using the sup norm. -/
instance Pi.nonUnitalSeminormedRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ]
    [‚àÄ i, NonUnitalSeminormedRing (œÄ i)] : NonUnitalSeminormedRing (‚àÄ i, œÄ i) :=
  { Pi.seminormedAddCommGroup, Pi.nonUnitalRing with
    norm_mul := fun x y =>
      NNReal.coe_mono <|
        calc
          (Finset.univ.sup fun i => ‚Äñx i * y i‚Äñ‚Çä) ‚â§
              Finset.univ.sup ((fun i => ‚Äñx i‚Äñ‚Çä) * fun i => ‚Äñy i‚Äñ‚Çä) :=
            Finset.sup_mono_fun fun _ _ => norm_mul_le _ _
          _ ‚â§ (Finset.univ.sup fun i => ‚Äñx i‚Äñ‚Çä) * Finset.univ.sup fun i => ‚Äñy i‚Äñ‚Çä :=
            Finset.sup_mul_le_mul_sup_of_nonneg _ (fun _ _ => zero_le _) fun _ _ => zero_le _
           }

instance MulOpposite.instNonUnitalSeminormedRing : NonUnitalSeminormedRing Œ±·µê·µí·µñ where
  __ := instNonUnitalRing
  __ := instSeminormedAddCommGroup
  norm_mul := MulOpposite.rec' fun x ‚Ü¶ MulOpposite.rec' fun y ‚Ü¶
    (norm_mul_le y x).trans_eq (mul_comm _ _)

end NonUnitalSeminormedRing

section SeminormedRing

variable [SeminormedRing Œ±] {a b c : Œ±}

/-- A subalgebra of a seminormed ring is also a seminormed ring, with the restriction of the
norm. -/
instance Subalgebra.seminormedRing {ùïú : Type*} [CommRing ùïú] {E : Type*} [SeminormedRing E]
    [Algebra ùïú E] (s : Subalgebra ùïú E) : SeminormedRing s :=
  { s.toSubmodule.seminormedAddCommGroup, s.toRing with
    norm_mul := fun a b => norm_mul_le a.1 b.1 }

/-- A subalgebra of a seminormed ring is also a seminormed ring, with the restriction of the
norm. -/
-- necessary to require `SMulMemClass S ùïú E` so that `ùïú` can be determined as an `outParam`
@[nolint unusedArguments]
instance (priority := 75) SubalgebraClass.seminormedRing {S ùïú E : Type*} [CommRing ùïú]
    [SeminormedRing E] [Algebra ùïú E] [SetLike S E] [SubringClass S E] [SMulMemClass S ùïú E]
    (s : S) : SeminormedRing s :=
  { AddSubgroupClass.seminormedAddCommGroup s, SubringClass.toRing s with
    norm_mul := fun a b => norm_mul_le a.1 b.1 }

/-- A subalgebra of a normed ring is also a normed ring, with the restriction of the norm. -/
instance Subalgebra.normedRing {ùïú : Type*} [CommRing ùïú] {E : Type*} [NormedRing E]
    [Algebra ùïú E] (s : Subalgebra ùïú E) : NormedRing s :=
  { s.seminormedRing with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }

/-- A subalgebra of a normed ring is also a normed ring, with the restriction of the
norm. -/
instance (priority := 75) SubalgebraClass.normedRing {S ùïú E : Type*} [CommRing ùïú]
    [NormedRing E] [Algebra ùïú E] [SetLike S E] [SubringClass S E] [SMulMemClass S ùïú E]
    (s : S) : NormedRing s :=
  { seminormedRing s with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }

theorem Nat.norm_cast_le : ‚àÄ n : ‚Ñï, ‚Äñ(n : Œ±)‚Äñ ‚â§ n * ‚Äñ(1 : Œ±)‚Äñ
  | 0 => by simp
  | n + 1 => by
    rw [n.cast_succ, n.cast_succ, add_mul, one_mul]
    exact norm_add_le_of_le (Nat.norm_cast_le n) le_rfl

theorem List.norm_prod_le' : ‚àÄ {l : List Œ±}, l ‚â† [] ‚Üí ‚Äñl.prod‚Äñ ‚â§ (l.map norm).prod
  | [], h => (h rfl).elim
  | [a], _ => by simp
  | a::b::l, _ => by
    rw [List.map_cons, List.prod_cons, @List.prod_cons _ _ _ ‚Äña‚Äñ]
    refine le_trans (norm_mul_le _ _) (mul_le_mul_of_nonneg_left ?_ (norm_nonneg _))
    exact List.norm_prod_le' (List.cons_ne_nil b l)

theorem List.nnnorm_prod_le' {l : List Œ±} (hl : l ‚â† []) : ‚Äñl.prod‚Äñ‚Çä ‚â§ (l.map nnnorm).prod :=
  (List.norm_prod_le' hl).trans_eq <| by simp [NNReal.coe_list_prod, List.map_map]

theorem List.norm_prod_le [NormOneClass Œ±] : ‚àÄ l : List Œ±, ‚Äñl.prod‚Äñ ‚â§ (l.map norm).prod
  | [] => by simp
  | a::l => List.norm_prod_le' (List.cons_ne_nil a l)

theorem List.nnnorm_prod_le [NormOneClass Œ±] (l : List Œ±) : ‚Äñl.prod‚Äñ‚Çä ‚â§ (l.map nnnorm).prod :=
  l.norm_prod_le.trans_eq <| by simp [NNReal.coe_list_prod, List.map_map]

theorem Finset.norm_prod_le' {Œ± : Type*} [NormedCommRing Œ±] (s : Finset Œπ) (hs : s.Nonempty)
    (f : Œπ ‚Üí Œ±) : ‚Äñ‚àè i ‚àà s, f i‚Äñ ‚â§ ‚àè i ‚àà s, ‚Äñf i‚Äñ := by
  rcases s with ‚ü®‚ü®l‚ü©, hl‚ü©
  have : l.map f ‚â† [] := by simpa using hs
  simpa using List.norm_prod_le' this

theorem Finset.nnnorm_prod_le' {Œ± : Type*} [NormedCommRing Œ±] (s : Finset Œπ) (hs : s.Nonempty)
    (f : Œπ ‚Üí Œ±) : ‚Äñ‚àè i ‚àà s, f i‚Äñ‚Çä ‚â§ ‚àè i ‚àà s, ‚Äñf i‚Äñ‚Çä :=
  (s.norm_prod_le' hs f).trans_eq <| by simp [NNReal.coe_prod]

theorem Finset.norm_prod_le {Œ± : Type*} [NormedCommRing Œ±] [NormOneClass Œ±] (s : Finset Œπ)
    (f : Œπ ‚Üí Œ±) : ‚Äñ‚àè i ‚àà s, f i‚Äñ ‚â§ ‚àè i ‚àà s, ‚Äñf i‚Äñ := by
  rcases s with ‚ü®‚ü®l‚ü©, hl‚ü©
  simpa using (l.map f).norm_prod_le

theorem Finset.nnnorm_prod_le {Œ± : Type*} [NormedCommRing Œ±] [NormOneClass Œ±] (s : Finset Œπ)
    (f : Œπ ‚Üí Œ±) : ‚Äñ‚àè i ‚àà s, f i‚Äñ‚Çä ‚â§ ‚àè i ‚àà s, ‚Äñf i‚Äñ‚Çä :=
  (s.norm_prod_le f).trans_eq <| by simp [NNReal.coe_prod]

/-- If `Œ±` is a seminormed ring, then `‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä ^ n` for `n > 0`.
See also `nnnorm_pow_le`. -/
theorem nnnorm_pow_le' (a : Œ±) : ‚àÄ {n : ‚Ñï}, 0 < n ‚Üí ‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä ^ n
  | 1, _ => by simp only [pow_one, le_rfl]
  | n + 2, _ => by
    simpa only [pow_succ' _ (n + 1)] using
      le_trans (nnnorm_mul_le _ _) (mul_le_mul_left' (nnnorm_pow_le' a n.succ_pos) _)

/-- If `Œ±` is a seminormed ring with `‚Äñ1‚Äñ‚Çä = 1`, then `‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä ^ n`.
See also `nnnorm_pow_le'`. -/
theorem nnnorm_pow_le [NormOneClass Œ±] (a : Œ±) (n : ‚Ñï) : ‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä ^ n :=
  Nat.recOn n (by simp only [pow_zero, nnnorm_one, le_rfl])
    fun k _hk => nnnorm_pow_le' a k.succ_pos

/-- If `Œ±` is a seminormed ring, then `‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n` for `n > 0`. See also `norm_pow_le`. -/
theorem norm_pow_le' (a : Œ±) {n : ‚Ñï} (h : 0 < n) : ‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n := by
  simpa only [NNReal.coe_pow, coe_nnnorm] using NNReal.coe_mono (nnnorm_pow_le' a h)

/-- If `Œ±` is a seminormed ring with `‚Äñ1‚Äñ = 1`, then `‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n`.
See also `norm_pow_le'`. -/
theorem norm_pow_le [NormOneClass Œ±] (a : Œ±) (n : ‚Ñï) : ‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n :=
  Nat.recOn n (by simp only [pow_zero, norm_one, le_rfl])
    fun n _hn => norm_pow_le' a n.succ_pos

theorem eventually_norm_pow_le (a : Œ±) : ‚àÄ·∂† n : ‚Ñï in atTop, ‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n :=
  eventually_atTop.mpr ‚ü®1, fun _b h => norm_pow_le' a (Nat.succ_le_iff.mp h)‚ü©

instance ULift.seminormedRing : SeminormedRing (ULift Œ±) :=
  { ULift.nonUnitalSeminormedRing, ULift.ring with }

/-- Seminormed ring structure on the product of two seminormed rings,
  using the sup norm. -/
instance Prod.seminormedRing [SeminormedRing Œ≤] : SeminormedRing (Œ± √ó Œ≤) :=
  { nonUnitalSeminormedRing, instRing with }

/-- Seminormed ring structure on the product of finitely many seminormed rings,
  using the sup norm. -/
instance Pi.seminormedRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ] [‚àÄ i, SeminormedRing (œÄ i)] :
    SeminormedRing (‚àÄ i, œÄ i) :=
  { Pi.nonUnitalSeminormedRing, Pi.ring with }

instance MulOpposite.instSeminormedRing : SeminormedRing Œ±·µê·µí·µñ where
  __ := instRing
  __ := instNonUnitalSeminormedRing

/-- This inequality is particularly useful when `c = 1` and `‚Äña‚Äñ = ‚Äñb‚Äñ = 1` as it then shows that
chord length is a metric on the unit complex numbers. -/
lemma norm_sub_mul_le (ha : ‚Äña‚Äñ ‚â§ 1) : ‚Äñc - a * b‚Äñ ‚â§ ‚Äñc - a‚Äñ + ‚Äñ1 - b‚Äñ :=
  calc
    _ ‚â§ ‚Äñc - a‚Äñ + ‚Äña * (1 - b)‚Äñ := by
        simpa [mul_one_sub] using norm_sub_le_norm_sub_add_norm_sub c a (a * b)
    _ ‚â§ ‚Äñc - a‚Äñ + ‚Äña‚Äñ * ‚Äñ1 - b‚Äñ := by gcongr; exact norm_mul_le ..
    _ ‚â§ ‚Äñc - a‚Äñ + 1 * ‚Äñ1 - b‚Äñ := by gcongr
    _ = ‚Äñc - a‚Äñ + ‚Äñ1 - b‚Äñ := by simp

/-- This inequality is particularly useful when `c = 1` and `‚Äña‚Äñ = ‚Äñb‚Äñ = 1` as it then shows that
chord length is a metric on the unit complex numbers. -/
lemma norm_sub_mul_le' (hb : ‚Äñb‚Äñ ‚â§ 1) : ‚Äñc - a * b‚Äñ ‚â§ ‚Äñ1 - a‚Äñ + ‚Äñc - b‚Äñ := by
  rw [add_comm]; exact norm_sub_mul_le (Œ± := Œ±·µê·µí·µñ) hb

/-- This inequality is particularly useful when `c = 1` and `‚Äña‚Äñ = ‚Äñb‚Äñ = 1` as it then shows that
chord length is a metric on the unit complex numbers. -/
lemma nnnorm_sub_mul_le (ha : ‚Äña‚Äñ‚Çä ‚â§ 1) : ‚Äñc - a * b‚Äñ‚Çä ‚â§ ‚Äñc - a‚Äñ‚Çä + ‚Äñ1 - b‚Äñ‚Çä := norm_sub_mul_le ha

/-- This inequality is particularly useful when `c = 1` and `‚Äña‚Äñ = ‚Äñb‚Äñ = 1` as it then shows that
chord length is a metric on the unit complex numbers. -/
lemma nnnorm_sub_mul_le' (hb : ‚Äñb‚Äñ‚Çä ‚â§ 1) : ‚Äñc - a * b‚Äñ‚Çä ‚â§ ‚Äñ1 - a‚Äñ‚Çä + ‚Äñc - b‚Äñ‚Çä := norm_sub_mul_le' hb

end SeminormedRing

section NonUnitalNormedRing

variable [NonUnitalNormedRing Œ±]

instance ULift.nonUnitalNormedRing : NonUnitalNormedRing (ULift Œ±) :=
  { ULift.nonUnitalSeminormedRing, ULift.normedAddCommGroup with }

/-- Non-unital normed ring structure on the product of two non-unital normed rings,
using the sup norm. -/
instance Prod.nonUnitalNormedRing [NonUnitalNormedRing Œ≤] : NonUnitalNormedRing (Œ± √ó Œ≤) :=
  { Prod.nonUnitalSeminormedRing, Prod.normedAddCommGroup with }

/-- Normed ring structure on the product of finitely many non-unital normed rings, using the sup
norm. -/
instance Pi.nonUnitalNormedRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ] [‚àÄ i, NonUnitalNormedRing (œÄ i)] :
    NonUnitalNormedRing (‚àÄ i, œÄ i) :=
  { Pi.nonUnitalSeminormedRing, Pi.normedAddCommGroup with }

instance MulOpposite.instNonUnitalNormedRing : NonUnitalNormedRing Œ±·µê·µí·µñ where
  __ := instNonUnitalRing
  __ := instNonUnitalSeminormedRing
  __ := instNormedAddCommGroup

end NonUnitalNormedRing

section NormedRing

variable [NormedRing Œ±]

theorem Units.norm_pos [Nontrivial Œ±] (x : Œ±À£) : 0 < ‚Äñ(x : Œ±)‚Äñ :=
  norm_pos_iff.mpr (Units.ne_zero x)

theorem Units.nnnorm_pos [Nontrivial Œ±] (x : Œ±À£) : 0 < ‚Äñ(x : Œ±)‚Äñ‚Çä :=
  x.norm_pos

instance ULift.normedRing : NormedRing (ULift Œ±) :=
  { ULift.seminormedRing, ULift.normedAddCommGroup with }

/-- Normed ring structure on the product of two normed rings, using the sup norm. -/
instance Prod.normedRing [NormedRing Œ≤] : NormedRing (Œ± √ó Œ≤) :=
  { nonUnitalNormedRing, instRing with }

/-- Normed ring structure on the product of finitely many normed rings, using the sup norm. -/
instance Pi.normedRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ] [‚àÄ i, NormedRing (œÄ i)] :
    NormedRing (‚àÄ i, œÄ i) :=
  { Pi.seminormedRing, Pi.normedAddCommGroup with }

instance MulOpposite.instNormedRing : NormedRing Œ±·µê·µí·µñ where
  __ := instRing
  __ := instSeminormedRing
  __ := instNormedAddCommGroup

end NormedRing

section NonUnitalSeminormedCommRing

variable [NonUnitalSeminormedCommRing Œ±]

instance ULift.nonUnitalSeminormedCommRing : NonUnitalSeminormedCommRing (ULift Œ±) :=
  { ULift.nonUnitalSeminormedRing, ULift.nonUnitalCommRing with }

/-- Non-unital seminormed commutative ring structure on the product of two non-unital seminormed
commutative rings, using the sup norm. -/
instance Prod.nonUnitalSeminormedCommRing [NonUnitalSeminormedCommRing Œ≤] :
    NonUnitalSeminormedCommRing (Œ± √ó Œ≤) :=
  { nonUnitalSeminormedRing, instNonUnitalCommRing with }

/-- Non-unital seminormed commutative ring structure on the product of finitely many non-unital
seminormed commutative rings, using the sup norm. -/
instance Pi.nonUnitalSeminormedCommRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ]
    [‚àÄ i, NonUnitalSeminormedCommRing (œÄ i)] : NonUnitalSeminormedCommRing (‚àÄ i, œÄ i) :=
  { Pi.nonUnitalSeminormedRing, Pi.nonUnitalCommRing with }

instance MulOpposite.instNonUnitalSeminormedCommRing : NonUnitalSeminormedCommRing Œ±·µê·µí·µñ where
  __ := instNonUnitalSeminormedRing
  __ := instNonUnitalCommRing

end NonUnitalSeminormedCommRing

section NonUnitalNormedCommRing

variable [NonUnitalNormedCommRing Œ±]

/-- A non-unital subalgebra of a non-unital seminormed commutative ring is also a non-unital
seminormed commutative ring, with the restriction of the norm. -/
instance NonUnitalSubalgebra.nonUnitalSeminormedCommRing {ùïú : Type*} [CommRing ùïú] {E : Type*}
    [NonUnitalSeminormedCommRing E] [Module ùïú E] (s : NonUnitalSubalgebra ùïú E) :
    NonUnitalSeminormedCommRing s :=
  { s.nonUnitalSeminormedRing, s.toNonUnitalCommRing with }

/-- A non-unital subalgebra of a non-unital normed commutative ring is also a non-unital normed
commutative ring, with the restriction of the norm. -/
instance NonUnitalSubalgebra.nonUnitalNormedCommRing {ùïú : Type*} [CommRing ùïú] {E : Type*}
    [NonUnitalNormedCommRing E] [Module ùïú E] (s : NonUnitalSubalgebra ùïú E) :
    NonUnitalNormedCommRing s :=
  { s.nonUnitalSeminormedCommRing, s.nonUnitalNormedRing with }

instance ULift.nonUnitalNormedCommRing : NonUnitalNormedCommRing (ULift Œ±) :=
  { ULift.nonUnitalSeminormedCommRing, ULift.normedAddCommGroup with }

/-- Non-unital normed commutative ring structure on the product of two non-unital normed
commutative rings, using the sup norm. -/
instance Prod.nonUnitalNormedCommRing [NonUnitalNormedCommRing Œ≤] :
    NonUnitalNormedCommRing (Œ± √ó Œ≤) :=
  { Prod.nonUnitalSeminormedCommRing, Prod.normedAddCommGroup with }

/-- Normed commutative ring structure on the product of finitely many non-unital normed
commutative rings, using the sup norm. -/
instance Pi.nonUnitalNormedCommRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ]
    [‚àÄ i, NonUnitalNormedCommRing (œÄ i)] : NonUnitalNormedCommRing (‚àÄ i, œÄ i) :=
  { Pi.nonUnitalSeminormedCommRing, Pi.normedAddCommGroup with }

instance MulOpposite.instNonUnitalNormedCommRing : NonUnitalNormedCommRing Œ±·µê·µí·µñ where
  __ := instNonUnitalNormedRing
  __ := instNonUnitalSeminormedCommRing

end NonUnitalNormedCommRing

section SeminormedCommRing

variable [SeminormedCommRing Œ±]

instance ULift.seminormedCommRing : SeminormedCommRing (ULift Œ±) :=
  { ULift.nonUnitalSeminormedRing, ULift.commRing with }

/-- Seminormed commutative ring structure on the product of two seminormed commutative rings,
  using the sup norm. -/
instance Prod.seminormedCommRing [SeminormedCommRing Œ≤] : SeminormedCommRing (Œ± √ó Œ≤) :=
  { Prod.nonUnitalSeminormedCommRing, instCommRing with }

/-- Seminormed commutative ring structure on the product of finitely many seminormed commutative
rings, using the sup norm. -/
instance Pi.seminormedCommRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ] [‚àÄ i, SeminormedCommRing (œÄ i)] :
    SeminormedCommRing (‚àÄ i, œÄ i) :=
  { Pi.nonUnitalSeminormedCommRing, Pi.ring with }

instance MulOpposite.instSeminormedCommRing : SeminormedCommRing Œ±·µê·µí·µñ where
  __ := instSeminormedRing
  __ := instNonUnitalSeminormedCommRing

end SeminormedCommRing

section NormedCommRing

/-- A subalgebra of a seminormed commutative ring is also a seminormed commutative ring, with the
restriction of the norm. -/
instance Subalgebra.seminormedCommRing {ùïú : Type*} [CommRing ùïú] {E : Type*} [SeminormedCommRing E]
    [Algebra ùïú E] (s : Subalgebra ùïú E) : SeminormedCommRing s :=
  { s.seminormedRing, s.toCommRing with }

/-- A subalgebra of a normed commutative ring is also a normed commutative ring, with the
restriction of the norm. -/
instance Subalgebra.normedCommRing {ùïú : Type*} [CommRing ùïú] {E : Type*} [NormedCommRing E]
    [Algebra ùïú E] (s : Subalgebra ùïú E) : NormedCommRing s :=
  { s.seminormedCommRing, s.normedRing with }

variable [NormedCommRing Œ±]

instance ULift.normedCommRing : NormedCommRing (ULift Œ±) :=
  { ULift.normedRing (Œ± := Œ±), ULift.seminormedCommRing with }

/-- Normed commutative ring structure on the product of two normed commutative rings, using the sup
norm. -/
instance Prod.normedCommRing [NormedCommRing Œ≤] : NormedCommRing (Œ± √ó Œ≤) :=
  { nonUnitalNormedRing, instCommRing with }

/-- Normed commutative ring structure on the product of finitely many normed commutative rings,
using the sup norm. -/
instance Pi.normedCommutativeRing {œÄ : Œπ ‚Üí Type*} [Fintype Œπ] [‚àÄ i, NormedCommRing (œÄ i)] :
    NormedCommRing (‚àÄ i, œÄ i) :=
  { Pi.seminormedCommRing, Pi.normedAddCommGroup with }

instance MulOpposite.instNormedCommRing : NormedCommRing Œ±·µê·µí·µñ where
  __ := instNormedRing
  __ := instSeminormedCommRing

end NormedCommRing

-- see Note [lower instance priority]
instance (priority := 100) semi_normed_ring_top_monoid [NonUnitalSeminormedRing Œ±] :
    ContinuousMul Œ± :=
  ‚ü®continuous_iff_continuousAt.2 fun x =>
      tendsto_iff_norm_sub_tendsto_zero.2 <| by
        have : ‚àÄ e : Œ± √ó Œ±,
            ‚Äñe.1 * e.2 - x.1 * x.2‚Äñ ‚â§ ‚Äñe.1‚Äñ * ‚Äñe.2 - x.2‚Äñ + ‚Äñe.1 - x.1‚Äñ * ‚Äñx.2‚Äñ := by
          intro e
          calc
            ‚Äñe.1 * e.2 - x.1 * x.2‚Äñ ‚â§ ‚Äñe.1 * (e.2 - x.2) + (e.1 - x.1) * x.2‚Äñ := by
              rw [_root_.mul_sub, _root_.sub_mul, sub_add_sub_cancel]
            -- Porting note: `ENNReal.{mul_sub, sub_mul}` should be protected
            _ ‚â§ ‚Äñe.1‚Äñ * ‚Äñe.2 - x.2‚Äñ + ‚Äñe.1 - x.1‚Äñ * ‚Äñx.2‚Äñ :=
              norm_add_le_of_le (norm_mul_le _ _) (norm_mul_le _ _)
        refine squeeze_zero (fun e => norm_nonneg _) this ?_
        convert
          ((continuous_fst.tendsto x).norm.mul
                ((continuous_snd.tendsto x).sub tendsto_const_nhds).norm).add
            (((continuous_fst.tendsto x).sub tendsto_const_nhds).norm.mul _)
        -- Porting note: `show` used to select a goal to work on
        rotate_right
        ¬∑ show Tendsto _ _ _
          exact tendsto_const_nhds
        ¬∑ simp‚ü©

-- see Note [lower instance priority]
/-- A seminormed ring is a topological ring. -/
instance (priority := 100) semi_normed_top_ring [NonUnitalSeminormedRing Œ±] :
    TopologicalRing Œ± where

section NormedDivisionRing

variable [NormedDivisionRing Œ±] {a : Œ±}

@[simp]
theorem norm_mul (a b : Œ±) : ‚Äña * b‚Äñ = ‚Äña‚Äñ * ‚Äñb‚Äñ :=
  NormedDivisionRing.norm_mul' a b

instance (priority := 900) NormedDivisionRing.to_normOneClass : NormOneClass Œ± :=
  ‚ü®mul_left_cancel‚ÇÄ (mt norm_eq_zero.1 (one_ne_zero' Œ±)) <| by rw [‚Üê norm_mul, mul_one, mul_one]‚ü©

instance isAbsoluteValue_norm : IsAbsoluteValue (norm : Œ± ‚Üí ‚Ñù) where
  abv_nonneg' := norm_nonneg
  abv_eq_zero' := norm_eq_zero
  abv_add' := norm_add_le
  abv_mul' := norm_mul

@[simp]
theorem nnnorm_mul (a b : Œ±) : ‚Äña * b‚Äñ‚Çä = ‚Äña‚Äñ‚Çä * ‚Äñb‚Äñ‚Çä :=
  NNReal.eq <| norm_mul a b

/-- `norm` as a `MonoidWithZeroHom`. -/
@[simps]
def normHom : Œ± ‚Üí*‚ÇÄ ‚Ñù where
  toFun := (‚Äñ¬∑‚Äñ)
  map_zero' := norm_zero
  map_one' := norm_one
  map_mul' := norm_mul

/-- `nnnorm` as a `MonoidWithZeroHom`. -/
@[simps]
def nnnormHom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0 where
  toFun := (‚Äñ¬∑‚Äñ‚Çä)
  map_zero' := nnnorm_zero
  map_one' := nnnorm_one
  map_mul' := nnnorm_mul

@[simp]
theorem norm_pow (a : Œ±) : ‚àÄ n : ‚Ñï, ‚Äña ^ n‚Äñ = ‚Äña‚Äñ ^ n :=
  (normHom.toMonoidHom : Œ± ‚Üí* ‚Ñù).map_pow a

@[simp]
theorem nnnorm_pow (a : Œ±) (n : ‚Ñï) : ‚Äña ^ n‚Äñ‚Çä = ‚Äña‚Äñ‚Çä ^ n :=
  (nnnormHom.toMonoidHom : Œ± ‚Üí* ‚Ñù‚â•0).map_pow a n

protected theorem List.norm_prod (l : List Œ±) : ‚Äñl.prod‚Äñ = (l.map norm).prod :=
  map_list_prod (normHom.toMonoidHom : Œ± ‚Üí* ‚Ñù) _

protected theorem List.nnnorm_prod (l : List Œ±) : ‚Äñl.prod‚Äñ‚Çä = (l.map nnnorm).prod :=
  map_list_prod (nnnormHom.toMonoidHom : Œ± ‚Üí* ‚Ñù‚â•0) _

@[simp]
theorem norm_div (a b : Œ±) : ‚Äña / b‚Äñ = ‚Äña‚Äñ / ‚Äñb‚Äñ :=
  map_div‚ÇÄ (normHom : Œ± ‚Üí*‚ÇÄ ‚Ñù) a b

@[simp]
theorem nnnorm_div (a b : Œ±) : ‚Äña / b‚Äñ‚Çä = ‚Äña‚Äñ‚Çä / ‚Äñb‚Äñ‚Çä :=
  map_div‚ÇÄ (nnnormHom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0) a b

@[simp]
theorem norm_inv (a : Œ±) : ‚Äña‚Åª¬π‚Äñ = ‚Äña‚Äñ‚Åª¬π :=
  map_inv‚ÇÄ (normHom : Œ± ‚Üí*‚ÇÄ ‚Ñù) a

@[simp]
theorem nnnorm_inv (a : Œ±) : ‚Äña‚Åª¬π‚Äñ‚Çä = ‚Äña‚Äñ‚Çä‚Åª¬π :=
  NNReal.eq <| by simp

@[simp]
theorem norm_zpow : ‚àÄ (a : Œ±) (n : ‚Ñ§), ‚Äña ^ n‚Äñ = ‚Äña‚Äñ ^ n :=
  map_zpow‚ÇÄ (normHom : Œ± ‚Üí*‚ÇÄ ‚Ñù)

@[simp]
theorem nnnorm_zpow : ‚àÄ (a : Œ±) (n : ‚Ñ§), ‚Äña ^ n‚Äñ‚Çä = ‚Äña‚Äñ‚Çä ^ n :=
  map_zpow‚ÇÄ (nnnormHom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0)

theorem dist_inv_inv‚ÇÄ {z w : Œ±} (hz : z ‚â† 0) (hw : w ‚â† 0) :
    dist z‚Åª¬π w‚Åª¬π = dist z w / (‚Äñz‚Äñ * ‚Äñw‚Äñ) := by
  rw [dist_eq_norm, inv_sub_inv' hz hw, norm_mul, norm_mul, norm_inv, norm_inv, mul_comm ‚Äñz‚Äñ‚Åª¬π,
    mul_assoc, dist_eq_norm', div_eq_mul_inv, mul_inv]

theorem nndist_inv_inv‚ÇÄ {z w : Œ±} (hz : z ‚â† 0) (hw : w ‚â† 0) :
    nndist z‚Åª¬π w‚Åª¬π = nndist z w / (‚Äñz‚Äñ‚Çä * ‚Äñw‚Äñ‚Çä) :=
  NNReal.eq <| dist_inv_inv‚ÇÄ hz hw

lemma antilipschitzWith_mul_left {a : Œ±} (ha : a ‚â† 0) : AntilipschitzWith (‚Äña‚Äñ‚Çä‚Åª¬π) (a * ¬∑) :=
  AntilipschitzWith.of_le_mul_dist fun _ _ ‚Ü¶ by simp [dist_eq_norm, ‚Üê _root_.mul_sub, ha]

lemma antilipschitzWith_mul_right {a : Œ±} (ha : a ‚â† 0) : AntilipschitzWith (‚Äña‚Äñ‚Çä‚Åª¬π) (¬∑ * a) :=
  AntilipschitzWith.of_le_mul_dist fun _ _ ‚Ü¶ by
    simp [dist_eq_norm, ‚Üê _root_.sub_mul, ‚Üê mul_comm (‚Äña‚Äñ), ha]

/-- Multiplication by a nonzero element `a` on the left
as a `DilationEquiv` of a normed division ring. -/
@[simps!]
def DilationEquiv.mulLeft (a : Œ±) (ha : a ‚â† 0) : Œ± ‚âÉ·µà Œ± where
  toEquiv := Equiv.mulLeft‚ÇÄ a ha
  edist_eq' := ‚ü®‚Äña‚Äñ‚Çä, nnnorm_ne_zero_iff.2 ha, fun x y ‚Ü¶ by
    simp [edist_nndist, nndist_eq_nnnorm, ‚Üê mul_sub]‚ü©

/-- Multiplication by a nonzero element `a` on the right
as a `DilationEquiv` of a normed division ring. -/
@[simps!]
def DilationEquiv.mulRight (a : Œ±) (ha : a ‚â† 0) : Œ± ‚âÉ·µà Œ± where
  toEquiv := Equiv.mulRight‚ÇÄ a ha
  edist_eq' := ‚ü®‚Äña‚Äñ‚Çä, nnnorm_ne_zero_iff.2 ha, fun x y ‚Ü¶ by
    simp [edist_nndist, nndist_eq_nnnorm, ‚Üê sub_mul, ‚Üê mul_comm (‚Äña‚Äñ‚Çä)]‚ü©

namespace Filter

@[simp]
lemma comap_mul_left_cobounded {a : Œ±} (ha : a ‚â† 0) :
    comap (a * ¬∑) (cobounded Œ±) = cobounded Œ± :=
  Dilation.comap_cobounded (DilationEquiv.mulLeft a ha)

@[simp]
lemma map_mul_left_cobounded {a : Œ±} (ha : a ‚â† 0) :
    map (a * ¬∑) (cobounded Œ±) = cobounded Œ± :=
  DilationEquiv.map_cobounded (DilationEquiv.mulLeft a ha)

@[simp]
lemma comap_mul_right_cobounded {a : Œ±} (ha : a ‚â† 0) :
    comap (¬∑ * a) (cobounded Œ±) = cobounded Œ± :=
  Dilation.comap_cobounded (DilationEquiv.mulRight a ha)

@[simp]
lemma map_mul_right_cobounded {a : Œ±} (ha : a ‚â† 0) :
    map (¬∑ * a) (cobounded Œ±) = cobounded Œ± :=
  DilationEquiv.map_cobounded (DilationEquiv.mulRight a ha)

/-- Multiplication on the left by a nonzero element of a normed division ring tends to infinity at
infinity. -/
theorem tendsto_mul_left_cobounded {a : Œ±} (ha : a ‚â† 0) :
    Tendsto (a * ¬∑) (cobounded Œ±) (cobounded Œ±) :=
  (map_mul_left_cobounded ha).le

/-- Multiplication on the right by a nonzero element of a normed division ring tends to infinity at
infinity. -/
theorem tendsto_mul_right_cobounded {a : Œ±} (ha : a ‚â† 0) :
    Tendsto (¬∑ * a) (cobounded Œ±) (cobounded Œ±) :=
  (map_mul_right_cobounded ha).le

@[simp]
lemma inv_cobounded‚ÇÄ : (cobounded Œ±)‚Åª¬π = ùìù[‚â†] 0 := by
  rw [‚Üê comap_norm_atTop, ‚Üê Filter.comap_inv, ‚Üê comap_norm_nhdsWithin_Ioi_zero,
    ‚Üê inv_atTop‚ÇÄ, ‚Üê Filter.comap_inv]
  simp only [comap_comap, Function.comp_def, norm_inv]

@[simp]
lemma inv_nhdsWithin_ne_zero : (ùìù[‚â†] (0 : Œ±))‚Åª¬π = cobounded Œ± := by
  rw [‚Üê inv_cobounded‚ÇÄ, inv_inv]

lemma tendsto_inv‚ÇÄ_cobounded' : Tendsto Inv.inv (cobounded Œ±) (ùìù[‚â†] 0) :=
  inv_cobounded‚ÇÄ.le

theorem tendsto_inv‚ÇÄ_cobounded : Tendsto Inv.inv (cobounded Œ±) (ùìù 0) :=
  tendsto_inv‚ÇÄ_cobounded'.mono_right inf_le_left

lemma tendsto_inv‚ÇÄ_nhdsWithin_ne_zero : Tendsto Inv.inv (ùìù[‚â†] 0) (cobounded Œ±) :=
  inv_nhdsWithin_ne_zero.le

end Filter

-- see Note [lower instance priority]
instance (priority := 100) NormedDivisionRing.to_hasContinuousInv‚ÇÄ : HasContinuousInv‚ÇÄ Œ± := by
  refine ‚ü®fun r r0 => tendsto_iff_norm_sub_tendsto_zero.2 ?_‚ü©
  have r0' : 0 < ‚Äñr‚Äñ := norm_pos_iff.2 r0
  rcases exists_between r0' with ‚ü®Œµ, Œµ0, Œµr‚ü©
  have : ‚àÄ·∂† e in ùìù r, ‚Äñe‚Åª¬π - r‚Åª¬π‚Äñ ‚â§ ‚Äñr - e‚Äñ / ‚Äñr‚Äñ / Œµ := by
    filter_upwards [(isOpen_lt continuous_const continuous_norm).eventually_mem Œµr] with e he
    have e0 : e ‚â† 0 := norm_pos_iff.1 (Œµ0.trans he)
    calc
      ‚Äñe‚Åª¬π - r‚Åª¬π‚Äñ = ‚Äñr‚Äñ‚Åª¬π * ‚Äñr - e‚Äñ * ‚Äñe‚Äñ‚Åª¬π := by
        rw [‚Üê norm_inv, ‚Üê norm_inv, ‚Üê norm_mul, ‚Üê norm_mul, _root_.mul_sub, _root_.sub_mul,
          mul_assoc _ e, inv_mul_cancel‚ÇÄ r0, mul_inv_cancel‚ÇÄ e0, one_mul, mul_one]
      -- Porting note: `ENNReal.{mul_sub, sub_mul}` should be `protected`
      _ = ‚Äñr - e‚Äñ / ‚Äñr‚Äñ / ‚Äñe‚Äñ := by field_simp [mul_comm]
      _ ‚â§ ‚Äñr - e‚Äñ / ‚Äñr‚Äñ / Œµ := by gcongr
  refine squeeze_zero' (Eventually.of_forall fun _ => norm_nonneg _) this ?_
  refine (((continuous_const.sub continuous_id).norm.div_const _).div_const _).tendsto' _ _ ?_
  simp

-- see Note [lower instance priority]
/-- A normed division ring is a topological division ring. -/
instance (priority := 100) NormedDivisionRing.to_topologicalDivisionRing :
    TopologicalDivisionRing Œ± where

protected lemma IsOfFinOrder.norm_eq_one (ha : IsOfFinOrder a) : ‚Äña‚Äñ = 1 :=
  ((normHom : Œ± ‚Üí*‚ÇÄ ‚Ñù).toMonoidHom.isOfFinOrder ha).eq_one <| norm_nonneg _

example [Monoid Œ≤] (œÜ : Œ≤ ‚Üí* Œ±) {x : Œ≤} {k : ‚Ñï+} (h : x ^ (k : ‚Ñï) = 1) :
    ‚ÄñœÜ x‚Äñ = 1 := (œÜ.isOfFinOrder <| isOfFinOrder_iff_pow_eq_one.2 ‚ü®_, k.2, h‚ü©).norm_eq_one

@[simp] lemma AddChar.norm_apply {G : Type*} [AddLeftCancelMonoid G] [Finite G] (œà : AddChar G Œ±)
    (x : G) : ‚Äñœà x‚Äñ = 1 := (œà.toMonoidHom.isOfFinOrder <| isOfFinOrder_of_finite _).norm_eq_one

end NormedDivisionRing

/-- A normed field is a field with a norm satisfying ‚Äñx y‚Äñ = ‚Äñx‚Äñ ‚Äñy‚Äñ. -/
class NormedField (Œ± : Type*) extends Norm Œ±, Field Œ±, MetricSpace Œ± where
  /-- The distance is induced by the norm. -/
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  /-- The norm is multiplicative. -/
  norm_mul' : ‚àÄ a b, norm (a * b) = norm a * norm b

/-- A nontrivially normed field is a normed field in which there is an element of norm different
from `0` and `1`. This makes it possible to bring any element arbitrarily close to `0` by
multiplication by the powers of any element, and thus to relate algebra and topology. -/
class NontriviallyNormedField (Œ± : Type*) extends NormedField Œ± where
  /-- The norm attains a value exceeding 1. -/
  non_trivial : ‚àÉ x : Œ±, 1 < ‚Äñx‚Äñ

/-- A densely normed field is a normed field for which the image of the norm is dense in `‚Ñù‚â•0`,
which means it is also nontrivially normed. However, not all nontrivally normed fields are densely
normed; in particular, the `Padic`s exhibit this fact. -/
class DenselyNormedField (Œ± : Type*) extends NormedField Œ± where
  /-- The range of the norm is dense in the collection of nonnegative real numbers. -/
  lt_norm_lt : ‚àÄ x y : ‚Ñù, 0 ‚â§ x ‚Üí x < y ‚Üí ‚àÉ a : Œ±, x < ‚Äña‚Äñ ‚àß ‚Äña‚Äñ < y

section NormedField

/-- A densely normed field is always a nontrivially normed field.
See note [lower instance priority]. -/
instance (priority := 100) DenselyNormedField.toNontriviallyNormedField [DenselyNormedField Œ±] :
    NontriviallyNormedField Œ± where
  non_trivial :=
    let ‚ü®a, h, _‚ü© := DenselyNormedField.lt_norm_lt 1 2 zero_le_one one_lt_two
    ‚ü®a, h‚ü©

variable [NormedField Œ±]

-- see Note [lower instance priority]
instance (priority := 100) NormedField.toNormedDivisionRing : NormedDivisionRing Œ± :=
  { ‚ÄπNormedField Œ±‚Ä∫ with }

-- see Note [lower instance priority]
instance (priority := 100) NormedField.toNormedCommRing : NormedCommRing Œ± :=
  { ‚ÄπNormedField Œ±‚Ä∫ with norm_mul := fun a b => (norm_mul a b).le }

@[simp]
theorem norm_prod (s : Finset Œ≤) (f : Œ≤ ‚Üí Œ±) : ‚Äñ‚àè b ‚àà s, f b‚Äñ = ‚àè b ‚àà s, ‚Äñf b‚Äñ :=
  map_prod normHom.toMonoidHom f s

@[simp]
theorem nnnorm_prod (s : Finset Œ≤) (f : Œ≤ ‚Üí Œ±) : ‚Äñ‚àè b ‚àà s, f b‚Äñ‚Çä = ‚àè b ‚àà s, ‚Äñf b‚Äñ‚Çä :=
  map_prod nnnormHom.toMonoidHom f s

end NormedField

namespace NormedField

section Nontrivially

variable (Œ±) [NontriviallyNormedField Œ±]

theorem exists_one_lt_norm : ‚àÉ x : Œ±, 1 < ‚Äñx‚Äñ :=
  ‚ÄπNontriviallyNormedField Œ±‚Ä∫.non_trivial

theorem exists_lt_norm (r : ‚Ñù) : ‚àÉ x : Œ±, r < ‚Äñx‚Äñ :=
  let ‚ü®w, hw‚ü© := exists_one_lt_norm Œ±
  let ‚ü®n, hn‚ü© := pow_unbounded_of_one_lt r hw
  ‚ü®w ^ n, by rwa [norm_pow]‚ü©

theorem exists_norm_lt {r : ‚Ñù} (hr : 0 < r) : ‚àÉ x : Œ±, 0 < ‚Äñx‚Äñ ‚àß ‚Äñx‚Äñ < r :=
  let ‚ü®w, hw‚ü© := exists_lt_norm Œ± r‚Åª¬π
  ‚ü®w‚Åª¬π, by rwa [‚Üê Set.mem_Ioo, norm_inv, ‚Üê Set.mem_inv, Set.inv_Ioo_0_left hr]‚ü©

theorem exists_norm_lt_one : ‚àÉ x : Œ±, 0 < ‚Äñx‚Äñ ‚àß ‚Äñx‚Äñ < 1 :=
  exists_norm_lt Œ± one_pos

variable {Œ±}

@[instance]
theorem punctured_nhds_neBot (x : Œ±) : NeBot (ùìù[‚â†] x) := by
  rw [‚Üê mem_closure_iff_nhdsWithin_neBot, Metric.mem_closure_iff]
  rintro Œµ Œµ0
  rcases exists_norm_lt Œ± Œµ0 with ‚ü®b, hb0, hbŒµ‚ü©
  refine ‚ü®x + b, mt (Set.mem_singleton_iff.trans add_right_eq_self).1 <| norm_pos_iff.1 hb0, ?_‚ü©
  rwa [dist_comm, dist_eq_norm, add_sub_cancel_left]

@[instance]
theorem nhdsWithin_isUnit_neBot : NeBot (ùìù[{ x : Œ± | IsUnit x }] 0) := by
  simpa only [isUnit_iff_ne_zero] using punctured_nhds_neBot (0 : Œ±)

end Nontrivially

section Densely

variable (Œ±) [DenselyNormedField Œ±]

theorem exists_lt_norm_lt {r‚ÇÅ r‚ÇÇ : ‚Ñù} (h‚ÇÄ : 0 ‚â§ r‚ÇÅ) (h : r‚ÇÅ < r‚ÇÇ) : ‚àÉ x : Œ±, r‚ÇÅ < ‚Äñx‚Äñ ‚àß ‚Äñx‚Äñ < r‚ÇÇ :=
  DenselyNormedField.lt_norm_lt r‚ÇÅ r‚ÇÇ h‚ÇÄ h

theorem exists_lt_nnnorm_lt {r‚ÇÅ r‚ÇÇ : ‚Ñù‚â•0} (h : r‚ÇÅ < r‚ÇÇ) : ‚àÉ x : Œ±, r‚ÇÅ < ‚Äñx‚Äñ‚Çä ‚àß ‚Äñx‚Äñ‚Çä < r‚ÇÇ :=
  mod_cast exists_lt_norm_lt Œ± r‚ÇÅ.prop h

instance denselyOrdered_range_norm : DenselyOrdered (Set.range (norm : Œ± ‚Üí ‚Ñù)) where
  dense := by
    rintro ‚ü®-, x, rfl‚ü© ‚ü®-, y, rfl‚ü© hxy
    let ‚ü®z, h‚ü© := exists_lt_norm_lt Œ± (norm_nonneg _) hxy
    exact ‚ü®‚ü®‚Äñz‚Äñ, z, rfl‚ü©, h‚ü©

instance denselyOrdered_range_nnnorm : DenselyOrdered (Set.range (nnnorm : Œ± ‚Üí ‚Ñù‚â•0)) where
  dense := by
    rintro ‚ü®-, x, rfl‚ü© ‚ü®-, y, rfl‚ü© hxy
    let ‚ü®z, h‚ü© := exists_lt_nnnorm_lt Œ± hxy
    exact ‚ü®‚ü®‚Äñz‚Äñ‚Çä, z, rfl‚ü©, h‚ü©

theorem denseRange_nnnorm : DenseRange (nnnorm : Œ± ‚Üí ‚Ñù‚â•0) :=
  dense_of_exists_between fun _ _ hr =>
    let ‚ü®x, h‚ü© := exists_lt_nnnorm_lt Œ± hr
    ‚ü®‚Äñx‚Äñ‚Çä, ‚ü®x, rfl‚ü©, h‚ü©

end Densely

end NormedField

/-- A normed field is nontrivially normed
provided that the norm of some nonzero element is not one. -/
def NontriviallyNormedField.ofNormNeOne {ùïú : Type*} [h' : NormedField ùïú]
    (h : ‚àÉ x : ùïú, x ‚â† 0 ‚àß ‚Äñx‚Äñ ‚â† 1) : NontriviallyNormedField ùïú where
  toNormedField := h'
  non_trivial := by
    rcases h with ‚ü®x, hx, hx1‚ü©
    rcases hx1.lt_or_lt with hlt | hlt
    ¬∑ use x‚Åª¬π
      rw [norm_inv]
      exact one_lt_inv (norm_pos_iff.2 hx) hlt
    ¬∑ exact ‚ü®x, hlt‚ü©

instance Real.normedCommRing : NormedCommRing ‚Ñù :=
  { Real.normedAddCommGroup, Real.commRing with norm_mul := fun x y => (abs_mul x y).le }

noncomputable instance Real.normedField : NormedField ‚Ñù :=
  { Real.normedAddCommGroup, Real.field with
    norm_mul' := abs_mul }

noncomputable instance Real.denselyNormedField : DenselyNormedField ‚Ñù where
  lt_norm_lt _ _ h‚ÇÄ hr :=
    let ‚ü®x, h‚ü© := exists_between hr
    ‚ü®x, by rwa [Real.norm_eq_abs, abs_of_nonneg (h‚ÇÄ.trans h.1.le)]‚ü©

namespace Real

theorem toNNReal_mul_nnnorm {x : ‚Ñù} (y : ‚Ñù) (hx : 0 ‚â§ x) : x.toNNReal * ‚Äñy‚Äñ‚Çä = ‚Äñx * y‚Äñ‚Çä := by
  ext
  simp only [NNReal.coe_mul, nnnorm_mul, coe_nnnorm, Real.toNNReal_of_nonneg, norm_of_nonneg, hx,
    NNReal.coe_mk]

theorem nnnorm_mul_toNNReal (x : ‚Ñù) {y : ‚Ñù} (hy : 0 ‚â§ y) : ‚Äñx‚Äñ‚Çä * y.toNNReal = ‚Äñx * y‚Äñ‚Çä := by
  rw [mul_comm, mul_comm x, toNNReal_mul_nnnorm x hy]

end Real

namespace NNReal

open NNReal

-- porting note (#10618): removed `@[simp]` because `simp` can prove this
theorem norm_eq (x : ‚Ñù‚â•0) : ‚Äñ(x : ‚Ñù)‚Äñ = x := by rw [Real.norm_eq_abs, x.abs_eq]

@[simp]
theorem nnnorm_eq (x : ‚Ñù‚â•0) : ‚Äñ(x : ‚Ñù)‚Äñ‚Çä = x :=
  NNReal.eq <| Real.norm_of_nonneg x.2

lemma lipschitzWith_sub : LipschitzWith 2 (fun (p : ‚Ñù‚â•0 √ó ‚Ñù‚â•0) ‚Ü¶ p.1 - p.2) := by
  rw [‚Üê isometry_subtype_coe.lipschitzWith_iff]
  have : Isometry (Prod.map ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù) ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù)) :=
    isometry_subtype_coe.prod_map isometry_subtype_coe
  convert (((LipschitzWith.prod_fst.comp this.lipschitz).sub
    (LipschitzWith.prod_snd.comp this.lipschitz)).max_const 0)
  norm_num

end NNReal

@[simp 1001] -- Porting note: increase priority so that the LHS doesn't simplify
theorem norm_norm [SeminormedAddCommGroup Œ±] (x : Œ±) : ‚Äñ‚Äñx‚Äñ‚Äñ = ‚Äñx‚Äñ :=
  Real.norm_of_nonneg (norm_nonneg _)

@[simp]
theorem nnnorm_norm [SeminormedAddCommGroup Œ±] (a : Œ±) : ‚Äñ‚Äña‚Äñ‚Äñ‚Çä = ‚Äña‚Äñ‚Çä := by
  rw [Real.nnnorm_of_nonneg (norm_nonneg a)]; rfl

/-- A restatement of `MetricSpace.tendsto_atTop` in terms of the norm. -/
theorem NormedAddCommGroup.tendsto_atTop [Nonempty Œ±] [SemilatticeSup Œ±] {Œ≤ : Type*}
    [SeminormedAddCommGroup Œ≤] {f : Œ± ‚Üí Œ≤} {b : Œ≤} :
    Tendsto f atTop (ùìù b) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N ‚â§ n ‚Üí ‚Äñf n - b‚Äñ < Œµ :=
  (atTop_basis.tendsto_iff Metric.nhds_basis_ball).trans (by simp [dist_eq_norm])

/-- A variant of `NormedAddCommGroup.tendsto_atTop` that
uses `‚àÉ N, ‚àÄ n > N, ...` rather than `‚àÉ N, ‚àÄ n ‚â• N, ...`
-/
theorem NormedAddCommGroup.tendsto_atTop' [Nonempty Œ±] [SemilatticeSup Œ±] [NoMaxOrder Œ±]
    {Œ≤ : Type*} [SeminormedAddCommGroup Œ≤] {f : Œ± ‚Üí Œ≤} {b : Œ≤} :
    Tendsto f atTop (ùìù b) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N < n ‚Üí ‚Äñf n - b‚Äñ < Œµ :=
  (atTop_basis_Ioi.tendsto_iff Metric.nhds_basis_ball).trans (by simp [dist_eq_norm])

instance Int.instNormedCommRing : NormedCommRing ‚Ñ§ where
  __ := instCommRing
  __ := instNormedAddCommGroup
  norm_mul m n := by simp only [norm, Int.cast_mul, abs_mul, le_rfl]

instance Int.instNormOneClass : NormOneClass ‚Ñ§ :=
  ‚ü®by simp [‚Üê Int.norm_cast_real]‚ü©

instance Rat.instNormedField : NormedField ‚Ñö where
  __ := instField
  __ := instNormedAddCommGroup
  norm_mul' a b := by simp only [norm, Rat.cast_mul, abs_mul]

instance Rat.instDenselyNormedField : DenselyNormedField ‚Ñö where
  lt_norm_lt r‚ÇÅ r‚ÇÇ h‚ÇÄ hr :=
    let ‚ü®q, h‚ü© := exists_rat_btwn hr
    ‚ü®q, by rwa [‚Üê Rat.norm_cast_real, Real.norm_eq_abs, abs_of_pos (h‚ÇÄ.trans_lt h.1)]‚ü©

section RingHomIsometric

variable {R‚ÇÅ : Type*} {R‚ÇÇ : Type*} {R‚ÇÉ : Type*}

/-- This class states that a ring homomorphism is isometric. This is a sufficient assumption
for a continuous semilinear map to be bounded and this is the main use for this typeclass. -/
class RingHomIsometric [Semiring R‚ÇÅ] [Semiring R‚ÇÇ] [Norm R‚ÇÅ] [Norm R‚ÇÇ] (œÉ : R‚ÇÅ ‚Üí+* R‚ÇÇ) : Prop where
  /-- The ring homomorphism is an isometry. -/
  is_iso : ‚àÄ {x : R‚ÇÅ}, ‚ÄñœÉ x‚Äñ = ‚Äñx‚Äñ

attribute [simp] RingHomIsometric.is_iso

variable [SeminormedRing R‚ÇÅ] [SeminormedRing R‚ÇÇ] [SeminormedRing R‚ÇÉ]

instance RingHomIsometric.ids : RingHomIsometric (RingHom.id R‚ÇÅ) :=
  ‚ü®rfl‚ü©

end RingHomIsometric

/-! ### Induced normed structures -/


section Induced

variable {F : Type*} (R S : Type*)
variable [FunLike F R S]

/-- A non-unital ring homomorphism from a `NonUnitalRing` to a `NonUnitalSeminormedRing`
induces a `NonUnitalSeminormedRing` structure on the domain.

See note [reducible non-instances] -/
abbrev NonUnitalSeminormedRing.induced [NonUnitalRing R] [NonUnitalSeminormedRing S]
    [NonUnitalRingHomClass F R S] (f : F) : NonUnitalSeminormedRing R :=
  { SeminormedAddCommGroup.induced R S f, ‚ÄπNonUnitalRing R‚Ä∫ with
    norm_mul := fun x y => by
      show ‚Äñf (x * y)‚Äñ ‚â§ ‚Äñf x‚Äñ * ‚Äñf y‚Äñ
      exact (map_mul f x y).symm ‚ñ∏ norm_mul_le (f x) (f y) }

/-- An injective non-unital ring homomorphism from a `NonUnitalRing` to a
`NonUnitalNormedRing` induces a `NonUnitalNormedRing` structure on the domain.

See note [reducible non-instances] -/
abbrev NonUnitalNormedRing.induced [NonUnitalRing R] [NonUnitalNormedRing S]
    [NonUnitalRingHomClass F R S] (f : F) (hf : Function.Injective f) : NonUnitalNormedRing R :=
  { NonUnitalSeminormedRing.induced R S f, NormedAddCommGroup.induced R S f hf with }

/-- A non-unital ring homomorphism from a `Ring` to a `SeminormedRing` induces a
`SeminormedRing` structure on the domain.

See note [reducible non-instances] -/
abbrev SeminormedRing.induced [Ring R] [SeminormedRing S] [NonUnitalRingHomClass F R S] (f : F) :
    SeminormedRing R :=
  { NonUnitalSeminormedRing.induced R S f, SeminormedAddCommGroup.induced R S f, ‚ÄπRing R‚Ä∫ with }

/-- An injective non-unital ring homomorphism from a `Ring` to a `NormedRing` induces a
`NormedRing` structure on the domain.

See note [reducible non-instances] -/
abbrev NormedRing.induced [Ring R] [NormedRing S] [NonUnitalRingHomClass F R S] (f : F)
    (hf : Function.Injective f) : NormedRing R :=
  { NonUnitalSeminormedRing.induced R S f, NormedAddCommGroup.induced R S f hf, ‚ÄπRing R‚Ä∫ with }

/-- A non-unital ring homomorphism from a `NonUnitalCommRing` to a `NonUnitalSeminormedCommRing`
induces a `NonUnitalSeminormedCommRing` structure on the domain.

See note [reducible non-instances] -/
abbrev NonUnitalSeminormedCommRing.induced [NonUnitalCommRing R] [NonUnitalSeminormedCommRing S]
    [NonUnitalRingHomClass F R S] (f : F) : NonUnitalSeminormedCommRing R :=
  { NonUnitalSeminormedRing.induced R S f, ‚ÄπNonUnitalCommRing R‚Ä∫ with }

/-- An injective non-unital ring homomorphism from a `NonUnitalCommRing` to a
`NonUnitalNormedCommRing` induces a `NonUnitalNormedCommRing` structure on the domain.

See note [reducible non-instances] -/
abbrev NonUnitalNormedCommRing.induced [NonUnitalCommRing R] [NonUnitalNormedCommRing S]
    [NonUnitalRingHomClass F R S] (f : F) (hf : Function.Injective f) : NonUnitalNormedCommRing R :=
  { NonUnitalNormedRing.induced R S f hf, ‚ÄπNonUnitalCommRing R‚Ä∫ with }
/-- A non-unital ring homomorphism from a `CommRing` to a `SeminormedRing` induces a
`SeminormedCommRing` structure on the domain.

See note [reducible non-instances] -/
abbrev SeminormedCommRing.induced [CommRing R] [SeminormedRing S] [NonUnitalRingHomClass F R S]
    (f : F) : SeminormedCommRing R :=
  { NonUnitalSeminormedRing.induced R S f, SeminormedAddCommGroup.induced R S f, ‚ÄπCommRing R‚Ä∫ with }

/-- An injective non-unital ring homomorphism from a `CommRing` to a `NormedRing` induces a
`NormedCommRing` structure on the domain.

See note [reducible non-instances] -/
abbrev NormedCommRing.induced [CommRing R] [NormedRing S] [NonUnitalRingHomClass F R S] (f : F)
    (hf : Function.Injective f) : NormedCommRing R :=
  { SeminormedCommRing.induced R S f, NormedAddCommGroup.induced R S f hf with }

/-- An injective non-unital ring homomorphism from a `DivisionRing` to a `NormedRing` induces a
`NormedDivisionRing` structure on the domain.

See note [reducible non-instances] -/
abbrev NormedDivisionRing.induced [DivisionRing R] [NormedDivisionRing S]
    [NonUnitalRingHomClass F R S] (f : F) (hf : Function.Injective f) : NormedDivisionRing R :=
  { NormedAddCommGroup.induced R S f hf, ‚ÄπDivisionRing R‚Ä∫ with
    norm_mul' := fun x y => by
      show ‚Äñf (x * y)‚Äñ = ‚Äñf x‚Äñ * ‚Äñf y‚Äñ
      exact (map_mul f x y).symm ‚ñ∏ norm_mul (f x) (f y) }

/-- An injective non-unital ring homomorphism from a `Field` to a `NormedRing` induces a
`NormedField` structure on the domain.

See note [reducible non-instances] -/
abbrev NormedField.induced [Field R] [NormedField S] [NonUnitalRingHomClass F R S] (f : F)
    (hf : Function.Injective f) : NormedField R :=
  { NormedDivisionRing.induced R S f hf with
    mul_comm := mul_comm }

/-- A ring homomorphism from a `Ring R` to a `SeminormedRing S` which induces the norm structure
`SeminormedRing.induced` makes `R` satisfy `‚Äñ(1 : R)‚Äñ = 1` whenever `‚Äñ(1 : S)‚Äñ = 1`. -/
theorem NormOneClass.induced {F : Type*} (R S : Type*) [Ring R] [SeminormedRing S]
    [NormOneClass S] [FunLike F R S] [RingHomClass F R S] (f : F) :
    @NormOneClass R (SeminormedRing.induced R S f).toNorm _ :=
  -- Porting note: is this `let` a bad idea somehow?
  let _ : SeminormedRing R := SeminormedRing.induced R S f
  { norm_one := (congr_arg norm (map_one f)).trans norm_one }

end Induced

namespace SubringClass

variable {S R : Type*} [SetLike S R]

instance toSeminormedRing [SeminormedRing R] [SubringClass S R] (s : S) : SeminormedRing s :=
  SeminormedRing.induced s R (SubringClass.subtype s)

instance toNormedRing [NormedRing R] [SubringClass S R] (s : S) : NormedRing s :=
  NormedRing.induced s R (SubringClass.subtype s) Subtype.val_injective

instance toSeminormedCommRing [SeminormedCommRing R] [_h : SubringClass S R] (s : S) :
    SeminormedCommRing s :=
  { SubringClass.toSeminormedRing s with mul_comm := mul_comm }

instance toNormedCommRing [NormedCommRing R] [SubringClass S R] (s : S) : NormedCommRing s :=
  { SubringClass.toNormedRing s with mul_comm := mul_comm }

end SubringClass
