/-
Copyright (c) 2024 Bj√∏rn Kjos-Hanssen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bj√∏rn Kjos-Hanssen
-/
import Mathlib.Analysis.Calculus.MeanValue
import Mathlib.Order.Interval.Set.Basic
import Mathlib.Topology.Defs.Filter
import Mathlib.Topology.Order.OrderClosedExtr
import Mathlib.Analysis.Calculus.FDeriv.Add
/-!
# The First-Derivative Test

We prove the first-derivative test in the strong form given on Wikipedia.

The test is proved over the real numbers ‚Ñù
using `monotoneOn_of_deriv_nonneg` from [Mathlib.Analysis.Calculus.MeanValue].

## Main results

* `first_derivative_test_max`: Suppose `f` is a real-valued function of a real variable
  defined on some interval containing the point `a`.
  Further suppose that `f` is continuous at `a` and differentiable on some open interval
  containing `a`, except possibly at `a` itself.

  If there exists a positive number `r > 0` such that for every `x` in `(a ‚àí r, a)`
  we have `f‚Ä≤(x) ‚â• 0`, and for every `x` in `(a, a + r)` we have `f‚Ä≤(x) ‚â§ 0`,
  then `f` has a local maximum at `a`.

* `first_derivative_test_min`: The dual of `first_derivative_max`, for minima.

* `first_derivative_test_max'`: A version of `first_derivative_test_max` for filters.

## Tags

derivative test, calculus
-/

open Set Topology

/-!
### Some facts about differentiability and continuity

We prove a couple of auxiliary lemmas elaborating on facts such as
"differentiable implies continuous",
"an open interval is an open set", and "`fun x => -x` is antitone". -/

/-- If `f'` is the derivative of `f` then  `f' x ‚â§ 0 ‚Üí 0 ‚â§ (-f)' x`. -/
theorem deriv_neg_nonneg {f : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù} (hd‚ÇÄ : DifferentiableOn ‚Ñù f (Set.Ioo a b))
    (h‚ÇÄ : ‚àÄ x ‚àà Set.Ioo a b, deriv f x ‚â§ 0) {x : ‚Ñù} (hx : x ‚àà Set.Ioo a b) : 0 ‚â§ deriv (-f) x :=
  (@deriv.comp ‚Ñù _ x ‚Ñù _ _ f (fun x => -x)
    (Differentiable.differentiableAt differentiable_neg)
    (DifferentiableOn.differentiableAt hd‚ÇÄ (Ioo_mem_nhds hx.1 hx.2))) ‚ñ∏ (by
    rw [deriv_neg'', neg_mul, one_mul, Left.nonneg_neg_iff];
    exact h‚ÇÄ _ hx
  )

/-- If `f'` is the derivative of `f` then  `0 ‚â§ f' x ‚Üí (-f)' x ‚â§ 0`. -/
theorem deriv_neg_nonpos {f : ‚Ñù ‚Üí ‚Ñù} {b c : ‚Ñù} (hd‚ÇÅ : DifferentiableOn ‚Ñù f (Set.Ioo b c))
    (h‚ÇÅ : ‚àÄ x ‚àà Set.Ioo b c, 0 ‚â§ deriv f x) {x : ‚Ñù} (hx : x ‚àà Set.Ioo b c) : deriv (-f) x ‚â§ 0 :=
    (@deriv.comp ‚Ñù _ x ‚Ñù _ _ f (fun x => -x)
    (Differentiable.differentiableAt differentiable_neg)
    (DifferentiableOn.differentiableAt hd‚ÇÅ (Ioo_mem_nhds hx.1 hx.2))) ‚ñ∏ (by
    rw [deriv_neg'', neg_mul, one_mul, Left.neg_nonpos_iff]
    exact h‚ÇÅ _ hx
  )

/-!
### The First-Derivative Test

Using the connection beetween monotonicity and derivatives we obtain the familiar
First-Derivative Test from calculus.
-/


 /-- The First-Derivative Test from calculus, maxima version.
  Suppose `a < b < c`, `f : ‚Ñù ‚Üí ‚Ñù` is continuous at `b`,
  the derivative `f'` is nonnegative on `(a,b)`, and
  the derivative `f'` is nonpositive on `(b,c)`. Then `f` has a local maximum at `a`. -/
lemma first_derivative_test_Ioo_max {f : ‚Ñù ‚Üí ‚Ñù} {a b c : ‚Ñù} (g‚ÇÄ : a < b) (g‚ÇÅ : b < c)
    (h : ContinuousAt f b)
    (hd‚ÇÄ : DifferentiableOn ‚Ñù f (Set.Ioo a b))
    (hd‚ÇÅ : DifferentiableOn ‚Ñù f (Set.Ioo b c))
    (h‚ÇÄ :  ‚àÄ x ‚àà Set.Ioo a b, 0 ‚â§ deriv f x)
    (h‚ÇÅ :  ‚àÄ x ‚àà Set.Ioo b c, deriv f x ‚â§ 0) : IsLocalMax f b :=
  have continuous_Ioc : ContinuousOn f (Ioc a b) :=
    fun _ hx ‚Ü¶ (Ioo_union_right g‚ÇÄ ‚ñ∏ hx).elim
    (fun hx ‚Ü¶ (hd‚ÇÄ.differentiableAt <| Ioo_mem_nhds hx.1 hx.2).continuousAt.continuousWithinAt)
    (fun hx ‚Ü¶ mem_singleton_iff.1 hx ‚ñ∏ h.continuousWithinAt)
  have continuous_Ico : ContinuousOn f (Ico b c) :=
    fun _ hx ‚Ü¶ (Ioo_union_left g‚ÇÅ ‚ñ∏ hx).elim
    (fun hx ‚Ü¶ (hd‚ÇÅ.differentiableAt <| Ioo_mem_nhds hx.1 hx.2).continuousAt.continuousWithinAt)
    (fun hx ‚Ü¶ mem_singleton_iff.1 hx ‚ñ∏ h.continuousWithinAt)
  isLocalMax_of_mono_anti g‚ÇÄ g‚ÇÅ
    (monotoneOn_of_deriv_nonneg (convex_Ioc a b)
    continuous_Ioc (by simp_all) (by simp_all))
    (antitoneOn_of_deriv_nonpos (convex_Ico b c)
    continuous_Ico (by simp_all) (by simp_all))

/-- The First-Derivative Test from calculus, minima version. -/
lemma first_derivative_test_Ioo_min {f : ‚Ñù ‚Üí ‚Ñù} {a b c : ‚Ñù} (h : ContinuousAt f b)
    (g‚ÇÄ : a < b) (g‚ÇÅ : b < c)
    (hd‚ÇÄ : DifferentiableOn ‚Ñù f (Set.Ioo a b)) (hd‚ÇÅ : DifferentiableOn ‚Ñù f (Set.Ioo b c))
    (h‚ÇÄ : ‚àÄ x ‚àà Set.Ioo a b, deriv f x ‚â§ 0)
    (h‚ÇÅ : ‚àÄ x ‚àà Set.Ioo b c, 0 ‚â§ deriv f x) : IsLocalMin f b := by
    have Q := @first_derivative_test_Ioo_max (-f) a b c g‚ÇÄ g‚ÇÅ
      (by simp_all) (DifferentiableOn.neg hd‚ÇÄ) (DifferentiableOn.neg hd‚ÇÅ)
      (fun _ => deriv_neg_nonneg hd‚ÇÄ h‚ÇÄ) (fun _ => deriv_neg_nonpos hd‚ÇÅ h‚ÇÅ)
    unfold IsLocalMax IsMaxFilter at Q
    simp only [Pi.neg_apply, neg_le_neg_iff] at Q
    exact Q


 /-- The First-Derivative Test from calculus, maxima version,
 expressed in terms of left and right filters. -/
lemma first_derivative_test_max‚ÇÄ {f : ‚Ñù ‚Üí ‚Ñù} {b : ‚Ñù} (h : ContinuousAt f b)
    (hd‚ÇÄ : ‚àÄ·∂† x in ùìù[<] b, DifferentiableAt ‚Ñù f x) (hd‚ÇÅ : ‚àÄ·∂† x in ùìù[>] b, DifferentiableAt ‚Ñù f x)
    (h‚ÇÄ  : ‚àÄ·∂† x in ùìù[<] b, 0 ‚â§ deriv f x) (h‚ÇÅ  : ‚àÄ·∂† x in ùìù[>] b, deriv f x ‚â§ 0) :
    IsLocalMax f b := by
  unfold Filter.Eventually at h‚ÇÄ h‚ÇÅ hd‚ÇÄ hd‚ÇÅ
  rw [mem_nhdsWithin_Iio_iff_exists_Ioo_subset] at h‚ÇÄ hd‚ÇÄ
  rw [mem_nhdsWithin_Ioi_iff_exists_Ioo_subset] at h‚ÇÅ hd‚ÇÅ
  obtain ‚ü®u‚ÇÄ,hu‚ÇÄ‚ü© := hd‚ÇÄ; obtain ‚ü®u‚ÇÅ,hu‚ÇÅ‚ü© := hd‚ÇÅ
  obtain ‚ü®v‚ÇÄ,hv‚ÇÄ‚ü© := h‚ÇÄ; obtain ‚ü®v‚ÇÅ,hv‚ÇÅ‚ü© := h‚ÇÅ
  apply isLocalMax_of_mono_anti
  ¬∑ show max u‚ÇÄ v‚ÇÄ < b; exact max_lt (by simp_all) (by simp_all)
  ¬∑ show b < min u‚ÇÅ v‚ÇÅ; exact lt_min (by simp_all) (by simp_all)
  ¬∑ exact monotoneOn_of_deriv_nonneg
      (convex_Ioc _ _)
      (fun x _ => ContinuousAt.continuousWithinAt ((em (x = b)).elim (fun H => H ‚ñ∏ h)
        (fun H => DifferentiableAt.continuousAt (hu‚ÇÄ.2 (by contrapose H;simp_all;linarith)))))
      (fun x _ => DifferentiableAt.differentiableWithinAt (hu‚ÇÄ.2 (by simp_all)))
      (fun x _ => by apply hv‚ÇÄ.2;simp_all)
  ¬∑ exact antitoneOn_of_deriv_nonpos
      (convex_Ico _ _)
      (fun x _ => ContinuousAt.continuousWithinAt ((em (x = b)).elim (fun H => H ‚ñ∏ h)
        (fun H => DifferentiableAt.continuousAt (hu‚ÇÅ.2 (by contrapose H;simp_all;linarith)))))
      (fun x _ => DifferentiableAt.differentiableWithinAt (hu‚ÇÅ.2 (by simp_all)))
      (fun x _ => by apply hv‚ÇÅ.2;simp_all)

/-- If a set `P` contains left and right neighborhoods of a point `x`
then `P` contains a punctured neighborhood. -/
lemma nhdsWithin_punctured_of_Iio_Ioi (P : Set ‚Ñù)
    (hl : P ‚àà nhdsWithin 0 (Set.Iio 0)) (hr : P ‚àà nhdsWithin 0 (Set.Ioi 0)) :
    P ‚àà nhdsWithin 0 {0}·∂ú := by
  rw [mem_nhdsWithin] at *
  obtain ‚ü®u,hu‚ü© := hl
  obtain ‚ü®v,hv‚ü© := hr
  exact ‚ü®u ‚à© v, IsOpen.inter (by tauto) (by tauto), by tauto,
    fun x hx => by
      simp_all only [Set.mem_inter_iff]
      exact  ((lt_or_gt_of_ne hx.2)).elim (fun _ => hu.2.2 (by tauto)) (fun _ => hv.2.2 (by tauto))‚ü©

/-- If a set `P` contains a punctured neighborhood of `x`
then `P` contains a left neighborhoods of `x`. -/
lemma nhdsWithin_Iio_of_punctured {b:‚Ñù} {P : Set ‚Ñù} (h : P ‚àà nhdsWithin b {b}·∂ú) :
    P ‚àà nhdsWithin b (Set.Iio b) := by
  rw [mem_nhdsWithin] at *
  obtain ‚ü®u,hu‚ü© := h
  exact ‚ü®u, hu.1, hu.2.1, fun x hx => hu.2.2 <| by aesop‚ü©

/-- If a set `P` contains a punctured neighborhood of `x`
then `P` contains a right neighborhoods of `x`. -/
lemma nhdsWithin_Ioi_of_punctured {b:‚Ñù} {P : Set ‚Ñù} (h : P ‚àà nhdsWithin b {b}·∂ú) :
    P ‚àà nhdsWithin b (Set.Ioi b) := by
  rw [mem_nhdsWithin] at *
  obtain ‚ü®u,hu‚ü© := h
  exact ‚ü®u, hu.1, hu.2.1, fun x hx => hu.2.2 <| by aesop‚ü©

/-- The First Derivative test, maximum version. -/
theorem first_derivative_test_max {f : ‚Ñù ‚Üí ‚Ñù} {b : ‚Ñù} (h : ContinuousAt f b)
    (hd : ‚àÄ·∂† x in ùìù[‚â†] b, DifferentiableAt ‚Ñù f x)
    (h‚ÇÄ  : ‚àÄ·∂† x in ùìù[<] b, 0 ‚â§ deriv f x) (h‚ÇÅ  : ‚àÄ·∂† x in ùìù[>] b, deriv f x ‚â§ 0) :
    IsLocalMax f b :=
  first_derivative_test_max‚ÇÄ h
    (nhdsWithin_Iio_of_punctured (by tauto)) (nhdsWithin_Ioi_of_punctured (by tauto)) h‚ÇÄ h‚ÇÅ
