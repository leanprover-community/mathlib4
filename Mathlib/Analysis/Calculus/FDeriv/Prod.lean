/-
Copyright (c) 2019 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jeremy Avigad, S√©bastien Gou√´zel, Yury Kudryashov, Eric Wieser
-/
import Mathlib.Analysis.Calculus.FDeriv.Linear
import Mathlib.Analysis.Calculus.FDeriv.Comp

/-!
# Derivative of the cartesian product of functions

For detailed documentation of the Fr√©chet derivative,
see the module docstring of `Analysis/Calculus/FDeriv/Basic.lean`.

This file contains the usual formulas (and existence assertions) for the derivative of
cartesian products of functions, and functions into Pi-types.
-/


open Filter Asymptotics ContinuousLinearMap Set Metric Topology NNReal ENNReal

noncomputable section

section

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
variable {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]
variable {G : Type*} [NormedAddCommGroup G] [NormedSpace ùïú G]
variable {G' : Type*} [NormedAddCommGroup G'] [NormedSpace ùïú G']
variable {f f‚ÇÄ f‚ÇÅ g : E ‚Üí F}
variable {f' f‚ÇÄ' f‚ÇÅ' g' : E ‚ÜíL[ùïú] F}
variable (e : E ‚ÜíL[ùïú] F)
variable {x : E}
variable {s t : Set E}
variable {L L‚ÇÅ L‚ÇÇ : Filter E}

section CartesianProduct

/-! ### Derivative of the cartesian product of two functions -/


section Prod

variable {f‚ÇÇ : E ‚Üí G} {f‚ÇÇ' : E ‚ÜíL[ùïú] G}

protected theorem HasStrictFDerivAt.prodMk (hf‚ÇÅ : HasStrictFDerivAt f‚ÇÅ f‚ÇÅ' x)
    (hf‚ÇÇ : HasStrictFDerivAt f‚ÇÇ f‚ÇÇ' x) :
    HasStrictFDerivAt (fun x => (f‚ÇÅ x, f‚ÇÇ x)) (f‚ÇÅ'.prod f‚ÇÇ') x :=
  .of_isLittleO <| hf‚ÇÅ.isLittleO.prod_left hf‚ÇÇ.isLittleO

@[deprecated (since := "2025-03-09")]
alias HasStrictFDerivAt.prod := HasStrictFDerivAt.prodMk

theorem HasFDerivAtFilter.prodMk (hf‚ÇÅ : HasFDerivAtFilter f‚ÇÅ f‚ÇÅ' x L)
    (hf‚ÇÇ : HasFDerivAtFilter f‚ÇÇ f‚ÇÇ' x L) :
    HasFDerivAtFilter (fun x => (f‚ÇÅ x, f‚ÇÇ x)) (f‚ÇÅ'.prod f‚ÇÇ') x L :=
  .of_isLittleO <| hf‚ÇÅ.isLittleO.prod_left hf‚ÇÇ.isLittleO

@[deprecated (since := "2025-03-09")]
alias HasFDerivAtFilter.prod := HasFDerivAtFilter.prodMk

@[fun_prop]
nonrec theorem HasFDerivWithinAt.prodMk (hf‚ÇÅ : HasFDerivWithinAt f‚ÇÅ f‚ÇÅ' s x)
    (hf‚ÇÇ : HasFDerivWithinAt f‚ÇÇ f‚ÇÇ' s x) :
    HasFDerivWithinAt (fun x => (f‚ÇÅ x, f‚ÇÇ x)) (f‚ÇÅ'.prod f‚ÇÇ') s x :=
  hf‚ÇÅ.prodMk hf‚ÇÇ

@[deprecated (since := "2025-03-09")]
alias HasFDerivWithinAt.prod := HasFDerivWithinAt.prodMk

@[fun_prop]
nonrec theorem HasFDerivAt.prodMk (hf‚ÇÅ : HasFDerivAt f‚ÇÅ f‚ÇÅ' x) (hf‚ÇÇ : HasFDerivAt f‚ÇÇ f‚ÇÇ' x) :
    HasFDerivAt (fun x => (f‚ÇÅ x, f‚ÇÇ x)) (f‚ÇÅ'.prod f‚ÇÇ') x :=
  hf‚ÇÅ.prodMk hf‚ÇÇ

@[deprecated (since := "2025-03-09")]
alias HasFDerivAt.prod := HasFDerivAt.prodMk

@[fun_prop]
theorem hasFDerivAt_prodMk_left (e‚ÇÄ : E) (f‚ÇÄ : F) :
    HasFDerivAt (fun e : E => (e, f‚ÇÄ)) (inl ùïú E F) e‚ÇÄ :=
  (hasFDerivAt_id e‚ÇÄ).prodMk (hasFDerivAt_const f‚ÇÄ e‚ÇÄ)

@[deprecated (since := "2025-03-09")]
alias hasFDerivAt_prod_mk_left := hasFDerivAt_prodMk_left

@[fun_prop]
theorem hasFDerivAt_prodMk_right (e‚ÇÄ : E) (f‚ÇÄ : F) :
    HasFDerivAt (fun f : F => (e‚ÇÄ, f)) (inr ùïú E F) f‚ÇÄ :=
  (hasFDerivAt_const e‚ÇÄ f‚ÇÄ).prodMk (hasFDerivAt_id f‚ÇÄ)

@[deprecated (since := "2025-03-09")]
alias hasFDerivAt_prod_mk_right := hasFDerivAt_prodMk_right

@[fun_prop]
theorem DifferentiableWithinAt.prodMk (hf‚ÇÅ : DifferentiableWithinAt ùïú f‚ÇÅ s x)
    (hf‚ÇÇ : DifferentiableWithinAt ùïú f‚ÇÇ s x) :
    DifferentiableWithinAt ùïú (fun x : E => (f‚ÇÅ x, f‚ÇÇ x)) s x :=
  (hf‚ÇÅ.hasFDerivWithinAt.prodMk hf‚ÇÇ.hasFDerivWithinAt).differentiableWithinAt

@[deprecated (since := "2025-03-09")]
alias DifferentiableWithinAt.prod := DifferentiableWithinAt.prodMk

@[simp, fun_prop]
theorem DifferentiableAt.prodMk (hf‚ÇÅ : DifferentiableAt ùïú f‚ÇÅ x) (hf‚ÇÇ : DifferentiableAt ùïú f‚ÇÇ x) :
    DifferentiableAt ùïú (fun x : E => (f‚ÇÅ x, f‚ÇÇ x)) x :=
  (hf‚ÇÅ.hasFDerivAt.prodMk hf‚ÇÇ.hasFDerivAt).differentiableAt

@[deprecated (since := "2025-03-09")]
alias DifferentiableAt.prod := DifferentiableAt.prodMk

@[fun_prop]
theorem DifferentiableOn.prodMk (hf‚ÇÅ : DifferentiableOn ùïú f‚ÇÅ s) (hf‚ÇÇ : DifferentiableOn ùïú f‚ÇÇ s) :
    DifferentiableOn ùïú (fun x : E => (f‚ÇÅ x, f‚ÇÇ x)) s := fun x hx => (hf‚ÇÅ x hx).prodMk (hf‚ÇÇ x hx)

@[deprecated (since := "2025-03-09")]
alias DifferentiableOn.prod := DifferentiableOn.prodMk

@[simp, fun_prop]
theorem Differentiable.prodMk (hf‚ÇÅ : Differentiable ùïú f‚ÇÅ) (hf‚ÇÇ : Differentiable ùïú f‚ÇÇ) :
    Differentiable ùïú fun x : E => (f‚ÇÅ x, f‚ÇÇ x) := fun x ‚Ü¶
  (hf‚ÇÅ x).prodMk (hf‚ÇÇ x)

@[deprecated (since := "2025-03-09")]
alias Differentiable.prod := Differentiable.prodMk

theorem DifferentiableAt.fderiv_prodMk (hf‚ÇÅ : DifferentiableAt ùïú f‚ÇÅ x)
    (hf‚ÇÇ : DifferentiableAt ùïú f‚ÇÇ x) :
    fderiv ùïú (fun x : E => (f‚ÇÅ x, f‚ÇÇ x)) x = (fderiv ùïú f‚ÇÅ x).prod (fderiv ùïú f‚ÇÇ x) :=
  (hf‚ÇÅ.hasFDerivAt.prodMk hf‚ÇÇ.hasFDerivAt).fderiv

@[deprecated (since := "2025-03-09")]
alias DifferentiableAt.fderiv_prod := DifferentiableAt.fderiv_prodMk

theorem DifferentiableWithinAt.fderivWithin_prodMk (hf‚ÇÅ : DifferentiableWithinAt ùïú f‚ÇÅ s x)
    (hf‚ÇÇ : DifferentiableWithinAt ùïú f‚ÇÇ s x) (hxs : UniqueDiffWithinAt ùïú s x) :
    fderivWithin ùïú (fun x : E => (f‚ÇÅ x, f‚ÇÇ x)) s x =
      (fderivWithin ùïú f‚ÇÅ s x).prod (fderivWithin ùïú f‚ÇÇ s x) :=
  (hf‚ÇÅ.hasFDerivWithinAt.prodMk hf‚ÇÇ.hasFDerivWithinAt).fderivWithin hxs

@[deprecated (since := "2025-03-09")]
alias DifferentiableWithinAt.fderivWithin_prod := DifferentiableWithinAt.fderivWithin_prodMk

end Prod

section Fst

variable {f‚ÇÇ : E ‚Üí F √ó G} {f‚ÇÇ' : E ‚ÜíL[ùïú] F √ó G} {p : E √ó F}

@[fun_prop]
theorem hasStrictFDerivAt_fst : HasStrictFDerivAt (@Prod.fst E F) (fst ùïú E F) p :=
  (fst ùïú E F).hasStrictFDerivAt

@[fun_prop]
protected theorem HasStrictFDerivAt.fst (h : HasStrictFDerivAt f‚ÇÇ f‚ÇÇ' x) :
    HasStrictFDerivAt (fun x => (f‚ÇÇ x).1) ((fst ùïú F G).comp f‚ÇÇ') x :=
  hasStrictFDerivAt_fst.comp x h

theorem hasFDerivAtFilter_fst {L : Filter (E √ó F)} :
    HasFDerivAtFilter (@Prod.fst E F) (fst ùïú E F) p L :=
  (fst ùïú E F).hasFDerivAtFilter

protected theorem HasFDerivAtFilter.fst (h : HasFDerivAtFilter f‚ÇÇ f‚ÇÇ' x L) :
    HasFDerivAtFilter (fun x => (f‚ÇÇ x).1) ((fst ùïú F G).comp f‚ÇÇ') x L :=
  hasFDerivAtFilter_fst.comp x h tendsto_map

@[fun_prop]
theorem hasFDerivAt_fst : HasFDerivAt (@Prod.fst E F) (fst ùïú E F) p :=
  hasFDerivAtFilter_fst

@[fun_prop]
protected nonrec theorem HasFDerivAt.fst (h : HasFDerivAt f‚ÇÇ f‚ÇÇ' x) :
    HasFDerivAt (fun x => (f‚ÇÇ x).1) ((fst ùïú F G).comp f‚ÇÇ') x :=
  h.fst

@[fun_prop]
theorem hasFDerivWithinAt_fst {s : Set (E √ó F)} :
    HasFDerivWithinAt (@Prod.fst E F) (fst ùïú E F) s p :=
  hasFDerivAtFilter_fst

@[fun_prop]
protected nonrec theorem HasFDerivWithinAt.fst (h : HasFDerivWithinAt f‚ÇÇ f‚ÇÇ' s x) :
    HasFDerivWithinAt (fun x => (f‚ÇÇ x).1) ((fst ùïú F G).comp f‚ÇÇ') s x :=
  h.fst

@[fun_prop]
theorem differentiableAt_fst : DifferentiableAt ùïú Prod.fst p :=
  hasFDerivAt_fst.differentiableAt

@[simp, fun_prop]
protected theorem DifferentiableAt.fst (h : DifferentiableAt ùïú f‚ÇÇ x) :
    DifferentiableAt ùïú (fun x => (f‚ÇÇ x).1) x :=
  differentiableAt_fst.comp x h

@[fun_prop]
theorem differentiable_fst : Differentiable ùïú (Prod.fst : E √ó F ‚Üí E) := fun _ =>
  differentiableAt_fst

@[simp, fun_prop]
protected theorem Differentiable.fst (h : Differentiable ùïú f‚ÇÇ) :
    Differentiable ùïú fun x => (f‚ÇÇ x).1 :=
  differentiable_fst.comp h

@[fun_prop]
theorem differentiableWithinAt_fst {s : Set (E √ó F)} : DifferentiableWithinAt ùïú Prod.fst s p :=
  differentiableAt_fst.differentiableWithinAt

@[fun_prop]
protected theorem DifferentiableWithinAt.fst (h : DifferentiableWithinAt ùïú f‚ÇÇ s x) :
    DifferentiableWithinAt ùïú (fun x => (f‚ÇÇ x).1) s x :=
  differentiableAt_fst.comp_differentiableWithinAt x h

@[fun_prop]
theorem differentiableOn_fst {s : Set (E √ó F)} : DifferentiableOn ùïú Prod.fst s :=
  differentiable_fst.differentiableOn

@[fun_prop]
protected theorem DifferentiableOn.fst (h : DifferentiableOn ùïú f‚ÇÇ s) :
    DifferentiableOn ùïú (fun x => (f‚ÇÇ x).1) s :=
  differentiable_fst.comp_differentiableOn h

theorem fderiv_fst : fderiv ùïú Prod.fst p = fst ùïú E F :=
  hasFDerivAt_fst.fderiv

theorem fderiv.fst (h : DifferentiableAt ùïú f‚ÇÇ x) :
    fderiv ùïú (fun x => (f‚ÇÇ x).1) x = (fst ùïú F G).comp (fderiv ùïú f‚ÇÇ x) :=
  h.hasFDerivAt.fst.fderiv

theorem fderivWithin_fst {s : Set (E √ó F)} (hs : UniqueDiffWithinAt ùïú s p) :
    fderivWithin ùïú Prod.fst s p = fst ùïú E F :=
  hasFDerivWithinAt_fst.fderivWithin hs

theorem fderivWithin.fst (hs : UniqueDiffWithinAt ùïú s x) (h : DifferentiableWithinAt ùïú f‚ÇÇ s x) :
    fderivWithin ùïú (fun x => (f‚ÇÇ x).1) s x = (fst ùïú F G).comp (fderivWithin ùïú f‚ÇÇ s x) :=
  h.hasFDerivWithinAt.fst.fderivWithin hs

end Fst

section Snd

variable {f‚ÇÇ : E ‚Üí F √ó G} {f‚ÇÇ' : E ‚ÜíL[ùïú] F √ó G} {p : E √ó F}

@[fun_prop]
theorem hasStrictFDerivAt_snd : HasStrictFDerivAt (@Prod.snd E F) (snd ùïú E F) p :=
  (snd ùïú E F).hasStrictFDerivAt

@[fun_prop]
protected theorem HasStrictFDerivAt.snd (h : HasStrictFDerivAt f‚ÇÇ f‚ÇÇ' x) :
    HasStrictFDerivAt (fun x => (f‚ÇÇ x).2) ((snd ùïú F G).comp f‚ÇÇ') x :=
  hasStrictFDerivAt_snd.comp x h

theorem hasFDerivAtFilter_snd {L : Filter (E √ó F)} :
    HasFDerivAtFilter (@Prod.snd E F) (snd ùïú E F) p L :=
  (snd ùïú E F).hasFDerivAtFilter

protected theorem HasFDerivAtFilter.snd (h : HasFDerivAtFilter f‚ÇÇ f‚ÇÇ' x L) :
    HasFDerivAtFilter (fun x => (f‚ÇÇ x).2) ((snd ùïú F G).comp f‚ÇÇ') x L :=
  hasFDerivAtFilter_snd.comp x h tendsto_map

@[fun_prop]
theorem hasFDerivAt_snd : HasFDerivAt (@Prod.snd E F) (snd ùïú E F) p :=
  hasFDerivAtFilter_snd

@[fun_prop]
protected nonrec theorem HasFDerivAt.snd (h : HasFDerivAt f‚ÇÇ f‚ÇÇ' x) :
    HasFDerivAt (fun x => (f‚ÇÇ x).2) ((snd ùïú F G).comp f‚ÇÇ') x :=
  h.snd

@[fun_prop]
theorem hasFDerivWithinAt_snd {s : Set (E √ó F)} :
    HasFDerivWithinAt (@Prod.snd E F) (snd ùïú E F) s p :=
  hasFDerivAtFilter_snd

@[fun_prop]
protected nonrec theorem HasFDerivWithinAt.snd (h : HasFDerivWithinAt f‚ÇÇ f‚ÇÇ' s x) :
    HasFDerivWithinAt (fun x => (f‚ÇÇ x).2) ((snd ùïú F G).comp f‚ÇÇ') s x :=
  h.snd

@[fun_prop]
theorem differentiableAt_snd : DifferentiableAt ùïú Prod.snd p :=
  hasFDerivAt_snd.differentiableAt

@[simp, fun_prop]
protected theorem DifferentiableAt.snd (h : DifferentiableAt ùïú f‚ÇÇ x) :
    DifferentiableAt ùïú (fun x => (f‚ÇÇ x).2) x :=
  differentiableAt_snd.comp x h

@[fun_prop]
theorem differentiable_snd : Differentiable ùïú (Prod.snd : E √ó F ‚Üí F) := fun _ =>
  differentiableAt_snd

@[simp, fun_prop]
protected theorem Differentiable.snd (h : Differentiable ùïú f‚ÇÇ) :
    Differentiable ùïú fun x => (f‚ÇÇ x).2 :=
  differentiable_snd.comp h

@[fun_prop]
theorem differentiableWithinAt_snd {s : Set (E √ó F)} : DifferentiableWithinAt ùïú Prod.snd s p :=
  differentiableAt_snd.differentiableWithinAt

@[fun_prop]
protected theorem DifferentiableWithinAt.snd (h : DifferentiableWithinAt ùïú f‚ÇÇ s x) :
    DifferentiableWithinAt ùïú (fun x => (f‚ÇÇ x).2) s x :=
  differentiableAt_snd.comp_differentiableWithinAt x h

@[fun_prop]
theorem differentiableOn_snd {s : Set (E √ó F)} : DifferentiableOn ùïú Prod.snd s :=
  differentiable_snd.differentiableOn

@[fun_prop]
protected theorem DifferentiableOn.snd (h : DifferentiableOn ùïú f‚ÇÇ s) :
    DifferentiableOn ùïú (fun x => (f‚ÇÇ x).2) s :=
  differentiable_snd.comp_differentiableOn h

theorem fderiv_snd : fderiv ùïú Prod.snd p = snd ùïú E F :=
  hasFDerivAt_snd.fderiv

theorem fderiv.snd (h : DifferentiableAt ùïú f‚ÇÇ x) :
    fderiv ùïú (fun x => (f‚ÇÇ x).2) x = (snd ùïú F G).comp (fderiv ùïú f‚ÇÇ x) :=
  h.hasFDerivAt.snd.fderiv

theorem fderivWithin_snd {s : Set (E √ó F)} (hs : UniqueDiffWithinAt ùïú s p) :
    fderivWithin ùïú Prod.snd s p = snd ùïú E F :=
  hasFDerivWithinAt_snd.fderivWithin hs

theorem fderivWithin.snd (hs : UniqueDiffWithinAt ùïú s x) (h : DifferentiableWithinAt ùïú f‚ÇÇ s x) :
    fderivWithin ùïú (fun x => (f‚ÇÇ x).2) s x = (snd ùïú F G).comp (fderivWithin ùïú f‚ÇÇ s x) :=
  h.hasFDerivWithinAt.snd.fderivWithin hs

end Snd

section prodMap

variable {f‚ÇÇ : G ‚Üí G'} {f‚ÇÇ' : G ‚ÜíL[ùïú] G'} {y : G} (p : E √ó G)

@[fun_prop]
protected theorem HasStrictFDerivAt.prodMap (hf : HasStrictFDerivAt f f' p.1)
    (hf‚ÇÇ : HasStrictFDerivAt f‚ÇÇ f‚ÇÇ' p.2) : HasStrictFDerivAt (Prod.map f f‚ÇÇ) (f'.prodMap f‚ÇÇ') p :=
  (hf.comp p hasStrictFDerivAt_fst).prodMk (hf‚ÇÇ.comp p hasStrictFDerivAt_snd)

@[fun_prop]
protected theorem HasFDerivAt.prodMap (hf : HasFDerivAt f f' p.1) (hf‚ÇÇ : HasFDerivAt f‚ÇÇ f‚ÇÇ' p.2) :
    HasFDerivAt (Prod.map f f‚ÇÇ) (f'.prodMap f‚ÇÇ') p :=
  (hf.comp p hasFDerivAt_fst).prodMk (hf‚ÇÇ.comp p hasFDerivAt_snd)

@[simp, fun_prop]
protected theorem DifferentiableAt.prodMap (hf : DifferentiableAt ùïú f p.1)
    (hf‚ÇÇ : DifferentiableAt ùïú f‚ÇÇ p.2) : DifferentiableAt ùïú (fun p : E √ó G => (f p.1, f‚ÇÇ p.2)) p :=
  (hf.comp p differentiableAt_fst).prodMk (hf‚ÇÇ.comp p differentiableAt_snd)

@[deprecated (since := "2025-03-09")]
alias DifferentiableAt.prod_map := DifferentiableAt.prodMap

end prodMap

section Pi

/-!
### Derivatives of functions `f : E ‚Üí Œ† i, F' i`

In this section we formulate `has*FDeriv*_pi` theorems as `iff`s, and provide two versions of each
theorem:

* the version without `'` deals with `œÜ : Œ† i, E ‚Üí F' i` and `œÜ' : Œ† i, E ‚ÜíL[ùïú] F' i`
  and is designed to deduce differentiability of `fun x i ‚Ü¶ œÜ i x` from differentiability
  of each `œÜ i`;
* the version with `'` deals with `Œ¶ : E ‚Üí Œ† i, F' i` and `Œ¶' : E ‚ÜíL[ùïú] Œ† i, F' i`
  and is designed to deduce differentiability of the components `fun x ‚Ü¶ Œ¶ x i` from
  differentiability of `Œ¶`.
-/


variable {Œπ : Type*} [Fintype Œπ] {F' : Œπ ‚Üí Type*} [‚àÄ i, NormedAddCommGroup (F' i)]
  [‚àÄ i, NormedSpace ùïú (F' i)] {œÜ : ‚àÄ i, E ‚Üí F' i} {œÜ' : ‚àÄ i, E ‚ÜíL[ùïú] F' i} {Œ¶ : E ‚Üí ‚àÄ i, F' i}
  {Œ¶' : E ‚ÜíL[ùïú] ‚àÄ i, F' i}

@[simp]
theorem hasStrictFDerivAt_pi' :
    HasStrictFDerivAt Œ¶ Œ¶' x ‚Üî ‚àÄ i, HasStrictFDerivAt (fun x => Œ¶ x i) ((proj i).comp Œ¶') x := by
  simp only [hasStrictFDerivAt_iff_isLittleO, ContinuousLinearMap.coe_pi]
  exact isLittleO_pi

@[fun_prop]
theorem hasStrictFDerivAt_pi'' (hœÜ : ‚àÄ i, HasStrictFDerivAt (fun x => Œ¶ x i) ((proj i).comp Œ¶') x) :
    HasStrictFDerivAt Œ¶ Œ¶' x := hasStrictFDerivAt_pi'.2 hœÜ

@[fun_prop]
theorem hasStrictFDerivAt_apply (i : Œπ) (f : ‚àÄ i, F' i) :
    HasStrictFDerivAt (ùïú := ùïú) (fun f : ‚àÄ i, F' i => f i) (proj i) f := by
  let id' := ContinuousLinearMap.id ùïú (‚àÄ i, F' i)
  have h := ((hasStrictFDerivAt_pi'
             (Œ¶ := fun (f : ‚àÄ i, F' i) (i' : Œπ) => f i') (Œ¶' := id') (x := f))).1
  have h' : comp (proj i) id' = proj i := by ext; simp [id']
  rw [‚Üê h']; apply h; apply hasStrictFDerivAt_id

@[simp 1100] -- Porting note: increased priority to make lint happy
theorem hasStrictFDerivAt_pi :
    HasStrictFDerivAt (fun x i => œÜ i x) (ContinuousLinearMap.pi œÜ') x ‚Üî
      ‚àÄ i, HasStrictFDerivAt (œÜ i) (œÜ' i) x :=
  hasStrictFDerivAt_pi'

@[simp]
theorem hasFDerivAtFilter_pi' :
    HasFDerivAtFilter Œ¶ Œ¶' x L ‚Üî
      ‚àÄ i, HasFDerivAtFilter (fun x => Œ¶ x i) ((proj i).comp Œ¶') x L := by
  simp only [hasFDerivAtFilter_iff_isLittleO, ContinuousLinearMap.coe_pi]
  exact isLittleO_pi

theorem hasFDerivAtFilter_pi :
    HasFDerivAtFilter (fun x i => œÜ i x) (ContinuousLinearMap.pi œÜ') x L ‚Üî
      ‚àÄ i, HasFDerivAtFilter (œÜ i) (œÜ' i) x L :=
  hasFDerivAtFilter_pi'

@[simp]
theorem hasFDerivAt_pi' :
    HasFDerivAt Œ¶ Œ¶' x ‚Üî ‚àÄ i, HasFDerivAt (fun x => Œ¶ x i) ((proj i).comp Œ¶') x :=
  hasFDerivAtFilter_pi'

@[fun_prop]
theorem hasFDerivAt_pi'' (hœÜ : ‚àÄ i, HasFDerivAt (fun x => Œ¶ x i) ((proj i).comp Œ¶') x) :
    HasFDerivAt Œ¶ Œ¶' x := hasFDerivAt_pi'.2 hœÜ

@[fun_prop]
theorem hasFDerivAt_apply (i : Œπ) (f : ‚àÄ i, F' i) :
    HasFDerivAt (ùïú := ùïú) (fun f : ‚àÄ i, F' i => f i) (proj i) f := by
  apply HasStrictFDerivAt.hasFDerivAt
  apply hasStrictFDerivAt_apply

theorem hasFDerivAt_pi :
    HasFDerivAt (fun x i => œÜ i x) (ContinuousLinearMap.pi œÜ') x ‚Üî
      ‚àÄ i, HasFDerivAt (œÜ i) (œÜ' i) x :=
  hasFDerivAtFilter_pi

@[simp]
theorem hasFDerivWithinAt_pi' :
    HasFDerivWithinAt Œ¶ Œ¶' s x ‚Üî ‚àÄ i, HasFDerivWithinAt (fun x => Œ¶ x i) ((proj i).comp Œ¶') s x :=
  hasFDerivAtFilter_pi'

@[fun_prop]
theorem hasFDerivWithinAt_pi''
    (hœÜ : ‚àÄ i, HasFDerivWithinAt (fun x => Œ¶ x i) ((proj i).comp Œ¶') s x) :
    HasFDerivWithinAt Œ¶ Œ¶' s x := hasFDerivWithinAt_pi'.2 hœÜ

@[fun_prop]
theorem hasFDerivWithinAt_apply (i : Œπ) (f : ‚àÄ i, F' i) (s' : Set (‚àÄ i, F' i)) :
    HasFDerivWithinAt (ùïú := ùïú) (fun f : ‚àÄ i, F' i => f i) (proj i) s' f := by
  let id' := ContinuousLinearMap.id ùïú (‚àÄ i, F' i)
  have h := ((hasFDerivWithinAt_pi'
             (Œ¶ := fun (f : ‚àÄ i, F' i) (i' : Œπ) => f i') (Œ¶' := id') (x := f) (s := s'))).1
  have h' : comp (proj i) id' = proj i := by rfl
  rw [‚Üê h']; apply h; apply hasFDerivWithinAt_id

theorem hasFDerivWithinAt_pi :
    HasFDerivWithinAt (fun x i => œÜ i x) (ContinuousLinearMap.pi œÜ') s x ‚Üî
      ‚àÄ i, HasFDerivWithinAt (œÜ i) (œÜ' i) s x :=
  hasFDerivAtFilter_pi

@[simp]
theorem differentiableWithinAt_pi :
    DifferentiableWithinAt ùïú Œ¶ s x ‚Üî ‚àÄ i, DifferentiableWithinAt ùïú (fun x => Œ¶ x i) s x :=
  ‚ü®fun h i => (hasFDerivWithinAt_pi'.1 h.hasFDerivWithinAt i).differentiableWithinAt, fun h =>
    (hasFDerivWithinAt_pi.2 fun i => (h i).hasFDerivWithinAt).differentiableWithinAt‚ü©

@[fun_prop]
theorem differentiableWithinAt_pi'' (hœÜ : ‚àÄ i, DifferentiableWithinAt ùïú (fun x => Œ¶ x i) s x) :
    DifferentiableWithinAt ùïú Œ¶ s x := differentiableWithinAt_pi.2 hœÜ

@[fun_prop]
theorem differentiableWithinAt_apply (i : Œπ) (f : ‚àÄ i, F' i) (s' : Set (‚àÄ i, F' i)) :
    DifferentiableWithinAt (ùïú := ùïú) (fun f : ‚àÄ i, F' i => f i) s' f := by
  apply HasFDerivWithinAt.differentiableWithinAt
  fun_prop

@[simp]
theorem differentiableAt_pi : DifferentiableAt ùïú Œ¶ x ‚Üî ‚àÄ i, DifferentiableAt ùïú (fun x => Œ¶ x i) x :=
  ‚ü®fun h i => (hasFDerivAt_pi'.1 h.hasFDerivAt i).differentiableAt, fun h =>
    (hasFDerivAt_pi.2 fun i => (h i).hasFDerivAt).differentiableAt‚ü©

@[fun_prop]
theorem differentiableAt_pi'' (hœÜ : ‚àÄ i, DifferentiableAt ùïú (fun x => Œ¶ x i) x) :
    DifferentiableAt ùïú Œ¶ x := differentiableAt_pi.2 hœÜ

@[fun_prop]
theorem differentiableAt_apply (i : Œπ) (f : ‚àÄ i, F' i) :
    DifferentiableAt (ùïú := ùïú) (fun f : ‚àÄ i, F' i => f i) f := by
  have h := ((differentiableAt_pi (ùïú := ùïú)
             (Œ¶ := fun (f : ‚àÄ i, F' i) (i' : Œπ) => f i') (x := f))).1
  apply h; apply differentiableAt_id

theorem differentiableOn_pi : DifferentiableOn ùïú Œ¶ s ‚Üî ‚àÄ i, DifferentiableOn ùïú (fun x => Œ¶ x i) s :=
  ‚ü®fun h i x hx => differentiableWithinAt_pi.1 (h x hx) i, fun h x hx =>
    differentiableWithinAt_pi.2 fun i => h i x hx‚ü©

@[fun_prop]
theorem differentiableOn_pi'' (hœÜ : ‚àÄ i, DifferentiableOn ùïú (fun x => Œ¶ x i) s) :
    DifferentiableOn ùïú Œ¶ s := differentiableOn_pi.2 hœÜ

@[fun_prop]
theorem differentiableOn_apply (i : Œπ) (s' : Set (‚àÄ i, F' i)) :
    DifferentiableOn (ùïú := ùïú) (fun f : ‚àÄ i, F' i => f i) s' := by
  have h := ((differentiableOn_pi (ùïú := ùïú)
             (Œ¶ := fun (f : ‚àÄ i, F' i) (i' : Œπ) => f i') (s := s'))).1
  apply h; apply differentiableOn_id

theorem differentiable_pi : Differentiable ùïú Œ¶ ‚Üî ‚àÄ i, Differentiable ùïú fun x => Œ¶ x i :=
  ‚ü®fun h i x => differentiableAt_pi.1 (h x) i, fun h x => differentiableAt_pi.2 fun i => h i x‚ü©

@[fun_prop]
theorem differentiable_pi'' (hœÜ : ‚àÄ i, Differentiable ùïú fun x => Œ¶ x i) :
    Differentiable ùïú Œ¶ := differentiable_pi.2 hœÜ

@[fun_prop]
theorem differentiable_apply (i : Œπ) :
    Differentiable (ùïú := ùïú) (fun f : ‚àÄ i, F' i => f i) := by intro x; apply differentiableAt_apply

-- TODO: find out which version (`œÜ` or `Œ¶`) works better with `rw`/`simp`
theorem fderivWithin_pi (h : ‚àÄ i, DifferentiableWithinAt ùïú (œÜ i) s x)
    (hs : UniqueDiffWithinAt ùïú s x) :
    fderivWithin ùïú (fun x i => œÜ i x) s x = pi fun i => fderivWithin ùïú (œÜ i) s x :=
  (hasFDerivWithinAt_pi.2 fun i => (h i).hasFDerivWithinAt).fderivWithin hs

theorem fderiv_pi (h : ‚àÄ i, DifferentiableAt ùïú (œÜ i) x) :
    fderiv ùïú (fun x i => œÜ i x) x = pi fun i => fderiv ùïú (œÜ i) x :=
  (hasFDerivAt_pi.2 fun i => (h i).hasFDerivAt).fderiv

end Pi

/-!
### Derivatives of tuples `f : E ‚Üí Œ† i : Fin n.succ, F' i`

These can be used to prove results about functions of the form `fun x ‚Ü¶ ![f x, g x, h x]`,
as `Matrix.vecCons` is defeq to `Fin.cons`.
-/
section PiFin

variable {n : Nat} {F' : Fin n.succ ‚Üí Type*}
variable [‚àÄ i, NormedAddCommGroup (F' i)] [‚àÄ i, NormedSpace ùïú (F' i)]
variable {œÜ : E ‚Üí F' 0} {œÜs : E ‚Üí ‚àÄ i, F' (Fin.succ i)}

theorem hasStrictFDerivAt_finCons {œÜ' : E ‚ÜíL[ùïú] Œ† i, F' i} :
    HasStrictFDerivAt (fun x => Fin.cons (œÜ x) (œÜs x)) œÜ' x ‚Üî
      HasStrictFDerivAt œÜ (.proj 0 ‚àòL œÜ') x ‚àß
      HasStrictFDerivAt œÜs (Pi.compRightL ùïú F' Fin.succ ‚àòL œÜ') x := by
  rw [hasStrictFDerivAt_pi', Fin.forall_fin_succ, hasStrictFDerivAt_pi']
  dsimp [ContinuousLinearMap.comp, LinearMap.comp, Function.comp_def]
  simp only [Fin.cons_zero, Fin.cons_succ]

/-- A variant of `hasStrictFDerivAt_finCons` where the derivative variables are free on the RHS
instead. -/
theorem hasStrictFDerivAt_finCons'
    {œÜ' : E ‚ÜíL[ùïú] F' 0} {œÜs' : E ‚ÜíL[ùïú] Œ† i, F' (Fin.succ i)} :
    HasStrictFDerivAt (fun x => Fin.cons (œÜ x) (œÜs x)) (œÜ'.finCons œÜs') x ‚Üî
      HasStrictFDerivAt œÜ œÜ' x ‚àß HasStrictFDerivAt œÜs œÜs' x :=
  hasStrictFDerivAt_finCons

@[fun_prop]
theorem HasStrictFDerivAt.finCons
    {œÜ' : E ‚ÜíL[ùïú] F' 0} {œÜs' : E ‚ÜíL[ùïú] Œ† i, F' (Fin.succ i)}
    (h : HasStrictFDerivAt œÜ œÜ' x) (hs : HasStrictFDerivAt œÜs œÜs' x) :
    HasStrictFDerivAt (fun x => Fin.cons (œÜ x) (œÜs x)) (œÜ'.finCons œÜs') x :=
  hasStrictFDerivAt_finCons'.mpr ‚ü®h, hs‚ü©

theorem hasFDerivAtFilter_finCons
    {œÜ' : E ‚ÜíL[ùïú] Œ† i, F' i} {l : Filter E} :
    HasFDerivAtFilter (fun x => Fin.cons (œÜ x) (œÜs x)) œÜ' x l ‚Üî
      HasFDerivAtFilter œÜ (.proj 0 ‚àòL œÜ') x l ‚àß
      HasFDerivAtFilter œÜs (Pi.compRightL ùïú F' Fin.succ ‚àòL œÜ') x l := by
  rw [hasFDerivAtFilter_pi', Fin.forall_fin_succ, hasFDerivAtFilter_pi']
  dsimp [ContinuousLinearMap.comp, LinearMap.comp, Function.comp_def]
  simp only [Fin.cons_zero, Fin.cons_succ]

/-- A variant of `hasFDerivAtFilter_finCons` where the derivative variables are free on the RHS
instead. -/
theorem hasFDerivAtFilter_finCons'
    {œÜ' : E ‚ÜíL[ùïú] F' 0} {œÜs' : E ‚ÜíL[ùïú] Œ† i, F' (Fin.succ i)} {l : Filter E} :
    HasFDerivAtFilter (fun x => Fin.cons (œÜ x) (œÜs x)) (œÜ'.finCons œÜs') x l ‚Üî
      HasFDerivAtFilter œÜ œÜ' x l ‚àß HasFDerivAtFilter œÜs œÜs' x l :=
  hasFDerivAtFilter_finCons

theorem HasFDerivAtFilter.finCons
    {œÜ' : E ‚ÜíL[ùïú] F' 0} {œÜs' : E ‚ÜíL[ùïú] Œ† i, F' (Fin.succ i)} {l : Filter E}
    (h : HasFDerivAtFilter œÜ œÜ' x l) (hs : HasFDerivAtFilter œÜs œÜs' x l) :
    HasFDerivAtFilter (fun x => Fin.cons (œÜ x) (œÜs x)) (œÜ'.finCons œÜs') x l :=
  hasFDerivAtFilter_finCons'.mpr ‚ü®h, hs‚ü©

theorem hasFDerivAt_finCons
    {œÜ' : E ‚ÜíL[ùïú] Œ† i, F' i} :
    HasFDerivAt (fun x => Fin.cons (œÜ x) (œÜs x)) œÜ' x ‚Üî
      HasFDerivAt œÜ (.proj 0 ‚àòL œÜ') x ‚àß HasFDerivAt œÜs (Pi.compRightL ùïú F' Fin.succ ‚àòL œÜ') x :=
  hasFDerivAtFilter_finCons

/-- A variant of `hasFDerivAt_finCons` where the derivative variables are free on the RHS
instead. -/
theorem hasFDerivAt_finCons'
    {œÜ' : E ‚ÜíL[ùïú] F' 0} {œÜs' : E ‚ÜíL[ùïú] Œ† i, F' (Fin.succ i)} :
    HasFDerivAt (fun x => Fin.cons (œÜ x) (œÜs x)) (œÜ'.finCons œÜs') x ‚Üî
      HasFDerivAt œÜ œÜ' x ‚àß HasFDerivAt œÜs œÜs' x :=
  hasFDerivAt_finCons

@[fun_prop]
theorem HasFDerivAt.finCons
    {œÜ' : E ‚ÜíL[ùïú] F' 0} {œÜs' : E ‚ÜíL[ùïú] Œ† i, F' (Fin.succ i)}
    (h : HasFDerivAt œÜ œÜ' x) (hs : HasFDerivAt œÜs œÜs' x) :
    HasFDerivAt (fun x => Fin.cons (œÜ x) (œÜs x)) (œÜ'.finCons œÜs') x :=
  hasFDerivAt_finCons'.mpr ‚ü®h, hs‚ü©

theorem hasFDerivWithinAt_finCons
    {œÜ' : E ‚ÜíL[ùïú] Œ† i, F' i} :
    HasFDerivWithinAt (fun x => Fin.cons (œÜ x) (œÜs x)) œÜ' s x ‚Üî
      HasFDerivWithinAt œÜ (.proj 0 ‚àòL œÜ') s x ‚àß
      HasFDerivWithinAt œÜs (Pi.compRightL ùïú F' Fin.succ ‚àòL œÜ') s x :=
  hasFDerivAtFilter_finCons

/-- A variant of `hasFDerivWithinAt_finCons` where the derivative variables are free on the RHS
instead. -/
theorem hasFDerivWithinAt_finCons'
    {œÜ' : E ‚ÜíL[ùïú] F' 0} {œÜs' : E ‚ÜíL[ùïú] Œ† i, F' (Fin.succ i)} :
    HasFDerivWithinAt (fun x => Fin.cons (œÜ x) (œÜs x)) (œÜ'.finCons œÜs') s x ‚Üî
      HasFDerivWithinAt œÜ œÜ' s x ‚àß HasFDerivWithinAt œÜs œÜs' s x :=
  hasFDerivAtFilter_finCons

@[fun_prop]
theorem HasFDerivWithinAt.finCons
    {œÜ' : E ‚ÜíL[ùïú] F' 0} {œÜs' : E ‚ÜíL[ùïú] Œ† i, F' (Fin.succ i)}
    (h : HasFDerivWithinAt œÜ œÜ' s x) (hs : HasFDerivWithinAt œÜs œÜs' s x) :
    HasFDerivWithinAt (fun x => Fin.cons (œÜ x) (œÜs x)) (œÜ'.finCons œÜs') s x :=
  hasFDerivWithinAt_finCons'.mpr ‚ü®h, hs‚ü©

theorem differentiableWithinAt_finCons :
    DifferentiableWithinAt ùïú (fun x => Fin.cons (œÜ x) (œÜs x)) s x ‚Üî
      DifferentiableWithinAt ùïú œÜ s x ‚àß DifferentiableWithinAt ùïú œÜs s x := by
  rw [differentiableWithinAt_pi, Fin.forall_fin_succ, differentiableWithinAt_pi]
  simp only [Fin.cons_zero, Fin.cons_succ]

/-- A variant of `differentiableWithinAt_finCons` where the derivative variables are free on the RHS
instead. -/
theorem differentiableWithinAt_finCons' :
    DifferentiableWithinAt ùïú (fun x => Fin.cons (œÜ x) (œÜs x)) s x ‚Üî
      DifferentiableWithinAt ùïú œÜ s x ‚àß DifferentiableWithinAt ùïú œÜs s x :=
  differentiableWithinAt_finCons

@[fun_prop]
theorem DifferentiableWithinAt.finCons
    (h : DifferentiableWithinAt ùïú œÜ s x) (hs : DifferentiableWithinAt ùïú œÜs s x) :
    DifferentiableWithinAt ùïú (fun x => Fin.cons (œÜ x) (œÜs x)) s x :=
  differentiableWithinAt_finCons'.mpr ‚ü®h, hs‚ü©

theorem differentiableAt_finCons :
    DifferentiableAt ùïú (fun x => Fin.cons (œÜ x) (œÜs x)) x ‚Üî
      DifferentiableAt ùïú œÜ x ‚àß DifferentiableAt ùïú œÜs x := by
  rw [differentiableAt_pi, Fin.forall_fin_succ, differentiableAt_pi]
  simp only [Fin.cons_zero, Fin.cons_succ]

/-- A variant of `differentiableAt_finCons` where the derivative variables are free on the RHS
instead. -/
theorem differentiableAt_finCons' :
    DifferentiableAt ùïú (fun x => Fin.cons (œÜ x) (œÜs x)) x ‚Üî
      DifferentiableAt ùïú œÜ x ‚àß DifferentiableAt ùïú œÜs x :=
  differentiableAt_finCons

@[fun_prop]
theorem DifferentiableAt.finCons
    (h : DifferentiableAt ùïú œÜ x) (hs : DifferentiableAt ùïú œÜs x) :
    DifferentiableAt ùïú (fun x => Fin.cons (œÜ x) (œÜs x)) x :=
  differentiableAt_finCons'.mpr ‚ü®h, hs‚ü©

theorem differentiableOn_finCons :
    DifferentiableOn ùïú (fun x => Fin.cons (œÜ x) (œÜs x)) s ‚Üî
      DifferentiableOn ùïú œÜ s ‚àß DifferentiableOn ùïú œÜs s := by
  rw [differentiableOn_pi, Fin.forall_fin_succ, differentiableOn_pi]
  simp only [Fin.cons_zero, Fin.cons_succ]

/-- A variant of `differentiableOn_finCons` where the derivative variables are free on the RHS
instead. -/
theorem differentiableOn_finCons' :
    DifferentiableOn ùïú (fun x => Fin.cons (œÜ x) (œÜs x)) s ‚Üî
      DifferentiableOn ùïú œÜ s ‚àß DifferentiableOn ùïú œÜs s :=
  differentiableOn_finCons

@[fun_prop]
theorem DifferentiableOn.finCons
    (h : DifferentiableOn ùïú œÜ s) (hs : DifferentiableOn ùïú œÜs s) :
    DifferentiableOn ùïú (fun x => Fin.cons (œÜ x) (œÜs x)) s :=
  differentiableOn_finCons'.mpr ‚ü®h, hs‚ü©

theorem differentiable_finCons :
    Differentiable ùïú (fun x => Fin.cons (œÜ x) (œÜs x)) ‚Üî
      Differentiable ùïú œÜ ‚àß Differentiable ùïú œÜs := by
  rw [differentiable_pi, Fin.forall_fin_succ, differentiable_pi]
  simp only [Fin.cons_zero, Fin.cons_succ]

/-- A variant of `differentiable_finCons` where the derivative variables are free on the RHS
instead. -/
theorem differentiable_finCons' :
    Differentiable ùïú (fun x => Fin.cons (œÜ x) (œÜs x)) ‚Üî
      Differentiable ùïú œÜ ‚àß Differentiable ùïú œÜs :=
  differentiable_finCons

@[fun_prop]
theorem Differentiable.finCons
    (h : Differentiable ùïú œÜ) (hs : Differentiable ùïú œÜs) :
    Differentiable ùïú (fun x => Fin.cons (œÜ x) (œÜs x)) :=
  differentiable_finCons'.mpr ‚ü®h, hs‚ü©

-- TODO: write the `Fin.cons` versions of `fderivWithin_pi` and `fderiv_pi`

end PiFin

end CartesianProduct

end
