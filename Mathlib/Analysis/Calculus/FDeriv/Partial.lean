/-
Copyright (c) 2025 Igor Khavkine. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Igor Khavkine
-/
import Mathlib.Analysis.Calculus.MeanValue

/-!
# Partial derivatives

In this file we prove some basic facts about partial derivatives of functions
defined on a product space, like `f : E √ó F ‚Üí G`:

* `HasFDerivWithinAt.partial_fst` , `HasFDerivWithinAt.partial_snd`: if `f` is differentiable
   with derivative `f' z` at `z`, then the partial derivatives of `(f ‚àò (z.1, ¬∑))`
   and `(f ‚àò (¬∑, z.2))` are respectively `(f' z) ‚àòL (.inl ùïú E F)` and
   `(f' z) ‚àòL (.inr ùïú E F)`. If `f'` is continuous, then continuity can be obtained by
   by combining `Continuous(|At|On|WithinAt).clm_comp` and `Continuous(|At|On|WithinAt)_const`.

* `hasFDerivWithinAt_of_partial_snd_continuousOn_prod_open` : a weak sufficient condition
  for differeniability of `f` at `z = (x,y)` is that, say, the first derivative (within set `s`)
  `f'xz` exists at `z`, while the second partial derivative `f'y z` exists and is continuos on
  a product set `s √óÀ¢ t` where `t` is open, with the derivative given by
  `f'z = f'xz.coprod (f'y z)`. `hasFDerivWithinAt_of_partial_fst_continuousOn_prod_open` has the
  roles of the partial derivatives reversed.

  The proofs follow ¬ß9.8.1 from Dieudonn√©'s *Foundations of Modern Analysis* (1969).

* `hasFDerivWithinAt_continuousOn_of_partial_continuousOn_open`: when both partial derivatives
  exist and are continuous on an open set `u`, this more covenient theorem directly
  deduces continous differentiability on `u`.

-/

open Set Function Metric Real

section PartialFDeriv

/-- Differentiable implies also that the first partial derivative exists. -/
theorem HasFDerivWithinAt.partial_fst
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ùïú G]
  {f : E √ó F ‚Üí G} {f' : E √ó F ‚Üí E √ó F ‚ÜíL[ùïú] G}
  {s : Set E} {t : Set F}
  {z : E √ó F} (hz : z ‚àà s √óÀ¢ t)
  (hf : HasFDerivWithinAt f (f' z) (s √óÀ¢ t) z) :
      HasFDerivWithinAt (f ‚àò (¬∑, z.2)) (f' z ‚àòL .inl ..) s z.1 := by
    have hleft (x:E) := HasFDerivWithinAt.prodMk
      (hasFDerivWithinAt_id (ùïú := ùïú) x s)
      (hasFDerivWithinAt_const z.2 x s)
    convert HasFDerivWithinAt.comp z.1 (hf) (hleft z.1)
      (fun x hx => mem_prod.mpr ‚ü®hx, (mem_prod.mp hz).right‚ü©)

/-- Differentiable implies also that the second partial derivative exists. -/
theorem HasFDerivWithinAt.partial_snd
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ùïú G]
  {f : E √ó F ‚Üí G} {f' : E √ó F ‚Üí E √ó F ‚ÜíL[ùïú] G}
  {s : Set E} {t : Set F}
  {z : E √ó F} (hz : z ‚àà s √óÀ¢ t)
  (hf : HasFDerivWithinAt f (f' z) (s √óÀ¢ t) z) :
      HasFDerivWithinAt (f ‚àò (z.1, ¬∑)) (f' z ‚àòL .inr ..) t z.2 := by
    have hright (y:F) := HasFDerivWithinAt.prodMk
      (hasFDerivWithinAt_const z.1 y t)
      (hasFDerivWithinAt_id (ùïú := ùïú) y t)
    convert HasFDerivWithinAt.comp z.2 (hf) (hright z.2)
      (fun y hy => mem_prod.mpr ‚ü®(mem_prod.mp hz).left, hy‚ü©)

/-- If a function `f : E √ó F ‚Üí G` has a first partial derivative (within set `s`) `f'xz` at `z`
and has a second partial derivative (within open set `t`) `f'y` continuous on `s √óÀ¢ t`,
then `f` has a derivative at `z`, with the derivative given by `f'z = f'xz.coprod (f'y z)`.

See `hasFDerivWithinAt_of_partial_fst_continuousOn_prod_open` for the order of derivatives swapped.
-/
theorem hasFDerivWithinAt_of_partial_snd_continuousOn_prod_open
  {ùïú : Type*} [NontriviallyNormedField ùïú] [IsRCLikeNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [NormedSpace ùïú F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ùïú G]
  {f : E √ó F ‚Üí G} {s : Set E} {t : Set F} {z : E √ó F}
  (hz : z ‚àà s √óÀ¢ t) (ht : IsOpen t)
  {f'xz : E ‚ÜíL[ùïú] G} {f'y : E √ó F ‚Üí F ‚ÜíL[ùïú] G}
  (hf'y_cont : ContinuousOn f'y (s √óÀ¢ t))
  (hf'xz : HasFDerivWithinAt (f ‚àò (¬∑, z.2)) f'xz s z.1)
  (hf'y : ‚àÄ z' ‚àà s √óÀ¢ t, HasFDerivWithinAt (f ‚àò (z'.1, ¬∑)) (f'y z') t z'.2) :
    HasFDerivWithinAt f (f'xz.coprod (f'y z)) (s √óÀ¢ t) z := by
  replace hz : _ ‚àß _ := ‚ü®mem_prod.mp hz, hz‚ü©
  simp only at hz
  -- rewrite derivatives as limits using norms
  simp only [hasFDerivWithinAt_iff_tendsto, tendsto_nhdsWithin_nhds, dist_eq_norm] at ‚ä¢ hf'xz
  simp only [ContinuousLinearMap.coprod_apply, sub_zero, norm_mul, norm_inv,
    norm_norm] at ‚ä¢ hf'xz
  simp only [Metric.continuousOn_iff, dist_eq_norm, norm_eq_abs] at hf'y_cont
  -- get a target Œµ' and immediately shrink it to Œµ for convenice
  intro Œµ' hŒµ'
  rw [show Œµ' = (Œµ'/2/2/2)*2 + (Œµ'/2/2/2)*2 + (Œµ'/2/2/2)*2 + (Œµ'/2/2/2)*2 by ring]
  have hŒµ := half_pos (half_pos (half_pos hŒµ'))
  set Œµ := Œµ' / 2 / 2 / 2
  -- get Œ¥x from x-differentiability
  -- get Œ¥y from continuity of y-derivative
  -- get Œ¥t is constrained by the possibly small size of t
  replace ‚ü®Œ¥x, hŒ¥x, hf'xz‚ü© := hf'xz Œµ hŒµ
  replace ‚ü®Œ¥y, hŒ¥y, hf'y_cont‚ü© := hf'y_cont z hz.2 Œµ hŒµ
  obtain ‚ü®Œ¥t, hŒ¥t‚ü© := isOpen_iff.mp ht z.2 hz.1.2
  use (min Œ¥x (min Œ¥y Œ¥t)) -- derive desired Œ¥
  refine ‚ü®?pos, ?_‚ü©
  case pos => exact lt_min hŒ¥x (lt_min hŒ¥y hŒ¥t.1) -- positivity of Œ¥
  -- get working point (x,y) ‚àà E √ó F within Œ¥ distance of z
  intro (x,y) hst hŒ¥
  replace hst : _ ‚àß _ := ‚ü®mem_prod.mp hst, hst‚ü©
  simp only at hst
  simp only [Prod.fst_sub, Prod.snd_sub]
  rw [mul_comm]
  -- simplify norm conditions into bounds on ‚Äñx-z.1‚Äñ and ‚Äñy-z.2‚Äñ
  simp only [Prod.norm_def, Prod.fst_sub, Prod.snd_sub] at hŒ¥
  simp only [lt_inf_iff, sup_lt_iff] at hŒ¥
  obtain ‚ü®‚ü®hxx, hyx‚ü©, ‚ü®‚ü®hxy, hyy‚ü©, ‚ü®hxt, hyt‚ü©‚ü©‚ü© := hŒ¥
  -- rewrite desired variation in f for easier estimation
  have hf := calc
    f (x,y) - f z - (f'xz (x - z.1) + (f'y z) (y - z.2))
      = f (x,y) - f (x,z.2)
      + f (x,z.2) - f (z.1,z.2) - (f'xz (x - z.1) + (f'y z) (y - z.2)) := by
        abel
    _ = f (x,y) - f (x,z.2) - (f'y z) (y - z.2)
      + f (x,z.2) - f (z.1,z.2) - f'xz (x - z.1) := by
        abel
    _ = f (x,y) - f (x,z.2) - (f'y (x,z.2)) (y - z.2)
      + (f'y (x,z.2)) (y - z.2) - (f'y z) (y - z.2)
      + f (x,z.2) - f (z.1,z.2) - f'xz (x - z.1) := by
        abel
    _ = f (x,y) - f (x,z.2) - (f'y (x,z.2)) (y - z.2)
      + (f'y (x,z.2) - f'y z) (y - z.2)
      + f (x,z.2) - f (z.1,z.2) - f'xz (x - z.1) := by
        rw [ContinuousLinearMap.sub_apply]
        abel
    _ = f (x,y) - f (x,z.2) - (f'y (x,z.2)) (y - z.2)
      + (f'y (x,z.2) - f'y z) (y - z.2)
      + (f (x,z.2) - f (z.1,z.2) - f'xz (x - z.1)) := by
        abel
  -- set up the hypotheses and use the inequality version of the Mean Value Theorem
  have mvt_diff : ‚àÄ y ‚àà ball z.2 (min Œ¥y Œ¥t),
      HasFDerivWithinAt (f ‚àò (x,¬∑)) (f'y (x,y)) (ball z.2 (min Œ¥y Œ¥t)) y := by
    intro y' hy'
    rw [mem_ball_iff_norm, lt_min_iff] at hy'
    apply (hf'y (x,y') (mem_prod.mpr ‚ü®hst.1.1, _‚ü©)).mono
    ¬∑ calc
        ball z.2 (min Œ¥y Œ¥t)
          ‚äÜ ball z.2 Œ¥t := ball_subset_ball (min_le_right _ _)
        _ ‚äÜ t := hŒ¥t.2
    ¬∑ exact mem_of_subset_of_mem hŒ¥t.2 (mem_ball_iff_norm.mpr hy'.2)
  have mvt_bound : ‚àÄ y' ‚àà ball z.2 (min Œ¥y Œ¥t), ‚Äñf'y (x,y') - f'y (x,z.2)‚Äñ ‚â§ Œµ + Œµ := by
    intro y' hy'
    rw [mem_ball_iff_norm, lt_min_iff] at hy'
    rw [‚Üê dist_eq_norm]
    apply (dist_triangle _ (f'y z) _).trans
    rw [dist_eq_norm, dist_eq_norm, norm_sub_rev (f'y z) _]
    have hxy' : ‚Äñ(x,y') - z‚Äñ < Œ¥y := by
      simp only [Prod.norm_def, Prod.fst_sub, Prod.snd_sub, sup_lt_iff]
      exact ‚ü®hxy, hy'.1‚ü©
    have hxz2 : ‚Äñ(x,z.2) - z‚Äñ < Œ¥y := by
      simp only [Prod.norm_def, Prod.fst_sub, Prod.snd_sub, sub_self, norm_zero, norm_nonneg,
        sup_of_le_left]
      exact hxy
    apply add_le_add (hf'y_cont _ _ hxy').le (hf'y_cont _ _ hxz2).le
    ¬∑ apply mem_prod.mpr ‚ü®hst.1.1, _‚ü©
      exact mem_of_subset_of_mem hŒ¥t.2 (mem_ball_iff_norm.mpr hy'.2)
    ¬∑ exact mem_prod.mpr ‚ü®hst.1.1, hz.1.2‚ü©
  have mvt {a b} (ha : a ‚àà _) (hb : b ‚àà _) :=
    -- inequality version of Mean Value Theorem
    Convex.norm_image_sub_le_of_norm_hasFDerivWithin_le'
      mvt_diff
      mvt_bound
      (convex_ball z.2 (min Œ¥y Œ¥t)) ha hb
  simp only [comp_apply] at mvt
  -- use the calculation above and start applying norms and estimates on the goal, term by term
  rw [hf]
  replace hf := calc
    ‚Äñf (x,y) - f (x,z.2) - (f'y (x,z.2)) (y - z.2)
      + (f'y (x,z.2) - f'y z) (y - z.2)
      + (f (x,z.2) - f (z.1,z.2) - f'xz (x - z.1))‚Äñ
      ‚â§ ‚Äñf (x,y) - f (x,z.2) - (f'y (x,z.2)) (y - z.2)‚Äñ
      + ‚Äñ(f'y (x,z.2) - f'y z) (y - z.2)‚Äñ
      + ‚Äñ(f (x,z.2) - f (z.1,z.2) - f'xz (x - z.1))‚Äñ := norm_add‚ÇÉ_le
    _ ‚â§ (Œµ + Œµ) * ‚Äñy - z.2‚Äñ
      + ‚Äñ(f'y (x,z.2) - f'y z)‚Äñ * ‚Äñy - z.2‚Äñ
      + Œµ * ‚Äñx - z.1‚Äñ := by
        apply add_le_add (add_le_add _ _) _ -- compare term by term
        ¬∑ exact mvt -- Mean Value estimate
            (mem_ball_self (lt_min hŒ¥y hŒ¥t.1))
            (mem_ball_iff_norm.mpr (lt_min hyy hyt))
        ¬∑ exact ContinuousLinearMap.le_opNorm _ _ -- operator norm estimate
        ¬∑ rw [mul_comm]
          by_cases hxnz : 0 < ‚Äñx - z.1‚Äñ
          case neg => -- handle trivial x = z.1 case
            replace hxnz := (not_lt.mp hxnz).antisymm (norm_nonneg _)
            have hxnz' := eq_of_sub_eq_zero (norm_eq_zero.mp hxnz)
            repeat rw [hxnz, hxnz']
            simp only [Prod.mk.eta, sub_self, map_zero, norm_zero, zero_mul, le_refl]
          case pos =>
            apply (inv_mul_le_iff‚ÇÄ hxnz).mp
            exact (hf'xz hst.1.1 hxx).le -- apply differentiability estimate
    _ ‚â§ Œµ * ‚Äñy - z.2‚Äñ + Œµ * ‚Äñy - z.2‚Äñ + Œµ * ‚Äñy - z.2‚Äñ + Œµ * ‚Äñx - z.1‚Äñ := by
        rw [add_mul]
        apply add_le_add (add_le_add le_rfl _) le_rfl
        apply mul_le_mul (hf'y_cont _ _ _).le le_rfl (norm_nonneg (y - z.2)) hŒµ.le
        ¬∑ exact (mem_prod.mpr ‚ü®hst.1.1, hz.1.2‚ü©)
        ¬∑ simp only [Prod.norm_def, Prod.fst_sub, Prod.snd_sub, sub_self, norm_zero, norm_nonneg,
          sup_of_le_left, hxy]
  -- now apply the estimate hf to the goal
  apply (mul_le_mul_of_nonneg_right hf (by simp only [inv_nonneg, norm_nonneg])).trans_lt _
  -- it remains only to simplify the inequality term by term and compare coefficients
  simp only [add_mul, mul_assoc]
  apply add_lt_add (add_lt_add (add_lt_add _ _) _)
  all_goals
    apply (mul_lt_mul_left hŒµ).mpr
    refine LE.le.trans_lt ?_ (one_lt_two)
    rw [mul_comm]
    apply inv_mul_le_of_le_mul‚ÇÄ (norm_nonneg _) zero_le_one
    simp only [mul_one, Prod.norm_def, Prod.fst_sub, Prod.snd_sub]
    first | exact le_max_right _ _ | exact le_max_left _ _

/-- If a function `f : E √ó F ‚Üí G` has a second partial derivative (within set `t`) `f'yz` at `z`
and has a first partial derivative (within open set `s`) `f'x` continuous on `s √óÀ¢ t`,
then `f` has a derivative at `z`, with the derivative given by `f'z = (f'x z).coprod f'yz`.

See `hasFDerivWithinAt_of_partial_snd_continuousOn_prod_open` for the order of derivatives swapped.
-/
theorem hasFDerivWithinAt_of_partial_fst_continuousOn_prod_open
  {ùïú : Type*} [NontriviallyNormedField ùïú] [IsRCLikeNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [NormedSpace ùïú E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ùïú G]
  {f : E √ó F ‚Üí G} {s : Set E} {t : Set F} {z : E √ó F}
  (hz : z ‚àà s √óÀ¢ t) (hs : IsOpen s)
  {f'x : E √ó F ‚Üí E ‚ÜíL[ùïú] G} {f'yz : F ‚ÜíL[ùïú] G}
  (hf'x_cont : ContinuousOn f'x (s √óÀ¢ t))
  (hf'x : ‚àÄ z' ‚àà s √óÀ¢ t, HasFDerivWithinAt (f ‚àò (¬∑, z'.2)) (f'x z') s z'.1)
  (hf'yz : HasFDerivWithinAt (f ‚àò (z.1, ¬∑)) f'yz t z.2) :
    HasFDerivWithinAt f ((f'x z).coprod f'yz) (s √óÀ¢ t) z := by
  have hmt_st := mapsTo_swap_prod s t
  have hmt_ts := mapsTo_swap_prod t s
  have hf'x_swap_cont := hf'x_cont.comp
    (fun z hz => continuous_swap.continuousWithinAt)
    hmt_ts
  -- exchange `E` and `F` to use a previous result
  have hswap := hasFDerivWithinAt_of_partial_snd_continuousOn_prod_open
    (f := f ‚àò Prod.swap)
    (z := z.swap)
    hz.symm hs
    hf'x_swap_cont
    hf'yz
    (fun z' hz' => (hf'x z'.swap (hmt_ts hz')))
  -- exchange `E` and `F` back in the result to satisfy the goal
  let cle_swap := ContinuousLinearEquiv.prodComm ùïú E F
  convert hswap.comp z (cle_swap.hasFDerivWithinAt) hmt_st
  unfold cle_swap
  simp only [Prod.swap_swap, comp_apply, ContinuousLinearMap.coprod_comp_prodComm]

/-- If a function `f : E √ó F ‚Üí G` has partial derivative `f'x` or `f'y` continuous
on an open set `u`, then `f` is continously differentiable on this set, with
the derivative given by `f' = f'x.coprod f'y`.
-/
theorem hasFDerivWithinAt_continuousOn_of_partial_continuousOn_open
  {ùïú : Type*} [NontriviallyNormedField ùïú] [IsRCLikeNormedField ùïú]
  --NB: [NormedSpace ‚Ñù E] is not needed because the proof eventually applies
  --    the Mean Value Theorem only in the F direction. But it could have been
  --    the other way around and it is odd to not have symmetry in the hypotheses
  {E : Type*} [NormedAddCommGroup E] /-[NormedSpace ‚Ñù E]-/ [NormedSpace ùïú E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [NormedSpace ùïú F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ùïú G]
  {f : E √ó F ‚Üí G} {u : Set (E √ó F)} (hu : IsOpen u)
  {f'x : E √ó F ‚Üí E ‚ÜíL[ùïú] G} {f'y : E √ó F ‚Üí F ‚ÜíL[ùïú] G}
  (hf'x_cont : ContinuousOn f'x u) (hf'y_cont : ContinuousOn f'y u)
  (hf'x : ‚àÄ z ‚àà u, HasFDerivWithinAt (f ‚àò (¬∑, z.2)) (f'x z) ((¬∑, z.2) ‚Åª¬π' u) z.1)
  (hf'y : ‚àÄ z ‚àà u, HasFDerivWithinAt (f ‚àò (z.1, ¬∑)) (f'y z) ((z.1, ¬∑) ‚Åª¬π' u) z.2) :
    ContinuousOn (fun z => (f'x z).coprod (f'y z)) u
    ‚àß ‚àÄ z ‚àà u, HasFDerivWithinAt f ((f'x z).coprod (f'y z)) u z := by
  refine ‚ü®?cont, ?diff‚ü©
  case cont =>
    -- combine continuity of partial to get continuity of total derivative
    exact hf'x_cont.continuousLinearMapCoprod hf'y_cont
  case diff =>
    intro z hz
    -- first restrict all properties to a product neighborhood of z
    obtain ‚ü®s,t,hs,ht,hz1,hz2,hst‚ü© := isOpen_prod_iff.mp hu z.1 z.2 hz
    have hstn : s √óÀ¢ t ‚àà nhds z := IsOpen.mem_nhds (hs.prod ht) (mem_prod.mpr ‚ü®hz1, hz2‚ü©)
    apply (hasFDerivWithinAt_inter hstn).mp
    rw [‚Üê right_eq_inter.mpr hst]
    have hsu (z : E √ó F) (hz : z ‚àà s √óÀ¢ t) : s ‚äÜ ((¬∑,z.2) ‚Åª¬π' u) := by
      apply HasSubset.Subset.trans _ (preimage_mono hst)
      rw [mk_preimage_prod_left (mem_prod.mpr hz).2]
    have htu (z : E √ó F) (hz : z ‚àà s √óÀ¢ t) : t ‚äÜ ((z.1,¬∑) ‚Åª¬π' u) := by
      apply HasSubset.Subset.trans _ (preimage_mono hst)
      rw [mk_preimage_prod_right (mem_prod.mpr hz).1]
    replace hf'y_cont := hf'y_cont.mono hst
    -- now apply the weaker criteria to get differentiability
    apply hasFDerivWithinAt_of_partial_snd_continuousOn_prod_open
      ‚ü®hz1,hz2‚ü© ht
      hf'y_cont
      _ _
    ¬∑ exact (hf'x z hz).mono (hsu z ‚ü®hz1,hz2‚ü©)
    ¬∑ exact (fun z hz => (hf'y z (mem_of_subset_of_mem hst hz)).mono (htu z hz))

end PartialFDeriv
