/-
Copyright (c) 2024 Bj√∏rn Kjos-Hanssen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bj√∏rn Kjos-Hanssen, Jireh Loreaux, Floris van Doorn, Eric Wieser
-/
import Mathlib.Analysis.Calculus.FirstDerivativeTest
import Mathlib.Order.Interval.Set.Basic
import Mathlib.LinearAlgebra.AffineSpace.Ordered

/-!
# The Second-Derivative Test

We prove the Second-Derivative test from calculus using the First-Derivative test.
Source: [Wikipedia](https://en.wikipedia.org/wiki/Derivative_test#Proof_of_the_second-derivative_test).

## Main results

* `isLocalMin_of_deriv_deriv_pos`: The second-derivative test, minimum version.

## Tags

derivative test, calculus
-/

open Set Filter Topology SignType

section SecondDeriv

variable {f : ‚Ñù ‚Üí ‚Ñù} {x‚ÇÄ : ‚Ñù}

/-- If the derivative of `f` is positive at a root `x‚ÇÄ` of `f`, then locally the sign of `f x`
matches `x - x‚ÇÄ`. -/
lemma eventually_nhdsWithin_sign_eq_of_deriv_pos (hf : deriv f x‚ÇÄ > 0) (hx : f x‚ÇÄ = 0) :
    ‚àÄ·∂† x in ùìù x‚ÇÄ, sign (f x) = sign (x - x‚ÇÄ) := by
  rw [‚Üê nhdsNE_sup_pure x‚ÇÄ, eventually_sup]
  refine ‚ü®?_, by simpa‚ü©
  have h_tendsto := hasDerivAt_iff_tendsto_slope.mp
    (differentiableAt_of_deriv_ne_zero <| ne_of_gt hf).hasDerivAt
  filter_upwards [(h_tendsto.eventually <| eventually_gt_nhds hf),
    self_mem_nhdsWithin] with x hx‚ÇÄ hx‚ÇÅ
  rw [mem_compl_iff, mem_singleton_iff, ‚Üê Ne.eq_def] at hx‚ÇÅ
  obtain (hx' | hx') := hx‚ÇÅ.lt_or_lt
  ¬∑ rw [sign_neg (neg_of_slope_pos hx' hx‚ÇÄ hx), sign_neg (sub_neg.mpr hx')]
  ¬∑ rw [sign_pos (pos_of_slope_pos hx' hx‚ÇÄ hx), sign_pos (sub_pos.mpr hx')]

/-- If the derivative of `f` is negative at a root `x‚ÇÄ` of `f`, then locally the sign of `f x`
matches `x‚ÇÄ - x`. -/
lemma eventually_nhdsWithin_sign_eq_of_deriv_neg (hf : deriv f x‚ÇÄ < 0) (hx : f x‚ÇÄ = 0) :
    ‚àÄ·∂† x in ùìù x‚ÇÄ, sign (f x) = sign (x‚ÇÄ - x) := by
  simpa [Left.sign_neg, -neg_sub, ‚Üê neg_sub x‚ÇÄ] using
    eventually_nhdsWithin_sign_eq_of_deriv_pos
        (f := (-f ¬∑)) (x‚ÇÄ := x‚ÇÄ) (by simpa [deriv.neg]) (by simpa)

lemma deriv_neg_left_of_sign_deriv {f : ‚Ñù ‚Üí ‚Ñù} {x‚ÇÄ : ‚Ñù}
    (h‚ÇÄ : ‚àÄ·∂† (x : ‚Ñù) in ùìù x‚ÇÄ, sign (deriv f x) = sign (x - x‚ÇÄ)) :
    ‚àÄ·∂† (b : ‚Ñù) in ùìù[<] x‚ÇÄ, deriv f b < 0 := by
  filter_upwards [inter_mem_nhdsWithin _ h‚ÇÄ] with x ‚ü®(hx : x < x‚ÇÄ), (hx' : sign _ = _)‚ü©
  rwa [‚Üê sub_neg, ‚Üê sign_eq_neg_one_iff, ‚Üê hx', sign_eq_neg_one_iff] at hx

lemma deriv_neg_right_of_sign_deriv {f : ‚Ñù ‚Üí ‚Ñù} {x‚ÇÄ : ‚Ñù}
    (h‚ÇÄ : ‚àÄ·∂† (x : ‚Ñù) in ùìù x‚ÇÄ, sign (deriv f x) = sign (x‚ÇÄ - x)) :
     ‚àÄ·∂† (b : ‚Ñù) in ùìù[>] x‚ÇÄ, deriv f b < 0 := by
  filter_upwards [inter_mem_nhdsWithin _ h‚ÇÄ] with x ‚ü®(hx : x‚ÇÄ < x), (hx' : sign _ = _)‚ü©
  rwa [‚Üê sub_neg, ‚Üê sign_eq_neg_one_iff, ‚Üê hx', sign_eq_neg_one_iff] at hx

lemma deriv_pos_right_of_sign_deriv {f : ‚Ñù ‚Üí ‚Ñù} {x‚ÇÄ : ‚Ñù}
    (h‚ÇÄ : ‚àÄ·∂† (x : ‚Ñù) in ùìù x‚ÇÄ, sign (deriv f x) = sign (x - x‚ÇÄ)) :
     ‚àÄ·∂† (b : ‚Ñù) in ùìù[>] x‚ÇÄ, deriv f b > 0 := by
  filter_upwards [inter_mem_nhdsWithin _ h‚ÇÄ] with x ‚ü®(hx : x‚ÇÄ < x), (hx' : sign _ = _)‚ü©
  rwa [‚Üê sub_pos, ‚Üê sign_eq_one_iff, ‚Üê hx', sign_eq_one_iff] at hx

lemma deriv_pos_left_of_sign_deriv {f : ‚Ñù ‚Üí ‚Ñù} {x‚ÇÄ : ‚Ñù}
    (h‚ÇÄ : ‚àÄ·∂† (x : ‚Ñù) in ùìù x‚ÇÄ, sign (deriv f x) = sign (x‚ÇÄ - x)) :
    ‚àÄ·∂† (b : ‚Ñù) in ùìù[<] x‚ÇÄ, deriv f b > 0 := by
  filter_upwards [inter_mem_nhdsWithin _ h‚ÇÄ] with x ‚ü®(hx : x < x‚ÇÄ), (hx' : sign _ = _)‚ü©
  rwa [‚Üê sub_pos, ‚Üê sign_eq_one_iff, ‚Üê hx', sign_eq_one_iff] at hx

/-- The Second-Derivative Test from calculus, minimum version.
Applies to functions like `x^2 + 1[x ‚â• 0]` as well as twice differentiable
functions. -/
theorem isLocalMin_of_deriv_deriv_pos (hf : deriv (deriv f) x‚ÇÄ > 0) (hd : deriv f x‚ÇÄ = 0)
    (hc : ContinuousAt f x‚ÇÄ) : IsLocalMin f x‚ÇÄ := by
  have h‚ÇÄ := eventually_nhdsWithin_sign_eq_of_deriv_pos hf hd
  have hl := deriv_neg_left_of_sign_deriv h‚ÇÄ
  have hg := deriv_pos_right_of_sign_deriv h‚ÇÄ
  have hf‚ÇÄ := eventually_sup.mpr ‚ü®hl.mono fun x hx => (ne_of_gt hx).symm,
                                  hg.mono fun x hx => (ne_of_lt hx).symm‚ü©
  have hf := (nhdsLT_sup_nhdsGT x‚ÇÄ) ‚ñ∏ hf‚ÇÄ
  exact isLocalMin_of_deriv hc (hf.mono fun x a ‚Ü¶ differentiableAt_of_deriv_ne_zero a)
    (hl.mono fun _ => le_of_lt) (hg.mono fun _ => le_of_lt)

/-- The Second-Derivative Test from calculus, maximum version. -/
theorem isLocalMax_of_deriv_deriv_neg (hf : deriv (deriv f) x‚ÇÄ < 0) (hd : deriv f x‚ÇÄ = 0)
    (hc : ContinuousAt f x‚ÇÄ) : IsLocalMax f x‚ÇÄ := by
  simpa using isLocalMin_of_deriv_deriv_pos (by simpa) (by simpa) hc.neg |>.neg

end SecondDeriv
