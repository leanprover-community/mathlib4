/-
Copyright (c) 2023 Ya√´l Dillies, Zichen Wang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Zichen Wang
-/
import Mathlib.Analysis.Convex.Normed

/-!
# Convex functions are continuous

This file proves that a convex function from a finite dimensional real normed space to `‚Ñù` is
continuous.
-/

open FiniteDimensional Metric Set List Bornology
open scoped Topology

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {C : Set E} {f : E ‚Üí ‚Ñù} {x‚ÇÄ : E} {Œµ r r' M : ‚Ñù}

lemma ConvexOn.lipschitzOnWith_of_abs_le (hf : ConvexOn ‚Ñù (ball x‚ÇÄ r) f) (hŒµ : 0 < Œµ)
    (hM : ‚àÄ a, dist a x‚ÇÄ < r ‚Üí |f a| ‚â§ M) :
    LipschitzOnWith (2 * M / Œµ).toNNReal f (ball x‚ÇÄ (r - Œµ)) := by
  set K := 2 * M / Œµ with hK
  have oneside {x y : E} (hx : x ‚àà ball x‚ÇÄ (r - Œµ)) (hy : y ‚àà ball x‚ÇÄ (r - Œµ)) :
      f x - f y ‚â§ K * ‚Äñx - y‚Äñ := by
    obtain rfl | hxy := eq_or_ne x y
    ¬∑ simp
    have hx‚ÇÄr : ball x‚ÇÄ (r - Œµ) ‚äÜ ball x‚ÇÄ r := ball_subset_ball <| by linarith
    have hx' : x ‚àà ball x‚ÇÄ r := hx‚ÇÄr hx
    have hy' : y ‚àà ball x‚ÇÄ r := hx‚ÇÄr hy
    let z := x + (Œµ / ‚Äñx - y‚Äñ) ‚Ä¢ (x - y)
    replace hxy : 0 < ‚Äñx - y‚Äñ := by rwa [norm_sub_pos_iff]
    have hz : z ‚àà ball x‚ÇÄ r := mem_ball_iff_norm.2 <| by
      calc
        _ = ‚Äñ(x - x‚ÇÄ) + (Œµ / ‚Äñx - y‚Äñ) ‚Ä¢ (x - y)‚Äñ := by simp only [z, add_sub_right_comm]
        _ ‚â§ ‚Äñx - x‚ÇÄ‚Äñ + ‚Äñ(Œµ / ‚Äñx - y‚Äñ) ‚Ä¢ (x - y)‚Äñ := norm_add_le ..
        _ < r - Œµ + Œµ :=
          add_lt_add_of_lt_of_le (mem_ball_iff_norm.1 hx) <| by
            simp [norm_smul, abs_of_nonneg, hŒµ.le, hxy.ne']
        _ = r := by simp
    let a := Œµ / (Œµ + ‚Äñx - y‚Äñ)
    let b := ‚Äñx - y‚Äñ / (Œµ + ‚Äñx - y‚Äñ)
    have hab : a + b = 1 := by field_simp [a, b]
    have hxyz : x = a ‚Ä¢ y + b ‚Ä¢ z := by
      calc
        x = a ‚Ä¢ x + b ‚Ä¢ x := by rw [Convex.combo_self hab]
        _ = a ‚Ä¢ y + b ‚Ä¢ z := by simp [z, a, b, smul_smul, hxy.ne', smul_sub]; abel
    rw [hK, mul_comm, ‚Üê mul_div_assoc, le_div_iff‚ÇÄ' hŒµ]
    calc
      Œµ * (f x - f y) ‚â§ ‚Äñx - y‚Äñ * (f z - f x) := by
        rw [mul_sub, mul_sub, sub_le_sub_iff, ‚Üê add_mul]
        have h := hf.2 hy' hz (by positivity) (by positivity) hab
        field_simp [‚Üê hxyz, a, b, ‚Üê mul_div_right_comm] at h
        rwa [‚Üê le_div_iff‚ÇÄ' (by positivity), add_comm (_ * _)]
      _ ‚â§ _ := by
        rw [sub_eq_add_neg (f _), two_mul]
        gcongr
        ¬∑ exact (le_abs_self _).trans <| hM _ hz
        ¬∑ exact (neg_le_abs _).trans <| hM _ hx'
  refine .of_dist_le' fun x hx y hy ‚Ü¶ ?_
  simp_rw [dist_eq_norm_sub, Real.norm_eq_abs, abs_sub_le_iff]
  exact ‚ü®oneside hx hy, norm_sub_rev x _ ‚ñ∏ oneside hy hx‚ü©

lemma ConcaveOn.lipschitzOnWith_of_abs_le (hf : ConcaveOn ‚Ñù (ball x‚ÇÄ r) f) (hŒµ : 0 < Œµ)
    (hM : ‚àÄ a, dist a x‚ÇÄ < r ‚Üí |f a| ‚â§ M) :
    LipschitzOnWith (2 * M / Œµ).toNNReal f (ball x‚ÇÄ (r - Œµ)) := by
  simpa using hf.neg.lipschitzOnWith_of_abs_le hŒµ <| by simpa using hM

lemma ConvexOn.exists_lipschitzOnWith_of_isBounded (hf : ConvexOn ‚Ñù (ball x‚ÇÄ r) f) (hr : r' < r)
    (hf' : IsBounded (f '' ball x‚ÇÄ r)) : ‚àÉ K, LipschitzOnWith K f (ball x‚ÇÄ r') := by
  rw [isBounded_iff_subset_ball 0] at hf'
  simp only [Set.subset_def, mem_image, mem_ball, dist_zero_right, Real.norm_eq_abs,
    forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ] at hf'
  obtain ‚ü®M, hM‚ü© := hf'
  rw [‚Üê sub_sub_cancel r r']
  exact ‚ü®_, hf.lipschitzOnWith_of_abs_le (sub_pos.2 hr) fun a ha ‚Ü¶ (hM a ha).le‚ü©

lemma ConcaveOn.exists_lipschitzOnWith_of_isBounded (hf : ConcaveOn ‚Ñù (ball x‚ÇÄ r) f) (hr : r' < r)
    (hf' : IsBounded (f '' ball x‚ÇÄ r)) : ‚àÉ K, LipschitzOnWith K f (ball x‚ÇÄ r') := by
  replace hf' : IsBounded ((-f) '' ball x‚ÇÄ r) := by convert hf'.neg; ext; simp [neg_eq_iff_eq_neg]
  simpa using hf.neg.exists_lipschitzOnWith_of_isBounded hr hf'

lemma ConvexOn.isBoundedUnder_abs (hf : ConvexOn ‚Ñù C f) {x‚ÇÄ : E} (hC : C ‚àà ùìù x‚ÇÄ) :
    (ùìù x‚ÇÄ).IsBoundedUnder (¬∑ ‚â§ ¬∑) |f| ‚Üî (ùìù x‚ÇÄ).IsBoundedUnder (¬∑ ‚â§ ¬∑) f := by
  refine ‚ü®fun h ‚Ü¶ h.mono_le <| .of_forall fun x ‚Ü¶ le_abs_self _, ?_‚ü©
  rintro ‚ü®r, hr‚ü©
  refine ‚ü®|r| + 2 * |f x‚ÇÄ|, ?_‚ü©
  have : (ùìù x‚ÇÄ).Tendsto (fun y => 2 ‚Ä¢ x‚ÇÄ - y) (ùìù x‚ÇÄ) :=
    tendsto_nhds_nhds.2 (‚ü®¬∑, ¬∑, by simp [two_nsmul, dist_comm]‚ü©)
  simp only [Filter.eventually_map, Pi.abs_apply, abs_le'] at hr ‚ä¢
  filter_upwards [this.eventually_mem hC, hC, hr, this.eventually hr] with y hx hx' hfr hfr'
  refine ‚ü®hfr.trans <| (le_abs_self _).trans <| by simp, ?_‚ü©
  rw [‚Üê sub_le_iff_le_add, neg_sub_comm, sub_le_iff_le_add', ‚Üê abs_two, ‚Üê abs_mul]
  calc
    -|2 * f x‚ÇÄ| ‚â§ 2 * f x‚ÇÄ := neg_abs_le _
    _ ‚â§ f y + f (2 ‚Ä¢ x‚ÇÄ - y) := by
      have := hf.2 hx' hx (by positivity) (by positivity) (add_halves _)
      simp only [one_div, ‚Üê Nat.cast_smul_eq_nsmul ‚Ñù, Nat.cast_ofNat, smul_sub, ne_eq,
        OfNat.ofNat_ne_zero, not_false_eq_true, inv_smul_smul‚ÇÄ, add_sub_cancel, smul_eq_mul] at this
      cancel_denoms at this
      rwa [‚Üê Nat.cast_two, Nat.cast_smul_eq_nsmul] at this
    _ ‚â§ f y + |r| := by gcongr; exact hfr'.trans (le_abs_self _)

lemma ConcaveOn.isBoundedUnder_abs (hf : ConcaveOn ‚Ñù C f) {x‚ÇÄ : E} (hC : C ‚àà ùìù x‚ÇÄ) :
    (ùìù x‚ÇÄ).IsBoundedUnder (¬∑ ‚â§ ¬∑) |f| ‚Üî (ùìù x‚ÇÄ).IsBoundedUnder (¬∑ ‚â• ¬∑) f := by
  simpa [Pi.neg_def, Pi.abs_def] using hf.neg.isBoundedUnder_abs hC

lemma ConvexOn.continuousOn_tfae (hC : IsOpen C) (hC' : C.Nonempty) (hf : ConvexOn ‚Ñù C f) : TFAE [
    LocallyLipschitzOn C f,
    ContinuousOn f C,
    ‚àÉ x‚ÇÄ ‚àà C, ContinuousAt f x‚ÇÄ,
    ‚àÉ x‚ÇÄ ‚àà C, (ùìù x‚ÇÄ).IsBoundedUnder (¬∑ ‚â§ ¬∑) f,
    ‚àÄ ‚¶Éx‚ÇÄ‚¶Ñ, x‚ÇÄ ‚àà C ‚Üí (ùìù x‚ÇÄ).IsBoundedUnder (¬∑ ‚â§ ¬∑) f,
    ‚àÄ ‚¶Éx‚ÇÄ‚¶Ñ, x‚ÇÄ ‚àà C ‚Üí (ùìù x‚ÇÄ).IsBoundedUnder (¬∑ ‚â§ ¬∑) |f|] := by
  tfae_have 1 ‚Üí 2 := LocallyLipschitzOn.continuousOn
  tfae_have 2 ‚Üí 3 := by
    obtain ‚ü®x‚ÇÄ, hx‚ÇÄ‚ü© := hC'
    exact fun h ‚Ü¶ ‚ü®x‚ÇÄ, hx‚ÇÄ, h.continuousAt <| hC.mem_nhds hx‚ÇÄ‚ü©
  tfae_have 3 ‚Üí 4
  | ‚ü®x‚ÇÄ, hx‚ÇÄ, h‚ü© =>
    ‚ü®x‚ÇÄ, hx‚ÇÄ, f x‚ÇÄ + 1, by simpa using h.eventually (eventually_le_nhds (by simp))‚ü©
  tfae_have 4 ‚Üí 5
  | ‚ü®x‚ÇÄ, hx‚ÇÄ, r, hr‚ü©, x, hx => by
    have : ‚àÄ·∂† Œ¥ in ùìù (0 : ‚Ñù), (1 - Œ¥)‚Åª¬π ‚Ä¢ x - (Œ¥ / (1 - Œ¥)) ‚Ä¢ x‚ÇÄ ‚àà C := by
      have h : ContinuousAt (fun Œ¥ : ‚Ñù ‚Ü¶ (1 - Œ¥)‚Åª¬π ‚Ä¢ x - (Œ¥ / (1 - Œ¥)) ‚Ä¢ x‚ÇÄ) 0 := by
        fun_prop (disch := norm_num)
      exact h (by simpa using hC.mem_nhds hx)
    obtain ‚ü®Œ¥, hŒ¥‚ÇÄ, hy, hŒ¥‚ÇÅ‚ü© := (this.and <| eventually_lt_nhds zero_lt_one).exists_gt
    set y := (1 - Œ¥)‚Åª¬π ‚Ä¢ x - (Œ¥ / (1 - Œ¥)) ‚Ä¢ x‚ÇÄ
    refine ‚ü®max r (f y), ?_‚ü©
    simp only [Filter.eventually_map, Pi.abs_apply] at hr ‚ä¢
    obtain ‚ü®Œµ, hŒµ, hr‚ü© := Metric.eventually_nhds_iff.1 <| hr.and (hC.eventually_mem hx‚ÇÄ)
    refine Metric.eventually_nhds_iff.2 ‚ü®Œµ * Œ¥, by positivity, fun z hz ‚Ü¶ ?_‚ü©
    have hx‚ÇÄ' : Œ¥‚Åª¬π ‚Ä¢ (x - y) + y = x‚ÇÄ := MulAction.injective‚ÇÄ (sub_ne_zero.2 hŒ¥‚ÇÅ.ne') <| by
      simp [y, smul_sub, smul_smul, hŒ¥‚ÇÄ.ne', div_eq_mul_inv, sub_ne_zero.2 hŒ¥‚ÇÅ.ne', mul_left_comm,
        sub_mul, sub_smul]
    let w := Œ¥‚Åª¬π ‚Ä¢ (z - y) + y
    have hwyz : Œ¥ ‚Ä¢ w + (1 - Œ¥) ‚Ä¢ y = z := by simp [w, hŒ¥‚ÇÄ.ne', sub_smul]
    have hw : dist w x‚ÇÄ < Œµ := by
      simpa [w, ‚Üê hx‚ÇÄ', dist_smul‚ÇÄ, abs_of_nonneg, hŒ¥‚ÇÄ.le, inv_mul_lt_iff‚ÇÄ', hŒ¥‚ÇÄ]
    calc
      f z ‚â§ max (f w) (f y) :=
        hf.le_max_of_mem_segment (hr hw).2 hy ‚ü®_, _, hŒ¥‚ÇÄ.le, sub_nonneg.2 hŒ¥‚ÇÅ.le, by simp, hwyz‚ü©
      _ ‚â§ max r (f y) := by gcongr; exact (hr hw).1
  tfae_have 6 ‚Üî 5 := forall‚ÇÇ_congr fun x‚ÇÄ hx‚ÇÄ ‚Ü¶ hf.isBoundedUnder_abs (hC.mem_nhds hx‚ÇÄ)
  tfae_have 6 ‚Üí 1
  | h, x, hx => by
    obtain ‚ü®r, hr‚ü© := h hx
    obtain ‚ü®Œµ, hŒµ, hŒµD‚ü© := Metric.mem_nhds_iff.1 <| Filter.inter_mem (hC.mem_nhds hx) hr
    simp only [preimage_setOf_eq, Pi.abs_apply, subset_inter_iff, hC.nhdsWithin_eq hx] at hŒµD ‚ä¢
    obtain ‚ü®K, hK‚ü© := exists_lipschitzOnWith_of_isBounded (hf.subset hŒµD.1 (convex_ball ..))
      (half_lt_self hŒµ) <| isBounded_iff_forall_norm_le.2 ‚ü®r, by simpa using hŒµD.2‚ü©
    exact ‚ü®K, _, ball_mem_nhds _ (by simpa), hK‚ü©
  tfae_finish

lemma ConcaveOn.continuousOn_tfae (hC : IsOpen C) (hC' : C.Nonempty) (hf : ConcaveOn ‚Ñù C f) : TFAE [
    LocallyLipschitzOn C f,
    ContinuousOn f C,
    ‚àÉ x‚ÇÄ ‚àà C, ContinuousAt f x‚ÇÄ,
    ‚àÉ x‚ÇÄ ‚àà C, (ùìù x‚ÇÄ).IsBoundedUnder (¬∑ ‚â• ¬∑) f,
    ‚àÄ ‚¶Éx‚ÇÄ‚¶Ñ, x‚ÇÄ ‚àà C ‚Üí (ùìù x‚ÇÄ).IsBoundedUnder (¬∑ ‚â• ¬∑) f,
    ‚àÄ ‚¶Éx‚ÇÄ‚¶Ñ, x‚ÇÄ ‚àà C ‚Üí (ùìù x‚ÇÄ).IsBoundedUnder (¬∑ ‚â§ ¬∑) |f|] := by
  have := hf.neg.continuousOn_tfae hC hC'
  simp at this
  convert this using 8 <;> exact (Equiv.neg ‚Ñù).exists_congr (by simp)

lemma ConvexOn.locallyLipschitzOn_iff_continuousOn (hC : IsOpen C) (hf : ConvexOn ‚Ñù C f) :
    LocallyLipschitzOn C f ‚Üî ContinuousOn f C := by
  obtain rfl | hC' := C.eq_empty_or_nonempty
  ¬∑ simp
  ¬∑ exact (hf.continuousOn_tfae hC hC').out 0 1

lemma ConcaveOn.locallyLipschitzOn_iff_continuousOn (hC : IsOpen C) (hf : ConcaveOn ‚Ñù C f) :
    LocallyLipschitzOn C f ‚Üî ContinuousOn f C := by
  simpa using hf.neg.locallyLipschitzOn_iff_continuousOn hC

variable [FiniteDimensional ‚Ñù E]

protected lemma ConvexOn.locallyLipschitzOn (hC : IsOpen C) (hf : ConvexOn ‚Ñù C f) :
    LocallyLipschitzOn C f := by
  obtain rfl | ‚ü®x‚ÇÄ, hx‚ÇÄ‚ü© := C.eq_empty_or_nonempty
  ¬∑ simp
  ¬∑ obtain ‚ü®b, hx‚ÇÄb, hbC‚ü© := exists_mem_interior_convexHull_affineBasis (hC.mem_nhds hx‚ÇÄ)
    refine ((hf.continuousOn_tfae hC ‚ü®x‚ÇÄ, hx‚ÇÄ‚ü©).out 3 0).mp ?_
    refine ‚ü®x‚ÇÄ, hx‚ÇÄ, BddAbove.isBoundedUnder (IsOpen.mem_nhds isOpen_interior hx‚ÇÄb) ?_‚ü©
    exact (hf.bddAbove_convexHull ((subset_convexHull ..).trans hbC)
      ((finite_range _).image _).bddAbove).mono (by gcongr; exact interior_subset)

protected lemma ConcaveOn.locallyLipschitzOn (hC : IsOpen C) (hf : ConcaveOn ‚Ñù C f) :
    LocallyLipschitzOn C f := by simpa using hf.neg.locallyLipschitzOn hC

protected lemma ConvexOn.continuousOn (hC : IsOpen C) (hf : ConvexOn ‚Ñù C f) :
    ContinuousOn f C := (hf.locallyLipschitzOn hC).continuousOn

protected lemma ConcaveOn.continuousOn (hC : IsOpen C) (hf : ConcaveOn ‚Ñù C f) :
    ContinuousOn f C := (hf.locallyLipschitzOn hC).continuousOn

lemma ConvexOn.locallyLipschitzOn_interior (hf : ConvexOn ‚Ñù C f) :
    LocallyLipschitzOn (interior C) f :=
  (hf.subset interior_subset hf.1.interior).locallyLipschitzOn isOpen_interior

lemma ConcaveOn.locallyLipschitzOn_interior (hf : ConcaveOn ‚Ñù C f) :
    LocallyLipschitzOn (interior C) f :=
  (hf.subset interior_subset hf.1.interior).locallyLipschitzOn isOpen_interior

lemma ConvexOn.continuousOn_interior (hf : ConvexOn ‚Ñù C f) : ContinuousOn f (interior C) :=
  hf.locallyLipschitzOn_interior.continuousOn

lemma ConcaveOn.continuousOn_interior (hf : ConcaveOn ‚Ñù C f) : ContinuousOn f (interior C) :=
  hf.locallyLipschitzOn_interior.continuousOn

protected lemma ConvexOn.locallyLipschitz (hf : ConvexOn ‚Ñù univ f) : LocallyLipschitz f := by
  simpa using hf.locallyLipschitzOn_interior

protected lemma ConcaveOn.locallyLipschitz (hf : ConcaveOn ‚Ñù univ f) : LocallyLipschitz f := by
  simpa using hf.locallyLipschitzOn_interior

-- Commented out since `intrinsicInterior` is not imported (but should be once these are proved)
-- proof_wanted ConvexOn.locallyLipschitzOn_intrinsicInterior (hf : ConvexOn ‚Ñù C f) :
--     ContinuousOn f (intrinsicInterior ‚Ñù C)

-- proof_wanted ConcaveOn.locallyLipschitzOn_intrinsicInterior (hf : ConcaveOn ‚Ñù C f) :
--     ContinuousOn f (intrinsicInterior ‚Ñù C)

-- proof_wanted ConvexOn.continuousOn_intrinsicInterior (hf : ConvexOn ‚Ñù C f) :
--     ContinuousOn f (intrinsicInterior ‚Ñù C)

-- proof_wanted ConcaveOn.continuousOn_intrinsicInterior (hf : ConcaveOn ‚Ñù C f) :
--     ContinuousOn f (intrinsicInterior ‚Ñù C)
