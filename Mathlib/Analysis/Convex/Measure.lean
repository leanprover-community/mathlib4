/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Analysis.Convex.Topology
import Mathlib.Analysis.NormedSpace.AddTorsorBases
import Mathlib.MeasureTheory.Measure.Lebesgue.EqHaar

#align_import analysis.convex.measure from "leanprover-community/mathlib"@"fd5edc43dc4f10b85abfe544b88f82cf13c5f844"

/-!
# Convex sets are null-measurable

Let `E` be a finite dimensional real vector space, let `Œº` be a Haar measure on `E`, let `s` be a
convex set in `E`. Then the frontier of `s` has measure zero (see `Convex.addHaar_frontier`), hence
`s` is a `NullMeasurableSet` (see `Convex.nullMeasurableSet`).
-/


open MeasureTheory MeasureTheory.Measure Set Metric Filter Bornology

open FiniteDimensional (finrank)

open scoped Topology NNReal ENNReal

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [MeasurableSpace E] [BorelSpace E]
  [FiniteDimensional ‚Ñù E] (Œº : Measure E) [IsAddHaarMeasure Œº] {s : Set E}

namespace Convex

/-- Haar measure of the frontier of a convex set is zero. -/
theorem addHaar_frontier (hs : Convex ‚Ñù s) : Œº (frontier s) = 0 := by
  /- If `s` is included in a hyperplane, then `frontier s ‚äÜ closure s` is included in the same
    hyperplane, hence it has measure zero. -/
  cases' ne_or_eq (affineSpan ‚Ñù s) ‚ä§ with hspan hspan
  ¬∑ refine' measure_mono_null _ (addHaar_affineSubspace _ _ hspan)
    exact frontier_subset_closure.trans
      (closure_minimal (subset_affineSpan _ _) (affineSpan ‚Ñù s).closed_of_finiteDimensional)
  rw [‚Üê hs.interior_nonempty_iff_affineSpan_eq_top] at hspan
  rcases hspan with ‚ü®x, hx‚ü©
  /- Without loss of generality, `s` is bounded. Indeed, `‚àÇs ‚äÜ ‚ãÉ n, ‚àÇ(s ‚à© ball x (n + 1))`, hence it
    suffices to prove that `‚àÄ n, Œº (s ‚à© ball x (n + 1)) = 0`; the latter set is bounded.
    -/
  suffices H : ‚àÄ t : Set E, Convex ‚Ñù t ‚Üí x ‚àà interior t ‚Üí IsBounded t ‚Üí Œº (frontier t) = 0 by
    let B : ‚Ñï ‚Üí Set E := fun n => ball x (n + 1)
    have : Œº (‚ãÉ n : ‚Ñï, frontier (s ‚à© B n)) = 0 := by
      refine' measure_iUnion_null fun n =>
        H _ (hs.inter (convex_ball _ _)) _ (isBounded_ball.subset (inter_subset_right _ _))
      rw [interior_inter, isOpen_ball.interior_eq]
      exact ‚ü®hx, mem_ball_self (add_pos_of_nonneg_of_pos n.cast_nonneg zero_lt_one)‚ü©
    refine' measure_mono_null (fun y hy => _) this; clear this
    set N : ‚Ñï := ‚åädist y x‚åã‚Çä
    refine' mem_iUnion.2 ‚ü®N, _‚ü©
    have hN : y ‚àà B N := by simp [B, N, Nat.lt_floor_add_one]
    suffices y ‚àà frontier (s ‚à© B N) ‚à© B N from this.1
    rw [frontier_inter_open_inter isOpen_ball]
    exact ‚ü®hy, hN‚ü©
  intro s hs hx hb
  /- Since `s` is bounded, we have `Œº (interior s) ‚â† ‚àû`, hence it suffices to prove
    `Œº (closure s) ‚â§ Œº (interior s)`. -/
  replace hb : Œº (interior s) ‚â† ‚àû := (hb.subset interior_subset).measure_lt_top.ne
  suffices Œº (closure s) ‚â§ Œº (interior s) by
    rwa [frontier, measure_diff interior_subset_closure isOpen_interior.measurableSet hb,
      tsub_eq_zero_iff_le]
  /- Due to `Convex.closure_subset_image_homothety_interior_of_one_lt`, for any `r > 1` we have
    `closure s ‚äÜ homothety x r '' interior s`, hence `Œº (closure s) ‚â§ r ^ d * Œº (interior s)`,
    where `d = finrank ‚Ñù E`. -/
  set d : ‚Ñï := FiniteDimensional.finrank ‚Ñù E
  have : ‚àÄ r : ‚Ñù‚â•0, 1 < r ‚Üí Œº (closure s) ‚â§ ‚Üë(r ^ d) * Œº (interior s) := fun r hr ‚Ü¶ by
    refine (measure_mono <|
      hs.closure_subset_image_homothety_interior_of_one_lt hx r hr).trans_eq ?_
    rw [addHaar_image_homothety, ‚Üê NNReal.coe_pow, NNReal.abs_eq, ENNReal.ofReal_coe_nnreal]
  have : ‚àÄ·∂† (r : ‚Ñù‚â•0) in ùìù[>] 1, Œº (closure s) ‚â§ ‚Üë(r ^ d) * Œº (interior s) :=
    mem_of_superset self_mem_nhdsWithin this
  -- Taking the limit as `r ‚Üí 1`, we get `Œº (closure s) ‚â§ Œº (interior s)`.
  refine' ge_of_tendsto _ this
  refine' (((ENNReal.continuous_mul_const hb).comp
    (ENNReal.continuous_coe.comp (continuous_pow d))).tendsto' _ _ _).mono_left nhdsWithin_le_nhds
  simp
#align convex.add_haar_frontier Convex.addHaar_frontier

/-- A convex set in a finite dimensional real vector space is null measurable with respect to an
additive Haar measure on this space. -/
protected theorem nullMeasurableSet (hs : Convex ‚Ñù s) : NullMeasurableSet s Œº :=
  nullMeasurableSet_of_null_frontier (hs.addHaar_frontier Œº)
#align convex.null_measurable_set Convex.nullMeasurableSet

end Convex
