/-
Copyright (c) 2021 Ya√´l Dillies, Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Bhavik Mehta
-/
import Mathlib.Analysis.Convex.Topology
import Mathlib.Analysis.NormedSpace.Pointwise
import Mathlib.Analysis.Seminorm
import Mathlib.Analysis.LocallyConvex.Bounded
import Mathlib.Analysis.RCLike.Basic

#align_import analysis.convex.gauge from "leanprover-community/mathlib"@"373b03b5b9d0486534edbe94747f23cb3712f93d"

/-!
# The Minkowski functional

This file defines the Minkowski functional, aka gauge.

The Minkowski functional of a set `s` is the function which associates each point to how much you
need to scale `s` for `x` to be inside it. When `s` is symmetric, convex and absorbent, its gauge is
a seminorm. Reciprocally, any seminorm arises as the gauge of some set, namely its unit ball. This
induces the equivalence of seminorms and locally convex topological vector spaces.

## Main declarations

For a real vector space,
* `gauge`: Aka Minkowski functional. `gauge s x` is the least (actually, an infimum) `r` such
  that `x ‚àà r ‚Ä¢ s`.
* `gaugeSeminorm`: The Minkowski functional as a seminorm, when `s` is symmetric, convex and
  absorbent.

## References

* [H. H. Schaefer, *Topological Vector Spaces*][schaefer1966]

## Tags

Minkowski functional, gauge
-/

open NormedField Set
open scoped Pointwise Topology NNReal

noncomputable section

variable {ùïú E F : Type*}

section AddCommGroup

variable [AddCommGroup E] [Module ‚Ñù E]

/-- The Minkowski functional. Given a set `s` in a real vector space, `gauge s` is the functional
which sends `x : E` to the smallest `r : ‚Ñù` such that `x` is in `s` scaled by `r`. -/
def gauge (s : Set E) (x : E) : ‚Ñù :=
  sInf { r : ‚Ñù | 0 < r ‚àß x ‚àà r ‚Ä¢ s }
#align gauge gauge

variable {s t : Set E} {x : E} {a : ‚Ñù}

theorem gauge_def : gauge s x = sInf ({ r ‚àà Set.Ioi (0 : ‚Ñù) | x ‚àà r ‚Ä¢ s }) :=
  rfl
#align gauge_def gauge_def

/-- An alternative definition of the gauge using scalar multiplication on the element rather than on
the set. -/
theorem gauge_def' : gauge s x = sInf {r ‚àà Set.Ioi (0 : ‚Ñù) | r‚Åª¬π ‚Ä¢ x ‚àà s} := by
  congrm sInf {r | ?_}
  exact and_congr_right fun hr => mem_smul_set_iff_inv_smul_mem‚ÇÄ hr.ne' _ _
#align gauge_def' gauge_def'

private theorem gauge_set_bddBelow : BddBelow { r : ‚Ñù | 0 < r ‚àß x ‚àà r ‚Ä¢ s } :=
  ‚ü®0, fun _ hr => hr.1.le‚ü©

/-- If the given subset is `Absorbent` then the set we take an infimum over in `gauge` is nonempty,
which is useful for proving many properties about the gauge.  -/
theorem Absorbent.gauge_set_nonempty (absorbs : Absorbent ‚Ñù s) :
    { r : ‚Ñù | 0 < r ‚àß x ‚àà r ‚Ä¢ s }.Nonempty :=
  let ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := (absorbs x).exists_pos
  ‚ü®r, hr‚ÇÅ, hr‚ÇÇ r (Real.norm_of_nonneg hr‚ÇÅ.le).ge rfl‚ü©
#align absorbent.gauge_set_nonempty Absorbent.gauge_set_nonempty

theorem gauge_mono (hs : Absorbent ‚Ñù s) (h : s ‚äÜ t) : gauge t ‚â§ gauge s := fun _ =>
  csInf_le_csInf gauge_set_bddBelow hs.gauge_set_nonempty fun _ hr => ‚ü®hr.1, smul_set_mono h hr.2‚ü©
#align gauge_mono gauge_mono

theorem exists_lt_of_gauge_lt (absorbs : Absorbent ‚Ñù s) (h : gauge s x < a) :
    ‚àÉ b, 0 < b ‚àß b < a ‚àß x ‚àà b ‚Ä¢ s := by
  obtain ‚ü®b, ‚ü®hb, hx‚ü©, hba‚ü© := exists_lt_of_csInf_lt absorbs.gauge_set_nonempty h
  exact ‚ü®b, hb, hba, hx‚ü©
#align exists_lt_of_gauge_lt exists_lt_of_gauge_lt

/-- The gauge evaluated at `0` is always zero (mathematically this requires `0` to be in the set `s`
but, the real infimum of the empty set in Lean being defined as `0`, it holds unconditionally). -/
@[simp]
theorem gauge_zero : gauge s 0 = 0 := by
  rw [gauge_def']
  by_cases h : (0 : E) ‚àà s
  ¬∑ simp only [smul_zero, sep_true, h, csInf_Ioi]
  ¬∑ simp only [smul_zero, sep_false, h, Real.sInf_empty]
#align gauge_zero gauge_zero

@[simp]
theorem gauge_zero' : gauge (0 : Set E) = 0 := by
  ext x
  rw [gauge_def']
  obtain rfl | hx := eq_or_ne x 0
  ¬∑ simp only [csInf_Ioi, mem_zero, Pi.zero_apply, eq_self_iff_true, sep_true, smul_zero]
  ¬∑ simp only [mem_zero, Pi.zero_apply, inv_eq_zero, smul_eq_zero]
    convert Real.sInf_empty
    exact eq_empty_iff_forall_not_mem.2 fun r hr => hr.2.elim (ne_of_gt hr.1) hx
#align gauge_zero' gauge_zero'

@[simp]
theorem gauge_empty : gauge (‚àÖ : Set E) = 0 := by
  ext
  simp only [gauge_def', Real.sInf_empty, mem_empty_iff_false, Pi.zero_apply, sep_false]
#align gauge_empty gauge_empty

theorem gauge_of_subset_zero (h : s ‚äÜ 0) : gauge s = 0 := by
  obtain rfl | rfl := subset_singleton_iff_eq.1 h
  exacts [gauge_empty, gauge_zero']
#align gauge_of_subset_zero gauge_of_subset_zero

/-- The gauge is always nonnegative. -/
theorem gauge_nonneg (x : E) : 0 ‚â§ gauge s x :=
  Real.sInf_nonneg _ fun _ hx => hx.1.le
#align gauge_nonneg gauge_nonneg

theorem gauge_neg (symmetric : ‚àÄ x ‚àà s, -x ‚àà s) (x : E) : gauge s (-x) = gauge s x := by
  have : ‚àÄ x, -x ‚àà s ‚Üî x ‚àà s := fun x => ‚ü®fun h => by simpa using symmetric _ h, symmetric x‚ü©
  simp_rw [gauge_def', smul_neg, this]
#align gauge_neg gauge_neg

theorem gauge_neg_set_neg (x : E) : gauge (-s) (-x) = gauge s x := by
  simp_rw [gauge_def', smul_neg, neg_mem_neg]
#align gauge_neg_set_neg gauge_neg_set_neg

theorem gauge_neg_set_eq_gauge_neg (x : E) : gauge (-s) x = gauge s (-x) := by
  rw [‚Üê gauge_neg_set_neg, neg_neg]
#align gauge_neg_set_eq_gauge_neg gauge_neg_set_eq_gauge_neg

theorem gauge_le_of_mem (ha : 0 ‚â§ a) (hx : x ‚àà a ‚Ä¢ s) : gauge s x ‚â§ a := by
  obtain rfl | ha' := ha.eq_or_lt
  ¬∑ rw [mem_singleton_iff.1 (zero_smul_set_subset _ hx), gauge_zero]
  ¬∑ exact csInf_le gauge_set_bddBelow ‚ü®ha', hx‚ü©
#align gauge_le_of_mem gauge_le_of_mem

theorem gauge_le_eq (hs‚ÇÅ : Convex ‚Ñù s) (hs‚ÇÄ : (0 : E) ‚àà s) (hs‚ÇÇ : Absorbent ‚Ñù s) (ha : 0 ‚â§ a) :
    { x | gauge s x ‚â§ a } = ‚ãÇ (r : ‚Ñù) (_ : a < r), r ‚Ä¢ s := by
  ext x
  simp_rw [Set.mem_iInter, Set.mem_setOf_eq]
  refine' ‚ü®fun h r hr => _, fun h => le_of_forall_pos_lt_add fun Œµ hŒµ => _‚ü©
  ¬∑ have hr' := ha.trans_lt hr
    rw [mem_smul_set_iff_inv_smul_mem‚ÇÄ hr'.ne']
    obtain ‚ü®Œ¥, Œ¥_pos, hŒ¥r, hŒ¥‚ü© := exists_lt_of_gauge_lt hs‚ÇÇ (h.trans_lt hr)
    suffices (r‚Åª¬π * Œ¥) ‚Ä¢ Œ¥‚Åª¬π ‚Ä¢ x ‚àà s by rwa [smul_smul, mul_inv_cancel_right‚ÇÄ Œ¥_pos.ne'] at this
    rw [mem_smul_set_iff_inv_smul_mem‚ÇÄ Œ¥_pos.ne'] at hŒ¥
    refine' hs‚ÇÅ.smul_mem_of_zero_mem hs‚ÇÄ hŒ¥ ‚ü®by positivity, _‚ü©
    rw [inv_mul_le_iff hr', mul_one]
    exact hŒ¥r.le
  ¬∑ have hŒµ' := (lt_add_iff_pos_right a).2 (half_pos hŒµ)
    exact
      (gauge_le_of_mem (ha.trans hŒµ'.le) <| h _ hŒµ').trans_lt (add_lt_add_left (half_lt_self hŒµ) _)
#align gauge_le_eq gauge_le_eq

theorem gauge_lt_eq' (absorbs : Absorbent ‚Ñù s) (a : ‚Ñù) :
    { x | gauge s x < a } = ‚ãÉ (r : ‚Ñù) (_ : 0 < r) (_ : r < a), r ‚Ä¢ s := by
  ext
  simp_rw [mem_setOf, mem_iUnion, exists_prop]
  exact
    ‚ü®exists_lt_of_gauge_lt absorbs, fun ‚ü®r, hr‚ÇÄ, hr‚ÇÅ, hx‚ü© =>
      (gauge_le_of_mem hr‚ÇÄ.le hx).trans_lt hr‚ÇÅ‚ü©
#align gauge_lt_eq' gauge_lt_eq'

theorem gauge_lt_eq (absorbs : Absorbent ‚Ñù s) (a : ‚Ñù) :
    { x | gauge s x < a } = ‚ãÉ r ‚àà Set.Ioo 0 (a : ‚Ñù), r ‚Ä¢ s := by
  ext
  simp_rw [mem_setOf, mem_iUnion, exists_prop, mem_Ioo, and_assoc]
  exact
    ‚ü®exists_lt_of_gauge_lt absorbs, fun ‚ü®r, hr‚ÇÄ, hr‚ÇÅ, hx‚ü© =>
      (gauge_le_of_mem hr‚ÇÄ.le hx).trans_lt hr‚ÇÅ‚ü©
#align gauge_lt_eq gauge_lt_eq

theorem mem_openSegment_of_gauge_lt_one (absorbs : Absorbent ‚Ñù s) (hgauge : gauge s x < 1) :
    ‚àÉ y ‚àà s, x ‚àà openSegment ‚Ñù 0 y := by
  rcases exists_lt_of_gauge_lt absorbs hgauge with ‚ü®r, hr‚ÇÄ, hr‚ÇÅ, y, hy, rfl‚ü©
  refine ‚ü®y, hy, 1 - r, r, ?_‚ü©
  simp [*]

theorem gauge_lt_one_subset_self (hs : Convex ‚Ñù s) (h‚ÇÄ : (0 : E) ‚àà s) (absorbs : Absorbent ‚Ñù s) :
    { x | gauge s x < 1 } ‚äÜ s := fun _x hx ‚Ü¶
  let ‚ü®_y, hys, hx‚ü© := mem_openSegment_of_gauge_lt_one absorbs hx
  hs.openSegment_subset h‚ÇÄ hys hx
#align gauge_lt_one_subset_self gauge_lt_one_subset_self

theorem gauge_le_one_of_mem {x : E} (hx : x ‚àà s) : gauge s x ‚â§ 1 :=
  gauge_le_of_mem zero_le_one <| by rwa [one_smul]
#align gauge_le_one_of_mem gauge_le_one_of_mem

/-- Gauge is subadditive. -/
theorem gauge_add_le (hs : Convex ‚Ñù s) (absorbs : Absorbent ‚Ñù s) (x y : E) :
    gauge s (x + y) ‚â§ gauge s x + gauge s y := by
  refine' le_of_forall_pos_lt_add fun Œµ hŒµ => _
  obtain ‚ü®a, ha, ha', x, hx, rfl‚ü© :=
    exists_lt_of_gauge_lt absorbs (lt_add_of_pos_right (gauge s x) (half_pos hŒµ))
  obtain ‚ü®b, hb, hb', y, hy, rfl‚ü© :=
    exists_lt_of_gauge_lt absorbs (lt_add_of_pos_right (gauge s y) (half_pos hŒµ))
  calc
    gauge s (a ‚Ä¢ x + b ‚Ä¢ y) ‚â§ a + b := gauge_le_of_mem (by positivity) <| by
      rw [hs.add_smul ha.le hb.le]
      exact add_mem_add (smul_mem_smul_set hx) (smul_mem_smul_set hy)
    _ < gauge s (a ‚Ä¢ x) + gauge s (b ‚Ä¢ y) + Œµ := by linarith
#align gauge_add_le gauge_add_le

theorem self_subset_gauge_le_one : s ‚äÜ { x | gauge s x ‚â§ 1 } := fun _ => gauge_le_one_of_mem
#align self_subset_gauge_le_one self_subset_gauge_le_one

theorem Convex.gauge_le (hs : Convex ‚Ñù s) (h‚ÇÄ : (0 : E) ‚àà s) (absorbs : Absorbent ‚Ñù s) (a : ‚Ñù) :
    Convex ‚Ñù { x | gauge s x ‚â§ a } := by
  by_cases ha : 0 ‚â§ a
  ¬∑ rw [gauge_le_eq hs h‚ÇÄ absorbs ha]
    exact convex_iInter fun i => convex_iInter fun _ => hs.smul _
  ¬∑ -- Porting note: `convert` needed help
    convert convex_empty (ùïú := ‚Ñù) (E := E)
    exact eq_empty_iff_forall_not_mem.2 fun x hx => ha <| (gauge_nonneg _).trans hx
#align convex.gauge_le Convex.gauge_le

theorem Balanced.starConvex (hs : Balanced ‚Ñù s) : StarConvex ‚Ñù 0 s :=
  starConvex_zero_iff.2 fun x hx a ha‚ÇÄ ha‚ÇÅ =>
    hs _ (by rwa [Real.norm_of_nonneg ha‚ÇÄ]) (smul_mem_smul_set hx)
#align balanced.star_convex Balanced.starConvex

theorem le_gauge_of_not_mem (hs‚ÇÄ : StarConvex ‚Ñù 0 s) (hs‚ÇÇ : Absorbs ‚Ñù s {x}) (hx : x ‚àâ a ‚Ä¢ s) :
    a ‚â§ gauge s x := by
  rw [starConvex_zero_iff] at hs‚ÇÄ
  obtain ‚ü®r, hr, h‚ü© := hs‚ÇÇ.exists_pos
  refine' le_csInf ‚ü®r, hr, singleton_subset_iff.1 <| h _ (Real.norm_of_nonneg hr.le).ge‚ü© _
  rintro b ‚ü®hb, x, hx', rfl‚ü©
  refine' not_lt.1 fun hba => hx _
  have ha := hb.trans hba
  refine' ‚ü®(a‚Åª¬π * b) ‚Ä¢ x, hs‚ÇÄ hx' (by positivity) _, _‚ü©
  ¬∑ rw [‚Üê div_eq_inv_mul]
    exact div_le_one_of_le hba.le ha.le
  ¬∑ dsimp only
    rw [‚Üê mul_smul, mul_inv_cancel_left‚ÇÄ ha.ne']
#align le_gauge_of_not_mem le_gauge_of_not_mem

theorem one_le_gauge_of_not_mem (hs‚ÇÅ : StarConvex ‚Ñù 0 s) (hs‚ÇÇ : Absorbs ‚Ñù s {x}) (hx : x ‚àâ s) :
    1 ‚â§ gauge s x :=
  le_gauge_of_not_mem hs‚ÇÅ hs‚ÇÇ <| by rwa [one_smul]
#align one_le_gauge_of_not_mem one_le_gauge_of_not_mem

section LinearOrderedField

variable {Œ± : Type*} [LinearOrderedField Œ±] [MulActionWithZero Œ± ‚Ñù] [OrderedSMul Œ± ‚Ñù]

theorem gauge_smul_of_nonneg [MulActionWithZero Œ± E] [IsScalarTower Œ± ‚Ñù (Set E)] {s : Set E} {a : Œ±}
    (ha : 0 ‚â§ a) (x : E) : gauge s (a ‚Ä¢ x) = a ‚Ä¢ gauge s x := by
  obtain rfl | ha' := ha.eq_or_lt
  ¬∑ rw [zero_smul, gauge_zero, zero_smul]
  rw [gauge_def', gauge_def', ‚Üê Real.sInf_smul_of_nonneg ha]
  congr 1
  ext r
  simp_rw [Set.mem_smul_set, Set.mem_sep_iff]
  constructor
  ¬∑ rintro ‚ü®hr, hx‚ü©
    simp_rw [mem_Ioi] at hr ‚ä¢
    rw [‚Üê mem_smul_set_iff_inv_smul_mem‚ÇÄ hr.ne'] at hx
    have := smul_pos (inv_pos.2 ha') hr
    refine' ‚ü®a‚Åª¬π ‚Ä¢ r, ‚ü®this, _‚ü©, smul_inv_smul‚ÇÄ ha'.ne' _‚ü©
    rwa [‚Üê mem_smul_set_iff_inv_smul_mem‚ÇÄ this.ne', smul_assoc,
      mem_smul_set_iff_inv_smul_mem‚ÇÄ (inv_ne_zero ha'.ne'), inv_inv]
  ¬∑ rintro ‚ü®r, ‚ü®hr, hx‚ü©, rfl‚ü©
    rw [mem_Ioi] at hr ‚ä¢
    rw [‚Üê mem_smul_set_iff_inv_smul_mem‚ÇÄ hr.ne'] at hx
    have := smul_pos ha' hr
    refine' ‚ü®this, _‚ü©
    rw [‚Üê mem_smul_set_iff_inv_smul_mem‚ÇÄ this.ne', smul_assoc]
    exact smul_mem_smul_set hx
#align gauge_smul_of_nonneg gauge_smul_of_nonneg

theorem gauge_smul_left_of_nonneg [MulActionWithZero Œ± E] [SMulCommClass Œ± ‚Ñù ‚Ñù]
    [IsScalarTower Œ± ‚Ñù ‚Ñù] [IsScalarTower Œ± ‚Ñù E] {s : Set E} {a : Œ±} (ha : 0 ‚â§ a) :
    gauge (a ‚Ä¢ s) = a‚Åª¬π ‚Ä¢ gauge s := by
  obtain rfl | ha' := ha.eq_or_lt
  ¬∑ rw [inv_zero, zero_smul, gauge_of_subset_zero (zero_smul_set_subset _)]
  ext x
  rw [gauge_def', Pi.smul_apply, gauge_def', ‚Üê Real.sInf_smul_of_nonneg (inv_nonneg.2 ha)]
  congr 1
  ext r
  simp_rw [Set.mem_smul_set, Set.mem_sep_iff]
  constructor
  ¬∑ rintro ‚ü®hr, y, hy, h‚ü©
    simp_rw [mem_Ioi] at hr ‚ä¢
    refine' ‚ü®a ‚Ä¢ r, ‚ü®smul_pos ha' hr, _‚ü©, inv_smul_smul‚ÇÄ ha'.ne' _‚ü©
    rwa [smul_inv‚ÇÄ, smul_assoc, ‚Üê h, inv_smul_smul‚ÇÄ ha'.ne']
  ¬∑ rintro ‚ü®r, ‚ü®hr, hx‚ü©, rfl‚ü©
    rw [mem_Ioi] at hr ‚ä¢
    refine' ‚ü®smul_pos (inv_pos.2 ha') hr, r‚Åª¬π ‚Ä¢ x, hx, _‚ü©
    rw [smul_inv‚ÇÄ, smul_assoc, inv_inv]
#align gauge_smul_left_of_nonneg gauge_smul_left_of_nonneg

theorem gauge_smul_left [Module Œ± E] [SMulCommClass Œ± ‚Ñù ‚Ñù] [IsScalarTower Œ± ‚Ñù ‚Ñù]
    [IsScalarTower Œ± ‚Ñù E] {s : Set E} (symmetric : ‚àÄ x ‚àà s, -x ‚àà s) (a : Œ±) :
    gauge (a ‚Ä¢ s) = |a|‚Åª¬π ‚Ä¢ gauge s := by
  rw [‚Üê gauge_smul_left_of_nonneg (abs_nonneg a)]
  obtain h | h := abs_choice a
  ¬∑ rw [h]
  ¬∑ rw [h, Set.neg_smul_set, ‚Üê Set.smul_set_neg]
    -- Porting note: was congr
    apply congr_arg
    apply congr_arg
    ext y
    refine' ‚ü®symmetric _, fun hy => _‚ü©
    rw [‚Üê neg_neg y]
    exact symmetric _ hy
#align gauge_smul_left gauge_smul_left

end LinearOrderedField

section RCLike

variable [RCLike ùïú] [Module ùïú E] [IsScalarTower ‚Ñù ùïú E]

theorem gauge_norm_smul (hs : Balanced ùïú s) (r : ùïú) (x : E) :
    gauge s (‚Äñr‚Äñ ‚Ä¢ x) = gauge s (r ‚Ä¢ x) := by
  unfold gauge
  congr with Œ∏
  rw [@RCLike.real_smul_eq_coe_smul ùïú]
  refine' and_congr_right fun hŒ∏ => (hs.smul _).smul_mem_iff _
  rw [RCLike.norm_ofReal, abs_norm]
#align gauge_norm_smul gauge_norm_smul

/-- If `s` is balanced, then the Minkowski functional is ‚ÑÇ-homogeneous. -/
theorem gauge_smul (hs : Balanced ùïú s) (r : ùïú) (x : E) : gauge s (r ‚Ä¢ x) = ‚Äñr‚Äñ * gauge s x := by
  rw [‚Üê smul_eq_mul, ‚Üê gauge_smul_of_nonneg (norm_nonneg r), gauge_norm_smul hs]
#align gauge_smul gauge_smul

end RCLike

open Filter

section TopologicalSpace

variable [TopologicalSpace E]

theorem comap_gauge_nhds_zero_le (ha : Absorbent ‚Ñù s) (hb : Bornology.IsVonNBounded ‚Ñù s) :
    comap (gauge s) (ùìù 0) ‚â§ ùìù 0 := fun u hu ‚Ü¶ by
  rcases (hb hu).exists_pos with ‚ü®r, hr‚ÇÄ, hr‚ü©
  filter_upwards [preimage_mem_comap (gt_mem_nhds (inv_pos.2 hr‚ÇÄ))] with x (hx : gauge s x < r‚Åª¬π)
  rcases exists_lt_of_gauge_lt ha hx with ‚ü®c, hc‚ÇÄ, hcr, y, hy, rfl‚ü©
  have hrc := (lt_inv hr‚ÇÄ hc‚ÇÄ).2 hcr
  rcases hr c‚Åª¬π (hrc.le.trans (le_abs_self _)) hy with ‚ü®z, hz, rfl‚ü©
  simpa only [smul_inv_smul‚ÇÄ hc‚ÇÄ.ne']

variable [T1Space E]

theorem gauge_eq_zero (hs : Absorbent ‚Ñù s) (hb : Bornology.IsVonNBounded ‚Ñù s) :
    gauge s x = 0 ‚Üî x = 0 := by
  refine ‚ü®fun h‚ÇÄ ‚Ü¶ by_contra fun (hne : x ‚â† 0) ‚Ü¶ ?_, fun h ‚Ü¶ h.symm ‚ñ∏ gauge_zero‚ü©
  have : {x}·∂ú ‚àà comap (gauge s) (ùìù 0) :=
    comap_gauge_nhds_zero_le hs hb (isOpen_compl_singleton.mem_nhds hne.symm)
  rcases ((nhds_basis_zero_abs_sub_lt _).comap _).mem_iff.1 this with ‚ü®r, hr‚ÇÄ, hr‚ü©
  exact hr (by simpa [h‚ÇÄ]) rfl

theorem gauge_pos (hs : Absorbent ‚Ñù s) (hb : Bornology.IsVonNBounded ‚Ñù s) :
    0 < gauge s x ‚Üî x ‚â† 0 := by
  simp only [(gauge_nonneg _).gt_iff_ne, Ne, gauge_eq_zero hs hb]

end TopologicalSpace

section ContinuousSMul

variable [TopologicalSpace E] [ContinuousSMul ‚Ñù E]

open Filter in
theorem interior_subset_gauge_lt_one (s : Set E) : interior s ‚äÜ { x | gauge s x < 1 } := by
  intro x hx
  have H‚ÇÅ : Tendsto (fun r : ‚Ñù ‚Ü¶ r‚Åª¬π ‚Ä¢ x) (ùìù[<] 1) (ùìù ((1 : ‚Ñù)‚Åª¬π ‚Ä¢ x)) :=
    ((tendsto_id.inv‚ÇÄ one_ne_zero).smul tendsto_const_nhds).mono_left inf_le_left
  rw [inv_one, one_smul] at H‚ÇÅ
  have H‚ÇÇ : ‚àÄ·∂† r in ùìù[<] (1 : ‚Ñù), x ‚àà r ‚Ä¢ s ‚àß 0 < r ‚àß r < 1 := by
    filter_upwards [H‚ÇÅ (mem_interior_iff_mem_nhds.1 hx), Ioo_mem_nhdsWithin_Iio' one_pos]
    intro r h‚ÇÅ h‚ÇÇ
    exact ‚ü®(mem_smul_set_iff_inv_smul_mem‚ÇÄ h‚ÇÇ.1.ne' _ _).2 h‚ÇÅ, h‚ÇÇ‚ü©
  rcases H‚ÇÇ.exists with ‚ü®r, hxr, hr‚ÇÄ, hr‚ÇÅ‚ü©
  exact (gauge_le_of_mem hr‚ÇÄ.le hxr).trans_lt hr‚ÇÅ
#align interior_subset_gauge_lt_one interior_subset_gauge_lt_one

theorem gauge_lt_one_eq_self_of_isOpen (hs‚ÇÅ : Convex ‚Ñù s) (hs‚ÇÄ : (0 : E) ‚àà s) (hs‚ÇÇ : IsOpen s) :
    { x | gauge s x < 1 } = s := by
  refine' (gauge_lt_one_subset_self hs‚ÇÅ ‚Äπ_‚Ä∫ <| absorbent_nhds_zero <| hs‚ÇÇ.mem_nhds hs‚ÇÄ).antisymm _
  convert interior_subset_gauge_lt_one s
  exact hs‚ÇÇ.interior_eq.symm
#align gauge_lt_one_eq_self_of_open gauge_lt_one_eq_self_of_isOpen

-- Porting note: droped unneeded assumptions
theorem gauge_lt_one_of_mem_of_isOpen (hs‚ÇÇ : IsOpen s) {x : E} (hx : x ‚àà s) :
    gauge s x < 1 :=
  interior_subset_gauge_lt_one s <| by rwa [hs‚ÇÇ.interior_eq]
#align gauge_lt_one_of_mem_of_open gauge_lt_one_of_mem_of_isOpen‚Çì

-- Porting note: droped unneeded assumptions
theorem gauge_lt_of_mem_smul (x : E) (Œµ : ‚Ñù) (hŒµ : 0 < Œµ) (hs‚ÇÇ : IsOpen s) (hx : x ‚àà Œµ ‚Ä¢ s) :
    gauge s x < Œµ := by
  have : Œµ‚Åª¬π ‚Ä¢ x ‚àà s := by rwa [‚Üê mem_smul_set_iff_inv_smul_mem‚ÇÄ hŒµ.ne']
  have h_gauge_lt := gauge_lt_one_of_mem_of_isOpen hs‚ÇÇ this
  rwa [gauge_smul_of_nonneg (inv_nonneg.2 hŒµ.le), smul_eq_mul, inv_mul_lt_iff hŒµ, mul_one]
    at h_gauge_lt
#align gauge_lt_of_mem_smul gauge_lt_of_mem_smul‚Çì

theorem mem_closure_of_gauge_le_one (hc : Convex ‚Ñù s) (hs‚ÇÄ : 0 ‚àà s) (ha : Absorbent ‚Ñù s)
    (h : gauge s x ‚â§ 1) : x ‚àà closure s := by
  have : ‚àÄ·∂† r : ‚Ñù in ùìù[<] 1, r ‚Ä¢ x ‚àà s := by
    filter_upwards [Ico_mem_nhdsWithin_Iio' one_pos] with r ‚ü®hr‚ÇÄ, hr‚ÇÅ‚ü©
    apply gauge_lt_one_subset_self hc hs‚ÇÄ ha
    rw [mem_setOf_eq, gauge_smul_of_nonneg hr‚ÇÄ]
    exact mul_lt_one_of_nonneg_of_lt_one_left hr‚ÇÄ hr‚ÇÅ h
  refine mem_closure_of_tendsto ?_ this
  exact Filter.Tendsto.mono_left (Continuous.tendsto' (by continuity) _ _ (one_smul _ _))
    inf_le_left

theorem mem_frontier_of_gauge_eq_one (hc : Convex ‚Ñù s) (hs‚ÇÄ : 0 ‚àà s) (ha : Absorbent ‚Ñù s)
    (h : gauge s x = 1) : x ‚àà frontier s :=
  ‚ü®mem_closure_of_gauge_le_one hc hs‚ÇÄ ha h.le, fun h' ‚Ü¶
    (interior_subset_gauge_lt_one s h').out.ne h‚ü©

theorem tendsto_gauge_nhds_zero' (hs : s ‚àà ùìù 0) : Tendsto (gauge s) (ùìù 0) (ùìù[‚â•] 0) := by
  refine nhdsWithin_Ici_basis_Icc.tendsto_right_iff.2 fun Œµ hŒµ ‚Ü¶ ?_
  rw [‚Üê set_smul_mem_nhds_zero_iff hŒµ.ne'] at hs
  filter_upwards [hs] with x hx
  exact ‚ü®gauge_nonneg _, gauge_le_of_mem hŒµ.le hx‚ü©

theorem tendsto_gauge_nhds_zero (hs : s ‚àà ùìù 0) : Tendsto (gauge s) (ùìù 0) (ùìù 0) :=
  (tendsto_gauge_nhds_zero' hs).mono_right inf_le_left

/-- If `s` is a neighborhood of the origin, then `gauge s` is continuous at the origin.
See also `continuousAt_gauge`. -/
theorem continuousAt_gauge_zero (hs : s ‚àà ùìù 0) : ContinuousAt (gauge s) 0 := by
  rw [ContinuousAt, gauge_zero]
  exact tendsto_gauge_nhds_zero hs

theorem comap_gauge_nhds_zero (hb : Bornology.IsVonNBounded ‚Ñù s) (h‚ÇÄ : s ‚àà ùìù 0) :
    comap (gauge s) (ùìù 0) = ùìù 0 :=
  (comap_gauge_nhds_zero_le (absorbent_nhds_zero h‚ÇÄ) hb).antisymm
    (tendsto_gauge_nhds_zero h‚ÇÄ).le_comap

end ContinuousSMul

section TopologicalVectorSpace

open Filter

variable [TopologicalSpace E] [TopologicalAddGroup E] [ContinuousSMul ‚Ñù E]

/-- If `s` is a convex neighborhood of the origin in a topological real vector space, then `gauge s`
is continuous. If the ambient space is a normed space, then `gauge s` is Lipschitz continuous, see
`Convex.lipschitz_gauge`. -/
theorem continuousAt_gauge (hc : Convex ‚Ñù s) (hs‚ÇÄ : s ‚àà ùìù 0) : ContinuousAt (gauge s) x := by
  have ha : Absorbent ‚Ñù s := absorbent_nhds_zero hs‚ÇÄ
  refine (nhds_basis_Icc_pos _).tendsto_right_iff.2 fun Œµ hŒµ‚ÇÄ ‚Ü¶ ?_
  rw [‚Üê map_add_left_nhds_zero, eventually_map]
  have : Œµ ‚Ä¢ s ‚à© -(Œµ ‚Ä¢ s) ‚àà ùìù 0 :=
    inter_mem ((set_smul_mem_nhds_zero_iff hŒµ‚ÇÄ.ne').2 hs‚ÇÄ)
      (neg_mem_nhds_zero _ ((set_smul_mem_nhds_zero_iff hŒµ‚ÇÄ.ne').2 hs‚ÇÄ))
  filter_upwards [this] with y hy
  constructor
  ¬∑ rw [sub_le_iff_le_add]
    calc
      gauge s x = gauge s (x + y + (-y)) := by simp
      _ ‚â§ gauge s (x + y) + gauge s (-y) := gauge_add_le hc ha _ _
      _ ‚â§ gauge s (x + y) + Œµ := add_le_add_left (gauge_le_of_mem hŒµ‚ÇÄ.le (mem_neg.1 hy.2)) _
  ¬∑ calc
      gauge s (x + y) ‚â§ gauge s x + gauge s y := gauge_add_le hc ha _ _
      _ ‚â§ gauge s x + Œµ := add_le_add_left (gauge_le_of_mem hŒµ‚ÇÄ.le hy.1) _

/-- If `s` is a convex neighborhood of the origin in a topological real vector space, then `gauge s`
is continuous. If the ambient space is a normed space, then `gauge s` is Lipschitz continuous, see
`Convex.lipschitz_gauge`. -/
@[continuity]
theorem continuous_gauge (hc : Convex ‚Ñù s) (hs‚ÇÄ : s ‚àà ùìù 0) : Continuous (gauge s) :=
  continuous_iff_continuousAt.2 fun _ ‚Ü¶ continuousAt_gauge hc hs‚ÇÄ

theorem gauge_lt_one_eq_interior (hc : Convex ‚Ñù s) (hs‚ÇÄ : s ‚àà ùìù 0) :
    { x | gauge s x < 1 } = interior s := by
  refine Subset.antisymm (fun x hx ‚Ü¶ ?_) (interior_subset_gauge_lt_one s)
  rcases mem_openSegment_of_gauge_lt_one (absorbent_nhds_zero hs‚ÇÄ) hx with ‚ü®y, hys, hxy‚ü©
  exact hc.openSegment_interior_self_subset_interior (mem_interior_iff_mem_nhds.2 hs‚ÇÄ) hys hxy

theorem gauge_lt_one_iff_mem_interior (hc : Convex ‚Ñù s) (hs‚ÇÄ : s ‚àà ùìù 0) :
    gauge s x < 1 ‚Üî x ‚àà interior s :=
  Set.ext_iff.1 (gauge_lt_one_eq_interior hc hs‚ÇÄ) _

theorem gauge_le_one_iff_mem_closure (hc : Convex ‚Ñù s) (hs‚ÇÄ : s ‚àà ùìù 0) :
    gauge s x ‚â§ 1 ‚Üî x ‚àà closure s :=
  ‚ü®mem_closure_of_gauge_le_one hc (mem_of_mem_nhds hs‚ÇÄ) (absorbent_nhds_zero hs‚ÇÄ), fun h ‚Ü¶
    le_on_closure (fun _ ‚Ü¶ gauge_le_one_of_mem) (continuous_gauge hc hs‚ÇÄ).continuousOn
      continuousOn_const h‚ü©

theorem gauge_eq_one_iff_mem_frontier (hc : Convex ‚Ñù s) (hs‚ÇÄ : s ‚àà ùìù 0) :
    gauge s x = 1 ‚Üî x ‚àà frontier s := by
  rw [eq_iff_le_not_lt, gauge_le_one_iff_mem_closure hc hs‚ÇÄ, gauge_lt_one_iff_mem_interior hc hs‚ÇÄ]
  rfl

end TopologicalVectorSpace

section RCLike

variable [RCLike ùïú] [Module ùïú E] [IsScalarTower ‚Ñù ùïú E]

/-- `gauge s` as a seminorm when `s` is balanced, convex and absorbent. -/
@[simps!]
def gaugeSeminorm (hs‚ÇÄ : Balanced ùïú s) (hs‚ÇÅ : Convex ‚Ñù s) (hs‚ÇÇ : Absorbent ‚Ñù s) : Seminorm ùïú E :=
  Seminorm.of (gauge s) (gauge_add_le hs‚ÇÅ hs‚ÇÇ) (gauge_smul hs‚ÇÄ)
#align gauge_seminorm gaugeSeminorm

variable {hs‚ÇÄ : Balanced ùïú s} {hs‚ÇÅ : Convex ‚Ñù s} {hs‚ÇÇ : Absorbent ‚Ñù s} [TopologicalSpace E]
  [ContinuousSMul ‚Ñù E]

theorem gaugeSeminorm_lt_one_of_isOpen (hs : IsOpen s) {x : E} (hx : x ‚àà s) :
    gaugeSeminorm hs‚ÇÄ hs‚ÇÅ hs‚ÇÇ x < 1 :=
  gauge_lt_one_of_mem_of_isOpen hs hx
#align gauge_seminorm_lt_one_of_open gaugeSeminorm_lt_one_of_isOpen

theorem gaugeSeminorm_ball_one (hs : IsOpen s) : (gaugeSeminorm hs‚ÇÄ hs‚ÇÅ hs‚ÇÇ).ball 0 1 = s := by
  rw [Seminorm.ball_zero_eq]
  exact gauge_lt_one_eq_self_of_isOpen hs‚ÇÅ hs‚ÇÇ.zero_mem hs
#align gauge_seminorm_ball_one gaugeSeminorm_ball_one

end RCLike

/-- Any seminorm arises as the gauge of its unit ball. -/
@[simp]
protected theorem Seminorm.gauge_ball (p : Seminorm ‚Ñù E) : gauge (p.ball 0 1) = p := by
  ext x
  obtain hp | hp := { r : ‚Ñù | 0 < r ‚àß x ‚àà r ‚Ä¢ p.ball 0 1 }.eq_empty_or_nonempty
  ¬∑ rw [gauge, hp, Real.sInf_empty]
    by_contra h
    have hpx : 0 < p x := (apply_nonneg _ _).lt_of_ne h
    have hpx‚ÇÇ : 0 < 2 * p x := mul_pos zero_lt_two hpx
    refine' hp.subset ‚ü®hpx‚ÇÇ, (2 * p x)‚Åª¬π ‚Ä¢ x, _, smul_inv_smul‚ÇÄ hpx‚ÇÇ.ne' _‚ü©
    rw [p.mem_ball_zero, map_smul_eq_mul, Real.norm_eq_abs, abs_of_pos (inv_pos.2 hpx‚ÇÇ),
      inv_mul_lt_iff hpx‚ÇÇ, mul_one]
    exact lt_mul_of_one_lt_left hpx one_lt_two
  refine' IsGLB.csInf_eq ‚ü®fun r => _, fun r hr => le_of_forall_pos_le_add fun Œµ hŒµ => _‚ü© hp
  ¬∑ rintro ‚ü®hr, y, hy, rfl‚ü©
    rw [p.mem_ball_zero] at hy
    rw [map_smul_eq_mul, Real.norm_eq_abs, abs_of_pos hr]
    exact mul_le_of_le_one_right hr.le hy.le
  ¬∑ have hpŒµ : 0 < p x + Œµ :=
      -- Porting note: was `by positivity`
      add_pos_of_nonneg_of_pos (apply_nonneg _ _) hŒµ
    refine' hr ‚ü®hpŒµ, (p x + Œµ)‚Åª¬π ‚Ä¢ x, _, smul_inv_smul‚ÇÄ hpŒµ.ne' _‚ü©
    rw [p.mem_ball_zero, map_smul_eq_mul, Real.norm_eq_abs, abs_of_pos (inv_pos.2 hpŒµ),
      inv_mul_lt_iff hpŒµ, mul_one]
    exact lt_add_of_pos_right _ hŒµ
#align seminorm.gauge_ball Seminorm.gauge_ball

theorem Seminorm.gaugeSeminorm_ball (p : Seminorm ‚Ñù E) :
    gaugeSeminorm (p.balanced_ball_zero 1) (p.convex_ball 0 1) (p.absorbent_ball_zero zero_lt_one) =
      p :=
  DFunLike.coe_injective p.gauge_ball
#align seminorm.gauge_seminorm_ball Seminorm.gaugeSeminorm_ball

end AddCommGroup

section Seminormed

variable [SeminormedAddCommGroup E] [NormedSpace ‚Ñù E] {s : Set E} {r : ‚Ñù} {x : E}
open Metric

theorem gauge_unit_ball (x : E) : gauge (ball (0 : E) 1) x = ‚Äñx‚Äñ := by
  rw [‚Üê ball_normSeminorm ‚Ñù, Seminorm.gauge_ball, coe_normSeminorm]
#align gauge_unit_ball gauge_unit_ball

theorem gauge_ball (hr : 0 ‚â§ r) (x : E) : gauge (ball (0 : E) r) x = ‚Äñx‚Äñ / r := by
  rcases hr.eq_or_lt with rfl | hr
  ¬∑ simp
  ¬∑ rw [‚Üê smul_unitBall_of_pos hr, gauge_smul_left, Pi.smul_apply, gauge_unit_ball, smul_eq_mul,
    abs_of_nonneg hr.le, div_eq_inv_mul]
    simp_rw [mem_ball_zero_iff, norm_neg]
    exact fun _ => id

@[deprecated gauge_ball] -- 2023-07-24
theorem gauge_ball' (hr : 0 < r) (x : E) : gauge (ball (0 : E) r) x = ‚Äñx‚Äñ / r :=
  gauge_ball hr.le x
#align gauge_ball gauge_ball'

@[simp]
theorem gauge_closure_zero : gauge (closure (0 : Set E)) = 0 := funext fun x ‚Ü¶ by
  simp only [‚Üê singleton_zero, gauge_def', mem_closure_zero_iff_norm, norm_smul, mul_eq_zero,
    norm_eq_zero, inv_eq_zero]
  rcases (norm_nonneg x).eq_or_gt with hx | hx
  ¬∑ convert csInf_Ioi (a := (0 : ‚Ñù))
    exact Set.ext fun r ‚Ü¶ and_iff_left (.inr hx)
  ¬∑ convert Real.sInf_empty
    exact eq_empty_of_forall_not_mem fun r ‚ü®hr‚ÇÄ, hr‚ü© ‚Ü¶ hx.ne' <| hr.resolve_left hr‚ÇÄ.out.ne'

@[simp]
theorem gauge_closedBall (hr : 0 ‚â§ r) (x : E) : gauge (closedBall (0 : E) r) x = ‚Äñx‚Äñ / r := by
  rcases hr.eq_or_lt with rfl | hr'
  ¬∑ rw [div_zero, closedBall_zero', singleton_zero, gauge_closure_zero]; rfl
  ¬∑ apply le_antisymm
    ¬∑ rw [‚Üê gauge_ball hr]
      exact gauge_mono (absorbent_ball_zero hr') ball_subset_closedBall x
    ¬∑ suffices ‚àÄ·∂† R in ùìù[>] r, ‚Äñx‚Äñ / R ‚â§ gauge (closedBall 0 r) x by
        refine le_of_tendsto ?_ this
        exact tendsto_const_nhds.div inf_le_left hr'.ne'
      filter_upwards [self_mem_nhdsWithin] with R hR
      rw [‚Üê gauge_ball (hr.trans hR.out.le)]
      refine gauge_mono ?_ (closedBall_subset_ball hR) _
      exact (absorbent_ball_zero hr').mono ball_subset_closedBall

theorem mul_gauge_le_norm (hs : Metric.ball (0 : E) r ‚äÜ s) : r * gauge s x ‚â§ ‚Äñx‚Äñ := by
  obtain hr | hr := le_or_lt r 0
  ¬∑ exact (mul_nonpos_of_nonpos_of_nonneg hr <| gauge_nonneg _).trans (norm_nonneg _)
  rw [mul_comm, ‚Üê le_div_iff hr, ‚Üê gauge_ball hr.le]
  exact gauge_mono (absorbent_ball_zero hr) hs x
#align mul_gauge_le_norm mul_gauge_le_norm

theorem Convex.lipschitzWith_gauge {r : ‚Ñù‚â•0} (hc : Convex ‚Ñù s) (hr : 0 < r)
    (hs : Metric.ball (0 : E) r ‚äÜ s) : LipschitzWith r‚Åª¬π (gauge s) :=
  have : Absorbent ‚Ñù (Metric.ball (0 : E) r) := absorbent_ball_zero hr
  LipschitzWith.of_le_add_mul _ fun x y =>
    calc
      gauge s x = gauge s (y + (x - y)) := by simp
      _ ‚â§ gauge s y + gauge s (x - y) := gauge_add_le hc (this.mono hs) _ _
      _ ‚â§ gauge s y + ‚Äñx - y‚Äñ / r :=
        add_le_add_left ((gauge_mono this hs (x - y)).trans_eq (gauge_ball hr.le _)) _
      _ = gauge s y + r‚Åª¬π * dist x y := by rw [dist_eq_norm, div_eq_inv_mul, NNReal.coe_inv]
#align convex.lipschitz_with_gauge Convex.lipschitzWith_gauge

theorem Convex.lipschitz_gauge (hc : Convex ‚Ñù s) (h‚ÇÄ : s ‚àà ùìù (0 : E)) :
    ‚àÉ K, LipschitzWith K (gauge s) :=
  let ‚ü®r, hr‚ÇÄ, hr‚ü© := Metric.mem_nhds_iff.1 h‚ÇÄ
  ‚ü®(‚ü®r, hr‚ÇÄ.le‚ü© : ‚Ñù‚â•0)‚Åª¬π, hc.lipschitzWith_gauge hr‚ÇÄ hr‚ü©

theorem Convex.uniformContinuous_gauge (hc : Convex ‚Ñù s) (h‚ÇÄ : s ‚àà ùìù (0 : E)) :
    UniformContinuous (gauge s) :=
  let ‚ü®_K, hK‚ü© := hc.lipschitz_gauge h‚ÇÄ; hK.uniformContinuous
#align convex.uniform_continuous_gauge Convex.uniformContinuous_gauge

end Seminormed

section Normed

variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E] {s : Set E} {r : ‚Ñù} {x : E}
open Metric

theorem le_gauge_of_subset_closedBall (hs : Absorbent ‚Ñù s) (hr : 0 ‚â§ r) (hsr : s ‚äÜ closedBall 0 r) :
    ‚Äñx‚Äñ / r ‚â§ gauge s x := by
  rw [‚Üê gauge_closedBall hr]
  exact gauge_mono hs hsr _

end Normed
