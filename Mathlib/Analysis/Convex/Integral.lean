/-
Copyright (c) 2020 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov
-/
import Mathlib.Analysis.Convex.Function
import Mathlib.Analysis.Convex.StrictConvexSpace
import Mathlib.MeasureTheory.Function.AEEqOfIntegral
import Mathlib.MeasureTheory.Integral.Average

#align_import analysis.convex.integral from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# Jensen's inequality for integrals

In this file we prove several forms of Jensen's inequality for integrals.

- for convex sets: `Convex.average_mem`, `Convex.set_average_mem`, `Convex.integral_mem`;

- for convex functions: `ConvexOn.average_mem_epigraph`, `ConvexOn.map_average_le`,
  `ConvexOn.set_average_mem_epigraph`, `ConvexOn.map_set_average_le`, `ConvexOn.map_integral_le`;

- for strictly convex sets: `StrictConvex.ae_eq_const_or_average_mem_interior`;

- for a closed ball in a strictly convex normed space:
  `ae_eq_const_or_norm_integral_lt_of_norm_le_const`;

- for strictly convex functions: `StrictConvexOn.ae_eq_const_or_map_average_lt`.

## TODO

- Use a typeclass for strict convexity of a closed ball.

## Tags

convex, integral, center mass, average value, Jensen's inequality
-/


open MeasureTheory MeasureTheory.Measure Metric Set Filter TopologicalSpace Function

open scoped Topology BigOperators ENNReal Convex

variable {Œ± E F : Type*} {m0 : MeasurableSpace Œ±} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  [CompleteSpace E] [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [CompleteSpace F] {Œº : Measure Œ±}
  {s : Set E} {t : Set Œ±} {f : Œ± ‚Üí E} {g : E ‚Üí ‚Ñù} {C : ‚Ñù}

/-!
### Non-strict Jensen's inequality
-/


/-- If `Œº` is a probability measure on `Œ±`, `s` is a convex closed set in `E`, and `f` is an
integrable function sending `Œº`-a.e. points to `s`, then the expected value of `f` belongs to `s`:
`‚à´ x, f x ‚àÇŒº ‚àà s`. See also `Convex.sum_mem` for a finite sum version of this lemma. -/
theorem Convex.integral_mem [IsProbabilityMeasure Œº] (hs : Convex ‚Ñù s) (hsc : IsClosed s)
    (hf : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : Integrable f Œº) : (‚à´ x, f x ‚àÇŒº) ‚àà s := by
  borelize E
  rcases hfi.aestronglyMeasurable with ‚ü®g, hgm, hfg‚ü©
  haveI : SeparableSpace (range g ‚à© s : Set E) :=
    (hgm.isSeparable_range.mono (inter_subset_left _ _)).separableSpace
  obtain ‚ü®y‚ÇÄ, h‚ÇÄ‚ü© : (range g ‚à© s).Nonempty := by
    rcases (hf.and hfg).exists with ‚ü®x‚ÇÄ, h‚ÇÄ‚ü©
    exact ‚ü®f x‚ÇÄ, by simp only [h‚ÇÄ.2, mem_range_self], h‚ÇÄ.1‚ü©
  rw [integral_congr_ae hfg]; rw [integrable_congr hfg] at hfi
  have hg : ‚àÄ·µê x ‚àÇŒº, g x ‚àà closure (range g ‚à© s) := by
    filter_upwards [hfg.rw (fun _ y => y ‚àà s) hf] with x hx
    apply subset_closure
    exact ‚ü®mem_range_self _, hx‚ü©
  set G : ‚Ñï ‚Üí SimpleFunc Œ± E := SimpleFunc.approxOn _ hgm.measurable (range g ‚à© s) y‚ÇÄ h‚ÇÄ
  have : Tendsto (fun n => (G n).integral Œº) atTop (ùìù <| ‚à´ x, g x ‚àÇŒº) :=
    tendsto_integral_approxOn_of_measurable hfi _ hg _ (integrable_const _)
  refine' hsc.mem_of_tendsto this (eventually_of_forall fun n => hs.sum_mem _ _ _)
  ¬∑ exact fun _ _ => ENNReal.toReal_nonneg
  ¬∑ rw [‚Üê ENNReal.toReal_sum, (G n).sum_range_measure_preimage_singleton, measure_univ,
      ENNReal.one_toReal]
    exact fun _ _ => measure_ne_top _ _
  ¬∑ simp only [SimpleFunc.mem_range, forall_range_iff]
    intro x
    apply inter_subset_right (range g)
    exact SimpleFunc.approxOn_mem hgm.measurable h‚ÇÄ _ _
#align convex.integral_mem Convex.integral_mem

/-- If `Œº` is a non-zero finite measure on `Œ±`, `s` is a convex closed set in `E`, and `f` is an
integrable function sending `Œº`-a.e. points to `s`, then the average value of `f` belongs to `s`:
`‚®ç x, f x ‚àÇŒº ‚àà s`. See also `Convex.centerMass_mem` for a finite sum version of this lemma. -/
theorem Convex.average_mem [IsFiniteMeasure Œº] [NeZero Œº] (hs : Convex ‚Ñù s) (hsc : IsClosed s)
    (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : Integrable f Œº) : (‚®ç x, f x ‚àÇŒº) ‚àà s := by
  refine' hs.integral_mem hsc (ae_mono' _ hfs) hfi.to_average
  exact AbsolutelyContinuous.smul (refl _) _
#align convex.average_mem Convex.average_mem

/-- If `Œº` is a non-zero finite measure on `Œ±`, `s` is a convex closed set in `E`, and `f` is an
integrable function sending `Œº`-a.e. points to `s`, then the average value of `f` belongs to `s`:
`‚®ç x, f x ‚àÇŒº ‚àà s`. See also `Convex.centerMass_mem` for a finite sum version of this lemma. -/
theorem Convex.set_average_mem (hs : Convex ‚Ñù s) (hsc : IsClosed s) (h0 : Œº t ‚â† 0) (ht : Œº t ‚â† ‚àû)
    (hfs : ‚àÄ·µê x ‚àÇŒº.restrict t, f x ‚àà s) (hfi : IntegrableOn f t Œº) : (‚®ç x in t, f x ‚àÇŒº) ‚àà s :=
  have := Fact.mk ht.lt_top
  have := NeZero.mk h0
  hs.average_mem hsc hfs hfi
#align convex.set_average_mem Convex.set_average_mem

/-- If `Œº` is a non-zero finite measure on `Œ±`, `s` is a convex set in `E`, and `f` is an integrable
function sending `Œº`-a.e. points to `s`, then the average value of `f` belongs to `closure s`:
`‚®ç x, f x ‚àÇŒº ‚àà s`. See also `Convex.centerMass_mem` for a finite sum version of this lemma. -/
theorem Convex.set_average_mem_closure (hs : Convex ‚Ñù s) (h0 : Œº t ‚â† 0) (ht : Œº t ‚â† ‚àû)
    (hfs : ‚àÄ·µê x ‚àÇŒº.restrict t, f x ‚àà s) (hfi : IntegrableOn f t Œº) :
    (‚®ç x in t, f x ‚àÇŒº) ‚àà closure s :=
  hs.closure.set_average_mem isClosed_closure h0 ht (hfs.mono fun _ hx => subset_closure hx) hfi
#align convex.set_average_mem_closure Convex.set_average_mem_closure

theorem ConvexOn.average_mem_epigraph [IsFiniteMeasure Œº] [NeZero Œº] (hg : ConvexOn ‚Ñù s g)
    (hgc : ContinuousOn g s) (hsc : IsClosed s) (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s)
    (hfi : Integrable f Œº) (hgi : Integrable (g ‚àò f) Œº) :
    (‚®ç x, f x ‚àÇŒº, ‚®ç x, g (f x) ‚àÇŒº) ‚àà {p : E √ó ‚Ñù | p.1 ‚àà s ‚àß g p.1 ‚â§ p.2} := by
  have ht_mem : ‚àÄ·µê x ‚àÇŒº, (f x, g (f x)) ‚àà {p : E √ó ‚Ñù | p.1 ‚àà s ‚àß g p.1 ‚â§ p.2} :=
    hfs.mono fun x hx => ‚ü®hx, le_rfl‚ü©
  exact average_pair hfi hgi ‚ñ∏
    hg.convex_epigraph.average_mem (hsc.epigraph hgc) ht_mem (hfi.prod_mk hgi)
#align convex_on.average_mem_epigraph ConvexOn.average_mem_epigraph

theorem ConcaveOn.average_mem_hypograph [IsFiniteMeasure Œº] [NeZero Œº] (hg : ConcaveOn ‚Ñù s g)
    (hgc : ContinuousOn g s) (hsc : IsClosed s) (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s)
    (hfi : Integrable f Œº) (hgi : Integrable (g ‚àò f) Œº) :
    (‚®ç x, f x ‚àÇŒº, ‚®ç x, g (f x) ‚àÇŒº) ‚àà {p : E √ó ‚Ñù | p.1 ‚àà s ‚àß p.2 ‚â§ g p.1} := by
  simpa only [mem_setOf_eq, Pi.neg_apply, average_neg, neg_le_neg_iff] using
    hg.neg.average_mem_epigraph hgc.neg hsc hfs hfi hgi.neg
#align concave_on.average_mem_hypograph ConcaveOn.average_mem_hypograph

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is convex and continuous on a convex closed
set `s`, `Œº` is a finite non-zero measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending
`Œº`-a.e. points to `s`, then the value of `g` at the average value of `f` is less than or equal to
the average value of `g ‚àò f` provided that both `f` and `g ‚àò f` are integrable. See also
`ConvexOn.map_centerMass_le` for a finite sum version of this lemma. -/
theorem ConvexOn.map_average_le [IsFiniteMeasure Œº] [NeZero Œº]
    (hg : ConvexOn ‚Ñù s g) (hgc : ContinuousOn g s) (hsc : IsClosed s)
    (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : Integrable f Œº) (hgi : Integrable (g ‚àò f) Œº) :
    g (‚®ç x, f x ‚àÇŒº) ‚â§ ‚®ç x, g (f x) ‚àÇŒº :=
  (hg.average_mem_epigraph hgc hsc hfs hfi hgi).2
#align convex_on.map_average_le ConvexOn.map_average_le

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is concave and continuous on a convex closed
set `s`, `Œº` is a finite non-zero measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending
`Œº`-a.e. points to `s`, then the average value of `g ‚àò f` is less than or equal to the value of `g`
at the average value of `f` provided that both `f` and `g ‚àò f` are integrable. See also
`ConcaveOn.le_map_centerMass` for a finite sum version of this lemma. -/
theorem ConcaveOn.le_map_average [IsFiniteMeasure Œº] [NeZero Œº]
    (hg : ConcaveOn ‚Ñù s g) (hgc : ContinuousOn g s) (hsc : IsClosed s)
    (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : Integrable f Œº) (hgi : Integrable (g ‚àò f) Œº) :
    (‚®ç x, g (f x) ‚àÇŒº) ‚â§ g (‚®ç x, f x ‚àÇŒº) :=
  (hg.average_mem_hypograph hgc hsc hfs hfi hgi).2
#align concave_on.le_map_average ConcaveOn.le_map_average

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is convex and continuous on a convex closed
set `s`, `Œº` is a finite non-zero measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending
`Œº`-a.e. points of a set `t` to `s`, then the value of `g` at the average value of `f` over `t` is
less than or equal to the average value of `g ‚àò f` over `t` provided that both `f` and `g ‚àò f` are
integrable. -/
theorem ConvexOn.set_average_mem_epigraph (hg : ConvexOn ‚Ñù s g) (hgc : ContinuousOn g s)
    (hsc : IsClosed s) (h0 : Œº t ‚â† 0) (ht : Œº t ‚â† ‚àû) (hfs : ‚àÄ·µê x ‚àÇŒº.restrict t, f x ‚àà s)
    (hfi : IntegrableOn f t Œº) (hgi : IntegrableOn (g ‚àò f) t Œº) :
    (‚®ç x in t, f x ‚àÇŒº, ‚®ç x in t, g (f x) ‚àÇŒº) ‚àà {p : E √ó ‚Ñù | p.1 ‚àà s ‚àß g p.1 ‚â§ p.2} :=
  have := Fact.mk ht.lt_top
  have := NeZero.mk h0
  hg.average_mem_epigraph hgc hsc hfs hfi hgi
#align convex_on.set_average_mem_epigraph ConvexOn.set_average_mem_epigraph

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is concave and continuous on a convex closed
set `s`, `Œº` is a finite non-zero measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending
`Œº`-a.e. points of a set `t` to `s`, then the average value of `g ‚àò f` over `t` is less than or
equal to the value of `g` at the average value of `f` over `t` provided that both `f` and `g ‚àò f`
are integrable. -/
theorem ConcaveOn.set_average_mem_hypograph (hg : ConcaveOn ‚Ñù s g) (hgc : ContinuousOn g s)
    (hsc : IsClosed s) (h0 : Œº t ‚â† 0) (ht : Œº t ‚â† ‚àû) (hfs : ‚àÄ·µê x ‚àÇŒº.restrict t, f x ‚àà s)
    (hfi : IntegrableOn f t Œº) (hgi : IntegrableOn (g ‚àò f) t Œº) :
    (‚®ç x in t, f x ‚àÇŒº, ‚®ç x in t, g (f x) ‚àÇŒº) ‚àà {p : E √ó ‚Ñù | p.1 ‚àà s ‚àß p.2 ‚â§ g p.1} := by
  simpa only [mem_setOf_eq, Pi.neg_apply, average_neg, neg_le_neg_iff] using
    hg.neg.set_average_mem_epigraph hgc.neg hsc h0 ht hfs hfi hgi.neg
#align concave_on.set_average_mem_hypograph ConcaveOn.set_average_mem_hypograph

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is convex and continuous on a convex closed
set `s`, `Œº` is a finite non-zero measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending
`Œº`-a.e. points of a set `t` to `s`, then the value of `g` at the average value of `f` over `t` is
less than or equal to the average value of `g ‚àò f` over `t` provided that both `f` and `g ‚àò f` are
integrable. -/
theorem ConvexOn.map_set_average_le (hg : ConvexOn ‚Ñù s g) (hgc : ContinuousOn g s)
    (hsc : IsClosed s) (h0 : Œº t ‚â† 0) (ht : Œº t ‚â† ‚àû) (hfs : ‚àÄ·µê x ‚àÇŒº.restrict t, f x ‚àà s)
    (hfi : IntegrableOn f t Œº) (hgi : IntegrableOn (g ‚àò f) t Œº) :
    g (‚®ç x in t, f x ‚àÇŒº) ‚â§ ‚®ç x in t, g (f x) ‚àÇŒº :=
  (hg.set_average_mem_epigraph hgc hsc h0 ht hfs hfi hgi).2
#align convex_on.map_set_average_le ConvexOn.map_set_average_le

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is concave and continuous on a convex closed
set `s`, `Œº` is a finite non-zero measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending
`Œº`-a.e. points of a set `t` to `s`, then the average value of `g ‚àò f` over `t` is less than or
equal to the value of `g` at the average value of `f` over `t` provided that both `f` and `g ‚àò f`
are integrable. -/
theorem ConcaveOn.le_map_set_average (hg : ConcaveOn ‚Ñù s g) (hgc : ContinuousOn g s)
    (hsc : IsClosed s) (h0 : Œº t ‚â† 0) (ht : Œº t ‚â† ‚àû) (hfs : ‚àÄ·µê x ‚àÇŒº.restrict t, f x ‚àà s)
    (hfi : IntegrableOn f t Œº) (hgi : IntegrableOn (g ‚àò f) t Œº) :
    (‚®ç x in t, g (f x) ‚àÇŒº) ‚â§ g (‚®ç x in t, f x ‚àÇŒº) :=
  (hg.set_average_mem_hypograph hgc hsc h0 ht hfs hfi hgi).2
#align concave_on.le_map_set_average ConcaveOn.le_map_set_average

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is convex and continuous on a convex closed
set `s`, `Œº` is a probability measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending `Œº`-a.e.  points
to `s`, then the value of `g` at the expected value of `f` is less than or equal to the expected
value of `g ‚àò f` provided that both `f` and `g ‚àò f` are integrable. See also
`ConvexOn.map_centerMass_le` for a finite sum version of this lemma. -/
theorem ConvexOn.map_integral_le [IsProbabilityMeasure Œº] (hg : ConvexOn ‚Ñù s g)
    (hgc : ContinuousOn g s) (hsc : IsClosed s) (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : Integrable f Œº)
    (hgi : Integrable (g ‚àò f) Œº) : g (‚à´ x, f x ‚àÇŒº) ‚â§ ‚à´ x, g (f x) ‚àÇŒº := by
  simpa only [average_eq_integral] using hg.map_average_le hgc hsc hfs hfi hgi
#align convex_on.map_integral_le ConvexOn.map_integral_le

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is concave and continuous on a convex closed
set `s`, `Œº` is a probability measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending `Œº`-a.e.  points
to `s`, then the expected value of `g ‚àò f` is less than or equal to the value of `g` at the expected
value of `f` provided that both `f` and `g ‚àò f` are integrable. -/
theorem ConcaveOn.le_map_integral [IsProbabilityMeasure Œº] (hg : ConcaveOn ‚Ñù s g)
    (hgc : ContinuousOn g s) (hsc : IsClosed s) (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : Integrable f Œº)
    (hgi : Integrable (g ‚àò f) Œº) : (‚à´ x, g (f x) ‚àÇŒº) ‚â§ g (‚à´ x, f x ‚àÇŒº) := by
  simpa only [average_eq_integral] using hg.le_map_average hgc hsc hfs hfi hgi
#align concave_on.le_map_integral ConcaveOn.le_map_integral

/-!
### Strict Jensen's inequality
-/


/-- If `f : Œ± ‚Üí E` is an integrable function, then either it is a.e. equal to the constant
`‚®ç x, f x ‚àÇŒº` or there exists a measurable set such that `Œº t ‚â† 0`, `Œº t·∂ú ‚â† 0`, and the average
values of `f` over `t` and `t·∂ú` are different. -/
theorem ae_eq_const_or_exists_average_ne_compl [IsFiniteMeasure Œº] (hfi : Integrable f Œº) :
    f =·µê[Œº] const Œ± (‚®ç x, f x ‚àÇŒº) ‚à®
      ‚àÉ t, MeasurableSet t ‚àß Œº t ‚â† 0 ‚àß Œº t·∂ú ‚â† 0 ‚àß (‚®ç x in t, f x ‚àÇŒº) ‚â† ‚®ç x in t·∂ú, f x ‚àÇŒº := by
  refine' or_iff_not_imp_right.mpr fun H => _; push_neg at H
  refine' hfi.ae_eq_of_forall_set_integral_eq _ _ (integrable_const _) fun t ht ht' => _; clear ht'
  simp only [const_apply, set_integral_const]
  by_cases h‚ÇÄ : Œº t = 0
  ¬∑ rw [restrict_eq_zero.2 h‚ÇÄ, integral_zero_measure, h‚ÇÄ, ENNReal.zero_toReal, zero_smul]
  by_cases h‚ÇÄ' : Œº t·∂ú = 0
  ¬∑ rw [‚Üê ae_eq_univ] at h‚ÇÄ'
    rw [restrict_congr_set h‚ÇÄ', restrict_univ, measure_congr h‚ÇÄ', measure_smul_average]
  have := average_mem_openSegment_compl_self ht.nullMeasurableSet h‚ÇÄ h‚ÇÄ' hfi
  rw [‚Üê H t ht h‚ÇÄ h‚ÇÄ', openSegment_same, mem_singleton_iff] at this
  rw [this, measure_smul_setAverage _ (measure_ne_top Œº _)]
#align ae_eq_const_or_exists_average_ne_compl ae_eq_const_or_exists_average_ne_compl

/-- If an integrable function `f : Œ± ‚Üí E` takes values in a convex set `s` and for some set `t` of
positive measure, the average value of `f` over `t` belongs to the interior of `s`, then the average
of `f` over the whole space belongs to the interior of `s`. -/
theorem Convex.average_mem_interior_of_set [IsFiniteMeasure Œº] (hs : Convex ‚Ñù s) (h0 : Œº t ‚â† 0)
    (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : Integrable f Œº) (ht : (‚®ç x in t, f x ‚àÇŒº) ‚àà interior s) :
    (‚®ç x, f x ‚àÇŒº) ‚àà interior s := by
  rw [‚Üê measure_toMeasurable] at h0; rw [‚Üê restrict_toMeasurable (measure_ne_top Œº t)] at ht
  by_cases h0' : Œº (toMeasurable Œº t)·∂ú = 0
  ¬∑ rw [‚Üê ae_eq_univ] at h0'
    rwa [restrict_congr_set h0', restrict_univ] at ht
  exact
    hs.openSegment_interior_closure_subset_interior ht
      (hs.set_average_mem_closure h0' (measure_ne_top _ _) (ae_restrict_of_ae hfs)
        hfi.integrableOn)
      (average_mem_openSegment_compl_self (measurableSet_toMeasurable Œº t).nullMeasurableSet h0
        h0' hfi)
#align convex.average_mem_interior_of_set Convex.average_mem_interior_of_set

/-- If an integrable function `f : Œ± ‚Üí E` takes values in a strictly convex closed set `s`, then
either it is a.e. equal to its average value, or its average value belongs to the interior of
`s`. -/
theorem StrictConvex.ae_eq_const_or_average_mem_interior [IsFiniteMeasure Œº] (hs : StrictConvex ‚Ñù s)
    (hsc : IsClosed s) (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : Integrable f Œº) :
    f =·µê[Œº] const Œ± (‚®ç x, f x ‚àÇŒº) ‚à® (‚®ç x, f x ‚àÇŒº) ‚àà interior s := by
  have : ‚àÄ {t}, Œº t ‚â† 0 ‚Üí (‚®ç x in t, f x ‚àÇŒº) ‚àà s := fun ht =>
    hs.convex.set_average_mem hsc ht (measure_ne_top _ _) (ae_restrict_of_ae hfs) hfi.integrableOn
  refine' (ae_eq_const_or_exists_average_ne_compl hfi).imp_right _
  rintro ‚ü®t, hm, h‚ÇÄ, h‚ÇÄ', hne‚ü©
  exact
    hs.openSegment_subset (this h‚ÇÄ) (this h‚ÇÄ') hne
      (average_mem_openSegment_compl_self hm.nullMeasurableSet h‚ÇÄ h‚ÇÄ' hfi)
#align strict_convex.ae_eq_const_or_average_mem_interior StrictConvex.ae_eq_const_or_average_mem_interior

/-- **Jensen's inequality**, strict version: if an integrable function `f : Œ± ‚Üí E` takes values in a
convex closed set `s`, and `g : E ‚Üí ‚Ñù` is continuous and strictly convex on `s`, then
either `f` is a.e. equal to its average value, or `g (‚®ç x, f x ‚àÇŒº) < ‚®ç x, g (f x) ‚àÇŒº`. -/
theorem StrictConvexOn.ae_eq_const_or_map_average_lt [IsFiniteMeasure Œº] (hg : StrictConvexOn ‚Ñù s g)
    (hgc : ContinuousOn g s) (hsc : IsClosed s) (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : Integrable f Œº)
    (hgi : Integrable (g ‚àò f) Œº) :
    f =·µê[Œº] const Œ± (‚®ç x, f x ‚àÇŒº) ‚à® g (‚®ç x, f x ‚àÇŒº) < ‚®ç x, g (f x) ‚àÇŒº := by
  have : ‚àÄ {t}, Œº t ‚â† 0 ‚Üí (‚®ç x in t, f x ‚àÇŒº) ‚àà s ‚àß g (‚®ç x in t, f x ‚àÇŒº) ‚â§ ‚®ç x in t, g (f x) ‚àÇŒº :=
    fun ht =>
    hg.convexOn.set_average_mem_epigraph hgc hsc ht (measure_ne_top _ _) (ae_restrict_of_ae hfs)
      hfi.integrableOn hgi.integrableOn
  refine' (ae_eq_const_or_exists_average_ne_compl hfi).imp_right _
  rintro ‚ü®t, hm, h‚ÇÄ, h‚ÇÄ', hne‚ü©
  rcases average_mem_openSegment_compl_self hm.nullMeasurableSet h‚ÇÄ h‚ÇÄ' (hfi.prod_mk hgi) with
    ‚ü®a, b, ha, hb, hab, h_avg‚ü©
  rw [average_pair hfi hgi, average_pair hfi.integrableOn hgi.integrableOn,
    average_pair hfi.integrableOn hgi.integrableOn, Prod.smul_mk,
    Prod.smul_mk, Prod.mk_add_mk, Prod.mk.inj_iff] at h_avg
  simp only [Function.comp] at h_avg
  rw [‚Üê h_avg.1, ‚Üê h_avg.2]
  calc
    g ((a ‚Ä¢ ‚®ç x in t, f x ‚àÇŒº) + b ‚Ä¢ ‚®ç x in t·∂ú, f x ‚àÇŒº) <
        a * g (‚®ç x in t, f x ‚àÇŒº) + b * g (‚®ç x in t·∂ú, f x ‚àÇŒº) :=
      hg.2 (this h‚ÇÄ).1 (this h‚ÇÄ').1 hne ha hb hab
    _ ‚â§ (a * ‚®ç x in t, g (f x) ‚àÇŒº) + b * ‚®ç x in t·∂ú, g (f x) ‚àÇŒº :=
      add_le_add (mul_le_mul_of_nonneg_left (this h‚ÇÄ).2 ha.le)
        (mul_le_mul_of_nonneg_left (this h‚ÇÄ').2 hb.le)
#align strict_convex_on.ae_eq_const_or_map_average_lt StrictConvexOn.ae_eq_const_or_map_average_lt

/-- **Jensen's inequality**, strict version: if an integrable function `f : Œ± ‚Üí E` takes values in a
convex closed set `s`, and `g : E ‚Üí ‚Ñù` is continuous and strictly concave on `s`, then
either `f` is a.e. equal to its average value, or `‚®ç x, g (f x) ‚àÇŒº < g (‚®ç x, f x ‚àÇŒº)`. -/
theorem StrictConcaveOn.ae_eq_const_or_lt_map_average [IsFiniteMeasure Œº]
    (hg : StrictConcaveOn ‚Ñù s g) (hgc : ContinuousOn g s) (hsc : IsClosed s)
    (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : Integrable f Œº) (hgi : Integrable (g ‚àò f) Œº) :
    f =·µê[Œº] const Œ± (‚®ç x, f x ‚àÇŒº) ‚à® (‚®ç x, g (f x) ‚àÇŒº) < g (‚®ç x, f x ‚àÇŒº) := by
  simpa only [Pi.neg_apply, average_neg, neg_lt_neg_iff] using
    hg.neg.ae_eq_const_or_map_average_lt hgc.neg hsc hfs hfi hgi.neg
#align strict_concave_on.ae_eq_const_or_lt_map_average StrictConcaveOn.ae_eq_const_or_lt_map_average

/-- If `E` is a strictly convex normed space and `f : Œ± ‚Üí E` is a function such that `‚Äñf x‚Äñ ‚â§ C`
a.e., then either this function is a.e. equal to its average value, or the norm of its average value
is strictly less than `C`. -/
theorem ae_eq_const_or_norm_average_lt_of_norm_le_const [StrictConvexSpace ‚Ñù E]
    (h_le : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ C) : f =·µê[Œº] const Œ± (‚®ç x, f x ‚àÇŒº) ‚à® ‚Äñ‚®ç x, f x ‚àÇŒº‚Äñ < C := by
  rcases le_or_lt C 0 with hC0 | hC0
  ¬∑ have : f =·µê[Œº] 0 := h_le.mono fun x hx => norm_le_zero_iff.1 (hx.trans hC0)
    simp only [average_congr this, Pi.zero_apply, average_zero]
    exact Or.inl this
  by_cases hfi : Integrable f Œº; swap
  ¬∑ simp [average_eq, integral_undef hfi, hC0, ENNReal.toReal_pos_iff]
  rcases (le_top : Œº univ ‚â§ ‚àû).eq_or_lt with hŒºt | hŒºt; ¬∑ simp [average_eq, hŒºt, hC0]
  haveI : IsFiniteMeasure Œº := ‚ü®hŒºt‚ü©
  replace h_le : ‚àÄ·µê x ‚àÇŒº, f x ‚àà closedBall (0 : E) C; ¬∑ simpa only [mem_closedBall_zero_iff]
  simpa only [interior_closedBall _ hC0.ne', mem_ball_zero_iff] using
    (strictConvex_closedBall ‚Ñù (0 : E) C).ae_eq_const_or_average_mem_interior isClosed_ball h_le
      hfi
#align ae_eq_const_or_norm_average_lt_of_norm_le_const ae_eq_const_or_norm_average_lt_of_norm_le_const

/-- If `E` is a strictly convex normed space and `f : Œ± ‚Üí E` is a function such that `‚Äñf x‚Äñ ‚â§ C`
a.e., then either this function is a.e. equal to its average value, or the norm of its integral is
strictly less than `(Œº univ).toReal * C`. -/
theorem ae_eq_const_or_norm_integral_lt_of_norm_le_const [StrictConvexSpace ‚Ñù E] [IsFiniteMeasure Œº]
    (h_le : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ C) :
    f =·µê[Œº] const Œ± (‚®ç x, f x ‚àÇŒº) ‚à® ‚Äñ‚à´ x, f x ‚àÇŒº‚Äñ < (Œº univ).toReal * C := by
  rcases eq_or_ne Œº 0 with h‚ÇÄ | h‚ÇÄ; ¬∑ left; simp [h‚ÇÄ, EventuallyEq]
  have hŒº : 0 < (Œº univ).toReal := by
    simp [ENNReal.toReal_pos_iff, pos_iff_ne_zero, h‚ÇÄ, measure_lt_top]
  refine' (ae_eq_const_or_norm_average_lt_of_norm_le_const h_le).imp_right fun H => _
  rwa [average_eq, norm_smul, norm_inv, Real.norm_eq_abs, abs_of_pos hŒº, ‚Üê div_eq_inv_mul,
    div_lt_iff' hŒº] at H
#align ae_eq_const_or_norm_integral_lt_of_norm_le_const ae_eq_const_or_norm_integral_lt_of_norm_le_const

/-- If `E` is a strictly convex normed space and `f : Œ± ‚Üí E` is a function such that `‚Äñf x‚Äñ ‚â§ C`
a.e. on a set `t` of finite measure, then either this function is a.e. equal to its average value on
`t`, or the norm of its integral over `t` is strictly less than `(Œº t).toReal * C`. -/
theorem ae_eq_const_or_norm_set_integral_lt_of_norm_le_const [StrictConvexSpace ‚Ñù E] (ht : Œº t ‚â† ‚àû)
    (h_le : ‚àÄ·µê x ‚àÇŒº.restrict t, ‚Äñf x‚Äñ ‚â§ C) :
    f =·µê[Œº.restrict t] const Œ± (‚®ç x in t, f x ‚àÇŒº) ‚à® ‚Äñ‚à´ x in t, f x ‚àÇŒº‚Äñ < (Œº t).toReal * C := by
  haveI := Fact.mk ht.lt_top
  rw [‚Üê restrict_apply_univ]
  exact ae_eq_const_or_norm_integral_lt_of_norm_le_const h_le
#align ae_eq_const_or_norm_set_integral_lt_of_norm_le_const ae_eq_const_or_norm_set_integral_lt_of_norm_le_const
