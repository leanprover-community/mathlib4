/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov, Fr√©d√©ric Dupuis
-/
import Mathlib.Analysis.Convex.Cone.Basic
import Mathlib.Data.Real.Archimedean
import Mathlib.LinearAlgebra.LinearPMap


#align_import analysis.convex.cone.basic from "leanprover-community/mathlib"@"915591b2bb3ea303648db07284a161a7f2a9e3d4"

/-!
# Extension theorems

We prove two extension theorems:
* `riesz_extension`:
  [M. Riesz extension theorem](https://en.wikipedia.org/wiki/M._Riesz_extension_theorem) says that
  if `s` is a convex cone in a real vector space `E`, `p` is a submodule of `E`
  such that `p + s = E`, and `f` is a linear function `p ‚Üí ‚Ñù` which is
  nonnegative on `p ‚à© s`, then there exists a globally defined linear function
  `g : E ‚Üí ‚Ñù` that agrees with `f` on `p`, and is nonnegative on `s`.
* `exists_extension_of_le_sublinear`:
  Hahn-Banach theorem: if `N : E ‚Üí ‚Ñù` is a sublinear map, `f` is a linear map
  defined on a subspace of `E`, and `f x ‚â§ N x` for all `x` in the domain of `f`,
  then `f` can be extended to the whole space to a linear map `g` such that `g x ‚â§ N x`
  for all `x`

-/

open Set LinearMap

variable {ùïú E F G : Type*}

/-!
### M. Riesz extension theorem

Given a convex cone `s` in a vector space `E`, a submodule `p`, and a linear `f : p ‚Üí ‚Ñù`, assume
that `f` is nonnegative on `p ‚à© s` and `p + s = E`. Then there exists a globally defined linear
function `g : E ‚Üí ‚Ñù` that agrees with `f` on `p`, and is nonnegative on `s`.

We prove this theorem using Zorn's lemma. `RieszExtension.step` is the main part of the proof.
It says that if the domain `p` of `f` is not the whole space, then `f` can be extended to a larger
subspace `p ‚äî span ‚Ñù {y}` without breaking the non-negativity condition.

In `RieszExtension.exists_top` we use Zorn's lemma to prove that we can extend `f`
to a linear map `g` on `‚ä§ : Submodule E`. Mathematically this is the same as a linear map on `E`
but in Lean `‚ä§ : Submodule E` is isomorphic but is not equal to `E`. In `riesz_extension`
we use this isomorphism to prove the theorem.
-/

variable [AddCommGroup E] [Module ‚Ñù E]

namespace RieszExtension

open Submodule

variable (s : ConvexCone ‚Ñù E) (f : E ‚Üí‚Çó.[‚Ñù] ‚Ñù)

/-- Induction step in M. Riesz extension theorem. Given a convex cone `s` in a vector space `E`,
a partially defined linear map `f : f.domain ‚Üí ‚Ñù`, assume that `f` is nonnegative on `f.domain ‚à© p`
and `p + s = E`. If `f` is not defined on the whole `E`, then we can extend it to a larger
submodule without breaking the non-negativity condition. -/
theorem step (nonneg : ‚àÄ x : f.domain, (x : E) ‚àà s ‚Üí 0 ‚â§ f x)
    (dense : ‚àÄ y, ‚àÉ x : f.domain, (x : E) + y ‚àà s) (hdom : f.domain ‚â† ‚ä§) :
    ‚àÉ g, f < g ‚àß ‚àÄ x : g.domain, (x : E) ‚àà s ‚Üí 0 ‚â§ g x := by
  obtain ‚ü®y, -, hy‚ü© : ‚àÉ y ‚àà ‚ä§, y ‚àâ f.domain :=
    @SetLike.exists_of_lt (Submodule ‚Ñù E) _ _ _ _ (lt_top_iff_ne_top.2 hdom)
  obtain ‚ü®c, le_c, c_le‚ü© :
      ‚àÉ c, (‚àÄ x : f.domain, -(x : E) - y ‚àà s ‚Üí f x ‚â§ c) ‚àß
        ‚àÄ x : f.domain, (x : E) + y ‚àà s ‚Üí c ‚â§ f x := by
    set Sp := f '' { x : f.domain | (x : E) + y ‚àà s }
    set Sn := f '' { x : f.domain | -(x : E) - y ‚àà s }
    suffices (upperBounds Sn ‚à© lowerBounds Sp).Nonempty by
      simpa only [Set.Nonempty, upperBounds, lowerBounds, ball_image_iff] using this
    refine' exists_between_of_forall_le (Nonempty.image f _) (Nonempty.image f (dense y)) _
    ¬∑ rcases dense (-y) with ‚ü®x, hx‚ü©
      rw [‚Üê neg_neg x, AddSubgroupClass.coe_neg, ‚Üê sub_eq_add_neg] at hx
      exact ‚ü®_, hx‚ü©
    rintro a ‚ü®xn, hxn, rfl‚ü© b ‚ü®xp, hxp, rfl‚ü©
    have := s.add_mem hxp hxn
    rw [add_assoc, add_sub_cancel'_right, ‚Üê sub_eq_add_neg, ‚Üê AddSubgroupClass.coe_sub] at this
    replace := nonneg _ this
    rwa [f.map_sub, sub_nonneg] at this
  -- Porting note: removed an unused `have`
  refine' ‚ü®f.supSpanSingleton y (-c) hy, _, _‚ü©
  ¬∑ refine' lt_iff_le_not_le.2 ‚ü®f.left_le_sup _ _, fun H => _‚ü©
    replace H := LinearPMap.domain_mono.monotone H
    rw [LinearPMap.domain_supSpanSingleton, sup_le_iff, span_le, singleton_subset_iff] at H
    exact hy H.2
  ¬∑ rintro ‚ü®z, hz‚ü© hzs
    rcases mem_sup.1 hz with ‚ü®x, hx, y', hy', rfl‚ü©
    rcases mem_span_singleton.1 hy' with ‚ü®r, rfl‚ü©
    simp only [Subtype.coe_mk] at hzs
    erw [LinearPMap.supSpanSingleton_apply_mk _ _ _ _ _ hx, smul_neg, ‚Üê sub_eq_add_neg, sub_nonneg]
    rcases lt_trichotomy r 0 with (hr | hr | hr)
    ¬∑ have : -(r‚Åª¬π ‚Ä¢ x) - y ‚àà s := by
        rwa [‚Üê s.smul_mem_iff (neg_pos.2 hr), smul_sub, smul_neg, neg_smul, neg_neg, smul_smul,
          mul_inv_cancel hr.ne, one_smul, sub_eq_add_neg, neg_smul, neg_neg]
      -- Porting note: added type annotation and `by exact`
      replace : f (r‚Åª¬π ‚Ä¢ ‚ü®x, hx‚ü©) ‚â§ c := le_c (r‚Åª¬π ‚Ä¢ ‚ü®x, hx‚ü©) (by exact this)
      rwa [‚Üê mul_le_mul_left (neg_pos.2 hr), neg_mul, neg_mul, neg_le_neg_iff, f.map_smul,
        smul_eq_mul, ‚Üê mul_assoc, mul_inv_cancel hr.ne, one_mul] at this
    ¬∑ subst r
      simp only [zero_smul, add_zero] at hzs ‚ä¢
      apply nonneg
      exact hzs
    ¬∑ have : r‚Åª¬π ‚Ä¢ x + y ‚àà s := by
        rwa [‚Üê s.smul_mem_iff hr, smul_add, smul_smul, mul_inv_cancel hr.ne', one_smul]
      -- Porting note: added type annotation and `by exact`
      replace : c ‚â§ f (r‚Åª¬π ‚Ä¢ ‚ü®x, hx‚ü©) := c_le (r‚Åª¬π ‚Ä¢ ‚ü®x, hx‚ü©) (by exact this)
      rwa [‚Üê mul_le_mul_left hr, f.map_smul, smul_eq_mul, ‚Üê mul_assoc, mul_inv_cancel hr.ne',
        one_mul] at this
#align riesz_extension.step RieszExtension.step

theorem exists_top (p : E ‚Üí‚Çó.[‚Ñù] ‚Ñù) (hp_nonneg : ‚àÄ x : p.domain, (x : E) ‚àà s ‚Üí 0 ‚â§ p x)
    (hp_dense : ‚àÄ y, ‚àÉ x : p.domain, (x : E) + y ‚àà s) :
    ‚àÉ q ‚â• p, q.domain = ‚ä§ ‚àß ‚àÄ x : q.domain, (x : E) ‚àà s ‚Üí 0 ‚â§ q x := by
  set S := { p : E ‚Üí‚Çó.[‚Ñù] ‚Ñù | ‚àÄ x : p.domain, (x : E) ‚àà s ‚Üí 0 ‚â§ p x }
  have hSc : ‚àÄ c, c ‚äÜ S ‚Üí IsChain (¬∑ ‚â§ ¬∑) c ‚Üí ‚àÄ y ‚àà c, ‚àÉ ub ‚àà S, ‚àÄ z ‚àà c, z ‚â§ ub
  ¬∑ intro c hcs c_chain y hy
    clear hp_nonneg hp_dense p
    have cne : c.Nonempty := ‚ü®y, hy‚ü©
    have hcd : DirectedOn (¬∑ ‚â§ ¬∑) c := c_chain.directedOn
    refine' ‚ü®LinearPMap.sSup c hcd, _, fun _ ‚Ü¶ LinearPMap.le_sSup hcd‚ü©
    rintro ‚ü®x, hx‚ü© hxs
    have hdir : DirectedOn (¬∑ ‚â§ ¬∑) (LinearPMap.domain '' c) :=
      directedOn_image.2 (hcd.mono fun h ‚Ü¶ LinearPMap.domain_mono.monotone h)
    rcases (mem_sSup_of_directed (cne.image _) hdir).1 hx with ‚ü®_, ‚ü®f, hfc, rfl‚ü©, hfx‚ü©
    have : f ‚â§ LinearPMap.sSup c hcd := LinearPMap.le_sSup _ hfc
    convert ‚Üê hcs hfc ‚ü®x, hfx‚ü© hxs using 1
    exact this.2 rfl
  obtain ‚ü®q, hqs, hpq, hq‚ü© := zorn_nonempty_partialOrder‚ÇÄ S hSc p hp_nonneg
  ¬∑ refine' ‚ü®q, hpq, _, hqs‚ü©
    contrapose! hq
    have hqd : ‚àÄ y, ‚àÉ x : q.domain, (x : E) + y ‚àà s := fun y ‚Ü¶
      let ‚ü®x, hx‚ü© := hp_dense y
      ‚ü®Submodule.inclusion hpq.left x, hx‚ü©
    rcases step s q hqs hqd hq with ‚ü®r, hqr, hr‚ü©
    exact ‚ü®r, hr, hqr.le, hqr.ne'‚ü©
#align riesz_extension.exists_top RieszExtension.exists_top

end RieszExtension

/-- M. **Riesz extension theorem**: given a convex cone `s` in a vector space `E`, a submodule `p`,
and a linear `f : p ‚Üí ‚Ñù`, assume that `f` is nonnegative on `p ‚à© s` and `p + s = E`. Then
there exists a globally defined linear function `g : E ‚Üí ‚Ñù` that agrees with `f` on `p`,
and is nonnegative on `s`. -/
theorem riesz_extension (s : ConvexCone ‚Ñù E) (f : E ‚Üí‚Çó.[‚Ñù] ‚Ñù)
    (nonneg : ‚àÄ x : f.domain, (x : E) ‚àà s ‚Üí 0 ‚â§ f x)
    (dense : ‚àÄ y, ‚àÉ x : f.domain, (x : E) + y ‚àà s) :
    ‚àÉ g : E ‚Üí‚Çó[‚Ñù] ‚Ñù, (‚àÄ x : f.domain, g x = f x) ‚àß ‚àÄ x ‚àà s, 0 ‚â§ g x := by
  rcases RieszExtension.exists_top s f nonneg dense
    with ‚ü®‚ü®g_dom, g‚ü©, ‚ü®-, hfg‚ü©, rfl : g_dom = ‚ä§, hgs‚ü©
  refine' ‚ü®g.comp (LinearMap.id.codRestrict ‚ä§ fun _ ‚Ü¶ trivial), _, _‚ü©
  ¬∑ exact fun x => (hfg rfl).symm
  ¬∑ exact fun x hx => hgs ‚ü®x, _‚ü© hx
#align riesz_extension riesz_extension

/-- **Hahn-Banach theorem**: if `N : E ‚Üí ‚Ñù` is a sublinear map, `f` is a linear map
defined on a subspace of `E`, and `f x ‚â§ N x` for all `x` in the domain of `f`,
then `f` can be extended to the whole space to a linear map `g` such that `g x ‚â§ N x`
for all `x`. -/
theorem exists_extension_of_le_sublinear (f : E ‚Üí‚Çó.[‚Ñù] ‚Ñù) (N : E ‚Üí ‚Ñù)
    (N_hom : ‚àÄ c : ‚Ñù, 0 < c ‚Üí ‚àÄ x, N (c ‚Ä¢ x) = c * N x) (N_add : ‚àÄ x y, N (x + y) ‚â§ N x + N y)
    (hf : ‚àÄ x : f.domain, f x ‚â§ N x) :
    ‚àÉ g : E ‚Üí‚Çó[‚Ñù] ‚Ñù, (‚àÄ x : f.domain, g x = f x) ‚àß ‚àÄ x, g x ‚â§ N x := by
  let s : ConvexCone ‚Ñù (E √ó ‚Ñù) :=
    { carrier := { p : E √ó ‚Ñù | N p.1 ‚â§ p.2 }
      smul_mem' := fun c hc p hp =>
        calc
          N (c ‚Ä¢ p.1) = c * N p.1 := N_hom c hc p.1
          _ ‚â§ c * p.2 := mul_le_mul_of_nonneg_left hp hc.le
      add_mem' := fun x hx y hy => (N_add _ _).trans (add_le_add hx hy) }
  set f' := (-f).coprod (LinearMap.id.toPMap ‚ä§)
  have hf'_nonneg : ‚àÄ x : f'.domain, x.1 ‚àà s ‚Üí 0 ‚â§ f' x := fun x (hx : N x.1.1 ‚â§ x.1.2) ‚Ü¶ by
    simpa using le_trans (hf ‚ü®x.1.1, x.2.1‚ü©) hx
  have hf'_dense : ‚àÄ y : E √ó ‚Ñù, ‚àÉ x : f'.domain, ‚Üëx + y ‚àà s
  ¬∑ rintro ‚ü®x, y‚ü©
    refine' ‚ü®‚ü®(0, N x - y), ‚ü®f.domain.zero_mem, trivial‚ü©‚ü©, _‚ü©
    simp only [ConvexCone.mem_mk, mem_setOf_eq, Prod.fst_add, Prod.snd_add, zero_add,
      sub_add_cancel, le_rfl]
  obtain ‚ü®g, g_eq, g_nonneg‚ü© := riesz_extension s f' hf'_nonneg hf'_dense
  replace g_eq : ‚àÄ (x : f.domain) (y : ‚Ñù), g (x, y) = y - f x := fun x y ‚Ü¶
    (g_eq ‚ü®(x, y), ‚ü®x.2, trivial‚ü©‚ü©).trans (sub_eq_neg_add _ _).symm
  refine ‚ü®-g.comp (inl ‚Ñù E ‚Ñù), fun x ‚Ü¶ ?_, fun x ‚Ü¶ ?_‚ü©
  ¬∑ simp [g_eq x 0]
  ¬∑ calc -g (x, 0) = g (0, N x) - g (x, N x) := by simp [‚Üê map_sub, ‚Üê map_neg]
      _ = N x - g (x, N x) := by simpa using g_eq 0 (N x)
      _ ‚â§ N x := by simpa using g_nonneg ‚ü®x, N x‚ü© (le_refl (N x))
#align exists_extension_of_le_sublinear exists_extension_of_le_sublinear
