/-
Copyright (c) 2021 Ya√´l Dillies, Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Bhavik Mehta
-/
import Mathlib.Analysis.Convex.Extreme
import Mathlib.Analysis.Convex.Function
import Mathlib.Topology.Algebra.Module.Basic
import Mathlib.Topology.Order.OrderClosed

#align_import analysis.convex.exposed from "leanprover-community/mathlib"@"48024901a8e2a462363650c50d62248a77cbcab3"

/-!
# Exposed sets

This file defines exposed sets and exposed points for sets in a real vector space.

An exposed subset of `A` is a subset of `A` that is the set of all maximal points of a functional
(a continuous linear map `E ‚Üí ùïú`) over `A`. By convention, `‚àÖ` is an exposed subset of all sets.
This allows for better functoriality of the definition (the intersection of two exposed subsets is
exposed, faces of a polytope form a bounded lattice).
This is an analytic notion of "being on the side of". It is stronger than being extreme (see
`IsExposed.isExtreme`), but weaker (for exposed points) than being a vertex.

An exposed set of `A` is sometimes called a "face of `A`", but we decided to reserve this
terminology to the more specific notion of a face of a polytope (sometimes hopefully soon out
on mathlib!).

## Main declarations

* `IsExposed ùïú A B`: States that `B` is an exposed set of `A` (in the literature, `A` is often
  implicit).
* `IsExposed.isExtreme`: An exposed set is also extreme.

## References

See chapter 8 of [Barry Simon, *Convexity*][simon2011]

## TODO

Define intrinsic frontier/interior and prove the lemmas related to exposed sets and points.

Generalise to Locally Convex Topological Vector Spaces‚Ñ¢

More not-yet-PRed stuff is available on the branch `sperner_again`.
-/


open scoped Classical
open Affine BigOperators

open Set

section PreorderSemiring

variable (ùïú : Type*) {E : Type*} [TopologicalSpace ùïú] [Semiring ùïú] [Preorder ùïú] [AddCommMonoid E]
  [TopologicalSpace E] [Module ùïú E] {A B : Set E}

/-- A set `B` is exposed with respect to `A` iff it maximizes some functional over `A` (and contains
all points maximizing it). Written `IsExposed ùïú A B`. -/
def IsExposed (A B : Set E) : Prop :=
  B.Nonempty ‚Üí ‚àÉ l : E ‚ÜíL[ùïú] ùïú, B = { x ‚àà A | ‚àÄ y ‚àà A, l y ‚â§ l x }
#align is_exposed IsExposed

end PreorderSemiring

section OrderedRing

variable {ùïú : Type*} {E : Type*} [TopologicalSpace ùïú] [OrderedRing ùïú] [AddCommMonoid E]
  [TopologicalSpace E] [Module ùïú E] {l : E ‚ÜíL[ùïú] ùïú} {A B C : Set E} {X : Finset E} {x : E}

/-- A useful way to build exposed sets from intersecting `A` with halfspaces (modelled by an
inequality with a functional). -/
def ContinuousLinearMap.toExposed (l : E ‚ÜíL[ùïú] ùïú) (A : Set E) : Set E :=
  { x ‚àà A | ‚àÄ y ‚àà A, l y ‚â§ l x }
#align continuous_linear_map.to_exposed ContinuousLinearMap.toExposed

theorem ContinuousLinearMap.toExposed.isExposed : IsExposed ùïú A (l.toExposed A) := fun _ => ‚ü®l, rfl‚ü©
#align continuous_linear_map.to_exposed.is_exposed ContinuousLinearMap.toExposed.isExposed

theorem isExposed_empty : IsExposed ùïú A ‚àÖ := fun ‚ü®_, hx‚ü© => by
  exfalso
  exact hx
#align is_exposed_empty isExposed_empty

namespace IsExposed

protected theorem subset (hAB : IsExposed ùïú A B) : B ‚äÜ A := by
  rintro x hx
  obtain ‚ü®_, rfl‚ü© := hAB ‚ü®x, hx‚ü©
  exact hx.1
#align is_exposed.subset IsExposed.subset

@[refl]
protected theorem refl (A : Set E) : IsExposed ùïú A A := fun ‚ü®_, _‚ü© =>
  ‚ü®0, Subset.antisymm (fun _ hx => ‚ü®hx, fun _ _ => le_refl 0‚ü©) fun _ hx => hx.1‚ü©
#align is_exposed.refl IsExposed.refl

protected theorem antisymm (hB : IsExposed ùïú A B) (hA : IsExposed ùïú B A) : A = B :=
  hA.subset.antisymm hB.subset
#align is_exposed.antisymm IsExposed.antisymm

/-! `IsExposed` is *not* transitive: Consider a (topologically) open cube with vertices
`A‚ÇÄ‚ÇÄ‚ÇÄ, ..., A‚ÇÅ‚ÇÅ‚ÇÅ` and add to it the triangle `A‚ÇÄ‚ÇÄ‚ÇÄA‚ÇÄ‚ÇÄ‚ÇÅA‚ÇÄ‚ÇÅ‚ÇÄ`. Then `A‚ÇÄ‚ÇÄ‚ÇÅA‚ÇÄ‚ÇÅ‚ÇÄ` is an exposed subset
of `A‚ÇÄ‚ÇÄ‚ÇÄA‚ÇÄ‚ÇÄ‚ÇÅA‚ÇÄ‚ÇÅ‚ÇÄ` which is an exposed subset of the cube, but `A‚ÇÄ‚ÇÄ‚ÇÅA‚ÇÄ‚ÇÅ‚ÇÄ` is not itself an exposed
subset of the cube. -/
protected theorem mono (hC : IsExposed ùïú A C) (hBA : B ‚äÜ A) (hCB : C ‚äÜ B) : IsExposed ùïú B C := by
  rintro ‚ü®w, hw‚ü©
  obtain ‚ü®l, rfl‚ü© := hC ‚ü®w, hw‚ü©
  exact ‚ü®l, Subset.antisymm (fun x hx => ‚ü®hCB hx, fun y hy => hx.2 y (hBA hy)‚ü©) fun x hx =>
    ‚ü®hBA hx.1, fun y hy => (hw.2 y hy).trans (hx.2 w (hCB hw))‚ü©‚ü©
#align is_exposed.mono IsExposed.mono

/-- If `B` is a nonempty exposed subset of `A`, then `B` is the intersection of `A` with some closed
halfspace. The converse is *not* true. It would require that the corresponding open halfspace
doesn't intersect `A`. -/
theorem eq_inter_halfspace' {A B : Set E} (hAB : IsExposed ùïú A B) (hB : B.Nonempty) :
    ‚àÉ l : E ‚ÜíL[ùïú] ùïú, ‚àÉ a, B = { x ‚àà A | a ‚â§ l x } := by
  obtain ‚ü®l, rfl‚ü© := hAB hB
  obtain ‚ü®w, hw‚ü© := hB
  exact ‚ü®l, l w, Subset.antisymm (fun x hx => ‚ü®hx.1, hx.2 w hw.1‚ü©) fun x hx =>
    ‚ü®hx.1, fun y hy => (hw.2 y hy).trans hx.2‚ü©‚ü©
#align is_exposed.eq_inter_halfspace' IsExposed.eq_inter_halfspace'

/-- For nontrivial `ùïú`, if `B` is an exposed subset of `A`, then `B` is the intersection of `A` with
some closed halfspace. The converse is *not* true. It would require that the corresponding open
halfspace doesn't intersect `A`. -/
theorem eq_inter_halfspace [Nontrivial ùïú] {A B : Set E} (hAB : IsExposed ùïú A B) :
    ‚àÉ l : E ‚ÜíL[ùïú] ùïú, ‚àÉ a, B = { x ‚àà A | a ‚â§ l x } := by
  obtain rfl | hB := B.eq_empty_or_nonempty
  ¬∑ refine' ‚ü®0, 1, _‚ü©
    rw [eq_comm, eq_empty_iff_forall_not_mem]
    rintro x ‚ü®-, h‚ü©
    rw [ContinuousLinearMap.zero_apply] at h
    have : ¬¨(1 : ùïú) ‚â§ 0 := not_le_of_lt zero_lt_one
    contradiction
  exact hAB.eq_inter_halfspace' hB
#align is_exposed.eq_inter_halfspace IsExposed.eq_inter_halfspace

protected theorem inter [ContinuousAdd ùïú] {A B C : Set E} (hB : IsExposed ùïú A B)
    (hC : IsExposed ùïú A C) : IsExposed ùïú A (B ‚à© C) := by
  rintro ‚ü®w, hwB, hwC‚ü©
  obtain ‚ü®l‚ÇÅ, rfl‚ü© := hB ‚ü®w, hwB‚ü©
  obtain ‚ü®l‚ÇÇ, rfl‚ü© := hC ‚ü®w, hwC‚ü©
  refine' ‚ü®l‚ÇÅ + l‚ÇÇ, Subset.antisymm _ _‚ü©
  ¬∑ rintro x ‚ü®‚ü®hxA, hxB‚ü©, ‚ü®-, hxC‚ü©‚ü©
    exact ‚ü®hxA, fun z hz => add_le_add (hxB z hz) (hxC z hz)‚ü©
  rintro x ‚ü®hxA, hx‚ü©
  refine' ‚ü®‚ü®hxA, fun y hy => _‚ü©, hxA, fun y hy => _‚ü©
  ¬∑ exact
      (add_le_add_iff_right (l‚ÇÇ x)).1 ((add_le_add (hwB.2 y hy) (hwC.2 x hxA)).trans (hx w hwB.1))
  ¬∑ exact
      (add_le_add_iff_left (l‚ÇÅ x)).1 (le_trans (add_le_add (hwB.2 x hxA) (hwC.2 y hy)) (hx w hwB.1))
#align is_exposed.inter IsExposed.inter

theorem sInter [ContinuousAdd ùïú] {F : Finset (Set E)} (hF : F.Nonempty)
    (hAF : ‚àÄ B ‚àà F, IsExposed ùïú A B) : IsExposed ùïú A (‚ãÇ‚ÇÄ F) := by
  induction F using Finset.induction with
  | empty => exfalso; exact Finset.not_nonempty_empty hF
  | @insert C F _ hF' =>
    rw [Finset.coe_insert, sInter_insert]
    obtain rfl | hFnemp := F.eq_empty_or_nonempty
    ¬∑ rw [Finset.coe_empty, sInter_empty, inter_univ]
      exact hAF C (Finset.mem_singleton_self C)
    ¬∑ exact (hAF C (Finset.mem_insert_self C F)).inter
        (hF' hFnemp fun B hB => hAF B (Finset.mem_insert_of_mem hB))
#align is_exposed.sInter IsExposed.sInter

theorem inter_left (hC : IsExposed ùïú A C) (hCB : C ‚äÜ B) : IsExposed ùïú (A ‚à© B) C := by
  rintro ‚ü®w, hw‚ü©
  obtain ‚ü®l, rfl‚ü© := hC ‚ü®w, hw‚ü©
  exact ‚ü®l, Subset.antisymm (fun x hx => ‚ü®‚ü®hx.1, hCB hx‚ü©, fun y hy => hx.2 y hy.1‚ü©)
    fun x ‚ü®‚ü®hxC, _‚ü©, hx‚ü© => ‚ü®hxC, fun y hy => (hw.2 y hy).trans (hx w ‚ü®hC.subset hw, hCB hw‚ü©)‚ü©‚ü©
#align is_exposed.inter_left IsExposed.inter_left

theorem inter_right (hC : IsExposed ùïú B C) (hCA : C ‚äÜ A) : IsExposed ùïú (A ‚à© B) C := by
  rw [inter_comm]
  exact hC.inter_left hCA
#align is_exposed.inter_right IsExposed.inter_right

protected theorem isClosed [OrderClosedTopology ùïú] {A B : Set E} (hAB : IsExposed ùïú A B)
    (hA : IsClosed A) : IsClosed B := by
  obtain rfl | hB := B.eq_empty_or_nonempty
  ¬∑ simp
  obtain ‚ü®l, a, rfl‚ü© := hAB.eq_inter_halfspace' hB
  exact hA.isClosed_le continuousOn_const l.continuous.continuousOn
#align is_exposed.is_closed IsExposed.isClosed

protected theorem isCompact [OrderClosedTopology ùïú] [T2Space E] {A B : Set E}
    (hAB : IsExposed ùïú A B) (hA : IsCompact A) : IsCompact B :=
  hA.of_isClosed_subset (hAB.isClosed hA.isClosed) hAB.subset
#align is_exposed.is_compact IsExposed.isCompact

end IsExposed

variable (ùïú)

/-- A point is exposed with respect to `A` iff there exists a hyperplane whose intersection with
`A` is exactly that point. -/
def Set.exposedPoints (A : Set E) : Set E :=
  { x ‚àà A | ‚àÉ l : E ‚ÜíL[ùïú] ùïú, ‚àÄ y ‚àà A, l y ‚â§ l x ‚àß (l x ‚â§ l y ‚Üí y = x) }
#align set.exposed_points Set.exposedPoints

variable {ùïú}

theorem exposed_point_def :
    x ‚àà A.exposedPoints ùïú ‚Üî x ‚àà A ‚àß ‚àÉ l : E ‚ÜíL[ùïú] ùïú, ‚àÄ y ‚àà A, l y ‚â§ l x ‚àß (l x ‚â§ l y ‚Üí y = x) :=
  Iff.rfl
#align exposed_point_def exposed_point_def

theorem exposedPoints_subset : A.exposedPoints ùïú ‚äÜ A := fun _ hx => hx.1
#align exposed_points_subset exposedPoints_subset

@[simp]
theorem exposedPoints_empty : (‚àÖ : Set E).exposedPoints ùïú = ‚àÖ :=
  subset_empty_iff.1 exposedPoints_subset
#align exposed_points_empty exposedPoints_empty

/-- Exposed points exactly correspond to exposed singletons. -/
theorem mem_exposedPoints_iff_exposed_singleton : x ‚àà A.exposedPoints ùïú ‚Üî IsExposed ùïú A {x} := by
  use fun ‚ü®hxA, l, hl‚ü© _ =>
    ‚ü®l,
      Eq.symm <|
        eq_singleton_iff_unique_mem.2
          ‚ü®‚ü®hxA, fun y hy => (hl y hy).1‚ü©, fun z hz => (hl z hz.1).2 (hz.2 x hxA)‚ü©‚ü©
  rintro h
  obtain ‚ü®l, hl‚ü© := h ‚ü®x, mem_singleton _‚ü©
  rw [eq_comm, eq_singleton_iff_unique_mem] at hl
  exact
    ‚ü®hl.1.1, l, fun y hy =>
      ‚ü®hl.1.2 y hy, fun hxy => hl.2 y ‚ü®hy, fun z hz => (hl.1.2 z hz).trans hxy‚ü©‚ü©‚ü©
#align mem_exposed_points_iff_exposed_singleton mem_exposedPoints_iff_exposed_singleton

end OrderedRing

section LinearOrderedRing

variable {ùïú : Type*} {E : Type*} [TopologicalSpace ùïú] [LinearOrderedRing ùïú] [AddCommMonoid E]
  [TopologicalSpace E] [Module ùïú E] {A B C : Set E}

namespace IsExposed

protected theorem convex (hAB : IsExposed ùïú A B) (hA : Convex ùïú A) : Convex ùïú B := by
  obtain rfl | hB := B.eq_empty_or_nonempty
  ¬∑ exact convex_empty
  obtain ‚ü®l, rfl‚ü© := hAB hB
  exact fun x‚ÇÅ hx‚ÇÅ x‚ÇÇ hx‚ÇÇ a b ha hb hab =>
    ‚ü®hA hx‚ÇÅ.1 hx‚ÇÇ.1 ha hb hab, fun y hy =>
      ((l.toLinearMap.concaveOn convex_univ).convex_ge _ ‚ü®mem_univ _, hx‚ÇÅ.2 y hy‚ü©
          ‚ü®mem_univ _, hx‚ÇÇ.2 y hy‚ü© ha hb hab).2‚ü©
#align is_exposed.convex IsExposed.convex

protected theorem isExtreme (hAB : IsExposed ùïú A B) : IsExtreme ùïú A B := by
  refine ‚ü®hAB.subset, fun x‚ÇÅ hx‚ÇÅA x‚ÇÇ hx‚ÇÇA x hxB hx => ?_‚ü©
  obtain ‚ü®l, rfl‚ü© := hAB ‚ü®x, hxB‚ü©
  have hl : ConvexOn ùïú univ l := l.toLinearMap.convexOn convex_univ
  have hlx‚ÇÅ := hxB.2 x‚ÇÅ hx‚ÇÅA
  have hlx‚ÇÇ := hxB.2 x‚ÇÇ hx‚ÇÇA
  refine' ‚ü®‚ü®hx‚ÇÅA, fun y hy => _‚ü©, ‚ü®hx‚ÇÇA, fun y hy => _‚ü©‚ü©
  ¬∑ rw [hlx‚ÇÅ.antisymm (hl.le_left_of_right_le (mem_univ _) (mem_univ _) hx hlx‚ÇÇ)]
    exact hxB.2 y hy
  ¬∑ rw [hlx‚ÇÇ.antisymm (hl.le_right_of_left_le (mem_univ _) (mem_univ _) hx hlx‚ÇÅ)]
    exact hxB.2 y hy
#align is_exposed.is_extreme IsExposed.isExtreme

end IsExposed

theorem exposedPoints_subset_extremePoints : A.exposedPoints ùïú ‚äÜ A.extremePoints ùïú := fun _ hx =>
  (mem_exposedPoints_iff_exposed_singleton.1 hx).isExtreme.mem_extremePoints
#align exposed_points_subset_extreme_points exposedPoints_subset_extremePoints

end LinearOrderedRing
