/-
Copyright (c) 2022 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov
-/
import Mathlib.Analysis.Asymptotics.Asymptotics

#align_import analysis.asymptotics.theta from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# Asymptotic equivalence up to a constant

In this file we define `Asymptotics.IsTheta l f g` (notation: `f =Œò[l] g`) as
`f =O[l] g ‚àß g =O[l] f`, then prove basic properties of this equivalence relation.
-/


open Filter

open Topology

namespace Asymptotics

set_option linter.uppercaseLean3 false -- is_Theta

variable {Œ± : Type*} {Œ≤ : Type*} {E : Type*} {F : Type*} {G : Type*} {E' : Type*}
  {F' : Type*} {G' : Type*} {E'' : Type*} {F'' : Type*} {G'' : Type*} {R : Type*}
  {R' : Type*} {ùïú : Type*} {ùïú' : Type*}

variable [Norm E] [Norm F] [Norm G]

variable [SeminormedAddCommGroup E'] [SeminormedAddCommGroup F'] [SeminormedAddCommGroup G']
  [NormedAddCommGroup E''] [NormedAddCommGroup F''] [NormedAddCommGroup G''] [SeminormedRing R]
  [SeminormedRing R']

variable [NormedField ùïú] [NormedField ùïú']

variable {c c' c‚ÇÅ c‚ÇÇ : ‚Ñù} {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {k : Œ± ‚Üí G}

variable {f' : Œ± ‚Üí E'} {g' : Œ± ‚Üí F'} {k' : Œ± ‚Üí G'}

variable {f'' : Œ± ‚Üí E''} {g'' : Œ± ‚Üí F''}

variable {l l' : Filter Œ±}

/-- We say that `f` is `Œò(g)` along a filter `l` (notation: `f =Œò[l] g`) if `f =O[l] g` and
`g =O[l] f`. -/
def IsTheta (l : Filter Œ±) (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) : Prop :=
  IsBigO l f g ‚àß IsBigO l g f
#align asymptotics.is_Theta Asymptotics.IsTheta

notation:100 f " =Œò[" l "] " g:100 => IsTheta l f g

theorem IsBigO.antisymm (h‚ÇÅ : f =O[l] g) (h‚ÇÇ : g =O[l] f) : f =Œò[l] g :=
  ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
#align asymptotics.is_O.antisymm Asymptotics.IsBigO.antisymm

lemma IsTheta.isBigO (h : f =Œò[l] g) : f =O[l] g := h.1

lemma IsTheta.isBigO_symm (h : f =Œò[l] g) : g =O[l] f := h.2

@[refl]
theorem isTheta_refl (f : Œ± ‚Üí E) (l : Filter Œ±) : f =Œò[l] f :=
  ‚ü®isBigO_refl _ _, isBigO_refl _ _‚ü©
#align asymptotics.is_Theta_refl Asymptotics.isTheta_refl

theorem isTheta_rfl : f =Œò[l] f :=
  isTheta_refl _ _
#align asymptotics.is_Theta_rfl Asymptotics.isTheta_rfl

@[symm]
nonrec theorem IsTheta.symm (h : f =Œò[l] g) : g =Œò[l] f :=
  h.symm
#align asymptotics.is_Theta.symm Asymptotics.IsTheta.symm

theorem isTheta_comm : f =Œò[l] g ‚Üî g =Œò[l] f :=
  ‚ü®fun h ‚Ü¶ h.symm, fun h ‚Ü¶ h.symm‚ü©
#align asymptotics.is_Theta_comm Asymptotics.isTheta_comm

@[trans]
theorem IsTheta.trans {f : Œ± ‚Üí E} {g : Œ± ‚Üí F'} {k : Œ± ‚Üí G} (h‚ÇÅ : f =Œò[l] g) (h‚ÇÇ : g =Œò[l] k) :
    f =Œò[l] k :=
  ‚ü®h‚ÇÅ.1.trans h‚ÇÇ.1, h‚ÇÇ.2.trans h‚ÇÅ.2‚ü©
#align asymptotics.is_Theta.trans Asymptotics.IsTheta.trans

-- Porting note: added
instance : Trans (Œ± := Œ± ‚Üí E) (Œ≤ := Œ± ‚Üí F') (Œ≥ := Œ± ‚Üí G) (IsTheta l) (IsTheta l) (IsTheta l) :=
  ‚ü®IsTheta.trans‚ü©

@[trans]
theorem IsBigO.trans_isTheta {f : Œ± ‚Üí E} {g : Œ± ‚Üí F'} {k : Œ± ‚Üí G} (h‚ÇÅ : f =O[l] g)
    (h‚ÇÇ : g =Œò[l] k) : f =O[l] k :=
  h‚ÇÅ.trans h‚ÇÇ.1
#align asymptotics.is_O.trans_is_Theta Asymptotics.IsBigO.trans_isTheta

-- Porting note: added
instance : Trans (Œ± := Œ± ‚Üí E) (Œ≤ := Œ± ‚Üí F') (Œ≥ := Œ± ‚Üí G) (IsBigO l) (IsTheta l) (IsBigO l) :=
  ‚ü®IsBigO.trans_isTheta‚ü©

@[trans]
theorem IsTheta.trans_isBigO {f : Œ± ‚Üí E} {g : Œ± ‚Üí F'} {k : Œ± ‚Üí G} (h‚ÇÅ : f =Œò[l] g)
    (h‚ÇÇ : g =O[l] k) : f =O[l] k :=
  h‚ÇÅ.1.trans h‚ÇÇ
#align asymptotics.is_Theta.trans_is_O Asymptotics.IsTheta.trans_isBigO

-- Porting note: added
instance : Trans (Œ± := Œ± ‚Üí E) (Œ≤ := Œ± ‚Üí F') (Œ≥ := Œ± ‚Üí G) (IsTheta l) (IsBigO l) (IsBigO l) :=
  ‚ü®IsTheta.trans_isBigO‚ü©

@[trans]
theorem IsLittleO.trans_isTheta {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {k : Œ± ‚Üí G'} (h‚ÇÅ : f =o[l] g)
    (h‚ÇÇ : g =Œò[l] k) : f =o[l] k :=
  h‚ÇÅ.trans_isBigO h‚ÇÇ.1
#align asymptotics.is_o.trans_is_Theta Asymptotics.IsLittleO.trans_isTheta

-- Porting note: added
instance : Trans (Œ± := Œ± ‚Üí E) (Œ≤ := Œ± ‚Üí F') (Œ≥ := Œ± ‚Üí G') (IsLittleO l) (IsTheta l) (IsLittleO l) :=
  ‚ü®IsLittleO.trans_isTheta‚ü©

@[trans]
theorem IsTheta.trans_isLittleO {f : Œ± ‚Üí E} {g : Œ± ‚Üí F'} {k : Œ± ‚Üí G} (h‚ÇÅ : f =Œò[l] g)
    (h‚ÇÇ : g =o[l] k) : f =o[l] k :=
  h‚ÇÅ.1.trans_isLittleO h‚ÇÇ
#align asymptotics.is_Theta.trans_is_o Asymptotics.IsTheta.trans_isLittleO

-- Porting note: added
instance : Trans (Œ± := Œ± ‚Üí E) (Œ≤ := Œ± ‚Üí F') (Œ≥ := Œ± ‚Üí G) (IsTheta l) (IsLittleO l) (IsLittleO l) :=
  ‚ü®IsTheta.trans_isLittleO‚ü©

@[trans]
theorem IsTheta.trans_eventuallyEq {f : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} (h : f =Œò[l] g‚ÇÅ) (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) :
    f =Œò[l] g‚ÇÇ :=
  ‚ü®h.1.trans_eventuallyEq hg, hg.symm.trans_isBigO h.2‚ü©
#align asymptotics.is_Theta.trans_eventually_eq Asymptotics.IsTheta.trans_eventuallyEq

-- Porting note: added
instance : Trans (Œ± := Œ± ‚Üí E) (Œ≤ := Œ± ‚Üí F) (Œ≥ := Œ± ‚Üí F) (IsTheta l) (EventuallyEq l) (IsTheta l) :=
  ‚ü®IsTheta.trans_eventuallyEq‚ü©

@[trans]
theorem _root_.Filter.EventuallyEq.trans_isTheta {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g : Œ± ‚Üí F} (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ)
    (h : f‚ÇÇ =Œò[l] g) : f‚ÇÅ =Œò[l] g :=
  ‚ü®hf.trans_isBigO h.1, h.2.trans_eventuallyEq hf.symm‚ü©
#align filter.eventually_eq.trans_is_Theta Filter.EventuallyEq.trans_isTheta

-- Porting note: added
instance : Trans (Œ± := Œ± ‚Üí E) (Œ≤ := Œ± ‚Üí E) (Œ≥ := Œ± ‚Üí F) (EventuallyEq l) (IsTheta l) (IsTheta l) :=
  ‚ü®EventuallyEq.trans_isTheta‚ü©

@[simp]
theorem isTheta_norm_left : (fun x ‚Ü¶ ‚Äñf' x‚Äñ) =Œò[l] g ‚Üî f' =Œò[l] g := by simp [IsTheta]
#align asymptotics.is_Theta_norm_left Asymptotics.isTheta_norm_left

@[simp]
theorem isTheta_norm_right : (f =Œò[l] fun x ‚Ü¶ ‚Äñg' x‚Äñ) ‚Üî f =Œò[l] g' := by simp [IsTheta]
#align asymptotics.is_Theta_norm_right Asymptotics.isTheta_norm_right

alias ‚ü®IsTheta.of_norm_left, IsTheta.norm_left‚ü© := isTheta_norm_left
#align asymptotics.is_Theta.of_norm_left Asymptotics.IsTheta.of_norm_left
#align asymptotics.is_Theta.norm_left Asymptotics.IsTheta.norm_left

alias ‚ü®IsTheta.of_norm_right, IsTheta.norm_right‚ü© := isTheta_norm_right
#align asymptotics.is_Theta.of_norm_right Asymptotics.IsTheta.of_norm_right
#align asymptotics.is_Theta.norm_right Asymptotics.IsTheta.norm_right

theorem isTheta_of_norm_eventuallyEq (h : (fun x ‚Ü¶ ‚Äñf x‚Äñ) =·∂†[l] fun x ‚Ü¶ ‚Äñg x‚Äñ) : f =Œò[l] g :=
  ‚ü®IsBigO.of_bound 1 <| by simpa only [one_mul] using h.le,
    IsBigO.of_bound 1 <| by simpa only [one_mul] using h.symm.le‚ü©
#align asymptotics.is_Theta_of_norm_eventually_eq Asymptotics.isTheta_of_norm_eventuallyEq

theorem isTheta_of_norm_eventuallyEq' {g : Œ± ‚Üí ‚Ñù} (h : (fun x ‚Ü¶ ‚Äñf' x‚Äñ) =·∂†[l] g) : f' =Œò[l] g :=
  isTheta_of_norm_eventuallyEq <| h.mono fun x hx ‚Ü¶ by simp only [‚Üê hx, norm_norm]
#align asymptotics.is_Theta_of_norm_eventually_eq' Asymptotics.isTheta_of_norm_eventuallyEq'

theorem IsTheta.isLittleO_congr_left (h : f' =Œò[l] g') : f' =o[l] k ‚Üî g' =o[l] k :=
  ‚ü®h.symm.trans_isLittleO, h.trans_isLittleO‚ü©
#align asymptotics.is_Theta.is_o_congr_left Asymptotics.IsTheta.isLittleO_congr_left

theorem IsTheta.isLittleO_congr_right (h : g' =Œò[l] k') : f =o[l] g' ‚Üî f =o[l] k' :=
  ‚ü®fun H ‚Ü¶ H.trans_isTheta h, fun H ‚Ü¶ H.trans_isTheta h.symm‚ü©
#align asymptotics.is_Theta.is_o_congr_right Asymptotics.IsTheta.isLittleO_congr_right

theorem IsTheta.isBigO_congr_left (h : f' =Œò[l] g') : f' =O[l] k ‚Üî g' =O[l] k :=
  ‚ü®h.symm.trans_isBigO, h.trans_isBigO‚ü©
#align asymptotics.is_Theta.is_O_congr_left Asymptotics.IsTheta.isBigO_congr_left

theorem IsTheta.isBigO_congr_right (h : g' =Œò[l] k') : f =O[l] g' ‚Üî f =O[l] k' :=
  ‚ü®fun H ‚Ü¶ H.trans_isTheta h, fun H ‚Ü¶ H.trans_isTheta h.symm‚ü©
#align asymptotics.is_Theta.is_O_congr_right Asymptotics.IsTheta.isBigO_congr_right

theorem IsTheta.mono (h : f =Œò[l] g) (hl : l' ‚â§ l) : f =Œò[l'] g :=
  ‚ü®h.1.mono hl, h.2.mono hl‚ü©
#align asymptotics.is_Theta.mono Asymptotics.IsTheta.mono

theorem IsTheta.sup (h : f' =Œò[l] g') (h' : f' =Œò[l'] g') : f' =Œò[l ‚äî l'] g' :=
  ‚ü®h.1.sup h'.1, h.2.sup h'.2‚ü©
#align asymptotics.is_Theta.sup Asymptotics.IsTheta.sup

@[simp]
theorem isTheta_sup : f' =Œò[l ‚äî l'] g' ‚Üî f' =Œò[l] g' ‚àß f' =Œò[l'] g' :=
  ‚ü®fun h ‚Ü¶ ‚ü®h.mono le_sup_left, h.mono le_sup_right‚ü©, fun h ‚Ü¶ h.1.sup h.2‚ü©
#align asymptotics.is_Theta_sup Asymptotics.isTheta_sup

theorem IsTheta.eq_zero_iff (h : f'' =Œò[l] g'') : ‚àÄ·∂† x in l, f'' x = 0 ‚Üî g'' x = 0 :=
  h.1.eq_zero_imp.mp <| h.2.eq_zero_imp.mono fun _ ‚Ü¶ Iff.intro
#align asymptotics.is_Theta.eq_zero_iff Asymptotics.IsTheta.eq_zero_iff

theorem IsTheta.tendsto_zero_iff (h : f'' =Œò[l] g'') : Tendsto f'' l (ùìù 0) ‚Üî Tendsto g'' l (ùìù 0) :=
  by simp only [‚Üê isLittleO_one_iff ‚Ñù, h.isLittleO_congr_left]
#align asymptotics.is_Theta.tendsto_zero_iff Asymptotics.IsTheta.tendsto_zero_iff

theorem IsTheta.tendsto_norm_atTop_iff (h : f' =Œò[l] g') :
    Tendsto (norm ‚àò f') l atTop ‚Üî Tendsto (norm ‚àò g') l atTop := by
  simp only [Function.comp, ‚Üê isLittleO_const_left_of_ne (one_ne_zero' ‚Ñù), h.isLittleO_congr_right]
#align asymptotics.is_Theta.tendsto_norm_at_top_iff Asymptotics.IsTheta.tendsto_norm_atTop_iff

theorem IsTheta.isBoundedUnder_le_iff (h : f' =Œò[l] g') :
    IsBoundedUnder (¬∑ ‚â§ ¬∑) l (norm ‚àò f') ‚Üî IsBoundedUnder (¬∑ ‚â§ ¬∑) l (norm ‚àò g') := by
  simp only [‚Üê isBigO_const_of_ne (one_ne_zero' ‚Ñù), h.isBigO_congr_left]
#align asymptotics.is_Theta.is_bounded_under_le_iff Asymptotics.IsTheta.isBoundedUnder_le_iff

theorem IsTheta.smul [NormedSpace ùïú E'] [NormedSpace ùïú' F'] {f‚ÇÅ : Œ± ‚Üí ùïú} {f‚ÇÇ : Œ± ‚Üí ùïú'} {g‚ÇÅ : Œ± ‚Üí E'}
    {g‚ÇÇ : Œ± ‚Üí F'} (hf : f‚ÇÅ =Œò[l] f‚ÇÇ) (hg : g‚ÇÅ =Œò[l] g‚ÇÇ) :
    (fun x ‚Ü¶ f‚ÇÅ x ‚Ä¢ g‚ÇÅ x) =Œò[l] fun x ‚Ü¶ f‚ÇÇ x ‚Ä¢ g‚ÇÇ x :=
  ‚ü®hf.1.smul hg.1, hf.2.smul hg.2‚ü©
#align asymptotics.is_Theta.smul Asymptotics.IsTheta.smul

theorem IsTheta.mul {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí ùïú} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí ùïú'} (h‚ÇÅ : f‚ÇÅ =Œò[l] g‚ÇÅ) (h‚ÇÇ : f‚ÇÇ =Œò[l] g‚ÇÇ) :
    (fun x ‚Ü¶ f‚ÇÅ x * f‚ÇÇ x) =Œò[l] fun x ‚Ü¶ g‚ÇÅ x * g‚ÇÇ x :=
  h‚ÇÅ.smul h‚ÇÇ
#align asymptotics.is_Theta.mul Asymptotics.IsTheta.mul

theorem IsTheta.inv {f : Œ± ‚Üí ùïú} {g : Œ± ‚Üí ùïú'} (h : f =Œò[l] g) :
    (fun x ‚Ü¶ (f x)‚Åª¬π) =Œò[l] fun x ‚Ü¶ (g x)‚Åª¬π :=
  ‚ü®h.2.inv_rev h.1.eq_zero_imp, h.1.inv_rev h.2.eq_zero_imp‚ü©
#align asymptotics.is_Theta.inv Asymptotics.IsTheta.inv

@[simp]
theorem isTheta_inv {f : Œ± ‚Üí ùïú} {g : Œ± ‚Üí ùïú'} :
    ((fun x ‚Ü¶ (f x)‚Åª¬π) =Œò[l] fun x ‚Ü¶ (g x)‚Åª¬π) ‚Üî f =Œò[l] g :=
  ‚ü®fun h ‚Ü¶ by simpa only [inv_inv] using h.inv, IsTheta.inv‚ü©
#align asymptotics.is_Theta_inv Asymptotics.isTheta_inv

theorem IsTheta.div {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí ùïú} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí ùïú'} (h‚ÇÅ : f‚ÇÅ =Œò[l] g‚ÇÅ) (h‚ÇÇ : f‚ÇÇ =Œò[l] g‚ÇÇ) :
    (fun x ‚Ü¶ f‚ÇÅ x / f‚ÇÇ x) =Œò[l] fun x ‚Ü¶ g‚ÇÅ x / g‚ÇÇ x := by
  simpa only [div_eq_mul_inv] using h‚ÇÅ.mul h‚ÇÇ.inv
#align asymptotics.is_Theta.div Asymptotics.IsTheta.div

theorem IsTheta.pow {f : Œ± ‚Üí ùïú} {g : Œ± ‚Üí ùïú'} (h : f =Œò[l] g) (n : ‚Ñï) :
    (fun x ‚Ü¶ f x ^ n) =Œò[l] fun x ‚Ü¶ g x ^ n :=
  ‚ü®h.1.pow n, h.2.pow n‚ü©
#align asymptotics.is_Theta.pow Asymptotics.IsTheta.pow

theorem IsTheta.zpow {f : Œ± ‚Üí ùïú} {g : Œ± ‚Üí ùïú'} (h : f =Œò[l] g) (n : ‚Ñ§) :
    (fun x ‚Ü¶ f x ^ n) =Œò[l] fun x ‚Ü¶ g x ^ n := by
  cases n
  ¬∑ simpa only [Int.ofNat_eq_coe, zpow_coe_nat] using h.pow _
  ¬∑ simpa only [zpow_negSucc] using (h.pow _).inv
#align asymptotics.is_Theta.zpow Asymptotics.IsTheta.zpow

theorem isTheta_const_const {c‚ÇÅ : E''} {c‚ÇÇ : F''} (h‚ÇÅ : c‚ÇÅ ‚â† 0) (h‚ÇÇ : c‚ÇÇ ‚â† 0) :
    (fun _ : Œ± ‚Ü¶ c‚ÇÅ) =Œò[l] fun _ ‚Ü¶ c‚ÇÇ :=
  ‚ü®isBigO_const_const _ h‚ÇÇ _, isBigO_const_const _ h‚ÇÅ _‚ü©
#align asymptotics.is_Theta_const_const Asymptotics.isTheta_const_const

@[simp]
theorem isTheta_const_const_iff [NeBot l] {c‚ÇÅ : E''} {c‚ÇÇ : F''} :
    ((fun _ : Œ± ‚Ü¶ c‚ÇÅ) =Œò[l] fun _ ‚Ü¶ c‚ÇÇ) ‚Üî (c‚ÇÅ = 0 ‚Üî c‚ÇÇ = 0) := by
  simpa only [IsTheta, isBigO_const_const_iff, ‚Üê iff_def] using Iff.comm
#align asymptotics.is_Theta_const_const_iff Asymptotics.isTheta_const_const_iff

@[simp]
theorem isTheta_zero_left : (fun _ ‚Ü¶ (0 : E')) =Œò[l] g'' ‚Üî g'' =·∂†[l] 0 := by
  simp only [IsTheta, isBigO_zero, isBigO_zero_right_iff, true_and_iff]
#align asymptotics.is_Theta_zero_left Asymptotics.isTheta_zero_left

@[simp]
theorem isTheta_zero_right : (f'' =Œò[l] fun _ ‚Ü¶ (0 : F')) ‚Üî f'' =·∂†[l] 0 :=
  isTheta_comm.trans isTheta_zero_left
#align asymptotics.is_Theta_zero_right Asymptotics.isTheta_zero_right

theorem isTheta_const_smul_left [NormedSpace ùïú E'] {c : ùïú} (hc : c ‚â† 0) :
    (fun x ‚Ü¶ c ‚Ä¢ f' x) =Œò[l] g ‚Üî f' =Œò[l] g :=
  and_congr (isBigO_const_smul_left hc) (isBigO_const_smul_right hc)
#align asymptotics.is_Theta_const_smul_left Asymptotics.isTheta_const_smul_left

alias ‚ü®IsTheta.of_const_smul_left, IsTheta.const_smul_left‚ü© := isTheta_const_smul_left
#align asymptotics.is_Theta.of_const_smul_left Asymptotics.IsTheta.of_const_smul_left
#align asymptotics.is_Theta.const_smul_left Asymptotics.IsTheta.const_smul_left

theorem isTheta_const_smul_right [NormedSpace ùïú F'] {c : ùïú} (hc : c ‚â† 0) :
    (f =Œò[l] fun x ‚Ü¶ c ‚Ä¢ g' x) ‚Üî f =Œò[l] g' :=
  and_congr (isBigO_const_smul_right hc) (isBigO_const_smul_left hc)
#align asymptotics.is_Theta_const_smul_right Asymptotics.isTheta_const_smul_right

alias ‚ü®IsTheta.of_const_smul_right, IsTheta.const_smul_right‚ü© := isTheta_const_smul_right
#align asymptotics.is_Theta.of_const_smul_right Asymptotics.IsTheta.of_const_smul_right
#align asymptotics.is_Theta.const_smul_right Asymptotics.IsTheta.const_smul_right

theorem isTheta_const_mul_left {c : ùïú} {f : Œ± ‚Üí ùïú} (hc : c ‚â† 0) :
    (fun x ‚Ü¶ c * f x) =Œò[l] g ‚Üî f =Œò[l] g := by
  simpa only [‚Üê smul_eq_mul] using isTheta_const_smul_left hc
#align asymptotics.is_Theta_const_mul_left Asymptotics.isTheta_const_mul_left

alias ‚ü®IsTheta.of_const_mul_left, IsTheta.const_mul_left‚ü© := isTheta_const_mul_left
#align asymptotics.is_Theta.of_const_mul_left Asymptotics.IsTheta.of_const_mul_left
#align asymptotics.is_Theta.const_mul_left Asymptotics.IsTheta.const_mul_left

theorem isTheta_const_mul_right {c : ùïú} {g : Œ± ‚Üí ùïú} (hc : c ‚â† 0) :
    (f =Œò[l] fun x ‚Ü¶ c * g x) ‚Üî f =Œò[l] g := by
  simpa only [‚Üê smul_eq_mul] using isTheta_const_smul_right hc
#align asymptotics.is_Theta_const_mul_right Asymptotics.isTheta_const_mul_right

alias ‚ü®IsTheta.of_const_mul_right, IsTheta.const_mul_right‚ü© := isTheta_const_mul_right
#align asymptotics.is_Theta.of_const_mul_right Asymptotics.IsTheta.of_const_mul_right
#align asymptotics.is_Theta.const_mul_right Asymptotics.IsTheta.const_mul_right

lemma IsTheta.add_isLittleO {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'}
    (h : f‚ÇÇ =o[l] f‚ÇÅ) : (f‚ÇÅ + f‚ÇÇ) =Œò[l] f‚ÇÅ :=
  ‚ü®(isBigO_refl _ _).add_isLittleO h, by rw [add_comm]; exact h.right_isBigO_add‚ü©

end Asymptotics
