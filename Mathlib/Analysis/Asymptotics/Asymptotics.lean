/-
Copyright (c) 2019 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jeremy Avigad, Yury Kudryashov
-/
import Mathlib.Analysis.Normed.Group.InfiniteSum
import Mathlib.Analysis.Normed.MulAction
import Mathlib.Topology.Algebra.Order.LiminfLimsup
import Mathlib.Topology.PartialHomeomorph

/-!
# Asymptotics

We introduce these relations:

* `IsBigOWith c l f g` : "f is big O of g along l with constant c";
* `f =O[l] g` : "f is big O of g along l";
* `f =o[l] g` : "f is little o of g along l".

Here `l` is any filter on the domain of `f` and `g`, which are assumed to be the same. The codomains
of `f` and `g` do not need to be the same; all that is needed that there is a norm associated with
these types, and it is the norm that is compared asymptotically.

The relation `IsBigOWith c` is introduced to factor out common algebraic arguments in the proofs of
similar properties of `IsBigO` and `IsLittleO`. Usually proofs outside of this file should use
`IsBigO` instead.

Often the ranges of `f` and `g` will be the real numbers, in which case the norm is the absolute
value. In general, we have

  `f =O[l] g ‚Üî (fun x ‚Ü¶ ‚Äñf x‚Äñ) =O[l] (fun x ‚Ü¶ ‚Äñg x‚Äñ)`,

and similarly for `IsLittleO`. But our setup allows us to use the notions e.g. with functions
to the integers, rationals, complex numbers, or any normed vector space without mentioning the
norm explicitly.

If `f` and `g` are functions to a normed field like the reals or complex numbers and `g` is always
nonzero, we have

  `f =o[l] g ‚Üî Tendsto (fun x ‚Ü¶ f x / (g x)) l (ùìù 0)`.

In fact, the right-to-left direction holds without the hypothesis on `g`, and in the other direction
it suffices to assume that `f` is zero wherever `g` is. (This generalization is useful in defining
the Fr√©chet derivative.)
-/

open scoped Classical
open Set Topology Filter NNReal

namespace Asymptotics


variable {Œ± : Type*} {Œ≤ : Type*} {E : Type*} {F : Type*} {G : Type*} {E' : Type*}
  {F' : Type*} {G' : Type*} {E'' : Type*} {F'' : Type*} {G'' : Type*} {E''' : Type*}
  {R : Type*} {R' : Type*} {ùïú : Type*} {ùïú' : Type*}

variable [Norm E] [Norm F] [Norm G]
variable [SeminormedAddCommGroup E'] [SeminormedAddCommGroup F'] [SeminormedAddCommGroup G']
  [NormedAddCommGroup E''] [NormedAddCommGroup F''] [NormedAddCommGroup G''] [SeminormedRing R]
  [SeminormedAddGroup E''']
  [SeminormedRing R']

variable [NormedDivisionRing ùïú] [NormedDivisionRing ùïú']
variable {c c' c‚ÇÅ c‚ÇÇ : ‚Ñù} {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {k : Œ± ‚Üí G}
variable {f' : Œ± ‚Üí E'} {g' : Œ± ‚Üí F'} {k' : Œ± ‚Üí G'}
variable {f'' : Œ± ‚Üí E''} {g'' : Œ± ‚Üí F''} {k'' : Œ± ‚Üí G''}
variable {l l' : Filter Œ±}

section Defs

/-! ### Definitions -/


/-- This version of the Landau notation `IsBigOWith C l f g` where `f` and `g` are two functions on
a type `Œ±` and `l` is a filter on `Œ±`, means that eventually for `l`, `‚Äñf‚Äñ` is bounded by `C * ‚Äñg‚Äñ`.
In other words, `‚Äñf‚Äñ / ‚Äñg‚Äñ` is eventually bounded by `C`, modulo division by zero issues that are
avoided by this definition. Probably you want to use `IsBigO` instead of this relation. -/
irreducible_def IsBigOWith (c : ‚Ñù) (l : Filter Œ±) (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) : Prop :=
  ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ

/-- Definition of `IsBigOWith`. We record it in a lemma as `IsBigOWith` is irreducible. -/
theorem isBigOWith_iff : IsBigOWith c l f g ‚Üî ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ := by rw [IsBigOWith_def]

alias ‚ü®IsBigOWith.bound, IsBigOWith.of_bound‚ü© := isBigOWith_iff

/-- The Landau notation `f =O[l] g` where `f` and `g` are two functions on a type `Œ±` and `l` is
a filter on `Œ±`, means that eventually for `l`, `‚Äñf‚Äñ` is bounded by a constant multiple of `‚Äñg‚Äñ`.
In other words, `‚Äñf‚Äñ / ‚Äñg‚Äñ` is eventually bounded, modulo division by zero issues that are avoided
by this definition. -/
irreducible_def IsBigO (l : Filter Œ±) (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) : Prop :=
  ‚àÉ c : ‚Ñù, IsBigOWith c l f g

@[inherit_doc]
notation:100 f " =O[" l "] " g:100 => IsBigO l f g

/-- Definition of `IsBigO` in terms of `IsBigOWith`. We record it in a lemma as `IsBigO` is
irreducible. -/
theorem isBigO_iff_isBigOWith : f =O[l] g ‚Üî ‚àÉ c : ‚Ñù, IsBigOWith c l f g := by rw [IsBigO_def]

/-- Definition of `IsBigO` in terms of filters. -/
theorem isBigO_iff : f =O[l] g ‚Üî ‚àÉ c : ‚Ñù, ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ := by
  simp only [IsBigO_def, IsBigOWith_def]

/-- Definition of `IsBigO` in terms of filters, with a positive constant. -/
theorem isBigO_iff' {g : Œ± ‚Üí E'''} :
    f =O[l] g ‚Üî ‚àÉ c > 0, ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ := by
  refine ‚ü®fun h => ?mp, fun h => ?mpr‚ü©
  case mp =>
    rw [isBigO_iff] at h
    obtain ‚ü®c, hc‚ü© := h
    refine ‚ü®max c 1, zero_lt_one.trans_le (le_max_right _ _), ?_‚ü©
    filter_upwards [hc] with x hx
    apply hx.trans
    gcongr
    exact le_max_left _ _
  case mpr =>
    rw [isBigO_iff]
    obtain ‚ü®c, ‚ü®_, hc‚ü©‚ü© := h
    exact ‚ü®c, hc‚ü©

/-- Definition of `IsBigO` in terms of filters, with the constant in the lower bound. -/
theorem isBigO_iff'' {g : Œ± ‚Üí E'''} :
    f =O[l] g ‚Üî ‚àÉ c > 0, ‚àÄ·∂† x in l, c * ‚Äñf x‚Äñ ‚â§ ‚Äñg x‚Äñ := by
  refine ‚ü®fun h => ?mp, fun h => ?mpr‚ü©
  case mp =>
    rw [isBigO_iff'] at h
    obtain ‚ü®c, ‚ü®hc_pos, hc‚ü©‚ü© := h
    refine ‚ü®c‚Åª¬π, ‚ü®by positivity, ?_‚ü©‚ü©
    filter_upwards [hc] with x hx
    rwa [inv_mul_le_iff (by positivity)]
  case mpr =>
    rw [isBigO_iff']
    obtain ‚ü®c, ‚ü®hc_pos, hc‚ü©‚ü© := h
    refine ‚ü®c‚Åª¬π, ‚ü®by positivity, ?_‚ü©‚ü©
    filter_upwards [hc] with x hx
    rwa [‚Üê inv_inv c, inv_mul_le_iff (by positivity)] at hx

theorem IsBigO.of_bound (c : ‚Ñù) (h : ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ) : f =O[l] g :=
  isBigO_iff.2 ‚ü®c, h‚ü©

theorem IsBigO.of_bound' (h : ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ ‚Äñg x‚Äñ) : f =O[l] g :=
  IsBigO.of_bound 1 <| by
    simp_rw [one_mul]
    exact h

theorem IsBigO.bound : f =O[l] g ‚Üí ‚àÉ c : ‚Ñù, ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ :=
  isBigO_iff.1

/-- The Landau notation `f =o[l] g` where `f` and `g` are two functions on a type `Œ±` and `l` is
a filter on `Œ±`, means that eventually for `l`, `‚Äñf‚Äñ` is bounded by an arbitrarily small constant
multiple of `‚Äñg‚Äñ`. In other words, `‚Äñf‚Äñ / ‚Äñg‚Äñ` tends to `0` along `l`, modulo division by zero
issues that are avoided by this definition. -/
irreducible_def IsLittleO (l : Filter Œ±) (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) : Prop :=
  ‚àÄ ‚¶Éc : ‚Ñù‚¶Ñ, 0 < c ‚Üí IsBigOWith c l f g

@[inherit_doc]
notation:100 f " =o[" l "] " g:100 => IsLittleO l f g

/-- Definition of `IsLittleO` in terms of `IsBigOWith`. -/
theorem isLittleO_iff_forall_isBigOWith : f =o[l] g ‚Üî ‚àÄ ‚¶Éc : ‚Ñù‚¶Ñ, 0 < c ‚Üí IsBigOWith c l f g := by
  rw [IsLittleO_def]

alias ‚ü®IsLittleO.forall_isBigOWith, IsLittleO.of_isBigOWith‚ü© := isLittleO_iff_forall_isBigOWith

/-- Definition of `IsLittleO` in terms of filters. -/
theorem isLittleO_iff : f =o[l] g ‚Üî ‚àÄ ‚¶Éc : ‚Ñù‚¶Ñ, 0 < c ‚Üí ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ := by
  simp only [IsLittleO_def, IsBigOWith_def]

alias ‚ü®IsLittleO.bound, IsLittleO.of_bound‚ü© := isLittleO_iff

theorem IsLittleO.def (h : f =o[l] g) (hc : 0 < c) : ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ :=
  isLittleO_iff.1 h hc

theorem IsLittleO.def' (h : f =o[l] g) (hc : 0 < c) : IsBigOWith c l f g :=
  isBigOWith_iff.2 <| isLittleO_iff.1 h hc

theorem IsLittleO.eventuallyLE (h : f =o[l] g) : ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ ‚Äñg x‚Äñ := by
  simpa using h.def zero_lt_one

end Defs

/-! ### Conversions -/


theorem IsBigOWith.isBigO (h : IsBigOWith c l f g) : f =O[l] g := by rw [IsBigO_def]; exact ‚ü®c, h‚ü©

theorem IsLittleO.isBigOWith (hgf : f =o[l] g) : IsBigOWith 1 l f g :=
  hgf.def' zero_lt_one

theorem IsLittleO.isBigO (hgf : f =o[l] g) : f =O[l] g :=
  hgf.isBigOWith.isBigO

theorem IsBigO.isBigOWith : f =O[l] g ‚Üí ‚àÉ c : ‚Ñù, IsBigOWith c l f g :=
  isBigO_iff_isBigOWith.1

theorem IsBigOWith.weaken (h : IsBigOWith c l f g') (hc : c ‚â§ c') : IsBigOWith c' l f g' :=
  IsBigOWith.of_bound <|
    mem_of_superset h.bound fun x hx =>
      calc
        ‚Äñf x‚Äñ ‚â§ c * ‚Äñg' x‚Äñ := hx
        _ ‚â§ _ := by gcongr

theorem IsBigOWith.exists_pos (h : IsBigOWith c l f g') :
    ‚àÉ c' > 0, IsBigOWith c' l f g' :=
  ‚ü®max c 1, lt_of_lt_of_le zero_lt_one (le_max_right c 1), h.weaken <| le_max_left c 1‚ü©

theorem IsBigO.exists_pos (h : f =O[l] g') : ‚àÉ c > 0, IsBigOWith c l f g' :=
  let ‚ü®_c, hc‚ü© := h.isBigOWith
  hc.exists_pos

theorem IsBigOWith.exists_nonneg (h : IsBigOWith c l f g') :
    ‚àÉ c' ‚â• 0, IsBigOWith c' l f g' :=
  let ‚ü®c, cpos, hc‚ü© := h.exists_pos
  ‚ü®c, le_of_lt cpos, hc‚ü©

theorem IsBigO.exists_nonneg (h : f =O[l] g') : ‚àÉ c ‚â• 0, IsBigOWith c l f g' :=
  let ‚ü®_c, hc‚ü© := h.isBigOWith
  hc.exists_nonneg

/-- `f = O(g)` if and only if `IsBigOWith c f g` for all sufficiently large `c`. -/
theorem isBigO_iff_eventually_isBigOWith : f =O[l] g' ‚Üî ‚àÄ·∂† c in atTop, IsBigOWith c l f g' :=
  isBigO_iff_isBigOWith.trans
    ‚ü®fun ‚ü®c, hc‚ü© => mem_atTop_sets.2 ‚ü®c, fun _c' hc' => hc.weaken hc'‚ü©, fun h => h.exists‚ü©

/-- `f = O(g)` if and only if `‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ` for all sufficiently large `c`. -/
theorem isBigO_iff_eventually : f =O[l] g' ‚Üî ‚àÄ·∂† c in atTop, ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg' x‚Äñ :=
  isBigO_iff_eventually_isBigOWith.trans <| by simp only [IsBigOWith_def]

theorem IsBigO.exists_mem_basis {Œπ} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set Œ±} (h : f =O[l] g')
    (hb : l.HasBasis p s) :
    ‚àÉ c > 0, ‚àÉ i : Œπ, p i ‚àß ‚àÄ x ‚àà s i, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg' x‚Äñ :=
  flip Exists.imp h.exists_pos fun c h => by
    simpa only [isBigOWith_iff, hb.eventually_iff, exists_prop] using h

theorem isBigOWith_inv (hc : 0 < c) : IsBigOWith c‚Åª¬π l f g ‚Üî ‚àÄ·∂† x in l, c * ‚Äñf x‚Äñ ‚â§ ‚Äñg x‚Äñ := by
  simp only [IsBigOWith_def, ‚Üê div_eq_inv_mul, le_div_iff‚ÇÄ' hc]

-- We prove this lemma with strange assumptions to get two lemmas below automatically
theorem isLittleO_iff_nat_mul_le_aux (h‚ÇÄ : (‚àÄ x, 0 ‚â§ ‚Äñf x‚Äñ) ‚à® ‚àÄ x, 0 ‚â§ ‚Äñg x‚Äñ) :
    f =o[l] g ‚Üî ‚àÄ n : ‚Ñï, ‚àÄ·∂† x in l, ‚Üën * ‚Äñf x‚Äñ ‚â§ ‚Äñg x‚Äñ := by
  constructor
  ¬∑ rintro H (_ | n)
    ¬∑ refine (H.def one_pos).mono fun x h‚ÇÄ' => ?_
      rw [Nat.cast_zero, zero_mul]
      refine h‚ÇÄ.elim (fun hf => (hf x).trans ?_) fun hg => hg x
      rwa [one_mul] at h‚ÇÄ'
    ¬∑ have : (0 : ‚Ñù) < n.succ := Nat.cast_pos.2 n.succ_pos
      exact (isBigOWith_inv this).1 (H.def' <| inv_pos.2 this)
  ¬∑ refine fun H => isLittleO_iff.2 fun Œµ Œµ0 => ?_
    rcases exists_nat_gt Œµ‚Åª¬π with ‚ü®n, hn‚ü©
    have hn‚ÇÄ : (0 : ‚Ñù) < n := (inv_pos.2 Œµ0).trans hn
    refine ((isBigOWith_inv hn‚ÇÄ).2 (H n)).bound.mono fun x hfg => ?_
    refine hfg.trans (mul_le_mul_of_nonneg_right (inv_le_of_inv_le Œµ0 hn.le) ?_)
    refine h‚ÇÄ.elim (fun hf => nonneg_of_mul_nonneg_right ((hf x).trans hfg) ?_) fun h => h x
    exact inv_pos.2 hn‚ÇÄ

theorem isLittleO_iff_nat_mul_le : f =o[l] g' ‚Üî ‚àÄ n : ‚Ñï, ‚àÄ·∂† x in l, ‚Üën * ‚Äñf x‚Äñ ‚â§ ‚Äñg' x‚Äñ :=
  isLittleO_iff_nat_mul_le_aux (Or.inr fun _x => norm_nonneg _)

theorem isLittleO_iff_nat_mul_le' : f' =o[l] g ‚Üî ‚àÄ n : ‚Ñï, ‚àÄ·∂† x in l, ‚Üën * ‚Äñf' x‚Äñ ‚â§ ‚Äñg x‚Äñ :=
  isLittleO_iff_nat_mul_le_aux (Or.inl fun _x => norm_nonneg _)

/-! ### Subsingleton -/


@[nontriviality]
theorem isLittleO_of_subsingleton [Subsingleton E'] : f' =o[l] g' :=
  IsLittleO.of_bound fun c hc => by simp [Subsingleton.elim (f' _) 0, mul_nonneg hc.le]

@[nontriviality]
theorem isBigO_of_subsingleton [Subsingleton E'] : f' =O[l] g' :=
  isLittleO_of_subsingleton.isBigO

section congr

variable {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F}

/-! ### Congruence -/


theorem isBigOWith_congr (hc : c‚ÇÅ = c‚ÇÇ) (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ) (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) :
    IsBigOWith c‚ÇÅ l f‚ÇÅ g‚ÇÅ ‚Üî IsBigOWith c‚ÇÇ l f‚ÇÇ g‚ÇÇ := by
  simp only [IsBigOWith_def]
  subst c‚ÇÇ
  apply Filter.eventually_congr
  filter_upwards [hf, hg] with _ e‚ÇÅ e‚ÇÇ
  rw [e‚ÇÅ, e‚ÇÇ]

theorem IsBigOWith.congr' (h : IsBigOWith c‚ÇÅ l f‚ÇÅ g‚ÇÅ) (hc : c‚ÇÅ = c‚ÇÇ) (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ)
    (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) : IsBigOWith c‚ÇÇ l f‚ÇÇ g‚ÇÇ :=
  (isBigOWith_congr hc hf hg).mp h

theorem IsBigOWith.congr (h : IsBigOWith c‚ÇÅ l f‚ÇÅ g‚ÇÅ) (hc : c‚ÇÅ = c‚ÇÇ) (hf : ‚àÄ x, f‚ÇÅ x = f‚ÇÇ x)
    (hg : ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x) : IsBigOWith c‚ÇÇ l f‚ÇÇ g‚ÇÇ :=
  h.congr' hc (univ_mem' hf) (univ_mem' hg)

theorem IsBigOWith.congr_left (h : IsBigOWith c l f‚ÇÅ g) (hf : ‚àÄ x, f‚ÇÅ x = f‚ÇÇ x) :
    IsBigOWith c l f‚ÇÇ g :=
  h.congr rfl hf fun _ => rfl

theorem IsBigOWith.congr_right (h : IsBigOWith c l f g‚ÇÅ) (hg : ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x) :
    IsBigOWith c l f g‚ÇÇ :=
  h.congr rfl (fun _ => rfl) hg

theorem IsBigOWith.congr_const (h : IsBigOWith c‚ÇÅ l f g) (hc : c‚ÇÅ = c‚ÇÇ) : IsBigOWith c‚ÇÇ l f g :=
  h.congr hc (fun _ => rfl) fun _ => rfl

theorem isBigO_congr (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ) (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) : f‚ÇÅ =O[l] g‚ÇÅ ‚Üî f‚ÇÇ =O[l] g‚ÇÇ := by
  simp only [IsBigO_def]
  exact exists_congr fun c => isBigOWith_congr rfl hf hg

theorem IsBigO.congr' (h : f‚ÇÅ =O[l] g‚ÇÅ) (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ) (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) : f‚ÇÇ =O[l] g‚ÇÇ :=
  (isBigO_congr hf hg).mp h

theorem IsBigO.congr (h : f‚ÇÅ =O[l] g‚ÇÅ) (hf : ‚àÄ x, f‚ÇÅ x = f‚ÇÇ x) (hg : ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x) :
    f‚ÇÇ =O[l] g‚ÇÇ :=
  h.congr' (univ_mem' hf) (univ_mem' hg)

theorem IsBigO.congr_left (h : f‚ÇÅ =O[l] g) (hf : ‚àÄ x, f‚ÇÅ x = f‚ÇÇ x) : f‚ÇÇ =O[l] g :=
  h.congr hf fun _ => rfl

theorem IsBigO.congr_right (h : f =O[l] g‚ÇÅ) (hg : ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x) : f =O[l] g‚ÇÇ :=
  h.congr (fun _ => rfl) hg

theorem isLittleO_congr (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ) (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) : f‚ÇÅ =o[l] g‚ÇÅ ‚Üî f‚ÇÇ =o[l] g‚ÇÇ := by
  simp only [IsLittleO_def]
  exact forall‚ÇÇ_congr fun c _hc => isBigOWith_congr (Eq.refl c) hf hg

theorem IsLittleO.congr' (h : f‚ÇÅ =o[l] g‚ÇÅ) (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ) (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) : f‚ÇÇ =o[l] g‚ÇÇ :=
  (isLittleO_congr hf hg).mp h

theorem IsLittleO.congr (h : f‚ÇÅ =o[l] g‚ÇÅ) (hf : ‚àÄ x, f‚ÇÅ x = f‚ÇÇ x) (hg : ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x) :
    f‚ÇÇ =o[l] g‚ÇÇ :=
  h.congr' (univ_mem' hf) (univ_mem' hg)

theorem IsLittleO.congr_left (h : f‚ÇÅ =o[l] g) (hf : ‚àÄ x, f‚ÇÅ x = f‚ÇÇ x) : f‚ÇÇ =o[l] g :=
  h.congr hf fun _ => rfl

theorem IsLittleO.congr_right (h : f =o[l] g‚ÇÅ) (hg : ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x) : f =o[l] g‚ÇÇ :=
  h.congr (fun _ => rfl) hg

@[trans]
theorem _root_.Filter.EventuallyEq.trans_isBigO {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g : Œ± ‚Üí F} (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ)
    (h : f‚ÇÇ =O[l] g) : f‚ÇÅ =O[l] g :=
  h.congr' hf.symm EventuallyEq.rfl

instance transEventuallyEqIsBigO :
    @Trans (Œ± ‚Üí E) (Œ± ‚Üí E) (Œ± ‚Üí F) (¬∑ =·∂†[l] ¬∑) (¬∑ =O[l] ¬∑) (¬∑ =O[l] ¬∑) where
  trans := Filter.EventuallyEq.trans_isBigO

@[trans]
theorem _root_.Filter.EventuallyEq.trans_isLittleO {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g : Œ± ‚Üí F} (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ)
    (h : f‚ÇÇ =o[l] g) : f‚ÇÅ =o[l] g :=
  h.congr' hf.symm EventuallyEq.rfl

instance transEventuallyEqIsLittleO :
    @Trans (Œ± ‚Üí E) (Œ± ‚Üí E) (Œ± ‚Üí F) (¬∑ =·∂†[l] ¬∑) (¬∑ =o[l] ¬∑) (¬∑ =o[l] ¬∑) where
  trans := Filter.EventuallyEq.trans_isLittleO

@[trans]
theorem IsBigO.trans_eventuallyEq {f : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} (h : f =O[l] g‚ÇÅ) (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) :
    f =O[l] g‚ÇÇ :=
  h.congr' EventuallyEq.rfl hg

instance transIsBigOEventuallyEq :
    @Trans (Œ± ‚Üí E) (Œ± ‚Üí F) (Œ± ‚Üí F) (¬∑ =O[l] ¬∑) (¬∑ =·∂†[l] ¬∑) (¬∑ =O[l] ¬∑) where
  trans := IsBigO.trans_eventuallyEq

@[trans]
theorem IsLittleO.trans_eventuallyEq {f : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} (h : f =o[l] g‚ÇÅ)
    (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) : f =o[l] g‚ÇÇ :=
  h.congr' EventuallyEq.rfl hg

instance transIsLittleOEventuallyEq :
    @Trans (Œ± ‚Üí E) (Œ± ‚Üí F) (Œ± ‚Üí F) (¬∑ =o[l] ¬∑) (¬∑ =·∂†[l] ¬∑) (¬∑ =o[l] ¬∑) where
  trans := IsLittleO.trans_eventuallyEq

end congr

/-! ### Filter operations and transitivity -/


theorem IsBigOWith.comp_tendsto (hcfg : IsBigOWith c l f g) {k : Œ≤ ‚Üí Œ±} {l' : Filter Œ≤}
    (hk : Tendsto k l' l) : IsBigOWith c l' (f ‚àò k) (g ‚àò k) :=
  IsBigOWith.of_bound <| hk hcfg.bound

theorem IsBigO.comp_tendsto (hfg : f =O[l] g) {k : Œ≤ ‚Üí Œ±} {l' : Filter Œ≤} (hk : Tendsto k l' l) :
    (f ‚àò k) =O[l'] (g ‚àò k) :=
  isBigO_iff_isBigOWith.2 <| hfg.isBigOWith.imp fun _c h => h.comp_tendsto hk

theorem IsLittleO.comp_tendsto (hfg : f =o[l] g) {k : Œ≤ ‚Üí Œ±} {l' : Filter Œ≤} (hk : Tendsto k l' l) :
    (f ‚àò k) =o[l'] (g ‚àò k) :=
  IsLittleO.of_isBigOWith fun _c cpos => (hfg.forall_isBigOWith cpos).comp_tendsto hk

@[simp]
theorem isBigOWith_map {k : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} :
    IsBigOWith c (map k l) f g ‚Üî IsBigOWith c l (f ‚àò k) (g ‚àò k) := by
  simp only [IsBigOWith_def]
  exact eventually_map

@[simp]
theorem isBigO_map {k : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} : f =O[map k l] g ‚Üî (f ‚àò k) =O[l] (g ‚àò k) := by
  simp only [IsBigO_def, isBigOWith_map]

@[simp]
theorem isLittleO_map {k : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} : f =o[map k l] g ‚Üî (f ‚àò k) =o[l] (g ‚àò k) := by
  simp only [IsLittleO_def, isBigOWith_map]

theorem IsBigOWith.mono (h : IsBigOWith c l' f g) (hl : l ‚â§ l') : IsBigOWith c l f g :=
  IsBigOWith.of_bound <| hl h.bound

theorem IsBigO.mono (h : f =O[l'] g) (hl : l ‚â§ l') : f =O[l] g :=
  isBigO_iff_isBigOWith.2 <| h.isBigOWith.imp fun _c h => h.mono hl

theorem IsLittleO.mono (h : f =o[l'] g) (hl : l ‚â§ l') : f =o[l] g :=
  IsLittleO.of_isBigOWith fun _c cpos => (h.forall_isBigOWith cpos).mono hl

theorem IsBigOWith.trans (hfg : IsBigOWith c l f g) (hgk : IsBigOWith c' l g k) (hc : 0 ‚â§ c) :
    IsBigOWith (c * c') l f k := by
  simp only [IsBigOWith_def] at *
  filter_upwards [hfg, hgk] with x hx hx'
  calc
    ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ := hx
    _ ‚â§ c * (c' * ‚Äñk x‚Äñ) := by gcongr
    _ = c * c' * ‚Äñk x‚Äñ := (mul_assoc _ _ _).symm

@[trans]
theorem IsBigO.trans {f : Œ± ‚Üí E} {g : Œ± ‚Üí F'} {k : Œ± ‚Üí G} (hfg : f =O[l] g) (hgk : g =O[l] k) :
    f =O[l] k :=
  let ‚ü®_c, cnonneg, hc‚ü© := hfg.exists_nonneg
  let ‚ü®_c', hc'‚ü© := hgk.isBigOWith
  (hc.trans hc' cnonneg).isBigO

instance transIsBigOIsBigO :
    @Trans (Œ± ‚Üí E) (Œ± ‚Üí F') (Œ± ‚Üí G) (¬∑ =O[l] ¬∑) (¬∑ =O[l] ¬∑) (¬∑ =O[l] ¬∑) where
  trans := IsBigO.trans

theorem IsLittleO.trans_isBigOWith (hfg : f =o[l] g) (hgk : IsBigOWith c l g k) (hc : 0 < c) :
    f =o[l] k := by
  simp only [IsLittleO_def] at *
  intro c' c'pos
  have : 0 < c' / c := div_pos c'pos hc
  exact ((hfg this).trans hgk this.le).congr_const (div_mul_cancel‚ÇÄ _ hc.ne')

@[trans]
theorem IsLittleO.trans_isBigO {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {k : Œ± ‚Üí G'} (hfg : f =o[l] g)
    (hgk : g =O[l] k) : f =o[l] k :=
  let ‚ü®_c, cpos, hc‚ü© := hgk.exists_pos
  hfg.trans_isBigOWith hc cpos

instance transIsLittleOIsBigO :
    @Trans (Œ± ‚Üí E) (Œ± ‚Üí F) (Œ± ‚Üí G') (¬∑ =o[l] ¬∑) (¬∑ =O[l] ¬∑) (¬∑ =o[l] ¬∑) where
  trans := IsLittleO.trans_isBigO

theorem IsBigOWith.trans_isLittleO (hfg : IsBigOWith c l f g) (hgk : g =o[l] k) (hc : 0 < c) :
    f =o[l] k := by
  simp only [IsLittleO_def] at *
  intro c' c'pos
  have : 0 < c' / c := div_pos c'pos hc
  exact (hfg.trans (hgk this) hc.le).congr_const (mul_div_cancel‚ÇÄ _ hc.ne')

@[trans]
theorem IsBigO.trans_isLittleO {f : Œ± ‚Üí E} {g : Œ± ‚Üí F'} {k : Œ± ‚Üí G} (hfg : f =O[l] g)
    (hgk : g =o[l] k) : f =o[l] k :=
  let ‚ü®_c, cpos, hc‚ü© := hfg.exists_pos
  hc.trans_isLittleO hgk cpos

instance transIsBigOIsLittleO :
    @Trans (Œ± ‚Üí E) (Œ± ‚Üí F') (Œ± ‚Üí G) (¬∑ =O[l] ¬∑) (¬∑ =o[l] ¬∑) (¬∑ =o[l] ¬∑) where
  trans := IsBigO.trans_isLittleO

@[trans]
theorem IsLittleO.trans {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {k : Œ± ‚Üí G} (hfg : f =o[l] g) (hgk : g =o[l] k) :
    f =o[l] k :=
  hfg.trans_isBigOWith hgk.isBigOWith one_pos

instance transIsLittleOIsLittleO :
    @Trans (Œ± ‚Üí E) (Œ± ‚Üí F) (Œ± ‚Üí G) (¬∑ =o[l] ¬∑) (¬∑ =o[l] ¬∑) (¬∑ =o[l] ¬∑) where
  trans := IsLittleO.trans

theorem _root_.Filter.Eventually.trans_isBigO {f : Œ± ‚Üí E} {g : Œ± ‚Üí F'} {k : Œ± ‚Üí G}
    (hfg : ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ ‚Äñg x‚Äñ) (hgk : g =O[l] k) : f =O[l] k :=
  (IsBigO.of_bound' hfg).trans hgk

theorem _root_.Filter.Eventually.isBigO {f : Œ± ‚Üí E} {g : Œ± ‚Üí ‚Ñù} {l : Filter Œ±}
    (hfg : ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ g x) : f =O[l] g :=
  IsBigO.of_bound' <| hfg.mono fun _x hx => hx.trans <| Real.le_norm_self _

section

variable (l)

theorem isBigOWith_of_le' (hfg : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ) : IsBigOWith c l f g :=
  IsBigOWith.of_bound <| univ_mem' hfg

theorem isBigOWith_of_le (hfg : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ ‚Äñg x‚Äñ) : IsBigOWith 1 l f g :=
  isBigOWith_of_le' l fun x => by
    rw [one_mul]
    exact hfg x

theorem isBigO_of_le' (hfg : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ) : f =O[l] g :=
  (isBigOWith_of_le' l hfg).isBigO

theorem isBigO_of_le (hfg : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ ‚Äñg x‚Äñ) : f =O[l] g :=
  (isBigOWith_of_le l hfg).isBigO

end

theorem isBigOWith_refl (f : Œ± ‚Üí E) (l : Filter Œ±) : IsBigOWith 1 l f f :=
  isBigOWith_of_le l fun _ => le_rfl

theorem isBigO_refl (f : Œ± ‚Üí E) (l : Filter Œ±) : f =O[l] f :=
  (isBigOWith_refl f l).isBigO

theorem _root_.Filter.EventuallyEq.isBigO {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ) : f‚ÇÅ =O[l] f‚ÇÇ :=
  hf.trans_isBigO (isBigO_refl _ _)

theorem IsBigOWith.trans_le (hfg : IsBigOWith c l f g) (hgk : ‚àÄ x, ‚Äñg x‚Äñ ‚â§ ‚Äñk x‚Äñ) (hc : 0 ‚â§ c) :
    IsBigOWith c l f k :=
  (hfg.trans (isBigOWith_of_le l hgk) hc).congr_const <| mul_one c

theorem IsBigO.trans_le (hfg : f =O[l] g') (hgk : ‚àÄ x, ‚Äñg' x‚Äñ ‚â§ ‚Äñk x‚Äñ) : f =O[l] k :=
  hfg.trans (isBigO_of_le l hgk)

theorem IsLittleO.trans_le (hfg : f =o[l] g) (hgk : ‚àÄ x, ‚Äñg x‚Äñ ‚â§ ‚Äñk x‚Äñ) : f =o[l] k :=
  hfg.trans_isBigOWith (isBigOWith_of_le _ hgk) zero_lt_one

theorem isLittleO_irrefl' (h : ‚àÉ·∂† x in l, ‚Äñf' x‚Äñ ‚â† 0) : ¬¨f' =o[l] f' := by
  intro ho
  rcases ((ho.bound one_half_pos).and_frequently h).exists with ‚ü®x, hle, hne‚ü©
  rw [one_div, ‚Üê div_eq_inv_mul] at hle
  exact (half_lt_self (lt_of_le_of_ne (norm_nonneg _) hne.symm)).not_le hle

theorem isLittleO_irrefl (h : ‚àÉ·∂† x in l, f'' x ‚â† 0) : ¬¨f'' =o[l] f'' :=
  isLittleO_irrefl' <| h.mono fun _x => norm_ne_zero_iff.mpr

theorem IsBigO.not_isLittleO (h : f'' =O[l] g') (hf : ‚àÉ·∂† x in l, f'' x ‚â† 0) :
    ¬¨g' =o[l] f'' := fun h' =>
  isLittleO_irrefl hf (h.trans_isLittleO h')

theorem IsLittleO.not_isBigO (h : f'' =o[l] g') (hf : ‚àÉ·∂† x in l, f'' x ‚â† 0) :
    ¬¨g' =O[l] f'' := fun h' =>
  isLittleO_irrefl hf (h.trans_isBigO h')

section Bot

variable (c f g)

@[simp]
theorem isBigOWith_bot : IsBigOWith c ‚ä• f g :=
  IsBigOWith.of_bound <| trivial

@[simp]
theorem isBigO_bot : f =O[‚ä•] g :=
  (isBigOWith_bot 1 f g).isBigO

@[simp]
theorem isLittleO_bot : f =o[‚ä•] g :=
  IsLittleO.of_isBigOWith fun c _ => isBigOWith_bot c f g

end Bot

@[simp]
theorem isBigOWith_pure {x} : IsBigOWith c (pure x) f g ‚Üî ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ :=
  isBigOWith_iff

theorem IsBigOWith.sup (h : IsBigOWith c l f g) (h' : IsBigOWith c l' f g) :
    IsBigOWith c (l ‚äî l') f g :=
  IsBigOWith.of_bound <| mem_sup.2 ‚ü®h.bound, h'.bound‚ü©

theorem IsBigOWith.sup' (h : IsBigOWith c l f g') (h' : IsBigOWith c' l' f g') :
    IsBigOWith (max c c') (l ‚äî l') f g' :=
  IsBigOWith.of_bound <|
    mem_sup.2 ‚ü®(h.weaken <| le_max_left c c').bound, (h'.weaken <| le_max_right c c').bound‚ü©

theorem IsBigO.sup (h : f =O[l] g') (h' : f =O[l'] g') : f =O[l ‚äî l'] g' :=
  let ‚ü®_c, hc‚ü© := h.isBigOWith
  let ‚ü®_c', hc'‚ü© := h'.isBigOWith
  (hc.sup' hc').isBigO

theorem IsLittleO.sup (h : f =o[l] g) (h' : f =o[l'] g) : f =o[l ‚äî l'] g :=
  IsLittleO.of_isBigOWith fun _c cpos => (h.forall_isBigOWith cpos).sup (h'.forall_isBigOWith cpos)

@[simp]
theorem isBigO_sup : f =O[l ‚äî l'] g' ‚Üî f =O[l] g' ‚àß f =O[l'] g' :=
  ‚ü®fun h => ‚ü®h.mono le_sup_left, h.mono le_sup_right‚ü©, fun h => h.1.sup h.2‚ü©

@[simp]
theorem isLittleO_sup : f =o[l ‚äî l'] g ‚Üî f =o[l] g ‚àß f =o[l'] g :=
  ‚ü®fun h => ‚ü®h.mono le_sup_left, h.mono le_sup_right‚ü©, fun h => h.1.sup h.2‚ü©

theorem isBigOWith_insert [TopologicalSpace Œ±] {x : Œ±} {s : Set Œ±} {C : ‚Ñù} {g : Œ± ‚Üí E} {g' : Œ± ‚Üí F}
    (h : ‚Äñg x‚Äñ ‚â§ C * ‚Äñg' x‚Äñ) : IsBigOWith C (ùìù[insert x s] x) g g' ‚Üî
    IsBigOWith C (ùìù[s] x) g g' := by
  simp_rw [IsBigOWith_def, nhdsWithin_insert, eventually_sup, eventually_pure, h, true_and_iff]

protected theorem IsBigOWith.insert [TopologicalSpace Œ±] {x : Œ±} {s : Set Œ±} {C : ‚Ñù} {g : Œ± ‚Üí E}
    {g' : Œ± ‚Üí F} (h1 : IsBigOWith C (ùìù[s] x) g g') (h2 : ‚Äñg x‚Äñ ‚â§ C * ‚Äñg' x‚Äñ) :
    IsBigOWith C (ùìù[insert x s] x) g g' :=
  (isBigOWith_insert h2).mpr h1

theorem isLittleO_insert [TopologicalSpace Œ±] {x : Œ±} {s : Set Œ±} {g : Œ± ‚Üí E'} {g' : Œ± ‚Üí F'}
    (h : g x = 0) : g =o[ùìù[insert x s] x] g' ‚Üî g =o[ùìù[s] x] g' := by
  simp_rw [IsLittleO_def]
  refine forall_congr' fun c => forall_congr' fun hc => ?_
  rw [isBigOWith_insert]
  rw [h, norm_zero]
  exact mul_nonneg hc.le (norm_nonneg _)

protected theorem IsLittleO.insert [TopologicalSpace Œ±] {x : Œ±} {s : Set Œ±} {g : Œ± ‚Üí E'}
    {g' : Œ± ‚Üí F'} (h1 : g =o[ùìù[s] x] g') (h2 : g x = 0) : g =o[ùìù[insert x s] x] g' :=
  (isLittleO_insert h2).mpr h1

/-! ### Simplification : norm, abs -/


section NormAbs

variable {u v : Œ± ‚Üí ‚Ñù}

@[simp]
theorem isBigOWith_norm_right : (IsBigOWith c l f fun x => ‚Äñg' x‚Äñ) ‚Üî IsBigOWith c l f g' := by
  simp only [IsBigOWith_def, norm_norm]

@[simp]
theorem isBigOWith_abs_right : (IsBigOWith c l f fun x => |u x|) ‚Üî IsBigOWith c l f u :=
  @isBigOWith_norm_right _ _ _ _ _ _ f u l

alias ‚ü®IsBigOWith.of_norm_right, IsBigOWith.norm_right‚ü© := isBigOWith_norm_right

alias ‚ü®IsBigOWith.of_abs_right, IsBigOWith.abs_right‚ü© := isBigOWith_abs_right

@[simp]
theorem isBigO_norm_right : (f =O[l] fun x => ‚Äñg' x‚Äñ) ‚Üî f =O[l] g' := by
  simp only [IsBigO_def]
  exact exists_congr fun _ => isBigOWith_norm_right

@[simp]
theorem isBigO_abs_right : (f =O[l] fun x => |u x|) ‚Üî f =O[l] u :=
  @isBigO_norm_right _ _ ‚Ñù _ _ _ _ _

alias ‚ü®IsBigO.of_norm_right, IsBigO.norm_right‚ü© := isBigO_norm_right

alias ‚ü®IsBigO.of_abs_right, IsBigO.abs_right‚ü© := isBigO_abs_right

@[simp]
theorem isLittleO_norm_right : (f =o[l] fun x => ‚Äñg' x‚Äñ) ‚Üî f =o[l] g' := by
  simp only [IsLittleO_def]
  exact forall‚ÇÇ_congr fun _ _ => isBigOWith_norm_right

@[simp]
theorem isLittleO_abs_right : (f =o[l] fun x => |u x|) ‚Üî f =o[l] u :=
  @isLittleO_norm_right _ _ ‚Ñù _ _ _ _ _

alias ‚ü®IsLittleO.of_norm_right, IsLittleO.norm_right‚ü© := isLittleO_norm_right

alias ‚ü®IsLittleO.of_abs_right, IsLittleO.abs_right‚ü© := isLittleO_abs_right

@[simp]
theorem isBigOWith_norm_left : IsBigOWith c l (fun x => ‚Äñf' x‚Äñ) g ‚Üî IsBigOWith c l f' g := by
  simp only [IsBigOWith_def, norm_norm]

@[simp]
theorem isBigOWith_abs_left : IsBigOWith c l (fun x => |u x|) g ‚Üî IsBigOWith c l u g :=
  @isBigOWith_norm_left _ _ _ _ _ _ g u l

alias ‚ü®IsBigOWith.of_norm_left, IsBigOWith.norm_left‚ü© := isBigOWith_norm_left

alias ‚ü®IsBigOWith.of_abs_left, IsBigOWith.abs_left‚ü© := isBigOWith_abs_left

@[simp]
theorem isBigO_norm_left : (fun x => ‚Äñf' x‚Äñ) =O[l] g ‚Üî f' =O[l] g := by
  simp only [IsBigO_def]
  exact exists_congr fun _ => isBigOWith_norm_left

@[simp]
theorem isBigO_abs_left : (fun x => |u x|) =O[l] g ‚Üî u =O[l] g :=
  @isBigO_norm_left _ _ _ _ _ g u l

alias ‚ü®IsBigO.of_norm_left, IsBigO.norm_left‚ü© := isBigO_norm_left

alias ‚ü®IsBigO.of_abs_left, IsBigO.abs_left‚ü© := isBigO_abs_left

@[simp]
theorem isLittleO_norm_left : (fun x => ‚Äñf' x‚Äñ) =o[l] g ‚Üî f' =o[l] g := by
  simp only [IsLittleO_def]
  exact forall‚ÇÇ_congr fun _ _ => isBigOWith_norm_left

@[simp]
theorem isLittleO_abs_left : (fun x => |u x|) =o[l] g ‚Üî u =o[l] g :=
  @isLittleO_norm_left _ _ _ _ _ g u l

alias ‚ü®IsLittleO.of_norm_left, IsLittleO.norm_left‚ü© := isLittleO_norm_left

alias ‚ü®IsLittleO.of_abs_left, IsLittleO.abs_left‚ü© := isLittleO_abs_left

theorem isBigOWith_norm_norm :
    (IsBigOWith c l (fun x => ‚Äñf' x‚Äñ) fun x => ‚Äñg' x‚Äñ) ‚Üî IsBigOWith c l f' g' :=
  isBigOWith_norm_left.trans isBigOWith_norm_right

theorem isBigOWith_abs_abs :
    (IsBigOWith c l (fun x => |u x|) fun x => |v x|) ‚Üî IsBigOWith c l u v :=
  isBigOWith_abs_left.trans isBigOWith_abs_right

alias ‚ü®IsBigOWith.of_norm_norm, IsBigOWith.norm_norm‚ü© := isBigOWith_norm_norm

alias ‚ü®IsBigOWith.of_abs_abs, IsBigOWith.abs_abs‚ü© := isBigOWith_abs_abs

theorem isBigO_norm_norm : ((fun x => ‚Äñf' x‚Äñ) =O[l] fun x => ‚Äñg' x‚Äñ) ‚Üî f' =O[l] g' :=
  isBigO_norm_left.trans isBigO_norm_right

theorem isBigO_abs_abs : ((fun x => |u x|) =O[l] fun x => |v x|) ‚Üî u =O[l] v :=
  isBigO_abs_left.trans isBigO_abs_right

alias ‚ü®IsBigO.of_norm_norm, IsBigO.norm_norm‚ü© := isBigO_norm_norm

alias ‚ü®IsBigO.of_abs_abs, IsBigO.abs_abs‚ü© := isBigO_abs_abs

theorem isLittleO_norm_norm : ((fun x => ‚Äñf' x‚Äñ) =o[l] fun x => ‚Äñg' x‚Äñ) ‚Üî f' =o[l] g' :=
  isLittleO_norm_left.trans isLittleO_norm_right

theorem isLittleO_abs_abs : ((fun x => |u x|) =o[l] fun x => |v x|) ‚Üî u =o[l] v :=
  isLittleO_abs_left.trans isLittleO_abs_right

alias ‚ü®IsLittleO.of_norm_norm, IsLittleO.norm_norm‚ü© := isLittleO_norm_norm

alias ‚ü®IsLittleO.of_abs_abs, IsLittleO.abs_abs‚ü© := isLittleO_abs_abs

end NormAbs

/-! ### Simplification: negate -/


@[simp]
theorem isBigOWith_neg_right : (IsBigOWith c l f fun x => -g' x) ‚Üî IsBigOWith c l f g' := by
  simp only [IsBigOWith_def, norm_neg]

alias ‚ü®IsBigOWith.of_neg_right, IsBigOWith.neg_right‚ü© := isBigOWith_neg_right

@[simp]
theorem isBigO_neg_right : (f =O[l] fun x => -g' x) ‚Üî f =O[l] g' := by
  simp only [IsBigO_def]
  exact exists_congr fun _ => isBigOWith_neg_right

alias ‚ü®IsBigO.of_neg_right, IsBigO.neg_right‚ü© := isBigO_neg_right

@[simp]
theorem isLittleO_neg_right : (f =o[l] fun x => -g' x) ‚Üî f =o[l] g' := by
  simp only [IsLittleO_def]
  exact forall‚ÇÇ_congr fun _ _ => isBigOWith_neg_right

alias ‚ü®IsLittleO.of_neg_right, IsLittleO.neg_right‚ü© := isLittleO_neg_right

@[simp]
theorem isBigOWith_neg_left : IsBigOWith c l (fun x => -f' x) g ‚Üî IsBigOWith c l f' g := by
  simp only [IsBigOWith_def, norm_neg]

alias ‚ü®IsBigOWith.of_neg_left, IsBigOWith.neg_left‚ü© := isBigOWith_neg_left

@[simp]
theorem isBigO_neg_left : (fun x => -f' x) =O[l] g ‚Üî f' =O[l] g := by
  simp only [IsBigO_def]
  exact exists_congr fun _ => isBigOWith_neg_left

alias ‚ü®IsBigO.of_neg_left, IsBigO.neg_left‚ü© := isBigO_neg_left

@[simp]
theorem isLittleO_neg_left : (fun x => -f' x) =o[l] g ‚Üî f' =o[l] g := by
  simp only [IsLittleO_def]
  exact forall‚ÇÇ_congr fun _ _ => isBigOWith_neg_left

alias ‚ü®IsLittleO.of_neg_left, IsLittleO.neg_left‚ü© := isLittleO_neg_left

/-! ### Product of functions (right) -/


theorem isBigOWith_fst_prod : IsBigOWith 1 l f' fun x => (f' x, g' x) :=
  isBigOWith_of_le l fun _x => le_max_left _ _

theorem isBigOWith_snd_prod : IsBigOWith 1 l g' fun x => (f' x, g' x) :=
  isBigOWith_of_le l fun _x => le_max_right _ _

theorem isBigO_fst_prod : f' =O[l] fun x => (f' x, g' x) :=
  isBigOWith_fst_prod.isBigO

theorem isBigO_snd_prod : g' =O[l] fun x => (f' x, g' x) :=
  isBigOWith_snd_prod.isBigO

theorem isBigO_fst_prod' {f' : Œ± ‚Üí E' √ó F'} : (fun x => (f' x).1) =O[l] f' := by
  simpa [IsBigO_def, IsBigOWith_def] using isBigO_fst_prod (E' := E') (F' := F')

theorem isBigO_snd_prod' {f' : Œ± ‚Üí E' √ó F'} : (fun x => (f' x).2) =O[l] f' := by
  simpa [IsBigO_def, IsBigOWith_def] using isBigO_snd_prod (E' := E') (F' := F')

section

variable (f' k')

theorem IsBigOWith.prod_rightl (h : IsBigOWith c l f g') (hc : 0 ‚â§ c) :
    IsBigOWith c l f fun x => (g' x, k' x) :=
  (h.trans isBigOWith_fst_prod hc).congr_const (mul_one c)

theorem IsBigO.prod_rightl (h : f =O[l] g') : f =O[l] fun x => (g' x, k' x) :=
  let ‚ü®_c, cnonneg, hc‚ü© := h.exists_nonneg
  (hc.prod_rightl k' cnonneg).isBigO

theorem IsLittleO.prod_rightl (h : f =o[l] g') : f =o[l] fun x => (g' x, k' x) :=
  IsLittleO.of_isBigOWith fun _c cpos => (h.forall_isBigOWith cpos).prod_rightl k' cpos.le

theorem IsBigOWith.prod_rightr (h : IsBigOWith c l f g') (hc : 0 ‚â§ c) :
    IsBigOWith c l f fun x => (f' x, g' x) :=
  (h.trans isBigOWith_snd_prod hc).congr_const (mul_one c)

theorem IsBigO.prod_rightr (h : f =O[l] g') : f =O[l] fun x => (f' x, g' x) :=
  let ‚ü®_c, cnonneg, hc‚ü© := h.exists_nonneg
  (hc.prod_rightr f' cnonneg).isBigO

theorem IsLittleO.prod_rightr (h : f =o[l] g') : f =o[l] fun x => (f' x, g' x) :=
  IsLittleO.of_isBigOWith fun _c cpos => (h.forall_isBigOWith cpos).prod_rightr f' cpos.le

end

section

variable {f : Œ± √ó Œ≤ ‚Üí E} {g : Œ± √ó Œ≤ ‚Üí F} {l' : Filter Œ≤}

protected theorem IsBigO.fiberwise_right :
    f =O[l √óÀ¢ l'] g ‚Üí ‚àÄ·∂† a in l, (f ‚ü®a, ¬∑‚ü©) =O[l'] (g ‚ü®a, ¬∑‚ü©) := by
  simp only [isBigO_iff, eventually_iff, mem_prod_iff]
  rintro ‚ü®c, t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, ht‚ü©
  exact mem_of_superset ht‚ÇÅ fun _ ha ‚Ü¶ ‚ü®c, mem_of_superset ht‚ÇÇ fun _ hb ‚Ü¶ ht ‚ü®ha, hb‚ü©‚ü©

protected theorem IsBigO.fiberwise_left :
    f =O[l √óÀ¢ l'] g ‚Üí ‚àÄ·∂† b in l', (f ‚ü®¬∑, b‚ü©) =O[l] (g ‚ü®¬∑, b‚ü©) := by
  simp only [isBigO_iff, eventually_iff, mem_prod_iff]
  rintro ‚ü®c, t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, ht‚ü©
  exact mem_of_superset ht‚ÇÇ fun _ hb ‚Ü¶ ‚ü®c, mem_of_superset ht‚ÇÅ fun _ ha ‚Ü¶ ht ‚ü®ha, hb‚ü©‚ü©

end

section

variable (l' : Filter Œ≤)

protected theorem IsBigO.comp_fst : f =O[l] g ‚Üí (f ‚àò Prod.fst) =O[l √óÀ¢ l'] (g ‚àò Prod.fst) := by
  simp only [isBigO_iff, eventually_prod_iff]
  exact fun ‚ü®c, hc‚ü© ‚Ü¶ ‚ü®c, _, hc, fun _ ‚Ü¶ True, eventually_true l', fun {_} h {_} _ ‚Ü¶ h‚ü©

protected theorem IsBigO.comp_snd : f =O[l] g ‚Üí (f ‚àò Prod.snd) =O[l' √óÀ¢ l] (g ‚àò Prod.snd) := by
  simp only [isBigO_iff, eventually_prod_iff]
  exact fun ‚ü®c, hc‚ü© ‚Ü¶ ‚ü®c, fun _ ‚Ü¶ True, eventually_true l', _, hc, fun _ ‚Ü¶ id‚ü©

protected theorem IsLittleO.comp_fst : f =o[l] g ‚Üí (f ‚àò Prod.fst) =o[l √óÀ¢ l'] (g ‚àò Prod.fst) := by
  simp only [isLittleO_iff, eventually_prod_iff]
  exact fun h _ hc ‚Ü¶ ‚ü®_, h hc, fun _ ‚Ü¶ True, eventually_true l', fun {_} h {_} _ ‚Ü¶ h‚ü©

protected theorem IsLittleO.comp_snd : f =o[l] g ‚Üí (f ‚àò Prod.snd) =o[l' √óÀ¢ l] (g ‚àò Prod.snd) := by
  simp only [isLittleO_iff, eventually_prod_iff]
  exact fun h _ hc ‚Ü¶ ‚ü®fun _ ‚Ü¶ True, eventually_true l', _, h hc, fun _ ‚Ü¶ id‚ü©

end

theorem IsBigOWith.prod_left_same (hf : IsBigOWith c l f' k') (hg : IsBigOWith c l g' k') :
    IsBigOWith c l (fun x => (f' x, g' x)) k' := by
  rw [isBigOWith_iff] at *; filter_upwards [hf, hg] with x using max_le

theorem IsBigOWith.prod_left (hf : IsBigOWith c l f' k') (hg : IsBigOWith c' l g' k') :
    IsBigOWith (max c c') l (fun x => (f' x, g' x)) k' :=
  (hf.weaken <| le_max_left c c').prod_left_same (hg.weaken <| le_max_right c c')

theorem IsBigOWith.prod_left_fst (h : IsBigOWith c l (fun x => (f' x, g' x)) k') :
    IsBigOWith c l f' k' :=
  (isBigOWith_fst_prod.trans h zero_le_one).congr_const <| one_mul c

theorem IsBigOWith.prod_left_snd (h : IsBigOWith c l (fun x => (f' x, g' x)) k') :
    IsBigOWith c l g' k' :=
  (isBigOWith_snd_prod.trans h zero_le_one).congr_const <| one_mul c

theorem isBigOWith_prod_left :
    IsBigOWith c l (fun x => (f' x, g' x)) k' ‚Üî IsBigOWith c l f' k' ‚àß IsBigOWith c l g' k' :=
  ‚ü®fun h => ‚ü®h.prod_left_fst, h.prod_left_snd‚ü©, fun h => h.1.prod_left_same h.2‚ü©

theorem IsBigO.prod_left (hf : f' =O[l] k') (hg : g' =O[l] k') : (fun x => (f' x, g' x)) =O[l] k' :=
  let ‚ü®_c, hf‚ü© := hf.isBigOWith
  let ‚ü®_c', hg‚ü© := hg.isBigOWith
  (hf.prod_left hg).isBigO

theorem IsBigO.prod_left_fst : (fun x => (f' x, g' x)) =O[l] k' ‚Üí f' =O[l] k' :=
  IsBigO.trans isBigO_fst_prod

theorem IsBigO.prod_left_snd : (fun x => (f' x, g' x)) =O[l] k' ‚Üí g' =O[l] k' :=
  IsBigO.trans isBigO_snd_prod

@[simp]
theorem isBigO_prod_left : (fun x => (f' x, g' x)) =O[l] k' ‚Üî f' =O[l] k' ‚àß g' =O[l] k' :=
  ‚ü®fun h => ‚ü®h.prod_left_fst, h.prod_left_snd‚ü©, fun h => h.1.prod_left h.2‚ü©

theorem IsLittleO.prod_left (hf : f' =o[l] k') (hg : g' =o[l] k') :
    (fun x => (f' x, g' x)) =o[l] k' :=
  IsLittleO.of_isBigOWith fun _c hc =>
    (hf.forall_isBigOWith hc).prod_left_same (hg.forall_isBigOWith hc)

theorem IsLittleO.prod_left_fst : (fun x => (f' x, g' x)) =o[l] k' ‚Üí f' =o[l] k' :=
  IsBigO.trans_isLittleO isBigO_fst_prod

theorem IsLittleO.prod_left_snd : (fun x => (f' x, g' x)) =o[l] k' ‚Üí g' =o[l] k' :=
  IsBigO.trans_isLittleO isBigO_snd_prod

@[simp]
theorem isLittleO_prod_left : (fun x => (f' x, g' x)) =o[l] k' ‚Üî f' =o[l] k' ‚àß g' =o[l] k' :=
  ‚ü®fun h => ‚ü®h.prod_left_fst, h.prod_left_snd‚ü©, fun h => h.1.prod_left h.2‚ü©

theorem IsBigOWith.eq_zero_imp (h : IsBigOWith c l f'' g'') : ‚àÄ·∂† x in l, g'' x = 0 ‚Üí f'' x = 0 :=
  Eventually.mono h.bound fun x hx hg => norm_le_zero_iff.1 <| by simpa [hg] using hx

theorem IsBigO.eq_zero_imp (h : f'' =O[l] g'') : ‚àÄ·∂† x in l, g'' x = 0 ‚Üí f'' x = 0 :=
  let ‚ü®_C, hC‚ü© := h.isBigOWith
  hC.eq_zero_imp

/-! ### Addition and subtraction -/


section add_sub

variable {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F'}

theorem IsBigOWith.add (h‚ÇÅ : IsBigOWith c‚ÇÅ l f‚ÇÅ g) (h‚ÇÇ : IsBigOWith c‚ÇÇ l f‚ÇÇ g) :
    IsBigOWith (c‚ÇÅ + c‚ÇÇ) l (fun x => f‚ÇÅ x + f‚ÇÇ x) g := by
  rw [IsBigOWith_def] at *
  filter_upwards [h‚ÇÅ, h‚ÇÇ] with x hx‚ÇÅ hx‚ÇÇ using
    calc
      ‚Äñf‚ÇÅ x + f‚ÇÇ x‚Äñ ‚â§ c‚ÇÅ * ‚Äñg x‚Äñ + c‚ÇÇ * ‚Äñg x‚Äñ := norm_add_le_of_le hx‚ÇÅ hx‚ÇÇ
      _ = (c‚ÇÅ + c‚ÇÇ) * ‚Äñg x‚Äñ := (add_mul _ _ _).symm

theorem IsBigO.add (h‚ÇÅ : f‚ÇÅ =O[l] g) (h‚ÇÇ : f‚ÇÇ =O[l] g) : (fun x => f‚ÇÅ x + f‚ÇÇ x) =O[l] g :=
  let ‚ü®_c‚ÇÅ, hc‚ÇÅ‚ü© := h‚ÇÅ.isBigOWith
  let ‚ü®_c‚ÇÇ, hc‚ÇÇ‚ü© := h‚ÇÇ.isBigOWith
  (hc‚ÇÅ.add hc‚ÇÇ).isBigO

theorem IsLittleO.add (h‚ÇÅ : f‚ÇÅ =o[l] g) (h‚ÇÇ : f‚ÇÇ =o[l] g) : (fun x => f‚ÇÅ x + f‚ÇÇ x) =o[l] g :=
  IsLittleO.of_isBigOWith fun c cpos =>
    ((h‚ÇÅ.forall_isBigOWith <| half_pos cpos).add (h‚ÇÇ.forall_isBigOWith <|
      half_pos cpos)).congr_const (add_halves c)

theorem IsLittleO.add_add (h‚ÇÅ : f‚ÇÅ =o[l] g‚ÇÅ) (h‚ÇÇ : f‚ÇÇ =o[l] g‚ÇÇ) :
    (fun x => f‚ÇÅ x + f‚ÇÇ x) =o[l] fun x => ‚Äñg‚ÇÅ x‚Äñ + ‚Äñg‚ÇÇ x‚Äñ := by
  refine (h‚ÇÅ.trans_le fun x => ?_).add (h‚ÇÇ.trans_le ?_) <;> simp [abs_of_nonneg, add_nonneg]

theorem IsBigO.add_isLittleO (h‚ÇÅ : f‚ÇÅ =O[l] g) (h‚ÇÇ : f‚ÇÇ =o[l] g) : (fun x => f‚ÇÅ x + f‚ÇÇ x) =O[l] g :=
  h‚ÇÅ.add h‚ÇÇ.isBigO

theorem IsLittleO.add_isBigO (h‚ÇÅ : f‚ÇÅ =o[l] g) (h‚ÇÇ : f‚ÇÇ =O[l] g) : (fun x => f‚ÇÅ x + f‚ÇÇ x) =O[l] g :=
  h‚ÇÅ.isBigO.add h‚ÇÇ

theorem IsBigOWith.add_isLittleO (h‚ÇÅ : IsBigOWith c‚ÇÅ l f‚ÇÅ g) (h‚ÇÇ : f‚ÇÇ =o[l] g) (hc : c‚ÇÅ < c‚ÇÇ) :
    IsBigOWith c‚ÇÇ l (fun x => f‚ÇÅ x + f‚ÇÇ x) g :=
  (h‚ÇÅ.add (h‚ÇÇ.forall_isBigOWith (sub_pos.2 hc))).congr_const (add_sub_cancel _ _)

theorem IsLittleO.add_isBigOWith (h‚ÇÅ : f‚ÇÅ =o[l] g) (h‚ÇÇ : IsBigOWith c‚ÇÅ l f‚ÇÇ g) (hc : c‚ÇÅ < c‚ÇÇ) :
    IsBigOWith c‚ÇÇ l (fun x => f‚ÇÅ x + f‚ÇÇ x) g :=
  (h‚ÇÇ.add_isLittleO h‚ÇÅ hc).congr_left fun _ => add_comm _ _

theorem IsBigOWith.sub (h‚ÇÅ : IsBigOWith c‚ÇÅ l f‚ÇÅ g) (h‚ÇÇ : IsBigOWith c‚ÇÇ l f‚ÇÇ g) :
    IsBigOWith (c‚ÇÅ + c‚ÇÇ) l (fun x => f‚ÇÅ x - f‚ÇÇ x) g := by
  simpa only [sub_eq_add_neg] using h‚ÇÅ.add h‚ÇÇ.neg_left

theorem IsBigOWith.sub_isLittleO (h‚ÇÅ : IsBigOWith c‚ÇÅ l f‚ÇÅ g) (h‚ÇÇ : f‚ÇÇ =o[l] g) (hc : c‚ÇÅ < c‚ÇÇ) :
    IsBigOWith c‚ÇÇ l (fun x => f‚ÇÅ x - f‚ÇÇ x) g := by
  simpa only [sub_eq_add_neg] using h‚ÇÅ.add_isLittleO h‚ÇÇ.neg_left hc

theorem IsBigO.sub (h‚ÇÅ : f‚ÇÅ =O[l] g) (h‚ÇÇ : f‚ÇÇ =O[l] g) : (fun x => f‚ÇÅ x - f‚ÇÇ x) =O[l] g := by
  simpa only [sub_eq_add_neg] using h‚ÇÅ.add h‚ÇÇ.neg_left

theorem IsLittleO.sub (h‚ÇÅ : f‚ÇÅ =o[l] g) (h‚ÇÇ : f‚ÇÇ =o[l] g) : (fun x => f‚ÇÅ x - f‚ÇÇ x) =o[l] g := by
  simpa only [sub_eq_add_neg] using h‚ÇÅ.add h‚ÇÇ.neg_left

end add_sub

/-!
### Lemmas about `IsBigO (f‚ÇÅ - f‚ÇÇ) g l` / `IsLittleO (f‚ÇÅ - f‚ÇÇ) g l` treated as a binary relation
-/


section IsBigOOAsRel

variable {f‚ÇÅ f‚ÇÇ f‚ÇÉ : Œ± ‚Üí E'}

theorem IsBigOWith.symm (h : IsBigOWith c l (fun x => f‚ÇÅ x - f‚ÇÇ x) g) :
    IsBigOWith c l (fun x => f‚ÇÇ x - f‚ÇÅ x) g :=
  h.neg_left.congr_left fun _x => neg_sub _ _

theorem isBigOWith_comm :
    IsBigOWith c l (fun x => f‚ÇÅ x - f‚ÇÇ x) g ‚Üî IsBigOWith c l (fun x => f‚ÇÇ x - f‚ÇÅ x) g :=
  ‚ü®IsBigOWith.symm, IsBigOWith.symm‚ü©

theorem IsBigO.symm (h : (fun x => f‚ÇÅ x - f‚ÇÇ x) =O[l] g) : (fun x => f‚ÇÇ x - f‚ÇÅ x) =O[l] g :=
  h.neg_left.congr_left fun _x => neg_sub _ _

theorem isBigO_comm : (fun x => f‚ÇÅ x - f‚ÇÇ x) =O[l] g ‚Üî (fun x => f‚ÇÇ x - f‚ÇÅ x) =O[l] g :=
  ‚ü®IsBigO.symm, IsBigO.symm‚ü©

theorem IsLittleO.symm (h : (fun x => f‚ÇÅ x - f‚ÇÇ x) =o[l] g) : (fun x => f‚ÇÇ x - f‚ÇÅ x) =o[l] g := by
  simpa only [neg_sub] using h.neg_left

theorem isLittleO_comm : (fun x => f‚ÇÅ x - f‚ÇÇ x) =o[l] g ‚Üî (fun x => f‚ÇÇ x - f‚ÇÅ x) =o[l] g :=
  ‚ü®IsLittleO.symm, IsLittleO.symm‚ü©

theorem IsBigOWith.triangle (h‚ÇÅ : IsBigOWith c l (fun x => f‚ÇÅ x - f‚ÇÇ x) g)
    (h‚ÇÇ : IsBigOWith c' l (fun x => f‚ÇÇ x - f‚ÇÉ x) g) :
    IsBigOWith (c + c') l (fun x => f‚ÇÅ x - f‚ÇÉ x) g :=
  (h‚ÇÅ.add h‚ÇÇ).congr_left fun _x => sub_add_sub_cancel _ _ _

theorem IsBigO.triangle (h‚ÇÅ : (fun x => f‚ÇÅ x - f‚ÇÇ x) =O[l] g)
    (h‚ÇÇ : (fun x => f‚ÇÇ x - f‚ÇÉ x) =O[l] g) : (fun x => f‚ÇÅ x - f‚ÇÉ x) =O[l] g :=
  (h‚ÇÅ.add h‚ÇÇ).congr_left fun _x => sub_add_sub_cancel _ _ _

theorem IsLittleO.triangle (h‚ÇÅ : (fun x => f‚ÇÅ x - f‚ÇÇ x) =o[l] g)
    (h‚ÇÇ : (fun x => f‚ÇÇ x - f‚ÇÉ x) =o[l] g) : (fun x => f‚ÇÅ x - f‚ÇÉ x) =o[l] g :=
  (h‚ÇÅ.add h‚ÇÇ).congr_left fun _x => sub_add_sub_cancel _ _ _

theorem IsBigO.congr_of_sub (h : (fun x => f‚ÇÅ x - f‚ÇÇ x) =O[l] g) : f‚ÇÅ =O[l] g ‚Üî f‚ÇÇ =O[l] g :=
  ‚ü®fun h' => (h'.sub h).congr_left fun _x => sub_sub_cancel _ _, fun h' =>
    (h.add h').congr_left fun _x => sub_add_cancel _ _‚ü©

theorem IsLittleO.congr_of_sub (h : (fun x => f‚ÇÅ x - f‚ÇÇ x) =o[l] g) : f‚ÇÅ =o[l] g ‚Üî f‚ÇÇ =o[l] g :=
  ‚ü®fun h' => (h'.sub h).congr_left fun _x => sub_sub_cancel _ _, fun h' =>
    (h.add h').congr_left fun _x => sub_add_cancel _ _‚ü©

end IsBigOOAsRel

/-! ### Zero, one, and other constants -/


section ZeroConst

variable (g g' l)

theorem isLittleO_zero : (fun _x => (0 : E')) =o[l] g' :=
  IsLittleO.of_bound fun c hc =>
    univ_mem' fun x => by simpa using mul_nonneg hc.le (norm_nonneg <| g' x)

theorem isBigOWith_zero (hc : 0 ‚â§ c) : IsBigOWith c l (fun _x => (0 : E')) g' :=
  IsBigOWith.of_bound <| univ_mem' fun x => by simpa using mul_nonneg hc (norm_nonneg <| g' x)

theorem isBigOWith_zero' : IsBigOWith 0 l (fun _x => (0 : E')) g :=
  IsBigOWith.of_bound <| univ_mem' fun x => by simp

theorem isBigO_zero : (fun _x => (0 : E')) =O[l] g :=
  isBigO_iff_isBigOWith.2 ‚ü®0, isBigOWith_zero' _ _‚ü©

theorem isBigO_refl_left : (fun x => f' x - f' x) =O[l] g' :=
  (isBigO_zero g' l).congr_left fun _x => (sub_self _).symm

theorem isLittleO_refl_left : (fun x => f' x - f' x) =o[l] g' :=
  (isLittleO_zero g' l).congr_left fun _x => (sub_self _).symm

variable {g g' l}

@[simp]
theorem isBigOWith_zero_right_iff : (IsBigOWith c l f'' fun _x => (0 : F')) ‚Üî f'' =·∂†[l] 0 := by
  simp only [IsBigOWith_def, exists_prop, true_and_iff, norm_zero, mul_zero,
    norm_le_zero_iff, EventuallyEq, Pi.zero_apply]

@[simp]
theorem isBigO_zero_right_iff : (f'' =O[l] fun _x => (0 : F')) ‚Üî f'' =·∂†[l] 0 :=
  ‚ü®fun h =>
    let ‚ü®_c, hc‚ü© := h.isBigOWith
    isBigOWith_zero_right_iff.1 hc,
    fun h => (isBigOWith_zero_right_iff.2 h : IsBigOWith 1 _ _ _).isBigO‚ü©

@[simp]
theorem isLittleO_zero_right_iff : (f'' =o[l] fun _x => (0 : F')) ‚Üî f'' =·∂†[l] 0 :=
  ‚ü®fun h => isBigO_zero_right_iff.1 h.isBigO,
   fun h => IsLittleO.of_isBigOWith fun _c _hc => isBigOWith_zero_right_iff.2 h‚ü©

theorem isBigOWith_const_const (c : E) {c' : F''} (hc' : c' ‚â† 0) (l : Filter Œ±) :
    IsBigOWith (‚Äñc‚Äñ / ‚Äñc'‚Äñ) l (fun _x : Œ± => c) fun _x => c' := by
  simp only [IsBigOWith_def]
  apply univ_mem'
  intro x
  rw [mem_setOf, div_mul_cancel‚ÇÄ _ (norm_ne_zero_iff.mpr hc')]

theorem isBigO_const_const (c : E) {c' : F''} (hc' : c' ‚â† 0) (l : Filter Œ±) :
    (fun _x : Œ± => c) =O[l] fun _x => c' :=
  (isBigOWith_const_const c hc' l).isBigO

@[simp]
theorem isBigO_const_const_iff {c : E''} {c' : F''} (l : Filter Œ±) [l.NeBot] :
    ((fun _x : Œ± => c) =O[l] fun _x => c') ‚Üî c' = 0 ‚Üí c = 0 := by
  rcases eq_or_ne c' 0 with (rfl | hc')
  ¬∑ simp [EventuallyEq]
  ¬∑ simp [hc', isBigO_const_const _ hc']

@[simp]
theorem isBigO_pure {x} : f'' =O[pure x] g'' ‚Üî g'' x = 0 ‚Üí f'' x = 0 :=
  calc
    f'' =O[pure x] g'' ‚Üî (fun _y : Œ± => f'' x) =O[pure x] fun _ => g'' x := isBigO_congr rfl rfl
    _ ‚Üî g'' x = 0 ‚Üí f'' x = 0 := isBigO_const_const_iff _

end ZeroConst

@[simp]
theorem isBigOWith_principal {s : Set Œ±} : IsBigOWith c (ùìü s) f g ‚Üî ‚àÄ x ‚àà s, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ := by
  rw [IsBigOWith_def, eventually_principal]

theorem isBigO_principal {s : Set Œ±} : f =O[ùìü s] g ‚Üî ‚àÉ c, ‚àÄ x ‚àà s, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ := by
  simp_rw [isBigO_iff, eventually_principal]

@[simp]
theorem isLittleO_principal {s : Set Œ±} : f'' =o[ùìü s] g' ‚Üî ‚àÄ x ‚àà s, f'' x = 0 := by
  refine ‚ü®fun h x hx ‚Ü¶ norm_le_zero_iff.1 ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ simp only [isLittleO_iff, isBigOWith_principal] at h
    have : Tendsto (fun c : ‚Ñù => c * ‚Äñg' x‚Äñ) (ùìù[>] 0) (ùìù 0) :=
      ((continuous_id.mul continuous_const).tendsto' _ _ (zero_mul _)).mono_left
        inf_le_left
    apply le_of_tendsto_of_tendsto tendsto_const_nhds this
    apply eventually_nhdsWithin_iff.2 (Eventually.of_forall (fun c hc ‚Ü¶ ?_))
    exact eventually_principal.1 (h hc) x hx
  ¬∑ apply (isLittleO_zero g' _).congr' ?_ EventuallyEq.rfl
    exact fun x hx ‚Ü¶ (h x hx).symm

@[simp]
theorem isBigOWith_top : IsBigOWith c ‚ä§ f g ‚Üî ‚àÄ x, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ := by
  rw [IsBigOWith_def, eventually_top]

@[simp]
theorem isBigO_top : f =O[‚ä§] g ‚Üî ‚àÉ C, ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C * ‚Äñg x‚Äñ := by
  simp_rw [isBigO_iff, eventually_top]

@[simp]
theorem isLittleO_top : f'' =o[‚ä§] g' ‚Üî ‚àÄ x, f'' x = 0 := by
  simp only [‚Üê principal_univ, isLittleO_principal, mem_univ, forall_true_left]

section

variable (F)
variable [One F] [NormOneClass F]

theorem isBigOWith_const_one (c : E) (l : Filter Œ±) :
    IsBigOWith ‚Äñc‚Äñ l (fun _x : Œ± => c) fun _x => (1 : F) := by simp [isBigOWith_iff]

theorem isBigO_const_one (c : E) (l : Filter Œ±) : (fun _x : Œ± => c) =O[l] fun _x => (1 : F) :=
  (isBigOWith_const_one F c l).isBigO

theorem isLittleO_const_iff_isLittleO_one {c : F''} (hc : c ‚â† 0) :
    (f =o[l] fun _x => c) ‚Üî f =o[l] fun _x => (1 : F) :=
  ‚ü®fun h => h.trans_isBigOWith (isBigOWith_const_one _ _ _) (norm_pos_iff.2 hc),
   fun h => h.trans_isBigO <| isBigO_const_const _ hc _‚ü©

@[simp]
theorem isLittleO_one_iff : f' =o[l] (fun _x => 1 : Œ± ‚Üí F) ‚Üî Tendsto f' l (ùìù 0) := by
  simp only [isLittleO_iff, norm_one, mul_one, Metric.nhds_basis_closedBall.tendsto_right_iff,
    Metric.mem_closedBall, dist_zero_right]

@[simp]
theorem isBigO_one_iff : f =O[l] (fun _x => 1 : Œ± ‚Üí F) ‚Üî
    IsBoundedUnder (¬∑ ‚â§ ¬∑) l fun x => ‚Äñf x‚Äñ := by
  simp only [isBigO_iff, norm_one, mul_one, IsBoundedUnder, IsBounded, eventually_map]

alias ‚ü®_, _root_.Filter.IsBoundedUnder.isBigO_one‚ü© := isBigO_one_iff

@[simp]
theorem isLittleO_one_left_iff : (fun _x => 1 : Œ± ‚Üí F) =o[l] f ‚Üî Tendsto (fun x => ‚Äñf x‚Äñ) l atTop :=
  calc
    (fun _x => 1 : Œ± ‚Üí F) =o[l] f ‚Üî ‚àÄ n : ‚Ñï, ‚àÄ·∂† x in l, ‚Üën * ‚Äñ(1 : F)‚Äñ ‚â§ ‚Äñf x‚Äñ :=
      isLittleO_iff_nat_mul_le_aux <| Or.inl fun _x => by simp only [norm_one, zero_le_one]
    _ ‚Üî ‚àÄ n : ‚Ñï, True ‚Üí ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚àà Ici (n : ‚Ñù) := by
      simp only [norm_one, mul_one, true_imp_iff, mem_Ici]
    _ ‚Üî Tendsto (fun x => ‚Äñf x‚Äñ) l atTop :=
      atTop_hasCountableBasis_of_archimedean.1.tendsto_right_iff.symm

theorem _root_.Filter.Tendsto.isBigO_one {c : E'} (h : Tendsto f' l (ùìù c)) :
    f' =O[l] (fun _x => 1 : Œ± ‚Üí F) :=
  h.norm.isBoundedUnder_le.isBigO_one F

theorem IsBigO.trans_tendsto_nhds (hfg : f =O[l] g') {y : F'} (hg : Tendsto g' l (ùìù y)) :
    f =O[l] (fun _x => 1 : Œ± ‚Üí F) :=
  hfg.trans <| hg.isBigO_one F

/-- The condition `f = O[ùìù[‚â†] a] 1` is equivalent to `f = O[ùìù a] 1`. -/
lemma isBigO_one_nhds_ne_iff [TopologicalSpace Œ±] {a : Œ±} :
    f =O[ùìù[‚â†] a] (fun _ ‚Ü¶ 1 : Œ± ‚Üí F) ‚Üî f =O[ùìù a] (fun _ ‚Ü¶ 1 : Œ± ‚Üí F) := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ h.mono nhdsWithin_le_nhds‚ü©
  simp only [isBigO_one_iff, IsBoundedUnder, IsBounded, eventually_map] at h ‚ä¢
  obtain ‚ü®c, hc‚ü© := h
  use max c ‚Äñf a‚Äñ
  filter_upwards [eventually_nhdsWithin_iff.mp hc] with b hb
  rcases eq_or_ne b a with rfl | hb'
  ¬∑ apply le_max_right
  ¬∑ exact (hb hb').trans (le_max_left ..)

end

theorem isLittleO_const_iff {c : F''} (hc : c ‚â† 0) :
    (f'' =o[l] fun _x => c) ‚Üî Tendsto f'' l (ùìù 0) :=
  (isLittleO_const_iff_isLittleO_one ‚Ñù hc).trans (isLittleO_one_iff _)

theorem isLittleO_id_const {c : F''} (hc : c ‚â† 0) : (fun x : E'' => x) =o[ùìù 0] fun _x => c :=
  (isLittleO_const_iff hc).mpr (continuous_id.tendsto 0)

theorem _root_.Filter.IsBoundedUnder.isBigO_const (h : IsBoundedUnder (¬∑ ‚â§ ¬∑) l (norm ‚àò f))
    {c : F''} (hc : c ‚â† 0) : f =O[l] fun _x => c :=
  (h.isBigO_one ‚Ñù).trans (isBigO_const_const _ hc _)

theorem isBigO_const_of_tendsto {y : E''} (h : Tendsto f'' l (ùìù y)) {c : F''} (hc : c ‚â† 0) :
    f'' =O[l] fun _x => c :=
  h.norm.isBoundedUnder_le.isBigO_const hc

theorem IsBigO.isBoundedUnder_le {c : F} (h : f =O[l] fun _x => c) :
    IsBoundedUnder (¬∑ ‚â§ ¬∑) l (norm ‚àò f) :=
  let ‚ü®c', hc'‚ü© := h.bound
  ‚ü®c' * ‚Äñc‚Äñ, eventually_map.2 hc'‚ü©

theorem isBigO_const_of_ne {c : F''} (hc : c ‚â† 0) :
    (f =O[l] fun _x => c) ‚Üî IsBoundedUnder (¬∑ ‚â§ ¬∑) l (norm ‚àò f) :=
  ‚ü®fun h => h.isBoundedUnder_le, fun h => h.isBigO_const hc‚ü©

theorem isBigO_const_iff {c : F''} : (f'' =O[l] fun _x => c) ‚Üî
    (c = 0 ‚Üí f'' =·∂†[l] 0) ‚àß IsBoundedUnder (¬∑ ‚â§ ¬∑) l fun x => ‚Äñf'' x‚Äñ := by
  refine ‚ü®fun h => ‚ü®fun hc => isBigO_zero_right_iff.1 (by rwa [‚Üê hc]), h.isBoundedUnder_le‚ü©, ?_‚ü©
  rintro ‚ü®hcf, hf‚ü©
  rcases eq_or_ne c 0 with (hc | hc)
  exacts [(hcf hc).trans_isBigO (isBigO_zero _ _), hf.isBigO_const hc]

theorem isBigO_iff_isBoundedUnder_le_div (h : ‚àÄ·∂† x in l, g'' x ‚â† 0) :
    f =O[l] g'' ‚Üî IsBoundedUnder (¬∑ ‚â§ ¬∑) l fun x => ‚Äñf x‚Äñ / ‚Äñg'' x‚Äñ := by
  simp only [isBigO_iff, IsBoundedUnder, IsBounded, eventually_map]
  exact
    exists_congr fun c =>
      eventually_congr <| h.mono fun x hx => (div_le_iff‚ÇÄ <| norm_pos_iff.2 hx).symm

/-- `(fun x ‚Ü¶ c) =O[l] f` if and only if `f` is bounded away from zero. -/
theorem isBigO_const_left_iff_pos_le_norm {c : E''} (hc : c ‚â† 0) :
    (fun _x => c) =O[l] f' ‚Üî ‚àÉ b, 0 < b ‚àß ‚àÄ·∂† x in l, b ‚â§ ‚Äñf' x‚Äñ := by
  constructor
  ¬∑ intro h
    rcases h.exists_pos with ‚ü®C, hC‚ÇÄ, hC‚ü©
    refine ‚ü®‚Äñc‚Äñ / C, div_pos (norm_pos_iff.2 hc) hC‚ÇÄ, ?_‚ü©
    exact hC.bound.mono fun x => (div_le_iff‚ÇÄ' hC‚ÇÄ).2
  ¬∑ rintro ‚ü®b, hb‚ÇÄ, hb‚ü©
    refine IsBigO.of_bound (‚Äñc‚Äñ / b) (hb.mono fun x hx => ?_)
    rw [div_mul_eq_mul_div, mul_div_assoc]
    exact le_mul_of_one_le_right (norm_nonneg _) ((one_le_div hb‚ÇÄ).2 hx)

theorem IsBigO.trans_tendsto (hfg : f'' =O[l] g'') (hg : Tendsto g'' l (ùìù 0)) :
    Tendsto f'' l (ùìù 0) :=
  (isLittleO_one_iff ‚Ñù).1 <| hfg.trans_isLittleO <| (isLittleO_one_iff ‚Ñù).2 hg

theorem IsLittleO.trans_tendsto (hfg : f'' =o[l] g'') (hg : Tendsto g'' l (ùìù 0)) :
    Tendsto f'' l (ùìù 0) :=
  hfg.isBigO.trans_tendsto hg

/-! ### Multiplication by a constant -/


theorem isBigOWith_const_mul_self (c : R) (f : Œ± ‚Üí R) (l : Filter Œ±) :
    IsBigOWith ‚Äñc‚Äñ l (fun x => c * f x) f :=
  isBigOWith_of_le' _ fun _x => norm_mul_le _ _

theorem isBigO_const_mul_self (c : R) (f : Œ± ‚Üí R) (l : Filter Œ±) : (fun x => c * f x) =O[l] f :=
  (isBigOWith_const_mul_self c f l).isBigO

theorem IsBigOWith.const_mul_left {f : Œ± ‚Üí R} (h : IsBigOWith c l f g) (c' : R) :
    IsBigOWith (‚Äñc'‚Äñ * c) l (fun x => c' * f x) g :=
  (isBigOWith_const_mul_self c' f l).trans h (norm_nonneg c')

theorem IsBigO.const_mul_left {f : Œ± ‚Üí R} (h : f =O[l] g) (c' : R) : (fun x => c' * f x) =O[l] g :=
  let ‚ü®_c, hc‚ü© := h.isBigOWith
  (hc.const_mul_left c').isBigO

theorem isBigOWith_self_const_mul' (u : RÀ£) (f : Œ± ‚Üí R) (l : Filter Œ±) :
    IsBigOWith ‚Äñ(‚Üëu‚Åª¬π : R)‚Äñ l f fun x => ‚Üëu * f x :=
  (isBigOWith_const_mul_self ‚Üëu‚Åª¬π (fun x ‚Ü¶ ‚Üëu * f x) l).congr_left
    fun x ‚Ü¶ u.inv_mul_cancel_left (f x)

theorem isBigOWith_self_const_mul (c : ùïú) (hc : c ‚â† 0) (f : Œ± ‚Üí ùïú) (l : Filter Œ±) :
    IsBigOWith ‚Äñc‚Äñ‚Åª¬π l f fun x => c * f x :=
  (isBigOWith_self_const_mul' (Units.mk0 c hc) f l).congr_const <| norm_inv c

theorem isBigO_self_const_mul' {c : R} (hc : IsUnit c) (f : Œ± ‚Üí R) (l : Filter Œ±) :
    f =O[l] fun x => c * f x :=
  let ‚ü®u, hu‚ü© := hc
  hu ‚ñ∏ (isBigOWith_self_const_mul' u f l).isBigO

theorem isBigO_self_const_mul (c : ùïú) (hc : c ‚â† 0) (f : Œ± ‚Üí ùïú) (l : Filter Œ±) :
    f =O[l] fun x => c * f x :=
  isBigO_self_const_mul' (IsUnit.mk0 c hc) f l

theorem isBigO_const_mul_left_iff' {f : Œ± ‚Üí R} {c : R} (hc : IsUnit c) :
    (fun x => c * f x) =O[l] g ‚Üî f =O[l] g :=
  ‚ü®(isBigO_self_const_mul' hc f l).trans, fun h => h.const_mul_left c‚ü©

theorem isBigO_const_mul_left_iff {f : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) :
    (fun x => c * f x) =O[l] g ‚Üî f =O[l] g :=
  isBigO_const_mul_left_iff' <| IsUnit.mk0 c hc

theorem IsLittleO.const_mul_left {f : Œ± ‚Üí R} (h : f =o[l] g) (c : R) : (fun x => c * f x) =o[l] g :=
  (isBigO_const_mul_self c f l).trans_isLittleO h

theorem isLittleO_const_mul_left_iff' {f : Œ± ‚Üí R} {c : R} (hc : IsUnit c) :
    (fun x => c * f x) =o[l] g ‚Üî f =o[l] g :=
  ‚ü®(isBigO_self_const_mul' hc f l).trans_isLittleO, fun h => h.const_mul_left c‚ü©

theorem isLittleO_const_mul_left_iff {f : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) :
    (fun x => c * f x) =o[l] g ‚Üî f =o[l] g :=
  isLittleO_const_mul_left_iff' <| IsUnit.mk0 c hc

theorem IsBigOWith.of_const_mul_right {g : Œ± ‚Üí R} {c : R} (hc' : 0 ‚â§ c')
    (h : IsBigOWith c' l f fun x => c * g x) : IsBigOWith (c' * ‚Äñc‚Äñ) l f g :=
  h.trans (isBigOWith_const_mul_self c g l) hc'

theorem IsBigO.of_const_mul_right {g : Œ± ‚Üí R} {c : R} (h : f =O[l] fun x => c * g x) : f =O[l] g :=
  let ‚ü®_c, cnonneg, hc‚ü© := h.exists_nonneg
  (hc.of_const_mul_right cnonneg).isBigO

theorem IsBigOWith.const_mul_right' {g : Œ± ‚Üí R} {u : RÀ£} {c' : ‚Ñù} (hc' : 0 ‚â§ c')
    (h : IsBigOWith c' l f g) : IsBigOWith (c' * ‚Äñ(‚Üëu‚Åª¬π : R)‚Äñ) l f fun x => ‚Üëu * g x :=
  h.trans (isBigOWith_self_const_mul' _ _ _) hc'

theorem IsBigOWith.const_mul_right {g : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) {c' : ‚Ñù} (hc' : 0 ‚â§ c')
    (h : IsBigOWith c' l f g) : IsBigOWith (c' * ‚Äñc‚Äñ‚Åª¬π) l f fun x => c * g x :=
  h.trans (isBigOWith_self_const_mul c hc g l) hc'

theorem IsBigO.const_mul_right' {g : Œ± ‚Üí R} {c : R} (hc : IsUnit c) (h : f =O[l] g) :
    f =O[l] fun x => c * g x :=
  h.trans (isBigO_self_const_mul' hc g l)

theorem IsBigO.const_mul_right {g : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) (h : f =O[l] g) :
    f =O[l] fun x => c * g x :=
  h.const_mul_right' <| IsUnit.mk0 c hc

theorem isBigO_const_mul_right_iff' {g : Œ± ‚Üí R} {c : R} (hc : IsUnit c) :
    (f =O[l] fun x => c * g x) ‚Üî f =O[l] g :=
  ‚ü®fun h => h.of_const_mul_right, fun h => h.const_mul_right' hc‚ü©

theorem isBigO_const_mul_right_iff {g : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) :
    (f =O[l] fun x => c * g x) ‚Üî f =O[l] g :=
  isBigO_const_mul_right_iff' <| IsUnit.mk0 c hc

theorem IsLittleO.of_const_mul_right {g : Œ± ‚Üí R} {c : R} (h : f =o[l] fun x => c * g x) :
    f =o[l] g :=
  h.trans_isBigO (isBigO_const_mul_self c g l)

theorem IsLittleO.const_mul_right' {g : Œ± ‚Üí R} {c : R} (hc : IsUnit c) (h : f =o[l] g) :
    f =o[l] fun x => c * g x :=
  h.trans_isBigO (isBigO_self_const_mul' hc g l)

theorem IsLittleO.const_mul_right {g : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) (h : f =o[l] g) :
    f =o[l] fun x => c * g x :=
  h.const_mul_right' <| IsUnit.mk0 c hc

theorem isLittleO_const_mul_right_iff' {g : Œ± ‚Üí R} {c : R} (hc : IsUnit c) :
    (f =o[l] fun x => c * g x) ‚Üî f =o[l] g :=
  ‚ü®fun h => h.of_const_mul_right, fun h => h.const_mul_right' hc‚ü©

theorem isLittleO_const_mul_right_iff {g : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) :
    (f =o[l] fun x => c * g x) ‚Üî f =o[l] g :=
  isLittleO_const_mul_right_iff' <| IsUnit.mk0 c hc

/-! ### Multiplication -/


theorem IsBigOWith.mul {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí R} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí ùïú} {c‚ÇÅ c‚ÇÇ : ‚Ñù} (h‚ÇÅ : IsBigOWith c‚ÇÅ l f‚ÇÅ g‚ÇÅ)
    (h‚ÇÇ : IsBigOWith c‚ÇÇ l f‚ÇÇ g‚ÇÇ) :
    IsBigOWith (c‚ÇÅ * c‚ÇÇ) l (fun x => f‚ÇÅ x * f‚ÇÇ x) fun x => g‚ÇÅ x * g‚ÇÇ x := by
  simp only [IsBigOWith_def] at *
  filter_upwards [h‚ÇÅ, h‚ÇÇ] with _ hx‚ÇÅ hx‚ÇÇ
  apply le_trans (norm_mul_le _ _)
  convert mul_le_mul hx‚ÇÅ hx‚ÇÇ (norm_nonneg _) (le_trans (norm_nonneg _) hx‚ÇÅ) using 1
  rw [norm_mul, mul_mul_mul_comm]

theorem IsBigO.mul {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí R} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : f‚ÇÅ =O[l] g‚ÇÅ) (h‚ÇÇ : f‚ÇÇ =O[l] g‚ÇÇ) :
    (fun x => f‚ÇÅ x * f‚ÇÇ x) =O[l] fun x => g‚ÇÅ x * g‚ÇÇ x :=
  let ‚ü®_c, hc‚ü© := h‚ÇÅ.isBigOWith
  let ‚ü®_c', hc'‚ü© := h‚ÇÇ.isBigOWith
  (hc.mul hc').isBigO

theorem IsBigO.mul_isLittleO {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí R} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : f‚ÇÅ =O[l] g‚ÇÅ) (h‚ÇÇ : f‚ÇÇ =o[l] g‚ÇÇ) :
    (fun x => f‚ÇÅ x * f‚ÇÇ x) =o[l] fun x => g‚ÇÅ x * g‚ÇÇ x := by
  simp only [IsLittleO_def] at *
  intro c cpos
  rcases h‚ÇÅ.exists_pos with ‚ü®c', c'pos, hc'‚ü©
  exact (hc'.mul (h‚ÇÇ (div_pos cpos c'pos))).congr_const (mul_div_cancel‚ÇÄ _ (ne_of_gt c'pos))

theorem IsLittleO.mul_isBigO {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí R} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : f‚ÇÅ =o[l] g‚ÇÅ) (h‚ÇÇ : f‚ÇÇ =O[l] g‚ÇÇ) :
    (fun x => f‚ÇÅ x * f‚ÇÇ x) =o[l] fun x => g‚ÇÅ x * g‚ÇÇ x := by
  simp only [IsLittleO_def] at *
  intro c cpos
  rcases h‚ÇÇ.exists_pos with ‚ü®c', c'pos, hc'‚ü©
  exact ((h‚ÇÅ (div_pos cpos c'pos)).mul hc').congr_const (div_mul_cancel‚ÇÄ _ (ne_of_gt c'pos))

theorem IsLittleO.mul {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí R} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : f‚ÇÅ =o[l] g‚ÇÅ) (h‚ÇÇ : f‚ÇÇ =o[l] g‚ÇÇ) :
    (fun x => f‚ÇÅ x * f‚ÇÇ x) =o[l] fun x => g‚ÇÅ x * g‚ÇÇ x :=
  h‚ÇÅ.mul_isBigO h‚ÇÇ.isBigO

theorem IsBigOWith.pow' {f : Œ± ‚Üí R} {g : Œ± ‚Üí ùïú} (h : IsBigOWith c l f g) :
    ‚àÄ n : ‚Ñï, IsBigOWith (Nat.casesOn n ‚Äñ(1 : R)‚Äñ fun n => c ^ (n + 1))
      l (fun x => f x ^ n) fun x => g x ^ n
  | 0 => by simpa using isBigOWith_const_const (1 : R) (one_ne_zero' ùïú) l
  | 1 => by simpa
  | n + 2 => by simpa [pow_succ] using (IsBigOWith.pow' h (n + 1)).mul h

theorem IsBigOWith.pow [NormOneClass R] {f : Œ± ‚Üí R} {g : Œ± ‚Üí ùïú} (h : IsBigOWith c l f g) :
    ‚àÄ n : ‚Ñï, IsBigOWith (c ^ n) l (fun x => f x ^ n) fun x => g x ^ n
  | 0 => by simpa using h.pow' 0
  | n + 1 => h.pow' (n + 1)

theorem IsBigOWith.of_pow {n : ‚Ñï} {f : Œ± ‚Üí ùïú} {g : Œ± ‚Üí R} (h : IsBigOWith c l (f ^ n) (g ^ n))
    (hn : n ‚â† 0) (hc : c ‚â§ c' ^ n) (hc' : 0 ‚â§ c') : IsBigOWith c' l f g :=
  IsBigOWith.of_bound <| (h.weaken hc).bound.mono fun x hx ‚Ü¶
    le_of_pow_le_pow_left hn (by positivity) <|
      calc
        ‚Äñf x‚Äñ ^ n = ‚Äñf x ^ n‚Äñ := (norm_pow _ _).symm
        _ ‚â§ c' ^ n * ‚Äñg x ^ n‚Äñ := hx
        _ ‚â§ c' ^ n * ‚Äñg x‚Äñ ^ n := by gcongr; exact norm_pow_le' _ hn.bot_lt
        _ = (c' * ‚Äñg x‚Äñ) ^ n := (mul_pow _ _ _).symm

theorem IsBigO.pow {f : Œ± ‚Üí R} {g : Œ± ‚Üí ùïú} (h : f =O[l] g) (n : ‚Ñï) :
    (fun x => f x ^ n) =O[l] fun x => g x ^ n :=
  let ‚ü®_C, hC‚ü© := h.isBigOWith
  isBigO_iff_isBigOWith.2 ‚ü®_, hC.pow' n‚ü©

theorem IsBigO.of_pow {f : Œ± ‚Üí ùïú} {g : Œ± ‚Üí R} {n : ‚Ñï} (hn : n ‚â† 0) (h : (f ^ n) =O[l] (g ^ n)) :
    f =O[l] g := by
  rcases h.exists_pos with ‚ü®C, _hC‚ÇÄ, hC‚ü©
  obtain ‚ü®c : ‚Ñù, hc‚ÇÄ : 0 ‚â§ c, hc : C ‚â§ c ^ n‚ü© :=
    ((eventually_ge_atTop _).and <| (tendsto_pow_atTop hn).eventually_ge_atTop C).exists
  exact (hC.of_pow hn hc hc‚ÇÄ).isBigO

theorem IsLittleO.pow {f : Œ± ‚Üí R} {g : Œ± ‚Üí ùïú} (h : f =o[l] g) {n : ‚Ñï} (hn : 0 < n) :
    (fun x => f x ^ n) =o[l] fun x => g x ^ n := by
  obtain ‚ü®n, rfl‚ü© := Nat.exists_eq_succ_of_ne_zero hn.ne'; clear hn
  induction n with
  | zero => simpa only [pow_one]
  | succ n ihn => convert ihn.mul h <;> simp [pow_succ]

theorem IsLittleO.of_pow {f : Œ± ‚Üí ùïú} {g : Œ± ‚Üí R} {n : ‚Ñï} (h : (f ^ n) =o[l] (g ^ n)) (hn : n ‚â† 0) :
    f =o[l] g :=
  IsLittleO.of_isBigOWith fun _c hc => (h.def' <| pow_pos hc _).of_pow hn le_rfl hc.le

/-! ### Inverse -/

theorem IsBigOWith.inv_rev {f : Œ± ‚Üí ùïú} {g : Œ± ‚Üí ùïú'} (h : IsBigOWith c l f g)
    (h‚ÇÄ : ‚àÄ·∂† x in l, f x = 0 ‚Üí g x = 0) : IsBigOWith c l (fun x => (g x)‚Åª¬π) fun x => (f x)‚Åª¬π := by
  refine IsBigOWith.of_bound (h.bound.mp (h‚ÇÄ.mono fun x h‚ÇÄ hle => ?_))
  rcases eq_or_ne (f x) 0 with hx | hx
  ¬∑ simp only [hx, h‚ÇÄ hx, inv_zero, norm_zero, mul_zero, le_rfl]
  ¬∑ have hc : 0 < c := pos_of_mul_pos_left ((norm_pos_iff.2 hx).trans_le hle) (norm_nonneg _)
    replace hle := inv_le_inv_of_le (norm_pos_iff.2 hx) hle
    simpa only [norm_inv, mul_inv, ‚Üê div_eq_inv_mul, div_le_iff‚ÇÄ hc] using hle

theorem IsBigO.inv_rev {f : Œ± ‚Üí ùïú} {g : Œ± ‚Üí ùïú'} (h : f =O[l] g)
    (h‚ÇÄ : ‚àÄ·∂† x in l, f x = 0 ‚Üí g x = 0) : (fun x => (g x)‚Åª¬π) =O[l] fun x => (f x)‚Åª¬π :=
  let ‚ü®_c, hc‚ü© := h.isBigOWith
  (hc.inv_rev h‚ÇÄ).isBigO

theorem IsLittleO.inv_rev {f : Œ± ‚Üí ùïú} {g : Œ± ‚Üí ùïú'} (h : f =o[l] g)
    (h‚ÇÄ : ‚àÄ·∂† x in l, f x = 0 ‚Üí g x = 0) : (fun x => (g x)‚Åª¬π) =o[l] fun x => (f x)‚Åª¬π :=
  IsLittleO.of_isBigOWith fun _c hc => (h.def' hc).inv_rev h‚ÇÄ

/-! ### Scalar multiplication -/


section SMulConst

variable [Module R E'] [BoundedSMul R E']

theorem IsBigOWith.const_smul_self (c' : R) :
    IsBigOWith (‚Äñc'‚Äñ) l (fun x => c' ‚Ä¢ f' x) f' :=
  isBigOWith_of_le' _ fun _ => norm_smul_le _ _

theorem IsBigO.const_smul_self (c' : R) : (fun x => c' ‚Ä¢ f' x) =O[l] f' :=
  (IsBigOWith.const_smul_self _).isBigO

theorem IsBigOWith.const_smul_left (h : IsBigOWith c l f' g) (c' : R) :
    IsBigOWith (‚Äñc'‚Äñ * c) l (fun x => c' ‚Ä¢ f' x) g :=
  .trans (.const_smul_self _) h (norm_nonneg _)

theorem IsBigO.const_smul_left (h : f' =O[l] g) (c : R) : (c ‚Ä¢ f') =O[l] g :=
  let ‚ü®_b, hb‚ü© := h.isBigOWith
  (hb.const_smul_left _).isBigO

theorem IsLittleO.const_smul_left (h : f' =o[l] g) (c : R) : (c ‚Ä¢ f') =o[l] g :=
  (IsBigO.const_smul_self _).trans_isLittleO h

variable [Module ùïú E'] [BoundedSMul ùïú E']

theorem isBigO_const_smul_left {c : ùïú} (hc : c ‚â† 0) : (fun x => c ‚Ä¢ f' x) =O[l] g ‚Üî f' =O[l] g := by
  have cne0 : ‚Äñc‚Äñ ‚â† 0 := norm_ne_zero_iff.mpr hc
  rw [‚Üê isBigO_norm_left]
  simp only [norm_smul]
  rw [isBigO_const_mul_left_iff cne0, isBigO_norm_left]

theorem isLittleO_const_smul_left {c : ùïú} (hc : c ‚â† 0) :
    (fun x => c ‚Ä¢ f' x) =o[l] g ‚Üî f' =o[l] g := by
  have cne0 : ‚Äñc‚Äñ ‚â† 0 := norm_ne_zero_iff.mpr hc
  rw [‚Üê isLittleO_norm_left]
  simp only [norm_smul]
  rw [isLittleO_const_mul_left_iff cne0, isLittleO_norm_left]

theorem isBigO_const_smul_right {c : ùïú} (hc : c ‚â† 0) :
    (f =O[l] fun x => c ‚Ä¢ f' x) ‚Üî f =O[l] f' := by
  have cne0 : ‚Äñc‚Äñ ‚â† 0 := norm_ne_zero_iff.mpr hc
  rw [‚Üê isBigO_norm_right]
  simp only [norm_smul]
  rw [isBigO_const_mul_right_iff cne0, isBigO_norm_right]

theorem isLittleO_const_smul_right {c : ùïú} (hc : c ‚â† 0) :
    (f =o[l] fun x => c ‚Ä¢ f' x) ‚Üî f =o[l] f' := by
  have cne0 : ‚Äñc‚Äñ ‚â† 0 := norm_ne_zero_iff.mpr hc
  rw [‚Üê isLittleO_norm_right]
  simp only [norm_smul]
  rw [isLittleO_const_mul_right_iff cne0, isLittleO_norm_right]

end SMulConst

section SMul

variable [Module R E'] [BoundedSMul R E'] [Module ùïú' F'] [BoundedSMul ùïú' F']
variable {k‚ÇÅ : Œ± ‚Üí R} {k‚ÇÇ : Œ± ‚Üí ùïú'}

theorem IsBigOWith.smul (h‚ÇÅ : IsBigOWith c l k‚ÇÅ k‚ÇÇ) (h‚ÇÇ : IsBigOWith c' l f' g') :
    IsBigOWith (c * c') l (fun x => k‚ÇÅ x ‚Ä¢ f' x) fun x => k‚ÇÇ x ‚Ä¢ g' x := by
  simp only [IsBigOWith_def] at *
  filter_upwards [h‚ÇÅ, h‚ÇÇ] with _ hx‚ÇÅ hx‚ÇÇ
  apply le_trans (norm_smul_le _ _)
  convert mul_le_mul hx‚ÇÅ hx‚ÇÇ (norm_nonneg _) (le_trans (norm_nonneg _) hx‚ÇÅ) using 1
  rw [norm_smul, mul_mul_mul_comm]

theorem IsBigO.smul (h‚ÇÅ : k‚ÇÅ =O[l] k‚ÇÇ) (h‚ÇÇ : f' =O[l] g') :
    (fun x => k‚ÇÅ x ‚Ä¢ f' x) =O[l] fun x => k‚ÇÇ x ‚Ä¢ g' x := by
  obtain ‚ü®c‚ÇÅ, h‚ÇÅ‚ü© := h‚ÇÅ.isBigOWith
  obtain ‚ü®c‚ÇÇ, h‚ÇÇ‚ü© := h‚ÇÇ.isBigOWith
  exact (h‚ÇÅ.smul h‚ÇÇ).isBigO

theorem IsBigO.smul_isLittleO (h‚ÇÅ : k‚ÇÅ =O[l] k‚ÇÇ) (h‚ÇÇ : f' =o[l] g') :
    (fun x => k‚ÇÅ x ‚Ä¢ f' x) =o[l] fun x => k‚ÇÇ x ‚Ä¢ g' x := by
  simp only [IsLittleO_def] at *
  intro c cpos
  rcases h‚ÇÅ.exists_pos with ‚ü®c', c'pos, hc'‚ü©
  exact (hc'.smul (h‚ÇÇ (div_pos cpos c'pos))).congr_const (mul_div_cancel‚ÇÄ _ (ne_of_gt c'pos))

theorem IsLittleO.smul_isBigO (h‚ÇÅ : k‚ÇÅ =o[l] k‚ÇÇ) (h‚ÇÇ : f' =O[l] g') :
    (fun x => k‚ÇÅ x ‚Ä¢ f' x) =o[l] fun x => k‚ÇÇ x ‚Ä¢ g' x := by
  simp only [IsLittleO_def] at *
  intro c cpos
  rcases h‚ÇÇ.exists_pos with ‚ü®c', c'pos, hc'‚ü©
  exact ((h‚ÇÅ (div_pos cpos c'pos)).smul hc').congr_const (div_mul_cancel‚ÇÄ _ (ne_of_gt c'pos))

theorem IsLittleO.smul (h‚ÇÅ : k‚ÇÅ =o[l] k‚ÇÇ) (h‚ÇÇ : f' =o[l] g') :
    (fun x => k‚ÇÅ x ‚Ä¢ f' x) =o[l] fun x => k‚ÇÇ x ‚Ä¢ g' x :=
  h‚ÇÅ.smul_isBigO h‚ÇÇ.isBigO

end SMul

/-! ### Sum -/


section Sum

variable {Œπ : Type*} {A : Œπ ‚Üí Œ± ‚Üí E'} {C : Œπ ‚Üí ‚Ñù} {s : Finset Œπ}

theorem IsBigOWith.sum (h : ‚àÄ i ‚àà s, IsBigOWith (C i) l (A i) g) :
    IsBigOWith (‚àë i ‚àà s, C i) l (fun x => ‚àë i ‚àà s, A i x) g := by
  induction' s using Finset.induction_on with i s is IH
  ¬∑ simp only [isBigOWith_zero', Finset.sum_empty, forall_true_iff]
  ¬∑ simp only [is, Finset.sum_insert, not_false_iff]
    exact (h _ (Finset.mem_insert_self i s)).add (IH fun j hj => h _ (Finset.mem_insert_of_mem hj))

theorem IsBigO.sum (h : ‚àÄ i ‚àà s, A i =O[l] g) : (fun x => ‚àë i ‚àà s, A i x) =O[l] g := by
  simp only [IsBigO_def] at *
  choose! C hC using h
  exact ‚ü®_, IsBigOWith.sum hC‚ü©

theorem IsLittleO.sum (h : ‚àÄ i ‚àà s, A i =o[l] g') : (fun x => ‚àë i ‚àà s, A i x) =o[l] g' := by
  induction' s using Finset.induction_on with i s is IH
  ¬∑ simp only [isLittleO_zero, Finset.sum_empty, forall_true_iff]
  ¬∑ simp only [is, Finset.sum_insert, not_false_iff]
    exact (h _ (Finset.mem_insert_self i s)).add (IH fun j hj => h _ (Finset.mem_insert_of_mem hj))

end Sum

/-! ### Relation between `f = o(g)` and `f / g ‚Üí 0` -/


theorem IsLittleO.tendsto_div_nhds_zero {f g : Œ± ‚Üí ùïú} (h : f =o[l] g) :
    Tendsto (fun x => f x / g x) l (ùìù 0) :=
  (isLittleO_one_iff ùïú).mp <| by
    calc
      (fun x => f x / g x) =o[l] fun x => g x / g x := by
        simpa only [div_eq_mul_inv] using h.mul_isBigO (isBigO_refl _ _)
      _ =O[l] fun _x => (1 : ùïú) := isBigO_of_le _ fun x => by simp [div_self_le_one]

theorem IsLittleO.tendsto_inv_smul_nhds_zero [Module ùïú E'] [BoundedSMul ùïú E']
    {f : Œ± ‚Üí E'} {g : Œ± ‚Üí ùïú}
    {l : Filter Œ±} (h : f =o[l] g) : Tendsto (fun x => (g x)‚Åª¬π ‚Ä¢ f x) l (ùìù 0) := by
  simpa only [div_eq_inv_mul, ‚Üê norm_inv, ‚Üê norm_smul, ‚Üê tendsto_zero_iff_norm_tendsto_zero] using
    h.norm_norm.tendsto_div_nhds_zero

theorem isLittleO_iff_tendsto' {f g : Œ± ‚Üí ùïú} (hgf : ‚àÄ·∂† x in l, g x = 0 ‚Üí f x = 0) :
    f =o[l] g ‚Üî Tendsto (fun x => f x / g x) l (ùìù 0) :=
  ‚ü®IsLittleO.tendsto_div_nhds_zero, fun h =>
    (((isLittleO_one_iff _).mpr h).mul_isBigO (isBigO_refl g l)).congr'
      (hgf.mono fun _x => div_mul_cancel_of_imp) (Eventually.of_forall fun _x => one_mul _)‚ü©

theorem isLittleO_iff_tendsto {f g : Œ± ‚Üí ùïú} (hgf : ‚àÄ x, g x = 0 ‚Üí f x = 0) :
    f =o[l] g ‚Üî Tendsto (fun x => f x / g x) l (ùìù 0) :=
  isLittleO_iff_tendsto' (Eventually.of_forall hgf)

alias ‚ü®_, isLittleO_of_tendsto'‚ü© := isLittleO_iff_tendsto'

alias ‚ü®_, isLittleO_of_tendsto‚ü© := isLittleO_iff_tendsto

theorem isLittleO_const_left_of_ne {c : E''} (hc : c ‚â† 0) :
    (fun _x => c) =o[l] g ‚Üî Tendsto (fun x => ‚Äñg x‚Äñ) l atTop := by
  simp only [‚Üê isLittleO_one_left_iff ‚Ñù]
  exact ‚ü®(isBigO_const_const (1 : ‚Ñù) hc l).trans_isLittleO,
    (isBigO_const_one ‚Ñù c l).trans_isLittleO‚ü©

@[simp]
theorem isLittleO_const_left {c : E''} :
    (fun _x => c) =o[l] g'' ‚Üî c = 0 ‚à® Tendsto (norm ‚àò g'') l atTop := by
  rcases eq_or_ne c 0 with (rfl | hc)
  ¬∑ simp only [isLittleO_zero, eq_self_iff_true, true_or_iff]
  ¬∑ simp only [hc, false_or_iff, isLittleO_const_left_of_ne hc]; rfl

@[simp 1001] -- Porting note: increase priority so that this triggers before `isLittleO_const_left`
theorem isLittleO_const_const_iff [NeBot l] {d : E''} {c : F''} :
    ((fun _x => d) =o[l] fun _x => c) ‚Üî d = 0 := by
  have : ¬¨Tendsto (Function.const Œ± ‚Äñc‚Äñ) l atTop :=
    not_tendsto_atTop_of_tendsto_nhds tendsto_const_nhds
  simp only [isLittleO_const_left, or_iff_left_iff_imp]
  exact fun h => (this h).elim

@[simp]
theorem isLittleO_pure {x} : f'' =o[pure x] g'' ‚Üî f'' x = 0 :=
  calc
    f'' =o[pure x] g'' ‚Üî (fun _y : Œ± => f'' x) =o[pure x] fun _ => g'' x := isLittleO_congr rfl rfl
    _ ‚Üî f'' x = 0 := isLittleO_const_const_iff

theorem isLittleO_const_id_cobounded (c : F'') :
    (fun _ => c) =o[Bornology.cobounded E''] id :=
  isLittleO_const_left.2 <| .inr tendsto_norm_cobounded_atTop

theorem isLittleO_const_id_atTop (c : E'') : (fun _x : ‚Ñù => c) =o[atTop] id :=
  isLittleO_const_left.2 <| Or.inr tendsto_abs_atTop_atTop

theorem isLittleO_const_id_atBot (c : E'') : (fun _x : ‚Ñù => c) =o[atBot] id :=
  isLittleO_const_left.2 <| Or.inr tendsto_abs_atBot_atTop

/-!
### Eventually (u / v) * v = u

If `u` and `v` are linked by an `IsBigOWith` relation, then we
eventually have `(u / v) * v = u`, even if `v` vanishes.
-/


section EventuallyMulDivCancel

variable {u v : Œ± ‚Üí ùïú}

theorem IsBigOWith.eventually_mul_div_cancel (h : IsBigOWith c l u v) : u / v * v =·∂†[l] u :=
  Eventually.mono h.bound fun y hy => div_mul_cancel_of_imp fun hv => by simpa [hv] using hy

/-- If `u = O(v)` along `l`, then `(u / v) * v = u` eventually at `l`. -/
theorem IsBigO.eventually_mul_div_cancel (h : u =O[l] v) : u / v * v =·∂†[l] u :=
  let ‚ü®_c, hc‚ü© := h.isBigOWith
  hc.eventually_mul_div_cancel

/-- If `u = o(v)` along `l`, then `(u / v) * v = u` eventually at `l`. -/
theorem IsLittleO.eventually_mul_div_cancel (h : u =o[l] v) : u / v * v =·∂†[l] u :=
  (h.forall_isBigOWith zero_lt_one).eventually_mul_div_cancel

end EventuallyMulDivCancel

/-! ### Equivalent definitions of the form `‚àÉ œÜ, u =·∂†[l] œÜ * v` in a `NormedField`. -/


section ExistsMulEq

variable {u v : Œ± ‚Üí ùïú}

/-- If `‚ÄñœÜ‚Äñ` is eventually bounded by `c`, and `u =·∂†[l] œÜ * v`, then we have `IsBigOWith c u v l`.
    This does not require any assumptions on `c`, which is why we keep this version along with
    `IsBigOWith_iff_exists_eq_mul`. -/
theorem isBigOWith_of_eq_mul {u v : Œ± ‚Üí R} (œÜ : Œ± ‚Üí R) (hœÜ : ‚àÄ·∂† x in l, ‚ÄñœÜ x‚Äñ ‚â§ c)
    (h : u =·∂†[l] œÜ * v) :
    IsBigOWith c l u v := by
  simp only [IsBigOWith_def]
  refine h.symm.rw (fun x a => ‚Äña‚Äñ ‚â§ c * ‚Äñv x‚Äñ) (hœÜ.mono fun x hx => ?_)
  simp only [Pi.mul_apply]
  refine (norm_mul_le _ _).trans ?_
  gcongr

theorem isBigOWith_iff_exists_eq_mul (hc : 0 ‚â§ c) :
    IsBigOWith c l u v ‚Üî ‚àÉ œÜ : Œ± ‚Üí ùïú, (‚àÄ·∂† x in l, ‚ÄñœÜ x‚Äñ ‚â§ c) ‚àß u =·∂†[l] œÜ * v := by
  constructor
  ¬∑ intro h
    use fun x => u x / v x
    refine ‚ü®Eventually.mono h.bound fun y hy => ?_, h.eventually_mul_div_cancel.symm‚ü©
    simpa using div_le_of_nonneg_of_le_mul (norm_nonneg _) hc hy
  ¬∑ rintro ‚ü®œÜ, hœÜ, h‚ü©
    exact isBigOWith_of_eq_mul œÜ hœÜ h

theorem IsBigOWith.exists_eq_mul (h : IsBigOWith c l u v) (hc : 0 ‚â§ c) :
    ‚àÉ œÜ : Œ± ‚Üí ùïú, (‚àÄ·∂† x in l, ‚ÄñœÜ x‚Äñ ‚â§ c) ‚àß u =·∂†[l] œÜ * v :=
  (isBigOWith_iff_exists_eq_mul hc).mp h

theorem isBigO_iff_exists_eq_mul :
    u =O[l] v ‚Üî ‚àÉ œÜ : Œ± ‚Üí ùïú, l.IsBoundedUnder (¬∑ ‚â§ ¬∑) (norm ‚àò œÜ) ‚àß u =·∂†[l] œÜ * v := by
  constructor
  ¬∑ rintro h
    rcases h.exists_nonneg with ‚ü®c, hnnc, hc‚ü©
    rcases hc.exists_eq_mul hnnc with ‚ü®œÜ, hœÜ, huvœÜ‚ü©
    exact ‚ü®œÜ, ‚ü®c, hœÜ‚ü©, huvœÜ‚ü©
  ¬∑ rintro ‚ü®œÜ, ‚ü®c, hœÜ‚ü©, huvœÜ‚ü©
    exact isBigO_iff_isBigOWith.2 ‚ü®c, isBigOWith_of_eq_mul œÜ hœÜ huvœÜ‚ü©

alias ‚ü®IsBigO.exists_eq_mul, _‚ü© := isBigO_iff_exists_eq_mul

theorem isLittleO_iff_exists_eq_mul :
    u =o[l] v ‚Üî ‚àÉ œÜ : Œ± ‚Üí ùïú, Tendsto œÜ l (ùìù 0) ‚àß u =·∂†[l] œÜ * v := by
  constructor
  ¬∑ exact fun h => ‚ü®fun x => u x / v x, h.tendsto_div_nhds_zero, h.eventually_mul_div_cancel.symm‚ü©
  ¬∑ simp only [IsLittleO_def]
    rintro ‚ü®œÜ, hœÜ, huvœÜ‚ü© c hpos
    rw [NormedAddCommGroup.tendsto_nhds_zero] at hœÜ
    exact isBigOWith_of_eq_mul _ ((hœÜ c hpos).mono fun x => le_of_lt) huvœÜ

alias ‚ü®IsLittleO.exists_eq_mul, _‚ü© := isLittleO_iff_exists_eq_mul

end ExistsMulEq

/-! ### Miscellaneous lemmas -/


theorem div_isBoundedUnder_of_isBigO {Œ± : Type*} {l : Filter Œ±} {f g : Œ± ‚Üí ùïú} (h : f =O[l] g) :
    IsBoundedUnder (¬∑ ‚â§ ¬∑) l fun x => ‚Äñf x / g x‚Äñ := by
  obtain ‚ü®c, h‚ÇÄ, hc‚ü© := h.exists_nonneg
  refine ‚ü®c, eventually_map.2 (hc.bound.mono fun x hx => ?_)‚ü©
  rw [norm_div]
  exact div_le_of_nonneg_of_le_mul (norm_nonneg _) h‚ÇÄ hx

theorem isBigO_iff_div_isBoundedUnder {Œ± : Type*} {l : Filter Œ±} {f g : Œ± ‚Üí ùïú}
    (hgf : ‚àÄ·∂† x in l, g x = 0 ‚Üí f x = 0) :
    f =O[l] g ‚Üî IsBoundedUnder (¬∑ ‚â§ ¬∑) l fun x => ‚Äñf x / g x‚Äñ := by
  refine ‚ü®div_isBoundedUnder_of_isBigO, fun h => ?_‚ü©
  obtain ‚ü®c, hc‚ü© := h
  simp only [eventually_map, norm_div] at hc
  refine IsBigO.of_bound c (hc.mp <| hgf.mono fun x hx‚ÇÅ hx‚ÇÇ => ?_)
  by_cases hgx : g x = 0
  ¬∑ simp [hx‚ÇÅ hgx, hgx]
  ¬∑ exact (div_le_iff‚ÇÄ (norm_pos_iff.2 hgx)).mp hx‚ÇÇ

theorem isBigO_of_div_tendsto_nhds {Œ± : Type*} {l : Filter Œ±} {f g : Œ± ‚Üí ùïú}
    (hgf : ‚àÄ·∂† x in l, g x = 0 ‚Üí f x = 0) (c : ùïú) (H : Filter.Tendsto (f / g) l (ùìù c)) :
    f =O[l] g :=
  (isBigO_iff_div_isBoundedUnder hgf).2 <| H.norm.isBoundedUnder_le

theorem IsLittleO.tendsto_zero_of_tendsto {Œ± E ùïú : Type*} [NormedAddCommGroup E] [NormedField ùïú]
    {u : Œ± ‚Üí E} {v : Œ± ‚Üí ùïú} {l : Filter Œ±} {y : ùïú} (huv : u =o[l] v) (hv : Tendsto v l (ùìù y)) :
    Tendsto u l (ùìù 0) := by
  suffices h : u =o[l] fun _x => (1 : ùïú) by
    rwa [isLittleO_one_iff] at h
  exact huv.trans_isBigO (hv.isBigO_one ùïú)

theorem isLittleO_pow_pow {m n : ‚Ñï} (h : m < n) : (fun x : ùïú => x ^ n) =o[ùìù 0] fun x => x ^ m := by
  rcases lt_iff_exists_add.1 h with ‚ü®p, hp0 : 0 < p, rfl‚ü©
  suffices (fun x : ùïú => x ^ m * x ^ p) =o[ùìù 0] fun x => x ^ m * 1 ^ p by
    simpa only [pow_add, one_pow, mul_one]
  exact IsBigO.mul_isLittleO (isBigO_refl _ _)
    (IsLittleO.pow ((isLittleO_one_iff _).2 tendsto_id) hp0)

theorem isLittleO_norm_pow_norm_pow {m n : ‚Ñï} (h : m < n) :
    (fun x : E' => ‚Äñx‚Äñ ^ n) =o[ùìù 0] fun x => ‚Äñx‚Äñ ^ m :=
  (isLittleO_pow_pow h).comp_tendsto tendsto_norm_zero

theorem isLittleO_pow_id {n : ‚Ñï} (h : 1 < n) : (fun x : ùïú => x ^ n) =o[ùìù 0] fun x => x := by
  convert isLittleO_pow_pow h (ùïú := ùïú)
  simp only [pow_one]

theorem isLittleO_norm_pow_id {n : ‚Ñï} (h : 1 < n) :
    (fun x : E' => ‚Äñx‚Äñ ^ n) =o[ùìù 0] fun x => x := by
  have := @isLittleO_norm_pow_norm_pow E' _ _ _ h
  simp only [pow_one] at this
  exact isLittleO_norm_right.mp this

theorem IsBigO.eq_zero_of_norm_pow_within {f : E'' ‚Üí F''} {s : Set E''} {x‚ÇÄ : E''} {n : ‚Ñï}
    (h : f =O[ùìù[s] x‚ÇÄ] fun x => ‚Äñx - x‚ÇÄ‚Äñ ^ n) (hx‚ÇÄ : x‚ÇÄ ‚àà s) (hn : n ‚â† 0) : f x‚ÇÄ = 0 :=
  mem_of_mem_nhdsWithin hx‚ÇÄ h.eq_zero_imp <| by simp_rw [sub_self, norm_zero, zero_pow hn]

theorem IsBigO.eq_zero_of_norm_pow {f : E'' ‚Üí F''} {x‚ÇÄ : E''} {n : ‚Ñï}
    (h : f =O[ùìù x‚ÇÄ] fun x => ‚Äñx - x‚ÇÄ‚Äñ ^ n) (hn : n ‚â† 0) : f x‚ÇÄ = 0 := by
  rw [‚Üê nhdsWithin_univ] at h
  exact h.eq_zero_of_norm_pow_within (mem_univ _) hn

theorem isLittleO_pow_sub_pow_sub (x‚ÇÄ : E') {n m : ‚Ñï} (h : n < m) :
    (fun x => ‚Äñx - x‚ÇÄ‚Äñ ^ m) =o[ùìù x‚ÇÄ] fun x => ‚Äñx - x‚ÇÄ‚Äñ ^ n :=
  haveI : Tendsto (fun x => ‚Äñx - x‚ÇÄ‚Äñ) (ùìù x‚ÇÄ) (ùìù 0) := by
    apply tendsto_norm_zero.comp
    rw [‚Üê sub_self x‚ÇÄ]
    exact tendsto_id.sub tendsto_const_nhds
  (isLittleO_pow_pow h).comp_tendsto this

theorem isLittleO_pow_sub_sub (x‚ÇÄ : E') {m : ‚Ñï} (h : 1 < m) :
    (fun x => ‚Äñx - x‚ÇÄ‚Äñ ^ m) =o[ùìù x‚ÇÄ] fun x => x - x‚ÇÄ := by
  simpa only [isLittleO_norm_right, pow_one] using isLittleO_pow_sub_pow_sub x‚ÇÄ h

theorem IsBigOWith.right_le_sub_of_lt_one {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'} (h : IsBigOWith c l f‚ÇÅ f‚ÇÇ) (hc : c < 1) :
    IsBigOWith (1 / (1 - c)) l f‚ÇÇ fun x => f‚ÇÇ x - f‚ÇÅ x :=
  IsBigOWith.of_bound <|
    mem_of_superset h.bound fun x hx => by
      simp only [mem_setOf_eq] at hx ‚ä¢
      rw [mul_comm, one_div, ‚Üê div_eq_mul_inv, le_div_iff‚ÇÄ, mul_sub, mul_one, mul_comm]
      ¬∑ exact le_trans (sub_le_sub_left hx _) (norm_sub_norm_le _ _)
      ¬∑ exact sub_pos.2 hc

theorem IsBigOWith.right_le_add_of_lt_one {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'} (h : IsBigOWith c l f‚ÇÅ f‚ÇÇ) (hc : c < 1) :
    IsBigOWith (1 / (1 - c)) l f‚ÇÇ fun x => f‚ÇÅ x + f‚ÇÇ x :=
  (h.neg_right.right_le_sub_of_lt_one hc).neg_right.of_neg_left.congr rfl (fun x ‚Ü¶ rfl) fun x ‚Ü¶ by
    rw [neg_sub, sub_neg_eq_add]

@[deprecated (since := "2024-01-31")]
alias IsBigOWith.right_le_sub_of_lt_1 := IsBigOWith.right_le_sub_of_lt_one

@[deprecated (since := "2024-01-31")]
alias IsBigOWith.right_le_add_of_lt_1 := IsBigOWith.right_le_add_of_lt_one

theorem IsLittleO.right_isBigO_sub {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'} (h : f‚ÇÅ =o[l] f‚ÇÇ) :
    f‚ÇÇ =O[l] fun x => f‚ÇÇ x - f‚ÇÅ x :=
  ((h.def' one_half_pos).right_le_sub_of_lt_one one_half_lt_one).isBigO

theorem IsLittleO.right_isBigO_add {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'} (h : f‚ÇÅ =o[l] f‚ÇÇ) :
    f‚ÇÇ =O[l] fun x => f‚ÇÅ x + f‚ÇÇ x :=
  ((h.def' one_half_pos).right_le_add_of_lt_one one_half_lt_one).isBigO

theorem IsLittleO.right_isBigO_add' {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'} (h : f‚ÇÅ =o[l] f‚ÇÇ) :
    f‚ÇÇ =O[l] (f‚ÇÇ + f‚ÇÅ) :=
  add_comm f‚ÇÅ f‚ÇÇ ‚ñ∏ h.right_isBigO_add

/-- If `f x = O(g x)` along `cofinite`, then there exists a positive constant `C` such that
`‚Äñf x‚Äñ ‚â§ C * ‚Äñg x‚Äñ` whenever `g x ‚â† 0`. -/
theorem bound_of_isBigO_cofinite (h : f =O[cofinite] g'') :
    ‚àÉ C > 0, ‚àÄ ‚¶Éx‚¶Ñ, g'' x ‚â† 0 ‚Üí ‚Äñf x‚Äñ ‚â§ C * ‚Äñg'' x‚Äñ := by
  rcases h.exists_pos with ‚ü®C, C‚ÇÄ, hC‚ü©
  rw [IsBigOWith_def, eventually_cofinite] at hC
  rcases (hC.toFinset.image fun x => ‚Äñf x‚Äñ / ‚Äñg'' x‚Äñ).exists_le with ‚ü®C', hC'‚ü©
  have : ‚àÄ x, C * ‚Äñg'' x‚Äñ < ‚Äñf x‚Äñ ‚Üí ‚Äñf x‚Äñ / ‚Äñg'' x‚Äñ ‚â§ C' := by simpa using hC'
  refine ‚ü®max C C', lt_max_iff.2 (Or.inl C‚ÇÄ), fun x h‚ÇÄ => ?_‚ü©
  rw [max_mul_of_nonneg _ _ (norm_nonneg _), le_max_iff, or_iff_not_imp_left, not_le]
  exact fun hx => (div_le_iff‚ÇÄ (norm_pos_iff.2 h‚ÇÄ)).1 (this _ hx)

theorem isBigO_cofinite_iff (h : ‚àÄ x, g'' x = 0 ‚Üí f'' x = 0) :
    f'' =O[cofinite] g'' ‚Üî ‚àÉ C, ‚àÄ x, ‚Äñf'' x‚Äñ ‚â§ C * ‚Äñg'' x‚Äñ :=
  ‚ü®fun h' =>
    let ‚ü®C, _C‚ÇÄ, hC‚ü© := bound_of_isBigO_cofinite h'
    ‚ü®C, fun x => if hx : g'' x = 0 then by simp [h _ hx, hx] else hC hx‚ü©,
    fun h => (isBigO_top.2 h).mono le_top‚ü©

theorem bound_of_isBigO_nat_atTop {f : ‚Ñï ‚Üí E} {g'' : ‚Ñï ‚Üí E''} (h : f =O[atTop] g'') :
    ‚àÉ C > 0, ‚àÄ ‚¶Éx‚¶Ñ, g'' x ‚â† 0 ‚Üí ‚Äñf x‚Äñ ‚â§ C * ‚Äñg'' x‚Äñ :=
  bound_of_isBigO_cofinite <| by rwa [Nat.cofinite_eq_atTop]

theorem isBigO_nat_atTop_iff {f : ‚Ñï ‚Üí E''} {g : ‚Ñï ‚Üí F''} (h : ‚àÄ x, g x = 0 ‚Üí f x = 0) :
    f =O[atTop] g ‚Üî ‚àÉ C, ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C * ‚Äñg x‚Äñ := by
  rw [‚Üê Nat.cofinite_eq_atTop, isBigO_cofinite_iff h]

theorem isBigO_one_nat_atTop_iff {f : ‚Ñï ‚Üí E''} :
    f =O[atTop] (fun _n => 1 : ‚Ñï ‚Üí ‚Ñù) ‚Üî ‚àÉ C, ‚àÄ n, ‚Äñf n‚Äñ ‚â§ C :=
  Iff.trans (isBigO_nat_atTop_iff fun n h => (one_ne_zero h).elim) <| by
    simp only [norm_one, mul_one]

theorem isBigOWith_pi {Œπ : Type*} [Fintype Œπ] {E' : Œπ ‚Üí Type*} [‚àÄ i, NormedAddCommGroup (E' i)]
    {f : Œ± ‚Üí ‚àÄ i, E' i} {C : ‚Ñù} (hC : 0 ‚â§ C) :
    IsBigOWith C l f g' ‚Üî ‚àÄ i, IsBigOWith C l (fun x => f x i) g' := by
  have : ‚àÄ x, 0 ‚â§ C * ‚Äñg' x‚Äñ := fun x => mul_nonneg hC (norm_nonneg _)
  simp only [isBigOWith_iff, pi_norm_le_iff_of_nonneg (this _), eventually_all]

@[simp]
theorem isBigO_pi {Œπ : Type*} [Fintype Œπ] {E' : Œπ ‚Üí Type*} [‚àÄ i, NormedAddCommGroup (E' i)]
    {f : Œ± ‚Üí ‚àÄ i, E' i} : f =O[l] g' ‚Üî ‚àÄ i, (fun x => f x i) =O[l] g' := by
  simp only [isBigO_iff_eventually_isBigOWith, ‚Üê eventually_all]
  exact eventually_congr (eventually_atTop.2 ‚ü®0, fun c => isBigOWith_pi‚ü©)

@[simp]
theorem isLittleO_pi {Œπ : Type*} [Fintype Œπ] {E' : Œπ ‚Üí Type*} [‚àÄ i, NormedAddCommGroup (E' i)]
    {f : Œ± ‚Üí ‚àÄ i, E' i} : f =o[l] g' ‚Üî ‚àÄ i, (fun x => f x i) =o[l] g' := by
  simp (config := { contextual := true }) only [IsLittleO_def, isBigOWith_pi, le_of_lt]
  exact ‚ü®fun h i c hc => h hc i, fun h c hc i => h i hc‚ü©

theorem IsBigO.natCast_atTop {R : Type*} [StrictOrderedSemiring R] [Archimedean R]
    {f : R ‚Üí E} {g : R ‚Üí F} (h : f =O[atTop] g) :
    (fun (n : ‚Ñï) => f n) =O[atTop] (fun n => g n) :=
  IsBigO.comp_tendsto h tendsto_natCast_atTop_atTop

@[deprecated (since := "2024-04-17")]
alias IsBigO.nat_cast_atTop := IsBigO.natCast_atTop

theorem IsLittleO.natCast_atTop {R : Type*} [StrictOrderedSemiring R] [Archimedean R]
    {f : R ‚Üí E} {g : R ‚Üí F} (h : f =o[atTop] g) :
    (fun (n : ‚Ñï) => f n) =o[atTop] (fun n => g n) :=
  IsLittleO.comp_tendsto h tendsto_natCast_atTop_atTop

@[deprecated (since := "2024-04-17")]
alias IsLittleO.nat_cast_atTop := IsLittleO.natCast_atTop

theorem isBigO_atTop_iff_eventually_exists {Œ± : Type*} [SemilatticeSup Œ±] [Nonempty Œ±]
    {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} : f =O[atTop] g ‚Üî ‚àÄ·∂† n‚ÇÄ in atTop, ‚àÉ c, ‚àÄ n ‚â• n‚ÇÄ, ‚Äñf n‚Äñ ‚â§ c * ‚Äñg n‚Äñ := by
  rw [isBigO_iff, exists_eventually_atTop]

theorem isBigO_atTop_iff_eventually_exists_pos {Œ± : Type*}
    [SemilatticeSup Œ±] [Nonempty Œ±] {f : Œ± ‚Üí G} {g : Œ± ‚Üí G'} :
    f =O[atTop] g ‚Üî ‚àÄ·∂† n‚ÇÄ in atTop, ‚àÉ c > 0, ‚àÄ n ‚â• n‚ÇÄ, c * ‚Äñf n‚Äñ ‚â§ ‚Äñg n‚Äñ := by
  simp_rw [isBigO_iff'', ‚Üê exists_prop, Subtype.exists', exists_eventually_atTop]

end Asymptotics

open Asymptotics

theorem summable_of_isBigO {Œπ E} [SeminormedAddCommGroup E] [CompleteSpace E]
    {f : Œπ ‚Üí E} {g : Œπ ‚Üí ‚Ñù} (hg : Summable g) (h : f =O[cofinite] g) : Summable f :=
  let ‚ü®C, hC‚ü© := h.isBigOWith
  .of_norm_bounded_eventually (fun x => C * ‚Äñg x‚Äñ) (hg.abs.mul_left _) hC.bound

theorem summable_of_isBigO_nat {E} [SeminormedAddCommGroup E] [CompleteSpace E]
    {f : ‚Ñï ‚Üí E} {g : ‚Ñï ‚Üí ‚Ñù} (hg : Summable g) (h : f =O[atTop] g) : Summable f :=
  summable_of_isBigO hg <| Nat.cofinite_eq_atTop.symm ‚ñ∏ h

lemma Asymptotics.IsBigO.comp_summable_norm {Œπ E F : Type*}
    [SeminormedAddCommGroup E] [SeminormedAddCommGroup F] {f : E ‚Üí F} {g : Œπ ‚Üí E}
    (hf : f =O[ùìù 0] id) (hg : Summable (‚Äñg ¬∑‚Äñ)) : Summable (‚Äñf <| g ¬∑‚Äñ) :=
  summable_of_isBigO hg <| hf.norm_norm.comp_tendsto <|
    tendsto_zero_iff_norm_tendsto_zero.2 hg.tendsto_cofinite_zero

namespace PartialHomeomorph

variable {Œ± : Type*} {Œ≤ : Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]
variable {E : Type*} [Norm E] {F : Type*} [Norm F]

/-- Transfer `IsBigOWith` over a `PartialHomeomorph`. -/
theorem isBigOWith_congr (e : PartialHomeomorph Œ± Œ≤) {b : Œ≤} (hb : b ‚àà e.target) {f : Œ≤ ‚Üí E}
    {g : Œ≤ ‚Üí F} {C : ‚Ñù} : IsBigOWith C (ùìù b) f g ‚Üî IsBigOWith C (ùìù (e.symm b)) (f ‚àò e) (g ‚àò e) :=
  ‚ü®fun h =>
    h.comp_tendsto <| by
      have := e.continuousAt (e.map_target hb)
      rwa [ContinuousAt, e.rightInvOn hb] at this,
    fun h =>
    (h.comp_tendsto (e.continuousAt_symm hb)).congr' rfl
      ((e.eventually_right_inverse hb).mono fun x hx => congr_arg f hx)
      ((e.eventually_right_inverse hb).mono fun x hx => congr_arg g hx)‚ü©

/-- Transfer `IsBigO` over a `PartialHomeomorph`. -/
theorem isBigO_congr (e : PartialHomeomorph Œ± Œ≤) {b : Œ≤} (hb : b ‚àà e.target) {f : Œ≤ ‚Üí E}
    {g : Œ≤ ‚Üí F} : f =O[ùìù b] g ‚Üî (f ‚àò e) =O[ùìù (e.symm b)] (g ‚àò e) := by
  simp only [IsBigO_def]
  exact exists_congr fun C => e.isBigOWith_congr hb

/-- Transfer `IsLittleO` over a `PartialHomeomorph`. -/
theorem isLittleO_congr (e : PartialHomeomorph Œ± Œ≤) {b : Œ≤} (hb : b ‚àà e.target) {f : Œ≤ ‚Üí E}
    {g : Œ≤ ‚Üí F} : f =o[ùìù b] g ‚Üî (f ‚àò e) =o[ùìù (e.symm b)] (g ‚àò e) := by
  simp only [IsLittleO_def]
  exact forall‚ÇÇ_congr fun c _hc => e.isBigOWith_congr hb

end PartialHomeomorph

namespace Homeomorph

variable {Œ± : Type*} {Œ≤ : Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]
variable {E : Type*} [Norm E] {F : Type*} [Norm F]

open Asymptotics

/-- Transfer `IsBigOWith` over a `Homeomorph`. -/
theorem isBigOWith_congr (e : Œ± ‚âÉ‚Çú Œ≤) {b : Œ≤} {f : Œ≤ ‚Üí E} {g : Œ≤ ‚Üí F} {C : ‚Ñù} :
    IsBigOWith C (ùìù b) f g ‚Üî IsBigOWith C (ùìù (e.symm b)) (f ‚àò e) (g ‚àò e) :=
  e.toPartialHomeomorph.isBigOWith_congr trivial

/-- Transfer `IsBigO` over a `Homeomorph`. -/
theorem isBigO_congr (e : Œ± ‚âÉ‚Çú Œ≤) {b : Œ≤} {f : Œ≤ ‚Üí E} {g : Œ≤ ‚Üí F} :
    f =O[ùìù b] g ‚Üî (f ‚àò e) =O[ùìù (e.symm b)] (g ‚àò e) := by
  simp only [IsBigO_def]
  exact exists_congr fun C => e.isBigOWith_congr

/-- Transfer `IsLittleO` over a `Homeomorph`. -/
theorem isLittleO_congr (e : Œ± ‚âÉ‚Çú Œ≤) {b : Œ≤} {f : Œ≤ ‚Üí E} {g : Œ≤ ‚Üí F} :
    f =o[ùìù b] g ‚Üî (f ‚àò e) =o[ùìù (e.symm b)] (g ‚àò e) := by
  simp only [IsLittleO_def]
  exact forall‚ÇÇ_congr fun c _hc => e.isBigOWith_congr

end Homeomorph

namespace ContinuousOn

variable {Œ± E F : Type*} [TopologicalSpace Œ±] {s : Set Œ±} {f : Œ± ‚Üí E} {c : F}

section IsBigO

variable [SeminormedAddGroup E] [Norm F]

protected theorem isBigOWith_principal
    (hf : ContinuousOn f s) (hs : IsCompact s) (hc : ‚Äñc‚Äñ ‚â† 0) :
    IsBigOWith (sSup (Norm.norm '' (f '' s)) / ‚Äñc‚Äñ) (ùìü s) f fun _ => c := by
  rw [isBigOWith_principal, div_mul_cancel‚ÇÄ _ hc]
  exact fun x hx ‚Ü¶ hs.image_of_continuousOn hf |>.image continuous_norm
   |>.isLUB_sSup (Set.image_nonempty.mpr <| Set.image_nonempty.mpr ‚ü®x, hx‚ü©)
   |>.left <| Set.mem_image_of_mem _ <| Set.mem_image_of_mem _ hx

protected theorem isBigO_principal (hf : ContinuousOn f s) (hs : IsCompact s)
    (hc : ‚Äñc‚Äñ ‚â† 0) : f =O[ùìü s] fun _ => c :=
  (hf.isBigOWith_principal hs hc).isBigO

end IsBigO

section IsBigORev

variable [NormedAddGroup E] [SeminormedAddGroup F]

protected theorem isBigOWith_rev_principal
    (hf : ContinuousOn f s) (hs : IsCompact s) (hC : ‚àÄ i ‚àà s, f i ‚â† 0) (c : F) :
    IsBigOWith (‚Äñc‚Äñ / sInf (Norm.norm '' (f '' s))) (ùìü s) (fun _ => c) f := by
  refine isBigOWith_principal.mpr fun x hx ‚Ü¶ ?_
  rw [mul_comm_div]
  replace hs := hs.image_of_continuousOn hf |>.image continuous_norm
  have h_sInf := hs.isGLB_sInf <| Set.image_nonempty.mpr <| Set.image_nonempty.mpr ‚ü®x, hx‚ü©
  refine le_mul_of_one_le_right (norm_nonneg c) <| (one_le_div ?_).mpr <|
    h_sInf.1 <| Set.mem_image_of_mem _ <| Set.mem_image_of_mem _ hx
  obtain ‚ü®_, ‚ü®x, hx, hCx‚ü©, hnormCx‚ü© := hs.sInf_mem h_sInf.nonempty
  rw [‚Üê hnormCx, ‚Üê hCx]
  exact (norm_ne_zero_iff.mpr (hC x hx)).symm.lt_of_le (norm_nonneg _)

protected theorem isBigO_rev_principal (hf : ContinuousOn f s)
    (hs : IsCompact s) (hC : ‚àÄ i ‚àà s, f i ‚â† 0) (c : F) : (fun _ => c) =O[ùìü s] f :=
  (hf.isBigOWith_rev_principal hs hC c).isBigO

end IsBigORev

end ContinuousOn

set_option linter.style.longFile 2200
