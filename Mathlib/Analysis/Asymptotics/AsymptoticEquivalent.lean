/-
Copyright (c) 2020 Anatole Dedecker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anatole Dedecker
-/
import Mathlib.Analysis.Asymptotics.Asymptotics
import Mathlib.Analysis.Asymptotics.Theta
import Mathlib.Analysis.Normed.Order.Basic

#align_import analysis.asymptotics.asymptotic_equivalent from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# Asymptotic equivalence

In this file, we define the relation `IsEquivalent l u v`, which means that `u-v` is little o of
`v` along the filter `l`.

Unlike `Is(Little|Big)O` relations, this one requires `u` and `v` to have the same codomain `Œ≤`.
While the definition only requires `Œ≤` to be a `NormedAddCommGroup`, most interesting properties
require it to be a `NormedField`.

## Notations

We introduce the notation `u ~[l] v := IsEquivalent l u v`, which you can use by opening the
`Asymptotics` locale.

## Main results

If `Œ≤` is a `NormedAddCommGroup` :

- `_ ~[l] _` is an equivalence relation
- Equivalent statements for `u ~[l] const _ c` :
  - If `c ‚â† 0`, this is true iff `Tendsto u l (ùìù c)` (see `isEquivalent_const_iff_tendsto`)
  - For `c = 0`, this is true iff `u =·∂†[l] 0` (see `isEquivalent_zero_iff_eventually_zero`)

If `Œ≤` is a `NormedField` :

- Alternative characterization of the relation (see `isEquivalent_iff_exists_eq_mul`) :

  `u ~[l] v ‚Üî ‚àÉ (œÜ : Œ± ‚Üí Œ≤) (hœÜ : Tendsto œÜ l (ùìù 1)), u =·∂†[l] œÜ * v`

- Provided some non-vanishing hypothesis, this can be seen as `u ~[l] v ‚Üî Tendsto (u/v) l (ùìù 1)`
  (see `isEquivalent_iff_tendsto_one`)
- For any constant `c`, `u ~[l] v` implies `Tendsto u l (ùìù c) ‚Üî Tendsto v l (ùìù c)`
  (see `IsEquivalent.tendsto_nhds_iff`)
- `*` and `/` are compatible with `_ ~[l] _` (see `IsEquivalent.mul` and `IsEquivalent.div`)

If `Œ≤` is a `NormedLinearOrderedField` :

- If `u ~[l] v`, we have `Tendsto u l atTop ‚Üî Tendsto v l atTop`
  (see `IsEquivalent.tendsto_atTop_iff`)

## Implementation Notes

Note that `IsEquivalent` takes the parameters `(l : Filter Œ±) (u v : Œ± ‚Üí Œ≤)` in that order.
This is to enable `calc` support, as `calc` requires that the last two explicit arguments are `u v`.

-/


namespace Asymptotics

open Filter Function

open Topology

section NormedAddCommGroup

variable {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ≤]

/-- Two functions `u` and `v` are said to be asymptotically equivalent along a filter `l` when
    `u x - v x = o(v x)` as `x` converges along `l`. -/
def IsEquivalent (l : Filter Œ±) (u v : Œ± ‚Üí Œ≤) :=
  (u - v) =o[l] v
#align asymptotics.is_equivalent Asymptotics.IsEquivalent

@[inherit_doc] scoped notation:50 u " ~[" l:50 "] " v:50 => Asymptotics.IsEquivalent l u v

variable {u v w : Œ± ‚Üí Œ≤} {l : Filter Œ±}

theorem IsEquivalent.isLittleO (h : u ~[l] v) : (u - v) =o[l] v := h
#align asymptotics.is_equivalent.is_o Asymptotics.IsEquivalent.isLittleO

nonrec theorem IsEquivalent.isBigO (h : u ~[l] v) : u =O[l] v :=
  (IsBigO.congr_of_sub h.isBigO.symm).mp (isBigO_refl _ _)
set_option linter.uppercaseLean3 false in
#align asymptotics.is_equivalent.is_O Asymptotics.IsEquivalent.isBigO

theorem IsEquivalent.isBigO_symm (h : u ~[l] v) : v =O[l] u := by
  convert h.isLittleO.right_isBigO_add
  simp
set_option linter.uppercaseLean3 false in
#align asymptotics.is_equivalent.is_O_symm Asymptotics.IsEquivalent.isBigO_symm

theorem IsEquivalent.isTheta (h : u ~[l] v) : u =Œò[l] v :=
  ‚ü®h.isBigO, h.isBigO_symm‚ü©

theorem IsEquivalent.isTheta_symm (h : u ~[l] v) : v =Œò[l] u :=
  ‚ü®h.isBigO_symm, h.isBigO‚ü©

@[refl]
theorem IsEquivalent.refl : u ~[l] u := by
  rw [IsEquivalent, sub_self]
  exact isLittleO_zero _ _
#align asymptotics.is_equivalent.refl Asymptotics.IsEquivalent.refl

@[symm]
theorem IsEquivalent.symm (h : u ~[l] v) : v ~[l] u :=
  (h.isLittleO.trans_isBigO h.isBigO_symm).symm
#align asymptotics.is_equivalent.symm Asymptotics.IsEquivalent.symm

@[trans]
theorem IsEquivalent.trans {l : Filter Œ±} {u v w : Œ± ‚Üí Œ≤} (huv : u ~[l] v) (hvw : v ~[l] w) :
    u ~[l] w :=
  (huv.isLittleO.trans_isBigO hvw.isBigO).triangle hvw.isLittleO
#align asymptotics.is_equivalent.trans Asymptotics.IsEquivalent.trans

theorem IsEquivalent.congr_left {u v w : Œ± ‚Üí Œ≤} {l : Filter Œ±} (huv : u ~[l] v) (huw : u =·∂†[l] w) :
    w ~[l] v :=
  huv.congr' (huw.sub (EventuallyEq.refl _ _)) (EventuallyEq.refl _ _)
#align asymptotics.is_equivalent.congr_left Asymptotics.IsEquivalent.congr_left

theorem IsEquivalent.congr_right {u v w : Œ± ‚Üí Œ≤} {l : Filter Œ±} (huv : u ~[l] v) (hvw : v =·∂†[l] w) :
    u ~[l] w :=
  (huv.symm.congr_left hvw).symm
#align asymptotics.is_equivalent.congr_right Asymptotics.IsEquivalent.congr_right

theorem isEquivalent_zero_iff_eventually_zero : u ~[l] 0 ‚Üî u =·∂†[l] 0 := by
  rw [IsEquivalent, sub_zero]
  exact isLittleO_zero_right_iff
#align asymptotics.is_equivalent_zero_iff_eventually_zero Asymptotics.isEquivalent_zero_iff_eventually_zero

theorem isEquivalent_zero_iff_isBigO_zero : u ~[l] 0 ‚Üî u =O[l] (0 : Œ± ‚Üí Œ≤) := by
  refine' ‚ü®IsEquivalent.isBigO, fun h ‚Ü¶ _‚ü©
  rw [isEquivalent_zero_iff_eventually_zero, eventuallyEq_iff_exists_mem]
  exact ‚ü®{ x : Œ± | u x = 0 }, isBigO_zero_right_iff.mp h, fun x hx ‚Ü¶ hx‚ü©
set_option linter.uppercaseLean3 false in
#align asymptotics.is_equivalent_zero_iff_is_O_zero Asymptotics.isEquivalent_zero_iff_isBigO_zero

theorem isEquivalent_const_iff_tendsto {c : Œ≤} (h : c ‚â† 0) :
    u ~[l] const _ c ‚Üî Tendsto u l (ùìù c) := by
  simp (config := { unfoldPartialApp := true }) only [IsEquivalent, const, isLittleO_const_iff h]
  constructor <;> intro h
  ¬∑ have := h.sub (tendsto_const_nhds (x := -c))
    simp only [Pi.sub_apply, sub_neg_eq_add, sub_add_cancel, zero_add] at this
    exact this
  ¬∑ have := h.sub (tendsto_const_nhds (x := c))
    rwa [sub_self] at this
#align asymptotics.is_equivalent_const_iff_tendsto Asymptotics.isEquivalent_const_iff_tendsto

theorem IsEquivalent.tendsto_const {c : Œ≤} (hu : u ~[l] const _ c) : Tendsto u l (ùìù c) := by
  rcases em <| c = 0 with rfl | h
  ¬∑ exact (tendsto_congr' <| isEquivalent_zero_iff_eventually_zero.mp hu).mpr tendsto_const_nhds
  ¬∑ exact (isEquivalent_const_iff_tendsto h).mp hu
#align asymptotics.is_equivalent.tendsto_const Asymptotics.IsEquivalent.tendsto_const

theorem IsEquivalent.tendsto_nhds {c : Œ≤} (huv : u ~[l] v) (hu : Tendsto u l (ùìù c)) :
    Tendsto v l (ùìù c) := by
  by_cases h : c = 0
  ¬∑ subst c
    rw [‚Üê isLittleO_one_iff ‚Ñù] at hu ‚ä¢
    simpa using (huv.symm.isLittleO.trans hu).add hu
  ¬∑ rw [‚Üê isEquivalent_const_iff_tendsto h] at hu ‚ä¢
    exact huv.symm.trans hu
#align asymptotics.is_equivalent.tendsto_nhds Asymptotics.IsEquivalent.tendsto_nhds

theorem IsEquivalent.tendsto_nhds_iff {c : Œ≤} (huv : u ~[l] v) :
    Tendsto u l (ùìù c) ‚Üî Tendsto v l (ùìù c) :=
  ‚ü®huv.tendsto_nhds, huv.symm.tendsto_nhds‚ü©
#align asymptotics.is_equivalent.tendsto_nhds_iff Asymptotics.IsEquivalent.tendsto_nhds_iff

theorem IsEquivalent.add_isLittleO (huv : u ~[l] v) (hwv : w =o[l] v) : u + w ~[l] v := by
  simpa only [IsEquivalent, add_sub_right_comm] using huv.add hwv
#align asymptotics.is_equivalent.add_is_o Asymptotics.IsEquivalent.add_isLittleO

theorem IsEquivalent.sub_isLittleO (huv : u ~[l] v) (hwv : w =o[l] v) : u - w ~[l] v := by
  simpa only [sub_eq_add_neg] using huv.add_isLittleO hwv.neg_left
#align asymptotics.is_equivalent.sub_is_o Asymptotics.IsEquivalent.sub_isLittleO

theorem IsLittleO.add_isEquivalent (hu : u =o[l] w) (hv : v ~[l] w) : u + v ~[l] w :=
  add_comm v u ‚ñ∏ hv.add_isLittleO hu
#align asymptotics.is_o.add_is_equivalent Asymptotics.IsLittleO.add_isEquivalent

theorem IsLittleO.isEquivalent (huv : (u - v) =o[l] v) : u ~[l] v := huv
#align asymptotics.is_o.is_equivalent Asymptotics.IsLittleO.isEquivalent

theorem IsEquivalent.neg (huv : u ~[l] v) : (fun x ‚Ü¶ -u x) ~[l] fun x ‚Ü¶ -v x := by
  rw [IsEquivalent]
  convert huv.isLittleO.neg_left.neg_right
  simp [neg_add_eq_sub]
#align asymptotics.is_equivalent.neg Asymptotics.IsEquivalent.neg

end NormedAddCommGroup

open Asymptotics

section NormedField

variable {Œ± Œ≤ : Type*} [NormedField Œ≤] {t u v w : Œ± ‚Üí Œ≤} {l : Filter Œ±}

theorem isEquivalent_iff_exists_eq_mul :
    u ~[l] v ‚Üî ‚àÉ (œÜ : Œ± ‚Üí Œ≤) (_ : Tendsto œÜ l (ùìù 1)), u =·∂†[l] œÜ * v := by
  rw [IsEquivalent, isLittleO_iff_exists_eq_mul]
  constructor <;> rintro ‚ü®œÜ, hœÜ, h‚ü© <;> [refine' ‚ü®œÜ + 1, _, _‚ü©; refine' ‚ü®œÜ - 1, _, _‚ü©]
  ¬∑ conv in ùìù _ => rw [‚Üê zero_add (1 : Œ≤)]
    exact hœÜ.add tendsto_const_nhds
  ¬∑ convert h.add (EventuallyEq.refl l v) <;> simp [add_mul]
  ¬∑ conv in ùìù _ => rw [‚Üê sub_self (1 : Œ≤)]
    exact hœÜ.sub tendsto_const_nhds
  ¬∑ convert h.sub (EventuallyEq.refl l v); simp [sub_mul]
#align asymptotics.is_equivalent_iff_exists_eq_mul Asymptotics.isEquivalent_iff_exists_eq_mul

theorem IsEquivalent.exists_eq_mul (huv : u ~[l] v) :
    ‚àÉ (œÜ : Œ± ‚Üí Œ≤) (_ : Tendsto œÜ l (ùìù 1)), u =·∂†[l] œÜ * v :=
  isEquivalent_iff_exists_eq_mul.mp huv
#align asymptotics.is_equivalent.exists_eq_mul Asymptotics.IsEquivalent.exists_eq_mul

theorem isEquivalent_of_tendsto_one (hz : ‚àÄ·∂† x in l, v x = 0 ‚Üí u x = 0)
    (huv : Tendsto (u / v) l (ùìù 1)) : u ~[l] v := by
  rw [isEquivalent_iff_exists_eq_mul]
  exact ‚ü®u / v, huv, hz.mono fun x hz' ‚Ü¶ (div_mul_cancel_of_imp hz').symm‚ü©
#align asymptotics.is_equivalent_of_tendsto_one Asymptotics.isEquivalent_of_tendsto_one

theorem isEquivalent_of_tendsto_one' (hz : ‚àÄ x, v x = 0 ‚Üí u x = 0) (huv : Tendsto (u / v) l (ùìù 1)) :
    u ~[l] v :=
  isEquivalent_of_tendsto_one (eventually_of_forall hz) huv
#align asymptotics.is_equivalent_of_tendsto_one' Asymptotics.isEquivalent_of_tendsto_one'

theorem isEquivalent_iff_tendsto_one (hz : ‚àÄ·∂† x in l, v x ‚â† 0) :
    u ~[l] v ‚Üî Tendsto (u / v) l (ùìù 1) := by
  constructor
  ¬∑ intro hequiv
    have := hequiv.isLittleO.tendsto_div_nhds_zero
    simp only [Pi.sub_apply, sub_div] at this
    have key : Tendsto (fun x ‚Ü¶ v x / v x) l (ùìù 1) :=
      (tendsto_congr' <| hz.mono fun x hnz ‚Ü¶ @div_self _ _ (v x) hnz).mpr tendsto_const_nhds
    convert this.add key
    ¬∑ simp
    ¬∑ norm_num
  ¬∑ exact isEquivalent_of_tendsto_one (hz.mono fun x hnvz hz ‚Ü¶ (hnvz hz).elim)
#align asymptotics.is_equivalent_iff_tendsto_one Asymptotics.isEquivalent_iff_tendsto_one

end NormedField

section SMul

theorem IsEquivalent.smul {Œ± E ùïú : Type*} [NormedField ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E]
    {a b : Œ± ‚Üí ùïú} {u v : Œ± ‚Üí E} {l : Filter Œ±} (hab : a ~[l] b) (huv : u ~[l] v) :
    (fun x ‚Ü¶ a x ‚Ä¢ u x) ~[l] fun x ‚Ü¶ b x ‚Ä¢ v x := by
  rcases hab.exists_eq_mul with ‚ü®œÜ, hœÜ, habœÜ‚ü©
  have : ((fun x ‚Ü¶ a x ‚Ä¢ u x) - (fun x ‚Ü¶ b x ‚Ä¢ v x)) =·∂†[l] fun x ‚Ü¶ b x ‚Ä¢ (œÜ x ‚Ä¢ u x - v x) := by
    -- Porting note: `convert` has become too strong, so we need to specify `using 1`.
    convert (habœÜ.comp‚ÇÇ (¬∑ ‚Ä¢ ¬∑) <| EventuallyEq.refl _ u).sub
      (EventuallyEq.refl _ fun x ‚Ü¶ b x ‚Ä¢ v x) using 1
    ext
    rw [Pi.mul_apply, mul_comm, mul_smul, ‚Üê smul_sub]
  refine' (isLittleO_congr this.symm <| EventuallyEq.rfl).mp ((isBigO_refl b l).smul_isLittleO _)
  rcases huv.isBigO.exists_pos with ‚ü®C, hC, hCuv‚ü©
  rw [IsEquivalent] at *
  rw [isLittleO_iff] at *
  rw [IsBigOWith] at hCuv
  simp only [Metric.tendsto_nhds, dist_eq_norm] at hœÜ
  intro c hc
  specialize hœÜ (c / 2 / C) (div_pos (div_pos hc zero_lt_two) hC)
  specialize huv (div_pos hc zero_lt_two)
  refine' hœÜ.mp (huv.mp <| hCuv.mono fun x hCuvx huvx hœÜx ‚Ü¶ _)
  have key :=
    calc
      ‚ÄñœÜ x - 1‚Äñ * ‚Äñu x‚Äñ ‚â§ c / 2 / C * ‚Äñu x‚Äñ := by gcongr
      _ ‚â§ c / 2 / C * (C * ‚Äñv x‚Äñ) := by gcongr
      _ = c / 2 * ‚Äñv x‚Äñ := by
        field_simp [hC.ne.symm]
        ring
  calc
    ‚Äñ((fun x : Œ± ‚Ü¶ œÜ x ‚Ä¢ u x) - v) x‚Äñ = ‚Äñ(œÜ x - 1) ‚Ä¢ u x + (u x - v x)‚Äñ := by
      simp [sub_smul, sub_add]
    _ ‚â§ ‚Äñ(œÜ x - 1) ‚Ä¢ u x‚Äñ + ‚Äñu x - v x‚Äñ := (norm_add_le _ _)
    _ = ‚ÄñœÜ x - 1‚Äñ * ‚Äñu x‚Äñ + ‚Äñu x - v x‚Äñ := by rw [norm_smul]
    _ ‚â§ c / 2 * ‚Äñv x‚Äñ + ‚Äñu x - v x‚Äñ := by gcongr
    _ ‚â§ c / 2 * ‚Äñv x‚Äñ + c / 2 * ‚Äñv x‚Äñ := by gcongr; exact huvx
    _ = c * ‚Äñv x‚Äñ := by ring
#align asymptotics.is_equivalent.smul Asymptotics.IsEquivalent.smul

end SMul

section mul_inv

variable {Œ± Œ≤ : Type*} [NormedField Œ≤] {t u v w : Œ± ‚Üí Œ≤} {l : Filter Œ±}

theorem IsEquivalent.mul (htu : t ~[l] u) (hvw : v ~[l] w) : t * v ~[l] u * w :=
  htu.smul hvw
#align asymptotics.is_equivalent.mul Asymptotics.IsEquivalent.mul

theorem IsEquivalent.inv (huv : u ~[l] v) : (fun x ‚Ü¶ (u x)‚Åª¬π) ~[l] fun x ‚Ü¶ (v x)‚Åª¬π := by
  rw [isEquivalent_iff_exists_eq_mul] at *
  rcases huv with ‚ü®œÜ, hœÜ, h‚ü©
  rw [‚Üê inv_one]
  refine' ‚ü®fun x ‚Ü¶ (œÜ x)‚Åª¬π, Tendsto.inv‚ÇÄ hœÜ (by norm_num), _‚ü©
  convert h.inv
  simp [mul_comm]
#align asymptotics.is_equivalent.inv Asymptotics.IsEquivalent.inv

theorem IsEquivalent.div (htu : t ~[l] u) (hvw : v ~[l] w) :
    (fun x ‚Ü¶ t x / v x) ~[l] fun x ‚Ü¶ u x / w x := by
  simpa only [div_eq_mul_inv] using htu.mul hvw.inv
#align asymptotics.is_equivalent.div Asymptotics.IsEquivalent.div

end mul_inv

section NormedLinearOrderedField

variable {Œ± Œ≤ : Type*} [NormedLinearOrderedField Œ≤] {u v : Œ± ‚Üí Œ≤} {l : Filter Œ±}

theorem IsEquivalent.tendsto_atTop [OrderTopology Œ≤] (huv : u ~[l] v) (hu : Tendsto u l atTop) :
    Tendsto v l atTop :=
  let ‚ü®œÜ, hœÜ, h‚ü© := huv.symm.exists_eq_mul
  Tendsto.congr' h.symm (mul_comm u œÜ ‚ñ∏ hu.atTop_mul zero_lt_one hœÜ)
#align asymptotics.is_equivalent.tendsto_at_top Asymptotics.IsEquivalent.tendsto_atTop

theorem IsEquivalent.tendsto_atTop_iff [OrderTopology Œ≤] (huv : u ~[l] v) :
    Tendsto u l atTop ‚Üî Tendsto v l atTop :=
  ‚ü®huv.tendsto_atTop, huv.symm.tendsto_atTop‚ü©
#align asymptotics.is_equivalent.tendsto_at_top_iff Asymptotics.IsEquivalent.tendsto_atTop_iff

theorem IsEquivalent.tendsto_atBot [OrderTopology Œ≤] (huv : u ~[l] v) (hu : Tendsto u l atBot) :
    Tendsto v l atBot := by
  convert tendsto_neg_atTop_atBot.comp (huv.neg.tendsto_atTop <| tendsto_neg_atBot_atTop.comp hu)
  ext
  simp
#align asymptotics.is_equivalent.tendsto_at_bot Asymptotics.IsEquivalent.tendsto_atBot

theorem IsEquivalent.tendsto_atBot_iff [OrderTopology Œ≤] (huv : u ~[l] v) :
    Tendsto u l atBot ‚Üî Tendsto v l atBot :=
  ‚ü®huv.tendsto_atBot, huv.symm.tendsto_atBot‚ü©
#align asymptotics.is_equivalent.tendsto_at_bot_iff Asymptotics.IsEquivalent.tendsto_atBot_iff

end NormedLinearOrderedField

end Asymptotics

open Filter Asymptotics

open Asymptotics

variable {Œ± Œ≤ Œ≤‚ÇÇ : Type*} [NormedAddCommGroup Œ≤] [Norm Œ≤‚ÇÇ] {l : Filter Œ±}

theorem Filter.EventuallyEq.isEquivalent {u v : Œ± ‚Üí Œ≤} (h : u =·∂†[l] v) : u ~[l] v :=
  IsEquivalent.congr_right (isLittleO_refl_left _ _) h
#align filter.eventually_eq.is_equivalent Filter.EventuallyEq.isEquivalent

@[trans]
theorem Filter.EventuallyEq.trans_isEquivalent {f g‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤} (h : f =·∂†[l] g‚ÇÅ)
    (h‚ÇÇ : g‚ÇÅ ~[l] g‚ÇÇ) : f ~[l] g‚ÇÇ :=
  h.isEquivalent.trans h‚ÇÇ

namespace Asymptotics

instance transIsEquivalentIsEquivalent :
    @Trans (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤) (IsEquivalent l) (IsEquivalent l) (IsEquivalent l) where
  trans := IsEquivalent.trans

instance transEventuallyEqIsEquivalent :
    @Trans (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤) (EventuallyEq l) (IsEquivalent l) (IsEquivalent l) where
  trans := EventuallyEq.trans_isEquivalent

@[trans]
theorem IsEquivalent.trans_eventuallyEq {f g‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤} (h : f ~[l] g‚ÇÅ)
    (h‚ÇÇ : g‚ÇÅ =·∂†[l] g‚ÇÇ) : f ~[l] g‚ÇÇ :=
  h.trans h‚ÇÇ.isEquivalent

instance transIsEquivalentEventuallyEq :
    @Trans (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤) (IsEquivalent l) (EventuallyEq l) (IsEquivalent l) where
  trans := IsEquivalent.trans_eventuallyEq

@[trans]
theorem IsEquivalent.trans_isBigO {f g‚ÇÅ : Œ± ‚Üí Œ≤} {g‚ÇÇ : Œ± ‚Üí Œ≤‚ÇÇ} (h : f ~[l] g‚ÇÅ) (h‚ÇÇ : g‚ÇÅ =O[l] g‚ÇÇ) :
    f =O[l] g‚ÇÇ :=
  IsBigO.trans h.isBigO h‚ÇÇ

instance transIsEquivalentIsBigO :
    @Trans (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤‚ÇÇ) (IsEquivalent l) (IsBigO l) (IsBigO l) where
  trans := IsEquivalent.trans_isBigO

@[trans]
theorem IsBigO.trans_isEquivalent {f : Œ± ‚Üí Œ≤‚ÇÇ} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤} (h : f =O[l] g‚ÇÅ) (h‚ÇÇ : g‚ÇÅ ~[l] g‚ÇÇ) :
    f =O[l] g‚ÇÇ :=
  IsBigO.trans h h‚ÇÇ.isBigO

instance transIsBigOIsEquivalent :
    @Trans (Œ± ‚Üí Œ≤‚ÇÇ) (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤) (IsBigO l) (IsEquivalent l) (IsBigO l) where
  trans := IsBigO.trans_isEquivalent

@[trans]
theorem IsEquivalent.trans_isLittleO {f g‚ÇÅ : Œ± ‚Üí Œ≤} {g‚ÇÇ : Œ± ‚Üí Œ≤‚ÇÇ} (h : f ~[l] g‚ÇÅ)
    (h‚ÇÇ : g‚ÇÅ =o[l] g‚ÇÇ) : f =o[l] g‚ÇÇ :=
  IsBigO.trans_isLittleO h.isBigO h‚ÇÇ

instance transIsEquivalentIsLittleO :
    @Trans (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤‚ÇÇ) (IsEquivalent l) (IsLittleO l) (IsLittleO l) where
  trans := IsEquivalent.trans_isLittleO

@[trans]
theorem IsLittleO.trans_isEquivalent {f : Œ± ‚Üí Œ≤‚ÇÇ} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤} (h : f =o[l] g‚ÇÅ)
    (h‚ÇÇ : g‚ÇÅ ~[l] g‚ÇÇ) : f =o[l] g‚ÇÇ :=
  IsLittleO.trans_isBigO h h‚ÇÇ.isBigO

instance transIsLittleOIsEquivalent :
    @Trans (Œ± ‚Üí Œ≤‚ÇÇ) (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤) (IsLittleO l) (IsEquivalent l) (IsLittleO l) where
  trans := IsLittleO.trans_isEquivalent

@[trans]
theorem IsEquivalent.trans_isTheta {f g‚ÇÅ : Œ± ‚Üí Œ≤} {g‚ÇÇ : Œ± ‚Üí Œ≤‚ÇÇ} (h : f ~[l] g‚ÇÅ)
    (h‚ÇÇ : g‚ÇÅ =Œò[l] g‚ÇÇ) : f =Œò[l] g‚ÇÇ :=
  IsTheta.trans h.isTheta h‚ÇÇ

instance transIsEquivalentIsTheta :
    @Trans (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤‚ÇÇ) (IsEquivalent l) (IsTheta l) (IsTheta l) where
  trans := IsEquivalent.trans_isTheta

@[trans]
theorem IsTheta.trans_isEquivalent {f : Œ± ‚Üí Œ≤‚ÇÇ} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤} (h : f =Œò[l] g‚ÇÅ)
    (h‚ÇÇ : g‚ÇÅ ~[l] g‚ÇÇ) : f =Œò[l] g‚ÇÇ :=
  IsTheta.trans h h‚ÇÇ.isTheta

instance transIsThetaIsEquivalent :
    @Trans (Œ± ‚Üí Œ≤‚ÇÇ) (Œ± ‚Üí Œ≤) (Œ± ‚Üí Œ≤) (IsTheta l) (IsEquivalent l) (IsTheta l) where
  trans := IsTheta.trans_isEquivalent

end Asymptotics
