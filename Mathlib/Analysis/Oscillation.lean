/-
Copyright (c) 2024 James Sundstrom. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: James Sundstrom
-/
import Mathlib.Data.ENNReal.Real
import Mathlib.Order.WellFoundedSet
import Mathlib.Topology.EMetricSpace.Diam

/-!
# Oscillation

In this file we define the oscillation of a function `f: E ‚Üí F` at a point `x` of `E`. (`E` is
required to be a TopologicalSpace and `F` a PseudoEMetricSpace.) The oscillation of `f` at `x` is
defined to be the infimum of `diam f '' N` for all neighborhoods `N` of `x`. We also define
`oscillationWithin f D x`, which is the oscillation at `x` of `f` restricted to `D`.

We also prove some simple facts about oscillation, most notably that the oscillation of `f`
at `x` is 0 if and only if `f` is continuous at `x`, with versions for both `oscillation` and
`oscillationWithin`.

## Tags

oscillation, oscillationWithin
-/

open Topology EMetric Set ENNReal

universe u v

variable {E : Type u} {F : Type v} [PseudoEMetricSpace F]

/-- The oscillation of `f : E ‚Üí F` at `x`. -/
noncomputable def oscillation [TopologicalSpace E] (f : E ‚Üí F) (x : E) : ENNReal :=
  ‚®Ö S ‚àà (ùìù x).map f, diam S

/-- The oscillation of `f : E ‚Üí F` within `D` at `x`. -/
noncomputable def oscillationWithin [TopologicalSpace E] (f : E ‚Üí F) (D : Set E) (x : E) :
  ENNReal := ‚®Ö S ‚àà (ùìù[D] x).map f, diam S

/-- The oscillation of `f` at `x` within a neighborhood `D` of `x` is equal to `oscillation f x` -/
theorem oscillationWithin_nhd_eq_oscillation [TopologicalSpace E] (f : E ‚Üí F) (D : Set E) (x : E)
    (hD : D ‚àà ùìù x) : oscillationWithin f D x = oscillation f x := by
  rw [oscillation, oscillationWithin, nhdsWithin_eq_nhds.2 hD]

/-- The oscillation of `f` at `x` within `univ` is equal to `oscillation f x` -/
theorem oscillationWithin_univ_eq_oscillation [TopologicalSpace E] (f : E ‚Üí F) (x : E) :
    oscillationWithin f univ x = oscillation f x :=
  oscillationWithin_nhd_eq_oscillation f univ x Filter.univ_mem

namespace ContinuousWithinAt

theorem oscillationWithin_eq_zero [TopologicalSpace E] {f : E ‚Üí F} {D : Set E}
    {x : E} (hf : ContinuousWithinAt f D x) : oscillationWithin f D x = 0 := by
  refine le_antisymm (_root_.le_of_forall_pos_le_add fun Œµ hŒµ ‚Ü¶ ?_) (zero_le _)
  rw [zero_add]
  have : ball (f x) (Œµ / 2) ‚àà (ùìù[D] x).map f := hf <| ball_mem_nhds _ (by simp [ne_of_gt hŒµ])
  refine (biInf_le diam this).trans (le_of_le_of_eq diam_ball ?_)
  exact (ENNReal.mul_div_cancel' (by norm_num) (by norm_num))

end ContinuousWithinAt

namespace ContinuousAt

theorem oscillation_eq_zero [TopologicalSpace E] {f : E ‚Üí F} {x : E} (hf : ContinuousAt f x) :
    oscillation f x = 0 := by
  rw [‚Üê continuousWithinAt_univ f x] at hf
  exact oscillationWithin_univ_eq_oscillation f x ‚ñ∏ hf.oscillationWithin_eq_zero

end ContinuousAt

namespace OscillationWithin

/-- The oscillation within `D` of `f` at `x ‚àà D` is 0 if and only if `ContinuousWithinAt f D x`. -/
theorem eq_zero_iff_continuousWithinAt [TopologicalSpace E] (f : E ‚Üí F) {D : Set E}
    {x : E} (xD : x ‚àà D) : oscillationWithin f D x = 0 ‚Üî ContinuousWithinAt f D x := by
  refine ‚ü®fun hf ‚Ü¶ EMetric.tendsto_nhds.mpr (fun Œµ Œµ0 ‚Ü¶ ?_), fun hf ‚Ü¶ hf.oscillationWithin_eq_zero‚ü©
  simp_rw [‚Üê hf, oscillationWithin, iInf_lt_iff] at Œµ0
  obtain ‚ü®S, hS, SŒµ‚ü© := Œµ0
  refine Filter.mem_of_superset hS (fun y hy ‚Ü¶ lt_of_le_of_lt ?_ SŒµ)
  exact edist_le_diam_of_mem (mem_preimage.1 hy) <| mem_preimage.1 (mem_of_mem_nhdsWithin xD hS)

end OscillationWithin

namespace Oscillation

/-- The oscillation of `f` at `x` is 0 if and only if `f` is continuous at `x`. -/
theorem eq_zero_iff_continuousAt [TopologicalSpace E] (f : E ‚Üí F) (x : E) :
    oscillation f x = 0 ‚Üî ContinuousAt f x := by
  rw [‚Üê oscillationWithin_univ_eq_oscillation, ‚Üê continuousWithinAt_univ f x]
  exact OscillationWithin.eq_zero_iff_continuousWithinAt f (mem_univ x)

end Oscillation

namespace IsCompact

variable [PseudoEMetricSpace E] {K : Set E}
variable {f : E ‚Üí F} {D : Set E} {Œµ : ENNReal}

/-- If `oscillationWithin f D x < Œµ` at every `x` in a compact set `K`, then there exists `Œ¥ > 0`
such that the oscillation of `f` on `ball x Œ¥ ‚à© D` is less than `Œµ` for every `x` in `K`. -/
theorem uniform_oscillationWithin (comp : IsCompact K) (hK : ‚àÄ x ‚àà K, oscillationWithin f D x < Œµ) :
    ‚àÉ Œ¥ > 0, ‚àÄ x ‚àà K, diam (f '' (ball x (ENNReal.ofReal Œ¥) ‚à© D)) ‚â§ Œµ := by
  let S := fun r ‚Ü¶ { x : E | ‚àÉ (a : ‚Ñù), (a > r ‚àß diam (f '' (ball x (ENNReal.ofReal a) ‚à© D)) ‚â§ Œµ) }
  have S_open : ‚àÄ r > 0, IsOpen (S r) := by
    refine fun r _ ‚Ü¶ isOpen_iff.mpr fun x ‚ü®a, ar, ha‚ü© ‚Ü¶
      ‚ü®ENNReal.ofReal ((a - r) / 2), by simp [ar], ?_‚ü©
    refine fun y hy ‚Ü¶ ‚ü®a - (a - r) / 2, by linarith,
      le_trans (diam_mono (image_mono fun z hz ‚Ü¶ ?_)) ha‚ü©
    refine ‚ü®lt_of_le_of_lt (edist_triangle z y x) (lt_of_lt_of_eq (ENNReal.add_lt_add hz.1 hy) ?_),
      hz.2‚ü©
    rw [‚Üê ofReal_add (by linarith) (by linarith), sub_add_cancel]
  have S_cover : K ‚äÜ ‚ãÉ r > 0, S r := by
    intro x hx
    have : oscillationWithin f D x < Œµ := hK x hx
    simp only [oscillationWithin, Filter.mem_map, iInf_lt_iff] at this
    obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© := this
    obtain ‚ü®r, r0, hr‚ü© := mem_nhdsWithin_iff.1 hn‚ÇÅ
    simp only [gt_iff_lt, mem_iUnion, exists_prop]
    have : ‚àÄ r', (ENNReal.ofReal r') ‚â§ r ‚Üí diam (f '' (ball x (ENNReal.ofReal r') ‚à© D)) ‚â§ Œµ := by
      intro r' hr'
      refine le_trans (diam_mono (subset_trans ?_ (image_subset_iff.2 hr))) (le_of_lt hn‚ÇÇ)
      exact image_mono (inter_subset_inter_left D (ball_subset_ball hr'))
    by_cases r_top : r = ‚ä§
    ¬∑ use 1, one_pos, 2, one_lt_two, this 2 (by simp only [r_top, le_top])
    ¬∑ obtain ‚ü®r', hr'‚ü© := exists_between (toReal_pos (ne_of_gt r0) r_top)
      use r', hr'.1, r.toReal, hr'.2, this r.toReal ofReal_toReal_le
  have S_antitone : ‚àÄ (r‚ÇÅ r‚ÇÇ : ‚Ñù), r‚ÇÅ ‚â§ r‚ÇÇ ‚Üí S r‚ÇÇ ‚äÜ S r‚ÇÅ :=
    fun r‚ÇÅ r‚ÇÇ hr x ‚ü®a, ar‚ÇÇ, ha‚ü© ‚Ü¶ ‚ü®a, lt_of_le_of_lt hr ar‚ÇÇ, ha‚ü©
  obtain ‚ü®Œ¥, Œ¥0, hŒ¥‚ü© : ‚àÉ r > 0, K ‚äÜ S r := by
    obtain ‚ü®T, Tb, Tfin, hT‚ü© := comp.elim_finite_subcover_image S_open S_cover
    by_cases T_nonempty : T.Nonempty
    ¬∑ use Tfin.isWF.min T_nonempty, Tb (Tfin.isWF.min_mem T_nonempty)
      intro x hx
      obtain ‚ü®r, hr‚ü© := mem_iUnion.1 (hT hx)
      simp only [mem_iUnion, exists_prop] at hr
      exact (S_antitone _ r (IsWF.min_le Tfin.isWF T_nonempty hr.1)) hr.2
    ¬∑ rw [not_nonempty_iff_eq_empty] at T_nonempty
      use 1, one_pos, subset_trans hT (by simp [T_nonempty])
  use Œ¥, Œ¥0
  intro x xK
  obtain ‚ü®a, Œ¥a, ha‚ü© := hŒ¥ xK
  exact (diam_mono <| image_mono <| inter_subset_inter_left D <| ball_subset_ball <|
    coe_le_coe.2 <| Real.toNNReal_mono (le_of_lt Œ¥a)).trans ha

/-- If `oscillation f x < Œµ` at every `x` in a compact set `K`, then there exists `Œ¥ > 0` such
that the oscillation of `f` on `ball x Œ¥` is less than `Œµ` for every `x` in `K`. -/
theorem uniform_oscillation {K : Set E} (comp : IsCompact K)
    {f : E ‚Üí F} {Œµ : ENNReal} (hK : ‚àÄ x ‚àà K, oscillation f x < Œµ) :
    ‚àÉ Œ¥ > 0, ‚àÄ x ‚àà K, diam (f '' (ball x (ENNReal.ofReal Œ¥))) ‚â§ Œµ := by
  simp only [‚Üê oscillationWithin_univ_eq_oscillation] at hK
  convert ‚Üê comp.uniform_oscillationWithin hK
  exact inter_univ _

end IsCompact
