/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.Complex.ValueDistribution.CountingFunction
import Mathlib.Analysis.SpecialFunctions.Integrals.PosLogEqCircleAverage

/-!
# Jensen's Formula of Complex Analysis

If a function `g : ‚ÑÇ ‚Üí ‚ÑÇ` is analytic without zero on the closed ball with center `c` and radius
`R`, then `log ‚Äñg ¬∑‚Äñ` is harmonic, and the mean value theorem of harmonic functions asserts that the
circle average `circleAverage (log ‚Äñg ¬∑‚Äñ) c R` equals `log ‚Äñg c‚Äñ`.  Note that `g c` equals
`meromorphicTrailingCoeffAt g c` and see `AnalyticOnNhd.circleAverage_log_norm_of_ne_zero` for the
precise statement.

Jensen's Formula, formulated in `MeromorphicOn.circleAverage_log_norm` below, generalizes this to
the setting where `g` is merely meromorphic. In that case, the `circleAverage (log ‚Äñg ¬∑‚Äñ) c R`
equals `log `‚ÄñmeromorphicTrailingCoeffAt g c‚Äñ` plus a correction term that accounts for the zeros
and poles of `g` within the ball.
-/

open Filter MeromorphicAt MeromorphicOn Metric Real

/-!
## Circle Averages

In preparation to the proof of Jensen's formula, compute several circle averages.
-/

/--
Let `D : ‚ÑÇ ‚Üí ‚Ñ§` be a function with locally finite support within the closed ball with center `c` and
radius `R`, such as the zero- and pole divisor of a meromorphic function.  Then, the circle average
of the function `‚àë·∂† u, (D u * log ‚Äñ¬∑ - u‚Äñ)` over the boundary of the ball equals
`‚àë·∂† u, D u * log R`.
-/
@[simp]
lemma circleAverage_log_norm_factorizedRational {R : ‚Ñù} {c : ‚ÑÇ}
    (D : Function.locallyFinsuppWithin (closedBall c |R|) ‚Ñ§) :
    circleAverage (‚àë·∂† u, (D u * log ‚Äñ¬∑ - u‚Äñ)) c R = ‚àë·∂† u, D u * log R := by
  have h := D.finiteSupport (isCompact_closedBall c |R|)
  calc circleAverage (‚àë·∂† u, (D u * log ‚Äñ¬∑ - u‚Äñ)) c R
  _ = circleAverage (‚àë u ‚àà h.toFinset, (D u * log ‚Äñ¬∑ - u‚Äñ)) c R := by
    rw [finsum_eq_sum_of_support_subset]
    intro u
    contrapose
    aesop
  _ = ‚àë i ‚àà h.toFinset, circleAverage (fun x ‚Ü¶ D i * log ‚Äñx - i‚Äñ) c R := by
    rw [circleAverage_sum]
    intro u hu
    apply IntervalIntegrable.const_mul
    apply circleIntegrable_log_norm_meromorphicOn (f := (¬∑ - u))
    apply (analyticOnNhd_id.sub analyticOnNhd_const).meromorphicOn
  _ = ‚àë u ‚àà h.toFinset, D u * log R := by
    apply Finset.sum_congr rfl
    intro u hu
    simp_rw [‚Üê smul_eq_mul, circleAverage_fun_smul]
    congr
    rw [circleAverage_log_norm_sub_const_of_mem_closedBall]
    apply D.supportWithinDomain
    simp_all
  _ = ‚àë·∂† u, D u * log R := by
    rw [finsum_eq_sum_of_support_subset]
    intro u
    aesop

/--
If  `g : ‚ÑÇ ‚Üí ‚ÑÇ` is analytic without zero on the closed ball with center `c` and radius `R`, then the
circle average `circleAverage (log ‚Äñg ¬∑‚Äñ) c R` equals `log ‚Äñg c‚Äñ`.
-/
@[simp]
lemma AnalyticOnNhd.circleAverage_log_norm_of_ne_zero {R : ‚Ñù} {c : ‚ÑÇ} {g : ‚ÑÇ ‚Üí ‚ÑÇ}
    (h‚ÇÅg : AnalyticOnNhd ‚ÑÇ g (closedBall c |R|)) (h‚ÇÇg : ‚àÄ u ‚àà closedBall c |R|, g u ‚â† 0) :
    circleAverage (Real.log ‚Äñg ¬∑‚Äñ) c R = Real.log ‚Äñg c‚Äñ :=
  HarmonicOnNhd.circleAverage_eq (fun x hx ‚Ü¶ (h‚ÇÅg x hx).harmonicAt_log_norm (h‚ÇÇg x hx))

/-!
## Jensen's Formula
-/

/-!
**Jensen's Formula**: If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is meromorphic on the closed ball with center `c` and radius
`R`, then the `circleAverage (log ‚Äñf ¬∑‚Äñ) c R` equals `log ‚ÄñmeromorphicTrailingCoeffAt f c‚Äñ` plus a
correction term that accounts for the zeros and poles of `f` within the ball.
-/
theorem MeromorphicOn.circleAverage_log_norm {c : ‚ÑÇ} {R : ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hR : R ‚â† 0)
    (h‚ÇÅf : MeromorphicOn f (closedBall c |R|)) :
    circleAverage (log ‚Äñf ¬∑‚Äñ) c R
      = ‚àë·∂† u, divisor f (closedBall c |R|) u * log (R * ‚Äñc - u‚Äñ‚Åª¬π)
        + divisor f (closedBall c |R|) c * log R + log ‚ÄñmeromorphicTrailingCoeffAt f c‚Äñ := by
  -- Shorthand notation to keep line size in check
  let CB := closedBall c |R|
  by_cases h‚ÇÇf : ‚àÄ u ‚àà CB, meromorphicOrderAt f u ‚â† ‚ä§
  ¬∑ have h‚ÇÉf := (divisor f CB).finiteSupport (isCompact_closedBall c |R|)
    -- Extract zeros & poles and compute
    obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := h‚ÇÅf.extract_zeros_poles (by simp_all) h‚ÇÉf
    calc circleAverage (log ‚Äñf ¬∑‚Äñ) c R
    _ = circleAverage ((‚àë·∂† u, (divisor f CB u * log ‚Äñ¬∑ - u‚Äñ)) + (log ‚Äñg ¬∑‚Äñ)) c R := by
      have h‚ÇÑg := extract_zeros_poles_log h‚ÇÇg h‚ÇÉg
      rw [circleAverage_congr_codiscreteWithin (codiscreteWithin.mono sphere_subset_closedBall h‚ÇÑg)
        hR]
    _ = circleAverage (‚àë·∂† u, (divisor f CB u * log ‚Äñ¬∑ - u‚Äñ)) c R + circleAverage (log ‚Äñg ¬∑‚Äñ) c R :=
      circleAverage_add (circleIntegrable_log_norm_factorizedRational (divisor f CB))
        (circleIntegrable_log_norm_meromorphicOn (h‚ÇÅg.mono sphere_subset_closedBall).meromorphicOn)
    _ = ‚àë·∂† u, divisor f CB u * log R + log ‚Äñg c‚Äñ := by
      simp [h‚ÇÅg]
      rw [h‚ÇÅg.circleAverage_log_norm_of_ne_zero]
      exact fun u hu ‚Ü¶ h‚ÇÇg ‚ü®u, hu‚ü©
    _ = ‚àë·∂† u, divisor f CB u * log R
      + (log ‚ÄñmeromorphicTrailingCoeffAt f c‚Äñ - ‚àë·∂† u, divisor f CB u * log ‚Äñc - u‚Äñ) := by
      have t‚ÇÄ : c ‚àà CB := by simp [CB]
      have t‚ÇÅ : AccPt c (ùìü CB) := by
        apply accPt_iff_frequently_nhdsNE.mpr
        apply compl_notMem
        apply mem_nhdsWithin.mpr
        use ball c |R|
        simpa [hR] using fun _ ‚ü®h, _‚ü© ‚Ü¶ ball_subset_closedBall h
      simp [MeromorphicOn.log_norm_meromorphicTrailingCoeffAt_extract_zeros_poles h‚ÇÉf t‚ÇÄ t‚ÇÅ
        (h‚ÇÅf c t‚ÇÄ) (h‚ÇÅg c t‚ÇÄ) (h‚ÇÇg ‚ü®c, t‚ÇÄ‚ü©) h‚ÇÉg]
    _ = ‚àë·∂† u, divisor f CB u * log R - ‚àë·∂† u, divisor f CB u * log ‚Äñc - u‚Äñ
      + log ‚ÄñmeromorphicTrailingCoeffAt f c‚Äñ := by
      ring
    _ = (‚àë·∂† u, divisor f CB u * (log R - log ‚Äñc - u‚Äñ)) + log ‚ÄñmeromorphicTrailingCoeffAt f c‚Äñ := by
      rw [‚Üê finsum_sub_distrib]
      ¬∑ simp_rw [‚Üê mul_sub]
      repeat apply h‚ÇÉf.subset (fun _ ‚Ü¶ (by simp_all))
    _ = ‚àë·∂† u, divisor f CB u * log (R * ‚Äñc - u‚Äñ‚Åª¬π) + divisor f CB c * log R
      + log ‚ÄñmeromorphicTrailingCoeffAt f c‚Äñ := by
      rw [Function.locallyFinsuppWithin.countingFunction_finsum_eq_finsum_add hR h‚ÇÉf]
  ¬∑ -- Trivial case: `f` vanishes on a codiscrete set
    have h‚ÇÇf : ¬¨‚àÄ (u : ‚Üë(closedBall c |R|)), meromorphicOrderAt f ‚Üëu ‚â† ‚ä§ := by aesop
    rw [‚Üê h‚ÇÅf.exists_meromorphicOrderAt_ne_top_iff_forall
      ‚ü®nonempty_closedBall.mpr (abs_nonneg R), (convex_closedBall c |R|).isPreconnected‚ü©] at h‚ÇÇf
    push_neg at h‚ÇÇf
    have : divisor f CB = 0 := by
      ext x
      by_cases h : x ‚àà CB
      <;> simp_all [CB]
    simp only [CB, this, Function.locallyFinsuppWithin.coe_zero, Pi.zero_apply, Int.cast_zero,
      zero_mul, finsum_zero, add_zero, zero_add]
    rw [MeromorphicAt.meromorphicTrailingCoeffAt_of_order_eq_top (by aesop), norm_zero, log_zero]
    have : f =·∂†[codiscreteWithin CB] 0 := by
      filter_upwards [h‚ÇÅf.meromorphicNFAt_mem_codiscreteWithin, self_mem_codiscreteWithin CB]
        with z h‚ÇÅz h‚ÇÇz
      simpa [h‚ÇÇf ‚ü®z, h‚ÇÇz‚ü©] using (not_iff_not.2 h‚ÇÅz.meromorphicOrderAt_eq_zero_iff)
    rw [circleAverage_congr_codiscreteWithin (f‚ÇÇ := 0) _ hR]
    ¬∑ simp only [circleAverage, mul_inv_rev, Pi.zero_apply, intervalIntegral.integral_zero,
        smul_eq_mul, mul_zero]
    apply Filter.codiscreteWithin.mono (U := CB) sphere_subset_closedBall
    filter_upwards [this] with z hz
    simp_all
