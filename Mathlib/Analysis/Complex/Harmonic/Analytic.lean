/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.Calculus.FDeriv.Symmetric
import Mathlib.Analysis.Complex.Conformal
import Mathlib.Analysis.Complex.HasPrimitives
import Mathlib.Analysis.InnerProductSpace.Harmonic.Basic

/-!
# Analyticity of Harmonic Functions

If `f : ‚ÑÇ ‚Üí ‚Ñù` is harmonic at `x`, we show that `‚àÇf/‚àÇ1 - I ‚Ä¢ ‚àÇf/‚àÇI` is complex-analytic at `x`. If
`f` is harmonic on an open ball, then it is the real part of a function `F : ‚ÑÇ ‚Üí ‚ÑÇ` that is
holomorphic on the ball.  This implies in particular that harmonic functions are real-analytic.
-/

open Complex InnerProductSpace Metric Topology

variable
  {f : ‚ÑÇ ‚Üí ‚Ñù} {x : ‚ÑÇ}

/--
If `f : ‚ÑÇ ‚Üí ‚Ñù` is harmonic at `x`, then `‚àÇf/‚àÇ1 - I ‚Ä¢ ‚àÇf/‚àÇI` is complex differentiable at `x`.
-/
theorem HarmonicAt.differentiableAt_complex_partial (hf : HarmonicAt f x) :
    DifferentiableAt ‚ÑÇ (fun z ‚Ü¶ fderiv ‚Ñù f z 1 - I * fderiv ‚Ñù f z I) x := by
  have : (fun z ‚Ü¶ fderiv ‚Ñù f z 1 - I * fderiv ‚Ñù f z I) =
      (ofRealCLM ‚àò (fderiv ‚Ñù f ¬∑ 1) - I ‚Ä¢ ofRealCLM ‚àò (fderiv ‚Ñù f ¬∑ I)) := by
    ext; simp
  rw [this]
  have h‚ÇÅf := hf.1
  refine differentiableAt_complex_iff_differentiableAt_real.2 ‚ü®by fun_prop, ?_‚ü©
  rw [fderiv_sub (by fun_prop) (by fun_prop), fderiv_const_smul (by fun_prop)]
  repeat rw [fderiv_comp]; all_goals try fun_prop
  simp only [ContinuousLinearMap.fderiv, ContinuousLinearMap.coe_sub',
    ContinuousLinearMap.coe_comp', ContinuousLinearMap.coe_smul', Pi.sub_apply,
    Function.comp_apply, ofRealCLM_apply, Pi.smul_apply, smul_eq_mul, mul_sub]
  ring_nf
  rw [fderiv_clm_apply (by fun_prop) (by fun_prop), fderiv_clm_apply (by fun_prop) (by fun_prop)]
  simp only [fderiv_fun_const, Pi.zero_apply, ContinuousLinearMap.comp_zero, zero_add,
    ContinuousLinearMap.flip_apply, I_sq, neg_mul, one_mul, sub_neg_eq_add]
  rw [add_comm, sub_eq_add_neg]
  congr 1
  ¬∑ norm_cast
    apply h‚ÇÅf.isSymmSndFDerivAt (by simp)
  ¬∑ have h‚ÇÇf := hf.2.eq_of_nhds
    simp only [laplacian_eq_iteratedFDeriv_complexPlane, iteratedFDeriv_two_apply, Fin.isValue,
      Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.cons_val_fin_one, Pi.zero_apply,
      add_eq_zero_iff_eq_neg] at h‚ÇÇf
    simp [h‚ÇÇf]

/--
If `f : ‚ÑÇ ‚Üí ‚Ñù` is harmonic at `x`, then `‚àÇf/‚àÇ1 - I ‚Ä¢ ‚àÇf/‚àÇI` is complex analytic at `x`.
-/
theorem HarmonicAt.analyticAt_complex_partial (hf : HarmonicAt f x) :
    AnalyticAt ‚ÑÇ (fun z ‚Ü¶ fderiv ‚Ñù f z 1 - I * fderiv ‚Ñù f z I) x :=
  DifferentiableOn.analyticAt (s := { x | HarmonicAt f x })
    (fun _ hy ‚Ü¶ (HarmonicAt.differentiableAt_complex_partial hy).differentiableWithinAt)
    ((isOpen_setOf_harmonicAt f).mem_nhds hf)

/-
If a function `f : ‚ÑÇ ‚Üí ‚Ñù` is harmonic on an open ball, then `f` is the real part of a function
`F : ‚ÑÇ ‚Üí ‚ÑÇ` that is holomorphic on the ball.
-/
theorem harmonic_is_realOfHolomorphic {z : ‚ÑÇ} {R : ‚Ñù} (hf : HarmonicOnNhd f (ball z R)) :
    ‚àÉ F : ‚ÑÇ ‚Üí ‚ÑÇ, (AnalyticOnNhd ‚ÑÇ F (ball z R)) ‚àß ((ball z R).EqOn (fun z ‚Ü¶ (F z).re) f) := by
  by_cases hR : R ‚â§ 0
  ¬∑ simp [ball_eq_empty.2 hR]
  let g := ofRealCLM ‚àò (fderiv ‚Ñù f ¬∑ 1) - I ‚Ä¢ ofRealCLM ‚àò (fderiv ‚Ñù f ¬∑ I)
  have hg : DifferentiableOn ‚ÑÇ g (ball z R) :=
    fun x hx ‚Ü¶ (HarmonicAt.differentiableAt_complex_partial (hf x hx)).differentiableWithinAt
  obtain ‚ü®F‚ÇÄ, hF‚ÇÄ‚ü© := hg.isExactOn_ball
  let F := fun x ‚Ü¶ F‚ÇÄ x - F‚ÇÄ z + f z
  have h‚ÇÅF : ‚àÄ z‚ÇÅ ‚àà ball z R, HasDerivAt F (g z‚ÇÅ) z‚ÇÅ := by
    simp_all [F]
  have h‚ÇÇF : DifferentiableOn ‚ÑÇ F (ball z R) :=
    fun x hx ‚Ü¶ (h‚ÇÅF x hx).differentiableAt.differentiableWithinAt
  have h‚ÇÉF : DifferentiableOn ‚Ñù F (ball z R) :=
    h‚ÇÇF.restrictScalars (ùïú := ‚Ñù) (ùïú' := ‚ÑÇ)
  use F, h‚ÇÇF.analyticOnNhd isOpen_ball
  rw [(by aesop : (fun z ‚Ü¶ (F z).re) = Complex.reCLM ‚àò F)]
  intro x hx
  apply (convex_ball z R).eqOn_of_fderivWithin_eq (ùïú := ‚Ñù) (x := z)
  ¬∑ exact reCLM.differentiable.comp_differentiableOn h‚ÇÉF
  ¬∑ exact fun y hy ‚Ü¶ (ContDiffAt.differentiableAt (hf y hy).1 one_le_two).differentiableWithinAt
  ¬∑ exact isOpen_ball.uniqueDiffOn
  ¬∑ intro y hy
    have h‚ÇÑF := (h‚ÇÅF y hy).differentiableAt
    have h‚ÇÖF := h‚ÇÑF.restrictScalars (ùïú := ‚Ñù) (ùïú' := ‚ÑÇ)
    rw [fderivWithin_eq_fderiv (isOpen_ball.uniqueDiffWithinAt hy)
      (reCLM.differentiableAt.comp y h‚ÇÖF), fderivWithin_eq_fderiv
      (isOpen_ball.uniqueDiffWithinAt hy) ((hf y hy).1.differentiableAt one_le_two), fderiv_comp y
      (by fun_prop) h‚ÇÖF, ContinuousLinearMap.fderiv, h‚ÇÑF.fderiv_restrictScalars (ùïú := ‚Ñù)]
    ext a
    nth_rw 2 [(by simp : a = a.re ‚Ä¢ (1 : ‚ÑÇ) + a.im ‚Ä¢ (I : ‚ÑÇ))]
    rw [ContinuousLinearMap.map_add, ContinuousLinearMap.map_smul, ContinuousLinearMap.map_smul]
    simp [HasDerivAt.deriv (h‚ÇÅF y hy), g]
  ¬∑ simp_all
  ¬∑ simp [F]
  ¬∑ assumption

/-
Harmonic functions are real analytic.
TODO: Prove this for harmonic functions on an arbitrary f.d. inner product space (not just on `‚ÑÇ`).
-/
theorem HarmonicAt.analyticAt (hf : HarmonicAt f x) : AnalyticAt ‚Ñù f x := by
  obtain ‚ü®Œµ, h‚ÇÅŒµ, h‚ÇÇŒµ‚ü© := isOpen_iff.1 (isOpen_setOf_harmonicAt (f := f)) x hf
  obtain ‚ü®F, h‚ÇÅF, h‚ÇÇF‚ü© := harmonic_is_realOfHolomorphic (fun _ hy ‚Ü¶ h‚ÇÇŒµ hy)
  rw [analyticAt_congr (Filter.eventually_of_mem (ball_mem_nhds x h‚ÇÅŒµ) (fun y hy ‚Ü¶ h‚ÇÇF.symm hy))]
  exact (reCLM.analyticAt (F x)).comp (h‚ÇÅF x (mem_ball_self h‚ÇÅŒµ)).restrictScalars
