/-
Copyright (c) 2022 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov
-/
import Mathlib.Analysis.Complex.AbsMax
import Mathlib.Analysis.Complex.RemovableSingularity

#align_import analysis.complex.schwarz from "leanprover-community/mathlib"@"3f655f5297b030a87d641ad4e825af8d9679eb0b"

/-!
# Schwarz lemma

In this file we prove several versions of the Schwarz lemma.

* `Complex.norm_deriv_le_div_of_mapsTo_ball`, `Complex.abs_deriv_le_div_of_mapsTo_ball`: if
  `f : ‚ÑÇ ‚Üí E` sends an open disk with center `c` and a positive radius `R‚ÇÅ` to an open ball with
  center `f c` and radius `R‚ÇÇ`, then the absolute value of the derivative of `f` at `c` is at most
  the ratio `R‚ÇÇ / R‚ÇÅ`;

* `Complex.dist_le_div_mul_dist_of_mapsTo_ball`: if `f : ‚ÑÇ ‚Üí E` sends an open disk with center `c`
  and radius `R‚ÇÅ` to an open disk with center `f c` and radius `R‚ÇÇ`, then for any `z` in the former
  disk we have `dist (f z) (f c) ‚â§ (R‚ÇÇ / R‚ÇÅ) * dist z c`;

* `Complex.abs_deriv_le_one_of_mapsTo_ball`: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk of positive radius
  to itself and the center of this disk to itself, then the absolute value of the derivative of `f`
  at the center of this disk is at most `1`;

* `Complex.dist_le_dist_of_mapsTo_ball_self`: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk to itself and the
  center `c` of this disk to itself, then for any point `z` of this disk we have
  `dist (f z) c ‚â§ dist z c`;

* `Complex.abs_le_abs_of_mapsTo_ball_self`: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk with center `0` to
  itself, then for any point `z` of this disk we have `abs (f z) ‚â§ abs z`.

## Implementation notes

We prove some versions of the Schwarz lemma for a map `f : ‚ÑÇ ‚Üí E` taking values in any normed space
over complex numbers.

## TODO

* Prove that these inequalities are strict unless `f` is an affine map.

* Prove that any diffeomorphism of the unit disk to itself is a M√∂bius map.

## Tags

Schwarz lemma
-/


open Metric Set Function Filter TopologicalSpace

open scoped Topology

namespace Complex

section Space

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚ÑÇ E] {R R‚ÇÅ R‚ÇÇ : ‚Ñù} {f : ‚ÑÇ ‚Üí E}
  {c z z‚ÇÄ : ‚ÑÇ}

/-- An auxiliary lemma for `Complex.norm_dslope_le_div_of_mapsTo_ball`. -/
theorem schwarz_aux {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hd : DifferentiableOn ‚ÑÇ f (ball c R‚ÇÅ))
    (h_maps : MapsTo f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ)) (hz : z ‚àà ball c R‚ÇÅ) :
    ‚Äñdslope f c z‚Äñ ‚â§ R‚ÇÇ / R‚ÇÅ := by
  have hR‚ÇÅ : 0 < R‚ÇÅ := nonempty_ball.1 ‚ü®z, hz‚ü©
  suffices ‚àÄ·∂† r in ùìù[<] R‚ÇÅ, ‚Äñdslope f c z‚Äñ ‚â§ R‚ÇÇ / r by
    refine' ge_of_tendsto _ this
    exact (tendsto_const_nhds.div tendsto_id hR‚ÇÅ.ne').mono_left nhdsWithin_le_nhds
  rw [mem_ball] at hz
  filter_upwards [Ioo_mem_nhdsWithin_Iio ‚ü®hz, le_rfl‚ü©] with r hr
  have hr‚ÇÄ : 0 < r := dist_nonneg.trans_lt hr.1
  replace hd : DiffContOnCl ‚ÑÇ (dslope f c) (ball c r) := by
    refine DifferentiableOn.diffContOnCl ?_
    rw [closure_ball c hr‚ÇÄ.ne']
    exact ((differentiableOn_dslope <| ball_mem_nhds _ hR‚ÇÅ).mpr hd).mono
      (closedBall_subset_ball hr.2)
  refine' norm_le_of_forall_mem_frontier_norm_le isBounded_ball hd _ _
  ¬∑ rw [frontier_ball c hr‚ÇÄ.ne']
    intro z hz
    have hz' : z ‚â† c := ne_of_mem_sphere hz hr‚ÇÄ.ne'
    rw [dslope_of_ne _ hz', slope_def_module, norm_smul, norm_inv, mem_sphere_iff_norm.1 hz, ‚Üê
      div_eq_inv_mul, div_le_div_right hr‚ÇÄ, ‚Üê dist_eq_norm]
    exact le_of_lt (h_maps (mem_ball.2 (by rw [mem_sphere.1 hz]; exact hr.2)))
  ¬∑ rw [closure_ball c hr‚ÇÄ.ne', mem_closedBall]
    exact hr.1.le
#align complex.schwarz_aux Complex.schwarz_aux

/-- Two cases of the **Schwarz Lemma** (derivative and distance), merged together. -/
theorem norm_dslope_le_div_of_mapsTo_ball (hd : DifferentiableOn ‚ÑÇ f (ball c R‚ÇÅ))
    (h_maps : MapsTo f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ)) (hz : z ‚àà ball c R‚ÇÅ) :
    ‚Äñdslope f c z‚Äñ ‚â§ R‚ÇÇ / R‚ÇÅ := by
  have hR‚ÇÅ : 0 < R‚ÇÅ := nonempty_ball.1 ‚ü®z, hz‚ü©
  have hR‚ÇÇ : 0 < R‚ÇÇ := nonempty_ball.1 ‚ü®f z, h_maps hz‚ü©
  rcases eq_or_ne (dslope f c z) 0 with hc | hc
  ¬∑ rw [hc, norm_zero]; exact div_nonneg hR‚ÇÇ.le hR‚ÇÅ.le
  rcases exists_dual_vector ‚ÑÇ _ hc with ‚ü®g, hg, hgf‚ü©
  have hg' : ‚Äñg‚Äñ‚Çä = 1 := NNReal.eq hg
  have hg‚ÇÄ : ‚Äñg‚Äñ‚Çä ‚â† 0 := by simpa only [hg'] using one_ne_zero
  calc
    ‚Äñdslope f c z‚Äñ = ‚Äñdslope (g ‚àò f) c z‚Äñ := by
      rw [g.dslope_comp, hgf, RCLike.norm_ofReal, abs_norm]
      exact fun _ => hd.differentiableAt (ball_mem_nhds _ hR‚ÇÅ)
    _ ‚â§ R‚ÇÇ / R‚ÇÅ := by
      refine' schwarz_aux (g.differentiable.comp_differentiableOn hd) (MapsTo.comp _ h_maps) hz
      simpa only [hg', NNReal.coe_one, one_mul] using g.lipschitz.mapsTo_ball hg‚ÇÄ (f c) R‚ÇÇ
#align complex.norm_dslope_le_div_of_maps_to_ball Complex.norm_dslope_le_div_of_mapsTo_ball

/-- Equality case in the **Schwarz Lemma**: in the setup of `norm_dslope_le_div_of_mapsTo_ball`, if
`‚Äñdslope f c z‚ÇÄ‚Äñ = R‚ÇÇ / R‚ÇÅ` holds at a point in the ball then the map `f` is affine. -/
theorem affine_of_mapsTo_ball_of_exists_norm_dslope_eq_div [CompleteSpace E] [StrictConvexSpace ‚Ñù E]
    (hd : DifferentiableOn ‚ÑÇ f (ball c R‚ÇÅ)) (h_maps : Set.MapsTo f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ))
    (h_z‚ÇÄ : z‚ÇÄ ‚àà ball c R‚ÇÅ) (h_eq : ‚Äñdslope f c z‚ÇÄ‚Äñ = R‚ÇÇ / R‚ÇÅ) :
    Set.EqOn f (fun z => f c + (z - c) ‚Ä¢ dslope f c z‚ÇÄ) (ball c R‚ÇÅ) := by
  set g := dslope f c
  rintro z hz
  by_cases h : z = c; ¬∑ simp [h]
  have h_R‚ÇÅ : 0 < R‚ÇÅ := nonempty_ball.mp ‚ü®_, h_z‚ÇÄ‚ü©
  have g_le_div : ‚àÄ z ‚àà ball c R‚ÇÅ, ‚Äñg z‚Äñ ‚â§ R‚ÇÇ / R‚ÇÅ := fun z hz =>
    norm_dslope_le_div_of_mapsTo_ball hd h_maps hz
  have g_max : IsMaxOn (norm ‚àò g) (ball c R‚ÇÅ) z‚ÇÄ :=
    isMaxOn_iff.mpr fun z hz => by simpa [h_eq] using g_le_div z hz
  have g_diff : DifferentiableOn ‚ÑÇ g (ball c R‚ÇÅ) :=
    (differentiableOn_dslope (isOpen_ball.mem_nhds (mem_ball_self h_R‚ÇÅ))).mpr hd
  have : g z = g z‚ÇÄ := eqOn_of_isPreconnected_of_isMaxOn_norm (convex_ball c R‚ÇÅ).isPreconnected
    isOpen_ball g_diff h_z‚ÇÄ g_max hz
  simp [g] at this
  simp [g, ‚Üê this]

#align complex.affine_of_maps_to_ball_of_exists_norm_dslope_eq_div Complex.affine_of_mapsTo_ball_of_exists_norm_dslope_eq_div

theorem affine_of_mapsTo_ball_of_exists_norm_dslope_eq_div' [CompleteSpace E]
    [StrictConvexSpace ‚Ñù E] (hd : DifferentiableOn ‚ÑÇ f (ball c R‚ÇÅ))
    (h_maps : Set.MapsTo f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ))
    (h_z‚ÇÄ : ‚àÉ z‚ÇÄ ‚àà ball c R‚ÇÅ, ‚Äñdslope f c z‚ÇÄ‚Äñ = R‚ÇÇ / R‚ÇÅ) :
    ‚àÉ C : E, ‚ÄñC‚Äñ = R‚ÇÇ / R‚ÇÅ ‚àß Set.EqOn f (fun z => f c + (z - c) ‚Ä¢ C) (ball c R‚ÇÅ) :=
  let ‚ü®z‚ÇÄ, h_z‚ÇÄ, h_eq‚ü© := h_z‚ÇÄ
  ‚ü®dslope f c z‚ÇÄ, h_eq, affine_of_mapsTo_ball_of_exists_norm_dslope_eq_div hd h_maps h_z‚ÇÄ h_eq‚ü©
#align complex.affine_of_maps_to_ball_of_exists_norm_dslope_eq_div' Complex.affine_of_mapsTo_ball_of_exists_norm_dslope_eq_div'

/-- The **Schwarz Lemma**: if `f : ‚ÑÇ ‚Üí E` sends an open disk with center `c` and a positive radius
`R‚ÇÅ` to an open ball with center `f c` and radius `R‚ÇÇ`, then the absolute value of the derivative of
`f` at `c` is at most the ratio `R‚ÇÇ / R‚ÇÅ`. -/
theorem norm_deriv_le_div_of_mapsTo_ball (hd : DifferentiableOn ‚ÑÇ f (ball c R‚ÇÅ))
    (h_maps : MapsTo f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ)) (h‚ÇÄ : 0 < R‚ÇÅ) : ‚Äñderiv f c‚Äñ ‚â§ R‚ÇÇ / R‚ÇÅ := by
  simpa only [dslope_same] using norm_dslope_le_div_of_mapsTo_ball hd h_maps (mem_ball_self h‚ÇÄ)
#align complex.norm_deriv_le_div_of_maps_to_ball Complex.norm_deriv_le_div_of_mapsTo_ball

/-- The **Schwarz Lemma**: if `f : ‚ÑÇ ‚Üí E` sends an open disk with center `c` and radius `R‚ÇÅ` to an
open ball with center `f c` and radius `R‚ÇÇ`, then for any `z` in the former disk we have
`dist (f z) (f c) ‚â§ (R‚ÇÇ / R‚ÇÅ) * dist z c`. -/
theorem dist_le_div_mul_dist_of_mapsTo_ball (hd : DifferentiableOn ‚ÑÇ f (ball c R‚ÇÅ))
    (h_maps : MapsTo f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ)) (hz : z ‚àà ball c R‚ÇÅ) :
    dist (f z) (f c) ‚â§ R‚ÇÇ / R‚ÇÅ * dist z c := by
  rcases eq_or_ne z c with (rfl | hne);
  ¬∑ simp only [dist_self, mul_zero, le_rfl]
  simpa only [dslope_of_ne _ hne, slope_def_module, norm_smul, norm_inv, ‚Üê div_eq_inv_mul, ‚Üê
    dist_eq_norm, div_le_iff (dist_pos.2 hne)] using norm_dslope_le_div_of_mapsTo_ball hd h_maps hz
#align complex.dist_le_div_mul_dist_of_maps_to_ball Complex.dist_le_div_mul_dist_of_mapsTo_ball

end Space

variable {f : ‚ÑÇ ‚Üí ‚ÑÇ} {c z : ‚ÑÇ} {R R‚ÇÅ R‚ÇÇ : ‚Ñù}

/-- The **Schwarz Lemma**: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk with center `c` and a positive radius
`R‚ÇÅ` to an open disk with center `f c` and radius `R‚ÇÇ`, then the absolute value of the derivative of
`f` at `c` is at most the ratio `R‚ÇÇ / R‚ÇÅ`. -/
theorem abs_deriv_le_div_of_mapsTo_ball (hd : DifferentiableOn ‚ÑÇ f (ball c R‚ÇÅ))
    (h_maps : MapsTo f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ)) (h‚ÇÄ : 0 < R‚ÇÅ) : abs (deriv f c) ‚â§ R‚ÇÇ / R‚ÇÅ :=
  norm_deriv_le_div_of_mapsTo_ball hd h_maps h‚ÇÄ
#align complex.abs_deriv_le_div_of_maps_to_ball Complex.abs_deriv_le_div_of_mapsTo_ball

/-- The **Schwarz Lemma**: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk of positive radius to itself and the
center of this disk to itself, then the absolute value of the derivative of `f` at the center of
this disk is at most `1`. -/
theorem abs_deriv_le_one_of_mapsTo_ball (hd : DifferentiableOn ‚ÑÇ f (ball c R))
    (h_maps : MapsTo f (ball c R) (ball c R)) (hc : f c = c) (h‚ÇÄ : 0 < R) : abs (deriv f c) ‚â§ 1 :=
  (norm_deriv_le_div_of_mapsTo_ball hd (by rwa [hc]) h‚ÇÄ).trans_eq (div_self h‚ÇÄ.ne')
#align complex.abs_deriv_le_one_of_maps_to_ball Complex.abs_deriv_le_one_of_mapsTo_ball

/-- The **Schwarz Lemma**: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk to itself and the center `c` of this
disk to itself, then for any point `z` of this disk we have `dist (f z) c ‚â§ dist z c`. -/
theorem dist_le_dist_of_mapsTo_ball_self (hd : DifferentiableOn ‚ÑÇ f (ball c R))
    (h_maps : MapsTo f (ball c R) (ball c R)) (hc : f c = c) (hz : z ‚àà ball c R) :
    dist (f z) c ‚â§ dist z c := by
  -- Porting note: `simp` was failing to use `div_self`
  have := dist_le_div_mul_dist_of_mapsTo_ball hd (by rwa [hc]) hz
  rwa [hc, div_self, one_mul] at this
  exact (nonempty_ball.1 ‚ü®z, hz‚ü©).ne'
#align complex.dist_le_dist_of_maps_to_ball_self Complex.dist_le_dist_of_mapsTo_ball_self

/-- The **Schwarz Lemma**: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk with center `0` to itself, then for any
point `z` of this disk we have `abs (f z) ‚â§ abs z`. -/
theorem abs_le_abs_of_mapsTo_ball_self (hd : DifferentiableOn ‚ÑÇ f (ball 0 R))
    (h_maps : MapsTo f (ball 0 R) (ball 0 R)) (h‚ÇÄ : f 0 = 0) (hz : abs z < R) :
    abs (f z) ‚â§ abs z := by
  replace hz : z ‚àà ball (0 : ‚ÑÇ) R := mem_ball_zero_iff.2 hz
  simpa only [dist_zero_right] using dist_le_dist_of_mapsTo_ball_self hd h_maps h‚ÇÄ hz
#align complex.abs_le_abs_of_maps_to_ball_self Complex.abs_le_abs_of_mapsTo_ball_self

end Complex
