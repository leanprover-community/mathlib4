/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Analysis.Complex.UpperHalfPlane.Basic
import Mathlib.Analysis.Convex.Contractible
import Mathlib.Analysis.LocallyConvex.WithSeminorms
import Mathlib.Analysis.Complex.Convex
import Mathlib.Analysis.Complex.ReImTopology
import Mathlib.Topology.Homotopy.Contractible
import Mathlib.Topology.PartialHomeomorph

/-!
# Topology on the upper half plane

In this file we introduce a `TopologicalSpace` structure on the upper half plane and provide
various instances.
-/


noncomputable section

open Complex Filter Function Set TopologicalSpace Topology

namespace UpperHalfPlane

instance : TopologicalSpace ‚Ñç :=
  instTopologicalSpaceSubtype

theorem isOpenEmbedding_coe : IsOpenEmbedding ((‚Üë) : ‚Ñç ‚Üí ‚ÑÇ) :=
  IsOpen.isOpenEmbedding_subtypeVal <| isOpen_lt continuous_const Complex.continuous_im

@[deprecated (since := "2024-10-18")]
alias openEmbedding_coe := isOpenEmbedding_coe

theorem isEmbedding_coe : IsEmbedding ((‚Üë) : ‚Ñç ‚Üí ‚ÑÇ) :=
  IsEmbedding.subtypeVal

@[deprecated (since := "2024-10-26")]
alias embedding_coe := isEmbedding_coe

theorem continuous_coe : Continuous ((‚Üë) : ‚Ñç ‚Üí ‚ÑÇ) :=
  isEmbedding_coe.continuous

theorem continuous_re : Continuous re :=
  Complex.continuous_re.comp continuous_coe

theorem continuous_im : Continuous im :=
  Complex.continuous_im.comp continuous_coe

instance : SecondCountableTopology ‚Ñç :=
  TopologicalSpace.Subtype.secondCountableTopology _

instance : T3Space ‚Ñç := Subtype.t3Space

instance : T4Space ‚Ñç := inferInstance

instance : ContractibleSpace ‚Ñç :=
  (convex_halfSpace_im_gt 0).contractibleSpace ‚ü®I, one_pos.trans_eq I_im.symm‚ü©

instance : LocPathConnectedSpace ‚Ñç := isOpenEmbedding_coe.locPathConnectedSpace

instance : NoncompactSpace ‚Ñç := by
  refine ‚ü®fun h => ?_‚ü©
  have : IsCompact (Complex.im ‚Åª¬π' Ioi 0) := isCompact_iff_isCompact_univ.2 h
  replace := this.isClosed.closure_eq
  rw [closure_preimage_im, closure_Ioi, Set.ext_iff] at this
  exact absurd ((this 0).1 (@left_mem_Ici ‚Ñù _ 0)) (@lt_irrefl ‚Ñù _ 0)

instance : LocallyCompactSpace ‚Ñç :=
  isOpenEmbedding_coe.locallyCompactSpace

section strips

/-- The vertical strip of width `A` and height `B`, defined by elements whose real part has absolute
value less than or equal to `A` and imaginary part is at least `B`. -/
def verticalStrip (A B : ‚Ñù) := {z : ‚Ñç | |z.re| ‚â§ A ‚àß B ‚â§ z.im}

theorem mem_verticalStrip_iff (A B : ‚Ñù) (z : ‚Ñç) : z ‚àà verticalStrip A B ‚Üî |z.re| ‚â§ A ‚àß B ‚â§ z.im :=
  Iff.rfl

@[gcongr]
lemma verticalStrip_mono {A B A' B' : ‚Ñù} (hA : A ‚â§ A') (hB : B' ‚â§ B) :
    verticalStrip A B ‚äÜ verticalStrip A' B' := by
  rintro z ‚ü®hzre, hzim‚ü©
  exact ‚ü®hzre.trans hA, hB.trans hzim‚ü©

@[gcongr]
lemma verticalStrip_mono_left {A A'} (h : A ‚â§ A') (B) : verticalStrip A B ‚äÜ verticalStrip A' B :=
  verticalStrip_mono h le_rfl

@[gcongr]
lemma verticalStrip_anti_right (A) {B B'} (h : B' ‚â§ B) : verticalStrip A B ‚äÜ verticalStrip A B' :=
  verticalStrip_mono le_rfl h

lemma subset_verticalStrip_of_isCompact {K : Set ‚Ñç} (hK : IsCompact K) :
    ‚àÉ A B : ‚Ñù, 0 < B ‚àß K ‚äÜ verticalStrip A B := by
  rcases K.eq_empty_or_nonempty with rfl | hne
  ¬∑ exact ‚ü®1, 1, Real.zero_lt_one, empty_subset _‚ü©
  obtain ‚ü®u, _, hu‚ü© := hK.exists_isMaxOn hne (_root_.continuous_abs.comp continuous_re).continuousOn
  obtain ‚ü®v, _, hv‚ü© := hK.exists_isMinOn hne continuous_im.continuousOn
  exact ‚ü®|re u|, im v, v.im_pos, fun k hk ‚Ü¶ ‚ü®isMaxOn_iff.mp hu _ hk, isMinOn_iff.mp hv _ hk‚ü©‚ü©

theorem ModularGroup_T_zpow_mem_verticalStrip (z : ‚Ñç) {N : ‚Ñï} (hn : 0 < N) :
    ‚àÉ n : ‚Ñ§, ModularGroup.T ^ (N * n) ‚Ä¢ z ‚àà verticalStrip N z.im := by
  let n := Int.floor (z.re/N)
  use -n
  rw [modular_T_zpow_smul z (N * -n)]
  refine ‚ü®?_, (by simp only [mul_neg, Int.cast_neg, Int.cast_mul, Int.cast_natCast, vadd_im,
    le_refl])‚ü©
  have h : (N * (-n : ‚Ñù) +·µ• z).re = -N * Int.floor (z.re / N) + z.re := by
    simp only [n, Int.cast_natCast, mul_neg, vadd_re, neg_mul]
  norm_cast at *
  rw [h, add_comm]
  simp only [neg_mul, Int.cast_neg, Int.cast_mul, Int.cast_natCast]
  have hnn : (0 : ‚Ñù) < (N : ‚Ñù) := by norm_cast at *
  have h2 : z.re + -(N * n) =  z.re - n * N := by ring
  rw [h2, abs_eq_self.2 (Int.sub_floor_div_mul_nonneg (z.re : ‚Ñù) hnn)]
  apply (Int.sub_floor_div_mul_lt (z.re : ‚Ñù) hnn).le

end strips

section ofComplex

/-- A section `‚ÑÇ ‚Üí ‚Ñç` of the natural inclusion map, bundled as a `PartialHomeomorph`. -/
def ofComplex : PartialHomeomorph ‚ÑÇ ‚Ñç := (isOpenEmbedding_coe.toPartialHomeomorph _).symm

/-- Extend a function on `‚Ñç` arbitrarily to a function on all of `‚ÑÇ`. -/
scoped notation "‚Üë‚Çï" f => f ‚àò ofComplex

@[simp]
lemma ofComplex_apply (z : ‚Ñç) : ofComplex (z : ‚ÑÇ) = z :=
  IsOpenEmbedding.toPartialHomeomorph_left_inv ..

lemma ofComplex_apply_eq_ite (w : ‚ÑÇ) :
    ofComplex w = if hw : 0 < w.im then ‚ü®w, hw‚ü© else Classical.choice inferInstance := by
  split_ifs with hw
  ¬∑ exact ofComplex_apply ‚ü®w, hw‚ü©
  ¬∑ change (Function.invFunOn UpperHalfPlane.coe Set.univ w) = _
    simp only [invFunOn, dite_eq_right_iff, mem_univ, true_and]
    rintro ‚ü®a, rfl‚ü©
    exact (a.prop.not_le (by simpa using hw)).elim

lemma ofComplex_apply_of_im_pos {z : ‚ÑÇ} (hz : 0 < z.im) :
    ofComplex z = ‚ü®z, hz‚ü© := by
  simpa only [coe_mk_subtype] using ofComplex_apply ‚ü®z, hz‚ü©

lemma ofComplex_apply_of_im_nonpos {w : ‚ÑÇ} (hw : w.im ‚â§ 0) :
    ofComplex w = Classical.choice inferInstance := by
  simp [ofComplex_apply_eq_ite w, hw]

lemma ofComplex_apply_eq_of_im_nonpos {w w' : ‚ÑÇ} (hw : w.im ‚â§ 0) (hw' : w'.im ‚â§ 0) :
    ofComplex w = ofComplex w' := by
  simp [ofComplex_apply_of_im_nonpos, hw, hw']

lemma comp_ofComplex (f : ‚Ñç ‚Üí ‚ÑÇ) (z : ‚Ñç) : (‚Üë‚Çï f) z = f z :=
  congrArg _ <| ofComplex_apply z

lemma comp_ofComplex_of_im_pos (f : ‚Ñç ‚Üí ‚ÑÇ) (z : ‚ÑÇ) (hz : 0 < z.im) : (‚Üë‚Çï f) z = f ‚ü®z, hz‚ü© :=
  congrArg _ <| ofComplex_apply ‚ü®z, hz‚ü©

lemma comp_ofComplex_of_im_le_zero (f : ‚Ñç ‚Üí ‚ÑÇ) (z z' : ‚ÑÇ) (hz : z.im ‚â§ 0) (hz' : z'.im ‚â§ 0)  :
    (‚Üë‚Çï f) z = (‚Üë‚Çï f) z' := by
  simp [ofComplex_apply_of_im_nonpos, hz, hz']

lemma eventuallyEq_coe_comp_ofComplex {z : ‚ÑÇ} (hz : 0 < z.im) :
    UpperHalfPlane.coe ‚àò ofComplex =·∂†[ùìù z] id := by
  filter_upwards [(Complex.continuous_im.isOpen_preimage _ isOpen_Ioi).mem_nhds hz] with x hx
  simp only [Function.comp_apply, ofComplex_apply_of_im_pos hx, id_eq, coe_mk_subtype]

end ofComplex

end UpperHalfPlane
