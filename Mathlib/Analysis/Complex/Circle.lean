/-
Copyright (c) 2021 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth
-/
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
import Mathlib.Analysis.Normed.Field.UnitBall

/-!
# The circle

This file defines `circle` to be the metric sphere (`Metric.sphere`) in `‚ÑÇ` centred at `0` of
radius `1`.  We equip it with the following structure:

* a submonoid of `‚ÑÇ`
* a group
* a topological group

We furthermore define `Circle.exp` to be the natural map `fun t ‚Ü¶ exp (t * I)` from `‚Ñù` to
`circle`, and show that this map is a group homomorphism.

We define two additive characters onto the circle:
* `Real.fourierChar`: The character `fun x ‚Ü¶ exp ((2 * œÄ * x) * I)` (for which we introduce the
  notation `ùêû` in the locale `FourierTransform`). This uses the analyst convention that there is a
  `2 * œÄ` in the exponent.
* `Real.probChar`: The character `fun x ‚Ü¶ exp (x * I)`, which uses the probabilist convention that
  there is no `2 * œÄ` in the exponent.

## Implementation notes

Because later (in `Geometry.Manifold.Instances.Sphere`) one wants to equip the circle with a smooth
manifold structure borrowed from `Metric.sphere`, the underlying set is
`{z : ‚ÑÇ | abs (z - 0) = 1}`.  This prevents certain algebraic facts from working definitionally --
for example, the circle is not defeq to `{z : ‚ÑÇ | abs z = 1}`, which is the kernel of `Complex.abs`
considered as a homomorphism from `‚ÑÇ` to `‚Ñù`, nor is it defeq to `{z : ‚ÑÇ | normSq z = 1}`, which
is the kernel of the homomorphism `Complex.normSq` from `‚ÑÇ` to `‚Ñù`.

-/


noncomputable section

open Complex Function Metric

open ComplexConjugate

/-- The unit circle in `‚ÑÇ`. -/
def Circle : Type := Submonoid.unitSphere ‚ÑÇ
deriving TopologicalSpace

namespace Circle
variable {x y : Circle}

instance instCoeOut : CoeOut Circle ‚ÑÇ := subtypeCoe

instance instCommGroup : CommGroup Circle := Metric.sphere.instCommGroup
instance instMetricSpace : MetricSpace Circle := Subtype.metricSpace

@[ext] lemma ext : (x : ‚ÑÇ) = y ‚Üí x = y := Subtype.ext

lemma coe_injective : Injective ((‚Üë) : Circle ‚Üí ‚ÑÇ) := fun _ _ ‚Ü¶ ext

-- Not simp because `SetLike.coe_eq_coe` already proves it
lemma coe_inj : (x : ‚ÑÇ) = y ‚Üî x = y := coe_injective.eq_iff

lemma norm_coe (z : Circle) : ‚Äñ(z : ‚ÑÇ)‚Äñ = 1 := mem_sphere_zero_iff_norm.1 z.2

@[deprecated (since := "2025-02-16")] alias abs_coe := norm_coe

@[simp] lemma normSq_coe (z : Circle) : normSq z = 1 := by simp [normSq_eq_norm_sq]
@[simp] lemma coe_ne_zero (z : Circle) : (z : ‚ÑÇ) ‚â† 0 := ne_zero_of_mem_unit_sphere z
@[simp, norm_cast] lemma coe_one : ‚Üë(1 : Circle) = (1 : ‚ÑÇ) := rfl
-- Not simp because `OneMemClass.coe_eq_one` already proves it
@[norm_cast] lemma coe_eq_one : (x : ‚ÑÇ) = 1 ‚Üî x = 1 := by rw [‚Üê coe_inj, coe_one]
@[simp, norm_cast] lemma coe_mul (z w : Circle) : ‚Üë(z * w) = (z : ‚ÑÇ) * w := rfl
@[simp, norm_cast] lemma coe_inv (z : Circle) : ‚Üëz‚Åª¬π = (z : ‚ÑÇ)‚Åª¬π := rfl
lemma coe_inv_eq_conj (z : Circle) : ‚Üëz‚Åª¬π = conj (z : ‚ÑÇ) := by
  rw [coe_inv, inv_def, normSq_coe, inv_one, ofReal_one, mul_one]

@[simp, norm_cast] lemma coe_div (z w : Circle) : ‚Üë(z / w) = (z : ‚ÑÇ) / w := rfl

/-- The coercion `Circle ‚Üí ‚ÑÇ` as a monoid homomorphism. -/
@[simps]
def coeHom : Circle ‚Üí* ‚ÑÇ where
  toFun := (‚Üë)
  map_one' := coe_one
  map_mul' := coe_mul

/-- The elements of the circle embed into the units. -/
def toUnits : Circle ‚Üí* Units ‚ÑÇ := unitSphereToUnits ‚ÑÇ

-- written manually because `@[simps]` generated the wrong lemma
@[simp] lemma toUnits_apply (z : Circle) : toUnits z = Units.mk0 ‚Üëz z.coe_ne_zero := rfl

instance : CompactSpace Circle := Metric.sphere.compactSpace _ _
instance : IsTopologicalGroup Circle := Metric.sphere.instIsTopologicalGroup
instance instUniformSpace : UniformSpace Circle := instUniformSpaceSubtype
instance : IsUniformGroup Circle := by
  convert topologicalGroup_is_uniform_of_compactSpace Circle
  exact unique_uniformity_of_compact rfl rfl

/-- If `z` is a nonzero complex number, then `conj z / z` belongs to the unit circle. -/
@[simps]
def ofConjDivSelf (z : ‚ÑÇ) (hz : z ‚â† 0) : Circle where
  val := conj z / z
  property := mem_sphere_zero_iff_norm.2 <| by
    rw [norm_div, RCLike.norm_conj, div_self]; exact norm_ne_zero_iff.mpr hz

/-- The map `fun t => exp (t * I)` from `‚Ñù` to the unit circle in `‚ÑÇ`. -/
def exp : C(‚Ñù, Circle) where
  toFun t := ‚ü®(t * I).exp, by simp [Submonoid.unitSphere, exp_mul_I, norm_cos_add_sin_mul_I]‚ü©
  continuous_toFun := Continuous.subtype_mk (by fun_prop)
    (by simp [Submonoid.unitSphere, exp_mul_I, norm_cos_add_sin_mul_I])

@[simp, norm_cast]
theorem coe_exp (t : ‚Ñù) : exp t = Complex.exp (t * Complex.I) := rfl

@[simp]
theorem exp_zero : exp 0 = 1 :=
  Subtype.ext <| by rw [coe_exp, ofReal_zero, zero_mul, Complex.exp_zero, coe_one]

@[simp]
theorem exp_add (x y : ‚Ñù) : exp (x + y) = exp x * exp y :=
  Subtype.ext <| by
    simp only [coe_exp, Submonoid.coe_mul, ofReal_add, add_mul, Complex.exp_add, coe_mul]

/-- The map `fun t => exp (t * I)` from `‚Ñù` to the unit circle in `‚ÑÇ`,
considered as a homomorphism of groups. -/
@[simps]
def expHom : ‚Ñù ‚Üí+ Additive Circle where
  toFun := Additive.ofMul ‚àò exp
  map_zero' := exp_zero
  map_add' := exp_add

@[simp] lemma exp_sub (x y : ‚Ñù) : exp (x - y) = exp x / exp y := expHom.map_sub x y
@[simp] lemma exp_neg (x : ‚Ñù) : exp (-x) = (exp x)‚Åª¬π := expHom.map_neg x

lemma exp_pi_ne_one : Circle.exp Real.pi ‚â† 1 := by
  intro h
  have heq : (Circle.exp Real.pi : ‚ÑÇ) = 1 := by simp [h]
  rw [Circle.coe_exp, exp_pi_mul_I] at heq
  norm_num at heq

variable {e : AddChar ‚Ñù Circle}

@[simp]
lemma star_addChar (x : ‚Ñù) : star ((e x) : ‚ÑÇ) = e (-x) := by
  have h := Circle.coe_inv_eq_conj ‚ü®e x, ?_‚ü©
  ¬∑ simp only [Circle.coe_inv] at h
    simp [‚Üê h, e.map_neg_eq_inv]
  ¬∑ simp only [Submonoid.unitSphere, SetLike.coe_mem]

@[simp]
lemma starRingEnd_addChar (x : ‚Ñù) : starRingEnd ‚ÑÇ (e x) = e (-x) := star_addChar x

variable {Œ± Œ≤ M : Type*}

instance instSMul [SMul ‚ÑÇ Œ±] : SMul Circle Œ± := Submonoid.smul _

instance instSMulCommClass_left [SMul ‚ÑÇ Œ≤] [SMul Œ± Œ≤] [SMulCommClass ‚ÑÇ Œ± Œ≤] :
    SMulCommClass Circle Œ± Œ≤ := Submonoid.smulCommClass_left _

instance instSMulCommClass_right [SMul ‚ÑÇ Œ≤] [SMul Œ± Œ≤] [SMulCommClass Œ± ‚ÑÇ Œ≤] :
    SMulCommClass Œ± Circle Œ≤ := Submonoid.smulCommClass_right _

instance instIsScalarTower [SMul ‚ÑÇ Œ±] [SMul ‚ÑÇ Œ≤] [SMul Œ± Œ≤] [IsScalarTower ‚ÑÇ Œ± Œ≤] :
    IsScalarTower Circle Œ± Œ≤ := Submonoid.isScalarTower _

instance instMulAction [MulAction ‚ÑÇ Œ±] : MulAction Circle Œ± := Submonoid.mulAction _

instance instDistribMulAction [AddMonoid M] [DistribMulAction ‚ÑÇ M] :
    DistribMulAction Circle M := Submonoid.distribMulAction _

lemma smul_def [SMul ‚ÑÇ Œ±] (z : Circle) (a : Œ±) : z ‚Ä¢ a = (z : ‚ÑÇ) ‚Ä¢ a := rfl

instance instContinuousSMul [TopologicalSpace Œ±] [MulAction ‚ÑÇ Œ±] [ContinuousSMul ‚ÑÇ Œ±] :
    ContinuousSMul Circle Œ± := Submonoid.continuousSMul

@[simp]
protected lemma norm_smul {E : Type*} [SeminormedAddCommGroup E] [NormedSpace ‚ÑÇ E]
    (u : Circle) (v : E) :
    ‚Äñu ‚Ä¢ v‚Äñ = ‚Äñv‚Äñ := by
  rw [Submonoid.smul_def, norm_smul, norm_eq_of_mem_sphere, one_mul]

end Circle

namespace Real

/-- The additive character from `‚Ñù` onto the circle, given by `fun x ‚Ü¶ exp (2 * œÄ * x * I)`.
Denoted as `ùêû` within the `Real.FourierTransform` namespace. This uses the analyst convention that
there is a `2 * œÄ` in the exponent. -/
def fourierChar : AddChar ‚Ñù Circle where
  toFun z := .exp (2 * œÄ * z)
  map_zero_eq_one' := by rw [mul_zero, Circle.exp_zero]
  map_add_eq_mul' x y := by rw [mul_add, Circle.exp_add]

@[inherit_doc] scoped[FourierTransform] notation "ùêû" => Real.fourierChar

open FourierTransform

theorem fourierChar_apply' (x : ‚Ñù) : ùêû x = Circle.exp (2 * œÄ * x) := rfl

theorem fourierChar_apply (x : ‚Ñù) : ùêû x = Complex.exp (‚Üë(2 * œÄ * x) * Complex.I) := rfl

@[continuity]
theorem continuous_fourierChar : Continuous ùêû := Circle.exp.continuous.comp (continuous_mul_left _)

theorem fourierChar_ne_one : fourierChar ‚â† 1 := by
  rw [DFunLike.ne_iff]
  use 2‚Åª¬π
  simp only [fourierChar_apply', AddChar.one_apply]
  rw [mul_comm, ‚Üê mul_assoc, inv_mul_cancel‚ÇÄ (by positivity), one_mul]
  exact Circle.exp_pi_ne_one

/-- The additive character from `‚Ñù` onto the circle, given by `fun x ‚Ü¶ exp (x * I)`. This uses the
probabilist convention that there is no `2 * œÄ` in the exponent. -/
def probChar : AddChar ‚Ñù Circle where
  toFun := Circle.exp
  map_zero_eq_one' := Circle.exp_zero
  map_add_eq_mul' := Circle.exp_add

theorem probChar_apply' (x : ‚Ñù) : probChar x = Circle.exp x := rfl

theorem probChar_apply (x : ‚Ñù) : probChar x = Complex.exp (x * Complex.I) := rfl

@[continuity]
theorem continuous_probChar : Continuous probChar := Circle.exp.continuous

theorem probChar_ne_one : probChar ‚â† 1 := by
  rw [DFunLike.ne_iff]
  use Real.pi
  simpa only [probChar_apply'] using Circle.exp_pi_ne_one

end Real
