/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.Calculus.ContDiff.Basic
import Mathlib.Analysis.Calculus.ContDiff.Operations
import Mathlib.Analysis.InnerProductSpace.CanonicalTensor

/-!
# The Laplacian

This file defines the Laplacian for functions `f : E ‚Üí F` on real, finite-dimensional, inner product
spaces `E`. In essence, we define the Laplacian of `f` as the second derivative, applied to the
canonical covariant tensor of `E`, as defined and discussed in
`Mathlib.Analysis.InnerProductSpace.CanonicalTensor`.

We show that the Laplacian is `‚Ñù`-linear on continuously differentiable functions, and establish the
standard formula for computing the Laplacian in terms of orthonormal bases of `E`.
-/

open Filter TensorProduct Topology

section secondDerivativeAPI

/-!
## Supporting API

The definition of the Laplacian of a function `f : E ‚Üí F` involves the notion of the second
derivative, which can be seen as a continuous multilinear map `ContinuousMultilinearMap ùïú (fun (i :
Fin 2) ‚Ü¶ E) F`, a bilinear map `E ‚Üí‚Çó[ùïú] E ‚Üí‚Çó[ùïú] F`, or a linear map on tensors `E ‚äó[ùïú] E ‚Üí‚Çó[ùïú]
F`. This section provides convenience API to convert between these notions.
-/

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ùïú G]

variable (ùïú) in
/--
Convenience reformulation of the second iterated derivative, as a map from `E` to bilinear maps
`E ‚Üí‚Çó[‚Ñù] E ‚Üí‚Çó[‚Ñù] ‚Ñù
-/
noncomputable def bilinearIteratedFDerivWithinTwo (f : E ‚Üí F) (s : Set E) : E ‚Üí E ‚Üí‚Çó[ùïú] E ‚Üí‚Çó[ùïú] F :=
  fun x ‚Ü¶ (fderivWithin ùïú (fderivWithin ùïú f s) s x).toLinearMap‚ÇÇ

variable (ùïú) in
/--
Convenience reformulation of the second iterated derivative, as a map from `E` to bilinear maps
`E ‚Üí‚Çó[‚Ñù] E ‚Üí‚Çó[‚Ñù] ‚Ñù
-/
noncomputable def bilinearIteratedFDerivTwo (f : E ‚Üí F) : E ‚Üí E ‚Üí‚Çó[ùïú] E ‚Üí‚Çó[ùïú] F :=
  fun x ‚Ü¶ (fderiv ùïú (fderiv ùïú f) x).toLinearMap‚ÇÇ

/--
Expression of `bilinearIteratedFDerivWithinTwo` in terms of `iteratedFDerivWithin`.
-/
lemma bilinearIteratedFDerivWithinTwo_eq_iteratedFDeriv {e : E} {s : Set E} (f : E ‚Üí F)
    (hs : UniqueDiffOn ùïú s) (he : e ‚àà s) (e‚ÇÅ e‚ÇÇ : E) :
    bilinearIteratedFDerivWithinTwo ùïú f s e e‚ÇÅ e‚ÇÇ = iteratedFDerivWithin ùïú 2 f s e ![e‚ÇÅ, e‚ÇÇ] := by
  simp [iteratedFDerivWithin_two_apply f hs he ![e‚ÇÅ, e‚ÇÇ], bilinearIteratedFDerivWithinTwo]

/--
Expression of `bilinearIteratedFDerivTwo` in terms of `iteratedFDeriv`.
-/
lemma bilinearIteratedFDerivTwo_eq_iteratedFDeriv (f : E ‚Üí F) (e e‚ÇÅ e‚ÇÇ : E) :
    bilinearIteratedFDerivTwo ùïú f e e‚ÇÅ e‚ÇÇ = iteratedFDeriv ùïú 2 f e ![e‚ÇÅ, e‚ÇÇ] := by
  simp [iteratedFDeriv_two_apply f e ![e‚ÇÅ, e‚ÇÇ], bilinearIteratedFDerivTwo]

variable (ùïú) in
/--
Convenience reformulation of the second iterated derivative, as a map from `E` to linear maps
`E ‚äó[ùïú] E ‚Üí‚Çó[ùïú] F`.
-/
noncomputable def tensorIteratedFDerivWithinTwo (f : E ‚Üí F) (s : Set E) : E ‚Üí E ‚äó[ùïú] E ‚Üí‚Çó[ùïú] F :=
  fun e ‚Ü¶ lift (bilinearIteratedFDerivWithinTwo ùïú f s e)

variable (ùïú) in
/--
Convenience reformulation of the second iterated derivative, as a map from `E` to linear maps
`E ‚äó[ùïú] E ‚Üí‚Çó[ùïú] F`.
-/
noncomputable def tensorIteratedFDerivTwo (f : E ‚Üí F) : E ‚Üí E ‚äó[ùïú] E ‚Üí‚Çó[ùïú] F :=
  fun e ‚Ü¶ lift (bilinearIteratedFDerivTwo ùïú f e)

/--
Expression of `tensorIteratedFDerivTwo` in terms of `iteratedFDerivWithin`.
-/
lemma tensorIteratedFDerivWithinTwo_eq_iteratedFDerivWithin {e : E} {s : Set E} (f : E ‚Üí F)
    (hs : UniqueDiffOn ùïú s) (he : e ‚àà s) (e‚ÇÅ e‚ÇÇ : E) :
    tensorIteratedFDerivWithinTwo ùïú f s e (e‚ÇÅ ‚äó‚Çú[ùïú] e‚ÇÇ) =
      iteratedFDerivWithin ùïú 2 f s e ![e‚ÇÅ, e‚ÇÇ] := by
  rw [‚Üê bilinearIteratedFDerivWithinTwo_eq_iteratedFDeriv f hs he, tensorIteratedFDerivWithinTwo]
  rfl

/--
Expression of `tensorIteratedFDerivTwo` in terms of `iteratedFDeriv`.
-/
lemma tensorIteratedFDerivTwo_eq_iteratedFDeriv (f : E ‚Üí F) (e e‚ÇÅ e‚ÇÇ : E) :
    tensorIteratedFDerivTwo ùïú f e (e‚ÇÅ ‚äó‚Çú[ùïú] e‚ÇÇ) = iteratedFDeriv ùïú 2 f e ![e‚ÇÅ, e‚ÇÇ] := by
  rw [‚Üê bilinearIteratedFDerivTwo_eq_iteratedFDeriv, tensorIteratedFDerivTwo]
  rfl

end secondDerivativeAPI

/-!
## Definition of the Laplacian
-/

variable
  {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ‚Ñù G]
  {f f‚ÇÅ f‚ÇÇ : E ‚Üí F} {x : E} {s : Set E}

namespace InnerProductSpace

variable (f s) in
/--
Laplacian for functions on real inner product spaces, with respect to a set `s`. Use `open
InnerProductSpace` to access the notation `Œî[s]` for `InnerProductSpace.LaplacianWithin`.
-/
noncomputable def laplacianWithin : E ‚Üí F :=
  fun x ‚Ü¶ tensorIteratedFDerivWithinTwo ‚Ñù f s x (InnerProductSpace.canonicalCovariantTensor E)

@[inherit_doc]
scoped[InnerProductSpace] notation "Œî[" s "]" f:60 => laplacianWithin f s

variable (f) in
/--
Laplacian for functions on real inner product spaces. Use `open InnerProductSpace` to access the
notation `Œî` for `InnerProductSpace.Laplacian`.
-/
noncomputable def laplacian : E ‚Üí F :=
  fun x ‚Ü¶ tensorIteratedFDerivTwo ‚Ñù f x (InnerProductSpace.canonicalCovariantTensor E)

@[inherit_doc]
scoped[InnerProductSpace] notation "Œî" => laplacian

/--
The Laplacian equals the Laplacian with respect to `Set.univ`.
-/
@[simp]
theorem laplacianWithin_univ :
    Œî[(Set.univ: Set E)] f = Œî f := by
  ext x
  simp [laplacian, tensorIteratedFDerivTwo, bilinearIteratedFDerivTwo,
    laplacianWithin, tensorIteratedFDerivWithinTwo, bilinearIteratedFDerivWithinTwo]

/-!
## Computation of Œî in Terms of Orthonormal Bases
-/

variable (f) in
/--
Standard formula, computing the Laplacian from any orthonormal basis.
-/
theorem laplacianWithin_eq_iteratedFDerivWithin_orthonormalBasis {Œπ : Type*} [Fintype Œπ] {e : E}
    (hs : UniqueDiffOn ‚Ñù s) (he : e ‚àà s) (v : OrthonormalBasis Œπ ‚Ñù E) :
    (Œî[s] f) e = ‚àë i, iteratedFDerivWithin ‚Ñù 2 f s e ![v i, v i] := by
  simp [InnerProductSpace.laplacianWithin, canonicalCovariantTensor_eq_sum E v,
    tensorIteratedFDerivWithinTwo_eq_iteratedFDerivWithin f hs he]

variable (f) in
/--
Standard formula, computing the Laplacian from any orthonormal basis.
-/
theorem laplacian_eq_iteratedFDeriv_orthonormalBasis {Œπ : Type*} [Fintype Œπ]
    (v : OrthonormalBasis Œπ ‚Ñù E) :
    Œî f = fun x ‚Ü¶ ‚àë i, iteratedFDeriv ‚Ñù 2 f x ![v i, v i] := by
  ext x
  simp [InnerProductSpace.laplacian, canonicalCovariantTensor_eq_sum E v,
    tensorIteratedFDerivTwo_eq_iteratedFDeriv]

variable (f) in
/--
Standard formula, computing the Laplacian from the standard orthonormal basis of a real inner
product space.
-/
theorem laplacianWithin_eq_iteratedFDerivWithin_stdOrthonormalBasis {e : E} (hs : UniqueDiffOn ‚Ñù s)
    (he : e ‚àà s) :
    (Œî[s] f) e = ‚àë i, iteratedFDerivWithin ‚Ñù 2 f s e
      ![(stdOrthonormalBasis ‚Ñù E) i, (stdOrthonormalBasis ‚Ñù E) i] := by
  apply laplacianWithin_eq_iteratedFDerivWithin_orthonormalBasis f hs he (stdOrthonormalBasis ‚Ñù E)

variable (f) in
/--
Standard formula, computing the Laplacian from the standard orthonormal basis of a real inner
product space.
-/
theorem laplacian_eq_iteratedFDeriv_stdOrthonormalBasis :
    Œî f = fun x ‚Ü¶
      ‚àë i, iteratedFDeriv ‚Ñù 2 f x ![(stdOrthonormalBasis ‚Ñù E) i, (stdOrthonormalBasis ‚Ñù E) i] :=
  laplacian_eq_iteratedFDeriv_orthonormalBasis f (stdOrthonormalBasis ‚Ñù E)

/--
Special case of the standard formula for functions on `‚ÑÇ`, with the standard real inner product
structure.
-/
theorem laplacianWithin_eq_iteratedFDerivWithin_complexPlane {e : ‚ÑÇ} {s : Set ‚ÑÇ} (f : ‚ÑÇ ‚Üí F)
    (hs : UniqueDiffOn ‚Ñù s) (he : e ‚àà s) :
    (Œî[s] f) e = iteratedFDerivWithin ‚Ñù 2 f s e ![1, 1]
      + iteratedFDerivWithin ‚Ñù 2 f s e ![Complex.I, Complex.I] := by
  simp [laplacianWithin_eq_iteratedFDerivWithin_orthonormalBasis f hs he
    Complex.orthonormalBasisOneI]

/--
Special case of the standard formula for functions on `‚ÑÇ`, with the standard real inner product
structure.
-/
theorem laplacian_eq_iteratedFDeriv_complexPlane (f : ‚ÑÇ ‚Üí F) :
    Œî f = fun x ‚Ü¶
      iteratedFDeriv ‚Ñù 2 f x ![1, 1] + iteratedFDeriv ‚Ñù 2 f x ![Complex.I, Complex.I] := by
  simp [laplacian_eq_iteratedFDeriv_orthonormalBasis f Complex.orthonormalBasisOneI]

/-!
## Congruence Lemmata for Œî
-/

/--
If two functions agree in a neighborhood of a point, then so do their Laplacians.
-/
theorem laplacianWithin_congr_nhdsWithin (h : f‚ÇÅ =·∂†[ùìù[s] x] f‚ÇÇ) (hs : UniqueDiffOn ‚Ñù s) :
    Œî[s] f‚ÇÅ =·∂†[ùìù[s] x] Œî[s] f‚ÇÇ := by
  filter_upwards [EventuallyEq.iteratedFDerivWithin (ùïú := ‚Ñù) h 2,
    eventually_mem_nhdsWithin] with x h‚ÇÅx h‚ÇÇx
  simp [laplacianWithin_eq_iteratedFDerivWithin_stdOrthonormalBasis _ hs h‚ÇÇx, h‚ÇÅx]

/--
If two functions agree in a neighborhood of a point, then so do their Laplacians.
-/
theorem laplacian_congr_nhds (h : f‚ÇÅ =·∂†[ùìù x] f‚ÇÇ) :
    Œî f‚ÇÅ =·∂†[ùìù x] Œî f‚ÇÇ := by
  filter_upwards [EventuallyEq.iteratedFDeriv ‚Ñù h 2] with x hx
  simp [laplacian_eq_iteratedFDeriv_stdOrthonormalBasis, hx]

/-!
## ‚Ñù-Linearity of Œî on Continuously Differentiable Functions
-/

/-- The Laplacian commutes with addition. -/
theorem _root_.ContDiffWithinAt.laplacianWithin_add (h‚ÇÅ : ContDiffWithinAt ‚Ñù 2 f‚ÇÅ s x)
    (h‚ÇÇ : ContDiffWithinAt ‚Ñù 2 f‚ÇÇ s x) (hs : UniqueDiffOn ‚Ñù s) (hx : x ‚àà s) :
    (Œî[s] (f‚ÇÅ + f‚ÇÇ)) x = (Œî[s] f‚ÇÅ) x + (Œî[s] f‚ÇÇ) x := by
  simp [laplacianWithin_eq_iteratedFDerivWithin_stdOrthonormalBasis _ hs hx,
    ‚Üê Finset.sum_add_distrib, iteratedFDerivWithin_add_apply h‚ÇÅ h‚ÇÇ hs hx]

/-- The Laplacian commutes with addition. -/
theorem _root_.ContDiffAt.laplacian_add (h‚ÇÅ : ContDiffAt ‚Ñù 2 f‚ÇÅ x) (h‚ÇÇ : ContDiffAt ‚Ñù 2 f‚ÇÇ x) :
    Œî (f‚ÇÅ + f‚ÇÇ) x = Œî f‚ÇÅ x + Œî f‚ÇÇ x := by
  simp [laplacian_eq_iteratedFDeriv_stdOrthonormalBasis,
    ‚Üê Finset.sum_add_distrib, iteratedFDeriv_add_apply h‚ÇÅ h‚ÇÇ]

/-- The Laplacian commutes with addition. -/
theorem _root_.ContDiffAt.laplacianWithin_add_nhdsWithin (h‚ÇÅ : ContDiffWithinAt ‚Ñù 2 f‚ÇÅ s x)
    (h‚ÇÇ : ContDiffWithinAt ‚Ñù 2 f‚ÇÇ s x) (hs : UniqueDiffOn ‚Ñù s) (hx : x ‚àà s) :
    Œî[s] (f‚ÇÅ + f‚ÇÇ) =·∂†[ùìù[s] x] (Œî[s] f‚ÇÅ) + Œî[s] f‚ÇÇ:= by
  nth_rw 1 [‚Üê s.insert_eq_of_mem hx]
  filter_upwards [h‚ÇÅ.eventually (by simp), h‚ÇÇ.eventually (by simp),
    eventually_mem_nhdsWithin] with y h‚ÇÅy h‚ÇÇy h‚ÇÉy
  rw [s.insert_eq_of_mem hx] at h‚ÇÉy
  simp [h‚ÇÅy.laplacianWithin_add h‚ÇÇy hs h‚ÇÉy]

/-- The Laplacian commutes with addition. -/
theorem _root_.ContDiffAt.laplacian_add_nhds (h‚ÇÅ : ContDiffAt ‚Ñù 2 f‚ÇÅ x) (h‚ÇÇ : ContDiffAt ‚Ñù 2 f‚ÇÇ x) :
    Œî (f‚ÇÅ + f‚ÇÇ) =·∂†[ùìù x] (Œî f‚ÇÅ) + (Œî f‚ÇÇ) := by
  filter_upwards [h‚ÇÅ.eventually (by simp), h‚ÇÇ.eventually (by simp)] with x h‚ÇÅx h‚ÇÇx
  exact h‚ÇÅx.laplacian_add h‚ÇÇx

/-- The Laplacian commutes with scalar multiplication. -/
theorem laplacianWithin_smul (v : ‚Ñù) (hf : ContDiffWithinAt ‚Ñù 2 f s x) (hs : UniqueDiffOn ‚Ñù s)
    (hx : x ‚àà s) :
    (Œî[s] (v ‚Ä¢ f)) x = v ‚Ä¢ (Œî[s] f) x := by
  simp [laplacianWithin_eq_iteratedFDerivWithin_stdOrthonormalBasis _ hs hx,
    iteratedFDerivWithin_const_smul_apply hf hs hx,
    Finset.smul_sum]

/-- The Laplacian commutes with scalar multiplication. -/
theorem laplacian_smul (v : ‚Ñù) (hf : ContDiffAt ‚Ñù 2 f x) : Œî (v ‚Ä¢ f) x = v ‚Ä¢ (Œî f) x := by
  simp [laplacian_eq_iteratedFDeriv_stdOrthonormalBasis, iteratedFDeriv_const_smul_apply hf,
    Finset.smul_sum]

/-- The Laplacian commutes with scalar multiplication. -/
theorem laplacianWithin_smul_nhds
    (v : ‚Ñù) (hf : ContDiffWithinAt ‚Ñù 2 f s x) (hs : UniqueDiffOn ‚Ñù s) :
    Œî[s] (v ‚Ä¢ f) =·∂†[ùìù[s] x] v ‚Ä¢ (Œî[s] f) := by
  filter_upwards [(hf.eventually (by simp)).filter_mono (nhdsWithin_mono _ (Set.subset_insert ..)),
    eventually_mem_nhdsWithin] with a h‚ÇÅa using laplacianWithin_smul v h‚ÇÅa hs

/-- The Laplacian commutes with scalar multiplication. -/
theorem laplacian_smul_nhds (v : ‚Ñù) (h : ContDiffAt ‚Ñù 2 f x) :
    Œî (v ‚Ä¢ f) =·∂†[ùìù x] v ‚Ä¢ (Œî f) := by
  filter_upwards [h.eventually (not_eq_of_beq_eq_false rfl)] with a ha
  simp [laplacian_smul v ha]

/-!
## Commutativity of Œî with Linear Operators

This section establishes commutativity with linear operators, showing in particular that `Œî`
commutes with taking real and imaginary parts of complex-valued functions.
-/

/-- The Laplacian commutes with left composition by continuous linear maps. -/
theorem _root_.ContDiffWithinAt.laplacianWithin_CLM_comp_left {l : F ‚ÜíL[‚Ñù] G}
    (h : ContDiffWithinAt ‚Ñù 2 f s x) (hs : UniqueDiffOn ‚Ñù s) (hx : x ‚àà s) :
    (Œî[s] (l ‚àò f)) x = (l ‚àò (Œî[s] f)) x := by
  simp [laplacianWithin_eq_iteratedFDerivWithin_stdOrthonormalBasis _ hs hx,
    l.iteratedFDerivWithin_comp_left h hs hx]

/-- The Laplacian commutes with left composition by continuous linear maps. -/
theorem _root_.ContDiffAt.laplacian_CLM_comp_left {l : F ‚ÜíL[‚Ñù] G} (h : ContDiffAt ‚Ñù 2 f x) :
    Œî (l ‚àò f) x = (l ‚àò (Œî f)) x := by
  simp [laplacian_eq_iteratedFDeriv_stdOrthonormalBasis, l.iteratedFDeriv_comp_left h]

/-- The Laplacian commutes with left composition by continuous linear maps. -/
theorem _root_.ContDiffWithinAt.laplacianWithin_CLM_comp_left_nhds {l : F ‚ÜíL[‚Ñù] G}
    (h : ContDiffWithinAt ‚Ñù 2 f s x) (hs : UniqueDiffOn ‚Ñù s) :
    Œî[s] (l ‚àò f) =·∂†[ùìù[s] x] l ‚àò Œî[s] f := by
  filter_upwards [(h.eventually (by simp)).filter_mono (nhdsWithin_mono _ (Set.subset_insert ..)),
    eventually_mem_nhdsWithin] with a h‚ÇÅa using h‚ÇÅa.laplacianWithin_CLM_comp_left hs

/-- The Laplacian commutes with left composition by continuous linear maps. -/
theorem _root_.ContDiffAt.laplacian_CLM_comp_left_nhds {l : F ‚ÜíL[‚Ñù] G} (h : ContDiffAt ‚Ñù 2 f x) :
    Œî (l ‚àò f) =·∂†[ùìù x] l ‚àò (Œî f) := by
  filter_upwards [h.eventually (by simp)] with a ha
  rw [ha.laplacian_CLM_comp_left]

/-- The Laplacian commutes with left composition by continuous linear equivalences. -/
theorem laplacianWithin_CLE_comp_left {l : F ‚âÉL[‚Ñù] G} (hs : UniqueDiffOn ‚Ñù s) (hx : x ‚àà s) :
    (Œî[s] (l ‚àò f)) x = (l ‚àò (Œî[s] f)) x := by
  simp [laplacianWithin_eq_iteratedFDerivWithin_stdOrthonormalBasis _ hs hx,
    l.iteratedFDerivWithin_comp_left _ hs hx]

/-- The Laplacian commutes with left composition by continuous linear equivalences. -/
theorem laplacian_CLE_comp_left {l : F ‚âÉL[‚Ñù] G} :
    Œî (l ‚àò f) = l ‚àò (Œî f) := by
  ext x
  simp [laplacian_eq_iteratedFDeriv_stdOrthonormalBasis, l.iteratedFDeriv_comp_left]

end InnerProductSpace
