/-
Copyright (c) 2024 Floris van Doorn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn, Heather Macbeth
-/
import Mathlib.Analysis.InnerProductSpace.Calculus
import Mathlib.Analysis.NormedSpace.Dual
import Mathlib.Analysis.SpecialFunctions.Pow.Deriv

/-!
# Properties about the powers of the norm

In this file we prove that `x ‚Ü¶ ‚Äñx‚Äñ ^ p` is continuously differentiable for
an inner product space and for a real number `p > 1`.

## Todo:
* `x ‚Ü¶ ‚Äñx‚Äñ ^ p` should be `C^n` for `p > n`.

-/

section ContDiffNormPow

open Asymptotics Real Topology
open scoped NNReal

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E]
variable {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

theorem hasFDerivAt_norm_rpow (x : E) {p : ‚Ñù} (hp : 1 < p) :
    HasFDerivAt (fun x : E ‚Ü¶ ‚Äñx‚Äñ ^ p) ((p * ‚Äñx‚Äñ ^ (p - 2)) ‚Ä¢ innerSL ‚Ñù x) x := by
  by_cases hx : x = 0
  ¬∑ simp [hx]
    have h2p : 0 < p - 1 := sub_pos.mpr hp
    rw [HasFDerivAt, hasFDerivAtFilter_iff_isLittleO]
    calc (fun x : E ‚Ü¶ ‚Äñx‚Äñ ^ p - ‚Äñ(0 : E)‚Äñ ^ p - 0)
        = (fun x : E ‚Ü¶ ‚Äñx‚Äñ ^ p) := by simp [zero_lt_one.trans hp |>.ne']
      _ = (fun x : E ‚Ü¶ ‚Äñx‚Äñ * ‚Äñx‚Äñ ^ (p - 1)) := by
          ext x
          rw [‚Üê rpow_one_add' (norm_nonneg x) (by positivity)]
          ring_nf
      _ =o[ùìù 0] (fun x : E ‚Ü¶ ‚Äñx‚Äñ * 1) := by
        refine (isBigO_refl _ _).mul_isLittleO <| (isLittleO_const_iff <| by norm_num).mpr ?_
        convert continuousAt_id.norm.rpow_const (.inr h2p.le) |>.tendsto
        simp [h2p.ne']
      _ =O[ùìù 0] (fun (x : E) ‚Ü¶ x - 0) := by
        simp_rw [mul_one, isBigO_norm_left (f' := fun x ‚Ü¶ x), sub_zero, isBigO_refl]
  ¬∑ apply HasStrictFDerivAt.hasFDerivAt
    convert (hasStrictFDerivAt_norm_sq x).rpow_const (p := p / 2) (by simp [hx]) using 0
    simp_rw [‚Üê Real.rpow_natCast_mul (norm_nonneg _), nsmul_eq_smul_cast ‚Ñù, smul_smul]
    ring_nf -- doesn't close the goal?
    congr! 2
    ring

theorem differentiable_norm_rpow {p : ‚Ñù} (hp : 1 < p) :
    Differentiable ‚Ñù (fun x : E ‚Ü¶ ‚Äñx‚Äñ ^ p) :=
  fun x ‚Ü¶ hasFDerivAt_norm_rpow x hp |>.differentiableAt

theorem hasDerivAt_norm_rpow (x : ‚Ñù) {p : ‚Ñù} (hp : 1 < p) :
    HasDerivAt (fun x : ‚Ñù ‚Ü¶ ‚Äñx‚Äñ ^ p) (p * ‚Äñx‚Äñ ^ (p - 2) * x) x := by
  convert hasFDerivAt_norm_rpow x hp |>.hasDerivAt using 1; simp

theorem hasDerivAt_abs_rpow (x : ‚Ñù) {p : ‚Ñù} (hp : 1 < p) :
    HasDerivAt (fun x : ‚Ñù ‚Ü¶ |x| ^ p) (p * |x| ^ (p - 2) * x) x := by
  simpa using hasDerivAt_norm_rpow x hp

theorem fderiv_norm_rpow (x : E) {p : ‚Ñù} (hp : 1 < p) :
    fderiv ‚Ñù (fun x ‚Ü¶ ‚Äñx‚Äñ ^ p) x = (p * ‚Äñx‚Äñ ^ (p - 2)) ‚Ä¢ innerSL ‚Ñù x :=
  hasFDerivAt_norm_rpow x hp |>.fderiv

theorem Differentiable.fderiv_norm_rpow {f : F ‚Üí E} (hf : Differentiable ‚Ñù f)
    {x : F} {p : ‚Ñù} (hp : 1 < p) :
    fderiv ‚Ñù (fun x ‚Ü¶ ‚Äñf x‚Äñ ^ p) x =
    (p * ‚Äñf x‚Äñ ^ (p - 2)) ‚Ä¢ (innerSL ‚Ñù (f x)).comp (fderiv ‚Ñù f x) :=
  hasFDerivAt_norm_rpow (f x) hp |>.comp x (hf x).hasFDerivAt |>.fderiv

theorem norm_fderiv_norm_rpow_le {f : F ‚Üí E} (hf : Differentiable ‚Ñù f) {x : F}
    {p : ‚Ñù} (hp : 1 < p) :
    ‚Äñfderiv ‚Ñù (fun x ‚Ü¶ ‚Äñf x‚Äñ ^ p) x‚Äñ ‚â§ p * ‚Äñf x‚Äñ ^ (p - 1) * ‚Äñfderiv ‚Ñù f x‚Äñ := by
  rw [hf.fderiv_norm_rpow hp, norm_smul, norm_mul]
  simp_rw [norm_rpow_of_nonneg (norm_nonneg _), norm_norm, norm_eq_abs,
    abs_eq_self.mpr <| zero_le_one.trans hp.le, mul_assoc]
  gcongr _ * ?_
  refine mul_le_mul_of_nonneg_left (ContinuousLinearMap.opNorm_comp_le ..) (by positivity)
    |>.trans_eq ?_
  rw [innerSL_apply_norm, ‚Üê mul_assoc, ‚Üê Real.rpow_add_one' (by positivity) (by linarith)]
  ring_nf

theorem norm_fderiv_norm_id_rpow (x : E) {p : ‚Ñù} (hp : 1 < p) :
    ‚Äñfderiv ‚Ñù (fun x ‚Ü¶ ‚Äñx‚Äñ ^ p) x‚Äñ = p * ‚Äñx‚Äñ ^ (p - 1) := by
  rw [fderiv_norm_rpow x hp, norm_smul, norm_mul]
  simp_rw [norm_rpow_of_nonneg (norm_nonneg _), norm_norm, norm_eq_abs,
    abs_eq_self.mpr <| zero_le_one.trans hp.le, mul_assoc, innerSL_apply_norm]
  rw [‚Üê Real.rpow_add_one' (by positivity) (by linarith)]
  ring_nf

theorem nnnorm_fderiv_norm_rpow_le {f : F ‚Üí E} (hf : Differentiable ‚Ñù f)
    {x : F} {p : ‚Ñù‚â•0} (hp : 1 < p) :
    ‚Äñfderiv ‚Ñù (fun x ‚Ü¶ ‚Äñf x‚Äñ ^ (p : ‚Ñù)) x‚Äñ‚Çä ‚â§ p * ‚Äñf x‚Äñ‚Çä ^ ((p : ‚Ñù) - 1) * ‚Äñfderiv ‚Ñù f x‚Äñ‚Çä :=
  norm_fderiv_norm_rpow_le hf hp

theorem contDiff_norm_rpow {p : ‚Ñù} (hp : 1 < p) : ContDiff ‚Ñù 1 (fun x : E ‚Ü¶ ‚Äñx‚Äñ ^ p) := by
  rw [contDiff_one_iff_fderiv]
  refine ‚ü®fun x ‚Ü¶ hasFDerivAt_norm_rpow x hp |>.differentiableAt, ?_‚ü©
  simp_rw [continuous_iff_continuousAt]
  intro x
  by_cases hx : x = 0
  ¬∑ simp_rw [hx, ContinuousAt, fderiv_norm_rpow (0 : E) hp, norm_zero, map_zero, smul_zero]
    rw [tendsto_zero_iff_norm_tendsto_zero]
    refine tendsto_of_tendsto_of_tendsto_of_le_of_le (tendsto_const_nhds) ?_
      (fun _ ‚Ü¶ norm_nonneg _) (fun _ ‚Ü¶ norm_fderiv_norm_id_rpow _ hp |>.le)
    suffices ContinuousAt (fun x : E ‚Ü¶ p * ‚Äñx‚Äñ ^ (p - 1)) 0  by
      simpa [ContinuousAt, sub_ne_zero_of_ne hp.ne'] using this
    fun_prop (discharger := simp [hp.le])
  ¬∑ simp_rw [funext fun x ‚Ü¶ fderiv_norm_rpow (E := E) (x := x) hp]
    fun_prop (discharger := simp [hx])

theorem ContDiff.norm_rpow {f : F ‚Üí E} (hf : ContDiff ‚Ñù 1 f) {p : ‚Ñù} (hp : 1 < p) :
    ContDiff ‚Ñù 1 (fun x ‚Ü¶ ‚Äñf x‚Äñ ^ p) :=
  contDiff_norm_rpow hp |>.comp hf

theorem Differentiable.norm_rpow {f : F ‚Üí E} (hf : Differentiable ‚Ñù f) {p : ‚Ñù} (hp : 1 < p) :
    Differentiable ‚Ñù (fun x ‚Ü¶ ‚Äñf x‚Äñ ^ p) :=
  contDiff_norm_rpow hp |>.differentiable le_rfl |>.comp hf

end ContDiffNormPow
