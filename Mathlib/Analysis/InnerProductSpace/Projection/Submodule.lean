/-
Copyright (c) 2019 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou, Fr√©d√©ric Dupuis, Heather Macbeth
-/
import Mathlib.Analysis.InnerProductSpace.Projection.Basic

/-!
# Subspaces associated with orthogonal projections

Here, the orthogonal projection is used to prove a series of more subtle lemmas about the
orthogonal complement of subspaces of `E` (the orthogonal complement itself was
defined in `Analysis.InnerProductSpace.Orthogonal`) such that they admit
orthogonal projections; the lemma
`Submodule.sup_orthogonal_of_hasOrthogonalProjection`,
stating that for a subspace `K` of `E` such that `K` admits an orthogonal projection we have
`K ‚äî K·óÆ = ‚ä§`, is a typical example.
-/

variable {ùïú E F : Type*} [RCLike ùïú]
variable [NormedAddCommGroup E] [NormedAddCommGroup F]
variable [InnerProductSpace ùïú E] [InnerProductSpace ‚Ñù F]

local notation "‚ü™" x ", " y "‚ü´" => inner ùïú x y

variable (K : Submodule ùïú E)

namespace Submodule

/-- If `K‚ÇÅ` admits an orthogonal projection and is contained in `K‚ÇÇ`,
then `K‚ÇÅ` and `K‚ÇÅ·óÆ ‚äì K‚ÇÇ` span `K‚ÇÇ`. -/
theorem sup_orthogonal_inf_of_hasOrthogonalProjection {K‚ÇÅ K‚ÇÇ : Submodule ùïú E} (h : K‚ÇÅ ‚â§ K‚ÇÇ)
    [K‚ÇÅ.HasOrthogonalProjection] : K‚ÇÅ ‚äî K‚ÇÅ·óÆ ‚äì K‚ÇÇ = K‚ÇÇ := by
  ext x
  rw [Submodule.mem_sup]
  let v : K‚ÇÅ := orthogonalProjection K‚ÇÅ x
  have hvm : x - v ‚àà K‚ÇÅ·óÆ := sub_starProjection_mem_orthogonal x
  constructor
  ¬∑ rintro ‚ü®y, hy, z, hz, rfl‚ü©
    exact K‚ÇÇ.add_mem (h hy) hz.2
  ¬∑ exact fun hx => ‚ü®v, v.prop, x - v, ‚ü®hvm, K‚ÇÇ.sub_mem hx (h v.prop)‚ü©, add_sub_cancel _ _‚ü©

@[deprecated (since := "2025-07-27")] alias sup_orthogonal_inf_of_completeSpace :=
  sup_orthogonal_inf_of_hasOrthogonalProjection

variable {K} in
/-- If `K` admits an orthogonal projection, then `K` and `K·óÆ` span the whole space. -/
theorem sup_orthogonal_of_hasOrthogonalProjection [K.HasOrthogonalProjection] : K ‚äî K·óÆ = ‚ä§ := by
  convert Submodule.sup_orthogonal_inf_of_hasOrthogonalProjection (le_top : K ‚â§ ‚ä§) using 2
  simp

@[deprecated (since := "2025-07-27")] alias sup_orthogonal_of_completeSpace :=
  sup_orthogonal_of_hasOrthogonalProjection

/-- If `K` admits an orthogonal projection, then the orthogonal complement of its orthogonal
complement is itself. -/
@[simp]
theorem orthogonal_orthogonal [K.HasOrthogonalProjection] : K·óÆ·óÆ = K := by
  ext v
  constructor
  ¬∑ obtain ‚ü®y, hy, z, hz, rfl‚ü© := K.exists_add_mem_mem_orthogonal v
    intro hv
    have hz' : z = 0 := by
      have hyz : ‚ü™z, y‚ü´ = 0 := by simp [hz y hy, inner_eq_zero_symm]
      simpa [inner_add_right, hyz] using hv z hz
    simp [hy, hz']
  ¬∑ intro hv w hw
    rw [inner_eq_zero_symm]
    exact hw v hv

lemma orthogonal_le_orthogonal_iff {K‚ÇÄ K‚ÇÅ : Submodule ùïú E} [K‚ÇÄ.HasOrthogonalProjection]
    [K‚ÇÅ.HasOrthogonalProjection] : K‚ÇÄ·óÆ ‚â§ K‚ÇÅ·óÆ ‚Üî K‚ÇÅ ‚â§ K‚ÇÄ :=
  ‚ü®fun h ‚Ü¶ by simpa using orthogonal_le h, orthogonal_le‚ü©

lemma orthogonal_le_iff_orthogonal_le {K‚ÇÄ K‚ÇÅ : Submodule ùïú E} [K‚ÇÄ.HasOrthogonalProjection]
    [K‚ÇÅ.HasOrthogonalProjection] : K‚ÇÄ·óÆ ‚â§ K‚ÇÅ ‚Üî K‚ÇÅ·óÆ ‚â§ K‚ÇÄ := by
  rw [‚Üê orthogonal_le_orthogonal_iff, orthogonal_orthogonal]

lemma le_orthogonal_iff_le_orthogonal {K‚ÇÄ K‚ÇÅ : Submodule ùïú E} [K‚ÇÄ.HasOrthogonalProjection]
    [K‚ÇÅ.HasOrthogonalProjection] : K‚ÇÄ ‚â§ K‚ÇÅ·óÆ ‚Üî K‚ÇÅ ‚â§ K‚ÇÄ·óÆ := by
  rw [‚Üê orthogonal_le_orthogonal_iff, orthogonal_orthogonal]

/-- In a Hilbert space, the orthogonal complement of the orthogonal complement of a subspace `K`
is the topological closure of `K`.

Note that the completeness assumption is necessary. Let `E` be the space `‚Ñï ‚Üí‚ÇÄ ‚Ñù` with inner space
structure inherited from `PiLp 2 (fun _ : ‚Ñï ‚Ü¶ ‚Ñù)`. Let `K` be the subspace of sequences with the sum
of all elements equal to zero. Then `K·óÆ = ‚ä•`, `K·óÆ·óÆ = ‚ä§`. -/
theorem orthogonal_orthogonal_eq_closure [CompleteSpace E] :
    K·óÆ·óÆ = K.topologicalClosure := by
  refine le_antisymm ?_ ?_
  ¬∑ convert Submodule.orthogonal_orthogonal_monotone K.le_topologicalClosure using 1
    rw [K.topologicalClosure.orthogonal_orthogonal]
  ¬∑ exact K.topologicalClosure_minimal K.le_orthogonal_orthogonal K·óÆ.isClosed_orthogonal

variable {K}

/-- If `K` admits an orthogonal projection, `K` and `K·óÆ` are complements of each other. -/
theorem isCompl_orthogonal_of_hasOrthogonalProjection [K.HasOrthogonalProjection] : IsCompl K K·óÆ :=
  ‚ü®K.orthogonal_disjoint, codisjoint_iff.2 Submodule.sup_orthogonal_of_hasOrthogonalProjection‚ü©

@[deprecated (since := "2025-07-27")] alias isCompl_orthogonal_of_completeSpace :=
  isCompl_orthogonal_of_hasOrthogonalProjection

@[simp]
theorem orthogonalComplement_eq_orthogonalComplement {L : Submodule ùïú E} [K.HasOrthogonalProjection]
    [L.HasOrthogonalProjection] : K·óÆ = L·óÆ ‚Üî K = L :=
  ‚ü®fun h ‚Ü¶ by simpa using congr(Submodule.orthogonal $(h)),
    fun h ‚Ü¶ congr(Submodule.orthogonal $(h))‚ü©

@[simp]
theorem orthogonal_eq_bot_iff [K.HasOrthogonalProjection] : K·óÆ = ‚ä• ‚Üî K = ‚ä§ := by
  refine ‚ü®?_, fun h => by rw [h, Submodule.top_orthogonal_eq_bot]‚ü©
  intro h
  have : K ‚äî K·óÆ = ‚ä§ := Submodule.sup_orthogonal_of_hasOrthogonalProjection
  rwa [h, sup_comm, bot_sup_eq] at this

open Topology Finsupp RCLike Real Filter

/-- Given a monotone family `U` of complete submodules of `E` and a fixed `x : E`,
the orthogonal projection of `x` on `U i` tends to the orthogonal projection of `x` on
`(‚®Ü i, U i).topologicalClosure` along `atTop`. -/
theorem starProjection_tendsto_closure_iSup {Œπ : Type*} [Preorder Œπ]
    (U : Œπ ‚Üí Submodule ùïú E) [‚àÄ i, (U i).HasOrthogonalProjection]
    [(‚®Ü i, U i).topologicalClosure.HasOrthogonalProjection] (hU : Monotone U) (x : E) :
    Filter.Tendsto (fun i => (U i).starProjection x) atTop
      (ùìù ((‚®Ü i, U i).topologicalClosure.starProjection x)) := by
  refine .of_neBot_imp fun h ‚Ü¶ ?_
  cases atTop_neBot_iff.mp h
  let y := (‚®Ü i, U i).topologicalClosure.starProjection x
  have proj_x : ‚àÄ i, (U i).orthogonalProjection x = (U i).orthogonalProjection y := fun i =>
    (orthogonalProjection_starProjection_of_le
        ((le_iSup U i).trans (iSup U).le_topologicalClosure) _).symm
  suffices ‚àÄ Œµ > 0, ‚àÉ I, ‚àÄ i ‚â• I, ‚Äñ(U i).starProjection y - y‚Äñ < Œµ by
    simpa only [starProjection_apply, proj_x, NormedAddCommGroup.tendsto_atTop] using this
  intro Œµ hŒµ
  obtain ‚ü®a, ha, hay‚ü© : ‚àÉ a ‚àà ‚®Ü i, U i, dist y a < Œµ := by
    have y_mem : y ‚àà (‚®Ü i, U i).topologicalClosure := Submodule.coe_mem _
    rw [‚Üê SetLike.mem_coe, Submodule.topologicalClosure_coe, Metric.mem_closure_iff] at y_mem
    exact y_mem Œµ hŒµ
  rw [dist_eq_norm] at hay
  obtain ‚ü®I, hI‚ü© : ‚àÉ I, a ‚àà U I := by rwa [Submodule.mem_iSup_of_directed _ hU.directed_le] at ha
  refine ‚ü®I, fun i (hi : I ‚â§ i) => ?_‚ü©
  rw [norm_sub_rev, starProjection_minimal]
  refine lt_of_le_of_lt ?_ hay
  change _ ‚â§ ‚Äñy - (‚ü®a, hU hi hI‚ü© : U i)‚Äñ
  exact ciInf_le ‚ü®0, Set.forall_mem_range.mpr fun _ => norm_nonneg _‚ü© _

@[deprecated (since := "2025-07-07")] alias orthogonalProjection_tendsto_closure_iSup :=
  starProjection_tendsto_closure_iSup

/-- Given a monotone family `U` of complete submodules of `E` with dense span supremum,
and a fixed `x : E`, the orthogonal projection of `x` on `U i` tends to `x` along `at_top`. -/
theorem starProjection_tendsto_self {Œπ : Type*} [Preorder Œπ]
    (U : Œπ ‚Üí Submodule ùïú E) [‚àÄ t, (U t).HasOrthogonalProjection] (hU : Monotone U) (x : E)
    (hU' : ‚ä§ ‚â§ (‚®Ü t, U t).topologicalClosure) :
    Filter.Tendsto (fun t => (U t).starProjection x) atTop (ùìù x) := by
  have : (‚®Ü i, U i).topologicalClosure.HasOrthogonalProjection := by
    rw [top_unique hU']
    infer_instance
  convert starProjection_tendsto_closure_iSup U hU x
  rw [eq_comm, starProjection_eq_self_iff, top_unique hU']
  trivial

@[deprecated (since := "2025-07-07")] alias
  orthogonalProjection_tendsto_self := starProjection_tendsto_self

/-- The orthogonal complement satisfies `K·óÆ·óÆ·óÆ = K·óÆ`. -/
theorem triorthogonal_eq_orthogonal [CompleteSpace E] : K·óÆ·óÆ·óÆ = K·óÆ := by
  rw [K·óÆ.orthogonal_orthogonal_eq_closure]
  exact K.isClosed_orthogonal.submodule_topologicalClosure_eq

/-- The closure of `K` is the full space iff `K·óÆ` is trivial. -/
theorem topologicalClosure_eq_top_iff [CompleteSpace E] :
    K.topologicalClosure = ‚ä§ ‚Üî K·óÆ = ‚ä• := by
  rw [‚Üê K.orthogonal_orthogonal_eq_closure]
  constructor <;> intro h
  ¬∑ rw [‚Üê Submodule.triorthogonal_eq_orthogonal, h, Submodule.top_orthogonal_eq_bot]
  ¬∑ rw [h, Submodule.bot_orthogonal_eq_top]


theorem orthogonalProjection_eq_linearProjOfIsCompl [K.HasOrthogonalProjection] (x : E) :
    K.orthogonalProjection x =
      K.linearProjOfIsCompl _ Submodule.isCompl_orthogonal_of_hasOrthogonalProjection x := by
  have : IsCompl K K·óÆ := Submodule.isCompl_orthogonal_of_hasOrthogonalProjection
  conv_lhs => rw [‚Üê Submodule.linearProjOfIsCompl_add_linearProjOfIsCompl_eq_self this x]
  rw [map_add, orthogonalProjection_mem_subspace_eq_self,
    orthogonalProjection_mem_subspace_orthogonalComplement_eq_zero (Submodule.coe_mem _), add_zero]

@[deprecated (since := "2025-07-11")] alias orthogonalProjection_eq_linear_proj :=
  orthogonalProjection_eq_linearProjOfIsCompl

theorem orthogonalProjection_coe_eq_linearProjOfIsCompl [K.HasOrthogonalProjection] :
    (K.orthogonalProjection : E ‚Üí‚Çó[ùïú] K) =
      K.linearProjOfIsCompl _ Submodule.isCompl_orthogonal_of_hasOrthogonalProjection :=
  LinearMap.ext <| orthogonalProjection_eq_linearProjOfIsCompl

@[deprecated (since := "2025-07-11")] alias orthogonalProjection_coe_linearMap_eq_linearProj :=
  orthogonalProjection_coe_eq_linearProjOfIsCompl

open Submodule in
theorem starProjection_coe_eq_isCompl_projection [K.HasOrthogonalProjection] :
    K.starProjection.toLinearMap = K.isCompl_orthogonal_of_hasOrthogonalProjection.projection := by
  simp [starProjection, orthogonalProjection_coe_eq_linearProjOfIsCompl, IsCompl.projection]

end Submodule

namespace Dense

open Submodule

variable {K} {x y : E}

theorem eq_zero_of_inner_left (hK : Dense (K : Set E)) (h : ‚àÄ v : K, ‚ü™x, v‚ü´ = 0) : x = 0 := by
  have : (‚ü™x, ¬∑‚ü´) = 0 := (continuous_const.inner continuous_id).ext_on
    hK continuous_const (Subtype.forall.1 h)
  simpa using congr_fun this x

theorem eq_zero_of_mem_orthogonal (hK : Dense (K : Set E)) (h : x ‚àà K·óÆ) : x = 0 :=
  eq_zero_of_inner_left hK fun v ‚Ü¶ (mem_orthogonal' _ _).1 h _ v.2

/-- If `S` is dense and `x - y ‚àà K·óÆ`, then `x = y`. -/
theorem eq_of_sub_mem_orthogonal (hK : Dense (K : Set E)) (h : x - y ‚àà K·óÆ) : x = y :=
  sub_eq_zero.1 <| eq_zero_of_mem_orthogonal hK h

theorem eq_of_inner_left (hK : Dense (K : Set E)) (h : ‚àÄ v : K, ‚ü™x, v‚ü´ = ‚ü™y, v‚ü´) : x = y :=
  hK.eq_of_sub_mem_orthogonal (Submodule.sub_mem_orthogonal_of_inner_left h)

theorem eq_of_inner_right (hK : Dense (K : Set E)) (h : ‚àÄ v : K, ‚ü™(v : E), x‚ü´ = ‚ü™(v : E), y‚ü´) :
    x = y :=
  hK.eq_of_sub_mem_orthogonal (Submodule.sub_mem_orthogonal_of_inner_right h)

theorem eq_zero_of_inner_right (hK : Dense (K : Set E)) (h : ‚àÄ v : K, ‚ü™(v : E), x‚ü´ = 0) : x = 0 :=
  hK.eq_of_inner_right fun v => by rw [inner_zero_right, h v]

end Dense
