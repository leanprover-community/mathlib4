/-
Copyright (c) 2019 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou, Fr√©d√©ric Dupuis, Heather Macbeth
-/
import Mathlib.Analysis.InnerProductSpace.Basic
import Mathlib.Analysis.SpecificLimits.Basic

/-!
# Existence of minimizers (Hilbert projection theorem)

This file shows the existence of minimizers (also known as the Hilbert projection theorem).
This is the key tool that is used to define `Submodule.orthogonalProjection` in
`Mathlib/Analysis/InnerProductSpace/Projection/Basic.lean`.
-/

variable {ùïú E F : Type*} [RCLike ùïú]
variable [NormedAddCommGroup E] [NormedAddCommGroup F]
variable [InnerProductSpace ùïú E] [InnerProductSpace ‚Ñù F]

local notation "‚ü™" x ", " y "‚ü´" => inner ùïú x y
local notation "absR" => @abs ‚Ñù _ _

open Topology RCLike Real Filter InnerProductSpace

/-- **Existence of minimizers**, aka the **Hilbert projection theorem**.

Let `u` be a point in a real inner product space, and let `K` be a nonempty complete convex subset.
Then there exists a (unique) `v` in `K` that minimizes the distance `‚Äñu - v‚Äñ` to `u`. -/
theorem exists_norm_eq_iInf_of_complete_convex {K : Set F} (ne : K.Nonempty) (h‚ÇÅ : IsComplete K)
    (h‚ÇÇ : Convex ‚Ñù K) : ‚àÄ u : F, ‚àÉ v ‚àà K, ‚Äñu - v‚Äñ = ‚®Ö w : K, ‚Äñu - w‚Äñ := fun u => by
  let Œ¥ := ‚®Ö w : K, ‚Äñu - w‚Äñ
  letI : Nonempty K := ne.to_subtype
  have zero_le_Œ¥ : 0 ‚â§ Œ¥ := le_ciInf fun _ => norm_nonneg _
  have Œ¥_le : ‚àÄ w : K, Œ¥ ‚â§ ‚Äñu - w‚Äñ := ciInf_le ‚ü®0, Set.forall_mem_range.2 fun _ => norm_nonneg _‚ü©
  have Œ¥_le' : ‚àÄ w ‚àà K, Œ¥ ‚â§ ‚Äñu - w‚Äñ := fun w hw => Œ¥_le ‚ü®w, hw‚ü©
  -- Step 1: since `Œ¥` is the infimum, can find a sequence `w : ‚Ñï ‚Üí K` in `K`
  -- such that `‚Äñu - w n‚Äñ < Œ¥ + 1 / (n + 1)` (which implies `‚Äñu - w n‚Äñ --> Œ¥`);
  -- maybe this should be a separate lemma
  have exists_seq : ‚àÉ w : ‚Ñï ‚Üí K, ‚àÄ n, ‚Äñu - w n‚Äñ < Œ¥ + 1 / (n + 1) := by
    have hŒ¥ : ‚àÄ n : ‚Ñï, Œ¥ < Œ¥ + 1 / (n + 1) := fun n =>
      lt_add_of_le_of_pos le_rfl Nat.one_div_pos_of_nat
    have h := fun n => exists_lt_of_ciInf_lt (hŒ¥ n)
    let w : ‚Ñï ‚Üí K := fun n => Classical.choose (h n)
    exact ‚ü®w, fun n => Classical.choose_spec (h n)‚ü©
  rcases exists_seq with ‚ü®w, hw‚ü©
  have norm_tendsto : Tendsto (fun n => ‚Äñu - w n‚Äñ) atTop (ùìù Œ¥) := by
    have h : Tendsto (fun _ : ‚Ñï => Œ¥) atTop (ùìù Œ¥) := tendsto_const_nhds
    have h' : Tendsto (fun n : ‚Ñï => Œ¥ + 1 / (n + 1)) atTop (ùìù Œ¥) := by
      convert h.add tendsto_one_div_add_atTop_nhds_zero_nat
      simp only [add_zero]
    exact tendsto_of_tendsto_of_tendsto_of_le_of_le h h' (fun x => Œ¥_le _) fun x => le_of_lt (hw _)
  -- Step 2: Prove that the sequence `w : ‚Ñï ‚Üí K` is a Cauchy sequence
  have seq_is_cauchy : CauchySeq fun n => (w n : F) := by
    rw [cauchySeq_iff_le_tendsto_0]
    -- splits into three goals
    let b := fun n : ‚Ñï => 8 * Œ¥ * (1 / (n + 1)) + 4 * (1 / (n + 1)) * (1 / (n + 1))
    use fun n => ‚àö(b n)
    constructor
    -- first goal :  `‚àÄ (n : ‚Ñï), 0 ‚â§ ‚àö(b n)`
    ¬∑ intro n
      exact sqrt_nonneg _
    constructor
    -- second goal : `‚àÄ (n m N : ‚Ñï), N ‚â§ n ‚Üí N ‚â§ m ‚Üí dist ‚Üë(w n) ‚Üë(w m) ‚â§ ‚àö(b N)`
    ¬∑ intro p q N hp hq
      let wp := (w p : F)
      let wq := (w q : F)
      let a := u - wq
      let b := u - wp
      let half := 1 / (2 : ‚Ñù)
      let div := 1 / ((N : ‚Ñù) + 1)
      have :
        4 * ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ * ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ + ‚Äñwp - wq‚Äñ * ‚Äñwp - wq‚Äñ =
          2 * (‚Äña‚Äñ * ‚Äña‚Äñ + ‚Äñb‚Äñ * ‚Äñb‚Äñ) :=
        calc
          4 * ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ * ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ + ‚Äñwp - wq‚Äñ * ‚Äñwp - wq‚Äñ =
              2 * ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ * (2 * ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ) + ‚Äñwp - wq‚Äñ * ‚Äñwp - wq‚Äñ :=
            by ring
          _ =
              absR 2 * ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ * (absR 2 * ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ) +
                ‚Äñwp - wq‚Äñ * ‚Äñwp - wq‚Äñ := by
            rw [abs_of_nonneg]
            exact zero_le_two
          _ =
              ‚Äñ(2 : ‚Ñù) ‚Ä¢ (u - half ‚Ä¢ (wq + wp))‚Äñ * ‚Äñ(2 : ‚Ñù) ‚Ä¢ (u - half ‚Ä¢ (wq + wp))‚Äñ +
                ‚Äñwp - wq‚Äñ * ‚Äñwp - wq‚Äñ := by simp [norm_smul]
          _ = ‚Äña + b‚Äñ * ‚Äña + b‚Äñ + ‚Äña - b‚Äñ * ‚Äña - b‚Äñ := by
            rw [smul_sub, smul_smul, mul_one_div_cancel (_root_.two_ne_zero : (2 : ‚Ñù) ‚â† 0), ‚Üê
              one_add_one_eq_two, add_smul]
            simp only [one_smul]
            have eq‚ÇÅ : wp - wq = a - b := (sub_sub_sub_cancel_left _ _ _).symm
            have eq‚ÇÇ : u + u - (wq + wp) = a + b := by
              change u + u - (wq + wp) = u - wq + (u - wp)
              abel
            rw [eq‚ÇÅ, eq‚ÇÇ]
          _ = 2 * (‚Äña‚Äñ * ‚Äña‚Äñ + ‚Äñb‚Äñ * ‚Äñb‚Äñ) := parallelogram_law_with_norm ‚Ñù _ _
      have eq : Œ¥ ‚â§ ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ := by
        rw [smul_add]
        apply Œ¥_le'
        apply h‚ÇÇ
        repeat' exact Subtype.mem _
        repeat' exact le_of_lt one_half_pos
        exact add_halves 1
      have eq‚ÇÅ : 4 * Œ¥ * Œ¥ ‚â§ 4 * ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ * ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ := by
        simp_rw [mul_assoc]
        gcongr
      have eq‚ÇÇ : ‚Äña‚Äñ ‚â§ Œ¥ + div :=
          le_trans (le_of_lt <| hw q) (add_le_add_left (Nat.one_div_le_one_div hq) _)
      have eq‚ÇÇ' : ‚Äñb‚Äñ ‚â§ Œ¥ + div :=
          le_trans (le_of_lt <| hw p) (add_le_add_left (Nat.one_div_le_one_div hp) _)
      rw [dist_eq_norm]
      apply nonneg_le_nonneg_of_sq_le_sq
      ¬∑ exact sqrt_nonneg _
      rw [mul_self_sqrt]
      ¬∑ calc
        ‚Äñwp - wq‚Äñ * ‚Äñwp - wq‚Äñ =
            2 * (‚Äña‚Äñ * ‚Äña‚Äñ + ‚Äñb‚Äñ * ‚Äñb‚Äñ) - 4 * ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ * ‚Äñu - half ‚Ä¢ (wq + wp)‚Äñ := by
          simp [‚Üê this]
        _ ‚â§ 2 * (‚Äña‚Äñ * ‚Äña‚Äñ + ‚Äñb‚Äñ * ‚Äñb‚Äñ) - 4 * Œ¥ * Œ¥ := by gcongr
        _ ‚â§ 2 * ((Œ¥ + div) * (Œ¥ + div) + (Œ¥ + div) * (Œ¥ + div)) - 4 * Œ¥ * Œ¥ := by gcongr
        _ = 8 * Œ¥ * div + 4 * div * div := by ring
      positivity
    -- third goal : `Tendsto (fun (n : ‚Ñï) => ‚àö(b n)) atTop (ùìù 0)`
    suffices Tendsto (fun x ‚Ü¶ ‚àö(8 * Œ¥ * x + 4 * x * x) : ‚Ñù ‚Üí ‚Ñù) (ùìù 0) (ùìù 0)
      from this.comp tendsto_one_div_add_atTop_nhds_zero_nat
    exact Continuous.tendsto' (by fun_prop) _ _ (by simp)
  -- Step 3: By completeness of `K`, let `w : ‚Ñï ‚Üí K` converge to some `v : K`.
  -- Prove that it satisfies all requirements.
  rcases cauchySeq_tendsto_of_isComplete h‚ÇÅ (fun n => Subtype.mem _) seq_is_cauchy with
    ‚ü®v, hv, w_tendsto‚ü©
  use v
  use hv
  have h_cont : Continuous fun v => ‚Äñu - v‚Äñ :=
    Continuous.comp continuous_norm (Continuous.sub continuous_const continuous_id)
  have : Tendsto (fun n => ‚Äñu - w n‚Äñ) atTop (ùìù ‚Äñu - v‚Äñ) := by
    convert Tendsto.comp h_cont.continuousAt w_tendsto
  exact tendsto_nhds_unique this norm_tendsto

/-- Characterization of minimizers for the projection on a convex set in a real inner product
space. -/
theorem norm_eq_iInf_iff_real_inner_le_zero {K : Set F} (h : Convex ‚Ñù K) {u : F} {v : F}
    (hv : v ‚àà K) : (‚Äñu - v‚Äñ = ‚®Ö w : K, ‚Äñu - w‚Äñ) ‚Üî ‚àÄ w ‚àà K, ‚ü™u - v, w - v‚ü´_‚Ñù ‚â§ 0 := by
  letI : Nonempty K := ‚ü®‚ü®v, hv‚ü©‚ü©
  constructor
  ¬∑ intro eq w hw
    let Œ¥ := ‚®Ö w : K, ‚Äñu - w‚Äñ
    let p := ‚ü™u - v, w - v‚ü´_‚Ñù
    let q := ‚Äñw - v‚Äñ ^ 2
    have Œ¥_le (w : K) : Œ¥ ‚â§ ‚Äñu - w‚Äñ := ciInf_le ‚ü®0, fun _ ‚ü®_, h‚ü© => h ‚ñ∏ norm_nonneg _‚ü© _
    have Œ¥_le' (w) (hw : w ‚àà K) : Œ¥ ‚â§ ‚Äñu - w‚Äñ := Œ¥_le ‚ü®w, hw‚ü©
    have (Œ∏ : ‚Ñù) (hŒ∏‚ÇÅ : 0 < Œ∏) (hŒ∏‚ÇÇ : Œ∏ ‚â§ 1) : 2 * p ‚â§ Œ∏ * q := by
      have : ‚Äñu - v‚Äñ ^ 2 ‚â§ ‚Äñu - v‚Äñ ^ 2 - 2 * Œ∏ * ‚ü™u - v, w - v‚ü´_‚Ñù + Œ∏ * Œ∏ * ‚Äñw - v‚Äñ ^ 2 :=
        calc ‚Äñu - v‚Äñ ^ 2
          _ ‚â§ ‚Äñu - (Œ∏ ‚Ä¢ w + (1 - Œ∏) ‚Ä¢ v)‚Äñ ^ 2 := by
            simp only [sq]; apply mul_self_le_mul_self (norm_nonneg _)
            rw [eq]; apply Œ¥_le'
            apply h hw hv
            exacts [le_of_lt hŒ∏‚ÇÅ, sub_nonneg.2 hŒ∏‚ÇÇ, add_sub_cancel _ _]
          _ = ‚Äñu - v - Œ∏ ‚Ä¢ (w - v)‚Äñ ^ 2 := by
            have : u - (Œ∏ ‚Ä¢ w + (1 - Œ∏) ‚Ä¢ v) = u - v - Œ∏ ‚Ä¢ (w - v) := by
              rw [smul_sub, sub_smul, one_smul]
              simp only [sub_eq_add_neg, add_comm, add_left_comm, add_assoc, neg_add_rev]
            rw [this]
          _ = ‚Äñu - v‚Äñ ^ 2 - 2 * Œ∏ * ‚ü™u - v, w - v‚ü´_‚Ñù + Œ∏ * Œ∏ * ‚Äñw - v‚Äñ ^ 2 := by
            rw [@norm_sub_sq ‚Ñù, inner_smul_right, norm_smul]
            simp only [sq]
            change
              ‚Äñu - v‚Äñ * ‚Äñu - v‚Äñ - 2 * (Œ∏ * ‚ü™u - v, w - v‚ü´_‚Ñù) +
                absR Œ∏ * ‚Äñw - v‚Äñ * (absR Œ∏ * ‚Äñw - v‚Äñ) =
              ‚Äñu - v‚Äñ * ‚Äñu - v‚Äñ - 2 * Œ∏ * ‚ü™u - v, w - v‚ü´_‚Ñù + Œ∏ * Œ∏ * (‚Äñw - v‚Äñ * ‚Äñw - v‚Äñ)
            rw [abs_of_pos hŒ∏‚ÇÅ]; ring
      have eq‚ÇÅ :
        ‚Äñu - v‚Äñ ^ 2 - 2 * Œ∏ * ‚ü™u - v, w - v‚ü´_‚Ñù + Œ∏ * Œ∏ * ‚Äñw - v‚Äñ ^ 2 =
          ‚Äñu - v‚Äñ ^ 2 + (Œ∏ * Œ∏ * ‚Äñw - v‚Äñ ^ 2 - 2 * Œ∏ * ‚ü™u - v, w - v‚ü´_‚Ñù) := by
        abel
      rw [eq‚ÇÅ, le_add_iff_nonneg_right] at this
      have eq‚ÇÇ :
        Œ∏ * Œ∏ * ‚Äñw - v‚Äñ ^ 2 - 2 * Œ∏ * ‚ü™u - v, w - v‚ü´_‚Ñù =
          Œ∏ * (Œ∏ * ‚Äñw - v‚Äñ ^ 2 - 2 * ‚ü™u - v, w - v‚ü´_‚Ñù) := by ring
      rw [eq‚ÇÇ] at this
      exact le_of_sub_nonneg (nonneg_of_mul_nonneg_right this hŒ∏‚ÇÅ)
    by_cases hq : q = 0
    ¬∑ rw [hq] at this
      have : p ‚â§ 0 := by
        have := this (1 : ‚Ñù) (by simp) (by simp)
        linarith
      exact this
    ¬∑ have q_pos : 0 < q := lt_of_le_of_ne (sq_nonneg _) fun h ‚Ü¶ hq h.symm
      by_contra hp
      rw [not_le] at hp
      let Œ∏ := min (1 : ‚Ñù) (p / q)
      have eq‚ÇÅ : Œ∏ * q ‚â§ p :=
        calc
          Œ∏ * q ‚â§ p / q * q := mul_le_mul_of_nonneg_right (min_le_right _ _) (sq_nonneg _)
          _ = p := div_mul_cancel‚ÇÄ _ hq
      have : 2 * p ‚â§ p :=
        calc
          2 * p ‚â§ Œ∏ * q := by
            exact this Œ∏ (lt_min (by simp) (div_pos hp q_pos)) (by simp [Œ∏])
          _ ‚â§ p := eq‚ÇÅ
      linarith
  ¬∑ intro h
    apply le_antisymm
    ¬∑ apply le_ciInf
      intro w
      apply nonneg_le_nonneg_of_sq_le_sq (norm_nonneg _)
      have := h w w.2
      calc
        ‚Äñu - v‚Äñ * ‚Äñu - v‚Äñ ‚â§ ‚Äñu - v‚Äñ * ‚Äñu - v‚Äñ - 2 * ‚ü™u - v, w - v‚ü´_‚Ñù := by linarith
        _ ‚â§ ‚Äñu - v‚Äñ ^ 2 - 2 * ‚ü™u - v, w - v‚ü´_‚Ñù + ‚Äñw - v‚Äñ ^ 2 := by
          rw [sq]
          refine le_add_of_nonneg_right ?_
          exact sq_nonneg _
        _ = ‚Äñu - v - (w - v)‚Äñ ^ 2 := (@norm_sub_sq ‚Ñù _ _ _ _ _ _).symm
        _ = ‚Äñu - w‚Äñ * ‚Äñu - w‚Äñ := by
          have : u - v - (w - v) = u - w := by abel
          rw [this, sq]
    ¬∑ change ‚®Ö w : K, ‚Äñu - w‚Äñ ‚â§ (fun w : K => ‚Äñu - w‚Äñ) ‚ü®v, hv‚ü©
      apply ciInf_le
      use 0
      rintro y ‚ü®z, rfl‚ü©
      exact norm_nonneg _

namespace Submodule

variable (K : Submodule ùïú E)

/-- Existence of projections on complete subspaces.
Let `u` be a point in an inner product space, and let `K` be a nonempty complete subspace.
Then there exists a (unique) `v` in `K` that minimizes the distance `‚Äñu - v‚Äñ` to `u`.
This point `v` is usually called the orthogonal projection of `u` onto `K`.
-/
theorem exists_norm_eq_iInf_of_complete_subspace (h : IsComplete (‚ÜëK : Set E)) :
    ‚àÄ u : E, ‚àÉ v ‚àà K, ‚Äñu - v‚Äñ = ‚®Ö w : (K : Set E), ‚Äñu - w‚Äñ := by
  letI : InnerProductSpace ‚Ñù E := InnerProductSpace.rclikeToReal ùïú E
  letI : Module ‚Ñù E := RestrictScalars.module ‚Ñù ùïú E
  let K' : Submodule ‚Ñù E := Submodule.restrictScalars ‚Ñù K
  exact exists_norm_eq_iInf_of_complete_convex ‚ü®0, K'.zero_mem‚ü© h K'.convex

/-- Characterization of minimizers in the projection on a subspace, in the real case.
Let `u` be a point in a real inner product space, and let `K` be a nonempty subspace.
Then point `v` minimizes the distance `‚Äñu - v‚Äñ` over points in `K` if and only if
for all `w ‚àà K`, `‚ü™u - v, w‚ü´ = 0` (i.e., `u - v` is orthogonal to the subspace `K`).
This is superseded by `norm_eq_iInf_iff_inner_eq_zero` that gives the same conclusion over
any `RCLike` field.
-/
theorem norm_eq_iInf_iff_real_inner_eq_zero (K : Submodule ‚Ñù F) {u : F} {v : F} (hv : v ‚àà K) :
    (‚Äñu - v‚Äñ = ‚®Ö w : (‚ÜëK : Set F), ‚Äñu - w‚Äñ) ‚Üî ‚àÄ w ‚àà K, ‚ü™u - v, w‚ü´_‚Ñù = 0 :=
  Iff.intro
    (by
      intro h
      have h : ‚àÄ w ‚àà K, ‚ü™u - v, w - v‚ü´_‚Ñù ‚â§ 0 := by
        rwa [norm_eq_iInf_iff_real_inner_le_zero] at h
        exacts [K.convex, hv]
      intro w hw
      have le : ‚ü™u - v, w‚ü´_‚Ñù ‚â§ 0 := by
        let w' := w + v
        have : w' ‚àà K := Submodule.add_mem _ hw hv
        have h‚ÇÅ := h w' this
        have h‚ÇÇ : w' - v = w := by
          simp only [w', add_neg_cancel_right, sub_eq_add_neg]
        rw [h‚ÇÇ] at h‚ÇÅ
        exact h‚ÇÅ
      have ge : ‚ü™u - v, w‚ü´_‚Ñù ‚â• 0 := by
        let w'' := -w + v
        have : w'' ‚àà K := Submodule.add_mem _ (Submodule.neg_mem _ hw) hv
        have h‚ÇÅ := h w'' this
        have h‚ÇÇ : w'' - v = -w := by
          simp only [w'', add_neg_cancel_right, sub_eq_add_neg]
        rw [h‚ÇÇ, inner_neg_right] at h‚ÇÅ
        linarith
      exact le_antisymm le ge)
    (by
      intro h
      have : ‚àÄ w ‚àà K, ‚ü™u - v, w - v‚ü´_‚Ñù ‚â§ 0 := by
        intro w hw
        let w' := w - v
        have : w' ‚àà K := Submodule.sub_mem _ hw hv
        have h‚ÇÅ := h w' this
        exact le_of_eq h‚ÇÅ
      rwa [norm_eq_iInf_iff_real_inner_le_zero]
      exacts [Submodule.convex _, hv])

/-- Characterization of minimizers in the projection on a subspace.
Let `u` be a point in an inner product space, and let `K` be a nonempty subspace.
Then point `v` minimizes the distance `‚Äñu - v‚Äñ` over points in `K` if and only if
for all `w ‚àà K`, `‚ü™u - v, w‚ü´ = 0` (i.e., `u - v` is orthogonal to the subspace `K`)
-/
theorem norm_eq_iInf_iff_inner_eq_zero {u : E} {v : E} (hv : v ‚àà K) :
    (‚Äñu - v‚Äñ = ‚®Ö w : K, ‚Äñu - w‚Äñ) ‚Üî ‚àÄ w ‚àà K, ‚ü™u - v, w‚ü´ = 0 := by
  letI : InnerProductSpace ‚Ñù E := InnerProductSpace.rclikeToReal ùïú E
  letI : Module ‚Ñù E := RestrictScalars.module ‚Ñù ùïú E
  let K' : Submodule ‚Ñù E := K.restrictScalars ‚Ñù
  constructor
  ¬∑ intro H
    have A : ‚àÄ w ‚àà K, re ‚ü™u - v, w‚ü´ = 0 := (K'.norm_eq_iInf_iff_real_inner_eq_zero hv).1 H
    intro w hw
    apply RCLike.ext
    ¬∑ simp [A w hw]
    ¬∑ symm
      calc
        im (0 : ùïú) = 0 := im.map_zero
        _ = re ‚ü™u - v, (-I : ùïú) ‚Ä¢ w‚ü´ := (A _ (K.smul_mem (-I) hw)).symm
        _ = re (-I * ‚ü™u - v, w‚ü´) := by rw [inner_smul_right]
        _ = im ‚ü™u - v, w‚ü´ := by simp
  ¬∑ intro H
    have : ‚àÄ w ‚àà K', ‚ü™u - v, w‚ü´_‚Ñù = 0 := by
      intro w hw
      rw [real_inner_eq_re_inner, H w hw]
      exact zero_re
    exact (K'.norm_eq_iInf_iff_real_inner_eq_zero hv).2 this

end Submodule
