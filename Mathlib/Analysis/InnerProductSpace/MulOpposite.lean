/-
Copyright (c) 2025 Monica Omar. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Monica Omar
-/
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.LinearAlgebra.Basis.MulOpposite

/-!
# Inner product space on `Hрхљрхњрхќ`

This file defines the inner product space structure on `Hрхљрхњрхќ` where we define
the inner product naturally. We also define `OrthonormalBasis.mulOpposite`.
-/

variable {­ЮЋю H : Type*}

namespace MulOpposite

open MulOpposite

/-- The inner product of `Hрхљрхњрхќ` is given by `РЪфx, yРЪФ Рєд РЪфx.unop, y.unopРЪФ`. -/
instance [Inner ­ЮЋю H] : Inner ­ЮЋю Hрхљрхњрхќ where inner x y := inner ­ЮЋю x.unop y.unop

@[simp] theorem inner_unop [Inner ­ЮЋю H] (x y : Hрхљрхњрхќ) : inner ­ЮЋю x.unop y.unop = inner ­ЮЋю x y := rfl

@[simp] theorem inner_op [Inner ­ЮЋю H] (x y : H) : inner ­ЮЋю (op x) (op y) = inner ­ЮЋю x y := rfl

variable [RCLike ­ЮЋю] [NormedAddCommGroup H] [InnerProductSpace ­ЮЋю H]

instance : InnerProductSpace ­ЮЋю Hрхљрхњрхќ where
  norm_sq_eq_re_inner x := (inner_self_eq_norm_sq x.unop).symm
  conj_inner_symm x y := InnerProductSpace.conj_inner_symm x.unop y.unop
  add_left x y z := InnerProductSpace.add_left x.unop y.unop z.unop
  smul_left x y r := InnerProductSpace.smul_left x.unop y.unop r

theorem _root_.Module.Basis.mulOpposite_is_orthonormal_iff {╬╣ : Type*} (b : Module.Basis ╬╣ ­ЮЋю H) :
    Orthonormal ­ЮЋю b.mulOpposite Рєћ Orthonormal ­ЮЋю b := Iff.rfl

/-- The multiplicative opposite of an orthonormal basis `b`, i.e., `b i Рєд op (b i)`. -/
noncomputable def _root_.OrthonormalBasis.mulOpposite {╬╣ : Type*}
    [Fintype ╬╣] (b : OrthonormalBasis ╬╣ ­ЮЋю H) :
    OrthonormalBasis ╬╣ ­ЮЋю Hрхљрхњрхќ := b.toBasis.mulOpposite.toOrthonormalBasis b.orthonormal

theorem isometry_opLinearEquiv {R M : Type*} [Semiring R] [SeminormedAddCommGroup M] [Module R M] :
    Isometry (opLinearEquiv R (M:=M)) := fun _ _ => rfl

variable (­ЮЋю H) in
/-- The linear isometry equivalence version of the function `op`. -/
@[simps!]
def opLinearIsometryEquiv : H РЅЃРѓЌрхб[­ЮЋю] Hрхљрхњрхќ where
  toLinearEquiv := opLinearEquiv ­ЮЋю
  norm_map' _ := rfl

@[simp]
theorem toLinearEquiv_opLinearIsometryEquiv :
    (opLinearIsometryEquiv ­ЮЋю H).toLinearEquiv = opLinearEquiv ­ЮЋю := rfl

@[simp]
theorem toContinuousLinearEquiv_opLinearIsometryEquiv :
    (opLinearIsometryEquiv ­ЮЋю H).toContinuousLinearEquiv = opContinuousLinearEquiv ­ЮЋю := rfl

end MulOpposite
