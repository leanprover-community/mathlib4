/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.InnerProductSpace.Harmonic.Basic
import Mathlib.Analysis.Calculus.ContDiff.RestrictScalars
import Mathlib.Analysis.SpecialFunctions.Complex.Analytic

/-!
# Construction of Harmonic Functions

This file constructs examples of harmonic functions.

If `f : ‚ÑÇ ‚Üí F` is complex-differentiable, then `f` is harmonic. If `F = ‚ÑÇ`, then so is its real
part, imaginary part, and complex conjugate. If `f` has no zero, then `log ‚Äñf‚Äñ` is harmonic.
-/

open Complex ComplexConjugate InnerProductSpace Topology

variable
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F]
  {f : ‚ÑÇ ‚Üí F} {x : ‚ÑÇ}

/-!
## Harmonicity of Analytic Functions on the Complex Plane
-/

/--
Continuously complex-differentiable functions on ‚ÑÇ are harmonic.
-/
theorem ContDiffAt.harmonicAt (h : ContDiffAt ‚ÑÇ 2 f x) : HarmonicAt f x := by
  refine ‚ü®h.restrict_scalars ‚Ñù, ?_‚ü©
  filter_upwards [h.restrictScalars_iteratedFDeriv_eventuallyEq (ùïú := ‚Ñù)] with a ha
  have : (iteratedFDeriv ‚ÑÇ 2 f a) (I ‚Ä¢ ![1, 1])
      = (‚àè i, I) ‚Ä¢ ((iteratedFDeriv ‚ÑÇ 2 f a) ![1, 1]) :=
    (iteratedFDeriv ‚ÑÇ 2 f a).map_smul_univ (fun _ ‚Ü¶ I) ![1, 1]
  simp_all [laplacian_eq_iteratedFDeriv_complexPlane f, ‚Üê ha,
    ContinuousMultilinearMap.coe_restrictScalars]

/-- Analytic functions on ‚ÑÇ are harmonic. -/
theorem AnalyticAt.harmonicAt [CompleteSpace F] (h : AnalyticAt ‚ÑÇ f x) : HarmonicAt f x :=
  h.contDiffAt.harmonicAt

/--
If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is complex-analytic, then its real part is harmonic.
-/
theorem AnalyticAt.harmonicAt_re {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h : AnalyticAt ‚ÑÇ f x) :
    HarmonicAt (fun z ‚Ü¶ (f z).re) x := h.harmonicAt.comp_CLM reCLM

/--
If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is complex-analytic, then its imaginary part is harmonic.
-/
theorem AnalyticAt.harmonicAt_im {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h : AnalyticAt ‚ÑÇ f x) :
  HarmonicAt (fun z ‚Ü¶ (f z).im) x := h.harmonicAt.comp_CLM imCLM

/--
If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is complex-analytic, then its complex conjugate is harmonic.
-/
theorem AnalyticAt.harmonicAt_conj {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h : AnalyticAt ‚ÑÇ f x) :
  HarmonicAt (conj f) x := (harmonicAt_comp_CLE_iff conjCLE).2 h.harmonicAt

/-!
## Harmonicity of `log ‚Äñanalytic‚Äñ`
-/

/- Helper lemma for AnalyticAt.harmonicAt_log_norm -/
private lemma analyticAt_harmonicAt_log_normSq {z : ‚ÑÇ} {g : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅg : AnalyticAt ‚ÑÇ g z)
    (h‚ÇÇg : g z ‚â† 0) (h‚ÇÉg : g z ‚àà slitPlane) :
    HarmonicAt (Real.log ‚àò normSq ‚àò g) z := by
  rw [harmonicAt_congr_nhds (f‚ÇÇ := reCLM ‚àò (conjCLE ‚àò log ‚àò g + log ‚àò g))]
  ¬∑ exact (((harmonicAt_comp_CLE_iff conjCLE).2 ((analyticAt_clog h‚ÇÉg).comp h‚ÇÅg).harmonicAt).add
      ((analyticAt_clog h‚ÇÉg).comp h‚ÇÅg).harmonicAt).comp_CLM reCLM
  ¬∑ have t‚ÇÄ := h‚ÇÅg.differentiableAt.continuousAt.preimage_mem_nhds
      ((isOpen_slitPlane.inter isOpen_ne).mem_nhds ‚ü®h‚ÇÉg, h‚ÇÇg‚ü©)
    calc Real.log ‚àò normSq ‚àò g
    _ =·∂†[ùìù z] reCLM ‚àò ofRealCLM ‚àò Real.log ‚àò normSq ‚àò g := by aesop
    _ =·∂†[ùìù z] reCLM ‚àò log ‚àò ((conjCLE ‚àò g) * g) := by
      filter_upwards with x
      simp only [Function.comp_apply, ofRealCLM_apply, Pi.mul_apply, conjCLE_apply]
      rw [ofReal_log, normSq_eq_conj_mul_self]
      exact normSq_nonneg (g x)
    _ =·∂†[ùìù z] reCLM ‚àò (log ‚àò conjCLE ‚àò g + log ‚àò g) := by
      filter_upwards [t‚ÇÄ] with x hx
      simp only [Function.comp_apply, Pi.mul_apply, conjCLE_apply, Pi.add_apply]
      congr
      rw [Complex.log_mul_eq_add_log_iff _ hx.2, Complex.arg_conj]
      ¬∑ simp [Complex.slitPlane_arg_ne_pi hx.1, Real.pi_pos, Real.pi_nonneg]
      ¬∑ simpa [ne_eq, map_eq_zero] using hx.2
    _ =·∂†[ùìù z] ‚áëreCLM ‚àò (‚áëconjCLE ‚àò log ‚àò g + log ‚àò g) := by
      apply Filter.eventuallyEq_iff_exists_mem.2
      use g‚Åª¬π' (Complex.slitPlane ‚à© {0}·∂ú), t‚ÇÄ
      intro x hx
      simp only [Function.comp_apply, Pi.add_apply, conjCLE_apply]
      congr 1
      rw [‚Üê Complex.log_conj]
      simp [Complex.slitPlane_arg_ne_pi hx.1]

/--
If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is complex-analytic without zero, then `log ‚Äñf‚Äñ` is harmonic.
-/
theorem AnalyticAt.harmonicAt_log_norm {f : ‚ÑÇ ‚Üí ‚ÑÇ} {z : ‚ÑÇ} (h‚ÇÅf : AnalyticAt ‚ÑÇ f z)
    (h‚ÇÇf : f z ‚â† 0) :
    HarmonicAt (Real.log ‚Äñf ¬∑‚Äñ) z := by
  have : (Real.log ‚Äñf ¬∑‚Äñ) = (2 : ‚Ñù)‚Åª¬π ‚Ä¢ (Real.log ‚àò Complex.normSq ‚àò f) := by
    funext z
    simp only [Pi.smul_apply, Function.comp_apply, smul_eq_mul]
    rw [Complex.norm_def, Real.log_sqrt]
    linarith
    exact (f z).normSq_nonneg
  rw [this]
  apply HarmonicAt.const_smul
  by_cases h‚ÇÉf : f z ‚àà Complex.slitPlane
  ¬∑ exact analyticAt_harmonicAt_log_normSq h‚ÇÅf h‚ÇÇf h‚ÇÉf
  ¬∑ rw [(by aesop : Complex.normSq ‚àò f = Complex.normSq ‚àò (-f))]
    exact analyticAt_harmonicAt_log_normSq h‚ÇÅf.neg (by simpa)
      ((mem_slitPlane_or_neg_mem_slitPlane h‚ÇÇf).resolve_left h‚ÇÉf)
