/-
Copyright (c) 2021 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth, Fr√©d√©ric Dupuis

! This file was ported from Lean 3 source module analysis.inner_product_space.rayleigh
! leanprover-community/mathlib commit 6b0169218d01f2837d79ea2784882009a0da1aa1
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.InnerProductSpace.Calculus
import Mathbin.Analysis.InnerProductSpace.Dual
import Mathbin.Analysis.InnerProductSpace.Adjoint
import Mathbin.Analysis.Calculus.LagrangeMultipliers
import Mathbin.LinearAlgebra.Eigenspace.Basic

/-!
# The Rayleigh quotient

The Rayleigh quotient of a self-adjoint operator `T` on an inner product space `E` is the function
`Œª x, ‚ü™T x, x‚ü´ / ‚Äñx‚Äñ ^ 2`.

The main results of this file are `is_self_adjoint.has_eigenvector_of_is_max_on` and
`is_self_adjoint.has_eigenvector_of_is_min_on`, which state that if `E` is complete, and if the
Rayleigh quotient attains its global maximum/minimum over some sphere at the point `x‚ÇÄ`, then `x‚ÇÄ`
is an eigenvector of `T`, and the `supr`/`infi` of `Œª x, ‚ü™T x, x‚ü´ / ‚Äñx‚Äñ ^ 2` is the corresponding
eigenvalue.

The corollaries `is_self_adjoint.has_eigenvalue_supr_of_finite_dimensional` and
`is_self_adjoint.has_eigenvalue_supr_of_finite_dimensional` state that if `E` is finite-dimensional
and nontrivial, then `T` has some (nonzero) eigenvectors with eigenvalue the `supr`/`infi` of
`Œª x, ‚ü™T x, x‚ü´ / ‚Äñx‚Äñ ^ 2`.

## TODO

A slightly more elaborate corollary is that if `E` is complete and `T` is a compact operator, then
`T` has some (nonzero) eigenvector with eigenvalue either `‚®Ü x, ‚ü™T x, x‚ü´ / ‚Äñx‚Äñ ^ 2` or
`‚®Ö x, ‚ü™T x, x‚ü´ / ‚Äñx‚Äñ ^ 2` (not necessarily both).

-/


variable {ùïú : Type _} [IsROrC ùïú]

variable {E : Type _} [NormedAddCommGroup E] [InnerProductSpace ùïú E]

-- mathport name: ¬´expr‚ü™ , ‚ü´¬ª
local notation "‚ü™" x ", " y "‚ü´" => @inner ùïú _ _ x y

open scoped NNReal

open Module.End Metric

namespace ContinuousLinearMap

variable (T : E ‚ÜíL[ùïú] E)

-- mathport name: exprrayleigh_quotient
local notation "rayleigh_quotient" => fun x : E => T.reApplyInnerSelf x / ‚Äñ(x : E)‚Äñ ^ 2

theorem rayleigh_smul (x : E) {c : ùïú} (hc : c ‚â† 0) :
    rayleigh_quotient (c ‚Ä¢ x) = rayleigh_quotient x :=
  by
  by_cases hx : x = 0
  ¬∑ simp [hx]
  have : ‚Äñc‚Äñ ‚â† 0 := by simp [hc]
  have : ‚Äñx‚Äñ ‚â† 0 := by simp [hx]
  field_simp [norm_smul, T.re_apply_inner_self_smul]
  ring
#align continuous_linear_map.rayleigh_smul ContinuousLinearMap.rayleigh_smul

theorem image_rayleigh_eq_image_rayleigh_sphere {r : ‚Ñù} (hr : 0 < r) :
    rayleigh_quotient '' {0}·∂ú = rayleigh_quotient '' sphere 0 r :=
  by
  ext a
  constructor
  ¬∑ rintro ‚ü®x, hx : x ‚â† 0, hxT‚ü©
    have : ‚Äñx‚Äñ ‚â† 0 := by simp [hx]
    let c : ùïú := ‚Üë‚Äñx‚Äñ‚Åª¬π * r
    have : c ‚â† 0 := by simp [c, hx, hr.ne']
    refine' ‚ü®c ‚Ä¢ x, _, _‚ü©
    ¬∑ field_simp [norm_smul, abs_of_pos hr]
    ¬∑ rw [T.rayleigh_smul x this]
      exact hxT
  ¬∑ rintro ‚ü®x, hx, hxT‚ü©
    exact ‚ü®x, ne_zero_of_mem_sphere hr.ne' ‚ü®x, hx‚ü©, hxT‚ü©
#align continuous_linear_map.image_rayleigh_eq_image_rayleigh_sphere ContinuousLinearMap.image_rayleigh_eq_image_rayleigh_sphere

theorem iSup_rayleigh_eq_iSup_rayleigh_sphere {r : ‚Ñù} (hr : 0 < r) :
    (‚®Ü x : { x : E // x ‚â† 0 }, rayleigh_quotient x) = ‚®Ü x : sphere (0 : E) r, rayleigh_quotient x :=
  show (‚®Ü x : ({0} : Set E)·∂ú, rayleigh_quotient x) = _ by
    simp only [‚Üê @sSup_image' _ _ _ _ rayleigh_quotient,
      T.image_rayleigh_eq_image_rayleigh_sphere hr]
#align continuous_linear_map.supr_rayleigh_eq_supr_rayleigh_sphere ContinuousLinearMap.iSup_rayleigh_eq_iSup_rayleigh_sphere

theorem iInf_rayleigh_eq_iInf_rayleigh_sphere {r : ‚Ñù} (hr : 0 < r) :
    (‚®Ö x : { x : E // x ‚â† 0 }, rayleigh_quotient x) = ‚®Ö x : sphere (0 : E) r, rayleigh_quotient x :=
  show (‚®Ö x : ({0} : Set E)·∂ú, rayleigh_quotient x) = _ by
    simp only [‚Üê @sInf_image' _ _ _ _ rayleigh_quotient,
      T.image_rayleigh_eq_image_rayleigh_sphere hr]
#align continuous_linear_map.infi_rayleigh_eq_infi_rayleigh_sphere ContinuousLinearMap.iInf_rayleigh_eq_iInf_rayleigh_sphere

end ContinuousLinearMap

namespace IsSelfAdjoint

section Real

variable {F : Type _} [NormedAddCommGroup F] [InnerProductSpace ‚Ñù F]

theorem LinearMap.IsSymmetric.hasStrictFDerivAt_reApplyInnerSelf {T : F ‚ÜíL[‚Ñù] F}
    (hT : (T : F ‚Üí‚Çó[‚Ñù] F).IsSymmetric) (x‚ÇÄ : F) :
    HasStrictFDerivAt T.reApplyInnerSelf (bit0 (innerSL ‚Ñù (T x‚ÇÄ))) x‚ÇÄ :=
  by
  convert T.has_strict_fderiv_at.inner _ (hasStrictFDerivAt_id x‚ÇÄ)
  ext y
  simp_rw [_root_.bit0, ContinuousLinearMap.comp_apply, ContinuousLinearMap.add_apply,
    innerSL_apply, fderivInnerClm_apply, id.def, ContinuousLinearMap.prod_apply,
    ContinuousLinearMap.id_apply, hT.apply_clm x‚ÇÄ y, real_inner_comm _ x‚ÇÄ]
#align linear_map.is_symmetric.has_strict_fderiv_at_re_apply_inner_self LinearMap.IsSymmetric.hasStrictFDerivAt_reApplyInnerSelf

variable [CompleteSpace F] {T : F ‚ÜíL[‚Ñù] F}

-- mathport name: exprrayleigh_quotient
local notation "rayleigh_quotient" => fun x : F => T.reApplyInnerSelf x / ‚Äñ(x : F)‚Äñ ^ 2

theorem linearly_dependent_of_isLocalExtrOn (hT : IsSelfAdjoint T) {x‚ÇÄ : F}
    (hextr : IsLocalExtrOn T.reApplyInnerSelf (sphere (0 : F) ‚Äñx‚ÇÄ‚Äñ) x‚ÇÄ) :
    ‚àÉ a b : ‚Ñù, (a, b) ‚â† 0 ‚àß a ‚Ä¢ x‚ÇÄ + b ‚Ä¢ T x‚ÇÄ = 0 :=
  by
  have H : IsLocalExtrOn T.re_apply_inner_self {x : F | ‚Äñx‚Äñ ^ 2 = ‚Äñx‚ÇÄ‚Äñ ^ 2} x‚ÇÄ :=
    by
    convert hextr
    ext x
    simp [dist_eq_norm]
  -- find Lagrange multipliers for the function `T.re_apply_inner_self` and the
  -- hypersurface-defining function `Œª x, ‚Äñx‚Äñ ^ 2`
  obtain ‚ü®a, b, h‚ÇÅ, h‚ÇÇ‚ü© :=
    IsLocalExtrOn.exists_multipliers_of_hasStrictFDerivAt_1d H (hasStrictFDerivAt_norm_sq x‚ÇÄ)
      (hT.is_symmetric.has_strict_fderiv_at_re_apply_inner_self x‚ÇÄ)
  refine' ‚ü®a, b, h‚ÇÅ, _‚ü©
  apply (InnerProductSpace.toDualMap ‚Ñù F).Injective
  simp only [LinearIsometry.map_add, LinearIsometry.map_smul, LinearIsometry.map_zero]
  change a ‚Ä¢ innerSL _ x‚ÇÄ + b ‚Ä¢ innerSL _ (T x‚ÇÄ) = 0
  apply smul_right_injective (F ‚ÜíL[‚Ñù] ‚Ñù) (two_ne_zero : (2 : ‚Ñù) ‚â† 0)
  simpa only [_root_.bit0, add_smul, smul_add, one_smul, add_zero] using h‚ÇÇ
#align is_self_adjoint.linearly_dependent_of_is_local_extr_on IsSelfAdjoint.linearly_dependent_of_isLocalExtrOn

theorem eq_smul_self_of_isLocalExtrOn_real (hT : IsSelfAdjoint T) {x‚ÇÄ : F}
    (hextr : IsLocalExtrOn T.reApplyInnerSelf (sphere (0 : F) ‚Äñx‚ÇÄ‚Äñ) x‚ÇÄ) :
    T x‚ÇÄ = rayleigh_quotient x‚ÇÄ ‚Ä¢ x‚ÇÄ :=
  by
  obtain ‚ü®a, b, h‚ÇÅ, h‚ÇÇ‚ü© := hT.linearly_dependent_of_is_local_extr_on hextr
  by_cases hx‚ÇÄ : x‚ÇÄ = 0
  ¬∑ simp [hx‚ÇÄ]
  by_cases hb : b = 0
  ¬∑ have : a ‚â† 0 := by simpa [hb] using h‚ÇÅ
    refine' absurd _ hx‚ÇÄ
    apply smul_right_injective F this
    simpa [hb] using h‚ÇÇ
  let c : ‚Ñù := -b‚Åª¬π * a
  have hc : T x‚ÇÄ = c ‚Ä¢ x‚ÇÄ :=
    by
    have : b * (b‚Åª¬π * a) = a := by field_simp [mul_comm]
    apply smul_right_injective F hb
    simp [c, eq_neg_of_add_eq_zero_left h‚ÇÇ, ‚Üê mul_smul, this]
  convert hc
  have : ‚Äñx‚ÇÄ‚Äñ ‚â† 0 := by simp [hx‚ÇÄ]
  field_simp
  simpa [inner_smul_left, real_inner_self_eq_norm_mul_norm, sq] using
    congr_arg (fun x => ‚ü™x, x‚ÇÄ‚ü´_‚Ñù) hc
#align is_self_adjoint.eq_smul_self_of_is_local_extr_on_real IsSelfAdjoint.eq_smul_self_of_isLocalExtrOn_real

end Real

section CompleteSpace

variable [CompleteSpace E] {T : E ‚ÜíL[ùïú] E}

-- mathport name: exprrayleigh_quotient
local notation "rayleigh_quotient" => fun x : E => T.reApplyInnerSelf x / ‚Äñ(x : E)‚Äñ ^ 2

theorem eq_smul_self_of_isLocalExtrOn (hT : IsSelfAdjoint T) {x‚ÇÄ : E}
    (hextr : IsLocalExtrOn T.reApplyInnerSelf (sphere (0 : E) ‚Äñx‚ÇÄ‚Äñ) x‚ÇÄ) :
    T x‚ÇÄ = (‚Üë(rayleigh_quotient x‚ÇÄ) : ùïú) ‚Ä¢ x‚ÇÄ :=
  by
  letI := InnerProductSpace.isROrCToReal ùïú E
  let hSA := hT.is_symmetric.restrict_scalars.to_self_adjoint.prop
  exact hSA.eq_smul_self_of_is_local_extr_on_real hextr
#align is_self_adjoint.eq_smul_self_of_is_local_extr_on IsSelfAdjoint.eq_smul_self_of_isLocalExtrOn

/-- For a self-adjoint operator `T`, a local extremum of the Rayleigh quotient of `T` on a sphere
centred at the origin is an eigenvector of `T`. -/
theorem hasEigenvector_of_isLocalExtrOn (hT : IsSelfAdjoint T) {x‚ÇÄ : E} (hx‚ÇÄ : x‚ÇÄ ‚â† 0)
    (hextr : IsLocalExtrOn T.reApplyInnerSelf (sphere (0 : E) ‚Äñx‚ÇÄ‚Äñ) x‚ÇÄ) :
    HasEigenvector (T : E ‚Üí‚Çó[ùïú] E) (‚Üë(rayleigh_quotient x‚ÇÄ)) x‚ÇÄ :=
  by
  refine' ‚ü®_, hx‚ÇÄ‚ü©
  rw [Module.End.mem_eigenspace_iff]
  exact hT.eq_smul_self_of_is_local_extr_on hextr
#align is_self_adjoint.has_eigenvector_of_is_local_extr_on IsSelfAdjoint.hasEigenvector_of_isLocalExtrOn

/-- For a self-adjoint operator `T`, a maximum of the Rayleigh quotient of `T` on a sphere centred
at the origin is an eigenvector of `T`, with eigenvalue the global supremum of the Rayleigh
quotient. -/
theorem hasEigenvector_of_isMaxOn (hT : IsSelfAdjoint T) {x‚ÇÄ : E} (hx‚ÇÄ : x‚ÇÄ ‚â† 0)
    (hextr : IsMaxOn T.reApplyInnerSelf (sphere (0 : E) ‚Äñx‚ÇÄ‚Äñ) x‚ÇÄ) :
    HasEigenvector (T : E ‚Üí‚Çó[ùïú] E) (‚Üë(‚®Ü x : { x : E // x ‚â† 0 }, rayleigh_quotient x)) x‚ÇÄ :=
  by
  convert hT.has_eigenvector_of_is_local_extr_on hx‚ÇÄ (Or.inr hextr.localize)
  have hx‚ÇÄ' : 0 < ‚Äñx‚ÇÄ‚Äñ := by simp [hx‚ÇÄ]
  have hx‚ÇÄ'' : x‚ÇÄ ‚àà sphere (0 : E) ‚Äñx‚ÇÄ‚Äñ := by simp
  rw [T.supr_rayleigh_eq_supr_rayleigh_sphere hx‚ÇÄ']
  refine' IsMaxOn.iSup_eq hx‚ÇÄ'' _
  intro x hx
  dsimp
  have : ‚Äñx‚Äñ = ‚Äñx‚ÇÄ‚Äñ := by simpa using hx
  rw [this]
  exact div_le_div_of_le (sq_nonneg ‚Äñx‚ÇÄ‚Äñ) (hextr hx)
#align is_self_adjoint.has_eigenvector_of_is_max_on IsSelfAdjoint.hasEigenvector_of_isMaxOn

/-- For a self-adjoint operator `T`, a minimum of the Rayleigh quotient of `T` on a sphere centred
at the origin is an eigenvector of `T`, with eigenvalue the global infimum of the Rayleigh
quotient. -/
theorem hasEigenvector_of_isMinOn (hT : IsSelfAdjoint T) {x‚ÇÄ : E} (hx‚ÇÄ : x‚ÇÄ ‚â† 0)
    (hextr : IsMinOn T.reApplyInnerSelf (sphere (0 : E) ‚Äñx‚ÇÄ‚Äñ) x‚ÇÄ) :
    HasEigenvector (T : E ‚Üí‚Çó[ùïú] E) (‚Üë(‚®Ö x : { x : E // x ‚â† 0 }, rayleigh_quotient x)) x‚ÇÄ :=
  by
  convert hT.has_eigenvector_of_is_local_extr_on hx‚ÇÄ (Or.inl hextr.localize)
  have hx‚ÇÄ' : 0 < ‚Äñx‚ÇÄ‚Äñ := by simp [hx‚ÇÄ]
  have hx‚ÇÄ'' : x‚ÇÄ ‚àà sphere (0 : E) ‚Äñx‚ÇÄ‚Äñ := by simp
  rw [T.infi_rayleigh_eq_infi_rayleigh_sphere hx‚ÇÄ']
  refine' IsMinOn.iInf_eq hx‚ÇÄ'' _
  intro x hx
  dsimp
  have : ‚Äñx‚Äñ = ‚Äñx‚ÇÄ‚Äñ := by simpa using hx
  rw [this]
  exact div_le_div_of_le (sq_nonneg ‚Äñx‚ÇÄ‚Äñ) (hextr hx)
#align is_self_adjoint.has_eigenvector_of_is_min_on IsSelfAdjoint.hasEigenvector_of_isMinOn

end CompleteSpace

end IsSelfAdjoint

section FiniteDimensional

variable [FiniteDimensional ùïú E] [_i : Nontrivial E] {T : E ‚Üí‚Çó[ùïú] E}

namespace LinearMap

namespace IsSymmetric

include _i

/-- The supremum of the Rayleigh quotient of a symmetric operator `T` on a nontrivial
finite-dimensional vector space is an eigenvalue for that operator. -/
theorem hasEigenvalue_iSup_of_finiteDimensional (hT : T.IsSymmetric) :
    HasEigenvalue T ‚Üë(‚®Ü x : { x : E // x ‚â† 0 }, IsROrC.re ‚ü™T x, x‚ü´ / ‚Äñ(x : E)‚Äñ ^ 2) :=
  by
  haveI := FiniteDimensional.proper_isROrC ùïú E
  let T' := hT.to_self_adjoint
  obtain ‚ü®x, hx‚ü© : ‚àÉ x : E, x ‚â† 0 := exists_ne 0
  have H‚ÇÅ : IsCompact (sphere (0 : E) ‚Äñx‚Äñ) := isCompact_sphere _ _
  have H‚ÇÇ : (sphere (0 : E) ‚Äñx‚Äñ).Nonempty := ‚ü®x, by simp‚ü©
  -- key point: in finite dimension, a continuous function on the sphere has a max
  obtain ‚ü®x‚ÇÄ, hx‚ÇÄ', hTx‚ÇÄ‚ü© :=
    H‚ÇÅ.exists_forall_ge H‚ÇÇ T'.val.re_apply_inner_self_continuous.continuous_on
  have hx‚ÇÄ : ‚Äñx‚ÇÄ‚Äñ = ‚Äñx‚Äñ := by simpa using hx‚ÇÄ'
  have : IsMaxOn T'.val.re_apply_inner_self (sphere 0 ‚Äñx‚ÇÄ‚Äñ) x‚ÇÄ := by simpa only [‚Üê hx‚ÇÄ] using hTx‚ÇÄ
  have hx‚ÇÄ_ne : x‚ÇÄ ‚â† 0 :=
    by
    have : ‚Äñx‚ÇÄ‚Äñ ‚â† 0 := by simp only [hx‚ÇÄ, norm_eq_zero, hx, Ne.def, not_false_iff]
    simpa [‚Üê norm_eq_zero, Ne.def]
  exact has_eigenvalue_of_has_eigenvector (T'.prop.has_eigenvector_of_is_max_on hx‚ÇÄ_ne this)
#align linear_map.is_symmetric.has_eigenvalue_supr_of_finite_dimensional LinearMap.IsSymmetric.hasEigenvalue_iSup_of_finiteDimensional

/-- The infimum of the Rayleigh quotient of a symmetric operator `T` on a nontrivial
finite-dimensional vector space is an eigenvalue for that operator. -/
theorem hasEigenvalue_iInf_of_finiteDimensional (hT : T.IsSymmetric) :
    HasEigenvalue T ‚Üë(‚®Ö x : { x : E // x ‚â† 0 }, IsROrC.re ‚ü™T x, x‚ü´ / ‚Äñ(x : E)‚Äñ ^ 2) :=
  by
  haveI := FiniteDimensional.proper_isROrC ùïú E
  let T' := hT.to_self_adjoint
  obtain ‚ü®x, hx‚ü© : ‚àÉ x : E, x ‚â† 0 := exists_ne 0
  have H‚ÇÅ : IsCompact (sphere (0 : E) ‚Äñx‚Äñ) := isCompact_sphere _ _
  have H‚ÇÇ : (sphere (0 : E) ‚Äñx‚Äñ).Nonempty := ‚ü®x, by simp‚ü©
  -- key point: in finite dimension, a continuous function on the sphere has a min
  obtain ‚ü®x‚ÇÄ, hx‚ÇÄ', hTx‚ÇÄ‚ü© :=
    H‚ÇÅ.exists_forall_le H‚ÇÇ T'.val.re_apply_inner_self_continuous.continuous_on
  have hx‚ÇÄ : ‚Äñx‚ÇÄ‚Äñ = ‚Äñx‚Äñ := by simpa using hx‚ÇÄ'
  have : IsMinOn T'.val.re_apply_inner_self (sphere 0 ‚Äñx‚ÇÄ‚Äñ) x‚ÇÄ := by simpa only [‚Üê hx‚ÇÄ] using hTx‚ÇÄ
  have hx‚ÇÄ_ne : x‚ÇÄ ‚â† 0 :=
    by
    have : ‚Äñx‚ÇÄ‚Äñ ‚â† 0 := by simp only [hx‚ÇÄ, norm_eq_zero, hx, Ne.def, not_false_iff]
    simpa [‚Üê norm_eq_zero, Ne.def]
  exact has_eigenvalue_of_has_eigenvector (T'.prop.has_eigenvector_of_is_min_on hx‚ÇÄ_ne this)
#align linear_map.is_symmetric.has_eigenvalue_infi_of_finite_dimensional LinearMap.IsSymmetric.hasEigenvalue_iInf_of_finiteDimensional

omit _i

theorem subsingleton_of_no_eigenvalue_finiteDimensional (hT : T.IsSymmetric)
    (hT' : ‚àÄ Œº : ùïú, Module.End.eigenspace (T : E ‚Üí‚Çó[ùïú] E) Œº = ‚ä•) : Subsingleton E :=
  (subsingleton_or_nontrivial E).resolve_right fun h =>
    absurd (hT' _) hT.has_eigenvalue_supr_of_finite_dimensional
#align linear_map.is_symmetric.subsingleton_of_no_eigenvalue_finite_dimensional LinearMap.IsSymmetric.subsingleton_of_no_eigenvalue_finiteDimensional

end IsSymmetric

end LinearMap

end FiniteDimensional

