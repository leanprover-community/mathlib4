/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.Meromorphic.Order

/-!
# The Trailing Coefficient of a Meromorphic Function

This file defines the trailing coefficient of a meromorphic function. If `f` is meromorphic at a
point `x`, the trailing coefficient is defined as the (unique!) value `g x` for a presentation of
`f` in the form `(z - x) ^ order ‚Ä¢ g z` with `g` analytic at `x`.

The lemma `meromorphicTrailingCoeffAt_eq_limit` expresses the trailing coefficient as a limit.
-/

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {f g : ùïú ‚Üí E} {x : ùïú}

open Filter Topology

variable (f x) in
/--
If `f` is meromorphic of finite order at a point `x`, the trailing coefficient is defined as the
(unique!) value `g x` for a presentation of `f` in the form `(z - x) ^ order ‚Ä¢ g z` with `g`
analytic at `x`. In all other cases, the trailing coefficient is defined to be zero.
-/
noncomputable def meromorphicTrailingCoeffAt : E := by
  by_cases h‚ÇÅ : MeromorphicAt f x
  ¬∑ by_cases h‚ÇÇ : meromorphicOrderAt f x = ‚ä§
    ¬∑ exact 0
    ¬∑ exact ((meromorphicOrderAt_ne_top_iff h‚ÇÅ).1 h‚ÇÇ).choose x
  ¬∑ exact 0

/--
If `f` is not meromorphic at `x`, the trailing coefficient is zero by definition.
-/
@[simp] lemma meromorphicTrailingCoeffAt_of_not_MeromorphicAt (h : ¬¨MeromorphicAt f x) :
    meromorphicTrailingCoeffAt f x = 0 := by simp [meromorphicTrailingCoeffAt, h]

/--
If `f` is meromorphic of infinite order at `x`, the trailing coefficient is zero by definition.
-/
@[simp] lemma MeromorphicAt.meromorphicTrailingCoeffAt_of_order_eq_top
    (h : meromorphicOrderAt f x = ‚ä§) :
    meromorphicTrailingCoeffAt f x = 0 := by simp_all [meromorphicTrailingCoeffAt]

/-!
## Characterization of the Leading Coefficient
-/

/--
Definition of the trailing coefficient in case where `f` is meromorphic and a presentation of the
form `f = (z - x) ^ order ‚Ä¢ g z` is given, with `g` analytic at `x`.
-/
lemma AnalyticAt.meromorphicTrailingCoeffAt_of_eq_nhdsNE (h‚ÇÅg : AnalyticAt ùïú g x)
    (h : f =·∂†[ùìù[‚â†] x] fun z ‚Ü¶ (z - x) ^ (meromorphicOrderAt f x).untop‚ÇÄ ‚Ä¢ g z) :
    meromorphicTrailingCoeffAt f x = g x := by
  have h‚ÇÅf : MeromorphicAt f x := by
    rw [MeromorphicAt.meromorphicAt_congr h]
    fun_prop
  by_cases h‚ÇÉ : meromorphicOrderAt f x = ‚ä§
  ¬∑ simp only [h‚ÇÉ, WithTop.untop‚ÇÄ_top, zpow_zero, one_smul,
      MeromorphicAt.meromorphicTrailingCoeffAt_of_order_eq_top] at ‚ä¢ h
    apply EventuallyEq.eq_of_nhds (f := 0)
    rw [‚Üê ContinuousAt.eventuallyEq_nhds_iff_eventuallyEq_nhdsNE (by fun_prop) (by fun_prop)]
    apply (h.symm.trans (meromorphicOrderAt_eq_top_iff.1 h‚ÇÉ)).symm
  ¬∑ unfold meromorphicTrailingCoeffAt
    simp only [h‚ÇÅf, not_true_eq_false, reduceDIte, h‚ÇÉ, ne_eq]
    obtain ‚ü®h'‚ÇÅ, h'‚ÇÇ, h'‚ÇÉ‚ü© := ((meromorphicOrderAt_ne_top_iff h‚ÇÅf).1 h‚ÇÉ).choose_spec
    apply Filter.EventuallyEq.eq_of_nhds
    rw [‚Üê h'‚ÇÅ.continuousAt.eventuallyEq_nhds_iff_eventuallyEq_nhdsNE h‚ÇÅg.continuousAt]
    filter_upwards [h, h'‚ÇÉ, self_mem_nhdsWithin] with y h‚ÇÅy h‚ÇÇy h‚ÇÉy
    rw [‚Üê sub_eq_zero]
    rwa [h‚ÇÇy, ‚Üê sub_eq_zero, ‚Üê smul_sub, smul_eq_zero_iff_right] at h‚ÇÅy
    simp_all [zpow_ne_zero, sub_ne_zero]

/--
Variant of `meromorphicTrailingCoeffAt_of_order_eq_finite`: Definition of the trailing coefficient
in case where `f` is meromorphic of finite order and a presentation is given.
-/
lemma AnalyticAt.meromorphicTrailingCoeffAt_of_ne_zero_of_eq_nhdsNE {n : ‚Ñ§} (h‚ÇÅg : AnalyticAt ùïú g x)
    (h‚ÇÇg : g x ‚â† 0) (h : f =·∂†[ùìù[‚â†] x] fun z ‚Ü¶ (z - x) ^ n ‚Ä¢ g z) :
    meromorphicTrailingCoeffAt f x = g x := by
  have h‚ÇÑ : MeromorphicAt f x := by
    rw [MeromorphicAt.meromorphicAt_congr h]
    fun_prop
  have : meromorphicOrderAt f x = n := by
    simp only [meromorphicOrderAt_eq_int_iff h‚ÇÑ, ne_eq, zpow_natCast]
    use g, h‚ÇÅg, h‚ÇÇg
    exact h
  simp_all [meromorphicTrailingCoeffAt_of_eq_nhdsNE h‚ÇÅg, this]

/--
If `f` is analytic and does not vanish at `x`, then the trailing coefficient of `f` at `x` is `f x`.
-/
@[simp]
lemma AnalyticAt.meromorphicTrailingCoeffAt_of_ne_zero (h‚ÇÅ : AnalyticAt ùïú f x) (h‚ÇÇ : f x ‚â† 0) :
    meromorphicTrailingCoeffAt f x = f x := by
  rw [h‚ÇÅ.meromorphicTrailingCoeffAt_of_ne_zero_of_eq_nhdsNE (n := 0) h‚ÇÇ]
  filter_upwards
  simp

/--
If `f` is meromorphic at `x`, then the trailing coefficient of `f` at `x` is the limit of the
function `(¬∑ - x) ^ (-order) ‚Ä¢ f`.
-/
lemma MeromorphicAt.tendsto_nhds_meromorphicTrailingCoeffAt (h : MeromorphicAt f x) :
    Tendsto ((¬∑ - x) ^ (-(meromorphicOrderAt f x).untop‚ÇÄ) ‚Ä¢ f) (ùìù[‚â†] x)
      (ùìù (meromorphicTrailingCoeffAt f x)) := by
  by_cases h‚ÇÇ : meromorphicOrderAt f x = ‚ä§
  ¬∑ simp_all only [WithTop.untop‚ÇÄ_top, neg_zero, zpow_zero, one_smul,
      meromorphicTrailingCoeffAt_of_order_eq_top]
    apply Tendsto.congr' (f‚ÇÅ := 0)
    ¬∑ filter_upwards [meromorphicOrderAt_eq_top_iff.1 h‚ÇÇ] with y hy
      simp_all
    ¬∑ apply Tendsto.congr' (f‚ÇÅ := 0) (by rfl) continuousWithinAt_const.tendsto
  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := (meromorphicOrderAt_ne_top_iff h).1 h‚ÇÇ
  apply Tendsto.congr' (f‚ÇÅ := g)
  ¬∑ filter_upwards [h‚ÇÉg, self_mem_nhdsWithin] with y h‚ÇÅy h‚ÇÇy
    rw [zpow_neg, Pi.smul_apply', Pi.inv_apply, Pi.pow_apply, h‚ÇÅy, ‚Üê smul_assoc, smul_eq_mul,
      ‚Üê zpow_neg, ‚Üê zpow_add', neg_add_cancel, zpow_zero, one_smul]
    left
    simp_all [sub_ne_zero]
  ¬∑ rw [h‚ÇÅg.meromorphicTrailingCoeffAt_of_eq_nhdsNE h‚ÇÉg]
    apply h‚ÇÅg.continuousAt.continuousWithinAt

/-!
## Elementary Properties
-/

/--
If `f` is meromorphic of finite order at `x`, then the trailing coefficient is not zero.
-/
lemma MeromorphicAt.meromorphicTrailingCoeffAt_ne_zero (h‚ÇÅ : MeromorphicAt f x)
    (h‚ÇÇ : meromorphicOrderAt f x ‚â† ‚ä§) :
    meromorphicTrailingCoeffAt f x ‚â† 0 := by
  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := (meromorphicOrderAt_ne_top_iff h‚ÇÅ).1 h‚ÇÇ
  simpa [h‚ÇÅg.meromorphicTrailingCoeffAt_of_ne_zero_of_eq_nhdsNE h‚ÇÇg h‚ÇÉg] using h‚ÇÇg

/-!
## Congruence Lemma
-/

/--
If two functions agree in a punctured neighborhood, then their trailing coefficients agree.
-/
lemma meromorphicTrailingCoeffAt_congr_nhdsNE {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí E} (h : f‚ÇÅ =·∂†[ùìù[‚â†] x] f‚ÇÇ) :
    meromorphicTrailingCoeffAt f‚ÇÅ x = meromorphicTrailingCoeffAt f‚ÇÇ x := by
  by_cases h‚ÇÅ : ¬¨MeromorphicAt f‚ÇÅ x
  ¬∑ simp [h‚ÇÅ, (MeromorphicAt.meromorphicAt_congr h).not.1 h‚ÇÅ]
  rw [not_not] at h‚ÇÅ
  by_cases h‚ÇÇ : meromorphicOrderAt f‚ÇÅ x = ‚ä§
  ¬∑ simp_all [h‚ÇÅ.congr h, meromorphicOrderAt_congr h]
  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := (meromorphicOrderAt_ne_top_iff h‚ÇÅ).1 h‚ÇÇ
  rw [h‚ÇÅg.meromorphicTrailingCoeffAt_of_ne_zero_of_eq_nhdsNE h‚ÇÇg h‚ÇÉg,
    h‚ÇÅg.meromorphicTrailingCoeffAt_of_ne_zero_of_eq_nhdsNE h‚ÇÇg (h.symm.trans h‚ÇÉg)]

/-!
## Behavior under Arithmetic Operations
-/

/--
The trailing coefficient of a scalar product is the scalar product of the trailing coefficients.
-/
lemma MeromorphicAt.meromorphicTrailingCoeffAt_smul {f‚ÇÅ : ùïú ‚Üí ùïú} {f‚ÇÇ : ùïú ‚Üí E}
    (hf‚ÇÅ : MeromorphicAt f‚ÇÅ x) (hf‚ÇÇ : MeromorphicAt f‚ÇÇ x) :
    meromorphicTrailingCoeffAt (f‚ÇÅ ‚Ä¢ f‚ÇÇ) x =
      (meromorphicTrailingCoeffAt f‚ÇÅ x) ‚Ä¢ (meromorphicTrailingCoeffAt f‚ÇÇ x) := by
  by_cases h‚ÇÅf‚ÇÅ : meromorphicOrderAt f‚ÇÅ x = ‚ä§
  ¬∑ simp_all [hf‚ÇÅ, hf‚ÇÅ.smul hf‚ÇÇ, meromorphicOrderAt_smul hf‚ÇÅ hf‚ÇÇ, h‚ÇÅf‚ÇÅ]
  by_cases h‚ÇÅf‚ÇÇ : meromorphicOrderAt f‚ÇÇ x = ‚ä§
  ¬∑ simp_all [hf‚ÇÅ, hf‚ÇÅ.smul hf‚ÇÇ, meromorphicOrderAt_smul hf‚ÇÅ hf‚ÇÇ, h‚ÇÅf‚ÇÅ]
  obtain ‚ü®g‚ÇÅ, h‚ÇÅg‚ÇÅ, h‚ÇÇg‚ÇÅ, h‚ÇÉg‚ÇÅ‚ü© := (meromorphicOrderAt_ne_top_iff hf‚ÇÅ).1 h‚ÇÅf‚ÇÅ
  obtain ‚ü®g‚ÇÇ, h‚ÇÅg‚ÇÇ, h‚ÇÇg‚ÇÇ, h‚ÇÉg‚ÇÇ‚ü© := (meromorphicOrderAt_ne_top_iff hf‚ÇÇ).1 h‚ÇÅf‚ÇÇ
  have : f‚ÇÅ ‚Ä¢ f‚ÇÇ =·∂†[ùìù[‚â†] x]
      fun z ‚Ü¶ (z - x) ^ (meromorphicOrderAt (f‚ÇÅ ‚Ä¢ f‚ÇÇ) x).untop‚ÇÄ ‚Ä¢ (g‚ÇÅ ‚Ä¢ g‚ÇÇ) z := by
    filter_upwards [h‚ÇÉg‚ÇÅ, h‚ÇÉg‚ÇÇ, self_mem_nhdsWithin] with y h‚ÇÅy h‚ÇÇy h‚ÇÉy
    simp_all [meromorphicOrderAt_smul hf‚ÇÅ hf‚ÇÇ]
    rw [‚Üê smul_assoc, ‚Üê smul_assoc, smul_eq_mul, smul_eq_mul, zpow_add‚ÇÄ (sub_ne_zero.2 h‚ÇÉy)]
    ring_nf
  rw [h‚ÇÅg‚ÇÅ.meromorphicTrailingCoeffAt_of_ne_zero_of_eq_nhdsNE h‚ÇÇg‚ÇÅ h‚ÇÉg‚ÇÅ,
    h‚ÇÅg‚ÇÇ.meromorphicTrailingCoeffAt_of_ne_zero_of_eq_nhdsNE h‚ÇÇg‚ÇÇ h‚ÇÉg‚ÇÇ,
    (h‚ÇÅg‚ÇÅ.smul h‚ÇÅg‚ÇÇ).meromorphicTrailingCoeffAt_of_eq_nhdsNE this]
  simp

/--
The trailing coefficient of a product is the product of the trailing coefficients.
-/
lemma MeromorphicAt.meromorphicTrailingCoeffAt_mul {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí ùïú} (hf‚ÇÅ : MeromorphicAt f‚ÇÅ x)
    (hf‚ÇÇ : MeromorphicAt f‚ÇÇ x) :
    meromorphicTrailingCoeffAt (f‚ÇÅ * f‚ÇÇ) x =
      (meromorphicTrailingCoeffAt f‚ÇÅ x) * (meromorphicTrailingCoeffAt f‚ÇÇ x) :=
  meromorphicTrailingCoeffAt_smul hf‚ÇÅ hf‚ÇÇ

/--
The trailing coefficient of the inverse function is the inverse of the trailing coefficient.
-/
lemma meromorphicTrailingCoeffAt_inv {f : ùïú ‚Üí ùïú} :
    meromorphicTrailingCoeffAt f‚Åª¬π x = (meromorphicTrailingCoeffAt f x)‚Åª¬π := by
  by_cases h‚ÇÅ : MeromorphicAt f x
  ¬∑ by_cases h‚ÇÇ : meromorphicOrderAt f x = ‚ä§
    ¬∑ simp_all [meromorphicOrderAt_inv (f := f) (x := x)]
    have : f‚Åª¬π * f =·∂†[ùìù[‚â†] x] 1 := by
      filter_upwards [(meromorphicOrderAt_ne_top_iff_eventually_ne_zero h‚ÇÅ).1 h‚ÇÇ]
      simp_all
    rw [‚Üê mul_eq_one_iff_eq_inv‚ÇÄ (h‚ÇÅ.meromorphicTrailingCoeffAt_ne_zero h‚ÇÇ),
      ‚Üê h‚ÇÅ.inv.meromorphicTrailingCoeffAt_mul h‚ÇÅ, meromorphicTrailingCoeffAt_congr_nhdsNE this,
      analyticAt_const.meromorphicTrailingCoeffAt_of_ne_zero_of_eq_nhdsNE (n := 0)]
    ¬∑ simp
    ¬∑ simp only [zpow_zero, smul_eq_mul, mul_one]
      exact eventuallyEq_nhdsWithin_of_eqOn fun _ ‚Ü¶ congrFun rfl
  ¬∑ simp_all

/--
The trailing coefficient of the power of a function is the power of the trailing coefficient.
-/
lemma MeromorphicAt.meromorphicTrailingCoeffAt_zpow {n : ‚Ñ§} {f : ùïú ‚Üí ùïú} (h‚ÇÅ : MeromorphicAt f x) :
    meromorphicTrailingCoeffAt (f ^ n) x = (meromorphicTrailingCoeffAt f x) ^ n := by
  by_cases h‚ÇÇ : meromorphicOrderAt f x = ‚ä§
  ¬∑ by_cases h‚ÇÉ : n = 0
    ¬∑ simp only [h‚ÇÉ, zpow_zero]
      apply analyticAt_const.meromorphicTrailingCoeffAt_of_ne_zero (ne_zero_of_eq_one rfl)
    ¬∑ simp_all [meromorphicOrderAt_zpow h‚ÇÅ, h‚ÇÇ, h‚ÇÉ, zero_zpow n h‚ÇÉ]
  ¬∑ obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := (meromorphicOrderAt_ne_top_iff h‚ÇÅ).1 h‚ÇÇ
    rw [h‚ÇÅg.meromorphicTrailingCoeffAt_of_ne_zero_of_eq_nhdsNE
        (n := (meromorphicOrderAt f x).untop‚ÇÄ) h‚ÇÇg h‚ÇÉg,
      (h‚ÇÅg.zpow h‚ÇÇg (n := n)).meromorphicTrailingCoeffAt_of_ne_zero_of_eq_nhdsNE
        (n := (meromorphicOrderAt (f ^ n) x).untop‚ÇÄ)
        (by simp_all [h‚ÇÇg, zpow_ne_zero])]
    ¬∑ simp only [Pi.pow_apply]
    ¬∑ filter_upwards [h‚ÇÉg] with a ha
      simp_all [ha, mul_zpow, ‚Üê zpow_mul, meromorphicOrderAt_zpow h‚ÇÅ, mul_comm]

/--
The trailing coefficient of the power of a function is the power of the trailing coefficient.
-/
lemma MeromorphicAt.meromorphicTrailingCoeffAt_pow {n : ‚Ñï} {f : ùïú ‚Üí ùïú} (h‚ÇÅ : MeromorphicAt f x) :
    meromorphicTrailingCoeffAt (f ^ n) x = (meromorphicTrailingCoeffAt f x) ^ n := by
  convert h‚ÇÅ.meromorphicTrailingCoeffAt_zpow (n := n) <;> simp
