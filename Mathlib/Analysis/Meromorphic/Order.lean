/-
Copyright (c) 2024 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler, Stefan Kebekus
-/
import Mathlib.Analysis.Analytic.Order
import Mathlib.Analysis.Meromorphic.Basic

/-!
# Orders of Meromorphic Functions

This file defines the order of a meromorphic function `f` at a point `z‚ÇÄ`, as an element of
`‚Ñ§ ‚à™ {‚àû}`.

TODO: Uniformize API between analytic and meromorphic functions
-/

open Filter Set WithTop.LinearOrderedAddCommGroup
open scoped Topology

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {f f‚ÇÅ f‚ÇÇ : ùïú ‚Üí E} {x : ùïú}

/-!
## Order at a Point: Definition and Characterization
-/

namespace MeromorphicAt

/-- The order of a meromorphic function `f` at `z‚ÇÄ`, as an element of `‚Ñ§ ‚à™ {‚àû}`.

The order is defined to be `‚àû` if `f` is identically 0 on a neighbourhood of `z‚ÇÄ`, and otherwise the
unique `n` such that `f` can locally be written as `f z = (z - z‚ÇÄ) ^ n ‚Ä¢ g z`, where `g` is analytic
and does not vanish at `z‚ÇÄ`. See `MeromorphicAt.order_eq_top_iff` and
`MeromorphicAt.order_eq_nat_iff` for these equivalences. -/
noncomputable def order (hf : MeromorphicAt f x) : WithTop ‚Ñ§ :=
  (hf.choose_spec.order.map (‚Üë¬∑ : ‚Ñï ‚Üí ‚Ñ§)) - hf.choose

/-- The order of a meromorphic function `f` at a `z‚ÇÄ` is infinity iff `f` vanishes locally around
`z‚ÇÄ`. -/
lemma order_eq_top_iff (hf : MeromorphicAt f x) :
    hf.order = ‚ä§ ‚Üî ‚àÄ·∂† z in ùìù[‚â†] x, f z = 0 := by
  unfold order
  by_cases h : hf.choose_spec.order = ‚ä§
  ¬∑ rw [h, ENat.map_top, ‚Üê WithTop.coe_natCast,
      top_sub, eq_self, true_iff, eventually_nhdsWithin_iff]
    rw [AnalyticAt.order_eq_top_iff] at h
    filter_upwards [h] with z hf hz
    rwa [smul_eq_zero_iff_right <| pow_ne_zero _ (sub_ne_zero.mpr hz)] at hf
  ¬∑ obtain ‚ü®m, hm‚ü© := ENat.ne_top_iff_exists.mp h
    simp only [‚Üê hm, ENat.map_coe, WithTop.coe_natCast, sub_eq_top_iff, WithTop.natCast_ne_top,
      or_self, false_iff]
    contrapose! h
    rw [AnalyticAt.order_eq_top_iff]
    rw [‚Üê hf.choose_spec.frequently_eq_iff_eventually_eq analyticAt_const]
    apply Eventually.frequently
    filter_upwards [h] with z hfz
    rw [hfz, smul_zero]

/-- The order of a meromorphic function `f` at `z‚ÇÄ` equals an integer `n` iff `f` can locally be
written as `f z = (z - z‚ÇÄ) ^ n ‚Ä¢ g z`, where `g` is analytic and does not vanish at `z‚ÇÄ`. -/
lemma order_eq_int_iff {n : ‚Ñ§} (hf : MeromorphicAt f x) : hf.order = n ‚Üî
    ‚àÉ g : ùïú ‚Üí E, AnalyticAt ùïú g x ‚àß g x ‚â† 0 ‚àß ‚àÄ·∂† z in ùìù[‚â†] x, f z = (z - x) ^ n ‚Ä¢ g z := by
  unfold order
  by_cases h : hf.choose_spec.order = ‚ä§
  ¬∑ rw [h, ENat.map_top, ‚Üê WithTop.coe_natCast, top_sub,
      eq_false_intro WithTop.top_ne_coe, false_iff]
    rw [AnalyticAt.order_eq_top_iff] at h
    refine fun ‚ü®g, hg_an, hg_ne, hg_eq‚ü© ‚Ü¶ hg_ne ?_
    apply EventuallyEq.eq_of_nhds
    rw [EventuallyEq, ‚Üê AnalyticAt.frequently_eq_iff_eventually_eq hg_an analyticAt_const]
    apply Eventually.frequently
    rw [eventually_nhdsWithin_iff] at hg_eq ‚ä¢
    filter_upwards [h, hg_eq] with z hfz hfz_eq hz
    rwa [hfz_eq hz, ‚Üê mul_smul, smul_eq_zero_iff_right] at hfz
    exact mul_ne_zero (pow_ne_zero _ (sub_ne_zero.mpr hz)) (zpow_ne_zero _ (sub_ne_zero.mpr hz))
  ¬∑ obtain ‚ü®m, h‚ü© := ENat.ne_top_iff_exists.mp h
    rw [‚Üê h, ENat.map_coe, ‚Üê WithTop.coe_natCast, ‚Üê coe_sub, WithTop.coe_inj]
    obtain ‚ü®g, hg_an, hg_ne, hg_eq‚ü© := (AnalyticAt.order_eq_nat_iff _).mp h.symm
    replace hg_eq : ‚àÄ·∂† (z : ùïú) in ùìù[‚â†] x, f z = (z - x) ^ (‚Üëm - ‚Üëhf.choose : ‚Ñ§) ‚Ä¢ g z := by
      rw [eventually_nhdsWithin_iff]
      filter_upwards [hg_eq] with z hg_eq hz
      rwa [‚Üê smul_right_inj <| zpow_ne_zero _ (sub_ne_zero.mpr hz), ‚Üê mul_smul,
        ‚Üê zpow_add‚ÇÄ (sub_ne_zero.mpr hz), ‚Üê add_sub_assoc, add_sub_cancel_left, zpow_natCast,
        zpow_natCast]
    exact ‚ü®fun h ‚Ü¶ ‚ü®g, hg_an, hg_ne, h ‚ñ∏ hg_eq‚ü©,
      AnalyticAt.unique_eventuallyEq_zpow_smul_nonzero ‚ü®g, hg_an, hg_ne, hg_eq‚ü©‚ü©

/-- Meromorphic functions that agree in a punctured neighborhood of `z‚ÇÄ` have the same order at
`z‚ÇÄ`. -/
theorem order_congr (hf‚ÇÅ : MeromorphicAt f‚ÇÅ x)
    (hf‚ÇÅ‚ÇÇ : f‚ÇÅ =·∂†[ùìù[‚â†] x] f‚ÇÇ) :
    hf‚ÇÅ.order = (hf‚ÇÅ.congr hf‚ÇÅ‚ÇÇ).order := by
  by_cases h‚ÇÅf‚ÇÅ : hf‚ÇÅ.order = ‚ä§
  ¬∑ rw [h‚ÇÅf‚ÇÅ, eq_comm, (hf‚ÇÅ.congr hf‚ÇÅ‚ÇÇ).order_eq_top_iff]
    rw [hf‚ÇÅ.order_eq_top_iff] at h‚ÇÅf‚ÇÅ
    exact EventuallyEq.rw h‚ÇÅf‚ÇÅ (fun x => Eq (f‚ÇÇ x)) hf‚ÇÅ‚ÇÇ.symm
  ¬∑ obtain ‚ü®n, hn : hf‚ÇÅ.order = n‚ü© := Option.ne_none_iff_exists'.mp h‚ÇÅf‚ÇÅ
    obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := hf‚ÇÅ.order_eq_int_iff.1 hn
    rw [hn, eq_comm, (hf‚ÇÅ.congr hf‚ÇÅ‚ÇÇ).order_eq_int_iff]
    use g, h‚ÇÅg, h‚ÇÇg
    exact EventuallyEq.rw h‚ÇÉg (fun x => Eq (f‚ÇÇ x)) hf‚ÇÅ‚ÇÇ.symm

/-- Compatibility of notions of `order` for analytic and meromorphic functions. -/
lemma _root_.AnalyticAt.meromorphicAt_order (hf : AnalyticAt ùïú f x) :
    hf.meromorphicAt.order = hf.order.map (‚Üë) := by
  rcases eq_or_ne hf.order ‚ä§ with ho | ho
  ¬∑ rw [ho, ENat.map_top, order_eq_top_iff]
    exact (hf.order_eq_top_iff.mp ho).filter_mono nhdsWithin_le_nhds
  ¬∑ obtain ‚ü®n, hn‚ü© := ENat.ne_top_iff_exists.mp ho
    simp_rw [‚Üê hn, ENat.map_coe, order_eq_int_iff, zpow_natCast]
    rcases hf.order_eq_nat_iff.mp hn.symm with ‚ü®g, h1, h2, h3‚ü©
    exact ‚ü®g, h1, h2, h3.filter_mono nhdsWithin_le_nhds‚ü©

/--
When seen as meromorphic functions, analytic functions have nonnegative order.
-/
theorem _root_.AnalyticAt.meromorphicAt_order_nonneg (hf : AnalyticAt ùïú f x) :
    0 ‚â§ hf.meromorphicAt.order := by
  simp [hf.meromorphicAt_order]

/-!
## Order at a Point: Behaviour under Ring Operations

We establish additivity of the order under multiplication and taking powers.
-/

/-- The order is additive when multiplying scalar-valued and vector-valued meromorphic functions. -/
theorem order_smul {f : ùïú ‚Üí ùïú} {g : ùïú ‚Üí E} (hf : MeromorphicAt f x) (hg : MeromorphicAt g x) :
    (hf.smul hg).order = hf.order + hg.order := by
  -- Trivial cases: one of the functions vanishes around z‚ÇÄ
  cases h‚ÇÇf : hf.order with
  | top =>
    simp only [top_add, order_eq_top_iff] at h‚ÇÇf ‚ä¢
    filter_upwards [h‚ÇÇf] with z hz using by simp [hz]
  | coe m =>
    cases h‚ÇÇg : hg.order with
    | top =>
      simp only [add_top, order_eq_top_iff] at h‚ÇÇg ‚ä¢
      filter_upwards [h‚ÇÇg] with z hz using by simp [hz]
    | coe n => -- Non-trivial case: both functions do not vanish around z‚ÇÄ
      rw [‚Üê WithTop.coe_add, order_eq_int_iff]
      obtain ‚ü®F, h‚ÇÅF, h‚ÇÇF, h‚ÇÉF‚ü© := hf.order_eq_int_iff.1 h‚ÇÇf
      obtain ‚ü®G, h‚ÇÅG, h‚ÇÇG, h‚ÇÉG‚ü© := hg.order_eq_int_iff.1 h‚ÇÇg
      use F ‚Ä¢ G, h‚ÇÅF.smul h‚ÇÅG, by simp [h‚ÇÇF, h‚ÇÇG]
      filter_upwards [self_mem_nhdsWithin, h‚ÇÉF, h‚ÇÉG] with a ha hfa hga
      simp [hfa, hga, smul_comm (F a), zpow_add‚ÇÄ (sub_ne_zero.mpr ha), mul_smul]

/-- The order is additive when multiplying meromorphic functions. -/
theorem order_mul {f g : ùïú ‚Üí ùïú} (hf : MeromorphicAt f x) (hg : MeromorphicAt g x) :
    (hf.mul hg).order = hf.order + hg.order :=
  hf.order_smul hg

/-- The order of the inverse is the negative of the order. -/
theorem order_inv {f : ùïú ‚Üí ùïú} (hf : MeromorphicAt f x) :
    hf.inv.order = -hf.order := by
  by_cases h‚ÇÇf : hf.order = ‚ä§
  ¬∑ rw [h‚ÇÇf, ‚Üê LinearOrderedAddCommGroupWithTop.neg_top, neg_neg]
    rw [MeromorphicAt.order_eq_top_iff] at *
    filter_upwards [h‚ÇÇf]
    simp
  lift hf.order to ‚Ñ§ using h‚ÇÇf with a ha
  apply hf.inv.order_eq_int_iff.2
  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := hf.order_eq_int_iff.1 ha.symm
  use g‚Åª¬π, h‚ÇÅg.inv h‚ÇÇg, inv_eq_zero.not.2 h‚ÇÇg
  rw [eventually_nhdsWithin_iff] at *
  filter_upwards [h‚ÇÉg]
  intro _ h‚ÇÅa h‚ÇÇa
  simp only [Pi.inv_apply, h‚ÇÅa h‚ÇÇa, smul_eq_mul, mul_inv_rev, zpow_neg]
  ring

/--
The order of a sum is at least the minimum of the orders of the summands.
-/
theorem order_add (hf‚ÇÅ : MeromorphicAt f‚ÇÅ x) (hf‚ÇÇ : MeromorphicAt f‚ÇÇ x) :
    min hf‚ÇÅ.order hf‚ÇÇ.order ‚â§ (hf‚ÇÅ.add hf‚ÇÇ).order := by
  -- Handle the trivial cases where one of the orders equals ‚ä§
  by_cases h‚ÇÇf‚ÇÅ : hf‚ÇÅ.order = ‚ä§
  ¬∑ rw [h‚ÇÇf‚ÇÅ, min_top_left, (hf‚ÇÅ.add hf‚ÇÇ).order_congr]
    filter_upwards [hf‚ÇÅ.order_eq_top_iff.1 h‚ÇÇf‚ÇÅ]
    simp
  by_cases h‚ÇÇf‚ÇÇ : hf‚ÇÇ.order = ‚ä§
  ¬∑ simp only [h‚ÇÇf‚ÇÇ, le_top, inf_of_le_left]
    rw [(hf‚ÇÅ.add hf‚ÇÇ).order_congr]
    filter_upwards [hf‚ÇÇ.order_eq_top_iff.1 h‚ÇÇf‚ÇÇ]
    simp
  -- General case
  lift hf‚ÇÅ.order to ‚Ñ§ using h‚ÇÇf‚ÇÅ with n‚ÇÅ hn‚ÇÅ
  lift hf‚ÇÇ.order to ‚Ñ§ using h‚ÇÇf‚ÇÇ with n‚ÇÇ hn‚ÇÇ
  obtain ‚ü®g‚ÇÅ, h‚ÇÅg‚ÇÅ, h‚ÇÇg‚ÇÅ, h‚ÇÉg‚ÇÅ‚ü© := hf‚ÇÅ.order_eq_int_iff.1 hn‚ÇÅ.symm
  obtain ‚ü®g‚ÇÇ, h‚ÇÅg‚ÇÇ, h‚ÇÇg‚ÇÇ, h‚ÇÉg‚ÇÇ‚ü© := hf‚ÇÇ.order_eq_int_iff.1 hn‚ÇÇ.symm
  let n := min n‚ÇÅ n‚ÇÇ
  let g := (fun z ‚Ü¶ (z - x) ^ (n‚ÇÅ - n)) ‚Ä¢ g‚ÇÅ +  (fun z ‚Ü¶ (z - x) ^ (n‚ÇÇ - n)) ‚Ä¢ g‚ÇÇ
  have h‚ÇÅg : AnalyticAt ùïú g x := by
    apply AnalyticAt.add
    apply (AnalyticAt.zpow_nonneg (by fun_prop) (sub_nonneg.2 (min_le_left n‚ÇÅ n‚ÇÇ))).smul h‚ÇÅg‚ÇÅ
    apply (AnalyticAt.zpow_nonneg (by fun_prop) (sub_nonneg.2 (min_le_right n‚ÇÅ n‚ÇÇ))).smul h‚ÇÅg‚ÇÇ
  have : f‚ÇÅ + f‚ÇÇ =·∂†[ùìù[‚â†] x] ((¬∑ - x) ^ n) ‚Ä¢ g := by
    filter_upwards [h‚ÇÉg‚ÇÅ, h‚ÇÉg‚ÇÇ, self_mem_nhdsWithin]
    simp_all [g, ‚Üê smul_assoc, ‚Üê zpow_add', sub_ne_zero]
  have t‚ÇÄ : MeromorphicAt ((¬∑  - x) ^ n) x := by fun_prop
  have t‚ÇÅ : t‚ÇÄ.order = n := t‚ÇÄ.order_eq_int_iff.2 ‚ü®1, analyticAt_const, by simp‚ü©
  rw [(hf‚ÇÅ.add hf‚ÇÇ).order_congr this, t‚ÇÄ.order_smul h‚ÇÅg.meromorphicAt, t‚ÇÅ]
  exact le_add_of_nonneg_right h‚ÇÅg.meromorphicAt_order_nonneg

/--
Helper lemma for MeromorphicAt.order_add_of_unequal_order.
-/
lemma order_add_of_order_lt_order (hf‚ÇÅ : MeromorphicAt f‚ÇÅ x) (hf‚ÇÇ : MeromorphicAt f‚ÇÇ x)
    (h : hf‚ÇÅ.order < hf‚ÇÇ.order) :
    (hf‚ÇÅ.add hf‚ÇÇ).order = hf‚ÇÅ.order := by
  -- Trivial case: f‚ÇÇ vanishes identically around z‚ÇÄ
  by_cases h‚ÇÅf‚ÇÇ : hf‚ÇÇ.order = ‚ä§
  ¬∑ rw [(hf‚ÇÅ.add hf‚ÇÇ).order_congr]
    filter_upwards [hf‚ÇÇ.order_eq_top_iff.1 h‚ÇÅf‚ÇÇ]
    simp
  -- General case
  lift hf‚ÇÇ.order to ‚Ñ§ using h‚ÇÅf‚ÇÇ with n‚ÇÇ hn‚ÇÇ
  lift hf‚ÇÅ.order to ‚Ñ§ using h.ne_top with n‚ÇÅ hn‚ÇÅ
  obtain ‚ü®g‚ÇÅ, h‚ÇÅg‚ÇÅ, h‚ÇÇg‚ÇÅ, h‚ÇÉg‚ÇÅ‚ü© := hf‚ÇÅ.order_eq_int_iff.1 hn‚ÇÅ.symm
  obtain ‚ü®g‚ÇÇ, h‚ÇÅg‚ÇÇ, h‚ÇÇg‚ÇÇ, h‚ÇÉg‚ÇÇ‚ü© := hf‚ÇÇ.order_eq_int_iff.1 hn‚ÇÇ.symm
  rw [(hf‚ÇÅ.add hf‚ÇÇ).order_eq_int_iff]
  refine ‚ü®g‚ÇÅ + (¬∑ - x) ^ (n‚ÇÇ - n‚ÇÅ) ‚Ä¢ g‚ÇÇ, ?_, ?_, ?_‚ü©
  ¬∑ apply h‚ÇÅg‚ÇÅ.add (AnalyticAt.smul _ h‚ÇÅg‚ÇÇ)
    apply AnalyticAt.zpow_nonneg (by fun_prop)
      (sub_nonneg.2 (le_of_lt (WithTop.coe_lt_coe.1 h)))
  ¬∑ simpa [zero_zpow _ <| sub_ne_zero.mpr (WithTop.coe_lt_coe.1 h).ne']
  ¬∑ filter_upwards [h‚ÇÉg‚ÇÅ, h‚ÇÉg‚ÇÇ, self_mem_nhdsWithin]
    simp_all [smul_add, ‚Üê smul_assoc, ‚Üê zpow_add', sub_ne_zero]

/--
If two meromorphic functions have unequal orders, then the order of their sum is
exactly the minimum of the orders of the summands.
-/
theorem order_add_of_unequal_order (hf‚ÇÅ : MeromorphicAt f‚ÇÅ x) (hf‚ÇÇ : MeromorphicAt f‚ÇÇ x)
    (h : hf‚ÇÅ.order ‚â† hf‚ÇÇ.order) :
    (hf‚ÇÅ.add hf‚ÇÇ).order = min hf‚ÇÅ.order hf‚ÇÇ.order := by
  rcases lt_or_lt_iff_ne.mpr h with h | h
  ¬∑ simpa [h.le] using hf‚ÇÅ.order_add_of_order_lt_order hf‚ÇÇ h
  ¬∑ simpa [h.le, add_comm] using hf‚ÇÇ.order_add_of_order_lt_order hf‚ÇÅ h

end MeromorphicAt

/-!
## Level Sets of the Order Function
-/

namespace MeromorphicOn

variable {U : Set ùïú} (hf : MeromorphicOn f U)

/-- The set where a meromorphic function has infinite order is clopen in its domain of meromorphy.
-/
theorem isClopen_setOf_order_eq_top : IsClopen { u : U | (hf u.1 u.2).order = ‚ä§ } := by
  constructor
  ¬∑ rw [‚Üê isOpen_compl_iff, isOpen_iff_forall_mem_open]
    intro z hz
    rcases (hf z.1 z.2).eventually_eq_zero_or_eventually_ne_zero with h | h
    ¬∑ -- Case: f is locally zero in a punctured neighborhood of z
      rw [‚Üê (hf z.1 z.2).order_eq_top_iff] at h
      tauto
    ¬∑ -- Case: f is locally nonzero in a punctured neighborhood of z
      obtain ‚ü®t', h‚ÇÅt', h‚ÇÇt', h‚ÇÉt'‚ü© := eventually_nhds_iff.1 (eventually_nhdsWithin_iff.1 h)
      use Subtype.val ‚Åª¬π' t'
      constructor
      ¬∑ intro w hw
        simp only [mem_compl_iff, mem_setOf_eq]
        by_cases h‚ÇÅw : w = z
        ¬∑ rwa [h‚ÇÅw]
        ¬∑ rw [MeromorphicAt.order_eq_top_iff, not_eventually]
          apply Filter.Eventually.frequently
          rw [eventually_nhdsWithin_iff, eventually_nhds_iff]
          use t' \ {z.1}, fun y h‚ÇÅy h‚ÇÇy ‚Ü¶ h‚ÇÅt' y h‚ÇÅy.1 h‚ÇÅy.2, h‚ÇÇt'.sdiff isClosed_singleton, hw,
            mem_singleton_iff.not.2 (Subtype.coe_ne_coe.mpr h‚ÇÅw)
      ¬∑ exact ‚ü®isOpen_induced h‚ÇÇt', h‚ÇÉt'‚ü©
  ¬∑ apply isOpen_iff_forall_mem_open.mpr
    intro z hz
    conv =>
      arg 1; intro; left; right; arg 1; intro
      rw [MeromorphicAt.order_eq_top_iff, eventually_nhdsWithin_iff, eventually_nhds_iff]
    simp only [mem_setOf_eq] at hz
    rw [MeromorphicAt.order_eq_top_iff, eventually_nhdsWithin_iff, eventually_nhds_iff] at hz
    obtain ‚ü®t', h‚ÇÅt', h‚ÇÇt', h‚ÇÉt'‚ü© := hz
    use Subtype.val ‚Åª¬π' t'
    simp only [mem_compl_iff, mem_singleton_iff, isOpen_induced h‚ÇÇt', mem_preimage,
      h‚ÇÉt', and_self, and_true]
    intro w hw
    simp only [mem_setOf_eq]
    -- Trivial case: w = z
    by_cases h‚ÇÅw : w = z
    ¬∑ rw [h‚ÇÅw]
      tauto
    -- Nontrivial case: w ‚â† z
    use t' \ {z.1}, fun y h‚ÇÅy _ ‚Ü¶ h‚ÇÅt' y (mem_of_mem_diff h‚ÇÅy) (mem_of_mem_inter_right h‚ÇÅy)
    constructor
    ¬∑ exact h‚ÇÇt'.sdiff isClosed_singleton
    ¬∑ apply (mem_diff w).1
      exact ‚ü®hw, mem_singleton_iff.not.1 (Subtype.coe_ne_coe.2 h‚ÇÅw)‚ü©

/-- On a connected set, there exists a point where a meromorphic function `f` has finite order iff
`f` has finite order at every point. -/
theorem exists_order_ne_top_iff_forall (hU : IsConnected U) :
    (‚àÉ u : U, (hf u u.2).order ‚â† ‚ä§) ‚Üî (‚àÄ u : U, (hf u u.2).order ‚â† ‚ä§) := by
  constructor
  ¬∑ intro h‚ÇÇf
    have := isPreconnected_iff_preconnectedSpace.1 hU.isPreconnected
    rcases isClopen_iff.1 hf.isClopen_setOf_order_eq_top with h | h
    ¬∑ intro u
      have : u ‚àâ (‚àÖ : Set U) := by exact fun a => a
      rw [‚Üê h] at this
      tauto
    ¬∑ obtain ‚ü®u, hU‚ü© := h‚ÇÇf
      have : u ‚àà univ := by trivial
      rw [‚Üê h] at this
      tauto
  ¬∑ intro h‚ÇÇf
    obtain ‚ü®v, hv‚ü© := hU.nonempty
    use ‚ü®v, hv‚ü©, h‚ÇÇf ‚ü®v, hv‚ü©

/-- On a preconnected set, a meromorphic function has finite order at one point if it has finite
order at another point. -/
theorem order_ne_top_of_isPreconnected {y : ùïú} (hU : IsPreconnected U) (h‚ÇÅx : x ‚àà U) (hy : y ‚àà U)
    (h‚ÇÇx : (hf x h‚ÇÅx).order ‚â† ‚ä§) :
    (hf y hy).order ‚â† ‚ä§ :=
  (hf.exists_order_ne_top_iff_forall ‚ü®nonempty_of_mem h‚ÇÅx, hU‚ü©).1 (by use ‚ü®x, h‚ÇÅx‚ü©) ‚ü®y, hy‚ü©

/-- If the target is a complete space, then the set where a mermorphic function has zero or infinite
order is discrete within its domain of meromorphicity. -/
theorem codiscrete_setOf_order_eq_zero_or_top [CompleteSpace E] :
    {u : U | (hf u u.2).order = 0 ‚à® (hf u u.2).order = ‚ä§} ‚àà Filter.codiscrete U := by
  rw [mem_codiscrete_subtype_iff_mem_codiscreteWithin, mem_codiscreteWithin]
  intro x hx
  rw [Filter.disjoint_principal_right]
  rcases (hf x hx).eventually_eq_zero_or_eventually_ne_zero with h‚ÇÅf | h‚ÇÅf
  ¬∑ filter_upwards [eventually_eventually_nhdsWithin.2 h‚ÇÅf] with a h‚ÇÅa
    suffices ‚àÄ·∂† (z : ùïú) in ùìù[‚â†] a, f z = 0 by
      simp +contextual [(hf a _).order_eq_top_iff, h‚ÇÅa, this]
    obtain rfl | hax := eq_or_ne a x
    ¬∑ exact h‚ÇÅa
    rw [eventually_nhdsWithin_iff, eventually_nhds_iff] at h‚ÇÅa ‚ä¢
    obtain ‚ü®t, h‚ÇÅt, h‚ÇÇt, h‚ÇÉt‚ü© := h‚ÇÅa
    use t \ {x}, fun y h‚ÇÅy _ ‚Ü¶ h‚ÇÅt y h‚ÇÅy.1 h‚ÇÅy.2
    exact ‚ü®h‚ÇÇt.sdiff isClosed_singleton, Set.mem_diff_of_mem h‚ÇÉt hax‚ü©
  ¬∑ filter_upwards [(hf x hx).eventually_analyticAt, h‚ÇÅf] with a h‚ÇÅa
    simp +contextual [h‚ÇÅa.meromorphicAt_order, h‚ÇÅa.order_eq_zero_iff.2]

end MeromorphicOn
