/-
Copyright (c) 2024 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler, Stefan Kebekus
-/
import Mathlib.Algebra.Order.WithTop.Untop0
import Mathlib.Analysis.Analytic.Order
import Mathlib.Analysis.Meromorphic.Basic

/-!
# Orders of Meromorphic Functions

This file defines the order of a meromorphic function `f` at a point `z‚ÇÄ`, as an element of
`‚Ñ§ ‚à™ {‚àû}`.

We characterize the order being `< 0`, or `= 0`, or `> 0`, as the convergence of the function
to infinity, resp. a nonzero constant, resp. zero.

## TODO

Uniformize API between analytic and meromorphic functions
-/

open Filter Set WithTop.LinearOrderedAddCommGroup
open scoped Topology

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {f f‚ÇÅ f‚ÇÇ : ùïú ‚Üí E} {x : ùïú}

/-!
## Order at a Point: Definition and Characterization
-/

open scoped Classical in
/-- The order of a meromorphic function `f` at `z‚ÇÄ`, as an element of `‚Ñ§ ‚à™ {‚àû}`.

The order is defined to be `‚àû` if `f` is identically 0 on a neighbourhood of `z‚ÇÄ`, and otherwise the
unique `n` such that `f` can locally be written as `f z = (z - z‚ÇÄ) ^ n ‚Ä¢ g z`, where `g` is analytic
and does not vanish at `z‚ÇÄ`. See `MeromorphicAt.meromorphicOrderAt_eq_top_iff` and
`MeromorphicAt.meromorphicOrderAt_eq_int_iff` for these equivalences.

If the function is not meromorphic at `x`, we use the junk value `0`. -/
noncomputable def meromorphicOrderAt (f : ùïú ‚Üí E) (x : ùïú) : WithTop ‚Ñ§ :=
  if hf : MeromorphicAt f x then
    ((analyticOrderAt (fun z ‚Ü¶ (z - x) ^ hf.choose ‚Ä¢ f z) x).map (‚Üë¬∑ : ‚Ñï ‚Üí ‚Ñ§)) - hf.choose
  else 0

@[deprecated (since := "2025-05-22")] alias MeromorphicAt.order := meromorphicOrderAt

@[simp]
lemma meromorphicOrderAt_of_not_meromorphicAt (hf : ¬¨ MeromorphicAt f x) :
    meromorphicOrderAt f x = 0 :=
  dif_neg hf

lemma meromorphicAt_of_meromorphicOrderAt_ne_zero (hf : meromorphicOrderAt f x ‚â† 0) :
    MeromorphicAt f x := by
  contrapose! hf
  simp [hf]

/-- The order of a meromorphic function `f` at a `z‚ÇÄ` is infinity iff `f` vanishes locally around
`z‚ÇÄ`. -/
lemma meromorphicOrderAt_eq_top_iff :
    meromorphicOrderAt f x = ‚ä§ ‚Üî ‚àÄ·∂† z in ùìù[‚â†] x, f z = 0 := by
  by_cases hf : MeromorphicAt f x; swap
  ¬∑ simp only [hf, not_false_eq_true, meromorphicOrderAt_of_not_meromorphicAt, WithTop.zero_ne_top,
      false_iff]
    contrapose! hf
    exact (MeromorphicAt.const 0 x).congr  (EventuallyEq.symm hf)
  simp only [meromorphicOrderAt, hf, ‚ÜìreduceDIte, sub_eq_top_iff, ENat.map_eq_top_iff,
    WithTop.natCast_ne_top, or_false]
  by_cases h : analyticOrderAt (fun z ‚Ü¶ (z - x) ^ hf.choose ‚Ä¢ f z) x = ‚ä§
  ¬∑ simp only [h, eventually_nhdsWithin_iff, mem_compl_iff, mem_singleton_iff, true_iff]
    rw [analyticOrderAt_eq_top] at h
    filter_upwards [h] with z hf hz
    rwa [smul_eq_zero_iff_right <| pow_ne_zero _ (sub_ne_zero.mpr hz)] at hf
  ¬∑ obtain ‚ü®m, hm‚ü© := ENat.ne_top_iff_exists.mp h
    simp only [‚Üê hm, ENat.coe_ne_top, false_iff]
    contrapose! h
    rw [analyticOrderAt_eq_top]
    rw [‚Üê hf.choose_spec.frequently_eq_iff_eventually_eq analyticAt_const]
    apply Eventually.frequently
    filter_upwards [h] with z hfz
    rw [hfz, smul_zero]

@[deprecated (since := "2025-05-22")]
alias MeromorphicAt.order_eq_top_iff := meromorphicOrderAt_eq_top_iff

/-- The order of a meromorphic function `f` at `z‚ÇÄ` equals an integer `n` iff `f` can locally be
written as `f z = (z - z‚ÇÄ) ^ n ‚Ä¢ g z`, where `g` is analytic and does not vanish at `z‚ÇÄ`. -/
lemma meromorphicOrderAt_eq_int_iff {n : ‚Ñ§} (hf : MeromorphicAt f x) : meromorphicOrderAt f x = n ‚Üî
    ‚àÉ g : ùïú ‚Üí E, AnalyticAt ùïú g x ‚àß g x ‚â† 0 ‚àß ‚àÄ·∂† z in ùìù[‚â†] x, f z = (z - x) ^ n ‚Ä¢ g z := by
  simp only [meromorphicOrderAt, hf, ‚ÜìreduceDIte]
  by_cases h : analyticOrderAt (fun z ‚Ü¶ (z - x) ^ hf.choose ‚Ä¢ f z) x = ‚ä§
  ¬∑ rw [h, ENat.map_top, ‚Üê WithTop.coe_natCast, top_sub,
      eq_false_intro WithTop.top_ne_coe, false_iff]
    rw [analyticOrderAt_eq_top] at h
    refine fun ‚ü®g, hg_an, hg_ne, hg_eq‚ü© ‚Ü¶ hg_ne ?_
    apply EventuallyEq.eq_of_nhds
    rw [EventuallyEq, ‚Üê AnalyticAt.frequently_eq_iff_eventually_eq hg_an analyticAt_const]
    apply Eventually.frequently
    rw [eventually_nhdsWithin_iff] at hg_eq ‚ä¢
    filter_upwards [h, hg_eq] with z hfz hfz_eq hz
    rwa [hfz_eq hz, ‚Üê mul_smul, smul_eq_zero_iff_right] at hfz
    exact mul_ne_zero (pow_ne_zero _ (sub_ne_zero.mpr hz)) (zpow_ne_zero _ (sub_ne_zero.mpr hz))
  ¬∑ obtain ‚ü®m, h‚ü© := ENat.ne_top_iff_exists.mp h
    rw [‚Üê h, ENat.map_coe, ‚Üê WithTop.coe_natCast, ‚Üê coe_sub, WithTop.coe_inj]
    obtain ‚ü®g, hg_an, hg_ne, hg_eq‚ü© := hf.choose_spec.analyticOrderAt_eq_natCast.mp h.symm
    replace hg_eq : ‚àÄ·∂† (z : ùïú) in ùìù[‚â†] x, f z = (z - x) ^ (‚Üëm - ‚Üëhf.choose : ‚Ñ§) ‚Ä¢ g z := by
      rw [eventually_nhdsWithin_iff]
      filter_upwards [hg_eq] with z hg_eq hz
      rwa [‚Üê smul_right_inj <| zpow_ne_zero _ (sub_ne_zero.mpr hz), ‚Üê mul_smul,
        ‚Üê zpow_add‚ÇÄ (sub_ne_zero.mpr hz), ‚Üê add_sub_assoc, add_sub_cancel_left, zpow_natCast,
        zpow_natCast]
    exact ‚ü®fun h ‚Ü¶ ‚ü®g, hg_an, hg_ne, h ‚ñ∏ hg_eq‚ü©,
      AnalyticAt.unique_eventuallyEq_zpow_smul_nonzero ‚ü®g, hg_an, hg_ne, hg_eq‚ü©‚ü©

@[deprecated (since := "2025-05-22")]
alias MeromorphicAt.order_eq_inf_iff := meromorphicOrderAt_eq_int_iff

/--
The order of a meromorphic function `f` at `z‚ÇÄ` is finite iff `f` can locally be
written as `f z = (z - z‚ÇÄ) ^ order ‚Ä¢ g z`, where `g` is analytic and does not
vanish at `z‚ÇÄ`.
-/
theorem meromorphicOrderAt_ne_top_iff {f : ùïú ‚Üí E} {z‚ÇÄ : ùïú} (hf : MeromorphicAt f z‚ÇÄ) :
    meromorphicOrderAt f z‚ÇÄ ‚â† ‚ä§ ‚Üî ‚àÉ (g : ùïú ‚Üí E), AnalyticAt ùïú g z‚ÇÄ ‚àß g z‚ÇÄ ‚â† 0 ‚àß
      f =·∂†[ùìù[‚â†] z‚ÇÄ] fun z ‚Ü¶ (z - z‚ÇÄ) ^ ((meromorphicOrderAt f z‚ÇÄ).untop‚ÇÄ) ‚Ä¢ g z :=
  ‚ü®fun h ‚Ü¶ (meromorphicOrderAt_eq_int_iff hf).1 (WithTop.coe_untop‚ÇÄ_of_ne_top h).symm,
    fun h ‚Ü¶ Option.ne_none_iff_exists'.2
      ‚ü®(meromorphicOrderAt f z‚ÇÄ).untopD 0, (meromorphicOrderAt_eq_int_iff hf).2 h‚ü©‚ü©

@[deprecated (since := "2025-05-22")]
alias MeromorphicAt.order_ne_top_iff := meromorphicOrderAt_ne_top_iff

/--
The order of a meromorphic function `f` at `z‚ÇÄ` is finite iff `f` does not have
any zeros in a sufficiently small neighborhood of `z‚ÇÄ`.
-/
theorem meromorphicOrderAt_ne_top_iff_eventually_ne_zero {f : ùïú ‚Üí E} (hf : MeromorphicAt f x) :
    meromorphicOrderAt f x ‚â† ‚ä§ ‚Üî ‚àÄ·∂† x in ùìù[‚â†] x, f x ‚â† 0 := by
  constructor
  ¬∑ intro h
    obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := (meromorphicOrderAt_ne_top_iff hf).1 h
    filter_upwards [h‚ÇÉg, self_mem_nhdsWithin, eventually_nhdsWithin_of_eventually_nhds
      ((h‚ÇÅg.continuousAt.ne_iff_eventually_ne continuousAt_const).mp h‚ÇÇg)]
    simp_all [zpow_ne_zero, sub_ne_zero]
  ¬∑ simp_all [meromorphicOrderAt_eq_top_iff, Eventually.frequently]

@[deprecated (since := "2025-05-22")] alias MeromorphicAt.order_ne_top_iff_eventually_ne_zero :=
  meromorphicOrderAt_ne_top_iff_eventually_ne_zero

/-- If the order of a meromorphic function is negative, then this function converges to infinity
at this point. See also the iff version `tendsto_cobounded_iff_meromorphicOrderAt_neg`. -/
lemma tendsto_cobounded_of_meromorphicOrderAt_neg (ho : meromorphicOrderAt f x < 0) :
    Tendsto f (ùìù[‚â†] x) (Bornology.cobounded E) := by
  have hf : MeromorphicAt f x := meromorphicAt_of_meromorphicOrderAt_ne_zero ho.ne
  simp only [‚Üê tendsto_norm_atTop_iff_cobounded]
  obtain ‚ü®m, hm‚ü© := WithTop.ne_top_iff_exists.mp ho.ne_top
  have m_neg : m < 0 := by simpa [‚Üê hm] using ho
  rcases (meromorphicOrderAt_eq_int_iff hf).1 hm.symm with ‚ü®g, g_an, gx, hg‚ü©
  have A : Tendsto (fun z ‚Ü¶ ‚Äñ(z - x) ^ m ‚Ä¢ g z‚Äñ) (ùìù[‚â†] x) atTop := by
    simp only [norm_smul]
    apply Filter.Tendsto.atTop_mul_pos (C := ‚Äñg x‚Äñ) (by simp [gx]) _
      g_an.continuousAt.continuousWithinAt.tendsto.norm
    have : Tendsto (fun z ‚Ü¶ z - x) (ùìù[‚â†] x) (ùìù[‚â†] 0) := by
      refine tendsto_nhdsWithin_iff.2 ‚ü®?_, ?_‚ü©
      ¬∑ have : ContinuousWithinAt (fun z ‚Ü¶ z - x) ({x}·∂ú) x :=
          ContinuousAt.continuousWithinAt (by fun_prop)
        simpa using this.tendsto
      ¬∑ filter_upwards [self_mem_nhdsWithin] with y hy
        simpa [sub_eq_zero] using hy
    apply Tendsto.comp (NormedField.tendsto_norm_zpow_nhdsNE_zero_atTop m_neg) this
  apply A.congr'
  filter_upwards [hg] with z hz using by simp [hz]

@[deprecated (since := "2025-05-22")] alias MeromorphicAt.tendsto_cobounded_of_order_neg :=
  tendsto_cobounded_of_meromorphicOrderAt_neg

/-- If the order of a meromorphic function is zero, then this function converges to a nonzero
limit at this point. See also the iff version `tendsto_ne_zero_iff_meromorphicOrderAt_eq_zero`. -/
lemma tendsto_ne_zero_of_meromorphicOrderAt_eq_zero
    (hf : MeromorphicAt f x) (ho : meromorphicOrderAt f x = 0) :
    ‚àÉ c ‚â† 0, Tendsto f (ùìù[‚â†] x) (ùìù c) := by
  rcases (meromorphicOrderAt_eq_int_iff hf).1 ho with ‚ü®g, g_an, gx, hg‚ü©
  refine ‚ü®g x, gx, ?_‚ü©
  apply g_an.continuousAt.continuousWithinAt.tendsto.congr'
  filter_upwards [hg] with y hy using by simp [hy]

@[deprecated (since := "2025-05-22")] alias MeromorphicAt.tendsto_ne_zero_of_order_eq_zero :=
  tendsto_ne_zero_of_meromorphicOrderAt_eq_zero

/-- If the order of a meromorphic function is positive, then this function converges to zero
at this point. See also the iff version `tendsto_zero_iff_meromorphicOrderAt_pos`. -/
lemma tendsto_zero_of_meromorphicOrderAt_pos (ho : 0 < meromorphicOrderAt f x) :
    Tendsto f (ùìù[‚â†] x) (ùìù 0) := by
  have hf : MeromorphicAt f x := meromorphicAt_of_meromorphicOrderAt_ne_zero ho.ne'
  cases h'o : meromorphicOrderAt f x with
  | top =>
    apply tendsto_const_nhds.congr'
    filter_upwards [meromorphicOrderAt_eq_top_iff.1 h'o] with y hy using hy.symm
  | coe n =>
    rcases (meromorphicOrderAt_eq_int_iff hf).1 h'o with ‚ü®g, g_an, gx, hg‚ü©
    lift n to ‚Ñï using by simpa [h'o] using ho.le
    have : (0 : E) = (x - x) ^ n ‚Ä¢ g x := by
      have : 0 < n := by simpa [h'o] using ho
      simp [zero_pow_eq_zero.2 this.ne']
    rw [this]
    have : ContinuousAt (fun z ‚Ü¶ (z - x) ^ n ‚Ä¢ g z) x := by fun_prop
    apply this.continuousWithinAt.tendsto.congr'
    filter_upwards [hg] with y hy using by simp [hy]

@[deprecated (since := "2025-05-22")] alias MeromorphicAt.tendsto_zero_of_order_pos :=
  tendsto_zero_of_meromorphicOrderAt_pos

/-- If the order of a meromorphic function is nonnegative, then this function converges
at this point. See also the iff version `tendsto_nhds_iff_meromorphicOrderAt_nonneg`. -/
lemma tendsto_nhds_of_meromorphicOrderAt_nonneg
    (hf : MeromorphicAt f x) (ho : 0 ‚â§ meromorphicOrderAt f x) :
    ‚àÉ c, Tendsto f (ùìù[‚â†] x) (ùìù c) := by
  rcases ho.eq_or_lt with ho | ho
  ¬∑ rcases tendsto_ne_zero_of_meromorphicOrderAt_eq_zero hf ho.symm with ‚ü®c, -, hc‚ü©
    exact ‚ü®c, hc‚ü©
  ¬∑ exact ‚ü®0, tendsto_zero_of_meromorphicOrderAt_pos ho‚ü©

@[deprecated (since := "2025-05-22")] alias MeromorphicAt.tendsto_nhds_of_order_nonneg :=
  tendsto_nhds_of_meromorphicOrderAt_nonneg

/-- A meromorphic function converges to infinity iff its order is negative. -/
lemma tendsto_cobounded_iff_meromorphicOrderAt_neg (hf : MeromorphicAt f x) :
    Tendsto f (ùìù[‚â†] x) (Bornology.cobounded E) ‚Üî meromorphicOrderAt f x < 0 := by
  rcases lt_or_le (meromorphicOrderAt f x) 0 with ho | ho
  ¬∑ simp [ho, tendsto_cobounded_of_meromorphicOrderAt_neg]
  ¬∑ simp only [lt_iff_not_le, ho, not_true_eq_false, iff_false, ‚Üê tendsto_norm_atTop_iff_cobounded]
    obtain ‚ü®c, hc‚ü© := tendsto_nhds_of_meromorphicOrderAt_nonneg hf ho
    exact not_tendsto_atTop_of_tendsto_nhds hc.norm

@[deprecated (since := "2025-05-22")] alias MeromorphicAt.tendsto_cobounded_iff_order_neg :=
  tendsto_cobounded_iff_meromorphicOrderAt_neg

/-- A meromorphic function converges to a limit iff its order is nonnegative. -/
lemma tendsto_nhds_iff_meromorphicOrderAt_nonneg (hf : MeromorphicAt f x) :
    (‚àÉ c, Tendsto f (ùìù[‚â†] x) (ùìù c)) ‚Üî 0 ‚â§ meromorphicOrderAt f x := by
  rcases lt_or_le (meromorphicOrderAt f x) 0 with ho | ho
  ¬∑ simp only [‚Üê not_lt, ho, not_true_eq_false, iff_false, not_exists]
    intro c hc
    apply not_tendsto_atTop_of_tendsto_nhds hc.norm
    rw [tendsto_norm_atTop_iff_cobounded]
    exact tendsto_cobounded_of_meromorphicOrderAt_neg ho
  ¬∑ simp [ho, tendsto_nhds_of_meromorphicOrderAt_nonneg hf ho]

@[deprecated (since := "2025-05-22")] alias MeromorphicAt.tendsto_nhds_iff_order_nonneg :=
  tendsto_nhds_iff_meromorphicOrderAt_nonneg

/-- A meromorphic function converges to a nonzero limit iff its order is zero. -/
lemma tendsto_ne_zero_iff_meromorphicOrderAt_eq_zero (hf : MeromorphicAt f x) :
    (‚àÉ c ‚â† 0, Tendsto f (ùìù[‚â†] x) (ùìù c)) ‚Üî meromorphicOrderAt f x = 0 := by
  rcases eq_or_ne (meromorphicOrderAt f x) 0 with ho | ho
  ¬∑ simp [ho, tendsto_ne_zero_of_meromorphicOrderAt_eq_zero hf ho]
  simp only [ne_eq, ho, iff_false, not_exists, not_and]
  intro c c_ne hc
  rcases ho.lt_or_lt with ho | ho
  ¬∑ apply not_tendsto_atTop_of_tendsto_nhds hc.norm
    rw [tendsto_norm_atTop_iff_cobounded]
    exact tendsto_cobounded_of_meromorphicOrderAt_neg ho
  ¬∑ apply c_ne
    exact tendsto_nhds_unique hc (tendsto_zero_of_meromorphicOrderAt_pos ho)

@[deprecated (since := "2025-05-22")] alias MeromorphicAt.tendsto_ne_zero_iff_order_eq_zero :=
  tendsto_ne_zero_iff_meromorphicOrderAt_eq_zero

/-- A meromorphic function converges to zero iff its order is positive. -/
lemma tendsto_zero_iff_meromorphicOrderAt_pos (hf : MeromorphicAt f x) :
    (Tendsto f (ùìù[‚â†] x) (ùìù 0)) ‚Üî 0 < meromorphicOrderAt f x := by
  rcases lt_or_le 0 (meromorphicOrderAt f x) with ho | ho
  ¬∑ simp [ho, tendsto_zero_of_meromorphicOrderAt_pos ho]
  simp only [‚Üê not_le, ho, not_true_eq_false, iff_false]
  intro hc
  rcases ho.eq_or_lt with ho | ho
  ¬∑ obtain ‚ü®c, c_ne, h'c‚ü© := tendsto_ne_zero_of_meromorphicOrderAt_eq_zero hf ho
    apply c_ne
    exact tendsto_nhds_unique h'c hc
  ¬∑ apply not_tendsto_atTop_of_tendsto_nhds hc.norm
    rw [tendsto_norm_atTop_iff_cobounded]
    exact tendsto_cobounded_of_meromorphicOrderAt_neg ho

@[deprecated (since := "2025-05-22")] alias MeromorphicAt.tendsto_zero_iff_order_pos :=
  tendsto_zero_iff_meromorphicOrderAt_pos

/-- Meromorphic functions that agree in a punctured neighborhood of `z‚ÇÄ` have the same order at
`z‚ÇÄ`. -/
theorem meromorphicOrderAt_congr (hf‚ÇÅ‚ÇÇ : f‚ÇÅ =·∂†[ùìù[‚â†] x] f‚ÇÇ) :
    meromorphicOrderAt f‚ÇÅ x = meromorphicOrderAt f‚ÇÇ x := by
  by_cases hf‚ÇÅ : MeromorphicAt f‚ÇÅ x; swap
  ¬∑ have : ¬¨ MeromorphicAt f‚ÇÇ x := by
      contrapose! hf‚ÇÅ
      exact hf‚ÇÅ.congr hf‚ÇÅ‚ÇÇ.symm
    simp [hf‚ÇÅ, this]
  by_cases h‚ÇÅf‚ÇÅ : meromorphicOrderAt f‚ÇÅ x = ‚ä§
  ¬∑ rw [h‚ÇÅf‚ÇÅ, eq_comm]
    rw [meromorphicOrderAt_eq_top_iff] at h‚ÇÅf‚ÇÅ ‚ä¢
    exact EventuallyEq.rw h‚ÇÅf‚ÇÅ (fun x => Eq (f‚ÇÇ x)) hf‚ÇÅ‚ÇÇ.symm
  ¬∑ obtain ‚ü®n, hn : meromorphicOrderAt f‚ÇÅ x = n‚ü© := Option.ne_none_iff_exists'.mp h‚ÇÅf‚ÇÅ
    obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := (meromorphicOrderAt_eq_int_iff hf‚ÇÅ).1 hn
    rw [hn, eq_comm, meromorphicOrderAt_eq_int_iff (hf‚ÇÅ.congr hf‚ÇÅ‚ÇÇ)]
    use g, h‚ÇÅg, h‚ÇÇg
    exact EventuallyEq.rw h‚ÇÉg (fun x => Eq (f‚ÇÇ x)) hf‚ÇÅ‚ÇÇ.symm

@[deprecated (since := "2025-05-22")] alias MeromorphicAt.order_congr :=
  meromorphicOrderAt_congr

/-- Compatibility of notions of `order` for analytic and meromorphic functions. -/
lemma AnalyticAt.meromorphicOrderAt_eq (hf : AnalyticAt ùïú f x) :
    meromorphicOrderAt f x = (analyticOrderAt f x).map (‚Üë) := by
  cases hn : analyticOrderAt f x
  ¬∑ rw [ENat.map_top, meromorphicOrderAt_eq_top_iff]
    exact (analyticOrderAt_eq_top.mp hn).filter_mono nhdsWithin_le_nhds
  ¬∑ simp_rw [ENat.map_coe, meromorphicOrderAt_eq_int_iff hf.meromorphicAt, zpow_natCast]
    rcases hf.analyticOrderAt_eq_natCast.mp hn with ‚ü®g, h1, h2, h3‚ü©
    exact ‚ü®g, h1, h2, h3.filter_mono nhdsWithin_le_nhds‚ü©

@[deprecated (since := "2025-05-22")] alias AnalyticAt.meromorphicAt_order :=
  AnalyticAt.meromorphicOrderAt_eq

/--
When seen as meromorphic functions, analytic functions have nonnegative order.
-/
theorem AnalyticAt.meromorphicOrderAt_nonneg (hf : AnalyticAt ùïú f x) :
    0 ‚â§ meromorphicOrderAt f x := by
  simp [hf.meromorphicOrderAt_eq]

@[deprecated (since := "2025-05-22")] alias AnalyticAt.meromorphicAt_order_nonneg :=
  AnalyticAt.meromorphicOrderAt_nonneg

/-- If a function is both meromorphic and continuous at a point, then it is analytic there. -/
protected theorem MeromorphicAt.analyticAt {f : ùïú ‚Üí E} {x : ùïú}
    (h : MeromorphicAt f x) (h' : ContinuousAt f x) :
    AnalyticAt ùïú f x := by
  cases ho : meromorphicOrderAt f x with
  | top =>
    /- If the order is infinite, then `f` vanishes on a pointed neighborhood of `x`. By continuity,
    it also vanishes at `x`.-/
    have : AnalyticAt ùïú (fun _ ‚Ü¶ (0 : E)) x := analyticAt_const
    apply this.congr
    rw [‚Üê ContinuousAt.eventuallyEq_nhds_iff_eventuallyEq_nhdsNE continuousAt_const h']
    filter_upwards [meromorphicOrderAt_eq_top_iff.1 ho] with y hy using by simp [hy]
  | coe n =>
    /- If the order is finite, then the order has to be nonnegative, as otherwise the norm of `f`
    would tend to infinity at `x`. Then the local expression of `f` coming from its meromorphicity
    shows that it coincides with an analytic function close to `x`, except maybe at `x`. By
    continuity of `f`, the two functions also coincide at `x`. -/
    rcases (meromorphicOrderAt_eq_int_iff h).1 ho with ‚ü®g, g_an, gx, hg‚ü©
    have : 0 ‚â§ meromorphicOrderAt f x := by
      apply (tendsto_nhds_iff_meromorphicOrderAt_nonneg h).1
      exact ‚ü®f x, h'.continuousWithinAt.tendsto‚ü©
    lift n to ‚Ñï using by simpa [ho] using this
    have A : ‚àÄ·∂† (z : ùïú) in ùìù x, (z - x) ^ n ‚Ä¢ g z = f z := by
      apply (ContinuousAt.eventuallyEq_nhds_iff_eventuallyEq_nhdsNE (by fun_prop) h').1
      filter_upwards [hg] with z hz using by simpa using hz.symm
    exact AnalyticAt.congr (by fun_prop) A

/-!
## Order at a Point: Behaviour under Ring Operations

We establish additivity of the order under multiplication and taking powers.
-/

/-- The order is additive when multiplying scalar-valued and vector-valued meromorphic functions. -/
theorem meromorphicOrderAt_smul {f : ùïú ‚Üí ùïú} {g : ùïú ‚Üí E}
    (hf : MeromorphicAt f x) (hg : MeromorphicAt g x) :
    meromorphicOrderAt (f ‚Ä¢ g) x = meromorphicOrderAt f x + meromorphicOrderAt g x := by
  -- Trivial cases: one of the functions vanishes around z‚ÇÄ
  cases h‚ÇÇf : meromorphicOrderAt f x with
  | top =>
    simp only [top_add, meromorphicOrderAt_eq_top_iff] at h‚ÇÇf ‚ä¢
    filter_upwards [h‚ÇÇf] with z hz using by simp [hz]
  | coe m =>
    cases h‚ÇÇg : meromorphicOrderAt g x with
    | top =>
      simp only [add_top, meromorphicOrderAt_eq_top_iff] at h‚ÇÇg ‚ä¢
      filter_upwards [h‚ÇÇg] with z hz using by simp [hz]
    | coe n => -- Non-trivial case: both functions do not vanish around z‚ÇÄ
      rw [‚Üê WithTop.coe_add, meromorphicOrderAt_eq_int_iff (hf.smul hg)]
      obtain ‚ü®F, h‚ÇÅF, h‚ÇÇF, h‚ÇÉF‚ü© := (meromorphicOrderAt_eq_int_iff hf).1 h‚ÇÇf
      obtain ‚ü®G, h‚ÇÅG, h‚ÇÇG, h‚ÇÉG‚ü© := (meromorphicOrderAt_eq_int_iff hg).1 h‚ÇÇg
      use F ‚Ä¢ G, h‚ÇÅF.smul h‚ÇÅG, by simp [h‚ÇÇF, h‚ÇÇG]
      filter_upwards [self_mem_nhdsWithin, h‚ÇÉF, h‚ÇÉG] with a ha hfa hga
      simp [hfa, hga, smul_comm (F a), zpow_add‚ÇÄ (sub_ne_zero.mpr ha), mul_smul]

@[deprecated (since := "2025-05-22")]
alias MeromorphicAt.order_smul := meromorphicOrderAt_smul

/-- The order is additive when multiplying meromorphic functions. -/
theorem meromorphicOrderAt_mul {f g : ùïú ‚Üí ùïú} (hf : MeromorphicAt f x) (hg : MeromorphicAt g x) :
    meromorphicOrderAt (f * g) x = meromorphicOrderAt f x + meromorphicOrderAt g x :=
  meromorphicOrderAt_smul hf hg

@[deprecated (since := "2025-05-22")]
alias MeromorphicAt.order_mul := meromorphicOrderAt_mul

/-- The order multiplies by `n` when taking a meromorphic function to its `n`th power. -/
theorem meromorphicOrderAt_pow {f : ùïú ‚Üí ùïú} {x : ùïú} (hf : MeromorphicAt f x) {n : ‚Ñï} :
    meromorphicOrderAt (f ^ n) x = n * meromorphicOrderAt f x := by
  induction n
  case zero =>
    simp only [pow_zero, CharP.cast_eq_zero, zero_mul]
    rw [‚Üê WithTop.coe_zero, meromorphicOrderAt_eq_int_iff]
    ¬∑ exact ‚ü®1, analyticAt_const, by simp‚ü©
    ¬∑ apply MeromorphicAt.const
  case succ n hn =>
    simp only [pow_add, pow_one, meromorphicOrderAt_mul (hf.pow n) hf, hn, Nat.cast_add,
      Nat.cast_one]
    cases meromorphicOrderAt f x
    ¬∑ aesop
    ¬∑ norm_cast
      simp only [Nat.cast_add, Nat.cast_one]
      ring

@[deprecated (since := "2025-05-22")]
alias MeromorphicAt.order_pow := meromorphicOrderAt_pow

/-- The order multiplies by `n` when taking a meromorphic function to its `n`th power. -/
theorem meromorphicOrderAt_zpow {f : ùïú ‚Üí ùïú} {x : ùïú} (hf : MeromorphicAt f x) {n : ‚Ñ§} :
    meromorphicOrderAt (f ^ n) x = n * meromorphicOrderAt f x := by
  -- Trivial case: n = 0
  by_cases hn : n = 0
  ¬∑ simp only [hn, zpow_zero, WithTop.coe_zero, zero_mul]
    rw [‚Üê WithTop.coe_zero, meromorphicOrderAt_eq_int_iff]
    ¬∑ exact ‚ü®1, analyticAt_const, by simp‚ü©
    ¬∑ apply MeromorphicAt.const
  -- Trivial case: f locally zero
  by_cases h : meromorphicOrderAt f x = ‚ä§
  ¬∑ simp only [h, ne_eq, WithTop.coe_eq_zero, hn, not_false_eq_true, WithTop.mul_top]
    rw [meromorphicOrderAt_eq_top_iff] at *
    filter_upwards [h]
    intro y hy
    simp [hy, zero_zpow n hn]
  -- General case
  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := (meromorphicOrderAt_ne_top_iff hf).1 h
  rw [‚Üê WithTop.coe_untop‚ÇÄ_of_ne_top h, ‚Üê WithTop.coe_mul,
    meromorphicOrderAt_eq_int_iff (hf.zpow n)]
  use g ^ n, h‚ÇÅg.zpow h‚ÇÇg
  constructor
  ¬∑ simp_all [zpow_eq_zero_iff hn]
  ¬∑ filter_upwards [h‚ÇÉg]
    intro y hy
    rw [Pi.pow_apply, hy, smul_eq_mul, mul_zpow]
    congr 1
    rw [mul_comm, zpow_mul]

@[deprecated (since := "2025-05-22")]
alias MeromorphicAt.order_zpow := meromorphicOrderAt_zpow

/-- The order of the inverse is the negative of the order. -/
theorem meromorphicOrderAt_inv {f : ùïú ‚Üí ùïú} :
    meromorphicOrderAt (f‚Åª¬π) x = -meromorphicOrderAt f x := by
  by_cases hf : MeromorphicAt f x; swap
  ¬∑ have : ¬¨ MeromorphicAt (f‚Åª¬π) x := by
      contrapose! hf
      simpa using hf.inv
    simp [hf, this]
  by_cases h‚ÇÇf : meromorphicOrderAt f x = ‚ä§
  ¬∑ rw [h‚ÇÇf, ‚Üê LinearOrderedAddCommGroupWithTop.neg_top, neg_neg]
    rw [meromorphicOrderAt_eq_top_iff] at *
    filter_upwards [h‚ÇÇf]
    simp
  lift meromorphicOrderAt f x to ‚Ñ§ using h‚ÇÇf with a ha
  apply (meromorphicOrderAt_eq_int_iff hf.inv).2
  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := (meromorphicOrderAt_eq_int_iff hf).1 ha.symm
  use g‚Åª¬π, h‚ÇÅg.inv h‚ÇÇg, inv_eq_zero.not.2 h‚ÇÇg
  rw [eventually_nhdsWithin_iff] at *
  filter_upwards [h‚ÇÉg]
  intro _ h‚ÇÅa h‚ÇÇa
  simp only [Pi.inv_apply, h‚ÇÅa h‚ÇÇa, smul_eq_mul, mul_inv_rev, zpow_neg]
  ring

@[deprecated (since := "2025-05-22")]
alias MeromorphicAt.order_inv := meromorphicOrderAt_inv

/--
The order of a sum is at least the minimum of the orders of the summands.
-/
theorem meromorphicOrderAt_add (hf‚ÇÅ : MeromorphicAt f‚ÇÅ x) (hf‚ÇÇ : MeromorphicAt f‚ÇÇ x) :
    min (meromorphicOrderAt f‚ÇÅ x) (meromorphicOrderAt f‚ÇÇ x) ‚â§ meromorphicOrderAt (f‚ÇÅ + f‚ÇÇ) x := by
  -- Handle the trivial cases where one of the orders equals ‚ä§
  by_cases h‚ÇÇf‚ÇÅ : meromorphicOrderAt f‚ÇÅ x = ‚ä§
  ¬∑ rw [h‚ÇÇf‚ÇÅ, min_top_left, meromorphicOrderAt_congr]
    filter_upwards [meromorphicOrderAt_eq_top_iff.1 h‚ÇÇf‚ÇÅ]
    simp
  by_cases h‚ÇÇf‚ÇÇ : meromorphicOrderAt f‚ÇÇ x = ‚ä§
  ¬∑ simp only [h‚ÇÇf‚ÇÇ, le_top, inf_of_le_left]
    rw [meromorphicOrderAt_congr]
    filter_upwards [meromorphicOrderAt_eq_top_iff.1 h‚ÇÇf‚ÇÇ]
    simp
  -- General case
  lift meromorphicOrderAt f‚ÇÅ x to ‚Ñ§ using h‚ÇÇf‚ÇÅ with n‚ÇÅ hn‚ÇÅ
  lift meromorphicOrderAt f‚ÇÇ x to ‚Ñ§ using h‚ÇÇf‚ÇÇ with n‚ÇÇ hn‚ÇÇ
  obtain ‚ü®g‚ÇÅ, h‚ÇÅg‚ÇÅ, h‚ÇÇg‚ÇÅ, h‚ÇÉg‚ÇÅ‚ü© := (meromorphicOrderAt_eq_int_iff hf‚ÇÅ).1 hn‚ÇÅ.symm
  obtain ‚ü®g‚ÇÇ, h‚ÇÅg‚ÇÇ, h‚ÇÇg‚ÇÇ, h‚ÇÉg‚ÇÇ‚ü© := (meromorphicOrderAt_eq_int_iff hf‚ÇÇ).1 hn‚ÇÇ.symm
  let n := min n‚ÇÅ n‚ÇÇ
  let g := (fun z ‚Ü¶ (z - x) ^ (n‚ÇÅ - n)) ‚Ä¢ g‚ÇÅ +  (fun z ‚Ü¶ (z - x) ^ (n‚ÇÇ - n)) ‚Ä¢ g‚ÇÇ
  have h‚ÇÅg : AnalyticAt ùïú g x := by
    apply AnalyticAt.add
    apply (AnalyticAt.zpow_nonneg (by fun_prop) (sub_nonneg.2 (min_le_left n‚ÇÅ n‚ÇÇ))).smul h‚ÇÅg‚ÇÅ
    apply (AnalyticAt.zpow_nonneg (by fun_prop) (sub_nonneg.2 (min_le_right n‚ÇÅ n‚ÇÇ))).smul h‚ÇÅg‚ÇÇ
  have : f‚ÇÅ + f‚ÇÇ =·∂†[ùìù[‚â†] x] ((¬∑ - x) ^ n) ‚Ä¢ g := by
    filter_upwards [h‚ÇÉg‚ÇÅ, h‚ÇÉg‚ÇÇ, self_mem_nhdsWithin]
    simp_all [g, ‚Üê smul_assoc, ‚Üê zpow_add', sub_ne_zero]
  have t‚ÇÄ : MeromorphicAt ((¬∑ - x) ^ n) x := by fun_prop
  have t‚ÇÅ : meromorphicOrderAt ((¬∑ - x) ^ n) x = n :=
    (meromorphicOrderAt_eq_int_iff t‚ÇÄ).2 ‚ü®1, analyticAt_const, by simp‚ü©
  rw [meromorphicOrderAt_congr this, meromorphicOrderAt_smul t‚ÇÄ h‚ÇÅg.meromorphicAt, t‚ÇÅ]
  exact le_add_of_nonneg_right h‚ÇÅg.meromorphicOrderAt_nonneg

@[deprecated (since := "2025-05-22")]
alias MeromorphicAt.order_add := meromorphicOrderAt_add

/--
Helper lemma for meromorphicOrderAt_add_of_ne.
-/
lemma meromorphicOrderAt_add_eq_left_of_lt (hf‚ÇÇ : MeromorphicAt f‚ÇÇ x)
    (h : meromorphicOrderAt f‚ÇÅ x < meromorphicOrderAt f‚ÇÇ x) :
    meromorphicOrderAt (f‚ÇÅ + f‚ÇÇ) x = meromorphicOrderAt f‚ÇÅ x := by
  by_cases hf‚ÇÅ : MeromorphicAt f‚ÇÅ x; swap
  ¬∑ have : ¬¨ (MeromorphicAt (f‚ÇÅ + f‚ÇÇ) x) := by
      contrapose! hf‚ÇÅ
      simpa using hf‚ÇÅ.sub hf‚ÇÇ
    simp [this, hf‚ÇÅ]
  -- Trivial case: f‚ÇÇ vanishes identically around z‚ÇÄ
  by_cases h‚ÇÅf‚ÇÇ : meromorphicOrderAt f‚ÇÇ x = ‚ä§
  ¬∑ rw [meromorphicOrderAt_congr]
    filter_upwards [meromorphicOrderAt_eq_top_iff.1 h‚ÇÅf‚ÇÇ]
    simp
  -- General case
  lift meromorphicOrderAt f‚ÇÇ x to ‚Ñ§ using h‚ÇÅf‚ÇÇ with n‚ÇÇ hn‚ÇÇ
  lift meromorphicOrderAt f‚ÇÅ x to ‚Ñ§ using h.ne_top with n‚ÇÅ hn‚ÇÅ
  obtain ‚ü®g‚ÇÅ, h‚ÇÅg‚ÇÅ, h‚ÇÇg‚ÇÅ, h‚ÇÉg‚ÇÅ‚ü© := (meromorphicOrderAt_eq_int_iff hf‚ÇÅ).1 hn‚ÇÅ.symm
  obtain ‚ü®g‚ÇÇ, h‚ÇÅg‚ÇÇ, h‚ÇÇg‚ÇÇ, h‚ÇÉg‚ÇÇ‚ü© := (meromorphicOrderAt_eq_int_iff hf‚ÇÇ).1 hn‚ÇÇ.symm
  rw [meromorphicOrderAt_eq_int_iff (hf‚ÇÅ.add hf‚ÇÇ)]
  refine ‚ü®g‚ÇÅ + (¬∑ - x) ^ (n‚ÇÇ - n‚ÇÅ) ‚Ä¢ g‚ÇÇ, ?_, ?_, ?_‚ü©
  ¬∑ apply h‚ÇÅg‚ÇÅ.add (AnalyticAt.smul _ h‚ÇÅg‚ÇÇ)
    apply AnalyticAt.zpow_nonneg (by fun_prop)
      (sub_nonneg.2 (le_of_lt (WithTop.coe_lt_coe.1 h)))
  ¬∑ simpa [zero_zpow _ <| sub_ne_zero.mpr (WithTop.coe_lt_coe.1 h).ne']
  ¬∑ filter_upwards [h‚ÇÉg‚ÇÅ, h‚ÇÉg‚ÇÇ, self_mem_nhdsWithin]
    simp_all [smul_add, ‚Üê smul_assoc, ‚Üê zpow_add', sub_ne_zero]

@[deprecated (since := "2025-05-22")]
alias MeromorphicAt.order_add_of_order_lt_order := meromorphicOrderAt_add_eq_left_of_lt

/--
Helper lemma for meromorphicOrderAt_add_of_ne.
-/
lemma meromorphicOrderAt_add_eq_right_of_lt (hf‚ÇÅ : MeromorphicAt f‚ÇÅ x)
    (h : meromorphicOrderAt f‚ÇÇ x < meromorphicOrderAt f‚ÇÅ x) :
    meromorphicOrderAt (f‚ÇÅ + f‚ÇÇ) x = meromorphicOrderAt f‚ÇÇ x := by
  rw [add_comm]
  exact meromorphicOrderAt_add_eq_left_of_lt hf‚ÇÅ h

/--
If two meromorphic functions have unequal orders, then the order of their sum is
exactly the minimum of the orders of the summands.
-/
theorem meromorphicOrderAt_add_of_ne
    (hf‚ÇÅ : MeromorphicAt f‚ÇÅ x) (hf‚ÇÇ : MeromorphicAt f‚ÇÇ x)
    (h : meromorphicOrderAt f‚ÇÅ x ‚â† meromorphicOrderAt f‚ÇÇ x) :
    meromorphicOrderAt (f‚ÇÅ + f‚ÇÇ) x = min (meromorphicOrderAt f‚ÇÅ x) (meromorphicOrderAt f‚ÇÇ x) := by
  rcases lt_or_lt_iff_ne.mpr h with h | h
  ¬∑ simpa [h.le] using meromorphicOrderAt_add_eq_left_of_lt hf‚ÇÇ h
  ¬∑ simpa [h.le] using meromorphicOrderAt_add_eq_right_of_lt hf‚ÇÅ h

@[deprecated (since := "2025-05-22")]
alias MeromorphicAt.order_add_of_order_ne := meromorphicOrderAt_add_of_ne

@[deprecated (since := "2025-04-27")]
alias MeromorphicAt.meromorphicOrderAt_add_of_unequal_order := meromorphicOrderAt_add_of_ne

/-!
## Level Sets of the Order Function
-/

namespace MeromorphicOn

variable {U : Set ùïú}

/-- The set where a meromorphic function has infinite order is clopen in its domain of meromorphy.
-/
theorem isClopen_setOf_meromorphicOrderAt_eq_top (hf : MeromorphicOn f U) :
    IsClopen { u : U | meromorphicOrderAt f u = ‚ä§ } := by
  constructor
  ¬∑ rw [‚Üê isOpen_compl_iff, isOpen_iff_forall_mem_open]
    intro z hz
    rcases (hf z.1 z.2).eventually_eq_zero_or_eventually_ne_zero with h | h
    ¬∑ -- Case: f is locally zero in a punctured neighborhood of z
      rw [‚Üê meromorphicOrderAt_eq_top_iff] at h
      tauto
    ¬∑ -- Case: f is locally nonzero in a punctured neighborhood of z
      obtain ‚ü®t', h‚ÇÅt', h‚ÇÇt', h‚ÇÉt'‚ü© := eventually_nhds_iff.1 (eventually_nhdsWithin_iff.1 h)
      use Subtype.val ‚Åª¬π' t'
      constructor
      ¬∑ intro w hw
        simp only [mem_compl_iff, mem_setOf_eq]
        by_cases h‚ÇÅw : w = z
        ¬∑ rwa [h‚ÇÅw]
        ¬∑ rw [meromorphicOrderAt_eq_top_iff, not_eventually]
          apply Filter.Eventually.frequently
          rw [eventually_nhdsWithin_iff, eventually_nhds_iff]
          use t' \ {z.1}, fun y h‚ÇÅy h‚ÇÇy ‚Ü¶ h‚ÇÅt' y h‚ÇÅy.1 h‚ÇÅy.2, h‚ÇÇt'.sdiff isClosed_singleton, hw,
            mem_singleton_iff.not.2 (Subtype.coe_ne_coe.mpr h‚ÇÅw)
      ¬∑ exact ‚ü®isOpen_induced h‚ÇÇt', h‚ÇÉt'‚ü©
  ¬∑ apply isOpen_iff_forall_mem_open.mpr
    intro z hz
    conv =>
      arg 1; intro; left; right; arg 1; intro
      rw [meromorphicOrderAt_eq_top_iff, eventually_nhdsWithin_iff, eventually_nhds_iff]
    simp only [mem_setOf_eq] at hz
    rw [meromorphicOrderAt_eq_top_iff, eventually_nhdsWithin_iff, eventually_nhds_iff] at hz
    obtain ‚ü®t', h‚ÇÅt', h‚ÇÇt', h‚ÇÉt'‚ü© := hz
    use Subtype.val ‚Åª¬π' t'
    simp only [mem_compl_iff, mem_singleton_iff, isOpen_induced h‚ÇÇt', mem_preimage,
      h‚ÇÉt', and_self, and_true]
    intro w hw
    simp only [mem_setOf_eq]
    -- Trivial case: w = z
    by_cases h‚ÇÅw : w = z
    ¬∑ rw [h‚ÇÅw]
      tauto
    -- Nontrivial case: w ‚â† z
    use t' \ {z.1}, fun y h‚ÇÅy _ ‚Ü¶ h‚ÇÅt' y (mem_of_mem_diff h‚ÇÅy) (mem_of_mem_inter_right h‚ÇÅy)
    constructor
    ¬∑ exact h‚ÇÇt'.sdiff isClosed_singleton
    ¬∑ apply (mem_diff w).1
      exact ‚ü®hw, mem_singleton_iff.not.1 (Subtype.coe_ne_coe.2 h‚ÇÅw)‚ü©

@[deprecated (since := "2025-04-27")]
alias isClopen_setOf_order_eq_top := isClopen_setOf_meromorphicOrderAt_eq_top

/-- On a connected set, there exists a point where a meromorphic function `f` has finite order iff
`f` has finite order at every point. -/
theorem exists_meromorphicOrderAt_ne_top_iff_forall (hf : MeromorphicOn f U) (hU : IsConnected U) :
    (‚àÉ u : U, meromorphicOrderAt f u ‚â† ‚ä§) ‚Üî (‚àÄ u : U, meromorphicOrderAt f u ‚â† ‚ä§) := by
  constructor
  ¬∑ intro h‚ÇÇf
    have := isPreconnected_iff_preconnectedSpace.1 hU.isPreconnected
    rcases isClopen_iff.1 hf.isClopen_setOf_meromorphicOrderAt_eq_top with h | h
    ¬∑ intro u
      have : u ‚àâ (‚àÖ : Set U) := by exact fun a => a
      rw [‚Üê h] at this
      tauto
    ¬∑ obtain ‚ü®u, hU‚ü© := h‚ÇÇf
      have : u ‚àà univ := by trivial
      rw [‚Üê h] at this
      tauto
  ¬∑ intro h‚ÇÇf
    obtain ‚ü®v, hv‚ü© := hU.nonempty
    use ‚ü®v, hv‚ü©, h‚ÇÇf ‚ü®v, hv‚ü©

@[deprecated (since := "2025-04-27")]
alias exists_order_ne_top_iff_forall := exists_meromorphicOrderAt_ne_top_iff_forall

/-- On a preconnected set, a meromorphic function has finite order at one point if it has finite
order at another point. -/
theorem meromorphicOrderAt_ne_top_of_isPreconnected (hf : MeromorphicOn f U) {y : ùïú}
    (hU : IsPreconnected U) (h‚ÇÅx : x ‚àà U) (hy : y ‚àà U) (h‚ÇÇx : meromorphicOrderAt f x ‚â† ‚ä§) :
    meromorphicOrderAt f y ‚â† ‚ä§ :=
  (hf.exists_meromorphicOrderAt_ne_top_iff_forall ‚ü®nonempty_of_mem h‚ÇÅx, hU‚ü©).1
    (by use ‚ü®x, h‚ÇÅx‚ü©) ‚ü®y, hy‚ü©

@[deprecated (since := "2025-04-27")]
alias order_ne_top_of_isPreconnected := meromorphicOrderAt_ne_top_of_isPreconnected

/-- If a function is meromorphic on a set `U`, then for each point in `U`, it is analytic at nearby
points in `U`. When the target space is complete, this can be strengthened to analyticity at all
nearby points, see `MeromorphicAt.eventually_analyticAt`. -/
theorem eventually_analyticAt (h : MeromorphicOn f U) (hx : x ‚àà U) :
    ‚àÄ·∂† y in ùìù[U \ {x}] x, AnalyticAt ùïú f y := by
  /- At neighboring points in `U`, the function `f` is both meromorphic (by meromorphicity on `U`)
  and continuous (thanks to the formula for a meromorphic function around the point `x`), so it is
  analytic. -/
  have : ‚àÄ·∂† y in ùìù[U \ {x}] x, ContinuousAt f y := by
    have : U \ {x} ‚äÜ {x}·∂ú := by simp
    exact nhdsWithin_mono _ this (h x hx).eventually_continuousAt
  filter_upwards [this, self_mem_nhdsWithin] with y hy h'y
  exact (h y h'y.1).analyticAt hy

theorem eventually_analyticAt_or_mem_compl (h : MeromorphicOn f U) (hx : x ‚àà U) :
    ‚àÄ·∂† y in ùìù[‚â†] x, AnalyticAt ùïú f y ‚à® y ‚àà U·∂ú := by
  have : {x}·∂ú = (U \ {x}) ‚à™ U·∂ú := by aesop (add simp Classical.em)
  rw [this, nhdsWithin_union]
  simp only [mem_compl_iff, eventually_sup]
  refine ‚ü®?_, ?_‚ü©
  ¬∑ filter_upwards [h.eventually_analyticAt hx] with y hy using Or.inl hy
  ¬∑ filter_upwards [self_mem_nhdsWithin] with y hy using Or.inr hy

/-- Meromorphic functions on `U` are analytic on `U`, outside of a discrete subset. -/
theorem analyticAt_mem_codiscreteWithin (hf : MeromorphicOn f U) :
    { x | AnalyticAt ùïú f x } ‚àà Filter.codiscreteWithin U := by
  rw [mem_codiscreteWithin]
  intro x hx
  rw [Filter.disjoint_principal_right, ‚Üê Filter.eventually_mem_set]
  filter_upwards [hf.eventually_analyticAt_or_mem_compl hx] with y hy
  simp
  tauto

/-- The set where a meromorphic function has zero or infinite
order is codiscrete within its domain of meromorphicity. -/
theorem codiscrete_setOf_meromorphicOrderAt_eq_zero_or_top (hf : MeromorphicOn f U) :
    {u : U | meromorphicOrderAt f u = 0 ‚à® meromorphicOrderAt f u = ‚ä§} ‚àà Filter.codiscrete U := by
  rw [mem_codiscrete_subtype_iff_mem_codiscreteWithin, mem_codiscreteWithin]
  intro x hx
  rw [Filter.disjoint_principal_right]
  rcases (hf x hx).eventually_eq_zero_or_eventually_ne_zero with h‚ÇÅf | h‚ÇÅf
  ¬∑ filter_upwards [eventually_eventually_nhdsWithin.2 h‚ÇÅf] with a h‚ÇÅa
    suffices ‚àÄ·∂† (z : ùïú) in ùìù[‚â†] a, f z = 0 by
      simp +contextual [meromorphicOrderAt_eq_top_iff, h‚ÇÅa, this]
    obtain rfl | hax := eq_or_ne a x
    ¬∑ exact h‚ÇÅa
    rw [eventually_nhdsWithin_iff, eventually_nhds_iff] at h‚ÇÅa ‚ä¢
    obtain ‚ü®t, h‚ÇÅt, h‚ÇÇt, h‚ÇÉt‚ü© := h‚ÇÅa
    use t \ {x}, fun y h‚ÇÅy _ ‚Ü¶ h‚ÇÅt y h‚ÇÅy.1 h‚ÇÅy.2
    exact ‚ü®h‚ÇÇt.sdiff isClosed_singleton, Set.mem_diff_of_mem h‚ÇÉt hax‚ü©
  ¬∑ filter_upwards [hf.eventually_analyticAt_or_mem_compl hx, h‚ÇÅf] with a h‚ÇÅa h'‚ÇÅa
    simp only [mem_compl_iff, mem_diff, mem_image, mem_setOf_eq, Subtype.exists, exists_and_right,
      exists_eq_right, not_exists, not_or, not_and, not_forall, Decidable.not_not]
    rcases h‚ÇÅa with h' | h'
    ¬∑ simp +contextual [h'.meromorphicOrderAt_eq, h'.analyticOrderAt_eq_zero.2, h'‚ÇÅa]
    ¬∑ exact fun ha ‚Ü¶ (h' ha).elim

@[deprecated (since := "2025-04-27")]
alias codiscrete_setOf_order_eq_zero_or_top := codiscrete_setOf_meromorphicOrderAt_eq_zero_or_top

end MeromorphicOn
