/-
Copyright (c) 2025 Moritz Doll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Moritz Doll
-/
import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.MeasureTheory.Function.ContinuousMapDense
import Mathlib.Analysis.Calculus.BumpFunction.SmoothApprox
import Mathlib.MeasureTheory.Function.UniformIntegrable


/-!

# Density of smooth compactly supported functions in `Lp`

-/


variable {ùïú ùïú' D E F G R V : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F]
variable
  [MeasurableSpace E]
  [FiniteDimensional ‚Ñù E]

open scoped Nat NNReal ContDiff
open SchwartzMap MeasureTheory
open Pointwise

variable {Œº : Measure E} [Œº.IsAddHaarMeasure]

variable [OpensMeasurableSpace E] in
theorem HasCompactSupport.memLp_of_continuous {p : ENNReal} {f : E ‚Üí F} (h‚ÇÅ : HasCompactSupport f)
    (h‚ÇÇ : Continuous f) : MemLp f p Œº := by
  obtain ‚ü®x‚ÇÄ, hx‚ÇÄ‚ü© := h‚ÇÇ.norm.exists_forall_ge_of_hasCompactSupport h‚ÇÅ.norm
  apply h‚ÇÅ.memLp_of_bound h‚ÇÇ.aestronglyMeasurable ‚Äñf x‚ÇÄ‚Äñ
  apply ae_of_all
  exact hx‚ÇÄ

variable [CompleteSpace F] [BorelSpace E]

variable [NormedSpace ‚Ñù F]

theorem exist_eLpNorm‚ÇÅ {p : ENNReal} (hp‚ÇÇ : 1 ‚â§ p) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {f : E ‚Üí F}
    (h‚ÇÅ : HasCompactSupport f) (h‚ÇÇ : Continuous f) (h‚ÇÉ : MemLp f p Œº) :
    ‚àÉ (g : E ‚Üí F), HasCompactSupport g ‚àß ContDiff ‚Ñù ‚àû g ‚àß
      g.support ‚äÜ Metric.cthickening 1 (tsupport f) ‚àß ‚àÄ x, dist (g x) (f x) ‚â§ Œµ := by
  have := h‚ÇÅ.uniformContinuous_of_continuous h‚ÇÇ
  rw [Metric.uniformContinuous_iff] at this
  rcases this Œµ hŒµ with ‚ü®Œ¥', hŒ¥', h‚ü©
  set Œ¥ := min Œ¥' 1
  have hŒ¥‚ÇÅ : 0 < Œ¥ := by positivity
  have hŒ¥‚ÇÇ : Œ¥ ‚â§ 1 := inf_le_right
  set phi : ContDiffBump (0 : E) := ‚ü®Œ¥ / 2, Œ¥, half_pos hŒ¥‚ÇÅ, half_lt_self hŒ¥‚ÇÅ‚ü©
  set g' := MeasureTheory.convolution (phi.normed Œº) f (ContinuousLinearMap.lsmul ‚Ñù ‚Ñù) Œº
  have hg'‚ÇÅ : ContDiff ‚Ñù ‚àû g' :=
    phi.hasCompactSupport_normed.contDiff_convolution_left _ phi.contDiff_normed
      (h‚ÇÉ.locallyIntegrable hp‚ÇÇ)
  have hg'‚ÇÇ : HasCompactSupport g' := phi.hasCompactSupport_normed.convolution _ h‚ÇÅ
  refine ‚ü®g', hg'‚ÇÇ, hg'‚ÇÅ, ?_, fun x ‚Ü¶ ?_‚ü©
  ¬∑ grw [MeasureTheory.support_convolution_subset, ContDiffBump.support_normed_eq, ball_add,
      zero_vadd, Metric.thickening_mono hŒ¥‚ÇÇ, Metric.thickening_subset_cthickening,
      Metric.cthickening_subset_of_subset]
    exact subset_tsupport f
  apply ContDiffBump.dist_normed_convolution_le h‚ÇÉ.1
  intro x‚ÇÄ hx‚ÇÄ
  exact (h (lt_of_lt_of_le hx‚ÇÄ inf_le_left)).le

theorem exist_eLpNorm‚ÇÇ {p : ENNReal} (hp : p ‚â† ‚ä§) (hp‚ÇÇ : 1 ‚â§ p) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {f : E ‚Üí F}
    (h‚ÇÅ : HasCompactSupport f) (h‚ÇÇ : Continuous f) (h‚ÇÉ : MemLp f p Œº) :
    ‚àÉ (g : E ‚Üí F), HasCompactSupport g ‚àß ContDiff ‚Ñù ‚àû g ‚àß
    eLpNorm (g - f) p Œº ‚â§ ENNReal.ofReal Œµ := by
  by_cases hf : f = 0
  ¬∑ use 0
    simp [hf, HasCompactSupport.zero]
    exact contDiff_const
  set s := Metric.cthickening 1 (tsupport f)
  have hs‚ÇÅ : IsCompact s := h‚ÇÅ.cthickening
  have hs‚ÇÅ' : Œº s ‚â† ‚ä§ := hs‚ÇÅ.measure_lt_top.ne
  have hs‚ÇÇ : 0 < (Œº s).toReal := by
    apply ENNReal.toReal_pos _ hs‚ÇÅ'
    apply (MeasureTheory.pos_mono (Metric.thickening_subset_cthickening _ _) _).ne'
    refine Metric.isOpen_thickening.measure_pos Œº ?_
    rw [Metric.thickening_nonempty_iff]
    refine ‚ü®zero_lt_one, ?_‚ü©
    rw [‚Üê tsupport_eq_empty_iff] at hf
    exact Set.nonempty_iff_ne_empty.mpr hf
  set Œµ' := Œµ * (Œº s).toReal ^ (- p.toReal‚Åª¬π)
  have hŒµ' : 0 < Œµ' := by positivity
  have hŒµ‚ÇÇ : ENNReal.ofReal Œµ' * Œº s ^ (1 / p.toReal) ‚â§ ENNReal.ofReal Œµ := by
    have : Œº s ^ (1 / p.toReal) ‚â† ‚ä§ := by simp [hs‚ÇÅ']
    rw [‚Üê ENNReal.ofReal_toReal this, ‚Üê ENNReal.ofReal_mul hŒµ'.le]
    refine ENNReal.ofReal_le_ofReal_iff'.mpr ?_
    left
    unfold Œµ'
    rw [‚Üê ENNReal.toReal_rpow]
    move_mul [Œµ]
    rw [‚Üê Real.rpow_add, one_div, neg_add_cancel, Real.rpow_zero, one_mul]
    exact hs‚ÇÇ
  obtain ‚ü®g, hg‚ÇÅ, hg‚ÇÇ, hg‚ÇÉ, hg‚ÇÑ‚ü© := exist_eLpNorm‚ÇÅ hp‚ÇÇ hŒµ' h‚ÇÅ h‚ÇÇ h‚ÇÉ
  refine ‚ü®g, hg‚ÇÅ, hg‚ÇÇ, ?_‚ü©
  have hs‚ÇÉ : s.indicator (g - f) = g - f := by
    rw [Set.indicator_eq_self]
    apply (Function.support_sub _ _).trans
    apply Set.union_subset hg‚ÇÉ
    simp only [Function.support_subset_iff, ne_eq, Metric.mem_cthickening_iff, ENNReal.ofReal_one]
    intro x hx
    rw [EMetric.infEdist_zero_of_mem (subset_tsupport _ hx)]
    exact zero_le_one
  grw [‚Üê hs‚ÇÉ]
  exact (eLpNorm_sub_le_of_dist_bdd Œº hp hs‚ÇÅ.measurableSet hŒµ'.le (fun x _ ‚Ü¶ hg‚ÇÑ x)).trans hŒµ‚ÇÇ

theorem exist_eLpNorm‚ÇÉ {p : ENNReal} (hp : p ‚â† ‚ä§) (hp‚ÇÇ : 1 ‚â§ p) {f : E ‚Üí F} (hf : MemLp f p Œº)
    {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ g, eLpNorm (f - g) p Œº ‚â§ ENNReal.ofReal Œµ ‚àß HasCompactSupport g ‚àß ContDiff ‚Ñù ‚àû g := by
  have hŒµ‚ÇÇ : 0 < Œµ/2 := by positivity
  have hŒµ‚ÇÇ' : 0 < ENNReal.ofReal (Œµ/2) := by positivity
  obtain ‚ü®g, hg‚ÇÅ, hg‚ÇÇ, hg‚ÇÉ, hg‚ÇÑ‚ü© := hf.exists_hasCompactSupport_eLpNorm_sub_le hp hŒµ‚ÇÇ'.ne'
  obtain ‚ü®g', hg'‚ÇÅ, hg'‚ÇÇ, hg'‚ÇÉ‚ü© := exist_eLpNorm‚ÇÇ hp hp‚ÇÇ hŒµ‚ÇÇ hg‚ÇÅ hg‚ÇÉ hg‚ÇÑ
  have hg'‚ÇÑ : MemLp g' p Œº := hg'‚ÇÅ.memLp_of_continuous hg'‚ÇÇ.continuous
  refine ‚ü®g', ?_, hg'‚ÇÅ, hg'‚ÇÇ‚ü©
  have : f - g' = (f - g) - (g' - g) := by simp
  grw [this, eLpNorm_sub_le (hf.aestronglyMeasurable.sub hg‚ÇÑ.aestronglyMeasurable)
    (hg'‚ÇÑ.aestronglyMeasurable.sub hg‚ÇÑ.aestronglyMeasurable) hp‚ÇÇ, hg‚ÇÇ, hg'‚ÇÉ]
  rw [‚Üê ENNReal.ofReal_add hŒµ‚ÇÇ.le hŒµ‚ÇÇ.le, add_halves]

theorem SchwartzMap.denseRange_toLpCLM {p : ENNReal} (hp : p ‚â† ‚ä§) [hp' : Fact (1 ‚â§ p)] :
    DenseRange (SchwartzMap.toLpCLM ‚Ñù F p Œº) := by
  intro f
  refine (mem_closure_iff_nhds_basis EMetric.nhds_basis_closed_eball).2 fun Œµ hŒµ ‚Ü¶ ?_
  by_cases hŒµ' : Œµ ‚â† ‚ä§
  ¬∑ obtain ‚ü®g, hg‚ÇÅ, hg‚ÇÇ, hg‚ÇÉ‚ü© := exist_eLpNorm‚ÇÉ hp hp'.out (Lp.memLp f)
      (ENNReal.toReal_pos hŒµ.ne' hŒµ')
    rw [ENNReal.ofReal_toReal hŒµ'] at hg‚ÇÅ
    use (hg‚ÇÇ.toSchwartzMap hg‚ÇÉ).toLp p Œº
    rw [EMetric.mem_closedBall']
    simp only [Set.mem_range, toLpCLM_apply, exists_apply_eq_apply,
      true_and]
    rw [Lp.edist_def]
    have : (f : E ‚Üí F) - ((hg‚ÇÇ.toSchwartzMap hg‚ÇÉ).toLp p Œº : E ‚Üí F) =·∂†[ae Œº] (f : E ‚Üí F) - g := by
      filter_upwards [(hg‚ÇÇ.toSchwartzMap hg‚ÇÉ).coeFn_toLp p Œº]
      simp
    rwa [eLpNorm_congr_ae this]
  simp at hŒµ'
  rw [hŒµ']
  use (0 : ùì¢(E, F)).toLp p Œº
  simp only [Set.mem_range, toLpCLM_apply, EMetric.closedBall_top, Set.mem_univ, and_true]
  use 0
