/-
Copyright (c) 2025 Moritz Doll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Moritz Doll, Anatole Dedecker
-/
import Mathlib.Analysis.Calculus.ContDiff.Bounds
import Mathlib.Analysis.Calculus.IteratedDeriv.Defs
import Mathlib.Analysis.SpecialFunctions.JapaneseBracket


/-! ### Functions of temperate growth -/

noncomputable section

open scoped Nat NNReal ContDiff

open Asymptotics

variable {ùïú ùïú' D E F G V : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

namespace Function

/-- A function is called of temperate growth if it is smooth and all iterated derivatives are
polynomially bounded. -/
def HasTemperateGrowth (f : E ‚Üí F) : Prop :=
  ContDiff ‚Ñù ‚àû f ‚àß ‚àÄ n : ‚Ñï, ‚àÉ (k : ‚Ñï) (C : ‚Ñù), ‚àÄ x, ‚ÄñiteratedFDeriv ‚Ñù n f x‚Äñ ‚â§ C * (1 + ‚Äñx‚Äñ) ^ k

/-- A function has temperate growth if and only if it is smooth and its `n`-th iterated
derivative is `O((1 + ‚Äñx‚Äñ) ^ k)` for some `k : ‚Ñï` (depending on `n`).

Note that the `O` here is with respect to the `‚ä§` filter, meaning that the bound holds everywhere.

TODO: when `E` is finite dimensional, this is equivalent to the derivatives being `O(‚Äñx‚Äñ ^ k)`
as `‚Äñx‚Äñ ‚Üí ‚àû`.
-/
theorem hasTemperateGrowth_iff_isBigO {f : E ‚Üí F} :
    f.HasTemperateGrowth ‚Üî ContDiff ‚Ñù ‚àû f ‚àß
      ‚àÄ n, ‚àÉ k, iteratedFDeriv ‚Ñù n f =O[‚ä§] (fun x ‚Ü¶ (1 + ‚Äñx‚Äñ) ^ k):= by
  simp_rw [Asymptotics.isBigO_top]
  congrm ContDiff ‚Ñù ‚àû f ‚àß (‚àÄ n, ‚àÉ k C, ‚àÄ x, _ ‚â§ C * ?_)
  rw [norm_pow, Real.norm_of_nonneg (by positivity)]

/-- If `f` as temperate growth, then its `n`-th iterated derivative is `O((1 + ‚Äñx‚Äñ) ^ k)` for
some `k : ‚Ñï` (depending on `n`).

Note that the `O` here is with respect to the `‚ä§` filter, meaning that the bound holds everywhere.
-/
theorem HasTemperateGrowth.isBigO {f : E ‚Üí F}
    (hf_temperate : f.HasTemperateGrowth) (n : ‚Ñï) :
    ‚àÉ k, iteratedFDeriv ‚Ñù n f =O[‚ä§] (fun x ‚Ü¶ (1 + ‚Äñx‚Äñ) ^ k) :=
  Function.hasTemperateGrowth_iff_isBigO.mp hf_temperate |>.2 n

/-- If `f` as temperate growth, then for any `N : ‚Ñï` one can find `k` such that *all* iterated
derivatives of `f` of order `‚â§ N` are `O((1 + ‚Äñx‚Äñ) ^ k)`.

Note that the `O` here is with respect to the `‚ä§` filter, meaning that the bound holds everywhere.
-/
theorem HasTemperateGrowth.isBigO_uniform {f : E ‚Üí F}
    (hf_temperate : f.HasTemperateGrowth) (N : ‚Ñï) :
    ‚àÉ k, ‚àÄ n ‚â§ N, iteratedFDeriv ‚Ñù n f =O[‚ä§] (fun x ‚Ü¶ (1 + ‚Äñx‚Äñ) ^ k) := by
  choose k hk using hf_temperate.isBigO
  use (Finset.range (N + 1)).sup k
  intro n hn
  refine (hk n).trans (isBigO_of_le _ fun x ‚Ü¶ ?_)
  rw [Real.norm_of_nonneg (by positivity), Real.norm_of_nonneg (by positivity)]
  gcongr
  ¬∑ simp
  ¬∑ exact Finset.le_sup (by simpa [‚Üê Finset.mem_range_succ_iff] using hn)

theorem HasTemperateGrowth.norm_iteratedFDeriv_le_uniform_aux {f : E ‚Üí F}
    (hf_temperate : f.HasTemperateGrowth) (n : ‚Ñï) :
    ‚àÉ (k : ‚Ñï) (C : ‚Ñù), 0 ‚â§ C ‚àß ‚àÄ N ‚â§ n, ‚àÄ x : E, ‚ÄñiteratedFDeriv ‚Ñù N f x‚Äñ ‚â§ C * (1 + ‚Äñx‚Äñ) ^ k := by
  rcases hf_temperate.isBigO_uniform n with ‚ü®k, hk‚ü©
  set F := fun x (N : Fin (n+1)) ‚Ü¶ iteratedFDeriv ‚Ñù N f x
  have : F =O[‚ä§] (fun x ‚Ü¶ (1 + ‚Äñx‚Äñ) ^ k) := by
    simp_rw [F, isBigO_pi, Fin.forall_iff, Nat.lt_succ]
    exact hk
  rcases this.exists_nonneg with ‚ü®C, C_nonneg, hC‚ü©
  simp (discharger := positivity) only [isBigOWith_top, Real.norm_of_nonneg,
    pi_norm_le_iff_of_nonneg, Fin.forall_iff, Nat.lt_succ] at hC
  exact ‚ü®k, C, C_nonneg, fun N hN x ‚Ü¶ hC x N hN‚ü©

lemma HasTemperateGrowth.of_fderiv {f : E ‚Üí F}
    (h'f : Function.HasTemperateGrowth (fderiv ‚Ñù f)) (hf : Differentiable ‚Ñù f) {k : ‚Ñï} {C : ‚Ñù}
    (h : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C * (1 + ‚Äñx‚Äñ) ^ k) :
    Function.HasTemperateGrowth f := by
  refine ‚ü®contDiff_succ_iff_fderiv.2 ‚ü®hf, by simp, h'f.1‚ü©, fun n ‚Ü¶ ?_‚ü©
  rcases n with rfl | m
  ¬∑ exact ‚ü®k, C, fun x ‚Ü¶ by simpa using h x‚ü©
  ¬∑ rcases h'f.2 m with ‚ü®k', C', h'‚ü©
    refine ‚ü®k', C', ?_‚ü©
    simpa [iteratedFDeriv_succ_eq_comp_right] using h'

lemma HasTemperateGrowth.zero :
    Function.HasTemperateGrowth (fun _ : E ‚Ü¶ (0 : F)) := by
  refine ‚ü®contDiff_const, fun n ‚Ü¶ ‚ü®0, 0, fun x ‚Ü¶ ?_‚ü©‚ü©
  simp only [iteratedFDeriv_zero_fun, Pi.zero_apply, norm_zero]
  positivity

lemma HasTemperateGrowth.const (c : F) :
    Function.HasTemperateGrowth (fun _ : E ‚Ü¶ c) :=
  .of_fderiv (by simpa using .zero) (differentiable_const c) (k := 0) (C := ‚Äñc‚Äñ) (fun x ‚Ü¶ by simp)

lemma _root_.ContinuousLinearMap.hasTemperateGrowth (f : E ‚ÜíL[‚Ñù] F) :
    Function.HasTemperateGrowth f := by
  apply Function.HasTemperateGrowth.of_fderiv ?_ f.differentiable (k := 1) (C := ‚Äñf‚Äñ) (fun x ‚Ü¶ ?_)
  ¬∑ have : fderiv ‚Ñù f = fun _ ‚Ü¶ f := by ext1 v; simp only [ContinuousLinearMap.fderiv]
    simpa [this] using .const _
  ¬∑ exact (f.le_opNorm x).trans (by simp [mul_add])

end Function

variable [NormedAddCommGroup D] [MeasurableSpace D]

namespace MeasureTheory.Measure

open MeasureTheory Module
open scoped ENNReal

/-- A measure `Œº` has temperate growth if there is an `n : ‚Ñï` such that `(1 + ‚Äñx‚Äñ) ^ (- n)` is
`Œº`-integrable. -/
class HasTemperateGrowth (Œº : Measure D) : Prop where
  exists_integrable : ‚àÉ (n : ‚Ñï), Integrable (fun x ‚Ü¶ (1 + ‚Äñx‚Äñ) ^ (- (n : ‚Ñù))) Œº

open Classical in
/-- An integer exponent `l` such that `(1 + ‚Äñx‚Äñ) ^ (-l)` is integrable if `Œº` has
temperate growth. -/
def integrablePower (Œº : Measure D) : ‚Ñï :=
  if h : Œº.HasTemperateGrowth then h.exists_integrable.choose else 0

lemma integrable_pow_neg_integrablePower
    (Œº : Measure D) [h : Œº.HasTemperateGrowth] :
    Integrable (fun x ‚Ü¶ (1 + ‚Äñx‚Äñ) ^ (- (Œº.integrablePower : ‚Ñù))) Œº := by
  simpa [Measure.integrablePower, h] using h.exists_integrable.choose_spec

instance IsFiniteMeasure.instHasTemperateGrowth {Œº : Measure D}
    [h : IsFiniteMeasure Œº] : Œº.HasTemperateGrowth := ‚ü®‚ü®0, by simp‚ü©‚ü©

variable [NormedSpace ‚Ñù D] [FiniteDimensional ‚Ñù D] [BorelSpace D] in
instance IsAddHaarMeasure.instHasTemperateGrowth {Œº : Measure D}
    [h : Œº.IsAddHaarMeasure] : Œº.HasTemperateGrowth :=
  ‚ü®‚ü®finrank ‚Ñù D + 1, by apply integrable_one_add_norm; norm_num‚ü©‚ü©

/-- Pointwise inequality to control `x ^ k * f` in terms of `1 / (1 + x) ^ l` if one controls both
`f` (with a bound `C‚ÇÅ`) and `x ^ (k + l) * f` (with a bound `C‚ÇÇ`). This will be used to check
integrability of `x ^ k * f x` when `f` is a Schwartz function, and to control explicitly its
integral in terms of suitable seminorms of `f`. -/
lemma _root_.pow_mul_le_of_le_of_pow_mul_le {C‚ÇÅ C‚ÇÇ : ‚Ñù} {k l : ‚Ñï} {x f : ‚Ñù} (hx : 0 ‚â§ x)
    (hf : 0 ‚â§ f) (h‚ÇÅ : f ‚â§ C‚ÇÅ) (h‚ÇÇ : x ^ (k + l) * f ‚â§ C‚ÇÇ) :
    x ^ k * f ‚â§ 2 ^ l * (C‚ÇÅ + C‚ÇÇ) * (1 + x) ^ (- (l : ‚Ñù)) := by
  have : 0 ‚â§ C‚ÇÇ := le_trans (by positivity) h‚ÇÇ
  have : 2 ^ l * (C‚ÇÅ + C‚ÇÇ) * (1 + x) ^ (- (l : ‚Ñù)) = ((1 + x) / 2) ^ (-(l : ‚Ñù)) * (C‚ÇÅ + C‚ÇÇ) := by
    rw [Real.div_rpow (by linarith) zero_le_two]
    simp [div_eq_inv_mul, ‚Üê Real.rpow_neg_one, ‚Üê Real.rpow_mul]
    ring
  rw [this]
  rcases le_total x 1 with h'x|h'x
  ¬∑ gcongr
    ¬∑ apply (pow_le_one‚ÇÄ hx h'x).trans
      apply Real.one_le_rpow_of_pos_of_le_one_of_nonpos
      ¬∑ linarith
      ¬∑ linarith
      ¬∑ simp
    ¬∑ linarith
  ¬∑ calc
    x ^ k * f = x ^ (-(l : ‚Ñù)) * (x ^ (k + l) * f) := by
      rw [‚Üê Real.rpow_natCast, ‚Üê Real.rpow_natCast, ‚Üê mul_assoc, ‚Üê Real.rpow_add (by linarith)]
      simp
    _ ‚â§ ((1 + x) / 2) ^ (-(l : ‚Ñù)) * (C‚ÇÅ + C‚ÇÇ) := by
      apply mul_le_mul _ _ (by positivity) (by positivity)
      ¬∑ exact Real.rpow_le_rpow_of_nonpos (by linarith) (by linarith) (by simp)
      ¬∑ exact h‚ÇÇ.trans (by linarith)

variable [BorelSpace D] [SecondCountableTopology D] in
/-- Given a function such that `f` and `x ^ (k + l) * f` are bounded for a suitable `l`, then
`x ^ k * f` is integrable. The bounds are not relevant for the integrability conclusion, but they
are relevant for bounding the integral in `integral_pow_mul_le_of_le_of_pow_mul_le`. We formulate
the two lemmas with the same set of assumptions for ease of applications. -/
-- We redeclare `E` here to avoid the `NormedSpace ‚Ñù E` typeclass available throughout this file.
lemma _root_.integrable_of_le_of_pow_mul_le
    {E : Type*} [NormedAddCommGroup E]
    {Œº : Measure D} [Œº.HasTemperateGrowth] {f : D ‚Üí E} {C‚ÇÅ C‚ÇÇ : ‚Ñù} {k : ‚Ñï}
    (hf : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C‚ÇÅ) (h'f : ‚àÄ x, ‚Äñx‚Äñ ^ (k + Œº.integrablePower) * ‚Äñf x‚Äñ ‚â§ C‚ÇÇ)
    (h''f : AEStronglyMeasurable f Œº) :
    Integrable (fun x ‚Ü¶ ‚Äñx‚Äñ ^ k * ‚Äñf x‚Äñ) Œº := by
  apply ((integrable_pow_neg_integrablePower Œº).const_mul (2 ^ Œº.integrablePower * (C‚ÇÅ + C‚ÇÇ))).mono'
  ¬∑ exact AEStronglyMeasurable.mul (aestronglyMeasurable_id.norm.pow _) h''f.norm
  ¬∑ filter_upwards with v
    simp only [norm_mul, norm_pow, norm_norm]
    apply pow_mul_le_of_le_of_pow_mul_le (norm_nonneg _) (norm_nonneg _) (hf v) (h'f v)

/-- Given a function such that `f` and `x ^ (k + l) * f` are bounded for a suitable `l`, then
one can bound explicitly the integral of `x ^ k * f`. -/
-- We redeclare `E` here to avoid the `NormedSpace ‚Ñù E` typeclass available throughout this file.
lemma _root_.integral_pow_mul_le_of_le_of_pow_mul_le
    {E : Type*} [NormedAddCommGroup E]
    {Œº : Measure D} [Œº.HasTemperateGrowth] {f : D ‚Üí E} {C‚ÇÅ C‚ÇÇ : ‚Ñù} {k : ‚Ñï}
    (hf : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C‚ÇÅ) (h'f : ‚àÄ x, ‚Äñx‚Äñ ^ (k + Œº.integrablePower) * ‚Äñf x‚Äñ ‚â§ C‚ÇÇ) :
    ‚à´ x, ‚Äñx‚Äñ ^ k * ‚Äñf x‚Äñ ‚àÇŒº ‚â§ 2 ^ Œº.integrablePower *
      (‚à´ x, (1 + ‚Äñx‚Äñ) ^ (- (Œº.integrablePower : ‚Ñù)) ‚àÇŒº) * (C‚ÇÅ + C‚ÇÇ) := by
  rw [‚Üê integral_const_mul, ‚Üê integral_mul_const]
  apply integral_mono_of_nonneg
  ¬∑ filter_upwards with v using by positivity
  ¬∑ exact ((integrable_pow_neg_integrablePower Œº).const_mul _).mul_const _
  filter_upwards with v
  exact (pow_mul_le_of_le_of_pow_mul_le (norm_nonneg _) (norm_nonneg _) (hf v) (h'f v)).trans
    (le_of_eq (by ring))

/-- For any `HasTemperateGrowth` measure and `p`, there exists an integer power `k` such that
`(1 + ‚Äñx‚Äñ) ^ (-k)` is in `L^p`. -/
theorem HasTemperateGrowth.exists_eLpNorm_lt_top (p : ‚Ñù‚â•0‚àû)
    {Œº : Measure D} (hŒº : Œº.HasTemperateGrowth) :
    ‚àÉ k : ‚Ñï, eLpNorm (fun x ‚Ü¶ (1 + ‚Äñx‚Äñ) ^ (-k : ‚Ñù)) p Œº < ‚ä§ := by
  cases p with
  | top => exact ‚ü®0, eLpNormEssSup_lt_top_of_ae_bound (C := 1) (by simp)‚ü©
  | coe p =>
    cases eq_or_ne (p : ‚Ñù‚â•0‚àû) 0 with
    | inl hp => exact ‚ü®0, by simp [hp]‚ü©
    | inr hp =>
      have h_one_add (x : D) : 0 < 1 + ‚Äñx‚Äñ := lt_add_of_pos_of_le zero_lt_one (norm_nonneg x)
      have hp_pos : 0 < (p : ‚Ñù) := by simpa [zero_lt_iff] using hp
      rcases hŒº.exists_integrable with ‚ü®l, hl‚ü©
      let k := ‚åà(l / p : ‚Ñù)‚åâ‚Çä
      have hlk : l ‚â§ k * (p : ‚Ñù) := by simpa [div_le_iff‚ÇÄ hp_pos] using Nat.le_ceil (l / p : ‚Ñù)
      use k
      suffices HasFiniteIntegral (fun x ‚Ü¶ ((1 + ‚Äñx‚Äñ) ^ (-(k * p) : ‚Ñù))) Œº by
        rw [hasFiniteIntegral_iff_enorm] at this
        rw [eLpNorm_lt_top_iff_lintegral_rpow_enorm_lt_top hp ENNReal.coe_ne_top]
        simp only [ENNReal.coe_toReal]
        refine Eq.subst (motive := (‚à´‚Åª x, ¬∑ x ‚àÇŒº < ‚ä§)) (funext fun x ‚Ü¶ ?_) this
        rw [‚Üê neg_mul, Real.rpow_mul (h_one_add x).le]
        exact Real.enorm_rpow_of_nonneg (by positivity) NNReal.zero_le_coe
      refine hl.hasFiniteIntegral.mono' (ae_of_all Œº fun x ‚Ü¶ ?_)
      rw [Real.norm_of_nonneg (Real.rpow_nonneg (h_one_add x).le _)]
      gcongr
      simp

end MeasureTheory.Measure
