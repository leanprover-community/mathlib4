/-
Copyright (c) 2024 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.Analysis.Fourier.FourierTransformDeriv

/-!
# Fourier transform on Schwartz functions

This file will construct the Fourier transform as a continuous linear map acting on Schwartz
functions.

For now, it only contains the fact that the Fourier transform of a Schwartz function is
differentiable, with an explicit derivative given by a Fourier transform. See
`SchwartzMap.hasFDerivAt_fourier`.
-/

open Real Complex TopologicalSpace SchwartzMap MeasureTheory MeasureTheory.Measure VectorFourier

noncomputable section

variable {D : Type*} [NormedAddCommGroup D] [NormedSpace ‚Ñù D]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {V : Type*} [NormedAddCommGroup V] [NormedSpace ‚ÑÇ V]
  (L : D ‚ÜíL[‚Ñù] E ‚ÜíL[‚Ñù] ‚Ñù)

/-- Multiplication by a linear map on Schwartz space: for `f : D ‚Üí V` a Schwartz function and `L` a
bilinear map from `D √ó E` to `‚Ñù`, we define a new Schwartz function on `D` taking values in the
space of linear maps from `E` to `V`, given by
`(VectorFourier.mul_L_schwartz L f) (v) = -(2 * œÄ * I) ‚Ä¢ L (v, ‚¨ù) ‚Ä¢ f v`.
The point of this definition is that the derivative of the Fourier transform of `f` is the
Fourier transform of `VectorFourier.mul_L_schwartz L f`. -/
def VectorFourier.mul_L_schwartz : ùì¢(D, V) ‚ÜíL[‚Ñù] ùì¢(D, E ‚ÜíL[‚Ñù] V) :=
  -(2 * œÄ * I) ‚Ä¢ (bilinLeftCLM (ContinuousLinearMap.smulRightL ‚Ñù E V).flip L.hasTemperateGrowth)

@[simp]
lemma VectorFourier.mul_L_schwartz_apply (f : ùì¢(D, V)) (d : D) :
    VectorFourier.mul_L_schwartz L f d = -(2 * œÄ * I) ‚Ä¢ (L d).smulRight (f d) := rfl

attribute [local instance 200] secondCountableTopologyEither_of_left

/-- The Fourier transform of a Schwartz map `f` has a Fr√©chet derivative (everywhere in its domain)
and its derivative is the Fourier transform of the Schwartz map `mul_L_schwartz L f`. -/
theorem SchwartzMap.hasFDerivAt_fourier [CompleteSpace V] [MeasurableSpace D] [BorelSpace D]
    {Œº : Measure D} [FiniteDimensional ‚Ñù D] [IsAddHaarMeasure Œº] (f : ùì¢(D, V)) (w : E) :
    HasFDerivAt (fourierIntegral fourierChar Œº L.toLinearMap‚ÇÇ f)
      (fourierIntegral fourierChar Œº L.toLinearMap‚ÇÇ (mul_L_schwartz L f) w) w :=
  VectorFourier.hasFDerivAt_fourier L f.integrable
    (by simpa using f.integrable_pow_mul Œº 1) w
