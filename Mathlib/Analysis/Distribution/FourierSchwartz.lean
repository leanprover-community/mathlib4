/-
Copyright (c) 2024 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.Analysis.Fourier.FourierTransformDeriv
import Mathlib.Analysis.SpecialFunctions.JapaneseBracket

/-!
# Fourier transform on Schwartz functions

This file will construct the Fourier transform as a continuous linear map acting on Schwartz
functions.

For now, it only contains the fact that the Fourier transform of a Schwartz function is
differentiable, with an explicit derivative given by a Fourier transform. See
`SchwartzMap.hasFDerivAt_fourier`.
-/

open Real Complex MeasureTheory Filter TopologicalSpace SchwartzSpace SchwartzMap MeasureTheory
  MeasureTheory.Measure FiniteDimensional VectorFourier

noncomputable section

variable {D : Type*} [NormedAddCommGroup D] [NormedSpace ‚Ñù D]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {V : Type*} [NormedAddCommGroup V] [NormedSpace ‚ÑÇ V]
  (L : D ‚ÜíL[‚Ñù] E ‚ÜíL[‚Ñù] ‚Ñù)

/-- Multiplication by a linear map on Schwartz space: for `f : D ‚Üí V` a Schwartz function and `L` a
bilinear map from `D √ó E` to `‚Ñù`, we define a new Schwartz function on `D` taking values in the
space of linear maps from `E` to `V`, given by
`(VectorFourier.mul_L_schwartz L f) (v) = -(2 * œÄ * I) ‚Ä¢ L (v, ‚¨ù) ‚Ä¢ f v`.
The point of this definition is that the derivative of the Fourier transform of `f` is the
Fourier transform of `VectorFourier.mul_L_schwartz L f`. -/
def VectorFourier.mul_L_schwartz : ùì¢(D, V) ‚ÜíL[‚Ñù] ùì¢(D, E ‚ÜíL[‚Ñù] V) :=
  -(2 * œÄ * I) ‚Ä¢ (bilinLeftCLM (ContinuousLinearMap.smulRightL ‚Ñù E V).flip L.hasTemperateGrowth)

lemma VectorFourier.mul_L_schwartz_apply (f : ùì¢(D, V)) (d : D) :
    VectorFourier.mul_L_schwartz L f d = VectorFourier.mul_L L f d := rfl

lemma SchwartzMap.integrable_pow_mul [MeasurableSpace D] [BorelSpace D] [FiniteDimensional ‚Ñù D]
    (f : ùì¢(D, V)) {Œº : Measure D} (k : ‚Ñï) [IsAddHaarMeasure Œº] :
    Integrable (fun x ‚Ü¶ ‚Äñx‚Äñ ^ k * ‚Äñf x‚Äñ) Œº := by
  let l := finrank ‚Ñù D + 1 + k
  obtain ‚ü®C, C_nonneg, hC‚ü© : ‚àÉ C, 0 ‚â§ C ‚àß ‚àÄ x, (1 + ‚Äñx‚Äñ) ^ l * ‚Äñf x‚Äñ ‚â§ C := by
    let m : ‚Ñï √ó ‚Ñï := (l, 0)
    refine ‚ü®2 ^ m.1 * (Finset.Iic m).sup (fun m => SchwartzMap.seminorm ‚Ñù m.1 m.2) f, by positivity,
      fun x ‚Ü¶ ?_‚ü©
    simpa using f.one_add_le_sup_seminorm_apply (m := m) (k := l) (n := 0) (ùïú := ‚Ñù) le_rfl le_rfl x
  have : Integrable (fun x : D => C * (1 + ‚Äñx‚Äñ) ^ (-((finrank ‚Ñù D + 1 : ‚Ñï) : ‚Ñù))) Œº := by
    apply (integrable_one_add_norm ?_).const_mul
    exact Nat.cast_lt.mpr Nat.le.refl
  apply this.mono ((aestronglyMeasurable_id.norm.pow _).mul f.continuous.aestronglyMeasurable.norm)
    (eventually_of_forall (fun x ‚Ü¶ ?_))
  conv_rhs => rw [norm_of_nonneg (by positivity), rpow_neg (by positivity), ‚Üê div_eq_mul_inv]
  rw [le_div_iff' (by positivity)]
  simp only [id_eq, Pi.mul_apply, Pi.pow_apply, norm_mul, norm_pow, norm_norm, rpow_nat_cast]
  calc
    (1 + ‚Äñx‚Äñ) ^ (finrank ‚Ñù D + 1) * (‚Äñx‚Äñ ^ k * ‚Äñf x‚Äñ)
      ‚â§ (1 + ‚Äñx‚Äñ) ^ (finrank ‚Ñù D + 1) * ((1 + ‚Äñx‚Äñ) ^ k * ‚Äñf x‚Äñ) := by gcongr; simp
    _ = (1 + ‚Äñx‚Äñ) ^ (finrank ‚Ñù D + 1 + k) * ‚Äñf x‚Äñ := by simp only [pow_add, mul_assoc]
    _ ‚â§ C := hC x

lemma SchwartzMap.integrable [MeasurableSpace D] [BorelSpace D] [FiniteDimensional ‚Ñù D]
    (f : ùì¢(D, V)) {Œº : Measure D} [IsAddHaarMeasure Œº] :
    Integrable f Œº :=
  (f.integrable_pow_mul (Œº := Œº) 0).mono f.continuous.aestronglyMeasurable
    (eventually_of_forall (fun _ ‚Ü¶ by simp))

attribute [local instance 200] secondCountableTopologyEither_of_left

/-- The Fourier transform of a Schwartz map `f` has a Fr√©chet derivative (everywhere in its domain)
and its derivative is the Fourier transform of the Schwartz map `mul_L_schwartz L f`. -/
theorem SchwartzMap.hasFDerivAt_fourier [CompleteSpace V] [MeasurableSpace D] [BorelSpace D]
    {Œº : Measure D} [FiniteDimensional ‚Ñù D] [IsAddHaarMeasure Œº] (f : ùì¢(D, V)) (w : E) :
    HasFDerivAt (fourierIntegral fourierChar Œº L.toLinearMap‚ÇÇ f)
      (fourierIntegral fourierChar Œº L.toLinearMap‚ÇÇ (mul_L_schwartz L f) w) w :=
  VectorFourier.hasFDerivAt_fourier L f.integrable
    (by simpa using f.integrable_pow_mul (Œº := Œº) 1) w
