/-
Copyright (c) 2025 Michael Stoll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Stoll
-/
import Mathlib.Analysis.SpecialFunctions.Pow.Real

/-!
# Equivalence of real-valued absolute values

Two absolute values `v‚ÇÅ, v‚ÇÇ : AbsoluteValue R ‚Ñù` are *equivalent* if there exists a
positive real number `c` such that `v‚ÇÅ x ^ c = v‚ÇÇ x` for all `x : R`.
-/

open scoped Topology

namespace AbsoluteValue

variable {R : Type*} [Semiring R]

/-- Two absolute values `f, g` on `R` with values in `‚Ñù` are *equivalent* if there exists
a positive real constant `c` such that for all `x : R`, `(f x)^c = g x`. -/
def IsEquiv (f g : AbsoluteValue R ‚Ñù) : Prop :=
  ‚àÉ c : ‚Ñù, 0 < c ‚àß (f ¬∑ ^ c) = g

/-- Equivalence of absolute values is reflexive. -/
lemma isEquiv_refl (f : AbsoluteValue R ‚Ñù) : IsEquiv f f :=
  ‚ü®1, Real.zero_lt_one, funext fun x ‚Ü¶ Real.rpow_one (f x)‚ü©

/-- Equivalence of absolute values is symmetric. -/
lemma isEquiv_symm {f g : AbsoluteValue R ‚Ñù} (hfg : IsEquiv f g) : IsEquiv g f := by
  rcases hfg with ‚ü®c, hcpos, h‚ü©
  refine ‚ü®1 / c, one_div_pos.mpr hcpos, ?_‚ü©
  simp [‚Üê h, Real.rpow_rpow_inv (apply_nonneg f _) (ne_of_lt hcpos).symm]

/-- Equivalence of absolute values is transitive. -/
lemma isEquiv_trans {f g k : AbsoluteValue R ‚Ñù} (hfg : IsEquiv f g) (hgk : IsEquiv g k) :
    IsEquiv f k := by
  rcases hfg with ‚ü®c, hcPos, hfg‚ü©
  rcases hgk with ‚ü®d, hdPos, hgk‚ü©
  refine ‚ü®c * d, mul_pos hcPos hdPos, ?_‚ü©
  simp [‚Üê hgk, ‚Üê hfg, Real.rpow_mul (apply_nonneg f _)]

instance : Setoid (AbsoluteValue R ‚Ñù) where
  r := IsEquiv
  iseqv := {
    refl := isEquiv_refl
    symm := isEquiv_symm
    trans := isEquiv_trans
  }

/-- An absolute value is equivalent to the trivial iff it is trivial itself. -/
@[simp]
lemma eq_trivial_of_isEquiv_trivial [DecidablePred fun x : R ‚Ü¶ x = 0] [NoZeroDivisors R]
    (f : AbsoluteValue R ‚Ñù) :
    f ‚âà .trivial ‚Üî f = .trivial := by
  refine ‚ü®fun ‚ü®c, hc‚ÇÄ, hc‚ü© ‚Ü¶ ext fun x ‚Ü¶ ?_, fun H ‚Ü¶ H ‚ñ∏ isEquiv_refl f‚ü©
  apply_fun (¬∑ x) at hc
  rcases eq_or_ne x 0 with rfl | hx
  ¬∑ simp
  ¬∑ simp only [ne_eq, hx, not_false_eq_true, trivial_apply] at hc ‚ä¢
    exact (Real.rpow_left_inj (f.nonneg x) zero_le_one hc‚ÇÄ.ne').mp <| (Real.one_rpow c).symm ‚ñ∏ hc

variable {F S : Type*} [Field F] [Field S] [LinearOrder S] [IsStrictOrderedRing S]
  {v w : AbsoluteValue F S}

open Filter in
theorem abv_lt_one_iff_of_abv_lt_one_imp [Archimedean S] [TopologicalSpace S] [OrderTopology S]
    (hv : v.IsNontrivial) (h : ‚àÄ x, v x < 1 ‚Üí w x < 1) {a : F} :
    v a < 1 ‚Üî w a < 1:= by
  let ‚ü®x‚ÇÄ, hx‚ÇÄ‚ü© := hv.exists_abv_lt_one
  refine ‚ü®h a, fun hw ‚Ü¶ ?_‚ü©
  by_contra! hv
  have (n : ‚Ñï) : w x‚ÇÄ < w a ^ n := by
    rw [‚Üê one_mul (_ ^ _), ‚Üê mul_inv_lt_iff‚ÇÄ (pow_pos (pos_of_abv_pos w (by linarith)) _),
      ‚Üê map_pow, ‚Üê map_inv‚ÇÄ, ‚Üê map_mul]
    apply h
    rw [map_mul, map_inv‚ÇÄ, map_pow, mul_inv_lt_iff‚ÇÄ (pow_pos (by linarith) _), one_mul]
    exact lt_of_lt_of_le hx‚ÇÄ.2 <| one_le_pow‚ÇÄ hv
  have hcontr : atTop.Tendsto (fun (_ : ‚Ñï) ‚Ü¶ w x‚ÇÄ) (ùìù 0) := by
    let hwn := tendsto_pow_atTop_nhds_zero_iff.2 <| by convert abs_eq_self.2 (w.nonneg _) ‚ñ∏ hw
    exact tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds hwn
      (Eventually.of_forall fun _ ‚Ü¶ w.nonneg x‚ÇÄ) (by simpa using ‚ü®1, fun n _ ‚Ü¶ le_of_lt (this n)‚ü©)
  linarith [tendsto_nhds_unique hcontr tendsto_const_nhds, w.pos hx‚ÇÄ.1]

end AbsoluteValue

namespace Real.AbsoluteValue

variable {F : Type*} [Field F] {v w : AbsoluteValue F ‚Ñù}

/--
If $v$ and $w$ are two real absolute values on a field $F$, $v$ is non-trivial, and $v(x) < 1$ if
and only if $w(x) < 1$, then $\frac{\log (v(a))}{\log (w(a))}$ is constant for all $a ‚àà F$
with $1 < v(a)$.
-/
theorem log_div_image_eq_singleton_of_abv_lt_one_iff (hv : v.IsNontrivial)
    (h : ‚àÄ x, v x < 1 ‚Üî w x < 1) :
    let f : F ‚Üí ‚Ñù := fun a ‚Ü¶ Real.log (v a) / Real.log (w a)
    ‚àÉ (a : F) (_ : 1 < v a), ‚àÄ (b : F) (_ : 1 < v b), f b = f a := by
  obtain ‚ü®a, ha‚ü© := hv.exists_abv_gt_one
  refine ‚ü®a, ha, fun b hb‚ÇÅ ‚Ü¶ ?_‚ü©
  by_contra! hb‚ÇÇ
  wlog h_lt : Real.log (v b) / Real.log (w b) < Real.log (v a) / Real.log (w a) generalizing a b
  ¬∑ exact this b hb‚ÇÅ a ha hb‚ÇÇ.symm <| lt_of_le_of_ne (not_lt.1 h_lt) hb‚ÇÇ.symm
  have : Real.log (v b) / Real.log (v a) < Real.log (w b) / Real.log (w a) := by
    have hwa := Real.log_pos <| (v.one_lt_iff_of_lt_one_iff h _).1 ha
    have hwb := Real.log_pos <| (v.one_lt_iff_of_lt_one_iff h _).1 hb‚ÇÅ
    rwa [div_lt_div_iff‚ÇÄ (Real.log_pos ha) hwa, mul_comm (Real.log (w _)),
      ‚Üê div_lt_div_iff‚ÇÄ hwb hwa]
  let ‚ü®q, hq‚ü© := exists_rat_btwn this
  rw [‚Üê Rat.num_div_den q, Rat.cast_div, Rat.cast_intCast, Rat.cast_natCast] at hq
  have h‚ÇÄ : v (b ^ q.den / a ^ q.num) < 1 := by
    have := hq.1
    rwa [div_lt_div_iff‚ÇÄ (Real.log_pos ha) (by simp only [Nat.cast_pos, q.den_pos]), mul_comm,
      ‚Üê Real.log_pow, ‚Üê Real.log_zpow, Real.log_lt_log_iff (pow_pos (by linarith) _)
      (zpow_pos (by linarith) _), ‚Üê div_lt_one (zpow_pos (by linarith) _),
      ‚Üê map_pow, ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at this
  have h‚ÇÅ : 1 < w (b ^ q.den / a ^ q.num) := by
    have hwa := (v.one_lt_iff_of_lt_one_iff h _).1 ha
    have := hq.2
    rwa [div_lt_div_iff‚ÇÄ (by simp only [Nat.cast_pos, q.den_pos]) (Real.log_pos hwa),
      mul_comm (Real.log (w _)), ‚Üê Real.log_pow, ‚Üê Real.log_zpow,
      Real.log_lt_log_iff (zpow_pos (by linarith) _)
      (pow_pos (by linarith [(v.one_lt_iff_of_lt_one_iff h _).1 hb‚ÇÅ]) _),
      ‚Üê one_lt_div (zpow_pos (by linarith) _), ‚Üê map_pow, ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at this
  exact not_lt_of_gt ((h _).1 h‚ÇÄ) h‚ÇÅ

theorem exists_rpow_of_abv_one_lt_iff {v w : AbsoluteValue F ‚Ñù} (hv : v.IsNontrivial)
    (h : ‚àÄ x, v x < 1 ‚Üî w x < 1) :
    ‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, 1 < v x ‚Üí w x ^ t = v x := by
  obtain ‚ü®a, ha, hlog‚ü© := log_div_image_eq_singleton_of_abv_lt_one_iff hv h
  refine ‚ü®Real.log (v a) / Real.log (w a),
    div_pos (Real.log_pos ha) (Real.log_pos ((v.one_lt_iff_of_lt_one_iff h a).1 ha)), fun b hb ‚Ü¶ ?_‚ü©
  simp_rw [‚Üê hlog b hb]
  have := (v.one_lt_iff_of_lt_one_iff h b).1 hb
  rw [div_eq_inv_mul, Real.rpow_mul (w.nonneg _), Real.rpow_inv_log (by linarith) (by linarith),
    Real.exp_one_rpow, Real.exp_log (by linarith)]

open Real in
/--
If $v$ and $w$ be two real absolute values on a field $F$, where $v$ is non-trivial, then $v$ and
$w$ are equivalent if and only if $v(x) < 1$ exactly when $w(x) < 1$.
-/
theorem isEquiv_iff_abv_lt_one_iff {v : AbsoluteValue F ‚Ñù} (w : AbsoluteValue F ‚Ñù)
    (hv : v.IsNontrivial) : w.IsEquiv v ‚Üî (‚àÄ x, v x < 1 ‚Üî w x < 1) := by
  refine ‚ü®fun ‚ü®t, ht, h‚ü© x ‚Ü¶ h ‚ñ∏ (Real.rpow_lt_one_iff' (w.nonneg x) ht), fun h ‚Ü¶ ?_‚ü©
  obtain ‚ü®t, ht, hsuff‚ü© := exists_rpow_of_abv_one_lt_iff hv h
  refine ‚ü®t, ht, funext fun x ‚Ü¶ ?_‚ü©
  by_cases h‚ÇÄ : v x = 0
  ¬∑ rw [(map_eq_zero v).1 h‚ÇÄ, map_zero, map_zero, zero_rpow (by linarith)]
  ¬∑ by_cases h‚ÇÅ : v x = 1
    ¬∑ rw [h‚ÇÅ, (v.eq_one_iff_of_lt_one_iff h x).1 h‚ÇÅ, one_rpow]
    ¬∑ by_cases h‚ÇÇ : 0 < v x ‚àß v x < 1
      ¬∑ rw [‚Üê inv_inj, ‚Üê map_inv‚ÇÄ v, ‚Üê hsuff _ (map_inv‚ÇÄ v _ ‚ñ∏ one_lt_inv_iff‚ÇÄ.2 h‚ÇÇ), map_inv‚ÇÄ,
          inv_rpow (w.nonneg _)]
      ¬∑ rw [‚Üê one_lt_inv_iff‚ÇÄ, ‚Üê map_inv‚ÇÄ, not_lt] at h‚ÇÇ
        rw [‚Üê ne_eq, ‚Üê inv_ne_one, ‚Üê map_inv‚ÇÄ] at h‚ÇÅ
        exact hsuff _ <| (v.inv_lt_one_iff.1 <| lt_of_le_of_ne h‚ÇÇ h‚ÇÅ).resolve_left
          ((map_ne_zero v).1 h‚ÇÄ)

/--
If $v$ and $w$ are inequivalent absolute values and $v$ is non-trivial, then we can find an $a ‚àà F$
such that $v(a) < 1$ while $1 ‚â§ w(a)$.
-/
theorem exists_abv_lt_one_abv_one_le_of_not_isEquiv {v w : AbsoluteValue F ‚Ñù} (hv : v.IsNontrivial)
    (h : ¬¨w.IsEquiv v) :
    ‚àÉ a : F, v a < 1 ‚àß 1 ‚â§ w a := by
  contrapose! h
  exact isEquiv_iff_abv_lt_one_iff _ hv |>.2 <| fun  _ ‚Ü¶ v.abv_lt_one_iff_of_abv_lt_one_imp hv h

/--
If $v$ and $w$ are two non-trivial and inequivalent absolute values then
we can find an $a ‚àà K$ such that $1 < v a$ while $w a < 1$.
-/
theorem exists_abv_one_lt_abv_lt_one_of_not_isEquiv {v w : AbsoluteValue F ‚Ñù} (hv : v.IsNontrivial)
    (hw : w.IsNontrivial) (h : ¬¨w.IsEquiv v) :
    ‚àÉ a : F, 1 < v a ‚àß w a < 1 := by
  let ‚ü®a, ha‚ü© := exists_abv_lt_one_abv_one_le_of_not_isEquiv hv h
  let ‚ü®b, hb‚ü© := exists_abv_lt_one_abv_one_le_of_not_isEquiv hw (mt v.isEquiv_symm h)
  exact ‚ü®b / a, by simpa using ‚ü®one_lt_div (w.pos_of_abv_pos v (by linarith)) |>.2 (by linarith),
    div_lt_one (by linarith) |>.2 (by linarith)‚ü©‚ü©

end Real.AbsoluteValue
