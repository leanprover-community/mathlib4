/-
Copyright (c) 2025 Michael Stoll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Stoll
-/
import Mathlib.Analysis.SpecialFunctions.Pow.Real
import Mathlib.Analysis.Normed.Ring.WithAbs

/-!
# Equivalence of real-valued absolute values

Two absolute values `v‚ÇÅ, v‚ÇÇ : AbsoluteValue R ‚Ñù` are *equivalent* if there exists a
positive real number `c` such that `v‚ÇÅ x ^ c = v‚ÇÇ x` for all `x : R`.
-/

open Filter

open scoped Topology

namespace AbsoluteValue

variable {R : Type*} [Semiring R]

/-- Two absolute values `f, g` on `R` with values in `‚Ñù` are *equivalent* if there exists
a positive real constant `c` such that for all `x : R`, `(f x)^c = g x`. -/
def IsEquiv (f g : AbsoluteValue R ‚Ñù) : Prop :=
  ‚àÉ c : ‚Ñù, 0 < c ‚àß (f ¬∑ ^ c) = g

/-- Equivalence of absolute values is reflexive. -/
lemma isEquiv_refl (f : AbsoluteValue R ‚Ñù) : IsEquiv f f :=
  ‚ü®1, Real.zero_lt_one, funext fun x ‚Ü¶ Real.rpow_one (f x)‚ü©

/-- Equivalence of absolute values is symmetric. -/
lemma isEquiv_symm {f g : AbsoluteValue R ‚Ñù} (hfg : IsEquiv f g) : IsEquiv g f := by
  rcases hfg with ‚ü®c, hcpos, h‚ü©
  refine ‚ü®1 / c, one_div_pos.mpr hcpos, ?_‚ü©
  simp [‚Üê h, Real.rpow_rpow_inv (apply_nonneg f _) (ne_of_lt hcpos).symm]

/-- Equivalence of absolute values is transitive. -/
lemma isEquiv_trans {f g k : AbsoluteValue R ‚Ñù} (hfg : IsEquiv f g) (hgk : IsEquiv g k) :
    IsEquiv f k := by
  rcases hfg with ‚ü®c, hcPos, hfg‚ü©
  rcases hgk with ‚ü®d, hdPos, hgk‚ü©
  refine ‚ü®c * d, mul_pos hcPos hdPos, ?_‚ü©
  simp [‚Üê hgk, ‚Üê hfg, Real.rpow_mul (apply_nonneg f _)]

instance : Setoid (AbsoluteValue R ‚Ñù) where
  r := IsEquiv
  iseqv := {
    refl := isEquiv_refl
    symm := isEquiv_symm
    trans := isEquiv_trans
  }

/-- An absolute value is equivalent to the trivial iff it is trivial itself. -/
@[simp]
lemma eq_trivial_of_isEquiv_trivial [DecidablePred fun x : R ‚Ü¶ x = 0] [NoZeroDivisors R]
    (f : AbsoluteValue R ‚Ñù) :
    f ‚âà .trivial ‚Üî f = .trivial := by
  refine ‚ü®fun ‚ü®c, hc‚ÇÄ, hc‚ü© ‚Ü¶ ext fun x ‚Ü¶ ?_, fun H ‚Ü¶ H ‚ñ∏ isEquiv_refl f‚ü©
  apply_fun (¬∑ x) at hc
  rcases eq_or_ne x 0 with rfl | hx
  ¬∑ simp
  ¬∑ simp only [ne_eq, hx, not_false_eq_true, trivial_apply] at hc ‚ä¢
    exact (Real.rpow_left_inj (f.nonneg x) zero_le_one hc‚ÇÄ.ne').mp <| (Real.one_rpow c).symm ‚ñ∏ hc

variable {F S : Type*} [Field F] [Field S] [LinearOrder S] [IsStrictOrderedRing S]
  {v w : AbsoluteValue F S}

open Filter in
theorem abv_lt_one_iff_of_abv_lt_one_imp [Archimedean S] [TopologicalSpace S] [OrderTopology S]
    (hv : v.IsNontrivial) (h : ‚àÄ x, v x < 1 ‚Üí w x < 1) {a : F} :
    v a < 1 ‚Üî w a < 1:= by
  let ‚ü®x‚ÇÄ, hx‚ÇÄ‚ü© := hv.exists_abv_lt_one
  refine ‚ü®h a, fun hw ‚Ü¶ ?_‚ü©
  by_contra! hv
  have (n : ‚Ñï) : w x‚ÇÄ < w a ^ n :=
    (mul_one_div_pow_lt_iff _ (abv_pos_of_abv_pos w (by linarith))).1 <|
      h _ ((mul_one_div_pow_lt_iff _ (by linarith)).2 (lt_of_lt_of_le hx‚ÇÄ.2 <| one_le_pow‚ÇÄ hv))
  have hcontr : atTop.Tendsto (fun (_ : ‚Ñï) ‚Ü¶ w x‚ÇÄ) (ùìù 0) := by
    let hwn := tendsto_pow_atTop_nhds_zero_iff.2 <| by convert abs_eq_self.2 (w.nonneg _) ‚ñ∏ hw
    exact tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds hwn
      (Eventually.of_forall fun _ ‚Ü¶ w.nonneg x‚ÇÄ) (by simpa using ‚ü®1, fun n _ ‚Ü¶ le_of_lt (this n)‚ü©)
  linarith [tendsto_nhds_unique hcontr tendsto_const_nhds, w.pos hx‚ÇÄ.1]

/--
If $v$ and $w$ are two real absolute values on a field $F$, $v$ is non-trivial, and $v(x) < 1$ if
and only if $w(x) < 1$, then $\frac{\log (v(a))}{\log (w(a))}$ is constant for all $a ‚àà F$
with $1 < v(a)$.
-/
theorem log_div_image_eq_singleton_of_abv_lt_one_iff {v w : AbsoluteValue F ‚Ñù} (hv : v.IsNontrivial)
    (h : ‚àÄ x, v x < 1 ‚Üî w x < 1) :
    let f : F ‚Üí ‚Ñù := fun a ‚Ü¶ Real.log (v a) / Real.log (w a)
    ‚àÉ (a : F) (_ : 1 < v a), ‚àÄ (b : F) (_ : 1 < v b), f b = f a := by
  obtain ‚ü®a, ha‚ü© := hv.exists_abv_gt_one
  refine ‚ü®a, ha, fun b hb‚ÇÅ ‚Ü¶ ?_‚ü©
  by_contra! hb‚ÇÇ
  wlog h_lt : Real.log (v b) / Real.log (w b) < Real.log (v a) / Real.log (w a) generalizing a b
  ¬∑ exact this b hb‚ÇÅ a ha hb‚ÇÇ.symm <| lt_of_le_of_ne (not_lt.1 h_lt) hb‚ÇÇ.symm
  have : Real.log (v b) / Real.log (v a) < Real.log (w b) / Real.log (w a) := by
    have hwa := Real.log_pos <| (one_lt_iff_of_lt_one_iff h _).1 ha
    have hwb := Real.log_pos <| (one_lt_iff_of_lt_one_iff h _).1 hb‚ÇÅ
    rwa [div_lt_div_iff‚ÇÄ (Real.log_pos ha) hwa, mul_comm (Real.log (w _)),
      ‚Üê div_lt_div_iff‚ÇÄ hwb hwa]
  let ‚ü®q, hq‚ü© := exists_rat_btwn this
  rw [‚Üê Rat.num_div_den q, Rat.cast_div, Rat.cast_intCast, Rat.cast_natCast] at hq
  have h‚ÇÄ : v (b ^ q.den / a ^ q.num) < 1 := by
    have := hq.1
    rwa [div_lt_div_iff‚ÇÄ (Real.log_pos ha) (by simp only [Nat.cast_pos, q.den_pos]), mul_comm,
      ‚Üê Real.log_pow, ‚Üê Real.log_zpow, Real.log_lt_log_iff (pow_pos (by linarith) _)
      (zpow_pos (by linarith) _), ‚Üê div_lt_one (zpow_pos (by linarith) _),
      ‚Üê map_pow, ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at this
  have h‚ÇÅ : 1 < w (b ^ q.den / a ^ q.num) := by
    have hwa := (one_lt_iff_of_lt_one_iff h _).1 ha
    have := hq.2
    rwa [div_lt_div_iff‚ÇÄ (by simp only [Nat.cast_pos, q.den_pos]) (Real.log_pos hwa),
      mul_comm (Real.log (w _)), ‚Üê Real.log_pow, ‚Üê Real.log_zpow,
      Real.log_lt_log_iff (zpow_pos (by linarith) _)
      (pow_pos (by linarith [(one_lt_iff_of_lt_one_iff h _).1 hb‚ÇÅ]) _),
      ‚Üê one_lt_div (zpow_pos (by linarith) _), ‚Üê map_pow, ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at this
  exact not_lt_of_gt ((h _).1 h‚ÇÄ) h‚ÇÅ

theorem exists_rpow_of_abv_one_lt_iff {v w : AbsoluteValue F ‚Ñù} (hv : v.IsNontrivial)
    (h : ‚àÄ x, v x < 1 ‚Üî w x < 1) :
    ‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, 1 < v x ‚Üí w x ^ t = v x := by
  obtain ‚ü®a, ha, hlog‚ü© := log_div_image_eq_singleton_of_abv_lt_one_iff hv h
  refine ‚ü®Real.log (v a) / Real.log (w a),
    div_pos (Real.log_pos ha) (Real.log_pos ((one_lt_iff_of_lt_one_iff h a).1 ha)), fun b hb ‚Ü¶ ?_‚ü©
  simp_rw [‚Üê hlog b hb]
  have := (one_lt_iff_of_lt_one_iff h b).1 hb
  rw [div_eq_inv_mul, Real.rpow_mul (w.nonneg _), Real.rpow_inv_log (by linarith) (by linarith),
    Real.exp_one_rpow, Real.exp_log (by linarith)]

open Real in
/--
If $v$ and $w$ be two real absolute values on a field $F$, where $v$ is non-trivial, then $v$ and
$w$ are equivalent if and only if $v(x) < 1$ exactly when $w(x) < 1$.
-/
theorem isEquiv_iff_abv_lt_one_iff {v : AbsoluteValue F ‚Ñù} (w : AbsoluteValue F ‚Ñù)
    (hv : v.IsNontrivial) : w.IsEquiv v ‚Üî (‚àÄ x, v x < 1 ‚Üî w x < 1) := by
  refine ‚ü®fun ‚ü®t, ht, h‚ü© x ‚Ü¶ h ‚ñ∏ (Real.rpow_lt_one_iff' (w.nonneg x) ht), fun h ‚Ü¶ ?_‚ü©
  obtain ‚ü®t, ht, hsuff‚ü© := exists_rpow_of_abv_one_lt_iff hv h
  refine ‚ü®t, ht, funext fun x ‚Ü¶ ?_‚ü©
  by_cases h‚ÇÄ : v x = 0
  ¬∑ rw [(map_eq_zero v).1 h‚ÇÄ, map_zero, map_zero, zero_rpow (by linarith)]
  ¬∑ by_cases h‚ÇÅ : v x = 1
    ¬∑ rw [h‚ÇÅ, (eq_one_iff_of_lt_one_iff h x).1 h‚ÇÅ, one_rpow]
    ¬∑ by_cases h‚ÇÇ : 0 < v x ‚àß v x < 1
      ¬∑ rw [‚Üê inv_inj, ‚Üê map_inv‚ÇÄ v, ‚Üê hsuff _ (map_inv‚ÇÄ v _ ‚ñ∏ one_lt_inv_iff‚ÇÄ.2 h‚ÇÇ), map_inv‚ÇÄ,
          inv_rpow (w.nonneg _)]
      ¬∑ rw [‚Üê one_lt_inv_iff‚ÇÄ, ‚Üê map_inv‚ÇÄ, not_lt] at h‚ÇÇ
        rw [‚Üê ne_eq, ‚Üê inv_ne_one, ‚Üê map_inv‚ÇÄ] at h‚ÇÅ
        exact hsuff _ <| (inv_lt_one_iff.1 <| lt_of_le_of_ne h‚ÇÇ h‚ÇÅ).resolve_left
          ((map_ne_zero v).1 h‚ÇÄ)

/--
If $v$ and $w$ are inequivalent absolute values and $v$ is non-trivial, then we can find an $a ‚àà F$
such that $v(a) < 1$ while $1 ‚â§ w(a)$.
-/
theorem exists_abv_lt_one_abv_one_le_of_not_isEquiv {v w : AbsoluteValue F ‚Ñù} (hv : v.IsNontrivial)
    (h : ¬¨w.IsEquiv v) :
    ‚àÉ a : F, v a < 1 ‚àß 1 ‚â§ w a := by
  contrapose! h
  exact isEquiv_iff_abv_lt_one_iff _ hv |>.2 <| fun  _ ‚Ü¶ abv_lt_one_iff_of_abv_lt_one_imp hv h

/--
If $v$ and $w$ are two non-trivial and inequivalent absolute values then
we can find an $a ‚àà K$ such that $1 < v a$ while $w a < 1$.
-/
theorem exists_abv_one_lt_abv_lt_one_of_not_isEquiv {v w : AbsoluteValue F ‚Ñù} (hv : v.IsNontrivial)
    (hw : w.IsNontrivial) (h : ¬¨w.IsEquiv v) :
    ‚àÉ a : F, 1 < v a ‚àß w a < 1 := by
  let ‚ü®a, ha‚ü© := exists_abv_lt_one_abv_one_le_of_not_isEquiv hv h
  let ‚ü®b, hb‚ü© := exists_abv_lt_one_abv_one_le_of_not_isEquiv hw (mt isEquiv_symm h)
  exact ‚ü®b / a, by simpa using ‚ü®one_lt_div (abv_pos_of_abv_pos v (by linarith)) |>.2 (by linarith),
    div_lt_one (by linarith) |>.2 (by linarith)‚ü©‚ü©

/--
The limit $v\left(\frac{1}{1 + a ^ n}\right)\to 1$, for an absolute value $v$ on a field
$F$ if $v(a) < 1$.
-/
theorem tendsto_div_one_add_pow_nhds_one {v : AbsoluteValue F ‚Ñù} {a : F} (ha : v a < 1) :
    Filter.Tendsto (fun (n : ‚Ñï) => v (1 / (1 + a ^ n))) Filter.atTop (ùìù 1) := by
  simp_rw [v.isAbsoluteValue.abv_div, v.map_one]
  nth_rw 2 [show (1 : ‚Ñù) = 1 / 1 by norm_num]
  apply Tendsto.div tendsto_const_nhds _ one_ne_zero
  have h_add := Tendsto.const_add 1 <| tendsto_pow_atTop_nhds_zero_of_lt_one (v.nonneg _) ha
  have h_sub := Tendsto.const_sub 1 <| tendsto_pow_atTop_nhds_zero_of_lt_one (v.nonneg _) ha
  simp only [add_zero, sub_zero] at h_add h_sub
  exact tendsto_of_tendsto_of_tendsto_of_le_of_le h_sub h_add
    (fun n ‚Ü¶ le_trans (by rw [map_one, map_pow]) (v.le_add _ _))
    (fun n ‚Ü¶ le_trans (v.add_le _ _) (by rw [map_one, map_pow]))

/--
The limit $v \left(\frac{1}{1 + a ^ n}\right)\to 0$, for an absolute value $v$ on a field
$F$ if $1 < v(a)$.
-/
theorem tendsto_pow_div_one_add_pow_zero {v : AbsoluteValue F ‚Ñù} {a : F} (ha : 1 < v a) :
    Filter.Tendsto (fun (n : ‚Ñï) => v (1 / (1 + a ^ n))) Filter.atTop (ùìù 0) := by
  simp_rw [div_eq_mul_inv, one_mul, map_inv‚ÇÄ, fun n => add_comm 1 (a ^ n)]
  apply Filter.Tendsto.inv_tendsto_atTop
  apply Filter.tendsto_atTop_mono (fun n => v.le_add _ _)
  simp_rw [map_one, map_pow v]
  apply Filter.tendsto_atTop_add_right_of_le _ _ _ (fun _ => le_rfl)
  refine tendsto_atTop_of_geom_le (by simp only [pow_zero, zero_lt_one]) ha fun n => ?_
  rw [‚Üê map_pow, ‚Üê map_pow, ‚Üê map_mul, pow_succ']

open Filter in
/--
- $F$: field;
- $a, b\in F$;
- $v_1, ..., v_k, w$: absolute values on $F$;
- $1 < v_i(a)$ and $1 < v_i(b)$;
- $v_j(a) < 1$ for $j \neq i$;
- $w(a) = 1$ and $w(b) < 1$.

There is a sequence of values that tends to $\infty$
under $v_i$, tends to $0$ under $v_j$, and is always $< 1$ under $w$.
An example sequence is given by $a ^ n \cdot b$.
-/
theorem exists_tendsto_zero_tendsto_atTop_tendsto_const
    {Œπ : Type*} {v : Œπ ‚Üí AbsoluteValue F ‚Ñù} {w : AbsoluteValue F ‚Ñù} {a b : F} {i : Œπ}
    (ha : 1 < v i a) (haj : ‚àÄ j ‚â† i, v j a < 1) (haw : w a = 1) (hb : 1 < v i b) (hbw : w b < 1) :
    ‚àÉ c : ‚Ñï ‚Üí F,
      Tendsto (fun n => (v i) (c n)) atTop atTop ‚àß
        (‚àÄ j ‚â† i, Tendsto (fun n => (v j) (c n)) atTop (ùìù 0)) ‚àß
          (‚àÄ n, w (c n) < 1) := by
  refine ‚ü®fun n => a ^ n * b, ?_‚ü©; simp_rw [map_mul, map_pow, haw, one_pow, one_mul]
  refine ‚ü®Tendsto.atTop_mul_const (by linarith) (tendsto_pow_atTop_atTop_of_one_lt ha),
    fun j hj => ?_, fun _ => hbw‚ü©
  rw [‚Üê zero_mul <| v j b]
  exact Tendsto.mul_const _ <| tendsto_pow_atTop_nhds_zero_of_lt_one ((v j).nonneg _) (haj j hj)

open scoped Classical in
/--
- $F$: field;
- $a, b\in F$;
- $v_1, ..., v_k, w$: absolute values on $F$;
- $1 < v_i(a)$ and $1 < v_i(b)$;
- $v_j(a) < 1$ for $j \neq i$;
- $w(a) = 1$ and $w(b) < 1$.

There is a $k\in F$ such that $1 < v_i(k)$ while $v_j(k) < 1$ for all
$j \neq i$ and $w(k) < 1$.
This is given by taking large enough values of a witness sequence to
`exists_tendsto_zero_tendsto_atTop_tendsto_const` (for example $a ^ n \cdot b$ works).
-/
theorem exists_one_lt_lt_one_lt_one_of_eq_one
    {Œπ : Type*} [Fintype Œπ] {v : Œπ ‚Üí AbsoluteValue F ‚Ñù} {w : AbsoluteValue F ‚Ñù} {a b : F} {i : Œπ}
    (ha : 1 < v i a) (haj : ‚àÄ j ‚â† i, v j a < 1) (haw : w a = 1) (hb : 1 < v i b) (hbw : w b < 1) :
    ‚àÉ k : F, 1 < v i k ‚àß (‚àÄ j ‚â† i, v j k < 1) ‚àß w k < 1 := by
  let ‚ü®c, hc‚ü© := exists_tendsto_zero_tendsto_atTop_tendsto_const ha haj haw hb hbw
  simp_rw [Metric.tendsto_nhds, Filter.tendsto_atTop_atTop, Filter.eventually_atTop,
    dist_zero_right, ‚Üê WithAbs.norm_eq_abv, norm_norm] at hc
  choose r‚ÇÅ hr‚ÇÅ using hc.1 2
  choose r‚Çô hr‚Çô using fun j hj => hc.2.1 j hj 1 (by linarith)
  let r := Finset.univ.sup fun j => if h : j = i then r‚ÇÅ else r‚Çô j h
  refine ‚ü®c r, lt_of_lt_of_le (by linarith) (hr‚ÇÅ r ?_), fun j hj => ?_, hc.2.2 r‚ü©
  ¬∑ exact Finset.le_sup_dite_pos (p := fun j => j = i) (f := fun _ _ => r‚ÇÅ) (Finset.mem_univ _) rfl
  ¬∑ convert hr‚Çô j hj _ <| Finset.le_sup_dite_neg (fun j => j = i) (Finset.mem_univ j) _

open Filter in
/--
- $F$: field;
- $a, b\in F$;
- $v_1, ..., v_k, w$: absolute values on $F$;
- $1 < v_i(a)$;
- $v_j(a) < 1$ for $j \neq i$;
- $1 < w(a)$.

There is a sequence of elements in $F$ that tendsto $v_i b$ under $v_i$, tends to $0$ under
$v_j$ for $j ‚â† i$, and tends to $w b$ under $w$.
Such a sequence is given by $\frac{1}{1 + a ^ {- n}}$.
-/
theorem exists_tendsto_const_tendsto_zero_tendsto_const
    {Œπ : Type*} {v : Œπ ‚Üí AbsoluteValue F ‚Ñù} {w : AbsoluteValue F ‚Ñù} {a : F} {i : Œπ}
    (b : F) (ha : 1 < v i a) (haj : ‚àÄ j ‚â† i, v j a < 1) (haw : 1 < w a) :
    ‚àÉ c : ‚Ñï ‚Üí F,
      Tendsto (fun n => (v i) (c n)) atTop (ùìù ((v i) b)) ‚àß
        (‚àÄ j ‚â† i, Tendsto (fun n => v j (c n)) atTop (ùìù 0)) ‚àß
          Tendsto (fun n => w (c n)) atTop (ùìù (w b)) := by
  refine ‚ü®fun n => (1 / (1 + a‚Åª¬π ^ n) * b), ?_‚ü©; simp_rw [map_mul]
  nth_rw 2 [‚Üê one_mul (v i b), ‚Üê one_mul (w b)]
  let hai := map_inv‚ÇÄ (v i) _ ‚ñ∏ inv_lt_one_of_one_lt‚ÇÄ ha
  replace haw := (map_inv‚ÇÄ w _ ‚ñ∏ inv_lt_one_of_one_lt‚ÇÄ haw)
  refine ‚ü®Tendsto.mul_const _ (tendsto_div_one_add_pow_nhds_one hai), fun j hj => ?_,
      Tendsto.mul_const _ (tendsto_div_one_add_pow_nhds_one haw)‚ü©
  replace haj := map_inv‚ÇÄ (v j) _ ‚ñ∏
    (one_lt_inv‚ÇÄ (abv_pos_of_abv_pos (v j) (by linarith))).2 (haj j hj)
  exact zero_mul (v j b) ‚ñ∏ Tendsto.mul_const _ (tendsto_pow_div_one_add_pow_zero haj)

open scoped Classical in
/--
- $F$: field;
- $a, b\in F$;
- $v_1, ..., v_k, w$: absolute values on $F$;
- $1 < v_i(a)$;
- $v_j(a) < 1$ for $j \neq i$;
- $1 < w(a)$.

There is a $k ‚àà F$ such that $1 < v_i(k)$ while $v_j(k) < 1$ for all
$j ‚â† i$ and $w(k) < 1$. This is given by taking large enough values of a witness sequence to
`exists_tendsto_const_tendsto_zero_tendsto_const` (for example $\frac{1}{1 + a ^ {- n}}$ works).

Note that this is the result `exists_one_lt_lt_one_lt_one_of_eq_one` replacing the condition
that $w(a) = 1$ with $1 < w(a)$ and removing the condition on $w(b)$.
-/
theorem exists_one_lt_lt_one_lt_one_of_one_lt
    {Œπ : Type*} [Fintype Œπ] {v : Œπ ‚Üí AbsoluteValue F ‚Ñù} {w : AbsoluteValue F ‚Ñù} {a b : F} {i : Œπ}
    (ha : 1 < v i a) (haj : ‚àÄ j ‚â† i, v j a < 1) (haw : 1 < w a) (hb : 1 < v i b) (hbw : w b < 1) :
    ‚àÉ k : F, 1 < v i k ‚àß (‚àÄ j ‚â† i, v j k < 1) ‚àß w k < 1 := by
  let ‚ü®c, hc‚ü© := exists_tendsto_const_tendsto_zero_tendsto_const b ha haj haw
  have h‚Çô := fun j hj => Metric.tendsto_nhds.1 <| hc.2.1 j hj
  simp_rw [Filter.eventually_atTop, dist_zero_right] at h‚Çô
  choose r‚ÇÅ hr‚ÇÅ using Filter.eventually_atTop.1 <| Filter.Tendsto.eventually_const_lt hb hc.1
  choose r‚Çô hr‚Çô using fun j hj => h‚Çô j hj 1 (by linarith)
  choose rN hrN using Filter.eventually_atTop.1 <| Filter.Tendsto.eventually_lt_const hbw hc.2.2
  let r := max (Finset.univ.sup fun j => if h : j = i then r‚ÇÅ else r‚Çô j h) rN
  refine ‚ü®c r, hr‚ÇÅ r ?_, fun j hj => ?_, ?_‚ü©
  ¬∑ exact le_max_iff.2 <| Or.inl <|
      Finset.le_sup_dite_pos (p := fun j => j = i) (f := fun _ _ => r‚ÇÅ) (Finset.mem_univ _) rfl
  ¬∑ simp only [‚Üê WithAbs.norm_eq_abv, norm_norm] at hr‚Çô
    exact hr‚Çô j hj _ <| le_max_iff.2 <| Or.inl <|
      Finset.le_sup_dite_neg (fun j => j = i) (Finset.mem_univ j) _
  ¬∑ exact hrN _ <| le_max_iff.2 (Or.inr le_rfl)

/--
Let $v_1, ..., v_k$ be a collection of at least two non-trivial and pairwise inequivalent
absolute values on a field $F$. There is an $a ‚àà F$ such that $1 < v_1(a)$ while
$v_j(a) < 1$ for all other $j ‚â† 1$.
-/
theorem exists_one_lt_lt_one {n : ‚Ñï} {v : Fin (n + 2) ‚Üí AbsoluteValue F ‚Ñù}
    (h : ‚àÄ i, (v i).IsNontrivial)
    (hv : Pairwise fun i j => ¬¨(v i).IsEquiv (v j)) :
    ‚àÉ (a : F), 1 < v 0 a ‚àß ‚àÄ j ‚â† 0, v j a < 1 := by
  induction n using Nat.case_strong_induction_on with
  | hz =>
    let ‚ü®a, ha‚ü© := (v 0).exists_abv_one_lt_abv_lt_one_of_not_isEquiv (h 0) (h 1)
      (hv zero_ne_one.symm)
    exact ‚ü®a, ha.1, by simp [Fin.forall_fin_two]; exact ha.2‚ü©
  | hi n ih =>
    -- Assume the result is true for all smaller collections of absolute values
    -- Let `a : K` be the value from the collection with the last absolute value removed
    let ‚ü®a, ha‚ü© := ih n le_rfl (fun _ => h _) (hv.comp_of_injective <| Fin.castSucc_injective _)
    -- Let `b : K` be the value using the first and last absolute value
    have : ![0, Fin.last (n + 2)].Injective := by simp [Function.Injective, Fin.forall_fin_two]
    let ‚ü®b, hb‚ü© := ih 0 (by linarith) (fun _ => h _) <| hv.comp_of_injective this
    simp [Fin.forall_fin_two] at hb
    -- If `v last < 1` then `a` works.
    by_cases ha‚ÇÄ : v (Fin.last _) a < 1
    ¬∑ refine ‚ü®a, ha.1, fun j hj => ?_‚ü©
      by_cases hj' : j = Fin.last (n + 2)
      ¬∑ exact hj' ‚ñ∏ ha‚ÇÄ
      ¬∑ exact ha.2 (Fin.castPred _ (ne_eq _ _ ‚ñ∏  hj')) <| Fin.castPred_ne_zero _ hj
    -- If `v last = 1` then this is given by `exists_one_lt_lt_one_lt_one_of_eq_one` with
    -- `w = v last`.
    ¬∑ by_cases ha‚ÇÅ : v (Fin.last _) a = 1
      ¬∑ let ‚ü®k, hk‚ü© := exists_one_lt_lt_one_lt_one_of_eq_one
          (v := fun i : Fin (n + 2) => v i.castSucc) ha.1 ha.2 ha‚ÇÅ hb.1 hb.2
        refine ‚ü®k, hk.1, fun j hj => ?_‚ü©
        by_cases h : j ‚â† Fin.last (n + 2)
        ¬∑ exact ne_eq _ _ ‚ñ∏ hk.2.1 (j.castPred h) <| Fin.castPred_ne_zero _ hj
        ¬∑ exact not_ne_iff.1 h ‚ñ∏ hk.2.2
      -- The last cast `1 < v last` is given by `exists_one_lt_lt_one_lt_one_of_one_lt` with
      -- `w = v last`.
      ¬∑ let ‚ü®k, hk‚ü© := exists_one_lt_lt_one_lt_one_of_one_lt
          (v := fun i : Fin (n + 2) => v i.castSucc) ha.1 ha.2
            (lt_of_le_of_ne (not_lt.1 ha‚ÇÄ) (ne_eq _ _ ‚ñ∏ ha‚ÇÅ).symm) hb.1 hb.2
        refine ‚ü®k, hk.1, fun j hj => ?_‚ü©
        by_cases h : j ‚â† Fin.last _
        ¬∑ apply ne_eq _ _ ‚ñ∏ hk.2.1 (j.castPred h)
          rwa [‚Üê Fin.castPred_zero, Fin.castPred_inj]
        ¬∑ exact not_ne_iff.1 h ‚ñ∏ hk.2.2

end AbsoluteValue
