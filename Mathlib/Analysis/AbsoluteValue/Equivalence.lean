/-
Copyright (c) 2025 Michael Stoll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Stoll
-/
import Mathlib.Analysis.SpecialFunctions.Pow.Real
import Mathlib.Analysis.Normed.Field.WithAbs

/-!
# Equivalence of real-valued absolute values

Two absolute values `v‚ÇÅ, v‚ÇÇ : AbsoluteValue R ‚Ñù` are *equivalent* if there exists a
positive real number `c` such that `v‚ÇÅ x ^ c = v‚ÇÇ x` for all `x : R`.
-/

namespace AbsoluteValue

section OrderedSemiring

variable {R : Type*} [Semiring R] {S : Type*} [Semiring S] [PartialOrder S]
  (v w : AbsoluteValue R S)

/-- Two absolute values `v` and `w` are *equivalent* if `v x ‚â§ v y` precisely when
`w x ‚â§ w y`.

Note that for real absolute values this condition is equivalent to the existence of a positive
real number `c` such that `v x ^ c = w x` for all `x`. See
`AbsoluteValue.isEquiv_iff_exists_rpow_eq`. -/
def IsEquiv : Prop := ‚àÄ x y, v x ‚â§ v y ‚Üî w x ‚â§ w y

theorem IsEquiv.refl : v.IsEquiv v := fun _ _ ‚Ü¶ .rfl

variable {v w}

theorem IsEquiv.rfl : v.IsEquiv v := fun _ _ ‚Ü¶ .rfl

theorem IsEquiv.symm (h : v.IsEquiv w) : w.IsEquiv v := fun _ _ ‚Ü¶ (h _ _).symm

theorem IsEquiv.trans {u : AbsoluteValue R S} (h‚ÇÅ : v.IsEquiv w)
    (h‚ÇÇ : w.IsEquiv u) : v.IsEquiv u := fun _ _ ‚Ü¶ (h‚ÇÅ _ _).trans (h‚ÇÇ _ _)

@[deprecated (since := "2025-09-12")] alias isEquiv_refl := IsEquiv.refl
@[deprecated (since := "2025-09-12")] alias isEquiv_symm := IsEquiv.symm
@[deprecated (since := "2025-09-12")] alias isEquiv_trans := IsEquiv.trans

instance : Setoid (AbsoluteValue R S) where
  r := IsEquiv
  iseqv := {
    refl := .refl
    symm := .symm
    trans := .trans
  }

theorem IsEquiv.le_iff_le (h : v.IsEquiv w) {x y : R} : v x ‚â§ v y ‚Üî w x ‚â§ w y := h ..

theorem IsEquiv.lt_iff_lt (h : v.IsEquiv w) {x y : R} : v x < v y ‚Üî w x < w y :=
  lt_iff_lt_of_le_iff_le' (h y x) (h x y)

theorem IsEquiv.eq_iff_eq (h : v.IsEquiv w) {x y : R} : v x = v y ‚Üî w x = w y := by
  simp [le_antisymm_iff, h x y, h y x]

variable [IsDomain S] [Nontrivial R]

theorem IsEquiv.lt_one_iff (h : v.IsEquiv w) {x : R} :
    v x < 1 ‚Üî w x < 1 := by
  simpa only [map_one] using h.lt_iff_lt (y := 1)

theorem IsEquiv.one_lt_iff (h : v.IsEquiv w) {x : R} :
    1 < v x ‚Üî 1 < w x := by
  simpa only [map_one] using h.lt_iff_lt (x := 1)

theorem IsEquiv.le_one_iff (h : v.IsEquiv w) {x : R} :
    v x ‚â§ 1 ‚Üî w x ‚â§ 1 := by
  simpa only [map_one] using h x 1

theorem IsEquiv.one_le_iff (h : v.IsEquiv w) {x : R} :
    1 ‚â§ v x ‚Üî 1 ‚â§ w x := by
  simpa only [map_one] using h 1 x

theorem IsEquiv.eq_one_iff (h : v.IsEquiv w) {x : R} : v x = 1 ‚Üî w x = 1 := by
  simpa only [map_one] using h.eq_iff_eq (x := x) (y := 1)

theorem IsEquiv.isNontrivial_congr {w : AbsoluteValue R S} (h : v.IsEquiv w) :
    v.IsNontrivial ‚Üî w.IsNontrivial :=
  not_iff_not.1 <| by aesop (add simp [not_isNontrivial_iff, h.eq_one_iff])

alias ‚ü®IsEquiv.isNontrivial, _‚ü© := IsEquiv.isNontrivial_congr

end OrderedSemiring

section LinearOrderedSemifield

variable {R S : Type*} [Field R] [Semifield S] [LinearOrder S] {v w : AbsoluteValue R S}

/-- An absolute value is equivalent to the trivial iff it is trivial itself. -/
@[simp]
lemma isEquiv_trivial_iff_eq_trivial [DecidablePred fun x : R ‚Ü¶ x = 0] [NoZeroDivisors R]
    [IsStrictOrderedRing S] {f : AbsoluteValue R S} :
    f.IsEquiv .trivial ‚Üî f = .trivial :=
  ‚ü®fun h ‚Ü¶ by aesop (add simp [h.eq_one_iff, AbsoluteValue.trivial]), fun h ‚Ü¶ h ‚ñ∏ .rfl‚ü©

@[deprecated (since := "2025-09-12")]
alias eq_trivial_of_isEquiv_trivial := isEquiv_trivial_iff_eq_trivial

variable [IsStrictOrderedRing S]

theorem isEquiv_iff_lt_one_iff :
    v.IsEquiv w ‚Üî ‚àÄ x, v x < 1 ‚Üî w x < 1 := by
  refine ‚ü®fun h _ ‚Ü¶ h.lt_one_iff, fun h x y ‚Ü¶ ?_‚ü©
  rcases eq_or_ne (v x) 0 with (_ | hy‚ÇÄ) <;> simp_all
  rw [le_iff_le_iff_lt_iff_lt, ‚Üê one_mul (v x), ‚Üê mul_inv_lt_iff‚ÇÄ (by simp_all), ‚Üê one_mul (w x),
    ‚Üê mul_inv_lt_iff‚ÇÄ (by simp_all), ‚Üê map_inv‚ÇÄ, ‚Üê map_mul, ‚Üê map_inv‚ÇÄ, ‚Üê map_mul]
  exact h _

variable [Archimedean S] [ExistsAddOfLE S]

theorem isEquiv_of_lt_one_imp (hv : v.IsNontrivial) (h : ‚àÄ x, v x < 1 ‚Üí w x < 1) : v.IsEquiv w := by
  refine isEquiv_iff_lt_one_iff.2 fun a ‚Ü¶ ?_
  rcases eq_or_ne a 0 with (rfl | ha‚ÇÄ)
  ¬∑ simp
  refine ‚ü®h a, fun hw ‚Ü¶ ?_‚ü©
  let ‚ü®x‚ÇÄ, hx‚ÇÄ‚ü© := hv.exists_abv_lt_one
  have hpow (n : ‚Ñï) (hv : 1 ‚â§ v a) : w x‚ÇÄ < w a ^ n := by
    rw [‚Üê one_mul (_ ^ _), ‚Üê mul_inv_lt_iff‚ÇÄ (pow_pos (by simp_all) _),
      ‚Üê map_pow, ‚Üê map_inv‚ÇÄ, ‚Üê map_mul]
    apply h
    rw [map_mul, map_inv‚ÇÄ, map_pow, mul_inv_lt_iff‚ÇÄ (pow_pos (by simp [ha‚ÇÄ]) _), one_mul]
    exact lt_of_lt_of_le hx‚ÇÄ.2 <| one_le_pow‚ÇÄ hv
  obtain ‚ü®n, hn‚ü© := exists_pow_lt_of_lt_one (w.pos hx‚ÇÄ.1) hw
  exact not_le.1 <| mt (hpow n) <| not_lt.2 hn.le

/--
If `v` and `w` are inequivalent absolute values and `v` is non-trivial, then we can find an `a : R`
such that `v a < 1` while `1 ‚â§ w a`.
-/
theorem exists_lt_one_one_le_of_not_isEquiv {v w : AbsoluteValue R S} (hv : v.IsNontrivial)
    (h : ¬¨v.IsEquiv w) : ‚àÉ a : R, v a < 1 ‚àß 1 ‚â§ w a := by
  contrapose! h
  exact isEquiv_of_lt_one_imp hv h

/--
If `v` and `w` are two non-trivial and inequivalent absolute values then we can find an `a : R`
such that `1 < v a` while `w a < 1`.
-/
theorem exists_one_lt_lt_one_of_not_isEquiv {v w : AbsoluteValue R S} (hv : v.IsNontrivial)
    (hw : w.IsNontrivial) (h : ¬¨v.IsEquiv w) :
    ‚àÉ a : R, 1 < v a ‚àß w a < 1 := by
  let ‚ü®a, hva, hwa‚ü© := exists_lt_one_one_le_of_not_isEquiv hv h
  let ‚ü®b, hwb, hvb‚ü© := exists_lt_one_one_le_of_not_isEquiv hw (mt .symm h)
  exact ‚ü®b / a, by simp [w.pos_iff.1 (lt_of_lt_of_le zero_lt_one hwa), one_lt_div, div_lt_one,
    lt_of_le_of_lt' hvb hva, lt_of_le_of_lt' hwa hwb]‚ü©

end LinearOrderedSemifield

section LinearOrderedField

open Filter
open scoped Topology

variable {R S : Type*} [Field R] [Field S] [LinearOrder S] {v w : AbsoluteValue R S}
  [TopologicalSpace S] [IsStrictOrderedRing S] [Archimedean S] [OrderTopology S]
  {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ] {v : Œπ ‚Üí AbsoluteValue R S} {w : AbsoluteValue R S}
  {a b : R} {i : Œπ}

/--
Suppose that
- `v i` and `w` are absolute values on a field `R`.
- `v i` is inequivalent to `v j` for all `j ‚â† i` via the divergent point `a : R`.
- `v i` is inequivalent to `w` via the divergent point `b : R`.
- `w a = 1`.

Then there is a common divergent point `k` causing both `v i` and `w` to be inequivalent to
each `v j` for `j ‚â† i`.
-/
private theorem exists_one_lt_lt_one_pi_of_eq_one (ha : 1 < v i a) (haj : ‚àÄ j ‚â† i, v j a < 1)
    (haw : w a = 1) (hb : 1 < v i b) (hbw : w b < 1) :
    ‚àÉ k : R, 1 < v i k ‚àß (‚àÄ j ‚â† i, v j k < 1) ‚àß w k < 1 := by
  let c : ‚Ñï ‚Üí R := fun n ‚Ü¶ a ^ n * b
  have hc·µ¢ : Tendsto (fun n ‚Ü¶ (v i) (c n)) atTop atTop := by
    simpa [c] using Tendsto.atTop_mul_const (by linarith) (tendsto_pow_atTop_atTop_of_one_lt ha)
  have hc‚±º (j : Œπ) (hj : j ‚â† i) : Tendsto (fun n ‚Ü¶ (v j) (c n)) atTop (ùìù 0) := by
    simpa [c] using (tendsto_pow_atTop_nhds_zero_of_lt_one ((v j).nonneg _) (haj j hj)).mul_const _
  simp_rw [OrderTopology.topology_eq_generate_intervals,
    TopologicalSpace.tendsto_nhds_generateFrom_iff, mem_atTop_sets, Set.mem_preimage] at hc‚±º
  choose r‚ÇÅ hr‚ÇÅ using tendsto_atTop_atTop.1 hc·µ¢ 2
  choose r‚Çô hr‚Çô using fun j hj ‚Ü¶ hc‚±º j hj (.Iio 1) (by simpa using ‚ü®1, .inr rfl‚ü©) (by simp)
  let r := Finset.univ.sup fun j ‚Ü¶ if h : j = i then r‚ÇÅ else r‚Çô j h
  refine ‚ü®c r, lt_of_lt_of_le (by linarith) (hr‚ÇÅ r ?_), fun j hj ‚Ü¶ ?_, by simpa [c, haw]‚ü©
  ¬∑ exact Finset.le_sup_dite_pos (p := fun j ‚Ü¶ j = i) (f := fun _ _ ‚Ü¶ r‚ÇÅ) (Finset.mem_univ _) rfl
  ¬∑ simpa using hr‚Çô j hj _ <| Finset.le_sup_dite_neg (fun j ‚Ü¶ j = i) (Finset.mem_univ j) _

/--
Suppose that
- `v i` and `w` are absolute values on a field `R`.
- `v i` is inequivalent to `v j` for all `j ‚â† i` via the divergent point `a : R`.
- `v i` is inequivalent to `w` via the divergent point `b : R`.
- `1 < w a`.

Then there is a common divergent point `k : R` causing both `v i` and `w` to be inequivalent to
each `v j` for `j ‚â† i`.
-/
private theorem exists_one_lt_lt_one_pi_of_one_lt (ha : 1 < v i a) (haj : ‚àÄ j ‚â† i, v j a < 1)
    (haw : 1 < w a) (hb : 1 < v i b) (hbw : w b < 1) :
    ‚àÉ k : R, 1 < v i k ‚àß (‚àÄ j ‚â† i, v j k < 1) ‚àß w k < 1 := by
  let c : ‚Ñï ‚Üí R := fun n ‚Ü¶ 1 / (1 + a‚Åª¬π ^ n) * b
  have hc·µ¢ : Tendsto (fun n ‚Ü¶ v i (c n)) atTop (ùìù (v i b)) := by
    have : v i a‚Åª¬π < 1 := map_inv‚ÇÄ (v i) a ‚ñ∏ inv_lt_one_of_one_lt‚ÇÄ ha
    simpa [c] using (tendsto_div_one_add_pow_nhds_one this).mul_const (v i b)
  have hc‚±º (j : Œπ) (hj : j ‚â† i) : atTop.Tendsto (fun n ‚Ü¶ v j (c n)) (ùìù 0) := by
    have : 1 < v j a‚Åª¬π := map_inv‚ÇÄ (v j) _ ‚ñ∏
      (one_lt_inv‚ÇÄ <| (v j).pos fun h ‚Ü¶ by linarith [map_zero (v _) ‚ñ∏ h ‚ñ∏ ha]).2 (haj j hj)
    simpa [c] using (tendsto_div_one_add_pow_nhds_zero this).mul_const _
  have hc‚Çô : atTop.Tendsto (fun n ‚Ü¶ w (c n)) (ùìù (w b)) := by
    have : w a‚Åª¬π < 1 := map_inv‚ÇÄ w _ ‚ñ∏ inv_lt_one_of_one_lt‚ÇÄ haw
    simpa [c] using (tendsto_div_one_add_pow_nhds_one this).mul_const (w b)
  simp_rw [OrderTopology.topology_eq_generate_intervals,
    TopologicalSpace.tendsto_nhds_generateFrom_iff, mem_atTop_sets, Set.mem_preimage] at hc‚±º
  choose r‚ÇÅ hr‚ÇÅ using Filter.eventually_atTop.1 <| Filter.Tendsto.eventually_const_lt hb hc·µ¢
  choose r‚Çô hr‚Çô using fun j hj ‚Ü¶ hc‚±º j hj (.Iio 1) (by simpa using ‚ü®1, .inr rfl‚ü©) (by simp)
  choose rN hrN using Filter.eventually_atTop.1 <| Filter.Tendsto.eventually_lt_const hbw hc‚Çô
  let r := max (Finset.univ.sup fun j ‚Ü¶ if h : j = i then r‚ÇÅ else r‚Çô j h) rN
  refine ‚ü®c r, hr‚ÇÅ r ?_, fun j hj ‚Ü¶ ?_, ?_‚ü©
  ¬∑ exact le_max_iff.2 <| .inl <|
      Finset.le_sup_dite_pos (p := fun j ‚Ü¶ j = i) (f := fun _ _ ‚Ü¶ r‚ÇÅ) (Finset.mem_univ _) rfl
  ¬∑ exact hr‚Çô j hj _ <| le_max_iff.2 <| .inl <|
      Finset.le_sup_dite_neg (fun j ‚Ü¶ j = i) (Finset.mem_univ j) _
  ¬∑ exact hrN _ <| le_max_iff.2 (.inr le_rfl)

open Fintype Subtype in
/--
If `v : Œπ ‚Üí AbsoluteValue R S` is a finite collection of non-trivial and pairwise inequivalent
absolute values, then for any `i` there is some `a : R` such that `1 < v i a` and
`v j a < 1` for all `j ‚â† i`.
-/
theorem exists_one_lt_lt_one_pi_of_not_isEquiv (h : ‚àÄ i, (v i).IsNontrivial)
    (hv : Pairwise fun i j ‚Ü¶ ¬¨(v i).IsEquiv (v j)) :
    ‚àÄ i, ‚àÉ (a : R), 1 < v i a ‚àß ‚àÄ j ‚â† i, v j a < 1 := by
  let P (Œπ : Type _) [Fintype Œπ] : Prop := [DecidableEq Œπ] ‚Üí
    ‚àÄ v : Œπ ‚Üí AbsoluteValue R S, (‚àÄ i, (v i).IsNontrivial) ‚Üí
      (Pairwise fun i j ‚Ü¶ ¬¨(v i).IsEquiv (v j)) ‚Üí ‚àÄ i, ‚àÉ (a : R), 1 < v i a ‚àß ‚àÄ j ‚â† i, v j a < 1
  -- Use strong induction on the index.
  revert hv h; refine induction_subsingleton_or_nontrivial (P := P) Œπ (fun Œπ _ _ _ v h hv i ‚Ü¶ ?_)
    (fun Œπ _ _ ih _ v h hv i ‚Ü¶ ?_) v
  ¬∑ -- If `Œπ` is trivial this follows immediately from `(v i).IsNontrivial`.
    let ‚ü®a, ha‚ü© := (h i).exists_abv_gt_one
    exact ‚ü®a, ha, fun j hij ‚Ü¶ absurd (Subsingleton.elim i j) hij.symm‚ü©
  ¬∑ rcases eq_or_ne (card Œπ) 2 with (hc | hc)
    ¬∑ -- If `Œπ` has two elements this is `exists_one_lt_lt_one_of_not_isEquiv`.
      let ‚ü®j, hj‚ü© := (Nat.card_eq_two_iff' i).1 <| card_eq_nat_card ‚ñ∏ hc
      let ‚ü®a, ha‚ü© := (v i).exists_one_lt_lt_one_of_not_isEquiv (h i) (h j) (hv hj.1.symm)
      exact ‚ü®a, ha.1, fun _ h ‚Ü¶ hj.2 _ h ‚ñ∏ ha.2‚ü©
    have hlt : 2 < card Œπ := Nat.lt_of_le_of_ne (one_lt_card_iff_nontrivial.2 ‚Äπ_‚Ä∫) hc.symm
    -- Otherwise, choose another distinguished index `j ‚â† i`.
    let ‚ü®j, hj‚ü© := exists_ne i
    -- Apply induction first on the subcollection `v i` for `i ‚â† j` to get `a : K`
    let ‚ü®a, ha‚ü© := ih {k : Œπ // k ‚â† j} (card_subtype_lt fun a ‚Ü¶ a rfl) (restrict _ v)
      (fun i ‚Ü¶ h _) (hv.comp_of_injective val_injective) ‚ü®i, hj.symm‚ü©
    -- Then apply induction next to the subcollection `{v i, v j}` to get `b : K`.
    let ‚ü®b, hb‚ü© := ih {k : Œπ // k = i ‚à® k = j} (by linarith [card_subtype_eq_or_eq_of_ne hj.symm])
      (restrict _ v) (fun _ ‚Ü¶ h _) (hv.comp_of_injective val_injective) ‚ü®i, .inl rfl‚ü©
    rcases eq_or_ne (v j a) 1 with (ha‚ÇÅ | ha‚ÇÅ)
    ¬∑ -- If `v j a = 1` then take a large enough value from the sequence `a ^ n * b`.
      let ‚ü®c, hc‚ü© := exists_one_lt_lt_one_pi_of_eq_one ha.1 ha.2 ha‚ÇÅ hb.1 (hb.2 ‚ü®j, .inr rfl‚ü©
        (by grind))
      refine ‚ü®c, hc.1, fun k hk ‚Ü¶ ?_‚ü©
      rcases eq_or_ne k j with (rfl | h); try exact hc.2.2; exact hc.2.1 ‚ü®k, h‚ü© (by grind)
    rcases ha‚ÇÅ.lt_or_gt with (ha_lt | ha_gt)
    ¬∑ -- If `v j a < 1` then `a` works as the divergent point.
      refine ‚ü®a, ha.1, fun k hk ‚Ü¶ ?_‚ü©
      rcases eq_or_ne k j with (rfl | h); try exact ha_lt; exact ha.2 ‚ü®k, h‚ü© (by grind)
    ¬∑ -- If `1 < v j a` then take a large enough value from the sequence `b / (1 + a ^ (-n))`.
      let ‚ü®c, hc‚ü© := exists_one_lt_lt_one_pi_of_one_lt ha.1 ha.2 ha_gt hb.1 (hb.2 ‚ü®j, .inr rfl‚ü©
        (by grind))
      refine ‚ü®c, hc.1, fun k hk ‚Ü¶ ?_‚ü©
      rcases eq_or_ne k j with (rfl | h); try exact hc.2.2; exact hc.2.1 ‚ü®k, h‚ü© (by grind)

end LinearOrderedField

section Real

open Real Topology

variable {F : Type*} [Field F] {v w : AbsoluteValue F ‚Ñù}

theorem IsEquiv.log_div_log_pos (h : v.IsEquiv w) {a : F} (ha‚ÇÄ : a ‚â† 0) (ha‚ÇÅ : w a ‚â† 1) :
    0 < (w a).log / (v a).log := by
  rcases ha‚ÇÅ.lt_or_gt with hwa | hwa
  ¬∑ simpa using div_pos (neg_pos_of_neg <| log_neg (w.pos ha‚ÇÄ) (hwa))
      (neg_pos_of_neg <| log_neg (v.pos ha‚ÇÄ) (h.lt_one_iff.2 hwa))
  ¬∑ exact div_pos (log_pos <| hwa) (log_pos (h.one_lt_iff.2 hwa))

/--
If $v$ and $w$ are two real absolute values on a field $F$, equivalent in the sense that
$v(x) \leq v(y)$ if and only if $w(x) \leq w(y)$, then $\frac{\log (v(a))}{\log (w(a))}$ is
constant for all $0 \neq a\in F$ with $v(a) \neq 1$.
-/
theorem IsEquiv.log_div_log_eq_log_div_log (h : v.IsEquiv w)
    {a : F} (ha‚ÇÄ : a ‚â† 0) (ha‚ÇÅ : v a ‚â† 1) {b : F} (hb‚ÇÄ : b ‚â† 0) (hb‚ÇÅ : v b ‚â† 1) :
    (v b).log / (w b).log = (v a).log / (w a).log := by
  by_contra! h_ne
  wlog ha : 1 < v a generalizing a b
  ¬∑ apply this (inv_ne_zero ha‚ÇÄ) (by simpa) hb‚ÇÄ hb‚ÇÅ (by simpa)
    simpa using one_lt_inv_iff‚ÇÄ.2 ‚ü®v.pos ha‚ÇÄ, ha‚ÇÅ.lt_of_le (not_lt.1 ha)‚ü©
  wlog hb : 1 < v b generalizing a b
  ¬∑ apply this ha‚ÇÄ ha‚ÇÅ (inv_ne_zero hb‚ÇÄ) (by simpa) (by simpa) ha
    simpa using one_lt_inv_iff‚ÇÄ.2 ‚ü®v.pos hb‚ÇÄ, hb‚ÇÅ.lt_of_le (not_lt.1 hb)‚ü©
  wlog h_lt : (v b).log / (w b).log < (v a).log / (w a).log generalizing a b
  ¬∑ exact this hb‚ÇÄ hb‚ÇÅ ha‚ÇÄ ha‚ÇÅ h_ne.symm hb ha <| lt_of_le_of_ne (not_lt.1 h_lt) h_ne.symm
  have hwa := h.one_lt_iff.1 ha
  have hwb := h.one_lt_iff.1 hb
  rw [div_lt_div_iff‚ÇÄ (log_pos hwb) (log_pos hwa), mul_comm (v a).log,
    ‚Üê div_lt_div_iff‚ÇÄ (log_pos ha) (log_pos hwa)] at h_lt
  let ‚ü®q, ‚ü®hq‚ÇÅ, hq‚ÇÇ‚ü©‚ü© := exists_rat_btwn h_lt
  rw [‚Üê Rat.num_div_den q, Rat.cast_div, Rat.cast_intCast, Rat.cast_natCast] at hq‚ÇÅ hq‚ÇÇ
  rw [div_lt_div_iff‚ÇÄ (log_pos ha) (by simp [q.den_pos]), mul_comm, ‚Üê log_pow, ‚Üê log_zpow,
    log_lt_log_iff (pow_pos (by linarith) _) (zpow_pos (by linarith) _),
    ‚Üê div_lt_one (zpow_pos (by linarith) _), ‚Üê map_pow, ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at hq‚ÇÅ
  rw [div_lt_div_iff‚ÇÄ (by simp [q.den_pos]) (log_pos hwa), mul_comm (w _).log,
    ‚Üê log_pow, ‚Üê log_zpow, log_lt_log_iff (zpow_pos (by linarith) _) (pow_pos (by linarith) _),
    ‚Üê one_lt_div (zpow_pos (by linarith) _), ‚Üê map_pow, ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at hq‚ÇÇ
  exact not_lt_of_gt (h.lt_one_iff.1 hq‚ÇÅ) hq‚ÇÇ

/--
If `v` and `w` are two real absolute values on a field `F`, then `v` and `w` are equivalent if
and only if there exists a positive real constant `c` such that for all `x : R`, `(f x)^c = g x`.
-/
theorem isEquiv_iff_exists_rpow_eq {v w : AbsoluteValue F ‚Ñù} :
    v.IsEquiv w ‚Üî ‚àÉ c : ‚Ñù, 0 < c ‚àß (v ¬∑ ^ c) = w := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun ‚ü®t, ht, h‚ü© ‚Ü¶ isEquiv_iff_lt_one_iff.2
    fun x ‚Ü¶ h ‚ñ∏ (rpow_lt_one_iff' (v.nonneg x) ht).symm‚ü©
  by_cases hw : w.IsNontrivial
  ¬∑ let ‚ü®a, ha‚ÇÄ, ha‚ÇÅ‚ü© := hw
    refine ‚ü®(w a).log / (v a).log, h.log_div_log_pos ha‚ÇÄ ha‚ÇÅ, funext fun b ‚Ü¶ ?_‚ü©
    rcases eq_or_ne b 0 with rfl | hb‚ÇÄ; ¬∑ simp [zero_rpow (by linarith [h.log_div_log_pos ha‚ÇÄ ha‚ÇÅ])]
    rcases eq_or_ne (w b) 1 with hb‚ÇÅ | hb‚ÇÅ; ¬∑ simp [hb‚ÇÅ, h.eq_one_iff.2 hb‚ÇÅ]
    rw [‚Üê h.symm.log_div_log_eq_log_div_log ha‚ÇÄ ha‚ÇÅ hb‚ÇÄ hb‚ÇÅ, div_eq_inv_mul, rpow_mul (v.nonneg _),
      rpow_inv_log (v.pos hb‚ÇÄ) (h.eq_one_iff.not.2 hb‚ÇÅ), exp_one_rpow, exp_log (w.pos hb‚ÇÄ)]
  ¬∑ exact ‚ü®1, zero_lt_one, funext fun x ‚Ü¶ by rcases eq_or_ne x 0 with rfl | h‚ÇÄ <;>
      aesop (add simp [h.isNontrivial_congr])‚ü©

theorem IsEquiv.equivWithAbs_image_mem_nhds_zero (h : v.IsEquiv w) {U : Set (WithAbs v)}
    (hU : U ‚àà ùìù 0) : WithAbs.equivWithAbs v w '' U ‚àà ùìù 0 := by
  rw [Metric.mem_nhds_iff] at hU ‚ä¢
  obtain ‚ü®Œµ, hŒµ, hU‚ü© := hU
  obtain ‚ü®c, hc, hvw‚ü© := isEquiv_iff_exists_rpow_eq.1 h
  refine ‚ü®Œµ ^ c, rpow_pos_of_pos hŒµ _, fun x hx ‚Ü¶ ?_‚ü©
  rw [‚Üê RingEquiv.apply_symm_apply (WithAbs.equivWithAbs v w) x]
  refine Set.mem_image_of_mem _ (hU ?_)
  rw [Metric.mem_ball, dist_zero_right, WithAbs.norm_eq_abv, ‚Üê funext_iff.1 hvw,
    rpow_lt_rpow_iff (v.nonneg _) hŒµ.le hc] at hx
  simpa [WithAbs.norm_eq_abv]

open Topology IsTopologicalAddGroup in
theorem IsEquiv.isEmbedding_equivWithAbs (h : v.IsEquiv w) :
    IsEmbedding (WithAbs.equivWithAbs v w) := by
  refine IsInducing.isEmbedding <| isInducing_iff_nhds_zero.2 <| Filter.ext fun U ‚Ü¶
    ‚ü®fun hU ‚Ü¶ ?_, fun hU ‚Ü¶ ?_‚ü©
  ¬∑ exact ‚ü®WithAbs.equivWithAbs v w '' U, h.equivWithAbs_image_mem_nhds_zero hU,
      by simp [RingEquiv.image_eq_preimage, Set.preimage_preimage]‚ü©
  ¬∑ rw [‚Üê RingEquiv.coe_toEquiv, ‚Üê Filter.map_equiv_symm] at hU
    obtain ‚ü®s, hs, hss‚ü© := Filter.mem_map_iff_exists_image.1 hU
    rw [‚Üê RingEquiv.coe_toEquiv_symm, WithAbs.equivWithAbs_symm] at hss
    exact Filter.mem_of_superset (h.symm.equivWithAbs_image_mem_nhds_zero hs) hss

theorem isEquiv_iff_isHomeomorph (v w : AbsoluteValue F ‚Ñù) :
    v.IsEquiv w ‚Üî IsHomeomorph (WithAbs.equivWithAbs v w) := by
  rw [isHomeomorph_iff_isEmbedding_surjective]
  refine ‚ü®fun h ‚Ü¶ ‚ü®h.isEmbedding_equivWithAbs, RingEquiv.surjective _‚ü©, fun ‚ü®hi, _‚ü© ‚Ü¶ ?_‚ü©
  refine isEquiv_iff_lt_one_iff.2 fun x ‚Ü¶ ?_
  conv_lhs => rw [‚Üê (WithAbs.equiv v).apply_symm_apply x]
  conv_rhs => rw [‚Üê (WithAbs.equiv w).apply_symm_apply x]
  simp_rw [‚Üê WithAbs.norm_eq_abv, ‚Üê tendsto_pow_atTop_nhds_zero_iff_norm_lt_one]
  exact ‚ü®fun h ‚Ü¶ by simpa [Function.comp_def] using (hi.continuous.tendsto 0).comp h, fun h ‚Ü¶ by
    simpa [Function.comp_def] using (hi.continuous_iff (f := (WithAbs.equivWithAbs v w).symm)).2
      continuous_id |>.tendsto 0 |>.comp h ‚ü©

end Real

end AbsoluteValue
