/-
Copyright (c) 2024 Edward Watine. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Edward Watine
-/
import Mathlib.Analysis.Analytic.Basic


/-!
# Scalar series

This file contains API for analytic functions `‚àë c·µ¢ ‚Ä¢ x‚Å±` defined in terms of scalars
`c‚ÇÄ, c‚ÇÅ, c‚ÇÇ, ‚Ä¶`.
## Main definitions / results:
 * `FormalMultilinearSeries.ofScalars`: the formal power series `‚àë c·µ¢ ‚Ä¢ x‚Å±`.
 * `FormalMultilinearSeries.ofScalars_radius_eq_of_tendsto`: the ratio test for an analytic function
   defined in terms of a formal power series `‚àë c·µ¢ ‚Ä¢ x‚Å±`.
-/

namespace FormalMultilinearSeries

section Field

variable {ùïú : Type*} (E : Type*) [Field ùïú] [Ring E] [Algebra ùïú E] [TopologicalSpace E]
  [TopologicalRing E] (c : ‚Ñï ‚Üí ùïú)

/-- Formal power series of `‚àë c·µ¢ ‚Ä¢ x‚Å±` for some scalar field `ùïú` and ring algebra `E`-/
def ofScalars : FormalMultilinearSeries ùïú E E :=
  fun n ‚Ü¶ c n ‚Ä¢ ContinuousMultilinearMap.mkPiAlgebraFin ùïú n E

variable {E}

/-- The sum of the formal power series. Takes the value `0` outside the radius of convergence. -/
noncomputable def ofScalarsSum (x : E) := (ofScalars E c).sum x

theorem ofScalars_apply_eq (x : E) (n : ‚Ñï) :
    ofScalars E c n (fun _ ‚Ü¶ x) = c n ‚Ä¢ x ^ n := by
  simp [ofScalars]

/-- This naming follows the convention of `NormedSpace.expSeries_apply_eq'`. -/
theorem ofScalars_apply_eq' (x : E) :
    (fun n ‚Ü¶ ofScalars E c n (fun _ ‚Ü¶ x)) = fun n ‚Ü¶ c n ‚Ä¢ x ^ n := by
  simp [ofScalars]

theorem ofScalars_sum_eq (x : E) : ofScalarsSum c x =
    ‚àë' n, c n ‚Ä¢ x ^ n := tsum_congr fun n => ofScalars_apply_eq c x n

theorem ofScalarsSum_eq_tsum : ofScalarsSum c =
    fun (x : E) => ‚àë' n : ‚Ñï, c n ‚Ä¢ x ^ n := funext (ofScalars_sum_eq c)

@[simp]
theorem ofScalars_op [T2Space E] (x : E) :
    ofScalarsSum c (MulOpposite.op x) = MulOpposite.op (ofScalarsSum c x) := by
  simp [ofScalars, ofScalars_sum_eq, ‚Üê MulOpposite.op_pow, ‚Üê MulOpposite.op_smul, tsum_op]

@[simp]
theorem ofScalars_unop [T2Space E] (x : E·µê·µí·µñ) :
    ofScalarsSum c (MulOpposite.unop x) = MulOpposite.unop (ofScalarsSum c x) := by
  simp [ofScalars, ofScalars_sum_eq, ‚Üê MulOpposite.unop_pow, ‚Üê MulOpposite.unop_smul, tsum_unop]

@[simp]
theorem ofScalars_eq_zero [Nontrivial E] (n : ‚Ñï) : ofScalars E c n = 0 ‚Üî c n = 0 := by
  rw [ofScalars, smul_eq_zero (c := c n) (x := ContinuousMultilinearMap.mkPiAlgebraFin ùïú n E)]
  refine or_iff_left (ContinuousMultilinearMap.ext_iff.1.mt <| not_forall_of_exists_not ?_)
  use fun _ ‚Ü¶ 1
  simp

end Field

section Normed

open Filter
open scoped Topology

variable {ùïú : Type*} (E : Type*) [NontriviallyNormedField ùïú] [NormedRing E]
    [NormedAlgebra ùïú E] (c : ‚Ñï ‚Üí ùïú) (n : ‚Ñï)

theorem ofScalars_norm_eq_mul :
    ‚ÄñofScalars E c n‚Äñ = ‚Äñc n‚Äñ * ‚ÄñContinuousMultilinearMap.mkPiAlgebraFin ùïú n E‚Äñ := by
  rw [ofScalars, norm_smul (c n) (ContinuousMultilinearMap.mkPiAlgebraFin ùïú n E)]

theorem ofScalars_norm_le (hn : n > 0) : ‚ÄñofScalars E c n‚Äñ ‚â§ ‚Äñc n‚Äñ := by
  simp only [ofScalars_norm_eq_mul]
  exact (mul_le_of_le_one_right (norm_nonneg _)
    (ContinuousMultilinearMap.norm_mkPiAlgebraFin_le_of_pos hn))

@[simp]
theorem ofScalars_norm [NormOneClass E] : ‚ÄñofScalars E c n‚Äñ = ‚Äñc n‚Äñ := by
  simp [ofScalars_norm_eq_mul]

/-- The radius of convergence of a scalar series is the inverse of the ratio of the norms of the
coefficients. -/
theorem ofScalars_radius_eq_inv_of_tendsto [NormOneClass E] {r : NNReal} (hr : r ‚â† 0)
    (hc : Tendsto (fun n ‚Ü¶ ‚Äñc n.succ‚Äñ / ‚Äñc n‚Äñ) atTop (ùìù r)) :
      (ofScalars E c).radius = ENNReal.ofNNReal r‚Åª¬π := by
  have hc' {r' : NNReal} (hr' : (r' : ‚Ñù) ‚â† 0) :
    Tendsto (fun n ‚Ü¶ ‚Äñ‚ÄñofScalars E c (n + 1)‚Äñ * r' ^ (n + 1)‚Äñ /
      ‚Äñ‚ÄñofScalars E c n‚Äñ * r' ^ n‚Äñ) atTop (ùìù ‚Üë(r' * r)) := by
    simp_rw [norm_mul, norm_norm, ofScalars_norm, mul_div_mul_comm, ‚Üê norm_div, pow_succ,
      mul_div_right_comm, div_self (pow_ne_zero _ hr'), one_mul, norm_div, NNReal.norm_eq]
    exact mul_comm r' r ‚ñ∏ Filter.Tendsto.mul hc tendsto_const_nhds
  apply le_antisymm <;> refine ENNReal.le_of_forall_nnreal_lt (fun r' hr' ‚Ü¶ ?_)
  ¬∑ rw [ENNReal.coe_le_coe, NNReal.le_inv_iff_mul_le hr]
    have := FormalMultilinearSeries.summable_norm_mul_pow _ hr'
    contrapose! this
    have hrz : (r' : ‚Ñù) ‚â† 0 := by aesop
    apply not_summable_of_ratio_test_tendsto_gt_one this
    exact hc' (by aesop)
  ¬∑ rw [ENNReal.coe_lt_coe, NNReal.lt_inv_iff_mul_lt hr] at hr'
    by_cases hrz : r' = 0
    ¬∑ simp [hrz]
    ¬∑ apply FormalMultilinearSeries.le_radius_of_summable_norm
      refine summable_of_ratio_test_tendsto_lt_one hr' ?_ <| hc' (NNReal.coe_ne_zero.2 hrz)
      refine (Tendsto.eventually_ne hc (NNReal.coe_ne_zero.2 hr)).mp (Eventually.of_forall ?_)
      simp_rw [div_ne_zero_iff, ofScalars_norm, mul_ne_zero_iff]
      aesop

/-- A convenience lemma restating the result of `ofScalars_radius_eq_inv_of_tendsto` under
the inverse ratio. -/
theorem ofScalars_radius_eq_of_tendsto [NormOneClass E] {r : NNReal} (hr : r ‚â† 0)
    (hc : Tendsto (fun n ‚Ü¶ ‚Äñc n‚Äñ / ‚Äñc n.succ‚Äñ) atTop (ùìù r)) :
      (ofScalars E c).radius = ENNReal.ofNNReal r := by
  suffices Tendsto (fun n ‚Ü¶ ‚Äñc n.succ‚Äñ / ‚Äñc n‚Äñ) atTop (ùìù r‚Åª¬π) by
    convert ofScalars_radius_eq_inv_of_tendsto E c (inv_ne_zero hr) this
    simp
  convert (continuousAt_inv‚ÇÄ <| NNReal.coe_ne_zero.mpr hr).tendsto.comp hc
  simp

end Normed

end FormalMultilinearSeries
