/-
Copyright (c) 2022 Vincent Beffara. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Vincent Beffara, Stefan Kebekus
-/
import Mathlib.Analysis.Analytic.IsolatedZeros

/-!
# Vanishing Order of Analytic Functions

This file defines the order of vanishing of an analytic function `f` at a point `z‚ÇÄ`, as an element
of `‚Ñï‚àû`.

TODO: Uniformize API between analytic and meromorphic functions
-/

open Filter  Set
open scoped Topology

variable {ùïú : Type*} [NontriviallyNormedField ùïú] {E : Type*} [NormedAddCommGroup E]
  [NormedSpace ùïú E] {f g : ùïú ‚Üí E} {n : ‚Ñï} {z‚ÇÄ : ùïú}

/-!
## Vanishing Order at a Point: Definition and Characterization
-/

namespace AnalyticAt

open scoped Classical in

/-- The order of vanishing of `f` at `z‚ÇÄ`, as an element of `‚Ñï‚àû`.

The order is defined to be `‚àû` if `f` is identically 0 on a neighbourhood of `z‚ÇÄ`, and otherwise the
unique `n` such that `f` can locally be written as `f z = (z - z‚ÇÄ) ^ n ‚Ä¢ g z`, where `g` is analytic
and does not vanish at `z‚ÇÄ`. See `AnalyticAt.order_eq_top_iff` and `AnalyticAt.order_eq_nat_iff` for
these equivalences. -/
noncomputable def order (hf : AnalyticAt ùïú f z‚ÇÄ) : ENat :=
  if h : ‚àÄ·∂† z in ùìù z‚ÇÄ, f z = 0 then ‚ä§
  else ‚Üë(hf.exists_eventuallyEq_pow_smul_nonzero_iff.mpr h).choose

/-- The order of an analytic function `f` at a `z‚ÇÄ` is infinity iff `f` vanishes locally around
`z‚ÇÄ`. -/
lemma order_eq_top_iff (hf : AnalyticAt ùïú f z‚ÇÄ) : hf.order = ‚ä§ ‚Üî ‚àÄ·∂† z in ùìù z‚ÇÄ, f z = 0 := by
  unfold order
  split_ifs with h
  ¬∑ rwa [eq_self, true_iff]
  ¬∑ simpa only [ne_eq, ENat.coe_ne_top, false_iff] using h

/-- The order of an analytic function `f` at `z‚ÇÄ` equals a natural number `n` iff `f` can locally
be written as `f z = (z - z‚ÇÄ) ^ n ‚Ä¢ g z`, where `g` is analytic and does not vanish at `z‚ÇÄ`. -/
lemma order_eq_nat_iff (hf : AnalyticAt ùïú f z‚ÇÄ) (n : ‚Ñï) : hf.order = ‚Üën ‚Üî
    ‚àÉ (g : ùïú ‚Üí E), AnalyticAt ùïú g z‚ÇÄ ‚àß g z‚ÇÄ ‚â† 0 ‚àß ‚àÄ·∂† z in ùìù z‚ÇÄ, f z = (z - z‚ÇÄ) ^ n ‚Ä¢ g z := by
  unfold order
  split_ifs with h
  ¬∑ simp only [ENat.top_ne_coe, false_iff]
    contrapose! h
    rw [‚Üê hf.exists_eventuallyEq_pow_smul_nonzero_iff]
    exact ‚ü®n, h‚ü©
  ¬∑ rw [‚Üê hf.exists_eventuallyEq_pow_smul_nonzero_iff] at h
    refine ‚ü®fun hn ‚Ü¶ (WithTop.coe_inj.mp hn : h.choose = n) ‚ñ∏ h.choose_spec, fun h' ‚Ü¶ ?_‚ü©
    rw [unique_eventuallyEq_pow_smul_nonzero h.choose_spec h']

/-- The order of an analytic function `f` at `z‚ÇÄ` is finite iff `f` can locally be written as `f z =
  (z - z‚ÇÄ) ^ order ‚Ä¢ g z`, where `g` is analytic and does not vanish at `z‚ÇÄ`.

See `MeromorphicNFAt.order_eq_zero_iff` for an analogous statement about meromorphic functions in
normal form.
-/
lemma order_ne_top_iff (hf : AnalyticAt ùïú f z‚ÇÄ) :
    hf.order ‚â† ‚ä§ ‚Üî ‚àÉ (g : ùïú ‚Üí E), AnalyticAt ùïú g z‚ÇÄ ‚àß g z‚ÇÄ ‚â† 0
      ‚àß f =·∂†[ùìù z‚ÇÄ] fun z ‚Ü¶ (z - z‚ÇÄ) ^ (hf.order.toNat) ‚Ä¢ g z := by
  simp only [‚Üê ENat.coe_toNat_eq_self, Eq.comm, EventuallyEq, ‚Üê hf.order_eq_nat_iff]

@[deprecated (since := "2025-02-03")]
alias order_neq_top_iff := order_ne_top_iff

/-- The order of an analytic function `f` at `z‚ÇÄ` is zero iff `f` does not vanish at `z‚ÇÄ`. -/
lemma order_eq_zero_iff (hf : AnalyticAt ùïú f z‚ÇÄ) :
    hf.order = 0 ‚Üî f z‚ÇÄ ‚â† 0 := by
  rw [‚Üê ENat.coe_zero, order_eq_nat_iff hf 0]
  constructor
  ¬∑ intro ‚ü®g, _, _, hg‚ü©
    simpa [hg.self_of_nhds]
  ¬∑ exact fun hz ‚Ü¶ ‚ü®f, hf, hz, by simp‚ü©

/-- An analytic function vanishes at a point if its order is nonzero when converted to ‚Ñï. -/
lemma apply_eq_zero_of_order_toNat_ne_zero (hf : AnalyticAt ùïú f z‚ÇÄ) :
    hf.order.toNat ‚â† 0 ‚Üí f z‚ÇÄ = 0 := by
  simp [hf.order_eq_zero_iff]
  tauto

/-!
## Vanishing Order at a Point: Behaviour under Ring Operations

The theorem `AnalyticAt.order_mul` and `AnalyticAt.order_pow` establish additivity of the order
under multiplication and taking powers.

TODO: Behaviour under Addition/Subtraction
-/

/-- Helper lemma for `AnalyticAt.order_mul` -/
lemma order_mul_of_order_eq_top {f g : ùïú ‚Üí ùïú} (hf : AnalyticAt ùïú f z‚ÇÄ)
    (hg : AnalyticAt ùïú g z‚ÇÄ) (h'f : hf.order = ‚ä§) :
    (hf.mul hg).order = ‚ä§ := by
  rw [AnalyticAt.order_eq_top_iff, eventually_nhds_iff] at *
  obtain ‚ü®t, h‚ÇÅt, h‚ÇÇt, h‚ÇÉt‚ü© := h'f
  exact ‚ü®t, fun y hy ‚Ü¶ (by simp [h‚ÇÅt y hy]), h‚ÇÇt, h‚ÇÉt‚ü©

/-- The order is additive when multiplying analytic functions. -/
theorem order_mul {f g : ùïú ‚Üí ùïú} (hf : AnalyticAt ùïú f z‚ÇÄ) (hg : AnalyticAt ùïú g z‚ÇÄ) :
    (hf.mul hg).order = hf.order + hg.order := by
  -- Trivial cases: one of the functions vanishes around z‚ÇÄ
  by_cases h‚ÇÇf : hf.order = ‚ä§
  ¬∑ simp [hf.order_mul_of_order_eq_top hg h‚ÇÇf, h‚ÇÇf]
  by_cases h‚ÇÇg : hg.order = ‚ä§
  ¬∑ simp [mul_comm f g, hg.order_mul_of_order_eq_top hf h‚ÇÇg, h‚ÇÇg]
  -- Non-trivial case: both functions do not vanish around z‚ÇÄ
  obtain ‚ü®g‚ÇÅ, h‚ÇÅg‚ÇÅ, h‚ÇÇg‚ÇÅ, h‚ÇÉg‚ÇÅ‚ü© := hf.order_ne_top_iff.1 h‚ÇÇf
  obtain ‚ü®g‚ÇÇ, h‚ÇÅg‚ÇÇ, h‚ÇÇg‚ÇÇ, h‚ÇÉg‚ÇÇ‚ü© := hg.order_ne_top_iff.1 h‚ÇÇg
  rw [‚Üê ENat.coe_toNat h‚ÇÇf, ‚Üê ENat.coe_toNat h‚ÇÇg, ‚Üê ENat.coe_add, (hf.mul hg).order_eq_nat_iff]
  use g‚ÇÅ * g‚ÇÇ, by exact h‚ÇÅg‚ÇÅ.mul h‚ÇÅg‚ÇÇ
  constructor
  ¬∑ simp
    tauto
  ¬∑ obtain ‚ü®t, h‚ÇÅt, h‚ÇÇt, h‚ÇÉt‚ü© := eventually_nhds_iff.1 h‚ÇÉg‚ÇÅ
    obtain ‚ü®s, h‚ÇÅs, h‚ÇÇs, h‚ÇÉs‚ü© := eventually_nhds_iff.1 h‚ÇÉg‚ÇÇ
    exact eventually_nhds_iff.2
      ‚ü®t ‚à© s, fun y hy ‚Ü¶ (by simp [h‚ÇÅt y hy.1, h‚ÇÅs y hy.2]; ring), h‚ÇÇt.inter h‚ÇÇs, h‚ÇÉt, h‚ÇÉs‚ü©

/-- The order multiplies by `n` when taking an analytic function to its `n`th power. -/
theorem order_pow {f : ùïú ‚Üí ùïú} (hf : AnalyticAt ùïú f z‚ÇÄ) {n : ‚Ñï} :
    (hf.pow n).order = n ‚Ä¢ hf.order := by
  induction n
  case zero =>
    simp [AnalyticAt.order_eq_zero_iff]
  case succ n hn =>
    simp [add_mul, pow_add, (hf.pow n).order_mul hf, hn]

end AnalyticAt

/-!
## Level Sets of the Order Function
-/

namespace AnalyticOnNhd

variable {U : Set ùïú} (hf : AnalyticOnNhd ùïú f U)

/-- The set where an analytic function has infinite order is clopen in its domain of analyticity. -/
theorem isClopen_setOf_order_eq_top :
    IsClopen { u : U | (hf u.1 u.2).order = ‚ä§ } := by
  constructor
  ¬∑ rw [‚Üê isOpen_compl_iff, isOpen_iff_forall_mem_open]
    intro z hz
    rcases (hf z.1 z.2).eventually_eq_zero_or_eventually_ne_zero with h | h
    ¬∑ -- Case: f is locally zero in a punctured neighborhood of z
      rw [‚Üê (hf z.1 z.2).order_eq_top_iff] at h
      tauto
    ¬∑ -- Case: f is locally nonzero in a punctured neighborhood of z
      obtain ‚ü®t', h‚ÇÅt', h‚ÇÇt', h‚ÇÉt'‚ü© := eventually_nhds_iff.1 (eventually_nhdsWithin_iff.1 h)
      use Subtype.val ‚Åª¬π' t'
      constructor
      ¬∑ intro w hw
        simp only [mem_compl_iff, mem_setOf_eq]
        by_cases h‚ÇÅw : w = z
        ¬∑ rwa [h‚ÇÅw]
        ¬∑ rw [(hf _ w.2).order_eq_zero_iff.2 ((h‚ÇÅt' w hw) (Subtype.coe_ne_coe.mpr h‚ÇÅw))]
          exact ENat.zero_ne_top
      ¬∑ exact ‚ü®isOpen_induced h‚ÇÇt', h‚ÇÉt'‚ü©
  ¬∑ apply isOpen_iff_forall_mem_open.mpr
    intro z hz
    conv =>
      arg 1; intro; left; right; arg 1; intro
      rw [AnalyticAt.order_eq_top_iff, eventually_nhds_iff]
    simp only [mem_setOf_eq] at hz
    rw [AnalyticAt.order_eq_top_iff, eventually_nhds_iff] at hz
    obtain ‚ü®t', h‚ÇÅt', h‚ÇÇt', h‚ÇÉt'‚ü© := hz
    use Subtype.val ‚Åª¬π' t'
    simp only [mem_compl_iff, mem_singleton_iff, isOpen_induced h‚ÇÇt', mem_preimage,
      h‚ÇÉt', and_self, and_true]
    intro w hw
    simp only [mem_setOf_eq]
    -- Trivial case: w = z
    by_cases h‚ÇÅw : w = z
    ¬∑ rw [h‚ÇÅw]
      tauto
    -- Nontrivial case: w ‚â† z
    use t' \ {z.1}, fun y h‚ÇÅy ‚Ü¶ h‚ÇÅt' y h‚ÇÅy.1, h‚ÇÇt'.sdiff isClosed_singleton
    apply (mem_diff w).1
    exact ‚ü®hw, mem_singleton_iff.not.1 (Subtype.coe_ne_coe.2 h‚ÇÅw)‚ü©

/-- On a connected set, there exists a point where a meromorphic function `f` has finite order iff
`f` has finite order at every point. -/
theorem exists_order_ne_top_iff_forall (hU : IsConnected U) :
    (‚àÉ u : U, (hf u u.2).order ‚â† ‚ä§) ‚Üî (‚àÄ u : U, (hf u u.2).order ‚â† ‚ä§) := by
  have : ConnectedSpace U := Subtype.connectedSpace hU
  obtain ‚ü®v‚ü© : Nonempty U := inferInstance
  suffices (‚àÄ (u : U), (hf u u.2).order ‚â† ‚ä§) ‚à® ‚àÄ (u : U), (hf u u.2).order = ‚ä§ by tauto
  simpa [Set.eq_empty_iff_forall_not_mem, Set.eq_univ_iff_forall] using
      isClopen_iff.1 hf.isClopen_setOf_order_eq_top

/-- On a preconnected set, a meromorphic function has finite order at one point if it has finite
order at another point. -/
theorem order_ne_top_of_isPreconnected {x y : ùïú} (hU : IsPreconnected U) (h‚ÇÅx : x ‚àà U) (hy : y ‚àà U)
    (h‚ÇÇx : (hf x h‚ÇÅx).order ‚â† ‚ä§) :
    (hf y hy).order ‚â† ‚ä§ :=
  (hf.exists_order_ne_top_iff_forall ‚ü®nonempty_of_mem h‚ÇÅx, hU‚ü©).1 (by use ‚ü®x, h‚ÇÅx‚ü©) ‚ü®y, hy‚ü©

/-- The set where an analytic function has zero or infinite order is discrete within its domain of
analyticity. -/
theorem codiscrete_setOf_order_eq_zero_or_top :
    {u : U | (hf u u.2).order = 0 ‚à® (hf u u.2).order = ‚ä§} ‚àà Filter.codiscrete U := by
  rw [mem_codiscrete_subtype_iff_mem_codiscreteWithin, mem_codiscreteWithin]
  intro x hx
  rw [Filter.disjoint_principal_right]
  rcases (hf x hx).eventually_eq_zero_or_eventually_ne_zero with h‚ÇÅf | h‚ÇÅf
  ¬∑ filter_upwards [eventually_nhdsWithin_of_eventually_nhds h‚ÇÅf.eventually_nhds] with a ha
    simp +contextual [(hf a _).order_eq_top_iff, ha]
  ¬∑ filter_upwards [h‚ÇÅf] with a ha
    simp +contextual [(hf a _).order_eq_zero_iff, ha]

end AnalyticOnNhd
