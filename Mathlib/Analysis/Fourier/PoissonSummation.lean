/-
Copyright (c) 2023 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import Mathlib.Analysis.Fourier.AddCircle
import Mathlib.Analysis.Fourier.FourierTransform
import Mathlib.Analysis.PSeries
import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.MeasureTheory.Measure.Lebesgue.Integral

#align_import analysis.fourier.poisson_summation from "leanprover-community/mathlib"@"fd5edc43dc4f10b85abfe544b88f82cf13c5f844"

/-!
# Poisson's summation formula

We prove Poisson's summation formula `‚àë (n : ‚Ñ§), f n = ‚àë (n : ‚Ñ§), ùìï f n`, where `ùìï f` is the
Fourier transform of `f`, under the following hypotheses:
* `f` is a continuous function `‚Ñù ‚Üí ‚ÑÇ`.
* The sum `‚àë (n : ‚Ñ§), ùìï f n` is convergent.
* For all compacts `K ‚äÇ ‚Ñù`, the sum `‚àë (n : ‚Ñ§), sup { ‚Äñf(x + n)‚Äñ | x ‚àà K }` is convergent.
See `Real.tsum_eq_tsum_fourierIntegral` for this formulation.

These hypotheses are potentially a little awkward to apply, so we also provide the less general but
easier-to-use result `Real.tsum_eq_tsum_fourierIntegral_of_rpow_decay`, in which we assume `f` and
`ùìï f` both decay as `|x| ^ (-b)` for some `b > 1`, and the even more specific result
`SchwartzMap.tsum_eq_tsum_fourierIntegral`, where we assume that both `f` and `ùìï f` are Schwartz
functions.

## TODO

At the moment `SchwartzMap.tsum_eq_tsum_fourierIntegral` requires separate proofs that both `f`
and `ùìï f` are Schwartz functions. In fact, `ùìï f` is automatically Schwartz if `f` is; and once
we have this lemma in the library, we should adjust the hypotheses here accordingly.
-/


noncomputable section

open Function hiding comp_apply

open Set hiding restrict_apply

open Complex hiding abs_of_nonneg

open Real

open TopologicalSpace Filter MeasureTheory Asymptotics

open scoped Real BigOperators Filter FourierTransform

attribute [local instance] Real.fact_zero_lt_one

open ContinuousMap

/-- The key lemma for Poisson summation: the `m`-th Fourier coefficient of the periodic function
`‚àë' n : ‚Ñ§, f (x + n)` is the value at `m` of the Fourier transform of `f`. -/
theorem Real.fourierCoeff_tsum_comp_add {f : C(‚Ñù, ‚ÑÇ)}
    (hf : ‚àÄ K : Compacts ‚Ñù, Summable fun n : ‚Ñ§ => ‚Äñ(f.comp (ContinuousMap.addRight n)).restrict K‚Äñ)
    (m : ‚Ñ§) : fourierCoeff (Periodic.lift <| f.periodic_tsum_comp_add_zsmul 1) m = ùìï f m := by
  -- NB: This proof can be shortened somewhat by telescoping together some of the steps in the calc
  -- block, but I think it's more legible this way. We start with preliminaries about the integrand.
  let e : C(‚Ñù, ‚ÑÇ) := (fourier (-m)).comp ‚ü®((‚Üë) : ‚Ñù ‚Üí UnitAddCircle), continuous_quotient_mk'‚ü©
  have neK : ‚àÄ (K : Compacts ‚Ñù) (g : C(‚Ñù, ‚ÑÇ)), ‚Äñ(e * g).restrict K‚Äñ = ‚Äñg.restrict K‚Äñ := by
    have : ‚àÄ x : ‚Ñù, ‚Äñe x‚Äñ = 1 := fun x => abs_coe_circle (AddCircle.toCircle (-m ‚Ä¢ x))
    intro K g
    simp_rw [norm_eq_iSup_norm, restrict_apply, mul_apply, norm_mul, this, one_mul]
  have eadd : ‚àÄ (n : ‚Ñ§), e.comp (ContinuousMap.addRight n) = e := by
    intro n; ext1 x
    have : Periodic e 1 := Periodic.comp (fun x => AddCircle.coe_add_period 1 x) (fourier (-m))
    simpa only [mul_one] using this.int_mul n x
  -- Now the main argument. First unwind some definitions.
  calc
    fourierCoeff (Periodic.lift <| f.periodic_tsum_comp_add_zsmul 1) m =
        ‚à´ x in (0 : ‚Ñù)..1, e x * (‚àë' n : ‚Ñ§, f.comp (ContinuousMap.addRight n)) x := by
      simp_rw [fourierCoeff_eq_intervalIntegral _ m 0, div_one, one_smul, zero_add, comp_apply,
        coe_mk, Periodic.lift_coe, zsmul_one, smul_eq_mul]
    -- Transform sum in C(‚Ñù, ‚ÑÇ) evaluated at x into pointwise sum of values.
    _ = ‚à´ x in (0:‚Ñù)..1, ‚àë' n : ‚Ñ§, (e * f.comp (ContinuousMap.addRight n)) x := by
      simp_rw [coe_mul, Pi.mul_apply,
        ‚Üê ContinuousMap.tsum_apply (summable_of_locally_summable_norm hf), tsum_mul_left]
    -- Swap sum and integral.
    _ = ‚àë' n : ‚Ñ§, ‚à´ x in (0:‚Ñù)..1, (e * f.comp (ContinuousMap.addRight n)) x := by
      refine' (intervalIntegral.tsum_intervalIntegral_eq_of_summable_norm _).symm
      convert hf ‚ü®uIcc 0 1, isCompact_uIcc‚ü© using 1
      exact funext fun n => neK _ _
    _ = ‚àë' n : ‚Ñ§, ‚à´ x in (0:‚Ñù)..1, (e * f).comp (ContinuousMap.addRight n) x := by
      simp only [ContinuousMap.comp_apply, mul_comp] at eadd ‚ä¢
      simp_rw [eadd]
    -- Rearrange sum of interval integrals into an integral over `‚Ñù`.
    _ = ‚à´ x, e x * f x := by
      suffices Integrable (e * f) from this.hasSum_intervalIntegral_comp_add_int.tsum_eq
      apply integrable_of_summable_norm_Icc
      convert hf ‚ü®Icc 0 1, isCompact_Icc‚ü© using 1
      simp_rw [mul_comp] at eadd ‚ä¢
      simp_rw [eadd]
      exact funext fun n => neK ‚ü®Icc 0 1, isCompact_Icc‚ü© _
    -- Minor tidying to finish
    _ = ùìï f m := by
      rw [fourierIntegral_eq_integral_exp_smul]
      congr 1 with x : 1
      rw [smul_eq_mul, comp_apply, coe_mk, coe_mk, ContinuousMap.toFun_eq_coe, fourier_coe_apply]
      congr 2
      push_cast
      ring
#align real.fourier_coeff_tsum_comp_add Real.fourierCoeff_tsum_comp_add

/-- **Poisson's summation formula**, most general form. -/
theorem Real.tsum_eq_tsum_fourierIntegral {f : C(‚Ñù, ‚ÑÇ)}
    (h_norm :
      ‚àÄ K : Compacts ‚Ñù, Summable fun n : ‚Ñ§ => ‚Äñ(f.comp <| ContinuousMap.addRight n).restrict K‚Äñ)
    (h_sum : Summable fun n : ‚Ñ§ => ùìï f n) (x : ‚Ñù) :
    ‚àë' n : ‚Ñ§, f (x + n) = ‚àë' n : ‚Ñ§, ùìï f n * fourier n (x : UnitAddCircle) := by
  let F : C(UnitAddCircle, ‚ÑÇ) :=
    ‚ü®(f.periodic_tsum_comp_add_zsmul 1).lift, continuous_coinduced_dom.mpr (map_continuous _)‚ü©
  have : Summable (fourierCoeff F) := by
    convert h_sum
    exact Real.fourierCoeff_tsum_comp_add h_norm _
  convert (has_pointwise_sum_fourier_series_of_summable this x).tsum_eq.symm using 1
  ¬∑ simpa only [coe_mk, ‚Üê QuotientAddGroup.mk_zero, Periodic.lift_coe, zsmul_one, comp_apply,
      coe_addRight, zero_add]
       using (hasSum_apply (summable_of_locally_summable_norm h_norm).hasSum x).tsum_eq
  ¬∑ simp_rw [‚Üê Real.fourierCoeff_tsum_comp_add h_norm, smul_eq_mul, coe_mk]

#align real.tsum_eq_tsum_fourier_integral Real.tsum_eq_tsum_fourierIntegral

section RpowDecay

variable {E : Type*} [NormedAddCommGroup E]

/-- If `f` is `O(x ^ (-b))` at infinity, then so is the function
`Œª x, ‚Äñf.restrict (Icc (x + R) (x + S))‚Äñ` for any fixed `R` and `S`. -/
theorem isBigO_norm_Icc_restrict_atTop {f : C(‚Ñù, E)} {b : ‚Ñù} (hb : 0 < b)
    (hf : f =O[atTop] fun x : ‚Ñù => |x| ^ (-b)) (R S : ‚Ñù) :
    (fun x : ‚Ñù => ‚Äñf.restrict (Icc (x + R) (x + S))‚Äñ) =O[atTop] fun x : ‚Ñù => |x| ^ (-b) := by
  -- First establish an explicit estimate on decay of inverse powers.
  -- This is logically independent of the rest of the proof, but of no mathematical interest in
  -- itself, so it is proved in-line rather than being formulated as a separate lemma.
  have claim : ‚àÄ x : ‚Ñù, max 0 (-2 * R) < x ‚Üí ‚àÄ y : ‚Ñù, x + R ‚â§ y ‚Üí
      y ^ (-b) ‚â§ (1 / 2) ^ (-b) * x ^ (-b) := fun x hx y hy ‚Ü¶ by
    rw [max_lt_iff] at hx
    obtain ‚ü®hx1, hx2‚ü© := hx
    rw [‚Üê mul_rpow] <;> try positivity
    apply rpow_le_rpow_of_nonpos <;> linarith
  -- Now the main proof.
  obtain ‚ü®c, hc, hc'‚ü© := hf.exists_pos
  simp only [IsBigO, IsBigOWith, eventually_atTop] at hc' ‚ä¢
  obtain ‚ü®d, hd‚ü© := hc'
  refine' ‚ü®c * (1 / 2) ^ (-b), ‚ü®max (1 + max 0 (-2 * R)) (d - R), fun x hx => _‚ü©‚ü©
  rw [ge_iff_le, max_le_iff] at hx
  have hx' : max 0 (-2 * R) < x := by linarith
  rw [max_lt_iff] at hx'
  rw [norm_norm, ContinuousMap.norm_le _ (by positivity)]
  refine' fun y => (hd y.1 (by linarith [hx.1, y.2.1])).trans _
  have A : ‚àÄ x : ‚Ñù, 0 ‚â§ |x| ^ (-b) := fun x => by positivity
  rw [mul_assoc, mul_le_mul_left hc, norm_of_nonneg (A _), norm_of_nonneg (A _)]
  convert claim x (by linarith only [hx.1]) y.1 y.2.1
  ¬∑ apply abs_of_nonneg; linarith [y.2.1]
  ¬∑ exact abs_of_pos hx'.1
set_option linter.uppercaseLean3 false in
#align is_O_norm_Icc_restrict_at_top isBigO_norm_Icc_restrict_atTop

theorem isBigO_norm_Icc_restrict_atBot {f : C(‚Ñù, E)} {b : ‚Ñù} (hb : 0 < b)
    (hf : f =O[atBot] fun x : ‚Ñù => |x| ^ (-b)) (R S : ‚Ñù) :
    (fun x : ‚Ñù => ‚Äñf.restrict (Icc (x + R) (x + S))‚Äñ) =O[atBot] fun x : ‚Ñù => |x| ^ (-b) := by
  have h1 : (f.comp (ContinuousMap.mk _ continuous_neg)) =O[atTop] fun x : ‚Ñù => |x| ^ (-b) := by
    convert hf.comp_tendsto tendsto_neg_atTop_atBot using 1
    ext1 x; simp only [Function.comp_apply, abs_neg]
  have h2 := (isBigO_norm_Icc_restrict_atTop hb h1 (-S) (-R)).comp_tendsto tendsto_neg_atBot_atTop
  have : (fun x : ‚Ñù => |x| ^ (-b)) ‚àò Neg.neg = fun x : ‚Ñù => |x| ^ (-b) := by
    ext1 x; simp only [Function.comp_apply, abs_neg]
  rw [this] at h2
  refine' (isBigO_of_le _ fun x => _).trans h2
  -- equality holds, but less work to prove `‚â§` alone
  rw [norm_norm, Function.comp_apply, norm_norm, ContinuousMap.norm_le _ (norm_nonneg _)]
  rintro ‚ü®x, hx‚ü©
  rw [ContinuousMap.restrict_apply_mk]
  refine' (le_of_eq _).trans (ContinuousMap.norm_coe_le_norm _ ‚ü®-x, _‚ü©)
  rw [ContinuousMap.restrict_apply_mk, ContinuousMap.comp_apply, ContinuousMap.coe_mk,
    ContinuousMap.coe_mk, neg_neg]
  exact ‚ü®by linarith [hx.2], by linarith [hx.1]‚ü©
set_option linter.uppercaseLean3 false in
#align is_O_norm_Icc_restrict_at_bot isBigO_norm_Icc_restrict_atBot

theorem isBigO_norm_restrict_cocompact (f : C(‚Ñù, E)) {b : ‚Ñù} (hb : 0 < b)
    (hf : f =O[cocompact ‚Ñù] fun x : ‚Ñù => |x| ^ (-b)) (K : Compacts ‚Ñù) :
    (fun x => ‚Äñ(f.comp (ContinuousMap.addRight x)).restrict K‚Äñ) =O[cocompact ‚Ñù] (|¬∑| ^ (-b)) := by
  obtain ‚ü®r, hr‚ü© := K.isCompact.isBounded.subset_closedBall 0
  rw [closedBall_eq_Icc, zero_add, zero_sub] at hr
  have : ‚àÄ x : ‚Ñù,
      ‚Äñ(f.comp (ContinuousMap.addRight x)).restrict K‚Äñ ‚â§ ‚Äñf.restrict (Icc (x - r) (x + r))‚Äñ := by
    intro x
    rw [ContinuousMap.norm_le _ (norm_nonneg _)]
    rintro ‚ü®y, hy‚ü©
    refine' (le_of_eq _).trans (ContinuousMap.norm_coe_le_norm _ ‚ü®y + x, _‚ü©)
    ¬∑ simp_rw [ContinuousMap.restrict_apply, ContinuousMap.comp_apply, ContinuousMap.coe_addRight]
    ¬∑ exact ‚ü®by linarith [(hr hy).1], by linarith [(hr hy).2]‚ü©
  simp_rw [cocompact_eq_atBot_atTop, isBigO_sup] at hf ‚ä¢
  constructor
  ¬∑ refine' (isBigO_of_le atBot _).trans (isBigO_norm_Icc_restrict_atBot hb hf.1 (-r) r)
    simp_rw [norm_norm]; exact this
  ¬∑ refine' (isBigO_of_le atTop _).trans (isBigO_norm_Icc_restrict_atTop hb hf.2 (-r) r)
    simp_rw [norm_norm]; exact this
set_option linter.uppercaseLean3 false in
#align is_O_norm_restrict_cocompact isBigO_norm_restrict_cocompact

/-- **Poisson's summation formula**, assuming that `f` decays as
`|x| ^ (-b)` for some `1 < b` and its Fourier transform is summable. -/
theorem Real.tsum_eq_tsum_fourierIntegral_of_rpow_decay_of_summable {f : ‚Ñù ‚Üí ‚ÑÇ} (hc : Continuous f)
    {b : ‚Ñù} (hb : 1 < b) (hf : IsBigO (cocompact ‚Ñù) f fun x : ‚Ñù => |x| ^ (-b))
    (hFf : Summable fun n : ‚Ñ§ => ùìï f n) (x : ‚Ñù) :
    ‚àë' n : ‚Ñ§, f (x + n) = ‚àë' n : ‚Ñ§, ùìï f n * fourier n (x : UnitAddCircle) :=
  Real.tsum_eq_tsum_fourierIntegral (fun K => summable_of_isBigO (Real.summable_abs_int_rpow hb)
    ((isBigO_norm_restrict_cocompact ‚ü®_, hc‚ü© (zero_lt_one.trans hb) hf K).comp_tendsto
    Int.tendsto_coe_cofinite)) hFf x
#align real.tsum_eq_tsum_fourier_integral_of_rpow_decay_of_summable Real.tsum_eq_tsum_fourierIntegral_of_rpow_decay_of_summable

/-- **Poisson's summation formula**, assuming that both `f` and its Fourier transform decay as
`|x| ^ (-b)` for some `1 < b`. (This is the one-dimensional case of Corollary VII.2.6 of Stein and
Weiss, *Introduction to Fourier analysis on Euclidean spaces*.) -/
theorem Real.tsum_eq_tsum_fourierIntegral_of_rpow_decay {f : ‚Ñù ‚Üí ‚ÑÇ} (hc : Continuous f) {b : ‚Ñù}
    (hb : 1 < b) (hf : f =O[cocompact ‚Ñù] (|¬∑| ^ (-b)))
    (hFf : (ùìï f) =O[cocompact ‚Ñù] (|¬∑| ^ (-b))) (x : ‚Ñù) :
    ‚àë' n : ‚Ñ§, f (x + n) = ‚àë' n : ‚Ñ§, ùìï f n * fourier n (x : UnitAddCircle) :=
  Real.tsum_eq_tsum_fourierIntegral_of_rpow_decay_of_summable hc hb hf (summable_of_isBigO
    (Real.summable_abs_int_rpow hb) (hFf.comp_tendsto Int.tendsto_coe_cofinite)) x
#align real.tsum_eq_tsum_fourier_integral_of_rpow_decay Real.tsum_eq_tsum_fourierIntegral_of_rpow_decay

end RpowDecay

section Schwartz

/-- **Poisson's summation formula** for Schwartz functions. -/
theorem SchwartzMap.tsum_eq_tsum_fourierIntegral (f g : SchwartzMap ‚Ñù ‚ÑÇ) (hfg : ùìï ‚áëf = ‚áëg) (x : ‚Ñù) :
    ‚àë' n : ‚Ñ§, f (x + n) = (‚àë' n : ‚Ñ§, g n * fourier n (x : UnitAddCircle)) := by
  -- We know that Schwartz functions are `O(‚Äñx ^ (-b)‚Äñ)` for *every* `b`; for this argument we take
  -- `b = 2` and work with that.
  simp only [‚Üê hfg, Real.tsum_eq_tsum_fourierIntegral_of_rpow_decay f.continuous one_lt_two
    (f.isBigO_cocompact_rpow (-2)) (hfg ‚ñ∏ g.isBigO_cocompact_rpow (-2))]

#align schwartz_map.tsum_eq_tsum_fourier_integral SchwartzMap.tsum_eq_tsum_fourierIntegral

end Schwartz
