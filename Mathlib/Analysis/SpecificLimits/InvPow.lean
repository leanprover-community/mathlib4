/-
Copyright (c) 2025 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.Analysis.Complex.TaylorSeries

/-!
# Taylor expansion of `1 / z ^ r`
-/

variable {ùïú : Type*} [NontriviallyNormedField ùïú]

lemma deriv_div_sub_pow (z w a : ùïú) (r : ‚Ñï) :
    deriv (fun z : ùïú ‚Ü¶ a / (w - z) ^ r) z = r * a / (w - z) ^ (r + 1) := by
  rw [deriv_comp_const_sub (f := fun z ‚Ü¶ a / z ^ r) (a := w)]
  simp [div_eq_mul_inv, deriv_const_mul_field', ‚Üê zpow_natCast, ‚Üê zpow_neg,
    deriv_zpow, neg_add_eq_sub, mul_assoc, mul_left_comm _ a]

lemma hasDerivAt_div_sub_pow (z w a : ùïú) (r : ‚Ñï) (hz : z ‚â† w) :
    HasDerivAt (fun z : ùïú ‚Ü¶ a / (w - z) ^ r) (r * a / (w - z) ^ (r + 1)) z := by
  rw [‚Üê deriv_div_sub_pow, hasDerivAt_deriv_iff]
  refine .div (by fun_prop) (by fun_prop) (by simp [eq_comm, sub_eq_zero, hz])

lemma iter_deriv_div_sub_pow (z w a : ùïú) (r k : ‚Ñï) :
    deriv^[k] (fun z : ùïú ‚Ü¶ a / (w - z) ^ r) z = r.ascFactorial k * a / (w - z) ^ (r + k) := by
  revert z
  apply funext_iff.mp
  induction k with
  | zero => simp
  | succ k IH =>
    ext z
    simp [Function.iterate_succ', IH, deriv_div_sub_pow, Nat.ascFactorial_succ,
      ‚Üê add_assoc, mul_assoc, -Function.iterate_succ]

/-- Taylor expansion of `1 / z ^ k` at `w`. -/
lemma Complex.tsum_eq_one_div_sub_pow (w z : ‚ÑÇ) (hz : ‚Äñz‚Äñ < ‚Äñw‚Äñ) (k : ‚Ñï) (hk : k ‚â† 0) :
    ‚àë' i : ‚Ñï, (Nat.choose (i + k - 1) i) * w ^ (- ‚Üë(i + k) : ‚Ñ§) * z ^ i = 1 / (w - z) ^ k := by
  convert Complex.taylorSeries_eq_on_ball' (f := fun z ‚Ü¶ 1 / (w - z) ^ k)
    (show z ‚àà Metric.ball 0 ‚Äñw‚Äñ by simpa using hz) _ using 4 with i
  ¬∑ rw [iteratedDeriv_eq_iterate, iter_deriv_div_sub_pow, sub_zero, zpow_neg, zpow_natCast, mul_one,
      eq_inv_mul_iff_mul_eq‚ÇÄ (by norm_cast; positivity), ‚Üê mul_assoc, div_eq_mul_inv, add_comm,
      ‚Üê Nat.cast_mul, Nat.ascFactorial_eq_factorial_mul_choose']
  ¬∑ simp
  ¬∑ exact .div (by fun_prop) (by fun_prop) (by simp [sub_eq_zero, imp_not_comm, hk])

/-- Taylor expansion of `1 / z ^ k` at `w`. -/
lemma Complex.hasSum_one_div_sub_pow (w z : ‚ÑÇ) (hz : ‚Äñz‚Äñ < ‚Äñw‚Äñ) (k : ‚Ñï) (hk : k ‚â† 0) :
    HasSum (fun i ‚Ü¶ (Nat.choose (i + k - 1) i) * w ^ (- ‚Üë(i + k) : ‚Ñ§) * z ^ i)
      (1 / (w - z) ^ k) := by
  rw [Summable.hasSum_iff, tsum_eq_one_div_sub_pow w z hz k hk]
  by_contra H
  obtain ‚ü®rfl, -‚ü© : w = z ‚àß k ‚â† 0 := by simpa [sub_eq_zero] using
    (tsum_eq_one_div_sub_pow w z hz k hk).symm.trans (tsum_eq_zero_of_not_summable H)
  simp at hz

/-- Taylor expansion of `1 / z` at `w`. -/
lemma Complex.tsum_eq_one_div_sub (w z : ‚ÑÇ) (hz : ‚Äñz‚Äñ < ‚Äñw‚Äñ) :
    ‚àë' i : ‚Ñï, w ^ (- ‚Üë(i + 1) : ‚Ñ§) * z ^ i = 1 / (w - z) := by
  convert tsum_eq_one_div_sub_pow w z hz 1 one_ne_zero <;> simp

/-- Taylor expansion of `1 / z ^ 2` at `w`. -/
lemma Complex.tsum_eq_one_div_sub_sq (w z : ‚ÑÇ) (hz : ‚Äñz‚Äñ < ‚Äñw‚Äñ) :
    ‚àë' i : ‚Ñï, (i + 1) * w ^ (- ‚Üë(i + 2) : ‚Ñ§) * z ^ i = 1 / (w - z) ^ 2 := by
  convert tsum_eq_one_div_sub_pow w z hz 2 two_ne_zero; simp

/-- `‚àë (ai + b)z‚Å± = (b - a) / (1 - z) + a / (1 - z)¬≤` -/
lemma Complex.tsum_mul_add_const_mul_pow (z a b : ‚ÑÇ) (hz : ‚Äñz‚Äñ < 1) :
    ‚àë' i : ‚Ñï, (a * i + b) * z ^ i = (b - a) / (1 - z) + a / (1 - z) ^ 2 := by
  have H : ‚Äñz‚Äñ < ‚Äñ(1 : ‚ÑÇ)‚Äñ := by simpa using hz
  simp_rw [div_eq_mul_inv, ‚Üê one_div]
  rw [‚Üê Complex.tsum_eq_one_div_sub_sq _ _ H, ‚Üê Complex.tsum_eq_one_div_sub _ _ H, ‚Üê tsum_mul_left,
    ‚Üê tsum_mul_left, ‚Üê Summable.tsum_add]
  ¬∑ congr 1 with i
    simp
    ring
  ¬∑ refine .mul_left _ ?_
    by_contra h
    obtain rfl : 1 = z := by simpa [sub_eq_zero] using
      (tsum_eq_one_div_sub _ _ H).symm.trans (tsum_eq_zero_of_not_summable h)
    simp at hz
  ¬∑ refine .mul_left _ ?_
    by_contra h
    obtain rfl : 1 = z := by simpa [sub_eq_zero] using
      (tsum_eq_one_div_sub_sq _ _ H).symm.trans (tsum_eq_zero_of_not_summable h)
    simp at hz

lemma Real.tsum_eq_one_div_sub_sq (w z : ‚Ñù) (hz : |z| < |w|) :
    ‚àë' i : ‚Ñï, (i + 1) * w ^ (- ‚Üë(i + 2) : ‚Ñ§) * z ^ i = 1 / (w - z) ^ 2 := by
  exact_mod_cast Complex.tsum_eq_one_div_sub_sq w z (by simpa)

lemma Real.tsum_mul_add_const_mul_pow (a b z : ‚Ñù) (hz : |z| < 1) :
    ‚àë' i : ‚Ñï, (a * i + b) * z ^ i = (b - a) / (1 - z) + a / (1 - z) ^ 2 := by
  exact_mod_cast Complex.tsum_mul_add_const_mul_pow z a b (by simpa)
