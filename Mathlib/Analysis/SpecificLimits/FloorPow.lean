/-
Copyright (c) 2022 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.Analysis.SpecificLimits.Basic
import Mathlib.Analysis.SpecialFunctions.Pow.Real

#align_import analysis.specific_limits.floor_pow from "leanprover-community/mathlib"@"0b9eaaa7686280fad8cce467f5c3c57ee6ce77f8"

/-!
# Results on discretized exponentials

We state several auxiliary results pertaining to sequences of the form `‚åäc^n‚åã‚Çä`.

* `tendsto_div_of_monotone_of_tendsto_div_floor_pow`: If a monotone sequence `u` is such that
  `u ‚åäc^n‚åã‚Çä / ‚åäc^n‚åã‚Çä` converges to a limit `l` for all `c > 1`, then `u n / n` tends to `l`.
* `sum_div_nat_floor_pow_sq_le_div_sq`: The sum of `1/‚åäc^i‚åã‚Çä^2` above a threshold `j` is comparable
  to `1/j^2`, up to a multiplicative constant.
-/

open Filter Finset

open Topology BigOperators

/-- If a monotone sequence `u` is such that `u n / n` tends to a limit `l` along subsequences with
exponential growth rate arbitrarily close to `1`, then `u n / n` tends to `l`. -/
theorem tendsto_div_of_monotone_of_exists_subseq_tendsto_div (u : ‚Ñï ‚Üí ‚Ñù) (l : ‚Ñù)
    (hmono : Monotone u)
    (hlim : ‚àÄ a : ‚Ñù, 1 < a ‚Üí ‚àÉ c : ‚Ñï ‚Üí ‚Ñï, (‚àÄ·∂† n in atTop, (c (n + 1) : ‚Ñù) ‚â§ a * c n) ‚àß
      Tendsto c atTop atTop ‚àß Tendsto (fun n => u (c n) / c n) atTop (ùìù l)) :
    Tendsto (fun n => u n / n) atTop (ùìù l) := by
  /- To check the result up to some `Œµ > 0`, we use a sequence `c` for which the ratio
    `c (N+1) / c N` is bounded by `1 + Œµ`. Sandwiching a given `n` between two consecutive values of
    `c`, say `c N` and `c (N+1)`, one can then bound `u n / n` from above by `u (c N) / c (N - 1)`
    and from below by `u (c (N - 1)) / c N` (using that `u` is monotone), which are both comparable
    to the limit `l` up to `1 + Œµ`.
    We give a version of this proof by clearing out denominators first, to avoid discussing the sign
    of different quantities. -/
  have lnonneg : 0 ‚â§ l := by
    rcases hlim 2 one_lt_two with ‚ü®c, _, ctop, clim‚ü©
    have : Tendsto (fun n => u 0 / c n) atTop (ùìù 0) :=
      tendsto_const_nhds.div_atTop (tendsto_nat_cast_atTop_iff.2 ctop)
    apply le_of_tendsto_of_tendsto' this clim fun n => ?_
    gcongr
    exact hmono (zero_le _)
  have A : ‚àÄ Œµ : ‚Ñù, 0 < Œµ ‚Üí ‚àÄ·∂† n in atTop, u n - n * l ‚â§ Œµ * (1 + Œµ + l) * n := by
    intro Œµ Œµpos
    rcases hlim (1 + Œµ) ((lt_add_iff_pos_right _).2 Œµpos) with ‚ü®c, cgrowth, ctop, clim‚ü©
    have L : ‚àÄ·∂† n in atTop, u (c n) - c n * l ‚â§ Œµ * c n := by
      rw [‚Üê tendsto_sub_nhds_zero_iff, ‚Üê Asymptotics.isLittleO_one_iff ‚Ñù,
        Asymptotics.isLittleO_iff] at clim
      filter_upwards [clim Œµpos, ctop (Ioi_mem_atTop 0)] with n hn cnpos'
      have cnpos : 0 < c n := cnpos'
      calc
        u (c n) - c n * l = (u (c n) / c n - l) * c n := by
          simp only [cnpos.ne', Ne, Nat.cast_eq_zero, not_false_iff, field_simps]
        _ ‚â§ Œµ * c n := by
          gcongr
          refine (le_abs_self _).trans ?_
          simpa using hn
    obtain ‚ü®a, ha‚ü© :
      ‚àÉ a : ‚Ñï, ‚àÄ b : ‚Ñï, a ‚â§ b ‚Üí (c (b + 1) : ‚Ñù) ‚â§ (1 + Œµ) * c b ‚àß u (c b) - c b * l ‚â§ Œµ * c b :=
      eventually_atTop.1 (cgrowth.and L)
    let M := ((Finset.range (a + 1)).image fun i => c i).max' (by simp)
    filter_upwards [Ici_mem_atTop M] with n hn
    have exN : ‚àÉ N, n < c N := by
      rcases (tendsto_atTop.1 ctop (n + 1)).exists with ‚ü®N, hN‚ü©
      exact ‚ü®N, by linarith only [hN]‚ü©
    let N := Nat.find exN
    have ncN : n < c N := Nat.find_spec exN
    have aN : a + 1 ‚â§ N := by
      by_contra! h
      have cNM : c N ‚â§ M := by
        apply le_max'
        apply mem_image_of_mem
        exact mem_range.2 h
      exact lt_irrefl _ ((cNM.trans hn).trans_lt ncN)
    have Npos : 0 < N := lt_of_lt_of_le Nat.succ_pos' aN
    have cNn : c (N - 1) ‚â§ n := by
      have : N - 1 < N := Nat.pred_lt Npos.ne'
      simpa only [not_lt] using Nat.find_min exN this
    have IcN : (c N : ‚Ñù) ‚â§ (1 + Œµ) * c (N - 1) := by
      have A : a ‚â§ N - 1 := by
        apply @Nat.le_of_add_le_add_right a 1 (N - 1)
        rw [Nat.sub_add_cancel Npos]
        exact aN
      have B : N - 1 + 1 = N := Nat.succ_pred_eq_of_pos Npos
      have := (ha _ A).1
      rwa [B] at this
    calc
      u n - n * l ‚â§ u (c N) - c (N - 1) * l := by gcongr; exact hmono ncN.le
      _ = u (c N) - c N * l + (c N - c (N - 1)) * l := by ring
      _ ‚â§ Œµ * c N + Œµ * c (N - 1) * l := by
        gcongr
        ¬∑ exact (ha N (a.le_succ.trans aN)).2
        ¬∑ linarith only [IcN]
      _ ‚â§ Œµ * ((1 + Œµ) * c (N - 1)) + Œµ * c (N - 1) * l := by gcongr
      _ = Œµ * (1 + Œµ + l) * c (N - 1) := by ring
      _ ‚â§ Œµ * (1 + Œµ + l) * n := by gcongr
  have B : ‚àÄ Œµ : ‚Ñù, 0 < Œµ ‚Üí ‚àÄ·∂† n : ‚Ñï in atTop, (n : ‚Ñù) * l - u n ‚â§ Œµ * (1 + l) * n := by
    intro Œµ Œµpos
    rcases hlim (1 + Œµ) ((lt_add_iff_pos_right _).2 Œµpos) with ‚ü®c, cgrowth, ctop, clim‚ü©
    have L : ‚àÄ·∂† n : ‚Ñï in atTop, (c n : ‚Ñù) * l - u (c n) ‚â§ Œµ * c n := by
      rw [‚Üê tendsto_sub_nhds_zero_iff, ‚Üê Asymptotics.isLittleO_one_iff ‚Ñù,
        Asymptotics.isLittleO_iff] at clim
      filter_upwards [clim Œµpos, ctop (Ioi_mem_atTop 0)] with n hn cnpos'
      have cnpos : 0 < c n := cnpos'
      calc
        (c n : ‚Ñù) * l - u (c n) = -(u (c n) / c n - l) * c n := by
          simp only [cnpos.ne', Ne, Nat.cast_eq_zero, not_false_iff, neg_sub, field_simps]
        _ ‚â§ Œµ * c n := by
          gcongr
          refine le_trans (neg_le_abs _) ?_
          simpa using hn
    obtain ‚ü®a, ha‚ü© :
      ‚àÉ a : ‚Ñï,
        ‚àÄ b : ‚Ñï, a ‚â§ b ‚Üí (c (b + 1) : ‚Ñù) ‚â§ (1 + Œµ) * c b ‚àß (c b : ‚Ñù) * l - u (c b) ‚â§ Œµ * c b :=
      eventually_atTop.1 (cgrowth.and L)
    let M := ((Finset.range (a + 1)).image fun i => c i).max' (by simp)
    filter_upwards [Ici_mem_atTop M] with n hn
    have exN : ‚àÉ N, n < c N := by
      rcases (tendsto_atTop.1 ctop (n + 1)).exists with ‚ü®N, hN‚ü©
      exact ‚ü®N, by linarith only [hN]‚ü©
    let N := Nat.find exN
    have ncN : n < c N := Nat.find_spec exN
    have aN : a + 1 ‚â§ N := by
      by_contra! h
      have cNM : c N ‚â§ M := by
        apply le_max'
        apply mem_image_of_mem
        exact mem_range.2 h
      exact lt_irrefl _ ((cNM.trans hn).trans_lt ncN)
    have Npos : 0 < N := lt_of_lt_of_le Nat.succ_pos' aN
    have aN' : a ‚â§ N - 1 := by
      apply @Nat.le_of_add_le_add_right a 1 (N - 1)
      rw [Nat.sub_add_cancel Npos]
      exact aN
    have cNn : c (N - 1) ‚â§ n := by
      have : N - 1 < N := Nat.pred_lt Npos.ne'
      simpa only [not_lt] using Nat.find_min exN this
    calc
      (n : ‚Ñù) * l - u n ‚â§ c N * l - u (c (N - 1)) := by
        gcongr
        exact hmono cNn
      _ ‚â§ (1 + Œµ) * c (N - 1) * l - u (c (N - 1)) := by
        gcongr
        have B : N - 1 + 1 = N := Nat.succ_pred_eq_of_pos Npos
        simpa [B] using (ha _ aN').1
      _ = c (N - 1) * l - u (c (N - 1)) + Œµ * c (N - 1) * l := by ring
      _ ‚â§ Œµ * c (N - 1) + Œµ * c (N - 1) * l := (add_le_add (ha _ aN').2 le_rfl)
      _ = Œµ * (1 + l) * c (N - 1) := by ring
      _ ‚â§ Œµ * (1 + l) * n := by gcongr
  refine' tendsto_order.2 ‚ü®fun d hd => _, fun d hd => _‚ü©
  ¬∑ obtain ‚ü®Œµ, hŒµ, Œµpos‚ü© : ‚àÉ Œµ : ‚Ñù, d + Œµ * (1 + l) < l ‚àß 0 < Œµ := by
      have L : Tendsto (fun Œµ => d + Œµ * (1 + l)) (ùìù[>] 0) (ùìù (d + 0 * (1 + l))) := by
        apply Tendsto.mono_left _ nhdsWithin_le_nhds
        exact tendsto_const_nhds.add (tendsto_id.mul tendsto_const_nhds)
      simp only [zero_mul, add_zero] at L
      exact (((tendsto_order.1 L).2 l hd).and self_mem_nhdsWithin).exists
    filter_upwards [B Œµ Œµpos, Ioi_mem_atTop 0] with n hn npos
    simp_rw [div_eq_inv_mul]
    calc
      d < (n : ‚Ñù)‚Åª¬π * n * (l - Œµ * (1 + l)) := by
        rw [inv_mul_cancel, one_mul]
        ¬∑ linarith only [hŒµ]
        ¬∑ exact Nat.cast_ne_zero.2 (ne_of_gt npos)
      _ = (n : ‚Ñù)‚Åª¬π * (n * l - Œµ * (1 + l) * n) := by ring
      _ ‚â§ (n : ‚Ñù)‚Åª¬π * u n := by gcongr; linarith only [hn]
  ¬∑ obtain ‚ü®Œµ, hŒµ, Œµpos‚ü© : ‚àÉ Œµ : ‚Ñù, l + Œµ * (1 + Œµ + l) < d ‚àß 0 < Œµ := by
      have L : Tendsto (fun Œµ => l + Œµ * (1 + Œµ + l)) (ùìù[>] 0) (ùìù (l + 0 * (1 + 0 + l))) := by
        apply Tendsto.mono_left _ nhdsWithin_le_nhds
        exact
          tendsto_const_nhds.add
            (tendsto_id.mul ((tendsto_const_nhds.add tendsto_id).add tendsto_const_nhds))
      simp only [zero_mul, add_zero] at L
      exact (((tendsto_order.1 L).2 d hd).and self_mem_nhdsWithin).exists
    filter_upwards [A Œµ Œµpos, Ioi_mem_atTop 0] with n hn (npos : 0 < n)
    calc
      u n / n ‚â§ (n * l + Œµ * (1 + Œµ + l) * n) / n := by gcongr; linarith only [hn]
      _ = (l + Œµ * (1 + Œµ + l)) := by field_simp; ring
      _ < d := hŒµ
#align tendsto_div_of_monotone_of_exists_subseq_tendsto_div tendsto_div_of_monotone_of_exists_subseq_tendsto_div

/-- If a monotone sequence `u` is such that `u ‚åäc^n‚åã‚Çä / ‚åäc^n‚åã‚Çä` converges to a limit `l` for all
`c > 1`, then `u n / n` tends to `l`. It is even enough to have the assumption for a sequence of
`c`s converging to `1`. -/
theorem tendsto_div_of_monotone_of_tendsto_div_floor_pow (u : ‚Ñï ‚Üí ‚Ñù) (l : ‚Ñù) (hmono : Monotone u)
    (c : ‚Ñï ‚Üí ‚Ñù) (cone : ‚àÄ k, 1 < c k) (clim : Tendsto c atTop (ùìù 1))
    (hc : ‚àÄ k, Tendsto (fun n : ‚Ñï => u ‚åäc k ^ n‚åã‚Çä / ‚åäc k ^ n‚åã‚Çä) atTop (ùìù l)) :
    Tendsto (fun n => u n / n) atTop (ùìù l) := by
  apply tendsto_div_of_monotone_of_exists_subseq_tendsto_div u l hmono
  intro a ha
  obtain ‚ü®k, hk‚ü© : ‚àÉ k, c k < a := ((tendsto_order.1 clim).2 a ha).exists
  refine'
    ‚ü®fun n => ‚åäc k ^ n‚åã‚Çä, _,
      (tendsto_nat_floor_atTop (Œ± := ‚Ñù)).comp (tendsto_pow_atTop_atTop_of_one_lt (cone k)), hc k‚ü©
  have H : ‚àÄ n : ‚Ñï, (0 : ‚Ñù) < ‚åäc k ^ n‚åã‚Çä := by
    intro n
    refine' zero_lt_one.trans_le _
    simp only [Real.rpow_nat_cast, Nat.one_le_cast, Nat.one_le_floor_iff,
      one_le_pow_of_one_le (cone k).le n]
  have A :
    Tendsto (fun n : ‚Ñï => (‚åäc k ^ (n + 1)‚åã‚Çä : ‚Ñù) / c k ^ (n + 1) * c k / (‚åäc k ^ n‚åã‚Çä / c k ^ n))
      atTop (ùìù (1 * c k / 1)) := by
    refine' Tendsto.div (Tendsto.mul _ tendsto_const_nhds) _ one_ne_zero
    ¬∑ refine' tendsto_nat_floor_div_atTop.comp _
      exact (tendsto_pow_atTop_atTop_of_one_lt (cone k)).comp (tendsto_add_atTop_nat 1)
    ¬∑ refine' tendsto_nat_floor_div_atTop.comp _
      exact tendsto_pow_atTop_atTop_of_one_lt (cone k)
  have B : Tendsto (fun n : ‚Ñï => (‚åäc k ^ (n + 1)‚åã‚Çä : ‚Ñù) / ‚åäc k ^ n‚åã‚Çä) atTop (ùìù (c k)) := by
    simp only [one_mul, div_one] at A
    convert A using 1
    ext1 n
    field_simp [(zero_lt_one.trans (cone k)).ne', (H n).ne']
    ring
  filter_upwards [(tendsto_order.1 B).2 a hk] with n hn
  exact (div_le_iff (H n)).1 hn.le
#align tendsto_div_of_monotone_of_tendsto_div_floor_pow tendsto_div_of_monotone_of_tendsto_div_floor_pow

/-- The sum of `1/(c^i)^2` above a threshold `j` is comparable to `1/j^2`, up to a multiplicative
constant. -/
theorem sum_div_pow_sq_le_div_sq (N : ‚Ñï) {j : ‚Ñù} (hj : 0 < j) {c : ‚Ñù} (hc : 1 < c) :
    (‚àë i in (range N).filter (j < c ^ ¬∑), (1 : ‚Ñù) / (c ^ i) ^ 2) ‚â§ c ^ 3 * (c - 1)‚Åª¬π / j ^ 2 := by
  have cpos : 0 < c := zero_lt_one.trans hc
  have A : (0 : ‚Ñù) < c‚Åª¬π ^ 2 := sq_pos_of_pos (inv_pos.2 cpos)
  have B : c ^ 2 * ((1 : ‚Ñù) - c‚Åª¬π ^ 2)‚Åª¬π ‚â§ c ^ 3 * (c - 1)‚Åª¬π := by
    rw [‚Üê div_eq_mul_inv, ‚Üê div_eq_mul_inv, div_le_div_iff _ (sub_pos.2 hc)]
    swap
    ¬∑ exact sub_pos.2 (pow_lt_one (inv_nonneg.2 cpos.le) (inv_lt_one hc) two_ne_zero)
    have : c ^ 3 = c ^ 2 * c := by ring
    simp only [mul_sub, this, mul_one, inv_pow, sub_le_sub_iff_left]
    rw [mul_assoc, mul_comm c, ‚Üê mul_assoc, mul_inv_cancel (sq_pos_of_pos cpos).ne', one_mul]
    simpa using pow_le_pow_right hc.le one_le_two
  have C : c‚Åª¬π ^ 2 < 1 := pow_lt_one (inv_nonneg.2 cpos.le) (inv_lt_one hc) two_ne_zero
  calc
    (‚àë i in (range N).filter (j < c ^ ¬∑), (1 : ‚Ñù) / (c ^ i) ^ 2) ‚â§
        ‚àë i in Ico ‚åäReal.log j / Real.log c‚åã‚Çä N, (1 : ‚Ñù) / (c ^ i) ^ 2 := by
      refine sum_le_sum_of_subset_of_nonneg (fun i hi ‚Ü¶ ?_) (by intros; positivity)
      simp only [mem_filter, mem_range] at hi
      simp only [hi.1, mem_Ico, and_true_iff]
      apply Nat.floor_le_of_le
      apply le_of_lt
      rw [div_lt_iff (Real.log_pos hc), ‚Üê Real.log_pow]
      exact Real.log_lt_log hj hi.2
    _ = ‚àë i in Ico ‚åäReal.log j / Real.log c‚åã‚Çä N, (c‚Åª¬π ^ 2) ^ i := by
      congr 1 with i
      simp [‚Üê pow_mul, mul_comm]
    _ ‚â§ (c‚Åª¬π ^ 2) ^ ‚åäReal.log j / Real.log c‚åã‚Çä / ((1 : ‚Ñù) - c‚Åª¬π ^ 2) :=
      geom_sum_Ico_le_of_lt_one (sq_nonneg _) C
    _ ‚â§ (c‚Åª¬π ^ 2) ^ (Real.log j / Real.log c - 1) / ((1 : ‚Ñù) - c‚Åª¬π ^ 2) := by
      gcongr
      ¬∑ exact sub_nonneg.2 C.le
      ¬∑ rw [‚Üê Real.rpow_nat_cast]
        exact Real.rpow_le_rpow_of_exponent_ge A C.le (Nat.sub_one_lt_floor _).le
    _ = c ^ 2 * ((1 : ‚Ñù) - c‚Åª¬π ^ 2)‚Åª¬π / j ^ 2 := by
      have I : (c‚Åª¬π ^ 2) ^ (Real.log j / Real.log c) = (1 : ‚Ñù) / j ^ 2 := by
        apply Real.log_injOn_pos (Real.rpow_pos_of_pos A _)
        ¬∑ rw [Set.mem_Ioi]; positivity
        rw [Real.log_rpow A]
        simp only [one_div, Real.log_inv, Real.log_pow, Nat.cast_one, mul_neg, neg_inj]
        field_simp [(Real.log_pos hc).ne']
        ring
      rw [Real.rpow_sub A, I]
      have : c ^ 2 - 1 ‚â† 0 := (sub_pos.2 (one_lt_pow hc two_ne_zero)).ne'
      field_simp [hj.ne', (zero_lt_one.trans hc).ne']
      ring
    _ ‚â§ c ^ 3 * (c - 1)‚Åª¬π / j ^ 2 := by gcongr
#align sum_div_pow_sq_le_div_sq sum_div_pow_sq_le_div_sq

theorem mul_pow_le_nat_floor_pow {c : ‚Ñù} (hc : 1 < c) (i : ‚Ñï) : (1 - c‚Åª¬π) * c ^ i ‚â§ ‚åäc ^ i‚åã‚Çä := by
  have cpos : 0 < c := zero_lt_one.trans hc
  rcases eq_or_ne i 0 with (rfl | hi)
  ¬∑ simp only [pow_zero, Nat.floor_one, Nat.cast_one, mul_one, sub_le_self_iff, inv_nonneg, cpos.le]
  calc
    (1 - c‚Åª¬π) * c ^ i = c ^ i - c ^ i * c‚Åª¬π := by ring
    _ ‚â§ c ^ i - 1 := by
      gcongr
      simpa only [‚Üê div_eq_mul_inv, one_le_div cpos, pow_one] using le_self_pow hc.le hi
    _ ‚â§ ‚åäc ^ i‚åã‚Çä := (Nat.sub_one_lt_floor _).le
#align mul_pow_le_nat_floor_pow mul_pow_le_nat_floor_pow

/-- The sum of `1/‚åäc^i‚åã‚Çä^2` above a threshold `j` is comparable to `1/j^2`, up to a multiplicative
constant. -/
theorem sum_div_nat_floor_pow_sq_le_div_sq (N : ‚Ñï) {j : ‚Ñù} (hj : 0 < j) {c : ‚Ñù} (hc : 1 < c) :
    (‚àë i in (range N).filter (j < ‚åäc ^ ¬∑‚åã‚Çä), (1 : ‚Ñù) / (‚åäc ^ i‚åã‚Çä : ‚Ñù) ^ 2) ‚â§
      c ^ 5 * (c - 1)‚Åª¬π ^ 3 / j ^ 2 := by
  have cpos : 0 < c := zero_lt_one.trans hc
  have A : 0 < 1 - c‚Åª¬π := sub_pos.2 (inv_lt_one hc)
  calc
    (‚àë i in (range N).filter (j < ‚åäc ^ ¬∑‚åã‚Çä), (1 : ‚Ñù) / (‚åäc ^ i‚åã‚Çä : ‚Ñù) ^ 2) ‚â§
        ‚àë i in (range N).filter (j < c ^ ¬∑), (1 : ‚Ñù) / (‚åäc ^ i‚åã‚Çä : ‚Ñù) ^ 2 := by
      apply sum_le_sum_of_subset_of_nonneg
      ¬∑ exact monotone_filter_right _ fun k hk ‚Ü¶ hk.trans_le <| Nat.floor_le (by positivity)
      ¬∑ intros; positivity
    _ ‚â§ ‚àë i in (range N).filter (j < c ^ ¬∑), (1 - c‚Åª¬π)‚Åª¬π ^ 2 * ((1 : ‚Ñù) / (c ^ i) ^ 2) := by
      refine' sum_le_sum fun i _hi => _
      rw [mul_div_assoc', mul_one, div_le_div_iff]; rotate_left
      ¬∑ apply sq_pos_of_pos
        refine' zero_lt_one.trans_le _
        simp only [Nat.le_floor, one_le_pow_of_one_le, hc.le, Nat.one_le_cast, Nat.cast_one]
      ¬∑ exact sq_pos_of_pos (pow_pos cpos _)
      rw [one_mul, ‚Üê mul_pow]
      gcongr
      rw [‚Üê div_eq_inv_mul, le_div_iff A, mul_comm]
      exact mul_pow_le_nat_floor_pow hc i
    _ ‚â§ (1 - c‚Åª¬π)‚Åª¬π ^ 2 * (c ^ 3 * (c - 1)‚Åª¬π) / j ^ 2 := by
      rw [‚Üê mul_sum, ‚Üê mul_div_assoc']
      gcongr
      exact sum_div_pow_sq_le_div_sq N hj hc
    _ = c ^ 5 * (c - 1)‚Åª¬π ^ 3 / j ^ 2 := by
      congr 1
      field_simp [(sub_pos.2 hc).ne']
      ring!
#align sum_div_nat_floor_pow_sq_le_div_sq sum_div_nat_floor_pow_sq_le_div_sq
