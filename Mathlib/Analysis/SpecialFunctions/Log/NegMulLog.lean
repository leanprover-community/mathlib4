/-
Copyright (c) 2023 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.Analysis.SpecialFunctions.Log.Deriv
import Mathlib.Analysis.SpecialFunctions.Pow.Asymptotics

/-!
# The functions `x ‚Ü¶ x * log x` and `x ‚Ü¶ - x * log x`

The purpose of this file is to record basic analytic properties of the functions
$$x \to \pm x * \log x$$, for use in the theory of Shannon entropy.

## TODO

Define `NegMulLog := x ‚Ü¶ - x * log x` and state its properties.

-/

open scoped Topology

namespace Real

lemma tendsto_log_mul_nhds_zero_left :
    Filter.Tendsto (fun x ‚Ü¶ log x * x) (ùìù[<] 0) (ùìù 0) := by
  have h := tendsto_log_mul_rpow_nhds_zero zero_lt_one
  simp only [rpow_one] at h
  have h_eq : ‚àÄ x ‚àà Set.Iio 0, (- (fun x ‚Ü¶ log x * x) ‚àò (fun x ‚Ü¶ |x|)) x = log x * x := by
    intro x hx
    simp only [Set.mem_Iio] at hx
    simp only [Pi.neg_apply, Function.comp_apply, log_abs]
    rw [abs_of_nonpos hx.le]
    simp only [mul_neg, neg_neg]
  refine tendsto_nhdsWithin_congr h_eq ?_
  rw [‚Üê neg_zero]
  refine Filter.Tendsto.neg ?_
  simp only [neg_zero]
  refine h.comp ?_
  refine tendsto_abs_nhdsWithin_zero.mono_left ?_
  refine nhdsWithin_mono 0 (fun x hx ‚Ü¶ ?_)
  simp only [Set.mem_Iio] at hx
  simp only [Set.mem_compl_iff, Set.mem_singleton_iff, hx.ne, not_false_eq_true]

lemma continuous_mul_log : Continuous fun x ‚Ü¶ x * log x := by
  rw [continuous_iff_continuousAt]
  intro x
  by_cases hx : x = 0
  swap; ¬∑ exact (continuous_id'.continuousAt).mul (continuousAt_log hx)
  rw [hx]
  rw [ContinuousAt, zero_mul]
  suffices Filter.Tendsto (fun x ‚Ü¶ log x * x) (ùìù 0) (ùìù 0) by
    exact this.congr (fun x ‚Ü¶ by rw [mul_comm])
  nth_rewrite 1 [‚Üê nhdsWithin_univ]
  have : (Set.univ : Set ‚Ñù) = Set.Iio 0 ‚à™ Set.Ioi 0 ‚à™ {0} := by ext; simp [em]
  rw [this, nhdsWithin_union, nhdsWithin_union]
  simp only [nhdsWithin_singleton, sup_le_iff, Filter.nonpos_iff, Filter.tendsto_sup]
  have h := tendsto_log_mul_rpow_nhds_zero zero_lt_one
  simp only [rpow_one] at h
  have h' : Filter.Tendsto (fun x ‚Ü¶ log x * x) (ùìù[<] 0) (ùìù 0) := tendsto_log_mul_nhds_zero_left
  refine ‚ü®‚ü®h', h‚ü©, ?_‚ü© -- ‚ä¢ Filter.Tendsto (fun x ‚Ü¶ log x * x) (pure 0) (ùìù 0)
  rw [Filter.tendsto_pure_left, mul_zero]
  intro s hs
  obtain ‚ü®t, hts, _, h_zero_mem‚ü© := mem_nhds_iff.mp hs
  exact hts h_zero_mem

lemma differentiableOn_mul_log : DifferentiableOn ‚Ñù (fun x ‚Ü¶ x * log x) {0}·∂ú :=
  differentiable_id'.differentiableOn.mul differentiableOn_log

lemma deriv_mul_log {x : ‚Ñù} (hx : x ‚â† 0) : deriv (fun x ‚Ü¶ x * log x) x = log x + 1 := by
  rw [deriv_mul differentiableAt_id' (differentiableAt_log hx)]
  simp only [deriv_id'', one_mul, deriv_log', ne_eq, add_right_inj]
  exact mul_inv_cancel hx

lemma deriv2_mul_log {x : ‚Ñù} (hx : x ‚â† 0) : deriv^[2] (fun x ‚Ü¶ x * log x) x = x‚Åª¬π := by
  simp only [Function.iterate_succ, Function.iterate_zero, Function.comp.left_id,
    Function.comp_apply]
  suffices ‚àÄ·∂† y in (ùìù x), deriv (fun x ‚Ü¶ x * log x) y = log y + 1 by
    refine (Filter.EventuallyEq.deriv_eq this).trans ?_
    rw [deriv_add_const, deriv_log x]
  suffices ‚àÄ·∂† y in (ùìù x), y ‚â† 0 by
    filter_upwards [this] with y hy
    exact deriv_mul_log hy
  exact eventually_ne_nhds hx

lemma strictConvexOn_mul_log : StrictConvexOn ‚Ñù (Set.Ici (0 : ‚Ñù)) (fun x ‚Ü¶ x * log x) := by
  refine strictConvexOn_of_deriv2_pos (convex_Ici 0) (continuous_mul_log.continuousOn) ?_
  intro x hx
  simp only [Set.nonempty_Iio, interior_Ici', Set.mem_Ioi] at hx
  rw [deriv2_mul_log hx.ne']
  positivity

lemma convexOn_mul_log : ConvexOn ‚Ñù (Set.Ici (0 : ‚Ñù)) (fun x ‚Ü¶ x * log x) :=
  strictConvexOn_mul_log.convexOn

lemma mul_log_nonneg {x : ‚Ñù} (hx : 1 ‚â§ x) : 0 ‚â§ x * log x :=
  mul_nonneg (zero_le_one.trans hx) (log_nonneg hx)

end Real
