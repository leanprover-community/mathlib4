/-
Copyright (c) 2018 Chris Hughes. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Hughes, Abhimanyu Pallavi Sudhir, Jean Lo, Calle S√∂nne
-/
import Mathlib.Analysis.Calculus.Deriv.Pow
import Mathlib.Analysis.SpecialFunctions.Log.Basic
import Mathlib.Analysis.SpecialFunctions.ExpDeriv

#align_import analysis.special_functions.log.deriv from "leanprover-community/mathlib"@"3bce8d800a6f2b8f63fe1e588fd76a9ff4adcebe"

/-!
# Derivative and series expansion of real logarithm

In this file we prove that `Real.log` is infinitely smooth at all nonzero `x : ‚Ñù`. We also prove
that the series `‚àë' n : ‚Ñï, x ^ (n + 1) / (n + 1)` converges to `(-Real.log (1 - x))` for all
`x : ‚Ñù`, `|x| < 1`.

## Tags

logarithm, derivative
-/


open Filter Finset Set

open scoped Topology BigOperators

namespace Real

variable {x : ‚Ñù}

theorem hasStrictDerivAt_log_of_pos (hx : 0 < x) : HasStrictDerivAt log x‚Åª¬π x := by
  have : HasStrictDerivAt log (exp <| log x)‚Åª¬π x :=
    (hasStrictDerivAt_exp <| log x).of_local_left_inverse (continuousAt_log hx.ne')
        (ne_of_gt <| exp_pos _) <|
      Eventually.mono (lt_mem_nhds hx) @exp_log
  rwa [exp_log hx] at this
#align real.has_strict_deriv_at_log_of_pos Real.hasStrictDerivAt_log_of_pos

theorem hasStrictDerivAt_log (hx : x ‚â† 0) : HasStrictDerivAt log x‚Åª¬π x := by
  cases' hx.lt_or_lt with hx hx
  ¬∑ convert (hasStrictDerivAt_log_of_pos (neg_pos.mpr hx)).comp x (hasStrictDerivAt_neg x) using 1
    ¬∑ ext y; exact (log_neg_eq_log y).symm
    ¬∑ field_simp [hx.ne]
  ¬∑ exact hasStrictDerivAt_log_of_pos hx
#align real.has_strict_deriv_at_log Real.hasStrictDerivAt_log

theorem hasDerivAt_log (hx : x ‚â† 0) : HasDerivAt log x‚Åª¬π x :=
  (hasStrictDerivAt_log hx).hasDerivAt
#align real.has_deriv_at_log Real.hasDerivAt_log

theorem differentiableAt_log (hx : x ‚â† 0) : DifferentiableAt ‚Ñù log x :=
  (hasDerivAt_log hx).differentiableAt
#align real.differentiable_at_log Real.differentiableAt_log

theorem differentiableOn_log : DifferentiableOn ‚Ñù log {0}·∂ú := fun _x hx =>
  (differentiableAt_log hx).differentiableWithinAt
#align real.differentiable_on_log Real.differentiableOn_log

@[simp]
theorem differentiableAt_log_iff : DifferentiableAt ‚Ñù log x ‚Üî x ‚â† 0 :=
  ‚ü®fun h => continuousAt_log_iff.1 h.continuousAt, differentiableAt_log‚ü©
#align real.differentiable_at_log_iff Real.differentiableAt_log_iff

theorem deriv_log (x : ‚Ñù) : deriv log x = x‚Åª¬π :=
  if hx : x = 0 then by
    rw [deriv_zero_of_not_differentiableAt (differentiableAt_log_iff.not_left.2 hx), hx, inv_zero]
  else (hasDerivAt_log hx).deriv
#align real.deriv_log Real.deriv_log

@[simp]
theorem deriv_log' : deriv log = Inv.inv :=
  funext deriv_log
#align real.deriv_log' Real.deriv_log'

theorem contDiffOn_log {n : ‚Ñï‚àû} : ContDiffOn ‚Ñù n log {0}·∂ú := by
  suffices : ContDiffOn ‚Ñù ‚ä§ log {0}·∂ú; exact this.of_le le_top
  refine' (contDiffOn_top_iff_deriv_of_isOpen isOpen_compl_singleton).2 _
  simp [differentiableOn_log, contDiffOn_inv]
#align real.cont_diff_on_log Real.contDiffOn_log

theorem contDiffAt_log {n : ‚Ñï‚àû} : ContDiffAt ‚Ñù n log x ‚Üî x ‚â† 0 :=
  ‚ü®fun h => continuousAt_log_iff.1 h.continuousAt, fun hx =>
    (contDiffOn_log x hx).contDiffAt <| IsOpen.mem_nhds isOpen_compl_singleton hx‚ü©
#align real.cont_diff_at_log Real.contDiffAt_log

end Real

section LogDifferentiable

open Real

section deriv

variable {f : ‚Ñù ‚Üí ‚Ñù} {x f' : ‚Ñù} {s : Set ‚Ñù}

theorem HasDerivWithinAt.log (hf : HasDerivWithinAt f f' s x) (hx : f x ‚â† 0) :
    HasDerivWithinAt (fun y => log (f y)) (f' / f x) s x := by
  rw [div_eq_inv_mul]
  exact (hasDerivAt_log hx).comp_hasDerivWithinAt x hf
#align has_deriv_within_at.log HasDerivWithinAt.log

theorem HasDerivAt.log (hf : HasDerivAt f f' x) (hx : f x ‚â† 0) :
    HasDerivAt (fun y => log (f y)) (f' / f x) x := by
  rw [‚Üê hasDerivWithinAt_univ] at *
  exact hf.log hx
#align has_deriv_at.log HasDerivAt.log

theorem HasStrictDerivAt.log (hf : HasStrictDerivAt f f' x) (hx : f x ‚â† 0) :
    HasStrictDerivAt (fun y => log (f y)) (f' / f x) x := by
  rw [div_eq_inv_mul]
  exact (hasStrictDerivAt_log hx).comp x hf
#align has_strict_deriv_at.log HasStrictDerivAt.log

theorem derivWithin.log (hf : DifferentiableWithinAt ‚Ñù f s x) (hx : f x ‚â† 0)
    (hxs : UniqueDiffWithinAt ‚Ñù s x) :
    derivWithin (fun x => log (f x)) s x = derivWithin f s x / f x :=
  (hf.hasDerivWithinAt.log hx).derivWithin hxs
#align deriv_within.log derivWithin.log

@[simp]
theorem deriv.log (hf : DifferentiableAt ‚Ñù f x) (hx : f x ‚â† 0) :
    deriv (fun x => log (f x)) x = deriv f x / f x :=
  (hf.hasDerivAt.log hx).deriv
#align deriv.log deriv.log

end deriv

section fderiv

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] {f : E ‚Üí ‚Ñù} {x : E} {f' : E ‚ÜíL[‚Ñù] ‚Ñù}
  {s : Set E}

theorem HasFDerivWithinAt.log (hf : HasFDerivWithinAt f f' s x) (hx : f x ‚â† 0) :
    HasFDerivWithinAt (fun x => log (f x)) ((f x)‚Åª¬π ‚Ä¢ f') s x :=
  (hasDerivAt_log hx).comp_hasFDerivWithinAt x hf
#align has_fderiv_within_at.log HasFDerivWithinAt.log

theorem HasFDerivAt.log (hf : HasFDerivAt f f' x) (hx : f x ‚â† 0) :
    HasFDerivAt (fun x => log (f x)) ((f x)‚Åª¬π ‚Ä¢ f') x :=
  (hasDerivAt_log hx).comp_hasFDerivAt x hf
#align has_fderiv_at.log HasFDerivAt.log

theorem HasStrictFDerivAt.log (hf : HasStrictFDerivAt f f' x) (hx : f x ‚â† 0) :
    HasStrictFDerivAt (fun x => log (f x)) ((f x)‚Åª¬π ‚Ä¢ f') x :=
  (hasStrictDerivAt_log hx).comp_hasStrictFDerivAt x hf
#align has_strict_fderiv_at.log HasStrictFDerivAt.log

theorem DifferentiableWithinAt.log (hf : DifferentiableWithinAt ‚Ñù f s x) (hx : f x ‚â† 0) :
    DifferentiableWithinAt ‚Ñù (fun x => log (f x)) s x :=
  (hf.hasFDerivWithinAt.log hx).differentiableWithinAt
#align differentiable_within_at.log DifferentiableWithinAt.log

@[simp]
theorem DifferentiableAt.log (hf : DifferentiableAt ‚Ñù f x) (hx : f x ‚â† 0) :
    DifferentiableAt ‚Ñù (fun x => log (f x)) x :=
  (hf.hasFDerivAt.log hx).differentiableAt
#align differentiable_at.log DifferentiableAt.log

theorem ContDiffAt.log {n} (hf : ContDiffAt ‚Ñù n f x) (hx : f x ‚â† 0) :
    ContDiffAt ‚Ñù n (fun x => log (f x)) x :=
  (contDiffAt_log.2 hx).comp x hf
#align cont_diff_at.log ContDiffAt.log

theorem ContDiffWithinAt.log {n} (hf : ContDiffWithinAt ‚Ñù n f s x) (hx : f x ‚â† 0) :
    ContDiffWithinAt ‚Ñù n (fun x => log (f x)) s x :=
  (contDiffAt_log.2 hx).comp_contDiffWithinAt x hf
#align cont_diff_within_at.log ContDiffWithinAt.log

theorem ContDiffOn.log {n} (hf : ContDiffOn ‚Ñù n f s) (hs : ‚àÄ x ‚àà s, f x ‚â† 0) :
    ContDiffOn ‚Ñù n (fun x => log (f x)) s := fun x hx => (hf x hx).log (hs x hx)
#align cont_diff_on.log ContDiffOn.log

theorem ContDiff.log {n} (hf : ContDiff ‚Ñù n f) (h : ‚àÄ x, f x ‚â† 0) :
    ContDiff ‚Ñù n fun x => log (f x) :=
  contDiff_iff_contDiffAt.2 fun x => hf.contDiffAt.log (h x)
#align cont_diff.log ContDiff.log

theorem DifferentiableOn.log (hf : DifferentiableOn ‚Ñù f s) (hx : ‚àÄ x ‚àà s, f x ‚â† 0) :
    DifferentiableOn ‚Ñù (fun x => log (f x)) s := fun x h => (hf x h).log (hx x h)
#align differentiable_on.log DifferentiableOn.log

@[simp]
theorem Differentiable.log (hf : Differentiable ‚Ñù f) (hx : ‚àÄ x, f x ‚â† 0) :
    Differentiable ‚Ñù fun x => log (f x) := fun x => (hf x).log (hx x)
#align differentiable.log Differentiable.log

theorem fderivWithin.log (hf : DifferentiableWithinAt ‚Ñù f s x) (hx : f x ‚â† 0)
    (hxs : UniqueDiffWithinAt ‚Ñù s x) :
    fderivWithin ‚Ñù (fun x => log (f x)) s x = (f x)‚Åª¬π ‚Ä¢ fderivWithin ‚Ñù f s x :=
  (hf.hasFDerivWithinAt.log hx).fderivWithin hxs
#align fderiv_within.log fderivWithin.log

@[simp]
theorem fderiv.log (hf : DifferentiableAt ‚Ñù f x) (hx : f x ‚â† 0) :
    fderiv ‚Ñù (fun x => log (f x)) x = (f x)‚Åª¬π ‚Ä¢ fderiv ‚Ñù f x :=
  (hf.hasFDerivAt.log hx).fderiv
#align fderiv.log fderiv.log

end fderiv

end LogDifferentiable

namespace Real

/-- The function `x * log (1 + t / x)` tends to `t` at `+‚àû`. -/
theorem tendsto_mul_log_one_plus_div_atTop (t : ‚Ñù) :
    Tendsto (fun x => x * log (1 + t / x)) atTop (ùìù t) := by
  have h‚ÇÅ : Tendsto (fun h => h‚Åª¬π * log (1 + t * h)) (ùìù[‚â†] 0) (ùìù t) := by
    simpa [hasDerivAt_iff_tendsto_slope, slope_fun_def] using
      (((hasDerivAt_id (0 : ‚Ñù)).const_mul t).const_add 1).log (by simp)
  have h‚ÇÇ : Tendsto (fun x : ‚Ñù => x‚Åª¬π) atTop (ùìù[‚â†] 0) :=
    tendsto_inv_atTop_zero'.mono_right (nhdsWithin_mono _ fun x hx => (Set.mem_Ioi.mp hx).ne')
  simpa only [(¬∑ ‚àò ¬∑), inv_inv] using h‚ÇÅ.comp h‚ÇÇ
#align real.tendsto_mul_log_one_plus_div_at_top Real.tendsto_mul_log_one_plus_div_atTop

open scoped BigOperators

/-- A crude lemma estimating the difference between `log (1-x)` and its Taylor series at `0`,
where the main point of the bound is that it tends to `0`. The goal is to deduce the series
expansion of the logarithm, in `hasSum_pow_div_log_of_abs_lt_1`.

Porting note: TODO: use one of generic theorems about Taylor's series to prove this estimate.
-/
theorem abs_log_sub_add_sum_range_le {x : ‚Ñù} (h : |x| < 1) (n : ‚Ñï) :
    |(‚àë i in range n, x ^ (i + 1) / (i + 1)) + log (1 - x)| ‚â§ |x| ^ (n + 1) / (1 - |x|) := by
  /- For the proof, we show that the derivative of the function to be estimated is small,
    and then apply the mean value inequality. -/
  let F : ‚Ñù ‚Üí ‚Ñù := fun x => (‚àë i in range n, x ^ (i + 1) / (i + 1)) + log (1 - x)
  let F' : ‚Ñù ‚Üí ‚Ñù := fun x ‚Ü¶ -x ^ n / (1 - x)
  -- Porting note: In `mathlib3`, the proof used `deriv`/`DifferentiableAt`. `simp` failed to
  -- compute `deriv`, so I changed the proof to use `HasDerivAt` instead
  -- First step: compute the derivative of `F`
  have A : ‚àÄ y ‚àà Ioo (-1 : ‚Ñù) 1, HasDerivAt F (F' y) y := fun y hy ‚Ü¶ by
    have : HasDerivAt F ((‚àë i in range n, ‚Üë(i + 1) * y ^ i / (‚Üëi + 1)) + (-1) / (1 - y)) y :=
      .add (.sum fun i _ ‚Ü¶ (hasDerivAt_pow (i + 1) y).div_const ((i : ‚Ñù) + 1))
        (((hasDerivAt_id y).const_sub _).log <| sub_ne_zero.2 hy.2.ne')
    convert this using 1
    calc
      -y ^ n / (1 - y) = ‚àë i in Finset.range n, y ^ i + -1 / (1 - y) := by
        field_simp [geom_sum_eq hy.2.ne, sub_ne_zero.2 hy.2.ne, sub_ne_zero.2 hy.2.ne']
        ring
      _ = ‚àë i in Finset.range n, ‚Üë(i + 1) * y ^ i / (‚Üëi + 1) + -1 / (1 - y) := by
        congr with i
        rw [Nat.cast_succ, mul_div_cancel_left _ (Nat.cast_add_one_pos i).ne']
  -- second step: show that the derivative of `F` is small
  have B : ‚àÄ y ‚àà Icc (-|x|) |x|, |F' y| ‚â§ |x| ^ n / (1 - |x|) := fun y hy ‚Ü¶
    calc
      |F' y| = |y| ^ n / |1 - y| := by simp [abs_div]
      _ ‚â§ |x| ^ n / (1 - |x|) := by
        have : |y| ‚â§ |x| := abs_le.2 hy
        have : 1 - |x| ‚â§ |1 - y| := le_trans (by linarith [hy.2]) (le_abs_self _)
        gcongr
        exact sub_pos.2 h
  -- third step: apply the mean value inequality
  have C : ‚ÄñF x - F 0‚Äñ ‚â§ |x| ^ n / (1 - |x|) * ‚Äñx - 0‚Äñ := by
    refine Convex.norm_image_sub_le_of_norm_hasDerivWithin_le
      (fun y hy ‚Ü¶ (A _ ?_).hasDerivWithinAt) B (convex_Icc _ _) ?_ ?_
    ¬∑ exact Icc_subset_Ioo (neg_lt_neg h) h hy
    ¬∑ simp
    ¬∑ simp [le_abs_self x, neg_le.mp (neg_le_abs x)]
  -- fourth step: conclude by massaging the inequality of the third step
  simpa [div_mul_eq_mul_div, pow_succ'] using C
#align real.abs_log_sub_add_sum_range_le Real.abs_log_sub_add_sum_range_le

/-- Power series expansion of the logarithm around `1`. -/
theorem hasSum_pow_div_log_of_abs_lt_one {x : ‚Ñù} (h : |x| < 1) :
    HasSum (fun n : ‚Ñï => x ^ (n + 1) / (n + 1)) (-log (1 - x)) := by
  rw [Summable.hasSum_iff_tendsto_nat]
  show Tendsto (fun n : ‚Ñï => ‚àë i : ‚Ñï in range n, x ^ (i + 1) / (i + 1)) atTop (ùìù (-log (1 - x)))
  ¬∑ rw [tendsto_iff_norm_sub_tendsto_zero]
    simp only [norm_eq_abs, sub_neg_eq_add]
    refine' squeeze_zero (fun n => abs_nonneg _) (abs_log_sub_add_sum_range_le h) _
    suffices Tendsto (fun t : ‚Ñï => |x| ^ (t + 1) / (1 - |x|)) atTop (ùìù (|x| * 0 / (1 - |x|))) by
      simpa
    simp only [pow_succ]
    refine' (tendsto_const_nhds.mul _).div_const _
    exact tendsto_pow_atTop_nhds_zero_of_lt_one (abs_nonneg _) h
  show Summable fun n : ‚Ñï => x ^ (n + 1) / (n + 1)
  ¬∑ refine' .of_norm_bounded _ (summable_geometric_of_lt_one (abs_nonneg _) h) fun i => _
    calc
      ‚Äñx ^ (i + 1) / (i + 1)‚Äñ = |x| ^ (i + 1) / (i + 1) := by
        have : (0 : ‚Ñù) ‚â§ i + 1 := le_of_lt (Nat.cast_add_one_pos i)
        rw [norm_eq_abs, abs_div, ‚Üê pow_abs, abs_of_nonneg this]
      _ ‚â§ |x| ^ (i + 1) / (0 + 1) := by
        gcongr
        exact i.cast_nonneg
      _ ‚â§ |x| ^ i := by
        simpa [pow_succ'] using mul_le_of_le_one_right (pow_nonneg (abs_nonneg x) i) (le_of_lt h)
#align real.has_sum_pow_div_log_of_abs_lt_1 Real.hasSum_pow_div_log_of_abs_lt_one
@[deprecated] alias hasSum_pow_div_log_of_abs_lt_1 := hasSum_pow_div_log_of_abs_lt_one

/-- Power series expansion of `log(1 + x) - log(1 - x)` for `|x| < 1`. -/
theorem hasSum_log_sub_log_of_abs_lt_one {x : ‚Ñù} (h : |x| < 1) :
    HasSum (fun k : ‚Ñï => (2 : ‚Ñù) * (1 / (2 * k + 1)) * x ^ (2 * k + 1))
      (log (1 + x) - log (1 - x)) := by
  set term := fun n : ‚Ñï => -1 * ((-x) ^ (n + 1) / ((n : ‚Ñù) + 1)) + x ^ (n + 1) / (n + 1)
  have h_term_eq_goal :
      term ‚àò (2 * ¬∑) = fun k : ‚Ñï => 2 * (1 / (2 * k + 1)) * x ^ (2 * k + 1) := by
    ext n
    dsimp only [(¬∑ ‚àò ¬∑)]
    rw [Odd.neg_pow (‚ü®n, rfl‚ü© : Odd (2 * n + 1)) x]
    push_cast
    ring_nf
  rw [‚Üê h_term_eq_goal, (mul_right_injective‚ÇÄ (two_ne_zero' ‚Ñï)).hasSum_iff]
  ¬∑ have h‚ÇÅ := (hasSum_pow_div_log_of_abs_lt_one (Eq.trans_lt (abs_neg x) h)).mul_left (-1)
    convert h‚ÇÅ.add (hasSum_pow_div_log_of_abs_lt_one h) using 1
    ring_nf
  ¬∑ intro m hm
    rw [range_two_mul, Set.mem_setOf_eq, ‚Üê Nat.even_add_one] at hm
    dsimp
    rw [Even.neg_pow hm, neg_one_mul, neg_add_self]
#align real.has_sum_log_sub_log_of_abs_lt_1 Real.hasSum_log_sub_log_of_abs_lt_one
@[deprecated] alias hasSum_log_sub_log_of_abs_lt_1 := hasSum_log_sub_log_of_abs_lt_one

/-- Expansion of `log (1 + a‚Åª¬π)` as a series in powers of `1 / (2 * a + 1)`. -/
theorem hasSum_log_one_add_inv {a : ‚Ñù} (h : 0 < a) :
    HasSum (fun k : ‚Ñï => (2 : ‚Ñù) * (1 / (2 * k + 1)) * (1 / (2 * a + 1)) ^ (2 * k + 1))
      (log (1 + a‚Åª¬π)) := by
  have h‚ÇÅ : |1 / (2 * a + 1)| < 1 := by
    rw [abs_of_pos, div_lt_one]
    ¬∑ linarith
    ¬∑ linarith
    ¬∑ exact div_pos one_pos (by linarith)
  convert hasSum_log_sub_log_of_abs_lt_one h‚ÇÅ using 1
  have h‚ÇÇ : (2 : ‚Ñù) * a + 1 ‚â† 0 := by linarith
  have h‚ÇÉ := h.ne'
  rw [‚Üê log_div]
  ¬∑ congr
    field_simp
    linarith
  ¬∑ field_simp
    linarith
  ¬∑ field_simp
#align real.has_sum_log_one_add_inv Real.hasSum_log_one_add_inv

end Real
