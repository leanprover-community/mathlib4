/-
Copyright (c) 2023 Michael Stoll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Stoll
-/
import Mathlib.Analysis.Complex.Convex
import Mathlib.Analysis.SpecialFunctions.Integrals
import Mathlib.Analysis.Calculus.Deriv.Shift

/-!
# Estimates for the complex logarithm

We show that `log (1+z)` differs from its Taylor polynomial up to degree `n` by at most
`‚Äñz‚Äñ^(n+1)/((n+1)*(1-‚Äñz‚Äñ))` when `‚Äñz‚Äñ < 1`; see `Complex.norm_log_sub_logTaylor_le`.

To this end, we derive the representation of `log (1+z)` as the integral of `1/(1+tz)`
over the unit interval (`Complex.log_eq_integral`) and introduce notation
`Complex.logTaylor n` for the Taylor polynomial up to degree `n-1`.

## TODO

Refactor using general Taylor series theory, once this exists in Mathlib.
-/

namespace Complex

/-!
### Integral representation of the complex log
-/

lemma continuousOn_one_add_mul_inv {z : ‚ÑÇ} (hz : 1 + z ‚àà slitPlane) :
    ContinuousOn (fun t : ‚Ñù ‚Ü¶ (1 + t ‚Ä¢ z)‚Åª¬π) (Set.Icc 0 1) :=
  ContinuousOn.inv‚ÇÄ (by fun_prop)
    (fun _ ht ‚Ü¶ slitPlane_ne_zero <| StarConvex.add_smul_mem starConvex_one_slitPlane hz ht.1 ht.2)

open intervalIntegral in
/-- Represent `log (1 + z)` as an integral over the unit interval -/
lemma log_eq_integral {z : ‚ÑÇ} (hz : 1 + z ‚àà slitPlane) :
    log (1 + z) = z * ‚à´ (t : ‚Ñù) in (0 : ‚Ñù)..1, (1 + t ‚Ä¢ z)‚Åª¬π := by
  convert (integral_unitInterval_deriv_eq_sub (continuousOn_one_add_mul_inv hz)
    (fun _ ht ‚Ü¶ hasDerivAt_log <|
      StarConvex.add_smul_mem starConvex_one_slitPlane hz ht.1 ht.2)).symm using 1
  simp only [log_one, sub_zero]

/-- Represent `log (1 - z)‚Åª¬π` as an integral over the unit interval -/
lemma log_inv_eq_integral {z : ‚ÑÇ} (hz : 1 - z ‚àà slitPlane) :
    log (1 - z)‚Åª¬π = z * ‚à´ (t : ‚Ñù) in (0 : ‚Ñù)..1, (1 - t ‚Ä¢ z)‚Åª¬π := by
  rw [sub_eq_add_neg 1 z] at hz ‚ä¢
  rw [log_inv _ <| slitPlane_arg_ne_pi hz, neg_eq_iff_eq_neg, ‚Üê neg_mul]
  convert log_eq_integral hz using 5
  rw [sub_eq_add_neg, smul_neg]

/-!
### The Taylor polynomials of the logarithm
-/

/-- The `n`th Taylor polynomial of `log` at `1`, as a function `‚ÑÇ ‚Üí ‚ÑÇ` -/
noncomputable
def logTaylor (n : ‚Ñï) : ‚ÑÇ ‚Üí ‚ÑÇ := fun z ‚Ü¶ ‚àë j ‚àà Finset.range n, (-1) ^ (j + 1) * z ^ j / j

lemma logTaylor_zero : logTaylor 0 = fun _ ‚Ü¶ 0 := by
  funext
  simp only [logTaylor, Finset.range_zero, ‚Üê Nat.not_even_iff_odd, Int.cast_pow, Int.cast_neg,
    Int.cast_one, Finset.sum_empty]

lemma logTaylor_succ (n : ‚Ñï) :
    logTaylor (n + 1) = logTaylor n + (fun z : ‚ÑÇ ‚Ü¶ (-1) ^ (n + 1) * z ^ n / n) := by
  funext
  simpa only [logTaylor] using Finset.sum_range_succ ..

lemma logTaylor_at_zero (n : ‚Ñï) : logTaylor n 0 = 0 := by
  induction n with
  | zero => simp [logTaylor_zero]
  | succ n ih => simpa [logTaylor_succ, ih] using ne_or_eq n 0

lemma hasDerivAt_logTaylor (n : ‚Ñï) (z : ‚ÑÇ) :
    HasDerivAt (logTaylor (n + 1)) (‚àë j ‚àà Finset.range n, (-1) ^ j * z ^ j) z := by
  induction n with
  | zero => simp [logTaylor_succ, logTaylor_zero, Pi.add_def, hasDerivAt_const]
  | succ n ih =>
    rw [logTaylor_succ]
    simp only [cpow_natCast, Nat.cast_add, Nat.cast_one, ‚Üê Nat.not_even_iff_odd,
      Finset.sum_range_succ, (show (-1) ^ (n + 1 + 1) = (-1) ^ n by ring)]
    refine HasDerivAt.add ih ?_
    simp only [‚Üê Nat.not_even_iff_odd, Int.cast_pow, Int.cast_neg, Int.cast_one, mul_div_assoc]
    have : HasDerivAt (fun x : ‚ÑÇ ‚Ü¶ (x ^ (n + 1) / (n + 1))) (z ^ n) z := by
      simp_rw [div_eq_mul_inv]
      convert HasDerivAt.mul_const (hasDerivAt_pow (n + 1) z) (((n : ‚ÑÇ) + 1)‚Åª¬π) using 1
      field_simp [Nat.cast_add_one_ne_zero n]
    convert HasDerivAt.const_mul _ this using 2
    ring

/-!
### Bounds for the difference between log and its Taylor polynomials
-/

lemma hasDerivAt_log_sub_logTaylor (n : ‚Ñï) {z : ‚ÑÇ} (hz : 1 + z ‚àà slitPlane) :
    HasDerivAt (fun z : ‚ÑÇ ‚Ü¶ log (1 + z) - logTaylor (n + 1) z) ((-z) ^ n * (1 + z)‚Åª¬π) z := by
  convert ((hasDerivAt_log hz).comp_const_add 1 z).sub (hasDerivAt_logTaylor n z) using 1
  have hz' : -z ‚â† 1 := by
    intro H
    rw [neg_eq_iff_eq_neg] at H
    simp only [H, add_neg_cancel] at hz
    exact slitPlane_ne_zero hz rfl
  simp_rw [‚Üê mul_pow, neg_one_mul, geom_sum_eq hz', ‚Üê neg_add', div_neg, add_comm z]
  field_simp [slitPlane_ne_zero hz]

/-- Give a bound on `‚Äñ(1 + t * z)‚Åª¬π‚Äñ` for `0 ‚â§ t ‚â§ 1` and `‚Äñz‚Äñ < 1`. -/
lemma norm_one_add_mul_inv_le {t : ‚Ñù} (ht : t ‚àà Set.Icc 0 1) {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ < 1) :
    ‚Äñ(1 + t * z)‚Åª¬π‚Äñ ‚â§ (1 - ‚Äñz‚Äñ)‚Åª¬π := by
  rw [Set.mem_Icc] at ht
  rw [norm_inv]
  refine inv_anti‚ÇÄ (by linarith) ?_
  calc 1 - ‚Äñz‚Äñ
    _ ‚â§ 1 - t * ‚Äñz‚Äñ := by
      nlinarith [norm_nonneg z]
    _ = 1 - ‚Äñt * z‚Äñ := by
      rw [norm_mul, Complex.norm_of_nonneg ht.1]
    _ ‚â§ ‚Äñ1 + t * z‚Äñ := by
      rw [‚Üê norm_neg (t * z), ‚Üê sub_neg_eq_add]
      convert norm_sub_norm_le 1 (-(t * z))
      exact norm_one.symm

lemma integrable_pow_mul_norm_one_add_mul_inv (n : ‚Ñï) {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ < 1) :
    IntervalIntegrable (fun t : ‚Ñù ‚Ü¶ t ^ n * ‚Äñ(1 + t * z)‚Åª¬π‚Äñ) MeasureTheory.volume 0 1 := by
  have := continuousOn_one_add_mul_inv <| mem_slitPlane_of_norm_lt_one hz
  rw [‚Üê Set.uIcc_of_le zero_le_one] at this
  exact ContinuousOn.intervalIntegrable (by fun_prop)

open intervalIntegral in
/-- The difference of `log (1+z)` and its `(n+1)`st Taylor polynomial can be bounded in
terms of `‚Äñz‚Äñ`. -/
lemma norm_log_sub_logTaylor_le (n : ‚Ñï) {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ < 1) :
    ‚Äñlog (1 + z) - logTaylor (n + 1) z‚Äñ ‚â§ ‚Äñz‚Äñ ^ (n + 1) * (1 - ‚Äñz‚Äñ)‚Åª¬π / (n + 1) := by
  have help : IntervalIntegrable (fun t : ‚Ñù ‚Ü¶ t ^ n * (1 - ‚Äñz‚Äñ)‚Åª¬π) MeasureTheory.volume 0 1 :=
    IntervalIntegrable.mul_const (Continuous.intervalIntegrable (by fun_prop) 0 1) (1 - ‚Äñz‚Äñ)‚Åª¬π
  let f (z : ‚ÑÇ) : ‚ÑÇ := log (1 + z) - logTaylor (n + 1) z
  let f' (z : ‚ÑÇ) : ‚ÑÇ := (-z) ^ n * (1 + z)‚Åª¬π
  have hderiv : ‚àÄ t ‚àà Set.Icc (0 : ‚Ñù) 1, HasDerivAt f (f' (0 + t * z)) (0 + t * z) := by
    intro t ht
    rw [zero_add]
    exact hasDerivAt_log_sub_logTaylor n <|
      StarConvex.add_smul_mem starConvex_one_slitPlane (mem_slitPlane_of_norm_lt_one hz) ht.1 ht.2
  have hcont : ContinuousOn (fun t : ‚Ñù ‚Ü¶ f' (0 + t * z)) (Set.Icc 0 1) := by
    simp only [zero_add, zero_le_one, not_true_eq_false]
    exact (Continuous.continuousOn (by fun_prop)).mul <|
      continuousOn_one_add_mul_inv <| mem_slitPlane_of_norm_lt_one hz
  have H : f z = z * ‚à´ t in (0 : ‚Ñù)..1, (-(t * z)) ^ n * (1 + t * z)‚Åª¬π := by
    convert (integral_unitInterval_deriv_eq_sub hcont hderiv).symm using 1
    ¬∑ simp only [f, zero_add, add_zero, log_one, logTaylor_at_zero, sub_self, sub_zero]
    ¬∑ simp only [f', add_zero, log_one, logTaylor_at_zero, sub_self, real_smul, zero_add,
        smul_eq_mul]
  unfold f at H
  simp only [H, norm_mul]
  simp_rw [neg_pow (_ * z) n, mul_assoc, intervalIntegral.integral_const_mul, mul_pow,
    mul_comm _ (z ^ n), mul_assoc, intervalIntegral.integral_const_mul, norm_mul, norm_pow,
    norm_neg, norm_one, one_pow, one_mul, ‚Üê mul_assoc, ‚Üê pow_succ', mul_div_assoc]
  gcongr _ * ?_
  calc ‚Äñ‚à´ t in (0 : ‚Ñù)..1, (t : ‚ÑÇ) ^ n * (1 + t * z)‚Åª¬π‚Äñ
    _ ‚â§ ‚à´ t in (0 : ‚Ñù)..1, t ^ n * (1 - ‚Äñz‚Äñ)‚Åª¬π := by
      refine intervalIntegral.norm_integral_le_of_norm_le zero_le_one ?_ help
      filter_upwards with t ‚ü®ht‚ÇÄ, ht‚ÇÅ‚ü©
      rw [norm_mul, norm_pow, Complex.norm_of_nonneg ht‚ÇÄ.le]
      gcongr
      exact norm_one_add_mul_inv_le ‚ü®ht‚ÇÄ.le, ht‚ÇÅ‚ü© hz
    _ = (1 - ‚Äñz‚Äñ)‚Åª¬π / (n + 1) := by
      rw [intervalIntegral.integral_mul_const, mul_comm, integral_pow]
      field_simp

/-- The difference `log (1+z) - z` is bounded by `‚Äñz‚Äñ^2/(2*(1-‚Äñz‚Äñ))` when `‚Äñz‚Äñ < 1`. -/
lemma norm_log_one_add_sub_self_le {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ < 1) :
    ‚Äñlog (1 + z) - z‚Äñ ‚â§ ‚Äñz‚Äñ ^ 2 * (1 - ‚Äñz‚Äñ)‚Åª¬π / 2 := by
  convert norm_log_sub_logTaylor_le 1 hz using 2
  ¬∑ simp [logTaylor_succ, logTaylor_zero, sub_eq_add_neg]
  ¬∑ norm_num

open scoped Topology in
lemma log_sub_logTaylor_isBigO (n : ‚Ñï) :
    (fun z ‚Ü¶ log (1 + z) - logTaylor (n + 1) z) =O[ùìù 0] fun z ‚Ü¶ z ^ (n + 1) := by
  rw [Asymptotics.isBigO_iff]
  use 2 / (n + 1)
  filter_upwards [
    eventually_norm_sub_lt 0 one_pos,
    eventually_norm_sub_lt 0 (show 0 < 1 / 2 by norm_num)] with z hz1 hz12
  rw [sub_zero] at hz1 hz12
  have : (1 - ‚Äñz‚Äñ)‚Åª¬π ‚â§ 2 := by rw [inv_le_comm‚ÇÄ (sub_pos_of_lt hz1) two_pos]; linarith
  apply (norm_log_sub_logTaylor_le n hz1).trans
  rw [mul_div_assoc, mul_comm, norm_pow]
  gcongr

open scoped Topology in
lemma log_sub_self_isBigO :
    (fun z ‚Ü¶ log (1 + z) - z) =O[ùìù 0] fun z ‚Ü¶ z ^ 2 := by
  convert log_sub_logTaylor_isBigO 1
  simp [logTaylor_succ, logTaylor_zero]

lemma norm_log_one_add_le {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ < 1) :
    ‚Äñlog (1 + z)‚Äñ ‚â§ ‚Äñz‚Äñ ^ 2 * (1 - ‚Äñz‚Äñ)‚Åª¬π / 2 + ‚Äñz‚Äñ := by
  rw [‚Üê sub_add_cancel (log (1 + z)) z]
  exact norm_add_le_of_le (Complex.norm_log_one_add_sub_self_le hz) le_rfl

/-- For `‚Äñz‚Äñ ‚â§ 1/2`, the complex logarithm is bounded by `(3/2) * ‚Äñz‚Äñ`. -/
lemma norm_log_one_add_half_le_self {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ ‚â§ 1/2) : ‚Äñlog (1 + z)‚Äñ ‚â§ (3/2) * ‚Äñz‚Äñ := by
  apply le_trans (norm_log_one_add_le (lt_of_le_of_lt hz one_half_lt_one))
  have hz3 : (1 - ‚Äñz‚Äñ)‚Åª¬π ‚â§ 2 := by
    rw [inv_eq_one_div, div_le_iff‚ÇÄ]
    ¬∑ linarith
    ¬∑ linarith
  have hz4 : ‚Äñz‚Äñ^2 * (1 - ‚Äñz‚Äñ)‚Åª¬π / 2 ‚â§ ‚Äñz‚Äñ/2 * 2 / 2 := by
    gcongr
    ¬∑ rw [inv_nonneg]
      linarith
    ¬∑ rw [sq, div_eq_mul_one_div]
      gcongr
  simp only [isUnit_iff_ne_zero, ne_eq, OfNat.ofNat_ne_zero, not_false_eq_true,
    IsUnit.div_mul_cancel] at hz4
  linarith

/-- The difference of `log (1-z)‚Åª¬π` and its `(n+1)`st Taylor polynomial can be bounded in
terms of `‚Äñz‚Äñ`. -/
lemma norm_log_one_sub_inv_add_logTaylor_neg_le (n : ‚Ñï) {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ < 1) :
    ‚Äñlog (1 - z)‚Åª¬π + logTaylor (n + 1) (-z)‚Äñ ‚â§ ‚Äñz‚Äñ ^ (n + 1) * (1 - ‚Äñz‚Äñ)‚Åª¬π / (n + 1) := by
  rw [sub_eq_add_neg,
    log_inv _ <| slitPlane_arg_ne_pi <| mem_slitPlane_of_norm_lt_one <| (norm_neg z).symm ‚ñ∏ hz,
    ‚Üê sub_neg_eq_add, ‚Üê neg_sub', norm_neg]
  convert norm_log_sub_logTaylor_le n <| (norm_neg z).symm ‚ñ∏ hz using 4 <;> rw [norm_neg]

/-- The difference `log (1-z)‚Åª¬π - z` is bounded by `‚Äñz‚Äñ^2/(2*(1-‚Äñz‚Äñ))` when `‚Äñz‚Äñ < 1`. -/
lemma norm_log_one_sub_inv_sub_self_le {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ < 1) :
    ‚Äñlog (1 - z)‚Åª¬π - z‚Äñ ‚â§ ‚Äñz‚Äñ ^ 2 * (1 - ‚Äñz‚Äñ)‚Åª¬π / 2 := by
  convert norm_log_one_sub_inv_add_logTaylor_neg_le 1 hz using 2
  ¬∑ simp [logTaylor_succ, logTaylor_zero, sub_eq_add_neg]
  ¬∑ norm_num

open Filter Asymptotics in
/-- The Taylor series of the complex logarithm at `1` converges to the logarithm in the
open unit disk. -/
lemma hasSum_taylorSeries_log {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ < 1) :
    HasSum (fun n : ‚Ñï ‚Ü¶ (-1) ^ (n + 1) * z ^ n / n) (log (1 + z)) := by
  refine (hasSum_iff_tendsto_nat_of_summable_norm ?_).mpr ?_
  ¬∑ refine (summable_geometric_of_norm_lt_one hz).norm.of_nonneg_of_le (fun _ ‚Ü¶ norm_nonneg _) ?_
    intro n
    simp only [norm_div, norm_mul, norm_pow, norm_neg, norm_one, one_pow, one_mul, norm_natCast]
    rcases n.eq_zero_or_pos with rfl | hn
    ¬∑ simp
    conv => enter [2]; rw [‚Üê div_one (‚Äñz‚Äñ ^ n)]
    gcongr
    norm_cast
  ¬∑ rw [‚Üê tendsto_sub_nhds_zero_iff]
    conv => enter [1, x]; rw [‚Üê div_one (_ - _), ‚Üê logTaylor]
    rw [‚Üê isLittleO_iff_tendsto fun _ h ‚Ü¶ (one_ne_zero h).elim]
    refine IsLittleO.trans_isBigO ?_ <| isBigO_const_one ‚ÑÇ (1 : ‚Ñù) atTop
    have H : (fun n ‚Ü¶ logTaylor n z - log (1 + z)) =O[atTop] (fun n : ‚Ñï ‚Ü¶ ‚Äñz‚Äñ ^ n) := by
      have (n : ‚Ñï) : ‚ÄñlogTaylor n z - log (1 + z)‚Äñ
          ‚â§ (max ‚Äñlog (1 + z)‚Äñ (1 - ‚Äñz‚Äñ)‚Åª¬π) * ‚Äñ(‚Äñz‚Äñ ^ n)‚Äñ := by
        rw [norm_sub_rev, norm_pow, norm_norm]
        cases n with
        | zero => simp [logTaylor_zero]
        | succ n =>
            refine (norm_log_sub_logTaylor_le n hz).trans ?_
            rw [mul_comm, ‚Üê div_one ((max _ _) * _)]
            gcongr
            ¬∑ exact le_max_right ..
            ¬∑ linarith
      exact (isBigOWith_of_le' atTop this).isBigO
    refine IsBigO.trans_isLittleO H ?_
    convert isLittleO_pow_pow_of_lt_left (norm_nonneg z) hz
    exact (one_pow _).symm

/-- The series `‚àë z^n/n` converges to `-log (1-z)` on the open unit disk. -/
lemma hasSum_taylorSeries_neg_log {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ < 1) :
    HasSum (fun n : ‚Ñï ‚Ü¶ z ^ n / n) (-log (1 - z)) := by
  conv => enter [1, n]; rw [‚Üê neg_neg (z ^ n / n)]
  refine HasSum.neg ?_
  convert hasSum_taylorSeries_log (z := -z) (norm_neg z ‚ñ∏ hz) using 2 with n
  rcases n.eq_zero_or_pos with rfl | hn
  ¬∑ simp
  field_simp
  rw [div_eq_div_iff, pow_succ', mul_assoc (-1), ‚Üê mul_pow, neg_mul_neg, neg_one_mul, one_mul]
  all_goals {norm_cast; exact hn.ne'}

end Complex

section Limits

/-! Limits of functions of the form `(1 + t/x + o(1/x)) ^ x` as `x ‚Üí ‚àû`. -/

open Filter Asymptotics
open scoped Topology

namespace Complex

/-- The limit of `x * log (1 + g x)` as `(x : ‚Ñù) ‚Üí ‚àû` is `t`,
where `t : ‚ÑÇ` is the limit of `x * g x`. -/
lemma tendsto_mul_log_one_add_of_tendsto {g : ‚Ñù ‚Üí ‚ÑÇ} {t : ‚ÑÇ}
    (hg : Tendsto (fun x ‚Ü¶ x * g x) atTop (ùìù t)) :
    Tendsto (fun x ‚Ü¶ x * log (1 + g x)) atTop (ùìù t) := by
  apply hg.congr_dist
  refine IsBigO.trans_tendsto ?_ tendsto_inv_atTop_zero.ofReal
  simp_rw [dist_comm (_ * g _), dist_eq, ‚Üê mul_sub, isBigO_norm_left]
  calc
    _ =O[atTop] fun x ‚Ü¶ x * g x ^ 2 := by
      have hg0 := tendsto_zero_of_isBoundedUnder_smul_of_tendsto_cobounded hg.norm.isBoundedUnder_le
        (RCLike.tendsto_ofReal_atTop_cobounded ‚ÑÇ)
      exact (isBigO_refl _ _).mul (log_sub_self_isBigO.comp_tendsto hg0)
    _ =·∂†[atTop] fun x ‚Ü¶ (x * g x) ^ 2 * x‚Åª¬π := by
      filter_upwards [eventually_ne_atTop 0] with x hx0
      rw [ofReal_inv, eq_mul_inv_iff_mul_eq‚ÇÄ (mod_cast hx0)]
      ring
    _ =O[atTop] _ := by
      simpa using isBigO_const_of_tendsto hg (one_ne_zero (Œ± := ‚ÑÇ))
        |>.pow 2 |>.mul (isBigO_refl _ _)

/-- The limit of `(1 + g x) ^ x` as `(x : ‚Ñù) ‚Üí ‚àû` is `exp t`,
where `t : ‚ÑÇ` is the limit of `x * g x`. -/
lemma tendsto_one_add_cpow_exp_of_tendsto {g : ‚Ñù ‚Üí ‚ÑÇ} {t : ‚ÑÇ}
    (hg : Tendsto (fun x ‚Ü¶ x * g x) atTop (ùìù t)) :
    Tendsto (fun x ‚Ü¶ (1 + g x) ^ (x : ‚ÑÇ)) atTop (ùìù (exp t)) := by
  apply ((continuous_exp.tendsto _).comp (tendsto_mul_log_one_add_of_tendsto hg)).congr'
  have hg0 := tendsto_zero_of_isBoundedUnder_smul_of_tendsto_cobounded
    hg.norm.isBoundedUnder_le (RCLike.tendsto_ofReal_atTop_cobounded ‚ÑÇ)
  filter_upwards [hg0.eventually_ne (show 0 ‚â† -1 by norm_num)] with x hg1
  dsimp
  rw [cpow_def_of_ne_zero, mul_comm]
  intro hg0
  rw [‚Üê add_eq_zero_iff_neg_eq.mp hg0] at hg1
  norm_num at hg1

/-- The limit of `(1 + t/x) ^ x` as `x ‚Üí ‚àû` is `exp t` for `t : ‚ÑÇ`. -/
lemma tendsto_one_add_div_cpow_exp (t : ‚ÑÇ) :
    Tendsto (fun x : ‚Ñù ‚Ü¶ (1 + t / x) ^ (x : ‚ÑÇ)) atTop (ùìù (exp t)) := by
  apply tendsto_one_add_cpow_exp_of_tendsto
  apply tendsto_nhds_of_eventually_eq
  filter_upwards [eventually_ne_atTop 0] with x hx0
  exact mul_div_cancel‚ÇÄ t (mod_cast hx0)

/-- The limit of `n * log (1 + g n)` as `(n : ‚Ñù) ‚Üí ‚àû` is `t`,
where `t : ‚ÑÇ` is the limit of `n * g n`. -/
lemma tendsto_nat_mul_log_one_add_of_tendsto {g : ‚Ñï ‚Üí ‚ÑÇ} {t : ‚ÑÇ}
    (hg : Tendsto (fun n ‚Ü¶ n * g n) atTop (ùìù t)) :
    Tendsto (fun n ‚Ü¶ n * log (1 + g n)) atTop (ùìù t) :=
  tendsto_mul_log_one_add_of_tendsto (tendsto_smul_comp_nat_floor_of_tendsto_mul hg)
    |>.comp tendsto_natCast_atTop_atTop |>.congr (by simp)

/-- The limit of `(1 + g n) ^ n` as `(n : ‚Ñù) ‚Üí ‚àû` is `exp t`,
where `t : ‚ÑÇ` is the limit of `n * g n`. -/
lemma tendsto_one_add_pow_exp_of_tendsto {g : ‚Ñï ‚Üí ‚ÑÇ} {t : ‚ÑÇ}
    (hg : Tendsto (fun n ‚Ü¶ n * g n) atTop (ùìù t)) :
    Tendsto (fun n ‚Ü¶ (1 + g n) ^ n) atTop (ùìù (exp t)) :=
  tendsto_one_add_cpow_exp_of_tendsto (tendsto_smul_comp_nat_floor_of_tendsto_mul hg)
    |>.comp tendsto_natCast_atTop_atTop |>.congr (by simp)

/-- The limit of `(1 + t/n) ^ n` as `n ‚Üí ‚àû` is `exp t` for `t : ‚ÑÇ`. -/
lemma tendsto_one_add_div_pow_exp (t : ‚ÑÇ) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ (1 + t / n) ^ n) atTop (ùìù (exp t)) :=
  tendsto_one_add_div_cpow_exp t |>.comp tendsto_natCast_atTop_atTop |>.congr (by simp)

end Complex

namespace Real

/-- The limit of `x * log (1 + g x)` as `(x : ‚Ñù) ‚Üí ‚àû` is `t`,
where `t : ‚Ñù` is the limit of `x * g x`. -/
lemma tendsto_mul_log_one_add_of_tendsto {g : ‚Ñù ‚Üí ‚Ñù} {t : ‚Ñù}
    (hg : Tendsto (fun x ‚Ü¶ x * g x) atTop (ùìù t)) :
    Tendsto (fun x ‚Ü¶ x * log (1 + g x)) atTop (ùìù t) := by
  have hg0 := tendsto_zero_of_isBoundedUnder_smul_of_tendsto_cobounded
    hg.norm.isBoundedUnder_le (tendsto_id'.mpr (by simp))
  rw [‚Üê tendsto_ofReal_iff] at hg ‚ä¢
  push_cast at hg ‚ä¢
  apply (Complex.tendsto_mul_log_one_add_of_tendsto hg).congr'
  filter_upwards [hg0.eventually_const_le (show (-1 : ‚Ñù) < 0 by norm_num)] with x hg1
  rw [Complex.ofReal_log (by linarith), Complex.ofReal_add, Complex.ofReal_one]

/-- The limit of `(1 + g x) ^ x` as `(x : ‚Ñù) ‚Üí ‚àû` is `exp t`,
where `t : ‚Ñù` is the limit of `x * g x`. -/
lemma tendsto_one_add_rpow_exp_of_tendsto {g : ‚Ñù ‚Üí ‚Ñù} {t : ‚Ñù}
    (hg : Tendsto (fun x ‚Ü¶ x * g x) atTop (ùìù t)) :
    Tendsto (fun x ‚Ü¶ (1 + g x) ^ x) atTop (ùìù (exp t)) := by
  have hg0 := tendsto_zero_of_isBoundedUnder_smul_of_tendsto_cobounded
    hg.norm.isBoundedUnder_le (tendsto_id'.mpr (by simp))
  rw [‚Üê tendsto_ofReal_iff] at hg ‚ä¢
  push_cast at hg ‚ä¢
  apply (Complex.tendsto_one_add_cpow_exp_of_tendsto hg).congr'
  filter_upwards [hg0.eventually_const_le (show (-1 : ‚Ñù) < 0 by norm_num)] with x hg1
  rw [Complex.ofReal_cpow (by linarith), Complex.ofReal_add, Complex.ofReal_one]

/-- The limit of `(1 + t/x) ^ x` as `x ‚Üí ‚àû` is `exp t` for `t : ‚Ñù`. -/
lemma tendsto_one_add_div_rpow_exp (t : ‚Ñù) :
    Tendsto (fun x : ‚Ñù ‚Ü¶ (1 + t / x) ^ x) atTop (ùìù (exp t)) := by
  apply tendsto_one_add_rpow_exp_of_tendsto
  apply tendsto_nhds_of_eventually_eq
  filter_upwards [eventually_ne_atTop 0] with x hx0
  exact mul_div_cancel‚ÇÄ t (mod_cast hx0)

/-- The limit of `n * log (1 + g n)` as `(n : ‚Ñù) ‚Üí ‚àû` is `t`,
where `t : ‚Ñù` is the limit of `n * g n`. -/
lemma tendsto_nat_mul_log_one_add_of_tendsto {g : ‚Ñï ‚Üí ‚Ñù} {t : ‚Ñù}
    (hg : Tendsto (fun n ‚Ü¶ n * g n) atTop (ùìù t)) :
    Tendsto (fun n ‚Ü¶ n * log (1 + g n)) atTop (ùìù t) :=
  tendsto_mul_log_one_add_of_tendsto (tendsto_smul_comp_nat_floor_of_tendsto_mul hg) |>.comp
    tendsto_natCast_atTop_atTop |>.congr (by simp)

/-- The limit of `(1 + g n) ^ n` as `(n : ‚Ñù) ‚Üí ‚àû` is `exp t`,
where `t : ‚Ñù` is the limit of `n * g n`. -/
lemma tendsto_one_add_pow_exp_of_tendsto {g : ‚Ñï ‚Üí ‚Ñù} {t : ‚Ñù}
    (hg : Tendsto (fun n ‚Ü¶ n * g n) atTop (ùìù t)) :
    Tendsto (fun n ‚Ü¶ (1 + g n) ^ n) atTop (ùìù (exp t)) :=
  tendsto_one_add_rpow_exp_of_tendsto (tendsto_smul_comp_nat_floor_of_tendsto_mul hg) |>.comp
    tendsto_natCast_atTop_atTop |>.congr (by simp)

/-- The limit of `(1 + t/n) ^ n` as `n ‚Üí ‚àû` is `exp t` for `t : ‚Ñù`. -/
lemma tendsto_one_add_div_pow_exp (t : ‚Ñù) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ (1 + t / n) ^ n) atTop (ùìù (exp t)) :=
  tendsto_one_add_div_rpow_exp t |>.comp tendsto_natCast_atTop_atTop |>.congr (by simp)

end Real

end Limits
