/-
Copyright (c) 2022 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.MeasureTheory.Function.Jacobian
import Mathlib.MeasureTheory.Measure.Lebesgue.Complex
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv

/-!
# Polar coordinates

We define polar coordinates, as a partial homeomorphism in `‚Ñù^2` between `‚Ñù^2 - (-‚àû, 0]` and
`(0, +‚àû) √ó (-œÄ, œÄ)`. Its inverse is given by `(r, Œ∏) ‚Ü¶ (r cos Œ∏, r sin Œ∏)`.

It satisfies the following change of variables formula (see `integral_comp_polarCoord_symm`):
`‚à´ p in polarCoord.target, p.1 ‚Ä¢ f (polarCoord.symm p) = ‚à´ p, f p`

-/

noncomputable section Real

open Real Set MeasureTheory

open scoped ENNReal Real Topology

/-- The polar coordinates partial homeomorphism in `‚Ñù^2`, mapping `(r cos Œ∏, r sin Œ∏)` to `(r, Œ∏)`.
It is a homeomorphism between `‚Ñù^2 - (-‚àû, 0]` and `(0, +‚àû) √ó (-œÄ, œÄ)`. -/
@[simps]
def polarCoord : PartialHomeomorph (‚Ñù √ó ‚Ñù) (‚Ñù √ó ‚Ñù) where
  toFun q := (‚àö(q.1 ^ 2 + q.2 ^ 2), Complex.arg (Complex.equivRealProd.symm q))
  invFun p := (p.1 * cos p.2, p.1 * sin p.2)
  source := {q | 0 < q.1} ‚à™ {q | q.2 ‚â† 0}
  target := Ioi (0 : ‚Ñù) √óÀ¢ Ioo (-œÄ) œÄ
  map_target' := by
    rintro ‚ü®r, Œ∏‚ü© ‚ü®hr, hŒ∏‚ü©
    dsimp at hr hŒ∏
    rcases eq_or_ne Œ∏ 0 with (rfl | h'Œ∏)
    ¬∑ simpa using hr
    ¬∑ right
      simp at hr
      simpa only [ne_of_gt hr, Ne, mem_setOf_eq, mul_eq_zero, false_or,
        sin_eq_zero_iff_of_lt_of_lt hŒ∏.1 hŒ∏.2] using h'Œ∏
  map_source' := by
    rintro ‚ü®x, y‚ü© hxy
    simp only [prodMk_mem_set_prod_eq, mem_Ioi, sqrt_pos, mem_Ioo, Complex.neg_pi_lt_arg,
      true_and, Complex.arg_lt_pi_iff]
    constructor
    ¬∑ rcases hxy with hxy | hxy
      ¬∑ dsimp at hxy; linarith [sq_pos_of_ne_zero hxy.ne', sq_nonneg y]
      ¬∑ linarith [sq_nonneg x, sq_pos_of_ne_zero hxy]
    ¬∑ rcases hxy with hxy | hxy
      ¬∑ exact Or.inl (le_of_lt hxy)
      ¬∑ exact Or.inr hxy
  right_inv' := by
    rintro ‚ü®r, Œ∏‚ü© ‚ü®hr, hŒ∏‚ü©
    dsimp at hr hŒ∏
    simp only [Prod.mk.inj_iff]
    constructor
    ¬∑ conv_rhs => rw [‚Üê sqrt_sq (le_of_lt hr), ‚Üê one_mul (r ^ 2), ‚Üê sin_sq_add_cos_sq Œ∏]
      congr 1
      ring
    ¬∑ convert Complex.arg_mul_cos_add_sin_mul_I hr ‚ü®hŒ∏.1, hŒ∏.2.le‚ü©
      simp only [Complex.equivRealProd_symm_apply, Complex.ofReal_mul, Complex.ofReal_cos,
        Complex.ofReal_sin]
      ring
  left_inv' := by
    rintro ‚ü®x, y‚ü© _
    have A : ‚àö(x ^ 2 + y ^ 2) = ‚Äñx + y * Complex.I‚Äñ := by
      rw [Complex.norm_def, Complex.normSq_add_mul_I]
    have Z := Complex.norm_mul_cos_add_sin_mul_I (x + y * Complex.I)
    simp only [‚Üê Complex.ofReal_cos, ‚Üê Complex.ofReal_sin, mul_add, ‚Üê Complex.ofReal_mul, ‚Üê
      mul_assoc] at Z
    simp [A]
  open_target := isOpen_Ioi.prod isOpen_Ioo
  open_source :=
    (isOpen_lt continuous_const continuous_fst).union
      (isOpen_ne_fun continuous_snd continuous_const)
  continuousOn_invFun := by fun_prop
  continuousOn_toFun := by
    refine .prod (by fun_prop) ?_
    have A : MapsTo Complex.equivRealProd.symm ({q : ‚Ñù √ó ‚Ñù | 0 < q.1} ‚à™ {q : ‚Ñù √ó ‚Ñù | q.2 ‚â† 0})
        Complex.slitPlane := by
      rintro ‚ü®x, y‚ü© hxy; simpa only using hxy
    refine ContinuousOn.comp (f := Complex.equivRealProd.symm)
      (g := Complex.arg) (fun z hz => ?_) ?_ A
    ¬∑ exact (Complex.continuousAt_arg hz).continuousWithinAt
    ¬∑ exact Complex.equivRealProdCLM.symm.continuous.continuousOn

/-- The derivative of `polarCoord.symm`, see `hasFDerivAt_polarCoord_symm`. -/
def fderivPolarCoordSymm (p : ‚Ñù √ó ‚Ñù) : ‚Ñù √ó ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù √ó ‚Ñù :=
  LinearMap.toContinuousLinearMap (Matrix.toLin (Basis.finTwoProd ‚Ñù)
    (Basis.finTwoProd ‚Ñù) !![cos p.2, -p.1 * sin p.2; sin p.2, p.1 * cos p.2])

theorem hasFDerivAt_polarCoord_symm (p : ‚Ñù √ó ‚Ñù) :
    HasFDerivAt polarCoord.symm (fderivPolarCoordSymm p) p := by
  unfold fderivPolarCoordSymm
  rw [Matrix.toLin_finTwoProd_toContinuousLinearMap]
  convert HasFDerivAt.prod (ùïú := ‚Ñù)
    (hasFDerivAt_fst.mul ((hasDerivAt_cos p.2).comp_hasFDerivAt p hasFDerivAt_snd))
    (hasFDerivAt_fst.mul ((hasDerivAt_sin p.2).comp_hasFDerivAt p hasFDerivAt_snd)) using 2 <;>
  simp [smul_smul, add_comm, neg_mul, smul_neg, neg_smul _ (ContinuousLinearMap.snd ‚Ñù ‚Ñù ‚Ñù)]

theorem det_fderivPolarCoordSymm (p : ‚Ñù √ó ‚Ñù) :
    (fderivPolarCoordSymm p).det = p.1 := by
  conv_rhs => rw [‚Üê one_mul p.1, ‚Üê cos_sq_add_sin_sq p.2]
  unfold fderivPolarCoordSymm
  simp only [neg_mul, LinearMap.det_toContinuousLinearMap, LinearMap.det_toLin,
    Matrix.det_fin_two_of, sub_neg_eq_add]
  ring

-- Porting note: this instance is needed but not automatically synthesised
instance : Measure.IsAddHaarMeasure volume (G := ‚Ñù √ó ‚Ñù) :=
  Measure.prod.instIsAddHaarMeasure _ _

theorem polarCoord_source_ae_eq_univ : polarCoord.source =·µê[volume] univ := by
  have A : polarCoord.source·∂ú ‚äÜ LinearMap.ker (LinearMap.snd ‚Ñù ‚Ñù ‚Ñù) := by
    intro x hx
    simp only [polarCoord_source, compl_union, mem_inter_iff, mem_compl_iff, mem_setOf_eq, not_lt,
      Classical.not_not] at hx
    exact hx.2
  have B : volume (LinearMap.ker (LinearMap.snd ‚Ñù ‚Ñù ‚Ñù) : Set (‚Ñù √ó ‚Ñù)) = 0 := by
    apply Measure.addHaar_submodule
    rw [Ne, LinearMap.ker_eq_top]
    intro h
    have : (LinearMap.snd ‚Ñù ‚Ñù ‚Ñù) (0, 1) = (0 : ‚Ñù √ó ‚Ñù ‚Üí‚Çó[‚Ñù] ‚Ñù) (0, 1) := by rw [h]
    simp at this
  simp only [ae_eq_univ]
  exact le_antisymm ((measure_mono A).trans (le_of_eq B)) bot_le

theorem integral_comp_polarCoord_symm {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
    (f : ‚Ñù √ó ‚Ñù ‚Üí E) :
    (‚à´ p in polarCoord.target, p.1 ‚Ä¢ f (polarCoord.symm p)) = ‚à´ p, f p := by
  symm
  calc
    ‚à´ p, f p = ‚à´ p in polarCoord.source, f p := by
      rw [‚Üê setIntegral_univ]
      apply setIntegral_congr_set
      exact polarCoord_source_ae_eq_univ.symm
    _ = ‚à´ p in polarCoord.target, |p.1| ‚Ä¢ f (polarCoord.symm p) := by
      rw [‚Üê PartialHomeomorph.symm_target, integral_target_eq_integral_abs_det_fderiv_smul volume
      (fun p _ ‚Ü¶ hasFDerivAt_polarCoord_symm p), PartialHomeomorph.symm_source]
      simp_rw [det_fderivPolarCoordSymm]
    _ = ‚à´ p in polarCoord.target, p.1 ‚Ä¢ f (polarCoord.symm p) := by
      apply setIntegral_congr_fun polarCoord.open_target.measurableSet fun x hx => ?_
      rw [abs_of_pos hx.1]

theorem lintegral_comp_polarCoord_symm (f : ‚Ñù √ó ‚Ñù ‚Üí ‚Ñù‚â•0‚àû) :
    ‚à´‚Åª (p : ‚Ñù √ó ‚Ñù) in polarCoord.target, ENNReal.ofReal p.1 ‚Ä¢ f (polarCoord.symm p) =
      ‚à´‚Åª (p : ‚Ñù √ó ‚Ñù), f p := by
  symm
  calc
    _ = ‚à´‚Åª p in polarCoord.symm '' polarCoord.target, f p := by
      rw [‚Üê setLIntegral_univ, setLIntegral_congr polarCoord_source_ae_eq_univ.symm,
        polarCoord.symm_image_target_eq_source ]
    _ = ‚à´‚Åª (p : ‚Ñù √ó ‚Ñù) in polarCoord.target, ENNReal.ofReal |p.1| ‚Ä¢ f (polarCoord.symm p) := by
      rw [lintegral_image_eq_lintegral_abs_det_fderiv_mul volume _
        (fun p _ ‚Ü¶ (hasFDerivAt_polarCoord_symm p).hasFDerivWithinAt)]
      ¬∑ simp_rw [det_fderivPolarCoordSymm]; rfl
      exacts [polarCoord.symm.injOn, measurableSet_Ioi.prod measurableSet_Ioo]
    _ = ‚à´‚Åª (p : ‚Ñù √ó ‚Ñù) in polarCoord.target, ENNReal.ofReal p.1 ‚Ä¢ f (polarCoord.symm p) := by
      refine setLIntegral_congr_fun polarCoord.open_target.measurableSet ?_
      filter_upwards with _ hx using by rw [abs_of_pos hx.1]

end Real

noncomputable section Complex

namespace Complex

open scoped Real ENNReal

/-- The polar coordinates partial homeomorphism in `‚ÑÇ`, mapping `r (cos Œ∏ + I * sin Œ∏)` to `(r, Œ∏)`.
It is a homeomorphism between `‚ÑÇ - ‚Ñù‚â§0` and `(0, +‚àû) √ó (-œÄ, œÄ)`. -/
protected noncomputable def polarCoord : PartialHomeomorph ‚ÑÇ (‚Ñù √ó ‚Ñù) :=
  equivRealProdCLM.toHomeomorph.transPartialHomeomorph polarCoord

protected theorem polarCoord_apply (a : ‚ÑÇ) :
    Complex.polarCoord a = (‚Äña‚Äñ, Complex.arg a) := by
  simp_rw [Complex.norm_def, Complex.normSq_apply, ‚Üê pow_two]
  rfl

protected theorem polarCoord_source : Complex.polarCoord.source = slitPlane := rfl

protected theorem polarCoord_target :
    Complex.polarCoord.target = Set.Ioi (0 : ‚Ñù) √óÀ¢ Set.Ioo (-œÄ) œÄ := rfl

@[simp]
protected theorem polarCoord_symm_apply (p : ‚Ñù √ó ‚Ñù) :
    Complex.polarCoord.symm p = p.1 * (Real.cos p.2 + Real.sin p.2 * Complex.I) := by
  simp [Complex.polarCoord, equivRealProdCLM_symm_apply, mul_add, mul_assoc]

theorem measurableEquivRealProd_symm_polarCoord_symm_apply (p : ‚Ñù √ó ‚Ñù) :
    (measurableEquivRealProd.symm (polarCoord.symm p)) = Complex.polarCoord.symm p := rfl

theorem norm_polarCoord_symm (p : ‚Ñù √ó ‚Ñù) :
    ‚ÄñComplex.polarCoord.symm p‚Äñ = |p.1| := by simp

@[deprecated (since := "2025-02-17")] alias polarCoord_symm_abs := norm_polarCoord_symm

protected theorem integral_comp_polarCoord_symm {E : Type*} [NormedAddCommGroup E]
    [NormedSpace ‚Ñù E] (f : ‚ÑÇ ‚Üí E) :
    (‚à´ p in polarCoord.target, p.1 ‚Ä¢ f (Complex.polarCoord.symm p)) = ‚à´ p, f p := by
  rw [‚Üê (Complex.volume_preserving_equiv_real_prod.symm).integral_comp
    measurableEquivRealProd.symm.measurableEmbedding, ‚Üê integral_comp_polarCoord_symm]
  simp_rw [measurableEquivRealProd_symm_polarCoord_symm_apply]

protected theorem lintegral_comp_polarCoord_symm (f : ‚ÑÇ ‚Üí ‚Ñù‚â•0‚àû) :
    (‚à´‚Åª p in polarCoord.target, ENNReal.ofReal p.1 ‚Ä¢ f (Complex.polarCoord.symm p)) =
      ‚à´‚Åª p, f p := by
  rw [‚Üê (volume_preserving_equiv_real_prod.symm).lintegral_comp_emb
    measurableEquivRealProd.symm.measurableEmbedding, ‚Üê lintegral_comp_polarCoord_symm]
  simp_rw [measurableEquivRealProd_symm_polarCoord_symm_apply]

end Complex

section Pi

open ENNReal MeasureTheory MeasureTheory.Measure

variable {Œπ : Type*}

open ContinuousLinearMap in
/-- The derivative of `polarCoord.symm` on `Œπ ‚Üí ‚Ñù √ó ‚Ñù`, see `hasFDerivAt_pi_polarCoord_symm`. -/
noncomputable def fderivPiPolarCoordSymm (p : Œπ ‚Üí ‚Ñù √ó ‚Ñù) : (Œπ ‚Üí ‚Ñù √ó ‚Ñù) ‚ÜíL[‚Ñù] Œπ ‚Üí ‚Ñù √ó ‚Ñù :=
  pi fun i ‚Ü¶ (fderivPolarCoordSymm (p i)).comp (proj i)

theorem injOn_pi_polarCoord_symm :
    Set.InjOn (fun p (i : Œπ) ‚Ü¶ polarCoord.symm (p i)) (Set.univ.pi fun _ ‚Ü¶ polarCoord.target) :=
  fun _ hx _ hy h ‚Ü¶ funext fun i ‚Ü¶ polarCoord.symm.injOn (hx i trivial) (hy i trivial)
    ((funext_iff.mp h) i)

theorem abs_fst_of_mem_pi_polarCoord_target {p : Œπ ‚Üí ‚Ñù √ó ‚Ñù}
    (hp : p ‚àà (Set.univ.pi fun _ : Œπ ‚Ü¶ polarCoord.target)) (i : Œπ) :
    |(p i).1| = (p i).1 :=
  abs_of_pos ((Set.mem_univ_pi.mp hp) i).1

variable [Fintype Œπ]

theorem hasFDerivAt_pi_polarCoord_symm (p : Œπ ‚Üí ‚Ñù √ó ‚Ñù) :
    HasFDerivAt (fun x i ‚Ü¶ polarCoord.symm (x i)) (fderivPiPolarCoordSymm p) p := by
  rw [fderivPiPolarCoordSymm, hasFDerivAt_pi]
  exact fun i ‚Ü¶ HasFDerivAt.comp _ (hasFDerivAt_polarCoord_symm _) (hasFDerivAt_apply i _)

theorem det_fderivPiPolarCoordSymm (p : Œπ ‚Üí ‚Ñù √ó ‚Ñù) :
    (fderivPiPolarCoordSymm p).det = ‚àè i, (p i).1 := by
  simp_rw [fderivPiPolarCoordSymm, ContinuousLinearMap.det_pi, det_fderivPolarCoordSymm]

theorem pi_polarCoord_symm_target_ae_eq_univ :
    (Pi.map (fun _ : Œπ ‚Ü¶ polarCoord.symm) '' Set.univ.pi fun _ ‚Ü¶ polarCoord.target)
        =·µê[volume] Set.univ := by
  rw [Set.piMap_image_univ_pi, polarCoord.symm_image_target_eq_source, volume_pi, ‚Üê Set.pi_univ]
  exact ae_eq_set_pi fun _ _ ‚Ü¶ polarCoord_source_ae_eq_univ

theorem measurableSet_pi_polarCoord_target :
    MeasurableSet (Set.univ.pi fun _ : Œπ ‚Ü¶ polarCoord.target) :=
  MeasurableSet.univ_pi fun _ ‚Ü¶ polarCoord.open_target.measurableSet

theorem integral_comp_pi_polarCoord_symm {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
    (f : (Œπ ‚Üí ‚Ñù √ó ‚Ñù) ‚Üí E) :
    (‚à´ p in (Set.univ.pi fun _ : Œπ ‚Ü¶ polarCoord.target),
      (‚àè i, (p i).1) ‚Ä¢ f (fun i ‚Ü¶ polarCoord.symm (p i))) = ‚à´ p, f p := by
  rw [‚Üê setIntegral_univ (f := f), ‚Üê setIntegral_congr_set pi_polarCoord_symm_target_ae_eq_univ]
  convert (integral_image_eq_integral_abs_det_fderiv_smul volume measurableSet_pi_polarCoord_target
    (fun p _ ‚Ü¶ (hasFDerivAt_pi_polarCoord_symm p).hasFDerivWithinAt)
      injOn_pi_polarCoord_symm f).symm using 1
  refine setIntegral_congr_fun measurableSet_pi_polarCoord_target fun x hx ‚Ü¶ ?_
  simp_rw [det_fderivPiPolarCoordSymm, Finset.abs_prod, abs_fst_of_mem_pi_polarCoord_target hx]

protected theorem Complex.integral_comp_pi_polarCoord_symm {E : Type*} [NormedAddCommGroup E]
    [NormedSpace ‚Ñù E] (f : (Œπ ‚Üí ‚ÑÇ) ‚Üí E) :
    (‚à´ p in (Set.univ.pi fun _ : Œπ ‚Ü¶ Complex.polarCoord.target),
      (‚àè i, (p i).1) ‚Ä¢ f (fun i ‚Ü¶ Complex.polarCoord.symm (p i))) = ‚à´ p, f p := by
  let e := MeasurableEquiv.piCongrRight (fun _ : Œπ ‚Ü¶ measurableEquivRealProd.symm)
  have := volume_preserving_pi (fun _ : Œπ ‚Ü¶ Complex.volume_preserving_equiv_real_prod.symm)
  rw [‚Üê MeasurePreserving.integral_comp this e.measurableEmbedding f]
  exact integral_comp_pi_polarCoord_symm (f ‚àò e)

theorem lintegral_comp_pi_polarCoord_symm (f : (Œπ ‚Üí ‚Ñù √ó ‚Ñù) ‚Üí ‚Ñù‚â•0‚àû) :
    ‚à´‚Åª p in (Set.univ.pi fun _ : Œπ ‚Ü¶ polarCoord.target),
      (‚àè i, .ofReal (p i).1) * f (fun i ‚Ü¶ polarCoord.symm (p i)) = ‚à´‚Åª p, f p := by
  rw [‚Üê setLIntegral_univ f, ‚Üê setLIntegral_congr pi_polarCoord_symm_target_ae_eq_univ]
  convert (lintegral_image_eq_lintegral_abs_det_fderiv_mul volume measurableSet_pi_polarCoord_target
    (fun p _ ‚Ü¶ (hasFDerivAt_pi_polarCoord_symm p).hasFDerivWithinAt)
      injOn_pi_polarCoord_symm f).symm using 1
  refine setLIntegral_congr_fun measurableSet_pi_polarCoord_target ?_
  filter_upwards with x hx
  simp_rw [det_fderivPiPolarCoordSymm, Finset.abs_prod, ENNReal.ofReal_prod_of_nonneg (fun _ _ ‚Ü¶
    abs_nonneg _), abs_fst_of_mem_pi_polarCoord_target hx]

protected theorem Complex.lintegral_comp_pi_polarCoord_symm (f : (Œπ ‚Üí ‚ÑÇ) ‚Üí ‚Ñù‚â•0‚àû) :
    ‚à´‚Åª p in (Set.univ.pi fun _ : Œπ ‚Ü¶ Complex.polarCoord.target),
      (‚àè i, .ofReal (p i).1) * f (fun i ‚Ü¶ Complex.polarCoord.symm (p i)) = ‚à´‚Åª p, f p := by
  let e := MeasurableEquiv.piCongrRight (fun _ : Œπ ‚Ü¶ measurableEquivRealProd.symm)
  have := volume_preserving_pi (fun _ : Œπ ‚Ü¶ Complex.volume_preserving_equiv_real_prod.symm)
  rw [‚Üê MeasurePreserving.lintegral_comp_emb this e.measurableEmbedding]
  exact lintegral_comp_pi_polarCoord_symm (f ‚àò e)

end Pi
