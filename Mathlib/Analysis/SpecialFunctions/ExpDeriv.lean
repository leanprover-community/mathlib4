/-
Copyright (c) 2018 Chris Hughes. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Hughes, Abhimanyu Pallavi Sudhir, Jean Lo, Calle S√∂nne
-/
import Mathlib.Analysis.Complex.RealDeriv
import Mathlib.Analysis.Calculus.ContDiff.IsROrC

#align_import analysis.special_functions.exp_deriv from "leanprover-community/mathlib"@"6a5c85000ab93fe5dcfdf620676f614ba8e18c26"

/-!
# Complex and real exponential

In this file we prove that `Complex.exp` and `Real.exp` are infinitely smooth functions.

## Tags

exp, derivative
-/


noncomputable section

open Filter Asymptotics Set Function

open scoped Classical Topology

namespace Complex

variable {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedAlgebra ùïú ‚ÑÇ]

/-- The complex exponential is everywhere differentiable, with the derivative `exp x`. -/
theorem hasDerivAt_exp (x : ‚ÑÇ) : HasDerivAt exp (exp x) x := by
  rw [hasDerivAt_iff_isLittleO_nhds_zero]
  have : (1 : ‚Ñï) < 2 := by norm_num
  refine' (IsBigO.of_bound ‚Äñexp x‚Äñ _).trans_isLittleO (isLittleO_pow_id this)
  filter_upwards [Metric.ball_mem_nhds (0 : ‚ÑÇ) zero_lt_one]
  simp only [Metric.mem_ball, dist_zero_right, norm_pow]
  exact fun z hz => exp_bound_sq x z hz.le
#align complex.has_deriv_at_exp Complex.hasDerivAt_exp

theorem differentiable_exp : Differentiable ùïú exp := fun x =>
  (hasDerivAt_exp x).differentiableAt.restrictScalars ùïú
#align complex.differentiable_exp Complex.differentiable_exp

theorem differentiableAt_exp {x : ‚ÑÇ} : DifferentiableAt ùïú exp x :=
  differentiable_exp x
#align complex.differentiable_at_exp Complex.differentiableAt_exp

@[simp]
theorem deriv_exp : deriv exp = exp :=
  funext fun x => (hasDerivAt_exp x).deriv
#align complex.deriv_exp Complex.deriv_exp

@[simp]
theorem iter_deriv_exp : ‚àÄ n : ‚Ñï, deriv^[n] exp = exp
  | 0 => rfl
  | n + 1 => by rw [iterate_succ_apply, deriv_exp, iter_deriv_exp n]
#align complex.iter_deriv_exp Complex.iter_deriv_exp

theorem contDiff_exp : ‚àÄ {n}, ContDiff ùïú n exp := by
  -- porting note: added `@` due to `‚àÄ {n}` weirdness above
  refine' @(contDiff_all_iff_nat.2 fun n => ?_)
  have : ContDiff ‚ÑÇ (‚Üën) exp := by
    induction' n with n ihn
    ¬∑ exact contDiff_zero.2 continuous_exp
    ¬∑ rw [contDiff_succ_iff_deriv]
      use differentiable_exp
      rwa [deriv_exp]
  exact this.restrict_scalars ùïú
#align complex.cont_diff_exp Complex.contDiff_exp

theorem hasStrictDerivAt_exp (x : ‚ÑÇ) : HasStrictDerivAt exp (exp x) x :=
  contDiff_exp.contDiffAt.hasStrictDerivAt' (hasDerivAt_exp x) le_rfl
#align complex.has_strict_deriv_at_exp Complex.hasStrictDerivAt_exp

theorem hasStrictFDerivAt_exp_real (x : ‚ÑÇ) : HasStrictFDerivAt exp (exp x ‚Ä¢ (1 : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ)) x :=
  (hasStrictDerivAt_exp x).complexToReal_fderiv
#align complex.has_strict_fderiv_at_exp_real Complex.hasStrictFDerivAt_exp_real

end Complex

section

variable {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedAlgebra ùïú ‚ÑÇ] {f : ùïú ‚Üí ‚ÑÇ} {f' : ‚ÑÇ} {x : ùïú}
  {s : Set ùïú}

theorem HasStrictDerivAt.cexp (hf : HasStrictDerivAt f f' x) :
    HasStrictDerivAt (fun x => Complex.exp (f x)) (Complex.exp (f x) * f') x :=
  (Complex.hasStrictDerivAt_exp (f x)).comp x hf
#align has_strict_deriv_at.cexp HasStrictDerivAt.cexp

theorem HasDerivAt.cexp (hf : HasDerivAt f f' x) :
    HasDerivAt (fun x => Complex.exp (f x)) (Complex.exp (f x) * f') x :=
  (Complex.hasDerivAt_exp (f x)).comp x hf
#align has_deriv_at.cexp HasDerivAt.cexp

theorem HasDerivWithinAt.cexp (hf : HasDerivWithinAt f f' s x) :
    HasDerivWithinAt (fun x => Complex.exp (f x)) (Complex.exp (f x) * f') s x :=
  (Complex.hasDerivAt_exp (f x)).comp_hasDerivWithinAt x hf
#align has_deriv_within_at.cexp HasDerivWithinAt.cexp

theorem derivWithin_cexp (hf : DifferentiableWithinAt ùïú f s x) (hxs : UniqueDiffWithinAt ùïú s x) :
    derivWithin (fun x => Complex.exp (f x)) s x = Complex.exp (f x) * derivWithin f s x :=
  hf.hasDerivWithinAt.cexp.derivWithin hxs
#align deriv_within_cexp derivWithin_cexp

@[simp]
theorem deriv_cexp (hc : DifferentiableAt ùïú f x) :
    deriv (fun x => Complex.exp (f x)) x = Complex.exp (f x) * deriv f x :=
  hc.hasDerivAt.cexp.deriv
#align deriv_cexp deriv_cexp

end

section

variable {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedAlgebra ùïú ‚ÑÇ] {E : Type*}
  [NormedAddCommGroup E] [NormedSpace ùïú E] {f : E ‚Üí ‚ÑÇ} {f' : E ‚ÜíL[ùïú] ‚ÑÇ} {x : E} {s : Set E}

theorem HasStrictFDerivAt.cexp (hf : HasStrictFDerivAt f f' x) :
    HasStrictFDerivAt (fun x => Complex.exp (f x)) (Complex.exp (f x) ‚Ä¢ f') x :=
  (Complex.hasStrictDerivAt_exp (f x)).comp_hasStrictFDerivAt x hf
#align has_strict_fderiv_at.cexp HasStrictFDerivAt.cexp

theorem HasFDerivWithinAt.cexp (hf : HasFDerivWithinAt f f' s x) :
    HasFDerivWithinAt (fun x => Complex.exp (f x)) (Complex.exp (f x) ‚Ä¢ f') s x :=
  (Complex.hasDerivAt_exp (f x)).comp_hasFDerivWithinAt x hf
#align has_fderiv_within_at.cexp HasFDerivWithinAt.cexp

theorem HasFDerivAt.cexp (hf : HasFDerivAt f f' x) :
    HasFDerivAt (fun x => Complex.exp (f x)) (Complex.exp (f x) ‚Ä¢ f') x :=
  hasFDerivWithinAt_univ.1 <| hf.hasFDerivWithinAt.cexp
#align has_fderiv_at.cexp HasFDerivAt.cexp

theorem DifferentiableWithinAt.cexp (hf : DifferentiableWithinAt ùïú f s x) :
    DifferentiableWithinAt ùïú (fun x => Complex.exp (f x)) s x :=
  hf.hasFDerivWithinAt.cexp.differentiableWithinAt
#align differentiable_within_at.cexp DifferentiableWithinAt.cexp

@[simp]
theorem DifferentiableAt.cexp (hc : DifferentiableAt ùïú f x) :
    DifferentiableAt ùïú (fun x => Complex.exp (f x)) x :=
  hc.hasFDerivAt.cexp.differentiableAt
#align differentiable_at.cexp DifferentiableAt.cexp

theorem DifferentiableOn.cexp (hc : DifferentiableOn ùïú f s) :
    DifferentiableOn ùïú (fun x => Complex.exp (f x)) s := fun x h => (hc x h).cexp
#align differentiable_on.cexp DifferentiableOn.cexp

@[simp]
theorem Differentiable.cexp (hc : Differentiable ùïú f) :
    Differentiable ùïú fun x => Complex.exp (f x) := fun x => (hc x).cexp
#align differentiable.cexp Differentiable.cexp

theorem ContDiff.cexp {n} (h : ContDiff ùïú n f) : ContDiff ùïú n fun x => Complex.exp (f x) :=
  Complex.contDiff_exp.comp h
#align cont_diff.cexp ContDiff.cexp

theorem ContDiffAt.cexp {n} (hf : ContDiffAt ùïú n f x) :
    ContDiffAt ùïú n (fun x => Complex.exp (f x)) x :=
  Complex.contDiff_exp.contDiffAt.comp x hf
#align cont_diff_at.cexp ContDiffAt.cexp

theorem ContDiffOn.cexp {n} (hf : ContDiffOn ùïú n f s) :
    ContDiffOn ùïú n (fun x => Complex.exp (f x)) s :=
  Complex.contDiff_exp.comp_contDiffOn hf
#align cont_diff_on.cexp ContDiffOn.cexp

theorem ContDiffWithinAt.cexp {n} (hf : ContDiffWithinAt ùïú n f s x) :
    ContDiffWithinAt ùïú n (fun x => Complex.exp (f x)) s x :=
  Complex.contDiff_exp.contDiffAt.comp_contDiffWithinAt x hf
#align cont_diff_within_at.cexp ContDiffWithinAt.cexp

end

namespace Real

variable {x y z : ‚Ñù}

theorem hasStrictDerivAt_exp (x : ‚Ñù) : HasStrictDerivAt exp (exp x) x :=
  (Complex.hasStrictDerivAt_exp x).real_of_complex
#align real.has_strict_deriv_at_exp Real.hasStrictDerivAt_exp

theorem hasDerivAt_exp (x : ‚Ñù) : HasDerivAt exp (exp x) x :=
  (Complex.hasDerivAt_exp x).real_of_complex
#align real.has_deriv_at_exp Real.hasDerivAt_exp

theorem contDiff_exp {n} : ContDiff ‚Ñù n exp :=
  Complex.contDiff_exp.real_of_complex
#align real.cont_diff_exp Real.contDiff_exp

theorem differentiable_exp : Differentiable ‚Ñù exp := fun x => (hasDerivAt_exp x).differentiableAt
#align real.differentiable_exp Real.differentiable_exp

theorem differentiableAt_exp : DifferentiableAt ‚Ñù exp x :=
  differentiable_exp x
#align real.differentiable_at_exp Real.differentiableAt_exp

@[simp]
theorem deriv_exp : deriv exp = exp :=
  funext fun x => (hasDerivAt_exp x).deriv
#align real.deriv_exp Real.deriv_exp

@[simp]
theorem iter_deriv_exp : ‚àÄ n : ‚Ñï, deriv^[n] exp = exp
  | 0 => rfl
  | n + 1 => by rw [iterate_succ_apply, deriv_exp, iter_deriv_exp n]
#align real.iter_deriv_exp Real.iter_deriv_exp

end Real

section

/-! Register lemmas for the derivatives of the composition of `Real.exp` with a differentiable
function, for standalone use and use with `simp`. -/


variable {f : ‚Ñù ‚Üí ‚Ñù} {f' x : ‚Ñù} {s : Set ‚Ñù}

theorem HasStrictDerivAt.exp (hf : HasStrictDerivAt f f' x) :
    HasStrictDerivAt (fun x => Real.exp (f x)) (Real.exp (f x) * f') x :=
  (Real.hasStrictDerivAt_exp (f x)).comp x hf
#align has_strict_deriv_at.exp HasStrictDerivAt.exp

theorem HasDerivAt.exp (hf : HasDerivAt f f' x) :
    HasDerivAt (fun x => Real.exp (f x)) (Real.exp (f x) * f') x :=
  (Real.hasDerivAt_exp (f x)).comp x hf
#align has_deriv_at.exp HasDerivAt.exp

theorem HasDerivWithinAt.exp (hf : HasDerivWithinAt f f' s x) :
    HasDerivWithinAt (fun x => Real.exp (f x)) (Real.exp (f x) * f') s x :=
  (Real.hasDerivAt_exp (f x)).comp_hasDerivWithinAt x hf
#align has_deriv_within_at.exp HasDerivWithinAt.exp

theorem derivWithin_exp (hf : DifferentiableWithinAt ‚Ñù f s x) (hxs : UniqueDiffWithinAt ‚Ñù s x) :
    derivWithin (fun x => Real.exp (f x)) s x = Real.exp (f x) * derivWithin f s x :=
  hf.hasDerivWithinAt.exp.derivWithin hxs
#align deriv_within_exp derivWithin_exp

@[simp]
theorem deriv_exp (hc : DifferentiableAt ‚Ñù f x) :
    deriv (fun x => Real.exp (f x)) x = Real.exp (f x) * deriv f x :=
  hc.hasDerivAt.exp.deriv
#align deriv_exp deriv_exp

end

section

/-! Register lemmas for the derivatives of the composition of `Real.exp` with a differentiable
function, for standalone use and use with `simp`. -/


variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] {f : E ‚Üí ‚Ñù} {f' : E ‚ÜíL[‚Ñù] ‚Ñù} {x : E}
  {s : Set E}

theorem ContDiff.exp {n} (hf : ContDiff ‚Ñù n f) : ContDiff ‚Ñù n fun x => Real.exp (f x) :=
  Real.contDiff_exp.comp hf
#align cont_diff.exp ContDiff.exp

theorem ContDiffAt.exp {n} (hf : ContDiffAt ‚Ñù n f x) : ContDiffAt ‚Ñù n (fun x => Real.exp (f x)) x :=
  Real.contDiff_exp.contDiffAt.comp x hf
#align cont_diff_at.exp ContDiffAt.exp

theorem ContDiffOn.exp {n} (hf : ContDiffOn ‚Ñù n f s) : ContDiffOn ‚Ñù n (fun x => Real.exp (f x)) s :=
  Real.contDiff_exp.comp_contDiffOn hf
#align cont_diff_on.exp ContDiffOn.exp

theorem ContDiffWithinAt.exp {n} (hf : ContDiffWithinAt ‚Ñù n f s x) :
    ContDiffWithinAt ‚Ñù n (fun x => Real.exp (f x)) s x :=
  Real.contDiff_exp.contDiffAt.comp_contDiffWithinAt x hf
#align cont_diff_within_at.exp ContDiffWithinAt.exp

theorem HasFDerivWithinAt.exp (hf : HasFDerivWithinAt f f' s x) :
    HasFDerivWithinAt (fun x => Real.exp (f x)) (Real.exp (f x) ‚Ä¢ f') s x :=
  (Real.hasDerivAt_exp (f x)).comp_hasFDerivWithinAt x hf
#align has_fderiv_within_at.exp HasFDerivWithinAt.exp

theorem HasFDerivAt.exp (hf : HasFDerivAt f f' x) :
    HasFDerivAt (fun x => Real.exp (f x)) (Real.exp (f x) ‚Ä¢ f') x :=
  (Real.hasDerivAt_exp (f x)).comp_hasFDerivAt x hf
#align has_fderiv_at.exp HasFDerivAt.exp

theorem HasStrictFDerivAt.exp (hf : HasStrictFDerivAt f f' x) :
    HasStrictFDerivAt (fun x => Real.exp (f x)) (Real.exp (f x) ‚Ä¢ f') x :=
  (Real.hasStrictDerivAt_exp (f x)).comp_hasStrictFDerivAt x hf
#align has_strict_fderiv_at.exp HasStrictFDerivAt.exp

theorem DifferentiableWithinAt.exp (hf : DifferentiableWithinAt ‚Ñù f s x) :
    DifferentiableWithinAt ‚Ñù (fun x => Real.exp (f x)) s x :=
  hf.hasFDerivWithinAt.exp.differentiableWithinAt
#align differentiable_within_at.exp DifferentiableWithinAt.exp

@[simp]
theorem DifferentiableAt.exp (hc : DifferentiableAt ‚Ñù f x) :
    DifferentiableAt ‚Ñù (fun x => Real.exp (f x)) x :=
  hc.hasFDerivAt.exp.differentiableAt
#align differentiable_at.exp DifferentiableAt.exp

theorem DifferentiableOn.exp (hc : DifferentiableOn ‚Ñù f s) :
    DifferentiableOn ‚Ñù (fun x => Real.exp (f x)) s := fun x h => (hc x h).exp
#align differentiable_on.exp DifferentiableOn.exp

@[simp]
theorem Differentiable.exp (hc : Differentiable ‚Ñù f) : Differentiable ‚Ñù fun x => Real.exp (f x) :=
  fun x => (hc x).exp
#align differentiable.exp Differentiable.exp

theorem fderivWithin_exp (hf : DifferentiableWithinAt ‚Ñù f s x) (hxs : UniqueDiffWithinAt ‚Ñù s x) :
    fderivWithin ‚Ñù (fun x => Real.exp (f x)) s x = Real.exp (f x) ‚Ä¢ fderivWithin ‚Ñù f s x :=
  hf.hasFDerivWithinAt.exp.fderivWithin hxs
#align fderiv_within_exp fderivWithin_exp

@[simp]
theorem fderiv_exp (hc : DifferentiableAt ‚Ñù f x) :
    fderiv ‚Ñù (fun x => Real.exp (f x)) x = Real.exp (f x) ‚Ä¢ fderiv ‚Ñù f x :=
  hc.hasFDerivAt.exp.fderiv
#align fderiv_exp fderiv_exp

end
