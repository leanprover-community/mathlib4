/-
Copyright (c) 2018 Chris Hughes. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Hughes, Abhimanyu Pallavi Sudhir, Jean Lo, Calle S√∂nne
-/
import Mathlib.Analysis.Calculus.ContDiff.RCLike
import Mathlib.Analysis.Calculus.IteratedDeriv.Lemmas
import Mathlib.Analysis.Complex.RealDeriv
import Mathlib.Analysis.SpecialFunctions.Exp
import Mathlib.Analysis.SpecialFunctions.Exponential

/-!
# Complex and real exponential

In this file we prove that `Complex.exp` and `Real.exp` are infinitely smooth functions.

## Tags

exp, derivative
-/

assert_not_exists IsConformalMap
assert_not_exists Conformal

noncomputable section

open Filter Asymptotics Set Function
open scoped Topology

/-! ## `Complex.exp` -/

section

open Complex

variable {E : Type} [NormedAddCommGroup E] [NormedSpace ‚ÑÇ E]
variable {f g : E ‚Üí ‚ÑÇ} {z : ‚ÑÇ} {x : E} {s : Set E}

/-- `exp` is entire -/
theorem analyticOnNhd_cexp : AnalyticOnNhd ‚ÑÇ exp univ := by
  rw [Complex.exp_eq_exp_‚ÑÇ]
  exact fun x _ ‚Ü¶ NormedSpace.exp_analytic x

theorem analyticOn_cexp : AnalyticOn ‚ÑÇ exp univ := analyticOnNhd_cexp.analyticOn

/-- `exp` is analytic at any point -/
theorem analyticAt_cexp : AnalyticAt ‚ÑÇ exp z :=
  analyticOnNhd_cexp z (mem_univ _)

/-- `exp ‚àò f` is analytic -/
theorem AnalyticAt.cexp (fa : AnalyticAt ‚ÑÇ f x) : AnalyticAt ‚ÑÇ (fun z ‚Ü¶ exp (f z)) x :=
  analyticAt_cexp.comp fa

theorem AnalyticWithinAt.cexp (fa : AnalyticWithinAt ‚ÑÇ f s x) :
    AnalyticWithinAt ‚ÑÇ (fun z ‚Ü¶ exp (f z)) s x :=
  analyticAt_cexp.comp_analyticWithinAt fa

/-- `exp ‚àò f` is analytic -/
theorem AnalyticOnNhd.cexp (fs : AnalyticOnNhd ‚ÑÇ f s) : AnalyticOnNhd ‚ÑÇ (fun z ‚Ü¶ exp (f z)) s :=
  fun z n ‚Ü¶ analyticAt_cexp.comp (fs z n)

theorem AnalyticOn.cexp (fs : AnalyticOn ‚ÑÇ f s) : AnalyticOn ‚ÑÇ (fun z ‚Ü¶ exp (f z)) s :=
  analyticOnNhd_cexp.comp_analyticOn fs (mapsTo_univ _ _)

end

namespace Complex

variable {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedAlgebra ùïú ‚ÑÇ]

/-- The complex exponential is everywhere differentiable, with the derivative `exp x`. -/
theorem hasDerivAt_exp (x : ‚ÑÇ) : HasDerivAt exp (exp x) x := by
  rw [hasDerivAt_iff_isLittleO_nhds_zero]
  have : (1 : ‚Ñï) < 2 := by norm_num
  refine (IsBigO.of_bound ‚Äñexp x‚Äñ ?_).trans_isLittleO (isLittleO_pow_id this)
  filter_upwards [Metric.ball_mem_nhds (0 : ‚ÑÇ) zero_lt_one]
  simp only [Metric.mem_ball, dist_zero_right, norm_pow]
  exact fun z hz => exp_bound_sq x z hz.le

@[simp]
theorem differentiable_exp : Differentiable ùïú exp := fun x =>
  (hasDerivAt_exp x).differentiableAt.restrictScalars ùïú

@[simp]
theorem differentiableAt_exp {x : ‚ÑÇ} : DifferentiableAt ùïú exp x :=
  differentiable_exp x

@[simp]
theorem deriv_exp : deriv exp = exp :=
  funext fun x => (hasDerivAt_exp x).deriv

@[simp]
theorem iter_deriv_exp : ‚àÄ n : ‚Ñï, deriv^[n] exp = exp
  | 0 => rfl
  | n + 1 => by rw [iterate_succ_apply, deriv_exp, iter_deriv_exp n]

theorem contDiff_exp {n : WithTop ‚Ñï‚àû} : ContDiff ùïú n exp :=
  analyticOnNhd_cexp.restrictScalars.contDiff

theorem hasStrictDerivAt_exp (x : ‚ÑÇ) : HasStrictDerivAt exp (exp x) x :=
  contDiff_exp.contDiffAt.hasStrictDerivAt' (hasDerivAt_exp x) le_rfl

theorem hasStrictFDerivAt_exp_real (x : ‚ÑÇ) : HasStrictFDerivAt exp (exp x ‚Ä¢ (1 : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ)) x :=
  (hasStrictDerivAt_exp x).complexToReal_fderiv

end Complex

section

variable {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedAlgebra ùïú ‚ÑÇ] {f : ùïú ‚Üí ‚ÑÇ} {f' : ‚ÑÇ} {x : ùïú}
  {s : Set ùïú}

theorem HasStrictDerivAt.cexp (hf : HasStrictDerivAt f f' x) :
    HasStrictDerivAt (fun x => Complex.exp (f x)) (Complex.exp (f x) * f') x :=
  (Complex.hasStrictDerivAt_exp (f x)).comp x hf

theorem HasDerivAt.cexp (hf : HasDerivAt f f' x) :
    HasDerivAt (fun x => Complex.exp (f x)) (Complex.exp (f x) * f') x :=
  (Complex.hasDerivAt_exp (f x)).comp x hf

theorem HasDerivWithinAt.cexp (hf : HasDerivWithinAt f f' s x) :
    HasDerivWithinAt (fun x => Complex.exp (f x)) (Complex.exp (f x) * f') s x :=
  (Complex.hasDerivAt_exp (f x)).comp_hasDerivWithinAt x hf

theorem derivWithin_cexp (hf : DifferentiableWithinAt ùïú f s x) (hxs : UniqueDiffWithinAt ùïú s x) :
    derivWithin (fun x => Complex.exp (f x)) s x = Complex.exp (f x) * derivWithin f s x :=
  hf.hasDerivWithinAt.cexp.derivWithin hxs

@[simp]
theorem deriv_cexp (hc : DifferentiableAt ùïú f x) :
    deriv (fun x => Complex.exp (f x)) x = Complex.exp (f x) * deriv f x :=
  hc.hasDerivAt.cexp.deriv

end

section

variable {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedAlgebra ùïú ‚ÑÇ] {E : Type*}
  [NormedAddCommGroup E] [NormedSpace ùïú E] {f : E ‚Üí ‚ÑÇ} {f' : E ‚ÜíL[ùïú] ‚ÑÇ} {x : E} {s : Set E}

theorem HasStrictFDerivAt.cexp (hf : HasStrictFDerivAt f f' x) :
    HasStrictFDerivAt (fun x => Complex.exp (f x)) (Complex.exp (f x) ‚Ä¢ f') x :=
  (Complex.hasStrictDerivAt_exp (f x)).comp_hasStrictFDerivAt x hf

theorem HasFDerivWithinAt.cexp (hf : HasFDerivWithinAt f f' s x) :
    HasFDerivWithinAt (fun x => Complex.exp (f x)) (Complex.exp (f x) ‚Ä¢ f') s x :=
  (Complex.hasDerivAt_exp (f x)).comp_hasFDerivWithinAt x hf

theorem HasFDerivAt.cexp (hf : HasFDerivAt f f' x) :
    HasFDerivAt (fun x => Complex.exp (f x)) (Complex.exp (f x) ‚Ä¢ f') x :=
  hasFDerivWithinAt_univ.1 <| hf.hasFDerivWithinAt.cexp

theorem DifferentiableWithinAt.cexp (hf : DifferentiableWithinAt ùïú f s x) :
    DifferentiableWithinAt ùïú (fun x => Complex.exp (f x)) s x :=
  hf.hasFDerivWithinAt.cexp.differentiableWithinAt

@[simp, fun_prop]
theorem DifferentiableAt.cexp (hc : DifferentiableAt ùïú f x) :
    DifferentiableAt ùïú (fun x => Complex.exp (f x)) x :=
  hc.hasFDerivAt.cexp.differentiableAt

theorem DifferentiableOn.cexp (hc : DifferentiableOn ùïú f s) :
    DifferentiableOn ùïú (fun x => Complex.exp (f x)) s := fun x h => (hc x h).cexp

@[simp, fun_prop]
theorem Differentiable.cexp (hc : Differentiable ùïú f) :
    Differentiable ùïú fun x => Complex.exp (f x) := fun x => (hc x).cexp

theorem ContDiff.cexp {n} (h : ContDiff ùïú n f) : ContDiff ùïú n fun x => Complex.exp (f x) :=
  Complex.contDiff_exp.comp h

theorem ContDiffAt.cexp {n} (hf : ContDiffAt ùïú n f x) :
    ContDiffAt ùïú n (fun x => Complex.exp (f x)) x :=
  Complex.contDiff_exp.contDiffAt.comp x hf

theorem ContDiffOn.cexp {n} (hf : ContDiffOn ùïú n f s) :
    ContDiffOn ùïú n (fun x => Complex.exp (f x)) s :=
  Complex.contDiff_exp.comp_contDiffOn hf

theorem ContDiffWithinAt.cexp {n} (hf : ContDiffWithinAt ùïú n f s x) :
    ContDiffWithinAt ùïú n (fun x => Complex.exp (f x)) s x :=
  Complex.contDiff_exp.contDiffAt.comp_contDiffWithinAt x hf

end

open Complex in
@[simp]
theorem iteratedDeriv_cexp_const_mul (n : ‚Ñï) (c : ‚ÑÇ) :
    (iteratedDeriv n fun s : ‚ÑÇ => exp (c * s)) = fun s => c ^ n * exp (c * s) := by
  rw [iteratedDeriv_const_mul contDiff_exp, iteratedDeriv_eq_iterate, iter_deriv_exp]

/-! ## `Real.exp` -/

section

open Real

variable {x : ‚Ñù} {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] {f : E ‚Üí ‚Ñù} {s : Set E}

/-- `exp` is entire -/
theorem analyticOnNhd_rexp : AnalyticOnNhd ‚Ñù exp univ := by
  rw [Real.exp_eq_exp_‚Ñù]
  exact fun x _ ‚Ü¶ NormedSpace.exp_analytic x

theorem analyticOn_rexp : AnalyticOn ‚Ñù exp univ := analyticOnNhd_rexp.analyticOn

/-- `exp` is analytic at any point -/
theorem analyticAt_rexp : AnalyticAt ‚Ñù exp x :=
  analyticOnNhd_rexp x (mem_univ _)

/-- `exp ‚àò f` is analytic -/
theorem AnalyticAt.rexp {x : E} (fa : AnalyticAt ‚Ñù f x) : AnalyticAt ‚Ñù (fun z ‚Ü¶ exp (f z)) x :=
  analyticAt_rexp.comp fa

theorem AnalyticWithinAt.rexp {x : E} (fa : AnalyticWithinAt ‚Ñù f s x) :
    AnalyticWithinAt ‚Ñù (fun z ‚Ü¶ exp (f z)) s x :=
  analyticAt_rexp.comp_analyticWithinAt fa

/-- `exp ‚àò f` is analytic -/
theorem AnalyticOnNhd.rexp {s : Set E} (fs : AnalyticOnNhd ‚Ñù f s) :
    AnalyticOnNhd ‚Ñù (fun z ‚Ü¶ exp (f z)) s :=
  fun z n ‚Ü¶ analyticAt_rexp.comp (fs z n)

theorem AnalyticOn.rexp (fs : AnalyticOn ‚Ñù f s) : AnalyticOn ‚Ñù (fun z ‚Ü¶ exp (f z)) s :=
  analyticOnNhd_rexp.comp_analyticOn fs (mapsTo_univ _ _)

end

namespace Real

theorem hasStrictDerivAt_exp (x : ‚Ñù) : HasStrictDerivAt exp (exp x) x :=
  (Complex.hasStrictDerivAt_exp x).real_of_complex

theorem hasDerivAt_exp (x : ‚Ñù) : HasDerivAt exp (exp x) x :=
  (Complex.hasDerivAt_exp x).real_of_complex

theorem contDiff_exp {n : WithTop ‚Ñï‚àû} : ContDiff ‚Ñù n exp :=
  Complex.contDiff_exp.real_of_complex

@[simp]
theorem differentiable_exp : Differentiable ‚Ñù exp := fun x => (hasDerivAt_exp x).differentiableAt

@[simp]
theorem differentiableAt_exp {x : ‚Ñù} : DifferentiableAt ‚Ñù exp x :=
  differentiable_exp x

@[simp]
theorem deriv_exp : deriv exp = exp :=
  funext fun x => (hasDerivAt_exp x).deriv

@[simp]
theorem iter_deriv_exp : ‚àÄ n : ‚Ñï, deriv^[n] exp = exp
  | 0 => rfl
  | n + 1 => by rw [iterate_succ_apply, deriv_exp, iter_deriv_exp n]

end Real

section

/-! Register lemmas for the derivatives of the composition of `Real.exp` with a differentiable
function, for standalone use and use with `simp`. -/


variable {f : ‚Ñù ‚Üí ‚Ñù} {f' x : ‚Ñù} {s : Set ‚Ñù}

theorem HasStrictDerivAt.exp (hf : HasStrictDerivAt f f' x) :
    HasStrictDerivAt (fun x => Real.exp (f x)) (Real.exp (f x) * f') x :=
  (Real.hasStrictDerivAt_exp (f x)).comp x hf

theorem HasDerivAt.exp (hf : HasDerivAt f f' x) :
    HasDerivAt (fun x => Real.exp (f x)) (Real.exp (f x) * f') x :=
  (Real.hasDerivAt_exp (f x)).comp x hf

theorem HasDerivWithinAt.exp (hf : HasDerivWithinAt f f' s x) :
    HasDerivWithinAt (fun x => Real.exp (f x)) (Real.exp (f x) * f') s x :=
  (Real.hasDerivAt_exp (f x)).comp_hasDerivWithinAt x hf

theorem derivWithin_exp (hf : DifferentiableWithinAt ‚Ñù f s x) (hxs : UniqueDiffWithinAt ‚Ñù s x) :
    derivWithin (fun x => Real.exp (f x)) s x = Real.exp (f x) * derivWithin f s x :=
  hf.hasDerivWithinAt.exp.derivWithin hxs

@[simp]
theorem deriv_exp (hc : DifferentiableAt ‚Ñù f x) :
    deriv (fun x => Real.exp (f x)) x = Real.exp (f x) * deriv f x :=
  hc.hasDerivAt.exp.deriv

end

section

/-! Register lemmas for the derivatives of the composition of `Real.exp` with a differentiable
function, for standalone use and use with `simp`. -/


variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] {f : E ‚Üí ‚Ñù} {f' : E ‚ÜíL[‚Ñù] ‚Ñù} {x : E}
  {s : Set E}

theorem ContDiff.exp {n} (hf : ContDiff ‚Ñù n f) : ContDiff ‚Ñù n fun x => Real.exp (f x) :=
  Real.contDiff_exp.comp hf

theorem ContDiffAt.exp {n} (hf : ContDiffAt ‚Ñù n f x) : ContDiffAt ‚Ñù n (fun x => Real.exp (f x)) x :=
  Real.contDiff_exp.contDiffAt.comp x hf

theorem ContDiffOn.exp {n} (hf : ContDiffOn ‚Ñù n f s) : ContDiffOn ‚Ñù n (fun x => Real.exp (f x)) s :=
  Real.contDiff_exp.comp_contDiffOn hf

theorem ContDiffWithinAt.exp {n} (hf : ContDiffWithinAt ‚Ñù n f s x) :
    ContDiffWithinAt ‚Ñù n (fun x => Real.exp (f x)) s x :=
  Real.contDiff_exp.contDiffAt.comp_contDiffWithinAt x hf

theorem HasFDerivWithinAt.exp (hf : HasFDerivWithinAt f f' s x) :
    HasFDerivWithinAt (fun x => Real.exp (f x)) (Real.exp (f x) ‚Ä¢ f') s x :=
  (Real.hasDerivAt_exp (f x)).comp_hasFDerivWithinAt x hf

theorem HasFDerivAt.exp (hf : HasFDerivAt f f' x) :
    HasFDerivAt (fun x => Real.exp (f x)) (Real.exp (f x) ‚Ä¢ f') x :=
  (Real.hasDerivAt_exp (f x)).comp_hasFDerivAt x hf

theorem HasStrictFDerivAt.exp (hf : HasStrictFDerivAt f f' x) :
    HasStrictFDerivAt (fun x => Real.exp (f x)) (Real.exp (f x) ‚Ä¢ f') x :=
  (Real.hasStrictDerivAt_exp (f x)).comp_hasStrictFDerivAt x hf

theorem DifferentiableWithinAt.exp (hf : DifferentiableWithinAt ‚Ñù f s x) :
    DifferentiableWithinAt ‚Ñù (fun x => Real.exp (f x)) s x :=
  hf.hasFDerivWithinAt.exp.differentiableWithinAt

@[simp, fun_prop]
theorem DifferentiableAt.exp (hc : DifferentiableAt ‚Ñù f x) :
    DifferentiableAt ‚Ñù (fun x => Real.exp (f x)) x :=
  hc.hasFDerivAt.exp.differentiableAt

theorem DifferentiableOn.exp (hc : DifferentiableOn ‚Ñù f s) :
    DifferentiableOn ‚Ñù (fun x => Real.exp (f x)) s := fun x h => (hc x h).exp

@[simp, fun_prop]
theorem Differentiable.exp (hc : Differentiable ‚Ñù f) : Differentiable ‚Ñù fun x => Real.exp (f x) :=
  fun x => (hc x).exp

theorem fderivWithin_exp (hf : DifferentiableWithinAt ‚Ñù f s x) (hxs : UniqueDiffWithinAt ‚Ñù s x) :
    fderivWithin ‚Ñù (fun x => Real.exp (f x)) s x = Real.exp (f x) ‚Ä¢ fderivWithin ‚Ñù f s x :=
  hf.hasFDerivWithinAt.exp.fderivWithin hxs

@[simp]
theorem fderiv_exp (hc : DifferentiableAt ‚Ñù f x) :
    fderiv ‚Ñù (fun x => Real.exp (f x)) x = Real.exp (f x) ‚Ä¢ fderiv ‚Ñù f x :=
  hc.hasFDerivAt.exp.fderiv

end

open Real in
@[simp]
theorem iteratedDeriv_exp_const_mul (n : ‚Ñï) (c : ‚Ñù) :
    (iteratedDeriv n fun s => exp (c * s)) = fun s => c ^ n * exp (c * s) := by
  rw [iteratedDeriv_const_mul contDiff_exp, iteratedDeriv_eq_iterate, iter_deriv_exp]
