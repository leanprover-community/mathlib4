/-
Copyright (c) 2025 Mitchell Horner. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mitchell Horner
-/
import Mathlib.Algebra.BigOperators.Field
import Mathlib.Analysis.Convex.Deriv
import Mathlib.Analysis.Convex.Piecewise
import Mathlib.Data.Nat.Choose.Cast

/-!
# Pochhammer polynomials

This file proves analysis theorems for Pochhammer polynomials.

## Main statements

* `Differentiable.descPochhammer_eval` is the proof that the descending Pochhammer polynomial
  `descPochhammer ‚Ñù n` is differentiable.

* `ConvexOn.descPochhammer_eval` is the proof that the descending Pochhammer polynomial
  `descPochhammer ‚Ñù n` is convex on `[n-1, ‚àû)`.

* `descPochhammer_eval_le_sum_descFactorial` is a special case of **Jensen's inequality**
  for `Nat.descFactorial`.

* `descPochhammer_eval_div_factorial_le_sum_choose` is a special case of **Jensen's inequality**
  for `Nat.choose`.
-/


section DescPochhammer

variable {n : ‚Ñï} {ùïú : Type*} {k : ùïú} [NontriviallyNormedField ùïú]

/-- `descPochhammer ùïú n` is differentiable. -/
theorem differentiable_descPochhammer_eval : Differentiable ùïú (descPochhammer ùïú n).eval := by
  simp [descPochhammer_eval_eq_prod_range, Differentiable.finset_prod]

/-- `descPochhammer ùïú n` is continuous. -/
theorem continuous_descPochhammer_eval : Continuous (descPochhammer ùïú n).eval := by
  exact differentiable_descPochhammer_eval.continuous

lemma deriv_descPochhammer_eval_eq_sum_prod_range_erase (n : ‚Ñï) (k : ùïú) :
    deriv (descPochhammer ùïú n).eval k
      = ‚àë i ‚àà Finset.range n, ‚àè j ‚àà (Finset.range n).erase i, (k - j) := by
  simp [descPochhammer_eval_eq_prod_range, deriv_finset_prod]

/-- `deriv (descPochhammer ‚Ñù n)` is monotone on `(n-1, ‚àû)`. -/
lemma monotoneOn_deriv_descPochhammer_eval (n : ‚Ñï) :
    MonotoneOn (deriv (descPochhammer ‚Ñù n).eval) (Set.Ioi (n - 1 : ‚Ñù)) := by
  induction n with
  | zero => simp [monotoneOn_const]
  | succ n ih =>
    intro a ha b hb hab
    rw [Set.mem_Ioi, Nat.cast_add_one, add_sub_cancel_right] at ha hb
    simp_rw [deriv_descPochhammer_eval_eq_sum_prod_range_erase]
    apply Finset.sum_le_sum; intro i hi
    apply Finset.prod_le_prod
    ¬∑ intro j hj
      rw [Finset.mem_erase, Finset.mem_range] at hj
      apply sub_nonneg_of_le
      exact ha.le.trans' (mod_cast Nat.le_pred_of_lt hj.2)
    ¬∑ intro j hj
      rwa [‚Üê sub_le_sub_iff_right (j : ‚Ñù)] at hab

/-- `descPochhammer ‚Ñù n` is convex on `[n-1, ‚àû)`. -/
theorem convexOn_descPochhammer_eval (n : ‚Ñï) :
    ConvexOn ‚Ñù (Set.Ici (n - 1 : ‚Ñù)) (descPochhammer ‚Ñù n).eval := by
  rcases n.eq_zero_or_pos with h_eq | _
  ¬∑ simp [h_eq, convexOn_const, convex_Ici]
  ¬∑ apply MonotoneOn.convexOn_of_deriv (convex_Ici (n - 1 : ‚Ñù))
      continuous_descPochhammer_eval.continuousOn
      differentiable_descPochhammer_eval.differentiableOn
    rw [interior_Ici]
    exact monotoneOn_deriv_descPochhammer_eval n

private lemma piecewise_Ici_descPochhammer_eval_zero_eq_descFactorial (k n : ‚Ñï) :
    (Set.Ici (n - 1 : ‚Ñù)).piecewise (descPochhammer ‚Ñù n).eval 0 k
      = k.descFactorial n := by
  rw [Set.piecewise, descPochhammer_eval_eq_descFactorial, ite_eq_left_iff, Set.mem_Ici, not_le,
    eq_comm, Pi.zero_apply, Nat.cast_eq_zero, Nat.descFactorial_eq_zero_iff_lt, ‚Üê @Nat.cast_lt ‚Ñù]
  exact (sub_lt_self (n : ‚Ñù) zero_lt_one).trans'

private lemma convexOn_piecewise_Ici_descPochhammer_eval_zero (hn : n ‚â† 0) :
    ConvexOn ‚Ñù Set.univ ((Set.Ici (n - 1 : ‚Ñù)).piecewise (descPochhammer ‚Ñù n).eval 0) := by
  rw [‚Üê Nat.pos_iff_ne_zero] at hn
  apply convexOn_univ_piecewise_Ici_of_monotoneOn_Ici_antitoneOn_Iic
    (convexOn_descPochhammer_eval n) (convexOn_const 0 (convex_Iic (n - 1 : ‚Ñù)))
    (monotoneOn_descPochhammer_eval n) antitoneOn_const
  simpa [‚Üê Nat.cast_pred hn] using descPochhammer_eval_coe_nat_of_lt (Nat.sub_one_lt_of_lt hn)

/-- Special case of **Jensen's inequality** for `Nat.descFactorial`. -/
theorem descPochhammer_eval_le_sum_descFactorial
    (hn : n ‚â† 0) {Œπ : Type*} {t : Finset Œπ} (p : Œπ ‚Üí ‚Ñï) (w : Œπ ‚Üí ‚Ñù)
    (h‚ÇÄ : ‚àÄ i ‚àà t, 0 ‚â§ w i) (h‚ÇÅ : ‚àë i ‚àà t, w i = 1) (h_avg : n - 1 ‚â§ ‚àë i ‚àà t, w i * p i) :
    (descPochhammer ‚Ñù n).eval (‚àë i ‚àà t, w i * p i)
      ‚â§ ‚àë i ‚àà t, w i * (p i).descFactorial n := by
  let f : ‚Ñù ‚Üí ‚Ñù := (Set.Ici (n - 1 : ‚Ñù)).piecewise (descPochhammer ‚Ñù n).eval 0
  suffices h_jensen : f (‚àë i ‚àà t, w i ‚Ä¢ p i) ‚â§ ‚àë i ‚àà t, w i ‚Ä¢ f (p i) by
    simpa only [smul_eq_mul, f, Set.piecewise_eq_of_mem (Set.Ici (n - 1 : ‚Ñù)) _ _ h_avg,
      piecewise_Ici_descPochhammer_eval_zero_eq_descFactorial] using h_jensen
  exact ConvexOn.map_sum_le (convexOn_piecewise_Ici_descPochhammer_eval_zero hn) h‚ÇÄ h‚ÇÅ (by simp)

/-- Special case of **Jensen's inequality** for `Nat.choose`. -/
theorem descPochhammer_eval_div_factorial_le_sum_choose
    (hn : n ‚â† 0) {Œπ : Type*} {t : Finset Œπ} (p : Œπ ‚Üí ‚Ñï) (w : Œπ ‚Üí ‚Ñù)
    (h‚ÇÄ : ‚àÄ i ‚àà t, 0 ‚â§ w i) (h‚ÇÅ : ‚àë i ‚àà t, w i = 1) (h_avg : n - 1 ‚â§ ‚àë i ‚àà t, w i * p i) :
    (descPochhammer ‚Ñù n).eval (‚àë i ‚àà t, w i * p i) / n.factorial
      ‚â§ ‚àë i ‚àà t, w i * (p i).choose n := by
  simp_rw [Nat.cast_choose_eq_descPochhammer_div,
    mul_div, ‚Üê Finset.sum_div, descPochhammer_eval_eq_descFactorial]
  apply div_le_div_of_nonneg_right _ (Nat.cast_nonneg n.factorial)
  exact descPochhammer_eval_le_sum_descFactorial hn p w h‚ÇÄ h‚ÇÅ h_avg

end DescPochhammer
