/-
Copyright (c) 2024 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/

import Mathlib.Analysis.SpecialFunctions.Gamma.Beta

/-!
# Deligne's archimedean Gamma-factors

In the theory of L-series one frequently encounters the following functions (of a complex variable
`s`) introduced in Deligne's landmark paper *Valeurs de fonctions L et periodes d'integrales*:

$$ \Gamma_{\mathbb{R}}(s) = \pi ^ {-s / 2} \Gamma (s / 2) $$

and

$$ \Gamma_{\mathbb{C}}(s) = 2 (2 \pi) ^ {-s} \Gamma (s). $$

These are the factors that need to be included in the Dedekind zeta function of a number field
for each real, resp. complex, infinite place.

(Note that these are *not* the same as Mathlib's `Real.Gamma` vs. `Complex.Gamma`; Deligne's
functions both take a complex variable as input.)

This file defines these functions, and proves some elementary properties, including a reflection
formula which is an important input in functional equations of (un-completed) Dirichlet L-functions.
-/


open Filter Topology Asymptotics Real Set MeasureTheory
open Complex hiding abs_of_nonneg

namespace Complex

/-- Deligne's archimedean Gamma factor for a real infinite place.

See "Valeurs de fonctions L et periodes d'integrales" ¬ß 5.3. Note that this is not the same as
`Real.Gamma`; in particular it is a function `‚ÑÇ ‚Üí ‚ÑÇ`. -/
noncomputable def Gamma‚Ñù (s : ‚ÑÇ) := œÄ ^ (-s / 2) * Gamma (s / 2)

lemma Gamma‚Ñù_def (s : ‚ÑÇ) : Gamma‚Ñù s = œÄ ^ (-s / 2) * Gamma (s / 2) := rfl

/-- Deligne's archimedean Gamma factor for a complex infinite place.

See "Valeurs de fonctions L et periodes d'integrales" ¬ß 5.3. (Some authors omit the factor of 2).
Note that this is not the same as `Complex.Gamma`. -/
noncomputable def Gamma‚ÑÇ (s : ‚ÑÇ) := 2 * (2 * œÄ) ^ (-s) * Gamma s

lemma Gamma‚ÑÇ_def (s : ‚ÑÇ) : Gamma‚ÑÇ s = 2 * (2 * œÄ) ^ (-s) * Gamma s := rfl

lemma Gamma‚Ñù_add_two {s : ‚ÑÇ} (hs : s ‚â† 0) : Gamma‚Ñù (s + 2) = Gamma‚Ñù s * s / 2 / œÄ := by
  rw [Gamma‚Ñù_def, Gamma‚Ñù_def, neg_div, add_div, neg_add, div_self two_ne_zero,
    Gamma_add_one _ (div_ne_zero hs two_ne_zero),
    cpow_add _ _ (ofReal_ne_zero.mpr pi_ne_zero), cpow_neg_one]
  field_simp [pi_ne_zero]
  ring

lemma Gamma‚ÑÇ_add_one {s : ‚ÑÇ} (hs : s ‚â† 0) : Gamma‚ÑÇ (s + 1) = Gamma‚ÑÇ s * s / 2 / œÄ := by
  rw [Gamma‚ÑÇ_def, Gamma‚ÑÇ_def, Gamma_add_one _ hs, neg_add,
    cpow_add _ _ (mul_ne_zero two_ne_zero (ofReal_ne_zero.mpr pi_ne_zero)), cpow_neg_one]
  field_simp [pi_ne_zero]
  ring

lemma Gamma‚Ñù_ne_zero_of_re_pos {s : ‚ÑÇ} (hs : 0 < re s) : Gamma‚Ñù s ‚â† 0 := by
  apply mul_ne_zero
  ¬∑ simp [pi_ne_zero]
  ¬∑ apply Gamma_ne_zero_of_re_pos
    rw [div_ofNat_re]
    exact div_pos hs two_pos

lemma Gamma‚Ñù_eq_zero_iff {s : ‚ÑÇ} : Gamma‚Ñù s = 0 ‚Üî ‚àÉ n : ‚Ñï, s = -(2 * n) := by
  simp [Gamma‚Ñù_def, Complex.Gamma_eq_zero_iff, pi_ne_zero, div_eq_iff (two_ne_zero' ‚ÑÇ), mul_comm]

@[simp]
lemma Gamma‚Ñù_one : Gamma‚Ñù 1 = 1 := by
  rw [Gamma‚Ñù_def, Complex.Gamma_one_half_eq]
  simp [neg_div, cpow_neg, inv_mul_cancel, pi_ne_zero]

@[simp]
lemma Gamma‚ÑÇ_one : Gamma‚ÑÇ 1 = 1 / œÄ := by
  rw [Gamma‚ÑÇ_def, cpow_neg_one, Complex.Gamma_one]
  field_simp [pi_ne_zero]

section analyticity

lemma differentiable_Gamma‚Ñù_inv : Differentiable ‚ÑÇ (fun s ‚Ü¶ (Gamma‚Ñù s)‚Åª¬π) := by
  conv => enter [2, s]; rw [Gamma‚Ñù, mul_inv]
  refine Differentiable.mul (fun s ‚Ü¶ .inv ?_ (by simp [pi_ne_zero])) ?_
  ¬∑ refine ((differentiableAt_id.neg.div_const (2 : ‚ÑÇ)).const_cpow ?_)
    exact Or.inl (ofReal_ne_zero.mpr pi_ne_zero)
  ¬∑ exact differentiable_one_div_Gamma.comp (differentiable_id.div_const _)

lemma Gamma‚Ñù_residue_zero : Tendsto (fun s ‚Ü¶ s * Gamma‚Ñù s) (ùìù[‚â†] 0) (ùìù 2) := by
  have h : Tendsto (fun z : ‚ÑÇ ‚Ü¶ z / 2 * Gamma (z / 2)) (ùìù[‚â†] 0) (ùìù 1) := by
    refine tendsto_self_mul_Gamma_nhds_zero.comp ?_
    rw [tendsto_nhdsWithin_iff, (by simp : ùìù (0 : ‚ÑÇ) = ùìù (0 / 2))]
    exact ‚ü®(tendsto_id.div_const _).mono_left nhdsWithin_le_nhds,
      eventually_of_mem self_mem_nhdsWithin fun x hx ‚Ü¶ div_ne_zero hx two_ne_zero‚ü©
  have h' : Tendsto (fun s : ‚ÑÇ ‚Ü¶ 2 * (œÄ : ‚ÑÇ) ^ (-s / 2)) (ùìù[‚â†] 0) (ùìù 2) := by
    rw [(by simp : ùìù 2 = ùìù (2 * (œÄ : ‚ÑÇ) ^ (-(0 : ‚ÑÇ) / 2)))]
    refine Tendsto.mono_left (ContinuousAt.tendsto ?_) nhdsWithin_le_nhds
    exact continuousAt_const.mul ((continuousAt_const_cpow (ofReal_ne_zero.mpr pi_ne_zero)).comp
      (continuousAt_id.neg.div_const _))
  convert mul_one (2 : ‚ÑÇ) ‚ñ∏ (h'.mul h) using 2 with z
  rw [Gamma‚Ñù]
  ring_nf

end analyticity

section reflection

/-- Reformulation of the doubling formula in terms of `Gamma‚Ñù`. -/
lemma Gamma‚Ñù_mul_Gamma‚Ñù_add_one (s : ‚ÑÇ) : Gamma‚Ñù s * Gamma‚Ñù (s + 1) = Gamma‚ÑÇ s := by
  simp only [Gamma‚Ñù_def, Gamma‚ÑÇ_def]
  calc
  _ = (œÄ ^ (-s / 2) * œÄ ^ (-(s + 1) / 2)) * (Gamma (s / 2) * Gamma (s / 2 + 1 / 2)) := by ring_nf
  _ = 2 ^ (1 - s) * (œÄ ^ (-1 / 2 - s) * œÄ ^ (1 / 2 : ‚ÑÇ)) * Gamma s := by
    rw [‚Üê cpow_add _ _ (ofReal_ne_zero.mpr pi_ne_zero), Complex.Gamma_mul_Gamma_add_half,
      sqrt_eq_rpow, ofReal_cpow pi_pos.le, ofReal_div, ofReal_one, ofReal_ofNat]
    ring_nf
  _ = 2 * ((2 : ‚Ñù) ^ (-s) * œÄ ^ (-s)) * Gamma s := by
    rw [sub_eq_add_neg, cpow_add _ _ two_ne_zero, cpow_one,
      ‚Üê cpow_add _ _ (ofReal_ne_zero.mpr pi_ne_zero), ofReal_ofNat]
    ring_nf
  _ = 2 * (2 * œÄ) ^ (-s) * Gamma s := by
    rw [‚Üê mul_cpow_ofReal_nonneg two_pos.le pi_pos.le, ofReal_ofNat]

/-- Reformulation of the reflection formula in terms of `Gamma‚Ñù`. -/
lemma Gamma‚Ñù_one_sub_mul_Gamma‚Ñù_one_add (s : ‚ÑÇ) :
    Gamma‚Ñù (1 - s) * Gamma‚Ñù (1 + s) = (cos (œÄ * s / 2))‚Åª¬π :=
  calc Gamma‚Ñù (1 - s) * Gamma‚Ñù (1 + s)
  _ = (œÄ ^ ((s - 1) / 2) * œÄ ^ ((-1 - s) / 2)) *
        (Gamma ((1 - s) / 2) * Gamma (1 - (1 - s) / 2)) := by
    simp only [Gamma‚Ñù_def]
    ring_nf
  _ = (œÄ ^ ((s - 1) / 2) * œÄ ^ ((-1 - s) / 2) * œÄ ^ (1 : ‚ÑÇ)) / sin (œÄ / 2 - œÄ * s / 2) := by
    rw [Complex.Gamma_mul_Gamma_one_sub, cpow_one]
    ring_nf
  _ = _ := by
    simp_rw [‚Üê cpow_add _ _ (ofReal_ne_zero.mpr pi_ne_zero),
      Complex.sin_pi_div_two_sub]
    ring_nf
    rw [cpow_zero, one_mul]

/-- Another formulation of the reflection formula in terms of `Gamma‚Ñù`. -/
lemma Gamma‚Ñù_div_Gamma‚Ñù_one_sub {s : ‚ÑÇ} (hs : ‚àÄ (n : ‚Ñï), s ‚â† -(2 * n + 1)) :
    Gamma‚Ñù s / Gamma‚Ñù (1 - s) = Gamma‚ÑÇ s * cos (œÄ * s / 2) := by
  have : Gamma‚Ñù (s + 1) ‚â† 0 := by
    simpa only [Ne, Gamma‚Ñù_eq_zero_iff, not_exists, ‚Üê eq_sub_iff_add_eq,
      sub_eq_add_neg, ‚Üê neg_add]
  calc Gamma‚Ñù s / Gamma‚Ñù (1 - s)
  _ = (Gamma‚Ñù s * Gamma‚Ñù (s + 1)) / (Gamma‚Ñù (1 - s) * Gamma‚Ñù (1 + s)) := by
    rw [add_comm 1 s, mul_comm (Gamma‚Ñù (1 - s)) (Gamma‚Ñù (s + 1)), ‚Üê div_div,
      mul_div_cancel_right‚ÇÄ _ this]
  _ = (2 * (2 * œÄ) ^ (-s) * Gamma s) / ((cos (œÄ * s / 2))‚Åª¬π) := by
    rw [Gamma‚Ñù_one_sub_mul_Gamma‚Ñù_one_add, Gamma‚Ñù_mul_Gamma‚Ñù_add_one, Gamma‚ÑÇ_def]
  _ = _ := by rw [Gamma‚ÑÇ_def, div_eq_mul_inv, inv_inv]

/-- Formulation of reflection formula tailored to functional equations of L-functions of even
Dirichlet characters (including Riemann zeta). -/
lemma inv_Gamma‚Ñù_one_sub {s : ‚ÑÇ} (hs : ‚àÄ (n : ‚Ñï), s ‚â† -n) :
    (Gamma‚Ñù (1 - s))‚Åª¬π = Gamma‚ÑÇ s * cos (œÄ * s / 2) * (Gamma‚Ñù s)‚Åª¬π := by
  have h1 : Gamma‚Ñù s ‚â† 0 := by
    rw [Ne, Gamma‚Ñù_eq_zero_iff, not_exists]
    intro n h
    specialize hs (2 * n)
    simp_all
  have h2 : ‚àÄ (n : ‚Ñï), s ‚â† -(2 * ‚Üën + 1) := by
    intro n h
    specialize hs (2 * n + 1)
    simp_all
  rw [‚Üê Gamma‚Ñù_div_Gamma‚Ñù_one_sub h2, ‚Üê div_eq_mul_inv, div_right_comm, div_self h1, one_div]

/-- Formulation of reflection formula tailored to functional equations of L-functions of odd
Dirichlet characters. -/
lemma inv_Gamma‚Ñù_two_sub {s : ‚ÑÇ} (hs : ‚àÄ (n : ‚Ñï), s ‚â† -n) :
    (Gamma‚Ñù (2 - s))‚Åª¬π = Gamma‚ÑÇ s * sin (œÄ * s / 2) * (Gamma‚Ñù (s + 1))‚Åª¬π := by
  by_cases h : s = 1
  ¬∑ rw [h, (by ring : 2 - 1 = (1 : ‚ÑÇ)), Gamma‚Ñù_one, Gamma‚Ñù,
    neg_div, (by norm_num : (1 + 1) / 2 = (1 : ‚ÑÇ)), Complex.Gamma_one, Gamma‚ÑÇ_one,
    mul_one, Complex.sin_pi_div_two, mul_one, cpow_neg_one, mul_one, inv_inv,
    div_mul_cancel‚ÇÄ _ (ofReal_ne_zero.mpr pi_ne_zero), inv_one]
  rw [‚Üê Ne.def, ‚Üê sub_ne_zero] at h
  have h' (n : ‚Ñï) : s - 1 ‚â† -n := by
    cases' n with m
    ¬∑ rwa [Nat.cast_zero, neg_zero]
    ¬∑ rw [Ne, sub_eq_iff_eq_add]
      convert hs m using 2
      push_cast
      ring
  rw [(by ring : 2 - s = 1 - (s - 1)), inv_Gamma‚Ñù_one_sub h',
    (by rw [sub_add_cancel] : Gamma‚ÑÇ s = Gamma‚ÑÇ (s - 1 + 1)), Gamma‚ÑÇ_add_one h,
    (by ring : s + 1 = (s - 1) + 2), Gamma‚Ñù_add_two h, mul_sub, sub_div, mul_one,
      Complex.cos_sub_pi_div_two]
  simp_rw [mul_div_assoc, mul_inv]
  generalize (Gamma‚Ñù (s - 1))‚Åª¬π = A
  field_simp [pi_ne_zero]
  ring

end reflection

end Complex
