/-
Copyright (c) 2024 Jakob Stiefel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jakob Stiefel
-/
import Mathlib.Analysis.SpecialFunctions.ExpDeriv
import Mathlib.Analysis.SpecialFunctions.Log.Basic
import Mathlib.Topology.ContinuousMap.Bounded.Basic

/-!
# Definition of `mulExpNegMulSq` and properties

`mulExpNegMulSq` is the mapping `fun (Œµ : ‚Ñù) (x : ‚Ñù) => x * Real.exp (- (Œµ * x * x))`. By
composition, it can be used to transform a function `g : E ‚Üí ‚Ñù` into a bounded function
`mulExpNegMulSq Œµ ‚àò g : E ‚Üí ‚Ñù = fun x => g x * Real.exp (-Œµ * g x * g x)` with useful
boundedness and convergence properties.

## Main Properties

- `abs_mulExpNegMulSq_le`: For fixed `Œµ > 0`, the mapping `x ‚Ü¶ mulExpNegMulSq Œµ x` is
  bounded by `Real.sqrt Œµ‚Åª¬π`;
- `tendsto_mulExpNegMulSq`: For fixed `x : ‚Ñù`, the mapping `mulExpNegMulSq Œµ x`
  converges pointwise to `x` as `Œµ ‚Üí 0`;
- `lipschitzWith_one_mulExpNegMulSq`: For fixed `Œµ > 0`, the mapping `mulExpNegMulSq Œµ` is
  Lipschitz with constant `1`;
- `abs_mulExpNegMulSq_comp_le_norm`: For a fixed bounded continuous function `g`, the mapping
  `mulExpNegMulSq Œµ ‚àò g` is bounded by `norm g`, uniformly in `Œµ ‚â• 0`;
-/

open NNReal ENNReal BoundedContinuousFunction Filter

open scoped Topology

namespace Real

/-! ### Definition and properties of `fun x => x * Real.exp (- (Œµ * x * x))` -/

/--
Mapping `fun Œµ x => x * Real.exp (- (Œµ * x * x))`. By composition, it can be used to transform
functions into bounded functions.
-/
noncomputable
def mulExpNegMulSq (Œµ x : ‚Ñù) := x * exp (- (Œµ * x * x))

theorem mulExpNegSq_apply (Œµ x : ‚Ñù) : mulExpNegMulSq Œµ x = x * exp (- (Œµ * x * x)) := rfl

theorem neg_mulExpNegMulSq_neg (Œµ x : ‚Ñù) : - mulExpNegMulSq Œµ (-x) = mulExpNegMulSq Œµ x := by
  simp [mulExpNegMulSq]

theorem mulExpNegMulSq_one_le_one (x : ‚Ñù) : mulExpNegMulSq 1 x ‚â§ 1 := by
  simp [mulExpNegMulSq]
  rw [‚Üê le_div_iff‚ÇÄ (exp_pos (-(x * x))), exp_neg, div_inv_eq_mul, one_mul]
  apply le_trans _ (add_one_le_exp (x * x))
  nlinarith

theorem neg_one_le_mulExpNegMulSq_one (x : ‚Ñù) : -1 ‚â§ mulExpNegMulSq 1 x := by
  rw [‚Üê neg_mulExpNegMulSq_neg, neg_le_neg_iff]
  exact mulExpNegMulSq_one_le_one (-x)

theorem abs_mulExpNegMulSq_one_le_one (x : ‚Ñù) : |mulExpNegMulSq 1 x| ‚â§ 1 :=
  abs_le.mpr ‚ü®neg_one_le_mulExpNegMulSq_one x, mulExpNegMulSq_one_le_one x‚ü©

variable {Œµ : ‚Ñù}

@[continuity, fun_prop]
theorem continuous_mulExpNegMulSq : Continuous (fun x => mulExpNegMulSq Œµ x) :=
  Continuous.mul continuous_id (by fun_prop)

@[continuity, fun_prop]
theorem _root_.Continuous.mulExpNegMulSq {Œ± : Type*} [TopologicalSpace Œ±] {f : Œ± ‚Üí ‚Ñù}
    (hf : Continuous f) : Continuous (fun x => mulExpNegMulSq Œµ (f x)) :=
  continuous_mulExpNegMulSq.comp hf

theorem differentiableAt_mulExpNegMulSq (y : ‚Ñù) :
    DifferentiableAt ‚Ñù (mulExpNegMulSq Œµ) y :=
  DifferentiableAt.mul differentiableAt_id' (by fun_prop)

@[fun_prop] theorem differentiable_mulExpNegMulSq : Differentiable ‚Ñù (mulExpNegMulSq Œµ) :=
  fun _ => differentiableAt_mulExpNegMulSq _

theorem hasDerivAt_mulExpNegMulSq (y : ‚Ñù) :
    HasDerivAt (mulExpNegMulSq Œµ)
    (exp (- (Œµ * y * y)) + y * (exp (- (Œµ * y * y)) * (-2 * Œµ * y))) y := by
  nth_rw 1 [‚Üê one_mul (exp (- (Œµ * y * y)))]
  apply HasDerivAt.mul (hasDerivAt_id' y)
  apply HasDerivAt.exp (HasDerivAt.congr_deriv (HasDerivAt.neg
    (HasDerivAt.mul (HasDerivAt.const_mul Œµ (hasDerivAt_id' y)) (hasDerivAt_id' y))) (by ring))

theorem deriv_mulExpNegMulSq (y : ‚Ñù) : deriv (mulExpNegMulSq Œµ) y =
    exp (- (Œµ * y * y)) + y * (exp (- (Œµ * y * y)) * (-2 * Œµ * y)) :=
  HasDerivAt.deriv (hasDerivAt_mulExpNegMulSq y)

theorem norm_deriv_mulExpNegMulSq_le_one (hŒµ : 0 < Œµ) (x : ‚Ñù) :
    ‚Äñderiv (mulExpNegMulSq Œµ) x‚Äñ ‚â§ 1 := by
  rw [norm_eq_abs, deriv_mulExpNegMulSq]
  have heq : exp (- (Œµ * x * x)) + x * (exp (- (Œµ * x * x)) * (-2 * Œµ * x))
      = exp (- (Œµ * x * x)) * (1 -2 * (Œµ * x * x)) := by ring
  rw [heq, abs_mul, abs_exp]
  set y := Œµ * x * x with hy
  have hynonneg : 0 ‚â§ y := by
    rw [hy, mul_assoc]
    exact mul_nonneg hŒµ.le (mul_self_nonneg x)
  apply mul_le_of_le_inv_mul‚ÇÄ (zero_le_one' ‚Ñù) (exp_nonneg _)
  simp only [‚Üê exp_neg (-y), neg_neg, mul_one, abs_le, neg_le_sub_iff_le_add, tsub_le_iff_right]
  refine ‚ü®le_trans two_mul_le_exp ((le_add_iff_nonneg_left (exp y)).mpr zero_le_one), ?_‚ü©
  exact le_trans (one_le_exp hynonneg) (le_add_of_nonneg_right (by simp [hynonneg]))

theorem nnnorm_deriv_mulExpNegMulSq_le_one (hŒµ : 0 < Œµ) (x : ‚Ñù) :
    ‚Äñderiv (mulExpNegMulSq Œµ) x‚Äñ‚Çä ‚â§ 1 := by
  rw [‚Üê NNReal.coe_le_coe, coe_nnnorm]
  exact norm_deriv_mulExpNegMulSq_le_one hŒµ x

 /-- For fixed `Œµ > 0`, the mapping `mulExpNegMulSq Œµ` is Lipschitz with constant `1` -/
theorem lipschitzWith_one_mulExpNegMulSq (hŒµ : 0 < Œµ) :
    LipschitzWith 1 (mulExpNegMulSq Œµ) := by
  apply lipschitzWith_of_nnnorm_deriv_le differentiable_mulExpNegMulSq
  exact nnnorm_deriv_mulExpNegMulSq_le_one hŒµ

theorem mulExpNegMulSq_eq_sqrt_mul_mulExpNegMulSq_one (hŒµ : 0 < Œµ) (x : ‚Ñù) :
    mulExpNegMulSq Œµ x = (sqrt Œµ)‚Åª¬π * mulExpNegMulSq 1 (sqrt Œµ * x) := by
  simp only [mulExpNegMulSq, one_mul]
  have h : sqrt Œµ * x * (sqrt Œµ * x) = Œµ * x * x := by
    ring_nf
    rw [sq_sqrt hŒµ.le, mul_comm]
  rw [h, eq_inv_mul_iff_mul_eq‚ÇÄ _]
  ¬∑ ring_nf
  ¬∑ intro h
    rw [‚Üê pow_eq_zero_iff (Ne.symm (Nat.zero_ne_add_one 1)), sq_sqrt hŒµ.le] at h
    linarith

/-- For fixed `Œµ > 0`, the mapping `x ‚Ü¶ mulExpNegMulSq Œµ x` is bounded by `Real.sqrt Œµ‚Åª¬π -/
theorem abs_mulExpNegMulSq_le (hŒµ : 0 < Œµ) {x : ‚Ñù} : |mulExpNegMulSq Œµ x| ‚â§ (sqrt Œµ)‚Åª¬π := by
  rw [mulExpNegMulSq_eq_sqrt_mul_mulExpNegMulSq_one hŒµ x, abs_mul,
    abs_of_pos (inv_pos.mpr (sqrt_pos_of_pos hŒµ))]
  nth_rw 2 [‚Üê mul_one (sqrt Œµ)‚Åª¬π]
  rw [mul_le_mul_left (inv_pos.mpr (sqrt_pos_of_pos hŒµ))]
  exact abs_mulExpNegMulSq_one_le_one (sqrt Œµ * x)

theorem dist_mulExpNegMulSq_le_two_mul_sqrt (hŒµ : 0 < Œµ) (x y : ‚Ñù) :
    dist (mulExpNegMulSq Œµ x) (mulExpNegMulSq Œµ y) ‚â§ 2 * (sqrt Œµ)‚Åª¬π := by
  apply le_trans (dist_triangle (mulExpNegMulSq Œµ x) 0 (mulExpNegMulSq Œµ y))
  simp only [dist_zero_right, norm_eq_abs, dist_zero_left, two_mul]
  exact add_le_add (abs_mulExpNegMulSq_le hŒµ) (abs_mulExpNegMulSq_le hŒµ)

theorem dist_mulExpNegMulSq_le_dist (hŒµ : 0 < Œµ) {x y : ‚Ñù} :
    dist (mulExpNegMulSq Œµ x) (mulExpNegMulSq Œµ y) ‚â§ dist x y := by
  have h := lipschitzWith_one_mulExpNegMulSq hŒµ x y
  rwa [ENNReal.coe_one, one_mul, ‚Üê (toReal_le_toReal (edist_ne_top _ _) (edist_ne_top _ _))] at h

/-- For fixed `x : ‚Ñù`, the mapping `mulExpNegMulSq Œµ x` converges pointwise to `x` as `Œµ ‚Üí 0` -/
theorem tendsto_mulExpNegMulSq {x : ‚Ñù} :
    Tendsto (fun Œµ => mulExpNegMulSq Œµ x) (ùìù 0) (ùìù x) := by
  have : x = (fun Œµ : ‚Ñù => mulExpNegMulSq Œµ x) 0 := by
    simp only [mulExpNegMulSq, zero_mul, neg_zero, exp_zero, mul_one]
  nth_rw 2 [this]
  apply Continuous.tendsto (Continuous.mul continuous_const (by fun_prop))

/-- For a fixed bounded function `g`, `mulExpNegMulSq Œµ ‚àò g` is bounded by `norm g`,
uniformly in `Œµ ‚â• 0`. -/
theorem abs_mulExpNegMulSq_comp_le_norm {E : Type*} [TopologicalSpace E] {x : E}
    (g : BoundedContinuousFunction E ‚Ñù) (hŒµ : 0 ‚â§ Œµ) :
    |(mulExpNegMulSq Œµ ‚àò g) x| ‚â§ ‚Äñg‚Äñ := by
  simp only [Function.comp_apply, mulExpNegMulSq, abs_mul, abs_exp]
  apply le_trans (mul_le_of_le_one_right (abs_nonneg (g x)) _) (g.norm_coe_le_norm x)
  rw [exp_le_one_iff, Left.neg_nonpos_iff, mul_assoc]
  exact mul_nonneg hŒµ (mul_self_nonneg (g x))

end Real
