/-
Copyright (c) 2025 Fr√©d√©ric Dupuis. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Fr√©d√©ric Dupuis
-/

import Mathlib.Analysis.SpecialFunctions.ContinuousFunctionalCalculus.PosPart.Basic
import Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Isometric

/-! # Facts about `CFC.posPart` and `CFC.negPart` involving norms

This file collects various facts about the positive and negative parts of elements of a
C‚ãÜ-algebra that involve the norm.

## Main results

* `CFC.norm_eq_max_norm_posPart_negPart`: states that `‚Äña‚Äñ = max ‚Äña‚Å∫‚Äñ ‚Äña‚Åª‚Äñ`
* `CFC.norm_posPart_le` and `CFC.norm_negPart_le`: state that `‚Äña‚Å∫‚Äñ ‚â§ ‚Äña‚Äñ` and `‚Äña‚Åª‚Äñ ‚â§ ‚Äña‚Äñ`
  respectively.
-/

namespace CFC

variable {A : Type*} [NonUnitalNormedRing A] [NormedSpace ‚Ñù A] [SMulCommClass ‚Ñù A A]
  [IsScalarTower ‚Ñù A A] [StarRing A]
  [NonUnitalIsometricContinuousFunctionalCalculus ‚Ñù A (IsSelfAdjoint : A ‚Üí Prop)]

lemma norm_eq_max_norm_posPart_negPart (a : A) (ha : IsSelfAdjoint a := by cfc_tac) :
    ‚Äña‚Äñ = max ‚Äña‚Å∫‚Äñ ‚Äña‚Åª‚Äñ := by
  have hsubset‚ÇÅ :
      (fun x => ‚Äñx‚Å∫‚Äñ) '' quasispectrum ‚Ñù a ‚äÜ (fun x => ‚Äñx‚Äñ) '' quasispectrum ‚Ñù a := by
    intro x hx
    rw [Set.mem_image] at hx ‚ä¢
    obtain ‚ü®z, hz‚ÇÅ, hz‚ÇÇ‚ü© := hx
    by_cases hz‚ÇÉ : z ‚â§ 0
    ¬∑ refine ‚ü®0, quasispectrum.zero_mem ‚Ñù a, ?_‚ü©
      rw [‚Üê posPart_eq_zero] at hz‚ÇÉ
      simp only [hz‚ÇÉ, norm_zero] at hz‚ÇÇ
      simp [‚Üê hz‚ÇÇ]
    ¬∑ refine ‚ü®z, hz‚ÇÅ, ?_‚ü©
      replace hz‚ÇÉ : 0 ‚â§ z := le_of_not_ge hz‚ÇÉ
      rw [‚Üê _root_.posPart_eq_self] at hz‚ÇÉ
      rwa [hz‚ÇÉ] at hz‚ÇÇ
  have hsubset‚ÇÇ :
      (fun x => ‚Äñx‚Åª‚Äñ) '' quasispectrum ‚Ñù a ‚äÜ (fun x => ‚Äñx‚Äñ) '' quasispectrum ‚Ñù a := by
    intro x hx
    rw [Set.mem_image] at hx ‚ä¢
    obtain ‚ü®z, hz‚ÇÅ, hz‚ÇÇ‚ü© := hx
    by_cases hz‚ÇÉ : 0 ‚â§ z
    ¬∑ refine ‚ü®0, quasispectrum.zero_mem ‚Ñù a, ?_‚ü©
      rw [‚Üê negPart_eq_zero] at hz‚ÇÉ
      simp only [hz‚ÇÉ, norm_zero] at hz‚ÇÇ
      simp [‚Üê hz‚ÇÇ]
    ¬∑ refine ‚ü®z, hz‚ÇÅ, ?_‚ü©
      replace hz‚ÇÉ : z ‚â§ 0 := le_of_not_ge hz‚ÇÉ
      rw [‚Üê _root_.negPart_eq_neg] at hz‚ÇÉ
      simpa [hz‚ÇÉ] using hz‚ÇÇ
  have hmain : IsGreatest ((fun x => ‚Äñx‚Äñ) '' quasispectrum ‚Ñù a) (‚Äña‚Å∫‚Äñ ‚äî ‚Äña‚Åª‚Äñ) := by
    refine ‚ü®?_, ?_‚ü©
    ¬∑ rcases max_cases ‚Äña‚Å∫‚Äñ ‚Äña‚Åª‚Äñ with ‚ü®h‚ÇÅ,h‚ÇÇ‚ü©|‚ü®h‚ÇÅ,h‚ÇÇ‚ü©
      ¬∑ rw [h‚ÇÅ, CFC.posPart_def]
        refine Set.mem_of_subset_of_mem hsubset‚ÇÅ ?_
        exact (IsGreatest.norm_cfc‚Çô (ùïú := ‚Ñù) (fun x => x‚Å∫) a).1
      ¬∑ rw [h‚ÇÅ]
        refine Set.mem_of_subset_of_mem hsubset‚ÇÇ ?_
        exact (IsGreatest.norm_cfc‚Çô (ùïú := ‚Ñù) (fun x => x‚Åª) a).1
    ¬∑ intro x hx
      rw [le_max_iff]
      rw [Set.mem_image] at hx
      obtain ‚ü®z, hz‚ÇÅ, hz‚ÇÇ‚ü© := hx
      by_cases hz_neg : z < 0
      ¬∑ refine Or.inr ?_
        have := _root_.negPart_eq_neg.mpr (le_of_lt hz_neg)
        rw [‚Üê norm_neg z, ‚Üê this] at hz‚ÇÇ
        rw [CFC.negPart_def, ‚Üê hz‚ÇÇ]
        exact norm_apply_le_norm_cfc‚Çô _ _ hz‚ÇÅ
      ¬∑ refine Or.inl ?_
        push_neg at hz_neg
        have := _root_.posPart_eq_self.mpr hz_neg
        rw [‚Üê this] at hz‚ÇÇ
        rw [CFC.posPart_def, ‚Üê hz‚ÇÇ]
        exact norm_apply_le_norm_cfc‚Çô _ _ hz‚ÇÅ
  exact IsGreatest.unique
    (NonUnitalIsometricContinuousFunctionalCalculus.isGreatest_norm_quasispectrum a ha) hmain

lemma norm_posPart_le (a : A) : ‚Äña‚Å∫‚Äñ ‚â§ ‚Äña‚Äñ := by
  by_cases ha : IsSelfAdjoint a
  ¬∑ rw [norm_eq_max_norm_posPart_negPart a ha]
    exact le_max_left ‚Äña‚Å∫‚Äñ ‚Äña‚Åª‚Äñ
  ¬∑ simp [posPart_eq_zero_of_not_isSelfAdjoint ha]

lemma norm_negPart_le (a : A) : ‚Äña‚Åª‚Äñ ‚â§ ‚Äña‚Äñ := by
  by_cases ha : IsSelfAdjoint a
  ¬∑ rw [norm_eq_max_norm_posPart_negPart a ha]
    exact le_max_right ‚Äña‚Å∫‚Äñ ‚Äña‚Åª‚Äñ
  ¬∑ simp [negPart_eq_zero_of_not_isSelfAdjoint ha]

end CFC
