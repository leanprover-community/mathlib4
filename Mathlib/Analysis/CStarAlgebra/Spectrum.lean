/-
Copyright (c) 2022 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import Mathlib.Analysis.CStarAlgebra.Unitization
import Mathlib.Analysis.Complex.Convex
import Mathlib.Analysis.Normed.Algebra.Spectrum
import Mathlib.Analysis.SpecialFunctions.Exponential
import Mathlib.Algebra.Star.StarAlgHom

/-! # Spectral properties in C‚ãÜ-algebras

In this file, we establish various properties related to the spectrum of elements in C‚ãÜ-algebras.
In particular, we show that the spectrum of a unitary element is contained in the unit circle in
`‚ÑÇ`, the spectrum of a selfadjoint element is real, the spectral radius of a selfadjoint element
or normal element is its norm, among others.

An essential feature of C‚ãÜ-algebras is **spectral permanence**. This is the property that the
spectrum of an element in a closed subalgebra is the same as the spectrum of the element in the
whole algebra. For Banach algebras more generally, and even for Banach ‚ãÜ-algebras, this fails.

A consequence of spectral permanence is that one may always enlarge the C‚ãÜ-algebra (via a unital
embedding) while preserving the spectrum of any element. In addition, it allows us to make sense of
the spectrum of elements in non-unital C‚ãÜ-algebras by considering them as elements in the
`Unitization` of the C‚ãÜ-algebra, or indeed *any* unital C‚ãÜ-algebra. Of course, one may do this
(that is, consider the spectrum of an element in a non-unital by embedding it in a unital algebra)
for any Banach algebra, but the downside in that setting is that embedding in different unital
algebras results in varying spectra.

In Mathlib, we don't *define* the spectrum of an element in a non-unital C‚ãÜ-algebra, and instead
simply consider the `quasispectrum` so as to avoid depending on a choice of unital algebra. However,
we can still establish a form of spectral permanence.

## Main statements

+ `unitary.spectrum_subset_circle`: The spectrum of a unitary element is contained in the unit
  sphere in `‚ÑÇ`.
+ `IsSelfAdjoint.spectralRadius_eq_nnnorm`: The spectral radius of a selfadjoint element is equal
  to its norm.
+ `IsStarNormal.spectralRadius_eq_nnnorm`: The spectral radius of a normal element is equal to
  its norm.
+ `IsSelfAdjoint.mem_spectrum_eq_re`: Any element of the spectrum of a selfadjoint element is real.
* `StarSubalgebra.coe_isUnit`: for `x : S` in a C‚ãÜ-Subalgebra `S` of `A`, then `‚Üëx : A` is a Unit
  if and only if `x` is a unit.
* `StarSubalgebra.spectrum_eq`: **spectral_permanence** for `x : S`, where `S` is a C‚ãÜ-Subalgebra
  of `A`, `spectrum ‚ÑÇ x = spectrum ‚ÑÇ (x : A)`.

## TODO

+ prove a variation of spectral permanence using `StarAlgHom` instead of `StarSubalgebra`.
+ prove a variation of spectral permanence for `quasispectrum`.

-/


local notation "œÉ" => spectrum
local postfix:max "‚ãÜ" => star

section

open scoped Topology ENNReal

open Filter ENNReal spectrum CStarRing NormedSpace

section UnitarySpectrum

variable {ùïú : Type*} [NormedField ùïú] {E : Type*} [NormedRing E] [StarRing E] [CStarRing E]
  [NormedAlgebra ùïú E] [CompleteSpace E]

theorem unitary.spectrum_subset_circle (u : unitary E) :
    spectrum ùïú (u : E) ‚äÜ Metric.sphere 0 1 := by
  nontriviality E
  refine fun k hk => mem_sphere_zero_iff_norm.mpr (le_antisymm ?_ ?_)
  ¬∑ simpa only [CStarRing.norm_coe_unitary u] using norm_le_norm_of_mem hk
  ¬∑ rw [‚Üê unitary.val_toUnits_apply u] at hk
    have hnk := ne_zero_of_mem_of_unit hk
    rw [‚Üê inv_inv (unitary.toUnits u), ‚Üê spectrum.map_inv, Set.mem_inv] at hk
    have : ‚Äñk‚Äñ‚Åª¬π ‚â§ ‚Äñ(‚Üë(unitary.toUnits u)‚Åª¬π : E)‚Äñ := by
      simpa only [norm_inv] using norm_le_norm_of_mem hk
    simpa using inv_le_of_inv_le‚ÇÄ (norm_pos_iff.mpr hnk) this

theorem spectrum.subset_circle_of_unitary {u : E} (h : u ‚àà unitary E) :
    spectrum ùïú u ‚äÜ Metric.sphere 0 1 :=
  unitary.spectrum_subset_circle ‚ü®u, h‚ü©

end UnitarySpectrum

section Quasispectrum

open scoped NNReal in
lemma CStarAlgebra.le_nnnorm_of_mem_quasispectrum {A : Type*} [NonUnitalCStarAlgebra A]
    {a : A} {x : ‚Ñù‚â•0} (hx : x ‚àà quasispectrum ‚Ñù‚â•0 a) : x ‚â§ ‚Äña‚Äñ‚Çä := by
  rw [Unitization.quasispectrum_eq_spectrum_inr' ‚Ñù‚â•0 ‚ÑÇ] at hx
  simpa [Unitization.nnnorm_inr] using spectrum.le_nnnorm_of_mem hx

end Quasispectrum

section ComplexScalars

open Complex

variable {A : Type*} [CStarAlgebra A]

local notation "‚Üë‚Çê" => algebraMap ‚ÑÇ A

theorem IsSelfAdjoint.spectralRadius_eq_nnnorm {a : A} (ha : IsSelfAdjoint a) :
    spectralRadius ‚ÑÇ a = ‚Äña‚Äñ‚Çä := by
  have hconst : Tendsto (fun _n : ‚Ñï => (‚Äña‚Äñ‚Çä : ‚Ñù‚â•0‚àû)) atTop _ := tendsto_const_nhds
  refine tendsto_nhds_unique ?_ hconst
  convert
    (spectrum.pow_nnnorm_pow_one_div_tendsto_nhds_spectralRadius (a : A)).comp
      (Nat.tendsto_pow_atTop_atTop_of_one_lt one_lt_two) using 1
  refine funext fun n => ?_
  rw [Function.comp_apply, ha.nnnorm_pow_two_pow, ENNReal.coe_pow, ‚Üê rpow_natCast, ‚Üê rpow_mul]
  simp

/-- In a C‚ãÜ-algebra, the spectral radius of a self-adjoint element is equal to its norm.
See `IsSelfAdjoint.toReal_spectralRadius_eq_norm` for a version involving
`spectralRadius ‚Ñù a`. -/
lemma IsSelfAdjoint.toReal_spectralRadius_complex_eq_norm {a : A} (ha : IsSelfAdjoint a) :
    (spectralRadius ‚ÑÇ a).toReal = ‚Äña‚Äñ := by
  simp [ha.spectralRadius_eq_nnnorm]

theorem IsStarNormal.spectralRadius_eq_nnnorm (a : A) [IsStarNormal a] :
    spectralRadius ‚ÑÇ a = ‚Äña‚Äñ‚Çä := by
  refine (ENNReal.pow_right_strictMono two_ne_zero).injective ?_
  have heq :
    (fun n : ‚Ñï => (‚Äñ(a‚ãÜ * a) ^ n‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ (1 / n : ‚Ñù)) =
      (fun x => x ^ 2) ‚àò fun n : ‚Ñï => (‚Äña ^ n‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ (1 / n : ‚Ñù) := by
    funext n
    rw [Function.comp_apply, ‚Üê rpow_natCast, ‚Üê rpow_mul, mul_comm, rpow_mul, rpow_natCast, ‚Üê
      coe_pow, sq, ‚Üê nnnorm_star_mul_self, Commute.mul_pow (star_comm_self' a), star_pow]
  have h‚ÇÇ :=
    ((ENNReal.continuous_pow 2).tendsto (spectralRadius ‚ÑÇ a)).comp
      (spectrum.pow_nnnorm_pow_one_div_tendsto_nhds_spectralRadius a)
  rw [‚Üê heq] at h‚ÇÇ
  convert tendsto_nhds_unique h‚ÇÇ (pow_nnnorm_pow_one_div_tendsto_nhds_spectralRadius (a‚ãÜ * a))
  rw [(IsSelfAdjoint.star_mul_self a).spectralRadius_eq_nnnorm, sq, nnnorm_star_mul_self, coe_mul]

variable [StarModule ‚ÑÇ A]

/-- Any element of the spectrum of a selfadjoint is real. -/
theorem IsSelfAdjoint.mem_spectrum_eq_re {a : A} (ha : IsSelfAdjoint a) {z : ‚ÑÇ}
    (hz : z ‚àà spectrum ‚ÑÇ a) : z = z.re := by
  have hu := exp_mem_unitary_of_mem_skewAdjoint ‚ÑÇ (ha.smul_mem_skewAdjoint conj_I)
  let Iu := Units.mk0 I I_ne_zero
  have : NormedSpace.exp ‚ÑÇ (I ‚Ä¢ z) ‚àà spectrum ‚ÑÇ (NormedSpace.exp ‚ÑÇ (I ‚Ä¢ a)) := by
    simpa only [Units.smul_def, Units.val_mk0] using
      spectrum.exp_mem_exp (Iu ‚Ä¢ a) (smul_mem_smul_iff.mpr hz)
  exact Complex.ext (ofReal_re _) <| by
    simpa only [‚Üê Complex.exp_eq_exp_‚ÑÇ, mem_sphere_zero_iff_norm, norm_eq_abs, abs_exp,
      Real.exp_eq_one_iff, smul_eq_mul, I_mul, neg_eq_zero] using
      spectrum.subset_circle_of_unitary hu this

/-- Any element of the spectrum of a selfadjoint is real. -/
theorem selfAdjoint.mem_spectrum_eq_re (a : selfAdjoint A) {z : ‚ÑÇ}
    (hz : z ‚àà spectrum ‚ÑÇ (a : A)) : z = z.re :=
  a.prop.mem_spectrum_eq_re hz

/-- Any element of the spectrum of a selfadjoint is real. -/
theorem IsSelfAdjoint.im_eq_zero_of_mem_spectrum {a : A} (ha : IsSelfAdjoint a)
    {z : ‚ÑÇ} (hz : z ‚àà spectrum ‚ÑÇ a) : z.im = 0 := by
  rw [ha.mem_spectrum_eq_re hz, ofReal_im]

/-- The spectrum of a selfadjoint is real -/
theorem IsSelfAdjoint.val_re_map_spectrum {a : A} (ha : IsSelfAdjoint a) :
    spectrum ‚ÑÇ a = ((‚Üë) ‚àò re '' spectrum ‚ÑÇ a : Set ‚ÑÇ) :=
  le_antisymm (fun z hz => ‚ü®z, hz, (ha.mem_spectrum_eq_re hz).symm‚ü©) fun z => by
    rintro ‚ü®z, hz, rfl‚ü©
    simpa only [(ha.mem_spectrum_eq_re hz).symm, Function.comp_apply] using hz

/-- The spectrum of a selfadjoint is real -/
theorem selfAdjoint.val_re_map_spectrum (a : selfAdjoint A) :
    spectrum ‚ÑÇ (a : A) = ((‚Üë) ‚àò re '' spectrum ‚ÑÇ (a : A) : Set ‚ÑÇ) :=
  a.property.val_re_map_spectrum

/-- The complement of the spectrum of a selfadjoint element in a C‚ãÜ-algebra is connected. -/
lemma IsSelfAdjoint.isConnected_spectrum_compl {a : A} (ha : IsSelfAdjoint a) :
    IsConnected (œÉ ‚ÑÇ a)·∂ú := by
  suffices IsConnected (((œÉ ‚ÑÇ a)·∂ú ‚à© {z | 0 ‚â§ z.im}) ‚à™ (œÉ ‚ÑÇ a)·∂ú ‚à© {z | z.im ‚â§ 0}) by
    rw [‚Üê Set.inter_union_distrib_left, ‚Üê Set.setOf_or] at this
    rw [‚Üê Set.inter_univ (œÉ ‚ÑÇ a)·∂ú]
    convert this using 2
    exact Eq.symm <| Set.eq_univ_of_forall (fun z ‚Ü¶ le_total 0 z.im)
  refine IsConnected.union ?nonempty ?upper ?lower
  case nonempty =>
    have := Filter.NeBot.nonempty_of_mem inferInstance <| Filter.mem_map.mp <|
      Complex.isometry_ofReal.antilipschitz.tendsto_cobounded (spectrum.isBounded a |>.compl)
    exact this.image Complex.ofReal |>.mono <| by simp
  case' upper => apply Complex.isConnected_of_upperHalfPlane ?_ <| Set.inter_subset_right
  case' lower => apply Complex.isConnected_of_lowerHalfPlane ?_ <| Set.inter_subset_right
  all_goals
    refine Set.subset_inter (fun z hz hz' ‚Ü¶ ?_) (fun _ ‚Ü¶ by simpa using le_of_lt)
    rw [Set.mem_setOf_eq, ha.im_eq_zero_of_mem_spectrum hz'] at hz
    simp_all

namespace StarSubalgebra

variable (S : StarSubalgebra ‚ÑÇ A) [hS : IsClosed (S : Set A)]

/-- For a unital C‚ãÜ-subalgebra `S` of `A` and `x : S`, if `‚Üëx : A` is invertible in `A`, then
`x` is invertible in `S`. -/
lemma coe_isUnit {a : S} : IsUnit (a : A) ‚Üî IsUnit a := by
  refine ‚ü®fun ha ‚Ü¶ ?_, IsUnit.map S.subtype‚ü©
  have ha‚ÇÅ := ha.star.mul ha
  have ha‚ÇÇ := ha.mul ha.star
  have spec_eq {x : S} (hx : IsSelfAdjoint x) : spectrum ‚ÑÇ x = spectrum ‚ÑÇ (x : A) :=
    Subalgebra.spectrum_eq_of_isPreconnected_compl S _ <|
      (hx.map S.subtype).isConnected_spectrum_compl.isPreconnected
  rw [‚Üê StarMemClass.coe_star, ‚Üê MulMemClass.coe_mul, ‚Üê spectrum.zero_not_mem_iff ‚ÑÇ, ‚Üê spec_eq,
    spectrum.zero_not_mem_iff] at ha‚ÇÅ ha‚ÇÇ
  ¬∑ have h‚ÇÅ : ha‚ÇÅ.unit‚Åª¬π * star a * a = 1 := mul_assoc _ _ a ‚ñ∏ ha‚ÇÅ.val_inv_mul
    have h‚ÇÇ : a * (star a * ha‚ÇÇ.unit‚Åª¬π) = 1 := (mul_assoc a _ _).symm ‚ñ∏ ha‚ÇÇ.mul_val_inv
    exact ‚ü®‚ü®a, ha‚ÇÅ.unit‚Åª¬π * star a, left_inv_eq_right_inv h‚ÇÅ h‚ÇÇ ‚ñ∏ h‚ÇÇ, h‚ÇÅ‚ü©, rfl‚ü©
  ¬∑ exact IsSelfAdjoint.mul_star_self a
  ¬∑ exact IsSelfAdjoint.star_mul_self a

lemma mem_spectrum_iff {a : S} {z : ‚ÑÇ} : z ‚àà spectrum ‚ÑÇ a ‚Üî z ‚àà spectrum ‚ÑÇ (a : A) :=
  not_iff_not.mpr S.coe_isUnit.symm

/-- **Spectral permanence.** The spectrum of an element is invariant of the (closed)
`StarSubalgebra` in which it is contained. -/
lemma spectrum_eq {a : S} : spectrum ‚ÑÇ a = spectrum ‚ÑÇ (a : A) :=
  Set.ext fun _ ‚Ü¶ S.mem_spectrum_iff

end StarSubalgebra

end ComplexScalars

namespace NonUnitalStarAlgHom

variable {F A B : Type*} [NonUnitalCStarAlgebra A] [NonUnitalCStarAlgebra B]
variable [FunLike F A B] [NonUnitalAlgHomClass F ‚ÑÇ A B] [StarHomClass F A B]

open Unitization

/-- A non-unital star algebra homomorphism of complex C‚ãÜ-algebras is norm contractive. -/
lemma nnnorm_apply_le (œÜ : F) (a : A) : ‚ÄñœÜ a‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä := by
  have h (œà : Unitization ‚ÑÇ A ‚Üí‚ãÜ‚Çê[‚ÑÇ] Unitization ‚ÑÇ B) (x : Unitization ‚ÑÇ A) :
      ‚Äñœà x‚Äñ‚Çä ‚â§ ‚Äñx‚Äñ‚Çä := by
    suffices ‚àÄ {s}, IsSelfAdjoint s ‚Üí ‚Äñœà s‚Äñ‚Çä ‚â§ ‚Äñs‚Äñ‚Çä by
      refine nonneg_le_nonneg_of_sq_le_sq zero_le' ?_
      simp_rw [‚Üê nnnorm_star_mul_self, ‚Üê map_star, ‚Üê map_mul]
      exact this <| .star_mul_self x
    intro s hs
    suffices this : spectralRadius ‚ÑÇ (œà s) ‚â§ spectralRadius ‚ÑÇ s by
      rwa [(hs.map œà).spectralRadius_eq_nnnorm, hs.spectralRadius_eq_nnnorm, coe_le_coe]
        at this
    exact iSup_le_iSup_of_subset (AlgHom.spectrum_apply_subset œà s)
  simpa [nnnorm_inr] using h (starLift (inrNonUnitalStarAlgHom ‚ÑÇ B |>.comp (œÜ : A ‚Üí‚ãÜ‚Çô‚Çê[‚ÑÇ] B))) a

/-- A non-unital star algebra homomorphism of complex C‚ãÜ-algebras is norm contractive. -/
lemma norm_apply_le (œÜ : F) (a : A) : ‚ÄñœÜ a‚Äñ ‚â§ ‚Äña‚Äñ := by
  exact_mod_cast nnnorm_apply_le œÜ a

/-- Non-unital star algebra homomorphisms between C‚ãÜ-algebras are continuous linear maps.
See note [lower instance priority] -/
lemma instContinuousLinearMapClassComplex : ContinuousLinearMapClass F ‚ÑÇ A B :=
  { NonUnitalAlgHomClass.instLinearMapClass with
    map_continuous := fun œÜ =>
      AddMonoidHomClass.continuous_of_bound œÜ 1 (by simpa only [one_mul] using nnnorm_apply_le œÜ) }

scoped[CStarAlgebra] attribute [instance] NonUnitalStarAlgHom.instContinuousLinearMapClassComplex

end NonUnitalStarAlgHom

namespace StarAlgEquiv

variable {F A B : Type*} [NonUnitalCStarAlgebra A] [NonUnitalCStarAlgebra B] [EquivLike F A B]
variable [NonUnitalAlgEquivClass F ‚ÑÇ A B] [StarHomClass F A B]

lemma nnnorm_map (œÜ : F) (a : A) : ‚ÄñœÜ a‚Äñ‚Çä = ‚Äña‚Äñ‚Çä :=
  le_antisymm (NonUnitalStarAlgHom.nnnorm_apply_le œÜ a) <| by
    simpa using NonUnitalStarAlgHom.nnnorm_apply_le (symm (œÜ : A ‚âÉ‚ãÜ‚Çê[‚ÑÇ] B)) ((œÜ : A ‚âÉ‚ãÜ‚Çê[‚ÑÇ] B) a)

lemma norm_map (œÜ : F) (a : A) : ‚ÄñœÜ a‚Äñ = ‚Äña‚Äñ :=
  congr_arg NNReal.toReal (nnnorm_map œÜ a)

lemma isometry (œÜ : F) : Isometry œÜ :=
  AddMonoidHomClass.isometry_of_norm œÜ (norm_map œÜ)

end StarAlgEquiv

end

namespace WeakDual

open ContinuousMap Complex

open scoped ComplexStarModule

variable {F A : Type*} [CStarAlgebra A] [FunLike F A ‚ÑÇ] [hF : AlgHomClass F ‚ÑÇ A ‚ÑÇ]

/-- This instance is provided instead of `StarHomClass` to avoid type class inference loops.
See note [lower instance priority] -/
noncomputable instance (priority := 100) Complex.instStarHomClass : StarHomClass F A ‚ÑÇ where
  map_star œÜ a := by
    suffices hsa : ‚àÄ s : selfAdjoint A, (œÜ s)‚ãÜ = œÜ s by
      rw [‚Üê realPart_add_I_smul_imaginaryPart a]
      simp only [map_add, map_smul, star_add, star_smul, hsa, selfAdjoint.star_val_eq]
    intro s
    have := AlgHom.apply_mem_spectrum œÜ (s : A)
    rw [selfAdjoint.val_re_map_spectrum s] at this
    rcases this with ‚ü®‚ü®_, _‚ü©, _, heq‚ü©
    simp only [Function.comp_apply] at heq
    rw [‚Üê heq, RCLike.star_def]
    exact RCLike.conj_ofReal _

/-- This is not an instance to avoid type class inference loops. See
`WeakDual.Complex.instStarHomClass`. -/
lemma _root_.AlgHomClass.instStarHomClass : StarHomClass F A ‚ÑÇ :=
  { WeakDual.Complex.instStarHomClass, hF with }

namespace CharacterSpace

noncomputable instance instStarHomClass : StarHomClass (characterSpace ‚ÑÇ A) A ‚ÑÇ :=
  { AlgHomClass.instStarHomClass with }

end CharacterSpace

end WeakDual
