/-
Copyright (c) 2025 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Instances

/-! # Commuting with applications of the continuous functional calculus

This file shows that if an element `b` commutes with both `a` and `star a`, then it commutes
with `cfc f a` (or `cfc‚Çô f a`). In the case where `a` is selfadjoint, we may reduce the hypotheses.

# Main results

* `Commute.cfc` and `Commute.cfc‚Çô`: an element commutes with `cfc f a` or `cfc‚Çô f a` if it
  commutes with both `a` and `star a`. Specialized versions for `‚Ñù` and `‚Ñù‚â•0` or for
  `IsSelfAdjoint a` which do not require the user to show the element commutes with `star a` are
  provided for convenience.

# Implementation notes

The proof of `Commute.cfcHom` and `Commute.cfc‚ÇôHom` could be made simpler by appealing to basic
facts about double commutants, but doing so would require extra type class assumptions so that we
can talk about topological star algebras. Instead, we avoid this to minimize the work Lean must do
to call these lemmas, and give a straightforward proof by induction.

-/

variable {ùïú A : Type*}

open scoped NNReal

section Unital

section RCLike

variable {p : A ‚Üí Prop} [RCLike ùïú] [Ring A] [StarRing A] [Algebra ùïú A]
variable [TopologicalSpace A] [ContinuousFunctionalCalculus ùïú A p] [IsTopologicalRing A] [T2Space A]

open StarAlgebra.elemental in
protected theorem Commute.cfcHom {a b : A} (ha : p a) (hb‚ÇÅ : Commute a b)
    (hb‚ÇÇ : Commute (star a) b) (f : C(spectrum ùïú a, ùïú)) :
    Commute (cfcHom ha f) b := by
  open scoped ContinuousFunctionalCalculus in
  induction f using ContinuousMap.induction_on_of_compact with
  | const r =>
    conv =>
      enter [1, 2]
      equals algebraMap ùïú _ r => rfl
    rw [AlgHomClass.commutes]
    exact Algebra.commute_algebraMap_left r b
  | id => rwa [cfcHom_id ha]
  | star_id => rwa [map_star, cfcHom_id]
  | add f g hf hg => rw [map_add]; exact hf.add_left hg
  | mul f g hf hg => rw [map_mul]; exact mul_left hf hg
  | frequently f hf =>
    change cfcHom ha f ‚àà { x | x * b = b * x}
    rw [‚Üê (isClosed_eq (by fun_prop) (by fun_prop)).closure_eq]
    apply mem_closure_of_frequently_of_tendsto hf
    exact cfcHom_continuous ha |>.tendsto _

protected theorem IsSelfAdjoint.commute_cfcHom {a b : A} (ha : p a)
    (ha' : IsSelfAdjoint a) (hb : Commute a b) (f : C(spectrum ùïú a, ùïú)) :
    Commute (cfcHom ha f) b :=
  hb.cfcHom ha (ha'.star_eq.symm ‚ñ∏ hb) f

/-- An element commutes with `cfc f a` if it commutes with both `a` and `star a`.

If the base ring is `‚Ñù` or `‚Ñù‚â•0`, see `Commute.cfc_real` or `Commute.cfc_nnreal` which don't require
the `Commute (star a) b` hypothesis. -/
@[grind ‚Üê]
protected theorem Commute.cfc {a b : A} (hb‚ÇÅ : Commute a b)
    (hb‚ÇÇ : Commute (star a) b) (f : ùïú ‚Üí ùïú) :
    Commute (cfc f a) b :=
  cfc_cases (fun x ‚Ü¶ Commute x b) a f (Commute.zero_left _)
    fun hf ha ‚Ü¶ hb‚ÇÅ.cfcHom ha hb‚ÇÇ ‚ü®_, hf.restrict‚ü©

/-- For `a` selfadjoint, an element commutes with `cfc f a` if it commutes with `a`.

If the base ring is `‚Ñù` or `‚Ñù‚â•0`, see `Commute.cfc_real` or `Commute.cfc_nnreal` which don't require
the `IsSelfAdjoint` hypothesis on `a` (due to the junk value `cfc f a = 0`). -/
protected theorem IsSelfAdjoint.commute_cfc {a b : A}
    (ha : IsSelfAdjoint a) (hb‚ÇÅ : Commute a b) (f : ùïú ‚Üí ùïú) :
    Commute (cfc f a) b :=
  hb‚ÇÅ.cfc (ha.star_eq.symm ‚ñ∏ hb‚ÇÅ) f

end RCLike

section NNReal

variable [Ring A] [StarRing A] [Algebra ‚Ñù A] [TopologicalSpace A]
variable [ContinuousFunctionalCalculus ‚Ñù A IsSelfAdjoint] [IsTopologicalRing A] [T2Space A]

/-- A version of `Commute.cfc` or `IsSelfAdjoint.commute_cfc` which does not require any interaction
with `star` when the base ring is `‚Ñù`. -/
@[grind ‚Üê]
protected theorem Commute.cfc_real {a b : A} (hb : Commute a b) (f : ‚Ñù ‚Üí ‚Ñù) :
    Commute (cfc f a) b :=
  cfc_cases (fun x ‚Ü¶ Commute x b) a f (Commute.zero_left _) fun hf ha ‚Ü¶ by
    rw [‚Üê cfc_apply ..]
    exact hb.cfc (ha.star_eq.symm ‚ñ∏ hb) _

variable [PartialOrder A] [NonnegSpectrumClass ‚Ñù A] [StarOrderedRing A]

/-- A version of `Commute.cfc` or `IsSelfAdjoint.commute_cfc` which does not require any interaction
with `star` when the base ring is `‚Ñù‚â•0`. -/
@[grind ‚Üê]
protected theorem Commute.cfc_nnreal {a b : A} (hb : Commute a b) (f : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0) :
    Commute (cfc f a) b := by
  by_cases ha : 0 ‚â§ a
  ¬∑ rw [cfc_nnreal_eq_real ..]
    exact hb.cfc_real _
  ¬∑ simp [cfc_apply_of_not_predicate a ha]

end NNReal

end Unital

section NonUnital

section RCLike

variable {p : A ‚Üí Prop} [RCLike ùïú] [NonUnitalRing A] [StarRing A]
variable [Module ùïú A] [IsScalarTower ùïú A A] [SMulCommClass ùïú A A] [TopologicalSpace A]
variable [NonUnitalContinuousFunctionalCalculus ùïú A p] [IsTopologicalRing A] [T2Space A]

open ContinuousMapZero

open NonUnitalStarAlgebra.elemental in
protected theorem Commute.cfc‚ÇôHom {a b : A} (ha : p a) (hb‚ÇÅ : Commute a b)
    (hb‚ÇÇ : Commute (star a) b) (f : C(quasispectrum ùïú a, ùïú)‚ÇÄ) :
    Commute (cfc‚ÇôHom ha f) b := by
  open scoped NonUnitalContinuousFunctionalCalculus in
  induction f using ContinuousMapZero.induction_on_of_compact with
  | zero => simp
  | smul  r f hf => rw [map_smul]; exact hf.smul_left r
  | id => rwa [cfc‚ÇôHom_id ha]
  | star_id => rwa [map_star, cfc‚ÇôHom_id]
  | add f g hf hg => rw [map_add]; exact hf.add_left hg
  | mul f g hf hg => rw [map_mul]; exact mul_left hf hg
  | frequently f hf =>
    change cfc‚ÇôHom ha f ‚àà { x | x * b = b * x}
    rw [‚Üê (isClosed_eq (by fun_prop) (by fun_prop)).closure_eq]
    apply mem_closure_of_frequently_of_tendsto hf
    exact cfc‚ÇôHom_continuous ha |>.tendsto _

protected theorem IsSelfAdjoint.commute_cfc‚ÇôHom {a b : A} (ha : p a)
    (ha' : IsSelfAdjoint a) (hb : Commute a b) (f : C(quasispectrum ùïú a, ùïú)‚ÇÄ) :
    Commute (cfc‚ÇôHom ha f) b :=
  hb.cfc‚ÇôHom ha (ha'.star_eq.symm ‚ñ∏ hb) f

/-- An element commutes with `cfc‚Çô f a` if it commutes with both `a` and `star a`.

If the base ring is `‚Ñù` or `‚Ñù‚â•0`, see `Commute.cfc‚Çô_real` or `Commute.cfc‚Çô_nnreal` which don't
require the `Commute (star a) b` hypothesis. -/
@[grind ‚Üê]
protected theorem Commute.cfc‚Çô {a b : A} (hb‚ÇÅ : Commute a b)
    (hb‚ÇÇ : Commute (star a) b) (f : ùïú ‚Üí ùïú) :
    Commute (cfc‚Çô f a) b :=
  cfc‚Çô_cases (fun x ‚Ü¶ Commute x b) a f (Commute.zero_left _)
    fun hf hf‚ÇÄ ha ‚Ü¶ hb‚ÇÅ.cfc‚ÇôHom ha hb‚ÇÇ ‚ü®‚ü®_, hf.restrict‚ü©, hf‚ÇÄ‚ü©

/-- For `a` selfadjoint, an element commutes with `cfc‚Çô f a` if it commutes with `a`.

If the base ring is `‚Ñù` or `‚Ñù‚â•0`, see `Commute.cfc‚Çô_real` or `Commute.cfc‚Çô_nnreal` which don't
require the `IsSelfAdjoint` hypothesis on `a` (due to the junk value `cfc‚Çô f a = 0`). -/
protected theorem IsSelfAdjoint.commute_cfc‚Çô {a b : A}
    (ha : IsSelfAdjoint a) (hb‚ÇÅ : Commute a b) (f : ùïú ‚Üí ùïú) :
    Commute (cfc‚Çô f a) b :=
  hb‚ÇÅ.cfc‚Çô (ha.star_eq.symm ‚ñ∏ hb‚ÇÅ) f

end RCLike

section NNReal

variable [NonUnitalRing A] [StarRing A] [Module ‚Ñù A] [IsScalarTower ‚Ñù A A]
variable [SMulCommClass ‚Ñù A A] [TopologicalSpace A]
variable [NonUnitalContinuousFunctionalCalculus ‚Ñù A IsSelfAdjoint] [IsTopologicalRing A] [T2Space A]

/-- A version of `Commute.cfc‚Çô` or `IsSelfAdjoint.commute_cfc‚Çô` which does not require any
interaction with `star` when the base ring is `‚Ñù`. -/
@[grind ‚Üê]
protected theorem Commute.cfc‚Çô_real {a b : A} (hb : Commute a b) (f : ‚Ñù ‚Üí ‚Ñù) :
    Commute (cfc‚Çô f a) b :=
  cfc‚Çô_cases (fun x ‚Ü¶ Commute x b) a f (Commute.zero_left _)
    fun hf hf0 ha ‚Ü¶ by
      rw [‚Üê cfc‚Çô_apply ..]
      exact hb.cfc‚Çô (ha.star_eq.symm ‚ñ∏ hb) _

variable [PartialOrder A] [NonnegSpectrumClass ‚Ñù A] [StarOrderedRing A]

/-- A version of `Commute.cfc‚Çô` or `IsSelfAdjoint.commute_cfc‚Çô` which does not require any
interaction with `star` when the base ring is `‚Ñù‚â•0`. -/
@[grind ‚Üê]
protected theorem Commute.cfc‚Çô_nnreal {a b : A} (hb : Commute a b) (f : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0) :
    Commute (cfc‚Çô f a) b := by
  by_cases ha : 0 ‚â§ a
  ¬∑ rw [cfc‚Çô_nnreal_eq_real ..]
    exact hb.cfc‚Çô_real _
  ¬∑ simp [cfc‚Çô_apply_of_not_predicate a ha]

end NNReal

end NonUnital
