/-
Copyright (c) 2024 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import Mathlib.Analysis.CStarAlgebra.Module.Defs
import Mathlib.Analysis.CStarAlgebra.Module.Synonym
import Mathlib.Topology.MetricSpace.Bilipschitz

/-! # Constructions of Hilbert C‚ãÜ-modules

In this file we define the following constructions of `CStarModule`s where `A` denotes a C‚ãÜ-algebra.
For some of the types listed below, the instance is declared on the type synonym `WithCStarModule E`
(with the notation `C‚ãÜ·µê·µí·µà E`), instead of on `E` itself; we explain the reasoning behind each
decision below.

1. `A` as a `CStarModule` over itself.
2. `C‚ãÜ·µê·µí·µà(A, E √ó F)` as a `CStarModule` over `A`, when `E` and `F` are themselves `CStarModule`s
  over `A`.
3. `C‚ãÜ·µê·µí·µà (A, Œ† i : Œπ, E i)` as a `CStarModule` over `A`, when each `E i` is a `CStarModule` over
  `A` and `Œπ` is a `Fintype`.
4. `E` as a `CStarModule` over `‚ÑÇ`, when `E` is an `InnerProductSpace` over `‚ÑÇ`.

For `E √ó F` and `Œ† i : Œπ, E i`, we are required to declare the instance on a type synonym rather
than on the product or pi-type itself because the existing norm on these types does not agree with
the one induced by the C‚ãÜ-module structure. Moreover, the norm induced by the C‚ãÜ-module structure
doesn't agree with any other natural norm on these types (e.g., `WithLp 2 (E √ó F)` unless `A := ‚ÑÇ`),
so we need a new synonym.

On `A` (a C‚ãÜ-algebra) and `E` (an inner product space), we declare the instances on the types
themselves to ease the use of the C‚ãÜ-module structure. This does have the potential to cause
inconvenience (as sometimes Lean will see terms of type `A` and apply lemmas pertaining to
C‚ãÜ-modules to those terms, when the lemmas were actually intended for terms of some other
C‚ãÜ-module in context, say `F`, in which case the arguments must be provided explicitly; see for
instance the application of `CStarModule.norm_eq_sqrt_norm_inner_self` in the proof of
`WithCStarModule.max_le_prod_norm` below). However, we believe that this, hopefully rare,
inconvenience is outweighed by avoiding translating between type synonyms where possible.

For more details on the importance of the `WithCStarModule` type synonym, see the module
documentation for `Analysis.CStarAlgebra.Module.Synonym`.

## Implementation notes

When `A := ‚ÑÇ` and `E := ‚ÑÇ`, then `‚ÑÇ` is both a C‚ãÜ-algebra (so it inherits a `CStarModule` instance
via (1) above) and an inner product space (so it inherits a `CStarModule` instance via (4) above).
We provide a sanity check ensuring that these two instances are definitionally equal. We also ensure
that the `Inner ‚ÑÇ ‚ÑÇ` instance from `InnerProductSpace` is definitionally equal to the one inherited
from the `CStarModule` instances.

Note that `C‚ãÜ·µê·µí·µà(A, E)` is *already* equipped with a bornology and uniformity whenever `E` is
(namely, the pullback of the respective structures through `WithCStarModule.equiv`), so in each of
the above cases, it is necessary to temporarily instantiate `C‚ãÜ·µê·µí·µà(A, E)` with
`CStarModule.normedAddCommGroup`, show the resulting type is bilipschitz equivalent to `E` via
`WithCStarModule.equiv` (in the first and last case, this map is actually trivially an isometry),
and then replace the uniformity and bornology with the correct ones.

-/

open CStarModule CStarRing

namespace WithCStarModule

variable {A : Type*} [NonUnitalCStarAlgebra A] [PartialOrder A]

/-! ## A C‚ãÜ-algebra as a C‚ãÜ-module over itself -/

section Self

variable [StarOrderedRing A]

/-- Reinterpret a C‚ãÜ-algebra `A` as a `CStarModule` over itself. -/
instance : CStarModule A A where
  inner x y := y * star x
  inner_add_right := add_mul ..
  inner_self_nonneg := mul_star_self_nonneg _
  inner_self := CStarRing.mul_star_self_eq_zero_iff _
  inner_op_smul_right := mul_assoc ..
  inner_smul_right_complex := smul_mul_assoc ..
  star_inner x y := by simp
  norm_eq_sqrt_norm_inner_self {x} := by
    rw [‚Üê sq_eq_sq‚ÇÄ (norm_nonneg _) (by positivity)]
    simpa [sq] using Eq.symm <| CStarRing.norm_self_mul_star

open scoped InnerProductSpace in
lemma inner_def (x y : A) : ‚ü™x, y‚ü´_A = y * star x := rfl

end Self

/-! ## Products of C‚ãÜ-modules -/

section Prod

open scoped InnerProductSpace

variable {E F : Type*}
variable [NormedAddCommGroup E] [Module ‚ÑÇ E] [SMul A E]
variable [NormedAddCommGroup F] [Module ‚ÑÇ F] [SMul A F]
variable [CStarModule A E] [CStarModule A F]

noncomputable instance : Norm C‚ãÜ·µê·µí·µà(A, E √ó F) where
  norm x := ‚àö‚Äñ‚ü™x.1, x.1‚ü´_A + ‚ü™x.2, x.2‚ü´_A‚Äñ

lemma prod_norm (x : C‚ãÜ·µê·µí·µà(A, E √ó F)) : ‚Äñx‚Äñ = ‚àö‚Äñ‚ü™x.1, x.1‚ü´_A + ‚ü™x.2, x.2‚ü´_A‚Äñ := rfl

lemma prod_norm_sq (x : C‚ãÜ·µê·µí·µà(A, E √ó F)) : ‚Äñx‚Äñ ^ 2 = ‚Äñ‚ü™x.1, x.1‚ü´_A + ‚ü™x.2, x.2‚ü´_A‚Äñ := by
  simp [prod_norm]

lemma prod_norm_le_norm_add (x : C‚ãÜ·µê·µí·µà(A, E √ó F)) : ‚Äñx‚Äñ ‚â§ ‚Äñx.1‚Äñ + ‚Äñx.2‚Äñ := by
  refine abs_le_of_sq_le_sq' ?_ (by positivity) |>.2
  calc ‚Äñx‚Äñ ^ 2 ‚â§ ‚Äñ‚ü™x.1, x.1‚ü´_A‚Äñ + ‚Äñ‚ü™x.2, x.2‚ü´_A‚Äñ := prod_norm_sq x ‚ñ∏ norm_add_le _ _
    _ = ‚Äñx.1‚Äñ ^ 2 + 0 + ‚Äñx.2‚Äñ ^ 2 := by simp [norm_sq_eq A]
    _ ‚â§ ‚Äñx.1‚Äñ ^ 2 + 2 * ‚Äñx.1‚Äñ * ‚Äñx.2‚Äñ + ‚Äñx.2‚Äñ ^ 2 := by gcongr; positivity
    _ = (‚Äñx.1‚Äñ + ‚Äñx.2‚Äñ) ^ 2 := by ring

variable [StarOrderedRing A]

noncomputable instance : CStarModule A C‚ãÜ·µê·µí·µà(A, E √ó F) where
  inner x y := ‚ü™x.1, y.1‚ü´_A + ‚ü™x.2, y.2‚ü´_A
  inner_add_right {x y z} := by simpa using add_add_add_comm ..
  inner_self_nonneg := add_nonneg CStarModule.inner_self_nonneg CStarModule.inner_self_nonneg
  inner_self {x} := by
    refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ by simp [h, CStarModule.inner_zero_left]‚ü©
    apply equiv A (E √ó F) |>.injective
    ext
    ¬∑ refine inner_self.mp <| le_antisymm ?_ (inner_self_nonneg (A := A))
      exact le_add_of_nonneg_right CStarModule.inner_self_nonneg |>.trans_eq h
    ¬∑ refine inner_self.mp <| le_antisymm ?_ (inner_self_nonneg (A := A))
      exact le_add_of_nonneg_left CStarModule.inner_self_nonneg |>.trans_eq h
  inner_op_smul_right := by simp [mul_add]
  inner_smul_right_complex := by simp [smul_add]
  star_inner x y := by simp
  norm_eq_sqrt_norm_inner_self {x} := by with_reducible_and_instances rfl

lemma prod_inner (x y : C‚ãÜ·µê·µí·µà(A, E √ó F)) : ‚ü™x, y‚ü´_A = ‚ü™x.1, y.1‚ü´_A + ‚ü™x.2, y.2‚ü´_A := rfl

lemma max_le_prod_norm (x : C‚ãÜ·µê·µí·µà(A, E √ó F)) : max ‚Äñx.1‚Äñ ‚Äñx.2‚Äñ ‚â§ ‚Äñx‚Äñ := by
  rw [prod_norm]
  simp only [equiv_fst, norm_eq_sqrt_norm_inner_self (A := A) (E := E),
    norm_eq_sqrt_norm_inner_self (A := A) (E := F), equiv_snd, max_le_iff, norm_nonneg,
    Real.sqrt_le_sqrt_iff]
  constructor
  all_goals
    refine CStarAlgebra.norm_le_norm_of_nonneg_of_le (A := A) ?_ ?_
    all_goals
      aesop (add safe apply CStarModule.inner_self_nonneg)

lemma norm_equiv_le_norm_prod (x : C‚ãÜ·µê·µí·µà(A, E √ó F)) : ‚Äñequiv A (E √ó F) x‚Äñ ‚â§ ‚Äñx‚Äñ :=
  max_le_prod_norm x

section Aux

-- We temporarily disable the uniform space and bornology on `C‚ãÜ·µê·µí·µà A` while proving
-- that those induced by the new norm are equal to the old ones.
attribute [-instance] WithCStarModule.instUniformSpace WithCStarModule.instBornology

/-- A normed additive commutative group structure on `C‚ãÜ·µê·µí·µà(A, E √ó F)` with the wrong topology,
uniformity and bornology. This is only used to build the instance with the correct forgetful
inheritance data. -/
noncomputable def normedAddCommGroupProdAux : NormedAddCommGroup C‚ãÜ·µê·µí·µà(A, E √ó F) :=
  NormedAddCommGroup.ofCore (CStarModule.normedSpaceCore A)

attribute [local instance] normedAddCommGroupProdAux

open Filter Uniformity Bornology

private lemma antilipschitzWith_two_equiv_prod_aux : AntilipschitzWith 2 (equiv A (E √ó F)) :=
  AddMonoidHomClass.antilipschitz_of_bound (linearEquiv ‚ÑÇ A (E √ó F)) fun x ‚Ü¶ by
    apply prod_norm_le_norm_add x |>.trans
    simp only [NNReal.coe_ofNat, linearEquiv_apply, two_mul]
    gcongr
    ¬∑ exact norm_fst_le x
    ¬∑ exact norm_snd_le x

private lemma lipschitzWith_one_equiv_prod_aux : LipschitzWith 1 (equiv A (E √ó F)) :=
  AddMonoidHomClass.lipschitz_of_bound_nnnorm (linearEquiv ‚ÑÇ A (E √ó F)) 1 <| by
    simpa using norm_equiv_le_norm_prod

private lemma uniformity_prod_eq_aux :
    ùì§[(inferInstance : UniformSpace (E √ó F)).comap <| equiv _ _] = ùì§ C‚ãÜ·µê·µí·µà(A, E √ó F) :=
  uniformity_eq_of_bilipschitz antilipschitzWith_two_equiv_prod_aux lipschitzWith_one_equiv_prod_aux

private lemma isBounded_prod_iff_aux (s : Set C‚ãÜ·µê·µí·µà(A, E √ó F)) :
    @IsBounded _ (induced <| equiv A (E √ó F)) s ‚Üî IsBounded s :=
  isBounded_iff_of_bilipschitz antilipschitzWith_two_equiv_prod_aux
    lipschitzWith_one_equiv_prod_aux s

end Aux

noncomputable instance : NormedAddCommGroup C‚ãÜ·µê·µí·µà(A, E √ó F) :=
  .ofCoreReplaceAll (normedSpaceCore A) uniformity_prod_eq_aux isBounded_prod_iff_aux

noncomputable instance : NormedSpace ‚ÑÇ C‚ãÜ·µê·µí·µà(A, E √ó F) := .ofCore (normedSpaceCore A)

end Prod

/-! ## Pi-types of C‚ãÜ-modules -/

section Pi

open scoped InnerProductSpace

variable {Œπ : Type*} {E : Œπ ‚Üí Type*} [Fintype Œπ]
variable [‚àÄ i, NormedAddCommGroup (E i)] [‚àÄ i, Module ‚ÑÇ (E i)] [‚àÄ i, SMul A (E i)]
variable [‚àÄ i, CStarModule A (E i)]

noncomputable instance : Norm C‚ãÜ·µê·µí·µà(A, Œ† i, E i) where
  norm x := ‚àö‚Äñ‚àë i, ‚ü™x i, x i‚ü´_A‚Äñ

lemma pi_norm (x : C‚ãÜ·µê·µí·µà(A, Œ† i, E i)) : ‚Äñx‚Äñ = ‚àö‚Äñ‚àë i, ‚ü™x i, x i‚ü´_A‚Äñ := by
  with_reducible_and_instances rfl

lemma pi_norm_sq (x : C‚ãÜ·µê·µí·µà(A, Œ† i, E i)) : ‚Äñx‚Äñ ^ 2 = ‚Äñ‚àë i, ‚ü™x i, x i‚ü´_A‚Äñ := by
  simp [pi_norm]

open Finset in
lemma pi_norm_le_sum_norm (x : C‚ãÜ·µê·µí·µà(A, Œ† i, E i)) : ‚Äñx‚Äñ ‚â§ ‚àë i, ‚Äñx i‚Äñ := by
  refine abs_le_of_sq_le_sq' ?_ (by positivity) |>.2
  calc ‚Äñx‚Äñ ^ 2 ‚â§ ‚àë i, ‚Äñ‚ü™x i, x i‚ü´_A‚Äñ := pi_norm_sq x ‚ñ∏ norm_sum_le _ _
    _ = ‚àë i, ‚Äñx i‚Äñ ^ 2 := by simp only [norm_sq_eq A]
    _ ‚â§ (‚àë i, ‚Äñx i‚Äñ) ^ 2 := sum_sq_le_sq_sum_of_nonneg (fun _ _ ‚Ü¶ norm_nonneg _)

variable [StarOrderedRing A]

open Finset in
noncomputable instance : CStarModule A C‚ãÜ·µê·µí·µà(A, Œ† i, E i) where
  inner x y := ‚àë i, ‚ü™x i, y i‚ü´_A
  inner_add_right {x y z} := by simp [inner_sum_right, sum_add_distrib]
  inner_self_nonneg := sum_nonneg <| fun _ _ ‚Ü¶ CStarModule.inner_self_nonneg
  inner_self {x} := by
    refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ by simp [h, CStarModule.inner_zero_left]‚ü©
    ext i
    refine inner_self.mp <| le_antisymm (le_of_le_of_eq ?_ h) inner_self_nonneg
    exact single_le_sum (fun i _ ‚Ü¶ CStarModule.inner_self_nonneg (A := A) (x := x i)) (mem_univ _)
  inner_op_smul_right := by simp [mul_sum]
  inner_smul_right_complex := by simp [smul_sum]
  star_inner x y := by simp
  norm_eq_sqrt_norm_inner_self {x} := by with_reducible_and_instances rfl

lemma pi_inner (x y : C‚ãÜ·µê·µí·µà(A, Œ† i, E i)) : ‚ü™x, y‚ü´_A = ‚àë i, ‚ü™x i, y i‚ü´_A := rfl

@[simp]
lemma inner_single_left [DecidableEq Œπ] (x : C‚ãÜ·µê·µí·µà(A, Œ† i, E i)) {i : Œπ} (y : E i) :
    ‚ü™equiv _ _ |>.symm <| Pi.single i y, x‚ü´_A = ‚ü™y, x i‚ü´_A := by
  simp only [pi_inner, equiv_symm_pi_apply]
  rw [Finset.sum_eq_single i]
  all_goals simp_all

@[simp]
lemma inner_single_right [DecidableEq Œπ] (x : C‚ãÜ·µê·µí·µà(A, Œ† i, E i)) {i : Œπ} (y : E i) :
    ‚ü™x, equiv _ _ |>.symm <| Pi.single i y‚ü´_A = ‚ü™x i, y‚ü´_A := by
  simp only [pi_inner, equiv_symm_pi_apply]
  rw [Finset.sum_eq_single i]
  all_goals simp_all

@[simp]
lemma norm_single [DecidableEq Œπ] (i : Œπ) (y : E i) :
    ‚Äñequiv A _ |>.symm <| Pi.single i y‚Äñ = ‚Äñy‚Äñ := by
  let _ : NormedAddCommGroup C‚ãÜ·µê·µí·µà(A, Œ† i, E i) := normedAddCommGroup A
  rw [‚Üê sq_eq_sq‚ÇÄ (by positivity) (by positivity)]
  simp [norm_sq_eq A]

lemma norm_apply_le_norm (x : C‚ãÜ·µê·µí·µà(A, Œ† i, E i)) (i : Œπ) : ‚Äñx i‚Äñ ‚â§ ‚Äñx‚Äñ := by
  let _ : NormedAddCommGroup C‚ãÜ·µê·µí·µà(A, Œ† i, E i) := normedAddCommGroup A
  refine abs_le_of_sq_le_sq' ?_ (by positivity) |>.2
  rw [pi_norm_sq, norm_sq_eq A]
  refine CStarAlgebra.norm_le_norm_of_nonneg_of_le inner_self_nonneg ?_
  exact Finset.single_le_sum (fun j _ ‚Ü¶ inner_self_nonneg (A := A) (x := x j)) (Finset.mem_univ i)

open Finset in
lemma norm_equiv_le_norm_pi (x : C‚ãÜ·µê·µí·µà(A, Œ† i, E i)) : ‚Äñequiv _ _ x‚Äñ ‚â§ ‚Äñx‚Äñ := by
  let _ : NormedAddCommGroup C‚ãÜ·µê·µí·µà(A, Œ† i, E i) := normedAddCommGroup A
  rw [pi_norm_le_iff_of_nonneg (by positivity)]
  simpa using norm_apply_le_norm x

section Aux

-- We temporarily disable the uniform space and bornology on `C‚ãÜ·µê·µí·µà A` while proving
-- that those induced by the new norm are equal to the old ones.
attribute [-instance] WithCStarModule.instUniformSpace WithCStarModule.instBornology

/-- A normed additive commutative group structure on `C‚ãÜ·µê·µí·µà(A, Œ† i, E i)` with the wrong topology,
uniformity and bornology. This is only used to build the instance with the correct forgetful
inheritance data. -/
noncomputable def normedAddCommGroupPiAux : NormedAddCommGroup C‚ãÜ·µê·µí·µà(A, Œ† i, E i) :=
  NormedAddCommGroup.ofCore (CStarModule.normedSpaceCore A)

attribute [local instance] normedAddCommGroupPiAux

open Uniformity Bornology

private lemma antilipschitzWith_card_equiv_pi_aux :
    AntilipschitzWith (Fintype.card Œπ) (equiv A (Œ† i, E i)) :=
  AddMonoidHomClass.antilipschitz_of_bound (linearEquiv ‚ÑÇ A (Œ† i, E i)) fun x ‚Ü¶ by
    simp only [NNReal.coe_natCast, linearEquiv_apply]
    calc ‚Äñx‚Äñ ‚â§ ‚àë i, ‚Äñx i‚Äñ := pi_norm_le_sum_norm x
      _ ‚â§ ‚àë _, ‚Äñ‚áëx‚Äñ := Finset.sum_le_sum fun _ _ ‚Ü¶ norm_le_pi_norm ..
      _ ‚â§ Fintype.card Œπ * ‚Äñ‚áëx‚Äñ := by simp

private lemma lipschitzWith_one_equiv_pi_aux : LipschitzWith 1 (equiv A (Œ† i, E i)) :=
  AddMonoidHomClass.lipschitz_of_bound_nnnorm (linearEquiv ‚ÑÇ A (Œ† i, E i)) 1 <| by
    simpa using norm_equiv_le_norm_pi

private lemma uniformity_pi_eq_aux :
    ùì§[(inferInstance : UniformSpace (Œ† i, E i)).comap <| equiv A _] = ùì§ C‚ãÜ·µê·µí·µà(A, Œ† i, E i) :=
  uniformity_eq_of_bilipschitz antilipschitzWith_card_equiv_pi_aux lipschitzWith_one_equiv_pi_aux

private lemma isBounded_pi_iff_aux (s : Set C‚ãÜ·µê·µí·µà(A, Œ† i, E i)) :
    @IsBounded _ (induced <| equiv A (Œ† i, E i)) s ‚Üî IsBounded s :=
  isBounded_iff_of_bilipschitz antilipschitzWith_card_equiv_pi_aux lipschitzWith_one_equiv_pi_aux s

end Aux

noncomputable instance : NormedAddCommGroup C‚ãÜ·µê·µí·µà(A, Œ† i, E i) :=
  .ofCoreReplaceAll (normedSpaceCore A) uniformity_pi_eq_aux isBounded_pi_iff_aux

noncomputable instance : NormedSpace ‚ÑÇ C‚ãÜ·µê·µí·µà(A, Œ† i, E i) := .ofCore (normedSpaceCore A)

end Pi

/-! ## Inner product spaces as C‚ãÜ-modules -/

section InnerProductSpace

open ComplexOrder

variable {E : Type*}
variable [NormedAddCommGroup E] [InnerProductSpace ‚ÑÇ E]

open scoped InnerProductSpace in
/-- Reinterpret an inner product space `E` over `‚ÑÇ` as a `CStarModule` over `‚ÑÇ`.

Note: this instance requires `SMul ‚ÑÇ·µê·µí·µñ E` and `IsCentralScalar ‚ÑÇ E` instances to exist on `E`,
which is unlikely to occur in practice. However, in practice one could either add those instances
to the type `E` in question, or else supply them to this instance manually, which is reason behind
the naming of these two instance arguments. -/
instance instCStarModuleComplex : CStarModule ‚ÑÇ E where
  inner x y := ‚ü™x, y‚ü´_‚ÑÇ
  inner_add_right := by simp [_root_.inner_add_right]
  inner_self_nonneg {x} := by
    rw [‚Üê inner_self_ofReal_re, RCLike.ofReal_nonneg]
    exact inner_self_nonneg
  inner_self := by simp
  inner_op_smul_right := by simp [inner_smul_right, mul_comm]
  inner_smul_right_complex := by simp [inner_smul_right, smul_eq_mul]
  star_inner _ _ := by simp
  norm_eq_sqrt_norm_inner_self {x} := by
    simpa only [‚Üê inner_self_re_eq_norm] using norm_eq_sqrt_re_inner x

-- Ensures that the two ways to obtain `CStarModule ‚ÑÇ·µê·µí·µñ ‚ÑÇ` are definitionally equal.
example : instCStarModule (A := ‚ÑÇ) = instCStarModuleComplex := by with_reducible_and_instances rfl

/- Ensures that the two `Inner ‚ÑÇ ‚ÑÇ` instances are definitionally equal. Note that this cannot be at
reducible and instances transparency because the one from `InnerProductSpace` uses `StarRingEnd`
whereas `WithCStarModule.instCStarModule.toInner` uses `star` since `A` may not be commutative. -/
example : (toInner : Inner ‚ÑÇ ‚ÑÇ) = WithCStarModule.instCStarModule.toInner := rfl

end InnerProductSpace

end WithCStarModule
