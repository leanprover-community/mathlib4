import Mathlib

open Filter Order TopologicalSpace Set
open scoped Topology

lemma foo {Œ± : Type*} [TopologicalSpace Œ±] [SecondCountableTopology Œ±] {t : Set (Set Œ±)}
    (ht : IsTopologicalBasis t) {u : Set Œ±} (hu : IsOpen u) :
    ‚àÉ s ‚äÜ t, s.Countable ‚àß u = ‚ãÉ a ‚àà s, a := by
  have A : ‚àÄ x ‚àà u, ‚àÉ a ‚àà t, x ‚àà a ‚àß a ‚äÜ u :=
    fun x hx ‚Ü¶ ht.exists_subset_of_mem_open hx hu
  choose! a hat xa au using A
  obtain ‚ü®T, T_count, hT‚ü© : ‚àÉ T : Set u, T.Countable ‚àß ‚ãÉ i ‚àà T, a i = ‚ãÉ (i : u), a i := by
    apply isOpen_iUnion_countable _
    rintro ‚ü®x, hx‚ü©
    exact ht.isOpen (hat x hx)
  refine ‚ü®(fun (x : u) ‚Ü¶ a x) '' T, ?_, T_count.image _, ?_‚ü©
  ¬∑ simp only [image_subset_iff]
    rintro ‚ü®x, xu‚ü© -
    exact hat x xu
  rw [biUnion_image, hT]
  apply Subset.antisymm
  ¬∑ intro x hx
    simp
    grind
  ¬∑ simp
    grind

lemma bar {Œ± : Type*} [TopologicalSpace Œ±] [SecondCountableTopology Œ±] {t : Set (Set Œ±)}
    (ht : IsTopologicalBasis t) :
    ‚àÉ s ‚äÜ t, s.Countable ‚àß IsTopologicalBasis s := by
  have A : ‚àÄ u ‚àà countableBasis Œ±, ‚àÉ s ‚äÜ t, s.Countable ‚àß u = ‚ãÉ a ‚àà s, a :=
    fun u hu ‚Ü¶ foo ht ((isBasis_countableBasis Œ±).isOpen hu)
  choose! s hst s_count hs using A
  refine ‚ü®‚ãÉ u ‚àà countableBasis Œ±, s u, by simpa using hst,
    (countable_countableBasis Œ±).biUnion s_count, ?_‚ü©
  apply isTopologicalBasis_of_isOpen_of_nhds
  ¬∑ simp only [mem_iUnion, exists_prop, forall_exists_index, and_imp]
    have := @ht.isOpen
    grind
  ¬∑ intro x v hx hv
    simp only [mem_iUnion, exists_prop]
    obtain ‚ü®u, u_mem, xu, uv‚ü© : ‚àÉ u ‚àà countableBasis Œ±, x ‚àà u ‚àß u ‚äÜ v :=
      (isBasis_countableBasis Œ±).isOpen_iff.1 hv _ hx
    have : x ‚àà ‚ãÉ a ‚àà s u, a := by
      convert xu
      exact (hs u u_mem).symm
    obtain ‚ü®w, ws, xw‚ü© : ‚àÉ w ‚àà s u, x ‚àà w := by simpa using this
    refine ‚ü®w, ‚ü®u, u_mem, ws‚ü©, xw, ?_‚ü©
    apply Subset.trans (Subset.trans _ (hs u u_mem).symm.subset) uv
    exact subset_iUnion‚ÇÇ_of_subset w ws fun ‚¶Éa‚¶Ñ a ‚Ü¶ a

#check TopologicalSpace.IsTopologicalBasis.eq_generateFrom

lemma bar2 {Œ± : Type*} [ts : TopologicalSpace Œ±] [SecondCountableTopology Œ±] {t : Set (Set Œ±)}
    (ht : ts = generateFrom t) :
    ‚àÉ s ‚äÜ t, s.Countable ‚àß ts = generateFrom s := by
  let t' := (fun f => ‚ãÇ‚ÇÄ f) '' { f : Set (Set Œ±) | f.Finite ‚àß f ‚äÜ t }
  have : IsTopologicalBasis t' := TopologicalSpace.isTopologicalBasis_of_subbasis ht
  obtain ‚ü®s', s't', s'_count, hs'‚ü© : ‚àÉ s' ‚äÜ t', s'.Countable ‚àß IsTopologicalBasis s' := bar this
  have A : ‚àÄ u ‚àà s', ‚àÉ (f : Set (Set Œ±)), f.Finite ‚àß f ‚äÜ t ‚àß ‚ãÇ‚ÇÄ f = u :=
    fun u hu ‚Ü¶ by simpa [t', and_assoc] using s't' hu
  choose! f f_fin ft hf using A
  refine ‚ü®‚ãÉ u ‚àà s', f u, by simpa using ft, ?_, ?_‚ü©
  ¬∑ apply s'_count.biUnion
    intro u hu
    exact Finite.countable (f_fin u hu)
  ¬∑ apply le_antisymm
    ¬∑ apply le_generateFrom_iff_subset_isOpen.2
      simp only [iUnion_subset_iff]
      intro u hu v hv
      rw [ht]
      apply isOpen_generateFrom_of_mem
      exact ft u hu hv
    ¬∑ rw [hs'.eq_generateFrom]
      apply le_generateFrom_iff_subset_isOpen.2
      intro u hu
      rw [‚Üê hf u hu, sInter_eq_biInter]
      change IsOpen[generateFrom _] (‚ãÇ i ‚àà f u, i)
      apply @Finite.isOpen_biInter _ _ (generateFrom (‚ãÉ u ‚àà s', f u)) _ _
      ¬∑ apply f_fin u hu
      ¬∑ intro i hi
        apply isOpen_generateFrom_of_mem
        simp
        grind










namespace WithTopOrderTopology

variable {Œπ : Type*} [Preorder Œπ]

scoped instance : TopologicalSpace (WithTop Œπ) := Preorder.topology _

scoped instance : OrderTopology (WithTop Œπ) := ‚ü®rfl‚ü©

lemma plouf [ts : TopologicalSpace Œπ] [OrderTopology Œπ] [SecondCountableTopology Œπ] :
    ‚àÉ (c : Set Œπ), c.Countable ‚àß ts = generateFrom { s | ‚àÉ a ‚àà c, s = Ioi a ‚à® s = Iio a } := by
  rcases isEmpty_or_nonempty Œπ with hŒπ | hŒπ
  ¬∑ exact ‚ü®‚àÖ, by simp, Subsingleton.elim _ _‚ü©
  obtain ‚ü®t, t_subs, t_count, ht‚ü© : ‚àÉ t ‚äÜ { s | ‚àÉ a, s = Ioi a ‚à® s = Iio a },
      t.Countable ‚àß ts = generateFrom t :=
    bar2 OrderTopology.topology_eq_generate_intervals
  have A : ‚àÄ s ‚àà t, ‚àÉ a, s = Ioi a ‚à® s = Iio a := t_subs
  choose! a ha using A
  refine ‚ü®a '' t, t_count.image _, ?_‚ü©



#exit

scoped instance [TopologicalSpace Œπ] [OrderTopology Œπ] [SecondCountableTopology Œπ] :
    SecondCountableTopology (WithTop Œπ) := by
  sorry -- THE SORRY IS HERE ---------------------------------------------

end WithTopOrderTopology

namespace WithTop

open scoped WithTopOrderTopology

variable {Œπ : Type*}

noncomputable
abbrev ut [Nonempty Œπ] : WithTop Œπ ‚Üí Œπ := WithTop.untopD (Classical.arbitrary Œπ)

variable [LinearOrder Œπ] [TopologicalSpace Œπ] [OrderTopology Œπ]

lemma isEmbedding_coe : Topology.IsEmbedding ((‚Üë) : Œπ ‚Üí WithTop Œπ) := by
  refine WithTop.coe_strictMono.isEmbedding_of_ordConnected ?_
  rw [WithTop.range_coe]
  exact Set.ordConnected_Iio

lemma isOpenEmbedding_coe : Topology.IsOpenEmbedding ((‚Üë) : Œπ ‚Üí WithTop Œπ) :=
  ‚ü®isEmbedding_coe, by rw [WithTop.range_coe]; exact isOpen_Iio‚ü©

lemma nhds_coe {r : Œπ} : ùìù (r : WithTop Œπ) = (ùìù r).map (‚Üë) :=
  (isOpenEmbedding_coe.map_nhds_eq r).symm

lemma tendsto_ut [Nonempty Œπ] {a : WithTop Œπ} (ha : a ‚â† ‚ä§) :
    Tendsto WithTop.ut (ùìù a) (ùìù a.ut) := by
  lift a to Œπ using ha
  rw [nhds_coe, tendsto_map'_iff]
  exact tendsto_id

lemma continuousOn_ut [Nonempty Œπ] : ContinuousOn WithTop.ut { a : WithTop Œπ | a ‚â† ‚ä§ } :=
  fun _a ha ‚Ü¶ ContinuousAt.continuousWithinAt (WithTop.tendsto_ut ha)

@[fun_prop]
lemma continuous_coe : Continuous ((‚Üë) : Œπ ‚Üí WithTop Œπ) :=
  isEmbedding_coe.continuous

variable (Œπ) in
noncomputable
def neTopEquiv [Nonempty Œπ] : { a : WithTop Œπ | a ‚â† ‚ä§ } ‚âÉ Œπ where
  toFun x := WithTop.ut x
  invFun x := ‚ü®x, WithTop.coe_ne_top‚ü©
  left_inv := fun x => Subtype.eq <| by
    lift (x : WithTop Œπ) to Œπ using x.2 with y
    simp
  right_inv x := by simp

variable (Œπ) in
noncomputable
def neTopHomeomorph [Nonempty Œπ] : { a : WithTop Œπ | a ‚â† ‚ä§ } ‚âÉ‚Çú Œπ where
  toEquiv := WithTop.neTopEquiv Œπ
  continuous_toFun := continuousOn_iff_continuous_restrict.1 continuousOn_ut
  continuous_invFun := continuous_coe.subtype_mk _

variable (Œπ) in
/-- If `Œπ` has a top element, then `WithTop Œπ` is homeomorphic to `Œπ ‚äï Unit`. -/
noncomputable
def sumHomeomorph [OrderTop Œπ] : WithTop Œπ ‚âÉ‚Çú Œπ ‚äï Unit where
  toFun x := if h : x = ‚ä§ then Sum.inr () else Sum.inl x.ut
  invFun x := match x with
    | Sum.inl i => (i : WithTop Œπ)
    | Sum.inr () => ‚ä§
  left_inv x := by cases x <;> simp
  right_inv x := by cases x <;> simp
  continuous_toFun := by
    have h_fr : frontier ({‚ä§} : Set (WithTop Œπ)) = ‚àÖ := by
      simp only [frontier, Set.finite_singleton, Set.Finite.isClosed, IsClosed.closure_eq]
      suffices interior ({‚ä§} : Set (WithTop Œπ)) = {‚ä§} by simp [this]
      rw [interior_eq_iff_isOpen]
      have : {‚ä§} = Set.Ioi ((‚ä§ : Œπ) : WithTop Œπ) := by ext; simp
      rw [this]
      exact isOpen_Ioi
    refine continuous_if' (by simp [h_fr]) (by simp [h_fr]) (by simp) ?_
    exact Continuous.comp_continuousOn (by fun_prop) continuousOn_ut
  continuous_invFun := continuous_sum_dom.mpr ‚ü®by fun_prop, by fun_prop‚ü©

end WithTop
