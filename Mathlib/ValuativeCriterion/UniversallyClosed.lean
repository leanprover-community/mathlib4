-- `Mathlib/AlgebraicGeometry/Morphisms/UniversallyClosed
import Mathlib.AlgebraicGeometry.Morphisms.UniversallyClosed
import Mathlib.AlgebraicGeometry.Morphisms.QuasiCompact
import Mathlib.ValuativeCriterion.Fiber

open CategoryTheory CategoryTheory.Limits TopologicalSpace

namespace AlgebraicGeometry

open AlgebraicGeometry (topologically)

universe u

variable {X Y Z : Scheme.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)

/-
use `isClosedMap_iff_specializingMap`
-/
lemma universallyClosed_iff_specializingMap [QuasiCompact f] :
    UniversallyClosed f ‚Üî (topologically @SpecializingMap).universally f := by
  rw [universallyClosed_eq]
  constructor
  ¬∑ intro h Z W g i‚ÇÇ f' hp
    have : QuasiCompact f' := MorphismProperty.of_isPullback hp.flip inferInstance
    have hcl : IsClosedMap f'.base := h g i‚ÇÇ f' hp
    rwa [isClosedMap_iff_specializingMap] at hcl
  ¬∑ intro h Z W g i‚ÇÇ f' hp
    have : QuasiCompact f' := MorphismProperty.of_isPullback hp.flip inferInstance
    have hcl : SpecializingMap f'.base := h g i‚ÇÇ f' hp
    rwa [‚Üê isClosedMap_iff_specializingMap] at hcl

instance {K} [Field K] : Unique (Spec (.of K)) :=
  inferInstanceAs <| Unique (PrimeSpectrum K)

@[simp]
lemma default_asIdeal {K} [Field K] : (default : Spec (.of K)).asIdeal = ‚ä• := rfl

lemma Spec.map_base_apply {R S : CommRingCat} (f : R ‚ü∂ S) (x : Spec S) :
    (Spec.map f).base x = PrimeSpectrum.comap f x :=
  rfl

lemma aeval_ite_mem_eq_self {œÉ R : Type*} [CommRing R] (q : MvPolynomial œÉ R)
    {s : Set œÉ} (hs : q.vars.toSet ‚äÜ s) [‚àÄ i, Decidable (i ‚àà s)] :
    MvPolynomial.aeval (fun i ‚Ü¶ if i ‚àà s then .X i else 0) q = q := by
  rw [MvPolynomial.as_sum q, MvPolynomial.aeval_sum]
  refine Finset.sum_congr rfl fun u hu ‚Ü¶ ?_
  rw [MvPolynomial.aeval_monomial, MvPolynomial.monomial_eq]
  congr 1
  exact Finsupp.prod_congr (fun i hi ‚Ü¶ by simp [hs ((MvPolynomial.mem_vars _).mpr ‚ü®u, hu, hi‚ü©)])

lemma Scheme.Hom.isClosedMap {X Y : Scheme} (f : X.Hom Y) [UniversallyClosed f] :
    IsClosedMap f.base := UniversallyClosed.out _ _ _ IsPullback.of_id_snd

open Scheme.Pullback _root_.PrimeSpectrum in
/--
For a (formalizable) proof, see https://imgur.com/a/nTDzDFj.

inspired by
https://mathoverflow.net/questions/23337/is-a-universally-closed-morphism-of-schemes-quasi-compact/23528#23528
-/
lemma compactSpace_of_universallyClosed
    {K} [Field K] (f : X ‚ü∂ Spec (.of K)) [UniversallyClosed f] : CompactSpace X := by
  classical
  let ùí∞ : X.OpenCover := X.affineCover
  let U (i : ùí∞.J) : X.Opens := (ùí∞.map i).opensRange
  let T : Scheme := Spec (.of <| MvPolynomial ùí∞.J K)
  let q : T ‚ü∂ Spec (.of K) := Spec.map MvPolynomial.C
  let Ti (i : ùí∞.J) : T.Opens := basicOpen (MvPolynomial.X i)
  let fT : pullback f q ‚ü∂ T := pullback.snd f q
  let p : pullback f q ‚ü∂ X := pullback.fst f q
  let Z : Set (pullback f q : _) := (‚®Ü i, fT ‚Åª¬π·µÅ (Ti i) ‚äì p ‚Åª¬π·µÅ (U i) : (pullback f q).Opens)·∂ú
  have hZ : IsClosed Z := by
    simp only [Z, isClosed_compl_iff, Opens.coe_iSup, Opens.coe_inf, Opens.map_coe]
    exact isOpen_iUnion fun i ‚Ü¶ (fT.continuous.1 _ (Ti i).2).inter (p.continuous.1 _ (U i).2)
  let Zc : T.Opens := ‚ü®(fT.base '' Z)·∂ú, (fT.isClosedMap _ hZ).isOpen_compl‚ü©
  let œà : MvPolynomial ùí∞.J K ‚Üí‚Çê[K] K := MvPolynomial.aeval (fun _ ‚Ü¶ 1)
  let t : T := (Spec.map <| CommRingCat.ofHom œà.toRingHom).base default
  have ht (i : ùí∞.J) : t ‚àà Ti i := show œà (.X i) ‚â† 0 by simp [œà]
  have htZc : t ‚àà Zc := by
    intro ‚ü®z, hz, hzt‚ü©
    suffices ‚àÉ i, fT.base z ‚àà Ti i ‚àß p.base z ‚àà U i from hz (by simpa)
    exact ‚ü®ùí∞.f (p.base z), hzt ‚ñ∏ ht _, by simpa [U] using ùí∞.covers (p.base z)‚ü©
  obtain ‚ü®U', ‚ü®g, rfl‚ü©, htU', hU'le‚ü© := Opens.isBasis_iff_nbhd.mp isBasis_basic_opens htZc
  let œÉ : Finset ùí∞.J := MvPolynomial.vars g
  let œÜ : MvPolynomial ùí∞.J K ‚Üí+* MvPolynomial ùí∞.J K :=
    (MvPolynomial.aeval fun i : ùí∞.J ‚Ü¶ if i ‚àà œÉ then MvPolynomial.X i else 0).toRingHom
  let t' : T := (Spec.map œÜ).base t
  have ht'g : t' ‚àà PrimeSpectrum.basicOpen g :=
    show œÜ g ‚àâ t.asIdeal from (show œÜ g = g from aeval_ite_mem_eq_self g subset_rfl).symm ‚ñ∏ htU'
  have h : t' ‚àâ fT.base '' Z := hU'le ht'g
  suffices ‚ãÉ i ‚àà œÉ, (U i).1 = Set.univ from
    ‚ü®this ‚ñ∏ Finset.isCompact_biUnion _ fun i _ ‚Ü¶ isCompact_range (ùí∞.map i).continuous‚ü©
  rw [Set.iUnion‚ÇÇ_eq_univ_iff]
  contrapose! h
  obtain ‚ü®x, hx‚ü© := h
  obtain ‚ü®z, rfl, hzr‚ü© := exists_preimage_pullback x t' (Subsingleton.elim (f.base x) (q.base t'))
  suffices ‚àÄ i, t ‚àà (Ti i).comap (comap œÜ) ‚Üí p.base z ‚àâ U i from ‚ü®z, by simpa [Z, p, hzr], hzr‚ü©
  intro i hi‚ÇÅ hi‚ÇÇ
  rw [comap_basicOpen, show œÜ (.X i) = 0 by simpa [œÜ] using (hx i ¬∑ hi‚ÇÇ), basicOpen_zero] at hi‚ÇÅ
  cases hi‚ÇÅ

/--
Use `compactSpace_of_universallyClosed` and `universallyClosed_stableUnderBaseChange` and
`Scheme.Hom.range_fiberŒπ` and `isProperMap_iff_isClosedMap_and_compact_fibers`
-/
lemma isProperMap_of_universallyClosed [UniversallyClosed f] : IsProperMap f.base := by
  rw [isProperMap_iff_isClosedMap_and_compact_fibers]
  refine ‚ü®Scheme.Hom.continuous f, ?_, ?_‚ü©
  ¬∑ exact MorphismProperty.universally_le (P := topologically @IsClosedMap) _ UniversallyClosed.out
  ¬∑ intro y
    have := compactSpace_of_universallyClosed (pullback.snd f (Y.fromSpecResidueField y))
    rw [‚Üê Scheme.range_fromSpecResidueField, ‚Üê Scheme.Pullback.range_fst]
    exact isCompact_range (Scheme.Hom.continuous _)

/--
Use `IsProperMap.isCompact_preimage`.
This holds for any map between topological spaces. Maybe generalize.
-/
instance (priority := 900) [UniversallyClosed f] : QuasiCompact f where
  isCompact_preimage _ _ hUc :=
    IsProperMap.isCompact_preimage (isProperMap_of_universallyClosed f) hUc

/-- needs the instance above and `universallyClosed_iff_specializingMap`. -/
lemma universallyClosed_eq_universallySpecializing :
    @UniversallyClosed = (topologically @SpecializingMap).universally ‚äì @QuasiCompact := by
  ext X Y f
  constructor
  ¬∑ intro hf
    exact ‚ü®(universallyClosed_iff_specializingMap f).mp hf, inferInstance‚ü©
  ¬∑ intro ‚ü®hf, _‚ü©
    exact (universallyClosed_iff_specializingMap f).mpr hf

end AlgebraicGeometry
