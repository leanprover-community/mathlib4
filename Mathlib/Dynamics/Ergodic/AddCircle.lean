/-
Copyright (c) 2022 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import Mathlib.Algebra.Order.Ring.Abs
import Mathlib.Data.Set.Pointwise.Iterate
import Mathlib.Dynamics.Ergodic.Ergodic
import Mathlib.MeasureTheory.Covering.DensityTheorem
import Mathlib.MeasureTheory.Group.AddCircle
import Mathlib.MeasureTheory.Measure.Haar.Unique

#align_import dynamics.ergodic.add_circle from "leanprover-community/mathlib"@"5f6e827d81dfbeb6151d7016586ceeb0099b9655"

/-!
# Ergodic maps of the additive circle

This file contains proofs of ergodicity for maps of the additive circle.

## Main definitions:

 * `AddCircle.ergodic_zsmul`: given `n : ‚Ñ§` such that `1 < |n|`, the self map `y ‚Ü¶ n ‚Ä¢ y` on
   the additive circle is ergodic (wrt the Haar measure).
 * `AddCircle.ergodic_nsmul`: given `n : ‚Ñï` such that `1 < n`, the self map `y ‚Ü¶ n ‚Ä¢ y` on
   the additive circle is ergodic (wrt the Haar measure).
 * `AddCircle.ergodic_zsmul_add`: given `n : ‚Ñ§` such that `1 < |n|` and `x : AddCircle T`, the
   self map `y ‚Ü¶ n ‚Ä¢ y + x` on the additive circle is ergodic (wrt the Haar measure).
 * `AddCircle.ergodic_nsmul_add`: given `n : ‚Ñï` such that `1 < n` and `x : AddCircle T`, the
   self map `y ‚Ü¶ n ‚Ä¢ y + x` on the additive circle is ergodic (wrt the Haar measure).

-/


open Set Function MeasureTheory MeasureTheory.Measure Filter Metric

open scoped MeasureTheory NNReal ENNReal Topology Pointwise

namespace AddCircle

variable {T : ‚Ñù} [hT : Fact (0 < T)]

/-- If a null-measurable subset of the circle is almost invariant under rotation by a family of
rational angles with denominators tending to infinity, then it must be almost empty or almost full.
-/
theorem ae_empty_or_univ_of_forall_vadd_ae_eq_self {s : Set <| AddCircle T}
    (hs : NullMeasurableSet s volume) {Œπ : Type*} {l : Filter Œπ} [l.NeBot] {u : Œπ ‚Üí AddCircle T}
    (hu‚ÇÅ : ‚àÄ i, (u i +·µ• s : Set _) =·µê[volume] s) (hu‚ÇÇ : Tendsto (addOrderOf ‚àò u) l atTop) :
    s =·µê[volume] (‚àÖ : Set <| AddCircle T) ‚à® s =·µê[volume] univ := by
  /- Sketch of proof:
    Assume `T = 1` for simplicity and let `Œº` be the Haar measure. We may assume `s` has positive
    measure since otherwise there is nothing to prove. In this case, by Lebesgue's density theorem,
    there exists a point `d` of positive density. Let `I‚±º` be the sequence of closed balls about `d`
    of diameter `1 / n‚±º` where `n‚±º` is the additive order of `u‚±º`. Since `d` has positive density we
    must have `Œº (s ‚à© I‚±º) / Œº I‚±º ‚Üí 1` along `l`. However since `s` is invariant under the action of
    `u‚±º` and since `I‚±º` is a fundamental domain for this action, we must have
    `Œº (s ‚à© I‚±º) = n‚±º * Œº s = (Œº I‚±º) * Œº s`. We thus have `Œº s ‚Üí 1` and thus `Œº s = 1`. -/
  set Œº := (volume : Measure <| AddCircle T)
  set n : Œπ ‚Üí ‚Ñï := addOrderOf ‚àò u
  have hT‚ÇÄ : 0 < T := hT.out
  have hT‚ÇÅ : ENNReal.ofReal T ‚â† 0 := by simpa
  rw [ae_eq_empty, ae_eq_univ_iff_measure_eq hs, AddCircle.measure_univ]
  rcases eq_or_ne (Œº s) 0 with h | h; ¬∑ exact Or.inl h
  right
  obtain ‚ü®d, -, hd‚ü© : ‚àÉ d, d ‚àà s ‚àß ‚àÄ {Œπ'} {l : Filter Œπ'} (w : Œπ' ‚Üí AddCircle T) (Œ¥ : Œπ' ‚Üí ‚Ñù),
    Tendsto Œ¥ l (ùìù[>] 0) ‚Üí (‚àÄ·∂† j in l, d ‚àà closedBall (w j) (1 * Œ¥ j)) ‚Üí
      Tendsto (fun j => Œº (s ‚à© closedBall (w j) (Œ¥ j)) / Œº (closedBall (w j) (Œ¥ j))) l (ùìù 1) :=
    exists_mem_of_measure_ne_zero_of_ae h
      (IsUnifLocDoublingMeasure.ae_tendsto_measure_inter_div Œº s 1)
  let I : Œπ ‚Üí Set (AddCircle T) := fun j => closedBall d (T / (2 * ‚Üë(n j)))
  replace hd : Tendsto (fun j => Œº (s ‚à© I j) / Œº (I j)) l (ùìù 1)
  ¬∑ let Œ¥ : Œπ ‚Üí ‚Ñù := fun j => T / (2 * ‚Üë(n j))
    have hŒ¥‚ÇÄ : ‚àÄ·∂† j in l, 0 < Œ¥ j :=
      (hu‚ÇÇ.eventually_gt_atTop 0).mono fun j hj => div_pos hT‚ÇÄ <| by positivity
    have hŒ¥‚ÇÅ : Tendsto Œ¥ l (ùìù[>] 0) := by
      refine' tendsto_nhdsWithin_iff.mpr ‚ü®_, hŒ¥‚ÇÄ‚ü©
      replace hu‚ÇÇ : Tendsto (fun j => T‚Åª¬π * 2 * n j) l atTop :=
        (tendsto_nat_cast_atTop_iff.mpr hu‚ÇÇ).const_mul_atTop (by positivity : 0 < T‚Åª¬π * 2)
      convert hu‚ÇÇ.inv_tendsto_atTop
      ext j
      simp only [Pi.inv_apply, mul_inv_rev, inv_inv, div_eq_inv_mul, ‚Üê mul_assoc]
    have hw : ‚àÄ·∂† j in l, d ‚àà closedBall d (1 * Œ¥ j) := hŒ¥‚ÇÄ.mono fun j hj => by
      simp only [comp_apply, one_mul, mem_closedBall, dist_self]
      apply hj.le
    exact hd _ Œ¥ hŒ¥‚ÇÅ hw
  suffices ‚àÄ·∂† j in l, Œº (s ‚à© I j) / Œº (I j) = Œº s / ENNReal.ofReal T by
    replace hd := hd.congr' this
    rwa [tendsto_const_nhds_iff, ENNReal.div_eq_one_iff hT‚ÇÅ ENNReal.ofReal_ne_top] at hd
  refine' (hu‚ÇÇ.eventually_gt_atTop 0).mono fun j hj => _
  have : addOrderOf (u j) = n j := rfl
  have huj : IsOfFinAddOrder (u j) := addOrderOf_pos_iff.mp hj
  have huj' : 1 ‚â§ (‚Üë(n j) : ‚Ñù) := by norm_cast
  have hI‚ÇÄ : Œº (I j) ‚â† 0 := (measure_closedBall_pos _ d <| by positivity).ne.symm
  have hI‚ÇÅ : Œº (I j) ‚â† ‚ä§ := measure_ne_top _ _
  have hI‚ÇÇ : Œº (I j) * ‚Üë(n j) = ENNReal.ofReal T := by
    rw [volume_closedBall, mul_div, mul_div_mul_left T _ two_ne_zero,
      min_eq_right (div_le_self hT‚ÇÄ.le huj'), mul_comm, ‚Üê nsmul_eq_mul, ‚Üê ENNReal.ofReal_nsmul,
      nsmul_eq_mul, mul_div_cancel']
    exact Nat.cast_ne_zero.mpr hj.ne'
  rw [ENNReal.div_eq_div_iff hT‚ÇÅ ENNReal.ofReal_ne_top hI‚ÇÄ hI‚ÇÅ,
    volume_of_add_preimage_eq s _ (u j) d huj (hu‚ÇÅ j) closedBall_ae_eq_ball, nsmul_eq_mul, ‚Üê
    mul_assoc, this, hI‚ÇÇ]
#align add_circle.ae_empty_or_univ_of_forall_vadd_ae_eq_self AddCircle.ae_empty_or_univ_of_forall_vadd_ae_eq_self

theorem ergodic_zsmul {n : ‚Ñ§} (hn : 1 < |n|) : Ergodic fun y : AddCircle T => n ‚Ä¢ y :=
  { measurePreserving_zsmul volume (abs_pos.mp <| lt_trans zero_lt_one hn) with
    ae_empty_or_univ := fun s hs hs' => by
      let u : ‚Ñï ‚Üí AddCircle T := fun j => ‚Üë((‚Üë1 : ‚Ñù) / ‚Üë(n.natAbs ^ j) * T)
      replace hn : 1 < n.natAbs := by rwa [Int.abs_eq_natAbs, Nat.one_lt_cast] at hn
      have hu‚ÇÄ : ‚àÄ j, addOrderOf (u j) = n.natAbs ^ j := fun j => by
        convert addOrderOf_div_of_gcd_eq_one (p := T) (m := 1)
          (pow_pos (pos_of_gt hn) j) (gcd_one_left _)
        norm_cast
      have hnu : ‚àÄ j, n ^ j ‚Ä¢ u j = 0 := fun j => by
        rw [‚Üê addOrderOf_dvd_iff_zsmul_eq_zero, hu‚ÇÄ, Int.coe_nat_pow, Int.coe_natAbs, ‚Üê abs_pow,
          abs_dvd]
      have hu‚ÇÅ : ‚àÄ j, (u j +·µ• s : Set _) =·µê[volume] s := fun j => by
        rw [vadd_eq_self_of_preimage_zsmul_eq_self hs' (hnu j)]
      have hu‚ÇÇ : Tendsto (fun j => addOrderOf <| u j) atTop atTop := by
        simp_rw [hu‚ÇÄ]; exact Nat.tendsto_pow_atTop_atTop_of_one_lt hn
      exact ae_empty_or_univ_of_forall_vadd_ae_eq_self hs.nullMeasurableSet hu‚ÇÅ hu‚ÇÇ }
#align add_circle.ergodic_zsmul AddCircle.ergodic_zsmul

theorem ergodic_nsmul {n : ‚Ñï} (hn : 1 < n) : Ergodic fun y : AddCircle T => n ‚Ä¢ y :=
  ergodic_zsmul (by simp [hn] : 1 < |(n : ‚Ñ§)|)
#align add_circle.ergodic_nsmul AddCircle.ergodic_nsmul

theorem ergodic_zsmul_add (x : AddCircle T) {n : ‚Ñ§} (h : 1 < |n|) : Ergodic fun y => n ‚Ä¢ y + x := by
  set f : AddCircle T ‚Üí AddCircle T := fun y => n ‚Ä¢ y + x
  let e : AddCircle T ‚âÉ·µê AddCircle T := MeasurableEquiv.addLeft (DivisibleBy.div x <| n - 1)
  have he : MeasurePreserving e volume volume :=
    measurePreserving_add_left volume (DivisibleBy.div x <| n - 1)
  suffices e ‚àò f ‚àò e.symm = fun y => n ‚Ä¢ y by
    rw [‚Üê he.ergodic_conjugate_iff, this]; exact ergodic_zsmul h
  replace h : n - 1 ‚â† 0
  ¬∑ rw [‚Üê abs_one] at h; rw [sub_ne_zero]; exact ne_of_apply_ne _ (ne_of_gt h)
  have hnx : n ‚Ä¢ DivisibleBy.div x (n - 1) = x + DivisibleBy.div x (n - 1) := by
    conv_rhs => congr; rw [‚Üê DivisibleBy.div_cancel x h]
    rw [sub_smul, one_smul, sub_add_cancel]
  ext y
  simp only [hnx, MeasurableEquiv.coe_addLeft, MeasurableEquiv.symm_addLeft, comp_apply, smul_add,
    zsmul_neg', neg_smul, neg_add_rev]
  abel
#align add_circle.ergodic_zsmul_add AddCircle.ergodic_zsmul_add

theorem ergodic_nsmul_add (x : AddCircle T) {n : ‚Ñï} (h : 1 < n) : Ergodic fun y => n ‚Ä¢ y + x :=
  ergodic_zsmul_add x (by simp [h] : 1 < |(n : ‚Ñ§)|)
#align add_circle.ergodic_nsmul_add AddCircle.ergodic_nsmul_add

end AddCircle
