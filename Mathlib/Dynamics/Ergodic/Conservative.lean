/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.MeasureTheory.Constructions.BorelSpace.Basic
import Mathlib.Dynamics.Ergodic.MeasurePreserving
import Mathlib.Combinatorics.Pigeonhole

/-!
# Conservative systems

In this file we define `f : Œ± ‚Üí Œ±` to be a *conservative* system w.r.t a measure `Œº` if `f` is
non-singular (`MeasureTheory.QuasiMeasurePreserving`) and for every measurable set `s` of
positive measure at least one point `x ‚àà s` returns back to `s` after some number of iterations of
`f`. There are several properties that look like they are stronger than this one but actually follow
from it:

* `MeasureTheory.Conservative.frequently_measure_inter_ne_zero`,
  `MeasureTheory.Conservative.exists_gt_measure_inter_ne_zero`: if `Œº s ‚â† 0`, then for infinitely
  many `n`, the measure of `s ‚à© f^[n] ‚Åª¬π' s` is positive.

* `MeasureTheory.Conservative.measure_mem_forall_ge_image_not_mem_eq_zero`,
  `MeasureTheory.Conservative.ae_mem_imp_frequently_image_mem`: a.e. every point of `s` visits `s`
  infinitely many times (Poincar√© recurrence theorem).

We also prove the topological Poincar√© recurrence theorem
`MeasureTheory.Conservative.ae_frequently_mem_of_mem_nhds`. Let `f : Œ± ‚Üí Œ±` be a conservative
dynamical system on a topological space with second countable topology and measurable open
sets. Then almost every point `x : Œ±` is recurrent: it visits every neighborhood `s ‚àà ùìù x`
infinitely many times.

## Tags

conservative dynamical system, Poincare recurrence theorem
-/


noncomputable section

open Set Filter MeasureTheory Finset Function TopologicalSpace Topology

variable {Œπ : Type*} {Œ± : Type*} [MeasurableSpace Œ±] {f : Œ± ‚Üí Œ±} {s : Set Œ±} {Œº : Measure Œ±}

namespace MeasureTheory

open Measure

/-- We say that a non-singular (`MeasureTheory.QuasiMeasurePreserving`) self-map is
*conservative* if for any measurable set `s` of positive measure there exists `x ‚àà s` such that `x`
returns back to `s` under some iteration of `f`. -/
structure Conservative (f : Œ± ‚Üí Œ±) (Œº : Measure Œ±) extends QuasiMeasurePreserving f Œº Œº : Prop where
  /-- If `f` is a conservative self-map and `s` is a measurable set of nonzero measure,
  then there exists a point `x ‚àà s` that returns to `s` under a non-zero iteration of `f`. -/
  exists_mem_iterate_mem' : ‚àÄ ‚¶És‚¶Ñ, MeasurableSet s ‚Üí Œº s ‚â† 0 ‚Üí ‚àÉ x ‚àà s, ‚àÉ m ‚â† 0, f^[m] x ‚àà s

/-- A self-map preserving a finite measure is conservative. -/
protected theorem MeasurePreserving.conservative [IsFiniteMeasure Œº] (h : MeasurePreserving f Œº Œº) :
    Conservative f Œº :=
  ‚ü®h.quasiMeasurePreserving, fun _ hsm h0 => h.exists_mem_iterate_mem hsm.nullMeasurableSet h0‚ü©

namespace Conservative

/-- The identity map is conservative w.r.t. any measure. -/
protected theorem id (Œº : Measure Œ±) : Conservative id Œº :=
  { toQuasiMeasurePreserving := QuasiMeasurePreserving.id Œº
    exists_mem_iterate_mem' := fun _ _ h0 => by
      simpa [exists_ne] using nonempty_of_measure_ne_zero h0 }

/-- If `f` is a conservative self-map and `s` is a null measurable set of nonzero measure,
then there exists a point `x ‚àà s` that returns to `s` under a non-zero iteration of `f`. -/
theorem exists_mem_iterate_mem (hf : Conservative f Œº)
    (hsm : NullMeasurableSet s Œº) (hs‚ÇÄ : Œº s ‚â† 0) :
    ‚àÉ x ‚àà s, ‚àÉ m ‚â† 0, f^[m] x ‚àà s := by
  rcases hsm.exists_measurable_subset_ae_eq with ‚ü®t, hsub, htm, hts‚ü©
  rcases hf.exists_mem_iterate_mem' htm (by rwa [measure_congr hts]) with ‚ü®x, hxt, m, hm‚ÇÄ, hmt‚ü©
  exact ‚ü®x, hsub hxt, m, hm‚ÇÄ, hsub hmt‚ü©

/-- If `f` is a conservative map and `s` is a measurable set of nonzero measure, then
for infinitely many values of `m` a positive measure of points `x ‚àà s` returns back to `s`
after `m` iterations of `f`. -/
theorem frequently_measure_inter_ne_zero (hf : Conservative f Œº) (hs : NullMeasurableSet s Œº)
    (h0 : Œº s ‚â† 0) : ‚àÉ·∂† m in atTop, Œº (s ‚à© f^[m] ‚Åª¬π' s) ‚â† 0 := by
  set t : ‚Ñï ‚Üí Set Œ± := fun n ‚Ü¶ s ‚à© f^[n] ‚Åª¬π' s
  -- Assume that `Œº (t n) ‚â† 0`, where `t n = s ‚à© f^[n] ‚Åª¬π' s`, only for finitely many `n`.
  by_contra H
  -- Let `N` be the maximal `n` such that `Œº (t n) ‚â† 0`.
  obtain ‚ü®N, hN, hmax‚ü© : ‚àÉ N, Œº (t N) ‚â† 0 ‚àß ‚àÄ n > N, Œº (t n) = 0 := by
    rw [Nat.frequently_atTop_iff_infinite, not_infinite] at H
    convert exists_max_image _ (¬∑) H ‚ü®0, by simpa‚ü© using 4
    rw [gt_iff_lt, ‚Üê not_le, not_imp_comm, mem_setOf]
  have htm {n : ‚Ñï} : NullMeasurableSet (t n) Œº :=
    hs.inter <| hs.preimage <| hf.toQuasiMeasurePreserving.iterate n
  -- Then all `t n`, `n > N`, are null sets, hence `T = t N \ ‚ãÉ n > N, t n` has positive measure.
  set T := t N \ ‚ãÉ n > N, t n with hT
  have hŒºT : Œº T ‚â† 0 := by
    rwa [hT, measure_diff_null]
    exact (measure_biUnion_null_iff {n | N < n}.to_countable).2 hmax
  have hTm : NullMeasurableSet T Œº := htm.diff <| .biUnion {n | N < n}.to_countable fun _ _ ‚Ü¶ htm
  -- Take `x ‚àà T` and `m ‚â† 0` such that `f^[m] x ‚àà T`.
  rcases hf.exists_mem_iterate_mem hTm hŒºT with ‚ü®x, hxt, m, hm‚ÇÄ, hmt‚ü©
  -- Then `N + m > N`, `x ‚àà s`, and `f^[N + m] x = f^[N] (f^[m] x) ‚àà s`.
  -- This contradicts `x ‚àà T ‚äÜ (‚ãÉ n > N, t n)·∂ú`.
  refine hxt.2 <| mem_iUnion‚ÇÇ.2 ‚ü®N + m, ?_, hxt.1.1, ?_‚ü©
  ¬∑ simpa [pos_iff_ne_zero]
  ¬∑ simpa only [iterate_add] using hmt.1.2

/-- If `f` is a conservative map and `s` is a measurable set of nonzero measure, then
for an arbitrarily large `m` a positive measure of points `x ‚àà s` returns back to `s`
after `m` iterations of `f`. -/
theorem exists_gt_measure_inter_ne_zero (hf : Conservative f Œº) (hs : NullMeasurableSet s Œº)
    (h0 : Œº s ‚â† 0) (N : ‚Ñï) : ‚àÉ m > N, Œº (s ‚à© f^[m] ‚Åª¬π' s) ‚â† 0 :=
  let ‚ü®m, hm, hmN‚ü© :=
    ((hf.frequently_measure_inter_ne_zero hs h0).and_eventually (eventually_gt_atTop N)).exists
  ‚ü®m, hmN, hm‚ü©

/-- Poincar√© recurrence theorem: given a conservative map `f` and a measurable set `s`, the set
of points `x ‚àà s` such that `x` does not return to `s` after `‚â• n` iterations has measure zero. -/
theorem measure_mem_forall_ge_image_not_mem_eq_zero (hf : Conservative f Œº)
    (hs : NullMeasurableSet s Œº) (n : ‚Ñï) :
    Œº ({ x ‚àà s | ‚àÄ m ‚â• n, f^[m] x ‚àâ s }) = 0 := by
  by_contra H
  have : NullMeasurableSet (s ‚à© { x | ‚àÄ m ‚â• n, f^[m] x ‚àâ s }) Œº := by
    simp only [setOf_forall, ‚Üê compl_setOf]
    exact hs.inter <| .biInter (to_countable _) fun m _ ‚Ü¶
      (hs.preimage <| hf.toQuasiMeasurePreserving.iterate m).compl
  rcases (hf.exists_gt_measure_inter_ne_zero this H) n with ‚ü®m, hmn, hm‚ü©
  rcases nonempty_of_measure_ne_zero hm with ‚ü®x, ‚ü®_, hxn‚ü©, hxm, -‚ü©
  exact hxn m hmn.lt.le hxm

/-- Poincar√© recurrence theorem: given a conservative map `f` and a measurable set `s`,
almost every point `x ‚àà s` returns back to `s` infinitely many times. -/
theorem ae_mem_imp_frequently_image_mem (hf : Conservative f Œº) (hs : NullMeasurableSet s Œº) :
    ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí ‚àÉ·∂† n in atTop, f^[n] x ‚àà s := by
  simp only [frequently_atTop, @forall_swap (_ ‚àà s), ae_all_iff]
  intro n
  filter_upwards [measure_zero_iff_ae_nmem.1 (hf.measure_mem_forall_ge_image_not_mem_eq_zero hs n)]
  simp

theorem inter_frequently_image_mem_ae_eq (hf : Conservative f Œº) (hs : NullMeasurableSet s Œº) :
    (s ‚à© { x | ‚àÉ·∂† n in atTop, f^[n] x ‚àà s } : Set Œ±) =·µê[Œº] s :=
  inter_eventuallyEq_left.2 <| hf.ae_mem_imp_frequently_image_mem hs

theorem measure_inter_frequently_image_mem_eq (hf : Conservative f Œº) (hs : NullMeasurableSet s Œº) :
    Œº (s ‚à© { x | ‚àÉ·∂† n in atTop, f^[n] x ‚àà s }) = Œº s :=
  measure_congr (hf.inter_frequently_image_mem_ae_eq hs)

/-- Poincar√© recurrence theorem: if `f` is a conservative dynamical system and `s` is a measurable
set, then for `Œº`-a.e. `x`, if the orbit of `x` visits `s` at least once, then it visits `s`
infinitely many times. -/
theorem ae_forall_image_mem_imp_frequently_image_mem (hf : Conservative f Œº)
    (hs : NullMeasurableSet s Œº) : ‚àÄ·µê x ‚àÇŒº, ‚àÄ k, f^[k] x ‚àà s ‚Üí ‚àÉ·∂† n in atTop, f^[n] x ‚àà s := by
  refine ae_all_iff.2 fun k => ?_
  refine (hf.ae_mem_imp_frequently_image_mem
    (hs.preimage <| hf.toQuasiMeasurePreserving.iterate k)).mono fun x hx hk => ?_
  rw [‚Üê map_add_atTop_eq_nat k, frequently_map]
  refine (hx hk).mono fun n hn => ?_
  rwa [add_comm, iterate_add_apply]

/-- If `f` is a conservative self-map and `s` is a measurable set of positive measure, then
`ae Œº`-frequently we have `x ‚àà s` and `s` returns to `s` under infinitely many iterations of `f`. -/
theorem frequently_ae_mem_and_frequently_image_mem (hf : Conservative f Œº)
    (hs : NullMeasurableSet s Œº) (h0 : Œº s ‚â† 0) : ‚àÉ·µê x ‚àÇŒº, x ‚àà s ‚àß ‚àÉ·∂† n in atTop, f^[n] x ‚àà s :=
  ((frequently_ae_mem_iff.2 h0).and_eventually (hf.ae_mem_imp_frequently_image_mem hs)).mono
    fun _ hx => ‚ü®hx.1, hx.2 hx.1‚ü©

/-- Poincar√© recurrence theorem. Let `f : Œ± ‚Üí Œ±` be a conservative dynamical system on a topological
space with second countable topology and measurable open sets. Then almost every point `x : Œ±`
is recurrent: it visits every neighborhood `s ‚àà ùìù x` infinitely many times. -/
theorem ae_frequently_mem_of_mem_nhds [TopologicalSpace Œ±] [SecondCountableTopology Œ±]
    [OpensMeasurableSpace Œ±] {f : Œ± ‚Üí Œ±} {Œº : Measure Œ±} (h : Conservative f Œº) :
    ‚àÄ·µê x ‚àÇŒº, ‚àÄ s ‚àà ùìù x, ‚àÉ·∂† n in atTop, f^[n] x ‚àà s := by
  have : ‚àÄ s ‚àà countableBasis Œ±, ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí ‚àÉ·∂† n in atTop, f^[n] x ‚àà s := fun s hs =>
    h.ae_mem_imp_frequently_image_mem (isOpen_of_mem_countableBasis hs).nullMeasurableSet
  refine ((ae_ball_iff <| countable_countableBasis Œ±).2 this).mono fun x hx s hs => ?_
  rcases (isBasis_countableBasis Œ±).mem_nhds_iff.1 hs with ‚ü®o, hoS, hxo, hos‚ü©
  exact (hx o hoS hxo).mono fun n hn => hos hn

/-- Iteration of a conservative system is a conservative system. -/
protected theorem iterate (hf : Conservative f Œº) (n : ‚Ñï) : Conservative f^[n] Œº := by
  -- Discharge the trivial case `n = 0`
  cases' n with n
  ¬∑ exact Conservative.id Œº
  refine ‚ü®hf.1.iterate _, fun s hs hs0 => ?_‚ü©
  rcases (hf.frequently_ae_mem_and_frequently_image_mem hs.nullMeasurableSet hs0).exists
    with ‚ü®x, _, hx‚ü©
  /- We take a point `x ‚àà s` such that `f^[k] x ‚àà s` for infinitely many values of `k`,
    then we choose two of these values `k < l` such that `k ‚â° l [MOD (n + 1)]`.
    Then `f^[k] x ‚àà s` and `f^[n + 1]^[(l - k) / (n + 1)] (f^[k] x) = f^[l] x ‚àà s`. -/
  rw [Nat.frequently_atTop_iff_infinite] at hx
  rcases Nat.exists_lt_modEq_of_infinite hx n.succ_pos with ‚ü®k, hk, l, hl, hkl, hn‚ü©
  set m := (l - k) / (n + 1)
  have : (n + 1) * m = l - k := by
    apply Nat.mul_div_cancel'
    exact (Nat.modEq_iff_dvd' hkl.le).1 hn
  refine ‚ü®f^[k] x, hk, m, ?_, ?_‚ü©
  ¬∑ intro hm
    rw [hm, mul_zero, eq_comm, tsub_eq_zero_iff_le] at this
    exact this.not_lt hkl
  ¬∑ rwa [‚Üê iterate_mul, this, ‚Üê iterate_add_apply, tsub_add_cancel_of_le]
    exact hkl.le

end Conservative

end MeasureTheory
