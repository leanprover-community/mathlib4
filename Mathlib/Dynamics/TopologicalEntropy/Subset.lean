/-
Copyright (c) 2024 Damien Thomine. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Damien Thomine, Pietro Monticone
-/
import Mathlib.Dynamics.TopologicalEntropy.NetEntropy

/-!
# Topological entropy of subsets: monotonicity, closure, union
This file contains general results about the topological entropy of various subsets of the same
dynamical system `(X, T)`. We prove that:
- the topological entropy `CoverEntropy T F` of `F` is monotone in `F`: the larger the subset,
the larger its entropy.
- the topological entropy of a subset equals the entropy of its closure.
- the entropy of the union of two sets is the maximum of their entropies. We generalize
the latter property to finite unions.

## Implementation notes
Most results are proved using only the definition of the topological entropy by covers. Some lemmas
of general interest are also proved for nets.

## Main results

## TODO
TODO: one may implement a notion of Hausdorff convergence for subsets using uniform
spaces, and then prove the semicontinuity of the topological entropy. It would be a nice
generalization of the lemmas on closures.

## Tags
closure, entropy, subset, union
-/

namespace Dynamics

variable {X : Type*}

/-! ### Monotonicity of entropy as a function of the subset -/

section Subset

lemma IsDynCoverOf.monotone_subset {T : X ‚Üí X} {F G : Set X} (F_G : F ‚äÜ G) {U : Set (X √ó X)} {n : ‚Ñï}
    {s : Set X} (h : IsDynCoverOf T G U n s) :
    IsDynCoverOf T F U n s :=
  F_G.trans h

lemma IsDynNetIn.monotone_subset {T : X ‚Üí X} {F G : Set X} (F_G : F ‚äÜ G ) {U : Set (X √ó X)} {n : ‚Ñï}
    {s : Set X} (h : IsDynNetIn T F U n s) :
    IsDynNetIn T G U n s :=
  ‚ü®h.1.trans F_G, h.2‚ü©

lemma coverMincard_monotone_subset (T : X ‚Üí X) (U : Set (X √ó X)) (n : ‚Ñï) :
    Monotone fun F : Set X ‚Ü¶ coverMincard T F U n :=
  fun _ _ F_G ‚Ü¶ biInf_mono fun _ h ‚Ü¶ h.monotone_subset F_G

lemma netMaxcard_monotone_subset (T : X ‚Üí X) (U : Set (X √ó X)) (n : ‚Ñï) :
    Monotone fun F : Set X ‚Ü¶ netMaxcard T F U n :=
  fun _ _ F_G ‚Ü¶ biSup_mono fun _ h ‚Ü¶ h.monotone_subset F_G

lemma coverEntropyInfEntourage_monotone (T : X ‚Üí X) (U : Set (X √ó X)) :
    Monotone fun F : Set X ‚Ü¶ coverEntropyInfEntourage T F U := by
  refine fun F G F_G ‚Ü¶ ExpGrowth.expGrowthInf_monotone fun n ‚Ü¶ ?_
  exact ENat.toENNReal_mono (coverMincard_monotone_subset T U n F_G)

lemma coverEntropyEntourage_monotone (T : X ‚Üí X) (U : Set (X √ó X)) :
    Monotone fun F : Set X ‚Ü¶ coverEntropyEntourage T F U := by
  refine fun F G F_G ‚Ü¶ ExpGrowth.expGrowthSup_monotone fun n ‚Ü¶ ?_
  exact ENat.toENNReal_mono (coverMincard_monotone_subset T U n F_G)

lemma netEntropyInfEntourage_monotone (T : X ‚Üí X) (U : Set (X √ó X)) :
    Monotone fun F : Set X ‚Ü¶ netEntropyInfEntourage T F U := by
  refine fun F G F_G ‚Ü¶ ExpGrowth.expGrowthInf_monotone fun n ‚Ü¶ ?_
  exact ENat.toENNReal_mono (netMaxcard_monotone_subset T U n F_G)

lemma netEntropyEntourage_monotone (T : X ‚Üí X) (U : Set (X √ó X)) :
    Monotone fun F : Set X ‚Ü¶ netEntropyEntourage T F U := by
  refine fun F G F_G ‚Ü¶ ExpGrowth.expGrowthSup_monotone fun n ‚Ü¶ ?_
  exact ENat.toENNReal_mono (netMaxcard_monotone_subset T U n F_G)

lemma coverEntropyInf_monotone [UniformSpace X] (T : X ‚Üí X) :
    Monotone fun F : Set X ‚Ü¶ coverEntropyInf T F :=
  fun _ _ F_G ‚Ü¶ iSup‚ÇÇ_mono fun U _ ‚Ü¶ coverEntropyInfEntourage_monotone T U F_G

lemma coverEntropy_monotone [UniformSpace X] (T : X ‚Üí X) :
    Monotone fun F : Set X ‚Ü¶ coverEntropy T F :=
  fun _ _ F_G ‚Ü¶ iSup‚ÇÇ_mono fun U _ ‚Ü¶ coverEntropyEntourage_monotone T U F_G

end Subset

/-! ### Topological entropy and closure -/

section Closure

open Set Uniformity UniformSpace

variable [UniformSpace X] {T : X ‚Üí X}

lemma IsDynCoverOf.closure (h : Continuous T) {F : Set X} {U V : Set (X √ó X)}
    (V_uni : V ‚àà ùì§ X) {n : ‚Ñï} {s : Set X} (s_cover : IsDynCoverOf T F U n s) :
    IsDynCoverOf T (closure F) (U ‚óã V) n s := by
  rcases (hasBasis_symmetric.mem_iff' V).1 V_uni with ‚ü®W, ‚ü®W_uni, W_symm‚ü©, W_V‚ü©
  refine IsDynCoverOf.of_entourage_subset (compRel_mono (refl U) W_V) fun x x_clos ‚Ü¶ ?_
  obtain ‚ü®y, y_x, y_F‚ü© := mem_closure_iff_nhds.1 x_clos _ (ball_dynEntourage_mem_nhds h W_uni n x)
  obtain ‚ü®z, z_s, y_z‚ü© := mem_iUnion‚ÇÇ.1 (s_cover y_F)
  refine mem_iUnion‚ÇÇ.2 ‚ü®z, z_s, ?_‚ü©
  rw [mem_ball_symmetry (W_symm.dynEntourage T n)] at y_x
  exact ball_mono (dynEntourage_comp_subset T U W n) z (mem_ball_comp y_z y_x)

lemma coverMincard_closure_le (h : Continuous T) (F : Set X) (U : Set (X √ó X)) {V : Set (X √ó X)}
    (V_uni : V ‚àà ùì§ X) (n : ‚Ñï) :
    coverMincard T (closure F) (U ‚óã V) n ‚â§ coverMincard T F U n := by
  rcases eq_top_or_lt_top (coverMincard T F U n) with h' | h'
  ¬∑ exact h' ‚ñ∏ le_top
  obtain ‚ü®s, s_cover, s_coverMincard‚ü© := (coverMincard_finite_iff T F U n).1 h'
  exact s_coverMincard ‚ñ∏ (s_cover.closure h V_uni).coverMincard_le_card

open ENat ENNReal EReal Filter Nat

lemma coverEntropyInfEntourage_closure (h : Continuous T) (F : Set X) (U : Set (X √ó X))
    {V : Set (X √ó X)} (V_uni : V ‚àà ùì§ X) :
    coverEntropyInfEntourage T (closure F) (U ‚óã V) ‚â§ coverEntropyInfEntourage T F U :=
  liminf_le_liminf <| Eventually.of_forall fun n ‚Ü¶ monotone_div_right_of_nonneg
    (cast_nonneg' n) (log_monotone (toENNReal_le.2 (coverMincard_closure_le h F U V_uni n)))

lemma coverEntropyEntourage_closure (h : Continuous T) (F : Set X) (U : Set (X √ó X))
    {V : Set (X √ó X)} (V_uni : V ‚àà ùì§ X) :
    coverEntropyEntourage T (closure F) (U ‚óã V) ‚â§ coverEntropyEntourage T F U :=
  limsup_le_limsup <| Eventually.of_forall fun n ‚Ü¶ monotone_div_right_of_nonneg
    (cast_nonneg' n) (log_monotone (toENNReal_le.2 (coverMincard_closure_le h F U V_uni n)))

lemma coverEntropyInf_closure (h : Continuous T) (F : Set X) :
    coverEntropyInf T (closure F) = coverEntropyInf T F := by
  refine (iSup‚ÇÇ_le fun U U_uni ‚Ü¶ ?_).antisymm (coverEntropyInf_monotone T subset_closure)
  obtain ‚ü®V, V_uni, V_U‚ü© := comp_mem_uniformity_sets U_uni
  exact le_iSup‚ÇÇ_of_le V V_uni ((coverEntropyInfEntourage_antitone T (closure F) V_U).trans
    (coverEntropyInfEntourage_closure h F V V_uni))

theorem coverEntropy_closure (h : Continuous T) (F : Set X) :
    coverEntropy T (closure F) = coverEntropy T F := by
  refine (iSup‚ÇÇ_le fun U U_uni ‚Ü¶ ?_).antisymm (coverEntropy_monotone T subset_closure)
  obtain ‚ü®V, V_uni, V_U‚ü© := comp_mem_uniformity_sets U_uni
  exact le_iSup‚ÇÇ_of_le V V_uni ((coverEntropyEntourage_antitone T (closure F) V_U).trans
    (coverEntropyEntourage_closure h F V V_uni))

end Closure

/-! ### Topological entropy of finite unions -/

section Union

open Set

lemma IsDynCoverOf.union {T : X ‚Üí X} {F G : Set X} {U : Set (X √ó X)} {n : ‚Ñï} {s t : Set X}
    (hs : IsDynCoverOf T F U n s) (ht : IsDynCoverOf T G U n t) :
    IsDynCoverOf T (F ‚à™ G) U n (s ‚à™ t) :=
  union_subset (hs.trans (biUnion_subset_biUnion_left subset_union_left))
    (ht.trans (biUnion_subset_biUnion_left subset_union_right))

lemma coverMincard_union_le (T : X ‚Üí X) (F G : Set X) (U : Set (X √ó X)) (n : ‚Ñï) :
    coverMincard T (F ‚à™ G) U n ‚â§ coverMincard T F U n + coverMincard T G U n := by
  classical
  rcases eq_top_or_lt_top (coverMincard T F U n) with hF | hF
  ¬∑ rw [hF, top_add]; exact le_top
  rcases eq_top_or_lt_top (coverMincard T G U n) with hG | hG
  ¬∑ rw [hG, add_top]; exact le_top
  obtain ‚ü®s, s_cover, s_coverMincard‚ü© := (coverMincard_finite_iff T F U n).1 hF
  obtain ‚ü®t, t_cover, t_coverMincard‚ü© := (coverMincard_finite_iff T G U n).1 hG
  rw [‚Üê s_coverMincard, ‚Üê t_coverMincard, ‚Üê ENat.coe_add]
  apply (IsDynCoverOf.coverMincard_le_card _).trans (WithTop.coe_mono (s.card_union_le t))
  rw [s.coe_union t]
  exact s_cover.union t_cover

open ExpGrowth

lemma coverEntropyEntourage_union (T : X ‚Üí X) (F G : Set X) (U : Set (X √ó X)) :
    coverEntropyEntourage T (F ‚à™ G) U
      = coverEntropyEntourage T F U ‚äî coverEntropyEntourage T G U := by
  refine le_antisymm ?_ ?_
  ¬∑ apply le_of_le_of_eq (expGrowthSup_monotone fun n ‚Ü¶ ?_) expGrowthSup_add
    rw [Pi.add_apply, ‚Üê ENat.toENNReal_add]
    apply ENat.toENNReal_mono
    exact coverMincard_union_le T F G U n
  ¬∑ exact max_le (coverEntropyEntourage_monotone T U subset_union_left)
      (coverEntropyEntourage_monotone T U subset_union_right)

lemma coverEntropy_union [UniformSpace X] (T : X ‚Üí X) (F G : Set X) :
    coverEntropy T (F ‚à™ G) = coverEntropy T F ‚äî coverEntropy T G := by
  simp only [coverEntropy, ‚Üê iSup_sup_eq, ‚Üê iSup_subtype']
  exact biSup_congr fun U _ ‚Ü¶ coverEntropyEntourage_union T F G U

open Function

lemma some_other_test {Œ± Œ≤ F Œπ : Type*} [CompleteLattice Œ±] [CompleteLattice Œ≤] [FunLike F Œ± Œ≤]
    [SupBotHomClass F Œ± Œ≤] [Finite Œπ] (f : F) (g : Œπ ‚Üí Œ±) :
    f (‚®Ü i : Œπ, g i) =  ‚®Ü i : Œπ, f (g i) := by
  apply Finite.induction_empty_option (P := fun Œπ ‚Ü¶ ‚àÄ (f : F) (g : Œπ ‚Üí Œ±),
    f (‚®Ü i : Œπ, g i) =  ‚®Ü i : Œπ, f (g i))
  ¬∑ intro Œ≥ Œ¥ Œ≥_Œ¥ h f g
    specialize h f (g ‚àò Œ≥_Œ¥)
    simp only [comp_apply] at h
    rwa [Œ≥_Œ¥.iSup_comp, Œ≥_Œ¥.iSup_comp (g := fun i ‚Ü¶ f (g i))] at h
  ¬∑ intro f _
    rw [iSup_of_empty, iSup_of_empty, map_bot f]
  ¬∑ intro _ _ h f g
    rw [iSup_option g, map_sup f, iSup_option fun i ‚Ü¶ f (g i), h f fun i ‚Ü¶ g i]

noncomputable def coverEntropy_supBotHom [UniformSpace X] (T : X ‚Üí X) :
    SupBotHom (Set X) EReal where
  toFun := coverEntropy T
  map_sup' := coverEntropy_union T
  map_bot' := by
    simp only [bot_eq_empty, coverEntropy_empty]

variable {Œπ : Type*} [UniformSpace X]

lemma coverEntropyInf_iUnion_le (T : X ‚Üí X) (F : Œπ ‚Üí Set X) :
    ‚®Ü i, coverEntropyInf T (F i) ‚â§ coverEntropyInf T (‚ãÉ i, F i) :=
  iSup_le fun i ‚Ü¶ coverEntropyInf_monotone T (subset_iUnion F i)

lemma coverEntropy_iUnion_le (T : X ‚Üí X) (F : Œπ ‚Üí Set X) :
    ‚®Ü i, coverEntropy T (F i) ‚â§ coverEntropy T (‚ãÉ i, F i) :=
  iSup_le fun i ‚Ü¶ coverEntropy_monotone T (subset_iUnion F i)

lemma coverEntropyInf_biUnion_le (s : Set Œπ) (T : X ‚Üí X) (F : Œπ ‚Üí Set X) :
    ‚®Ü i ‚àà s, coverEntropyInf T (F i) ‚â§ coverEntropyInf T (‚ãÉ i ‚àà s, F i) :=
  iSup‚ÇÇ_le fun _ i_s ‚Ü¶ coverEntropyInf_monotone T (subset_biUnion_of_mem i_s)

lemma coverEntropy_biUnion_le (s : Set Œπ) (T : X ‚Üí X) (F : Œπ ‚Üí Set X) :
    ‚®Ü i ‚àà s, coverEntropy T (F i) ‚â§ coverEntropy T (‚ãÉ i ‚àà s, F i) :=
  iSup‚ÇÇ_le fun _ i_s ‚Ü¶ coverEntropy_monotone T (subset_biUnion_of_mem i_s)

lemma coverEntropy_finite_iUnion [Finite Œπ] (T : X ‚Üí X) (F : Œπ ‚Üí Set X) :
    coverEntropy T (‚ãÉ i : Œπ, F i) = ‚®Ü i : Œπ, coverEntropy T (F i) := by
  have := some_other_test (coverEntropy_supBotHom T) F
  rw [‚Üê SupBotHom.toFun_eq_coe] at this
  exact this

lemma coverEntropy_finite_biUnion (T : X ‚Üí X) (F : Œπ ‚Üí Set X) (s : Finset Œπ) :
    coverEntropy T (‚ãÉ i ‚àà s, F i) = ‚®Ü i ‚àà s, coverEntropy T (F i) := by
  have := map_finset_sup (coverEntropy_supBotHom T) s F
  rw [s.sup_set_eq_biUnion, s.sup_eq_iSup, coverEntropy_supBotHom, SupBotHom.coe_mk,
    SupHom.coe_mk] at this
  rw [this]
  congr

end Union

end Dynamics
