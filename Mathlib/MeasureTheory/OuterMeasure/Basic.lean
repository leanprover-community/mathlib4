/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro
-/
import Mathlib.Data.Countable.Basic
import Mathlib.Data.Fin.VecNotation
import Mathlib.MeasureTheory.OuterMeasure.Defs

#align_import measure_theory.measure.outer_measure from "leanprover-community/mathlib"@"343e80208d29d2d15f8050b929aa50fe4ce71b55"

/-!
# Outer Measures

An outer measure is a function `Œº : Set Œ± ‚Üí ‚Ñù‚â•0‚àû`, from the powerset of a type to the extended
nonnegative real numbers that satisfies the following conditions:
1. `Œº ‚àÖ = 0`;
2. `Œº` is monotone;
3. `Œº` is countably subadditive. This means that the outer measure of a countable union is at most
   the sum of the outer measure on the individual sets.

Note that we do not need `Œ±` to be measurable to define an outer measure.

## References

<https://en.wikipedia.org/wiki/Outer_measure>

## Tags

outer measure
-/


noncomputable section

open Set Function Filter
open scoped Classical BigOperators NNReal Topology ENNReal

namespace MeasureTheory

namespace OuterMeasure

variable {Œ± Œ≤ : Type*} {m : OuterMeasure Œ±}

@[simp]
theorem empty' (m : OuterMeasure Œ±) : m ‚àÖ = 0 :=
  m.empty
#align measure_theory.outer_measure.empty' MeasureTheory.OuterMeasure.empty'

@[gcongr]
theorem mono' (m : OuterMeasure Œ±) {s‚ÇÅ s‚ÇÇ} (h : s‚ÇÅ ‚äÜ s‚ÇÇ) : m s‚ÇÅ ‚â§ m s‚ÇÇ :=
  m.mono h
#align measure_theory.outer_measure.mono' MeasureTheory.OuterMeasure.mono'

theorem mono_null (m : OuterMeasure Œ±) {s t} (h : s ‚äÜ t) (ht : m t = 0) : m s = 0 :=
  nonpos_iff_eq_zero.mp <| ht ‚ñ∏ m.mono' h
#align measure_theory.outer_measure.mono_null MeasureTheory.OuterMeasure.mono_null

theorem pos_of_subset_ne_zero (m : OuterMeasure Œ±) {a b : Set Œ±} (hs : a ‚äÜ b) (hnz : m a ‚â† 0) :
    0 < m b :=
  lt_of_lt_of_le (pos_iff_ne_zero.mpr hnz) (m.mono hs)
#align measure_theory.outer_measure.pos_of_subset_ne_zero MeasureTheory.OuterMeasure.pos_of_subset_ne_zero

protected theorem iUnion (m : OuterMeasure Œ±) {Œ≤} [Countable Œ≤] (s : Œ≤ ‚Üí Set Œ±) :
    m (‚ãÉ i, s i) ‚â§ ‚àë' i, m (s i) :=
  rel_iSup_tsum m m.empty (¬∑ ‚â§ ¬∑) m.iUnion_nat s
#align measure_theory.outer_measure.Union MeasureTheory.OuterMeasure.iUnion

theorem biUnion_null_iff (m : OuterMeasure Œ±) {s : Set Œ≤} (hs : s.Countable) {t : Œ≤ ‚Üí Set Œ±} :
    m (‚ãÉ i ‚àà s, t i) = 0 ‚Üî ‚àÄ i ‚àà s, m (t i) = 0 := by
  refine ‚ü®fun h i hi ‚Ü¶ m.mono_null (subset_biUnion_of_mem hi) h, fun h ‚Ü¶ ?_‚ü©
  have _ := hs.toEncodable
  simpa [h] using m.iUnion fun x : s ‚Ü¶ t x
#align measure_theory.outer_measure.bUnion_null_iff MeasureTheory.OuterMeasure.biUnion_null_iff

theorem sUnion_null_iff (m : OuterMeasure Œ±) {S : Set (Set Œ±)} (hS : S.Countable) :
    m (‚ãÉ‚ÇÄ S) = 0 ‚Üî ‚àÄ s ‚àà S, m s = 0 := by rw [sUnion_eq_biUnion, m.biUnion_null_iff hS]
#align measure_theory.outer_measure.sUnion_null_iff MeasureTheory.OuterMeasure.sUnion_null_iff

@[simp]
theorem iUnion_null_iff {Œπ : Sort*} [Countable Œπ] (m : OuterMeasure Œ±) {s : Œπ ‚Üí Set Œ±} :
    m (‚ãÉ i, s i) = 0 ‚Üî ‚àÄ i, m (s i) = 0 := by
  rw [‚Üê sUnion_range, m.sUnion_null_iff (countable_range s), forall_mem_range]
#align measure_theory.outer_measure.Union_null_iff MeasureTheory.OuterMeasure.iUnion_null_iff

alias ‚ü®_, iUnion_null‚ü© := iUnion_null_iff
#align measure_theory.outer_measure.Union_null MeasureTheory.OuterMeasure.iUnion_null

@[deprecated] -- Deprecated since 14 January 2024
theorem iUnion_null_iff' (m : OuterMeasure Œ±) {Œπ : Prop} {s : Œπ ‚Üí Set Œ±} :
    m (‚ãÉ i, s i) = 0 ‚Üî ‚àÄ i, m (s i) = 0 :=
  m.iUnion_null_iff
#align measure_theory.outer_measure.Union_null_iff' MeasureTheory.OuterMeasure.iUnion_null_iff'

protected theorem iUnion_finset (m : OuterMeasure Œ±) (s : Œ≤ ‚Üí Set Œ±) (t : Finset Œ≤) :
    m (‚ãÉ i ‚àà t, s i) ‚â§ ‚àë i in t, m (s i) :=
  rel_iSup_sum m m.empty (¬∑ ‚â§ ¬∑) m.iUnion_nat s t
#align measure_theory.outer_measure.Union_finset MeasureTheory.OuterMeasure.iUnion_finset

protected theorem union (m : OuterMeasure Œ±) (s‚ÇÅ s‚ÇÇ : Set Œ±) : m (s‚ÇÅ ‚à™ s‚ÇÇ) ‚â§ m s‚ÇÅ + m s‚ÇÇ :=
  rel_sup_add m m.empty (¬∑ ‚â§ ¬∑) m.iUnion_nat s‚ÇÅ s‚ÇÇ
#align measure_theory.outer_measure.union MeasureTheory.OuterMeasure.union

/-- If a set has zero measure in a neighborhood of each of its points, then it has zero measure
in a second-countable space. -/
theorem null_of_locally_null [TopologicalSpace Œ±] [SecondCountableTopology Œ±] (m : OuterMeasure Œ±)
    (s : Set Œ±) (hs : ‚àÄ x ‚àà s, ‚àÉ u ‚àà ùìù[s] x, m u = 0) : m s = 0 := by
  choose! u hxu hu‚ÇÄ using hs
  choose t ht using TopologicalSpace.countable_cover_nhdsWithin hxu
  rcases ht with ‚ü®ts, t_count, ht‚ü©
  apply m.mono_null ht
  exact (m.biUnion_null_iff t_count).2 fun x hx => hu‚ÇÄ x (ts hx)
#align measure_theory.outer_measure.null_of_locally_null MeasureTheory.OuterMeasure.null_of_locally_null

/-- If `m s ‚â† 0`, then for some point `x ‚àà s` and any `t ‚àà ùìù[s] x` we have `0 < m t`. -/
theorem exists_mem_forall_mem_nhds_within_pos [TopologicalSpace Œ±] [SecondCountableTopology Œ±]
    (m : OuterMeasure Œ±) {s : Set Œ±} (hs : m s ‚â† 0) : ‚àÉ x ‚àà s, ‚àÄ t ‚àà ùìù[s] x, 0 < m t := by
  contrapose! hs
  simp only [nonpos_iff_eq_zero] at hs
  exact m.null_of_locally_null s hs
#align measure_theory.outer_measure.exists_mem_forall_mem_nhds_within_pos MeasureTheory.OuterMeasure.exists_mem_forall_mem_nhds_within_pos

/-- If `s : Œπ ‚Üí Set Œ±` is a sequence of sets, `S = ‚ãÉ n, s n`, and `m (S \ s n)` tends to zero along
some nontrivial filter (usually `atTop` on `Œπ = ‚Ñï`), then `m S = ‚®Ü n, m (s n)`. -/
theorem iUnion_of_tendsto_zero {Œπ} (m : OuterMeasure Œ±) {s : Œπ ‚Üí Set Œ±} (l : Filter Œπ) [NeBot l]
    (h0 : Tendsto (fun k => m ((‚ãÉ n, s n) \ s k)) l (ùìù 0)) : m (‚ãÉ n, s n) = ‚®Ü n, m (s n) := by
  set S := ‚ãÉ n, s n
  set M := ‚®Ü n, m (s n)
  have hsS : ‚àÄ {k}, s k ‚äÜ S := fun {k} => subset_iUnion _ _
  refine' le_antisymm _ (iSup_le fun n => m.mono hsS)
  have A : ‚àÄ k, m S ‚â§ M + m (S \ s k) := fun k =>
    calc
      m S = m (s k ‚à™ S \ s k) := by rw [union_diff_self, union_eq_self_of_subset_left hsS]
      _ ‚â§ m (s k) + m (S \ s k) := m.union _ _
      _ ‚â§ M + m (S \ s k) := add_le_add_right (le_iSup (m.measureOf ‚àò s) k) _
  have B : Tendsto (fun k => M + m (S \ s k)) l (ùìù (M + 0)) := tendsto_const_nhds.add h0
  rw [add_zero] at B
  exact ge_of_tendsto' B A
#align measure_theory.outer_measure.Union_of_tendsto_zero MeasureTheory.OuterMeasure.iUnion_of_tendsto_zero

/-- If `s : ‚Ñï ‚Üí Set Œ±` is a monotone sequence of sets such that `‚àë' k, m (s (k + 1) \ s k) ‚â† ‚àû`,
then `m (‚ãÉ n, s n) = ‚®Ü n, m (s n)`. -/
theorem iUnion_nat_of_monotone_of_tsum_ne_top (m : OuterMeasure Œ±) {s : ‚Ñï ‚Üí Set Œ±}
    (h_mono : ‚àÄ n, s n ‚äÜ s (n + 1)) (h0 : (‚àë' k, m (s (k + 1) \ s k)) ‚â† ‚àû) :
    m (‚ãÉ n, s n) = ‚®Ü n, m (s n) := by
  refine' m.iUnion_of_tendsto_zero atTop _
  refine' tendsto_nhds_bot_mono' (ENNReal.tendsto_sum_nat_add _ h0) fun n => _
  refine' (m.mono _).trans (m.iUnion _)
  -- Current goal: `(‚ãÉ k, s k) \ s n ‚äÜ ‚ãÉ k, s (k + n + 1) \ s (k + n)`
  have h' : Monotone s := @monotone_nat_of_le_succ (Set Œ±) _ _ h_mono
  simp only [diff_subset_iff, iUnion_subset_iff]
  intro i x hx
  have : ‚àÉi, x ‚àà s i := by exists i
  rcases Nat.findX this with ‚ü®j, hj, hlt‚ü©
  clear hx i
  rcases le_or_lt j n with hjn | hnj
  ¬∑ exact Or.inl (h' hjn hj)
  have : j - (n + 1) + n + 1 = j := by omega
  refine' Or.inr (mem_iUnion.2 ‚ü®j - (n + 1), _, hlt _ _‚ü©)
  ¬∑ rwa [this]
  ¬∑ rw [‚Üê Nat.succ_le_iff, Nat.succ_eq_add_one, this]
#align measure_theory.outer_measure.Union_nat_of_monotone_of_tsum_ne_top MeasureTheory.OuterMeasure.iUnion_nat_of_monotone_of_tsum_ne_top

theorem le_inter_add_diff {m : OuterMeasure Œ±} {t : Set Œ±} (s : Set Œ±) :
    m t ‚â§ m (t ‚à© s) + m (t \ s) := by
  convert m.union _ _
  rw [inter_union_diff t s]
#align measure_theory.outer_measure.le_inter_add_diff MeasureTheory.OuterMeasure.le_inter_add_diff

theorem diff_null (m : OuterMeasure Œ±) (s : Set Œ±) {t : Set Œ±} (ht : m t = 0) :
    m (s \ t) = m s := by
  refine' le_antisymm (m.mono <| diff_subset _ _) _
  calc
    m s ‚â§ m (s ‚à© t) + m (s \ t) := le_inter_add_diff _
    _ ‚â§ m t + m (s \ t) := add_le_add_right (m.mono <| inter_subset_right _ _) _
    _ = m (s \ t) := by rw [ht, zero_add]
#align measure_theory.outer_measure.diff_null MeasureTheory.OuterMeasure.diff_null

theorem union_null (m : OuterMeasure Œ±) {s‚ÇÅ s‚ÇÇ : Set Œ±} (h‚ÇÅ : m s‚ÇÅ = 0) (h‚ÇÇ : m s‚ÇÇ = 0) :
    m (s‚ÇÅ ‚à™ s‚ÇÇ) = 0 := by simpa [h‚ÇÅ, h‚ÇÇ] using m.union s‚ÇÅ s‚ÇÇ
#align measure_theory.outer_measure.union_null MeasureTheory.OuterMeasure.union_null

theorem coe_fn_injective : Injective fun (Œº : OuterMeasure Œ±) (s : Set Œ±) => Œº s :=
  DFunLike.coe_injective
#align measure_theory.outer_measure.coe_fn_injective MeasureTheory.OuterMeasure.coe_fn_injective

@[ext]
theorem ext {Œº‚ÇÅ Œº‚ÇÇ : OuterMeasure Œ±} (h : ‚àÄ s, Œº‚ÇÅ s = Œº‚ÇÇ s) : Œº‚ÇÅ = Œº‚ÇÇ :=
  coe_fn_injective <| funext h
#align measure_theory.outer_measure.ext MeasureTheory.OuterMeasure.ext

/-- A version of `MeasureTheory.OuterMeasure.ext` that assumes `Œº‚ÇÅ s = Œº‚ÇÇ s` on all *nonempty*
sets `s`, and gets `Œº‚ÇÅ ‚àÖ = Œº‚ÇÇ ‚àÖ` from `MeasureTheory.OuterMeasure.empty'`. -/
theorem ext_nonempty {Œº‚ÇÅ Œº‚ÇÇ : OuterMeasure Œ±} (h : ‚àÄ s : Set Œ±, s.Nonempty ‚Üí Œº‚ÇÅ s = Œº‚ÇÇ s) :
    Œº‚ÇÅ = Œº‚ÇÇ :=
  ext fun s => s.eq_empty_or_nonempty.elim (fun he => by rw [he, empty', empty']) (h s)
#align measure_theory.outer_measure.ext_nonempty MeasureTheory.OuterMeasure.ext_nonempty
