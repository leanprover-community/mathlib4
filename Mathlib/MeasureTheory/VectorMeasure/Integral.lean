/-
Copyright (c) 2025 Yoh Tanimoto. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yoh Tanimoto
-/
import Mathlib.Analysis.InnerProductSpace.Basic
import Mathlib.MeasureTheory.Integral.SetToL1
import Mathlib.MeasureTheory.VectorMeasure.Variation.Lemmas

/-!
# Integral of vector-valued function against vector measure

We extend the definition of the Bochner integral (of vector-valued function against `‚Ñù‚â•0‚àû`-valued
measure) to vector measures through a bilinear pairing.
Let `E`, `F` be normed vector spaces, and `G` be a Banach space (complete normed vector space).
We fix a continuous linear pairing `B : E ‚ÜíL[‚Ñù] F ‚ÜíL[‚Ñù] ‚Üí G` and an `F`-valued vector measure `Œº`
on a measurable space `Œ±`.
The vector measure `Œº` gives the total variation measure `Œº.totalvariation.ennrealToMeasure` on `Œ±`.
For an L1 function `f : Œ± ‚Üí E` with respect to this total variation measure,
we define the `G`-valued integral, which is informally written `‚à´ B (f x) ‚àÇŒº x`.

The pairing integral is defined through the general setting `setToL1` which sends a set function to
a continuous linear map on the type of L1 functions, see the file
`Mathlib/MeasureTheory/Integral/SetToL1.lean`.

## Main definitions

The pairing integral is defined through the extension process described in the file
`Mathlib/MeasureTheory/Integral/SetToL1.lean`, which follows these steps:

1. Define the integral of the indicator of a set. This is `weightedVectorSMul B Œº s x = B x (Œº s)`.
  `weightedVectorSMul B Œº` is shown to be linear in the value `x` and `DominatedFinMeasAdditive`
  (defined in the file `Mathlib/MeasureTheory/Integral/SetToL1.lean`) with respect to the set `s`.

2. Define the structure `VectorMeasureWithPairing`, combining a pairing of two normed vector spaces
  and a vector measure.

3. Define the pairing integral on L1 functions `f` as `setToL1 (...) f`. Note that, differently
  from the definition of Bochner integral, here `setToL1` is already a continuous linear map from
  L1 functions, not from step functions.

## Note

Let be `BŒº : VectorMeasureWithPairing`.
We often consider L1 functions with respect to the total variation of `BŒº.vectorMeasure`:
* `Œ± ‚Üí‚ÇÅ[BŒº.vectorMeasure.variation.ennrealToVectorMeasure] E` : `E`-valued functions in L1 space.

-/

open ENNReal Set MeasureTheory VectorMeasure ContinuousLinearMap

namespace MeasureTheory

section weightedVectorSMul

variable {Œ± E F G ùïú : Type*} [MeasurableSpace Œ±]
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  [NormedAddCommGroup G] [NormedSpace ‚Ñù G]
  (B : E ‚ÜíL[‚Ñù] F ‚ÜíL[‚Ñù] G) (Œº : VectorMeasure Œ± F)

/-- Given a set `s`, return the continuous linear map `fun x : E => B x (Œº s)`, where the `B` is a
`G`-valued bilinear form on `E` `F` and `Œº` is an `F`-valued vector measure. The extension of that
set function through `setToL1` gives the pairing integral of L1 functions. -/
def weightedVectorSMul (s : Set Œ±) : E ‚ÜíL[‚Ñù] G where
  toFun x := B x (Œº s)
  map_add' _ _ := map_add‚ÇÇ B _ _ (Œº s)
  map_smul' _ _ := map_smul‚Çõ‚Çó‚ÇÇ B _ _ (Œº s)

@[simp]
theorem weightedVectorSMul_apply (s : Set Œ±) (x : E) : weightedVectorSMul B Œº s x = B x (Œº s) := rfl

@[simp]
theorem weightedVectorSMul_zero_measure :
    weightedVectorSMul B (0 : VectorMeasure Œ± F) = (0 : Set Œ± ‚Üí E ‚ÜíL[‚Ñù] G) := by
  ext1; simp [weightedVectorSMul]; rfl

@[simp]
theorem weightedVectorSMul_zero_pairing : weightedVectorSMul 0 Œº = (0 : Set Œ± ‚Üí E ‚ÜíL[‚Ñù] G) := rfl

@[simp]
theorem weightedVectorSMul_empty :
    weightedVectorSMul B Œº ‚àÖ = (0 : E ‚ÜíL[‚Ñù] G) := by ext1 x; rw [weightedVectorSMul_apply]; simp

theorem weightedVectorSMul_add_measure (ŒΩ : VectorMeasure Œ± F) :
    weightedVectorSMul B (Œº + ŒΩ) = weightedVectorSMul B Œº + weightedVectorSMul B ŒΩ := by
  ext s; simp

theorem weightedVectorSMul_add_pairing (C : E ‚ÜíL[‚Ñù] F ‚ÜíL[‚Ñù] G) :
    weightedVectorSMul (B + C) Œº = weightedVectorSMul B Œº + weightedVectorSMul C Œº := by
  ext s; simp

theorem weightedVectorSMul_neg_measure : weightedVectorSMul B (- Œº) = - weightedVectorSMul B Œº := by
  ext s; simp

theorem weightedVectorSMul_neg_pairing : weightedVectorSMul (- B) Œº = - weightedVectorSMul B Œº := by
  ext s; simp

theorem weightedVectorSMul_sub_measure (ŒΩ : VectorMeasure Œ± F) :
    weightedVectorSMul B (Œº - ŒΩ) = weightedVectorSMul B Œº - weightedVectorSMul B ŒΩ := by
  ext s; simp

theorem weightedVectorSMul_sub_pairing (C : E ‚ÜíL[‚Ñù] F ‚ÜíL[‚Ñù] G) :
    weightedVectorSMul (B - C) Œº = weightedVectorSMul B Œº - weightedVectorSMul C Œº := by
  ext s; simp

theorem weightedVectorSMul_smul_measure (c : ‚Ñù) :
    weightedVectorSMul B (c ‚Ä¢ Œº)  = c ‚Ä¢ weightedVectorSMul B Œº := by
  ext s; simp

theorem weightedVectorSMul_smul_pairing (c : ‚Ñù) :
    weightedVectorSMul (c ‚Ä¢ B) Œº  = c ‚Ä¢ weightedVectorSMul B Œº := by
  ext s; simp

theorem weightedVectorSMul_congr (s t : Set Œ±) (hst : Œº s = Œº t) :
    (weightedVectorSMul B Œº s : E ‚ÜíL[‚Ñù] G) = weightedVectorSMul B Œº t := by
  ext1 x; simp_rw [weightedVectorSMul_apply]; congr

theorem weightedVectorSMul_null {s : Set Œ±} (h_zero : Œº s = 0) :
    (weightedVectorSMul B Œº s : E ‚ÜíL[‚Ñù] G) = 0 := by
  ext1 x; rw [weightedVectorSMul_apply, h_zero]; simp

theorem weightedVectorSMul_union (s t : Set Œ±) (hs : MeasurableSet s) (ht : MeasurableSet t)
    (hdisj : Disjoint s t) :
    (weightedVectorSMul B Œº (s ‚à™ t) : E ‚ÜíL[‚Ñù] G)
    = weightedVectorSMul B Œº s + weightedVectorSMul B Œº t := by
  ext x
  simp only [weightedVectorSMul_apply, ContinuousLinearMap.add_apply]
  rw [‚Üê (B x).map_add]
  congr
  exact of_union hdisj hs ht

theorem norm_weightedVectorSMul_le (s : Set Œ±) :
    ‚Äñ(weightedVectorSMul B Œº s : E ‚ÜíL[‚Ñù] G)‚Äñ ‚â§ ‚ÄñB‚Äñ * ‚ÄñŒº s‚Äñ := by
  rw [ContinuousLinearMap.opNorm_le_iff (mul_nonneg (norm_nonneg B) (norm_nonneg (Œº s)))]
  intro x
  simp only [weightedVectorSMul_apply]
  apply le_trans (le_opNorm (B x) (Œº s))
  rw [mul_assoc, mul_comm _ ‚Äñx‚Äñ, ‚Üê mul_assoc]
  gcongr
  exact le_opNorm B x

theorem dominatedFinMeasAdditive_weightedVectorSMul :
    DominatedFinMeasAdditive (Œº.variation.ennrealToMeasure)
    (weightedVectorSMul B Œº : Set Œ± ‚Üí E ‚ÜíL[‚Ñù] G) ‚ÄñB‚Äñ := by
  refine ‚ü®fun s t hs ht _ _ hdisj => weightedVectorSMul_union B Œº s t hs ht hdisj, ?_‚ü©
  intro s hs hsf
  apply (fun s _ _ => (norm_weightedVectorSMul_le B Œº s).trans)
  gcongr
  rw [Measure.real, ‚Üê ofReal_le_iff_le_toReal (LT.lt.ne_top hsf), ennrealToMeasure_apply hs,
    ofReal_norm]
  exact norm_measure_le_variation Œº s

theorem dominatedFinMeasAdditive_weightedVectorSMul_neg :
    DominatedFinMeasAdditive (Œº.variation.ennrealToMeasure)
    (weightedVectorSMul B (-Œº) : Set Œ± ‚Üí E ‚ÜíL[‚Ñù] G) ‚ÄñB‚Äñ := by
  have : DominatedFinMeasAdditive Œº.variation.ennrealToMeasure (weightedVectorSMul B (-Œº)) ‚ÄñB‚Äñ
    = DominatedFinMeasAdditive (-Œº).variation.ennrealToMeasure (weightedVectorSMul B (-Œº)) ‚ÄñB‚Äñ := by
    congr 2; exact (variation_neg _).symm
  simp [this]
  exact dominatedFinMeasAdditive_weightedVectorSMul B (-Œº)

end weightedVectorSMul

open SimpleFunc L1

section

variable (Œ± E F G : Type*) [MeasurableSpace Œ±]
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  [NormedAddCommGroup G] [NormedSpace ‚Ñù G] [CompleteSpace G]

/-- The structure containing a continuous linear pairing and a vector measure,
enabling the dot notation `VectorMeasureWithParing.integral`. -/
structure VectorMeasureWithPairing where
  /-- A continuous linear pairing from `E` `F` into a Banach space `G`. -/
  pairing : E ‚ÜíL[‚Ñù] F ‚ÜíL[‚Ñù] G
  /-- An `F`-valued vector measure. -/
  vectorMeasure : VectorMeasure Œ± F

end

namespace VectorMeasureWithPairing

variable {Œ± E F G : Type*} [MeasurableSpace Œ±]
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  [NormedAddCommGroup G] [NormedSpace ‚Ñù G]
  (BŒº : VectorMeasureWithPairing Œ± E F G)

noncomputable def restrict (s : Set Œ±) : VectorMeasureWithPairing Œ± E F G :=
  VectorMeasureWithPairing.mk BŒº.pairing (BŒº.vectorMeasure.restrict s)

@[simp]
theorem restrict_univ : BŒº.restrict univ = BŒº := by simp [restrict]

variable [CompleteSpace G]

/-- The pairing integral in L1 space as a continuous linear map. -/
noncomputable def integral : (Œ± ‚Üí‚ÇÅ[BŒº.vectorMeasure.variation.ennrealToMeasure] E) ‚ÜíL[‚Ñù] G :=
    setToL1 (dominatedFinMeasAdditive_weightedVectorSMul BŒº.pairing BŒº.vectorMeasure)

@[integral_simps]
theorem integral_add (f g : Œ± ‚Üí‚ÇÅ[BŒº.vectorMeasure.variation.ennrealToMeasure] E) :
    BŒº.integral (f + g) = BŒº.integral f + BŒº.integral g := by
  simp [integral]

@[integral_simps]
theorem integral_neg (f : Œ± ‚Üí‚ÇÅ[BŒº.vectorMeasure.variation.ennrealToMeasure] E) :
    BŒº.integral (-f) = -BŒº.integral f := by
  simp [integral]

@[integral_simps]
theorem integral_sub (f g : Œ± ‚Üí‚ÇÅ[BŒº.vectorMeasure.variation.ennrealToMeasure] E) :
    BŒº.integral (f - g) = BŒº.integral f - BŒº.integral g := by
  simp [integral]

@[integral_simps]
theorem integral_smul (c : ‚Ñù) (f : Œ± ‚Üí‚ÇÅ[BŒº.vectorMeasure.variation.ennrealToMeasure] E) :
    BŒº.integral (c ‚Ä¢ f) = c ‚Ä¢ BŒº.integral f := by
  simp [integral]

@[simp]
lemma integral_apply (f : (Œ± ‚Üí‚ÇÅ[BŒº.vectorMeasure.variation.ennrealToMeasure] E)) :
    BŒº.integral f
    = setToL1 (dominatedFinMeasAdditive_weightedVectorSMul BŒº.pairing BŒº.vectorMeasure) f := rfl

theorem integral_le (f : (Œ± ‚Üí‚ÇÅ[BŒº.vectorMeasure.variation.ennrealToMeasure] E)) :
    ‚ÄñBŒº.integral f‚Äñ ‚â§ ‚ÄñBŒº.pairing‚Äñ * ‚Äñf‚Äñ:= by
  simp only [integral_apply]
  exact norm_setToL1_le_mul_norm
    (dominatedFinMeasAdditive_weightedVectorSMul BŒº.pairing BŒº.vectorMeasure)
    (norm_nonneg BŒº.pairing) f

theorem norm_integral_le_norm_pairing : ‚ÄñBŒº.integral‚Äñ ‚â§ ‚ÄñBŒº.pairing‚Äñ :=
  (ContinuousLinearMap.opNorm_le_iff (norm_nonneg BŒº.pairing)).mpr
  (integral_le BŒº)

theorem nnnorm_integral_le_nnNnorm : ‚ÄñBŒº.integral‚Äñ‚Çä ‚â§ ‚ÄñBŒº.pairing‚Äñ‚Çä :=
  norm_integral_le_norm_pairing BŒº

theorem nnnorm_integral_le (f : Œ± ‚Üí‚ÇÅ[BŒº.vectorMeasure.variation.ennrealToMeasure] E) :
    ‚ÄñBŒº.integral f‚Äñ‚Çä ‚â§ ‚ÄñBŒº.pairing‚Äñ‚Çä * ‚Äñf‚Äñ‚Çä := integral_le BŒº f

@[continuity]
theorem continuous_integral :
    Continuous fun f : Œ± ‚Üí‚ÇÅ[BŒº.vectorMeasure.variation.ennrealToMeasure] E =>
    BŒº.integral f :=
  (setToL1 (dominatedFinMeasAdditive_weightedVectorSMul BŒº.pairing BŒº.vectorMeasure)).continuous

end VectorMeasureWithPairing

section ScalarSMul

/-- The embedding of `‚Ñù` to the multiple of the identity map as an `F`-valued pairing of
`‚Ñù` and `F`. -/
def scalarSMulCLM (F : Type*) [NormedAddCommGroup F] [NormedSpace ‚Ñù F] : ‚Ñù ‚ÜíL[‚Ñù] F ‚ÜíL[‚Ñù] F where
  toFun c := c ‚Ä¢ (id ‚Ñù F)
  map_add' _ _ := Module.add_smul _ _ (id ‚Ñù F)
  map_smul' _ _ := IsScalarTower.smul_assoc _ _ (id ‚Ñù F)

end ScalarSMul

namespace VectorMeasure

variable {Œ± F : Type*} [MeasurableSpace Œ±]
  [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [CompleteSpace F]
  (Œº : VectorMeasure Œ± F)

/-- For an `F`-valued vector measure `Œº`, `Œº.withPairing` is a structure `VectorMeasureWithPairing`
where `pairing` is just the `‚Ñù`-multiplication, so that `Œº.withPairing.integral` is the
`F`-valued integral of `Œº`. -/
def withPairing : VectorMeasureWithPairing Œ± ‚Ñù F F where
  pairing := scalarSMulCLM F
  vectorMeasure := Œº

/-- The `F`-valued integral with respect to an `F`-valued vector measure as a continuous linear map,
defined as the pairing integral where the pairing is `scalarSMulCLM`. -/
noncomputable def integral : (Œ± ‚Üí‚ÇÅ[Œº.variation.ennrealToMeasure] ‚Ñù) ‚ÜíL[‚Ñù] F :=
    Œº.withPairing.integral

end VectorMeasure

end MeasureTheory
