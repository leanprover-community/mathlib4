/-
Copyright (c) 2021 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.MeasureTheory.Covering.VitaliFamily
import Mathlib.MeasureTheory.Measure.Regular
import Mathlib.MeasureTheory.Function.AEMeasurableOrder
import Mathlib.MeasureTheory.Integral.Lebesgue
import Mathlib.MeasureTheory.Integral.Average
import Mathlib.MeasureTheory.Decomposition.Lebesgue

#align_import measure_theory.covering.differentiation from "leanprover-community/mathlib"@"57ac39bd365c2f80589a700f9fbb664d3a1a30c2"

/-!
# Differentiation of measures

On a second countable metric space with a measure `Œº`, consider a Vitali family (i.e., for each `x`
one has a family of sets shrinking to `x`, with a good behavior with respect to covering theorems).
Consider also another measure `œÅ`. Then, for almost every `x`, the ratio `œÅ a / Œº a` converges when
`a` shrinks to `x` along the Vitali family, towards the Radon-Nikodym derivative of `œÅ` with
respect to `Œº`. This is the main theorem on differentiation of measures.

This theorem is proved in this file, under the name `VitaliFamily.ae_tendsto_rnDeriv`. Note that,
almost surely, `Œº a` is eventually positive and finite (see
`VitaliFamily.ae_eventually_measure_pos` and `VitaliFamily.eventually_measure_lt_top`), so the
ratio really makes sense.

For concrete applications, one needs concrete instances of Vitali families, as provided for instance
by `Besicovitch.vitaliFamily` (for balls) or by `Vitali.vitaliFamily` (for doubling measures).

Specific applications to Lebesgue density points and the Lebesgue differentiation theorem are also
derived:
* `VitaliFamily.ae_tendsto_measure_inter_div` states that, for almost every point `x ‚àà s`,
  then `Œº (s ‚à© a) / Œº a` tends to `1` as `a` shrinks to `x` along a Vitali family.
* `VitaliFamily.ae_tendsto_average_norm_sub` states that, for almost every point `x`, then the
  average of `y ‚Ü¶ ‚Äñf y - f x‚Äñ` on `a` tends to `0` as `a` shrinks to `x` along a Vitali family.

## Sketch of proof

Let `v` be a Vitali family for `Œº`. Assume for simplicity that `œÅ` is absolutely continuous with
respect to `Œº`, as the case of a singular measure is easier.

It is easy to see that a set `s` on which `liminf œÅ a / Œº a < q` satisfies `œÅ s ‚â§ q * Œº s`, by using
a disjoint subcovering provided by the definition of Vitali families. Similarly for the limsup.
It follows that a set on which `œÅ a / Œº a` oscillates has measure `0`, and therefore that
`œÅ a / Œº a` converges almost surely (`VitaliFamily.ae_tendsto_div`). Moreover, on a set where the
limit is close to a constant `c`, one gets `œÅ s ‚àº c Œº s`, using again a covering lemma as above.
It follows that `œÅ` is equal to `Œº.withDensity (v.limRatio œÅ x)`, where `v.limRatio œÅ x` is the
limit of `œÅ a / Œº a` at `x` (which is well defined almost everywhere). By uniqueness of the
Radon-Nikodym derivative, one gets `v.limRatio œÅ x = œÅ.rnDeriv Œº x` almost everywhere, completing
the proof.

There is a difficulty in this sketch: this argument works well when `v.limRatio œÅ` is measurable,
but there is no guarantee that this is the case, especially if one doesn't make further assumptions
on the Vitali family. We use an indirect argument to show that `v.limRatio œÅ` is always
almost everywhere measurable, again based on the disjoint subcovering argument
(see `VitaliFamily.exists_measurable_supersets_limRatio`), and then proceed as sketched above
but replacing `v.limRatio œÅ` by a measurable version called `v.limRatioMeas œÅ`.

## Counterexample

The standing assumption in this file is that spaces are second countable. Without this assumption,
measures may be zero locally but nonzero globally, which is not compatible with differentiation
theory (which deduces global information from local one). Here is an example displaying this
behavior.

Define a measure `Œº` by `Œº s = 0` if `s` is covered by countably many balls of radius `1`,
and `Œº s = ‚àû` otherwise. This is indeed a countably additive measure, which is moreover
locally finite and doubling at small scales. It vanishes on every ball of radius `1`, so all the
quantities in differentiation theory (defined as ratios of measures as the radius tends to zero)
make no sense. However, the measure is not globally zero if the space is big enough.

## References

* [Herbert Federer, Geometric Measure Theory, Chapter 2.9][Federer1996]
-/

open MeasureTheory Metric Set Filter TopologicalSpace MeasureTheory.Measure

open scoped Filter ENNReal MeasureTheory NNReal Topology

variable {Œ± : Type*} [MetricSpace Œ±] {m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} (v : VitaliFamily Œº)
  {E : Type*} [NormedAddCommGroup E]

namespace VitaliFamily

/-- The limit along a Vitali family of `œÅ a / Œº a` where it makes sense, and garbage otherwise.
Do *not* use this definition: it is only a temporary device to show that this ratio tends almost
everywhere to the Radon-Nikodym derivative. -/
noncomputable def limRatio (œÅ : Measure Œ±) (x : Œ±) : ‚Ñù‚â•0‚àû :=
  limUnder (v.filterAt x) fun a => œÅ a / Œº a
#align vitali_family.lim_ratio VitaliFamily.limRatio

/-- For almost every point `x`, sufficiently small sets in a Vitali family around `x` have positive
measure. (This is a nontrivial result, following from the covering property of Vitali families). -/
theorem ae_eventually_measure_pos [SecondCountableTopology Œ±] :
    ‚àÄ·µê x ‚àÇŒº, ‚àÄ·∂† a in v.filterAt x, 0 < Œº a := by
  set s := {x | ¬¨‚àÄ·∂† a in v.filterAt x, 0 < Œº a} with hs
  simp (config := { zeta := false }) only [not_lt, not_eventually, nonpos_iff_eq_zero] at hs
  change Œº s = 0
  let f : Œ± ‚Üí Set (Set Œ±) := fun _ => {a | Œº a = 0}
  have h : v.FineSubfamilyOn f s := by
    intro x hx Œµ Œµpos
    rw [hs] at hx
    simp only [frequently_filterAt_iff, exists_prop, gt_iff_lt, mem_setOf_eq] at hx
    rcases hx Œµ Œµpos with ‚ü®a, a_sets, ax, Œºa‚ü©
    exact ‚ü®a, ‚ü®a_sets, Œºa‚ü©, ax‚ü©
  refine' le_antisymm _ bot_le
  calc
    Œº s ‚â§ ‚àë' x : h.index, Œº (h.covering x) := h.measure_le_tsum
    _ = ‚àë' x : h.index, 0 := by congr; ext1 x; exact h.covering_mem x.2
    _ = 0 := by simp only [tsum_zero, add_zero]
#align vitali_family.ae_eventually_measure_pos VitaliFamily.ae_eventually_measure_pos

/-- For every point `x`, sufficiently small sets in a Vitali family around `x` have finite measure.
(This is a trivial result, following from the fact that the measure is locally finite). -/
theorem eventually_measure_lt_top [IsLocallyFiniteMeasure Œº] (x : Œ±) :
    ‚àÄ·∂† a in v.filterAt x, Œº a < ‚àû := by
  obtain ‚ü®Œµ, Œµpos, ŒºŒµ‚ü© : ‚àÉ (Œµ : ‚Ñù), 0 < Œµ ‚àß Œº (closedBall x Œµ) < ‚àû :=
    (Œº.finiteAt_nhds x).exists_mem_basis nhds_basis_closedBall
  exact v.eventually_filterAt_iff.2 ‚ü®Œµ, Œµpos, fun a _ haŒµ => (measure_mono haŒµ).trans_lt ŒºŒµ‚ü©
#align vitali_family.eventually_measure_lt_top VitaliFamily.eventually_measure_lt_top

/-- If two measures `œÅ` and `ŒΩ` have, at every point of a set `s`, arbitrarily small sets in a
Vitali family satisfying `œÅ a ‚â§ ŒΩ a`, then `œÅ s ‚â§ ŒΩ s` if `œÅ ‚â™ Œº`.-/
theorem measure_le_of_frequently_le [SecondCountableTopology Œ±] [BorelSpace Œ±] {œÅ : Measure Œ±}
    (ŒΩ : Measure Œ±) [IsLocallyFiniteMeasure ŒΩ] (hœÅ : œÅ ‚â™ Œº) (s : Set Œ±)
    (hs : ‚àÄ x ‚àà s, ‚àÉ·∂† a in v.filterAt x, œÅ a ‚â§ ŒΩ a) : œÅ s ‚â§ ŒΩ s := by
  -- this follows from a covering argument using the sets satisfying `œÅ a ‚â§ ŒΩ a`.
  apply ENNReal.le_of_forall_pos_le_add fun Œµ Œµpos _ => ?_
  obtain ‚ü®U, sU, U_open, ŒΩU‚ü© : ‚àÉ (U : Set Œ±), s ‚äÜ U ‚àß IsOpen U ‚àß ŒΩ U ‚â§ ŒΩ s + Œµ :=
    exists_isOpen_le_add s ŒΩ (ENNReal.coe_pos.2 Œµpos).ne'
  let f : Œ± ‚Üí Set (Set Œ±) := fun _ => {a | œÅ a ‚â§ ŒΩ a ‚àß a ‚äÜ U}
  have h : v.FineSubfamilyOn f s := by
    apply v.fineSubfamilyOn_of_frequently f s fun x hx => ?_
    have :=
      (hs x hx).and_eventually
        ((v.eventually_filterAt_mem_setsAt x).and
          (v.eventually_filterAt_subset_of_nhds (U_open.mem_nhds (sU hx))))
    apply Frequently.mono this
    rintro a ‚ü®œÅa, _, aU‚ü©
    exact ‚ü®œÅa, aU‚ü©
  haveI : Encodable h.index := h.index_countable.toEncodable
  calc
    œÅ s ‚â§ ‚àë' x : h.index, œÅ (h.covering x) := h.measure_le_tsum_of_absolutelyContinuous hœÅ
    _ ‚â§ ‚àë' x : h.index, ŒΩ (h.covering x) := (ENNReal.tsum_le_tsum fun x => (h.covering_mem x.2).1)
    _ = ŒΩ (‚ãÉ x : h.index, h.covering x) := by
      rw [measure_iUnion h.covering_disjoint_subtype fun i => h.measurableSet_u i.2]
    _ ‚â§ ŒΩ U := (measure_mono (iUnion_subset fun i => (h.covering_mem i.2).2))
    _ ‚â§ ŒΩ s + Œµ := ŒΩU
#align vitali_family.measure_le_of_frequently_le VitaliFamily.measure_le_of_frequently_le

section

variable [SecondCountableTopology Œ±] [BorelSpace Œ±] [IsLocallyFiniteMeasure Œº] {œÅ : Measure Œ±}
  [IsLocallyFiniteMeasure œÅ]

/-- If a measure `œÅ` is singular with respect to `Œº`, then for `Œº` almost every `x`, the ratio
`œÅ a / Œº a` tends to zero when `a` shrinks to `x` along the Vitali family. This makes sense
as `Œº a` is eventually positive by `ae_eventually_measure_pos`. -/
theorem ae_eventually_measure_zero_of_singular (hœÅ : œÅ ‚üÇ‚Çò Œº) :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => œÅ a / Œº a) (v.filterAt x) (ùìù 0) := by
  have A : ‚àÄ Œµ > (0 : ‚Ñù‚â•0), ‚àÄ·µê x ‚àÇŒº, ‚àÄ·∂† a in v.filterAt x, œÅ a < Œµ * Œº a := by
    intro Œµ Œµpos
    set s := {x | ¬¨‚àÄ·∂† a in v.filterAt x, œÅ a < Œµ * Œº a} with hs
    change Œº s = 0
    obtain ‚ü®o, _, œÅo, Œºo‚ü© : ‚àÉ o : Set Œ±, MeasurableSet o ‚àß œÅ o = 0 ‚àß Œº o·∂ú = 0 := hœÅ
    apply le_antisymm _ bot_le
    calc
      Œº s ‚â§ Œº (s ‚à© o ‚à™ o·∂ú) := by
        conv_lhs => rw [‚Üê inter_union_compl s o]
        gcongr
        apply inter_subset_right
      _ ‚â§ Œº (s ‚à© o) + Œº o·∂ú := (measure_union_le _ _)
      _ = Œº (s ‚à© o) := by rw [Œºo, add_zero]
      _ = (Œµ : ‚Ñù‚â•0‚àû)‚Åª¬π * (Œµ ‚Ä¢ Œº) (s ‚à© o) := by
        simp only [coe_nnreal_smul_apply, ‚Üê mul_assoc, mul_comm _ (Œµ : ‚Ñù‚â•0‚àû)]
        rw [ENNReal.mul_inv_cancel (ENNReal.coe_pos.2 Œµpos).ne' ENNReal.coe_ne_top, one_mul]
      _ ‚â§ (Œµ : ‚Ñù‚â•0‚àû)‚Åª¬π * œÅ (s ‚à© o) := by
        gcongr
        refine' v.measure_le_of_frequently_le œÅ ((Measure.AbsolutelyContinuous.refl Œº).smul Œµ) _ _
        intro x hx
        rw [hs] at hx
        simp only [mem_inter_iff, not_lt, not_eventually, mem_setOf_eq] at hx
        exact hx.1
      _ ‚â§ (Œµ : ‚Ñù‚â•0‚àû)‚Åª¬π * œÅ o := by gcongr; apply inter_subset_right
      _ = 0 := by rw [œÅo, mul_zero]
  obtain ‚ü®u, _, u_pos, u_lim‚ü© :
    ‚àÉ u : ‚Ñï ‚Üí ‚Ñù‚â•0, StrictAnti u ‚àß (‚àÄ n : ‚Ñï, 0 < u n) ‚àß Tendsto u atTop (ùìù 0) :=
    exists_seq_strictAnti_tendsto (0 : ‚Ñù‚â•0)
  have B : ‚àÄ·µê x ‚àÇŒº, ‚àÄ n, ‚àÄ·∂† a in v.filterAt x, œÅ a < u n * Œº a :=
    ae_all_iff.2 fun n => A (u n) (u_pos n)
  filter_upwards [B, v.ae_eventually_measure_pos]
  intro x hx h'x
  refine' tendsto_order.2 ‚ü®fun z hz => (ENNReal.not_lt_zero hz).elim, fun z hz => _‚ü©
  obtain ‚ü®w, w_pos, w_lt‚ü© : ‚àÉ w : ‚Ñù‚â•0, (0 : ‚Ñù‚â•0‚àû) < w ‚àß (w : ‚Ñù‚â•0‚àû) < z :=
    ENNReal.lt_iff_exists_nnreal_btwn.1 hz
  obtain ‚ü®n, hn‚ü© : ‚àÉ n, u n < w := ((tendsto_order.1 u_lim).2 w (ENNReal.coe_pos.1 w_pos)).exists
  filter_upwards [hx n, h'x, v.eventually_measure_lt_top x]
  intro a ha Œºa_pos Œºa_lt_top
  rw [ENNReal.div_lt_iff (Or.inl Œºa_pos.ne') (Or.inl Œºa_lt_top.ne)]
  exact ha.trans_le (mul_le_mul_right' ((ENNReal.coe_le_coe.2 hn.le).trans w_lt.le) _)
#align vitali_family.ae_eventually_measure_zero_of_singular VitaliFamily.ae_eventually_measure_zero_of_singular

section AbsolutelyContinuous

variable (hœÅ : œÅ ‚â™ Œº)

/-- A set of points `s` satisfying both `œÅ a ‚â§ c * Œº a` and `œÅ a ‚â• d * Œº a` at arbitrarily small
sets in a Vitali family has measure `0` if `c < d`. Indeed, the first inequality should imply
that `œÅ s ‚â§ c * Œº s`, and the second one that `œÅ s ‚â• d * Œº s`, a contradiction if `0 < Œº s`. -/
theorem null_of_frequently_le_of_frequently_ge {c d : ‚Ñù‚â•0} (hcd : c < d) (s : Set Œ±)
    (hc : ‚àÄ x ‚àà s, ‚àÉ·∂† a in v.filterAt x, œÅ a ‚â§ c * Œº a)
    (hd : ‚àÄ x ‚àà s, ‚àÉ·∂† a in v.filterAt x, (d : ‚Ñù‚â•0‚àû) * Œº a ‚â§ œÅ a) : Œº s = 0 := by
  apply null_of_locally_null s fun x _ => ?_
  obtain ‚ü®o, xo, o_open, Œºo‚ü© : ‚àÉ o : Set Œ±, x ‚àà o ‚àß IsOpen o ‚àß Œº o < ‚àû :=
    Measure.exists_isOpen_measure_lt_top Œº x
  refine' ‚ü®s ‚à© o, inter_mem_nhdsWithin _ (o_open.mem_nhds xo), _‚ü©
  let s' := s ‚à© o
  by_contra h
  apply lt_irrefl (œÅ s')
  calc
    œÅ s' ‚â§ c * Œº s' := v.measure_le_of_frequently_le (c ‚Ä¢ Œº) hœÅ s' fun x hx => hc x hx.1
    _ < d * Œº s' := by
      apply (ENNReal.mul_lt_mul_right h _).2 (ENNReal.coe_lt_coe.2 hcd)
      exact (lt_of_le_of_lt (measure_mono (inter_subset_right _ _)) Œºo).ne
    _ ‚â§ œÅ s' :=
      v.measure_le_of_frequently_le œÅ ((Measure.AbsolutelyContinuous.refl Œº).smul d) s' fun x hx =>
        hd x hx.1
#align vitali_family.null_of_frequently_le_of_frequently_ge VitaliFamily.null_of_frequently_le_of_frequently_ge

/-- If `œÅ` is absolutely continuous with respect to `Œº`, then for almost every `x`,
the ratio `œÅ a / Œº a` converges as `a` shrinks to `x` along a Vitali family for `Œº`. -/
theorem ae_tendsto_div : ‚àÄ·µê x ‚àÇŒº, ‚àÉ c, Tendsto (fun a => œÅ a / Œº a) (v.filterAt x) (ùìù c) := by
  obtain ‚ü®w, w_count, w_dense, _, w_top‚ü© :
    ‚àÉ w : Set ‚Ñù‚â•0‚àû, w.Countable ‚àß Dense w ‚àß 0 ‚àâ w ‚àß ‚àû ‚àâ w :=
    ENNReal.exists_countable_dense_no_zero_top
  have I : ‚àÄ x ‚àà w, x ‚â† ‚àû := fun x xs hx => w_top (hx ‚ñ∏ xs)
  have A : ‚àÄ c ‚àà w, ‚àÄ d ‚àà w, c < d ‚Üí ‚àÄ·µê x ‚àÇŒº,
      ¬¨((‚àÉ·∂† a in v.filterAt x, œÅ a / Œº a < c) ‚àß ‚àÉ·∂† a in v.filterAt x, d < œÅ a / Œº a) := by
    intro c hc d hd hcd
    lift c to ‚Ñù‚â•0 using I c hc
    lift d to ‚Ñù‚â•0 using I d hd
    apply v.null_of_frequently_le_of_frequently_ge hœÅ (ENNReal.coe_lt_coe.1 hcd)
    ¬∑ simp only [and_imp, exists_prop, not_frequently, not_and, not_lt, not_le, not_eventually,
        mem_setOf_eq, mem_compl_iff, not_forall]
      intro x h1x _
      apply h1x.mono fun a ha => ?_
      refine' (ENNReal.div_le_iff_le_mul _ (Or.inr (bot_le.trans_lt ha).ne')).1 ha.le
      simp only [ENNReal.coe_ne_top, Ne, or_true_iff, not_false_iff]
    ¬∑ simp only [and_imp, exists_prop, not_frequently, not_and, not_lt, not_le, not_eventually,
        mem_setOf_eq, mem_compl_iff, not_forall]
      intro x _ h2x
      apply h2x.mono fun a ha => ?_
      exact ENNReal.mul_le_of_le_div ha.le
  have B : ‚àÄ·µê x ‚àÇŒº, ‚àÄ c ‚àà w, ‚àÄ d ‚àà w, c < d ‚Üí
      ¬¨((‚àÉ·∂† a in v.filterAt x, œÅ a / Œº a < c) ‚àß ‚àÉ·∂† a in v.filterAt x, d < œÅ a / Œº a) := by
    simpa only [ae_ball_iff w_count, ae_all_iff]
  filter_upwards [B]
  intro x hx
  exact tendsto_of_no_upcrossings w_dense hx
#align vitali_family.ae_tendsto_div VitaliFamily.ae_tendsto_div

theorem ae_tendsto_limRatio :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => œÅ a / Œº a) (v.filterAt x) (ùìù (v.limRatio œÅ x)) := by
  filter_upwards [v.ae_tendsto_div hœÅ]
  intro x hx
  exact tendsto_nhds_limUnder hx
#align vitali_family.ae_tendsto_lim_ratio VitaliFamily.ae_tendsto_limRatio

/-- Given two thresholds `p < q`, the sets `{x | v.limRatio œÅ x < p}`
and `{x | q < v.limRatio œÅ x}` are obviously disjoint. The key to proving that `v.limRatio œÅ` is
almost everywhere measurable is to show that these sets have measurable supersets which are also
disjoint, up to zero measure. This is the content of this lemma. -/
theorem exists_measurable_supersets_limRatio {p q : ‚Ñù‚â•0} (hpq : p < q) :
    ‚àÉ a b, MeasurableSet a ‚àß MeasurableSet b ‚àß
      {x | v.limRatio œÅ x < p} ‚äÜ a ‚àß {x | (q : ‚Ñù‚â•0‚àû) < v.limRatio œÅ x} ‚äÜ b ‚àß Œº (a ‚à© b) = 0 := by
  /- Here is a rough sketch, assuming that the measure is finite and the limit is well defined
    everywhere. Let `u := {x | v.limRatio œÅ x < p}` and `w := {x | q < v.limRatio œÅ x}`. They
    have measurable supersets `u'` and `w'` of the same measure. We will show that these satisfy
    the conclusion of the theorem, i.e., `Œº (u' ‚à© w') = 0`. For this, note that
    `œÅ (u' ‚à© w') = œÅ (u ‚à© w')` (as `w'` is measurable, see `measure_toMeasurable_add_inter_left`).
    The latter set is included in the set where the limit of the ratios is `< p`, and therefore
    its measure is `‚â§ p * Œº (u ‚à© w')`. Using the same trick in the other direction gives that this
    is `p * Œº (u' ‚à© w')`. We have shown that `œÅ (u' ‚à© w') ‚â§ p * Œº (u' ‚à© w')`. Arguing in the same
    way but using the `w` part gives `q * Œº (u' ‚à© w') ‚â§ œÅ (u' ‚à© w')`. If `Œº (u' ‚à© w')` were nonzero,
    this would be a contradiction as `p < q`.

    For the rigorous proof, we need to work on a part of the space where the measure is finite
    (provided by `spanningSets (œÅ + Œº)`) and to restrict to the set where the limit is well defined
    (called `s` below, of full measure). Otherwise, the argument goes through.
    -/
  let s := {x | ‚àÉ c, Tendsto (fun a => œÅ a / Œº a) (v.filterAt x) (ùìù c)}
  let o : ‚Ñï ‚Üí Set Œ± := spanningSets (œÅ + Œº)
  let u n := s ‚à© {x | v.limRatio œÅ x < p} ‚à© o n
  let w n := s ‚à© {x | (q : ‚Ñù‚â•0‚àû) < v.limRatio œÅ x} ‚à© o n
  -- the supersets are obtained by restricting to the set `s` where the limit is well defined, to
  -- a finite measure part `o n`, taking a measurable superset here, and then taking the union over
  -- `n`.
  refine'
    ‚ü®toMeasurable Œº s·∂ú ‚à™ ‚ãÉ n, toMeasurable (œÅ + Œº) (u n),
      toMeasurable Œº s·∂ú ‚à™ ‚ãÉ n, toMeasurable (œÅ + Œº) (w n), _, _, _, _, _‚ü©
  -- check that these sets are measurable supersets as required
  ¬∑ exact
      (measurableSet_toMeasurable _ _).union
        (MeasurableSet.iUnion fun n => measurableSet_toMeasurable _ _)
  ¬∑ exact
      (measurableSet_toMeasurable _ _).union
        (MeasurableSet.iUnion fun n => measurableSet_toMeasurable _ _)
  ¬∑ intro x hx
    by_cases h : x ‚àà s
    ¬∑ refine' Or.inr (mem_iUnion.2 ‚ü®spanningSetsIndex (œÅ + Œº) x, _‚ü©)
      exact subset_toMeasurable _ _ ‚ü®‚ü®h, hx‚ü©, mem_spanningSetsIndex _ _‚ü©
    ¬∑ exact Or.inl (subset_toMeasurable Œº s·∂ú h)
  ¬∑ intro x hx
    by_cases h : x ‚àà s
    ¬∑ refine' Or.inr (mem_iUnion.2 ‚ü®spanningSetsIndex (œÅ + Œº) x, _‚ü©)
      exact subset_toMeasurable _ _ ‚ü®‚ü®h, hx‚ü©, mem_spanningSetsIndex _ _‚ü©
    ¬∑ exact Or.inl (subset_toMeasurable Œº s·∂ú h)
  -- it remains to check the nontrivial part that these sets have zero measure intersection.
  -- it suffices to do it for fixed `m` and `n`, as one is taking countable unions.
  suffices H : ‚àÄ m n : ‚Ñï, Œº (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) = 0 by
    have A :
      (toMeasurable Œº s·∂ú ‚à™ ‚ãÉ n, toMeasurable (œÅ + Œº) (u n)) ‚à©
          (toMeasurable Œº s·∂ú ‚à™ ‚ãÉ n, toMeasurable (œÅ + Œº) (w n)) ‚äÜ
        toMeasurable Œº s·∂ú ‚à™
          ‚ãÉ (m) (n), toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n) := by
      simp only [inter_union_distrib_left, union_inter_distrib_right, true_and_iff,
        subset_union_left, union_subset_iff, inter_self]
      refine' ‚ü®_, _, _‚ü©
      ¬∑ exact (inter_subset_right _ _).trans (subset_union_left _ _)
      ¬∑ exact (inter_subset_left _ _).trans (subset_union_left _ _)
      ¬∑ simp_rw [iUnion_inter, inter_iUnion]; exact subset_union_right _ _
    refine' le_antisymm ((measure_mono A).trans _) bot_le
    calc
      Œº (toMeasurable Œº s·∂ú ‚à™
        ‚ãÉ (m) (n), toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) ‚â§
          Œº (toMeasurable Œº s·∂ú) +
            Œº (‚ãÉ (m) (n), toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) :=
        measure_union_le _ _
      _ = Œº (‚ãÉ (m) (n), toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) := by
        have : Œº s·∂ú = 0 := v.ae_tendsto_div hœÅ; rw [measure_toMeasurable, this, zero_add]
      _ ‚â§ ‚àë' (m) (n), Œº (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) :=
        ((measure_iUnion_le _).trans (ENNReal.tsum_le_tsum fun m => measure_iUnion_le _))
      _ = 0 := by simp only [H, tsum_zero]
  -- now starts the nontrivial part of the argument. We fix `m` and `n`, and show that the
  -- measurable supersets of `u m` and `w n` have zero measure intersection by using the lemmas
  -- `measure_toMeasurable_add_inter_left` (to reduce to `u m` or `w n` instead of the measurable
  -- superset) and `measure_le_of_frequently_le` to compare their measures for `œÅ` and `Œº`.
  intro m n
  have I : (œÅ + Œº) (u m) ‚â† ‚àû := by
    apply (lt_of_le_of_lt (measure_mono _) (measure_spanningSets_lt_top (œÅ + Œº) m)).ne
    exact inter_subset_right _ _
  have J : (œÅ + Œº) (w n) ‚â† ‚àû := by
    apply (lt_of_le_of_lt (measure_mono _) (measure_spanningSets_lt_top (œÅ + Œº) n)).ne
    exact inter_subset_right _ _
  have A :
    œÅ (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) ‚â§
      p * Œº (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) :=
    calc
      œÅ (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) =
          œÅ (u m ‚à© toMeasurable (œÅ + Œº) (w n)) :=
        measure_toMeasurable_add_inter_left (measurableSet_toMeasurable _ _) I
      _ ‚â§ (p ‚Ä¢ Œº) (u m ‚à© toMeasurable (œÅ + Œº) (w n)) := by
        refine' v.measure_le_of_frequently_le (p ‚Ä¢ Œº) hœÅ _ fun x hx => _
        have L : Tendsto (fun a : Set Œ± => œÅ a / Œº a) (v.filterAt x) (ùìù (v.limRatio œÅ x)) :=
          tendsto_nhds_limUnder hx.1.1.1
        have I : ‚àÄ·∂† b : Set Œ± in v.filterAt x, œÅ b / Œº b < p := (tendsto_order.1 L).2 _ hx.1.1.2
        apply I.frequently.mono fun a ha => ?_
        rw [coe_nnreal_smul_apply]
        refine' (ENNReal.div_le_iff_le_mul _ (Or.inr (bot_le.trans_lt ha).ne')).1 ha.le
        simp only [ENNReal.coe_ne_top, Ne, or_true_iff, not_false_iff]
      _ = p * Œº (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) := by
        simp only [coe_nnreal_smul_apply,
          measure_toMeasurable_add_inter_right (measurableSet_toMeasurable _ _) I]
  have B :
    (q : ‚Ñù‚â•0‚àû) * Œº (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) ‚â§
      œÅ (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) :=
    calc
      (q : ‚Ñù‚â•0‚àû) * Œº (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) =
          (q : ‚Ñù‚â•0‚àû) * Œº (toMeasurable (œÅ + Œº) (u m) ‚à© w n) := by
        conv_rhs => rw [inter_comm]
        rw [inter_comm, measure_toMeasurable_add_inter_right (measurableSet_toMeasurable _ _) J]
      _ ‚â§ œÅ (toMeasurable (œÅ + Œº) (u m) ‚à© w n) := by
        rw [‚Üê coe_nnreal_smul_apply]
        refine' v.measure_le_of_frequently_le _ (AbsolutelyContinuous.rfl.smul _) _ _
        intro x hx
        have L : Tendsto (fun a : Set Œ± => œÅ a / Œº a) (v.filterAt x) (ùìù (v.limRatio œÅ x)) :=
          tendsto_nhds_limUnder hx.2.1.1
        have I : ‚àÄ·∂† b : Set Œ± in v.filterAt x, (q : ‚Ñù‚â•0‚àû) < œÅ b / Œº b :=
          (tendsto_order.1 L).1 _ hx.2.1.2
        apply I.frequently.mono fun a ha => ?_
        rw [coe_nnreal_smul_apply]
        exact ENNReal.mul_le_of_le_div ha.le
      _ = œÅ (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) := by
        conv_rhs => rw [inter_comm]
        rw [inter_comm]
        exact (measure_toMeasurable_add_inter_left (measurableSet_toMeasurable _ _) J).symm
  by_contra h
  apply lt_irrefl (œÅ (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)))
  calc
    œÅ (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) ‚â§
        p * Œº (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) :=
      A
    _ < q * Œº (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) := by
      gcongr
      suffices H : (œÅ + Œº) (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) ‚â† ‚àû by
        simp only [not_or, ENNReal.add_eq_top, Pi.add_apply, Ne, coe_add] at H
        exact H.2
      apply (lt_of_le_of_lt (measure_mono (inter_subset_left _ _)) _).ne
      rw [measure_toMeasurable]
      apply lt_of_le_of_lt (measure_mono _) (measure_spanningSets_lt_top (œÅ + Œº) m)
      exact inter_subset_right _ _
    _ ‚â§ œÅ (toMeasurable (œÅ + Œº) (u m) ‚à© toMeasurable (œÅ + Œº) (w n)) := B
#align vitali_family.exists_measurable_supersets_lim_ratio VitaliFamily.exists_measurable_supersets_limRatio

theorem aemeasurable_limRatio : AEMeasurable (v.limRatio œÅ) Œº := by
  apply ENNReal.aemeasurable_of_exist_almost_disjoint_supersets _ _ fun p q hpq => ?_
  exact v.exists_measurable_supersets_limRatio hœÅ hpq
#align vitali_family.ae_measurable_lim_ratio VitaliFamily.aemeasurable_limRatio

/-- A measurable version of `v.limRatio œÅ`. Do *not* use this definition: it is only a temporary
device to show that `v.limRatio` is almost everywhere equal to the Radon-Nikodym derivative. -/
noncomputable def limRatioMeas : Œ± ‚Üí ‚Ñù‚â•0‚àû :=
  (v.aemeasurable_limRatio hœÅ).mk _
#align vitali_family.lim_ratio_meas VitaliFamily.limRatioMeas

theorem limRatioMeas_measurable : Measurable (v.limRatioMeas hœÅ) :=
  AEMeasurable.measurable_mk _
#align vitali_family.lim_ratio_meas_measurable VitaliFamily.limRatioMeas_measurable

theorem ae_tendsto_limRatioMeas :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => œÅ a / Œº a) (v.filterAt x) (ùìù (v.limRatioMeas hœÅ x)) := by
  filter_upwards [v.ae_tendsto_limRatio hœÅ, AEMeasurable.ae_eq_mk (v.aemeasurable_limRatio hœÅ)]
  intro x hx h'x
  rwa [h'x] at hx
#align vitali_family.ae_tendsto_lim_ratio_meas VitaliFamily.ae_tendsto_limRatioMeas

/-- If, for all `x` in a set `s`, one has frequently `œÅ a / Œº a < p`, then `œÅ s ‚â§ p * Œº s`, as
proved in `measure_le_of_frequently_le`. Since `œÅ a / Œº a` tends almost everywhere to
`v.limRatioMeas hœÅ x`, the same property holds for sets `s` on which `v.limRatioMeas hœÅ < p`. -/
theorem measure_le_mul_of_subset_limRatioMeas_lt {p : ‚Ñù‚â•0} {s : Set Œ±}
    (h : s ‚äÜ {x | v.limRatioMeas hœÅ x < p}) : œÅ s ‚â§ p * Œº s := by
  let t := {x : Œ± | Tendsto (fun a => œÅ a / Œº a) (v.filterAt x) (ùìù (v.limRatioMeas hœÅ x))}
  have A : Œº t·∂ú = 0 := v.ae_tendsto_limRatioMeas hœÅ
  suffices H : œÅ (s ‚à© t) ‚â§ (p ‚Ä¢ Œº) (s ‚à© t) by calc
    œÅ s = œÅ (s ‚à© t ‚à™ s ‚à© t·∂ú) := by rw [inter_union_compl]
    _ ‚â§ œÅ (s ‚à© t) + œÅ (s ‚à© t·∂ú) := (measure_union_le _ _)
    _ ‚â§ (p ‚Ä¢ Œº) (s ‚à© t) + œÅ t·∂ú := by gcongr; apply inter_subset_right
    _ ‚â§ p * Œº (s ‚à© t) := by simp [(hœÅ A)]
    _ ‚â§ p * Œº s := by gcongr; apply inter_subset_left
  refine' v.measure_le_of_frequently_le (p ‚Ä¢ Œº) hœÅ _ fun x hx => _
  have I : ‚àÄ·∂† b : Set Œ± in v.filterAt x, œÅ b / Œº b < p := (tendsto_order.1 hx.2).2 _ (h hx.1)
  apply I.frequently.mono fun a ha => ?_
  rw [coe_nnreal_smul_apply]
  refine' (ENNReal.div_le_iff_le_mul _ (Or.inr (bot_le.trans_lt ha).ne')).1 ha.le
  simp only [ENNReal.coe_ne_top, Ne, or_true_iff, not_false_iff]
#align vitali_family.measure_le_mul_of_subset_lim_ratio_meas_lt VitaliFamily.measure_le_mul_of_subset_limRatioMeas_lt

/-- If, for all `x` in a set `s`, one has frequently `q < œÅ a / Œº a`, then `q * Œº s ‚â§ œÅ s`, as
proved in `measure_le_of_frequently_le`. Since `œÅ a / Œº a` tends almost everywhere to
`v.limRatioMeas hœÅ x`, the same property holds for sets `s` on which `q < v.limRatioMeas hœÅ`. -/
theorem mul_measure_le_of_subset_lt_limRatioMeas {q : ‚Ñù‚â•0} {s : Set Œ±}
    (h : s ‚äÜ {x | (q : ‚Ñù‚â•0‚àû) < v.limRatioMeas hœÅ x}) : (q : ‚Ñù‚â•0‚àû) * Œº s ‚â§ œÅ s := by
  let t := {x : Œ± | Tendsto (fun a => œÅ a / Œº a) (v.filterAt x) (ùìù (v.limRatioMeas hœÅ x))}
  have A : Œº t·∂ú = 0 := v.ae_tendsto_limRatioMeas hœÅ
  suffices H : (q ‚Ä¢ Œº) (s ‚à© t) ‚â§ œÅ (s ‚à© t) by calc
    (q ‚Ä¢ Œº) s = (q ‚Ä¢ Œº) (s ‚à© t ‚à™ s ‚à© t·∂ú) := by rw [inter_union_compl]
    _ ‚â§ (q ‚Ä¢ Œº) (s ‚à© t) + (q ‚Ä¢ Œº) (s ‚à© t·∂ú) := (measure_union_le _ _)
    _ ‚â§ œÅ (s ‚à© t) + (q ‚Ä¢ Œº) t·∂ú := by gcongr; apply inter_subset_right
    _ = œÅ (s ‚à© t) := by simp [A]
    _ ‚â§ œÅ s := by gcongr; apply inter_subset_left
  refine' v.measure_le_of_frequently_le _ (AbsolutelyContinuous.rfl.smul _) _ _
  intro x hx
  have I : ‚àÄ·∂† a in v.filterAt x, (q : ‚Ñù‚â•0‚àû) < œÅ a / Œº a := (tendsto_order.1 hx.2).1 _ (h hx.1)
  apply I.frequently.mono fun a ha => ?_
  rw [coe_nnreal_smul_apply]
  exact ENNReal.mul_le_of_le_div ha.le
#align vitali_family.mul_measure_le_of_subset_lt_lim_ratio_meas VitaliFamily.mul_measure_le_of_subset_lt_limRatioMeas

/-- The points with `v.limRatioMeas hœÅ x = ‚àû` have measure `0` for `Œº`. -/
theorem measure_limRatioMeas_top : Œº {x | v.limRatioMeas hœÅ x = ‚àû} = 0 := by
  refine' null_of_locally_null _ fun x _ => _
  obtain ‚ü®o, xo, o_open, Œºo‚ü© : ‚àÉ o : Set Œ±, x ‚àà o ‚àß IsOpen o ‚àß œÅ o < ‚àû :=
    Measure.exists_isOpen_measure_lt_top œÅ x
  let s := {x : Œ± | v.limRatioMeas hœÅ x = ‚àû} ‚à© o
  refine' ‚ü®s, inter_mem_nhdsWithin _ (o_open.mem_nhds xo), le_antisymm _ bot_le‚ü©
  have œÅs : œÅ s ‚â† ‚àû := ((measure_mono (inter_subset_right _ _)).trans_lt Œºo).ne
  have A : ‚àÄ q : ‚Ñù‚â•0, 1 ‚â§ q ‚Üí Œº s ‚â§ (q : ‚Ñù‚â•0‚àû)‚Åª¬π * œÅ s := by
    intro q hq
    rw [mul_comm, ‚Üê div_eq_mul_inv, ENNReal.le_div_iff_mul_le _ (Or.inr œÅs), mul_comm]
    ¬∑ apply v.mul_measure_le_of_subset_lt_limRatioMeas hœÅ
      intro y hy
      have : v.limRatioMeas hœÅ y = ‚àû := hy.1
      simp only [this, ENNReal.coe_lt_top, mem_setOf_eq]
    ¬∑ simp only [(zero_lt_one.trans_le hq).ne', true_or_iff, ENNReal.coe_eq_zero, Ne,
        not_false_iff]
  have B : Tendsto (fun q : ‚Ñù‚â•0 => (q : ‚Ñù‚â•0‚àû)‚Åª¬π * œÅ s) atTop (ùìù (‚àû‚Åª¬π * œÅ s)) := by
    apply ENNReal.Tendsto.mul_const _ (Or.inr œÅs)
    exact ENNReal.tendsto_inv_iff.2 (ENNReal.tendsto_coe_nhds_top.2 tendsto_id)
  simp only [zero_mul, ENNReal.inv_top] at B
  apply ge_of_tendsto B
  exact eventually_atTop.2 ‚ü®1, A‚ü©
#align vitali_family.measure_lim_ratio_meas_top VitaliFamily.measure_limRatioMeas_top

/-- The points with `v.limRatioMeas hœÅ x = 0` have measure `0` for `œÅ`. -/
theorem measure_limRatioMeas_zero : œÅ {x | v.limRatioMeas hœÅ x = 0} = 0 := by
  refine' null_of_locally_null _ fun x _ => _
  obtain ‚ü®o, xo, o_open, Œºo‚ü© : ‚àÉ o : Set Œ±, x ‚àà o ‚àß IsOpen o ‚àß Œº o < ‚àû :=
    Measure.exists_isOpen_measure_lt_top Œº x
  let s := {x : Œ± | v.limRatioMeas hœÅ x = 0} ‚à© o
  refine' ‚ü®s, inter_mem_nhdsWithin _ (o_open.mem_nhds xo), le_antisymm _ bot_le‚ü©
  have Œºs : Œº s ‚â† ‚àû := ((measure_mono (inter_subset_right _ _)).trans_lt Œºo).ne
  have A : ‚àÄ q : ‚Ñù‚â•0, 0 < q ‚Üí œÅ s ‚â§ q * Œº s := by
    intro q hq
    apply v.measure_le_mul_of_subset_limRatioMeas_lt hœÅ
    intro y hy
    have : v.limRatioMeas hœÅ y = 0 := hy.1
    simp only [this, mem_setOf_eq, hq, ENNReal.coe_pos]
  have B : Tendsto (fun q : ‚Ñù‚â•0 => (q : ‚Ñù‚â•0‚àû) * Œº s) (ùìù[>] (0 : ‚Ñù‚â•0)) (ùìù ((0 : ‚Ñù‚â•0) * Œº s)) := by
    apply ENNReal.Tendsto.mul_const _ (Or.inr Œºs)
    rw [ENNReal.tendsto_coe]
    exact nhdsWithin_le_nhds
  simp only [zero_mul, ENNReal.coe_zero] at B
  apply ge_of_tendsto B
  filter_upwards [self_mem_nhdsWithin] using A
#align vitali_family.measure_lim_ratio_meas_zero VitaliFamily.measure_limRatioMeas_zero

/-- As an intermediate step to show that `Œº.withDensity (v.limRatioMeas hœÅ) = œÅ`, we show here
that `Œº.withDensity (v.limRatioMeas hœÅ) ‚â§ t^2 œÅ` for any `t > 1`. -/
theorem withDensity_le_mul {s : Set Œ±} (hs : MeasurableSet s) {t : ‚Ñù‚â•0} (ht : 1 < t) :
    Œº.withDensity (v.limRatioMeas hœÅ) s ‚â§ (t : ‚Ñù‚â•0‚àû) ^ 2 * œÅ s := by
  /- We cut `s` into the sets where `v.limRatioMeas hœÅ = 0`, where `v.limRatioMeas hœÅ = ‚àû`, and
    where `v.limRatioMeas hœÅ ‚àà [t^n, t^(n+1))` for `n : ‚Ñ§`. The first and second have measure `0`.
    For the latter, since `v.limRatioMeas hœÅ` fluctuates by at most `t` on this slice, we can use
    `measure_le_mul_of_subset_limRatioMeas_lt` and `mul_measure_le_of_subset_lt_limRatioMeas` to
    show that the two measures are comparable up to `t` (in fact `t^2` for technical reasons of
    strict inequalities). -/
  have t_ne_zero' : t ‚â† 0 := (zero_lt_one.trans ht).ne'
  have t_ne_zero : (t : ‚Ñù‚â•0‚àû) ‚â† 0 := by simpa only [ENNReal.coe_eq_zero, Ne] using t_ne_zero'
  let ŒΩ := Œº.withDensity (v.limRatioMeas hœÅ)
  let f := v.limRatioMeas hœÅ
  have f_meas : Measurable f := v.limRatioMeas_measurable hœÅ
  -- Note(kmill): smul elaborator when used for CoeFun fails to get CoeFun instance to trigger
  -- unless you use the `(... :)` notation. Another fix is using `(2 : Nat)`, so this appears
  -- to be an unpleasant interaction with default instances.
  have A : ŒΩ (s ‚à© f ‚Åª¬π' {0}) ‚â§ ((t : ‚Ñù‚â•0‚àû) ^ 2 ‚Ä¢ œÅ :) (s ‚à© f ‚Åª¬π' {0}) := by
    apply le_trans _ (zero_le _)
    have M : MeasurableSet (s ‚à© f ‚Åª¬π' {0}) := hs.inter (f_meas (measurableSet_singleton _))
    simp only [ŒΩ, nonpos_iff_eq_zero, M, withDensity_apply, lintegral_eq_zero_iff f_meas]
    apply (ae_restrict_iff' M).2
    exact eventually_of_forall fun x hx => hx.2
  have B : ŒΩ (s ‚à© f ‚Åª¬π' {‚àû}) ‚â§ ((t : ‚Ñù‚â•0‚àû) ^ 2 ‚Ä¢ œÅ :) (s ‚à© f ‚Åª¬π' {‚àû}) := by
    apply le_trans (le_of_eq _) (zero_le _)
    apply withDensity_absolutelyContinuous Œº _
    rw [‚Üê nonpos_iff_eq_zero]
    exact (measure_mono (inter_subset_right _ _)).trans (v.measure_limRatioMeas_top hœÅ).le
  have C :
    ‚àÄ n : ‚Ñ§,
      ŒΩ (s ‚à© f ‚Åª¬π' Ico ((t : ‚Ñù‚â•0‚àû) ^ n) ((t : ‚Ñù‚â•0‚àû) ^ (n + 1))) ‚â§
        ((t : ‚Ñù‚â•0‚àû) ^ 2 ‚Ä¢ œÅ :) (s ‚à© f ‚Åª¬π' Ico ((t : ‚Ñù‚â•0‚àû) ^ n) ((t : ‚Ñù‚â•0‚àû) ^ (n + 1))) := by
    intro n
    let I := Ico ((t : ‚Ñù‚â•0‚àû) ^ n) ((t : ‚Ñù‚â•0‚àû) ^ (n + 1))
    have M : MeasurableSet (s ‚à© f ‚Åª¬π' I) := hs.inter (f_meas measurableSet_Ico)
    simp only [ŒΩ, M, withDensity_apply, coe_nnreal_smul_apply]
    calc
      (‚à´‚Åª x in s ‚à© f ‚Åª¬π' I, f x ‚àÇŒº) ‚â§ ‚à´‚Åª _ in s ‚à© f ‚Åª¬π' I, (t : ‚Ñù‚â•0‚àû) ^ (n + 1) ‚àÇŒº :=
        lintegral_mono_ae ((ae_restrict_iff' M).2 (eventually_of_forall fun x hx => hx.2.2.le))
      _ = (t : ‚Ñù‚â•0‚àû) ^ (n + 1) * Œº (s ‚à© f ‚Åª¬π' I) := by
        simp only [lintegral_const, MeasurableSet.univ, Measure.restrict_apply, univ_inter]
      _ = (t : ‚Ñù‚â•0‚àû) ^ (2 : ‚Ñ§) * ((t : ‚Ñù‚â•0‚àû) ^ (n - 1) * Œº (s ‚à© f ‚Åª¬π' I)) := by
        rw [‚Üê mul_assoc, ‚Üê ENNReal.zpow_add t_ne_zero ENNReal.coe_ne_top]
        congr 2
        abel
      _ ‚â§ (t : ‚Ñù‚â•0‚àû) ^ (2 : ‚Ñ§) * œÅ (s ‚à© f ‚Åª¬π' I) := by
        gcongr
        rw [‚Üê ENNReal.coe_zpow (zero_lt_one.trans ht).ne']
        apply v.mul_measure_le_of_subset_lt_limRatioMeas hœÅ
        intro x hx
        apply lt_of_lt_of_le _ hx.2.1
        rw [‚Üê ENNReal.coe_zpow (zero_lt_one.trans ht).ne', ENNReal.coe_lt_coe, sub_eq_add_neg,
          zpow_add‚ÇÄ t_ne_zero']
        conv_rhs => rw [‚Üê mul_one (t ^ n)]
        gcongr
        rw [zpow_neg_one]
        exact inv_lt_one ht
  calc
    ŒΩ s =
      ŒΩ (s ‚à© f ‚Åª¬π' {0}) + ŒΩ (s ‚à© f ‚Åª¬π' {‚àû}) +
        ‚àë' n : ‚Ñ§, ŒΩ (s ‚à© f ‚Åª¬π' Ico ((t : ‚Ñù‚â•0‚àû) ^ n) ((t : ‚Ñù‚â•0‚àû) ^ (n + 1))) :=
      measure_eq_measure_preimage_add_measure_tsum_Ico_zpow ŒΩ f_meas hs ht
    _ ‚â§
        ((t : ‚Ñù‚â•0‚àû) ^ 2 ‚Ä¢ œÅ :) (s ‚à© f ‚Åª¬π' {0}) + ((t : ‚Ñù‚â•0‚àû) ^ 2 ‚Ä¢ œÅ :) (s ‚à© f ‚Åª¬π' {‚àû}) +
          ‚àë' n : ‚Ñ§, ((t : ‚Ñù‚â•0‚àû) ^ 2 ‚Ä¢ œÅ :) (s ‚à© f ‚Åª¬π' Ico (t ^ n) (t ^ (n + 1))) :=
      (add_le_add (add_le_add A B) (ENNReal.tsum_le_tsum C))
    _ = ((t : ‚Ñù‚â•0‚àû) ^ 2 ‚Ä¢ œÅ :) s :=
      (measure_eq_measure_preimage_add_measure_tsum_Ico_zpow ((t : ‚Ñù‚â•0‚àû) ^ 2 ‚Ä¢ œÅ) f_meas hs ht).symm
#align vitali_family.with_density_le_mul VitaliFamily.withDensity_le_mul

/-- As an intermediate step to show that `Œº.withDensity (v.limRatioMeas hœÅ) = œÅ`, we show here
that `œÅ ‚â§ t Œº.withDensity (v.limRatioMeas hœÅ)` for any `t > 1`. -/
theorem le_mul_withDensity {s : Set Œ±} (hs : MeasurableSet s) {t : ‚Ñù‚â•0} (ht : 1 < t) :
    œÅ s ‚â§ t * Œº.withDensity (v.limRatioMeas hœÅ) s := by
  /- We cut `s` into the sets where `v.limRatioMeas hœÅ = 0`, where `v.limRatioMeas hœÅ = ‚àû`, and
    where `v.limRatioMeas hœÅ ‚àà [t^n, t^(n+1))` for `n : ‚Ñ§`. The first and second have measure `0`.
    For the latter, since `v.limRatioMeas hœÅ` fluctuates by at most `t` on this slice, we can use
    `measure_le_mul_of_subset_limRatioMeas_lt` and `mul_measure_le_of_subset_lt_limRatioMeas` to
    show that the two measures are comparable up to `t`. -/
  have t_ne_zero' : t ‚â† 0 := (zero_lt_one.trans ht).ne'
  have t_ne_zero : (t : ‚Ñù‚â•0‚àû) ‚â† 0 := by simpa only [ENNReal.coe_eq_zero, Ne] using t_ne_zero'
  let ŒΩ := Œº.withDensity (v.limRatioMeas hœÅ)
  let f := v.limRatioMeas hœÅ
  have f_meas : Measurable f := v.limRatioMeas_measurable hœÅ
  have A : œÅ (s ‚à© f ‚Åª¬π' {0}) ‚â§ (t ‚Ä¢ ŒΩ) (s ‚à© f ‚Åª¬π' {0}) := by
    refine' le_trans (measure_mono (inter_subset_right _ _)) (le_trans (le_of_eq _) (zero_le _))
    exact v.measure_limRatioMeas_zero hœÅ
  have B : œÅ (s ‚à© f ‚Åª¬π' {‚àû}) ‚â§ (t ‚Ä¢ ŒΩ) (s ‚à© f ‚Åª¬π' {‚àû}) := by
    apply le_trans (le_of_eq _) (zero_le _)
    apply hœÅ
    rw [‚Üê nonpos_iff_eq_zero]
    exact (measure_mono (inter_subset_right _ _)).trans (v.measure_limRatioMeas_top hœÅ).le
  have C :
    ‚àÄ n : ‚Ñ§,
      œÅ (s ‚à© f ‚Åª¬π' Ico ((t : ‚Ñù‚â•0‚àû) ^ n) ((t : ‚Ñù‚â•0‚àû) ^ (n + 1))) ‚â§
        (t ‚Ä¢ ŒΩ) (s ‚à© f ‚Åª¬π' Ico ((t : ‚Ñù‚â•0‚àû) ^ n) ((t : ‚Ñù‚â•0‚àû) ^ (n + 1))) := by
    intro n
    let I := Ico ((t : ‚Ñù‚â•0‚àû) ^ n) ((t : ‚Ñù‚â•0‚àû) ^ (n + 1))
    have M : MeasurableSet (s ‚à© f ‚Åª¬π' I) := hs.inter (f_meas measurableSet_Ico)
    simp only [ŒΩ, M, withDensity_apply, coe_nnreal_smul_apply]
    calc
      œÅ (s ‚à© f ‚Åª¬π' I) ‚â§ (t : ‚Ñù‚â•0‚àû) ^ (n + 1) * Œº (s ‚à© f ‚Åª¬π' I) := by
        rw [‚Üê ENNReal.coe_zpow t_ne_zero']
        apply v.measure_le_mul_of_subset_limRatioMeas_lt hœÅ
        intro x hx
        apply hx.2.2.trans_le (le_of_eq _)
        rw [ENNReal.coe_zpow t_ne_zero']
      _ = ‚à´‚Åª _ in s ‚à© f ‚Åª¬π' I, (t : ‚Ñù‚â•0‚àû) ^ (n + 1) ‚àÇŒº := by
        simp only [lintegral_const, MeasurableSet.univ, Measure.restrict_apply, univ_inter]
      _ ‚â§ ‚à´‚Åª x in s ‚à© f ‚Åª¬π' I, t * f x ‚àÇŒº := by
        apply lintegral_mono_ae ((ae_restrict_iff' M).2 (eventually_of_forall fun x hx => ?_))
        rw [add_comm, ENNReal.zpow_add t_ne_zero ENNReal.coe_ne_top, zpow_one]
        exact mul_le_mul_left' hx.2.1 _
      _ = t * ‚à´‚Åª x in s ‚à© f ‚Åª¬π' I, f x ‚àÇŒº := lintegral_const_mul _ f_meas
  calc
    œÅ s =
      œÅ (s ‚à© f ‚Åª¬π' {0}) + œÅ (s ‚à© f ‚Åª¬π' {‚àû}) +
        ‚àë' n : ‚Ñ§, œÅ (s ‚à© f ‚Åª¬π' Ico ((t : ‚Ñù‚â•0‚àû) ^ n) ((t : ‚Ñù‚â•0‚àû) ^ (n + 1))) :=
      measure_eq_measure_preimage_add_measure_tsum_Ico_zpow œÅ f_meas hs ht
    _ ‚â§
        (t ‚Ä¢ ŒΩ) (s ‚à© f ‚Åª¬π' {0}) + (t ‚Ä¢ ŒΩ) (s ‚à© f ‚Åª¬π' {‚àû}) +
          ‚àë' n : ‚Ñ§, (t ‚Ä¢ ŒΩ) (s ‚à© f ‚Åª¬π' Ico ((t : ‚Ñù‚â•0‚àû) ^ n) ((t : ‚Ñù‚â•0‚àû) ^ (n + 1))) :=
      (add_le_add (add_le_add A B) (ENNReal.tsum_le_tsum C))
    _ = (t ‚Ä¢ ŒΩ) s :=
      (measure_eq_measure_preimage_add_measure_tsum_Ico_zpow (t ‚Ä¢ ŒΩ) f_meas hs ht).symm
#align vitali_family.le_mul_with_density VitaliFamily.le_mul_withDensity

theorem withDensity_limRatioMeas_eq : Œº.withDensity (v.limRatioMeas hœÅ) = œÅ := by
  ext1 s hs
  refine' le_antisymm _ _
  ¬∑ have : Tendsto (fun t : ‚Ñù‚â•0 =>
        ((t : ‚Ñù‚â•0‚àû) ^ 2 * œÅ s : ‚Ñù‚â•0‚àû)) (ùìù[>] 1) (ùìù ((1 : ‚Ñù‚â•0‚àû) ^ 2 * œÅ s)) := by
      refine' ENNReal.Tendsto.mul _ _ tendsto_const_nhds _
      ¬∑ exact ENNReal.Tendsto.pow (ENNReal.tendsto_coe.2 nhdsWithin_le_nhds)
      ¬∑ simp only [one_pow, ENNReal.coe_one, true_or_iff, Ne, not_false_iff, one_ne_zero]
      ¬∑ simp only [one_pow, ENNReal.coe_one, Ne, or_true_iff, ENNReal.one_ne_top, not_false_iff]
    simp only [one_pow, one_mul, ENNReal.coe_one] at this
    refine' ge_of_tendsto this _
    filter_upwards [self_mem_nhdsWithin] with _ ht
    exact v.withDensity_le_mul hœÅ hs ht
  ¬∑ have :
      Tendsto (fun t : ‚Ñù‚â•0 => (t : ‚Ñù‚â•0‚àû) * Œº.withDensity (v.limRatioMeas hœÅ) s) (ùìù[>] 1)
        (ùìù ((1 : ‚Ñù‚â•0‚àû) * Œº.withDensity (v.limRatioMeas hœÅ) s)) := by
      refine' ENNReal.Tendsto.mul_const (ENNReal.tendsto_coe.2 nhdsWithin_le_nhds) _
      simp only [ENNReal.coe_one, true_or_iff, Ne, not_false_iff, one_ne_zero]
    simp only [one_mul, ENNReal.coe_one] at this
    refine' ge_of_tendsto this _
    filter_upwards [self_mem_nhdsWithin] with _ ht
    exact v.le_mul_withDensity hœÅ hs ht
#align vitali_family.with_density_lim_ratio_meas_eq VitaliFamily.withDensity_limRatioMeas_eq

/-- Weak version of the main theorem on differentiation of measures: given a Vitali family `v`
for a locally finite measure `Œº`, and another locally finite measure `œÅ`, then for `Œº`-almost
every `x` the ratio `œÅ a / Œº a` converges, when `a` shrinks to `x` along the Vitali family,
towards the Radon-Nikodym derivative of `œÅ` with respect to `Œº`.

This version assumes that `œÅ` is absolutely continuous with respect to `Œº`. The general version
without this superfluous assumption is `VitaliFamily.ae_tendsto_rnDeriv`.
-/
theorem ae_tendsto_rnDeriv_of_absolutelyContinuous :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => œÅ a / Œº a) (v.filterAt x) (ùìù (œÅ.rnDeriv Œº x)) := by
  have A : (Œº.withDensity (v.limRatioMeas hœÅ)).rnDeriv Œº =·µê[Œº] v.limRatioMeas hœÅ :=
    rnDeriv_withDensity Œº (v.limRatioMeas_measurable hœÅ)
  rw [v.withDensity_limRatioMeas_eq hœÅ] at A
  filter_upwards [v.ae_tendsto_limRatioMeas hœÅ, A] with _ _ h'x
  rwa [h'x]
#align vitali_family.ae_tendsto_rn_deriv_of_absolutely_continuous VitaliFamily.ae_tendsto_rnDeriv_of_absolutelyContinuous

end AbsolutelyContinuous

variable (œÅ)

/-- Main theorem on differentiation of measures: given a Vitali family `v` for a locally finite
measure `Œº`, and another locally finite measure `œÅ`, then for `Œº`-almost every `x` the
ratio `œÅ a / Œº a` converges, when `a` shrinks to `x` along the Vitali family, towards the
Radon-Nikodym derivative of `œÅ` with respect to `Œº`. -/
theorem ae_tendsto_rnDeriv :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => œÅ a / Œº a) (v.filterAt x) (ùìù (œÅ.rnDeriv Œº x)) := by
  let t := Œº.withDensity (œÅ.rnDeriv Œº)
  have eq_add : œÅ = œÅ.singularPart Œº + t := haveLebesgueDecomposition_add _ _
  have A : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => œÅ.singularPart Œº a / Œº a) (v.filterAt x) (ùìù 0) :=
    v.ae_eventually_measure_zero_of_singular (mutuallySingular_singularPart œÅ Œº)
  have B : ‚àÄ·µê x ‚àÇŒº, t.rnDeriv Œº x = œÅ.rnDeriv Œº x :=
    rnDeriv_withDensity Œº (measurable_rnDeriv œÅ Œº)
  have C : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => t a / Œº a) (v.filterAt x) (ùìù (t.rnDeriv Œº x)) :=
    v.ae_tendsto_rnDeriv_of_absolutelyContinuous (withDensity_absolutelyContinuous _ _)
  filter_upwards [A, B, C] with _ Ax Bx Cx
  convert Ax.add Cx using 1
  ¬∑ ext1 a
    conv_lhs => rw [eq_add]
    simp only [Pi.add_apply, coe_add, ENNReal.add_div]
  ¬∑ simp only [Bx, zero_add]
#align vitali_family.ae_tendsto_rn_deriv VitaliFamily.ae_tendsto_rnDeriv

/-! ### Lebesgue density points -/


/-- Given a measurable set `s`, then `Œº (s ‚à© a) / Œº a` converges when `a` shrinks to a typical
point `x` along a Vitali family. The limit is `1` for `x ‚àà s` and `0` for `x ‚àâ s`. This shows that
almost every point of `s` is a Lebesgue density point for `s`. A version for non-measurable sets
holds, but it only gives the first conclusion, see `ae_tendsto_measure_inter_div`. -/
theorem ae_tendsto_measure_inter_div_of_measurableSet {s : Set Œ±} (hs : MeasurableSet s) :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => Œº (s ‚à© a) / Œº a) (v.filterAt x) (ùìù (s.indicator 1 x)) := by
  haveI : IsLocallyFiniteMeasure (Œº.restrict s) :=
    isLocallyFiniteMeasure_of_le restrict_le_self
  filter_upwards [ae_tendsto_rnDeriv v (Œº.restrict s), rnDeriv_restrict_self Œº hs]
  intro x hx h'x
  simpa only [h'x, restrict_apply' hs, inter_comm] using hx
#align vitali_family.ae_tendsto_measure_inter_div_of_measurable_set VitaliFamily.ae_tendsto_measure_inter_div_of_measurableSet

/-- Given an arbitrary set `s`, then `Œº (s ‚à© a) / Œº a` converges to `1` when `a` shrinks to a
typical point of `s` along a Vitali family. This shows that almost every point of `s` is a
Lebesgue density point for `s`. A stronger version for measurable sets is given
in `ae_tendsto_measure_inter_div_of_measurableSet`. -/
theorem ae_tendsto_measure_inter_div (s : Set Œ±) :
    ‚àÄ·µê x ‚àÇŒº.restrict s, Tendsto (fun a => Œº (s ‚à© a) / Œº a) (v.filterAt x) (ùìù 1) := by
  let t := toMeasurable Œº s
  have A :
    ‚àÄ·µê x ‚àÇŒº.restrict s,
      Tendsto (fun a => Œº (t ‚à© a) / Œº a) (v.filterAt x) (ùìù (t.indicator 1 x)) := by
    apply ae_mono restrict_le_self
    apply ae_tendsto_measure_inter_div_of_measurableSet
    exact measurableSet_toMeasurable _ _
  have B : ‚àÄ·µê x ‚àÇŒº.restrict s, t.indicator 1 x = (1 : ‚Ñù‚â•0‚àû) := by
    refine' ae_restrict_of_ae_restrict_of_subset (subset_toMeasurable Œº s) _
    filter_upwards [ae_restrict_mem (measurableSet_toMeasurable Œº s)] with _ hx
    simp only [hx, Pi.one_apply, indicator_of_mem]
  filter_upwards [A, B] with x hx h'x
  rw [h'x] at hx
  apply hx.congr' _
  filter_upwards [v.eventually_filterAt_measurableSet x] with _ ha
  congr 1
  exact measure_toMeasurable_inter_of_sFinite ha _
#align vitali_family.ae_tendsto_measure_inter_div VitaliFamily.ae_tendsto_measure_inter_div

/-! ### Lebesgue differentiation theorem -/

theorem ae_tendsto_lintegral_div' {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : Measurable f) (h'f : (‚à´‚Åª y, f y ‚àÇŒº) ‚â† ‚àû) :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => (‚à´‚Åª y in a, f y ‚àÇŒº) / Œº a) (v.filterAt x) (ùìù (f x)) := by
  let œÅ := Œº.withDensity f
  have : IsFiniteMeasure œÅ := isFiniteMeasure_withDensity h'f
  filter_upwards [ae_tendsto_rnDeriv v œÅ, rnDeriv_withDensity Œº hf] with x hx h'x
  rw [‚Üê h'x]
  apply hx.congr' _
  filter_upwards [v.eventually_filterAt_measurableSet x] with a ha
  rw [‚Üê withDensity_apply f ha]
#align vitali_family.ae_tendsto_lintegral_div' VitaliFamily.ae_tendsto_lintegral_div'

theorem ae_tendsto_lintegral_div {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : AEMeasurable f Œº) (h'f : (‚à´‚Åª y, f y ‚àÇŒº) ‚â† ‚àû) :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => (‚à´‚Åª y in a, f y ‚àÇŒº) / Œº a) (v.filterAt x) (ùìù (f x)) := by
  have A : (‚à´‚Åª y, hf.mk f y ‚àÇŒº) ‚â† ‚àû := by
    convert h'f using 1
    apply lintegral_congr_ae
    exact hf.ae_eq_mk.symm
  filter_upwards [v.ae_tendsto_lintegral_div' hf.measurable_mk A, hf.ae_eq_mk] with x hx h'x
  rw [h'x]
  convert hx using 1
  ext1 a
  congr 1
  apply lintegral_congr_ae
  exact ae_restrict_of_ae hf.ae_eq_mk
#align vitali_family.ae_tendsto_lintegral_div VitaliFamily.ae_tendsto_lintegral_div

theorem ae_tendsto_lintegral_nnnorm_sub_div'_of_integrable {f : Œ± ‚Üí E} (hf : Integrable f Œº)
    (h'f : StronglyMeasurable f) :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => (‚à´‚Åª y in a, ‚Äñf y - f x‚Äñ‚Çä ‚àÇŒº) / Œº a) (v.filterAt x) (ùìù 0) := by
  /- For every `c`, then `(‚à´‚Åª y in a, ‚Äñf y - c‚Äñ‚Çä ‚àÇŒº) / Œº a` tends almost everywhere to `‚Äñf x - c‚Äñ`.
    We apply this to a countable set of `c` which is dense in the range of `f`, to deduce the
    desired convergence.
    A minor technical inconvenience is that constants are not integrable, so to apply previous
    lemmas we need to replace `c` with the restriction of `c` to a finite measure set `A n` in the
    above sketch. -/
  let A := MeasureTheory.Measure.finiteSpanningSetsInOpen' Œº
  rcases h'f.isSeparable_range with ‚ü®t, t_count, ht‚ü©
  have main :
    ‚àÄ·µê x ‚àÇŒº,
      ‚àÄ·µâ (n : ‚Ñï) (c ‚àà t),
        Tendsto (fun a => (‚à´‚Åª y in a, ‚Äñf y - (A.set n).indicator (fun _ => c) y‚Äñ‚Çä ‚àÇŒº) / Œº a)
          (v.filterAt x) (ùìù ‚Äñf x - (A.set n).indicator (fun _ => c) x‚Äñ‚Çä) := by
    simp_rw [ae_all_iff, ae_ball_iff t_count]
    intro n c _
    apply ae_tendsto_lintegral_div'
    ¬∑ refine' (h'f.sub _).ennnorm
      exact stronglyMeasurable_const.indicator (IsOpen.measurableSet (A.set_mem n))
    ¬∑ apply ne_of_lt
      calc
        (‚à´‚Åª y, ‚Üë‚Äñf y - (A.set n).indicator (fun _ : Œ± => c) y‚Äñ‚Çä ‚àÇŒº) ‚â§
            ‚à´‚Åª y, ‚Äñf y‚Äñ‚Çä + ‚Äñ(A.set n).indicator (fun _ : Œ± => c) y‚Äñ‚Çä ‚àÇŒº := by
          apply lintegral_mono
          intro x
          dsimp
          rw [‚Üê ENNReal.coe_add]
          exact ENNReal.coe_le_coe.2 (nnnorm_sub_le _ _)
        _ = (‚à´‚Åª y, ‚Äñf y‚Äñ‚Çä ‚àÇŒº) + ‚à´‚Åª y, ‚Äñ(A.set n).indicator (fun _ : Œ± => c) y‚Äñ‚Çä ‚àÇŒº :=
          (lintegral_add_left h'f.ennnorm _)
        _ < ‚àû + ‚àû :=
          haveI I : Integrable ((A.set n).indicator fun _ : Œ± => c) Œº := by
            simp only [integrable_indicator_iff (IsOpen.measurableSet (A.set_mem n)),
              integrableOn_const, A.finite n, or_true_iff]
          ENNReal.add_lt_add hf.2 I.2
  filter_upwards [main, v.ae_eventually_measure_pos] with x hx h'x
  have M :
    ‚àÄ c ‚àà t, Tendsto (fun a => (‚à´‚Åª y in a, ‚Äñf y - c‚Äñ‚Çä ‚àÇŒº) / Œº a)
      (v.filterAt x) (ùìù ‚Äñf x - c‚Äñ‚Çä) := by
    intro c hc
    obtain ‚ü®n, xn‚ü© : ‚àÉ n, x ‚àà A.set n := by simpa [‚Üê A.spanning] using mem_univ x
    specialize hx n c hc
    simp only [xn, indicator_of_mem] at hx
    apply hx.congr' _
    filter_upwards [v.eventually_filterAt_subset_of_nhds (IsOpen.mem_nhds (A.set_mem n) xn),
      v.eventually_filterAt_measurableSet x] with a ha h'a
    congr 1
    apply set_lintegral_congr_fun h'a
    filter_upwards with y hy using (by simp only [ha hy, indicator_of_mem])
  apply ENNReal.tendsto_nhds_zero.2 fun Œµ Œµpos => ?_
  obtain ‚ü®c, ct, xc‚ü© : ‚àÉ c ‚àà t, (‚Äñf x - c‚Äñ‚Çä : ‚Ñù‚â•0‚àû) < Œµ / 2 := by
    simp_rw [‚Üê edist_eq_coe_nnnorm_sub]
    have : f x ‚àà closure t := ht (mem_range_self _)
    exact EMetric.mem_closure_iff.1 this (Œµ / 2) (ENNReal.half_pos (ne_of_gt Œµpos))
  filter_upwards [(tendsto_order.1 (M c ct)).2 (Œµ / 2) xc, h'x, v.eventually_measure_lt_top x] with
    a ha h'a h''a
  apply ENNReal.div_le_of_le_mul
  calc
    (‚à´‚Åª y in a, ‚Äñf y - f x‚Äñ‚Çä ‚àÇŒº) ‚â§ ‚à´‚Åª y in a, ‚Äñf y - c‚Äñ‚Çä + ‚Äñf x - c‚Äñ‚Çä ‚àÇŒº := by
      apply lintegral_mono fun x => ?_
      simpa only [‚Üê edist_eq_coe_nnnorm_sub] using edist_triangle_right _ _ _
    _ = (‚à´‚Åª y in a, ‚Äñf y - c‚Äñ‚Çä ‚àÇŒº) + ‚à´‚Åª _ in a, ‚Äñf x - c‚Äñ‚Çä ‚àÇŒº :=
      (lintegral_add_right _ measurable_const)
    _ ‚â§ Œµ / 2 * Œº a + Œµ / 2 * Œº a := by
      gcongr
      ¬∑ rw [ENNReal.div_lt_iff (Or.inl h'a.ne') (Or.inl h''a.ne)] at ha
        exact ha.le
      ¬∑ simp only [lintegral_const, Measure.restrict_apply, MeasurableSet.univ, univ_inter]
        gcongr
    _ = Œµ * Œº a := by rw [‚Üê add_mul, ENNReal.add_halves]
#align vitali_family.ae_tendsto_lintegral_nnnorm_sub_div' VitaliFamily.ae_tendsto_lintegral_nnnorm_sub_div'_of_integrable

theorem ae_tendsto_lintegral_nnnorm_sub_div_of_integrable {f : Œ± ‚Üí E} (hf : Integrable f Œº) :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => (‚à´‚Åª y in a, ‚Äñf y - f x‚Äñ‚Çä ‚àÇŒº) / Œº a) (v.filterAt x) (ùìù 0) := by
  have I : Integrable (hf.1.mk f) Œº := hf.congr hf.1.ae_eq_mk
  filter_upwards [v.ae_tendsto_lintegral_nnnorm_sub_div'_of_integrable I hf.1.stronglyMeasurable_mk,
    hf.1.ae_eq_mk] with x hx h'x
  apply hx.congr _
  intro a
  congr 1
  apply lintegral_congr_ae
  apply ae_restrict_of_ae
  filter_upwards [hf.1.ae_eq_mk] with y hy
  rw [hy, h'x]
#align vitali_family.ae_tendsto_lintegral_nnnorm_sub_div VitaliFamily.ae_tendsto_lintegral_nnnorm_sub_div_of_integrable

theorem ae_tendsto_lintegral_nnnorm_sub_div {f : Œ± ‚Üí E} (hf : LocallyIntegrable f Œº) :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => (‚à´‚Åª y in a, ‚Äñf y - f x‚Äñ‚Çä ‚àÇŒº) / Œº a) (v.filterAt x) (ùìù 0) := by
  rcases hf.exists_nat_integrableOn with ‚ü®u, u_open, u_univ, hu‚ü©
  have : ‚àÄ n, ‚àÄ·µê x ‚àÇŒº,
      Tendsto (fun a => (‚à´‚Åª y in a, ‚Äñ(u n).indicator f y - (u n).indicator f x‚Äñ‚Çä ‚àÇŒº) / Œº a)
      (v.filterAt x) (ùìù 0) := by
    intro n
    apply ae_tendsto_lintegral_nnnorm_sub_div_of_integrable
    exact (integrable_indicator_iff (u_open n).measurableSet).2 (hu n)
  filter_upwards [ae_all_iff.2 this] with x hx
  obtain ‚ü®n, hn‚ü© : ‚àÉ n, x ‚àà u n := by simpa only [‚Üê u_univ, mem_iUnion] using mem_univ x
  apply Tendsto.congr' _ (hx n)
  filter_upwards [v.eventually_filterAt_subset_of_nhds ((u_open n).mem_nhds hn),
    v.eventually_filterAt_measurableSet x] with a ha h'a
  congr 1
  refine' set_lintegral_congr_fun h'a (eventually_of_forall (fun y hy ‚Ü¶ _))
  rw [indicator_of_mem (ha hy) f, indicator_of_mem hn f]

theorem eventually_filterAt_integrableOn (x : Œ±) {f : Œ± ‚Üí E} (hf : LocallyIntegrable f Œº) :
    ‚àÄ·∂† a in v.filterAt x, IntegrableOn f a Œº := by
  rcases hf x with ‚ü®w, w_nhds, hw‚ü©
  filter_upwards [v.eventually_filterAt_subset_of_nhds w_nhds] with a ha
  exact hw.mono_set ha

/-- *Lebesgue differentiation theorem*: for almost every point `x`, the
average of `‚Äñf y - f x‚Äñ` on `a` tends to `0` as `a` shrinks to `x` along a Vitali family.-/
theorem ae_tendsto_average_norm_sub {f : Œ± ‚Üí E} (hf : LocallyIntegrable f Œº) :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => ‚®ç y in a, ‚Äñf y - f x‚Äñ ‚àÇŒº) (v.filterAt x) (ùìù 0) := by
  filter_upwards [v.ae_tendsto_lintegral_nnnorm_sub_div hf] with x hx
  have := (ENNReal.tendsto_toReal ENNReal.zero_ne_top).comp hx
  simp only [ENNReal.zero_toReal] at this
  apply Tendsto.congr' _ this
  filter_upwards [v.eventually_measure_lt_top x, v.eventually_filterAt_integrableOn x hf]
    with a h'a h''a
  simp only [Function.comp_apply, ENNReal.toReal_div, setAverage_eq, div_eq_inv_mul]
  have A : IntegrableOn (fun y => (‚Äñf y - f x‚Äñ‚Çä : ‚Ñù)) a Œº := by
    simp_rw [coe_nnnorm]
    exact (h''a.sub (integrableOn_const.2 (Or.inr h'a))).norm
  rw [lintegral_coe_eq_integral _ A, ENNReal.toReal_ofReal (by positivity)]
  rfl

/-- *Lebesgue differentiation theorem*: for almost every point `x`, the
average of `f` on `a` tends to `f x` as `a` shrinks to `x` along a Vitali family.-/
theorem ae_tendsto_average [NormedSpace ‚Ñù E] [CompleteSpace E] {f : Œ± ‚Üí E}
    (hf : LocallyIntegrable f Œº) :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun a => ‚®ç y in a, f y ‚àÇŒº) (v.filterAt x) (ùìù (f x)) := by
  filter_upwards [v.ae_tendsto_average_norm_sub hf, v.ae_eventually_measure_pos] with x hx h'x
  rw [tendsto_iff_norm_sub_tendsto_zero]
  refine' squeeze_zero' (eventually_of_forall fun a => norm_nonneg _) _ hx
  filter_upwards [h'x, v.eventually_measure_lt_top x, v.eventually_filterAt_integrableOn x hf]
    with a ha h'a h''a
  nth_rw 1 [‚Üê setAverage_const ha.ne' h'a.ne (f x)]
  simp_rw [setAverage_eq']
  rw [‚Üê integral_sub]
  ¬∑ exact norm_integral_le_integral_norm _
  ¬∑ exact (integrable_inv_smul_measure ha.ne' h'a.ne).2 h''a
  ¬∑ exact (integrable_inv_smul_measure ha.ne' h'a.ne).2 (integrableOn_const.2 (Or.inr h'a))

end

end VitaliFamily
