/-
Copyright (c) 2022 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import Mathlib.MeasureTheory.Covering.DensityTheorem

#align_import measure_theory.covering.liminf_limsup from "leanprover-community/mathlib"@"5f6e827d81dfbeb6151d7016586ceeb0099b9655"

/-!
# Liminf, limsup, and uniformly locally doubling measures.

This file is a place to collect lemmas about liminf and limsup for subsets of a metric space
carrying a uniformly locally doubling measure.

## Main results:

 * `blimsup_cthickening_mul_ae_eq`: the limsup of the closed thickening of a sequence of subsets
   of a metric space is unchanged almost everywhere for a uniformly locally doubling measure if the
   sequence of distances is multiplied by a positive scale factor. This is a generalisation of a
   result of Cassels, appearing as Lemma 9 on page 217 of
   [J.W.S. Cassels, *Some metrical theorems in Diophantine approximation. I*](cassels1950).
 * `blimsup_thickening_mul_ae_eq`: a variant of `blimsup_cthickening_mul_ae_eq` for thickenings
   rather than closed thickenings.

-/


open Set Filter Metric MeasureTheory TopologicalSpace

open scoped NNReal ENNReal Topology

variable {Œ± : Type*} [MetricSpace Œ±] [SecondCountableTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]
variable (Œº : Measure Œ±) [IsLocallyFiniteMeasure Œº] [IsUnifLocDoublingMeasure Œº]

/-- This is really an auxiliary result en route to `blimsup_cthickening_ae_le_of_eventually_mul_le`
(which is itself an auxiliary result en route to `blimsup_cthickening_mul_ae_eq`).

NB: The `: Set Œ±` type ascription is present because of
https://github.com/leanprover-community/mathlib/issues/16932. -/
theorem blimsup_cthickening_ae_le_of_eventually_mul_le_aux (p : ‚Ñï ‚Üí Prop) {s : ‚Ñï ‚Üí Set Œ±}
    (hs : ‚àÄ i, IsClosed (s i)) {r‚ÇÅ r‚ÇÇ : ‚Ñï ‚Üí ‚Ñù} (hr : Tendsto r‚ÇÅ atTop (ùìù[>] 0)) (hrp : 0 ‚â§ r‚ÇÅ)
    {M : ‚Ñù} (hM : 0 < M) (hM' : M < 1) (hMr : ‚àÄ·∂† i in atTop, M * r‚ÇÅ i ‚â§ r‚ÇÇ i) :
    (blimsup (fun i => cthickening (r‚ÇÅ i) (s i)) atTop p : Set Œ±) ‚â§·µê[Œº]
      (blimsup (fun i => cthickening (r‚ÇÇ i) (s i)) atTop p : Set Œ±) := by
  /- Sketch of proof:

  Assume that `p` is identically true for simplicity. Let `Y‚ÇÅ i = cthickening (r‚ÇÅ i) (s i)`, define
  `Y‚ÇÇ` similarly except using `r‚ÇÇ`, and let `(Z i) = ‚ãÉ_{j ‚â• i} (Y‚ÇÇ j)`. Our goal is equivalent to
  showing that `Œº ((limsup Y‚ÇÅ) \ (Z i)) = 0` for all `i`.

  Assume for contradiction that `Œº ((limsup Y‚ÇÅ) \ (Z i)) ‚â† 0` for some `i` and let
  `W = (limsup Y‚ÇÅ) \ (Z i)`. Apply Lebesgue's density theorem to obtain a point `d` in `W` of
  density `1`. Since `d ‚àà limsup Y‚ÇÅ`, there is a subsequence of `j ‚Ü¶ Y‚ÇÅ j`, indexed by
  `f 0 < f 1 < ...`, such that `d ‚àà Y‚ÇÅ (f j)` for all `j`. For each `j`, we may thus choose
  `w j ‚àà s (f j)` such that `d ‚àà B j`, where `B j = closedBall (w j) (r‚ÇÅ (f j))`. Note that
  since `d` has density one, `Œº (W ‚à© (B j)) / Œº (B j) ‚Üí 1`.

  We obtain our contradiction by showing that there exists `Œ∑ < 1` such that
  `Œº (W ‚à© (B j)) / Œº (B j) ‚â§ Œ∑` for sufficiently large `j`. In fact we claim that `Œ∑ = 1 - C‚Åª¬π`
  is such a value where `C` is the scaling constant of `M‚Åª¬π` for the uniformly locally doubling
  measure `Œº`.

  To prove the claim, let `b j = closedBall (w j) (M * r‚ÇÅ (f j))` and for given `j` consider the
  sets `b j` and `W ‚à© (B j)`. These are both subsets of `B j` and are disjoint for large enough `j`
  since `M * r‚ÇÅ j ‚â§ r‚ÇÇ j` and thus `b j ‚äÜ Z i ‚äÜ W·∂ú`. We thus have:
  `Œº (b j) + Œº (W ‚à© (B j)) ‚â§ Œº (B j)`. Combining this with `Œº (B j) ‚â§ C * Œº (b j)` we obtain
  the required inequality. -/
  set Y‚ÇÅ : ‚Ñï ‚Üí Set Œ± := fun i => cthickening (r‚ÇÅ i) (s i)
  set Y‚ÇÇ : ‚Ñï ‚Üí Set Œ± := fun i => cthickening (r‚ÇÇ i) (s i)
  let Z : ‚Ñï ‚Üí Set Œ± := fun i => ‚ãÉ (j) (_ : p j ‚àß i ‚â§ j), Y‚ÇÇ j
  suffices ‚àÄ i, Œº (atTop.blimsup Y‚ÇÅ p \ Z i) = 0 by
    rwa [ae_le_set, @blimsup_eq_iInf_biSup_of_nat _ _ _ Y‚ÇÇ, iInf_eq_iInter, diff_iInter,
      measure_iUnion_null_iff]
  intros i
  set W := atTop.blimsup Y‚ÇÅ p \ Z i
  by_contra contra
  obtain ‚ü®d, hd, hd'‚ü© : ‚àÉ d, d ‚àà W ‚àß ‚àÄ {Œπ : Type _} {l : Filter Œπ} (w : Œπ ‚Üí Œ±) (Œ¥ : Œπ ‚Üí ‚Ñù),
      Tendsto Œ¥ l (ùìù[>] 0) ‚Üí (‚àÄ·∂† j in l, d ‚àà closedBall (w j) (2 * Œ¥ j)) ‚Üí
        Tendsto (fun j => Œº (W ‚à© closedBall (w j) (Œ¥ j)) / Œº (closedBall (w j) (Œ¥ j))) l (ùìù 1) :=
    Measure.exists_mem_of_measure_ne_zero_of_ae contra
      (IsUnifLocDoublingMeasure.ae_tendsto_measure_inter_div Œº W 2)
  replace hd : d ‚àà blimsup Y‚ÇÅ atTop p := ((mem_diff _).mp hd).1
  obtain ‚ü®f : ‚Ñï ‚Üí ‚Ñï, hf‚ü© := exists_forall_mem_of_hasBasis_mem_blimsup' atTop_basis hd
  simp only [forall_and] at hf
  obtain ‚ü®hf‚ÇÄ : ‚àÄ j, d ‚àà cthickening (r‚ÇÅ (f j)) (s (f j)), hf‚ÇÅ, hf‚ÇÇ : ‚àÄ j, j ‚â§ f j‚ü© := hf
  have hf‚ÇÉ : Tendsto f atTop atTop :=
    tendsto_atTop_atTop.mpr fun j => ‚ü®f j, fun i hi => (hf‚ÇÇ j).trans (hi.trans <| hf‚ÇÇ i)‚ü©
  replace hr : Tendsto (r‚ÇÅ ‚àò f) atTop (ùìù[>] 0) := hr.comp hf‚ÇÉ
  replace hMr : ‚àÄ·∂† j in atTop, M * r‚ÇÅ (f j) ‚â§ r‚ÇÇ (f j) := hf‚ÇÉ.eventually hMr
  replace hf‚ÇÄ : ‚àÄ j, ‚àÉ w ‚àà s (f j), d ‚àà closedBall w (2 * r‚ÇÅ (f j)) := by
    intro j
    specialize hrp (f j)
    rw [Pi.zero_apply] at hrp
    rcases eq_or_lt_of_le hrp with (hr0 | hrp')
    ¬∑ specialize hf‚ÇÄ j
      rw [‚Üê hr0, cthickening_zero, (hs (f j)).closure_eq] at hf‚ÇÄ
      exact ‚ü®d, hf‚ÇÄ, by simp [‚Üê hr0]‚ü©
    ¬∑ simpa using mem_iUnion‚ÇÇ.mp (cthickening_subset_iUnion_closedBall_of_lt (s (f j))
        (by positivity) (lt_two_mul_self hrp') (hf‚ÇÄ j))
  choose w hw hw' using hf‚ÇÄ
  let C := IsUnifLocDoublingMeasure.scalingConstantOf Œº M‚Åª¬π
  have hC : 0 < C :=
    lt_of_lt_of_le zero_lt_one (IsUnifLocDoublingMeasure.one_le_scalingConstantOf Œº M‚Åª¬π)
  suffices ‚àÉ Œ∑ < (1 : ‚Ñù‚â•0),
      ‚àÄ·∂† j in atTop, Œº (W ‚à© closedBall (w j) (r‚ÇÅ (f j))) / Œº (closedBall (w j) (r‚ÇÅ (f j))) ‚â§ Œ∑ by
    obtain ‚ü®Œ∑, hŒ∑, hŒ∑'‚ü© := this
    replace hŒ∑' : 1 ‚â§ Œ∑ := by
      simpa only [ENNReal.one_le_coe_iff] using
        le_of_tendsto (hd' w (fun j => r‚ÇÅ (f j)) hr <| eventually_of_forall hw') hŒ∑'
    exact (lt_self_iff_false _).mp (lt_of_lt_of_le hŒ∑ hŒ∑')
  refine' ‚ü®1 - C‚Åª¬π, tsub_lt_self zero_lt_one (inv_pos.mpr hC), _‚ü©
  replace hC : C ‚â† 0 := ne_of_gt hC
  let b : ‚Ñï ‚Üí Set Œ± := fun j => closedBall (w j) (M * r‚ÇÅ (f j))
  let B : ‚Ñï ‚Üí Set Œ± := fun j => closedBall (w j) (r‚ÇÅ (f j))
  have h‚ÇÅ : ‚àÄ j, b j ‚äÜ B j := fun j =>
    closedBall_subset_closedBall (mul_le_of_le_one_left (hrp (f j)) hM'.le)
  have h‚ÇÇ : ‚àÄ j, W ‚à© B j ‚äÜ B j := fun j => inter_subset_right W (B j)
  have h‚ÇÉ : ‚àÄ·∂† j in atTop, Disjoint (b j) (W ‚à© B j) := by
    apply hMr.mp
    rw [eventually_atTop]
    refine'
      ‚ü®i, fun j hj hj' => Disjoint.inf_right (B j) <| Disjoint.inf_right' (blimsup Y‚ÇÅ atTop p) _‚ü©
    change Disjoint (b j) (Z i)·∂ú
    rw [disjoint_compl_right_iff_subset]
    refine' (closedBall_subset_cthickening (hw j) (M * r‚ÇÅ (f j))).trans
      ((cthickening_mono hj' _).trans fun a ha => _)
    simp only [Z, mem_iUnion, exists_prop]
    exact ‚ü®f j, ‚ü®hf‚ÇÅ j, hj.le.trans (hf‚ÇÇ j)‚ü©, ha‚ü©
  have h‚ÇÑ : ‚àÄ·∂† j in atTop, Œº (B j) ‚â§ C * Œº (b j) :=
    (hr.eventually (IsUnifLocDoublingMeasure.eventually_measure_le_scaling_constant_mul'
      Œº M hM)).mono fun j hj => hj (w j)
  refine (h‚ÇÉ.and h‚ÇÑ).mono fun j hj‚ÇÄ => ?_
  change Œº (W ‚à© B j) / Œº (B j) ‚â§ ‚Üë(1 - C‚Åª¬π)
  rcases eq_or_ne (Œº (B j)) ‚àû with (hB | hB); ¬∑ simp [hB]
  apply ENNReal.div_le_of_le_mul
  rw [ENNReal.coe_sub, ENNReal.coe_one, ENNReal.sub_mul fun _ _ => hB, one_mul]
  replace hB : ‚ÜëC‚Åª¬π * Œº (B j) ‚â† ‚àû := by
    refine ENNReal.mul_ne_top ?_ hB
    rwa [ENNReal.coe_inv hC, Ne, ENNReal.inv_eq_top, ENNReal.coe_eq_zero]
  obtain ‚ü®hj‚ÇÅ : Disjoint (b j) (W ‚à© B j), hj‚ÇÇ : Œº (B j) ‚â§ C * Œº (b j)‚ü© := hj‚ÇÄ
  replace hj‚ÇÇ : ‚ÜëC‚Åª¬π * Œº (B j) ‚â§ Œº (b j) := by
    rw [ENNReal.coe_inv hC, ‚Üê ENNReal.div_eq_inv_mul]
    exact ENNReal.div_le_of_le_mul' hj‚ÇÇ
  have hj‚ÇÉ : ‚ÜëC‚Åª¬π * Œº (B j) + Œº (W ‚à© B j) ‚â§ Œº (B j) := by
    refine' le_trans (add_le_add_right hj‚ÇÇ _) _
    rw [‚Üê measure_union' hj‚ÇÅ measurableSet_closedBall]
    exact measure_mono (union_subset (h‚ÇÅ j) (h‚ÇÇ j))
  replace hj‚ÇÉ := tsub_le_tsub_right hj‚ÇÉ (‚ÜëC‚Åª¬π * Œº (B j))
  rwa [ENNReal.add_sub_cancel_left hB] at hj‚ÇÉ
#align blimsup_cthickening_ae_le_of_eventually_mul_le_aux blimsup_cthickening_ae_le_of_eventually_mul_le_aux

/-- This is really an auxiliary result en route to `blimsup_cthickening_mul_ae_eq`.

NB: The `: Set Œ±` type ascription is present because of
https://github.com/leanprover-community/mathlib/issues/16932. -/
theorem blimsup_cthickening_ae_le_of_eventually_mul_le (p : ‚Ñï ‚Üí Prop) {s : ‚Ñï ‚Üí Set Œ±} {M : ‚Ñù}
    (hM : 0 < M) {r‚ÇÅ r‚ÇÇ : ‚Ñï ‚Üí ‚Ñù} (hr : Tendsto r‚ÇÅ atTop (ùìù[>] 0))
    (hMr : ‚àÄ·∂† i in atTop, M * r‚ÇÅ i ‚â§ r‚ÇÇ i) :
    (blimsup (fun i => cthickening (r‚ÇÅ i) (s i)) atTop p : Set Œ±) ‚â§·µê[Œº]
      (blimsup (fun i => cthickening (r‚ÇÇ i) (s i)) atTop p : Set Œ±) := by
  let R‚ÇÅ i := max 0 (r‚ÇÅ i)
  let R‚ÇÇ i := max 0 (r‚ÇÇ i)
  have hRp : 0 ‚â§ R‚ÇÅ := fun i => le_max_left 0 (r‚ÇÅ i)
  replace hMr : ‚àÄ·∂† i in atTop, M * R‚ÇÅ i ‚â§ R‚ÇÇ i := by
    refine hMr.mono fun i hi ‚Ü¶ ?_
    rw [mul_max_of_nonneg _ _ hM.le, mul_zero]
    exact max_le_max (le_refl 0) hi
  simp_rw [‚Üê cthickening_max_zero (r‚ÇÅ _), ‚Üê cthickening_max_zero (r‚ÇÇ _)]
  rcases le_or_lt 1 M with hM' | hM'
  ¬∑ apply HasSubset.Subset.eventuallyLE
    change _ ‚â§ _
    refine' mono_blimsup' (hMr.mono fun i hi _ => cthickening_mono _ (s i))
    exact (le_mul_of_one_le_left (hRp i) hM').trans hi
  ¬∑ simp only [‚Üê @cthickening_closure _ _ _ (s _)]
    have hs : ‚àÄ i, IsClosed (closure (s i)) := fun i => isClosed_closure
    exact blimsup_cthickening_ae_le_of_eventually_mul_le_aux Œº p hs
      (tendsto_nhds_max_right hr) hRp hM hM' hMr
#align blimsup_cthickening_ae_le_of_eventually_mul_le blimsup_cthickening_ae_le_of_eventually_mul_le

/-- Given a sequence of subsets `s·µ¢` of a metric space, together with a sequence of radii `r·µ¢`
such that `r·µ¢ ‚Üí 0`, the set of points which belong to infinitely many of the closed
`r·µ¢`-thickenings of `s·µ¢` is unchanged almost everywhere for a uniformly locally doubling measure if
the `r·µ¢` are all scaled by a positive constant.

This lemma is a generalisation of Lemma 9 appearing on page 217 of
[J.W.S. Cassels, *Some metrical theorems in Diophantine approximation. I*](cassels1950).

See also `blimsup_thickening_mul_ae_eq`.

NB: The `: Set Œ±` type ascription is present because of
https://github.com/leanprover-community/mathlib/issues/16932. -/
theorem blimsup_cthickening_mul_ae_eq (p : ‚Ñï ‚Üí Prop) (s : ‚Ñï ‚Üí Set Œ±) {M : ‚Ñù} (hM : 0 < M)
    (r : ‚Ñï ‚Üí ‚Ñù) (hr : Tendsto r atTop (ùìù 0)) :
    (blimsup (fun i => cthickening (M * r i) (s i)) atTop p : Set Œ±) =·µê[Œº]
      (blimsup (fun i => cthickening (r i) (s i)) atTop p : Set Œ±) := by
  have : ‚àÄ (p : ‚Ñï ‚Üí Prop) {r : ‚Ñï ‚Üí ‚Ñù} (_ : Tendsto r atTop (ùìù[>] 0)),
      (blimsup (fun i => cthickening (M * r i) (s i)) atTop p : Set Œ±) =·µê[Œº]
        (blimsup (fun i => cthickening (r i) (s i)) atTop p : Set Œ±) := by
    clear p hr r; intro p r hr
    have hr' : Tendsto (fun i => M * r i) atTop (ùìù[>] 0) := by
      convert TendstoNhdsWithinIoi.const_mul hM hr <;> simp only [mul_zero]
    refine' eventuallyLE_antisymm_iff.mpr ‚ü®_, _‚ü©
    ¬∑ exact blimsup_cthickening_ae_le_of_eventually_mul_le Œº p (inv_pos.mpr hM) hr'
        (eventually_of_forall fun i => by rw [inv_mul_cancel_left‚ÇÄ hM.ne' (r i)])
    ¬∑ exact blimsup_cthickening_ae_le_of_eventually_mul_le Œº p hM hr
        (eventually_of_forall fun i => le_refl _)
  let r' : ‚Ñï ‚Üí ‚Ñù := fun i => if 0 < r i then r i else 1 / ((i : ‚Ñù) + 1)
  have hr' : Tendsto r' atTop (ùìù[>] 0) := by
    refine' tendsto_nhdsWithin_iff.mpr
      ‚ü®Tendsto.if' hr tendsto_one_div_add_atTop_nhds_zero_nat, eventually_of_forall fun i => _‚ü©
    by_cases hi : 0 < r i
    ¬∑ simp [r', hi]
    ¬∑ simp only [r', hi, one_div, mem_Ioi, if_false, inv_pos]; positivity
  have h‚ÇÄ : ‚àÄ i, p i ‚àß 0 < r i ‚Üí cthickening (r i) (s i) = cthickening (r' i) (s i) := by
    rintro i ‚ü®-, hi‚ü©; congr! 1; change r i = ite (0 < r i) (r i) _; simp [hi]
  have h‚ÇÅ : ‚àÄ i, p i ‚àß 0 < r i ‚Üí cthickening (M * r i) (s i) = cthickening (M * r' i) (s i) := by
    rintro i ‚ü®-, hi‚ü©; simp only [r', hi, mul_ite, if_true]
  have h‚ÇÇ : ‚àÄ i, p i ‚àß r i ‚â§ 0 ‚Üí cthickening (M * r i) (s i) = cthickening (r i) (s i) := by
    rintro i ‚ü®-, hi‚ü©
    have hi' : M * r i ‚â§ 0 := mul_nonpos_of_nonneg_of_nonpos hM.le hi
    rw [cthickening_of_nonpos hi, cthickening_of_nonpos hi']
  have hp : p = fun i => p i ‚àß 0 < r i ‚à® p i ‚àß r i ‚â§ 0 := by
    ext i; simp [‚Üê and_or_left, lt_or_le 0 (r i)]
  rw [hp, blimsup_or_eq_sup, blimsup_or_eq_sup]
  simp only [sup_eq_union]
  rw [blimsup_congr (eventually_of_forall h‚ÇÄ), blimsup_congr (eventually_of_forall h‚ÇÅ),
    blimsup_congr (eventually_of_forall h‚ÇÇ)]
  exact ae_eq_set_union (this (fun i => p i ‚àß 0 < r i) hr') (ae_eq_refl _)
#align blimsup_cthickening_mul_ae_eq blimsup_cthickening_mul_ae_eq

theorem blimsup_cthickening_ae_eq_blimsup_thickening {p : ‚Ñï ‚Üí Prop} {s : ‚Ñï ‚Üí Set Œ±} {r : ‚Ñï ‚Üí ‚Ñù}
    (hr : Tendsto r atTop (ùìù 0)) (hr' : ‚àÄ·∂† i in atTop, p i ‚Üí 0 < r i) :
    (blimsup (fun i => cthickening (r i) (s i)) atTop p : Set Œ±) =·µê[Œº]
      (blimsup (fun i => thickening (r i) (s i)) atTop p : Set Œ±) := by
  refine' eventuallyLE_antisymm_iff.mpr ‚ü®_, HasSubset.Subset.eventuallyLE (_ : _ ‚â§ _)‚ü©
  ¬∑ rw [eventuallyLE_congr (blimsup_cthickening_mul_ae_eq Œº p s (@one_half_pos ‚Ñù _) r hr).symm
      EventuallyEq.rfl]
    apply HasSubset.Subset.eventuallyLE
    change _ ‚â§ _
    refine' mono_blimsup' (hr'.mono fun i hi pi => cthickening_subset_thickening' (hi pi) _ (s i))
    nlinarith [hi pi]
  ¬∑ exact mono_blimsup fun i _ => thickening_subset_cthickening _ _
#align blimsup_cthickening_ae_eq_blimsup_thickening blimsup_cthickening_ae_eq_blimsup_thickening

/-- An auxiliary result en route to `blimsup_thickening_mul_ae_eq`. -/
theorem blimsup_thickening_mul_ae_eq_aux (p : ‚Ñï ‚Üí Prop) (s : ‚Ñï ‚Üí Set Œ±) {M : ‚Ñù} (hM : 0 < M)
    (r : ‚Ñï ‚Üí ‚Ñù) (hr : Tendsto r atTop (ùìù 0)) (hr' : ‚àÄ·∂† i in atTop, p i ‚Üí 0 < r i) :
    (blimsup (fun i => thickening (M * r i) (s i)) atTop p : Set Œ±) =·µê[Œº]
      (blimsup (fun i => thickening (r i) (s i)) atTop p : Set Œ±) := by
  have h‚ÇÅ := blimsup_cthickening_ae_eq_blimsup_thickening (s := s) Œº hr hr'
  have h‚ÇÇ := blimsup_cthickening_mul_ae_eq Œº p s hM r hr
  replace hr : Tendsto (fun i => M * r i) atTop (ùìù 0) := by convert hr.const_mul M; simp
  replace hr' : ‚àÄ·∂† i in atTop, p i ‚Üí 0 < M * r i := hr'.mono fun i hi hip ‚Ü¶ mul_pos hM (hi hip)
  have h‚ÇÉ := blimsup_cthickening_ae_eq_blimsup_thickening (s := s) Œº hr hr'
  exact h‚ÇÉ.symm.trans (h‚ÇÇ.trans h‚ÇÅ)
#align blimsup_thickening_mul_ae_eq_aux blimsup_thickening_mul_ae_eq_aux

/-- Given a sequence of subsets `s·µ¢` of a metric space, together with a sequence of radii `r·µ¢`
such that `r·µ¢ ‚Üí 0`, the set of points which belong to infinitely many of the
`r·µ¢`-thickenings of `s·µ¢` is unchanged almost everywhere for a uniformly locally doubling measure if
the `r·µ¢` are all scaled by a positive constant.

This lemma is a generalisation of Lemma 9 appearing on page 217 of
[J.W.S. Cassels, *Some metrical theorems in Diophantine approximation. I*](cassels1950).

See also `blimsup_cthickening_mul_ae_eq`.

NB: The `: Set Œ±` type ascription is present because of
https://github.com/leanprover-community/mathlib/issues/16932. -/
theorem blimsup_thickening_mul_ae_eq (p : ‚Ñï ‚Üí Prop) (s : ‚Ñï ‚Üí Set Œ±) {M : ‚Ñù} (hM : 0 < M) (r : ‚Ñï ‚Üí ‚Ñù)
    (hr : Tendsto r atTop (ùìù 0)) :
    (blimsup (fun i => thickening (M * r i) (s i)) atTop p : Set Œ±) =·µê[Œº]
      (blimsup (fun i => thickening (r i) (s i)) atTop p : Set Œ±) := by
  let q : ‚Ñï ‚Üí Prop := fun i => p i ‚àß 0 < r i
  have h‚ÇÅ : blimsup (fun i => thickening (r i) (s i)) atTop p =
      blimsup (fun i => thickening (r i) (s i)) atTop q := by
    refine' blimsup_congr' (eventually_of_forall fun i h => _)
    replace hi : 0 < r i := by contrapose! h; apply thickening_of_nonpos h
    simp only [q, hi, iff_self_and, imp_true_iff]
  have h‚ÇÇ : blimsup (fun i => thickening (M * r i) (s i)) atTop p =
      blimsup (fun i => thickening (M * r i) (s i)) atTop q := by
    refine blimsup_congr' (eventually_of_forall fun i h ‚Ü¶ ?_)
    replace h : 0 < r i := by
      rw [‚Üê mul_pos_iff_of_pos_left hM]; contrapose! h; apply thickening_of_nonpos h
    simp only [q, h, iff_self_and, imp_true_iff]
  rw [h‚ÇÅ, h‚ÇÇ]
  exact blimsup_thickening_mul_ae_eq_aux Œº q s hM r hr (eventually_of_forall fun i hi => hi.2)
#align blimsup_thickening_mul_ae_eq blimsup_thickening_mul_ae_eq
