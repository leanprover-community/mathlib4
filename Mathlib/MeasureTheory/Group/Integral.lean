/-
Copyright (c) 2022 Floris van Doorn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn
-/
import Mathlib.MeasureTheory.Integral.Bochner
import Mathlib.MeasureTheory.Group.Measure

#align_import measure_theory.group.integration from "leanprover-community/mathlib"@"ec247d43814751ffceb33b758e8820df2372bf6f"

/-!
# Bochner Integration on Groups

We develop properties of integrals with a group as domain.
This file contains properties about integrability and Bochner integration.
-/

namespace MeasureTheory

open Measure TopologicalSpace

open scoped ENNReal

variable {ùïú M Œ± G E F : Type*} [MeasurableSpace G]

variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E] [NormedAddCommGroup F]

variable {Œº : Measure G} {f : G ‚Üí E} {g : G}

section MeasurableInv

variable [Group G] [MeasurableInv G]

@[to_additive]
theorem Integrable.comp_inv [IsInvInvariant Œº] {f : G ‚Üí F} (hf : Integrable f Œº) :
    Integrable (fun t => f t‚Åª¬π) Œº :=
  (hf.mono_measure (map_inv_eq_self Œº).le).comp_measurable measurable_inv
#align measure_theory.integrable.comp_inv MeasureTheory.Integrable.comp_inv
#align measure_theory.integrable.comp_neg MeasureTheory.Integrable.comp_neg

@[to_additive]
theorem integral_inv_eq_self (f : G ‚Üí E) (Œº : Measure G) [IsInvInvariant Œº] :
    ‚à´ x, f x‚Åª¬π ‚àÇŒº = ‚à´ x, f x ‚àÇŒº := by
  have h : MeasurableEmbedding fun x : G => x‚Åª¬π := (MeasurableEquiv.inv G).measurableEmbedding
  rw [‚Üê h.integral_map, map_inv_eq_self]
#align measure_theory.integral_inv_eq_self MeasureTheory.integral_inv_eq_self
#align measure_theory.integral_neg_eq_self MeasureTheory.integral_neg_eq_self

end MeasurableInv

section MeasurableMul

variable [Group G] [MeasurableMul G]

/-- Translating a function by left-multiplication does not change its integral with respect to a
left-invariant measure. -/
@[to_additive
      "Translating a function by left-addition does not change its integral with respect to a
      left-invariant measure."] -- Porting note: was `@[simp]`
theorem integral_mul_left_eq_self [IsMulLeftInvariant Œº] (f : G ‚Üí E) (g : G) :
    (‚à´ x, f (g * x) ‚àÇŒº) = ‚à´ x, f x ‚àÇŒº := by
  have h_mul : MeasurableEmbedding fun x => g * x := (MeasurableEquiv.mulLeft g).measurableEmbedding
  rw [‚Üê h_mul.integral_map, map_mul_left_eq_self]
#align measure_theory.integral_mul_left_eq_self MeasureTheory.integral_mul_left_eq_self
#align measure_theory.integral_add_left_eq_self MeasureTheory.integral_add_left_eq_self

/-- Translating a function by right-multiplication does not change its integral with respect to a
right-invariant measure. -/
@[to_additive
      "Translating a function by right-addition does not change its integral with respect to a
      right-invariant measure."] -- Porting note: was `@[simp]`
theorem integral_mul_right_eq_self [IsMulRightInvariant Œº] (f : G ‚Üí E) (g : G) :
    (‚à´ x, f (x * g) ‚àÇŒº) = ‚à´ x, f x ‚àÇŒº := by
  have h_mul : MeasurableEmbedding fun x => x * g :=
    (MeasurableEquiv.mulRight g).measurableEmbedding
  rw [‚Üê h_mul.integral_map, map_mul_right_eq_self]
#align measure_theory.integral_mul_right_eq_self MeasureTheory.integral_mul_right_eq_self
#align measure_theory.integral_add_right_eq_self MeasureTheory.integral_add_right_eq_self

@[to_additive] -- Porting note: was `@[simp]`
theorem integral_div_right_eq_self [IsMulRightInvariant Œº] (f : G ‚Üí E) (g : G) :
    (‚à´ x, f (x / g) ‚àÇŒº) = ‚à´ x, f x ‚àÇŒº := by
  simp_rw [div_eq_mul_inv]
  -- Porting note: was `simp_rw`
  rw [integral_mul_right_eq_self f g‚Åª¬π]
#align measure_theory.integral_div_right_eq_self MeasureTheory.integral_div_right_eq_self
#align measure_theory.integral_sub_right_eq_self MeasureTheory.integral_sub_right_eq_self

/-- If some left-translate of a function negates it, then the integral of the function with respect
to a left-invariant measure is 0. -/
@[to_additive
      "If some left-translate of a function negates it, then the integral of the function with
      respect to a left-invariant measure is 0."]
theorem integral_eq_zero_of_mul_left_eq_neg [IsMulLeftInvariant Œº] (hf' : ‚àÄ x, f (g * x) = -f x) :
    ‚à´ x, f x ‚àÇŒº = 0 := by
  simp_rw [‚Üê self_eq_neg ‚Ñù E, ‚Üê integral_neg, ‚Üê hf', integral_mul_left_eq_self]
#align measure_theory.integral_eq_zero_of_mul_left_eq_neg MeasureTheory.integral_eq_zero_of_mul_left_eq_neg
#align measure_theory.integral_eq_zero_of_add_left_eq_neg MeasureTheory.integral_eq_zero_of_add_left_eq_neg

/-- If some right-translate of a function negates it, then the integral of the function with respect
to a right-invariant measure is 0. -/
@[to_additive
      "If some right-translate of a function negates it, then the integral of the function with
      respect to a right-invariant measure is 0."]
theorem integral_eq_zero_of_mul_right_eq_neg [IsMulRightInvariant Œº] (hf' : ‚àÄ x, f (x * g) = -f x) :
    ‚à´ x, f x ‚àÇŒº = 0 := by
  simp_rw [‚Üê self_eq_neg ‚Ñù E, ‚Üê integral_neg, ‚Üê hf', integral_mul_right_eq_self]
#align measure_theory.integral_eq_zero_of_mul_right_eq_neg MeasureTheory.integral_eq_zero_of_mul_right_eq_neg
#align measure_theory.integral_eq_zero_of_add_right_eq_neg MeasureTheory.integral_eq_zero_of_add_right_eq_neg

@[to_additive]
theorem Integrable.comp_mul_left {f : G ‚Üí F} [IsMulLeftInvariant Œº] (hf : Integrable f Œº) (g : G) :
    Integrable (fun t => f (g * t)) Œº :=
  (hf.mono_measure (map_mul_left_eq_self Œº g).le).comp_measurable <| measurable_const_mul g
#align measure_theory.integrable.comp_mul_left MeasureTheory.Integrable.comp_mul_left
#align measure_theory.integrable.comp_add_left MeasureTheory.Integrable.comp_add_left

@[to_additive]
theorem Integrable.comp_mul_right {f : G ‚Üí F} [IsMulRightInvariant Œº] (hf : Integrable f Œº)
    (g : G) : Integrable (fun t => f (t * g)) Œº :=
  (hf.mono_measure (map_mul_right_eq_self Œº g).le).comp_measurable <| measurable_mul_const g
#align measure_theory.integrable.comp_mul_right MeasureTheory.Integrable.comp_mul_right
#align measure_theory.integrable.comp_add_right MeasureTheory.Integrable.comp_add_right

@[to_additive]
theorem Integrable.comp_div_right {f : G ‚Üí F} [IsMulRightInvariant Œº] (hf : Integrable f Œº)
    (g : G) : Integrable (fun t => f (t / g)) Œº := by
  simp_rw [div_eq_mul_inv]
  exact hf.comp_mul_right g‚Åª¬π
#align measure_theory.integrable.comp_div_right MeasureTheory.Integrable.comp_div_right
#align measure_theory.integrable.comp_sub_right MeasureTheory.Integrable.comp_sub_right

variable [MeasurableInv G]

@[to_additive]
theorem Integrable.comp_div_left {f : G ‚Üí F} [IsInvInvariant Œº] [IsMulLeftInvariant Œº]
    (hf : Integrable f Œº) (g : G) : Integrable (fun t => f (g / t)) Œº :=
  ((measurePreserving_div_left Œº g).integrable_comp hf.aestronglyMeasurable).mpr hf
#align measure_theory.integrable.comp_div_left MeasureTheory.Integrable.comp_div_left
#align measure_theory.integrable.comp_sub_left MeasureTheory.Integrable.comp_sub_left

@[to_additive] -- Porting note: was `@[simp]`
theorem integrable_comp_div_left (f : G ‚Üí F) [IsInvInvariant Œº] [IsMulLeftInvariant Œº] (g : G) :
    Integrable (fun t => f (g / t)) Œº ‚Üî Integrable f Œº := by
  refine' ‚ü®fun h => _, fun h => h.comp_div_left g‚ü©
  convert h.comp_inv.comp_mul_left g‚Åª¬π
  simp_rw [div_inv_eq_mul, mul_inv_cancel_left]
#align measure_theory.integrable_comp_div_left MeasureTheory.integrable_comp_div_left
#align measure_theory.integrable_comp_sub_left MeasureTheory.integrable_comp_sub_left

@[to_additive] -- Porting note: was `@[simp]`
theorem integral_div_left_eq_self (f : G ‚Üí E) (Œº : Measure G) [IsInvInvariant Œº]
    [IsMulLeftInvariant Œº] (x' : G) : (‚à´ x, f (x' / x) ‚àÇŒº) = ‚à´ x, f x ‚àÇŒº := by
  simp_rw [div_eq_mul_inv]
  -- Porting note: was `simp_rw`
  rw [integral_inv_eq_self (fun x => f (x' * x)) Œº, integral_mul_left_eq_self f x']
#align measure_theory.integral_div_left_eq_self MeasureTheory.integral_div_left_eq_self
#align measure_theory.integral_sub_left_eq_self MeasureTheory.integral_sub_left_eq_self

end MeasurableMul

section SMul

variable [Group G] [MeasurableSpace Œ±] [MulAction G Œ±] [MeasurableSMul G Œ±]

@[to_additive] -- Porting note: was `@[simp]`
theorem integral_smul_eq_self {Œº : Measure Œ±} [SMulInvariantMeasure G Œ± Œº] (f : Œ± ‚Üí E) {g : G} :
    (‚à´ x, f (g ‚Ä¢ x) ‚àÇŒº) = ‚à´ x, f x ‚àÇŒº := by
  have h : MeasurableEmbedding fun x : Œ± => g ‚Ä¢ x := (MeasurableEquiv.smul g).measurableEmbedding
  rw [‚Üê h.integral_map, map_smul]
#align measure_theory.integral_smul_eq_self MeasureTheory.integral_smul_eq_self
#align measure_theory.integral_vadd_eq_self MeasureTheory.integral_vadd_eq_self

end SMul
