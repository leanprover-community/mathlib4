/-
Copyright (c) 2022 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import Mathlib.MeasureTheory.Integral.Periodic
import Mathlib.Data.ZMod.Quotient

#align_import measure_theory.group.add_circle from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# Measure-theoretic results about the additive circle

The file is a place to collect measure-theoretic results about the additive circle.

## Main definitions:

 * `AddCircle.closedBall_ae_eq_ball`: open and closed balls in the additive circle are almost
   equal
 * `AddCircle.isAddFundamentalDomain_of_ae_ball`: a ball is a fundamental domain for rational
   angle rotation in the additive circle

-/


open Set Function Filter MeasureTheory MeasureTheory.Measure Metric

open scoped MeasureTheory Pointwise BigOperators Topology ENNReal

namespace AddCircle

variable {T : ‚Ñù} [hT : Fact (0 < T)]

theorem closedBall_ae_eq_ball {x : AddCircle T} {Œµ : ‚Ñù} : closedBall x Œµ =·µê[volume] ball x Œµ := by
  rcases le_or_lt Œµ 0 with hŒµ | hŒµ
  ¬∑ rw [ball_eq_empty.mpr hŒµ, ae_eq_empty, volume_closedBall,
      min_eq_right (by linarith [hT.out] : 2 * Œµ ‚â§ T), ENNReal.ofReal_eq_zero]
    exact mul_nonpos_of_nonneg_of_nonpos zero_le_two hŒµ
  ¬∑ suffices volume (closedBall x Œµ) ‚â§ volume (ball x Œµ) by
      exact (ae_eq_of_subset_of_measure_ge ball_subset_closedBall this measurableSet_ball
        (measure_ne_top _ _)).symm
    have : Tendsto (fun Œ¥ => volume (closedBall x Œ¥)) (ùìù[<] Œµ) (ùìù <| volume (closedBall x Œµ)) := by
      simp_rw [volume_closedBall]
      refine' ENNReal.tendsto_ofReal (Tendsto.min tendsto_const_nhds <| Tendsto.const_mul _ _)
      convert (@monotone_id ‚Ñù _).tendsto_nhdsWithin_Iio Œµ
      simp
    refine' le_of_tendsto this (mem_nhdsWithin_Iio_iff_exists_Ioo_subset.mpr ‚ü®0, hŒµ, fun r hr => _‚ü©)
    exact measure_mono (closedBall_subset_ball hr.2)
#align add_circle.closed_ball_ae_eq_ball AddCircle.closedBall_ae_eq_ball

/-- Let `G` be the subgroup of `AddCircle T` generated by a point `u` of finite order `n : ‚Ñï`. Then
any set `I` that is almost equal to a ball of radius `T / 2n` is a fundamental domain for the action
of `G` on `AddCircle T` by left addition. -/
theorem isAddFundamentalDomain_of_ae_ball (I : Set <| AddCircle T) (u x : AddCircle T)
    (hu : IsOfFinAddOrder u) (hI : I =·µê[volume] ball x (T / (2 * addOrderOf u))) :
    IsAddFundamentalDomain (AddSubgroup.zmultiples u) I := by
  set G := AddSubgroup.zmultiples u
  set n := addOrderOf u
  set B := ball x (T / (2 * n))
  have hn : 1 ‚â§ (n : ‚Ñù) := by norm_cast; linarith [hu.addOrderOf_pos]
  refine' IsAddFundamentalDomain.mk_of_measure_univ_le _ _ _ _
  ¬∑ -- `NullMeasurableSet I volume`
    exact measurableSet_ball.nullMeasurableSet.congr hI.symm
  ¬∑ -- `‚àÄ (g : G), g ‚â† 0 ‚Üí AEDisjoint volume (g +·µ• I) I`
    rintro ‚ü®g, hg‚ü© hg'
    replace hg' : g ‚â† 0 := by simpa only [Ne.def, AddSubgroup.mk_eq_zero] using hg'
    change AEDisjoint volume (g +·µ• I) I
    refine' AEDisjoint.congr (Disjoint.aedisjoint _)
      ((quasiMeasurePreserving_add_left volume (-g)).vadd_ae_eq_of_ae_eq g hI) hI
    have hBg : g +·µ• B = ball (g + x) (T / (2 * n)) := by
      rw [add_comm g x, ‚Üê singleton_add_ball _ x g, add_ball, thickening_singleton]
    rw [hBg]
    apply ball_disjoint_ball
    rw [dist_eq_norm, add_sub_cancel_right, div_mul_eq_div_div, ‚Üê add_div, ‚Üê add_div,
      add_self_div_two, div_le_iff' (by positivity : 0 < (n : ‚Ñù)), ‚Üê nsmul_eq_mul]
    refine' (le_add_order_smul_norm_of_isOfFinAddOrder (hu.of_mem_zmultiples hg) hg').trans
      (nsmul_le_nsmul_left (norm_nonneg g) _)
    exact Nat.le_of_dvd (addOrderOf_pos_iff.mpr hu) (addOrderOf_dvd_of_mem_zmultiples hg)
  ¬∑ -- `‚àÄ (g : G), QuasiMeasurePreserving (VAdd.vadd g) volume volume`
    exact fun g => quasiMeasurePreserving_add_left (G := AddCircle T) volume g
  ¬∑ -- `volume univ ‚â§ ‚àë' (g : G), volume (g +·µ• I)`
    replace hI := hI.trans closedBall_ae_eq_ball.symm
    haveI : Fintype G := @Fintype.ofFinite _ hu.finite_zmultiples.to_subtype
    have hG_card : (Finset.univ : Finset G).card = n := by
      show _ = addOrderOf u
      rw [‚Üê Nat.card_zmultiples, Nat.card_eq_fintype_card]; rfl
    simp_rw [measure_vadd]
    rw [AddCircle.measure_univ, tsum_fintype, Finset.sum_const, measure_congr hI,
      volume_closedBall, ‚Üê ENNReal.ofReal_nsmul, mul_div, mul_div_mul_comm,
      div_self, one_mul, min_eq_right (div_le_self hT.out.le hn), hG_card,
      nsmul_eq_mul, mul_div_cancel‚ÇÄ T (lt_of_lt_of_le zero_lt_one hn).ne.symm]
    exact two_ne_zero
#align add_circle.is_add_fundamental_domain_of_ae_ball AddCircle.isAddFundamentalDomain_of_ae_ball

theorem volume_of_add_preimage_eq (s I : Set <| AddCircle T) (u x : AddCircle T)
    (hu : IsOfFinAddOrder u) (hs : (u +·µ• s : Set <| AddCircle T) =·µê[volume] s)
    (hI : I =·µê[volume] ball x (T / (2 * addOrderOf u))) :
    volume s = addOrderOf u ‚Ä¢ volume (s ‚à© I) := by
  let G := AddSubgroup.zmultiples u
  haveI : Fintype G := @Fintype.ofFinite _ hu.finite_zmultiples.to_subtype
  have hsG : ‚àÄ g : G, (g +·µ• s : Set <| AddCircle T) =·µê[volume] s := by
    rintro ‚ü®y, hy‚ü©; exact (vadd_ae_eq_self_of_mem_zmultiples hs hy : _)
  rw [(isAddFundamentalDomain_of_ae_ball I u x hu hI).measure_eq_card_smul_of_vadd_ae_eq_self s hsG,
    ‚Üê Nat.card_zmultiples u]
#align add_circle.volume_of_add_preimage_eq AddCircle.volume_of_add_preimage_eq

end AddCircle
