/-
Copyright (c) 2025 Yizheng Zhu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yizheng Zhu
-/
import Mathlib.Analysis.BoundedVariation
import Mathlib.MeasureTheory.Function.AbsolutelyContinuous
import Mathlib.MeasureTheory.Integral.IntervalIntegral.Basic

/-!
# `f'` is interval integrable for certain classes of functions `f`

This file proves that:
* `MonotoneOn.deriv_intervalIntegrable` - If `f` is monotone on `a..b`, then `f'` is interval
integrable on `a..b`.
* `LocallyBoundedVariationOn.deriv_intervalIntegrable` - If `f` has bounded variation on `a..b`,
then `f'` is interval integrable on `a..b`.
* `AbsolutelyContinuousOnInterval.ae_differentiableAt` - If `f` is absolutely continuous on `a..b`,
then `f'` exists a.e. on `a..b`.
* `AbsolutelyContinuousOnInterval.deriv_intervalIntegrable` - If `f` is absolutely continuous on
`a..b`, then `f'` is interval integrable on `a..b`.

## Tags
interval integrable, monotone, bounded variation, absolutely continuous
-/

open MeasureTheory Set Filter Function

open scoped Topology ENNReal Interval NNReal


/-- If `f` is monotone, then `f'` is interval integrable on `a..b` for any `a` and `b`. -/
theorem MonotoneOn.deriv_intervalIntegrable {f : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù} (hf : MonotoneOn f (uIcc a b)) :
    IntervalIntegrable (deriv f) volume a b := by
  wlog hab : a ‚â§ b generalizing a b
  ¬∑ exact @this b a (uIcc_comm a b ‚ñ∏ hf) (by linarith) |>.symm
  rw [uIcc_of_le hab] at hf
  let g (x : ‚Ñù) : ‚Ñù := if x <= a then f a else if x < b then f x else f b
  have hg : Monotone g := by
    intro x y hxy
    dsimp only [g]
    split_ifs <;> try linarith
    all_goals apply hf
    all_goals grind
  have h‚ÇÇ : ‚àÄ·µê x, x ‚â† b := by simp [ae_iff, measure_singleton]
  have hfg : EqOn f g (Ioo a b) := by grind [EqOn]
  replace hfg := hfg.deriv isOpen_Ioo
  have hg_shift (z a‚ÇÄ b‚ÇÄ : ‚Ñù) : IntervalIntegrable (fun x ‚Ü¶ g (x + z)) volume a‚ÇÄ b‚ÇÄ := by
      convert hg.intervalIntegrable (a := a‚ÇÄ + z) (b := b‚ÇÄ + z) |>.comp_add_right z <;> abel
  let G (c x : ‚Ñù) := slope g x (x + c)
  have G_nonneg (c x : ‚Ñù) (hc : 0 ‚â§ c) : 0 ‚â§ G c x := by
    simp only [slope, add_sub_cancel_left, vsub_eq_sub, smul_eq_mul, G]
    exact mul_nonneg (inv_nonneg.mpr hc) (by linarith [hg (show x ‚â§ x + c by linarith)])
  have G_integrable (c : ‚Ñù) : LocallyIntegrable (G c) volume := by
    simp only [G, slope, add_sub_cancel_left, vsub_eq_sub, smul_eq_mul]
    exact (hg.covariant_of_const' c).locallyIntegrable.sub (hg.locallyIntegrable) |>.smul (c := c‚Åª¬π)
  have G_lim : ‚àÄ·µê (x : ‚Ñù), Filter.Tendsto (fun (n : ‚Ñï) ‚Ü¶ G (n : ‚Ñù)‚Åª¬π x) Filter.atTop
      (ùìù (deriv g x)) := by
    filter_upwards [hg.ae_differentiableAt] with x hx‚ÇÅ using hx‚ÇÅ.hasDerivAt.tendsto_slope.comp <|
      tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _
      (by convert tendsto_const_nhds.add tendsto_inverse_atTop_nhds_zero_nat; simp)
      (by simp [eventually_ne_atTop 0])
  have G_liminf : ‚àÄ·µê (x : ‚Ñù),
      Filter.liminf (fun (n : ‚Ñï) ‚Ü¶ ‚ÄñG (n : ‚Ñù)‚Åª¬π x‚Äñ‚Çë) Filter.atTop = ‚Äñderiv g x‚Äñ‚Çë:= by
    filter_upwards [G_lim] with x hx using hx.enorm.liminf_eq
  have G_fatou := MeasureTheory.lintegral_liminf_le‚ÇÄ'
    (fun n ‚Ü¶ G_integrable (n : ‚Ñù)‚Åª¬π |>.aestronglyMeasurable |>.aemeasurable |>.enorm) (Ioc a b)
  have G_bound {n : ‚Ñï} (hn : n ‚â† 0) :
      n * (‚à´ (x : ‚Ñù) in a..b, g (x + (n : ‚Ñù)‚Åª¬π) - g x) ‚â§ g b - g a := by
    have n_inv_mul : (n : ‚Ñù) * (n : ‚Ñù)‚Åª¬π = 1 := mul_inv_cancel‚ÇÄ (by norm_cast)
    rw [intervalIntegral.integral_sub (hg_shift _ _ _) hg.intervalIntegrable,
        intervalIntegral.integral_comp_add_right,
        intervalIntegral.integral_interval_sub_interval_comm',
        intervalIntegral.integral_congr (g := fun _ ‚Ü¶ g b),
        intervalIntegral.integral_const]
    ¬∑ simp only [add_sub_cancel_left, smul_eq_mul, mul_sub, ‚Üê mul_assoc, n_inv_mul]
      have : g a = ‚Üën * ‚à´ (x : ‚Ñù) in a..a + (‚Üën)‚Åª¬π, g a := by simp [‚Üê mul_assoc, n_inv_mul]
      rw [this]
      gcongr
      ¬∑ simp
      ¬∑ exact intervalIntegral.integral_mono_on (by simp) (by simp) hg.intervalIntegrable
          (fun x hx ‚Ü¶ hg (mem_Icc.mp hx).left)
    ¬∑ simp only [EqOn, le_add_iff_nonneg_right, inv_nonneg, Nat.cast_nonneg, uIcc_of_le, mem_Icc,
          and_imp]
      grind
    all_goals exact hg.intervalIntegrable
  have f_fatou : ‚à´‚Åª x in Ioc a b, ‚Äñderiv f x‚Äñ‚Çë ‚â§ ENNReal.ofReal (f b - f a) := by
    calc
      _ = ‚à´‚Åª x in (Ioc a b), ‚Äñderiv g x‚Äñ‚Çë := by
        apply MeasureTheory.setLIntegral_congr_fun_ae (by simp)
        filter_upwards [h‚ÇÇ] with x hxb hx
        rw [hfg (by grind)]
      _ ‚â§ liminf (fun (n : ‚Ñï) ‚Ü¶ ‚à´‚Åª (x : ‚Ñù) in Ioc a b, ‚ÄñG (n : ‚Ñù)‚Åª¬π x‚Äñ‚Çë) atTop := by
        convert G_fatou using 1
        apply MeasureTheory.setLIntegral_congr_fun_ae (by simp)
        filter_upwards [G_liminf] with x hx _
        rw [hx]
      _ = liminf (fun (n : ‚Ñï) ‚Ü¶ ENNReal.ofReal (‚à´ (x : ‚Ñù) in Ioc a b, (G (n : ‚Ñù)‚Åª¬π) x)) atTop := by
        apply Filter.liminf_congr
        filter_upwards with n
        rw [‚Üê MeasureTheory.ofReal_integral_norm_eq_lintegral_enorm]
        ¬∑ congr with y
          apply abs_eq_self.mpr
          apply G_nonneg; simp
        ¬∑ exact (G_integrable (n : ‚Ñù)‚Åª¬π).integrableOn_isCompact (k := Icc a b)
              (hk := isCompact_Icc) |>.mono_set (by grind)
      _ ‚â§ ENNReal.ofReal (g b - g a) := by
        refine Filter.liminf_le_of_frequently_le' (Filter.Eventually.frequently ?_)
        simp only [Filter.Eventually, mem_atTop_sets, mem_setOf_eq]
        refine ‚ü®1, fun n hn ‚Ü¶ ENNReal.ofReal_le_ofReal ?_‚ü©
        simp [‚Üê intervalIntegral.integral_of_le hab, slope,
          intervalIntegral.integral_const_mul, G, G_bound (show n ‚â† 0 by omega)]
      _ = ENNReal.ofReal (f b - f a) := by grind
  rw [intervalIntegrable_iff_integrableOn_Ioc_of_le hab]
  constructor
  ¬∑ suffices AEStronglyMeasurable (deriv g) (volume.restrict (Ioc a b)) by
      apply this.congr
      rw [EventuallyEq, ae_restrict_iff' (by simp)]
      filter_upwards [h‚ÇÇ] with x hx‚ÇÅ hx‚ÇÇ using hfg.symm (by grind)
    suffices AEStronglyMeasurable (deriv g) from this.restrict
    apply aestronglyMeasurable_of_tendsto_ae (lim := G_lim)
    exact fun n ‚Ü¶ (G_integrable (n : ‚Ñù)‚Åª¬π).aestronglyMeasurable
  ¬∑ grw [HasFiniteIntegral, f_fatou]
    exact ENNReal.ofReal_lt_top

/-- If `f` has locally bounded variation on `uIcc a b`, then `f'` is interval integrable on
`a..b`. -/
theorem LocallyBoundedVariationOn.deriv_intervalIntegrable {f : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
  (hf : LocallyBoundedVariationOn f (uIcc a b)) :
    IntervalIntegrable (deriv f) volume a b := by
  obtain ‚ü®p, q, hp, hq, rfl‚ü© := hf.exists_monotoneOn_sub_monotoneOn
  have h‚ÇÇ : ‚àÄ·µê x, x ‚â† max a b := by simp [ae_iff, measure_singleton]
  apply (hp.deriv_intervalIntegrable.sub hq.deriv_intervalIntegrable).congr
  rw [Filter.EventuallyEq, MeasureTheory.ae_restrict_iff' (by simp [uIoc])]
  filter_upwards [hp.ae_differentiableWithinAt_of_mem, hq.ae_differentiableWithinAt_of_mem, h‚ÇÇ]
    with x hx‚ÇÅ hx‚ÇÇ hx‚ÇÉ hx‚ÇÑ
  have hx‚ÇÖ : x ‚àà uIcc a b := Ioc_subset_Icc_self hx‚ÇÑ
  rw [uIoc, mem_Ioc] at hx‚ÇÑ
  replace hx‚ÇÅ := (hx‚ÇÅ hx‚ÇÖ).differentiableAt (Icc_mem_nhds (by grind) (by grind)) |>.hasDerivAt
  replace hx‚ÇÇ := (hx‚ÇÇ hx‚ÇÖ).differentiableAt (Icc_mem_nhds (by grind) (by grind)) |>.hasDerivAt
  exact (hx‚ÇÅ.sub hx‚ÇÇ).deriv.symm

/-- If `f` is absolute continuous on `uIcc a b`, then `f'` exists a.e. on `uIcc a b`. -/
theorem AbsolutelyContinuousOnInterval.ae_differentiableAt {f : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
    (hf : AbsolutelyContinuousOnInterval f a b) :
    ‚àÄ·µê (x : ‚Ñù), x ‚àà uIcc a b ‚Üí DifferentiableAt ‚Ñù f x := by
  have := hf.boundedVariationOn.locallyBoundedVariationOn.ae_differentiableWithinAt_of_mem
  have h‚ÇÅ : ‚àÄ·µê x, x ‚â† min a b := by simp [ae_iff, measure_singleton]
  have h‚ÇÇ : ‚àÄ·µê x, x ‚â† max a b := by simp [ae_iff, measure_singleton]
  filter_upwards [this, h‚ÇÅ, h‚ÇÇ] with x hx‚ÇÅ hx‚ÇÇ hx‚ÇÉ hx‚ÇÑ
  rw [uIcc, mem_Icc] at hx‚ÇÑ
  exact (hx‚ÇÅ hx‚ÇÑ).differentiableAt (Icc_mem_nhds (by grind) (by grind))

/-- If `f` is absolute continuous on `uIcc a b`, then `f'` is interval integrable on `a..b`. -/
theorem AbsolutelyContinuousOnInterval.deriv_intervalIntegrable {f : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
  (hf : AbsolutelyContinuousOnInterval f a b) :
    IntervalIntegrable (deriv f) volume a b :=
  hf.boundedVariationOn.locallyBoundedVariationOn.deriv_intervalIntegrable
