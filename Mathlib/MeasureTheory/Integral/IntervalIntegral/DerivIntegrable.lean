/-
Copyright (c) 2025 Yizheng Zhu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yizheng Zhu
-/
import Mathlib.Analysis.BoundedVariation
import Mathlib.MeasureTheory.Function.AbsolutelyContinuous
import Mathlib.MeasureTheory.Integral.IntervalIntegral.Slope

/-!
# `f'` is interval integrable for certain classes of functions `f`

This file proves that:
* `MonotoneOn.intervalIntegrable_deriv` - If `f` is monotone on `a..b`, then `f'` is interval
integrable on `a..b`.
* `MonotoneOn.intervalIntegral_deriv_bound` - If `f` is monotone on `a..b`, then the integral of
`f'` on `a..b` is in `uIcc 0 (f b - f a)`.
* `BoundedVariationOn.intervalIntegrable_deriv` - If `f` has bounded variation on `a..b`,
then `f'` is interval integrable on `a..b`.
* `AbsolutelyContinuousOnInterval.intervalIntegrable_deriv` - If `f` is absolutely continuous on
`a..b`, then `f'` is interval integrable on `a..b`.

## Tags
interval integrable, monotone, bounded variation, absolutely continuous
-/

open MeasureTheory Set Filter

open scoped Topology

/-- If `f` is monotone on `[a, b]`, then `f'` is the limit of `G n` a.e. on `[a, b]`, where each
`G n` is `AEStronglyMeasurable` and the liminf of the lower Lebesgue integral of `‚ÄñG n ¬∑‚Äñ‚Çë` is at
most `f b - f a`. -/
lemma MonotoneOn.exists_tendsto_atTop_aestronglyMeasurable_liminf_le
    {f : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù} (hab : a ‚â§ b) (hf : MonotoneOn f (Icc a b)) :
    ‚àÉ G : (‚Ñï ‚Üí ‚Ñù ‚Üí ‚Ñù), (‚àÄ·µê x ‚àÇvolume.restrict (Icc a b),
      Filter.Tendsto (fun (n : ‚Ñï) ‚Ü¶ G n x) Filter.atTop (ùìù (deriv f x))) ‚àß
      (‚àÄ (n : ‚Ñï), AEStronglyMeasurable (G n) (volume.restrict (Icc a b))) ‚àß
      liminf (fun (n : ‚Ñï) ‚Ü¶ ‚à´‚Åª (x : ‚Ñù) in Icc a b, ‚ÄñG n x‚Äñ‚Çë) atTop ‚â§
        ENNReal.ofReal (f b - f a) := by
  let g (x : ‚Ñù) : ‚Ñù := f (max a (min x b))
  have hg : Monotone g := monotoneOn_univ.mp <| hf.comp (by grind [MonotoneOn]) (by grind [MapsTo])
  have hfg : EqOn f g (Ioo a b) := by grind [EqOn]
  replace hfg := hfg.deriv isOpen_Ioo
  have h‚ÇÅ : ‚àÄ·µê x, x ‚â† a := by simp [ae_iff, measure_singleton]
  have h‚ÇÇ : ‚àÄ·µê x, x ‚â† b := by simp [ae_iff, measure_singleton]
  let G (c x : ‚Ñù) := slope g x (x + c)
  have G_integrable (n : ‚Ñï) : Integrable (G (‚Üën)‚Åª¬π) (volume.restrict (Icc a b)) := by
    have := hg.monotoneOn (Icc a (b + (n : ‚Ñù)‚Åª¬π)) |>.intervalIntegrable_slope hab (by simp)
    exact intervalIntegrable_iff_integrableOn_Icc_of_le hab |>.mp this
  refine ‚ü®fun n x ‚Ü¶ G (n : ‚Ñù)‚Åª¬π x, ?_, fun n ‚Ü¶ G_integrable n |>.aestronglyMeasurable, ?_‚ü©
  ¬∑ rw [MeasureTheory.ae_restrict_iff' (by measurability)]
    filter_upwards [hg.ae_differentiableAt, h‚ÇÅ, h‚ÇÇ] with x hx‚ÇÅ hx‚ÇÇ hx‚ÇÉ hx‚ÇÑ
    rw [hfg (by grind [Icc_diff_both])]
    exact hx‚ÇÅ.hasDerivAt.tendsto_slope.comp <|
      tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _
      (by convert tendsto_const_nhds.add tendsto_inverse_atTop_nhds_zero_nat; simp)
      (by simp [eventually_ne_atTop 0])
  ¬∑ calc
      _ = liminf (fun (n : ‚Ñï) ‚Ü¶ ENNReal.ofReal (‚à´ (x : ‚Ñù) in Icc a b, (G (n : ‚Ñù)‚Åª¬π) x)) atTop := by
        apply Filter.liminf_congr
        filter_upwards with n
        rw [‚Üê MeasureTheory.ofReal_integral_norm_eq_lintegral_enorm (G_integrable n)]
        congr with y
        exact abs_eq_self.mpr (hg.monotoneOn univ |>.slope_nonneg trivial trivial)
      _ ‚â§ ENNReal.ofReal (g b - g a) := by
        refine Filter.liminf_le_of_frequently_le'
          (Filter.Frequently.of_forall fun n ‚Ü¶ ENNReal.ofReal_le_ofReal ?_)
        rw [integral_Icc_eq_integral_Ioc, ‚Üê intervalIntegral.integral_of_le hab]
        convert hg.monotoneOn (Icc a (b + (n : ‚Ñù)‚Åª¬π)) |>.intervalIntegral_slope_bound hab (by simp)
          using 2
        simp [g]
      _ = ENNReal.ofReal (f b - f a) := by grind

/-- If `f` is monotone on `a..b`, then `f'` is interval integrable on `a..b`. -/
theorem MonotoneOn.intervalIntegrable_deriv {f : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
    (hf : MonotoneOn f (uIcc a b)) :
    IntervalIntegrable (deriv f) volume a b := by
  wlog hab : a ‚â§ b generalizing a b with h
  ¬∑ exact h (uIcc_comm a b ‚ñ∏ hf) (by linarith) |>.symm
  rw [uIcc_of_le hab] at hf
  obtain ‚ü®G, hGf, hG, hG'‚ü© := hf.exists_tendsto_atTop_aestronglyMeasurable_liminf_le hab
  have hG'‚ÇÄ : liminf (fun (n : ‚Ñï) ‚Ü¶ ‚à´‚Åª (x : ‚Ñù) in Icc a b, ‚ÄñG n x‚Äñ‚Çë) atTop ‚â† ‚ä§ :=
    lt_of_le_of_lt hG' ENNReal.ofReal_lt_top |>.ne_top
  have integrable_f_deriv := integrable_of_tendsto_atTop_aestronglyMeasurable_liminf_ne_top
    hGf hG hG'‚ÇÄ
  exact (intervalIntegrable_iff_integrableOn_Icc_of_le hab).mpr integrable_f_deriv

/-- If `f` is monotone on `a..b`, then `f'` is interval integrable on `a..b` and the integral of
`f'` on `a..b` is in between `0` and `f b - f a`. -/
theorem MonotoneOn.intervalIntegral_deriv_bound {f : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
    (hf : MonotoneOn f (uIcc a b)) :
    ‚à´ x in a..b, deriv f x ‚àà uIcc 0 (f b - f a) := by
  wlog hab : a ‚â§ b generalizing a b with h
  ¬∑ specialize h (uIcc_comm a b ‚ñ∏ hf) (by linarith)
    have : f b ‚â§ f a := hf (by simp) (by simp) (by linarith)
    rw [intervalIntegral.integral_symm, uIcc_of_ge (by linarith)]
    refine neg_mem_Icc_iff.mpr ?_
    simp only [neg_zero, neg_sub]
    rwa [uIcc_of_le (by linarith)] at h
  rw [uIcc_of_le hab] at hf
  obtain ‚ü®G, hGf, hG, hG'‚ü© := hf.exists_tendsto_atTop_aestronglyMeasurable_liminf_le hab
  have h‚ÇÅ : ‚àÄ·µê x, x ‚â† a := by simp [ae_iff, measure_singleton]
  have h‚ÇÇ : ‚àÄ·µê x, x ‚â† b := by simp [ae_iff, measure_singleton]
  have hG'‚ÇÄ : liminf (fun (n : ‚Ñï) ‚Ü¶ ‚à´‚Åª (x : ‚Ñù) in Icc a b, ‚ÄñG n x‚Äñ‚Çë) atTop ‚â† ‚ä§ :=
    lt_of_le_of_lt hG' ENNReal.ofReal_lt_top |>.ne_top
  have integrable_f_deriv := integrable_of_tendsto_atTop_aestronglyMeasurable_liminf_ne_top
    hGf hG hG'‚ÇÄ
  rw [MeasureTheory.ae_restrict_iff' (by simp)] at hGf
  rw [‚Üê uIcc_of_le hab] at hGf hG hG'
  have : f a ‚â§ f b := hf (by simp [hab]) (by simp [hab]) hab
  rw [uIcc_of_le (by linarith), mem_Icc]
  have f_deriv_nonneg {x : ‚Ñù} (hx : x ‚àà Ioo a b): 0 ‚â§ deriv f x :=
    hf.deriv_nonneg (Icc_mem_nhds (by grind) (by grind))
  constructor
  ¬∑ apply intervalIntegral.integral_nonneg_of_ae_restrict hab
    rw [Filter.EventuallyLE, MeasureTheory.ae_restrict_iff' (by simp)]
    filter_upwards [h‚ÇÅ, h‚ÇÇ] with x _ _ _
    exact f_deriv_nonneg (by grind [Icc_diff_both])
  ¬∑ have ebound := lintegral_bound_of_tendsto_atTop_aestronglyMeasurable
      ((MeasureTheory.ae_restrict_iff' (by measurability) |>.mpr hGf)) hG
    grw [hG'] at ebound
    rw [uIcc_of_le hab,
        ‚Üê MeasureTheory.ofReal_integral_norm_eq_lintegral_enorm integrable_f_deriv,
        ENNReal.ofReal_le_ofReal_iff (by linarith),
        integral_Icc_eq_integral_Ioc,
        ‚Üê intervalIntegral.integral_of_le hab] at ebound
    convert ebound using 1
    refine intervalIntegral.integral_congr_ae ?_
    rw [uIoc_of_le hab]
    filter_upwards [h‚ÇÇ] with x _ _
    exact abs_eq_self.mpr (f_deriv_nonneg (by rw [‚Üê Ioc_diff_right]; grind)) |>.symm

/-- If `f` has bounded variation on `uIcc a b`, then `f'` is interval integrable on `a..b`. -/
theorem BoundedVariationOn.intervalIntegrable_deriv {f : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
    (hf : BoundedVariationOn f (uIcc a b)) :
    IntervalIntegrable (deriv f) volume a b := by
  obtain ‚ü®p, q, hp, hq, rfl‚ü© := hf.locallyBoundedVariationOn.exists_monotoneOn_sub_monotoneOn
  have h‚ÇÇ : ‚àÄ·µê x, x ‚â† max a b := by simp [ae_iff, measure_singleton]
  apply (hp.intervalIntegrable_deriv.sub hq.intervalIntegrable_deriv).congr_ae
  rw [Filter.EventuallyEq, MeasureTheory.ae_restrict_iff' (by simp [uIoc])]
  filter_upwards [hp.ae_differentiableWithinAt_of_mem, hq.ae_differentiableWithinAt_of_mem, h‚ÇÇ]
    with x hx‚ÇÅ hx‚ÇÇ hx‚ÇÉ hx‚ÇÑ
  have hx‚ÇÖ : x ‚àà uIcc a b := Ioc_subset_Icc_self hx‚ÇÑ
  rw [uIoc, mem_Ioc] at hx‚ÇÑ
  have hx‚ÇÜ : uIcc a b ‚àà ùìù x := Icc_mem_nhds hx‚ÇÑ.left (lt_of_le_of_ne hx‚ÇÑ.right hx‚ÇÉ)
  replace hx‚ÇÅ := (hx‚ÇÅ hx‚ÇÖ).differentiableAt hx‚ÇÜ |>.hasDerivAt
  replace hx‚ÇÇ := (hx‚ÇÇ hx‚ÇÖ).differentiableAt hx‚ÇÜ |>.hasDerivAt
  exact (hx‚ÇÅ.sub hx‚ÇÇ).deriv.symm

/-- If `f` is absolute continuous on `uIcc a b`, then `f'` is interval integrable on `a..b`. -/
theorem AbsolutelyContinuousOnInterval.intervalIntegrable_deriv {f : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
    (hf : AbsolutelyContinuousOnInterval f a b) :
    IntervalIntegrable (deriv f) volume a b :=
  hf.boundedVariationOn.intervalIntegrable_deriv
