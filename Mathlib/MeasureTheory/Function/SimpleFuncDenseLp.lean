/-
Copyright (c) 2022 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou, Yury Kudryashov, Heather Macbeth
-/
import Mathlib.MeasureTheory.Function.L1Space.AEEqFun
import Mathlib.MeasureTheory.Function.LpSpace.Complete
import Mathlib.MeasureTheory.Function.LpSpace.Indicator

/-!
# Density of simple functions

Show that each `L·µñ` Borel measurable function can be approximated in `L·µñ` norm
by a sequence of simple functions.

## Main definitions

* `MeasureTheory.Lp.simpleFunc`, the type of `Lp` simple functions
* `coeToLp`, the embedding of `Lp.simpleFunc E p Œº` into `Lp E p Œº`

## Main results

* `tendsto_approxOn_Lp_eLpNorm` (L·µñ convergence): If `E` is a `NormedAddCommGroup` and `f` is
  measurable and `MemLp` (for `p < ‚àû`), then the simple functions
  `SimpleFunc.approxOn f hf s 0 h‚ÇÄ n` may be considered as elements of `Lp E p Œº`, and they tend
  in L·µñ to `f`.
* `Lp.simpleFunc.isDenseEmbedding`: the embedding `coeToLp` of the `Lp` simple functions into
  `Lp` is dense.
* `Lp.simpleFunc.induction`, `Lp.induction`, `MemLp.induction`, `Integrable.induction`: to prove
  a predicate for all elements of one of these classes of functions, it suffices to check that it
  behaves correctly on simple functions.

## TODO

For `E` finite-dimensional, simple functions `Œ± ‚Üí‚Çõ E` are dense in L^‚àû -- prove this.

## Notations

* `Œ± ‚Üí‚Çõ Œ≤` (local notation): the type of simple functions `Œ± ‚Üí Œ≤`.
* `Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E`: the type of `L1` simple functions `Œ± ‚Üí Œ≤`.
-/


noncomputable section


open Set Function Filter TopologicalSpace ENNReal EMetric Finset

open scoped Topology ENNReal MeasureTheory

variable {Œ± Œ≤ Œπ E F ùïú : Type*}

namespace MeasureTheory

local infixr:25 " ‚Üí‚Çõ " => SimpleFunc

namespace SimpleFunc

/-! ### Lp approximation by simple functions -/

section Lp

variable [MeasurableSpace Œ≤] [MeasurableSpace E] [NormedAddCommGroup E] [NormedAddCommGroup F]
  {q : ‚Ñù} {p : ‚Ñù‚â•0‚àû}

theorem nnnorm_approxOn_le [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E}
    {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s] (x : Œ≤) (n : ‚Ñï) :
    ‚ÄñapproxOn f hf s y‚ÇÄ h‚ÇÄ n x - f x‚Äñ‚Çä ‚â§ ‚Äñf x - y‚ÇÄ‚Äñ‚Çä := by
  have := edist_approxOn_le hf h‚ÇÄ x n
  rw [edist_comm y‚ÇÄ] at this
  simp only [edist_nndist, nndist_eq_nnnorm] at this
  exact mod_cast this

theorem norm_approxOn_y‚ÇÄ_le [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E}
    {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s] (x : Œ≤) (n : ‚Ñï) :
    ‚ÄñapproxOn f hf s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ‚Äñ ‚â§ ‚Äñf x - y‚ÇÄ‚Äñ + ‚Äñf x - y‚ÇÄ‚Äñ := by
  simpa [enorm, edist_eq_enorm_sub, ‚Üê ENNReal.coe_add, norm_sub_rev]
    using edist_approxOn_y0_le hf h‚ÇÄ x n

theorem norm_approxOn_zero_le [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E}
    (h‚ÇÄ : (0 : E) ‚àà s) [SeparableSpace s] (x : Œ≤) (n : ‚Ñï) :
    ‚ÄñapproxOn f hf s 0 h‚ÇÄ n x‚Äñ ‚â§ ‚Äñf x‚Äñ + ‚Äñf x‚Äñ := by
  simpa [enorm, edist_eq_enorm_sub, ‚Üê ENNReal.coe_add, norm_sub_rev]
    using edist_approxOn_y0_le hf h‚ÇÄ x n

theorem tendsto_approxOn_Lp_eLpNorm [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f)
    {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s] (hp_ne_top : p ‚â† ‚àû) {Œº : Measure Œ≤}
    (hŒº : ‚àÄ·µê x ‚àÇŒº, f x ‚àà closure s) (hi : eLpNorm (fun x => f x - y‚ÇÄ) p Œº < ‚àû) :
    Tendsto (fun n => eLpNorm (‚áë(approxOn f hf s y‚ÇÄ h‚ÇÄ n) - f) p Œº) atTop (ùìù 0) := by
  by_cases hp_zero : p = 0
  ¬∑ simpa only [hp_zero, eLpNorm_exponent_zero] using tendsto_const_nhds
  have hp : 0 < p.toReal := toReal_pos hp_zero hp_ne_top
  suffices Tendsto (fun n => ‚à´‚Åª x, ‚ÄñapproxOn f hf s y‚ÇÄ h‚ÇÄ n x - f x‚Äñ‚Çë ^ p.toReal ‚àÇŒº) atTop (ùìù 0) by
    simp only [eLpNorm_eq_lintegral_rpow_enorm hp_zero hp_ne_top]
    convert continuous_rpow_const.continuousAt.tendsto.comp this
    simp [zero_rpow_of_pos (_root_.inv_pos.mpr hp)]
  -- We simply check the conditions of the Dominated Convergence Theorem:
  -- (1) The function "`p`-th power of distance between `f` and the approximation" is measurable
  have hF_meas n : Measurable fun x => ‚ÄñapproxOn f hf s y‚ÇÄ h‚ÇÄ n x - f x‚Äñ‚Çë ^ p.toReal := by
    simpa only [‚Üê edist_eq_enorm_sub] using
      (approxOn f hf s y‚ÇÄ h‚ÇÄ n).measurable_bind (fun y x => edist y (f x) ^ p.toReal) fun y =>
        (measurable_edist_right.comp hf).pow_const p.toReal
  -- (2) The functions "`p`-th power of distance between `f` and the approximation" are uniformly
  -- bounded, at any given point, by `fun x => ‚Äñf x - y‚ÇÄ‚Äñ ^ p.toReal`
  have h_bound n :
    (fun x ‚Ü¶ ‚ÄñapproxOn f hf s y‚ÇÄ h‚ÇÄ n x - f x‚Äñ‚Çë ^ p.toReal) ‚â§·µê[Œº] (‚Äñf ¬∑ - y‚ÇÄ‚Äñ‚Çë ^ p.toReal) :=
    .of_forall fun x => rpow_le_rpow (coe_mono (nnnorm_approxOn_le hf h‚ÇÄ x n)) toReal_nonneg
  -- (3) The bounding function `fun x => ‚Äñf x - y‚ÇÄ‚Äñ ^ p.toReal` has finite integral
  have h_fin : (‚à´‚Åª a : Œ≤, ‚Äñf a - y‚ÇÄ‚Äñ‚Çë ^ p.toReal ‚àÇŒº) ‚â† ‚ä§ :=
    (lintegral_rpow_enorm_lt_top_of_eLpNorm_lt_top hp_zero hp_ne_top hi).ne
  -- (4) The functions "`p`-th power of distance between `f` and the approximation" tend pointwise
  -- to zero
  have h_lim :
    ‚àÄ·µê a : Œ≤ ‚àÇŒº, Tendsto (‚ÄñapproxOn f hf s y‚ÇÄ h‚ÇÄ ¬∑ a - f a‚Äñ‚Çë ^ p.toReal) atTop (ùìù 0) := by
    filter_upwards [hŒº] with a ha
    have : Tendsto (fun n => (approxOn f hf s y‚ÇÄ h‚ÇÄ n) a - f a) atTop (ùìù (f a - f a)) :=
      (tendsto_approxOn hf h‚ÇÄ ha).sub tendsto_const_nhds
    convert continuous_rpow_const.continuousAt.tendsto.comp (tendsto_coe.mpr this.nnnorm)
    simp [zero_rpow_of_pos hp]
  -- Then we apply the Dominated Convergence Theorem
  simpa using tendsto_lintegral_of_dominated_convergence _ hF_meas h_bound h_fin h_lim

theorem memLp_approxOn [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (fmeas : Measurable f)
    (hf : MemLp f p Œº) {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s]
    (hi‚ÇÄ : MemLp (fun _ => y‚ÇÄ) p Œº) (n : ‚Ñï) : MemLp (approxOn f fmeas s y‚ÇÄ h‚ÇÄ n) p Œº := by
  refine ‚ü®(approxOn f fmeas s y‚ÇÄ h‚ÇÄ n).aestronglyMeasurable, ?_‚ü©
  suffices eLpNorm (fun x => approxOn f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ) p Œº < ‚ä§ by
    have : MemLp (fun x => approxOn f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ) p Œº :=
      ‚ü®(approxOn f fmeas s y‚ÇÄ h‚ÇÄ n - const Œ≤ y‚ÇÄ).aestronglyMeasurable, this‚ü©
    convert eLpNorm_add_lt_top this hi‚ÇÄ
    ext x
    simp
  have hf' : MemLp (fun x => ‚Äñf x - y‚ÇÄ‚Äñ) p Œº := by
    have h_meas : Measurable fun x => ‚Äñf x - y‚ÇÄ‚Äñ := by
      simp only [‚Üê dist_eq_norm]
      exact (continuous_id.dist continuous_const).measurable.comp fmeas
    refine ‚ü®h_meas.aemeasurable.aestronglyMeasurable, ?_‚ü©
    rw [eLpNorm_norm]
    convert eLpNorm_add_lt_top hf hi‚ÇÄ.neg with x
    simp [sub_eq_add_neg]
  have : ‚àÄ·µê x ‚àÇŒº, ‚ÄñapproxOn f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ‚Äñ ‚â§ ‚Äñ‚Äñf x - y‚ÇÄ‚Äñ + ‚Äñf x - y‚ÇÄ‚Äñ‚Äñ := by
    filter_upwards with x
    convert norm_approxOn_y‚ÇÄ_le fmeas h‚ÇÄ x n using 1
    rw [Real.norm_eq_abs, abs_of_nonneg]
    positivity
  calc
    eLpNorm (fun x => approxOn f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ) p Œº ‚â§
        eLpNorm (fun x => ‚Äñf x - y‚ÇÄ‚Äñ + ‚Äñf x - y‚ÇÄ‚Äñ) p Œº :=
      eLpNorm_mono_ae this
    _ < ‚ä§ := eLpNorm_add_lt_top hf' hf'

theorem tendsto_approxOn_range_Lp_eLpNorm [BorelSpace E] {f : Œ≤ ‚Üí E} (hp_ne_top : p ‚â† ‚àû)
    {Œº : Measure Œ≤} (fmeas : Measurable f) [SeparableSpace (range f ‚à™ {0} : Set E)]
    (hf : eLpNorm f p Œº < ‚àû) :
    Tendsto (fun n => eLpNorm (‚áë(approxOn f fmeas (range f ‚à™ {0}) 0 (by simp) n) - f) p Œº)
      atTop (ùìù 0) := by
  refine tendsto_approxOn_Lp_eLpNorm fmeas _ hp_ne_top ?_ ?_
  ¬∑ filter_upwards with x using subset_closure (by simp)
  ¬∑ simpa using hf

theorem memLp_approxOn_range [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (fmeas : Measurable f)
    [SeparableSpace (range f ‚à™ {0} : Set E)] (hf : MemLp f p Œº) (n : ‚Ñï) :
    MemLp (approxOn f fmeas (range f ‚à™ {0}) 0 (by simp) n) p Œº :=
  memLp_approxOn fmeas hf (y‚ÇÄ := 0) (by simp) MemLp.zero n

theorem tendsto_approxOn_range_Lp [BorelSpace E] {f : Œ≤ ‚Üí E} [hp : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû)
    {Œº : Measure Œ≤} (fmeas : Measurable f) [SeparableSpace (range f ‚à™ {0} : Set E)]
    (hf : MemLp f p Œº) :
    Tendsto
      (fun n =>
        (memLp_approxOn_range fmeas hf n).toLp (approxOn f fmeas (range f ‚à™ {0}) 0 (by simp) n))
      atTop (ùìù (hf.toLp f)) := by
  simpa only [Lp.tendsto_Lp_iff_tendsto_eLpNorm''] using
    tendsto_approxOn_range_Lp_eLpNorm hp_ne_top fmeas hf.2

/-- Any function in `‚Ñíp` can be approximated by a simple function if `p < ‚àû`. -/
theorem _root_.MeasureTheory.MemLp.exists_simpleFunc_eLpNorm_sub_lt {E : Type*}
    [NormedAddCommGroup E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (hf : MemLp f p Œº) (hp_ne_top : p ‚â† ‚àû)
    {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) : ‚àÉ g : Œ≤ ‚Üí‚Çõ E, eLpNorm (f - ‚áëg) p Œº < Œµ ‚àß MemLp g p Œº := by
  borelize E
  let f' := hf.1.mk f
  rsuffices ‚ü®g, hg, g_mem‚ü© : ‚àÉ g : Œ≤ ‚Üí‚Çõ E, eLpNorm (f' - ‚áëg) p Œº < Œµ ‚àß MemLp g p Œº
  ¬∑ refine ‚ü®g, ?_, g_mem‚ü©
    suffices eLpNorm (f - ‚áëg) p Œº = eLpNorm (f' - ‚áëg) p Œº by rwa [this]
    apply eLpNorm_congr_ae
    filter_upwards [hf.1.ae_eq_mk] with x hx
    simpa only [Pi.sub_apply, sub_left_inj] using hx
  have hf' : MemLp f' p Œº := hf.ae_eq hf.1.ae_eq_mk
  have f'meas : Measurable f' := hf.1.measurable_mk
  have : SeparableSpace (range f' ‚à™ {0} : Set E) :=
    StronglyMeasurable.separableSpace_range_union_singleton hf.1.stronglyMeasurable_mk
  rcases ((tendsto_approxOn_range_Lp_eLpNorm hp_ne_top f'meas hf'.2).eventually <|
    gt_mem_nhds hŒµ.bot_lt).exists with ‚ü®n, hn‚ü©
  rw [‚Üê eLpNorm_neg, neg_sub] at hn
  exact ‚ü®_, hn, memLp_approxOn_range f'meas hf' _‚ü©

end Lp

/-! ### L1 approximation by simple functions -/


section Integrable

variable [MeasurableSpace Œ≤]
variable [MeasurableSpace E] [NormedAddCommGroup E]

theorem tendsto_approxOn_L1_enorm [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f)
    {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s] {Œº : Measure Œ≤}
    (hŒº : ‚àÄ·µê x ‚àÇŒº, f x ‚àà closure s) (hi : HasFiniteIntegral (fun x => f x - y‚ÇÄ) Œº) :
    Tendsto (fun n => ‚à´‚Åª x, ‚ÄñapproxOn f hf s y‚ÇÄ h‚ÇÄ n x - f x‚Äñ‚Çë ‚àÇŒº) atTop (ùìù 0) := by
  simpa [eLpNorm_one_eq_lintegral_enorm] using
    tendsto_approxOn_Lp_eLpNorm hf h‚ÇÄ one_ne_top hŒº
      (by simpa [eLpNorm_one_eq_lintegral_enorm] using hi)

@[deprecated (since := "2025-01-21")] alias tendsto_approxOn_L1_nnnorm := tendsto_approxOn_L1_enorm

theorem integrable_approxOn [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (fmeas : Measurable f)
    (hf : Integrable f Œº) {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s]
    (hi‚ÇÄ : Integrable (fun _ => y‚ÇÄ) Œº) (n : ‚Ñï) : Integrable (approxOn f fmeas s y‚ÇÄ h‚ÇÄ n) Œº := by
  rw [‚Üê memLp_one_iff_integrable] at hf hi‚ÇÄ ‚ä¢
  exact memLp_approxOn fmeas hf h‚ÇÄ hi‚ÇÄ n

theorem tendsto_approxOn_range_L1_enorm [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤}
    [SeparableSpace (range f ‚à™ {0} : Set E)] (fmeas : Measurable f) (hf : Integrable f Œº) :
    Tendsto (fun n => ‚à´‚Åª x, ‚ÄñapproxOn f fmeas (range f ‚à™ {0}) 0 (by simp) n x - f x‚Äñ‚Çë ‚àÇŒº) atTop
      (ùìù 0) := by
  apply tendsto_approxOn_L1_enorm fmeas
  ¬∑ filter_upwards with x using subset_closure (by simp)
  ¬∑ simpa using hf.2

@[deprecated (since := "2025-01-21")]
alias tendsto_approxOn_range_L1_nnnorm := tendsto_approxOn_range_L1_enorm

theorem integrable_approxOn_range [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (fmeas : Measurable f)
    [SeparableSpace (range f ‚à™ {0} : Set E)] (hf : Integrable f Œº) (n : ‚Ñï) :
    Integrable (approxOn f fmeas (range f ‚à™ {0}) 0 (by simp) n) Œº :=
  integrable_approxOn fmeas hf _ (integrable_zero _ _ _) n

end Integrable

section SimpleFuncProperties

variable [MeasurableSpace Œ±]
variable [NormedAddCommGroup E] [NormedAddCommGroup F]
variable {Œº : Measure Œ±} {p : ‚Ñù‚â•0‚àû}

/-!
### Properties of simple functions in `Lp` spaces

A simple function `f : Œ± ‚Üí‚Çõ E` into a normed group `E` verifies, for a measure `Œº`:
- `MemLp f 0 Œº` and `MemLp f ‚àû Œº`, since `f` is a.e.-measurable and bounded,
- for `0 < p < ‚àû`,
  `MemLp f p Œº ‚Üî Integrable f Œº ‚Üî f.FinMeasSupp Œº ‚Üî ‚àÄ y, y ‚â† 0 ‚Üí Œº (f ‚Åª¬π' {y}) < ‚àû`.
-/


theorem exists_forall_norm_le (f : Œ± ‚Üí‚Çõ F) : ‚àÉ C, ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C :=
  exists_forall_le (f.map fun x => ‚Äñx‚Äñ)

theorem memLp_zero (f : Œ± ‚Üí‚Çõ E) (Œº : Measure Œ±) : MemLp f 0 Œº :=
  memLp_zero_iff_aestronglyMeasurable.mpr f.aestronglyMeasurable

theorem memLp_top (f : Œ± ‚Üí‚Çõ E) (Œº : Measure Œ±) : MemLp f ‚àû Œº :=
  let ‚ü®C, hfC‚ü© := f.exists_forall_norm_le
  memLp_top_of_bound f.aestronglyMeasurable C <| Eventually.of_forall hfC

protected theorem eLpNorm'_eq {p : ‚Ñù} (f : Œ± ‚Üí‚Çõ F) (Œº : Measure Œ±) :
    eLpNorm' f p Œº = (‚àë y ‚àà f.range, ‚Äñy‚Äñ‚Çë ^ p * Œº (f ‚Åª¬π' {y})) ^ (1 / p) := by
  have h_map : (‚Äñf ¬∑‚Äñ‚Çë ^ p) = f.map (‚Äñ¬∑‚Äñ‚Çë ^ p) := by simp; rfl
  rw [eLpNorm'_eq_lintegral_enorm, h_map, lintegral_eq_lintegral, map_lintegral]

theorem measure_preimage_lt_top_of_memLp (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) (f : Œ± ‚Üí‚Çõ E)
    (hf : MemLp f p Œº) (y : E) (hy_ne : y ‚â† 0) : Œº (f ‚Åª¬π' {y}) < ‚àû := by
  have hp_pos_real : 0 < p.toReal := ENNReal.toReal_pos hp_pos hp_ne_top
  have hf_eLpNorm := MemLp.eLpNorm_lt_top hf
  rw [eLpNorm_eq_eLpNorm' hp_pos hp_ne_top, f.eLpNorm'_eq, one_div,
    ‚Üê @ENNReal.lt_rpow_inv_iff _ _ p.toReal‚Åª¬π (by simp [hp_pos_real]),
    @ENNReal.top_rpow_of_pos p.toReal‚Åª¬π‚Åª¬π (by simp [hp_pos_real]),
    ENNReal.sum_lt_top] at hf_eLpNorm
  by_cases hyf : y ‚àà f.range
  swap
  ¬∑ suffices h_empty : f ‚Åª¬π' {y} = ‚àÖ by
      rw [h_empty, measure_empty]; exact ENNReal.coe_lt_top
    ext1 x
    rw [Set.mem_preimage, Set.mem_singleton_iff, mem_empty_iff_false, iff_false]
    refine fun hxy => hyf ?_
    rw [mem_range, Set.mem_range]
    exact ‚ü®x, hxy‚ü©
  specialize hf_eLpNorm y hyf
  rw [ENNReal.mul_lt_top_iff] at hf_eLpNorm
  cases hf_eLpNorm with
  | inl hf_eLpNorm => exact hf_eLpNorm.2
  | inr hf_eLpNorm =>
    cases hf_eLpNorm with
    | inl hf_eLpNorm =>
      refine absurd ?_ hy_ne
      simpa [hp_pos_real] using hf_eLpNorm
    | inr hf_eLpNorm => simp [hf_eLpNorm]

theorem memLp_of_finite_measure_preimage (p : ‚Ñù‚â•0‚àû) {f : Œ± ‚Üí‚Çõ E}
    (hf : ‚àÄ y, y ‚â† 0 ‚Üí Œº (f ‚Åª¬π' {y}) < ‚àû) : MemLp f p Œº := by
  by_cases hp0 : p = 0
  ¬∑ rw [hp0, memLp_zero_iff_aestronglyMeasurable]; exact f.aestronglyMeasurable
  by_cases hp_top : p = ‚àû
  ¬∑ rw [hp_top]; exact memLp_top f Œº
  refine ‚ü®f.aestronglyMeasurable, ?_‚ü©
  rw [eLpNorm_eq_eLpNorm' hp0 hp_top, f.eLpNorm'_eq]
  refine ENNReal.rpow_lt_top_of_nonneg (by simp) (ENNReal.sum_lt_top.mpr fun y _ => ?_).ne
  by_cases hy0 : y = 0
  ¬∑ simp [hy0, ENNReal.toReal_pos hp0 hp_top]
  ¬∑ refine ENNReal.mul_lt_top ?_ (hf y hy0)
    exact ENNReal.rpow_lt_top_of_nonneg ENNReal.toReal_nonneg ENNReal.coe_ne_top

theorem memLp_iff {f : Œ± ‚Üí‚Çõ E} (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    MemLp f p Œº ‚Üî ‚àÄ y, y ‚â† 0 ‚Üí Œº (f ‚Åª¬π' {y}) < ‚àû :=
  ‚ü®fun h => measure_preimage_lt_top_of_memLp hp_pos hp_ne_top f h, fun h =>
    memLp_of_finite_measure_preimage p h‚ü©

theorem integrable_iff {f : Œ± ‚Üí‚Çõ E} : Integrable f Œº ‚Üî ‚àÄ y, y ‚â† 0 ‚Üí Œº (f ‚Åª¬π' {y}) < ‚àû :=
  memLp_one_iff_integrable.symm.trans <| memLp_iff one_ne_zero ENNReal.coe_ne_top

theorem memLp_iff_integrable {f : Œ± ‚Üí‚Çõ E} (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    MemLp f p Œº ‚Üî Integrable f Œº :=
  (memLp_iff hp_pos hp_ne_top).trans integrable_iff.symm

theorem memLp_iff_finMeasSupp {f : Œ± ‚Üí‚Çõ E} (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    MemLp f p Œº ‚Üî f.FinMeasSupp Œº :=
  (memLp_iff hp_pos hp_ne_top).trans finMeasSupp_iff.symm

theorem integrable_iff_finMeasSupp {f : Œ± ‚Üí‚Çõ E} : Integrable f Œº ‚Üî f.FinMeasSupp Œº :=
  integrable_iff.trans finMeasSupp_iff.symm

theorem FinMeasSupp.integrable {f : Œ± ‚Üí‚Çõ E} (h : f.FinMeasSupp Œº) : Integrable f Œº :=
  integrable_iff_finMeasSupp.2 h

theorem integrable_pair {f : Œ± ‚Üí‚Çõ E} {g : Œ± ‚Üí‚Çõ F} :
    Integrable f Œº ‚Üí Integrable g Œº ‚Üí Integrable (pair f g) Œº := by
  simpa only [integrable_iff_finMeasSupp] using FinMeasSupp.pair

theorem memLp_of_isFiniteMeasure (f : Œ± ‚Üí‚Çõ E) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) [IsFiniteMeasure Œº] :
    MemLp f p Œº :=
  let ‚ü®C, hfC‚ü© := f.exists_forall_norm_le
  MemLp.of_bound f.aestronglyMeasurable C <| Eventually.of_forall hfC

@[fun_prop]
theorem integrable_of_isFiniteMeasure [IsFiniteMeasure Œº] (f : Œ± ‚Üí‚Çõ E) : Integrable f Œº :=
  memLp_one_iff_integrable.mp (f.memLp_of_isFiniteMeasure 1 Œº)

theorem measure_preimage_lt_top_of_integrable (f : Œ± ‚Üí‚Çõ E) (hf : Integrable f Œº) {x : E}
    (hx : x ‚â† 0) : Œº (f ‚Åª¬π' {x}) < ‚àû :=
  integrable_iff.mp hf x hx

theorem measure_support_lt_top_of_memLp (f : Œ± ‚Üí‚Çõ E) (hf : MemLp f p Œº) (hp_ne_zero : p ‚â† 0)
    (hp_ne_top : p ‚â† ‚àû) : Œº (support f) < ‚àû :=
  f.measure_support_lt_top ((memLp_iff hp_ne_zero hp_ne_top).mp hf)

theorem measure_support_lt_top_of_integrable (f : Œ± ‚Üí‚Çõ E) (hf : Integrable f Œº) :
    Œº (support f) < ‚àû :=
  f.measure_support_lt_top (integrable_iff.mp hf)

theorem measure_lt_top_of_memLp_indicator (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) {c : E} (hc : c ‚â† 0)
    {s : Set Œ±} (hs : MeasurableSet s) (hcs : MemLp ((const Œ± c).piecewise s hs (const Œ± 0)) p Œº) :
    Œº s < ‚ä§ := by
  have : Function.support (const Œ± c) = Set.univ := Function.support_const hc
  simpa only [memLp_iff_finMeasSupp hp_pos hp_ne_top, finMeasSupp_iff_support,
    support_indicator, Set.inter_univ, this] using hcs

end SimpleFuncProperties

end SimpleFunc

/-! Construction of the space of `Lp` simple functions, and its dense embedding into `Lp`. -/


namespace Lp

open AEEqFun

variable [MeasurableSpace Œ±] [NormedAddCommGroup E] [NormedAddCommGroup F] (p : ‚Ñù‚â•0‚àû)
  (Œº : Measure Œ±)

variable (E)

/-- `Lp.simpleFunc` is a subspace of Lp consisting of equivalence classes of an integrable simple
    function. -/
def simpleFunc : AddSubgroup (Lp E p Œº) where
  carrier := { f : Lp E p Œº | ‚àÉ s : Œ± ‚Üí‚Çõ E, (AEEqFun.mk s s.aestronglyMeasurable : Œ± ‚Üí‚Çò[Œº] E) = f }
  zero_mem' := ‚ü®0, rfl‚ü©
  add_mem' := by
    rintro f g ‚ü®s, hs‚ü© ‚ü®t, ht‚ü©
    use s + t
    simp only [‚Üê hs, ‚Üê ht, AEEqFun.mk_add_mk, AddSubgroup.coe_add, AEEqFun.mk_eq_mk,
      SimpleFunc.coe_add]
  neg_mem' := by
    rintro f ‚ü®s, hs‚ü©
    use -s
    simp only [‚Üê hs, AEEqFun.neg_mk, SimpleFunc.coe_neg, AEEqFun.mk_eq_mk, AddSubgroup.coe_neg]

variable {E p Œº}

namespace simpleFunc

section Instances

/-! Simple functions in Lp space form a `NormedSpace`. -/



protected theorem eq' {f g : Lp.simpleFunc E p Œº} : (f : Œ± ‚Üí‚Çò[Œº] E) = (g : Œ± ‚Üí‚Çò[Œº] E) ‚Üí f = g :=
  Subtype.eq ‚àò Subtype.eq

/-! Implementation note:  If `Lp.simpleFunc E p Œº` were defined as a `ùïú`-submodule of `Lp E p Œº`,
then the next few lemmas, putting a normed `ùïú`-group structure on `Lp.simpleFunc E p Œº`, would be
unnecessary.  But instead, `Lp.simpleFunc E p Œº` is defined as an `AddSubgroup` of `Lp E p Œº`,
which does not permit this (but has the advantage of working when `E` itself is a normed group,
i.e. has no scalar action). -/


variable [NormedRing ùïú] [Module ùïú E] [IsBoundedSMul ùïú E]

/-- If `E` is a normed space, `Lp.simpleFunc E p Œº` is a `SMul`. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def smul : SMul ùïú (Lp.simpleFunc E p Œº) :=
  ‚ü®fun k f =>
    ‚ü®k ‚Ä¢ (f : Lp E p Œº), by
      rcases f with ‚ü®f, ‚ü®s, hs‚ü©‚ü©
      use k ‚Ä¢ s
      apply Eq.trans (AEEqFun.smul_mk k s s.aestronglyMeasurable).symm _
      rw [hs]
      rfl‚ü©‚ü©

attribute [local instance] simpleFunc.smul

@[simp, norm_cast]
theorem coe_smul (c : ùïú) (f : Lp.simpleFunc E p Œº) :
    ((c ‚Ä¢ f : Lp.simpleFunc E p Œº) : Lp E p Œº) = c ‚Ä¢ (f : Lp E p Œº) :=
  rfl

/-- If `E` is a normed space, `Lp.simpleFunc E p Œº` is a module. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def module : Module ùïú (Lp.simpleFunc E p Œº) where
  one_smul f := by ext1; exact one_smul _ _
  mul_smul x y f := by ext1; exact mul_smul _ _ _
  smul_add x f g := by ext1; exact smul_add _ _ _
  smul_zero x := by ext1; exact smul_zero _
  add_smul x y f := by ext1; exact add_smul _ _ _
  zero_smul f := by ext1; exact zero_smul _ _

attribute [local instance] simpleFunc.module

/-- If `E` is a normed space, `Lp.simpleFunc E p Œº` is a normed space. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected theorem isBoundedSMul [Fact (1 ‚â§ p)] : IsBoundedSMul ùïú (Lp.simpleFunc E p Œº) :=
  IsBoundedSMul.of_norm_smul_le fun r f => (norm_smul_le r (f : Lp E p Œº) :)

@[deprecated (since := "2025-03-10")] protected alias boundedSMul := simpleFunc.isBoundedSMul

attribute [local instance] simpleFunc.isBoundedSMul

/-- If `E` is a normed space, `Lp.simpleFunc E p Œº` is a normed space. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def normedSpace {ùïú} [NormedField ùïú] [NormedSpace ùïú E] [Fact (1 ‚â§ p)] :
    NormedSpace ùïú (Lp.simpleFunc E p Œº) :=
  ‚ü®norm_smul_le (Œ± := ùïú) (Œ≤ := Lp.simpleFunc E p Œº)‚ü©

end Instances

attribute [local instance] simpleFunc.module simpleFunc.normedSpace simpleFunc.isBoundedSMul

section ToLp

/-- Construct the equivalence class `[f]` of a simple function `f` satisfying `MemLp`. -/
abbrev toLp (f : Œ± ‚Üí‚Çõ E) (hf : MemLp f p Œº) : Lp.simpleFunc E p Œº :=
  ‚ü®hf.toLp f, ‚ü®f, rfl‚ü©‚ü©

theorem toLp_eq_toLp (f : Œ± ‚Üí‚Çõ E) (hf : MemLp f p Œº) : (toLp f hf : Lp E p Œº) = hf.toLp f :=
  rfl

theorem toLp_eq_mk (f : Œ± ‚Üí‚Çõ E) (hf : MemLp f p Œº) :
    (toLp f hf : Œ± ‚Üí‚Çò[Œº] E) = AEEqFun.mk f f.aestronglyMeasurable :=
  rfl

theorem toLp_zero : toLp (0 : Œ± ‚Üí‚Çõ E) MemLp.zero = (0 : Lp.simpleFunc E p Œº) :=
  rfl

theorem toLp_add (f g : Œ± ‚Üí‚Çõ E) (hf : MemLp f p Œº) (hg : MemLp g p Œº) :
    toLp (f + g) (hf.add hg) = toLp f hf + toLp g hg :=
  rfl

theorem toLp_neg (f : Œ± ‚Üí‚Çõ E) (hf : MemLp f p Œº) : toLp (-f) hf.neg = -toLp f hf :=
  rfl

theorem toLp_sub (f g : Œ± ‚Üí‚Çõ E) (hf : MemLp f p Œº) (hg : MemLp g p Œº) :
    toLp (f - g) (hf.sub hg) = toLp f hf - toLp g hg := by
  simp only [sub_eq_add_neg, ‚Üê toLp_neg, ‚Üê toLp_add]

variable [NormedRing ùïú] [Module ùïú E] [IsBoundedSMul ùïú E]

theorem toLp_smul (f : Œ± ‚Üí‚Çõ E) (hf : MemLp f p Œº) (c : ùïú) :
    toLp (c ‚Ä¢ f) (hf.const_smul c) = c ‚Ä¢ toLp f hf :=
  rfl

nonrec theorem norm_toLp [Fact (1 ‚â§ p)] (f : Œ± ‚Üí‚Çõ E) (hf : MemLp f p Œº) :
    ‚ÄñtoLp f hf‚Äñ = ENNReal.toReal (eLpNorm f p Œº) :=
  norm_toLp f hf

end ToLp

section ToSimpleFunc

/-- Find a representative of a `Lp.simpleFunc`. -/
def toSimpleFunc (f : Lp.simpleFunc E p Œº) : Œ± ‚Üí‚Çõ E :=
  Classical.choose f.2

/-- `(toSimpleFunc f)` is measurable. -/
@[measurability]
protected theorem measurable [MeasurableSpace E] (f : Lp.simpleFunc E p Œº) :
    Measurable (toSimpleFunc f) :=
  (toSimpleFunc f).measurable

protected theorem stronglyMeasurable (f : Lp.simpleFunc E p Œº) :
    StronglyMeasurable (toSimpleFunc f) :=
  (toSimpleFunc f).stronglyMeasurable

@[measurability]
protected theorem aemeasurable [MeasurableSpace E] (f : Lp.simpleFunc E p Œº) :
    AEMeasurable (toSimpleFunc f) Œº :=
  (simpleFunc.measurable f).aemeasurable

protected theorem aestronglyMeasurable (f : Lp.simpleFunc E p Œº) :
    AEStronglyMeasurable (toSimpleFunc f) Œº :=
  (simpleFunc.stronglyMeasurable f).aestronglyMeasurable

theorem toSimpleFunc_eq_toFun (f : Lp.simpleFunc E p Œº) : toSimpleFunc f =·µê[Œº] f :=
  show ‚áë(toSimpleFunc f) =·µê[Œº] ‚áë(f : Œ± ‚Üí‚Çò[Œº] E) by
    convert (AEEqFun.coeFn_mk (toSimpleFunc f)
          (toSimpleFunc f).aestronglyMeasurable).symm using 2
    exact (Classical.choose_spec f.2).symm

/-- `toSimpleFunc f` satisfies the predicate `MemLp`. -/
protected theorem memLp (f : Lp.simpleFunc E p Œº) : MemLp (toSimpleFunc f) p Œº :=
  MemLp.ae_eq (toSimpleFunc_eq_toFun f).symm <| mem_Lp_iff_memLp.mp (f : Lp E p Œº).2

theorem toLp_toSimpleFunc (f : Lp.simpleFunc E p Œº) :
    toLp (toSimpleFunc f) (simpleFunc.memLp f) = f :=
  simpleFunc.eq' (Classical.choose_spec f.2)

theorem toSimpleFunc_toLp (f : Œ± ‚Üí‚Çõ E) (hfi : MemLp f p Œº) : toSimpleFunc (toLp f hfi) =·µê[Œº] f := by
  rw [‚Üê AEEqFun.mk_eq_mk]; exact Classical.choose_spec (toLp f hfi).2

variable (E Œº)

theorem zero_toSimpleFunc : toSimpleFunc (0 : Lp.simpleFunc E p Œº) =·µê[Œº] 0 := by
  filter_upwards [toSimpleFunc_eq_toFun (0 : Lp.simpleFunc E p Œº),
    Lp.coeFn_zero E 1 Œº] with _ h‚ÇÅ _
  rwa [h‚ÇÅ]

variable {E Œº}

theorem add_toSimpleFunc (f g : Lp.simpleFunc E p Œº) :
    toSimpleFunc (f + g) =·µê[Œº] toSimpleFunc f + toSimpleFunc g := by
  filter_upwards [toSimpleFunc_eq_toFun (f + g), toSimpleFunc_eq_toFun f,
    toSimpleFunc_eq_toFun g, Lp.coeFn_add (f : Lp E p Œº) g] with _
  simp only [AddSubgroup.coe_add, Pi.add_apply]
  iterate 4 intro h; rw [h]

theorem neg_toSimpleFunc (f : Lp.simpleFunc E p Œº) : toSimpleFunc (-f) =·µê[Œº] -toSimpleFunc f := by
  filter_upwards [toSimpleFunc_eq_toFun (-f), toSimpleFunc_eq_toFun f,
    Lp.coeFn_neg (f : Lp E p Œº)] with _
  simp only [Pi.neg_apply, AddSubgroup.coe_neg]
  repeat intro h; rw [h]

theorem sub_toSimpleFunc (f g : Lp.simpleFunc E p Œº) :
    toSimpleFunc (f - g) =·µê[Œº] toSimpleFunc f - toSimpleFunc g := by
  filter_upwards [toSimpleFunc_eq_toFun (f - g), toSimpleFunc_eq_toFun f,
    toSimpleFunc_eq_toFun g, Lp.coeFn_sub (f : Lp E p Œº) g] with _
  simp only [AddSubgroup.coe_sub, Pi.sub_apply]
  repeat' intro h; rw [h]

variable [NormedRing ùïú] [Module ùïú E] [IsBoundedSMul ùïú E]

theorem smul_toSimpleFunc (k : ùïú) (f : Lp.simpleFunc E p Œº) :
    toSimpleFunc (k ‚Ä¢ f) =·µê[Œº] k ‚Ä¢ ‚áë(toSimpleFunc f) := by
  filter_upwards [toSimpleFunc_eq_toFun (k ‚Ä¢ f), toSimpleFunc_eq_toFun f,
    Lp.coeFn_smul k (f : Lp E p Œº)] with _
  simp only [Pi.smul_apply, coe_smul]
  repeat intro h; rw [h]

theorem norm_toSimpleFunc [Fact (1 ‚â§ p)] (f : Lp.simpleFunc E p Œº) :
    ‚Äñf‚Äñ = ENNReal.toReal (eLpNorm (toSimpleFunc f) p Œº) := by
  simpa [toLp_toSimpleFunc] using norm_toLp (toSimpleFunc f) (simpleFunc.memLp f)

end ToSimpleFunc

section Induction

variable (p) in
/-- The characteristic function of a finite-measure measurable set `s`, as an `Lp` simple function.
-/
def indicatorConst {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) :
    Lp.simpleFunc E p Œº :=
  toLp ((SimpleFunc.const _ c).piecewise s hs (SimpleFunc.const _ 0))
    (memLp_indicator_const p hs c (Or.inr hŒºs))

@[simp]
theorem coe_indicatorConst {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) :
    (‚Üë(indicatorConst p hs hŒºs c) : Lp E p Œº) = indicatorConstLp p hs hŒºs c :=
  rfl

theorem toSimpleFunc_indicatorConst {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) :
    toSimpleFunc (indicatorConst p hs hŒºs c) =·µê[Œº]
      (SimpleFunc.const _ c).piecewise s hs (SimpleFunc.const _ 0) :=
  Lp.simpleFunc.toSimpleFunc_toLp _ _

/-- To prove something for an arbitrary `Lp` simple function, with `0 < p < ‚àû`, it suffices to show
that the property holds for (multiples of) characteristic functions of finite-measure measurable
sets and is closed under addition (of functions with disjoint support). -/
@[elab_as_elim]
protected theorem induction (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) {P : Lp.simpleFunc E p Œº ‚Üí Prop}
    (indicatorConst :
      ‚àÄ (c : E) {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s < ‚àû),
        P (Lp.simpleFunc.indicatorConst p hs hŒºs.ne c))
    (add :
      ‚àÄ ‚¶Éf g : Œ± ‚Üí‚Çõ E‚¶Ñ,
        ‚àÄ hf : MemLp f p Œº,
          ‚àÄ hg : MemLp g p Œº,
            Disjoint (support f) (support g) ‚Üí
              P (Lp.simpleFunc.toLp f hf) ‚Üí
                P (Lp.simpleFunc.toLp g hg) ‚Üí P (Lp.simpleFunc.toLp f hf + Lp.simpleFunc.toLp g hg))
    (f : Lp.simpleFunc E p Œº) : P f := by
  suffices ‚àÄ f : Œ± ‚Üí‚Çõ E, ‚àÄ hf : MemLp f p Œº, P (toLp f hf) by
    rw [‚Üê toLp_toSimpleFunc f]
    apply this
  clear f
  apply SimpleFunc.induction
  ¬∑ intro c s hs hf
    by_cases hc : c = 0
    ¬∑ convert indicatorConst 0 MeasurableSet.empty (by simp) using 1
      ext1
      simp [hc]
    exact indicatorConst c hs
      (SimpleFunc.measure_lt_top_of_memLp_indicator hp_pos hp_ne_top hc hs hf)
  ¬∑ intro f g hfg hf hg hfg'
    obtain ‚ü®hf', hg'‚ü© : MemLp f p Œº ‚àß MemLp g p Œº :=
      (memLp_add_of_disjoint hfg f.stronglyMeasurable g.stronglyMeasurable).mp hfg'
    exact add hf' hg' hfg (hf hf') (hg hg')

end Induction

section CoeToLp

variable [Fact (1 ‚â§ p)]

protected theorem uniformContinuous : UniformContinuous ((‚Üë) : Lp.simpleFunc E p Œº ‚Üí Lp E p Œº) :=
  uniformContinuous_comap

lemma isUniformEmbedding : IsUniformEmbedding ((‚Üë) : Lp.simpleFunc E p Œº ‚Üí Lp E p Œº) :=
  isUniformEmbedding_comap Subtype.val_injective

theorem isUniformInducing : IsUniformInducing ((‚Üë) : Lp.simpleFunc E p Œº ‚Üí Lp E p Œº) :=
  simpleFunc.isUniformEmbedding.isUniformInducing

lemma isDenseEmbedding (hp_ne_top : p ‚â† ‚àû) :
    IsDenseEmbedding ((‚Üë) : Lp.simpleFunc E p Œº ‚Üí Lp E p Œº) := by
  borelize E
  apply simpleFunc.isUniformEmbedding.isDenseEmbedding
  intro f
  rw [mem_closure_iff_seq_limit]
  have hfi' : MemLp f p Œº := Lp.memLp f
  haveI : SeparableSpace (range f ‚à™ {0} : Set E) :=
    (Lp.stronglyMeasurable f).separableSpace_range_union_singleton
  refine
    ‚ü®fun n =>
      toLp
        (SimpleFunc.approxOn f (Lp.stronglyMeasurable f).measurable (range f ‚à™ {0}) 0 _ n)
        (SimpleFunc.memLp_approxOn_range (Lp.stronglyMeasurable f).measurable hfi' n),
      fun n => mem_range_self _, ?_‚ü©
  convert SimpleFunc.tendsto_approxOn_range_Lp hp_ne_top (Lp.stronglyMeasurable f).measurable hfi'
  rw [toLp_coeFn f (Lp.memLp f)]

protected theorem isDenseInducing (hp_ne_top : p ‚â† ‚àû) :
    IsDenseInducing ((‚Üë) : Lp.simpleFunc E p Œº ‚Üí Lp E p Œº) :=
  (simpleFunc.isDenseEmbedding hp_ne_top).isDenseInducing

protected theorem denseRange (hp_ne_top : p ‚â† ‚àû) :
    DenseRange ((‚Üë) : Lp.simpleFunc E p Œº ‚Üí Lp E p Œº) :=
  (simpleFunc.isDenseInducing hp_ne_top).dense

protected theorem dense (hp_ne_top : p ‚â† ‚àû) : Dense (Lp.simpleFunc E p Œº : Set (Lp E p Œº)) := by
  simpa only [denseRange_subtype_val] using simpleFunc.denseRange (E := E) (Œº := Œº) hp_ne_top

variable [NormedRing ùïú] [Module ùïú E] [IsBoundedSMul ùïú E]
variable (Œ± E ùïú)

/-- The embedding of Lp simple functions into Lp functions, as a continuous linear map. -/
def coeToLp : Lp.simpleFunc E p Œº ‚ÜíL[ùïú] Lp E p Œº :=
  { AddSubgroup.subtype (Lp.simpleFunc E p Œº) with
    map_smul' := fun _ _ => rfl
    cont := Lp.simpleFunc.uniformContinuous.continuous }

variable {Œ± E ùïú}

end CoeToLp

section Order

variable {G : Type*} [NormedAddCommGroup G]

theorem coeFn_le [PartialOrder G] (f g : Lp.simpleFunc G p Œº) : (f : Œ± ‚Üí G) ‚â§·µê[Œº] g ‚Üî f ‚â§ g := by
  rw [‚Üê Subtype.coe_le_coe, ‚Üê Lp.coeFn_le]

instance instAddLeftMono [PartialOrder G] [IsOrderedAddMonoid G] :
    AddLeftMono (Lp.simpleFunc G p Œº) := by
  refine ‚ü®fun f g‚ÇÅ g‚ÇÇ hg‚ÇÅ‚ÇÇ => ?_‚ü©
  exact add_le_add_left hg‚ÇÅ‚ÇÇ f

variable (p Œº G)

theorem coeFn_zero : (0 : Lp.simpleFunc G p Œº) =·µê[Œº] (0 : Œ± ‚Üí G) :=
  Lp.coeFn_zero _ _ _

variable {p Œº G}

variable [PartialOrder G]

theorem coeFn_nonneg (f : Lp.simpleFunc G p Œº) : (0 : Œ± ‚Üí G) ‚â§·µê[Œº] f ‚Üî 0 ‚â§ f := by
  rw [‚Üê Subtype.coe_le_coe, Lp.coeFn_nonneg, AddSubmonoid.coe_zero]

theorem exists_simpleFunc_nonneg_ae_eq {f : Lp.simpleFunc G p Œº} (hf : 0 ‚â§ f) :
    ‚àÉ f' : Œ± ‚Üí‚Çõ G, 0 ‚â§ f' ‚àß f =·µê[Œº] f' := by
  rcases f with ‚ü®‚ü®f, hp‚ü©, g, (rfl : _ = f)‚ü©
  change 0 ‚â§·µê[Œº] g at hf
  classical
  refine ‚ü®g.map ({x : G | 0 ‚â§ x}.piecewise id 0), fun x ‚Ü¶ ?_, (AEEqFun.coeFn_mk _ _).trans ?_‚ü©
  ¬∑ simpa using Set.indicator_apply_nonneg id
  ¬∑ filter_upwards [hf] with x (hx : 0 ‚â§ g x)
    simpa using Set.indicator_of_mem hx id |>.symm

variable (p Œº G)

/-- Coercion from nonnegative simple functions of Lp to nonnegative functions of Lp. -/
def coeSimpleFuncNonnegToLpNonneg :
    { g : Lp.simpleFunc G p Œº // 0 ‚â§ g } ‚Üí { g : Lp G p Œº // 0 ‚â§ g } := fun g => ‚ü®g, g.2‚ü©

theorem denseRange_coeSimpleFuncNonnegToLpNonneg [hp : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû) :
    DenseRange (coeSimpleFuncNonnegToLpNonneg p Œº G) := fun g ‚Ü¶ by
  borelize G
  rw [mem_closure_iff_seq_limit]
  have hg_memLp : MemLp (g : Œ± ‚Üí G) p Œº := Lp.memLp (g : Lp G p Œº)
  have zero_mem : (0 : G) ‚àà (range (g : Œ± ‚Üí G) ‚à™ {0} : Set G) ‚à© { y | 0 ‚â§ y } := by
    simp only [union_singleton, mem_inter_iff, mem_insert_iff, eq_self_iff_true, true_or,
      mem_setOf_eq, le_refl, and_self_iff]
  have : SeparableSpace ((range (g : Œ± ‚Üí G) ‚à™ {0}) ‚à© { y | 0 ‚â§ y } : Set G) := by
    apply IsSeparable.separableSpace
    apply IsSeparable.mono _ Set.inter_subset_left
    exact
      (Lp.stronglyMeasurable (g : Lp G p Œº)).isSeparable_range.union
        (finite_singleton _).isSeparable
  have g_meas : Measurable (g : Œ± ‚Üí G) := (Lp.stronglyMeasurable (g : Lp G p Œº)).measurable
  let x n := SimpleFunc.approxOn (g : Œ± ‚Üí G) g_meas
    ((range (g : Œ± ‚Üí G) ‚à™ {0}) ‚à© { y | 0 ‚â§ y }) 0 zero_mem n
  have hx_nonneg : ‚àÄ n, 0 ‚â§ x n := by
    intro n a
    change x n a ‚àà { y : G | 0 ‚â§ y }
    have A : (range (g : Œ± ‚Üí G) ‚à™ {0} : Set G) ‚à© { y | 0 ‚â§ y } ‚äÜ { y | 0 ‚â§ y } :=
      inter_subset_right
    apply A
    exact SimpleFunc.approxOn_mem g_meas _ n a
  have hx_memLp : ‚àÄ n, MemLp (x n) p Œº :=
    SimpleFunc.memLp_approxOn _ hg_memLp _ ‚ü®aestronglyMeasurable_const, by simp‚ü©
  have h_toLp := fun n => MemLp.coeFn_toLp (hx_memLp n)
  have hx_nonneg_Lp : ‚àÄ n, 0 ‚â§ toLp (x n) (hx_memLp n) := by
    intro n
    rw [‚Üê Lp.simpleFunc.coeFn_le, Lp.simpleFunc.toLp_eq_toLp]
    filter_upwards [Lp.simpleFunc.coeFn_zero p Œº G, h_toLp n] with a ha0 ha_toLp
    rw [ha0, ha_toLp]
    exact hx_nonneg n a
  have hx_tendsto :
      Tendsto (fun n : ‚Ñï => eLpNorm ((x n : Œ± ‚Üí G) - (g : Œ± ‚Üí G)) p Œº) atTop (ùìù 0) := by
    apply SimpleFunc.tendsto_approxOn_Lp_eLpNorm g_meas zero_mem hp_ne_top
    ¬∑ have hg_nonneg : (0 : Œ± ‚Üí G) ‚â§·µê[Œº] g := (Lp.coeFn_nonneg _).mpr g.2
      refine hg_nonneg.mono fun a ha => subset_closure ?_
      simpa using ha
    ¬∑ simp_rw [sub_zero]; exact hg_memLp.eLpNorm_lt_top
  refine
    ‚ü®fun n =>
      (coeSimpleFuncNonnegToLpNonneg p Œº G) ‚ü®toLp (x n) (hx_memLp n), hx_nonneg_Lp n‚ü©,
      fun n => mem_range_self _, ?_‚ü©
  suffices Tendsto (fun n : ‚Ñï => (toLp (x n) (hx_memLp n) : Lp G p Œº)) atTop (ùìù (g : Lp G p Œº)) by
    rw [tendsto_iff_dist_tendsto_zero] at this ‚ä¢
    simp_rw [Subtype.dist_eq]
    exact this
  rw [Lp.tendsto_Lp_iff_tendsto_eLpNorm']
  refine Filter.Tendsto.congr (fun n => eLpNorm_congr_ae (EventuallyEq.sub ?_ ?_)) hx_tendsto
  ¬∑ symm
    rw [Lp.simpleFunc.toLp_eq_toLp]
    exact h_toLp n
  ¬∑ rfl

variable {p Œº G}

end Order

end simpleFunc

end Lp

variable [MeasurableSpace Œ±] [NormedAddCommGroup E] {f : Œ± ‚Üí E} {p : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±}

/-- To prove something for an arbitrary `Lp` function in a second countable Borel normed group, it
suffices to show that
* the property holds for (multiples of) characteristic functions;
* is closed under addition;
* the set of functions in `Lp` for which the property holds is closed.
-/
@[elab_as_elim]
theorem Lp.induction [_i : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû) (motive : Lp E p Œº ‚Üí Prop)
    (indicatorConst : ‚àÄ (c : E) {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s < ‚àû),
      motive (Lp.simpleFunc.indicatorConst p hs hŒºs.ne c))
    (add : ‚àÄ ‚¶Éf g‚¶Ñ, ‚àÄ hf : MemLp f p Œº, ‚àÄ hg : MemLp g p Œº, Disjoint (support f) (support g) ‚Üí
      motive (hf.toLp f) ‚Üí motive (hg.toLp g) ‚Üí motive (hf.toLp f + hg.toLp g))
    (isClosed : IsClosed { f : Lp E p Œº | motive f }) : ‚àÄ f : Lp E p Œº, motive f := by
  refine fun f => (Lp.simpleFunc.denseRange hp_ne_top).induction_on f isClosed ?_
  refine Lp.simpleFunc.induction (Œ± := Œ±) (E := E) (lt_of_lt_of_le zero_lt_one _i.elim).ne'
    hp_ne_top ?_ ?_
  ¬∑ exact fun c s => indicatorConst c
  ¬∑ exact fun f g hf hg => add hf hg

/-- To prove something for an arbitrary `MemLp` function in a second countable
Borel normed group, it suffices to show that
* the property holds for (multiples of) characteristic functions;
* is closed under addition;
* the set of functions in the `L·µñ` space for which the property holds is closed.
* the property is closed under the almost-everywhere equal relation.

It is possible to make the hypotheses in the induction steps a bit stronger, and such conditions
can be added once we need them (for example in `h_add` it is only necessary to consider the sum of
a simple function with a multiple of a characteristic function and that the intersection
of their images is a subset of `{0}`).
-/
@[elab_as_elim]
theorem MemLp.induction [_i : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû) (motive : (Œ± ‚Üí E) ‚Üí Prop)
    (indicator : ‚àÄ (c : E) ‚¶És‚¶Ñ, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí motive (s.indicator fun _ => c))
    (add : ‚àÄ ‚¶Éf g : Œ± ‚Üí E‚¶Ñ, Disjoint (support f) (support g) ‚Üí MemLp f p Œº ‚Üí MemLp g p Œº ‚Üí
      motive f ‚Üí motive g ‚Üí motive (f + g))
    (closed : IsClosed { f : Lp E p Œº | motive f })
    (ae : ‚àÄ ‚¶Éf g‚¶Ñ, f =·µê[Œº] g ‚Üí MemLp f p Œº ‚Üí motive f ‚Üí motive g) :
    ‚àÄ ‚¶Éf : Œ± ‚Üí E‚¶Ñ, MemLp f p Œº ‚Üí motive f := by
  have : ‚àÄ f : SimpleFunc Œ± E, MemLp f p Œº ‚Üí motive f := by
    apply SimpleFunc.induction
    ¬∑ intro c s hs h
      by_cases hc : c = 0
      ¬∑ subst hc; convert indicator 0 MeasurableSet.empty (by simp) using 1; ext; simp [const]
      have hp_pos : p ‚â† 0 := (lt_of_lt_of_le zero_lt_one _i.elim).ne'
      exact indicator c hs (SimpleFunc.measure_lt_top_of_memLp_indicator hp_pos hp_ne_top hc hs h)
    ¬∑ intro f g hfg hf hg int_fg
      rw [SimpleFunc.coe_add,
        memLp_add_of_disjoint hfg f.stronglyMeasurable g.stronglyMeasurable] at int_fg
      exact add hfg int_fg.1 int_fg.2 (hf int_fg.1) (hg int_fg.2)
  have : ‚àÄ f : Lp.simpleFunc E p Œº, motive f := by
    intro f
    exact
      ae (Lp.simpleFunc.toSimpleFunc_eq_toFun f) (Lp.simpleFunc.memLp f)
        (this (Lp.simpleFunc.toSimpleFunc f) (Lp.simpleFunc.memLp f))
  have : ‚àÄ f : Lp E p Œº, motive f := fun f =>
    (Lp.simpleFunc.denseRange hp_ne_top).induction_on f closed this
  exact fun f hf => ae hf.coeFn_toLp (Lp.memLp _) (this (hf.toLp f))

/-- If a set of ae strongly measurable functions is stable under addition and approximates
characteristic functions in `‚Ñíp`, then it is dense in `‚Ñíp`. -/
theorem MemLp.induction_dense (hp_ne_top : p ‚â† ‚àû) (P : (Œ± ‚Üí E) ‚Üí Prop)
    (h0P :
      ‚àÄ (c : E) ‚¶És : Set Œ±‚¶Ñ,
        MeasurableSet s ‚Üí
          Œº s < ‚àû ‚Üí
            ‚àÄ {Œµ : ‚Ñù‚â•0‚àû}, Œµ ‚â† 0 ‚Üí ‚àÉ g : Œ± ‚Üí E, eLpNorm (g - s.indicator fun _ => c) p Œº ‚â§ Œµ ‚àß P g)
    (h1P : ‚àÄ f g, P f ‚Üí P g ‚Üí P (f + g)) (h2P : ‚àÄ f, P f ‚Üí AEStronglyMeasurable f Œº) {f : Œ± ‚Üí E}
    (hf : MemLp f p Œº) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) : ‚àÉ g : Œ± ‚Üí E, eLpNorm (f - g) p Œº ‚â§ Œµ ‚àß P g := by
  rcases eq_or_ne p 0 with (rfl | hp_pos)
  ¬∑ rcases h0P (0 : E) MeasurableSet.empty (by simp only [measure_empty, zero_lt_top])
        hŒµ with ‚ü®g, _, Pg‚ü©
    exact ‚ü®g, by simp only [eLpNorm_exponent_zero, zero_le'], Pg‚ü©
  suffices H : ‚àÄ (f' : Œ± ‚Üí‚Çõ E) (Œ¥ : ‚Ñù‚â•0‚àû) (hŒ¥ : Œ¥ ‚â† 0), MemLp f' p Œº ‚Üí
      ‚àÉ g, eLpNorm (‚áëf' - g) p Œº ‚â§ Œ¥ ‚àß P g by
    obtain ‚ü®Œ∑, Œ∑pos, hŒ∑‚ü© := exists_Lp_half E Œº p hŒµ
    rcases hf.exists_simpleFunc_eLpNorm_sub_lt hp_ne_top Œ∑pos.ne' with ‚ü®f', hf', f'_mem‚ü©
    rcases H f' Œ∑ Œ∑pos.ne' f'_mem with ‚ü®g, hg, Pg‚ü©
    refine ‚ü®g, ?_, Pg‚ü©
    convert (hŒ∑ _ _ (hf.aestronglyMeasurable.sub f'.aestronglyMeasurable)
          (f'.aestronglyMeasurable.sub (h2P g Pg)) hf'.le hg).le using 2
    simp only [sub_add_sub_cancel]
  apply SimpleFunc.induction
  ¬∑ intro c s hs Œµ Œµpos Hs
    rcases eq_or_ne c 0 with (rfl | hc)
    ¬∑ rcases h0P (0 : E) MeasurableSet.empty (by simp only [measure_empty, zero_lt_top])
          Œµpos with ‚ü®g, hg, Pg‚ü©
      rw [‚Üê eLpNorm_neg, neg_sub] at hg
      refine ‚ü®g, ?_, Pg‚ü©
      convert hg
      ext x
      simp only [SimpleFunc.const_zero, SimpleFunc.coe_piecewise, SimpleFunc.coe_zero,
        piecewise_eq_indicator, indicator_zero', Pi.zero_apply, indicator_zero]
    ¬∑ have : Œº s < ‚àû := SimpleFunc.measure_lt_top_of_memLp_indicator hp_pos hp_ne_top hc hs Hs
      rcases h0P c hs this Œµpos with ‚ü®g, hg, Pg‚ü©
      rw [‚Üê eLpNorm_neg, neg_sub] at hg
      exact ‚ü®g, hg, Pg‚ü©
  ¬∑ intro f f' hff' hf hf' Œ¥ Œ¥pos int_ff'
    obtain ‚ü®Œ∑, Œ∑pos, hŒ∑‚ü© := exists_Lp_half E Œº p Œ¥pos
    rw [SimpleFunc.coe_add,
      memLp_add_of_disjoint hff' f.stronglyMeasurable f'.stronglyMeasurable] at int_ff'
    rcases hf Œ∑ Œ∑pos.ne' int_ff'.1 with ‚ü®g, hg, Pg‚ü©
    rcases hf' Œ∑ Œ∑pos.ne' int_ff'.2 with ‚ü®g', hg', Pg'‚ü©
    refine ‚ü®g + g', ?_, h1P g g' Pg Pg'‚ü©
    convert (hŒ∑ _ _ (f.aestronglyMeasurable.sub (h2P g Pg))
          (f'.aestronglyMeasurable.sub (h2P g' Pg')) hg hg').le using 2
    rw [SimpleFunc.coe_add]
    abel

section Integrable

@[inherit_doc MeasureTheory.Lp.simpleFunc]
notation:25 Œ± " ‚Üí‚ÇÅ‚Çõ[" Œº "] " E => @MeasureTheory.Lp.simpleFunc Œ± E _ _ 1 Œº

theorem L1.SimpleFunc.toLp_one_eq_toL1 (f : Œ± ‚Üí‚Çõ E) (hf : Integrable f Œº) :
    (Lp.simpleFunc.toLp f (memLp_one_iff_integrable.2 hf) : Œ± ‚Üí‚ÇÅ[Œº] E) = hf.toL1 f :=
  rfl

@[fun_prop]
protected theorem L1.SimpleFunc.integrable (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) :
    Integrable (Lp.simpleFunc.toSimpleFunc f) Œº := by
  rw [‚Üê memLp_one_iff_integrable]; exact Lp.simpleFunc.memLp f

/-- To prove something for an arbitrary integrable function in a normed group,
it suffices to show that
* the property holds for (multiples of) characteristic functions;
* is closed under addition;
* the set of functions in the `L¬π` space for which the property holds is closed.
* the property is closed under the almost-everywhere equal relation.

It is possible to make the hypotheses in the induction steps a bit stronger, and such conditions
can be added once we need them (for example in `h_add` it is only necessary to consider the sum of
a simple function with a multiple of a characteristic function and that the intersection
of their images is a subset of `{0}`).
-/
@[elab_as_elim]
theorem Integrable.induction (P : (Œ± ‚Üí E) ‚Üí Prop)
    (h_ind : ‚àÄ (c : E) ‚¶És‚¶Ñ, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí P (s.indicator fun _ => c))
    (h_add :
      ‚àÄ ‚¶Éf g : Œ± ‚Üí E‚¶Ñ,
        Disjoint (support f) (support g) ‚Üí Integrable f Œº ‚Üí Integrable g Œº ‚Üí P f ‚Üí P g ‚Üí P (f + g))
    (h_closed : IsClosed { f : Œ± ‚Üí‚ÇÅ[Œº] E | P f })
    (h_ae : ‚àÄ ‚¶Éf g‚¶Ñ, f =·µê[Œº] g ‚Üí Integrable f Œº ‚Üí P f ‚Üí P g) :
    ‚àÄ ‚¶Éf : Œ± ‚Üí E‚¶Ñ, Integrable f Œº ‚Üí P f := by
  simp only [‚Üê memLp_one_iff_integrable] at *
  exact MemLp.induction one_ne_top (motive := P) h_ind h_add h_closed h_ae

end Integrable

end MeasureTheory
