/-
Copyright (c) 2022 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou, Yury Kudryashov, Heather Macbeth

! This file was ported from Lean 3 source module measure_theory.function.simple_func_dense_lp
! leanprover-community/mathlib commit 5a2df4cd59cb31e97a516d4603a14bed5c2f9425
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.MeasureTheory.Function.L1Space
import Mathbin.MeasureTheory.Function.SimpleFuncDense

/-!
# Density of simple functions

Show that each `L·µñ` Borel measurable function can be approximated in `L·µñ` norm
by a sequence of simple functions.

## Main definitions

* `measure_theory.Lp.simple_func`, the type of `Lp` simple functions
* `coe_to_Lp`, the embedding of `Lp.simple_func E p Œº` into `Lp E p Œº`

## Main results

* `tendsto_approx_on_univ_Lp` (L·µñ convergence): If `E` is a `normed_add_comm_group` and `f` is
  measurable and `mem_‚Ñíp` (for `p < ‚àû`), then the simple functions
  `simple_func.approx_on f hf s 0 h‚ÇÄ n` may be considered as elements of `Lp E p Œº`, and they tend
  in L·µñ to `f`.
* `Lp.simple_func.dense_embedding`: the embedding `coe_to_Lp` of the `Lp` simple functions into
  `Lp` is dense.
* `Lp.simple_func.induction`, `Lp.induction`, `mem_‚Ñíp.induction`, `integrable.induction`: to prove
  a predicate for all elements of one of these classes of functions, it suffices to check that it
  behaves correctly on simple functions.

## TODO

For `E` finite-dimensional, simple functions `Œ± ‚Üí‚Çõ E` are dense in L^‚àû -- prove this.

## Notations

* `Œ± ‚Üí‚Çõ Œ≤` (local notation): the type of simple functions `Œ± ‚Üí Œ≤`.
* `Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E`: the type of `L1` simple functions `Œ± ‚Üí Œ≤`.
-/


noncomputable section

open Set Function Filter TopologicalSpace ENNReal Emetric Finset

open scoped Classical Topology ENNReal MeasureTheory BigOperators

variable {Œ± Œ≤ Œπ E F ùïú : Type _}

namespace MeasureTheory

-- mathport name: ¬´expr ‚Üí‚Çõ ¬ª
local infixr:25 " ‚Üí‚Çõ " => SimpleFunc

namespace SimpleFunc

/-! ### Lp approximation by simple functions -/


section Lp

variable [MeasurableSpace Œ≤] [MeasurableSpace E] [NormedAddCommGroup E] [NormedAddCommGroup F]
  {q : ‚Ñù} {p : ‚Ñù‚â•0‚àû}

theorem nnnorm_approxOn_le [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E}
    {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s] (x : Œ≤) (n : ‚Ñï) :
    ‚ÄñapproxOn f hf s y‚ÇÄ h‚ÇÄ n x - f x‚Äñ‚Çä ‚â§ ‚Äñf x - y‚ÇÄ‚Äñ‚Çä :=
  by
  have := edist_approx_on_le hf h‚ÇÄ x n
  rw [edist_comm y‚ÇÄ] at this
  simp only [edist_nndist, nndist_eq_nnnorm] at this
  exact_mod_cast this
#align measure_theory.simple_func.nnnorm_approx_on_le MeasureTheory.SimpleFunc.nnnorm_approxOn_le

theorem norm_approxOn_y‚ÇÄ_le [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E}
    {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s] (x : Œ≤) (n : ‚Ñï) :
    ‚ÄñapproxOn f hf s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ‚Äñ ‚â§ ‚Äñf x - y‚ÇÄ‚Äñ + ‚Äñf x - y‚ÇÄ‚Äñ :=
  by
  have := edist_approx_on_y0_le hf h‚ÇÄ x n
  repeat' rw [edist_comm y‚ÇÄ, edist_eq_coe_nnnorm_sub] at this
  exact_mod_cast this
#align measure_theory.simple_func.norm_approx_on_y‚ÇÄ_le MeasureTheory.SimpleFunc.norm_approxOn_y‚ÇÄ_le

theorem norm_approxOn_zero_le [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E}
    (h‚ÇÄ : (0 : E) ‚àà s) [SeparableSpace s] (x : Œ≤) (n : ‚Ñï) :
    ‚ÄñapproxOn f hf s 0 h‚ÇÄ n x‚Äñ ‚â§ ‚Äñf x‚Äñ + ‚Äñf x‚Äñ :=
  by
  have := edist_approx_on_y0_le hf h‚ÇÄ x n
  simp [edist_comm (0 : E), edist_eq_coe_nnnorm] at this
  exact_mod_cast this
#align measure_theory.simple_func.norm_approx_on_zero_le MeasureTheory.SimpleFunc.norm_approxOn_zero_le

theorem tendsto_approxOn_Lp_snorm [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f)
    {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s] (hp_ne_top : p ‚â† ‚àû) {Œº : Measure Œ≤}
    (hŒº : ‚àÄ·µê x ‚àÇŒº, f x ‚àà closure s) (hi : snorm (fun x => f x - y‚ÇÄ) p Œº < ‚àû) :
    Tendsto (fun n => snorm (approxOn f hf s y‚ÇÄ h‚ÇÄ n - f) p Œº) atTop (ùìù 0) :=
  by
  by_cases hp_zero : p = 0
  ¬∑ simpa only [hp_zero, snorm_exponent_zero] using tendsto_const_nhds
  have hp : 0 < p.to_real := to_real_pos hp_zero hp_ne_top
  suffices tendsto (fun n => ‚à´‚Åª x, ‚Äñapprox_on f hf s y‚ÇÄ h‚ÇÄ n x - f x‚Äñ‚Çä ^ p.to_real ‚àÇŒº) at_top (ùìù 0)
    by
    simp only [snorm_eq_lintegral_rpow_nnnorm hp_zero hp_ne_top]
    convert continuous_rpow_const.continuous_at.tendsto.comp this <;> simp [_root_.inv_pos.mpr hp]
  -- We simply check the conditions of the Dominated Convergence Theorem:
  -- (1) The function "`p`-th power of distance between `f` and the approximation" is measurable
  have hF_meas :
    ‚àÄ n, Measurable fun x => (‚Äñapprox_on f hf s y‚ÇÄ h‚ÇÄ n x - f x‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ p.to_real := by
    simpa only [‚Üê edist_eq_coe_nnnorm_sub] using fun n =>
      (approx_on f hf s y‚ÇÄ h‚ÇÄ n).measurable_bind (fun y x => edist y (f x) ^ p.to_real) fun y =>
        (measurable_edist_right.comp hf).pow_const p.to_real
  -- (2) The functions "`p`-th power of distance between `f` and the approximation" are uniformly
  -- bounded, at any given point, by `Œª x, ‚Äñf x - y‚ÇÄ‚Äñ ^ p.to_real`
  have h_bound :
    ‚àÄ n,
      (fun x => (‚Äñapprox_on f hf s y‚ÇÄ h‚ÇÄ n x - f x‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ p.to_real) ‚â§·µê[Œº] fun x =>
        ‚Äñf x - y‚ÇÄ‚Äñ‚Çä ^ p.to_real :=
    fun n =>
    eventually_of_forall fun x =>
      rpow_le_rpow (coe_mono (nnnorm_approx_on_le hf h‚ÇÄ x n)) to_real_nonneg
  -- (3) The bounding function `Œª x, ‚Äñf x - y‚ÇÄ‚Äñ ^ p.to_real` has finite integral
  have h_fin : (‚à´‚Åª a : Œ≤, ‚Äñf a - y‚ÇÄ‚Äñ‚Çä ^ p.to_real ‚àÇŒº) ‚â† ‚ä§ :=
    (lintegral_rpow_nnnorm_lt_top_of_snorm_lt_top hp_zero hp_ne_top hi).Ne
  -- (4) The functions "`p`-th power of distance between `f` and the approximation" tend pointwise
  -- to zero
  have h_lim :
    ‚àÄ·µê a : Œ≤ ‚àÇŒº,
      tendsto (fun n => (‚Äñapprox_on f hf s y‚ÇÄ h‚ÇÄ n a - f a‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ p.to_real) at_top (ùìù 0) :=
    by
    filter_upwards [hŒº]with a ha
    have : tendsto (fun n => (approx_on f hf s y‚ÇÄ h‚ÇÄ n) a - f a) at_top (ùìù (f a - f a)) :=
      (tendsto_approx_on hf h‚ÇÄ ha).sub tendsto_const_nhds
    convert continuous_rpow_const.continuous_at.tendsto.comp (tendsto_coe.mpr this.nnnorm)
    simp [zero_rpow_of_pos hp]
  -- Then we apply the Dominated Convergence Theorem
  simpa using tendsto_lintegral_of_dominated_convergence _ hF_meas h_bound h_fin h_lim
#align measure_theory.simple_func.tendsto_approx_on_Lp_snorm MeasureTheory.SimpleFunc.tendsto_approxOn_Lp_snorm

theorem mem‚Ñíp_approxOn [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (fmeas : Measurable f)
    (hf : Mem‚Ñíp f p Œº) {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s]
    (hi‚ÇÄ : Mem‚Ñíp (fun x => y‚ÇÄ) p Œº) (n : ‚Ñï) : Mem‚Ñíp (approxOn f fmeas s y‚ÇÄ h‚ÇÄ n) p Œº :=
  by
  refine' ‚ü®(approx_on f fmeas s y‚ÇÄ h‚ÇÄ n).AEStronglyMeasurable, _‚ü©
  suffices snorm (fun x => approx_on f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ) p Œº < ‚ä§
    by
    have : mem_‚Ñíp (fun x => approx_on f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ) p Œº :=
      ‚ü®(approx_on f fmeas s y‚ÇÄ h‚ÇÄ n - const Œ≤ y‚ÇÄ).AEStronglyMeasurable, this‚ü©
    convert snorm_add_lt_top this hi‚ÇÄ
    ext x
    simp
  have hf' : mem_‚Ñíp (fun x => ‚Äñf x - y‚ÇÄ‚Äñ) p Œº :=
    by
    have h_meas : Measurable fun x => ‚Äñf x - y‚ÇÄ‚Äñ :=
      by
      simp only [‚Üê dist_eq_norm]
      exact (continuous_id.dist continuous_const).Measurable.comp fmeas
    refine' ‚ü®h_meas.ae_measurable.ae_strongly_measurable, _‚ü©
    rw [snorm_norm]
    convert snorm_add_lt_top hf hi‚ÇÄ.neg
    ext x
    simp [sub_eq_add_neg]
  have : ‚àÄ·µê x ‚àÇŒº, ‚Äñapprox_on f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ‚Äñ ‚â§ ‚Äñ‚Äñf x - y‚ÇÄ‚Äñ + ‚Äñf x - y‚ÇÄ‚Äñ‚Äñ :=
    by
    refine' eventually_of_forall _
    intro x
    convert norm_approx_on_y‚ÇÄ_le fmeas h‚ÇÄ x n
    rw [Real.norm_eq_abs, abs_of_nonneg]
    exact add_nonneg (norm_nonneg _) (norm_nonneg _)
  calc
    snorm (fun x => approx_on f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ) p Œº ‚â§
        snorm (fun x => ‚Äñf x - y‚ÇÄ‚Äñ + ‚Äñf x - y‚ÇÄ‚Äñ) p Œº :=
      snorm_mono_ae this
    _ < ‚ä§ := snorm_add_lt_top hf' hf'
    
#align measure_theory.simple_func.mem_‚Ñíp_approx_on MeasureTheory.SimpleFunc.mem‚Ñíp_approxOn

theorem tendsto_approxOn_range_Lp_snorm [BorelSpace E] {f : Œ≤ ‚Üí E} (hp_ne_top : p ‚â† ‚àû)
    {Œº : Measure Œ≤} (fmeas : Measurable f) [SeparableSpace (range f ‚à™ {0} : Set E)]
    (hf : snorm f p Œº < ‚àû) :
    Tendsto (fun n => snorm (approxOn f fmeas (range f ‚à™ {0}) 0 (by simp) n - f) p Œº) atTop (ùìù 0) :=
  by
  refine' tendsto_approx_on_Lp_snorm fmeas _ hp_ne_top _ _
  ¬∑ apply eventually_of_forall
    intro x
    apply subset_closure
    simp
  ¬∑ simpa using hf
#align measure_theory.simple_func.tendsto_approx_on_range_Lp_snorm MeasureTheory.SimpleFunc.tendsto_approxOn_range_Lp_snorm

theorem mem‚Ñíp_approxOn_range [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (fmeas : Measurable f)
    [SeparableSpace (range f ‚à™ {0} : Set E)] (hf : Mem‚Ñíp f p Œº) (n : ‚Ñï) :
    Mem‚Ñíp (approxOn f fmeas (range f ‚à™ {0}) 0 (by simp) n) p Œº :=
  mem‚Ñíp_approxOn fmeas hf (by simp) zero_mem‚Ñíp n
#align measure_theory.simple_func.mem_‚Ñíp_approx_on_range MeasureTheory.SimpleFunc.mem‚Ñíp_approxOn_range

theorem tendsto_approxOn_range_lp [BorelSpace E] {f : Œ≤ ‚Üí E} [hp : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû)
    {Œº : Measure Œ≤} (fmeas : Measurable f) [SeparableSpace (range f ‚à™ {0} : Set E)]
    (hf : Mem‚Ñíp f p Œº) :
    Tendsto
      (fun n =>
        (mem‚Ñíp_approxOn_range fmeas hf n).toLp (approxOn f fmeas (range f ‚à™ {0}) 0 (by simp) n))
      atTop (ùìù (hf.toLp f)) :=
  by
  simpa only [Lp.tendsto_Lp_iff_tendsto_‚Ñíp''] using
    tendsto_approx_on_range_Lp_snorm hp_ne_top fmeas hf.2
#align measure_theory.simple_func.tendsto_approx_on_range_Lp MeasureTheory.SimpleFunc.tendsto_approxOn_range_lp

/-- Any function in `‚Ñíp` can be approximated by a simple function if `p < ‚àû`. -/
theorem MeasureTheory.Mem‚Ñíp.exists_simpleFunc_snorm_sub_lt {E : Type _} [NormedAddCommGroup E]
    {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (hf : Mem‚Ñíp f p Œº) (hp_ne_top : p ‚â† ‚àû) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) :
    ‚àÉ g : Œ≤ ‚Üí‚Çõ E, snorm (f - g) p Œº < Œµ ‚àß Mem‚Ñíp g p Œº :=
  by
  borelize E
  let f' := hf.1.mk f
  suffices H : ‚àÉ g : Œ≤ ‚Üí‚Çõ E, snorm (f' - g) p Œº < Œµ ‚àß mem_‚Ñíp g p Œº
  ¬∑ rcases H with ‚ü®g, hg, g_mem‚ü©
    refine' ‚ü®g, _, g_mem‚ü©
    convert hg using 1
    apply snorm_congr_ae
    filter_upwards [hf.1.ae_eq_mk]with x hx
    simpa only [Pi.sub_apply, sub_left_inj] using hx
  have hf' : mem_‚Ñíp f' p Œº := hf.ae_eq hf.1.ae_eq_mk
  have f'meas : Measurable f' := hf.1.measurable_mk
  have : separable_space (range f' ‚à™ {0} : Set E) :=
    strongly_measurable.separable_space_range_union_singleton hf.1.stronglyMeasurable_mk
  rcases((tendsto_order.1 (tendsto_approx_on_range_Lp_snorm hp_ne_top f'meas hf'.2)).2 Œµ
        hŒµ.bot_lt).exists with
    ‚ü®n, hn‚ü©
  rw [‚Üê snorm_neg, neg_sub] at hn
  exact ‚ü®_, hn, mem_‚Ñíp_approx_on_range f'meas hf' _‚ü©
#align measure_theory.mem_‚Ñíp.exists_simple_func_snorm_sub_lt MeasureTheory.Mem‚Ñíp.exists_simpleFunc_snorm_sub_lt

end Lp

/-! ### L1 approximation by simple functions -/


section Integrable

variable [MeasurableSpace Œ≤]

variable [MeasurableSpace E] [NormedAddCommGroup E]

theorem tendsto_approxOn_L1_nnnorm [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f)
    {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s] {Œº : Measure Œ≤}
    (hŒº : ‚àÄ·µê x ‚àÇŒº, f x ‚àà closure s) (hi : HasFiniteIntegral (fun x => f x - y‚ÇÄ) Œº) :
    Tendsto (fun n => ‚à´‚Åª x, ‚ÄñapproxOn f hf s y‚ÇÄ h‚ÇÄ n x - f x‚Äñ‚Çä ‚àÇŒº) atTop (ùìù 0) := by
  simpa [snorm_one_eq_lintegral_nnnorm] using
    tendsto_approx_on_Lp_snorm hf h‚ÇÄ one_ne_top hŒº
      (by simpa [snorm_one_eq_lintegral_nnnorm] using hi)
#align measure_theory.simple_func.tendsto_approx_on_L1_nnnorm MeasureTheory.SimpleFunc.tendsto_approxOn_L1_nnnorm

theorem integrable_approxOn [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (fmeas : Measurable f)
    (hf : Integrable f Œº) {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s]
    (hi‚ÇÄ : Integrable (fun x => y‚ÇÄ) Œº) (n : ‚Ñï) : Integrable (approxOn f fmeas s y‚ÇÄ h‚ÇÄ n) Œº :=
  by
  rw [‚Üê mem_‚Ñíp_one_iff_integrable] at hf hi‚ÇÄ‚ä¢
  exact mem_‚Ñíp_approx_on fmeas hf h‚ÇÄ hi‚ÇÄ n
#align measure_theory.simple_func.integrable_approx_on MeasureTheory.SimpleFunc.integrable_approxOn

theorem tendsto_approxOn_range_L1_nnnorm [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤}
    [SeparableSpace (range f ‚à™ {0} : Set E)] (fmeas : Measurable f) (hf : Integrable f Œº) :
    Tendsto (fun n => ‚à´‚Åª x, ‚ÄñapproxOn f fmeas (range f ‚à™ {0}) 0 (by simp) n x - f x‚Äñ‚Çä ‚àÇŒº) atTop
      (ùìù 0) :=
  by
  apply tendsto_approx_on_L1_nnnorm fmeas
  ¬∑ apply eventually_of_forall
    intro x
    apply subset_closure
    simp
  ¬∑ simpa using hf.2
#align measure_theory.simple_func.tendsto_approx_on_range_L1_nnnorm MeasureTheory.SimpleFunc.tendsto_approxOn_range_L1_nnnorm

theorem integrable_approxOn_range [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (fmeas : Measurable f)
    [SeparableSpace (range f ‚à™ {0} : Set E)] (hf : Integrable f Œº) (n : ‚Ñï) :
    Integrable (approxOn f fmeas (range f ‚à™ {0}) 0 (by simp) n) Œº :=
  integrable_approxOn fmeas hf _ (integrable_zero _ _ _) n
#align measure_theory.simple_func.integrable_approx_on_range MeasureTheory.SimpleFunc.integrable_approxOn_range

end Integrable

section SimpleFuncProperties

variable [MeasurableSpace Œ±]

variable [NormedAddCommGroup E] [NormedAddCommGroup F]

variable {Œº : Measure Œ±} {p : ‚Ñù‚â•0‚àû}

/-!
### Properties of simple functions in `Lp` spaces

A simple function `f : Œ± ‚Üí‚Çõ E` into a normed group `E` verifies, for a measure `Œº`:
- `mem_‚Ñíp f 0 Œº` and `mem_‚Ñíp f ‚àû Œº`, since `f` is a.e.-measurable and bounded,
- for `0 < p < ‚àû`,
  `mem_‚Ñíp f p Œº ‚Üî integrable f Œº ‚Üî f.fin_meas_supp Œº ‚Üî ‚àÄ y ‚â† 0, Œº (f ‚Åª¬π' {y}) < ‚àû`.
-/


theorem exists_forall_norm_le (f : Œ± ‚Üí‚Çõ F) : ‚àÉ C, ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C :=
  exists_forall_le (f.map fun x => ‚Äñx‚Äñ)
#align measure_theory.simple_func.exists_forall_norm_le MeasureTheory.SimpleFunc.exists_forall_norm_le

theorem mem‚Ñíp_zero (f : Œ± ‚Üí‚Çõ E) (Œº : Measure Œ±) : Mem‚Ñíp f 0 Œº :=
  mem‚Ñíp_zero_iff_aestronglyMeasurable.mpr f.AEStronglyMeasurable
#align measure_theory.simple_func.mem_‚Ñíp_zero MeasureTheory.SimpleFunc.mem‚Ñíp_zero

theorem mem‚Ñíp_top (f : Œ± ‚Üí‚Çõ E) (Œº : Measure Œ±) : Mem‚Ñíp f ‚àû Œº :=
  let ‚ü®C, hfC‚ü© := f.exists_forall_norm_le
  mem‚Ñíp_top_of_bound f.AEStronglyMeasurable C <| eventually_of_forall hfC
#align measure_theory.simple_func.mem_‚Ñíp_top MeasureTheory.SimpleFunc.mem‚Ñíp_top

protected theorem snorm'_eq {p : ‚Ñù} (f : Œ± ‚Üí‚Çõ F) (Œº : Measure Œ±) :
    snorm' f p Œº = (‚àë y in f.range, (‚Äñy‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ p * Œº (f ‚Åª¬π' {y})) ^ (1 / p) :=
  by
  have h_map : (fun a => (‚Äñf a‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ p) = f.map fun a : F => (‚Äña‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ p := by simp
  rw [snorm', h_map, lintegral_eq_lintegral, map_lintegral]
#align measure_theory.simple_func.snorm'_eq MeasureTheory.SimpleFunc.snorm'_eq

theorem measure_preimage_lt_top_of_mem‚Ñíp (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) (f : Œ± ‚Üí‚Çõ E)
    (hf : Mem‚Ñíp f p Œº) (y : E) (hy_ne : y ‚â† 0) : Œº (f ‚Åª¬π' {y}) < ‚àû :=
  by
  have hp_pos_real : 0 < p.to_real := ENNReal.toReal_pos hp_pos hp_ne_top
  have hf_snorm := mem_‚Ñíp.snorm_lt_top hf
  rw [snorm_eq_snorm' hp_pos hp_ne_top, f.snorm'_eq, ‚Üê
    @ENNReal.lt_rpow_one_div_iff _ _ (1 / p.to_real) (by simp [hp_pos_real]),
    @ENNReal.top_rpow_of_pos (1 / (1 / p.to_real)) (by simp [hp_pos_real]),
    ENNReal.sum_lt_top_iff] at hf_snorm
  by_cases hyf : y ‚àà f.range
  swap
  ¬∑ suffices h_empty : f ‚Åª¬π' {y} = ‚àÖ
    ¬∑ rw [h_empty, measure_empty]; exact ENNReal.coe_lt_top
    ext1 x
    rw [Set.mem_preimage, Set.mem_singleton_iff, mem_empty_iff_false, iff_false_iff]
    refine' fun hxy => hyf _
    rw [mem_range, Set.mem_range]
    exact ‚ü®x, hxy‚ü©
  specialize hf_snorm y hyf
  rw [ENNReal.mul_lt_top_iff] at hf_snorm
  cases hf_snorm
  ¬∑ exact hf_snorm.2
  cases hf_snorm
  ¬∑ refine' absurd _ hy_ne
    simpa [hp_pos_real] using hf_snorm
  ¬∑ simp [hf_snorm]
#align measure_theory.simple_func.measure_preimage_lt_top_of_mem_‚Ñíp MeasureTheory.SimpleFunc.measure_preimage_lt_top_of_mem‚Ñíp

/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (y ¬´expr ‚â† ¬ª 0) -/
theorem mem‚Ñíp_of_finite_measure_preimage (p : ‚Ñù‚â•0‚àû) {f : Œ± ‚Üí‚Çõ E}
    (hf : ‚àÄ (y) (_ : y ‚â† 0), Œº (f ‚Åª¬π' {y}) < ‚àû) : Mem‚Ñíp f p Œº :=
  by
  by_cases hp0 : p = 0
  ¬∑ rw [hp0, mem_‚Ñíp_zero_iff_ae_strongly_measurable]; exact f.ae_strongly_measurable
  by_cases hp_top : p = ‚àû
  ¬∑ rw [hp_top]; exact mem_‚Ñíp_top f Œº
  refine' ‚ü®f.ae_strongly_measurable, _‚ü©
  rw [snorm_eq_snorm' hp0 hp_top, f.snorm'_eq]
  refine' ENNReal.rpow_lt_top_of_nonneg (by simp) (ennreal.sum_lt_top_iff.mpr fun y hy => _).Ne
  by_cases hy0 : y = 0
  ¬∑ simp [hy0, ENNReal.toReal_pos hp0 hp_top]
  ¬∑ refine' ENNReal.mul_lt_top _ (hf y hy0).Ne
    exact (ENNReal.rpow_lt_top_of_nonneg ENNReal.toReal_nonneg ENNReal.coe_ne_top).Ne
#align measure_theory.simple_func.mem_‚Ñíp_of_finite_measure_preimage MeasureTheory.SimpleFunc.mem‚Ñíp_of_finite_measure_preimage

/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (y ¬´expr ‚â† ¬ª 0) -/
theorem mem‚Ñíp_iff {f : Œ± ‚Üí‚Çõ E} (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    Mem‚Ñíp f p Œº ‚Üî ‚àÄ (y) (_ : y ‚â† 0), Œº (f ‚Åª¬π' {y}) < ‚àû :=
  ‚ü®fun h => measure_preimage_lt_top_of_mem‚Ñíp hp_pos hp_ne_top f h, fun h =>
    mem‚Ñíp_of_finite_measure_preimage p h‚ü©
#align measure_theory.simple_func.mem_‚Ñíp_iff MeasureTheory.SimpleFunc.mem‚Ñíp_iff

/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (y ¬´expr ‚â† ¬ª 0) -/
theorem integrable_iff {f : Œ± ‚Üí‚Çõ E} : Integrable f Œº ‚Üî ‚àÄ (y) (_ : y ‚â† 0), Œº (f ‚Åª¬π' {y}) < ‚àû :=
  mem‚Ñíp_one_iff_integrable.symm.trans <| mem‚Ñíp_iff one_ne_zero ENNReal.coe_ne_top
#align measure_theory.simple_func.integrable_iff MeasureTheory.SimpleFunc.integrable_iff

theorem mem‚Ñíp_iff_integrable {f : Œ± ‚Üí‚Çõ E} (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    Mem‚Ñíp f p Œº ‚Üî Integrable f Œº :=
  (mem‚Ñíp_iff hp_pos hp_ne_top).trans integrable_iff.symm
#align measure_theory.simple_func.mem_‚Ñíp_iff_integrable MeasureTheory.SimpleFunc.mem‚Ñíp_iff_integrable

theorem mem‚Ñíp_iff_finMeasSupp {f : Œ± ‚Üí‚Çõ E} (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    Mem‚Ñíp f p Œº ‚Üî f.FinMeasSupp Œº :=
  (mem‚Ñíp_iff hp_pos hp_ne_top).trans finMeasSupp_iff.symm
#align measure_theory.simple_func.mem_‚Ñíp_iff_fin_meas_supp MeasureTheory.SimpleFunc.mem‚Ñíp_iff_finMeasSupp

theorem integrable_iff_finMeasSupp {f : Œ± ‚Üí‚Çõ E} : Integrable f Œº ‚Üî f.FinMeasSupp Œº :=
  integrable_iff.trans finMeasSupp_iff.symm
#align measure_theory.simple_func.integrable_iff_fin_meas_supp MeasureTheory.SimpleFunc.integrable_iff_finMeasSupp

theorem FinMeasSupp.integrable {f : Œ± ‚Üí‚Çõ E} (h : f.FinMeasSupp Œº) : Integrable f Œº :=
  integrable_iff_finMeasSupp.2 h
#align measure_theory.simple_func.fin_meas_supp.integrable MeasureTheory.SimpleFunc.FinMeasSupp.integrable

theorem integrable_pair {f : Œ± ‚Üí‚Çõ E} {g : Œ± ‚Üí‚Çõ F} :
    Integrable f Œº ‚Üí Integrable g Œº ‚Üí Integrable (pair f g) Œº := by
  simpa only [integrable_iff_fin_meas_supp] using fin_meas_supp.pair
#align measure_theory.simple_func.integrable_pair MeasureTheory.SimpleFunc.integrable_pair

theorem mem‚Ñíp_of_finiteMeasure (f : Œ± ‚Üí‚Çõ E) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) [FiniteMeasure Œº] :
    Mem‚Ñíp f p Œº :=
  let ‚ü®C, hfC‚ü© := f.exists_forall_norm_le
  Mem‚Ñíp.of_bound f.AEStronglyMeasurable C <| eventually_of_forall hfC
#align measure_theory.simple_func.mem_‚Ñíp_of_is_finite_measure MeasureTheory.SimpleFunc.mem‚Ñíp_of_finiteMeasure

theorem integrable_of_finiteMeasure [FiniteMeasure Œº] (f : Œ± ‚Üí‚Çõ E) : Integrable f Œº :=
  mem‚Ñíp_one_iff_integrable.mp (f.mem‚Ñíp_of_finiteMeasure 1 Œº)
#align measure_theory.simple_func.integrable_of_is_finite_measure MeasureTheory.SimpleFunc.integrable_of_finiteMeasure

theorem measure_preimage_lt_top_of_integrable (f : Œ± ‚Üí‚Çõ E) (hf : Integrable f Œº) {x : E}
    (hx : x ‚â† 0) : Œº (f ‚Åª¬π' {x}) < ‚àû :=
  integrable_iff.mp hf x hx
#align measure_theory.simple_func.measure_preimage_lt_top_of_integrable MeasureTheory.SimpleFunc.measure_preimage_lt_top_of_integrable

/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (y ¬´expr ‚â† ¬ª 0) -/
theorem measure_support_lt_top [Zero Œ≤] (f : Œ± ‚Üí‚Çõ Œ≤) (hf : ‚àÄ (y) (_ : y ‚â† 0), Œº (f ‚Åª¬π' {y}) < ‚àû) :
    Œº (support f) < ‚àû := by
  rw [support_eq]
  refine' (measure_bUnion_finset_le _ _).trans_lt (ennreal.sum_lt_top_iff.mpr fun y hy => _)
  rw [Finset.mem_filter] at hy
  exact hf y hy.2
#align measure_theory.simple_func.measure_support_lt_top MeasureTheory.SimpleFunc.measure_support_lt_top

theorem measure_support_lt_top_of_mem‚Ñíp (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) (hp_ne_zero : p ‚â† 0)
    (hp_ne_top : p ‚â† ‚àû) : Œº (support f) < ‚àû :=
  f.measure_support_lt_top ((mem‚Ñíp_iff hp_ne_zero hp_ne_top).mp hf)
#align measure_theory.simple_func.measure_support_lt_top_of_mem_‚Ñíp MeasureTheory.SimpleFunc.measure_support_lt_top_of_mem‚Ñíp

theorem measure_support_lt_top_of_integrable (f : Œ± ‚Üí‚Çõ E) (hf : Integrable f Œº) :
    Œº (support f) < ‚àû :=
  f.measure_support_lt_top (integrable_iff.mp hf)
#align measure_theory.simple_func.measure_support_lt_top_of_integrable MeasureTheory.SimpleFunc.measure_support_lt_top_of_integrable

theorem measure_lt_top_of_mem‚Ñíp_indicator (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) {c : E} (hc : c ‚â† 0)
    {s : Set Œ±} (hs : MeasurableSet s) (hcs : Mem‚Ñíp ((const Œ± c).piecewise s hs (const Œ± 0)) p Œº) :
    Œº s < ‚ä§ :=
  by
  have : Function.support (const Œ± c) = Set.univ := Function.support_const hc
  simpa only [mem_‚Ñíp_iff_fin_meas_supp hp_pos hp_ne_top, fin_meas_supp_iff_support,
    support_indicator, Set.inter_univ, this] using hcs
#align measure_theory.simple_func.measure_lt_top_of_mem_‚Ñíp_indicator MeasureTheory.SimpleFunc.measure_lt_top_of_mem‚Ñíp_indicator

end SimpleFuncProperties

end SimpleFunc

/-! Construction of the space of `Lp` simple functions, and its dense embedding into `Lp`. -/


namespace Lp

open AeEqFun

variable [MeasurableSpace Œ±] [NormedAddCommGroup E] [NormedAddCommGroup F] (p : ‚Ñù‚â•0‚àû)
  (Œº : Measure Œ±)

variable (E)

/-- `Lp.simple_func` is a subspace of Lp consisting of equivalence classes of an integrable simple
    function. -/
def simpleFunc : AddSubgroup (lp E p Œº)
    where
  carrier := { f : lp E p Œº | ‚àÉ s : Œ± ‚Üí‚Çõ E, (AEEqFun.mk s s.AEStronglyMeasurable : Œ± ‚Üí‚Çò[Œº] E) = f }
  zero_mem' := ‚ü®0, rfl‚ü©
  add_mem' := fun f g ‚ü®s, hs‚ü© ‚ü®t, ht‚ü© =>
    ‚ü®s + t, by
      simp only [‚Üê hs, ‚Üê ht, ae_eq_fun.mk_add_mk, AddSubgroup.coe_add, ae_eq_fun.mk_eq_mk,
        simple_func.coe_add]‚ü©
  neg_mem' := fun f ‚ü®s, hs‚ü© =>
    ‚ü®-s, by
      simp only [‚Üê hs, ae_eq_fun.neg_mk, simple_func.coe_neg, ae_eq_fun.mk_eq_mk,
        AddSubgroup.coe_neg]‚ü©
#align measure_theory.Lp.simple_func MeasureTheory.lp.simpleFunc

variable {E p Œº}

namespace SimpleFunc

section Instances

/-! Simple functions in Lp space form a `normed_space`. -/


@[norm_cast]
theorem coe_coe (f : lp.simpleFunc E p Œº) : ‚áë(f : lp E p Œº) = f :=
  rfl
#align measure_theory.Lp.simple_func.coe_coe MeasureTheory.lp.simpleFunc.coe_coe

protected theorem eq' {f g : lp.simpleFunc E p Œº} : (f : Œ± ‚Üí‚Çò[Œº] E) = (g : Œ± ‚Üí‚Çò[Œº] E) ‚Üí f = g :=
  Subtype.eq ‚àò Subtype.eq
#align measure_theory.Lp.simple_func.eq' MeasureTheory.lp.simpleFunc.eq'

/-! Implementation note:  If `Lp.simple_func E p Œº` were defined as a `ùïú`-submodule of `Lp E p Œº`,
then the next few lemmas, putting a normed `ùïú`-group structure on `Lp.simple_func E p Œº`, would be
unnecessary.  But instead, `Lp.simple_func E p Œº` is defined as an `add_subgroup` of `Lp E p Œº`,
which does not permit this (but has the advantage of working when `E` itself is a normed group,
i.e. has no scalar action). -/


variable [NormedRing ùïú] [Module ùïú E] [BoundedSMul ùïú E]

/-- If `E` is a normed space, `Lp.simple_func E p Œº` is a `has_smul`. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def hasSmul : SMul ùïú (lp.simpleFunc E p Œº) :=
  ‚ü®fun k f =>
    ‚ü®k ‚Ä¢ f, by
      rcases f with ‚ü®f, ‚ü®s, hs‚ü©‚ü©
      use k ‚Ä¢ s
      apply Eq.trans (ae_eq_fun.smul_mk k s s.ae_strongly_measurable).symm _
      rw [hs]
      rfl‚ü©‚ü©
#align measure_theory.Lp.simple_func.has_smul MeasureTheory.lp.simpleFunc.hasSmul

attribute [local instance] simple_func.has_smul

@[simp, norm_cast]
theorem coe_smul (c : ùïú) (f : lp.simpleFunc E p Œº) :
    ((c ‚Ä¢ f : lp.simpleFunc E p Œº) : lp E p Œº) = c ‚Ä¢ (f : lp E p Œº) :=
  rfl
#align measure_theory.Lp.simple_func.coe_smul MeasureTheory.lp.simpleFunc.coe_smul

/-- If `E` is a normed space, `Lp.simple_func E p Œº` is a module. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def module : Module ùïú (lp.simpleFunc E p Œº)
    where
  one_smul f := by ext1; exact one_smul _ _
  mul_smul x y f := by ext1; exact mul_smul _ _ _
  smul_add x f g := by ext1; exact smul_add _ _ _
  smul_zero x := by ext1; exact smul_zero _
  add_smul x y f := by ext1; exact add_smul _ _ _
  zero_smul f := by ext1; exact zero_smul _ _
#align measure_theory.Lp.simple_func.module MeasureTheory.lp.simpleFunc.module

attribute [local instance] simple_func.module

/-- If `E` is a normed space, `Lp.simple_func E p Œº` is a normed space. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected theorem boundedSMul [Fact (1 ‚â§ p)] : BoundedSMul ùïú (lp.simpleFunc E p Œº) :=
  BoundedSMul.of_norm_smul_le fun r f => (norm_smul_le r (f : lp E p Œº) : _)
#align measure_theory.Lp.simple_func.has_bounded_smul MeasureTheory.lp.simpleFunc.boundedSMul

attribute [local instance] simple_func.has_bounded_smul

/-- If `E` is a normed space, `Lp.simple_func E p Œº` is a normed space. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def normedSpace {ùïú} [NormedField ùïú] [NormedSpace ùïú E] [Fact (1 ‚â§ p)] :
    NormedSpace ùïú (lp.simpleFunc E p Œº) :=
  ‚ü®norm_smul_le‚ü©
#align measure_theory.Lp.simple_func.normed_space MeasureTheory.lp.simpleFunc.normedSpace

end Instances

attribute [local instance] simple_func.module simple_func.normed_space simple_func.has_bounded_smul

section ToLp

/-- Construct the equivalence class `[f]` of a simple function `f` satisfying `mem_‚Ñíp`. -/
@[reducible]
def toLp (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) : lp.simpleFunc E p Œº :=
  ‚ü®hf.toLp f, ‚ü®f, rfl‚ü©‚ü©
#align measure_theory.Lp.simple_func.to_Lp MeasureTheory.lp.simpleFunc.toLp

theorem toLp_eq_toLp (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) : (toLp f hf : lp E p Œº) = hf.toLp f :=
  rfl
#align measure_theory.Lp.simple_func.to_Lp_eq_to_Lp MeasureTheory.lp.simpleFunc.toLp_eq_toLp

theorem toLp_eq_mk (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) :
    (toLp f hf : Œ± ‚Üí‚Çò[Œº] E) = AEEqFun.mk f f.AEStronglyMeasurable :=
  rfl
#align measure_theory.Lp.simple_func.to_Lp_eq_mk MeasureTheory.lp.simpleFunc.toLp_eq_mk

theorem toLp_zero : toLp (0 : Œ± ‚Üí‚Çõ E) zero_mem‚Ñíp = (0 : lp.simpleFunc E p Œº) :=
  rfl
#align measure_theory.Lp.simple_func.to_Lp_zero MeasureTheory.lp.simpleFunc.toLp_zero

theorem toLp_add (f g : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) :
    toLp (f + g) (hf.add hg) = toLp f hf + toLp g hg :=
  rfl
#align measure_theory.Lp.simple_func.to_Lp_add MeasureTheory.lp.simpleFunc.toLp_add

theorem toLp_neg (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) : toLp (-f) hf.neg = -toLp f hf :=
  rfl
#align measure_theory.Lp.simple_func.to_Lp_neg MeasureTheory.lp.simpleFunc.toLp_neg

theorem toLp_sub (f g : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) :
    toLp (f - g) (hf.sub hg) = toLp f hf - toLp g hg := by
  simp only [sub_eq_add_neg, ‚Üê to_Lp_neg, ‚Üê to_Lp_add]; rfl
#align measure_theory.Lp.simple_func.to_Lp_sub MeasureTheory.lp.simpleFunc.toLp_sub

variable [NormedRing ùïú] [Module ùïú E] [BoundedSMul ùïú E]

theorem toLp_smul (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) (c : ùïú) :
    toLp (c ‚Ä¢ f) (hf.const_smul c) = c ‚Ä¢ toLp f hf :=
  rfl
#align measure_theory.Lp.simple_func.to_Lp_smul MeasureTheory.lp.simpleFunc.toLp_smul

theorem norm_toLp [Fact (1 ‚â§ p)] (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) :
    ‚ÄñtoLp f hf‚Äñ = ENNReal.toReal (snorm f p Œº) :=
  norm_toLp f hf
#align measure_theory.Lp.simple_func.norm_to_Lp MeasureTheory.lp.simpleFunc.norm_toLp

end ToLp

section ToSimpleFunc

/-- Find a representative of a `Lp.simple_func`. -/
def toSimpleFunc (f : lp.simpleFunc E p Œº) : Œ± ‚Üí‚Çõ E :=
  Classical.choose f.2
#align measure_theory.Lp.simple_func.to_simple_func MeasureTheory.lp.simpleFunc.toSimpleFunc

/-- `(to_simple_func f)` is measurable. -/
@[measurability]
protected theorem measurable [MeasurableSpace E] (f : lp.simpleFunc E p Œº) :
    Measurable (toSimpleFunc f) :=
  (toSimpleFunc f).Measurable
#align measure_theory.Lp.simple_func.measurable MeasureTheory.lp.simpleFunc.measurable

protected theorem stronglyMeasurable (f : lp.simpleFunc E p Œº) :
    StronglyMeasurable (toSimpleFunc f) :=
  (toSimpleFunc f).StronglyMeasurable
#align measure_theory.Lp.simple_func.strongly_measurable MeasureTheory.lp.simpleFunc.stronglyMeasurable

@[measurability]
protected theorem aEMeasurable [MeasurableSpace E] (f : lp.simpleFunc E p Œº) :
    AEMeasurable (toSimpleFunc f) Œº :=
  (simpleFunc.measurable f).AEMeasurable
#align measure_theory.Lp.simple_func.ae_measurable MeasureTheory.lp.simpleFunc.aEMeasurable

protected theorem aEStronglyMeasurable (f : lp.simpleFunc E p Œº) :
    AEStronglyMeasurable (toSimpleFunc f) Œº :=
  (simpleFunc.stronglyMeasurable f).AEStronglyMeasurable
#align measure_theory.Lp.simple_func.ae_strongly_measurable MeasureTheory.lp.simpleFunc.aEStronglyMeasurable

theorem toSimpleFunc_eq_to_fun (f : lp.simpleFunc E p Œº) : toSimpleFunc f =·µê[Œº] f :=
  show ‚áë(toSimpleFunc f) =·µê[Œº] ‚áë(f : Œ± ‚Üí‚Çò[Œº] E)
    by
    convert(ae_eq_fun.coe_fn_mk (to_simple_func f)
          (to_simple_func f).AEStronglyMeasurable).symm using
      2
    exact (Classical.choose_spec f.2).symm
#align measure_theory.Lp.simple_func.to_simple_func_eq_to_fun MeasureTheory.lp.simpleFunc.toSimpleFunc_eq_to_fun

/-- `to_simple_func f` satisfies the predicate `mem_‚Ñíp`. -/
protected theorem mem‚Ñíp (f : lp.simpleFunc E p Œº) : Mem‚Ñíp (toSimpleFunc f) p Œº :=
  Mem‚Ñíp.ae_eq (toSimpleFunc_eq_to_fun f).symm <| mem_lp_iff_mem‚Ñíp.mp (f : lp E p Œº).2
#align measure_theory.Lp.simple_func.mem_‚Ñíp MeasureTheory.lp.simpleFunc.mem‚Ñíp

theorem toLp_toSimpleFunc (f : lp.simpleFunc E p Œº) :
    toLp (toSimpleFunc f) (simpleFunc.mem‚Ñíp f) = f :=
  simpleFunc.eq' (Classical.choose_spec f.2)
#align measure_theory.Lp.simple_func.to_Lp_to_simple_func MeasureTheory.lp.simpleFunc.toLp_toSimpleFunc

theorem toSimpleFunc_toLp (f : Œ± ‚Üí‚Çõ E) (hfi : Mem‚Ñíp f p Œº) : toSimpleFunc (toLp f hfi) =·µê[Œº] f := by
  rw [‚Üê ae_eq_fun.mk_eq_mk]; exact Classical.choose_spec (to_Lp f hfi).2
#align measure_theory.Lp.simple_func.to_simple_func_to_Lp MeasureTheory.lp.simpleFunc.toSimpleFunc_toLp

variable (E Œº)

theorem zero_toSimpleFunc : toSimpleFunc (0 : lp.simpleFunc E p Œº) =·µê[Œº] 0 :=
  by
  filter_upwards [to_simple_func_eq_to_fun (0 : Lp.simple_func E p Œº),
    Lp.coe_fn_zero E 1 Œº]with _ h‚ÇÅ _
  rwa [h‚ÇÅ]
#align measure_theory.Lp.simple_func.zero_to_simple_func MeasureTheory.lp.simpleFunc.zero_toSimpleFunc

variable {E Œº}

theorem add_toSimpleFunc (f g : lp.simpleFunc E p Œº) :
    toSimpleFunc (f + g) =·µê[Œº] toSimpleFunc f + toSimpleFunc g :=
  by
  filter_upwards [to_simple_func_eq_to_fun (f + g), to_simple_func_eq_to_fun f,
    to_simple_func_eq_to_fun g, Lp.coe_fn_add (f : Lp E p Œº) g]with _
  simp only [‚Üê coe_coe, AddSubgroup.coe_add, Pi.add_apply]
  iterate 4 intro h; rw [h]
#align measure_theory.Lp.simple_func.add_to_simple_func MeasureTheory.lp.simpleFunc.add_toSimpleFunc

theorem neg_toSimpleFunc (f : lp.simpleFunc E p Œº) : toSimpleFunc (-f) =·µê[Œº] -toSimpleFunc f :=
  by
  filter_upwards [to_simple_func_eq_to_fun (-f), to_simple_func_eq_to_fun f,
    Lp.coe_fn_neg (f : Lp E p Œº)]with _
  simp only [Pi.neg_apply, AddSubgroup.coe_neg, ‚Üê coe_coe]
  repeat' intro h; rw [h]
#align measure_theory.Lp.simple_func.neg_to_simple_func MeasureTheory.lp.simpleFunc.neg_toSimpleFunc

theorem sub_toSimpleFunc (f g : lp.simpleFunc E p Œº) :
    toSimpleFunc (f - g) =·µê[Œº] toSimpleFunc f - toSimpleFunc g :=
  by
  filter_upwards [to_simple_func_eq_to_fun (f - g), to_simple_func_eq_to_fun f,
    to_simple_func_eq_to_fun g, Lp.coe_fn_sub (f : Lp E p Œº) g]with _
  simp only [AddSubgroup.coe_sub, Pi.sub_apply, ‚Üê coe_coe]
  repeat' intro h; rw [h]
#align measure_theory.Lp.simple_func.sub_to_simple_func MeasureTheory.lp.simpleFunc.sub_toSimpleFunc

variable [NormedRing ùïú] [Module ùïú E] [BoundedSMul ùïú E]

theorem smul_toSimpleFunc (k : ùïú) (f : lp.simpleFunc E p Œº) :
    toSimpleFunc (k ‚Ä¢ f) =·µê[Œº] k ‚Ä¢ toSimpleFunc f :=
  by
  filter_upwards [to_simple_func_eq_to_fun (k ‚Ä¢ f), to_simple_func_eq_to_fun f,
    Lp.coe_fn_smul k (f : Lp E p Œº)]with _
  simp only [Pi.smul_apply, coe_smul, ‚Üê coe_coe]
  repeat' intro h; rw [h]
#align measure_theory.Lp.simple_func.smul_to_simple_func MeasureTheory.lp.simpleFunc.smul_toSimpleFunc

theorem norm_toSimpleFunc [Fact (1 ‚â§ p)] (f : lp.simpleFunc E p Œº) :
    ‚Äñf‚Äñ = ENNReal.toReal (snorm (toSimpleFunc f) p Œº) := by
  simpa [to_Lp_to_simple_func] using norm_to_Lp (to_simple_func f) (simple_func.mem_‚Ñíp f)
#align measure_theory.Lp.simple_func.norm_to_simple_func MeasureTheory.lp.simpleFunc.norm_toSimpleFunc

end ToSimpleFunc

section Induction

variable (p)

/-- The characteristic function of a finite-measure measurable set `s`, as an `Lp` simple function.
-/
def indicatorConst {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) :
    lp.simpleFunc E p Œº :=
  toLp ((SimpleFunc.const _ c).piecewise s hs (SimpleFunc.const _ 0))
    (mem‚Ñíp_indicator_const p hs c (Or.inr hŒºs))
#align measure_theory.Lp.simple_func.indicator_const MeasureTheory.lp.simpleFunc.indicatorConst

variable {p}

@[simp]
theorem coe_indicatorConst {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) :
    (‚Üë(indicatorConst p hs hŒºs c) : lp E p Œº) = indicatorConstLp p hs hŒºs c :=
  rfl
#align measure_theory.Lp.simple_func.coe_indicator_const MeasureTheory.lp.simpleFunc.coe_indicatorConst

theorem toSimpleFunc_indicatorConst {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) :
    toSimpleFunc (indicatorConst p hs hŒºs c) =·µê[Œº]
      (SimpleFunc.const _ c).piecewise s hs (SimpleFunc.const _ 0) :=
  lp.simpleFunc.toSimpleFunc_toLp _ _
#align measure_theory.Lp.simple_func.to_simple_func_indicator_const MeasureTheory.lp.simpleFunc.toSimpleFunc_indicatorConst

/-- To prove something for an arbitrary `Lp` simple function, with `0 < p < ‚àû`, it suffices to show
that the property holds for (multiples of) characteristic functions of finite-measure measurable
sets and is closed under addition (of functions with disjoint support). -/
@[elab_as_elim]
protected theorem induction (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) {P : lp.simpleFunc E p Œº ‚Üí Prop}
    (h_ind :
      ‚àÄ (c : E) {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s < ‚àû),
        P (lp.simpleFunc.indicatorConst p hs hŒºs.Ne c))
    (h_add :
      ‚àÄ ‚¶Éf g : Œ± ‚Üí‚Çõ E‚¶Ñ,
        ‚àÄ hf : Mem‚Ñíp f p Œº,
          ‚àÄ hg : Mem‚Ñíp g p Œº,
            Disjoint (support f) (support g) ‚Üí
              P (lp.simpleFunc.toLp f hf) ‚Üí
                P (lp.simpleFunc.toLp g hg) ‚Üí P (lp.simpleFunc.toLp f hf + lp.simpleFunc.toLp g hg))
    (f : lp.simpleFunc E p Œº) : P f :=
  by
  suffices ‚àÄ f : Œ± ‚Üí‚Çõ E, ‚àÄ hf : mem_‚Ñíp f p Œº, P (to_Lp f hf)
    by
    rw [‚Üê to_Lp_to_simple_func f]
    apply this
  clear f
  refine' simple_func.induction _ _
  ¬∑ intro c s hs hf
    by_cases hc : c = 0
    ¬∑ convert h_ind 0 MeasurableSet.empty (by simp) using 1
      ext1
      simp [hc]
    exact h_ind c hs (simple_func.measure_lt_top_of_mem_‚Ñíp_indicator hp_pos hp_ne_top hc hs hf)
  ¬∑ intro f g hfg hf hg hfg'
    obtain ‚ü®hf', hg'‚ü© : mem_‚Ñíp f p Œº ‚àß mem_‚Ñíp g p Œº :=
      (mem_‚Ñíp_add_of_disjoint hfg f.strongly_measurable g.strongly_measurable).mp hfg'
    exact h_add hf' hg' hfg (hf hf') (hg hg')
#align measure_theory.Lp.simple_func.induction MeasureTheory.lp.simpleFunc.induction

end Induction

section CoeToLp

variable [Fact (1 ‚â§ p)]

protected theorem uniformContinuous : UniformContinuous (coe : lp.simpleFunc E p Œº ‚Üí lp E p Œº) :=
  uniformContinuous_comap
#align measure_theory.Lp.simple_func.uniform_continuous MeasureTheory.lp.simpleFunc.uniformContinuous

protected theorem uniformEmbedding : UniformEmbedding (coe : lp.simpleFunc E p Œº ‚Üí lp E p Œº) :=
  uniformEmbedding_comap Subtype.val_injective
#align measure_theory.Lp.simple_func.uniform_embedding MeasureTheory.lp.simpleFunc.uniformEmbedding

protected theorem uniformInducing : UniformInducing (coe : lp.simpleFunc E p Œº ‚Üí lp E p Œº) :=
  simpleFunc.uniformEmbedding.to_uniformInducing
#align measure_theory.Lp.simple_func.uniform_inducing MeasureTheory.lp.simpleFunc.uniformInducing

protected theorem denseEmbedding (hp_ne_top : p ‚â† ‚àû) :
    DenseEmbedding (coe : lp.simpleFunc E p Œº ‚Üí lp E p Œº) :=
  by
  borelize E
  apply simple_func.uniform_embedding.dense_embedding
  intro f
  rw [mem_closure_iff_seq_limit]
  have hfi' : mem_‚Ñíp f p Œº := Lp.mem_‚Ñíp f
  haveI : separable_space (range f ‚à™ {0} : Set E) :=
    (Lp.strongly_measurable f).separableSpace_range_union_singleton
  refine'
    ‚ü®fun n =>
      ‚Üë(to_Lp
          (simple_func.approx_on f (Lp.strongly_measurable f).Measurable (range f ‚à™ {0}) 0 (by simp)
            n)
          (simple_func.mem_‚Ñíp_approx_on_range (Lp.strongly_measurable f).Measurable hfi' n)),
      fun n => mem_range_self _, _‚ü©
  convert simple_func.tendsto_approx_on_range_Lp hp_ne_top (Lp.strongly_measurable f).Measurable
      hfi'
  rw [to_Lp_coe_fn f (Lp.mem_‚Ñíp f)]
#align measure_theory.Lp.simple_func.dense_embedding MeasureTheory.lp.simpleFunc.denseEmbedding

protected theorem denseInducing (hp_ne_top : p ‚â† ‚àû) :
    DenseInducing (coe : lp.simpleFunc E p Œº ‚Üí lp E p Œº) :=
  (simpleFunc.denseEmbedding hp_ne_top).to_denseInducing
#align measure_theory.Lp.simple_func.dense_inducing MeasureTheory.lp.simpleFunc.denseInducing

protected theorem denseRange (hp_ne_top : p ‚â† ‚àû) :
    DenseRange (coe : lp.simpleFunc E p Œº ‚Üí lp E p Œº) :=
  (simpleFunc.denseInducing hp_ne_top).dense
#align measure_theory.Lp.simple_func.dense_range MeasureTheory.lp.simpleFunc.denseRange

variable [NormedRing ùïú] [Module ùïú E] [BoundedSMul ùïú E]

variable (Œ± E ùïú)

/-- The embedding of Lp simple functions into Lp functions, as a continuous linear map. -/
def coeToLp : lp.simpleFunc E p Œº ‚ÜíL[ùïú] lp E p Œº :=
  {
    AddSubgroup.subtype
      (lp.simpleFunc E p Œº) with
    map_smul' := fun k f => rfl
    cont := lp.simpleFunc.uniformContinuous.Continuous }
#align measure_theory.Lp.simple_func.coe_to_Lp MeasureTheory.lp.simpleFunc.coeToLp

variable {Œ± E ùïú}

end CoeToLp

section Order

variable {G : Type _} [NormedLatticeAddCommGroup G]

theorem coeFn_le (f g : lp.simpleFunc G p Œº) : f ‚â§·µê[Œº] g ‚Üî f ‚â§ g := by
  rw [‚Üê Subtype.coe_le_coe, ‚Üê Lp.coe_fn_le, coeFn_coe_base', coeFn_coe_base' g]
#align measure_theory.Lp.simple_func.coe_fn_le MeasureTheory.lp.simpleFunc.coeFn_le

instance : CovariantClass (lp.simpleFunc G p Œº) (lp.simpleFunc G p Œº) (¬∑ + ¬∑) (¬∑ ‚â§ ¬∑) :=
  by
  refine' ‚ü®fun f g‚ÇÅ g‚ÇÇ hg‚ÇÅ‚ÇÇ => _‚ü©
  rw [‚Üê Lp.simple_func.coe_fn_le] at hg‚ÇÅ‚ÇÇ‚ä¢
  have h_add_1 : ‚áë(f + g‚ÇÅ) =·µê[Œº] f + g‚ÇÅ := Lp.coe_fn_add _ _
  have h_add_2 : ‚áë(f + g‚ÇÇ) =·µê[Œº] f + g‚ÇÇ := Lp.coe_fn_add _ _
  filter_upwards [h_add_1, h_add_2, hg‚ÇÅ‚ÇÇ]with _ h1 h2 h3
  rw [h1, h2, Pi.add_apply, Pi.add_apply]
  exact add_le_add le_rfl h3

variable (p Œº G)

theorem coeFn_zero : (0 : lp.simpleFunc G p Œº) =·µê[Œº] (0 : Œ± ‚Üí G) :=
  lp.coeFn_zero _ _ _
#align measure_theory.Lp.simple_func.coe_fn_zero MeasureTheory.lp.simpleFunc.coeFn_zero

variable {p Œº G}

theorem coeFn_nonneg (f : lp.simpleFunc G p Œº) : 0 ‚â§·µê[Œº] f ‚Üî 0 ‚â§ f :=
  by
  rw [‚Üê Lp.simple_func.coe_fn_le]
  have h0 : (0 : Lp.simple_func G p Œº) =·µê[Œº] (0 : Œ± ‚Üí G) := Lp.simple_func.coe_fn_zero p Œº G
  constructor <;> intro h <;> filter_upwards [h, h0]with _ _ h2
  ¬∑ rwa [h2]
  ¬∑ rwa [‚Üê h2]
#align measure_theory.Lp.simple_func.coe_fn_nonneg MeasureTheory.lp.simpleFunc.coeFn_nonneg

theorem exists_simpleFunc_nonneg_ae_eq {f : lp.simpleFunc G p Œº} (hf : 0 ‚â§ f) :
    ‚àÉ f' : Œ± ‚Üí‚Çõ G, 0 ‚â§ f' ‚àß f =·µê[Œº] f' :=
  by
  rw [‚Üê Lp.simple_func.coe_fn_nonneg] at hf
  have hf_ae : 0 ‚â§·µê[Œº] simple_func.to_simple_func f := by
    filter_upwards [to_simple_func_eq_to_fun f, hf]with _ h1 _; rwa [h1]
  let s := to_measurable Œº { x | ¬¨0 ‚â§ simple_func.to_simple_func f x }·∂ú
  have hs_zero : Œº (s·∂ú) = 0 := by rw [compl_compl, measure_to_measurable];
    rwa [eventually_le, ae_iff] at hf_ae
  have hfs_nonneg : ‚àÄ x ‚àà s, 0 ‚â§ simple_func.to_simple_func f x :=
    by
    intro x hxs
    rw [mem_compl_iff] at hxs
    have hx' : x ‚àâ { a : Œ± | ¬¨0 ‚â§ simple_func.to_simple_func f a } := fun h =>
      hxs (subset_to_measurable Œº _ h)
    rwa [Set.nmem_setOf_iff, Classical.not_not] at hx'
  let f' :=
    simple_func.piecewise s (measurable_set_to_measurable Œº _).compl (simple_func.to_simple_func f)
      (simple_func.const Œ± (0 : G))
  refine' ‚ü®f', fun x => _, _‚ü©
  ¬∑ rw [simple_func.piecewise_apply]
    by_cases hxs : x ‚àà s
    ¬∑ simp only [hxs, hfs_nonneg x hxs, if_true, Pi.zero_apply, simple_func.coe_zero]
    ¬∑ simp only [hxs, simple_func.const_zero, if_false]
  ¬∑ rw [simple_func.coe_piecewise]
    have : s =·µê[Œº] univ := by
      rw [ae_eq_set]
      simp only [true_and_iff, measure_empty, eq_self_iff_true, diff_univ, ‚Üê compl_eq_univ_diff]
      exact hs_zero
    refine' eventually_eq.trans (to_simple_func_eq_to_fun f).symm _
    refine' eventually_eq.trans _ (piecewise_ae_eq_of_ae_eq_set this.symm)
    simp only [simple_func.const_zero, indicator_univ, piecewise_eq_indicator, simple_func.coe_zero]
#align measure_theory.Lp.simple_func.exists_simple_func_nonneg_ae_eq MeasureTheory.lp.simpleFunc.exists_simpleFunc_nonneg_ae_eq

variable (p Œº G)

/-- Coercion from nonnegative simple functions of Lp to nonnegative functions of Lp. -/
def coeSimpleFuncNonnegToLpNonneg :
    { g : lp.simpleFunc G p Œº // 0 ‚â§ g } ‚Üí { g : lp G p Œº // 0 ‚â§ g } := fun g => ‚ü®g, g.2‚ü©
#align measure_theory.Lp.simple_func.coe_simple_func_nonneg_to_Lp_nonneg MeasureTheory.lp.simpleFunc.coeSimpleFuncNonnegToLpNonneg

theorem denseRange_coeSimpleFuncNonnegToLpNonneg [hp : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû) :
    DenseRange (coeSimpleFuncNonnegToLpNonneg p Œº G) :=
  by
  borelize G
  intro g
  rw [mem_closure_iff_seq_limit]
  have hg_mem_‚Ñíp : mem_‚Ñíp g p Œº := Lp.mem_‚Ñíp g
  have zero_mem : (0 : G) ‚àà (range g ‚à™ {0} : Set G) ‚à© { y | 0 ‚â§ y } := by
    simp only [union_singleton, mem_inter_iff, mem_insert_iff, eq_self_iff_true, true_or_iff,
      mem_set_of_eq, le_refl, and_self_iff]
  have : separable_space ((range g ‚à™ {0}) ‚à© { y | 0 ‚â§ y } : Set G) :=
    by
    apply is_separable.separable_space
    apply is_separable.mono _ (Set.inter_subset_left _ _)
    exact
      (Lp.strongly_measurable (g : Lp G p Œº)).isSeparable_range.union
        (finite_singleton _).IsSeparable
  have g_meas : Measurable g := (Lp.strongly_measurable (g : Lp G p Œº)).Measurable
  let x n := simple_func.approx_on g g_meas ((range g ‚à™ {0}) ‚à© { y | 0 ‚â§ y }) 0 zero_mem n
  have hx_nonneg : ‚àÄ n, 0 ‚â§ x n := by
    intro n a
    change x n a ‚àà { y : G | 0 ‚â§ y }
    have A : (range g ‚à™ {0} : Set G) ‚à© { y | 0 ‚â§ y } ‚äÜ { y | 0 ‚â§ y } := inter_subset_right _ _
    apply A
    exact simple_func.approx_on_mem g_meas _ n a
  have hx_mem_‚Ñíp : ‚àÄ n, mem_‚Ñíp (x n) p Œº :=
    simple_func.mem_‚Ñíp_approx_on _ hg_mem_‚Ñíp _ ‚ü®ae_strongly_measurable_const, by simp‚ü©
  have h_to_Lp := fun n => mem_‚Ñíp.coe_fn_to_Lp (hx_mem_‚Ñíp n)
  have hx_nonneg_Lp : ‚àÄ n, 0 ‚â§ to_Lp (x n) (hx_mem_‚Ñíp n) :=
    by
    intro n
    rw [‚Üê Lp.simple_func.coe_fn_le, coeFn_coe_base' (simple_func.to_Lp (x n) _),
      Lp.simple_func.to_Lp_eq_to_Lp]
    have h0 := Lp.simple_func.coe_fn_zero p Œº G
    filter_upwards [Lp.simple_func.coe_fn_zero p Œº G, h_to_Lp n]with a ha0 ha_to_Lp
    rw [ha0, ha_to_Lp]
    exact hx_nonneg n a
  have hx_tendsto : tendsto (fun n : ‚Ñï => snorm (x n - g) p Œº) at_top (ùìù 0) :=
    by
    apply simple_func.tendsto_approx_on_Lp_snorm g_meas zero_mem hp_ne_top
    ¬∑ have hg_nonneg : 0 ‚â§·µê[Œº] g := (Lp.coe_fn_nonneg _).mpr g.2
      refine' hg_nonneg.mono fun a ha => subset_closure _
      simpa using ha
    ¬∑ simp_rw [sub_zero]; exact hg_mem_‚Ñíp.snorm_lt_top
  refine'
    ‚ü®fun n =>
      (coe_simple_func_nonneg_to_Lp_nonneg p Œº G) ‚ü®to_Lp (x n) (hx_mem_‚Ñíp n), hx_nonneg_Lp n‚ü©,
      fun n => mem_range_self _, _‚ü©
  suffices tendsto (fun n : ‚Ñï => ‚Üë(to_Lp (x n) (hx_mem_‚Ñíp n))) at_top (ùìù (g : Lp G p Œº))
    by
    rw [tendsto_iff_dist_tendsto_zero] at this‚ä¢
    simp_rw [Subtype.dist_eq]
    convert this
  rw [Lp.tendsto_Lp_iff_tendsto_‚Ñíp']
  convert hx_tendsto
  refine' funext fun n => snorm_congr_ae (eventually_eq.sub _ _)
  ¬∑ rw [Lp.simple_func.to_Lp_eq_to_Lp]
    exact h_to_Lp n
  ¬∑ rw [‚Üê coeFn_coeBase]
#align measure_theory.Lp.simple_func.dense_range_coe_simple_func_nonneg_to_Lp_nonneg MeasureTheory.lp.simpleFunc.denseRange_coeSimpleFuncNonnegToLpNonneg

variable {p Œº G}

end Order

end SimpleFunc

end Lp

variable [MeasurableSpace Œ±] [NormedAddCommGroup E] {f : Œ± ‚Üí E} {p : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±}

/-- To prove something for an arbitrary `Lp` function in a second countable Borel normed group, it
suffices to show that
* the property holds for (multiples of) characteristic functions;
* is closed under addition;
* the set of functions in `Lp` for which the property holds is closed.
-/
@[elab_as_elim]
theorem lp.induction [_i : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû) (P : lp E p Œº ‚Üí Prop)
    (h_ind :
      ‚àÄ (c : E) {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s < ‚àû),
        P (lp.simpleFunc.indicatorConst p hs hŒºs.Ne c))
    (h_add :
      ‚àÄ ‚¶Éf g‚¶Ñ,
        ‚àÄ hf : Mem‚Ñíp f p Œº,
          ‚àÄ hg : Mem‚Ñíp g p Œº,
            Disjoint (support f) (support g) ‚Üí
              P (hf.toLp f) ‚Üí P (hg.toLp g) ‚Üí P (hf.toLp f + hg.toLp g))
    (h_closed : IsClosed { f : lp E p Œº | P f }) : ‚àÄ f : lp E p Œº, P f :=
  by
  refine' fun f => (Lp.simple_func.dense_range hp_ne_top).inductionOn f h_closed _
  refine' Lp.simple_func.induction (lt_of_lt_of_le zero_lt_one _i.elim).ne' hp_ne_top _ _
  ¬∑ exact fun c s => h_ind c
  ¬∑ exact fun f g hf hg => h_add hf hg
#align measure_theory.Lp.induction MeasureTheory.lp.induction

/-- To prove something for an arbitrary `mem_‚Ñíp` function in a second countable
Borel normed group, it suffices to show that
* the property holds for (multiples of) characteristic functions;
* is closed under addition;
* the set of functions in the `L·µñ` space for which the property holds is closed.
* the property is closed under the almost-everywhere equal relation.

It is possible to make the hypotheses in the induction steps a bit stronger, and such conditions
can be added once we need them (for example in `h_add` it is only necessary to consider the sum of
a simple function with a multiple of a characteristic function and that the intersection
of their images is a subset of `{0}`).
-/
@[elab_as_elim]
theorem Mem‚Ñíp.induction [_i : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû) (P : (Œ± ‚Üí E) ‚Üí Prop)
    (h_ind : ‚àÄ (c : E) ‚¶És‚¶Ñ, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí P (s.indicator fun _ => c))
    (h_add :
      ‚àÄ ‚¶Éf g : Œ± ‚Üí E‚¶Ñ,
        Disjoint (support f) (support g) ‚Üí Mem‚Ñíp f p Œº ‚Üí Mem‚Ñíp g p Œº ‚Üí P f ‚Üí P g ‚Üí P (f + g))
    (h_closed : IsClosed { f : lp E p Œº | P f })
    (h_ae : ‚àÄ ‚¶Éf g‚¶Ñ, f =·µê[Œº] g ‚Üí Mem‚Ñíp f p Œº ‚Üí P f ‚Üí P g) : ‚àÄ ‚¶Éf : Œ± ‚Üí E‚¶Ñ (hf : Mem‚Ñíp f p Œº), P f :=
  by
  have : ‚àÄ f : simple_func Œ± E, mem_‚Ñíp f p Œº ‚Üí P f :=
    by
    refine' simple_func.induction _ _
    ¬∑ intro c s hs h
      by_cases hc : c = 0
      ¬∑ subst hc; convert h_ind 0 MeasurableSet.empty (by simp) using 1; ext; simp [const]
      have hp_pos : p ‚â† 0 := (lt_of_lt_of_le zero_lt_one _i.elim).ne'
      exact h_ind c hs (simple_func.measure_lt_top_of_mem_‚Ñíp_indicator hp_pos hp_ne_top hc hs h)
    ¬∑ intro f g hfg hf hg int_fg
      rw [simple_func.coe_add,
        mem_‚Ñíp_add_of_disjoint hfg f.strongly_measurable g.strongly_measurable] at int_fg
      refine' h_add hfg int_fg.1 int_fg.2 (hf int_fg.1) (hg int_fg.2)
  have : ‚àÄ f : Lp.simple_func E p Œº, P f := by
    intro f
    exact
      h_ae (Lp.simple_func.to_simple_func_eq_to_fun f) (Lp.simple_func.mem_‚Ñíp f)
        (this (Lp.simple_func.to_simple_func f) (Lp.simple_func.mem_‚Ñíp f))
  have : ‚àÄ f : Lp E p Œº, P f := fun f =>
    (Lp.simple_func.dense_range hp_ne_top).inductionOn f h_closed this
  exact fun f hf => h_ae hf.coeFn_toLp (Lp.mem_‚Ñíp _) (this (hf.toLp f))
#align measure_theory.mem_‚Ñíp.induction MeasureTheory.Mem‚Ñíp.induction

/-- If a set of ae strongly measurable functions is stable under addition and approximates
characteristic functions in `‚Ñíp`, then it is dense in `‚Ñíp`. -/
theorem Mem‚Ñíp.induction_dense (hp_ne_top : p ‚â† ‚àû) (P : (Œ± ‚Üí E) ‚Üí Prop)
    (h0P :
      ‚àÄ (c : E) ‚¶És : Set Œ±‚¶Ñ,
        MeasurableSet s ‚Üí
          Œº s < ‚àû ‚Üí
            ‚àÄ {Œµ : ‚Ñù‚â•0‚àû}, Œµ ‚â† 0 ‚Üí ‚àÉ g : Œ± ‚Üí E, snorm (g - s.indicator fun x => c) p Œº ‚â§ Œµ ‚àß P g)
    (h1P : ‚àÄ f g, P f ‚Üí P g ‚Üí P (f + g)) (h2P : ‚àÄ f, P f ‚Üí AEStronglyMeasurable f Œº) {f : Œ± ‚Üí E}
    (hf : Mem‚Ñíp f p Œº) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) : ‚àÉ g : Œ± ‚Üí E, snorm (f - g) p Œº ‚â§ Œµ ‚àß P g :=
  by
  rcases eq_or_ne p 0 with (rfl | hp_pos)
  ¬∑ rcases h0P (0 : E) MeasurableSet.empty (by simp only [measure_empty, WithTop.zero_lt_top])
        hŒµ with ‚ü®g, hg, Pg‚ü©
    exact ‚ü®g, by simp only [snorm_exponent_zero, zero_le'], Pg‚ü©
  suffices H :
    ‚àÄ (f' : Œ± ‚Üí‚Çõ E) (Œ¥ : ‚Ñù‚â•0‚àû) (hŒ¥ : Œ¥ ‚â† 0), mem_‚Ñíp f' p Œº ‚Üí ‚àÉ g, snorm (f' - g) p Œº ‚â§ Œ¥ ‚àß P g
  ¬∑ obtain ‚ü®Œ∑, Œ∑pos, hŒ∑‚ü© := exists_Lp_half E Œº p hŒµ
    rcases hf.exists_simple_func_snorm_sub_lt hp_ne_top Œ∑pos.ne' with ‚ü®f', hf', f'_mem‚ü©
    rcases H f' Œ∑ Œ∑pos.ne' f'_mem with ‚ü®g, hg, Pg‚ü©
    refine' ‚ü®g, _, Pg‚ü©
    convert(hŒ∑ _ _ (hf.ae_strongly_measurable.sub f'.ae_strongly_measurable)
          (f'.ae_strongly_measurable.sub (h2P g Pg)) hf'.le hg).le
    simp only [sub_add_sub_cancel]
  refine' simple_func.induction _ _
  ¬∑ intro c s hs Œµ Œµpos Hs
    rcases eq_or_ne c 0 with (rfl | hc)
    ¬∑ rcases h0P (0 : E) MeasurableSet.empty (by simp only [measure_empty, WithTop.zero_lt_top])
          Œµpos with ‚ü®g, hg, Pg‚ü©
      rw [‚Üê snorm_neg, neg_sub] at hg
      refine' ‚ü®g, _, Pg‚ü©
      convert hg
      ext x
      simp only [simple_func.const_zero, simple_func.coe_piecewise, simple_func.coe_zero,
        piecewise_eq_indicator, indicator_zero', Pi.zero_apply, indicator_zero]
    ¬∑ have : Œº s < ‚àû := simple_func.measure_lt_top_of_mem_‚Ñíp_indicator hp_pos hp_ne_top hc hs Hs
      rcases h0P c hs this Œµpos with ‚ü®g, hg, Pg‚ü©
      rw [‚Üê snorm_neg, neg_sub] at hg
      exact ‚ü®g, hg, Pg‚ü©
  ¬∑ intro f f' hff' hf hf' Œ¥ Œ¥pos int_ff'
    obtain ‚ü®Œ∑, Œ∑pos, hŒ∑‚ü© := exists_Lp_half E Œº p Œ¥pos
    rw [simple_func.coe_add,
      mem_‚Ñíp_add_of_disjoint hff' f.strongly_measurable f'.strongly_measurable] at int_ff'
    rcases hf Œ∑ Œ∑pos.ne' int_ff'.1 with ‚ü®g, hg, Pg‚ü©
    rcases hf' Œ∑ Œ∑pos.ne' int_ff'.2 with ‚ü®g', hg', Pg'‚ü©
    refine' ‚ü®g + g', _, h1P g g' Pg Pg'‚ü©
    convert(hŒ∑ _ _ (f.ae_strongly_measurable.sub (h2P g Pg))
          (f'.ae_strongly_measurable.sub (h2P g' Pg')) hg hg').le
    abel
#align measure_theory.mem_‚Ñíp.induction_dense MeasureTheory.Mem‚Ñíp.induction_dense

section Integrable

-- mathport name: ¬´expr ‚Üí‚ÇÅ‚Çõ[ ] ¬ª
notation:25 Œ± " ‚Üí‚ÇÅ‚Çõ[" Œº "] " E => @MeasureTheory.lp.simpleFunc Œ± E _ _ 1 Œº

theorem L1.SimpleFunc.toLp_one_eq_toL1 (f : Œ± ‚Üí‚Çõ E) (hf : Integrable f Œº) :
    (lp.simpleFunc.toLp f (mem‚Ñíp_one_iff_integrable.2 hf) : Œ± ‚Üí‚ÇÅ[Œº] E) = hf.toL1 f :=
  rfl
#align measure_theory.L1.simple_func.to_Lp_one_eq_to_L1 MeasureTheory.L1.SimpleFunc.toLp_one_eq_toL1

protected theorem L1.SimpleFunc.integrable (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) :
    Integrable (lp.simpleFunc.toSimpleFunc f) Œº := by rw [‚Üê mem_‚Ñíp_one_iff_integrable];
  exact Lp.simple_func.mem_‚Ñíp f
#align measure_theory.L1.simple_func.integrable MeasureTheory.L1.SimpleFunc.integrable

/-- To prove something for an arbitrary integrable function in a normed group,
it suffices to show that
* the property holds for (multiples of) characteristic functions;
* is closed under addition;
* the set of functions in the `L¬π` space for which the property holds is closed.
* the property is closed under the almost-everywhere equal relation.

It is possible to make the hypotheses in the induction steps a bit stronger, and such conditions
can be added once we need them (for example in `h_add` it is only necessary to consider the sum of
a simple function with a multiple of a characteristic function and that the intersection
of their images is a subset of `{0}`).
-/
@[elab_as_elim]
theorem Integrable.induction (P : (Œ± ‚Üí E) ‚Üí Prop)
    (h_ind : ‚àÄ (c : E) ‚¶És‚¶Ñ, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí P (s.indicator fun _ => c))
    (h_add :
      ‚àÄ ‚¶Éf g : Œ± ‚Üí E‚¶Ñ,
        Disjoint (support f) (support g) ‚Üí Integrable f Œº ‚Üí Integrable g Œº ‚Üí P f ‚Üí P g ‚Üí P (f + g))
    (h_closed : IsClosed { f : Œ± ‚Üí‚ÇÅ[Œº] E | P f })
    (h_ae : ‚àÄ ‚¶Éf g‚¶Ñ, f =·µê[Œº] g ‚Üí Integrable f Œº ‚Üí P f ‚Üí P g) :
    ‚àÄ ‚¶Éf : Œ± ‚Üí E‚¶Ñ (hf : Integrable f Œº), P f :=
  by
  simp only [‚Üê mem_‚Ñíp_one_iff_integrable] at *
  exact mem_‚Ñíp.induction one_ne_top P h_ind h_add h_closed h_ae
#align measure_theory.integrable.induction MeasureTheory.Integrable.induction

end Integrable

end MeasureTheory

