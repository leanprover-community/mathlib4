/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.MeasureTheory.Measure.ProbabilityMeasure

/-!
# Convergence in distribution

We introduce a definition of convergence in distribution of random variables: this is the
weak convergence of the laws of the random variables. In Mathlib terms this is a `Tendsto` in the
`ProbabilityMeasure` type.

## Main definitions

* `TendstoInDistribution X l Z Œº` : the sequence of random variables `X n` converges in
  distribution to the random variable `Z` along the filter `l` with respect to the probability
  measure `Œº`.

## Main statements

* `TendstoInDistribution.continuous_comp`: **Continuous mapping theorem**.
  If `X n` tends to `Z` in distribution and `g` is continuous, then `g ‚àò X n` tends to `g ‚àò Z`
  in distribution.
-/

open Filter
open scoped Topology

namespace MeasureTheory

variable {Œ© Œπ E : Type*} {m : MeasurableSpace Œ©} {Œº : Measure Œ©} [IsProbabilityMeasure Œº]
  [MeasurableSpace E] {X Y : Œπ ‚Üí Œ© ‚Üí E} {Z : Œ© ‚Üí E} {l : Filter Œπ}

section TendstoInDistribution

variable [TopologicalSpace E] [OpensMeasurableSpace E]

/-- Convergence in distribution of random variables.
This is the weak convergence of the laws of the random variables: `Tendsto` in the
`ProbabilityMeasure` type.
In order to avoid carrying proofs of measurability in the definition, we declare the convergence
to be true if any of the functions is not almost everywhere measurable. -/
def TendstoInDistribution (X : Œπ ‚Üí Œ© ‚Üí E) (l : Filter Œπ) (Z : Œ© ‚Üí E) (Œº : Measure Œ©)
    [IsProbabilityMeasure Œº] : Prop :=
  (hX : ‚àÄ i, AEMeasurable (X i) Œº) ‚Üí (hZ : AEMeasurable Z Œº) ‚Üí
    Tendsto (Œ≤ := ProbabilityMeasure E)
      (fun n ‚Ü¶ ‚ü®Œº.map (X n), Measure.isProbabilityMeasure_map (hX n)‚ü©) l
      (ùìù ‚ü®Œº.map Z, Measure.isProbabilityMeasure_map hZ‚ü©)

lemma tendstoInDistribution_def (hX : ‚àÄ i, AEMeasurable (X i) Œº) (hZ : AEMeasurable Z Œº) :
    TendstoInDistribution X l Z Œº ‚Üî
      Tendsto (Œ≤ := ProbabilityMeasure E)
        (fun n ‚Ü¶ ‚ü®Œº.map (X n), Measure.isProbabilityMeasure_map (hX n)‚ü©) l
        (ùìù ‚ü®Œº.map Z, Measure.isProbabilityMeasure_map hZ‚ü©) := by
  simp [TendstoInDistribution, hX, hZ]

@[simp]
lemma tendstoInDistribution_of_not_aemeasurable_left (hf : ¬¨ ‚àÄ i, AEMeasurable (X i) Œº) :
    TendstoInDistribution X l Z Œº := fun hf' ‚Ü¶ absurd hf' hf

@[simp]
lemma tendstoInDistribution_of_not_aemeasurable_right (hg : ¬¨ AEMeasurable Z Œº) :
    TendstoInDistribution X l Z Œº := fun _ hg' ‚Ü¶ absurd hg' hg

lemma tendstoInDistribution_const :
    TendstoInDistribution (fun _ ‚Ü¶ Z) l Z Œº := fun _ _ ‚Ü¶ tendsto_const_nhds

lemma tendstoInDistribution_unique {E : Type*} [TopologicalSpace E] [HasOuterApproxClosed E]
    [MeasurableSpace E] [BorelSpace E] (X : Œπ ‚Üí Œ© ‚Üí E) {Z W : Œ© ‚Üí E} [l.NeBot]
    (hX : ‚àÄ i, AEMeasurable (X i) Œº) (hZ : AEMeasurable Z Œº) (hW : AEMeasurable W Œº)
    (h1 : TendstoInDistribution X l Z Œº) (h2 : TendstoInDistribution X l W Œº) :
    Œº.map Z = Œº.map W := by
  rw [tendstoInDistribution_def hX (by fun_prop)] at h1 h2
  have h_eq := tendsto_nhds_unique h1 h2
  rw [Subtype.ext_iff] at h_eq
  simpa using h_eq

/-- **Continuous mapping theorem**: if `X n` tends to `Z` in distribution and `g` is continuous,
then `g ‚àò X n` tends to `g ‚àò Z` in distribution. -/
theorem TendstoInDistribution.continuous_comp {F : Type*} [TopologicalSpace F]
    [MeasurableSpace F] [BorelSpace F] {g : E ‚Üí F} (hg : Continuous g)
    (h : TendstoInDistribution X l Z Œº) (hX : ‚àÄ i, AEMeasurable (X i) Œº) (hZ : AEMeasurable Z Œº) :
    TendstoInDistribution (fun n ‚Ü¶ g ‚àò X n) l (g ‚àò Z) Œº := by
  intro hX' hZ'
  specialize h hX hZ
  rw [ProbabilityMeasure.tendsto_iff_forall_integral_tendsto] at h ‚ä¢
  intro f
  specialize h (f.compContinuous ‚ü®g, hg‚ü©)
  simp only [ProbabilityMeasure.coe_mk, BoundedContinuousFunction.compContinuous_apply,
    ContinuousMap.coe_mk] at h
  simp only [ProbabilityMeasure.coe_mk]
  rw [‚Üê AEMeasurable.map_map_of_aemeasurable (by fun_prop) hZ,
    integral_map (by fun_prop) (by fun_prop)]
  convert h with n
  rw [integral_map (by fun_prop) (by fun_prop), integral_map (by fun_prop)]
  ¬∑ simp
  ¬∑ exact Measurable.aestronglyMeasurable <| by fun_prop

end TendstoInDistribution

end MeasureTheory
