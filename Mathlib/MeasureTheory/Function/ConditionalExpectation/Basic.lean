/-
Copyright (c) 2021 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1

/-! # Conditional expectation

We build the conditional expectation of an integrable function `f` with value in a Banach space
with respect to a measure `Œº` (defined on a measurable space structure `m‚ÇÄ`) and a measurable space
structure `m` with `hm : m ‚â§ m‚ÇÄ` (a sub-sigma-algebra). This is an `m`-strongly measurable
function `Œº[f|hm]` which is integrable and verifies `‚à´ x in s, Œº[f|hm] x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº`
for all `m`-measurable sets `s`. It is unique as an element of `L¬π`.

The construction is done in four steps:
* Define the conditional expectation of an `L¬≤` function, as an element of `L¬≤`. This is the
  orthogonal projection on the subspace of almost everywhere `m`-measurable functions.
* Show that the conditional expectation of the indicator of a measurable set with finite measure
  is integrable and define a map `Set Œ± ‚Üí (E ‚ÜíL[‚Ñù] (Œ± ‚Üí‚ÇÅ[Œº] E))` which to a set associates a linear
  map. That linear map sends `x ‚àà E` to the conditional expectation of the indicator of the set
  with value `x`.
* Extend that map to `condExpL1CLM : (Œ± ‚Üí‚ÇÅ[Œº] E) ‚ÜíL[‚Ñù] (Œ± ‚Üí‚ÇÅ[Œº] E)`. This is done using the same
  construction as the Bochner integral (see the file `MeasureTheory/Integral/SetToL1`).
* Define the conditional expectation of a function `f : Œ± ‚Üí E`, which is an integrable function
  `Œ± ‚Üí E` equal to 0 if `f` is not integrable, and equal to an `m`-measurable representative of
  `condExpL1CLM` applied to `[f]`, the equivalence class of `f` in `L¬π`.

The first step is done in `MeasureTheory.Function.ConditionalExpectation.CondexpL2`, the two
next steps in `MeasureTheory.Function.ConditionalExpectation.CondexpL1` and the final step is
performed in this file.

## Main results

The conditional expectation and its properties

* `condExp (m : MeasurableSpace Œ±) (Œº : Measure Œ±) (f : Œ± ‚Üí E)`: conditional expectation of `f`
  with respect to `m`.
* `integrable_condExp` : `condExp` is integrable.
* `stronglyMeasurable_condExp` : `condExp` is `m`-strongly-measurable.
* `setIntegral_condExp (hf : Integrable f Œº) (hs : MeasurableSet[m] s)` : if `m ‚â§ m‚ÇÄ` (the
  œÉ-algebra over which the measure is defined), then the conditional expectation verifies
  `‚à´ x in s, condExp m Œº f x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº` for any `m`-measurable set `s`.

While `condExp` is function-valued, we also define `condExpL1` with value in `L1` and a continuous
linear map `condExpL1CLM` from `L1` to `L1`. `condExp` should be used in most cases.

Uniqueness of the conditional expectation

* `ae_eq_condExp_of_forall_setIntegral_eq`: an a.e. `m`-measurable function which verifies the
  equality of integrals is a.e. equal to `condExp`.

## Notations

For a measure `Œº` defined on a measurable space structure `m‚ÇÄ`, another measurable space structure
`m` with `hm : m ‚â§ m‚ÇÄ` (a sub-œÉ-algebra) and a function `f`, we define the notation
* `Œº[f|m] = condExp m Œº f`.

## Tags

conditional expectation, conditional expected value

-/

open TopologicalSpace MeasureTheory.Lp Filter
open scoped Classical ENNReal Topology MeasureTheory

namespace MeasureTheory
  -- ùïú for ‚Ñù or ‚ÑÇ
  -- E for integrals on a Lp submodule
variable {Œ± Œ≤ E ùïú : Type*} [RCLike ùïú] {m m‚ÇÄ : MeasurableSpace Œ±} {Œº : Measure Œ±} {f g : Œ± ‚Üí E}
  {s : Set Œ±}

section NormedAddCommGroup
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]

variable (m) in
/-- Conditional expectation of a function. It is defined as 0 if any one of the following conditions
is true:
- `m` is not a sub-œÉ-algebra of `m‚ÇÄ`,
- `Œº` is not œÉ-finite with respect to `m`,
- `f` is not integrable. -/
noncomputable irreducible_def condExp (Œº : Measure[m‚ÇÄ] Œ±) (f : Œ± ‚Üí E) : Œ± ‚Üí E :=
  if hm : m ‚â§ m‚ÇÄ then
    if h : SigmaFinite (Œº.trim hm) ‚àß Integrable f Œº then
      if StronglyMeasurable[m] f then f
      else have := h.1; aestronglyMeasurable'_condExpL1.mk (condExpL1 hm Œº f)
    else 0
  else 0

@[deprecated (since := "2025-01-21")] alias condexp := condExp

-- We define notation `Œº[f|m]` for the conditional expectation of `f` with respect to `m`.
scoped notation Œº "[" f "|" m "]" => MeasureTheory.condExp m Œº f

theorem condExp_of_not_le (hm_not : ¬¨m ‚â§ m‚ÇÄ) : Œº[f|m] = 0 := by rw [condExp, dif_neg hm_not]

@[deprecated (since := "2025-01-21")] alias condexp_of_not_le := condExp_of_not_le

theorem condExp_of_not_sigmaFinite (hm : m ‚â§ m‚ÇÄ) (hŒºm_not : ¬¨SigmaFinite (Œº.trim hm)) :
    Œº[f|m] = 0 := by rw [condExp, dif_pos hm, dif_neg]; push_neg; exact fun h => absurd h hŒºm_not

@[deprecated (since := "2025-01-21")] alias condexp_of_not_sigmaFinite := condExp_of_not_sigmaFinite

theorem condExp_of_sigmaFinite (hm : m ‚â§ m‚ÇÄ) [hŒºm : SigmaFinite (Œº.trim hm)] :
    Œº[f|m] =
      if Integrable f Œº then
        if StronglyMeasurable[m] f then f
        else aestronglyMeasurable'_condExpL1.mk (condExpL1 hm Œº f)
      else 0 := by
  rw [condExp, dif_pos hm]
  simp only [hŒºm, Ne, true_and]
  by_cases hf : Integrable f Œº
  ¬∑ rw [dif_pos hf, if_pos hf]
  ¬∑ rw [dif_neg hf, if_neg hf]

@[deprecated (since := "2025-01-21")] alias condexp_of_sigmaFinite := condExp_of_sigmaFinite

theorem condExp_of_stronglyMeasurable (hm : m ‚â§ m‚ÇÄ) [hŒºm : SigmaFinite (Œº.trim hm)] {f : Œ± ‚Üí E}
    (hf : StronglyMeasurable[m] f) (hfi : Integrable f Œº) : Œº[f|m] = f := by
  rw [condExp_of_sigmaFinite hm, if_pos hfi, if_pos hf]

@[deprecated (since := "2025-01-21")]
alias condexp_of_stronglyMeasurable := condExp_of_stronglyMeasurable

theorem condExp_const (hm : m ‚â§ m‚ÇÄ) (c : E) [IsFiniteMeasure Œº] : Œº[fun _ : Œ± ‚Ü¶ c|m] = fun _ ‚Ü¶ c :=
  condExp_of_stronglyMeasurable hm stronglyMeasurable_const (integrable_const c)

@[deprecated (since := "2025-01-21")] alias condexp_const := condExp_const

theorem condExp_ae_eq_condExpL1 (hm : m ‚â§ m‚ÇÄ) [hŒºm : SigmaFinite (Œº.trim hm)] (f : Œ± ‚Üí E) :
    Œº[f|m] =·µê[Œº] condExpL1 hm Œº f := by
  rw [condExp_of_sigmaFinite hm]
  by_cases hfi : Integrable f Œº
  ¬∑ rw [if_pos hfi]
    by_cases hfm : StronglyMeasurable[m] f
    ¬∑ rw [if_pos hfm]
      exact (condExpL1_of_aestronglyMeasurable' (StronglyMeasurable.aeStronglyMeasurable' hfm)
        hfi).symm
    ¬∑ rw [if_neg hfm]
      exact (AEStronglyMeasurable'.ae_eq_mk aestronglyMeasurable'_condExpL1).symm
  rw [if_neg hfi, condExpL1_undef hfi]
  exact (coeFn_zero _ _ _).symm

@[deprecated (since := "2025-01-21")] alias condexp_ae_eq_condexpL1 := condExp_ae_eq_condExpL1

theorem condExp_ae_eq_condExpL1CLM (hm : m ‚â§ m‚ÇÄ) [SigmaFinite (Œº.trim hm)] (hf : Integrable f Œº) :
    Œº[f|m] =·µê[Œº] condExpL1CLM E hm Œº (hf.toL1 f) := by
  refine (condExp_ae_eq_condExpL1 hm f).trans (Eventually.of_forall fun x => ?_)
  rw [condExpL1_eq hf]

@[deprecated (since := "2025-01-21")] alias condexp_ae_eq_condexpL1CLM := condExp_ae_eq_condExpL1CLM

theorem condExp_undef (hf : ¬¨Integrable f Œº) : Œº[f|m] = 0 := by
  by_cases hm : m ‚â§ m‚ÇÄ
  swap; ¬∑ rw [condExp_of_not_le hm]
  by_cases hŒºm : SigmaFinite (Œº.trim hm)
  swap; ¬∑ rw [condExp_of_not_sigmaFinite hm hŒºm]
  rw [condExp_of_sigmaFinite, if_neg hf]

@[deprecated (since := "2025-01-21")] alias condexp_undef := condExp_undef

@[simp]
theorem condExp_zero : Œº[(0 : Œ± ‚Üí E)|m] = 0 := by
  by_cases hm : m ‚â§ m‚ÇÄ
  swap; ¬∑ rw [condExp_of_not_le hm]
  by_cases hŒºm : SigmaFinite (Œº.trim hm)
  swap; ¬∑ rw [condExp_of_not_sigmaFinite hm hŒºm]
  exact condExp_of_stronglyMeasurable hm stronglyMeasurable_zero (integrable_zero _ _ _)

@[deprecated (since := "2025-01-21")] alias condexp_zero := condExp_zero

theorem stronglyMeasurable_condExp : StronglyMeasurable[m] (Œº[f|m]) := by
  by_cases hm : m ‚â§ m‚ÇÄ
  swap; ¬∑ rw [condExp_of_not_le hm]; exact stronglyMeasurable_zero
  by_cases hŒºm : SigmaFinite (Œº.trim hm)
  swap; ¬∑ rw [condExp_of_not_sigmaFinite hm hŒºm]; exact stronglyMeasurable_zero
  rw [condExp_of_sigmaFinite hm]
  split_ifs with hfi hfm
  ¬∑ exact hfm
  ¬∑ exact AEStronglyMeasurable'.stronglyMeasurable_mk _
  ¬∑ exact stronglyMeasurable_zero

@[deprecated (since := "2025-01-21")] alias stronglyMeasurable_condexp := stronglyMeasurable_condExp

theorem condExp_congr_ae (h : f =·µê[Œº] g) : Œº[f|m] =·µê[Œº] Œº[g|m] := by
  by_cases hm : m ‚â§ m‚ÇÄ
  swap; ¬∑ simp_rw [condExp_of_not_le hm]; rfl
  by_cases hŒºm : SigmaFinite (Œº.trim hm)
  swap; ¬∑ simp_rw [condExp_of_not_sigmaFinite hm hŒºm]; rfl
  exact (condExp_ae_eq_condExpL1 hm f).trans
    (Filter.EventuallyEq.trans (by rw [condExpL1_congr_ae hm h])
      (condExp_ae_eq_condExpL1 hm g).symm)

@[deprecated (since := "2025-01-21")] alias condexp_congr_ae := condExp_congr_ae

theorem condExp_of_aestronglyMeasurable' (hm : m ‚â§ m‚ÇÄ) [hŒºm : SigmaFinite (Œº.trim hm)] {f : Œ± ‚Üí E}
    (hf : AEStronglyMeasurable' m f Œº) (hfi : Integrable f Œº) : Œº[f|m] =·µê[Œº] f := by
  refine ((condExp_congr_ae hf.ae_eq_mk).trans ?_).trans hf.ae_eq_mk.symm
  rw [condExp_of_stronglyMeasurable hm hf.stronglyMeasurable_mk
    ((integrable_congr hf.ae_eq_mk).mp hfi)]

@[deprecated (since := "2025-01-21")]
alias condexp_of_aestronglyMeasurable' := condExp_of_aestronglyMeasurable'

@[fun_prop]
theorem integrable_condExp : Integrable (Œº[f|m]) Œº := by
  by_cases hm : m ‚â§ m‚ÇÄ
  swap; ¬∑ rw [condExp_of_not_le hm]; exact integrable_zero _ _ _
  by_cases hŒºm : SigmaFinite (Œº.trim hm)
  swap; ¬∑ rw [condExp_of_not_sigmaFinite hm hŒºm]; exact integrable_zero _ _ _
  exact (integrable_condExpL1 f).congr (condExp_ae_eq_condExpL1 hm f).symm

@[deprecated (since := "2025-01-21")] alias integrable_condexp := integrable_condExp

/-- The integral of the conditional expectation `Œº[f|hm]` over an `m`-measurable set is equal to
the integral of `f` on that set. -/
theorem setIntegral_condExp (hm : m ‚â§ m‚ÇÄ) [SigmaFinite (Œº.trim hm)] (hf : Integrable f Œº)
    (hs : MeasurableSet[m] s) : ‚à´ x in s, (Œº[f|m]) x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº := by
  rw [setIntegral_congr_ae (hm s hs) ((condExp_ae_eq_condExpL1 hm f).mono fun x hx _ => hx)]
  exact setIntegral_condExpL1 hf hs

@[deprecated (since := "2025-01-21")] alias setIntegral_condexp := setIntegral_condExp

@[deprecated (since := "2024-04-17")] alias set_integral_condexp := setIntegral_condExp

theorem integral_condExp (hm : m ‚â§ m‚ÇÄ) [hŒºm : SigmaFinite (Œº.trim hm)] :
    ‚à´ x, (Œº[f|m]) x ‚àÇŒº = ‚à´ x, f x ‚àÇŒº := by
  by_cases hf : Integrable f Œº
  ¬∑ suffices ‚à´ x in Set.univ, (Œº[f|m]) x ‚àÇŒº = ‚à´ x in Set.univ, f x ‚àÇŒº by
      simp_rw [setIntegral_univ] at this; exact this
    exact setIntegral_condExp hm hf .univ
  simp only [condExp_undef hf, Pi.zero_apply, integral_zero, integral_undef hf]

@[deprecated (since := "2025-01-21")] alias integral_condexp := integral_condExp

/-- **Law of total probability** using `condExp` as conditional probability. -/
theorem integral_condExp_indicator [mŒ≤ : MeasurableSpace Œ≤] {Y : Œ± ‚Üí Œ≤} (hY : Measurable Y)
    [SigmaFinite (Œº.trim hY.comap_le)] {A : Set Œ±} (hA : MeasurableSet A) :
    ‚à´ x, (Œº[(A.indicator fun _ ‚Ü¶ (1 : ‚Ñù)) | mŒ≤.comap Y]) x ‚àÇŒº = (Œº A).toReal := by
  rw [integral_condExp, integral_indicator hA, setIntegral_const, smul_eq_mul, mul_one]

@[deprecated (since := "2025-01-21")] alias integral_condexp_indicator := integral_condExp_indicator

/-- **Uniqueness of the conditional expectation**
If a function is a.e. `m`-measurable, verifies an integrability condition and has same integral
as `f` on all `m`-measurable sets, then it is a.e. equal to `Œº[f|hm]`. -/
theorem ae_eq_condExp_of_forall_setIntegral_eq (hm : m ‚â§ m‚ÇÄ) [SigmaFinite (Œº.trim hm)]
    {f g : Œ± ‚Üí E} (hf : Integrable f Œº)
    (hg_int_finite : ‚àÄ s, MeasurableSet[m] s ‚Üí Œº s < ‚àû ‚Üí IntegrableOn g s Œº)
    (hg_eq : ‚àÄ s : Set Œ±, MeasurableSet[m] s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, g x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº)
    (hgm : AEStronglyMeasurable' m g Œº) : g =·µê[Œº] Œº[f|m] := by
  refine ae_eq_of_forall_setIntegral_eq_of_sigmaFinite' hm hg_int_finite
    (fun s _ _ => integrable_condExp.integrableOn) (fun s hs hŒºs => ?_) hgm
    (StronglyMeasurable.aeStronglyMeasurable' stronglyMeasurable_condExp)
  rw [hg_eq s hs hŒºs, setIntegral_condExp hm hf hs]

@[deprecated (since := "2025-01-21")]
alias ae_eq_condexp_of_forall_setIntegral_eq := ae_eq_condExp_of_forall_setIntegral_eq

@[deprecated (since := "2024-04-17")]
alias ae_eq_condExp_of_forall_set_integral_eq := ae_eq_condExp_of_forall_setIntegral_eq

@[deprecated (since := "2025-01-21")]
alias ae_eq_condexp_of_forall_set_integral_eq := ae_eq_condExp_of_forall_set_integral_eq

theorem condExp_bot' [hŒº : NeZero Œº] (f : Œ± ‚Üí E) :
    Œº[f|‚ä•] = fun _ => (Œº Set.univ).toReal‚Åª¬π ‚Ä¢ ‚à´ x, f x ‚àÇŒº := by
  by_cases hŒº_finite : IsFiniteMeasure Œº
  swap
  ¬∑ have h : ¬¨SigmaFinite (Œº.trim bot_le) := by rwa [sigmaFinite_trim_bot_iff]
    rw [not_isFiniteMeasure_iff] at hŒº_finite
    rw [condExp_of_not_sigmaFinite bot_le h]
    simp only [hŒº_finite, ENNReal.top_toReal, inv_zero, zero_smul]
    rfl
  have h_meas : StronglyMeasurable[‚ä•] (Œº[f|‚ä•]) := stronglyMeasurable_condExp
  obtain ‚ü®c, h_eq‚ü© := stronglyMeasurable_bot_iff.mp h_meas
  rw [h_eq]
  have h_integral : ‚à´ x, (Œº[f|‚ä•]) x ‚àÇŒº = ‚à´ x, f x ‚àÇŒº := integral_condExp bot_le
  simp_rw [h_eq, integral_const] at h_integral
  rw [‚Üê h_integral, ‚Üê smul_assoc, smul_eq_mul, inv_mul_cancel‚ÇÄ, one_smul]
  rw [Ne, ENNReal.toReal_eq_zero_iff, not_or]
  exact ‚ü®NeZero.ne _, measure_ne_top Œº Set.univ‚ü©

@[deprecated (since := "2025-01-21")] alias condexp_bot' := condExp_bot'

theorem condExp_bot_ae_eq (f : Œ± ‚Üí E) :
    Œº[f|‚ä•] =·µê[Œº] fun _ => (Œº Set.univ).toReal‚Åª¬π ‚Ä¢ ‚à´ x, f x ‚àÇŒº := by
  rcases eq_zero_or_neZero Œº with rfl | hŒº
  ¬∑ rw [ae_zero]; exact eventually_bot
  ¬∑ exact Eventually.of_forall <| congr_fun (condExp_bot' f)

@[deprecated (since := "2025-01-21")] alias condexp_bot_ae_eq := condExp_bot_ae_eq

theorem condExp_bot [IsProbabilityMeasure Œº] (f : Œ± ‚Üí E) : Œº[f|‚ä•] = fun _ => ‚à´ x, f x ‚àÇŒº := by
  refine (condExp_bot' f).trans ?_; rw [measure_univ, ENNReal.one_toReal, inv_one, one_smul]

@[deprecated (since := "2025-01-21")] alias condexp_bot := condExp_bot

theorem condExp_add (hf : Integrable f Œº) (hg : Integrable g Œº) (m : MeasurableSpace Œ±) :
    Œº[f + g|m] =·µê[Œº] Œº[f|m] + Œº[g|m] := by
  by_cases hm : m ‚â§ m‚ÇÄ
  swap; ¬∑ simp_rw [condExp_of_not_le hm]; simp
  by_cases hŒºm : SigmaFinite (Œº.trim hm)
  swap; ¬∑ simp_rw [condExp_of_not_sigmaFinite hm hŒºm]; simp
  refine (condExp_ae_eq_condExpL1 hm _).trans ?_
  rw [condExpL1_add hf hg]
  exact (coeFn_add _ _).trans
    ((condExp_ae_eq_condExpL1 hm _).symm.add (condExp_ae_eq_condExpL1 hm _).symm)

@[deprecated (since := "2025-01-21")] alias condexp_add := condExp_add

theorem condExp_finset_sum {Œπ : Type*} {s : Finset Œπ} {f : Œπ ‚Üí Œ± ‚Üí E}
    (hf : ‚àÄ i ‚àà s, Integrable (f i) Œº) (m : MeasurableSpace Œ±) :
    Œº[‚àë i ‚àà s, f i|m] =·µê[Œº] ‚àë i ‚àà s, Œº[f i|m] := by
  induction' s using Finset.induction_on with i s his heq hf
  ¬∑ rw [Finset.sum_empty, Finset.sum_empty, condExp_zero]
  ¬∑ rw [Finset.sum_insert his, Finset.sum_insert his]
    exact (condExp_add (hf i <| Finset.mem_insert_self i s)
      (integrable_finset_sum' _ <| Finset.forall_of_forall_insert hf) _).trans
        ((EventuallyEq.refl _ _).add <| heq <| Finset.forall_of_forall_insert hf)

@[deprecated (since := "2025-01-21")] alias condexp_finset_sum := condExp_finset_sum

theorem condExp_smul [NormedSpace ùïú E] (c : ùïú) (f : Œ± ‚Üí E) (m : MeasurableSpace Œ±) :
    Œº[c ‚Ä¢ f|m] =·µê[Œº] c ‚Ä¢ Œº[f|m] := by
  by_cases hm : m ‚â§ m‚ÇÄ
  swap; ¬∑ simp_rw [condExp_of_not_le hm]; simp
  by_cases hŒºm : SigmaFinite (Œº.trim hm)
  swap; ¬∑ simp_rw [condExp_of_not_sigmaFinite hm hŒºm]; simp
  refine (condExp_ae_eq_condExpL1 hm _).trans ?_
  rw [condExpL1_smul c f]
  refine (condExp_ae_eq_condExpL1 hm f).mp ?_
  refine (coeFn_smul c (condExpL1 hm Œº f)).mono fun x hx1 hx2 => ?_
  simp only [hx1, hx2, Pi.smul_apply]

@[deprecated (since := "2025-01-21")] alias condexp_smul := condExp_smul

theorem condExp_neg (f : Œ± ‚Üí E) (m : MeasurableSpace Œ±) : Œº[-f|m] =·µê[Œº] -Œº[f|m] := by
  calc
    Œº[-f|m] = Œº[(-1 : ‚Ñù) ‚Ä¢ f|m] := by rw [neg_one_smul ‚Ñù f]
    _ =·µê[Œº] (-1 : ‚Ñù) ‚Ä¢ Œº[f|m] := condExp_smul ..
    _ = -Œº[f|m] := neg_one_smul ‚Ñù (Œº[f|m])

@[deprecated (since := "2025-01-21")] alias condexp_neg := condExp_neg

theorem condExp_sub (hf : Integrable f Œº) (hg : Integrable g Œº) (m : MeasurableSpace Œ±) :
    Œº[f - g|m] =·µê[Œº] Œº[f|m] - Œº[g|m] := by
  simp_rw [sub_eq_add_neg]
  exact (condExp_add hf hg.neg _).trans (EventuallyEq.rfl.add (condExp_neg ..))

@[deprecated (since := "2025-01-21")] alias condexp_sub := condExp_sub

/-- **Tower property of the conditional expectation**.

Taking the `m‚ÇÇ`-conditional expectation then the `m‚ÇÅ`-conditional expectation, where `m‚ÇÅ` is a
smaller œÉ-algebra, is the same as taking the `m‚ÇÅ`-conditional expectation directly. -/
theorem condExp_condExp_of_le {m‚ÇÅ m‚ÇÇ m‚ÇÄ : MeasurableSpace Œ±} {Œº : Measure Œ±} (hm‚ÇÅ‚ÇÇ : m‚ÇÅ ‚â§ m‚ÇÇ)
    (hm‚ÇÇ : m‚ÇÇ ‚â§ m‚ÇÄ) [SigmaFinite (Œº.trim hm‚ÇÇ)] : Œº[Œº[f|m‚ÇÇ]|m‚ÇÅ] =·µê[Œº] Œº[f|m‚ÇÅ] := by
  by_cases hŒºm‚ÇÅ : SigmaFinite (Œº.trim (hm‚ÇÅ‚ÇÇ.trans hm‚ÇÇ))
  swap; ¬∑ simp_rw [condExp_of_not_sigmaFinite (hm‚ÇÅ‚ÇÇ.trans hm‚ÇÇ) hŒºm‚ÇÅ]; rfl
  by_cases hf : Integrable f Œº
  swap; ¬∑ simp_rw [condExp_undef hf, condExp_zero]; rfl
  refine ae_eq_of_forall_setIntegral_eq_of_sigmaFinite' (hm‚ÇÅ‚ÇÇ.trans hm‚ÇÇ)
    (fun s _ _ => integrable_condExp.integrableOn) (fun s _ _ => integrable_condExp.integrableOn) ?_
    stronglyMeasurable_condExp.aeStronglyMeasurable'
    stronglyMeasurable_condExp.aeStronglyMeasurable'
  intro s hs _
  rw [setIntegral_condExp (hm‚ÇÅ‚ÇÇ.trans hm‚ÇÇ) integrable_condExp hs]
  rw [setIntegral_condExp (hm‚ÇÅ‚ÇÇ.trans hm‚ÇÇ) hf hs, setIntegral_condExp hm‚ÇÇ hf (hm‚ÇÅ‚ÇÇ s hs)]

@[deprecated (since := "2025-01-21")] alias condexp_condexp_of_le := condExp_condExp_of_le

section MemL2
variable [InnerProductSpace ùïú E]

lemma Mem‚Ñíp.condExpL2_ae_eq_condExp' (hm : m ‚â§ m‚ÇÄ) (hf1 : Integrable f Œº) (hf2 : Mem‚Ñíp f 2 Œº)
    [SigmaFinite (Œº.trim hm)] : condExpL2 E ùïú hm hf2.toLp =·µê[Œº] Œº[f | m] := by
  refine ae_eq_condExp_of_forall_setIntegral_eq hm hf1
    (fun s hs htop ‚Ü¶ integrableOn_condExpL2_of_measure_ne_top hm htop.ne _) (fun s hs htop ‚Ü¶ ?_)
    (aeStronglyMeasurable'_condExpL2 hm _)
  rw [integral_condExpL2_eq hm (hf2.toLp _) hs htop.ne]
  refine setIntegral_congr_ae (hm _ hs) ?_
  filter_upwards [hf2.coeFn_toLp] with œâ hœâ _ using hœâ

lemma Mem‚Ñíp.condExpL2_ae_eq_condExp (hm : m ‚â§ m‚ÇÄ) (hf : Mem‚Ñíp f 2 Œº) [IsFiniteMeasure Œº] :
    condExpL2 E ùïú hm hf.toLp =·µê[Œº] Œº[f | m] :=
  hf.condExpL2_ae_eq_condExp' hm (mem‚Ñíp_one_iff_integrable.1 <| hf.mono_exponent one_le_two)

-- TODO: Generalize via the conditional Jensen inequality
include ùïú in
lemma eLpNorm_condExp_le : eLpNorm (Œº[f | m]) 2 Œº ‚â§ eLpNorm f 2 Œº := by
  by_cases hm : m ‚â§ m‚ÇÄ; swap
  ¬∑ simp [condExp_of_not_le hm]
  by_cases hfŒº : SigmaFinite (Œº.trim hm); swap
  ¬∑ rw [condExp_of_not_sigmaFinite hm hfŒº]
    simp
  by_cases hfi : Integrable f Œº; swap
  ¬∑ rw [condExp_undef hfi]
    simp
  obtain hf | hf := eq_or_ne (eLpNorm f 2 Œº) ‚àû
  ¬∑ simp [hf]
  replace hf : Mem‚Ñíp f 2 Œº := ‚ü®hfi.1, Ne.lt_top' fun a ‚Ü¶ hf (id (Eq.symm a))‚ü©
  rw [‚Üê eLpNorm_congr_ae (hf.condExpL2_ae_eq_condExp' (ùïú := ùïú) hm hfi)]
  refine le_trans (eLpNorm_condExpL2_le hm _) ?_
  rw [eLpNorm_congr_ae hf.coeFn_toLp]

include ùïú in
protected lemma Mem‚Ñíp.condExp (hf : Mem‚Ñíp f 2 Œº) : Mem‚Ñíp (Œº[f | m]) 2 Œº := by
  by_cases hm : m ‚â§ m‚ÇÄ
  ¬∑ exact ‚ü®(stronglyMeasurable_condExp.mono hm).aestronglyMeasurable,
      eLpNorm_condExp_le (ùïú := ùïú).trans_lt hf.eLpNorm_lt_top‚ü©
  ¬∑ simp [condExp_of_not_le hm]

end MemL2
end NormedAddCommGroup

section NormedLatticeAddCommGroup
variable [NormedLatticeAddCommGroup E] [CompleteSpace E] [NormedSpace ‚Ñù E]

/-- **Lebesgue dominated convergence theorem**: sufficient conditions under which almost
  everywhere convergence of a sequence of functions implies the convergence of their image by
  `condExpL1`. -/
theorem tendsto_condExpL1_of_dominated_convergence (hm : m ‚â§ m‚ÇÄ) [SigmaFinite (Œº.trim hm)]
    {fs : ‚Ñï ‚Üí Œ± ‚Üí E} {f : Œ± ‚Üí E} (bound_fs : Œ± ‚Üí ‚Ñù)
    (hfs_meas : ‚àÄ n, AEStronglyMeasurable (fs n) Œº) (h_int_bound_fs : Integrable bound_fs Œº)
    (hfs_bound : ‚àÄ n, ‚àÄ·µê x ‚àÇŒº, ‚Äñfs n x‚Äñ ‚â§ bound_fs x)
    (hfs : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => fs n x) atTop (ùìù (f x))) :
    Tendsto (fun n => condExpL1 hm Œº (fs n)) atTop (ùìù (condExpL1 hm Œº f)) :=
  tendsto_setToFun_of_dominated_convergence _ bound_fs hfs_meas h_int_bound_fs hfs_bound hfs

@[deprecated (since := "2025-01-21")]
alias tendsto_condexpL1_of_dominated_convergence := tendsto_condExpL1_of_dominated_convergence

/-- If two sequences of functions have a.e. equal conditional expectations at each step, converge
and verify dominated convergence hypotheses, then the conditional expectations of their limits are
a.e. equal. -/
theorem tendsto_condExp_unique (fs gs : ‚Ñï ‚Üí Œ± ‚Üí E) (f g : Œ± ‚Üí E)
    (hfs_int : ‚àÄ n, Integrable (fs n) Œº) (hgs_int : ‚àÄ n, Integrable (gs n) Œº)
    (hfs : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => fs n x) atTop (ùìù (f x)))
    (hgs : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => gs n x) atTop (ùìù (g x))) (bound_fs : Œ± ‚Üí ‚Ñù)
    (h_int_bound_fs : Integrable bound_fs Œº) (bound_gs : Œ± ‚Üí ‚Ñù)
    (h_int_bound_gs : Integrable bound_gs Œº) (hfs_bound : ‚àÄ n, ‚àÄ·µê x ‚àÇŒº, ‚Äñfs n x‚Äñ ‚â§ bound_fs x)
    (hgs_bound : ‚àÄ n, ‚àÄ·µê x ‚àÇŒº, ‚Äñgs n x‚Äñ ‚â§ bound_gs x) (hfg : ‚àÄ n, Œº[fs n|m] =·µê[Œº] Œº[gs n|m]) :
    Œº[f|m] =·µê[Œº] Œº[g|m] := by
  by_cases hm : m ‚â§ m‚ÇÄ; swap; ¬∑ simp_rw [condExp_of_not_le hm]; rfl
  by_cases hŒºm : SigmaFinite (Œº.trim hm); swap; ¬∑ simp_rw [condExp_of_not_sigmaFinite hm hŒºm]; rfl
  refine (condExp_ae_eq_condExpL1 hm f).trans ((condExp_ae_eq_condExpL1 hm g).trans ?_).symm
  rw [‚Üê Lp.ext_iff]
  have hn_eq : ‚àÄ n, condExpL1 hm Œº (gs n) = condExpL1 hm Œº (fs n) := by
    intro n
    ext1
    refine (condExp_ae_eq_condExpL1 hm (gs n)).symm.trans ((hfg n).symm.trans ?_)
    exact condExp_ae_eq_condExpL1 hm (fs n)
  have hcond_fs : Tendsto (fun n => condExpL1 hm Œº (fs n)) atTop (ùìù (condExpL1 hm Œº f)) :=
    tendsto_condExpL1_of_dominated_convergence hm _ (fun n => (hfs_int n).1) h_int_bound_fs
      hfs_bound hfs
  have hcond_gs : Tendsto (fun n => condExpL1 hm Œº (gs n)) atTop (ùìù (condExpL1 hm Œº g)) :=
    tendsto_condExpL1_of_dominated_convergence hm _ (fun n => (hgs_int n).1) h_int_bound_gs
      hgs_bound hgs
  exact tendsto_nhds_unique_of_eventuallyEq hcond_gs hcond_fs (Eventually.of_forall hn_eq)

@[deprecated (since := "2025-01-21")] alias tendsto_condexp_unique := tendsto_condExp_unique

variable [OrderedSMul ‚Ñù E]

lemma condExp_mono (hf : Integrable f Œº) (hg : Integrable g Œº) (hfg : f ‚â§·µê[Œº] g) :
    Œº[f|m] ‚â§·µê[Œº] Œº[g|m] := by
  by_cases hm : m ‚â§ m‚ÇÄ
  swap; ¬∑ simp_rw [condExp_of_not_le hm]; rfl
  by_cases hŒºm : SigmaFinite (Œº.trim hm)
  swap; ¬∑ simp_rw [condExp_of_not_sigmaFinite hm hŒºm]; rfl
  exact (condExp_ae_eq_condExpL1 hm _).trans_le
    ((condExpL1_mono hf hg hfg).trans_eq (condExp_ae_eq_condExpL1 hm _).symm)

lemma condExp_nonneg (hf : 0 ‚â§·µê[Œº] f) : 0 ‚â§·µê[Œº] Œº[f|m] := by
  by_cases hfint : Integrable f Œº
  ¬∑ rw [(condExp_zero.symm : (0 : Œ± ‚Üí E) = Œº[0|m])]
    exact condExp_mono (integrable_zero _ _ _) hfint hf
  ¬∑ rw [condExp_undef hfint]

lemma condExp_nonpos (hf : f ‚â§·µê[Œº] 0) : Œº[f|m] ‚â§·µê[Œº] 0 := by
  by_cases hfint : Integrable f Œº
  ¬∑ rw [(condExp_zero.symm : (0 : Œ± ‚Üí E) = Œº[0|m])]
    exact condExp_mono hfint (integrable_zero _ _ _) hf
  ¬∑ rw [condExp_undef hfint]

@[deprecated (since := "2025-01-21")] alias condexp_mono := condExp_mono
@[deprecated (since := "2025-01-21")] alias condexp_nonneg := condExp_nonneg
@[deprecated (since := "2025-01-21")] alias condexp_nonpos := condExp_nonpos

end NormedLatticeAddCommGroup
end MeasureTheory
