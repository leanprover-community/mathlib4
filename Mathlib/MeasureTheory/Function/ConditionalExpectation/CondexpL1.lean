/-
Copyright (c) 2021 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne

! This file was ported from Lean 3 source module measure_theory.function.conditional_expectation.condexp_L1
! leanprover-community/mathlib commit d8bbb04e2d2a44596798a9207ceefc0fb236e41e
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.MeasureTheory.Function.ConditionalExpectation.CondexpL2

/-! # Conditional expectation in L1

This file contains two more steps of the construction of the conditional expectation, which is
completed in `measure_theory.function.conditional_expectation.basic`. See that file for a
description of the full process.

The contitional expectation of an `L¬≤` function is defined in
`measure_theory.function.conditional_expectation.condexp_L2`. In this file, we perform two steps.
* Show that the conditional expectation of the indicator of a measurable set with finite measure
  is integrable and define a map `set Œ± ‚Üí (E ‚ÜíL[‚Ñù] (Œ± ‚Üí‚ÇÅ[Œº] E))` which to a set associates a linear
  map. That linear map sends `x ‚àà E` to the conditional expectation of the indicator of the set
  with value `x`.
* Extend that map to `condexp_L1_clm : (Œ± ‚Üí‚ÇÅ[Œº] E) ‚ÜíL[‚Ñù] (Œ± ‚Üí‚ÇÅ[Œº] E)`. This is done using the same
  construction as the Bochner integral (see the file `measure_theory/integral/set_to_L1`).

## Main definitions

* `condexp_L1`: Conditional expectation of a function as a linear map from `L1` to itself.

-/


noncomputable section

open TopologicalSpace MeasureTheory.Lp Filter ContinuousLinearMap

open scoped NNReal ENNReal Topology BigOperators MeasureTheory

namespace MeasureTheory

variable {Œ± Œ≤ F F' G G' ùïú : Type _} {p : ‚Ñù‚â•0‚àû} [IsROrC ùïú]
  -- ùïú for ‚Ñù or ‚ÑÇ
  -- F for a Lp submodule
  [NormedAddCommGroup F]
  [NormedSpace ùïú F]
  -- F' for integrals on a Lp submodule
  [NormedAddCommGroup F']
  [NormedSpace ùïú F'] [NormedSpace ‚Ñù F'] [CompleteSpace F']
  -- G for a Lp add_subgroup
  [NormedAddCommGroup G]
  -- G' for integrals on a Lp add_subgroup
  [NormedAddCommGroup G']
  [NormedSpace ‚Ñù G'] [CompleteSpace G']

section CondexpInd

/-! ## Conditional expectation of an indicator as a continuous linear map.

The goal of this section is to build
`condexp_ind (hm : m ‚â§ m0) (Œº : measure Œ±) (s : set s) : G ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] G`, which
takes `x : G` to the conditional expectation of the indicator of the set `s` with value `x`,
seen as an element of `Œ± ‚Üí‚ÇÅ[Œº] G`.
-/


variable {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} {s t : Set Œ±} [NormedSpace ‚Ñù G]

section CondexpIndL1Fin

/-- Conditional expectation of the indicator of a measurable set with finite measure,
as a function in L1. -/
def condexpIndL1Fin (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)] (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû)
    (x : G) : Œ± ‚Üí‚ÇÅ[Œº] G :=
  (integrable_condexpIndSmul hm hs hŒºs x).toL1 _
#align measure_theory.condexp_ind_L1_fin MeasureTheory.condexpIndL1Fin

theorem condexpIndL1Fin_ae_eq_condexpIndSmul (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)]
    (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : G) :
    condexpIndL1Fin hm hs hŒºs x =·µê[Œº] condexpIndSmul hm hs hŒºs x :=
  (integrable_condexpIndSmul hm hs hŒºs x).coeFn_toL1
#align measure_theory.condexp_ind_L1_fin_ae_eq_condexp_ind_smul MeasureTheory.condexpIndL1Fin_ae_eq_condexpIndSmul

variable {hm : m ‚â§ m0} [SigmaFinite (Œº.trim hm)]

theorem condexpIndL1Fin_add (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x y : G) :
    condexpIndL1Fin hm hs hŒºs (x + y) = condexpIndL1Fin hm hs hŒºs x + condexpIndL1Fin hm hs hŒºs y :=
  by
  ext1
  refine' (mem_‚Ñíp.coe_fn_to_Lp _).trans _
  refine' eventually_eq.trans _ (Lp.coe_fn_add _ _).symm
  refine'
    eventually_eq.trans _
      (eventually_eq.add (mem_‚Ñíp.coe_fn_to_Lp _).symm (mem_‚Ñíp.coe_fn_to_Lp _).symm)
  rw [condexp_ind_smul_add]
  refine' (Lp.coe_fn_add _ _).trans (eventually_of_forall fun a => _)
  rfl
#align measure_theory.condexp_ind_L1_fin_add MeasureTheory.condexpIndL1Fin_add

theorem condexpIndL1Fin_smul (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : ‚Ñù) (x : G) :
    condexpIndL1Fin hm hs hŒºs (c ‚Ä¢ x) = c ‚Ä¢ condexpIndL1Fin hm hs hŒºs x :=
  by
  ext1
  refine' (mem_‚Ñíp.coe_fn_to_Lp _).trans _
  refine' eventually_eq.trans _ (Lp.coe_fn_smul _ _).symm
  rw [condexp_ind_smul_smul hs hŒºs c x]
  refine' (Lp.coe_fn_smul _ _).trans _
  refine' (condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm hs hŒºs x).mono fun y hy => _
  rw [Pi.smul_apply, Pi.smul_apply, hy]
#align measure_theory.condexp_ind_L1_fin_smul MeasureTheory.condexpIndL1Fin_smul

theorem condexpIndL1Fin_smul' [NormedSpace ‚Ñù F] [SMulCommClass ‚Ñù ùïú F] (hs : MeasurableSet s)
    (hŒºs : Œº s ‚â† ‚àû) (c : ùïú) (x : F) :
    condexpIndL1Fin hm hs hŒºs (c ‚Ä¢ x) = c ‚Ä¢ condexpIndL1Fin hm hs hŒºs x :=
  by
  ext1
  refine' (mem_‚Ñíp.coe_fn_to_Lp _).trans _
  refine' eventually_eq.trans _ (Lp.coe_fn_smul _ _).symm
  rw [condexp_ind_smul_smul' hs hŒºs c x]
  refine' (Lp.coe_fn_smul _ _).trans _
  refine' (condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm hs hŒºs x).mono fun y hy => _
  rw [Pi.smul_apply, Pi.smul_apply, hy]
#align measure_theory.condexp_ind_L1_fin_smul' MeasureTheory.condexpIndL1Fin_smul'

theorem norm_condexpIndL1Fin_le (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : G) :
    ‚ÄñcondexpIndL1Fin hm hs hŒºs x‚Äñ ‚â§ (Œº s).toReal * ‚Äñx‚Äñ :=
  by
  have : 0 ‚â§ ‚à´ a : Œ±, ‚Äñcondexp_ind_L1_fin hm hs hŒºs x a‚Äñ ‚àÇŒº :=
    integral_nonneg fun a => norm_nonneg _
  rw [L1.norm_eq_integral_norm, ‚Üê ENNReal.toReal_ofReal (norm_nonneg x), ‚Üê ENNReal.toReal_mul, ‚Üê
    ENNReal.toReal_ofReal this,
    ENNReal.toReal_le_toReal ENNReal.ofReal_ne_top (ENNReal.mul_ne_top hŒºs ENNReal.ofReal_ne_top),
    of_real_integral_norm_eq_lintegral_nnnorm]
  swap; ¬∑ rw [‚Üê mem_‚Ñíp_one_iff_integrable]; exact Lp.mem_‚Ñíp _
  have h_eq :
    ‚à´‚Åª a, ‚Äñcondexp_ind_L1_fin hm hs hŒºs x a‚Äñ‚Çä ‚àÇŒº = ‚à´‚Åª a, ‚Äñcondexp_ind_smul hm hs hŒºs x a‚Äñ‚Çä ‚àÇŒº :=
    by
    refine' lintegral_congr_ae _
    refine' (condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm hs hŒºs x).mono fun z hz => _
    dsimp only
    rw [hz]
  rw [h_eq, ofReal_norm_eq_coe_nnnorm]
  exact lintegral_nnnorm_condexp_ind_smul_le hm hs hŒºs x
#align measure_theory.norm_condexp_ind_L1_fin_le MeasureTheory.norm_condexpIndL1Fin_le

theorem condexpIndL1Fin_disjoint_union (hs : MeasurableSet s) (ht : MeasurableSet t) (hŒºs : Œº s ‚â† ‚àû)
    (hŒºt : Œº t ‚â† ‚àû) (hst : s ‚à© t = ‚àÖ) (x : G) :
    condexpIndL1Fin hm (hs.union ht)
        ((measure_union_le s t).trans_lt
            (lt_top_iff_ne_top.mpr (ENNReal.add_ne_top.mpr ‚ü®hŒºs, hŒºt‚ü©))).Ne
        x =
      condexpIndL1Fin hm hs hŒºs x + condexpIndL1Fin hm ht hŒºt x :=
  by
  ext1
  have hŒºst :=
    ((measure_union_le s t).trans_lt (lt_top_iff_ne_top.mpr (ennreal.add_ne_top.mpr ‚ü®hŒºs, hŒºt‚ü©))).Ne
  refine' (condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm (hs.union ht) hŒºst x).trans _
  refine' eventually_eq.trans _ (Lp.coe_fn_add _ _).symm
  have hs_eq := condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm hs hŒºs x
  have ht_eq := condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm ht hŒºt x
  refine' eventually_eq.trans _ (eventually_eq.add hs_eq.symm ht_eq.symm)
  rw [condexp_ind_smul]
  rw [indicator_const_Lp_disjoint_union hs ht hŒºs hŒºt hst (1 : ‚Ñù)]
  rw [(condexp_L2 ‚Ñù hm).map_add]
  push_cast
  rw [((to_span_singleton ‚Ñù x).compLpL 2 Œº).map_add]
  refine' (Lp.coe_fn_add _ _).trans _
  refine' eventually_of_forall fun y => _
  rfl
#align measure_theory.condexp_ind_L1_fin_disjoint_union MeasureTheory.condexpIndL1Fin_disjoint_union

end CondexpIndL1Fin

open scoped Classical

section CondexpIndL1

/-- Conditional expectation of the indicator of a set, as a function in L1. Its value for sets
which are not both measurable and of finite measure is not used: we set it to 0. -/
def condexpIndL1 {m m0 : MeasurableSpace Œ±} (hm : m ‚â§ m0) (Œº : Measure Œ±) (s : Set Œ±)
    [SigmaFinite (Œº.trim hm)] (x : G) : Œ± ‚Üí‚ÇÅ[Œº] G :=
  if hs : MeasurableSet s ‚àß Œº s ‚â† ‚àû then condexpIndL1Fin hm hs.1 hs.2 x else 0
#align measure_theory.condexp_ind_L1 MeasureTheory.condexpIndL1

variable {hm : m ‚â§ m0} [SigmaFinite (Œº.trim hm)]

theorem condexpIndL1_of_measurableSet_of_measure_ne_top (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû)
    (x : G) : condexpIndL1 hm Œº s x = condexpIndL1Fin hm hs hŒºs x := by
  simp only [condexp_ind_L1, And.intro hs hŒºs, dif_pos, Ne.def, not_false_iff, and_self_iff]
#align measure_theory.condexp_ind_L1_of_measurable_set_of_measure_ne_top MeasureTheory.condexpIndL1_of_measurableSet_of_measure_ne_top

theorem condexpIndL1_of_measure_eq_top (hŒºs : Œº s = ‚àû) (x : G) : condexpIndL1 hm Œº s x = 0 := by
  simp only [condexp_ind_L1, hŒºs, eq_self_iff_true, not_true, Ne.def, dif_neg, not_false_iff,
    and_false_iff]
#align measure_theory.condexp_ind_L1_of_measure_eq_top MeasureTheory.condexpIndL1_of_measure_eq_top

theorem condexpIndL1_of_not_measurableSet (hs : ¬¨MeasurableSet s) (x : G) :
    condexpIndL1 hm Œº s x = 0 := by
  simp only [condexp_ind_L1, hs, dif_neg, not_false_iff, false_and_iff]
#align measure_theory.condexp_ind_L1_of_not_measurable_set MeasureTheory.condexpIndL1_of_not_measurableSet

theorem condexpIndL1_add (x y : G) :
    condexpIndL1 hm Œº s (x + y) = condexpIndL1 hm Œº s x + condexpIndL1 hm Œº s y :=
  by
  by_cases hs : MeasurableSet s
  swap; ¬∑ simp_rw [condexp_ind_L1_of_not_measurable_set hs]; rw [zero_add]
  by_cases hŒºs : Œº s = ‚àû
  ¬∑ simp_rw [condexp_ind_L1_of_measure_eq_top hŒºs]; rw [zero_add]
  ¬∑ simp_rw [condexp_ind_L1_of_measurable_set_of_measure_ne_top hs hŒºs]
    exact condexp_ind_L1_fin_add hs hŒºs x y
#align measure_theory.condexp_ind_L1_add MeasureTheory.condexpIndL1_add

theorem condexpIndL1_smul (c : ‚Ñù) (x : G) :
    condexpIndL1 hm Œº s (c ‚Ä¢ x) = c ‚Ä¢ condexpIndL1 hm Œº s x :=
  by
  by_cases hs : MeasurableSet s
  swap; ¬∑ simp_rw [condexp_ind_L1_of_not_measurable_set hs]; rw [smul_zero]
  by_cases hŒºs : Œº s = ‚àû
  ¬∑ simp_rw [condexp_ind_L1_of_measure_eq_top hŒºs]; rw [smul_zero]
  ¬∑ simp_rw [condexp_ind_L1_of_measurable_set_of_measure_ne_top hs hŒºs]
    exact condexp_ind_L1_fin_smul hs hŒºs c x
#align measure_theory.condexp_ind_L1_smul MeasureTheory.condexpIndL1_smul

theorem condexpIndL1_smul' [NormedSpace ‚Ñù F] [SMulCommClass ‚Ñù ùïú F] (c : ùïú) (x : F) :
    condexpIndL1 hm Œº s (c ‚Ä¢ x) = c ‚Ä¢ condexpIndL1 hm Œº s x :=
  by
  by_cases hs : MeasurableSet s
  swap; ¬∑ simp_rw [condexp_ind_L1_of_not_measurable_set hs]; rw [smul_zero]
  by_cases hŒºs : Œº s = ‚àû
  ¬∑ simp_rw [condexp_ind_L1_of_measure_eq_top hŒºs]; rw [smul_zero]
  ¬∑ simp_rw [condexp_ind_L1_of_measurable_set_of_measure_ne_top hs hŒºs]
    exact condexp_ind_L1_fin_smul' hs hŒºs c x
#align measure_theory.condexp_ind_L1_smul' MeasureTheory.condexpIndL1_smul'

theorem norm_condexpIndL1_le (x : G) : ‚ÄñcondexpIndL1 hm Œº s x‚Äñ ‚â§ (Œº s).toReal * ‚Äñx‚Äñ :=
  by
  by_cases hs : MeasurableSet s
  swap;
  ¬∑ simp_rw [condexp_ind_L1_of_not_measurable_set hs]; rw [Lp.norm_zero]
    exact mul_nonneg ENNReal.toReal_nonneg (norm_nonneg _)
  by_cases hŒºs : Œº s = ‚àû
  ¬∑ rw [condexp_ind_L1_of_measure_eq_top hŒºs x, Lp.norm_zero]
    exact mul_nonneg ENNReal.toReal_nonneg (norm_nonneg _)
  ¬∑ rw [condexp_ind_L1_of_measurable_set_of_measure_ne_top hs hŒºs x]
    exact norm_condexp_ind_L1_fin_le hs hŒºs x
#align measure_theory.norm_condexp_ind_L1_le MeasureTheory.norm_condexpIndL1_le

theorem continuous_condexpIndL1 : Continuous fun x : G => condexpIndL1 hm Œº s x :=
  continuous_of_linear_of_bound condexpIndL1_add condexpIndL1_smul norm_condexpIndL1_le
#align measure_theory.continuous_condexp_ind_L1 MeasureTheory.continuous_condexpIndL1

theorem condexpIndL1_disjoint_union (hs : MeasurableSet s) (ht : MeasurableSet t) (hŒºs : Œº s ‚â† ‚àû)
    (hŒºt : Œº t ‚â† ‚àû) (hst : s ‚à© t = ‚àÖ) (x : G) :
    condexpIndL1 hm Œº (s ‚à™ t) x = condexpIndL1 hm Œº s x + condexpIndL1 hm Œº t x :=
  by
  have hŒºst : Œº (s ‚à™ t) ‚â† ‚àû :=
    ((measure_union_le s t).trans_lt (lt_top_iff_ne_top.mpr (ennreal.add_ne_top.mpr ‚ü®hŒºs, hŒºt‚ü©))).Ne
  rw [condexp_ind_L1_of_measurable_set_of_measure_ne_top hs hŒºs x,
    condexp_ind_L1_of_measurable_set_of_measure_ne_top ht hŒºt x,
    condexp_ind_L1_of_measurable_set_of_measure_ne_top (hs.union ht) hŒºst x]
  exact condexp_ind_L1_fin_disjoint_union hs ht hŒºs hŒºt hst x
#align measure_theory.condexp_ind_L1_disjoint_union MeasureTheory.condexpIndL1_disjoint_union

end CondexpIndL1

/-- Conditional expectation of the indicator of a set, as a linear map from `G` to L1. -/
def condexpInd {m m0 : MeasurableSpace Œ±} (hm : m ‚â§ m0) (Œº : Measure Œ±) [SigmaFinite (Œº.trim hm)]
    (s : Set Œ±) : G ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] G
    where
  toFun := condexpIndL1 hm Œº s
  map_add' := condexpIndL1_add
  map_smul' := condexpIndL1_smul
  cont := continuous_condexpIndL1
#align measure_theory.condexp_ind MeasureTheory.condexpInd

theorem condexpInd_ae_eq_condexpIndSmul (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)]
    (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : G) :
    condexpInd hm Œº s x =·µê[Œº] condexpIndSmul hm hs hŒºs x :=
  by
  refine' eventually_eq.trans _ (condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm hs hŒºs x)
  simp [condexp_ind, condexp_ind_L1, hs, hŒºs]
#align measure_theory.condexp_ind_ae_eq_condexp_ind_smul MeasureTheory.condexpInd_ae_eq_condexpIndSmul

variable {hm : m ‚â§ m0} [SigmaFinite (Œº.trim hm)]

theorem aEStronglyMeasurable'_condexpInd (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : G) :
    AEStronglyMeasurable' m (condexpInd hm Œº s x) Œº :=
  AEStronglyMeasurable'.congr (aEStronglyMeasurable'_condexpIndSmul hm hs hŒºs x)
    (condexpInd_ae_eq_condexpIndSmul hm hs hŒºs x).symm
#align measure_theory.ae_strongly_measurable'_condexp_ind MeasureTheory.aEStronglyMeasurable'_condexpInd

@[simp]
theorem condexpInd_empty : condexpInd hm Œº ‚àÖ = (0 : G ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] G) :=
  by
  ext1
  ext1
  refine' (condexp_ind_ae_eq_condexp_ind_smul hm MeasurableSet.empty (by simp) x).trans _
  rw [condexp_ind_smul_empty]
  refine' (Lp.coe_fn_zero G 2 Œº).trans _
  refine' eventually_eq.trans _ (Lp.coe_fn_zero G 1 Œº).symm
  rfl
#align measure_theory.condexp_ind_empty MeasureTheory.condexpInd_empty

theorem condexpInd_smul' [NormedSpace ‚Ñù F] [SMulCommClass ‚Ñù ùïú F] (c : ùïú) (x : F) :
    condexpInd hm Œº s (c ‚Ä¢ x) = c ‚Ä¢ condexpInd hm Œº s x :=
  condexpIndL1_smul' c x
#align measure_theory.condexp_ind_smul' MeasureTheory.condexpInd_smul'

theorem norm_condexpInd_apply_le (x : G) : ‚ÄñcondexpInd hm Œº s x‚Äñ ‚â§ (Œº s).toReal * ‚Äñx‚Äñ :=
  norm_condexpIndL1_le x
#align measure_theory.norm_condexp_ind_apply_le MeasureTheory.norm_condexpInd_apply_le

theorem norm_condexpInd_le : ‚Äñ(condexpInd hm Œº s : G ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] G)‚Äñ ‚â§ (Œº s).toReal :=
  ContinuousLinearMap.op_norm_le_bound _ ENNReal.toReal_nonneg norm_condexpInd_apply_le
#align measure_theory.norm_condexp_ind_le MeasureTheory.norm_condexpInd_le

theorem condexpInd_disjoint_union_apply (hs : MeasurableSet s) (ht : MeasurableSet t)
    (hŒºs : Œº s ‚â† ‚àû) (hŒºt : Œº t ‚â† ‚àû) (hst : s ‚à© t = ‚àÖ) (x : G) :
    condexpInd hm Œº (s ‚à™ t) x = condexpInd hm Œº s x + condexpInd hm Œº t x :=
  condexpIndL1_disjoint_union hs ht hŒºs hŒºt hst x
#align measure_theory.condexp_ind_disjoint_union_apply MeasureTheory.condexpInd_disjoint_union_apply

theorem condexpInd_disjoint_union (hs : MeasurableSet s) (ht : MeasurableSet t) (hŒºs : Œº s ‚â† ‚àû)
    (hŒºt : Œº t ‚â† ‚àû) (hst : s ‚à© t = ‚àÖ) :
    (condexpInd hm Œº (s ‚à™ t) : G ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] G) = condexpInd hm Œº s + condexpInd hm Œº t := by
  ext1; push_cast ; exact condexp_ind_disjoint_union_apply hs ht hŒºs hŒºt hst x
#align measure_theory.condexp_ind_disjoint_union MeasureTheory.condexpInd_disjoint_union

variable (G)

theorem dominatedFinMeasAdditive_condexpInd (hm : m ‚â§ m0) (Œº : Measure Œ±)
    [SigmaFinite (Œº.trim hm)] :
    DominatedFinMeasAdditive Œº (condexpInd hm Œº : Set Œ± ‚Üí G ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] G) 1 :=
  ‚ü®fun s t => condexpInd_disjoint_union, fun s _ _ => norm_condexpInd_le.trans (one_mul _).symm.le‚ü©
#align measure_theory.dominated_fin_meas_additive_condexp_ind MeasureTheory.dominatedFinMeasAdditive_condexpInd

variable {G}

theorem set_integral_condexpInd (hs : measurable_set[m] s) (ht : MeasurableSet t) (hŒºs : Œº s ‚â† ‚àû)
    (hŒºt : Œº t ‚â† ‚àû) (x : G') : ‚à´ a in s, condexpInd hm Œº t x a ‚àÇŒº = (Œº (t ‚à© s)).toReal ‚Ä¢ x :=
  calc
    ‚à´ a in s, condexpInd hm Œº t x a ‚àÇŒº = ‚à´ a in s, condexpIndSmul hm ht hŒºt x a ‚àÇŒº :=
      set_integral_congr_ae (hm s hs)
        ((condexpInd_ae_eq_condexpIndSmul hm ht hŒºt x).mono fun x hx hxs => hx)
    _ = (Œº (t ‚à© s)).toReal ‚Ä¢ x := set_integral_condexpIndSmul hs ht hŒºs hŒºt x
#align measure_theory.set_integral_condexp_ind MeasureTheory.set_integral_condexpInd

theorem condexpInd_of_measurable (hs : measurable_set[m] s) (hŒºs : Œº s ‚â† ‚àû) (c : G) :
    condexpInd hm Œº s c = indicatorConstLp 1 (hm s hs) hŒºs c :=
  by
  ext1
  refine' eventually_eq.trans _ indicator_const_Lp_coe_fn.symm
  refine' (condexp_ind_ae_eq_condexp_ind_smul hm (hm s hs) hŒºs c).trans _
  refine' (condexp_ind_smul_ae_eq_smul hm (hm s hs) hŒºs c).trans _
  rw [Lp_meas_coe, condexp_L2_indicator_of_measurable hm hs hŒºs (1 : ‚Ñù)]
  refine' (@indicator_const_Lp_coe_fn Œ± _ _ 2 Œº _ s (hm s hs) hŒºs (1 : ‚Ñù)).mono fun x hx => _
  dsimp only
  rw [hx]
  by_cases hx_mem : x ‚àà s <;> simp [hx_mem]
#align measure_theory.condexp_ind_of_measurable MeasureTheory.condexpInd_of_measurable

theorem condexpInd_nonneg {E} [NormedLatticeAddCommGroup E] [NormedSpace ‚Ñù E] [OrderedSMul ‚Ñù E]
    (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : E) (hx : 0 ‚â§ x) : 0 ‚â§ condexpInd hm Œº s x :=
  by
  rw [‚Üê coe_fn_le]
  refine' eventually_le.trans_eq _ (condexp_ind_ae_eq_condexp_ind_smul hm hs hŒºs x).symm
  exact (coe_fn_zero E 1 Œº).trans_le (condexp_ind_smul_nonneg hs hŒºs x hx)
#align measure_theory.condexp_ind_nonneg MeasureTheory.condexpInd_nonneg

end CondexpInd

section CondexpL1

variable {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} {hm : m ‚â§ m0} [SigmaFinite (Œº.trim hm)]
  {f g : Œ± ‚Üí F'} {s : Set Œ±}

/-- Conditional expectation of a function as a linear map from `Œ± ‚Üí‚ÇÅ[Œº] F'` to itself. -/
def condexpL1Clm (hm : m ‚â§ m0) (Œº : Measure Œ±) [SigmaFinite (Œº.trim hm)] :
    (Œ± ‚Üí‚ÇÅ[Œº] F') ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] F' :=
  L1.setToL1 (dominatedFinMeasAdditive_condexpInd F' hm Œº)
#align measure_theory.condexp_L1_clm MeasureTheory.condexpL1Clm

theorem condexpL1Clm_smul (c : ùïú) (f : Œ± ‚Üí‚ÇÅ[Œº] F') :
    condexpL1Clm hm Œº (c ‚Ä¢ f) = c ‚Ä¢ condexpL1Clm hm Œº f :=
  L1.setToL1_smul (dominatedFinMeasAdditive_condexpInd F' hm Œº) (fun c s x => condexpInd_smul' c x)
    c f
#align measure_theory.condexp_L1_clm_smul MeasureTheory.condexpL1Clm_smul

theorem condexpL1Clm_indicatorConstLp (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : F') :
    (condexpL1Clm hm Œº) (indicatorConstLp 1 hs hŒºs x) = condexpInd hm Œº s x :=
  L1.setToL1_indicatorConstLp (dominatedFinMeasAdditive_condexpInd F' hm Œº) hs hŒºs x
#align measure_theory.condexp_L1_clm_indicator_const_Lp MeasureTheory.condexpL1Clm_indicatorConstLp

theorem condexpL1Clm_indicatorConst (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : F') :
    (condexpL1Clm hm Œº) ‚Üë(simpleFunc.indicatorConst 1 hs hŒºs x) = condexpInd hm Œº s x := by
  rw [Lp.simple_func.coe_indicator_const]; exact condexp_L1_clm_indicator_const_Lp hs hŒºs x
#align measure_theory.condexp_L1_clm_indicator_const MeasureTheory.condexpL1Clm_indicatorConst

/-- Auxiliary lemma used in the proof of `set_integral_condexp_L1_clm`. -/
theorem set_integral_condexpL1Clm_of_measure_ne_top (f : Œ± ‚Üí‚ÇÅ[Œº] F') (hs : measurable_set[m] s)
    (hŒºs : Œº s ‚â† ‚àû) : ‚à´ x in s, condexpL1Clm hm Œº f x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº :=
  by
  refine'
    Lp.induction ENNReal.one_ne_top
      (fun f : Œ± ‚Üí‚ÇÅ[Œº] F' => ‚à´ x in s, condexp_L1_clm hm Œº f x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº) _ _
      (isClosed_eq _ _) f
  ¬∑ intro x t ht hŒºt
    simp_rw [condexp_L1_clm_indicator_const ht hŒºt.ne x]
    rw [Lp.simple_func.coe_indicator_const, set_integral_indicator_const_Lp (hm _ hs)]
    exact set_integral_condexp_ind hs ht hŒºs hŒºt.ne x
  ¬∑ intro f g hf_Lp hg_Lp hfg_disj hf hg
    simp_rw [(condexp_L1_clm hm Œº).map_add]
    rw [set_integral_congr_ae (hm s hs)
        ((Lp.coe_fn_add (condexp_L1_clm hm Œº (hf_Lp.to_Lp f))
              (condexp_L1_clm hm Œº (hg_Lp.to_Lp g))).mono
          fun x hx hxs => hx)]
    rw [set_integral_congr_ae (hm s hs)
        ((Lp.coe_fn_add (hf_Lp.to_Lp f) (hg_Lp.to_Lp g)).mono fun x hx hxs => hx)]
    simp_rw [Pi.add_apply]
    rw [integral_add (L1.integrable_coe_fn _).IntegrableOn (L1.integrable_coe_fn _).IntegrableOn,
      integral_add (L1.integrable_coe_fn _).IntegrableOn (L1.integrable_coe_fn _).IntegrableOn, hf,
      hg]
  ¬∑ exact (continuous_set_integral s).comp (condexp_L1_clm hm Œº).Continuous
  ¬∑ exact continuous_set_integral s
#align measure_theory.set_integral_condexp_L1_clm_of_measure_ne_top MeasureTheory.set_integral_condexpL1Clm_of_measure_ne_top

/-- The integral of the conditional expectation `condexp_L1_clm` over an `m`-measurable set is equal
to the integral of `f` on that set. See also `set_integral_condexp`, the similar statement for
`condexp`. -/
theorem set_integral_condexpL1Clm (f : Œ± ‚Üí‚ÇÅ[Œº] F') (hs : measurable_set[m] s) :
    ‚à´ x in s, condexpL1Clm hm Œº f x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº :=
  by
  let S := spanning_sets (Œº.trim hm)
  have hS_meas : ‚àÄ i, measurable_set[m] (S i) := measurable_spanning_sets (Œº.trim hm)
  have hS_meas0 : ‚àÄ i, MeasurableSet (S i) := fun i => hm _ (hS_meas i)
  have hs_eq : s = ‚ãÉ i, S i ‚à© s := by
    simp_rw [Set.inter_comm]
    rw [‚Üê Set.inter_iUnion, Union_spanning_sets (Œº.trim hm), Set.inter_univ]
  have hS_finite : ‚àÄ i, Œº (S i ‚à© s) < ‚àû :=
    by
    refine' fun i => (measure_mono (Set.inter_subset_left _ _)).trans_lt _
    have hS_finite_trim := measure_spanning_sets_lt_top (Œº.trim hm) i
    rwa [trim_measurable_set_eq hm (hS_meas i)] at hS_finite_trim 
  have h_mono : Monotone fun i => S i ‚à© s :=
    by
    intro i j hij x
    simp_rw [Set.mem_inter_iff]
    exact fun h => ‚ü®monotone_spanning_sets (Œº.trim hm) hij h.1, h.2‚ü©
  have h_eq_forall :
    (fun i => ‚à´ x in S i ‚à© s, condexp_L1_clm hm Œº f x ‚àÇŒº) = fun i => ‚à´ x in S i ‚à© s, f x ‚àÇŒº :=
    funext fun i =>
      set_integral_condexp_L1_clm_of_measure_ne_top f (@MeasurableSet.inter Œ± m _ _ (hS_meas i) hs)
        (hS_finite i).Ne
  have h_right : tendsto (fun i => ‚à´ x in S i ‚à© s, f x ‚àÇŒº) at_top (ùìù (‚à´ x in s, f x ‚àÇŒº)) :=
    by
    have h :=
      tendsto_set_integral_of_monotone (fun i => (hS_meas0 i).inter (hm s hs)) h_mono
        (L1.integrable_coe_fn f).IntegrableOn
    rwa [‚Üê hs_eq] at h 
  have h_left :
    tendsto (fun i => ‚à´ x in S i ‚à© s, condexp_L1_clm hm Œº f x ‚àÇŒº) at_top
      (ùìù (‚à´ x in s, condexp_L1_clm hm Œº f x ‚àÇŒº)) :=
    by
    have h :=
      tendsto_set_integral_of_monotone (fun i => (hS_meas0 i).inter (hm s hs)) h_mono
        (L1.integrable_coe_fn (condexp_L1_clm hm Œº f)).IntegrableOn
    rwa [‚Üê hs_eq] at h 
  rw [h_eq_forall] at h_left 
  exact tendsto_nhds_unique h_left h_right
#align measure_theory.set_integral_condexp_L1_clm MeasureTheory.set_integral_condexpL1Clm

theorem aEStronglyMeasurable'_condexpL1Clm (f : Œ± ‚Üí‚ÇÅ[Œº] F') :
    AEStronglyMeasurable' m (condexpL1Clm hm Œº f) Œº :=
  by
  refine'
    Lp.induction ENNReal.one_ne_top
      (fun f : Œ± ‚Üí‚ÇÅ[Œº] F' => ae_strongly_measurable' m (condexp_L1_clm hm Œº f) Œº) _ _ _ f
  ¬∑ intro c s hs hŒºs
    rw [condexp_L1_clm_indicator_const hs hŒºs.ne c]
    exact ae_strongly_measurable'_condexp_ind hs hŒºs.ne c
  ¬∑ intro f g hf hg h_disj hfm hgm
    rw [(condexp_L1_clm hm Œº).map_add]
    refine' ae_strongly_measurable'.congr _ (coe_fn_add _ _).symm
    exact ae_strongly_measurable'.add hfm hgm
  ¬∑ have :
      {f : Lp F' 1 Œº | ae_strongly_measurable' m (condexp_L1_clm hm Œº f) Œº} =
        condexp_L1_clm hm Œº ‚Åª¬π' {f | ae_strongly_measurable' m f Œº} :=
      by rfl
    rw [this]
    refine' IsClosed.preimage (condexp_L1_clm hm Œº).Continuous _
    exact is_closed_ae_strongly_measurable' hm
#align measure_theory.ae_strongly_measurable'_condexp_L1_clm MeasureTheory.aEStronglyMeasurable'_condexpL1Clm

theorem condexpL1Clm_lpMeas (f : lpMeas F' ‚Ñù m 1 Œº) : condexpL1Clm hm Œº (f : Œ± ‚Üí‚ÇÅ[Œº] F') = ‚Üëf :=
  by
  let g := Lp_meas_to_Lp_trim_lie F' ‚Ñù 1 Œº hm f
  have hfg : f = (Lp_meas_to_Lp_trim_lie F' ‚Ñù 1 Œº hm).symm g := by
    simp only [LinearIsometryEquiv.symm_apply_apply]
  rw [hfg]
  refine'
    @Lp.induction Œ± F' m _ 1 (Œº.trim hm) _ ENNReal.coe_ne_top
      (fun g : Œ± ‚Üí‚ÇÅ[Œº.trim hm] F' =>
        condexp_L1_clm hm Œº ((Lp_meas_to_Lp_trim_lie F' ‚Ñù 1 Œº hm).symm g : Œ± ‚Üí‚ÇÅ[Œº] F') =
          ‚Üë((Lp_meas_to_Lp_trim_lie F' ‚Ñù 1 Œº hm).symm g))
      _ _ _ g
  ¬∑ intro c s hs hŒºs
    rw [Lp.simple_func.coe_indicator_const, Lp_meas_to_Lp_trim_lie_symm_indicator hs hŒºs.ne c,
      condexp_L1_clm_indicator_const_Lp]
    exact condexp_ind_of_measurable hs ((le_trim hm).trans_lt hŒºs).Ne c
  ¬∑ intro f g hf hg hfg_disj hf_eq hg_eq
    rw [LinearIsometryEquiv.map_add]
    push_cast
    rw [map_add, hf_eq, hg_eq]
  ¬∑ refine' isClosed_eq _ _
    ¬∑ refine' (condexp_L1_clm hm Œº).Continuous.comp (continuous_induced_dom.comp _)
      exact LinearIsometryEquiv.continuous _
    ¬∑ refine' continuous_induced_dom.comp _
      exact LinearIsometryEquiv.continuous _
#align measure_theory.condexp_L1_clm_Lp_meas MeasureTheory.condexpL1Clm_lpMeas

theorem condexpL1Clm_of_aEStronglyMeasurable' (f : Œ± ‚Üí‚ÇÅ[Œº] F') (hfm : AEStronglyMeasurable' m f Œº) :
    condexpL1Clm hm Œº f = f :=
  condexpL1Clm_lpMeas (‚ü®f, hfm‚ü© : lpMeas F' ‚Ñù m 1 Œº)
#align measure_theory.condexp_L1_clm_of_ae_strongly_measurable' MeasureTheory.condexpL1Clm_of_aEStronglyMeasurable'

/-- Conditional expectation of a function, in L1. Its value is 0 if the function is not
integrable. The function-valued `condexp` should be used instead in most cases. -/
def condexpL1 (hm : m ‚â§ m0) (Œº : Measure Œ±) [SigmaFinite (Œº.trim hm)] (f : Œ± ‚Üí F') : Œ± ‚Üí‚ÇÅ[Œº] F' :=
  setToFun Œº (condexpInd hm Œº) (dominatedFinMeasAdditive_condexpInd F' hm Œº) f
#align measure_theory.condexp_L1 MeasureTheory.condexpL1

theorem condexpL1_undef (hf : ¬¨Integrable f Œº) : condexpL1 hm Œº f = 0 :=
  setToFun_undef (dominatedFinMeasAdditive_condexpInd F' hm Œº) hf
#align measure_theory.condexp_L1_undef MeasureTheory.condexpL1_undef

theorem condexpL1_eq (hf : Integrable f Œº) : condexpL1 hm Œº f = condexpL1Clm hm Œº (hf.toL1 f) :=
  setToFun_eq (dominatedFinMeasAdditive_condexpInd F' hm Œº) hf
#align measure_theory.condexp_L1_eq MeasureTheory.condexpL1_eq

@[simp]
theorem condexpL1_zero : condexpL1 hm Œº (0 : Œ± ‚Üí F') = 0 :=
  setToFun_zero _
#align measure_theory.condexp_L1_zero MeasureTheory.condexpL1_zero

@[simp]
theorem condexpL1_measure_zero (hm : m ‚â§ m0) : condexpL1 hm (0 : Measure Œ±) f = 0 :=
  setToFun_measure_zero _ rfl
#align measure_theory.condexp_L1_measure_zero MeasureTheory.condexpL1_measure_zero

theorem aEStronglyMeasurable'_condexpL1 {f : Œ± ‚Üí F'} :
    AEStronglyMeasurable' m (condexpL1 hm Œº f) Œº :=
  by
  by_cases hf : integrable f Œº
  ¬∑ rw [condexp_L1_eq hf]
    exact ae_strongly_measurable'_condexp_L1_clm _
  ¬∑ rw [condexp_L1_undef hf]
    refine' ae_strongly_measurable'.congr _ (coe_fn_zero _ _ _).symm
    exact strongly_measurable.ae_strongly_measurable' (@strongly_measurable_zero _ _ m _ _)
#align measure_theory.ae_strongly_measurable'_condexp_L1 MeasureTheory.aEStronglyMeasurable'_condexpL1

theorem condexpL1_congr_ae (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)] (h : f =·µê[Œº] g) :
    condexpL1 hm Œº f = condexpL1 hm Œº g :=
  setToFun_congr_ae _ h
#align measure_theory.condexp_L1_congr_ae MeasureTheory.condexpL1_congr_ae

theorem integrable_condexpL1 (f : Œ± ‚Üí F') : Integrable (condexpL1 hm Œº f) Œº :=
  L1.integrable_coeFn _
#align measure_theory.integrable_condexp_L1 MeasureTheory.integrable_condexpL1

/-- The integral of the conditional expectation `condexp_L1` over an `m`-measurable set is equal to
the integral of `f` on that set. See also `set_integral_condexp`, the similar statement for
`condexp`. -/
theorem set_integral_condexpL1 (hf : Integrable f Œº) (hs : measurable_set[m] s) :
    ‚à´ x in s, condexpL1 hm Œº f x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº :=
  by
  simp_rw [condexp_L1_eq hf]
  rw [set_integral_condexp_L1_clm (hf.to_L1 f) hs]
  exact set_integral_congr_ae (hm s hs) (hf.coe_fn_to_L1.mono fun x hx hxs => hx)
#align measure_theory.set_integral_condexp_L1 MeasureTheory.set_integral_condexpL1

theorem condexpL1_add (hf : Integrable f Œº) (hg : Integrable g Œº) :
    condexpL1 hm Œº (f + g) = condexpL1 hm Œº f + condexpL1 hm Œº g :=
  setToFun_add _ hf hg
#align measure_theory.condexp_L1_add MeasureTheory.condexpL1_add

theorem condexpL1_neg (f : Œ± ‚Üí F') : condexpL1 hm Œº (-f) = -condexpL1 hm Œº f :=
  setToFun_neg _ f
#align measure_theory.condexp_L1_neg MeasureTheory.condexpL1_neg

theorem condexpL1_smul (c : ùïú) (f : Œ± ‚Üí F') : condexpL1 hm Œº (c ‚Ä¢ f) = c ‚Ä¢ condexpL1 hm Œº f :=
  setToFun_smul _ (fun c _ x => condexpInd_smul' c x) c f
#align measure_theory.condexp_L1_smul MeasureTheory.condexpL1_smul

theorem condexpL1_sub (hf : Integrable f Œº) (hg : Integrable g Œº) :
    condexpL1 hm Œº (f - g) = condexpL1 hm Œº f - condexpL1 hm Œº g :=
  setToFun_sub _ hf hg
#align measure_theory.condexp_L1_sub MeasureTheory.condexpL1_sub

theorem condexpL1_of_aEStronglyMeasurable' (hfm : AEStronglyMeasurable' m f Œº)
    (hfi : Integrable f Œº) : condexpL1 hm Œº f =·µê[Œº] f :=
  by
  rw [condexp_L1_eq hfi]
  refine' eventually_eq.trans _ (integrable.coe_fn_to_L1 hfi)
  rw [condexp_L1_clm_of_ae_strongly_measurable']
  exact ae_strongly_measurable'.congr hfm (integrable.coe_fn_to_L1 hfi).symm
#align measure_theory.condexp_L1_of_ae_strongly_measurable' MeasureTheory.condexpL1_of_aEStronglyMeasurable'

theorem condexpL1_mono {E} [NormedLatticeAddCommGroup E] [CompleteSpace E] [NormedSpace ‚Ñù E]
    [OrderedSMul ‚Ñù E] {f g : Œ± ‚Üí E} (hf : Integrable f Œº) (hg : Integrable g Œº) (hfg : f ‚â§·µê[Œº] g) :
    condexpL1 hm Œº f ‚â§·µê[Œº] condexpL1 hm Œº g :=
  by
  rw [coe_fn_le]
  have h_nonneg : ‚àÄ s, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí ‚àÄ x : E, 0 ‚â§ x ‚Üí 0 ‚â§ condexp_ind hm Œº s x :=
    fun s hs hŒºs x hx => condexp_ind_nonneg hs hŒºs.Ne x hx
  exact set_to_fun_mono (dominated_fin_meas_additive_condexp_ind E hm Œº) h_nonneg hf hg hfg
#align measure_theory.condexp_L1_mono MeasureTheory.condexpL1_mono

end CondexpL1

end MeasureTheory

