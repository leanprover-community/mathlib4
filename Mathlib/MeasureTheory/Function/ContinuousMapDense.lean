/-
Copyright (c) 2021 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth
-/
import Mathlib.MeasureTheory.Measure.Regular
import Mathlib.MeasureTheory.Function.SimpleFuncDenseLp
import Mathlib.Topology.UrysohnsLemma
import Mathlib.MeasureTheory.Integral.Bochner

#align_import measure_theory.function.continuous_map_dense from "leanprover-community/mathlib"@"e0736bb5b48bdadbca19dbd857e12bee38ccfbb8"

/-!
# Approximation in L·µñ by continuous functions

This file proves that bounded continuous functions are dense in `Lp E p Œº`, for `p < ‚àû`, if the
domain `Œ±` of the functions is a normal topological space and the measure `Œº` is weakly regular.
It also proves the same results for approximation by continuous functions with compact support
when the space is locally compact and `Œº` is regular.

The result is presented in several versions. First concrete versions giving an approximation
up to `Œµ` in these various contexts, and then abstract versions stating that the topological
closure of the relevant subgroups of `Lp` are the whole space.

* `MeasureTheory.Mem‚Ñíp.exists_hasCompactSupport_snorm_sub_le` states that, in a locally compact
  space, an `‚Ñíp` function can be approximated by continuous functions with compact support,
  in the sense that `snorm (f - g) p Œº` is small.
* `MeasureTheory.Mem‚Ñíp.exists_hasCompactSupport_integral_rpow_sub_le`: same result, but expressed in
  terms of `‚à´ ‚Äñf - g‚Äñ^p`.

Versions with `Integrable` instead of `Mem‚Ñíp` are specialized to the case `p = 1`.
Versions with `boundedContinuous` instead of `HasCompactSupport` drop the locally
compact assumption and give only approximation by a bounded continuous function.

* `MeasureTheory.Lp.boundedContinuousFunction_dense`: The subgroup
  `MeasureTheory.Lp.boundedContinuousFunction` of `Lp E p Œº`, the additive subgroup of
  `Lp E p Œº` consisting of equivalence classes containing a continuous representative, is dense in
  `Lp E p Œº`.
* `BoundedContinuousFunction.toLp_denseRange`: For finite-measure `Œº`, the continuous linear
  map `BoundedContinuousFunction.toLp p Œº ùïú` from `Œ± ‚Üí·µá E` to `Lp E p Œº` has dense range.
* `ContinuousMap.toLp_denseRange`: For compact `Œ±` and finite-measure `Œº`, the continuous linear
  map `ContinuousMap.toLp p Œº ùïú` from `C(Œ±, E)` to `Lp E p Œº` has dense range.

Note that for `p = ‚àû` this result is not true:  the characteristic function of the set `[0, ‚àû)` in
`‚Ñù` cannot be continuously approximated in `L‚àû`.

The proof is in three steps.  First, since simple functions are dense in `Lp`, it suffices to prove
the result for a scalar multiple of a characteristic function of a measurable set `s`. Secondly,
since the measure `Œº` is weakly regular, the set `s` can be approximated above by an open set and
below by a closed set.  Finally, since the domain `Œ±` is normal, we use Urysohn's lemma to find a
continuous function interpolating between these two sets.

## Related results

Are you looking for a result on "directional" approximation (above or below with respect to an
order) of functions whose codomain is `‚Ñù‚â•0‚àû` or `‚Ñù`, by semicontinuous functions?  See the
Vitali-Carath√©odory theorem, in the file `Mathlib/MeasureTheory/Integral/VitaliCaratheodory.lean`.

-/


open scoped ENNReal NNReal Topology BoundedContinuousFunction

open MeasureTheory TopologicalSpace ContinuousMap Set Bornology

variable {Œ± : Type*} [MeasurableSpace Œ±] [TopologicalSpace Œ±] [T4Space Œ±] [BorelSpace Œ±]

variable {E : Type*} [NormedAddCommGroup E] {Œº : Measure Œ±} {p : ‚Ñù‚â•0‚àû}

namespace MeasureTheory

variable [NormedSpace ‚Ñù E]

/-- A variant of Urysohn's lemma, `‚Ñí^p` version, for an outer regular measure `Œº`:
consider two sets `s ‚äÜ u` which are respectively closed and open with `Œº s < ‚àû`, and a vector `c`.
Then one may find a continuous function `f` equal to `c` on `s` and to `0` outside of `u`,
bounded by `‚Äñc‚Äñ` everywhere, and such that the `‚Ñí^p` norm of `f - s.indicator (fun y ‚Ü¶ c)` is
arbitrarily small. Additionally, this function `f` belongs to `‚Ñí^p`. -/
theorem exists_continuous_snorm_sub_le_of_closed [Œº.OuterRegular] (hp : p ‚â† ‚àû) {s u : Set Œ±}
    (s_closed : IsClosed s) (u_open : IsOpen u) (hsu : s ‚äÜ u) (hs : Œº s ‚â† ‚àû) (c : E) {Œµ : ‚Ñù‚â•0‚àû}
    (hŒµ : Œµ ‚â† 0) :
    ‚àÉ f : Œ± ‚Üí E,
      Continuous f ‚àß
        snorm (fun x => f x - s.indicator (fun _y => c) x) p Œº ‚â§ Œµ ‚àß
          (‚àÄ x, ‚Äñf x‚Äñ ‚â§ ‚Äñc‚Äñ) ‚àß Function.support f ‚äÜ u ‚àß Mem‚Ñíp f p Œº := by
  obtain ‚ü®Œ∑, Œ∑_pos, hŒ∑‚ü© :
    ‚àÉ Œ∑ : ‚Ñù‚â•0, 0 < Œ∑ ‚àß ‚àÄ s : Set Œ±, Œº s ‚â§ Œ∑ ‚Üí snorm (s.indicator fun _x => c) p Œº ‚â§ Œµ
  exact exists_snorm_indicator_le hp c hŒµ
  have Œ∑pos : (0 : ‚Ñù‚â•0‚àû) < Œ∑ := ENNReal.coe_lt_coe.2 Œ∑_pos
  obtain ‚ü®V, sV, V_open, h'V, hV‚ü© : ‚àÉ (V : Set Œ±), V ‚äá s ‚àß IsOpen V ‚àß Œº V < ‚àû ‚àß Œº (V \ s) < Œ∑
  exact s_closed.measurableSet.exists_isOpen_diff_lt hs Œ∑pos.ne'
  let v := u ‚à© V
  have hsv : s ‚äÜ v := subset_inter hsu sV
  have hŒºv : Œº v < ‚àû := (measure_mono (inter_subset_right _ _)).trans_lt h'V
  obtain ‚ü®g, hgv, hgs, hg_range‚ü© :=
    exists_continuous_zero_one_of_isClosed (u_open.inter V_open).isClosed_compl s_closed
      (disjoint_compl_left_iff.2 hsv)
  -- Multiply this by `c` to get a continuous approximation to the function `f`; the key point is
  -- that this is pointwise bounded by the indicator of the set `v \ s`, which has small measure.
  have g_norm : ‚àÄ x, ‚Äñg x‚Äñ = g x := fun x => by rw [Real.norm_eq_abs, abs_of_nonneg (hg_range x).1]
  have gc_bd0 : ‚àÄ x, ‚Äñg x ‚Ä¢ c‚Äñ ‚â§ ‚Äñc‚Äñ := by
    intro x
    simp only [norm_smul, g_norm x]
    apply mul_le_of_le_one_left (norm_nonneg _)
    exact (hg_range x).2
  have gc_bd :
      ‚àÄ x, ‚Äñg x ‚Ä¢ c - s.indicator (fun _x => c) x‚Äñ ‚â§ ‚Äñ(v \ s).indicator (fun _x => c) x‚Äñ := by
    intro x
    by_cases hv : x ‚àà v
    ¬∑ rw [‚Üê Set.diff_union_of_subset hsv] at hv
      cases' hv with hsv hs
      ¬∑ simpa only [hsv.2, Set.indicator_of_not_mem, not_false_iff, sub_zero, hsv,
          Set.indicator_of_mem] using gc_bd0 x
      ¬∑ simp [hgs hs, hs]
    ¬∑ simp [hgv hv, show x ‚àâ s from fun h => hv (hsv h)]
  have gc_support : (Function.support fun x : Œ± => g x ‚Ä¢ c) ‚äÜ v := by
    refine' Function.support_subset_iff'.2 fun x hx => _
    simp only [hgv hx, Pi.zero_apply, zero_smul]
  have gc_mem : Mem‚Ñíp (fun x => g x ‚Ä¢ c) p Œº := by
    refine' Mem‚Ñíp.smul_of_top_left (mem‚Ñíp_top_const _) _
    refine' ‚ü®g.continuous.aestronglyMeasurable, _‚ü©
    have : snorm (v.indicator fun _x => (1 : ‚Ñù)) p Œº < ‚ä§ := by
      refine' (snorm_indicator_const_le _ _).trans_lt _
      simp only [lt_top_iff_ne_top, hŒºv.ne, nnnorm_one, ENNReal.coe_one, one_div, one_mul, Ne.def,
        ENNReal.rpow_eq_top_iff, inv_lt_zero, false_and_iff, or_false_iff, not_and, not_lt,
        ENNReal.toReal_nonneg, imp_true_iff]
    refine' (snorm_mono fun x => _).trans_lt this
    by_cases hx : x ‚àà v
    ¬∑ simp only [hx, abs_of_nonneg (hg_range x).1, (hg_range x).2, Real.norm_eq_abs,
        indicator_of_mem, CstarRing.norm_one]
    ¬∑ simp only [hgv hx, Pi.zero_apply, Real.norm_eq_abs, abs_zero, abs_nonneg]
  refine'
    ‚ü®fun x => g x ‚Ä¢ c, g.continuous.smul continuous_const, (snorm_mono gc_bd).trans _, gc_bd0,
      gc_support.trans (inter_subset_left _ _), gc_mem‚ü©
  exact hŒ∑ _ ((measure_mono (diff_subset_diff (inter_subset_right _ _) Subset.rfl)).trans hV.le)
#align measure_theory.exists_continuous_snorm_sub_le_of_closed MeasureTheory.exists_continuous_snorm_sub_le_of_closed

/-- In a locally compact space, any function in `‚Ñíp` can be approximated by compactly supported
continuous functions when `p < ‚àû`, version in terms of `snorm`. -/
theorem Mem‚Ñíp.exists_hasCompactSupport_snorm_sub_le [WeaklyLocallyCompactSpace Œ±] [Œº.Regular]
    (hp : p ‚â† ‚àû) {f : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) :
    ‚àÉ g : Œ± ‚Üí E, HasCompactSupport g ‚àß snorm (f - g) p Œº ‚â§ Œµ ‚àß Continuous g ‚àß Mem‚Ñíp g p Œº := by
  suffices H :
    ‚àÉ g : Œ± ‚Üí E, snorm (f - g) p Œº ‚â§ Œµ ‚àß Continuous g ‚àß Mem‚Ñíp g p Œº ‚àß HasCompactSupport g
  ¬∑ rcases H with ‚ü®g, hg, g_cont, g_mem, g_support‚ü©
    exact ‚ü®g, g_support, hg, g_cont, g_mem‚ü©
  -- It suffices to check that the set of functions we consider approximates characteristic
  -- functions, is stable under addition and consists of ae strongly measurable functions.
  -- First check the latter easy facts.
  apply hf.induction_dense hp _ _ _ _ hŒµ
  rotate_left
  -- stability under addition
  ¬∑ rintro f g ‚ü®f_cont, f_mem, hf‚ü© ‚ü®g_cont, g_mem, hg‚ü©
    exact ‚ü®f_cont.add g_cont, f_mem.add g_mem, hf.add hg‚ü©
  -- ae strong measurability
  ¬∑ rintro f ‚ü®_f_cont, f_mem, _hf‚ü©
    exact f_mem.aestronglyMeasurable
  -- We are left with approximating characteristic functions.
  -- This follows from `exists_continuous_snorm_sub_le_of_closed`.
  intro c t ht htŒº Œµ hŒµ
  rcases exists_Lp_half E Œº p hŒµ with ‚ü®Œ¥, Œ¥pos, hŒ¥‚ü©
  obtain ‚ü®Œ∑, Œ∑pos, hŒ∑‚ü© :
    ‚àÉ Œ∑ : ‚Ñù‚â•0, 0 < Œ∑ ‚àß ‚àÄ s : Set Œ±, Œº s ‚â§ Œ∑ ‚Üí snorm (s.indicator fun _x => c) p Œº ‚â§ Œ¥
  exact exists_snorm_indicator_le hp c Œ¥pos.ne'
  have hŒ∑_pos' : (0 : ‚Ñù‚â•0‚àû) < Œ∑ := ENNReal.coe_pos.2 Œ∑pos
  obtain ‚ü®s, st, s_compact, Œºs‚ü© : ‚àÉ s, s ‚äÜ t ‚àß IsCompact s ‚àß Œº (t \ s) < Œ∑
  exact ht.exists_isCompact_diff_lt htŒº.ne hŒ∑_pos'.ne'
  have hsŒº : Œº s < ‚àû := (measure_mono st).trans_lt htŒº
  have I1 : snorm ((s.indicator fun _y => c) - t.indicator fun _y => c) p Œº ‚â§ Œ¥ := by
    rw [‚Üê snorm_neg, neg_sub, ‚Üê indicator_diff st]
    exact hŒ∑ _ Œºs.le
  obtain ‚ü®k, k_compact, sk‚ü© : ‚àÉ k : Set Œ±, IsCompact k ‚àß s ‚äÜ interior k :=
    exists_compact_superset s_compact
  rcases exists_continuous_snorm_sub_le_of_closed hp s_compact.isClosed isOpen_interior sk hsŒº.ne c
      Œ¥pos.ne' with
    ‚ü®f, f_cont, I2, _f_bound, f_support, f_mem‚ü©
  have I3 : snorm (f - t.indicator fun _y => c) p Œº ‚â§ Œµ := by
    convert
      (hŒ¥ _ _
          (f_mem.aestronglyMeasurable.sub
            (aestronglyMeasurable_const.indicator s_compact.measurableSet))
          ((aestronglyMeasurable_const.indicator s_compact.measurableSet).sub
            (aestronglyMeasurable_const.indicator ht))
          I2 I1).le using 2
    simp only [sub_add_sub_cancel]
  refine' ‚ü®f, I3, f_cont, f_mem, HasCompactSupport.intro k_compact fun x hx => _‚ü©
  rw [‚Üê Function.nmem_support]
  contrapose! hx
  exact interior_subset (f_support hx)
#align measure_theory.mem_‚Ñíp.exists_has_compact_support_snorm_sub_le MeasureTheory.Mem‚Ñíp.exists_hasCompactSupport_snorm_sub_le

/-- In a locally compact space, any function in `‚Ñíp` can be approximated by compactly supported
continuous functions when `0 < p < ‚àû`, version in terms of `‚à´`. -/
theorem Mem‚Ñíp.exists_hasCompactSupport_integral_rpow_sub_le
    [WeaklyLocallyCompactSpace Œ±] [Œº.Regular]
    {p : ‚Ñù} (hp : 0 < p) {f : Œ± ‚Üí E} (hf : Mem‚Ñíp f (ENNReal.ofReal p) Œº) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ g : Œ± ‚Üí E,
      HasCompactSupport g ‚àß
        (‚à´ x, ‚Äñf x - g x‚Äñ ^ p ‚àÇŒº) ‚â§ Œµ ‚àß Continuous g ‚àß Mem‚Ñíp g (ENNReal.ofReal p) Œº := by
  have I : 0 < Œµ ^ (1 / p) := Real.rpow_pos_of_pos hŒµ _
  have A : ENNReal.ofReal (Œµ ^ (1 / p)) ‚â† 0 := by
    simp only [Ne.def, ENNReal.ofReal_eq_zero, not_le, I]
  have B : ENNReal.ofReal p ‚â† 0 := by simpa only [Ne.def, ENNReal.ofReal_eq_zero, not_le] using hp
  rcases hf.exists_hasCompactSupport_snorm_sub_le ENNReal.coe_ne_top A with
    ‚ü®g, g_support, hg, g_cont, g_mem‚ü©
  change snorm _ (ENNReal.ofReal p) _ ‚â§ _ at hg
  refine' ‚ü®g, g_support, _, g_cont, g_mem‚ü©
  rwa [(hf.sub g_mem).snorm_eq_integral_rpow_norm B ENNReal.coe_ne_top,
    ENNReal.ofReal_le_ofReal_iff I.le, one_div, ENNReal.toReal_ofReal hp.le,
    Real.rpow_le_rpow_iff _ hŒµ.le (inv_pos.2 hp)] at hg
  exact integral_nonneg fun x => Real.rpow_nonneg_of_nonneg (norm_nonneg _) _
#align measure_theory.mem_‚Ñíp.exists_has_compact_support_integral_rpow_sub_le MeasureTheory.Mem‚Ñíp.exists_hasCompactSupport_integral_rpow_sub_le

/-- In a locally compact space, any integrable function can be approximated by compactly supported
continuous functions, version in terms of `‚à´‚Åª`. -/
theorem Integrable.exists_hasCompactSupport_lintegral_sub_le
    [WeaklyLocallyCompactSpace Œ±] [Œº.Regular]
    {f : Œ± ‚Üí E} (hf : Integrable f Œº) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) :
    ‚àÉ g : Œ± ‚Üí E,
      HasCompactSupport g ‚àß (‚à´‚Åª x, ‚Äñf x - g x‚Äñ‚Çä ‚àÇŒº) ‚â§ Œµ ‚àß Continuous g ‚àß Integrable g Œº := by
  simp only [‚Üê mem‚Ñíp_one_iff_integrable, ‚Üê snorm_one_eq_lintegral_nnnorm] at hf ‚ä¢
  exact hf.exists_hasCompactSupport_snorm_sub_le ENNReal.one_ne_top hŒµ
#align measure_theory.integrable.exists_has_compact_support_lintegral_sub_le MeasureTheory.Integrable.exists_hasCompactSupport_lintegral_sub_le

/-- In a locally compact space, any integrable function can be approximated by compactly supported
continuous functions, version in terms of `‚à´`. -/
theorem Integrable.exists_hasCompactSupport_integral_sub_le
    [WeaklyLocallyCompactSpace Œ±] [Œº.Regular]
    {f : Œ± ‚Üí E} (hf : Integrable f Œº) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ g : Œ± ‚Üí E, HasCompactSupport g ‚àß (‚à´ x, ‚Äñf x - g x‚Äñ ‚àÇŒº) ‚â§ Œµ ‚àß
      Continuous g ‚àß Integrable g Œº := by
  simp only [‚Üê mem‚Ñíp_one_iff_integrable, ‚Üê snorm_one_eq_lintegral_nnnorm, ‚Üê ENNReal.ofReal_one]
    at hf ‚ä¢
  simpa using hf.exists_hasCompactSupport_integral_rpow_sub_le zero_lt_one hŒµ
#align measure_theory.integrable.exists_has_compact_support_integral_sub_le MeasureTheory.Integrable.exists_hasCompactSupport_integral_sub_le

/-- Any function in `‚Ñíp` can be approximated by bounded continuous functions when `p < ‚àû`,
version in terms of `snorm`. -/
theorem Mem‚Ñíp.exists_boundedContinuous_snorm_sub_le [Œº.WeaklyRegular] (hp : p ‚â† ‚àû) {f : Œ± ‚Üí E}
    (hf : Mem‚Ñíp f p Œº) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) :
    ‚àÉ g : Œ± ‚Üí·µá E, snorm (f - (g : Œ± ‚Üí E)) p Œº ‚â§ Œµ ‚àß Mem‚Ñíp g p Œº := by
  suffices H :
    ‚àÉ g : Œ± ‚Üí E, snorm (f - g) p Œº ‚â§ Œµ ‚àß Continuous g ‚àß Mem‚Ñíp g p Œº ‚àß IsBounded (range g)
  ¬∑ rcases H with ‚ü®g, hg, g_cont, g_mem, g_bd‚ü©
    exact ‚ü®‚ü®‚ü®g, g_cont‚ü©, Metric.isBounded_range_iff.1 g_bd‚ü©, hg, g_mem‚ü©
  -- It suffices to check that the set of functions we consider approximates characteristic
  -- functions, is stable under addition and made of ae strongly measurable functions.
  -- First check the latter easy facts.
  apply hf.induction_dense hp _ _ _ _ hŒµ
  rotate_left
  -- stability under addition
  ¬∑ rintro f g ‚ü®f_cont, f_mem, f_bd‚ü© ‚ü®g_cont, g_mem, g_bd‚ü©
    refine' ‚ü®f_cont.add g_cont, f_mem.add g_mem, _‚ü©
    let f' : Œ± ‚Üí·µá E := ‚ü®‚ü®f, f_cont‚ü©, Metric.isBounded_range_iff.1 f_bd‚ü©
    let g' : Œ± ‚Üí·µá E := ‚ü®‚ü®g, g_cont‚ü©, Metric.isBounded_range_iff.1 g_bd‚ü©
    exact (f' + g').isBounded_range
  -- ae strong measurability
  ¬∑ exact fun f ‚ü®_, h, _‚ü© => h.aestronglyMeasurable
  -- We are left with approximating characteristic functions.
  -- This follows from `exists_continuous_snorm_sub_le_of_closed`.
  intro c t ht htŒº Œµ hŒµ
  rcases exists_Lp_half E Œº p hŒµ with ‚ü®Œ¥, Œ¥pos, hŒ¥‚ü©
  obtain ‚ü®Œ∑, Œ∑pos, hŒ∑‚ü© :
    ‚àÉ Œ∑ : ‚Ñù‚â•0, 0 < Œ∑ ‚àß ‚àÄ s : Set Œ±, Œº s ‚â§ Œ∑ ‚Üí snorm (s.indicator fun _x => c) p Œº ‚â§ Œ¥
  exact exists_snorm_indicator_le hp c Œ¥pos.ne'
  have hŒ∑_pos' : (0 : ‚Ñù‚â•0‚àû) < Œ∑ := ENNReal.coe_pos.2 Œ∑pos
  obtain ‚ü®s, st, s_closed, Œºs‚ü© : ‚àÉ s, s ‚äÜ t ‚àß IsClosed s ‚àß Œº (t \ s) < Œ∑
  exact ht.exists_isClosed_diff_lt htŒº.ne hŒ∑_pos'.ne'
  have hsŒº : Œº s < ‚àû := (measure_mono st).trans_lt htŒº
  have I1 : snorm ((s.indicator fun _y => c) - t.indicator fun _y => c) p Œº ‚â§ Œ¥ := by
    rw [‚Üê snorm_neg, neg_sub, ‚Üê indicator_diff st]
    exact hŒ∑ _ Œºs.le
  rcases exists_continuous_snorm_sub_le_of_closed hp s_closed isOpen_univ (subset_univ _) hsŒº.ne c
      Œ¥pos.ne' with
    ‚ü®f, f_cont, I2, f_bound, -, f_mem‚ü©
  have I3 : snorm (f - t.indicator fun _y => c) p Œº ‚â§ Œµ := by
    convert
      (hŒ¥ _ _
          (f_mem.aestronglyMeasurable.sub
            (aestronglyMeasurable_const.indicator s_closed.measurableSet))
          ((aestronglyMeasurable_const.indicator s_closed.measurableSet).sub
            (aestronglyMeasurable_const.indicator ht))
          I2 I1).le using 2
    simp only [sub_add_sub_cancel]
  refine' ‚ü®f, I3, f_cont, f_mem, _‚ü©
  exact (BoundedContinuousFunction.ofNormedAddCommGroup f f_cont _ f_bound).isBounded_range
#align measure_theory.mem_‚Ñíp.exists_bounded_continuous_snorm_sub_le MeasureTheory.Mem‚Ñíp.exists_boundedContinuous_snorm_sub_le

/-- Any function in `‚Ñíp` can be approximated by bounded continuous functions when `0 < p < ‚àû`,
version in terms of `‚à´`. -/
theorem Mem‚Ñíp.exists_boundedContinuous_integral_rpow_sub_le [Œº.WeaklyRegular] {p : ‚Ñù} (hp : 0 < p)
    {f : Œ± ‚Üí E} (hf : Mem‚Ñíp f (ENNReal.ofReal p) Œº) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ g : Œ± ‚Üí·µá E, (‚à´ x, ‚Äñf x - g x‚Äñ ^ p ‚àÇŒº) ‚â§ Œµ ‚àß Mem‚Ñíp g (ENNReal.ofReal p) Œº := by
  have I : 0 < Œµ ^ (1 / p) := Real.rpow_pos_of_pos hŒµ _
  have A : ENNReal.ofReal (Œµ ^ (1 / p)) ‚â† 0 := by
    simp only [Ne.def, ENNReal.ofReal_eq_zero, not_le, I]
  have B : ENNReal.ofReal p ‚â† 0 := by simpa only [Ne.def, ENNReal.ofReal_eq_zero, not_le] using hp
  rcases hf.exists_boundedContinuous_snorm_sub_le ENNReal.coe_ne_top A with ‚ü®g, hg, g_mem‚ü©
  change snorm _ (ENNReal.ofReal p) _ ‚â§ _ at hg
  refine' ‚ü®g, _, g_mem‚ü©
  rwa [(hf.sub g_mem).snorm_eq_integral_rpow_norm B ENNReal.coe_ne_top,
    ENNReal.ofReal_le_ofReal_iff I.le, one_div, ENNReal.toReal_ofReal hp.le,
    Real.rpow_le_rpow_iff _ hŒµ.le (inv_pos.2 hp)] at hg
  exact integral_nonneg fun x => Real.rpow_nonneg_of_nonneg (norm_nonneg _) _
#align measure_theory.mem_‚Ñíp.exists_bounded_continuous_integral_rpow_sub_le MeasureTheory.Mem‚Ñíp.exists_boundedContinuous_integral_rpow_sub_le

/-- Any integrable function can be approximated by bounded continuous functions,
version in terms of `‚à´‚Åª`. -/
theorem Integrable.exists_boundedContinuous_lintegral_sub_le [Œº.WeaklyRegular] {f : Œ± ‚Üí E}
    (hf : Integrable f Œº) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) :
    ‚àÉ g : Œ± ‚Üí·µá E, (‚à´‚Åª x, ‚Äñf x - g x‚Äñ‚Çä ‚àÇŒº) ‚â§ Œµ ‚àß Integrable g Œº := by
  simp only [‚Üê mem‚Ñíp_one_iff_integrable, ‚Üê snorm_one_eq_lintegral_nnnorm] at hf ‚ä¢
  exact hf.exists_boundedContinuous_snorm_sub_le ENNReal.one_ne_top hŒµ
#align measure_theory.integrable.exists_bounded_continuous_lintegral_sub_le MeasureTheory.Integrable.exists_boundedContinuous_lintegral_sub_le

/-- Any integrable function can be approximated by bounded continuous functions,
version in terms of `‚à´`. -/
theorem Integrable.exists_boundedContinuous_integral_sub_le [Œº.WeaklyRegular] {f : Œ± ‚Üí E}
    (hf : Integrable f Œº) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ g : Œ± ‚Üí·µá E, (‚à´ x, ‚Äñf x - g x‚Äñ ‚àÇŒº) ‚â§ Œµ ‚àß Integrable g Œº := by
  simp only [‚Üê mem‚Ñíp_one_iff_integrable, ‚Üê snorm_one_eq_lintegral_nnnorm, ‚Üê ENNReal.ofReal_one]
    at hf ‚ä¢
  simpa using hf.exists_boundedContinuous_integral_rpow_sub_le zero_lt_one hŒµ
#align measure_theory.integrable.exists_bounded_continuous_integral_sub_le MeasureTheory.Integrable.exists_boundedContinuous_integral_sub_le

namespace Lp

variable (E)

/-- A function in `Lp` can be approximated in `Lp` by continuous functions. -/
theorem boundedContinuousFunction_dense [SecondCountableTopologyEither Œ± E] [_i : Fact (1 ‚â§ p)]
    (hp : p ‚â† ‚àû) [Œº.WeaklyRegular] : (boundedContinuousFunction E p Œº).topologicalClosure = ‚ä§ := by
  rw [AddSubgroup.eq_top_iff']
  intro f
  refine' mem_closure_iff_frequently.mpr _
  rw [Metric.nhds_basis_closedBall.frequently_iff]
  intro Œµ hŒµ
  have A : ENNReal.ofReal Œµ ‚â† 0 := by simp only [Ne.def, ENNReal.ofReal_eq_zero, not_le, hŒµ]
  obtain ‚ü®g, hg, g_mem‚ü© :
      ‚àÉ g : Œ± ‚Üí·µá E, snorm ((f : Œ± ‚Üí E) - (g : Œ± ‚Üí E)) p Œº ‚â§ ENNReal.ofReal Œµ ‚àß Mem‚Ñíp g p Œº :=
    (Lp.mem‚Ñíp f).exists_boundedContinuous_snorm_sub_le hp A
  refine' ‚ü®g_mem.toLp _, _, ‚ü®g, rfl‚ü©‚ü©
  simp only [dist_eq_norm, Metric.mem_closedBall']
  rw [Lp.norm_def]
  -- porting note: original proof started with:
  -- convert ENNReal.toReal_le_of_le_ofReal hŒµ.le hg using 2
  -- the `convert` was completely borked and timed out
  have key : snorm ((f : Œ± ‚Üí E) - (g : Œ± ‚Üí E)) p Œº = snorm (f - Mem‚Ñíp.toLp (‚Üëg) g_mem) p Œº := by
    apply snorm_congr_ae
    filter_upwards [coeFn_sub f (g_mem.toLp g), g_mem.coeFn_toLp] with x hx h'x
    simp only [hx, Pi.sub_apply, sub_right_inj, h'x]
  simpa only [key] using ENNReal.toReal_le_of_le_ofReal hŒµ.le hg
set_option linter.uppercaseLean3 false in
#align measure_theory.Lp.bounded_continuous_function_dense MeasureTheory.Lp.boundedContinuousFunction_dense

end Lp

end MeasureTheory

variable [SecondCountableTopologyEither Œ± E] [_i : Fact (1 ‚â§ p)] (hp : p ‚â† ‚àû)

variable (ùïú : Type*) [NormedField ùïú] [NormedAlgebra ‚Ñù ùïú] [NormedSpace ùïú E]

variable (E) (Œº)

namespace BoundedContinuousFunction

theorem toLp_denseRange [Œº.WeaklyRegular] [IsFiniteMeasure Œº] :
    DenseRange (toLp p Œº ùïú : (Œ± ‚Üí·µá E) ‚ÜíL[ùïú] Lp E p Œº) := by
  haveI : NormedSpace ‚Ñù E := RestrictScalars.normedSpace ‚Ñù ùïú E
  rw [denseRange_iff_closure_range]
  suffices (LinearMap.range (toLp p Œº ùïú : _ ‚ÜíL[ùïú] Lp E p Œº)).toAddSubgroup.topologicalClosure = ‚ä§
    by exact congr_arg ((‚Üë) : AddSubgroup (Lp E p Œº) ‚Üí Set (Lp E p Œº)) this
  simpa [range_toLp p Œº] using MeasureTheory.Lp.boundedContinuousFunction_dense E hp
set_option linter.uppercaseLean3 false in
#align bounded_continuous_function.to_Lp_dense_range BoundedContinuousFunction.toLp_denseRange

end BoundedContinuousFunction

namespace ContinuousMap

/-- Continuous functions are dense in `MeasureTheory.Lp`, `1 ‚â§ p < ‚àû`. This theorem assumes that
the domain is a compact space because otherwise `ContinuousMap.toLp` is undefined. Use
`BoundedContinuousFunction.toLp_denseRange` if the domain is not a compact space.  -/
theorem toLp_denseRange [CompactSpace Œ±] [Œº.WeaklyRegular] [IsFiniteMeasure Œº] :
    DenseRange (toLp p Œº ùïú : C(Œ±, E) ‚ÜíL[ùïú] Lp E p Œº) := by
  refine (BoundedContinuousFunction.toLp_denseRange _ _ hp ùïú).mono ?_
  refine range_subset_iff.2 fun f ‚Ü¶ ?_
  exact ‚ü®f.toContinuousMap, rfl‚ü©
set_option linter.uppercaseLean3 false in
#align continuous_map.to_Lp_dense_range ContinuousMap.toLp_denseRange

end ContinuousMap
