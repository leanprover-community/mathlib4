/-
Copyright (c) 2021 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, S√©bastien Gou√´zel
-/

import Mathlib.Analysis.NormedSpace.BoundedLinearMaps
import Mathlib.MeasureTheory.Function.StronglyMeasurable.Basic
import Mathlib.MeasureTheory.Measure.WithDensity
import Mathlib.Topology.Algebra.Module.FiniteDimension

#align_import measure_theory.function.strongly_measurable.basic from "leanprover-community/mathlib"@"3b52265189f3fb43aa631edffce5d060fafaf82f"

/-!
# Strongly measurable and finitely strongly measurable functions

This file contains some further development of strongly measurable and finitely strongly measurable
functions, started in `Mathlib.MeasureTheory.Function.StronglyMeasurable.Basic`.

## References

* Hyt√∂nen, Tuomas, Jan Van Neerven, Mark Veraar, and Lutz Weis. Analysis in Banach spaces.
  Springer, 2016.

-/

open MeasureTheory Filter Set ENNReal NNReal

variable {Œ± Œ≤ Œ≥ : Type*} {m : MeasurableSpace Œ±} {Œº : Measure Œ±} [TopologicalSpace Œ≤]
  [TopologicalSpace Œ≥] {f g : Œ± ‚Üí Œ≤}

theorem MeasureTheory.AEStronglyMeasurable.comp_measurePreserving
    {Œ≥ : Type*} {_ : MeasurableSpace Œ≥} {_ : MeasurableSpace Œ±} {f : Œ≥ ‚Üí Œ±} {Œº : Measure Œ≥}
    {ŒΩ : Measure Œ±} (hg : AEStronglyMeasurable g ŒΩ) (hf : MeasurePreserving f Œº ŒΩ) :
    AEStronglyMeasurable (g ‚àò f) Œº :=
  hg.comp_quasiMeasurePreserving hf.quasiMeasurePreserving

theorem MeasureTheory.MeasurePreserving.aestronglyMeasurable_comp_iff {Œ≤ : Type*}
    {f : Œ± ‚Üí Œ≤} {mŒ± : MeasurableSpace Œ±} {Œºa : Measure Œ±} {mŒ≤ : MeasurableSpace Œ≤} {Œºb : Measure Œ≤}
    (hf : MeasurePreserving f Œºa Œºb) (h‚ÇÇ : MeasurableEmbedding f) {g : Œ≤ ‚Üí Œ≥} :
    AEStronglyMeasurable (g ‚àò f) Œºa ‚Üî AEStronglyMeasurable g Œºb := by
  rw [‚Üê hf.map_eq, h‚ÇÇ.aestronglyMeasurable_map_iff]
#align measure_theory.measure_preserving.ae_strongly_measurable_comp_iff MeasureTheory.MeasurePreserving.aestronglyMeasurable_comp_iff

section NormedSpace

variable {ùïú : Type*} [NontriviallyNormedField ùïú] [CompleteSpace ùïú]
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]

theorem aestronglyMeasurable_smul_const_iff {f : Œ± ‚Üí ùïú} {c : E} (hc : c ‚â† 0) :
    AEStronglyMeasurable (fun x => f x ‚Ä¢ c) Œº ‚Üî AEStronglyMeasurable f Œº :=
  (closedEmbedding_smul_left hc).toEmbedding.aestronglyMeasurable_comp_iff
#align ae_strongly_measurable_smul_const_iff aestronglyMeasurable_smul_const_iff

end NormedSpace

section ContinuousLinearMapNontriviallyNormedField

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
variable {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]
variable {G : Type*} [NormedAddCommGroup G] [NormedSpace ùïú G]

theorem StronglyMeasurable.apply_continuousLinearMap
    {_m : MeasurableSpace Œ±} {œÜ : Œ± ‚Üí F ‚ÜíL[ùïú] E} (hœÜ : StronglyMeasurable œÜ) (v : F) :
    StronglyMeasurable fun a => œÜ a v :=
  (ContinuousLinearMap.apply ùïú E v).continuous.comp_stronglyMeasurable hœÜ
#align strongly_measurable.apply_continuous_linear_map StronglyMeasurable.apply_continuousLinearMap

@[measurability]
theorem MeasureTheory.AEStronglyMeasurable.apply_continuousLinearMap {œÜ : Œ± ‚Üí F ‚ÜíL[ùïú] E}
    (hœÜ : AEStronglyMeasurable œÜ Œº) (v : F) :
    AEStronglyMeasurable (fun a => œÜ a v) Œº :=
  (ContinuousLinearMap.apply ùïú E v).continuous.comp_aestronglyMeasurable hœÜ
#align measure_theory.ae_strongly_measurable.apply_continuous_linear_map MeasureTheory.AEStronglyMeasurable.apply_continuousLinearMap

theorem ContinuousLinearMap.aestronglyMeasurable_comp‚ÇÇ (L : E ‚ÜíL[ùïú] F ‚ÜíL[ùïú] G) {f : Œ± ‚Üí E}
    {g : Œ± ‚Üí F} (hf : AEStronglyMeasurable f Œº) (hg : AEStronglyMeasurable g Œº) :
    AEStronglyMeasurable (fun x => L (f x) (g x)) Œº :=
  L.continuous‚ÇÇ.comp_aestronglyMeasurable‚ÇÇ hf hg
#align continuous_linear_map.ae_strongly_measurable_comp‚ÇÇ ContinuousLinearMap.aestronglyMeasurable_comp‚ÇÇ

end ContinuousLinearMapNontriviallyNormedField

theorem aestronglyMeasurable_withDensity_iff {E : Type*} [NormedAddCommGroup E]
    [NormedSpace ‚Ñù E] {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : Measurable f) {g : Œ± ‚Üí E} :
    AEStronglyMeasurable g (Œº.withDensity fun x => (f x : ‚Ñù‚â•0‚àû)) ‚Üî
      AEStronglyMeasurable (fun x => (f x : ‚Ñù) ‚Ä¢ g x) Œº := by
  constructor
  ¬∑ rintro ‚ü®g', g'meas, hg'‚ü©
    have A : MeasurableSet { x : Œ± | f x ‚â† 0 } := (hf (measurableSet_singleton 0)).compl
    refine ‚ü®fun x => (f x : ‚Ñù) ‚Ä¢ g' x, hf.coe_nnreal_real.stronglyMeasurable.smul g'meas, ?_‚ü©
    apply @ae_of_ae_restrict_of_ae_restrict_compl _ _ _ { x | f x ‚â† 0 }
    ¬∑ rw [EventuallyEq, ae_withDensity_iff hf.coe_nnreal_ennreal] at hg'
      rw [ae_restrict_iff' A]
      filter_upwards [hg'] with a ha h'a
      have : (f a : ‚Ñù‚â•0‚àû) ‚â† 0 := by simpa only [Ne, ENNReal.coe_eq_zero] using h'a
      rw [ha this]
    ¬∑ filter_upwards [ae_restrict_mem A.compl] with x hx
      simp only [Classical.not_not, mem_setOf_eq, mem_compl_iff] at hx
      simp [hx]
  ¬∑ rintro ‚ü®g', g'meas, hg'‚ü©
    refine ‚ü®fun x => (f x : ‚Ñù)‚Åª¬π ‚Ä¢ g' x, hf.coe_nnreal_real.inv.stronglyMeasurable.smul g'meas, ?_‚ü©
    rw [EventuallyEq, ae_withDensity_iff hf.coe_nnreal_ennreal]
    filter_upwards [hg'] with x hx h'x
    rw [‚Üê hx, smul_smul, _root_.inv_mul_cancel, one_smul]
    simp only [Ne, ENNReal.coe_eq_zero] at h'x
    simpa only [NNReal.coe_eq_zero, Ne] using h'x
#align ae_strongly_measurable_with_density_iff aestronglyMeasurable_withDensity_iff
