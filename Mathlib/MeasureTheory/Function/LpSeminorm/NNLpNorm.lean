/-
Copyright (c) 2024 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import Mathlib.MeasureTheory.Integral.Bochner.Basic
import Mathlib.Tactic.Positivity.Finset

/-!
# `‚Ñù‚â•0`-valued L·µñ norm

This file proves theorems about `MeasureTheory.nnLpNorm`,
an `‚Ñù‚â•0`-valued version of `MeasureTheory.eLpNorm`.
-/

open Filter
open scoped BigOperators ComplexConjugate ENNReal NNReal

namespace MeasureTheory
variable {Œ± E : Type*} {m : MeasurableSpace Œ±} {p : ‚Ñù‚â•0‚àû} {q : ‚Ñù} {Œº ŒΩ : Measure Œ±}
  [NormedAddCommGroup E] {f g h : Œ± ‚Üí E}

lemma coe_nnLpNorm_eq_eLpNorm (hf : MemLp f p Œº) : nnLpNorm f p Œº = eLpNorm f p Œº := by
  rw [nnLpNorm, ENNReal.coe_toNNReal hf.eLpNorm_ne_top]

-- TODO: Rename `eLpNorm_eq_lintegral_rpow_enorm` to `eLpNorm_eq_lintegral_rpow_enorm_toReal`
lemma coe_nnLpNorm_eq_integral_norm_rpow_toReal (hp‚ÇÄ : p ‚â† 0) (hp : p ‚â† ‚àû)
    (hf : AEMeasurable (fun x ‚Ü¶ ‚Äñf x‚Äñ‚Çë ^ p.toReal) Œº) :
    nnLpNorm f p Œº = (‚à´ x, ‚Äñf x‚Äñ ^ p.toReal ‚àÇŒº) ^ p.toReal‚Åª¬π := by
  rw [nnLpNorm, eLpNorm_eq_lintegral_rpow_enorm hp‚ÇÄ hp, ENNReal.coe_toNNReal_eq_toReal,
    ‚Üê ENNReal.toReal_rpow, ‚Üê integral_toReal hf]
  ¬∑ simp [‚Üê ENNReal.toReal_rpow]
  ¬∑ exact .of_forall fun x ‚Ü¶ ENNReal.rpow_lt_top_of_nonneg (by positivity) (by simp)

-- TODO: Rename `coe_eLpNorm_nnreal_eq_lintegral_norm_rpow`
lemma coe_nnLpNorm_nnreal_eq_integral_norm_rpow {p : ‚Ñù‚â•0} (hp : p ‚â† 0)
    (hf : AEMeasurable (fun x ‚Ü¶ (‚Äñf x‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ p.toReal) Œº) :
    nnLpNorm f p Œº = (‚à´ x, ‚Äñf x‚Äñ ^ (p : ‚Ñù) ‚àÇŒº) ^ (p‚Åª¬π : ‚Ñù) := by
  rw [coe_nnLpNorm_eq_integral_norm_rpow_toReal (by positivity) (by simp) hf]; simp

lemma coe_nnLpNorm_one_eq_integral_norm (hf : AEMeasurable (fun x ‚Ü¶ ‚Äñf x‚Äñ‚Çë) Œº) :
    nnLpNorm f 1 Œº = ‚à´ x, ‚Äñf x‚Äñ ‚àÇŒº := by
  rw [coe_nnLpNorm_eq_integral_norm_rpow_toReal one_ne_zero ENNReal.coe_ne_top (by simpa using hf)]
  simp

@[simp] lemma nnLpNorm_exponent_zero (f : Œ± ‚Üí E) : nnLpNorm f 0 Œº = 0 := by simp [nnLpNorm]
@[simp] lemma nnLpNorm_measure_zero (f : Œ± ‚Üí E) : nnLpNorm f p (0 : Measure Œ±) = 0 := by
  simp [nnLpNorm]

lemma ae_le_nnLinftyNorm (hf : MemLp f ‚àû Œº) : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ‚Çä ‚â§ nnLpNorm f ‚ä§ Œº := by
  simp_rw [‚Üê ENNReal.coe_le_coe, coe_nnLpNorm_eq_eLpNorm hf]; exact ae_le_eLpNormEssSup

lemma nnLinftyNorm_eq_essSup (hf : MemLp f ‚àû Œº) : nnLpNorm f ‚àû Œº = essSup (‚Äñf ¬∑‚Äñ‚Çä) Œº := by
  refine ENNReal.coe_injective ?_
  rw [coe_nnLpNorm_eq_eLpNorm hf, ENNReal.coe_essSup, eLpNorm_exponent_top, eLpNormEssSup]
  ¬∑ simp_rw [enorm_eq_nnnorm]
  ¬∑ exact ‚ü®_, ae_le_nnLinftyNorm hf‚ü©

@[simp] lemma nnLpNorm_zero (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :
    nnLpNorm (0 : Œ± ‚Üí E) p Œº = 0 := by simp [nnLpNorm]

@[simp] lemma nnLpNorm_zero' (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :
    nnLpNorm (fun _ ‚Ü¶ 0 : Œ± ‚Üí E) p Œº = 0 := by simp [nnLpNorm]

@[simp]
lemma nnLpNorm_eq_zero (hf : MemLp f p Œº) (hp : p ‚â† 0) : nnLpNorm f p Œº = 0 ‚Üî f =·µê[Œº] 0 := by
  simp [nnLpNorm, ENNReal.toNNReal_eq_zero_iff, hf.eLpNorm_ne_top, eLpNorm_eq_zero_iff hf.1 hp]

@[simp] lemma nnLpNorm_of_isEmpty [IsEmpty Œ±] (f : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) : nnLpNorm f p Œº = 0 := by
  simp [Subsingleton.elim f 0]

@[simp] lemma nnLpNorm_neg (f : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :
    nnLpNorm (-f) p Œº = nnLpNorm f p Œº := by simp [nnLpNorm]

@[simp] lemma nnLpNorm_neg' (f : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :
    nnLpNorm (fun x ‚Ü¶ -f x) p Œº = nnLpNorm f p Œº := nnLpNorm_neg ..

lemma nnLpNorm_sub_comm (f g : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :
    nnLpNorm (f - g) p Œº = nnLpNorm (g - f) p Œº := by simp [nnLpNorm, eLpNorm_sub_comm]

@[simp] lemma nnLpNorm_norm (f : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) :
    nnLpNorm (fun x ‚Ü¶ ‚Äñf x‚Äñ) p Œº = nnLpNorm f p Œº := by simp [nnLpNorm]

@[simp] lemma nnLpNorm_abs (f : Œ± ‚Üí ‚Ñù) (p : ‚Ñù‚â•0‚àû) : nnLpNorm (|f|) p Œº = nnLpNorm f p Œº :=
  nnLpNorm_norm f p

@[simp] lemma nnLpNorm_fun_abs (f : Œ± ‚Üí ‚Ñù) (p : ‚Ñù‚â•0‚àû) :
    nnLpNorm (fun x ‚Ü¶ |f x|) p Œº = nnLpNorm f p Œº := nnLpNorm_abs ..

@[simp] lemma nnLpNorm_const (hp : p ‚â† 0) (hŒº : Œº ‚â† 0) (c : E) :
    nnLpNorm (fun _x ‚Ü¶ c) p Œº = ‚Äñc‚Äñ‚Çä * (Œº Set.univ).toNNReal ^ p.toReal‚Åª¬π := by
  simp [nnLpNorm, eLpNorm_const c hp hŒº]

@[simp] lemma nnLpNorm_const' (hp‚ÇÄ : p ‚â† 0) (hp : p ‚â† ‚àû) (c : E) :
    nnLpNorm (fun _x ‚Ü¶ c) p Œº = ‚Äñc‚Äñ‚Çä * (Œº Set.univ).toNNReal ^ p.toReal‚Åª¬π := by
  simp [nnLpNorm, eLpNorm_const' c hp‚ÇÄ hp]

section NormedField
variable {ùïú : Type*} [NormedField ùïú]

@[simp] lemma nnLpNorm_one (hp : p ‚â† 0) (hŒº : Œº ‚â† 0) :
    nnLpNorm (1 : Œ± ‚Üí ùïú) p Œº = (Œº Set.univ).toNNReal ^ (p.toReal‚Åª¬π : ‚Ñù) := by
  simp [Pi.one_def, nnLpNorm_const hp hŒº]

@[simp] lemma nnLpNorm_one' (hp‚ÇÄ : p ‚â† 0) (hp : p ‚â† ‚àû) (Œº : Measure Œ±) :
    nnLpNorm (1 : Œ± ‚Üí ùïú) p Œº = (Œº Set.univ).toNNReal ^ (p.toReal‚Åª¬π : ‚Ñù) := by
  simp [Pi.one_def, nnLpNorm_const' hp‚ÇÄ hp]

lemma nnLpNorm_const_smul [Module ùïú E] [NormSMulClass ùïú E] (c : ùïú) (f : Œ± ‚Üí E) (Œº : Measure Œ±) :
    nnLpNorm (c ‚Ä¢ f) p Œº = ‚Äñc‚Äñ‚Çä * nnLpNorm f p Œº := by simp [nnLpNorm, eLpNorm_const_smul]

lemma nnLpNorm_nsmul [NormedSpace ‚Ñù E] (n : ‚Ñï) (f : Œ± ‚Üí E) (Œº : Measure Œ±) :
    nnLpNorm (n ‚Ä¢ f) p Œº = n ‚Ä¢ nnLpNorm f p Œº := by simp [nnLpNorm, eLpNorm_nsmul]

variable [NormedSpace ‚Ñù ùïú]

lemma nnLpNorm_natCast_mul (n : ‚Ñï) (f : Œ± ‚Üí ùïú) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :
    nnLpNorm ((n : Œ± ‚Üí ùïú) * f) p Œº = n * nnLpNorm f p Œº := by
  simpa only [nsmul_eq_mul] using nnLpNorm_nsmul n f Œº

lemma nnLpNorm_natCast_mul' (n : ‚Ñï) (f : Œ± ‚Üí ùïú) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :
    nnLpNorm (n * f ¬∑) p Œº = n * nnLpNorm f p Œº := nnLpNorm_natCast_mul ..

lemma nnLpNorm_mul_natCast (f : Œ± ‚Üí ùïú) (n : ‚Ñï) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :
    nnLpNorm (f * (n : Œ± ‚Üí ùïú)) p Œº = nnLpNorm f p Œº * n := by
  simpa only [mul_comm] using nnLpNorm_natCast_mul n f p Œº

lemma nnLpNorm_mul_natCast' (f : Œ± ‚Üí ùïú) (n : ‚Ñï) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :
    nnLpNorm (f ¬∑ * n) p Œº = nnLpNorm f p Œº * n := nnLpNorm_mul_natCast ..

lemma nnLpNorm_div_natCast [CharZero ùïú] {n : ‚Ñï} (hn : n ‚â† 0) (f : Œ± ‚Üí ùïú) (p : ‚Ñù‚â•0‚àû)
    (Œº : Measure Œ±) : nnLpNorm (f / (n : Œ± ‚Üí ùïú)) p Œº = nnLpNorm f p Œº / n := by
  rw [eq_div_iff (by positivity), ‚Üê nnLpNorm_mul_natCast]; simp [Pi.mul_def, hn]

lemma nnLpNorm_div_natCast' [CharZero ùïú] {n : ‚Ñï} (hn : n ‚â† 0) (f : Œ± ‚Üí ùïú) (p : ‚Ñù‚â•0‚àû)
    (Œº : Measure Œ±) : nnLpNorm (f ¬∑ / n) p Œº = nnLpNorm f p Œº / n := nnLpNorm_div_natCast hn ..

end NormedField

lemma nnLpNorm_add_le (hf : MemLp f p Œº) (hg : MemLp g p Œº) (hp : 1 ‚â§ p) :
    nnLpNorm (f + g) p Œº ‚â§ nnLpNorm f p Œº + nnLpNorm g p Œº := by
  unfold nnLpNorm
  rw [‚Üê ENNReal.toNNReal_add hf.eLpNorm_ne_top hg.eLpNorm_ne_top]
  gcongr
  exacts [ENNReal.add_ne_top.2 ‚ü®hf.eLpNorm_ne_top, hg.eLpNorm_ne_top‚ü©,
    eLpNorm_add_le hf.aestronglyMeasurable hg.aestronglyMeasurable hp]

lemma nnLpNorm_sub_le (hf : MemLp f p Œº) (hg : MemLp g p Œº) (hp : 1 ‚â§ p) :
    nnLpNorm (f - g) p Œº ‚â§ nnLpNorm f p Œº + nnLpNorm g p Œº := by
  simpa [sub_eq_add_neg] using nnLpNorm_add_le hf hg.neg hp

lemma nnLpNorm_le_nnLpNorm_add_nnLpNorm_sub' (hf : MemLp f p Œº) (hg : MemLp g p Œº) (hp : 1 ‚â§ p) :
    nnLpNorm f p Œº ‚â§ nnLpNorm g p Œº + nnLpNorm (f - g) p Œº := by
  simpa using nnLpNorm_add_le hg (hf.sub hg) hp

lemma nnLpNorm_le_nnLpNorm_add_nnLpNorm_sub (hf : MemLp f p Œº) (hg : MemLp g p Œº) (hp : 1 ‚â§ p) :
    nnLpNorm f p Œº ‚â§ nnLpNorm g p Œº + nnLpNorm (g - f) p Œº := by
  simpa [neg_add_eq_sub] using nnLpNorm_add_le hg.neg (hg.sub hf) hp

lemma nnLpNorm_le_add_nnLpNorm_add (hf : MemLp f p Œº) (hg : MemLp g p Œº) (hp : 1 ‚â§ p) :
    nnLpNorm f p Œº ‚â§ nnLpNorm (f + g) p Œº + nnLpNorm g p Œº := by
  simpa using nnLpNorm_add_le (hf.add hg) hg.neg hp

lemma nnLpNorm_sub_le_nnLpNorm_sub_add_nnLpNorm_sub (hf : MemLp f p Œº) (hg : MemLp g p Œº)
    (hh : MemLp h p Œº) (hp : 1 ‚â§ p) :
    nnLpNorm (f - h) p Œº ‚â§ nnLpNorm (f - g) p Œº + nnLpNorm (g - h) p Œº := by
  simpa using nnLpNorm_add_le (hf.sub hg) (hg.sub hh) hp

lemma nnLpNorm_sum_le {Œπ : Type*} {s : Finset Œπ} {f : Œπ ‚Üí Œ± ‚Üí E} (hf : ‚àÄ i ‚àà s, MemLp (f i) p Œº)
    (hp : 1 ‚â§ p) : nnLpNorm (‚àë i ‚àà s, f i) p Œº ‚â§ ‚àë i ‚àà s, nnLpNorm (f i) p Œº := by
  rw [‚Üê ENNReal.coe_le_coe, coe_nnLpNorm_eq_eLpNorm (memLp_finset_sum' s hf:),
    ENNReal.coe_finset_sum]
  exact (eLpNorm_sum_le (fun i hi ‚Ü¶ (hf _ hi).aestronglyMeasurable) hp).trans_eq <|
    Finset.sum_congr rfl fun i hi ‚Ü¶ (coe_nnLpNorm_eq_eLpNorm (hf i hi)).symm

-- TODO: Golf using `eLpNorm_expect_le` once it exists
lemma nnLpNorm_expect_le [Module ‚Ñö‚â•0 E] [NormedSpace ‚Ñù E] {Œπ : Type*} {s : Finset Œπ}
    {f : Œπ ‚Üí Œ± ‚Üí E} (hf : ‚àÄ i ‚àà s, MemLp (f i) p Œº) (hp : 1 ‚â§ p) :
    nnLpNorm (ùîº i ‚àà s, f i) p Œº ‚â§ ùîº i ‚àà s, nnLpNorm (f i) p Œº  :=  by
  obtain rfl | hs := s.eq_empty_or_nonempty
  ¬∑ simp
  refine (le_inv_smul_iff_of_pos <| by positivity).2 ?_
  rw [Nat.cast_smul_eq_nsmul, ‚Üê nnLpNorm_nsmul, Finset.card_smul_expect]
  exact nnLpNorm_sum_le hf hp

lemma nnLpNorm_mono_real {g : Œ± ‚Üí ‚Ñù} (hg : MemLp g p Œº) (h : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ g x) :
    nnLpNorm f p Œº ‚â§ nnLpNorm g p Œº :=
  ENNReal.toNNReal_mono (hg.eLpNorm_ne_top) (eLpNorm_mono_real h)

lemma nnLpNorm_smul_measure_of_ne_zero {f : Œ± ‚Üí E} {c : ‚Ñù‚â•0} (hc : c ‚â† 0) :
    nnLpNorm f p (c ‚Ä¢ Œº) = c ^ p.toReal‚Åª¬π ‚Ä¢ nnLpNorm f p Œº := by
  simp [nnLpNorm, eLpNorm_smul_measure_of_ne_zero' hc f p Œº]

lemma nnLpNorm_smul_measure_of_ne_top (hp : p ‚â† ‚àû) {f : Œ± ‚Üí E} (c : ‚Ñù‚â•0) :
    nnLpNorm f p (c ‚Ä¢ Œº) = c ^ p.toReal‚Åª¬π ‚Ä¢ nnLpNorm f p Œº := by
  simp [nnLpNorm, eLpNorm_smul_measure_of_ne_top' hp]

@[simp] lemma nnLpNorm_conj {K : Type*} [RCLike K] (f : Œ± ‚Üí K) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :
    nnLpNorm (conj f) p Œº = nnLpNorm f p Œº := by simp [‚Üê nnLpNorm_norm]

end MeasureTheory
