/-
Copyright (c) 2021 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.MeasureTheory.Function.LpSeminorm.Basic
import Mathlib.MeasureTheory.Integral.MeanInequalities

#align_import measure_theory.function.lp_seminorm from "leanprover-community/mathlib"@"c4015acc0a223449d44061e27ddac1835a3852b9"

/-!
# Triangle inequality for `Lp`-seminorm

In this file we prove several versions of the triangle inequality for the `Lp` seminorm,
as well as simple corollaries.
-/

open Filter
open scoped ENNReal Topology BigOperators

namespace MeasureTheory

variable {Œ± E : Type*} {m : MeasurableSpace Œ±} [NormedAddCommGroup E]
  {p : ‚Ñù‚â•0‚àû} {q : ‚Ñù} {Œº : Measure Œ±} {f g : Œ± ‚Üí E}

theorem snorm'_add_le {f g : Œ± ‚Üí E} (hf : AEStronglyMeasurable f Œº) (hg : AEStronglyMeasurable g Œº)
    (hq1 : 1 ‚â§ q) : snorm' (f + g) q Œº ‚â§ snorm' f q Œº + snorm' g q Œº :=
  calc
    (‚à´‚Åª a, (‚Äñ(f + g) a‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ q ‚àÇŒº) ^ (1 / q) ‚â§
        (‚à´‚Åª a, ((fun a => (‚Äñf a‚Äñ‚Çä : ‚Ñù‚â•0‚àû)) + fun a => (‚Äñg a‚Äñ‚Çä : ‚Ñù‚â•0‚àû)) a ^ q ‚àÇŒº) ^ (1 / q) := by
      gcongr with a
      simp only [Pi.add_apply, ‚Üê ENNReal.coe_add, ENNReal.coe_le_coe, nnnorm_add_le]
    _ ‚â§ snorm' f q Œº + snorm' g q Œº := ENNReal.lintegral_Lp_add_le hf.ennnorm hg.ennnorm hq1
#align measure_theory.snorm'_add_le MeasureTheory.snorm'_add_le

theorem snorm'_add_le_of_le_one {f g : Œ± ‚Üí E} (hf : AEStronglyMeasurable f Œº) (hq0 : 0 ‚â§ q)
    (hq1 : q ‚â§ 1) : snorm' (f + g) q Œº ‚â§ (2 : ‚Ñù‚â•0‚àû) ^ (1 / q - 1) * (snorm' f q Œº + snorm' g q Œº) :=
  calc
    (‚à´‚Åª a, (‚Äñ(f + g) a‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ q ‚àÇŒº) ^ (1 / q) ‚â§
        (‚à´‚Åª a, ((fun a => (‚Äñf a‚Äñ‚Çä : ‚Ñù‚â•0‚àû)) + fun a => (‚Äñg a‚Äñ‚Çä : ‚Ñù‚â•0‚àû)) a ^ q ‚àÇŒº) ^ (1 / q) := by
      gcongr with a
      simp only [Pi.add_apply, ‚Üê ENNReal.coe_add, ENNReal.coe_le_coe, nnnorm_add_le]
    _ ‚â§ (2 : ‚Ñù‚â•0‚àû) ^ (1 / q - 1) * (snorm' f q Œº + snorm' g q Œº) :=
      ENNReal.lintegral_Lp_add_le_of_le_one hf.ennnorm hq0 hq1
#align measure_theory.snorm'_add_le_of_le_one MeasureTheory.snorm'_add_le_of_le_one

theorem snormEssSup_add_le {f g : Œ± ‚Üí E} :
    snormEssSup (f + g) Œº ‚â§ snormEssSup f Œº + snormEssSup g Œº := by
  refine' le_trans (essSup_mono_ae (eventually_of_forall fun x => _)) (ENNReal.essSup_add_le _ _)
  simp_rw [Pi.add_apply, ‚Üê ENNReal.coe_add, ENNReal.coe_le_coe]
  exact nnnorm_add_le _ _
#align measure_theory.snorm_ess_sup_add_le MeasureTheory.snormEssSup_add_le

theorem snorm_add_le {f g : Œ± ‚Üí E} (hf : AEStronglyMeasurable f Œº) (hg : AEStronglyMeasurable g Œº)
    (hp1 : 1 ‚â§ p) : snorm (f + g) p Œº ‚â§ snorm f p Œº + snorm g p Œº := by
  by_cases hp0 : p = 0
  ¬∑ simp [hp0]
  by_cases hp_top : p = ‚àû
  ¬∑ simp [hp_top, snormEssSup_add_le]
  have hp1_real : 1 ‚â§ p.toReal := by
    rwa [‚Üê ENNReal.one_toReal, ENNReal.toReal_le_toReal ENNReal.one_ne_top hp_top]
  repeat rw [snorm_eq_snorm' hp0 hp_top]
  exact snorm'_add_le hf hg hp1_real
#align measure_theory.snorm_add_le MeasureTheory.snorm_add_le

/-- A constant for the inequality `‚Äñf + g‚Äñ_{L^p} ‚â§ C * (‚Äñf‚Äñ_{L^p} + ‚Äñg‚Äñ_{L^p})`. It is equal to `1`
for `p ‚â• 1` or `p = 0`, and `2^(1/p-1)` in the more tricky interval `(0, 1)`. -/
noncomputable def LpAddConst (p : ‚Ñù‚â•0‚àû) : ‚Ñù‚â•0‚àû :=
  if p ‚àà Set.Ioo (0 : ‚Ñù‚â•0‚àû) 1 then (2 : ‚Ñù‚â•0‚àû) ^ (1 / p.toReal - 1) else 1
set_option linter.uppercaseLean3 false in
#align measure_theory.Lp_add_const MeasureTheory.LpAddConst

theorem LpAddConst_of_one_le {p : ‚Ñù‚â•0‚àû} (hp : 1 ‚â§ p) : LpAddConst p = 1 := by
  rw [LpAddConst, if_neg]
  intro h
  exact lt_irrefl _ (h.2.trans_le hp)
set_option linter.uppercaseLean3 false in
#align measure_theory.Lp_add_const_of_one_le MeasureTheory.LpAddConst_of_one_le

theorem LpAddConst_zero : LpAddConst 0 = 1 := by
  rw [LpAddConst, if_neg]
  intro h
  exact lt_irrefl _ h.1
set_option linter.uppercaseLean3 false in
#align measure_theory.Lp_add_const_zero MeasureTheory.LpAddConst_zero

theorem LpAddConst_lt_top (p : ‚Ñù‚â•0‚àû) : LpAddConst p < ‚àû := by
  rw [LpAddConst]
  split_ifs with h
  ¬∑ apply ENNReal.rpow_lt_top_of_nonneg _ ENNReal.two_ne_top
    simp only [one_div, sub_nonneg]
    apply one_le_inv (ENNReal.toReal_pos h.1.ne' (h.2.trans ENNReal.one_lt_top).ne)
    simpa using ENNReal.toReal_mono ENNReal.one_ne_top h.2.le
  ¬∑ exact ENNReal.one_lt_top
set_option linter.uppercaseLean3 false in
#align measure_theory.Lp_add_const_lt_top MeasureTheory.LpAddConst_lt_top

theorem snorm_add_le' {f g : Œ± ‚Üí E} (hf : AEStronglyMeasurable f Œº) (hg : AEStronglyMeasurable g Œº)
    (p : ‚Ñù‚â•0‚àû) : snorm (f + g) p Œº ‚â§ LpAddConst p * (snorm f p Œº + snorm g p Œº) := by
  rcases eq_or_ne p 0 with (rfl | hp)
  ¬∑ simp only [snorm_exponent_zero, add_zero, mul_zero, le_zero_iff]
  rcases lt_or_le p 1 with (h'p | h'p)
  ¬∑ simp only [snorm_eq_snorm' hp (h'p.trans ENNReal.one_lt_top).ne]
    convert snorm'_add_le_of_le_one hf ENNReal.toReal_nonneg _
    ¬∑ have : p ‚àà Set.Ioo (0 : ‚Ñù‚â•0‚àû) 1 := ‚ü®hp.bot_lt, h'p‚ü©
      simp only [LpAddConst, if_pos this]
    ¬∑ simpa using ENNReal.toReal_mono ENNReal.one_ne_top h'p.le
  ¬∑ simp [LpAddConst_of_one_le h'p]
    exact snorm_add_le hf hg h'p
#align measure_theory.snorm_add_le' MeasureTheory.snorm_add_le'

variable (Œº E)

/-- Technical lemma to control the addition of functions in `L^p` even for `p < 1`: Given `Œ¥ > 0`,
there exists `Œ∑` such that two functions bounded by `Œ∑` in `L^p` have a sum bounded by `Œ¥`. One
could take `Œ∑ = Œ¥ / 2` for `p ‚â• 1`, but the point of the lemma is that it works also for `p < 1`.
-/
theorem exists_Lp_half (p : ‚Ñù‚â•0‚àû) {Œ¥ : ‚Ñù‚â•0‚àû} (hŒ¥ : Œ¥ ‚â† 0) :
    ‚àÉ Œ∑ : ‚Ñù‚â•0‚àû,
      0 < Œ∑ ‚àß
        ‚àÄ (f g : Œ± ‚Üí E), AEStronglyMeasurable f Œº ‚Üí AEStronglyMeasurable g Œº ‚Üí
          snorm f p Œº ‚â§ Œ∑ ‚Üí snorm g p Œº ‚â§ Œ∑ ‚Üí snorm (f + g) p Œº < Œ¥ := by
  have :
    Tendsto (fun Œ∑ : ‚Ñù‚â•0‚àû => LpAddConst p * (Œ∑ + Œ∑)) (ùìù[>] 0) (ùìù (LpAddConst p * (0 + 0))) :=
    (ENNReal.Tendsto.const_mul (tendsto_id.add tendsto_id)
          (Or.inr (LpAddConst_lt_top p).ne)).mono_left
      nhdsWithin_le_nhds
  simp only [add_zero, mul_zero] at this
  rcases (((tendsto_order.1 this).2 Œ¥ hŒ¥.bot_lt).and self_mem_nhdsWithin).exists with ‚ü®Œ∑, hŒ∑, Œ∑pos‚ü©
  refine ‚ü®Œ∑, Œ∑pos, fun f g hf hg Hf Hg => ?_‚ü©
  calc
    snorm (f + g) p Œº ‚â§ LpAddConst p * (snorm f p Œº + snorm g p Œº) := snorm_add_le' hf hg p
    _ ‚â§ LpAddConst p * (Œ∑ + Œ∑) := by gcongr
    _ < Œ¥ := hŒ∑
set_option linter.uppercaseLean3 false in
#align measure_theory.exists_Lp_half MeasureTheory.exists_Lp_half

variable {Œº E}

theorem snorm_sub_le' {f g : Œ± ‚Üí E} (hf : AEStronglyMeasurable f Œº) (hg : AEStronglyMeasurable g Œº)
    (p : ‚Ñù‚â•0‚àû) : snorm (f - g) p Œº ‚â§ LpAddConst p * (snorm f p Œº + snorm g p Œº) := by
  simpa only [sub_eq_add_neg, snorm_neg] using snorm_add_le' hf hg.neg p
#align measure_theory.snorm_sub_le' MeasureTheory.snorm_sub_le'

theorem snorm_sub_le {f g : Œ± ‚Üí E} (hf : AEStronglyMeasurable f Œº) (hg : AEStronglyMeasurable g Œº)
    (hp : 1 ‚â§ p) : snorm (f - g) p Œº ‚â§ snorm f p Œº + snorm g p Œº := by
  simpa [LpAddConst_of_one_le hp] using snorm_sub_le' hf hg p
#align measure_theory.snorm_sub_le MeasureTheory.snorm_sub_le

theorem snorm_add_lt_top {f g : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) :
    snorm (f + g) p Œº < ‚àû :=
  calc
    snorm (f + g) p Œº ‚â§ LpAddConst p * (snorm f p Œº + snorm g p Œº) :=
      snorm_add_le' hf.aestronglyMeasurable hg.aestronglyMeasurable p
    _ < ‚àû := by
      apply ENNReal.mul_lt_top (LpAddConst_lt_top p).ne
      exact (ENNReal.add_lt_top.2 ‚ü®hf.2, hg.2‚ü©).ne
#align measure_theory.snorm_add_lt_top MeasureTheory.snorm_add_lt_top

theorem snorm'_sum_le {Œπ} {f : Œπ ‚Üí Œ± ‚Üí E} {s : Finset Œπ}
    (hfs : ‚àÄ i, i ‚àà s ‚Üí AEStronglyMeasurable (f i) Œº) (hq1 : 1 ‚â§ q) :
    snorm' (‚àë i in s, f i) q Œº ‚â§ ‚àë i in s, snorm' (f i) q Œº :=
  Finset.le_sum_of_subadditive_on_pred (fun f : Œ± ‚Üí E => snorm' f q Œº)
    (fun f => AEStronglyMeasurable f Œº) (snorm'_zero (zero_lt_one.trans_le hq1))
    (fun _f _g hf hg => snorm'_add_le hf hg hq1) (fun _f _g hf hg => hf.add hg) _ hfs
#align measure_theory.snorm'_sum_le MeasureTheory.snorm'_sum_le

theorem snorm_sum_le {Œπ} {f : Œπ ‚Üí Œ± ‚Üí E} {s : Finset Œπ}
    (hfs : ‚àÄ i, i ‚àà s ‚Üí AEStronglyMeasurable (f i) Œº) (hp1 : 1 ‚â§ p) :
    snorm (‚àë i in s, f i) p Œº ‚â§ ‚àë i in s, snorm (f i) p Œº :=
  Finset.le_sum_of_subadditive_on_pred (fun f : Œ± ‚Üí E => snorm f p Œº)
    (fun f => AEStronglyMeasurable f Œº) snorm_zero (fun _f _g hf hg => snorm_add_le hf hg hp1)
    (fun _f _g hf hg => hf.add hg) _ hfs
#align measure_theory.snorm_sum_le MeasureTheory.snorm_sum_le

theorem Mem‚Ñíp.add {f g : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) : Mem‚Ñíp (f + g) p Œº :=
  ‚ü®AEStronglyMeasurable.add hf.1 hg.1, snorm_add_lt_top hf hg‚ü©
#align measure_theory.mem_‚Ñíp.add MeasureTheory.Mem‚Ñíp.add

theorem Mem‚Ñíp.sub {f g : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) : Mem‚Ñíp (f - g) p Œº := by
  rw [sub_eq_add_neg]
  exact hf.add hg.neg
#align measure_theory.mem_‚Ñíp.sub MeasureTheory.Mem‚Ñíp.sub

theorem mem‚Ñíp_finset_sum {Œπ} (s : Finset Œπ) {f : Œπ ‚Üí Œ± ‚Üí E} (hf : ‚àÄ i ‚àà s, Mem‚Ñíp (f i) p Œº) :
    Mem‚Ñíp (fun a => ‚àë i in s, f i a) p Œº := by
  haveI : DecidableEq Œπ := Classical.decEq _
  revert hf
  refine' Finset.induction_on s _ _
  ¬∑ simp only [zero_mem_‚Ñíp', Finset.sum_empty, imp_true_iff]
  ¬∑ intro i s his ih hf
    simp only [his, Finset.sum_insert, not_false_iff]
    exact (hf i (s.mem_insert_self i)).add (ih fun j hj => hf j (Finset.mem_insert_of_mem hj))
#align measure_theory.mem_‚Ñíp_finset_sum MeasureTheory.mem‚Ñíp_finset_sum

theorem mem‚Ñíp_finset_sum' {Œπ} (s : Finset Œπ) {f : Œπ ‚Üí Œ± ‚Üí E} (hf : ‚àÄ i ‚àà s, Mem‚Ñíp (f i) p Œº) :
    Mem‚Ñíp (‚àë i in s, f i) p Œº := by
  convert mem‚Ñíp_finset_sum s hf using 1
  ext x
  simp
#align measure_theory.mem_‚Ñíp_finset_sum' MeasureTheory.mem‚Ñíp_finset_sum'
