/-
Copyright (c) 2022 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import Mathlib.MeasureTheory.Function.StronglyMeasurable.Basic

#align_import measure_theory.function.egorov from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# Egorov theorem

This file contains the Egorov theorem which states that an almost everywhere convergent
sequence on a finite measure space converges uniformly except on an arbitrarily small set.
This theorem is useful for the Vitali convergence theorem as well as theorems regarding
convergence in measure.

## Main results

* `MeasureTheory.Egorov`: Egorov's theorem which shows that a sequence of almost everywhere
  convergent functions converges uniformly except on an arbitrarily small set.

-/


noncomputable section

open scoped Classical
open MeasureTheory NNReal ENNReal Topology

namespace MeasureTheory

open Set Filter TopologicalSpace

variable {Œ± Œ≤ Œπ : Type*} {m : MeasurableSpace Œ±} [MetricSpace Œ≤] {Œº : Measure Œ±}

namespace Egorov

/-- Given a sequence of functions `f` and a function `g`, `notConvergentSeq f g n j` is the
set of elements such that `f k x` and `g x` are separated by at least `1 / (n + 1)` for some
`k ‚â• j`.

This definition is useful for Egorov's theorem. -/
def notConvergentSeq [Preorder Œπ] (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≤) (n : ‚Ñï) (j : Œπ) : Set Œ± :=
  ‚ãÉ (k) (_ : j ‚â§ k), { x | 1 / (n + 1 : ‚Ñù) < dist (f k x) (g x) }
#align measure_theory.egorov.not_convergent_seq MeasureTheory.Egorov.notConvergentSeq

variable {n : ‚Ñï} {i j : Œπ} {s : Set Œ±} {Œµ : ‚Ñù} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}

theorem mem_notConvergentSeq_iff [Preorder Œπ] {x : Œ±} :
    x ‚àà notConvergentSeq f g n j ‚Üî ‚àÉ k ‚â• j, 1 / (n + 1 : ‚Ñù) < dist (f k x) (g x) := by
  simp_rw [notConvergentSeq, Set.mem_iUnion, exists_prop, mem_setOf]
#align measure_theory.egorov.mem_not_convergent_seq_iff MeasureTheory.Egorov.mem_notConvergentSeq_iff

theorem notConvergentSeq_antitone [Preorder Œπ] : Antitone (notConvergentSeq f g n) :=
  fun _ _ hjk => Set.iUnion‚ÇÇ_mono' fun l hl => ‚ü®l, le_trans hjk hl, Set.Subset.rfl‚ü©
#align measure_theory.egorov.not_convergent_seq_antitone MeasureTheory.Egorov.notConvergentSeq_antitone

theorem measure_inter_notConvergentSeq_eq_zero [SemilatticeSup Œπ] [Nonempty Œπ]
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) (n : ‚Ñï) :
    Œº (s ‚à© ‚ãÇ j, notConvergentSeq f g n j) = 0 := by
  simp_rw [Metric.tendsto_atTop, ae_iff] at hfg
  rw [‚Üê nonpos_iff_eq_zero, ‚Üê hfg]
  refine' measure_mono fun x => _
  simp only [Set.mem_inter_iff, Set.mem_iInter, ge_iff_le, mem_notConvergentSeq_iff]
  push_neg
  rintro ‚ü®hmem, hx‚ü©
  refine' ‚ü®hmem, 1 / (n + 1 : ‚Ñù), Nat.one_div_pos_of_nat, fun N => _‚ü©
  obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© := hx N
  exact ‚ü®n, hn‚ÇÅ, hn‚ÇÇ.le‚ü©
#align measure_theory.egorov.measure_inter_not_convergent_seq_eq_zero MeasureTheory.Egorov.measure_inter_notConvergentSeq_eq_zero

theorem notConvergentSeq_measurableSet [Preorder Œπ] [Countable Œπ]
    (hf : ‚àÄ n, StronglyMeasurable[m] (f n)) (hg : StronglyMeasurable g) :
    MeasurableSet (notConvergentSeq f g n j) :=
  MeasurableSet.iUnion fun k =>
    MeasurableSet.iUnion fun _ =>
      StronglyMeasurable.measurableSet_lt stronglyMeasurable_const <| (hf k).dist hg
#align measure_theory.egorov.not_convergent_seq_measurable_set MeasureTheory.Egorov.notConvergentSeq_measurableSet

theorem measure_notConvergentSeq_tendsto_zero [SemilatticeSup Œπ] [Countable Œπ]
    (hf : ‚àÄ n, StronglyMeasurable (f n)) (hg : StronglyMeasurable g) (hsm : MeasurableSet s)
    (hs : Œº s ‚â† ‚àû) (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) (n : ‚Ñï) :
    Tendsto (fun j => Œº (s ‚à© notConvergentSeq f g n j)) atTop (ùìù 0) := by
  cases' isEmpty_or_nonempty Œπ with h h
  ¬∑ have : (fun j => Œº (s ‚à© notConvergentSeq f g n j)) = fun j => 0 := by
      simp only [eq_iff_true_of_subsingleton]
    rw [this]
    exact tendsto_const_nhds
  rw [‚Üê measure_inter_notConvergentSeq_eq_zero hfg n, Set.inter_iInter]
  refine' tendsto_measure_iInter (fun n => hsm.inter <| notConvergentSeq_measurableSet hf hg)
    (fun k l hkl => Set.inter_subset_inter_right _ <| notConvergentSeq_antitone hkl)
    ‚ü®h.some,
      (lt_of_le_of_lt (measure_mono <| Set.inter_subset_left _ _) (lt_top_iff_ne_top.2 hs)).ne‚ü©
#align measure_theory.egorov.measure_not_convergent_seq_tendsto_zero MeasureTheory.Egorov.measure_notConvergentSeq_tendsto_zero

variable [SemilatticeSup Œπ] [Nonempty Œπ] [Countable Œπ]

theorem exists_notConvergentSeq_lt (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) (n : ‚Ñï) :
    ‚àÉ j : Œπ, Œº (s ‚à© notConvergentSeq f g n j) ‚â§ ENNReal.ofReal (Œµ * 2‚Åª¬π ^ n) := by
  have ‚ü®N, hN‚ü© := (ENNReal.tendsto_atTop ENNReal.zero_ne_top).1
    (measure_notConvergentSeq_tendsto_zero hf hg hsm hs hfg n) (ENNReal.ofReal (Œµ * 2‚Åª¬π ^ n)) (by
      rw [gt_iff_lt, ENNReal.ofReal_pos]
      exact mul_pos hŒµ (pow_pos (by norm_num) n))
  rw [zero_add] at hN
  exact ‚ü®N, (hN N le_rfl).2‚ü©
#align measure_theory.egorov.exists_not_convergent_seq_lt MeasureTheory.Egorov.exists_notConvergentSeq_lt

/-- Given some `Œµ > 0`, `notConvergentSeqLTIndex` provides the index such that
`notConvergentSeq` (intersected with a set of finite measure) has measure less than
`Œµ * 2‚Åª¬π ^ n`.

This definition is useful for Egorov's theorem. -/
def notConvergentSeqLTIndex (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) (n : ‚Ñï) : Œπ :=
  Classical.choose <| exists_notConvergentSeq_lt hŒµ hf hg hsm hs hfg n
#align measure_theory.egorov.not_convergent_seq_lt_index MeasureTheory.Egorov.notConvergentSeqLTIndex

theorem notConvergentSeqLTIndex_spec (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) (n : ‚Ñï) :
    Œº (s ‚à© notConvergentSeq f g n (notConvergentSeqLTIndex hŒµ hf hg hsm hs hfg n)) ‚â§
      ENNReal.ofReal (Œµ * 2‚Åª¬π ^ n) :=
  Classical.choose_spec <| exists_notConvergentSeq_lt hŒµ hf hg hsm hs hfg n
#align measure_theory.egorov.not_convergent_seq_lt_index_spec MeasureTheory.Egorov.notConvergentSeqLTIndex_spec

/-- Given some `Œµ > 0`, `iUnionNotConvergentSeq` is the union of `notConvergentSeq` with
specific indices such that `iUnionNotConvergentSeq` has measure less equal than `Œµ`.

This definition is useful for Egorov's theorem. -/
def iUnionNotConvergentSeq (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) : Set Œ± :=
  ‚ãÉ n, s ‚à© notConvergentSeq f g n (notConvergentSeqLTIndex (half_pos hŒµ) hf hg hsm hs hfg n)
#align measure_theory.egorov.Union_not_convergent_seq MeasureTheory.Egorov.iUnionNotConvergentSeq

theorem iUnionNotConvergentSeq_measurableSet (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) :
    MeasurableSet <| iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg :=
  MeasurableSet.iUnion fun _ => hsm.inter <| notConvergentSeq_measurableSet hf hg
#align measure_theory.egorov.Union_not_convergent_seq_measurable_set MeasureTheory.Egorov.iUnionNotConvergentSeq_measurableSet

theorem measure_iUnionNotConvergentSeq (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) :
    Œº (iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg) ‚â§ ENNReal.ofReal Œµ := by
  refine' le_trans (measure_iUnion_le _) (le_trans
    (ENNReal.tsum_le_tsum <| notConvergentSeqLTIndex_spec (half_pos hŒµ) hf hg hsm hs hfg) _)
  simp_rw [ENNReal.ofReal_mul (half_pos hŒµ).le]
  rw [ENNReal.tsum_mul_left, ‚Üê ENNReal.ofReal_tsum_of_nonneg, inv_eq_one_div, tsum_geometric_two,
    ‚Üê ENNReal.ofReal_mul (half_pos hŒµ).le, div_mul_cancel‚ÇÄ Œµ two_ne_zero]
  ¬∑ exact fun n => pow_nonneg (by norm_num) _
  ¬∑ rw [inv_eq_one_div]
    exact summable_geometric_two
#align measure_theory.egorov.measure_Union_not_convergent_seq MeasureTheory.Egorov.measure_iUnionNotConvergentSeq

theorem iUnionNotConvergentSeq_subset (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) :
    iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg ‚äÜ s := by
  rw [iUnionNotConvergentSeq, ‚Üê Set.inter_iUnion]
  exact Set.inter_subset_left _ _
#align measure_theory.egorov.Union_not_convergent_seq_subset MeasureTheory.Egorov.iUnionNotConvergentSeq_subset

theorem tendstoUniformlyOn_diff_iUnionNotConvergentSeq (hŒµ : 0 < Œµ)
    (hf : ‚àÄ n, StronglyMeasurable (f n)) (hg : StronglyMeasurable g) (hsm : MeasurableSet s)
    (hs : Œº s ‚â† ‚àû) (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) :
    TendstoUniformlyOn f g atTop (s \ Egorov.iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg) := by
  rw [Metric.tendstoUniformlyOn_iff]
  intro Œ¥ hŒ¥
  obtain ‚ü®N, hN‚ü© := exists_nat_one_div_lt hŒ¥
  rw [eventually_atTop]
  refine' ‚ü®Egorov.notConvergentSeqLTIndex (half_pos hŒµ) hf hg hsm hs hfg N, fun n hn x hx => _‚ü©
  simp only [Set.mem_diff, Egorov.iUnionNotConvergentSeq, not_exists, Set.mem_iUnion,
    Set.mem_inter_iff, not_and, exists_and_left] at hx
  obtain ‚ü®hxs, hx‚ü© := hx
  specialize hx hxs N
  rw [Egorov.mem_notConvergentSeq_iff] at hx
  push_neg at hx
  rw [dist_comm]
  exact lt_of_le_of_lt (hx n hn) hN
#align measure_theory.egorov.tendsto_uniformly_on_diff_Union_not_convergent_seq MeasureTheory.Egorov.tendstoUniformlyOn_diff_iUnionNotConvergentSeq

end Egorov

variable [SemilatticeSup Œπ] [Nonempty Œπ] [Countable Œπ] {Œ≥ : Type*} [TopologicalSpace Œ≥]
  {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} {s : Set Œ±}

/-- **Egorov's theorem**: If `f : Œπ ‚Üí Œ± ‚Üí Œ≤` is a sequence of strongly measurable functions that
converges to `g : Œ± ‚Üí Œ≤` almost everywhere on a measurable set `s` of finite measure,
then for all `Œµ > 0`, there exists a subset `t ‚äÜ s` such that `Œº t ‚â§ Œµ` and `f` converges to `g`
uniformly on `s \ t`. We require the index type `Œπ` to be countable, and usually `Œπ = ‚Ñï`.

In other words, a sequence of almost everywhere convergent functions converges uniformly except on
an arbitrarily small set. -/
theorem tendstoUniformlyOn_of_ae_tendsto (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ t ‚äÜ s, MeasurableSet t ‚àß Œº t ‚â§ ENNReal.ofReal Œµ ‚àß TendstoUniformlyOn f g atTop (s \ t) :=
  ‚ü®Egorov.iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg,
    Egorov.iUnionNotConvergentSeq_subset hŒµ hf hg hsm hs hfg,
    Egorov.iUnionNotConvergentSeq_measurableSet hŒµ hf hg hsm hs hfg,
    Egorov.measure_iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg,
    Egorov.tendstoUniformlyOn_diff_iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg‚ü©
#align measure_theory.tendsto_uniformly_on_of_ae_tendsto MeasureTheory.tendstoUniformlyOn_of_ae_tendsto

/-- Egorov's theorem for finite measure spaces. -/
theorem tendstoUniformlyOn_of_ae_tendsto' [IsFiniteMeasure Œº] (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hfg : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (g x))) {Œµ : ‚Ñù}
    (hŒµ : 0 < Œµ) :
    ‚àÉ t, MeasurableSet t ‚àß Œº t ‚â§ ENNReal.ofReal Œµ ‚àß TendstoUniformlyOn f g atTop t·∂ú := by
  have ‚ü®t, _, ht, htendsto‚ü© := tendstoUniformlyOn_of_ae_tendsto hf hg MeasurableSet.univ
    (measure_ne_top Œº Set.univ) (by filter_upwards [hfg] with _ htendsto _ using htendsto) hŒµ
  refine' ‚ü®_, ht, _‚ü©
  rwa [Set.compl_eq_univ_diff]
#align measure_theory.tendsto_uniformly_on_of_ae_tendsto' MeasureTheory.tendstoUniformlyOn_of_ae_tendsto'

end MeasureTheory
