/-
Copyright (c) 2020 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, S√©bastien Gou√´zel
-/
import Mathlib.Analysis.SpecialFunctions.Pow.Continuity
import Mathlib.MeasureTheory.Function.LpSpace.Basic
import Mathlib.Order.Filter.IndicatorFunction

/-!
# Indicator of a set as an element of `Lp`

For a set `s` with `(hs : MeasurableSet s)` and `(hŒºs : Œº s < ‚àû)`, we build
`indicatorConstLp p hs hŒºs c`, the element of `Lp` corresponding to `s.indicator (fun _ => c)`.

## Main definitions

* `MeasureTheory.indicatorConstLp`: Indicator of a set as an element of `Lp`.
* `MeasureTheory.Lp.const`: Constant function as an element of `Lp` for a finite measure.
-/

noncomputable section

open MeasureTheory Filter
open scoped NNReal ENNReal Topology symmDiff

variable {Œ± E : Type*} {m : MeasurableSpace Œ±} {p : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±} [NormedAddCommGroup E]

namespace MeasureTheory

/-- The `eLpNorm` of the indicator of a set is uniformly small if the set itself has small measure,
for any `p < ‚àû`. Given here as an existential `‚àÄ Œµ > 0, ‚àÉ Œ∑ > 0, ...` to avoid later
management of `‚Ñù‚â•0‚àû`-arithmetic. -/
theorem exists_eLpNorm_indicator_le (hp : p ‚â† ‚àû) (c : E) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) :
    ‚àÉ Œ∑ : ‚Ñù‚â•0, 0 < Œ∑ ‚àß ‚àÄ s : Set Œ±, Œº s ‚â§ Œ∑ ‚Üí eLpNorm (s.indicator fun _ => c) p Œº ‚â§ Œµ := by
  rcases eq_or_ne p 0 with (rfl | h'p)
  ¬∑ exact ‚ü®1, zero_lt_one, fun s _ => by simp‚ü©
  have hp‚ÇÄ : 0 < p := bot_lt_iff_ne_bot.2 h'p
  have hp‚ÇÄ' : 0 ‚â§ 1 / p.toReal := div_nonneg zero_le_one ENNReal.toReal_nonneg
  have hp‚ÇÄ'' : 0 < p.toReal := ENNReal.toReal_pos hp‚ÇÄ.ne' hp
  obtain ‚ü®Œ∑, hŒ∑_pos, hŒ∑_le‚ü© : ‚àÉ Œ∑ : ‚Ñù‚â•0, 0 < Œ∑ ‚àß ‚Äñc‚Äñ‚Çë * (Œ∑ : ‚Ñù‚â•0‚àû) ^ (1 / p.toReal) ‚â§ Œµ := by
    have :
      Filter.Tendsto (fun x : ‚Ñù‚â•0 => ((‚Äñc‚Äñ‚Çä * x ^ (1 / p.toReal) : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû)) (ùìù 0)
        (ùìù (0 : ‚Ñù‚â•0)) := by
      rw [ENNReal.tendsto_coe]
      convert (NNReal.continuousAt_rpow_const (Or.inr hp‚ÇÄ')).tendsto.const_mul _
      simp [hp‚ÇÄ''.ne']
    have hŒµ' : 0 < Œµ := hŒµ.bot_lt
    obtain ‚ü®Œ¥, hŒ¥, hŒ¥Œµ'‚ü© := NNReal.nhds_zero_basis.eventually_iff.mp (this.eventually_le_const hŒµ')
    obtain ‚ü®Œ∑, hŒ∑, hŒ∑Œ¥‚ü© := exists_between hŒ¥
    refine ‚ü®Œ∑, hŒ∑, ?_‚ü©
    simpa only [‚Üê ENNReal.coe_rpow_of_nonneg _ hp‚ÇÄ', enorm, ‚Üê ENNReal.coe_mul] using hŒ¥Œµ' hŒ∑Œ¥
  refine ‚ü®Œ∑, hŒ∑_pos, fun s hs => ?_‚ü©
  refine (eLpNorm_indicator_const_le _ _).trans (le_trans ?_ hŒ∑_le)
  exact mul_le_mul_left' (ENNReal.rpow_le_rpow hs hp‚ÇÄ') _

section Topology
variable {X : Type*} [TopologicalSpace X] [MeasurableSpace X]
  {Œº : Measure X} [IsFiniteMeasureOnCompacts Œº]

/-- A bounded measurable function with compact support is in L^p. -/
theorem _root_.HasCompactSupport.memLp_of_bound {f : X ‚Üí E} (hf : HasCompactSupport f)
    (h2f : AEStronglyMeasurable f Œº) (C : ‚Ñù) (hfC : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ C) : MemLp f p Œº := by
  have := memLp_top_of_bound h2f C hfC
  exact this.mono_exponent_of_measure_support_ne_top
    (fun x ‚Ü¶ image_eq_zero_of_nmem_tsupport) (hf.measure_lt_top.ne) le_top

@[deprecated (since := "2025-02-21")]
alias _root_.HasCompactSupport.mem‚Ñíp_of_bound := _root_.HasCompactSupport.memLp_of_bound

/-- A continuous function with compact support is in L^p. -/
theorem _root_.Continuous.memLp_of_hasCompactSupport [OpensMeasurableSpace X]
    {f : X ‚Üí E} (hf : Continuous f) (h'f : HasCompactSupport f) : MemLp f p Œº := by
  have := hf.memLp_top_of_hasCompactSupport h'f Œº
  exact this.mono_exponent_of_measure_support_ne_top
    (fun x ‚Ü¶ image_eq_zero_of_nmem_tsupport) (h'f.measure_lt_top.ne) le_top

@[deprecated (since := "2025-02-21")]
alias _root_.Continuous.mem‚Ñíp_of_hasCompactSupport := _root_.Continuous.memLp_of_hasCompactSupport

end Topology

section IndicatorConstLp

open Set Function

variable {s : Set Œ±} {hs : MeasurableSet s} {hŒºs : Œº s ‚â† ‚àû} {c : E}

/-- Indicator of a set as an element of `Lp`. -/
def indicatorConstLp (p : ‚Ñù‚â•0‚àû) (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) : Lp E p Œº :=
  MemLp.toLp (s.indicator fun _ => c) (memLp_indicator_const p hs c (Or.inr hŒºs))

/-- A version of `Set.indicator_add` for `MeasureTheory.indicatorConstLp` -/
theorem indicatorConstLp_add {c' : E} :
    indicatorConstLp p hs hŒºs c + indicatorConstLp p hs hŒºs c' =
    indicatorConstLp p hs hŒºs (c + c') := by
  simp_rw [indicatorConstLp, ‚Üê MemLp.toLp_add, indicator_add]
  rfl

/-- A version of `Set.indicator_sub` for `MeasureTheory.indicatorConstLp` -/
theorem indicatorConstLp_sub {c' : E} :
    indicatorConstLp p hs hŒºs c - indicatorConstLp p hs hŒºs c' =
    indicatorConstLp p hs hŒºs (c - c') := by
  simp_rw [indicatorConstLp, ‚Üê MemLp.toLp_sub, indicator_sub]
  rfl

theorem indicatorConstLp_coeFn : ‚áë(indicatorConstLp p hs hŒºs c) =·µê[Œº] s.indicator fun _ => c :=
  MemLp.coeFn_toLp (memLp_indicator_const p hs c (Or.inr hŒºs))

theorem indicatorConstLp_coeFn_mem : ‚àÄ·µê x : Œ± ‚àÇŒº, x ‚àà s ‚Üí indicatorConstLp p hs hŒºs c x = c :=
  indicatorConstLp_coeFn.mono fun _x hx hxs => hx.trans (Set.indicator_of_mem hxs _)

theorem indicatorConstLp_coeFn_nmem : ‚àÄ·µê x : Œ± ‚àÇŒº, x ‚àâ s ‚Üí indicatorConstLp p hs hŒºs c x = 0 :=
  indicatorConstLp_coeFn.mono fun _x hx hxs => hx.trans (Set.indicator_of_not_mem hxs _)

theorem norm_indicatorConstLp (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    ‚ÄñindicatorConstLp p hs hŒºs c‚Äñ = ‚Äñc‚Äñ * (Œº s).toReal ^ (1 / p.toReal) := by
  rw [Lp.norm_def, eLpNorm_congr_ae indicatorConstLp_coeFn,
    eLpNorm_indicator_const hs hp_ne_zero hp_ne_top, ENNReal.toReal_mul, ENNReal.toReal_rpow,
    toReal_enorm]

theorem norm_indicatorConstLp_top (hŒºs_ne_zero : Œº s ‚â† 0) :
    ‚ÄñindicatorConstLp ‚àû hs hŒºs c‚Äñ = ‚Äñc‚Äñ := by
  rw [Lp.norm_def, eLpNorm_congr_ae indicatorConstLp_coeFn,
    eLpNorm_indicator_const' hs hŒºs_ne_zero ENNReal.top_ne_zero, ENNReal.toReal_top,
    _root_.div_zero, ENNReal.rpow_zero, mul_one, toReal_enorm]

theorem norm_indicatorConstLp' (hp_pos : p ‚â† 0) (hŒºs_pos : Œº s ‚â† 0) :
    ‚ÄñindicatorConstLp p hs hŒºs c‚Äñ = ‚Äñc‚Äñ * (Œº s).toReal ^ (1 / p.toReal) := by
  by_cases hp_top : p = ‚àû
  ¬∑ rw [hp_top, ENNReal.toReal_top, _root_.div_zero, Real.rpow_zero, mul_one]
    exact norm_indicatorConstLp_top hŒºs_pos
  ¬∑ exact norm_indicatorConstLp hp_pos hp_top

theorem norm_indicatorConstLp_le :
    ‚ÄñindicatorConstLp p hs hŒºs c‚Äñ ‚â§ ‚Äñc‚Äñ * (Œº s).toReal ^ (1 / p.toReal) := by
  rw [indicatorConstLp, Lp.norm_toLp]
  refine ENNReal.toReal_le_of_le_ofReal (by positivity) ?_
  refine (eLpNorm_indicator_const_le _ _).trans_eq ?_
  rw [ENNReal.ofReal_mul (norm_nonneg _), ofReal_norm, ENNReal.toReal_rpow, ENNReal.ofReal_toReal]
  exact ENNReal.rpow_ne_top_of_nonneg (by positivity) hŒºs

theorem nnnorm_indicatorConstLp_le :
    ‚ÄñindicatorConstLp p hs hŒºs c‚Äñ‚Çä ‚â§ ‚Äñc‚Äñ‚Çä * (Œº s).toNNReal ^ (1 / p.toReal) :=
  norm_indicatorConstLp_le

theorem enorm_indicatorConstLp_le :
    ‚ÄñindicatorConstLp p hs hŒºs c‚Äñ‚Çë ‚â§ ‚Äñc‚Äñ‚Çë * Œº s ^ (1 / p.toReal) := by
  simpa [ENNReal.coe_rpow_of_nonneg, ENNReal.coe_toNNReal hŒºs, Lp.enorm_def, ‚Üê enorm_eq_nnnorm]
    using ENNReal.coe_le_coe.2 <| nnnorm_indicatorConstLp_le (c := c) (hŒºs := hŒºs)

@[deprecated (since := "2025-01-20")] alias ennnorm_indicatorConstLp_le := enorm_indicatorConstLp_le

theorem edist_indicatorConstLp_eq_enorm {t : Set Œ±} {ht : MeasurableSet t} {hŒºt : Œº t ‚â† ‚àû} :
    edist (indicatorConstLp p hs hŒºs c) (indicatorConstLp p ht hŒºt c) =
      ‚ÄñindicatorConstLp p (hs.symmDiff ht) (measure_symmDiff_ne_top hŒºs hŒºt) c‚Äñ‚Çë := by
  unfold indicatorConstLp
  rw [Lp.edist_toLp_toLp, eLpNorm_indicator_sub_indicator, Lp.enorm_toLp]

@[deprecated (since := "2025-01-20")]
alias edist_indicatorConstLp_eq_nnnorm := edist_indicatorConstLp_eq_enorm

theorem dist_indicatorConstLp_eq_norm {t : Set Œ±} {ht : MeasurableSet t} {hŒºt : Œº t ‚â† ‚àû} :
    dist (indicatorConstLp p hs hŒºs c) (indicatorConstLp p ht hŒºt c) =
      ‚ÄñindicatorConstLp p (hs.symmDiff ht) (measure_symmDiff_ne_top hŒºs hŒºt) c‚Äñ := by
  -- Squeezed for performance reasons
  simp only [Lp.dist_edist, edist_indicatorConstLp_eq_enorm, enorm, ENNReal.coe_toReal,
    Lp.coe_nnnorm]

/-- A family of `indicatorConstLp` functions tends to an `indicatorConstLp`,
if the underlying sets tend to the set in the sense of the measure of the symmetric difference. -/
theorem tendsto_indicatorConstLp_set [hp‚ÇÅ : Fact (1 ‚â§ p)] {Œ≤ : Type*} {l : Filter Œ≤} {t : Œ≤ ‚Üí Set Œ±}
    {ht : ‚àÄ b, MeasurableSet (t b)} {hŒºt : ‚àÄ b, Œº (t b) ‚â† ‚àû} (hp : p ‚â† ‚àû)
    (h : Tendsto (fun b ‚Ü¶ Œº (t b ‚àÜ s)) l (ùìù 0)) :
    Tendsto (fun b ‚Ü¶ indicatorConstLp p (ht b) (hŒºt b) c) l (ùìù (indicatorConstLp p hs hŒºs c)) := by
  rw [tendsto_iff_dist_tendsto_zero]
  have hp‚ÇÄ : p ‚â† 0 := (one_pos.trans_le hp‚ÇÅ.out).ne'
  simp only [dist_indicatorConstLp_eq_norm, norm_indicatorConstLp hp‚ÇÄ hp]
  convert tendsto_const_nhds.mul
    (((ENNReal.tendsto_toReal ENNReal.zero_ne_top).comp h).rpow_const _)
  ¬∑ simp [Real.rpow_eq_zero_iff_of_nonneg, ENNReal.toReal_eq_zero_iff, hp, hp‚ÇÄ]
  ¬∑ simp

/-- A family of `indicatorConstLp` functions is continuous in the parameter,
if `Œº (s y ‚àÜ s x)` tends to zero as `y` tends to `x` for all `x`. -/
theorem continuous_indicatorConstLp_set [Fact (1 ‚â§ p)] {X : Type*} [TopologicalSpace X]
    {s : X ‚Üí Set Œ±} {hs : ‚àÄ x, MeasurableSet (s x)} {hŒºs : ‚àÄ x, Œº (s x) ‚â† ‚àû} (hp : p ‚â† ‚àû)
    (h : ‚àÄ x, Tendsto (fun y ‚Ü¶ Œº (s y ‚àÜ s x)) (ùìù x) (ùìù 0)) :
    Continuous fun x ‚Ü¶ indicatorConstLp p (hs x) (hŒºs x) c :=
  continuous_iff_continuousAt.2 fun x ‚Ü¶ tendsto_indicatorConstLp_set hp (h x)

@[simp]
theorem indicatorConstLp_empty :
    indicatorConstLp p MeasurableSet.empty (by simp : Œº ‚àÖ ‚â† ‚àû) c = 0 := by
  simp only [indicatorConstLp, Set.indicator_empty', MemLp.toLp_zero]

theorem indicatorConstLp_inj {s t : Set Œ±} (hs : MeasurableSet s) (hsŒº : Œº s ‚â† ‚àû)
    (ht : MeasurableSet t) (htŒº : Œº t ‚â† ‚àû) {c : E} (hc : c ‚â† 0) :
    indicatorConstLp p hs hsŒº c = indicatorConstLp p ht htŒº c ‚Üî s =·µê[Œº] t := by
  simp_rw [‚Üê indicator_const_eventuallyEq hc, indicatorConstLp, MemLp.toLp_eq_toLp_iff]

theorem memLp_add_of_disjoint {f g : Œ± ‚Üí E} (h : Disjoint (support f) (support g))
    (hf : StronglyMeasurable f) (hg : StronglyMeasurable g) :
    MemLp (f + g) p Œº ‚Üî MemLp f p Œº ‚àß MemLp g p Œº := by
  borelize E
  refine ‚ü®fun hfg => ‚ü®?_, ?_‚ü©, fun h => h.1.add h.2‚ü©
  ¬∑ rw [‚Üê Set.indicator_add_eq_left h]; exact hfg.indicator (measurableSet_support hf.measurable)
  ¬∑ rw [‚Üê Set.indicator_add_eq_right h]; exact hfg.indicator (measurableSet_support hg.measurable)

@[deprecated (since := "2025-02-21")]
alias mem‚Ñíp_add_of_disjoint := memLp_add_of_disjoint

/-- The indicator of a disjoint union of two sets is the sum of the indicators of the sets. -/
theorem indicatorConstLp_disjoint_union {s t : Set Œ±} (hs : MeasurableSet s) (ht : MeasurableSet t)
    (hŒºs : Œº s ‚â† ‚àû) (hŒºt : Œº t ‚â† ‚àû) (hst : Disjoint s t) (c : E) :
    indicatorConstLp p (hs.union ht) (measure_union_ne_top hŒºs hŒºt) c =
      indicatorConstLp p hs hŒºs c + indicatorConstLp p ht hŒºt c := by
  ext1
  refine indicatorConstLp_coeFn.trans (EventuallyEq.trans ?_ (Lp.coeFn_add _ _).symm)
  refine
    EventuallyEq.trans ?_
      (EventuallyEq.add indicatorConstLp_coeFn.symm indicatorConstLp_coeFn.symm)
  rw [Set.indicator_union_of_disjoint hst]

end IndicatorConstLp

section const

variable (Œº p)
variable [IsFiniteMeasure Œº] (c : E)

/-- Constant function as an element of `MeasureTheory.Lp` for a finite measure. -/
protected def Lp.const : E ‚Üí+ Lp E p Œº where
  toFun c := ‚ü®AEEqFun.const Œ± c, const_mem_Lp Œ± Œº c‚ü©
  map_zero' := rfl
  map_add' _ _ := rfl

lemma Lp.coeFn_const : Lp.const p Œº c =·µê[Œº] Function.const Œ± c :=
  AEEqFun.coeFn_const Œ± c

@[simp] lemma Lp.const_val : (Lp.const p Œº c).1 = AEEqFun.const Œ± c := rfl

@[simp]
lemma MemLp.toLp_const : MemLp.toLp _ (memLp_const c) = Lp.const p Œº c := rfl

@[deprecated (since := "2025-02-21")]
alias Mem‚Ñíp.toLp_const := MemLp.toLp_const

@[simp]
lemma indicatorConstLp_univ :
    indicatorConstLp p .univ (measure_ne_top Œº _) c = Lp.const p Œº c := by
  rw [‚Üê MemLp.toLp_const, indicatorConstLp]
  simp only [Set.indicator_univ, Function.const]

theorem Lp.norm_const [NeZero Œº] (hp_zero : p ‚â† 0) :
    ‚ÄñLp.const p Œº c‚Äñ = ‚Äñc‚Äñ * (Œº Set.univ).toReal ^ (1 / p.toReal) := by
  have := NeZero.ne Œº
  rw [‚Üê MemLp.toLp_const, Lp.norm_toLp, eLpNorm_const] <;> try assumption
  rw [ENNReal.toReal_mul, toReal_enorm, ‚Üê ENNReal.toReal_rpow]

theorem Lp.norm_const' (hp_zero : p ‚â† 0) (hp_top : p ‚â† ‚àû) :
    ‚ÄñLp.const p Œº c‚Äñ = ‚Äñc‚Äñ * (Œº Set.univ).toReal ^ (1 / p.toReal) := by
  rw [‚Üê MemLp.toLp_const, Lp.norm_toLp, eLpNorm_const'] <;> try assumption
  rw [ENNReal.toReal_mul, toReal_enorm, ‚Üê ENNReal.toReal_rpow]

theorem Lp.norm_const_le : ‚ÄñLp.const p Œº c‚Äñ ‚â§ ‚Äñc‚Äñ * (Œº Set.univ).toReal ^ (1 / p.toReal) := by
  rw [‚Üê indicatorConstLp_univ]
  exact norm_indicatorConstLp_le

/-- `MeasureTheory.Lp.const` as a `LinearMap`. -/
@[simps] protected def Lp.const‚Çó (ùïú : Type*) [NormedRing ùïú] [Module ùïú E] [IsBoundedSMul ùïú E] :
    E ‚Üí‚Çó[ùïú] Lp E p Œº where
  toFun := Lp.const p Œº
  map_add' := map_add _
  map_smul' _ _ := rfl

@[simps! apply]
protected def Lp.constL (ùïú : Type*) [NormedField ùïú] [NormedSpace ùïú E] [Fact (1 ‚â§ p)] :
    E ‚ÜíL[ùïú] Lp E p Œº :=
  (Lp.const‚Çó p Œº ùïú).mkContinuous ((Œº Set.univ).toReal ^ (1 / p.toReal)) fun _ ‚Ü¶
    (Lp.norm_const_le _ _ _).trans_eq (mul_comm _ _)

theorem Lp.norm_constL_le (ùïú : Type*) [NontriviallyNormedField ùïú] [NormedSpace ùïú E]
    [Fact (1 ‚â§ p)] :
    ‚Äñ(Lp.constL p Œº ùïú : E ‚ÜíL[ùïú] Lp E p Œº)‚Äñ ‚â§ (Œº Set.univ).toReal ^ (1 / p.toReal) :=
  LinearMap.mkContinuous_norm_le _ (by positivity) _

end const

namespace Lp

variable {Œ≤ : Type*} [MeasurableSpace Œ≤] {Œºb : MeasureTheory.Measure Œ≤} {f : Œ± ‚Üí Œ≤}

theorem indicatorConstLp_compMeasurePreserving {s : Set Œ≤} (hs : MeasurableSet s)
    (hŒºs : Œºb s ‚â† ‚àû) (c : E) (hf : MeasurePreserving f Œº Œºb) :
    Lp.compMeasurePreserving f hf (indicatorConstLp p hs hŒºs c) =
      indicatorConstLp p (hs.preimage hf.measurable)
        (by rwa [hf.measure_preimage hs.nullMeasurableSet]) c :=
  rfl

end Lp

theorem indicatorConstLp_eq_toSpanSingleton_compLp {s : Set Œ±} [NormedSpace ‚Ñù E]
    (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : E) :
    indicatorConstLp 2 hs hŒºs x =
      (ContinuousLinearMap.toSpanSingleton ‚Ñù x).compLp (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù)) := by
  ext1
  refine indicatorConstLp_coeFn.trans ?_
  have h_compLp :=
    (ContinuousLinearMap.toSpanSingleton ‚Ñù x).coeFn_compLp (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù))
  rw [‚Üê EventuallyEq] at h_compLp
  refine EventuallyEq.trans ?_ h_compLp.symm
  refine (@indicatorConstLp_coeFn _ _ _ 2 Œº _ s hs hŒºs (1 : ‚Ñù)).mono fun y hy => ?_
  dsimp only
  rw [hy]
  simp_rw [ContinuousLinearMap.toSpanSingleton_apply]
  by_cases hy_mem : y ‚àà s <;> simp [hy_mem]

end MeasureTheory
