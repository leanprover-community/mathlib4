/-
Copyright (c) 2020 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, S√©bastien Gou√´zel
-/
import Mathlib.Analysis.NormedSpace.OperatorNorm.NNNorm
import Mathlib.MeasureTheory.Function.LpSeminorm.ChebyshevMarkov
import Mathlib.MeasureTheory.Function.LpSeminorm.CompareExp
import Mathlib.MeasureTheory.Function.LpSeminorm.TriangleInequality

/-!
# Lp space

This file provides the space `Lp E p Œº` as the subtype of elements of `Œ± ‚Üí‚Çò[Œº] E`
(see `MeasureTheory.AEEqFun`) such that `eLpNorm f p Œº` is finite.
For `1 ‚â§ p`, `eLpNorm` defines a norm and `Lp` is a complete metric space
(the latter is proved at `Mathlib.MeasureTheory.Function.LpSpace.Complete`).

## Main definitions

* `Lp E p Œº` : elements of `Œ± ‚Üí‚Çò[Œº] E` such that `eLpNorm f p Œº` is finite.
  Defined as an `AddSubgroup` of `Œ± ‚Üí‚Çò[Œº] E`.

Lipschitz functions vanishing at zero act by composition on `Lp`. We define this action, and prove
that it is continuous. In particular,
* `ContinuousLinearMap.compLp` defines the action on `Lp` of a continuous linear map.
* `Lp.posPart` is the positive part of an `Lp` function.
* `Lp.negPart` is the negative part of an `Lp` function.

## Notations

* `Œ± ‚Üí‚ÇÅ[Œº] E` : the type `Lp E 1 Œº`.
* `Œ± ‚Üí‚ÇÇ[Œº] E` : the type `Lp E 2 Œº`.

## Implementation

Since `Lp` is defined as an `AddSubgroup`, dot notation does not work. Use `Lp.Measurable f` to
say that the coercion of `f` to a genuine function is measurable, instead of the non-working
`f.Measurable`.

To prove that two `Lp` elements are equal, it suffices to show that their coercions to functions
coincide almost everywhere (this is registered as an `ext` rule). This can often be done using
`filter_upwards`. For instance, a proof from first principles that `f + (g + h) = (f + g) + h`
could read (in the `Lp` namespace)
```
example (f g h : Lp E p Œº) : (f + g) + h = f + (g + h) := by
  ext1
  filter_upwards [coeFn_add (f + g) h, coeFn_add f g, coeFn_add f (g + h), coeFn_add g h]
    with _ ha1 ha2 ha3 ha4
  simp only [ha1, ha2, ha3, ha4, add_assoc]
```
The lemma `coeFn_add` states that the coercion of `f + g` coincides almost everywhere with the sum
of the coercions of `f` and `g`. All such lemmas use `coeFn` in their name, to distinguish the
function coercion from the coercion to almost everywhere defined functions.
-/

noncomputable section

open MeasureTheory Filter
open scoped NNReal ENNReal

variable {Œ± ùïú ùïú' E F : Type*} {m : MeasurableSpace Œ±} {p : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±}
  [NormedAddCommGroup E] [NormedAddCommGroup F]

namespace MeasureTheory

/-!
### Lp space

The space of equivalence classes of measurable functions for which `eLpNorm f p Œº < ‚àû`.
-/

@[simp]
theorem eLpNorm_aeeqFun {Œ± E : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±} [NormedAddCommGroup E]
    {p : ‚Ñù‚â•0‚àû} {f : Œ± ‚Üí E} (hf : AEStronglyMeasurable f Œº) :
    eLpNorm (AEEqFun.mk f hf) p Œº = eLpNorm f p Œº :=
  eLpNorm_congr_ae (AEEqFun.coeFn_mk _ _)

theorem MemLp.eLpNorm_mk_lt_top {Œ± E : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [NormedAddCommGroup E] {p : ‚Ñù‚â•0‚àû} {f : Œ± ‚Üí E} (hfp : MemLp f p Œº) :
    eLpNorm (AEEqFun.mk f hfp.1) p Œº < ‚àû := by simp [hfp.2]

@[deprecated (since := "2025-02-21")]
alias Mem‚Ñíp.eLpNorm_mk_lt_top := MemLp.eLpNorm_mk_lt_top

/-- Lp space -/
def Lp {Œ±} (E : Type*) {m : MeasurableSpace Œ±} [NormedAddCommGroup E] (p : ‚Ñù‚â•0‚àû)
    (Œº : Measure Œ± := by volume_tac) : AddSubgroup (Œ± ‚Üí‚Çò[Œº] E) where
  carrier := { f | eLpNorm f p Œº < ‚àû }
  zero_mem' := by simp [eLpNorm_congr_ae AEEqFun.coeFn_zero, eLpNorm_zero]
  add_mem' {f g} hf hg := by
    simp [eLpNorm_congr_ae (AEEqFun.coeFn_add f g),
      eLpNorm_add_lt_top ‚ü®f.aestronglyMeasurable, hf‚ü© ‚ü®g.aestronglyMeasurable, hg‚ü©]
  neg_mem' {f} hf := by rwa [Set.mem_setOf_eq, eLpNorm_congr_ae (AEEqFun.coeFn_neg f), eLpNorm_neg]

scoped notation:25 Œ±' " ‚Üí‚ÇÅ[" Œº "] " E => MeasureTheory.Lp (Œ± := Œ±') E 1 Œº
scoped notation:25 Œ±' " ‚Üí‚ÇÇ[" Œº "] " E => MeasureTheory.Lp (Œ± := Œ±') E 2 Œº

namespace MemLp

/-- make an element of Lp from a function verifying `MemLp` -/
def toLp (f : Œ± ‚Üí E) (h_mem_‚Ñíp : MemLp f p Œº) : Lp E p Œº :=
  ‚ü®AEEqFun.mk f h_mem_‚Ñíp.1, h_mem_‚Ñíp.eLpNorm_mk_lt_top‚ü©

theorem toLp_val {f : Œ± ‚Üí E} (h : MemLp f p Œº) : (toLp f h).1 = AEEqFun.mk f h.1 := rfl

theorem coeFn_toLp {f : Œ± ‚Üí E} (hf : MemLp f p Œº) : hf.toLp f =·µê[Œº] f :=
  AEEqFun.coeFn_mk _ _

theorem toLp_congr {f g : Œ± ‚Üí E} (hf : MemLp f p Œº) (hg : MemLp g p Œº) (hfg : f =·µê[Œº] g) :
    hf.toLp f = hg.toLp g := by simp [toLp, hfg]

@[simp]
theorem toLp_eq_toLp_iff {f g : Œ± ‚Üí E} (hf : MemLp f p Œº) (hg : MemLp g p Œº) :
    hf.toLp f = hg.toLp g ‚Üî f =·µê[Œº] g := by simp [toLp]

@[simp]
theorem toLp_zero (h : MemLp (0 : Œ± ‚Üí E) p Œº) : h.toLp 0 = 0 :=
  rfl

theorem toLp_add {f g : Œ± ‚Üí E} (hf : MemLp f p Œº) (hg : MemLp g p Œº) :
    (hf.add hg).toLp (f + g) = hf.toLp f + hg.toLp g :=
  rfl

theorem toLp_neg {f : Œ± ‚Üí E} (hf : MemLp f p Œº) : hf.neg.toLp (-f) = -hf.toLp f :=
  rfl

theorem toLp_sub {f g : Œ± ‚Üí E} (hf : MemLp f p Œº) (hg : MemLp g p Œº) :
    (hf.sub hg).toLp (f - g) = hf.toLp f - hg.toLp g :=
  rfl

end MemLp

namespace Lp

instance instCoeFun : CoeFun (Lp E p Œº) (fun _ => Œ± ‚Üí E) :=
  ‚ü®fun f => ((f : Œ± ‚Üí‚Çò[Œº] E) : Œ± ‚Üí E)‚ü©

@[ext high]
theorem ext {f g : Lp E p Œº} (h : f =·µê[Œº] g) : f = g := by
  cases f
  cases g
  simp only [Subtype.mk_eq_mk]
  exact AEEqFun.ext h

theorem mem_Lp_iff_eLpNorm_lt_top {f : Œ± ‚Üí‚Çò[Œº] E} : f ‚àà Lp E p Œº ‚Üî eLpNorm f p Œº < ‚àû := Iff.rfl

theorem mem_Lp_iff_memLp {f : Œ± ‚Üí‚Çò[Œº] E} : f ‚àà Lp E p Œº ‚Üî MemLp f p Œº := by
  simp [mem_Lp_iff_eLpNorm_lt_top, MemLp, f.stronglyMeasurable.aestronglyMeasurable]

@[deprecated (since := "2025-02-21")]
alias mem_Lp_iff_mem‚Ñíp := mem_Lp_iff_memLp

protected theorem antitone [IsFiniteMeasure Œº] {p q : ‚Ñù‚â•0‚àû} (hpq : p ‚â§ q) : Lp E q Œº ‚â§ Lp E p Œº :=
  fun f hf => (MemLp.mono_exponent ‚ü®f.aestronglyMeasurable, hf‚ü© hpq).2

@[simp]
theorem coeFn_mk {f : Œ± ‚Üí‚Çò[Œº] E} (hf : eLpNorm f p Œº < ‚àû) : ((‚ü®f, hf‚ü© : Lp E p Œº) : Œ± ‚Üí E) = f :=
  rfl

-- not @[simp] because dsimp can prove this
theorem coe_mk {f : Œ± ‚Üí‚Çò[Œº] E} (hf : eLpNorm f p Œº < ‚àû) : ((‚ü®f, hf‚ü© : Lp E p Œº) : Œ± ‚Üí‚Çò[Œº] E) = f :=
  rfl

@[simp]
theorem toLp_coeFn (f : Lp E p Œº) (hf : MemLp f p Œº) : hf.toLp f = f := by
  cases f
  simp [MemLp.toLp]

theorem eLpNorm_lt_top (f : Lp E p Œº) : eLpNorm f p Œº < ‚àû :=
  f.prop

theorem eLpNorm_ne_top (f : Lp E p Œº) : eLpNorm f p Œº ‚â† ‚àû :=
  (eLpNorm_lt_top f).ne

@[measurability]
protected theorem stronglyMeasurable (f : Lp E p Œº) : StronglyMeasurable f :=
  f.val.stronglyMeasurable

@[measurability]
protected theorem aestronglyMeasurable (f : Lp E p Œº) : AEStronglyMeasurable f Œº :=
  f.val.aestronglyMeasurable

protected theorem memLp (f : Lp E p Œº) : MemLp f p Œº :=
  ‚ü®Lp.aestronglyMeasurable f, f.prop‚ü©

@[deprecated (since := "2025-02-21")]
alias mem‚Ñíp := Lp.memLp

variable (E p Œº)

theorem coeFn_zero : ‚áë(0 : Lp E p Œº) =·µê[Œº] 0 :=
  AEEqFun.coeFn_zero

variable {E p Œº}

theorem coeFn_neg (f : Lp E p Œº) : ‚áë(-f) =·µê[Œº] -f :=
  AEEqFun.coeFn_neg _

theorem coeFn_add (f g : Lp E p Œº) : ‚áë(f + g) =·µê[Œº] f + g :=
  AEEqFun.coeFn_add _ _

theorem coeFn_sub (f g : Lp E p Œº) : ‚áë(f - g) =·µê[Œº] f - g :=
  AEEqFun.coeFn_sub _ _

theorem const_mem_Lp (Œ±) {_ : MeasurableSpace Œ±} (Œº : Measure Œ±) (c : E) [IsFiniteMeasure Œº] :
    @AEEqFun.const Œ± _ _ Œº _ c ‚àà Lp E p Œº :=
  (memLp_const c).eLpNorm_mk_lt_top

instance instNorm : Norm (Lp E p Œº) where norm f := ENNReal.toReal (eLpNorm f p Œº)

-- note: we need this to be defeq to the instance from `SeminormedAddGroup.toNNNorm`, so
-- can't use `ENNReal.toNNReal (eLpNorm f p Œº)`
instance instNNNorm : NNNorm (Lp E p Œº) where nnnorm f := ‚ü®‚Äñf‚Äñ, ENNReal.toReal_nonneg‚ü©

instance instDist : Dist (Lp E p Œº) where dist f g := ‚Äñf - g‚Äñ

instance instEDist : EDist (Lp E p Œº) where edist f g := eLpNorm (‚áëf - ‚áëg) p Œº

theorem norm_def (f : Lp E p Œº) : ‚Äñf‚Äñ = ENNReal.toReal (eLpNorm f p Œº) :=
  rfl

theorem nnnorm_def (f : Lp E p Œº) : ‚Äñf‚Äñ‚Çä = ENNReal.toNNReal (eLpNorm f p Œº) :=
  rfl

@[simp, norm_cast]
protected theorem coe_nnnorm (f : Lp E p Œº) : (‚Äñf‚Äñ‚Çä : ‚Ñù) = ‚Äñf‚Äñ :=
  rfl

@[simp]
theorem enorm_def (f : Lp E p Œº) : ‚Äñf‚Äñ‚Çë = eLpNorm f p Œº :=
  ENNReal.coe_toNNReal <| Lp.eLpNorm_ne_top f

@[deprecated (since := "2025-01-20")] alias nnnorm_coe_ennreal := enorm_def

@[simp]
lemma norm_toLp (f : Œ± ‚Üí E) (hf : MemLp f p Œº) : ‚Äñhf.toLp f‚Äñ = ENNReal.toReal (eLpNorm f p Œº) := by
  rw [norm_def, eLpNorm_congr_ae (MemLp.coeFn_toLp hf)]

@[simp]
theorem nnnorm_toLp (f : Œ± ‚Üí E) (hf : MemLp f p Œº) :
    ‚Äñhf.toLp f‚Äñ‚Çä = ENNReal.toNNReal (eLpNorm f p Œº) :=
  NNReal.eq <| norm_toLp f hf

lemma enorm_toLp {f : Œ± ‚Üí E} (hf : MemLp f p Œº) : ‚Äñhf.toLp f‚Äñ‚Çë = eLpNorm f p Œº := by
  simp [enorm, nnnorm_toLp f hf, ENNReal.coe_toNNReal hf.2.ne]

@[deprecated (since := "2025-01-20")] alias coe_nnnorm_toLp := enorm_toLp

theorem dist_def (f g : Lp E p Œº) : dist f g = (eLpNorm (‚áëf - ‚áëg) p Œº).toReal := by
  simp_rw [dist, norm_def]
  refine congr_arg _ ?_
  apply eLpNorm_congr_ae (coeFn_sub _ _)

theorem edist_def (f g : Lp E p Œº) : edist f g = eLpNorm (‚áëf - ‚áëg) p Œº :=
  rfl

protected theorem edist_dist (f g : Lp E p Œº) : edist f g = .ofReal (dist f g) := by
  rw [edist_def, dist_def, ‚Üê eLpNorm_congr_ae (coeFn_sub _ _),
    ENNReal.ofReal_toReal (eLpNorm_ne_top (f - g))]

protected theorem dist_edist (f g : Lp E p Œº) : dist f g = (edist f g).toReal :=
  MeasureTheory.Lp.dist_def ..

theorem dist_eq_norm (f g : Lp E p Œº) : dist f g = ‚Äñf - g‚Äñ := rfl

@[simp]
theorem edist_toLp_toLp (f g : Œ± ‚Üí E) (hf : MemLp f p Œº) (hg : MemLp g p Œº) :
    edist (hf.toLp f) (hg.toLp g) = eLpNorm (f - g) p Œº := by
  rw [edist_def]
  exact eLpNorm_congr_ae (hf.coeFn_toLp.sub hg.coeFn_toLp)

@[simp]
theorem edist_toLp_zero (f : Œ± ‚Üí E) (hf : MemLp f p Œº) : edist (hf.toLp f) 0 = eLpNorm f p Œº := by
  simpa using edist_toLp_toLp f 0 hf MemLp.zero

@[simp]
theorem nnnorm_zero : ‚Äñ(0 : Lp E p Œº)‚Äñ‚Çä = 0 := by
  rw [nnnorm_def]
  change (eLpNorm (‚áë(0 : Œ± ‚Üí‚Çò[Œº] E)) p Œº).toNNReal = 0
  simp [eLpNorm_congr_ae AEEqFun.coeFn_zero, eLpNorm_zero]

@[simp]
theorem norm_zero : ‚Äñ(0 : Lp E p Œº)‚Äñ = 0 :=
  congr_arg ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù) nnnorm_zero

@[simp]
theorem norm_measure_zero (f : Lp E p (0 : MeasureTheory.Measure Œ±)) : ‚Äñf‚Äñ = 0 := by
  -- Squeezed for performance reasons
  simp only [norm_def, eLpNorm_measure_zero, ENNReal.toReal_zero]

@[simp] theorem norm_exponent_zero (f : Lp E 0 Œº) : ‚Äñf‚Äñ = 0 := by
  -- Squeezed for performance reasons
  simp only [norm_def, eLpNorm_exponent_zero, ENNReal.toReal_zero]

theorem nnnorm_eq_zero_iff {f : Lp E p Œº} (hp : 0 < p) : ‚Äñf‚Äñ‚Çä = 0 ‚Üî f = 0 := by
  refine ‚ü®fun hf => ?_, fun hf => by simp [hf]‚ü©
  rw [nnnorm_def, ENNReal.toNNReal_eq_zero_iff] at hf
  cases hf with
  | inl hf =>
    rw [eLpNorm_eq_zero_iff (Lp.aestronglyMeasurable f) hp.ne.symm] at hf
    exact Subtype.eq (AEEqFun.ext (hf.trans AEEqFun.coeFn_zero.symm))
  | inr hf =>
    exact absurd hf (eLpNorm_ne_top f)

theorem norm_eq_zero_iff {f : Lp E p Œº} (hp : 0 < p) : ‚Äñf‚Äñ = 0 ‚Üî f = 0 :=
  NNReal.coe_eq_zero.trans (nnnorm_eq_zero_iff hp)

theorem eq_zero_iff_ae_eq_zero {f : Lp E p Œº} : f = 0 ‚Üî f =·µê[Œº] 0 := by
  rw [‚Üê (Lp.memLp f).toLp_eq_toLp_iff MemLp.zero, MemLp.toLp_zero, toLp_coeFn]

@[simp]
theorem nnnorm_neg (f : Lp E p Œº) : ‚Äñ-f‚Äñ‚Çä = ‚Äñf‚Äñ‚Çä := by
  rw [nnnorm_def, nnnorm_def, eLpNorm_congr_ae (coeFn_neg _), eLpNorm_neg]

@[simp]
theorem norm_neg (f : Lp E p Œº) : ‚Äñ-f‚Äñ = ‚Äñf‚Äñ :=
  congr_arg ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù) (nnnorm_neg f)

theorem nnnorm_le_mul_nnnorm_of_ae_le_mul {c : ‚Ñù‚â•0} {f : Lp E p Œº} {g : Lp F p Œº}
    (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ‚Çä ‚â§ c * ‚Äñg x‚Äñ‚Çä) : ‚Äñf‚Äñ‚Çä ‚â§ c * ‚Äñg‚Äñ‚Çä := by
  simp only [nnnorm_def]
  have := eLpNorm_le_nnreal_smul_eLpNorm_of_ae_le_mul h p
  rwa [‚Üê ENNReal.toNNReal_le_toNNReal, ENNReal.smul_def, smul_eq_mul, ENNReal.toNNReal_mul,
    ENNReal.toNNReal_coe] at this
  ¬∑ exact (Lp.memLp _).eLpNorm_ne_top
  ¬∑ exact ENNReal.mul_ne_top ENNReal.coe_ne_top (Lp.memLp _).eLpNorm_ne_top

theorem norm_le_mul_norm_of_ae_le_mul {c : ‚Ñù} {f : Lp E p Œº} {g : Lp F p Œº}
    (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ) : ‚Äñf‚Äñ ‚â§ c * ‚Äñg‚Äñ := by
  rcases le_or_lt 0 c with hc | hc
  ¬∑ lift c to ‚Ñù‚â•0 using hc
    exact NNReal.coe_le_coe.mpr (nnnorm_le_mul_nnnorm_of_ae_le_mul h)
  ¬∑ simp only [norm_def]
    have := eLpNorm_eq_zero_and_zero_of_ae_le_mul_neg h hc p
    simp [this]

theorem norm_le_norm_of_ae_le {f : Lp E p Œº} {g : Lp F p Œº} (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ ‚Äñg x‚Äñ) :
    ‚Äñf‚Äñ ‚â§ ‚Äñg‚Äñ := by
  rw [norm_def, norm_def]
  exact ENNReal.toReal_mono (eLpNorm_ne_top _) (eLpNorm_mono_ae h)

theorem mem_Lp_of_nnnorm_ae_le_mul {c : ‚Ñù‚â•0} {f : Œ± ‚Üí‚Çò[Œº] E} {g : Lp F p Œº}
    (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ‚Çä ‚â§ c * ‚Äñg x‚Äñ‚Çä) : f ‚àà Lp E p Œº :=
  mem_Lp_iff_memLp.2 <| MemLp.of_nnnorm_le_mul (Lp.memLp g) f.aestronglyMeasurable h

theorem mem_Lp_of_ae_le_mul {c : ‚Ñù} {f : Œ± ‚Üí‚Çò[Œº] E} {g : Lp F p Œº}
    (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ) : f ‚àà Lp E p Œº :=
  mem_Lp_iff_memLp.2 <| MemLp.of_le_mul (Lp.memLp g) f.aestronglyMeasurable h

theorem mem_Lp_of_nnnorm_ae_le {f : Œ± ‚Üí‚Çò[Œº] E} {g : Lp F p Œº} (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ‚Çä ‚â§ ‚Äñg x‚Äñ‚Çä) :
    f ‚àà Lp E p Œº :=
  mem_Lp_iff_memLp.2 <| MemLp.of_le (Lp.memLp g) f.aestronglyMeasurable h

theorem mem_Lp_of_ae_le {f : Œ± ‚Üí‚Çò[Œº] E} {g : Lp F p Œº} (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ ‚Äñg x‚Äñ) :
    f ‚àà Lp E p Œº :=
  mem_Lp_of_nnnorm_ae_le h

theorem mem_Lp_of_ae_nnnorm_bound [IsFiniteMeasure Œº] {f : Œ± ‚Üí‚Çò[Œº] E} (C : ‚Ñù‚â•0)
    (hfC : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ‚Çä ‚â§ C) : f ‚àà Lp E p Œº :=
  mem_Lp_iff_memLp.2 <| MemLp.of_bound f.aestronglyMeasurable _ hfC

theorem mem_Lp_of_ae_bound [IsFiniteMeasure Œº] {f : Œ± ‚Üí‚Çò[Œº] E} (C : ‚Ñù) (hfC : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ C) :
    f ‚àà Lp E p Œº :=
  mem_Lp_iff_memLp.2 <| MemLp.of_bound f.aestronglyMeasurable _ hfC

theorem nnnorm_le_of_ae_bound [IsFiniteMeasure Œº] {f : Lp E p Œº} {C : ‚Ñù‚â•0}
    (hfC : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ‚Çä ‚â§ C) : ‚Äñf‚Äñ‚Çä ‚â§ measureUnivNNReal Œº ^ p.toReal‚Åª¬π * C := by
  by_cases hŒº : Œº = 0
  ¬∑ by_cases hp : p.toReal‚Åª¬π = 0
    ¬∑ simp [hp, hŒº, nnnorm_def]
    ¬∑ simp [hŒº, nnnorm_def, Real.zero_rpow hp]
  rw [‚Üê ENNReal.coe_le_coe, nnnorm_def, ENNReal.coe_toNNReal (eLpNorm_ne_top _)]
  refine (eLpNorm_le_of_ae_nnnorm_bound hfC).trans_eq ?_
  rw [‚Üê coe_measureUnivNNReal Œº, ‚Üê ENNReal.coe_rpow_of_ne_zero (measureUnivNNReal_pos hŒº).ne',
    ENNReal.coe_mul, mul_comm, ENNReal.smul_def, smul_eq_mul]

theorem norm_le_of_ae_bound [IsFiniteMeasure Œº] {f : Lp E p Œº} {C : ‚Ñù} (hC : 0 ‚â§ C)
    (hfC : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ C) : ‚Äñf‚Äñ ‚â§ measureUnivNNReal Œº ^ p.toReal‚Åª¬π * C := by
  lift C to ‚Ñù‚â•0 using hC
  have := nnnorm_le_of_ae_bound hfC
  rwa [‚Üê NNReal.coe_le_coe, NNReal.coe_mul, NNReal.coe_rpow] at this

instance instNormedAddCommGroup [hp : Fact (1 ‚â§ p)] : NormedAddCommGroup (Lp E p Œº) :=
  { AddGroupNorm.toNormedAddCommGroup
      { toFun := (norm : Lp E p Œº ‚Üí ‚Ñù)
        map_zero' := norm_zero
        neg' := by simp only [norm_neg, implies_true] -- squeezed for performance reasons
        add_le' := fun f g => by
          suffices ‚Äñf + g‚Äñ‚Çë ‚â§ ‚Äñf‚Äñ‚Çë + ‚Äñg‚Äñ‚Çë by
            -- Squeezed for performance reasons
            simpa only [ge_iff_le, enorm, ‚ÜêENNReal.coe_add, ENNReal.coe_le_coe] using this
          simp only [Lp.enorm_def]
          exact (eLpNorm_congr_ae (AEEqFun.coeFn_add _ _)).trans_le
            (eLpNorm_add_le (Lp.aestronglyMeasurable _) (Lp.aestronglyMeasurable _) hp.out)
        eq_zero_of_map_eq_zero' := fun _ =>
          (norm_eq_zero_iff <| zero_lt_one.trans_le hp.1).1 } with
    edist := edist
    edist_dist := Lp.edist_dist }

-- check no diamond is created
example [Fact (1 ‚â§ p)] : PseudoEMetricSpace.toEDist = (Lp.instEDist : EDist (Lp E p Œº)) := by
  with_reducible_and_instances rfl

example [Fact (1 ‚â§ p)] : SeminormedAddGroup.toNNNorm = (Lp.instNNNorm : NNNorm (Lp E p Œº)) := by
  with_reducible_and_instances rfl

section IsBoundedSMul

variable [NormedRing ùïú] [NormedRing ùïú'] [Module ùïú E] [Module ùïú' E]
variable [IsBoundedSMul ùïú E] [IsBoundedSMul ùïú' E]

theorem const_smul_mem_Lp (c : ùïú) (f : Lp E p Œº) : c ‚Ä¢ (f : Œ± ‚Üí‚Çò[Œº] E) ‚àà Lp E p Œº := by
  rw [mem_Lp_iff_eLpNorm_lt_top, eLpNorm_congr_ae (AEEqFun.coeFn_smul _ _)]
  exact eLpNorm_const_smul_le.trans_lt <| ENNReal.mul_lt_top ENNReal.coe_lt_top f.prop

variable (ùïú E p Œº)

/-- The `ùïú`-submodule of elements of `Œ± ‚Üí‚Çò[Œº] E` whose `Lp` norm is finite.  This is `Lp E p Œº`,
with extra structure. -/
def LpSubmodule : Submodule ùïú (Œ± ‚Üí‚Çò[Œº] E) :=
  { Lp E p Œº with smul_mem' := fun c f hf => by simpa using const_smul_mem_Lp c ‚ü®f, hf‚ü© }

variable {ùïú E p Œº}

theorem coe_LpSubmodule : (LpSubmodule ùïú E p Œº).toAddSubgroup = Lp E p Œº :=
  rfl

instance instModule : Module ùïú (Lp E p Œº) :=
  { (LpSubmodule ùïú E p Œº).module with }

theorem coeFn_smul (c : ùïú) (f : Lp E p Œº) : ‚áë(c ‚Ä¢ f) =·µê[Œº] c ‚Ä¢ ‚áëf :=
  AEEqFun.coeFn_smul _ _

instance instIsCentralScalar [Module ùïú·µê·µí·µñ E] [IsBoundedSMul ùïú·µê·µí·µñ E] [IsCentralScalar ùïú E] :
    IsCentralScalar ùïú (Lp E p Œº) where
  op_smul_eq_smul k f := Subtype.ext <| op_smul_eq_smul k (f : Œ± ‚Üí‚Çò[Œº] E)

instance instSMulCommClass [SMulCommClass ùïú ùïú' E] : SMulCommClass ùïú ùïú' (Lp E p Œº) where
  smul_comm k k' f := Subtype.ext <| smul_comm k k' (f : Œ± ‚Üí‚Çò[Œº] E)

instance instIsScalarTower [SMul ùïú ùïú'] [IsScalarTower ùïú ùïú' E] : IsScalarTower ùïú ùïú' (Lp E p Œº) where
  smul_assoc k k' f := Subtype.ext <| smul_assoc k k' (f : Œ± ‚Üí‚Çò[Œº] E)

instance instIsBoundedSMul [Fact (1 ‚â§ p)] : IsBoundedSMul ùïú (Lp E p Œº) :=
  -- TODO: add `IsBoundedSMul.of_nnnorm_smul_le`
  IsBoundedSMul.of_norm_smul_le fun r f => by
    suffices ‚Äñr ‚Ä¢ f‚Äñ‚Çë ‚â§ ‚Äñr‚Äñ‚Çë * ‚Äñf‚Äñ‚Çë by
      -- squeezed for performance reasons
      simpa only [ge_iff_le, enorm, ‚ÜêENNReal.coe_mul, ENNReal.coe_le_coe] using this
    simpa only [eLpNorm_congr_ae (coeFn_smul _ _), enorm_def]
      using eLpNorm_const_smul_le (c := r) (f := f) (p := p)

end IsBoundedSMul

section NormedSpace

variable {ùïú : Type*} [NormedField ùïú] [NormedSpace ùïú E]

instance instNormedSpace [Fact (1 ‚â§ p)] : NormedSpace ùïú (Lp E p Œº) where
  norm_smul_le _ _ := norm_smul_le _ _

end NormedSpace

end Lp

namespace MemLp

variable {ùïú : Type*} [NormedRing ùïú] [Module ùïú E] [IsBoundedSMul ùïú E]

theorem toLp_const_smul {f : Œ± ‚Üí E} (c : ùïú) (hf : MemLp f p Œº) :
    (hf.const_smul c).toLp (c ‚Ä¢ f) = c ‚Ä¢ hf.toLp f :=
  rfl

end MemLp

theorem MemLp.norm_rpow_div {f : Œ± ‚Üí E} (hf : MemLp f p Œº) (q : ‚Ñù‚â•0‚àû) :
    MemLp (fun x : Œ± => ‚Äñf x‚Äñ ^ q.toReal) (p / q) Œº := by
  refine ‚ü®(hf.1.norm.aemeasurable.pow_const q.toReal).aestronglyMeasurable, ?_‚ü©
  by_cases q_top : q = ‚àû
  ¬∑ simp [q_top]
  by_cases q_zero : q = 0
  ¬∑ simp only [q_zero, ENNReal.toReal_zero, Real.rpow_zero]
    by_cases p_zero : p = 0
    ¬∑ simp [p_zero]
    rw [ENNReal.div_zero p_zero]
    exact (memLp_top_const (1 : ‚Ñù)).2
  rw [eLpNorm_norm_rpow _ (ENNReal.toReal_pos q_zero q_top)]
  apply ENNReal.rpow_lt_top_of_nonneg ENNReal.toReal_nonneg
  rw [ENNReal.ofReal_toReal q_top, div_eq_mul_inv, mul_assoc, ENNReal.inv_mul_cancel q_zero q_top,
    mul_one]
  exact hf.2.ne

@[deprecated (since := "2025-02-21")]
alias Mem‚Ñíp.norm_rpow_div := MemLp.norm_rpow_div

theorem memLp_norm_rpow_iff {q : ‚Ñù‚â•0‚àû} {f : Œ± ‚Üí E} (hf : AEStronglyMeasurable f Œº) (q_zero : q ‚â† 0)
    (q_top : q ‚â† ‚àû) : MemLp (fun x : Œ± => ‚Äñf x‚Äñ ^ q.toReal) (p / q) Œº ‚Üî MemLp f p Œº := by
  refine ‚ü®fun h => ?_, fun h => h.norm_rpow_div q‚ü©
  apply (memLp_norm_iff hf).1
  convert h.norm_rpow_div q‚Åª¬π using 1
  ¬∑ ext x
    rw [Real.norm_eq_abs, Real.abs_rpow_of_nonneg (norm_nonneg _), ‚Üê Real.rpow_mul (abs_nonneg _),
      ENNReal.toReal_inv, mul_inv_cancel‚ÇÄ, abs_of_nonneg (norm_nonneg _), Real.rpow_one]
    simp [ENNReal.toReal_eq_zero_iff, not_or, q_zero, q_top]
  ¬∑ rw [div_eq_mul_inv, inv_inv, div_eq_mul_inv, mul_assoc, ENNReal.inv_mul_cancel q_zero q_top,
      mul_one]

@[deprecated (since := "2025-02-21")]
alias mem‚Ñíp_norm_rpow_iff := memLp_norm_rpow_iff

theorem MemLp.norm_rpow {f : Œ± ‚Üí E} (hf : MemLp f p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    MemLp (fun x : Œ± => ‚Äñf x‚Äñ ^ p.toReal) 1 Œº := by
  convert hf.norm_rpow_div p
  rw [div_eq_mul_inv, ENNReal.mul_inv_cancel hp_ne_zero hp_ne_top]

@[deprecated (since := "2025-02-21")]
alias Mem‚Ñíp.norm_rpow := MemLp.norm_rpow

theorem AEEqFun.compMeasurePreserving_mem_Lp {Œ≤ : Type*} [MeasurableSpace Œ≤]
    {Œºb : MeasureTheory.Measure Œ≤} {g : Œ≤ ‚Üí‚Çò[Œºb] E} (hg : g ‚àà Lp E p Œºb) {f : Œ± ‚Üí Œ≤}
    (hf : MeasurePreserving f Œº Œºb) :
    g.compMeasurePreserving f hf ‚àà Lp E p Œº := by
  rw [Lp.mem_Lp_iff_eLpNorm_lt_top] at hg ‚ä¢
  rwa [eLpNorm_compMeasurePreserving]

namespace Lp

/-! ### Composition with a measure preserving function -/

variable {Œ≤ : Type*} [MeasurableSpace Œ≤] {Œºb : MeasureTheory.Measure Œ≤} {f : Œ± ‚Üí Œ≤}

/-- Composition of an `L^p` function with a measure preserving function is an `L^p` function. -/
def compMeasurePreserving (f : Œ± ‚Üí Œ≤) (hf : MeasurePreserving f Œº Œºb) :
    Lp E p Œºb ‚Üí+ Lp E p Œº where
  toFun g := ‚ü®g.1.compMeasurePreserving f hf, g.1.compMeasurePreserving_mem_Lp g.2 hf‚ü©
  map_zero' := rfl
  map_add' := by rintro ‚ü®‚ü®_‚ü©, _‚ü© ‚ü®‚ü®_‚ü©, _‚ü©; rfl

@[simp]
theorem compMeasurePreserving_val (g : Lp E p Œºb) (hf : MeasurePreserving f Œº Œºb) :
    (compMeasurePreserving f hf g).1 = g.1.compMeasurePreserving f hf :=
  rfl

theorem coeFn_compMeasurePreserving (g : Lp E p Œºb) (hf : MeasurePreserving f Œº Œºb) :
    compMeasurePreserving f hf g =·µê[Œº] g ‚àò f :=
  g.1.coeFn_compMeasurePreserving hf

@[simp]
theorem norm_compMeasurePreserving (g : Lp E p Œºb) (hf : MeasurePreserving f Œº Œºb) :
    ‚ÄñcompMeasurePreserving f hf g‚Äñ = ‚Äñg‚Äñ :=
  congr_arg ENNReal.toReal <| g.1.eLpNorm_compMeasurePreserving hf

theorem isometry_compMeasurePreserving [Fact (1 ‚â§ p)] (hf : MeasurePreserving f Œº Œºb) :
    Isometry (compMeasurePreserving f hf : Lp E p Œºb ‚Üí Lp E p Œº) :=
  AddMonoidHomClass.isometry_of_norm _ (norm_compMeasurePreserving ¬∑ hf)

theorem toLp_compMeasurePreserving {g : Œ≤ ‚Üí E} (hg : MemLp g p Œºb) (hf : MeasurePreserving f Œº Œºb) :
    compMeasurePreserving f hf (hg.toLp g) = (hg.comp_measurePreserving hf).toLp _ := rfl

variable (ùïú : Type*) [NormedRing ùïú] [Module ùïú E] [IsBoundedSMul ùïú E]

/-- `MeasureTheory.Lp.compMeasurePreserving` as a linear map. -/
@[simps]
def compMeasurePreserving‚Çó (f : Œ± ‚Üí Œ≤) (hf : MeasurePreserving f Œº Œºb) :
    Lp E p Œºb ‚Üí‚Çó[ùïú] Lp E p Œº where
  __ := compMeasurePreserving f hf
  map_smul' c g := by rcases g with ‚ü®‚ü®_‚ü©, _‚ü©; rfl

/-- `MeasureTheory.Lp.compMeasurePreserving` as a linear isometry. -/
@[simps!]
def compMeasurePreserving‚Çó·µ¢ [Fact (1 ‚â§ p)] (f : Œ± ‚Üí Œ≤) (hf : MeasurePreserving f Œº Œºb) :
    Lp E p Œºb ‚Üí‚Çó·µ¢[ùïú] Lp E p Œº where
  toLinearMap := compMeasurePreserving‚Çó ùïú f hf
  norm_map' := (norm_compMeasurePreserving ¬∑ hf)

end Lp

end MeasureTheory

open MeasureTheory

/-!
### Composition on `L^p`

We show that Lipschitz functions vanishing at zero act by composition on `L^p`, and specialize
this to the composition with continuous linear maps, and to the definition of the positive
part of an `L^p` function.
-/


section Composition

variable {g : E ‚Üí F} {c : ‚Ñù‚â•0}

theorem LipschitzWith.comp_memLp {Œ± E F} {K} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [NormedAddCommGroup E] [NormedAddCommGroup F] {f : Œ± ‚Üí E} {g : E ‚Üí F} (hg : LipschitzWith K g)
    (g0 : g 0 = 0) (hL : MemLp f p Œº) : MemLp (g ‚àò f) p Œº :=
  have : ‚àÄ x, ‚Äñg (f x)‚Äñ ‚â§ K * ‚Äñf x‚Äñ := fun x ‚Ü¶ by
    -- TODO: add `LipschitzWith.nnnorm_sub_le` and `LipschitzWith.nnnorm_le`
    simpa [g0] using hg.norm_sub_le (f x) 0
  hL.of_le_mul (hg.continuous.comp_aestronglyMeasurable hL.1) (Eventually.of_forall this)

@[deprecated (since := "2025-02-21")]
alias LipschitzWith.comp_mem‚Ñíp := LipschitzWith.comp_memLp

theorem MeasureTheory.MemLp.of_comp_antilipschitzWith {Œ± E F} {K'} [MeasurableSpace Œ±]
    {Œº : Measure Œ±} [NormedAddCommGroup E] [NormedAddCommGroup F] {f : Œ± ‚Üí E} {g : E ‚Üí F}
    (hL : MemLp (g ‚àò f) p Œº) (hg : UniformContinuous g) (hg' : AntilipschitzWith K' g)
    (g0 : g 0 = 0) : MemLp f p Œº := by
  have A : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ K' * ‚Äñg (f x)‚Äñ := by
    intro x
    -- TODO: add `AntilipschitzWith.le_mul_nnnorm_sub` and `AntilipschitzWith.le_mul_norm`
    rw [‚Üê dist_zero_right, ‚Üê dist_zero_right, ‚Üê g0]
    apply hg'.le_mul_dist
  have B : AEStronglyMeasurable f Œº :=
    (hg'.isUniformEmbedding hg).isEmbedding.aestronglyMeasurable_comp_iff.1 hL.1
  exact hL.of_le_mul B (Filter.Eventually.of_forall A)

@[deprecated (since := "2025-02-21")]
alias MeasureTheory.Mem‚Ñíp.of_comp_antilipschitzWith := MeasureTheory.MemLp.of_comp_antilipschitzWith

namespace LipschitzWith

theorem memLp_comp_iff_of_antilipschitz {Œ± E F} {K K'} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [NormedAddCommGroup E] [NormedAddCommGroup F] {f : Œ± ‚Üí E} {g : E ‚Üí F} (hg : LipschitzWith K g)
    (hg' : AntilipschitzWith K' g) (g0 : g 0 = 0) : MemLp (g ‚àò f) p Œº ‚Üî MemLp f p Œº :=
  ‚ü®fun h => h.of_comp_antilipschitzWith hg.uniformContinuous hg' g0, fun h => hg.comp_memLp g0 h‚ü©

@[deprecated (since := "2025-02-21")]
alias mem‚Ñíp_comp_iff_of_antilipschitz := memLp_comp_iff_of_antilipschitz

/-- When `g` is a Lipschitz function sending `0` to `0` and `f` is in `Lp`, then `g ‚àò f` is well
defined as an element of `Lp`. -/
def compLp (hg : LipschitzWith c g) (g0 : g 0 = 0) (f : Lp E p Œº) : Lp F p Œº :=
  ‚ü®AEEqFun.comp g hg.continuous (f : Œ± ‚Üí‚Çò[Œº] E), by
    suffices ‚àÄ·µê x ‚àÇŒº, ‚ÄñAEEqFun.comp g hg.continuous (f : Œ± ‚Üí‚Çò[Œº] E) x‚Äñ ‚â§ c * ‚Äñf x‚Äñ from
      Lp.mem_Lp_of_ae_le_mul this
    filter_upwards [AEEqFun.coeFn_comp g hg.continuous (f : Œ± ‚Üí‚Çò[Œº] E)] with a ha
    simp only [ha]
    rw [‚Üê dist_zero_right, ‚Üê dist_zero_right, ‚Üê g0]
    exact hg.dist_le_mul (f a) 0‚ü©

theorem coeFn_compLp (hg : LipschitzWith c g) (g0 : g 0 = 0) (f : Lp E p Œº) :
    hg.compLp g0 f =·µê[Œº] g ‚àò f :=
  AEEqFun.coeFn_comp _ hg.continuous _

@[simp]
theorem compLp_zero (hg : LipschitzWith c g) (g0 : g 0 = 0) : hg.compLp g0 (0 : Lp E p Œº) = 0 := by
  rw [Lp.eq_zero_iff_ae_eq_zero]
  apply (coeFn_compLp _ _ _).trans
  filter_upwards [Lp.coeFn_zero E p Œº] with _ ha
  simp only [ha, g0, Function.comp_apply, Pi.zero_apply]

theorem norm_compLp_sub_le (hg : LipschitzWith c g) (g0 : g 0 = 0) (f f' : Lp E p Œº) :
    ‚Äñhg.compLp g0 f - hg.compLp g0 f'‚Äñ ‚â§ c * ‚Äñf - f'‚Äñ := by
  apply Lp.norm_le_mul_norm_of_ae_le_mul
  filter_upwards [hg.coeFn_compLp g0 f, hg.coeFn_compLp g0 f',
    Lp.coeFn_sub (hg.compLp g0 f) (hg.compLp g0 f'), Lp.coeFn_sub f f'] with a ha1 ha2 ha3 ha4
  simp only [ha1, ha2, ha3, ha4, ‚Üê dist_eq_norm, Pi.sub_apply, Function.comp_apply]
  exact hg.dist_le_mul (f a) (f' a)

theorem norm_compLp_le (hg : LipschitzWith c g) (g0 : g 0 = 0) (f : Lp E p Œº) :
    ‚Äñhg.compLp g0 f‚Äñ ‚â§ c * ‚Äñf‚Äñ := by
  -- squeezed for performance reasons
  simpa only [compLp_zero, sub_zero] using hg.norm_compLp_sub_le g0 f 0

theorem lipschitzWith_compLp [Fact (1 ‚â§ p)] (hg : LipschitzWith c g) (g0 : g 0 = 0) :
    LipschitzWith c (hg.compLp g0 : Lp E p Œº ‚Üí Lp F p Œº) :=
  -- squeezed for performance reasons
  LipschitzWith.of_dist_le_mul fun f g => by simp only [dist_eq_norm, norm_compLp_sub_le]

theorem continuous_compLp [Fact (1 ‚â§ p)] (hg : LipschitzWith c g) (g0 : g 0 = 0) :
    Continuous (hg.compLp g0 : Lp E p Œº ‚Üí Lp F p Œº) :=
  (lipschitzWith_compLp hg g0).continuous

end LipschitzWith

namespace ContinuousLinearMap

variable {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedSpace ùïú E] [NormedSpace ùïú F]

/-- Composing `f : Lp` with `L : E ‚ÜíL[ùïú] F`. -/
def compLp (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : Lp F p Œº :=
  L.lipschitz.compLp (map_zero L) f

theorem coeFn_compLp (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : ‚àÄ·µê a ‚àÇŒº, (L.compLp f) a = L (f a) :=
  LipschitzWith.coeFn_compLp _ _ _

theorem coeFn_compLp' (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : L.compLp f =·µê[Œº] fun a => L (f a) :=
  L.coeFn_compLp f

theorem comp_memLp (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : MemLp (L ‚àò f) p Œº :=
  (Lp.memLp (L.compLp f)).ae_eq (L.coeFn_compLp' f)

@[deprecated (since := "2025-02-21")]
alias comp_mem‚Ñíp := comp_memLp

theorem comp_memLp' (L : E ‚ÜíL[ùïú] F) {f : Œ± ‚Üí E} (hf : MemLp f p Œº) : MemLp (L ‚àò f) p Œº :=
  (L.comp_memLp (hf.toLp f)).ae_eq (EventuallyEq.fun_comp hf.coeFn_toLp _)

@[deprecated (since := "2025-02-21")]
alias comp_mem‚Ñíp' := comp_memLp'

section RCLike

variable {K : Type*} [RCLike K]

theorem _root_.MeasureTheory.MemLp.ofReal {f : Œ± ‚Üí ‚Ñù} (hf : MemLp f p Œº) :
    MemLp (fun x => (f x : K)) p Œº :=
  (@RCLike.ofRealCLM K _).comp_memLp' hf

@[deprecated (since := "2025-02-21")]
alias _root_.MeasureTheory.Mem‚Ñíp.ofReal := _root_.MeasureTheory.MemLp.ofReal

theorem _root_.MeasureTheory.memLp_re_im_iff {f : Œ± ‚Üí K} :
    MemLp (fun x ‚Ü¶ RCLike.re (f x)) p Œº ‚àß MemLp (fun x ‚Ü¶ RCLike.im (f x)) p Œº ‚Üî
      MemLp f p Œº := by
  refine ‚ü®?_, fun hf => ‚ü®hf.re, hf.im‚ü©‚ü©
  rintro ‚ü®hre, him‚ü©
  convert MeasureTheory.MemLp.add (E := K) hre.ofReal (him.ofReal.const_mul RCLike.I)
  ext1 x
  rw [Pi.add_apply, mul_comm, RCLike.re_add_im]

@[deprecated (since := "2025-02-21")]
alias _root_.MeasureTheory.mem‚Ñíp_re_im_iff := _root_.MeasureTheory.memLp_re_im_iff

end RCLike

theorem add_compLp (L L' : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) :
    (L + L').compLp f = L.compLp f + L'.compLp f := by
  ext1
  refine (coeFn_compLp' (L + L') f).trans ?_
  refine EventuallyEq.trans ?_ (Lp.coeFn_add _ _).symm
  refine
    EventuallyEq.trans ?_ (EventuallyEq.add (L.coeFn_compLp' f).symm (L'.coeFn_compLp' f).symm)
  filter_upwards with x
  rw [coe_add', Pi.add_def]

theorem smul_compLp {ùïú'} [NormedRing ùïú'] [Module ùïú' F] [IsBoundedSMul ùïú' F] [SMulCommClass ùïú ùïú' F]
    (c : ùïú') (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : (c ‚Ä¢ L).compLp f = c ‚Ä¢ L.compLp f := by
  ext1
  refine (coeFn_compLp' (c ‚Ä¢ L) f).trans ?_
  refine EventuallyEq.trans ?_ (Lp.coeFn_smul _ _).symm
  refine (L.coeFn_compLp' f).mono fun x hx => ?_
  rw [Pi.smul_apply, hx, coe_smul', Pi.smul_def]

theorem norm_compLp_le (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : ‚ÄñL.compLp f‚Äñ ‚â§ ‚ÄñL‚Äñ * ‚Äñf‚Äñ :=
  LipschitzWith.norm_compLp_le _ _ _

variable (Œº p)

/-- Composing `f : Lp E p Œº` with `L : E ‚ÜíL[ùïú] F`, seen as a `ùïú`-linear map on `Lp E p Œº`. -/
def compLp‚Çó (L : E ‚ÜíL[ùïú] F) : Lp E p Œº ‚Üí‚Çó[ùïú] Lp F p Œº where
  toFun f := L.compLp f
  map_add' f g := by
    ext1
    filter_upwards [Lp.coeFn_add f g, coeFn_compLp L (f + g), coeFn_compLp L f,
      coeFn_compLp L g, Lp.coeFn_add (L.compLp f) (L.compLp g)]
    intro a ha1 ha2 ha3 ha4 ha5
    simp only [ha1, ha2, ha3, ha4, ha5, map_add, Pi.add_apply]
  map_smul' c f := by
    dsimp
    ext1
    filter_upwards [Lp.coeFn_smul c f, coeFn_compLp L (c ‚Ä¢ f), Lp.coeFn_smul c (L.compLp f),
      coeFn_compLp L f] with _ ha1 ha2 ha3 ha4
    simp only [ha1, ha2, ha3, ha4, _root_.map_smul, Pi.smul_apply]

/-- Composing `f : Lp E p Œº` with `L : E ‚ÜíL[ùïú] F`, seen as a continuous `ùïú`-linear map on
`Lp E p Œº`. See also the similar
* `LinearMap.compLeft` for functions,
* `ContinuousLinearMap.compLeftContinuous` for continuous functions,
* `ContinuousLinearMap.compLeftContinuousBounded` for bounded continuous functions,
* `ContinuousLinearMap.compLeftContinuousCompact` for continuous functions on compact spaces.
-/
def compLpL [Fact (1 ‚â§ p)] (L : E ‚ÜíL[ùïú] F) : Lp E p Œº ‚ÜíL[ùïú] Lp F p Œº :=
  LinearMap.mkContinuous (L.compLp‚Çó p Œº) ‚ÄñL‚Äñ L.norm_compLp_le

variable {Œº p}

theorem coeFn_compLpL [Fact (1 ‚â§ p)] (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) :
    L.compLpL p Œº f =·µê[Œº] fun a => L (f a) :=
  L.coeFn_compLp f

theorem add_compLpL [Fact (1 ‚â§ p)] (L L' : E ‚ÜíL[ùïú] F) :
    (L + L').compLpL p Œº = L.compLpL p Œº + L'.compLpL p Œº := by ext1 f; exact add_compLp L L' f

theorem smul_compLpL [Fact (1 ‚â§ p)] {ùïú'} [NormedRing ùïú'] [Module ùïú' F] [IsBoundedSMul ùïú' F]
    [SMulCommClass ùïú ùïú' F] (c : ùïú') (L : E ‚ÜíL[ùïú] F) : (c ‚Ä¢ L).compLpL p Œº = c ‚Ä¢ L.compLpL p Œº := by
  ext1 f; exact smul_compLp c L f

theorem norm_compLpL_le [Fact (1 ‚â§ p)] (L : E ‚ÜíL[ùïú] F) : ‚ÄñL.compLpL p Œº‚Äñ ‚â§ ‚ÄñL‚Äñ :=
  LinearMap.mkContinuous_norm_le _ (norm_nonneg _) _

end ContinuousLinearMap

namespace MeasureTheory.Lp

section PosPart

theorem lipschitzWith_pos_part : LipschitzWith 1 fun x : ‚Ñù => max x 0 :=
  LipschitzWith.id.max_const _

theorem _root_.MeasureTheory.MemLp.pos_part {f : Œ± ‚Üí ‚Ñù} (hf : MemLp f p Œº) :
    MemLp (fun x => max (f x) 0) p Œº :=
  lipschitzWith_pos_part.comp_memLp (max_eq_right le_rfl) hf

@[deprecated (since := "2025-02-21")]
alias _root_.MeasureTheory.Mem‚Ñíp.pos_part := _root_.MeasureTheory.MemLp.pos_part

theorem _root_.MeasureTheory.MemLp.neg_part {f : Œ± ‚Üí ‚Ñù} (hf : MemLp f p Œº) :
    MemLp (fun x => max (-f x) 0) p Œº :=
  lipschitzWith_pos_part.comp_memLp (max_eq_right le_rfl) hf.neg

@[deprecated (since := "2025-02-21")]
alias _root_.MeasureTheory.Mem‚Ñíp.neg_part := _root_.MeasureTheory.MemLp.neg_part

/-- Positive part of a function in `L^p`. -/
def posPart (f : Lp ‚Ñù p Œº) : Lp ‚Ñù p Œº :=
  lipschitzWith_pos_part.compLp (max_eq_right le_rfl) f

/-- Negative part of a function in `L^p`. -/
def negPart (f : Lp ‚Ñù p Œº) : Lp ‚Ñù p Œº :=
  posPart (-f)

@[norm_cast]
theorem coe_posPart (f : Lp ‚Ñù p Œº) : (posPart f : Œ± ‚Üí‚Çò[Œº] ‚Ñù) = (f : Œ± ‚Üí‚Çò[Œº] ‚Ñù).posPart :=
  rfl

theorem coeFn_posPart (f : Lp ‚Ñù p Œº) : ‚áë(posPart f) =·µê[Œº] fun a => max (f a) 0 :=
  AEEqFun.coeFn_posPart _

theorem coeFn_negPart_eq_max (f : Lp ‚Ñù p Œº) : ‚àÄ·µê a ‚àÇŒº, negPart f a = max (-f a) 0 := by
  rw [negPart]
  filter_upwards [coeFn_posPart (-f), coeFn_neg f] with _ h‚ÇÅ h‚ÇÇ
  rw [h‚ÇÅ, h‚ÇÇ, Pi.neg_apply]

theorem coeFn_negPart (f : Lp ‚Ñù p Œº) : ‚àÄ·µê a ‚àÇŒº, negPart f a = -min (f a) 0 :=
  (coeFn_negPart_eq_max f).mono fun a h => by rw [h, ‚Üê max_neg_neg, neg_zero]

theorem continuous_posPart [Fact (1 ‚â§ p)] : Continuous fun f : Lp ‚Ñù p Œº => posPart f :=
  LipschitzWith.continuous_compLp _ _

theorem continuous_negPart [Fact (1 ‚â§ p)] : Continuous fun f : Lp ‚Ñù p Œº => negPart f := by
  unfold negPart
  exact continuous_posPart.comp continuous_neg

end PosPart

end MeasureTheory.Lp

end Composition

namespace MeasureTheory.Lp

/-- A version of **Markov's inequality** with elements of Lp. -/
lemma pow_mul_meas_ge_le_enorm (f : Lp E p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) (Œµ : ‚Ñù‚â•0‚àû) :
    (Œµ * Œº {x | Œµ ‚â§ ‚Äñf x‚Äñ‚Çë ^ p.toReal}) ^ (1 / p.toReal) ‚â§ ENNReal.ofReal ‚Äñf‚Äñ :=
  (ENNReal.ofReal_toReal (eLpNorm_ne_top f)).symm ‚ñ∏
    pow_mul_meas_ge_le_eLpNorm Œº hp_ne_zero hp_ne_top (Lp.aestronglyMeasurable f) Œµ

/-- A version of **Markov's inequality** with elements of Lp. -/
lemma mul_meas_ge_le_pow_enorm (f : Lp E p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) (Œµ : ‚Ñù‚â•0‚àû) :
    Œµ * Œº {x | Œµ ‚â§ ‚Äñf x‚Äñ‚Çë ^ p.toReal} ‚â§ ENNReal.ofReal ‚Äñf‚Äñ ^ p.toReal :=
  (ENNReal.ofReal_toReal (eLpNorm_ne_top f)).symm ‚ñ∏
    mul_meas_ge_le_pow_eLpNorm Œº hp_ne_zero hp_ne_top (Lp.aestronglyMeasurable f) Œµ

/-- A version of **Markov's inequality** with elements of Lp. -/
theorem mul_meas_ge_le_pow_enorm' (f : Lp E p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû)
    (Œµ : ‚Ñù‚â•0‚àû) : Œµ ^ p.toReal * Œº {x | Œµ ‚â§ ‚Äñf x‚Äñ‚Çä } ‚â§ ENNReal.ofReal ‚Äñf‚Äñ ^ p.toReal :=
  (ENNReal.ofReal_toReal (eLpNorm_ne_top f)).symm ‚ñ∏
    mul_meas_ge_le_pow_eLpNorm' Œº hp_ne_zero hp_ne_top (Lp.aestronglyMeasurable f) Œµ

/-- A version of **Markov's inequality** with elements of Lp. -/
theorem meas_ge_le_mul_pow_enorm (f : Lp E p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) {Œµ : ‚Ñù‚â•0‚àû}
    (hŒµ : Œµ ‚â† 0) : Œº {x | Œµ ‚â§ ‚Äñf x‚Äñ‚Çä} ‚â§ Œµ‚Åª¬π ^ p.toReal * ENNReal.ofReal ‚Äñf‚Äñ ^ p.toReal :=
  (ENNReal.ofReal_toReal (eLpNorm_ne_top f)).symm ‚ñ∏
    meas_ge_le_mul_pow_eLpNorm Œº hp_ne_zero hp_ne_top (Lp.aestronglyMeasurable f) hŒµ

@[deprecated (since := "2025-01-20")] alias pow_mul_meas_ge_le_norm := pow_mul_meas_ge_le_enorm
@[deprecated (since := "2025-01-20")] alias mul_meas_ge_le_pow_norm := mul_meas_ge_le_pow_enorm
@[deprecated (since := "2025-01-20")] alias mul_meas_ge_le_pow_norm' := mul_meas_ge_le_pow_enorm'
@[deprecated (since := "2025-01-20")] alias meas_ge_le_mul_pow_norm := meas_ge_le_mul_pow_enorm

end MeasureTheory.Lp
