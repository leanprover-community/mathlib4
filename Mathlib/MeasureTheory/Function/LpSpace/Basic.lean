/-
Copyright (c) 2020 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, S√©bastien Gou√´zel
-/
import Mathlib.Analysis.Normed.Group.Hom
import Mathlib.Analysis.NormedSpace.IndicatorFunction
import Mathlib.Analysis.NormedSpace.OperatorNorm.NNNorm
import Mathlib.Analysis.SpecialFunctions.Pow.Continuity
import Mathlib.MeasureTheory.Function.LpSeminorm.ChebyshevMarkov
import Mathlib.MeasureTheory.Function.LpSeminorm.CompareExp
import Mathlib.MeasureTheory.Function.LpSeminorm.TriangleInequality
import Mathlib.Order.Filter.IndicatorFunction

/-!
# Lp space

This file provides the space `Lp E p Œº` as the subtype of elements of `Œ± ‚Üí‚Çò[Œº] E` (see ae_eq_fun)
such that `eLpNorm f p Œº` is finite. For `1 ‚â§ p`, `eLpNorm` defines a norm and `Lp` is a complete
metric space.

## Main definitions

* `Lp E p Œº` : elements of `Œ± ‚Üí‚Çò[Œº] E` (see ae_eq_fun) such that `eLpNorm f p Œº` is finite. Defined
  as an `AddSubgroup` of `Œ± ‚Üí‚Çò[Œº] E`.

Lipschitz functions vanishing at zero act by composition on `Lp`. We define this action, and prove
that it is continuous. In particular,
* `ContinuousLinearMap.compLp` defines the action on `Lp` of a continuous linear map.
* `Lp.posPart` is the positive part of an `Lp` function.
* `Lp.negPart` is the negative part of an `Lp` function.

## Notations

* `Œ± ‚Üí‚ÇÅ[Œº] E` : the type `Lp E 1 Œº`.
* `Œ± ‚Üí‚ÇÇ[Œº] E` : the type `Lp E 2 Œº`.

## Implementation

Since `Lp` is defined as an `AddSubgroup`, dot notation does not work. Use `Lp.Measurable f` to
say that the coercion of `f` to a genuine function is measurable, instead of the non-working
`f.Measurable`.

To prove that two `Lp` elements are equal, it suffices to show that their coercions to functions
coincide almost everywhere (this is registered as an `ext` rule). This can often be done using
`filter_upwards`. For instance, a proof from first principles that `f + (g + h) = (f + g) + h`
could read (in the `Lp` namespace)
```
example (f g h : Lp E p Œº) : (f + g) + h = f + (g + h) := by
  ext1
  filter_upwards [coeFn_add (f + g) h, coeFn_add f g, coeFn_add f (g + h), coeFn_add g h]
    with _ ha1 ha2 ha3 ha4
  simp only [ha1, ha2, ha3, ha4, add_assoc]
```
The lemma `coeFn_add` states that the coercion of `f + g` coincides almost everywhere with the sum
of the coercions of `f` and `g`. All such lemmas use `coeFn` in their name, to distinguish the
function coercion from the coercion to almost everywhere defined functions.
-/

noncomputable section

open TopologicalSpace MeasureTheory Filter
open scoped NNReal ENNReal Topology symmDiff

variable {Œ± ùïú ùïú' E F G : Type*} {m m0 : MeasurableSpace Œ±} {p : ‚Ñù‚â•0‚àû} {q : ‚Ñù} {Œº ŒΩ : Measure Œ±}
  [NormedAddCommGroup E] [NormedAddCommGroup F] [NormedAddCommGroup G]

namespace MeasureTheory

/-!
### Lp space

The space of equivalence classes of measurable functions for which `eLpNorm f p Œº < ‚àû`.
-/

@[simp]
theorem eLpNorm_aeeqFun {Œ± E : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±} [NormedAddCommGroup E]
    {p : ‚Ñù‚â•0‚àû} {f : Œ± ‚Üí E} (hf : AEStronglyMeasurable f Œº) :
    eLpNorm (AEEqFun.mk f hf) p Œº = eLpNorm f p Œº :=
  eLpNorm_congr_ae (AEEqFun.coeFn_mk _ _)

theorem Mem‚Ñíp.eLpNorm_mk_lt_top {Œ± E : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [NormedAddCommGroup E] {p : ‚Ñù‚â•0‚àû} {f : Œ± ‚Üí E} (hfp : Mem‚Ñíp f p Œº) :
    eLpNorm (AEEqFun.mk f hfp.1) p Œº < ‚àû := by simp [hfp.2]

/-- Lp space -/
def Lp {Œ±} (E : Type*) {m : MeasurableSpace Œ±} [NormedAddCommGroup E] (p : ‚Ñù‚â•0‚àû)
    (Œº : Measure Œ± := by volume_tac) : AddSubgroup (Œ± ‚Üí‚Çò[Œº] E) where
  carrier := { f | eLpNorm f p Œº < ‚àû }
  zero_mem' := by simp [eLpNorm_congr_ae AEEqFun.coeFn_zero, eLpNorm_zero]
  add_mem' {f g} hf hg := by
    simp [eLpNorm_congr_ae (AEEqFun.coeFn_add f g),
      eLpNorm_add_lt_top ‚ü®f.aestronglyMeasurable, hf‚ü© ‚ü®g.aestronglyMeasurable, hg‚ü©]
  neg_mem' {f} hf := by rwa [Set.mem_setOf_eq, eLpNorm_congr_ae (AEEqFun.coeFn_neg f), eLpNorm_neg]

scoped notation:25 Œ±' " ‚Üí‚ÇÅ[" Œº "] " E => MeasureTheory.Lp (Œ± := Œ±') E 1 Œº
scoped notation:25 Œ±' " ‚Üí‚ÇÇ[" Œº "] " E => MeasureTheory.Lp (Œ± := Œ±') E 2 Œº

namespace Mem‚Ñíp

/-- make an element of Lp from a function verifying `Mem‚Ñíp` -/
def toLp (f : Œ± ‚Üí E) (h_mem_‚Ñíp : Mem‚Ñíp f p Œº) : Lp E p Œº :=
  ‚ü®AEEqFun.mk f h_mem_‚Ñíp.1, h_mem_‚Ñíp.eLpNorm_mk_lt_top‚ü©

theorem toLp_val {f : Œ± ‚Üí E} (h : Mem‚Ñíp f p Œº) : (toLp f h).1 = AEEqFun.mk f h.1 := rfl

theorem coeFn_toLp {f : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) : hf.toLp f =·µê[Œº] f :=
  AEEqFun.coeFn_mk _ _

theorem toLp_congr {f g : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) (hfg : f =·µê[Œº] g) :
    hf.toLp f = hg.toLp g := by simp [toLp, hfg]

@[simp]
theorem toLp_eq_toLp_iff {f g : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) :
    hf.toLp f = hg.toLp g ‚Üî f =·µê[Œº] g := by simp [toLp]

@[simp]
theorem toLp_zero (h : Mem‚Ñíp (0 : Œ± ‚Üí E) p Œº) : h.toLp 0 = 0 :=
  rfl

theorem toLp_add {f g : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) :
    (hf.add hg).toLp (f + g) = hf.toLp f + hg.toLp g :=
  rfl

theorem toLp_neg {f : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) : hf.neg.toLp (-f) = -hf.toLp f :=
  rfl

theorem toLp_sub {f g : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) :
    (hf.sub hg).toLp (f - g) = hf.toLp f - hg.toLp g :=
  rfl

end Mem‚Ñíp

namespace Lp

instance instCoeFun : CoeFun (Lp E p Œº) (fun _ => Œ± ‚Üí E) :=
  ‚ü®fun f => ((f : Œ± ‚Üí‚Çò[Œº] E) : Œ± ‚Üí E)‚ü©

@[ext high]
theorem ext {f g : Lp E p Œº} (h : f =·µê[Œº] g) : f = g := by
  cases f
  cases g
  simp only [Subtype.mk_eq_mk]
  exact AEEqFun.ext h

theorem mem_Lp_iff_eLpNorm_lt_top {f : Œ± ‚Üí‚Çò[Œº] E} : f ‚àà Lp E p Œº ‚Üî eLpNorm f p Œº < ‚àû := Iff.rfl

theorem mem_Lp_iff_mem‚Ñíp {f : Œ± ‚Üí‚Çò[Œº] E} : f ‚àà Lp E p Œº ‚Üî Mem‚Ñíp f p Œº := by
  simp [mem_Lp_iff_eLpNorm_lt_top, Mem‚Ñíp, f.stronglyMeasurable.aestronglyMeasurable]

protected theorem antitone [IsFiniteMeasure Œº] {p q : ‚Ñù‚â•0‚àû} (hpq : p ‚â§ q) : Lp E q Œº ‚â§ Lp E p Œº :=
  fun f hf => (Mem‚Ñíp.mono_exponent ‚ü®f.aestronglyMeasurable, hf‚ü© hpq).2

@[simp]
theorem coeFn_mk {f : Œ± ‚Üí‚Çò[Œº] E} (hf : eLpNorm f p Œº < ‚àû) : ((‚ü®f, hf‚ü© : Lp E p Œº) : Œ± ‚Üí E) = f :=
  rfl

-- not @[simp] because dsimp can prove this
theorem coe_mk {f : Œ± ‚Üí‚Çò[Œº] E} (hf : eLpNorm f p Œº < ‚àû) : ((‚ü®f, hf‚ü© : Lp E p Œº) : Œ± ‚Üí‚Çò[Œº] E) = f :=
  rfl

@[simp]
theorem toLp_coeFn (f : Lp E p Œº) (hf : Mem‚Ñíp f p Œº) : hf.toLp f = f := by
  cases f
  simp [Mem‚Ñíp.toLp]

theorem eLpNorm_lt_top (f : Lp E p Œº) : eLpNorm f p Œº < ‚àû :=
  f.prop

theorem eLpNorm_ne_top (f : Lp E p Œº) : eLpNorm f p Œº ‚â† ‚àû :=
  (eLpNorm_lt_top f).ne

@[measurability]
protected theorem stronglyMeasurable (f : Lp E p Œº) : StronglyMeasurable f :=
  f.val.stronglyMeasurable

@[measurability]
protected theorem aestronglyMeasurable (f : Lp E p Œº) : AEStronglyMeasurable f Œº :=
  f.val.aestronglyMeasurable

protected theorem mem‚Ñíp (f : Lp E p Œº) : Mem‚Ñíp f p Œº :=
  ‚ü®Lp.aestronglyMeasurable f, f.prop‚ü©

variable (E p Œº)

theorem coeFn_zero : ‚áë(0 : Lp E p Œº) =·µê[Œº] 0 :=
  AEEqFun.coeFn_zero

variable {E p Œº}

theorem coeFn_neg (f : Lp E p Œº) : ‚áë(-f) =·µê[Œº] -f :=
  AEEqFun.coeFn_neg _

theorem coeFn_add (f g : Lp E p Œº) : ‚áë(f + g) =·µê[Œº] f + g :=
  AEEqFun.coeFn_add _ _

theorem coeFn_sub (f g : Lp E p Œº) : ‚áë(f - g) =·µê[Œº] f - g :=
  AEEqFun.coeFn_sub _ _

theorem const_mem_Lp (Œ±) {_ : MeasurableSpace Œ±} (Œº : Measure Œ±) (c : E) [IsFiniteMeasure Œº] :
    @AEEqFun.const Œ± _ _ Œº _ c ‚àà Lp E p Œº :=
  (mem‚Ñíp_const c).eLpNorm_mk_lt_top

instance instNorm : Norm (Lp E p Œº) where norm f := ENNReal.toReal (eLpNorm f p Œº)

-- note: we need this to be defeq to the instance from `SeminormedAddGroup.toNNNorm`, so
-- can't use `ENNReal.toNNReal (eLpNorm f p Œº)`
instance instNNNorm : NNNorm (Lp E p Œº) where nnnorm f := ‚ü®‚Äñf‚Äñ, ENNReal.toReal_nonneg‚ü©

instance instDist : Dist (Lp E p Œº) where dist f g := ‚Äñf - g‚Äñ

instance instEDist : EDist (Lp E p Œº) where edist f g := eLpNorm (‚áëf - ‚áëg) p Œº

theorem norm_def (f : Lp E p Œº) : ‚Äñf‚Äñ = ENNReal.toReal (eLpNorm f p Œº) :=
  rfl

theorem nnnorm_def (f : Lp E p Œº) : ‚Äñf‚Äñ‚Çä = ENNReal.toNNReal (eLpNorm f p Œº) :=
  rfl

@[simp, norm_cast]
protected theorem coe_nnnorm (f : Lp E p Œº) : (‚Äñf‚Äñ‚Çä : ‚Ñù) = ‚Äñf‚Äñ :=
  rfl

@[simp]
theorem enorm_def (f : Lp E p Œº) : ‚Äñf‚Äñ‚Çë = eLpNorm f p Œº :=
  ENNReal.coe_toNNReal <| Lp.eLpNorm_ne_top f

@[deprecated (since := "2025-01-20")] alias nnnorm_coe_ennreal := enorm_def

@[simp]
lemma norm_toLp (f : Œ± ‚Üí E) (hf : Mem‚Ñíp f p Œº) : ‚Äñhf.toLp f‚Äñ = ENNReal.toReal (eLpNorm f p Œº) := by
  rw [norm_def, eLpNorm_congr_ae (Mem‚Ñíp.coeFn_toLp hf)]

@[simp]
theorem nnnorm_toLp (f : Œ± ‚Üí E) (hf : Mem‚Ñíp f p Œº) :
    ‚Äñhf.toLp f‚Äñ‚Çä = ENNReal.toNNReal (eLpNorm f p Œº) :=
  NNReal.eq <| norm_toLp f hf

lemma enorm_toLp {f : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) : ‚Äñhf.toLp f‚Äñ‚Çë = eLpNorm f p Œº := by
  simp [enorm, nnnorm_toLp f hf, ENNReal.coe_toNNReal hf.2.ne]

@[deprecated (since := "2025-01-20")] alias coe_nnnorm_toLp := enorm_toLp

theorem dist_def (f g : Lp E p Œº) : dist f g = (eLpNorm (‚áëf - ‚áëg) p Œº).toReal := by
  simp_rw [dist, norm_def]
  refine congr_arg _ ?_
  apply eLpNorm_congr_ae (coeFn_sub _ _)

theorem edist_def (f g : Lp E p Œº) : edist f g = eLpNorm (‚áëf - ‚áëg) p Œº :=
  rfl

protected theorem edist_dist (f g : Lp E p Œº) : edist f g = .ofReal (dist f g) := by
  rw [edist_def, dist_def, ‚Üê eLpNorm_congr_ae (coeFn_sub _ _),
    ENNReal.ofReal_toReal (eLpNorm_ne_top (f - g))]

protected theorem dist_edist (f g : Lp E p Œº) : dist f g = (edist f g).toReal :=
  MeasureTheory.Lp.dist_def ..

theorem dist_eq_norm (f g : Lp E p Œº) : dist f g = ‚Äñf - g‚Äñ := rfl

@[simp]
theorem edist_toLp_toLp (f g : Œ± ‚Üí E) (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) :
    edist (hf.toLp f) (hg.toLp g) = eLpNorm (f - g) p Œº := by
  rw [edist_def]
  exact eLpNorm_congr_ae (hf.coeFn_toLp.sub hg.coeFn_toLp)

@[simp]
theorem edist_toLp_zero (f : Œ± ‚Üí E) (hf : Mem‚Ñíp f p Œº) : edist (hf.toLp f) 0 = eLpNorm f p Œº := by
  simpa using edist_toLp_toLp f 0 hf Mem‚Ñíp.zero

@[simp]
theorem nnnorm_zero : ‚Äñ(0 : Lp E p Œº)‚Äñ‚Çä = 0 := by
  rw [nnnorm_def]
  change (eLpNorm (‚áë(0 : Œ± ‚Üí‚Çò[Œº] E)) p Œº).toNNReal = 0
  simp [eLpNorm_congr_ae AEEqFun.coeFn_zero, eLpNorm_zero]

@[simp]
theorem norm_zero : ‚Äñ(0 : Lp E p Œº)‚Äñ = 0 :=
  congr_arg ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù) nnnorm_zero

@[simp]
theorem norm_measure_zero (f : Lp E p (0 : MeasureTheory.Measure Œ±)) : ‚Äñf‚Äñ = 0 := by
  -- Squeezed for performance reasons
  simp only [norm_def, eLpNorm_measure_zero, ENNReal.zero_toReal]

@[simp] theorem norm_exponent_zero (f : Lp E 0 Œº) : ‚Äñf‚Äñ = 0 := by
  -- Squeezed for performance reasons
  simp only [norm_def, eLpNorm_exponent_zero, ENNReal.zero_toReal]

theorem nnnorm_eq_zero_iff {f : Lp E p Œº} (hp : 0 < p) : ‚Äñf‚Äñ‚Çä = 0 ‚Üî f = 0 := by
  refine ‚ü®fun hf => ?_, fun hf => by simp [hf]‚ü©
  rw [nnnorm_def, ENNReal.toNNReal_eq_zero_iff] at hf
  cases hf with
  | inl hf =>
    rw [eLpNorm_eq_zero_iff (Lp.aestronglyMeasurable f) hp.ne.symm] at hf
    exact Subtype.eq (AEEqFun.ext (hf.trans AEEqFun.coeFn_zero.symm))
  | inr hf =>
    exact absurd hf (eLpNorm_ne_top f)

theorem norm_eq_zero_iff {f : Lp E p Œº} (hp : 0 < p) : ‚Äñf‚Äñ = 0 ‚Üî f = 0 :=
  NNReal.coe_eq_zero.trans (nnnorm_eq_zero_iff hp)

theorem eq_zero_iff_ae_eq_zero {f : Lp E p Œº} : f = 0 ‚Üî f =·µê[Œº] 0 := by
  rw [‚Üê (Lp.mem‚Ñíp f).toLp_eq_toLp_iff Mem‚Ñíp.zero, Mem‚Ñíp.toLp_zero, toLp_coeFn]

@[simp]
theorem nnnorm_neg (f : Lp E p Œº) : ‚Äñ-f‚Äñ‚Çä = ‚Äñf‚Äñ‚Çä := by
  rw [nnnorm_def, nnnorm_def, eLpNorm_congr_ae (coeFn_neg _), eLpNorm_neg]

@[simp]
theorem norm_neg (f : Lp E p Œº) : ‚Äñ-f‚Äñ = ‚Äñf‚Äñ :=
  congr_arg ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù) (nnnorm_neg f)

theorem nnnorm_le_mul_nnnorm_of_ae_le_mul {c : ‚Ñù‚â•0} {f : Lp E p Œº} {g : Lp F p Œº}
    (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ‚Çä ‚â§ c * ‚Äñg x‚Äñ‚Çä) : ‚Äñf‚Äñ‚Çä ‚â§ c * ‚Äñg‚Äñ‚Çä := by
  simp only [nnnorm_def]
  have := eLpNorm_le_nnreal_smul_eLpNorm_of_ae_le_mul h p
  rwa [‚Üê ENNReal.toNNReal_le_toNNReal, ENNReal.smul_def, smul_eq_mul, ENNReal.toNNReal_mul,
    ENNReal.toNNReal_coe] at this
  ¬∑ exact (Lp.mem‚Ñíp _).eLpNorm_ne_top
  ¬∑ exact ENNReal.mul_ne_top ENNReal.coe_ne_top (Lp.mem‚Ñíp _).eLpNorm_ne_top

theorem norm_le_mul_norm_of_ae_le_mul {c : ‚Ñù} {f : Lp E p Œº} {g : Lp F p Œº}
    (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ) : ‚Äñf‚Äñ ‚â§ c * ‚Äñg‚Äñ := by
  rcases le_or_lt 0 c with hc | hc
  ¬∑ lift c to ‚Ñù‚â•0 using hc
    exact NNReal.coe_le_coe.mpr (nnnorm_le_mul_nnnorm_of_ae_le_mul h)
  ¬∑ simp only [norm_def]
    have := eLpNorm_eq_zero_and_zero_of_ae_le_mul_neg h hc p
    simp [this]

theorem norm_le_norm_of_ae_le {f : Lp E p Œº} {g : Lp F p Œº} (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ ‚Äñg x‚Äñ) :
    ‚Äñf‚Äñ ‚â§ ‚Äñg‚Äñ := by
  rw [norm_def, norm_def]
  exact ENNReal.toReal_mono (eLpNorm_ne_top _) (eLpNorm_mono_ae h)

theorem mem_Lp_of_nnnorm_ae_le_mul {c : ‚Ñù‚â•0} {f : Œ± ‚Üí‚Çò[Œº] E} {g : Lp F p Œº}
    (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ‚Çä ‚â§ c * ‚Äñg x‚Äñ‚Çä) : f ‚àà Lp E p Œº :=
  mem_Lp_iff_mem‚Ñíp.2 <| Mem‚Ñíp.of_nnnorm_le_mul (Lp.mem‚Ñíp g) f.aestronglyMeasurable h

theorem mem_Lp_of_ae_le_mul {c : ‚Ñù} {f : Œ± ‚Üí‚Çò[Œº] E} {g : Lp F p Œº}
    (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ) : f ‚àà Lp E p Œº :=
  mem_Lp_iff_mem‚Ñíp.2 <| Mem‚Ñíp.of_le_mul (Lp.mem‚Ñíp g) f.aestronglyMeasurable h

theorem mem_Lp_of_nnnorm_ae_le {f : Œ± ‚Üí‚Çò[Œº] E} {g : Lp F p Œº} (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ‚Çä ‚â§ ‚Äñg x‚Äñ‚Çä) :
    f ‚àà Lp E p Œº :=
  mem_Lp_iff_mem‚Ñíp.2 <| Mem‚Ñíp.of_le (Lp.mem‚Ñíp g) f.aestronglyMeasurable h

theorem mem_Lp_of_ae_le {f : Œ± ‚Üí‚Çò[Œº] E} {g : Lp F p Œº} (h : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ ‚Äñg x‚Äñ) :
    f ‚àà Lp E p Œº :=
  mem_Lp_of_nnnorm_ae_le h

theorem mem_Lp_of_ae_nnnorm_bound [IsFiniteMeasure Œº] {f : Œ± ‚Üí‚Çò[Œº] E} (C : ‚Ñù‚â•0)
    (hfC : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ‚Çä ‚â§ C) : f ‚àà Lp E p Œº :=
  mem_Lp_iff_mem‚Ñíp.2 <| Mem‚Ñíp.of_bound f.aestronglyMeasurable _ hfC

theorem mem_Lp_of_ae_bound [IsFiniteMeasure Œº] {f : Œ± ‚Üí‚Çò[Œº] E} (C : ‚Ñù) (hfC : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ C) :
    f ‚àà Lp E p Œº :=
  mem_Lp_iff_mem‚Ñíp.2 <| Mem‚Ñíp.of_bound f.aestronglyMeasurable _ hfC

theorem nnnorm_le_of_ae_bound [IsFiniteMeasure Œº] {f : Lp E p Œº} {C : ‚Ñù‚â•0}
    (hfC : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ‚Çä ‚â§ C) : ‚Äñf‚Äñ‚Çä ‚â§ measureUnivNNReal Œº ^ p.toReal‚Åª¬π * C := by
  by_cases hŒº : Œº = 0
  ¬∑ by_cases hp : p.toReal‚Åª¬π = 0
    ¬∑ simp [hp, hŒº, nnnorm_def]
    ¬∑ simp [hŒº, nnnorm_def, Real.zero_rpow hp]
  rw [‚Üê ENNReal.coe_le_coe, nnnorm_def, ENNReal.coe_toNNReal (eLpNorm_ne_top _)]
  refine (eLpNorm_le_of_ae_nnnorm_bound hfC).trans_eq ?_
  rw [‚Üê coe_measureUnivNNReal Œº, ‚Üê ENNReal.coe_rpow_of_ne_zero (measureUnivNNReal_pos hŒº).ne',
    ENNReal.coe_mul, mul_comm, ENNReal.smul_def, smul_eq_mul]

theorem norm_le_of_ae_bound [IsFiniteMeasure Œº] {f : Lp E p Œº} {C : ‚Ñù} (hC : 0 ‚â§ C)
    (hfC : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ C) : ‚Äñf‚Äñ ‚â§ measureUnivNNReal Œº ^ p.toReal‚Åª¬π * C := by
  lift C to ‚Ñù‚â•0 using hC
  have := nnnorm_le_of_ae_bound hfC
  rwa [‚Üê NNReal.coe_le_coe, NNReal.coe_mul, NNReal.coe_rpow] at this

instance instNormedAddCommGroup [hp : Fact (1 ‚â§ p)] : NormedAddCommGroup (Lp E p Œº) :=
  { AddGroupNorm.toNormedAddCommGroup
      { toFun := (norm : Lp E p Œº ‚Üí ‚Ñù)
        map_zero' := norm_zero
        neg' := by simp only [norm_neg, implies_true] -- squeezed for performance reasons
        add_le' := fun f g => by
          suffices ‚Äñf + g‚Äñ‚Çë ‚â§ ‚Äñf‚Äñ‚Çë + ‚Äñg‚Äñ‚Çë by
            -- Squeezed for performance reasons
            simpa only [ge_iff_le, enorm, ‚ÜêENNReal.coe_add, ENNReal.coe_le_coe] using this
          simp only [Lp.enorm_def]
          exact (eLpNorm_congr_ae (AEEqFun.coeFn_add _ _)).trans_le
            (eLpNorm_add_le (Lp.aestronglyMeasurable _) (Lp.aestronglyMeasurable _) hp.out)
        eq_zero_of_map_eq_zero' := fun _ =>
          (norm_eq_zero_iff <| zero_lt_one.trans_le hp.1).1 } with
    edist := edist
    edist_dist := Lp.edist_dist }

-- check no diamond is created
example [Fact (1 ‚â§ p)] : PseudoEMetricSpace.toEDist = (Lp.instEDist : EDist (Lp E p Œº)) := by
  with_reducible_and_instances rfl

example [Fact (1 ‚â§ p)] : SeminormedAddGroup.toNNNorm = (Lp.instNNNorm : NNNorm (Lp E p Œº)) := by
  with_reducible_and_instances rfl

section BoundedSMul

variable [NormedRing ùïú] [NormedRing ùïú'] [Module ùïú E] [Module ùïú' E]
variable [BoundedSMul ùïú E] [BoundedSMul ùïú' E]

theorem const_smul_mem_Lp (c : ùïú) (f : Lp E p Œº) : c ‚Ä¢ (f : Œ± ‚Üí‚Çò[Œº] E) ‚àà Lp E p Œº := by
  rw [mem_Lp_iff_eLpNorm_lt_top, eLpNorm_congr_ae (AEEqFun.coeFn_smul _ _)]
  exact eLpNorm_const_smul_le.trans_lt <| ENNReal.mul_lt_top ENNReal.coe_lt_top f.prop

variable (ùïú E p Œº)

/-- The `ùïú`-submodule of elements of `Œ± ‚Üí‚Çò[Œº] E` whose `Lp` norm is finite.  This is `Lp E p Œº`,
with extra structure. -/
def LpSubmodule : Submodule ùïú (Œ± ‚Üí‚Çò[Œº] E) :=
  { Lp E p Œº with smul_mem' := fun c f hf => by simpa using const_smul_mem_Lp c ‚ü®f, hf‚ü© }

variable {ùïú E p Œº}

theorem coe_LpSubmodule : (LpSubmodule ùïú E p Œº).toAddSubgroup = Lp E p Œº :=
  rfl

instance instModule : Module ùïú (Lp E p Œº) :=
  { (LpSubmodule ùïú E p Œº).module with }

theorem coeFn_smul (c : ùïú) (f : Lp E p Œº) : ‚áë(c ‚Ä¢ f) =·µê[Œº] c ‚Ä¢ ‚áëf :=
  AEEqFun.coeFn_smul _ _

instance instIsCentralScalar [Module ùïú·µê·µí·µñ E] [BoundedSMul ùïú·µê·µí·µñ E] [IsCentralScalar ùïú E] :
    IsCentralScalar ùïú (Lp E p Œº) where
  op_smul_eq_smul k f := Subtype.ext <| op_smul_eq_smul k (f : Œ± ‚Üí‚Çò[Œº] E)

instance instSMulCommClass [SMulCommClass ùïú ùïú' E] : SMulCommClass ùïú ùïú' (Lp E p Œº) where
  smul_comm k k' f := Subtype.ext <| smul_comm k k' (f : Œ± ‚Üí‚Çò[Œº] E)

instance instIsScalarTower [SMul ùïú ùïú'] [IsScalarTower ùïú ùïú' E] : IsScalarTower ùïú ùïú' (Lp E p Œº) where
  smul_assoc k k' f := Subtype.ext <| smul_assoc k k' (f : Œ± ‚Üí‚Çò[Œº] E)

instance instBoundedSMul [Fact (1 ‚â§ p)] : BoundedSMul ùïú (Lp E p Œº) :=
  -- TODO: add `BoundedSMul.of_nnnorm_smul_le`
  BoundedSMul.of_norm_smul_le fun r f => by
    suffices ‚Äñr ‚Ä¢ f‚Äñ‚Çë ‚â§ ‚Äñr‚Äñ‚Çë * ‚Äñf‚Äñ‚Çë by
      -- squeezed for performance reasons
      simpa only [ge_iff_le, enorm, ‚ÜêENNReal.coe_mul, ENNReal.coe_le_coe] using this
    simpa only [eLpNorm_congr_ae (coeFn_smul _ _), enorm_def]
      using eLpNorm_const_smul_le (c := r) (f := f) (p := p)

end BoundedSMul

section NormedSpace

variable {ùïú : Type*} [NormedField ùïú] [NormedSpace ùïú E]

instance instNormedSpace [Fact (1 ‚â§ p)] : NormedSpace ùïú (Lp E p Œº) where
  norm_smul_le _ _ := norm_smul_le _ _

end NormedSpace

end Lp

namespace Mem‚Ñíp

variable {ùïú : Type*} [NormedRing ùïú] [Module ùïú E] [BoundedSMul ùïú E]

theorem toLp_const_smul {f : Œ± ‚Üí E} (c : ùïú) (hf : Mem‚Ñíp f p Œº) :
    (hf.const_smul c).toLp (c ‚Ä¢ f) = c ‚Ä¢ hf.toLp f :=
  rfl

end Mem‚Ñíp

/-! ### Indicator of a set as an element of L·µñ

For a set `s` with `(hs : MeasurableSet s)` and `(hŒºs : Œº s < ‚àû)`, we build
`indicatorConstLp p hs hŒºs c`, the element of `Lp` corresponding to `s.indicator (fun _ => c)`.
-/

/-- The `‚Ñí^p` norm of the indicator of a set is uniformly small if the set itself has small measure,
for any `p < ‚àû`. Given here as an existential `‚àÄ Œµ > 0, ‚àÉ Œ∑ > 0, ...` to avoid later
management of `‚Ñù‚â•0‚àû`-arithmetic. -/
theorem exists_eLpNorm_indicator_le (hp : p ‚â† ‚àû) (c : E) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) :
    ‚àÉ Œ∑ : ‚Ñù‚â•0, 0 < Œ∑ ‚àß ‚àÄ s : Set Œ±, Œº s ‚â§ Œ∑ ‚Üí eLpNorm (s.indicator fun _ => c) p Œº ‚â§ Œµ := by
  rcases eq_or_ne p 0 with (rfl | h'p)
  ¬∑ exact ‚ü®1, zero_lt_one, fun s _ => by simp‚ü©
  have hp‚ÇÄ : 0 < p := bot_lt_iff_ne_bot.2 h'p
  have hp‚ÇÄ' : 0 ‚â§ 1 / p.toReal := div_nonneg zero_le_one ENNReal.toReal_nonneg
  have hp‚ÇÄ'' : 0 < p.toReal := ENNReal.toReal_pos hp‚ÇÄ.ne' hp
  obtain ‚ü®Œ∑, hŒ∑_pos, hŒ∑_le‚ü© : ‚àÉ Œ∑ : ‚Ñù‚â•0, 0 < Œ∑ ‚àß ‚Äñc‚Äñ‚Çë * (Œ∑ : ‚Ñù‚â•0‚àû) ^ (1 / p.toReal) ‚â§ Œµ := by
    have :
      Filter.Tendsto (fun x : ‚Ñù‚â•0 => ((‚Äñc‚Äñ‚Çä * x ^ (1 / p.toReal) : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû)) (ùìù 0)
        (ùìù (0 : ‚Ñù‚â•0)) := by
      rw [ENNReal.tendsto_coe]
      convert (NNReal.continuousAt_rpow_const (Or.inr hp‚ÇÄ')).tendsto.const_mul _
      simp [hp‚ÇÄ''.ne']
    have hŒµ' : 0 < Œµ := hŒµ.bot_lt
    obtain ‚ü®Œ¥, hŒ¥, hŒ¥Œµ'‚ü© := NNReal.nhds_zero_basis.eventually_iff.mp (this.eventually_le_const hŒµ')
    obtain ‚ü®Œ∑, hŒ∑, hŒ∑Œ¥‚ü© := exists_between hŒ¥
    refine ‚ü®Œ∑, hŒ∑, ?_‚ü©
    simpa only [‚Üê ENNReal.coe_rpow_of_nonneg _ hp‚ÇÄ', enorm, ‚Üê ENNReal.coe_mul] using hŒ¥Œµ' hŒ∑Œ¥
  refine ‚ü®Œ∑, hŒ∑_pos, fun s hs => ?_‚ü©
  refine (eLpNorm_indicator_const_le _ _).trans (le_trans ?_ hŒ∑_le)
  exact mul_le_mul_left' (ENNReal.rpow_le_rpow hs hp‚ÇÄ') _

section Topology
variable {X : Type*} [TopologicalSpace X] [MeasurableSpace X]
  {Œº : Measure X} [IsFiniteMeasureOnCompacts Œº]

/-- A bounded measurable function with compact support is in L^p. -/
theorem _root_.HasCompactSupport.mem‚Ñíp_of_bound {f : X ‚Üí E} (hf : HasCompactSupport f)
    (h2f : AEStronglyMeasurable f Œº) (C : ‚Ñù) (hfC : ‚àÄ·µê x ‚àÇŒº, ‚Äñf x‚Äñ ‚â§ C) : Mem‚Ñíp f p Œº := by
  have := mem‚Ñíp_top_of_bound h2f C hfC
  exact this.mono_exponent_of_measure_support_ne_top
    (fun x ‚Ü¶ image_eq_zero_of_nmem_tsupport) (hf.measure_lt_top.ne) le_top

/-- A continuous function with compact support is in L^p. -/
theorem _root_.Continuous.mem‚Ñíp_of_hasCompactSupport [OpensMeasurableSpace X]
    {f : X ‚Üí E} (hf : Continuous f) (h'f : HasCompactSupport f) : Mem‚Ñíp f p Œº := by
  have := hf.mem‚Ñíp_top_of_hasCompactSupport h'f Œº
  exact this.mono_exponent_of_measure_support_ne_top
    (fun x ‚Ü¶ image_eq_zero_of_nmem_tsupport) (h'f.measure_lt_top.ne) le_top

end Topology

section IndicatorConstLp

open Set Function

variable {s : Set Œ±} {hs : MeasurableSet s} {hŒºs : Œº s ‚â† ‚àû} {c : E}

/-- Indicator of a set as an element of `Lp`. -/
def indicatorConstLp (p : ‚Ñù‚â•0‚àû) (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) : Lp E p Œº :=
  Mem‚Ñíp.toLp (s.indicator fun _ => c) (mem‚Ñíp_indicator_const p hs c (Or.inr hŒºs))

/-- A version of `Set.indicator_add` for `MeasureTheory.indicatorConstLp`.-/
theorem indicatorConstLp_add {c' : E} :
    indicatorConstLp p hs hŒºs c + indicatorConstLp p hs hŒºs c' =
    indicatorConstLp p hs hŒºs (c + c') := by
  simp_rw [indicatorConstLp, ‚Üê Mem‚Ñíp.toLp_add, indicator_add]
  rfl

/-- A version of `Set.indicator_sub` for `MeasureTheory.indicatorConstLp`.-/
theorem indicatorConstLp_sub {c' : E} :
    indicatorConstLp p hs hŒºs c - indicatorConstLp p hs hŒºs c' =
    indicatorConstLp p hs hŒºs (c - c') := by
  simp_rw [indicatorConstLp, ‚Üê Mem‚Ñíp.toLp_sub, indicator_sub]
  rfl

theorem indicatorConstLp_coeFn : ‚áë(indicatorConstLp p hs hŒºs c) =·µê[Œº] s.indicator fun _ => c :=
  Mem‚Ñíp.coeFn_toLp (mem‚Ñíp_indicator_const p hs c (Or.inr hŒºs))

theorem indicatorConstLp_coeFn_mem : ‚àÄ·µê x : Œ± ‚àÇŒº, x ‚àà s ‚Üí indicatorConstLp p hs hŒºs c x = c :=
  indicatorConstLp_coeFn.mono fun _x hx hxs => hx.trans (Set.indicator_of_mem hxs _)

theorem indicatorConstLp_coeFn_nmem : ‚àÄ·µê x : Œ± ‚àÇŒº, x ‚àâ s ‚Üí indicatorConstLp p hs hŒºs c x = 0 :=
  indicatorConstLp_coeFn.mono fun _x hx hxs => hx.trans (Set.indicator_of_not_mem hxs _)

theorem norm_indicatorConstLp (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    ‚ÄñindicatorConstLp p hs hŒºs c‚Äñ = ‚Äñc‚Äñ * (Œº s).toReal ^ (1 / p.toReal) := by
  rw [Lp.norm_def, eLpNorm_congr_ae indicatorConstLp_coeFn,
    eLpNorm_indicator_const hs hp_ne_zero hp_ne_top, ENNReal.toReal_mul, ENNReal.toReal_rpow,
    toReal_enorm]

theorem norm_indicatorConstLp_top (hŒºs_ne_zero : Œº s ‚â† 0) :
    ‚ÄñindicatorConstLp ‚àû hs hŒºs c‚Äñ = ‚Äñc‚Äñ := by
  rw [Lp.norm_def, eLpNorm_congr_ae indicatorConstLp_coeFn,
    eLpNorm_indicator_const' hs hŒºs_ne_zero ENNReal.top_ne_zero, ENNReal.top_toReal,
    _root_.div_zero, ENNReal.rpow_zero, mul_one, toReal_enorm]

theorem norm_indicatorConstLp' (hp_pos : p ‚â† 0) (hŒºs_pos : Œº s ‚â† 0) :
    ‚ÄñindicatorConstLp p hs hŒºs c‚Äñ = ‚Äñc‚Äñ * (Œº s).toReal ^ (1 / p.toReal) := by
  by_cases hp_top : p = ‚àû
  ¬∑ rw [hp_top, ENNReal.top_toReal, _root_.div_zero, Real.rpow_zero, mul_one]
    exact norm_indicatorConstLp_top hŒºs_pos
  ¬∑ exact norm_indicatorConstLp hp_pos hp_top

theorem norm_indicatorConstLp_le :
    ‚ÄñindicatorConstLp p hs hŒºs c‚Äñ ‚â§ ‚Äñc‚Äñ * (Œº s).toReal ^ (1 / p.toReal) := by
  rw [indicatorConstLp, Lp.norm_toLp]
  refine ENNReal.toReal_le_of_le_ofReal (by positivity) ?_
  refine (eLpNorm_indicator_const_le _ _).trans_eq ?_
  rw [ENNReal.ofReal_mul (norm_nonneg _), ofReal_norm, ENNReal.toReal_rpow, ENNReal.ofReal_toReal]
  exact ENNReal.rpow_ne_top_of_nonneg (by positivity) hŒºs

theorem nnnorm_indicatorConstLp_le :
    ‚ÄñindicatorConstLp p hs hŒºs c‚Äñ‚Çä ‚â§ ‚Äñc‚Äñ‚Çä * (Œº s).toNNReal ^ (1 / p.toReal) :=
  norm_indicatorConstLp_le

theorem enorm_indicatorConstLp_le :
    ‚ÄñindicatorConstLp p hs hŒºs c‚Äñ‚Çë ‚â§ ‚Äñc‚Äñ‚Çë * Œº s ^ (1 / p.toReal) := by
  simpa [ENNReal.coe_rpow_of_nonneg, ENNReal.coe_toNNReal hŒºs, Lp.enorm_def, ‚Üê enorm_eq_nnnorm]
    using ENNReal.coe_le_coe.2 <| nnnorm_indicatorConstLp_le (c := c) (hŒºs := hŒºs)

@[deprecated (since := "2025-01-20")] alias ennnorm_indicatorConstLp_le := enorm_indicatorConstLp_le

theorem edist_indicatorConstLp_eq_enorm {t : Set Œ±} {ht : MeasurableSet t} {hŒºt : Œº t ‚â† ‚àû} :
    edist (indicatorConstLp p hs hŒºs c) (indicatorConstLp p ht hŒºt c) =
      ‚ÄñindicatorConstLp p (hs.symmDiff ht) (measure_symmDiff_ne_top hŒºs hŒºt) c‚Äñ‚Çë := by
  unfold indicatorConstLp
  rw [Lp.edist_toLp_toLp, eLpNorm_indicator_sub_indicator, Lp.enorm_toLp]

@[deprecated (since := "2025-01-20")]
alias edist_indicatorConstLp_eq_nnnorm := edist_indicatorConstLp_eq_enorm

theorem dist_indicatorConstLp_eq_norm {t : Set Œ±} {ht : MeasurableSet t} {hŒºt : Œº t ‚â† ‚àû} :
    dist (indicatorConstLp p hs hŒºs c) (indicatorConstLp p ht hŒºt c) =
      ‚ÄñindicatorConstLp p (hs.symmDiff ht) (measure_symmDiff_ne_top hŒºs hŒºt) c‚Äñ := by
  -- Squeezed for performance reasons
  simp only [Lp.dist_edist, edist_indicatorConstLp_eq_enorm, enorm, ENNReal.coe_toReal,
    Lp.coe_nnnorm]

/-- A family of `indicatorConstLp` functions tends to an `indicatorConstLp`,
if the underlying sets tend to the set in the sense of the measure of the symmetric difference. -/
theorem tendsto_indicatorConstLp_set [hp‚ÇÅ : Fact (1 ‚â§ p)] {Œ≤ : Type*} {l : Filter Œ≤} {t : Œ≤ ‚Üí Set Œ±}
    {ht : ‚àÄ b, MeasurableSet (t b)} {hŒºt : ‚àÄ b, Œº (t b) ‚â† ‚àû} (hp : p ‚â† ‚àû)
    (h : Tendsto (fun b ‚Ü¶ Œº (t b ‚àÜ s)) l (ùìù 0)) :
    Tendsto (fun b ‚Ü¶ indicatorConstLp p (ht b) (hŒºt b) c) l (ùìù (indicatorConstLp p hs hŒºs c)) := by
  rw [tendsto_iff_dist_tendsto_zero]
  have hp‚ÇÄ : p ‚â† 0 := (one_pos.trans_le hp‚ÇÅ.out).ne'
  simp only [dist_indicatorConstLp_eq_norm, norm_indicatorConstLp hp‚ÇÄ hp]
  convert tendsto_const_nhds.mul
    (((ENNReal.tendsto_toReal ENNReal.zero_ne_top).comp h).rpow_const _)
  ¬∑ simp [Real.rpow_eq_zero_iff_of_nonneg, ENNReal.toReal_eq_zero_iff, hp, hp‚ÇÄ]
  ¬∑ simp

/-- A family of `indicatorConstLp` functions is continuous in the parameter,
if `Œº (s y ‚àÜ s x)` tends to zero as `y` tends to `x` for all `x`. -/
theorem continuous_indicatorConstLp_set [Fact (1 ‚â§ p)] {X : Type*} [TopologicalSpace X]
    {s : X ‚Üí Set Œ±} {hs : ‚àÄ x, MeasurableSet (s x)} {hŒºs : ‚àÄ x, Œº (s x) ‚â† ‚àû} (hp : p ‚â† ‚àû)
    (h : ‚àÄ x, Tendsto (fun y ‚Ü¶ Œº (s y ‚àÜ s x)) (ùìù x) (ùìù 0)) :
    Continuous fun x ‚Ü¶ indicatorConstLp p (hs x) (hŒºs x) c :=
  continuous_iff_continuousAt.2 fun x ‚Ü¶ tendsto_indicatorConstLp_set hp (h x)

@[simp]
theorem indicatorConstLp_empty :
    indicatorConstLp p MeasurableSet.empty (by simp : Œº ‚àÖ ‚â† ‚àû) c = 0 := by
  simp only [indicatorConstLp, Set.indicator_empty', Mem‚Ñíp.toLp_zero]

theorem indicatorConstLp_inj {s t : Set Œ±} (hs : MeasurableSet s) (hsŒº : Œº s ‚â† ‚àû)
    (ht : MeasurableSet t) (htŒº : Œº t ‚â† ‚àû) {c : E} (hc : c ‚â† 0) :
    indicatorConstLp p hs hsŒº c = indicatorConstLp p ht htŒº c ‚Üî s =·µê[Œº] t := by
  simp_rw [‚Üê indicator_const_eventuallyEq hc, indicatorConstLp, Mem‚Ñíp.toLp_eq_toLp_iff]

theorem mem‚Ñíp_add_of_disjoint {f g : Œ± ‚Üí E} (h : Disjoint (support f) (support g))
    (hf : StronglyMeasurable f) (hg : StronglyMeasurable g) :
    Mem‚Ñíp (f + g) p Œº ‚Üî Mem‚Ñíp f p Œº ‚àß Mem‚Ñíp g p Œº := by
  borelize E
  refine ‚ü®fun hfg => ‚ü®?_, ?_‚ü©, fun h => h.1.add h.2‚ü©
  ¬∑ rw [‚Üê Set.indicator_add_eq_left h]; exact hfg.indicator (measurableSet_support hf.measurable)
  ¬∑ rw [‚Üê Set.indicator_add_eq_right h]; exact hfg.indicator (measurableSet_support hg.measurable)

/-- The indicator of a disjoint union of two sets is the sum of the indicators of the sets. -/
theorem indicatorConstLp_disjoint_union {s t : Set Œ±} (hs : MeasurableSet s) (ht : MeasurableSet t)
    (hŒºs : Œº s ‚â† ‚àû) (hŒºt : Œº t ‚â† ‚àû) (hst : Disjoint s t) (c : E) :
    indicatorConstLp p (hs.union ht) (measure_union_ne_top hŒºs hŒºt) c =
      indicatorConstLp p hs hŒºs c + indicatorConstLp p ht hŒºt c := by
  ext1
  refine indicatorConstLp_coeFn.trans (EventuallyEq.trans ?_ (Lp.coeFn_add _ _).symm)
  refine
    EventuallyEq.trans ?_
      (EventuallyEq.add indicatorConstLp_coeFn.symm indicatorConstLp_coeFn.symm)
  rw [Set.indicator_union_of_disjoint hst]

end IndicatorConstLp

section const

variable (Œº p)
variable [IsFiniteMeasure Œº] (c : E)

/-- Constant function as an element of `MeasureTheory.Lp` for a finite measure. -/
protected def Lp.const : E ‚Üí+ Lp E p Œº where
  toFun c := ‚ü®AEEqFun.const Œ± c, const_mem_Lp Œ± Œº c‚ü©
  map_zero' := rfl
  map_add' _ _ := rfl

lemma Lp.coeFn_const : Lp.const p Œº c =·µê[Œº] Function.const Œ± c :=
  AEEqFun.coeFn_const Œ± c

@[simp] lemma Lp.const_val : (Lp.const p Œº c).1 = AEEqFun.const Œ± c := rfl

@[simp]
lemma Mem‚Ñíp.toLp_const : Mem‚Ñíp.toLp _ (mem‚Ñíp_const c) = Lp.const p Œº c := rfl

@[simp]
lemma indicatorConstLp_univ :
    indicatorConstLp p .univ (measure_ne_top Œº _) c = Lp.const p Œº c := by
  rw [‚Üê Mem‚Ñíp.toLp_const, indicatorConstLp]
  simp only [Set.indicator_univ, Function.const]

theorem Lp.norm_const [NeZero Œº] (hp_zero : p ‚â† 0) :
    ‚ÄñLp.const p Œº c‚Äñ = ‚Äñc‚Äñ * (Œº Set.univ).toReal ^ (1 / p.toReal) := by
  have := NeZero.ne Œº
  rw [‚Üê Mem‚Ñíp.toLp_const, Lp.norm_toLp, eLpNorm_const] <;> try assumption
  rw [ENNReal.toReal_mul, toReal_enorm, ‚Üê ENNReal.toReal_rpow]

theorem Lp.norm_const' (hp_zero : p ‚â† 0) (hp_top : p ‚â† ‚àû) :
    ‚ÄñLp.const p Œº c‚Äñ = ‚Äñc‚Äñ * (Œº Set.univ).toReal ^ (1 / p.toReal) := by
  rw [‚Üê Mem‚Ñíp.toLp_const, Lp.norm_toLp, eLpNorm_const'] <;> try assumption
  rw [ENNReal.toReal_mul, toReal_enorm, ‚Üê ENNReal.toReal_rpow]

theorem Lp.norm_const_le : ‚ÄñLp.const p Œº c‚Äñ ‚â§ ‚Äñc‚Äñ * (Œº Set.univ).toReal ^ (1 / p.toReal) := by
  rw [‚Üê indicatorConstLp_univ]
  exact norm_indicatorConstLp_le

/-- `MeasureTheory.Lp.const` as a `LinearMap`. -/
@[simps] protected def Lp.const‚Çó (ùïú : Type*) [NormedRing ùïú] [Module ùïú E] [BoundedSMul ùïú E] :
    E ‚Üí‚Çó[ùïú] Lp E p Œº where
  toFun := Lp.const p Œº
  map_add' := map_add _
  map_smul' _ _ := rfl

@[simps! apply]
protected def Lp.constL (ùïú : Type*) [NormedField ùïú] [NormedSpace ùïú E] [Fact (1 ‚â§ p)] :
    E ‚ÜíL[ùïú] Lp E p Œº :=
  (Lp.const‚Çó p Œº ùïú).mkContinuous ((Œº Set.univ).toReal ^ (1 / p.toReal)) fun _ ‚Ü¶
    (Lp.norm_const_le _ _ _).trans_eq (mul_comm _ _)

theorem Lp.norm_constL_le (ùïú : Type*) [NontriviallyNormedField ùïú] [NormedSpace ùïú E]
    [Fact (1 ‚â§ p)] :
    ‚Äñ(Lp.constL p Œº ùïú : E ‚ÜíL[ùïú] Lp E p Œº)‚Äñ ‚â§ (Œº Set.univ).toReal ^ (1 / p.toReal) :=
  LinearMap.mkContinuous_norm_le _ (by positivity) _

end const

theorem Mem‚Ñíp.norm_rpow_div {f : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) (q : ‚Ñù‚â•0‚àû) :
    Mem‚Ñíp (fun x : Œ± => ‚Äñf x‚Äñ ^ q.toReal) (p / q) Œº := by
  refine ‚ü®(hf.1.norm.aemeasurable.pow_const q.toReal).aestronglyMeasurable, ?_‚ü©
  by_cases q_top : q = ‚àû
  ¬∑ simp [q_top]
  by_cases q_zero : q = 0
  ¬∑ simp only [q_zero, ENNReal.zero_toReal, Real.rpow_zero]
    by_cases p_zero : p = 0
    ¬∑ simp [p_zero]
    rw [ENNReal.div_zero p_zero]
    exact (mem‚Ñíp_top_const (1 : ‚Ñù)).2
  rw [eLpNorm_norm_rpow _ (ENNReal.toReal_pos q_zero q_top)]
  apply ENNReal.rpow_lt_top_of_nonneg ENNReal.toReal_nonneg
  rw [ENNReal.ofReal_toReal q_top, div_eq_mul_inv, mul_assoc, ENNReal.inv_mul_cancel q_zero q_top,
    mul_one]
  exact hf.2.ne

theorem mem‚Ñíp_norm_rpow_iff {q : ‚Ñù‚â•0‚àû} {f : Œ± ‚Üí E} (hf : AEStronglyMeasurable f Œº) (q_zero : q ‚â† 0)
    (q_top : q ‚â† ‚àû) : Mem‚Ñíp (fun x : Œ± => ‚Äñf x‚Äñ ^ q.toReal) (p / q) Œº ‚Üî Mem‚Ñíp f p Œº := by
  refine ‚ü®fun h => ?_, fun h => h.norm_rpow_div q‚ü©
  apply (mem‚Ñíp_norm_iff hf).1
  convert h.norm_rpow_div q‚Åª¬π using 1
  ¬∑ ext x
    rw [Real.norm_eq_abs, Real.abs_rpow_of_nonneg (norm_nonneg _), ‚Üê Real.rpow_mul (abs_nonneg _),
      ENNReal.toReal_inv, mul_inv_cancel‚ÇÄ, abs_of_nonneg (norm_nonneg _), Real.rpow_one]
    simp [ENNReal.toReal_eq_zero_iff, not_or, q_zero, q_top]
  ¬∑ rw [div_eq_mul_inv, inv_inv, div_eq_mul_inv, mul_assoc, ENNReal.inv_mul_cancel q_zero q_top,
      mul_one]

theorem Mem‚Ñíp.norm_rpow {f : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    Mem‚Ñíp (fun x : Œ± => ‚Äñf x‚Äñ ^ p.toReal) 1 Œº := by
  convert hf.norm_rpow_div p
  rw [div_eq_mul_inv, ENNReal.mul_inv_cancel hp_ne_zero hp_ne_top]

theorem AEEqFun.compMeasurePreserving_mem_Lp {Œ≤ : Type*} [MeasurableSpace Œ≤]
    {Œºb : MeasureTheory.Measure Œ≤} {g : Œ≤ ‚Üí‚Çò[Œºb] E} (hg : g ‚àà Lp E p Œºb) {f : Œ± ‚Üí Œ≤}
    (hf : MeasurePreserving f Œº Œºb) :
    g.compMeasurePreserving f hf ‚àà Lp E p Œº := by
  rw [Lp.mem_Lp_iff_eLpNorm_lt_top] at hg ‚ä¢
  rwa [eLpNorm_compMeasurePreserving]

namespace Lp

/-! ### Composition with a measure preserving function -/

variable {Œ≤ : Type*} [MeasurableSpace Œ≤] {Œºb : MeasureTheory.Measure Œ≤} {f : Œ± ‚Üí Œ≤}

/-- Composition of an `L^p` function with a measure preserving function is an `L^p` function. -/
def compMeasurePreserving (f : Œ± ‚Üí Œ≤) (hf : MeasurePreserving f Œº Œºb) :
    Lp E p Œºb ‚Üí+ Lp E p Œº where
  toFun g := ‚ü®g.1.compMeasurePreserving f hf, g.1.compMeasurePreserving_mem_Lp g.2 hf‚ü©
  map_zero' := rfl
  map_add' := by rintro ‚ü®‚ü®_‚ü©, _‚ü© ‚ü®‚ü®_‚ü©, _‚ü©; rfl

@[simp]
theorem compMeasurePreserving_val (g : Lp E p Œºb) (hf : MeasurePreserving f Œº Œºb) :
    (compMeasurePreserving f hf g).1 = g.1.compMeasurePreserving f hf :=
  rfl

theorem coeFn_compMeasurePreserving (g : Lp E p Œºb) (hf : MeasurePreserving f Œº Œºb) :
    compMeasurePreserving f hf g =·µê[Œº] g ‚àò f :=
  g.1.coeFn_compMeasurePreserving hf

@[simp]
theorem norm_compMeasurePreserving (g : Lp E p Œºb) (hf : MeasurePreserving f Œº Œºb) :
    ‚ÄñcompMeasurePreserving f hf g‚Äñ = ‚Äñg‚Äñ :=
  congr_arg ENNReal.toReal <| g.1.eLpNorm_compMeasurePreserving hf

theorem isometry_compMeasurePreserving [Fact (1 ‚â§ p)] (hf : MeasurePreserving f Œº Œºb) :
    Isometry (compMeasurePreserving f hf : Lp E p Œºb ‚Üí Lp E p Œº) :=
  AddMonoidHomClass.isometry_of_norm _ (norm_compMeasurePreserving ¬∑ hf)

theorem toLp_compMeasurePreserving {g : Œ≤ ‚Üí E} (hg : Mem‚Ñíp g p Œºb) (hf : MeasurePreserving f Œº Œºb) :
    compMeasurePreserving f hf (hg.toLp g) = (hg.comp_measurePreserving hf).toLp _ := rfl

theorem indicatorConstLp_compMeasurePreserving {s : Set Œ≤} (hs : MeasurableSet s)
    (hŒºs : Œºb s ‚â† ‚àû) (c : E) (hf : MeasurePreserving f Œº Œºb) :
    Lp.compMeasurePreserving f hf (indicatorConstLp p hs hŒºs c) =
      indicatorConstLp p (hs.preimage hf.measurable)
        (by rwa [hf.measure_preimage hs.nullMeasurableSet]) c :=
  rfl

variable (ùïú : Type*) [NormedRing ùïú] [Module ùïú E] [BoundedSMul ùïú E]

/-- `MeasureTheory.Lp.compMeasurePreserving` as a linear map. -/
@[simps]
def compMeasurePreserving‚Çó (f : Œ± ‚Üí Œ≤) (hf : MeasurePreserving f Œº Œºb) :
    Lp E p Œºb ‚Üí‚Çó[ùïú] Lp E p Œº where
  __ := compMeasurePreserving f hf
  map_smul' c g := by rcases g with ‚ü®‚ü®_‚ü©, _‚ü©; rfl

/-- `MeasureTheory.Lp.compMeasurePreserving` as a linear isometry. -/
@[simps!]
def compMeasurePreserving‚Çó·µ¢ [Fact (1 ‚â§ p)] (f : Œ± ‚Üí Œ≤) (hf : MeasurePreserving f Œº Œºb) :
    Lp E p Œºb ‚Üí‚Çó·µ¢[ùïú] Lp E p Œº where
  toLinearMap := compMeasurePreserving‚Çó ùïú f hf
  norm_map' := (norm_compMeasurePreserving ¬∑ hf)

end Lp

end MeasureTheory

open MeasureTheory

/-!
### Composition on `L^p`

We show that Lipschitz functions vanishing at zero act by composition on `L^p`, and specialize
this to the composition with continuous linear maps, and to the definition of the positive
part of an `L^p` function.
-/


section Composition

variable {g : E ‚Üí F} {c : ‚Ñù‚â•0}

theorem LipschitzWith.comp_mem‚Ñíp {Œ± E F} {K} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [NormedAddCommGroup E] [NormedAddCommGroup F] {f : Œ± ‚Üí E} {g : E ‚Üí F} (hg : LipschitzWith K g)
    (g0 : g 0 = 0) (hL : Mem‚Ñíp f p Œº) : Mem‚Ñíp (g ‚àò f) p Œº :=
  have : ‚àÄ x, ‚Äñg (f x)‚Äñ ‚â§ K * ‚Äñf x‚Äñ := fun x ‚Ü¶ by
    -- TODO: add `LipschitzWith.nnnorm_sub_le` and `LipschitzWith.nnnorm_le`
    simpa [g0] using hg.norm_sub_le (f x) 0
  hL.of_le_mul (hg.continuous.comp_aestronglyMeasurable hL.1) (Eventually.of_forall this)

theorem MeasureTheory.Mem‚Ñíp.of_comp_antilipschitzWith {Œ± E F} {K'} [MeasurableSpace Œ±]
    {Œº : Measure Œ±} [NormedAddCommGroup E] [NormedAddCommGroup F] {f : Œ± ‚Üí E} {g : E ‚Üí F}
    (hL : Mem‚Ñíp (g ‚àò f) p Œº) (hg : UniformContinuous g) (hg' : AntilipschitzWith K' g)
    (g0 : g 0 = 0) : Mem‚Ñíp f p Œº := by
  have A : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ K' * ‚Äñg (f x)‚Äñ := by
    intro x
    -- TODO: add `AntilipschitzWith.le_mul_nnnorm_sub` and `AntilipschitzWith.le_mul_norm`
    rw [‚Üê dist_zero_right, ‚Üê dist_zero_right, ‚Üê g0]
    apply hg'.le_mul_dist
  have B : AEStronglyMeasurable f Œº :=
    (hg'.isUniformEmbedding hg).isEmbedding.aestronglyMeasurable_comp_iff.1 hL.1
  exact hL.of_le_mul B (Filter.Eventually.of_forall A)

namespace LipschitzWith

theorem mem‚Ñíp_comp_iff_of_antilipschitz {Œ± E F} {K K'} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [NormedAddCommGroup E] [NormedAddCommGroup F] {f : Œ± ‚Üí E} {g : E ‚Üí F} (hg : LipschitzWith K g)
    (hg' : AntilipschitzWith K' g) (g0 : g 0 = 0) : Mem‚Ñíp (g ‚àò f) p Œº ‚Üî Mem‚Ñíp f p Œº :=
  ‚ü®fun h => h.of_comp_antilipschitzWith hg.uniformContinuous hg' g0, fun h => hg.comp_mem‚Ñíp g0 h‚ü©

/-- When `g` is a Lipschitz function sending `0` to `0` and `f` is in `Lp`, then `g ‚àò f` is well
defined as an element of `Lp`. -/
def compLp (hg : LipschitzWith c g) (g0 : g 0 = 0) (f : Lp E p Œº) : Lp F p Œº :=
  ‚ü®AEEqFun.comp g hg.continuous (f : Œ± ‚Üí‚Çò[Œº] E), by
    suffices ‚àÄ·µê x ‚àÇŒº, ‚ÄñAEEqFun.comp g hg.continuous (f : Œ± ‚Üí‚Çò[Œº] E) x‚Äñ ‚â§ c * ‚Äñf x‚Äñ from
      Lp.mem_Lp_of_ae_le_mul this
    filter_upwards [AEEqFun.coeFn_comp g hg.continuous (f : Œ± ‚Üí‚Çò[Œº] E)] with a ha
    simp only [ha]
    rw [‚Üê dist_zero_right, ‚Üê dist_zero_right, ‚Üê g0]
    exact hg.dist_le_mul (f a) 0‚ü©

theorem coeFn_compLp (hg : LipschitzWith c g) (g0 : g 0 = 0) (f : Lp E p Œº) :
    hg.compLp g0 f =·µê[Œº] g ‚àò f :=
  AEEqFun.coeFn_comp _ hg.continuous _

@[simp]
theorem compLp_zero (hg : LipschitzWith c g) (g0 : g 0 = 0) : hg.compLp g0 (0 : Lp E p Œº) = 0 := by
  rw [Lp.eq_zero_iff_ae_eq_zero]
  apply (coeFn_compLp _ _ _).trans
  filter_upwards [Lp.coeFn_zero E p Œº] with _ ha
  simp only [ha, g0, Function.comp_apply, Pi.zero_apply]

theorem norm_compLp_sub_le (hg : LipschitzWith c g) (g0 : g 0 = 0) (f f' : Lp E p Œº) :
    ‚Äñhg.compLp g0 f - hg.compLp g0 f'‚Äñ ‚â§ c * ‚Äñf - f'‚Äñ := by
  apply Lp.norm_le_mul_norm_of_ae_le_mul
  filter_upwards [hg.coeFn_compLp g0 f, hg.coeFn_compLp g0 f',
    Lp.coeFn_sub (hg.compLp g0 f) (hg.compLp g0 f'), Lp.coeFn_sub f f'] with a ha1 ha2 ha3 ha4
  simp only [ha1, ha2, ha3, ha4, ‚Üê dist_eq_norm, Pi.sub_apply, Function.comp_apply]
  exact hg.dist_le_mul (f a) (f' a)

theorem norm_compLp_le (hg : LipschitzWith c g) (g0 : g 0 = 0) (f : Lp E p Œº) :
    ‚Äñhg.compLp g0 f‚Äñ ‚â§ c * ‚Äñf‚Äñ := by
  -- squeezed for performance reasons
  simpa only [compLp_zero, sub_zero] using hg.norm_compLp_sub_le g0 f 0

theorem lipschitzWith_compLp [Fact (1 ‚â§ p)] (hg : LipschitzWith c g) (g0 : g 0 = 0) :
    LipschitzWith c (hg.compLp g0 : Lp E p Œº ‚Üí Lp F p Œº) :=
  -- squeezed for performance reasons
  LipschitzWith.of_dist_le_mul fun f g => by simp only [dist_eq_norm, norm_compLp_sub_le]

theorem continuous_compLp [Fact (1 ‚â§ p)] (hg : LipschitzWith c g) (g0 : g 0 = 0) :
    Continuous (hg.compLp g0 : Lp E p Œº ‚Üí Lp F p Œº) :=
  (lipschitzWith_compLp hg g0).continuous

end LipschitzWith

namespace ContinuousLinearMap

variable {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedSpace ùïú E] [NormedSpace ùïú F]

/-- Composing `f : Lp` with `L : E ‚ÜíL[ùïú] F`. -/
def compLp (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : Lp F p Œº :=
  L.lipschitz.compLp (map_zero L) f

theorem coeFn_compLp (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : ‚àÄ·µê a ‚àÇŒº, (L.compLp f) a = L (f a) :=
  LipschitzWith.coeFn_compLp _ _ _

theorem coeFn_compLp' (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : L.compLp f =·µê[Œº] fun a => L (f a) :=
  L.coeFn_compLp f

theorem comp_mem‚Ñíp (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : Mem‚Ñíp (L ‚àò f) p Œº :=
  (Lp.mem‚Ñíp (L.compLp f)).ae_eq (L.coeFn_compLp' f)

theorem comp_mem‚Ñíp' (L : E ‚ÜíL[ùïú] F) {f : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) : Mem‚Ñíp (L ‚àò f) p Œº :=
  (L.comp_mem‚Ñíp (hf.toLp f)).ae_eq (EventuallyEq.fun_comp hf.coeFn_toLp _)

section RCLike

variable {K : Type*} [RCLike K]

theorem _root_.MeasureTheory.Mem‚Ñíp.ofReal {f : Œ± ‚Üí ‚Ñù} (hf : Mem‚Ñíp f p Œº) :
    Mem‚Ñíp (fun x => (f x : K)) p Œº :=
  (@RCLike.ofRealCLM K _).comp_mem‚Ñíp' hf

theorem _root_.MeasureTheory.mem‚Ñíp_re_im_iff {f : Œ± ‚Üí K} :
    Mem‚Ñíp (fun x ‚Ü¶ RCLike.re (f x)) p Œº ‚àß Mem‚Ñíp (fun x ‚Ü¶ RCLike.im (f x)) p Œº ‚Üî
      Mem‚Ñíp f p Œº := by
  refine ‚ü®?_, fun hf => ‚ü®hf.re, hf.im‚ü©‚ü©
  rintro ‚ü®hre, him‚ü©
  convert MeasureTheory.Mem‚Ñíp.add (E := K) hre.ofReal (him.ofReal.const_mul RCLike.I)
  ext1 x
  rw [Pi.add_apply, mul_comm, RCLike.re_add_im]

end RCLike

theorem add_compLp (L L' : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) :
    (L + L').compLp f = L.compLp f + L'.compLp f := by
  ext1
  refine (coeFn_compLp' (L + L') f).trans ?_
  refine EventuallyEq.trans ?_ (Lp.coeFn_add _ _).symm
  refine
    EventuallyEq.trans ?_ (EventuallyEq.add (L.coeFn_compLp' f).symm (L'.coeFn_compLp' f).symm)
  filter_upwards with x
  rw [coe_add', Pi.add_def]

theorem smul_compLp {ùïú'} [NormedRing ùïú'] [Module ùïú' F] [BoundedSMul ùïú' F] [SMulCommClass ùïú ùïú' F]
    (c : ùïú') (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : (c ‚Ä¢ L).compLp f = c ‚Ä¢ L.compLp f := by
  ext1
  refine (coeFn_compLp' (c ‚Ä¢ L) f).trans ?_
  refine EventuallyEq.trans ?_ (Lp.coeFn_smul _ _).symm
  refine (L.coeFn_compLp' f).mono fun x hx => ?_
  rw [Pi.smul_apply, hx, coe_smul', Pi.smul_def]

theorem norm_compLp_le (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : ‚ÄñL.compLp f‚Äñ ‚â§ ‚ÄñL‚Äñ * ‚Äñf‚Äñ :=
  LipschitzWith.norm_compLp_le _ _ _

variable (Œº p)

/-- Composing `f : Lp E p Œº` with `L : E ‚ÜíL[ùïú] F`, seen as a `ùïú`-linear map on `Lp E p Œº`. -/
def compLp‚Çó (L : E ‚ÜíL[ùïú] F) : Lp E p Œº ‚Üí‚Çó[ùïú] Lp F p Œº where
  toFun f := L.compLp f
  map_add' f g := by
    ext1
    filter_upwards [Lp.coeFn_add f g, coeFn_compLp L (f + g), coeFn_compLp L f,
      coeFn_compLp L g, Lp.coeFn_add (L.compLp f) (L.compLp g)]
    intro a ha1 ha2 ha3 ha4 ha5
    simp only [ha1, ha2, ha3, ha4, ha5, map_add, Pi.add_apply]
  map_smul' c f := by
    dsimp
    ext1
    filter_upwards [Lp.coeFn_smul c f, coeFn_compLp L (c ‚Ä¢ f), Lp.coeFn_smul c (L.compLp f),
      coeFn_compLp L f] with _ ha1 ha2 ha3 ha4
    simp only [ha1, ha2, ha3, ha4, _root_.map_smul, Pi.smul_apply]

/-- Composing `f : Lp E p Œº` with `L : E ‚ÜíL[ùïú] F`, seen as a continuous `ùïú`-linear map on
`Lp E p Œº`. See also the similar
* `LinearMap.compLeft` for functions,
* `ContinuousLinearMap.compLeftContinuous` for continuous functions,
* `ContinuousLinearMap.compLeftContinuousBounded` for bounded continuous functions,
* `ContinuousLinearMap.compLeftContinuousCompact` for continuous functions on compact spaces.
-/
def compLpL [Fact (1 ‚â§ p)] (L : E ‚ÜíL[ùïú] F) : Lp E p Œº ‚ÜíL[ùïú] Lp F p Œº :=
  LinearMap.mkContinuous (L.compLp‚Çó p Œº) ‚ÄñL‚Äñ L.norm_compLp_le

variable {Œº p}

theorem coeFn_compLpL [Fact (1 ‚â§ p)] (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) :
    L.compLpL p Œº f =·µê[Œº] fun a => L (f a) :=
  L.coeFn_compLp f

theorem add_compLpL [Fact (1 ‚â§ p)] (L L' : E ‚ÜíL[ùïú] F) :
    (L + L').compLpL p Œº = L.compLpL p Œº + L'.compLpL p Œº := by ext1 f; exact add_compLp L L' f

theorem smul_compLpL [Fact (1 ‚â§ p)] {ùïú'} [NormedRing ùïú'] [Module ùïú' F] [BoundedSMul ùïú' F]
    [SMulCommClass ùïú ùïú' F] (c : ùïú') (L : E ‚ÜíL[ùïú] F) : (c ‚Ä¢ L).compLpL p Œº = c ‚Ä¢ L.compLpL p Œº := by
  ext1 f; exact smul_compLp c L f

theorem norm_compLpL_le [Fact (1 ‚â§ p)] (L : E ‚ÜíL[ùïú] F) : ‚ÄñL.compLpL p Œº‚Äñ ‚â§ ‚ÄñL‚Äñ :=
  LinearMap.mkContinuous_norm_le _ (norm_nonneg _) _

end ContinuousLinearMap

namespace MeasureTheory

theorem indicatorConstLp_eq_toSpanSingleton_compLp {s : Set Œ±} [NormedSpace ‚Ñù F]
    (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : F) :
    indicatorConstLp 2 hs hŒºs x =
      (ContinuousLinearMap.toSpanSingleton ‚Ñù x).compLp (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù)) := by
  ext1
  refine indicatorConstLp_coeFn.trans ?_
  have h_compLp :=
    (ContinuousLinearMap.toSpanSingleton ‚Ñù x).coeFn_compLp (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù))
  rw [‚Üê EventuallyEq] at h_compLp
  refine EventuallyEq.trans ?_ h_compLp.symm
  refine (@indicatorConstLp_coeFn _ _ _ 2 Œº _ s hs hŒºs (1 : ‚Ñù)).mono fun y hy => ?_
  dsimp only
  rw [hy]
  simp_rw [ContinuousLinearMap.toSpanSingleton_apply]
  by_cases hy_mem : y ‚àà s <;> simp [hy_mem]

namespace Lp

section PosPart

theorem lipschitzWith_pos_part : LipschitzWith 1 fun x : ‚Ñù => max x 0 :=
  LipschitzWith.id.max_const _

theorem _root_.MeasureTheory.Mem‚Ñíp.pos_part {f : Œ± ‚Üí ‚Ñù} (hf : Mem‚Ñíp f p Œº) :
    Mem‚Ñíp (fun x => max (f x) 0) p Œº :=
  lipschitzWith_pos_part.comp_mem‚Ñíp (max_eq_right le_rfl) hf

theorem _root_.MeasureTheory.Mem‚Ñíp.neg_part {f : Œ± ‚Üí ‚Ñù} (hf : Mem‚Ñíp f p Œº) :
    Mem‚Ñíp (fun x => max (-f x) 0) p Œº :=
  lipschitzWith_pos_part.comp_mem‚Ñíp (max_eq_right le_rfl) hf.neg

/-- Positive part of a function in `L^p`. -/
def posPart (f : Lp ‚Ñù p Œº) : Lp ‚Ñù p Œº :=
  lipschitzWith_pos_part.compLp (max_eq_right le_rfl) f

/-- Negative part of a function in `L^p`. -/
def negPart (f : Lp ‚Ñù p Œº) : Lp ‚Ñù p Œº :=
  posPart (-f)

@[norm_cast]
theorem coe_posPart (f : Lp ‚Ñù p Œº) : (posPart f : Œ± ‚Üí‚Çò[Œº] ‚Ñù) = (f : Œ± ‚Üí‚Çò[Œº] ‚Ñù).posPart :=
  rfl

theorem coeFn_posPart (f : Lp ‚Ñù p Œº) : ‚áë(posPart f) =·µê[Œº] fun a => max (f a) 0 :=
  AEEqFun.coeFn_posPart _

theorem coeFn_negPart_eq_max (f : Lp ‚Ñù p Œº) : ‚àÄ·µê a ‚àÇŒº, negPart f a = max (-f a) 0 := by
  rw [negPart]
  filter_upwards [coeFn_posPart (-f), coeFn_neg f] with _ h‚ÇÅ h‚ÇÇ
  rw [h‚ÇÅ, h‚ÇÇ, Pi.neg_apply]

theorem coeFn_negPart (f : Lp ‚Ñù p Œº) : ‚àÄ·µê a ‚àÇŒº, negPart f a = -min (f a) 0 :=
  (coeFn_negPart_eq_max f).mono fun a h => by rw [h, ‚Üê max_neg_neg, neg_zero]

theorem continuous_posPart [Fact (1 ‚â§ p)] : Continuous fun f : Lp ‚Ñù p Œº => posPart f :=
  LipschitzWith.continuous_compLp _ _

theorem continuous_negPart [Fact (1 ‚â§ p)] : Continuous fun f : Lp ‚Ñù p Œº => negPart f := by
  unfold negPart
  exact continuous_posPart.comp continuous_neg

end PosPart

end Lp

end MeasureTheory

end Composition

/-!
## `L^p` is a complete space

We show that `L^p` is a complete space for `1 ‚â§ p`.
-/

section CompleteSpace

namespace MeasureTheory

namespace Lp

theorem eLpNorm'_lim_eq_lintegral_liminf {Œπ} [Nonempty Œπ] [LinearOrder Œπ] {f : Œπ ‚Üí Œ± ‚Üí G} {p : ‚Ñù}
    {f_lim : Œ± ‚Üí G} (h_lim : ‚àÄ·µê x : Œ± ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x))) :
    eLpNorm' f_lim p Œº = (‚à´‚Åª a, atTop.liminf (‚Äñf ¬∑ a‚Äñ‚Çë ^ p) ‚àÇŒº) ^ (1 / p) := by
  suffices h_no_pow : (‚à´‚Åª a, ‚Äñf_lim a‚Äñ‚Çë ^ p ‚àÇŒº) = ‚à´‚Åª a, atTop.liminf fun m => ‚Äñf m a‚Äñ‚Çë ^ p ‚àÇŒº by
    rw [eLpNorm'_eq_lintegral_enorm, h_no_pow]
  refine lintegral_congr_ae (h_lim.mono fun a ha => ?_)
  dsimp only
  rw [Tendsto.liminf_eq]
  refine (ENNReal.continuous_rpow_const.tendsto ‚Äñf_lim a‚Äñ‚Çä).comp ?_
  exact (continuous_enorm.tendsto (f_lim a)).comp ha

theorem eLpNorm'_lim_le_liminf_eLpNorm' {E} [NormedAddCommGroup E] {f : ‚Ñï ‚Üí Œ± ‚Üí E} {p : ‚Ñù}
    (hp_pos : 0 < p) (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) {f_lim : Œ± ‚Üí E}
    (h_lim : ‚àÄ·µê x : Œ± ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x))) :
    eLpNorm' f_lim p Œº ‚â§ atTop.liminf fun n => eLpNorm' (f n) p Œº := by
  rw [eLpNorm'_lim_eq_lintegral_liminf h_lim]
  rw [one_div, ‚Üê ENNReal.le_rpow_inv_iff (by simp [hp_pos] : 0 < p‚Åª¬π), inv_inv]
  refine (lintegral_liminf_le' fun m => (hf m).enorm.pow_const _).trans_eq ?_
  have h_pow_liminf :
    atTop.liminf (fun n ‚Ü¶ eLpNorm' (f n) p Œº) ^ p
      = atTop.liminf fun n ‚Ü¶ eLpNorm' (f n) p Œº ^ p := by
    have h_rpow_mono := ENNReal.strictMono_rpow_of_pos hp_pos
    have h_rpow_surj := (ENNReal.rpow_left_bijective hp_pos.ne.symm).2
    refine (h_rpow_mono.orderIsoOfSurjective _ h_rpow_surj).liminf_apply ?_ ?_ ?_ ?_
    all_goals isBoundedDefault
  rw [h_pow_liminf]
  simp_rw [eLpNorm'_eq_lintegral_enorm, ‚Üê ENNReal.rpow_mul, one_div,
    inv_mul_cancel‚ÇÄ hp_pos.ne.symm, ENNReal.rpow_one]

theorem eLpNorm_exponent_top_lim_eq_essSup_liminf {Œπ} [Nonempty Œπ] [LinearOrder Œπ] {f : Œπ ‚Üí Œ± ‚Üí G}
    {f_lim : Œ± ‚Üí G} (h_lim : ‚àÄ·µê x : Œ± ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x))) :
    eLpNorm f_lim ‚àû Œº = essSup (fun x => atTop.liminf fun m => ‚Äñf m x‚Äñ‚Çë) Œº := by
  rw [eLpNorm_exponent_top, eLpNormEssSup_eq_essSup_enorm]
  refine essSup_congr_ae (h_lim.mono fun x hx => ?_)
  dsimp only
  apply (Tendsto.liminf_eq ..).symm
  exact (continuous_enorm.tendsto (f_lim x)).comp hx

theorem eLpNorm_exponent_top_lim_le_liminf_eLpNorm_exponent_top {Œπ} [Nonempty Œπ] [Countable Œπ]
    [LinearOrder Œπ] {f : Œπ ‚Üí Œ± ‚Üí F} {f_lim : Œ± ‚Üí F}
    (h_lim : ‚àÄ·µê x : Œ± ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x))) :
    eLpNorm f_lim ‚àû Œº ‚â§ atTop.liminf fun n => eLpNorm (f n) ‚àû Œº := by
  rw [eLpNorm_exponent_top_lim_eq_essSup_liminf h_lim]
  simp_rw [eLpNorm_exponent_top, eLpNormEssSup]
  exact ENNReal.essSup_liminf_le _

theorem eLpNorm_lim_le_liminf_eLpNorm {E} [NormedAddCommGroup E] {f : ‚Ñï ‚Üí Œ± ‚Üí E}
    (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) (f_lim : Œ± ‚Üí E)
    (h_lim : ‚àÄ·µê x : Œ± ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x))) :
    eLpNorm f_lim p Œº ‚â§ atTop.liminf fun n => eLpNorm (f n) p Œº := by
  obtain rfl|hp0 := eq_or_ne p 0
  ¬∑ simp
  by_cases hp_top : p = ‚àû
  ¬∑ simp_rw [hp_top]
    exact eLpNorm_exponent_top_lim_le_liminf_eLpNorm_exponent_top h_lim
  simp_rw [eLpNorm_eq_eLpNorm' hp0 hp_top]
  have hp_pos : 0 < p.toReal := ENNReal.toReal_pos hp0 hp_top
  exact eLpNorm'_lim_le_liminf_eLpNorm' hp_pos hf h_lim

/-! ### `Lp` is complete iff Cauchy sequences of `‚Ñíp` have limits in `‚Ñíp` -/


theorem tendsto_Lp_iff_tendsto_‚Ñíp' {Œπ} {fi : Filter Œπ} [Fact (1 ‚â§ p)] (f : Œπ ‚Üí Lp E p Œº)
    (f_lim : Lp E p Œº) :
    fi.Tendsto f (ùìù f_lim) ‚Üî fi.Tendsto (fun n => eLpNorm (‚áë(f n) - ‚áëf_lim) p Œº) (ùìù 0) := by
  rw [tendsto_iff_dist_tendsto_zero]
  simp_rw [dist_def]
  rw [‚Üê ENNReal.zero_toReal, ENNReal.tendsto_toReal_iff (fun n => ?_) ENNReal.zero_ne_top]
  rw [eLpNorm_congr_ae (Lp.coeFn_sub _ _).symm]
  exact Lp.eLpNorm_ne_top _

theorem tendsto_Lp_iff_tendsto_‚Ñíp {Œπ} {fi : Filter Œπ} [Fact (1 ‚â§ p)] (f : Œπ ‚Üí Lp E p Œº)
    (f_lim : Œ± ‚Üí E) (f_lim_‚Ñíp : Mem‚Ñíp f_lim p Œº) :
    fi.Tendsto f (ùìù (f_lim_‚Ñíp.toLp f_lim)) ‚Üî
      fi.Tendsto (fun n => eLpNorm (‚áë(f n) - f_lim) p Œº) (ùìù 0) := by
  rw [tendsto_Lp_iff_tendsto_‚Ñíp']
  suffices h_eq :
      (fun n => eLpNorm (‚áë(f n) - ‚áë(Mem‚Ñíp.toLp f_lim f_lim_‚Ñíp)) p Œº) =
        (fun n => eLpNorm (‚áë(f n) - f_lim) p Œº) by
    rw [h_eq]
  exact funext fun n => eLpNorm_congr_ae (EventuallyEq.rfl.sub (Mem‚Ñíp.coeFn_toLp f_lim_‚Ñíp))

theorem tendsto_Lp_iff_tendsto_‚Ñíp'' {Œπ} {fi : Filter Œπ} [Fact (1 ‚â§ p)] (f : Œπ ‚Üí Œ± ‚Üí E)
    (f_‚Ñíp : ‚àÄ n, Mem‚Ñíp (f n) p Œº) (f_lim : Œ± ‚Üí E) (f_lim_‚Ñíp : Mem‚Ñíp f_lim p Œº) :
    fi.Tendsto (fun n => (f_‚Ñíp n).toLp (f n)) (ùìù (f_lim_‚Ñíp.toLp f_lim)) ‚Üî
      fi.Tendsto (fun n => eLpNorm (f n - f_lim) p Œº) (ùìù 0) := by
  rw [Lp.tendsto_Lp_iff_tendsto_‚Ñíp' (fun n => (f_‚Ñíp n).toLp (f n)) (f_lim_‚Ñíp.toLp f_lim)]
  refine Filter.tendsto_congr fun n => ?_
  apply eLpNorm_congr_ae
  filter_upwards [((f_‚Ñíp n).sub f_lim_‚Ñíp).coeFn_toLp,
    Lp.coeFn_sub ((f_‚Ñíp n).toLp (f n)) (f_lim_‚Ñíp.toLp f_lim)] with _ hx‚ÇÅ hx‚ÇÇ
  rw [‚Üê hx‚ÇÇ]
  exact hx‚ÇÅ

theorem tendsto_Lp_of_tendsto_‚Ñíp {Œπ} {fi : Filter Œπ} [Fact (1 ‚â§ p)] {f : Œπ ‚Üí Lp E p Œº}
    (f_lim : Œ± ‚Üí E) (f_lim_‚Ñíp : Mem‚Ñíp f_lim p Œº)
    (h_tendsto : fi.Tendsto (fun n => eLpNorm (‚áë(f n) - f_lim) p Œº) (ùìù 0)) :
    fi.Tendsto f (ùìù (f_lim_‚Ñíp.toLp f_lim)) :=
  (tendsto_Lp_iff_tendsto_‚Ñíp f f_lim f_lim_‚Ñíp).mpr h_tendsto

theorem cauchySeq_Lp_iff_cauchySeq_‚Ñíp {Œπ} [Nonempty Œπ] [SemilatticeSup Œπ] [hp : Fact (1 ‚â§ p)]
    (f : Œπ ‚Üí Lp E p Œº) :
    CauchySeq f ‚Üî Tendsto (fun n : Œπ √ó Œπ => eLpNorm (‚áë(f n.fst) - ‚áë(f n.snd)) p Œº) atTop (ùìù 0) := by
  simp_rw [cauchySeq_iff_tendsto_dist_atTop_0, dist_def]
  rw [‚Üê ENNReal.zero_toReal, ENNReal.tendsto_toReal_iff (fun n => ?_) ENNReal.zero_ne_top]
  rw [eLpNorm_congr_ae (Lp.coeFn_sub _ _).symm]
  exact eLpNorm_ne_top _

theorem completeSpace_lp_of_cauchy_complete_‚Ñíp [hp : Fact (1 ‚â§ p)]
    (H :
      ‚àÄ (f : ‚Ñï ‚Üí Œ± ‚Üí E) (_ : ‚àÄ n, Mem‚Ñíp (f n) p Œº) (B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû) (_ : ‚àë' i, B i < ‚àû)
        (_ : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm (f n - f m) p Œº < B N),
        ‚àÉ (f_lim : Œ± ‚Üí E), Mem‚Ñíp f_lim p Œº ‚àß
          atTop.Tendsto (fun n => eLpNorm (f n - f_lim) p Œº) (ùìù 0)) :
    CompleteSpace (Lp E p Œº) := by
  let B := fun n : ‚Ñï => ((1 : ‚Ñù) / 2) ^ n
  have hB_pos : ‚àÄ n, 0 < B n := fun n => pow_pos (div_pos zero_lt_one zero_lt_two) n
  refine Metric.complete_of_convergent_controlled_sequences B hB_pos fun f hf => ?_
  rsuffices ‚ü®f_lim, hf_lim_meas, h_tendsto‚ü© :
    ‚àÉ (f_lim : Œ± ‚Üí E), Mem‚Ñíp f_lim p Œº ‚àß
      atTop.Tendsto (fun n => eLpNorm (‚áë(f n) - f_lim) p Œº) (ùìù 0)
  ¬∑ exact ‚ü®hf_lim_meas.toLp f_lim, tendsto_Lp_of_tendsto_‚Ñíp f_lim hf_lim_meas h_tendsto‚ü©
  obtain ‚ü®M, hB‚ü© : Summable B := summable_geometric_two
  let B1 n := ENNReal.ofReal (B n)
  have hB1_has : HasSum B1 (ENNReal.ofReal M) := by
    have h_tsum_B1 : ‚àë' i, B1 i = ENNReal.ofReal M := by
      change (‚àë' n : ‚Ñï, ENNReal.ofReal (B n)) = ENNReal.ofReal M
      rw [‚Üê hB.tsum_eq]
      exact (ENNReal.ofReal_tsum_of_nonneg (fun n => le_of_lt (hB_pos n)) hB.summable).symm
    have h_sum := (@ENNReal.summable _ B1).hasSum
    rwa [h_tsum_B1] at h_sum
  have hB1 : ‚àë' i, B1 i < ‚àû := by
    rw [hB1_has.tsum_eq]
    exact ENNReal.ofReal_lt_top
  let f1 : ‚Ñï ‚Üí Œ± ‚Üí E := fun n => f n
  refine H f1 (fun n => Lp.mem‚Ñíp (f n)) B1 hB1 fun N n m hn hm => ?_
  specialize hf N n m hn hm
  rw [dist_def] at hf
  dsimp only [f1]
  rwa [ENNReal.lt_ofReal_iff_toReal_lt]
  rw [eLpNorm_congr_ae (Lp.coeFn_sub _ _).symm]
  exact Lp.eLpNorm_ne_top _

/-! ### Prove that controlled Cauchy sequences of `‚Ñíp` have limits in `‚Ñíp` -/


private theorem eLpNorm'_sum_norm_sub_le_tsum_of_cauchy_eLpNorm' {f : ‚Ñï ‚Üí Œ± ‚Üí E}
    (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) {p : ‚Ñù} (hp1 : 1 ‚â§ p) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû}
    (h_cau : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm' (f n - f m) p Œº < B N) (n : ‚Ñï) :
    eLpNorm' (fun x => ‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) x - f i x‚Äñ) p Œº ‚â§ ‚àë' i, B i := by
  let f_norm_diff i x := ‚Äñf (i + 1) x - f i x‚Äñ
  have hgf_norm_diff :
    ‚àÄ n,
      (fun x => ‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) x - f i x‚Äñ) =
        ‚àë i ‚àà Finset.range (n + 1), f_norm_diff i :=
    fun n => funext fun x => by simp [f_norm_diff]
  rw [hgf_norm_diff]
  refine (eLpNorm'_sum_le (fun i _ => ((hf (i + 1)).sub (hf i)).norm) hp1).trans ?_
  simp_rw [eLpNorm'_norm]
  refine (Finset.sum_le_sum ?_).trans (sum_le_tsum _ (fun m _ => zero_le _) ENNReal.summable)
  exact fun m _ => (h_cau m (m + 1) m (Nat.le_succ m) (le_refl m)).le

private theorem lintegral_rpow_sum_enorm_sub_le_rpow_tsum
    {f : ‚Ñï ‚Üí Œ± ‚Üí E} {p : ‚Ñù} (hp1 : 1 ‚â§ p) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (n : ‚Ñï)
    (hn : eLpNorm' (fun x => ‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) x - f i x‚Äñ) p Œº ‚â§ ‚àë' i, B i) :
    (‚à´‚Åª a, (‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº) ‚â§ (‚àë' i, B i) ^ p := by
  have hp_pos : 0 < p := zero_lt_one.trans_le hp1
  rw [‚Üê inv_inv p, @ENNReal.le_rpow_inv_iff _ _ p‚Åª¬π (by simp [hp_pos]), inv_inv p]
  simp_rw [eLpNorm'_eq_lintegral_enorm, one_div] at hn
  have h_nnnorm_nonneg :
    (fun a => ‚Äñ‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Äñ‚Çë ^ p) = fun a =>
      (‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p := by
    ext1 a
    congr
    simp_rw [‚Üê ofReal_norm_eq_enorm]
    rw [‚Üê ENNReal.ofReal_sum_of_nonneg]
    ¬∑ rw [Real.norm_of_nonneg _]
      exact Finset.sum_nonneg fun x _ => norm_nonneg _
    ¬∑ exact fun x _ => norm_nonneg _
  rwa [h_nnnorm_nonneg] at hn

private theorem lintegral_rpow_tsum_coe_enorm_sub_le_tsum {f : ‚Ñï ‚Üí Œ± ‚Üí E}
    (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) {p : ‚Ñù} (hp1 : 1 ‚â§ p) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû}
    (h : ‚àÄ n, ‚à´‚Åª a, (‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº ‚â§ (‚àë' i, B i) ^ p) :
    (‚à´‚Åª a, (‚àë' i, ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº) ^ (1 / p) ‚â§ ‚àë' i, B i := by
  have hp_pos : 0 < p := zero_lt_one.trans_le hp1
  suffices h_pow : (‚à´‚Åª a, (‚àë' i, ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº) ‚â§ (‚àë' i, B i) ^ p by
      rwa [one_div, ‚Üê ENNReal.le_rpow_inv_iff (by simp [hp_pos] : 0 < p‚Åª¬π), inv_inv]
  have h_tsum_1 :
    ‚àÄ g : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû, ‚àë' i, g i = atTop.liminf fun n => ‚àë i ‚àà Finset.range (n + 1), g i := by
    intro g
    rw [ENNReal.tsum_eq_liminf_sum_nat, ‚Üê liminf_nat_add _ 1]
  simp_rw [h_tsum_1 _]
  rw [‚Üê h_tsum_1]
  have h_liminf_pow :
    ‚à´‚Åª a, (atTop.liminf fun n => ‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº =
      ‚à´‚Åª a, atTop.liminf fun n => (‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº := by
    refine lintegral_congr fun x => ?_
    have h_rpow_mono := ENNReal.strictMono_rpow_of_pos (zero_lt_one.trans_le hp1)
    have h_rpow_surj := (ENNReal.rpow_left_bijective hp_pos.ne.symm).2
    refine (h_rpow_mono.orderIsoOfSurjective _ h_rpow_surj).liminf_apply ?_ ?_ ?_ ?_
    all_goals isBoundedDefault
  rw [h_liminf_pow]
  refine (lintegral_liminf_le' fun n ‚Ü¶ ?_).trans <| liminf_le_of_frequently_le' <| .of_forall h
  exact ((Finset.range _).aemeasurable_sum fun i _ ‚Ü¶ ((hf _).sub (hf i)).enorm).pow_const _

private theorem tsum_enorm_sub_ae_lt_top {f : ‚Ñï ‚Üí Œ± ‚Üí E} (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº)
    {p : ‚Ñù} (hp1 : 1 ‚â§ p) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hB : ‚àë' i, B i ‚â† ‚àû)
    (h : (‚à´‚Åª a, (‚àë' i, ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº) ^ (1 / p) ‚â§ ‚àë' i, B i) :
    ‚àÄ·µê x ‚àÇŒº, ‚àë' i, ‚Äñf (i + 1) x - f i x‚Äñ‚Çë < ‚àû := by
  have hp_pos : 0 < p := zero_lt_one.trans_le hp1
  have h_integral : ‚à´‚Åª a, (‚àë' i, ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº < ‚àû := by
    have h_tsum_lt_top : (‚àë' i, B i) ^ p < ‚àû := ENNReal.rpow_lt_top_of_nonneg hp_pos.le hB
    refine lt_of_le_of_lt ?_ h_tsum_lt_top
    rwa [one_div, ‚Üê ENNReal.le_rpow_inv_iff (by simp [hp_pos] : 0 < p‚Åª¬π), inv_inv] at h
  have rpow_ae_lt_top : ‚àÄ·µê x ‚àÇŒº, (‚àë' i, ‚Äñf (i + 1) x - f i x‚Äñ‚Çë) ^ p < ‚àû := by
    refine ae_lt_top' (AEMeasurable.pow_const ?_ _) h_integral.ne
    exact AEMeasurable.ennreal_tsum fun n => ((hf (n + 1)).sub (hf n)).enorm
  refine rpow_ae_lt_top.mono fun x hx => ?_
  rwa [‚Üê ENNReal.lt_rpow_inv_iff hp_pos,
    ENNReal.top_rpow_of_pos (by simp [hp_pos] : 0 < p‚Åª¬π)] at hx

theorem ae_tendsto_of_cauchy_eLpNorm' [CompleteSpace E] {f : ‚Ñï ‚Üí Œ± ‚Üí E} {p : ‚Ñù}
    (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) (hp1 : 1 ‚â§ p) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hB : ‚àë' i, B i ‚â† ‚àû)
    (h_cau : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm' (f n - f m) p Œº < B N) :
    ‚àÄ·µê x ‚àÇŒº, ‚àÉ l : E, atTop.Tendsto (fun n => f n x) (ùìù l) := by
  have h_summable : ‚àÄ·µê x ‚àÇŒº, Summable fun i : ‚Ñï => f (i + 1) x - f i x := by
    have h1 :
      ‚àÄ n, eLpNorm' (fun x => ‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) x - f i x‚Äñ) p Œº ‚â§ ‚àë' i, B i :=
      eLpNorm'_sum_norm_sub_le_tsum_of_cauchy_eLpNorm' hf hp1 h_cau
    have h2 n :
        ‚à´‚Åª a, (‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº ‚â§ (‚àë' i, B i) ^ p :=
      lintegral_rpow_sum_enorm_sub_le_rpow_tsum hp1 n (h1 n)
    have h3 : (‚à´‚Åª a, (‚àë' i, ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº) ^ (1 / p) ‚â§ ‚àë' i, B i :=
      lintegral_rpow_tsum_coe_enorm_sub_le_tsum hf hp1 h2
    have h4 : ‚àÄ·µê x ‚àÇŒº, ‚àë' i, ‚Äñf (i + 1) x - f i x‚Äñ‚Çë < ‚àû :=
      tsum_enorm_sub_ae_lt_top hf hp1 hB h3
    exact h4.mono fun x hx => .of_nnnorm <| ENNReal.tsum_coe_ne_top_iff_summable.mp hx.ne
  have h :
    ‚àÄ·µê x ‚àÇŒº, ‚àÉ l : E,
      atTop.Tendsto (fun n => ‚àë i ‚àà Finset.range n, (f (i + 1) x - f i x)) (ùìù l) := by
    refine h_summable.mono fun x hx => ?_
    let hx_sum := hx.hasSum.tendsto_sum_nat
    exact ‚ü®‚àë' i, (f (i + 1) x - f i x), hx_sum‚ü©
  refine h.mono fun x hx => ?_
  cases' hx with l hx
  have h_rw_sum :
      (fun n => ‚àë i ‚àà Finset.range n, (f (i + 1) x - f i x)) = fun n => f n x - f 0 x := by
    ext1 n
    change
      (‚àë i ‚àà Finset.range n, ((fun m => f m x) (i + 1) - (fun m => f m x) i)) = f n x - f 0 x
    rw [Finset.sum_range_sub (fun m => f m x)]
  rw [h_rw_sum] at hx
  have hf_rw : (fun n => f n x) = fun n => f n x - f 0 x + f 0 x := by
    ext1 n
    abel
  rw [hf_rw]
  exact ‚ü®l + f 0 x, Tendsto.add_const _ hx‚ü©

theorem ae_tendsto_of_cauchy_eLpNorm [CompleteSpace E] {f : ‚Ñï ‚Üí Œ± ‚Üí E}
    (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) (hp : 1 ‚â§ p) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hB : ‚àë' i, B i ‚â† ‚àû)
    (h_cau : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm (f n - f m) p Œº < B N) :
    ‚àÄ·µê x ‚àÇŒº, ‚àÉ l : E, atTop.Tendsto (fun n => f n x) (ùìù l) := by
  by_cases hp_top : p = ‚àû
  ¬∑ simp_rw [hp_top] at *
    have h_cau_ae : ‚àÄ·µê x ‚àÇŒº, ‚àÄ N n m, N ‚â§ n ‚Üí N ‚â§ m ‚Üí ‚Äñ(f n - f m) x‚Äñ‚Çë < B N := by
      simp_rw [ae_all_iff]
      exact fun N n m hnN hmN => ae_lt_of_essSup_lt (h_cau N n m hnN hmN)
    simp_rw [eLpNorm_exponent_top, eLpNormEssSup] at h_cau
    refine h_cau_ae.mono fun x hx => cauchySeq_tendsto_of_complete ?_
    refine cauchySeq_of_le_tendsto_0 (fun n => (B n).toReal) ?_ ?_
    ¬∑ intro n m N hnN hmN
      specialize hx N n m hnN hmN
      rw [_root_.dist_eq_norm,
        ‚Üê ENNReal.ofReal_le_iff_le_toReal (ENNReal.ne_top_of_tsum_ne_top hB N),
        ofReal_norm_eq_enorm]
      exact hx.le
    ¬∑ rw [‚Üê ENNReal.zero_toReal]
      exact
        Tendsto.comp (g := ENNReal.toReal) (ENNReal.tendsto_toReal ENNReal.zero_ne_top)
          (ENNReal.tendsto_atTop_zero_of_tsum_ne_top hB)
  have hp1 : 1 ‚â§ p.toReal := by
    rw [‚Üê ENNReal.ofReal_le_iff_le_toReal hp_top, ENNReal.ofReal_one]
    exact hp
  have h_cau' : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm' (f n - f m) p.toReal Œº < B N := by
    intro N n m hn hm
    specialize h_cau N n m hn hm
    rwa [eLpNorm_eq_eLpNorm' (zero_lt_one.trans_le hp).ne.symm hp_top] at h_cau
  exact ae_tendsto_of_cauchy_eLpNorm' hf hp1 hB h_cau'

theorem cauchy_tendsto_of_tendsto {f : ‚Ñï ‚Üí Œ± ‚Üí E} (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº)
    (f_lim : Œ± ‚Üí E) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hB : ‚àë' i, B i ‚â† ‚àû)
    (h_cau : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm (f n - f m) p Œº < B N)
    (h_lim : ‚àÄ·µê x : Œ± ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x))) :
    atTop.Tendsto (fun n => eLpNorm (f n - f_lim) p Œº) (ùìù 0) := by
  rw [ENNReal.tendsto_atTop_zero]
  intro Œµ hŒµ
  have h_B : ‚àÉ N : ‚Ñï, B N ‚â§ Œµ := by
    suffices h_tendsto_zero : ‚àÉ N : ‚Ñï, ‚àÄ n : ‚Ñï, N ‚â§ n ‚Üí B n ‚â§ Œµ from
      ‚ü®h_tendsto_zero.choose, h_tendsto_zero.choose_spec _ le_rfl‚ü©
    exact (ENNReal.tendsto_atTop_zero.mp (ENNReal.tendsto_atTop_zero_of_tsum_ne_top hB)) Œµ hŒµ
  cases' h_B with N h_B
  refine ‚ü®N, fun n hn => ?_‚ü©
  have h_sub : eLpNorm (f n - f_lim) p Œº ‚â§ atTop.liminf fun m => eLpNorm (f n - f m) p Œº := by
    refine eLpNorm_lim_le_liminf_eLpNorm (fun m => (hf n).sub (hf m)) (f n - f_lim) ?_
    refine h_lim.mono fun x hx => ?_
    simp_rw [sub_eq_add_neg]
    exact Tendsto.add tendsto_const_nhds (Tendsto.neg hx)
  refine h_sub.trans ?_
  refine liminf_le_of_frequently_le' (frequently_atTop.mpr ?_)
  refine fun N1 => ‚ü®max N N1, le_max_right _ _, ?_‚ü©
  exact (h_cau N n (max N N1) hn (le_max_left _ _)).le.trans h_B

theorem mem‚Ñíp_of_cauchy_tendsto (hp : 1 ‚â§ p) {f : ‚Ñï ‚Üí Œ± ‚Üí E} (hf : ‚àÄ n, Mem‚Ñíp (f n) p Œº)
    (f_lim : Œ± ‚Üí E) (h_lim_meas : AEStronglyMeasurable f_lim Œº)
    (h_tendsto : atTop.Tendsto (fun n => eLpNorm (f n - f_lim) p Œº) (ùìù 0)) : Mem‚Ñíp f_lim p Œº := by
  refine ‚ü®h_lim_meas, ?_‚ü©
  rw [ENNReal.tendsto_atTop_zero] at h_tendsto
  cases' h_tendsto 1 zero_lt_one with N h_tendsto_1
  specialize h_tendsto_1 N (le_refl N)
  have h_add : f_lim = f_lim - f N + f N := by abel
  rw [h_add]
  refine lt_of_le_of_lt (eLpNorm_add_le (h_lim_meas.sub (hf N).1) (hf N).1 hp) ?_
  rw [ENNReal.add_lt_top]
  constructor
  ¬∑ refine lt_of_le_of_lt ?_ ENNReal.one_lt_top
    have h_neg : f_lim - f N = -(f N - f_lim) := by simp
    rwa [h_neg, eLpNorm_neg]
  ¬∑ exact (hf N).2

theorem cauchy_complete_‚Ñíp [CompleteSpace E] (hp : 1 ‚â§ p) {f : ‚Ñï ‚Üí Œ± ‚Üí E}
    (hf : ‚àÄ n, Mem‚Ñíp (f n) p Œº) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hB : ‚àë' i, B i ‚â† ‚àû)
    (h_cau : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm (f n - f m) p Œº < B N) :
    ‚àÉ (f_lim : Œ± ‚Üí E), Mem‚Ñíp f_lim p Œº ‚àß
      atTop.Tendsto (fun n => eLpNorm (f n - f_lim) p Œº) (ùìù 0) := by
  obtain ‚ü®f_lim, h_f_lim_meas, h_lim‚ü© :
      ‚àÉ f_lim : Œ± ‚Üí E, StronglyMeasurable f_lim ‚àß
        ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x)) :=
    exists_stronglyMeasurable_limit_of_tendsto_ae (fun n => (hf n).1)
      (ae_tendsto_of_cauchy_eLpNorm (fun n => (hf n).1) hp hB h_cau)
  have h_tendsto' : atTop.Tendsto (fun n => eLpNorm (f n - f_lim) p Œº) (ùìù 0) :=
    cauchy_tendsto_of_tendsto (fun m => (hf m).1) f_lim hB h_cau h_lim
  have h_‚Ñíp_lim : Mem‚Ñíp f_lim p Œº :=
    mem‚Ñíp_of_cauchy_tendsto hp hf f_lim h_f_lim_meas.aestronglyMeasurable h_tendsto'
  exact ‚ü®f_lim, h_‚Ñíp_lim, h_tendsto'‚ü©

/-! ### `Lp` is complete for `1 ‚â§ p` -/

instance instCompleteSpace [CompleteSpace E] [hp : Fact (1 ‚â§ p)] : CompleteSpace (Lp E p Œº) :=
  completeSpace_lp_of_cauchy_complete_‚Ñíp fun _f hf _B hB h_cau =>
    cauchy_complete_‚Ñíp hp.elim hf hB.ne h_cau

end Lp

end MeasureTheory

end CompleteSpace

namespace MeasureTheory

namespace Lp

/-- A version of **Markov's inequality** with elements of Lp. -/
lemma pow_mul_meas_ge_le_enorm (f : Lp E p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) (Œµ : ‚Ñù‚â•0‚àû) :
    (Œµ * Œº {x | Œµ ‚â§ ‚Äñf x‚Äñ‚Çë ^ p.toReal}) ^ (1 / p.toReal) ‚â§ ENNReal.ofReal ‚Äñf‚Äñ :=
  (ENNReal.ofReal_toReal (eLpNorm_ne_top f)).symm ‚ñ∏
    pow_mul_meas_ge_le_eLpNorm Œº hp_ne_zero hp_ne_top (Lp.aestronglyMeasurable f) Œµ

/-- A version of **Markov's inequality** with elements of Lp. -/
lemma mul_meas_ge_le_pow_enorm (f : Lp E p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) (Œµ : ‚Ñù‚â•0‚àû) :
    Œµ * Œº {x | Œµ ‚â§ ‚Äñf x‚Äñ‚Çë ^ p.toReal} ‚â§ ENNReal.ofReal ‚Äñf‚Äñ ^ p.toReal :=
  (ENNReal.ofReal_toReal (eLpNorm_ne_top f)).symm ‚ñ∏
    mul_meas_ge_le_pow_eLpNorm Œº hp_ne_zero hp_ne_top (Lp.aestronglyMeasurable f) Œµ

/-- A version of **Markov's inequality** with elements of Lp. -/
theorem mul_meas_ge_le_pow_enorm' (f : Lp E p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû)
    (Œµ : ‚Ñù‚â•0‚àû) : Œµ ^ p.toReal * Œº {x | Œµ ‚â§ ‚Äñf x‚Äñ‚Çä } ‚â§ ENNReal.ofReal ‚Äñf‚Äñ ^ p.toReal :=
  (ENNReal.ofReal_toReal (eLpNorm_ne_top f)).symm ‚ñ∏
    mul_meas_ge_le_pow_eLpNorm' Œº hp_ne_zero hp_ne_top (Lp.aestronglyMeasurable f) Œµ

/-- A version of **Markov's inequality** with elements of Lp. -/
theorem meas_ge_le_mul_pow_enorm (f : Lp E p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) {Œµ : ‚Ñù‚â•0‚àû}
    (hŒµ : Œµ ‚â† 0) : Œº {x | Œµ ‚â§ ‚Äñf x‚Äñ‚Çä} ‚â§ Œµ‚Åª¬π ^ p.toReal * ENNReal.ofReal ‚Äñf‚Äñ ^ p.toReal :=
  (ENNReal.ofReal_toReal (eLpNorm_ne_top f)).symm ‚ñ∏
    meas_ge_le_mul_pow_eLpNorm Œº hp_ne_zero hp_ne_top (Lp.aestronglyMeasurable f) hŒµ

@[deprecated (since := "2025-01-20")] alias pow_mul_meas_ge_le_norm := pow_mul_meas_ge_le_enorm
@[deprecated (since := "2025-01-20")] alias mul_meas_ge_le_pow_norm := mul_meas_ge_le_pow_enorm
@[deprecated (since := "2025-01-20")] alias mul_meas_ge_le_pow_norm' := mul_meas_ge_le_pow_enorm'
@[deprecated (since := "2025-01-20")] alias meas_ge_le_mul_pow_norm := meas_ge_le_mul_pow_enorm

end Lp

end MeasureTheory
