/-
Copyright (c) 2020 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, S√©bastien Gou√´zel
-/
import Mathlib.Analysis.SpecialFunctions.Pow.Continuity
import Mathlib.MeasureTheory.Function.LpSpace.Basic

/-!
# `Lp` is a complete space

In this file we show that `Lp` is a complete space for `1 ‚â§ p`,
in `MeasureTheory.Lp.instCompleteSpace`.
-/

open MeasureTheory Filter
open scoped ENNReal Topology

variable {Œ± E : Type*} {m : MeasurableSpace Œ±} {p : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±} [NormedAddCommGroup E]

namespace MeasureTheory.Lp

theorem eLpNorm'_lim_eq_lintegral_liminf {Œπ} [Nonempty Œπ] [LinearOrder Œπ] {f : Œπ ‚Üí Œ± ‚Üí E} {p : ‚Ñù}
    {f_lim : Œ± ‚Üí E} (h_lim : ‚àÄ·µê x : Œ± ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x))) :
    eLpNorm' f_lim p Œº = (‚à´‚Åª a, atTop.liminf (‚Äñf ¬∑ a‚Äñ‚Çë ^ p) ‚àÇŒº) ^ (1 / p) := by
  suffices h_no_pow : (‚à´‚Åª a, ‚Äñf_lim a‚Äñ‚Çë ^ p ‚àÇŒº) = ‚à´‚Åª a, atTop.liminf fun m => ‚Äñf m a‚Äñ‚Çë ^ p ‚àÇŒº by
    rw [eLpNorm'_eq_lintegral_enorm, h_no_pow]
  refine lintegral_congr_ae (h_lim.mono fun a ha => ?_)
  dsimp only
  rw [Tendsto.liminf_eq]
  refine (ENNReal.continuous_rpow_const.tendsto ‚Äñf_lim a‚Äñ‚Çä).comp ?_
  exact (continuous_enorm.tendsto (f_lim a)).comp ha

theorem eLpNorm'_lim_le_liminf_eLpNorm' {f : ‚Ñï ‚Üí Œ± ‚Üí E} {p : ‚Ñù}
    (hp_pos : 0 < p) (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) {f_lim : Œ± ‚Üí E}
    (h_lim : ‚àÄ·µê x : Œ± ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x))) :
    eLpNorm' f_lim p Œº ‚â§ atTop.liminf fun n => eLpNorm' (f n) p Œº := by
  rw [eLpNorm'_lim_eq_lintegral_liminf h_lim]
  rw [one_div, ‚Üê ENNReal.le_rpow_inv_iff (by simp [hp_pos] : 0 < p‚Åª¬π), inv_inv]
  refine (lintegral_liminf_le' fun m => (hf m).enorm.pow_const _).trans_eq ?_
  have h_pow_liminf :
    atTop.liminf (fun n ‚Ü¶ eLpNorm' (f n) p Œº) ^ p
      = atTop.liminf fun n ‚Ü¶ eLpNorm' (f n) p Œº ^ p := by
    have h_rpow_mono := ENNReal.strictMono_rpow_of_pos hp_pos
    have h_rpow_surj := (ENNReal.rpow_left_bijective hp_pos.ne.symm).2
    refine (h_rpow_mono.orderIsoOfSurjective _ h_rpow_surj).liminf_apply ?_ ?_ ?_ ?_
    all_goals isBoundedDefault
  rw [h_pow_liminf]
  simp_rw [eLpNorm'_eq_lintegral_enorm, ‚Üê ENNReal.rpow_mul, one_div,
    inv_mul_cancel‚ÇÄ hp_pos.ne.symm, ENNReal.rpow_one]

theorem eLpNorm_exponent_top_lim_eq_essSup_liminf {Œπ} [Nonempty Œπ] [LinearOrder Œπ] {f : Œπ ‚Üí Œ± ‚Üí E}
    {f_lim : Œ± ‚Üí E} (h_lim : ‚àÄ·µê x : Œ± ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x))) :
    eLpNorm f_lim ‚àû Œº = essSup (fun x => atTop.liminf fun m => ‚Äñf m x‚Äñ‚Çë) Œº := by
  rw [eLpNorm_exponent_top, eLpNormEssSup_eq_essSup_enorm]
  refine essSup_congr_ae (h_lim.mono fun x hx => ?_)
  dsimp only
  apply (Tendsto.liminf_eq ..).symm
  exact (continuous_enorm.tendsto (f_lim x)).comp hx

theorem eLpNorm_exponent_top_lim_le_liminf_eLpNorm_exponent_top {Œπ} [Nonempty Œπ] [Countable Œπ]
    [LinearOrder Œπ] {f : Œπ ‚Üí Œ± ‚Üí E} {f_lim : Œ± ‚Üí E}
    (h_lim : ‚àÄ·µê x : Œ± ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x))) :
    eLpNorm f_lim ‚àû Œº ‚â§ atTop.liminf fun n => eLpNorm (f n) ‚àû Œº := by
  rw [eLpNorm_exponent_top_lim_eq_essSup_liminf h_lim]
  simp_rw [eLpNorm_exponent_top, eLpNormEssSup]
  exact ENNReal.essSup_liminf_le _

theorem eLpNorm_lim_le_liminf_eLpNorm {f : ‚Ñï ‚Üí Œ± ‚Üí E}
    (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) (f_lim : Œ± ‚Üí E)
    (h_lim : ‚àÄ·µê x : Œ± ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x))) :
    eLpNorm f_lim p Œº ‚â§ atTop.liminf fun n => eLpNorm (f n) p Œº := by
  obtain rfl|hp0 := eq_or_ne p 0
  ¬∑ simp
  by_cases hp_top : p = ‚àû
  ¬∑ simp_rw [hp_top]
    exact eLpNorm_exponent_top_lim_le_liminf_eLpNorm_exponent_top h_lim
  simp_rw [eLpNorm_eq_eLpNorm' hp0 hp_top]
  have hp_pos : 0 < p.toReal := ENNReal.toReal_pos hp0 hp_top
  exact eLpNorm'_lim_le_liminf_eLpNorm' hp_pos hf h_lim

/-! ### `Lp` is complete iff Cauchy sequences of `‚Ñíp` have limits in `‚Ñíp` -/


theorem tendsto_Lp_iff_tendsto_eLpNorm' {Œπ} {fi : Filter Œπ} [Fact (1 ‚â§ p)] (f : Œπ ‚Üí Lp E p Œº)
    (f_lim : Lp E p Œº) :
    fi.Tendsto f (ùìù f_lim) ‚Üî fi.Tendsto (fun n => eLpNorm (‚áë(f n) - ‚áëf_lim) p Œº) (ùìù 0) := by
  rw [tendsto_iff_dist_tendsto_zero]
  simp_rw [dist_def]
  rw [‚Üê ENNReal.toReal_zero, ENNReal.tendsto_toReal_iff (fun n => ?_) ENNReal.zero_ne_top]
  rw [eLpNorm_congr_ae (Lp.coeFn_sub _ _).symm]
  exact Lp.eLpNorm_ne_top _

@[deprecated (since := "2025-02-21")]
alias tendsto_Lp_iff_tendsto_‚Ñíp' := tendsto_Lp_iff_tendsto_eLpNorm'

theorem tendsto_Lp_iff_tendsto_eLpNorm {Œπ} {fi : Filter Œπ} [Fact (1 ‚â§ p)] (f : Œπ ‚Üí Lp E p Œº)
    (f_lim : Œ± ‚Üí E) (f_lim_‚Ñíp : MemLp f_lim p Œº) :
    fi.Tendsto f (ùìù (f_lim_‚Ñíp.toLp f_lim)) ‚Üî
      fi.Tendsto (fun n => eLpNorm (‚áë(f n) - f_lim) p Œº) (ùìù 0) := by
  rw [tendsto_Lp_iff_tendsto_eLpNorm']
  suffices h_eq :
      (fun n => eLpNorm (‚áë(f n) - ‚áë(MemLp.toLp f_lim f_lim_‚Ñíp)) p Œº) =
        (fun n => eLpNorm (‚áë(f n) - f_lim) p Œº) by
    rw [h_eq]
  exact funext fun n => eLpNorm_congr_ae (EventuallyEq.rfl.sub (MemLp.coeFn_toLp f_lim_‚Ñíp))

@[deprecated (since := "2025-02-21")]
alias tendsto_Lp_iff_tendsto_‚Ñíp := tendsto_Lp_iff_tendsto_eLpNorm

theorem tendsto_Lp_iff_tendsto_eLpNorm'' {Œπ} {fi : Filter Œπ} [Fact (1 ‚â§ p)] (f : Œπ ‚Üí Œ± ‚Üí E)
    (f_‚Ñíp : ‚àÄ n, MemLp (f n) p Œº) (f_lim : Œ± ‚Üí E) (f_lim_‚Ñíp : MemLp f_lim p Œº) :
    fi.Tendsto (fun n => (f_‚Ñíp n).toLp (f n)) (ùìù (f_lim_‚Ñíp.toLp f_lim)) ‚Üî
      fi.Tendsto (fun n => eLpNorm (f n - f_lim) p Œº) (ùìù 0) := by
  rw [Lp.tendsto_Lp_iff_tendsto_eLpNorm' (fun n => (f_‚Ñíp n).toLp (f n)) (f_lim_‚Ñíp.toLp f_lim)]
  refine Filter.tendsto_congr fun n => ?_
  apply eLpNorm_congr_ae
  filter_upwards [((f_‚Ñíp n).sub f_lim_‚Ñíp).coeFn_toLp,
    Lp.coeFn_sub ((f_‚Ñíp n).toLp (f n)) (f_lim_‚Ñíp.toLp f_lim)] with _ hx‚ÇÅ hx‚ÇÇ
  rw [‚Üê hx‚ÇÇ]
  exact hx‚ÇÅ

@[deprecated (since := "2025-02-21")]
alias tendsto_Lp_iff_tendsto_‚Ñíp'' := tendsto_Lp_iff_tendsto_eLpNorm''


theorem tendsto_Lp_of_tendsto_eLpNorm {Œπ} {fi : Filter Œπ} [Fact (1 ‚â§ p)] {f : Œπ ‚Üí Lp E p Œº}
    (f_lim : Œ± ‚Üí E) (f_lim_‚Ñíp : MemLp f_lim p Œº)
    (h_tendsto : fi.Tendsto (fun n => eLpNorm (‚áë(f n) - f_lim) p Œº) (ùìù 0)) :
    fi.Tendsto f (ùìù (f_lim_‚Ñíp.toLp f_lim)) :=
  (tendsto_Lp_iff_tendsto_eLpNorm f f_lim f_lim_‚Ñíp).mpr h_tendsto

@[deprecated (since := "2025-02-21")]
alias tendsto_Lp_of_tendsto_‚Ñíp := tendsto_Lp_of_tendsto_eLpNorm

theorem cauchySeq_Lp_iff_cauchySeq_eLpNorm {Œπ} [Nonempty Œπ] [SemilatticeSup Œπ] [hp : Fact (1 ‚â§ p)]
    (f : Œπ ‚Üí Lp E p Œº) :
    CauchySeq f ‚Üî Tendsto (fun n : Œπ √ó Œπ => eLpNorm (‚áë(f n.fst) - ‚áë(f n.snd)) p Œº) atTop (ùìù 0) := by
  simp_rw [cauchySeq_iff_tendsto_dist_atTop_0, dist_def]
  rw [‚Üê ENNReal.toReal_zero, ENNReal.tendsto_toReal_iff (fun n => ?_) ENNReal.zero_ne_top]
  rw [eLpNorm_congr_ae (Lp.coeFn_sub _ _).symm]
  exact eLpNorm_ne_top _

@[deprecated (since := "2025-02-21")]
alias cauchySeq_Lp_iff_cauchySeq_‚Ñíp := cauchySeq_Lp_iff_cauchySeq_eLpNorm

theorem completeSpace_lp_of_cauchy_complete_eLpNorm [hp : Fact (1 ‚â§ p)]
    (H :
      ‚àÄ (f : ‚Ñï ‚Üí Œ± ‚Üí E) (_ : ‚àÄ n, MemLp (f n) p Œº) (B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû) (_ : ‚àë' i, B i < ‚àû)
        (_ : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm (f n - f m) p Œº < B N),
        ‚àÉ (f_lim : Œ± ‚Üí E), MemLp f_lim p Œº ‚àß
          atTop.Tendsto (fun n => eLpNorm (f n - f_lim) p Œº) (ùìù 0)) :
    CompleteSpace (Lp E p Œº) := by
  let B := fun n : ‚Ñï => ((1 : ‚Ñù) / 2) ^ n
  have hB_pos : ‚àÄ n, 0 < B n := fun n => pow_pos (div_pos zero_lt_one zero_lt_two) n
  refine Metric.complete_of_convergent_controlled_sequences B hB_pos fun f hf => ?_
  rsuffices ‚ü®f_lim, hf_lim_meas, h_tendsto‚ü© :
    ‚àÉ (f_lim : Œ± ‚Üí E), MemLp f_lim p Œº ‚àß
      atTop.Tendsto (fun n => eLpNorm (‚áë(f n) - f_lim) p Œº) (ùìù 0)
  ¬∑ exact ‚ü®hf_lim_meas.toLp f_lim, tendsto_Lp_of_tendsto_eLpNorm f_lim hf_lim_meas h_tendsto‚ü©
  obtain ‚ü®M, hB‚ü© : Summable B := summable_geometric_two
  let B1 n := ENNReal.ofReal (B n)
  have hB1_has : HasSum B1 (ENNReal.ofReal M) := by
    have h_tsum_B1 : ‚àë' i, B1 i = ENNReal.ofReal M := by
      change (‚àë' n : ‚Ñï, ENNReal.ofReal (B n)) = ENNReal.ofReal M
      rw [‚Üê hB.tsum_eq]
      exact (ENNReal.ofReal_tsum_of_nonneg (fun n => le_of_lt (hB_pos n)) hB.summable).symm
    have h_sum := (@ENNReal.summable _ B1).hasSum
    rwa [h_tsum_B1] at h_sum
  have hB1 : ‚àë' i, B1 i < ‚àû := by
    rw [hB1_has.tsum_eq]
    exact ENNReal.ofReal_lt_top
  let f1 : ‚Ñï ‚Üí Œ± ‚Üí E := fun n => f n
  refine H f1 (fun n => Lp.memLp (f n)) B1 hB1 fun N n m hn hm => ?_
  specialize hf N n m hn hm
  rw [dist_def] at hf
  dsimp only [f1]
  rwa [ENNReal.lt_ofReal_iff_toReal_lt]
  rw [eLpNorm_congr_ae (Lp.coeFn_sub _ _).symm]
  exact Lp.eLpNorm_ne_top _

@[deprecated (since := "2025-02-21")]
alias completeSpace_lp_of_cauchy_complete_‚Ñíp := completeSpace_lp_of_cauchy_complete_eLpNorm

/-! ### Prove that controlled Cauchy sequences of `‚Ñíp` have limits in `‚Ñíp` -/

private theorem eLpNorm'_sum_norm_sub_le_tsum_of_cauchy_eLpNorm' {f : ‚Ñï ‚Üí Œ± ‚Üí E}
    (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) {p : ‚Ñù} (hp1 : 1 ‚â§ p) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû}
    (h_cau : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm' (f n - f m) p Œº < B N) (n : ‚Ñï) :
    eLpNorm' (fun x => ‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) x - f i x‚Äñ) p Œº ‚â§ ‚àë' i, B i := by
  let f_norm_diff i x := ‚Äñf (i + 1) x - f i x‚Äñ
  have hgf_norm_diff :
    ‚àÄ n,
      (fun x => ‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) x - f i x‚Äñ) =
        ‚àë i ‚àà Finset.range (n + 1), f_norm_diff i :=
    fun n => funext fun x => by simp [f_norm_diff]
  rw [hgf_norm_diff]
  refine (eLpNorm'_sum_le (fun i _ => ((hf (i + 1)).sub (hf i)).norm) hp1).trans ?_
  simp_rw [eLpNorm'_norm]
  refine (Finset.sum_le_sum ?_).trans <| ENNReal.sum_le_tsum _
  exact fun m _ => (h_cau m (m + 1) m (Nat.le_succ m) (le_refl m)).le

private theorem lintegral_rpow_sum_enorm_sub_le_rpow_tsum
    {f : ‚Ñï ‚Üí Œ± ‚Üí E} {p : ‚Ñù} (hp1 : 1 ‚â§ p) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (n : ‚Ñï)
    (hn : eLpNorm' (fun x => ‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) x - f i x‚Äñ) p Œº ‚â§ ‚àë' i, B i) :
    (‚à´‚Åª a, (‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº) ‚â§ (‚àë' i, B i) ^ p := by
  have hp_pos : 0 < p := zero_lt_one.trans_le hp1
  rw [‚Üê inv_inv p, @ENNReal.le_rpow_inv_iff _ _ p‚Åª¬π (by simp [hp_pos]), inv_inv p]
  simp_rw [eLpNorm'_eq_lintegral_enorm, one_div] at hn
  have h_nnnorm_nonneg :
    (fun a => ‚Äñ‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Äñ‚Çë ^ p) = fun a =>
      (‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p := by
    ext1 a
    congr
    simp_rw [‚Üê ofReal_norm_eq_enorm]
    rw [‚Üê ENNReal.ofReal_sum_of_nonneg]
    ¬∑ rw [Real.norm_of_nonneg _]
      exact Finset.sum_nonneg fun x _ => norm_nonneg _
    ¬∑ exact fun x _ => norm_nonneg _
  rwa [h_nnnorm_nonneg] at hn

private theorem lintegral_rpow_tsum_coe_enorm_sub_le_tsum {f : ‚Ñï ‚Üí Œ± ‚Üí E}
    (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) {p : ‚Ñù} (hp1 : 1 ‚â§ p) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû}
    (h : ‚àÄ n, ‚à´‚Åª a, (‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº ‚â§ (‚àë' i, B i) ^ p) :
    (‚à´‚Åª a, (‚àë' i, ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº) ^ (1 / p) ‚â§ ‚àë' i, B i := by
  have hp_pos : 0 < p := zero_lt_one.trans_le hp1
  suffices h_pow : (‚à´‚Åª a, (‚àë' i, ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº) ‚â§ (‚àë' i, B i) ^ p by
      rwa [one_div, ‚Üê ENNReal.le_rpow_inv_iff (by simp [hp_pos] : 0 < p‚Åª¬π), inv_inv]
  have h_tsum_1 :
    ‚àÄ g : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû, ‚àë' i, g i = atTop.liminf fun n => ‚àë i ‚àà Finset.range (n + 1), g i := by
    intro g
    rw [ENNReal.tsum_eq_liminf_sum_nat, ‚Üê liminf_nat_add _ 1]
  simp_rw [h_tsum_1 _]
  rw [‚Üê h_tsum_1]
  have h_liminf_pow :
    ‚à´‚Åª a, (atTop.liminf fun n => ‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº =
      ‚à´‚Åª a, atTop.liminf fun n => (‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº := by
    refine lintegral_congr fun x => ?_
    have h_rpow_mono := ENNReal.strictMono_rpow_of_pos (zero_lt_one.trans_le hp1)
    have h_rpow_surj := (ENNReal.rpow_left_bijective hp_pos.ne.symm).2
    refine (h_rpow_mono.orderIsoOfSurjective _ h_rpow_surj).liminf_apply ?_ ?_ ?_ ?_
    all_goals isBoundedDefault
  rw [h_liminf_pow]
  refine (lintegral_liminf_le' fun n ‚Ü¶ ?_).trans <| liminf_le_of_frequently_le' <| .of_forall h
  exact ((Finset.range _).aemeasurable_sum fun i _ ‚Ü¶ ((hf _).sub (hf i)).enorm).pow_const _

private theorem tsum_enorm_sub_ae_lt_top {f : ‚Ñï ‚Üí Œ± ‚Üí E} (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº)
    {p : ‚Ñù} (hp1 : 1 ‚â§ p) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hB : ‚àë' i, B i ‚â† ‚àû)
    (h : (‚à´‚Åª a, (‚àë' i, ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº) ^ (1 / p) ‚â§ ‚àë' i, B i) :
    ‚àÄ·µê x ‚àÇŒº, ‚àë' i, ‚Äñf (i + 1) x - f i x‚Äñ‚Çë < ‚àû := by
  have hp_pos : 0 < p := zero_lt_one.trans_le hp1
  have h_integral : ‚à´‚Åª a, (‚àë' i, ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº < ‚àû := by
    have h_tsum_lt_top : (‚àë' i, B i) ^ p < ‚àû := ENNReal.rpow_lt_top_of_nonneg hp_pos.le hB
    refine lt_of_le_of_lt ?_ h_tsum_lt_top
    rwa [one_div, ‚Üê ENNReal.le_rpow_inv_iff (by simp [hp_pos] : 0 < p‚Åª¬π), inv_inv] at h
  have rpow_ae_lt_top : ‚àÄ·µê x ‚àÇŒº, (‚àë' i, ‚Äñf (i + 1) x - f i x‚Äñ‚Çë) ^ p < ‚àû := by
    refine ae_lt_top' (AEMeasurable.pow_const ?_ _) h_integral.ne
    exact AEMeasurable.ennreal_tsum fun n => ((hf (n + 1)).sub (hf n)).enorm
  refine rpow_ae_lt_top.mono fun x hx => ?_
  rwa [‚Üê ENNReal.lt_rpow_inv_iff hp_pos,
    ENNReal.top_rpow_of_pos (by simp [hp_pos] : 0 < p‚Åª¬π)] at hx

theorem ae_tendsto_of_cauchy_eLpNorm' [CompleteSpace E] {f : ‚Ñï ‚Üí Œ± ‚Üí E} {p : ‚Ñù}
    (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) (hp1 : 1 ‚â§ p) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hB : ‚àë' i, B i ‚â† ‚àû)
    (h_cau : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm' (f n - f m) p Œº < B N) :
    ‚àÄ·µê x ‚àÇŒº, ‚àÉ l : E, atTop.Tendsto (fun n => f n x) (ùìù l) := by
  have h_summable : ‚àÄ·µê x ‚àÇŒº, Summable fun i : ‚Ñï => f (i + 1) x - f i x := by
    have h1 :
      ‚àÄ n, eLpNorm' (fun x => ‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) x - f i x‚Äñ) p Œº ‚â§ ‚àë' i, B i :=
      eLpNorm'_sum_norm_sub_le_tsum_of_cauchy_eLpNorm' hf hp1 h_cau
    have h2 n :
        ‚à´‚Åª a, (‚àë i ‚àà Finset.range (n + 1), ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº ‚â§ (‚àë' i, B i) ^ p :=
      lintegral_rpow_sum_enorm_sub_le_rpow_tsum hp1 n (h1 n)
    have h3 : (‚à´‚Åª a, (‚àë' i, ‚Äñf (i + 1) a - f i a‚Äñ‚Çë) ^ p ‚àÇŒº) ^ (1 / p) ‚â§ ‚àë' i, B i :=
      lintegral_rpow_tsum_coe_enorm_sub_le_tsum hf hp1 h2
    have h4 : ‚àÄ·µê x ‚àÇŒº, ‚àë' i, ‚Äñf (i + 1) x - f i x‚Äñ‚Çë < ‚àû :=
      tsum_enorm_sub_ae_lt_top hf hp1 hB h3
    exact h4.mono fun x hx => .of_nnnorm <| ENNReal.tsum_coe_ne_top_iff_summable.mp hx.ne
  have h :
    ‚àÄ·µê x ‚àÇŒº, ‚àÉ l : E,
      atTop.Tendsto (fun n => ‚àë i ‚àà Finset.range n, (f (i + 1) x - f i x)) (ùìù l) := by
    refine h_summable.mono fun x hx => ?_
    let hx_sum := hx.hasSum.tendsto_sum_nat
    exact ‚ü®‚àë' i, (f (i + 1) x - f i x), hx_sum‚ü©
  refine h.mono fun x hx => ?_
  obtain ‚ü®l, hx‚ü© := hx
  have h_rw_sum :
      (fun n => ‚àë i ‚àà Finset.range n, (f (i + 1) x - f i x)) = fun n => f n x - f 0 x := by
    ext1 n
    change
      (‚àë i ‚àà Finset.range n, ((fun m => f m x) (i + 1) - (fun m => f m x) i)) = f n x - f 0 x
    rw [Finset.sum_range_sub (fun m => f m x)]
  rw [h_rw_sum] at hx
  have hf_rw : (fun n => f n x) = fun n => f n x - f 0 x + f 0 x := by
    ext1 n
    abel
  rw [hf_rw]
  exact ‚ü®l + f 0 x, Tendsto.add_const _ hx‚ü©

theorem ae_tendsto_of_cauchy_eLpNorm [CompleteSpace E] {f : ‚Ñï ‚Üí Œ± ‚Üí E}
    (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) (hp : 1 ‚â§ p) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hB : ‚àë' i, B i ‚â† ‚àû)
    (h_cau : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm (f n - f m) p Œº < B N) :
    ‚àÄ·µê x ‚àÇŒº, ‚àÉ l : E, atTop.Tendsto (fun n => f n x) (ùìù l) := by
  by_cases hp_top : p = ‚àû
  ¬∑ simp_rw [hp_top] at *
    have h_cau_ae : ‚àÄ·µê x ‚àÇŒº, ‚àÄ N n m, N ‚â§ n ‚Üí N ‚â§ m ‚Üí ‚Äñ(f n - f m) x‚Äñ‚Çë < B N := by
      simp_rw [ae_all_iff]
      exact fun N n m hnN hmN => ae_lt_of_essSup_lt (h_cau N n m hnN hmN)
    simp_rw [eLpNorm_exponent_top, eLpNormEssSup] at h_cau
    refine h_cau_ae.mono fun x hx => cauchySeq_tendsto_of_complete ?_
    refine cauchySeq_of_le_tendsto_0 (fun n => (B n).toReal) ?_ ?_
    ¬∑ intro n m N hnN hmN
      specialize hx N n m hnN hmN
      rw [_root_.dist_eq_norm,
        ‚Üê ENNReal.ofReal_le_iff_le_toReal (ENNReal.ne_top_of_tsum_ne_top hB N),
        ofReal_norm_eq_enorm]
      exact hx.le
    ¬∑ rw [‚Üê ENNReal.toReal_zero]
      exact
        Tendsto.comp (g := ENNReal.toReal) (ENNReal.tendsto_toReal ENNReal.zero_ne_top)
          (ENNReal.tendsto_atTop_zero_of_tsum_ne_top hB)
  have hp1 : 1 ‚â§ p.toReal := by
    rw [‚Üê ENNReal.ofReal_le_iff_le_toReal hp_top, ENNReal.ofReal_one]
    exact hp
  have h_cau' : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm' (f n - f m) p.toReal Œº < B N := by
    intro N n m hn hm
    specialize h_cau N n m hn hm
    rwa [eLpNorm_eq_eLpNorm' (zero_lt_one.trans_le hp).ne.symm hp_top] at h_cau
  exact ae_tendsto_of_cauchy_eLpNorm' hf hp1 hB h_cau'

theorem cauchy_tendsto_of_tendsto {f : ‚Ñï ‚Üí Œ± ‚Üí E} (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº)
    (f_lim : Œ± ‚Üí E) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hB : ‚àë' i, B i ‚â† ‚àû)
    (h_cau : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm (f n - f m) p Œº < B N)
    (h_lim : ‚àÄ·µê x : Œ± ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x))) :
    atTop.Tendsto (fun n => eLpNorm (f n - f_lim) p Œº) (ùìù 0) := by
  rw [ENNReal.tendsto_atTop_zero]
  intro Œµ hŒµ
  have h_B : ‚àÉ N : ‚Ñï, B N ‚â§ Œµ := by
    suffices h_tendsto_zero : ‚àÉ N : ‚Ñï, ‚àÄ n : ‚Ñï, N ‚â§ n ‚Üí B n ‚â§ Œµ from
      ‚ü®h_tendsto_zero.choose, h_tendsto_zero.choose_spec _ le_rfl‚ü©
    exact (ENNReal.tendsto_atTop_zero.mp (ENNReal.tendsto_atTop_zero_of_tsum_ne_top hB)) Œµ hŒµ
  obtain ‚ü®N, h_B‚ü© := h_B
  refine ‚ü®N, fun n hn => ?_‚ü©
  have h_sub : eLpNorm (f n - f_lim) p Œº ‚â§ atTop.liminf fun m => eLpNorm (f n - f m) p Œº := by
    refine eLpNorm_lim_le_liminf_eLpNorm (fun m => (hf n).sub (hf m)) (f n - f_lim) ?_
    refine h_lim.mono fun x hx => ?_
    simp_rw [sub_eq_add_neg]
    exact Tendsto.add tendsto_const_nhds (Tendsto.neg hx)
  refine h_sub.trans ?_
  refine liminf_le_of_frequently_le' (frequently_atTop.mpr ?_)
  refine fun N1 => ‚ü®max N N1, le_max_right _ _, ?_‚ü©
  exact (h_cau N n (max N N1) hn (le_max_left _ _)).le.trans h_B

theorem memLp_of_cauchy_tendsto (hp : 1 ‚â§ p) {f : ‚Ñï ‚Üí Œ± ‚Üí E} (hf : ‚àÄ n, MemLp (f n) p Œº)
    (f_lim : Œ± ‚Üí E) (h_lim_meas : AEStronglyMeasurable f_lim Œº)
    (h_tendsto : atTop.Tendsto (fun n => eLpNorm (f n - f_lim) p Œº) (ùìù 0)) : MemLp f_lim p Œº := by
  refine ‚ü®h_lim_meas, ?_‚ü©
  rw [ENNReal.tendsto_atTop_zero] at h_tendsto
  obtain ‚ü®N, h_tendsto_1‚ü© := h_tendsto 1 zero_lt_one
  specialize h_tendsto_1 N (le_refl N)
  have h_add : f_lim = f_lim - f N + f N := by abel
  rw [h_add]
  refine lt_of_le_of_lt (eLpNorm_add_le (h_lim_meas.sub (hf N).1) (hf N).1 hp) ?_
  rw [ENNReal.add_lt_top]
  constructor
  ¬∑ refine lt_of_le_of_lt ?_ ENNReal.one_lt_top
    have h_neg : f_lim - f N = -(f N - f_lim) := by simp
    rwa [h_neg, eLpNorm_neg]
  ¬∑ exact (hf N).2

@[deprecated (since := "2025-02-21")]
alias mem‚Ñíp_of_cauchy_tendsto := memLp_of_cauchy_tendsto

theorem cauchy_complete_eLpNorm [CompleteSpace E] (hp : 1 ‚â§ p) {f : ‚Ñï ‚Üí Œ± ‚Üí E}
    (hf : ‚àÄ n, MemLp (f n) p Œº) {B : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hB : ‚àë' i, B i ‚â† ‚àû)
    (h_cau : ‚àÄ N n m : ‚Ñï, N ‚â§ n ‚Üí N ‚â§ m ‚Üí eLpNorm (f n - f m) p Œº < B N) :
    ‚àÉ (f_lim : Œ± ‚Üí E), MemLp f_lim p Œº ‚àß
      atTop.Tendsto (fun n => eLpNorm (f n - f_lim) p Œº) (ùìù 0) := by
  obtain ‚ü®f_lim, h_f_lim_meas, h_lim‚ü© :
      ‚àÉ f_lim : Œ± ‚Üí E, StronglyMeasurable f_lim ‚àß
        ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (f_lim x)) :=
    exists_stronglyMeasurable_limit_of_tendsto_ae (fun n => (hf n).1)
      (ae_tendsto_of_cauchy_eLpNorm (fun n => (hf n).1) hp hB h_cau)
  have h_tendsto' : atTop.Tendsto (fun n => eLpNorm (f n - f_lim) p Œº) (ùìù 0) :=
    cauchy_tendsto_of_tendsto (fun m => (hf m).1) f_lim hB h_cau h_lim
  have h_‚Ñíp_lim : MemLp f_lim p Œº :=
    memLp_of_cauchy_tendsto hp hf f_lim h_f_lim_meas.aestronglyMeasurable h_tendsto'
  exact ‚ü®f_lim, h_‚Ñíp_lim, h_tendsto'‚ü©

@[deprecated (since := "2025-02-21")] alias cauchy_complete_‚Ñíp := cauchy_complete_eLpNorm

/-- `Lp` is complete for `1 ‚â§ p`. -/
instance instCompleteSpace [CompleteSpace E] [hp : Fact (1 ‚â§ p)] : CompleteSpace (Lp E p Œº) :=
  completeSpace_lp_of_cauchy_complete_eLpNorm fun _f hf _B hB h_cau =>
    cauchy_complete_eLpNorm hp.elim hf hB.ne h_cau

end MeasureTheory.Lp
