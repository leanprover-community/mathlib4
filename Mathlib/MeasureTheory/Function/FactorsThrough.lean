/-
Copyright (c) 2025 Etienne Marion. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Etienne Marion
-/
import Mathlib.MeasureTheory.Function.StronglyMeasurable.Basic

variable {X Y Z : Type*} [mY : MeasurableSpace Y]

open MeasureTheory Set TopologicalSpace

theorem Measurable.factorsThrough [MeasurableSpace Z] [MeasurableSingletonClass Z]
    {f : X → Y} {g : X → Z} (hg : Measurable[mY.comap f] g) : g.FactorsThrough f := by
  refine fun x₁ x₂ h ↦ eq_of_mem_singleton ?_
  obtain ⟨s, -, hs⟩ := hg (measurableSet_singleton (g x₂))
  rw [← mem_preimage, ← hs, mem_preimage, h, ← mem_preimage, hs]
  rfl

/-- If a function `g` is strongly measurable with respect to the pullback along some function `f`,
then to prove `g x = g y` it is enough to prove `f x = f y`. -/
theorem StronglyMeasurable.factorsThrough [TopologicalSpace Z] [PseudoMetrizableSpace Z]
    [T1Space Z] {f : X → Y} {g : X → Z} (hg : StronglyMeasurable[mY.comap f] g) :
    g.FactorsThrough f := by
  borelize Z
  exact hg.measurable.factorsThrough

/-- If a function is strongly measurable with respect to the σ-algebra generated by the
first coordinates, then it only depends on those first coordinates. -/
theorem dependsOn_of_stronglyMeasurable {i : ι} {f : ((i : ι) → X i) → E}
    (mf : StronglyMeasurable[Filtration.piPreorder i] f) : DependsOn f (Set.Iic i) :=
  coe_Iic i ▸ dependsOn_iff_factorsThrough.2 (factorsThrough_of_stronglyMeasurable_comap mf)
