/-
Copyright (c) 2025 Jon Bannon. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jon Bannon, Jireh Loreaux
-/

import Mathlib.MeasureTheory.Measure.OpenPos

/-!
# Support of a Measure

This file develops the theory of the **support** of a measure `Œº` on a
topological measurable space. The support is defined as the set of points whose every open
neighborhood has positive measure. We give equivalent characterizations, prove basic
measure-theoretic properties, and study interactions with sums, restrictions, and
absolute continuity. Under various Lindel√∂f conditions, the support is conull,
and various descriptions of the complement of the support are provided.

## Main definitions

* `Measure.support` : the support of a measure `Œº`, defined as
  `{x | ‚àÉ·∂† u in (ùìù x).smallSets, 0 < Œº u}` ‚Äî equivalently, every neighborhood of `x`
  has positive `Œº`-measure.

## Main results

* `compl_support_eq_sUnion` and `support_eq_sInter` : the complement of the support is the
  union of open measure-zero sets, and the support is the intersection of closed sets whose
  complements have measure zero.
* `isClosed_support` : the support is a closed set.
* `support_mem_ae_of_isLindelof` and `support_mem_ae` : under Lindel√∂f (or hereditarily
  Lindel√∂f) hypotheses, the support is conull.

## Tags

measure, support, Lindel√∂f
-/

section Support

namespace MeasureTheory

namespace Measure

open scoped Topology

variable {X : Type*} [TopologicalSpace X] [MeasurableSpace X]

/-- A point `x` is in the support of `Œº` if any open neighborhood of `x` has positive measure.
We provide the definition in terms of the filter-theoretic equivalent
`‚àÉ·∂† u in (ùìù x).smallSets, 0 < Œº u`. -/
protected def support (Œº : Measure X) : Set X := {x : X | ‚àÉ·∂† u in (ùìù x).smallSets, 0 < Œº u}

variable {Œº : Measure X}

theorem _root_.Filter.HasBasis.mem_measureSupport {Œπ : Sort*} {p : Œπ ‚Üí Prop}
    {s : Œπ ‚Üí Set X} {x : X} (hl : (ùìù x).HasBasis p s) :
    x ‚àà Œº.support ‚Üî ‚àÄ (i : Œπ), p i ‚Üí 0 < Œº (s i) :=
  hl.frequently_smallSets pos_mono

/-- A point `x` is in the support of measure `Œº` iff any neighborhood of `x` contains a
subset with positive measure. -/
lemma mem_support_iff {x : X} : x ‚àà Œº.support ‚Üî
    ‚àÉ·∂† u in (ùìù x).smallSets, 0 < Œº u := Iff.rfl

/-- A point `x` is in the support of measure `Œº` iff every neighborhood of `x` has positive
measure. -/
lemma mem_support_iff_forall (x : X) : x ‚àà Œº.support ‚Üî ‚àÄ U ‚àà ùìù x, 0 < Œº U :=
  (ùìù x).basis_sets.mem_measureSupport

lemma support_eq_univ [Œº.IsOpenPosMeasure] : Œº.support = Set.univ := by
  simpa [Set.eq_univ_iff_forall, mem_support_iff_forall] using fun _ _ ‚Ü¶ Œº.measure_pos_of_mem_nhds

lemma AbsolutelyContinuous.support_mono {Œº ŒΩ : Measure X} (hŒºŒΩ : Œº ‚â™ ŒΩ) :
    Œº.support ‚äÜ ŒΩ.support :=
  fun _ hx ‚Ü¶ hx.mp <| .of_forall hŒºŒΩ.pos_mono

lemma support_mono {ŒΩ : Measure X} (h : Œº ‚â§ ŒΩ) : Œº.support ‚äÜ ŒΩ.support :=
  h.absolutelyContinuous.support_mono

/-- A point `x` lies outside the support of `Œº` iff all of the subsets of one of its neighborhoods
have measure zero. -/
lemma notMem_support_iff {x : X} : x ‚àâ Œº.support ‚Üî ‚àÄ·∂† u in (ùìù x).smallSets, Œº u = 0 := by
  simp [mem_support_iff]

theorem _root_.Filter.HasBasis.notMem_measureSupport {Œπ : Sort*} {p : Œπ ‚Üí Prop}
    {s : Œπ ‚Üí Set X} {x : X} (hl : (ùìù x).HasBasis p s) :
    x ‚àâ Œº.support ‚Üî ‚àÉ i, p i ‚àß Œº (s i) = 0 := by
  simp [hl.mem_measureSupport]

@[simp]
lemma support_zero : (0 : Measure X).support = ‚àÖ := by simp [Measure.support]

/-- The support of the sum of two measures is the union of the supports. -/
lemma support_add (Œº ŒΩ : Measure X) : (Œº + ŒΩ).support = Œº.support ‚à™ ŒΩ.support := by
  ext; simp [mem_support_iff]

/-- A point `x` lies outside the support of `Œº` iff some neighborhood of `x` has measure zero. -/
lemma notMem_support_iff_exists {x : X} : x ‚àâ Œº.support ‚Üî ‚àÉ U ‚àà ùìù x, Œº U = 0 := by
  simp [mem_support_iff_forall]

/-- The support of a measure equals the set of points whose open neighborhoods
all have positive measure. -/
lemma support_eq_forall_isOpen : Œº.support =
    {x : X | ‚àÄ u : Set X, x ‚àà u ‚Üí IsOpen u ‚Üí 0 < Œº u} := by
  simp [Set.ext_iff, nhds_basis_opens _ |>.mem_measureSupport]

lemma isClosed_support {Œº : Measure X} : IsClosed Œº.support := by
  simp_rw [isClosed_iff_frequently, nhds_basis_opens _ |>.mem_measureSupport,
    nhds_basis_opens _ |>.frequently_iff]
  grind

lemma isOpen_compl_support {Œº : Measure X} : IsOpen Œº.support·∂ú :=
  isOpen_compl_iff.mpr Œº.isClosed_support

lemma subset_compl_support_of_isOpen {t : Set X} (ht : IsOpen t) (h : Œº t = 0) :
    t ‚äÜ Œº.support·∂ú :=
  fun _ hx ‚Ü¶ notMem_support_iff_exists.mpr ‚ü®t, ht.mem_nhds hx, h‚ü©

lemma support_subset_of_isClosed {t : Set X} (ht : IsClosed t) (h : t ‚àà ae Œº) :
    Œº.support ‚äÜ t :=
  Set.compl_subset_compl.mp <| subset_compl_support_of_isOpen ht.isOpen_compl h

lemma compl_support_eq_sUnion : Œº.support·∂ú = ‚ãÉ‚ÇÄ {t : Set X | IsOpen t ‚àß Œº t = 0} := by
  ext x; simp only [Set.mem_compl_iff, Set.mem_sUnion, Set.mem_setOf_eq, and_right_comm,
     nhds_basis_opens x |>.notMem_measureSupport, fun t ‚Ü¶ and_comm (b := x ‚àà t)]

lemma support_eq_sInter : Œº.support = ‚ãÇ‚ÇÄ {t : Set X | IsClosed t ‚àß Œº t·∂ú = 0} := by
  convert congr($(compl_support_eq_sUnion (Œº := Œº))·∂ú)
  all_goals simp [Set.compl_sUnion, compl_involutive.image_eq_preimage]

section Lindelof

/-- If the complement of the support is Lindel√∂f, then the support of a measure is conull. -/
lemma support_mem_ae_of_isLindelof (h : IsLindelof Œº.support·∂ú) : Œº.support ‚àà ae Œº := by
  refine compl_compl Œº.support ‚ñ∏ h.compl_mem_sets_of_nhdsWithin fun s hs ‚Ü¶ ?_
  simpa [compl_mem_ae_iff, isOpen_compl_support.nhdsWithin_eq hs]
    using notMem_support_iff_exists.mp hs

variable [HereditarilyLindelofSpace X]

/-- In a hereditarily Lindel√∂f space, the support of a measure is conull. -/
lemma support_mem_ae : Œº.support ‚àà ae Œº :=
  support_mem_ae_of_isLindelof <| HereditarilyLindelof_LindelofSets Œº.support·∂ú

@[simp]
lemma measure_compl_support : Œº Œº.support·∂ú = 0 := support_mem_ae

open Set

lemma nonempty_inter_support_of_pos {s : Set X} (hŒº : 0 < Œº s) :
    (s ‚à© Œº.support).Nonempty := by
  rw [‚Üê Set.not_disjoint_iff_nonempty_inter]
  contrapose! hŒº
  exact Œº.mono hŒº.subset_compl_right |>.trans <| by simp

/-- Under the assumption `OpensMeasurableSpace`, this is redundant because
the complement of the support is open, and therefore measurable. -/
lemma nullMeasurableSet_compl_support : NullMeasurableSet (Œº.support·∂ú) Œº :=
  NullMeasurableSet.of_null measure_compl_support

/-- Under the assumption `OpensMeasurableSpace`, this is redundant because
the support is closed, and therefore measurable. -/
lemma nullMeasurableSet_support : NullMeasurableSet Œº.support Œº :=
  NullMeasurableSet.compl_iff.mp nullMeasurableSet_compl_support

lemma nonempty_support (hŒº : Œº ‚â† 0) : Œº.support.Nonempty :=
   Nonempty.right <| nonempty_inter_support_of_pos <| measure_univ_pos.mpr hŒº

lemma nonempty_support_iff : Œº.support.Nonempty ‚Üî Œº ‚â† 0 :=
  ‚ü®fun h e ‚Ü¶ (not_nonempty_iff_eq_empty.mpr <| congrArg Measure.support e |>.trans
    <| support_zero) h, fun h ‚Ü¶ nonempty_support h‚ü©

end Lindelof

section Restrict

variable [OpensMeasurableSpace X]

lemma mem_support_restrict {s : Set X} {x : X} :
    x ‚àà (Œº.restrict s).support ‚Üî ‚àÉ·∂† u in (ùìù[s] x).smallSets, 0 < Œº u := by
  rw [nhds_basis_opens x |>.mem_measureSupport,
    (nhdsWithin_basis_open x s).frequently_smallSets pos_mono]
  grind [IsOpen.measurableSet, restrict_apply]

lemma interior_inter_support {s : Set X} :
    interior s ‚à© Œº.support ‚äÜ (Œº.restrict s).support := by
  rintro x ‚ü®hxs, hxŒº‚ü©
  rw [mem_support_restrict, (nhdsWithin_basis_open x s).frequently_smallSets pos_mono]
  rw [(nhds_basis_opens x).mem_measureSupport] at hxŒº
  rintro u ‚ü®hxu, hu‚ü©
  apply hxŒº (u ‚à© interior s) ‚ü®‚ü®hxu, hxs‚ü©, hu.inter isOpen_interior‚ü© |>.trans_le
  gcongr
  exact interior_subset

lemma support_restrict_subset {s : Set X} :
    (Œº.restrict s).support ‚äÜ closure s ‚à© Œº.support := by
  refine Set.subset_inter (support_subset_of_isClosed isClosed_closure ?_)
    (support_mono restrict_le_self)
  rw [mem_ae_iff, Œº.restrict_apply isClosed_closure.isOpen_compl.measurableSet]
  convert Œº.empty
  exact subset_closure.disjoint_compl_left.eq_bot

end Restrict

end Measure

end MeasureTheory

end Support
