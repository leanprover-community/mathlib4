/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, S√©bastien Gou√´zel, Yury Kudryashov
-/
import Mathlib.Dynamics.Ergodic.MeasurePreserving
import Mathlib.LinearAlgebra.Determinant
import Mathlib.LinearAlgebra.Matrix.Diagonal
import Mathlib.LinearAlgebra.Matrix.Transvection
import Mathlib.MeasureTheory.Constructions.Pi
import Mathlib.MeasureTheory.Measure.Stieltjes
import Mathlib.MeasureTheory.Measure.Haar.OfBasis

#align_import measure_theory.measure.lebesgue.basic from "leanprover-community/mathlib"@"fd5edc43dc4f10b85abfe544b88f82cf13c5f844"

/-!
# Lebesgue measure on the real line and on `‚Ñù‚Åø`

We show that the Lebesgue measure on the real line (constructed as a particular case of additive
Haar measure on inner product spaces) coincides with the Stieltjes measure associated
to the function `x ‚Ü¶ x`. We deduce properties of this measure on `‚Ñù`, and then of the product
Lebesgue measure on `‚Ñù‚Åø`. In particular, we prove that they are translation invariant.

We show that, on `‚Ñù‚Åø`, a linear map acts on Lebesgue measure by rescaling it through the absolute
value of its determinant, in `Real.map_linearMap_volume_pi_eq_smul_volume_pi`.

More properties of the Lebesgue measure are deduced from this in
`Mathlib/MeasureTheory/Measure/Lebesgue/EqHaar.lean`, where they are proved more generally for any
additive Haar measure on a finite-dimensional real vector space.
-/


assert_not_exists MeasureTheory.integral

noncomputable section

open scoped Classical
open Set Filter MeasureTheory MeasureTheory.Measure TopologicalSpace

open ENNReal (ofReal)

open scoped BigOperators ENNReal NNReal Topology

/-!
### Definition of the Lebesgue measure and lengths of intervals
-/


namespace Real

variable {Œπ : Type*} [Fintype Œπ]

/-- The volume on the real line (as a particular case of the volume on a finite-dimensional
inner product space) coincides with the Stieltjes measure coming from the identity function. -/
theorem volume_eq_stieltjes_id : (volume : Measure ‚Ñù) = StieltjesFunction.id.measure := by
  haveI : IsAddLeftInvariant StieltjesFunction.id.measure :=
    ‚ü®fun a =>
      Eq.symm <|
        Real.measure_ext_Ioo_rat fun p q => by
          simp only [Measure.map_apply (measurable_const_add a) measurableSet_Ioo,
            sub_sub_sub_cancel_right, StieltjesFunction.measure_Ioo, StieltjesFunction.id_leftLim,
            StieltjesFunction.id_apply, id.def, preimage_const_add_Ioo]‚ü©
  have A : StieltjesFunction.id.measure (stdOrthonormalBasis ‚Ñù ‚Ñù).toBasis.parallelepiped = 1 := by
    change StieltjesFunction.id.measure (parallelepiped (stdOrthonormalBasis ‚Ñù ‚Ñù)) = 1
    rcases parallelepiped_orthonormalBasis_one_dim (stdOrthonormalBasis ‚Ñù ‚Ñù) with (H | H) <;>
      simp only [H, StieltjesFunction.measure_Icc, StieltjesFunction.id_apply, id.def, tsub_zero,
        StieltjesFunction.id_leftLim, sub_neg_eq_add, zero_add, ENNReal.ofReal_one]
  conv_rhs =>
    rw [addHaarMeasure_unique StieltjesFunction.id.measure
        (stdOrthonormalBasis ‚Ñù ‚Ñù).toBasis.parallelepiped, A]
  simp only [volume, Basis.addHaar, one_smul]
#align real.volume_eq_stieltjes_id Real.volume_eq_stieltjes_id

theorem volume_val (s) : volume s = StieltjesFunction.id.measure s := by
  simp [volume_eq_stieltjes_id]
#align real.volume_val Real.volume_val

@[simp]
theorem volume_Ico {a b : ‚Ñù} : volume (Ico a b) = ofReal (b - a) := by simp [volume_val]
#align real.volume_Ico Real.volume_Ico

@[simp]
theorem volume_Icc {a b : ‚Ñù} : volume (Icc a b) = ofReal (b - a) := by simp [volume_val]
#align real.volume_Icc Real.volume_Icc

@[simp]
theorem volume_Ioo {a b : ‚Ñù} : volume (Ioo a b) = ofReal (b - a) := by simp [volume_val]
#align real.volume_Ioo Real.volume_Ioo

@[simp]
theorem volume_Ioc {a b : ‚Ñù} : volume (Ioc a b) = ofReal (b - a) := by simp [volume_val]
#align real.volume_Ioc Real.volume_Ioc

-- @[simp] -- Porting note (#10618): simp can prove this
theorem volume_singleton {a : ‚Ñù} : volume ({a} : Set ‚Ñù) = 0 := by simp [volume_val]
#align real.volume_singleton Real.volume_singleton

-- @[simp] -- Porting note (#10618): simp can prove this, after mathlib4#4628
theorem volume_univ : volume (univ : Set ‚Ñù) = ‚àû :=
  ENNReal.eq_top_of_forall_nnreal_le fun r =>
    calc
      (r : ‚Ñù‚â•0‚àû) = volume (Icc (0 : ‚Ñù) r) := by simp
      _ ‚â§ volume univ := measure_mono (subset_univ _)
#align real.volume_univ Real.volume_univ

@[simp]
theorem volume_ball (a r : ‚Ñù) : volume (Metric.ball a r) = ofReal (2 * r) := by
  rw [ball_eq_Ioo, volume_Ioo, ‚Üê sub_add, add_sub_cancel_left, two_mul]
#align real.volume_ball Real.volume_ball

@[simp]
theorem volume_closedBall (a r : ‚Ñù) : volume (Metric.closedBall a r) = ofReal (2 * r) := by
  rw [closedBall_eq_Icc, volume_Icc, ‚Üê sub_add, add_sub_cancel_left, two_mul]
#align real.volume_closed_ball Real.volume_closedBall

@[simp]
theorem volume_emetric_ball (a : ‚Ñù) (r : ‚Ñù‚â•0‚àû) : volume (EMetric.ball a r) = 2 * r := by
  rcases eq_or_ne r ‚àû with (rfl | hr)
  ¬∑ rw [Metric.emetric_ball_top, volume_univ, two_mul, _root_.top_add]
  ¬∑ lift r to ‚Ñù‚â•0 using hr
    rw [Metric.emetric_ball_nnreal, volume_ball, two_mul, ‚Üê NNReal.coe_add,
      ENNReal.ofReal_coe_nnreal, ENNReal.coe_add, two_mul]
#align real.volume_emetric_ball Real.volume_emetric_ball

@[simp]
theorem volume_emetric_closedBall (a : ‚Ñù) (r : ‚Ñù‚â•0‚àû) : volume (EMetric.closedBall a r) = 2 * r := by
  rcases eq_or_ne r ‚àû with (rfl | hr)
  ¬∑ rw [EMetric.closedBall_top, volume_univ, two_mul, _root_.top_add]
  ¬∑ lift r to ‚Ñù‚â•0 using hr
    rw [Metric.emetric_closedBall_nnreal, volume_closedBall, two_mul, ‚Üê NNReal.coe_add,
      ENNReal.ofReal_coe_nnreal, ENNReal.coe_add, two_mul]
#align real.volume_emetric_closed_ball Real.volume_emetric_closedBall

instance noAtoms_volume : NoAtoms (volume : Measure ‚Ñù) :=
  ‚ü®fun _ => volume_singleton‚ü©
#align real.has_no_atoms_volume Real.noAtoms_volume

@[simp]
theorem volume_interval {a b : ‚Ñù} : volume (uIcc a b) = ofReal |b - a| := by
  rw [‚Üê Icc_min_max, volume_Icc, max_sub_min_eq_abs]
#align real.volume_interval Real.volume_interval

@[simp]
theorem volume_Ioi {a : ‚Ñù} : volume (Ioi a) = ‚àû :=
  top_unique <|
    le_of_tendsto' ENNReal.tendsto_nat_nhds_top fun n =>
      calc
        (n : ‚Ñù‚â•0‚àû) = volume (Ioo a (a + n)) := by simp
        _ ‚â§ volume (Ioi a) := measure_mono Ioo_subset_Ioi_self
#align real.volume_Ioi Real.volume_Ioi

@[simp]
theorem volume_Ici {a : ‚Ñù} : volume (Ici a) = ‚àû := by rw [‚Üê measure_congr Ioi_ae_eq_Ici]; simp
#align real.volume_Ici Real.volume_Ici

@[simp]
theorem volume_Iio {a : ‚Ñù} : volume (Iio a) = ‚àû :=
  top_unique <|
    le_of_tendsto' ENNReal.tendsto_nat_nhds_top fun n =>
      calc
        (n : ‚Ñù‚â•0‚àû) = volume (Ioo (a - n) a) := by simp
        _ ‚â§ volume (Iio a) := measure_mono Ioo_subset_Iio_self
#align real.volume_Iio Real.volume_Iio

@[simp]
theorem volume_Iic {a : ‚Ñù} : volume (Iic a) = ‚àû := by rw [‚Üê measure_congr Iio_ae_eq_Iic]; simp
#align real.volume_Iic Real.volume_Iic

instance locallyFinite_volume : IsLocallyFiniteMeasure (volume : Measure ‚Ñù) :=
  ‚ü®fun x =>
    ‚ü®Ioo (x - 1) (x + 1),
      IsOpen.mem_nhds isOpen_Ioo ‚ü®sub_lt_self _ zero_lt_one, lt_add_of_pos_right _ zero_lt_one‚ü©, by
      simp only [Real.volume_Ioo, ENNReal.ofReal_lt_top]‚ü©‚ü©
#align real.locally_finite_volume Real.locallyFinite_volume

instance isFiniteMeasure_restrict_Icc (x y : ‚Ñù) : IsFiniteMeasure (volume.restrict (Icc x y)) :=
  ‚ü®by simp‚ü©
#align real.is_finite_measure_restrict_Icc Real.isFiniteMeasure_restrict_Icc

instance isFiniteMeasure_restrict_Ico (x y : ‚Ñù) : IsFiniteMeasure (volume.restrict (Ico x y)) :=
  ‚ü®by simp‚ü©
#align real.is_finite_measure_restrict_Ico Real.isFiniteMeasure_restrict_Ico

instance isFiniteMeasure_restrict_Ioc (x y : ‚Ñù) : IsFiniteMeasure (volume.restrict (Ioc x y)) :=
  ‚ü®by simp‚ü©
#align real.is_finite_measure_restrict_Ioc Real.isFiniteMeasure_restrict_Ioc

instance isFiniteMeasure_restrict_Ioo (x y : ‚Ñù) : IsFiniteMeasure (volume.restrict (Ioo x y)) :=
  ‚ü®by simp‚ü©
#align real.is_finite_measure_restrict_Ioo Real.isFiniteMeasure_restrict_Ioo

theorem volume_le_diam (s : Set ‚Ñù) : volume s ‚â§ EMetric.diam s := by
  by_cases hs : Bornology.IsBounded s
  ¬∑ rw [Real.ediam_eq hs, ‚Üê volume_Icc]
    exact volume.mono (Real.subset_Icc_sInf_sSup_of_isBounded hs)
  ¬∑ rw [Metric.ediam_of_unbounded hs]; exact le_top
#align real.volume_le_diam Real.volume_le_diam

theorem _root_.Filter.Eventually.volume_pos_of_nhds_real {p : ‚Ñù ‚Üí Prop} {a : ‚Ñù}
    (h : ‚àÄ·∂† x in ùìù a, p x) : (0 : ‚Ñù‚â•0‚àû) < volume { x | p x } := by
  rcases h.exists_Ioo_subset with ‚ü®l, u, hx, hs‚ü©
  refine' lt_of_lt_of_le _ (measure_mono hs)
  simpa [-mem_Ioo] using hx.1.trans hx.2
#align filter.eventually.volume_pos_of_nhds_real Filter.Eventually.volume_pos_of_nhds_real

/-!
### Volume of a box in `‚Ñù‚Åø`
-/


theorem volume_Icc_pi {a b : Œπ ‚Üí ‚Ñù} : volume (Icc a b) = ‚àè i, ENNReal.ofReal (b i - a i) := by
  rw [‚Üê pi_univ_Icc, volume_pi_pi]
  simp only [Real.volume_Icc]
#align real.volume_Icc_pi Real.volume_Icc_pi

@[simp]
theorem volume_Icc_pi_toReal {a b : Œπ ‚Üí ‚Ñù} (h : a ‚â§ b) :
    (volume (Icc a b)).toReal = ‚àè i, (b i - a i) := by
  simp only [volume_Icc_pi, ENNReal.toReal_prod, ENNReal.toReal_ofReal (sub_nonneg.2 (h _))]
#align real.volume_Icc_pi_to_real Real.volume_Icc_pi_toReal

theorem volume_pi_Ioo {a b : Œπ ‚Üí ‚Ñù} :
    volume (pi univ fun i => Ioo (a i) (b i)) = ‚àè i, ENNReal.ofReal (b i - a i) :=
  (measure_congr Measure.univ_pi_Ioo_ae_eq_Icc).trans volume_Icc_pi
#align real.volume_pi_Ioo Real.volume_pi_Ioo

@[simp]
theorem volume_pi_Ioo_toReal {a b : Œπ ‚Üí ‚Ñù} (h : a ‚â§ b) :
    (volume (pi univ fun i => Ioo (a i) (b i))).toReal = ‚àè i, (b i - a i) := by
  simp only [volume_pi_Ioo, ENNReal.toReal_prod, ENNReal.toReal_ofReal (sub_nonneg.2 (h _))]
#align real.volume_pi_Ioo_to_real Real.volume_pi_Ioo_toReal

theorem volume_pi_Ioc {a b : Œπ ‚Üí ‚Ñù} :
    volume (pi univ fun i => Ioc (a i) (b i)) = ‚àè i, ENNReal.ofReal (b i - a i) :=
  (measure_congr Measure.univ_pi_Ioc_ae_eq_Icc).trans volume_Icc_pi
#align real.volume_pi_Ioc Real.volume_pi_Ioc

@[simp]
theorem volume_pi_Ioc_toReal {a b : Œπ ‚Üí ‚Ñù} (h : a ‚â§ b) :
    (volume (pi univ fun i => Ioc (a i) (b i))).toReal = ‚àè i, (b i - a i) := by
  simp only [volume_pi_Ioc, ENNReal.toReal_prod, ENNReal.toReal_ofReal (sub_nonneg.2 (h _))]
#align real.volume_pi_Ioc_to_real Real.volume_pi_Ioc_toReal

theorem volume_pi_Ico {a b : Œπ ‚Üí ‚Ñù} :
    volume (pi univ fun i => Ico (a i) (b i)) = ‚àè i, ENNReal.ofReal (b i - a i) :=
  (measure_congr Measure.univ_pi_Ico_ae_eq_Icc).trans volume_Icc_pi
#align real.volume_pi_Ico Real.volume_pi_Ico

@[simp]
theorem volume_pi_Ico_toReal {a b : Œπ ‚Üí ‚Ñù} (h : a ‚â§ b) :
    (volume (pi univ fun i => Ico (a i) (b i))).toReal = ‚àè i, (b i - a i) := by
  simp only [volume_pi_Ico, ENNReal.toReal_prod, ENNReal.toReal_ofReal (sub_nonneg.2 (h _))]
#align real.volume_pi_Ico_to_real Real.volume_pi_Ico_toReal

@[simp]
nonrec theorem volume_pi_ball (a : Œπ ‚Üí ‚Ñù) {r : ‚Ñù} (hr : 0 < r) :
    volume (Metric.ball a r) = ENNReal.ofReal ((2 * r) ^ Fintype.card Œπ) := by
  simp only [MeasureTheory.volume_pi_ball a hr, volume_ball, Finset.prod_const]
  exact (ENNReal.ofReal_pow (mul_nonneg zero_le_two hr.le) _).symm
#align real.volume_pi_ball Real.volume_pi_ball

@[simp]
nonrec theorem volume_pi_closedBall (a : Œπ ‚Üí ‚Ñù) {r : ‚Ñù} (hr : 0 ‚â§ r) :
    volume (Metric.closedBall a r) = ENNReal.ofReal ((2 * r) ^ Fintype.card Œπ) := by
  simp only [MeasureTheory.volume_pi_closedBall a hr, volume_closedBall, Finset.prod_const]
  exact (ENNReal.ofReal_pow (mul_nonneg zero_le_two hr) _).symm
#align real.volume_pi_closed_ball Real.volume_pi_closedBall

theorem volume_pi_le_prod_diam (s : Set (Œπ ‚Üí ‚Ñù)) :
    volume s ‚â§ ‚àè i : Œπ, EMetric.diam (Function.eval i '' s) :=
  calc
    volume s ‚â§ volume (pi univ fun i => closure (Function.eval i '' s)) :=
      volume.mono <|
        Subset.trans (subset_pi_eval_image univ s) <| pi_mono fun _ _ => subset_closure
    _ = ‚àè i, volume (closure <| Function.eval i '' s) := (volume_pi_pi _)
    _ ‚â§ ‚àè i : Œπ, EMetric.diam (Function.eval i '' s) :=
      Finset.prod_le_prod' fun _ _ => (volume_le_diam _).trans_eq (EMetric.diam_closure _)
#align real.volume_pi_le_prod_diam Real.volume_pi_le_prod_diam

theorem volume_pi_le_diam_pow (s : Set (Œπ ‚Üí ‚Ñù)) : volume s ‚â§ EMetric.diam s ^ Fintype.card Œπ :=
  calc
    volume s ‚â§ ‚àè i : Œπ, EMetric.diam (Function.eval i '' s) := volume_pi_le_prod_diam s
    _ ‚â§ ‚àè _i : Œπ, (1 : ‚Ñù‚â•0) * EMetric.diam s :=
      (Finset.prod_le_prod' fun i _ => (LipschitzWith.eval i).ediam_image_le s)
    _ = EMetric.diam s ^ Fintype.card Œπ := by
      simp only [ENNReal.coe_one, one_mul, Finset.prod_const, Fintype.card]
#align real.volume_pi_le_diam_pow Real.volume_pi_le_diam_pow

/-!
### Images of the Lebesgue measure under multiplication in ‚Ñù
-/


theorem smul_map_volume_mul_left {a : ‚Ñù} (h : a ‚â† 0) :
    ENNReal.ofReal |a| ‚Ä¢ Measure.map (a * ¬∑) volume = volume := by
  refine' (Real.measure_ext_Ioo_rat fun p q => _).symm
  cases' lt_or_gt_of_ne h with h h
  ¬∑ simp only [Real.volume_Ioo, Measure.smul_apply, ‚Üê ENNReal.ofReal_mul (le_of_lt <| neg_pos.2 h),
      Measure.map_apply (measurable_const_mul a) measurableSet_Ioo, neg_sub_neg, neg_mul,
      preimage_const_mul_Ioo_of_neg _ _ h, abs_of_neg h, mul_sub, smul_eq_mul,
      mul_div_cancel‚ÇÄ _ (ne_of_lt h)]
  ¬∑ simp only [Real.volume_Ioo, Measure.smul_apply, ‚Üê ENNReal.ofReal_mul (le_of_lt h),
      Measure.map_apply (measurable_const_mul a) measurableSet_Ioo, preimage_const_mul_Ioo _ _ h,
      abs_of_pos h, mul_sub, mul_div_cancel‚ÇÄ _ (ne_of_gt h), smul_eq_mul]
#align real.smul_map_volume_mul_left Real.smul_map_volume_mul_left

theorem map_volume_mul_left {a : ‚Ñù} (h : a ‚â† 0) :
    Measure.map (a * ¬∑) volume = ENNReal.ofReal |a‚Åª¬π| ‚Ä¢ volume := by
  conv_rhs =>
    rw [‚Üê Real.smul_map_volume_mul_left h, smul_smul, ‚Üê ENNReal.ofReal_mul (abs_nonneg _), ‚Üê
      abs_mul, inv_mul_cancel h, abs_one, ENNReal.ofReal_one, one_smul]
#align real.map_volume_mul_left Real.map_volume_mul_left

@[simp]
theorem volume_preimage_mul_left {a : ‚Ñù} (h : a ‚â† 0) (s : Set ‚Ñù) :
    volume ((a * ¬∑) ‚Åª¬π' s) = ENNReal.ofReal (abs a‚Åª¬π) * volume s :=
  calc
    volume ((a * ¬∑) ‚Åª¬π' s) = Measure.map (a * ¬∑) volume s :=
      ((Homeomorph.mulLeft‚ÇÄ a h).toMeasurableEquiv.map_apply s).symm
    _ = ENNReal.ofReal (abs a‚Åª¬π) * volume s := by rw [map_volume_mul_left h]; rfl
#align real.volume_preimage_mul_left Real.volume_preimage_mul_left

theorem smul_map_volume_mul_right {a : ‚Ñù} (h : a ‚â† 0) :
    ENNReal.ofReal |a| ‚Ä¢ Measure.map (¬∑ * a) volume = volume := by
  simpa only [mul_comm] using Real.smul_map_volume_mul_left h
#align real.smul_map_volume_mul_right Real.smul_map_volume_mul_right

theorem map_volume_mul_right {a : ‚Ñù} (h : a ‚â† 0) :
    Measure.map (¬∑ * a) volume = ENNReal.ofReal |a‚Åª¬π| ‚Ä¢ volume := by
  simpa only [mul_comm] using Real.map_volume_mul_left h
#align real.map_volume_mul_right Real.map_volume_mul_right

@[simp]
theorem volume_preimage_mul_right {a : ‚Ñù} (h : a ‚â† 0) (s : Set ‚Ñù) :
    volume ((¬∑ * a) ‚Åª¬π' s) = ENNReal.ofReal (abs a‚Åª¬π) * volume s :=
  calc
    volume ((¬∑ * a) ‚Åª¬π' s) = Measure.map (¬∑ * a) volume s :=
      ((Homeomorph.mulRight‚ÇÄ a h).toMeasurableEquiv.map_apply s).symm
    _ = ENNReal.ofReal (abs a‚Åª¬π) * volume s := by rw [map_volume_mul_right h]; rfl
#align real.volume_preimage_mul_right Real.volume_preimage_mul_right

/-!
### Images of the Lebesgue measure under translation/linear maps in ‚Ñù‚Åø
-/


open Matrix

/-- A diagonal matrix rescales Lebesgue according to its determinant. This is a special case of
`Real.map_matrix_volume_pi_eq_smul_volume_pi`, that one should use instead (and whose proof
uses this particular case). -/
theorem smul_map_diagonal_volume_pi [DecidableEq Œπ] {D : Œπ ‚Üí ‚Ñù} (h : det (diagonal D) ‚â† 0) :
    ENNReal.ofReal (abs (det (diagonal D))) ‚Ä¢ Measure.map (toLin' (diagonal D)) volume =
      volume := by
  refine' (Measure.pi_eq fun s hs => _).symm
  simp only [det_diagonal, Measure.coe_smul, Algebra.id.smul_eq_mul, Pi.smul_apply]
  rw [Measure.map_apply _ (MeasurableSet.univ_pi hs)]
  swap; ¬∑ exact Continuous.measurable (LinearMap.continuous_on_pi _)
  have :
    (Matrix.toLin' (diagonal D) ‚Åª¬π' Set.pi Set.univ fun i : Œπ => s i) =
      Set.pi Set.univ fun i : Œπ => (D i * ¬∑) ‚Åª¬π' s i := by
    ext f
    simp only [LinearMap.coe_proj, Algebra.id.smul_eq_mul, LinearMap.smul_apply, mem_univ_pi,
      mem_preimage, LinearMap.pi_apply, diagonal_toLin']
  have B : ‚àÄ i, ofReal (abs (D i)) * volume ((D i * ¬∑) ‚Åª¬π' s i) = volume (s i) := by
    intro i
    have A : D i ‚â† 0 := by
      simp only [det_diagonal, Ne.def] at h
      exact Finset.prod_ne_zero_iff.1 h i (Finset.mem_univ i)
    rw [volume_preimage_mul_left A, ‚Üê mul_assoc, ‚Üê ENNReal.ofReal_mul (abs_nonneg _), ‚Üê abs_mul,
      mul_inv_cancel A, abs_one, ENNReal.ofReal_one, one_mul]
  rw [this, volume_pi_pi, Finset.abs_prod,
    ENNReal.ofReal_prod_of_nonneg fun i _ => abs_nonneg (D i), ‚Üê Finset.prod_mul_distrib]
  simp only [B]
#align real.smul_map_diagonal_volume_pi Real.smul_map_diagonal_volume_pi

/-- A transvection preserves Lebesgue measure. -/
theorem volume_preserving_transvectionStruct [DecidableEq Œπ] (t : TransvectionStruct Œπ ‚Ñù) :
    MeasurePreserving (toLin' t.toMatrix) := by
  /- We separate the coordinate along which there is a shearing from the other ones, and apply
    Fubini. Along this coordinate (and when all the other coordinates are fixed), it acts like a
    translation, and therefore preserves Lebesgue. -/
  let p : Œπ ‚Üí Prop := fun i => i ‚â† t.i
  let Œ± : Type _ := { x // p x }
  let Œ≤ : Type _ := { x // ¬¨p x }
  let g : (Œ± ‚Üí ‚Ñù) ‚Üí (Œ≤ ‚Üí ‚Ñù) ‚Üí Œ≤ ‚Üí ‚Ñù := fun a b => (fun _ => t.c * a ‚ü®t.j, t.hij.symm‚ü©) + b
  let F : (Œ± ‚Üí ‚Ñù) √ó (Œ≤ ‚Üí ‚Ñù) ‚Üí (Œ± ‚Üí ‚Ñù) √ó (Œ≤ ‚Üí ‚Ñù) := fun p => (id p.1, g p.1 p.2)
  let e : (Œπ ‚Üí ‚Ñù) ‚âÉ·µê (Œ± ‚Üí ‚Ñù) √ó (Œ≤ ‚Üí ‚Ñù) := MeasurableEquiv.piEquivPiSubtypeProd (fun _ : Œπ => ‚Ñù) p
  have : (toLin' t.toMatrix : (Œπ ‚Üí ‚Ñù) ‚Üí Œπ ‚Üí ‚Ñù) = e.symm ‚àò F ‚àò e := by
    cases t with | mk t_i t_j t_hij t_c =>
    ext f k
    simp only [e, g, p, LinearEquiv.map_smul, dite_eq_ite, LinearMap.id_coe, ite_not,
      Algebra.id.smul_eq_mul, one_mul, dotProduct, stdBasisMatrix,
      MeasurableEquiv.piEquivPiSubtypeProd_symm_apply, id.def, transvection, Pi.add_apply,
      zero_mul, LinearMap.smul_apply, Function.comp_apply,
      MeasurableEquiv.piEquivPiSubtypeProd_apply, Matrix.TransvectionStruct.toMatrix_mk,
      Matrix.mulVec, LinearEquiv.map_add, ite_mul, Matrix.toLin'_apply, Pi.smul_apply,
      Subtype.coe_mk, LinearMap.add_apply, Finset.sum_congr, Matrix.toLin'_one]
    by_cases h : t_i = k
    ¬∑ simp only [h, true_and_iff, Finset.mem_univ, if_true, eq_self_iff_true, Finset.sum_ite_eq,
        one_apply, boole_mul, add_comm]
    ¬∑ simp only [h, Ne.symm h, add_zero, if_false, Finset.sum_const_zero, false_and_iff,
        mul_zero]
  rw [this]
  have A : MeasurePreserving e := by
    convert volume_preserving_piEquivPiSubtypeProd (fun _ : Œπ => ‚Ñù) p
  have B : MeasurePreserving F :=
    haveI g_meas : Measurable (Function.uncurry g) := by
      have : Measurable fun c : Œ± ‚Üí ‚Ñù => c ‚ü®t.j, t.hij.symm‚ü© :=
        measurable_pi_apply ‚ü®t.j, t.hij.symm‚ü©
      refine Measurable.add ?_ measurable_snd
      refine measurable_pi_lambda _ fun _ => Measurable.const_mul ?_ _
      exact this.comp measurable_fst
    (MeasurePreserving.id _).skew_product g_meas
      (eventually_of_forall fun a => map_add_left_eq_self
        (Measure.pi fun _ => (stdOrthonormalBasis ‚Ñù ‚Ñù).toBasis.addHaar) _)
  exact ((A.symm e).comp B).comp A
#align real.volume_preserving_transvection_struct Real.volume_preserving_transvectionStruct

/-- Any invertible matrix rescales Lebesgue measure through the absolute value of its
determinant. -/
theorem map_matrix_volume_pi_eq_smul_volume_pi [DecidableEq Œπ] {M : Matrix Œπ Œπ ‚Ñù} (hM : det M ‚â† 0) :
    Measure.map (toLin' M) volume = ENNReal.ofReal (abs (det M)‚Åª¬π) ‚Ä¢ volume := by
  -- This follows from the cases we have already proved, of diagonal matrices and transvections,
  -- as these matrices generate all invertible matrices.
  apply diagonal_transvection_induction_of_det_ne_zero _ M hM
  ¬∑ intro D hD
    conv_rhs => rw [‚Üê smul_map_diagonal_volume_pi hD]
    rw [smul_smul, ‚Üê ENNReal.ofReal_mul (abs_nonneg _), ‚Üê abs_mul, inv_mul_cancel hD, abs_one,
      ENNReal.ofReal_one, one_smul]
  ¬∑ intro t
    simp only [Matrix.TransvectionStruct.det, ENNReal.ofReal_one,
      (volume_preserving_transvectionStruct _).map_eq, one_smul, _root_.inv_one, abs_one]
  ¬∑ intro A B _ _ IHA IHB
    rw [toLin'_mul, det_mul, LinearMap.coe_comp, ‚Üê Measure.map_map, IHB, Measure.map_smul, IHA,
      smul_smul, ‚Üê ENNReal.ofReal_mul (abs_nonneg _), ‚Üê abs_mul, mul_comm, mul_inv]
    ¬∑ apply Continuous.measurable
      apply LinearMap.continuous_on_pi
    ¬∑ apply Continuous.measurable
      apply LinearMap.continuous_on_pi
#align real.map_matrix_volume_pi_eq_smul_volume_pi Real.map_matrix_volume_pi_eq_smul_volume_pi

/-- Any invertible linear map rescales Lebesgue measure through the absolute value of its
determinant. -/
theorem map_linearMap_volume_pi_eq_smul_volume_pi {f : (Œπ ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] Œπ ‚Üí ‚Ñù}
    (hf : LinearMap.det f ‚â† 0) : Measure.map f volume =
      ENNReal.ofReal (abs (LinearMap.det f)‚Åª¬π) ‚Ä¢ volume := by
  classical
    -- this is deduced from the matrix case
    let M := LinearMap.toMatrix' f
    have A : LinearMap.det f = det M := by simp only [M, LinearMap.det_toMatrix']
    have B : f = toLin' M := by simp only [M, toLin'_toMatrix']
    rw [A, B]
    apply map_matrix_volume_pi_eq_smul_volume_pi
    rwa [A] at hf
#align real.map_linear_map_volume_pi_eq_smul_volume_pi Real.map_linearMap_volume_pi_eq_smul_volume_pi

end Real

section regionBetween

variable {Œ± : Type*}

/-- The region between two real-valued functions on an arbitrary set. -/
def regionBetween (f g : Œ± ‚Üí ‚Ñù) (s : Set Œ±) : Set (Œ± √ó ‚Ñù) :=
  { p : Œ± √ó ‚Ñù | p.1 ‚àà s ‚àß p.2 ‚àà Ioo (f p.1) (g p.1) }
#align region_between regionBetween

theorem regionBetween_subset (f g : Œ± ‚Üí ‚Ñù) (s : Set Œ±) : regionBetween f g s ‚äÜ s √óÀ¢ univ := by
  simpa only [prod_univ, regionBetween, Set.preimage, setOf_subset_setOf] using fun a => And.left
#align region_between_subset regionBetween_subset

variable [MeasurableSpace Œ±] {Œº : Measure Œ±} {f g : Œ± ‚Üí ‚Ñù} {s : Set Œ±}

/-- The region between two measurable functions on a measurable set is measurable. -/
theorem measurableSet_regionBetween (hf : Measurable f) (hg : Measurable g) (hs : MeasurableSet s) :
    MeasurableSet (regionBetween f g s) := by
  dsimp only [regionBetween, Ioo, mem_setOf_eq, setOf_and]
  refine'
    MeasurableSet.inter _
      ((measurableSet_lt (hf.comp measurable_fst) measurable_snd).inter
        (measurableSet_lt measurable_snd (hg.comp measurable_fst)))
  exact measurable_fst hs
#align measurable_set_region_between measurableSet_regionBetween

/-- The region between two measurable functions on a measurable set is measurable;
a version for the region together with the graph of the upper function. -/
theorem measurableSet_region_between_oc (hf : Measurable f) (hg : Measurable g)
    (hs : MeasurableSet s) :
    MeasurableSet { p : Œ± √ó ‚Ñù | p.fst ‚àà s ‚àß p.snd ‚àà Ioc (f p.fst) (g p.fst) } := by
  dsimp only [regionBetween, Ioc, mem_setOf_eq, setOf_and]
  refine'
    MeasurableSet.inter _
      ((measurableSet_lt (hf.comp measurable_fst) measurable_snd).inter
        (measurableSet_le measurable_snd (hg.comp measurable_fst)))
  exact measurable_fst hs
#align measurable_set_region_between_oc measurableSet_region_between_oc

/-- The region between two measurable functions on a measurable set is measurable;
a version for the region together with the graph of the lower function. -/
theorem measurableSet_region_between_co (hf : Measurable f) (hg : Measurable g)
    (hs : MeasurableSet s) :
    MeasurableSet { p : Œ± √ó ‚Ñù | p.fst ‚àà s ‚àß p.snd ‚àà Ico (f p.fst) (g p.fst) } := by
  dsimp only [regionBetween, Ico, mem_setOf_eq, setOf_and]
  refine'
    MeasurableSet.inter _
      ((measurableSet_le (hf.comp measurable_fst) measurable_snd).inter
        (measurableSet_lt measurable_snd (hg.comp measurable_fst)))
  exact measurable_fst hs
#align measurable_set_region_between_co measurableSet_region_between_co

/-- The region between two measurable functions on a measurable set is measurable;
a version for the region together with the graphs of both functions. -/
theorem measurableSet_region_between_cc (hf : Measurable f) (hg : Measurable g)
    (hs : MeasurableSet s) :
    MeasurableSet { p : Œ± √ó ‚Ñù | p.fst ‚àà s ‚àß p.snd ‚àà Icc (f p.fst) (g p.fst) } := by
  dsimp only [regionBetween, Icc, mem_setOf_eq, setOf_and]
  refine'
    MeasurableSet.inter _
      ((measurableSet_le (hf.comp measurable_fst) measurable_snd).inter
        (measurableSet_le measurable_snd (hg.comp measurable_fst)))
  exact measurable_fst hs
#align measurable_set_region_between_cc measurableSet_region_between_cc

/-- The graph of a measurable function is a measurable set. -/
theorem measurableSet_graph (hf : Measurable f) : MeasurableSet { p : Œ± √ó ‚Ñù | p.snd = f p.fst } :=
  by simpa using measurableSet_region_between_cc hf hf MeasurableSet.univ
#align measurable_set_graph measurableSet_graph

theorem volume_regionBetween_eq_lintegral' (hf : Measurable f) (hg : Measurable g)
    (hs : MeasurableSet s) :
    Œº.prod volume (regionBetween f g s) = ‚à´‚Åª y in s, ENNReal.ofReal ((g - f) y) ‚àÇŒº := by
  classical
    rw [Measure.prod_apply]
    ¬∑ have h :
        (fun x => volume { a | x ‚àà s ‚àß a ‚àà Ioo (f x) (g x) }) =
          s.indicator fun x => ENNReal.ofReal (g x - f x) := by
        funext x
        rw [indicator_apply]
        split_ifs with h
        ¬∑ have hx : { a | x ‚àà s ‚àß a ‚àà Ioo (f x) (g x) } = Ioo (f x) (g x) := by simp [h, Ioo]
          simp only [hx, Real.volume_Ioo, sub_zero]
        ¬∑ have hx : { a | x ‚àà s ‚àß a ‚àà Ioo (f x) (g x) } = ‚àÖ := by simp [h]
          simp only [hx, measure_empty]
      dsimp only [regionBetween, preimage_setOf_eq]
      rw [h, lintegral_indicator] <;> simp only [hs, Pi.sub_apply]
    ¬∑ exact measurableSet_regionBetween hf hg hs
#align volume_region_between_eq_lintegral' volume_regionBetween_eq_lintegral'

/-- The volume of the region between two almost everywhere measurable functions on a measurable set
    can be represented as a Lebesgue integral. -/
theorem volume_regionBetween_eq_lintegral [SigmaFinite Œº] (hf : AEMeasurable f (Œº.restrict s))
    (hg : AEMeasurable g (Œº.restrict s)) (hs : MeasurableSet s) :
    Œº.prod volume (regionBetween f g s) = ‚à´‚Åª y in s, ENNReal.ofReal ((g - f) y) ‚àÇŒº := by
  have h‚ÇÅ :
    (fun y => ENNReal.ofReal ((g - f) y)) =·µê[Œº.restrict s] fun y =>
      ENNReal.ofReal ((AEMeasurable.mk g hg - AEMeasurable.mk f hf) y) :=
    (hg.ae_eq_mk.sub hf.ae_eq_mk).fun_comp ENNReal.ofReal
  have h‚ÇÇ :
    (Œº.restrict s).prod volume (regionBetween f g s) =
      (Œº.restrict s).prod volume
        (regionBetween (AEMeasurable.mk f hf) (AEMeasurable.mk g hg) s) := by
    apply measure_congr
    apply EventuallyEq.rfl.inter
    exact
      ((quasiMeasurePreserving_fst.ae_eq_comp hf.ae_eq_mk).comp‚ÇÇ _ EventuallyEq.rfl).inter
        (EventuallyEq.rfl.comp‚ÇÇ _ <| quasiMeasurePreserving_fst.ae_eq_comp hg.ae_eq_mk)
  rw [lintegral_congr_ae h‚ÇÅ, ‚Üê
    volume_regionBetween_eq_lintegral' hf.measurable_mk hg.measurable_mk hs]
  convert h‚ÇÇ using 1
  ¬∑ rw [Measure.restrict_prod_eq_prod_univ]
    exact (Measure.restrict_eq_self _ (regionBetween_subset f g s)).symm
  ¬∑ rw [Measure.restrict_prod_eq_prod_univ]
    exact
      (Measure.restrict_eq_self _
          (regionBetween_subset (AEMeasurable.mk f hf) (AEMeasurable.mk g hg) s)).symm
#align volume_region_between_eq_lintegral volume_regionBetween_eq_lintegral

/-- The region between two a.e.-measurable functions on a null-measurable set is null-measurable. -/
lemma nullMeasurableSet_regionBetween (Œº : Measure Œ±)
    {f g : Œ± ‚Üí ‚Ñù} (f_mble : AEMeasurable f Œº) (g_mble : AEMeasurable g Œº)
    {s : Set Œ±} (s_mble : NullMeasurableSet s Œº) :
    NullMeasurableSet {p : Œ± √ó ‚Ñù | p.1 ‚àà s ‚àß p.snd ‚àà Ioo (f p.fst) (g p.fst)} (Œº.prod volume) := by
  refine NullMeasurableSet.inter
          (s_mble.preimage quasiMeasurePreserving_fst) (NullMeasurableSet.inter ?_ ?_)
  ¬∑ exact nullMeasurableSet_lt (AEMeasurable.fst f_mble) measurable_snd.aemeasurable
  ¬∑ exact nullMeasurableSet_lt measurable_snd.aemeasurable (AEMeasurable.fst g_mble)

/-- The region between two a.e.-measurable functions on a null-measurable set is null-measurable;
a version for the region together with the graph of the upper function. -/
lemma nullMeasurableSet_region_between_oc (Œº : Measure Œ±)
    {f g : Œ± ‚Üí ‚Ñù} (f_mble : AEMeasurable f Œº) (g_mble : AEMeasurable g Œº)
    {s : Set Œ±} (s_mble : NullMeasurableSet s Œº) :
    NullMeasurableSet {p : Œ± √ó ‚Ñù | p.1 ‚àà s ‚àß p.snd ‚àà Ioc (f p.fst) (g p.fst)} (Œº.prod volume) := by
  refine NullMeasurableSet.inter
          (s_mble.preimage quasiMeasurePreserving_fst) (NullMeasurableSet.inter ?_ ?_)
  ¬∑ exact nullMeasurableSet_lt (AEMeasurable.fst f_mble) measurable_snd.aemeasurable
  ¬∑ change NullMeasurableSet {p : Œ± √ó ‚Ñù | p.snd ‚â§ g p.fst} (Œº.prod volume)
    rw [show {p : Œ± √ó ‚Ñù | p.snd ‚â§ g p.fst} = {p : Œ± √ó ‚Ñù | g p.fst < p.snd}·∂ú by
          ext p
          simp only [mem_setOf_eq, mem_compl_iff, not_lt]]
    exact (nullMeasurableSet_lt (AEMeasurable.fst g_mble) measurable_snd.aemeasurable).compl

/-- The region between two a.e.-measurable functions on a null-measurable set is null-measurable;
a version for the region together with the graph of the lower function. -/
lemma nullMeasurableSet_region_between_co (Œº : Measure Œ±)
    {f g : Œ± ‚Üí ‚Ñù} (f_mble : AEMeasurable f Œº) (g_mble : AEMeasurable g Œº)
    {s : Set Œ±} (s_mble : NullMeasurableSet s Œº) :
    NullMeasurableSet {p : Œ± √ó ‚Ñù | p.1 ‚àà s ‚àß p.snd ‚àà Ico (f p.fst) (g p.fst)} (Œº.prod volume) := by
  refine NullMeasurableSet.inter
          (s_mble.preimage quasiMeasurePreserving_fst) (NullMeasurableSet.inter ?_ ?_)
  ¬∑ change NullMeasurableSet {p : Œ± √ó ‚Ñù | f p.fst ‚â§ p.snd} (Œº.prod volume)
    rw [show {p : Œ± √ó ‚Ñù | f p.fst ‚â§ p.snd} = {p : Œ± √ó ‚Ñù | p.snd < f p.fst}·∂ú by
          ext p
          simp only [mem_setOf_eq, mem_compl_iff, not_lt]]
    exact (nullMeasurableSet_lt measurable_snd.aemeasurable (AEMeasurable.fst f_mble)).compl
  ¬∑ exact nullMeasurableSet_lt measurable_snd.aemeasurable (AEMeasurable.fst g_mble)

/-- The region between two a.e.-measurable functions on a null-measurable set is null-measurable;
a version for the region together with the graphs of both functions. -/
lemma nullMeasurableSet_region_between_cc (Œº : Measure Œ±)
    {f g : Œ± ‚Üí ‚Ñù} (f_mble : AEMeasurable f Œº) (g_mble : AEMeasurable g Œº)
    {s : Set Œ±} (s_mble : NullMeasurableSet s Œº) :
    NullMeasurableSet {p : Œ± √ó ‚Ñù | p.1 ‚àà s ‚àß p.snd ‚àà Icc (f p.fst) (g p.fst)} (Œº.prod volume) := by
  refine NullMeasurableSet.inter
          (s_mble.preimage quasiMeasurePreserving_fst) (NullMeasurableSet.inter ?_ ?_)
  ¬∑ change NullMeasurableSet {p : Œ± √ó ‚Ñù | f p.fst ‚â§ p.snd} (Œº.prod volume)
    rw [show {p : Œ± √ó ‚Ñù | f p.fst ‚â§ p.snd} = {p : Œ± √ó ‚Ñù | p.snd < f p.fst}·∂ú by
          ext p
          simp only [mem_setOf_eq, mem_compl_iff, not_lt]]
    exact (nullMeasurableSet_lt measurable_snd.aemeasurable (AEMeasurable.fst f_mble)).compl
  ¬∑ change NullMeasurableSet {p : Œ± √ó ‚Ñù | p.snd ‚â§ g p.fst} (Œº.prod volume)
    rw [show {p : Œ± √ó ‚Ñù | p.snd ‚â§ g p.fst} = {p : Œ± √ó ‚Ñù | g p.fst < p.snd}·∂ú by
          ext p
          simp only [mem_setOf_eq, mem_compl_iff, not_lt]]
    exact (nullMeasurableSet_lt (AEMeasurable.fst g_mble) measurable_snd.aemeasurable).compl

end regionBetween

/-- Consider a real set `s`. If a property is true almost everywhere in `s ‚à© (a, b)` for
all `a, b ‚àà s`, then it is true almost everywhere in `s`. Formulated with `Œº.restrict`.
See also `ae_of_mem_of_ae_of_mem_inter_Ioo`. -/
theorem ae_restrict_of_ae_restrict_inter_Ioo {Œº : Measure ‚Ñù} [NoAtoms Œº] {s : Set ‚Ñù} {p : ‚Ñù ‚Üí Prop}
    (h : ‚àÄ a b, a ‚àà s ‚Üí b ‚àà s ‚Üí a < b ‚Üí ‚àÄ·µê x ‚àÇŒº.restrict (s ‚à© Ioo a b), p x) :
    ‚àÄ·µê x ‚àÇŒº.restrict s, p x := by
  /- By second-countability, we cover `s` by countably many intervals `(a, b)` (except maybe for
    two endpoints, which don't matter since `Œº` does not have any atom). -/
  let T : s √ó s ‚Üí Set ‚Ñù := fun p => Ioo p.1 p.2
  let u := ‚ãÉ i : ‚Ü•s √ó ‚Ü•s, T i
  have hfinite : (s \ u).Finite := s.finite_diff_iUnion_Ioo'
  obtain ‚ü®A, A_count, hA‚ü© :
    ‚àÉ A : Set (‚Ü•s √ó ‚Ü•s), A.Countable ‚àß ‚ãÉ i ‚àà A, T i = ‚ãÉ i : ‚Ü•s √ó ‚Ü•s, T i :=
    isOpen_iUnion_countable _ fun p => isOpen_Ioo
  have : s ‚äÜ s \ u ‚à™ ‚ãÉ p ‚àà A, s ‚à© T p := by
    intro x hx
    by_cases h'x : x ‚àà ‚ãÉ i : ‚Ü•s √ó ‚Ü•s, T i
    ¬∑ rw [‚Üê hA] at h'x
      obtain ‚ü®p, pA, xp‚ü© : ‚àÉ p : ‚Ü•s √ó ‚Ü•s, p ‚àà A ‚àß x ‚àà T p := by
        simpa only [mem_iUnion, exists_prop, SetCoe.exists, exists_and_right] using h'x
      right
      exact mem_biUnion pA ‚ü®hx, xp‚ü©
    ¬∑ exact Or.inl ‚ü®hx, h'x‚ü©
  apply ae_restrict_of_ae_restrict_of_subset this
  rw [ae_restrict_union_iff, ae_restrict_biUnion_iff _ A_count]
  constructor
  ¬∑ have : Œº.restrict (s \ u) = 0 := by simp only [restrict_eq_zero, hfinite.measure_zero]
    simp only [this, ae_zero, eventually_bot]
  ¬∑ rintro ‚ü®‚ü®a, as‚ü©, ‚ü®b, bs‚ü©‚ü© -
    dsimp [T]
    rcases le_or_lt b a with (hba | hab)
    ¬∑ simp only [Ioo_eq_empty_of_le hba, inter_empty, restrict_empty, ae_zero, eventually_bot]
    ¬∑ exact h a b as bs hab
#align ae_restrict_of_ae_restrict_inter_Ioo ae_restrict_of_ae_restrict_inter_Ioo

/-- Consider a real set `s`. If a property is true almost everywhere in `s ‚à© (a, b)` for
all `a, b ‚àà s`, then it is true almost everywhere in `s`. Formulated with bare membership.
See also `ae_restrict_of_ae_restrict_inter_Ioo`. -/
theorem ae_of_mem_of_ae_of_mem_inter_Ioo {Œº : Measure ‚Ñù} [NoAtoms Œº] {s : Set ‚Ñù} {p : ‚Ñù ‚Üí Prop}
    (h : ‚àÄ a b, a ‚àà s ‚Üí b ‚àà s ‚Üí a < b ‚Üí ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚à© Ioo a b ‚Üí p x) :
    ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí p x := by
  /- By second-countability, we cover `s` by countably many intervals `(a, b)` (except maybe for
    two endpoints, which don't matter since `Œº` does not have any atom). -/
  let T : s √ó s ‚Üí Set ‚Ñù := fun p => Ioo p.1 p.2
  let u := ‚ãÉ i : ‚Ü•s √ó ‚Ü•s, T i
  have hfinite : (s \ u).Finite := s.finite_diff_iUnion_Ioo'
  obtain ‚ü®A, A_count, hA‚ü© :
    ‚àÉ A : Set (‚Ü•s √ó ‚Ü•s), A.Countable ‚àß ‚ãÉ i ‚àà A, T i = ‚ãÉ i : ‚Ü•s √ó ‚Ü•s, T i :=
    isOpen_iUnion_countable _ fun p => isOpen_Ioo
  have M : ‚àÄ·µê x ‚àÇŒº, x ‚àâ s \ u := hfinite.countable.ae_not_mem _
  have M' : ‚àÄ·µê x ‚àÇŒº, ‚àÄ (i : ‚Ü•s √ó ‚Ü•s), i ‚àà A ‚Üí x ‚àà s ‚à© T i ‚Üí p x := by
    rw [ae_ball_iff A_count]
    rintro ‚ü®‚ü®a, as‚ü©, ‚ü®b, bs‚ü©‚ü© -
    change ‚àÄ·µê x : ‚Ñù ‚àÇŒº, x ‚àà s ‚à© Ioo a b ‚Üí p x
    rcases le_or_lt b a with (hba | hab)
    ¬∑ simp only [Ioo_eq_empty_of_le hba, inter_empty, IsEmpty.forall_iff, eventually_true,
        mem_empty_iff_false]
    ¬∑ exact h a b as bs hab
  filter_upwards [M, M'] with x hx h'x
  intro xs
  by_cases Hx : x ‚àà ‚ãÉ i : ‚Ü•s √ó ‚Ü•s, T i
  ¬∑ rw [‚Üê hA] at Hx
    obtain ‚ü®p, pA, xp‚ü© : ‚àÉ p : ‚Ü•s √ó ‚Ü•s, p ‚àà A ‚àß x ‚àà T p := by
      simpa only [mem_iUnion, exists_prop, SetCoe.exists, exists_and_right] using Hx
    apply h'x p pA ‚ü®xs, xp‚ü©
  ¬∑ exact False.elim (hx ‚ü®xs, Hx‚ü©)
#align ae_of_mem_of_ae_of_mem_inter_Ioo ae_of_mem_of_ae_of_mem_inter_Ioo
