/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.MeasureTheory.Measure.IntegralCharFun
import Mathlib.MeasureTheory.Measure.TightNormed

/-!
# TightCharFun

## Main statements

* `isTightMeasureSet_of_tendsto_charFun`: if the characteristic functions of a sequence of measures
 `Œº : ‚Ñï ‚Üí Measure E` on a finite dimensional inner product space converge pointwise
  to a function which is continuous at 0, then `{Œº n | n}` is tight.

-/

open Filter
open scoped Topology RealInnerProductSpace ENNReal

namespace MeasureTheory

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  [MeasurableSpace E] [BorelSpace E]

/-- If the characteristic functions converge pointwise to a function which is continuous at 0,
then `{Œº n | n}` is tight. -/
lemma isTightMeasureSet_of_tendsto_charFun {Œº : ‚Ñï ‚Üí Measure E} [‚àÄ i, IsProbabilityMeasure (Œº i)]
    {f : E ‚Üí ‚ÑÇ} (hf : ContinuousAt f 0) (hf_meas : Measurable f)
    (h : ‚àÄ t, Tendsto (fun n ‚Ü¶ charFun (Œº n) t) atTop (ùìù (f t))) :
    IsTightMeasureSet (Set.range Œº) := by
  refine isTightMeasureSet_range_of_tendsto_limsup_inner_of_norm_eq_one ‚Ñù fun z hz ‚Ü¶ ?_
  suffices Tendsto (fun r : ‚Ñù ‚Ü¶ limsup (fun n ‚Ü¶ (Œº n).real {x | r < |‚ü™z, x‚ü´|}) atTop) atTop (ùìù 0) by
    have h_ofReal (r : ‚Ñù) : limsup (fun n ‚Ü¶ Œº n {x | r < |‚ü™z, x‚ü´|}) atTop
        = ENNReal.ofReal (limsup (fun n ‚Ü¶ (Œº n).real {x | r < |‚ü™z, x‚ü´|}) atTop) := by
      simp_rw [measureReal_def,
        ENNReal.limsup_toReal_eq (b := 1) (by simp) (.of_forall fun _ ‚Ü¶ prob_le_one)]
      rw [ENNReal.ofReal_toReal]
      refine ne_top_of_le_ne_top (by simp : 1 ‚â† ‚àû) ?_
      refine limsup_le_of_le ?_ (.of_forall fun _ ‚Ü¶ prob_le_one)
      exact IsCoboundedUnder.of_frequently_ge <| .of_forall fun _ ‚Ü¶ zero_le'
    simp only [Real.norm_eq_abs, h_ofReal]
    rw [‚Üê ENNReal.ofReal_zero]
    exact ENNReal.tendsto_ofReal this
  have h_le_4 n r (hr : 0 < r) :
      2‚Åª¬π * r * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - charFun (Œº n) (t ‚Ä¢ z)‚Äñ ‚â§ 4 := by
    have hr' : -(2 * r‚Åª¬π) ‚â§ 2 * r‚Åª¬π := by rw [neg_le_self_iff]; positivity
    calc 2‚Åª¬π * r * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - charFun (Œº n) (t ‚Ä¢ z)‚Äñ
    _ ‚â§ 2‚Åª¬π * r * ‚à´ t in -(2 * r‚Åª¬π)..2 * r‚Åª¬π, ‚Äñ1 - charFun (Œº n) (t ‚Ä¢ z)‚Äñ := by
      simp only [neg_mul, intervalIntegrable_const]
      gcongr
      rw [intervalIntegral.integral_of_le hr', intervalIntegral.integral_of_le hr']
      exact norm_integral_le_integral_norm _
    _ ‚â§ 2‚Åª¬π * r * ‚à´ t in -(2 * r‚Åª¬π)..2 * r‚Åª¬π, 2 := by
      gcongr
      rw [intervalIntegral.integral_of_le hr', intervalIntegral.integral_of_le hr']
      refine integral_mono_of_nonneg ?_ (by fun_prop) ?_
      ¬∑ exact ae_of_all _ fun _ ‚Ü¶ by positivity
      ¬∑ refine ae_of_all _ fun x ‚Ü¶ norm_one_sub_charFun_le_two
    _ ‚â§ 4 := by
      simp only [neg_mul, intervalIntegral.integral_const, sub_neg_eq_add, smul_eq_mul]
      ring_nf
      rw [mul_inv_cancel‚ÇÄ hr.ne', one_mul]
  have h_le n r := measureReal_abs_inner_gt_le_integral_charFun (Œº := Œº n) (a := z) (r := r)
  -- We introduce an upper bound for the limsup.
  -- This is where we use the fact that `charFun (Œº n)` converges to `f`.
  have h_limsup_le r (hr : 0 < r) :
      limsup (fun n ‚Ü¶ (Œº n).real {x | r < |‚ü™z, x‚ü´|}) atTop
        ‚â§ 2‚Åª¬π * r * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - f (t ‚Ä¢ z)‚Äñ := by
    calc limsup (fun n ‚Ü¶ (Œº n).real {x | r < |‚ü™z, x‚ü´|}) atTop
    _ ‚â§ limsup (fun n ‚Ü¶ 2‚Åª¬π * r
        * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - charFun (Œº n) (t ‚Ä¢ z)‚Äñ) atTop := by
      refine limsup_le_limsup (.of_forall fun n ‚Ü¶ h_le n r hr) ?_ ?_
      ¬∑ exact IsCoboundedUnder.of_frequently_ge <| .of_forall fun _ ‚Ü¶ ENNReal.toReal_nonneg
      ¬∑ refine ‚ü®4, ?_‚ü©
        simp only [eventually_map, eventually_atTop, ge_iff_le]
        exact ‚ü®0, fun n _ ‚Ü¶ h_le_4 n r hr‚ü©
    _ = 2‚Åª¬π * r * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - f (t ‚Ä¢ z)‚Äñ := by
      refine ((Tendsto.norm ?_).const_mul _).limsup_eq
      simp only [neg_mul, intervalIntegrable_const]
      have hr' : -(2 * r‚Åª¬π) ‚â§ 2 * r‚Åª¬π := by rw [neg_le_self_iff]; positivity
      simp_rw [intervalIntegral.integral_of_le hr']
      refine tendsto_integral_of_dominated_convergence (fun _ ‚Ü¶ 2) ?_ (by fun_prop) ?_ ?_
      ¬∑ exact fun _ ‚Ü¶ Measurable.aestronglyMeasurable <| by fun_prop
      ¬∑ exact fun _ ‚Ü¶ ae_of_all _ fun _ ‚Ü¶ norm_one_sub_charFun_le_two
      ¬∑ exact ae_of_all _ fun x ‚Ü¶ tendsto_const_nhds.sub (h _)
  -- It suffices to show that the upper bound tends to 0.
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds
    (h := fun r ‚Ü¶ 2‚Åª¬π * r * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - f (t ‚Ä¢ z)‚Äñ) ?_ ?_ ?_
  rotate_left
  ¬∑ filter_upwards [eventually_gt_atTop 0] with r hr
    refine le_limsup_of_le ?_ fun u hu ‚Ü¶ ?_
    ¬∑ refine ‚ü®4, ?_‚ü©
      simp only [eventually_map, eventually_atTop, ge_iff_le]
      exact ‚ü®0, fun n _ ‚Ü¶ (h_le n r hr).trans (h_le_4 n r hr)‚ü©
    ¬∑ exact ENNReal.toReal_nonneg.trans hu.exists.choose_spec
  ¬∑ filter_upwards [eventually_gt_atTop 0] with r hr using h_limsup_le r hr
  -- We now show that the upper bound tends to 0.
  -- This will follow from the fact that `f` is continuous at `0`.
  -- `‚ä¢ Tendsto (fun r ‚Ü¶ 2‚Åª¬π * r * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - f (t ‚Ä¢ z)‚Äñ) atTop (ùìù 0)`
  have hf_tendsto := hf.tendsto
  rw [Metric.tendsto_nhds_nhds] at hf_tendsto
  rw [Metric.tendsto_atTop]
  intro Œµ hŒµ
  have hf0 : f 0 = 1 := by symm; simpa using h 0
  simp only [gt_iff_lt, dist_eq_norm_sub', zero_sub, norm_neg, hf0] at hf_tendsto
  simp only [ge_iff_le, neg_mul, intervalIntegrable_const, dist_zero_right, norm_mul, norm_inv,
    Real.norm_ofNat, Real.norm_eq_abs, norm_norm]
  simp_rw [abs_of_nonneg (norm_nonneg _)]
  obtain ‚ü®Œ¥, hŒ¥, hŒ¥_lt‚ü© : ‚àÉ Œ¥, 0 < Œ¥ ‚àß ‚àÄ ‚¶Éx : E‚¶Ñ, ‚Äñx‚Äñ < Œ¥ ‚Üí ‚Äñ1 - f x‚Äñ < Œµ / 4 :=
    hf_tendsto (Œµ / 4) (by positivity)
  refine ‚ü®4 * Œ¥‚Åª¬π, fun r hrŒ¥ ‚Ü¶ ?_‚ü©
  have hr : 0 < r := lt_of_lt_of_le (by positivity) hrŒ¥
  have hr' : -(2 * r‚Åª¬π) ‚â§ 2 * r‚Åª¬π := by rw [neg_le_self_iff]; positivity
  have h_le_Ioc x (hx : x ‚àà Set.Ioc (-(2 * r‚Åª¬π)) (2 * r‚Åª¬π)) :
      ‚Äñ1 - f (x ‚Ä¢ z)‚Äñ ‚â§ Œµ / 4 := by
    refine (hŒ¥_lt ?_).le
    simp only [norm_smul, Real.norm_eq_abs, OrthonormalBasis.norm_eq_one, mul_one, hz]
    calc |x|
    _ ‚â§ 2 * r‚Åª¬π := by
      rw [abs_le]
      rw [Set.mem_Ioc] at hx
      exact ‚ü®hx.1.le, hx.2‚ü©
    _ < Œ¥ := by
      rw [‚Üê lt_div_iff‚ÇÄ' (by positivity), inv_lt_comm‚ÇÄ hr (by positivity)]
      refine lt_of_lt_of_le ?_ hrŒ¥
      ring_nf
      gcongr
      norm_num
  rw [abs_of_nonneg hr.le]
  calc 2‚Åª¬π * r * ‚Äñ‚à´ t in -(2 * r‚Åª¬π)..2 * r‚Åª¬π, 1 - f (t ‚Ä¢ z)‚Äñ
  _ ‚â§ 2‚Åª¬π * r * ‚à´ t in -(2 * r‚Åª¬π)..2 * r‚Åª¬π, ‚Äñ1 - f (t ‚Ä¢ z)‚Äñ := by
    gcongr
    rw [intervalIntegral.integral_of_le hr', intervalIntegral.integral_of_le hr']
    exact norm_integral_le_integral_norm _
  _ ‚â§ 2‚Åª¬π * r * ‚à´ t in -(2 * r‚Åª¬π)..2 * r‚Åª¬π, Œµ / 4 := by
    gcongr
    rw [intervalIntegral.integral_of_le hr', intervalIntegral.integral_of_le hr']
    refine integral_mono_ae ?_ (by fun_prop) ?_
    ¬∑ refine Integrable.mono' (integrable_const (Œµ / 4)) ?_ ?_
      ¬∑ exact Measurable.aestronglyMeasurable <| by fun_prop
      ¬∑ simp_rw [norm_norm]
        exact ae_restrict_of_forall_mem measurableSet_Ioc h_le_Ioc
    ¬∑ exact ae_restrict_of_forall_mem measurableSet_Ioc h_le_Ioc
  _ = Œµ / 2 := by
    simp only [intervalIntegral.integral_div, intervalIntegral.integral_const, sub_neg_eq_add,
      smul_eq_mul]
    ring_nf
    rw [mul_inv_cancel‚ÇÄ hr.ne', one_mul]
  _ < Œµ := by simp [hŒµ]

end MeasureTheory
