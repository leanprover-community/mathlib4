/-
Copyright (c) 2024 Josha Dekker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, Josha Dekker
-/
import Mathlib.MeasureTheory.Measure.Regular

/-!
# Tight sets of measures and tight measures

A set of measures is tight if for all `0 < Œµ`, there exists a compact set `K` such that for all
measures in the set, the complement of `K` has measure at most `Œµ`. A single measure `Œº` is said
to be tight if the singleton `{Œº}` is tight.

## Main definitions

* `MeasureTheory.IsTightMeasureSet`: A set of measures `S` is tight if for all `0 < Œµ`, there exists
  a compact set `K` such that for all `Œº ‚àà S`, `Œº K·∂ú ‚â§ Œµ`.
  The definition uses an equivalent formulation with filters: `‚®Ü Œº ‚àà S, Œº` tends to `0` along the
  filter of cocompact sets.
  `isTightMeasureSet_iff_exists_isCompact_measure_compl_le` establishes equivalence between
  the two definitions.
* `MeasureTheory.IsTight`: A measure `Œº` is tight if for all `0 < Œµ`, there exists `K`
  compact such that `Œº K·∂ú ‚â§ Œµ`.
  The definition uses an equivalent formulation with filters: `Œº` tends to `0` along the
  filter of cocompact sets.
  `isTight_iff_exists_isCompact_measure_compl_le` establishes equivalence of the two definitions.

## Main statements

* An instance showing that every finite, inner-regular measure on a T2 space is tight.

-/

open Filter Set

open scoped ENNReal NNReal Topology

namespace MeasureTheory

variable {Œ± : Type*} [TopologicalSpace Œ±] [MeasurableSpace Œ±] {Œº ŒΩ : Measure Œ±}
  {S T : Set (Measure Œ±)}

/-- A set of measures `S` is tight if for all `0 < Œµ`, there exists a compact set `K` such that
for all `Œº ‚àà S`, `Œº K·∂ú ‚â§ Œµ`.
This is formulated in terms of filters, and proven equivalent to the definition above
in `IsTightMeasureSet_iff_exists_isCompact_measure_compl_le`. -/
def IsTightMeasureSet (S : Set (Measure Œ±)) : Prop :=
  Tendsto (‚®Ü Œº ‚àà S, Œº) (cocompact Œ±).smallSets (ùìù 0)

/-- A measure `Œº` is tight if for all `0 < Œµ`, there exists `K` compact such that `Œº K·∂ú ‚â§ Œµ`.
This is formulated in terms of filters, and proven equivalent to the usual definition
in `isTight_iff_exists_isCompact_measure_compl_le`. -/
class IsTight (Œº : Measure Œ±) : Prop where
  tendsto_cocompact : Tendsto Œº (cocompact Œ±).smallSets (ùìù 0)

lemma Measure.tendsto_cocompact (Œº : Measure Œ±) [IsTight Œº] :
    Tendsto Œº (cocompact Œ±).smallSets (ùìù 0) := IsTight.tendsto_cocompact

section IsTightMeasureSet

@[simp]
lemma IsTightMeasureSet_singleton_iff : IsTightMeasureSet {Œº} ‚Üî IsTight Œº := by
  simp only [IsTightMeasureSet, mem_singleton_iff, iSup_iSup_eq_left]
  exact ‚ü®fun h ‚Ü¶ ‚ü®h‚ü©, fun _ ‚Ü¶ Œº.tendsto_cocompact‚ü©

lemma IsTightMeasureSet_singleton (Œº : Measure Œ±) [IsTight Œº] : IsTightMeasureSet {Œº} := by
  rw [IsTightMeasureSet_singleton_iff]
  infer_instance

/-- A set of measures `S` is tight if for all `0 < Œµ`, there exists a compact set `K` such that
for all `Œº ‚àà S`, `Œº K·∂ú ‚â§ Œµ`. -/
lemma IsTightMeasureSet_iff_exists_isCompact_measure_compl_le :
    IsTightMeasureSet S ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ K : Set Œ±, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº (K·∂ú) ‚â§ Œµ := by
  simp only [IsTightMeasureSet, ENNReal.tendsto_nhds ENNReal.zero_ne_top, gt_iff_lt, zero_add,
    iSup_apply, mem_Icc, tsub_le_iff_right, zero_le, iSup_le_iff, true_and, eventually_smallSets,
    mem_cocompact]
  refine ‚ü®fun h Œµ hŒµ ‚Ü¶ ?_, fun h Œµ hŒµ ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®A, ‚ü®K, h1, h2‚ü©, hA‚ü© := h Œµ hŒµ
    exact ‚ü®K, h1, hA K·∂ú h2‚ü©
  ¬∑ obtain ‚ü®K, h1, h2‚ü© := h Œµ hŒµ
    exact ‚ü®K·∂ú, ‚ü®K, h1, subset_rfl‚ü©, fun A hA Œº hŒºS ‚Ü¶ (Œº.mono hA).trans (h2 Œº hŒºS)‚ü©

/-- In a compact space, every set of measures is tight. -/
lemma IsTightMeasureSet.of_compactSpace [CompactSpace Œ±] : IsTightMeasureSet S := by
  simp only [IsTightMeasureSet, cocompact_eq_bot, smallSets_bot, tendsto_pure_left, iSup_apply,
    measure_empty, ENNReal.iSup_zero, ciSup_const]
  exact fun _ ‚Ü¶ mem_of_mem_nhds

lemma IsTightMeasureSet.subset (hT : IsTightMeasureSet T) (hST : S ‚äÜ T) :
    IsTightMeasureSet S :=
  tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds hT (fun _ ‚Ü¶ by simp)
    (iSup_le_iSup_of_subset hST)

end IsTightMeasureSet

/-- A measure `Œº` is tight if for all `0 < Œµ`, there exists `K` compact such that `Œº K·∂ú ‚â§ Œµ`. -/
lemma isTight_iff_exists_isCompact_measure_compl_le :
    IsTight Œº ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº (K·∂ú) ‚â§ Œµ := by
  simp [‚Üê IsTightMeasureSet_singleton_iff, IsTightMeasureSet_iff_exists_isCompact_measure_compl_le]

lemma Measure.exists_isCompact_measure_compl_le (Œº : Measure Œ±) [h : IsTight Œº]
    {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : 0 < Œµ) :
    ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº (K·∂ú) ‚â§ Œµ :=
  isTight_iff_exists_isCompact_measure_compl_le.mp h Œµ hŒµ

namespace IsTight

lemma of_exists_isCompact_measure_compl_le (h : ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº K·∂ú ‚â§ Œµ) :
    IsTight Œº := isTight_iff_exists_isCompact_measure_compl_le.mpr h

lemma exists_isSigmaCompact_measure_eq [IsTight Œº] :
    ‚àÉ M, IsSigmaCompact M ‚àß Œº M = Œº Set.univ := by
  choose! K hK
    using (fun (n : ‚Ñï) ‚Ü¶ Œº.exists_isCompact_measure_compl_le (by simp : 0 < 1/(n : ‚Ñù‚â•0‚àû)))
  use ‚ãÉ n, K n, isSigmaCompact_iUnion_of_isCompact _ fun _ ‚Ü¶ (hK _).1
  rw [measure_congr]
  rw [ae_eq_univ, Set.compl_iUnion, ‚Üê le_zero_iff]
  refine le_of_forall_lt' fun Œµ hŒµ ‚Ü¶ ?_
  obtain ‚ü®n, hn‚ü© := ENNReal.exists_inv_nat_lt hŒµ.ne'
  exact lt_of_le_of_lt ((measure_mono <| Set.iInter_subset _ n).trans <|
    (inv_eq_one_div (n : ENNReal)).symm ‚ñ∏ (hK n).2) hn

/-- In a compact space, every measure is tight. -/
instance [CompactSpace Œ±] : IsTight Œº := by
  rw [‚Üê IsTightMeasureSet_singleton_iff]
  exact .of_compactSpace

lemma mono [IsTight ŒΩ] (h : Œº ‚â§ ŒΩ) : IsTight Œº where
  tendsto_cocompact := tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds
    ŒΩ.tendsto_cocompact (fun _ ‚Ü¶ by simp) h

instance [IsTight Œº] {s : Set Œ±} : IsTight (Œº.restrict s) := mono Œº.restrict_le_self

instance [IsTight Œº] [IsTight ŒΩ] : IsTight (Œº + ŒΩ) where
  tendsto_cocompact := by
    simpa only [add_zero] using Filter.Tendsto.add Œº.tendsto_cocompact ŒΩ.tendsto_cocompact

instance (c : ‚Ñù‚â•0) [hŒº : IsTight Œº] : IsTight (c ‚Ä¢ Œº) := by
  rw [isTight_iff_exists_isCompact_measure_compl_le] at hŒº ‚ä¢
  intro Œµ hŒµ
  have hŒµc : 0 < Œµ / c := by simp [hŒµ.ne']
  obtain ‚ü®K, hK, hKc‚ü© := hŒº (Œµ / c) hŒµc
  exact ‚ü®K, hK, ENNReal.mul_le_of_le_div' hKc‚ü©

/-- Tight measures on T2 spaces that assign finite measure to compact sets are finite. -/
instance [TopologicalSpace Œ±] [T2Space Œ±] [OpensMeasurableSpace Œ±]
    [hk : IsFiniteMeasureOnCompacts Œº] [IsTight Œº] :
    IsFiniteMeasure Œº where
  measure_univ_lt_top := by
    obtain ‚ü®K, hK, hŒº‚ü© := Œº.exists_isCompact_measure_compl_le zero_lt_one
    rw [‚Üê measure_add_measure_compl hK.measurableSet, ENNReal.add_lt_top]
    exact ‚ü®hk.lt_top_of_isCompact hK, hŒº.trans_lt ENNReal.one_lt_top‚ü©

/-- Inner regular finite measures on T2 spaces are tight. -/
instance [T2Space Œ±] [OpensMeasurableSpace Œ±] [IsFiniteMeasure Œº] [Œº.InnerRegular] :
    IsTight Œº := by
  refine of_exists_isCompact_measure_compl_le fun Œµ hŒµ ‚Ü¶ ?_
  let r := Œº Set.univ
  cases lt_or_ge Œµ r with
  | inl hŒµr =>
    have hŒµr' : r - Œµ < r := ENNReal.sub_lt_self (measure_ne_top Œº _) (zero_le'.trans_lt hŒµr).ne'
      hŒµ.ne'
    obtain ‚ü®K, _, hK_compact, hKŒº‚ü© := MeasurableSet.univ.exists_lt_isCompact hŒµr'
    refine ‚ü®K, hK_compact, ?_‚ü©
    rw [measure_compl hK_compact.measurableSet (measure_ne_top Œº _), tsub_le_iff_right]
    rw [ENNReal.sub_lt_iff_lt_right (ne_top_of_lt hŒµr) hŒµr.le, add_comm] at hKŒº
    exact hKŒº.le
  | inr hŒµr => exact ‚ü®‚àÖ, isCompact_empty, by rwa [Set.compl_empty]‚ü©

end IsTight

end MeasureTheory
