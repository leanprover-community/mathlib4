/-
Copyright (c) 2024 Josha Dekker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, Josha Dekker
-/
import Mathlib.Analysis.SpecificLimits.Basic
import Mathlib.MeasureTheory.Constructions.BorelSpace.Metric
import Mathlib.MeasureTheory.Measure.Regular
import Mathlib.Topology.Metrizable.Uniformity

/-!
# (Pre-)tight measures
The key definition of interest here is that of tight measures, `IsTight`. We first introduce two
weaker notions, `IsSeparablySupported` and `IsPretight`, which are equivalent on complete metric
spaces. We provide some basic API for these notions and prove Ulam's tightness theorem
(`of_isSeparableSpace_completeSpace`) and its strengthening `of_isSeparablySupported_completeSpace`.

## Main definitions
* `MeasureTheory.Measure.IsSeparablySupported`: A measure `Œº` is separably supported if there is a
  separable set `S` such that `Œº S·∂ú = 0`.
* `MeasureTheory.Measure.IsPretight`: A measure `Œº` is pre-tight if for all `0 < Œµ`, there exists
  `K` totally bounded such that `Œº K·∂ú ‚â§ Œµ`.
* `MeasureTheory.Measure.IsTight`: A measure `Œº` is tight if for all `0 < Œµ`, there exists `K`
  compact such that `Œº K·∂ú ‚â§ Œµ`. This is defined in terms of filters.
  `iff_exists_isCompact_measure_compl_le` establishes equivalence with the usual definition.

## Main statements

* `of_isSeparableSpace_completeSpace`: Ulam's tightness theorem: a finite measure on a complete
  separable metric space is tight.
* `of_isSeparablySupported_completeSpace`: A strengthening of Ulam's tightness theorem: a finite,
  separably supported measure on a complete metric space is tight.
* `of_innerRegular`: Every finite, inner-regular measure on a T2 space is tight.

## Notation


## Implementation details


-/
open Topology Filter Uniformity Uniform MeasureTheory Set
open scoped ENNReal

namespace MeasureTheory.Measure

variable {Œ± Œπ : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±}

/-- For a finite measure `Œº`, we can extract from a countable cover that has full measure, a finite
cover of accumulated sets that has `Œµ`-almost full measure. -/
lemma exists_sub_le_measure_accumulate [IsFiniteMeasure Œº] (K : ‚Ñï ‚Üí Set Œ±)
    (h : Œº (‚ãÉ n, K n) = Œº Set.univ) {Œµ : ENNReal} (hŒµ : 0 < Œµ) :
    ‚àÉ n, Œº Set.univ - Œµ ‚â§ Œº (Set.Accumulate K n) := by
  have : Filter.Tendsto (Œº ‚àò Set.Accumulate K) Filter.atTop (nhds (Œº (‚ãÉ n, Set.Accumulate K n))) :=
    MeasureTheory.tendsto_measure_iUnion_atTop Set.monotone_accumulate
  rw [ENNReal.tendsto_atTop (measure_ne_top Œº (‚ãÉ n, Accumulate K n)), Set.iUnion_accumulate] at this
  obtain ‚ü®N, hN‚ü© := this Œµ hŒµ
  use N
  simp_all only [Function.comp_apply, mem_Icc, le_refl]

/-- For a finite measure `Œº`, we can extract from a countable cover that has full measure, a finite
cover of accumulated sets that has `Œµ`-almost full measure. -/
lemma exists_sub_le_measure_accumulate2 [IsFiniteMeasure Œº] (K : ‚Ñï ‚Üí Set Œ±)
    (h : Œº (‚ãÉ n, K n)·∂ú = 0) {Œµ : ENNReal} (hŒµ : 0 < Œµ) :
    ‚àÄ·∂† n in atTop, Œº (Accumulate K n)·∂ú ‚â§ Œµ := by
  rw [Filter.eventually_atTop]
  have : Filter.Tendsto (Œº ‚àò (Accumulate K)·∂ú) Filter.atTop (ùìù (Œº (‚ãÇ n, (Accumulate K n)·∂ú))) := by
    apply MeasureTheory.tendsto_measure_iInter_atTop
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ exact ‚ü®0, measure_ne_top _ _‚ü©
  rw [ENNReal.tendsto_atTop (measure_ne_top _ _), ‚Üê compl_iUnion, iUnion_accumulate] at this
  obtain ‚ü®N, hN‚ü© := this Œµ hŒµ
  use N
  intro b hb
  have := hN b hb
  simp at this
  sorry

/-- For a finite measure `Œº`, we can extract from a countable cover that has full measure, a finite
cover of accumulated sets for which the complement has measure below `Œµ`. -/
lemma exists_sub_le_measure_accumulate_compl [IsFiniteMeasure Œº] (K : ‚Ñï ‚Üí Set Œ±)
    (hKmeas : ‚àÄ n, MeasurableSet (K n)) (h : Œº (‚ãÉ n, K n) = Œº Set.univ) {Œµ : ENNReal} (hŒµ : 0 < Œµ) :
    ‚àÉ n, Œº ((Set.Accumulate K n)·∂ú) ‚â§ Œµ := by
  obtain ‚ü®n, hn‚ü© := exists_sub_le_measure_accumulate K h hŒµ
  use n
  have hK2 : MeasurableSet (Set.Accumulate K n) := by
    rw [Set.Accumulate]
    measurability
  rw [measure_compl hK2 (measure_ne_top Œº _)]
  exact tsub_le_iff_tsub_le.mp hn

/-- For a finite measure `Œº`, we can construct a dense sequence such that for any radius, we can
cover all but a set of measure below `Œµ`. -/
lemma exists_denseRange_sub_le_measure_univ_of_separableSpace [PseudoMetricSpace Œ±]
    [TopologicalSpace.SeparableSpace Œ±] [Nonempty Œ±] (Œº : Measure Œ±) [IsFiniteMeasure Œº] :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, DenseRange u ‚àß
    ‚àÄ Œµ > 0, ‚àÄ Œ¥ > 0, ‚àÉ N : ‚Ñï, Œº (Set.univ) - Œµ ‚â§ Œº (‚ãÉ i ‚â§ N, Metric.ball (u i) Œ¥) := by
  obtain ‚ü®u, hu‚ü© := TopologicalSpace.exists_dense_seq Œ±
  use u, hu
  intro Œµ hŒµ Œ¥ hŒ¥
  apply exists_sub_le_measure_accumulate (fun y ‚Ü¶ Metric.ball (u y) Œ¥) (?_) hŒµ
  apply le_antisymm (measure_mono fun ‚¶Éa‚¶Ñ _ ‚Ü¶ trivial)
  exact measure_mono <| fun y _ => Set.mem_iUnion.mpr (DenseRange.exists_dist_lt hu y hŒ¥)

/-- For a finite measure `Œº`, we can construct a dense sequence such that for any radius, we can
find a `N` such that the measure of the complement of the first `N` balls of radius `1/(j+1)` is
at most `Œµ/2^(j+1)`. -/
lemma exists_denseRange_sub_le_measure_univ_of_separableSpace_compl [PseudoMetricSpace Œ±]
    [TopologicalSpace.SeparableSpace Œ±] [Nonempty Œ±] [OpensMeasurableSpace Œ±] (Œº : Measure Œ±)
    [IsFiniteMeasure Œº] {Œµ : ENNReal} (hŒµ : 0 < Œµ) : ‚àÉ u : ‚Ñï ‚Üí Œ±, DenseRange u ‚àß
    ‚àÄ j : ‚Ñï, ‚àÉ N : ‚Ñï, Œº ((‚ãÉ i ‚â§ N, Metric.ball (u i) (1/(j+1)))·∂ú) ‚â§ Œµ/2^(j+1) := by
  obtain ‚ü®u, hu, cover‚ü© := exists_denseRange_sub_le_measure_univ_of_separableSpace Œº
  have hŒµj_pos : ‚àÄ j : ‚Ñï, Œµ/(2^(j+1)) > 0 :=
    fun j => ENNReal.div_pos hŒµ.ne' (Ne.symm (ne_of_beq_false rfl))
  use u, hu
  intro j
  obtain ‚ü®N, hN‚ü© := cover (Œµ/(2^(j+1))) (hŒµj_pos j) (1/(j+1)) (Nat.one_div_pos_of_nat)
  use N
  rw [measure_compl (by measurability) (measure_ne_top Œº _)]
  exact tsub_le_iff_tsub_le.mp hN

/-- A measure `Œº` is separable if there is a separable set `S` such that `Œº S = Œº Set.univ`. -/
 def IsSeparablySupported [TopologicalSpace Œ±] (Œº : Measure Œ±) : Prop :=
  ‚àÉ S : Set Œ±, TopologicalSpace.IsSeparable S ‚àß Œº (S·∂ú) = 0

namespace IsSeparablySupported

lemma of_separableSpace [TopologicalSpace Œ±] [TopologicalSpace.SeparableSpace Œ±] :
    IsSeparablySupported Œº := by
  refine ‚ü®Set.univ, TopologicalSpace.isSeparable_univ_iff.mpr ‚Äπ_‚Ä∫, ?_‚ü©
  rw [Set.compl_univ, measure_empty]

lemma separablySupported_nat_iff [TopologicalSpace Œ±] :
    IsSeparablySupported Œº ‚Üî ‚àÄ n : ‚Ñï, ‚àÉ S : Set Œ±, TopologicalSpace.IsSeparable S ‚àß Œº S·∂ú ‚â§ 1/n := by
  constructor
  ¬∑ rintro ‚ü®S, hS, hSc‚ü© n
    use S, hS
    simp_all only [zero_le]
  ¬∑ intro h
    choose S hsep hmeas using h
    use ‚ãÉ n, S n, TopologicalSpace.isSeparable_iUnion.mpr hsep
    rw [‚Üê le_zero_iff]
    apply le_of_forall_lt'
    intro _ hc
    obtain ‚ü®n, hn‚ü© := ENNReal.exists_inv_nat_lt hc.ne.symm
    apply lt_of_le_of_lt ?_ hn
    have : Œº (S n)·∂ú ‚â§ (‚Üën)‚Åª¬π := by
      simp_all only [one_div,
        ENNReal.le_inv_iff_mul_le]
    apply le_trans ?_ this
    apply measure_mono
    rw [Set.compl_subset_compl]
    exact subset_iUnion_of_subset n fun ‚¶Éa‚¶Ñ a ‚Ü¶ a

end IsSeparablySupported

section IsPretight

variable [UniformSpace Œ±]

/-- A measure `Œº` is pre-tight if for all `0 < Œµ`, there exists `K` totally bounded such that
  `Œº K·∂ú ‚â§ Œµ`. -/
def IsPretight (Œº : Measure Œ±) : Prop :=
  ‚àÄ Œµ : ‚Ñù‚â•0‚àû, 0 < Œµ ‚Üí ‚àÉ K : Set Œ±, TotallyBounded K ‚àß Œº K·∂ú ‚â§ Œµ

namespace IsPretight

lemma of_totallyBounded (h : TotallyBounded (Set.univ : Set Œ±)) : IsPretight Œº := by
  intro Œµ hŒµ
  use Set.univ, h
  rw [Set.compl_univ, measure_empty]
  exact hŒµ.le

lemma exists_totallyBounded_nat (h : IsPretight Œº) (n : ‚Ñï):
    ‚àÉ K : Set Œ±, TotallyBounded K ‚àß Œº K·∂ú ‚â§ 1/n := by
  apply h
  simp only [one_div, ENNReal.inv_pos, ne_eq, ENNReal.natCast_ne_top, not_false_eq_true]

/-- It suffices to check totally boundedness along countably many `Œµ`. -/
lemma of_totallyBounded_nat (h : ‚àÄ n : ‚Ñï, ‚àÉ K : Set Œ±, TotallyBounded K ‚àß Œº K·∂ú ‚â§ 1/n) :
    IsPretight Œº := by
  intro Œµ hŒµ
  obtain ‚ü®n, hn‚ü© := ENNReal.exists_inv_nat_lt hŒµ.ne'
  obtain ‚ü®K, hK, hKe‚ü© := h n
  refine ‚ü®K, hK, ?_‚ü©
  apply le_trans hKe (le_trans ?_ hn.le)
  rw [one_div, ENNReal.inv_le_inv]

lemma totallyBounded_nat_iff : IsPretight Œº ‚Üî ‚àÄ n : ‚Ñï, ‚àÉ K : Set Œ±, TotallyBounded K ‚àß Œº K·∂ú ‚â§ 1/n :=
  ‚ü®exists_totallyBounded_nat, of_totallyBounded_nat‚ü©

/-- If a measure `Œº` is pretight, we can cover `Œº`-almost all of the space by a countable sequence
of totally bounded sets. -/
lemma exists_countable_totallyBounded_union (h : IsPretight Œº):
    ‚àÉ K : ‚Ñï ‚Üí Set Œ±, (‚àÄ n, TotallyBounded (K n)) ‚àß Œº (‚ãÉ n, K n)·∂ú = 0 := by
  choose! K hKa hKb using h.exists_totallyBounded_nat
  use K, hKa
  rw [‚Üê le_zero_iff]
  apply le_of_forall_lt'
  intro _ hc
  obtain ‚ü®n, hn‚ü© := ENNReal.exists_inv_nat_lt hc.ne.symm
  apply lt_of_le_of_lt ?_ hn
  have : Œº (K n)·∂ú ‚â§ (‚Üën)‚Åª¬π := by
    simp_all only [one_div,
      ENNReal.le_inv_iff_mul_le]
  apply le_trans ?_ this
  apply measure_mono
  rw [Set.compl_subset_compl]
  exact subset_iUnion_of_subset n fun ‚¶Éa‚¶Ñ a ‚Ü¶ a

/-- Every pretight measure on a countably generated uniform space is separably supported. -/
lemma to_isSeparablySupported_on_countably_generated_uniformSpace [IsCountablyGenerated (ùì§ Œ±)]
    (h : IsPretight Œº) : IsSeparablySupported Œº := by
  obtain ‚ü®K, hKa, hKb‚ü© := exists_countable_totallyBounded_union h
  use ‚ãÉ n, K n, ?_, hKb
  rw [TopologicalSpace.isSeparable_iUnion]
  exact fun i => TotallyBounded.isSeparable (hKa i)

/-- Every finite measure on a countably generated, separable, uniform space is pretight.-/
lemma of_separableSpace_on_countablyGenerated_uniformSpace [IsCountablyGenerated (ùì§ Œ±)]
    [TopologicalSpace.SeparableSpace Œ±] [OpensMeasurableSpace Œ±] [IsFiniteMeasure Œº] :
    IsPretight Œº := by
  letI := UniformSpace.pseudoMetricSpace (X := Œ±)
  by_cases hŒº : Œº (Set.univ) = 0
  ¬∑ intro Œµ hŒµ
    use ‚àÖ, totallyBounded_empty
    rw [Set.compl_empty, hŒº]
    exact hŒµ.le
  ¬∑ have : Nonempty Œ± := by
      have : 0 < Œº (Set.univ) := by
        rw [Measure.measure_univ_eq_zero] at hŒº
        exact Measure.measure_univ_pos.mpr hŒº
      exact nonempty_of_exists (MeasureTheory.nonempty_of_measure_ne_zero this.ne')
    intro Œµ hŒµ
    obtain ‚ü®x, _, cover‚ü© := exists_denseRange_sub_le_measure_univ_of_separableSpace_compl Œº hŒµ
    choose G hG using cover
    use ‚ãÇ j, ‚ãÉ i ‚â§ G j, Metric.ball (x i) (1/(j+1))
    constructor
    ¬∑ rw [Metric.totallyBounded_iff]
      intro Œ∑ hŒ∑
      obtain ‚ü®k, hk‚ü© := exists_nat_one_div_lt hŒ∑
      use ‚ãÉ i ‚â§ G k, {x i}, Set.toFinite (‚ãÉ i ‚â§ G k, {x i})
      apply subset_trans ?_ (Set.iUnion‚ÇÇ_mono fun i j ‚Ü¶ Metric.ball_subset_ball hk.le)
      apply subset_trans (Set.iInter_subset _ k)
      apply Set.iUnion_subset
      intro i
      simp only [one_div, Set.mem_iUnion, Set.mem_singleton_iff, exists_prop, Set.iUnion_exists,
        Set.biUnion_and', Set.iUnion_iUnion_eq_left, Set.iUnion_subset_iff]
      intro hi
      apply Set.subset_iUnion‚ÇÇ_of_subset i
      ¬∑ exact le_rfl
      ¬∑ exact hi
    ¬∑ simp only [one_div, Set.compl_iInter, Set.compl_iUnion]
      apply le_trans (MeasureTheory.measure_iUnion_le _)
      have : ‚àÄ i, Œº (‚ãÇ j, ‚ãÇ (_ : j ‚â§ G i), (Metric.ball (x j) (‚Üëi + 1)‚Åª¬π)·∂ú) ‚â§ Œµ / 2 ^ (i + 1) := by
        intro i
        simp_all only [Measure.measure_univ_eq_zero, one_div, compl_iUnion]
      apply le_trans (ENNReal.tsum_le_tsum this)
      calc ‚àë' (a : ‚Ñï), Œµ / (2 ^ (a + 1))
        _ = Œµ * ‚àë' (a : ‚Ñï), 2‚Åª¬π ^ (a + 1) := by
          simp only [div_eq_mul_inv, ENNReal.inv_pow, ENNReal.tsum_mul_left]
        _ = Œµ * (2‚Åª¬π * 2) := by simp [ENNReal.tsum_geometric_add_one]
        _ ‚â§ Œµ := by rw [ENNReal.inv_mul_cancel two_ne_zero ENNReal.ofNat_ne_top, mul_one]

/-- Every finite, separably supported measure on a countably generated, uniform space is pretight.-/
lemma of_isSeparablySupported_on_countablyGenerated_uniformSpace [IsCountablyGenerated (ùì§ Œ±)]
    [OpensMeasurableSpace Œ±] (h : IsSeparablySupported Œº) [IsFiniteMeasure Œº] : IsPretight Œº := by
  letI := UniformSpace.pseudoMetricSpace (X := Œ±)
  obtain ‚ü®S, hS, hSŒº‚ü© := h
  have : TopologicalSpace.SeparableSpace (closure S) :=
    TopologicalSpace.IsSeparable.separableSpace <| TopologicalSpace.IsSeparable.closure hS
  letI mŒ± : MeasureSpace Œ± := ‚ü®Œº‚ü©
  letI mS : MeasureSpace (closure S) := Measure.Subtype.measureSpace
  have : IsFiniteMeasure mS.volume := by
    constructor
    rw [Measure.Subtype.volume_univ (MeasurableSet.nullMeasurableSet measurableSet_closure)]
    exact measure_lt_top volume (closure S)
  have := of_separableSpace_on_countablyGenerated_uniformSpace (Œº := mS.volume)
  intro Œµ hŒµ
  obtain ‚ü®K, hK, hKe‚ü© := this Œµ hŒµ
  have hSŒº_co : Œº (closure S)·∂ú = 0 := by
    rw [‚Üê le_zero_iff] at *
    apply le_trans ?_ hSŒº
    apply measure_mono
    rw [Set.compl_subset_compl]
    exact subset_closure
  use (closure K)
  constructor
  ¬∑ apply TotallyBounded.closure
    rw [Metric.totallyBounded_iff] at *
    intro Œ¥ hŒ¥
    obtain ‚ü®N, hN‚ü© := hK Œ¥ hŒ¥
    use N, Finite.image Subtype.val hN.1
    simp_all only [iUnion_coe_set, mem_image, Subtype.exists, exists_and_right, exists_eq_right,
      iUnion_exists, image_subset_iff, preimage_iUnion]
    exact hN.right
  ¬∑ have hKe : volume (closure K)·∂ú ‚â§ Œµ := by
      apply le_trans ?_ hKe
      apply measure_mono
      rw [Set.compl_subset_compl]
      exact subset_closure
    apply le_trans ?_ hKe
    rw [Measure.Subtype.volume_def, MeasureTheory.Measure.comap_apply _ Subtype.val_injective]
    ¬∑ rw [‚Üê MeasureTheory.measure_inter_add_diff‚ÇÄ (t := closure S),
        ‚Üê MeasureTheory.measure_inter_add_diff‚ÇÄ (Œº := volume) (t := closure S), volume]
      ¬∑ apply add_le_add
        ¬∑ apply measure_mono
          intro x hx
          simp only [mem_inter_iff, mem_image, mem_compl_iff, closure_subtype, Subtype.exists,
            exists_and_left, exists_prop, exists_eq_right_right, and_self_right]
          constructor <;> simp_all only [mem_inter_iff, mem_compl_iff, not_false_eq_true]
        ¬∑ have : Œº ((closure (Subtype.val '' K))·∂ú \ closure S) = 0 := by
            rw [‚Üê nonpos_iff_eq_zero, ‚Üê hSŒº_co]
            apply measure_mono
            intro x hx
            simp_all only [mem_diff, mem_compl_iff, not_false_eq_true]
          rw [this]
          exact zero_le _
      ¬∑ apply MeasurableSet.nullMeasurableSet
        measurability
      ¬∑ apply MeasurableSet.nullMeasurableSet
        measurability
    ¬∑ exact fun s hs ‚Ü¶ MeasurableSet.subtype_image measurableSet_closure hs
    ¬∑ measurability

end IsPretight

end IsPretight

/-- A measure `Œº` is tight if for all `0 < Œµ`, there exists `K` compact such that `Œº K·∂ú ‚â§ Œµ`.
This is formulated in terms of filters for simplicity, and proven equivalent to the usual definition
in `iff_exists_isCompact_measure_compl_le`. -/
def IsTight [TopologicalSpace Œ±] (Œº : Measure Œ±) : Prop := Tendsto Œº (cocompact Œ±).smallSets (ùìù 0)

namespace IsTight

/-- The usual definition of tightness is equivalent to the filter definition. -/
lemma iff_exists_isCompact_measure_compl_le [TopologicalSpace Œ±] :
    IsTight Œº ‚Üî ‚àÄ Œµ > 0, ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº (K·∂ú) ‚â§ Œµ := by
  simp only [IsTight, ne_eq, ENNReal.zero_ne_top, not_false_eq_true, ENNReal.tendsto_nhds,
    zero_le, tsub_eq_zero_of_le, zero_add, mem_Icc, true_and,
    eventually_smallSets, mem_cocompact]
  apply forall‚ÇÇ_congr; rintro Œµ -; constructor
  ¬∑ rintro ‚ü®A, ‚ü®K, h1, h2‚ü©, hA‚ü©
    exact ‚ü®K, h1, hA K·∂ú h2‚ü©
  ¬∑ rintro ‚ü®K, h1, h2‚ü©
    refine ‚ü®K·∂ú, ‚ü®K, h1, subset_rfl‚ü©, fun A hA => Œº.mono hA |>.trans h2‚ü©

lemma of_compactSpace [TopologicalSpace Œ±] [CompactSpace Œ±] : IsTight Œº := by
  rw [iff_exists_isCompact_measure_compl_le]
  intro Œµ hŒµ
  use Set.univ, CompactSpace.isCompact_univ
  rw [Set.compl_univ, measure_empty]
  exact hŒµ.le

lemma exists_isCompact_nat [TopologicalSpace Œ±] (h : IsTight Œº) (n : ‚Ñï) :
    ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº K·∂ú ‚â§ 1/n := by
  rw [iff_exists_isCompact_measure_compl_le] at h
  apply h
  simp

lemma of_isCompact_nat [TopologicalSpace Œ±] (h : ‚àÄ n : ‚Ñï, ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº K·∂ú ‚â§ 1/n) :
    IsTight Œº:= by
  rw [iff_exists_isCompact_measure_compl_le]
  intro Œµ hŒµ
  obtain ‚ü®n, hn‚ü© := ENNReal.exists_inv_nat_lt hŒµ.ne'
  obtain ‚ü®K, hK, hKe‚ü© := h n
  refine ‚ü®K, hK, le_trans hKe (le_trans ?_ hn.le)‚ü©
  rw [one_div, ENNReal.inv_le_inv]

lemma iff_isCompact_nat [TopologicalSpace Œ±] :
    IsTight Œº ‚Üî ‚àÄ n : ‚Ñï, ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº K·∂ú ‚â§ 1/n :=
  ‚ü®exists_isCompact_nat, of_isCompact_nat‚ü©

lemma exists_countable_isSigmaCompact_cover [TopologicalSpace Œ±] (h : IsTight Œº) :
    ‚àÉ M, IsSigmaCompact M ‚àß Œº M = Œº Set.univ := by
  choose! K hK using h.exists_isCompact_nat
  use ‚ãÉ n, K n, isSigmaCompact_iUnion_of_isCompact _ (fun _ => (hK _).1 )
  rw [measure_congr]
  rw [ae_eq_univ, Set.compl_iUnion, ‚Üê le_zero_iff]
  refine le_of_forall_lt' (fun Œµ hŒµ ‚Ü¶ ?_)
  obtain ‚ü®n, hn‚ü© := ENNReal.exists_inv_nat_lt hŒµ.ne.symm
  exact lt_of_le_of_lt ((measure_mono <| Set.iInter_subset _ n).trans <|
    (inv_eq_one_div (n : ENNReal)).symm ‚ñ∏ (hK n).2) hn

lemma of_countable_isSigmaCompact_cover [TopologicalSpace Œ±] [T2Space Œ±] [OpensMeasurableSpace Œ±]
    [IsFiniteMeasure Œº] (h : ‚àÉ M, IsSigmaCompact M ‚àß Œº M = Œº Set.univ) : IsTight Œº := by
  rw [iff_exists_isCompact_measure_compl_le]
  rintro Œµ hŒµ
  rcases h with ‚ü®M, hM, hMŒº‚ü©
  rcases hM with ‚ü®K, hK, rfl‚ü©
  have hAKc : ‚àÄ n, IsCompact (Set.Accumulate K n) := fun n ‚Ü¶ isCompact_accumulate hK n
  obtain ‚ü®n, hn‚ü© := exists_sub_le_measure_accumulate_compl K (fun n => (hK n).measurableSet) hMŒº hŒµ
  exact ‚ü®Set.Accumulate K n, hAKc n, hn‚ü©

lemma iff_countable_isSigmaCompact_cover [TopologicalSpace Œ±] [T2Space Œ±] [OpensMeasurableSpace Œ±]
    [IsFiniteMeasure Œº] : IsTight Œº ‚Üî ‚àÉ M, IsSigmaCompact M ‚àß Œº M = Œº Set.univ :=
  ‚ü®exists_countable_isSigmaCompact_cover, of_countable_isSigmaCompact_cover‚ü©

lemma of_le_isTight [TopologicalSpace Œ±] {Œº ŒΩ : Measure Œ±} (h : Œº ‚â§ ŒΩ) (hŒΩ : IsTight ŒΩ) :
    IsTight Œº := by
  rw [iff_exists_isCompact_measure_compl_le] at *
  intro Œµ hŒµ
  obtain ‚ü®K, hK, hKc‚ü© := hŒΩ Œµ hŒµ
  exact ‚ü®K, hK, le_trans (h K·∂ú) hKc‚ü©

lemma of_restrict_isTight [TopologicalSpace Œ±] {U : Set Œ±} (hŒº : IsTight Œº) :
    IsTight (Œº.restrict U) := by
  rw [iff_exists_isCompact_measure_compl_le] at *
  intro Œµ hŒµ
  obtain ‚ü®K, hK, hKc‚ü© := hŒº Œµ hŒµ
  exact ‚ü®K, hK, le_trans (Œº.restrict_le_self _) hKc‚ü©

lemma add [TopologicalSpace Œ±] {Œº ŒΩ : Measure Œ±} (hŒº : IsTight Œº) (hŒΩ : IsTight ŒΩ) :
    IsTight (Œº + ŒΩ) := by
  simpa only [add_zero] using Filter.Tendsto.add hŒº hŒΩ

lemma const_mul [TopologicalSpace Œ±] (c : NNReal) (hŒº : IsTight Œº) : IsTight (c ‚Ä¢ Œº) := by
  rw [iff_exists_isCompact_measure_compl_le] at *
  intro Œµ hŒµ
  have hŒµc : 0 < Œµ / c := by
    simp only [ENNReal.div_pos_iff, ne_eq, ENNReal.coe_ne_top, not_false_eq_true,
      and_true, hŒµ.ne']
  obtain ‚ü®K, hK, hKc‚ü© := hŒº (Œµ / c) hŒµc
  exact ‚ü®K, hK, ENNReal.mul_le_of_le_div' hKc‚ü©

/-- Every tight measure is pre-tight -/
lemma IsPretight.of_isTight [UniformSpace Œ±] (h : IsTight Œº) : IsPretight Œº := by
  rw [iff_exists_isCompact_measure_compl_le] at h
  intro Œµ hŒµ
  obtain ‚ü®K, hK_compact, hKŒº‚ü© := h Œµ hŒµ
  use K
  exact ‚ü®hK_compact.totallyBounded, hKŒº‚ü©

/-- On complete uniform spaces, every pre-tight measure is tight -/
lemma of_isPretight_completeSpace [UniformSpace Œ±] [CompleteSpace Œ±] (h : IsPretight Œº) :
    IsTight Œº := by
  rw [iff_exists_isCompact_measure_compl_le]
  intro Œµ hŒµ
  obtain ‚ü®K, hK, hKe‚ü© := h Œµ hŒµ
  refine ‚ü®closure K, isCompact_of_totallyBounded_isClosed hK.closure isClosed_closure, ?_‚ü©
  exact le_trans (subset_closure |> compl_subset_compl.mpr |> Œº.mono) hKe

lemma isPretight_iff_completeSpace [UniformSpace Œ±] [CompleteSpace Œ±] :
    IsTight Œº ‚Üî IsPretight Œº := ‚ü®IsPretight.of_isTight, of_isPretight_completeSpace‚ü©

/-- Ulam's tightness theorem. -/
lemma of_isSeparableSpace_completeSpace [UniformSpace Œ±] [IsCountablyGenerated (ùì§ Œ±)]
    [TopologicalSpace.SeparableSpace Œ±] [CompleteSpace Œ±] [OpensMeasurableSpace Œ±]
    [IsFiniteMeasure Œº] : IsTight Œº := by
  letI := UniformSpace.pseudoMetricSpace (X := Œ±)
  apply of_isPretight_completeSpace
  exact IsPretight.of_separableSpace_on_countablyGenerated_uniformSpace

/-- A strengthened version of Ulam's tightness theorem. -/
lemma of_isSeparablySupported_completeSpace [UniformSpace Œ±] [IsCountablyGenerated (ùì§ Œ±)]
    [CompleteSpace Œ±] [OpensMeasurableSpace Œ±] (h : IsSeparablySupported Œº) [IsFiniteMeasure Œº] :
    IsTight Œº := by
  letI := UniformSpace.pseudoMetricSpace (X := Œ±)
  apply of_isPretight_completeSpace
  exact IsPretight.of_isSeparablySupported_on_countablyGenerated_uniformSpace h

/-- Tight measures on T2 spaces that assign finite measure to compact sets are finite. -/
instance [TopologicalSpace Œ±] [T2Space Œ±] [OpensMeasurableSpace Œ±] [hk: IsFiniteMeasureOnCompacts Œº]
    [h : Fact (IsTight Œº)] : IsFiniteMeasure Œº := by
  obtain ‚ü®_, hK, hŒº‚ü© := (iff_exists_isCompact_measure_compl_le.mp h.out) 1 (zero_lt_one)
  have : Œº Set.univ < ‚ä§ := by
    rw [‚Üê (MeasureTheory.measure_add_measure_compl hK.measurableSet), WithTop.add_lt_top]
    exact ‚ü®hk.lt_top_of_isCompact hK, lt_of_le_of_lt hŒº ENNReal.one_lt_top‚ü©
  exact ‚ü®this‚ü©

/-- Inner regular finite measures on T2 spaces are tight. -/
lemma of_innerRegular [TopologicalSpace Œ±] [T2Space Œ±] [OpensMeasurableSpace Œ±] (Œº : Measure Œ±)
    [IsFiniteMeasure Œº] [Œº.InnerRegular] : IsTight Œº := by
  rw [iff_exists_isCompact_measure_compl_le]
  cases eq_zero_or_neZero Œº with
  | inl hŒº =>
    rw [hŒº]
    exact fun _ i ‚Ü¶ ‚ü®‚àÖ, isCompact_empty, le_of_lt i‚ü©
  | inr hŒº =>
    let r := Œº Set.univ
    have hr := NeZero.pos r
    intro Œµ hŒµ
    cases lt_or_ge Œµ r with
    | inl hŒµr =>
      have hŒµr' : r - Œµ < r := ENNReal.sub_lt_self (measure_ne_top Œº _) hr.ne' hŒµ.ne'
      obtain ‚ü®K, _, hK_compact, hKŒº‚ü© :=
        (MeasurableSet.univ : MeasurableSet (Set.univ : Set Œ±)).exists_lt_isCompact hŒµr'
      refine ‚ü®K, hK_compact, ?_‚ü©
      rw [measure_compl hK_compact.measurableSet (measure_ne_top Œº _),
        tsub_le_iff_right]
      rw [ENNReal.sub_lt_iff_lt_right (ne_top_of_lt hŒµr) hŒµr.le, add_comm] at hKŒº
      exact hKŒº.le
    | inr hŒµr =>
      refine ‚ü®‚àÖ, isCompact_empty, ?_‚ü©
      rw [Set.compl_empty]
      exact hŒµr

end IsTight

end MeasureTheory.Measure
