/-
Copyright (c) 2021 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import Mathlib.MeasureTheory.Measure.VectorMeasure
import Mathlib.MeasureTheory.Function.AEEqOfIntegral

#align_import measure_theory.measure.with_density_vector_measure from "leanprover-community/mathlib"@"d1bd9c5df2867c1cb463bc6364446d57bdd9f7f1"

/-!

# Vector measure defined by an integral

Given a measure `Œº` and an integrable function `f : Œ± ‚Üí E`, we can define a vector measure `v` such
that for all measurable set `s`, `v i = ‚à´ x in s, f x ‚àÇŒº`. This definition is useful for
the Radon-Nikodym theorem for signed measures.

## Main definitions

* `MeasureTheory.Measure.withDensity·µ•`: the vector measure formed by integrating a function `f`
  with respect to a measure `Œº` on some set if `f` is integrable, and `0` otherwise.

-/


noncomputable section

open scoped Classical MeasureTheory NNReal ENNReal

variable {Œ± Œ≤ : Type*} {m : MeasurableSpace Œ±}

namespace MeasureTheory

open TopologicalSpace

variable {Œº ŒΩ : Measure Œ±}
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]

/-- Given a measure `Œº` and an integrable function `f`, `Œº.withDensity·µ• f` is
the vector measure which maps the set `s` to `‚à´‚Çõ f ‚àÇŒº`. -/
def Measure.withDensity·µ• {m : MeasurableSpace Œ±} (Œº : Measure Œ±) (f : Œ± ‚Üí E) : VectorMeasure Œ± E :=
  if hf : Integrable f Œº then
    { measureOf' := fun s => if MeasurableSet s then ‚à´ x in s, f x ‚àÇŒº else 0
      empty' := by simp
      not_measurable' := fun s hs => if_neg hs
      m_iUnion' := fun s hs‚ÇÅ hs‚ÇÇ => by
        dsimp only
        convert hasSum_integral_iUnion hs‚ÇÅ hs‚ÇÇ hf.integrableOn with n
        ¬∑ rw [if_pos (hs‚ÇÅ n)]
        ¬∑ rw [if_pos (MeasurableSet.iUnion hs‚ÇÅ)] }
  else 0
#align measure_theory.measure.with_density·µ• MeasureTheory.Measure.withDensity·µ•

open Measure

variable {f g : Œ± ‚Üí E}

theorem withDensity·µ•_apply (hf : Integrable f Œº) {s : Set Œ±} (hs : MeasurableSet s) :
    Œº.withDensity·µ• f s = ‚à´ x in s, f x ‚àÇŒº := by rw [withDensity·µ•, dif_pos hf]; exact dif_pos hs
#align measure_theory.with_density·µ•_apply MeasureTheory.withDensity·µ•_apply

@[simp]
theorem withDensity·µ•_zero : Œº.withDensity·µ• (0 : Œ± ‚Üí E) = 0 := by
  ext1 s hs; erw [withDensity·µ•_apply (integrable_zero Œ± E Œº) hs]; simp
#align measure_theory.with_density·µ•_zero MeasureTheory.withDensity·µ•_zero

@[simp]
theorem withDensity·µ•_neg : Œº.withDensity·µ• (-f) = -Œº.withDensity·µ• f := by
  by_cases hf : Integrable f Œº
  ¬∑ ext1 i hi
    rw [VectorMeasure.neg_apply, withDensity·µ•_apply hf hi, ‚Üê integral_neg,
      withDensity·µ•_apply hf.neg hi]
    rfl
  ¬∑ rw [withDensity·µ•, withDensity·µ•, dif_neg hf, dif_neg, neg_zero]
    rwa [integrable_neg_iff]
#align measure_theory.with_density·µ•_neg MeasureTheory.withDensity·µ•_neg

theorem withDensity·µ•_neg' : (Œº.withDensity·µ• fun x => -f x) = -Œº.withDensity·µ• f :=
  withDensity·µ•_neg
#align measure_theory.with_density·µ•_neg' MeasureTheory.withDensity·µ•_neg'

@[simp]
theorem withDensity·µ•_add (hf : Integrable f Œº) (hg : Integrable g Œº) :
    Œº.withDensity·µ• (f + g) = Œº.withDensity·µ• f + Œº.withDensity·µ• g := by
  ext1 i hi
  rw [withDensity·µ•_apply (hf.add hg) hi, VectorMeasure.add_apply, withDensity·µ•_apply hf hi,
    withDensity·µ•_apply hg hi]
  simp_rw [Pi.add_apply]
  rw [integral_add] <;> rw [‚Üê integrableOn_univ]
  ¬∑ exact hf.integrableOn.restrict MeasurableSet.univ
  ¬∑ exact hg.integrableOn.restrict MeasurableSet.univ
#align measure_theory.with_density·µ•_add MeasureTheory.withDensity·µ•_add

theorem withDensity·µ•_add' (hf : Integrable f Œº) (hg : Integrable g Œº) :
    (Œº.withDensity·µ• fun x => f x + g x) = Œº.withDensity·µ• f + Œº.withDensity·µ• g :=
  withDensity·µ•_add hf hg
#align measure_theory.with_density·µ•_add' MeasureTheory.withDensity·µ•_add'

@[simp]
theorem withDensity·µ•_sub (hf : Integrable f Œº) (hg : Integrable g Œº) :
    Œº.withDensity·µ• (f - g) = Œº.withDensity·µ• f - Œº.withDensity·µ• g := by
  rw [sub_eq_add_neg, sub_eq_add_neg, withDensity·µ•_add hf hg.neg, withDensity·µ•_neg]
#align measure_theory.with_density·µ•_sub MeasureTheory.withDensity·µ•_sub

theorem withDensity·µ•_sub' (hf : Integrable f Œº) (hg : Integrable g Œº) :
    (Œº.withDensity·µ• fun x => f x - g x) = Œº.withDensity·µ• f - Œº.withDensity·µ• g :=
  withDensity·µ•_sub hf hg
#align measure_theory.with_density·µ•_sub' MeasureTheory.withDensity·µ•_sub'

@[simp]
theorem withDensity·µ•_smul {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedSpace ùïú E]
    [SMulCommClass ‚Ñù ùïú E] (f : Œ± ‚Üí E) (r : ùïú) : Œº.withDensity·µ• (r ‚Ä¢ f) = r ‚Ä¢ Œº.withDensity·µ• f := by
  by_cases hf : Integrable f Œº
  ¬∑ ext1 i hi
    rw [withDensity·µ•_apply (hf.smul r) hi, VectorMeasure.smul_apply, withDensity·µ•_apply hf hi, ‚Üê
      integral_smul r f]
    rfl
  ¬∑ by_cases hr : r = 0
    ¬∑ rw [hr, zero_smul, zero_smul, withDensity·µ•_zero]
    ¬∑ rw [withDensity·µ•, withDensity·µ•, dif_neg hf, dif_neg, smul_zero]
      rwa [integrable_smul_iff hr f]
#align measure_theory.with_density·µ•_smul MeasureTheory.withDensity·µ•_smul

theorem withDensity·µ•_smul' {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedSpace ùïú E]
    [SMulCommClass ‚Ñù ùïú E] (f : Œ± ‚Üí E) (r : ùïú) :
    (Œº.withDensity·µ• fun x => r ‚Ä¢ f x) = r ‚Ä¢ Œº.withDensity·µ• f :=
  withDensity·µ•_smul f r
#align measure_theory.with_density·µ•_smul' MeasureTheory.withDensity·µ•_smul'

theorem withDensity·µ•_smul_eq_withDensity·µ•_withDensity {f : Œ± ‚Üí ‚Ñù‚â•0} {g : Œ± ‚Üí E}
    (hf : AEMeasurable f Œº) (hfg : Integrable (f ‚Ä¢ g) Œº) :
    Œº.withDensity·µ• (f ‚Ä¢ g) = (Œº.withDensity (fun x ‚Ü¶ f x)).withDensity·µ• g := by
  ext s hs
  rw [withDensity·µ•_apply hfg hs,
    withDensity·µ•_apply ((integrable_withDensity_iff_integrable_smul‚ÇÄ hf).mpr hfg) hs,
    set_integral_withDensity_eq_set_integral_smul‚ÇÄ hf.restrict _ hs]
  rfl

theorem withDensity·µ•_smul_eq_withDensity·µ•_withDensity' {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} {g : Œ± ‚Üí E}
    (hf : AEMeasurable f Œº) (hflt : ‚àÄ·µê x ‚àÇŒº, f x < ‚àû)
    (hfg : Integrable (fun x ‚Ü¶ (f x).toReal ‚Ä¢ g x) Œº) :
    Œº.withDensity·µ• (fun x ‚Ü¶ (f x).toReal ‚Ä¢ g x) = (Œº.withDensity f).withDensity·µ• g := by
  rw [‚Üê withDensity_congr_ae (coe_toNNReal_ae_eq hflt),
    ‚Üê withDensity·µ•_smul_eq_withDensity·µ•_withDensity hf.ennreal_toNNReal hfg]
  rfl

theorem Measure.withDensity·µ•_absolutelyContinuous (Œº : Measure Œ±) (f : Œ± ‚Üí ‚Ñù) :
    Œº.withDensity·µ• f ‚â™·µ• Œº.toENNRealVectorMeasure := by
  by_cases hf : Integrable f Œº
  ¬∑ refine' VectorMeasure.AbsolutelyContinuous.mk fun i hi‚ÇÅ hi‚ÇÇ => _
    rw [toENNRealVectorMeasure_apply_measurable hi‚ÇÅ] at hi‚ÇÇ
    rw [withDensity·µ•_apply hf hi‚ÇÅ, Measure.restrict_zero_set hi‚ÇÇ, integral_zero_measure]
  ¬∑ rw [withDensity·µ•, dif_neg hf]
    exact VectorMeasure.AbsolutelyContinuous.zero _
#align measure_theory.measure.with_density·µ•_absolutely_continuous MeasureTheory.Measure.withDensity·µ•_absolutelyContinuous

/-- Having the same density implies the underlying functions are equal almost everywhere. -/
theorem Integrable.ae_eq_of_withDensity·µ•_eq {f g : Œ± ‚Üí E} (hf : Integrable f Œº)
    (hg : Integrable g Œº) (hfg : Œº.withDensity·µ• f = Œº.withDensity·µ• g) : f =·µê[Œº] g := by
  refine' hf.ae_eq_of_forall_set_integral_eq f g hg fun i hi _ => _
  rw [‚Üê withDensity·µ•_apply hf hi, hfg, withDensity·µ•_apply hg hi]
#align measure_theory.integrable.ae_eq_of_with_density·µ•_eq MeasureTheory.Integrable.ae_eq_of_withDensity·µ•_eq

theorem WithDensity·µ•Eq.congr_ae {f g : Œ± ‚Üí E} (h : f =·µê[Œº] g) :
    Œº.withDensity·µ• f = Œº.withDensity·µ• g := by
  by_cases hf : Integrable f Œº
  ¬∑ ext i hi
    rw [withDensity·µ•_apply hf hi, withDensity·µ•_apply (hf.congr h) hi]
    exact integral_congr_ae (ae_restrict_of_ae h)
  ¬∑ have hg : ¬¨Integrable g Œº := by intro hg; exact hf (hg.congr h.symm)
    rw [withDensity·µ•, withDensity·µ•, dif_neg hf, dif_neg hg]
#align measure_theory.with_density·µ•_eq.congr_ae MeasureTheory.WithDensity·µ•Eq.congr_ae

theorem Integrable.withDensity·µ•_eq_iff {f g : Œ± ‚Üí E} (hf : Integrable f Œº) (hg : Integrable g Œº) :
    Œº.withDensity·µ• f = Œº.withDensity·µ• g ‚Üî f =·µê[Œº] g :=
  ‚ü®fun hfg => hf.ae_eq_of_withDensity·µ•_eq hg hfg, fun h => WithDensity·µ•Eq.congr_ae h‚ü©
#align measure_theory.integrable.with_density·µ•_eq_iff MeasureTheory.Integrable.withDensity·µ•_eq_iff

section SignedMeasure

theorem withDensity·µ•_toReal {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hfm : AEMeasurable f Œº) (hf : (‚à´‚Åª x, f x ‚àÇŒº) ‚â† ‚àû) :
    (Œº.withDensity·µ• fun x => (f x).toReal) =
      @toSignedMeasure Œ± _ (Œº.withDensity f) (isFiniteMeasure_withDensity hf) := by
  have hfi := integrable_toReal_of_lintegral_ne_top hfm hf
  haveI := isFiniteMeasure_withDensity hf
  ext i hi
  rw [withDensity·µ•_apply hfi hi, toSignedMeasure_apply_measurable hi, withDensity_apply _ hi,
    integral_toReal hfm.restrict]
  refine' ae_lt_top' hfm.restrict (ne_top_of_le_ne_top hf _)
  conv_rhs => rw [‚Üê set_lintegral_univ]
  exact lintegral_mono_set (Set.subset_univ _)
#align measure_theory.with_density·µ•_to_real MeasureTheory.withDensity·µ•_toReal

theorem withDensity·µ•_eq_withDensity_pos_part_sub_withDensity_neg_part {f : Œ± ‚Üí ‚Ñù}
    (hfi : Integrable f Œº) :
    Œº.withDensity·µ• f =
      @toSignedMeasure Œ± _ (Œº.withDensity fun x => ENNReal.ofReal <| f x)
          (isFiniteMeasure_withDensity_ofReal hfi.2) -
        @toSignedMeasure Œ± _ (Œº.withDensity fun x => ENNReal.ofReal <| -f x)
          (isFiniteMeasure_withDensity_ofReal hfi.neg.2) := by
  haveI := isFiniteMeasure_withDensity_ofReal hfi.2
  haveI := isFiniteMeasure_withDensity_ofReal hfi.neg.2
  ext i hi
  rw [withDensity·µ•_apply hfi hi,
    integral_eq_lintegral_pos_part_sub_lintegral_neg_part hfi.integrableOn,
    VectorMeasure.sub_apply, toSignedMeasure_apply_measurable hi,
    toSignedMeasure_apply_measurable hi, withDensity_apply _ hi, withDensity_apply _ hi]
#align measure_theory.with_density·µ•_eq_with_density_pos_part_sub_with_density_neg_part MeasureTheory.withDensity·µ•_eq_withDensity_pos_part_sub_withDensity_neg_part

theorem Integrable.withDensity·µ•_trim_eq_integral {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±}
    (hm : m ‚â§ m0) {f : Œ± ‚Üí ‚Ñù} (hf : Integrable f Œº) {i : Set Œ±} (hi : MeasurableSet[m] i) :
    (Œº.withDensity·µ• f).trim hm i = ‚à´ x in i, f x ‚àÇŒº := by
  rw [VectorMeasure.trim_measurableSet_eq hm hi, withDensity·µ•_apply hf (hm _ hi)]
#align measure_theory.integrable.with_density·µ•_trim_eq_integral MeasureTheory.Integrable.withDensity·µ•_trim_eq_integral

theorem Integrable.withDensity·µ•_trim_absolutelyContinuous {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±}
    (hm : m ‚â§ m0) (hfi : Integrable f Œº) :
    (Œº.withDensity·µ• f).trim hm ‚â™·µ• (Œº.trim hm).toENNRealVectorMeasure := by
  refine' VectorMeasure.AbsolutelyContinuous.mk fun j hj‚ÇÅ hj‚ÇÇ => _
  rw [Measure.toENNRealVectorMeasure_apply_measurable hj‚ÇÅ, trim_measurableSet_eq hm hj‚ÇÅ] at hj‚ÇÇ
  rw [VectorMeasure.trim_measurableSet_eq hm hj‚ÇÅ, withDensity·µ•_apply hfi (hm _ hj‚ÇÅ)]
  simp only [Measure.restrict_eq_zero.mpr hj‚ÇÇ, integral_zero_measure]
#align measure_theory.integrable.with_density·µ•_trim_absolutely_continuous MeasureTheory.Integrable.withDensity·µ•_trim_absolutelyContinuous

end SignedMeasure

end MeasureTheory
