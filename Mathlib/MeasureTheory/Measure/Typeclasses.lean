/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro
-/
import Mathlib.MeasureTheory.Measure.Restrict

/-!
# Classes of measures

We introduce the following typeclasses for measures:

* `IsProbabilityMeasure Œº`: `Œº univ = 1`;
* `IsFiniteMeasure Œº`: `Œº univ < ‚àû`;
* `SigmaFinite Œº`: there exists a countable collection of sets that cover `univ`
  where `Œº` is finite;
* `SFinite Œº`: the measure `Œº` can be written as a countable sum of finite measures;
* `IsLocallyFiniteMeasure Œº` : `‚àÄ x, ‚àÉ s ‚àà ùìù x, Œº s < ‚àû`;
* `NoAtoms Œº` : `‚àÄ x, Œº {x} = 0`; possibly should be redefined as
  `‚àÄ s, 0 < Œº s ‚Üí ‚àÉ t ‚äÜ s, 0 < Œº t ‚àß Œº t < Œº s`.
-/

open scoped ENNReal NNReal Topology
open Set MeasureTheory Measure Filter MeasurableSpace ENNReal

variable {Œ± Œ≤ Œ¥ Œπ : Type*}

namespace MeasureTheory

variable {m0 : MeasurableSpace Œ±} [MeasurableSpace Œ≤] {Œº ŒΩ ŒΩ‚ÇÅ ŒΩ‚ÇÇ: Measure Œ±}
  {s t : Set Œ±}

section IsFiniteMeasure

/-- A measure `Œº` is called finite if `Œº univ < ‚àû`. -/
class IsFiniteMeasure (Œº : Measure Œ±) : Prop where
  measure_univ_lt_top : Œº univ < ‚àû
#align measure_theory.is_finite_measure MeasureTheory.IsFiniteMeasure
#align measure_theory.is_finite_measure.measure_univ_lt_top MeasureTheory.IsFiniteMeasure.measure_univ_lt_top

theorem not_isFiniteMeasure_iff : ¬¨IsFiniteMeasure Œº ‚Üî Œº Set.univ = ‚àû := by
  refine' ‚ü®fun h => _, fun h => fun h' => h'.measure_univ_lt_top.ne h‚ü©
  by_contra h'
  exact h ‚ü®lt_top_iff_ne_top.mpr h'‚ü©
#align measure_theory.not_is_finite_measure_iff MeasureTheory.not_isFiniteMeasure_iff

instance Restrict.isFiniteMeasure (Œº : Measure Œ±) [hs : Fact (Œº s < ‚àû)] :
    IsFiniteMeasure (Œº.restrict s) :=
  ‚ü®by simpa using hs.elim‚ü©
#align measure_theory.restrict.is_finite_measure MeasureTheory.Restrict.isFiniteMeasure

theorem measure_lt_top (Œº : Measure Œ±) [IsFiniteMeasure Œº] (s : Set Œ±) : Œº s < ‚àû :=
  (measure_mono (subset_univ s)).trans_lt IsFiniteMeasure.measure_univ_lt_top
#align measure_theory.measure_lt_top MeasureTheory.measure_lt_top

instance isFiniteMeasureRestrict (Œº : Measure Œ±) (s : Set Œ±) [h : IsFiniteMeasure Œº] :
    IsFiniteMeasure (Œº.restrict s) :=
  ‚ü®by simpa using measure_lt_top Œº s‚ü©
#align measure_theory.is_finite_measure_restrict MeasureTheory.isFiniteMeasureRestrict

theorem measure_ne_top (Œº : Measure Œ±) [IsFiniteMeasure Œº] (s : Set Œ±) : Œº s ‚â† ‚àû :=
  ne_of_lt (measure_lt_top Œº s)
#align measure_theory.measure_ne_top MeasureTheory.measure_ne_top

theorem measure_compl_le_add_of_le_add [IsFiniteMeasure Œº] (hs : MeasurableSet s)
    (ht : MeasurableSet t) {Œµ : ‚Ñù‚â•0‚àû} (h : Œº s ‚â§ Œº t + Œµ) : Œº t·∂ú ‚â§ Œº s·∂ú + Œµ := by
  rw [measure_compl ht (measure_ne_top Œº _), measure_compl hs (measure_ne_top Œº _),
    tsub_le_iff_right]
  calc
    Œº univ = Œº univ - Œº s + Œº s := (tsub_add_cancel_of_le <| measure_mono s.subset_univ).symm
    _ ‚â§ Œº univ - Œº s + (Œº t + Œµ) := (add_le_add_left h _)
    _ = _ := by rw [add_right_comm, add_assoc]

#align measure_theory.measure_compl_le_add_of_le_add MeasureTheory.measure_compl_le_add_of_le_add

theorem measure_compl_le_add_iff [IsFiniteMeasure Œº] (hs : MeasurableSet s) (ht : MeasurableSet t)
    {Œµ : ‚Ñù‚â•0‚àû} : Œº s·∂ú ‚â§ Œº t·∂ú + Œµ ‚Üî Œº t ‚â§ Œº s + Œµ :=
  ‚ü®fun h => compl_compl s ‚ñ∏ compl_compl t ‚ñ∏ measure_compl_le_add_of_le_add hs.compl ht.compl h,
    measure_compl_le_add_of_le_add ht hs‚ü©
#align measure_theory.measure_compl_le_add_iff MeasureTheory.measure_compl_le_add_iff

/-- The measure of the whole space with respect to a finite measure, considered as `‚Ñù‚â•0`. -/
def measureUnivNNReal (Œº : Measure Œ±) : ‚Ñù‚â•0 :=
  (Œº univ).toNNReal
#align measure_theory.measure_univ_nnreal MeasureTheory.measureUnivNNReal

@[simp]
theorem coe_measureUnivNNReal (Œº : Measure Œ±) [IsFiniteMeasure Œº] :
    ‚Üë(measureUnivNNReal Œº) = Œº univ :=
  ENNReal.coe_toNNReal (measure_ne_top Œº univ)
#align measure_theory.coe_measure_univ_nnreal MeasureTheory.coe_measureUnivNNReal

instance isFiniteMeasureZero : IsFiniteMeasure (0 : Measure Œ±) :=
  ‚ü®by simp‚ü©
#align measure_theory.is_finite_measure_zero MeasureTheory.isFiniteMeasureZero

instance (priority := 50) isFiniteMeasureOfIsEmpty [IsEmpty Œ±] : IsFiniteMeasure Œº := by
  rw [eq_zero_of_isEmpty Œº]
  infer_instance
#align measure_theory.is_finite_measure_of_is_empty MeasureTheory.isFiniteMeasureOfIsEmpty

@[simp]
theorem measureUnivNNReal_zero : measureUnivNNReal (0 : Measure Œ±) = 0 :=
  rfl
#align measure_theory.measure_univ_nnreal_zero MeasureTheory.measureUnivNNReal_zero

instance isFiniteMeasureAdd [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] : IsFiniteMeasure (Œº + ŒΩ) where
  measure_univ_lt_top := by
    rw [Measure.coe_add, Pi.add_apply, ENNReal.add_lt_top]
    exact ‚ü®measure_lt_top _ _, measure_lt_top _ _‚ü©
#align measure_theory.is_finite_measure_add MeasureTheory.isFiniteMeasureAdd

instance isFiniteMeasureSMulNNReal [IsFiniteMeasure Œº] {r : ‚Ñù‚â•0} : IsFiniteMeasure (r ‚Ä¢ Œº) where
  measure_univ_lt_top := ENNReal.mul_lt_top ENNReal.coe_ne_top (measure_ne_top _ _)
#align measure_theory.is_finite_measure_smul_nnreal MeasureTheory.isFiniteMeasureSMulNNReal

instance IsFiniteMeasure.average : IsFiniteMeasure ((Œº univ)‚Åª¬π ‚Ä¢ Œº) where
  measure_univ_lt_top := by
    rw [smul_apply, smul_eq_mul, ‚Üê ENNReal.div_eq_inv_mul]
    exact ENNReal.div_self_le_one.trans_lt ENNReal.one_lt_top

instance isFiniteMeasureSMulOfNNRealTower {R} [SMul R ‚Ñù‚â•0] [SMul R ‚Ñù‚â•0‚àû] [IsScalarTower R ‚Ñù‚â•0 ‚Ñù‚â•0‚àû]
    [IsScalarTower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû] [IsFiniteMeasure Œº] {r : R} : IsFiniteMeasure (r ‚Ä¢ Œº) := by
  rw [‚Üê smul_one_smul ‚Ñù‚â•0 r Œº]
  infer_instance
#align measure_theory.is_finite_measure_smul_of_nnreal_tower MeasureTheory.isFiniteMeasureSMulOfNNRealTower

theorem isFiniteMeasure_of_le (Œº : Measure Œ±) [IsFiniteMeasure Œº] (h : ŒΩ ‚â§ Œº) : IsFiniteMeasure ŒΩ :=
  { measure_univ_lt_top := lt_of_le_of_lt (h Set.univ MeasurableSet.univ) (measure_lt_top _ _) }
#align measure_theory.is_finite_measure_of_le MeasureTheory.isFiniteMeasure_of_le

@[instance]
theorem Measure.isFiniteMeasure_map {m : MeasurableSpace Œ±} (Œº : Measure Œ±) [IsFiniteMeasure Œº]
    (f : Œ± ‚Üí Œ≤) : IsFiniteMeasure (Œº.map f) := by
  by_cases hf : AEMeasurable f Œº
  ¬∑ constructor
    rw [map_apply_of_aemeasurable hf MeasurableSet.univ]
    exact measure_lt_top Œº _
  ¬∑ rw [map_of_not_aemeasurable hf]
    exact MeasureTheory.isFiniteMeasureZero
#align measure_theory.measure.is_finite_measure_map MeasureTheory.Measure.isFiniteMeasure_map

@[simp]
theorem measureUnivNNReal_eq_zero [IsFiniteMeasure Œº] : measureUnivNNReal Œº = 0 ‚Üî Œº = 0 := by
  rw [‚Üê MeasureTheory.Measure.measure_univ_eq_zero, ‚Üê coe_measureUnivNNReal]
  norm_cast
#align measure_theory.measure_univ_nnreal_eq_zero MeasureTheory.measureUnivNNReal_eq_zero

theorem measureUnivNNReal_pos [IsFiniteMeasure Œº] (hŒº : Œº ‚â† 0) : 0 < measureUnivNNReal Œº := by
  contrapose! hŒº
  simpa [measureUnivNNReal_eq_zero, le_zero_iff] using hŒº
#align measure_theory.measure_univ_nnreal_pos MeasureTheory.measureUnivNNReal_pos

/-- `le_of_add_le_add_left` is normally applicable to `OrderedCancelAddCommMonoid`,
but it holds for measures with the additional assumption that Œº is finite. -/
theorem Measure.le_of_add_le_add_left [IsFiniteMeasure Œº] (A2 : Œº + ŒΩ‚ÇÅ ‚â§ Œº + ŒΩ‚ÇÇ) : ŒΩ‚ÇÅ ‚â§ ŒΩ‚ÇÇ :=
  fun S B1 => ENNReal.le_of_add_le_add_left (MeasureTheory.measure_ne_top Œº S) (A2 S B1)
#align measure_theory.measure.le_of_add_le_add_left MeasureTheory.Measure.le_of_add_le_add_left

theorem summable_measure_toReal [hŒº : IsFiniteMeasure Œº] {f : ‚Ñï ‚Üí Set Œ±}
    (hf‚ÇÅ : ‚àÄ i : ‚Ñï, MeasurableSet (f i)) (hf‚ÇÇ : Pairwise (Disjoint on f)) :
    Summable fun x => (Œº (f x)).toReal := by
  apply ENNReal.summable_toReal
  rw [‚Üê MeasureTheory.measure_iUnion hf‚ÇÇ hf‚ÇÅ]
  exact ne_of_lt (measure_lt_top _ _)
#align measure_theory.summable_measure_to_real MeasureTheory.summable_measure_toReal

theorem ae_eq_univ_iff_measure_eq [IsFiniteMeasure Œº] (hs : NullMeasurableSet s Œº) :
    s =·µê[Œº] univ ‚Üî Œº s = Œº univ := by
  refine' ‚ü®measure_congr, fun h => _‚ü©
  obtain ‚ü®t, -, ht‚ÇÅ, ht‚ÇÇ‚ü© := hs.exists_measurable_subset_ae_eq
  exact
    ht‚ÇÇ.symm.trans
      (ae_eq_of_subset_of_measure_ge (subset_univ t) (Eq.le ((measure_congr ht‚ÇÇ).trans h).symm) ht‚ÇÅ
        (measure_ne_top Œº univ))
#align measure_theory.ae_eq_univ_iff_measure_eq MeasureTheory.ae_eq_univ_iff_measure_eq

theorem ae_iff_measure_eq [IsFiniteMeasure Œº] {p : Œ± ‚Üí Prop}
    (hp : NullMeasurableSet { a | p a } Œº) : (‚àÄ·µê a ‚àÇŒº, p a) ‚Üî Œº { a | p a } = Œº univ := by
  rw [‚Üê ae_eq_univ_iff_measure_eq hp, eventuallyEq_univ, eventually_iff]
#align measure_theory.ae_iff_measure_eq MeasureTheory.ae_iff_measure_eq

theorem ae_mem_iff_measure_eq [IsFiniteMeasure Œº] {s : Set Œ±} (hs : NullMeasurableSet s Œº) :
    (‚àÄ·µê a ‚àÇŒº, a ‚àà s) ‚Üî Œº s = Œº univ :=
  ae_iff_measure_eq hs
#align measure_theory.ae_mem_iff_measure_eq MeasureTheory.ae_mem_iff_measure_eq

theorem abs_toReal_measure_sub_le_measure_symmDiff'
    (hs : MeasurableSet s) (ht : MeasurableSet t) (hs' : Œº s ‚â† ‚àû) (ht' : Œº t ‚â† ‚àû) :
    |(Œº s).toReal - (Œº t).toReal| ‚â§ (Œº (s ‚àÜ t)).toReal := by
  have hst : Œº (s \ t) ‚â† ‚àû := (measure_lt_top_of_subset (diff_subset s t) hs').ne
  have hts : Œº (t \ s) ‚â† ‚àû := (measure_lt_top_of_subset (diff_subset t s) ht').ne
  suffices : (Œº s).toReal - (Œº t).toReal = (Œº (s \ t)).toReal - (Œº (t \ s)).toReal
  ¬∑ rw [this, measure_symmDiff_eq hs ht, ENNReal.toReal_add hst hts]
    convert abs_sub (Œº (s \ t)).toReal (Œº (t \ s)).toReal <;> simp
  rw [measure_diff' s ht ht', measure_diff' t hs hs',
    ENNReal.toReal_sub_of_le measure_le_measure_union_right (measure_union_ne_top hs' ht'),
    ENNReal.toReal_sub_of_le measure_le_measure_union_right (measure_union_ne_top ht' hs'),
    union_comm t s]
  abel

theorem abs_toReal_measure_sub_le_measure_symmDiff [IsFiniteMeasure Œº]
    (hs : MeasurableSet s) (ht : MeasurableSet t) :
    |(Œº s).toReal - (Œº t).toReal| ‚â§ (Œº (s ‚àÜ t)).toReal :=
  abs_toReal_measure_sub_le_measure_symmDiff' hs ht (measure_ne_top Œº s) (measure_ne_top Œº t)

end IsFiniteMeasure

section IsProbabilityMeasure

/-- A measure `Œº` is called a probability measure if `Œº univ = 1`. -/
class IsProbabilityMeasure (Œº : Measure Œ±) : Prop where
  measure_univ : Œº univ = 1
#align measure_theory.is_probability_measure MeasureTheory.IsProbabilityMeasure
#align measure_theory.is_probability_measure.measure_univ MeasureTheory.IsProbabilityMeasure.measure_univ

export MeasureTheory.IsProbabilityMeasure (measure_univ)

attribute [simp] IsProbabilityMeasure.measure_univ

instance (priority := 100) IsProbabilityMeasure.toIsFiniteMeasure (Œº : Measure Œ±)
    [IsProbabilityMeasure Œº] : IsFiniteMeasure Œº :=
  ‚ü®by simp only [measure_univ, ENNReal.one_lt_top]‚ü©
#align measure_theory.is_probability_measure.to_is_finite_measure MeasureTheory.IsProbabilityMeasure.toIsFiniteMeasure

theorem IsProbabilityMeasure.ne_zero (Œº : Measure Œ±) [IsProbabilityMeasure Œº] : Œº ‚â† 0 :=
  mt measure_univ_eq_zero.2 <| by simp [measure_univ]
#align measure_theory.is_probability_measure.ne_zero MeasureTheory.IsProbabilityMeasure.ne_zero

instance (priority := 100) IsProbabilityMeasure.neZero (Œº : Measure Œ±) [IsProbabilityMeasure Œº] :
    NeZero Œº := ‚ü®IsProbabilityMeasure.ne_zero Œº‚ü©

-- Porting note: no longer an `instance` because `inferInstance` can find it now
theorem IsProbabilityMeasure.ae_neBot [IsProbabilityMeasure Œº] : NeBot Œº.ae := inferInstance
#align measure_theory.is_probability_measure.ae_ne_bot MeasureTheory.IsProbabilityMeasure.ae_neBot

theorem prob_add_prob_compl [IsProbabilityMeasure Œº] (h : MeasurableSet s) : Œº s + Œº s·∂ú = 1 :=
  (measure_add_measure_compl h).trans measure_univ
#align measure_theory.prob_add_prob_compl MeasureTheory.prob_add_prob_compl

theorem prob_le_one [IsProbabilityMeasure Œº] : Œº s ‚â§ 1 :=
  (measure_mono <| Set.subset_univ _).trans_eq measure_univ
#align measure_theory.prob_le_one MeasureTheory.prob_le_one

-- porting note: made an `instance`, using `NeZero`
instance isProbabilityMeasureSMul [IsFiniteMeasure Œº] [NeZero Œº] :
    IsProbabilityMeasure ((Œº univ)‚Åª¬π ‚Ä¢ Œº) :=
  ‚ü®ENNReal.inv_mul_cancel (NeZero.ne (Œº univ)) (measure_ne_top _ _)‚ü©
#align measure_theory.is_probability_measure_smul MeasureTheory.isProbabilityMeasureSMul‚Çì

theorem isProbabilityMeasure_map [IsProbabilityMeasure Œº] {f : Œ± ‚Üí Œ≤} (hf : AEMeasurable f Œº) :
    IsProbabilityMeasure (map f Œº) :=
  ‚ü®by simp [map_apply_of_aemeasurable, hf]‚ü©
#align measure_theory.is_probability_measure_map MeasureTheory.isProbabilityMeasure_map

@[simp]
theorem one_le_prob_iff [IsProbabilityMeasure Œº] : 1 ‚â§ Œº s ‚Üî Œº s = 1 :=
  ‚ü®fun h => le_antisymm prob_le_one h, fun h => h ‚ñ∏ le_refl _‚ü©
#align measure_theory.one_le_prob_iff MeasureTheory.one_le_prob_iff

/-- Note that this is not quite as useful as it looks because the measure takes values in `‚Ñù‚â•0‚àû`.
Thus the subtraction appearing is the truncated subtraction of `‚Ñù‚â•0‚àû`, rather than the
better-behaved subtraction of `‚Ñù`. -/
theorem prob_compl_eq_one_sub [IsProbabilityMeasure Œº] (hs : MeasurableSet s) : Œº s·∂ú = 1 - Œº s :=
  by simpa only [measure_univ] using measure_compl hs (measure_lt_top Œº s).ne
#align measure_theory.prob_compl_eq_one_sub MeasureTheory.prob_compl_eq_one_sub

@[simp]
theorem prob_compl_eq_zero_iff [IsProbabilityMeasure Œº] (hs : MeasurableSet s) :
    Œº s·∂ú = 0 ‚Üî Œº s = 1 := by
  rw [prob_compl_eq_one_sub hs, tsub_eq_zero_iff_le, one_le_prob_iff]
#align measure_theory.prob_compl_eq_zero_iff MeasureTheory.prob_compl_eq_zero_iff

@[simp]
theorem prob_compl_eq_one_iff [IsProbabilityMeasure Œº] (hs : MeasurableSet s) :
    Œº s·∂ú = 1 ‚Üî Œº s = 0 := by rw [‚Üê prob_compl_eq_zero_iff hs.compl, compl_compl]
#align measure_theory.prob_compl_eq_one_iff MeasureTheory.prob_compl_eq_one_iff

end IsProbabilityMeasure

section NoAtoms

/-- Measure `Œº` *has no atoms* if the measure of each singleton is zero.

NB: Wikipedia assumes that for any measurable set `s` with positive `Œº`-measure,
there exists a measurable `t ‚äÜ s` such that `0 < Œº t < Œº s`. While this implies `Œº {x} = 0`,
the converse is not true. -/
class NoAtoms {m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) : Prop where
  measure_singleton : ‚àÄ x, Œº {x} = 0
#align measure_theory.has_no_atoms MeasureTheory.NoAtoms
#align measure_theory.has_no_atoms.measure_singleton MeasureTheory.NoAtoms.measure_singleton

export MeasureTheory.NoAtoms (measure_singleton)

attribute [simp] measure_singleton

variable [NoAtoms Œº]

theorem _root_.Set.Subsingleton.measure_zero (hs : s.Subsingleton) (Œº : Measure Œ±) [NoAtoms Œº] :
    Œº s = 0 :=
  hs.induction_on (p := fun s => Œº s = 0) measure_empty measure_singleton
#align set.subsingleton.measure_zero Set.Subsingleton.measure_zero

theorem Measure.restrict_singleton' {a : Œ±} : Œº.restrict {a} = 0 := by
  simp only [measure_singleton, Measure.restrict_eq_zero]
#align measure_theory.measure.restrict_singleton' MeasureTheory.Measure.restrict_singleton'

instance Measure.restrict.instNoAtoms (s : Set Œ±) : NoAtoms (Œº.restrict s) := by
  refine' ‚ü®fun x => _‚ü©
  obtain ‚ü®t, hxt, ht1, ht2‚ü© := exists_measurable_superset_of_null (measure_singleton x : Œº {x} = 0)
  apply measure_mono_null hxt
  rw [Measure.restrict_apply ht1]
  apply measure_mono_null (inter_subset_left t s) ht2
#align measure_theory.measure.restrict.has_no_atoms MeasureTheory.Measure.restrict.instNoAtoms

theorem _root_.Set.Countable.measure_zero (h : s.Countable) (Œº : Measure Œ±) [NoAtoms Œº] :
    Œº s = 0 := by
  rw [‚Üê biUnion_of_singleton s, ‚Üê nonpos_iff_eq_zero]
  refine' le_trans (measure_biUnion_le h _) _
  simp
#align set.countable.measure_zero Set.Countable.measure_zero

theorem _root_.Set.Countable.ae_not_mem (h : s.Countable) (Œº : Measure Œ±) [NoAtoms Œº] :
    ‚àÄ·µê x ‚àÇŒº, x ‚àâ s := by
  simpa only [ae_iff, Classical.not_not] using h.measure_zero Œº
#align set.countable.ae_not_mem Set.Countable.ae_not_mem

lemma _root_.Set.Countable.measure_restrict_compl (h : s.Countable) (Œº : Measure Œ±) [NoAtoms Œº] :
    Œº.restrict s·∂ú = Œº :=
  restrict_eq_self_of_ae_mem <| h.ae_not_mem Œº

@[simp]
lemma restrict_compl_singleton (a : Œ±) : Œº.restrict ({a}·∂ú) = Œº :=
  (countable_singleton _).measure_restrict_compl Œº

theorem _root_.Set.Finite.measure_zero (h : s.Finite) (Œº : Measure Œ±) [NoAtoms Œº] : Œº s = 0 :=
  h.countable.measure_zero Œº
#align set.finite.measure_zero Set.Finite.measure_zero

theorem _root_.Finset.measure_zero (s : Finset Œ±) (Œº : Measure Œ±) [NoAtoms Œº] : Œº s = 0 :=
  s.finite_toSet.measure_zero Œº
#align finset.measure_zero Finset.measure_zero

theorem insert_ae_eq_self (a : Œ±) (s : Set Œ±) : (insert a s : Set Œ±) =·µê[Œº] s :=
  union_ae_eq_right.2 <| measure_mono_null (diff_subset _ _) (measure_singleton _)
#align measure_theory.insert_ae_eq_self MeasureTheory.insert_ae_eq_self

section

variable [PartialOrder Œ±] {a b : Œ±}

theorem Iio_ae_eq_Iic : Iio a =·µê[Œº] Iic a :=
  Iio_ae_eq_Iic' (measure_singleton a)
#align measure_theory.Iio_ae_eq_Iic MeasureTheory.Iio_ae_eq_Iic

theorem Ioi_ae_eq_Ici : Ioi a =·µê[Œº] Ici a :=
  Ioi_ae_eq_Ici' (measure_singleton a)
#align measure_theory.Ioi_ae_eq_Ici MeasureTheory.Ioi_ae_eq_Ici

theorem Ioo_ae_eq_Ioc : Ioo a b =·µê[Œº] Ioc a b :=
  Ioo_ae_eq_Ioc' (measure_singleton b)
#align measure_theory.Ioo_ae_eq_Ioc MeasureTheory.Ioo_ae_eq_Ioc

theorem Ioc_ae_eq_Icc : Ioc a b =·µê[Œº] Icc a b :=
  Ioc_ae_eq_Icc' (measure_singleton a)
#align measure_theory.Ioc_ae_eq_Icc MeasureTheory.Ioc_ae_eq_Icc

theorem Ioo_ae_eq_Ico : Ioo a b =·µê[Œº] Ico a b :=
  Ioo_ae_eq_Ico' (measure_singleton a)
#align measure_theory.Ioo_ae_eq_Ico MeasureTheory.Ioo_ae_eq_Ico

theorem Ioo_ae_eq_Icc : Ioo a b =·µê[Œº] Icc a b :=
  Ioo_ae_eq_Icc' (measure_singleton a) (measure_singleton b)
#align measure_theory.Ioo_ae_eq_Icc MeasureTheory.Ioo_ae_eq_Icc

theorem Ico_ae_eq_Icc : Ico a b =·µê[Œº] Icc a b :=
  Ico_ae_eq_Icc' (measure_singleton b)
#align measure_theory.Ico_ae_eq_Icc MeasureTheory.Ico_ae_eq_Icc

theorem Ico_ae_eq_Ioc : Ico a b =·µê[Œº] Ioc a b :=
  Ico_ae_eq_Ioc' (measure_singleton a) (measure_singleton b)
#align measure_theory.Ico_ae_eq_Ioc MeasureTheory.Ico_ae_eq_Ioc

theorem restrict_Iio_eq_restrict_Iic : Œº.restrict (Iio a) = Œº.restrict (Iic a) :=
  restrict_congr_set Iio_ae_eq_Iic

theorem restrict_Ioi_eq_restrict_Ici : Œº.restrict (Ioi a) = Œº.restrict (Ici a) :=
  restrict_congr_set Ioi_ae_eq_Ici

theorem restrict_Ioo_eq_restrict_Ioc : Œº.restrict (Ioo a b) = Œº.restrict (Ioc a b) :=
  restrict_congr_set Ioo_ae_eq_Ioc

theorem restrict_Ioc_eq_restrict_Icc : Œº.restrict (Ioc a b) = Œº.restrict (Icc a b) :=
  restrict_congr_set Ioc_ae_eq_Icc

theorem restrict_Ioo_eq_restrict_Ico : Œº.restrict (Ioo a b) = Œº.restrict (Ico a b) :=
  restrict_congr_set Ioo_ae_eq_Ico

theorem restrict_Ioo_eq_restrict_Icc : Œº.restrict (Ioo a b) = Œº.restrict (Icc a b) :=
  restrict_congr_set Ioo_ae_eq_Icc

theorem restrict_Ico_eq_restrict_Icc : Œº.restrict (Ico a b) = Œº.restrict (Icc a b) :=
  restrict_congr_set Ico_ae_eq_Icc

theorem restrict_Ico_eq_restrict_Ioc : Œº.restrict (Ico a b) = Œº.restrict (Ioc a b) :=
  restrict_congr_set Ico_ae_eq_Ioc

end

open Interval

theorem uIoc_ae_eq_interval [LinearOrder Œ±] {a b : Œ±} : Œô a b =·µê[Œº] [[a, b]] :=
  Ioc_ae_eq_Icc
#align measure_theory.uIoc_ae_eq_interval MeasureTheory.uIoc_ae_eq_interval

end NoAtoms

theorem ite_ae_eq_of_measure_zero {Œ≥} (f : Œ± ‚Üí Œ≥) (g : Œ± ‚Üí Œ≥) (s : Set Œ±) [DecidablePred (¬∑ ‚àà s)]
    (hs_zero : Œº s = 0) :
    (fun x => ite (x ‚àà s) (f x) (g x)) =·µê[Œº] g := by
  have h_ss : s·∂ú ‚äÜ { a : Œ± | ite (a ‚àà s) (f a) (g a) = g a } := fun x hx => by
    simp [(Set.mem_compl_iff _ _).mp hx]
  refine' measure_mono_null _ hs_zero
  conv_rhs => rw [‚Üê compl_compl s]
  rwa [Set.compl_subset_compl]
#align measure_theory.ite_ae_eq_of_measure_zero MeasureTheory.ite_ae_eq_of_measure_zero

theorem ite_ae_eq_of_measure_compl_zero {Œ≥} (f : Œ± ‚Üí Œ≥) (g : Œ± ‚Üí Œ≥)
    (s : Set Œ±) [DecidablePred (¬∑ ‚àà s)] (hs_zero : Œº s·∂ú = 0) :
    (fun x => ite (x ‚àà s) (f x) (g x)) =·µê[Œº] f := by
  change s ‚àà Œº.ae at hs_zero
  filter_upwards [hs_zero]
  intros
  split_ifs
  rfl
#align measure_theory.ite_ae_eq_of_measure_compl_zero MeasureTheory.ite_ae_eq_of_measure_compl_zero

namespace Measure

/-- A measure is called finite at filter `f` if it is finite at some set `s ‚àà f`.
Equivalently, it is eventually finite at `s` in `f.small_sets`. -/
def FiniteAtFilter {_m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) (f : Filter Œ±) : Prop :=
  ‚àÉ s ‚àà f, Œº s < ‚àû
#align measure_theory.measure.finite_at_filter MeasureTheory.Measure.FiniteAtFilter

theorem finiteAtFilter_of_finite {_m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) [IsFiniteMeasure Œº]
    (f : Filter Œ±) : Œº.FiniteAtFilter f :=
  ‚ü®univ, univ_mem, measure_lt_top Œº univ‚ü©
#align measure_theory.measure.finite_at_filter_of_finite MeasureTheory.Measure.finiteAtFilter_of_finite

theorem FiniteAtFilter.exists_mem_basis {f : Filter Œ±} (hŒº : FiniteAtFilter Œº f) {p : Œπ ‚Üí Prop}
    {s : Œπ ‚Üí Set Œ±} (hf : f.HasBasis p s) : ‚àÉ i, p i ‚àß Œº (s i) < ‚àû :=
  (hf.exists_iff fun {_s _t} hst ht => (measure_mono hst).trans_lt ht).1 hŒº
#align measure_theory.measure.finite_at_filter.exists_mem_basis MeasureTheory.Measure.FiniteAtFilter.exists_mem_basis

theorem finiteAtBot {m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) : Œº.FiniteAtFilter ‚ä• :=
  ‚ü®‚àÖ, mem_bot, by simp only [OuterMeasure.empty', zero_lt_top]‚ü©
#align measure_theory.measure.finite_at_bot MeasureTheory.Measure.finiteAtBot

/-- `Œº` has finite spanning sets in `C` if there is a countable sequence of sets in `C` that have
  finite measures. This structure is a type, which is useful if we want to record extra properties
  about the sets, such as that they are monotone.
  `SigmaFinite` is defined in terms of this: `Œº` is œÉ-finite if there exists a sequence of
  finite spanning sets in the collection of all measurable sets. -/
-- @[nolint has_nonempty_instance] -- Porting note: deleted
structure FiniteSpanningSetsIn {m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) (C : Set (Set Œ±)) where
  protected set : ‚Ñï ‚Üí Set Œ±
  protected set_mem : ‚àÄ i, set i ‚àà C
  protected finite : ‚àÄ i, Œº (set i) < ‚àû
  protected spanning : ‚ãÉ i, set i = univ
#align measure_theory.measure.finite_spanning_sets_in MeasureTheory.Measure.FiniteSpanningSetsIn
#align measure_theory.measure.finite_spanning_sets_in.set MeasureTheory.Measure.FiniteSpanningSetsIn.set
#align measure_theory.measure.finite_spanning_sets_in.set_mem MeasureTheory.Measure.FiniteSpanningSetsIn.set_mem
#align measure_theory.measure.finite_spanning_sets_in.finite MeasureTheory.Measure.FiniteSpanningSetsIn.finite
#align measure_theory.measure.finite_spanning_sets_in.spanning MeasureTheory.Measure.FiniteSpanningSetsIn.spanning

end Measure

open Measure

section SFinite

/-- A measure is called s-finite if it is a countable sum of finite measures. -/
class SFinite (Œº : Measure Œ±) : Prop where
  out' : ‚àÉ m : ‚Ñï ‚Üí Measure Œ±, (‚àÄ n, IsFiniteMeasure (m n)) ‚àß Œº = Measure.sum m

/-- A sequence of finite measures such that `Œº = sum (sFiniteSeq Œº)` (see `sum_sFiniteSeq`). -/
noncomputable
def sFiniteSeq (Œº : Measure Œ±) [h : SFinite Œº] : ‚Ñï ‚Üí Measure Œ± := h.1.choose

instance isFiniteMeasure_sFiniteSeq [h : SFinite Œº] (n : ‚Ñï) : IsFiniteMeasure (sFiniteSeq Œº n) :=
  h.1.choose_spec.1 n

lemma sum_sFiniteSeq (Œº : Measure Œ±) [h : SFinite Œº] : sum (sFiniteSeq Œº) = Œº :=
  h.1.choose_spec.2.symm

end SFinite
/-- A measure `Œº` is called œÉ-finite if there is a countable collection of sets
 `{ A i | i ‚àà ‚Ñï }` such that `Œº (A i) < ‚àû` and `‚ãÉ i, A i = s`. -/
class SigmaFinite {m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) : Prop where
  out' : Nonempty (Œº.FiniteSpanningSetsIn univ)
#align measure_theory.sigma_finite MeasureTheory.SigmaFinite
#align measure_theory.sigma_finite.out' MeasureTheory.SigmaFinite.out'

theorem sigmaFinite_iff : SigmaFinite Œº ‚Üî Nonempty (Œº.FiniteSpanningSetsIn univ) :=
  ‚ü®fun h => h.1, fun h => ‚ü®h‚ü©‚ü©
#align measure_theory.sigma_finite_iff MeasureTheory.sigmaFinite_iff

theorem SigmaFinite.out (h : SigmaFinite Œº) : Nonempty (Œº.FiniteSpanningSetsIn univ) :=
  h.1
#align measure_theory.sigma_finite.out MeasureTheory.SigmaFinite.out

/-- If `Œº` is œÉ-finite it has finite spanning sets in the collection of all measurable sets. -/
def Measure.toFiniteSpanningSetsIn (Œº : Measure Œ±) [h : SigmaFinite Œº] :
    Œº.FiniteSpanningSetsIn { s | MeasurableSet s } where
  set n := toMeasurable Œº (h.out.some.set n)
  set_mem n := measurableSet_toMeasurable _ _
  finite n := by
    rw [measure_toMeasurable]
    exact h.out.some.finite n
  spanning := eq_univ_of_subset (iUnion_mono fun n => subset_toMeasurable _ _) h.out.some.spanning
#align measure_theory.measure.to_finite_spanning_sets_in MeasureTheory.Measure.toFiniteSpanningSetsIn

/-- A noncomputable way to get a monotone collection of sets that span `univ` and have finite
  measure using `Classical.choose`. This definition satisfies monotonicity in addition to all other
  properties in `SigmaFinite`. -/
def spanningSets (Œº : Measure Œ±) [SigmaFinite Œº] (i : ‚Ñï) : Set Œ± :=
  Accumulate Œº.toFiniteSpanningSetsIn.set i
#align measure_theory.spanning_sets MeasureTheory.spanningSets

theorem monotone_spanningSets (Œº : Measure Œ±) [SigmaFinite Œº] : Monotone (spanningSets Œº) :=
  monotone_accumulate
#align measure_theory.monotone_spanning_sets MeasureTheory.monotone_spanningSets

theorem measurable_spanningSets (Œº : Measure Œ±) [SigmaFinite Œº] (i : ‚Ñï) :
    MeasurableSet (spanningSets Œº i) :=
  MeasurableSet.iUnion fun j => MeasurableSet.iUnion fun _ => Œº.toFiniteSpanningSetsIn.set_mem j
#align measure_theory.measurable_spanning_sets MeasureTheory.measurable_spanningSets

theorem measure_spanningSets_lt_top (Œº : Measure Œ±) [SigmaFinite Œº] (i : ‚Ñï) :
    Œº (spanningSets Œº i) < ‚àû :=
  measure_biUnion_lt_top (finite_le_nat i) fun j _ => (Œº.toFiniteSpanningSetsIn.finite j).ne
#align measure_theory.measure_spanning_sets_lt_top MeasureTheory.measure_spanningSets_lt_top

theorem iUnion_spanningSets (Œº : Measure Œ±) [SigmaFinite Œº] : ‚ãÉ i : ‚Ñï, spanningSets Œº i = univ :=
  by simp_rw [spanningSets, iUnion_accumulate, Œº.toFiniteSpanningSetsIn.spanning]
#align measure_theory.Union_spanning_sets MeasureTheory.iUnion_spanningSets

theorem isCountablySpanning_spanningSets (Œº : Measure Œ±) [SigmaFinite Œº] :
    IsCountablySpanning (range (spanningSets Œº)) :=
  ‚ü®spanningSets Œº, mem_range_self, iUnion_spanningSets Œº‚ü©
#align measure_theory.is_countably_spanning_spanning_sets MeasureTheory.isCountablySpanning_spanningSets

open Classical in
/-- `spanningSetsIndex Œº x` is the least `n : ‚Ñï` such that `x ‚àà spanningSets Œº n`. -/
noncomputable def spanningSetsIndex (Œº : Measure Œ±) [SigmaFinite Œº] (x : Œ±) : ‚Ñï :=
  Nat.find <| iUnion_eq_univ_iff.1 (iUnion_spanningSets Œº) x
#align measure_theory.spanning_sets_index MeasureTheory.spanningSetsIndex

open Classical in
theorem measurable_spanningSetsIndex (Œº : Measure Œ±) [SigmaFinite Œº] :
    Measurable (spanningSetsIndex Œº) :=
  measurable_find _ <| measurable_spanningSets Œº
#align measure_theory.measurable_spanning_sets_index MeasureTheory.measurable_spanningSetsIndex

open Classical in
theorem preimage_spanningSetsIndex_singleton (Œº : Measure Œ±) [SigmaFinite Œº] (n : ‚Ñï) :
    spanningSetsIndex Œº ‚Åª¬π' {n} = disjointed (spanningSets Œº) n :=
  preimage_find_eq_disjointed _ _ _
#align measure_theory.preimage_spanning_sets_index_singleton MeasureTheory.preimage_spanningSetsIndex_singleton

theorem spanningSetsIndex_eq_iff (Œº : Measure Œ±) [SigmaFinite Œº] {x : Œ±} {n : ‚Ñï} :
    spanningSetsIndex Œº x = n ‚Üî x ‚àà disjointed (spanningSets Œº) n := by
  convert Set.ext_iff.1 (preimage_spanningSetsIndex_singleton Œº n) x
#align measure_theory.spanning_sets_index_eq_iff MeasureTheory.spanningSetsIndex_eq_iff

theorem mem_disjointed_spanningSetsIndex (Œº : Measure Œ±) [SigmaFinite Œº] (x : Œ±) :
    x ‚àà disjointed (spanningSets Œº) (spanningSetsIndex Œº x) :=
  (spanningSetsIndex_eq_iff Œº).1 rfl
#align measure_theory.mem_disjointed_spanning_sets_index MeasureTheory.mem_disjointed_spanningSetsIndex

theorem mem_spanningSetsIndex (Œº : Measure Œ±) [SigmaFinite Œº] (x : Œ±) :
    x ‚àà spanningSets Œº (spanningSetsIndex Œº x) :=
  disjointed_subset _ _ (mem_disjointed_spanningSetsIndex Œº x)
#align measure_theory.mem_spanning_sets_index MeasureTheory.mem_spanningSetsIndex

theorem mem_spanningSets_of_index_le (Œº : Measure Œ±) [SigmaFinite Œº] (x : Œ±) {n : ‚Ñï}
    (hn : spanningSetsIndex Œº x ‚â§ n) : x ‚àà spanningSets Œº n :=
  monotone_spanningSets Œº hn (mem_spanningSetsIndex Œº x)
#align measure_theory.mem_spanning_sets_of_index_le MeasureTheory.mem_spanningSets_of_index_le

theorem eventually_mem_spanningSets (Œº : Measure Œ±) [SigmaFinite Œº] (x : Œ±) :
    ‚àÄ·∂† n in atTop, x ‚àà spanningSets Œº n :=
  eventually_atTop.2 ‚ü®spanningSetsIndex Œº x, fun _ => mem_spanningSets_of_index_le Œº x‚ü©
#align measure_theory.eventually_mem_spanning_sets MeasureTheory.eventually_mem_spanningSets

theorem sum_restrict_disjointed_spanningSets (Œº : Measure Œ±) [SigmaFinite Œº] :
    sum (fun n ‚Ü¶ Œº.restrict (disjointed (spanningSets Œº) n)) = Œº := by
  rw [‚Üê restrict_iUnion (disjoint_disjointed _)
      (MeasurableSet.disjointed (measurable_spanningSets _)),
    iUnion_disjointed, iUnion_spanningSets, restrict_univ]

instance (priority := 100) [SigmaFinite Œº] : SFinite Œº := by
  have : ‚àÄ n, Fact (Œº (disjointed (spanningSets Œº) n) < ‚àû) :=
    fun n ‚Ü¶ ‚ü®(measure_mono (disjointed_subset _ _)).trans_lt (measure_spanningSets_lt_top Œº n)‚ü©
  exact ‚ü®‚ü®fun n ‚Ü¶ Œº.restrict (disjointed (spanningSets Œº) n), fun n ‚Ü¶ by infer_instance,
    (sum_restrict_disjointed_spanningSets Œº).symm‚ü©‚ü©

namespace Measure

theorem iSup_restrict_spanningSets [SigmaFinite Œº] (hs : MeasurableSet s) :
    ‚®Ü i, Œº.restrict (spanningSets Œº i) s = Œº s :=
  calc
    ‚®Ü i, Œº.restrict (spanningSets Œº i) s = Œº.restrict (‚ãÉ i, spanningSets Œº i) s :=
      (restrict_iUnion_apply_eq_iSup (monotone_spanningSets Œº).directed_le hs).symm
    _ = Œº s := by rw [iUnion_spanningSets, restrict_univ]
#align measure_theory.measure.supr_restrict_spanning_sets MeasureTheory.Measure.iSup_restrict_spanningSets

/-- In a œÉ-finite space, any measurable set of measure `> r` contains a measurable subset of
finite measure `> r`. -/
theorem exists_subset_measure_lt_top [SigmaFinite Œº] {r : ‚Ñù‚â•0‚àû} (hs : MeasurableSet s)
    (h's : r < Œº s) : ‚àÉ t, MeasurableSet t ‚àß t ‚äÜ s ‚àß r < Œº t ‚àß Œº t < ‚àû := by
  rw [‚Üê iSup_restrict_spanningSets hs,
    @lt_iSup_iff _ _ _ r fun i : ‚Ñï => Œº.restrict (spanningSets Œº i) s] at h's
  rcases h's with ‚ü®n, hn‚ü©
  simp only [restrict_apply hs] at hn
  refine'
    ‚ü®s ‚à© spanningSets Œº n, hs.inter (measurable_spanningSets _ _), inter_subset_left _ _, hn, _‚ü©
  exact (measure_mono (inter_subset_right _ _)).trans_lt (measure_spanningSets_lt_top _ _)
#align measure_theory.measure.exists_subset_measure_lt_top MeasureTheory.Measure.exists_subset_measure_lt_top

/-- A set in a œÉ-finite space has zero measure if and only if its intersection with
all members of the countable family of finite measure spanning sets has zero measure. -/
theorem forall_measure_inter_spanningSets_eq_zero [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [SigmaFinite Œº] (s : Set Œ±) : (‚àÄ n, Œº (s ‚à© spanningSets Œº n) = 0) ‚Üî Œº s = 0 := by
  nth_rw 2 [show s = ‚ãÉ n, s ‚à© spanningSets Œº n by
      rw [‚Üê inter_iUnion, iUnion_spanningSets, inter_univ] ]
  rw [measure_iUnion_null_iff]
#align measure_theory.measure.forall_measure_inter_spanning_sets_eq_zero MeasureTheory.Measure.forall_measure_inter_spanningSets_eq_zero

/-- A set in a œÉ-finite space has positive measure if and only if its intersection with
some member of the countable family of finite measure spanning sets has positive measure. -/
theorem exists_measure_inter_spanningSets_pos [MeasurableSpace Œ±] {Œº : Measure Œ±} [SigmaFinite Œº]
    (s : Set Œ±) : (‚àÉ n, 0 < Œº (s ‚à© spanningSets Œº n)) ‚Üî 0 < Œº s := by
  rw [‚Üê not_iff_not]
  simp only [not_exists, not_lt, nonpos_iff_eq_zero]
  exact forall_measure_inter_spanningSets_eq_zero s
#align measure_theory.measure.exists_measure_inter_spanning_sets_pos MeasureTheory.Measure.exists_measure_inter_spanningSets_pos

/-- If the union of a.e.-disjoint null-measurable sets has finite measure, then there are only
finitely many members of the union whose measure exceeds any given positive number. -/
theorem finite_const_le_meas_of_disjoint_iUnion‚ÇÄ {Œπ : Type*} [MeasurableSpace Œ±] (Œº : Measure Œ±)
    {Œµ : ‚Ñù‚â•0‚àû} (Œµ_pos : 0 < Œµ) {As : Œπ ‚Üí Set Œ±} (As_mble : ‚àÄ i : Œπ, NullMeasurableSet (As i) Œº)
    (As_disj : Pairwise (AEDisjoint Œº on As)) (Union_As_finite : Œº (‚ãÉ i, As i) ‚â† ‚àû) :
    Set.Finite { i : Œπ | Œµ ‚â§ Œº (As i) } :=
  ENNReal.finite_const_le_of_tsum_ne_top
    (ne_top_of_le_ne_top Union_As_finite (tsum_meas_le_meas_iUnion_of_disjoint‚ÇÄ Œº As_mble As_disj))
    Œµ_pos.ne'

/-- If the union of disjoint measurable sets has finite measure, then there are only
finitely many members of the union whose measure exceeds any given positive number. -/
theorem finite_const_le_meas_of_disjoint_iUnion {Œπ : Type*} [MeasurableSpace Œ±] (Œº : Measure Œ±)
    {Œµ : ‚Ñù‚â•0‚àû} (Œµ_pos : 0 < Œµ) {As : Œπ ‚Üí Set Œ±} (As_mble : ‚àÄ i : Œπ, MeasurableSet (As i))
    (As_disj : Pairwise (Disjoint on As)) (Union_As_finite : Œº (‚ãÉ i, As i) ‚â† ‚àû) :
    Set.Finite { i : Œπ | Œµ ‚â§ Œº (As i) } :=
  finite_const_le_meas_of_disjoint_iUnion‚ÇÄ Œº Œµ_pos (fun i ‚Ü¶ (As_mble i).nullMeasurableSet)
    (fun _ _ h ‚Ü¶ Disjoint.aedisjoint (As_disj h)) Union_As_finite
#align measure_theory.measure.finite_const_le_meas_of_disjoint_Union MeasureTheory.Measure.finite_const_le_meas_of_disjoint_iUnion

/-- If all elements of an infinite set have measure uniformly separated from zero,
then the set has infinite measure. -/
theorem _root_.Set.Infinite.meas_eq_top [MeasurableSingletonClass Œ±]
    {s : Set Œ±} (hs : s.Infinite) (h' : ‚àÉ Œµ, Œµ ‚â† 0 ‚àß ‚àÄ x ‚àà s, Œµ ‚â§ Œº {x}) : Œº s = ‚àû := top_unique <|
  let ‚ü®Œµ, hne, hŒµ‚ü© := h'; have := hs.to_subtype
  calc
    ‚àû = ‚àë' _ : s, Œµ := (ENNReal.tsum_const_eq_top_of_ne_zero hne).symm
    _ ‚â§ ‚àë' x : s, Œº {x.1} := ENNReal.tsum_le_tsum fun x ‚Ü¶ hŒµ x x.2
    _ ‚â§ Œº (‚ãÉ x : s, {x.1}) := tsum_meas_le_meas_iUnion_of_disjoint _
      (fun _ ‚Ü¶ MeasurableSet.singleton _) fun x y hne ‚Ü¶ by simpa [Subtype.val_inj]
    _ = Œº s := by simp

/-- If the union of a.e.-disjoint null-measurable sets has finite measure, then there are only
countably many members of the union whose measure is positive. -/
theorem countable_meas_pos_of_disjoint_of_meas_iUnion_ne_top‚ÇÄ {Œπ : Type*} {_ : MeasurableSpace Œ±}
    (Œº : Measure Œ±) {As : Œπ ‚Üí Set Œ±} (As_mble : ‚àÄ i : Œπ, NullMeasurableSet (As i) Œº)
    (As_disj : Pairwise (AEDisjoint Œº on As)) (Union_As_finite : Œº (‚ãÉ i, As i) ‚â† ‚àû) :
    Set.Countable { i : Œπ | 0 < Œº (As i) } := by
  set posmeas := { i : Œπ | 0 < Œº (As i) } with posmeas_def
  rcases exists_seq_strictAnti_tendsto' (zero_lt_one : (0 : ‚Ñù‚â•0‚àû) < 1) with
    ‚ü®as, _, as_mem, as_lim‚ü©
  set fairmeas := fun n : ‚Ñï => { i : Œπ | as n ‚â§ Œº (As i) }
  have countable_union : posmeas = ‚ãÉ n, fairmeas n := by
    have fairmeas_eq : ‚àÄ n, fairmeas n = (fun i => Œº (As i)) ‚Åª¬π' Ici (as n) := fun n => by
      simp only []
      rfl
    simpa only [fairmeas_eq, posmeas_def, ‚Üê preimage_iUnion,
      iUnion_Ici_eq_Ioi_of_lt_of_tendsto (0 : ‚Ñù‚â•0‚àû) (fun n => (as_mem n).1) as_lim]
  rw [countable_union]
  refine' countable_iUnion fun n => Finite.countable _
  refine' finite_const_le_meas_of_disjoint_iUnion‚ÇÄ Œº (as_mem n).1 As_mble As_disj Union_As_finite

/-- If the union of disjoint measurable sets has finite measure, then there are only
countably many members of the union whose measure is positive. -/
theorem countable_meas_pos_of_disjoint_of_meas_iUnion_ne_top {Œπ : Type*} {_ : MeasurableSpace Œ±}
    (Œº : Measure Œ±) {As : Œπ ‚Üí Set Œ±} (As_mble : ‚àÄ i : Œπ, MeasurableSet (As i))
    (As_disj : Pairwise (Disjoint on As)) (Union_As_finite : Œº (‚ãÉ i, As i) ‚â† ‚àû) :
    Set.Countable { i : Œπ | 0 < Œº (As i) } :=
  countable_meas_pos_of_disjoint_of_meas_iUnion_ne_top‚ÇÄ Œº (fun i ‚Ü¶ (As_mble i).nullMeasurableSet)
    ((fun _ _ h ‚Ü¶ Disjoint.aedisjoint (As_disj h))) Union_As_finite
#align measure_theory.measure.countable_meas_pos_of_disjoint_of_meas_Union_ne_top MeasureTheory.Measure.countable_meas_pos_of_disjoint_of_meas_iUnion_ne_top

/-- In an s-finite space, among disjoint null-measurable sets, only countably many can have positive
measure. -/
theorem countable_meas_pos_of_disjoint_iUnion‚ÇÄ {Œπ : Type*} { _ : MeasurableSpace Œ±} {Œº : Measure Œ±}
    [SFinite Œº] {As : Œπ ‚Üí Set Œ±} (As_mble : ‚àÄ i : Œπ, NullMeasurableSet (As i) Œº)
    (As_disj : Pairwise (AEDisjoint Œº on As)) :
    Set.Countable { i : Œπ | 0 < Œº (As i) } := by
  rw [‚Üê sum_sFiniteSeq Œº] at As_disj As_mble ‚ä¢
  have obs : { i : Œπ | 0 < sum (sFiniteSeq Œº) (As i) }
      ‚äÜ ‚ãÉ n, { i : Œπ | 0 < sFiniteSeq Œº n (As i) } := by
    intro i hi
    by_contra con
    simp only [mem_iUnion, mem_setOf_eq, not_exists, not_lt, nonpos_iff_eq_zero] at *
    rw [sum_apply‚ÇÄ] at hi
    ¬∑ simp_rw [con] at hi
      simp at hi
    ¬∑ exact As_mble i
  apply Countable.mono obs
  refine countable_iUnion fun n ‚Ü¶ ?_
  apply countable_meas_pos_of_disjoint_of_meas_iUnion_ne_top‚ÇÄ
  ¬∑ exact fun i ‚Ü¶ (As_mble i).mono (le_sum _ _)
  ¬∑ exact fun i j hij ‚Ü¶ AEDisjoint.of_le (As_disj hij) (le_sum _ _)
  ¬∑ exact measure_ne_top _ (‚ãÉ i, As i)

/-- In an s-finite space, among disjoint measurable sets, only countably many can have positive
measure. -/
theorem countable_meas_pos_of_disjoint_iUnion {Œπ : Type*} {_ : MeasurableSpace Œ±} {Œº : Measure Œ±}
    [SFinite Œº] {As : Œπ ‚Üí Set Œ±} (As_mble : ‚àÄ i : Œπ, MeasurableSet (As i))
    (As_disj : Pairwise (Disjoint on As)) : Set.Countable { i : Œπ | 0 < Œº (As i) } :=
  countable_meas_pos_of_disjoint_iUnion‚ÇÄ (fun i ‚Ü¶ (As_mble i).nullMeasurableSet)
    ((fun _ _ h ‚Ü¶ Disjoint.aedisjoint (As_disj h)))
#align measure_theory.measure.countable_meas_pos_of_disjoint_Union MeasureTheory.Measure.countable_meas_pos_of_disjoint_iUnion

theorem countable_meas_level_set_pos‚ÇÄ {Œ± Œ≤ : Type*} {_ : MeasurableSpace Œ±} {Œº : Measure Œ±}
    [SFinite Œº] [MeasurableSpace Œ≤] [MeasurableSingletonClass Œ≤] {g : Œ± ‚Üí Œ≤}
    (g_mble : NullMeasurable g Œº) : Set.Countable { t : Œ≤ | 0 < Œº { a : Œ± | g a = t } } := by
  have level_sets_disjoint : Pairwise (Disjoint on fun t : Œ≤ => { a : Œ± | g a = t }) :=
    fun s t hst => Disjoint.preimage g (disjoint_singleton.mpr hst)
  exact Measure.countable_meas_pos_of_disjoint_iUnion‚ÇÄ
    (fun b => g_mble (‚ÄπMeasurableSingletonClass Œ≤‚Ä∫.measurableSet_singleton b))
    ((fun _ _ h ‚Ü¶ Disjoint.aedisjoint (level_sets_disjoint h)))

theorem countable_meas_level_set_pos {Œ± Œ≤ : Type*} {_ : MeasurableSpace Œ±} {Œº : Measure Œ±}
    [SFinite Œº] [MeasurableSpace Œ≤] [MeasurableSingletonClass Œ≤] {g : Œ± ‚Üí Œ≤}
    (g_mble : Measurable g) : Set.Countable { t : Œ≤ | 0 < Œº { a : Œ± | g a = t } } :=
  countable_meas_level_set_pos‚ÇÄ g_mble.nullMeasurable
#align measure_theory.measure.countable_meas_level_set_pos MeasureTheory.Measure.countable_meas_level_set_pos

/-- If a measure `Œº` is the sum of a countable family `m‚Çô`, and a set `t` has finite measure for
each `m‚Çô`, then its measurable superset `toMeasurable Œº t` (which has the same measure as `t`)
satisfies, for any measurable set `s`, the equality `Œº (toMeasurable Œº t ‚à© s) = Œº (t ‚à© s)`. -/
theorem measure_toMeasurable_inter_of_sum {s : Set Œ±} (hs : MeasurableSet s) {t : Set Œ±}
    {m : ‚Ñï ‚Üí Measure Œ±} (hv : ‚àÄ n, m n t ‚â† ‚àû) (hŒº : Œº = sum m) :
    Œº (toMeasurable Œº t ‚à© s) = Œº (t ‚à© s) := by
  -- we show that there is a measurable superset of `t` satisfying the conclusion for any
  -- measurable set `s`. It is built for each measure `m‚Çô` using `toMeasurable`
  -- (which is well behaved for finite measure sets thanks to `measure_toMeasurable_inter`), and
  -- then taking the intersection over `n`.
  have A : ‚àÉ t', t' ‚äá t ‚àß MeasurableSet t' ‚àß ‚àÄ u, MeasurableSet u ‚Üí Œº (t' ‚à© u) = Œº (t ‚à© u) := by
    let w n := toMeasurable (m n) t
    have T : t ‚äÜ ‚ãÇ n, w n := subset_iInter (fun i ‚Ü¶ subset_toMeasurable (m i) t)
    have M : MeasurableSet (‚ãÇ n, w n) :=
      MeasurableSet.iInter (fun i ‚Ü¶ measurableSet_toMeasurable (m i) t)
    refine ‚ü®‚ãÇ n, w n, T, M, fun u hu ‚Ü¶ ?_‚ü©
    refine le_antisymm ?_ (measure_mono (inter_subset_inter_left _ T))
    rw [hŒº, sum_apply _ (M.inter hu)]
    apply le_trans _ (le_sum_apply _ _)
    apply ENNReal.tsum_le_tsum (fun i ‚Ü¶ ?_)
    calc
    m i ((‚ãÇ n, w n) ‚à© u) ‚â§ m i (w i ‚à© u) :=
      measure_mono (inter_subset_inter_left _ (iInter_subset _ _))
    _ = m i (t ‚à© u) := measure_toMeasurable_inter hu (hv i)
  -- thanks to the definition of `toMeasurable`, the previous property will also be shared
  -- by `toMeasurable Œº t`, which is enough to conclude the proof.
  rw [toMeasurable]
  split_ifs with ht
  ¬∑ apply measure_congr
    exact ae_eq_set_inter ht.choose_spec.2.2 (ae_eq_refl _)
  ¬∑ exact A.choose_spec.2.2 s hs

/-- If a set `t` is covered by a countable family of finite measure sets, then its measurable
superset `toMeasurable Œº t` (which has the same measure as `t`) satisfies,
for any measurable set `s`, the equality `Œº (toMeasurable Œº t ‚à© s) = Œº (t ‚à© s)`. -/
theorem measure_toMeasurable_inter_of_cover {s : Set Œ±} (hs : MeasurableSet s) {t : Set Œ±}
    {v : ‚Ñï ‚Üí Set Œ±} (hv : t ‚äÜ ‚ãÉ n, v n) (h'v : ‚àÄ n, Œº (t ‚à© v n) ‚â† ‚àû) :
    Œº (toMeasurable Œº t ‚à© s) = Œº (t ‚à© s) := by
  -- we show that there is a measurable superset of `t` satisfying the conclusion for any
  -- measurable set `s`. It is built on each member of a spanning family using `toMeasurable`
  -- (which is well behaved for finite measure sets thanks to `measure_toMeasurable_inter`), and
  -- the desired property passes to the union.
  have A : ‚àÉ t', t' ‚äá t ‚àß MeasurableSet t' ‚àß ‚àÄ u, MeasurableSet u ‚Üí Œº (t' ‚à© u) = Œº (t ‚à© u) := by
    let w n := toMeasurable Œº (t ‚à© v n)
    have hw : ‚àÄ n, Œº (w n) < ‚àû := by
      intro n
      simp_rw [measure_toMeasurable]
      exact (h'v n).lt_top
    set t' := ‚ãÉ n, toMeasurable Œº (t ‚à© disjointed w n) with ht'
    have tt' : t ‚äÜ t' :=
      calc
        t ‚äÜ ‚ãÉ n, t ‚à© disjointed w n := by
          rw [‚Üê inter_iUnion, iUnion_disjointed, inter_iUnion]
          intro x hx
          rcases mem_iUnion.1 (hv hx) with ‚ü®n, hn‚ü©
          refine' mem_iUnion.2 ‚ü®n, _‚ü©
          have : x ‚àà t ‚à© v n := ‚ü®hx, hn‚ü©
          exact ‚ü®hx, subset_toMeasurable Œº _ this‚ü©
        _ ‚äÜ ‚ãÉ n, toMeasurable Œº (t ‚à© disjointed w n) :=
          iUnion_mono fun n => subset_toMeasurable _ _
    refine' ‚ü®t', tt', MeasurableSet.iUnion fun n => measurableSet_toMeasurable Œº _, fun u hu => _‚ü©
    apply le_antisymm _ (measure_mono (inter_subset_inter tt' Subset.rfl))
    calc
      Œº (t' ‚à© u) ‚â§ ‚àë' n, Œº (toMeasurable Œº (t ‚à© disjointed w n) ‚à© u) := by
        rw [ht', iUnion_inter]
        exact measure_iUnion_le _
      _ = ‚àë' n, Œº (t ‚à© disjointed w n ‚à© u) := by
        congr 1
        ext1 n
        apply measure_toMeasurable_inter hu
        apply ne_of_lt
        calc
          Œº (t ‚à© disjointed w n) ‚â§ Œº (t ‚à© w n) :=
            measure_mono (inter_subset_inter_right _ (disjointed_le w n))
          _ ‚â§ Œº (w n) := (measure_mono (inter_subset_right _ _))
          _ < ‚àû := hw n
      _ = ‚àë' n, Œº.restrict (t ‚à© u) (disjointed w n) := by
        congr 1
        ext1 n
        rw [restrict_apply, inter_comm t _, inter_assoc]
        refine MeasurableSet.disjointed (fun n => ?_) n
        exact measurableSet_toMeasurable _ _
      _ = Œº.restrict (t ‚à© u) (‚ãÉ n, disjointed w n) := by
        rw [measure_iUnion]
        ¬∑ exact disjoint_disjointed _
        ¬∑ intro i
          refine MeasurableSet.disjointed (fun n => ?_) i
          exact measurableSet_toMeasurable _ _
      _ ‚â§ Œº.restrict (t ‚à© u) univ := (measure_mono (subset_univ _))
      _ = Œº (t ‚à© u) := by rw [restrict_apply MeasurableSet.univ, univ_inter]
  -- thanks to the definition of `toMeasurable`, the previous property will also be shared
  -- by `toMeasurable Œº t`, which is enough to conclude the proof.
  rw [toMeasurable]
  split_ifs with ht
  ¬∑ apply measure_congr
    exact ae_eq_set_inter ht.choose_spec.2.2 (ae_eq_refl _)
  ¬∑ exact A.choose_spec.2.2 s hs
#align measure_theory.measure.measure_to_measurable_inter_of_cover MeasureTheory.Measure.measure_toMeasurable_inter_of_cover

theorem restrict_toMeasurable_of_cover {s : Set Œ±} {v : ‚Ñï ‚Üí Set Œ±} (hv : s ‚äÜ ‚ãÉ n, v n)
    (h'v : ‚àÄ n, Œº (s ‚à© v n) ‚â† ‚àû) : Œº.restrict (toMeasurable Œº s) = Œº.restrict s :=
  ext fun t ht => by
    simp only [restrict_apply ht, inter_comm t, measure_toMeasurable_inter_of_cover ht hv h'v]
#align measure_theory.measure.restrict_to_measurable_of_cover MeasureTheory.Measure.restrict_toMeasurable_of_cover

/-- The measurable superset `toMeasurable Œº t` of `t` (which has the same measure as `t`)
satisfies, for any measurable set `s`, the equality `Œº (toMeasurable Œº t ‚à© s) = Œº (t ‚à© s)`.
This only holds when `Œº` is s-finite -- for example for œÉ-finite measures. For a version without
this assumption (but requiring that `t` has finite measure), see `measure_toMeasurable_inter`. -/
theorem measure_toMeasurable_inter_of_sFinite [SFinite Œº] {s : Set Œ±} (hs : MeasurableSet s)
    (t : Set Œ±) : Œº (toMeasurable Œº t ‚à© s) = Œº (t ‚à© s) :=
  measure_toMeasurable_inter_of_sum hs (fun _ ‚Ü¶ measure_ne_top _ t) (sum_sFiniteSeq Œº).symm
#align measure_theory.measure.measure_to_measurable_inter_of_sigma_finite MeasureTheory.Measure.measure_toMeasurable_inter_of_sFinite

@[simp]
theorem restrict_toMeasurable_of_sFinite [SFinite Œº] (s : Set Œ±) :
    Œº.restrict (toMeasurable Œº s) = Œº.restrict s :=
  ext fun t ht => by
    rw [restrict_apply ht, inter_comm t, measure_toMeasurable_inter_of_sFinite ht,
      restrict_apply ht, inter_comm t]
#align measure_theory.measure.restrict_to_measurable_of_sigma_finite MeasureTheory.Measure.restrict_toMeasurable_of_sFinite

namespace FiniteSpanningSetsIn

variable {C D : Set (Set Œ±)}

/-- If `Œº` has finite spanning sets in `C` and `C ‚à© {s | Œº s < ‚àû} ‚äÜ D` then `Œº` has finite spanning
sets in `D`. -/
protected def mono' (h : Œº.FiniteSpanningSetsIn C) (hC : C ‚à© { s | Œº s < ‚àû } ‚äÜ D) :
    Œº.FiniteSpanningSetsIn D :=
  ‚ü®h.set, fun i => hC ‚ü®h.set_mem i, h.finite i‚ü©, h.finite, h.spanning‚ü©
#align measure_theory.measure.finite_spanning_sets_in.mono' MeasureTheory.Measure.FiniteSpanningSetsIn.mono'

/-- If `Œº` has finite spanning sets in `C` and `C ‚äÜ D` then `Œº` has finite spanning sets in `D`. -/
protected def mono (h : Œº.FiniteSpanningSetsIn C) (hC : C ‚äÜ D) : Œº.FiniteSpanningSetsIn D :=
  h.mono' fun _s hs => hC hs.1
#align measure_theory.measure.finite_spanning_sets_in.mono MeasureTheory.Measure.FiniteSpanningSetsIn.mono

/-- If `Œº` has finite spanning sets in the collection of measurable sets `C`, then `Œº` is œÉ-finite.
-/
protected theorem sigmaFinite (h : Œº.FiniteSpanningSetsIn C) : SigmaFinite Œº :=
  ‚ü®‚ü®h.mono <| subset_univ C‚ü©‚ü©
#align measure_theory.measure.finite_spanning_sets_in.sigma_finite MeasureTheory.Measure.FiniteSpanningSetsIn.sigmaFinite

/-- An extensionality for measures. It is `ext_of_generateFrom_of_iUnion` formulated in terms of
`FiniteSpanningSetsIn`. -/
protected theorem ext {ŒΩ : Measure Œ±} {C : Set (Set Œ±)} (hA : ‚Äπ_‚Ä∫ = generateFrom C)
    (hC : IsPiSystem C) (h : Œº.FiniteSpanningSetsIn C) (h_eq : ‚àÄ s ‚àà C, Œº s = ŒΩ s) : Œº = ŒΩ :=
  ext_of_generateFrom_of_iUnion C _ hA hC h.spanning h.set_mem (fun i => (h.finite i).ne) h_eq
#align measure_theory.measure.finite_spanning_sets_in.ext MeasureTheory.Measure.FiniteSpanningSetsIn.ext

protected theorem isCountablySpanning (h : Œº.FiniteSpanningSetsIn C) : IsCountablySpanning C :=
  ‚ü®h.set, h.set_mem, h.spanning‚ü©
#align measure_theory.measure.finite_spanning_sets_in.is_countably_spanning MeasureTheory.Measure.FiniteSpanningSetsIn.isCountablySpanning

end FiniteSpanningSetsIn

theorem sigmaFinite_of_countable {S : Set (Set Œ±)} (hc : S.Countable) (hŒº : ‚àÄ s ‚àà S, Œº s < ‚àû)
    (hU : ‚ãÉ‚ÇÄ S = univ) : SigmaFinite Œº := by
  obtain ‚ü®s, hŒº, hs‚ü© : ‚àÉ s : ‚Ñï ‚Üí Set Œ±, (‚àÄ n, Œº (s n) < ‚àû) ‚àß ‚ãÉ n, s n = univ
  exact (@exists_seq_cover_iff_countable _ (fun x => Œº x < ‚ä§) ‚ü®‚àÖ, by simp‚ü©).2 ‚ü®S, hc, hŒº, hU‚ü©
  exact ‚ü®‚ü®‚ü®fun n => s n, fun _ => trivial, hŒº, hs‚ü©‚ü©‚ü©
#align measure_theory.measure.sigma_finite_of_countable MeasureTheory.Measure.sigmaFinite_of_countable

/-- Given measures `Œº`, `ŒΩ` where `ŒΩ ‚â§ Œº`, `FiniteSpanningSetsIn.ofLe` provides the induced
`FiniteSpanningSet` with respect to `ŒΩ` from a `FiniteSpanningSet` with respect to `Œº`. -/
def FiniteSpanningSetsIn.ofLE (h : ŒΩ ‚â§ Œº) {C : Set (Set Œ±)} (S : Œº.FiniteSpanningSetsIn C) :
    ŒΩ.FiniteSpanningSetsIn C where
  set := S.set
  set_mem := S.set_mem
  finite n := lt_of_le_of_lt (le_iff'.1 h _) (S.finite n)
  spanning := S.spanning
#align measure_theory.measure.finite_spanning_sets_in.of_le MeasureTheory.Measure.FiniteSpanningSetsIn.ofLE

theorem sigmaFinite_of_le (Œº : Measure Œ±) [hs : SigmaFinite Œº] (h : ŒΩ ‚â§ Œº) : SigmaFinite ŒΩ :=
  ‚ü®hs.out.map <| FiniteSpanningSetsIn.ofLE h‚ü©
#align measure_theory.measure.sigma_finite_of_le MeasureTheory.Measure.sigmaFinite_of_le

@[simp] lemma add_right_inj (Œº ŒΩ‚ÇÅ ŒΩ‚ÇÇ : Measure Œ±) [SigmaFinite Œº] :
    Œº + ŒΩ‚ÇÅ = Œº + ŒΩ‚ÇÇ ‚Üî ŒΩ‚ÇÅ = ŒΩ‚ÇÇ := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ by rw [h]‚ü©
  rw [ext_iff_of_iUnion_eq_univ (iUnion_spanningSets Œº)]
  intro i
  ext s hs
  rw [‚Üê ENNReal.add_right_inj (measure_mono (inter_subset_right s _) |>.trans_lt <|
    measure_spanningSets_lt_top Œº i).ne]
  simp only [ext_iff', add_toOuterMeasure, OuterMeasure.coe_add, Pi.add_apply] at h
  simp [hs, h]

@[simp] lemma add_left_inj (Œº ŒΩ‚ÇÅ ŒΩ‚ÇÇ : Measure Œ±) [SigmaFinite Œº] :
    ŒΩ‚ÇÅ + Œº = ŒΩ‚ÇÇ + Œº ‚Üî ŒΩ‚ÇÅ = ŒΩ‚ÇÇ := by rw [add_comm _ Œº, add_comm _ Œº, Œº.add_right_inj]

end Measure

/-- Every finite measure is œÉ-finite. -/
instance (priority := 100) IsFiniteMeasure.toSigmaFinite {_m0 : MeasurableSpace Œ±} (Œº : Measure Œ±)
    [IsFiniteMeasure Œº] : SigmaFinite Œº :=
  ‚ü®‚ü®‚ü®fun _ => univ, fun _ => trivial, fun _ => measure_lt_top Œº _, iUnion_const _‚ü©‚ü©‚ü©
#align measure_theory.is_finite_measure.to_sigma_finite MeasureTheory.IsFiniteMeasure.toSigmaFinite

theorem sigmaFinite_bot_iff (Œº : @Measure Œ± ‚ä•) : SigmaFinite Œº ‚Üî IsFiniteMeasure Œº := by
  refine'
    ‚ü®fun h => ‚ü®_‚ü©, fun h => by
      haveI := h
      infer_instance‚ü©
  haveI : SigmaFinite Œº := h
  let s := spanningSets Œº
  have hs_univ : ‚ãÉ i, s i = Set.univ := iUnion_spanningSets Œº
  have hs_meas : ‚àÄ i, MeasurableSet[‚ä•] (s i) := measurable_spanningSets Œº
  simp_rw [MeasurableSpace.measurableSet_bot_iff] at hs_meas
  by_cases h_univ_empty : Set.univ = ‚àÖ
  ¬∑ rw [h_univ_empty, @measure_empty Œ± ‚ä•]
    exact ENNReal.zero_ne_top.lt_top
  obtain ‚ü®i, hsi‚ü© : ‚àÉ i, s i = Set.univ := by
    by_contra' h_not_univ
    have h_empty : ‚àÄ i, s i = ‚àÖ := by simpa [h_not_univ] using hs_meas
    simp only [h_empty, iUnion_empty] at hs_univ
    exact h_univ_empty hs_univ.symm
  rw [‚Üê hsi]
  exact measure_spanningSets_lt_top Œº i
#align measure_theory.sigma_finite_bot_iff MeasureTheory.sigmaFinite_bot_iff

instance Restrict.sigmaFinite (Œº : Measure Œ±) [SigmaFinite Œº] (s : Set Œ±) :
    SigmaFinite (Œº.restrict s) := by
  refine' ‚ü®‚ü®‚ü®spanningSets Œº, fun _ => trivial, fun i => _, iUnion_spanningSets Œº‚ü©‚ü©‚ü©
  rw [Measure.restrict_apply (measurable_spanningSets Œº i)]
  exact (measure_mono <| inter_subset_left _ _).trans_lt (measure_spanningSets_lt_top Œº i)
#align measure_theory.restrict.sigma_finite MeasureTheory.Restrict.sigmaFinite

instance sum.sigmaFinite {Œπ} [Finite Œπ] (Œº : Œπ ‚Üí Measure Œ±) [‚àÄ i, SigmaFinite (Œº i)] :
    SigmaFinite (sum Œº) := by
  cases nonempty_fintype Œπ
  have : ‚àÄ n, MeasurableSet (‚ãÇ i : Œπ, spanningSets (Œº i) n) := fun n =>
    MeasurableSet.iInter fun i => measurable_spanningSets (Œº i) n
  refine' ‚ü®‚ü®‚ü®fun n => ‚ãÇ i, spanningSets (Œº i) n, fun _ => trivial, fun n => _, _‚ü©‚ü©‚ü©
  ¬∑ rw [sum_apply _ (this n), tsum_fintype, ENNReal.sum_lt_top_iff]
    rintro i -
    exact (measure_mono <| iInter_subset _ i).trans_lt (measure_spanningSets_lt_top (Œº i) n)
  ¬∑ rw [iUnion_iInter_of_monotone]
    simp_rw [iUnion_spanningSets, iInter_univ]
    exact fun i => monotone_spanningSets (Œº i)
#align measure_theory.sum.sigma_finite MeasureTheory.sum.sigmaFinite

instance Add.sigmaFinite (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    SigmaFinite (Œº + ŒΩ) := by
  rw [‚Üê sum_cond]
  refine' @sum.sigmaFinite _ _ _ _ _ (Bool.rec _ _) <;> simpa
#align measure_theory.add.sigma_finite MeasureTheory.Add.sigmaFinite

instance SMul.sigmaFinite {Œº : Measure Œ±} [SigmaFinite Œº] (c : ‚Ñù‚â•0) :
    MeasureTheory.SigmaFinite (c ‚Ä¢ Œº) where
  out' :=
  ‚ü®{  set := spanningSets Œº
      set_mem := fun _ ‚Ü¶ trivial
      finite := by
        intro i
        simp only [smul_toOuterMeasure, OuterMeasure.coe_smul, Pi.smul_apply,
          nnreal_smul_coe_apply]
        exact ENNReal.mul_lt_top ENNReal.coe_ne_top (measure_spanningSets_lt_top Œº i).ne
      spanning := iUnion_spanningSets Œº }‚ü©

theorem SigmaFinite.of_map (Œº : Measure Œ±) {f : Œ± ‚Üí Œ≤} (hf : AEMeasurable f Œº)
    (h : SigmaFinite (Œº.map f)) : SigmaFinite Œº :=
  ‚ü®‚ü®‚ü®fun n => f ‚Åª¬π' spanningSets (Œº.map f) n, fun _ => trivial, fun n => by
        simp only [‚Üê map_apply_of_aemeasurable hf, measurable_spanningSets,
          measure_spanningSets_lt_top],
        by rw [‚Üê preimage_iUnion, iUnion_spanningSets, preimage_univ]‚ü©‚ü©‚ü©
#align measure_theory.sigma_finite.of_map MeasureTheory.SigmaFinite.of_map

theorem _root_.MeasurableEquiv.sigmaFinite_map {Œº : Measure Œ±} (f : Œ± ‚âÉ·µê Œ≤) (h : SigmaFinite Œº) :
    SigmaFinite (Œº.map f) := by
  refine' SigmaFinite.of_map _ f.symm.measurable.aemeasurable _
  rwa [map_map f.symm.measurable f.measurable, f.symm_comp_self, Measure.map_id]
#align measurable_equiv.sigma_finite_map MeasurableEquiv.sigmaFinite_map

/-- Similar to `ae_of_forall_measure_lt_top_ae_restrict`, but where you additionally get the
  hypothesis that another œÉ-finite measure has finite values on `s`. -/
theorem ae_of_forall_measure_lt_top_ae_restrict' {Œº : Measure Œ±} (ŒΩ : Measure Œ±) [SigmaFinite Œº]
    [SigmaFinite ŒΩ] (P : Œ± ‚Üí Prop)
    (h : ‚àÄ s, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí ŒΩ s < ‚àû ‚Üí ‚àÄ·µê x ‚àÇŒº.restrict s, P x) : ‚àÄ·µê x ‚àÇŒº, P x := by
  have : ‚àÄ n, ‚àÄ·µê x ‚àÇŒº, x ‚àà spanningSets (Œº + ŒΩ) n ‚Üí P x := by
    intro n
    have := h
      (spanningSets (Œº + ŒΩ) n) (measurable_spanningSets _ _)
      ((self_le_add_right _ _).trans_lt (measure_spanningSets_lt_top (Œº + ŒΩ) _))
      ((self_le_add_left _ _).trans_lt (measure_spanningSets_lt_top (Œº + ŒΩ) _))
    exact (ae_restrict_iff' (measurable_spanningSets _ _)).mp this
  filter_upwards [ae_all_iff.2 this] with _ hx using hx _ (mem_spanningSetsIndex _ _)
#align measure_theory.ae_of_forall_measure_lt_top_ae_restrict' MeasureTheory.ae_of_forall_measure_lt_top_ae_restrict'

/-- To prove something for almost all `x` w.r.t. a œÉ-finite measure, it is sufficient to show that
  this holds almost everywhere in sets where the measure has finite value. -/
theorem ae_of_forall_measure_lt_top_ae_restrict {Œº : Measure Œ±} [SigmaFinite Œº] (P : Œ± ‚Üí Prop)
    (h : ‚àÄ s, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí ‚àÄ·µê x ‚àÇŒº.restrict s, P x) : ‚àÄ·µê x ‚àÇŒº, P x :=
  ae_of_forall_measure_lt_top_ae_restrict' Œº P fun s hs h2s _ => h s hs h2s
#align measure_theory.ae_of_forall_measure_lt_top_ae_restrict MeasureTheory.ae_of_forall_measure_lt_top_ae_restrict

/-- A measure is called locally finite if it is finite in some neighborhood of each point. -/
class IsLocallyFiniteMeasure [TopologicalSpace Œ±] (Œº : Measure Œ±) : Prop where
  finiteAtNhds : ‚àÄ x, Œº.FiniteAtFilter (ùìù x)
#align measure_theory.is_locally_finite_measure MeasureTheory.IsLocallyFiniteMeasure
#align measure_theory.is_locally_finite_measure.finite_at_nhds MeasureTheory.IsLocallyFiniteMeasure.finiteAtNhds

-- see Note [lower instance priority]
instance (priority := 100) IsFiniteMeasure.toIsLocallyFiniteMeasure [TopologicalSpace Œ±]
    (Œº : Measure Œ±) [IsFiniteMeasure Œº] : IsLocallyFiniteMeasure Œº :=
  ‚ü®fun _ => finiteAtFilter_of_finite _ _‚ü©
#align measure_theory.is_finite_measure.to_is_locally_finite_measure MeasureTheory.IsFiniteMeasure.toIsLocallyFiniteMeasure

theorem Measure.finiteAt_nhds [TopologicalSpace Œ±] (Œº : Measure Œ±) [IsLocallyFiniteMeasure Œº]
    (x : Œ±) : Œº.FiniteAtFilter (ùìù x) :=
  IsLocallyFiniteMeasure.finiteAtNhds x
#align measure_theory.measure.finite_at_nhds MeasureTheory.Measure.finiteAt_nhds

theorem Measure.smul_finite (Œº : Measure Œ±) [IsFiniteMeasure Œº] {c : ‚Ñù‚â•0‚àû} (hc : c ‚â† ‚àû) :
    IsFiniteMeasure (c ‚Ä¢ Œº) := by
  lift c to ‚Ñù‚â•0 using hc
  exact MeasureTheory.isFiniteMeasureSMulNNReal
#align measure_theory.measure.smul_finite MeasureTheory.Measure.smul_finite

theorem Measure.exists_isOpen_measure_lt_top [TopologicalSpace Œ±] (Œº : Measure Œ±)
    [IsLocallyFiniteMeasure Œº] (x : Œ±) : ‚àÉ s : Set Œ±, x ‚àà s ‚àß IsOpen s ‚àß Œº s < ‚àû := by
  simpa only [and_assoc] using (Œº.finiteAt_nhds x).exists_mem_basis (nhds_basis_opens x)
#align measure_theory.measure.exists_is_open_measure_lt_top MeasureTheory.Measure.exists_isOpen_measure_lt_top

instance isLocallyFiniteMeasureSMulNNReal [TopologicalSpace Œ±] (Œº : Measure Œ±)
    [IsLocallyFiniteMeasure Œº] (c : ‚Ñù‚â•0) : IsLocallyFiniteMeasure (c ‚Ä¢ Œº) := by
  refine' ‚ü®fun x => _‚ü©
  rcases Œº.exists_isOpen_measure_lt_top x with ‚ü®o, xo, o_open, Œºo‚ü©
  refine' ‚ü®o, o_open.mem_nhds xo, _‚ü©
  apply ENNReal.mul_lt_top _ Œºo.ne
  simp
#align measure_theory.is_locally_finite_measure_smul_nnreal MeasureTheory.isLocallyFiniteMeasureSMulNNReal

protected theorem Measure.isTopologicalBasis_isOpen_lt_top [TopologicalSpace Œ±]
    (Œº : Measure Œ±) [IsLocallyFiniteMeasure Œº] :
    TopologicalSpace.IsTopologicalBasis { s | IsOpen s ‚àß Œº s < ‚àû } := by
  refine' TopologicalSpace.isTopologicalBasis_of_open_of_nhds (fun s hs => hs.1) _
  intro x s xs hs
  rcases Œº.exists_isOpen_measure_lt_top x with ‚ü®v, xv, hv, Œºv‚ü©
  refine' ‚ü®v ‚à© s, ‚ü®hv.inter hs, lt_of_le_of_lt _ Œºv‚ü©, ‚ü®xv, xs‚ü©, inter_subset_right _ _‚ü©
  exact measure_mono (inter_subset_left _ _)
#align measure_theory.measure.is_topological_basis_is_open_lt_top MeasureTheory.Measure.isTopologicalBasis_isOpen_lt_top

/-- A measure `Œº` is finite on compacts if any compact set `K` satisfies `Œº K < ‚àû`. -/
class IsFiniteMeasureOnCompacts [TopologicalSpace Œ±] (Œº : Measure Œ±) : Prop where
  protected lt_top_of_isCompact : ‚àÄ ‚¶ÉK : Set Œ±‚¶Ñ, IsCompact K ‚Üí Œº K < ‚àû
#align measure_theory.is_finite_measure_on_compacts MeasureTheory.IsFiniteMeasureOnCompacts
#align measure_theory.is_finite_measure_on_compacts.lt_top_of_is_compact MeasureTheory.IsFiniteMeasureOnCompacts.lt_top_of_isCompact

/-- A compact subset has finite measure for a measure which is finite on compacts. -/
theorem _root_.IsCompact.measure_lt_top [TopologicalSpace Œ±] {Œº : Measure Œ±}
    [IsFiniteMeasureOnCompacts Œº] ‚¶ÉK : Set Œ±‚¶Ñ (hK : IsCompact K) : Œº K < ‚àû :=
  IsFiniteMeasureOnCompacts.lt_top_of_isCompact hK
#align is_compact.measure_lt_top IsCompact.measure_lt_top

/-- A bounded subset has finite measure for a measure which is finite on compact sets, in a
proper space. -/
theorem _root_.Bornology.IsBounded.measure_lt_top [PseudoMetricSpace Œ±] [ProperSpace Œ±]
    {Œº : Measure Œ±} [IsFiniteMeasureOnCompacts Œº] ‚¶És : Set Œ±‚¶Ñ (hs : Bornology.IsBounded s) :
    Œº s < ‚àû :=
  calc
    Œº s ‚â§ Œº (closure s) := measure_mono subset_closure
    _ < ‚àû := (Metric.isCompact_of_isClosed_isBounded isClosed_closure hs.closure).measure_lt_top
#align metric.bounded.measure_lt_top Bornology.IsBounded.measure_lt_top

theorem measure_closedBall_lt_top [PseudoMetricSpace Œ±] [ProperSpace Œ±] {Œº : Measure Œ±}
    [IsFiniteMeasureOnCompacts Œº] {x : Œ±} {r : ‚Ñù} : Œº (Metric.closedBall x r) < ‚àû :=
  Metric.isBounded_closedBall.measure_lt_top
#align measure_theory.measure_closed_ball_lt_top MeasureTheory.measure_closedBall_lt_top

theorem measure_ball_lt_top [PseudoMetricSpace Œ±] [ProperSpace Œ±] {Œº : Measure Œ±}
    [IsFiniteMeasureOnCompacts Œº] {x : Œ±} {r : ‚Ñù} : Œº (Metric.ball x r) < ‚àû :=
  Metric.isBounded_ball.measure_lt_top
#align measure_theory.measure_ball_lt_top MeasureTheory.measure_ball_lt_top

protected theorem IsFiniteMeasureOnCompacts.smul [TopologicalSpace Œ±] (Œº : Measure Œ±)
    [IsFiniteMeasureOnCompacts Œº] {c : ‚Ñù‚â•0‚àû} (hc : c ‚â† ‚àû) : IsFiniteMeasureOnCompacts (c ‚Ä¢ Œº) :=
  ‚ü®fun _K hK => ENNReal.mul_lt_top hc hK.measure_lt_top.ne‚ü©
#align measure_theory.is_finite_measure_on_compacts.smul MeasureTheory.IsFiniteMeasureOnCompacts.smul

instance IsFiniteMeasureOnCompacts.smul_nnreal [TopologicalSpace Œ±] (Œº : Measure Œ±)
    [IsFiniteMeasureOnCompacts Œº] (c : ‚Ñù‚â•0) : IsFiniteMeasureOnCompacts (c ‚Ä¢ Œº) :=
  IsFiniteMeasureOnCompacts.smul Œº coe_ne_top

instance instIsFiniteMeasureOnCompactsRestrict [TopologicalSpace Œ±] {Œº : Measure Œ±}
    [IsFiniteMeasureOnCompacts Œº] {s : Set Œ±} : IsFiniteMeasureOnCompacts (Œº.restrict s) :=
  ‚ü®fun _k hk ‚Ü¶ (restrict_apply_le _ _).trans_lt hk.measure_lt_top‚ü©

instance (priority := 100) CompactSpace.isFiniteMeasure [TopologicalSpace Œ±] [CompactSpace Œ±]
    [IsFiniteMeasureOnCompacts Œº] : IsFiniteMeasure Œº :=
  ‚ü®IsFiniteMeasureOnCompacts.lt_top_of_isCompact isCompact_univ‚ü©
#align measure_theory.compact_space.is_finite_measure MeasureTheory.CompactSpace.isFiniteMeasure

instance (priority := 100) SigmaFinite.of_isFiniteMeasureOnCompacts [TopologicalSpace Œ±]
    [SigmaCompactSpace Œ±] (Œº : Measure Œ±) [IsFiniteMeasureOnCompacts Œº] : SigmaFinite Œº :=
  ‚ü®‚ü®{   set := compactCovering Œ±
        set_mem := fun _ => trivial
        finite := fun n => (isCompact_compactCovering Œ± n).measure_lt_top
        spanning := iUnion_compactCovering Œ± }‚ü©‚ü©

-- see Note [lower instance priority]
instance (priority := 100) sigmaFinite_of_locallyFinite [TopologicalSpace Œ±]
    [SecondCountableTopology Œ±] [IsLocallyFiniteMeasure Œº] : SigmaFinite Œº := by
  choose s hsx hsŒº using Œº.finiteAt_nhds
  rcases TopologicalSpace.countable_cover_nhds hsx with ‚ü®t, htc, htU‚ü©
  refine' Measure.sigmaFinite_of_countable (htc.image s) (ball_image_iff.2 fun x _ => hsŒº x) _
  rwa [sUnion_image]
#align measure_theory.sigma_finite_of_locally_finite MeasureTheory.sigmaFinite_of_locallyFinite

/-- A measure which is finite on compact sets in a locally compact space is locally finite. -/
instance (priority := 100) isLocallyFiniteMeasure_of_isFiniteMeasureOnCompacts [TopologicalSpace Œ±]
    [WeaklyLocallyCompactSpace Œ±] [IsFiniteMeasureOnCompacts Œº] : IsLocallyFiniteMeasure Œº :=
  ‚ü®fun x ‚Ü¶
    let ‚ü®K, K_compact, K_mem‚ü© := exists_compact_mem_nhds x
    ‚ü®K, K_mem, K_compact.measure_lt_top‚ü©‚ü©
#align measure_theory.is_locally_finite_measure_of_is_finite_measure_on_compacts MeasureTheory.isLocallyFiniteMeasure_of_isFiniteMeasureOnCompacts

theorem exists_pos_measure_of_cover [Countable Œπ] {U : Œπ ‚Üí Set Œ±} (hU : ‚ãÉ i, U i = univ)
    (hŒº : Œº ‚â† 0) : ‚àÉ i, 0 < Œº (U i) := by
  contrapose! hŒº with H
  rw [‚Üê measure_univ_eq_zero, ‚Üê hU]
  exact measure_iUnion_null fun i => nonpos_iff_eq_zero.1 (H i)
#align measure_theory.exists_pos_measure_of_cover MeasureTheory.exists_pos_measure_of_cover

theorem exists_pos_preimage_ball [PseudoMetricSpace Œ¥] (f : Œ± ‚Üí Œ¥) (x : Œ¥) (hŒº : Œº ‚â† 0) :
    ‚àÉ n : ‚Ñï, 0 < Œº (f ‚Åª¬π' Metric.ball x n) :=
  exists_pos_measure_of_cover (by rw [‚Üê preimage_iUnion, Metric.iUnion_ball_nat, preimage_univ]) hŒº
#align measure_theory.exists_pos_preimage_ball MeasureTheory.exists_pos_preimage_ball

theorem exists_pos_ball [PseudoMetricSpace Œ±] (x : Œ±) (hŒº : Œº ‚â† 0) :
    ‚àÉ n : ‚Ñï, 0 < Œº (Metric.ball x n) :=
  exists_pos_preimage_ball id x hŒº
#align measure_theory.exists_pos_ball MeasureTheory.exists_pos_ball

/-- If a set has zero measure in a neighborhood of each of its points, then it has zero measure
in a second-countable space. -/
theorem null_of_locally_null [TopologicalSpace Œ±] [SecondCountableTopology Œ±] (s : Set Œ±)
    (hs : ‚àÄ x ‚àà s, ‚àÉ u ‚àà ùìù[s] x, Œº u = 0) : Œº s = 0 :=
  Œº.toOuterMeasure.null_of_locally_null s hs
#align measure_theory.null_of_locally_null MeasureTheory.null_of_locally_null

theorem exists_mem_forall_mem_nhdsWithin_pos_measure [TopologicalSpace Œ±]
    [SecondCountableTopology Œ±] {s : Set Œ±} (hs : Œº s ‚â† 0) : ‚àÉ x ‚àà s, ‚àÄ t ‚àà ùìù[s] x, 0 < Œº t :=
  Œº.toOuterMeasure.exists_mem_forall_mem_nhds_within_pos hs
#align measure_theory.exists_mem_forall_mem_nhds_within_pos_measure MeasureTheory.exists_mem_forall_mem_nhdsWithin_pos_measure

theorem exists_ne_forall_mem_nhds_pos_measure_preimage {Œ≤} [TopologicalSpace Œ≤] [T1Space Œ≤]
    [SecondCountableTopology Œ≤] [Nonempty Œ≤] {f : Œ± ‚Üí Œ≤} (h : ‚àÄ b, ‚àÉ·µê x ‚àÇŒº, f x ‚â† b) :
    ‚àÉ a b : Œ≤, a ‚â† b ‚àß (‚àÄ s ‚àà ùìù a, 0 < Œº (f ‚Åª¬π' s)) ‚àß ‚àÄ t ‚àà ùìù b, 0 < Œº (f ‚Åª¬π' t) := by
  -- We use an `OuterMeasure` so that the proof works without `Measurable f`
  set m : OuterMeasure Œ≤ := OuterMeasure.map f Œº.toOuterMeasure
  replace h : ‚àÄ b : Œ≤, m {b}·∂ú ‚â† 0 := fun b => not_eventually.mpr (h b)
  inhabit Œ≤
  have : m univ ‚â† 0 := ne_bot_of_le_ne_bot (h default) (m.mono' <| subset_univ _)
  rcases m.exists_mem_forall_mem_nhds_within_pos this with ‚ü®b, -, hb‚ü©
  simp only [nhdsWithin_univ] at hb
  rcases m.exists_mem_forall_mem_nhds_within_pos (h b) with ‚ü®a, hab : a ‚â† b, ha‚ü©
  simp only [isOpen_compl_singleton.nhdsWithin_eq hab] at ha
  exact ‚ü®a, b, hab, ha, hb‚ü©
#align measure_theory.exists_ne_forall_mem_nhds_pos_measure_preimage MeasureTheory.exists_ne_forall_mem_nhds_pos_measure_preimage

/-- If two finite measures give the same mass to the whole space and coincide on a œÄ-system made
of measurable sets, then they coincide on all sets in the œÉ-algebra generated by the œÄ-system. -/
theorem ext_on_measurableSpace_of_generate_finite {Œ±} (m‚ÇÄ : MeasurableSpace Œ±) {Œº ŒΩ : Measure Œ±}
    [IsFiniteMeasure Œº] (C : Set (Set Œ±)) (hŒºŒΩ : ‚àÄ s ‚àà C, Œº s = ŒΩ s) {m : MeasurableSpace Œ±}
    (h : m ‚â§ m‚ÇÄ) (hA : m = MeasurableSpace.generateFrom C) (hC : IsPiSystem C)
    (h_univ : Œº Set.univ = ŒΩ Set.univ) {s : Set Œ±} (hs : MeasurableSet[m] s) : Œº s = ŒΩ s := by
  haveI : IsFiniteMeasure ŒΩ := by
    constructor
    rw [‚Üê h_univ]
    apply IsFiniteMeasure.measure_univ_lt_top
  refine' induction_on_inter hA hC (by simp) hŒºŒΩ _ _ hs
  ¬∑ intro t h1t h2t
    have h1t_ : @MeasurableSet Œ± m‚ÇÄ t := h _ h1t
    rw [@measure_compl Œ± m‚ÇÄ Œº t h1t_ (@measure_ne_top Œ± m‚ÇÄ Œº _ t),
      @measure_compl Œ± m‚ÇÄ ŒΩ t h1t_ (@measure_ne_top Œ± m‚ÇÄ ŒΩ _ t), h_univ, h2t]
  ¬∑ intro f h1f h2f h3f
    have h2f_ : ‚àÄ i : ‚Ñï, @MeasurableSet Œ± m‚ÇÄ (f i) := fun i => h _ (h2f i)
    simp [measure_iUnion, h1f, h3f, h2f_]
#align measure_theory.ext_on_measurable_space_of_generate_finite MeasureTheory.ext_on_measurableSpace_of_generate_finite

/-- Two finite measures are equal if they are equal on the œÄ-system generating the œÉ-algebra
  (and `univ`). -/
theorem ext_of_generate_finite (C : Set (Set Œ±)) (hA : m0 = generateFrom C) (hC : IsPiSystem C)
    [IsFiniteMeasure Œº] (hŒºŒΩ : ‚àÄ s ‚àà C, Œº s = ŒΩ s) (h_univ : Œº univ = ŒΩ univ) : Œº = ŒΩ :=
  Measure.ext fun _s hs =>
    ext_on_measurableSpace_of_generate_finite m0 C hŒºŒΩ le_rfl hA hC h_univ hs
#align measure_theory.ext_of_generate_finite MeasureTheory.ext_of_generate_finite

namespace Measure

section disjointed

/-- Given `S : Œº.FiniteSpanningSetsIn {s | MeasurableSet s}`,
`FiniteSpanningSetsIn.disjointed` provides a `FiniteSpanningSetsIn {s | MeasurableSet s}`
such that its underlying sets are pairwise disjoint. -/
protected def FiniteSpanningSetsIn.disjointed {Œº : Measure Œ±}
    (S : Œº.FiniteSpanningSetsIn { s | MeasurableSet s }) :
    Œº.FiniteSpanningSetsIn { s | MeasurableSet s } :=
  ‚ü®disjointed S.set, MeasurableSet.disjointed S.set_mem, fun n =>
    lt_of_le_of_lt (measure_mono (disjointed_subset S.set n)) (S.finite _),
    S.spanning ‚ñ∏ iUnion_disjointed‚ü©
#align measure_theory.measure.finite_spanning_sets_in.disjointed MeasureTheory.Measure.FiniteSpanningSetsIn.disjointed

theorem FiniteSpanningSetsIn.disjointed_set_eq {Œº : Measure Œ±}
    (S : Œº.FiniteSpanningSetsIn { s | MeasurableSet s }) : S.disjointed.set = disjointed S.set :=
  rfl
#align measure_theory.measure.finite_spanning_sets_in.disjointed_set_eq MeasureTheory.Measure.FiniteSpanningSetsIn.disjointed_set_eq

theorem exists_eq_disjoint_finiteSpanningSetsIn (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    ‚àÉ (S : Œº.FiniteSpanningSetsIn { s | MeasurableSet s })
      (T : ŒΩ.FiniteSpanningSetsIn { s | MeasurableSet s }),
      S.set = T.set ‚àß Pairwise (Disjoint on S.set) :=
  let S := (Œº + ŒΩ).toFiniteSpanningSetsIn.disjointed
  ‚ü®S.ofLE (Measure.le_add_right le_rfl), S.ofLE (Measure.le_add_left le_rfl), rfl,
    disjoint_disjointed _‚ü©
#align measure_theory.measure.exists_eq_disjoint_finite_spanning_sets_in MeasureTheory.Measure.exists_eq_disjoint_finiteSpanningSetsIn

end disjointed

namespace FiniteAtFilter

variable {f g : Filter Œ±}

theorem filter_mono (h : f ‚â§ g) : Œº.FiniteAtFilter g ‚Üí Œº.FiniteAtFilter f := fun ‚ü®s, hs, hŒº‚ü© =>
  ‚ü®s, h hs, hŒº‚ü©
#align measure_theory.measure.finite_at_filter.filter_mono MeasureTheory.Measure.FiniteAtFilter.filter_mono

theorem inf_of_left (h : Œº.FiniteAtFilter f) : Œº.FiniteAtFilter (f ‚äì g) :=
  h.filter_mono inf_le_left
#align measure_theory.measure.finite_at_filter.inf_of_left MeasureTheory.Measure.FiniteAtFilter.inf_of_left

theorem inf_of_right (h : Œº.FiniteAtFilter g) : Œº.FiniteAtFilter (f ‚äì g) :=
  h.filter_mono inf_le_right
#align measure_theory.measure.finite_at_filter.inf_of_right MeasureTheory.Measure.FiniteAtFilter.inf_of_right

@[simp]
theorem inf_ae_iff : Œº.FiniteAtFilter (f ‚äì Œº.ae) ‚Üî Œº.FiniteAtFilter f := by
  refine' ‚ü®_, fun h => h.filter_mono inf_le_left‚ü©
  rintro ‚ü®s, ‚ü®t, ht, u, hu, rfl‚ü©, hŒº‚ü©
  suffices : Œº t ‚â§ Œº (t ‚à© u); exact ‚ü®t, ht, this.trans_lt hŒº‚ü©
  exact measure_mono_ae (mem_of_superset hu fun x hu ht => ‚ü®ht, hu‚ü©)
#align measure_theory.measure.finite_at_filter.inf_ae_iff MeasureTheory.Measure.FiniteAtFilter.inf_ae_iff

alias ‚ü®of_inf_ae, _‚ü© := inf_ae_iff
#align measure_theory.measure.finite_at_filter.of_inf_ae MeasureTheory.Measure.FiniteAtFilter.of_inf_ae

theorem filter_mono_ae (h : f ‚äì Œº.ae ‚â§ g) (hg : Œº.FiniteAtFilter g) : Œº.FiniteAtFilter f :=
  inf_ae_iff.1 (hg.filter_mono h)
#align measure_theory.measure.finite_at_filter.filter_mono_ae MeasureTheory.Measure.FiniteAtFilter.filter_mono_ae

protected theorem measure_mono (h : Œº ‚â§ ŒΩ) : ŒΩ.FiniteAtFilter f ‚Üí Œº.FiniteAtFilter f :=
  fun ‚ü®s, hs, hŒΩ‚ü© => ‚ü®s, hs, (Measure.le_iff'.1 h s).trans_lt hŒΩ‚ü©
#align measure_theory.measure.finite_at_filter.measure_mono MeasureTheory.Measure.FiniteAtFilter.measure_mono

@[mono]
protected theorem mono (hf : f ‚â§ g) (hŒº : Œº ‚â§ ŒΩ) : ŒΩ.FiniteAtFilter g ‚Üí Œº.FiniteAtFilter f :=
  fun h => (h.filter_mono hf).measure_mono hŒº
#align measure_theory.measure.finite_at_filter.mono MeasureTheory.Measure.FiniteAtFilter.mono

protected theorem eventually (h : Œº.FiniteAtFilter f) : ‚àÄ·∂† s in f.smallSets, Œº s < ‚àû :=
  (eventually_smallSets' fun _s _t hst ht => (measure_mono hst).trans_lt ht).2 h
#align measure_theory.measure.finite_at_filter.eventually MeasureTheory.Measure.FiniteAtFilter.eventually

theorem filterSup : Œº.FiniteAtFilter f ‚Üí Œº.FiniteAtFilter g ‚Üí Œº.FiniteAtFilter (f ‚äî g) :=
  fun ‚ü®s, hsf, hsŒº‚ü© ‚ü®t, htg, htŒº‚ü© =>
  ‚ü®s ‚à™ t, union_mem_sup hsf htg, (measure_union_le s t).trans_lt (ENNReal.add_lt_top.2 ‚ü®hsŒº, htŒº‚ü©)‚ü©
#align measure_theory.measure.finite_at_filter.filter_sup MeasureTheory.Measure.FiniteAtFilter.filterSup

end FiniteAtFilter

theorem finiteAt_nhdsWithin [TopologicalSpace Œ±] {_m0 : MeasurableSpace Œ±} (Œº : Measure Œ±)
    [IsLocallyFiniteMeasure Œº] (x : Œ±) (s : Set Œ±) : Œº.FiniteAtFilter (ùìù[s] x) :=
  (finiteAt_nhds Œº x).inf_of_left
#align measure_theory.measure.finite_at_nhds_within MeasureTheory.Measure.finiteAt_nhdsWithin

@[simp]
theorem finiteAt_principal : Œº.FiniteAtFilter (ùìü s) ‚Üî Œº s < ‚àû :=
  ‚ü®fun ‚ü®_t, ht, hŒº‚ü© => (measure_mono ht).trans_lt hŒº, fun h => ‚ü®s, mem_principal_self s, h‚ü©‚ü©
#align measure_theory.measure.finite_at_principal MeasureTheory.Measure.finiteAt_principal

theorem isLocallyFiniteMeasure_of_le [TopologicalSpace Œ±] {_m : MeasurableSpace Œ±} {Œº ŒΩ : Measure Œ±}
    [H : IsLocallyFiniteMeasure Œº] (h : ŒΩ ‚â§ Œº) : IsLocallyFiniteMeasure ŒΩ :=
  let F := H.finiteAtNhds
  ‚ü®fun x => (F x).measure_mono h‚ü©
#align measure_theory.measure.is_locally_finite_measure_of_le MeasureTheory.Measure.isLocallyFiniteMeasure_of_le

end Measure

end MeasureTheory

namespace IsCompact

variable [TopologicalSpace Œ±] [MeasurableSpace Œ±] {Œº : Measure Œ±} {s : Set Œ±}

/-- If `s` is a compact set and `Œº` is finite at `ùìù x` for every `x ‚àà s`, then `s` admits an open
superset of finite measure. -/
theorem exists_open_superset_measure_lt_top' (h : IsCompact s)
    (hŒº : ‚àÄ x ‚àà s, Œº.FiniteAtFilter (ùìù x)) : ‚àÉ (U : _) (_ : U ‚äá s), IsOpen U ‚àß Œº U < ‚àû := by
  refine' IsCompact.induction_on h _ _ _ _
  ¬∑ use ‚àÖ
    simp [Superset]
  ¬∑ rintro s t hst ‚ü®U, htU, hUo, hU‚ü©
    exact ‚ü®U, hst.trans htU, hUo, hU‚ü©
  ¬∑ rintro s t ‚ü®U, hsU, hUo, hU‚ü© ‚ü®V, htV, hVo, hV‚ü©
    refine'
      ‚ü®U ‚à™ V, union_subset_union hsU htV, hUo.union hVo,
        (measure_union_le _ _).trans_lt <| ENNReal.add_lt_top.2 ‚ü®hU, hV‚ü©‚ü©
  ¬∑ intro x hx
    rcases (hŒº x hx).exists_mem_basis (nhds_basis_opens _) with ‚ü®U, ‚ü®hx, hUo‚ü©, hU‚ü©
    exact ‚ü®U, nhdsWithin_le_nhds (hUo.mem_nhds hx), U, Subset.rfl, hUo, hU‚ü©
#align is_compact.exists_open_superset_measure_lt_top' IsCompact.exists_open_superset_measure_lt_top'

/-- If `s` is a compact set and `Œº` is a locally finite measure, then `s` admits an open superset of
finite measure. -/
theorem exists_open_superset_measure_lt_top (h : IsCompact s) (Œº : Measure Œ±)
    [IsLocallyFiniteMeasure Œº] : ‚àÉ (U : _) (_ : U ‚äá s), IsOpen U ‚àß Œº U < ‚àû :=
  h.exists_open_superset_measure_lt_top' fun x _ => Œº.finiteAt_nhds x
#align is_compact.exists_open_superset_measure_lt_top IsCompact.exists_open_superset_measure_lt_top

theorem measure_lt_top_of_nhdsWithin (h : IsCompact s) (hŒº : ‚àÄ x ‚àà s, Œº.FiniteAtFilter (ùìù[s] x)) :
    Œº s < ‚àû :=
  IsCompact.induction_on h (by simp) (fun s t hst ht => (measure_mono hst).trans_lt ht)
    (fun s t hs ht => (measure_union_le s t).trans_lt (ENNReal.add_lt_top.2 ‚ü®hs, ht‚ü©)) hŒº
#align is_compact.measure_lt_top_of_nhds_within IsCompact.measure_lt_top_of_nhdsWithin

theorem measure_zero_of_nhdsWithin (hs : IsCompact s) :
    (‚àÄ a ‚àà s, ‚àÉ t ‚àà ùìù[s] a, Œº t = 0) ‚Üí Œº s = 0 := by
  simpa only [‚Üê compl_mem_ae_iff] using hs.compl_mem_sets_of_nhdsWithin
#align is_compact.measure_zero_of_nhds_within IsCompact.measure_zero_of_nhdsWithin

end IsCompact

-- see Note [lower instance priority]
instance (priority := 100) isFiniteMeasureOnCompacts_of_isLocallyFiniteMeasure [TopologicalSpace Œ±]
    {_ : MeasurableSpace Œ±} {Œº : Measure Œ±} [IsLocallyFiniteMeasure Œº] :
    IsFiniteMeasureOnCompacts Œº :=
  ‚ü®fun _s hs => hs.measure_lt_top_of_nhdsWithin fun _ _ => Œº.finiteAt_nhdsWithin _ _‚ü©
#align is_finite_measure_on_compacts_of_is_locally_finite_measure isFiniteMeasureOnCompacts_of_isLocallyFiniteMeasure

theorem isFiniteMeasure_iff_isFiniteMeasureOnCompacts_of_compactSpace [TopologicalSpace Œ±]
    [MeasurableSpace Œ±] {Œº : Measure Œ±} [CompactSpace Œ±] :
    IsFiniteMeasure Œº ‚Üî IsFiniteMeasureOnCompacts Œº := by
  constructor <;> intros
  ¬∑ infer_instance
  ¬∑ exact CompactSpace.isFiniteMeasure
#align is_finite_measure_iff_is_finite_measure_on_compacts_of_compact_space isFiniteMeasure_iff_isFiniteMeasureOnCompacts_of_compactSpace

/-- Compact covering of a `œÉ`-compact topological space as
`MeasureTheory.Measure.FiniteSpanningSetsIn`. -/
def MeasureTheory.Measure.finiteSpanningSetsInCompact [TopologicalSpace Œ±] [SigmaCompactSpace Œ±]
    {_ : MeasurableSpace Œ±} (Œº : Measure Œ±) [IsLocallyFiniteMeasure Œº] :
    Œº.FiniteSpanningSetsIn { K | IsCompact K } where
  set := compactCovering Œ±
  set_mem := isCompact_compactCovering Œ±
  finite n := (isCompact_compactCovering Œ± n).measure_lt_top
  spanning := iUnion_compactCovering Œ±
#align measure_theory.measure.finite_spanning_sets_in_compact MeasureTheory.Measure.finiteSpanningSetsInCompact

/-- A locally finite measure on a `œÉ`-compact topological space admits a finite spanning sequence
of open sets. -/
def MeasureTheory.Measure.finiteSpanningSetsInOpen [TopologicalSpace Œ±] [SigmaCompactSpace Œ±]
    {_ : MeasurableSpace Œ±} (Œº : Measure Œ±) [IsLocallyFiniteMeasure Œº] :
    Œº.FiniteSpanningSetsIn { K | IsOpen K } where
  set n := ((isCompact_compactCovering Œ± n).exists_open_superset_measure_lt_top Œº).choose
  set_mem n :=
    ((isCompact_compactCovering Œ± n).exists_open_superset_measure_lt_top Œº).choose_spec.snd.1
  finite n :=
    ((isCompact_compactCovering Œ± n).exists_open_superset_measure_lt_top Œº).choose_spec.snd.2
  spanning :=
    eq_univ_of_subset
      (iUnion_mono fun n =>
        ((isCompact_compactCovering Œ± n).exists_open_superset_measure_lt_top Œº).choose_spec.fst)
      (iUnion_compactCovering Œ±)
#align measure_theory.measure.finite_spanning_sets_in_open MeasureTheory.Measure.finiteSpanningSetsInOpen

open TopologicalSpace

/-- A locally finite measure on a second countable topological space admits a finite spanning
sequence of open sets. -/
noncomputable irreducible_def MeasureTheory.Measure.finiteSpanningSetsInOpen' [TopologicalSpace Œ±]
  [SecondCountableTopology Œ±] {m : MeasurableSpace Œ±} (Œº : Measure Œ±) [IsLocallyFiniteMeasure Œº] :
  Œº.FiniteSpanningSetsIn { K | IsOpen K } := by
  suffices H : Nonempty (Œº.FiniteSpanningSetsIn { K | IsOpen K })
  exact H.some
  cases isEmpty_or_nonempty Œ±
  ¬∑ exact
      ‚ü®{  set := fun _ => ‚àÖ
          set_mem := fun _ => by simp
          finite := fun _ => by simp
          spanning := by simp [eq_iff_true_of_subsingleton] }‚ü©
  inhabit Œ±
  let S : Set (Set Œ±) := { s | IsOpen s ‚àß Œº s < ‚àû }
  obtain ‚ü®T, T_count, TS, hT‚ü© : ‚àÉ T : Set (Set Œ±), T.Countable ‚àß T ‚äÜ S ‚àß ‚ãÉ‚ÇÄ T = ‚ãÉ‚ÇÄ S :=
    isOpen_sUnion_countable S fun s hs => hs.1
  rw [Œº.isTopologicalBasis_isOpen_lt_top.sUnion_eq] at hT
  have T_ne : T.Nonempty := by
    by_contra h'T
    rw [not_nonempty_iff_eq_empty.1 h'T, sUnion_empty] at hT
    simpa only [‚Üê hT] using mem_univ (default : Œ±)
  obtain ‚ü®f, hf‚ü© : ‚àÉ f : ‚Ñï ‚Üí Set Œ±, T = range f
  exact T_count.exists_eq_range T_ne
  have fS : ‚àÄ n, f n ‚àà S := by
    intro n
    apply TS
    rw [hf]
    exact mem_range_self n
  refine'
    ‚ü®{  set := f
        set_mem := fun n => (fS n).1
        finite := fun n => (fS n).2
        spanning := _ }‚ü©
  refine eq_univ_of_forall fun x => ?_
  obtain ‚ü®t, tT, xt‚ü© : ‚àÉ t : Set Œ±, t ‚àà range f ‚àß x ‚àà t := by
    have : x ‚àà ‚ãÉ‚ÇÄ T := by simp only [hT, mem_univ]
    simpa only [mem_sUnion, exists_prop, ‚Üê hf]
  obtain ‚ü®n, rfl‚ü© : ‚àÉ n : ‚Ñï, f n = t := by simpa only using tT
  exact mem_iUnion_of_mem _ xt
#align measure_theory.measure.finite_spanning_sets_in_open' MeasureTheory.Measure.finiteSpanningSetsInOpen'

section MeasureIxx

variable [Preorder Œ±] [TopologicalSpace Œ±] [CompactIccSpace Œ±] {m : MeasurableSpace Œ±}
  {Œº : Measure Œ±} [IsLocallyFiniteMeasure Œº] {a b : Œ±}

theorem measure_Icc_lt_top : Œº (Icc a b) < ‚àû :=
  isCompact_Icc.measure_lt_top
#align measure_Icc_lt_top measure_Icc_lt_top

theorem measure_Ico_lt_top : Œº (Ico a b) < ‚àû :=
  (measure_mono Ico_subset_Icc_self).trans_lt measure_Icc_lt_top
#align measure_Ico_lt_top measure_Ico_lt_top

theorem measure_Ioc_lt_top : Œº (Ioc a b) < ‚àû :=
  (measure_mono Ioc_subset_Icc_self).trans_lt measure_Icc_lt_top
#align measure_Ioc_lt_top measure_Ioc_lt_top

theorem measure_Ioo_lt_top : Œº (Ioo a b) < ‚àû :=
  (measure_mono Ioo_subset_Icc_self).trans_lt measure_Icc_lt_top
#align measure_Ioo_lt_top measure_Ioo_lt_top

end MeasureIxx
