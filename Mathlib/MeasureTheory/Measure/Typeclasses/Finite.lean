/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro
-/
import Mathlib.MeasureTheory.Measure.Restrict

/-!
# Classes for finite measures

We introduce the following typeclasses for measures:

* `IsFiniteMeasure Œº`: `Œº univ < ‚àû`;
* `IsLocallyFiniteMeasure Œº` : `‚àÄ x, ‚àÉ s ‚àà ùìù x, Œº s < ‚àû`.
-/

open scoped NNReal Topology
open Set MeasureTheory Measure Filter Function MeasurableSpace ENNReal

variable {Œ± Œ≤ Œ¥ Œπ : Type*}

namespace MeasureTheory

variable {m0 : MeasurableSpace Œ±} [MeasurableSpace Œ≤] {Œº ŒΩ ŒΩ‚ÇÅ ŒΩ‚ÇÇ : Measure Œ±}
  {s t : Set Œ±}

section IsFiniteMeasure

/-- A measure `Œº` is called finite if `Œº univ < ‚àû`. -/
@[mk_iff]
class IsFiniteMeasure (Œº : Measure Œ±) : Prop where
  measure_univ_lt_top : Œº univ < ‚àû

lemma not_isFiniteMeasure_iff : ¬¨IsFiniteMeasure Œº ‚Üî Œº univ = ‚àû := by simp [isFiniteMeasure_iff]

lemma isFiniteMeasure_restrict : IsFiniteMeasure (Œº.restrict s) ‚Üî Œº s ‚â† ‚àû := by
  simp [isFiniteMeasure_iff, lt_top_iff_ne_top]

instance Restrict.isFiniteMeasure (Œº : Measure Œ±) [hs : Fact (Œº s < ‚àû)] :
    IsFiniteMeasure (Œº.restrict s) :=
  ‚ü®by simpa using hs.elim‚ü©

@[simp]
theorem measure_lt_top (Œº : Measure Œ±) [IsFiniteMeasure Œº] (s : Set Œ±) : Œº s < ‚àû :=
  (measure_mono (subset_univ s)).trans_lt IsFiniteMeasure.measure_univ_lt_top

instance isFiniteMeasureRestrict (Œº : Measure Œ±) (s : Set Œ±) [h : IsFiniteMeasure Œº] :
    IsFiniteMeasure (Œº.restrict s) := ‚ü®by simp‚ü©

@[simp, aesop (rule_sets := [finiteness]) safe apply]
theorem measure_ne_top (Œº : Measure Œ±) [IsFiniteMeasure Œº] (s : Set Œ±) : Œº s ‚â† ‚àû :=
  ne_of_lt (measure_lt_top Œº s)

theorem measure_compl_le_add_of_le_add [IsFiniteMeasure Œº] (hs : MeasurableSet s)
    (ht : MeasurableSet t) {Œµ : ‚Ñù‚â•0‚àû} (h : Œº s ‚â§ Œº t + Œµ) : Œº t·∂ú ‚â§ Œº s·∂ú + Œµ := by
  rw [measure_compl ht (measure_ne_top Œº _), measure_compl hs (measure_ne_top Œº _),
    tsub_le_iff_right]
  calc
    Œº univ = Œº univ - Œº s + Œº s := (tsub_add_cancel_of_le <| measure_mono s.subset_univ).symm
    _ ‚â§ Œº univ - Œº s + (Œº t + Œµ) := add_le_add_left h _
    _ = _ := by rw [add_right_comm, add_assoc]

theorem measure_compl_le_add_iff [IsFiniteMeasure Œº] (hs : MeasurableSet s) (ht : MeasurableSet t)
    {Œµ : ‚Ñù‚â•0‚àû} : Œº s·∂ú ‚â§ Œº t·∂ú + Œµ ‚Üî Œº t ‚â§ Œº s + Œµ :=
  ‚ü®fun h => compl_compl s ‚ñ∏ compl_compl t ‚ñ∏ measure_compl_le_add_of_le_add hs.compl ht.compl h,
    measure_compl_le_add_of_le_add ht hs‚ü©

/-- The measure of the whole space with respect to a finite measure, considered as `‚Ñù‚â•0`. -/
def measureUnivNNReal (Œº : Measure Œ±) : ‚Ñù‚â•0 :=
  (Œº univ).toNNReal

@[simp]
theorem coe_measureUnivNNReal (Œº : Measure Œ±) [IsFiniteMeasure Œº] :
    ‚Üë(measureUnivNNReal Œº) = Œº univ :=
  ENNReal.coe_toNNReal (measure_ne_top Œº univ)

instance isFiniteMeasureZero : IsFiniteMeasure (0 : Measure Œ±) :=
  ‚ü®by simp‚ü©

instance (priority := 50) isFiniteMeasureOfIsEmpty [IsEmpty Œ±] : IsFiniteMeasure Œº := by
  rw [eq_zero_of_isEmpty Œº]
  infer_instance

@[simp]
theorem measureUnivNNReal_zero : measureUnivNNReal (0 : Measure Œ±) = 0 :=
  rfl

instance isFiniteMeasureAdd [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] : IsFiniteMeasure (Œº + ŒΩ) where
  measure_univ_lt_top := by
    rw [Measure.coe_add, Pi.add_apply, ENNReal.add_lt_top]
    exact ‚ü®measure_lt_top _ _, measure_lt_top _ _‚ü©

instance isFiniteMeasureSMulNNReal [IsFiniteMeasure Œº] {r : ‚Ñù‚â•0} : IsFiniteMeasure (r ‚Ä¢ Œº) where
  measure_univ_lt_top := ENNReal.mul_lt_top ENNReal.coe_lt_top (measure_lt_top _ _)

instance IsFiniteMeasure.average : IsFiniteMeasure ((Œº univ)‚Åª¬π ‚Ä¢ Œº) where
  measure_univ_lt_top := by
    rw [smul_apply, smul_eq_mul, ‚Üê ENNReal.div_eq_inv_mul]
    exact ENNReal.div_self_le_one.trans_lt ENNReal.one_lt_top

instance isFiniteMeasureSMulOfNNRealTower {R} [SMul R ‚Ñù‚â•0] [SMul R ‚Ñù‚â•0‚àû] [IsScalarTower R ‚Ñù‚â•0 ‚Ñù‚â•0‚àû]
    [IsScalarTower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû] [IsFiniteMeasure Œº] {r : R} : IsFiniteMeasure (r ‚Ä¢ Œº) := by
  rw [‚Üê smul_one_smul ‚Ñù‚â•0 r Œº]
  infer_instance

theorem isFiniteMeasure_of_le (Œº : Measure Œ±) [IsFiniteMeasure Œº] (h : ŒΩ ‚â§ Œº) : IsFiniteMeasure ŒΩ :=
  { measure_univ_lt_top := (h Set.univ).trans_lt (measure_lt_top _ _) }

@[instance]
theorem Measure.isFiniteMeasure_map {m : MeasurableSpace Œ±} (Œº : Measure Œ±) [IsFiniteMeasure Œº]
    (f : Œ± ‚Üí Œ≤) : IsFiniteMeasure (Œº.map f) := by
  by_cases hf : AEMeasurable f Œº
  ¬∑ constructor
    rw [map_apply_of_aemeasurable hf MeasurableSet.univ]
    exact measure_lt_top Œº _
  ¬∑ rw [map_of_not_aemeasurable hf]
    exact MeasureTheory.isFiniteMeasureZero

instance IsFiniteMeasure_comap (f : Œ≤ ‚Üí Œ±) [IsFiniteMeasure Œº] : IsFiniteMeasure (Œº.comap f) where
  measure_univ_lt_top := by
    by_cases hf : Injective f ‚àß ‚àÄ s, MeasurableSet s ‚Üí NullMeasurableSet (f '' s) Œº
    ¬∑ rw [Measure.comap_apply‚ÇÄ _ _ hf.1 hf.2 MeasurableSet.univ.nullMeasurableSet]
      exact measure_lt_top Œº _
    ¬∑ rw [Measure.comap, dif_neg hf]
      exact zero_lt_top

@[simp]
theorem measureUnivNNReal_eq_zero [IsFiniteMeasure Œº] : measureUnivNNReal Œº = 0 ‚Üî Œº = 0 := by
  rw [‚Üê MeasureTheory.Measure.measure_univ_eq_zero, ‚Üê coe_measureUnivNNReal]
  norm_cast

theorem measureUnivNNReal_pos [IsFiniteMeasure Œº] (hŒº : Œº ‚â† 0) : 0 < measureUnivNNReal Œº := by
  contrapose! hŒº
  simpa [measureUnivNNReal_eq_zero, Nat.le_zero] using hŒº

/-- `le_of_add_le_add_left` is normally applicable to `OrderedCancelAddCommMonoid`,
but it holds for measures with the additional assumption that Œº is finite. -/
theorem Measure.le_of_add_le_add_left [IsFiniteMeasure Œº] (A2 : Œº + ŒΩ‚ÇÅ ‚â§ Œº + ŒΩ‚ÇÇ) : ŒΩ‚ÇÅ ‚â§ ŒΩ‚ÇÇ :=
  fun S => ENNReal.le_of_add_le_add_left (MeasureTheory.measure_ne_top Œº S) (A2 S)

theorem summable_measure_toReal [hŒº : IsFiniteMeasure Œº] {f : ‚Ñï ‚Üí Set Œ±}
    (hf‚ÇÅ : ‚àÄ i : ‚Ñï, MeasurableSet (f i)) (hf‚ÇÇ : Pairwise (Disjoint on f)) :
    Summable fun x => (Œº (f x)).toReal := by
  apply ENNReal.summable_toReal
  rw [‚Üê MeasureTheory.measure_iUnion hf‚ÇÇ hf‚ÇÅ]
  exact ne_of_lt (measure_lt_top _ _)

theorem ae_eq_univ_iff_measure_eq [IsFiniteMeasure Œº] (hs : NullMeasurableSet s Œº) :
    s =·µê[Œº] univ ‚Üî Œº s = Œº univ :=
  ‚ü®measure_congr, fun h ‚Ü¶
    ae_eq_of_subset_of_measure_ge (subset_univ _) h.ge hs (measure_ne_top _ _)‚ü©

theorem ae_iff_measure_eq [IsFiniteMeasure Œº] {p : Œ± ‚Üí Prop}
    (hp : NullMeasurableSet { a | p a } Œº) : (‚àÄ·µê a ‚àÇŒº, p a) ‚Üî Œº { a | p a } = Œº univ := by
  rw [‚Üê ae_eq_univ_iff_measure_eq hp, eventuallyEq_univ, eventually_iff]

theorem ae_mem_iff_measure_eq [IsFiniteMeasure Œº] {s : Set Œ±} (hs : NullMeasurableSet s Œº) :
    (‚àÄ·µê a ‚àÇŒº, a ‚àà s) ‚Üî Œº s = Œº univ :=
  ae_iff_measure_eq hs

lemma tendsto_measure_biUnion_Ici_zero_of_pairwise_disjoint
    {X : Type*} [MeasurableSpace X] {Œº : Measure X} [IsFiniteMeasure Œº]
    {Es : ‚Ñï ‚Üí Set X} (Es_mble : ‚àÄ i, NullMeasurableSet (Es i) Œº)
    (Es_disj : Pairwise fun n m ‚Ü¶ Disjoint (Es n) (Es m)) :
    Tendsto (Œº ‚àò fun n ‚Ü¶ ‚ãÉ i ‚â• n, Es i) atTop (ùìù 0) := by
  have decr : Antitone fun n ‚Ü¶ ‚ãÉ i ‚â• n, Es i :=
    fun n m hnm ‚Ü¶ biUnion_mono (fun _ hi ‚Ü¶ le_trans hnm hi) (fun _ _ ‚Ü¶ subset_rfl)
  have nothing : ‚ãÇ n, ‚ãÉ i ‚â• n, Es i = ‚àÖ := by
    apply subset_antisymm _ (empty_subset _)
    intro x hx
    simp only [mem_iInter, mem_iUnion, exists_prop] at hx
    obtain ‚ü®j, _, x_in_Es_j‚ü© := hx 0
    obtain ‚ü®k, k_gt_j, x_in_Es_k‚ü© := hx (j+1)
    have oops := (Es_disj (Nat.ne_of_lt k_gt_j)).ne_of_mem x_in_Es_j x_in_Es_k
    contradiction
  have key := tendsto_measure_iInter_atTop (Œº := Œº) (fun n ‚Ü¶ by measurability)
    decr ‚ü®0, measure_ne_top _ _‚ü©
  simp only [nothing, measure_empty] at key
  convert key

open scoped symmDiff

theorem abs_toReal_measure_sub_le_measure_symmDiff'
    (hs : NullMeasurableSet s Œº) (ht : NullMeasurableSet t Œº) (hs' : Œº s ‚â† ‚àû) (ht' : Œº t ‚â† ‚àû) :
    |(Œº s).toReal - (Œº t).toReal| ‚â§ (Œº (s ‚àÜ t)).toReal := by
  have hst : Œº (s \ t) ‚â† ‚àû := (measure_lt_top_of_subset diff_subset hs').ne
  have hts : Œº (t \ s) ‚â† ‚àû := (measure_lt_top_of_subset diff_subset ht').ne
  suffices (Œº s).toReal - (Œº t).toReal = (Œº (s \ t)).toReal - (Œº (t \ s)).toReal by
    rw [this, measure_symmDiff_eq hs ht, ENNReal.toReal_add hst hts]
    convert abs_sub (Œº (s \ t)).toReal (Œº (t \ s)).toReal <;> simp
  rw [measure_diff' s ht ht', measure_diff' t hs hs',
    ENNReal.toReal_sub_of_le measure_le_measure_union_right (measure_union_ne_top hs' ht'),
    ENNReal.toReal_sub_of_le measure_le_measure_union_right (measure_union_ne_top ht' hs'),
    union_comm t s]
  abel

theorem abs_toReal_measure_sub_le_measure_symmDiff [IsFiniteMeasure Œº]
    (hs : NullMeasurableSet s Œº) (ht : NullMeasurableSet t Œº) :
    |(Œº s).toReal - (Œº t).toReal| ‚â§ (Œº (s ‚àÜ t)).toReal :=
  abs_toReal_measure_sub_le_measure_symmDiff' hs ht (measure_ne_top Œº s) (measure_ne_top Œº t)

instance {s : Finset Œπ} {Œº : Œπ ‚Üí Measure Œ±} [‚àÄ i, IsFiniteMeasure (Œº i)] :
    IsFiniteMeasure (‚àë i ‚àà s, Œº i) where measure_univ_lt_top := by simp [measure_lt_top]

instance [Finite Œπ] {Œº : Œπ ‚Üí Measure Œ±} [‚àÄ i, IsFiniteMeasure (Œº i)] :
    IsFiniteMeasure (.sum Œº) where
  measure_univ_lt_top := by
    cases nonempty_fintype Œπ
    simp [measure_lt_top]

end IsFiniteMeasure

theorem ite_ae_eq_of_measure_zero {Œ≥} (f : Œ± ‚Üí Œ≥) (g : Œ± ‚Üí Œ≥) (s : Set Œ±) [DecidablePred (¬∑ ‚àà s)]
    (hs_zero : Œº s = 0) :
    (fun x => ite (x ‚àà s) (f x) (g x)) =·µê[Œº] g := by
  have h_ss : s·∂ú ‚äÜ { a : Œ± | ite (a ‚àà s) (f a) (g a) = g a } := fun x hx => by
    simp [(Set.mem_compl_iff _ _).mp hx]
  refine measure_mono_null ?_ hs_zero
  conv_rhs => rw [‚Üê compl_compl s]
  rwa [Set.compl_subset_compl]

theorem ite_ae_eq_of_measure_compl_zero {Œ≥} (f : Œ± ‚Üí Œ≥) (g : Œ± ‚Üí Œ≥)
    (s : Set Œ±) [DecidablePred (¬∑ ‚àà s)] (hs_zero : Œº s·∂ú = 0) :
    (fun x => ite (x ‚àà s) (f x) (g x)) =·µê[Œº] f := by
  rw [‚Üê mem_ae_iff] at hs_zero
  filter_upwards [hs_zero]
  intros
  split_ifs
  rfl

namespace Measure

/-- A measure is called finite at filter `f` if it is finite at some set `s ‚àà f`.
Equivalently, it is eventually finite at `s` in `f.small_sets`. -/
def FiniteAtFilter {_m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) (f : Filter Œ±) : Prop :=
  ‚àÉ s ‚àà f, Œº s < ‚àû

theorem finiteAtFilter_of_finite {_m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) [IsFiniteMeasure Œº]
    (f : Filter Œ±) : Œº.FiniteAtFilter f :=
  ‚ü®univ, univ_mem, measure_lt_top Œº univ‚ü©

theorem FiniteAtFilter.exists_mem_basis {f : Filter Œ±} (hŒº : FiniteAtFilter Œº f) {p : Œπ ‚Üí Prop}
    {s : Œπ ‚Üí Set Œ±} (hf : f.HasBasis p s) : ‚àÉ i, p i ‚àß Œº (s i) < ‚àû :=
  (hf.exists_iff fun {_s _t} hst ht => (measure_mono hst).trans_lt ht).1 hŒº

theorem finiteAtBot {m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) : Œº.FiniteAtFilter ‚ä• :=
  ‚ü®‚àÖ, mem_bot, by simp only [measure_empty, zero_lt_top]‚ü©

/-- `Œº` has finite spanning sets in `C` if there is a countable sequence of sets in `C` that have
  finite measures. This structure is a type, which is useful if we want to record extra properties
  about the sets, such as that they are monotone.
  `SigmaFinite` is defined in terms of this: `Œº` is œÉ-finite if there exists a sequence of
  finite spanning sets in the collection of all measurable sets. -/
structure FiniteSpanningSetsIn {m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) (C : Set (Set Œ±)) where
  protected set : ‚Ñï ‚Üí Set Œ±
  protected set_mem : ‚àÄ i, set i ‚àà C
  protected finite : ‚àÄ i, Œº (set i) < ‚àû
  protected spanning : ‚ãÉ i, set i = univ

end Measure

/-- A measure is called locally finite if it is finite in some neighborhood of each point. -/
class IsLocallyFiniteMeasure [TopologicalSpace Œ±] (Œº : Measure Œ±) : Prop where
  finiteAtNhds : ‚àÄ x, Œº.FiniteAtFilter (ùìù x)

-- see Note [lower instance priority]
instance (priority := 100) IsFiniteMeasure.toIsLocallyFiniteMeasure [TopologicalSpace Œ±]
    (Œº : Measure Œ±) [IsFiniteMeasure Œº] : IsLocallyFiniteMeasure Œº :=
  ‚ü®fun _ => finiteAtFilter_of_finite _ _‚ü©

theorem Measure.finiteAt_nhds [TopologicalSpace Œ±] (Œº : Measure Œ±) [IsLocallyFiniteMeasure Œº]
    (x : Œ±) : Œº.FiniteAtFilter (ùìù x) :=
  IsLocallyFiniteMeasure.finiteAtNhds x

theorem Measure.smul_finite (Œº : Measure Œ±) [IsFiniteMeasure Œº] {c : ‚Ñù‚â•0‚àû} (hc : c ‚â† ‚àû) :
    IsFiniteMeasure (c ‚Ä¢ Œº) := by
  lift c to ‚Ñù‚â•0 using hc
  exact MeasureTheory.isFiniteMeasureSMulNNReal

theorem Measure.exists_isOpen_measure_lt_top [TopologicalSpace Œ±] (Œº : Measure Œ±)
    [IsLocallyFiniteMeasure Œº] (x : Œ±) : ‚àÉ s : Set Œ±, x ‚àà s ‚àß IsOpen s ‚àß Œº s < ‚àû := by
  simpa only [and_assoc] using (Œº.finiteAt_nhds x).exists_mem_basis (nhds_basis_opens x)

instance isLocallyFiniteMeasureSMulNNReal [TopologicalSpace Œ±] (Œº : Measure Œ±)
    [IsLocallyFiniteMeasure Œº] (c : ‚Ñù‚â•0) : IsLocallyFiniteMeasure (c ‚Ä¢ Œº) := by
  refine ‚ü®fun x => ?_‚ü©
  rcases Œº.exists_isOpen_measure_lt_top x with ‚ü®o, xo, o_open, Œºo‚ü©
  refine ‚ü®o, o_open.mem_nhds xo, ?_‚ü©
  apply ENNReal.mul_lt_top _ Œºo
  simp

protected theorem Measure.isTopologicalBasis_isOpen_lt_top [TopologicalSpace Œ±]
    (Œº : Measure Œ±) [IsLocallyFiniteMeasure Œº] :
    TopologicalSpace.IsTopologicalBasis { s | IsOpen s ‚àß Œº s < ‚àû } := by
  refine TopologicalSpace.isTopologicalBasis_of_isOpen_of_nhds (fun s hs => hs.1) ?_
  intro x s xs hs
  rcases Œº.exists_isOpen_measure_lt_top x with ‚ü®v, xv, hv, Œºv‚ü©
  refine ‚ü®v ‚à© s, ‚ü®hv.inter hs, lt_of_le_of_lt ?_ Œºv‚ü©, ‚ü®xv, xs‚ü©, inter_subset_right‚ü©
  exact measure_mono inter_subset_left

/-- A measure `Œº` is finite on compacts if any compact set `K` satisfies `Œº K < ‚àû`. -/
class IsFiniteMeasureOnCompacts [TopologicalSpace Œ±] (Œº : Measure Œ±) : Prop where
  protected lt_top_of_isCompact : ‚àÄ ‚¶ÉK : Set Œ±‚¶Ñ, IsCompact K ‚Üí Œº K < ‚àû

/-- A compact subset has finite measure for a measure which is finite on compacts. -/
theorem _root_.IsCompact.measure_lt_top [TopologicalSpace Œ±] {Œº : Measure Œ±}
    [IsFiniteMeasureOnCompacts Œº] ‚¶ÉK : Set Œ±‚¶Ñ (hK : IsCompact K) : Œº K < ‚àû :=
  IsFiniteMeasureOnCompacts.lt_top_of_isCompact hK

/-- A compact subset has finite measure for a measure which is finite on compacts. -/
theorem _root_.IsCompact.measure_ne_top [TopologicalSpace Œ±] {Œº : Measure Œ±}
    [IsFiniteMeasureOnCompacts Œº] ‚¶ÉK : Set Œ±‚¶Ñ (hK : IsCompact K) : Œº K ‚â† ‚àû :=
  hK.measure_lt_top.ne

/-- A bounded subset has finite measure for a measure which is finite on compact sets, in a
proper space. -/
theorem _root_.Bornology.IsBounded.measure_lt_top [PseudoMetricSpace Œ±] [ProperSpace Œ±]
    {Œº : Measure Œ±} [IsFiniteMeasureOnCompacts Œº] ‚¶És : Set Œ±‚¶Ñ (hs : Bornology.IsBounded s) :
    Œº s < ‚àû :=
  calc
    Œº s ‚â§ Œº (closure s) := measure_mono subset_closure
    _ < ‚àû := (Metric.isCompact_of_isClosed_isBounded isClosed_closure hs.closure).measure_lt_top

theorem measure_closedBall_lt_top [PseudoMetricSpace Œ±] [ProperSpace Œ±] {Œº : Measure Œ±}
    [IsFiniteMeasureOnCompacts Œº] {x : Œ±} {r : ‚Ñù} : Œº (Metric.closedBall x r) < ‚àû :=
  Metric.isBounded_closedBall.measure_lt_top

theorem measure_ball_lt_top [PseudoMetricSpace Œ±] [ProperSpace Œ±] {Œº : Measure Œ±}
    [IsFiniteMeasureOnCompacts Œº] {x : Œ±} {r : ‚Ñù} : Œº (Metric.ball x r) < ‚àû :=
  Metric.isBounded_ball.measure_lt_top

protected theorem IsFiniteMeasureOnCompacts.smul [TopologicalSpace Œ±] (Œº : Measure Œ±)
    [IsFiniteMeasureOnCompacts Œº] {c : ‚Ñù‚â•0‚àû} (hc : c ‚â† ‚àû) : IsFiniteMeasureOnCompacts (c ‚Ä¢ Œº) :=
  ‚ü®fun _K hK => ENNReal.mul_lt_top hc.lt_top hK.measure_lt_top‚ü©

instance IsFiniteMeasureOnCompacts.smul_nnreal [TopologicalSpace Œ±] (Œº : Measure Œ±)
    [IsFiniteMeasureOnCompacts Œº] (c : ‚Ñù‚â•0) : IsFiniteMeasureOnCompacts (c ‚Ä¢ Œº) :=
  IsFiniteMeasureOnCompacts.smul Œº coe_ne_top

instance instIsFiniteMeasureOnCompactsRestrict [TopologicalSpace Œ±] {Œº : Measure Œ±}
    [IsFiniteMeasureOnCompacts Œº] {s : Set Œ±} : IsFiniteMeasureOnCompacts (Œº.restrict s) :=
  ‚ü®fun _k hk ‚Ü¶ (restrict_apply_le _ _).trans_lt hk.measure_lt_top‚ü©

instance (priority := 100) CompactSpace.isFiniteMeasure [TopologicalSpace Œ±] [CompactSpace Œ±]
    [IsFiniteMeasureOnCompacts Œº] : IsFiniteMeasure Œº :=
  ‚ü®IsFiniteMeasureOnCompacts.lt_top_of_isCompact isCompact_univ‚ü©

/-- A measure which is finite on compact sets in a locally compact space is locally finite. -/
instance (priority := 100) isLocallyFiniteMeasure_of_isFiniteMeasureOnCompacts [TopologicalSpace Œ±]
    [WeaklyLocallyCompactSpace Œ±] [IsFiniteMeasureOnCompacts Œº] : IsLocallyFiniteMeasure Œº :=
  ‚ü®fun x ‚Ü¶
    let ‚ü®K, K_compact, K_mem‚ü© := exists_compact_mem_nhds x
    ‚ü®K, K_mem, K_compact.measure_lt_top‚ü©‚ü©

theorem exists_pos_measure_of_cover [Countable Œπ] {U : Œπ ‚Üí Set Œ±} (hU : ‚ãÉ i, U i = univ)
    (hŒº : Œº ‚â† 0) : ‚àÉ i, 0 < Œº (U i) := by
  contrapose! hŒº with H
  rw [‚Üê measure_univ_eq_zero, ‚Üê hU]
  exact measure_iUnion_null fun i => nonpos_iff_eq_zero.1 (H i)

theorem exists_pos_preimage_ball [PseudoMetricSpace Œ¥] (f : Œ± ‚Üí Œ¥) (x : Œ¥) (hŒº : Œº ‚â† 0) :
    ‚àÉ n : ‚Ñï, 0 < Œº (f ‚Åª¬π' Metric.ball x n) :=
  exists_pos_measure_of_cover (by rw [‚Üê preimage_iUnion, Metric.iUnion_ball_nat, preimage_univ]) hŒº

theorem exists_pos_ball [PseudoMetricSpace Œ±] (x : Œ±) (hŒº : Œº ‚â† 0) :
    ‚àÉ n : ‚Ñï, 0 < Œº (Metric.ball x n) :=
  exists_pos_preimage_ball id x hŒº

/-- If a set has zero measure in a neighborhood of each of its points, then it has zero measure
in a second-countable space. -/
theorem exists_ne_forall_mem_nhds_pos_measure_preimage {Œ≤} [TopologicalSpace Œ≤] [T1Space Œ≤]
    [SecondCountableTopology Œ≤] [Nonempty Œ≤] {f : Œ± ‚Üí Œ≤} (h : ‚àÄ b, ‚àÉ·µê x ‚àÇŒº, f x ‚â† b) :
    ‚àÉ a b : Œ≤, a ‚â† b ‚àß (‚àÄ s ‚àà ùìù a, 0 < Œº (f ‚Åª¬π' s)) ‚àß ‚àÄ t ‚àà ùìù b, 0 < Œº (f ‚Åª¬π' t) := by
  -- We use an `OuterMeasure` so that the proof works without `Measurable f`
  set m : OuterMeasure Œ≤ := OuterMeasure.map f Œº.toOuterMeasure
  replace h : ‚àÄ b : Œ≤, m {b}·∂ú ‚â† 0 := fun b => not_eventually.mpr (h b)
  inhabit Œ≤
  have : m univ ‚â† 0 := ne_bot_of_le_ne_bot (h default) (measure_mono <| subset_univ _)
  rcases exists_mem_forall_mem_nhdsWithin_pos_measure this with ‚ü®b, -, hb‚ü©
  simp only [nhdsWithin_univ] at hb
  rcases exists_mem_forall_mem_nhdsWithin_pos_measure (h b) with ‚ü®a, hab : a ‚â† b, ha‚ü©
  simp only [isOpen_compl_singleton.nhdsWithin_eq hab] at ha
  exact ‚ü®a, b, hab, ha, hb‚ü©

/-- If two finite measures give the same mass to the whole space and coincide on a œÄ-system made
of measurable sets, then they coincide on all sets in the œÉ-algebra generated by the œÄ-system. -/
theorem ext_on_measurableSpace_of_generate_finite {Œ±} (m‚ÇÄ : MeasurableSpace Œ±) {Œº ŒΩ : Measure Œ±}
    [IsFiniteMeasure Œº] (C : Set (Set Œ±)) (hŒºŒΩ : ‚àÄ s ‚àà C, Œº s = ŒΩ s) {m : MeasurableSpace Œ±}
    (h : m ‚â§ m‚ÇÄ) (hA : m = MeasurableSpace.generateFrom C) (hC : IsPiSystem C)
    (h_univ : Œº Set.univ = ŒΩ Set.univ) {s : Set Œ±} (hs : MeasurableSet[m] s) : Œº s = ŒΩ s := by
  haveI : IsFiniteMeasure ŒΩ := by
    constructor
    rw [‚Üê h_univ]
    apply IsFiniteMeasure.measure_univ_lt_top
  induction s, hs using induction_on_inter hA hC with
  | empty => simp
  | basic t ht => exact hŒºŒΩ t ht
  | compl t htm iht =>
    rw [measure_compl (h t htm) (measure_ne_top _ _), measure_compl (h t htm) (measure_ne_top _ _),
      iht, h_univ]
  | iUnion f hfd hfm ihf =>
    simp [measure_iUnion, hfd, h _ (hfm _), ihf]

/-- Two finite measures are equal if they are equal on the œÄ-system generating the œÉ-algebra
  (and `univ`). -/
theorem ext_of_generate_finite (C : Set (Set Œ±)) (hA : m0 = generateFrom C) (hC : IsPiSystem C)
    [IsFiniteMeasure Œº] (hŒºŒΩ : ‚àÄ s ‚àà C, Œº s = ŒΩ s) (h_univ : Œº univ = ŒΩ univ) : Œº = ŒΩ :=
  Measure.ext fun _s hs =>
    ext_on_measurableSpace_of_generate_finite m0 C hŒºŒΩ le_rfl hA hC h_univ hs

namespace Measure

namespace FiniteAtFilter

variable {f g : Filter Œ±}

theorem filter_mono (h : f ‚â§ g) : Œº.FiniteAtFilter g ‚Üí Œº.FiniteAtFilter f := fun ‚ü®s, hs, hŒº‚ü© =>
  ‚ü®s, h hs, hŒº‚ü©

theorem inf_of_left (h : Œº.FiniteAtFilter f) : Œº.FiniteAtFilter (f ‚äì g) :=
  h.filter_mono inf_le_left

theorem inf_of_right (h : Œº.FiniteAtFilter g) : Œº.FiniteAtFilter (f ‚äì g) :=
  h.filter_mono inf_le_right

@[simp]
theorem inf_ae_iff : Œº.FiniteAtFilter (f ‚äì ae Œº) ‚Üî Œº.FiniteAtFilter f := by
  refine ‚ü®?_, fun h => h.filter_mono inf_le_left‚ü©
  rintro ‚ü®s, ‚ü®t, ht, u, hu, rfl‚ü©, hŒº‚ü©
  suffices Œº t ‚â§ Œº (t ‚à© u) from ‚ü®t, ht, this.trans_lt hŒº‚ü©
  exact measure_mono_ae (mem_of_superset hu fun x hu ht => ‚ü®ht, hu‚ü©)

alias ‚ü®of_inf_ae, _‚ü© := inf_ae_iff

theorem filter_mono_ae (h : f ‚äì (ae Œº) ‚â§ g) (hg : Œº.FiniteAtFilter g) : Œº.FiniteAtFilter f :=
  inf_ae_iff.1 (hg.filter_mono h)

protected theorem measure_mono (h : Œº ‚â§ ŒΩ) : ŒΩ.FiniteAtFilter f ‚Üí Œº.FiniteAtFilter f :=
  fun ‚ü®s, hs, hŒΩ‚ü© => ‚ü®s, hs, (Measure.le_iff'.1 h s).trans_lt hŒΩ‚ü©

@[mono]
protected theorem mono (hf : f ‚â§ g) (hŒº : Œº ‚â§ ŒΩ) : ŒΩ.FiniteAtFilter g ‚Üí Œº.FiniteAtFilter f :=
  fun h => (h.filter_mono hf).measure_mono hŒº

protected theorem eventually (h : Œº.FiniteAtFilter f) : ‚àÄ·∂† s in f.smallSets, Œº s < ‚àû :=
  (eventually_smallSets' fun _s _t hst ht => (measure_mono hst).trans_lt ht).2 h

theorem filterSup : Œº.FiniteAtFilter f ‚Üí Œº.FiniteAtFilter g ‚Üí Œº.FiniteAtFilter (f ‚äî g) :=
  fun ‚ü®s, hsf, hsŒº‚ü© ‚ü®t, htg, htŒº‚ü© =>
  ‚ü®s ‚à™ t, union_mem_sup hsf htg, (measure_union_le s t).trans_lt (ENNReal.add_lt_top.2 ‚ü®hsŒº, htŒº‚ü©)‚ü©

end FiniteAtFilter

theorem finiteAt_nhdsWithin [TopologicalSpace Œ±] {_m0 : MeasurableSpace Œ±} (Œº : Measure Œ±)
    [IsLocallyFiniteMeasure Œº] (x : Œ±) (s : Set Œ±) : Œº.FiniteAtFilter (ùìù[s] x) :=
  (finiteAt_nhds Œº x).inf_of_left

@[simp]
theorem finiteAt_principal : Œº.FiniteAtFilter (ùìü s) ‚Üî Œº s < ‚àû :=
  ‚ü®fun ‚ü®_t, ht, hŒº‚ü© => (measure_mono ht).trans_lt hŒº, fun h => ‚ü®s, mem_principal_self s, h‚ü©‚ü©

theorem isLocallyFiniteMeasure_of_le [TopologicalSpace Œ±] {_m : MeasurableSpace Œ±} {Œº ŒΩ : Measure Œ±}
    [H : IsLocallyFiniteMeasure Œº] (h : ŒΩ ‚â§ Œº) : IsLocallyFiniteMeasure ŒΩ :=
  let F := H.finiteAtNhds
  ‚ü®fun x => (F x).measure_mono h‚ü©

end Measure

end MeasureTheory

namespace IsCompact

variable [TopologicalSpace Œ±] [MeasurableSpace Œ±] {Œº : Measure Œ±} {s : Set Œ±}

/-- If `s` is a compact set and `Œº` is finite at `ùìù x` for every `x ‚àà s`, then `s` admits an open
superset of finite measure. -/
theorem exists_open_superset_measure_lt_top' (h : IsCompact s)
    (hŒº : ‚àÄ x ‚àà s, Œº.FiniteAtFilter (ùìù x)) : ‚àÉ U ‚äá s, IsOpen U ‚àß Œº U < ‚àû := by
  refine IsCompact.induction_on h ?_ ?_ ?_ ?_
  ¬∑ use ‚àÖ
    simp [Superset]
  ¬∑ rintro s t hst ‚ü®U, htU, hUo, hU‚ü©
    exact ‚ü®U, hst.trans htU, hUo, hU‚ü©
  ¬∑ rintro s t ‚ü®U, hsU, hUo, hU‚ü© ‚ü®V, htV, hVo, hV‚ü©
    refine
      ‚ü®U ‚à™ V, union_subset_union hsU htV, hUo.union hVo,
        (measure_union_le _ _).trans_lt <| ENNReal.add_lt_top.2 ‚ü®hU, hV‚ü©‚ü©
  ¬∑ intro x hx
    rcases (hŒº x hx).exists_mem_basis (nhds_basis_opens _) with ‚ü®U, ‚ü®hx, hUo‚ü©, hU‚ü©
    exact ‚ü®U, nhdsWithin_le_nhds (hUo.mem_nhds hx), U, Subset.rfl, hUo, hU‚ü©

/-- If `s` is a compact set and `Œº` is a locally finite measure, then `s` admits an open superset of
finite measure. -/
theorem exists_open_superset_measure_lt_top (h : IsCompact s) (Œº : Measure Œ±)
    [IsLocallyFiniteMeasure Œº] : ‚àÉ U ‚äá s, IsOpen U ‚àß Œº U < ‚àû :=
  h.exists_open_superset_measure_lt_top' fun x _ => Œº.finiteAt_nhds x

theorem measure_lt_top_of_nhdsWithin (h : IsCompact s) (hŒº : ‚àÄ x ‚àà s, Œº.FiniteAtFilter (ùìù[s] x)) :
    Œº s < ‚àû :=
  IsCompact.induction_on h (by simp) (fun _ _ hst ht => (measure_mono hst).trans_lt ht)
    (fun s t hs ht => (measure_union_le s t).trans_lt (ENNReal.add_lt_top.2 ‚ü®hs, ht‚ü©)) hŒº

theorem measure_zero_of_nhdsWithin (hs : IsCompact s) :
    (‚àÄ a ‚àà s, ‚àÉ t ‚àà ùìù[s] a, Œº t = 0) ‚Üí Œº s = 0 := by
  simpa only [‚Üê compl_mem_ae_iff] using hs.compl_mem_sets_of_nhdsWithin

end IsCompact

-- see Note [lower instance priority]
instance (priority := 100) isFiniteMeasureOnCompacts_of_isLocallyFiniteMeasure [TopologicalSpace Œ±]
    {_ : MeasurableSpace Œ±} {Œº : Measure Œ±} [IsLocallyFiniteMeasure Œº] :
    IsFiniteMeasureOnCompacts Œº :=
  ‚ü®fun _s hs => hs.measure_lt_top_of_nhdsWithin fun _ _ => Œº.finiteAt_nhdsWithin _ _‚ü©

theorem isFiniteMeasure_iff_isFiniteMeasureOnCompacts_of_compactSpace [TopologicalSpace Œ±]
    [MeasurableSpace Œ±] {Œº : Measure Œ±} [CompactSpace Œ±] :
    IsFiniteMeasure Œº ‚Üî IsFiniteMeasureOnCompacts Œº := by
  constructor <;> intros
  ¬∑ infer_instance
  ¬∑ exact CompactSpace.isFiniteMeasure

/-- Compact covering of a `œÉ`-compact topological space as
`MeasureTheory.Measure.FiniteSpanningSetsIn`. -/
def MeasureTheory.Measure.finiteSpanningSetsInCompact [TopologicalSpace Œ±] [SigmaCompactSpace Œ±]
    {_ : MeasurableSpace Œ±} (Œº : Measure Œ±) [IsLocallyFiniteMeasure Œº] :
    Œº.FiniteSpanningSetsIn { K | IsCompact K } where
  set := compactCovering Œ±
  set_mem := isCompact_compactCovering Œ±
  finite n := (isCompact_compactCovering Œ± n).measure_lt_top
  spanning := iUnion_compactCovering Œ±

/-- A locally finite measure on a `œÉ`-compact topological space admits a finite spanning sequence
of open sets. -/
def MeasureTheory.Measure.finiteSpanningSetsInOpen [TopologicalSpace Œ±] [SigmaCompactSpace Œ±]
    {_ : MeasurableSpace Œ±} (Œº : Measure Œ±) [IsLocallyFiniteMeasure Œº] :
    Œº.FiniteSpanningSetsIn { K | IsOpen K } where
  set n := ((isCompact_compactCovering Œ± n).exists_open_superset_measure_lt_top Œº).choose
  set_mem n :=
    ((isCompact_compactCovering Œ± n).exists_open_superset_measure_lt_top Œº).choose_spec.2.1
  finite n :=
    ((isCompact_compactCovering Œ± n).exists_open_superset_measure_lt_top Œº).choose_spec.2.2
  spanning :=
    eq_univ_of_subset
      (iUnion_mono fun n =>
        ((isCompact_compactCovering Œ± n).exists_open_superset_measure_lt_top Œº).choose_spec.1)
      (iUnion_compactCovering Œ±)

open TopologicalSpace

/-- A locally finite measure on a second countable topological space admits a finite spanning
sequence of open sets. -/
noncomputable irreducible_def MeasureTheory.Measure.finiteSpanningSetsInOpen' [TopologicalSpace Œ±]
  [SecondCountableTopology Œ±] {m : MeasurableSpace Œ±} (Œº : Measure Œ±) [IsLocallyFiniteMeasure Œº] :
  Œº.FiniteSpanningSetsIn { K | IsOpen K } := by
  suffices H : Nonempty (Œº.FiniteSpanningSetsIn { K | IsOpen K }) from H.some
  cases isEmpty_or_nonempty Œ±
  ¬∑ exact
      ‚ü®{  set := fun _ => ‚àÖ
          set_mem := fun _ => by simp
          finite := fun _ => by simp
          spanning := by simp [eq_iff_true_of_subsingleton] }‚ü©
  inhabit Œ±
  let S : Set (Set Œ±) := { s | IsOpen s ‚àß Œº s < ‚àû }
  obtain ‚ü®T, T_count, TS, hT‚ü© : ‚àÉ T : Set (Set Œ±), T.Countable ‚àß T ‚äÜ S ‚àß ‚ãÉ‚ÇÄ T = ‚ãÉ‚ÇÄ S :=
    isOpen_sUnion_countable S fun s hs => hs.1
  rw [Œº.isTopologicalBasis_isOpen_lt_top.sUnion_eq] at hT
  have T_ne : T.Nonempty := by
    by_contra h'T
    rw [not_nonempty_iff_eq_empty.1 h'T, sUnion_empty] at hT
    simpa only [‚Üê hT] using mem_univ (default : Œ±)
  obtain ‚ü®f, hf‚ü© : ‚àÉ f : ‚Ñï ‚Üí Set Œ±, T = range f := T_count.exists_eq_range T_ne
  have fS : ‚àÄ n, f n ‚àà S := by
    intro n
    apply TS
    rw [hf]
    exact mem_range_self n
  refine
    ‚ü®{  set := f
        set_mem := fun n => (fS n).1
        finite := fun n => (fS n).2
        spanning := ?_ }‚ü©
  refine eq_univ_of_forall fun x => ?_
  obtain ‚ü®t, tT, xt‚ü© : ‚àÉ t : Set Œ±, t ‚àà range f ‚àß x ‚àà t := by
    have : x ‚àà ‚ãÉ‚ÇÄ T := by simp only [hT, mem_univ]
    simpa only [mem_sUnion, exists_prop, ‚Üê hf]
  obtain ‚ü®n, rfl‚ü© : ‚àÉ n : ‚Ñï, f n = t := by simpa only using tT
  exact mem_iUnion_of_mem _ xt

section MeasureIxx

variable [Preorder Œ±] [TopologicalSpace Œ±] [CompactIccSpace Œ±] {m : MeasurableSpace Œ±}
  {Œº : Measure Œ±} [IsLocallyFiniteMeasure Œº] {a b : Œ±}

theorem measure_Icc_lt_top : Œº (Icc a b) < ‚àû :=
  isCompact_Icc.measure_lt_top

theorem measure_Ico_lt_top : Œº (Ico a b) < ‚àû :=
  (measure_mono Ico_subset_Icc_self).trans_lt measure_Icc_lt_top

theorem measure_Ioc_lt_top : Œº (Ioc a b) < ‚àû :=
  (measure_mono Ioc_subset_Icc_self).trans_lt measure_Icc_lt_top

theorem measure_Ioo_lt_top : Œº (Ioo a b) < ‚àû :=
  (measure_mono Ioo_subset_Icc_self).trans_lt measure_Icc_lt_top

end MeasureIxx
