/-
Copyright (c) 2025 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.FieldTheory.LinearDisjoint
import Mathlib.RingTheory.DedekindDomain.Different

/-!
# Disjoint extensions with coprime different ideals

Let `A ‚äÜ B` be a finite extension of Dedekind domains and assume that `A ‚äÜ R‚ÇÅ, R‚ÇÇ ‚äÜ B` are two
subrings such that `Frac R‚ÇÅ ‚äî Frac R‚ÇÇ = Frac B`, `Frac R‚ÇÅ` and `Frac R‚ÇÇ` are linearly disjoint
over `Frac A`, and that `ùìì(R‚ÇÅ/A)` and `ùìì(R‚ÇÇ/A)` are coprime where `ùìì` denotes the different ideal
and `Frac R` denotes the fraction field of a domain `R`.

# Main results and definitions

* `FractionalIdeal.differentIdeal_eq_map_differentIdeal`: `ùìì(B/R‚ÇÅ) = ùìì(R‚ÇÇ/A)`
* `FractionalIdeal.differentIdeal_eq_differentIdeal_mul_differentIdeal_of_isCoprime`:
  `ùìì(B/A) = ùìì(R‚ÇÅ/A) * ùìì(R‚ÇÇ/A)`.
* `Module.Basis.ofIsCoprimeDifferentIdeal`: Construct a `R‚ÇÅ`-basis of `B` by lifting an
  `A`-basis of `R‚ÇÇ`.
* `IsDedekindDomain.range_sup_range_eq_top_of_isCoprime_differentIdeal`: `B` is generated
  (as an `A`-algebra) by `R‚ÇÅ` and `R‚ÇÇ`.

-/

open FractionalIdeal nonZeroDivisors IntermediateField Algebra Module Submodule

variable (A B : Type*) {K L : Type*} [CommRing A] [Field K] [Algebra A K] [IsFractionRing A K]
  [CommRing B] [Field L] [Algebra B L] [Algebra A L] [Algebra K L] [FiniteDimensional K L]
  [IsScalarTower A K L]
variable (R‚ÇÅ R‚ÇÇ : Type*) [CommRing R‚ÇÅ] [CommRing R‚ÇÇ] [Algebra A R‚ÇÅ] [Algebra A R‚ÇÇ] [Algebra R‚ÇÅ B]
  [Algebra R‚ÇÇ B] [Algebra R‚ÇÅ L] [Algebra R‚ÇÇ L] [IsScalarTower A R‚ÇÅ L] [IsScalarTower R‚ÇÅ B L]
  [IsScalarTower R‚ÇÇ B L] [Module.Finite A R‚ÇÇ]
variable {F‚ÇÅ F‚ÇÇ : IntermediateField K L} [Algebra R‚ÇÅ F‚ÇÅ] [Algebra R‚ÇÇ F‚ÇÇ] [NoZeroSMulDivisors R‚ÇÅ F‚ÇÅ]
  [IsScalarTower A F‚ÇÇ L] [IsScalarTower A R‚ÇÇ F‚ÇÇ] [IsScalarTower R‚ÇÅ F‚ÇÅ L] [IsScalarTower R‚ÇÇ F‚ÇÇ L]
  [Algebra.IsSeparable K F‚ÇÇ] [Algebra.IsSeparable F‚ÇÅ L]

theorem Submodule.traceDual_le_span_map_traceDual [Module.Free A R‚ÇÇ]
    [IsLocalization (Algebra.algebraMapSubmonoid R‚ÇÇ A‚Å∞) F‚ÇÇ] (h‚ÇÅ : F‚ÇÅ.LinearDisjoint F‚ÇÇ)
    (h‚ÇÇ : F‚ÇÅ ‚äî F‚ÇÇ = ‚ä§) :
    (traceDual R‚ÇÅ F‚ÇÅ (1 : Submodule B L)).restrictScalars R‚ÇÅ ‚â§
      span R‚ÇÅ (algebraMap F‚ÇÇ L '' (traceDual A K (1 : Submodule R‚ÇÇ F‚ÇÇ))) := by
  intro x hx
  have h‚ÇÇ' : F‚ÇÅ.toSubalgebra ‚äî F‚ÇÇ.toSubalgebra = ‚ä§ := by
    simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg IntermediateField.toSubalgebra h‚ÇÇ
  let b‚ÇÇ := (Free.chooseBasis A R‚ÇÇ).localizationLocalization K A‚Å∞ F‚ÇÇ
  let B‚ÇÅ := h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ
  have h_main : x ‚àà span R‚ÇÅ (Set.range B‚ÇÅ.traceDual) := by
    rw [B‚ÇÅ.traceDual.mem_span_iff_repr_mem R‚ÇÅ x]
    intro i
    rw [B‚ÇÅ.traceDual_repr_apply]
    refine mem_traceDual.mp hx _ ?_
    rw [LinearDisjoint.basisOfBasisRight_apply, Basis.localizationLocalization_apply,
      ‚Üê IsScalarTower.algebraMap_apply, IsScalarTower.algebraMap_apply R‚ÇÇ B L, mem_one]
    exact ‚ü®_, rfl‚ü©
  have h : Set.range B‚ÇÅ.traceDual =
      Set.range (IsScalarTower.toAlgHom A F‚ÇÇ L ‚àò b‚ÇÇ.traceDual) := by
    refine congr_arg Set.range <| B‚ÇÅ.traceDual_eq_iff.mpr fun i j ‚Ü¶ ?_
    rw [LinearDisjoint.basisOfBasisRight_apply, traceForm_apply, Function.comp_apply,
      IsScalarTower.coe_toAlgHom', ‚Üê map_mul, h‚ÇÅ.trace_algebraMap h‚ÇÇ, b‚ÇÇ.trace_traceDual_mul,
      MonoidWithZeroHom.map_ite_one_zero]
  rwa [‚Üê span_span_of_tower A R‚ÇÅ, h, Set.range_comp, ‚Üê map_span,
    ‚Üê traceDual_span_of_basis A (1 : Submodule R‚ÇÇ F‚ÇÇ) b‚ÇÇ
      (by rw [Basis.localizationLocalization_span K A‚Å∞ F‚ÇÇ]; ext; simp)] at h_main

attribute [local instance] FractionRing.liftAlgebra

variable [IsDomain A] [IsDedekindDomain B] [IsDedekindDomain R‚ÇÅ] [IsDedekindDomain R‚ÇÇ]
    [IsFractionRing B L] [IsFractionRing R‚ÇÅ F‚ÇÅ] [IsFractionRing R‚ÇÇ F‚ÇÇ] [IsIntegrallyClosed A]
    [IsIntegralClosure B R‚ÇÅ L] [NoZeroSMulDivisors R‚ÇÅ B] [NoZeroSMulDivisors R‚ÇÇ B]

theorem FractionalIdeal.differentIdeal_dvd_map_differentIdeal [Algebra.IsIntegral R‚ÇÇ B]
    [Module.Free A R‚ÇÇ] [IsLocalization (Algebra.algebraMapSubmonoid R‚ÇÇ A‚Å∞) F‚ÇÇ]
    (h‚ÇÅ : F‚ÇÅ.LinearDisjoint F‚ÇÇ) (h‚ÇÇ : F‚ÇÅ ‚äî F‚ÇÇ = ‚ä§) :
    differentIdeal R‚ÇÅ B ‚à£ Ideal.map (algebraMap R‚ÇÇ B) (differentIdeal A R‚ÇÇ) := by
  have : Algebra.IsSeparable (FractionRing A) (FractionRing R‚ÇÇ) := by
    refine Algebra.IsSeparable.of_equiv_equiv (FractionRing.algEquiv A K).symm.toRingEquiv
          (FractionRing.algEquiv R‚ÇÇ F‚ÇÇ).symm.toRingEquiv ?_
    ext _
    exact IsFractionRing.algEquiv_commutes (FractionRing.algEquiv A K).symm
      (FractionRing.algEquiv R‚ÇÇ ‚Ü•F‚ÇÇ).symm _
  rw [Ideal.dvd_iff_le, ‚Üê coeIdeal_le_coeIdeal L, coeIdeal_differentIdeal R‚ÇÅ F‚ÇÅ L B,
    ‚Üê extendedHom‚Çê_coeIdeal_eq_map L B (K := F‚ÇÇ), le_inv_comm _ (by simp), ‚Üê map_inv‚ÇÄ,
    coeIdeal_differentIdeal A K, inv_inv, ‚Üê coe_le_coe, coe_dual_one, coe_extendedHom‚Çê_eq_span,
    ‚Üê coeToSet_coeToSubmodule, coe_dual_one]
  ¬∑ have := Submodule.span_mono (R := B) <| traceDual_le_span_map_traceDual A B R‚ÇÅ R‚ÇÇ h‚ÇÅ h‚ÇÇ
    rwa [‚Üê span_coe_eq_restrictScalars, span_span_of_tower, span_span_of_tower, span_eq] at this
  ¬∑ exact (_root_.map_ne_zero _).mpr <| coeIdeal_eq_zero.not.mpr differentIdeal_ne_bot

variable [Algebra A B] [Module.Finite A B] [NoZeroSMulDivisors A B] [NoZeroSMulDivisors A R‚ÇÅ]
  [NoZeroSMulDivisors A R‚ÇÇ] [Module.Finite A R‚ÇÅ] [Module.Finite R‚ÇÇ B] [IsScalarTower A R‚ÇÇ B]
  [Module.Finite R‚ÇÅ B] [Algebra.IsSeparable (FractionRing A) (FractionRing B)]
  [IsScalarTower A R‚ÇÅ B]

namespace FractionalIdeal

theorem map_differentIdeal_dvd_differentIdeal
    (h : IsCoprime ((differentIdeal A R‚ÇÅ).map (algebraMap R‚ÇÅ B))
      ((differentIdeal A R‚ÇÇ).map (algebraMap R‚ÇÇ B))) :
    Ideal.map (algebraMap R‚ÇÇ B) (differentIdeal A R‚ÇÇ) ‚à£ differentIdeal R‚ÇÅ B :=
  have := (differentIdeal_eq_differentIdeal_mul_differentIdeal A R‚ÇÇ B).symm.trans
    (differentIdeal_eq_differentIdeal_mul_differentIdeal A R‚ÇÅ B)
  h.symm.dvd_of_dvd_mul_right (dvd_of_mul_left_eq _ this)

theorem differentIdeal_eq_map_differentIdeal [Module.Free A R‚ÇÇ] (h‚ÇÅ : F‚ÇÅ.LinearDisjoint F‚ÇÇ)
    (h‚ÇÇ : F‚ÇÅ ‚äî F‚ÇÇ = ‚ä§) (h‚ÇÉ : IsCoprime ((differentIdeal A R‚ÇÅ).map (algebraMap R‚ÇÅ B))
      ((differentIdeal A R‚ÇÇ).map (algebraMap R‚ÇÇ B))) :
    differentIdeal R‚ÇÅ B = Ideal.map (algebraMap R‚ÇÇ B) (differentIdeal A R‚ÇÇ) := by
  apply dvd_antisymm
  ¬∑ exact differentIdeal_dvd_map_differentIdeal A B R‚ÇÅ R‚ÇÇ h‚ÇÅ h‚ÇÇ
  ¬∑ exact map_differentIdeal_dvd_differentIdeal A B R‚ÇÅ R‚ÇÇ h‚ÇÉ

/--
Let `A ‚äÜ B` be a finite extension of Dedekind domains and assume that `A ‚äÜ R‚ÇÅ, R‚ÇÇ ‚äÜ B` are two
subrings such that `Frac R‚ÇÅ ‚äî Frac R‚ÇÇ = Frac B`, `Frac R‚ÇÅ` and `Frac R‚ÇÇ` are linearly disjoint
over `Frac A`, and that `ùìì(R‚ÇÅ/A)` and `ùìì(R‚ÇÇ/A)` are coprime where `ùìì` denotes the different ideal
and `Frac R` denotes the fraction field of a domain `R`.
We have `ùìì(B/A) = ùìì(R‚ÇÅ/A) * ùìì(R‚ÇÇ/A)`.
-/
theorem differentIdeal_eq_differentIdeal_mul_differentIdeal_of_isCoprime
    [Module.Free A R‚ÇÇ] (h‚ÇÅ : F‚ÇÅ.LinearDisjoint F‚ÇÇ) (h‚ÇÇ : F‚ÇÅ ‚äî F‚ÇÇ = ‚ä§)
    (h‚ÇÉ : IsCoprime ((differentIdeal A R‚ÇÅ).map (algebraMap R‚ÇÅ B))
      ((differentIdeal A R‚ÇÇ).map (algebraMap R‚ÇÇ B))) :
    differentIdeal A B = differentIdeal R‚ÇÅ B * differentIdeal R‚ÇÇ B := by
  have := differentIdeal_eq_differentIdeal_mul_differentIdeal A R‚ÇÇ B
  rwa [‚Üê differentIdeal_eq_map_differentIdeal A B R‚ÇÅ R‚ÇÇ h‚ÇÅ h‚ÇÇ h‚ÇÉ,
    mul_comm] at this

end FractionalIdeal

theorem Submodule.traceDual_eq_span_map_traceDual_of_linearDisjoint [Module.Free A R‚ÇÇ]
    [IsLocalization (Algebra.algebraMapSubmonoid R‚ÇÇ A‚Å∞) F‚ÇÇ] (h‚ÇÅ : F‚ÇÅ.LinearDisjoint F‚ÇÇ)
    (h‚ÇÇ : F‚ÇÅ ‚äî F‚ÇÇ = ‚ä§) (h‚ÇÉ : IsCoprime ((differentIdeal A R‚ÇÅ).map (algebraMap R‚ÇÅ B))
      ((differentIdeal A R‚ÇÇ).map (algebraMap R‚ÇÇ B))) :
    span R‚ÇÅ (algebraMap F‚ÇÇ L '' (traceDual A K (1 : Submodule R‚ÇÇ F‚ÇÇ))) =
      (traceDual R‚ÇÅ F‚ÇÅ (1 : Submodule B L)).restrictScalars R‚ÇÅ := by
  have : Algebra.IsSeparable (FractionRing A) (FractionRing R‚ÇÇ) := by
    refine Algebra.IsSeparable.of_equiv_equiv (FractionRing.algEquiv A K).symm.toRingEquiv
          (FractionRing.algEquiv R‚ÇÇ F‚ÇÇ).symm.toRingEquiv ?_
    ext x
    exact IsFractionRing.algEquiv_commutes (FractionRing.algEquiv A K).symm
      (FractionRing.algEquiv R‚ÇÇ ‚Ü•F‚ÇÇ).symm _
  suffices span B (algebraMap F‚ÇÇ L '' (traceDual A K (1 : Submodule R‚ÇÇ F‚ÇÇ))) ‚â§
      traceDual R‚ÇÅ F‚ÇÅ (1 : Submodule B L) by
    apply le_antisymm
    ¬∑ refine SetLike.coe_subset_coe.mp (subset_trans ?_ this)
      rw [‚Üê Submodule.span_span_of_tower R‚ÇÅ B]
      exact Submodule.subset_span
    ¬∑ exact traceDual_le_span_map_traceDual A B R‚ÇÅ R‚ÇÇ h‚ÇÅ h‚ÇÇ
  have := dvd_of_eq <| (differentIdeal_eq_map_differentIdeal A B R‚ÇÅ R‚ÇÇ h‚ÇÅ h‚ÇÇ h‚ÇÉ).symm
  rwa [Ideal.dvd_iff_le, ‚Üê coeIdeal_le_coeIdeal (K := L), coeIdeal_differentIdeal R‚ÇÅ F‚ÇÅ,
    inv_le_comm, ‚Üê extendedHom‚Çê_coeIdeal_eq_map (K := F‚ÇÇ), coeIdeal_differentIdeal A K, map_inv‚ÇÄ,
    inv_inv, ‚Üê coe_le_coe, coe_extendedHom‚Çê_eq_span, coe_dual_one, ‚Üê coeToSet_coeToSubmodule,
    coe_dual_one] at this
  ¬∑ simp
  ¬∑ rw [‚Üê extendedHom‚Çê_coeIdeal_eq_map (K := F‚ÇÇ), ne_eq, extendedHom‚Çê_eq_zero_iff]
    rw [coeIdeal_eq_zero]
    exact differentIdeal_ne_bot

namespace Module.Basis

private theorem ofIsCoprimeDifferentIdeal_aux [Module.Free A R‚ÇÇ]
    (h‚ÇÅ : F‚ÇÅ.LinearDisjoint F‚ÇÇ) (h‚ÇÇ : F‚ÇÅ.toSubalgebra ‚äî F‚ÇÇ.toSubalgebra = ‚ä§)
    (h‚ÇÉ : IsCoprime ((differentIdeal A R‚ÇÅ).map (algebraMap R‚ÇÅ B))
      ((differentIdeal A R‚ÇÇ).map (algebraMap R‚ÇÇ B))) {Œπ : Type*} (b : Basis Œπ K F‚ÇÇ)
    (hb : span A (Set.range b) = LinearMap.range (IsScalarTower.toAlgHom A R‚ÇÇ F‚ÇÇ)) :
    span R‚ÇÅ (Set.range (h‚ÇÅ.basisOfBasisRight h‚ÇÇ b)) =
      Submodule.restrictScalars R‚ÇÅ (1 : Submodule B L) := by
  classical
  have h‚ÇÇ' : F‚ÇÅ ‚äî F‚ÇÇ = ‚ä§ := by
    rwa [‚Üê sup_toSubalgebra_of_isAlgebraic_right, ‚Üê top_toSubalgebra, toSubalgebra_inj] at h‚ÇÇ
  have : Finite Œπ := Module.Finite.finite_basis b
  have h_main := congr_arg (Submodule.restrictScalars R‚ÇÅ) <|
    congr_arg coeToSubmodule <| (1 : FractionalIdeal B‚Å∞ L).dual_dual R‚ÇÅ F‚ÇÅ
  rw [‚Üê coe_one, ‚Üê h_main, coe_dual _ _ (by simp), coe_dual_one, restrictScalars_traceDual,
    ‚Üê traceDual_eq_span_map_traceDual_of_linearDisjoint A B R‚ÇÅ R‚ÇÇ h‚ÇÅ h‚ÇÇ' h‚ÇÉ,
    ‚Üê coe_restrictScalars A, traceDual_span_of_basis A (1 : Submodule R‚ÇÇ F‚ÇÇ) b,
    ‚Üê IsScalarTower.coe_toAlgHom' A F‚ÇÇ L, ‚Üê map_coe, map_span, span_span_of_tower,
    IsScalarTower.coe_toAlgHom', ‚Üê Set.range_comp]
  ¬∑ have : (h‚ÇÅ.basisOfBasisRight h‚ÇÇ b).traceDual = algebraMap F‚ÇÇ L ‚àò b.traceDual := by
      refine Basis.traceDual_eq_iff.mpr fun i j ‚Ü¶ ?_
      rw [Function.comp_apply, h‚ÇÅ.basisOfBasisRight_apply, traceForm_apply, ‚Üê map_mul,
        h‚ÇÅ.trace_algebraMap h‚ÇÇ', b.trace_traceDual_mul i j, MonoidWithZeroHom.map_ite_one_zero]
    rw [‚Üê this, (traceForm F‚ÇÅ L).dualSubmodule_span_of_basis (traceForm_nondegenerate F‚ÇÅ L),
      ‚Üê Basis.traceDual_def, Basis.traceDual_traceDual]
  ¬∑ rw [hb]
    ext; simp

/--
Let `A ‚äÜ B` be a finite extension of Dedekind domains and assume that `A ‚äÜ R‚ÇÅ, R‚ÇÇ ‚äÜ B` are two
subrings such that `Frac R‚ÇÅ ‚äî Frac R‚ÇÇ = Frac B`, `Frac R‚ÇÅ` and `Frac R‚ÇÇ` are linearly disjoint
over `Frac A`, and that `ùìì(R‚ÇÅ/A)` and `ùìì(R‚ÇÇ/A)` are coprime where `ùìì` denotes the different ideal
and `Frac R` denotes the fraction field of a domain `R`.
Construct a `R‚ÇÅ`-basis of `B` by lifting an `A`-basis of `R‚ÇÇ`.
-/
noncomputable def ofIsCoprimeDifferentIdeal (h‚ÇÅ : F‚ÇÅ.LinearDisjoint F‚ÇÇ)
    (h‚ÇÇ : F‚ÇÅ.toSubalgebra ‚äî F‚ÇÇ.toSubalgebra = ‚ä§)
    (h‚ÇÉ : IsCoprime ((differentIdeal A R‚ÇÅ).map (algebraMap R‚ÇÅ B))
      ((differentIdeal A R‚ÇÇ).map (algebraMap R‚ÇÇ B))) {Œπ : Type*} (b : Basis Œπ A R‚ÇÇ) :
    Basis Œπ R‚ÇÅ B :=
  have : Module.Free A R‚ÇÇ := Free.of_basis b
  let v := fun i : Œπ ‚Ü¶ algebraMap R‚ÇÇ B (b i)
  let b‚ÇÇ : Basis Œπ K F‚ÇÇ := b.localizationLocalization K A‚Å∞ F‚ÇÇ
  have P‚ÇÅ : LinearIndependent R‚ÇÅ v := by
    rw [‚Üê LinearMap.linearIndependent_iff (IsScalarTower.toAlgHom R‚ÇÅ B L).toLinearMap
      (LinearMap.ker_eq_bot.mpr <| FaithfulSMul.algebraMap_injective _ _),
      LinearIndependent.iff_fractionRing R‚ÇÅ F‚ÇÅ, Function.comp_def]
    simp_rw [AlgHom.toLinearMap_apply, IsScalarTower.coe_toAlgHom', v,
      ‚Üê IsScalarTower.algebraMap_apply, IsScalarTower.algebraMap_apply R‚ÇÇ F‚ÇÇ L,
      ‚Üê b.localizationLocalization_apply K A‚Å∞ F‚ÇÇ]
    exact h‚ÇÅ.linearIndependent_right b‚ÇÇ.linearIndependent
  have P‚ÇÇ : ‚ä§ ‚â§ span R‚ÇÅ (Set.range v) := by
    rw [top_le_iff]
    apply map_injective_of_injective (by exact FaithfulSMul.algebraMap_injective B L :
      Function.Injective (IsScalarTower.toAlgHom R‚ÇÅ B L))
    rw [map_span, ‚Üê Set.range_comp]
    convert Module.Basis.ofIsCoprimeDifferentIdeal_aux A B R‚ÇÅ R‚ÇÇ h‚ÇÅ h‚ÇÇ h‚ÇÉ b‚ÇÇ
      (b.localizationLocalization_span K A‚Å∞ F‚ÇÇ)
    ¬∑ ext
      simp [b‚ÇÇ, v, ‚Üê IsScalarTower.algebraMap_apply]
    ¬∑ ext; simp
  Basis.mk P‚ÇÅ P‚ÇÇ

@[simp]
theorem ofIsCoprimeDifferentIdeal_apply (h‚ÇÅ : F‚ÇÅ.LinearDisjoint F‚ÇÇ)
    (h‚ÇÇ : F‚ÇÅ.toSubalgebra ‚äî F‚ÇÇ.toSubalgebra = ‚ä§)
    (h‚ÇÉ : IsCoprime ((differentIdeal A R‚ÇÅ).map (algebraMap R‚ÇÅ B))
      ((differentIdeal A R‚ÇÇ).map (algebraMap R‚ÇÇ B))) {Œπ : Type*} (b : Basis Œπ A R‚ÇÇ) (i : Œπ) :
    b.ofIsCoprimeDifferentIdeal A B R‚ÇÅ R‚ÇÇ h‚ÇÅ h‚ÇÇ h‚ÇÉ i = algebraMap R‚ÇÇ B (b i) := by
  simp [Module.Basis.ofIsCoprimeDifferentIdeal]

end Module.Basis

namespace IsDedekindDomain

/--
Let `A ‚äÜ B` be a finite extension of Dedekind domains and assume that `A ‚äÜ R‚ÇÅ, R‚ÇÇ ‚äÜ B` are two
subrings such that `Frac R‚ÇÅ ‚äî Frac R‚ÇÇ = Frac B`, `Frac R‚ÇÅ` and `Frac R‚ÇÇ` are linearly disjoint
over `Frac A`, and that `ùìì(R‚ÇÅ/A)` and `ùìì(R‚ÇÇ/A)` are coprime where `ùìì` denotes the different ideal
and `Frac R` denotes the fraction field of a domain `R`.
`B` is generated (as an `A`-algebra) by `R‚ÇÅ` and `R‚ÇÇ`.
-/
theorem range_sup_range_eq_top_of_isCoprime_differentIdeal
    (h‚ÇÅ : F‚ÇÅ.LinearDisjoint F‚ÇÇ)
    (h‚ÇÇ : F‚ÇÅ.toSubalgebra ‚äî F‚ÇÇ.toSubalgebra = ‚ä§)
    (h‚ÇÉ : IsCoprime ((differentIdeal A R‚ÇÅ).map (algebraMap R‚ÇÅ B))
      ((differentIdeal A R‚ÇÇ).map (algebraMap R‚ÇÇ B))) [Module.Free A R‚ÇÇ] :
    (IsScalarTower.toAlgHom A R‚ÇÅ B).range ‚äî
      (IsScalarTower.toAlgHom A R‚ÇÇ B).range = ‚ä§ := by
  let B‚ÇÅ := (Free.chooseBasis A R‚ÇÇ).ofIsCoprimeDifferentIdeal A B R‚ÇÅ R‚ÇÇ h‚ÇÅ h‚ÇÇ h‚ÇÉ
  refine Algebra.eq_top_iff.mpr fun x ‚Ü¶ ?_
  rw [‚Üê B‚ÇÅ.sum_repr x]
  refine Subalgebra.sum_mem _ fun i _ ‚Ü¶ ?_
  rw [Algebra.smul_def]
  exact Subalgebra.mul_mem _ (Algebra.mem_sup_left (by simp)) (Algebra.mem_sup_right (by simp [B‚ÇÅ]))

theorem adjoin_union_eq_top_of_isCoprime_differentialIdeal [Module.Free A R‚ÇÇ]
    (h‚ÇÅ : F‚ÇÅ.LinearDisjoint F‚ÇÇ) (h‚ÇÇ : F‚ÇÅ.toSubalgebra ‚äî F‚ÇÇ.toSubalgebra = ‚ä§)
    (h‚ÇÉ : IsCoprime ((differentIdeal A R‚ÇÅ).map (algebraMap R‚ÇÅ B))
      ((differentIdeal A R‚ÇÇ).map (algebraMap R‚ÇÇ B))) {s : Set R‚ÇÅ} {t : Set R‚ÇÇ}
    (hs : Algebra.adjoin A s = ‚ä§) (ht : Algebra.adjoin A t = ‚ä§) :
    Algebra.adjoin A (algebraMap R‚ÇÅ B '' s ‚à™ algebraMap R‚ÇÇ B '' t) = ‚ä§ := by
  rw [Algebra.adjoin_union, ‚Üê IsScalarTower.coe_toAlgHom' A R‚ÇÅ, ‚Üê IsScalarTower.coe_toAlgHom' A R‚ÇÇ,
    ‚Üê AlgHom.map_adjoin, hs, ‚Üê AlgHom.map_adjoin, ht, Algebra.map_top, Algebra.map_top]
  exact range_sup_range_eq_top_of_isCoprime_differentIdeal A B R‚ÇÅ R‚ÇÇ h‚ÇÅ h‚ÇÇ h‚ÇÉ

end IsDedekindDomain
