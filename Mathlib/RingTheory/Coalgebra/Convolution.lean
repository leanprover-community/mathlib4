/-
Copyright (c) 2025 Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Yunzhou Xie. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Yunzhou Xie
-/
import Mathlib.Algebra.Algebra.Bilinear
import Mathlib.LinearAlgebra.TensorProduct.Tower
import Mathlib.RingTheory.Coalgebra.Hom

/-!
# Convolution product on linear maps from a coalgebra to an algebra

This file constructs the ring structure on linear maps `C ‚Üí A` where `C` is a coalgebra and `A` an
algebra, where multiplication is given by `(f * g)(x) = ‚àë f x‚Çç‚ÇÅ‚Çé * g x‚Çç‚ÇÇ‚Çé` in Sweedler notation or
```
         |
         Œº
|   |   / \
f * g = f g
|   |   \ /
         Œ¥
         |
```
diagrammatically, where `Œº` stands for multiplication and `Œ¥` for comultiplication.

## Implementation notes

Note that in the case `C = A` this convolution product conflicts with the (unfortunately global!)
group instance on `Module.End R A` with multiplication defined as composition.
As a result, the convolution product is scoped to `ConvolutionProduct`.
-/

suppress_compilation

open Coalgebra TensorProduct
open scoped RingTheory.LinearMap

variable {R A B C : Type*} [CommSemiring R]

namespace LinearMap
section NonUnitalNonAssocSemiring
variable
  [NonUnitalNonAssocSemiring A] [Module R A] [SMulCommClass R A A] [IsScalarTower R A A]
  [AddCommMonoid C] [Module R C] [CoalgebraStruct R C]

/-- Convolution product on linear maps from a coalgebra to an algebra. -/
abbrev convMul : Mul (C ‚Üí‚Çó[R] A) where mul f g := mul' R A ‚àò‚Çó TensorProduct.map f g ‚àò‚Çó comul

scoped[ConvolutionProduct] attribute [instance] LinearMap.convMul

open scoped ConvolutionProduct

lemma convMul_def (f g : C ‚Üí‚Çó[R] A) : f * g = mul' R A ‚àò‚Çó TensorProduct.map f g ‚àò‚Çó comul := rfl

@[simp]
lemma convMul_apply (f g : C ‚Üí‚Çó[R] A) (c : C) : (f * g) c = mul' R A (.map f g (comul c)) := rfl

lemma _root_.Coalgebra.Repr.convMul_apply {a : C} (ùì° : Coalgebra.Repr R a) (f g : C ‚Üí‚Çó[R] A) :
    (f * g) a = ‚àë i ‚àà ùì°.index, f (ùì°.left i) * g (ùì°.right i) := by
  simp [convMul_def, ‚Üê ùì°.eq]

/-- Non-unital and non-associative convolution semiring structure on linear maps from a
coalgebra to a non-unital non-associative algebra. -/
abbrev convNonUnitalNonAssocSemiring : NonUnitalNonAssocSemiring (C ‚Üí‚Çó[R] A) where
  left_distrib f g h := by ext; simp [map_add_right]
  right_distrib f g h := by ext; simp [map_add_left]
  zero_mul f := by ext; simp
  mul_zero f := by ext; simp

scoped[ConvolutionProduct] attribute [instance] LinearMap.convNonUnitalNonAssocSemiring

@[simp] lemma toSpanSingleton_convMul_toSpanSingleton (x y : A) :
    toSpanSingleton R A x * toSpanSingleton R A y = toSpanSingleton R A (x * y) := by ext; simp

end NonUnitalNonAssocSemiring

open scoped ConvolutionProduct

section NonUnitalNonAssocRing
variable [NonUnitalNonAssocRing A] [Module R A] [SMulCommClass R A A] [IsScalarTower R A A]
  [AddCommMonoid C] [Module R C] [CoalgebraStruct R C]

/-- Non-unital and non-associative convolution ring structure on linear maps from a
coalgebra to a non-unital and non-associative algebra. -/
abbrev convNonUnitalNonAssocRing : NonUnitalNonAssocRing (C ‚Üí‚Çó[R] A) where

scoped[ConvolutionProduct] attribute [instance] LinearMap.convNonUnitalNonAssocRing

end NonUnitalNonAssocRing

section NonUnitalSemiring
variable [NonUnitalSemiring A] [Module R A] [SMulCommClass R A A] [IsScalarTower R A A]
  [AddCommMonoid C] [Module R C] [Coalgebra R C]

lemma nonUnitalAlgHom_comp_convMul_distrib
    [NonUnitalNonAssocSemiring B] [Module R B] [SMulCommClass R B B] [IsScalarTower R B B]
    (h : A ‚Üí‚Çô‚Çê[R] B) (f g : C ‚Üí‚Çó[R] A) :
    (h : A ‚Üí‚Çó[R] B).comp (f * g) = .comp h f * .comp h g := by
  simp [convMul_def, map_comp, ‚Üê comp_assoc, NonUnitalAlgHom.comp_mul']

lemma convMul_comp_coalgHom_distrib [AddCommMonoid B] [Module R B] [CoalgebraStruct R B]
    (f g : C ‚Üí‚Çó[R] A) (h : B ‚Üí‚Çóc[R] C) :
    (f * g).comp h.toLinearMap = f.comp h.toLinearMap * g.comp h.toLinearMap := by
  simp [convMul_def, map_comp, comp_assoc]

/-- Non-unital convolution semiring structure on linear maps from a coalgebra to a
non-unital algebra. -/
abbrev convNonUnitalSemiring : NonUnitalSemiring (C ‚Üí‚Çó[R] A) where
  mul_assoc f g h := calc
        Œº ‚àò‚Çó (Œº ‚àò‚Çó (f ‚äó‚Çò g) ‚àò‚Çó Œ¥ ‚äó‚Çò h) ‚àò‚Çó Œ¥
    _ = (Œº ‚àò‚Çó .rTensor _ Œº) ‚àò‚Çó ((f ‚äó‚Çò g) ‚äó‚Çò h) ‚àò‚Çó (.rTensor _ Œ¥ ‚àò‚Çó Œ¥) := by ext; simp
    _ = (Œº ‚àò‚Çó rTensor _ Œº)
        ‚àò‚Çó (((f ‚äó‚Çò g) ‚äó‚Çò h) ‚àò‚Çó (TensorProduct.assoc R C C C).symm) ‚àò‚Çó lTensor C Œ¥ ‚àò‚Çó Œ¥ := by
      simp only [comp_assoc, coassoc_symm]
    _ = (Œº ‚àò‚Çó rTensor A Œº ‚àò‚Çó ‚Üë(TensorProduct.assoc R A A A).symm)
        ‚àò‚Çó (f ‚äó‚Çò (g ‚äó‚Çò h)) ‚àò‚Çó lTensor C Œ¥ ‚àò‚Çó Œ¥ := by
      simp only [map_map_comp_assoc_symm_eq, comp_assoc]
    _ = (Œº ‚àò‚Çó .lTensor _ Œº) ‚àò‚Çó (f ‚äó‚Çò (g ‚äó‚Çò h)) ‚àò‚Çó (lTensor C Œ¥ ‚àò‚Çó Œ¥) := by
      congr 1
      ext
      simp [mul_assoc]
    _ = Œº ‚àò‚Çó (f ‚äó‚Çò Œº ‚àò‚Çó (g ‚äó‚Çò h) ‚àò‚Çó Œ¥) ‚àò‚Çó Œ¥ := by ext; simp

scoped[ConvolutionProduct] attribute [instance] LinearMap.convNonUnitalSemiring

end NonUnitalSemiring

section NonUnitalRing
variable [NonUnitalRing A] [AddCommMonoid C] [Module R A] [SMulCommClass R A A]
  [IsScalarTower R A A] [Module R C] [Coalgebra R C]

/-- Non-unital convolution ring structure on linear maps from a coalgebra to a
non-unital algebra. -/
abbrev convNonUnitalRing : NonUnitalRing (C ‚Üí‚Çó[R] A) where

scoped[ConvolutionProduct] attribute [instance] LinearMap.convNonUnitalRing

end NonUnitalRing

section Semiring
variable [Semiring A] [Algebra R A] [Semiring B] [Algebra R B] [AddCommMonoid C] [Module R C]

section CoalgebraStruct
variable [CoalgebraStruct R C]

lemma algHom_comp_convMul_distrib (h : A ‚Üí‚Çê B) (f g : C ‚Üí‚Çó[R] A) :
    h.toLinearMap.comp (f * g) = h.toLinearMap.comp f * h.toLinearMap.comp g := by
  simp [convMul_def, map_comp, ‚Üê comp_assoc, AlgHom.comp_mul']

end CoalgebraStruct

variable [Coalgebra R C]

/-- Convolution unit on linear maps from a coalgebra to an algebra. -/
abbrev convOne : One (C ‚Üí‚Çó[R] A) where one := Algebra.linearMap R A ‚àò‚Çó counit

scoped[ConvolutionProduct] attribute [instance] LinearMap.convOne

lemma convOne_def : (1 : C ‚Üí‚Çó[R] A) = Algebra.linearMap R A ‚àò‚Çó counit := rfl

@[simp] lemma convOne_apply (c : C) : (1 : C ‚Üí‚Çó[R] A) c = algebraMap R A (counit (R := R) c) := rfl

/-- Convolution semiring structure on linear maps from a coalgebra to an algebra. -/
abbrev convSemiring : Semiring (C ‚Üí‚Çó[R] A) where
  one_mul f := by ext; simp [convOne_def, ‚Üê map_comp_rTensor]
  mul_one f := by ext; simp [convOne_def, ‚Üê map_comp_lTensor]

scoped[ConvolutionProduct] attribute [instance] LinearMap.convSemiring

end Semiring

section CommSemiring
variable [CommSemiring A] [AddCommMonoid C] [Algebra R A] [Module R C] [Coalgebra R C]
  [IsCocomm R C]

/-- Commutative convolution semiring structure on linear maps from a cocommutative coalgebra to an
algebra. -/
abbrev convCommSemiring : CommSemiring (C ‚Üí‚Çó[R] A) where
  mul_comm f g := by ext x; rw [convMul_apply, ‚Üê comm_comul R x, map_comm, mul'_comm, convMul_apply]

scoped[ConvolutionProduct] attribute [instance] LinearMap.convCommSemiring

end CommSemiring

section Ring
variable [Ring A] [AddCommMonoid C] [Algebra R A] [Module R C] [Coalgebra R C]

/-- Convolution ring structure on linear maps from a coalgebra to an algebra. -/
abbrev convRing : Ring (C ‚Üí‚Çó[R] A) where

scoped[ConvolutionProduct] attribute [instance] LinearMap.convRing

end Ring

section CommRing
variable [CommRing A] [AddCommMonoid C] [Algebra R A] [Module R C] [Coalgebra R C] [IsCocomm R C]

/-- Commutative convolution ring structure on linear maps from a cocommutative coalgebra to an
algebra. -/
abbrev convCommRing : CommRing (C ‚Üí‚Çó[R] A) where

scoped[ConvolutionProduct] attribute [instance] LinearMap.convCommRing

end CommRing
end LinearMap
