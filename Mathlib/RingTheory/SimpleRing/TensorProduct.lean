/-
Copyright (c) 2025 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang, Yunzhou Xie
-/
import Mathlib.Algebra.Central.Basic
import Mathlib.LinearAlgebra.Basis.VectorSpace
import Mathlib.RingTheory.Flat.Basic
import Mathlib.RingTheory.TwoSidedIdeal.SpanAsSum

/-!
# Tensor product of simple algebras

# Tensor product of simple algebras over a field

In this file, we show that the tensor product of a simple algebra and a central simple algebra is
simple, which in particular implies that the tensor product of two central simple algebras is
another central simple algebra. This is a prerequisite for defining the group law of the Brauer
group.

## Main Results

* `TensorProduct.nontrivial`: The tensor product of two non-trivial algebras is non-trivial.
* `TensorProduct.simple`: The tensor product of a simple algebra and a central simple algebra
  is simple.

## References

* [StackProject 074B](https://stacks.math.columbia.edu/tag/074B)

## Tags
Noncommutative algebra, tensor product, simple algebra, central simple algebra

-/

universe u v v‚ÇÅ v‚ÇÇ v‚ÇÉ

variable (K : Type u) [Field K]
  {A : Type v‚ÇÅ} {B : Type v‚ÇÇ} {C : Type v‚ÇÉ} [Ring A] [Ring B] [Ring C]
  [Algebra K A] [Algebra K B] [Algebra K C]

open scoped TensorProduct

variable {K} in
/--
a non-zero element in an ideal that can be represented as a sum of tensor products of `n`-terms.
-/
structure is_obtainable_by_sum_tmul
    {ŒπA A B : Type*} [Ring A] [Algebra K A] [Ring B] [Algebra K B]
    (x : A ‚äó[K] B) (ùíú : Basis ŒπA K A) (I : TwoSidedIdeal (A ‚äó[K] B)) (n : ‚Ñï) : Prop where
  mem : x ‚àà I
  ne_zero : x ‚â† 0
  rep : ‚àÉ (s : Finset ŒπA) (_ : s.card = n) (f : ŒπA ‚Üí B),
    x = ‚àë i ‚àà s, ùíú i ‚äó‚Çú[K] f i

variable {K} in
lemma is_obtainable_by_sum_tmul.exists_minimal_element
    {A B : Type*} [Ring A] [Algebra K A] [Ring B] [Algebra K B]
    (ŒπA : Type*) (ùíú : Basis ŒπA K A)
    (I : TwoSidedIdeal (A ‚äó[K] B)) (hI : I ‚â† ‚ä•) :
    ‚àÉ (n : ‚Ñï) (x : A ‚äó[K] B), is_obtainable_by_sum_tmul x ùíú I n ‚àß
      ‚àÄ (m : ‚Ñï) (y : A ‚äó[K] B) , is_obtainable_by_sum_tmul y ùíú I m ‚Üí n ‚â§ m := by
  classical
  have := SetLike.ext_iff.not.mp hI
  push_neg at this

  obtain ‚ü®x, ‚ü®hx0, hx1‚ü©|‚ü®hx0, hx1‚ü©‚ü© := this
  pick_goal 2
  ¬∑ change x = 0 at hx1
    subst hx1
    exact hx0 I.zero_mem |>.elim
  obtain ‚ü®s, rfl‚ü© := TensorProduct.eq_repr_basis_left ùíú x
  let n := @Nat.find (fun n => ‚àÉ x : A ‚äó[K] B, is_obtainable_by_sum_tmul x ùíú I n) _
    ‚ü®s.support.card, ‚àë i ‚àà s.support, ùíú i ‚äó‚Çú[K] s i, ‚ü®hx0, hx1, s.support, rfl, s, rfl‚ü©‚ü©
  obtain ‚ü®x, hx‚ü© : ‚àÉ x, is_obtainable_by_sum_tmul x ùíú I n :=
    @Nat.find_spec (fun n => ‚àÉ x : A ‚äó[K] B, is_obtainable_by_sum_tmul x ùíú I n) _
      ‚ü®s.support.card, ‚àë i ‚àà s.support, ùíú i ‚äó‚Çú[K] s i, ‚ü®hx0, hx1, s.support, rfl, s, rfl‚ü©‚ü©
  refine ‚ü®n, x, hx, fun m y hy => ?_‚ü©
  by_contra r
  simp only [not_le] at r
  have := @Nat.find_min (fun n => ‚àÉ x : A ‚äó[K] B, is_obtainable_by_sum_tmul x ùíú I n) _
      ‚ü®s.support.card, ‚àë i ‚àà s.support, ùíú i ‚äó‚Çú[K] s i, ‚ü®hx0, hx1, s.support, rfl, s, rfl‚ü©‚ü© m r
  simp only [not_exists] at this
  exact this y hy

lemma TensorProduct.sum_tmul_basis_right_eq_zero'
    (B : Type*) [Ring B] [Algebra K B]
    (C : Type*) [Ring C] [Algebra K C]
    {ŒπC : Type*} (ùíû : Basis ŒπC K C)
    (s : Finset ŒπC) (b : ŒπC ‚Üí B)
    (h : ‚àë i ‚àà s, b i ‚äó‚Çú[K] ùíû i = 0) :
    ‚àÄ i ‚àà s, b i = 0 := by
  classical
  intro i
  have := TensorProduct.sum_tmul_basis_right_eq_zero (Œ∫ := ŒπC) ùíû (M := B)
    { support := s.filter fun i ‚Ü¶ b i ‚â† 0
      toFun := fun x => if x ‚àà s then b x else 0
      mem_support_toFun := by simp }
    (by
      simp only [Finsupp.sum, ne_eq, Finsupp.coe_mk, Finset.sum_filter, ite_not]
      rw [‚Üê h]
      congr!
      aesop)
  simpa using Finsupp.ext_iff.mp this i

lemma TensorProduct.sum_tmul_basis_left_eq_zero'
    (B : Type*) [Ring B] [Algebra K B]
    (C : Type*) [Ring C] [Algebra K C]
    {ŒπB : Type*} (‚Ñ¨ : Basis ŒπB K B)
    (s : Finset ŒπB) (c : ŒπB ‚Üí C)
    (h : ‚àë i ‚àà s, ‚Ñ¨ i ‚äó‚Çú[K] c i = 0) :
    ‚àÄ i ‚àà s, c i = 0 := by
  apply TensorProduct.sum_tmul_basis_right_eq_zero' K C B ‚Ñ¨ s c
  apply_fun TensorProduct.comm K B C at h
  simpa using h

instance TensorProduct.nontrivial
    (A B : Type v) [Ring A] [Algebra K A] [Ring B] [Algebra K B]
    [Nontrivial A] [Nontrivial B] :
    Nontrivial (A ‚äó[K] B) :=
  nontrivial_of_linearMap_injective_of_flat_right K A B (Algebra.linearMap _ _)
    (FaithfulSMul.algebraMap_injective _ _)

lemma TensorProduct.map_comap_eq_of_isSimple_isCentralSimple
    {A B : Type v} [Ring A] [Algebra K A] [Ring B] [Algebra K B]
    [isSimple_A : IsSimpleOrder <| TwoSidedIdeal A]
    [isCentral_B : Algebra.IsCentral K B]
    [isSimple_B : IsSimpleRing B]
    (I : TwoSidedIdeal (A ‚äó[K] B)) :
    letI f : A ‚Üí‚Çê[K] A ‚äó[K] B := Algebra.TensorProduct.includeLeft
    (I.comap f).map f = I := by
  classical
  refine (le_antisymm ?_ ?_).symm
  ¬∑ obtain rfl | I_ne_bot := eq_or_ne I ‚ä•
    ¬∑ exact bot_le
    let f : A ‚Üí‚Çê[K] A ‚äó[K] B := Algebra.TensorProduct.includeLeft
    change I ‚â§ TwoSidedIdeal.span (Set.image f <| I.comap f)
    let ùíú := Basis.ofVectorSpace K A
    obtain ‚ü®n, x, ‚ü®x_mem, x_ne_zero, ‚ü®s, card_s, b, rfl‚ü©‚ü©, H‚ü© :=
      is_obtainable_by_sum_tmul.exists_minimal_element _ ùíú I I_ne_bot

    have b_ne_zero : ‚àÄ i ‚àà s, b i ‚â† 0 := by
      by_contra! h
      rcases h with ‚ü®i, h1, h2‚ü©

      specialize H (n - 1) (‚àë i ‚àà s, ùíú i ‚äó‚Çú[K] b i) ‚ü®x_mem, x_ne_zero, ‚ü®s.erase i,
        by rw [Finset.card_erase_of_mem, card_s]; exact h1, b, by
        symm
        fapply Finset.sum_subset
        ¬∑ exact Finset.erase_subset i s
        ¬∑ intro x hx1 hx2
          simp only [Finset.mem_erase, ne_eq, not_and] at hx2
          rw [show x = i by tauto, h2, TensorProduct.tmul_zero]‚ü©‚ü©
      have ineq1 : 0 < n := by
        rw [‚Üê card_s, Finset.card_pos]
        exact ‚ü®i, h1‚ü©
      omega

    obtain rfl | ‚ü®i‚ÇÄ, hi‚ÇÄ‚ü© := s.eq_empty_or_nonempty
    ¬∑ simp only [Finset.card_empty, Finset.sum_empty, ne_eq, not_true_eq_false] at *

    have ineq1 : 0 < n := by
      rw [‚Üê card_s, Finset.card_pos]
      exact ‚ü®i‚ÇÄ, hi‚ÇÄ‚ü©

    have x_eq' :
        ‚àë i ‚àà s, ùíú i ‚äó‚Çú[K] b i =
        ùíú i‚ÇÄ ‚äó‚Çú[K] b i‚ÇÄ +
        ‚àë i ‚àà s.erase i‚ÇÄ, ùíú i ‚äó‚Çú[K] b i := by
      rw [show ùíú i‚ÇÄ ‚äó‚Çú[K] b i‚ÇÄ = ‚àë i ‚àà {i‚ÇÄ}, ùíú i ‚äó‚Çú[K] b i by rw [Finset.sum_singleton],
        ‚Üê Finset.sum_disjUnion]
      pick_goal 2
      ¬∑ simp
      refine Finset.sum_congr ?_ fun _ _ => rfl
      ext x
      simp only [Finset.disjUnion_eq_union, Finset.mem_union, Finset.mem_singleton,
        Finset.mem_erase, ne_eq, or_and_left, em, true_and, iff_or_self]
      simp +contextual [hi‚ÇÄ]

    have span_bi‚ÇÄ : TwoSidedIdeal.span {b i‚ÇÄ} = ‚ä§ := isSimple_B.1.2 _ |>.resolve_left fun r => by
      have mem : b i‚ÇÄ ‚àà (‚ä• : TwoSidedIdeal B) := by
        rw [‚Üê r]
        apply TwoSidedIdeal.subset_span
        simp only [Set.mem_singleton_iff]
      exact b_ne_zero i‚ÇÄ hi‚ÇÄ mem

    have one_mem : (1 : B) ‚àà TwoSidedIdeal.span {b i‚ÇÄ} := by rw [span_bi‚ÇÄ]; trivial
    rw [TwoSidedIdeal.mem_span_iff_exists_fin] at one_mem
    obtain ‚ü®‚Ñê, inst1, xL, xR, y, one_eq‚ü© := one_mem

    replace one_eq : 1 = ‚àë i : ‚Ñê, xL i * b i‚ÇÄ * xR i := by
      rw [one_eq]
      refine Finset.sum_congr rfl fun i _ => ?_
      congr
      simpa only [Set.mem_singleton_iff] using (y i).2

    let œâ := ‚àë i ‚àà s, ùíú i ‚äó‚Çú[K] b i
    let Œ© := ‚àë i : ‚Ñê, (1 ‚äó‚Çú[K] xL i) * œâ * (1 ‚äó‚Çú[K] xR i)
    have Œ©_in_I : Œ© ‚àà I := TwoSidedIdeal.finsetSum_mem _ _ _ fun i _ => I.mul_mem_right _ _ <|
      I.mul_mem_left _ _ x_mem

    have Œ©_eq :
        Œ© =
        ùíú i‚ÇÄ ‚äó‚Çú[K] (‚àë i : ‚Ñê, xL i * b i‚ÇÄ * xR i) +
        ‚àë i ‚àà s.erase i‚ÇÄ, ùíú i ‚äó‚Çú[K] (‚àë j : ‚Ñê, xL j * b i * xR j) := by
      dsimp only [Œ©, œâ]
      simp only [x_eq', mul_add, Algebra.TensorProduct.tmul_mul_tmul, one_mul, Finset.mul_sum,
        add_mul, mul_one, Finset.sum_mul, Finset.sum_add_distrib, TensorProduct.tmul_sum,
        add_right_inj]
      rw [Finset.sum_comm]
    rw [‚Üê one_eq] at Œ©_eq

    have Œ©_prop_1 (b : B) : (1 ‚äó‚Çú b) * Œ© - Œ© * (1 ‚äó‚Çú b) ‚àà I :=
      I.sub_mem (I.mul_mem_left _ _ Œ©_in_I) (I.mul_mem_right _ _ Œ©_in_I)

    have Œ©_prop_2 (x : B) : ((1 : A) ‚äó‚Çú[K] x) * Œ© - Œ© * ((1 : A) ‚äó‚Çú[K] x) =
        ‚àë i ‚àà s.erase i‚ÇÄ, ùíú i ‚äó‚Çú[K]
          (‚àë j : ‚Ñê, (x * (xL j * b i * xR j) - (xL j * b i * xR j) * x)) := by
      rw [Œ©_eq]
      simp only [TensorProduct.tmul_sum, mul_add, Algebra.TensorProduct.tmul_mul_tmul, one_mul,
        mul_one, Finset.mul_sum, add_mul, Finset.sum_mul, add_sub_add_left_eq_sub,
        Finset.sum_sub_distrib, TensorProduct.tmul_sub]

    have Œ©_prop_3 (x : B) : ((1 : A) ‚äó‚Çú[K] x) * Œ© - Œ© * ((1 : A) ‚äó‚Çú[K] x) = 0 := by
      by_contra rid
      specialize H (n - 1) (((1 : A) ‚äó‚Çú[K] x) * Œ© - Œ© * ((1 : A) ‚äó‚Çú[K] x))
        ‚ü®Œ©_prop_1 x, rid, ‚ü®s.erase i‚ÇÄ, by rw [Finset.card_erase_of_mem, card_s]; exact hi‚ÇÄ, _,
          Œ©_prop_2 x‚ü©‚ü©
      omega

    simp_rw [Œ©_prop_2] at Œ©_prop_3
    have Œ©_prop_4 : ‚àÄ i ‚àà s.erase i‚ÇÄ,
        ‚àë j : ‚Ñê, (xL j * b i * xR j) ‚àà Subalgebra.center K B := by
      intro i hi
      rw [Subalgebra.mem_center_iff]
      intro x
      specialize Œ©_prop_3 x
      simp only [Finset.mul_sum, Finset.sum_mul, ‚Üê sub_eq_zero, sub_zero]
      rw [‚Üê Finset.sum_sub_distrib, sub_zero]
      simpa using TensorProduct.sum_tmul_basis_left_eq_zero' _ _ _ ùíú (s.erase i‚ÇÄ) _ Œ©_prop_3 i hi

    simp_rw [Algebra.IsCentral.center_eq_bot, Algebra.mem_bot, Set.mem_range] at Œ©_prop_4
    choose k hk using Œ©_prop_4
    have Œ©_eq2 := calc Œ©
      _ = ùíú i‚ÇÄ ‚äó‚Çú[K] 1 + ‚àë i ‚àà s.erase i‚ÇÄ, ùíú i ‚äó‚Çú[K] ‚àë j : ‚Ñê, xL j * b i * xR j := Œ©_eq
      _ = ùíú i‚ÇÄ ‚äó‚Çú[K] 1 + ‚àë i ‚àà (s.erase i‚ÇÄ).attach, ùíú i ‚äó‚Çú[K] ‚àë j : ‚Ñê, xL j * b i * xR j := by
          congr 1
          exact Finset.sum_attach _ _ |>.symm
      _ = ùíú i‚ÇÄ ‚äó‚Çú[K] 1 + ‚àë i ‚àà (s.erase i‚ÇÄ).attach, ùíú i ‚äó‚Çú[K] algebraMap _ _ (k i.1 i.2) := by
          congr 1
          refine Finset.sum_congr rfl fun i _ => ?_
          rw [hk i.1 i.2]
      _ = ùíú i‚ÇÄ ‚äó‚Çú[K] 1 +  ‚àë i ‚àà (s.erase i‚ÇÄ).attach, ùíú i ‚äó‚Çú[K] (k i.1 i.2 ‚Ä¢ (1 : B) : B) := by
          congr 1
          refine Finset.sum_congr rfl fun i _ => ?_
          rw [Algebra.algebraMap_eq_smul_one]
      _ = ùíú i‚ÇÄ ‚äó‚Çú[K] 1 + ‚àë i ‚àà (s.erase i‚ÇÄ).attach, (k i.1 i.2 ‚Ä¢ ùíú i) ‚äó‚Çú[K] (1 : B) := by
          congr 1
          refine Finset.sum_congr rfl fun i _ => ?_
          rw [TensorProduct.smul_tmul]
      _ = ùíú i‚ÇÄ ‚äó‚Çú[K] 1 + (‚àë i ‚àà (s.erase i‚ÇÄ).attach, (k i.1 i.2 ‚Ä¢ ùíú i)) ‚äó‚Çú[K] (1 : B) := by
          rw [TensorProduct.sum_tmul]
      _ = (ùíú i‚ÇÄ + (‚àë i ‚àà (s.erase i‚ÇÄ).attach, (k i.1 i.2 ‚Ä¢ ùíú i))) ‚äó‚Çú[K] 1 := by
          rw [TensorProduct.add_tmul]

    rw [Œ©_eq2] at Œ©_in_I
    have hI : I.comap f = ‚ä§ := isSimple_A.2 _ |>.resolve_left fun r => by
      have mem : ùíú i‚ÇÄ + (‚àë i ‚àà (s.erase i‚ÇÄ).attach, (k i.1 i.2 ‚Ä¢ ùíú i)) ‚àà I.comap f := by
        rw [TwoSidedIdeal.mem_comap]
        exact Œ©_in_I
      rw [r] at mem
      change _ = 0 at mem
      rw [mem, TensorProduct.zero_tmul] at Œ©_eq2
      have LI := ùíú.linearIndependent
      rw [linearIndependent_iff'] at LI
      specialize LI s (fun i =>
        if i = i‚ÇÄ then 1
        else if h : i ‚àà s.erase i‚ÇÄ then k i h else 0) (by
        dsimp only
        simp_rw [ite_smul, one_smul, dite_smul, zero_smul]
        rw [Finset.sum_ite,
          show ‚àë x ‚àà Finset.filter (fun x ‚Ü¶ x = i‚ÇÄ) s, ùíú x = ‚àë x ‚àà {i‚ÇÄ}, ùíú x by
          refine Finset.sum_congr ?_ fun _ _ => rfl
          ext
          simp only [Finset.mem_filter, Finset.mem_singleton, and_iff_right_iff_imp]
          rintro rfl
          exact hi‚ÇÄ, Finset.sum_singleton,
          show Finset.filter (fun x ‚Ü¶ ¬¨x = i‚ÇÄ) s = s.erase i‚ÇÄ by
          ext
          simp only [Finset.mem_filter, Finset.mem_erase, ne_eq]
          rw [and_comm], ‚Üê Finset.sum_attach]
        conv_rhs => rw [‚Üê mem]
        congr 1
        refine Finset.sum_congr rfl fun i _ => ?_
        rw [dif_pos i.2]) i‚ÇÄ hi‚ÇÄ
      rw [if_pos rfl] at LI
      exact zero_ne_one LI.symm
    rw [hI, TwoSidedIdeal.coe_top, TwoSidedIdeal.le_iff]
    rintro x -
    rw [SetLike.mem_coe]
    induction x using TensorProduct.induction_on with
    | zero => simp [TwoSidedIdeal.zero_mem]
    | tmul a b =>
      rw [show a ‚äó‚Çú[K] b = (a ‚äó‚Çú 1) * (1 ‚äó‚Çú b) by simp]
      exact TwoSidedIdeal.mul_mem_right _ _ _ <| TwoSidedIdeal.subset_span ‚ü®a, ‚ü®‚ü©, rfl‚ü©
    | add x y hx hy => exact TwoSidedIdeal.add_mem _ hx hy

  ¬∑ rw [TwoSidedIdeal.map, TwoSidedIdeal.span_le]
    rintro _ ‚ü®x, hx, rfl‚ü©
    rw [SetLike.mem_coe, TwoSidedIdeal.mem_comap] at hx
    exact hx

@[stacks 074C]
instance TensorProduct.simple
    (A B : Type v) [Ring A] [Algebra K A] [Ring B] [Algebra K B]
    [isSimple_A : IsSimpleRing A]
    [isCentral_B : Algebra.IsCentral K B]
    [isSimple_B : IsSimpleRing B] :
    IsSimpleRing (A ‚äó[K] B) := by
  let f : A ‚Üí‚Çê[K] A ‚äó[K] B := Algebra.TensorProduct.includeLeft
  suffices eq1 : ‚àÄ (I : TwoSidedIdeal (A ‚äó[K] B)),
      I = TwoSidedIdeal.span (Set.image f <| I.comap f) by
    refine ‚ü®‚ü®fun I => ?_‚ü©‚ü©
    specialize eq1 I
    rcases isSimple_A.1.2 (I.comap f) with h|h
    ¬∑ left
      rw [h, TwoSidedIdeal.coe_bot, Set.image_singleton, map_zero] at eq1
      rw [eq1, eq_bot_iff, TwoSidedIdeal.le_iff]
      rintro x hx
      rw [SetLike.mem_coe, TwoSidedIdeal.mem_span_iff_exists_fin] at hx
      obtain ‚ü®Œπ, inst, xL, xR, y, rfl‚ü© := hx
      rw [SetLike.mem_coe]
      refine TwoSidedIdeal.finsetSum_mem _ _ _ fun i _ => ?_
      have := (y i).2
      simp only [Set.mem_singleton_iff] at this
      rw [this, mul_zero, zero_mul]
      rfl
    ¬∑ right
      rw [‚Üê TwoSidedIdeal.one_mem_iff, eq1, h]
      exact TwoSidedIdeal.subset_span ‚ü®1, by simp‚ü©
  exact (TensorProduct.map_comap_eq_of_isSimple_isCentralSimple K ¬∑ |>.symm)
