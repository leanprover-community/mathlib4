/-
Copyright (c) 2025 Junyan Xu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Junyan Xu
-/
import Mathlib.Algebra.Category.ModuleCat.Monoidal.Symmetric
import Mathlib.Algebra.Module.FinitePresentation
import Mathlib.Algebra.Module.LocalizedModule.Submodule
import Mathlib.CategoryTheory.Monoidal.Skeleton
import Mathlib.LinearAlgebra.Contraction
import Mathlib.LinearAlgebra.TensorProduct.Finiteness
import Mathlib.LinearAlgebra.TensorProduct.RightExactness
import Mathlib.LinearAlgebra.TensorProduct.Submodule
import Mathlib.RingTheory.Flat.Localization
import Mathlib.RingTheory.Localization.BaseChange
import Mathlib.RingTheory.LocalRing.Module

/-!
# The Picard group of a commutative ring

This file defines the Picard group `CommRing.Pic R` of a commutative ring `R` as the type of
invertible `R`-modules (in the sense that `M` is invertible if there exists another `R`-module
`N` such that `M ‚äó[R] N ‚âÉ‚Çó[R] R`) up to isomorphism, equipped with tensor product as multiplication.

## Main definition

- `Module.Invertible R M` says that the canonical map `M·µõ ‚äó[R] M ‚Üí R` is an isomorphism.
  To show that `M` is invertible, it suffices to provide an arbitrary `R`-module `N`
  and an isomorphism `N ‚äó[R] M ‚âÉ‚Çó[R] R`, see `Module.Invertible.right`.

## Main results

- An invertible module is finite and projective (provided as instances).

- `Module.Invertible.free_iff_linearEquiv`: an invertible module is free iff it is isomorphic to
  the ring, i.e. its class is trivial in the Picard group.

## References

- https://qchu.wordpress.com/2014/10/19/the-picard-groups/
- https://mathoverflow.net/questions/13768/what-is-the-right-definition-of-the-picard-group-of-a-commutative-ring
- https://mathoverflow.net/questions/375725/picard-group-vs-class-group
- [Weibel2013], https://sites.math.rutgers.edu/~weibel/Kbook/Kbook.I.pdf, Proposition 3.5.
- [Stacks: Picard groups of rings](https://stacks.math.columbia.edu/tag/0AFW)

## TODO

Show:
- The Picard group of a commutative domain is isomorphic to its ideal class group.
- All commutative semi-local rings, in particular Artinian rings, have trivial Picard group.
- All unique factorization domains have trivial Picard group.
- Invertible modules over a commutative ring have the same cardinality as the ring.

- Establish other characterizations of invertible modules, e.g. they are modules that
  become free of rank one when localized at every prime ideal.
  See [Stacks: Finite projective modules](https://stacks.math.columbia.edu/tag/00NX).
- Connect to invertible sheaves on `Spec R`. More generally, connect projective `R`-modules of
  constant finite rank to locally free sheaves on `Spec R`.
- Exhibit isomorphism with sheaf cohomology `H¬π(Spec R, ùìûÀ£)`.
-/

open TensorProduct

universe u v

namespace Module

variable (R : Type u) (M : Type v) (N P Q A : Type*) [CommSemiring R] [CommSemiring A]
variable [AddCommMonoid M] [AddCommMonoid N] [AddCommMonoid P] [AddCommMonoid Q] [Algebra R A]
variable [Module R M] [Module R N] [Module R P] [Module R Q]

/-- An `R`-module `M` is invertible if the canonical map `M·µõ ‚äó[R] M ‚Üí R` is an isomorphism,
where `M·µõ` is the `R`-dual of `M`. -/
protected class Invertible : Prop where
  bijective : Function.Bijective (contractLeft R M)

namespace Invertible

/-- Promote the canonical map `M·µõ ‚äó[R] M ‚Üí R` to a linear equivalence for invertible `M`. -/
noncomputable def linearEquiv [Module.Invertible R M] : Module.Dual R M ‚äó[R] M ‚âÉ‚Çó[R] R :=
  .ofBijective _ Invertible.bijective

variable {R M N}

section LinearEquiv

variable (e : M ‚äó[R] N ‚âÉ‚Çó[R] R)

/-- The canonical isomorphism between a module and the result of tensoring it
from the left by two mutually dual invertible modules. -/
noncomputable abbrev leftCancelEquiv : M ‚äó[R] (N ‚äó[R] P) ‚âÉ‚Çó[R] P :=
  (TensorProduct.assoc R M N P).symm ‚â™‚â´‚Çó e.rTensor P ‚â™‚â´‚Çó TensorProduct.lid R P

/-- The canonical isomorphism between a module and the result of tensoring it
from the right by two mutually dual invertible modules. -/
noncomputable abbrev rightCancelEquiv : (P ‚äó[R] M) ‚äó[R] N ‚âÉ‚Çó[R] P :=
  TensorProduct.assoc R P M N ‚â™‚â´‚Çó e.lTensor P ‚â™‚â´‚Çó TensorProduct.rid R P

variable {P Q} in
theorem leftCancelEquiv_comp_lTensor_comp_symm (f : P ‚Üí‚Çó[R] Q) :
    leftCancelEquiv Q e ‚àò‚Çó (f.lTensor N).lTensor M ‚àò‚Çó (leftCancelEquiv P e).symm = f := by
  rw [‚Üê LinearMap.comp_assoc, LinearEquiv.comp_toLinearMap_symm_eq]; ext; simp

variable {P Q} in
theorem rightCancelEquiv_comp_rTensor_comp_symm (f : P ‚Üí‚Çó[R] Q) :
    rightCancelEquiv Q e ‚àò‚Çó (f.rTensor M).rTensor N ‚àò‚Çó (rightCancelEquiv P e).symm = f := by
  rw [‚Üê LinearMap.comp_assoc, LinearEquiv.comp_toLinearMap_symm_eq]; ext; simp

/-- If M is invertible, `rTensorHom M` admits an inverse. -/
noncomputable def rTensorInv : (P ‚äó[R] M ‚Üí‚Çó[R] Q ‚äó[R] M) ‚Üí‚Çó[R] (P ‚Üí‚Çó[R] Q) :=
  ((rightCancelEquiv Q e).congrRight ‚â™‚â´‚Çó (rightCancelEquiv P e).congrLeft _ R) ‚àò‚Çó
    LinearMap.rTensorHom N

theorem rTensorInv_leftInverse : Function.LeftInverse (rTensorInv P Q e) (.rTensorHom M) :=
  fun _ ‚Ü¶ by
    simp_rw [rTensorInv, LinearEquiv.coe_trans, LinearMap.comp_apply, LinearEquiv.coe_toLinearMap]
    rw [‚Üê LinearEquiv.eq_symm_apply]
    ext; simp [LinearEquiv.congrLeft, LinearEquiv.congrRight, LinearEquiv.arrowCongrAddEquiv]

theorem rTensorInv_injective : Function.Injective (rTensorInv P Q e) := by
  simpa [rTensorInv] using (rTensorInv_leftInverse _ _ <| TensorProduct.comm R N M ‚â™‚â´‚Çó e).injective

/-- If `M` is an invertible `R`-module, `(¬∑ ‚äó[R] M)` is an auto-equivalence of the category
of `R`-modules. -/
@[simps!] noncomputable def rTensorEquiv : (P ‚Üí‚Çó[R] Q) ‚âÉ‚Çó[R] (P ‚äó[R] M ‚Üí‚Çó[R] Q ‚äó[R] M) where
  __ := LinearMap.rTensorHom M
  invFun := rTensorInv P Q e
  left_inv := rTensorInv_leftInverse P Q e
  right_inv _ := rTensorInv_injective P Q e (by rw [LinearMap.toFun_eq_coe, rTensorInv_leftInverse])

open LinearMap in
/-- If there is an `R`-isomorphism between `M ‚äó[R] N` and `R`,
the induced map `M ‚Üí N·µõ` is an isomorphism. -/
theorem bijective_curry : Function.Bijective (curry e.toLinearMap) := by
  have : curry e.toLinearMap = ((TensorProduct.lid R N).congrLeft _ R ‚â™‚â´‚Çó e.congrRight) ‚àò‚Çó
      rTensorHom N ‚àò‚Çó (ringLmapEquivSelf R R M).symm.toLinearMap := by
    rw [‚Üê LinearEquiv.toLinearMap_symm_comp_eq]; ext
    simp [LinearEquiv.congrLeft, LinearEquiv.congrRight, LinearEquiv.arrowCongrAddEquiv]
  simpa [this] using (rTensorEquiv R M <| TensorProduct.comm R N M ‚â™‚â´‚Çó e).bijective

/-- Given `M ‚äó[R] N ‚âÉ‚Çó[R] R`, this is the induced isomorphism `M ‚âÉ‚Çó[R] N·µõ`. -/
noncomputable def linearEquivDual : M ‚âÉ‚Çó[R] Dual R N := .ofBijective _ (bijective_curry e)

include e

protected theorem right : Module.Invertible R N where
  bijective := by
    rw [show contractLeft R N = ((linearEquivDual e).rTensor N).symm ‚â™‚â´‚Çó e by
      rw [LinearEquiv.coe_trans, LinearEquiv.eq_comp_toLinearMap_symm]; ext; rfl]
    apply LinearEquiv.bijective

protected theorem left : Module.Invertible R M := .right (TensorProduct.comm R N M ‚â™‚â´‚Çó e)

instance : Module.Invertible R R := .left (TensorProduct.lid R R)

end LinearEquiv

variable [Module.Invertible R M]

protected theorem congr (e : M ‚âÉ‚Çó[R] N) : Module.Invertible R N :=
  .right (e.symm.lTensor _ ‚â™‚â´‚Çó linearEquiv R M)

variable (R M N)

instance : Module.Invertible R (Dual R M) := .left (linearEquiv R M)

instance [Module.Invertible R N] : Module.Invertible R (M ‚äó[R] N) :=
  .right (M := Dual R M ‚äó[R] Dual R N) <| tensorTensorTensorComm .. ‚â™‚â´‚Çó
    congr (linearEquiv R M) (linearEquiv R N) ‚â™‚â´‚Çó TensorProduct.lid R R

private theorem finite_projective : Module.Finite R M ‚àß Projective R M := by
  let N := Dual R M
  let e : M ‚äó[R] N ‚âÉ‚Çó[R] R := TensorProduct.comm .. ‚â™‚â´‚Çó linearEquiv R M
  have ‚ü®S, hS‚ü© := TensorProduct.exists_finset (e.symm 1)
  let f : (S ‚Üí‚ÇÄ N) ‚Üí‚Çó[R] R := Finsupp.lsum R fun i ‚Ü¶ e.toLinearMap ‚àò‚Çó TensorProduct.mk R M N i.1.1
  have : Function.Surjective f := by
    rw [‚Üê LinearMap.range_eq_top, Ideal.eq_top_iff_one]
    use Finsupp.equivFunOnFinite.symm fun i ‚Ü¶ i.1.2
    simp_rw [f, Finsupp.coe_lsum]
    rw [Finsupp.sum_fintype _ _ fun _ ‚Ü¶ map_zero _]
    rwa [e.symm_apply_eq, map_sum, ‚Üê Finset.sum_coe_sort, eq_comm] at hS
  have ‚ü®g, hg‚ü© := projective_lifting_property f .id this
  classical
  let aux := finsuppRight R M N S ‚â™‚â´‚Çó Finsupp.mapRange.linearEquiv e
  let f' : (S ‚Üí‚ÇÄ R) ‚Üí‚Çó[R] M := TensorProduct.rid R M ‚àò‚Çó f.lTensor M ‚àò‚Çó aux.symm
  let g' : M ‚Üí‚Çó[R] S ‚Üí‚ÇÄ R := aux ‚àò‚Çó g.lTensor M ‚àò‚Çó (TensorProduct.rid R M).symm
  have : Function.Surjective f' := by simpa [f'] using LinearMap.lTensor_surjective _ this
  refine ‚ü®.of_surjective f' this, .of_split g' f' <| LinearMap.ext fun m ‚Ü¶ ?_‚ü©
  simp [f', g', show f (g 1) = 1 from DFunLike.congr_fun hg 1]

instance : Module.Finite R M := (finite_projective R M).1
instance : Projective R M := (finite_projective R M).2
example : IsReflexive R M := inferInstance

section inj_surj_bij

variable {R N P}

theorem lTensor_injective_iff {f : N ‚Üí‚Çó[R] P} :
    Function.Injective (f.lTensor M) ‚Üî Function.Injective f := by
  refine ‚ü®fun h ‚Ü¶ ?_, Flat.lTensor_preserves_injective_linearMap _‚ü©
  rw [‚Üê leftCancelEquiv_comp_lTensor_comp_symm (linearEquiv R M) f]
  simpa using Flat.lTensor_preserves_injective_linearMap _ h

theorem rTensor_injective_iff {f : N ‚Üí‚Çó[R] P} :
    Function.Injective (f.rTensor M) ‚Üî Function.Injective f := by
  rw [‚Üê LinearMap.lTensor_inj_iff_rTensor_inj, lTensor_injective_iff]

theorem lTensor_surjective_iff {f : N ‚Üí‚Çó[R] P} :
    Function.Surjective (f.lTensor M) ‚Üî Function.Surjective f := by
  refine ‚ü®fun h ‚Ü¶ ?_, LinearMap.lTensor_surjective _‚ü©
  rw [‚Üê leftCancelEquiv_comp_lTensor_comp_symm (linearEquiv R M) f]
  simpa using LinearMap.lTensor_surjective _ h

theorem rTensor_surjective_iff {f : N ‚Üí‚Çó[R] P} :
    Function.Surjective (f.rTensor M) ‚Üî Function.Surjective f := by
  rw [‚Üê LinearMap.lTensor_surj_iff_rTensor_surj, lTensor_surjective_iff]

theorem lTensor_bijective_iff {f : N ‚Üí‚Çó[R] P} :
    Function.Bijective (f.lTensor M) ‚Üî Function.Bijective f := by
  simp_rw [Function.Bijective, lTensor_injective_iff, lTensor_surjective_iff]

theorem rTensor_bijective_iff {f : N ‚Üí‚Çó[R] P} :
    Function.Bijective (f.rTensor M) ‚Üî Function.Bijective f := by
  simp_rw [Function.Bijective, rTensor_injective_iff, rTensor_surjective_iff]

end inj_surj_bij

open Finsupp in
variable {R M} in
/-- An invertible module is free iff it is isomorphic to the ring, i.e. its class is trivial in
the Picard group. -/
theorem free_iff_linearEquiv : Free R M ‚Üî Nonempty (M ‚âÉ‚Çó[R] R) := by
  refine ‚ü®fun _ ‚Ü¶ ?_, fun ‚ü®e‚ü© ‚Ü¶ .of_equiv e.symm‚ü©
  nontriviality R
  have e := (Free.chooseBasis R M).repr
  have := card_eq_of_linearEquiv R <|
    (finsuppTensorFinsupp' .. ‚â™‚â´‚Çó linearEquivFunOnFinite R R _).symm ‚â™‚â´‚Çó TensorProduct.congr
      (linearEquivFunOnFinite R R _ ‚â™‚â´‚Çó llift R R R _ ‚â™‚â´‚Çó e.dualMap)
      e.symm ‚â™‚â´‚Çó linearEquiv R M ‚â™‚â´‚Çó (.symm <| .funUnique Unit R R)
  have : Unique (Free.ChooseBasisIndex R M) :=
    (Fintype.card_eq_one_iff_nonempty_unique.mp (by simpa using this)).some
  exact ‚ü®e ‚â™‚â´‚Çó LinearEquiv.finsuppUnique R R _‚ü©

/- TODO: The ‚â§ direction holds for arbitrary invertible modules over any commutative **ring** by
considering the localization at a prime (which is free of rank 1) using the strong rank condition.
The ‚â• direction fails in general but holds for domains and Noetherian rings without embedded
components, see https://math.stackexchange.com/q/5089900. -/
theorem finrank_eq_one [StrongRankCondition R] [Free R M] : finrank R M = 1 := by
  cases subsingleton_or_nontrivial R
  ¬∑ rw [‚Üê rank_eq_one_iff_finrank_eq_one, rank_subsingleton]
  ¬∑ rw [(free_iff_linearEquiv.mp ‚Äπ_‚Ä∫).some.finrank_eq, finrank_self]

theorem rank_eq_one [StrongRankCondition R] [Free R M] : Module.rank R M = 1 :=
  rank_eq_one_iff_finrank_eq_one.mpr (finrank_eq_one R M)

open TensorProduct (comm lid) in
theorem toModuleEnd_bijective : Function.Bijective (toModuleEnd R (S := R) M) := by
  have : toModuleEnd R (S := R) M = (lid R M).conj ‚àò rTensorEquiv R R
      (comm .. ‚â™‚â´‚Çó linearEquiv R M) ‚àò RingEquiv.moduleEndSelf R ‚àò MulOpposite.opEquiv := by
    ext; simp [LinearEquiv.conj, liftAux]
  simpa [this] using MulOpposite.opEquiv.bijective

instance : FaithfulSMul R M where
  eq_of_smul_eq_smul {_ _} h := (toModuleEnd_bijective R M).injective <| LinearMap.ext h

variable {R M N} in
private theorem bijective_self_of_surjective (f : R ‚Üí‚Çó[R] M) (hf : Function.Surjective f) :
    Function.Bijective f where
  left {r‚ÇÅ r‚ÇÇ} eq := smul_left_injective' (Œ± := M) <| funext fun m ‚Ü¶ by
    obtain ‚ü®r, rfl‚ü© := hf m
    simp_rw [‚Üê map_smul, smul_eq_mul, mul_comm _ r, ‚Üê smul_eq_mul, map_smul, eq]
  right := hf

variable {R M N} in
/- Not true if `surjective` is replaced by `injective`: any nonzero element in an invertible
module over a domain generates a submodule isomorphic to the domain, which is not the whole
module unless the module is free. -/
theorem bijective_of_surjective [Module.Invertible R N] {f : M ‚Üí‚Çó[R] N}
    (hf : Function.Surjective f) : Function.Bijective f := by
  simpa [lTensor_bijective_iff] using bijective_self_of_surjective
    (f.lTensor _ ‚àò‚Çó (linearEquiv R M).symm.toLinearMap) (by simpa [lTensor_surjective_iff] using hf)

section Algebra

instance : Module.Invertible A (A ‚äó[R] M) :=
  .right (M := A ‚äó[R] Dual R M) <| (AlgebraTensorModule.distribBaseChange ..).symm ‚â™‚â´‚Çó
    AlgebraTensorModule.congr (.refl A A) (linearEquiv R M) ‚â™‚â´‚Çó AlgebraTensorModule.rid ..

instance (L) [AddCommMonoid L] [Module R L] [Module A L] [IsScalarTower R A L]
    [Module.Invertible A L] : Module.Invertible A (L ‚äó[R] M) :=
  .congr (AlgebraTensorModule.cancelBaseChange R A A L M)

variable [FaithfulSMul R A] [Free A (A ‚äó[R] M)]

/-- An invertible `R`-module embeds into an `R`-algebra that `R` injects into,
provided `A ‚äó[R] M` is a free `A`-module. -/
noncomputable def embAlgebra : M ‚Üí‚Çó[R] A :=
  (free_iff_linearEquiv.mp ‚Äπ_‚Ä∫).some.restrictScalars R ‚àò‚Çó
    (Algebra.ofId R A).toLinearMap.rTensor M ‚àò‚Çó (TensorProduct.lid R M).symm

theorem embAlgebra_injective : Function.Injective (embAlgebra R M A) := by
  simpa [embAlgebra] using
    Flat.rTensor_preserves_injective_linearMap _ (FaithfulSMul.algebraMap_injective R A)

/-- An invertible `R`-module as a `R`-submodule of an `R`-algebra. -/
noncomputable def toSubmodule : Submodule R A := LinearMap.range (embAlgebra R M A)

end Algebra

end Invertible

end Module

section PicardGroup

open CategoryTheory Module

variable (R : Type u) [CommRing R]

instance (M : (Skeleton <| ModuleCat.{u} R)À£) : Module.Invertible R M :=
  .right (Quotient.eq.mp M.inv_mul).some.toLinearEquiv

instance : Small.{u} (Skeleton <| ModuleCat.{u} R)À£ :=
  let sf := Œ£ n, Submodule R (Fin n ‚Üí R)
  have {M N : sf} : M = N ‚Üí (_ ‚ß∏ M.2) ‚âÉ‚Çó[R] _ ‚ß∏ N.2 := by rintro rfl; exact .refl ..
  let f (M : (Skeleton <| ModuleCat.{u} R)À£) : sf := ‚ü®_, Finite.kerRepr R M‚ü©
  small_of_injective (f := f) fun M N eq ‚Ü¶ Units.ext <| Quotient.out_equiv_out.mp
    ‚ü®((Finite.reprEquiv R M).symm ‚â™‚â´‚Çó this eq ‚â™‚â´‚Çó Finite.reprEquiv R N).toModuleIso‚ü©

/-- The Picard group of a commutative ring R consists of the invertible R-modules,
up to isomorphism. -/
def CommRing.Pic (R : Type u) [CommRing R] : Type u :=
  Shrink (Skeleton <| ModuleCat.{u} R)À£

open CommRing (Pic)

noncomputable instance : CommGroup (Pic R) := (equivShrink _).symm.commGroup

section CommRing

variable (M N : Type*) [AddCommGroup M] [Module R M] [AddCommGroup N] [Module R N]
  [Module.Invertible R M] [Module.Invertible R N]

instance : Module.Invertible R (Finite.repr R M) := .congr (Finite.reprEquiv R M).symm

namespace CommRing.Pic

variable {R} in
/-- A representative of an element in the Picard group. -/
abbrev AsModule (M : Pic R) : Type u := ((equivShrink _).symm M).val

noncomputable instance : CoeSort (Pic R) (Type u) := ‚ü®AsModule‚ü©

private noncomputable def equivShrinkLinearEquiv (M : (Skeleton <| ModuleCat.{u} R)À£) :
    (id <| equivShrink _ M : Pic R) ‚âÉ‚Çó[R] M :=
  have {M N : Skeleton (ModuleCat.{u} R)} : M = N ‚Üí M ‚âÉ‚Çó[R] N := by rintro rfl; exact .refl ..
  this (by simp)

/-- The class of an invertible module in the Picard group. -/
protected noncomputable def mk : Pic R := equivShrink _ <|
  letI M' := Finite.repr R M
  .mkOfMulEqOne ‚ü¶.of R M'‚üß ‚ü¶.of R (Dual R M')‚üß <| by
    rw [‚Üê toSkeleton, ‚Üê toSkeleton, mul_comm, ‚Üê Skeleton.toSkeleton_tensorObj]
    exact Quotient.sound ‚ü®(Invertible.linearEquiv R _).toModuleIso‚ü©

/-- `mk R M` is indeed the class of `M`. -/
noncomputable def mk.linearEquiv : Pic.mk R M ‚âÉ‚Çó[R] M :=
  equivShrinkLinearEquiv R _ ‚â™‚â´‚Çó (Quotient.mk_out (s := isIsomorphicSetoid _)
    (ModuleCat.of R (Finite.repr R M))).some.toLinearEquiv ‚â™‚â´‚Çó Finite.reprEquiv R M

variable {R M N}

theorem mk_eq_iff {N : Pic R} : Pic.mk R M = N ‚Üî Nonempty (M ‚âÉ‚Çó[R] N) where
  mp := (¬∑ ‚ñ∏ ‚ü®(mk.linearEquiv R M).symm‚ü©)
  mpr := fun ‚ü®e‚ü© ‚Ü¶ ((equivShrink _).apply_eq_iff_eq_symm_apply).mpr <|
    Units.ext <| Quotient.mk_eq_iff_out.mpr ‚ü®(Finite.reprEquiv R M ‚â™‚â´‚Çó e).toModuleIso‚ü©

theorem mk_eq_self {M : Pic R} : Pic.mk R M = M := mk_eq_iff.mpr ‚ü®.refl ..‚ü©

theorem ext_iff {M N : Pic R} : M = N ‚Üî Nonempty (M ‚âÉ‚Çó[R] N) := by
  rw [‚Üê mk_eq_iff, mk_eq_self]

theorem mk_eq_mk_iff : Pic.mk R M = Pic.mk R N ‚Üî Nonempty (M ‚âÉ‚Çó[R] N) :=
  let eN := mk.linearEquiv R N
  mk_eq_iff.trans ‚ü®fun ‚ü®e‚ü© ‚Ü¶ ‚ü®e ‚â™‚â´‚Çó eN‚ü©, fun ‚ü®e‚ü© ‚Ü¶ ‚ü®e ‚â™‚â´‚Çó eN.symm‚ü©‚ü©

theorem mk_self : Pic.mk R R = 1 :=
  congr_arg (equivShrink _) <| Units.ext <| Quotient.sound ‚ü®(Finite.reprEquiv R R).toModuleIso‚ü©

theorem mk_eq_one_iff : Pic.mk R M = 1 ‚Üî Nonempty (M ‚âÉ‚Çó[R] R) := by
  rw [‚Üê mk_self, mk_eq_mk_iff]

theorem mk_eq_one [Free R M] : Pic.mk R M = 1 :=
  mk_eq_one_iff.mpr (Invertible.free_iff_linearEquiv.mp ‚Äπ_‚Ä∫)

theorem mk_tensor : Pic.mk R (M ‚äó[R] N) = Pic.mk R M * Pic.mk R N :=
  congr_arg (equivShrink _) <| Units.ext <| by
    simp_rw [Pic.mk, Equiv.symm_apply_apply]
    refine (Quotient.sound ?_).trans (Skeleton.toSkeleton_tensorObj ..)
    exact ‚ü®(Finite.reprEquiv R _ ‚â™‚â´‚Çó TensorProduct.congr
      (Finite.reprEquiv R M).symm (Finite.reprEquiv R N).symm).toModuleIso‚ü©

theorem mk_dual : Pic.mk R (Dual R M) = (Pic.mk R M)‚Åª¬π :=
  congr_arg (equivShrink _) <| Units.ext <| by
    rw [Pic.mk, Equiv.symm_apply_apply]
    exact Quotient.sound ‚ü®(Finite.reprEquiv R _ ‚â™‚â´‚Çó (Finite.reprEquiv R _).dualMap).toModuleIso‚ü©

theorem inv_eq_dual (M : Pic R) : M‚Åª¬π = Pic.mk R (Dual R M) := by
  rw [mk_dual, mk_eq_self]

theorem mul_eq_tensor (M N : Pic R) : M * N = Pic.mk R (M ‚äó[R] N) := by
  rw [mk_tensor, mk_eq_self, mk_eq_self]

theorem subsingleton_iff : Subsingleton (Pic R) ‚Üî
    ‚àÄ (M : Type u) [AddCommGroup M] [Module R M], Module.Invertible R M ‚Üí Free R M :=
  .trans ‚ü®fun _ M _ _ _ ‚Ü¶ Subsingleton.elim ..,
      fun h ‚Ü¶ ‚ü®fun M N ‚Ü¶ by rw [‚Üê mk_eq_self (M := M), ‚Üê mk_eq_self (M := N), h, h]‚ü©‚ü© <|
    forall‚ÇÑ_congr fun _ _ _ _ ‚Ü¶ mk_eq_one_iff.trans Invertible.free_iff_linearEquiv.symm

instance [Subsingleton (Pic R)] : Free R M :=
  have := subsingleton_iff.mp ‚Äπ_‚Ä∫ (Finite.repr R M) inferInstance
  .of_equiv (Finite.reprEquiv R M)

/- TODO: it's still true that an invertible module over a (commutative) local semiring is free;
  in fact invertible modules over a semiring are Zariski-locally free.
  See [BorgerJun2024], Theorem 11.7. -/
instance [IsLocalRing R] : Subsingleton (Pic R) :=
  subsingleton_iff.mpr fun _ _ _ _ ‚Ü¶ free_of_flat_of_isLocalRing

end CommRing.Pic

end CommRing

end PicardGroup

namespace Submodule

open Module Invertible

variable {R A : Type*} [CommSemiring R]

section Semiring

variable [Semiring A] [Algebra R A] [FaithfulSMul R A]

open LinearMap in
instance projective_unit (I : (Submodule R A)À£) : Projective R I := by
  obtain ‚ü®T, T', hT, hT', one_mem‚ü© := mem_span_mul_finite_of_mem_mul (I.inv_mul ‚ñ∏ one_le.mp le_rfl)
  classical
  rw [‚Üê Set.image2_mul, ‚Üê Finset.coe_image‚ÇÇ, mem_span_finset] at one_mem
  set S := T.image‚ÇÇ (¬∑ * ¬∑) T'
  obtain ‚ü®r, hr‚ü© := one_mem
  choose a ha b hb eq using fun i : S ‚Ü¶ Finset.mem_image‚ÇÇ.mp i.2
  let f : I ‚Üí‚Çó[R] S ‚Üí R := .pi fun i ‚Ü¶ (LinearEquiv.ofInjective
      (Algebra.linearMap R A) (FaithfulSMul.algebraMap_injective R A)).symm.comp <|
    restrict (mulRight R (r i ‚Ä¢ a i)) fun x hx ‚Ü¶ by
      rw [‚Üê one_eq_range, ‚Üê I.mul_inv]; exact mul_mem_mul hx (I‚Åª¬π.1.smul_mem _ <| hT <| ha i)
  let g : (S ‚Üí R) ‚Üí‚Çó[R] I := .lsum _ _ ‚Ñï fun i ‚Ü¶ .toSpanSingleton _ _ ‚ü®b i, hT' <| hb i‚ü©
  refine .of_split f g (LinearMap.ext fun x ‚Ü¶ Subtype.ext ?_)
  simp only [f, g, lsum_apply, comp_apply, sum_apply, toSpanSingleton_apply, proj_apply, pi_apply]
  simp_rw [restrict_apply, mulRight_apply, id_apply, coe_sum, coe_smul, Algebra.smul_def,
    ‚Üê Algebra.coe_linearMap, LinearEquiv.coe_toLinearMap, LinearEquiv.ofInjective_symm_apply,
    mul_assoc, Algebra.coe_linearMap, ‚Üê Algebra.smul_def, ‚Üê Finset.mul_sum, eq,
    (Finset.sum_coe_sort ..).trans hr.2, mul_one]

theorem projective_of_isUnit {I : Submodule R A} (hI : IsUnit I) : Projective R I :=
  projective_unit hI.unit

end Semiring

section CommSemiring

variable [CommSemiring A] [Algebra R A] [FaithfulSMul R A]
  (S : Submonoid R) [IsLocalization S A] (I J : (Submodule R A)À£)

/-- Given two invertible `R`-submodules in an `R`-algebra `A`, the `R`-linear map from
`I ‚äó[R] J` to `I * J` induced by multiplication is an isomorphism. -/
noncomputable def tensorEquivMul : I ‚äó[R] J ‚âÉ‚Çó[R] I * J :=
  .ofBijective (mulMap' ..) ‚ü®by
    have := IsLocalization.flat A S
    simpa [mulMap', mulMap_eq_mul'_comp_mapIncl] using
      (IsLocalization.bijective_linearMap_mul' S A).1.comp
        (Flat.tensorProduct_mapIncl_injective_of_left ..),
    mulMap'_surjective _ _‚ü©

/-- Given an invertible `R`-submodule `I` in an `R`-algebra `A`, the `R`-linear map
from `I ‚äó[R] I‚Åª¬π` to `R` induced by multiplication is an isomorphism. -/
noncomputable def tensorInvEquiv : I ‚äó[R] ‚ÜëI‚Åª¬π ‚âÉ‚Çó[R] R :=
  tensorEquivMul S I _ ‚â™‚â´‚Çó .ofEq _ _ (I.mul_inv.trans one_eq_range) ‚â™‚â´‚Çó
    .symm (.ofInjective _ (FaithfulSMul.algebraMap_injective R A))

include S in
theorem _root_.Units.submodule_invertible : Module.Invertible R I := .left (tensorInvEquiv S I)

end CommSemiring

section CommRing

open CommRing Pic

variable (R A : Type*) [CommRing R] [CommRing A] [Algebra R A] [FaithfulSMul R A]
  (S : Submonoid R) [IsLocalization S A]

/-- The group homomorphism from the invertible submodules
in a localization of `R` to the Picard group of `R`. -/
@[simps] noncomputable def unitsToPic : (Submodule R A)À£ ‚Üí* Pic R :=
  haveI := Units.submodule_invertible S (A := A)
{ toFun I := Pic.mk R I
  map_one' := mk_eq_one_iff.mpr
    ‚ü®.ofEq _ _ one_eq_range ‚â™‚â´‚Çó .symm (.ofInjective _ (FaithfulSMul.algebraMap_injective R A))‚ü©
  map_mul' I J := by rw [‚Üê mk_tensor, mk_eq_mk_iff]; exact ‚ü®(tensorEquivMul S I J).symm‚ü© }

end CommRing

end Submodule
