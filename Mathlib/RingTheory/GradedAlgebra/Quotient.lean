/-
Copyright (c) 2024 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang
-/
import Mathlib.RingTheory.GradedAlgebra.Homogeneous.Ideal
import Mathlib.Algebra.Module.GradedModule.QuotientGrading
import Mathlib.RingTheory.Ideal.Quotient.Basic

/-!
# Quotient of a Graded Ring by a Homogeneous Ideal

-/

open SetLike DirectSum

variable {Œπ œÉ A : Type*}

variable [CommRing A]
variable [SetLike œÉ A] [AddSubgroupClass œÉ A] (ùíú : Œπ ‚Üí œÉ)
variable [DecidableEq Œπ] [AddMonoid Œπ] [GradedRing ùíú]
variable (I : HomogeneousIdeal ùíú)

namespace HomogeneousIdeal

def quotientGrading (i : Œπ) := HomogeneousSubmodule.quotientGrading I i

instance : Decomposition I.quotientGrading := HomogeneousSubmodule.quotientDecomposition I

instance : GradedMonoid I.quotientGrading where
  one_mem := ‚ü®Quotient.mk'' ‚ü®1, GradedOne.one_mem‚ü©, rfl‚ü©
  mul_mem i j x y hx hy := by
    induction x using Quotient.inductionOn' with | h x' => ?_
    induction y using Quotient.inductionOn' with | h y' => ?_
    rcases hx with ‚ü®x, hx'‚ü©
    rcases hy with ‚ü®y, hy'‚ü©
    rw [‚Üê hx', ‚Üê hy']
    clear x' y' hx' hy'
    induction x using Quotient.inductionOn' with | h x => ?_
    induction y using Quotient.inductionOn' with | h y => ?_
    exact ‚ü®Quotient.mk'' ‚ü®x.1 * y.1, GradedMul.mul_mem x.2 y.2‚ü©, rfl‚ü©

instance : GradedRing I.quotientGrading where

end HomogeneousIdeal
