/-
Copyright (c) 2025 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.RingTheory.AdicCompletion.Basic
import Mathlib.Topology.Algebra.Nonarchimedean.AdicTopology

/-!

# Connection between adic properties and topological properties

## Main results
- `IsAdic.isPrecomplete_iff`:
  `IsPrecomplete I R` is equivalent to `CompleteSpace R` in the adic topology.

-/

section UniformSpace

open Topology Uniformity

variable {R : Type*} [CommRing R] [UniformSpace R] [IsUniformAddGroup R]
  {I : Ideal R} (hI : IsAdic I)

include hI in
/-- `IsPrecomplete I R` is equivalent to being complete in the adic topology. -/
protected lemma IsAdic.isPrecomplete_iff : IsPrecomplete I R ‚Üî CompleteSpace R := by
  have := hI.hasBasis_nhds_zero.isCountablyGenerated
  have : (ùì§ R).IsCountablyGenerated := IsUniformAddGroup.uniformity_countably_generated
  simp only [isPrecomplete_iff, smul_eq_mul, Ideal.mul_top, SModEq.sub_mem]
  constructor
  ¬∑ intro H
    refine UniformSpace.complete_of_cauchySeq_tendsto fun u hu ‚Ü¶ ?_
    have : ‚àÄ i, ‚àÉ N, ‚àÄ m, N ‚â§ m ‚Üí ‚àÄ n, N ‚â§ n ‚Üí u n - u m ‚àà I ^ i := by
      simpa using hI.hasBasis_nhds_zero.uniformity_of_nhds_zero.cauchySeq_iff.mp hu
    choose N hN using this
    obtain ‚ü®L, hL‚ü© := H (fun i ‚Ü¶ u ((Finset.Iic i).sup N))
      fun _ ‚Ü¶ hN _ _ (Finset.le_sup (by simpa)) _ (Finset.le_sup (by simp))
    use L
    suffices ‚àÄ i, ‚àÉ N, ‚àÄ n, N ‚â§ n ‚Üí u n - L ‚àà I ^ i by
      simpa [(hI.hasBasis_nhds L).tendsto_right_iff, sub_eq_neg_add]
    refine fun i ‚Ü¶ ‚ü®(Finset.Iic i).sup N, fun n hn ‚Ü¶ ?_‚ü©
    have := Ideal.add_mem _ (hN i ((Finset.Iic i).sup N) (Finset.le_sup (by simp))
      n (.trans (Finset.le_sup (by simp)) hn)) (hL i)
    rwa [sub_add_sub_cancel] at this
  ¬∑ intro H f hf
    obtain ‚ü®L, hL‚ü© := CompleteSpace.complete (f := Filter.atTop.map f)
      (hI.hasBasis_nhds_zero.uniformity_of_nhds_zero.cauchySeq_iff.mpr fun i _ ‚Ü¶
        ‚ü®i, fun m hm n hn ‚Ü¶ by simpa using Ideal.sub_mem _ (hf hm) (hf hn)‚ü©)
    refine ‚ü®L, fun i ‚Ü¶ ?_‚ü©
    obtain ‚ü®N, hN‚ü© : ‚àÉ N, ‚àÄ n, N ‚â§ n ‚Üí f n - L ‚àà I ^ i := by
      simpa [sub_eq_neg_add] using (hI.hasBasis_nhds L).tendsto_right_iff.mp hL i
    simpa using Ideal.add_mem _ (hN (max i N) le_sup_right) (hf (le_max_left i N))

end UniformSpace
