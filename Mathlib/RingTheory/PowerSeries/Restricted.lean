/-
Copyright (c) 2025 William Coram. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: William Coram
-/

import Mathlib.Analysis.Normed.Group.Ultra
import Mathlib.Analysis.RCLike.Basic
import Mathlib.RingTheory.PowerSeries.Basic
import Mathlib.Tactic.Bound

/-!
# Restricted power series

`IsRestricted` : We say a powerseries over a normed ring `R` is restricted for a parameter `c` if
`‚Äñcoeff R i f‚Äñ * c ^ i ‚Üí 0`.

-/

namespace PowerSeries

open PowerSeries Filter
open scoped Topology

/-- A power series over `R` is restricted of paramerter `c` if we have
  `‚Äñcoeff R i f‚Äñ * c ^ i ‚Üí 0`. -/
def IsRestricted {R : Type*} [NormedRing R] (c : ‚Ñù) (f : PowerSeries R) :=
  Tendsto (fun (i : ‚Ñï) => (norm (coeff R i f)) * c ^ i) atTop (ùìù 0)

namespace IsRestricted

variable {R : Type*} [NormedRing R] (c : ‚Ñù)

lemma isRestricted_iff {f : PowerSeries R} : IsRestricted c f ‚Üî
    ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N ‚â§ n ‚Üí ‚Äñ‚Äñ(coeff R n) f‚Äñ * c ^ n‚Äñ < Œµ := by
  simp [IsRestricted, NormedAddCommGroup.tendsto_atTop]

lemma isRestricted_iff_abs (f : PowerSeries R) : IsRestricted c f ‚Üî IsRestricted |c| f := by
  simp [isRestricted_iff]

lemma zero : IsRestricted c (0 : PowerSeries R) := by
  simp [IsRestricted]

lemma one : IsRestricted c (1 : PowerSeries R) := by
  simp only [isRestricted_iff, coeff_one, norm_mul, norm_pow, Real.norm_eq_abs]
  refine fun _ _ ‚Ü¶ ‚ü®1, fun n hn ‚Ü¶ ?_ ‚ü©
  split
  ¬∑ omega
  ¬∑ simpa

lemma add {f g : PowerSeries R} (hf : IsRestricted c f) (hg : IsRestricted c g) :
    IsRestricted c (f + g) := by
  simp only [isRestricted_iff, map_add, norm_mul, norm_pow, Real.norm_eq_abs] at ‚ä¢ hf hg
  intro Œµ hŒµ
  obtain ‚ü®fN, hfN‚ü© := hf (Œµ / 2) (by positivity)
  obtain ‚ü®gN, hgN‚ü© := hg (Œµ / 2) (by positivity)
  simp only [abs_norm] at hfN hgN ‚ä¢
  refine ‚ü®max fN gN, fun n hn ‚Ü¶ ?_ ‚ü©
  calc _ ‚â§ ‚Äñ(coeff R n) f‚Äñ * |c| ^ n + ‚Äñ(coeff R n) g‚Äñ * |c| ^ n := by grw [norm_add_le, add_mul]
       _ < Œµ / 2 + Œµ / 2 := by gcongr <;> grind
       _ = Œµ := by ring

lemma neg {f : PowerSeries R} (hf : IsRestricted c f) : IsRestricted c (-f) := by
  simpa [isRestricted_iff] using hf

/-- The set of `‚Äñcoeff R i f‚Äñ * c^i` for a given power series `f` and parameter `c`. -/
def convergenceSet (f : PowerSeries R) : Set ‚Ñù := {‚Äñcoeff R i f‚Äñ * c^i | i : ‚Ñï}

open Finset in
lemma convergenceSet_BddAbove {f : PowerSeries R} (hf : IsRestricted c f) :
  BddAbove (convergenceSet c f) := by
  simp_rw [isRestricted_iff] at hf
  obtain ‚ü®N, hf‚ü© := by simpa using (hf 1)
  rw [bddAbove_def, convergenceSet]
  use max 1 (Finset.max' (Finset.image (fun i => ‚Äñcoeff R i f‚Äñ * c^i) (range (N+1))) (by simp))
  simp only [Set.mem_setOf_eq, le_sup_iff, forall_exists_index, forall_apply_eq_imp_iff]
  intro i
  rcases le_total i N with h | h
  ¬∑ right
    apply Finset.le_max'
    simp only [Finset.mem_image, Finset.mem_range]
    exact ‚ü®i, Order.lt_add_one_iff.mpr h, rfl‚ü©
  ¬∑ left
    calc _ ‚â§ ‚Äñ(coeff R i) f‚Äñ * |c ^ i| := by bound
         _ ‚â§ 1 := by simpa using (hf i h).le

lemma convergenceSet_leNNeg {f : PowerSeries R} (hf : IsRestricted c f) :
    ‚àÉ A > 0, ‚àÄ i, ‚Äñcoeff R i f‚Äñ * c ^ i ‚â§ A := by
  obtain ‚ü®n, hn‚ü© := by simpa only [bddAbove_def] using (convergenceSet_BddAbove c hf)
  simp_rw [convergenceSet, Set.mem_setOf_eq, forall_exists_index, forall_apply_eq_imp_iff] at hn
  rcases (eq_zero_or_neZero n) with h | h
  ¬∑ exact ‚ü®n + 1, ‚ü®by aesop, fun i ‚Ü¶ by linarith [hn i]‚ü©‚ü©
  ¬∑ exact ‚ü®|n|, by aesop, fun i ‚Ü¶ by linarith [hn i, le_abs_self n]‚ü©

variable [IsUltrametricDist R]

open IsUltrametricDist

lemma mul {f g : PowerSeries R} (hf : IsRestricted c f) (hg : IsRestricted c g) :
    IsRestricted c (f * g) := by
  obtain ‚ü®a, ha, fBound1‚ü© := convergenceSet_leNNeg |c| ((isRestricted_iff_abs c f).mp hf)
  obtain ‚ü®b, hb, gBound1‚ü© := convergenceSet_leNNeg |c| ((isRestricted_iff_abs c g).mp hg)
  simp only [isRestricted_iff, norm_mul, norm_pow, Real.norm_eq_abs, abs_norm,
    PowerSeries.coeff_mul] at ‚ä¢ hf hg
  intro Œµ hŒµ
  obtain ‚ü®Nf, fBound2‚ü© := (hf (Œµ / (max a b))) (by positivity)
  obtain ‚ü®Ng, gBound2‚ü© := (hg (Œµ / (max a b))) (by positivity)
  refine ‚ü®2 * max Nf Ng,  fun n hn ‚Ü¶ ?_‚ü©
  obtain ‚ü®‚ü®fst, snd‚ü©, hi, ultrametric‚ü© := exists_norm_finset_sum_le (Finset.antidiagonal n)
    (fun a => (coeff R a.1) f * (coeff R a.2) g)
  obtain ‚ü®rfl‚ü© := by simpa only [Finset.mem_antidiagonal] using hi (‚ü®(0, n), by aesop‚ü©)
  calc _ ‚â§ ‚Äñ(coeff R fst) f * (coeff R snd) g‚Äñ * |c| ^ (fst + snd) := by bound
       _ ‚â§ ‚Äñ(coeff R fst) f‚Äñ * |c| ^ fst * (‚Äñ(coeff R snd) g‚Äñ * |c| ^ snd) := by
        have := mul_le_mul_of_nonneg_right
          (NormedRing.norm_mul_le ((coeff R fst) f) ((coeff R snd) g))
          (pow_nonneg (abs_nonneg c) (fst + snd))
        grind
  have : fst ‚â• max Nf Ng ‚à® snd ‚â• max Nf Ng := by omega
  rcases this with this | this
  ¬∑ calc _ < Œµ / max a b * b := mul_lt_mul_of_lt_of_le_of_nonneg_of_pos ((fBound2 fst) (by aesop))
          (gBound1 snd) (by bound) hb
         _ ‚â§ Œµ := by
          simpa only [div_mul_comm] using ((mul_le_iff_le_one_left hŒµ).mpr
            ((div_le_one‚ÇÄ (lt_sup_of_lt_left ha)).mpr (le_max_right a b)))
  ¬∑ calc _ < a * (Œµ / max a b) := mul_lt_mul_of_le_of_lt_of_nonneg_of_pos (fBound1 fst)
          ((gBound2 snd) (by aesop)) (by bound) ha
         _ ‚â§ Œµ := by
          simpa only [mul_div_left_comm] using ((mul_le_iff_le_one_right hŒµ).mpr
            ((div_le_one‚ÇÄ (lt_sup_of_lt_left ha)).mpr (le_max_left a b)))

end IsRestricted
end PowerSeries
