/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Kim Morrison
-/
import Mathlib.Algebra.Homology.BifunctorAssociator
import Mathlib.Algebra.Homology.Single
import Mathlib.CategoryTheory.GradedObject.Monoidal
import Mathlib.CategoryTheory.Monoidal.Transport

/-!
# The monoidal category structure on homological complexes

Let `c : ComplexShape I` with `I` an additive monoid. If `c` is equipped
with the data and axioms `c.TensorSigns`, then the category
`HomologicalComplex C c` can be equipped with a monoidal category
structure if `C` is a monoidal category such that `C` has certain
coproducts and both left/right tensoring commute with these.

In particular, we obtain a monoidal category structure on
`ChainComplex C ‚Ñï` when `C` is an additive monoidal category.

-/

open CategoryTheory Limits MonoidalCategory Category

namespace HomologicalComplex

variable {C : Type*} [Category C] [MonoidalCategory C] [Preadditive C] [HasZeroObject C]
  [(curriedTensor C).Additive] [‚àÄ (X‚ÇÅ : C), ((curriedTensor C).obj X‚ÇÅ).Additive]
  {I : Type*} [AddMonoid I] {c : ComplexShape I} [c.TensorSigns]

/-- If `K‚ÇÅ` and `K‚ÇÇ` are two homological complexes, this is the property that
for all `j`, the coproduct of `K‚ÇÅ i‚ÇÅ ‚äó K‚ÇÇ i‚ÇÇ` for `i‚ÇÅ + i‚ÇÇ = j` exists. -/
abbrev HasTensor (K‚ÇÅ K‚ÇÇ : HomologicalComplex C c) := HasMapBifunctor K‚ÇÅ K‚ÇÇ (curriedTensor C) c

section

variable [DecidableEq I]

/-- The tensor product of two homological complexes. -/
noncomputable abbrev tensorObj (K‚ÇÅ K‚ÇÇ : HomologicalComplex C c) [HasTensor K‚ÇÅ K‚ÇÇ] :
    HomologicalComplex C c :=
  mapBifunctor K‚ÇÅ K‚ÇÇ (curriedTensor C) c

/-- The inclusion `K‚ÇÅ.X i‚ÇÅ ‚äó K‚ÇÇ.X i‚ÇÇ ‚ü∂ (tensorObj K‚ÇÅ K‚ÇÇ).X j` of a summand in
the tensor product of the homological complexes. -/
noncomputable abbrev ŒπTensorObj (K‚ÇÅ K‚ÇÇ : HomologicalComplex C c) [HasTensor K‚ÇÅ K‚ÇÇ]
    (i‚ÇÅ i‚ÇÇ j : I) (h : i‚ÇÅ + i‚ÇÇ = j) :
    K‚ÇÅ.X i‚ÇÅ ‚äó K‚ÇÇ.X i‚ÇÇ ‚ü∂ (tensorObj K‚ÇÅ K‚ÇÇ).X j :=
  ŒπMapBifunctor K‚ÇÅ K‚ÇÇ (curriedTensor C) c i‚ÇÅ i‚ÇÇ j h

/-- The tensor product of two morphisms of homological complexes. -/
noncomputable abbrev tensorHom {K‚ÇÅ K‚ÇÇ L‚ÇÅ L‚ÇÇ : HomologicalComplex C c}
    (f : K‚ÇÅ ‚ü∂ L‚ÇÅ) (g : K‚ÇÇ ‚ü∂ L‚ÇÇ) [HasTensor K‚ÇÅ K‚ÇÇ] [HasTensor L‚ÇÅ L‚ÇÇ] :
    tensorObj K‚ÇÅ K‚ÇÇ ‚ü∂ tensorObj L‚ÇÅ L‚ÇÇ :=
  mapBifunctorMap f g _ _

/-- Given three homological complexes `K‚ÇÅ`, `K‚ÇÇ`, and `K‚ÇÉ`, this asserts that for
all `j`, the functor `- ‚äó K‚ÇÉ.X i‚ÇÉ` commutes with the coproduct of
the `K‚ÇÅ.X i‚ÇÅ ‚äó K‚ÇÇ.X i‚ÇÇ` such that `i‚ÇÅ + i‚ÇÇ = j`. -/
abbrev HasGoodTensor‚ÇÅ‚ÇÇ (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c) :=
  HasGoodTrifunctor‚ÇÅ‚ÇÇObj (curriedTensor C) (curriedTensor C) K‚ÇÅ K‚ÇÇ K‚ÇÉ c c

/-- Given three homological complexes `K‚ÇÅ`, `K‚ÇÇ`, and `K‚ÇÉ`, this asserts that for
all `j`, the functor `K‚ÇÅ.X i‚ÇÅ` commutes with the coproduct of
the `K‚ÇÇ.X i‚ÇÇ ‚äó K‚ÇÉ.X i‚ÇÉ` such that `i‚ÇÇ + i‚ÇÉ = j`. -/
abbrev HasGoodTensor‚ÇÇ‚ÇÉ (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c) :=
  HasGoodTrifunctor‚ÇÇ‚ÇÉObj (curriedTensor C) (curriedTensor C) K‚ÇÅ K‚ÇÇ K‚ÇÉ c c c

/-- The associator isomorphism for the tensor product of homological complexes. -/
noncomputable abbrev associator (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c)
    [HasTensor K‚ÇÅ K‚ÇÇ] [HasTensor K‚ÇÇ K‚ÇÉ]
    [HasTensor (tensorObj K‚ÇÅ K‚ÇÇ) K‚ÇÉ] [HasTensor K‚ÇÅ (tensorObj K‚ÇÇ K‚ÇÉ)]
    [HasGoodTensor‚ÇÅ‚ÇÇ K‚ÇÅ K‚ÇÇ K‚ÇÉ] [HasGoodTensor‚ÇÇ‚ÇÉ K‚ÇÅ K‚ÇÇ K‚ÇÉ] :
    tensorObj (tensorObj K‚ÇÅ K‚ÇÇ) K‚ÇÉ ‚âÖ tensorObj K‚ÇÅ (tensorObj K‚ÇÇ K‚ÇÉ) :=
  mapBifunctorAssociator (curriedAssociatorNatIso C) K‚ÇÅ K‚ÇÇ K‚ÇÉ c c c

variable (C c) in
/-- The unit of the tensor product of homological complexes. -/
noncomputable abbrev tensorUnit : HomologicalComplex C c := (single C c 0).obj (ùüô_ C)

variable (C c) in
/-- As a graded object, the single complex `(single C c 0).obj (ùüô_ C)` identifies
to the unit `(GradedObject.single‚ÇÄ I).obj (ùüô_ C)` of the tensor product of graded objects. -/
noncomputable def tensorUnitIso :
    (GradedObject.single‚ÇÄ I).obj (ùüô_ C) ‚âÖ (tensorUnit C c).X :=
  GradedObject.isoMk _ _ (fun i ‚Ü¶
    if hi : i = 0 then
      (GradedObject.singleObjApplyIsoOfEq (0 : I) (ùüô_ C) i hi).trans
        (singleObjXIsoOfEq c 0 (ùüô_ C) i hi).symm
    else
      { hom := 0
        inv := 0
        hom_inv_id := (GradedObject.isInitialSingleObjApply 0 (ùüô_ C) i hi).hom_ext _ _
        inv_hom_id := (isZero_single_obj_X c 0 (ùüô_ C) i hi).eq_of_src _ _ })

end

instance (K‚ÇÅ K‚ÇÇ : HomologicalComplex C c) [GradedObject.HasTensor K‚ÇÅ.X K‚ÇÇ.X] :
    HasTensor K‚ÇÅ K‚ÇÇ := by
  assumption

instance (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c)
    [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor K‚ÇÅ.X K‚ÇÇ.X K‚ÇÉ.X] :
    HasGoodTensor‚ÇÅ‚ÇÇ K‚ÇÅ K‚ÇÇ K‚ÇÉ :=
  inferInstanceAs (GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor K‚ÇÅ.X K‚ÇÇ.X K‚ÇÉ.X)

instance (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c)
    [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ K‚ÇÅ.X K‚ÇÇ.X K‚ÇÉ.X] :
    HasGoodTensor‚ÇÇ‚ÇÉ K‚ÇÅ K‚ÇÇ K‚ÇÉ :=
  inferInstanceAs (GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ K‚ÇÅ.X K‚ÇÇ.X K‚ÇÉ.X)

section

variable (K : HomologicalComplex C c) [DecidableEq I]

section

variable [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C) ((curriedTensor C).flip.obj X‚ÇÇ)]

instance : GradedObject.HasTensor (tensorUnit C c).X K.X :=
  GradedObject.hasTensor_of_iso (tensorUnitIso C c) (Iso.refl _)

instance : HasTensor (tensorUnit C c) K :=
  inferInstanceAs (GradedObject.HasTensor (tensorUnit C c).X K.X)

@[simp]
lemma unit_tensor_d‚ÇÅ (i‚ÇÅ i‚ÇÇ j : I) :
    mapBifunctor.d‚ÇÅ (tensorUnit C c) K (curriedTensor C) c i‚ÇÅ i‚ÇÇ j = 0 := by
  by_cases h‚ÇÅ : c.Rel i‚ÇÅ (c.next i‚ÇÅ)
  ¬∑ by_cases h‚ÇÇ : ComplexShape.œÄ c c c (c.next i‚ÇÅ, i‚ÇÇ) = j
    ¬∑ rw [mapBifunctor.d‚ÇÅ_eq _ _ _ _ h‚ÇÅ _ _ h‚ÇÇ, single_obj_d, Functor.map_zero,
        zero_app, zero_comp, smul_zero]
    ¬∑ rw [mapBifunctor.d‚ÇÅ_eq_zero' _ _ _ _ h‚ÇÅ _ _ h‚ÇÇ]
  ¬∑ rw [mapBifunctor.d‚ÇÅ_eq_zero _ _ _ _ _ _ _ h‚ÇÅ]

end

section

variable [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C) ((curriedTensor C).obj X‚ÇÅ)]

instance : GradedObject.HasTensor K.X (tensorUnit C c).X :=
  GradedObject.hasTensor_of_iso (Iso.refl _) (tensorUnitIso C c)

instance : HasTensor K (tensorUnit C c) :=
  inferInstanceAs (GradedObject.HasTensor K.X (tensorUnit C c).X)

@[simp]
lemma tensor_unit_d‚ÇÇ (i‚ÇÅ i‚ÇÇ j : I) :
    mapBifunctor.d‚ÇÇ K (tensorUnit C c) (curriedTensor C) c i‚ÇÅ i‚ÇÇ j = 0 := by
  by_cases h‚ÇÅ : c.Rel i‚ÇÇ (c.next i‚ÇÇ)
  ¬∑ by_cases h‚ÇÇ : ComplexShape.œÄ c c c (i‚ÇÅ, c.next i‚ÇÇ) = j
    ¬∑ rw [mapBifunctor.d‚ÇÇ_eq _ _ _ _ _ h‚ÇÅ _ h‚ÇÇ, single_obj_d, Functor.map_zero,
        zero_comp, smul_zero]
    ¬∑ rw [mapBifunctor.d‚ÇÇ_eq_zero' _ _ _ _ _ h‚ÇÅ _ h‚ÇÇ]
  ¬∑ rw [mapBifunctor.d‚ÇÇ_eq_zero _ _ _ _ _ _ _ h‚ÇÅ]

end

end

section Unitor

variable (K : HomologicalComplex C c) [DecidableEq I]

section LeftUnitor

variable [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C) ((curriedTensor C).flip.obj X‚ÇÇ)]

/-- Auxiliary definition for `leftUnitor`. -/
noncomputable def leftUnitor' :
    (tensorObj (tensorUnit C c) K).X ‚âÖ K.X :=
  GradedObject.Monoidal.tensorIso ((tensorUnitIso C c).symm) (Iso.refl _) ‚â™‚â´
    GradedObject.Monoidal.leftUnitor K.X

lemma leftUnitor'_inv (i : I) :
    (leftUnitor' K).inv i = (Œª_ (K.X i)).inv ‚â´ ((singleObjXSelf c 0 (ùüô_ C)).inv ‚ñ∑ (K.X i)) ‚â´
      ŒπTensorObj (tensorUnit C c) K 0 i i (zero_add i) := by
  dsimp [leftUnitor']
  rw [GradedObject.Monoidal.leftUnitor_inv_apply, assoc, assoc, Iso.cancel_iso_inv_left,
    GradedObject.Monoidal.Œπ_tensorHom]
  dsimp
  rw [tensorHom_id, ‚Üê comp_whiskerRight_assoc]
  congr 2
  rw [‚Üê cancel_epi (GradedObject.Monoidal.tensorUnit‚ÇÄ (I := I)).hom, Iso.hom_inv_id_assoc]
  dsimp [tensorUnitIso]
  rw [dif_pos rfl]
  rfl

@[reassoc]
lemma leftUnitor'_inv_comm (i j : I) :
    (leftUnitor' K).inv i ‚â´ (tensorObj (tensorUnit C c) K).d i j =
      K.d i j ‚â´ (leftUnitor' K).inv j := by
  by_cases hij : c.Rel i j
  ¬∑ simp only [leftUnitor'_inv, assoc, mapBifunctor.d_eq,
      Preadditive.comp_add, mapBifunctor.Œπ_D‚ÇÅ, mapBifunctor.Œπ_D‚ÇÇ,
      unit_tensor_d‚ÇÅ, comp_zero, zero_add]
    rw [mapBifunctor.d‚ÇÇ_eq _ _ _ _ _ hij _ (by simp)]
    dsimp
    simp only [ComplexShape.Œµ_zero, one_smul, ‚Üê whisker_exchange_assoc,
      id_whiskerLeft, assoc, Iso.inv_hom_id_assoc]
  ¬∑ simp only [shape _ _ _ hij, comp_zero, zero_comp]

/-- The left unitor for the tensor product of homological complexes. -/
noncomputable def leftUnitor :
    tensorObj (tensorUnit C c) K ‚âÖ K :=
  Iso.symm (Hom.isoOfComponents (fun i ‚Ü¶ (GradedObject.eval i).mapIso (leftUnitor' K).symm)
    (fun _ _ _ ‚Ü¶ leftUnitor'_inv_comm _ _ _))

end LeftUnitor

section RightUnitor

variable [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C) ((curriedTensor C).obj X‚ÇÅ)]

/-- Auxiliary definition for `rightUnitor`. -/
noncomputable def rightUnitor' :
    (tensorObj K (tensorUnit C c)).X ‚âÖ K.X :=
  GradedObject.Monoidal.tensorIso (Iso.refl _) ((tensorUnitIso C c).symm)  ‚â™‚â´
    GradedObject.Monoidal.rightUnitor K.X

lemma rightUnitor'_inv (i : I) :
    (rightUnitor' K).inv i = (œÅ_ (K.X i)).inv ‚â´ ((K.X i) ‚óÅ (singleObjXSelf c 0 (ùüô_ C)).inv) ‚â´
      ŒπTensorObj K (tensorUnit C c) i 0 i (add_zero i) := by
  dsimp [rightUnitor']
  rw [GradedObject.Monoidal.rightUnitor_inv_apply, assoc, assoc, Iso.cancel_iso_inv_left,
    GradedObject.Monoidal.Œπ_tensorHom]
  dsimp
  rw [id_tensorHom, ‚Üê MonoidalCategory.whiskerLeft_comp_assoc]
  congr 2
  rw [‚Üê cancel_epi (GradedObject.Monoidal.tensorUnit‚ÇÄ (I := I)).hom, Iso.hom_inv_id_assoc]
  dsimp [tensorUnitIso]
  rw [dif_pos rfl]
  rfl

lemma rightUnitor'_inv_comm (i j : I) :
    (rightUnitor' K).inv i ‚â´ (tensorObj K (tensorUnit C c)).d i j =
      K.d i j ‚â´ (rightUnitor' K).inv j := by
  by_cases hij : c.Rel i j
  ¬∑ simp only [rightUnitor'_inv, assoc, mapBifunctor.d_eq,
      Preadditive.comp_add, mapBifunctor.Œπ_D‚ÇÅ, mapBifunctor.Œπ_D‚ÇÇ,
      tensor_unit_d‚ÇÇ, comp_zero, add_zero]
    rw [mapBifunctor.d‚ÇÅ_eq _ _ _ _ hij _ _ (by simp)]
    dsimp
    simp only [one_smul, whisker_exchange_assoc,
      MonoidalCategory.whiskerRight_id, assoc, Iso.inv_hom_id_assoc]
  ¬∑ simp only [shape _ _ _ hij, comp_zero, zero_comp]

/-- The right unitor for the tensor product of homological complexes. -/
noncomputable def rightUnitor :
    tensorObj K (tensorUnit C c) ‚âÖ K :=
  Iso.symm (Hom.isoOfComponents (fun i ‚Ü¶ (GradedObject.eval i).mapIso (rightUnitor' K).symm)
    (fun _ _ _ ‚Ü¶ rightUnitor'_inv_comm _ _ _))

end RightUnitor

end Unitor

variable (C c) [‚àÄ (X‚ÇÅ X‚ÇÇ : GradedObject I C), GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
  [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C) ((curriedTensor C).obj X‚ÇÅ)]
  [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C) ((curriedTensor C).flip.obj X‚ÇÇ)]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject I C), GradedObject.HasTensor‚ÇÑObjExt X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [DecidableEq I]

noncomputable instance monoidalCategoryStruct :
    MonoidalCategoryStruct (HomologicalComplex C c) where
  tensorObj K‚ÇÅ K‚ÇÇ := tensorObj K‚ÇÅ K‚ÇÇ
  whiskerLeft _ _ _ g := tensorHom (ùüô _) g
  whiskerRight f _ := tensorHom f (ùüô _)
  tensorHom f g := tensorHom f g
  tensorUnit := tensorUnit C c
  associator K‚ÇÅ K‚ÇÇ K‚ÇÉ := associator K‚ÇÅ K‚ÇÇ K‚ÇÉ
  leftUnitor K := leftUnitor K
  rightUnitor K := rightUnitor K

/-- The structure which allows to construct the monoidal category structure
on `HomologicalComplex C c` from the monoidal category structure on
graded objects. -/
noncomputable def Monoidal.inducingFunctorData :
    Monoidal.InducingFunctorData (forget C c) where
  ŒºIso _ _ := Iso.refl _
  ŒµIso := tensorUnitIso C c
  whiskerLeft_eq K‚ÇÅ K‚ÇÇ L‚ÇÇ g := by
    dsimp [forget]
    erw [comp_id, id_comp]
    rfl
  whiskerRight_eq {K‚ÇÅ L‚ÇÅ} f K‚ÇÇ := by
    dsimp [forget]
    erw [comp_id, id_comp]
    rfl
  tensorHom_eq {K‚ÇÅ L‚ÇÅ K‚ÇÇ L‚ÇÇ} f g := by
    dsimp [forget]
    erw [comp_id, id_comp]
    rfl
  associator_eq K‚ÇÅ K‚ÇÇ K‚ÇÉ := by
    dsimp [forget]
    simp only [tensorHom_id, whiskerRight_tensor, id_whiskerRight,
      id_comp, Iso.inv_hom_id, comp_id, assoc]
    erw [id_whiskerRight, id_comp, id_comp]
    rfl
  leftUnitor_eq K := by
    dsimp
    erw [id_comp]
    rfl
  rightUnitor_eq K := by
    dsimp
    rw [assoc]
    erw [id_comp]
    rfl

noncomputable instance monoidalCategory : MonoidalCategory (HomologicalComplex C c) :=
  Monoidal.induced _ (Monoidal.inducingFunctorData C c)

noncomputable example {D : Type*} [Category D] [Preadditive D] [MonoidalCategory D]
    [HasZeroObject D] [HasFiniteCoproducts D] [((curriedTensor D).Additive)]
    [‚àÄ (X : D), (((curriedTensor D).obj X).Additive)]
    [‚àÄ (X : D), PreservesFiniteCoproducts ((curriedTensor D).obj X)]
    [‚àÄ (X : D), PreservesFiniteCoproducts ((curriedTensor D).flip.obj X)] :
    MonoidalCategory (ChainComplex D ‚Ñï) := inferInstance

end HomologicalComplex
