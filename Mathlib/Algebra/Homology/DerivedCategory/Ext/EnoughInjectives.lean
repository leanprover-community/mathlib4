/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences

/-!
# Smallness of Ext-groups from the existence of enough injectives

Let `C : Type u` be an abelian category (`Category.{v} C`) that has enough injectives.
If `C` is locally `w`-small, i.e. the type of morphisms in `C` are `Small.{w}`,
then we show that the condition `HasExt.{w}` holds, which means that for `X` and `Y` in `C`,
and `n : ‚Ñï`, we may define `Ext X Y n : Type w`. In particular, this holds for `w = v`.

However, the main lemma `hasExt_of_enoughInjectives` is not made an instance:
for a given category `C`, there may be different reasonable choices for the universe `w`,
and if we have two `HasExt.{w‚ÇÅ}` and `HasExt.{w‚ÇÇ}` instances, we would have
to specify the universe explicitly almost everywhere, which would be an inconvenience.
Then, we must be very selective regarding `HasExt` instances.

Note: this file dualizes the results in `HasEnoughProjectives.lean`.

-/

universe w v u

open CategoryTheory Category

variable {C : Type u} [Category.{v} C] [Abelian C]

namespace CochainComplex

open HomologicalComplex

lemma isSplitMono_from_singleFunctor_obj_of_injective
    {I : C} [Injective I] {L : CochainComplex C ‚Ñ§} {i : ‚Ñ§}
    (Œπ : (CochainComplex.singleFunctor C i).obj I ‚ü∂ L) [L.IsStrictlyGE i] [QuasiIsoAt Œπ i] :
    IsSplitMono Œπ := by
  let e := L.pOpcyclesIso (i - 1) i (by simp)
    ((L.isZero_of_isStrictlyGE i (i - 1) (by simp)).eq_of_src _ _)
  let Œ± := (singleObjHomologySelfIso _ _ _).inv ‚â´ homologyMap Œπ i ‚â´ L.homologyŒπ i ‚â´ e.inv
  have : Œπ.f i = (singleObjXSelf (ComplexShape.up ‚Ñ§) i I).hom ‚â´ Œ± := by
    rw [‚Üê cancel_mono e.hom]
    dsimp [Œ±, e]
    rw [assoc, assoc, assoc, assoc, pOpcyclesIso_inv_hom_id, comp_id, homologyŒπ_naturality]
    dsimp [singleFunctor, singleFunctors]
    rw [singleObjHomologySelfIso_inv_homologyŒπ_assoc,
      ‚Üê pOpcycles_singleObjOpcyclesSelfIso_inv_assoc, Iso.inv_hom_id_assoc, p_opcyclesMap]
  exact ‚ü®‚ü®{
    retraction := mkHomToSingle (Injective.factorThru (ùüô I) Œ±) (by
      rintro j rfl
      apply (L.isZero_of_isStrictlyGE (j + 1) j (by simp)).eq_of_src)
    id := by
      apply HomologicalComplex.to_single_hom_ext
      rw [comp_f, mkHomToSingle_f, id_f, this, assoc, Injective.comp_factorThru_assoc,
        id_comp, Iso.hom_inv_id] }‚ü©‚ü©

end CochainComplex

namespace DerivedCategory

variable [HasDerivedCategory.{w} C]

lemma to_singleFunctor_obj_eq_zero_of_injective {I : C} [Injective I]
    {K : CochainComplex C ‚Ñ§} {i : ‚Ñ§}
    (œÜ : Q.obj K ‚ü∂ Q.obj ((CochainComplex.singleFunctor C i).obj I))
    (n : ‚Ñ§) (hn : i < n) [K.IsStrictlyGE n] :
    œÜ = 0 := by
  obtain ‚ü®L, _, g, Œπ, h, rfl‚ü© := left_fac_of_isStrictlyGE œÜ i
  have hœÄ : IsSplitMono Œπ := by
    rw [isIso_Q_map_iff_quasiIso] at h
    exact CochainComplex.isSplitMono_from_singleFunctor_obj_of_injective Œπ
  have h‚ÇÅ : inv (Q.map Œπ) = Q.map (retraction Œπ) := by
    rw [‚Üê cancel_epi (Q.map Œπ), IsIso.hom_inv_id, ‚Üê Q.map_comp, IsSplitMono.id, Q.map_id]
  have h‚ÇÇ : g ‚â´ retraction Œπ = 0 := by
    apply HomologicalComplex.to_single_hom_ext
    apply (K.isZero_of_isStrictlyGE n i hn).eq_of_src
  rw [h‚ÇÅ, ‚Üê Q.map_comp, h‚ÇÇ, Q.map_zero]

end DerivedCategory

namespace CategoryTheory

open Limits

variable {C : Type u} [Category.{v} C] [Abelian C]

namespace Abelian.Ext

open DerivedCategory

lemma eq_zero_of_injective [HasExt.{w} C] {X I : C} {n : ‚Ñï} [Injective I]
    (e : Ext X I (n + 1)) : e = 0 := by
  let K := (CochainComplex.singleFunctor C 0).obj X
  have := K.isStrictlyGE_of_ge (-n) 0 (by omega)
  letI := HasDerivedCategory.standard C
  apply homEquiv.injective
  simp only [‚Üê cancel_mono (((singleFunctors C).shiftIso (n + 1) (-(n + 1)) 0
    (by omega)).hom.app _), zero_hom, Limits.zero_comp]
  exact to_singleFunctor_obj_eq_zero_of_injective (K := K) (n := -n) _ (by omega)

end Abelian.Ext

variable (C)

open Abelian

/-- If `C` is a locally `w`-small abelian category with enough injectives,
then `HasExt.{w} C` holds. We do not make this an instance though:
for a given category `C`, there may be different reasonable choices for
the universe `w`, and if we have two `HasExt.{w‚ÇÅ} C` and `HasExt.{w‚ÇÇ} C`
instances, we would have to specify the universe explicitly almost
everywhere, which would be an inconvenience. Then, we must be
very selective regarding `HasExt` instances. -/
lemma hasExt_of_enoughInjectives [LocallySmall.{w} C] [EnoughInjectives C] :
  HasExt.{w} C := by
    letI := HasDerivedCategory.standard C
    have := hasExt_of_hasDerivedCategory C
    rw [hasExt_iff_small_ext.{w}]
    intro X Y n
    induction n generalizing X Y with
    | zero =>
      rw [small_congr Ext.homEquiv‚ÇÄ]
      infer_instance
    | succ n hn =>
      let S := ShortComplex.mk _ _ (cokernel.condition (Injective.Œπ Y))
      have hS : S.ShortExact :=
        { exact := ShortComplex.exact_of_g_is_cokernel _ (cokernelIsCokernel S.f) }
      have : Function.Surjective (Ext.postcomp hS.extClass X (rfl : n + 1 = _)) :=
        fun y‚ÇÅ ‚Ü¶ Ext.covariant_sequence_exact‚ÇÅ X hS y‚ÇÅ (Ext.eq_zero_of_injective _) rfl
      exact small_of_surjective.{w} this

end CategoryTheory
