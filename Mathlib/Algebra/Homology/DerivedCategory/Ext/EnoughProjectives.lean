/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences

/-!
# Smallness of Ext-groups from the existence of enough projectives

Let `C : Type u` be an abelian category (`Category.{v} C`) that has enough projectives.
If `C` is locally `w`-small, i.e. the type of morphisms in `C` are `Small.{w}`,
then we show that the condition `HasExt.{w}` holds, which means that for `X` and `Y` in `C`,
and `n : ‚Ñï`, we may define `Ext X Y n : Type w`. In particular, this holds for `w = v`.

However, the main lemma `hasExt_of_enoughProjectives` is not made an instance:
for a given category `C`, there may be different reasonable choices for the universe `w`,
and if we have two `HasExt.{w‚ÇÅ}` and `HasExt.{w‚ÇÇ}` instances, we would have
to specify the universe explicitly almost everywhere, which would be an inconvenience.
So we must be very selective regarding `HasExt` instances.

-/

universe w v u

open CategoryTheory Category

variable {C : Type u} [Category.{v} C] [Abelian C]

namespace CochainComplex

open HomologicalComplex

lemma isSplitEpi_to_singleFunctor_obj_of_projective
    {P : C} [Projective P] {K : CochainComplex C ‚Ñ§} {i : ‚Ñ§}
    (œÄ : K ‚ü∂ (CochainComplex.singleFunctor C i).obj P) [K.IsStrictlyLE i] [QuasiIsoAt œÄ i] :
    IsSplitEpi œÄ := by
  let e := K.iCyclesIso i (i + 1) (by simp)
    ((K.isZero_of_isStrictlyLE i (i + 1) (by simp)).eq_of_tgt _ _)
  let Œ± := e.inv ‚â´ K.homologyœÄ i ‚â´ homologyMap œÄ i ‚â´ (singleObjHomologySelfIso _ _ _).hom
  have : œÄ.f i = Œ± ‚â´ (singleObjXSelf (ComplexShape.up ‚Ñ§) i P).inv := by
    rw [‚Üê cancel_epi e.hom]
    dsimp [Œ±, e]
    rw [assoc, assoc, assoc, iCyclesIso_hom_inv_id_assoc,
      homologyœÄ_naturality_assoc]
    dsimp [singleFunctor, singleFunctors]
    rw [homologyœÄ_singleObjHomologySelfIso_hom_assoc,
      ‚Üê singleObjCyclesSelfIso_inv_iCycles, Iso.hom_inv_id_assoc, ‚Üê cyclesMap_i]
  exact ‚ü®‚ü®{
    section_ := mkHomFromSingle (Projective.factorThru (ùüô P) Œ±) (by
      rintro _ rfl
      apply (K.isZero_of_isStrictlyLE i (i + 1) (by simp)).eq_of_tgt)
    id := by
      apply HomologicalComplex.from_single_hom_ext
      rw [comp_f, mkHomFromSingle_f, assoc, id_f, this, Projective.factorThru_comp_assoc,
        id_comp, Iso.hom_inv_id]
      rfl }‚ü©‚ü©

end CochainComplex

namespace DerivedCategory

variable [HasDerivedCategory.{w} C]

lemma from_singleFunctor_obj_projective_eq_zero {P : C} [Projective P]
    {L : CochainComplex C ‚Ñ§} {i : ‚Ñ§}
    (œÜ : Q.obj ((CochainComplex.singleFunctor C i).obj P) ‚ü∂ Q.obj L)
    (n : ‚Ñ§) (hn : n < i) [L.IsStrictlyLE n] :
    œÜ = 0 := by
  obtain ‚ü®K, _, œÄ, h, g, rfl‚ü©:= right_fac_of_isStrictlyLE œÜ i
  have hœÄ : IsSplitEpi œÄ := by
    rw [isIso_Q_map_iff_quasiIso] at h
    exact CochainComplex.isSplitEpi_to_singleFunctor_obj_of_projective œÄ
  have h‚ÇÅ : inv (Q.map œÄ) = Q.map (section_ œÄ) := by
    rw [‚Üê cancel_mono (Q.map œÄ), IsIso.inv_hom_id, ‚Üê Q.map_comp, IsSplitEpi.id, Q.map_id]
  have h‚ÇÇ : section_ œÄ ‚â´ g = 0 := by
    apply HomologicalComplex.from_single_hom_ext
    apply (L.isZero_of_isStrictlyLE n i hn).eq_of_tgt
  rw [h‚ÇÅ, ‚Üê Q.map_comp, h‚ÇÇ, Q.map_zero]

end DerivedCategory

namespace CategoryTheory

open Limits

variable {C : Type u} [Category.{v} C] [Abelian C]

namespace Abelian.Ext

open DerivedCategory

lemma eq_zero_of_projective [HasExt.{w} C] {P Y : C} {n : ‚Ñï} [Projective P]
    (e : Ext P Y (n + 1)) : e = 0 := by
  letI := HasDerivedCategory.standard C
  apply homEquiv.injective
  simp only [‚Üê cancel_mono (((singleFunctors C).shiftIso (n + 1) (- (n + 1)) 0
    (by omega)).hom.app _), zero_hom, Limits.zero_comp]
  apply from_singleFunctor_obj_projective_eq_zero
    (L := (CochainComplex.singleFunctor C (-(n + 1))).obj Y) (n := - (n + 1)) _ (by omega)

end Abelian.Ext

variable (C)

open Abelian

lemma hasExt_of_enoughProjectives [LocallySmall.{w} C] [EnoughProjectives C] :
  HasExt.{w} C := by
    letI := HasDerivedCategory.standard C
    have := hasExt_of_hasDerivedCategory C
    rw [hasExt_iff_small_ext.{w}]
    intro X Y n
    induction n generalizing X Y with
    | zero =>
      rw [small_congr Ext.homEquiv‚ÇÄ]
      infer_instance
    | succ n hn =>
      let S := ShortComplex.mk _ _ (kernel.condition (Projective.œÄ X))
      have hS : S.ShortExact :=
        { exact := ShortComplex.exact_of_f_is_kernel _ (kernelIsKernel S.g) }
      have : Function.Surjective (Ext.precomp hS.extClass Y (add_comm 1 n)) := fun x‚ÇÉ ‚Ü¶
        Ext.contravariant_sequence_exact‚ÇÉ hS Y x‚ÇÉ
          (Ext.eq_zero_of_projective _) (by omega)
      exact small_of_surjective.{w} this

end CategoryTheory
