/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.DerivedCategory.Fractions
import Mathlib.Algebra.Homology.SingleHomology

/-! # The fully faithful embedding of the abelian category in its derived category

In this file, we show that for any `n : ‚Ñ§`, the functor
`singleFunctor C n : C ‚•§ DerivedCategory C` is fully faithful.

-/

universe w v u

open CategoryTheory

namespace DerivedCategory

variable (C : Type u) [Category.{v} C] [Abelian C] [HasDerivedCategory.{w} C]

/-- The canonical isomorphism
`DerivedCateogry.singleFunctor C n ‚ãô DerivedCateogry.homologyFunctor C n ‚âÖ ùü≠ C` -/
noncomputable def singleFunctorCompHomologyFunctorIso (n : ‚Ñ§) :
    singleFunctor C n ‚ãô homologyFunctor C n ‚âÖ ùü≠ C :=
  isoWhiskerRight ((SingleFunctors.evaluation _ _ n).mapIso
    (singleFunctorsPostcompQIso C)) _ ‚â™‚â´ Functor.associator _ _ _ ‚â™‚â´
    isoWhiskerLeft _ (homologyFunctorFactors C n) ‚â™‚â´
      (HomologicalComplex.homologyFunctorSingleIso _ _ _)

instance (n : ‚Ñ§) : (singleFunctor C n).Faithful where
  map_injective {_ _ f‚ÇÅ f‚ÇÇ} h := by
    have eq‚ÇÅ := NatIso.naturality_1 (singleFunctorCompHomologyFunctorIso C n) f‚ÇÅ
    have eq‚ÇÇ := NatIso.naturality_1 (singleFunctorCompHomologyFunctorIso C n) f‚ÇÇ
    dsimp at eq‚ÇÅ eq‚ÇÇ
    rw [‚Üê eq‚ÇÅ, ‚Üê eq‚ÇÇ, h]

instance (n : ‚Ñ§) : (singleFunctor C n).Full where
  map_surjective {A B} f := by
    change Q.obj ((CochainComplex.singleFunctor C n).obj A) ‚ü∂
      Q.obj ((CochainComplex.singleFunctor C n).obj B) at f
    suffices ‚àÉ f', f = Q.map f' by
      obtain ‚ü®f', rfl‚ü© := this
      obtain ‚ü®g, rfl‚ü© := (CochainComplex.singleFunctor C n).map_surjective f'
      exact ‚ü®g, rfl‚ü©
    obtain ‚ü®X, _, _, s, _, g, rfl‚ü© := right_fac_of_isStrictlyLE_of_isStrictlyGE n n f
    obtain ‚ü®A‚ÇÄ, ‚ü®e‚ü©‚ü© := X.exists_iso_single n
    have ‚ü®œÜ, hœÜ‚ü© := (CochainComplex.singleFunctor C n).map_surjective (e.inv ‚â´ s)
    have : IsIso ((singleFunctor C n).map œÜ) := by
      change IsIso (Q.map ((CochainComplex.singleFunctor C n).map œÜ))
      rw [hœÜ, Functor.map_comp]
      infer_instance
    have : IsIso œÜ := (NatIso.isIso_map_iff (singleFunctorCompHomologyFunctorIso C n) œÜ).1
        (by dsimp; infer_instance)
    have : IsIso (e.inv ‚â´ s) := by rw [‚Üê hœÜ]; infer_instance
    have : IsIso s := IsIso.of_isIso_comp_left e.inv s
    exact ‚ü®inv s ‚â´ g, by simp‚ü©

end DerivedCategory
