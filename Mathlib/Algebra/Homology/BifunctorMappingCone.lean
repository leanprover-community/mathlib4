/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.Bifunctor
import Mathlib.Algebra.Homology.HomotopyCategory.MappingCone

/-!
# Action of bifunctor on mapping cones
-/

open CategoryTheory Limits HomologicalComplex

variable {C‚ÇÅ C‚ÇÇ D : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category D] [Preadditive D]

namespace CochainComplex

section

variable
  [Preadditive C‚ÇÅ] [HasZeroMorphisms C‚ÇÇ]
  {K‚ÇÅ L‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§} (œÜ : K‚ÇÅ ‚ü∂ L‚ÇÅ) (K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§)
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ D) [F.Additive]
  [‚àÄ (X‚ÇÅ : C‚ÇÅ), (F.obj X‚ÇÅ).PreservesZeroMorphisms]
  [HasHomotopyCofiber œÜ]

open HomComplex mappingCone

namespace mapBifunctorMappingCone‚ÇÅIso

variable [HasMapBifunctor (mappingCone œÜ) K‚ÇÇ F (ComplexShape.up ‚Ñ§)]

section

variable [HasMapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]

noncomputable def Œπ‚ÇÅ : Cochain (mapBifunctor K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§))
    (mapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§)) (-1) :=
  Cochain.mk (fun n m hnm ‚Ü¶ mapBifunctorDesc (fun p q hpq ‚Ü¶
    (F.map ((inl œÜ).v p (p - 1) (by omega))).app _ ‚â´
      ŒπMapBifunctor _ _ _ _ _ _ _ (by dsimp at hpq ‚ä¢; omega)))

@[reassoc]
lemma Œπ_Œπ‚ÇÅ (p q n : ‚Ñ§) (hpq : p + q = n) (m : ‚Ñ§) (hnm : n + (-1) = m)
    (p' : ‚Ñ§) (hp' : p' + 1 = p) :
    ŒπMapBifunctor K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) p q n hpq ‚â´ (Œπ‚ÇÅ œÜ K‚ÇÇ F).v n m hnm =
      (F.map ((inl œÜ).v p p' (by omega))).app _ ‚â´
        ŒπMapBifunctor _ _ _ _ _ _ _ (by dsimp; omega) := by
  obtain rfl : p' = p - 1 := by omega
  simp [Œπ‚ÇÅ]

noncomputable def p‚ÇÅ‚ÇÄ : Cochain (mapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§))
    (mapBifunctor K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§)) 1 :=
  Cochain.mk (fun n m hnm ‚Ü¶ mapBifunctorDesc (fun p q hpq ‚Ü¶
    (F.map ((fst œÜ).1.v p _ rfl)).app _ ‚â´
      ŒπMapBifunctor _ _ _ _ _ _ _ (by dsimp at hpq ‚ä¢; omega)))

@[reassoc]
lemma Œπ_p‚ÇÅ‚ÇÄ_v (p q n : ‚Ñ§) (hpq : p + q = n) (m : ‚Ñ§) (hnm : n + 1 = m)
    (p' : ‚Ñ§) (hp' : p + 1 = p') :
   ŒπMapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) p q n hpq ‚â´
      (p‚ÇÅ‚ÇÄ œÜ K‚ÇÇ F).v n m hnm = (F.map ((fst œÜ).1.v p p' hp')).app _ ‚â´
        ŒπMapBifunctor _ _ _ _ _ _ _ (by dsimp; omega) := by
  subst hp'
  simp [p‚ÇÅ‚ÇÄ]

@[simp]
lemma Œπ‚ÇÅ_p‚ÇÅ‚ÇÄ : (Œπ‚ÇÅ œÜ K‚ÇÇ F).comp (p‚ÇÅ‚ÇÄ œÜ K‚ÇÇ F) (neg_add_cancel 1) = Cochain.ofHom (ùüô _) := by
  ext n p q hpq
  dsimp at hpq
  simp [Cochain.comp_v _ _ (neg_add_cancel 1) n (n - 1) n (by omega) (by omega),
    Œπ_Œπ‚ÇÅ_assoc _ _ _ p q n hpq (n - 1) (by omega) (p - 1) (by omega),
    Œπ_p‚ÇÅ‚ÇÄ_v _ _ _ (p - 1) q (n - 1) (by omega) n (by omega) p (by omega),
    ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
    ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app,]

@[simp]
lemma inr_p‚ÇÅ‚ÇÄ [HasMapBifunctor L‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)] :
    (Cochain.ofHom (mapBifunctorMap (inr œÜ) (ùüô K‚ÇÇ) F (.up ‚Ñ§))).comp
    (p‚ÇÅ‚ÇÄ œÜ K‚ÇÇ F) (zero_add 1) = 0 := by
  ext n _ rfl p q hpq
  dsimp at hpq
  simp [Œπ_p‚ÇÅ‚ÇÄ_v _ _ _ p q n hpq _ rfl _ rfl, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
      ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app]

@[simps!]
noncomputable def p‚ÇÅ : Cocycle (mapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§))
    (mapBifunctor K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§)) 1 :=
  Cocycle.mk (p‚ÇÅ‚ÇÄ œÜ K‚ÇÇ F) 2 (by omega) (by
    ext n _ rfl p q hpq
    dsimp at hpq
    have h‚ÇÅ : (ComplexShape.up ‚Ñ§).Rel (p + 1) (p + 2) := by dsimp; omega
    have h‚ÇÇ : (ComplexShape.up ‚Ñ§).Rel q (q + 1) := rfl
    have h‚ÇÉ : (ComplexShape.up ‚Ñ§).Rel p (p + 1) := rfl
    simp [Œ¥_v 1 2 rfl _ n (n + 2) rfl (n + 1) (n + 1) (by omega) rfl,
      Œπ_p‚ÇÅ‚ÇÄ_v_assoc _ _ _ p q n hpq (n + 1) rfl (p + 1) rfl,
      Œπ_p‚ÇÅ‚ÇÄ_v _ _ _ p (q + 1) (n + 1) (by omega) (n + 2) (by omega) (p + 1) rfl,
      Œπ_p‚ÇÅ‚ÇÄ_v _ _ _ (p + 1) q (n + 1) (by omega) (n + 2) (by omega) (p + 2) (by omega),
      mapBifunctor.d_eq, Int.negOnePow_even 2 ‚ü®1, rfl‚ü©,
      mapBifunctor.d‚ÇÅ_eq K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) h‚ÇÅ q (n + 2) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) (p + 1) h‚ÇÇ (n + 2) (by dsimp; omega),
      mapBifunctor.d‚ÇÅ_eq (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) h‚ÇÉ q (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) p h‚ÇÇ (n + 1) (by dsimp; omega),
      Int.negOnePow_succ, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
      ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app,
      d_fst_v œÜ p (p + 1) (p + 2) rfl (by omega)]
    abel)

end

section

variable [HasMapBifunctor L‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]

noncomputable def p‚ÇÇ : Cochain (mapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§))
    (mapBifunctor L‚ÇÅ K‚ÇÇ F (.up ‚Ñ§)) 0 :=
  Cochain.ofHoms (fun _ ‚Ü¶ mapBifunctorDesc (fun _ _ hpq ‚Ü¶
    (F.map ((snd œÜ).v _ _ (add_zero _))).app _ ‚â´
      ŒπMapBifunctor _ _ _ _ _ _ _ hpq))

@[reassoc (attr := simp)]
lemma Œπ_p‚ÇÇ_v (p q n : ‚Ñ§) (hpq : p + q = n) :
    ŒπMapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) p q n hpq ‚â´ (p‚ÇÇ œÜ K‚ÇÇ F).v n n (add_zero n) =
      (F.map ((snd œÜ).v _ _ (add_zero _))).app _ ‚â´
        ŒπMapBifunctor _ _ _ _ _ _ _ hpq := by
  simp [p‚ÇÇ]

@[simp]
lemma inr_p‚ÇÇ : (Cochain.ofHom (mapBifunctorMap (inr œÜ) (ùüô K‚ÇÇ) F (.up ‚Ñ§))).comp
    (p‚ÇÇ œÜ K‚ÇÇ F) (zero_add 0) = Cochain.ofHom (ùüô _) := by
  ext n p q hpq
  dsimp at hpq
  simp [‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
    ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app]

@[simp]
lemma Œπ‚ÇÅ_p‚ÇÇ [HasMapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)] :
    (Œπ‚ÇÅ œÜ K‚ÇÇ F).comp (p‚ÇÇ œÜ K‚ÇÇ F) (add_zero _) = 0 := by
  ext n m hnm p q hpq
  obtain rfl : m = n - 1 := by omega
  dsimp at hpq
  simp [Œπ_Œπ‚ÇÅ_assoc _ _ _ p q n hpq (n - 1) (by omega) (p - 1) (by omega),
    ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
    ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app]

end

variable [HasMapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasMapBifunctor L‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasHomotopyCofiber (mapBifunctorMap œÜ (ùüô K‚ÇÇ) F (.up ‚Ñ§))]

noncomputable def hom : mapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) ‚ü∂
      mappingCone (mapBifunctorMap œÜ (ùüô K‚ÇÇ) F (.up ‚Ñ§)) :=
  mappingCone.lift _ (p‚ÇÅ œÜ K‚ÇÇ F) (p‚ÇÇ œÜ K‚ÇÇ F) (by
    ext n _ rfl p q hpq
    dsimp at hpq
    have h‚ÇÅ : (ComplexShape.up ‚Ñ§).Rel q (q + 1) := rfl
    have h‚ÇÇ : (ComplexShape.up ‚Ñ§).Rel p (p + 1) := rfl
    simp [mapBifunctor.d_eq, Œπ_p‚ÇÅ‚ÇÄ_v_assoc _ _ _ p q n _ _ rfl _ rfl,
      mapBifunctor.d‚ÇÅ_eq (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) h‚ÇÇ q (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) p h‚ÇÅ (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÅ_eq L‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) h‚ÇÇ q (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq L‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) p h‚ÇÅ (n + 1) (by dsimp; omega),
      ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
      ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app, d_snd_v])

noncomputable def inv :
    mappingCone (mapBifunctorMap œÜ (ùüô K‚ÇÇ) F (.up ‚Ñ§)) ‚ü∂
      mapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) :=
  mappingCone.desc _ (Œπ‚ÇÅ œÜ K‚ÇÇ F) (mapBifunctorMap (inr œÜ) (ùüô K‚ÇÇ) F (.up ‚Ñ§)) (by
    ext n p q hpq
    dsimp at hpq
    have h‚ÇÅ : (ComplexShape.up ‚Ñ§).Rel p (p + 1) := rfl
    have h‚ÇÇ : (ComplexShape.up ‚Ñ§).Rel q (q + 1) := rfl
    have h‚ÇÉ : (ComplexShape.up ‚Ñ§).Rel (p - 1) p := by dsimp; omega
    rw [Œ¥_v (-1) 0 (neg_add_cancel 1) _ _ _ (add_zero n) (n - 1) (n + 1) rfl rfl]
    simp [Œπ_Œπ‚ÇÅ_assoc œÜ K‚ÇÇ F p q n hpq (n - 1) (by omega) (p - 1) (by omega),
      mapBifunctor.d_eq, mapBifunctor.d‚ÇÅ_eq K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) h‚ÇÅ q (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) p h‚ÇÇ (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÅ_eq (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) h‚ÇÉ q n (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) (p - 1) h‚ÇÇ n (by dsimp; omega),
      Œπ_Œπ‚ÇÅ _ _ _ (p + 1) q (n + 1) (by omega) n (by omega) p (by omega),
      Œπ_Œπ‚ÇÅ _ _ _ p (q + 1) (n + 1) (by omega) n (by omega) (p - 1) (by omega),
      Int.negOnePow_sub, inl_v_d œÜ p (p - 1) (p + 1) (by omega) (by omega),
      ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
      ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app]
    abel)

@[reassoc (attr := simp)]
lemma inr_inv : inr _ ‚â´ inv œÜ K‚ÇÇ F = mapBifunctorMap (inr œÜ) (ùüô K‚ÇÇ) F (.up ‚Ñ§) := by
  simp [inv]

@[simp]
lemma inl_inv : (inl _).comp (Cochain.ofHom (inv œÜ K‚ÇÇ F)) (add_zero _) = Œπ‚ÇÅ œÜ K‚ÇÇ F  := by
  simp [inv]

@[simp]
lemma hom_fst :
    (Cochain.ofHom (hom œÜ K‚ÇÇ F)).comp (fst _).1 (zero_add 1) =
      p‚ÇÅ‚ÇÄ œÜ K‚ÇÇ F := by
  simp [hom]

@[simp]
lemma hom_snd :
    (Cochain.ofHom (hom œÜ K‚ÇÇ F)).comp (snd _) (zero_add 0) = p‚ÇÇ œÜ K‚ÇÇ F := by
  simp [hom]

@[reassoc (attr := simp)]
lemma hom_inv_id : hom œÜ K‚ÇÇ F ‚â´ inv œÜ K‚ÇÇ F = ùüô _ := by
  ext n p q hpq
  dsimp [hom, inv] at hpq ‚ä¢
  simp only [lift_f _ _ _ _ _ _ rfl, p‚ÇÅ_coe, desc_f _ _ _ _ _ _ rfl,
    Preadditive.comp_add, Preadditive.add_comp, Category.assoc, inl_v_fst_v_assoc,
    inr_f_fst_v_assoc, zero_comp, comp_zero, add_zero, inl_v_snd_v_assoc, inr_f_snd_v_assoc,
    zero_add, Œπ_p‚ÇÅ‚ÇÄ_v_assoc _ _ _ p q n hpq _ rfl _ rfl,
    Œπ_Œπ‚ÇÅ _ _ _ (p + 1) q (n + 1) (by omega) n (by omega) p (by omega), Œπ_p‚ÇÇ_v_assoc,
    Œπ_mapBifunctorMap, id_f, CategoryTheory.Functor.map_id, Category.id_comp, Category.comp_id]
  simp only [‚Üê NatTrans.comp_app_assoc, ‚Üê Functor.map_comp, ‚Üê Preadditive.add_comp,
    ‚Üê NatTrans.app_add, ‚Üê Functor.map_add, mappingCone.id_X,
    CategoryTheory.Functor.map_id, NatTrans.id_app, Category.id_comp]

@[reassoc (attr := simp)]
lemma inv_hom_id : inv œÜ K‚ÇÇ F ‚â´ hom œÜ K‚ÇÇ F = ùüô _ := by
  apply (Cocycle.equivHom _ _).injective
  ext : 1
  rw [ext_cochain_from_iff _ (-1) 0 (neg_add_cancel 1),
    ext_cochain_to_iff _ 0 1 (zero_add 1),
    mappingCone.ext_cochain_to_iff _ (-1) 0 (neg_add_cancel 1)]
  dsimp
  simp only [Cochain.ofHom_comp, Cochain.comp_assoc_of_second_is_zero_cochain,
    Cochain.comp_assoc_of_first_is_zero_cochain, hom_fst, Cochain.comp_id, inl_fst, hom_snd,
    inl_snd, inr_fst, inr_snd]
  simp only [‚Üê Cochain.comp_assoc_of_second_is_zero_cochain, ‚Üê Cochain.ofHom_comp,
    inl_inv, inr_inv, inr_p‚ÇÅ‚ÇÄ, inr_p‚ÇÇ, Œπ‚ÇÅ_p‚ÇÅ‚ÇÄ, Œπ‚ÇÅ_p‚ÇÇ, and_self]

end mapBifunctorMappingCone‚ÇÅIso

variable [HasMapBifunctor (mappingCone œÜ) K‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasMapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasMapBifunctor L‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasHomotopyCofiber (mapBifunctorMap œÜ (ùüô K‚ÇÇ) F (.up ‚Ñ§))]

open mapBifunctorMappingCone‚ÇÅIso in
@[simps]
noncomputable def mapBifunctorMappingCone‚ÇÅIso :
    mapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) ‚âÖ
      mappingCone (mapBifunctorMap œÜ (ùüô K‚ÇÇ) F (.up ‚Ñ§)) where
  hom := hom œÜ K‚ÇÇ F
  inv := inv œÜ K‚ÇÇ F

@[reassoc (attr := simp)]
lemma mapBifunctorMap_inr_mapBifunctorMappingCone‚ÇÅIso_hom :
    mapBifunctorMap (mappingCone.inr œÜ) (ùüô K‚ÇÇ) F (.up ‚Ñ§) ‚â´
      mapBifunctorMappingCone‚ÇÅIso.hom œÜ K‚ÇÇ F =
    inr (mapBifunctorMap œÜ (ùüô K‚ÇÇ) F (.up ‚Ñ§)) := by
  apply (Cocycle.equivHom _ _).injective
  ext : 1
  simp [ext_cochain_to_iff _ 0 1 (zero_add 1)]

end

/- -/

section

variable
  [HasZeroMorphisms C‚ÇÅ] [Preadditive C‚ÇÇ]
  (K‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§) {K‚ÇÇ L‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§} (œÜ : K‚ÇÇ ‚ü∂ L‚ÇÇ)
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ D) [F.PreservesZeroMorphisms]
  [‚àÄ (X‚ÇÅ : C‚ÇÅ), (F.obj X‚ÇÅ).Additive]
  [HasHomotopyCofiber œÜ]

open HomComplex mappingCone

namespace mapBifunctorMappingCone‚ÇÇIso

variable [HasMapBifunctor K‚ÇÅ (mappingCone œÜ) F (ComplexShape.up ‚Ñ§)]

section

variable [HasMapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]

noncomputable def Œπ‚ÇÅ : Cochain (mapBifunctor K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§))
    (mapBifunctor K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§)) (-1) :=
  Cochain.mk (fun n m hnm ‚Ü¶ mapBifunctorDesc (fun p q hpq ‚Ü¶
    p.negOnePow ‚Ä¢ (F.obj (K‚ÇÅ.X p)).map ((inl œÜ).v q (q - 1) (by omega)) ‚â´
      ŒπMapBifunctor _ _ _ _ _ _ _ (by dsimp at hpq ‚ä¢; omega)))

@[reassoc]
lemma Œπ_Œπ‚ÇÅ (p q n : ‚Ñ§) (hpq : p + q = n) (m : ‚Ñ§) (hnm : n + (-1) = m)
    (q' : ‚Ñ§) (hq' : q' + 1 = q) :
    ŒπMapBifunctor K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) p q n hpq ‚â´ (Œπ‚ÇÅ K‚ÇÅ œÜ F).v n m hnm =
      p.negOnePow ‚Ä¢ (F.obj (K‚ÇÅ.X p)).map ((inl œÜ).v q q' (by omega)) ‚â´
        ŒπMapBifunctor _ _ _ _ _ _ _ (by dsimp; omega) := by
  obtain rfl : q' = q - 1 := by omega
  simp [Œπ‚ÇÅ]

noncomputable def p‚ÇÅ‚ÇÄ : Cochain (mapBifunctor K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§))
    (mapBifunctor K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§)) 1 :=
  Cochain.mk (fun n m hnm ‚Ü¶ mapBifunctorDesc (fun p q hpq ‚Ü¶
    p.negOnePow ‚Ä¢ (F.obj (K‚ÇÅ.X p)).map ((fst œÜ).1.v q _ rfl) ‚â´
      ŒπMapBifunctor _ _ _ _ _ _ _ (by dsimp at hpq ‚ä¢; omega)))

@[reassoc]
lemma Œπ_p‚ÇÅ‚ÇÄ_v (p q n : ‚Ñ§) (hpq : p + q = n) (m : ‚Ñ§) (hnm : n + 1 = m)
    (q' : ‚Ñ§) (hq' : q + 1 = q') :
   ŒπMapBifunctor K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§) p q n hpq ‚â´
      (p‚ÇÅ‚ÇÄ K‚ÇÅ œÜ F).v n m hnm = p.negOnePow ‚Ä¢ (F.obj (K‚ÇÅ.X p)).map ((fst œÜ).1.v q q' hq') ‚â´
        ŒπMapBifunctor _ _ _ _ _ _ _ (by dsimp; omega) := by
  subst hq'
  simp [p‚ÇÅ‚ÇÄ]

@[simp]
lemma Œπ‚ÇÅ_p‚ÇÅ‚ÇÄ : (Œπ‚ÇÅ K‚ÇÅ œÜ F).comp (p‚ÇÅ‚ÇÄ K‚ÇÅ œÜ F) (neg_add_cancel 1) = Cochain.ofHom (ùüô _) := by
  ext n p q hpq
  dsimp at hpq
  simp [Cochain.comp_v _ _ (neg_add_cancel 1) n (n - 1) n (by omega) (by omega),
    Œπ_Œπ‚ÇÅ_assoc _ _ _ p q n hpq (n - 1) (by omega) (q - 1) (by omega),
    Œπ_p‚ÇÅ‚ÇÄ_v _ _ _ p (q - 1) (n - 1) (by omega) n (by omega) q (by omega),
    ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
    ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app, smul_smul]

@[simp]
lemma inr_p‚ÇÅ‚ÇÄ [HasMapBifunctor K‚ÇÅ L‚ÇÇ F (ComplexShape.up ‚Ñ§)] :
    (Cochain.ofHom (mapBifunctorMap (ùüô K‚ÇÅ) (inr œÜ) F (.up ‚Ñ§))).comp
    (p‚ÇÅ‚ÇÄ K‚ÇÅ œÜ F) (zero_add 1) = 0 := by
  ext n _ rfl p q hpq
  dsimp at hpq
  simp [Œπ_p‚ÇÅ‚ÇÄ_v _ _ _ p q n hpq _ rfl _ rfl, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
      ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app]

@[simps!]
noncomputable def p‚ÇÅ : Cocycle (mapBifunctor K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§))
    (mapBifunctor K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§)) 1 :=
  Cocycle.mk (p‚ÇÅ‚ÇÄ K‚ÇÅ œÜ F) 2 (by omega) (by
    ext n _ rfl p q hpq
    dsimp at hpq
    have h‚ÇÅ : (ComplexShape.up ‚Ñ§).Rel (q + 1) (q + 2) := by dsimp; omega
    have h‚ÇÇ : (ComplexShape.up ‚Ñ§).Rel p (p + 1) := rfl
    have h‚ÇÉ : (ComplexShape.up ‚Ñ§).Rel q (q + 1) := rfl
    simp [Œ¥_v 1 2 rfl _ n (n + 2) rfl (n + 1) (n + 1) (by omega) rfl,
      Œπ_p‚ÇÅ‚ÇÄ_v_assoc _ _ _ p q n hpq (n + 1) rfl (q + 1) rfl,
      Œπ_p‚ÇÅ‚ÇÄ_v _ _ _ p (q + 1) (n + 1) (by omega) (n + 2) (by omega) (q + 2) (by omega),
      Œπ_p‚ÇÅ‚ÇÄ_v _ _ _ (p + 1) q (n + 1) (by omega) (n + 2) (by omega) (q + 1) (by omega),
      mapBifunctor.d_eq, Int.negOnePow_even 2 ‚ü®1, rfl‚ü©,
      mapBifunctor.d‚ÇÅ_eq K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) h‚ÇÇ (q + 1) (n + 2) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) p h‚ÇÅ (n + 2) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§) p h‚ÇÉ (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÅ_eq K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§) h‚ÇÇ q (n + 1) (by dsimp; omega),
      ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
      d_fst_v œÜ q (q + 1) (q + 2) rfl (by omega), smul_smul,
      Int.negOnePow_succ]
    abel)

end

section

variable [HasMapBifunctor K‚ÇÅ L‚ÇÇ F (ComplexShape.up ‚Ñ§)]

noncomputable def p‚ÇÇ : Cochain (mapBifunctor K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§))
    (mapBifunctor K‚ÇÅ L‚ÇÇ F (.up ‚Ñ§)) 0 :=
  Cochain.ofHoms (fun _ ‚Ü¶ mapBifunctorDesc (fun _ _ hpq ‚Ü¶
    (F.obj (K‚ÇÅ.X _)).map ((snd œÜ).v _ _ (add_zero _)) ‚â´
      ŒπMapBifunctor _ _ _ _ _ _ _ hpq))

@[reassoc (attr := simp)]
lemma Œπ_p‚ÇÇ_v (p q n : ‚Ñ§) (hpq : p + q = n) :
    ŒπMapBifunctor K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§) p q n hpq ‚â´ (p‚ÇÇ K‚ÇÅ œÜ F).v n n (add_zero n) =
    (F.obj (K‚ÇÅ.X _)).map ((snd œÜ).v _ _ (add_zero _)) ‚â´
      ŒπMapBifunctor _ _ _ _ _ _ _ hpq := by
  simp [p‚ÇÇ]

@[simp]
lemma inr_p‚ÇÇ : (Cochain.ofHom (mapBifunctorMap (ùüô K‚ÇÅ) (inr œÜ) F (.up ‚Ñ§))).comp
    (p‚ÇÇ K‚ÇÅ œÜ F) (zero_add 0) = Cochain.ofHom (ùüô _) := by
  ext n p q hpq
  dsimp at hpq
  simp [‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
    ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app]

@[simp]
lemma Œπ‚ÇÅ_p‚ÇÇ [HasMapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)] :
    (Œπ‚ÇÅ K‚ÇÅ œÜ F).comp (p‚ÇÇ K‚ÇÅ œÜ F) (add_zero _) = 0 := by
  ext n m hnm p q hpq
  obtain rfl : m = n - 1 := by omega
  dsimp at hpq
  simp [Œπ_Œπ‚ÇÅ_assoc _ _ _ p q n hpq (n - 1) (by omega) (q - 1) (by omega),
    ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
    ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app]

end

variable [HasMapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasMapBifunctor K‚ÇÅ L‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasHomotopyCofiber (mapBifunctorMap (ùüô K‚ÇÅ) œÜ F (.up ‚Ñ§))]

noncomputable def hom : mapBifunctor K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§) ‚ü∂
      mappingCone (mapBifunctorMap (ùüô K‚ÇÅ) œÜ F (.up ‚Ñ§)) :=
  mappingCone.lift _ (p‚ÇÅ K‚ÇÅ œÜ F) (p‚ÇÇ K‚ÇÅ œÜ F) (by
    ext n _ rfl p q hpq
    dsimp at hpq
    have h‚ÇÅ : (ComplexShape.up ‚Ñ§).Rel p (p + 1) := rfl
    have h‚ÇÇ : (ComplexShape.up ‚Ñ§).Rel q (q + 1) := rfl
    simp [mapBifunctor.d_eq, Œπ_p‚ÇÅ‚ÇÄ_v_assoc _ _ _ p q n _ _ rfl _ rfl,
      mapBifunctor.d‚ÇÇ_eq K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§) p h‚ÇÇ (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÅ_eq K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§) h‚ÇÅ q (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq K‚ÇÅ L‚ÇÇ F (.up ‚Ñ§) p h‚ÇÇ (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÅ_eq K‚ÇÅ L‚ÇÇ F (.up ‚Ñ§) h‚ÇÅ q (n + 1) (by dsimp; omega),
      ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc, d_snd_v])

noncomputable def inv :
    mappingCone (mapBifunctorMap (ùüô K‚ÇÅ) œÜ F (.up ‚Ñ§)) ‚ü∂
      mapBifunctor K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§) :=
  mappingCone.desc _ (Œπ‚ÇÅ K‚ÇÅ œÜ F) (mapBifunctorMap (ùüô K‚ÇÅ) (inr œÜ) F (.up ‚Ñ§)) (by
    ext n p q hpq
    dsimp at hpq
    have h‚ÇÅ : (ComplexShape.up ‚Ñ§).Rel q (q + 1) := rfl
    have h‚ÇÇ : (ComplexShape.up ‚Ñ§).Rel p (p + 1) := rfl
    have h‚ÇÉ : (ComplexShape.up ‚Ñ§).Rel (q - 1) q := by dsimp; omega
    rw [Œ¥_v (-1) 0 (neg_add_cancel 1) _ _ _ (add_zero n) (n - 1) (n + 1) rfl rfl]
    simp [Œπ_Œπ‚ÇÅ_assoc K‚ÇÅ œÜ F p q n hpq (n - 1) (by omega) (q - 1) (by omega),
      Œπ_Œπ‚ÇÅ _ _ _ p (q + 1) (n + 1) (by omega) n (by omega) q (by omega),
      Œπ_Œπ‚ÇÅ _ _ _ (p + 1) q (n + 1) (by omega) n (by omega) (q - 1) (by omega),
      mapBifunctor.d_eq,
      mapBifunctor.d‚ÇÇ_eq K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) p h‚ÇÅ (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÅ_eq K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) h‚ÇÇ q (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§) p h‚ÇÉ n (by dsimp; omega),
      mapBifunctor.d‚ÇÅ_eq K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§) h‚ÇÇ (q - 1) n (by dsimp; omega),
      inl_v_d œÜ q (q - 1) (q + 1) (by omega) (by omega),
      smul_smul, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
      Int.negOnePow_succ]
    abel)

@[reassoc (attr := simp)]
lemma inr_inv : inr _ ‚â´ inv K‚ÇÅ œÜ F = mapBifunctorMap (ùüô K‚ÇÅ) (inr œÜ) F (.up ‚Ñ§) := by
  simp [inv]

@[simp]
lemma inl_inv : (inl _).comp (Cochain.ofHom (inv K‚ÇÅ œÜ F)) (add_zero _) = Œπ‚ÇÅ K‚ÇÅ œÜ F  := by
  simp [inv]

@[simp]
lemma hom_fst :
    (Cochain.ofHom (hom K‚ÇÅ œÜ F)).comp (fst _).1 (zero_add 1) =
      p‚ÇÅ‚ÇÄ K‚ÇÅ œÜ F := by
  simp [hom]

@[simp]
lemma hom_snd :
    (Cochain.ofHom (hom K‚ÇÅ œÜ F)).comp (snd _) (zero_add 0) = p‚ÇÇ K‚ÇÅ œÜ F := by
  simp [hom]

@[reassoc (attr := simp)]
lemma hom_inv_id : hom K‚ÇÅ œÜ F ‚â´ inv K‚ÇÅ œÜ F = ùüô _ := by
  ext n p q hpq
  dsimp [hom, inv] at hpq ‚ä¢
  simp only [lift_f _ _ _ _ _ _ rfl, p‚ÇÅ_coe, Preadditive.add_comp, Category.assoc,
    inl_v_desc_f, inr_f_desc_f, Preadditive.comp_add, Œπ_p‚ÇÅ‚ÇÄ_v_assoc _ _ _ p q n hpq _ rfl _ rfl,
    Linear.units_smul_comp, Œπ_Œπ‚ÇÅ _ _ _ p (q + 1) (n + 1) (by omega) n (by omega) q (by omega),
    Linear.comp_units_smul, smul_smul, Int.units_mul_self, one_smul, Œπ_p‚ÇÇ_v_assoc,
    Œπ_mapBifunctorMap, id_f, CategoryTheory.Functor.map_id, NatTrans.id_app, Category.id_comp,
    Category.comp_id]
  simp only [‚Üê Functor.map_comp_assoc, ‚Üê Preadditive.add_comp, ‚Üê Functor.map_add,
    mappingCone.id_X, CategoryTheory.Functor.map_id, Category.id_comp]

@[reassoc (attr := simp)]
lemma inv_hom_id : inv K‚ÇÅ œÜ F ‚â´ hom K‚ÇÅ œÜ F = ùüô _ := by
  apply (Cocycle.equivHom _ _).injective
  ext : 1
  rw [ext_cochain_from_iff _ (-1) 0 (neg_add_cancel 1),
    ext_cochain_to_iff _ 0 1 (zero_add 1),
    mappingCone.ext_cochain_to_iff _ (-1) 0 (neg_add_cancel 1)]
  dsimp
  simp only [Cochain.ofHom_comp, Cochain.comp_assoc_of_second_is_zero_cochain,
    hom_fst, Cochain.comp_id, inl_fst, hom_snd, inl_snd, inr_fst, inr_snd]
  simp only [‚Üê Cochain.comp_assoc_of_second_is_zero_cochain, ‚Üê Cochain.ofHom_comp,
    inl_inv, inr_inv, inr_p‚ÇÅ‚ÇÄ, inr_p‚ÇÇ, Œπ‚ÇÅ_p‚ÇÅ‚ÇÄ, Œπ‚ÇÅ_p‚ÇÇ, and_self]

end mapBifunctorMappingCone‚ÇÇIso

variable [HasMapBifunctor K‚ÇÅ (mappingCone œÜ) F (ComplexShape.up ‚Ñ§)]
  [HasMapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasMapBifunctor K‚ÇÅ L‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasHomotopyCofiber (mapBifunctorMap (ùüô K‚ÇÅ) œÜ F (.up ‚Ñ§))]

open mapBifunctorMappingCone‚ÇÇIso in
@[simps]
noncomputable def mapBifunctorMappingCone‚ÇÇIso :
    mapBifunctor K‚ÇÅ (mappingCone œÜ) F (.up ‚Ñ§) ‚âÖ
      mappingCone (mapBifunctorMap (ùüô K‚ÇÅ) œÜ F (.up ‚Ñ§)) where
  hom := hom K‚ÇÅ œÜ F
  inv := inv K‚ÇÅ œÜ F

@[reassoc (attr := simp)]
lemma mapBifunctorMap_inr_mapBifunctorMappingCone‚ÇÇIso_hom :
    mapBifunctorMap (ùüô K‚ÇÅ) (mappingCone.inr œÜ) F (.up ‚Ñ§) ‚â´
      mapBifunctorMappingCone‚ÇÇIso.hom K‚ÇÅ œÜ F =
    inr (mapBifunctorMap (ùüô K‚ÇÅ) œÜ F (.up ‚Ñ§)) := by
  apply (Cocycle.equivHom _ _).injective
  ext : 1
  simp [ext_cochain_to_iff _ 0 1 (zero_add 1)]

end

end CochainComplex
