/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.SpectralSequence.Convergence
import Mathlib.Algebra.Homology.ConnectShortExact
import Mathlib.Tactic.FinCases

/-!
# The low degree exact sequence of a spectral sequence

-/

namespace HomologicalComplex

open CategoryTheory Limits

variable {C Œπ : Type*} [Category C] [HasZeroMorphisms C] {c : ComplexShape Œπ}
  (K : HomologicalComplex C c)

lemma shape_from (i j : Œπ) (hj : ‚àÄ (k : Œπ), ¬¨ c.Rel k j) :
    K.d i j = 0 :=
  K.shape i j (hj i)

lemma shape_to (i j : Œπ) (hi : ‚àÄ (k : Œπ), ¬¨ c.Rel i k) :
    K.d i j = 0 :=
  K.shape i j (hi j)

end HomologicalComplex

namespace CategoryTheory

open Category Limits ZeroObject

variable {C : Type*} [Category C] [Abelian C]

namespace CohomologicalSpectralSequenceNat

open SpectralSequence

@[simps]
def stripes : ConvergenceStripes (‚Ñï √ó ‚Ñï) (fun (n : ‚Ñï) => Fin (n + 1)) where
  stripe pq := pq.1 + pq.2
  pred n := fun i => match i with
    | 0 => ‚ä•
    | ‚ü®j + 1, hj‚ü© => WithBot.some ‚ü®j, by omega‚ü©
  pred_lt n i := by
    obtain ‚ü®_ | _, _‚ü© := i
    ¬∑ apply WithBot.bot_lt_coe
    ¬∑ simp
  position n i := ‚ü®n - i.1, i.1‚ü©
  stripe_position := by
    rintro n ‚ü®i, hi‚ü©
    exact Nat.sub_add_cancel (by omega)
  discrete := by
    rintro n ‚ü®_ | i, hi‚ü© ‚ü®j, hj‚ü© h
    ¬∑ simp
    ¬∑ simp only [WithBot.coe_lt_coe, Fin.mk_lt_mk] at h
      simp only [Fin.mk_le_mk]
      omega
  finite_segment n i j := by
    rw [Set.finite_def]
    refine ‚ü®Fintype.ofInjective (fun x => (x : Fin (n + 1))) ?_‚ü©
    intro x y h
    ext1
    simpa using h

lemma stripes.position_eq_iff (n : ‚Ñï) (i : Fin (n + 1))
      (pq : ‚Ñï √ó ‚Ñï) (hpq : pq.1 + pq.2 = n) (hpq' : pq.2 = i) :
    stripes.position n i = pq := by
  ext
  ¬∑ simp [‚Üê hpq, ‚Üê hpq']
  ¬∑ exact hpq'.symm

variable {r‚ÇÄ : ‚Ñ§} (E : CohomologicalSpectralSequenceNat C r‚ÇÄ) [E.HasPage 2]
  {X : ‚Ñï ‚Üí C} (hE : E.StronglyConvergesTo stripes X)

namespace LowDegreesExactSequence

def d‚ÇÇ := (E.page 2).d ‚ü®0, 1‚ü© ‚ü®2, 0‚ü©

variable {E}

instance : (hE 0).CollapsesAt 0 where
  condition := by
    intro k hk
    fin_cases k
    simp at hk

noncomputable def iso‚ÇÄ : X 0 ‚âÖ (E.page 2).X ‚ü®0, 0‚ü© :=
  (hE 0).isoOfCollapsesAt 0 ‚ü®0, 0‚ü© rfl ‚â™‚â´ E.pageInfinityIso ‚ü®0,0‚ü© 2

instance : IsIso ((hE 1).filtrationŒπ (WithBot.some 1)) :=
  (hE _).isIso_filtrationŒπ_of_isZero _ (by
    rintro ‚ü®j, hj‚ü© hj'
    exfalso
    simp only [WithBot.coe_lt_coe] at hj'
    change 1 < j at hj'
    omega)

instance : IsIso ((hE 1).œÄ 0 (1, 0) rfl) := by
  apply (hE 1).isIso_œÄ_of_isZero
  aesop

instance : IsIso ((hE 2).œÄ 0 (2, 0) rfl) := by
  apply (hE 2).isIso_œÄ_of_isZero
  aesop

instance : IsIso ((hE 1).filtrationŒπ 1) := by
  apply (hE 1).isIso_filtrationŒπ_of_isZero
  intro j hj
  fin_cases j
  ¬∑ replace hj := WithBot.coe_lt_coe.1 hj
    simp at hj
  ¬∑ aesop

instance : (hE 1).CollapsesAsSESAt 0 1 :=
  (hE 1).collapsesAsSESAt_of_succ 0 1 rfl ‚ü®1, 0‚ü© rfl inferInstance inferInstance

noncomputable def ŒπE‚ÇÇOneZero : (E.page 2).X ‚ü®1, 0‚ü© ‚ü∂ X 1 :=
  (E.pageInfinityIso ‚ü®1, 0‚ü© 2).inv ‚â´ (hE 1).pageInfinityŒπ 0 ‚ü®1, 0‚ü© rfl inferInstance

instance : Mono (ŒπE‚ÇÇOneZero hE) := by
  dsimp [ŒπE‚ÇÇOneZero]
  infer_instance

noncomputable def œÄE‚ÇÉZeroOne : X 1 ‚ü∂ (E.page 3).X ‚ü®0, 1‚ü© :=
  (hE 1).pageInfinityœÄ 1 ‚ü®0, 1‚ü© rfl inferInstance ‚â´ (E.pageInfinityIso ‚ü®0, 1‚ü© 3).hom

instance : Epi (œÄE‚ÇÉZeroOne hE) := by
  dsimp [œÄE‚ÇÉZeroOne]
  apply epi_comp

lemma ŒπE‚ÇÇOneZero_œÄE‚ÇÉZeroOne : ŒπE‚ÇÇOneZero hE ‚â´ œÄE‚ÇÉZeroOne hE = 0 := by
  dsimp [ŒπE‚ÇÇOneZero, œÄE‚ÇÉZeroOne]
  simp
  rw [(hE 1).pageInfinityŒπ_œÄ_eq_zero_assoc 0 1 (by apply @zero_lt_one ‚Ñï), zero_comp]

lemma ŒπE‚ÇÇOneZero_œÄE‚ÇÉZeroOne_exact :
    (ShortComplex.mk _ _ (ŒπE‚ÇÇOneZero_œÄE‚ÇÉZeroOne hE)).Exact := by
  refine ShortComplex.exact_of_iso ?_
    (((hE 1).shortExact_of_collapses 0 1 ‚ü®1, 0‚ü© ‚ü®0, 1‚ü© rfl rfl).exact)
  refine ShortComplex.isoMk (E.pageInfinityIso ‚ü®1, 0‚ü© 2) (Iso.refl _)
    (E.pageInfinityIso ‚ü®0, 1‚ü© 3) ?_ ?_
  ¬∑ simp [ŒπE‚ÇÇOneZero]
  ¬∑ simp [œÄE‚ÇÉZeroOne]

noncomputable def toE‚ÇÇZeroOne :
    X 1 ‚ü∂ (E.page 2).X ‚ü®0, 1‚ü© :=
  (hE 1).pageInfinityœÄ 1 ‚ü®0, 1‚ü© rfl inferInstance ‚â´ E.edgeMono ‚ü®0, 1‚ü© 2

@[reassoc (attr := simp)]
lemma œÄE‚ÇÉZeroOne_edgeMonoStep :
    œÄE‚ÇÉZeroOne hE ‚â´ edgeMonoStep (0, 1) 2 3 rfl = toE‚ÇÇZeroOne hE := by
  simp [œÄE‚ÇÉZeroOne, toE‚ÇÇZeroOne]

noncomputable def ŒπE‚ÇÉTwoZero : (E.page 3).X ‚ü®2, 0‚ü© ‚ü∂ X 2 :=
  (E.pageInfinityIso ‚ü®2, 0‚ü© 3).inv ‚â´ (hE 2).pageInfinityŒπ 0 ‚ü®2, 0‚ü© rfl inferInstance

instance : Mono (ŒπE‚ÇÉTwoZero hE) := by
  dsimp [ŒπE‚ÇÉTwoZero]
  infer_instance

noncomputable def fromE‚ÇÇTwoZero : (E.page 2).X ‚ü®2, 0‚ü© ‚ü∂ X 2 :=
  E.edgeEpi ‚ü®2, 0‚ü© 2 ‚â´ (hE 2).pageInfinityŒπ 0 ‚ü®2, 0‚ü© rfl inferInstance

@[reassoc (attr := simp)]
lemma edgeEpiStep_ŒπE‚ÇÉTwoZero :
    E.edgeEpiStep ‚ü®2, 0‚ü© 2 3 rfl ‚â´ ŒπE‚ÇÉTwoZero hE = fromE‚ÇÇTwoZero hE := by
  simp [fromE‚ÇÇTwoZero, ŒπE‚ÇÉTwoZero]

@[reassoc (attr := simp)]
lemma d‚ÇÇ_fromE‚ÇÇTwoZero :
    (E.page 2).d ‚ü®0, 1‚ü© ‚ü®2, 0‚ü© ‚â´ fromE‚ÇÇTwoZero hE = 0 := by
  rw [‚Üê edgeEpiStep_ŒπE‚ÇÉTwoZero, E.d_comp_edgeEpiStep_assoc, zero_comp]

variable (E)

@[simp]
noncomputable def d‚ÇÇSequence : ComposableArrows C 3 :=
  ComposableArrows.mk‚ÇÉ (E.edgeMonoStep ‚ü®0, 1‚ü© 2 3 rfl) ((E.page 2).d ‚ü®0, 1‚ü© ‚ü®2, 0‚ü©)
    (E.edgeEpiStep ‚ü®2, 0‚ü© 2 3 rfl)

instance : Mono ((d‚ÇÇSequence E).map' 0 1) := by
  dsimp
  infer_instance

instance : Epi ((d‚ÇÇSequence E).map' 2 3) := by
  dsimp [ComposableArrows.Precomp.map]
  infer_instance

attribute [local simp] ComposableArrows.Precomp.map
lemma d‚ÇÇSequence_exact : (d‚ÇÇSequence E).Exact := by
  apply ComposableArrows.exact_of_Œ¥‚ÇÄ
  ¬∑ apply ComposableArrows.exact‚ÇÇ_mk _ (by simp [ComposableArrows.Precomp.map])
    let S := ShortComplex.mk _ _ ((E.page 2).iCycles_d ‚ü®0, 1‚ü© ‚ü®2, 0‚ü©)
    have hS : S.Exact := by
      apply ShortComplex.exact_of_f_is_kernel
      exact (E.page 2).cyclesIsKernel ‚ü®0, 1‚ü© ‚ü®2, 0‚ü©
        (ComplexShape.next_eq' _ (by simp))
    refine ShortComplex.exact_of_iso ?_ hS
    exact ShortComplex.isoMk ((E.page 2).isoHomologyœÄ _ ‚ü®0, 1‚ü© rfl (by
        apply (E.page 2).shape_from
        rintro ‚ü®p, q‚ü© hpq
        simp only [ComplexShape.spectralSequenceNat_rel_iff, Nat.cast_zero, Nat.cast_one] at hpq
        omega) ‚â™‚â´ (E.iso 2 3 rfl) ‚ü®0, 1‚ü©) (Iso.refl _) (Iso.refl _) (by aesop_cat)
          (by aesop_cat)
  ¬∑ apply ComposableArrows.exact‚ÇÇ_mk _ (by simp [ComposableArrows.Precomp.map])
    let S := ShortComplex.mk _ _ ((E.page 2).d_pOpcycles ‚ü®0, 1‚ü© ‚ü®2, 0‚ü©)
    have hS : S.Exact := by
      apply ShortComplex.exact_of_g_is_cokernel
      exact (E.page 2).opcyclesIsCokernel ‚ü®0, 1‚ü© ‚ü®2, 0‚ü©
        (ComplexShape.prev_eq' _ (by simp))
    refine ShortComplex.exact_of_iso (Iso.symm ?_) hS
    exact ShortComplex.isoMk (Iso.refl _) (Iso.refl _)
      (((E.iso 2 3 rfl) ‚ü®2, 0‚ü©).symm ‚â™‚â´ (E.page 2).isoHomologyŒπ ‚ü®2, 0‚ü© _ rfl (by
        apply (E.page 2).shape_to
        rintro ‚ü®p, q‚ü© hpq
        simp only [ComplexShape.spectralSequenceNat_rel_iff, Nat.cast_ofNat,
          Nat.cast_zero, zero_add] at hpq
        omega)) (by aesop_cat) (by aesop_cat)

end LowDegreesExactSequence

variable {E}

open LowDegreesExactSequence in
@[simp]
noncomputable def lowDegreesComposableArrows : ComposableArrows C 4 :=
  ComposableArrows.mk‚ÇÑ (ŒπE‚ÇÇOneZero hE) (toE‚ÇÇZeroOne hE)
    ((E.page 2).d ‚ü®0, 1‚ü© ‚ü®2, 0‚ü©) (fromE‚ÇÇTwoZero hE)

instance : Mono ((lowDegreesComposableArrows hE).map' 0 1) := by
  dsimp
  infer_instance

open LowDegreesExactSequence in
/-- The exact sequence `0 ‚Üí E‚ÇÇ¬π‚Å∞ ‚Üí X¬π ‚Üí E‚ÇÇ‚Å∞¬π ‚Üí E‚ÇÇ¬≤‚Å∞ ‚Üí X¬≤` -/
lemma lowDegreesComposableArrows_exact :
    (lowDegreesComposableArrows hE).Exact := by
  apply ComposableArrows.exact_of_Œ¥last
  ¬∑ refine ComposableArrows.exact_of_iso ?_
      (ShortComplex.connect_exact _ _ (ŒπE‚ÇÇOneZero_œÄE‚ÇÉZeroOne_exact hE)
        ((d‚ÇÇSequence_exact E).exact 0) (Iso.refl _) (toE‚ÇÇZeroOne hE) (by simp)
        (by infer_instance) (by infer_instance))
    exact ComposableArrows.isoMk‚ÇÉ (Iso.refl _) (Iso.refl _) (Iso.refl _) (Iso.refl _)
      (by simp) (by simp; rfl) (by simp; rfl)
  ¬∑ refine ComposableArrows.exact‚ÇÇ_mk _ (by simp [ComposableArrows.Precomp.map]) ?_
    let œÜ : ShortComplex.mk _ _ ((d‚ÇÇSequence_exact E).toIsComplex.zero 1) ‚ü∂
        ShortComplex.mk _ _ (d‚ÇÇ_fromE‚ÇÇTwoZero hE) :=
      { œÑ‚ÇÅ := ùüô _
        œÑ‚ÇÇ := ùüô _
        œÑ‚ÇÉ := ŒπE‚ÇÉTwoZero hE
        comm‚ÇÇ‚ÇÉ := by simp [ComposableArrows.Precomp.map] }
    exact (ShortComplex.exact_iff_of_epi_of_isIso_of_mono œÜ).1 ((d‚ÇÇSequence_exact E).exact 1)

end CohomologicalSpectralSequenceNat

end CategoryTheory
