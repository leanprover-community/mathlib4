/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.SpectralObject.Basic
import Mathlib.CategoryTheory.Abelian.Refinements

/-!
# Differentials of a spectral object

-/

namespace CategoryTheory

variable {C Œπ : Type*} [Category C] [Category Œπ] [Abelian C]

open Category ComposableArrows Limits Preadditive

namespace Abelian

namespace SpectralObject

variable (X : SpectralObject C Œπ)

section

variable (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ)
  {i j k l : Œπ} (f‚ÇÅ : i ‚ü∂ j) (f‚ÇÇ : j ‚ü∂ k) (f‚ÇÉ : k ‚ü∂ l)
  (f‚ÇÅ‚ÇÇ : i ‚ü∂ k) (h‚ÇÅ‚ÇÇ : f‚ÇÅ ‚â´ f‚ÇÇ = f‚ÇÅ‚ÇÇ) (f‚ÇÇ‚ÇÉ : j ‚ü∂ l) (h‚ÇÇ‚ÇÉ : f‚ÇÇ ‚â´ f‚ÇÉ = f‚ÇÇ‚ÇÉ)

noncomputable def Œ® : X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ :=
  X.descCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ _ rfl
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ (f‚ÇÇ ‚â´ f‚ÇÉ) ‚â´ X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ) (by
      rw [X.Œ¥_naturality_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ (f‚ÇÇ ‚â´ f‚ÇÉ) (ùüô _) (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÇ f‚ÇÉ _ rfl) rfl,
        Functor.map_id, id_comp, Œ¥_pOpcycles])

@[reassoc (attr := simp)]
lemma toCycles_Œ® :
    X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ ‚â´ X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ =
      X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ‚ÇÉ ‚â´ X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ := by
  subst h‚ÇÇ‚ÇÉ
  simp only [Œ®, toCycles_descCycles]

@[reassoc (attr := simp)]
lemma Œ®_fromOpcycles :
    X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ =
      X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ := by
  rw [‚Üê cancel_epi (X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ _ rfl),
    toCycles_Œ®_assoc, p_fromOpcycles, toCycles_i_assoc]
  exact (X.Œ¥_naturality _ _ _ _ _ _ _ _ _ rfl).symm

include h‚ÇÇ‚ÇÉ in
lemma cyclesMap_Œ® :
    X.cyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ _ _ _ (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) ‚â´
      X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ = 0 := by
  rw [‚Üê cancel_epi (X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ)
    (by rw [reassoc_of% h‚ÇÅ‚ÇÇ])), comp_zero,
    X.toCycles_cyclesMap_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ f‚ÇÇ f‚ÇÉ (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ)
    (by rw [reassoc_of% h‚ÇÅ‚ÇÇ]) f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ)
    (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ‚ÇÉ (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ) (by rw [h‚ÇÇ‚ÇÉ])) rfl rfl,
    toCycles_Œ®, zero‚ÇÉ_assoc, zero_comp]

include h‚ÇÅ‚ÇÇ in
lemma Œ®_opcyclesMap :
    X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´
      X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ _ _ _ (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) = 0 := by
  rw [‚Üê cancel_mono (X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ‚ÇÉ (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ) (by rw [h‚ÇÇ‚ÇÉ])),
    zero_comp, assoc, X.opcyclesMap_fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ f‚ÇÇ‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ
    (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ) (by rw [h‚ÇÇ‚ÇÉ]) (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)
    (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ) (by rw [reassoc_of% h‚ÇÅ‚ÇÇ])) rfl rfl,
    Œ®_fromOpcycles_assoc, zero‚ÇÅ, comp_zero]

noncomputable def sequenceŒ® : ComposableArrows C 3 :=
  mk‚ÇÉ (X.cyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ _ _ _ (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ))
    (X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ)
    (X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ _ _ _ (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ))

lemma cyclesMap_Œ®_exact :
    (ShortComplex.mk _ _ (X.cyclesMap_Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A z hz
  dsimp at z hz
  refine ‚ü®A, ùüô _, inferInstance,
    X.liftCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ (z ‚â´ X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ) ?_, ?_‚ü©
  ¬∑ dsimp
    rw [assoc, ‚Üê X.Œ®_fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ , reassoc_of% hz, zero_comp]
  ¬∑ dsimp
    rw [‚Üê cancel_mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ), id_comp, assoc,
      X.cyclesMap_i n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ _ _ _ (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) (ùüô _) (by aesop_cat),
     Functor.map_id, comp_id, liftCycles_i]

lemma Œ®_opcyclesMap_exact :
    (ShortComplex.mk _ _ (X.Œ®_opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A z‚ÇÄ hz‚ÇÄ
  dsimp at z‚ÇÄ hz‚ÇÄ
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, _, z‚ÇÅ, hz‚ÇÅ‚ü© :=
    surjective_up_to_refinements_of_epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ) z‚ÇÄ
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, _, z‚ÇÇ, hz‚ÇÇ‚ü© :=
      (X.cokernelSequenceOpcycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ‚ÇÉ).exact_up_to_refinements z‚ÇÅ (by
    dsimp
    have H := X.p_opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ f‚ÇÇ‚ÇÉ
      (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) (ùüô _) (by aesop_cat)
    rw [Functor.map_id, id_comp] at H
    rw [‚Üê H, ‚Üê reassoc_of% hz‚ÇÅ, hz‚ÇÄ, comp_zero])
  dsimp at z‚ÇÇ hz‚ÇÇ
  refine ‚ü®A‚ÇÇ, œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, epi_comp _ _, z‚ÇÇ ‚â´ X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ, ?_‚ü©
  dsimp
  rw [‚Üê cancel_mono (X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ), assoc, assoc,
    assoc, assoc, toCycles_Œ®_assoc, p_fromOpcycles, ‚Üê reassoc_of% hz‚ÇÇ,
    reassoc_of% hz‚ÇÅ, p_fromOpcycles]

lemma sequenceŒ®_exact :
    (X.sequenceŒ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).Exact :=
  exact_of_Œ¥‚ÇÄ
    (X.cyclesMap_Œ®_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).exact_toComposableArrows
    (X.Œ®_opcyclesMap_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).exact_toComposableArrows

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
  {i j k l : Œπ} (f‚ÇÅ : i ‚ü∂ j) (f‚ÇÇ : j ‚ü∂ k) (f‚ÇÉ : k ‚ü∂ l)
  (f‚ÇÅ‚ÇÇ : i ‚ü∂ k) (h‚ÇÅ‚ÇÇ : f‚ÇÅ ‚â´ f‚ÇÇ = f‚ÇÅ‚ÇÇ) (f‚ÇÇ‚ÇÉ : j ‚ü∂ l) (h‚ÇÇ‚ÇÉ : f‚ÇÇ ‚â´ f‚ÇÉ = f‚ÇÇ‚ÇÉ)

noncomputable def Œ¥ToCycles : (X.H n‚ÇÄ).obj (mk‚ÇÅ f‚ÇÉ) ‚ü∂ X.cycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ :=
  X.liftCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ) (by simp)

@[reassoc (attr := simp)]
lemma Œ¥ToCycles_iCycles :
    X.Œ¥ToCycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ =
      X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ := by
  simp only [Œ¥ToCycles, liftCycles_i]

@[reassoc (attr := simp)]
lemma Œ¥_toCycles :
    X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ ‚â´ X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ =
      X.Œ¥ToCycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ := by
  rw [‚Üê cancel_mono (X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ), assoc,
    toCycles_i, Œ¥ToCycles_iCycles,
    ‚Üê X.Œ¥_naturality n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ f‚ÇÇ f‚ÇÉ (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) (ùüô _) rfl,
    Functor.map_id, id_comp]

noncomputable def Œ¥FromOpcycles : X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ (X.H n‚ÇÇ).obj (mk‚ÇÅ f‚ÇÅ) :=
  X.descOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ) (by simp)

@[reassoc (attr := simp)]
lemma pOpcycles_Œ¥FromOpcycles :
    X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ =
      X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ := by
  simp only [Œ¥FromOpcycles, p_descOpcycles]

@[reassoc (attr := simp)]
lemma fromOpcyles_Œ¥ :
    X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ ‚â´ X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ‚ÇÉ =
      X.Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ := by
  rw [‚Üê cancel_epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ),
    p_fromOpcycles_assoc, pOpcycles_Œ¥FromOpcycles,
    X.Œ¥_naturality n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ f‚ÇÇ‚ÇÉ (ùüô _) (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) rfl,
    Functor.map_id, comp_id]

@[simps]
noncomputable def leftHomologyDataShortComplexE :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).LeftHomologyData where
  K := X.cycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ
  H := cokernel (X.Œ¥ToCycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ)
  i := X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ
  œÄ := cokernel.œÄ _
  wi := by simp
  hi := kernelIsKernel _
  wœÄ := cokernel.condition _
  hœÄ := cokernelIsCokernel _

/-- `leftHomologyDataShortComplexE_f'`. -/
@[simp]
lemma leftHomologyDataShortComplexE_f' :
    (X.leftHomologyDataShortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).f' =
      X.Œ¥ToCycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ := rfl

noncomputable def cyclesIso :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).cycles ‚âÖ X.cycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ :=
  (X.leftHomologyDataShortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).cyclesIso

@[reassoc (attr := simp)]
lemma cyclesIso_inv_i :
    (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).inv ‚â´
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).iCycles = X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ :=
  ShortComplex.LeftHomologyData.cyclesIso_inv_comp_iCycles _

@[reassoc (attr := simp)]
lemma cyclesIso_hom_i :
    (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).hom ‚â´ X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ =
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).iCycles :=
  ShortComplex.LeftHomologyData.cyclesIso_hom_comp_i _

noncomputable def œÄE : X.cycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ ‚ü∂ X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ :=
    (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).inv ‚â´
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).homologyœÄ

instance : Epi (X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ) := by
  dsimp [œÄE]
  apply epi_comp

@[reassoc (attr := simp)]
lemma Œ¥ToCycles_cyclesIso_inv :
    X.Œ¥ToCycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).inv =
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).toCycles := by
  -- this could be a general lemma for LeftHomologyData
  rw [‚Üê cancel_mono (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).iCycles, assoc,
    cyclesIso_inv_i, Œ¥ToCycles_iCycles, ShortComplex.toCycles_i, shortComplexE_f]

@[reassoc (attr := simp)]
lemma Œ¥ToCycles_œÄE :
    X.Œ¥ToCycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ = 0 := by
  simp only [œÄE, Œ¥ToCycles_cyclesIso_inv_assoc, ShortComplex.toCycles_comp_homologyœÄ]

/-- cokernelSequenceE' -/
@[simps]
noncomputable def cokernelSequenceE' : ShortComplex C :=
    ShortComplex.mk _ _ (X.Œ¥ToCycles_œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ)

@[simps!]
noncomputable def cokernelSequenceE'Iso :
    X.cokernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚âÖ ShortComplex.mk _ _
        (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).toCycles_comp_homologyœÄ :=
  ShortComplex.isoMk (Iso.refl _) (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).symm
    (Iso.refl _) (by simp) (by simp [œÄE])

lemma cokernelSequenceE'_exact :
    (X.cokernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).Exact :=
  ShortComplex.exact_of_iso (X.cokernelSequenceE'Iso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).symm
    (ShortComplex.exact_of_g_is_cokernel _ (ShortComplex.homologyIsCokernel _))

instance : Epi (X.cokernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).g := by
  dsimp
  infer_instance

@[simps]
noncomputable def rightHomologyDataShortComplexE :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).RightHomologyData where
  Q := X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ
  H := kernel (X.Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ)
  p := X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ
  Œπ := kernel.Œπ _
  wp := by simp
  hp := cokernelIsCokernel _
  wŒπ := kernel.condition _
  hŒπ := kernelIsKernel _

/-- rightHomologyDataShortComplexE_g' -/
@[simp]
lemma rightHomologyDataShortComplexE_g' :
    (X.rightHomologyDataShortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).g' =
      X.Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ := rfl

noncomputable def opcyclesIso :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).opcycles ‚âÖ X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ :=
  (X.rightHomologyDataShortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).opcyclesIso

@[reassoc (attr := simp)]
lemma p_opcyclesIso_hom :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).pOpcycles ‚â´
      (X.opcyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).hom =
      X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ :=
  ShortComplex.RightHomologyData.pOpcycles_comp_opcyclesIso_hom _

@[reassoc (attr := simp)]
lemma p_opcyclesIso_inv :
    X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ (X.opcyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).inv =
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).pOpcycles :=
  (X.rightHomologyDataShortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).p_comp_opcyclesIso_inv

noncomputable def ŒπE : X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ :=
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).homologyŒπ ‚â´
      (X.opcyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).hom

instance : Mono (X.ŒπE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ) := by
  dsimp [ŒπE]
  infer_instance

@[reassoc (attr := simp)]
lemma opcyclesIso_hom_Œ¥FromOpcycles :
    (X.opcyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).hom ‚â´ X.Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ =
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).fromOpcycles := by
  -- this could be a general lemma for RightHomologyData
  rw [‚Üê cancel_epi (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).pOpcycles,
    p_opcyclesIso_hom_assoc, ShortComplex.p_fromOpcycles, shortComplexE_g,
    pOpcycles_Œ¥FromOpcycles]

@[reassoc (attr := simp)]
lemma ŒπE_Œ¥FromOpcycles :
    X.ŒπE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ = 0 := by
  simp only [ŒπE, assoc, opcyclesIso_hom_Œ¥FromOpcycles, ShortComplex.homologyŒπ_comp_fromOpcycles]

@[reassoc (attr := simp)]
lemma œÄE_ŒπE :
    X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.ŒπE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ =
      X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ ‚â´ X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ := by
  simp [œÄE, ŒπE]

/-- kernelSequenceE' -/
@[simps]
noncomputable def kernelSequenceE' : ShortComplex C :=
    ShortComplex.mk _ _ (X.ŒπE_Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ)

@[simps!]
noncomputable def kernelSequenceE'Iso :
    X.kernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚âÖ ShortComplex.mk _ _
        (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).homologyŒπ_comp_fromOpcycles :=
  Iso.symm (ShortComplex.isoMk (Iso.refl _) (X.opcyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ)
    (Iso.refl _) (by simp [ŒπE]) (by simp))

lemma kernelSequenceE'_exact :
    (X.kernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).Exact :=
  ShortComplex.exact_of_iso (X.kernelSequenceE'Iso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).symm
    (ShortComplex.exact_of_f_is_kernel _ (ShortComplex.homologyIsKernel _))

instance : Mono (X.kernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).f := by
  dsimp
  infer_instance

@[simps]
noncomputable def cokernelSequenceE : ShortComplex C where
  X‚ÇÅ := (X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÅ) ‚äû (X.H n‚ÇÄ).obj (mk‚ÇÅ f‚ÇÉ)
  X‚ÇÇ := (X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÅ‚ÇÇ)
  X‚ÇÉ := X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ
  f := biprod.desc ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ)) (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ)
  g := X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ
  zero := by ext <;> simp

instance : Epi (X.cokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).g := by
  dsimp
  apply epi_comp

lemma cokernelSequenceE_exact :
    (X.cokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A x‚ÇÇ hx‚ÇÇ
  dsimp at x‚ÇÇ hx‚ÇÇ
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, _, y‚ÇÅ, hy‚ÇÅ‚ü© :=
    (X.cokernelSequenceE'_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).exact_up_to_refinements
      (x‚ÇÇ ‚â´ X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) (by simpa using hx‚ÇÇ)
  dsimp at y‚ÇÅ hy‚ÇÅ
  let z := œÄ‚ÇÅ ‚â´ x‚ÇÇ - y‚ÇÅ ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, _, x‚ÇÅ, hx‚ÇÅ‚ü© := (X.exact‚ÇÇ n‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).exact_up_to_refinements z (by
      have : z ‚â´ X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ = 0 := by simp [z, hy‚ÇÅ]
      simpa only [zero_comp, assoc, toCycles_i] using this =‚â´ X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ)
  dsimp at x‚ÇÅ hx‚ÇÅ
  exact ‚ü®A‚ÇÇ, œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, epi_comp _ _, biprod.lift x‚ÇÅ (œÄ‚ÇÇ ‚â´ y‚ÇÅ), by simp [z, ‚Üê hx‚ÇÅ]‚ü©

section

variable {A : C} (x : (X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÅ‚ÇÇ) ‚ü∂ A)
  (h : (X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) ‚â´ x = 0)
  (h' : X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ ‚â´ x = 0)

noncomputable def descE :
    X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ A :=
  (X.cokernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).desc x (by
    dsimp
    ext
    ¬∑ simp [h]
    ¬∑ simp [h'])

@[reassoc (attr := simp)]
lemma toCycles_œÄE_descE :
    X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´
      X.descE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ x h h' = x := by
  dsimp only [descE]
  rw [‚Üê assoc]
  apply (X.cokernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).g_desc

end

@[simps]
noncomputable def kernelSequenceE : ShortComplex C where
  X‚ÇÅ := X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ
  X‚ÇÇ := (X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÇ‚ÇÉ)
  X‚ÇÉ := (X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÉ) ‚äû (X.H n‚ÇÇ).obj (mk‚ÇÅ f‚ÇÅ)
  f := X.ŒπE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ
  g := biprod.lift ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)) (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ‚ÇÉ)
  zero := by ext <;> simp

instance : Mono (X.kernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).f := by
  dsimp
  infer_instance

lemma kernelSequenceE_exact :
    (X.kernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A x‚ÇÇ hx‚ÇÇ
  dsimp at x‚ÇÇ hx‚ÇÇ
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, _, x‚ÇÅ, hx‚ÇÅ‚ü© :=
    (X.kernelSequenceE'_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).exact_up_to_refinements
      (X.liftOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ x‚ÇÇ (by simpa using hx‚ÇÇ =‚â´ biprod.fst)) (by
        dsimp
        rw [‚Üê X.fromOpcyles_Œ¥ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ,
          X.liftOpcycles_fromOpcycles_assoc ]
        simpa using hx‚ÇÇ =‚â´ biprod.snd)
  dsimp at x‚ÇÅ hx‚ÇÅ
  refine ‚ü®A‚ÇÅ, œÄ‚ÇÅ, inferInstance, x‚ÇÅ, ?_‚ü©
  dsimp
  rw [‚Üê reassoc_of% hx‚ÇÅ, liftOpcycles_fromOpcycles]

section

variable {A : C} (x : A ‚ü∂ (X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÇ‚ÇÉ))
  (h : x ‚â´ (X.H n‚ÇÅ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) = 0)
  (h' : x ‚â´ X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ‚ÇÉ = 0)

noncomputable def liftE :
    A ‚ü∂ X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ :=
  (X.kernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).lift x (by
    dsimp
    ext
    ¬∑ simp [h]
    ¬∑ simp [h'])

@[reassoc (attr := simp)]
lemma liftE_ŒπE_fromOpcycles :
    X.liftE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ x h h' ‚â´ X.ŒπE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´
      X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ = x := by
  apply (X.kernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).lift_f

end

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (hn‚ÇÉ : n‚ÇÇ + 1 = n‚ÇÉ)
  {i‚ÇÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ i‚ÇÖ : Œπ} (f‚ÇÅ : i‚ÇÄ ‚ü∂ i‚ÇÅ) (f‚ÇÇ : i‚ÇÅ ‚ü∂ i‚ÇÇ) (f‚ÇÉ : i‚ÇÇ ‚ü∂ i‚ÇÉ)
  (f‚ÇÑ : i‚ÇÉ ‚ü∂ i‚ÇÑ) (f‚ÇÖ : i‚ÇÑ ‚ü∂ i‚ÇÖ) (f‚ÇÅ‚ÇÇ : i‚ÇÄ ‚ü∂ i‚ÇÇ) (h‚ÇÅ‚ÇÇ : f‚ÇÅ ‚â´ f‚ÇÇ = f‚ÇÅ‚ÇÇ)
  (f‚ÇÇ‚ÇÉ : i‚ÇÅ ‚ü∂ i‚ÇÉ) (h‚ÇÇ‚ÇÉ : f‚ÇÇ ‚â´ f‚ÇÉ = f‚ÇÇ‚ÇÉ)
  (f‚ÇÉ‚ÇÑ : i‚ÇÇ ‚ü∂ i‚ÇÑ) (h‚ÇÉ‚ÇÑ : f‚ÇÉ ‚â´ f‚ÇÑ = f‚ÇÉ‚ÇÑ)
  (f‚ÇÑ‚ÇÖ : i‚ÇÉ ‚ü∂ i‚ÇÖ) (h‚ÇÑ‚ÇÖ : f‚ÇÑ ‚â´ f‚ÇÖ = f‚ÇÑ‚ÇÖ)

noncomputable def d : X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ ‚ü∂ X.E n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ :=
  X.descE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ _ rfl (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ (f‚ÇÅ ‚â´ f‚ÇÇ) (f‚ÇÉ ‚â´ f‚ÇÑ) ‚â´
    X.toCycles n‚ÇÇ n‚ÇÉ hn‚ÇÉ f‚ÇÅ f‚ÇÇ _ rfl ‚â´ X.œÄE n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ) (by
      rw [X.Œ¥_naturality_assoc n‚ÇÅ n‚ÇÇ hn‚ÇÇ (f‚ÇÅ ‚â´ f‚ÇÇ) f‚ÇÉ (f‚ÇÅ ‚â´ f‚ÇÇ) (f‚ÇÉ ‚â´ f‚ÇÑ)
        (ùüô _) (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÉ f‚ÇÑ  _ rfl) rfl, Functor.map_id, id_comp,
        Œ¥_toCycles_assoc, Œ¥ToCycles_œÄE]) (by rw [Œ¥_Œ¥_assoc, zero_comp])

@[reassoc]
lemma toCycles_œÄE_d :
    X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ ‚â´
      X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ =
        X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ‚ÇÇ f‚ÇÉ‚ÇÑ ‚â´ X.toCycles n‚ÇÇ n‚ÇÉ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´
          X.œÄE n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ := by
  subst h‚ÇÅ‚ÇÇ h‚ÇÉ‚ÇÑ
  simp only [d, Œ¥_toCycles_assoc, toCycles_œÄE_descE]

include h‚ÇÉ‚ÇÑ in
@[reassoc]
lemma d_ŒπE_fromOpcycles :
    X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ ‚â´ X.ŒπE n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´
      X.fromOpcycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ =
      X.ŒπE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ ‚â´ X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÑ f‚ÇÖ f‚ÇÑ‚ÇÖ h‚ÇÑ‚ÇÖ ‚â´
        X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÑ‚ÇÖ := by
  rw [‚Üê cancel_epi (X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ),
    ‚Üê cancel_epi (X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ),
    X.toCycles_œÄE_d_assoc n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ _ rfl]
  rw [œÄE_ŒπE_assoc, p_fromOpcycles, toCycles_i_assoc, fromOpcyles_Œ¥,
    œÄE_ŒπE_assoc, pOpcycles_Œ¥FromOpcycles, toCycles_i_assoc, ‚Üê Functor.map_comp]
  symm
  apply Œ¥_naturality
  simp

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (hn‚ÇÉ : n‚ÇÇ + 1 = n‚ÇÉ)
  {i‚ÇÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ i‚ÇÖ : Œπ} (f‚ÇÅ : i‚ÇÄ ‚ü∂ i‚ÇÅ) (f‚ÇÇ : i‚ÇÅ ‚ü∂ i‚ÇÇ) (f‚ÇÉ : i‚ÇÇ ‚ü∂ i‚ÇÉ)
  (f‚ÇÑ : i‚ÇÉ ‚ü∂ i‚ÇÑ) (f‚ÇÖ : i‚ÇÑ ‚ü∂ i‚ÇÖ)

@[reassoc (attr := simp)]
lemma œÄE_d_ŒπE :
    X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ ‚â´ X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ ‚â´
      X.ŒπE n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ = X.Œ® n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÇ f‚ÇÉ f‚ÇÑ := by
  rw [‚Üê cancel_epi (X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÉ f‚ÇÑ _ rfl), toCycles_Œ®,
    X.toCycles_œÄE_d_assoc n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ _ rfl,
    œÄE_ŒπE, toCycles_i_assoc, ‚Üê X.Œ¥_naturality_assoc n‚ÇÅ n‚ÇÇ hn‚ÇÇ (f‚ÇÅ ‚â´ f‚ÇÇ) (f‚ÇÉ ‚â´ f‚ÇÑ) f‚ÇÇ (f‚ÇÉ ‚â´ f‚ÇÑ)
      (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ _ rfl) (ùüô _) rfl, Functor.map_id, id_comp]

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ : ‚Ñ§)
  (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (hn‚ÇÉ : n‚ÇÇ + 1 = n‚ÇÉ) (hn‚ÇÑ : n‚ÇÉ + 1 = n‚ÇÑ)
  {i‚ÇÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ i‚ÇÖ i‚ÇÜ i‚Çá : Œπ} (f‚ÇÅ : i‚ÇÄ ‚ü∂ i‚ÇÅ) (f‚ÇÇ : i‚ÇÅ ‚ü∂ i‚ÇÇ) (f‚ÇÉ : i‚ÇÇ ‚ü∂ i‚ÇÉ)
  (f‚ÇÑ : i‚ÇÉ ‚ü∂ i‚ÇÑ) (f‚ÇÖ : i‚ÇÑ ‚ü∂ i‚ÇÖ) (f‚ÇÜ : i‚ÇÖ ‚ü∂ i‚ÇÜ) (f‚Çá : i‚ÇÜ ‚ü∂ i‚Çá)

@[reassoc (attr := simp)]
lemma d_d :
    X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚Çá ‚â´
      X.d n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ = 0 := by
  rw [‚Üê cancel_epi (X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÖ f‚ÇÜ f‚Çá),
    ‚Üê cancel_epi (X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÖ f‚ÇÜ _ rfl),
    comp_zero, comp_zero,
    X.toCycles_œÄE_d_assoc n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚Çá _ rfl _ rfl,
    X.toCycles_œÄE_d n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ _ rfl _ rfl,
    Œ¥_Œ¥_assoc, zero_comp]

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§)
  (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
  {i‚ÇÄ i‚ÇÅ : Œπ} (f : i‚ÇÄ ‚ü∂ i‚ÇÅ)

noncomputable def cyclesIsoH :
    X.cycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ (ùüô i‚ÇÄ) f ‚âÖ (X.H n‚ÇÅ).obj (mk‚ÇÅ f) :=
  (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (ùüô i‚ÇÄ) f (ùüô i‚ÇÅ)).symm ‚â™‚â´ X.cycles'IsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f

@[simp]
lemma cyclesIsoH_inv :
    (X.cyclesIsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f).inv = X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ (ùüô _) f f (by simp) := by
  rw [‚Üê cancel_mono (X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ (ùüô _) f ), toCycles_i]
  dsimp [cyclesIsoH]
  rw [assoc, cyclesIso_hom_i, cycles'IsoH_inv_iCycles, ‚Üê Functor.map_id]
  congr 1
  aesop_cat

@[reassoc (attr := simp)]
lemma cyclesIsoH_hom_inv_id :
    (X.cyclesIsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f).hom ‚â´
      X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ (ùüô _) f f (by simp) = ùüô _ := by
  simpa using (X.cyclesIsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f).hom_inv_id

@[reassoc (attr := simp)]
lemma cyclesIsoH_inv_hom_id :
    X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ (ùüô _) f f (by simp) ‚â´
      (X.cyclesIsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f).hom = ùüô _ := by
  simpa using (X.cyclesIsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f).inv_hom_id

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ : ‚Ñ§)
  (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (hn‚ÇÉ : n‚ÇÇ + 1 = n‚ÇÉ)
  {i‚ÇÄ i‚ÇÅ i‚ÇÇ : Œπ}
  (f‚ÇÅ : i‚ÇÄ ‚ü∂ i‚ÇÅ) (f‚ÇÇ : i‚ÇÅ ‚ü∂ i‚ÇÇ)

@[reassoc (attr := simp)]
lemma œÄE_EIsoH_hom :
    X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (ùüô i‚ÇÄ) f‚ÇÅ (ùüô i‚ÇÅ) ‚â´ (X.EIsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ).hom =
      (X.cyclesIsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ).hom := by
  simp [œÄE, cyclesIsoH]

@[reassoc]
lemma d_EIsoH_hom :
    X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ (ùüô i‚ÇÄ) f‚ÇÅ (ùüô i‚ÇÅ) f‚ÇÇ (ùüô i‚ÇÇ) ‚â´
      (X.EIsoH n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ).hom =
    (X.EIsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÇ).hom ‚â´ X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ := by
  rw [‚Üê cancel_epi (X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (ùüô i‚ÇÅ) f‚ÇÇ (ùüô i‚ÇÇ)),
    ‚Üê cancel_epi (X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ (ùüô i‚ÇÅ) f‚ÇÇ f‚ÇÇ (by simp)),
    X.toCycles_œÄE_d_assoc n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ (ùüô i‚ÇÄ) f‚ÇÅ (ùüô i‚ÇÅ) f‚ÇÇ (ùüô i‚ÇÇ) f‚ÇÅ (by simp),
    œÄE_EIsoH_hom, œÄE_EIsoH_hom_assoc, cyclesIsoH_inv_hom_id, comp_id,
    cyclesIsoH_inv_hom_id_assoc]

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§)
  (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
  {i‚ÇÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ}
  (f‚ÇÅ : i‚ÇÄ ‚ü∂ i‚ÇÅ) (f‚ÇÇ : i‚ÇÅ ‚ü∂ i‚ÇÇ) (f‚ÇÉ : i‚ÇÇ ‚ü∂ i‚ÇÉ)
  {i‚ÇÄ' i‚ÇÅ' i‚ÇÇ' i‚ÇÉ' : Œπ}
  (f‚ÇÅ' : i‚ÇÄ' ‚ü∂ i‚ÇÅ') (f‚ÇÇ' : i‚ÇÅ' ‚ü∂ i‚ÇÇ') (f‚ÇÉ' : i‚ÇÇ' ‚ü∂ i‚ÇÉ')
  (Œ± : mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ mk‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ') (Œ≤ : mk‚ÇÇ f‚ÇÅ f‚ÇÇ ‚ü∂ mk‚ÇÇ f‚ÇÅ' f‚ÇÇ')
  (hŒ≤ : Œ≤ = homMk‚ÇÇ (Œ±.app 0) (Œ±.app 1) (Œ±.app 2) (naturality' Œ± 0 1) (naturality' Œ± 1 2))
  (Œ≥ : mk‚ÇÇ f‚ÇÇ f‚ÇÉ ‚ü∂ mk‚ÇÇ f‚ÇÇ' f‚ÇÉ')
  (hŒ≥ : Œ≥ = homMk‚ÇÇ (Œ±.app 1) (Œ±.app 2) (Œ±.app 3) (naturality' Œ± 1 2) (naturality' Œ± 2 3))

include hŒ≤ in
@[reassoc]
lemma cyclesIso_inv_cyclesMap :
    (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).inv ‚â´
      ShortComplex.cyclesMap (X.shortComplexEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ±) =
      X.cyclesMap n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ' f‚ÇÇ' Œ≤ ‚â´
        (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ').inv := by
  subst hŒ≤
  rw [‚Üê cancel_mono (ShortComplex.iCycles _), assoc, assoc, ShortComplex.cyclesMap_i,
    cyclesIso_inv_i_assoc, cyclesIso_inv_i, shortComplexEMap_œÑ‚ÇÇ]
  symm
  apply cyclesMap_i
  rfl

include hŒ≥ in
@[reassoc]
lemma opcyclesMap_opcyclesIso_hom :
    ShortComplex.opcyclesMap (X.shortComplexEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ±) ‚â´
      (X.opcyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ').hom =
    (X.opcyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).hom ‚â´ X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ' f‚ÇÉ' Œ≥ := by
  subst hŒ≥
  rw [‚Üê cancel_epi (ShortComplex.pOpcycles _), ShortComplex.p_opcyclesMap_assoc,
    p_opcyclesIso_hom, p_opcyclesIso_hom_assoc, shortComplexEMap_œÑ‚ÇÇ]
  simp only [shortComplexE_X‚ÇÇ, shortComplexEMap_œÑ‚ÇÇ]
  symm
  apply p_opcyclesMap
  rfl

include hŒ≤ in
@[reassoc]
lemma œÄE_EMap :
    X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ± =
      X.cyclesMap n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ' f‚ÇÇ' Œ≤ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' := by
  dsimp [œÄE, EMap]
  simp only [assoc, ShortComplex.homologyœÄ_naturality,
    X.cyclesIso_inv_cyclesMap_assoc n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ± Œ≤ hŒ≤]

include hŒ≥ in
@[reassoc]
lemma EMap_ŒπE :
    X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ± ‚â´ X.ŒπE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' =
      X.ŒπE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ' f‚ÇÉ' Œ≥ := by
  dsimp [ŒπE, EMap]
  simp only [ShortComplex.homologyŒπ_naturality_assoc, assoc,
    X.opcyclesMap_opcyclesIso_hom n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ± Œ≥ hŒ≥]

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§)
  (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
  {i‚ÇÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ}
  (f‚ÇÅ : i‚ÇÄ ‚ü∂ i‚ÇÅ) (f‚ÇÇ : i‚ÇÅ ‚ü∂ i‚ÇÇ) (f‚ÇÉ : i‚ÇÇ ‚ü∂ i‚ÇÉ)
  (f‚ÇÅ‚ÇÇ : i‚ÇÄ ‚ü∂ i‚ÇÇ) (h‚ÇÅ‚ÇÇ : f‚ÇÅ ‚â´ f‚ÇÇ = f‚ÇÅ‚ÇÇ)

noncomputable def opcyclesToE : X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ ‚ü∂ X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ :=
  X.descOpcycles _ _ _ _ _
    (X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ) (by simp)

@[reassoc (attr := simp)]
lemma p_opcyclesToE :
    X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ ‚â´ X.opcyclesToE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ =
      X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ := by
  simp [opcyclesToE]

@[reassoc (attr := simp)]
lemma opcyclesToE_ŒπE :
    X.opcyclesToE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ X.ŒπE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ =
      X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ f‚ÇÇ f‚ÇÉ (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) := by
  rw [‚Üê cancel_epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ), p_opcyclesToE_assoc,
    œÄE_ŒπE, toCycles_i_assoc]
  symm
  apply X.p_opcyclesMap
  rfl

instance : Epi (X.opcyclesToE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) := by
  have : Epi (X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ) :=
    epi_comp _ _
  exact epi_of_epi_fac (X.p_opcyclesToE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ)

/-- cokernelSequenceE'' -/
@[simps!]
noncomputable def cokernelSequenceE'' : ShortComplex C where
  X‚ÇÅ := (X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÅ)
  X‚ÇÇ := X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ
  X‚ÇÉ := X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ
  f := (X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) ‚â´ X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ
  g := X.opcyclesToE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ
  zero := by simp

instance : Epi (X.cokernelSequenceE'' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).g := by
  dsimp
  infer_instance

lemma cokernelSequenceE''_exact :
    (X.cokernelSequenceE'' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A x‚ÇÇ hx‚ÇÇ
  dsimp at x‚ÇÇ hx‚ÇÇ
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, _, y‚ÇÇ, hy‚ÇÇ‚ü© :=
    surjective_up_to_refinements_of_epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ) x‚ÇÇ
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, _, y‚ÇÅ, hy‚ÇÅ‚ü© :=
    (X.cokernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).exact_up_to_refinements y‚ÇÇ
      (by simpa only [assoc, p_opcyclesToE, hx‚ÇÇ, comp_zero]
        using hy‚ÇÇ.symm =‚â´ X.opcyclesToE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ)
  dsimp at y‚ÇÅ hy‚ÇÅ
  obtain ‚ü®a, b, rfl‚ü© : ‚àÉ a b, y‚ÇÅ = a ‚â´ biprod.inl + b ‚â´ biprod.inr :=
    ‚ü®y‚ÇÅ ‚â´ biprod.fst, y‚ÇÅ ‚â´ biprod.snd, by ext <;> simp‚ü©
  simp only [add_comp, assoc, biprod.inl_desc, biprod.inr_desc] at hy‚ÇÅ
  refine ‚ü®A‚ÇÇ, œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, epi_comp _ _, a, ?_‚ü©
  dsimp
  simp only [assoc, hy‚ÇÇ, reassoc_of% hy‚ÇÅ, add_comp, Œ¥_pOpcycles, comp_zero, add_zero]

-- TODO: dual statement?

end


end SpectralObject

end Abelian

end CategoryTheory
