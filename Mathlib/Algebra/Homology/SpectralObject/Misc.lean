/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.ExactSequence
import Mathlib.AlgebraicTopology.SimplexCategory.Basic
import Mathlib.CategoryTheory.Abelian.FunctorCategory
import Mathlib.CategoryTheory.ArrowSeven
import Mathlib.CategoryTheory.Subobject.Lattice
import Mathlib.CategoryTheory.MorphismProperty.Basic

/-!
# Spectral objects...

-/

open CategoryTheory Category Limits Preadditive

namespace CategoryTheory

/-section

variable {Œπ : Type _} [Preorder Œπ]

@[simps!]
def Arrow.mkOfLE (a b : Œπ) (hab : a ‚â§ b := by linarith) : Arrow Œπ := Arrow.mk (homOfLE hab)

variable (Œπ)

@[simps]
noncomputable def Arrow.ŒπOfOrderBot [OrderBot Œπ] : Œπ ‚•§ Arrow Œπ where
  obj i := Arrow.mkOfLE ‚ä• i bot_le
  map {i j} œÜ :=
    { left := ùüô _
      right := œÜ }

end-/

/-section

variable {C : Type _} [Category C] [Abelian C]

noncomputable def Over.abelianImageFunctor (X : C) : Over X ‚•§ MonoOver X where
  obj f := MonoOver.mk' (Abelian.image.Œπ f.hom)
  map œÜ := MonoOver.homMk (Abelian.image.lift _ (Abelian.image.Œπ _)
    (by rw [‚Üê cancel_epi (Abelian.factorThruImage _),
        Abelian.image.fac_assoc, comp_zero, ‚Üê Over.w œÜ, assoc,
        cokernel.condition, comp_zero])) (by simp)
  map_id X := by
    apply CostructuredArrow.hom_ext
    dsimp
    rw [‚Üê cancel_mono (Abelian.image.Œπ _), Abelian.image.lift_Œπ]
    erw [id_comp]
  map_comp œÜ œà := by
    apply CostructuredArrow.hom_ext
    change _ = _ ‚â´ _ ‚â´ _
    dsimp [MonoOver.mk', MonoOver.homMk, Over.homMk,
      CostructuredArrow.homMk, CommaMorphism.mk]
    rw [‚Üê cancel_mono (Abelian.image.Œπ _)]
    simp only [equalizer_as_kernel, Abelian.image.lift_Œπ, comp_id,
      assoc, limit.lift_œÄ, Fork.ofŒπ_pt, Fork.ofŒπ_œÄ_app]

end-/

/-namespace Arrow

lemma isIso_iff {C : Type _} [Category C] {X Y : Arrow C} (f : X ‚ü∂ Y) :
    IsIso f ‚Üî IsIso f.left ‚àß IsIso f.right := by
  constructor
  ¬∑ intro hf
    constructor
    ¬∑ change IsIso ((Comma.fst _ _).map f)
      infer_instance
    ¬∑ change IsIso ((Comma.snd _ _).map f)
      infer_instance
  ¬∑ rintro ‚ü®hf‚ÇÅ, hf‚ÇÇ‚ü©
    refine' ‚ü®CommaMorphism.mk (inv f.left) (inv f.right) _, _, _‚ü©
    ¬∑ dsimp
      simp only [‚Üê cancel_epi f.left, Arrow.w_assoc f,
        IsIso.hom_inv_id_assoc, IsIso.hom_inv_id, comp_id]
    ¬∑ aesop_cat
    ¬∑ aesop_cat

end Arrow-/

namespace Limits

variable {C Œπ Œπ' J : Type _} [Category C] [Category Œπ] [Category Œπ'] [Category J]
  (F : Œπ' ‚•§ Œπ)

-- this should be moved to `Limits.FunctorCategory`
noncomputable instance [HasFiniteLimits C] (i : Œπ) :
  PreservesFiniteLimits ((evaluation Œπ C).obj i) := ‚ü®fun _ => inferInstance‚ü©

noncomputable instance [HasFiniteColimits C] (i : Œπ) :
  PreservesFiniteColimits ((evaluation Œπ C).obj i) := ‚ü®fun _ => inferInstance‚ü©

instance [HasZeroMorphisms C] :
    ((whiskeringLeft Œπ' Œπ C).obj F).PreservesZeroMorphisms where

noncomputable instance [HasLimitsOfShape J C] :
    PreservesLimitsOfShape J ((whiskeringLeft Œπ' Œπ C).obj F) :=
    ‚ü®fun {_} => ‚ü®fun hc => ‚ü®evaluationJointlyReflectsLimits _
      (fun i => isLimitOfPreserves ((evaluation Œπ C).obj (F.obj i)) hc)‚ü©‚ü©‚ü©

noncomputable instance [HasColimitsOfShape J C] :
    PreservesColimitsOfShape J ((whiskeringLeft Œπ' Œπ C).obj F) :=
    ‚ü®fun {_} => ‚ü®fun hc => ‚ü®evaluationJointlyReflectsColimits _
      (fun i => isColimitOfPreserves ((evaluation Œπ C).obj (F.obj i)) hc)‚ü©‚ü©‚ü©

noncomputable instance [HasFiniteLimits C] :
    PreservesFiniteLimits ((whiskeringLeft Œπ' Œπ C).obj F) :=
  ‚ü®fun _ => by infer_instance‚ü©

noncomputable instance [HasFiniteColimits C] :
    PreservesFiniteColimits ((whiskeringLeft Œπ' Œπ C).obj F) :=
  ‚ü®fun _ => by infer_instance‚ü©

instance [HasFiniteColimits C] {X Y : Œπ ‚•§ C} (œÑ : X ‚ü∂ Y) [Epi œÑ] :
    Epi (whiskerLeft F œÑ) := ((whiskeringLeft Œπ' Œπ C).obj F).map_epi œÑ

instance [HasFiniteLimits C] {X Y : Œπ ‚•§ C} (œÑ : X ‚ü∂ Y) [Mono œÑ] :
  Mono (whiskerLeft F œÑ) := ((whiskeringLeft Œπ' Œπ C).obj F).map_mono œÑ

instance [HasFiniteColimits C] {X Y : Œπ ‚•§ C} (œÑ : X ‚ü∂ Y) [Epi œÑ] (i : Œπ) :
    Epi (œÑ.app i) :=
  ((evaluation Œπ C).obj i).map_epi œÑ

instance [HasFiniteLimits C] {X Y : Œπ ‚•§ C} (œÑ : X ‚ü∂ Y) [Mono œÑ] (i : Œπ) :
    Mono (œÑ.app i) :=
  ((evaluation Œπ C).obj i).map_mono œÑ

end Limits

namespace ShortComplex

variable {C Œπ : Type _} [Category C] [Category Œπ] [Abelian C]
variable (S : ShortComplex (Œπ ‚•§ C))

noncomputable def evaluationHomologyIso (a : Œπ) :
    (S.map ((evaluation _ _).obj a)).homology ‚âÖ S.homology.obj a :=
  S.mapHomologyIso ((evaluation _ _).obj a)

lemma homology_map {a b : Œπ} (œÜ : a ‚ü∂ b) :
    S.homology.map œÜ =
  (S.evaluationHomologyIso a).inv ‚â´ homologyMap (S.mapNatTrans ((evaluation _ _).map œÜ)) ‚â´
    (S.evaluationHomologyIso b).hom :=
  NatTrans.app_homology ((evaluation _ _).map œÜ) S

noncomputable def homologyMapMapNatTransEvaluationMapArrowIso {a b : Œπ} (œÜ : a ‚ü∂ b) :
  Arrow.mk (homologyMap (S.mapNatTrans ((evaluation _ _).map œÜ))) ‚âÖ
    Arrow.mk (S.homology.map œÜ) := by
  refine Arrow.isoMk (S.evaluationHomologyIso a) (S.evaluationHomologyIso b) ?_
  dsimp
  rw [homology_map, Iso.hom_inv_id_assoc]

lemma mono_homology_map_iff {a b : Œπ} (œÜ : a ‚ü∂ b) :
    Mono (S.homology.map œÜ) ‚Üî Mono (homologyMap (S.mapNatTrans ((evaluation _ _).map œÜ))) :=
  (MorphismProperty.monomorphisms C).arrow_mk_iso_iff
    (S.homologyMapMapNatTransEvaluationMapArrowIso œÜ).symm

lemma epi_homology_map_iff {a b : Œπ} (œÜ : a ‚ü∂ b) :
    Epi (S.homology.map œÜ) ‚Üî Epi (homologyMap (S.mapNatTrans ((evaluation _ _).map œÜ))) :=
  (MorphismProperty.epimorphisms C).arrow_mk_iso_iff
    (S.homologyMapMapNatTransEvaluationMapArrowIso œÜ).symm

lemma isIso_homology_map_iff {a b : Œπ} (œÜ : a ‚ü∂ b) :
    IsIso (S.homology.map œÜ) ‚Üî IsIso (homologyMap (S.mapNatTrans ((evaluation _ _).map œÜ))) :=
  (MorphismProperty.isomorphisms C).arrow_mk_iso_iff
    (S.homologyMapMapNatTransEvaluationMapArrowIso œÜ).symm

end ShortComplex

end CategoryTheory

namespace Monotone

@[simps]
def natTrans {X Y : Type*} [Preorder X] [Preorder Y] {f g : X ‚Üí Y} (hf : Monotone f)
    (hg : Monotone g) (h : ‚àÄ x, f x ‚â§ g x) :
    Monotone.functor hf ‚ü∂ Monotone.functor hg where
  app x := homOfLE (h x)

end Monotone

namespace SimplexCategory

@[simps!]
def natTransToCatMapOfLE {Œî Œî' : SimplexCategory} (f g : Œî ‚ü∂ Œî')
    (h : ‚àÄ x, f.toOrderHom x ‚â§ g.toOrderHom x) :
    SimplexCategory.toCat.map f ‚ü∂ SimplexCategory.toCat.map g :=
  Monotone.natTrans f.toOrderHom.monotone g.toOrderHom.monotone h

end SimplexCategory

namespace CategoryTheory

namespace ComposableArrows

variable (C : Type*) [Category C]

@[simps!]
def whiskerLeftNatTrans {n m : ‚Ñï} {Œ¶ Œ® : Fin (n + 1) ‚•§ Fin (m + 1)} (Œ± : Œ¶ ‚ü∂ Œ®) :
    (whiskerLeftFunctor Œ¶ : ComposableArrows C _ ‚•§ _) ‚ü∂ whiskerLeftFunctor Œ® where
  app S := ((whiskeringLeft (Fin (n + 1)) (Fin (m + 1)) C).map Œ±).app S

def functorŒ¥ {n : ‚Ñï} (i : Fin (n + 2)) :
    ComposableArrows C (n + 1) ‚•§ ComposableArrows C n :=
  whiskerLeftFunctor (SimplexCategory.toCat.map (SimplexCategory.Œ¥ i))

variable {C}

abbrev Œ¥ {n : ‚Ñï} (S : ComposableArrows C (n + 1)) (i : Fin (n + 2)) :
    ComposableArrows C n :=
  (functorŒ¥ C i).obj S

variable (C)

def natTransŒ¥ {n : ‚Ñï} (i j : Fin (n + 2)) (hij : i.1 ‚â§ j.1) :
    functorŒ¥ C j ‚ü∂ functorŒ¥ C i :=
  whiskerLeftNatTrans C (SimplexCategory.natTransToCatMapOfLE _ _ (by
    intro x
    dsimp [SimplexCategory.Œ¥, Fin.succAbove, Fin.succ,
      Fin.castSucc, Fin.castAdd, Fin.castLE]
    obtain ‚ü®i, hi‚ü© := i
    obtain ‚ü®j, hj‚ü© := j
    obtain ‚ü®x, hx‚ü© := x
    simp only at hij
    simp only [Fin.mk_lt_mk]
    split_ifs with h‚ÇÅ h‚ÇÇ <;> simp only [Fin.mk_le_mk] <;> linarith))

variable {C}

abbrev mapŒ¥ {n : ‚Ñï} (S : ComposableArrows C (n + 1)) (i j : Fin (n + 2)) (hij : i.1 ‚â§ j.1) :
    S.Œ¥ j ‚ü∂ S.Œ¥ i :=
  (natTransŒ¥ C i j hij).app S

variable (C)

@[simps]
noncomputable def functorArrows (i j n : ‚Ñï) (hij : i ‚â§ j := by linarith)
      (hj : j ‚â§ n := by linarith) :
    ComposableArrows C n ‚•§ ComposableArrows C 1 where
  obj S := mk‚ÇÅ (S.map' i j)
  map {S S'} œÜ := homMk‚ÇÅ (œÜ.app _) (œÜ.app _) (œÜ.naturality _)
  map_comp œÜ œÜ' := hom_ext‚ÇÅ rfl rfl

@[simps]
noncomputable def mapFunctorArrows (i j i' j' n : ‚Ñï)
    (hij : i ‚â§ j := by linarith) (_ : j ‚â§ n := by linarith)
    (hij' : i' ‚â§ j' := by linarith) (_ : j' ‚â§ n := by linarith)
    (hi : i ‚â§ i' := by linarith) (_ : j ‚â§ j' := by linarith) :
    functorArrows C i j n ‚ü∂ functorArrows C i' j' n where
  app S := homMk‚ÇÅ (S.map' i i') (S.map' j j')
    (by dsimp; simp only [‚Üê Functor.map_comp, homOfLE_comp])

variable {C}
variable {D : Type*} [Category D] {n : ‚Ñï} (S : ComposableArrows C n) (F : C ‚•§ D)

@[simps!]
def apply : ComposableArrows D n := S ‚ãô F

end ComposableArrows

variable {C Œπ : Type _} [Category C] [Abelian C] [Category Œπ]

lemma ShortComplex.exact_iff_exact_evaluation (S : ShortComplex (Œπ ‚•§ C)) :
    S.Exact ‚Üî ‚àÄ (i : Œπ), (S.map ((evaluation Œπ C).obj i)).Exact := by
  simp only [ShortComplex.exact_iff_isZero_homology,
    fun i => Iso.isZero_iff (S.mapHomologyIso ((evaluation Œπ C).obj i)),
    evaluation_obj_obj, Functor.isZero_iff]

lemma ComposableArrows.isComplex_iff_isComplex_evaluation
    {n : ‚Ñï} (S : ComposableArrows (Œπ ‚•§ C) n) :
    S.IsComplex ‚Üî ‚àÄ (i : Œπ), (S.apply ((evaluation Œπ C).obj i)).IsComplex := by
  constructor
  ¬∑ intro hS i
    constructor
    intro k hk
    exact ((evaluation Œπ C).obj i).congr_map (hS.zero k)
  ¬∑ intro hS
    constructor
    intro k hk
    ext i
    exact (hS i).zero k

lemma ComposableArrows.exact_iff_exact_evaluation
    {n : ‚Ñï} (S : ComposableArrows (Œπ ‚•§ C) n) :
    S.Exact ‚Üî ‚àÄ (i : Œπ), (S.apply ((evaluation Œπ C).obj i)).Exact := by
  constructor
  ¬∑ intro hS i
    exact
      { toIsComplex := S.isComplex_iff_isComplex_evaluation.1 hS.toIsComplex i
        exact := fun k hk =>
          (hS.sc k).exact_iff_exact_evaluation.1 (hS.exact k) i }
  ¬∑ intro hS
    exact
      { toIsComplex := S.isComplex_iff_isComplex_evaluation.2
          (fun i => (hS i).toIsComplex)
        exact := fun k hk => by
          rw [ShortComplex.exact_iff_exact_evaluation]
          intro i
          exact (hS i).exact k }

namespace ComposableArrows

section

variable {i j k : Œπ} (f : i ‚ü∂ j) (g : j ‚ü∂ k) (fg : i ‚ü∂ k) (h : f ‚â´ g = fg)

def twoŒ¥‚ÇÇToŒ¥‚ÇÅ :
    mk‚ÇÅ f ‚ü∂ mk‚ÇÅ fg :=
  homMk‚ÇÅ (ùüô _) g (by simpa using h)

@[simp]
lemma twoŒ¥‚ÇÇToŒ¥‚ÇÅ_app_zero :
    (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h).app 0 = ùüô _ := rfl

@[simp]
lemma twoŒ¥‚ÇÇToŒ¥‚ÇÅ_app_one :
    (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h).app 1 = g := rfl

def twoŒ¥‚ÇÅToŒ¥‚ÇÄ :
    mk‚ÇÅ fg ‚ü∂ mk‚ÇÅ g :=
  homMk‚ÇÅ f (ùüô _) (by simpa using h.symm)

@[simp]
lemma twoŒ¥‚ÇÅToŒ¥‚ÇÄ_app_zero :
    (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h).app 0 = f := rfl

@[simp]
lemma twoŒ¥‚ÇÅToŒ¥‚ÇÄ_app_one :
    (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h).app 1 = ùüô _ := rfl

end

section

variable {i j k l : Œπ} (f‚ÇÅ : i ‚ü∂ j) (f‚ÇÇ : j ‚ü∂ k) (f‚ÇÉ : k ‚ü∂ l)
    (f‚ÇÅ‚ÇÇ : i ‚ü∂ k) (h‚ÇÅ‚ÇÇ : f‚ÇÅ ‚â´ f‚ÇÇ = f‚ÇÅ‚ÇÇ)
    (f‚ÇÇ‚ÇÉ : j ‚ü∂ l) (h‚ÇÇ‚ÇÉ : f‚ÇÇ ‚â´ f‚ÇÉ = f‚ÇÇ‚ÇÉ)

def threeŒ¥‚ÇÉToŒ¥‚ÇÇ :
    mk‚ÇÇ f‚ÇÅ f‚ÇÇ ‚ü∂ mk‚ÇÇ f‚ÇÅ f‚ÇÇ‚ÇÉ :=
  homMk‚ÇÇ (ùüô _) (ùüô _) f‚ÇÉ (by simp) (by simpa using h‚ÇÇ‚ÇÉ)

@[simp]
lemma threeŒ¥‚ÇÉToŒ¥‚ÇÇ_app_zero :
    (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app 0 = ùüô _ := rfl

@[simp]
lemma threeŒ¥‚ÇÉToŒ¥‚ÇÇ_app_one :
    (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app 1 = ùüô _ := rfl

@[simp]
lemma threeŒ¥‚ÇÉToŒ¥‚ÇÇ_app_two :
    (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app 2 = f‚ÇÉ := rfl

/-- Variant of `threeŒ¥‚ÇÉToŒ¥‚ÇÇ_app_two`. -/
@[simp]
lemma threeŒ¥‚ÇÉToŒ¥‚ÇÇ_app_two' :
    (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app ‚ü®2, by linarith‚ü© = f‚ÇÉ := rfl

def threeŒ¥‚ÇÇToŒ¥‚ÇÅ :
    mk‚ÇÇ f‚ÇÅ f‚ÇÇ‚ÇÉ ‚ü∂ mk‚ÇÇ f‚ÇÅ‚ÇÇ f‚ÇÉ :=
  homMk‚ÇÇ (ùüô _) f‚ÇÇ (ùüô _) (by simpa using h‚ÇÅ‚ÇÇ) (by simpa using h‚ÇÇ‚ÇÉ.symm)

@[simp]
lemma threeŒ¥‚ÇÇToŒ¥‚ÇÅ_app_zero :
    (threeŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app 0 = ùüô _ := rfl

@[simp]
lemma threeŒ¥‚ÇÇToŒ¥‚ÇÅ_app_one :
    (threeŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app 1 = f‚ÇÇ := rfl

@[simp]
lemma threeŒ¥‚ÇÇToŒ¥‚ÇÅ_app_two :
    (threeŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app 2 = ùüô _ := rfl

/-- Variant of `threeŒ¥‚ÇÇToŒ¥‚ÇÅ_app_two`. -/
@[simp]
lemma threeŒ¥‚ÇÇToŒ¥‚ÇÅ_app_two' :
    (threeŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app ‚ü®2, by linarith‚ü© = ùüô _ := rfl

def threeŒ¥‚ÇÅToŒ¥‚ÇÄ :
    mk‚ÇÇ f‚ÇÅ‚ÇÇ f‚ÇÉ ‚ü∂ mk‚ÇÇ f‚ÇÇ f‚ÇÉ :=
  homMk‚ÇÇ f‚ÇÅ (ùüô _) (ùüô _) (by simpa using h‚ÇÅ‚ÇÇ.symm) (by simp; rfl)

@[simp]
lemma threeŒ¥‚ÇÅToŒ¥‚ÇÄ_app_zero :
    (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).app 0 = f‚ÇÅ := rfl

@[simp]
lemma threeŒ¥‚ÇÅToŒ¥‚ÇÄ_app_one :
    (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).app 1 = (ùüô _) := rfl

@[simp]
lemma threeŒ¥‚ÇÅToŒ¥‚ÇÄ_app_two :
    (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).app 2 = (ùüô _) := rfl

/-- Variant of `threeŒ¥‚ÇÅToŒ¥‚ÇÄ_app_two`. -/
@[simp]
lemma threeŒ¥‚ÇÅToŒ¥‚ÇÄ_app_two' :
    (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).app ‚ü®2, by linarith‚ü© = (ùüô _) := rfl

end

section

variable {i‚ÇÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ : Œπ} (f‚ÇÅ : i‚ÇÄ ‚ü∂ i‚ÇÅ) (f‚ÇÇ : i‚ÇÅ ‚ü∂ i‚ÇÇ) (f‚ÇÉ : i‚ÇÇ ‚ü∂ i‚ÇÉ)
  (f‚ÇÑ : i‚ÇÉ ‚ü∂ i‚ÇÑ)
  (f‚ÇÅ‚ÇÇ : i‚ÇÄ ‚ü∂ i‚ÇÇ) (h‚ÇÅ‚ÇÇ : f‚ÇÅ ‚â´ f‚ÇÇ = f‚ÇÅ‚ÇÇ)
  (f‚ÇÇ‚ÇÉ : i‚ÇÅ ‚ü∂ i‚ÇÉ) (h‚ÇÇ‚ÇÉ : f‚ÇÇ ‚â´ f‚ÇÉ = f‚ÇÇ‚ÇÉ)
  (f‚ÇÉ‚ÇÑ : i‚ÇÇ ‚ü∂ i‚ÇÑ) (h‚ÇÉ‚ÇÑ : f‚ÇÉ ‚â´ f‚ÇÑ = f‚ÇÉ‚ÇÑ)

def fourŒ¥‚ÇÑToŒ¥‚ÇÉ :
    mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ‚ÇÑ :=
  homMk‚ÇÉ (ùüô _) (ùüô _) (ùüô _) f‚ÇÑ (by simp) (by simp; rfl) (by simpa using h‚ÇÉ‚ÇÑ)

@[simp]
lemma fourŒ¥‚ÇÑToŒ¥‚ÇÉ_app_zero :
    (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ).app 0 = ùüô _ := rfl

@[simp]
lemma fourŒ¥‚ÇÑToŒ¥‚ÇÉ_app_one :
    (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ).app 1 = ùüô _ := rfl

@[simp]
lemma fourŒ¥‚ÇÑToŒ¥‚ÇÉ_app_two :
    (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ).app 2 = ùüô _ := rfl

/-- Variant of `fourŒ¥‚ÇÑToŒ¥‚ÇÉ_app_two`. -/
@[simp]
lemma fourŒ¥‚ÇÑToŒ¥‚ÇÉ_app_two' :
    (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ).app ‚ü®2, by linarith‚ü© = ùüô _ := rfl

@[simp]
lemma fourŒ¥‚ÇÑToŒ¥‚ÇÉ_app_three :
    (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ).app 3 = f‚ÇÑ := rfl

/-- Variant of `fourŒ¥‚ÇÑToŒ¥‚ÇÉ_app_three`. -/
@[simp]
lemma fourŒ¥‚ÇÑToŒ¥‚ÇÉ_app_three' :
    (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ).app ‚ü®3, by linarith‚ü© = f‚ÇÑ := rfl

def fourŒ¥‚ÇÇToŒ¥‚ÇÅ :
    mk‚ÇÉ f‚ÇÅ f‚ÇÇ‚ÇÉ f‚ÇÑ ‚ü∂ mk‚ÇÉ f‚ÇÅ‚ÇÇ f‚ÇÉ f‚ÇÑ :=
  homMk‚ÇÉ (ùüô _) f‚ÇÇ (ùüô _) (ùüô _) (by simpa using h‚ÇÅ‚ÇÇ) (by simpa using h‚ÇÇ‚ÇÉ.symm) (by simp; rfl)

@[simp]
lemma fourŒ¥‚ÇÇToŒ¥‚ÇÅ_app_zero :
    (fourŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app 0 = ùüô _ := rfl

@[simp]
lemma fourŒ¥‚ÇÇToŒ¥‚ÇÅ_app_one :
    (fourŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app 1 = f‚ÇÇ := rfl

@[simp]
lemma fourŒ¥‚ÇÇToŒ¥‚ÇÅ_app_two :
    (fourŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app 2 = ùüô _ := rfl

/-- Variant of `fourŒ¥‚ÇÇToŒ¥‚ÇÅ_app_two`. -/
@[simp]
lemma fourŒ¥‚ÇÇToŒ¥‚ÇÅ_app_two' :
    (fourŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app ‚ü®2, by linarith‚ü© = ùüô _ := rfl

@[simp]
lemma fourŒ¥‚ÇÇToŒ¥‚ÇÅ_app_three :
    (fourŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app 3 = ùüô _ := rfl

/-- Variant of `fourŒ¥‚ÇÇToŒ¥‚ÇÅ_app_three`. -/
@[simp]
lemma fourŒ¥‚ÇÇToŒ¥‚ÇÅ_app_three' :
    (fourŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).app ‚ü®3, by linarith‚ü© = ùüô _ := rfl

def fourŒ¥‚ÇÅToŒ¥‚ÇÄ :
    mk‚ÇÉ f‚ÇÅ‚ÇÇ f‚ÇÉ f‚ÇÑ ‚ü∂ mk‚ÇÉ f‚ÇÇ f‚ÇÉ f‚ÇÑ :=
  homMk‚ÇÉ f‚ÇÅ (ùüô _) (ùüô _) (ùüô _) (by simpa using h‚ÇÅ‚ÇÇ.symm) (by simp; rfl) (by simp; rfl)

@[simp]
lemma fourŒ¥‚ÇÅToŒ¥‚ÇÄ_app_zero :
    (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).app 0 = f‚ÇÅ := rfl

@[simp]
lemma fourŒ¥‚ÇÅToŒ¥‚ÇÄ_app_one :
    (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).app 1 = ùüô _ := rfl

@[simp]
lemma fourŒ¥‚ÇÅToŒ¥‚ÇÄ_app_two :
    (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).app 2 = ùüô _ := rfl

/-- Variant of `fourŒ¥‚ÇÅToŒ¥‚ÇÄ_app_two`. -/
@[simp]
lemma fourŒ¥‚ÇÅToŒ¥‚ÇÄ_app_two' :
    (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).app ‚ü®2, by linarith‚ü© = ùüô _ := rfl

@[simp]
lemma fourŒ¥‚ÇÅToŒ¥‚ÇÄ_app_three :
    (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).app 3 = ùüô _ := rfl

/-- Variant of `fourŒ¥‚ÇÅToŒ¥‚ÇÄ_app_three`. -/
@[simp]
lemma fourŒ¥‚ÇÅToŒ¥‚ÇÄ_app_three' :
    (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).app ‚ü®3, by linarith‚ü© = ùüô _ := rfl

end

section

omit [Abelian C]

lemma isIso_iff {n : ‚Ñï} {S‚ÇÅ S‚ÇÇ : ComposableArrows C n} (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
    IsIso f ‚Üî ‚àÄ (i : Fin (n + 1)), IsIso (f.app i) := by
  constructor
  ¬∑ intro hf i
    infer_instance
  ¬∑ intro h
    apply NatIso.isIso_of_isIso_app

lemma isIso_iff‚ÇÄ {S‚ÇÅ S‚ÇÇ : ComposableArrows C 0} (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
    IsIso f ‚Üî IsIso (f.app 0) := by
  rw [isIso_iff]
  constructor
  ¬∑ intro h
    exact h 0
  ¬∑ rintro h‚ÇÄ i
    fin_cases i; assumption

lemma isIso_iff‚ÇÅ {S‚ÇÅ S‚ÇÇ : ComposableArrows C 1} (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
    IsIso f ‚Üî IsIso (f.app 0) ‚àß IsIso (f.app 1) := by
  rw [isIso_iff]
  constructor
  ¬∑ intro h
    exact ‚ü®h 0, h 1‚ü©
  ¬∑ rintro ‚ü®h‚ÇÄ, h‚ÇÅ‚ü© i
    fin_cases i <;> assumption

lemma isIso_iff‚ÇÇ {S‚ÇÅ S‚ÇÇ : ComposableArrows C 2} (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
    IsIso f ‚Üî IsIso (f.app 0) ‚àß IsIso (f.app 1) ‚àß IsIso (f.app 2) := by
  rw [isIso_iff]
  constructor
  ¬∑ intro h
    exact ‚ü®h 0, h 1, h 2‚ü©
  ¬∑ rintro ‚ü®h‚ÇÄ, h‚ÇÅ, h‚ÇÇ‚ü© i
    fin_cases i <;> assumption

end

end ComposableArrows

end CategoryTheory
