/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.SpectralObject.Misc
import Mathlib.Algebra.Homology.ExactSequenceFour

/-!
# Spectral objects in abelian categories

-/

namespace CategoryTheory

open Category Limits

namespace Abelian

section

variable (C Œπ : Type*) [Category C] [Category Œπ] [Abelian C]

open ComposableArrows

structure SpectralObject where
  H (n : ‚Ñ§) : ComposableArrows Œπ 1 ‚•§ C
  Œ¥' (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    functorArrows Œπ 1 2 2 ‚ãô H n‚ÇÄ ‚ü∂ functorArrows Œπ 0 1 2 ‚ãô H n‚ÇÅ
  exact‚ÇÅ' (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (D : ComposableArrows Œπ 2) :
    (mk‚ÇÇ ((Œ¥' n‚ÇÄ n‚ÇÅ h).app D) ((H n‚ÇÅ).map ((mapFunctorArrows Œπ 0 1 0 2 2).app D))).Exact
  exact‚ÇÇ' (n : ‚Ñ§) (D : ComposableArrows Œπ 2) :
    (mk‚ÇÇ ((H n).map ((mapFunctorArrows Œπ 0 1 0 2 2).app D))
      ((H n).map ((mapFunctorArrows Œπ 0 2 1 2 2).app D))).Exact
  exact‚ÇÉ' (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (D : ComposableArrows Œπ 2) :
    (mk‚ÇÇ ((H n‚ÇÄ).map ((mapFunctorArrows Œπ 0 2 1 2 2).app D)) ((Œ¥' n‚ÇÄ n‚ÇÅ h).app D)).Exact

namespace SpectralObject

variable {C Œπ}
variable (X : SpectralObject C Œπ)

section

variable (n‚ÇÄ : ‚Ñ§) {i j k : Œπ} (f : i ‚ü∂ j) (g : j ‚ü∂ k)
  (fg : i ‚ü∂ k) (h : f ‚â´ g = fg)

@[simp]
noncomputable def iso‚ÇÇ :
    mk‚ÇÇ ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h)) ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h)) ‚âÖ
        (mk‚ÇÇ ((X.H n‚ÇÄ).map ((mapFunctorArrows Œπ 0 1 0 2 2).app (mk‚ÇÇ f g)))
      ((X.H n‚ÇÄ).map ((mapFunctorArrows Œπ 0 2 1 2 2).app (mk‚ÇÇ f g)))) :=
  isoMk‚ÇÇ (Iso.refl _) ((X.H n‚ÇÄ).mapIso
    (isoMk‚ÇÅ (Iso.refl _) (Iso.refl _) (by simpa using h.symm))) (Iso.refl _) (by
      dsimp [Precomp.map]
      simp only [‚Üê Functor.map_comp, id_comp]
      congr 1
      ext <;> simp) (by
      dsimp [Precomp.map]
      simp only [‚Üê Functor.map_comp, comp_id]
      congr 1
      ext <;> simp)

@[reassoc (attr := simp)]
lemma zero‚ÇÇ (fg : i ‚ü∂ k) (h : f ‚â´ g = fg) :
    (X.H n‚ÇÄ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h) ‚â´
      (X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h) = 0 :=
  (exact_of_iso (X.iso‚ÇÇ n‚ÇÄ f g fg h).symm (X.exact‚ÇÇ' n‚ÇÄ (mk‚ÇÇ f g))).zero 0

@[simps]
def sc‚ÇÇ : ShortComplex C :=
  ShortComplex.mk _ _ (X.zero‚ÇÇ n‚ÇÄ f g fg h)

lemma exact‚ÇÇ : (X.sc‚ÇÇ n‚ÇÄ f g fg h).Exact :=
  (exact_of_iso (X.iso‚ÇÇ n‚ÇÄ f g fg h).symm (X.exact‚ÇÇ' n‚ÇÄ (mk‚ÇÇ f g))).exact 0

end

section

variable (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) {i j k : Œπ} (f : i ‚ü∂ j) (g : j ‚ü∂ k)

def Œ¥ : (X.H n‚ÇÄ).obj (mk‚ÇÅ g) ‚ü∂ (X.H n‚ÇÅ).obj (mk‚ÇÅ f) :=
  (X.Œ¥' n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (mk‚ÇÇ f g)

@[reassoc]
lemma Œ¥_naturality {i' j' k' : Œπ} (f' : i' ‚ü∂ j') (g' : j' ‚ü∂ k')
    (Œ± : mk‚ÇÅ f ‚ü∂ mk‚ÇÅ f') (Œ≤ : mk‚ÇÅ g ‚ü∂ mk‚ÇÅ g') (hŒ±Œ≤ : Œ±.app 1 = Œ≤.app 0):
    (X.H n‚ÇÄ).map Œ≤ ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g' = X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ (X.H n‚ÇÅ).map Œ± := by
  let œÜ : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f' g' := homMk‚ÇÇ (Œ±.app 0) (Œ±.app 1) (Œ≤.app 1) (naturality' Œ± 0 1)
    (by simpa only [hŒ±Œ≤] using naturality' Œ≤ 0 1)
  have h := (X.Œ¥' n‚ÇÄ n‚ÇÅ hn‚ÇÅ).naturality œÜ
  dsimp at h
  convert h
  ¬∑ ext
    ¬∑ exact hŒ±Œ≤.symm
    ¬∑ rfl
  ¬∑ ext <;> rfl

section

variable (fg : i ‚ü∂ k) (h : f ‚â´ g = fg)

@[simp]
noncomputable def iso‚ÇÅ :
    mk‚ÇÇ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g) ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h)) ‚âÖ
      mk‚ÇÇ ((X.Œ¥' n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (mk‚ÇÇ f g)) (((X.H n‚ÇÅ).map
        ((mapFunctorArrows Œπ 0 1 0 2 2).app (mk‚ÇÇ f g)))) :=
  isoMk‚ÇÇ (Iso.refl _) (Iso.refl _) ((X.H n‚ÇÅ).mapIso
    (isoMk‚ÇÅ (Iso.refl _) (Iso.refl _) (by simpa using h.symm)))
    (by aesop_cat) (by
      dsimp [Precomp.map, twoŒ¥‚ÇÇToŒ¥‚ÇÅ]
      simp only [‚Üê Functor.map_comp, id_comp]
      congr 1
      ext <;> simp)

@[reassoc (attr := simp)]
lemma zero‚ÇÅ :
    X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´
      (X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h) = 0 :=
  (exact_of_iso (X.iso‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).symm (X.exact‚ÇÅ' n‚ÇÄ n‚ÇÅ hn‚ÇÅ (mk‚ÇÇ f g))).zero 0

@[simps]
def sc‚ÇÅ : ShortComplex C :=
  ShortComplex.mk _ _ (X.zero‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h)

lemma exact‚ÇÅ : (X.sc‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).Exact :=
  (exact_of_iso (X.iso‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).symm (X.exact‚ÇÅ' n‚ÇÄ n‚ÇÅ hn‚ÇÅ (mk‚ÇÇ f g))).exact 0

@[simp]
noncomputable def iso‚ÇÉ :
    mk‚ÇÇ ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h))
        (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g) ‚âÖ
      mk‚ÇÇ ((X.H n‚ÇÄ).map ((mapFunctorArrows Œπ 0 2 1 2 2).app (mk‚ÇÇ f g)))
        ((X.Œ¥' n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (mk‚ÇÇ f g)) :=
  isoMk‚ÇÇ ((X.H n‚ÇÄ).mapIso (isoMk‚ÇÅ (Iso.refl _) (Iso.refl _) (by simpa using h.symm)))
    (Iso.refl _) (Iso.refl _) (by
      dsimp
      rw [comp_id, ‚Üê Functor.map_comp]
      congr 1
      aesop_cat) (by aesop_cat)

@[reassoc (attr := simp)]
lemma zero‚ÇÉ :
    (X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h) ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g = 0 :=
  (exact_of_iso (X.iso‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).symm (X.exact‚ÇÉ' n‚ÇÄ n‚ÇÅ hn‚ÇÅ (mk‚ÇÇ f g))).zero 0

@[simps]
def sc‚ÇÉ : ShortComplex C :=
  ShortComplex.mk _ _ (X.zero‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h)

lemma exact‚ÇÉ : (X.sc‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).Exact :=
  (exact_of_iso (X.iso‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).symm (X.exact‚ÇÉ' n‚ÇÄ n‚ÇÅ hn‚ÇÅ (mk‚ÇÇ f g))).exact 0

@[simp]
noncomputable def composableArrows‚ÇÖ :
    ComposableArrows C 5 :=
  mk‚ÇÖ ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h)) ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h))
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g) ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h))
    ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h))

lemma composableArrows‚ÇÖ_exact :
    (X.composableArrows‚ÇÖ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).Exact := by
  subst h
  exact exact_of_Œ¥‚ÇÄ (X.exact‚ÇÇ n‚ÇÄ f g _ rfl).exact_toComposableArrows
     (exact_of_Œ¥‚ÇÄ (X.exact‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g _ rfl).exact_toComposableArrows
        (exact_of_Œ¥‚ÇÄ (X.exact‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g _ rfl).exact_toComposableArrows
          ((X.exact‚ÇÇ n‚ÇÅ f g _ rfl).exact_toComposableArrows)))

end

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
    {i j k l : Œπ} (f : i ‚ü∂ j) (g : j ‚ü∂ k) (h : k ‚ü∂ l)

@[reassoc (attr := simp)]
lemma Œ¥_Œ¥ : X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ g h ‚â´ X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f g = 0 := by
  have eq := X.Œ¥_naturality n‚ÇÅ n‚ÇÇ hn‚ÇÇ f g f (g ‚â´ h) (ùüô _) (twoŒ¥‚ÇÇToŒ¥‚ÇÅ g h _ rfl) rfl
  rw [Functor.map_id, comp_id] at eq
  rw [‚Üê eq, X.zero‚ÇÅ_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ g h _ rfl, zero_comp]

end

section

variable (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ)
  {i j k : Œπ} (f : i ‚ü∂ j) (g : j ‚ü∂ k)
  {i' j' k' : Œπ} (f' : i' ‚ü∂ j') (g' : j' ‚ü∂ k')
  {i'' j'' k'' : Œπ} (f'' : i'' ‚ü∂ j'') (g'' : j'' ‚ü∂ k'')

noncomputable def cycles : C := kernel (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g)

noncomputable def opcycles : C := cokernel (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g)

noncomputable def iCycles :
    X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚ü∂ (X.H n‚ÇÄ).obj (mk‚ÇÅ g) :=
  kernel.Œπ _

noncomputable def pOpcycles :
    (X.H n‚ÇÅ).obj (mk‚ÇÅ f) ‚ü∂ X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g :=
  cokernel.œÄ _

instance : Mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g) := by
  dsimp [iCycles]
  infer_instance

instance : Epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g) := by
  dsimp [pOpcycles]
  infer_instance

@[reassoc (attr := simp)]
lemma iCycles_Œ¥ : X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g = 0 := by
  simp [iCycles]

@[reassoc (attr := simp)]
lemma Œ¥_pOpcycles : X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g = 0 := by
  simp [pOpcycles]

@[simps]
noncomputable def kernelSequenceCycles : ShortComplex C :=
  ShortComplex.mk _ _ (X.iCycles_Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g)

@[simps]
noncomputable def cokernelSequenceOpcycles : ShortComplex C :=
  ShortComplex.mk _ _ (X.Œ¥_pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g)

instance : Mono (X.kernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g).f := by
  dsimp
  infer_instance

instance : Epi (X.cokernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g).g := by
  dsimp
  infer_instance

noncomputable def kernelSequenceCycles_exact :
    (X.kernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g).Exact :=
  ShortComplex.kernelSequence_exact _

noncomputable def cokernelSequenceOpcycles_exact :
    (X.cokernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g).Exact :=
  ShortComplex.cokernelSequence_exact _

section

variable {A : C} (x : A ‚ü∂ (X.H n‚ÇÄ).obj (mk‚ÇÅ g)) (hx : x ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g = 0)

noncomputable def liftCycles :
    A ‚ü∂ X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g :=
  kernel.lift _ x hx

@[reassoc (attr := simp)]
lemma liftCycles_i : X.liftCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g x hx ‚â´ X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g = x := by
  apply kernel.lift_Œπ

end

section

variable {A : C} (x : (X.H n‚ÇÅ).obj (mk‚ÇÅ f) ‚ü∂ A) (hx : X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ x = 0)

noncomputable def descOpcycles :
    X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚ü∂ A :=
  cokernel.desc _ x hx

@[reassoc (attr := simp)]
lemma p_descOpcycles : X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ X.descOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g x hx = x := by
  apply cokernel.œÄ_desc

end

noncomputable def cyclesMap (Œ± : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f' g') :
    X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚ü∂ X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g' :=
  kernel.lift _ (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´
      (X.H n‚ÇÄ).map (homMk‚ÇÅ (Œ±.app 1) (Œ±.app 2) (naturality' Œ± 1 2))) (by
      rw [assoc, X.Œ¥_naturality n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f' g'
        (homMk‚ÇÅ (Œ±.app 0) (Œ±.app 1) (naturality' Œ± 0 1))
          (homMk‚ÇÅ (Œ±.app 1) (Œ±.app 2) (naturality' Œ± 1 2)) rfl, iCycles_Œ¥_assoc, zero_comp])

@[reassoc]
lemma cyclesMap_i (Œ± : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f' g') (Œ≤ : mk‚ÇÅ g ‚ü∂ mk‚ÇÅ g')
    (hŒ≤ : Œ≤ = homMk‚ÇÅ (Œ±.app 1) (Œ±.app 2) (naturality' Œ± 1 2)) :
    X.cyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f' g' Œ± ‚â´ X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g' =
      X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ (X.H n‚ÇÄ).map Œ≤ := by
  subst hŒ≤
  apply kernel.lift_Œπ

@[simp]
lemma cyclesMap_id :
    X.cyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f g (ùüô _) = ùüô _ := by
  rw [‚Üê cancel_mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g),
    X.cyclesMap_i n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f g (ùüô _) (ùüô _) (by aesop_cat),
    Functor.map_id, comp_id, id_comp]

lemma cyclesMap_comp (Œ± : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f' g') (Œ±' : mk‚ÇÇ f' g' ‚ü∂ mk‚ÇÇ f'' g'')
    (Œ±'' : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f'' g'') (h : Œ± ‚â´ Œ±' = Œ±'') :
    X.cyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f' g' Œ± ‚â´ X.cyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g' f'' g'' Œ±' =
      X.cyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f'' g'' Œ±'' := by
  subst h
  rw [‚Üê cancel_mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f'' g''), assoc,
    X.cyclesMap_i n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g' f'' g'' Œ±' _ rfl,
    X.cyclesMap_i_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f' g' Œ± _ rfl,
    ‚Üê Functor.map_comp]
  symm
  apply X.cyclesMap_i
  aesop_cat

noncomputable def opcyclesMap (Œ± : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f' g') :
    X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚ü∂ X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g' :=
  cokernel.desc _
    ((X.H n‚ÇÅ).map (homMk‚ÇÅ (by exact Œ±.app 0) (by exact Œ±.app 1) (by exact naturality' Œ± 0 1)) ‚â´
      X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g') (by
        rw [‚Üê X.Œ¥_naturality_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f' g'
          (homMk‚ÇÅ (Œ±.app 0) (Œ±.app 1) (naturality' Œ± 0 1))
          (homMk‚ÇÅ (Œ±.app 1) (Œ±.app 2) (naturality' Œ± 1 2)) rfl, Œ¥_pOpcycles, comp_zero])

@[reassoc]
lemma p_opcyclesMap (Œ± : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f' g') (Œ≤ : mk‚ÇÅ f ‚ü∂ mk‚ÇÅ f')
    (hŒ≤ : Œ≤ = homMk‚ÇÅ (Œ±.app 0) (Œ±.app 1) (naturality' Œ± 0 1)) :
    X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f' g' Œ± =
      (X.H n‚ÇÅ).map Œ≤ ‚â´ X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g' := by
  subst hŒ≤
  apply cokernel.œÄ_desc

@[simp]
lemma opcyclesMap_id :
    X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f g (ùüô _) = ùüô _ := by
  rw [‚Üê cancel_epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g),
    X.p_opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f g (ùüô _) (ùüô _) (by aesop_cat),
    Functor.map_id, comp_id, id_comp]

lemma opcyclesMap_comp (Œ± : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f' g') (Œ±' : mk‚ÇÇ f' g' ‚ü∂ mk‚ÇÇ f'' g'')
    (Œ±'' : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f'' g'') (h : Œ± ‚â´ Œ±' = Œ±'') :
    X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f' g' Œ± ‚â´ X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g' f'' g'' Œ±' =
      X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f'' g'' Œ±'' := by
  subst h
  rw [‚Üê cancel_epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g),
    X.p_opcyclesMap_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f' g' Œ± _ rfl,
    X.p_opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g' f'' g'' Œ±' _ rfl,
    ‚Üê Functor.map_comp_assoc]
  symm
  apply X.p_opcyclesMap
  aesop_cat

variable (fg : i ‚ü∂ k) (h : f ‚â´ g = fg) (fg' : i' ‚ü∂ k') (h' : f' ‚â´ g' = fg')

noncomputable def cokernelIsoCycles :
    cokernel ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h)) ‚âÖ X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g :=
  (X.composableArrows‚ÇÖ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).cokerIsoKer 0

@[reassoc (attr := simp)]
lemma cokernelIsoCycles_hom_fac :
    cokernel.œÄ _ ‚â´ (X.cokernelIsoCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).hom ‚â´
      X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g = (X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h) :=
  (X.composableArrows‚ÇÖ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).cokerIsoKer_hom_fac 0

noncomputable def opcyclesIsoKernel :
    X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚âÖ kernel ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h)) :=
  (X.composableArrows‚ÇÖ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).cokerIsoKer 2

@[reassoc (attr := simp)]
lemma opcyclesIsoKernel_hom_fac :
    X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ (X.opcyclesIsoKernel n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).hom ‚â´
      kernel.Œπ _ = (X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h) :=
  (X.composableArrows‚ÇÖ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).cokerIsoKer_hom_fac 2

noncomputable def toCycles : (X.H n‚ÇÄ).obj (mk‚ÇÅ fg) ‚ü∂ X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g :=
  kernel.lift _ ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h)) (by simp)

instance : Epi (X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h) :=
  (ShortComplex.exact_iff_epi_kernel_lift _).1 (X.exact‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h)

@[reassoc (attr := simp)]
lemma toCycles_i :
    X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h ‚â´ X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g =
      (X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h) := by
  apply kernel.lift_Œπ

@[reassoc]
lemma toCycles_cyclesMap (Œ± : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f' g') (Œ≤ : mk‚ÇÅ fg ‚ü∂ mk‚ÇÅ fg')
    (hŒ≤‚ÇÄ : Œ≤.app 0 = Œ±.app 0) (hŒ≤‚ÇÅ : Œ≤.app 1 = Œ±.app 2) :
    X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h ‚â´ X.cyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f' g' Œ± =
      (X.H n‚ÇÄ).map Œ≤ ‚â´ X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g' fg' h' := by
  rw [‚Üê cancel_mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g'), assoc, assoc, toCycles_i,
    X.cyclesMap_i n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f' g' Œ± (homMk‚ÇÅ (Œ±.app 1) (Œ±.app 2) (naturality' Œ± 1 2)) rfl,
    toCycles_i_assoc, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp]
  congr 1
  ext
  ¬∑ dsimp
    rw [hŒ≤‚ÇÄ]
    exact naturality' Œ± 0 1
  ¬∑ dsimp
    erw [hŒ≤‚ÇÅ, comp_id, id_comp]

noncomputable def fromOpcycles :
    X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚ü∂ (X.H n‚ÇÅ).obj (mk‚ÇÅ fg) :=
  cokernel.desc _ ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h)) (by simp)

instance : Mono (X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h) :=
  (ShortComplex.exact_iff_mono_cokernel_desc _).1 (X.exact‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h)

@[reassoc (attr := simp)]
lemma p_fromOpcycles :
    X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h =
      (X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h) := by
  apply cokernel.œÄ_desc

@[reassoc]
lemma opcyclesMap_fromOpcycles (Œ± : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f' g') (Œ≤ : mk‚ÇÅ fg ‚ü∂ mk‚ÇÅ fg')
    (hŒ≤‚ÇÄ : Œ≤.app 0 = Œ±.app 0) (hŒ≤‚ÇÅ : Œ≤.app 1 = Œ±.app 2) :
    X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f' g' Œ± ‚â´ X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g' fg' h' =
      X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h ‚â´ (X.H n‚ÇÅ).map Œ≤ := by
  rw [‚Üê cancel_epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g), p_fromOpcycles_assoc,
    X.p_opcyclesMap_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g f' g' Œ± (homMk‚ÇÅ (Œ±.app 0) (Œ±.app 1)
      (naturality' Œ± 0 1)) rfl,
    p_fromOpcycles, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp]
  congr 1
  ext
  ¬∑ dsimp
    erw [hŒ≤‚ÇÄ, id_comp, comp_id]
  ¬∑ dsimp
    rw [hŒ≤‚ÇÅ]
    exact (naturality' Œ± 1 2).symm

@[reassoc (attr := simp)]
lemma H_map_twoŒ¥‚ÇÇToŒ¥‚ÇÅ_toCycles :
    (X.H n‚ÇÄ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h) ‚â´ X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h = 0 := by
  rw [‚Üê cancel_mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g), assoc, toCycles_i, zero‚ÇÇ, zero_comp]

@[reassoc (attr := simp)]
lemma fromOpcycles_H_map_twoŒ¥‚ÇÅToŒ¥‚ÇÄ :
    X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h ‚â´ (X.H n‚ÇÅ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h) = 0 := by
  rw [‚Üê cancel_epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g), p_fromOpcycles_assoc, zero‚ÇÇ, comp_zero]

@[simps]
noncomputable def cokernelSequenceCycles : ShortComplex C :=
  ShortComplex.mk _ _ (X.H_map_twoŒ¥‚ÇÇToŒ¥‚ÇÅ_toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h)

@[simps]
noncomputable def kernelSequenceOpcycles : ShortComplex C :=
  ShortComplex.mk _ _ (X.fromOpcycles_H_map_twoŒ¥‚ÇÅToŒ¥‚ÇÄ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h)

instance : Epi (X.cokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).g := by
  dsimp
  infer_instance

instance : Mono (X.kernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).f := by
  dsimp
  infer_instance

lemma cokernelSequenceCycles_exact :
    (X.cokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).Exact := by
  apply ShortComplex.exact_of_g_is_cokernel
  exact IsColimit.ofIsoColimit (cokernelIsCokernel _)
    (Cofork.ext (X.cokernelIsoCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h) (by
      dsimp
      simp only [‚Üê cancel_mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g), assoc,
        cokernelIsoCycles_hom_fac, toCycles_i]))

lemma kernelSequenceOpcycles_exact :
    (X.kernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).Exact := by
  apply ShortComplex.exact_of_f_is_kernel
  exact IsLimit.ofIsoLimit (kernelIsKernel _)
    (Iso.symm (Fork.ext (X.opcyclesIsoKernel n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h) (by
      dsimp
      simp only [‚Üê cancel_epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g),
        opcyclesIsoKernel_hom_fac, p_fromOpcycles])))

section

variable {A : C} (x : (X.H n‚ÇÄ).obj (mk‚ÇÅ fg) ‚ü∂ A)
  (hx : (X.H n‚ÇÄ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h) ‚â´ x = 0)

noncomputable def descCycles :
    X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚ü∂ A :=
  (X.cokernelSequenceCycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).desc x hx

@[reassoc (attr := simp)]
lemma toCycles_descCycles :
    X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h ‚â´ X.descCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h x hx = x :=
  (X.cokernelSequenceCycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).g_desc x hx

end

section

variable {A : C} (x : A ‚ü∂ (X.H n‚ÇÅ).obj (mk‚ÇÅ fg))
  (hx : x ‚â´ (X.H n‚ÇÅ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h) = 0)

noncomputable def liftOpcycles :
    A ‚ü∂ X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g :=
  (X.kernelSequenceOpcycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).lift x hx

@[reassoc (attr := simp)]
lemma liftOpcycles_fromOpcycles :
    X.liftOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h x hx ‚â´ X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h = x :=
  (X.kernelSequenceOpcycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).lift_f x hx

end

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
  {i j k l : Œπ} (f‚ÇÅ : i ‚ü∂ j) (f‚ÇÇ : j ‚ü∂ k) (f‚ÇÉ : k ‚ü∂ l)

@[simps]
def shortComplexE : ShortComplex C where
  X‚ÇÅ := (X.H n‚ÇÄ).obj (mk‚ÇÅ f‚ÇÉ)
  X‚ÇÇ := (X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÇ)
  X‚ÇÉ := (X.H n‚ÇÇ).obj (mk‚ÇÅ f‚ÇÅ)
  f := X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ
  g := X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ
  zero := by simp

noncomputable def E : C := (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).homology

lemma isZero_E_of_isZero_H (h : IsZero ((X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÇ))) :
    IsZero (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ) := by
  erw [‚Üê (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).exact_iff_isZero_homology]
  exact ShortComplex.exact_of_isZero_X‚ÇÇ _ h

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
  {i j k l : Œπ}
  {i j k l : Œπ} (f‚ÇÅ : i ‚ü∂ j) (f‚ÇÇ : j ‚ü∂ k) (f‚ÇÉ : k ‚ü∂ l)
  {i' j' k' l' : Œπ} (f‚ÇÅ' : i' ‚ü∂ j') (f‚ÇÇ' : j' ‚ü∂ k') (f‚ÇÉ' : k' ‚ü∂ l')
  {i'' j'' k'' l'' : Œπ} (f‚ÇÅ'' : i'' ‚ü∂ j'') (f‚ÇÇ'' : j'' ‚ü∂ k'') (f‚ÇÉ'' : k'' ‚ü∂ l'')
  (Œ± : mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ mk‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ')
  (Œ≤ : mk‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' ‚ü∂ mk‚ÇÉ f‚ÇÅ'' f‚ÇÇ'' f‚ÇÉ'')
  (Œ≥ : mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ mk‚ÇÉ f‚ÇÅ'' f‚ÇÇ'' f‚ÇÉ'')

@[simps]
def shortComplexEMap :
    X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂
      X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' where
  œÑ‚ÇÅ := (X.H n‚ÇÄ).map (homMk‚ÇÅ (Œ±.app 2) (Œ±.app 3) (naturality' Œ± 2 3))
  œÑ‚ÇÇ := (X.H n‚ÇÅ).map (homMk‚ÇÅ (Œ±.app 1) (Œ±.app 2) (naturality' Œ± 1 2))
  œÑ‚ÇÉ := (X.H n‚ÇÇ).map (homMk‚ÇÅ (Œ±.app 0) (Œ±.app 1) (naturality' Œ± 0 1))
  comm‚ÇÅ‚ÇÇ := by
    apply Œ¥_naturality
    rfl
  comm‚ÇÇ‚ÇÉ := by
    apply Œ¥_naturality
    rfl

/-- Variant of `shortComplexEMap_id`. -/
lemma shortComplexEMap_id' (Œ± : mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ) (hŒ± : Œ± = ùüô _) :
    X.shortComplexEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ Œ± = ùüô _ := by
  subst hŒ±
  ext
  all_goals
    dsimp
    convert (X.H _).map_id _
    aesop_cat

@[simp]
lemma shortComplexEMap_id :
    X.shortComplexEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ (ùüô _) = ùüô _ := by
  apply shortComplexEMap_id'
  rfl

/-- Variant of `shortComplexEMap_comp`. -/
lemma shortComplexEMap_comp' (h : Œ± ‚â´ Œ≤  = Œ≥) :
    X.shortComplexEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ± ‚â´
      X.shortComplexEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' f‚ÇÅ'' f‚ÇÇ'' f‚ÇÉ'' Œ≤ =
        X.shortComplexEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ'' f‚ÇÇ'' f‚ÇÉ'' Œ≥ := by
  subst h
  ext
  all_goals
    dsimp
    rw [‚Üê Functor.map_comp]
    congr 1
    aesop_cat

@[reassoc (attr := simp)]
lemma shortComplexEMap_comp :
    X.shortComplexEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ'' f‚ÇÇ'' f‚ÇÉ'' (Œ± ‚â´ Œ≤) =
    X.shortComplexEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ± ‚â´
      X.shortComplexEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' f‚ÇÅ'' f‚ÇÇ'' f‚ÇÉ'' Œ≤ := by
  symm
  apply shortComplexEMap_comp'
  rfl

noncomputable def EMap :
    X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' :=
  ShortComplex.homologyMap (X.shortComplexEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ±)

@[simp]
lemma EMap_id :
    X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ (ùüô _) = ùüô _ := by
  dsimp only [EMap]
  rw [shortComplexEMap_id, ShortComplex.homologyMap_id]
  rfl

/-- Variant of `EMap_id`. -/
lemma EMap_id' (Œ± : mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ) (hŒ± : Œ± = ùüô _) :
    X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ Œ± = ùüô _ := by
  subst hŒ±
  simp only [EMap_id]

@[reassoc (attr := simp)]
lemma EMap_comp :
    X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ'' f‚ÇÇ'' f‚ÇÉ'' (Œ± ‚â´ Œ≤) =
    X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ± ‚â´
      X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' f‚ÇÅ'' f‚ÇÇ'' f‚ÇÉ'' Œ≤ := by
  dsimp only [EMap]
  rw [shortComplexEMap_comp, ShortComplex.homologyMap_comp]

/-- Variant of `EMap_comp`. -/
lemma EMap_comp' (h : Œ± ‚â´ Œ≤  = Œ≥) :
    X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ± ‚â´
      X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' f‚ÇÅ'' f‚ÇÇ'' f‚ÇÉ'' Œ≤ =
        X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ'' f‚ÇÇ'' f‚ÇÉ'' Œ≥ := by
  subst h
  simp only [EMap_comp]

lemma isIso_EMap
    (h‚ÇÄ : IsIso ((X.H n‚ÇÄ).map ((functorArrows Œπ 2 3 3).map Œ±)))
    (h‚ÇÅ : IsIso ((X.H n‚ÇÅ).map ((functorArrows Œπ 1 2 3).map Œ±)))
    (h‚ÇÇ : IsIso ((X.H n‚ÇÇ).map ((functorArrows Œπ 0 1 3).map Œ±))) :
    IsIso (X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ±) := by
  have : IsIso (shortComplexEMap X n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' Œ±) :=
    @ShortComplex.isIso_of_isIso _ _ _ _ _ _ h‚ÇÄ h‚ÇÅ h‚ÇÇ
  dsimp [EMap]
  infer_instance

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
  {i j k l : Œπ}
  {i j k l : Œπ} (f‚ÇÅ : i ‚ü∂ j) (f‚ÇÇ : j ‚ü∂ k) (f‚ÇÉ : k ‚ü∂ l)
  {i' j' k' l' : Œπ} (f‚ÇÅ' : i' ‚ü∂ j') (f‚ÇÇ' : j' ‚ü∂ k') (f‚ÇÉ' : k' ‚ü∂ l')

lemma EMap_eqToHom (h : mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ = mk‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ') :
    X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ' f‚ÇÉ' (eqToHom h) = eqToHom (by
      obtain rfl : i = i' := Functor.congr_obj h 0
      obtain rfl : j = j' := Functor.congr_obj h 1
      obtain rfl : k = k' := Functor.congr_obj h 2
      obtain rfl : l = l' := Functor.congr_obj h 3
      have h‚ÇÅ := naturality' (eqToHom h) 0 1
      have h‚ÇÇ := naturality' (eqToHom h) 1 2
      have h‚ÇÉ := naturality' (eqToHom h) 2 3
      dsimp at h‚ÇÅ h‚ÇÇ h‚ÇÉ
      erw [eqToHom_app, eqToHom_app, eqToHom_refl, eqToHom_refl, id_comp, comp_id] at h‚ÇÅ h‚ÇÇ h‚ÇÉ
      subst h‚ÇÅ h‚ÇÇ h‚ÇÉ
      rfl) := by
  obtain rfl : i = i' := Functor.congr_obj h 0
  obtain rfl : j = j' := Functor.congr_obj h 1
  obtain rfl : k = k' := Functor.congr_obj h 2
  obtain rfl : l = l' := Functor.congr_obj h 3
  have h‚ÇÅ := naturality' (eqToHom h) 0 1
  have h‚ÇÇ := naturality' (eqToHom h) 1 2
  have h‚ÇÉ := naturality' (eqToHom h) 2 3
  dsimp [Precomp.map] at h‚ÇÅ h‚ÇÇ h‚ÇÉ
  erw [eqToHom_app, eqToHom_app, eqToHom_refl, eqToHom_refl, id_comp, comp_id] at h‚ÇÅ h‚ÇÇ h‚ÇÉ
  subst h‚ÇÅ h‚ÇÇ h‚ÇÉ
  simp only [eqToHom_refl, EMap_id]

end

section

variable (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ)
  {i j k : Œπ} (f : i ‚ü∂ j) (g : j ‚ü∂ k)

lemma Œ¥_eq_zero_of_isIso‚ÇÅ (hf : IsIso f) :
    X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g = 0 := by
  have : IsIso (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g _ rfl) := by
    rw [isIso_iff‚ÇÅ]
    dsimp
    constructor <;> infer_instance
  simpa only [Preadditive.IsIso.comp_left_eq_zero] using X.zero‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g _ rfl

lemma Œ¥_eq_zero_of_isIso‚ÇÇ (hg : IsIso g) :
    X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g = 0 := by
  have : IsIso (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g _ rfl) := by
    rw [isIso_iff‚ÇÅ]
    dsimp
    constructor <;> infer_instance
  simpa only [Preadditive.IsIso.comp_right_eq_zero] using X.zero‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g _ rfl

end

lemma isZero_H_obj_of_isIso (n : ‚Ñ§) {i j : Œπ} (f : i ‚ü∂ j) (hf : IsIso f) :
    IsZero ((X.H n).obj (mk‚ÇÅ f)) := by
  have e : mk‚ÇÅ (ùüô i) ‚âÖ mk‚ÇÅ f := isoMk‚ÇÅ (Iso.refl _) (asIso f) (by simp)
  refine IsZero.of_iso ?_ ((X.H n).mapIso e.symm)
  have h := X.zero‚ÇÇ n (ùüô i) (ùüô i) (ùüô i) (by simp)
  rw [‚Üê Functor.map_comp] at h
  rw [IsZero.iff_id_eq_zero, ‚Üê Functor.map_id, ‚Üê h]
  congr 1
  aesop_cat

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
  {i j : Œπ} (f : i ‚ü∂ j) {i' j' : Œπ} (f' : i' ‚ü∂ j')

noncomputable def EIsoH :
    X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (ùüô i) f (ùüô j) ‚âÖ (X.H n‚ÇÅ).obj (mk‚ÇÅ f) :=
  (ShortComplex.HomologyData.ofZeros (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (ùüô i) f (ùüô j))
    (X.Œ¥_eq_zero_of_isIso‚ÇÇ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f (ùüô j) inferInstance)
    (X.Œ¥_eq_zero_of_isIso‚ÇÅ n‚ÇÅ n‚ÇÇ hn‚ÇÇ (ùüô i) f inferInstance)).left.homologyIso

noncomputable def cycles'IsoH :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (ùüô i) f (ùüô j)).cycles ‚âÖ (X.H n‚ÇÅ).obj (mk‚ÇÅ f) :=
  (ShortComplex.HomologyData.ofZeros (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (ùüô i) f (ùüô j))
    (X.Œ¥_eq_zero_of_isIso‚ÇÇ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f (ùüô j) inferInstance)
    (X.Œ¥_eq_zero_of_isIso‚ÇÅ n‚ÇÅ n‚ÇÇ hn‚ÇÇ (ùüô i) f inferInstance)).left.cyclesIso

@[reassoc (attr := simp)]
lemma cycles'IsoH_inv_iCycles :
    (X.cycles'IsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f).inv ‚â´
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (ùüô i) f (ùüô j)).iCycles = ùüô _ := by
  simp [cycles'IsoH]

@[reassoc (attr := simp)]
lemma homologyœÄ_EIsoH_hom :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (ùüô i) f (ùüô j)).homologyœÄ ‚â´
      (X.EIsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f).hom =
      (X.cycles'IsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f).hom := by
  simp [EIsoH, cycles'IsoH]

lemma EIsoH_hom_naturality (Œ± : mk‚ÇÅ f ‚ü∂ mk‚ÇÅ f') (Œ≤ : mk‚ÇÉ (ùüô _) f (ùüô _) ‚ü∂ mk‚ÇÉ (ùüô _) f' (ùüô _))
    (hŒ≤ : Œ≤ = homMk‚ÇÉ (Œ±.app 0) (Œ±.app 0) (Œ±.app 1) (Œ±.app 1)
      (by simp) (naturality' Œ± 0 1) (by
        dsimp [Precomp.map]
        erw [id_comp, comp_id])) :
  X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (ùüô _) f (ùüô _) (ùüô _) f' (ùüô _) Œ≤ ‚â´
    (X.EIsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f').hom =
    (X.EIsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f).hom ‚â´ (X.H n‚ÇÅ).map Œ± := by
  have : Œ± = homMk‚ÇÅ (Œ≤.app 1) (Œ≤.app 2) (naturality' Œ≤ 1 2 ) := by
    subst hŒ≤
    exact hom_ext‚ÇÅ rfl rfl
  subst this
  exact (ShortComplex.LeftHomologyMapData.ofZeros
    (X.shortComplexEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ _ _ _ _ _ _ Œ≤) _ _ _ _).homologyMap_comm

end

end SpectralObject

end

end Abelian

end CategoryTheory
