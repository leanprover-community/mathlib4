/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.SpectralObject.Differentials

/-!
# Homology of differentials

-/

namespace CategoryTheory

open Category Limits ComposableArrows Preadditive

namespace Abelian

variable {C Œπ : Type*} [Category C] [Abelian C] [Category Œπ]

namespace SpectralObject

variable (X : SpectralObject C Œπ)

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ : ‚Ñ§)
  (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
  {i‚ÇÄ' i‚ÇÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÉ' : Œπ} (f‚ÇÅ : i‚ÇÄ ‚ü∂ i‚ÇÅ)
  (f‚ÇÅ' : i‚ÇÄ' ‚ü∂ i‚ÇÅ) (f‚ÇÇ : i‚ÇÅ ‚ü∂ i‚ÇÇ) (f‚ÇÉ : i‚ÇÇ ‚ü∂ i‚ÇÉ) (f‚ÇÉ' : i‚ÇÇ ‚ü∂ i‚ÇÉ')

lemma epi_EMap (Œ± : mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ')
    (hŒ±‚ÇÄ : Œ±.app 0 = ùüô _) (hŒ±‚ÇÅ : Œ±.app 1 = ùüô _) (hŒ±‚ÇÇ : Œ±.app 2 = ùüô _) :
    Epi (X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ' Œ±) := by
  have := X.œÄE_EMap  n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ _ _ _ _ _ _ Œ± (ùüô _) (by aesop_cat)
  rw [cyclesMap_id, id_comp] at this
  exact epi_of_epi_fac this

lemma mono_EMap (Œ± : mk‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ mk‚ÇÉ f‚ÇÅ' f‚ÇÇ f‚ÇÉ)
    (hŒ±‚ÇÅ : Œ±.app 1 = ùüô _) (hŒ±‚ÇÇ : Œ±.app 2 = ùüô _) (hŒ±‚ÇÉ : Œ±.app 3 = ùüô _) :
    Mono (X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ' f‚ÇÇ f‚ÇÉ Œ±) := by
  have := X.EMap_ŒπE  n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ _ _ _ _ _ _ Œ± (ùüô _) (by aesop_cat)
  rw [opcyclesMap_id, comp_id] at this
  exact mono_of_mono_fac this

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ : ‚Ñ§)
  (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (hn‚ÇÉ : n‚ÇÇ + 1 = n‚ÇÉ)
  {i‚ÇÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ i‚ÇÖ i‚ÇÜ i‚Çá : Œπ} (f‚ÇÅ : i‚ÇÄ ‚ü∂ i‚ÇÅ) (f‚ÇÇ : i‚ÇÅ ‚ü∂ i‚ÇÇ) (f‚ÇÉ : i‚ÇÇ ‚ü∂ i‚ÇÉ)
  (f‚ÇÑ : i‚ÇÉ ‚ü∂ i‚ÇÑ) (f‚ÇÖ : i‚ÇÑ ‚ü∂ i‚ÇÖ)
  (f‚ÇÇ‚ÇÉ : i‚ÇÅ ‚ü∂ i‚ÇÉ) (h‚ÇÇ‚ÇÉ : f‚ÇÇ ‚â´ f‚ÇÉ = f‚ÇÇ‚ÇÉ)
  (f‚ÇÉ‚ÇÑ : i‚ÇÇ ‚ü∂ i‚ÇÑ) (h‚ÇÉ‚ÇÑ : f‚ÇÉ ‚â´ f‚ÇÑ = f‚ÇÉ‚ÇÑ)

@[reassoc (attr := simp)]
lemma d_EMap_fourŒ¥‚ÇÑToŒ¥‚ÇÉ :
    X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ ‚â´
      X.EMap n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ‚ÇÑ (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ) = 0 := by
  rw [‚Üê cancel_epi (X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ),
    ‚Üê cancel_epi (X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ), comp_zero, comp_zero,
    X.toCycles_œÄE_d_assoc n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ _ rfl f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ,
    X.œÄE_EMap n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ‚ÇÑ
    (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ) (ùüô _) (by ext <;> simp; rfl),
    cyclesMap_id, Category.id_comp, Œ¥_toCycles_assoc, Œ¥ToCycles_œÄE]

instance :
    Epi (X.EMap n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ‚ÇÑ (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ)) := by
  apply X.epi_EMap
  all_goals rfl

lemma isIso_EMap_fourŒ¥‚ÇÑToŒ¥‚ÇÉ (h : ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ) = 0)) :
    IsIso (X.EMap n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ‚ÇÑ (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ)) := by
  apply ShortComplex.isIso_homologyMap_of_epi_of_isIso_of_mono'
  ¬∑ exact (X.exact‚ÇÇ _ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ).epi_f h
  ¬∑ dsimp
    have : ùüô (mk‚ÇÅ f‚ÇÇ) = homMk‚ÇÅ (ùüô _) (ùüô _) (by simp) := by ext <;> simp
    erw [‚Üê this]
    infer_instance
  ¬∑ dsimp
    have : ùüô (mk‚ÇÅ f‚ÇÅ) = homMk‚ÇÅ (ùüô _) (ùüô _) (by simp) := by ext <;> simp
    erw [‚Üê this]
    infer_instance

lemma isIso_EMap_fourŒ¥‚ÇÑToŒ¥‚ÇÉ_of_isZero (h : IsZero ((X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÑ))) :
    IsIso (X.EMap n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ‚ÇÑ (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ)) := by
  apply X.isIso_EMap_fourŒ¥‚ÇÑToŒ¥‚ÇÉ
  apply h.eq_of_tgt

@[reassoc (attr := simp)]
lemma EMap_fourŒ¥‚ÇÅToŒ¥‚ÇÄ_d :
    X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÉ f‚ÇÑ f‚ÇÖ (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) ‚â´
      X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ = 0 := by
  rw [‚Üê cancel_mono (X.ŒπE n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ),
    ‚Üê cancel_mono (X.fromOpcycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ), zero_comp, zero_comp, assoc,
    assoc, X.d_ŒπE_fromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ _ rfl _ rfl]
  rw [X.EMap_ŒπE_assoc n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÉ f‚ÇÑ f‚ÇÖ
    (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) (ùüô _) (by ext <;> simp <;> rfl),
    opcyclesMap_id, fromOpcyles_Œ¥, id_comp, ŒπE_Œ¥FromOpcycles]

instance :
    Mono (X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÉ f‚ÇÑ f‚ÇÖ (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)) := by
  apply mono_EMap
  all_goals rfl

lemma isIso_EMap_fourŒ¥‚ÇÅToŒ¥‚ÇÄ (h : ((X.H n‚ÇÇ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) = 0)) :
    IsIso (X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÉ f‚ÇÑ f‚ÇÖ (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)) := by
  apply ShortComplex.isIso_homologyMap_of_epi_of_isIso_of_mono'
  ¬∑ dsimp
    have : ùüô (mk‚ÇÅ f‚ÇÖ) = homMk‚ÇÅ (ùüô _) (ùüô _) (by simp) := by ext <;> simp
    erw [‚Üê this]
    infer_instance
  ¬∑ dsimp
    have : ùüô (mk‚ÇÅ f‚ÇÑ) = homMk‚ÇÅ (ùüô _) (ùüô _) (by simp) := by ext <;> simp
    erw [‚Üê this]
    infer_instance
  ¬∑ exact (X.exact‚ÇÇ n‚ÇÇ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).mono_g h

lemma isIso_EMap_fourŒ¥‚ÇÅToŒ¥‚ÇÄ_of_isZero (h : IsZero ((X.H n‚ÇÇ).obj (mk‚ÇÅ f‚ÇÇ))) :
    IsIso (X.EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÉ f‚ÇÑ f‚ÇÖ (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)) := by
  apply X.isIso_EMap_fourŒ¥‚ÇÅToŒ¥‚ÇÄ
  apply h.eq_of_src

@[simps!]
noncomputable def dCokernelSequence : ShortComplex C :=
  ShortComplex.mk _ _ (X.d_EMap_fourŒ¥‚ÇÑToŒ¥‚ÇÉ n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ)

instance : Epi (X.dCokernelSequence n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ).g := by
  dsimp
  infer_instance

lemma dCokernelSequence_exact :
    (X.dCokernelSequence n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A x‚ÇÇ hx‚ÇÇ
  dsimp at x‚ÇÇ hx‚ÇÇ ‚ä¢
  have hx‚ÇÇ' := hx‚ÇÇ =‚â´ X.ŒπE _ _ _ _ _ _ _ _
  simp only [assoc, zero_comp] at hx‚ÇÇ'
  rw [X.EMap_ŒπE n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ‚ÇÑ (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ)
    (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ) (by ext <;> simp <;> rfl)] at hx‚ÇÇ'
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, _, x‚ÇÅ, hx‚ÇÅ‚ü© := ((X.sequenceŒ®_exact n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÇ f‚ÇÉ f‚ÇÑ _ rfl
    f‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ).exact 1).exact_up_to_refinements (x‚ÇÇ ‚â´ X.ŒπE _ _ _ _ _ _ _ _) (by
      dsimp [sequenceŒ®, Precomp.map]
      rw [assoc, hx‚ÇÇ'])
  dsimp [sequenceŒ®, Precomp.map] at x‚ÇÅ hx‚ÇÅ
  refine ‚ü®A‚ÇÅ, œÄ‚ÇÅ, inferInstance, x‚ÇÅ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ, ?_‚ü©
  rw [‚Üê cancel_mono (X.ŒπE _ _ _ _ _ _ _ _), assoc, assoc, assoc, hx‚ÇÅ, œÄE_d_ŒπE]

@[simps!]
noncomputable def dKernelSequence : ShortComplex C :=
  ShortComplex.mk _ _ (X.EMap_fourŒ¥‚ÇÅToŒ¥‚ÇÄ_d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)

instance : Mono (X.dKernelSequence n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).f := by
  dsimp
  infer_instance

lemma dKernelSequence_exact :
    (X.dKernelSequence n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A x‚ÇÇ hx‚ÇÇ
  dsimp at x‚ÇÇ hx‚ÇÇ ‚ä¢
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, _, y‚ÇÇ, hy‚ÇÇ‚ü© :=
    surjective_up_to_refinements_of_epi (X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ) x‚ÇÇ
  have hy‚ÇÇ' := hy‚ÇÇ =‚â´ (X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ ‚â´ X.ŒπE _ _ _ _ _ _ _ _)
  simp only [assoc, reassoc_of% hx‚ÇÇ, zero_comp, comp_zero, œÄE_d_ŒπE] at hy‚ÇÇ'
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, _, y‚ÇÅ, hy‚ÇÅ‚ü© := ((X.sequenceŒ®_exact n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÇ f‚ÇÉ f‚ÇÑ
    f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ _ rfl).exact 0).exact_up_to_refinements y‚ÇÇ hy‚ÇÇ'.symm
  dsimp [sequenceŒ®] at y‚ÇÅ hy‚ÇÅ
  refine ‚ü®A‚ÇÇ, œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, epi_comp _ _ , y‚ÇÅ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ, ?_‚ü©
  rw [assoc, assoc, hy‚ÇÇ, reassoc_of% hy‚ÇÅ,
    X.œÄE_EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÉ f‚ÇÑ f‚ÇÖ (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)
    (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) (by ext <;> simp; rfl)]

end

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ : ‚Ñ§)
  (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (hn‚ÇÉ : n‚ÇÇ + 1 = n‚ÇÉ) (hn‚ÇÑ : n‚ÇÉ + 1 = n‚ÇÑ)
  {i‚ÇÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ i‚ÇÖ i‚ÇÜ i‚Çá : Œπ} (f‚ÇÅ : i‚ÇÄ ‚ü∂ i‚ÇÅ) (f‚ÇÇ : i‚ÇÅ ‚ü∂ i‚ÇÇ) (f‚ÇÉ : i‚ÇÇ ‚ü∂ i‚ÇÉ)
  (f‚ÇÑ : i‚ÇÉ ‚ü∂ i‚ÇÑ) (f‚ÇÖ : i‚ÇÑ ‚ü∂ i‚ÇÖ) (f‚ÇÜ : i‚ÇÖ ‚ü∂ i‚ÇÜ) (f‚Çá : i‚ÇÜ ‚ü∂ i‚Çá)
  (f‚ÇÇ‚ÇÉ : i‚ÇÅ ‚ü∂ i‚ÇÉ) (h‚ÇÇ‚ÇÉ : f‚ÇÇ ‚â´ f‚ÇÉ = f‚ÇÇ‚ÇÉ)
  (f‚ÇÖ‚ÇÜ : i‚ÇÑ ‚ü∂ i‚ÇÜ) (h‚ÇÖ‚ÇÜ : f‚ÇÖ ‚â´ f‚ÇÜ = f‚ÇÖ‚ÇÜ)

@[simps!]
noncomputable def dShortComplex : ShortComplex C :=
  ShortComplex.mk _ _ (X.d_d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚Çá)

lemma EMap_fac :
    X.EMap n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÉ f‚ÇÑ f‚ÇÖ (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) ‚â´
      X.EMap n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÉ f‚ÇÑ f‚ÇÖ‚ÇÜ (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚ÇÖ‚ÇÜ h‚ÇÖ‚ÇÜ) =
    X.EMap n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ‚ÇÜ (fourŒ¥‚ÇÑToŒ¥‚ÇÉ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚ÇÖ‚ÇÜ h‚ÇÖ‚ÇÜ) ‚â´
      X.EMap n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ‚ÇÜ f‚ÇÉ f‚ÇÑ f‚ÇÖ‚ÇÜ (fourŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ‚ÇÜ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) := by
  simp only [‚Üê EMap_comp]
  congr 1
  ext <;> simp

noncomputable def dHomologyData :
    (X.dShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚Çá).HomologyData :=
  ShortComplex.HomologyData.ofEpiMonoFactorisation
    (X.dShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚Çá)
    (X.dKernelSequence_exact n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).fIsKernel
    (X.dCokernelSequence_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚Çá f‚ÇÖ‚ÇÜ h‚ÇÖ‚ÇÜ).gIsCokernel
    (X.EMap_fac n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ f‚ÇÖ‚ÇÜ h‚ÇÖ‚ÇÜ)

noncomputable def dHomologyIso :
    (X.dShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚Çá).homology ‚âÖ
      X.E n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÇ‚ÇÉ f‚ÇÑ f‚ÇÖ‚ÇÜ :=
  (X.dHomologyData n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ
    f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚Çá f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ f‚ÇÖ‚ÇÜ h‚ÇÖ‚ÇÜ).left.homologyIso

end SpectralObject

end Abelian

end CategoryTheory
