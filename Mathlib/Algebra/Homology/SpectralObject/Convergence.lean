/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.SpectralObject.PageInfinity
import Mathlib.Algebra.Homology.SpectralObject.Images

/-!
# Convergence

-/

namespace CategoryTheory

open Category ComposableArrows Limits

lemma Option.by_cases {Œ± : Type*} (x : Option Œ±) :
    x = none ‚à® ‚àÉ (a : Œ±), x = some a := by
  cases x <;> tauto

namespace Abelian

variable {C Œπ Œ∫ : Type*} [Category C] [Abelian C] [LinearOrder Œπ] [OrderBot Œπ] [OrderTop Œπ]
  (X : SpectralObject C Œπ)
  {c : ‚Ñ§ ‚Üí ComplexShape Œ∫} {r‚ÇÄ : ‚Ñ§}

namespace SpectralObject

noncomputable def abutment (n : ‚Ñ§) : C :=
    (X.H n).obj (mk‚ÇÅ (homOfLE' ‚ä• ‚ä§ bot_le))

noncomputable def abutmentFiltration (n : ‚Ñ§) (j : Œπ) : C :=
  X.image n (homOfLE' ‚ä• j bot_le) (homOfLE' j ‚ä§ le_top) _ rfl

noncomputable def abutmentFiltrationŒπ (n : ‚Ñ§) (j : Œπ) :
    X.abutmentFiltration n j ‚ü∂ X.abutment n :=
  X.imageŒπ _ _ _ _ _

noncomputable def œÄAbutmentFiltration (n : ‚Ñ§) (j : Œπ) :
    (X.H n).obj (mk‚ÇÅ (homOfLE' ‚ä• j bot_le)) ‚ü∂ X.abutmentFiltration n j :=
  X.imageœÄ _ _ _ _ _

instance (n : ‚Ñ§) (j : Œπ) : Epi (X.œÄAbutmentFiltration n j) := by
  dsimp [œÄAbutmentFiltration]
  infer_instance

noncomputable def abutmentœÄ (n : ‚Ñ§) (j : Œπ) :
    X.abutment n ‚ü∂ (X.H n).obj (mk‚ÇÅ (homOfLE' j ‚ä§ le_top)) :=
  (X.H n).map (homMk‚ÇÅ (homOfLE bot_le) (ùüô _) rfl)

noncomputable def abutmentFiltrationToPageInfinity
    (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
    (i j : Œπ) (hij : i ‚â§ j) :
    X.abutmentFiltration n‚ÇÅ j ‚ü∂ X.pageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij :=
  X.imageToE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (homOfLE' ‚ä• i bot_le) (homOfLE hij)
    (homOfLE' j ‚ä§ le_top) _ rfl _ rfl

instance (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (i j : Œπ) (hij : i ‚â§ j) :
    Epi (X.abutmentFiltrationToPageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij) := by
  dsimp [abutmentFiltrationToPageInfinity]
  infer_instance

@[reassoc (attr := simp)]
lemma abutmentFiltrationŒπ_œÄ (n : ‚Ñ§) (j : Œπ) :
    X.abutmentFiltrationŒπ n j ‚â´ X.abutmentœÄ n j = 0 :=
  kernel.condition _

@[reassoc (attr := simp)]
lemma abutmentœÄ_map (n : ‚Ñ§) (j‚ÇÅ j‚ÇÇ : Œπ)
    (œÜ : (mk‚ÇÅ (homOfLE' j‚ÇÅ ‚ä§ le_top)) ‚ü∂ (mk‚ÇÅ (homOfLE' j‚ÇÇ ‚ä§ le_top))) :
    X.abutmentœÄ n j‚ÇÅ ‚â´ (X.H n).map œÜ = X.abutmentœÄ n j‚ÇÇ :=
  ((X.H n).map_comp _ _).symm

instance (n : ‚Ñ§) (j : Œπ) : Mono (X.abutmentFiltrationŒπ n j) := by
  dsimp [abutmentFiltrationŒπ]
  infer_instance

noncomputable def abutmentFiltrationMap (n : ‚Ñ§) (j‚ÇÅ j‚ÇÇ : Œπ) (h : j‚ÇÅ ‚â§ j‚ÇÇ) :
    X.abutmentFiltration n j‚ÇÅ ‚ü∂ X.abutmentFiltration n j‚ÇÇ :=
  X.imageMap _ _ _ _ _ _ _ _ _ (homMk‚ÇÇ (ùüô _) (homOfLE h) (ùüô _) rfl rfl)

@[reassoc (attr := simp)]
lemma abutmentFiltrationMap_Œπ (n : ‚Ñ§) (j‚ÇÅ j‚ÇÇ : Œπ) (h : j‚ÇÅ ‚â§ j‚ÇÇ) :
    X.abutmentFiltrationMap n j‚ÇÅ j‚ÇÇ h ‚â´ X.abutmentFiltrationŒπ n j‚ÇÇ =
      X.abutmentFiltrationŒπ n j‚ÇÅ := by
  simpa using X.imageMap_Œπ n (homOfLE' ‚ä• j‚ÇÅ bot_le) (homOfLE' j‚ÇÅ ‚ä§ le_top) _ rfl
    (homOfLE' ‚ä• j‚ÇÇ bot_le) (homOfLE' j‚ÇÇ ‚ä§ le_top) _ rfl
    (homMk‚ÇÇ (ùüô _) (homOfLE h) (ùüô _) rfl rfl) (ùüô _) (by aesop_cat)

@[simps]
noncomputable def abutmentFiltrationFunctor (n : ‚Ñ§) :
    Œπ ‚•§ MonoOver (X.abutment n) where
  obj j := MonoOver.mk' (X.abutmentFiltrationŒπ n j)
  map {j‚ÇÅ j‚ÇÇ} h := Over.homMk (X.abutmentFiltrationMap n j‚ÇÅ j‚ÇÇ (leOfHom h)) (by simp)

instance (n : ‚Ñ§) (j‚ÇÅ j‚ÇÇ : Œπ) (h : j‚ÇÅ ‚â§ j‚ÇÇ) :
    Mono (X.abutmentFiltrationMap n j‚ÇÅ j‚ÇÇ h) :=
  mono_of_mono_fac (X.abutmentFiltrationMap_Œπ n j‚ÇÅ j‚ÇÇ h)

section

/-- abutmentFiltrationToPageInfinity_EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ' -/
@[reassoc (attr := simp)]
lemma abutmentFiltrationToPageInfinity_EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ'
    (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (i‚ÇÄ i‚ÇÅ i‚ÇÇ : Œπ)
    (h‚ÇÄ‚ÇÅ : i‚ÇÄ ‚â§ i‚ÇÅ) (h‚ÇÅ‚ÇÇ : i‚ÇÅ ‚â§ i‚ÇÇ) :
    X.abutmentFiltrationToPageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i‚ÇÄ i‚ÇÇ (h‚ÇÄ‚ÇÅ.trans h‚ÇÅ‚ÇÇ) ‚â´
      X.EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚ä• i‚ÇÄ i‚ÇÅ i‚ÇÇ ‚ä§ bot_le h‚ÇÄ‚ÇÅ h‚ÇÅ‚ÇÇ le_top =
    X.abutmentFiltrationToPageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i‚ÇÅ i‚ÇÇ h‚ÇÅ‚ÇÇ := by
  rw [‚Üê cancel_epi (X.œÄAbutmentFiltration _ _)]
  dsimp [œÄAbutmentFiltration, abutmentFiltrationToPageInfinity, EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ']
  rw [œÄ_imageToE_assoc, œÄ_imageToE, X.œÄE_EMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ _ _ _ _ _ _
    (fourŒ¥‚ÇÇToŒ¥‚ÇÅ' ‚ä• i‚ÇÄ i‚ÇÅ i‚ÇÇ ‚ä§ bot_le h‚ÇÄ‚ÇÅ h‚ÇÅ‚ÇÇ le_top) (threeŒ¥‚ÇÇToŒ¥‚ÇÅ' ‚ä• i‚ÇÄ i‚ÇÅ i‚ÇÇ bot_le h‚ÇÄ‚ÇÅ h‚ÇÅ‚ÇÇ) rfl,
    ‚Üê assoc]
  congr 1
  rw [‚Üê cancel_mono (X.iCycles _ _ _ _ _), assoc, toCycles_i,
    X.cyclesMap_i n‚ÇÅ n‚ÇÇ hn‚ÇÇ _ _ _ _ (threeŒ¥‚ÇÇToŒ¥‚ÇÅ' ‚ä• i‚ÇÄ i‚ÇÅ i‚ÇÇ bot_le h‚ÇÄ‚ÇÅ h‚ÇÅ‚ÇÇ)
      (twoŒ¥‚ÇÅToŒ¥‚ÇÄ' i‚ÇÄ i‚ÇÅ i‚ÇÇ h‚ÇÄ‚ÇÅ h‚ÇÅ‚ÇÇ) rfl,
    toCycles_i_assoc, ‚Üê Functor.map_comp]
  rfl

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (i j : Œπ) (hij : i ‚â§ j)

@[reassoc (attr := simp)]
lemma abutmentFiltrationMap_abutmentFiltrationToPageInfinity :
    X.abutmentFiltrationMap n‚ÇÅ i j hij ‚â´
      X.abutmentFiltrationToPageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij = 0 := by
  apply X.imageMap_threeŒ¥‚ÇÇToŒ¥‚ÇÅ_imageToE
  rfl

@[simps!]
noncomputable
def abutmentFiltrationShortComplex :
    ShortComplex C :=
  ShortComplex.mk _ _
    (X.abutmentFiltrationMap_abutmentFiltrationToPageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij)

instance : Mono (X.abutmentFiltrationShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij).f := by
  dsimp
  infer_instance

instance : Epi (X.abutmentFiltrationShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij).g := by
  dsimp
  infer_instance

lemma abutmentFiltrationShortComplex_shortExact :
    (X.abutmentFiltrationShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij).ShortExact := by
  apply X.shortComplexImage_shortExact
  rfl

end

variable (data : SpectralSequenceMkData Œπ c r‚ÇÄ)
  {œÉ : Type*} {Œ± : œÉ ‚Üí Type*} [‚àÄ n, LinearOrder (Œ± n)]
  (s : SpectralSequence.ConvergenceStripes Œ∫ Œ±)

namespace SpectralSequenceMkData

structure CompatibleWithConvergenceStripes where
  deg : œÉ ‚Üí ‚Ñ§
  deg_stripe (pq : Œ∫) : deg (s.stripe pq) = data.deg pq := by aesop
  i‚ÇÇ_monotone (n : œÉ) (i j : Œ± n) (hij : i ‚â§ j) :
    data.i‚ÇÇ (s.position n i) ‚â§ data.i‚ÇÇ (s.position n j)

namespace CompatibleWithConvergenceStripes

variable {data s}
variable (hdata : data.CompatibleWithConvergenceStripes s)

omit [OrderBot Œπ] [OrderTop Œπ] in
@[simp]
lemma deg_position (n : œÉ) (i : Œ± n) :
    data.deg (s.position n i) = hdata.deg n := by
  simp only [‚Üê s.stripe_position n i, hdata.deg_stripe]

@[nolint unusedArguments]
def mapWithBot (_ : data.CompatibleWithConvergenceStripes s) (n : œÉ) : WithBot (Œ± n) ‚Üí Œπ
  | none => ‚ä•
  | some i => data.i‚ÇÇ (s.position n i)

omit [OrderTop Œπ] in
@[simp]
lemma mapWithBot_none (n : œÉ):
    hdata.mapWithBot n none = ‚ä• := rfl

omit [OrderTop Œπ] in
@[simp]
lemma mapWithBot_bot (n : œÉ):
    hdata.mapWithBot n ‚ä• = ‚ä• := rfl

omit [OrderTop Œπ] in
@[simp]
lemma mapWithBot_some (n : œÉ) (i : Œ± n):
    hdata.mapWithBot n (some i) = data.i‚ÇÇ (s.position n i) := rfl

omit [OrderTop Œπ] in
@[simp]
lemma mapWithBot_some' (n : œÉ) (i : Œ± n):
    hdata.mapWithBot n (WithBot.some i) = data.i‚ÇÇ (s.position n i) := rfl

omit [OrderTop Œπ] in
lemma mapWithBot_monotone (n : œÉ) : Monotone (hdata.mapWithBot n) := by
  rintro i j hij
  obtain _ | i := i
  ¬∑ apply bot_le
  ¬∑ obtain _ | j := j
    ¬∑ change _ ‚â§ ‚ä• at hij
      simp at hij
    ¬∑ erw [WithBot.coe_le_coe] at hij
      dsimp [mapWithBot]
      exact hdata.i‚ÇÇ_monotone n i j hij

abbrev mapWithBotFunctor (n : œÉ) : WithBot (Œ± n) ‚•§ Œπ :=
  Monotone.functor (hdata.mapWithBot_monotone n)

omit [OrderTop Œπ] in
lemma mapWithBot_pred_le_i‚ÇÇ (n : œÉ) (i : WithBot (Œ± n)) (j : Œ± n) (hij : s.pred n j = i) :
    hdata.mapWithBot n i ‚â§ data.i‚ÇÇ (s.position n j) := by
  obtain _|i := i
  ¬∑ exact bot_le
  ¬∑ apply hdata.i‚ÇÇ_monotone
    rw [‚Üê WithBot.coe_le_coe]
    change _ = WithBot.some i at hij
    simpa only [‚Üê hij] using s.pred'_le n j

end CompatibleWithConvergenceStripes

end SpectralSequenceMkData

lemma mkDataE‚ÇÇCohomological_i‚ÇÅ_eq_i‚ÇÇ (n : ‚Ñ§) (i j : ‚Ñ§)
    (hij : SpectralSequence.cohomologicalStripes.pred n j = WithBot.some i) (pq : ‚Ñ§ √ó ‚Ñ§)
    (hpq : SpectralSequence.cohomologicalStripes.position n j = pq) :
    mkDataE‚ÇÇCohomological.i‚ÇÅ pq =
      mkDataE‚ÇÇCohomological.i‚ÇÇ (SpectralSequence.cohomologicalStripes.position n i) := by
  rw [‚Üê hpq]
  obtain rfl : j - 1 = i := by
    rw [‚Üê WithBot.coe_inj]
    exact hij
  simp

@[simps]
def mkDataE‚ÇÇCohomologicalCompatibility :
    mkDataE‚ÇÇCohomological.CompatibleWithConvergenceStripes
      SpectralSequence.cohomologicalStripes where
  deg n := n
  i‚ÇÇ_monotone n i j hij := by simpa using hij

@[simps]
def mkDataE‚ÇÇCohomologicalNatCompatibility :
    mkDataE‚ÇÇCohomologicalNat.CompatibleWithConvergenceStripes
      CohomologicalSpectralSequenceNat.stripes where
  deg n := n
  i‚ÇÇ_monotone n i j hij := by simpa using hij

@[simps]
def homologicalStripesNat :
    SpectralSequence.ConvergenceStripes (‚Ñï √ó ‚Ñï) (fun (n : ‚Ñï) => Fin (n + 1)) where
  stripe pq := pq.1 + pq.2
  pred n := fun i => match i with
    | 0 => ‚ä•
    | ‚ü®j + 1, hj‚ü© => WithBot.some ‚ü®j, by linarith‚ü©
  pred_lt n i := by
    obtain ‚ü®_ | _, _‚ü© := i
    ¬∑ apply WithBot.bot_lt_coe
    ¬∑ simp
  position n i := ‚ü®i.1, n - i.1‚ü©
  stripe_position := by
    rintro n ‚ü®i, hi‚ü©
    exact Nat.add_sub_of_le (by linarith)
  discrete := by
    rintro n ‚ü®_ | i, hi‚ü© ‚ü®j, hj‚ü© h
    ¬∑ simp
    ¬∑ simp only [WithBot.coe_lt_coe, Fin.mk_lt_mk] at h
      simp only [Fin.mk_le_mk]
      linarith
  finite_segment n i j := by
    rw [Set.finite_def]
    refine ‚ü®Fintype.ofInjective (fun x => (x : Fin (n + 1))) ?_‚ü©
    intro x y h
    ext1
    simpa using h

@[simps]
def mkDataE‚ÇÇHomologicalNatCompatibility :
    mkDataE‚ÇÇHomologicalNat.CompatibleWithConvergenceStripes
      homologicalStripesNat where
  deg n := -n
  deg_stripe pq := by
    dsimp
    simp only [Nat.cast_add, neg_add_rev]
    linarith
  i‚ÇÇ_monotone := by
    rintro n ‚ü®i, hi‚ü© ‚ü®j, hj‚ü© h
    simp at h
    dsimp
    simp only [‚Ñ§t.mk_le_mk_iff]
    linarith [Nat.add_sub_of_le (show i ‚â§ n by linarith),
      Nat.add_sub_of_le (show j ‚â§ n by linarith)]

variable {data s}
variable (hdata : data.CompatibleWithConvergenceStripes s)
  [X.HasSpectralSequence data]

class ConvergesInDegree (n : œÉ) : Prop where
  stationnaryAt (pq : Œ∫) (hpq : s.stripe pq = n) : X.StationaryAt data pq := by infer_instance
  isZero‚ÇÅ : ‚àÉ (i : Œ± n), ‚àÄ (j : Œ± n) (_ : s.pred n i = WithBot.some j),
    IsZero ((X.H (hdata.deg n)).obj (mk‚ÇÅ (homOfLE' ‚ä• (data.i‚ÇÇ (s.position n j)) bot_le)))
  isZero‚ÇÇ : ‚àÉ (i : Œ± n),
    IsZero ((X.H (hdata.deg n)).obj (mk‚ÇÅ (homOfLE' (data.i‚ÇÇ (s.position n i)) ‚ä§ le_top)))
  isIso‚ÇÅ (i j : Œ± n) (hij : s.pred n j = WithBot.some i) (pq : Œ∫) (hpq : s.position n j = pq)
      (i‚ÇÅ i‚ÇÇ i‚ÇÇ' : Œπ) (hi‚ÇÅ : data.i‚ÇÅ pq = i‚ÇÅ) (hi‚ÇÇ : data.i‚ÇÇ (s.position n i) = i‚ÇÇ)
      (hi‚ÇÇ' : data.i‚ÇÇ (s.position n j) = i‚ÇÇ')
      (h‚ÇÅ‚ÇÇ : i‚ÇÅ < i‚ÇÇ) (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
      (hn‚ÇÅ' : hdata.deg n = n‚ÇÅ) :
    IsIso (X.EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚ä• i‚ÇÅ i‚ÇÇ i‚ÇÇ' ‚ä§ bot_le h‚ÇÅ‚ÇÇ.le (by
        rw [‚Üê hi‚ÇÇ, ‚Üê hi‚ÇÇ']
        apply hdata.i‚ÇÇ_monotone
        rw [‚Üê WithBot.coe_le_coe, ‚Üê hij]
        apply s.pred_le) le_top)
  isIso‚ÇÇ (i : WithBot (Œ± n)) (j : Œ± n) (hij : s.pred n j = i) (pq : Œ∫) (hpq : s.position n j = pq)
      (i‚ÇÅ i‚ÇÇ i‚ÇÇ' : Œπ) (hi‚ÇÅ : data.i‚ÇÅ pq = i‚ÇÅ) (hi‚ÇÇ : hdata.mapWithBot n i = i‚ÇÇ)
      (hi‚ÇÇ' : data.i‚ÇÇ (s.position n j) = i‚ÇÇ')
      (h‚ÇÅ‚ÇÇ : i‚ÇÇ < i‚ÇÅ) (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
      (hn‚ÇÅ' : hdata.deg n = n‚ÇÅ) :
    IsIso (X.EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚ä• i‚ÇÇ i‚ÇÅ i‚ÇÇ' ‚ä§ bot_le h‚ÇÅ‚ÇÇ.le (by
        simpa only [‚Üê hi‚ÇÅ, ‚Üê hi‚ÇÇ', hpq] using (data.le‚ÇÅ‚ÇÇ pq)) le_top)

variable (n : œÉ) [hX : X.ConvergesInDegree hdata n]

include hX in
lemma hasPageInfinityAt_of_convergesInDegree (pq : Œ∫)
    (hpq : s.stripe pq = n) : X.StationaryAt data pq :=
  hX.stationnaryAt pq hpq

lemma isIso‚ÇÅ_of_convergesInDegree
    (i : WithBot (Œ± n)) (j : Œ± n) (hij : s.pred n j = i) (pq : Œ∫) (hpq : s.position n j = pq)
      (i‚ÇÅ i‚ÇÇ i‚ÇÇ' : Œπ) (hi‚ÇÅ : data.i‚ÇÅ pq = i‚ÇÅ) (hi‚ÇÇ : hdata.mapWithBot n i = i‚ÇÇ)
      (hi‚ÇÇ' : data.i‚ÇÇ (s.position n j) = i‚ÇÇ')
      (h‚ÇÅ‚ÇÇ : i‚ÇÅ ‚â§ i‚ÇÇ) (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
      (hn‚ÇÅ' : hdata.deg n = n‚ÇÅ) :
    IsIso (X.EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚ä• i‚ÇÅ i‚ÇÇ i‚ÇÇ' ‚ä§ bot_le h‚ÇÅ‚ÇÇ (by
      rw [‚Üê hi‚ÇÇ, ‚Üê hi‚ÇÇ']
      obtain _|i := i
      ¬∑ exact bot_le
      ¬∑ apply hdata.i‚ÇÇ_monotone
        change _ = WithBot.some i at hij
        rw [‚Üê WithBot.coe_le_coe, ‚Üê hij]
        apply s.pred_le) le_top) := by
  obtain rfl|h‚ÇÅ‚ÇÇ := h‚ÇÅ‚ÇÇ.eq_or_lt
  ¬∑ dsimp [EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ']
    erw [EMap_id]
    infer_instance
  ¬∑ obtain _|i := i
    ¬∑ simp at hi‚ÇÇ
      exfalso
      simp only [‚Üê hi‚ÇÇ, not_lt_bot] at h‚ÇÅ‚ÇÇ
    ¬∑ exact hX.isIso‚ÇÅ i j hij pq hpq i‚ÇÅ i‚ÇÇ i‚ÇÇ' hi‚ÇÅ hi‚ÇÇ hi‚ÇÇ' h‚ÇÅ‚ÇÇ _ _ _ _ _ hn‚ÇÅ'

lemma isIso‚ÇÇ_of_convergesInDegree
    (i : WithBot (Œ± n)) (j : Œ± n) (hij : s.pred n j = i) (pq : Œ∫) (hpq : s.position n j = pq)
      (i‚ÇÅ i‚ÇÇ i‚ÇÇ' : Œπ) (hi‚ÇÅ : data.i‚ÇÅ pq = i‚ÇÅ) (hi‚ÇÇ : hdata.mapWithBot n i = i‚ÇÇ)
      (hi‚ÇÇ' : data.i‚ÇÇ (s.position n j) = i‚ÇÇ')
      (h‚ÇÅ‚ÇÇ : i‚ÇÇ ‚â§ i‚ÇÅ) (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
      (hn‚ÇÅ' : hdata.deg n = n‚ÇÅ) :
    IsIso (X.EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚ä• i‚ÇÇ i‚ÇÅ i‚ÇÇ' ‚ä§ bot_le h‚ÇÅ‚ÇÇ (by
      simpa only [‚Üê hi‚ÇÅ, ‚Üê hi‚ÇÇ', hpq] using (data.le‚ÇÅ‚ÇÇ pq)) le_top) := by
  obtain rfl|h‚ÇÅ‚ÇÇ := h‚ÇÅ‚ÇÇ.eq_or_lt
  ¬∑ dsimp [EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ']
    erw [EMap_id]
    infer_instance
  ¬∑ exact hX.isIso‚ÇÇ i j hij pq hpq i‚ÇÅ i‚ÇÇ i‚ÇÇ' hi‚ÇÅ hi‚ÇÇ hi‚ÇÇ' h‚ÇÅ‚ÇÇ _ _ _ _ _ hn‚ÇÅ'

lemma isZero‚ÇÅ_of_convergesInDegree :
    ‚àÉ (i : Œ± n),
      IsZero ((X.H (hdata.deg n)).obj
        (mk‚ÇÅ (homOfLE' ‚ä• (hdata.mapWithBot n (s.pred n i)) bot_le))) := by
  obtain ‚ü®i, hi‚ü© := hX.isZero‚ÇÅ
  refine ‚ü®i, ?_‚ü©
  obtain h | ‚ü®j, h‚ü© := Option.by_cases (s.pred n i)
  ¬∑ have : IsZero ((X.H (hdata.deg n)).obj (mk‚ÇÅ (homOfLE' ‚ä• ‚ä• bot_le))) := by
      apply X.isZero_H_obj_of_isIso
      change IsIso (ùüô _)
      infer_instance
    convert this
    rw [h]
    rfl
  ¬∑ convert hi j h
    rw [h]
    rfl

lemma isZero‚ÇÇ_of_convergesInDegree :
    ‚àÉ (i : Œ± n),
      IsZero ((X.H (hdata.deg n)).obj (mk‚ÇÅ (homOfLE' (data.i‚ÇÇ (s.position n i)) ‚ä§ le_top))) :=
  hX.isZero‚ÇÇ

namespace ConvergesAt

section

variable (i : Œ± n) (pq : Œ∫) (hpq : s.position n i = pq)

noncomputable def œÄ :
    X.abutmentFiltration (hdata.deg n) (data.i‚ÇÇ (s.position n i)) ‚ü∂
      (X.spectralSequence data).pageInfinity pq :=
  X.abutmentFiltrationToPageInfinity (hdata.deg n - 1)
    (hdata.deg n) (hdata.deg n + 1) (by simp) (by simp)
  (data.i‚ÇÅ (s.position n i)) (data.i‚ÇÇ (s.position n i))
    (data.le‚ÇÅ‚ÇÇ (s.position n i)) ‚â´ Iso.inv (by
        have := X.hasPageInfinityAt_of_convergesInDegree hdata n pq (by
          rw [‚Üê hpq, s.stripe_position])
        apply X.spectralSequencePageInfinityIso
        ¬∑ rw [‚Üê hpq, hdata.deg_position n i]
        ¬∑ rw [hpq]
        ¬∑ rw [hpq])

instance : Epi (œÄ X hdata n i pq hpq) := epi_comp _ _

end

section

variable
  (i : WithBot (Œ± n)) (j : Œ± n) (hij : s.pred n j = i)
  (pq : Œ∫) (hpq : s.position n j = pq)

@[simp]
noncomputable def composableArrows : ComposableArrows C 2 :=
  mk‚ÇÇ (X.abutmentFiltrationMap (hdata.deg n) _ _ (hdata.mapWithBot_pred_le_i‚ÇÇ n i j hij))
    (œÄ X hdata n j pq hpq)

noncomputable def pageInfinityIso :
    (X.spectralSequence data).pageInfinity pq ‚âÖ
      X.pageInfinity (hdata.deg n - 1) (hdata.deg n) (hdata.deg n + 1) (by simp) (by simp)
        (data.i‚ÇÅ pq) (data.i‚ÇÇ (s.position n j)) (by simpa only [hpq] using data.le‚ÇÅ‚ÇÇ pq) := by
  haveI : X.StationaryAt data pq := X.hasPageInfinityAt_of_convergesInDegree hdata n pq (by
      rw [‚Üê hpq, s.stripe_position])
  exact X.spectralSequencePageInfinityIso data pq
    (hdata.deg n - 1) (hdata.deg n) (hdata.deg n + 1) _ _
    (by rw [‚Üê hdata.deg_stripe pq, ‚Üê hpq, s.stripe_position]) _ _ rfl (by rw [hpq])

namespace Iso‚ÇÉ

section

variable (h : data.i‚ÇÅ pq ‚â§ hdata.mapWithBot n i)

noncomputable def hom :
    X.pageInfinity (hdata.deg n - 1) (hdata.deg n) (hdata.deg n + 1) (by simp) (by simp)
      (data.i‚ÇÅ pq) (data.i‚ÇÇ (s.position n j)) (by simpa only [hpq] using data.le‚ÇÅ‚ÇÇ pq) ‚ü∂
    X.pageInfinity (hdata.deg n - 1) (hdata.deg n) (hdata.deg n + 1) (by simp) (by simp)
      (hdata.mapWithBot n i) (data.i‚ÇÇ (s.position n j))
        (hdata.mapWithBot_pred_le_i‚ÇÇ n i j hij) :=
  X.EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ' _ _ _ _ _ _ _ _ _ _ _ h _ _

instance : IsIso (hom X hdata n i j hij pq hpq h) :=
  X.isIso‚ÇÅ_of_convergesInDegree hdata n i j hij pq hpq _ _ _ rfl rfl rfl _ _ _ _ _ _ rfl

noncomputable def iso := asIso (hom X hdata n i j hij pq hpq h)

@[reassoc (attr := simp)]
lemma œÄ_pageInfinityIso_hom_iso_hom :
    œÄ X hdata n j pq hpq ‚â´ (pageInfinityIso X hdata n j pq hpq).hom ‚â´
      (iso X hdata n i j hij pq hpq h).hom =
        X.abutmentFiltrationToPageInfinity _ _ _ _ _ _ _ _ := by
  subst hpq
  simp [œÄ, pageInfinityIso, iso, hom]

end

section

variable (h : hdata.mapWithBot n i ‚â§ data.i‚ÇÅ pq)

/-- hom' -/
noncomputable def hom' :
    X.pageInfinity (hdata.deg n - 1) (hdata.deg n) (hdata.deg n + 1) (by simp) (by simp)
      (hdata.mapWithBot n i) (data.i‚ÇÇ (s.position n j))
        (hdata.mapWithBot_pred_le_i‚ÇÇ n i j hij) ‚ü∂
    X.pageInfinity (hdata.deg n - 1) (hdata.deg n) (hdata.deg n + 1) (by simp) (by simp)
      (data.i‚ÇÅ pq) (data.i‚ÇÇ (s.position n j)) (by simpa only [hpq] using data.le‚ÇÅ‚ÇÇ pq) :=
  X.EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ' _ _ _ _ _ _ _ _ _ _ _ h _ _

instance : IsIso (hom' X hdata n i j hij pq hpq h) :=
  X.isIso‚ÇÇ_of_convergesInDegree hdata n i j hij pq hpq _ _ _ rfl rfl rfl _ _ _ _ _ _ rfl

/-- iso' -/
noncomputable def iso' := (asIso (hom' X hdata n i j hij pq hpq h)).symm

lemma œÄ_pageInfinityIso_hom :
    œÄ X hdata n j pq hpq ‚â´ (pageInfinityIso X hdata n j pq hpq).hom =
      X.abutmentFiltrationToPageInfinity _ _ _ _ _ _ _ _ ‚â´
        (iso' X hdata n i j hij pq hpq h).inv := by
  subst hpq
  simp [œÄ, pageInfinityIso, iso', hom']

@[reassoc (attr := simp)]
lemma œÄ_pageInfinityIso_hom_iso'_hom :
    œÄ X hdata n j pq hpq ‚â´ (pageInfinityIso X hdata n j pq hpq).hom ‚â´
      (iso' X hdata n i j hij pq hpq h).hom =
        X.abutmentFiltrationToPageInfinity _ _ _ _ _ _ _ _ := by
  rw [‚Üê cancel_mono (iso' X hdata n i j hij pq hpq h).inv, assoc, assoc,
    Iso.hom_inv_id, comp_id, œÄ_pageInfinityIso_hom]

end

end Iso‚ÇÉ

noncomputable def iso‚ÇÉ :
    X.pageInfinity (hdata.deg n - 1) (hdata.deg n) (hdata.deg n + 1) (by simp) (by simp)
      (data.i‚ÇÅ pq) (data.i‚ÇÇ (s.position n j)) (by simpa only [hpq] using data.le‚ÇÅ‚ÇÇ pq) ‚âÖ
    X.pageInfinity (hdata.deg n - 1) (hdata.deg n) (hdata.deg n + 1) (by simp) (by simp)
      (hdata.mapWithBot n i) (data.i‚ÇÇ (s.position n j))
        (hdata.mapWithBot_pred_le_i‚ÇÇ n i j hij) := by
  by_cases h : data.i‚ÇÅ pq ‚â§ hdata.mapWithBot n i
  ¬∑ exact Iso‚ÇÉ.iso X hdata n i j hij pq hpq h
  ¬∑ exact Iso‚ÇÉ.iso' X hdata n i j hij pq hpq
      (by cases LinearOrder.le_total (data.i‚ÇÅ pq) (hdata.mapWithBot n i) <;> tauto)

@[reassoc (attr := simp)]
lemma œÄ_pageInfinityIso_hom_iso‚ÇÉ_hom :
    œÄ X hdata n j pq hpq ‚â´ (pageInfinityIso X hdata n j pq hpq).hom ‚â´
      (iso‚ÇÉ X hdata n i j hij pq hpq).hom =
        X.abutmentFiltrationToPageInfinity _ _ _ _ _ _ _ _ := by
  by_cases h : data.i‚ÇÅ pq ‚â§ hdata.mapWithBot n i
  ¬∑ simp [iso‚ÇÉ, dif_pos h]
  ¬∑ simp [iso‚ÇÉ, dif_neg h]

noncomputable def iso : composableArrows X hdata n i j hij pq hpq ‚âÖ
    (X.abutmentFiltrationShortComplex (hdata.deg n - 1) (hdata.deg n) (hdata.deg n + 1)
      (by simp) (by simp) _ _ (hdata.mapWithBot_pred_le_i‚ÇÇ n i j hij)).toComposableArrows :=
  isoMk‚ÇÇ (Iso.refl _) (Iso.refl _)
    (pageInfinityIso X hdata n j pq hpq ‚â™‚â´ iso‚ÇÉ X hdata n i j hij pq hpq) (by simp)
    (by simp [Precomp.map])

lemma composableArrows_exact :
    (composableArrows X hdata n i j hij pq hpq).Exact :=
  ComposableArrows.exact_of_iso (iso X hdata n i j hij pq hpq).symm
    (X.abutmentFiltrationShortComplex_shortExact _ _ _ _ _ _ _ _).exact.exact_toComposableArrows

end

end ConvergesAt

noncomputable def convergesAt :
    (X.spectralSequence data).StronglyConvergesToInDegree s n (X.abutment (hdata.deg n)) where
  hasPageInfinityAt pq hpq := by
    have := X.hasPageInfinityAt_of_convergesInDegree hdata n pq hpq
    infer_instance
  filtration' := hdata.mapWithBotFunctor n ‚ãô X.abutmentFiltrationFunctor (hdata.deg n)
  exists_isZero' := by
    obtain ‚ü®i, hi‚ü© := X.isZero‚ÇÅ_of_convergesInDegree hdata n
    exact ‚ü®i, X.isZero_image _ _ _ _ _ hi‚ü©
  exists_isIso' := by
    obtain ‚ü®i, hi‚ü© := X.isZero‚ÇÇ_of_convergesInDegree hdata n
    exact ‚ü®i, X.isIso_imageŒπ _ _ _ _ _ hi‚ü©
  œÄ' i pq hpq := ConvergesAt.œÄ X hdata n i pq hpq
  epi_œÄ' i pq hpq := by infer_instance
  comp_œÄ' i j hij pq hpq :=
    (ConvergesAt.composableArrows_exact X hdata n i j hij pq hpq).toIsComplex.zero 0
  exact_œÄ' i j hij pq hpq := (ConvergesAt.composableArrows_exact X hdata n i j hij pq hpq).exact 0

instance (X : SpectralObject C ‚Ñ§t) [X.IsFirstQuadrant] (n : ‚Ñ§) :
    X.ConvergesInDegree mkDataE‚ÇÇCohomologicalCompatibility n where
  isZero‚ÇÅ := ‚ü®1, fun j hj => by
    apply isZero‚ÇÅ_of_isFirstQuadrant
    obtain rfl : j = 0 := by
      erw [Option.some.injEq] at hj
      linarith
    simp‚ü©
  isZero‚ÇÇ := ‚ü®n + 1, by
    apply isZero‚ÇÇ_of_isFirstQuadrant
    simp‚ü©
  isIso‚ÇÅ := by
    rintro i j hij pq hpq _ _ _ rfl rfl rfl h
    exfalso
    apply ne_of_lt h
    exact mkDataE‚ÇÇCohomological_i‚ÇÅ_eq_i‚ÇÇ n i j hij pq hpq
  isIso‚ÇÇ := by
    rintro i j hij pq hpq _ _ _ rfl rfl rfl h
    exfalso
    apply ne_of_lt h
    induction i using WithBot.recBotCoe with
    | bot => simp at hij
    | coe i => exact (mkDataE‚ÇÇCohomological_i‚ÇÅ_eq_i‚ÇÇ n i j hij pq hpq).symm

instance (X : SpectralObject C ‚Ñ§t) [X.IsFirstQuadrant] (n : ‚Ñï) :
    X.ConvergesInDegree mkDataE‚ÇÇCohomologicalNatCompatibility n where
  isZero‚ÇÅ := ‚ü®0, fun j hj => by
    exfalso
    dsimp at hj ‚ä¢
    change ‚ä• = _ at hj
    simp at hj‚ü©
  isZero‚ÇÇ := ‚ü®Fin.last _, X.isZero‚ÇÇ_of_isFirstQuadrant _ _ _ _ (by simp)‚ü©
  isIso‚ÇÅ := by
    rintro ‚ü®i, hi‚ü© ‚ü®j, hj‚ü© hij pq hpq _ _ _ rfl rfl rfl h
    exfalso
    apply ne_of_lt h
    obtain _|j := j
    ¬∑ exfalso
      change ‚ä• = WithBot.some _ at hij
      simp at hij
    ¬∑ dsimp at hij h hpq ‚ä¢
      obtain rfl : j = i := by simpa using hij
      simp [‚Üê hpq]
  isIso‚ÇÇ := by
    rintro i ‚ü®j, hj‚ü© hij pq hpq _ _ _ rfl rfl rfl h
    obtain _|‚ü®i, hi‚ü© := i
    ¬∑ obtain _|j := j
      ¬∑ intro n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ _
        subst hpq
        dsimp
        apply X.isIso_EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ'
        ¬∑ apply X.isIso_H_map_twoŒ¥‚ÇÅToŒ¥‚ÇÄ' n‚ÇÅ n‚ÇÇ hn‚ÇÇ
          ¬∑ apply isZero‚ÇÅ_of_isFirstQuadrant
            simp
          ¬∑ apply isZero‚ÇÅ_of_isFirstQuadrant
            simp
        ¬∑ refine ‚ü®0, IsZero.eq_of_src ?_ _ _, IsZero.eq_of_src ?_ _ _‚ü©
          ¬∑ apply isZero‚ÇÅ_of_isFirstQuadrant
            simp
          ¬∑ apply isZero‚ÇÅ_of_isFirstQuadrant
            simp
      ¬∑ dsimp at hij
        change some _ = none at hij
        simp at hij
    ¬∑ exfalso
      apply ne_of_lt h
      dsimp at hpq hij h ‚ä¢
      obtain _|j := j
      ¬∑ simp at hij
      ¬∑ simp at hij
        obtain rfl : j = i := by
          change some _ = _ at hij
          simpa using hij
        rw [‚Üê hpq]
        rfl

instance (X : SpectralObject C ‚Ñ§t) [X.IsThirdQuadrant] (n : ‚Ñï) :
    X.ConvergesInDegree mkDataE‚ÇÇHomologicalNatCompatibility n where
  isZero‚ÇÅ := ‚ü®0, fun j hj => by
    exfalso
    dsimp at hj
    change ‚ä• = _ at hj
    simp at hj‚ü©
  isZero‚ÇÇ := ‚ü®Fin.last _, X.isZero‚ÇÅ_of_isThirdQuadrant _ _ _ (by simp) _‚ü©
  isIso‚ÇÅ := by
    rintro ‚ü®i, hi‚ü© ‚ü®j, hj‚ü© hij pq hpq _ _ _ rfl rfl rfl h
    exfalso
    apply ne_of_lt h
    obtain _|j := j
    ¬∑ change ‚ä• = _ at hij
      simp at hij
    ¬∑ obtain rfl : j = i := by simpa using hij
      rw [‚Üê hpq]
      dsimp
      congr 1
      linarith [Nat.add_sub_of_le (show j.succ ‚â§ n by linarith),
        Nat.add_sub_of_le (show j ‚â§ n by linarith)]
  isIso‚ÇÇ := by
    rintro i ‚ü®j, hj‚ü© hij pq hpq _ _ _ rfl rfl rfl h
    obtain _|‚ü®i, hi‚ü© := i
    ¬∑ dsimp at hpq h
      subst hpq
      obtain _|j := j
      ¬∑ intro n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ hn‚ÇÅ'
        apply X.isIso_EMapFourŒ¥‚ÇÇToŒ¥‚ÇÅ'
        ¬∑ apply X.isIso_H_map_twoŒ¥‚ÇÅToŒ¥‚ÇÄ' n‚ÇÅ n‚ÇÇ hn‚ÇÇ
          ¬∑ apply X.isZero‚ÇÇ_of_isThirdQuadrant
            subst hn‚ÇÅ'
            rfl
          ¬∑ apply X.isZero‚ÇÇ_of_isThirdQuadrant
            subst hn‚ÇÅ' hn‚ÇÇ
            simp
        ¬∑ refine ‚ü®0, IsZero.eq_of_src ?_ _ _, IsZero.eq_of_src ?_ _ _‚ü©
          ¬∑ apply X.isZero‚ÇÇ_of_isThirdQuadrant
            exact bot_le
          ¬∑ apply X.isZero‚ÇÇ_of_isThirdQuadrant
            subst hn‚ÇÅ' hn‚ÇÇ
            simp
      ¬∑ change some _ = _ at hij
        simp at hij
    ¬∑ exfalso
      apply ne_of_lt h
      obtain _|j := j
      ¬∑ change ‚ä• = _ at hij
        simp at hij
      ¬∑ obtain rfl : j = i := by
          change some _ = some _ at hij
          simpa using hij
        rw [‚Üê hpq]
        dsimp
        congr 1
        linarith [Nat.add_sub_of_le (show j.succ ‚â§ n by linarith),
          Nat.add_sub_of_le (show j ‚â§ n by linarith)]

end SpectralObject

end Abelian

end CategoryTheory
