/-
Copyright (c) 2021 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Jo√´l Riou
-/
import Mathlib.Algebra.Homology.HomologicalComplex

#align_import algebra.homology.flip from "leanprover-community/mathlib"@"ff511590476ef357b6132a45816adc120d5d7b1d"

/-!
# Bicomplexes

Given a category `C` with zero morphisms and two complex shapes
`c‚ÇÅ : ComplexShape I‚ÇÅ` and `c‚ÇÇ : ComplexShape I‚ÇÇ`, we define
the type of bicomplexes `HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ` as an
abbreviation for `HomologicalComplex (HomologicalComplex C c‚ÇÇ) c‚ÇÅ`.
In particular, if `K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ`, then
for each `i‚ÇÅ : I‚ÇÅ`, `K.X i‚ÇÅ` is a column of `K`.

In this file, we obtain the equivalence of categories
`HomologicalComplex‚ÇÇ.flipEquivalence : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ ‚âå HomologicalComplex‚ÇÇ C c‚ÇÇ c‚ÇÅ`
which is obtained by exchanging the horizontal and vertical directions.

-/


open CategoryTheory Limits

variable (C : Type*) [Category C] [HasZeroMorphisms C]
  {I‚ÇÅ I‚ÇÇ : Type*} (c‚ÇÅ : ComplexShape I‚ÇÅ) (c‚ÇÇ : ComplexShape I‚ÇÇ)

/-- Given a category `C` and two complex shapes `c‚ÇÅ` and `c‚ÇÇ` on types `I‚ÇÅ` and `I‚ÇÇ`,
the associated type of bicomplexes `HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ` is
`K : HomologicalComplex (HomologicalComplex C c‚ÇÇ) c‚ÇÅ`. Then, the object in
position `‚ü®i‚ÇÅ, i‚ÇÇ‚ü©` can be obtained as `(K.X i‚ÇÅ).X i‚ÇÇ`. -/
abbrev HomologicalComplex‚ÇÇ :=
  HomologicalComplex (HomologicalComplex C c‚ÇÇ) c‚ÇÅ

namespace HomologicalComplex‚ÇÇ

open HomologicalComplex

variable {C c‚ÇÅ c‚ÇÇ}

/-- The graded object indexed by `I‚ÇÅ √ó I‚ÇÇ` induced by a bicomplex. -/
def toGradedObject (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ) :
    GradedObject (I‚ÇÅ √ó I‚ÇÇ) C :=
  fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© => (K.X i‚ÇÅ).X i‚ÇÇ

lemma shape_f (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ) (i‚ÇÅ i‚ÇÅ' : I‚ÇÅ) (h : ¬¨ c‚ÇÅ.Rel i‚ÇÅ i‚ÇÅ') (i‚ÇÇ : I‚ÇÇ) :
    (K.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ = 0 := by
  rw [K.shape _ _ h, zero_f]

@[reassoc (attr := simp)]
lemma d_f_comp_d_f (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ)
    (i‚ÇÅ i‚ÇÅ' i‚ÇÅ'' : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) :
    (K.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ ‚â´ (K.d i‚ÇÅ' i‚ÇÅ'').f i‚ÇÇ = 0 := by
  rw [‚Üê comp_f, d_comp_d, zero_f]

@[reassoc]
lemma d_comm (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ) (i‚ÇÅ i‚ÇÅ' : I‚ÇÅ) (i‚ÇÇ i‚ÇÇ' : I‚ÇÇ) :
    (K.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ ‚â´ (K.X i‚ÇÅ').d i‚ÇÇ i‚ÇÇ' = (K.X i‚ÇÅ).d i‚ÇÇ i‚ÇÇ' ‚â´ (K.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ' := by
  simp

@[reassoc (attr := simp)]
lemma comm_f {K L : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ} (f : K ‚ü∂ L) (i‚ÇÅ i‚ÇÅ' : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) :
    (f.f i‚ÇÅ).f i‚ÇÇ ‚â´ (L.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ = (K.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ ‚â´ (f.f i‚ÇÅ').f i‚ÇÇ :=
  congr_hom (f.comm i‚ÇÅ i‚ÇÅ') i‚ÇÇ

/-- Flip a complex of complexes over the diagonal,
exchanging the horizontal and vertical directions.
-/
@[simps]
def flip (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ) : HomologicalComplex‚ÇÇ C c‚ÇÇ c‚ÇÅ where
  X i :=
    { X := fun j => (K.X j).X i
      d := fun j j' => (K.d j j').f i
      shape := fun j j' w => K.shape_f _ _ w i }
  d i i' := { f := fun j => (K.X j).d i i' }
  shape i i' w := by
    ext j
    exact (K.X j).shape i i' w
#align homological_complex.flip_obj HomologicalComplex‚ÇÇ.flip

variable (C c‚ÇÅ c‚ÇÇ)

/-- Flipping a complex of complexes over the diagonal, as a functor. -/
@[simps]
def flipFunctor :
    HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ ‚•§ HomologicalComplex‚ÇÇ C c‚ÇÇ c‚ÇÅ where
  obj K := K.flip
  map {K L} f :=
    { f := fun i =>
        { f := fun j => (f.f j).f i
          comm' := by intros; simp }
      comm' := by intros; ext; simp }
#align homological_complex.flip HomologicalComplex‚ÇÇ.flipFunctor

/-- Auxiliary definition for `HomologicalComplex‚ÇÇ.flipEquivalence`. -/
@[simps!]
def flipEquivalenceUnitIso :
    ùü≠ (HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ) ‚âÖ flipFunctor C c‚ÇÅ c‚ÇÇ ‚ãô flipFunctor C c‚ÇÇ c‚ÇÅ :=
  NatIso.ofComponents (fun K => HomologicalComplex.Hom.isoOfComponents (fun i‚ÇÅ =>
    HomologicalComplex.Hom.isoOfComponents (fun i‚ÇÇ => Iso.refl _)
    (by aesop_cat)) (by aesop_cat)) (by aesop_cat)
#align homological_complex.flip_equivalence_unit_iso HomologicalComplex‚ÇÇ.flipEquivalenceUnitIso

/-- Auxiliary definition for `HomologicalComplex‚ÇÇ.flipEquivalence`. -/
@[simps!]
def flipEquivalenceCounitIso :
    flipFunctor C c‚ÇÇ c‚ÇÅ ‚ãô flipFunctor C c‚ÇÅ c‚ÇÇ ‚âÖ ùü≠ (HomologicalComplex‚ÇÇ C c‚ÇÇ c‚ÇÅ) :=
  NatIso.ofComponents (fun K => HomologicalComplex.Hom.isoOfComponents (fun i‚ÇÇ =>
    HomologicalComplex.Hom.isoOfComponents (fun i‚ÇÅ => Iso.refl _)
    (by aesop_cat)) (by aesop_cat)) (by aesop_cat)
#align homological_complex.flip_equivalence_counit_iso HomologicalComplex‚ÇÇ.flipEquivalenceCounitIso

/-- Flipping a complex of complexes over the diagonal, as an equivalence of categories. -/
@[simps]
def flipEquivalence :
    HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ ‚âå HomologicalComplex‚ÇÇ C c‚ÇÇ c‚ÇÅ where
  functor := flipFunctor C c‚ÇÅ c‚ÇÇ
  inverse := flipFunctor C c‚ÇÇ c‚ÇÅ
  unitIso := flipEquivalenceUnitIso C c‚ÇÅ c‚ÇÇ
  counitIso := flipEquivalenceCounitIso C c‚ÇÅ c‚ÇÇ
#align homological_complex.flip_equivalence HomologicalComplex‚ÇÇ.flipEquivalence

end HomologicalComplex‚ÇÇ
