/-
Copyright (c) 2021 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Jo√´l Riou
-/
import Mathlib.Algebra.Homology.HomologicalComplex

#align_import algebra.homology.flip from "leanprover-community/mathlib"@"ff511590476ef357b6132a45816adc120d5d7b1d"

/-!
# Bicomplexes

Given a category `C` with zero morphisms and two complex shapes
`c‚ÇÅ : ComplexShape I‚ÇÅ` and `c‚ÇÇ : ComplexShape I‚ÇÇ`, we define
the type of bicomplexes `HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ` as an
abbreviation for `HomologicalComplex (HomologicalComplex C c‚ÇÇ) c‚ÇÅ`.
In particular, if `K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ`, then
for each `i‚ÇÅ : I‚ÇÅ`, `K.X i‚ÇÅ` is a column of `K`.

In this file, we obtain the equivalence of categories
`HomologicalComplex‚ÇÇ.flipEquivalence : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ ‚âå HomologicalComplex‚ÇÇ C c‚ÇÇ c‚ÇÅ`
which is obtained by exchanging the horizontal and vertical directions.

-/


open CategoryTheory Limits

variable (C : Type*) [Category C] [HasZeroMorphisms C]
  {I‚ÇÅ I‚ÇÇ : Type*} (c‚ÇÅ : ComplexShape I‚ÇÅ) (c‚ÇÇ : ComplexShape I‚ÇÇ)

/-- Given a category `C` and two complex shapes `c‚ÇÅ` and `c‚ÇÇ` on types `I‚ÇÅ` and `I‚ÇÇ`,
the associated type of bicomplexes `HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ` is
`K : HomologicalComplex (HomologicalComplex C c‚ÇÇ) c‚ÇÅ`. Then, the object in
position `‚ü®i‚ÇÅ, i‚ÇÇ‚ü©` can be obtained as `(K.X i‚ÇÅ).X i‚ÇÇ`. -/
abbrev HomologicalComplex‚ÇÇ :=
  HomologicalComplex (HomologicalComplex C c‚ÇÇ) c‚ÇÅ

namespace HomologicalComplex‚ÇÇ

open HomologicalComplex

variable {C c‚ÇÅ c‚ÇÇ}

/-- The graded object indexed by `I‚ÇÅ √ó I‚ÇÇ` induced by a bicomplex. -/
def toGradedObject (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ) :
    GradedObject (I‚ÇÅ √ó I‚ÇÇ) C :=
  fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© => (K.X i‚ÇÅ).X i‚ÇÇ

/-- The morphism of graded objects induced by a morphism of bicomplexes. -/
def toGradedObjectMap {K L : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ} (œÜ : K ‚ü∂ L) :
    K.toGradedObject ‚ü∂ L.toGradedObject :=
  fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© => (œÜ.f i‚ÇÅ).f i‚ÇÇ

@[simp]
lemma toGradedObjectMap_apply {K L : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ} (œÜ : K ‚ü∂ L) (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) :
    toGradedObjectMap œÜ ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© = (œÜ.f i‚ÇÅ).f i‚ÇÇ := rfl

variable (C c‚ÇÅ c‚ÇÇ) in
/-- The functor which sends a bicomplex to its associated graded object. -/
@[simps]
def toGradedObjectFunctor : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ ‚•§ GradedObject (I‚ÇÅ √ó I‚ÇÇ) C where
  obj K := K.toGradedObject
  map œÜ := toGradedObjectMap œÜ

instance : Faithful (toGradedObjectFunctor C c‚ÇÅ c‚ÇÇ) where
  map_injective {_ _ œÜ‚ÇÅ œÜ‚ÇÇ} h := by
    ext i‚ÇÅ i‚ÇÇ
    exact congr_fun h ‚ü®i‚ÇÅ, i‚ÇÇ‚ü©

section OfGradedObject

variable (c‚ÇÅ c‚ÇÇ)
variable (X : GradedObject (I‚ÇÅ √ó I‚ÇÇ) C)
    (d‚ÇÅ : ‚àÄ (i‚ÇÅ i‚ÇÅ' : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ), X ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© ‚ü∂ X ‚ü®i‚ÇÅ', i‚ÇÇ‚ü©)
    (d‚ÇÇ : ‚àÄ (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ i‚ÇÇ' : I‚ÇÇ), X ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© ‚ü∂ X ‚ü®i‚ÇÅ, i‚ÇÇ'‚ü©)
    (shape‚ÇÅ : ‚àÄ (i‚ÇÅ i‚ÇÅ' : I‚ÇÅ) (_ : ¬¨c‚ÇÅ.Rel i‚ÇÅ i‚ÇÅ') (i‚ÇÇ : I‚ÇÇ), d‚ÇÅ i‚ÇÅ i‚ÇÅ' i‚ÇÇ = 0)
    (shape‚ÇÇ : ‚àÄ (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ i‚ÇÇ' : I‚ÇÇ) (_ : ¬¨c‚ÇÇ.Rel i‚ÇÇ i‚ÇÇ'), d‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÇ' = 0)
    (d‚ÇÅ_comp_d‚ÇÅ : ‚àÄ (i‚ÇÅ i‚ÇÅ' i‚ÇÅ'' : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ), d‚ÇÅ i‚ÇÅ i‚ÇÅ' i‚ÇÇ ‚â´ d‚ÇÅ i‚ÇÅ' i‚ÇÅ'' i‚ÇÇ = 0)
    (d‚ÇÇ_comp_d‚ÇÇ : ‚àÄ (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ i‚ÇÇ' i‚ÇÇ'' : I‚ÇÇ), d‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÇ' ‚â´ d‚ÇÇ i‚ÇÅ i‚ÇÇ' i‚ÇÇ'' = 0)
    (comm : ‚àÄ (i‚ÇÅ i‚ÇÅ' : I‚ÇÅ) (i‚ÇÇ i‚ÇÇ' : I‚ÇÇ), d‚ÇÅ i‚ÇÅ i‚ÇÅ' i‚ÇÇ ‚â´ d‚ÇÇ i‚ÇÅ' i‚ÇÇ i‚ÇÇ' =
      d‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÇ' ‚â´ d‚ÇÅ i‚ÇÅ i‚ÇÅ' i‚ÇÇ')

/-- Constructor for bicomplexes taking as inputs a graded object, horizontal differentials
and vertical differentials satisfying suitable relations. -/
@[simps]
def ofGradedObject :
    HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ where
  X i‚ÇÅ :=
    { X := fun i‚ÇÇ => X ‚ü®i‚ÇÅ, i‚ÇÇ‚ü©
      d := fun i‚ÇÇ i‚ÇÇ' => d‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÇ'
      shape := shape‚ÇÇ i‚ÇÅ
      d_comp_d' := by intros; apply d‚ÇÇ_comp_d‚ÇÇ }
  d i‚ÇÅ i‚ÇÅ' :=
    { f := fun i‚ÇÇ => d‚ÇÅ i‚ÇÅ i‚ÇÅ' i‚ÇÇ
      comm' := by intros; apply comm }
  shape i‚ÇÅ i‚ÇÅ' h := by
    ext i‚ÇÇ
    exact shape‚ÇÅ i‚ÇÅ i‚ÇÅ' h i‚ÇÇ
  d_comp_d' i‚ÇÅ i‚ÇÅ' i‚ÇÅ'' _ _ := by ext i‚ÇÇ; apply d‚ÇÅ_comp_d‚ÇÅ

@[simp]
lemma ofGradedObject_toGradedObject :
    (ofGradedObject c‚ÇÅ c‚ÇÇ X d‚ÇÅ d‚ÇÇ shape‚ÇÅ shape‚ÇÇ d‚ÇÅ_comp_d‚ÇÅ d‚ÇÇ_comp_d‚ÇÇ comm).toGradedObject = X :=
  rfl

end OfGradedObject

/-- Constructor for a morphism `K ‚ü∂ L` in the category `HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ` which
takes as inputs a morphism `f : K.toGradedObject ‚ü∂ L.toGradedObject` and
the compatibilites with both horizontal and vertical differentials. -/
@[simps!]
def homMk {K L : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ}
    (f : K.toGradedObject ‚ü∂ L.toGradedObject)
    (comm‚ÇÅ : ‚àÄ i‚ÇÅ i‚ÇÅ' i‚ÇÇ, c‚ÇÅ.Rel i‚ÇÅ i‚ÇÅ' ‚Üí
      f ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© ‚â´ (L.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ = (K.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ ‚â´ f ‚ü®i‚ÇÅ', i‚ÇÇ‚ü©)
    (comm‚ÇÇ : ‚àÄ i‚ÇÅ i‚ÇÇ i‚ÇÇ', c‚ÇÇ.Rel i‚ÇÇ i‚ÇÇ' ‚Üí
      f ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© ‚â´ (L.X i‚ÇÅ).d i‚ÇÇ i‚ÇÇ' = (K.X i‚ÇÅ).d i‚ÇÇ i‚ÇÇ' ‚â´ f ‚ü®i‚ÇÅ, i‚ÇÇ'‚ü©) : K ‚ü∂ L where
  f i‚ÇÅ :=
    { f := fun i‚ÇÇ => f ‚ü®i‚ÇÅ, i‚ÇÇ‚ü©
      comm' := comm‚ÇÇ i‚ÇÅ }
  comm' i‚ÇÅ i‚ÇÅ' h‚ÇÅ := by
    ext i‚ÇÇ
    exact comm‚ÇÅ i‚ÇÅ i‚ÇÅ' i‚ÇÇ h‚ÇÅ

lemma shape_f (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ) (i‚ÇÅ i‚ÇÅ' : I‚ÇÅ) (h : ¬¨ c‚ÇÅ.Rel i‚ÇÅ i‚ÇÅ') (i‚ÇÇ : I‚ÇÇ) :
    (K.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ = 0 := by
  rw [K.shape _ _ h, zero_f]

@[reassoc (attr := simp)]
lemma d_f_comp_d_f (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ)
    (i‚ÇÅ i‚ÇÅ' i‚ÇÅ'' : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) :
    (K.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ ‚â´ (K.d i‚ÇÅ' i‚ÇÅ'').f i‚ÇÇ = 0 := by
  rw [‚Üê comp_f, d_comp_d, zero_f]

@[reassoc]
lemma d_comm (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ) (i‚ÇÅ i‚ÇÅ' : I‚ÇÅ) (i‚ÇÇ i‚ÇÇ' : I‚ÇÇ) :
    (K.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ ‚â´ (K.X i‚ÇÅ').d i‚ÇÇ i‚ÇÇ' = (K.X i‚ÇÅ).d i‚ÇÇ i‚ÇÇ' ‚â´ (K.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ' := by
  simp

@[reassoc (attr := simp)]
lemma comm_f {K L : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ} (f : K ‚ü∂ L) (i‚ÇÅ i‚ÇÅ' : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) :
    (f.f i‚ÇÅ).f i‚ÇÇ ‚â´ (L.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ = (K.d i‚ÇÅ i‚ÇÅ').f i‚ÇÇ ‚â´ (f.f i‚ÇÅ').f i‚ÇÇ :=
  congr_hom (f.comm i‚ÇÅ i‚ÇÅ') i‚ÇÇ

/-- Flip a complex of complexes over the diagonal,
exchanging the horizontal and vertical directions.
-/
@[simps]
def flip (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ) : HomologicalComplex‚ÇÇ C c‚ÇÇ c‚ÇÅ where
  X i :=
    { X := fun j => (K.X j).X i
      d := fun j j' => (K.d j j').f i
      shape := fun j j' w => K.shape_f _ _ w i }
  d i i' := { f := fun j => (K.X j).d i i' }
  shape i i' w := by
    ext j
    exact (K.X j).shape i i' w
#align homological_complex.flip_obj HomologicalComplex‚ÇÇ.flip

@[simp]
lemma flip_flip (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ) : K.flip.flip = K := rfl

variable (C c‚ÇÅ c‚ÇÇ)

/-- Flipping a complex of complexes over the diagonal, as a functor. -/
@[simps]
def flipFunctor :
    HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ ‚•§ HomologicalComplex‚ÇÇ C c‚ÇÇ c‚ÇÅ where
  obj K := K.flip
  map {K L} f :=
    { f := fun i =>
        { f := fun j => (f.f j).f i
          comm' := by intros; simp }
      comm' := by intros; ext; simp }
#align homological_complex.flip HomologicalComplex‚ÇÇ.flipFunctor

/-- Auxiliary definition for `HomologicalComplex‚ÇÇ.flipEquivalence`. -/
@[simps!]
def flipEquivalenceUnitIso :
    ùü≠ (HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ) ‚âÖ flipFunctor C c‚ÇÅ c‚ÇÇ ‚ãô flipFunctor C c‚ÇÇ c‚ÇÅ :=
  NatIso.ofComponents (fun K => HomologicalComplex.Hom.isoOfComponents (fun i‚ÇÅ =>
    HomologicalComplex.Hom.isoOfComponents (fun i‚ÇÇ => Iso.refl _)
    (by aesop_cat)) (by aesop_cat)) (by aesop_cat)
#align homological_complex.flip_equivalence_unit_iso HomologicalComplex‚ÇÇ.flipEquivalenceUnitIso

/-- Auxiliary definition for `HomologicalComplex‚ÇÇ.flipEquivalence`. -/
@[simps!]
def flipEquivalenceCounitIso :
    flipFunctor C c‚ÇÇ c‚ÇÅ ‚ãô flipFunctor C c‚ÇÅ c‚ÇÇ ‚âÖ ùü≠ (HomologicalComplex‚ÇÇ C c‚ÇÇ c‚ÇÅ) :=
  NatIso.ofComponents (fun K => HomologicalComplex.Hom.isoOfComponents (fun i‚ÇÇ =>
    HomologicalComplex.Hom.isoOfComponents (fun i‚ÇÅ => Iso.refl _)
    (by aesop_cat)) (by aesop_cat)) (by aesop_cat)
#align homological_complex.flip_equivalence_counit_iso HomologicalComplex‚ÇÇ.flipEquivalenceCounitIso

/-- Flipping a complex of complexes over the diagonal, as an equivalence of categories. -/
@[simps]
def flipEquivalence :
    HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ ‚âå HomologicalComplex‚ÇÇ C c‚ÇÇ c‚ÇÅ where
  functor := flipFunctor C c‚ÇÅ c‚ÇÇ
  inverse := flipFunctor C c‚ÇÇ c‚ÇÅ
  unitIso := flipEquivalenceUnitIso C c‚ÇÅ c‚ÇÇ
  counitIso := flipEquivalenceCounitIso C c‚ÇÅ c‚ÇÇ
#align homological_complex.flip_equivalence HomologicalComplex‚ÇÇ.flipEquivalence

variable (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ)

/-- The obvious isomorphism `(K.X x‚ÇÅ).X x‚ÇÇ ‚âÖ (K.X y‚ÇÅ).X y‚ÇÇ` when `x‚ÇÅ = y‚ÇÅ` and `x‚ÇÇ = y‚ÇÇ`. -/
def XXIsoOfEq {x‚ÇÅ y‚ÇÅ : I‚ÇÅ} (h‚ÇÅ : x‚ÇÅ = y‚ÇÅ) {x‚ÇÇ y‚ÇÇ : I‚ÇÇ} (h‚ÇÇ : x‚ÇÇ = y‚ÇÇ) :
    (K.X x‚ÇÅ).X x‚ÇÇ ‚âÖ (K.X y‚ÇÅ).X y‚ÇÇ :=
  eqToIso (by subst h‚ÇÅ h‚ÇÇ; rfl)

@[simp]
lemma XXIsoOfEq_rfl (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) :
    K.XXIsoOfEq (rfl : i‚ÇÅ = i‚ÇÅ) (rfl : i‚ÇÇ = i‚ÇÇ) = Iso.refl _ := rfl


end HomologicalComplex‚ÇÇ
