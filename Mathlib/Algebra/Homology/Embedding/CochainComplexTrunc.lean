/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.Embedding.CochainComplex
import Mathlib.Algebra.Homology.CochainComplexMinus
import Mathlib.CategoryTheory.Limits.Constructions.EventuallyConstant

/-!
# Filtration of a cochain complex

-/

open CategoryTheory Category Limits

namespace CochainComplex

variable {C : Type*} [Category C] [Abelian C]
  (K L : CochainComplex C ‚Ñ§)

instance (n : ‚Ñ§) : Mono (K.ŒπTruncLE n) := by
  dsimp only [ŒπTruncLE]
  infer_instance

namespace truncLELEIsoOfLE

lemma isIso (n m : ‚Ñ§) (h : n ‚â§ m := by omega) :
    IsIso ((K.truncLE n).ŒπTruncLE m) := by
  rw [isIso_ŒπTruncLE_iff]
  exact isStrictlyLE_of_le _ _ _ h

end truncLELEIsoOfLE

@[simps! hom]
noncomputable def truncLELEIsoOfLE (n m : ‚Ñ§) (h : n ‚â§ m := by omega) :
    (K.truncLE n).truncLE m ‚âÖ K.truncLE n :=
  have := truncLELEIsoOfLE.isIso K n m h
  asIso ((K.truncLE n).ŒπTruncLE m)

noncomputable def truncLEMapOfLE (n m : ‚Ñ§) (h : n ‚â§ m := by omega) :
    K.truncLE n ‚ü∂ K.truncLE m :=
  (K.truncLELEIsoOfLE n m h).inv ‚â´
    HomologicalComplex.truncLEMap
      (K.ŒπTruncLE n) (ComplexShape.embeddingUpIntLE m)

@[reassoc (attr := simp)]
lemma truncLEMapOfLE_Œπ (n m : ‚Ñ§) (h : n ‚â§ m) :
    K.truncLEMapOfLE n m h ‚â´ K.ŒπTruncLE m = K.ŒπTruncLE n := by
  dsimp only [truncLEMapOfLE]
  rw [‚Üê cancel_epi (K.truncLELEIsoOfLE n m h).hom, assoc,
    ŒπTruncLE_naturality, Iso.hom_inv_id_assoc]
  simp only [truncLELEIsoOfLE_hom]

variable {K L} in
@[reassoc (attr := simp)]
lemma truncLEMapOfLE_naturality (f : K ‚ü∂ L) (n m : ‚Ñ§) (h : n ‚â§ m) :
    truncLEMap f n ‚â´ L.truncLEMapOfLE n m h =
      K.truncLEMapOfLE n m h ‚â´ truncLEMap f m := by
  simp [‚Üê cancel_mono (L.ŒπTruncLE _)]

@[simps]
noncomputable def filtrationLE : ‚Ñ§ ‚•§ CochainComplex C ‚Ñ§ where
  obj n := K.truncLE n
  map f := K.truncLEMapOfLE _ _ (leOfHom f)
  map_id _ := by simp [‚Üê cancel_mono (K.ŒπTruncLE _)]
  map_comp _ _ := by simp [‚Üê cancel_mono (K.ŒπTruncLE _), assoc]

noncomputable def filtrationLEMinus : ‚Ñ§ ‚•§ CochainComplex.Minus C :=
  ObjectProperty.lift _ K.filtrationLE
    (fun n ‚Ü¶ ‚ü®n, by dsimp; infer_instance‚ü©)

@[simp]
lemma Œπ_obj_filtrationLEMinus_obj (n : ‚Ñ§) :
    (Minus.Œπ _).obj (K.filtrationLEMinus.obj n) = K.truncLE n := rfl

@[simp]
lemma Œπ_map_filtrationLEMinus_map {n m : ‚Ñ§} (h : n ‚ü∂ m) :
    (Minus.Œπ _).map (K.filtrationLEMinus.map h) =
      K.filtrationLE.map h := rfl

@[simps!]
noncomputable def filtrationLEMinusCompŒπIso :
    K.filtrationLEMinus ‚ãô Minus.Œπ _ ‚âÖ K.filtrationLE := Iso.refl _

@[simps]
noncomputable def filtrationLECocone :
    Cocone K.filtrationLE where
  pt := K
  Œπ := { app := K.ŒπTruncLE }

noncomputable def isColimitFiltrationLECocone :
    IsColimit K.filtrationLECocone :=
  HomologicalComplex.isColimitOfEval _ _ (fun n ‚Ü¶
    isColimitOfIsEventuallyConstant _ (n + 1) (by
      intro m h
      replace h := leOfHom h
      exact isIso_ŒπTruncLE_f _ _ _ (by omega)))

variable (C) in
@[simps]
noncomputable def filtrationLEFunctor :
    CochainComplex C ‚Ñ§ ‚•§ ‚Ñ§ ‚•§ CochainComplex C ‚Ñ§ where
  obj K := K.filtrationLE
  map {K L} f := { app n := truncLEMap f n }

variable {K L} in
noncomputable def mapFiltrationLEMinus (f : K ‚ü∂ L) :
    K.filtrationLEMinus ‚ü∂ L.filtrationLEMinus :=
  ((Minus.fullyFaithfulŒπ C).whiskeringRight ‚Ñ§).preimage ((filtrationLEFunctor C).map f)

variable {K L} in
@[simp]
lemma Œπ_map_mapFiltrationLEMinus_app (f : K ‚ü∂ L) (n : ‚Ñ§) :
    (Minus.Œπ _).map ((mapFiltrationLEMinus f).app n) = truncLEMap f n := rfl

variable (C)

@[simps]
noncomputable def filtrationLEMinusFunctor :
    CochainComplex C ‚Ñ§ ‚•§ ‚Ñ§ ‚•§ Minus C where
  obj K := K.filtrationLEMinus
  map {K L} f := mapFiltrationLEMinus f
  map_id K := by
    ext n : 2
    apply (Minus.Œπ _).map_injective
    simp
  map_comp _ _ := by
    ext n : 2
    apply (Minus.Œπ _).map_injective
    simp

@[simps!]
noncomputable def filtrationLEMinusFunctorCompWhiskeringRightObjŒπIso :
  filtrationLEMinusFunctor C ‚ãô (whiskeringRight _ _ _).obj (Minus.Œπ C) ‚âÖ
    filtrationLEFunctor C := Iso.refl _

noncomputable def filtrationLEFunctorCompColimIso [HasColimitsOfShape ‚Ñ§ C] :
    filtrationLEFunctor C ‚ãô colim ‚âÖ ùü≠ (CochainComplex C ‚Ñ§) :=
  NatIso.ofComponents
    (fun K ‚Ü¶ IsColimit.coconePointUniqueUpToIso (colimit.isColimit _)
      K.isColimitFiltrationLECocone) (fun f ‚Ü¶ colimit.hom_ext (by simp))

@[reassoc (attr := simp)]
lemma Œπ_filtrationLEFunctorCompColimIso_hom_app (n : ‚Ñ§) [HasColimitsOfShape ‚Ñ§ C] :
    colimit.Œπ K.filtrationLE n ‚â´ (filtrationLEFunctorCompColimIso C).hom.app K =
      K.ŒπTruncLE n := by
  simp [filtrationLEFunctorCompColimIso]

end CochainComplex
