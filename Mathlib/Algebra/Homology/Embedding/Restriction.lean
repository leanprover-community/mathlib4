/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.Embedding.Basic
import Mathlib.Algebra.Homology.Additive

/-!
# The restriction functor of an embedding of complex shapes

Given `c` and `c'` complex shapes on two types, and `e : c.Embedding c'`
(satisfying `[e.IsRelIff]`), we define the restriction functor
`e.restrictionFunctor C : HomologicalComplex C c' ‚•§ HomologicalComplex C c`.

-/

open CategoryTheory Category Limits ZeroObject

variable {Œπ Œπ' : Type*} {c : ComplexShape Œπ} {c' : ComplexShape Œπ'}

namespace HomologicalComplex

variable {C : Type*} [Category C] [HasZeroMorphisms C] [HasZeroObject C]
  (K L M : HomologicalComplex C c') (œÜ : K ‚ü∂ L) (œÜ' : L ‚ü∂ M)
  (e : c.Embedding c') [e.IsRelIff]

/-- Given `K : HomologicalComplex C c'` and `e : c.Embedding c'` (satisfying `[e.IsRelIff]`),
this is the homological complex in `HomologicalComplex C c` obtained by restriction. -/
@[simps]
def restriction : HomologicalComplex C c where
  X i := K.X (e.f i)
  d _ _ := K.d _ _
  shape i j hij := K.shape _ _ (by simpa only [‚Üê e.rel_iff] using hij)

/-- The isomorphism `(K.restriction e).X i ‚âÖ K.X i'` when `e.f i = i'`. -/
def restrictionXIso {i : Œπ} {i' : Œπ'} (h : e.f i = i') :
    (K.restriction e).X i ‚âÖ K.X i' :=
  eqToIso (h ‚ñ∏ rfl)

@[reassoc]
lemma restriction_d_eq {i j : Œπ} {i' j' : Œπ'} (hi : e.f i = i') (hj : e.f j = j') :
    (K.restriction e).d i j = (K.restrictionXIso e hi).hom ‚â´ K.d i' j' ‚â´
      (K.restrictionXIso e hj).inv := by
  subst hi hj
  simp [restrictionXIso]

variable {K L}

/-- The morphism `K.restriction e ‚ü∂ L.restriction e` induced by a morphism `œÜ : K ‚ü∂ L`. -/
@[simps]
def restrictionMap : K.restriction e ‚ü∂ L.restriction e where
  f i := œÜ.f (e.f i)

@[reassoc]
lemma restrictionMap_f' {i : Œπ} {i' : Œπ'} (hi : e.f i = i') :
    (restrictionMap œÜ e).f i = (K.restrictionXIso e hi).hom ‚â´
      œÜ.f i' ‚â´ (L.restrictionXIso e hi).inv := by
  subst hi
  simp [restrictionXIso]

variable (K)

@[simp]
lemma restrictionMap_id : restrictionMap (ùüô K) e = ùüô _ := rfl

@[simp, reassoc]
lemma restrictionMap_comp :
    restrictionMap (œÜ ‚â´ œÜ') e = restrictionMap œÜ e ‚â´ restrictionMap œÜ' e := rfl

end HomologicalComplex

namespace ComplexShape.Embedding

variable (e : Embedding c c') (C : Type*) [Category C] [HasZeroObject C] [e.IsRelIff]

/-- Given `e : ComplexShape.Embedding c c'`, this is the restriction
functor `HomologicalComplex C c' ‚•§ HomologicalComplex C c`. -/
@[simps]
noncomputable def restrictionFunctor [HasZeroMorphisms C] :
    HomologicalComplex C c' ‚•§ HomologicalComplex C c where
  obj K := K.restriction e
  map œÜ := HomologicalComplex.restrictionMap œÜ e

instance [HasZeroMorphisms C] : (e.restrictionFunctor C).PreservesZeroMorphisms where

instance [Preadditive C] : (e.restrictionFunctor C).Additive where

end ComplexShape.Embedding
