/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.Embedding.HomEquiv
import Mathlib.Algebra.Homology.Embedding.IsSupported
import Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex

/-!
# The canonical truncation

Given an embedding `e : Embedding c c'` of complex shapes which
satisfies `e.IsTruncGE` and `K : HomologicalComplex C c'`,
we define `K.truncGE' e : HomologicalComplex C c`
and `K.truncGE e : HomologicalComplex C c'` which are the canonical
truncations of `K` relative to `e`.

For example, if `e` is the embedding `embeddingUpIntGE p` of `ComplexShape.up ‚Ñï`
in `ComplexShape.up ‚Ñ§` which sends `n : ‚Ñï` to `p + n` and `K : CochainComplex C ‚Ñ§`,
then `K.truncGE' e : CochainComplex C ‚Ñï` is the following complex:

`Q ‚ü∂ K.X (p + 1) ‚ü∂ K.X (p + 2) ‚ü∂ K.X (p + 3) ‚ü∂ ...`

where in degree `0`, the object `Q` identifies to the cokernel
of `K.X (p - 1) ‚ü∂ K.X p` (this is `K.opcycles p`). Then, the
cochain complex `K.truncGE e` is indexed by `‚Ñ§`, and has the
following shape:

`... ‚ü∂ 0 ‚ü∂ 0 ‚ü∂ 0 ‚ü∂ Q ‚ü∂ K.X (p + 1) ‚ü∂ K.X (p + 2) ‚ü∂ K.X (p + 3) ‚ü∂ ...`

where `Q` is in degree `p`.

We also construct the canonical epimorphism `K.œÄTruncGE e : K ‚ü∂ K.truncGE e`.

## TODO
* show that `K.œÄTruncGE e : K ‚ü∂ K.truncGE e` induces an isomorphism
  in homology in degrees in the image of `e.f`.

-/

open CategoryTheory Limits ZeroObject Category

variable {Œπ Œπ' : Type*} {c : ComplexShape Œπ} {c' : ComplexShape Œπ'}
  {C : Type*} [Category C] [HasZeroMorphisms C]

namespace HomologicalComplex

variable (K L M : HomologicalComplex C c') (œÜ : K ‚ü∂ L) (œÜ' : L ‚ü∂ M)
  (e : c.Embedding c') [e.IsTruncGE]
  [‚àÄ i', K.HasHomology i'] [‚àÄ i', L.HasHomology i'] [‚àÄ i', M.HasHomology i']

namespace truncGE'

open Classical in
/-- The `X` field of `truncGE'`. -/
noncomputable def X (i : Œπ) : C :=
  if e.BoundaryGE i
  then K.opcycles (e.f i)
  else K.X (e.f i)

/-- The isomorphism `truncGE'.X K e i ‚âÖ K.opcycles (e.f i)` when `e.BoundaryGE i` holds. -/
noncomputable def XIsoOpcycles {i : Œπ} (hi : e.BoundaryGE i) :
    X K e i ‚âÖ K.opcycles (e.f i) :=
  eqToIso (if_pos hi)

/-- The isomorphism `truncGE'.X K e i ‚âÖ K.X (e.f i)` when `e.BoundaryGE i` does not hold. -/
noncomputable def XIso {i : Œπ} (hi : ¬¨ e.BoundaryGE i) :
    X K e i ‚âÖ K.X (e.f i) :=
  eqToIso (if_neg hi)

open Classical in
/-- The `d` field of `truncGE'`. -/
noncomputable def d (i j : Œπ) : X K e i ‚ü∂ X K e j :=
  if hij : c.Rel i j
  then
    if hi : e.BoundaryGE i
    then (truncGE'.XIsoOpcycles K e hi).hom ‚â´ K.fromOpcycles (e.f i) (e.f j) ‚â´
      (XIso K e (e.not_boundaryGE_next hij)).inv
    else (XIso K e hi).hom ‚â´ K.d (e.f i) (e.f j) ‚â´
      (XIso K e (e.not_boundaryGE_next hij)).inv
  else 0

@[reassoc (attr := simp)]
lemma d_comp_d (i j k : Œπ) : d K e i j ‚â´ d K e j k = 0 := by
  dsimp [d]
  by_cases hij : c.Rel i j
  ¬∑ by_cases hjk : c.Rel j k
    ¬∑ rw [dif_pos hij, dif_pos hjk, dif_neg (e.not_boundaryGE_next hij)]
      split_ifs <;> simp
    ¬∑ rw [dif_neg hjk, comp_zero]
  ¬∑ rw [dif_neg hij, zero_comp]

end truncGE'

/-- The canonical truncation of a homological complex relative to an embedding
of complex shapes `e` which satisfies `e.IsTruncGE`. -/
noncomputable def truncGE' : HomologicalComplex C c where
  X := truncGE'.X K e
  d := truncGE'.d K e
  shape _ _ h := dif_neg h

/-- The isomorphism `(K.truncGE' e).X i ‚âÖ K.X i'` when `e.f i = i'`
and `e.BoundaryGE i` does not hold. -/
noncomputable def truncGE'XIso {i : Œπ} {i' : Œπ'} (hi' : e.f i = i') (hi : ¬¨ e.BoundaryGE i) :
    (K.truncGE' e).X i ‚âÖ K.X i' :=
  (truncGE'.XIso K e hi) ‚â™‚â´ eqToIso (by subst hi'; rfl)

/-- The isomorphism `(K.truncGE' e).X i ‚âÖ K.opcycles i'` when `e.f i = i'`
and `e.BoundaryGE i` holds. -/
noncomputable def truncGE'XIsoOpcycles {i : Œπ} {i' : Œπ'} (hi' : e.f i = i') (hi : e.BoundaryGE i) :
    (K.truncGE' e).X i ‚âÖ K.opcycles i' :=
  (truncGE'.XIsoOpcycles K e hi) ‚â™‚â´ eqToIso (by subst hi'; rfl)

lemma truncGE'_d_eq {i j : Œπ} (hij : c.Rel i j) {i' j' : Œπ'}
    (hi' : e.f i = i') (hj' : e.f j = j') (hi : ¬¨ e.BoundaryGE i) :
    (K.truncGE' e).d i j = (K.truncGE'XIso e hi' hi).hom ‚â´ K.d i' j' ‚â´
      (K.truncGE'XIso e hj' (e.not_boundaryGE_next hij)).inv := by
  dsimp [truncGE', truncGE'.d]
  rw [dif_pos hij, dif_neg hi]
  subst hi' hj'
  simp [truncGE'XIso]

lemma truncGE'_d_eq_fromOpcycles {i j : Œπ} (hij : c.Rel i j) {i' j' : Œπ'}
    (hi' : e.f i = i') (hj' : e.f j = j') (hi : e.BoundaryGE i) :
    (K.truncGE' e).d i j = (K.truncGE'XIsoOpcycles e hi' hi).hom ‚â´ K.fromOpcycles i' j' ‚â´
      (K.truncGE'XIso e hj' (e.not_boundaryGE_next hij)).inv := by
  dsimp [truncGE', truncGE'.d]
  rw [dif_pos hij, dif_pos hi]
  subst hi' hj'
  simp [truncGE'XIso, truncGE'XIsoOpcycles]

section

variable [HasZeroObject C]

/-- The canonical truncation of a homological complex relative to an embedding
of complex shapes `e` which satisfies `e.IsTruncGE`. -/
noncomputable def truncGE : HomologicalComplex C c' := (K.truncGE' e).extend e

/-- The isomorphism `(K.truncGE e).X i' ‚âÖ K.X i'` when `e.f i = i'`
and `e.BoundaryGE i` does not hold. -/
noncomputable def truncGEXIso {i : Œπ} {i' : Œπ'} (hi' : e.f i = i') (hi : ¬¨ e.BoundaryGE i) :
    (K.truncGE e).X i' ‚âÖ K.X i' :=
  (K.truncGE' e).extendXIso e hi' ‚â™‚â´ K.truncGE'XIso e hi' hi

/-- The isomorphism `(K.truncGE e).X i' ‚âÖ K.opcycles i'` when `e.f i = i'`
and `e.BoundaryGE i` holds. -/
noncomputable def truncGEXIsoOpcycles {i : Œπ} {i' : Œπ'} (hi' : e.f i = i') (hi : e.BoundaryGE i) :
    (K.truncGE e).X i' ‚âÖ K.opcycles i' :=
  (K.truncGE' e).extendXIso e hi' ‚â™‚â´ K.truncGE'XIsoOpcycles e hi' hi

end

section

variable {K L M}

open Classical in
/-- The morphism `K.truncGE' e ‚ü∂ L.truncGE' e` induced by a morphism `K ‚ü∂ L`. -/
noncomputable def truncGE'Map : K.truncGE' e ‚ü∂ L.truncGE' e where
  f i :=
    if hi : e.BoundaryGE i
    then
      (K.truncGE'XIsoOpcycles e rfl hi).hom ‚â´ opcyclesMap œÜ (e.f i) ‚â´
        (L.truncGE'XIsoOpcycles e rfl hi).inv
    else
      (K.truncGE'XIso e rfl hi).hom ‚â´ œÜ.f (e.f i) ‚â´ (L.truncGE'XIso e rfl hi).inv
  comm' i j hij := by
    rw [dif_neg (e.not_boundaryGE_next hij)]
    by_cases hi : e.BoundaryGE i
    ¬∑ rw [dif_pos hi]
      simp [truncGE'_d_eq_fromOpcycles _ e hij rfl rfl hi,
        ‚Üê cancel_epi (K.pOpcycles (e.f i))]
    ¬∑ rw [dif_neg hi]
      simp [truncGE'_d_eq _ e hij rfl rfl hi]

lemma truncGE'Map_f_eq_opcyclesMap {i : Œπ} (hi : e.BoundaryGE i) {i' : Œπ'} (h : e.f i = i') :
    (truncGE'Map œÜ e).f i =
      (K.truncGE'XIsoOpcycles e h hi).hom ‚â´ opcyclesMap œÜ i' ‚â´
        (L.truncGE'XIsoOpcycles e h hi).inv := by
  subst h
  exact dif_pos hi

lemma truncGE'Map_f_eq {i : Œπ} (hi : ¬¨ e.BoundaryGE i) {i' : Œπ'} (h : e.f i = i') :
    (truncGE'Map œÜ e).f i =
      (K.truncGE'XIso e h hi).hom ‚â´ œÜ.f i' ‚â´ (L.truncGE'XIso e h hi).inv := by
  subst h
  exact dif_neg hi

variable (K) in
@[simp]
lemma truncGE'Map_id : truncGE'Map (ùüô K) e = ùüô _ := by
  ext i
  by_cases hi : e.BoundaryGE i
  ¬∑ simp [truncGE'Map_f_eq_opcyclesMap _ _ hi rfl]
  ¬∑ simp [truncGE'Map_f_eq _ _ hi rfl]

@[reassoc, simp]
lemma truncGE'Map_comp : truncGE'Map (œÜ ‚â´ œÜ') e = truncGE'Map œÜ e ‚â´ truncGE'Map œÜ' e := by
  ext i
  by_cases hi : e.BoundaryGE i
  ¬∑ simp [truncGE'Map_f_eq_opcyclesMap _ _ hi rfl, opcyclesMap_comp]
  ¬∑ simp [truncGE'Map_f_eq _ _ hi rfl]

variable [HasZeroObject C]

/-- The morphism `K.truncGE e ‚ü∂ L.truncGE e` induced by a morphism `K ‚ü∂ L`. -/
noncomputable def truncGEMap : K.truncGE e ‚ü∂ L.truncGE e :=
  (e.extendFunctor C).map (truncGE'Map œÜ e)

variable (K) in
@[simp]
lemma truncGEMap_id : truncGEMap (ùüô K) e = ùüô _ := by
  simp [truncGEMap, truncGE]

@[reassoc, simp]
lemma truncGEMap_comp : truncGEMap (œÜ ‚â´ œÜ') e = truncGEMap œÜ e ‚â´ truncGEMap œÜ' e := by
  simp [truncGEMap, truncGE]

end

namespace restrictionToTruncGE'

open Classical in
/-- Auxiliary definition for `HomologicalComplex.restrictionToTruncGE'`. -/
noncomputable def f (i : Œπ) : (K.restriction e).X i ‚ü∂ (K.truncGE' e).X i :=
  if hi : e.BoundaryGE i then
    K.pOpcycles _ ‚â´ (K.truncGE'XIsoOpcycles e rfl hi).inv
  else
    (K.truncGE'XIso e rfl hi).inv

lemma f_eq_iso_hom_pOpcycles_iso_inv {i : Œπ} {i' : Œπ'} (hi' : e.f i = i') (hi : e.BoundaryGE i) :
    f K e i = (K.restrictionXIso e hi').hom ‚â´ K.pOpcycles i' ‚â´
      (K.truncGE'XIsoOpcycles e hi' hi).inv := by
  dsimp [f]
  rw [dif_pos hi]
  subst hi'
  simp [restrictionXIso]

lemma f_eq_iso_hom_iso_inv {i : Œπ} {i' : Œπ'} (hi' : e.f i = i') (hi : ¬¨ e.BoundaryGE i) :
    f K e i = (K.restrictionXIso e hi').hom ‚â´ (K.truncGE'XIso e hi' hi).inv := by
  dsimp [f]
  rw [dif_neg hi]
  subst hi'
  simp [restrictionXIso]

@[reassoc (attr := simp)]
lemma comm (i j : Œπ) :
    f K e i ‚â´ (K.truncGE' e).d i j = (K.restriction e).d i j ‚â´ f K e j := by
  by_cases hij : c.Rel i j
  ¬∑ by_cases hi : e.BoundaryGE i
    ¬∑ rw [f_eq_iso_hom_pOpcycles_iso_inv K e rfl hi,
        f_eq_iso_hom_iso_inv K e rfl (e.not_boundaryGE_next hij),
        K.truncGE'_d_eq_fromOpcycles e hij rfl rfl hi]
      simp [restrictionXIso]
    ¬∑ rw [f_eq_iso_hom_iso_inv K e rfl hi,
        f_eq_iso_hom_iso_inv K e rfl (e.not_boundaryGE_next hij),
        K.truncGE'_d_eq e hij rfl rfl hi]
      simp [restrictionXIso]
  ¬∑ simp [HomologicalComplex.shape _ _ _ hij]

end restrictionToTruncGE'

/-- The canonical morphism `K.restriction e ‚ü∂ K.truncGE' e`. -/
noncomputable def restrictionToTruncGE' : K.restriction e ‚ü∂ K.truncGE' e where
  f := restrictionToTruncGE'.f K e

lemma restrictionToTruncGE'_hasLift : e.HasLift (K.restrictionToTruncGE' e) := by
  intro j hj i' _
  dsimp [restrictionToTruncGE']
  rw [restrictionToTruncGE'.f_eq_iso_hom_pOpcycles_iso_inv K e rfl hj]
  simp [restrictionXIso]

lemma restrictionToTruncGE'_f_eq_iso_hom_pOpcycles_iso_inv
    {i : Œπ} {i' : Œπ'} (hi' : e.f i = i') (hi : e.BoundaryGE i) :
    (K.restrictionToTruncGE' e).f i = (K.restrictionXIso e hi').hom ‚â´ K.pOpcycles i' ‚â´
      (K.truncGE'XIsoOpcycles e hi' hi).inv := by
  apply restrictionToTruncGE'.f_eq_iso_hom_pOpcycles_iso_inv

lemma restrictionToTruncGE'_f_eq_iso_hom_iso_inv {i : Œπ} {i' : Œπ'} (hi' : e.f i = i')
    (hi : ¬¨ e.BoundaryGE i) :
    (K.restrictionToTruncGE' e).f i =
      (K.restrictionXIso e hi').hom ‚â´ (K.truncGE'XIso e hi' hi).inv := by
  apply restrictionToTruncGE'.f_eq_iso_hom_iso_inv

/-- `K.restrictionToTruncGE' e).f i` is an isomorphism when `¬¨ e.BoundaryGE i`. -/
lemma isIso_restrictionToTruncGE' (i : Œπ) (hi : ¬¨ e.BoundaryGE i) :
    IsIso ((K.restrictionToTruncGE' e).f i) := by
  rw [K.restrictionToTruncGE'_f_eq_iso_hom_iso_inv e rfl hi]
  infer_instance

variable {K L} in
@[reassoc (attr := simp)]
lemma restrictionToTruncGE'_naturality :
    K.restrictionToTruncGE' e ‚â´ truncGE'Map œÜ e =
      restrictionMap œÜ e ‚â´ L.restrictionToTruncGE' e := by
  ext i
  by_cases hi : e.BoundaryGE i
  ¬∑ simp [restrictionToTruncGE'_f_eq_iso_hom_pOpcycles_iso_inv _ e rfl hi,
      truncGE'Map_f_eq_opcyclesMap œÜ e hi rfl, restrictionXIso]
  ¬∑ simp [restrictionToTruncGE'_f_eq_iso_hom_iso_inv _ e rfl hi,
      truncGE'Map_f_eq œÜ e hi rfl, restrictionXIso]

attribute [local instance] epi_comp in
instance (i : Œπ) : Epi ((K.restrictionToTruncGE' e).f i) := by
  by_cases hi : e.BoundaryGE i
  ¬∑ rw [K.restrictionToTruncGE'_f_eq_iso_hom_pOpcycles_iso_inv e rfl hi]
    infer_instance
  ¬∑ have := K.isIso_restrictionToTruncGE' e i hi
    infer_instance

instance [K.IsStrictlySupported e] (i : Œπ) :
    IsIso ((K.restrictionToTruncGE' e).f i) := by
  by_cases hi : e.BoundaryGE i
  ¬∑ rw [K.restrictionToTruncGE'_f_eq_iso_hom_pOpcycles_iso_inv e rfl hi]
    have : IsIso (K.pOpcycles (e.f i)) := K.isIso_pOpcycles _ _ rfl (by
      obtain ‚ü®hi‚ÇÅ, hi‚ÇÇ‚ü© := hi
      apply IsZero.eq_of_src (K.isZero_X_of_isStrictlySupported e _
        (fun j hj ‚Ü¶ hi‚ÇÇ j (by simpa only [hj] using hi‚ÇÅ))))
    infer_instance
  ¬∑ rw [K.restrictionToTruncGE'_f_eq_iso_hom_iso_inv e rfl hi]
    infer_instance

section

variable [HasZeroObject C]

/-- The canonical morphism `K ‚ü∂ K.truncGE e` when `e` is an embedding of complex
shapes which satisfy `e.IsTruncGE`. -/
noncomputable def œÄTruncGE : K ‚ü∂ K.truncGE e :=
  e.liftExtend (K.restrictionToTruncGE' e) (K.restrictionToTruncGE'_hasLift e)

instance (i' : Œπ') : Epi ((K.œÄTruncGE e).f i') := by
  by_cases hi' : ‚àÉ i, e.f i = i'
  ¬∑ obtain ‚ü®i, hi‚ü© := hi'
    dsimp [œÄTruncGE]
    rw [e.epi_liftExtend_f_iff _ _ hi]
    infer_instance
  ¬∑ apply (isZero_extend_X _ _ _ (by simpa using hi')).epi

instance : Epi (K.œÄTruncGE e) := epi_of_epi_f _ (fun _ => inferInstance)

instance : (K.truncGE e).IsStrictlySupported e := by
  dsimp [truncGE]
  infer_instance

variable {K L} in
@[reassoc (attr := simp)]
lemma œÄTruncGE_naturality :
    K.œÄTruncGE e ‚â´ truncGEMap œÜ e = œÜ ‚â´ L.œÄTruncGE e := by
  apply (e.homEquiv _ _).injective
  ext1
  dsimp [truncGEMap, œÄTruncGE]
  rw [e.homRestrict_comp_extendMap, e.homRestrict_liftExtend, e.homRestrict_precomp,
    e.homRestrict_liftExtend, restrictionToTruncGE'_naturality]

instance {Œπ'' : Type*} {c'' : ComplexShape Œπ''} (e' : c''.Embedding c')
    [K.IsStrictlySupported e'] : (K.truncGE e).IsStrictlySupported e' where
  isZero := by
    intro i' hi'
    by_cases hi'' : ‚àÉ i, e.f i = i'
    ¬∑ obtain ‚ü®i, hi‚ü© := hi''
      by_cases hi''' : e.BoundaryGE i
      ¬∑ rw [IsZero.iff_id_eq_zero, ‚Üê cancel_epi
          ((K.truncGE' e).extendXIso e hi ‚â™‚â´ K.truncGE'XIsoOpcycles e hi hi''').inv,
          ‚Üê cancel_epi (HomologicalComplex.pOpcycles _ _)]
        apply (K.isZero_X_of_isStrictlySupported e' i' hi').eq_of_src
      ¬∑ exact (K.isZero_X_of_isStrictlySupported e' i' hi').of_iso
          ((K.truncGE' e).extendXIso e hi ‚â™‚â´ K.truncGE'XIso e hi hi''')
    ¬∑ exact (K.truncGE e).isZero_X_of_isStrictlySupported e _ (by simpa using hi'')

instance [K.IsStrictlySupported e] : IsIso (K.œÄTruncGE e) := by
  suffices ‚àÄ (i' : Œπ'), IsIso ((K.œÄTruncGE e).f i') by
    apply Hom.isIso_of_components
  intro i'
  by_cases hn : ‚àÉ i, e.f i = i'
  ¬∑ obtain ‚ü®i, hi‚ü© := hn
    dsimp [œÄTruncGE]
    rw [e.isIso_liftExtend_f_iff _ _ hi]
    infer_instance
  ¬∑ simp only [not_exists] at hn
    refine ‚ü®0, ?_, ?_‚ü©
    all_goals
      apply (isZero_X_of_isStrictlySupported _ e i' hn).eq_of_src

lemma isIso_œÄTruncGE_iff : IsIso (K.œÄTruncGE e) ‚Üî K.IsStrictlySupported e :=
  ‚ü®fun _ ‚Ü¶ isStrictlySupported_of_iso (asIso (K.œÄTruncGE e)).symm e,
    fun _ ‚Ü¶ inferInstance‚ü©

end

end HomologicalComplex

namespace ComplexShape.Embedding

variable (e : Embedding c c') [e.IsTruncGE]
    (C : Type*) [Category C] [HasZeroMorphisms C] [HasZeroObject C] [CategoryWithHomology C]

/-- Given an embedding `e : Embedding c c'` of complex shapes which satisfy `e.IsTruncGE`,
this is the (canonical) truncation functor
`HomologicalComplex C c' ‚•§ HomologicalComplex C c`. -/
@[simps]
noncomputable def truncGE'Functor :
    HomologicalComplex C c' ‚•§ HomologicalComplex C c where
  obj K := K.truncGE' e
  map œÜ := HomologicalComplex.truncGE'Map œÜ e

/-- The natural transformation `K.restriction e ‚ü∂ K.truncGE' e` for all `K`. -/
@[simps]
noncomputable def restrictionToTruncGE'NatTrans :
    e.restrictionFunctor C ‚ü∂ e.truncGE'Functor C where
  app K := K.restrictionToTruncGE' e

/-- Given an embedding `e : Embedding c c'` of complex shapes which satisfy `e.IsTruncGE`,
this is the (canonical) truncation functor
`HomologicalComplex C c' ‚•§ HomologicalComplex C c'`. -/
@[simps]
noncomputable def truncGEFunctor :
    HomologicalComplex C c' ‚•§ HomologicalComplex C c' where
  obj K := K.truncGE e
  map œÜ := HomologicalComplex.truncGEMap œÜ e

/-- The natural transformation `K.œÄTruncGE e : K ‚ü∂ K.truncGE e` for all `K`. -/
@[simps]
noncomputable def œÄTruncGENatTrans : ùü≠ _ ‚ü∂ e.truncGEFunctor C where
  app K := K.œÄTruncGE e

end ComplexShape.Embedding
