/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.ComplexShape
import Mathlib.Algebra.Order.Ring.Nat
import Mathlib.Algebra.Ring.Int

/-! # Embeddings of complex shapes

Given two complex shapes `c : ComplexShape Œπ` and `c' : ComplexShape Œπ'`,
an embedding from `c` to `c'` (`e : c.Embedding c'`) consists of the data
of an injective map `f : Œπ ‚Üí Œπ'` such that for all `i‚ÇÅ i‚ÇÇ : Œπ`,
`c.Rel i‚ÇÅ i‚ÇÇ` implies `c'.Rel (e.f i‚ÇÅ) (e.f i‚ÇÇ)`.
We define a type class `e.IsRelIff` to express that this implication is an equivalence.
Other type classes `e.IsTruncLE` and `e.IsTruncGE` are introduced in order to
formalize truncation functors.

This notion first appeared in the Liquid Tensor Experiment, and was developed there
mostly by Johan Commelin, Adam Topaz and Jo√´l Riou. It shall be used in order to
relate the categories `CochainComplex C ‚Ñï` and `ChainComplex C ‚Ñï` to `CochainComplex C ‚Ñ§`.
It shall also be used in the construction of the canonical t-structure on the derived
category of an abelian category (TODO).

## TODO

Define the following:
- the extension functor `e.extendFunctor C : HomologicalComplex C c ‚•§ HomologicalComplex C c'`
(extending by the zero object outside of the image of `e.f`);
- assuming `e.IsRelIff`, the restriction functor
`e.restrictionFunctor C : HomologicalComplex C c' ‚•§ HomologicalComplex C c`;
- the stupid truncation functor
`e.stupidTruncFunctor C : HomologicalComplex C c' ‚•§ HomologicalComplex C c'` which is
the composition of the two previous functors.
- assuming `e.IsTruncGE`, truncation functors
`e.truncGE'Functor C : HomologicalComplex C c' ‚•§ HomologicalComplex C c` and
`e.truncGEFunctor C : HomologicalComplex C c' ‚•§ HomologicalComplex C c'`, and a natural
transformation `e.œÄTruncGENatTrans : ùü≠ _ ‚ü∂ e.truncGEFunctor C` which is a quasi-isomorphism
in degrees in the image of `e.f`;
- assuming `e.IsTruncLE`, truncation functors
`e.truncLE'Functor C : HomologicalComplex C c' ‚•§ HomologicalComplex C c` and
`e.truncLEFunctor C : HomologicalComplex C c' ‚•§ HomologicalComplex C c'`, and a natural
transformation `e.ŒπTruncLENatTrans : e.truncGEFunctor C ‚ü∂ ùü≠ _` which is a quasi-isomorphism
in degrees in the image of `e.f`;

-/

variable {Œπ Œπ' : Type*} (c : ComplexShape Œπ) (c' : ComplexShape Œπ')

namespace ComplexShape

/-- An embedding of a complex shape `c : ComplexShape Œπ` into a complex shape
`c' : ComplexShape Œπ'` consists of a injective map `f : Œπ ‚Üí Œπ'` which satisfies
a compatiblity with respect to the relations `c.Rel` and `c'.Rel`. -/
structure Embedding where
  /-- the map between the underlying types of indices -/
  f : Œπ ‚Üí Œπ'
  injective_f : Function.Injective f
  rel {i‚ÇÅ i‚ÇÇ : Œπ} (h : c.Rel i‚ÇÅ i‚ÇÇ) : c'.Rel (f i‚ÇÅ) (f i‚ÇÇ)

namespace Embedding

variable {c c'}
variable (e : Embedding c c')

/-- An embedding of complex shapes `e` satisfies `e.IsRelIff` if the implication
`e.rel` is an equivalence. -/
class IsRelIff : Prop where
  rel' (i‚ÇÅ i‚ÇÇ : Œπ) (h : c'.Rel (e.f i‚ÇÅ) (e.f i‚ÇÇ)) : c.Rel i‚ÇÅ i‚ÇÇ

lemma rel_iff [e.IsRelIff] (i‚ÇÅ i‚ÇÇ : Œπ) : c'.Rel (e.f i‚ÇÅ) (e.f i‚ÇÇ) ‚Üî c.Rel i‚ÇÅ i‚ÇÇ := by
  constructor
  ¬∑ apply IsRelIff.rel'
  ¬∑ exact e.rel

section

variable (c c')
variable (f : Œπ ‚Üí Œπ') (hf : Function.Injective f)
    (iff : ‚àÄ (i‚ÇÅ i‚ÇÇ : Œπ), c.Rel i‚ÇÅ i‚ÇÇ ‚Üî c'.Rel (f i‚ÇÅ) (f i‚ÇÇ))

/-- Constructor for embeddings between complex shapes when we have an equivalence
`‚àÄ (i‚ÇÅ i‚ÇÇ : Œπ), c.Rel i‚ÇÅ i‚ÇÇ ‚Üî c'.Rel (f i‚ÇÅ) (f i‚ÇÇ)`. -/
@[simps]
def mk' : Embedding c c' where
  f := f
  injective_f := hf
  rel h := (iff _ _).1 h

instance : (mk' c c' f hf iff).IsRelIff where
  rel' _ _ h := (iff _ _).2 h

end

/-- The condition that the image of the map `e.f` of an embedding of
complex shapes `e : Embedding c c'` is stable by `c'.next`. -/
class IsTruncGE extends e.IsRelIff : Prop where
  mem_next {j : Œπ} {k' : Œπ'} (h : c'.Rel (e.f j) k') :
    ‚àÉ k, e.f k = k'

/-- The condition that the image of the map `e.f` of an embedding of
complex shapes `e : Embedding c c'` is stable by `c'.prev`. -/
class IsTruncLE extends e.IsRelIff : Prop where
  mem_prev {i' : Œπ'} {j : Œπ} (h : c'.Rel i' (e.f j)) :
    ‚àÉ i, e.f i = i'

open Classical in
/-- The map `Œπ' ‚Üí Option Œπ` which sends `e.f i` to `some i` and the other elements to `none`. -/
noncomputable def r (i' : Œπ') : Option Œπ :=
  if h : ‚àÉ (i : Œπ), e.f i = i'
  then some h.choose
  else none

lemma r_eq_some {i : Œπ} {i' : Œπ'} (hi : e.f i = i') :
    e.r i' = some i := by
  have h : ‚àÉ (i : Œπ), e.f i = i' := ‚ü®i, hi‚ü©
  have : h.choose = i := e.injective_f (h.choose_spec.trans (hi.symm))
  dsimp [r]
  rw [dif_pos ‚ü®i, hi‚ü©, this]

lemma r_eq_none (i' : Œπ') (hi : ‚àÄ i, e.f i ‚â† i') :
    e.r i' = none :=
  dif_neg (by
    rintro ‚ü®i, hi'‚ü©
    exact hi i hi')

@[simp] lemma r_f (i : Œπ) : e.r (e.f i) = some i := r_eq_some _ rfl

lemma f_eq_of_r_eq_some {i : Œπ} {i' : Œπ'} (hi : e.r i' = some i) :
    e.f i = i' := by
  by_cases h : ‚àÉ (k : Œπ), e.f k = i'
  ¬∑ obtain ‚ü®k, rfl‚ü© := h
    rw [r_f] at hi
    congr 1
    simpa using hi.symm
  ¬∑ simp [e.r_eq_none i' (by simpa using h)] at hi

end Embedding

/-- The obvious embedding from `up ‚Ñï` to `up ‚Ñ§`. -/
@[simps!]
def embeddingUpNat : Embedding (up ‚Ñï) (up ‚Ñ§) :=
  Embedding.mk' _ _ (fun n => n)
    (fun _ _ h => by simpa using h)
    (by dsimp; omega)

instance : embeddingUpNat.IsRelIff := by dsimp [embeddingUpNat]; infer_instance

instance : embeddingUpNat.IsTruncGE where
  mem_next {j _} h := ‚ü®j + 1, h‚ü©

/-- The embedding from `down ‚Ñï` to `up ‚Ñ§` with sends `n` to `-n`. -/
@[simps!]
def embeddingDownNat : Embedding (down ‚Ñï) (up ‚Ñ§) :=
  Embedding.mk' _ _ (fun n => -n)
    (fun _ _ h => by simpa using h)
    (by dsimp; omega)

instance : embeddingDownNat.IsRelIff := by dsimp [embeddingDownNat]; infer_instance

instance : embeddingDownNat.IsTruncLE where
  mem_prev {i j} h := ‚ü®j + 1, by dsimp at h ‚ä¢; omega‚ü©

variable (p : ‚Ñ§)

/-- The embedding from `up ‚Ñï` to `up ‚Ñ§` which sends `n : ‚Ñï` to `p + n`. -/
@[simps!]
def embeddingUpIntGE : Embedding (up ‚Ñï) (up ‚Ñ§) :=
  Embedding.mk' _ _ (fun n => p + n)
    (fun _ _ h => by dsimp at h; omega)
    (by dsimp; omega)

instance : (embeddingUpIntGE p).IsRelIff := by dsimp [embeddingUpIntGE]; infer_instance

instance : (embeddingUpIntGE p).IsTruncGE where
  mem_next {j _} h := ‚ü®j + 1, by dsimp at h ‚ä¢; omega‚ü©

/-- The embedding from `down ‚Ñï` to `up ‚Ñ§` which sends `n : ‚Ñï` to `p - n`. -/
@[simps!]
def embeddingUpIntLE : Embedding (down ‚Ñï) (up ‚Ñ§) :=
  Embedding.mk' _ _ (fun n => p - n)
    (fun _ _ h => by dsimp at h; omega)
    (by dsimp; omega)

instance : (embeddingUpIntLE p).IsRelIff := by dsimp [embeddingUpIntLE]; infer_instance

instance : (embeddingUpIntLE p).IsTruncLE where
  mem_prev {_ k} h := ‚ü®k + 1, by dsimp at h ‚ä¢; omega‚ü©

end ComplexShape
