/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.LeftResolutions.Basic
import Mathlib.Algebra.Homology.BicomplexRows
import Mathlib.Algebra.Homology.CochainComplexMinus
import Mathlib.Algebra.Homology.TotalComplexMap

/-!
# Resolutions of bounded above complexes

-/

namespace CategoryTheory

open Category Limits CochainComplex

namespace Abelian

namespace LeftResolutions

variable {A C : Type*} [Category C] [Category A] {Œπ : C ‚•§ A}
  [Œπ.Full] [Œπ.Faithful] [Preadditive C] [HasZeroObject C]
  [Abelian A] (Œõ : LeftResolutions Œπ)

variable [Œõ.F.PreservesZeroMorphisms]

instance : Œõ.chainComplexFunctor.PreservesZeroMorphisms where
  map_zero _ _ := by
    simp [chainComplexFunctor]

instance : Œõ.cochainComplexFunctor.PreservesZeroMorphisms where
  map_zero _ _ := by
    simp [cochainComplexFunctor]

noncomputable def bicomplexFunctor :
    CochainComplex A ‚Ñ§ ‚•§ HomologicalComplex‚ÇÇ C (ComplexShape.up ‚Ñ§) (ComplexShape.up ‚Ñ§) :=
      Œõ.cochainComplexFunctor.mapHomologicalComplex (ComplexShape.up ‚Ñ§)

instance (K : CochainComplex A ‚Ñ§) (i : ‚Ñ§) :
    CochainComplex.IsStrictlyLE ((Œõ.bicomplexFunctor.obj K).X i) 0 := by
  dsimp [bicomplexFunctor]
  infer_instance

instance (K : CochainComplex A ‚Ñ§) (i : ‚Ñ§) :
    IsStrictlyLE (((bicomplexFunctor Œõ ‚ãô
      Functor.mapHomologicalComplex‚ÇÇ Œπ (ComplexShape.up ‚Ñ§) (ComplexShape.up ‚Ñ§)).obj K).X i) 0 := by
  dsimp [Functor.mapHomologicalComplex‚ÇÇ]
  infer_instance

instance (K : CochainComplex A ‚Ñ§) (i : ‚Ñ§) [K.IsStrictlyLE i] :
    CochainComplex.IsStrictlyLE (Œõ.bicomplexFunctor.obj K) i := by
  dsimp [bicomplexFunctor]
  infer_instance

instance (K : CochainComplex A ‚Ñ§) (i : ‚Ñ§) [K.IsStrictlyLE i] :
    CochainComplex.IsStrictlyLE ((Œπ.mapHomologicalComplex‚ÇÇ _ _).obj
      (Œõ.bicomplexFunctor.obj K)) i := by
  dsimp [bicomplexFunctor, Functor.mapHomologicalComplex‚ÇÇ]
  infer_instance

instance (K : CochainComplex A ‚Ñ§) (i : ‚Ñ§) [K.IsStrictlyLE i]:
    IsStrictlyLE ((bicomplexFunctor Œõ ‚ãô
      Functor.mapHomologicalComplex‚ÇÇ Œπ (ComplexShape.up ‚Ñ§) (ComplexShape.up ‚Ñ§)).obj K) i := by
  dsimp
  infer_instance

instance (K : CochainComplex A ‚Ñ§) (i : ‚Ñ§) :
    CochainComplex.IsStrictlyLE (((Œπ.mapHomologicalComplex‚ÇÇ _ _).obj
      (Œõ.bicomplexFunctor.obj K)).X i) 0 := by
  dsimp [bicomplexFunctor, Functor.mapHomologicalComplex‚ÇÇ]
  infer_instance

variable [HasFiniteCoproducts C]

instance (K : CochainComplex.Minus A) :
    (Œõ.bicomplexFunctor.obj K.obj).HasTotal (ComplexShape.up ‚Ñ§) := by
  obtain ‚ü®i, hi‚ü© := K.2
  exact HomologicalComplex‚ÇÇ.hasTotal_of_isStrictlyLE _ i 0

instance (K : CochainComplex.Minus A) :
    ((Œπ.mapHomologicalComplex‚ÇÇ _ _).obj (Œõ.bicomplexFunctor.obj K.obj)).HasTotal
      (ComplexShape.up ‚Ñ§) := by
  obtain ‚ü®i, hi‚ü© := K.2
  exact HomologicalComplex‚ÇÇ.hasTotal_of_isStrictlyLE _ i 0

instance (K : CochainComplex.Minus A) :
    ((Œõ.bicomplexFunctor ‚ãô Œπ.mapHomologicalComplex‚ÇÇ _ _).obj K.obj).HasTotal
      (ComplexShape.up ‚Ñ§) := by
  dsimp
  infer_instance

instance (K : CochainComplex C ‚Ñ§) (i : ‚Ñ§) :
    IsStrictlyLE (((HomologicalComplex‚ÇÇ.singleRow C
      (ComplexShape.up ‚Ñ§) (ComplexShape.up ‚Ñ§) 0).obj K).X i) 0 := by
  dsimp [HomologicalComplex‚ÇÇ.singleRow]
  infer_instance

instance (K : CochainComplex C ‚Ñ§) (i : ‚Ñ§) [K.IsStrictlyLE i] :
    IsStrictlyLE ((HomologicalComplex‚ÇÇ.singleRow C (ComplexShape.up ‚Ñ§)
      (ComplexShape.up ‚Ñ§) 0).obj K) i := by
  dsimp [HomologicalComplex‚ÇÇ.singleRow]
  infer_instance

instance (K : CochainComplex C ‚Ñ§) :
    ((HomologicalComplex‚ÇÇ.singleRow C (ComplexShape.up ‚Ñ§)
      (ComplexShape.up ‚Ñ§) 0).obj K).HasTotal (ComplexShape.up ‚Ñ§) := fun i =>
  hasCoproduct_of_isZero_but_one _ ‚ü®‚ü®i, 0‚ü©, by simp‚ü© (by
    rintro ‚ü®‚ü®p, q‚ü©, hpq‚ü© h
    apply HomologicalComplex.isZero_single_obj_X
    rintro rfl
    obtain rfl : p = i := by simpa using hpq
    exact h rfl)

instance (K : CochainComplex A ‚Ñ§) (i : ‚Ñ§) [K.IsStrictlyLE i]
    [(Œõ.bicomplexFunctor.obj K).HasTotal (ComplexShape.up ‚Ñ§)]:
    CochainComplex.IsStrictlyLE ((Œõ.bicomplexFunctor.obj K).total (ComplexShape.up ‚Ñ§)) i where
  isZero n hn := by
    rw [IsZero.iff_id_eq_zero]
    ext i‚ÇÅ i‚ÇÇ h
    dsimp at h hn
    apply IsZero.eq_of_src
    by_cases hi‚ÇÇ : 0 < i‚ÇÇ
    ¬∑ exact CochainComplex.isZero_of_isStrictlyLE _ 0 _ hi‚ÇÇ
    ¬∑ have : IsZero (((Œõ.bicomplexFunctor).obj K).X i‚ÇÅ) := by
        apply CochainComplex.isZero_of_isStrictlyLE _ i
        by_contra!
        obtain ‚ü®k, hk‚ü© := Int.le.dest (show n ‚â§ i by omega)
        exact hn k (by omega)
      exact (HomologicalComplex.eval _ _ i‚ÇÇ).map_isZero this

noncomputable abbrev bicomplexœÄ :
    Œõ.bicomplexFunctor ‚ãô Œπ.mapHomologicalComplex‚ÇÇ (ComplexShape.up ‚Ñ§) (ComplexShape.up ‚Ñ§) ‚ü∂
      HomologicalComplex‚ÇÇ.singleRow A (ComplexShape.up ‚Ñ§) (ComplexShape.up ‚Ñ§) 0 :=
  NatTrans.mapHomologicalComplex Œõ.cochainComplexNatTransœÄ (ComplexShape.up ‚Ñ§)

section

variable (K L : CochainComplex.Minus A) (œÜ : K ‚ü∂ L)

/-- totalœÄ' -/
noncomputable def totalœÄ' :
    ((Œπ.mapHomologicalComplex‚ÇÇ _ _).obj (Œõ.bicomplexFunctor.obj K.obj)).total (ComplexShape.up ‚Ñ§) ‚ü∂
      ((HomologicalComplex‚ÇÇ.singleRow A
        (ComplexShape.up ‚Ñ§) (ComplexShape.up ‚Ñ§) 0).obj K.obj).total (ComplexShape.up ‚Ñ§) :=
  HomologicalComplex‚ÇÇ.total.map (Œõ.bicomplexœÄ.app K.obj) (ComplexShape.up ‚Ñ§)

omit [HasFiniteCoproducts C] in
variable {K L} in
@[reassoc (attr := simp)]
lemma totalœÄ'_naturality :
    (HomologicalComplex‚ÇÇ.total.map
      ((Œπ.mapHomologicalComplex‚ÇÇ (ComplexShape.up ‚Ñ§) (ComplexShape.up ‚Ñ§)).map
        (Œõ.bicomplexFunctor.map œÜ)) (ComplexShape.up ‚Ñ§)) ‚â´ Œõ.totalœÄ' L =
      Œõ.totalœÄ' K ‚â´ HomologicalComplex‚ÇÇ.total.map
        ((HomologicalComplex‚ÇÇ.singleRow A (ComplexShape.up ‚Ñ§)
          (ComplexShape.up ‚Ñ§) 0).map œÜ) (ComplexShape.up ‚Ñ§) := by
  dsimp [totalœÄ']
  simp only [‚Üê HomologicalComplex‚ÇÇ.total.map_comp]
  congr 1
  ext x y
  by_cases hy : y = 0
  ¬∑ subst hy
    have eq := Œõ.œÄ.naturality (œÜ.f x)
    dsimp at eq
    dsimp [cochainComplexœÄ, bicomplexFunctor, cochainComplexFunctor]
    simp only [HomologicalComplex.mkHomToSingle_f, Functor.mapHomologicalComplex_obj_X, assoc,
      HomologicalComplex.single_map_f_self, Iso.inv_hom_id_assoc, ‚Üê reassoc_of% eq,
      ‚Üê Œπ.map_comp_assoc]
    simp only [‚Üê assoc]
    congr 3
    rw [HomologicalComplex.extendMap_f (i := 0) (h := by rfl)]
    dsimp [cochainComplexXZeroIso, chainComplexFunctor]
    simp
  ¬∑ apply IsZero.eq_of_tgt
    apply HomologicalComplex‚ÇÇ.isZero_singleRow_X_X
    exact hy

instance : QuasiIso (Œõ.totalœÄ' K) := by
  obtain ‚ü®i, hi‚ü© := K.2
  apply HomologicalComplex‚ÇÇ.total.quasiIso_map_of_isStrictlyGE_of_isStrictlyLE _ i 0
  dsimp [bicomplexœÄ]
  infer_instance

variable [Œπ.Additive]

noncomputable instance : Œπ.PreservesTotalComplex ((bicomplexFunctor Œõ).obj K.obj)
    (ComplexShape.up ‚Ñ§) := by
  apply Nonempty.some
  have ‚ü®i, hi‚ü© := K.2
  exact ‚ü®HomologicalComplex‚ÇÇ.preservesTotal_of_isStrictlyLE _ i 0 Œπ‚ü©

noncomputable def totalœÄ :
    (Œπ.mapHomologicalComplex _).obj ((Œõ.bicomplexFunctor.obj K.obj).total
      (ComplexShape.up ‚Ñ§)) ‚ü∂ K.obj :=
  (HomologicalComplex‚ÇÇ.mapTotalIso _ _ _).inv ‚â´ Œõ.totalœÄ' K ‚â´
    (HomologicalComplex‚ÇÇ.singleRow‚ÇÄObjTotal K.obj).hom

instance : QuasiIso (Œõ.totalœÄ K) := by
  dsimp only [totalœÄ]
  infer_instance

noncomputable def minusResolutionFunctor : CochainComplex.Minus A ‚•§ CochainComplex.Minus C where
  obj K := ‚ü®((Œõ.bicomplexFunctor.obj K.obj).total (ComplexShape.up ‚Ñ§)), by
    obtain ‚ü®i, hi‚ü© := K.2
    exact ‚ü®i, inferInstance‚ü©‚ü©
  map {K L} œÜ := HomologicalComplex‚ÇÇ.total.map (Œõ.bicomplexFunctor.map œÜ) (ComplexShape.up ‚Ñ§)
  map_id K := by
    erw [Œõ.bicomplexFunctor.map_id, HomologicalComplex‚ÇÇ.total.map_id]
    rfl
  map_comp œÜ œà := by
    erw [Œõ.bicomplexFunctor.map_comp, HomologicalComplex‚ÇÇ.total.map_comp]
    rfl

noncomputable def minusResolutionNatTrans :
    Œõ.minusResolutionFunctor ‚ãô Œπ.mapCochainComplexMinus ‚ü∂ ùü≠ _ where
  app _ := Œõ.totalœÄ _
  naturality {K L} f := by
    dsimp [minusResolutionFunctor, totalœÄ]
    erw [HomologicalComplex‚ÇÇ.mapTotalIso_inv_naturality_assoc]
    rw [totalœÄ'_naturality_assoc]
    erw [assoc ((HomologicalComplex‚ÇÇ.mapTotalIso Œπ _ (ComplexShape.up ‚Ñ§)).inv), assoc]
    rw [HomologicalComplex‚ÇÇ.singleRow‚ÇÄObjTotal_hom_naturality]

lemma quasiIso_minusResolutionNatTrans_app (K : CochainComplex.Minus A) :
    Minus.quasiIso (Œõ.minusResolutionNatTrans.app K) :=
  inferInstanceAs (QuasiIso (Œõ.totalœÄ K))

instance (K : CochainComplex.Minus A) :
    QuasiIso ((Minus.Œπ A).map (Œõ.minusResolutionNatTrans.app K)) :=
  Œõ.quasiIso_minusResolutionNatTrans_app K


instance (K : Minus A) :
    QuasiIso ((whiskerRight Œõ.minusResolutionNatTrans (Minus.Œπ A)).app K) := by
  dsimp; infer_instance

lemma quasiIso_minusResolutionFunctor_map {K L : CochainComplex.Minus A} (f : K ‚ü∂ L)
    (hf : Minus.quasiIso f) :
    Minus.quasiIso (Œπ.mapCochainComplexMinus.map (Œõ.minusResolutionFunctor.map f)) := by
  have eq := (CochainComplex.Minus.Œπ _).congr_map (Œõ.minusResolutionNatTrans.naturality f)
  dsimp at eq
  simp only [Functor.map_comp] at eq
  change QuasiIso _
  rw [‚Üê quasiIso_iff_comp_right _ ((Minus.Œπ A).map (Œõ.minusResolutionNatTrans.app L)), eq]
  have : QuasiIso ((Minus.Œπ A).map f) := hf
  infer_instance

end

end LeftResolutions

end Abelian

end CategoryTheory
