/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.Additive
import Mathlib.Algebra.Homology.ShortComplex.Abelian
import Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex

/-!
# Left resolutions

Given a fully faithful functor `Œπ : C ‚•§ A` to an abelian category,
we introduce a structure `Abelian.LeftResolutions Œπ` which gives
a functor `F : A ‚•§ C` and a natural epimorphism
`œÄ.app X : Œπ.obj (F.obj X) ‚ü∂ X` for all `X : A`.
This is used in order to construct a resolution functor
`LeftResolutions.chainComplexFunctor : A ‚•§ ChainComplex C ‚Ñï`.

This shall be used in order to construct functorial flat resolutions.

-/

namespace CategoryTheory.Abelian

open Category Limits Preadditive ZeroObject

variable {A C : Type*} [Category C] [Category A] (Œπ : C ‚•§ A)

/-- Given a fully faithful functor `Œπ : C ‚•§ A`, this structure contains the data
of a functor `F : A ‚•§ C` and a functorial epimorphism
`œÄ.app X : Œπ.obj (F.obj X) ‚ü∂ X` for all `X : A`. -/
structure LeftResolutions where
  /-- a functor which sends `X : A` to an object `F.obj X` with an epimorphism
    `œÄ.app X : Œπ.obj (F.obj X) ‚ü∂ X` -/
  F : A ‚•§ C
  /-- the natural epimorphism -/
  œÄ : F ‚ãô Œπ ‚ü∂ ùü≠ A
  epi_œÄ_app (X : A) : Epi (œÄ.app X) := by infer_instance

namespace LeftResolutions

attribute [instance] epi_œÄ_app

variable {Œπ} (Œõ : LeftResolutions Œπ) (X Y Z : A) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)

@[reassoc (attr := simp)]
lemma œÄ_naturality : Œπ.map (Œõ.F.map f) ‚â´ Œõ.œÄ.app Y = Œõ.œÄ.app X ‚â´ f :=
  Œõ.œÄ.naturality f

variable [Œπ.Full] [Œπ.Faithful] [HasZeroMorphisms C] [Abelian A]

/-- Given `Œπ : C ‚•§ A`, `Œõ : LeftResolutions Œπ`, `X : A`, this is a chain complex
which is a (functorial) resolution of `A` that is obtained inductively by using
the epimorphisms given by `Œõ`. -/
noncomputable def chainComplex : ChainComplex C ‚Ñï :=
  ChainComplex.mk' _ _ (Œπ.preimage (Œõ.œÄ.app (kernel (Œõ.œÄ.app X)) ‚â´ kernel.Œπ _))
    (fun f => ‚ü®_, Œπ.preimage (Œõ.œÄ.app (kernel (Œπ.map f)) ‚â´ kernel.Œπ _),
      Œπ.map_injective (by simp)‚ü©)

/-- Given `Œõ : LeftResolutions Œπ`, the chain complex `Œõ.chainComplex X`
identifies in degree `0` to `Œõ.F.obj X`. -/
noncomputable def chainComplexXZeroIso :
    (Œõ.chainComplex X).X 0 ‚âÖ Œõ.F.obj X := Iso.refl _

/-- Given `Œõ : LeftResolutions Œπ`, the chain complex `Œõ.chainComplex X`
identifies in degree `1` to `Œõ.F.obj (kernel (Œõ.œÄ.app X))`. -/
noncomputable def chainComplexXOneIso :
    (Œõ.chainComplex X).X 1 ‚âÖ Œõ.F.obj (kernel (Œõ.œÄ.app X)) := Iso.refl _

@[reassoc]
lemma map_chainComplex_d_1_0 :
    Œπ.map ((Œõ.chainComplex X).d 1 0) =
      Œπ.map (Œõ.chainComplexXOneIso X).hom ‚â´ Œõ.œÄ.app (kernel (Œõ.œÄ.app X)) ‚â´ kernel.Œπ _ ‚â´
      Œπ.map (Œõ.chainComplexXZeroIso X).inv := by
  simp [chainComplexXOneIso, chainComplexXZeroIso, chainComplex]

/-- The isomorphism which gives the inductive step of the construction of `Œõ.chainComplex X`. -/
noncomputable def chainComplexXIso (n : ‚Ñï) :
    (Œõ.chainComplex X).X (n + 2) ‚âÖ Œõ.F.obj (kernel (Œπ.map ((Œõ.chainComplex X).d (n + 1) n))) := by
  apply ChainComplex.mk'XIso

lemma map_chainComplex_d (n : ‚Ñï) :
    Œπ.map ((Œõ.chainComplex X).d (n + 2) (n + 1)) =
    Œπ.map (Œõ.chainComplexXIso X n).hom ‚â´ Œõ.œÄ.app (kernel (Œπ.map ((Œõ.chainComplex X).d (n + 1) n))) ‚â´
      kernel.Œπ (Œπ.map ((Œõ.chainComplex X).d (n + 1) n)) := by
  have := Œπ.map_preimage (Œõ.œÄ.app _ ‚â´ kernel.Œπ (Œπ.map ((Œõ.chainComplex X).d (n + 1) n)))
  dsimp at this
  rw [‚Üê this, ‚Üê Functor.map_comp]
  congr 1
  apply ChainComplex.mk'_d

attribute [irreducible] chainComplex

lemma exactAt_map_chainComplex_succ (n : ‚Ñï) :
    ((Œπ.mapHomologicalComplex _).obj (Œõ.chainComplex X)).ExactAt (n + 1) := by
  rw [HomologicalComplex.exactAt_iff' _ (n + 2) (n + 1) n
    (ComplexShape.prev_eq' _ (by dsimp; omega)) (by simp),
    ShortComplex.exact_iff_epi_kernel_lift]
  convert epi_comp (Œπ.map (Œõ.chainComplexXIso X n).hom) (Œõ.œÄ.app _)
  rw [‚Üê cancel_mono (kernel.Œπ _), kernel.lift_Œπ]
  simp [map_chainComplex_d]

variable {X Y Z}

/-- The morphism `Œõ.chainComplex X ‚ü∂ Œõ.chainComplex Y` of chain complexes
induced by `f : X ‚ü∂ Y`. -/
noncomputable def chainComplexMap : Œõ.chainComplex X ‚ü∂ Œõ.chainComplex Y :=
  ChainComplex.mkHom _ _
    ((Œõ.chainComplexXZeroIso X).hom ‚â´ Œõ.F.map f ‚â´ (Œõ.chainComplexXZeroIso Y).inv)
    ((Œõ.chainComplexXOneIso X).hom ‚â´
      Œõ.F.map (kernel.map _ _ (Œπ.map (Œõ.F.map f)) f (Œõ.œÄ.naturality f).symm) ‚â´
      (Œõ.chainComplexXOneIso Y).inv)
    (Œπ.map_injective (by
        dsimp
        simp only [Category.assoc, Functor.map_comp, map_chainComplex_d_1_0]
        simp only [‚Üê Œπ.map_comp, ‚Üê Œπ.map_comp_assoc, Iso.inv_hom_id_assoc,
          Iso.inv_hom_id, comp_id]
        simp))
    (fun n p ‚Ü¶
      ‚ü®(Œõ.chainComplexXIso X n).hom ‚â´ (Œõ.F.map
        (kernel.map _ _ (Œπ.map p.2.1) (Œπ.map p.1) (by
          rw [‚Üê Œπ.map_comp, ‚Üê Œπ.map_comp, p.2.2]))) ‚â´ (Œõ.chainComplexXIso Y n).inv,
            Œπ.map_injective (by simp [map_chainComplex_d])‚ü©)

@[simp]
lemma chainComplexMap_f_0 :
    (Œõ.chainComplexMap f).f 0 =
      ((Œõ.chainComplexXZeroIso X).hom ‚â´ Œõ.F.map f ‚â´ (Œõ.chainComplexXZeroIso Y).inv) := rfl

@[simp]
lemma chainComplexMap_f_1 :
    (Œõ.chainComplexMap f).f 1 =
    (Œõ.chainComplexXOneIso X).hom ‚â´
      Œõ.F.map (kernel.map _ _ (Œπ.map (Œõ.F.map f)) f (Œõ.œÄ.naturality f).symm) ‚â´
      (Œõ.chainComplexXOneIso Y).inv := rfl

@[simp]
lemma chainComplexMap_f_succ_succ (n : ‚Ñï) :
    (Œõ.chainComplexMap f).f (n + 2) =
      (Œõ.chainComplexXIso X n).hom ‚â´
        Œõ.F.map (kernel.map _ _ (Œπ.map ((Œõ.chainComplexMap f).f (n + 1)))
          (Œπ.map ((Œõ.chainComplexMap f).f n))
          (by rw [‚Üê Œπ.map_comp, ‚Üê Œπ.map_comp, HomologicalComplex.Hom.comm])) ‚â´
          (Œõ.chainComplexXIso Y n).inv := by
  apply ChainComplex.mkHom_f_succ_succ

variable (X) in
@[simp]
lemma chainComplexMap_id : Œõ.chainComplexMap (ùüô X) = ùüô _ := by
  ext n
  induction n with
  | zero => simp
  | succ n hn => obtain _ | n := n <;> simp [hn]

variable (X Y) in
@[simp]
lemma chainComplexMap_zero [Œõ.F.PreservesZeroMorphisms] :
    Œõ.chainComplexMap (0 : X ‚ü∂ Y) = 0 := by
  ext n
  induction n with
  | zero => simp
  | succ n hn => obtain _|n := n <;> simp [hn]

@[reassoc, simp]
lemma chainComplexMap_comp :
    Œõ.chainComplexMap (f ‚â´ g) = Œõ.chainComplexMap f ‚â´ Œõ.chainComplexMap g := by
  ext n
  induction n with
  | zero => simp
  | succ n hn =>
    obtain _ | n := n
    all_goals
      dsimp
      simp only [chainComplexMap_f_succ_succ, assoc, Iso.cancel_iso_hom_left,
        Iso.inv_hom_id_assoc, ‚Üê Œõ.F.map_comp_assoc, Iso.cancel_iso_inv_right_assoc]
      congr 1
      cat_disch

/-- Given `Œπ : C ‚•§ A`, `Œõ : LeftResolutions Œπ`, this is a
functor `A ‚•§ ChainComplex C ‚Ñï` which sends `X : A` to a resolution consisting
of objects in `C`. -/
noncomputable def chainComplexFunctor : A ‚•§ ChainComplex C ‚Ñï where
  obj X := Œõ.chainComplex X
  map f := Œõ.chainComplexMap f

end LeftResolutions

end CategoryTheory.Abelian
