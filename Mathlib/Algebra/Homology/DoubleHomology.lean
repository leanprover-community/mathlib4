/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.Double
import Mathlib.Algebra.Homology.QuasiIso
import Mathlib.Algebra.Homology.Refinements
import Mathlib.Algebra.Homology.ShortComplex.ShortExact

/-!
# Homology of double complexes

-/

namespace CategoryTheory

open Limits ZeroObject HomologicalComplex

variable {C : Type*} [Category C] [Abelian C]

namespace ShortComplex

variable (S : ShortComplex C)

@[simps!]
noncomputable def arrowHomToG : Arrow.mk (0 : S.X‚ÇÅ ‚ü∂ 0) ‚ü∂ Arrow.mk S.g :=
  Arrow.homMk S.f 0

variable {Œπ : Type*} {c : ComplexShape Œπ} {i‚ÇÄ i‚ÇÅ : Œπ} (hi‚ÇÄ‚ÇÅ : c.Rel i‚ÇÄ i‚ÇÅ) (hi‚ÇÄ‚ÇÅ' : i‚ÇÄ ‚â† i‚ÇÅ)

lemma mono_homologyMap‚ÇÄ_doubleFunctor_map_arrowHomToG_iff :
    Mono (HomologicalComplex.homologyMap ((doubleFunctor C hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ').map S.arrowHomToG) i‚ÇÄ) ‚Üî
      Mono S.f := by
  let e‚ÇÅ := doubleXIso‚ÇÄ (0 : S.X‚ÇÅ ‚ü∂ 0) hi‚ÇÄ‚ÇÅ
  let e‚ÇÇ := doubleXIso‚ÇÄ S.g hi‚ÇÄ‚ÇÅ
  have h‚ÇÄ : (double (0 : S.X‚ÇÅ ‚ü∂ 0) hi‚ÇÄ‚ÇÅ).d i‚ÇÄ i‚ÇÅ = 0 := by simp [double_d _ hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ']
  have hf : ((doubleFunctor C hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ').map S.arrowHomToG).f i‚ÇÄ = e‚ÇÅ.hom ‚â´ S.f ‚â´ e‚ÇÇ.inv := by
    simp [e‚ÇÅ, e‚ÇÇ, doubleFunctor_map]
  rw [HomologicalComplex.mono_homologyMap_iff_up_to_refinements _ _ _ _ rfl (c.next_eq' hi‚ÇÄ‚ÇÅ)]
  dsimp
  simp only [hf, h‚ÇÄ, double_d_eq_zero‚ÇÅ _ _ _ _ hi‚ÇÄ‚ÇÅ', comp_zero, exists_prop,
    forall_const, exists_const]
  constructor
  ¬∑ intro h
    rw [Preadditive.mono_iff_cancel_zero]
    intro A x‚ÇÅ hx‚ÇÅ
    have pif := h (x‚ÇÅ ‚â´ e‚ÇÅ.inv) (by simp [reassoc_of% hx‚ÇÅ])
    obtain ‚ü®A', œÄ, _, fac‚ü© := h (x‚ÇÅ ‚â´ e‚ÇÅ.inv) (by simp [reassoc_of% hx‚ÇÅ])
    rw [‚Üê cancel_mono e‚ÇÅ.inv, ‚Üê cancel_epi œÄ, fac, zero_comp, comp_zero]
  ¬∑ intro _ A x‚ÇÅ hx‚ÇÅ
    refine ‚ü®A, ùüô _, inferInstance, ?_‚ü©
    rw [Category.id_comp, ‚Üê cancel_mono (e‚ÇÅ.hom ‚â´ S.f ‚â´ e‚ÇÇ.inv), hx‚ÇÅ, zero_comp]

lemma epi_homologyMap‚ÇÄ_doubleFunctor_map_arrowHomToG_iff :
    Epi (HomologicalComplex.homologyMap ((doubleFunctor C hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ').map S.arrowHomToG) i‚ÇÄ) ‚Üî
      S.Exact := by
  let e‚ÇÅ := doubleXIso‚ÇÄ (0 : S.X‚ÇÅ ‚ü∂ 0) hi‚ÇÄ‚ÇÅ
  let e‚ÇÇ := doubleXIso‚ÇÄ S.g hi‚ÇÄ‚ÇÅ
  let e‚ÇÉ := doubleXIso‚ÇÅ S.g hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ'
  have h‚ÇÄ : (double (0 : S.X‚ÇÅ ‚ü∂ 0) hi‚ÇÄ‚ÇÅ).d i‚ÇÄ i‚ÇÅ = 0 := by simp [double_d _ hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ']
  have hf : ((doubleFunctor C hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ').map S.arrowHomToG).f i‚ÇÄ = e‚ÇÅ.hom ‚â´ S.f ‚â´ e‚ÇÇ.inv := by
    simp [e‚ÇÅ, e‚ÇÇ, doubleFunctor_map]
  have hg : (double S.g hi‚ÇÄ‚ÇÅ).d i‚ÇÄ i‚ÇÅ = e‚ÇÇ.hom ‚â´ S.g ‚â´ e‚ÇÉ.inv := by
    simp [e‚ÇÇ, e‚ÇÉ, double_d _ hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ']
  rw [HomologicalComplex.epi_homologyMap_iff_up_to_refinements _ _ _ _ rfl (c.next_eq' hi‚ÇÄ‚ÇÅ),
    exact_iff_exact_up_to_refinements]
  dsimp
  simp only [hf, hg, h‚ÇÄ, double_d_eq_zero‚ÇÅ S.g hi‚ÇÄ‚ÇÅ (c.prev i‚ÇÄ) i‚ÇÄ hi‚ÇÄ‚ÇÅ',
    comp_zero, exists_const, exists_prop, add_zero]
  constructor
  ¬∑ intro h A x‚ÇÇ hx‚ÇÇ
    obtain ‚ü®A', œÄ, _, x‚ÇÅ, fac‚ü© := h (x‚ÇÇ ‚â´ e‚ÇÇ.inv) (by simp [reassoc_of% hx‚ÇÇ])
    refine ‚ü®A', œÄ, inferInstance, x‚ÇÅ ‚â´ e‚ÇÅ.hom, ?_‚ü©
    rw [‚Üê cancel_mono (e‚ÇÇ.inv), Category.assoc, fac, Category.assoc, Category.assoc]
  ¬∑ intro h A x‚ÇÇ hx‚ÇÇ
    obtain ‚ü®A', œÄ, _, x‚ÇÅ, fac‚ü© := h (x‚ÇÇ ‚â´ e‚ÇÇ.hom)
      (by simp only [Category.assoc, ‚Üê cancel_mono e‚ÇÉ.inv, hx‚ÇÇ, zero_comp])
    exact ‚ü®A', œÄ, inferInstance, x‚ÇÅ ‚â´ e‚ÇÅ.inv, by simp [‚Üê cancel_mono e‚ÇÇ.hom, fac]‚ü©

lemma quasiIsoAt‚ÇÄ_doubleFunctor_map_arrowHomToG_iff :
    _root_.QuasiIsoAt ((doubleFunctor C hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ').map S.arrowHomToG) i‚ÇÄ ‚Üî
      S.Exact ‚àß Mono S.f := by
  rw [quasiIsoAt_iff_isIso_homologyMap,
    ‚Üê mono_homologyMap‚ÇÄ_doubleFunctor_map_arrowHomToG_iff _ hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ',
    ‚Üê epi_homologyMap‚ÇÄ_doubleFunctor_map_arrowHomToG_iff _ hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ']
  exact ‚ü®fun _ ‚Ü¶ ‚ü®inferInstance, inferInstance‚ü©, fun ‚ü®_, _‚ü© ‚Ü¶ isIso_of_mono_of_epi _‚ü©

lemma quasiIsoAt‚ÇÅ_doubleFunctor_map_arrowHomToG_iff :
    _root_.QuasiIsoAt ((doubleFunctor C hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ').map S.arrowHomToG) i‚ÇÅ ‚Üî Epi S.g := by
  rw [_root_.quasiIsoAt_iff_exactAt]; swap
  ¬∑ apply ShortComplex.exact_of_isZero_X‚ÇÇ
    exact IsZero.of_iso (Limits.isZero_zero C) (doubleXIso‚ÇÅ 0 hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ')
  rw [exactAt_iff' _ _ _ _ (c.prev_eq' hi‚ÇÄ‚ÇÅ) rfl,
    exact_iff_epi _ (double_d_eq_zero‚ÇÄ S.g hi‚ÇÄ‚ÇÅ _ _ hi‚ÇÄ‚ÇÅ'.symm)]
  exact (MorphismProperty.epimorphisms _).arrow_mk_iso_iff
    (arrowIsoDoubleD S.g hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ')

lemma quasiIso_doubleFunctor_map_arrowHomToG_iff_exact :
    _root_.QuasiIso ((doubleFunctor C hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ').map S.arrowHomToG) ‚Üî S.ShortExact := by
  let œÜ := ((doubleFunctor C hi‚ÇÄ‚ÇÅ hi‚ÇÄ‚ÇÅ').map S.arrowHomToG)
  constructor
  ¬∑ intro (h : _root_.QuasiIso œÜ)
    rw [_root_.quasiIso_iff] at h
    have h‚ÇÄ := h i‚ÇÄ
    have h‚ÇÅ := h i‚ÇÅ
    rw [quasiIsoAt‚ÇÄ_doubleFunctor_map_arrowHomToG_iff] at h‚ÇÄ
    rw [quasiIsoAt‚ÇÅ_doubleFunctor_map_arrowHomToG_iff] at h‚ÇÅ
    obtain ‚ü®h, _‚ü© := h‚ÇÄ
    exact { exact := h }
  ¬∑ intro hS
    rw [_root_.quasiIso_iff]
    intro i
    by_cases h‚ÇÄ : i = i‚ÇÄ
    ¬∑ subst h‚ÇÄ
      rw [quasiIsoAt‚ÇÄ_doubleFunctor_map_arrowHomToG_iff]
      exact ‚ü®hS.exact, hS.mono_f‚ü©
    ¬∑ by_cases h‚ÇÅ : i = i‚ÇÅ
      ¬∑ subst h‚ÇÅ
        rw [quasiIsoAt‚ÇÅ_doubleFunctor_map_arrowHomToG_iff]
        exact hS.epi_g
      ¬∑ rw [quasiIsoAt_iff_exactAt]
        all_goals
          apply ShortComplex.exact_of_isZero_X‚ÇÇ
          apply isZero_double_X 0 hi‚ÇÄ‚ÇÅ i h‚ÇÄ h‚ÇÅ

end ShortComplex

end CategoryTheory
