/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.Embedding.StupidFiltration
import Mathlib.Algebra.Homology.Embedding.CochainComplex
import Mathlib.Algebra.Homology.HomologySequenceLemmas
import Mathlib.Algebra.Homology.TotalComplex
import Mathlib.Algebra.Homology.TotalComplexShift
import Mathlib.Algebra.Homology.TotalComplexMap
import Mathlib.CategoryTheory.Idempotents.Basic

/-!
# Columns of bicomplexes
-/

open CategoryTheory Category Limits ComplexShape

instance {C Œπ : Type*} [Category C] [HasZeroMorphisms C]
    {c : ComplexShape Œπ} (i : Œπ) :
    (HomologicalComplex.eval C c i).PreservesZeroMorphisms where

namespace CategoryTheory

variable {C : Type*} [Category C]

namespace GradedObject

instance {I : Type*} (i : I) [HasZeroMorphisms C] :
    (GradedObject.eval i : GradedObject I C ‚•§ C).PreservesZeroMorphisms where

instance {I : Type*} (i : I) [Preadditive C] :
    (GradedObject.eval i : GradedObject I C ‚•§ C).Additive where

variable [Preadditive C]
variable {I : Type*} (S : ShortComplex (GradedObject I C))
  {J : Type*} (p : I ‚Üí J)
  [S.X‚ÇÅ.HasMap p] [S.X‚ÇÇ.HasMap p] [S.X‚ÇÉ.HasMap p]

@[simps]
noncomputable def mapShortComplex : ShortComplex (GradedObject J C) where
  f := mapMap S.f p
  g := mapMap S.g p
  zero := by rw [‚Üê mapMap_comp, S.zero, mapMap_zero]

@[simps]
def shortComplexSplittingEquiv :
    S.Splitting ‚âÉ (‚àÄ (i : I), (S.map (eval i)).Splitting) where
  toFun œÉ i := œÉ.map (eval i)
  invFun œÑ :=
    { r := fun i => (œÑ i).r
      s := fun i => (œÑ i).s
      s_g := by ext i; exact (œÑ i).s_g
      f_r := by ext i; exact (œÑ i).f_r
      id := by ext i; exact (œÑ i).id }
  left_inv _ := rfl
  right_inv _ := rfl

@[simps]
noncomputable def mapShortComplexSplitting (œÉ : S.Splitting) :
    (mapShortComplex S p).Splitting where
  r := mapMap œÉ.r p
  s := mapMap œÉ.s p
  s_g := by
    dsimp only [mapShortComplex]
    rw [‚Üê mapMap_comp, œÉ.s_g, mapMap_id]
  f_r := by
    dsimp only [mapShortComplex]
    rw [‚Üê mapMap_comp, œÉ.f_r, mapMap_id]
  id := by
    dsimp only [mapShortComplex]
    rw [‚Üê mapMap_comp, ‚Üê mapMap_comp, ‚Üê mapMap_add, œÉ.id, mapMap_id]

end GradedObject

namespace Limits

section

variable [IsIdempotentComplete C] {I : Type*}
  {X : I ‚Üí C} (Y : I ‚Üí C)
  (hX : ‚àÄ (i : I), Retract (X i) (Y i))

include hX in
lemma hasCoproduct_of_direct_factor [HasCoproduct Y] : HasCoproduct X := by
  let p : ‚àê Y ‚ü∂ ‚àê Y := Sigma.map (fun i => (hX i).r ‚â´ (hX i).i)
  obtain ‚ü®S, h, fac‚ü© := retract_of_isIdempotentComplete _ p (by aesop_cat)
  refine ‚ü®Cofan.mk S (fun i => (hX i).i ‚â´ Sigma.Œπ Y i ‚â´ h.r),
    mkCofanColimit _ (fun c => h.i ‚â´ Sigma.desc (fun i => (hX i).r ‚â´ c.inj i))
      (fun c i => by simp [p, reassoc_of% fac])
      (fun c m hm => ?_)‚ü©
  dsimp at m ‚ä¢
  rw [‚Üê cancel_epi h.r]
  ext i
  dsimp at hm
  simp only [‚Üê hm, reassoc_of% fac]
  dsimp [p]
  simp only [Category.assoc, Œπ_colimMap_assoc, Discrete.functor_obj_eq_as, Discrete.natTrans_app,
    colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app, Retract.retract_assoc]
  simp only [‚Üê Category.assoc]
  congr 1
  rw [‚Üê cancel_mono h.i]
  simp [fac, p]

end

section

variable [HasZeroMorphisms C] {I : Type*} (X : I ‚Üí C) {J : Type*} (Œπ : J ‚Üí I)
  [HasCoproduct (X ‚àò Œπ)] (hŒπ : Function.Injective Œπ)
  (hX : ‚àÄ (i : I), ¬¨ i ‚àà Set.range Œπ ‚Üí IsZero (X i))

open Classical in
@[simps! pt]
noncomputable def cofanOfIsZero : Cofan X := Cofan.mk (‚àê (X ‚àò Œπ)) (fun i =>
  if hi : i ‚àà Set.range Œπ
  then eqToHom (by
    congr
    exact hi.choose_spec.symm) ‚â´ Sigma.Œπ _ hi.choose
  else 0)

include hŒπ in
lemma cofanOfIsZero_inj (j : J) :
    (cofanOfIsZero X Œπ).inj (Œπ j) = Sigma.Œπ (X ‚àò Œπ) j := by
  dsimp [cofanOfIsZero]
  have hi : Œπ j ‚àà Set.range Œπ := ‚ü®j, rfl‚ü©
  rw [dif_pos hi]
  apply Sigma.eqToHom_comp_Œπ (X ‚àò Œπ)
  exact (hŒπ hi.choose_spec).symm

include hŒπ in
noncomputable def isColimitCofanOfIsZero : IsColimit (cofanOfIsZero X Œπ) :=
  mkCofanColimit _ (fun s => Sigma.desc (f := X ‚àò Œπ) (fun j => s.inj (Œπ j)))
    (fun s i => by
      by_cases hi : i ‚àà Set.range Œπ
      ¬∑ obtain ‚ü®j, rfl‚ü© := hi
        dsimp
        rw [cofanOfIsZero_inj _ _ hŒπ]
        simp
      ¬∑ apply (hX i hi).eq_of_src)
    (fun s m hm => by
      dsimp
      apply Limits.Sigma.hom_ext (f := X ‚àò Œπ)
      intro j
      simp only [colimit.Œπ_desc, Cofan.mk_Œπ_app, ‚Üê hm]
      rw [cofanOfIsZero_inj _ _ hŒπ])

include hŒπ hX in
lemma hasCoproduct_of_isZero : HasCoproduct X :=
  ‚ü®_, isColimitCofanOfIsZero X Œπ hŒπ hX‚ü©

section

variable {D : Type*} [Category D] [HasZeroMorphisms D] (F : C ‚•§ D) [F.PreservesZeroMorphisms]
  [PreservesColimit (Discrete.functor (X ‚àò Œπ)) F]

noncomputable def preservesColimitOfIsZero : PreservesColimit (Discrete.functor X) F := by
  have : HasCoproduct ((F.obj ‚àò X) ‚àò Œπ) := by
    let h := isColimitOfPreserves F (coproductIsCoproduct (X ‚àò Œπ))
    exact ‚ü®_, (isColimitMapCoconeCofanMkEquiv _ _ _).1 h‚ü©
  have : HasCoproduct fun b ‚Ü¶ F.obj ((X ‚àò Œπ) b) := by assumption
  apply preservesColimit_of_preserves_colimit_cocone (isColimitCofanOfIsZero X Œπ hŒπ hX)
  refine (isColimitMapCoconeCofanMkEquiv _ _ _).2
    (IsColimit.ofIsoColimit (isColimitCofanOfIsZero (F.obj ‚àò X) Œπ hŒπ
      (fun i hi => F.map_isZero (hX i hi)))
      (Cofan.ext (asIso (sigmaComparison F (X ‚àò Œπ))) ?_))
  intro i
  by_cases hi : i ‚àà Set.range Œπ
  ¬∑ obtain ‚ü®j, rfl‚ü© := hi
    change _ = F.map ((cofanOfIsZero X Œπ).inj (Œπ j))
    rw [cofanOfIsZero_inj _ _ hŒπ, cofanOfIsZero_inj _ _ hŒπ]
    erw [Œπ_comp_sigmaComparison]
    rfl
  ¬∑ apply (F.map_isZero (hX _ hi)).eq_of_src

end

end

section

variable {I : Type*} (X : I ‚Üí C) (i : I)
    (hX : ‚àÄ j, j ‚â† i ‚Üí IsZero (X j))

open Classical in
@[simp]
noncomputable def cofanOfIsZeroButOne : Cofan X := Cofan.mk (X i)
  (fun j => if h : j = i then eqToHom (by rw [h]) else (hX _ h).to_ _)

@[simp]
lemma cofanOfIsZeroButOne_Œπ_self :
    (cofanOfIsZeroButOne X i hX).inj i = ùüô _ :=
  dif_pos rfl

noncomputable def isColimitCofanOfIsZeroButOne :
    IsColimit (cofanOfIsZeroButOne X i hX) :=
  mkCofanColimit _ (fun s => s.inj i) (fun s j => by
    by_cases hj : j = i
    ¬∑ subst hj
      simp
    ¬∑ apply (hX _ hj).eq_of_src) (fun s m hm => by
      dsimp
      simpa using hm i)

include hX in
lemma hasCoproduct_of_isZero_but_one : HasCoproduct X :=
  ‚ü®‚ü®_, isColimitCofanOfIsZeroButOne X i hX‚ü©‚ü©

end

end Limits

end CategoryTheory

namespace HomologicalComplex‚ÇÇ

variable {C : Type*} [Category C] [Preadditive C]
  {Œπ‚ÇÅ Œπ‚ÇÇ Œπ : Type*} {c‚ÇÅ : ComplexShape Œπ‚ÇÅ} {c‚ÇÇ : ComplexShape Œπ‚ÇÇ}

section

variable [IsIdempotentComplete C]
  {K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ} (L : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ)
  (c : ComplexShape Œπ) [TotalComplexShape c‚ÇÅ c‚ÇÇ c]
  (h : ‚àÄ i‚ÇÅ i‚ÇÇ, Retract ((K.X i‚ÇÅ).X i‚ÇÇ) ((L.X i‚ÇÅ).X i‚ÇÇ))

include h in
lemma hasTotal_of_retract [L.HasTotal c] : K.HasTotal c :=
  fun i => hasCoproduct_of_direct_factor
    (GradedObject.mapObjFun L.toGradedObject (œÄ c‚ÇÅ c‚ÇÇ c) i) (fun _ => h _ _)

variable {Œπ‚ÇÅ' : Type*} {c‚ÇÅ' : ComplexShape Œπ‚ÇÅ'} (e : c‚ÇÅ'.Embedding c‚ÇÅ) [e.IsRelIff]
  [HasZeroObject C]

instance [K.HasTotal c] : HomologicalComplex‚ÇÇ.HasTotal (K.stupidTrunc e) c :=
  hasTotal_of_retract K c
    (fun i‚ÇÅ i‚ÇÇ => (K.stupidTruncRetract e i‚ÇÅ).map (HomologicalComplex.eval _ _ i‚ÇÇ))

end

section

variable (K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ)
  (c : ComplexShape Œπ) [TotalComplexShape c‚ÇÅ c‚ÇÇ c]
  (n : Œπ)

structure CoreHasTotal where
  J : Type*
  œÜ‚ÇÅ : J ‚Üí Œπ‚ÇÅ
  œÜ‚ÇÇ : J ‚Üí Œπ‚ÇÇ
  œÄ_œÜ (j : J) : ComplexShape.œÄ c‚ÇÅ c‚ÇÇ c ‚ü®œÜ‚ÇÅ j, œÜ‚ÇÇ j‚ü© = n
  hœÜ : Function.Injective (fun j ‚Ü¶ (œÜ‚ÇÅ j, œÜ‚ÇÇ j))
  isZero (i‚ÇÅ : Œπ‚ÇÅ) (i‚ÇÇ : Œπ‚ÇÇ) (hi : ComplexShape.œÄ c‚ÇÅ c‚ÇÇ c ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© = n)
    (h : ¬¨ IsZero ((K.X i‚ÇÅ).X i‚ÇÇ)) : ‚àÉ j, œÜ‚ÇÅ j = i‚ÇÅ ‚àß œÜ‚ÇÇ j = i‚ÇÇ
  hasCoproduct' : HasCoproduct (fun j => (K.X (œÜ‚ÇÅ j)).X (œÜ‚ÇÇ j)) := by infer_instance

namespace CoreHasTotal

variable {K c n}
variable (Œ∫ : K.CoreHasTotal c n)

@[simps]
def œÜ : Œ∫.J ‚Üí œÄ c‚ÇÅ c‚ÇÇ c ‚Åª¬π' {n} := fun j => ‚ü®‚ü®Œ∫.œÜ‚ÇÅ j, Œ∫.œÜ‚ÇÇ j‚ü©, Œ∫.œÄ_œÜ j‚ü©

lemma injective_œÜ : Function.Injective Œ∫.œÜ := by
  intro j‚ÇÅ j‚ÇÇ h
  apply Œ∫.hœÜ
  simpa only [Subtype.ext_iff] using h

attribute [instance] hasCoproduct'

instance : HasCoproduct (K.toGradedObject.mapObjFun (œÄ c‚ÇÅ c‚ÇÇ c) n ‚àò Œ∫.œÜ) := Œ∫.hasCoproduct'

/-- isZero' -/
lemma isZero' (i : œÄ c‚ÇÅ c‚ÇÇ c ‚Åª¬π' {n}) (hi : i ‚àâ Set.range Œ∫.œÜ) :
    IsZero ((K.X i.1.1).X i.1.2) := by
  obtain ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, hi‚ÇÅ‚ÇÇ‚ü© := i
  by_contra h
  apply hi
  obtain ‚ü®j, rfl, rfl‚ü© := Œ∫.isZero i‚ÇÅ i‚ÇÇ hi‚ÇÅ‚ÇÇ h
  exact ‚ü®j, rfl‚ü©

noncomputable def cofan : Cofan (K.toGradedObject.mapObjFun (ComplexShape.œÄ c‚ÇÅ c‚ÇÇ c) n) :=
  cofanOfIsZero (K.toGradedObject.mapObjFun (ComplexShape.œÄ c‚ÇÅ c‚ÇÇ c) n) Œ∫.œÜ

noncomputable def isColimit : IsColimit Œ∫.cofan :=
  isColimitCofanOfIsZero (K.toGradedObject.mapObjFun (ComplexShape.œÄ c‚ÇÅ c‚ÇÇ c) n) Œ∫.œÜ
    Œ∫.injective_œÜ Œ∫.isZero'

def hasCoproduct :
    HasCoproduct (K.toGradedObject.mapObjFun (ComplexShape.œÄ c‚ÇÅ c‚ÇÇ c) n) :=
  ‚ü®_, Œ∫.isColimit‚ü©

section

variable {D : Type*} [Category D] [Preadditive D] (F : C ‚•§ D) [F.PreservesZeroMorphisms]
  [PreservesColimit (Discrete.functor (fun j => (K.X (Œ∫.œÜ‚ÇÅ j)).X (Œ∫.œÜ‚ÇÇ j))) F]

def map :
    CoreHasTotal ((F.mapHomologicalComplex‚ÇÇ c‚ÇÅ c‚ÇÇ).obj K) c n where
  J := Œ∫.J
  œÜ‚ÇÅ := Œ∫.œÜ‚ÇÅ
  œÜ‚ÇÇ := Œ∫.œÜ‚ÇÇ
  œÄ_œÜ := Œ∫.œÄ_œÜ
  hœÜ := Œ∫.hœÜ
  isZero i‚ÇÅ i‚ÇÇ h h' := Œ∫.isZero i‚ÇÅ i‚ÇÇ h (fun h'' => h' (F.map_isZero h''))
  hasCoproduct' := ‚ü®_, isColimitOfHasCoproductOfPreservesColimit F _‚ü©

noncomputable def preserves : PreservesColimit (Discrete.functor
    (K.toGradedObject.mapObjFun (ComplexShape.œÄ c‚ÇÅ c‚ÇÇ c) n)) F := by
  have : PreservesColimit (Discrete.functor (K.toGradedObject.mapObjFun (œÄ c‚ÇÅ c‚ÇÇ c) n ‚àò œÜ Œ∫)) F :=
    by assumption
  exact preservesColimitOfIsZero (X := (K.toGradedObject.mapObjFun (ComplexShape.œÄ c‚ÇÅ c‚ÇÇ c) n))
    Œ∫.œÜ Œ∫.injective_œÜ Œ∫.isZero' F

end

end CoreHasTotal

end

section

instance : (toGradedObjectFunctor C c‚ÇÅ c‚ÇÇ).Additive where

variable (S S' : ShortComplex (HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ)) (œÜ : S ‚ü∂ S')
  (c : ComplexShape Œπ) [DecidableEq Œπ] [TotalComplexShape c‚ÇÅ c‚ÇÇ c]
  [S.X‚ÇÅ.HasTotal c] [S.X‚ÇÇ.HasTotal c] [S.X‚ÇÉ.HasTotal c]
  [S'.X‚ÇÅ.HasTotal c] [S'.X‚ÇÇ.HasTotal c] [S'.X‚ÇÉ.HasTotal c]

@[simps]
noncomputable def total.shortComplex : ShortComplex (HomologicalComplex C c) where
  f := total.map S.f c
  g := total.map S.g c
  zero := by rw [‚Üê total.map_comp, S.zero, total.map_zero]

noncomputable def total.shortComplexSplitting
    (œÉ : (S.map (toGradedObjectFunctor C c‚ÇÅ c‚ÇÇ)).Splitting) (i : Œπ) :
    ((total.shortComplex S c).map (HomologicalComplex.eval _ _ i)).Splitting := by
  have : (ShortComplex.map S (toGradedObjectFunctor C c‚ÇÅ c‚ÇÇ)).X‚ÇÅ.HasMap (œÄ c‚ÇÅ c‚ÇÇ c) := by
    dsimp
    infer_instance
  have : (ShortComplex.map S (toGradedObjectFunctor C c‚ÇÅ c‚ÇÇ)).X‚ÇÇ.HasMap (œÄ c‚ÇÅ c‚ÇÇ c) := by
    dsimp
    infer_instance
  have : (ShortComplex.map S (toGradedObjectFunctor C c‚ÇÅ c‚ÇÇ)).X‚ÇÉ.HasMap (œÄ c‚ÇÅ c‚ÇÇ c) := by
    dsimp
    infer_instance
  exact GradedObject.shortComplexSplittingEquiv _
    (GradedObject.mapShortComplexSplitting _ _ œÉ) i

variable {S S'}

@[simps]
noncomputable def total.mapShortComplex : total.shortComplex S c ‚ü∂ total.shortComplex S' c where
  œÑ‚ÇÅ := total.map œÜ.œÑ‚ÇÅ _
  œÑ‚ÇÇ := total.map œÜ.œÑ‚ÇÇ _
  œÑ‚ÇÉ := total.map œÜ.œÑ‚ÇÉ _
  comm‚ÇÅ‚ÇÇ := by
    dsimp
    simp only [‚Üê total.map_comp, œÜ.comm‚ÇÅ‚ÇÇ]
  comm‚ÇÇ‚ÇÉ := by
    dsimp
    simp only [‚Üê total.map_comp, œÜ.comm‚ÇÇ‚ÇÉ]

end

end HomologicalComplex‚ÇÇ

namespace ComplexShape

open Embedding

lemma embeddingUpIntGE_monotone (a a' : ‚Ñ§) (h : a' ‚â§ a):
    (embeddingUpIntGE a).Subset (embeddingUpIntGE a') where
  subset := by
    obtain ‚ü®k, rfl‚ü© := Int.le.dest h
    rintro _ ‚ü®l, rfl‚ü©
    exact ‚ü®k + l, by dsimp; omega‚ü©

end ComplexShape

namespace CochainComplex

section

variable (C : Type*) [Category C] [HasZeroMorphisms C] [HasZeroObject C]

noncomputable abbrev stupidFiltrationGEFunctor :
    ‚Ñ§·µí·µñ ‚•§ CochainComplex C ‚Ñ§ ‚•§ CochainComplex C ‚Ñ§ :=
  ComplexShape.Embedding.stupidTruncGEFiltration
    (fun n => ComplexShape.embeddingUpIntGE n.unop)
      (fun _ _ œÜ => ComplexShape.embeddingUpIntGE_monotone _ _ (leOfHom œÜ.unop)) C

variable {C}
variable (K L : CochainComplex C ‚Ñ§)

noncomputable abbrev stupidFiltrationGE : ‚Ñ§·µí·µñ ‚•§ CochainComplex C ‚Ñ§ :=
  stupidFiltrationGEFunctor C ‚ãô ((evaluation _ _).obj K)

noncomputable def stupidFiltrationGEObjToSingle (n : ‚Ñ§) :
    K.stupidFiltrationGE.obj ‚ü®n‚ü© ‚ü∂ (HomologicalComplex.single C (up ‚Ñ§) n).obj (K.X n) :=
  HomologicalComplex.mkHomToSingle
    (K.stupidTruncXIso (embeddingUpIntGE n) (add_zero n)).hom (by
      rintro k hk
      apply IsZero.eq_of_src
      apply K.isZero_stupidTrunc_X
      dsimp at hk ‚ä¢
      omega)

@[reassoc]
lemma stupidFiltrationGE_map_to_single (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ < n‚ÇÅ) :
    K.stupidFiltrationGE.map (homOfLE h.le).op ‚â´
      K.stupidFiltrationGEObjToSingle n‚ÇÄ = 0 := by
  apply HomologicalComplex.to_single_hom_ext
  apply IsZero.eq_of_src
  apply K.isZero_stupidTrunc_X
  intros
  dsimp
  omega

@[simps]
noncomputable def shortComplexStupidFiltrationGE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    ShortComplex (CochainComplex C ‚Ñ§) :=
  ShortComplex.mk _ _ (K.stupidFiltrationGE_map_to_single n‚ÇÄ n‚ÇÅ (by omega))

lemma isIso_stupidFiltrationGE_map_f (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ ‚â§ n‚ÇÅ) (k : ‚Ñ§) (hk : n‚ÇÅ ‚â§ k ‚à® k < n‚ÇÄ) :
    IsIso ((K.stupidFiltrationGE.map (homOfLE h).op).f k) := by
  apply HomologicalComplex.isIso_mapStupidTruncGE_f
  obtain hk|hk := hk
  ¬∑ obtain ‚ü®j, hj‚ü© := Int.le.dest hk
    exact Or.inl ‚ü®j, by dsimp; omega‚ü©
  ¬∑ exact Or.inr (fun i‚ÇÇ => by dsimp; omega)

variable {K L} in
@[simps]
noncomputable def mapShortComplexStupidFiltrationGE (œÜ : K ‚ü∂ L) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    K.shortComplexStupidFiltrationGE n‚ÇÄ n‚ÇÅ h ‚ü∂ L.shortComplexStupidFiltrationGE n‚ÇÄ n‚ÇÅ h where
  œÑ‚ÇÅ := ((stupidFiltrationGEFunctor C).obj ‚ü®n‚ÇÅ‚ü©).map œÜ
  œÑ‚ÇÇ := ((stupidFiltrationGEFunctor C).obj ‚ü®n‚ÇÄ‚ü©).map œÜ
  œÑ‚ÇÉ := (HomologicalComplex.single C (up ‚Ñ§) n‚ÇÄ).map (œÜ.f n‚ÇÄ)
  comm‚ÇÅ‚ÇÇ := by dsimp; simp
  comm‚ÇÇ‚ÇÉ := by
    apply HomologicalComplex.to_single_hom_ext
    simp [stupidFiltrationGEObjToSingle, HomologicalComplex.single_map_f_self]

end

section

variable {C : Type*} [Category C] [Preadditive C] [HasZeroObject C]
  (K L : CochainComplex C ‚Ñ§) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ)

noncomputable def shortComplexStupidFiltrationGESplitting (k : ‚Ñ§) :
    ((K.shortComplexStupidFiltrationGE n‚ÇÄ n‚ÇÅ h).map
      (HomologicalComplex.eval _ _ k)).Splitting :=
  if hk : k = n‚ÇÄ
  then
    { s := eqToHom (by dsimp; rw [hk]) ‚â´
          (HomologicalComplex.singleObjXSelf (up ‚Ñ§) n‚ÇÄ (K.X n‚ÇÄ)).hom ‚â´
          eqToHom (by rw [hk]) ‚â´ (K.stupidTruncXIso (embeddingUpIntGE n‚ÇÄ)
            (i := 0) (by dsimp; omega)).inv
      s_g := by
        subst hk
        simp [stupidFiltrationGEObjToSingle]
      r := 0
      f_r := by
        apply IsZero.eq_of_src
        apply K.isZero_stupidTrunc_X
        intro
        dsimp
        omega
      id := by
        subst hk
        simp [stupidFiltrationGEObjToSingle] }
  else
    have := K.isIso_stupidFiltrationGE_map_f n‚ÇÄ n‚ÇÅ (by omega) k (by omega)
    { r := inv ((K.stupidFiltrationGE.map (homOfLE (show n‚ÇÄ ‚â§ n‚ÇÅ by omega)).op).f k)
      s := 0
      s_g := by
        apply IsZero.eq_of_tgt
        exact HomologicalComplex.isZero_single_obj_X (up ‚Ñ§) _ _ _ hk }

end

end CochainComplex

namespace HomologicalComplex‚ÇÇ

section

variable (C : Type*) [Category C] [HasZeroMorphisms C] [HasZeroObject C]
  {Œπ‚ÇÅ Œπ‚ÇÇ : Type*} [DecidableEq Œπ‚ÇÅ] (c‚ÇÅ : ComplexShape Œπ‚ÇÅ) (c‚ÇÇ : ComplexShape Œπ‚ÇÇ)

noncomputable abbrev singleColumn (i‚ÇÅ : Œπ‚ÇÅ) :
    HomologicalComplex C c‚ÇÇ ‚•§ HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ :=
  HomologicalComplex.single (HomologicalComplex C c‚ÇÇ) c‚ÇÅ i‚ÇÅ

variable {C c‚ÇÇ}

lemma isZero_singleColumn_X (K : HomologicalComplex C c‚ÇÇ)
    (i‚ÇÅ i‚ÇÅ' : Œπ‚ÇÅ) (h : i‚ÇÅ' ‚â† i‚ÇÅ) :
    IsZero (((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).X i‚ÇÅ') :=
  HomologicalComplex.isZero_single_obj_X _ _ _ _ h

lemma isZero_singleColumn_X_X (K : HomologicalComplex C c‚ÇÇ)
    (i‚ÇÅ i‚ÇÅ' : Œπ‚ÇÅ) (h : i‚ÇÅ' ‚â† i‚ÇÅ) (i‚ÇÇ : Œπ‚ÇÇ) :
    IsZero ((((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).X i‚ÇÅ').X i‚ÇÇ) :=
  (HomologicalComplex.eval C c‚ÇÇ i‚ÇÇ).map_isZero (isZero_singleColumn_X c‚ÇÅ K i‚ÇÅ i‚ÇÅ' h)

noncomputable def singleColumnXIso (K : HomologicalComplex C c‚ÇÇ) (i‚ÇÅ : Œπ‚ÇÅ) :
    ((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).X i‚ÇÅ ‚âÖ K := by
  apply HomologicalComplex.singleObjXSelf

noncomputable def singleColumnXXIso (K : HomologicalComplex C c‚ÇÇ) (i‚ÇÅ : Œπ‚ÇÅ) (i‚ÇÇ : Œπ‚ÇÇ) :
    (((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).X i‚ÇÅ).X i‚ÇÇ ‚âÖ K.X i‚ÇÇ :=
  (HomologicalComplex.eval C c‚ÇÇ i‚ÇÇ).mapIso (singleColumnXIso c‚ÇÅ K i‚ÇÅ)

@[reassoc]
lemma singleColumn_obj_X_d (K : HomologicalComplex C c‚ÇÇ) (i‚ÇÅ : Œπ‚ÇÅ) (i‚ÇÇ i‚ÇÇ' : Œπ‚ÇÇ) :
    (((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).X i‚ÇÅ).d i‚ÇÇ i‚ÇÇ' =
      (singleColumnXXIso c‚ÇÅ K i‚ÇÅ i‚ÇÇ).hom ‚â´ K.d i‚ÇÇ i‚ÇÇ' ‚â´
        (singleColumnXXIso c‚ÇÅ K i‚ÇÅ i‚ÇÇ').inv := by
  dsimp only [singleColumn, singleColumnXXIso]
  simp only [Functor.mapIso_hom, HomologicalComplex.eval_map,
    Functor.mapIso_inv, HomologicalComplex.Hom.comm_assoc]
  rw [‚Üê HomologicalComplex.comp_f, Iso.hom_inv_id, HomologicalComplex.id_f,
    comp_id]

end

section

variable (C : Type*) [Category C] [Preadditive C] [HasZeroObject C]
  {Œπ‚ÇÅ Œπ‚ÇÇ Œπ : Type*} [DecidableEq Œπ‚ÇÅ] [DecidableEq Œπ] (c‚ÇÅ : ComplexShape Œπ‚ÇÅ) (c‚ÇÇ : ComplexShape Œπ‚ÇÇ)
  (K : HomologicalComplex C c‚ÇÇ) (i‚ÇÅ : Œπ‚ÇÅ) (c : ComplexShape Œπ)
  [TotalComplexShape c‚ÇÅ c‚ÇÇ c]
  [((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).HasTotal c]

@[simp]
lemma singleColumn_d‚ÇÅ (x : Œπ‚ÇÅ) (y : Œπ‚ÇÇ) (n : Œπ) :
    ((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).d‚ÇÅ c x y n = 0 := by
  by_cases hx : c‚ÇÅ.Rel x (c‚ÇÅ.next x)
  ¬∑ by_cases hx' : œÄ c‚ÇÅ c‚ÇÇ c (next c‚ÇÅ x, y) = n
    ¬∑ rw [d‚ÇÅ_eq _ _ hx _ _ hx']
      simp [singleColumn]
    ¬∑ rw [d‚ÇÅ_eq_zero' _ _ hx _ _ hx']
  ¬∑ rw [d‚ÇÅ_eq_zero _ _ _ _ _ hx]

lemma singleColumn_d‚ÇÇ (y y' : Œπ‚ÇÇ) (hy : c‚ÇÇ.Rel y y') (n : Œπ)
    (hn : œÄ c‚ÇÅ c‚ÇÇ c (i‚ÇÅ, y') = n) :
    ((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).d‚ÇÇ c i‚ÇÅ y n =
      Œµ‚ÇÇ c‚ÇÅ c‚ÇÇ c (i‚ÇÅ, y) ‚Ä¢ (singleColumnXXIso c‚ÇÅ K i‚ÇÅ y).hom ‚â´ K.d y y' ‚â´
        (singleColumnXXIso c‚ÇÅ K i‚ÇÅ y').inv ‚â´
        ((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).ŒπTotal c i‚ÇÅ y' n hn := by
  simp [d‚ÇÇ_eq _ _ _ hy _ hn, singleColumn_obj_X_d]

end

end HomologicalComplex‚ÇÇ

namespace HomologicalComplex‚ÇÇ

variable (C : Type*) [Category C] [Abelian C]
  {D : Type*} [Category D] [Preadditive D] [HasFiniteCoproducts D]
  {Œπ : Type*} (c : ComplexShape Œπ)

noncomputable abbrev rowFiltrationGEFunctor :
    ‚Ñ§·µí·µñ ‚•§ HomologicalComplex‚ÇÇ C (up ‚Ñ§) c ‚•§ HomologicalComplex‚ÇÇ C (up ‚Ñ§) c :=
  CochainComplex.stupidFiltrationGEFunctor _

instance (n : ‚Ñ§·µí·µñ) {Œπ' : Type*} {c' : ComplexShape Œπ'}
    (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) c) [TotalComplexShape (up ‚Ñ§) c c'] [K.HasTotal c']:
    (((rowFiltrationGEFunctor C _).obj n).obj K).HasTotal c' := by
  dsimp [rowFiltrationGEFunctor]
  infer_instance

variable {C c}

noncomputable abbrev rowFiltrationGE (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) c) :
    ‚Ñ§·µí·µñ ‚•§ HomologicalComplex‚ÇÇ C (up ‚Ñ§) c :=
  rowFiltrationGEFunctor C c ‚ãô ((evaluation _ _).obj K)

instance (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) c) (n : ‚Ñ§):
    CochainComplex.IsStrictlyGE ((rowFiltrationGE K).obj ‚ü®n‚ü©) n := by
  dsimp
  infer_instance

instance (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) c) (n x : ‚Ñ§) [CochainComplex.IsStrictlyLE K x] :
    CochainComplex.IsStrictlyLE ((rowFiltrationGE K).obj ‚ü®n‚ü©) x := by
  dsimp
  infer_instance

noncomputable abbrev rowFiltrationGEMap {K L : HomologicalComplex‚ÇÇ C (up ‚Ñ§) c} (œÜ : K ‚ü∂ L) :
    K.rowFiltrationGE ‚ü∂ L.rowFiltrationGE :=
  whiskerLeft _ ((evaluation _ _).map œÜ)

variable (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) (up ‚Ñ§))
variable [K.HasTotal (up ‚Ñ§)]

instance (n : ‚Ñ§·µí·µñ) : (K.rowFiltrationGE.obj n).HasTotal (up ‚Ñ§) := by
  dsimp [rowFiltrationGE]
  infer_instance

instance (L : CochainComplex C ‚Ñ§) (i‚ÇÇ : ‚Ñ§) :
    ((singleColumn C (up ‚Ñ§) (up ‚Ñ§) i‚ÇÇ).obj L).HasTotal (up ‚Ñ§) :=
  fun n => hasCoproduct_of_isZero_but_one _ ‚ü®‚ü®i‚ÇÇ, n - i‚ÇÇ‚ü©, by simp‚ü© (by
    rintro ‚ü®‚ü®x, y‚ü©, hxy‚ü© h
    apply isZero_singleColumn_X_X
    simp at hxy h
    omega)

@[simp]
noncomputable def cofanSingleColumnObjTotal (L : CochainComplex C ‚Ñ§) (x y n : ‚Ñ§) (h : x + y = n):
  GradedObject.CofanMapObjFun (((singleColumn C (up ‚Ñ§) (up ‚Ñ§) x).obj L).toGradedObject)
    (œÄ (up ‚Ñ§) (up ‚Ñ§) (up ‚Ñ§)) n :=
  cofanOfIsZeroButOne  _ ‚ü®‚ü®x, y‚ü©, h‚ü© (by
    rintro ‚ü®‚ü®x', y'‚ü©, hxy‚ü© h'
    apply isZero_singleColumn_X_X
    simp at hxy h'
    omega)

noncomputable def isColimitCofanSingleColumnObjTotal
    (L : CochainComplex C ‚Ñ§) (x y n : ‚Ñ§) (h : x + y = n) :
    IsColimit (cofanSingleColumnObjTotal L x y n h) := by
  apply isColimitCofanOfIsZeroButOne

noncomputable def singleColumnObjTotalXIso
    (L : CochainComplex C ‚Ñ§) (x y n : ‚Ñ§) (h : x + y = n) :
    (((singleColumn C (up ‚Ñ§) (up ‚Ñ§) x).obj L).total (up ‚Ñ§)).X n ‚âÖ L.X y :=
  ((cofanSingleColumnObjTotal L x y n h).iso
    (isColimitCofanSingleColumnObjTotal L x y n h)).symm ‚â™‚â´ (singleColumnXXIso (up ‚Ñ§) L x y)

lemma singleColumnObjTotalXIso_inv
    (L : CochainComplex C ‚Ñ§) (x y n : ‚Ñ§) (h : x + y = n) :
    (singleColumnObjTotalXIso L x y n h).inv =
      (singleColumnXXIso (up ‚Ñ§) L x y).inv ‚â´
        ((singleColumn C (up ‚Ñ§) (up ‚Ñ§) x).obj L).ŒπTotal (up ‚Ñ§) x y n h := by
  rfl

@[reassoc]
lemma singleColumn_ŒπTotal
    (L : CochainComplex C ‚Ñ§) (x y n : ‚Ñ§) (h : x + y = n) :
    ((singleColumn C (up ‚Ñ§) (up ‚Ñ§) x).obj L).ŒπTotal (up ‚Ñ§) x y n h =
      (singleColumnXXIso (up ‚Ñ§) L x y).hom ‚â´(singleColumnObjTotalXIso L x y n h).inv := by
  rw [singleColumnObjTotalXIso_inv, Iso.hom_inv_id_assoc]

noncomputable def singleColumnObjTotal (L : CochainComplex C ‚Ñ§) (x x' : ‚Ñ§) (h : x + x' = 0) :
    ((singleColumn C (up ‚Ñ§) (up ‚Ñ§) x).obj L).total (up ‚Ñ§) ‚âÖ L‚ü¶x'‚üß :=
  Iso.symm (HomologicalComplex.Hom.isoOfComponents
    (fun n => (singleColumnObjTotalXIso L _ _ _ (by dsimp; omega)).symm) (by
      intro y y' h
      dsimp at h ‚ä¢
      simp [singleColumnObjTotalXIso_inv, total_d]
      rw [singleColumn_d‚ÇÇ _ _ _ _ _ _ _ (y' + x')
        (by dsimp; omega) _ (by dsimp; omega)]
      obtain rfl : x' = -x := by omega
      simp))

@[reassoc (attr := simp)]
noncomputable def singleColumnObjTotal_inv_naturality {K L : CochainComplex C ‚Ñ§} (œÜ : K ‚ü∂ L)
    (x x' : ‚Ñ§) (h : x + x' = 0) :
    (singleColumnObjTotal K x x' h).inv ‚â´
      total.map ((HomologicalComplex.single _ (up ‚Ñ§) x).map œÜ) (up ‚Ñ§) =
      œÜ‚ü¶x'‚üß' ‚â´ (singleColumnObjTotal L x x' h).inv := by
  ext n
  dsimp [singleColumnObjTotal]
  rw [singleColumnObjTotalXIso_inv, singleColumnObjTotalXIso_inv, Category.assoc, ŒπTotal_map,
    HomologicalComplex.single_map_f_self]
  simp [singleColumnXXIso, singleColumnXIso, HomologicalComplex.singleObjXSelf,
    HomologicalComplex.singleObjXIsoOfEq]

@[reassoc (attr := simp)]
noncomputable def singleColumnObjTotal_hom_naturality {K L : CochainComplex C ‚Ñ§} (œÜ : K ‚ü∂ L)
    (x x' : ‚Ñ§) (h : x + x' = 0) :
    total.map ((HomologicalComplex.single _ (up ‚Ñ§) x).map œÜ) (up ‚Ñ§) ‚â´
      (singleColumnObjTotal L x x' h).hom =
      (singleColumnObjTotal K x x' h).hom ‚â´ œÜ‚ü¶x'‚üß' := by
  rw [‚Üê cancel_epi (singleColumnObjTotal K x x' h).inv,
    singleColumnObjTotal_inv_naturality_assoc, Iso.inv_hom_id, comp_id, Iso.inv_hom_id_assoc]

section

variable (K : HomologicalComplex‚ÇÇ D (up ‚Ñ§) (up ‚Ñ§)) (x‚ÇÄ y‚ÇÄ : ‚Ñ§)
    [CochainComplex.IsStrictlyLE K x‚ÇÄ] [‚àÄ x, CochainComplex.IsStrictlyLE (K.X x) y‚ÇÄ] (n : ‚Ñ§)

def coreHasTotalOfIsStrictlyLE :
    K.CoreHasTotal (up ‚Ñ§) n where
  J := Fin (Int.toNat (x‚ÇÄ + y‚ÇÄ - n + 1))
  œÜ‚ÇÅ := fun ‚ü®k, _‚ü© => x‚ÇÄ - k
  œÜ‚ÇÇ := fun ‚ü®k, _‚ü© => n - x‚ÇÄ + k
  œÄ_œÜ _ := by simp
  hœÜ j‚ÇÅ j‚ÇÇ h := by aesop
  isZero i‚ÇÅ i‚ÇÇ h h' := by
    dsimp at h
    have h‚ÇÅ : i‚ÇÅ ‚â§ x‚ÇÄ := by
      by_contra!
      exact h' ((HomologicalComplex.eval _ _ i‚ÇÇ).map_isZero
        (CochainComplex.isZero_of_isStrictlyLE K _ _ this))
    have h‚ÇÇ : i‚ÇÇ ‚â§ y‚ÇÄ := by
      by_contra!
      exact h' (CochainComplex.isZero_of_isStrictlyLE (K.X i‚ÇÅ) _ _ this)
    obtain ‚ü®k, hk‚ü© := Int.le.dest h‚ÇÅ
    refine ‚ü®‚ü®k, ?_‚ü©, by dsimp; omega, by dsimp; omega‚ü©
    rw [Int.lt_toNat]
    omega

instance : Fintype (K.coreHasTotalOfIsStrictlyLE x‚ÇÄ y‚ÇÄ n).J := by
  dsimp [coreHasTotalOfIsStrictlyLE]
  infer_instance

lemma hasTotal_of_isStrictlyLE (K : HomologicalComplex‚ÇÇ D (up ‚Ñ§) (up ‚Ñ§)) (x‚ÇÄ y‚ÇÄ : ‚Ñ§)
    [CochainComplex.IsStrictlyLE K x‚ÇÄ] [‚àÄ x, CochainComplex.IsStrictlyLE (K.X x) y‚ÇÄ] :
    K.HasTotal (up ‚Ñ§) := fun n => (K.coreHasTotalOfIsStrictlyLE x‚ÇÄ y‚ÇÄ n).hasCoproduct

noncomputable def preservesTotal_of_isStrictlyLE
    (K : HomologicalComplex‚ÇÇ D (up ‚Ñ§) (up ‚Ñ§)) (x‚ÇÄ y‚ÇÄ : ‚Ñ§)
    [CochainComplex.IsStrictlyLE K x‚ÇÄ] [‚àÄ x, CochainComplex.IsStrictlyLE (K.X x) y‚ÇÄ]
    {E : Type*} [Category E] [Preadditive E] (F : D ‚•§ E) [F.Additive] :
    F.PreservesTotalComplex K (up ‚Ñ§) := fun n =>
  (K.coreHasTotalOfIsStrictlyLE x‚ÇÄ y‚ÇÄ n).preserves F

end

lemma hasTotal_of_isStrictlyGE_of_isStrictlyLE (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) (up ‚Ñ§))
    (x‚ÇÄ x‚ÇÅ : ‚Ñ§)
    [CochainComplex.IsStrictlyGE K x‚ÇÄ] [CochainComplex.IsStrictlyLE K x‚ÇÅ] :
    K.HasTotal (up ‚Ñ§) := fun n => by
  obtain ‚ü®M, hM‚ü© : ‚àÉ (M : ‚Ñï), x‚ÇÄ + M > x‚ÇÅ := by
    by_cases h : x‚ÇÅ < x‚ÇÄ
    ¬∑ exact ‚ü®0, by omega‚ü©
    ¬∑ simp only [not_lt] at h
      obtain ‚ü®k, rfl‚ü© := Int.le.dest h
      exact ‚ü®k + 1, by omega‚ü©
  apply hasCoproduct_of_isZero (J := Fin M) (Œπ := fun ‚ü®k, _‚ü© => ‚ü®‚ü®x‚ÇÄ + k, n - x‚ÇÄ - k‚ü©, by simp‚ü©)
  ¬∑ rintro ‚ü®k, hk‚ü© ‚ü®k', hk'‚ü©
    simp
  ¬∑ rintro ‚ü®‚ü®x, y‚ü©, hxy : x + y = n‚ü© h
    by_cases hx : x‚ÇÄ ‚â§ x
    ¬∑ obtain ‚ü®k, hk‚ü© := Int.le.dest hx
      refine (HomologicalComplex.eval _ _ y).map_isZero
        (CochainComplex.isZero_of_isStrictlyLE K x‚ÇÅ x ?_)
      by_contra!
      exact h ‚ü®‚ü®k, by omega‚ü©, by simp only [Subtype.mk.injEq, Prod.mk.injEq]; omega‚ü©
    ¬∑ exact (HomologicalComplex.eval _ _ y).map_isZero
        (CochainComplex.isZero_of_isStrictlyGE K x‚ÇÄ x (by simpa using hx))

lemma total.quasiIso_map_of_finitely_many_columns {K L : HomologicalComplex‚ÇÇ C (up ‚Ñ§) (up ‚Ñ§)}
    (œÜ : K ‚ü∂ L) [K.HasTotal (up ‚Ñ§)] [L.HasTotal (up ‚Ñ§)] (x‚ÇÄ x‚ÇÅ : ‚Ñ§)
    [CochainComplex.IsStrictlyGE K x‚ÇÄ] [CochainComplex.IsStrictlyLE K x‚ÇÅ]
    [CochainComplex.IsStrictlyGE L x‚ÇÄ] [CochainComplex.IsStrictlyLE L x‚ÇÅ]
    (hœÜ : ‚àÄ (i : ‚Ñ§), x‚ÇÄ ‚â§ i ‚Üí i ‚â§ x‚ÇÅ ‚Üí QuasiIso (œÜ.f i)) :
    QuasiIso (total.map œÜ (up ‚Ñ§)) := by
  suffices hœÜ' : ‚àÄ (k : ‚Ñï) (x : ‚Ñ§) (_ : x‚ÇÅ + 1 - k = x),
      QuasiIso (total.map ((rowFiltrationGEMap œÜ).app ‚ü®x‚ü©) (up ‚Ñ§)) by
    obtain ‚ü®k, x, hx, hx'‚ü© : ‚àÉ (k : ‚Ñï) (x : ‚Ñ§) (_ : x‚ÇÅ + 1 - k = x), x ‚â§ x‚ÇÄ := by
      by_cases h : x‚ÇÄ ‚â§ x‚ÇÅ
      ¬∑ obtain ‚ü®k, hk‚ü© := Int.le.dest h
        exact ‚ü®k + 1, _, rfl, by omega‚ü©
      ¬∑ exact ‚ü®0, _, rfl, by omega‚ü©
    have := CochainComplex.isStrictlyGE_of_ge K _ _ hx'
    have := CochainComplex.isStrictlyGE_of_ge L _ _ hx'
    refine (quasiIso_iff_of_arrow_mk_iso _ _ ?_).1 (hœÜ' k x hx)
    refine Arrow.isoMk
      (total.mapIso (asIso (HomologicalComplex.ŒπStupidTrunc K (embeddingUpIntGE x))) _)
      (total.mapIso (asIso (HomologicalComplex.ŒπStupidTrunc L (embeddingUpIntGE x))) _) ?_
    dsimp
    simp only [‚Üê map_comp, HomologicalComplex.ŒπStupidTrunc_naturality]
  intro k
  induction k with
  | zero =>
      intro x hx
      obtain rfl : x‚ÇÅ + 1 = x := by simpa using hx
      dsimp
      rw [quasiIso_iff_acyclic]
      all_goals
        apply HomologicalComplex.acyclic_of_isZero
        apply total.isZero
        apply (Embedding.embeddingUpInt_areComplementary x‚ÇÅ (x‚ÇÅ + 1) rfl).symm.isZero_stupidTrunc
  | succ k hk =>
      intro x hx
      replace hx : x‚ÇÅ = x + k := by omega
      replace hk := hk (x + 1) (by omega)
      let S‚ÇÅ := CochainComplex.shortComplexStupidFiltrationGE K x _ rfl
      let S‚ÇÇ := CochainComplex.shortComplexStupidFiltrationGE L x _ rfl
      have : HasTotal S‚ÇÅ.X‚ÇÅ (up ‚Ñ§) := by dsimp [S‚ÇÅ]; infer_instance
      have : HasTotal S‚ÇÅ.X‚ÇÇ (up ‚Ñ§) := by dsimp [S‚ÇÅ]; infer_instance
      have : HasTotal S‚ÇÅ.X‚ÇÉ (up ‚Ñ§) := by dsimp [S‚ÇÅ]; infer_instance
      have : HasTotal S‚ÇÇ.X‚ÇÅ (up ‚Ñ§) := by dsimp [S‚ÇÇ]; infer_instance
      have : HasTotal S‚ÇÇ.X‚ÇÇ (up ‚Ñ§) := by dsimp [S‚ÇÇ]; infer_instance
      have : HasTotal S‚ÇÇ.X‚ÇÉ (up ‚Ñ§) := by dsimp [S‚ÇÇ]; infer_instance
      let œà : S‚ÇÅ ‚ü∂ S‚ÇÇ := CochainComplex.mapShortComplexStupidFiltrationGE œÜ x _ rfl
      apply HomologicalComplex.HomologySequence.quasiIso_œÑ‚ÇÇ (total.mapShortComplex œà (up ‚Ñ§))
      ¬∑ apply HomologicalComplex.shortExact_of_degreewise_shortExact
        intro i
        apply ShortComplex.Splitting.shortExact
        apply total.shortComplexSplitting
        refine (GradedObject.shortComplexSplittingEquiv _).symm ?_
        rintro ‚ü®a, b‚ü©
        exact (CochainComplex.shortComplexStupidFiltrationGESplitting K x _ rfl a).map
          (HomologicalComplex.eval _ _ b)
      ¬∑ apply HomologicalComplex.shortExact_of_degreewise_shortExact
        intro i
        apply ShortComplex.Splitting.shortExact
        apply total.shortComplexSplitting
        refine (GradedObject.shortComplexSplittingEquiv _).symm ?_
        rintro ‚ü®a, b‚ü©
        exact (CochainComplex.shortComplexStupidFiltrationGESplitting L x _ rfl a).map
          (HomologicalComplex.eval _ _ b)
      ¬∑ exact hk
      ¬∑ have : QuasiIso (œÜ.f x) := by
          by_cases hx : x‚ÇÄ ‚â§ x
          ¬∑ exact hœÜ x hx (by omega)
          ¬∑ simp only [not_le] at hx
            rw [quasiIso_iff_acyclic]
            all_goals
              apply HomologicalComplex.acyclic_of_isZero
              exact CochainComplex.isZero_of_isStrictlyGE _ x‚ÇÄ _ hx
        dsimp [œà]
        refine (quasiIso_iff_of_arrow_mk_iso _ _ ?_).2 (inferInstance : QuasiIso ((œÜ.f x)‚ü¶-x‚üß'))
        exact Arrow.isoMk (singleColumnObjTotal _ _ _ (by simp))
          (singleColumnObjTotal _ _ _ (by simp))

lemma total.isIso_ŒπStupidTrunc_map_f
    (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) (up ‚Ñ§)) [K.HasTotal (up ‚Ñ§)] (y‚ÇÄ x n : ‚Ñ§) (hn : x + y‚ÇÄ ‚â§ n)
    [‚àÄ x, CochainComplex.IsStrictlyLE (K.X x) y‚ÇÄ] :
    IsIso ((total.map (HomologicalComplex.ŒπStupidTrunc K (embeddingUpIntGE x)) (up ‚Ñ§)).f n) := by
  apply GradedObject.isIso_mapMap_apply
  rintro ‚ü®p, q‚ü© (hpq : p + q = n)
  dsimp
  by_cases hp : x ‚â§ p
  ¬∑ obtain ‚ü®j, hj‚ü© : ‚àÉ j, (embeddingUpIntGE x).f j = p := by
      obtain ‚ü®k, rfl‚ü© := Int.le.dest hp
      exact ‚ü®k, rfl‚ü©
    have := HomologicalComplex.isIso_ŒπStupidTrunc_f K (embeddingUpIntGE x) hj
    change IsIso ((HomologicalComplex.eval _ _ q).map _)
    infer_instance
  ¬∑ simp only [not_le] at hp
    refine ‚ü®0, ?_, ?_‚ü©
    ¬∑ apply IsZero.eq_of_src
      apply (HomologicalComplex.eval _ _ q).map_isZero
      apply HomologicalComplex.isZero_stupidTrunc_X
      intro i hi
      dsimp at hi
      omega
    ¬∑ apply IsZero.eq_of_src
      dsimp
      apply CochainComplex.isZero_of_isStrictlyLE _ y‚ÇÄ
      omega

lemma total.quasiIsoAt_ŒπStupidTrunc_map
    (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) (up ‚Ñ§)) [K.HasTotal (up ‚Ñ§)] (y‚ÇÄ x n : ‚Ñ§) (hn : x + y‚ÇÄ < n)
    [‚àÄ x, CochainComplex.IsStrictlyLE (K.X x) y‚ÇÄ] :
    QuasiIsoAt (total.map (HomologicalComplex.ŒπStupidTrunc K (embeddingUpIntGE x)) (up ‚Ñ§)) n := by
  rw [quasiIsoAt_iff' _ (n - 1) n (n + 1) (by simp) (by simp)]
  have : IsIso ((HomologicalComplex.shortComplexFunctor' C (up ‚Ñ§) (n - 1) n (n + 1)).map
      (map (HomologicalComplex.ŒπStupidTrunc K (embeddingUpIntGE x)) (up ‚Ñ§))) := by
    rw [ShortComplex.isIso_iff]
    refine ‚ü®?_, ?_, ?_‚ü©
    all_goals exact total.isIso_ŒπStupidTrunc_map_f K y‚ÇÄ x _ (by omega)
  apply ShortComplex.quasiIso_of_isIso

lemma total.quasiIso_map_of_isStrictlyGE_of_isStrictlyLE
    {K L : HomologicalComplex‚ÇÇ C (up ‚Ñ§) (up ‚Ñ§)}
    (œÜ : K ‚ü∂ L) [K.HasTotal (up ‚Ñ§)] [L.HasTotal (up ‚Ñ§)] (x‚ÇÄ y‚ÇÄ : ‚Ñ§)
    [CochainComplex.IsStrictlyLE K x‚ÇÄ] [CochainComplex.IsStrictlyLE L x‚ÇÄ]
    [‚àÄ x, CochainComplex.IsStrictlyLE (K.X x) y‚ÇÄ]
    [‚àÄ x, CochainComplex.IsStrictlyLE (L.X x) y‚ÇÄ]
    (hœÜ : ‚àÄ (i : ‚Ñ§), QuasiIso (œÜ.f i)) :
    QuasiIso (total.map œÜ (up ‚Ñ§)) := by
  have hœÜ' : ‚àÄ x, QuasiIso (total.map ((rowFiltrationGEMap œÜ).app ‚ü®x‚ü©) (up ‚Ñ§)) := fun x =>
    total.quasiIso_map_of_finitely_many_columns ((rowFiltrationGEMap œÜ).app ‚ü®x‚ü©) x x‚ÇÄ (by
      intro i hi‚ÇÅ hi‚ÇÇ
      obtain ‚ü®j, hj‚ü© : ‚àÉ j, (embeddingUpIntGE x).f j = i := by
        obtain ‚ü®k, rfl‚ü© := Int.le.dest hi‚ÇÅ
        exact ‚ü®k, rfl‚ü©
      have := fun (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) (up ‚Ñ§)) =>
        HomologicalComplex.isIso_ŒπStupidTrunc_f K (embeddingUpIntGE x) hj
      apply (quasiIso_iff_of_arrow_mk_iso _ _ _).2 (hœÜ i)
      exact Arrow.isoMk (asIso ((HomologicalComplex.ŒπStupidTrunc K (embeddingUpIntGE x)).f i))
        (asIso ((HomologicalComplex.ŒπStupidTrunc L (embeddingUpIntGE x)).f i)))
  rw [quasiIso_iff]
  intro n
  let x := n - y‚ÇÄ - 1
  have := total.quasiIsoAt_ŒπStupidTrunc_map K y‚ÇÄ x n (by omega)
  have := total.quasiIsoAt_ŒπStupidTrunc_map L y‚ÇÄ x n (by omega)
  rw [‚Üê quasiIsoAt_iff_comp_left
    (total.map (HomologicalComplex.ŒπStupidTrunc K (embeddingUpIntGE x)) (up ‚Ñ§)),
    ‚Üê map_comp, ‚Üê HomologicalComplex.ŒπStupidTrunc_naturality, map_comp,
    quasiIsoAt_iff_comp_right]
  dsimp at hœÜ'
  infer_instance

end HomologicalComplex‚ÇÇ
