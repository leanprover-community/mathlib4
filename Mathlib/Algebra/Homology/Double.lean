/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.HasNoLoop
import Mathlib.Algebra.Homology.Single
import Mathlib.CategoryTheory.Yoneda

/-!
# A homological complex lying in two degrees

Given `c : ComplexShape Œπ`, distinct indices `i‚ÇÄ` and `i‚ÇÅ` such that `hi‚ÇÄ‚ÇÅ : c.Rel i‚ÇÄ i‚ÇÅ`,
we construct a homological complex `double f hi‚ÇÄ‚ÇÅ` for any morphism `f : X‚ÇÄ ‚ü∂ X‚ÇÅ`.
It consists of the objects `X‚ÇÄ` and `X‚ÇÅ` in degrees `i‚ÇÄ` and `i‚ÇÅ`, respectively,
with the differential `X‚ÇÄ ‚ü∂ X‚ÇÅ` given by `f`, and zero everywhere else.

-/

open CategoryTheory Category Limits ZeroObject Opposite

namespace HomologicalComplex

variable {C : Type*} [Category C] [HasZeroMorphisms C] [HasZeroObject C]

section

variable {X‚ÇÄ X‚ÇÅ : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) {Œπ : Type*} {c : ComplexShape Œπ}
  {i‚ÇÄ i‚ÇÅ : Œπ} (hi‚ÇÄ‚ÇÅ : c.Rel i‚ÇÄ i‚ÇÅ)

open Classical in
/-- Given a complex shape `c`, two indices `i‚ÇÄ` and `i‚ÇÅ` such that `c.Rel i‚ÇÄ i‚ÇÅ`,
and `f : X‚ÇÄ ‚ü∂ X‚ÇÅ`, this is the homological complex which, if `i‚ÇÄ ‚â† i‚ÇÅ`, only
consists of the map `f` in degrees `i‚ÇÄ` and `i‚ÇÅ`, and zero everywhere else. -/
noncomputable def double : HomologicalComplex C c where
  X k := if k = i‚ÇÄ then X‚ÇÄ else if k = i‚ÇÅ then X‚ÇÅ else 0
  d k k' :=
    if hk : k = i‚ÇÄ ‚àß k' = i‚ÇÅ ‚àß i‚ÇÄ ‚â† i‚ÇÅ then
      eqToHom (if_pos hk.1) ‚â´ f ‚â´ eqToHom (by
        rw [if_neg, if_pos hk.2.1]
        aesop)
    else 0
  d_comp_d' := by
    rintro i j k hij hjk
    dsimp
    by_cases hi : i = i‚ÇÄ
    ¬∑ subst hi
      by_cases hj : j = i‚ÇÅ
      ¬∑ subst hj
        nth_rw 2 [dif_neg (by tauto)]
        rw [comp_zero]
      ¬∑ rw [dif_neg (by tauto), zero_comp]
    ¬∑ rw [dif_neg (by tauto), zero_comp]
  shape i j hij := dif_neg (by aesop)

lemma isZero_double_X (k : Œπ) (h‚ÇÄ : k ‚â† i‚ÇÄ) (h‚ÇÅ : k ‚â† i‚ÇÅ) :
    IsZero ((double f hi‚ÇÄ‚ÇÅ).X k) := by
  dsimp [double]
  rw [if_neg h‚ÇÄ, if_neg h‚ÇÅ]
  exact Limits.isZero_zero C

/-- The isomorphism `(double f hi‚ÇÄ‚ÇÅ).X i‚ÇÄ ‚âÖ X‚ÇÄ`. -/
noncomputable def doubleXIso‚ÇÄ : (double f hi‚ÇÄ‚ÇÅ).X i‚ÇÄ ‚âÖ X‚ÇÄ :=
  eqToIso (dif_pos rfl)

/-- The isomorphism `(double f hi‚ÇÄ‚ÇÅ).X i‚ÇÅ ‚âÖ X‚ÇÅ`. -/
noncomputable def doubleXIso‚ÇÅ (h : i‚ÇÄ ‚â† i‚ÇÅ) : (double f hi‚ÇÄ‚ÇÅ).X i‚ÇÅ ‚âÖ X‚ÇÅ :=
  eqToIso (by
    dsimp [double]
    rw [if_neg h.symm, if_pos rfl])

lemma double_d (h : i‚ÇÄ ‚â† i‚ÇÅ) :
    (double f hi‚ÇÄ‚ÇÅ).d i‚ÇÄ i‚ÇÅ =
      (doubleXIso‚ÇÄ f hi‚ÇÄ‚ÇÅ).hom ‚â´ f ‚â´ (doubleXIso‚ÇÅ f hi‚ÇÄ‚ÇÅ h).inv :=
  dif_pos ‚ü®rfl, rfl, h‚ü©

lemma double_d_eq_zero‚ÇÄ (a b : Œπ) (ha : a ‚â† i‚ÇÄ) :
    (double f hi‚ÇÄ‚ÇÅ).d a b = 0 :=
  dif_neg (by tauto)

lemma double_d_eq_zero‚ÇÅ (a b : Œπ) (hb : b ‚â† i‚ÇÅ) :
    (double f hi‚ÇÄ‚ÇÅ).d a b = 0 :=
  dif_neg (by tauto)

variable {f hi‚ÇÄ‚ÇÅ} in
@[ext]
lemma from_double_hom_ext {K : HomologicalComplex C c} {œÜ œÜ' : double f hi‚ÇÄ‚ÇÅ ‚ü∂ K}
    (h‚ÇÄ : œÜ.f i‚ÇÄ = œÜ'.f i‚ÇÄ) (h‚ÇÅ : œÜ.f i‚ÇÅ = œÜ'.f i‚ÇÅ) : œÜ = œÜ' := by
  ext k
  by_cases h : k = i‚ÇÄ ‚à® k = i‚ÇÅ
  ¬∑ obtain rfl | rfl := h <;> assumption
  ¬∑ simp only [not_or] at h
    apply (isZero_double_X f hi‚ÇÄ‚ÇÅ k h.1 h.2).eq_of_src

variable {f hi‚ÇÄ‚ÇÅ} in
@[ext]
lemma to_double_hom_ext {K : HomologicalComplex C c} {œÜ œÜ' : K ‚ü∂ double f hi‚ÇÄ‚ÇÅ}
    (h‚ÇÄ : œÜ.f i‚ÇÄ = œÜ'.f i‚ÇÄ) (h‚ÇÅ : œÜ.f i‚ÇÅ = œÜ'.f i‚ÇÅ) : œÜ = œÜ' := by
  ext k
  by_cases h : k = i‚ÇÄ ‚à® k = i‚ÇÅ
  ¬∑ obtain rfl | rfl := h <;> assumption
  ¬∑ simp only [not_or] at h
    apply (isZero_double_X f hi‚ÇÄ‚ÇÅ k h.1 h.2).eq_of_tgt

section

variable {f} (h : i‚ÇÄ ‚â† i‚ÇÅ) {K : HomologicalComplex C c} (œÜ‚ÇÄ : X‚ÇÄ ‚ü∂ K.X i‚ÇÄ) (œÜ‚ÇÅ : X‚ÇÅ ‚ü∂ K.X i‚ÇÅ)
  (comm : œÜ‚ÇÄ ‚â´ K.d i‚ÇÄ i‚ÇÅ = f ‚â´ œÜ‚ÇÅ)
  (hœÜ : ‚àÄ (k : Œπ), c.Rel i‚ÇÅ k ‚Üí œÜ‚ÇÅ ‚â´ K.d i‚ÇÅ k = 0)

open Classical in
/-- Constructor for morphisms from a homological complex `double f hi‚ÇÄ‚ÇÅ`. -/
noncomputable def mkHomFromDouble : double f hi‚ÇÄ‚ÇÅ ‚ü∂ K where
  f k :=
    if hk‚ÇÄ : k = i‚ÇÄ then
      eqToHom (by rw [hk‚ÇÄ]) ‚â´ (doubleXIso‚ÇÄ f hi‚ÇÄ‚ÇÅ).hom ‚â´ œÜ‚ÇÄ ‚â´ eqToHom (by rw [hk‚ÇÄ])
    else if hk‚ÇÅ : k = i‚ÇÅ then
      eqToHom (by rw [hk‚ÇÅ]) ‚â´ (doubleXIso‚ÇÅ f hi‚ÇÄ‚ÇÅ h).hom ‚â´ œÜ‚ÇÅ ‚â´ eqToHom (by rw [hk‚ÇÅ])
    else 0
  comm' k‚ÇÄ k‚ÇÅ hk := by
    dsimp
    by_cases h‚ÇÄ : k‚ÇÄ = i‚ÇÄ
    ¬∑ subst h‚ÇÄ
      rw [dif_pos rfl]
      obtain rfl := c.next_eq hk hi‚ÇÄ‚ÇÅ
      simp [dif_neg h.symm, dif_pos rfl, double_d f hi‚ÇÄ‚ÇÅ h, comm]
    ¬∑ rw [dif_neg h‚ÇÄ]
      by_cases h‚ÇÅ : k‚ÇÄ = i‚ÇÅ
      ¬∑ subst h‚ÇÅ
        dsimp
        rw [if_pos rfl, comp_id, id_comp, assoc, hœÜ k‚ÇÅ hk, comp_zero,
          double_d_eq_zero‚ÇÄ _ _ _ _ h.symm, zero_comp]
      ¬∑ apply (isZero_double_X f hi‚ÇÄ‚ÇÅ k‚ÇÄ h‚ÇÄ h‚ÇÅ).eq_of_src

@[simp, reassoc]
lemma mkHomFromDouble_f‚ÇÄ :
    (mkHomFromDouble hi‚ÇÄ‚ÇÅ h œÜ‚ÇÄ œÜ‚ÇÅ comm hœÜ).f i‚ÇÄ =
      (doubleXIso‚ÇÄ f hi‚ÇÄ‚ÇÅ).hom ‚â´ œÜ‚ÇÄ := by
  dsimp [mkHomFromDouble]
  rw [if_pos rfl, id_comp, comp_id]

@[simp, reassoc]
lemma mkHomFromDouble_f‚ÇÅ :
    (mkHomFromDouble hi‚ÇÄ‚ÇÅ h œÜ‚ÇÄ œÜ‚ÇÅ comm hœÜ).f i‚ÇÅ =
      (doubleXIso‚ÇÅ f hi‚ÇÄ‚ÇÅ h).hom ‚â´ œÜ‚ÇÅ := by
  dsimp [mkHomFromDouble]
  rw [dif_neg h.symm, if_pos rfl, id_comp, comp_id]

end

/-- Let `c : ComplexShape Œπ`, and `i‚ÇÄ` and `i‚ÇÅ` be distinct indices such
that `hi‚ÇÄ‚ÇÅ : c.Rel i‚ÇÄ i‚ÇÅ`, then for any `X : C`, the functor which sends
`K : HomologicalComplex C c` to `X ‚ü∂ K.X i` is corepresentable by `double (ùüô X) hi‚ÇÄ‚ÇÅ`. -/
@[simps -isSimp]
noncomputable def evalCompCoyonedaCorepresentableByDoubleId (h : i‚ÇÄ ‚â† i‚ÇÅ) (X : C) :
    (eval C c i‚ÇÄ ‚ãô coyoneda.obj (op X)).CorepresentableBy (double (ùüô X) hi‚ÇÄ‚ÇÅ) where
  homEquiv {K} :=
    { toFun g := (doubleXIso‚ÇÄ _ hi‚ÇÄ‚ÇÅ).inv ‚â´ g.f i‚ÇÄ
      invFun œÜ‚ÇÄ := mkHomFromDouble _ h œÜ‚ÇÄ (œÜ‚ÇÄ ‚â´ K.d i‚ÇÄ i‚ÇÅ) (by simp) (by simp)
      left_inv g := by
        ext
        ¬∑ simp
        ¬∑ simp [double_d _ _ h]
      right_inv _ := by simp }
  homEquiv_comp _ _ := by simp

end

variable {Œπ : Type*} (c : ComplexShape Œπ)

/-- If `i` has no successor for the complex shape `c`,
then for any `X : C`, the functor which sends `K : HomologicalComplex C c`
to `X ‚ü∂ K.X i` is corepresentable by `(single C c i).obj X`. -/
@[simps -isSimp]
noncomputable def evalCompCoyonedaCorepresentableBySingle (i : Œπ) [DecidableEq Œπ]
    (hi : ‚àÄ (j : Œπ), ¬¨ c.Rel i j) (X : C) :
    (eval C c i ‚ãô coyoneda.obj (op X)).CorepresentableBy ((single C c i).obj X) where
  homEquiv {K} :=
    { toFun g := (singleObjXSelf c i X).inv ‚â´ g.f i
      invFun f := mkHomFromSingle f (fun j hj ‚Ü¶ (hi j hj).elim)
      left_inv g := by aesop_cat
      right_inv f := by simp }
  homEquiv_comp := by simp

variable [c.HasNoLoop] [DecidableEq Œπ]

open Classical in
/-- Given a complex shape `c : ComplexShape Œπ` (with no loop), `X : C` and `j : Œπ`,
this is a quite explicit choice of corepresentative of the functor which sends
`K : HomologicalComplex C c` to `X ‚ü∂ K.X j`. -/
noncomputable def evalCompCoyonedaCorepresentative (X : C) (j : Œπ) :
    HomologicalComplex C c :=
  if hj : ‚àÉ (k : Œπ), c.Rel j k then
    double (ùüô X) hj.choose_spec
  else (single C c j).obj X

/-- If a complex shape `c : ComplexShape Œπ` has no loop,
then for any `X : C` and `j : Œπ`, the functor which sends `K : HomologicalComplex C c`
to `X ‚ü∂ K.X j` is corepresentable. -/
noncomputable def evalCompCoyonedaCorepresentable (X : C) (j : Œπ) :
    (eval C c j ‚ãô coyoneda.obj (op X)).CorepresentableBy
      (evalCompCoyonedaCorepresentative c X j) := by
  dsimp [evalCompCoyonedaCorepresentative]
  by_cases h : ‚àÉ (k : Œπ), c.Rel j k
  ¬∑ rw [dif_pos h]
    exact evalCompCoyonedaCorepresentableByDoubleId _
      (fun hj ‚Ü¶ c.not_rel_of_eq hj h.choose_spec) _
  ¬∑ rw [dif_neg h]
    apply evalCompCoyonedaCorepresentableBySingle
    obtain _ | _ := c.exists_distinct_prev_or j <;> tauto

instance (X : C) (j : Œπ) : (eval C c j ‚ãô coyoneda.obj (op X)).IsCorepresentable where
  has_corepresentation := ‚ü®_, ‚ü®evalCompCoyonedaCorepresentable c X j‚ü©‚ü©

end HomologicalComplex
