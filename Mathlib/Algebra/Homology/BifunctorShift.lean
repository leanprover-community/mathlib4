/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.Bifunctor
import Mathlib.Algebra.Homology.TotalComplexShift

/-!
# Behavior of the action of a bifunctor on cochain complexes with respect to shifts

In this file, given cochain complexes `K‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§`, `K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§` and
a functor `F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ D`, we define an isomorphism of cochain complexes in `D`:
- `CochainComplex.mapBifunctorShift‚ÇÅIso K‚ÇÅ K‚ÇÇ F x` of type
`mapBifunctor (K‚ÇÅ‚ü¶x‚üß) K‚ÇÇ F ‚âÖ (mapBifunctor K‚ÇÅ K‚ÇÇ F)‚ü¶x‚üß` for `x : ‚Ñ§`.
- `CochainComplex.mapBifunctorShift‚ÇÇIso K‚ÇÅ K‚ÇÇ F y` of type
`mapBifunctor K‚ÇÅ (K‚ÇÇ‚ü¶y‚üß) F ‚âÖ (mapBifunctor K‚ÇÅ K‚ÇÇ F)‚ü¶y‚üß` for `y : ‚Ñ§`.

In the lemma `CochainComplex.mapBifunctorShift‚ÇÅIso_trans_mapBifunctorShift‚ÇÇIso`, we obtain
that the two ways to deduce an isomorphism
`mapBifunctor (K‚ÇÅ‚ü¶x‚üß) (K‚ÇÇ‚ü¶y‚üß) F ‚âÖ (mapBifunctor K‚ÇÅ K‚ÇÇ F)‚ü¶x + y‚üß` differ by the sign
`(x * y).negOnePow`.

-/

assert_not_exists TwoSidedIdeal

open CategoryTheory Category Limits

variable {C‚ÇÅ C‚ÇÇ D : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category D]

namespace CochainComplex

section

variable [HasZeroMorphisms C‚ÇÅ] [HasZeroMorphisms C‚ÇÇ]
  (K‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§) (K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§) [Preadditive D]
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ D) [F.PreservesZeroMorphisms]
  [‚àÄ (X‚ÇÅ : C‚ÇÅ), (F.obj X‚ÇÅ).PreservesZeroMorphisms]

/-- The condition that `((F.mapBifunctorHomologicalComplex _ _).obj K‚ÇÅ).obj K‚ÇÇ` has
a total cochain complex. -/
abbrev HasMapBifunctor := HomologicalComplex.HasMapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)

/-- Given `K‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§`, `K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§`,
a bifunctor `F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ D`, this `mapBifunctor K‚ÇÅ K‚ÇÇ F : CochainComplex D ‚Ñ§`
is the total complex of the bicomplex obtained by applying `F` to `K‚ÇÅ` and `K‚ÇÇ`. -/
noncomputable abbrev mapBifunctor [HasMapBifunctor K‚ÇÅ K‚ÇÇ F] : CochainComplex D ‚Ñ§ :=
  HomologicalComplex.mapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)

/-- The inclusion of a summand `(F.obj (K‚ÇÅ.X n‚ÇÅ)).obj (K‚ÇÇ.X n‚ÇÇ) ‚ü∂ (mapBifunctor K‚ÇÅ K‚ÇÇ F).X n`
of the total cochain complex when `n‚ÇÅ + n‚ÇÇ = n`. -/
noncomputable abbrev ŒπMapBifunctor [HasMapBifunctor K‚ÇÅ K‚ÇÇ F] (n‚ÇÅ n‚ÇÇ n : ‚Ñ§) (h : n‚ÇÅ + n‚ÇÇ = n) :
    (F.obj (K‚ÇÅ.X n‚ÇÅ)).obj (K‚ÇÇ.X n‚ÇÇ) ‚ü∂ (mapBifunctor K‚ÇÅ K‚ÇÇ F).X n :=
  HomologicalComplex.ŒπMapBifunctor K‚ÇÅ K‚ÇÇ F _ _ _ _ h

end

section

variable [Preadditive C‚ÇÅ] [HasZeroMorphisms C‚ÇÇ] [Preadditive D]
  (K‚ÇÅ K‚ÇÅ' : CochainComplex C‚ÇÅ ‚Ñ§) (œÜ : K‚ÇÅ ‚ü∂ K‚ÇÅ') (K‚ÇÇ K‚ÇÇ' : CochainComplex C‚ÇÇ ‚Ñ§) (œà : K‚ÇÇ ‚ü∂ K‚ÇÇ')
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ D) [F.Additive] [‚àÄ (X‚ÇÅ : C‚ÇÅ), (F.obj X‚ÇÅ).PreservesZeroMorphisms] (x : ‚Ñ§)
  [HasMapBifunctor K‚ÇÅ K‚ÇÇ F] [HasMapBifunctor K‚ÇÅ K‚ÇÇ' F] [HasMapBifunctor K‚ÇÅ' K‚ÇÇ F]

/-- Auxiliary definition for `mapBifunctorShift‚ÇÅIso`. -/
@[simps! hom_f_f inv_f_f]
def mapBifunctorHomologicalComplexShift‚ÇÅIso :
    ((F.mapBifunctorHomologicalComplex _ _).obj (K‚ÇÅ‚ü¶x‚üß)).obj K‚ÇÇ ‚âÖ
    (HomologicalComplex‚ÇÇ.shiftFunctor‚ÇÅ D x).obj
      (((F.mapBifunctorHomologicalComplex _ _).obj K‚ÇÅ).obj K‚ÇÇ) :=
  HomologicalComplex.Hom.isoOfComponents (fun _ => Iso.refl _) (by
    intros
    ext
    dsimp
    simp only [Linear.comp_units_smul, id_comp, Functor.map_units_smul,
      NatTrans.app_units_zsmul, comp_id])

instance : HasMapBifunctor (K‚ÇÅ‚ü¶x‚üß) K‚ÇÇ F :=
  HomologicalComplex‚ÇÇ.hasTotal_of_iso (mapBifunctorHomologicalComplexShift‚ÇÅIso K‚ÇÅ K‚ÇÇ F x).symm _

/-- The canonical isomorphism `mapBifunctor (K‚ÇÅ‚ü¶x‚üß) K‚ÇÇ F ‚âÖ (mapBifunctor K‚ÇÅ K‚ÇÇ F)‚ü¶x‚üß`.
This isomorphism does not involve signs. -/
noncomputable def mapBifunctorShift‚ÇÅIso :
    mapBifunctor (K‚ÇÅ‚ü¶x‚üß) K‚ÇÇ F ‚âÖ (mapBifunctor K‚ÇÅ K‚ÇÇ F)‚ü¶x‚üß :=
  HomologicalComplex‚ÇÇ.total.mapIso (mapBifunctorHomologicalComplexShift‚ÇÅIso K‚ÇÅ K‚ÇÇ F x) _ ‚â™‚â´
    (((F.mapBifunctorHomologicalComplex _ _).obj K‚ÇÅ).obj K‚ÇÇ).totalShift‚ÇÅIso x

open HomologicalComplex

variable {K‚ÇÇ K‚ÇÇ'} in
@[reassoc (attr := simp)]
lemma mapBifunctorShift‚ÇÅIso_hom_naturality‚ÇÇ :
    mapBifunctorMap (ùüô (K‚ÇÅ‚ü¶x‚üß)) œà F _ ‚â´ (mapBifunctorShift‚ÇÅIso K‚ÇÅ K‚ÇÇ' F x).hom =
    (mapBifunctorShift‚ÇÅIso K‚ÇÅ K‚ÇÇ F x).hom ‚â´ (mapBifunctorMap (ùüô K‚ÇÅ) œà F _)‚ü¶x‚üß' := by
  ext n p q h
  simp [mapBifunctorShift‚ÇÅIso, HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÅIso_hom_f _ _ _ _ _ _ _ rfl _ rfl,
   HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÅIso_hom_f_assoc _ _ _ _ _ _ _ rfl _ rfl]

variable {K‚ÇÅ K‚ÇÅ'} in
@[reassoc (attr := simp)]
lemma mapBifunctorShift‚ÇÅIso_hom_naturality‚ÇÅ :
    mapBifunctorMap (œÜ‚ü¶x‚üß') (ùüô K‚ÇÇ) F _ ‚â´ (mapBifunctorShift‚ÇÅIso K‚ÇÅ' K‚ÇÇ F x).hom =
    (mapBifunctorShift‚ÇÅIso K‚ÇÅ K‚ÇÇ F x).hom ‚â´ (mapBifunctorMap œÜ (ùüô K‚ÇÇ) F _)‚ü¶x‚üß' := by
  ext n p q h
  simp [mapBifunctorShift‚ÇÅIso,
    HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÅIso_hom_f _ _ _ _ _ _ _ rfl _ rfl,
    HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÅIso_hom_f_assoc _ _ _ _ _ _ _ rfl _ rfl]

@[reassoc]
lemma mapBifunctorShift‚ÇÅIso_hom_zero [HasMapBifunctor ((ùü≠ _).obj K‚ÇÅ) K‚ÇÇ F] :
    (mapBifunctorShift‚ÇÅIso K‚ÇÅ K‚ÇÇ F 0).hom =
    mapBifunctorMap ((shiftFunctorZero _ ‚Ñ§).hom.app K‚ÇÅ) (ùüô K‚ÇÇ) F _ ‚â´
        (shiftFunctorZero _ ‚Ñ§).inv.app (mapBifunctor K‚ÇÅ K‚ÇÇ F) := by
  ext n p q h
  simp [mapBifunctorShift‚ÇÅIso,
    HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÅIso_hom_f _ _ _ _ _ _ _
      (add_zero p).symm _ (add_zero n).symm, shiftFunctorZero_hom_app_f,
    shiftFunctorZero_inv_app_f, -eqToHom_naturality,
    HomologicalComplex‚ÇÇ.shiftFunctor‚ÇÅXXIso, eqToHom_map, XIsoOfEq]

@[reassoc]
lemma mapBifunctorShift‚ÇÅIso_hom_add (x x' : ‚Ñ§)
    [HasMapBifunctor ((CategoryTheory.shiftFunctor (CochainComplex C‚ÇÅ ‚Ñ§) x ‚ãô
      CategoryTheory.shiftFunctor _ x').obj K‚ÇÅ) K‚ÇÇ F] :
    (mapBifunctorShift‚ÇÅIso K‚ÇÅ K‚ÇÇ F (x + x')).hom =
      mapBifunctorMap ((shiftFunctorAdd _ x x').hom.app K‚ÇÅ) (ùüô K‚ÇÇ) F _ ‚â´
    (mapBifunctorShift‚ÇÅIso (K‚ÇÅ‚ü¶x‚üß) K‚ÇÇ F x').hom ‚â´
      ((mapBifunctorShift‚ÇÅIso K‚ÇÅ K‚ÇÇ F x).hom)‚ü¶x'‚üß' ‚â´
        (shiftFunctorAdd _ x x').inv.app (mapBifunctor K‚ÇÅ K‚ÇÇ F) := by
  ext n p q h
  dsimp at h
  simp [mapBifunctorShift‚ÇÅIso,
    HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÅIso_hom_f _ (x + x') p q n h (p + x' + x) (by omega)
      (n + x' + x) (by omega),
    HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÅIso_hom_f_assoc _ x' p q n h _ rfl _ rfl,
    HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÅIso_hom_f_assoc _ x (p + x') q (n + x')
      (by omega) _ rfl _ rfl,
    HomologicalComplex‚ÇÇ.shiftFunctor‚ÇÅXXIso, XIsoOfEq,
    shiftFunctorAdd_hom_app_f, shiftFunctorAdd_inv_app_f, eqToHom_map]

end

section

variable [HasZeroMorphisms C‚ÇÅ] [Preadditive C‚ÇÇ] [Preadditive D]
  (K‚ÇÅ K‚ÇÅ' : CochainComplex C‚ÇÅ ‚Ñ§) (œÜ : K‚ÇÅ ‚ü∂ K‚ÇÅ') (K‚ÇÇ K‚ÇÇ' : CochainComplex C‚ÇÇ ‚Ñ§) (œà : K‚ÇÇ ‚ü∂ K‚ÇÇ')
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ D) [F.PreservesZeroMorphisms] [‚àÄ (X‚ÇÅ : C‚ÇÅ), (F.obj X‚ÇÅ).Additive] (y : ‚Ñ§)
  [HasMapBifunctor K‚ÇÅ K‚ÇÇ F] [HasMapBifunctor K‚ÇÅ' K‚ÇÇ F] [HasMapBifunctor K‚ÇÅ K‚ÇÇ' F]

/-- Auxiliary definition for `mapBifunctorShift‚ÇÇIso`. -/
@[simps! hom_f_f inv_f_f]
def mapBifunctorHomologicalComplexShift‚ÇÇIso :
    ((F.mapBifunctorHomologicalComplex _ _).obj K‚ÇÅ).obj (K‚ÇÇ‚ü¶y‚üß) ‚âÖ
    (HomologicalComplex‚ÇÇ.shiftFunctor‚ÇÇ D y).obj
      (((F.mapBifunctorHomologicalComplex _ _).obj K‚ÇÅ).obj K‚ÇÇ) :=
  HomologicalComplex.Hom.isoOfComponents
    (fun i‚ÇÅ => HomologicalComplex.Hom.isoOfComponents (fun _ => Iso.refl _)) (by
      intros
      ext
      dsimp
      simp only [id_comp, comp_id])

instance : HasMapBifunctor K‚ÇÅ (K‚ÇÇ‚ü¶y‚üß) F :=
  HomologicalComplex‚ÇÇ.hasTotal_of_iso (mapBifunctorHomologicalComplexShift‚ÇÇIso K‚ÇÅ K‚ÇÇ F y).symm _

/-- The canonical isomorphism `mapBifunctor K‚ÇÅ (K‚ÇÇ‚ü¶y‚üß) F ‚âÖ (mapBifunctor K‚ÇÅ K‚ÇÇ F)‚ü¶y‚üß`.
This isomorphism involves signs: on the summand `(F.obj (K‚ÇÅ.X p)).obj (K‚ÇÇ.X q)`, it is given
by the multiplication by `(p * y).negOnePow`. -/
noncomputable def mapBifunctorShift‚ÇÇIso :
    mapBifunctor K‚ÇÅ (K‚ÇÇ‚ü¶y‚üß) F ‚âÖ (mapBifunctor K‚ÇÅ K‚ÇÇ F)‚ü¶y‚üß :=
  HomologicalComplex‚ÇÇ.total.mapIso
    (mapBifunctorHomologicalComplexShift‚ÇÇIso K‚ÇÅ K‚ÇÇ F y) (ComplexShape.up ‚Ñ§) ‚â™‚â´
    (((F.mapBifunctorHomologicalComplex _ _).obj K‚ÇÅ).obj K‚ÇÇ).totalShift‚ÇÇIso y

open HomologicalComplex

variable {K‚ÇÅ K‚ÇÅ'} in
@[reassoc (attr := simp)]
lemma mapBifunctorShift‚ÇÇIso_hom_naturality‚ÇÅ :
    mapBifunctorMap œÜ (ùüô (K‚ÇÇ‚ü¶y‚üß)) F _ ‚â´ (mapBifunctorShift‚ÇÇIso K‚ÇÅ' K‚ÇÇ F y).hom =
      (mapBifunctorShift‚ÇÇIso K‚ÇÅ K‚ÇÇ F y).hom ‚â´ (mapBifunctorMap œÜ (ùüô (K‚ÇÇ)) F _)‚ü¶y‚üß' := by
  ext n p q h
  simp [mapBifunctorShift‚ÇÇIso, HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÇIso_hom_f _ _ _ _ _ _ _ rfl _ rfl,
    HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÇIso_hom_f_assoc _ _ _ _ _ _ _ rfl _ rfl]

variable {K‚ÇÇ K‚ÇÇ'} in
@[reassoc (attr := simp)]
lemma mapBifunctorShift‚ÇÇIso_hom_naturality‚ÇÇ :
    mapBifunctorMap (ùüô K‚ÇÅ) (œà‚ü¶y‚üß') F (.up ‚Ñ§) ‚â´ (K‚ÇÅ.mapBifunctorShift‚ÇÇIso K‚ÇÇ' F y).hom =
      (K‚ÇÅ.mapBifunctorShift‚ÇÇIso K‚ÇÇ F y).hom ‚â´ (mapBifunctorMap (ùüô K‚ÇÅ) œà F (.up ‚Ñ§))‚ü¶y‚üß' := by
  ext n p q h
  simp [mapBifunctorShift‚ÇÇIso, HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÇIso_hom_f _ _ _ _ _ _ _ rfl _ rfl,
    HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÇIso_hom_f_assoc _ _ _ _ _ _ _ rfl _ rfl]

@[reassoc]
lemma mapBifunctorShift‚ÇÇIso_hom_zero [HasMapBifunctor K‚ÇÅ ((ùü≠ _).obj K‚ÇÇ) F] :
    (mapBifunctorShift‚ÇÇIso K‚ÇÅ K‚ÇÇ F 0).hom =
    HomologicalComplex.mapBifunctorMap (ùüô K‚ÇÅ)
      ((shiftFunctorZero _ ‚Ñ§).hom.app K‚ÇÇ : _ ‚ü∂ K‚ÇÇ) F (.up ‚Ñ§) ‚â´
        (shiftFunctorZero _ ‚Ñ§).inv.app (mapBifunctor K‚ÇÅ K‚ÇÇ F) := by
  ext n p q h
  simp [mapBifunctorShift‚ÇÇIso, HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÇIso_hom_f _ _ _ _ _ _ _
    (add_zero q).symm _ (add_zero n).symm, HomologicalComplex‚ÇÇ.shiftFunctor‚ÇÇXXIso,
    shiftFunctorZero_inv_app_f, shiftFunctorZero_hom_app_f, XIsoOfEq, eqToHom_map,
    -eqToHom_naturality]

@[reassoc]
lemma mapBifunctorShift‚ÇÇIso_hom_add (y y' : ‚Ñ§)
  [HasMapBifunctor K‚ÇÅ
    ((CategoryTheory.shiftFunctor _ y ‚ãô CategoryTheory.shiftFunctor _ y').obj K‚ÇÇ) F] :
    (mapBifunctorShift‚ÇÇIso K‚ÇÅ K‚ÇÇ F (y + y')).hom =
      HomologicalComplex.mapBifunctorMap (ùüô K‚ÇÅ)
        ((shiftFunctorAdd (CochainComplex C‚ÇÇ ‚Ñ§) y y').hom.app K‚ÇÇ) F _ ‚â´
        (K‚ÇÅ.mapBifunctorShift‚ÇÇIso (K‚ÇÇ‚ü¶y‚üß) F y').hom ‚â´
          ((K‚ÇÅ.mapBifunctorShift‚ÇÇIso K‚ÇÇ F y).hom)‚ü¶y'‚üß' ‚â´
        (shiftFunctorAdd _ y y').inv.app
          (HomologicalComplex.mapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)) := by
  ext n p q h
  dsimp at h
  simp [mapBifunctorShift‚ÇÇIso,
    HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÇIso_hom_f _ (y + y') p q n h
      (q + y + y') (by omega) (n + y + y') (by omega),
    HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÇIso_hom_f_assoc _ y' p q n h (q + y') (by omega)
      (n + y') (by omega),
    HomologicalComplex‚ÇÇ.Œπ_totalShift‚ÇÇIso_hom_f_assoc _ y p (q + y') (n + y') (by omega)
      (q + y + y') (by omega) (n + y + y') (by omega),
    shiftFunctorAdd_hom_app_f, shiftFunctorAdd_inv_app_f, smul_smul,
    HomologicalComplex‚ÇÇ.shiftFunctor‚ÇÇXXIso, XIsoOfEq, eqToHom_map,
    mul_add, Int.negOnePow_add, mul_comm (p * y).negOnePow]

end

section

variable [Preadditive C‚ÇÅ] [Preadditive C‚ÇÇ] [Preadditive D]
  (K‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§) (K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§)
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ D) [F.Additive] [‚àÄ (X‚ÇÅ : C‚ÇÅ), (F.obj X‚ÇÅ).Additive] (x y : ‚Ñ§)
  [HasMapBifunctor K‚ÇÅ K‚ÇÇ F]

lemma mapBifunctorShift‚ÇÅIso_trans_mapBifunctorShift‚ÇÇIso :
    mapBifunctorShift‚ÇÅIso K‚ÇÅ (K‚ÇÇ‚ü¶y‚üß) F x ‚â™‚â´
      (CategoryTheory.shiftFunctor _ x).mapIso (mapBifunctorShift‚ÇÇIso K‚ÇÅ K‚ÇÇ F y) =
      (x * y).negOnePow ‚Ä¢ (mapBifunctorShift‚ÇÇIso (K‚ÇÅ‚ü¶x‚üß) K‚ÇÇ F y ‚â™‚â´
        (CategoryTheory.shiftFunctor _ y).mapIso (mapBifunctorShift‚ÇÅIso K‚ÇÅ K‚ÇÇ F x) ‚â™‚â´
          (shiftFunctorComm (CochainComplex D ‚Ñ§) x y).app _) := by
  ext1
  dsimp [mapBifunctorShift‚ÇÅIso, mapBifunctorShift‚ÇÇIso]
  rw [Functor.map_comp, Functor.map_comp, assoc, assoc, assoc,
    ‚Üê HomologicalComplex‚ÇÇ.totalShift‚ÇÅIso_hom_naturality_assoc,
    HomologicalComplex‚ÇÇ.totalShift‚ÇÅIso_hom_totalShift‚ÇÇIso_hom,
    ‚Üê HomologicalComplex‚ÇÇ.totalShift‚ÇÇIso_hom_naturality_assoc,
    Linear.comp_units_smul, Linear.comp_units_smul,
    smul_left_cancel_iff,
    ‚Üê HomologicalComplex‚ÇÇ.total.map_comp_assoc,
    ‚Üê HomologicalComplex‚ÇÇ.total.map_comp_assoc,
    ‚Üê HomologicalComplex‚ÇÇ.total.map_comp_assoc]
  congr 2
  ext a b
  dsimp [HomologicalComplex‚ÇÇ.shiftFunctor‚ÇÅ‚ÇÇCommIso]
  simp only [id_comp]

end

section

noncomputable def bifunctorMapHomologicalComplexObjShiftIso
    [Preadditive C‚ÇÅ] [HasZeroMorphisms C‚ÇÇ] [Preadditive D]
    (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ D)
    [F.Additive] [‚àÄ (X‚ÇÅ : C‚ÇÅ), (F.obj X‚ÇÅ).PreservesZeroMorphisms]
      [‚àÄ (K‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§) (K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§), HasMapBifunctor K‚ÇÅ K‚ÇÇ F]
    (K‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§) (n : ‚Ñ§) :
    (F.bifunctorMapHomologicalComplex (.up ‚Ñ§) (.up ‚Ñ§) (.up ‚Ñ§)).obj (K‚ÇÅ‚ü¶n‚üß) ‚âÖ
      (F.bifunctorMapHomologicalComplex (.up ‚Ñ§) (.up ‚Ñ§) (.up ‚Ñ§)).obj K‚ÇÅ ‚ãô
        shiftFunctor _ n :=
  NatIso.ofComponents (fun K‚ÇÇ ‚Ü¶ mapBifunctorShift‚ÇÅIso K‚ÇÅ K‚ÇÇ F n)

noncomputable def bifunctorMapHomologicalComplexFlipObjShiftIso
    [HasZeroMorphisms C‚ÇÅ] [Preadditive C‚ÇÇ] [Preadditive D]
    (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ D)
    [F.PreservesZeroMorphisms] [‚àÄ (X‚ÇÅ : C‚ÇÅ), (F.obj X‚ÇÅ).Additive]
      [‚àÄ (K‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§) (K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§), HasMapBifunctor K‚ÇÅ K‚ÇÇ F]
    (K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§) (n : ‚Ñ§) :
    (F.bifunctorMapHomologicalComplex (.up ‚Ñ§) (.up ‚Ñ§) (.up ‚Ñ§)).flip.obj (K‚ÇÇ‚ü¶n‚üß) ‚âÖ
      (F.bifunctorMapHomologicalComplex (.up ‚Ñ§) (.up ‚Ñ§) (.up ‚Ñ§)).flip.obj K‚ÇÇ ‚ãô
        shiftFunctor _ n :=
  NatIso.ofComponents (fun K‚ÇÅ ‚Ü¶ mapBifunctorShift‚ÇÇIso K‚ÇÅ K‚ÇÇ F n)

end

end CochainComplex
