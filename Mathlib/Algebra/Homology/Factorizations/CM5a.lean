/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.Factorizations.CM5b
import Mathlib.Algebra.Homology.HomologySequence
import Mathlib.Algebra.Homology.DerivedCategory.TStructure
import Mathlib.Algebra.Homology.Single
import Mathlib.Algebra.Homology.HomologicalComplexLimitsEventuallyConstant
import Mathlib.CategoryTheory.Functor.OfSequence

/-!
# Factorization lemma

-/

open CategoryTheory Category Limits Preadditive ZeroObject

namespace CategoryTheory

variable {C : Type*} [Category C]

namespace Injective

lemma direct_factor {X I : C} {i : X ‚ü∂ I} {p : I ‚ü∂ X} (fac : i ‚â´ p = ùüô X) [Injective I] :
    Injective X where
  factors g f _ := ‚ü®Injective.factorThru (g ‚â´ i) f ‚â´ p,
    by rw [comp_factorThru_assoc, assoc, fac, comp_id]‚ü©

end Injective

namespace NatTrans

variable {C : Type*} [Category C]

section

variable {F G : ‚Ñï ‚•§ C} (app : ‚àÄ (n : ‚Ñï), F.obj n ‚ü∂ G.obj n)

def functorNat (H : ‚àÄ (n : ‚Ñï), F.map (homOfLE (by linarith)) ‚â´ app (n + 1) =
      app n ‚â´ G.map (homOfLE (by linarith))) : F ‚ü∂ G where
  app := app
  naturality := by
    suffices ‚àÄ (k : ‚Ñï) (i j : ‚Ñï) (h : i + k = j), F.map (homOfLE (by linarith)) ‚â´ app j =
        app i ‚â´ G.map (homOfLE (by linarith)) by
      intro i j œÜ
      obtain ‚ü®k, rfl‚ü© := Nat.exists_eq_add_of_le (leOfHom œÜ)
      exact this k i _ rfl
    intro k
    induction' k with k hk
    ¬∑ intro i j h
      obtain rfl : j = i := by linarith
      erw [F.map_id, G.map_id, id_comp, comp_id]
    ¬∑ intro i j h
      obtain rfl : j = i + k + 1 := by linarith
      simp only [‚Üê homOfLE_comp (show i ‚â§ i + k by linarith) (show i + k ‚â§ i + k + 1 by linarith),
        Functor.map_comp, assoc, H (i + k), reassoc_of% (hk i _ rfl)]

@[simp]
lemma functorNat_app (H : ‚àÄ (n : ‚Ñï), F.map (homOfLE (by linarith)) ‚â´ app (n + 1) =
      app n ‚â´ G.map (homOfLE (by linarith))) (n : ‚Ñï) :
  (functorNat app H).app n = app n := rfl

end

variable {F G : ‚Ñï·µí·µñ ‚•§ C} (app : ‚àÄ (n : ‚Ñï), F.obj (Opposite.op n) ‚ü∂ G.obj (Opposite.op n))

def functorNatOp
    (H : ‚àÄ (n : ‚Ñï), F.map (homOfLE (by linarith)).op ‚â´ app n =
      app (n + 1) ‚â´ G.map (homOfLE (by linarith)).op) : F ‚ü∂ G :=
  NatTrans.leftOp (@functorNat _ _ G.rightOp F.rightOp (fun n => (app n).op) (fun n => by
    dsimp
    simp only [‚Üê CategoryTheory.op_comp, H]))

@[simp]
lemma functorNatOp_app (H : ‚àÄ (n : ‚Ñï), F.map (homOfLE (by linarith)).op ‚â´ app n =
      app (n + 1) ‚â´ G.map (homOfLE (by linarith)).op) (n : ‚Ñï) :
    (functorNatOp app H).app (Opposite.op n) = app n := rfl

end NatTrans

end CategoryTheory

namespace HomologicalComplex

variable {C Œπ : Type*} {c : ComplexShape Œπ} [Category C] [Abelian C]

noncomputable instance : IsNormalEpiCategory (HomologicalComplex C c) := ‚ü®fun p _ =>
  ‚ü®NormalEpi.mk _ (kernel.Œπ p) (kernel.condition _)
    (isColimitOfEval _ _ (fun _ =>
      isColimit_mapCocone_of_cokernelCofork_ofœÄ_kernel_condition_of_epi _ _))‚ü©‚ü©

noncomputable instance : IsNormalMonoCategory (HomologicalComplex C c) := ‚ü®fun p _ =>
  ‚ü®NormalMono.mk _ (cokernel.œÄ p) (cokernel.condition _)
    (isLimitOfEval _ _ (fun _ =>
      isLimit_mapCone_of_kernelFork_ofŒπ_cokernel_condition_of_mono _ _))‚ü©‚ü©

noncomputable instance : Abelian (HomologicalComplex C c) where

end HomologicalComplex

namespace CochainComplex

variable {C : Type*} [Category C] [Abelian C] (T : Pretriangulated.Triangle (CochainComplex C ‚Ñ§))
  [HasDerivedCategory C]
  (hT : DerivedCategory.Q.mapTriangle.obj T ‚àà distTriang _)

open HomologicalComplex

lemma homologyMap_eq_zero_of_Q_map_eq_zero {K L : CochainComplex C ‚Ñ§} (f : K ‚ü∂ L)
    (hf : DerivedCategory.Q.map f = 0) (n : ‚Ñ§) : homologyMap f n = 0 := by
  have eq := NatIso.naturality_2 (DerivedCategory.homologyFunctorFactors C n).symm f
  dsimp at eq
  rw [‚Üê eq, hf]
  simp only [Functor.map_zero, zero_comp, comp_zero]

noncomputable def homologyŒ¥OfDistinguished (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    T.obj‚ÇÉ.homology n‚ÇÄ ‚ü∂ T.obj‚ÇÅ.homology n‚ÇÅ :=
  homologyMap T.mor‚ÇÉ n‚ÇÄ ‚â´
    ((homologyFunctor C (ComplexShape.up ‚Ñ§) 0).shiftIso 1 n‚ÇÄ n‚ÇÅ (by linarith)).hom.app T.obj‚ÇÅ

include hT in
lemma homologyMap_comp‚ÇÅ‚ÇÇ_eq_zero_of_distinguished (n : ‚Ñ§) :
    homologyMap T.mor‚ÇÅ n ‚â´ homologyMap T.mor‚ÇÇ n = 0 := by
  rw [‚Üê homologyMap_comp]
  apply homologyMap_eq_zero_of_Q_map_eq_zero
  rw [Functor.map_comp]
  exact Pretriangulated.comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ hT

lemma homology_exact‚ÇÇ_of_distinguished (n : ‚Ñ§) :
    (ShortComplex.mk (homologyMap T.mor‚ÇÅ n) (homologyMap T.mor‚ÇÇ n)
      (homologyMap_comp‚ÇÅ‚ÇÇ_eq_zero_of_distinguished T hT n)).Exact := by
  let e := DerivedCategory.homologyFunctorFactors C n
  refine ShortComplex.exact_of_iso ?_ (DerivedCategory.HomologySequence.exact‚ÇÇ _ hT n)
  exact ShortComplex.isoMk
    (e.app T.obj‚ÇÅ) (e.app T.obj‚ÇÇ) (e.app T.obj‚ÇÉ)
    (e.hom.naturality T.mor‚ÇÅ).symm (e.hom.naturality T.mor‚ÇÇ).symm

include hT in
lemma comp_homologyŒ¥OfDistinguished (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    homologyMap T.mor‚ÇÇ n‚ÇÄ ‚â´ homologyŒ¥OfDistinguished T n‚ÇÄ n‚ÇÅ h = 0 := by
  have hT' : DerivedCategory.Q.mapTriangle.obj T.rotate ‚àà distTriang _ :=
    Pretriangulated.isomorphic_distinguished _ (Pretriangulated.rot_of_distTriang _ hT) _
      (DerivedCategory.Q.mapTriangleRotateIso.app T).symm
  have eq := homologyMap_comp‚ÇÅ‚ÇÇ_eq_zero_of_distinguished T.rotate hT' n‚ÇÄ
  dsimp at eq
  dsimp [homologyŒ¥OfDistinguished]
  rw [reassoc_of% eq, zero_comp]

lemma homology_exact‚ÇÉ_of_distinguished (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    (ShortComplex.mk (homologyMap T.mor‚ÇÇ n‚ÇÄ) (homologyŒ¥OfDistinguished T n‚ÇÄ n‚ÇÅ h)
      (comp_homologyŒ¥OfDistinguished T hT n‚ÇÄ n‚ÇÅ h)).Exact := by
  have hT' : DerivedCategory.Q.mapTriangle.obj T.rotate ‚àà distTriang _ :=
    Pretriangulated.isomorphic_distinguished _ (Pretriangulated.rot_of_distTriang _ hT) _
      (DerivedCategory.Q.mapTriangleRotateIso.app T).symm
  refine ShortComplex.exact_of_iso ?_ (homology_exact‚ÇÇ_of_distinguished _ hT' n‚ÇÄ)
  refine ShortComplex.isoMk (Iso.refl _) (Iso.refl _)
    (((homologyFunctor C (ComplexShape.up ‚Ñ§) 0).shiftIso 1 n‚ÇÄ n‚ÇÅ (by linarith)).app T.obj‚ÇÅ) ?_ ?_
  ¬∑ dsimp
    simp
  ¬∑ dsimp [homologyŒ¥OfDistinguished]
    simp

omit [HasDerivedCategory C] in
lemma homologyMap_shift {K L : CochainComplex C ‚Ñ§} (f : K ‚ü∂ L) (a n m : ‚Ñ§) (hm : a + n = m) :
    homologyMap (f‚ü¶a‚üß') n =
      ((homologyFunctor C (ComplexShape.up ‚Ñ§) 0).shiftIso a n m hm).hom.app K ‚â´ homologyMap f m ‚â´
      ((homologyFunctor C (ComplexShape.up ‚Ñ§) 0).shiftIso a n m hm).inv.app L := by
  erw [‚Üê NatTrans.naturality_assoc, Iso.hom_inv_id_app, comp_id]
  rfl

include hT in
lemma homologyŒ¥OfDistinguished_comp (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    homologyŒ¥OfDistinguished T n‚ÇÄ n‚ÇÅ h ‚â´ homologyMap T.mor‚ÇÅ n‚ÇÅ = 0 := by
  -- the proof most duplicates the proof of `homology_exact‚ÇÅ_of_distinguished` below
  -- it would be nicer to introduce an isomorphism in `Arrow‚ÇÇ`, and to deduce both
  -- this vanishing and the exactness
  have hT' : DerivedCategory.Q.mapTriangle.obj T.invRotate ‚àà distTriang _ :=
    Pretriangulated.isomorphic_distinguished _ (Pretriangulated.inv_rot_of_distTriang _ hT) _
      (DerivedCategory.Q.mapTriangleInvRotateIso.app T).symm
  have eq := homologyMap_comp‚ÇÅ‚ÇÇ_eq_zero_of_distinguished T.invRotate hT' n‚ÇÅ
  dsimp at eq
  rw [homologyMap_neg, neg_comp, neg_eq_zero, homologyMap_comp, assoc,
    homologyMap_shift T.mor‚ÇÉ (-1) n‚ÇÅ n‚ÇÄ (by linarith), assoc, assoc,
    IsIso.comp_left_eq_zero] at eq
  conv_lhs at eq =>
    congr
    ¬∑ skip
    ¬∑ rw [‚Üê assoc]
  dsimp only [homologyŒ¥OfDistinguished]
  rw [assoc]
  convert eq using 3
  rw [‚Üê cancel_epi (((homologyFunctor C (ComplexShape.up ‚Ñ§) 0).shiftIso (-1) n‚ÇÅ n‚ÇÄ
    (by linarith)).hom.app (T.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)), Iso.hom_inv_id_app_assoc]
  rw [(homologyFunctor C (ComplexShape.up ‚Ñ§) 0).shiftIso_hom_app_comp
      (-1 : ‚Ñ§) 1 0 (add_neg_cancel 1) n‚ÇÅ n‚ÇÄ n‚ÇÅ (by linarith) (by linarith),
      Functor.shiftIso_zero_hom_app, ‚Üê Functor.map_comp]
  dsimp [shiftFunctorCompIsoId]
  rfl

lemma homology_exact‚ÇÅ_of_distinguished (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    (ShortComplex.mk (homologyŒ¥OfDistinguished T n‚ÇÄ n‚ÇÅ h) (homologyMap T.mor‚ÇÅ n‚ÇÅ)
      (homologyŒ¥OfDistinguished_comp T hT n‚ÇÄ n‚ÇÅ h)).Exact := by
  have hT' : DerivedCategory.Q.mapTriangle.obj T.invRotate ‚àà distTriang _ :=
    Pretriangulated.isomorphic_distinguished _ (Pretriangulated.inv_rot_of_distTriang _ hT) _
      (DerivedCategory.Q.mapTriangleInvRotateIso.app T).symm
  refine ShortComplex.exact_of_iso ?_ (homology_exact‚ÇÇ_of_distinguished _ hT' n‚ÇÅ)
  refine ShortComplex.isoMk
    (-((((homologyFunctor C (ComplexShape.up ‚Ñ§) 0).shiftIso (-1) n‚ÇÅ n‚ÇÄ (by linarith)).app T.obj‚ÇÉ)))
    (Iso.refl _) (Iso.refl _) ?_ ?_
  ¬∑ dsimp [homologyŒ¥OfDistinguished]
    simp only [neg_smul, one_smul, neg_comp, homologyMap_neg, comp_id, neg_inj]
    erw [‚Üê NatTrans.naturality_assoc]
    rw [homologyMap_comp]
    congr 1
    rw [(homologyFunctor C (ComplexShape.up ‚Ñ§) 0).shiftIso_hom_app_comp
      (-1 : ‚Ñ§) 1 0 (add_neg_cancel 1) n‚ÇÅ n‚ÇÄ n‚ÇÅ (by linarith) (by linarith),
      Functor.shiftIso_zero_hom_app, ‚Üê Functor.map_comp]
    dsimp [shiftFunctorCompIsoId]
    rfl
  ¬∑ dsimp
    simp

end CochainComplex

namespace CochainComplex

variable {C Œπ : Type*} [Category C] [Preadditive C] [HasZeroObject C] [DecidableEq Œπ]
  {c : ComplexShape Œπ} (n‚ÇÄ n‚ÇÅ : Œπ) (h : c.Rel n‚ÇÄ n‚ÇÅ) (h' : n‚ÇÅ ‚â† n‚ÇÄ) {X‚ÇÄ X‚ÇÅ : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ)

noncomputable def double : HomologicalComplex C c where
  X i :=
    if i = n‚ÇÄ
      then X‚ÇÄ
      else if i = n‚ÇÅ
        then X‚ÇÅ
        else 0
  d i j :=
    if h : i = n‚ÇÄ ‚àß j = n‚ÇÅ
      then by
        refine eqToHom ?_ ‚â´ f ‚â´ eqToHom ?_
        ¬∑ dsimp
          rw [if_pos h.1]
        ¬∑ dsimp
          rw [if_pos h.2, if_neg]
          rw [h.2]
          exact h'
      else 0
  shape i j hij := dif_neg (by
    rintro ‚ü®rfl, rfl‚ü©
    exact hij h)
  d_comp_d' i j k _ _ := by
    by_cases h : i = n‚ÇÄ ‚àß j = n‚ÇÅ
    ¬∑ rw [dif_pos h]
      by_cases h'' : j = n‚ÇÄ ‚àß k = n‚ÇÅ
      ¬∑ exfalso
        apply h'
        rw [‚Üê h.2, h''.1]
      ¬∑ rw [dif_neg h'', comp_zero]
    ¬∑ rw [dif_neg h, zero_comp]

lemma isZero_double_X (n : Œπ) (h‚ÇÄ : n ‚â† n‚ÇÄ) (h‚ÇÅ : n ‚â† n‚ÇÅ) :
    IsZero ((double _ _ h h' f).X n) := by
  dsimp [double]
  rw [if_neg h‚ÇÄ, if_neg h‚ÇÅ]
  exact isZero_zero C

noncomputable def doubleXIso‚ÇÄ : (double _ _ h h' f).X n‚ÇÄ ‚âÖ X‚ÇÄ := eqToIso (by simp [double])
noncomputable def doubleXIso‚ÇÅ : (double _ _ h h' f).X n‚ÇÅ ‚âÖ X‚ÇÅ := eqToIso (by
  dsimp [double]
  rw [if_neg h', if_pos rfl])

@[simp]
lemma double_d :
    (double _ _ h h' f).d n‚ÇÄ n‚ÇÅ =
      (doubleXIso‚ÇÄ _ _ h h' f).hom ‚â´ f ‚â´ (doubleXIso‚ÇÅ _ _ h h' f).inv := by
  simp [double, doubleXIso‚ÇÄ, doubleXIso‚ÇÅ]

lemma double_d_eq_zero‚ÇÄ (i j : Œπ) (h‚ÇÄ : i ‚â† n‚ÇÄ) :
    (double _ _ h h' f).d i j = 0 := by
  dsimp [double]
  rw [dif_neg]
  intro h
  exact h‚ÇÄ h.1

lemma double_d_eq_zero‚ÇÅ (i j : Œπ) (h‚ÇÅ : j ‚â† n‚ÇÅ) :
    (double _ _ h h' f).d i j = 0 := by
  dsimp [double]
  rw [dif_neg]
  intro h
  exact h‚ÇÅ h.2

section

variable
  (K : HomologicalComplex C c) (œÜ‚ÇÄ : K.X n‚ÇÄ ‚ü∂ X‚ÇÄ) (œÜ‚ÇÅ : K.X n‚ÇÅ ‚ü∂ X‚ÇÅ)
  (comm : K.d n‚ÇÄ n‚ÇÅ ‚â´ œÜ‚ÇÅ = œÜ‚ÇÄ ‚â´ f) (n : Œπ) (hn : c.prev n‚ÇÄ = n)
  (zero : K.d n n‚ÇÄ ‚â´ œÜ‚ÇÄ = 0)

variable {n‚ÇÄ n‚ÇÅ h h' f}

noncomputable def toDouble : K ‚ü∂ double _ _ h h' f where
  f i :=
    if h‚ÇÄ : i = n‚ÇÄ
      then (K.XIsoOfEq h‚ÇÄ).hom ‚â´ œÜ‚ÇÄ ‚â´ (doubleXIso‚ÇÄ _ _ h h' f).inv ‚â´
          ((double _ _ h h' f).XIsoOfEq h‚ÇÄ).inv
      else
        if h‚ÇÅ : i = n‚ÇÅ
          then (K.XIsoOfEq h‚ÇÅ).hom ‚â´ œÜ‚ÇÅ ‚â´ (doubleXIso‚ÇÅ _ _ h h' f).inv ‚â´
            ((double _ _ h h' f).XIsoOfEq h‚ÇÅ).inv
          else 0
  comm' i j hij := by
    by_cases h‚ÇÄ : i = n‚ÇÄ
    ¬∑ subst h‚ÇÄ
      rw [dif_pos rfl]
      by_cases h‚ÇÅ : j = n‚ÇÅ
      ¬∑ subst h‚ÇÅ
        simp [dif_neg h', comm]
      ¬∑ simp [double_d_eq_zero‚ÇÅ _ _ h h' f i j h‚ÇÅ]
        by_cases hij' : j = i
        ¬∑ subst hij'
          rw [K.shape, zero_comp]
          intro hjj
          replace hjj := c.prev_eq' hjj
          rw [hn] at hjj
          subst hjj
          apply h'
          exact (c.next_eq' h).symm.trans (c.next_eq' hij)
        ¬∑ rw [dif_neg hij', dif_neg h‚ÇÅ, comp_zero]
    ¬∑ rw [dif_neg h‚ÇÄ]
      have := zero
      by_cases hj : j = n‚ÇÄ
      ¬∑ subst hj
        rw [double_d_eq_zero‚ÇÅ _ _ h h' f i j (fun H => h' H.symm), comp_zero]
        obtain rfl : n = i := hn.symm.trans (c.prev_eq' hij)
        simp [reassoc_of% this]
      ¬∑ rw [dif_neg hj]
        by_cases hj' : j = n‚ÇÅ
        ¬∑ subst hj'
          exfalso
          exact h‚ÇÄ ((c.prev_eq' hij).symm.trans (c.prev_eq' h))
        ¬∑ rw [dif_neg hj', comp_zero, double_d_eq_zero‚ÇÅ _ _ h h' f i j hj', comp_zero]

@[simp]
lemma toDouble_f‚ÇÄ :
    (toDouble K œÜ‚ÇÄ œÜ‚ÇÅ comm n hn zero).f n‚ÇÄ = œÜ‚ÇÄ ‚â´ (doubleXIso‚ÇÄ _ _ h h' f).inv := by
  simp [toDouble]

@[simp]
lemma toDouble_f‚ÇÅ :
    (toDouble K œÜ‚ÇÄ œÜ‚ÇÅ comm n hn zero).f n‚ÇÅ = œÜ‚ÇÅ ‚â´ (doubleXIso‚ÇÅ _ _ h h' f).inv := by
  simp [dif_neg h', toDouble]

end

end CochainComplex

namespace CochainComplex

open HomComplex

variable {C : Type*} [Category C] [Abelian C] {K L : CochainComplex C ‚Ñ§} (f : K ‚ü∂ L)

noncomputable def mappingCocone := (mappingCone f)‚ü¶(-1 : ‚Ñ§)‚üß

namespace mappingCocone

-- not sure what are the best signs here
noncomputable def inl : Cochain K (mappingCocone f) 0 :=
  (mappingCone.inl f).rightShift (-1) 0 (zero_add _)
noncomputable def inr : Cocycle L (mappingCocone f) 1 :=
    (Cocycle.ofHom (mappingCone.inr _)).rightShift (-1) 1 (add_neg_cancel 1)
noncomputable def fst : (mappingCocone f) ‚ü∂ K :=
  -((mappingCone.fst _).leftShift (-1) 0 (add_neg_cancel 1)).homOf
noncomputable def snd : Cochain (mappingCocone f) L (-1) :=
  (mappingCone.snd _).leftShift (-1) (-1) (zero_add _)

@[reassoc (attr := simp)]
lemma inr_fst (p q : ‚Ñ§) (hpq : p + 1 = q) : (inr f).1.v p q hpq ‚â´ (fst f).f q = 0 := by
    dsimp [inr, fst]
    rw [Cochain.rightShift_v _ (-1) 1 _ p q _ p (by linarith),
      Cochain.leftShift_v _ (-1) 0 _ q q _ p (by linarith)]
    simp

@[reassoc (attr := simp)]
lemma inl_snd (p q : ‚Ñ§) (hpq : p + (-1) = q) :
    (inl f).v p p (add_zero _) ‚â´ (snd f).v p q hpq = 0 := by
  dsimp [inl, snd]
  rw [Cochain.rightShift_v _ (-1) 0 _ p p _ q (by linarith),
    Cochain.leftShift_v _ (-1) (-1) _ p q _ q (by linarith)]
  simp

@[reassoc (attr := simp)]
lemma inr_snd (p q : ‚Ñ§) (hpq : p + 1 = q) :
    (inr f).1.v p q hpq ‚â´ (snd f).v q p (by linarith) = ùüô _ := by
  dsimp [inr, snd]
  have : ((1 : ‚Ñ§) + 1)/2 = 1 := rfl
  rw [Cochain.rightShift_v _ (-1) 1 _ p q _ p (by linarith),
    Cochain.leftShift_v _ (-1) (-1) _ q p _ p (by linarith)]
  simp [this, Int.negOnePow_succ, show Int.negOnePow 2 = 1 by rfl]

@[reassoc (attr := simp)]
lemma inl_fst (p : ‚Ñ§) : (inl f).v p p (add_zero _) ‚â´ (fst f).f p = ùüô _ := by
  dsimp [inl, fst]
  have : ((1 : ‚Ñ§) + 1)/2 = 1 := rfl
  rw [Cochain.rightShift_v _ (-1) 0 _ p p _ (p-1) (by linarith),
    Cochain.leftShift_v _ (-1) 0 _ p p _ (p-1) (by linarith)]
  simp [this]
  erw [id_comp]
  simp

lemma id (p q : ‚Ñ§) (hpq : p + (-1) = q) : (fst f).f p ‚â´ (inl f).v p p (add_zero _) +
      (snd f).v p q hpq ‚â´ (inr f).1.v q p (by linarith) = ùüô _ := by
    dsimp [inl, inr, fst, snd]
    have : ((1 : ‚Ñ§) + 1) /2 = 1 := rfl
    rw [Cochain.rightShift_v _ (-1) 0 _ p p _ q (by linarith),
      Cochain.rightShift_v _ (-1) 1 _ q p _ q (by linarith),
      Cochain.leftShift_v _ (-1) 0 _ p p _ q (by linarith),
      Cochain.leftShift_v _ (-1) (-1) _ p q _ q (by linarith)]
    simp [this, Int.negOnePow_succ, show Int.negOnePow 2 = 1 by rfl]
    rw [‚Üê comp_add]
    conv_lhs =>
      congr
      ¬∑ skip
      ¬∑ congr
        ¬∑ rw [‚Üê assoc]
        ¬∑ rw [‚Üê assoc]
    rw [‚Üê add_comp, mappingCone.id_X f q p (by linarith)]
    simp

noncomputable def triangleŒ¥ : L ‚ü∂ (mappingCocone f)‚ü¶(1 : ‚Ñ§)‚üß :=
  mappingCone.inr f ‚â´ (shiftEquiv (CochainComplex C ‚Ñ§) (1 : ‚Ñ§)).counitIso.inv.app _

@[simps!]
noncomputable def triangle : Pretriangulated.Triangle (CochainComplex C ‚Ñ§) :=
  Pretriangulated.Triangle.mk (fst f) f (triangleŒ¥ f)

noncomputable def triangleIso : triangle f ‚âÖ (mappingCone.triangle f).invRotate := by
  refine Pretriangulated.Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) ?_ ?_ ?_
  ¬∑ dsimp
    ext n
    have : ((1 : ‚Ñ§) + 1) / 2 = 1 := rfl
    dsimp [mappingCone.triangle]
    simp only [comp_id, neg_smul, one_smul, Cochain.rightShift_neg, Cochain.neg_v,
      neg_comp, neg_neg, id_comp, neg_inj]
    rw [Cochain.leftShift_v _ (-1) 0 _ n n _ (n-1) (by linarith),
      Cochain.rightShift_v _ 1 0 _ _ _ _ n (by linarith)]
    simp [this]
    dsimp [shiftFunctorCompIsoId]
    rw [shiftFunctorAdd'_inv_app_f', shiftFunctorZero_hom_app_f]
    simp only [HomologicalComplex.XIsoOfEq_hom_comp_XIsoOfEq_hom, Iso.inv_hom_id, comp_id]
    rfl
  ¬∑ dsimp
    simp only [comp_id, id_comp]
  ¬∑ dsimp
    simp only [triangle, triangleŒ¥, shiftEquiv'_inverse, shiftEquiv'_functor,
      shiftEquiv'_counitIso, Pretriangulated.Triangle.mk_obj‚ÇÅ, Pretriangulated.Triangle.mk_mor‚ÇÉ,
      CategoryTheory.Functor.map_id, comp_id, id_comp]
    rfl

variable [HasDerivedCategory C]

lemma Q_map_triangle_distinguished :
    DerivedCategory.Q.mapTriangle.obj (triangle f) ‚àà distTriang _ := by
  refine Pretriangulated.isomorphic_distinguished _ ?_ _
    ((DerivedCategory.Q.mapTriangle.mapIso (triangleIso f)) ‚â™‚â´
      (DerivedCategory.Q.mapTriangleInvRotateIso.app (mappingCone.triangle f)).symm)
  refine Pretriangulated.inv_rot_of_distTriang _ ?_
  rw [DerivedCategory.mem_distTriang_iff]
  exact ‚ü®_, _, _, ‚ü®Iso.refl _‚ü©‚ü©

open HomologicalComplex

@[reassoc (attr := simp)]
lemma homologyMap_fst_comp (n : ‚Ñ§) : homologyMap (fst f) n ‚â´ homologyMap f n = 0 :=
  homologyMap_comp‚ÇÅ‚ÇÇ_eq_zero_of_distinguished _ (Q_map_triangle_distinguished f) n

noncomputable def homology_Œ¥ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) :
    L.homology n‚ÇÄ ‚ü∂ (mappingCocone f).homology n‚ÇÅ :=
  homologyŒ¥OfDistinguished (triangle f) n‚ÇÄ n‚ÇÅ hn‚ÇÅ

@[reassoc (attr := simp)]
lemma homology_Œ¥_comp (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) :
    homology_Œ¥ f n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚â´ homologyMap (fst f) n‚ÇÅ = 0 :=
  homologyŒ¥OfDistinguished_comp _ (Q_map_triangle_distinguished f) n‚ÇÄ n‚ÇÅ hn‚ÇÅ

@[reassoc (attr := simp)]
lemma homology_comp_Œ¥ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) :
    homologyMap f n‚ÇÄ ‚â´ homology_Œ¥ f n‚ÇÄ n‚ÇÅ hn‚ÇÅ = 0 :=
  comp_homologyŒ¥OfDistinguished _ (Q_map_triangle_distinguished f) n‚ÇÄ n‚ÇÅ hn‚ÇÅ

lemma homology_exact‚ÇÅ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) :
    (ShortComplex.mk (homology_Œ¥ f n‚ÇÄ n‚ÇÅ hn‚ÇÅ) (homologyMap (fst f) n‚ÇÅ) (by simp)).Exact :=
  homology_exact‚ÇÅ_of_distinguished _ (Q_map_triangle_distinguished f) n‚ÇÄ n‚ÇÅ hn‚ÇÅ

lemma homology_exact‚ÇÇ (n : ‚Ñ§) :
    (ShortComplex.mk (homologyMap (fst f) n) (homologyMap f n) (by simp)).Exact :=
  homology_exact‚ÇÇ_of_distinguished _ (Q_map_triangle_distinguished f) n

lemma homology_exact‚ÇÉ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) :
    (ShortComplex.mk (homologyMap f n‚ÇÄ) (homology_Œ¥ f n‚ÇÄ n‚ÇÅ hn‚ÇÅ) (by simp)).Exact :=
  homology_exact‚ÇÉ_of_distinguished _ (Q_map_triangle_distinguished f) n‚ÇÄ n‚ÇÅ hn‚ÇÅ

end mappingCocone

end CochainComplex

namespace CategoryTheory

variable {C : Type*} [Category C] {X Y : C} (f : X ‚ü∂ Y)

structure HomFactorization where
  I : C
  i : X ‚ü∂ I
  p : I ‚ü∂ Y
  fac : i ‚â´ p = f

variable {f}

namespace HomFactorization

/-- mk' -/
@[simps]
def mk' {I : C} {i : X ‚ü∂ I} {p : I ‚ü∂ Y} (fac : i ‚â´ p = f) : HomFactorization f :=
  { fac := fac, ..}

attribute [reassoc (attr := simp)] fac

variable (F‚ÇÅ F‚ÇÇ F‚ÇÉ : HomFactorization f)

@[ext]
structure Hom where
  œÜ : F‚ÇÅ.I ‚ü∂ F‚ÇÇ.I
  commi : F‚ÇÅ.i ‚â´ œÜ = F‚ÇÇ.i := by aesop_cat
  commp : œÜ ‚â´ F‚ÇÇ.p = F‚ÇÅ.p := by aesop_cat

attribute [reassoc (attr := simp)] Hom.commi Hom.commp

@[simps]
def Hom.id : Hom F‚ÇÅ F‚ÇÅ where
  œÜ := ùüô _

variable {F‚ÇÅ F‚ÇÇ F‚ÇÉ}

@[simps]
def Hom.comp (f : Hom F‚ÇÅ F‚ÇÇ) (g : Hom F‚ÇÇ F‚ÇÉ) : Hom F‚ÇÅ F‚ÇÉ where
  œÜ := f.œÜ ‚â´ g.œÜ

@[simps]
instance : Category (HomFactorization f) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

@[ext]
lemma hom_ext (f g : F‚ÇÅ ‚ü∂ F‚ÇÇ) (h : f.œÜ = g.œÜ) : f = g :=
  Hom.ext h

variable (f)

@[simps]
def forget : HomFactorization f ‚•§ C where
  obj F := F.I
  map f := f.œÜ

end HomFactorization

end CategoryTheory

variable {C : Type*} [Category C] [Abelian C] [EnoughInjectives C]
  {K L : CochainComplex C ‚Ñ§} (f : K ‚ü∂ L)

namespace CochainComplex

open HomologicalComplex HomComplex

namespace CM5aCof

variable {f}

structure IsCofFibFactorization (F : HomFactorization f) : Prop where
  hi : Mono F.i := by infer_instance
  hp : degreewiseEpiWithInjectiveKernel F.p

variable (f)

def CofFibFactorization := ObjectProperty.FullSubcategory (IsCofFibFactorization (f := f))

instance : Category (CofFibFactorization f) := by
  dsimp only [CofFibFactorization]
  infer_instance

namespace CofFibFactorization

def forget : CofFibFactorization f ‚•§ HomFactorization f := ObjectProperty.Œπ _

variable {f}
variable (F : CofFibFactorization f)

instance : Mono (F.1.i) := F.2.hi

def IsIsoLE (n : ‚Ñ§) : Prop := ‚àÄ (i : ‚Ñ§) (_ : i ‚â§ n), IsIso (F.1.p.f i)

class QuasiIsoLE (n : ‚Ñ§) : Prop where
  quasiIsoAt (i : ‚Ñ§) (_ : i ‚â§ n) : QuasiIsoAt (F.1.i) i

omit [EnoughInjectives C] in
lemma quasiIsoAt_of_quasiIsoLE (F : CofFibFactorization f)
    (n : ‚Ñ§) [F.QuasiIsoLE n] (i : ‚Ñ§) (hi : i ‚â§ n) : QuasiIsoAt (F.1.i) i :=
  QuasiIsoLE.quasiIsoAt i hi

@[simps]
def mk {I : CochainComplex C ‚Ñ§} {i : K ‚ü∂ I} {p : I ‚ü∂ L} (fac : i ‚â´ p = f)
  [hi : Mono i] (hp : degreewiseEpiWithInjectiveKernel p) :
    CofFibFactorization f where
  obj := HomFactorization.mk' fac
  property := ‚ü®hi, hp‚ü©

end CofFibFactorization

lemma step‚ÇÅ [Mono f] (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
    (hf : ‚àÄ (i : ‚Ñ§) (_ : i ‚â§ n‚ÇÄ), QuasiIsoAt f i) :
    ‚àÉ (F : CofFibFactorization f) (_ : F.IsIsoLE n‚ÇÄ) (_ : F.QuasiIsoLE n‚ÇÄ),
      Mono (homologyMap F.1.i n‚ÇÅ) := by
  let S := ((single C (ComplexShape.up ‚Ñ§) n‚ÇÅ).obj (Injective.under (K.opcycles n‚ÇÅ)))
  let M := biprod S L
  let i‚ÇÅ : K ‚ü∂ S := ((toSingleEquiv _ _ n‚ÇÄ n‚ÇÅ (by subst hn‚ÇÅ; simp)).symm
    ‚ü®K.pOpcycles n‚ÇÅ ‚â´ Injective.Œπ _,
      by rw [d_pOpcycles_assoc, zero_comp]‚ü©)
  let i : K ‚ü∂ M := biprod.lift i‚ÇÅ f
  let p : M ‚ü∂ L := biprod.snd
  let œÉ : L ‚ü∂ M := biprod.inr
  have œÉp : œÉ ‚â´ p = ùüô _ := by simp [œÉ, p]
  have hp : degreewiseEpiWithInjectiveKernel p := fun n => by
    rw [Abelian.epiWithInjectiveKernel_iff]
    refine ‚ü®S.X n,?_, (biprod.inl : _ ‚ü∂ M).f n, ?_,
      ‚ü®(biprod.fst : M ‚ü∂ _).f n, (biprod.inr : _ ‚ü∂ M).f n, ?_, ?_, ?_‚ü©‚ü©
    ¬∑ dsimp [S, single]
      by_cases h : n = n‚ÇÅ
      ¬∑ rw [if_pos h]
        infer_instance
      ¬∑ rw [if_neg h]
        infer_instance
    ¬∑ rw [‚Üê comp_f, biprod.inl_snd, zero_f]
    ¬∑ dsimp
      rw [‚Üê comp_f, biprod.inl_fst, id_f]
    ¬∑ dsimp
      rw [‚Üê comp_f, biprod.inr_snd, id_f]
    ¬∑ dsimp
      rw [‚Üê id_f, ‚Üê biprod.total, add_f_apply, comp_f, comp_f]
  have fac : i ‚â´ p = f := by simp [i, p]
  have hp' : ‚àÄ (n : ‚Ñ§) (_ : n ‚â§ n‚ÇÄ), IsIso (p.f n) := fun n hn => by
    refine ‚ü®(biprod.inr : _ ‚ü∂ M).f n, ?_, ?_‚ü©
    ¬∑ rw [‚Üê cancel_mono ((HomologicalComplex.eval C (ComplexShape.up ‚Ñ§) n).mapBiprod _ _).hom]
      ext
      ¬∑ apply IsZero.eq_of_tgt
        dsimp [S, single]
        rw [if_neg (by linarith)]
        exact isZero_zero C
      ¬∑ dsimp
        simp only [Category.assoc, biprod.lift_snd, Category.id_comp]
        rw [‚Üê comp_f, biprod.inr_snd, id_f, comp_id]
    ¬∑ rw [‚Üê comp_f, biprod.inr_snd, id_f]
  have hp'' : ‚àÄ (n : ‚Ñ§) (_ : n ‚â§ n‚ÇÄ), QuasiIsoAt p n := fun n hn => by
    obtain (hn | rfl) := hn.lt_or_eq
    ¬∑ rw [quasiIsoAt_iff' _ (n-1) n (n+1) (by simp) (by simp)]
      let œÜ := (shortComplexFunctor' C (ComplexShape.up ‚Ñ§) (n - 1) n (n + 1)).map p
      have : IsIso œÜ.œÑ‚ÇÅ := hp' _ (by linarith)
      have : IsIso œÜ.œÑ‚ÇÇ := hp' _ (by linarith)
      have : IsIso œÜ.œÑ‚ÇÉ := hp' _ (by linarith)
      apply ShortComplex.quasiIso_of_epi_of_isIso_of_mono œÜ
    ¬∑ rw [quasiIsoAt_iff_isIso_homologyMap]
      refine ‚ü®homologyMap œÉ n, ?_, ?_‚ü©
      ¬∑ have : cyclesMap (biprod.inl : _ ‚ü∂ M) n = 0 := by
          have : (biprod.inl : _ ‚ü∂ M).f n = 0 := by
            apply IsZero.eq_of_src
            dsimp [S, single]
            rw [if_neg (by linarith)]
            exact Limits.isZero_zero C
          rw [‚Üê cancel_mono (M.iCycles n), zero_comp, cyclesMap_i, this, comp_zero]
        symm
        dsimp [p, œÉ]
        rw [‚Üê homologyMap_comp, ‚Üê homologyMap_id, ‚Üê sub_eq_zero, ‚Üê homologyMap_sub,
          ‚Üê biprod.total, add_sub_cancel_right, ‚Üê cancel_epi (M.homologyœÄ n),
          homologyœÄ_naturality, comp_zero, cyclesMap_comp, this, comp_zero, zero_comp]
      ¬∑ rw [‚Üê homologyMap_comp, œÉp, homologyMap_id]
  have hi : ‚àÄ (n : ‚Ñ§) (_ : n ‚â§ n‚ÇÄ), QuasiIsoAt i n := fun n hn => by
    have : QuasiIsoAt p n := hp'' n hn
    have : QuasiIsoAt (i ‚â´ p) n := by simpa only [fac] using hf n hn
    exact quasiIsoAt_of_comp_right i p n
  refine ‚ü®CofFibFactorization.mk fac hp, hp', ‚ü®hi‚ü©, mono_of_cancel_zero _ ?_‚ü©
  intro A‚ÇÄ x‚ÇÄ (hx‚ÇÄ : x‚ÇÄ ‚â´ homologyMap i n‚ÇÅ = 0)
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, _, x‚ÇÅ, hx‚ÇÅ‚ü© := surjective_up_to_refinements_of_epi (K.homologyœÄ n‚ÇÅ) x‚ÇÄ
  rw [‚Üê cancel_epi œÄ‚ÇÅ, comp_zero, hx‚ÇÅ,
    K.comp_homologyœÄ_eq_zero_iff_up_to_refinements x‚ÇÅ n‚ÇÄ (by simp [hn‚ÇÅ])]
  replace hx‚ÇÄ := œÄ‚ÇÅ ‚â´= hx‚ÇÄ
  rw [reassoc_of% hx‚ÇÅ, comp_zero, homologyœÄ_naturality, ‚Üê assoc,
    M.comp_homologyœÄ_eq_zero_iff_up_to_refinements (x‚ÇÅ ‚â´ cyclesMap i n‚ÇÅ) n‚ÇÄ (by simp [hn‚ÇÅ])] at hx‚ÇÄ
  have : Mono (opcyclesMap i‚ÇÅ n‚ÇÅ) := by
    let Œ± : Injective.under (K.opcycles n‚ÇÅ) ‚ü∂ S.X n‚ÇÅ :=
      (singleObjXSelf (ComplexShape.up ‚Ñ§) n‚ÇÅ (Injective.under (K.opcycles n‚ÇÅ))).inv
    have := S.isIso_pOpcycles _ n‚ÇÅ rfl rfl
    have : opcyclesMap i‚ÇÅ n‚ÇÅ = Injective.Œπ (K.opcycles n‚ÇÅ) ‚â´ Œ± ‚â´ S.pOpcycles n‚ÇÅ := by
      rw [‚Üê (cancel_epi (K.pOpcycles n‚ÇÅ)), p_opcyclesMap, ‚Üê assoc, ‚Üê assoc]
      simp [Œ±, i‚ÇÅ, toSingleEquiv]
    rw [this]
    infer_instance
  have hx‚ÇÅ' : (x‚ÇÅ ‚â´ K.iCycles n‚ÇÅ) ‚â´ K.pOpcycles n‚ÇÅ = 0 := by
    obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, _, x‚ÇÇ, hx‚ÇÇ‚ü© := hx‚ÇÄ
    replace hx‚ÇÇ := hx‚ÇÇ =‚â´ (M.iCycles n‚ÇÅ ‚â´ M.pOpcycles n‚ÇÅ ‚â´ opcyclesMap biprod.fst n‚ÇÅ)
    rw [assoc, assoc, assoc, cyclesMap_i_assoc, toCycles_i_assoc, d_pOpcycles_assoc,
      zero_comp, comp_zero, p_opcyclesMap, ‚Üê comp_f_assoc, biprod.lift_fst,
      ‚Üê p_opcyclesMap i‚ÇÅ n‚ÇÅ] at hx‚ÇÇ
    rw [assoc, ‚Üê cancel_mono (opcyclesMap i‚ÇÅ n‚ÇÅ), zero_comp, assoc, assoc,
      ‚Üê cancel_epi œÄ‚ÇÇ, comp_zero, hx‚ÇÇ]
  rw [K.comp_pOpcycles_eq_zero_iff_up_to_refinements (x‚ÇÅ ‚â´ K.iCycles n‚ÇÅ) n‚ÇÄ (by simp [hn‚ÇÅ])] at hx‚ÇÅ'
  obtain ‚ü®A‚ÇÉ, œÄ‚ÇÉ, _, x‚ÇÉ, hx‚ÇÉ‚ü© := hx‚ÇÅ'
  refine ‚ü®A‚ÇÉ, œÄ‚ÇÉ, inferInstance, x‚ÇÉ, ?_‚ü©
  rw [‚Üê cancel_mono (K.iCycles n‚ÇÅ), assoc, hx‚ÇÉ, assoc, toCycles_i]

def CofFibFactorizationQuasiIsoLE (n : ‚Ñ§) :=
  ObjectProperty.FullSubcategory (fun (F : CofFibFactorization f) => F.QuasiIsoLE n)

instance (n : ‚Ñ§) : Category (CofFibFactorizationQuasiIsoLE f n) := by
  dsimp only [CofFibFactorizationQuasiIsoLE]
  infer_instance

instance (n : ‚Ñ§) (F : CofFibFactorizationQuasiIsoLE f n) : F.1.QuasiIsoLE n := F.2

namespace Step‚ÇÇ

variable [Mono f] (n : ‚Ñ§) [Mono (homologyMap f n)]

@[simps]
noncomputable def homologyShortComplex : ShortComplex C :=
  ShortComplex.mk (homologyMap f n) (homologyMap (cokernel.œÄ f) n)
    (by rw [‚Üê homologyMap_comp, cokernel.condition, homologyMap_zero])

omit [EnoughInjectives C] in
lemma shortExact : (ShortComplex.mk _ _ (cokernel.condition f)).ShortExact where
  exact := ShortComplex.exact_of_g_is_cokernel _ (cokernelIsCokernel f)

omit [Mono (homologyMap f n)] [EnoughInjectives C] in
lemma homologyShortComplex_exact : (homologyShortComplex f n).Exact :=
  (shortExact f).homology_exact‚ÇÇ n

instance mono_homologyShortComplex_f : Mono (homologyShortComplex f n).f := by
  dsimp
  infer_instance

noncomputable def I :=
  (single C (ComplexShape.up ‚Ñ§) n).obj (Injective.under (((cokernel f).truncGE n).X n))

omit [Mono (homologyMap f n)] [Mono f] in
lemma isZero_homology_I (q : ‚Ñ§) (hq : q ‚â† n) : IsZero ((I f n).homology q) := by
  rw [‚Üê exactAt_iff_isZero_homology, exactAt_iff]
  apply ShortComplex.exact_of_isZero_X‚ÇÇ
  dsimp [I, single]
  rw [if_neg hq]
  exact Limits.isZero_zero C

instance (p : ‚Ñ§) : Injective ((I f n).X p) := by
  dsimp [I, single]
  split_ifs <;> infer_instance

/-- œÄ' -/
noncomputable def œÄ' : (cokernel f).truncGE n ‚ü∂ I f n :=
  (toSingleEquiv _ _ (n-1) n (by simp)).symm ‚ü®Injective.Œπ _, by
    apply IsZero.eq_of_src
    apply isZero_of_isStrictlyGE _ n
    omega‚ü©

instance : Mono ((œÄ' f n).f n) := by
  simp [œÄ', toSingleEquiv]
  infer_instance

omit [Mono (homologyMap f n)] [Mono f] in
lemma mono_cyclesMap_œÄ' : Mono (cyclesMap (œÄ' f n) n) := by
  have : Mono (cyclesMap (œÄ' f n) n ‚â´ (I f n).iCycles  n) := by
    rw [cyclesMap_i]
    infer_instance
  apply mono_of_mono _ ((I f n).iCycles n)

omit [Mono (homologyMap f n)] [Mono f] in
lemma mono_homologyMap_œÄ' : Mono (homologyMap (œÄ' f n) n) := by
  have := mono_cyclesMap_œÄ' f n
  have := ((cokernel f).truncGE n).isIso_homologyœÄ (n-1) n (by simp)
    (IsZero.eq_of_src (isZero_of_isStrictlyGE _ n _ (by omega)) _ _)
  have := (I f n).isIso_homologyœÄ  (n-1) n (by simp) (by
      apply IsZero.eq_of_src
      dsimp [I, single]
      rw [if_neg (by linarith)]
      exact isZero_zero C)
  have : Mono ((truncGE (cokernel f) n).homologyœÄ n ‚â´ homologyMap (œÄ' f n) n) := by
    rw [homologyœÄ_naturality (œÄ' f n) n]
    infer_instance
  rw [‚Üê IsIso.inv_hom_id_assoc ((truncGE (cokernel f) n).homologyœÄ n) (homologyMap (œÄ' f n) n)]
  infer_instance

noncomputable def Œ± : L ‚ü∂ I f n := cokernel.œÄ f ‚â´ (cokernel f).œÄTruncGE n ‚â´ œÄ' f n

omit [Mono (homologyMap f n)] [Mono f] in
@[reassoc (attr := simp)]
lemma f_Œ± : f ‚â´ Œ± f n = 0 := by simp [Œ±]

omit [Mono (homologyMap f n)] [Mono f] in
@[reassoc (attr := simp)]
lemma f_Œ±_f (i : ‚Ñ§) : f.f i ‚â´ (Œ± f n).f i = 0 := by
  rw [‚Üê comp_f, f_Œ±, zero_f]

omit [Mono (homologyMap f n)] [Mono f] in
@[simps]
noncomputable def homologyShortComplex' : ShortComplex C :=
  ShortComplex.mk (homologyMap f n) (homologyMap (Œ± f n) n) (by
    rw [‚Üê homologyMap_comp, f_Œ±, homologyMap_zero])

omit [Mono (homologyMap f n)] in
lemma homologyShortComplex'_exact : (homologyShortComplex' f n).Exact := by
  let œÜ : homologyShortComplex f n ‚ü∂ homologyShortComplex' f n :=
    { œÑ‚ÇÅ := ùüô _
      œÑ‚ÇÇ := ùüô _
      œÑ‚ÇÉ := homologyMap ((cokernel f).œÄTruncGE n ‚â´ œÄ' f n) n
      comm‚ÇÇ‚ÇÉ := by
        dsimp
        rw [id_comp, ‚Üê homologyMap_comp]
        rfl }
  have : IsIso œÜ.œÑ‚ÇÅ := by infer_instance
  have : IsIso œÜ.œÑ‚ÇÇ := by infer_instance
  have : Mono œÜ.œÑ‚ÇÉ := by
    dsimp [œÜ]
    rw [homologyMap_comp]
    have := mono_homologyMap_œÄ' f n
    infer_instance
  rw [‚Üê ShortComplex.exact_iff_of_epi_of_isIso_of_mono œÜ]
  exact homologyShortComplex_exact f n

instance mono_homologyShortComplex'_f : Mono (homologyShortComplex' f n).f := by
  dsimp
  infer_instance

/-- L' -/
noncomputable def L' := (mappingCone (Œ± f n))‚ü¶(-1 : ‚Ñ§)‚üß

/-- i' -/
noncomputable def i' : Cocycle K (mappingCone (Œ± f n)) (-1) :=
  mappingCone.liftCocycle (Œ± f n) (Cocycle.ofHom f) 0 (neg_add_cancel 1) (by aesop_cat)

noncomputable def i : K ‚ü∂ L' f n :=
  Cocycle.homOf ((i' f n).rightShift (-1) 0 (zero_add _))

noncomputable def p : L' f n ‚ü∂ L := mappingCocone.fst _

omit [Mono (homologyMap f n)] [Mono f] in
lemma fac : i f n ‚â´ p f n = f := by
  ext q
  dsimp [i, p, mappingCocone.fst]
  have : ((1 : ‚Ñ§) + 1) / 2 = 1 := rfl
  rw [Cochain.rightShift_v _ (-1) 0 _ q q _ (q-1) (by linarith),
    Cochain.leftShift_v _ (-1) 0 _ q q _ (q-1) (by linarith)]
  simp [this, i']
  erw [id_comp]
  simp

instance : Mono (i f n) := mono_of_mono_fac (fac f n)

omit [Mono (homologyMap f n)] [Mono f] in
lemma isIso_p_f (q : ‚Ñ§) (hq : q ‚â§ n) : IsIso ((p f n).f q) := by
  refine ‚ü®(mappingCocone.inl _).v q q (add_zero _), ?_, by simp [p]‚ü©
  have : (mappingCocone.snd (Œ± f n)).v q (q-1) (by linarith) = 0 := by
    apply IsZero.eq_of_tgt
    dsimp [I, single]
    rw [if_neg (by linarith)]
    exact Limits.isZero_zero C
  erw [‚Üê mappingCocone.id _ q (q - 1) (by linarith), left_eq_add, this, zero_comp]

@[simps]
noncomputable def cofFibFactorization : CofFibFactorization f where
  obj := HomFactorization.mk' (fac f n)
  property :=
    { hi := by
        dsimp
        infer_instance
      hp := fun q => by
        dsimp
        rw [Abelian.epiWithInjectiveKernel_iff]
        refine ‚ü®_, inferInstance, (mappingCocone.inr _).1.v (q-1) q (by omega),
          by simp [p], ‚ü®(mappingCocone.snd (Œ± f n)).v q (q-1) (by linarith),
          (mappingCocone.inl (Œ± f n)).v q q (add_zero _), by simp, by simp [p], ?_‚ü©‚ü©
        dsimp
        rw [add_comm, p, mappingCocone.id]
        rfl }

variable (hf : ‚àÄ (i : ‚Ñ§) (_ : i ‚â§ n - 1), QuasiIsoAt f i)

omit [EnoughInjectives C] in
include hf in
lemma isGE_cokernel : (cokernel f).IsGE n := by
  rw [isGE_iff]
  intro i hi
  rw [exactAt_iff_isZero_homology]
  apply ((shortExact f).homology_exact‚ÇÉ i (i+1) (by simp)).isZero_X‚ÇÇ
  ¬∑ apply ((shortExact f).homology_exact‚ÇÇ i).epi_f_iff.1
    dsimp
    have := hf i (by linarith)
    infer_instance
  ¬∑ apply ((shortExact f).homology_exact‚ÇÅ i (i+1) (by simp)).mono_g_iff.1
    dsimp
    by_cases h : i + 1 ‚â§ n-1
    ¬∑ have := hf (i+1) h
      infer_instance
    ¬∑ obtain rfl : n = i + 1 := by linarith
      infer_instance

omit [EnoughInjectives C] in
include hf in
lemma quasiIso_truncGEœÄ : QuasiIso ((cokernel f).œÄTruncGE n) := by
  rw [quasiIso_œÄTruncGE_iff]
  exact isGE_cokernel f n hf

variable [HasDerivedCategory C]

omit [Mono (homologyMap f n)] [Mono f] in
lemma mono_homologyMap_p (q : ‚Ñ§) (hq : q ‚â§ n) : Mono (homologyMap (p f n) q) :=
  (mappingCocone.homology_exact‚ÇÅ (Œ± f n) (q-1) q (by linarith)).mono_g (by
    apply IsZero.eq_of_src
    apply isZero_homology_I
    linarith)

omit [Mono (homologyMap f n)] [Mono f] in
lemma epi_homologyMap_p (q : ‚Ñ§) (hq : q < n) : Epi (homologyMap (p f n) q) :=
  (mappingCocone.homology_exact‚ÇÇ (Œ± f n) q).epi_f (by
    apply IsZero.eq_of_tgt
    dsimp
    apply isZero_homology_I
    linarith)

omit [Mono (homologyMap f n)] [Mono f] in
lemma isIso_homologyMap_p (q : ‚Ñ§) (hq : q < n) : IsIso (homologyMap (p f n) q) := by
  have := mono_homologyMap_p f n q (by linarith)
  have := epi_homologyMap_p f n q hq
  apply isIso_of_mono_of_epi

omit [Mono (homologyMap f n)] [Mono f] in
include hf in
lemma isIso_homologyMap_i' (q : ‚Ñ§) (hq : q < n) : IsIso (homologyMap (i f n) q) := by
  have := isIso_homologyMap_p f n q hq
  have h : IsIso (homologyMap f q) := by
    simpa only [quasiIsoAt_iff_isIso_homologyMap] using (hf q (by linarith))
  rw [‚Üê fac f n, homologyMap_comp] at h
  exact IsIso.of_isIso_comp_right (homologyMap (i f n) q) (homologyMap (p f n) q)

/-- homologyShortComplex'' -/
@[simps]
noncomputable def homologyShortComplex'' : ShortComplex C :=
  ShortComplex.mk (homologyMap (p f n) n) (homologyMap (Œ± f n) n)
    (mappingCocone.homologyMap_fst_comp _ _)

instance : Mono (homologyShortComplex'' f n).f :=
  mono_homologyMap_p f n n (by rfl)

omit [Mono (homologyMap f n)] [Mono f] in
lemma homologyShortComplex''_exact : (homologyShortComplex'' f n).Exact :=
  mappingCocone.homology_exact‚ÇÇ (Œ± f n) n

lemma isIso_homologyMap_i : IsIso (homologyMap (i f n) n) := by
  have h‚ÇÅ := (homologyShortComplex'_exact f n).fIsKernel
  have h‚ÇÇ := (homologyShortComplex''_exact f n).fIsKernel
  have : (homologyMap (i f n) n) = (IsLimit.conePointUniqueUpToIso h‚ÇÅ h‚ÇÇ).hom := by
    rw [‚Üê cancel_mono (homologyShortComplex'' f n).f]
    have eq := IsLimit.conePointUniqueUpToIso_hom_comp h‚ÇÅ h‚ÇÇ WalkingParallelPair.zero
    dsimp at eq ‚ä¢
    rw [eq, ‚Üê homologyMap_comp, fac]
  rw [this]
  infer_instance

include hf in
lemma quasiIsoLE_cofFibFactorization : (cofFibFactorization f n).QuasiIsoLE n := ‚ü®fun q hq => by
  dsimp
  rw [quasiIsoAt_iff_isIso_homologyMap]
  obtain hq | rfl := hq.lt_or_eq
  ¬∑ exact isIso_homologyMap_i' f n hf q hq
  ¬∑ exact isIso_homologyMap_i f q‚ü©

end Step‚ÇÇ

section

open Step‚ÇÇ

lemma step‚ÇÇ [Mono f] (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
    (hf : ‚àÄ (i : ‚Ñ§) (_ : i ‚â§ n‚ÇÄ), QuasiIsoAt f i)
    [Mono (homologyMap f n‚ÇÅ)] :
    ‚àÉ (F : CofFibFactorization f) (_ : F.IsIsoLE n‚ÇÅ), F.QuasiIsoLE n‚ÇÅ := by
  have : HasDerivedCategory C := MorphismProperty.HasLocalization.standard _
  obtain rfl : n‚ÇÄ = n‚ÇÅ - 1 := by linarith
  exact ‚ü®cofFibFactorization f n‚ÇÅ, isIso_p_f f n‚ÇÅ, quasiIsoLE_cofFibFactorization f n‚ÇÅ hf‚ü©

end

lemma step‚ÇÅ‚ÇÇ [Mono f] (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
    (hf : ‚àÄ (i : ‚Ñ§) (_ : i ‚â§ n‚ÇÄ), QuasiIsoAt f i) :
    ‚àÉ (F : CofFibFactorization f) (_ : F.IsIsoLE n‚ÇÄ), F.QuasiIsoLE n‚ÇÅ := by
  obtain ‚ü®F‚ÇÅ, hF‚ÇÅ, hF‚ÇÅ', _‚ü© := step‚ÇÅ f n‚ÇÄ n‚ÇÅ hn‚ÇÅ hf
  obtain ‚ü®F‚ÇÇ, hF‚ÇÇ, hF‚ÇÇ'‚ü© := step‚ÇÇ F‚ÇÅ.1.i n‚ÇÄ n‚ÇÅ hn‚ÇÅ (F‚ÇÅ.quasiIsoAt_of_quasiIsoLE n‚ÇÄ)
  have fac : F‚ÇÇ.1.i ‚â´ F‚ÇÇ.1.p ‚â´ F‚ÇÅ.1.p = f := by
    rw [reassoc_of% F‚ÇÇ.1.fac, F‚ÇÅ.1.fac]
  refine ‚ü®CofFibFactorization.mk fac
    (MorphismProperty.comp_mem _ _ _ F‚ÇÇ.2.hp F‚ÇÅ.2.hp), ?_,
      ‚ü®F‚ÇÇ.quasiIsoAt_of_quasiIsoLE n‚ÇÅ‚ü©‚ü©
  ¬∑ intro i hi
    have := hF‚ÇÅ i hi
    have := hF‚ÇÇ i (by linarith)
    dsimp
    infer_instance

/-- step' -/
lemma step' (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
    (F : CofFibFactorizationQuasiIsoLE f n‚ÇÄ) :
    ‚àÉ (F' : CofFibFactorizationQuasiIsoLE f n‚ÇÅ) (f : F'.1 ‚ü∂ F.1),
      ‚àÄ (i : ‚Ñ§) (_ : i ‚â§ n‚ÇÄ), IsIso (f.œÜ.f i) := by
  obtain ‚ü®F‚ÇÅ‚ÇÇ, h, _‚ü© := step‚ÇÅ‚ÇÇ F.1.1.i n‚ÇÄ n‚ÇÅ hn‚ÇÅ (F.1.quasiIsoAt_of_quasiIsoLE n‚ÇÄ)
  have fac : F‚ÇÅ‚ÇÇ.obj.i ‚â´ F‚ÇÅ‚ÇÇ.obj.p ‚â´ F.1.1.p = f := by rw [F‚ÇÅ‚ÇÇ.1.fac_assoc, F.1.1.fac]
  exact ‚ü®‚ü®CofFibFactorization.mk fac (MorphismProperty.comp_mem _ _ _ F‚ÇÅ‚ÇÇ.2.hp F.1.2.hp),
    ‚ü®F‚ÇÅ‚ÇÇ.quasiIsoAt_of_quasiIsoLE n‚ÇÅ‚ü©‚ü©, { œÜ := F‚ÇÅ‚ÇÇ.1.p }, h‚ü©

namespace CofFibFactorizationQuasiIsoLE

def zero [Mono f] (n : ‚Ñ§) [K.IsStrictlyGE (n + 1)] [L.IsStrictlyGE (n + 1)] :
    CofFibFactorizationQuasiIsoLE f (n + (0 : ‚Ñï)) where
  obj := CofFibFactorization.mk (comp_id _) (fun n => by
    rw [Abelian.epiWithInjectiveKernel_iff]
    refine ‚ü®0, inferInstance, 0, ?_, ‚ü®0, ùüô _, ?_, ?_, ?_‚ü©‚ü©
    all_goals simp)
  property := ‚ü®by
    intro i hi
    simp only [Nat.cast_zero, add_zero] at hi
    dsimp
    rw [quasiIsoAt_iff_isIso_homologyMap]
    refine ‚ü®0, ?_, ?_‚ü©
    all_goals
      apply IsZero.eq_of_src
      rw [‚Üê exactAt_iff_isZero_homology, exactAt_iff]
      apply ShortComplex.exact_of_isZero_X‚ÇÇ
      apply isZero_of_isStrictlyGE _ (n + 1) i (by linarith)‚ü©

variable {f}

noncomputable def next {n‚ÇÄ : ‚Ñ§} (F : CofFibFactorizationQuasiIsoLE f n‚ÇÄ)
    (n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1) :
    CofFibFactorizationQuasiIsoLE f n‚ÇÅ :=
  (step' f _ _ hn‚ÇÅ F).choose

noncomputable def fromNext {n‚ÇÄ : ‚Ñ§} (F : CofFibFactorizationQuasiIsoLE f n‚ÇÄ)
    (n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1) : (F.next n‚ÇÅ hn‚ÇÅ).1 ‚ü∂ F.1 :=
  (step' f _ _ hn‚ÇÅ F).choose_spec.choose

lemma isIso_fromNext_œÜ_f {n‚ÇÄ : ‚Ñ§} (F : CofFibFactorizationQuasiIsoLE f n‚ÇÄ)
    (n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1) (i : ‚Ñ§) (hi : i ‚â§ n‚ÇÄ) :
    IsIso ((F.fromNext n‚ÇÅ hn‚ÇÅ).œÜ.f i) :=
  (step' f _ _ hn‚ÇÅ F).choose_spec.choose_spec i hi

variable (f)

noncomputable def sequence [Mono f] (n‚ÇÄ : ‚Ñ§) [K.IsStrictlyGE (n‚ÇÄ + 1)] [L.IsStrictlyGE (n‚ÇÄ + 1)] :
    ‚àÄ (q : ‚Ñï), CofFibFactorizationQuasiIsoLE f (n‚ÇÄ + q)
  | 0 => zero f n‚ÇÄ
  | (q + 1) => (sequence n‚ÇÄ q).next _ (by rw [Nat.cast_add, Nat.cast_one, add_assoc])

noncomputable def sequenceFromNext
    [Mono f] (n‚ÇÄ : ‚Ñ§) [K.IsStrictlyGE (n‚ÇÄ + 1)] [L.IsStrictlyGE (n‚ÇÄ + 1)] (q : ‚Ñï) :
    (sequence f n‚ÇÄ (q + 1)).1 ‚ü∂ (sequence f n‚ÇÄ q).1 :=
  fromNext _ _ _

end CofFibFactorizationQuasiIsoLE

variable [Mono f] (n‚ÇÄ : ‚Ñ§) [K.IsStrictlyGE (n‚ÇÄ + 1)] [L.IsStrictlyGE (n‚ÇÄ + 1)]

noncomputable def inverseSystem : ‚Ñï·µí·µñ ‚•§ CofFibFactorization f :=
  (Functor.ofSequence (fun q => (CofFibFactorizationQuasiIsoLE.sequenceFromNext f n‚ÇÄ q).op)).leftOp

noncomputable def inverseSystemI : ‚Ñï·µí·µñ ‚•§ CochainComplex C ‚Ñ§ :=
  inverseSystem f n‚ÇÄ ‚ãô CofFibFactorization.forget f ‚ãô HomFactorization.forget f

lemma isIso_inverseSystemI_map_succ (n : ‚Ñï) (q : ‚Ñ§) (hq : q ‚â§ n‚ÇÄ + n) :
    IsIso (((inverseSystemI f n‚ÇÄ).map ((homOfLE (show n ‚â§ n + 1 by linarith)).op)).f q) := by
  dsimp only [inverseSystemI, inverseSystem]
  simp only [Functor.comp_obj, Functor.leftOp_obj, Opposite.unop_op, Functor.ofSequence_obj,
    HomFactorization.forget_obj, Functor.comp_map, Functor.leftOp_map, Quiver.Hom.unop_op,
    HomFactorization.forget_map, Functor.ofSequence_map_homOfLE_succ]
  change IsIso ((CofFibFactorizationQuasiIsoLE.sequenceFromNext f n‚ÇÄ n).1.f q)
  apply CofFibFactorizationQuasiIsoLE.isIso_fromNext_œÜ_f
  simpa only [Nat.add_eq, add_zero] using hq

/-- isIso_inverseSystemI_map' -/
lemma isIso_inverseSystemI_map' (n n' : ‚Ñï) (h : n ‚â§ n')
    (q : ‚Ñ§) (hq : q ‚â§ n‚ÇÄ + n) : IsIso (((inverseSystemI f n‚ÇÄ).map (homOfLE h).op).f q) := by
  suffices ‚àÄ (k n n' : ‚Ñï) (h : n + k = n') (q : ‚Ñ§) (_ : q ‚â§ n‚ÇÄ + n),
      IsIso (((inverseSystemI f n‚ÇÄ).map (homOfLE (show n ‚â§ n' by linarith)).op).f q) by
    obtain ‚ü®k, rfl‚ü© := Nat.exists_eq_add_of_le h
    exact this k n _ rfl q hq
  intro k
  induction' k with k hk
  ¬∑ intro n n' h
    obtain rfl : n = n' := by linarith
    intro q _
    have : homOfLE (show n ‚â§ n by rfl) = ùüô _ := rfl
    rw [this, op_id, (inverseSystemI f n‚ÇÄ).map_id, id_f]
    infer_instance
  ¬∑ intro n n'' h q hq
    let n' := n + k
    have := hk n n' rfl q hq
    rw [‚Üê homOfLE_comp (show n ‚â§ n' by omega) (show n' ‚â§ n'' by omega), op_comp,
      (inverseSystemI f n‚ÇÄ).map_comp, comp_f]
    obtain rfl : n'' = n' + 1 := by omega
    have := isIso_inverseSystemI_map_succ f n‚ÇÄ n' q (by omega)
    infer_instance

lemma isIso_inverseSystemI_map {n n' : ‚Ñï} (œÜ : Opposite.op n' ‚ü∂ Opposite.op n)
    (q : ‚Ñ§) (hq : q ‚â§ n‚ÇÄ + n) : IsIso (((inverseSystemI f n‚ÇÄ).map œÜ).f q) :=
  isIso_inverseSystemI_map' f n‚ÇÄ n n' (leOfHom œÜ.unop) q hq

lemma isEventuallyConstantTo_inverseSystemI_comp_eval (q : ‚Ñ§) (n : ‚Ñï) (hq : q ‚â§ n‚ÇÄ + n) :
    (inverseSystemI f n‚ÇÄ ‚ãô
      HomologicalComplex.eval _ _ q).IsEventuallyConstantTo (Opposite.op n) := by
  rintro ‚ü®n'‚ü© œÜ
  exact isIso_inverseSystemI_map f n‚ÇÄ œÜ q hq

instance (q : ‚Ñ§) :
    IsCofiltered.IsEventuallyConstant (inverseSystemI f n‚ÇÄ ‚ãô HomologicalComplex.eval _ _ q) where
  exists_isEventuallyConstantTo :=
    ‚ü®Opposite.op (q - n‚ÇÄ).toNat, isEventuallyConstantTo_inverseSystemI_comp_eval _ _ _ _
      (by linarith [Int.self_le_toNat (q - n‚ÇÄ)])‚ü©

example : HasLimit (inverseSystemI f n‚ÇÄ) := inferInstance

noncomputable def I := limit (inverseSystemI f n‚ÇÄ)

lemma isIso_œÄ_f (n : ‚Ñï) (q : ‚Ñ§) (hq : q ‚â§ n‚ÇÄ + n) :
    IsIso ((limit.œÄ (inverseSystemI f n‚ÇÄ) (Opposite.op n)).f q) := by
  apply isIso_limit_œÄ_of_isEventuallyConstantTo
  exact isEventuallyConstantTo_inverseSystemI_comp_eval f n‚ÇÄ q n hq

noncomputable def cone : Cone (inverseSystemI f n‚ÇÄ) where
  pt := K
  œÄ :=
    { app := fun n => ((inverseSystem f n‚ÇÄ).obj n).1.i
      naturality := fun i j œÜ => by
        dsimp
        rw [id_comp]
        exact ((inverseSystem f n‚ÇÄ).map œÜ).commi.symm }

noncomputable def i : K ‚ü∂ I f n‚ÇÄ := limit.lift (inverseSystemI f n‚ÇÄ) (cone f n‚ÇÄ)

noncomputable def p : I f n‚ÇÄ ‚ü∂ L :=
  limit.œÄ _ (Opposite.op 0) ‚â´ ((inverseSystem f n‚ÇÄ).obj ((Opposite.op 0))).1.p

@[reassoc (attr := simp)]
lemma fac : i f n‚ÇÄ ‚â´ p f n‚ÇÄ = f := by simp [i, p, cone]

instance : Mono (i f n‚ÇÄ) := mono_of_mono_fac (fac f n‚ÇÄ)

/-- p' -/
noncomputable def p' (n : ‚Ñï) : (inverseSystemI f n‚ÇÄ).obj (Opposite.op n) ‚ü∂ L :=
  ((inverseSystem f n‚ÇÄ).obj (Opposite.op n)).1.p

@[simp]
lemma p'_zero : p' f n‚ÇÄ 0 = ùüô _ := rfl

/-- `w_p'` -/
lemma w_p' (n n' : ‚Ñï) (h : n ‚â§ n') :
    ((inverseSystemI f n‚ÇÄ).map (homOfLE h).op) ‚â´ p' f n‚ÇÄ n = p' f n‚ÇÄ n' :=
  ((inverseSystem f n‚ÇÄ).map (homOfLE h).op).commp

/-- `œÄ_comp_p'` -/
lemma œÄ_comp_p' (n : ‚Ñï) : limit.œÄ _ (Opposite.op n) ‚â´ p' f n‚ÇÄ n = p f n‚ÇÄ := by
  dsimp [p]
  rw [‚Üê limit.w (inverseSystemI f n‚ÇÄ) (homOfLE (show 0 ‚â§ n by linarith)).op, assoc,
    (w_p' f n‚ÇÄ 0 n _).symm]
  rfl

lemma isIso_p_f (q : ‚Ñ§) (hq : q ‚â§ n‚ÇÄ) : IsIso ((p f n‚ÇÄ).f q) := by
  rw [‚Üê œÄ_comp_p' f n‚ÇÄ 0, comp_f, p'_zero, id_f, comp_id]
  apply isIso_œÄ_f
  rw [Nat.cast_zero, add_zero]
  exact hq

lemma degreewiseEpiWithInjectiveKernel_p :
    degreewiseEpiWithInjectiveKernel (CM5aCof.p f n‚ÇÄ) := fun q => by
  obtain ‚ü®n, hq‚ü© : ‚àÉ (n : ‚Ñï), q ‚â§ n‚ÇÄ + n :=
    ‚ü®Int.toNat (q - n‚ÇÄ), by linarith [Int.self_le_toNat (q - n‚ÇÄ)]‚ü©
  rw [‚Üê œÄ_comp_p' f n‚ÇÄ n, comp_f]
  refine MorphismProperty.comp_mem _ _ _ ?_ ?_
  ¬∑ have := isIso_œÄ_f f n‚ÇÄ n q hq
    apply Abelian.epiWithInjectiveKernel_of_iso
  ¬∑ exact ((inverseSystem f n‚ÇÄ).obj (Opposite.op n)).2.hp q


/-- i' -/
noncomputable def i' (n : ‚Ñï) : K ‚ü∂ (inverseSystemI f n‚ÇÄ).obj (Opposite.op n) :=
  ((inverseSystem f n‚ÇÄ).obj (Opposite.op n)).1.i

/-- quasiIsoAt_i' -/
lemma quasiIsoAt_i' (n : ‚Ñï) (q : ‚Ñ§) (hq : q ‚â§ n‚ÇÄ + n) : QuasiIsoAt (i' f n‚ÇÄ n) q :=
  (CofFibFactorizationQuasiIsoLE.sequence f n‚ÇÄ n).2.quasiIsoAt q hq

lemma quasiIsoAt_œÄ_f (n : ‚Ñï) (q : ‚Ñ§) (hq : q + 1 ‚â§ n‚ÇÄ + n) :
    QuasiIsoAt (limit.œÄ (inverseSystemI f n‚ÇÄ) (Opposite.op n)) q := by
  rw [quasiIsoAt_iff' _ (q-1) q (q + 1) (by simp) (by simp)]
  have := isIso_œÄ_f f n‚ÇÄ n (q-1) (by linarith)
  have := isIso_œÄ_f f n‚ÇÄ n q (by linarith)
  have := isIso_œÄ_f f n‚ÇÄ n (q+1) (by linarith)
  refine @ShortComplex.quasiIso_of_epi_of_isIso_of_mono _ _ _ _ _ _ _ _ ?_ ?_ ?_
  all_goals
    dsimp
    infer_instance

lemma i_œÄ (n : ‚Ñï) : i f n‚ÇÄ ‚â´ (limit.œÄ (inverseSystemI f n‚ÇÄ) (Opposite.op n)) = i' f n‚ÇÄ n := by
  apply limit.lift_œÄ

instance : QuasiIso (i f n‚ÇÄ) where
  quasiIsoAt q := by
    obtain ‚ü®n, hq‚ü© : ‚àÉ (n : ‚Ñï), q + 1 ‚â§ n‚ÇÄ + n :=
      ‚ü®Int.toNat (q + 1 - n‚ÇÄ), by linarith [Int.self_le_toNat (q + 1 - n‚ÇÄ)]‚ü©
    have := quasiIsoAt_œÄ_f f n‚ÇÄ n q hq
    rw [‚Üê quasiIsoAt_iff_comp_right _ (limit.œÄ (inverseSystemI f n‚ÇÄ) (Opposite.op n)),
      i_œÄ]
    exact quasiIsoAt_i' f n‚ÇÄ n q  (by linarith)

example (n : ‚Ñ§) : n ‚â§ n.toNat := by exact Int.self_le_toNat n

end CM5aCof

section

lemma CM5a_cof (n : ‚Ñ§) [K.IsStrictlyGE (n + 1)] [L.IsStrictlyGE n] [Mono f] :
    ‚àÉ (L' : CochainComplex C ‚Ñ§) (_hL' : L'.IsStrictlyGE n) (i : K ‚ü∂ L') (p : L' ‚ü∂ L)
      (_hi : Mono i) (_hi' : QuasiIso i) (_hp : degreewiseEpiWithInjectiveKernel p), i ‚â´ p = f := by
  let n‚ÇÄ := n - 1
  have : K.IsStrictlyGE (n‚ÇÄ + 1) := K.isStrictlyGE_of_ge (n‚ÇÄ + 1) (n + 1) (by omega)
  have : L.IsStrictlyGE (n‚ÇÄ + 1) := L.isStrictlyGE_of_ge (n‚ÇÄ + 1) n (by omega)
  have : (CM5aCof.I f n‚ÇÄ).IsStrictlyGE n := by
    rw [isStrictlyGE_iff]
    intro q hq
    exact IsZero.of_iso (L.isZero_of_isStrictlyGE n q hq) (by
      have := CM5aCof.isIso_p_f f n‚ÇÄ q (by omega)
      exact asIso ((CM5aCof.p f n‚ÇÄ).f q))
  exact ‚ü®_, inferInstance, CM5aCof.i f n‚ÇÄ, CM5aCof.p f n‚ÇÄ, inferInstance, inferInstance,
    CM5aCof.degreewiseEpiWithInjectiveKernel_p f n‚ÇÄ, CM5aCof.fac f n‚ÇÄ‚ü©

end

lemma CM5a (n : ‚Ñ§) [K.IsStrictlyGE (n + 1)] [L.IsStrictlyGE n] :
    ‚àÉ (L' : CochainComplex C ‚Ñ§) (_hL' : L'.IsStrictlyGE n) (i : K ‚ü∂ L') (p : L' ‚ü∂ L)
      (_hi : Mono i) (_hi' : QuasiIso i) (_hp : degreewiseEpiWithInjectiveKernel p), i ‚â´ p = f := by
  obtain ‚ü®L', _, i‚ÇÅ, p‚ÇÅ, _, hp‚ÇÅ, _, rfl‚ü© := CM5b f n
  obtain ‚ü®L'', _, i‚ÇÇ, p‚ÇÇ, _, _, hp‚ÇÇ, rfl‚ü© := CM5a_cof i‚ÇÅ n
  refine ‚ü®L'', inferInstance, i‚ÇÇ, p‚ÇÇ ‚â´ p‚ÇÅ, inferInstance, inferInstance,
    MorphismProperty.comp_mem _ _ _ hp‚ÇÇ hp‚ÇÅ, by simp‚ü©

variable (K)

/-- exists_injective_resolution' -/
lemma exists_injective_resolution' (n : ‚Ñ§) [K.IsStrictlyGE n] :
    ‚àÉ (L : CochainComplex C ‚Ñ§) (i : K ‚ü∂ L) (_hi : Mono i) (_hi' : QuasiIso i)
      (_ : ‚àÄ (n : ‚Ñ§), Injective (L.X n)), L.IsStrictlyGE (n-1) := by
  have : K.IsStrictlyGE (n - 1 + 1) := by
    simp only [sub_add_cancel]
    infer_instance
  obtain ‚ü®L, hL, i, p, hi, hi', hp, _‚ü© := CM5a (0 : K ‚ü∂ 0) (n - 1)
  have hp‚ÇÄ : p = 0 := (isZero_zero _).eq_of_tgt _ _
  refine ‚ü®L, i, hi, hi', fun n => Injective.of_iso ?_ ((hp n).2), hL‚ü©
  exact
    { hom := kernel.Œπ _
      inv := kernel.lift _ (ùüô _) (by simp [hp‚ÇÄ])
      hom_inv_id := by rw [‚Üê cancel_mono (kernel.Œπ _), assoc, kernel.lift_Œπ, comp_id, id_comp]
      inv_hom_id := by simp }

lemma exists_injective_resolution (n : ‚Ñ§) [K.IsStrictlyGE n] :
    ‚àÉ (L : CochainComplex C ‚Ñ§) (i : K ‚ü∂ L) (_hi' : QuasiIso i)
      (_hL : ‚àÄ (n : ‚Ñ§), Injective (L.X n)), L.IsStrictlyGE n := by
  have : HasDerivedCategory C := MorphismProperty.HasLocalization.standard _
  obtain ‚ü®L, i, _, _, hL, _‚ü©  := exists_injective_resolution' K n
  have : L.IsGE n := by
    have hK : K.IsGE n := inferInstance
    rw [‚Üê DerivedCategory.isGE_Q_obj_iff] at hK ‚ä¢
    exact DerivedCategory.TStructure.t.isGE_of_iso (asIso (DerivedCategory.Q.map i)) n
  have : QuasiIso (L.œÄTruncGE n) := by
    rw [L.quasiIso_œÄTruncGE_iff n]
    infer_instance
  have : Injective (L.opcycles n) := by
    let S : ShortComplex C := ShortComplex.mk (L.d (n-1) n) (L.pOpcycles n) (by simp)
    have : Epi S.g := by dsimp; infer_instance
    have : Mono S.f := by
      let T := L.sc' (n-2) (n-1) n
      have hT : T.Exact := by
        rw [‚Üê L.exactAt_iff' (n-2) (n-1) n (by simp; linarith) (by simp),
          exactAt_iff_isZero_homology]
        exact L.isZero_of_isGE n (n-1) (by linarith)
      apply hT.mono_g
      apply IsZero.eq_of_src
      apply L.isZero_of_isStrictlyGE (n-1)
      linarith
    have hS : S.ShortExact :=
      { exact := S.exact_of_g_is_cokernel (L.opcyclesIsCokernel (n-1) n (by simp)) }
    exact Injective.direct_factor (hS.splittingOfInjective).s_g
  -- note: this `i ‚â´ L.œÄTruncGE n` is a mono in degrees > n, but it may not be in degree n
  refine ‚ü®L.truncGE n, i ‚â´ L.œÄTruncGE n, inferInstance, ?_, inferInstance‚ü©
  intro q
  by_cases h : q < n
  ¬∑ apply Injective.injective_of_isZero
    exact isZero_of_isStrictlyGE _ n _ h
  ¬∑ simp only [not_lt] at h
    obtain (hq | rfl) := h.lt_or_eq
    ¬∑ exact Injective.of_iso (L.truncGEXIso n q hq).symm (hL q)
    ¬∑ exact Injective.of_iso (L.truncGEXIsoOpcycles n).symm inferInstance

section

variable (n : ‚Ñ§) [K.IsStrictlyGE n]

noncomputable def injectiveResolution : CochainComplex C ‚Ñ§ :=
  (K.exists_injective_resolution n).choose

noncomputable def ŒπInjectiveResolution : K ‚ü∂ K.injectiveResolution n :=
  (K.exists_injective_resolution n).choose_spec.choose

instance : QuasiIso (K.ŒπInjectiveResolution n) :=
  (K.exists_injective_resolution n).choose_spec.choose_spec.choose

instance (q : ‚Ñ§) : Injective ((K.injectiveResolution n).X q) :=
  (K.exists_injective_resolution n).choose_spec.choose_spec.choose_spec.choose q

instance : (K.injectiveResolution n).IsStrictlyGE n :=
  (K.exists_injective_resolution n).choose_spec.choose_spec.choose_spec.choose_spec

end

end CochainComplex
