/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.BifunctorFlip

/-!
# Evaluating bifunctors on a single complex

-/

open CategoryTheory Limits HomologicalComplex ZeroObject

namespace CochainComplex

variable {C‚ÇÅ C‚ÇÇ D : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category D]
  [HasZeroMorphisms C‚ÇÅ] [HasZeroMorphisms C‚ÇÇ] [Preadditive D] [HasZeroObject D]
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ D) [F.PreservesZeroMorphisms]
  [‚àÄ (X‚ÇÅ : C‚ÇÅ), (F.obj X‚ÇÅ).PreservesZeroMorphisms]

instance [HasZeroObject C‚ÇÅ] (X‚ÇÅ : C‚ÇÅ) (K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§) (x‚ÇÅ : ‚Ñ§) :
    HasMapBifunctor ((single C‚ÇÅ (ComplexShape.up ‚Ñ§) x‚ÇÅ).obj X‚ÇÅ) K‚ÇÇ F (.up ‚Ñ§) :=
  fun n ‚Ü¶ by
    obtain ‚ü®x‚ÇÇ, rfl‚ü© : ‚àÉ (x‚ÇÇ : ‚Ñ§), n = x‚ÇÅ + x‚ÇÇ := ‚ü®n - x‚ÇÅ, by simp‚ü©
    refine ‚ü®‚ü®Cofan.mk ((F.obj X‚ÇÅ).obj (K‚ÇÇ.X x‚ÇÇ)) (fun ‚ü®‚ü®p, q‚ü©, hpq‚ü© ‚Ü¶
      if hpq : p = x‚ÇÅ ‚àß q = x‚ÇÇ then
        (F.map (singleObjXIsoOfEq (.up ‚Ñ§) x‚ÇÅ X‚ÇÅ p hpq.1).hom).app _ ‚â´ (F.obj X‚ÇÅ).map
          (eqToHom (by
            obtain rfl := hpq.2
            rfl))
        else 0), {
          desc s :=
            (F.map (singleObjXIsoOfEq (.up ‚Ñ§) x‚ÇÅ X‚ÇÅ x‚ÇÅ rfl).inv).app _ ‚â´ s.Œπ.app ‚ü®‚ü®x‚ÇÅ, x‚ÇÇ‚ü©, by simp‚ü©
          fac s := by
            rintro ‚ü®‚ü®p, q‚ü©, hpq‚ü©
            simp only [Set.mem_preimage, Set.mem_singleton_iff, ComplexShape.œÄ_def] at hpq
            by_cases hp : p = x‚ÇÅ
            ¬∑ subst hp
              obtain rfl : q = x‚ÇÇ := by omega
              simp
            ¬∑ apply IsZero.eq_of_src
              dsimp
              apply IsZero.obj
              apply Functor.map_isZero
              exact isZero_single_obj_X _ _ _ _ hp
          uniq s m hm := by
            have := hm ‚ü®‚ü®x‚ÇÅ, x‚ÇÇ‚ü©, by simp‚ü©
            dsimp at this
            simp only [and_self, reduceDIte, CategoryTheory.Functor.map_id,
              Category.comp_id] at this
            simp [‚Üê this]
        }‚ü©‚ü©

instance [HasZeroObject C‚ÇÇ] (X‚ÇÇ : C‚ÇÇ) (K‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§) (x‚ÇÇ : ‚Ñ§) :
    HasMapBifunctor K‚ÇÅ ((single C‚ÇÇ (ComplexShape.up ‚Ñ§) x‚ÇÇ).obj X‚ÇÇ) F (.up ‚Ñ§) := by
  rw [‚Üê hasMapBifunctor_flip_iff]
  infer_instance

@[simps inv]
noncomputable def mapBifunctorSingle‚ÇÅXIso
    [HasZeroObject C‚ÇÅ] (X‚ÇÅ : C‚ÇÅ) (K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§) (n : ‚Ñ§) :
    (mapBifunctor ((single C‚ÇÅ (.up ‚Ñ§) 0).obj X‚ÇÅ) K‚ÇÇ F (.up ‚Ñ§)).X n ‚âÖ
      (((F.obj X‚ÇÅ).mapHomologicalComplex (.up ‚Ñ§)).obj K‚ÇÇ).X n where
  hom := mapBifunctorDesc (fun p q hpq ‚Ü¶
    if hpq : p = 0 ‚àß q = n then
      (F.map (singleObjXIsoOfEq (.up ‚Ñ§) 0 X‚ÇÅ p hpq.1).hom).app _ ‚â´
        (F.obj X‚ÇÅ).map (eqToHom (by obtain rfl := hpq.2; rfl)) else 0)
  inv := (F.map (singleObjXSelf (.up ‚Ñ§) 0 X‚ÇÅ).inv).app _ ‚â´
      ŒπMapBifunctor ((single C‚ÇÅ (.up ‚Ñ§) 0).obj X‚ÇÅ) K‚ÇÇ F (.up ‚Ñ§) 0 n n (by simp)
  hom_inv_id := by
    ext p q hpq
    simp only [ComplexShape.œÄ_def] at hpq
    by_cases hp : p = 0
    ¬∑ subst hp
      obtain rfl : n = q := by omega
      simp [singleObjXSelf]
    ¬∑ apply IsZero.eq_of_src
      apply IsZero.obj
      apply Functor.map_isZero
      exact isZero_single_obj_X _ _ _ _ hp
  inv_hom_id := by simp [singleObjXSelf]

section
variable [HasZeroObject C‚ÇÅ] (X‚ÇÅ : C‚ÇÅ)

@[simps! inv_f]
noncomputable def mapBifunctorSingle‚ÇÅIso (K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§) :
    mapBifunctor ((single C‚ÇÅ (.up ‚Ñ§) 0).obj X‚ÇÅ) K‚ÇÇ F (.up ‚Ñ§) ‚âÖ
      ((F.obj X‚ÇÅ).mapHomologicalComplex (.up ‚Ñ§)).obj K‚ÇÇ :=
  (Hom.isoOfComponents (fun n ‚Ü¶ (mapBifunctorSingle‚ÇÅXIso F X‚ÇÅ K‚ÇÇ n).symm) (by
    rintro n _ rfl
    dsimp
    simp only [Category.assoc, NatTrans.naturality_assoc]
    congr 1
    rw [mapBifunctor.d_eq, Preadditive.comp_add, mapBifunctor.Œπ_D‚ÇÅ, mapBifunctor.Œπ_D‚ÇÇ,
      mapBifunctor.d‚ÇÅ_eq _ _ F _ (i‚ÇÅ' := 1) (by simp) _ _ (by dsimp; omega),
      single_obj_d, Functor.map_zero, zero_app, zero_comp, smul_zero, zero_add,
      mapBifunctor.d‚ÇÇ_eq _ _ F _ _ (i‚ÇÇ' := n + 1) (by simp) _ (by dsimp; omega)]
    dsimp
    simp only [one_smul])).symm

@[reassoc (attr := simp)]
lemma mapBifunctorSingle‚ÇÅIso_inv_naturality {K‚ÇÇ K‚ÇÇ' : CochainComplex C‚ÇÇ ‚Ñ§} (œÜ : K‚ÇÇ ‚ü∂ K‚ÇÇ') :
    (mapBifunctorSingle‚ÇÅIso F X‚ÇÅ K‚ÇÇ).inv ‚â´ mapBifunctorMap (ùüô _) œÜ F (.up ‚Ñ§) =
      ((F.obj X‚ÇÅ).mapHomologicalComplex _).map œÜ ‚â´ (mapBifunctorSingle‚ÇÅIso F X‚ÇÅ K‚ÇÇ').inv := by
  aesop_cat

@[reassoc (attr := simp)]
lemma mapBifunctorSingle‚ÇÅIso_hom_naturality {K‚ÇÇ K‚ÇÇ' : CochainComplex C‚ÇÇ ‚Ñ§} (œÜ : K‚ÇÇ ‚ü∂ K‚ÇÇ') :
    mapBifunctorMap (ùüô _) œÜ F (.up ‚Ñ§) ‚â´ (mapBifunctorSingle‚ÇÅIso F X‚ÇÅ K‚ÇÇ').hom =
      (mapBifunctorSingle‚ÇÅIso F X‚ÇÅ K‚ÇÇ).hom ‚â´ ((F.obj X‚ÇÅ).mapHomologicalComplex _).map œÜ  := by
  rw [‚Üê cancel_epi (mapBifunctorSingle‚ÇÅIso F X‚ÇÅ K‚ÇÇ).inv, Iso.inv_hom_id_assoc,
    mapBifunctorSingle‚ÇÅIso_inv_naturality_assoc, Iso.inv_hom_id, Category.comp_id]

end

section

variable [HasZeroObject C‚ÇÇ] (X‚ÇÇ : C‚ÇÇ)

@[simps! -isSimp hom inv]
noncomputable def mapBifunctorSingle‚ÇÇIso
    (K‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§) :
    mapBifunctor K‚ÇÅ ((single C‚ÇÇ (.up ‚Ñ§) 0).obj X‚ÇÇ) F (.up ‚Ñ§) ‚âÖ
      ((F.flip.obj X‚ÇÇ).mapHomologicalComplex (.up ‚Ñ§)).obj K‚ÇÅ :=
  (mapBifunctorFlipIso _ _ _ _).symm ‚â™‚â´ mapBifunctorSingle‚ÇÅIso F.flip X‚ÇÇ K‚ÇÅ

attribute [local simp] mapBifunctorSingle‚ÇÇIso_inv

@[reassoc (attr := simp)]
lemma mapBifunctorSingle‚ÇÇIso_inv_naturality {K‚ÇÅ K‚ÇÅ' : CochainComplex C‚ÇÅ ‚Ñ§} (œÜ : K‚ÇÅ ‚ü∂ K‚ÇÅ') :
    (mapBifunctorSingle‚ÇÇIso F X‚ÇÇ K‚ÇÅ).inv ‚â´ mapBifunctorMap œÜ (ùüô _) F (.up ‚Ñ§) =
      ((F.flip.obj X‚ÇÇ).mapHomologicalComplex _).map œÜ ‚â´ (mapBifunctorSingle‚ÇÇIso F X‚ÇÇ K‚ÇÅ').inv := by
  aesop_cat

@[reassoc (attr := simp)]
lemma mapBifunctorSingle‚ÇÇIso_hom_naturality {K‚ÇÅ K‚ÇÅ' : CochainComplex C‚ÇÅ ‚Ñ§} (œÜ : K‚ÇÅ ‚ü∂ K‚ÇÅ') :
    mapBifunctorMap œÜ (ùüô _) F (.up ‚Ñ§) ‚â´ (mapBifunctorSingle‚ÇÇIso F X‚ÇÇ K‚ÇÅ').hom =
      (mapBifunctorSingle‚ÇÇIso F X‚ÇÇ K‚ÇÅ).hom ‚â´ ((F.flip.obj X‚ÇÇ).mapHomologicalComplex _).map œÜ := by
  rw [‚Üê cancel_epi (mapBifunctorSingle‚ÇÇIso F X‚ÇÇ K‚ÇÅ).inv, Iso.inv_hom_id_assoc,
    mapBifunctorSingle‚ÇÇIso_inv_naturality_assoc, Iso.inv_hom_id, Category.comp_id]

end

variable [‚àÄ (K‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§) (K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§),
    HasMapBifunctor K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§)]

@[simps! hom_app inv_app]
noncomputable def bifunctorMapHomologicalComplexObjSingleIso
    [HasZeroObject C‚ÇÅ] (X‚ÇÅ : C‚ÇÅ) :
    (F.bifunctorMapHomologicalComplex (.up ‚Ñ§) (.up ‚Ñ§) (.up ‚Ñ§)).obj
        ((single C‚ÇÅ (.up ‚Ñ§) 0).obj X‚ÇÅ) ‚âÖ
          (F.obj X‚ÇÅ).mapHomologicalComplex (.up ‚Ñ§) :=
  NatIso.ofComponents (mapBifunctorSingle‚ÇÅIso F X‚ÇÅ)

@[simps! hom_app inv_app]
noncomputable def bifunctorMapHomologicalComplexFlipObjSingleIso
    [HasZeroObject C‚ÇÇ] (X‚ÇÇ : C‚ÇÇ) :
    (F.bifunctorMapHomologicalComplex (.up ‚Ñ§) (.up ‚Ñ§) (.up ‚Ñ§)).flip.obj
        ((single C‚ÇÇ (.up ‚Ñ§) 0).obj X‚ÇÇ) ‚âÖ
          (F.flip.obj X‚ÇÇ).mapHomologicalComplex (.up ‚Ñ§) :=
  NatIso.ofComponents (mapBifunctorSingle‚ÇÇIso F X‚ÇÇ)

end CochainComplex
