/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.Additive
import Mathlib.Algebra.Homology.ShortComplex.Exact
import Mathlib.Algebra.Homology.ShortComplex.Preadditive
import Mathlib.Tactic.Linarith

/-!
# The short complexes attached to homological complexes

In this file, we define a functor
`shortComplexFunctor C c i : HomologicalComplex C c ‚•§ ShortComplex C`.
By definition, the image of a homological complex `K` by this functor
is the short complex `K.X (c.prev i) ‚ü∂ K.X i ‚ü∂ K.X (c.next i)`.

The homology `K.homology i` of a homological complex `K` in degree `i` is defined as
the homology of the short complex `(shortComplexFunctor C c i).obj K`, which can be
abbreviated as `K.sc i`.

-/

open CategoryTheory Category Limits

namespace HomologicalComplex

variable (C : Type*) [Category C] [HasZeroMorphisms C] {Œπ : Type*} (c : ComplexShape Œπ)

/-- The functor `HomologicalComplex C c ‚•§ ShortComplex C` which sends a homological
complex `K` to the short complex `K.X i ‚ü∂ K.X j ‚ü∂ K.X k` for arbitrary indices `i`, `j` and `k`. -/
@[simps]
def shortComplexFunctor' (i j k : Œπ) : HomologicalComplex C c ‚•§ ShortComplex C where
  obj K := ShortComplex.mk (K.d i j) (K.d j k) (K.d_comp_d i j k)
  map f :=
    { œÑ‚ÇÅ := f.f i
      œÑ‚ÇÇ := f.f j
      œÑ‚ÇÉ := f.f k }

/-- The functor `HomologicalComplex C c ‚•§ ShortComplex C` which sends a homological
complex `K` to the short complex `K.X (c.prev i) ‚ü∂ K.X i ‚ü∂ K.X (c.next i)`. -/
@[simps!]
noncomputable def shortComplexFunctor (i : Œπ) :=
  shortComplexFunctor' C c (c.prev i) i (c.next i)

/-- The natural isomorphism `shortComplexFunctor C c j ‚âÖ shortComplexFunctor' C c i j k`
when `c.prev j = i` and `c.next j = k`. -/
@[simps!]
noncomputable def natIsoSc' (i j k : Œπ) (hi : c.prev j = i) (hk : c.next j = k) :
    shortComplexFunctor C c j ‚âÖ shortComplexFunctor' C c i j k :=
  NatIso.ofComponents (fun K => ShortComplex.isoMk (K.XIsoOfEq hi) (Iso.refl _) (K.XIsoOfEq hk)
    (by aesop_cat) (by aesop_cat)) (by aesop_cat)

variable {C c}

section

variable (K L M : HomologicalComplex C c) (œÜ : K ‚ü∂ L) (œà : L ‚ü∂ M) (i j k : Œπ)

/-- The short complex `K.X i ‚ü∂ K.X j ‚ü∂ K.X k` for arbitrary indices `i`, `j` and `k`. -/
abbrev sc' := (shortComplexFunctor' C c i j k).obj K

/-- The short complex `K.X (c.prev i) ‚ü∂ K.X i ‚ü∂ K.X (c.next i)`. -/
noncomputable abbrev sc := (shortComplexFunctor C c i).obj K

/-- The canonical isomorphism `K.sc j ‚âÖ K.sc' i j k` when `c.prev j = i` and `c.next j = k`. -/
noncomputable abbrev isoSc' (hi : c.prev j = i) (hk : c.next j = k) :
    K.sc j ‚âÖ K.sc' i j k := (natIsoSc' C c i j k hi hk).app K

/-- A homological complex `K` has homology in degree `i` if the associated
short complex `K.sc i` has. -/
abbrev HasHomology := (K.sc i).HasHomology

variable [K.HasHomology i]

/-- The homology in degree `i` of a homological complex. -/
noncomputable def homology := (K.sc i).homology

/-- Comparison isomorphism between the homology for the two homology API. -/
noncomputable def homology'IsoHomology {A : Type*} [Category A] [Abelian A]
    (K : HomologicalComplex A c) (i : Œπ) :
    K.homology' i ‚âÖ K.homology i :=
  (K.sc i).homology'IsoHomology

/-- The cycles in degree `i` of a homological complex. -/
noncomputable def cycles := (K.sc i).cycles

/-- The inclusion of the cycles of a homological complex. -/
noncomputable def iCycles : K.cycles i ‚ü∂ K.X i := (K.sc i).iCycles

/-- The homology class map from cycles to the homology of a homological complex. -/
noncomputable def homologyœÄ : K.cycles i ‚ü∂ K.homology i := (K.sc i).homologyœÄ

variable {i}

/-- The morphism to `K.cycles i` that is induced by a "cycle", i.e. a morphism
to `K.X i` whose postcomposition with the differential is zero. -/
noncomputable def liftCycles {A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.next i = j)
    (hk : k ‚â´ K.d i j = 0) : A ‚ü∂ K.cycles i :=
  (K.sc i).liftCycles k (by subst hj; exact hk)

/-- The morphism to `K.cycles i` that is induced by a "cycle", i.e. a morphism
to `K.X i` whose postcomposition with the differential is zero. -/
@[reducible]
noncomputable def liftCycles' {A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.Rel i j)
    (hk : k ‚â´ K.d i j = 0) : A ‚ü∂ K.cycles i :=
  K.liftCycles k j (c.next_eq' hj) hk

@[reassoc (attr := simp)]
lemma liftCycles_i {A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.next i = j)
    (hk : k ‚â´ K.d i j = 0) : K.liftCycles k j hj hk ‚â´ K.iCycles i = k := by
  dsimp [liftCycles, iCycles]
  simp

variable (i)

/-- The map `K.X i ‚ü∂ K.cycles j` induced by the differential `K.d i j`. -/
noncomputable def toCycles [K.HasHomology j] :
    K.X i ‚ü∂ K.cycles j :=
  K.liftCycles (K.d i j) (c.next j) rfl (K.d_comp_d _ _ _)

@[reassoc (attr := simp)]
lemma iCycles_d : K.iCycles i ‚â´ K.d i j = 0 := by
  by_cases hij : c.Rel i j
  ¬∑ obtain rfl := c.next_eq' hij
    exact (K.sc i).iCycles_g
  ¬∑ rw [K.shape _ _ hij, comp_zero]

/-- `K.cycles i` is the kernel of `K.d i j` when `c.next i = j`. -/
noncomputable def cyclesIsKernel (hj : c.next i = j) :
    IsLimit (KernelFork.ofŒπ (K.iCycles i) (K.iCycles_d i j)) := by
  obtain rfl := hj
  exact (K.sc i).cyclesIsKernel

@[reassoc (attr := simp)]
lemma toCycles_i [K.HasHomology j] :
    K.toCycles i j ‚â´ K.iCycles j = K.d i j :=
  liftCycles_i _ _ _ _ _

instance : Mono (K.iCycles i) := by
  dsimp only [iCycles]
  infer_instance

instance : Epi (K.homologyœÄ i) := by
  dsimp only [homologyœÄ]
  infer_instance

@[reassoc (attr := simp)]
lemma d_toCycles [K.HasHomology k] :
    K.d i j ‚â´ K.toCycles j k = 0 := by
  simp only [‚Üê cancel_mono (K.iCycles k), assoc, toCycles_i, d_comp_d, zero_comp]

variable {i}

@[reassoc]
lemma comp_liftCycles {A' A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.next i = j)
    (hk : k ‚â´ K.d i j = 0) (Œ± : A' ‚ü∂ A) :
    Œ± ‚â´ K.liftCycles k j hj hk = K.liftCycles (Œ± ‚â´ k) j hj (by rw [assoc, hk, comp_zero]) := by
  simp only [‚Üê cancel_mono (K.iCycles i), assoc, liftCycles_i]

@[reassoc]
lemma liftCycles_homologyœÄ_eq_zero_of_boundary {A : C} (k : A ‚ü∂ K.X i) (j : Œπ)
    (hj : c.next i = j) {i' : Œπ} (x : A ‚ü∂ K.X i') (hx : k = x ‚â´ K.d i' i) :
    K.liftCycles k j hj (by rw [hx, assoc, K.d_comp_d, comp_zero]) ‚â´ K.homologyœÄ i = 0 := by
  by_cases h : c.Rel i' i
  ¬∑ obtain rfl := c.prev_eq' h
    exact (K.sc i).liftCycles_homologyœÄ_eq_zero_of_boundary _ x hx
  ¬∑ have : liftCycles K k j hj (by rw [hx, assoc, K.d_comp_d, comp_zero]) = 0 := by
      rw [K.shape _ _ h, comp_zero] at hx
      rw [‚Üê cancel_mono (K.iCycles i), zero_comp, liftCycles_i, hx]
    rw [this, zero_comp]

variable (i)

@[reassoc (attr := simp)]
lemma toCycles_comp_homologyœÄ [K.HasHomology j] :
    K.toCycles i j ‚â´ K.homologyœÄ j = 0 :=
  K.liftCycles_homologyœÄ_eq_zero_of_boundary (K.d i j) (c.next j) rfl (ùüô _) (by simp)

/-- `K.homology j` is the cokernel of `K.toCycles i j : K.X i ‚ü∂ K.cycles j`
when `c.prev j = i`. -/
noncomputable def homologyIsCokernel (hi : c.prev j = i) [K.HasHomology j] :
    IsColimit (CokernelCofork.ofœÄ (K.homologyœÄ j) (K.toCycles_comp_homologyœÄ i j)) := by
  subst hi
  exact ((K.sc j).homologyIsCokernel)

/-- The opcycles in degree `i` of a homological complex. -/
noncomputable def opcycles := (K.sc i).opcycles

/-- The projection to the opcycles of a homological complex. -/
noncomputable def pOpcycles : K.X i ‚ü∂ K.opcycles i := (K.sc i).pOpcycles

/-- The inclusion map of the homology of a homological complex into its opcycles. -/
noncomputable def homologyŒπ : K.homology i ‚ü∂ K.opcycles i := (K.sc i).homologyŒπ

variable {i}

/-- The morphism from `K.opcycles i` that is induced by an "opcycle", i.e. a morphism
from `K.X i` whose precomposition with the differential is zero. -/
noncomputable def descOpcycles {A : C} (k : K.X i ‚ü∂ A) (j : Œπ) (hj : c.prev i = j)
    (hk : K.d j i ‚â´ k = 0) : K.opcycles i ‚ü∂ A :=
  (K.sc i).descOpcycles k (by subst hj; exact hk)

/-- The morphism from `K.opcycles i` that is induced by an "opcycle", i.e. a morphism
from `K.X i` whose precomposition with the differential is zero. -/
@[reducible]
noncomputable def descOpcycles' {A : C} (k : K.X i ‚ü∂ A) (j : Œπ) (hj : c.Rel j i)
    (hk : K.d j i ‚â´ k = 0) : K.opcycles i ‚ü∂ A :=
  K.descOpcycles k j (c.prev_eq' hj) hk

@[reassoc (attr := simp)]
lemma p_descOpcycles {A : C} (k : K.X i ‚ü∂ A) (j : Œπ) (hj : c.prev i = j)
    (hk : K.d j i ‚â´ k = 0) : K.pOpcycles i ‚â´ K.descOpcycles k j hj hk = k := by
  dsimp [descOpcycles, pOpcycles]
  simp

variable (i)

/-- The map `K.opcycles i ‚ü∂ K.X j` induced by the differential `K.d i j`. -/
noncomputable def fromOpcycles :
  K.opcycles i ‚ü∂ K.X j  :=
  K.descOpcycles (K.d i j) (c.prev i) rfl (K.d_comp_d _ _ _)

@[reassoc (attr := simp)]
lemma d_pOpcycles [K.HasHomology j] : K.d i j ‚â´ K.pOpcycles j = 0 := by
  by_cases hij : c.Rel i j
  ¬∑ obtain rfl := c.prev_eq' hij
    exact (K.sc j).f_pOpcycles
  ¬∑ rw [K.shape _ _ hij, zero_comp]

/-- `K.opcycles j` is the cokernel of `K.d i j` when `c.prev j = i`. -/
noncomputable def opcyclesIsCokernel (hi : c.prev j = i) [K.HasHomology j] :
    IsColimit (CokernelCofork.ofœÄ (K.pOpcycles j) (K.d_pOpcycles i j)) := by
  obtain rfl := hi
  exact (K.sc j).opcyclesIsCokernel

@[reassoc (attr := simp)]
lemma p_fromOpcycles :
    K.pOpcycles i ‚â´ K.fromOpcycles i j = K.d i j :=
  p_descOpcycles _ _ _ _ _

instance : Epi (K.pOpcycles i) := by
  dsimp only [pOpcycles]
  infer_instance

instance : Mono (K.homologyŒπ i) := by
  dsimp only [homologyŒπ]
  infer_instance

@[reassoc (attr := simp)]
lemma fromOpcycles_d :
    K.fromOpcycles i j ‚â´ K.d j k = 0 := by
  simp only [‚Üê cancel_epi (K.pOpcycles i), p_fromOpcycles_assoc, d_comp_d, comp_zero]

variable {i}

@[reassoc]
lemma descOpcycles_comp {A A' : C} (k : K.X i ‚ü∂ A) (j : Œπ) (hj : c.prev i = j)
    (hk : K.d j i ‚â´ k = 0) (Œ± : A ‚ü∂ A') :
    K.descOpcycles k j hj hk ‚â´ Œ± = K.descOpcycles (k ‚â´ Œ±) j hj
      (by rw [reassoc_of% hk, zero_comp]) := by
  simp only [‚Üê cancel_epi (K.pOpcycles i), p_descOpcycles_assoc, p_descOpcycles]

@[reassoc]
lemma homologyŒπ_descOpcycles_eq_zero_of_boundary {A : C} (k : K.X i ‚ü∂ A) (j : Œπ)
    (hj : c.prev i = j) {i' : Œπ} (x : K.X i' ‚ü∂ A) (hx : k = K.d i i' ‚â´ x) :
    K.homologyŒπ i ‚â´ K.descOpcycles k j hj (by rw [hx, K.d_comp_d_assoc, zero_comp]) = 0 := by
  by_cases h : c.Rel i i'
  ¬∑ obtain rfl := c.next_eq' h
    exact (K.sc i).homologyŒπ_descOpcycles_eq_zero_of_boundary _ x hx
  ¬∑ have : K.descOpcycles k j hj (by rw [hx, K.d_comp_d_assoc, zero_comp]) = 0 := by
      rw [K.shape _ _ h, zero_comp] at hx
      rw [‚Üê cancel_epi (K.pOpcycles i), comp_zero, p_descOpcycles, hx]
    rw [this, comp_zero]

variable (i)

@[reassoc (attr := simp)]
lemma homologyŒπ_comp_fromOpcycles :
    K.homologyŒπ i ‚â´ K.fromOpcycles i j = 0 :=
  K.homologyŒπ_descOpcycles_eq_zero_of_boundary (K.d i j) _ rfl (ùüô _) (by simp)

/-- `K.homology i` is the kernel of `K.fromOpcycles i j : K.opcycles i ‚ü∂ K.X j`
when `c.next i = j`. -/
noncomputable def homologyIsKernel (hi : c.next i = j) :
    IsLimit (KernelFork.ofŒπ (K.homologyŒπ i) (K.homologyŒπ_comp_fromOpcycles i j)) := by
  subst hi
  exact (K.sc i).homologyIsKernel

variable {K L M}
variable [L.HasHomology i] [M.HasHomology i]

/-- The map `K.homology i ‚ü∂ L.homology i` induced by a morphism in `HomologicalComplex`. -/
noncomputable def homologyMap : K.homology i ‚ü∂ L.homology i :=
  ShortComplex.homologyMap ((shortComplexFunctor C c i).map œÜ)

/-- The map `K.cycles i ‚ü∂ L.cycles i` induced by a morphism in `HomologicalComplex`. -/
noncomputable def cyclesMap : K.cycles i ‚ü∂ L.cycles i :=
  ShortComplex.cyclesMap ((shortComplexFunctor C c i).map œÜ)

/-- The map `K.opcycles i ‚ü∂ L.opcycles i` induced by a morphism in `HomologicalComplex`. -/
noncomputable def opcyclesMap : K.opcycles i ‚ü∂ L.opcycles i :=
  ShortComplex.opcyclesMap ((shortComplexFunctor C c i).map œÜ)

@[reassoc (attr := simp)]
lemma cyclesMap_i : cyclesMap œÜ i ‚â´ L.iCycles i = K.iCycles i ‚â´ œÜ.f i :=
  ShortComplex.cyclesMap_i _

@[reassoc (attr := simp)]
lemma p_opcyclesMap : K.pOpcycles i ‚â´ opcyclesMap œÜ i = œÜ.f i ‚â´ L.pOpcycles i :=
  ShortComplex.p_opcyclesMap _

instance [Mono (œÜ.f i)] : Mono (cyclesMap œÜ i) := mono_of_mono_fac (cyclesMap_i œÜ i)

attribute [local instance] epi_comp

instance [Epi (œÜ.f i)] : Epi (opcyclesMap œÜ i) := epi_of_epi_fac (p_opcyclesMap œÜ i)

variable (K)

@[simp]
lemma homologyMap_id : homologyMap (ùüô K) i = ùüô _ :=
  ShortComplex.homologyMap_id _

@[simp]
lemma cyclesMap_id : cyclesMap (ùüô K) i = ùüô _ :=
  ShortComplex.cyclesMap_id _

@[simp]
lemma opcyclesMap_id : opcyclesMap (ùüô K) i = ùüô _ :=
  ShortComplex.opcyclesMap_id _

variable {K}

@[reassoc]
lemma homologyMap_comp : homologyMap (œÜ ‚â´ œà) i = homologyMap œÜ i ‚â´ homologyMap œà i := by
  dsimp [homologyMap]
  rw [Functor.map_comp, ShortComplex.homologyMap_comp]

@[reassoc]
lemma cyclesMap_comp : cyclesMap (œÜ ‚â´ œà) i = cyclesMap œÜ i ‚â´ cyclesMap œà i := by
  dsimp [cyclesMap]
  rw [Functor.map_comp, ShortComplex.cyclesMap_comp]

@[reassoc]
lemma opcyclesMap_comp : opcyclesMap (œÜ ‚â´ œà) i = opcyclesMap œÜ i ‚â´ opcyclesMap œà i := by
  dsimp [opcyclesMap]
  rw [Functor.map_comp, ShortComplex.opcyclesMap_comp]

variable (K L)

@[simp]
lemma homologyMap_zero : homologyMap (0 : K ‚ü∂ L) i = 0 :=
  ShortComplex.homologyMap_zero _ _

@[simp]
lemma cyclesMap_zero : cyclesMap (0 : K ‚ü∂ L) i = 0 :=
  ShortComplex.cyclesMap_zero _ _

@[simp]
lemma opcyclesMap_zero : opcyclesMap (0 : K ‚ü∂ L) i = 0 :=
  ShortComplex.opcyclesMap_zero _ _

variable {K L}

@[reassoc (attr := simp)]
lemma homologyœÄ_naturality :
    K.homologyœÄ i ‚â´ homologyMap œÜ i = cyclesMap œÜ i ‚â´ L.homologyœÄ i :=
  ShortComplex.homologyœÄ_naturality _

@[reassoc (attr := simp)]
lemma homologyŒπ_naturality :
    homologyMap œÜ i ‚â´ L.homologyŒπ i = K.homologyŒπ i ‚â´ opcyclesMap œÜ i :=
  ShortComplex.homologyŒπ_naturality _

@[reassoc (attr := simp)]
lemma homology_œÄ_Œπ :
    K.homologyœÄ i ‚â´ K.homologyŒπ i = K.iCycles i ‚â´ K.pOpcycles i :=
  (K.sc i).homology_œÄ_Œπ

variable {i}

@[reassoc (attr := simp)]
lemma opcyclesMap_comp_descOpcycles {A : C} (k : L.X i ‚ü∂ A) (j : Œπ) (hj : c.prev i = j)
    (hk : L.d j i ‚â´ k = 0) (œÜ : K ‚ü∂ L) :
    opcyclesMap œÜ i ‚â´ L.descOpcycles k j hj hk = K.descOpcycles (œÜ.f i ‚â´ k) j hj
      (by rw [‚Üê œÜ.comm_assoc, hk, comp_zero]) := by
  simp only [‚Üê cancel_epi (K.pOpcycles i), p_opcyclesMap_assoc, p_descOpcycles]

@[reassoc (attr := simp)]
lemma liftCycles_comp_cyclesMap {A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.next i = j)
    (hk : k ‚â´ K.d i j = 0) (œÜ : K ‚ü∂ L) :
    K.liftCycles k j hj hk ‚â´ cyclesMap œÜ i = L.liftCycles (k ‚â´ œÜ.f i) j hj
      (by rw [assoc, œÜ.comm, reassoc_of% hk, zero_comp]) := by
  simp only [‚Üê cancel_mono (L.iCycles i), assoc, cyclesMap_i, liftCycles_i_assoc, liftCycles_i]

section

variable (C c i)

attribute [local simp] homologyMap_comp cyclesMap_comp opcyclesMap_comp

/-- The `i`th homology functor `HomologicalComplex C c ‚•§ C`. -/
@[simps]
noncomputable def homologyFunctor [CategoryWithHomology C] : HomologicalComplex C c ‚•§ C where
  obj K := K.homology i
  map f := homologyMap f i

/-- The homology functor to graded objects. -/
@[simps]
noncomputable def gradedHomologyFunctor [CategoryWithHomology C] :
    HomologicalComplex C c ‚•§ GradedObject Œπ C where
  obj K i := K.homology i
  map f i := homologyMap f i

/-- The `i`th cycles functor `HomologicalComplex C c ‚•§ C`. -/
@[simps]
noncomputable def cyclesFunctor [CategoryWithHomology C] : HomologicalComplex C c ‚•§ C where
  obj K := K.cycles i
  map f := cyclesMap f i

/-- The `i`th opcycles functor `HomologicalComplex C c ‚•§ C`. -/
@[simps]
noncomputable def opcyclesFunctor [CategoryWithHomology C] : HomologicalComplex C c ‚•§ C where
  obj K := K.opcycles i
  map f := opcyclesMap f i

/-- The natural transformation `K.homologyœÄ i : K.cycles i ‚ü∂ K.homology i`
for all `K : HomologicalComplex C c`. -/
@[simps]
noncomputable def natTransHomologyœÄ [CategoryWithHomology C] :
    cyclesFunctor C c i ‚ü∂ homologyFunctor C c i where
  app K := K.homologyœÄ i

/-- The natural transformation `K.homologyŒπ i : K.homology i ‚ü∂ K.opcycles i`
for all `K : HomologicalComplex C c`. -/
@[simps]
noncomputable def natTransHomologyŒπ [CategoryWithHomology C] :
    homologyFunctor C c i ‚ü∂ opcyclesFunctor C c i where
  app K := K.homologyŒπ i

/-- The natural isomorphism `K.homology i ‚âÖ (K.sc i).homology`
for all homological complexes `K`. -/
@[simps!]
noncomputable def homologyFunctorIso [CategoryWithHomology C] :
    homologyFunctor C c i ‚âÖ
      shortComplexFunctor C c i ‚ãô ShortComplex.homologyFunctor C :=
  Iso.refl _

/-- The natural isomorphism `K.homology j ‚âÖ (K.sc' i j k).homology`
for all homological complexes `K` when `c.prev j = i` and `c.next j = k`. -/
noncomputable def homologyFunctorIso' [CategoryWithHomology C]
    (hi : c.prev j = i) (hk : c.next j = k) :
    homologyFunctor C c j ‚âÖ
      shortComplexFunctor' C c i j k ‚ãô ShortComplex.homologyFunctor C :=
  homologyFunctorIso C c j ‚â™‚â´ isoWhiskerRight (natIsoSc' C c i j k hi hk) _

instance [CategoryWithHomology C] : (homologyFunctor C c i).PreservesZeroMorphisms where
instance [CategoryWithHomology C] : (opcyclesFunctor C c i).PreservesZeroMorphisms where
instance [CategoryWithHomology C] : (cyclesFunctor C c i).PreservesZeroMorphisms where

end

end

variable (K : HomologicalComplex C c) (i j k : Œπ)

section

variable (hj : c.next i = j) (h : K.d i j = 0) [K.HasHomology i]

lemma isIso_iCycles : IsIso (K.iCycles i) := by
  subst hj
  exact ShortComplex.isIso_iCycles _ h

/-- The canonical isomorphism `K.cycles i ‚âÖ K.X i` when the differential from `i` is zero. -/
@[simps! hom]
noncomputable def iCyclesIso : K.cycles i ‚âÖ K.X i :=
  have := K.isIso_iCycles i j hj h
  asIso (K.iCycles i)

@[reassoc (attr := simp)]
lemma iCyclesIso_hom_inv_id :
    K.iCycles i ‚â´ (K.iCyclesIso i j hj h).inv = ùüô _ :=
  (K.iCyclesIso i j hj h).hom_inv_id

@[reassoc (attr := simp)]
lemma iCyclesIso_inv_hom_id :
    (K.iCyclesIso i j hj h).inv ‚â´ K.iCycles i = ùüô _ :=
  (K.iCyclesIso i j hj h).inv_hom_id

lemma isIso_homologyŒπ : IsIso (K.homologyŒπ i) :=
  ShortComplex.isIso_homologyŒπ _ (by aesop_cat)

/-- The canonical isomorphism `K.homology i ‚âÖ K.opcycles i`
when the differential from `i` is zero. -/
@[simps! hom]
noncomputable def isoHomologyŒπ : K.homology i ‚âÖ K.opcycles i :=
  have := K.isIso_homologyŒπ i j hj h
  asIso (K.homologyŒπ i)

@[reassoc (attr := simp)]
lemma isoHomologyŒπ_hom_inv_id :
    K.homologyŒπ i ‚â´ (K.isoHomologyŒπ i j hj h).inv = ùüô _ :=
  (K.isoHomologyŒπ i j hj h).hom_inv_id

@[reassoc (attr := simp)]
lemma isoHomologyŒπ_inv_hom_id :
    (K.isoHomologyŒπ i j hj h).inv ‚â´ K.homologyŒπ i = ùüô _ :=
  (K.isoHomologyŒπ i j hj h).inv_hom_id

end

section

variable (hi : c.prev j = i) (h : K.d i j = 0) [K.HasHomology j]

lemma isIso_pOpcycles : IsIso (K.pOpcycles j) := by
  obtain rfl := hi
  exact ShortComplex.isIso_pOpcycles _ h

/-- The canonical isomorphism `K.X j ‚âÖ K.opCycles j` when the differential to `j` is zero. -/
@[simps! hom]
noncomputable def pOpcyclesIso : K.X j ‚âÖ K.opcycles j :=
  have := K.isIso_pOpcycles i j hi h
  asIso (K.pOpcycles j)

@[reassoc (attr := simp)]
lemma pOpcyclesIso_hom_inv_id :
    K.pOpcycles j ‚â´ (K.pOpcyclesIso i j hi h).inv = ùüô _ :=
  (K.pOpcyclesIso i j hi h).hom_inv_id

@[reassoc (attr := simp)]
lemma pOpcyclesIso_inv_hom_id :
    (K.pOpcyclesIso i j hi h).inv ‚â´ K.pOpcycles j = ùüô _ :=
  (K.pOpcyclesIso i j hi h).inv_hom_id

lemma isIso_homologyœÄ : IsIso (K.homologyœÄ j) :=
  ShortComplex.isIso_homologyœÄ _ (by aesop_cat)

/-- The canonical isomorphism `K.cycles j ‚âÖ K.homology j`
when the differential to `j` is zero. -/
@[simps! hom]
noncomputable def isoHomologyœÄ : K.cycles j ‚âÖ K.homology j :=
  have := K.isIso_homologyœÄ i j hi h
  asIso (K.homologyœÄ j)

@[reassoc (attr := simp)]
lemma isoHomologyœÄ_hom_inv_id :
    K.homologyœÄ j ‚â´ (K.isoHomologyœÄ i j hi h).inv = ùüô _ :=
  (K.isoHomologyœÄ i j hi h).hom_inv_id

@[reassoc (attr := simp)]
lemma isoHomologyœÄ_inv_hom_id :
    (K.isoHomologyœÄ i j hi h).inv ‚â´ K.homologyœÄ j = ùüô _ :=
  (K.isoHomologyœÄ i j hi h).inv_hom_id

end

/-- A homological complex `K` is exact at `i` if the short complex `K.sc i` is exact. -/
def ExactAt := (K.sc i).Exact

lemma exactAt_iff :
    K.ExactAt i ‚Üî (K.sc i).Exact := by rfl

lemma exactAt_iff' (hi : c.prev j = i) (hk : c.next j = k) :
    K.ExactAt j ‚Üî (K.sc' i j k).Exact :=
  ShortComplex.exact_iff_of_iso (K.isoSc' i j k hi hk)

lemma exactAt_iff_isZero_homology [K.HasHomology i] :
    K.ExactAt i ‚Üî IsZero (K.homology i) := by
  dsimp [homology]
  rw [exactAt_iff, ShortComplex.exact_iff_isZero_homology]

end HomologicalComplex

namespace ChainComplex

variable {C : Type*} [Category C] [HasZeroMorphisms C]
  (K L : ChainComplex C ‚Ñï) (œÜ : K ‚ü∂ L) [K.HasHomology 0]

instance isIso_homologyŒπ‚ÇÄ :
    IsIso (K.homologyŒπ 0) :=
  K.isIso_homologyŒπ 0 _ rfl (by simp)

/-- The canonical isomorphism `K.homology 0 ‚âÖ K.opcycles 0` for a chain complex `K`
indexed by `‚Ñï`. -/
noncomputable abbrev isoHomologyŒπ‚ÇÄ :
  K.homology 0 ‚âÖ K.opcycles 0 := K.isoHomologyŒπ 0 _ rfl (by simp)

variable {K L}

@[reassoc (attr := simp)]
lemma isoHomologyŒπ‚ÇÄ_inv_naturality [L.HasHomology 0] :
    K.isoHomologyŒπ‚ÇÄ.inv ‚â´ HomologicalComplex.homologyMap œÜ 0 =
      HomologicalComplex.opcyclesMap œÜ 0 ‚â´ L.isoHomologyŒπ‚ÇÄ.inv := by
  simp only [assoc, ‚Üê cancel_mono (L.homologyŒπ 0),
    HomologicalComplex.homologyŒπ_naturality, HomologicalComplex.isoHomologyŒπ_inv_hom_id_assoc,
    HomologicalComplex.isoHomologyŒπ_inv_hom_id, comp_id]

end ChainComplex

namespace CochainComplex

variable {C : Type*} [Category C] [HasZeroMorphisms C]
  (K L : CochainComplex C ‚Ñï) (œÜ : K ‚ü∂ L) [K.HasHomology 0]

instance isIso_homologyœÄ‚ÇÄ :
    IsIso (K.homologyœÄ 0) :=
  K.isIso_homologyœÄ _ 0 rfl (by simp)

/-- The canonical isomorphism `K.cycles 0 ‚âÖ K.homology 0` for a cochain complex `K`
indexed by `‚Ñï`. -/
noncomputable abbrev isoHomologyœÄ‚ÇÄ :
  K.cycles 0 ‚âÖ K.homology 0 := K.isoHomologyœÄ _ 0 rfl (by simp)

variable {K L}

@[reassoc (attr := simp)]
lemma isoHomologyœÄ‚ÇÄ_inv_naturality [L.HasHomology 0] :
    HomologicalComplex.homologyMap œÜ 0 ‚â´ L.isoHomologyœÄ‚ÇÄ.inv =
      K.isoHomologyœÄ‚ÇÄ.inv ‚â´ HomologicalComplex.cyclesMap œÜ 0 := by
  simp only [‚Üê cancel_epi (K.homologyœÄ 0), HomologicalComplex.homologyœÄ_naturality_assoc,
    HomologicalComplex.isoHomologyœÄ_hom_inv_id, comp_id,
    HomologicalComplex.isoHomologyœÄ_hom_inv_id_assoc]

end CochainComplex

namespace HomologicalComplex

variable {C Œπ : Type*} [Category C] [Preadditive C] {c : ComplexShape Œπ}
  {K L : HomologicalComplex C c} {f g : K ‚ü∂ L}

variable (œÜ œà : K ‚ü∂ L) (i : Œπ) [K.HasHomology i] [L.HasHomology i]

@[simp]
lemma homologyMap_neg : homologyMap (-œÜ) i = -homologyMap œÜ i := by
  dsimp [homologyMap]
  rw [‚Üê ShortComplex.homologyMap_neg]
  rfl

@[simp]
lemma homologyMap_add : homologyMap (œÜ + œà) i = homologyMap œÜ i + homologyMap œà i := by
  dsimp [homologyMap]
  rw [‚Üê ShortComplex.homologyMap_add]
  rfl

@[simp]
lemma homologyMap_sub : homologyMap (œÜ - œà) i = homologyMap œÜ i - homologyMap œà i := by
  dsimp [homologyMap]
  rw [‚Üê ShortComplex.homologyMap_sub]
  rfl

instance [CategoryWithHomology C] : (homologyFunctor C c i).Additive where

end HomologicalComplex

namespace CochainComplex

variable {C : Type*} [Category C] [Abelian C]

lemma isIso_liftCycles_iff (K : CochainComplex C ‚Ñï) {X : C} (œÜ : X ‚ü∂ K.X 0)
    [K.HasHomology 0] (hœÜ : œÜ ‚â´ K.d 0 1 = 0) :
    IsIso (K.liftCycles œÜ 1 (by simp) hœÜ) ‚Üî
      (ShortComplex.mk _ _ hœÜ).Exact ‚àß Mono œÜ := by
  suffices ‚àÄ (i : ‚Ñï) (hx : (ComplexShape.up ‚Ñï).next 0 = i)
    (hœÜ : œÜ ‚â´ K.d 0 i = 0), IsIso (K.liftCycles œÜ i hx hœÜ) ‚Üî
      (ShortComplex.mk _ _ hœÜ).Exact ‚àß Mono œÜ from this 1 (by simp) hœÜ
  rintro _ rfl hœÜ
  let Œ± : ShortComplex.mk (0 : X ‚ü∂ X) (0 : X ‚ü∂ X) (by simp) ‚ü∂ K.sc 0 :=
    { œÑ‚ÇÅ := 0
      œÑ‚ÇÇ := œÜ
      œÑ‚ÇÉ := 0 }
  exact (ShortComplex.quasiIso_iff_isIso_liftCycles Œ± rfl rfl (by simp)).symm.trans
    (ShortComplex.quasiIso_iff_of_zeros Œ± rfl rfl (by simp))

end CochainComplex

namespace ChainComplex

variable {C : Type*} [Category C] [Abelian C]

lemma isIso_descOpcycles_iff (K : ChainComplex C ‚Ñï) {X : C} (œÜ : K.X 0 ‚ü∂ X)
    [K.HasHomology 0] (hœÜ : K.d 1 0 ‚â´ œÜ = 0) :
    IsIso (K.descOpcycles œÜ 1 (by simp) hœÜ) ‚Üî
      (ShortComplex.mk _ _ hœÜ).Exact ‚àß Epi œÜ := by
  suffices ‚àÄ (i : ‚Ñï) (hx : (ComplexShape.down ‚Ñï).prev 0 = i)
    (hœÜ : K.d i 0 ‚â´ œÜ = 0), IsIso (K.descOpcycles œÜ i hx hœÜ) ‚Üî
      (ShortComplex.mk _ _ hœÜ).Exact ‚àß Epi œÜ from this 1 (by simp) hœÜ
  rintro _ rfl hœÜ
  let Œ± : K.sc 0 ‚ü∂ ShortComplex.mk (0 : X ‚ü∂ X) (0 : X ‚ü∂ X) (by simp) :=
    { œÑ‚ÇÅ := 0
      œÑ‚ÇÇ := œÜ
      œÑ‚ÇÉ := 0 }
  exact (ShortComplex.quasiIso_iff_isIso_descOpcycles Œ± (by simp) rfl rfl).symm.trans
    (ShortComplex.quasiIso_iff_of_zeros' Œ± (by simp) rfl rfl)

end ChainComplex

namespace HomologicalComplex

variable {C : Type*} [Category C] [HasZeroMorphisms C] {Œπ : Type*} {c : ComplexShape Œπ}
  (K : HomologicalComplex C c)
  (i j k : Œπ) (hi : c.prev j = i) (hk : c.next j = k)
  [K.HasHomology j] [(K.sc' i j k).HasHomology]

/-- The cycles of a homological complex in degree `j` can be computed
by specifying a choice of `c.prev j` and `c.next j`. -/
noncomputable def cyclesIsoSc' : K.cycles j ‚âÖ (K.sc' i j k).cycles :=
  ShortComplex.cyclesMapIso (K.isoSc' i j k hi hk)

@[reassoc (attr := simp)]
lemma cyclesIsoSc'_hom_iCycles :
    (K.cyclesIsoSc' i j k hi hk).hom ‚â´ (K.sc' i j k).iCycles = K.iCycles j := by
  dsimp [cyclesIsoSc']
  simp only [ShortComplex.cyclesMap_i, shortComplexFunctor_obj_X‚ÇÇ, shortComplexFunctor'_obj_X‚ÇÇ,
    natIsoSc'_hom_app_œÑ‚ÇÇ, comp_id]
  rfl

@[reassoc (attr := simp)]
lemma cyclesIsoSc'_inv_iCycles :
    (K.cyclesIsoSc' i j k hi hk).inv ‚â´ K.iCycles j = (K.sc' i j k).iCycles := by
  dsimp [cyclesIsoSc']
  erw [ShortComplex.cyclesMap_i]
  apply comp_id

@[reassoc (attr := simp)]
lemma toCycles_cyclesIsoSc'_hom :
    K.toCycles i j ‚â´ (K.cyclesIsoSc' i j k hi hk).hom = (K.sc' i j k).toCycles := by
  simp only [‚Üê cancel_mono (K.sc' i j k).iCycles, assoc, cyclesIsoSc'_hom_iCycles,
    toCycles_i, ShortComplex.toCycles_i, shortComplexFunctor'_obj_f]

/-- The homology of a homological complex in degree `j` can be computed
by specifying a choice of `c.prev j` and `c.next j`. -/
noncomputable def opcyclesIsoSc' : K.opcycles j ‚âÖ (K.sc' i j k).opcycles :=
  ShortComplex.opcyclesMapIso (K.isoSc' i j k hi hk)

@[reassoc (attr := simp)]
lemma pOpcycles_opcyclesIsoSc'_inv :
    (K.sc' i j k).pOpcycles ‚â´ (K.opcyclesIsoSc' i j k hi hk).inv = K.pOpcycles j := by
  dsimp [opcyclesIsoSc']
  simp only [ShortComplex.p_opcyclesMap, shortComplexFunctor'_obj_X‚ÇÇ, shortComplexFunctor_obj_X‚ÇÇ,
    natIsoSc'_inv_app_œÑ‚ÇÇ, id_comp]
  rfl

@[reassoc (attr := simp)]
lemma pOpcycles_opcyclesIsoSc'_hom :
    K.pOpcycles j ‚â´ (K.opcyclesIsoSc' i j k hi hk).hom = (K.sc' i j k).pOpcycles := by
  dsimp [opcyclesIsoSc']
  erw [ShortComplex.p_opcyclesMap]
  apply id_comp

@[reassoc (attr := simp)]
lemma opcyclesIsoSc'_inv_fromOpcycles :
    (K.opcyclesIsoSc' i j k hi hk).inv ‚â´ K.fromOpcycles j k =
      (K.sc' i j k).fromOpcycles := by
  simp only [‚Üê cancel_epi (K.sc' i j k).pOpcycles,  pOpcycles_opcyclesIsoSc'_inv_assoc,
    p_fromOpcycles, ShortComplex.p_fromOpcycles, shortComplexFunctor'_obj_g]

/-- The opcycles of a homological complex in degree `j` can be computed
by specifying a choice of `c.prev j` and `c.next j`. -/
noncomputable def homologyIsoSc' : K.homology j ‚âÖ (K.sc' i j k).homology :=
  ShortComplex.homologyMapIso (K.isoSc' i j k hi hk)

@[reassoc (attr := simp)]
lemma œÄ_homologyIsoSc'_hom :
    K.homologyœÄ j ‚â´ (K.homologyIsoSc' i j k hi hk).hom =
      (K.cyclesIsoSc' i j k hi hk).hom ‚â´ (K.sc' i j k).homologyœÄ := by
  apply ShortComplex.homologyœÄ_naturality

@[reassoc (attr := simp)]
lemma œÄ_homologyIsoSc'_inv :
    (K.sc' i j k).homologyœÄ ‚â´ (K.homologyIsoSc' i j k hi hk).inv =
      (K.cyclesIsoSc' i j k hi hk).inv ‚â´ K.homologyœÄ j := by
  apply ShortComplex.homologyœÄ_naturality

@[reassoc (attr := simp)]
lemma homologyIsoSc'_hom_Œπ :
    (K.homologyIsoSc' i j k hi hk).hom ‚â´ (K.sc' i j k).homologyŒπ =
      K.homologyŒπ j ‚â´ (K.opcyclesIsoSc' i j k hi hk).hom := by
  apply ShortComplex.homologyŒπ_naturality

@[reassoc (attr := simp)]
lemma homologyIsoSc'_inv_Œπ :
    (K.homologyIsoSc' i j k hi hk).inv ‚â´ K.homologyŒπ j =
      (K.sc' i j k).homologyŒπ ‚â´ (K.opcyclesIsoSc' i j k hi hk).inv := by
  apply ShortComplex.homologyŒπ_naturality

end HomologicalComplex
