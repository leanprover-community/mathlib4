/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.Algebra.Homology.ShortComplex.LeftHomology
import Mathlib.CategoryTheory.Limits.Opposites

/-! RightHomology of short complexes

In this file, we define the dual notions to those defined in
`Algebra.Homology.ShortComplex.LeftHomology`. In particular, if `S : ShortComplex C` is
a short complex consisting of two composable maps `f : X‚ÇÅ ‚ü∂ X‚ÇÇ` and `g : X‚ÇÇ ‚ü∂ X‚ÇÉ` such
that `f ‚â´ g = 0`, we define `h : S.RightHomologyData` to be the datum of morphisms
`p : X‚ÇÇ ‚ü∂ Q` and `Œπ : H ‚ü∂ Q` such that `Q` identifies to the cokernel of `f` and `H`
to the kernel of the induced map `g' : Q ‚ü∂ X‚ÇÉ`.

When such a `S.RightHomologyData` exists, we shall say that `[S.HasRightHomology]`
and (TODO) we define `S.rightHomology` to be the `H` field of a chosen right homology data.
Similarly, we define `S.opcycles` to be the `Q` field.

In `Homology.lean`, when `S` has two compatible left and right homology data
(i.e. they give the same `H` up to a canonical isomorphism), we shall define
`[S.HasHomology]` and `S.homology` (TODO).

-/

namespace CategoryTheory

open Category Limits

namespace ShortComplex

variable {C : Type _} [Category C] [HasZeroMorphisms C]
  (S : ShortComplex C) {S‚ÇÅ S‚ÇÇ S‚ÇÉ : ShortComplex C}

/-- A right homology data for a short complex `S` consists of morphisms `p : S.X‚ÇÇ ‚ü∂ Q` and
`Œπ : H ‚ü∂ Q` such that `p` identifies `Q` to the kernel of `f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ`,
and that `Œπ` identifies `H` to the kernel of the induced map `g' : Q ‚ü∂ S.X‚ÇÉ` --/
structure RightHomologyData where
  /-- a choice of cokernel of `S.f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ`-/
  Q : C
  /-- a choice of kernel of the induced morphism `S.g' : S.Q ‚ü∂ X‚ÇÉ`-/
  H : C
  /-- the projection from `S.X‚ÇÇ` -/
  p : S.X‚ÇÇ ‚ü∂ Q
  /-- the inclusion of the (right) homology in the chosen cokernel of `S.f` -/
  Œπ : H ‚ü∂ Q
  /-- the cokernel condition for `p` -/
  wp : S.f ‚â´ p = 0
  /-- `p : S.X‚ÇÇ ‚ü∂ Q` is a cokernel of `S.f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ` -/
  hp : IsColimit (CokernelCofork.ofœÄ p wp)
  /-- the kernel condition for `Œπ` -/
  wŒπ : Œπ ‚â´ hp.desc (CokernelCofork.ofœÄ _ S.zero) = 0
  /-- `Œπ : H ‚ü∂ Q` is a kernel of `S.g' : Q ‚ü∂ S.X‚ÇÉ` -/
  hŒπ : IsLimit (KernelFork.ofŒπ Œπ wŒπ)

initialize_simps_projections RightHomologyData (-hp, -hŒπ)

namespace RightHomologyData

/-- The chosen cokernels and kernels of the limits API give a `RightHomologyData` -/
@[simps]
noncomputable def ofHasCokernelOfHasKernel
    [HasCokernel S.f] [HasKernel (cokernel.desc S.f S.g S.zero)] :
    S.RightHomologyData :=
{ Q := cokernel S.f,
  H := kernel (cokernel.desc S.f S.g S.zero),
  p := cokernel.œÄ _,
  Œπ := kernel.Œπ _,
  wp := cokernel.condition _,
  hp := cokernelIsCokernel _,
  wŒπ := kernel.condition _,
  hŒπ := kernelIsKernel _, }

attribute [reassoc (attr := simp)] wp wŒπ

variable {S}
variable (h : S.RightHomologyData) {A : C}

instance : Epi h.p := ‚ü®fun _ _ => Cofork.IsColimit.hom_ext h.hp‚ü©

instance : Mono h.Œπ := ‚ü®fun _ _ => Fork.IsLimit.hom_ext h.hŒπ‚ü©

/-- Any morphism `k : S.X‚ÇÇ ‚ü∂ A` such that `S.f ‚â´ k = 0` descends
to a morphism `Q ‚ü∂ A` -/
def descQ (k : S.X‚ÇÇ ‚ü∂ A) (hk : S.f ‚â´ k = 0) : h.Q ‚ü∂ A :=
  h.hp.desc (CokernelCofork.ofœÄ k hk)

@[reassoc (attr := simp)]
lemma p_descQ (k : S.X‚ÇÇ ‚ü∂ A) (hk : S.f ‚â´ k = 0) :
  h.p ‚â´ h.descQ k hk = k :=
  h.hp.fac _ WalkingParallelPair.one

/-- The morphism from the (right) homology attached to a morphism
`k : S.X‚ÇÇ ‚ü∂ A` such that `S.f ‚â´ k = 0`. -/
@[simp]
def descH (k : S.X‚ÇÇ ‚ü∂ A) (hk : S.f ‚â´ k = 0) : h.H ‚ü∂ A :=
  h.Œπ ‚â´ h.descQ k hk

/-- The morphism `h.Q ‚ü∂ S.X‚ÇÉ` induced by `S.g : S.X‚ÇÇ ‚ü∂ S.X‚ÇÉ` and the fact that
`h.Q` is a cokernel of `S.f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ`. -/
def g' : h.Q ‚ü∂ S.X‚ÇÉ := h.descQ S.g S.zero

@[reassoc (attr := simp)] lemma p_g' : h.p ‚â´ h.g' = S.g := p_descQ _ _ _

@[reassoc (attr := simp)] lemma Œπ_g' : h.Œπ ‚â´ h.g' = 0 := h.wŒπ

@[reassoc]
lemma Œπ_descQ_eq_zero_of_boundary (k : S.X‚ÇÇ ‚ü∂ A) (x : S.X‚ÇÉ ‚ü∂ A) (hx : k = S.g ‚â´ x) :
    h.Œπ ‚â´ h.descQ k (by rw [hx, S.zero_assoc, zero_comp]) = 0 := by
  rw [show 0 = h.Œπ ‚â´ h.g' ‚â´ x by simp]
  congr 1
  simp only [‚Üê cancel_epi h.p, hx, p_descQ, p_g'_assoc]

/-- For `h : S.RightHomologyData`, this is a restatement of `h.hŒπ `, saying that
`Œπ : h.H ‚ü∂ h.Q` is a kernel of `h.g' : h.Q ‚ü∂ S.X‚ÇÉ`. -/
def hŒπ' : IsLimit (KernelFork.ofŒπ h.Œπ h.Œπ_g') := h.hŒπ

/-- The morphism `A ‚ü∂ H` induced by a morphism `k : A ‚ü∂ Q` such that `k ‚â´ g' = 0` -/
def liftH (k : A ‚ü∂ h.Q) (hk : k ‚â´ h.g' = 0) : A ‚ü∂ h.H :=
  h.hŒπ.lift (KernelFork.ofŒπ k hk)

@[reassoc (attr := simp)]
lemma liftH_Œπ (k : A ‚ü∂ h.Q) (hk : k ‚â´ h.g' = 0) : h.liftH k hk ‚â´ h.Œπ = k :=
  h.hŒπ.fac (KernelFork.ofŒπ k hk) WalkingParallelPair.zero

lemma isIso_p (hf : S.f = 0) : IsIso h.p :=
  ‚ü®h.descQ (ùüô S.X‚ÇÇ) (by rw [hf, comp_id]), p_descQ _ _ _, by
    simp only [‚Üê cancel_epi h.p, p_descQ_assoc, id_comp, comp_id]‚ü©

lemma isIso_Œπ (hg : S.g = 0) : IsIso h.Œπ := by
  have ‚ü®œÜ, hœÜ‚ü© := KernelFork.IsLimit.lift' h.hŒπ' (ùüô _)
    (by rw [‚Üê cancel_epi h.p, id_comp, p_g', comp_zero, hg])
  dsimp at hœÜ
  exact ‚ü®œÜ, by rw [‚Üê cancel_mono h.Œπ, assoc, hœÜ, comp_id, id_comp], hœÜ‚ü©

variable (S)

/-- When the first map `S.f` is zero, this is the right homology data on `S` given
by any limit kernel fork of `S.g` -/
@[simps]
def ofIsLimitKernelFork (hf : S.f = 0) (c : KernelFork S.g) (hc : IsLimit c) :
  S.RightHomologyData where
  Q := S.X‚ÇÇ
  H := c.pt
  p := ùüô _
  Œπ := c.Œπ
  wp := by rw [comp_id, hf]
  hp := CokernelCofork.IsColimit.ofId _ hf
  wŒπ := KernelFork.condition _
  hŒπ := IsLimit.ofIsoLimit hc (Fork.ext (Iso.refl _) (by aesop_cat))

@[simp] lemma ofIsLimitKernelFork_g' (hf : S.f = 0) (c : KernelFork S.g)
    (hc : IsLimit c) : (ofIsLimitKernelFork S hf c hc).g' = S.g := by
  rw [‚Üê cancel_epi (ofIsLimitKernelFork S hf c hc).p, p_g',
    ofIsLimitKernelFork_p, id_comp]

/-- When the first map `S.f` is zero, this is the right homology data on `S` given by
the chosen `kernel S.g` -/
@[simps!]
noncomputable def ofHasKernel [HasKernel S.g] (hf : S.f = 0) : S.RightHomologyData :=
ofIsLimitKernelFork S hf _ (kernelIsKernel _)

/-- When the second map `S.g` is zero, this is the right homology data on `S` given
by any colimit cokernel cofork of `S.g` -/
@[simps]
def ofIsColimitCokernelCofork (hg : S.g = 0) (c : CokernelCofork S.f) (hc : IsColimit c) :
  S.RightHomologyData where
  Q := c.pt
  H := c.pt
  p := c.œÄ
  Œπ := ùüô _
  wp := CokernelCofork.condition _
  hp := IsColimit.ofIsoColimit hc (Cofork.ext (Iso.refl _) (by aesop_cat))
  wŒπ := Cofork.IsColimit.hom_ext hc (by simp [hg])
  hŒπ := KernelFork.IsLimit.ofId _ (Cofork.IsColimit.hom_ext hc (by simp [hg]))

@[simp] lemma ofIsColimitCokernelCofork_g' (hg : S.g = 0) (c : CokernelCofork S.f)
  (hc : IsColimit c) : (ofIsColimitCokernelCofork S hg c hc).g' = 0 :=
by rw [‚Üê cancel_epi (ofIsColimitCokernelCofork S hg c hc).p, p_g', hg, comp_zero]

/-- When the second map `S.g` is zero, this is the right homology data on `S` given
by the chosen `cokernel S.f` -/
@[simp]
noncomputable def ofHasCokernel [HasCokernel S.f] (hg : S.g = 0) : S.RightHomologyData :=
ofIsColimitCokernelCofork S hg _ (cokernelIsCokernel _)

/-- When both `S.f` and `S.g` are zero, the middle object `S.X‚ÇÇ`
gives a right homology data on S -/
@[simps]
def ofZeros (hf : S.f = 0) (hg : S.g = 0) : S.RightHomologyData where
  Q := S.X‚ÇÇ
  H := S.X‚ÇÇ
  p := ùüô _
  Œπ := ùüô _
  wp := by rw [comp_id, hf]
  hp := CokernelCofork.IsColimit.ofId _ hf
  wŒπ := by
    change ùüô _ ‚â´ S.g = 0
    simp only [hg, comp_zero]
  hŒπ := KernelFork.IsLimit.ofId _ hg

@[simp]
lemma ofZeros_g' (hf : S.f = 0) (hg : S.g = 0) :
    (ofZeros S hf hg).g' = 0 := by
  rw [‚Üê cancel_epi ((ofZeros S hf hg).p), comp_zero, p_g', hg]

end RightHomologyData

/-- A short complex `S` has right homology when there exists a `S.RightHomologyData` -/
class HasRightHomology : Prop where
  condition : Nonempty S.RightHomologyData

/-- A chosen `S.RightHomologyData` for a short complex `S` that has right homology -/
noncomputable def rightHomologyData [HasRightHomology S] :
  S.RightHomologyData := HasRightHomology.condition.some

variable {S}

namespace HasRightHomology

lemma mk' (h : S.RightHomologyData) : HasRightHomology S := ‚ü®Nonempty.intro h‚ü©

instance of_hasCokernel_of_hasKernel
    [HasCokernel S.f] [HasKernel (cokernel.desc S.f S.g S.zero)] :
  S.HasRightHomology := HasRightHomology.mk' (RightHomologyData.ofHasCokernelOfHasKernel S)

instance of_hasKernel {Y Z : C} (g : Y ‚ü∂ Z) (X : C) [HasKernel g] :
    (ShortComplex.mk (0 : X ‚ü∂ Y) g zero_comp).HasRightHomology :=
  HasRightHomology.mk' (RightHomologyData.ofHasKernel _ rfl)

instance of_hasCokernel {X Y : C} (f : X ‚ü∂ Y) (Z : C) [HasCokernel f] :
    (ShortComplex.mk f (0 : Y ‚ü∂ Z) comp_zero).HasRightHomology :=
  HasRightHomology.mk' (RightHomologyData.ofHasCokernel _ rfl)

instance of_zeros (X Y Z : C) :
    (ShortComplex.mk (0 : X ‚ü∂ Y) (0 : Y ‚ü∂ Z) zero_comp).HasRightHomology :=
  HasRightHomology.mk' (RightHomologyData.ofZeros _ rfl rfl)

end HasRightHomology

namespace RightHomologyData

/-- A right homology data for a short complex `S` induces a left homology data for `S.op`. -/
@[simps]
def op (h : S.RightHomologyData) : S.op.LeftHomologyData where
  K := Opposite.op h.Q
  H := Opposite.op h.H
  i := h.p.op
  œÄ := h.Œπ.op
  wi := Quiver.Hom.unop_inj h.wp
  hi := CokernelCofork.IsColimit.ofœÄOp _ _ h.hp
  wœÄ := Quiver.Hom.unop_inj h.wŒπ
  hœÄ := KernelFork.IsLimit.ofŒπOp _ _ h.hŒπ

@[simp] lemma op_f' (h : S.RightHomologyData) :
    h.op.f' = h.g'.op := rfl

/-- A right homology data for a short complex `S` in the opposite category
induces a left homology data for `S.unop`. -/
@[simps]
def unop {S : ShortComplex C·µí·µñ} (h : S.RightHomologyData) : S.unop.LeftHomologyData where
  K := Opposite.unop h.Q
  H := Opposite.unop h.H
  i := h.p.unop
  œÄ := h.Œπ.unop
  wi := Quiver.Hom.op_inj h.wp
  hi := CokernelCofork.IsColimit.ofœÄUnop _ _ h.hp
  wœÄ := Quiver.Hom.op_inj h.wŒπ
  hœÄ := KernelFork.IsLimit.ofŒπUnop _ _ h.hŒπ

@[simp] lemma unop_f' {S : ShortComplex C·µí·µñ} (h : S.RightHomologyData) :
    h.unop.f' = h.g'.unop := rfl

end RightHomologyData

namespace LeftHomologyData

/-- A left homology data for a short complex `S` induces a right homology data for `S.op`. -/
@[simps]
def op (h : S.LeftHomologyData) : S.op.RightHomologyData where
  Q := Opposite.op h.K
  H := Opposite.op h.H
  p := h.i.op
  Œπ := h.œÄ.op
  wp := Quiver.Hom.unop_inj h.wi
  hp := KernelFork.IsLimit.ofŒπOp _ _ h.hi
  wŒπ := Quiver.Hom.unop_inj h.wœÄ
  hŒπ := CokernelCofork.IsColimit.ofœÄOp _ _ h.hœÄ

@[simp] lemma op_g' (h : S.LeftHomologyData) :
    h.op.g' = h.f'.op := rfl

/-- A left homology data for a short complex `S` in the opposite category
induces a right homology data for `S.unop`. -/
@[simps]
def unop {S : ShortComplex C·µí·µñ} (h : S.LeftHomologyData) : S.unop.RightHomologyData where
  Q := Opposite.unop h.K
  H := Opposite.unop h.H
  p := h.i.unop
  Œπ := h.œÄ.unop
  wp := Quiver.Hom.op_inj h.wi
  hp := KernelFork.IsLimit.ofŒπUnop _ _ h.hi
  wŒπ := Quiver.Hom.op_inj h.wœÄ
  hŒπ := CokernelCofork.IsColimit.ofœÄUnop _ _ h.hœÄ

@[simp] lemma unop_g' {S : ShortComplex C·µí·µñ} (h : S.LeftHomologyData) :
    h.unop.g' = h.f'.unop := rfl

end LeftHomologyData

instance [S.HasLeftHomology] : HasRightHomology S.op :=
  HasRightHomology.mk' S.leftHomologyData.op

instance [S.HasRightHomology] : HasLeftHomology S.op :=
  HasLeftHomology.mk' S.rightHomologyData.op

lemma hasLeftHomology_iff_op (S : ShortComplex C) :
    S.HasLeftHomology ‚Üî S.op.HasRightHomology :=
  ‚ü®fun _ => inferInstance, fun _ => HasLeftHomology.mk' S.op.rightHomologyData.unop‚ü©

lemma hasRightHomology_iff_op (S : ShortComplex C) :
    S.HasRightHomology ‚Üî S.op.HasLeftHomology :=
  ‚ü®fun _ => inferInstance, fun _ => HasRightHomology.mk' S.op.leftHomologyData.unop‚ü©

lemma hasLeftHomology_iff_unop (S : ShortComplex C·µí·µñ) :
    S.HasLeftHomology ‚Üî S.unop.HasRightHomology :=
  S.unop.hasRightHomology_iff_op.symm

lemma hasRightHomology_iff_unop (S : ShortComplex C·µí·µñ) :
    S.HasRightHomology ‚Üî S.unop.HasLeftHomology :=
  S.unop.hasLeftHomology_iff_op.symm

section

variable (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData)

/-- Given right homology data `h‚ÇÅ` and `h‚ÇÇ` for two short complexes `S‚ÇÅ` and `S‚ÇÇ`,
a `RightHomologyMapData` for a morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ`
consists of a description of the induced morphisms on the `Q` (opcycles)
and `H` (right homology) fields of `h‚ÇÅ` and `h‚ÇÇ`. -/
structure RightHomologyMapData where
  /-- the induced map on opcycles -/
  œÜQ : h‚ÇÅ.Q ‚ü∂ h‚ÇÇ.Q
  /-- the induced map on right homology -/
  œÜH : h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H
  /-- commutation with `p` -/
  commp : h‚ÇÅ.p ‚â´ œÜQ = œÜ.œÑ‚ÇÇ ‚â´ h‚ÇÇ.p := by aesop_cat
  /-- commutation with `g'` -/
  commg' : œÜQ ‚â´ h‚ÇÇ.g' = h‚ÇÅ.g' ‚â´ œÜ.œÑ‚ÇÉ := by aesop_cat
  /-- commutation with `Œπ` -/
  commŒπ : œÜH ‚â´ h‚ÇÇ.Œπ = h‚ÇÅ.Œπ ‚â´ œÜQ := by aesop_cat

namespace RightHomologyMapData

attribute [reassoc (attr := simp)] commp commg' commŒπ
attribute [nolint simpNF] mk.injEq

/-- The right homology map data associated to the zero morphism between two short complexes. -/
@[simps]
def zero (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData) :
  RightHomologyMapData 0 h‚ÇÅ h‚ÇÇ where
  œÜQ := 0
  œÜH := 0

/-- The right homology map data associated to the identity morphism of a short complex. -/
@[simps]
def id (h : S.RightHomologyData) : RightHomologyMapData (ùüô S) h h where
  œÜQ := ùüô _
  œÜH := ùüô _

/-- The composition of right homology map data. -/
@[simps]
def comp {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {œÜ' : S‚ÇÇ ‚ü∂ S‚ÇÉ} {h‚ÇÅ : S‚ÇÅ.RightHomologyData}
    {h‚ÇÇ : S‚ÇÇ.RightHomologyData} {h‚ÇÉ : S‚ÇÉ.RightHomologyData}
    (œà : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) (œà' : RightHomologyMapData œÜ' h‚ÇÇ h‚ÇÉ) :
    RightHomologyMapData (œÜ ‚â´ œÜ') h‚ÇÅ h‚ÇÉ where
  œÜQ := œà.œÜQ ‚â´ œà'.œÜQ
  œÜH := œà.œÜH ‚â´ œà'.œÜH

instance : Subsingleton (RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) :=
  ‚ü®fun œà‚ÇÅ œà‚ÇÇ => by
    have hQ : œà‚ÇÅ.œÜQ = œà‚ÇÇ.œÜQ := by rw [‚Üê cancel_epi h‚ÇÅ.p, commp, commp]
    have hH : œà‚ÇÅ.œÜH = œà‚ÇÇ.œÜH := by rw [‚Üê cancel_mono h‚ÇÇ.Œπ, commŒπ, commŒπ, hQ]
    cases œà‚ÇÅ
    cases œà‚ÇÇ
    congr‚ü©

instance : Inhabited (RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) := ‚ü®by
  let œÜQ : h‚ÇÅ.Q ‚ü∂ h‚ÇÇ.Q := h‚ÇÅ.descQ (œÜ.œÑ‚ÇÇ ‚â´ h‚ÇÇ.p) (by rw [‚Üê œÜ.comm‚ÇÅ‚ÇÇ_assoc, h‚ÇÇ.wp, comp_zero])
  have commg' : œÜQ ‚â´ h‚ÇÇ.g' = h‚ÇÅ.g' ‚â´ œÜ.œÑ‚ÇÉ :=
    by rw [‚Üê cancel_epi h‚ÇÅ.p, RightHomologyData.p_descQ_assoc, assoc,
      RightHomologyData.p_g', œÜ.comm‚ÇÇ‚ÇÉ, RightHomologyData.p_g'_assoc]
  let œÜH : h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H := h‚ÇÇ.liftH (h‚ÇÅ.Œπ ‚â´ œÜQ)
    (by rw [assoc, commg', RightHomologyData.Œπ_g'_assoc, zero_comp])
  exact ‚ü®œÜQ, œÜH, by simp, commg', by simp‚ü©‚ü©

instance : Unique (RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) := Unique.mk' _

variable {œÜ h‚ÇÅ h‚ÇÇ}

lemma congr_œÜH {Œ≥‚ÇÅ Œ≥‚ÇÇ : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ} (eq : Œ≥‚ÇÅ = Œ≥‚ÇÇ) : Œ≥‚ÇÅ.œÜH = Œ≥‚ÇÇ.œÜH := by rw [eq]
lemma congr_œÜQ {Œ≥‚ÇÅ Œ≥‚ÇÇ : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ} (eq : Œ≥‚ÇÅ = Œ≥‚ÇÇ) : Œ≥‚ÇÅ.œÜQ = Œ≥‚ÇÇ.œÜQ := by rw [eq]

end RightHomologyMapData

end

end ShortComplex

end CategoryTheory
