/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.Algebra.Homology.ShortComplex.LeftHomology
import Mathlib.CategoryTheory.Limits.Opposites

/-!
# Right Homology of short complexes

In this file, we define the dual notions to those defined in
`Algebra.Homology.ShortComplex.LeftHomology`. In particular, if `S : ShortComplex C` is
a short complex consisting of two composable maps `f : X‚ÇÅ ‚ü∂ X‚ÇÇ` and `g : X‚ÇÇ ‚ü∂ X‚ÇÉ` such
that `f ‚â´ g = 0`, we define `h : S.RightHomologyData` to be the datum of morphisms
`p : X‚ÇÇ ‚ü∂ Q` and `Œπ : H ‚ü∂ Q` such that `Q` identifies to the cokernel of `f` and `H`
to the kernel of the induced map `g' : Q ‚ü∂ X‚ÇÉ`.

When such a `S.RightHomologyData` exists, we shall say that `[S.HasRightHomology]`
and we define `S.rightHomology` to be the `H` field of a chosen right homology data.
Similarly, we define `S.opcycles` to be the `Q` field.

In `Homology.lean`, when `S` has two compatible left and right homology data
(i.e. they give the same `H` up to a canonical isomorphism), we shall define
`[S.HasHomology]` and `S.homology`.

-/

namespace CategoryTheory

open Category Limits

namespace ShortComplex

variable {C : Type*} [Category C] [HasZeroMorphisms C]
  (S : ShortComplex C) {S‚ÇÅ S‚ÇÇ S‚ÇÉ : ShortComplex C}

/-- A right homology data for a short complex `S` consists of morphisms `p : S.X‚ÇÇ ‚ü∂ Q` and
`Œπ : H ‚ü∂ Q` such that `p` identifies `Q` to the kernel of `f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ`,
and that `Œπ` identifies `H` to the kernel of the induced map `g' : Q ‚ü∂ S.X‚ÇÉ` -/
structure RightHomologyData where
  /-- a choice of cokernel of `S.f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ`-/
  Q : C
  /-- a choice of kernel of the induced morphism `S.g' : S.Q ‚ü∂ X‚ÇÉ`-/
  H : C
  /-- the projection from `S.X‚ÇÇ` -/
  p : S.X‚ÇÇ ‚ü∂ Q
  /-- the inclusion of the (right) homology in the chosen cokernel of `S.f` -/
  Œπ : H ‚ü∂ Q
  /-- the cokernel condition for `p` -/
  wp : S.f ‚â´ p = 0
  /-- `p : S.X‚ÇÇ ‚ü∂ Q` is a cokernel of `S.f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ` -/
  hp : IsColimit (CokernelCofork.ofœÄ p wp)
  /-- the kernel condition for `Œπ` -/
  wŒπ : Œπ ‚â´ hp.desc (CokernelCofork.ofœÄ _ S.zero) = 0
  /-- `Œπ : H ‚ü∂ Q` is a kernel of `S.g' : Q ‚ü∂ S.X‚ÇÉ` -/
  hŒπ : IsLimit (KernelFork.ofŒπ Œπ wŒπ)

initialize_simps_projections RightHomologyData (-hp, -hŒπ)

namespace RightHomologyData

/-- The chosen cokernels and kernels of the limits API give a `RightHomologyData` -/
@[simps]
noncomputable def ofHasCokernelOfHasKernel
    [HasCokernel S.f] [HasKernel (cokernel.desc S.f S.g S.zero)] :
    S.RightHomologyData :=
{ Q := cokernel S.f,
  H := kernel (cokernel.desc S.f S.g S.zero),
  p := cokernel.œÄ _,
  Œπ := kernel.Œπ _,
  wp := cokernel.condition _,
  hp := cokernelIsCokernel _,
  wŒπ := kernel.condition _,
  hŒπ := kernelIsKernel _, }

attribute [reassoc (attr := simp)] wp wŒπ

variable {S}
variable (h : S.RightHomologyData) {A : C}

instance : Epi h.p := ‚ü®fun _ _ => Cofork.IsColimit.hom_ext h.hp‚ü©

instance : Mono h.Œπ := ‚ü®fun _ _ => Fork.IsLimit.hom_ext h.hŒπ‚ü©

/-- Any morphism `k : S.X‚ÇÇ ‚ü∂ A` such that `S.f ‚â´ k = 0` descends
to a morphism `Q ‚ü∂ A` -/
def descQ (k : S.X‚ÇÇ ‚ü∂ A) (hk : S.f ‚â´ k = 0) : h.Q ‚ü∂ A :=
  h.hp.desc (CokernelCofork.ofœÄ k hk)

@[reassoc (attr := simp)]
lemma p_descQ (k : S.X‚ÇÇ ‚ü∂ A) (hk : S.f ‚â´ k = 0) : h.p ‚â´ h.descQ k hk = k :=
  h.hp.fac _ WalkingParallelPair.one

/-- The morphism from the (right) homology attached to a morphism
`k : S.X‚ÇÇ ‚ü∂ A` such that `S.f ‚â´ k = 0`. -/
@[simp]
def descH (k : S.X‚ÇÇ ‚ü∂ A) (hk : S.f ‚â´ k = 0) : h.H ‚ü∂ A :=
  h.Œπ ‚â´ h.descQ k hk

/-- The morphism `h.Q ‚ü∂ S.X‚ÇÉ` induced by `S.g : S.X‚ÇÇ ‚ü∂ S.X‚ÇÉ` and the fact that
`h.Q` is a cokernel of `S.f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ`. -/
def g' : h.Q ‚ü∂ S.X‚ÇÉ := h.descQ S.g S.zero

@[reassoc (attr := simp)] lemma p_g' : h.p ‚â´ h.g' = S.g := p_descQ _ _ _

@[reassoc (attr := simp)] lemma Œπ_g' : h.Œπ ‚â´ h.g' = 0 := h.wŒπ

@[reassoc]
lemma Œπ_descQ_eq_zero_of_boundary (k : S.X‚ÇÇ ‚ü∂ A) (x : S.X‚ÇÉ ‚ü∂ A) (hx : k = S.g ‚â´ x) :
    h.Œπ ‚â´ h.descQ k (by rw [hx, S.zero_assoc, zero_comp]) = 0 := by
  rw [show 0 = h.Œπ ‚â´ h.g' ‚â´ x by simp]
  congr 1
  simp only [‚Üê cancel_epi h.p, hx, p_descQ, p_g'_assoc]

/-- For `h : S.RightHomologyData`, this is a restatement of `h.hŒπ`, saying that
`Œπ : h.H ‚ü∂ h.Q` is a kernel of `h.g' : h.Q ‚ü∂ S.X‚ÇÉ`. -/
def hŒπ' : IsLimit (KernelFork.ofŒπ h.Œπ h.Œπ_g') := h.hŒπ

/-- The morphism `A ‚ü∂ H` induced by a morphism `k : A ‚ü∂ Q` such that `k ‚â´ g' = 0` -/
def liftH (k : A ‚ü∂ h.Q) (hk : k ‚â´ h.g' = 0) : A ‚ü∂ h.H :=
  h.hŒπ.lift (KernelFork.ofŒπ k hk)

@[reassoc (attr := simp)]
lemma liftH_Œπ (k : A ‚ü∂ h.Q) (hk : k ‚â´ h.g' = 0) : h.liftH k hk ‚â´ h.Œπ = k :=
  h.hŒπ.fac (KernelFork.ofŒπ k hk) WalkingParallelPair.zero

lemma isIso_p (hf : S.f = 0) : IsIso h.p :=
  ‚ü®h.descQ (ùüô S.X‚ÇÇ) (by rw [hf, comp_id]), p_descQ _ _ _, by
    simp only [‚Üê cancel_epi h.p, p_descQ_assoc, id_comp, comp_id]‚ü©

lemma isIso_Œπ (hg : S.g = 0) : IsIso h.Œπ := by
  have ‚ü®œÜ, hœÜ‚ü© := KernelFork.IsLimit.lift' h.hŒπ' (ùüô _)
    (by rw [‚Üê cancel_epi h.p, id_comp, p_g', comp_zero, hg])
  dsimp at hœÜ
  exact ‚ü®œÜ, by rw [‚Üê cancel_mono h.Œπ, assoc, hœÜ, comp_id, id_comp], hœÜ‚ü©

variable (S)

/-- When the first map `S.f` is zero, this is the right homology data on `S` given
by any limit kernel fork of `S.g` -/
@[simps]
def ofIsLimitKernelFork (hf : S.f = 0) (c : KernelFork S.g) (hc : IsLimit c) :
    S.RightHomologyData where
  Q := S.X‚ÇÇ
  H := c.pt
  p := ùüô _
  Œπ := c.Œπ
  wp := by rw [comp_id, hf]
  hp := CokernelCofork.IsColimit.ofId _ hf
  wŒπ := KernelFork.condition _
  hŒπ := IsLimit.ofIsoLimit hc (Fork.ext (Iso.refl _) (by aesop_cat))

@[simp] lemma ofIsLimitKernelFork_g' (hf : S.f = 0) (c : KernelFork S.g)
    (hc : IsLimit c) : (ofIsLimitKernelFork S hf c hc).g' = S.g := by
  rw [‚Üê cancel_epi (ofIsLimitKernelFork S hf c hc).p, p_g',
    ofIsLimitKernelFork_p, id_comp]

/-- When the first map `S.f` is zero, this is the right homology data on `S` given by
the chosen `kernel S.g` -/
@[simps!]
noncomputable def ofHasKernel [HasKernel S.g] (hf : S.f = 0) : S.RightHomologyData :=
ofIsLimitKernelFork S hf _ (kernelIsKernel _)

/-- When the second map `S.g` is zero, this is the right homology data on `S` given
by any colimit cokernel cofork of `S.g` -/
@[simps]
def ofIsColimitCokernelCofork (hg : S.g = 0) (c : CokernelCofork S.f) (hc : IsColimit c) :
    S.RightHomologyData where
  Q := c.pt
  H := c.pt
  p := c.œÄ
  Œπ := ùüô _
  wp := CokernelCofork.condition _
  hp := IsColimit.ofIsoColimit hc (Cofork.ext (Iso.refl _) (by aesop_cat))
  wŒπ := Cofork.IsColimit.hom_ext hc (by simp [hg])
  hŒπ := KernelFork.IsLimit.ofId _ (Cofork.IsColimit.hom_ext hc (by simp [hg]))

@[simp] lemma ofIsColimitCokernelCofork_g' (hg : S.g = 0) (c : CokernelCofork S.f)
  (hc : IsColimit c) : (ofIsColimitCokernelCofork S hg c hc).g' = 0 :=
by rw [‚Üê cancel_epi (ofIsColimitCokernelCofork S hg c hc).p, p_g', hg, comp_zero]

/-- When the second map `S.g` is zero, this is the right homology data on `S` given
by the chosen `cokernel S.f` -/
@[simp]
noncomputable def ofHasCokernel [HasCokernel S.f] (hg : S.g = 0) : S.RightHomologyData :=
ofIsColimitCokernelCofork S hg _ (cokernelIsCokernel _)

/-- When both `S.f` and `S.g` are zero, the middle object `S.X‚ÇÇ`
gives a right homology data on S -/
@[simps]
def ofZeros (hf : S.f = 0) (hg : S.g = 0) : S.RightHomologyData where
  Q := S.X‚ÇÇ
  H := S.X‚ÇÇ
  p := ùüô _
  Œπ := ùüô _
  wp := by rw [comp_id, hf]
  hp := CokernelCofork.IsColimit.ofId _ hf
  wŒπ := by
    change ùüô _ ‚â´ S.g = 0
    simp only [hg, comp_zero]
  hŒπ := KernelFork.IsLimit.ofId _ hg

@[simp]
lemma ofZeros_g' (hf : S.f = 0) (hg : S.g = 0) :
    (ofZeros S hf hg).g' = 0 := by
  rw [‚Üê cancel_epi ((ofZeros S hf hg).p), comp_zero, p_g', hg]

end RightHomologyData

/-- A short complex `S` has right homology when there exists a `S.RightHomologyData` -/
class HasRightHomology : Prop where
  condition : Nonempty S.RightHomologyData

/-- A chosen `S.RightHomologyData` for a short complex `S` that has right homology -/
noncomputable def rightHomologyData [HasRightHomology S] :
  S.RightHomologyData := HasRightHomology.condition.some

variable {S}

namespace HasRightHomology

lemma mk' (h : S.RightHomologyData) : HasRightHomology S := ‚ü®Nonempty.intro h‚ü©

instance of_hasCokernel_of_hasKernel
    [HasCokernel S.f] [HasKernel (cokernel.desc S.f S.g S.zero)] :
  S.HasRightHomology := HasRightHomology.mk' (RightHomologyData.ofHasCokernelOfHasKernel S)

instance of_hasKernel {Y Z : C} (g : Y ‚ü∂ Z) (X : C) [HasKernel g] :
    (ShortComplex.mk (0 : X ‚ü∂ Y) g zero_comp).HasRightHomology :=
  HasRightHomology.mk' (RightHomologyData.ofHasKernel _ rfl)

instance of_hasCokernel {X Y : C} (f : X ‚ü∂ Y) (Z : C) [HasCokernel f] :
    (ShortComplex.mk f (0 : Y ‚ü∂ Z) comp_zero).HasRightHomology :=
  HasRightHomology.mk' (RightHomologyData.ofHasCokernel _ rfl)

instance of_zeros (X Y Z : C) :
    (ShortComplex.mk (0 : X ‚ü∂ Y) (0 : Y ‚ü∂ Z) zero_comp).HasRightHomology :=
  HasRightHomology.mk' (RightHomologyData.ofZeros _ rfl rfl)

end HasRightHomology

namespace RightHomologyData

/-- A right homology data for a short complex `S` induces a left homology data for `S.op`. -/
@[simps]
def op (h : S.RightHomologyData) : S.op.LeftHomologyData where
  K := Opposite.op h.Q
  H := Opposite.op h.H
  i := h.p.op
  œÄ := h.Œπ.op
  wi := Quiver.Hom.unop_inj h.wp
  hi := CokernelCofork.IsColimit.ofœÄOp _ _ h.hp
  wœÄ := Quiver.Hom.unop_inj h.wŒπ
  hœÄ := KernelFork.IsLimit.ofŒπOp _ _ h.hŒπ

@[simp] lemma op_f' (h : S.RightHomologyData) :
    h.op.f' = h.g'.op := rfl

/-- A right homology data for a short complex `S` in the opposite category
induces a left homology data for `S.unop`. -/
@[simps]
def unop {S : ShortComplex C·µí·µñ} (h : S.RightHomologyData) : S.unop.LeftHomologyData where
  K := Opposite.unop h.Q
  H := Opposite.unop h.H
  i := h.p.unop
  œÄ := h.Œπ.unop
  wi := Quiver.Hom.op_inj h.wp
  hi := CokernelCofork.IsColimit.ofœÄUnop _ _ h.hp
  wœÄ := Quiver.Hom.op_inj h.wŒπ
  hœÄ := KernelFork.IsLimit.ofŒπUnop _ _ h.hŒπ

@[simp] lemma unop_f' {S : ShortComplex C·µí·µñ} (h : S.RightHomologyData) :
    h.unop.f' = h.g'.unop := rfl

end RightHomologyData

namespace LeftHomologyData

/-- A left homology data for a short complex `S` induces a right homology data for `S.op`. -/
@[simps]
def op (h : S.LeftHomologyData) : S.op.RightHomologyData where
  Q := Opposite.op h.K
  H := Opposite.op h.H
  p := h.i.op
  Œπ := h.œÄ.op
  wp := Quiver.Hom.unop_inj h.wi
  hp := KernelFork.IsLimit.ofŒπOp _ _ h.hi
  wŒπ := Quiver.Hom.unop_inj h.wœÄ
  hŒπ := CokernelCofork.IsColimit.ofœÄOp _ _ h.hœÄ

@[simp] lemma op_g' (h : S.LeftHomologyData) :
    h.op.g' = h.f'.op := rfl

/-- A left homology data for a short complex `S` in the opposite category
induces a right homology data for `S.unop`. -/
@[simps]
def unop {S : ShortComplex C·µí·µñ} (h : S.LeftHomologyData) : S.unop.RightHomologyData where
  Q := Opposite.unop h.K
  H := Opposite.unop h.H
  p := h.i.unop
  Œπ := h.œÄ.unop
  wp := Quiver.Hom.op_inj h.wi
  hp := KernelFork.IsLimit.ofŒπUnop _ _ h.hi
  wŒπ := Quiver.Hom.op_inj h.wœÄ
  hŒπ := CokernelCofork.IsColimit.ofœÄUnop _ _ h.hœÄ

@[simp] lemma unop_g' {S : ShortComplex C·µí·µñ} (h : S.LeftHomologyData) :
    h.unop.g' = h.f'.unop := rfl

end LeftHomologyData

instance [S.HasLeftHomology] : HasRightHomology S.op :=
  HasRightHomology.mk' S.leftHomologyData.op

instance [S.HasRightHomology] : HasLeftHomology S.op :=
  HasLeftHomology.mk' S.rightHomologyData.op

lemma hasLeftHomology_iff_op (S : ShortComplex C) :
    S.HasLeftHomology ‚Üî S.op.HasRightHomology :=
  ‚ü®fun _ => inferInstance, fun _ => HasLeftHomology.mk' S.op.rightHomologyData.unop‚ü©

lemma hasRightHomology_iff_op (S : ShortComplex C) :
    S.HasRightHomology ‚Üî S.op.HasLeftHomology :=
  ‚ü®fun _ => inferInstance, fun _ => HasRightHomology.mk' S.op.leftHomologyData.unop‚ü©

lemma hasLeftHomology_iff_unop (S : ShortComplex C·µí·µñ) :
    S.HasLeftHomology ‚Üî S.unop.HasRightHomology :=
  S.unop.hasRightHomology_iff_op.symm

lemma hasRightHomology_iff_unop (S : ShortComplex C·µí·µñ) :
    S.HasRightHomology ‚Üî S.unop.HasLeftHomology :=
  S.unop.hasLeftHomology_iff_op.symm

section

variable (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData)

/-- Given right homology data `h‚ÇÅ` and `h‚ÇÇ` for two short complexes `S‚ÇÅ` and `S‚ÇÇ`,
a `RightHomologyMapData` for a morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ`
consists of a description of the induced morphisms on the `Q` (opcycles)
and `H` (right homology) fields of `h‚ÇÅ` and `h‚ÇÇ`. -/
structure RightHomologyMapData where
  /-- the induced map on opcycles -/
  œÜQ : h‚ÇÅ.Q ‚ü∂ h‚ÇÇ.Q
  /-- the induced map on right homology -/
  œÜH : h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H
  /-- commutation with `p` -/
  commp : h‚ÇÅ.p ‚â´ œÜQ = œÜ.œÑ‚ÇÇ ‚â´ h‚ÇÇ.p := by aesop_cat
  /-- commutation with `g'` -/
  commg' : œÜQ ‚â´ h‚ÇÇ.g' = h‚ÇÅ.g' ‚â´ œÜ.œÑ‚ÇÉ := by aesop_cat
  /-- commutation with `Œπ` -/
  commŒπ : œÜH ‚â´ h‚ÇÇ.Œπ = h‚ÇÅ.Œπ ‚â´ œÜQ := by aesop_cat

namespace RightHomologyMapData

attribute [reassoc (attr := simp)] commp commg' commŒπ
attribute [nolint simpNF] mk.injEq

/-- The right homology map data associated to the zero morphism between two short complexes. -/
@[simps]
def zero (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData) :
    RightHomologyMapData 0 h‚ÇÅ h‚ÇÇ where
  œÜQ := 0
  œÜH := 0

/-- The right homology map data associated to the identity morphism of a short complex. -/
@[simps]
def id (h : S.RightHomologyData) : RightHomologyMapData (ùüô S) h h where
  œÜQ := ùüô _
  œÜH := ùüô _

/-- The composition of right homology map data. -/
@[simps]
def comp {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {œÜ' : S‚ÇÇ ‚ü∂ S‚ÇÉ} {h‚ÇÅ : S‚ÇÅ.RightHomologyData}
    {h‚ÇÇ : S‚ÇÇ.RightHomologyData} {h‚ÇÉ : S‚ÇÉ.RightHomologyData}
    (œà : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) (œà' : RightHomologyMapData œÜ' h‚ÇÇ h‚ÇÉ) :
    RightHomologyMapData (œÜ ‚â´ œÜ') h‚ÇÅ h‚ÇÉ where
  œÜQ := œà.œÜQ ‚â´ œà'.œÜQ
  œÜH := œà.œÜH ‚â´ œà'.œÜH

instance : Subsingleton (RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) :=
  ‚ü®fun œà‚ÇÅ œà‚ÇÇ => by
    have hQ : œà‚ÇÅ.œÜQ = œà‚ÇÇ.œÜQ := by rw [‚Üê cancel_epi h‚ÇÅ.p, commp, commp]
    have hH : œà‚ÇÅ.œÜH = œà‚ÇÇ.œÜH := by rw [‚Üê cancel_mono h‚ÇÇ.Œπ, commŒπ, commŒπ, hQ]
    cases œà‚ÇÅ
    cases œà‚ÇÇ
    congr‚ü©

instance : Inhabited (RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) := ‚ü®by
  let œÜQ : h‚ÇÅ.Q ‚ü∂ h‚ÇÇ.Q := h‚ÇÅ.descQ (œÜ.œÑ‚ÇÇ ‚â´ h‚ÇÇ.p) (by rw [‚Üê œÜ.comm‚ÇÅ‚ÇÇ_assoc, h‚ÇÇ.wp, comp_zero])
  have commg' : œÜQ ‚â´ h‚ÇÇ.g' = h‚ÇÅ.g' ‚â´ œÜ.œÑ‚ÇÉ :=
    by rw [‚Üê cancel_epi h‚ÇÅ.p, RightHomologyData.p_descQ_assoc, assoc,
      RightHomologyData.p_g', œÜ.comm‚ÇÇ‚ÇÉ, RightHomologyData.p_g'_assoc]
  let œÜH : h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H := h‚ÇÇ.liftH (h‚ÇÅ.Œπ ‚â´ œÜQ)
    (by rw [assoc, commg', RightHomologyData.Œπ_g'_assoc, zero_comp])
  exact ‚ü®œÜQ, œÜH, by simp [œÜQ], commg', by simp [œÜH]‚ü©‚ü©

instance : Unique (RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) := Unique.mk' _

variable {œÜ h‚ÇÅ h‚ÇÇ}

lemma congr_œÜH {Œ≥‚ÇÅ Œ≥‚ÇÇ : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ} (eq : Œ≥‚ÇÅ = Œ≥‚ÇÇ) : Œ≥‚ÇÅ.œÜH = Œ≥‚ÇÇ.œÜH := by rw [eq]
lemma congr_œÜQ {Œ≥‚ÇÅ Œ≥‚ÇÇ : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ} (eq : Œ≥‚ÇÅ = Œ≥‚ÇÇ) : Œ≥‚ÇÅ.œÜQ = Œ≥‚ÇÇ.œÜQ := by rw [eq]

/-- When `S‚ÇÅ.f`, `S‚ÇÅ.g`, `S‚ÇÇ.f` and `S‚ÇÇ.g` are all zero, the action on right homology of a
morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` is given by the action `œÜ.œÑ‚ÇÇ` on the middle objects. -/
@[simps]
def ofZeros (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (hf‚ÇÅ : S‚ÇÅ.f = 0) (hg‚ÇÅ : S‚ÇÅ.g = 0) (hf‚ÇÇ : S‚ÇÇ.f = 0) (hg‚ÇÇ : S‚ÇÇ.g = 0) :
    RightHomologyMapData œÜ (RightHomologyData.ofZeros S‚ÇÅ hf‚ÇÅ hg‚ÇÅ)
    (RightHomologyData.ofZeros S‚ÇÇ hf‚ÇÇ hg‚ÇÇ) where
  œÜQ := œÜ.œÑ‚ÇÇ
  œÜH := œÜ.œÑ‚ÇÇ

/-- When `S‚ÇÅ.f` and `S‚ÇÇ.f` are zero and we have chosen limit kernel forks `c‚ÇÅ` and `c‚ÇÇ`
for `S‚ÇÅ.g` and `S‚ÇÇ.g` respectively, the action on right homology of a morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` of
short complexes is given by the unique morphism `f : c‚ÇÅ.pt ‚ü∂ c‚ÇÇ.pt` such that
`c‚ÇÅ.Œπ ‚â´ œÜ.œÑ‚ÇÇ = f ‚â´ c‚ÇÇ.Œπ`. -/
@[simps]
def ofIsLimitKernelFork (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
    (hf‚ÇÅ : S‚ÇÅ.f = 0) (c‚ÇÅ : KernelFork S‚ÇÅ.g) (hc‚ÇÅ : IsLimit c‚ÇÅ)
    (hf‚ÇÇ : S‚ÇÇ.f = 0) (c‚ÇÇ : KernelFork S‚ÇÇ.g) (hc‚ÇÇ : IsLimit c‚ÇÇ) (f : c‚ÇÅ.pt ‚ü∂ c‚ÇÇ.pt)
    (comm : c‚ÇÅ.Œπ ‚â´ œÜ.œÑ‚ÇÇ = f ‚â´ c‚ÇÇ.Œπ) :
    RightHomologyMapData œÜ (RightHomologyData.ofIsLimitKernelFork S‚ÇÅ hf‚ÇÅ c‚ÇÅ hc‚ÇÅ)
      (RightHomologyData.ofIsLimitKernelFork S‚ÇÇ hf‚ÇÇ c‚ÇÇ hc‚ÇÇ) where
  œÜQ := œÜ.œÑ‚ÇÇ
  œÜH := f
  commg' := by simp only [RightHomologyData.ofIsLimitKernelFork_g', œÜ.comm‚ÇÇ‚ÇÉ]
  commŒπ := comm.symm

/-- When `S‚ÇÅ.g` and `S‚ÇÇ.g` are zero and we have chosen colimit cokernel coforks `c‚ÇÅ` and `c‚ÇÇ`
for `S‚ÇÅ.f` and `S‚ÇÇ.f` respectively, the action on right homology of a morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` of
short complexes is given by the unique morphism `f : c‚ÇÅ.pt ‚ü∂ c‚ÇÇ.pt` such that
`œÜ.œÑ‚ÇÇ ‚â´ c‚ÇÇ.œÄ = c‚ÇÅ.œÄ ‚â´ f`. -/
@[simps]
def ofIsColimitCokernelCofork (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
    (hg‚ÇÅ : S‚ÇÅ.g = 0) (c‚ÇÅ : CokernelCofork S‚ÇÅ.f) (hc‚ÇÅ : IsColimit c‚ÇÅ)
    (hg‚ÇÇ : S‚ÇÇ.g = 0) (c‚ÇÇ : CokernelCofork S‚ÇÇ.f) (hc‚ÇÇ : IsColimit c‚ÇÇ) (f : c‚ÇÅ.pt ‚ü∂ c‚ÇÇ.pt)
    (comm : œÜ.œÑ‚ÇÇ ‚â´ c‚ÇÇ.œÄ = c‚ÇÅ.œÄ ‚â´ f) :
    RightHomologyMapData œÜ (RightHomologyData.ofIsColimitCokernelCofork S‚ÇÅ hg‚ÇÅ c‚ÇÅ hc‚ÇÅ)
      (RightHomologyData.ofIsColimitCokernelCofork S‚ÇÇ hg‚ÇÇ c‚ÇÇ hc‚ÇÇ) where
  œÜQ := f
  œÜH := f
  commp := comm.symm

variable (S)

/-- When both maps `S.f` and `S.g` of a short complex `S` are zero, this is the right homology map
data (for the identity of `S`) which relates the right homology data
`RightHomologyData.ofIsLimitKernelFork` and `ofZeros` . -/
@[simps]
def compatibilityOfZerosOfIsLimitKernelFork (hf : S.f = 0) (hg : S.g = 0)
    (c : KernelFork S.g) (hc : IsLimit c) :
    RightHomologyMapData (ùüô S)
      (RightHomologyData.ofIsLimitKernelFork S hf c hc)
      (RightHomologyData.ofZeros S hf hg) where
  œÜQ := ùüô _
  œÜH := c.Œπ

/-- When both maps `S.f` and `S.g` of a short complex `S` are zero, this is the right homology map
data (for the identity of `S`) which relates the right homology data `ofZeros` and
`ofIsColimitCokernelCofork`. -/
@[simps]
def compatibilityOfZerosOfIsColimitCokernelCofork (hf : S.f = 0) (hg : S.g = 0)
    (c : CokernelCofork S.f) (hc : IsColimit c) :
    RightHomologyMapData (ùüô S)
      (RightHomologyData.ofZeros S hf hg)
      (RightHomologyData.ofIsColimitCokernelCofork S hg c hc) where
  œÜQ := c.œÄ
  œÜH := c.œÄ

end RightHomologyMapData

end

section

variable (S)
variable [S.HasRightHomology]

/-- The right homology of a short complex,
given by the `H` field of a chosen right homology data. -/
noncomputable def rightHomology : C := S.rightHomologyData.H

/-- The "opcycles" of a short complex, given by the `Q` field of a chosen right homology data.
This is the dual notion to cycles. -/
noncomputable def opcycles : C := S.rightHomologyData.Q

/-- The canonical map `S.rightHomology ‚ü∂ S.opcycles`. -/
noncomputable def rightHomologyŒπ : S.rightHomology ‚ü∂ S.opcycles :=
  S.rightHomologyData.Œπ

/-- The projection `S.X‚ÇÇ ‚ü∂ S.opcycles`. -/
noncomputable def pOpcycles : S.X‚ÇÇ ‚ü∂ S.opcycles := S.rightHomologyData.p

/-- The canonical map `S.opcycles ‚ü∂ X‚ÇÉ`. -/
noncomputable def fromOpcycles : S.opcycles ‚ü∂ S.X‚ÇÉ := S.rightHomologyData.g'

@[reassoc (attr := simp)]
lemma f_pOpcycles : S.f ‚â´ S.pOpcycles = 0 := S.rightHomologyData.wp

@[reassoc (attr := simp)]
lemma p_fromOpcycles : S.pOpcycles ‚â´ S.fromOpcycles = S.g := S.rightHomologyData.p_g'

instance : Epi S.pOpcycles := by
  dsimp only [pOpcycles]
  infer_instance

instance : Mono S.rightHomologyŒπ := by
  dsimp only [rightHomologyŒπ]
  infer_instance

lemma rightHomology_ext_iff {A : C} (f‚ÇÅ f‚ÇÇ : A ‚ü∂ S.rightHomology) :
    f‚ÇÅ = f‚ÇÇ ‚Üî f‚ÇÅ ‚â´ S.rightHomologyŒπ = f‚ÇÇ ‚â´ S.rightHomologyŒπ := by
  rw [cancel_mono]

@[ext]
lemma rightHomology_ext {A : C} (f‚ÇÅ f‚ÇÇ : A ‚ü∂ S.rightHomology)
    (h : f‚ÇÅ ‚â´ S.rightHomologyŒπ = f‚ÇÇ ‚â´ S.rightHomologyŒπ) : f‚ÇÅ = f‚ÇÇ := by
  simpa only [rightHomology_ext_iff]

lemma opcycles_ext_iff {A : C} (f‚ÇÅ f‚ÇÇ : S.opcycles ‚ü∂ A) :
    f‚ÇÅ = f‚ÇÇ ‚Üî S.pOpcycles ‚â´ f‚ÇÅ = S.pOpcycles ‚â´ f‚ÇÇ := by
  rw [cancel_epi]

@[ext]
lemma opcycles_ext {A : C} (f‚ÇÅ f‚ÇÇ : S.opcycles ‚ü∂ A)
    (h : S.pOpcycles ‚â´ f‚ÇÅ = S.pOpcycles ‚â´ f‚ÇÇ) : f‚ÇÅ = f‚ÇÇ := by
  simpa only [opcycles_ext_iff]

lemma isIso_pOpcycles (hf : S.f = 0) : IsIso S.pOpcycles :=
  RightHomologyData.isIso_p _ hf

/-- When `S.f = 0`, this is the canonical isomorphism `S.opcycles ‚âÖ S.X‚ÇÇ`
induced by `S.pOpcycles`. -/
@[simps! inv]
noncomputable def opcyclesIsoX‚ÇÇ (hf : S.f = 0) : S.opcycles ‚âÖ S.X‚ÇÇ := by
  have := S.isIso_pOpcycles hf
  exact (asIso S.pOpcycles).symm

@[reassoc (attr := simp)]
lemma opcyclesIsoX‚ÇÇ_inv_hom_id (hf : S.f = 0) :
    S.pOpcycles ‚â´ (S.opcyclesIsoX‚ÇÇ hf).hom = ùüô _ := (S.opcyclesIsoX‚ÇÇ hf).inv_hom_id

@[reassoc (attr := simp)]
lemma opcyclesIsoX‚ÇÇ_hom_inv_id (hf : S.f = 0) :
    (S.opcyclesIsoX‚ÇÇ hf).hom ‚â´ S.pOpcycles = ùüô _ := (S.opcyclesIsoX‚ÇÇ hf).hom_inv_id

lemma isIso_rightHomologyŒπ (hg : S.g = 0) : IsIso S.rightHomologyŒπ :=
  RightHomologyData.isIso_Œπ _ hg

/-- When `S.g = 0`, this is the canonical isomorphism `S.opcycles ‚âÖ S.rightHomology` induced
by `S.rightHomologyŒπ`. -/
@[simps! inv]
noncomputable def opcyclesIsoRightHomology (hg : S.g = 0) : S.opcycles ‚âÖ S.rightHomology := by
  have := S.isIso_rightHomologyŒπ hg
  exact (asIso S.rightHomologyŒπ).symm

@[reassoc (attr := simp)]
lemma opcyclesIsoRightHomology_inv_hom_id (hg : S.g = 0) :
    S.rightHomologyŒπ ‚â´ (S.opcyclesIsoRightHomology hg).hom = ùüô _ :=
  (S.opcyclesIsoRightHomology hg).inv_hom_id

@[reassoc (attr := simp)]
lemma opcyclesIsoRightHomology_hom_inv_id (hg : S.g = 0) :
    (S.opcyclesIsoRightHomology hg).hom ‚â´ S.rightHomologyŒπ  = ùüô _ :=
  (S.opcyclesIsoRightHomology hg).hom_inv_id

end

section

variable (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData)

/-- The (unique) right homology map data associated to a morphism of short complexes that
are both equipped with right homology data. -/
def rightHomologyMapData : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ := default

/-- Given a morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` of short complexes and right homology data `h‚ÇÅ` and `h‚ÇÇ`
for `S‚ÇÅ` and `S‚ÇÇ` respectively, this is the induced right homology map `h‚ÇÅ.H ‚ü∂ h‚ÇÅ.H`. -/
def rightHomologyMap' : h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H := (rightHomologyMapData œÜ _ _).œÜH

/-- Given a morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` of short complexes and right homology data `h‚ÇÅ` and `h‚ÇÇ`
for `S‚ÇÅ` and `S‚ÇÇ` respectively, this is the induced morphism `h‚ÇÅ.K ‚ü∂ h‚ÇÅ.K` on opcycles. -/
def opcyclesMap' : h‚ÇÅ.Q ‚ü∂ h‚ÇÇ.Q := (rightHomologyMapData œÜ _ _).œÜQ

@[reassoc (attr := simp)]
lemma p_opcyclesMap' : h‚ÇÅ.p ‚â´ opcyclesMap' œÜ h‚ÇÅ h‚ÇÇ = œÜ.œÑ‚ÇÇ ‚â´ h‚ÇÇ.p :=
  RightHomologyMapData.commp _

@[reassoc (attr := simp)]
lemma opcyclesMap'_g' : opcyclesMap' œÜ h‚ÇÅ h‚ÇÇ ‚â´ h‚ÇÇ.g' = h‚ÇÅ.g' ‚â´ œÜ.œÑ‚ÇÉ := by
  simp only [‚Üê cancel_epi h‚ÇÅ.p, assoc, œÜ.comm‚ÇÇ‚ÇÉ, p_opcyclesMap'_assoc,
    RightHomologyData.p_g'_assoc, RightHomologyData.p_g']

@[reassoc (attr := simp)]
lemma rightHomologyŒπ_naturality' :
    rightHomologyMap' œÜ h‚ÇÅ h‚ÇÇ ‚â´ h‚ÇÇ.Œπ = h‚ÇÅ.Œπ ‚â´ opcyclesMap' œÜ h‚ÇÅ h‚ÇÇ :=
  RightHomologyMapData.commŒπ _

end

section

variable [HasRightHomology S‚ÇÅ] [HasRightHomology S‚ÇÇ] (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)

/-- The (right) homology map `S‚ÇÅ.rightHomology ‚ü∂ S‚ÇÇ.rightHomology` induced by a morphism
`S‚ÇÅ ‚ü∂ S‚ÇÇ` of short complexes. -/
noncomputable def rightHomologyMap : S‚ÇÅ.rightHomology ‚ü∂ S‚ÇÇ.rightHomology :=
  rightHomologyMap' œÜ _ _

/-- The morphism `S‚ÇÅ.opcycles ‚ü∂ S‚ÇÇ.opcycles` induced by a morphism `S‚ÇÅ ‚ü∂ S‚ÇÇ` of short complexes. -/
noncomputable def opcyclesMap : S‚ÇÅ.opcycles ‚ü∂ S‚ÇÇ.opcycles :=
  opcyclesMap' œÜ _ _

@[reassoc (attr := simp)]
lemma p_opcyclesMap : S‚ÇÅ.pOpcycles ‚â´ opcyclesMap œÜ = œÜ.œÑ‚ÇÇ ‚â´ S‚ÇÇ.pOpcycles :=
  p_opcyclesMap' _ _ _

@[reassoc (attr := simp)]
lemma fromOpcycles_naturality : opcyclesMap œÜ ‚â´ S‚ÇÇ.fromOpcycles = S‚ÇÅ.fromOpcycles ‚â´ œÜ.œÑ‚ÇÉ :=
  opcyclesMap'_g' _ _ _

@[reassoc (attr := simp)]
lemma rightHomologyŒπ_naturality :
    rightHomologyMap œÜ ‚â´ S‚ÇÇ.rightHomologyŒπ = S‚ÇÅ.rightHomologyŒπ ‚â´ opcyclesMap œÜ :=
  rightHomologyŒπ_naturality' _ _ _

end

namespace RightHomologyMapData

variable {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {h‚ÇÅ : S‚ÇÅ.RightHomologyData} {h‚ÇÇ : S‚ÇÇ.RightHomologyData}
  (Œ≥ : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ)

lemma rightHomologyMap'_eq : rightHomologyMap' œÜ h‚ÇÅ h‚ÇÇ = Œ≥.œÜH :=
  RightHomologyMapData.congr_œÜH (Subsingleton.elim _ _)

lemma opcyclesMap'_eq : opcyclesMap' œÜ h‚ÇÅ h‚ÇÇ = Œ≥.œÜQ :=
  RightHomologyMapData.congr_œÜQ (Subsingleton.elim _ _)

end RightHomologyMapData

@[simp]
lemma rightHomologyMap'_id (h : S.RightHomologyData) :
    rightHomologyMap' (ùüô S) h h = ùüô _ :=
  (RightHomologyMapData.id h).rightHomologyMap'_eq

@[simp]
lemma opcyclesMap'_id (h : S.RightHomologyData) :
    opcyclesMap' (ùüô S) h h = ùüô _ :=
  (RightHomologyMapData.id h).opcyclesMap'_eq

variable (S)

@[simp]
lemma rightHomologyMap_id [HasRightHomology S] :
    rightHomologyMap (ùüô S) = ùüô _ :=
  rightHomologyMap'_id _

@[simp]
lemma opcyclesMap_id [HasRightHomology S] :
    opcyclesMap (ùüô S) = ùüô _ :=
  opcyclesMap'_id _

@[simp]
lemma rightHomologyMap'_zero (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData) :
    rightHomologyMap' 0 h‚ÇÅ h‚ÇÇ = 0 :=
  (RightHomologyMapData.zero h‚ÇÅ h‚ÇÇ).rightHomologyMap'_eq

@[simp]
lemma opcyclesMap'_zero (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData) :
    opcyclesMap' 0 h‚ÇÅ h‚ÇÇ = 0 :=
  (RightHomologyMapData.zero h‚ÇÅ h‚ÇÇ).opcyclesMap'_eq

variable (S‚ÇÅ S‚ÇÇ)

@[simp]
lemma rightHomologyMap_zero [HasRightHomology S‚ÇÅ] [HasRightHomology S‚ÇÇ] :
    rightHomologyMap (0 : S‚ÇÅ ‚ü∂ S‚ÇÇ) = 0 :=
  rightHomologyMap'_zero _ _

@[simp]
lemma opcyclesMap_zero [HasRightHomology S‚ÇÅ] [HasRightHomology S‚ÇÇ] :
    opcyclesMap (0 : S‚ÇÅ ‚ü∂ S‚ÇÇ) = 0 :=
  opcyclesMap'_zero _ _

variable {S‚ÇÅ S‚ÇÇ}

@[reassoc]
lemma rightHomologyMap'_comp (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ)
    (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData) (h‚ÇÉ : S‚ÇÉ.RightHomologyData) :
    rightHomologyMap' (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) h‚ÇÅ h‚ÇÉ = rightHomologyMap' œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ ‚â´
      rightHomologyMap' œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ := by
  let Œ≥‚ÇÅ := rightHomologyMapData œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ
  let Œ≥‚ÇÇ := rightHomologyMapData œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ
  rw [Œ≥‚ÇÅ.rightHomologyMap'_eq, Œ≥‚ÇÇ.rightHomologyMap'_eq, (Œ≥‚ÇÅ.comp Œ≥‚ÇÇ).rightHomologyMap'_eq,
    RightHomologyMapData.comp_œÜH]

@[reassoc]
lemma opcyclesMap'_comp (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ)
    (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData) (h‚ÇÉ : S‚ÇÉ.RightHomologyData) :
    opcyclesMap' (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) h‚ÇÅ h‚ÇÉ = opcyclesMap' œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ ‚â´ opcyclesMap' œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ := by
  let Œ≥‚ÇÅ := rightHomologyMapData œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ
  let Œ≥‚ÇÇ := rightHomologyMapData œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ
  rw [Œ≥‚ÇÅ.opcyclesMap'_eq, Œ≥‚ÇÇ.opcyclesMap'_eq, (Œ≥‚ÇÅ.comp Œ≥‚ÇÇ).opcyclesMap'_eq,
    RightHomologyMapData.comp_œÜQ]

@[simp]
lemma rightHomologyMap_comp [HasRightHomology S‚ÇÅ] [HasRightHomology S‚ÇÇ] [HasRightHomology S‚ÇÉ]
    (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
    rightHomologyMap (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) = rightHomologyMap œÜ‚ÇÅ ‚â´ rightHomologyMap œÜ‚ÇÇ :=
rightHomologyMap'_comp _ _ _ _ _

@[simp]
lemma opcyclesMap_comp [HasRightHomology S‚ÇÅ] [HasRightHomology S‚ÇÇ] [HasRightHomology S‚ÇÉ]
    (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
    opcyclesMap (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) = opcyclesMap œÜ‚ÇÅ ‚â´ opcyclesMap œÜ‚ÇÇ :=
  opcyclesMap'_comp _ _ _ _ _

attribute [simp] rightHomologyMap_comp opcyclesMap_comp

/-- An isomorphism of short complexes `S‚ÇÅ ‚âÖ S‚ÇÇ` induces an isomorphism on the `H` fields
of right homology data of `S‚ÇÅ` and `S‚ÇÇ`. -/
@[simps]
def rightHomologyMapIso' (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.RightHomologyData)
    (h‚ÇÇ : S‚ÇÇ.RightHomologyData) : h‚ÇÅ.H ‚âÖ h‚ÇÇ.H where
  hom := rightHomologyMap' e.hom h‚ÇÅ h‚ÇÇ
  inv := rightHomologyMap' e.inv h‚ÇÇ h‚ÇÅ
  hom_inv_id := by rw [‚Üê rightHomologyMap'_comp, e.hom_inv_id, rightHomologyMap'_id]
  inv_hom_id := by rw [‚Üê rightHomologyMap'_comp, e.inv_hom_id, rightHomologyMap'_id]

instance isIso_rightHomologyMap'_of_isIso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [IsIso œÜ]
    (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData) :
    IsIso (rightHomologyMap' œÜ h‚ÇÅ h‚ÇÇ) :=
  (inferInstance : IsIso (rightHomologyMapIso' (asIso œÜ) h‚ÇÅ h‚ÇÇ).hom)

/-- An isomorphism of short complexes `S‚ÇÅ ‚âÖ S‚ÇÇ` induces an isomorphism on the `Q` fields
of right homology data of `S‚ÇÅ` and `S‚ÇÇ`. -/
@[simps]
def opcyclesMapIso' (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.RightHomologyData)
    (h‚ÇÇ : S‚ÇÇ.RightHomologyData) : h‚ÇÅ.Q ‚âÖ h‚ÇÇ.Q where
  hom := opcyclesMap' e.hom h‚ÇÅ h‚ÇÇ
  inv := opcyclesMap' e.inv h‚ÇÇ h‚ÇÅ
  hom_inv_id := by rw [‚Üê opcyclesMap'_comp, e.hom_inv_id, opcyclesMap'_id]
  inv_hom_id := by rw [‚Üê opcyclesMap'_comp, e.inv_hom_id, opcyclesMap'_id]

instance isIso_opcyclesMap'_of_isIso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [IsIso œÜ]
    (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData) :
    IsIso (opcyclesMap' œÜ h‚ÇÅ h‚ÇÇ) :=
  (inferInstance : IsIso (opcyclesMapIso' (asIso œÜ) h‚ÇÅ h‚ÇÇ).hom)

/-- The isomorphism `S‚ÇÅ.rightHomology ‚âÖ S‚ÇÇ.rightHomology` induced by an isomorphism of
short complexes `S‚ÇÅ ‚âÖ S‚ÇÇ`. -/
@[simps]
noncomputable def rightHomologyMapIso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) [S‚ÇÅ.HasRightHomology]
    [S‚ÇÇ.HasRightHomology] : S‚ÇÅ.rightHomology ‚âÖ S‚ÇÇ.rightHomology where
  hom := rightHomologyMap e.hom
  inv := rightHomologyMap e.inv
  hom_inv_id := by rw [‚Üê rightHomologyMap_comp, e.hom_inv_id, rightHomologyMap_id]
  inv_hom_id := by rw [‚Üê rightHomologyMap_comp, e.inv_hom_id, rightHomologyMap_id]

instance isIso_rightHomologyMap_of_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [IsIso œÜ] [S‚ÇÅ.HasRightHomology]
    [S‚ÇÇ.HasRightHomology] :
    IsIso (rightHomologyMap œÜ) :=
  (inferInstance : IsIso (rightHomologyMapIso (asIso œÜ)).hom)

/-- The isomorphism `S‚ÇÅ.opcycles ‚âÖ S‚ÇÇ.opcycles` induced by an isomorphism
of short complexes `S‚ÇÅ ‚âÖ S‚ÇÇ`. -/
@[simps]
noncomputable def opcyclesMapIso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) [S‚ÇÅ.HasRightHomology]
    [S‚ÇÇ.HasRightHomology] : S‚ÇÅ.opcycles ‚âÖ S‚ÇÇ.opcycles where
  hom := opcyclesMap e.hom
  inv := opcyclesMap e.inv
  hom_inv_id := by rw [‚Üê opcyclesMap_comp, e.hom_inv_id, opcyclesMap_id]
  inv_hom_id := by rw [‚Üê opcyclesMap_comp, e.inv_hom_id, opcyclesMap_id]

instance isIso_opcyclesMap_of_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [IsIso œÜ] [S‚ÇÅ.HasRightHomology]
    [S‚ÇÇ.HasRightHomology] : IsIso (opcyclesMap œÜ) :=
  (inferInstance : IsIso (opcyclesMapIso (asIso œÜ)).hom)

variable {S}

namespace RightHomologyData

variable (h : S.RightHomologyData) [S.HasRightHomology]

/-- The isomorphism `S.rightHomology ‚âÖ h.H` induced by a right homology data `h` for a
short complex `S`. -/
noncomputable def rightHomologyIso : S.rightHomology ‚âÖ h.H :=
  rightHomologyMapIso' (Iso.refl _) _ _

/-- The isomorphism `S.opcycles ‚âÖ h.Q` induced by a right homology data `h` for a
short complex `S`. -/
noncomputable def opcyclesIso : S.opcycles ‚âÖ h.Q :=
  opcyclesMapIso' (Iso.refl _) _ _

@[reassoc (attr := simp)]
lemma p_comp_opcyclesIso_inv : h.p ‚â´ h.opcyclesIso.inv = S.pOpcycles := by
  dsimp [pOpcycles, RightHomologyData.opcyclesIso]
  simp only [p_opcyclesMap', id_œÑ‚ÇÇ, id_comp]

@[reassoc (attr := simp)]
lemma pOpcycles_comp_opcyclesIso_hom : S.pOpcycles ‚â´ h.opcyclesIso.hom = h.p := by
  simp only [‚Üê h.p_comp_opcyclesIso_inv, assoc, Iso.inv_hom_id, comp_id]

@[reassoc (attr := simp)]
lemma rightHomologyIso_inv_comp_rightHomologyŒπ :
    h.rightHomologyIso.inv ‚â´ S.rightHomologyŒπ = h.Œπ ‚â´ h.opcyclesIso.inv := by
  dsimp only [rightHomologyŒπ, rightHomologyIso, opcyclesIso, rightHomologyMapIso',
    opcyclesMapIso', Iso.refl]
  rw [rightHomologyŒπ_naturality']

@[reassoc (attr := simp)]
lemma rightHomologyIso_hom_comp_Œπ :
    h.rightHomologyIso.hom ‚â´ h.Œπ = S.rightHomologyŒπ ‚â´ h.opcyclesIso.hom := by
  simp only [‚Üê cancel_mono h.opcyclesIso.inv, ‚Üê cancel_epi h.rightHomologyIso.inv,
    assoc, Iso.inv_hom_id_assoc, Iso.hom_inv_id, comp_id, rightHomologyIso_inv_comp_rightHomologyŒπ]

end RightHomologyData

namespace RightHomologyMapData

variable {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {h‚ÇÅ : S‚ÇÅ.RightHomologyData} {h‚ÇÇ : S‚ÇÇ.RightHomologyData}
  (Œ≥ : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ)

lemma rightHomologyMap_eq [S‚ÇÅ.HasRightHomology] [S‚ÇÇ.HasRightHomology] :
    rightHomologyMap œÜ = h‚ÇÅ.rightHomologyIso.hom ‚â´ Œ≥.œÜH ‚â´ h‚ÇÇ.rightHomologyIso.inv := by
  dsimp [RightHomologyData.rightHomologyIso, rightHomologyMapIso']
  rw [‚Üê Œ≥.rightHomologyMap'_eq, ‚Üê rightHomologyMap'_comp,
    ‚Üê rightHomologyMap'_comp, id_comp, comp_id]
  rfl

lemma opcyclesMap_eq [S‚ÇÅ.HasRightHomology] [S‚ÇÇ.HasRightHomology] :
    opcyclesMap œÜ = h‚ÇÅ.opcyclesIso.hom ‚â´ Œ≥.œÜQ ‚â´ h‚ÇÇ.opcyclesIso.inv := by
  dsimp [RightHomologyData.opcyclesIso, cyclesMapIso']
  rw [‚Üê Œ≥.opcyclesMap'_eq, ‚Üê opcyclesMap'_comp, ‚Üê opcyclesMap'_comp, id_comp, comp_id]
  rfl

lemma rightHomologyMap_comm [S‚ÇÅ.HasRightHomology] [S‚ÇÇ.HasRightHomology] :
    rightHomologyMap œÜ ‚â´ h‚ÇÇ.rightHomologyIso.hom = h‚ÇÅ.rightHomologyIso.hom ‚â´ Œ≥.œÜH := by
  simp only [Œ≥.rightHomologyMap_eq, assoc, Iso.inv_hom_id, comp_id]

lemma opcyclesMap_comm [S‚ÇÅ.HasRightHomology] [S‚ÇÇ.HasRightHomology] :
    opcyclesMap œÜ ‚â´ h‚ÇÇ.opcyclesIso.hom = h‚ÇÅ.opcyclesIso.hom ‚â´ Œ≥.œÜQ := by
  simp only [Œ≥.opcyclesMap_eq, assoc, Iso.inv_hom_id, comp_id]

end RightHomologyMapData

section

variable (C)
variable [HasKernels C] [HasCokernels C]

/-- The right homology functor `ShortComplex C ‚•§ C`, where the right homology of a
short complex `S` is understood as a kernel of the obvious map `S.fromOpcycles : S.opcycles ‚ü∂ S.X‚ÇÉ`
where `S.opcycles` is a cokernel of `S.f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ`. -/
@[simps]
noncomputable def rightHomologyFunctor : ShortComplex C ‚•§ C where
  obj S := S.rightHomology
  map := rightHomologyMap

/-- The opcycles functor `ShortComplex C ‚•§ C` which sends a short complex `S` to `S.opcycles`
which is a cokernel of `S.f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ`. -/
@[simps]
noncomputable def opcyclesFunctor :
    ShortComplex C ‚•§ C where
  obj S := S.opcycles
  map := opcyclesMap

/-- The natural transformation `S.rightHomology ‚ü∂ S.opcycles` for all short complexes `S`. -/
@[simps]
noncomputable def rightHomologyŒπNatTrans :
    rightHomologyFunctor C ‚ü∂ opcyclesFunctor C where
  app S := rightHomologyŒπ S
  naturality := fun _ _ œÜ => rightHomologyŒπ_naturality œÜ

/-- The natural transformation `S.X‚ÇÇ ‚ü∂ S.opcycles` for all short complexes `S`. -/
@[simps]
noncomputable def pOpcyclesNatTrans :
    ShortComplex.œÄ‚ÇÇ ‚ü∂ opcyclesFunctor C where
  app S := S.pOpcycles

/-- The natural transformation `S.opcycles ‚ü∂ S.X‚ÇÉ` for all short complexes `S`. -/
@[simps]
noncomputable def fromOpcyclesNatTrans :
    opcyclesFunctor C ‚ü∂ œÄ‚ÇÉ where
  app S := S.fromOpcycles
  naturality := fun _ _  œÜ => fromOpcycles_naturality œÜ

end

/-- A left homology map data for a morphism of short complexes induces
a right homology map data in the opposite category. -/
@[simps]
def LeftHomologyMapData.op {S‚ÇÅ S‚ÇÇ : ShortComplex C} {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ}
    {h‚ÇÅ : S‚ÇÅ.LeftHomologyData} {h‚ÇÇ : S‚ÇÇ.LeftHomologyData}
    (œà : LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) : RightHomologyMapData (opMap œÜ) h‚ÇÇ.op h‚ÇÅ.op where
  œÜQ := œà.œÜK.op
  œÜH := œà.œÜH.op
  commp := Quiver.Hom.unop_inj (by simp)
  commg' := Quiver.Hom.unop_inj (by simp)
  commŒπ := Quiver.Hom.unop_inj (by simp)

/-- A left homology map data for a morphism of short complexes in the opposite category
induces a right homology map data in the original category. -/
@[simps]
def LeftHomologyMapData.unop {S‚ÇÅ S‚ÇÇ : ShortComplex C·µí·µñ} {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ}
    {h‚ÇÅ : S‚ÇÅ.LeftHomologyData} {h‚ÇÇ : S‚ÇÇ.LeftHomologyData}
    (œà : LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) : RightHomologyMapData (unopMap œÜ) h‚ÇÇ.unop h‚ÇÅ.unop where
  œÜQ := œà.œÜK.unop
  œÜH := œà.œÜH.unop
  commp := Quiver.Hom.op_inj (by simp)
  commg' := Quiver.Hom.op_inj (by simp)
  commŒπ := Quiver.Hom.op_inj (by simp)

/-- A right homology map data for a morphism of short complexes induces
a left homology map data in the opposite category. -/
@[simps]
def RightHomologyMapData.op {S‚ÇÅ S‚ÇÇ : ShortComplex C} {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ}
    {h‚ÇÅ : S‚ÇÅ.RightHomologyData} {h‚ÇÇ : S‚ÇÇ.RightHomologyData}
    (œà : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) : LeftHomologyMapData (opMap œÜ) h‚ÇÇ.op h‚ÇÅ.op where
  œÜK := œà.œÜQ.op
  œÜH := œà.œÜH.op
  commi := Quiver.Hom.unop_inj (by simp)
  commf' := Quiver.Hom.unop_inj (by simp)
  commœÄ := Quiver.Hom.unop_inj (by simp)

/-- A right homology map data for a morphism of short complexes in the opposite category
induces a left homology map data in the original category. -/
@[simps]
def RightHomologyMapData.unop {S‚ÇÅ S‚ÇÇ : ShortComplex C·µí·µñ} {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ}
    {h‚ÇÅ : S‚ÇÅ.RightHomologyData} {h‚ÇÇ : S‚ÇÇ.RightHomologyData}
    (œà : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) : LeftHomologyMapData (unopMap œÜ) h‚ÇÇ.unop h‚ÇÅ.unop where
  œÜK := œà.œÜQ.unop
  œÜH := œà.œÜH.unop
  commi := Quiver.Hom.op_inj (by simp)
  commf' := Quiver.Hom.op_inj (by simp)
  commœÄ := Quiver.Hom.op_inj (by simp)

variable (S)

/-- The right homology in the opposite category of the opposite of a short complex identifies
to the left homology of this short complex. -/
noncomputable def rightHomologyOpIso [S.HasLeftHomology] :
    S.op.rightHomology ‚âÖ Opposite.op S.leftHomology :=
  S.leftHomologyData.op.rightHomologyIso

/-- The left homology in the opposite category of the opposite of a short complex identifies
to the right homology of this short complex. -/
noncomputable def leftHomologyOpIso [S.HasRightHomology] :
    S.op.leftHomology ‚âÖ Opposite.op S.rightHomology :=
  S.rightHomologyData.op.leftHomologyIso

/-- The opcycles in the opposite category of the opposite of a short complex identifies
to the cycles of this short complex. -/
noncomputable def opcyclesOpIso [S.HasLeftHomology] :
    S.op.opcycles ‚âÖ Opposite.op S.cycles :=
  S.leftHomologyData.op.opcyclesIso

/-- The cycles in the opposite category of the opposite of a short complex identifies
to the opcycles of this short complex. -/
noncomputable def cyclesOpIso [S.HasRightHomology] :
    S.op.cycles ‚âÖ Opposite.op S.opcycles :=
  S.rightHomologyData.op.cyclesIso

@[simp]
lemma leftHomologyMap'_op
    (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.LeftHomologyData) (h‚ÇÇ : S‚ÇÇ.LeftHomologyData) :
    (leftHomologyMap' œÜ h‚ÇÅ h‚ÇÇ).op = rightHomologyMap' (opMap œÜ) h‚ÇÇ.op h‚ÇÅ.op := by
  let Œ≥ : LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ := leftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ
  simp only [Œ≥.leftHomologyMap'_eq, Œ≥.op.rightHomologyMap'_eq,
    LeftHomologyMapData.op_œÜH]

lemma leftHomologyMap_op (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [S‚ÇÅ.HasLeftHomology] [S‚ÇÇ.HasLeftHomology] :
    (leftHomologyMap œÜ).op = S‚ÇÇ.rightHomologyOpIso.inv ‚â´ rightHomologyMap (opMap œÜ) ‚â´
      S‚ÇÅ.rightHomologyOpIso.hom := by
  dsimp [rightHomologyOpIso, RightHomologyData.rightHomologyIso, rightHomologyMap,
    leftHomologyMap]
  simp only [‚Üê rightHomologyMap'_comp, comp_id, id_comp, leftHomologyMap'_op]

@[simp]
lemma rightHomologyMap'_op
    (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData) :
    (rightHomologyMap' œÜ h‚ÇÅ h‚ÇÇ).op = leftHomologyMap' (opMap œÜ) h‚ÇÇ.op h‚ÇÅ.op := by
  let Œ≥ : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ := rightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ
  simp only [Œ≥.rightHomologyMap'_eq, Œ≥.op.leftHomologyMap'_eq,
    RightHomologyMapData.op_œÜH]

lemma rightHomologyMap_op (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [S‚ÇÅ.HasRightHomology] [S‚ÇÇ.HasRightHomology] :
    (rightHomologyMap œÜ).op = S‚ÇÇ.leftHomologyOpIso.inv ‚â´ leftHomologyMap (opMap œÜ) ‚â´
      S‚ÇÅ.leftHomologyOpIso.hom := by
  dsimp [leftHomologyOpIso, LeftHomologyData.leftHomologyIso, leftHomologyMap,
    rightHomologyMap]
  simp only [‚Üê leftHomologyMap'_comp, comp_id, id_comp, rightHomologyMap'_op]

namespace RightHomologyData

section

variable (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : RightHomologyData S‚ÇÅ) [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ]

/-- If `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` is a morphism of short complexes such that `œÜ.œÑ‚ÇÅ` is epi, `œÜ.œÑ‚ÇÇ` is an iso
and `œÜ.œÑ‚ÇÉ` is mono, then a right homology data for `S‚ÇÅ` induces a right homology data for `S‚ÇÇ` with
the same `Q` and `H` fields. This is obtained by dualising `LeftHomologyData.ofEpiOfIsIsoOfMono'`.
The inverse construction is `ofEpiOfIsIsoOfMono'`.  -/
noncomputable def ofEpiOfIsIsoOfMono : RightHomologyData S‚ÇÇ := by
  haveI : Epi (opMap œÜ).œÑ‚ÇÅ := by dsimp; infer_instance
  haveI : IsIso (opMap œÜ).œÑ‚ÇÇ := by dsimp; infer_instance
  haveI : Mono (opMap œÜ).œÑ‚ÇÉ := by dsimp; infer_instance
  exact (LeftHomologyData.ofEpiOfIsIsoOfMono' (opMap œÜ) h.op).unop

@[simp] lemma ofEpiOfIsIsoOfMono_Q : (ofEpiOfIsIsoOfMono œÜ h).Q = h.Q := rfl

@[simp] lemma ofEpiOfIsIsoOfMono_H : (ofEpiOfIsIsoOfMono œÜ h).H = h.H := rfl

@[simp] lemma ofEpiOfIsIsoOfMono_p : (ofEpiOfIsIsoOfMono œÜ h).p = inv œÜ.œÑ‚ÇÇ ‚â´ h.p := by
  simp [ofEpiOfIsIsoOfMono, opMap]

@[simp] lemma ofEpiOfIsIsoOfMono_Œπ : (ofEpiOfIsIsoOfMono œÜ h).Œπ = h.Œπ := rfl

@[simp] lemma ofEpiOfIsIsoOfMono_g' : (ofEpiOfIsIsoOfMono œÜ h).g' = h.g' ‚â´ œÜ.œÑ‚ÇÉ := by
  simp [ofEpiOfIsIsoOfMono, opMap]

end

section

variable (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : RightHomologyData S‚ÇÇ) [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ]

/-- If `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` is a morphism of short complexes such that `œÜ.œÑ‚ÇÅ` is epi, `œÜ.œÑ‚ÇÇ` is an iso
and `œÜ.œÑ‚ÇÉ` is mono, then a right homology data for `S‚ÇÇ` induces a right homology data for `S‚ÇÅ` with
the same `Q` and `H` fields. This is obtained by dualising `LeftHomologyData.ofEpiOfIsIsoOfMono`.
The inverse construction is `ofEpiOfIsIsoOfMono`.  -/
noncomputable def ofEpiOfIsIsoOfMono' : RightHomologyData S‚ÇÅ := by
  haveI : Epi (opMap œÜ).œÑ‚ÇÅ := by dsimp; infer_instance
  haveI : IsIso (opMap œÜ).œÑ‚ÇÇ := by dsimp; infer_instance
  haveI : Mono (opMap œÜ).œÑ‚ÇÉ := by dsimp; infer_instance
  exact (LeftHomologyData.ofEpiOfIsIsoOfMono (opMap œÜ) h.op).unop

@[simp] lemma ofEpiOfIsIsoOfMono'_Q : (ofEpiOfIsIsoOfMono' œÜ h).Q = h.Q := rfl

@[simp] lemma ofEpiOfIsIsoOfMono'_H : (ofEpiOfIsIsoOfMono' œÜ h).H = h.H := rfl

@[simp] lemma ofEpiOfIsIsoOfMono'_p : (ofEpiOfIsIsoOfMono' œÜ h).p = œÜ.œÑ‚ÇÇ ‚â´ h.p := by
  simp [ofEpiOfIsIsoOfMono', opMap]

@[simp] lemma ofEpiOfIsIsoOfMono'_Œπ : (ofEpiOfIsIsoOfMono' œÜ h).Œπ = h.Œπ := rfl

@[simp] lemma ofEpiOfIsIsoOfMono'_g'_œÑ‚ÇÉ : (ofEpiOfIsIsoOfMono' œÜ h).g' ‚â´ œÜ.œÑ‚ÇÉ = h.g' := by
  rw [‚Üê cancel_epi (ofEpiOfIsIsoOfMono' œÜ h).p, p_g'_assoc, ofEpiOfIsIsoOfMono'_p,
    assoc, p_g', œÜ.comm‚ÇÇ‚ÇÉ]

end

/-- If `e : S‚ÇÅ ‚âÖ S‚ÇÇ` is an isomorphism of short complexes and `h‚ÇÅ : RightomologyData S‚ÇÅ`,
this is the right homology data for `S‚ÇÇ` deduced from the isomorphism. -/
noncomputable def ofIso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h‚ÇÅ : RightHomologyData S‚ÇÅ) : RightHomologyData S‚ÇÇ :=
  h‚ÇÅ.ofEpiOfIsIsoOfMono e.hom

end RightHomologyData

lemma hasRightHomology_of_epi_of_isIso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [HasRightHomology S‚ÇÅ]
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] : HasRightHomology S‚ÇÇ :=
  HasRightHomology.mk' (RightHomologyData.ofEpiOfIsIsoOfMono œÜ S‚ÇÅ.rightHomologyData)

lemma hasRightHomology_of_epi_of_isIso_of_mono' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [HasRightHomology S‚ÇÇ]
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] : HasRightHomology S‚ÇÅ :=
HasRightHomology.mk' (RightHomologyData.ofEpiOfIsIsoOfMono' œÜ S‚ÇÇ.rightHomologyData)

lemma hasRightHomology_of_iso {S‚ÇÅ S‚ÇÇ : ShortComplex C}
    (e : S‚ÇÅ ‚âÖ S‚ÇÇ) [HasRightHomology S‚ÇÅ] : HasRightHomology S‚ÇÇ :=
  hasRightHomology_of_epi_of_isIso_of_mono e.hom

namespace RightHomologyMapData

/-- This right homology map data expresses compatibilities of the right homology data
constructed by `RightHomologyData.ofEpiOfIsIsoOfMono` -/
@[simps]
def ofEpiOfIsIsoOfMono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : RightHomologyData S‚ÇÅ)
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] :
    RightHomologyMapData œÜ h (RightHomologyData.ofEpiOfIsIsoOfMono œÜ h) where
  œÜQ := ùüô _
  œÜH := ùüô _

/-- This right homology map data expresses compatibilities of the right homology data
constructed by `RightHomologyData.ofEpiOfIsIsoOfMono'` -/
@[simps]
noncomputable def ofEpiOfIsIsoOfMono' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : RightHomologyData S‚ÇÇ)
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] :
    RightHomologyMapData œÜ (RightHomologyData.ofEpiOfIsIsoOfMono' œÜ h) h where
  œÜQ := ùüô _
  œÜH := ùüô _

end RightHomologyMapData

instance (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData)
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] :
    IsIso (rightHomologyMap' œÜ h‚ÇÅ h‚ÇÇ) := by
  let h‚ÇÇ' := RightHomologyData.ofEpiOfIsIsoOfMono œÜ h‚ÇÅ
  haveI : IsIso (rightHomologyMap' œÜ h‚ÇÅ h‚ÇÇ') := by
    rw [(RightHomologyMapData.ofEpiOfIsIsoOfMono œÜ h‚ÇÅ).rightHomologyMap'_eq]
    dsimp
    infer_instance
  have eq := rightHomologyMap'_comp œÜ (ùüô S‚ÇÇ) h‚ÇÅ h‚ÇÇ' h‚ÇÇ
  rw [comp_id] at eq
  rw [eq]
  infer_instance

/-- If a morphism of short complexes `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` is such that `œÜ.œÑ‚ÇÅ` is epi, `œÜ.œÑ‚ÇÇ` is an iso,
and `œÜ.œÑ‚ÇÉ` is mono, then the induced morphism on right homology is an isomorphism. -/
instance (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [S‚ÇÅ.HasRightHomology] [S‚ÇÇ.HasRightHomology]
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] :
    IsIso (rightHomologyMap œÜ) := by
  dsimp only [rightHomologyMap]
  infer_instance

variable (C)

section

variable [HasKernels C] [HasCokernels C] [HasKernels C·µí·µñ] [HasCokernels C·µí·µñ]

/-- The opposite of the right homology functor is the left homology functor. -/
@[simps!]
noncomputable def rightHomologyFunctorOpNatIso :
    (rightHomologyFunctor C).op ‚âÖ opFunctor C ‚ãô leftHomologyFunctor C·µí·µñ :=
  NatIso.ofComponents (fun S => (leftHomologyOpIso S.unop).symm)
    (by simp [rightHomologyMap_op])

/-- The opposite of the left homology functor is the right homology functor. -/
@[simps!]
noncomputable def leftHomologyFunctorOpNatIso :
    (leftHomologyFunctor C).op ‚âÖ opFunctor C ‚ãô rightHomologyFunctor C·µí·µñ :=
  NatIso.ofComponents (fun S => (rightHomologyOpIso S.unop).symm)
    (by simp [leftHomologyMap_op])

end

section

variable {C}
variable (h : RightHomologyData S) {A : C}
  (k : S.X‚ÇÇ ‚ü∂ A) (hk : S.f ‚â´ k = 0) [HasRightHomology S]

/-- A morphism `k : S.X‚ÇÇ ‚ü∂ A` such that `S.f ‚â´ k = 0` descends to a morphism `S.opcycles ‚ü∂ A`. -/
noncomputable def descOpcycles : S.opcycles ‚ü∂ A :=
  S.rightHomologyData.descQ k hk

@[reassoc (attr := simp)]
lemma p_descOpcycles : S.pOpcycles ‚â´ S.descOpcycles k hk = k :=
  RightHomologyData.p_descQ _ k hk

@[reassoc]
lemma descOpcycles_comp {A' : C} (Œ± : A ‚ü∂ A') :
    S.descOpcycles k hk ‚â´ Œ± = S.descOpcycles (k ‚â´ Œ±) (by rw [reassoc_of% hk, zero_comp]) := by
  simp only [‚Üê cancel_epi S.pOpcycles, p_descOpcycles_assoc, p_descOpcycles]

/-- Via `S.pOpcycles : S.X‚ÇÇ ‚ü∂ S.opcycles`, the object `S.opcycles` identifies to the
cokernel of `S.f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ`. -/
noncomputable def opcyclesIsCokernel :
    IsColimit (CokernelCofork.ofœÄ S.pOpcycles S.f_pOpcycles) :=
  S.rightHomologyData.hp

/-- The canonical isomorphism `S.opcycles ‚âÖ cokernel S.f`. -/
@[simps]
noncomputable def opcyclesIsoCokernel [HasCokernel S.f] : S.opcycles ‚âÖ cokernel S.f where
  hom := S.descOpcycles (cokernel.œÄ S.f) (by simp)
  inv := cokernel.desc S.f S.pOpcycles (by simp)

/-- The morphism `S.rightHomology ‚ü∂ A` obtained from a morphism `k : S.X‚ÇÇ ‚ü∂ A`
such that `S.f ‚â´ k = 0.` -/
@[simp]
noncomputable def descRightHomology : S.rightHomology ‚ü∂ A :=
  S.rightHomologyŒπ ‚â´ S.descOpcycles k hk

@[reassoc]
lemma rightHomologyŒπ_descOpcycles_œÄ_eq_zero_of_boundary (x : S.X‚ÇÉ ‚ü∂ A) (hx : k = S.g ‚â´ x) :
    S.rightHomologyŒπ ‚â´ S.descOpcycles k (by rw [hx, S.zero_assoc, zero_comp]) = 0 :=
  RightHomologyData.Œπ_descQ_eq_zero_of_boundary _ k x hx

@[reassoc (attr := simp)]
lemma rightHomologyŒπ_comp_fromOpcycles :
    S.rightHomologyŒπ ‚â´ S.fromOpcycles = 0 :=
  S.rightHomologyŒπ_descOpcycles_œÄ_eq_zero_of_boundary S.g (ùüô _) (by rw [comp_id])

/-- Via `S.rightHomologyŒπ : S.rightHomology ‚ü∂ S.opcycles`, the object `S.rightHomology` identifies
to the kernel of `S.fromOpcycles : S.opcycles ‚ü∂ S.X‚ÇÉ`. -/
noncomputable def rightHomologyIsKernel :
    IsLimit (KernelFork.ofŒπ S.rightHomologyŒπ S.rightHomologyŒπ_comp_fromOpcycles) :=
  S.rightHomologyData.hŒπ

variable {S}

@[reassoc (attr := simp)]
lemma opcyclesMap_comp_descOpcycles (œÜ : S‚ÇÅ ‚ü∂ S) [S‚ÇÅ.HasRightHomology] :
    opcyclesMap œÜ ‚â´ S.descOpcycles k hk =
      S‚ÇÅ.descOpcycles (œÜ.œÑ‚ÇÇ ‚â´ k) (by rw [‚Üê œÜ.comm‚ÇÅ‚ÇÇ_assoc, hk, comp_zero]) := by
  simp only [‚Üê cancel_epi (S‚ÇÅ.pOpcycles), p_opcyclesMap_assoc, p_descOpcycles]

@[reassoc (attr := simp)]
lemma RightHomologyData.opcyclesIso_inv_comp_descOpcycles :
    h.opcyclesIso.inv ‚â´ S.descOpcycles k hk = h.descQ k hk := by
  simp only [‚Üê cancel_epi h.p, p_comp_opcyclesIso_inv_assoc, p_descOpcycles, p_descQ]

@[simp]
lemma RightHomologyData.opcyclesIso_hom_comp_descQ :
    h.opcyclesIso.hom ‚â´ h.descQ k hk = S.descOpcycles k hk := by
  rw [‚Üê h.opcyclesIso_inv_comp_descOpcycles, Iso.hom_inv_id_assoc]

end

variable {C}

namespace HasRightHomology

lemma hasCokernel [S.HasRightHomology] : HasCokernel S.f :=
  ‚ü®‚ü®‚ü®_, S.rightHomologyData.hp‚ü©‚ü©‚ü©

lemma hasKernel [S.HasRightHomology] [HasCokernel S.f] :
    HasKernel (cokernel.desc S.f S.g S.zero) := by
  let h := S.rightHomologyData
  haveI : HasLimit (parallelPair h.g' 0) := ‚ü®‚ü®‚ü®_, h.hŒπ'‚ü©‚ü©‚ü©
  let e : parallelPair (cokernel.desc S.f S.g S.zero) 0 ‚âÖ parallelPair h.g' 0 :=
    parallelPair.ext (IsColimit.coconePointUniqueUpToIso (colimit.isColimit _) h.hp)
      (Iso.refl _) (coequalizer.hom_ext (by simp)) (by aesop_cat)
  exact hasLimitOfIso e.symm

end HasRightHomology

/-- The right homology of a short complex `S` identifies to the kernel of the canonical
morphism `cokernel S.f ‚ü∂ S.X‚ÇÉ`. -/
noncomputable def rightHomologyIsoKernelDesc [S.HasRightHomology] [HasCokernel S.f]
    [HasKernel (cokernel.desc S.f S.g S.zero)] :
    S.rightHomology ‚âÖ kernel (cokernel.desc S.f S.g S.zero) :=
  (RightHomologyData.ofHasCokernelOfHasKernel S).rightHomologyIso

/-! The following lemmas and instance gives a sufficient condition for a morphism
of short complexes to induce an isomorphism on opcycles. -/

lemma isIso_opcyclesMap'_of_isIso_of_epi (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÇ : IsIso œÜ.œÑ‚ÇÇ) (h‚ÇÅ : Epi œÜ.œÑ‚ÇÅ)
    (h‚ÇÅ : S‚ÇÅ.RightHomologyData) (h‚ÇÇ : S‚ÇÇ.RightHomologyData) :
    IsIso (opcyclesMap' œÜ h‚ÇÅ h‚ÇÇ) := by
  refine' ‚ü®h‚ÇÇ.descQ (inv œÜ.œÑ‚ÇÇ ‚â´ h‚ÇÅ.p) _, _, _‚ü©
  ¬∑ simp only [‚Üê cancel_epi œÜ.œÑ‚ÇÅ, comp_zero, œÜ.comm‚ÇÅ‚ÇÇ_assoc, IsIso.hom_inv_id_assoc, h‚ÇÅ.wp]
  ¬∑ simp only [‚Üê cancel_epi h‚ÇÅ.p, p_opcyclesMap'_assoc, h‚ÇÇ.p_descQ,
      IsIso.hom_inv_id_assoc, comp_id]
  ¬∑ simp only [‚Üê cancel_epi h‚ÇÇ.p, h‚ÇÇ.p_descQ_assoc, assoc, p_opcyclesMap',
      IsIso.inv_hom_id_assoc, comp_id]

lemma isIso_opcyclesMap_of_isIso_of_epi' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÇ : IsIso œÜ.œÑ‚ÇÇ) (h‚ÇÅ : Epi œÜ.œÑ‚ÇÅ)
    [S‚ÇÅ.HasRightHomology] [S‚ÇÇ.HasRightHomology] :
    IsIso (opcyclesMap œÜ) :=
  isIso_opcyclesMap'_of_isIso_of_epi œÜ h‚ÇÇ h‚ÇÅ _ _

instance isIso_opcyclesMap_of_isIso_of_epi (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [IsIso œÜ.œÑ‚ÇÇ] [Epi œÜ.œÑ‚ÇÅ]
    [S‚ÇÅ.HasRightHomology] [S‚ÇÇ.HasRightHomology] :
    IsIso (opcyclesMap œÜ) :=
  isIso_opcyclesMap_of_isIso_of_epi' œÜ inferInstance inferInstance

end ShortComplex

end CategoryTheory
