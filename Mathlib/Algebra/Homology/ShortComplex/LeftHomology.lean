/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.Algebra.Homology.ShortComplex.Basic
import Mathlib.CategoryTheory.Limits.Shapes.Kernels

/-!
# Left Homology of short complexes

Given a short complex `S : ShortComplex C`, which consists of two composable
maps `f : X‚ÇÅ ‚ü∂ X‚ÇÇ` and `g : X‚ÇÇ ‚ü∂ X‚ÇÉ` such that `f ‚â´ g = 0`, we shall define
here the "left homology" `S.leftHomology` of `S`. For this, we introduce the
notion of "left homology data". Such an `h : S.LeftHomologyData` consists of the
data of morphisms `i : K ‚ü∂ X‚ÇÇ` and `œÄ : K ‚ü∂ H` such that `i` identifies
`K` with the kernel of `g : X‚ÇÇ ‚ü∂ X‚ÇÉ`, and that `œÄ` identifies `H` with the cokernel
of the induced map `f' : X‚ÇÅ ‚ü∂ K`.

When such a `S.LeftHomologyData` exists, we shall say that `[S.HasLeftHomology]`
and we define `S.leftHomology` to be the `H` field of a chosen left homology data.
Similarly, we define `S.cycles` to be the `K` field.

The dual notion is defined in `RightHomologyData.lean`. In `Homology.lean`,
when `S` has two compatible left and right homology data (i.e. they give
the same `H` up to a canonical isomorphism), we shall define `[S.HasHomology]`
and `S.homology`.

-/

namespace CategoryTheory

open Category Limits

namespace ShortComplex

variable {C : Type*} [Category C] [HasZeroMorphisms C] (S : ShortComplex C)
  {S‚ÇÅ S‚ÇÇ S‚ÇÉ : ShortComplex C}

/-- A left homology data for a short complex `S` consists of morphisms `i : K ‚ü∂ S.X‚ÇÇ` and
`œÄ : K ‚ü∂ H` such that `i` identifies `K` to the kernel of `g : S.X‚ÇÇ ‚ü∂ S.X‚ÇÉ`,
and that `œÄ` identifies `H` to the cokernel of the induced map `f' : S.X‚ÇÅ ‚ü∂ K` -/
structure LeftHomologyData where
  /-- a choice of kernel of `S.g : S.X‚ÇÇ ‚ü∂ S.X‚ÇÉ`-/
  K : C
  /-- a choice of cokernel of the induced morphism `S.f' : S.X‚ÇÅ ‚ü∂ K`-/
  H : C
  /-- the inclusion of cycles in `S.X‚ÇÇ` -/
  i : K ‚ü∂ S.X‚ÇÇ
  /-- the projection from cycles to the (left) homology -/
  œÄ : K ‚ü∂ H
  /-- the kernel condition for `i` -/
  wi : i ‚â´ S.g = 0
  /-- `i : K ‚ü∂ S.X‚ÇÇ` is a kernel of `g : S.X‚ÇÇ ‚ü∂ S.X‚ÇÉ` -/
  hi : IsLimit (KernelFork.ofŒπ i wi)
  /-- the cokernel condition for `œÄ` -/
  wœÄ : hi.lift (KernelFork.ofŒπ _ S.zero) ‚â´ œÄ = 0
  /-- `œÄ : K ‚ü∂ H` is a cokernel of the induced morphism `S.f' : S.X‚ÇÅ ‚ü∂ K` -/
  hœÄ : IsColimit (CokernelCofork.ofœÄ œÄ wœÄ)

initialize_simps_projections LeftHomologyData (-hi, -hœÄ)

namespace LeftHomologyData

/-- The chosen kernels and cokernels of the limits API give a `LeftHomologyData` -/
@[simps]
noncomputable def ofHasKernelOfHasCokernel
    [HasKernel S.g] [HasCokernel (kernel.lift S.g S.f S.zero)] :
    S.LeftHomologyData where
  K := kernel S.g
  H := cokernel (kernel.lift S.g S.f S.zero)
  i := kernel.Œπ _
  œÄ := cokernel.œÄ _
  wi := kernel.condition _
  hi := kernelIsKernel _
  wœÄ := cokernel.condition _
  hœÄ := cokernelIsCokernel _

attribute [reassoc (attr := simp)] wi wœÄ

variable {S}
variable (h : S.LeftHomologyData) {A : C}

instance : Mono h.i := ‚ü®fun _ _ => Fork.IsLimit.hom_ext h.hi‚ü©

instance : Epi h.œÄ := ‚ü®fun _ _ => Cofork.IsColimit.hom_ext h.hœÄ‚ü©

/-- Any morphism `k : A ‚ü∂ S.X‚ÇÇ` that is a cycle (i.e. `k ‚â´ S.g = 0`) lifts
to a morphism `A ‚ü∂ K` -/
def liftK (k : A ‚ü∂ S.X‚ÇÇ) (hk : k ‚â´ S.g = 0) : A ‚ü∂ h.K := h.hi.lift (KernelFork.ofŒπ k hk)

@[reassoc (attr := simp)]
lemma liftK_i (k : A ‚ü∂ S.X‚ÇÇ) (hk : k ‚â´ S.g = 0) : h.liftK k hk ‚â´ h.i = k :=
  h.hi.fac _ WalkingParallelPair.zero

/-- The (left) homology class `A ‚ü∂ H` attached to a cycle `k : A ‚ü∂ S.X‚ÇÇ` -/
@[simp]
def liftH (k : A ‚ü∂ S.X‚ÇÇ) (hk : k ‚â´ S.g = 0) : A ‚ü∂ h.H := h.liftK k hk ‚â´ h.œÄ

/-- Given `h : LeftHomologyData S`, this is morphism `S.X‚ÇÅ ‚ü∂ h.K` induced
by `S.f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ` and the fact that `h.K` is a kernel of `S.g : S.X‚ÇÇ ‚ü∂ S.X‚ÇÉ`. -/
def f' : S.X‚ÇÅ ‚ü∂ h.K := h.liftK S.f S.zero

@[reassoc (attr := simp)] lemma f'_i : h.f' ‚â´ h.i = S.f := liftK_i _ _ _

@[reassoc (attr := simp)] lemma f'_œÄ : h.f' ‚â´ h.œÄ = 0 := h.wœÄ

@[reassoc]
lemma liftK_œÄ_eq_zero_of_boundary (k : A ‚ü∂ S.X‚ÇÇ) (x : A ‚ü∂ S.X‚ÇÅ) (hx : k = x ‚â´ S.f) :
    h.liftK k (by rw [hx, assoc, S.zero, comp_zero]) ‚â´ h.œÄ = 0 := by
  rw [show 0 = (x ‚â´ h.f') ‚â´ h.œÄ by simp]
  congr 1
  simp only [‚Üê cancel_mono h.i, hx, liftK_i, assoc, f'_i]

/-- For `h : S.LeftHomologyData`, this is a restatement of `h.hœÄ`, saying that
`œÄ : h.K ‚ü∂ h.H` is a cokernel of `h.f' : S.X‚ÇÅ ‚ü∂ h.K`. -/
def hœÄ' : IsColimit (CokernelCofork.ofœÄ h.œÄ h.f'_œÄ) := h.hœÄ

/-- The morphism `H ‚ü∂ A` induced by a morphism `k : K ‚ü∂ A` such that `f' ‚â´ k = 0` -/
def descH (k : h.K ‚ü∂ A) (hk : h.f' ‚â´ k = 0) : h.H ‚ü∂ A :=
  h.hœÄ.desc (CokernelCofork.ofœÄ k hk)

@[reassoc (attr := simp)]
lemma œÄ_descH (k : h.K ‚ü∂ A) (hk : h.f' ‚â´ k = 0) : h.œÄ ‚â´ h.descH k hk = k :=
  h.hœÄ.fac (CokernelCofork.ofœÄ k hk) WalkingParallelPair.one

lemma isIso_i (hg : S.g = 0) : IsIso h.i :=
  ‚ü®h.liftK (ùüô S.X‚ÇÇ) (by rw [hg, id_comp]),
    by simp only [‚Üê cancel_mono h.i, id_comp, assoc, liftK_i, comp_id], liftK_i _ _ _‚ü©

lemma isIso_œÄ (hf : S.f = 0) : IsIso h.œÄ := by
  have ‚ü®œÜ, hœÜ‚ü© := CokernelCofork.IsColimit.desc' h.hœÄ' (ùüô _)
    (by rw [‚Üê cancel_mono h.i, comp_id, f'_i, zero_comp, hf])
  dsimp at hœÜ
  exact ‚ü®œÜ, hœÜ, by rw [‚Üê cancel_epi h.œÄ, reassoc_of% hœÜ, comp_id]‚ü©

variable (S)

/-- When the second map `S.g` is zero, this is the left homology data on `S` given
by any colimit cokernel cofork of `S.f` -/
@[simps]
def ofIsColimitCokernelCofork (hg : S.g = 0) (c : CokernelCofork S.f) (hc : IsColimit c) :
    S.LeftHomologyData where
  K := S.X‚ÇÇ
  H := c.pt
  i := ùüô _
  œÄ := c.œÄ
  wi := by rw [id_comp, hg]
  hi := KernelFork.IsLimit.ofId _ hg
  wœÄ := CokernelCofork.condition _
  hœÄ := IsColimit.ofIsoColimit hc (Cofork.ext (Iso.refl _))

@[simp] lemma ofIsColimitCokernelCofork_f' (hg : S.g = 0) (c : CokernelCofork S.f)
    (hc : IsColimit c) : (ofIsColimitCokernelCofork S hg c hc).f' = S.f := by
  rw [‚Üê cancel_mono (ofIsColimitCokernelCofork S hg c hc).i, f'_i,
    ofIsColimitCokernelCofork_i]
  dsimp
  rw [comp_id]

/-- When the second map `S.g` is zero, this is the left homology data on `S` given by
the chosen `cokernel S.f` -/
@[simps!]
noncomputable def ofHasCokernel [HasCokernel S.f] (hg : S.g = 0) : S.LeftHomologyData :=
  ofIsColimitCokernelCofork S hg _ (cokernelIsCokernel _)

/-- When the first map `S.f` is zero, this is the left homology data on `S` given
by any limit kernel fork of `S.g` -/
@[simps]
def ofIsLimitKernelFork (hf : S.f = 0) (c : KernelFork S.g) (hc : IsLimit c) :
    S.LeftHomologyData where
  K := c.pt
  H := c.pt
  i := c.Œπ
  œÄ := ùüô _
  wi := KernelFork.condition _
  hi := IsLimit.ofIsoLimit hc (Fork.ext (Iso.refl _))
  wœÄ := Fork.IsLimit.hom_ext hc (by
    dsimp
    simp only [comp_id, zero_comp, Fork.IsLimit.lift_Œπ, Fork.Œπ_ofŒπ, hf])
  hœÄ := CokernelCofork.IsColimit.ofId _ (Fork.IsLimit.hom_ext hc (by
    dsimp
    simp only [comp_id, zero_comp, Fork.IsLimit.lift_Œπ, Fork.Œπ_ofŒπ, hf]))

@[simp] lemma ofIsLimitKernelFork_f' (hf : S.f = 0) (c : KernelFork S.g) (hc : IsLimit c) :
    (ofIsLimitKernelFork S hf c hc).f' = 0 := by
  rw [‚Üê cancel_mono (ofIsLimitKernelFork S hf c hc).i, f'_i, hf, zero_comp]

/-- When the first map `S.f` is zero, this is the left homology data on `S` given
by the chosen `kernel S.g` -/
@[simp]
noncomputable def ofHasKernel [HasKernel S.g] (hf : S.f = 0) : S.LeftHomologyData :=
  ofIsLimitKernelFork S hf _ (kernelIsKernel _)

/-- When both `S.f` and `S.g` are zero, the middle object `S.X‚ÇÇ` gives a left homology data on S -/
@[simps]
def ofZeros (hf : S.f = 0) (hg : S.g = 0) : S.LeftHomologyData where
  K := S.X‚ÇÇ
  H := S.X‚ÇÇ
  i := ùüô _
  œÄ := ùüô _
  wi := by rw [id_comp, hg]
  hi := KernelFork.IsLimit.ofId _ hg
  wœÄ := by
    change S.f ‚â´ ùüô _ = 0
    simp only [hf, zero_comp]
  hœÄ := CokernelCofork.IsColimit.ofId _ hf

@[simp] lemma ofZeros_f' (hf : S.f = 0) (hg : S.g = 0) :
    (ofZeros S hf hg).f' = 0 := by
  rw [‚Üê cancel_mono ((ofZeros S hf hg).i), zero_comp, f'_i, hf]

end LeftHomologyData

/-- A short complex `S` has left homology when there exists a `S.LeftHomologyData` -/
class HasLeftHomology : Prop where
  condition : Nonempty S.LeftHomologyData

/-- A chosen `S.LeftHomologyData` for a short complex `S` that has left homology -/
noncomputable def leftHomologyData [S.HasLeftHomology] :
  S.LeftHomologyData := HasLeftHomology.condition.some

variable {S}

namespace HasLeftHomology

lemma mk' (h : S.LeftHomologyData) : HasLeftHomology S := ‚ü®Nonempty.intro h‚ü©

instance of_hasKernel_of_hasCokernel [HasKernel S.g] [HasCokernel (kernel.lift S.g S.f S.zero)] :
  S.HasLeftHomology := HasLeftHomology.mk' (LeftHomologyData.ofHasKernelOfHasCokernel S)

instance of_hasCokernel {X Y : C} (f : X ‚ü∂ Y) (Z : C) [HasCokernel f] :
    (ShortComplex.mk f (0 : Y ‚ü∂ Z) comp_zero).HasLeftHomology :=
  HasLeftHomology.mk' (LeftHomologyData.ofHasCokernel _ rfl)

instance of_hasKernel {Y Z : C} (g : Y ‚ü∂ Z) (X : C) [HasKernel g] :
    (ShortComplex.mk (0 : X ‚ü∂ Y) g zero_comp).HasLeftHomology :=
  HasLeftHomology.mk' (LeftHomologyData.ofHasKernel _ rfl)

instance of_zeros (X Y Z : C) :
    (ShortComplex.mk (0 : X ‚ü∂ Y) (0 : Y ‚ü∂ Z) zero_comp).HasLeftHomology :=
  HasLeftHomology.mk' (LeftHomologyData.ofZeros _ rfl rfl)

end HasLeftHomology

section

variable (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.LeftHomologyData) (h‚ÇÇ : S‚ÇÇ.LeftHomologyData)

/-- Given left homology data `h‚ÇÅ` and `h‚ÇÇ` for two short complexes `S‚ÇÅ` and `S‚ÇÇ`,
a `LeftHomologyMapData` for a morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ`
consists of a description of the induced morphisms on the `K` (cycles)
and `H` (left homology) fields of `h‚ÇÅ` and `h‚ÇÇ`. -/
structure LeftHomologyMapData where
  /-- the induced map on cycles -/
  œÜK : h‚ÇÅ.K ‚ü∂ h‚ÇÇ.K
  /-- the induced map on left homology -/
  œÜH : h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H
  /-- commutation with `i` -/
  commi : œÜK ‚â´ h‚ÇÇ.i = h‚ÇÅ.i ‚â´ œÜ.œÑ‚ÇÇ := by aesop_cat
  /-- commutation with `f'` -/
  commf' : h‚ÇÅ.f' ‚â´ œÜK = œÜ.œÑ‚ÇÅ ‚â´ h‚ÇÇ.f' := by aesop_cat
  /-- commutation with `œÄ` -/
  commœÄ : h‚ÇÅ.œÄ ‚â´ œÜH = œÜK ‚â´ h‚ÇÇ.œÄ := by aesop_cat

namespace LeftHomologyMapData

attribute [reassoc (attr := simp)] commi commf' commœÄ
attribute [nolint simpNF] mk.injEq

/-- The left homology map data associated to the zero morphism between two short complexes. -/
@[simps]
def zero (h‚ÇÅ : S‚ÇÅ.LeftHomologyData) (h‚ÇÇ : S‚ÇÇ.LeftHomologyData) :
    LeftHomologyMapData 0 h‚ÇÅ h‚ÇÇ where
  œÜK := 0
  œÜH := 0

/-- The left homology map data associated to the identity morphism of a short complex. -/
@[simps]
def id (h : S.LeftHomologyData) : LeftHomologyMapData (ùüô S) h h where
  œÜK := ùüô _
  œÜH := ùüô _

/-- The composition of left homology map data. -/
@[simps]
def comp {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {œÜ' : S‚ÇÇ ‚ü∂ S‚ÇÉ}
    {h‚ÇÅ : S‚ÇÅ.LeftHomologyData} {h‚ÇÇ : S‚ÇÇ.LeftHomologyData} {h‚ÇÉ : S‚ÇÉ.LeftHomologyData}
    (œà : LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) (œà' : LeftHomologyMapData œÜ' h‚ÇÇ h‚ÇÉ) :
    LeftHomologyMapData (œÜ ‚â´ œÜ') h‚ÇÅ h‚ÇÉ where
  œÜK := œà.œÜK ‚â´ œà'.œÜK
  œÜH := œà.œÜH ‚â´ œà'.œÜH

instance : Subsingleton (LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) :=
  ‚ü®fun œà‚ÇÅ œà‚ÇÇ => by
    have hK : œà‚ÇÅ.œÜK = œà‚ÇÇ.œÜK := by rw [‚Üê cancel_mono h‚ÇÇ.i, commi, commi]
    have hH : œà‚ÇÅ.œÜH = œà‚ÇÇ.œÜH := by rw [‚Üê cancel_epi h‚ÇÅ.œÄ, commœÄ, commœÄ, hK]
    cases œà‚ÇÅ
    cases œà‚ÇÇ
    congr‚ü©

instance : Inhabited (LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) := ‚ü®by
  let œÜK : h‚ÇÅ.K ‚ü∂ h‚ÇÇ.K := h‚ÇÇ.liftK (h‚ÇÅ.i ‚â´ œÜ.œÑ‚ÇÇ)
    (by rw [assoc, œÜ.comm‚ÇÇ‚ÇÉ, h‚ÇÅ.wi_assoc, zero_comp])
  have commf' : h‚ÇÅ.f' ‚â´ œÜK = œÜ.œÑ‚ÇÅ ‚â´ h‚ÇÇ.f' := by
    rw [‚Üê cancel_mono h‚ÇÇ.i, assoc, assoc, LeftHomologyData.liftK_i,
      LeftHomologyData.f'_i_assoc, LeftHomologyData.f'_i, œÜ.comm‚ÇÅ‚ÇÇ]
  let œÜH : h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H := h‚ÇÅ.descH (œÜK ‚â´ h‚ÇÇ.œÄ)
    (by rw [reassoc_of% commf', h‚ÇÇ.f'_œÄ, comp_zero])
  exact ‚ü®œÜK, œÜH, by simp [œÜK], commf', by simp [œÜH]‚ü©‚ü©

instance : Unique (LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) := Unique.mk' _

variable {œÜ h‚ÇÅ h‚ÇÇ}

lemma congr_œÜH {Œ≥‚ÇÅ Œ≥‚ÇÇ : LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ} (eq : Œ≥‚ÇÅ = Œ≥‚ÇÇ) : Œ≥‚ÇÅ.œÜH = Œ≥‚ÇÇ.œÜH := by rw [eq]
lemma congr_œÜK {Œ≥‚ÇÅ Œ≥‚ÇÇ : LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ} (eq : Œ≥‚ÇÅ = Œ≥‚ÇÇ) : Œ≥‚ÇÅ.œÜK = Œ≥‚ÇÇ.œÜK := by rw [eq]

/-- When `S‚ÇÅ.f`, `S‚ÇÅ.g`, `S‚ÇÇ.f` and `S‚ÇÇ.g` are all zero, the action on left homology of a
morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` is given by the action `œÜ.œÑ‚ÇÇ` on the middle objects. -/
@[simps]
def ofZeros (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (hf‚ÇÅ : S‚ÇÅ.f = 0) (hg‚ÇÅ : S‚ÇÅ.g = 0) (hf‚ÇÇ : S‚ÇÇ.f = 0) (hg‚ÇÇ : S‚ÇÇ.g = 0) :
    LeftHomologyMapData œÜ (LeftHomologyData.ofZeros S‚ÇÅ hf‚ÇÅ hg‚ÇÅ)
      (LeftHomologyData.ofZeros S‚ÇÇ hf‚ÇÇ hg‚ÇÇ) where
  œÜK := œÜ.œÑ‚ÇÇ
  œÜH := œÜ.œÑ‚ÇÇ

/-- When `S‚ÇÅ.g` and `S‚ÇÇ.g` are zero and we have chosen colimit cokernel coforks `c‚ÇÅ` and `c‚ÇÇ`
for `S‚ÇÅ.f` and `S‚ÇÇ.f` respectively, the action on left homology of a morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` of
short complexes is given by the unique morphism `f : c‚ÇÅ.pt ‚ü∂ c‚ÇÇ.pt` such that
`œÜ.œÑ‚ÇÇ ‚â´ c‚ÇÇ.œÄ = c‚ÇÅ.œÄ ‚â´ f`. -/
@[simps]
def ofIsColimitCokernelCofork (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
    (hg‚ÇÅ : S‚ÇÅ.g = 0) (c‚ÇÅ : CokernelCofork S‚ÇÅ.f) (hc‚ÇÅ : IsColimit c‚ÇÅ)
    (hg‚ÇÇ : S‚ÇÇ.g = 0) (c‚ÇÇ : CokernelCofork S‚ÇÇ.f) (hc‚ÇÇ : IsColimit c‚ÇÇ) (f : c‚ÇÅ.pt ‚ü∂ c‚ÇÇ.pt)
    (comm : œÜ.œÑ‚ÇÇ ‚â´ c‚ÇÇ.œÄ = c‚ÇÅ.œÄ ‚â´ f) :
    LeftHomologyMapData œÜ (LeftHomologyData.ofIsColimitCokernelCofork S‚ÇÅ hg‚ÇÅ c‚ÇÅ hc‚ÇÅ)
      (LeftHomologyData.ofIsColimitCokernelCofork S‚ÇÇ hg‚ÇÇ c‚ÇÇ hc‚ÇÇ) where
  œÜK := œÜ.œÑ‚ÇÇ
  œÜH := f
  commœÄ := comm.symm
  commf' := by simp only [LeftHomologyData.ofIsColimitCokernelCofork_f', œÜ.comm‚ÇÅ‚ÇÇ]

/-- When `S‚ÇÅ.f` and `S‚ÇÇ.f` are zero and we have chosen limit kernel forks `c‚ÇÅ` and `c‚ÇÇ`
for `S‚ÇÅ.g` and `S‚ÇÇ.g` respectively, the action on left homology of a morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` of
short complexes is given by the unique morphism `f : c‚ÇÅ.pt ‚ü∂ c‚ÇÇ.pt` such that
`c‚ÇÅ.Œπ ‚â´ œÜ.œÑ‚ÇÇ = f ‚â´ c‚ÇÇ.Œπ`. -/
@[simps]
def ofIsLimitKernelFork (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
    (hf‚ÇÅ : S‚ÇÅ.f = 0) (c‚ÇÅ : KernelFork S‚ÇÅ.g) (hc‚ÇÅ : IsLimit c‚ÇÅ)
    (hf‚ÇÇ : S‚ÇÇ.f = 0) (c‚ÇÇ : KernelFork S‚ÇÇ.g) (hc‚ÇÇ : IsLimit c‚ÇÇ) (f : c‚ÇÅ.pt ‚ü∂ c‚ÇÇ.pt)
    (comm : c‚ÇÅ.Œπ ‚â´ œÜ.œÑ‚ÇÇ = f ‚â´ c‚ÇÇ.Œπ) :
    LeftHomologyMapData œÜ (LeftHomologyData.ofIsLimitKernelFork S‚ÇÅ hf‚ÇÅ c‚ÇÅ hc‚ÇÅ)
      (LeftHomologyData.ofIsLimitKernelFork S‚ÇÇ hf‚ÇÇ c‚ÇÇ hc‚ÇÇ) where
  œÜK := f
  œÜH := f
  commi := comm.symm

variable (S)

/-- When both maps `S.f` and `S.g` of a short complex `S` are zero, this is the left homology map
data (for the identity of `S`) which relates the left homology data `ofZeros` and
`ofIsColimitCokernelCofork`. -/
@[simps]
def compatibilityOfZerosOfIsColimitCokernelCofork (hf : S.f = 0) (hg : S.g = 0)
    (c : CokernelCofork S.f) (hc : IsColimit c) :
    LeftHomologyMapData (ùüô S) (LeftHomologyData.ofZeros S hf hg)
      (LeftHomologyData.ofIsColimitCokernelCofork S hg c hc) where
  œÜK := ùüô _
  œÜH := c.œÄ

/-- When both maps `S.f` and `S.g` of a short complex `S` are zero, this is the left homology map
data (for the identity of `S`) which relates the left homology data
`LeftHomologyData.ofIsLimitKernelFork` and `ofZeros` . -/
@[simps]
def compatibilityOfZerosOfIsLimitKernelFork (hf : S.f = 0) (hg : S.g = 0)
    (c : KernelFork S.g) (hc : IsLimit c) :
    LeftHomologyMapData (ùüô S) (LeftHomologyData.ofIsLimitKernelFork S hf c hc)
      (LeftHomologyData.ofZeros S hf hg) where
  œÜK := c.Œπ
  œÜH := c.Œπ

end LeftHomologyMapData

end

section

variable (S)
variable [S.HasLeftHomology]

/-- The left homology of a short complex, given by the `H` field of a chosen left homology data.  -/
noncomputable def leftHomology : C := S.leftHomologyData.H

/-- The cycles of a short complex, given by the `K` field of a chosen left homology data.  -/
noncomputable def cycles : C := S.leftHomologyData.K

/-- The "homology class" map `S.cycles ‚ü∂ S.leftHomology`. -/
noncomputable def leftHomologyœÄ : S.cycles ‚ü∂ S.leftHomology := S.leftHomologyData.œÄ

/-- The inclusion `S.cycles ‚ü∂ S.X‚ÇÇ`. -/
noncomputable def iCycles : S.cycles ‚ü∂ S.X‚ÇÇ := S.leftHomologyData.i

/-- The "boundaries" map `S.X‚ÇÅ ‚ü∂ S.cycles`. (Note that in this homology API, we make no use
of the "image" of this morphism, which under some categorical assumptions would be a subobject
of `S.X‚ÇÇ` contained in `S.cycles`.) -/
noncomputable def toCycles : S.X‚ÇÅ ‚ü∂ S.cycles := S.leftHomologyData.f'

@[reassoc (attr := simp)]
lemma iCycles_g : S.iCycles ‚â´ S.g = 0 := S.leftHomologyData.wi

@[reassoc (attr := simp)]
lemma toCycles_i : S.toCycles ‚â´ S.iCycles = S.f := S.leftHomologyData.f'_i

instance : Mono S.iCycles := by
  dsimp only [iCycles]
  infer_instance

instance : Epi S.leftHomologyœÄ := by
  dsimp only [leftHomologyœÄ]
  infer_instance

lemma leftHomology_ext_iff {A : C} (f‚ÇÅ f‚ÇÇ : S.leftHomology ‚ü∂ A) :
    f‚ÇÅ = f‚ÇÇ ‚Üî S.leftHomologyœÄ ‚â´ f‚ÇÅ = S.leftHomologyœÄ ‚â´ f‚ÇÇ := by
  rw [cancel_epi]

@[ext]
lemma leftHomology_ext {A : C} (f‚ÇÅ f‚ÇÇ : S.leftHomology ‚ü∂ A)
    (h : S.leftHomologyœÄ ‚â´ f‚ÇÅ = S.leftHomologyœÄ ‚â´ f‚ÇÇ) : f‚ÇÅ = f‚ÇÇ := by
  simpa only [leftHomology_ext_iff] using h

lemma cycles_ext_iff {A : C} (f‚ÇÅ f‚ÇÇ : A ‚ü∂ S.cycles) :
    f‚ÇÅ = f‚ÇÇ ‚Üî f‚ÇÅ ‚â´ S.iCycles = f‚ÇÇ ‚â´ S.iCycles := by
  rw [cancel_mono]

@[ext]
lemma cycles_ext {A : C} (f‚ÇÅ f‚ÇÇ : A ‚ü∂ S.cycles) (h : f‚ÇÅ ‚â´ S.iCycles = f‚ÇÇ ‚â´ S.iCycles) :
    f‚ÇÅ = f‚ÇÇ := by
  simpa only [cycles_ext_iff] using h

lemma isIso_iCycles (hg : S.g = 0) : IsIso S.iCycles :=
  LeftHomologyData.isIso_i _ hg

/-- When `S.g = 0`, this is the canonical isomorphism `S.cycles ‚âÖ S.X‚ÇÇ` induced by `S.iCycles`. -/
@[simps! hom]
noncomputable def cyclesIsoX‚ÇÇ (hg : S.g = 0) : S.cycles ‚âÖ S.X‚ÇÇ := by
  have := S.isIso_iCycles hg
  exact asIso S.iCycles

@[reassoc (attr := simp)]
lemma cyclesIsoX‚ÇÇ_hom_inv_id (hg : S.g = 0) :
    S.iCycles ‚â´ (S.cyclesIsoX‚ÇÇ hg).inv = ùüô _ := (S.cyclesIsoX‚ÇÇ hg).hom_inv_id

@[reassoc (attr := simp)]
lemma cyclesIsoX‚ÇÇ_inv_hom_id (hg : S.g = 0) :
    (S.cyclesIsoX‚ÇÇ hg).inv ‚â´ S.iCycles = ùüô _ := (S.cyclesIsoX‚ÇÇ hg).inv_hom_id

lemma isIso_leftHomologyœÄ (hf : S.f = 0) : IsIso S.leftHomologyœÄ :=
  LeftHomologyData.isIso_œÄ _ hf

/-- When `S.f = 0`, this is the canonical isomorphism `S.cycles ‚âÖ S.leftHomology` induced
by `S.leftHomologyœÄ`. -/
@[simps! hom]
noncomputable def cyclesIsoLeftHomology (hf : S.f = 0) : S.cycles ‚âÖ S.leftHomology := by
  have := S.isIso_leftHomologyœÄ hf
  exact asIso S.leftHomologyœÄ

@[reassoc (attr := simp)]
lemma cyclesIsoLeftHomology_hom_inv_id (hf : S.f = 0) :
    S.leftHomologyœÄ ‚â´ (S.cyclesIsoLeftHomology hf).inv = ùüô _ :=
  (S.cyclesIsoLeftHomology hf).hom_inv_id

@[reassoc (attr := simp)]
lemma cyclesIsoLeftHomology_inv_hom_id (hf : S.f = 0) :
    (S.cyclesIsoLeftHomology hf).inv ‚â´ S.leftHomologyœÄ = ùüô _ :=
  (S.cyclesIsoLeftHomology hf).inv_hom_id

end

section

variable (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.LeftHomologyData) (h‚ÇÇ : S‚ÇÇ.LeftHomologyData)

/-- The (unique) left homology map data associated to a morphism of short complexes that
are both equipped with left homology data. -/
def leftHomologyMapData : LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ := default

/-- Given a morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` of short complexes and left homology data `h‚ÇÅ` and `h‚ÇÇ`
for `S‚ÇÅ` and `S‚ÇÇ` respectively, this is the induced left homology map `h‚ÇÅ.H ‚ü∂ h‚ÇÅ.H`. -/
def leftHomologyMap' : h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H := (leftHomologyMapData œÜ _ _).œÜH

/-- Given a morphism `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` of short complexes and left homology data `h‚ÇÅ` and `h‚ÇÇ`
for `S‚ÇÅ` and `S‚ÇÇ` respectively, this is the induced morphism `h‚ÇÅ.K ‚ü∂ h‚ÇÅ.K` on cycles. -/
def cyclesMap' : h‚ÇÅ.K ‚ü∂ h‚ÇÇ.K := (leftHomologyMapData œÜ _ _).œÜK

@[reassoc (attr := simp)]
lemma cyclesMap'_i : cyclesMap' œÜ h‚ÇÅ h‚ÇÇ ‚â´ h‚ÇÇ.i = h‚ÇÅ.i ‚â´ œÜ.œÑ‚ÇÇ :=
  LeftHomologyMapData.commi _

@[reassoc (attr := simp)]
lemma f'_cyclesMap' : h‚ÇÅ.f' ‚â´ cyclesMap' œÜ h‚ÇÅ h‚ÇÇ = œÜ.œÑ‚ÇÅ ‚â´ h‚ÇÇ.f' := by
  simp only [‚Üê cancel_mono h‚ÇÇ.i, assoc, œÜ.comm‚ÇÅ‚ÇÇ, cyclesMap'_i,
    LeftHomologyData.f'_i_assoc, LeftHomologyData.f'_i]

@[reassoc (attr := simp)]
lemma leftHomologyœÄ_naturality' :
    h‚ÇÅ.œÄ ‚â´ leftHomologyMap' œÜ h‚ÇÅ h‚ÇÇ = cyclesMap' œÜ h‚ÇÅ h‚ÇÇ ‚â´ h‚ÇÇ.œÄ :=
  LeftHomologyMapData.commœÄ _

end

section

variable [HasLeftHomology S‚ÇÅ] [HasLeftHomology S‚ÇÇ] (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)

/-- The (left) homology map `S‚ÇÅ.leftHomology ‚ü∂ S‚ÇÇ.leftHomology` induced by a morphism
`S‚ÇÅ ‚ü∂ S‚ÇÇ` of short complexes. -/
noncomputable def leftHomologyMap : S‚ÇÅ.leftHomology ‚ü∂ S‚ÇÇ.leftHomology :=
  leftHomologyMap' œÜ _ _

/-- The morphism `S‚ÇÅ.cycles ‚ü∂ S‚ÇÇ.cycles` induced by a morphism `S‚ÇÅ ‚ü∂ S‚ÇÇ` of short complexes. -/
noncomputable def cyclesMap : S‚ÇÅ.cycles ‚ü∂ S‚ÇÇ.cycles := cyclesMap' œÜ _ _

@[reassoc (attr := simp)]
lemma cyclesMap_i : cyclesMap œÜ ‚â´ S‚ÇÇ.iCycles = S‚ÇÅ.iCycles ‚â´ œÜ.œÑ‚ÇÇ :=
  cyclesMap'_i _ _ _

@[reassoc (attr := simp)]
lemma toCycles_naturality : S‚ÇÅ.toCycles ‚â´ cyclesMap œÜ = œÜ.œÑ‚ÇÅ ‚â´ S‚ÇÇ.toCycles :=
  f'_cyclesMap' _ _ _

@[reassoc (attr := simp)]
lemma leftHomologyœÄ_naturality :
    S‚ÇÅ.leftHomologyœÄ ‚â´ leftHomologyMap œÜ = cyclesMap œÜ ‚â´ S‚ÇÇ.leftHomologyœÄ :=
  leftHomologyœÄ_naturality' _ _ _

end

namespace LeftHomologyMapData

variable {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {h‚ÇÅ : S‚ÇÅ.LeftHomologyData} {h‚ÇÇ : S‚ÇÇ.LeftHomologyData}
  (Œ≥ : LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ)

lemma leftHomologyMap'_eq : leftHomologyMap' œÜ h‚ÇÅ h‚ÇÇ = Œ≥.œÜH :=
  LeftHomologyMapData.congr_œÜH (Subsingleton.elim _ _)

lemma cyclesMap'_eq : cyclesMap' œÜ h‚ÇÅ h‚ÇÇ = Œ≥.œÜK :=
  LeftHomologyMapData.congr_œÜK (Subsingleton.elim _ _)

end LeftHomologyMapData

@[simp]
lemma leftHomologyMap'_id (h : S.LeftHomologyData) :
    leftHomologyMap' (ùüô S) h h = ùüô _ :=
  (LeftHomologyMapData.id h).leftHomologyMap'_eq

@[simp]
lemma cyclesMap'_id (h : S.LeftHomologyData) :
    cyclesMap' (ùüô S) h h = ùüô _ :=
  (LeftHomologyMapData.id h).cyclesMap'_eq

variable (S)

@[simp]
lemma leftHomologyMap_id [HasLeftHomology S] :
    leftHomologyMap (ùüô S) = ùüô _ :=
  leftHomologyMap'_id _

@[simp]
lemma cyclesMap_id [HasLeftHomology S] :
    cyclesMap (ùüô S) = ùüô _ :=
  cyclesMap'_id _

@[simp]
lemma leftHomologyMap'_zero (h‚ÇÅ : S‚ÇÅ.LeftHomologyData) (h‚ÇÇ : S‚ÇÇ.LeftHomologyData) :
    leftHomologyMap' 0 h‚ÇÅ h‚ÇÇ = 0 :=
  (LeftHomologyMapData.zero h‚ÇÅ h‚ÇÇ).leftHomologyMap'_eq

@[simp]
lemma cyclesMap'_zero (h‚ÇÅ : S‚ÇÅ.LeftHomologyData) (h‚ÇÇ : S‚ÇÇ.LeftHomologyData) :
    cyclesMap' 0 h‚ÇÅ h‚ÇÇ = 0 :=
  (LeftHomologyMapData.zero h‚ÇÅ h‚ÇÇ).cyclesMap'_eq

variable (S‚ÇÅ S‚ÇÇ)

@[simp]
lemma leftHomologyMap_zero [HasLeftHomology S‚ÇÅ] [HasLeftHomology S‚ÇÇ] :
    leftHomologyMap (0 : S‚ÇÅ ‚ü∂ S‚ÇÇ) = 0 :=
  leftHomologyMap'_zero _ _

@[simp]
lemma cyclesMap_zero [HasLeftHomology S‚ÇÅ] [HasLeftHomology S‚ÇÇ] :
    cyclesMap (0 : S‚ÇÅ ‚ü∂ S‚ÇÇ) = 0 :=
  cyclesMap'_zero _ _

variable {S‚ÇÅ S‚ÇÇ}

@[reassoc]
lemma leftHomologyMap'_comp (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ)
    (h‚ÇÅ : S‚ÇÅ.LeftHomologyData) (h‚ÇÇ : S‚ÇÇ.LeftHomologyData) (h‚ÇÉ : S‚ÇÉ.LeftHomologyData) :
    leftHomologyMap' (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) h‚ÇÅ h‚ÇÉ = leftHomologyMap' œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ ‚â´
      leftHomologyMap' œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ := by
  let Œ≥‚ÇÅ := leftHomologyMapData œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ
  let Œ≥‚ÇÇ := leftHomologyMapData œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ
  rw [Œ≥‚ÇÅ.leftHomologyMap'_eq, Œ≥‚ÇÇ.leftHomologyMap'_eq, (Œ≥‚ÇÅ.comp Œ≥‚ÇÇ).leftHomologyMap'_eq,
    LeftHomologyMapData.comp_œÜH]

@[reassoc]
lemma cyclesMap'_comp (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ)
    (h‚ÇÅ : S‚ÇÅ.LeftHomologyData) (h‚ÇÇ : S‚ÇÇ.LeftHomologyData) (h‚ÇÉ : S‚ÇÉ.LeftHomologyData) :
    cyclesMap' (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) h‚ÇÅ h‚ÇÉ = cyclesMap' œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ ‚â´ cyclesMap' œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ := by
  let Œ≥‚ÇÅ := leftHomologyMapData œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ
  let Œ≥‚ÇÇ := leftHomologyMapData œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ
  rw [Œ≥‚ÇÅ.cyclesMap'_eq, Œ≥‚ÇÇ.cyclesMap'_eq, (Œ≥‚ÇÅ.comp Œ≥‚ÇÇ).cyclesMap'_eq,
    LeftHomologyMapData.comp_œÜK]

@[reassoc]
lemma leftHomologyMap_comp [HasLeftHomology S‚ÇÅ] [HasLeftHomology S‚ÇÇ] [HasLeftHomology S‚ÇÉ]
    (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
    leftHomologyMap (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) = leftHomologyMap œÜ‚ÇÅ ‚â´ leftHomologyMap œÜ‚ÇÇ :=
  leftHomologyMap'_comp _ _ _ _ _

@[reassoc]
lemma cyclesMap_comp [HasLeftHomology S‚ÇÅ] [HasLeftHomology S‚ÇÇ] [HasLeftHomology S‚ÇÉ]
    (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
    cyclesMap (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) = cyclesMap œÜ‚ÇÅ ‚â´ cyclesMap œÜ‚ÇÇ :=
  cyclesMap'_comp _ _ _ _ _

attribute [simp] leftHomologyMap_comp cyclesMap_comp

/-- An isomorphism of short complexes `S‚ÇÅ ‚âÖ S‚ÇÇ` induces an isomorphism on the `H` fields
of left homology data of `S‚ÇÅ` and `S‚ÇÇ`. -/
@[simps]
def leftHomologyMapIso' (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.LeftHomologyData)
    (h‚ÇÇ : S‚ÇÇ.LeftHomologyData) : h‚ÇÅ.H ‚âÖ h‚ÇÇ.H where
  hom := leftHomologyMap' e.hom h‚ÇÅ h‚ÇÇ
  inv := leftHomologyMap' e.inv h‚ÇÇ h‚ÇÅ
  hom_inv_id := by rw [‚Üê leftHomologyMap'_comp, e.hom_inv_id, leftHomologyMap'_id]
  inv_hom_id := by rw [‚Üê leftHomologyMap'_comp, e.inv_hom_id, leftHomologyMap'_id]

instance isIso_leftHomologyMap'_of_isIso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [IsIso œÜ]
    (h‚ÇÅ : S‚ÇÅ.LeftHomologyData) (h‚ÇÇ : S‚ÇÇ.LeftHomologyData) :
    IsIso (leftHomologyMap' œÜ h‚ÇÅ h‚ÇÇ) :=
  (inferInstance : IsIso (leftHomologyMapIso' (asIso œÜ) h‚ÇÅ h‚ÇÇ).hom)

/-- An isomorphism of short complexes `S‚ÇÅ ‚âÖ S‚ÇÇ` induces an isomorphism on the `K` fields
of left homology data of `S‚ÇÅ` and `S‚ÇÇ`. -/
@[simps]
def cyclesMapIso' (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.LeftHomologyData)
    (h‚ÇÇ : S‚ÇÇ.LeftHomologyData) : h‚ÇÅ.K ‚âÖ h‚ÇÇ.K where
  hom := cyclesMap' e.hom h‚ÇÅ h‚ÇÇ
  inv := cyclesMap' e.inv h‚ÇÇ h‚ÇÅ
  hom_inv_id := by rw [‚Üê cyclesMap'_comp, e.hom_inv_id, cyclesMap'_id]
  inv_hom_id := by rw [‚Üê cyclesMap'_comp, e.inv_hom_id, cyclesMap'_id]

instance isIso_cyclesMap'_of_isIso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [IsIso œÜ]
    (h‚ÇÅ : S‚ÇÅ.LeftHomologyData) (h‚ÇÇ : S‚ÇÇ.LeftHomologyData) :
    IsIso (cyclesMap' œÜ h‚ÇÅ h‚ÇÇ) :=
  (inferInstance : IsIso (cyclesMapIso' (asIso œÜ) h‚ÇÅ h‚ÇÇ).hom)

/-- The isomorphism `S‚ÇÅ.leftHomology ‚âÖ S‚ÇÇ.leftHomology` induced by an isomorphism of
short complexes `S‚ÇÅ ‚âÖ S‚ÇÇ`. -/
@[simps]
noncomputable def leftHomologyMapIso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) [S‚ÇÅ.HasLeftHomology]
    [S‚ÇÇ.HasLeftHomology] : S‚ÇÅ.leftHomology ‚âÖ S‚ÇÇ.leftHomology where
  hom := leftHomologyMap e.hom
  inv := leftHomologyMap e.inv
  hom_inv_id := by rw [‚Üê leftHomologyMap_comp, e.hom_inv_id, leftHomologyMap_id]
  inv_hom_id := by rw [‚Üê leftHomologyMap_comp, e.inv_hom_id, leftHomologyMap_id]

instance isIso_leftHomologyMap_of_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
    [IsIso œÜ] [S‚ÇÅ.HasLeftHomology] [S‚ÇÇ.HasLeftHomology] :
    IsIso (leftHomologyMap œÜ) :=
  (inferInstance : IsIso (leftHomologyMapIso (asIso œÜ)).hom)

/-- The isomorphism `S‚ÇÅ.cycles ‚âÖ S‚ÇÇ.cycles` induced by an isomorphism
of short complexes `S‚ÇÅ ‚âÖ S‚ÇÇ`. -/
@[simps]
noncomputable def cyclesMapIso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) [S‚ÇÅ.HasLeftHomology]
    [S‚ÇÇ.HasLeftHomology] : S‚ÇÅ.cycles ‚âÖ S‚ÇÇ.cycles where
  hom := cyclesMap e.hom
  inv := cyclesMap e.inv
  hom_inv_id := by rw [‚Üê cyclesMap_comp, e.hom_inv_id, cyclesMap_id]
  inv_hom_id := by rw [‚Üê cyclesMap_comp, e.inv_hom_id, cyclesMap_id]

instance isIso_cyclesMap_of_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [IsIso œÜ] [S‚ÇÅ.HasLeftHomology]
    [S‚ÇÇ.HasLeftHomology] : IsIso (cyclesMap œÜ) :=
  (inferInstance : IsIso (cyclesMapIso (asIso œÜ)).hom)

variable {S}

namespace LeftHomologyData

variable (h : S.LeftHomologyData) [S.HasLeftHomology]

/-- The isomorphism `S.leftHomology ‚âÖ h.H` induced by a left homology data `h` for a
short complex `S`. -/
noncomputable def leftHomologyIso : S.leftHomology ‚âÖ h.H :=
  leftHomologyMapIso' (Iso.refl _) _ _

/-- The isomorphism `S.cycles ‚âÖ h.K` induced by a left homology data `h` for a
short complex `S`. -/
noncomputable def cyclesIso : S.cycles ‚âÖ h.K :=
  cyclesMapIso' (Iso.refl _) _ _

@[reassoc (attr := simp)]
lemma cyclesIso_hom_comp_i : h.cyclesIso.hom ‚â´ h.i = S.iCycles := by
  dsimp [iCycles, LeftHomologyData.cyclesIso]
  simp only [cyclesMap'_i, id_œÑ‚ÇÇ, comp_id]

@[reassoc (attr := simp)]
lemma cyclesIso_inv_comp_iCycles : h.cyclesIso.inv ‚â´ S.iCycles = h.i := by
  simp only [‚Üê h.cyclesIso_hom_comp_i, Iso.inv_hom_id_assoc]

@[reassoc (attr := simp)]
lemma leftHomologyœÄ_comp_leftHomologyIso_hom :
    S.leftHomologyœÄ ‚â´ h.leftHomologyIso.hom = h.cyclesIso.hom ‚â´ h.œÄ := by
  dsimp only [leftHomologyœÄ, leftHomologyIso, cyclesIso, leftHomologyMapIso',
    cyclesMapIso', Iso.refl]
  rw [‚Üê leftHomologyœÄ_naturality']

@[reassoc (attr := simp)]
lemma œÄ_comp_leftHomologyIso_inv :
    h.œÄ ‚â´ h.leftHomologyIso.inv = h.cyclesIso.inv ‚â´ S.leftHomologyœÄ := by
  simp only [‚Üê cancel_epi h.cyclesIso.hom, ‚Üê cancel_mono h.leftHomologyIso.hom, assoc,
    Iso.inv_hom_id, comp_id, Iso.hom_inv_id_assoc,
    LeftHomologyData.leftHomologyœÄ_comp_leftHomologyIso_hom]

end LeftHomologyData

namespace LeftHomologyMapData

variable {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {h‚ÇÅ : S‚ÇÅ.LeftHomologyData} {h‚ÇÇ : S‚ÇÇ.LeftHomologyData}
  (Œ≥ : LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ)

lemma leftHomologyMap_eq [S‚ÇÅ.HasLeftHomology] [S‚ÇÇ.HasLeftHomology] :
    leftHomologyMap œÜ = h‚ÇÅ.leftHomologyIso.hom ‚â´ Œ≥.œÜH ‚â´ h‚ÇÇ.leftHomologyIso.inv := by
  dsimp [LeftHomologyData.leftHomologyIso, leftHomologyMapIso']
  rw [‚Üê Œ≥.leftHomologyMap'_eq, ‚Üê leftHomologyMap'_comp,
    ‚Üê leftHomologyMap'_comp, id_comp, comp_id]
  rfl

lemma cyclesMap_eq [S‚ÇÅ.HasLeftHomology] [S‚ÇÇ.HasLeftHomology] :
    cyclesMap œÜ = h‚ÇÅ.cyclesIso.hom ‚â´ Œ≥.œÜK ‚â´ h‚ÇÇ.cyclesIso.inv := by
  dsimp [LeftHomologyData.cyclesIso, cyclesMapIso']
  rw [‚Üê Œ≥.cyclesMap'_eq, ‚Üê cyclesMap'_comp, ‚Üê cyclesMap'_comp, id_comp, comp_id]
  rfl

lemma leftHomologyMap_comm [S‚ÇÅ.HasLeftHomology] [S‚ÇÇ.HasLeftHomology] :
    leftHomologyMap œÜ ‚â´ h‚ÇÇ.leftHomologyIso.hom = h‚ÇÅ.leftHomologyIso.hom ‚â´ Œ≥.œÜH := by
  simp only [Œ≥.leftHomologyMap_eq, assoc, Iso.inv_hom_id, comp_id]

lemma cyclesMap_comm [S‚ÇÅ.HasLeftHomology] [S‚ÇÇ.HasLeftHomology] :
    cyclesMap œÜ ‚â´ h‚ÇÇ.cyclesIso.hom = h‚ÇÅ.cyclesIso.hom ‚â´ Œ≥.œÜK := by
  simp only [Œ≥.cyclesMap_eq, assoc, Iso.inv_hom_id, comp_id]

end LeftHomologyMapData

section

variable (C)
variable [HasKernels C] [HasCokernels C]

/-- The left homology functor `ShortComplex C ‚•§ C`, where the left homology of a
short complex `S` is understood as a cokernel of the obvious map `S.toCycles : S.X‚ÇÅ ‚ü∂ S.cycles`
where `S.cycles` is a kernel of `S.g : S.X‚ÇÇ ‚ü∂ S.X‚ÇÉ`. -/
@[simps]
noncomputable def leftHomologyFunctor : ShortComplex C ‚•§ C where
  obj S := S.leftHomology
  map := leftHomologyMap

/-- The cycles functor `ShortComplex C ‚•§ C` which sends a short complex `S` to `S.cycles`
which is a kernel of `S.g : S.X‚ÇÇ ‚ü∂ S.X‚ÇÉ`. -/
@[simps]
noncomputable def cyclesFunctor : ShortComplex C ‚•§ C where
  obj S := S.cycles
  map := cyclesMap

/-- The natural transformation `S.cycles ‚ü∂ S.leftHomology` for all short complexes `S`. -/
@[simps]
noncomputable def leftHomologyœÄNatTrans : cyclesFunctor C ‚ü∂ leftHomologyFunctor C where
  app S := leftHomologyœÄ S
  naturality := fun _ _ œÜ => (leftHomologyœÄ_naturality œÜ).symm

/-- The natural transformation `S.cycles ‚ü∂ S.X‚ÇÇ` for all short complexes `S`. -/
@[simps]
noncomputable def iCyclesNatTrans : cyclesFunctor C ‚ü∂ ShortComplex.œÄ‚ÇÇ where
  app S := S.iCycles

/-- The natural transformation `S.X‚ÇÅ ‚ü∂ S.cycles` for all short complexes `S`. -/
@[simps]
noncomputable def toCyclesNatTrans :
    œÄ‚ÇÅ ‚ü∂ cyclesFunctor C where
  app S := S.toCycles
  naturality := fun _ _ œÜ => (toCycles_naturality œÜ).symm

end

namespace LeftHomologyData

/-- If `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` is a morphism of short complexes such that `œÜ.œÑ‚ÇÅ` is epi, `œÜ.œÑ‚ÇÇ` is an iso
and `œÜ.œÑ‚ÇÉ` is mono, then a left homology data for `S‚ÇÅ` induces a left homology data for `S‚ÇÇ` with
the same `K` and `H` fields. The inverse construction is `ofEpiOfIsIsoOfMono'`. -/
@[simps]
noncomputable def ofEpiOfIsIsoOfMono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : LeftHomologyData S‚ÇÅ)
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] : LeftHomologyData S‚ÇÇ := by
  let i : h.K ‚ü∂ S‚ÇÇ.X‚ÇÇ := h.i ‚â´ œÜ.œÑ‚ÇÇ
  have wi : i ‚â´ S‚ÇÇ.g = 0 := by simp only [i, assoc, œÜ.comm‚ÇÇ‚ÇÉ, h.wi_assoc, zero_comp]
  have hi : IsLimit (KernelFork.ofŒπ i wi) := KernelFork.IsLimit.ofŒπ _ _
    (fun x hx => h.liftK (x ‚â´ inv œÜ.œÑ‚ÇÇ) (by rw [assoc, ‚Üê cancel_mono œÜ.œÑ‚ÇÉ, assoc,
      assoc, ‚Üê œÜ.comm‚ÇÇ‚ÇÉ, IsIso.inv_hom_id_assoc, hx, zero_comp]))
    (fun x hx => by simp [i]) (fun x hx b hb => by
      dsimp
      rw [‚Üê cancel_mono h.i, ‚Üê cancel_mono œÜ.œÑ‚ÇÇ, assoc, assoc, liftK_i_assoc,
        assoc, IsIso.inv_hom_id, comp_id, hb])
  let f' := hi.lift (KernelFork.ofŒπ S‚ÇÇ.f S‚ÇÇ.zero)
  have hf' : œÜ.œÑ‚ÇÅ ‚â´ f' = h.f' := by
    have eq := @Fork.IsLimit.lift_Œπ _ _ _ _ _ _ _ ((KernelFork.ofŒπ S‚ÇÇ.f S‚ÇÇ.zero)) hi
    simp only [Fork.Œπ_ofŒπ] at eq
    rw [‚Üê cancel_mono h.i, ‚Üê cancel_mono œÜ.œÑ‚ÇÇ, assoc, assoc, eq, f'_i, œÜ.comm‚ÇÅ‚ÇÇ]
  have wœÄ : f' ‚â´ h.œÄ = 0 := by
    rw [‚Üê cancel_epi œÜ.œÑ‚ÇÅ, comp_zero, reassoc_of% hf', h.f'_œÄ]
  have hœÄ : IsColimit (CokernelCofork.ofœÄ h.œÄ wœÄ) := CokernelCofork.IsColimit.ofœÄ _ _
    (fun x hx => h.descH x (by rw [‚Üê hf', assoc, hx, comp_zero]))
    (fun x hx => by simp) (fun x hx b hb => by rw [‚Üê cancel_epi h.œÄ, œÄ_descH, hb])
  exact ‚ü®h.K, h.H, i, h.œÄ, wi, hi, wœÄ, hœÄ‚ü©

@[simp]
lemma œÑ‚ÇÅ_ofEpiOfIsIsoOfMono_f' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : LeftHomologyData S‚ÇÅ)
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] : œÜ.œÑ‚ÇÅ ‚â´ (ofEpiOfIsIsoOfMono œÜ h).f' = h.f' := by
  rw [‚Üê cancel_mono (ofEpiOfIsIsoOfMono œÜ h).i, assoc, f'_i,
    ofEpiOfIsIsoOfMono_i, f'_i_assoc, œÜ.comm‚ÇÅ‚ÇÇ]

/-- If `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` is a morphism of short complexes such that `œÜ.œÑ‚ÇÅ` is epi, `œÜ.œÑ‚ÇÇ` is an iso
and `œÜ.œÑ‚ÇÉ` is mono, then a left homology data for `S‚ÇÇ` induces a left homology data for `S‚ÇÅ` with
the same `K` and `H` fields. The inverse construction is `ofEpiOfIsIsoOfMono`. -/
@[simps]
noncomputable def ofEpiOfIsIsoOfMono' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : LeftHomologyData S‚ÇÇ)
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] : LeftHomologyData S‚ÇÅ := by
  let i : h.K ‚ü∂ S‚ÇÅ.X‚ÇÇ := h.i ‚â´ inv œÜ.œÑ‚ÇÇ
  have wi : i ‚â´ S‚ÇÅ.g = 0 := by
    rw [assoc, ‚Üê cancel_mono œÜ.œÑ‚ÇÉ, zero_comp, assoc, assoc, ‚Üê œÜ.comm‚ÇÇ‚ÇÉ,
      IsIso.inv_hom_id_assoc, h.wi]
  have hi : IsLimit (KernelFork.ofŒπ i wi) := KernelFork.IsLimit.ofŒπ _ _
    (fun x hx => h.liftK (x ‚â´ œÜ.œÑ‚ÇÇ)
      (by rw [assoc, œÜ.comm‚ÇÇ‚ÇÉ, reassoc_of% hx, zero_comp]))
    (fun x hx => by simp [i])
    (fun x hx b hb => by rw [‚Üê cancel_mono h.i, ‚Üê cancel_mono (inv œÜ.œÑ‚ÇÇ), assoc, assoc,
      hb, liftK_i_assoc, assoc, IsIso.hom_inv_id, comp_id])
  let f' := hi.lift (KernelFork.ofŒπ S‚ÇÅ.f S‚ÇÅ.zero)
  have hf' : f' ‚â´ i = S‚ÇÅ.f := Fork.IsLimit.lift_Œπ _
  have hf'' : f' = œÜ.œÑ‚ÇÅ ‚â´ h.f' := by
    rw [‚Üê cancel_mono h.i, ‚Üê cancel_mono (inv œÜ.œÑ‚ÇÇ), assoc, assoc, assoc, hf', f'_i_assoc,
      œÜ.comm‚ÇÅ‚ÇÇ_assoc, IsIso.hom_inv_id, comp_id]
  have wœÄ : f' ‚â´ h.œÄ = 0 := by simp only [hf'', assoc, f'_œÄ, comp_zero]
  have hœÄ : IsColimit (CokernelCofork.ofœÄ h.œÄ wœÄ) := CokernelCofork.IsColimit.ofœÄ _ _
    (fun x hx => h.descH x (by rw [‚Üê cancel_epi œÜ.œÑ‚ÇÅ, ‚Üê reassoc_of% hf'', hx, comp_zero]))
    (fun x hx => œÄ_descH _ _ _)
    (fun x hx b hx => by rw [‚Üê cancel_epi h.œÄ, œÄ_descH, hx])
  exact ‚ü®h.K, h.H, i, h.œÄ, wi, hi, wœÄ, hœÄ‚ü©

@[simp]
lemma ofEpiOfIsIsoOfMono'_f' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : LeftHomologyData S‚ÇÇ)
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] : (ofEpiOfIsIsoOfMono' œÜ h).f' = œÜ.œÑ‚ÇÅ ‚â´ h.f' := by
  rw [‚Üê cancel_mono (ofEpiOfIsIsoOfMono' œÜ h).i, f'_i, ofEpiOfIsIsoOfMono'_i,
    assoc, f'_i_assoc, œÜ.comm‚ÇÅ‚ÇÇ_assoc, IsIso.hom_inv_id, comp_id]

/-- If `e : S‚ÇÅ ‚âÖ S‚ÇÇ` is an isomorphism of short complexes and `h‚ÇÅ : LeftHomologyData S‚ÇÅ`,
this is the left homology data for `S‚ÇÇ` deduced from the isomorphism. -/
noncomputable def ofIso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h‚ÇÅ : LeftHomologyData S‚ÇÅ) : LeftHomologyData S‚ÇÇ :=
  h‚ÇÅ.ofEpiOfIsIsoOfMono e.hom

end LeftHomologyData

lemma hasLeftHomology_of_epi_of_isIso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [HasLeftHomology S‚ÇÅ]
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] : HasLeftHomology S‚ÇÇ :=
  HasLeftHomology.mk' (LeftHomologyData.ofEpiOfIsIsoOfMono œÜ S‚ÇÅ.leftHomologyData)

lemma hasLeftHomology_of_epi_of_isIso_of_mono' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [HasLeftHomology S‚ÇÇ]
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] : HasLeftHomology S‚ÇÅ :=
  HasLeftHomology.mk' (LeftHomologyData.ofEpiOfIsIsoOfMono' œÜ S‚ÇÇ.leftHomologyData)

lemma hasLeftHomology_of_iso {S‚ÇÅ S‚ÇÇ : ShortComplex C} (e : S‚ÇÅ ‚âÖ S‚ÇÇ) [HasLeftHomology S‚ÇÅ] :
    HasLeftHomology S‚ÇÇ :=
  hasLeftHomology_of_epi_of_isIso_of_mono e.hom

namespace LeftHomologyMapData

/-- This left homology map data expresses compatibilities of the left homology data
constructed by `LeftHomologyData.ofEpiOfIsIsoOfMono` -/
@[simps]
def ofEpiOfIsIsoOfMono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : LeftHomologyData S‚ÇÅ)
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] :
    LeftHomologyMapData œÜ h (LeftHomologyData.ofEpiOfIsIsoOfMono œÜ h) where
  œÜK := ùüô _
  œÜH := ùüô _

/-- This left homology map data expresses compatibilities of the left homology data
constructed by `LeftHomologyData.ofEpiOfIsIsoOfMono'` -/
@[simps]
noncomputable def ofEpiOfIsIsoOfMono' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : LeftHomologyData S‚ÇÇ)
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] :
    LeftHomologyMapData œÜ (LeftHomologyData.ofEpiOfIsIsoOfMono' œÜ h) h where
  œÜK := ùüô _
  œÜH := ùüô _

end LeftHomologyMapData

instance (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.LeftHomologyData) (h‚ÇÇ : S‚ÇÇ.LeftHomologyData)
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] :
    IsIso (leftHomologyMap' œÜ h‚ÇÅ h‚ÇÇ) := by
  let h‚ÇÇ' := LeftHomologyData.ofEpiOfIsIsoOfMono œÜ h‚ÇÅ
  have : IsIso (leftHomologyMap' œÜ h‚ÇÅ h‚ÇÇ') := by
    rw [(LeftHomologyMapData.ofEpiOfIsIsoOfMono œÜ h‚ÇÅ).leftHomologyMap'_eq]
    dsimp
    infer_instance
  have eq := leftHomologyMap'_comp œÜ (ùüô S‚ÇÇ) h‚ÇÅ h‚ÇÇ' h‚ÇÇ
  rw [comp_id] at eq
  rw [eq]
  infer_instance

/-- If a morphism of short complexes `œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ` is such that `œÜ.œÑ‚ÇÅ` is epi, `œÜ.œÑ‚ÇÇ` is an iso,
and `œÜ.œÑ‚ÇÉ` is mono, then the induced morphism on left homology is an isomorphism. -/
instance (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [S‚ÇÅ.HasLeftHomology] [S‚ÇÇ.HasLeftHomology]
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] :
    IsIso (leftHomologyMap œÜ) := by
  dsimp only [leftHomologyMap]
  infer_instance

section

variable (S) (h : LeftHomologyData S) {A : C} (k : A ‚ü∂ S.X‚ÇÇ) (hk : k ‚â´ S.g = 0)
  [HasLeftHomology S]

/-- A morphism `k : A ‚ü∂ S.X‚ÇÇ` such that `k ‚â´ S.g = 0` lifts to a morphism `A ‚ü∂ S.cycles`. -/
noncomputable def liftCycles : A ‚ü∂ S.cycles :=
  S.leftHomologyData.liftK k hk

@[reassoc (attr := simp)]
lemma liftCycles_i : S.liftCycles k hk ‚â´ S.iCycles = k :=
  LeftHomologyData.liftK_i _ k hk

@[reassoc]
lemma comp_liftCycles {A' : C} (Œ± : A' ‚ü∂ A) :
    Œ± ‚â´ S.liftCycles k hk = S.liftCycles (Œ± ‚â´ k) (by rw [assoc, hk, comp_zero]) := by aesop_cat

/-- Via `S.iCycles : S.cycles ‚ü∂ S.X‚ÇÇ`, the object `S.cycles` identifies to the
kernel of `S.g : S.X‚ÇÇ ‚ü∂ S.X‚ÇÉ`. -/
noncomputable def cyclesIsKernel : IsLimit (KernelFork.ofŒπ S.iCycles S.iCycles_g) :=
  S.leftHomologyData.hi

/-- The canonical isomorphism `S.cycles ‚âÖ kernel S.g`. -/
@[simps]
noncomputable def cyclesIsoKernel [HasKernel S.g] : S.cycles ‚âÖ kernel S.g where
  hom := kernel.lift S.g S.iCycles (by simp)
  inv := S.liftCycles (kernel.Œπ S.g) (by simp)

/-- The morphism `A ‚ü∂ S.leftHomology` obtained from a morphism `k : A ‚ü∂ S.X‚ÇÇ`
such that `k ‚â´ S.g = 0.` -/
@[simp]
noncomputable def liftLeftHomology : A ‚ü∂ S.leftHomology :=
  S.liftCycles k hk ‚â´ S.leftHomologyœÄ

@[reassoc]
lemma liftCycles_leftHomologyœÄ_eq_zero_of_boundary (x : A ‚ü∂ S.X‚ÇÅ) (hx : k = x ‚â´ S.f) :
    S.liftCycles k (by rw [hx, assoc, S.zero, comp_zero]) ‚â´ S.leftHomologyœÄ = 0 :=
  LeftHomologyData.liftK_œÄ_eq_zero_of_boundary _ k x hx

@[reassoc (attr := simp)]
lemma toCycles_comp_leftHomologyœÄ : S.toCycles ‚â´ S.leftHomologyœÄ = 0 :=
  S.liftCycles_leftHomologyœÄ_eq_zero_of_boundary S.f (ùüô _) (by rw [id_comp])

/-- Via `S.leftHomologyœÄ : S.cycles ‚ü∂ S.leftHomology`, the object `S.leftHomology` identifies
to the cokernel of `S.toCycles : S.X‚ÇÅ ‚ü∂ S.cycles`. -/
noncomputable def leftHomologyIsCokernel :
    IsColimit (CokernelCofork.ofœÄ S.leftHomologyœÄ S.toCycles_comp_leftHomologyœÄ) :=
  S.leftHomologyData.hœÄ

@[reassoc (attr := simp)]
lemma liftCycles_comp_cyclesMap (œÜ : S ‚ü∂ S‚ÇÅ) [S‚ÇÅ.HasLeftHomology] :
    S.liftCycles k hk ‚â´ cyclesMap œÜ =
      S‚ÇÅ.liftCycles (k ‚â´ œÜ.œÑ‚ÇÇ) (by rw [assoc, œÜ.comm‚ÇÇ‚ÇÉ, reassoc_of% hk, zero_comp]) := by
  aesop_cat

variable {S}

@[reassoc (attr := simp)]
lemma LeftHomologyData.liftCycles_comp_cyclesIso_hom :
    S.liftCycles k hk ‚â´ h.cyclesIso.hom = h.liftK k hk := by
  simp only [‚Üê cancel_mono h.i, assoc, LeftHomologyData.cyclesIso_hom_comp_i,
    liftCycles_i, LeftHomologyData.liftK_i]

@[reassoc (attr := simp)]
lemma LeftHomologyData.lift_K_comp_cyclesIso_inv :
    h.liftK k hk ‚â´ h.cyclesIso.inv = S.liftCycles k hk := by
  rw [‚Üê h.liftCycles_comp_cyclesIso_hom, assoc, Iso.hom_inv_id, comp_id]

end

namespace HasLeftHomology

variable (S)

lemma hasKernel [S.HasLeftHomology] : HasKernel S.g :=
  ‚ü®‚ü®‚ü®_, S.leftHomologyData.hi‚ü©‚ü©‚ü©

lemma hasCokernel [S.HasLeftHomology] [HasKernel S.g] :
    HasCokernel (kernel.lift S.g S.f S.zero) := by
  let h := S.leftHomologyData
  haveI : HasColimit (parallelPair h.f' 0) := ‚ü®‚ü®‚ü®_, h.hœÄ'‚ü©‚ü©‚ü©
  let e : parallelPair (kernel.lift S.g S.f S.zero) 0 ‚âÖ parallelPair h.f' 0 :=
    parallelPair.ext (Iso.refl _) (IsLimit.conePointUniqueUpToIso (kernelIsKernel S.g) h.hi)
      (by aesop_cat) (by aesop_cat)
  exact hasColimitOfIso e

end HasLeftHomology

/-- The left homology of a short complex `S` identifies to the cokernel of the canonical
morphism `S.X‚ÇÅ ‚ü∂ kernel S.g`. -/
noncomputable def leftHomologyIsoCokernelLift [S.HasLeftHomology] [HasKernel S.g]
    [HasCokernel (kernel.lift S.g S.f S.zero)] :
    S.leftHomology ‚âÖ cokernel (kernel.lift S.g S.f S.zero) :=
  (LeftHomologyData.ofHasKernelOfHasCokernel S).leftHomologyIso

/-! The following lemmas and instance gives a sufficient condition for a morphism
of short complexes to induce an isomorphism on cycles. -/

lemma isIso_cyclesMap'_of_isIso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÇ : IsIso œÜ.œÑ‚ÇÇ) (h‚ÇÉ : Mono œÜ.œÑ‚ÇÉ)
    (h‚ÇÅ : S‚ÇÅ.LeftHomologyData) (h‚ÇÇ : S‚ÇÇ.LeftHomologyData) :
    IsIso (cyclesMap' œÜ h‚ÇÅ h‚ÇÇ) := by
  refine' ‚ü®h‚ÇÅ.liftK (h‚ÇÇ.i ‚â´ inv œÜ.œÑ‚ÇÇ) _, _, _‚ü©
  ¬∑ simp only [assoc, ‚Üê cancel_mono œÜ.œÑ‚ÇÉ, zero_comp, ‚Üê œÜ.comm‚ÇÇ‚ÇÉ, IsIso.inv_hom_id_assoc, h‚ÇÇ.wi]
  ¬∑ simp only [‚Üê cancel_mono h‚ÇÅ.i, assoc, h‚ÇÅ.liftK_i, cyclesMap'_i_assoc,
      IsIso.hom_inv_id, comp_id, id_comp]
  ¬∑ simp only [‚Üê cancel_mono h‚ÇÇ.i, assoc, cyclesMap'_i, h‚ÇÅ.liftK_i_assoc,
      IsIso.inv_hom_id, comp_id, id_comp]

lemma isIso_cyclesMap_of_isIso_of_mono' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÇ : IsIso œÜ.œÑ‚ÇÇ) (h‚ÇÉ : Mono œÜ.œÑ‚ÇÉ)
    [S‚ÇÅ.HasLeftHomology] [S‚ÇÇ.HasLeftHomology] :
    IsIso (cyclesMap œÜ) :=
  isIso_cyclesMap'_of_isIso_of_mono œÜ h‚ÇÇ h‚ÇÉ _ _

instance isIso_cyclesMap_of_isIso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ]
    [S‚ÇÅ.HasLeftHomology] [S‚ÇÇ.HasLeftHomology] :
    IsIso (cyclesMap œÜ) :=
  isIso_cyclesMap_of_isIso_of_mono' œÜ inferInstance inferInstance

end ShortComplex

end CategoryTheory
