/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.HomotopyCategory.MappingCone
import Mathlib.Algebra.Homology.HomotopyCategory.HomComplexShift
import Mathlib.CategoryTheory.Triangulated.Functor

/-! The pretriangulated structure on the homotopy category of complexes

In this file, we define the pretriangulated structure on the homotopy
category `HomotopyCategory C (ComplexShape.up ‚Ñ§)` of an additive category `C`.
The distinguished triangles are the triangles that are isomorphic to the
image in the homotopy category of the standard triangle
`K ‚ü∂ L ‚ü∂ mappingCone œÜ ‚ü∂ K‚ü¶(1 : ‚Ñ§)‚üß` for some morphism of
cochain complexes `œÜ : K ‚ü∂ L`.

This result first appeared in the Liquid Tensor Experiment. In the LTE, the
formalization followed the Stacks Project: in particular, the distinguished
triangles were defined using degreewise-split short exact sequences of cochain
complexes. Here, we follow the original definitions in [Verdiers's thesis, I.3][verdier1996]
(with the better sign conventions from the introduction of
[Brian Conrad's book *Grothendieck duality and base change*][conrad2000]).

## References
* [Jean-Louis Verdier, *Des cat√©gories d√©riv√©es des cat√©gories ab√©liennes*][verdier1996]
* [Brian Conrad, Grothendieck duality and base change][conrad2000]
* https://stacks.math.columbia.edu/tag/014P

-/

open CategoryTheory Category Limits CochainComplex.HomComplex Pretriangulated

variable {C : Type*} [Category C] [Preadditive C] [HasZeroObject C] [HasBinaryBiproducts C]
  {K L : CochainComplex C ‚Ñ§} (œÜ : K ‚ü∂ L)

namespace CochainComplex

namespace mappingCone

/-- The standard triangle `K ‚ü∂ L ‚ü∂ mappingCone œÜ ‚ü∂ K‚ü¶(1 : ‚Ñ§)‚üß` in `CochainComplex C ‚Ñ§`
attached to a morphism `œÜ : K ‚ü∂ L`. It involves `œÜ`, `inr œÜ : L ‚ü∂ mappingCone œÜ` and
the morphism induced by the `1`-cocycle `-mappingCone.fst œÜ`. -/
@[simps! obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ mor‚ÇÅ mor‚ÇÇ]
noncomputable def triangle : Triangle (CochainComplex C ‚Ñ§) :=
  Triangle.mk œÜ (inr œÜ) (Cocycle.homOf ((-fst œÜ).rightShift 1 0 (zero_add 1)))

@[reassoc (attr := simp)]
lemma inl_v_triangle_mor‚ÇÉ_f (p q : ‚Ñ§) (hpq : p + (-1) = q) :
    (inl œÜ).v p q hpq ‚â´ (triangle œÜ).mor‚ÇÉ.f q =
      -(K.shiftFunctorObjXIso 1 q p (by rw [‚Üê hpq, neg_add_cancel_right])).inv := by
  simp [triangle, Cochain.rightShift_v _ 1 0 (zero_add 1) q q (add_zero q) p (by omega)]

@[reassoc (attr := simp)]
lemma inr_f_triangle_mor‚ÇÉ_f (p : ‚Ñ§) : (inr œÜ).f p ‚â´ (triangle œÜ).mor‚ÇÉ.f p = 0 := by
  simp [triangle, Cochain.rightShift_v _ 1 0 _ p p (add_zero p) (p+1) rfl]

@[reassoc (attr := simp)]
lemma inr_triangleŒ¥ : inr œÜ ‚â´ (triangle œÜ).mor‚ÇÉ = 0 := by aesop_cat

/-- The (distinguished) triangle in the homotopy category that is associated to
a morphism `œÜ : K ‚ü∂ L` in the category `CochainComplex C ‚Ñ§`. -/
noncomputable abbrev triangleh : Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§)) :=
  (HomotopyCategory.quotient _ _).mapTriangle.obj (triangle œÜ)

variable (K)

/-- The mapping cone of the identity is contractible. -/
noncomputable def homotopyToZeroOfId : Homotopy (ùüô (mappingCone (ùüô K))) 0 :=
  descHomotopy (ùüô K) _ _ 0 (inl _) (by simp) (by simp)

variable {K}

section mapOfHomotopy

variable {K‚ÇÅ L‚ÇÅ K‚ÇÇ L‚ÇÇ K‚ÇÉ L‚ÇÉ : CochainComplex C ‚Ñ§} {œÜ‚ÇÅ : K‚ÇÅ ‚ü∂ L‚ÇÅ} {œÜ‚ÇÇ : K‚ÇÇ ‚ü∂ L‚ÇÇ}
  {a : K‚ÇÅ ‚ü∂ K‚ÇÇ} {b : L‚ÇÅ ‚ü∂ L‚ÇÇ} (H : Homotopy (œÜ‚ÇÅ ‚â´ b) (a ‚â´ œÜ‚ÇÇ))

/-- The morphism `mappingCone œÜ‚ÇÅ ‚ü∂ mappingCone œÜ‚ÇÇ` that is induced by a square that
is commutative up to homotopy. -/
noncomputable def mapOfHomotopy :
    mappingCone œÜ‚ÇÅ ‚ü∂ mappingCone œÜ‚ÇÇ :=
  desc œÜ‚ÇÅ ((Cochain.ofHom a).comp (inl œÜ‚ÇÇ) (zero_add _) +
    ((Cochain.equivHomotopy _ _) H).1.comp (Cochain.ofHom (inr œÜ‚ÇÇ)) (add_zero _))
    (b ‚â´ inr œÜ‚ÇÇ) (by simp)

@[reassoc]
lemma triangleMapOfHomotopy_comm‚ÇÇ :
    inr œÜ‚ÇÅ ‚â´ mapOfHomotopy H = b ‚â´ inr œÜ‚ÇÇ := by
  simp [mapOfHomotopy]

@[reassoc]
lemma triangleMapOfHomotopy_comm‚ÇÉ :
    mapOfHomotopy H ‚â´ (triangle œÜ‚ÇÇ).mor‚ÇÉ = (triangle œÜ‚ÇÅ).mor‚ÇÉ ‚â´ a‚ü¶1‚üß' := by
  ext p
  simp [ext_from_iff _ _ _ rfl, triangle, mapOfHomotopy,
    Cochain.rightShift_v _ 1 0 _ p p _ (p + 1) rfl]

/-- The morphism `triangleh œÜ‚ÇÅ ‚ü∂ triangleh œÜ‚ÇÇ` that is induced by a square that
is commutative up to homotopy. -/
@[simps]
noncomputable def trianglehMapOfHomotopy :
    triangleh œÜ‚ÇÅ ‚ü∂ triangleh œÜ‚ÇÇ where
  hom‚ÇÅ := (HomotopyCategory.quotient _ _).map a
  hom‚ÇÇ := (HomotopyCategory.quotient _ _).map b
  hom‚ÇÉ := (HomotopyCategory.quotient _ _).map (mapOfHomotopy H)
  comm‚ÇÅ := by
    dsimp
    simp only [‚Üê Functor.map_comp]
    exact HomotopyCategory.eq_of_homotopy _ _ H
  comm‚ÇÇ := by
    dsimp
    simp only [‚Üê Functor.map_comp, triangleMapOfHomotopy_comm‚ÇÇ]
  comm‚ÇÉ := by
    dsimp
    rw [‚Üê Functor.map_comp_assoc, triangleMapOfHomotopy_comm‚ÇÉ, Functor.map_comp, assoc, assoc]
    erw [‚Üê NatTrans.naturality]
    rfl

end mapOfHomotopy

section map

variable {K‚ÇÅ L‚ÇÅ K‚ÇÇ L‚ÇÇ K‚ÇÉ L‚ÇÉ : CochainComplex C ‚Ñ§} (œÜ‚ÇÅ : K‚ÇÅ ‚ü∂ L‚ÇÅ) (œÜ‚ÇÇ : K‚ÇÇ ‚ü∂ L‚ÇÇ) (œÜ‚ÇÉ : K‚ÇÉ ‚ü∂ L‚ÇÉ)
  (a : K‚ÇÅ ‚ü∂ K‚ÇÇ) (b : L‚ÇÅ ‚ü∂ L‚ÇÇ) (comm : œÜ‚ÇÅ ‚â´ b = a ‚â´ œÜ‚ÇÇ)
  (a' : K‚ÇÇ ‚ü∂ K‚ÇÉ) (b' : L‚ÇÇ ‚ü∂ L‚ÇÉ) (comm' : œÜ‚ÇÇ ‚â´ b' = a' ‚â´ œÜ‚ÇÉ)

/-- The morphism `mappingCone œÜ‚ÇÅ ‚ü∂ mappingCone œÜ‚ÇÇ` that is induced by a commutative square. -/
noncomputable def map : mappingCone œÜ‚ÇÅ ‚ü∂ mappingCone œÜ‚ÇÇ :=
  desc œÜ‚ÇÅ ((Cochain.ofHom a).comp (inl œÜ‚ÇÇ) (zero_add _)) (b ‚â´ inr œÜ‚ÇÇ)
    (by simp [reassoc_of% comm])

lemma map_eq_mapOfHomotopy : map œÜ‚ÇÅ œÜ‚ÇÇ a b comm = mapOfHomotopy (Homotopy.ofEq comm) := by
  simp [map, mapOfHomotopy]

lemma map_id : map œÜ œÜ (ùüô _) (ùüô _) (by rw [id_comp, comp_id]) = ùüô _ := by
  ext n
  simp [ext_from_iff _ (n + 1) n rfl, map]

@[reassoc]
lemma map_comp : map œÜ‚ÇÅ œÜ‚ÇÉ (a ‚â´ a') (b ‚â´ b') (by rw [reassoc_of% comm, comm', assoc]) =
    map œÜ‚ÇÅ œÜ‚ÇÇ a b comm ‚â´ map œÜ‚ÇÇ œÜ‚ÇÉ a' b' comm' := by
  ext n
  simp [ext_from_iff _ (n+1) n rfl, map]

/-- The morphism `triangle œÜ‚ÇÅ ‚ü∂ triangle œÜ‚ÇÇ` that is induced by a commutative square. -/
@[simps]
noncomputable def triangleMap :
    triangle œÜ‚ÇÅ ‚ü∂ triangle œÜ‚ÇÇ where
  hom‚ÇÅ := a
  hom‚ÇÇ := b
  hom‚ÇÉ := map œÜ‚ÇÅ œÜ‚ÇÇ a b comm
  comm‚ÇÅ := comm
  comm‚ÇÇ := by
    dsimp
    rw [map_eq_mapOfHomotopy, triangleMapOfHomotopy_comm‚ÇÇ]
  comm‚ÇÉ := by
    dsimp
    rw [map_eq_mapOfHomotopy, triangleMapOfHomotopy_comm‚ÇÉ]

end map

/-

As the number of simp lemmas that are required in the proofs below is huge,
we use the `simp? ... says` syntax: it is meant to ease the maintenance
of this code as it gives a minimal list of lemmas with which `simp`
is able to finish the proof.

The `set_option maxHeartbeats` are necessary only when this code is compiled
with `set_option says.verify true` (e.g. during CI).

-/

section Rotate

set_option maxHeartbeats 400000 in
/-- Given `œÜ : K ‚ü∂ L`, `K‚ü¶(1 : ‚Ñ§)‚üß` is homotopy equivalent to
the mapping cone of `inr œÜ : L ‚ü∂ mappingCone œÜ`. -/
noncomputable def rotateHomotopyEquiv :
    HomotopyEquiv (K‚ü¶(1 : ‚Ñ§)‚üß) (mappingCone (inr œÜ)) where
  hom := lift (inr œÜ) (-(Cocycle.ofHom œÜ).leftShift 1 1 (zero_add 1))
    (-(inl œÜ).leftShift 1 0 (neg_add_self 1)) (by
      simp? [Cochain.Œ¥_leftShift _ 1 0 1 (neg_add_self 1) 0 (zero_add 1)] says
        simp only [Œ¥_neg, Cochain.Œ¥_leftShift _ 1 0 1 (neg_add_self 1) 0 (zero_add 1),
          Int.negOnePow_one, Œ¥_inl, Cochain.ofHom_comp, Cochain.leftShift_comp_zero_cochain,
          Units.neg_smul, one_smul, neg_neg, Cocycle.coe_neg, Cocycle.leftShift_coe,
          Cocycle.ofHom_coe, Cochain.neg_comp, add_right_neg])
  inv := desc (inr œÜ) 0 (triangle œÜ).mor‚ÇÉ
    (by simp only [Œ¥_zero, inr_triangleŒ¥, Cochain.ofHom_zero])
  homotopyHomInvId := Homotopy.ofEq (by
    ext n
    simp? [lift_desc_f _ _ _ _ _ _ _ _ _ rfl,
      (inl œÜ).leftShift_v 1 0 _ _ n _ (n + 1) (by simp only [add_neg_cancel_right])] says
      simp only [shiftFunctor_obj_X', HomologicalComplex.comp_f,
        lift_desc_f _ _ _ _ _ _ _ _ _ rfl, Cocycle.coe_neg, Cocycle.leftShift_coe,
        Cocycle.ofHom_coe, Cochain.neg_v, Cochain.zero_v,
        comp_zero, (inl œÜ).leftShift_v 1 0 _ _ n _ (n + 1) (by simp only [add_neg_cancel_right]),
        shiftFunctor_obj_X, mul_zero, sub_self, Int.zero_ediv, add_zero, Int.negOnePow_zero,
        shiftFunctorObjXIso, HomologicalComplex.XIsoOfEq_rfl, Iso.refl_hom, id_comp, one_smul,
        Preadditive.neg_comp, inl_v_triangle_mor‚ÇÉ_f, Iso.refl_inv, neg_neg, zero_add,
        HomologicalComplex.id_f])
  homotopyInvHomId := (Cochain.equivHomotopy _ _).symm
    ‚ü®-(snd (inr œÜ)).comp ((snd œÜ).comp (inl (inr œÜ)) (zero_add (-1))) (zero_add (-1)), by
      ext n
      simp? [ext_to_iff _ _ (n + 1) rfl, ext_from_iff _ (n + 1) _ rfl,
        Œ¥_zero_cochain_comp _ _ _ (neg_add_self 1),
        (inl œÜ).leftShift_v 1 0 (neg_add_self 1) n n (add_zero n) (n + 1) (by omega),
        (Cochain.ofHom œÜ).leftShift_v 1 1 (zero_add 1) n (n + 1) rfl (n + 1) (by omega),
        Cochain.comp_v _ _ (add_neg_self 1) n (n + 1) n rfl (by omega)] says
        simp only [Cochain.ofHom_comp, ofHom_desc, ofHom_lift, Cocycle.coe_neg,
          Cocycle.leftShift_coe, Cocycle.ofHom_coe, Cochain.comp_zero_cochain_v,
          shiftFunctor_obj_X', Œ¥_neg, Œ¥_zero_cochain_comp _ _ _ (neg_add_self 1), Œ¥_inl,
          Int.reduceNeg, Int.negOnePow_neg, Int.negOnePow_one, Œ¥_snd, Cochain.neg_comp,
          Cochain.comp_assoc_of_second_is_zero_cochain, smul_neg, Units.neg_smul, one_smul,
          neg_neg, Cochain.comp_add, inr_snd_assoc, neg_add_rev, Cochain.add_v, Cochain.neg_v,
          Cochain.comp_v _ _ (add_neg_self 1) n (n + 1) n rfl (by omega),
          Cochain.zero_cochain_comp_v, Cochain.ofHom_v, HomologicalComplex.id_f,
          ext_to_iff _ _ (n + 1) rfl, assoc, liftCochain_v_fst_v,
          (Cochain.ofHom œÜ).leftShift_v 1 1 (zero_add 1) n (n + 1) rfl (n + 1) (by omega),
          shiftFunctor_obj_X, mul_one, sub_self, mul_zero, Int.zero_ediv, add_zero,
          shiftFunctorObjXIso, HomologicalComplex.XIsoOfEq_rfl, Iso.refl_hom, id_comp,
          Preadditive.add_comp, Preadditive.neg_comp, inl_v_fst_v, comp_id, inr_f_fst_v, comp_zero,
          neg_zero, neg_add_cancel_comm, ext_from_iff _ (n + 1) _ rfl, inl_v_descCochain_v_assoc,
          Cochain.zero_v, zero_comp, Preadditive.comp_neg, inl_v_snd_v_assoc,
          inr_f_descCochain_v_assoc, inr_f_snd_v_assoc, inl_v_triangle_mor‚ÇÉ_f_assoc, triangle_obj‚ÇÅ,
          Iso.refl_inv, inl_v_fst_v_assoc, inr_f_triangle_mor‚ÇÉ_f_assoc, inr_f_fst_v_assoc, and_self,
          liftCochain_v_snd_v,
          (inl œÜ).leftShift_v 1 0 (neg_add_self 1) n n (add_zero n) (n + 1) (by omega),
          Int.negOnePow_zero, inl_v_snd_v, inr_f_snd_v, zero_add, inl_v_descCochain_v,
          inr_f_descCochain_v, inl_v_triangle_mor‚ÇÉ_f, inr_f_triangle_mor‚ÇÉ_f, add_left_neg]‚ü©

/-- Auxiliary definition for `rotateTrianglehIso`. -/
noncomputable def rotateHomotopyEquivComm‚ÇÇHomotopy :
  Homotopy ((triangle œÜ).mor‚ÇÉ ‚â´ (rotateHomotopyEquiv œÜ).hom)
    (inr (CochainComplex.mappingCone.inr œÜ)) := (Cochain.equivHomotopy _ _).symm
      ‚ü®-(snd œÜ).comp (inl (inr œÜ)) (zero_add (-1)), by
        ext p
        dsimp [rotateHomotopyEquiv]
        simp [ext_from_iff _ _ _ rfl, ext_to_iff _ _ _ rfl,
          (inl œÜ).leftShift_v 1 0 (neg_add_self 1) p p (add_zero p) (p + 1) (by omega),
          Œ¥_zero_cochain_comp _ _ _ (neg_add_self 1),
          Cochain.comp_v _ _ (add_neg_self 1) p (p + 1) p rfl (by omega),
          (Cochain.ofHom œÜ).leftShift_v 1 1 (zero_add 1) p (p + 1) rfl (p + 1) (by omega)]‚ü©

@[reassoc (attr := simp)]
lemma rotateHomotopyEquiv_comm‚ÇÇ :
    (HomotopyCategory.quotient _ _ ).map (triangle œÜ).mor‚ÇÉ ‚â´
      (HomotopyCategory.quotient _ _ ).map (rotateHomotopyEquiv œÜ).hom =
      (HomotopyCategory.quotient _ _ ).map (inr (inr œÜ)) := by
  simpa only [Functor.map_comp]
    using HomotopyCategory.eq_of_homotopy _ _  (rotateHomotopyEquivComm‚ÇÇHomotopy œÜ)

@[reassoc (attr := simp)]
lemma rotateHomotopyEquiv_comm‚ÇÉ :
    (rotateHomotopyEquiv œÜ).hom ‚â´ (triangle (inr œÜ)).mor‚ÇÉ = -œÜ‚ü¶1‚üß' := by
  ext p
  dsimp [rotateHomotopyEquiv]
  simp [lift_f _ _ _ _ _ (p + 1) rfl,
    (Cochain.ofHom œÜ).leftShift_v 1 1 (zero_add 1) p (p + 1) rfl (p + 1) (by omega)]

/-- The canonical isomorphism of triangles `(triangleh œÜ).rotate ‚âÖ (triangleh (inr œÜ))`. -/
noncomputable def rotateTrianglehIso :
    (triangleh œÜ).rotate ‚âÖ (triangleh (inr œÜ)) :=
  Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _)
    (((HomotopyCategory.quotient C (ComplexShape.up ‚Ñ§)).commShiftIso (1 : ‚Ñ§)).symm.app K ‚â™‚â´
      HomotopyCategory.isoOfHomotopyEquiv (rotateHomotopyEquiv œÜ)) (by aesop_cat) (by aesop_cat) (by
        dsimp
        rw [CategoryTheory.Functor.map_id, comp_id, assoc, ‚Üê Functor.map_comp_assoc,
          rotateHomotopyEquiv_comm‚ÇÉ, Functor.map_neg, Preadditive.neg_comp,
          Functor.commShiftIso_hom_naturality, Preadditive.comp_neg,
          Iso.inv_hom_id_app_assoc])

end Rotate

section Shift

set_option maxHeartbeats 800000 in
/-- The canonical isomorphism `(mappingCone œÜ)‚ü¶n‚üß ‚âÖ mappingCone (œÜ‚ü¶n‚üß')`. -/
noncomputable def shiftIso (n : ‚Ñ§) : (mappingCone œÜ)‚ü¶n‚üß ‚âÖ mappingCone (œÜ‚ü¶n‚üß') where
  hom := lift _ (n.negOnePow ‚Ä¢ (fst œÜ).shift n) ((snd œÜ).shift n) (by
    ext p q hpq
    dsimp
    simp? [Cochain.shift_v'] says
      simp only [Cochain.Œ¥_shift, Œ¥_snd, Cochain.shift_neg, smul_neg, Cochain.neg_v,
        shiftFunctor_obj_X', Cochain.units_smul_v, Cochain.shift_v', Cochain.comp_zero_cochain_v,
        Cochain.ofHom_v, Cochain.units_smul_comp, shiftFunctor_map_f', add_left_neg])
  inv := desc _ (n.negOnePow ‚Ä¢ (inl œÜ).shift n) ((inr œÜ)‚ü¶n‚üß') (by
    ext p
    dsimp
    simp? [Cochain.shift_v', smul_smul] says
      simp only [Œ¥_units_smul, Cochain.Œ¥_shift, Œ¥_inl, Cochain.ofHom_comp, smul_smul,
        Int.units_mul_self, one_smul, Cochain.shift_v', Cochain.comp_zero_cochain_v,
        Cochain.ofHom_v, shiftFunctor_obj_X', shiftFunctor_map_f'])
  hom_inv_id := by
    ext p
    dsimp
    simp? [lift_desc_f _ _ _ _ _ _ _ _ (p + 1) rfl, id_X, smul_smul, Cochain.shift_v'] says
      simp only [lift_desc_f _ _ _ _ _ _ _ _ (p + 1) rfl, shiftFunctor_obj_X',
        Cocycle.coe_units_smul, Cocycle.shift_coe, Cochain.units_smul_v, Cochain.shift_v',
        Linear.comp_units_smul, Linear.units_smul_comp, smul_smul, Int.units_mul_self, one_smul,
        shiftFunctor_map_f', id_X]
  inv_hom_id := by
    ext p
    dsimp
    simp? [ext_from_iff _ (p + 1) _ rfl, ext_to_iff _ _ (p + 1) rfl,
        Cochain.shift_v', smul_smul] says
      simp only [ext_from_iff _ (p + 1) _ rfl, shiftFunctor_obj_X', inl_v_desc_f_assoc,
        Cochain.units_smul_v, Cochain.shift_v', Linear.units_smul_comp, comp_id,
        ext_to_iff _ _ (p + 1) rfl, assoc, lift_f_fst_v,
        Cocycle.coe_units_smul, Cocycle.shift_coe, Linear.comp_units_smul, inl_v_fst_v, smul_smul,
        Int.units_mul_self, one_smul, lift_f_snd_v, inl_v_snd_v, smul_zero, and_self,
        inr_f_desc_f_assoc, shiftFunctor_map_f', inr_f_fst_v, inr_f_snd_v]

set_option maxHeartbeats 800000 in
/-- The canonical isomorphism `(triangle œÜ)‚ü¶n‚üß ‚âÖ triangle (œÜ‚ü¶n‚üß')`. -/
noncomputable def shiftTriangleIso (n : ‚Ñ§) :
    (Triangle.shiftFunctor _ n).obj (triangle œÜ) ‚âÖ triangle (œÜ‚ü¶n‚üß') := by
  refine Triangle.isoMk _ _ (Iso.refl _) (n.negOnePow ‚Ä¢ Iso.refl _) (shiftIso œÜ n) ?_ ?_ ?_
  ¬∑ simp? [Units.smul_def, smul_smul] says
      simp only [Triangle.shiftFunctor_obj, triangle_obj‚ÇÅ, triangle_obj‚ÇÇ, triangle_obj‚ÇÉ,
        triangle_mor‚ÇÅ, Units.smul_def, triangle_mor‚ÇÇ, Functor.comp_obj, Triangle.mk_obj‚ÇÅ,
        Triangle.mk_obj‚ÇÇ, Triangle.mk_mor‚ÇÅ, Preadditive.smul_iso_hom, Iso.refl_hom,
        Linear.comp_smul, comp_id, smul_smul, Int.units_coe_mul_self, one_smul, id_comp]
  ¬∑ ext p
    set_option tactic.skipAssignedInstances false in
    dsimp
    simp? [shiftIso, Units.smul_def, ext_to_iff _ _ (p + 1) rfl, Cochain.shift_v'] says
      simp only [Units.smul_def, shiftIso, Linear.smul_comp, id_comp,
        ext_to_iff _ _ (p + 1) rfl, shiftFunctor_obj_X', assoc, lift_f_fst_v, Cocycle.coe_smul,
        Cocycle.shift_coe, Cochain.smul_v, Cochain.shift_v', Linear.comp_smul, inr_f_fst_v,
        smul_zero, lift_f_snd_v, inr_f_snd_v, and_true]
    rw [smul_zero]
  ¬∑ ext p
    dsimp
    simp? [shiftIso, Units.smul_def, shiftFunctorComm_hom_app_f, triangle, Cochain.shift_v',
      (fst (œÜ‚ü¶n‚üß')).1.rightShift_v 1 0 (zero_add 1) p p (add_zero p) (p + 1) rfl,
      (fst œÜ).1.rightShift_v 1 0 (zero_add 1) (p + n) (p + n)
        (add_zero (p + n)) (p + 1 + n) (by omega)] says
      simp only [triangle, Triangle.mk_mor‚ÇÉ, Cocycle.homOf_f, Cocycle.rightShift_coe,
        Cocycle.coe_neg, Cochain.rightShift_neg, Cochain.neg_v, shiftFunctor_obj_X',
        (fst œÜ).1.rightShift_v 1 0 (zero_add 1) (p + n) (p + n) (add_zero (p + n)) (p + 1 + n)
          (by omega),
        shiftFunctor_obj_X, shiftFunctorObjXIso, shiftFunctorComm_hom_app_f, Preadditive.neg_comp,
        assoc, Iso.inv_hom_id, comp_id, smul_neg, Units.smul_def, shiftIso,
        (fst (œÜ‚ü¶n‚üß')).1.rightShift_v 1 0 (zero_add 1) p p (add_zero p) (p + 1) rfl,
        HomologicalComplex.XIsoOfEq_rfl, Iso.refl_inv, Preadditive.comp_neg, lift_f_fst_v,
        Cocycle.coe_smul, Cocycle.shift_coe, Cochain.smul_v, Cochain.shift_v']

/-- The canonical isomorphism `(triangleh œÜ)‚ü¶n‚üß ‚âÖ triangleh (œÜ‚ü¶n‚üß')`. -/
noncomputable def shiftTrianglehIso (n : ‚Ñ§) :
    (Triangle.shiftFunctor _ n).obj (triangleh œÜ) ‚âÖ triangleh (œÜ‚ü¶n‚üß') :=
  ((HomotopyCategory.quotient _ _).mapTriangle.commShiftIso n).symm.app _ ‚â™‚â´
    (HomotopyCategory.quotient _ _).mapTriangle.mapIso (shiftTriangleIso œÜ n)

end Shift

end mappingCone

end CochainComplex

namespace HomotopyCategory

variable (C)

namespace Pretriangulated

/-- A triangle in `HomotopyCategory C (ComplexShape.up ‚Ñ§)` is distinguished if it is isomorphic to
the triangle `CochainComplex.mappingCone.triangleh œÜ` for some morphism of cochain
complexes `œÜ`. -/
def distinguishedTriangles : Set (Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§))) :=
  fun T => ‚àÉ (X Y : CochainComplex C ‚Ñ§) (œÜ : X ‚ü∂ Y),
    Nonempty (T ‚âÖ CochainComplex.mappingCone.triangleh œÜ)

variable {C}

lemma isomorphic_distinguished (T‚ÇÅ : Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§)))
    (hT‚ÇÅ : T‚ÇÅ ‚àà distinguishedTriangles C) (T‚ÇÇ : Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§)))
    (e : T‚ÇÇ ‚âÖ T‚ÇÅ) : T‚ÇÇ ‚àà distinguishedTriangles C := by
  obtain ‚ü®X, Y, f, ‚ü®e'‚ü©‚ü© := hT‚ÇÅ
  exact ‚ü®X, Y, f, ‚ü®e ‚â™‚â´ e'‚ü©‚ü©

lemma contractible_distinguished (X : HomotopyCategory C (ComplexShape.up ‚Ñ§)) :
    Pretriangulated.contractibleTriangle X ‚àà distinguishedTriangles C := by
  obtain ‚ü®X‚ü© := X
  refine' ‚ü®_, _, ùüô X, ‚ü®_‚ü©‚ü©
  have h := (isZero_quotient_obj_iff _).2 ‚ü®CochainComplex.mappingCone.homotopyToZeroOfId X‚ü©
  exact Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) h.isoZero.symm
    (by simp) (h.eq_of_tgt _ _) (by dsimp; ext)

lemma distinguished_cocone_triangle {X Y : HomotopyCategory C (ComplexShape.up ‚Ñ§)} (f : X ‚ü∂ Y) :
    ‚àÉ (Z : HomotopyCategory C (ComplexShape.up ‚Ñ§)) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶1‚üß),
      Triangle.mk f g h ‚àà distinguishedTriangles C := by
  obtain ‚ü®X‚ü© := X
  obtain ‚ü®Y‚ü© := Y
  obtain ‚ü®f, rfl‚ü© := (quotient _ _).map_surjective f
  exact ‚ü®_, _, _, ‚ü®_, _, f, ‚ü®Iso.refl _‚ü©‚ü©‚ü©

lemma rotate_distinguished_triangle' (T : Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§)))
    (hT : T ‚àà distinguishedTriangles C) : T.rotate ‚àà distinguishedTriangles C := by
  obtain ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü© := hT
  exact ‚ü®_, _, _, ‚ü®(rotate _).mapIso e ‚â™‚â´ CochainComplex.mappingCone.rotateTrianglehIso œÜ‚ü©‚ü©

lemma shift_distinguished_triangle (T : Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§)))
    (hT : T ‚àà distinguishedTriangles C) (n : ‚Ñ§) :
      (Triangle.shiftFunctor _ n).obj T ‚àà distinguishedTriangles C := by
  obtain ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü© := hT
  exact ‚ü®_, _, _, ‚ü®Functor.mapIso _ e ‚â™‚â´ CochainComplex.mappingCone.shiftTrianglehIso œÜ n‚ü©‚ü©

lemma invRotate_distinguished_triangle' (T : Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§)))
    (hT : T ‚àà distinguishedTriangles C) : T.invRotate ‚àà distinguishedTriangles C :=
  isomorphic_distinguished _
    (shift_distinguished_triangle _ (rotate_distinguished_triangle' _
      (rotate_distinguished_triangle' _ hT)) _) _
    ((invRotateIsoRotateRotateShiftFunctorNegOne _).app T)

lemma rotate_distinguished_triangle (T : Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§))) :
    T ‚àà distinguishedTriangles C ‚Üî T.rotate ‚àà distinguishedTriangles C := by
  constructor
  ¬∑ exact rotate_distinguished_triangle' T
  ¬∑ intro hT
    exact isomorphic_distinguished _ (invRotate_distinguished_triangle' T.rotate hT) _
      ((triangleRotation _).unitIso.app T)

lemma complete_distinguished_triangle_morphism
    (T‚ÇÅ T‚ÇÇ : Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§)))
    (hT‚ÇÅ : T‚ÇÅ ‚àà distinguishedTriangles C) (hT‚ÇÇ : T‚ÇÇ ‚àà distinguishedTriangles C)
    (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (fac : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ) :
    ‚àÉ (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ), T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß
      T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶(1 : ‚Ñ§)‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ := by
  obtain ‚ü®K‚ÇÅ, L‚ÇÅ, œÜ‚ÇÅ, ‚ü®e‚ÇÅ‚ü©‚ü© := hT‚ÇÅ
  obtain ‚ü®K‚ÇÇ, L‚ÇÇ, œÜ‚ÇÇ, ‚ü®e‚ÇÇ‚ü©‚ü© := hT‚ÇÇ
  obtain ‚ü®a', ha'‚ü© : ‚àÉ (a' : (quotient _ _).obj K‚ÇÅ ‚ü∂ (quotient _ _).obj K‚ÇÇ),
    a' = e‚ÇÅ.inv.hom‚ÇÅ ‚â´ a ‚â´ e‚ÇÇ.hom.hom‚ÇÅ := ‚ü®_, rfl‚ü©
  obtain ‚ü®b', hb'‚ü© : ‚àÉ (b' : (quotient _ _).obj L‚ÇÅ ‚ü∂ (quotient _ _).obj L‚ÇÇ),
    b' = e‚ÇÅ.inv.hom‚ÇÇ ‚â´ b ‚â´ e‚ÇÇ.hom.hom‚ÇÇ := ‚ü®_, rfl‚ü©
  obtain ‚ü®a'', rfl‚ü© := (quotient _ _).map_surjective a'
  obtain ‚ü®b'', rfl‚ü© := (quotient _ _).map_surjective b'
  have H : Homotopy (œÜ‚ÇÅ ‚â´ b'') (a'' ‚â´ œÜ‚ÇÇ) := homotopyOfEq _ _ (by
    have comm‚ÇÅ‚ÇÅ := e‚ÇÅ.inv.comm‚ÇÅ
    have comm‚ÇÅ‚ÇÇ := e‚ÇÇ.hom.comm‚ÇÅ
    dsimp at comm‚ÇÅ‚ÇÅ comm‚ÇÅ‚ÇÇ
    simp only [Functor.map_comp, ha', hb', reassoc_of% comm‚ÇÅ‚ÇÅ,
      reassoc_of% fac, comm‚ÇÅ‚ÇÇ, assoc])
  let Œ≥ := e‚ÇÅ.hom ‚â´ CochainComplex.mappingCone.trianglehMapOfHomotopy H ‚â´ e‚ÇÇ.inv
  have comm‚ÇÇ := Œ≥.comm‚ÇÇ
  have comm‚ÇÉ := Œ≥.comm‚ÇÉ
  dsimp [Œ≥] at comm‚ÇÇ comm‚ÇÉ
  simp only [ha', hb'] at comm‚ÇÇ comm‚ÇÉ
  exact ‚ü®Œ≥.hom‚ÇÉ, by simpa [Œ≥] using comm‚ÇÇ, by simpa [Œ≥] using comm‚ÇÉ‚ü©

end Pretriangulated

instance : Pretriangulated (HomotopyCategory C (ComplexShape.up ‚Ñ§)) where
  distinguishedTriangles := Pretriangulated.distinguishedTriangles C
  isomorphic_distinguished := Pretriangulated.isomorphic_distinguished
  contractible_distinguished := Pretriangulated.contractible_distinguished
  distinguished_cocone_triangle := Pretriangulated.distinguished_cocone_triangle
  rotate_distinguished_triangle := Pretriangulated.rotate_distinguished_triangle
  complete_distinguished_triangle_morphism :=
    Pretriangulated.complete_distinguished_triangle_morphism

variable {C}

lemma mappingCone_triangleh_distinguished {X Y : CochainComplex C ‚Ñ§} (f : X ‚ü∂ Y) :
    CochainComplex.mappingCone.triangleh f ‚àà distTriang (HomotopyCategory _ _) :=
  ‚ü®_, _, f, ‚ü®Iso.refl _‚ü©‚ü©

end HomotopyCategory
