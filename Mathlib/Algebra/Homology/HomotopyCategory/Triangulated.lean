/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.HomotopyCategory.Pretriangulated
import Mathlib.CategoryTheory.Triangulated.Triangulated
import Mathlib.CategoryTheory.ComposableArrows

/-! The triangulated structure on the homotopy category of complexes

In this file, we show that for any additive category `C`,
the pretriangulated category `HomotopyCategory C (ComplexShape.up ‚Ñ§)` is triangulated.

-/

open CategoryTheory Category Limits Pretriangulated ComposableArrows

variable {C : Type*} [Category C] [Preadditive C] [HasBinaryBiproducts C]
  {X‚ÇÅ X‚ÇÇ X‚ÇÉ : CochainComplex C ‚Ñ§} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : X‚ÇÇ ‚ü∂ X‚ÇÉ)

namespace CochainComplex

open HomComplex mappingCone

/-- Given two composable morphisms `f : X‚ÇÅ ‚ü∂ X‚ÇÇ` and `g : X‚ÇÇ ‚ü∂ X‚ÇÉ` in the category
of cochain complexes, this is the canonical triangle
`mappingCone f ‚ü∂ mappingCone (f ‚â´ g) ‚ü∂ mappingCone g ‚ü∂ (mappingCone f)‚ü¶1‚üß`. -/
@[simps! mor‚ÇÅ mor‚ÇÇ mor‚ÇÉ obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ]
noncomputable def mappingConeCompTriangle : Triangle (CochainComplex C ‚Ñ§) :=
  Triangle.mk (map f (f ‚â´ g) (ùüô X‚ÇÅ) g (by rw [id_comp]))
    (map (f ‚â´ g) g f (ùüô X‚ÇÉ) (by rw [comp_id]))
    ((triangle g).mor‚ÇÉ ‚â´ (inr f)‚ü¶1‚üß')

/-- Given two composable morphisms `f : X‚ÇÅ ‚ü∂ X‚ÇÇ` and `g : X‚ÇÇ ‚ü∂ X‚ÇÉ` in the category
of cochain complexes, this is the canonical triangle
`mappingCone f ‚ü∂ mappingCone (f ‚â´ g) ‚ü∂ mappingCone g ‚ü∂ (mappingCone f)‚ü¶1‚üß`
in the homotopy category. It is a distinguished triangle,
see `HomotopyCategory.mappingConeCompTriangleh_distinguished`. -/
noncomputable def mappingConeCompTriangleh :
    Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§)) :=
  (HomotopyCategory.quotient _ _).mapTriangle.obj (mappingConeCompTriangle f g)

@[reassoc]
lemma mappingConeCompTriangle_mor‚ÇÉ_naturality {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : CochainComplex C ‚Ñ§} (f' : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    (g' : Y‚ÇÇ ‚ü∂ Y‚ÇÉ) (œÜ : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f' g') :
    map g g' (œÜ.app 1) (œÜ.app 2) (naturality' œÜ 1 2) ‚â´ (mappingConeCompTriangle f' g').mor‚ÇÉ =
      (mappingConeCompTriangle f g).mor‚ÇÉ ‚â´
        (map f f' (œÜ.app 0) (œÜ.app 1) (naturality' œÜ 0 1))‚ü¶1‚üß' := by
  ext n
  dsimp [map]
  -- the following list of lemmas was obtained by doing simp? [ext_from_iff _ (n + 1) _ rfl]
  simp only [Int.reduceNeg, Fin.isValue, assoc, inr_f_desc_f, HomologicalComplex.comp_f,
    ext_from_iff _ (n + 1) _ rfl, inl_v_desc_f_assoc, Cochain.zero_cochain_comp_v, Cochain.ofHom_v,
    inl_v_triangle_mor‚ÇÉ_f_assoc, triangle_obj‚ÇÅ, shiftFunctor_obj_X', shiftFunctor_obj_X,
    shiftFunctorObjXIso, HomologicalComplex.XIsoOfEq_rfl, Iso.refl_inv, Preadditive.neg_comp,
    id_comp, Preadditive.comp_neg, inr_f_desc_f_assoc, inr_f_triangle_mor‚ÇÉ_f_assoc, zero_comp,
    comp_zero, and_self]

namespace MappingConeCompHomotopyEquiv

/-- Given two composable morphisms `f` and `g` in the category of cochain complexes, this
is the canonical morphism (which is an homotopy equivalence) from `mappingCone g` to
the mapping cone of the morphism `mappingCone f ‚ü∂ mappingCone (f ‚â´ g)`. -/
noncomputable def hom :
    mappingCone g ‚ü∂ mappingCone (mappingConeCompTriangle f g).mor‚ÇÅ :=
  lift _ (descCocycle g (Cochain.ofHom (inr f)) 0 (zero_add 1) (by dsimp; simp))
    (descCochain _ 0 (Cochain.ofHom (inr (f ‚â´ g))) (neg_add_cancel 1)) (by
      ext p _ rfl
      dsimp [mappingConeCompTriangle, map]
      simp [ext_from_iff _ _ _ rfl, inl_v_d_assoc _ (p+1) p (p+2) (by omega) (by omega)])

/-- Given two composable morphisms `f` and `g` in the category of cochain complexes, this
is the canonical morphism (which is an homotopy equivalence) from the mapping cone of
the morphism `mappingCone f ‚ü∂ mappingCone (f ‚â´ g)` to `mappingCone g`. -/
noncomputable def inv : mappingCone (mappingConeCompTriangle f g).mor‚ÇÅ ‚ü∂ mappingCone g :=
  desc _ ((snd f).comp (inl g) (zero_add (-1)))
    (desc _ ((Cochain.ofHom f).comp (inl g) (zero_add (-1))) (inr g) (by simp)) (by
      ext p
      rw [ext_from_iff _ (p + 1) _ rfl, ext_to_iff _ _ (p + 1) rfl]
      simp [map, Œ¥_zero_cochain_comp,
        Cochain.comp_v _ _ (add_neg_cancel 1) p (p+1) p (by omega) (by omega)])
@[reassoc (attr := simp)]
lemma hom_inv_id : hom f g ‚â´ inv f g = ùüô _ := by
  ext n
  simp [hom, inv, lift_desc_f _ _ _ _ _ _ _ n (n+1) rfl, ext_from_iff _ (n + 1) _ rfl]

set_option maxHeartbeats 400000 in
/-- Given two composable morphisms `f` and `g` in the category of cochain complexes,
this is the `homotopyInvHomId` field of the homotopy equivalence
`mappingConeCompHomotopyEquiv f g` between `mappingCone g` and the mapping cone of
the morphism `mappingCone f ‚ü∂ mappingCone (f ‚â´ g)`. -/
noncomputable def homotopyInvHomId : Homotopy (inv f g ‚â´ hom f g) (ùüô _) :=
  (Cochain.equivHomotopy _ _).symm ‚ü®-((snd _).comp ((fst (f ‚â´ g)).1.comp
    ((inl f).comp (inl _) (by omega)) (show 1 + (-2) = -1 by omega)) (zero_add (-1))), by
      rw [Œ¥_neg, Œ¥_zero_cochain_comp _ _ _ (neg_add_cancel 1),
        Int.negOnePow_neg, Int.negOnePow_one, Units.neg_smul, one_smul,
        Œ¥_comp _ _ (show 1 + (-2) = -1 by omega) 2 (-1) 0 (by omega)
          (by omega) (by omega),
        Œ¥_comp _ _ (show (-1) + (-1) = -2 by omega) 0 0 (-1) (by omega)
          (by omega) (by omega), Int.negOnePow_neg, Int.negOnePow_neg,
        Int.negOnePow_even 2 ‚ü®1, by omega‚ü©, Int.negOnePow_one, Units.neg_smul,
        one_smul, one_smul, Œ¥_inl, Œ¥_inl, Œ¥_snd, Cocycle.Œ¥_eq_zero, Cochain.zero_comp, add_zero,
        Cochain.neg_comp, neg_neg]
      ext n
      rw [ext_from_iff _ (n + 1) n rfl, ext_from_iff _ (n + 1) n rfl,
        ext_from_iff _ (n + 2) (n + 1) (by omega)]
      dsimp [hom, inv]
      simp [ext_to_iff _ n (n + 1) rfl, map, Cochain.comp_v _ _
          (add_neg_cancel 1) n (n + 1) n (by omega) (by omega),
        Cochain.comp_v _ _ (show 1 + -2 = -1 by omega) (n + 1) (n + 2) n
          (by omega) (by omega),
        Cochain.comp_v _ _ (show (-1) + -1 = -2 by omega) (n + 2) (n + 1) n
          (by omega) (by omega)]‚ü©

end MappingConeCompHomotopyEquiv

/-- Given two composable morphisms `f` and `g` in the category of cochain complexes,
this is the homotopy equivalence `mappingConeCompHomotopyEquiv f g`
between `mappingCone g` and the mapping cone of
the morphism `mappingCone f ‚ü∂ mappingCone (f ‚â´ g)`. -/
noncomputable def mappingConeCompHomotopyEquiv : HomotopyEquiv (mappingCone g)
    (mappingCone (mappingConeCompTriangle f g).mor‚ÇÅ) where
  hom := MappingConeCompHomotopyEquiv.hom f g
  inv := MappingConeCompHomotopyEquiv.inv f g
  homotopyHomInvId := Homotopy.ofEq (by simp)
  homotopyInvHomId := MappingConeCompHomotopyEquiv.homotopyInvHomId f g

@[reassoc (attr := simp)]
lemma mappingConeCompHomotopyEquiv_hom_inv_id :
    (mappingConeCompHomotopyEquiv f g).hom ‚â´
      (mappingConeCompHomotopyEquiv f g).inv = ùüô _ := by
  simp [mappingConeCompHomotopyEquiv]

@[reassoc]
lemma mappingConeCompHomotopyEquiv_comm‚ÇÅ :
    inr (map f (f ‚â´ g) (ùüô X‚ÇÅ) g (by rw [id_comp])) ‚â´
      (mappingConeCompHomotopyEquiv f g).inv = (mappingConeCompTriangle f g).mor‚ÇÇ := by
  simp [map, mappingConeCompHomotopyEquiv, MappingConeCompHomotopyEquiv.inv]

@[reassoc]
lemma mappingConeCompHomotopyEquiv_comm‚ÇÇ :
    (mappingConeCompHomotopyEquiv f g).hom ‚â´
      (triangle (mappingConeCompTriangle f g).mor‚ÇÅ).mor‚ÇÉ =
      (mappingConeCompTriangle f g).mor‚ÇÉ := by
  ext n
  simp [map, mappingConeCompHomotopyEquiv, MappingConeCompHomotopyEquiv.hom,
    lift_f _ _ _ _ _ (n+1) rfl, ext_from_iff _ (n+1) _ rfl]

@[reassoc (attr := simp)]
lemma mappingConeCompTriangleh_comm‚ÇÅ :
    (mappingConeCompTriangleh f g).mor‚ÇÇ ‚â´
      (HomotopyCategory.quotient _ _).map (mappingConeCompHomotopyEquiv f g).hom =
    (HomotopyCategory.quotient _ _).map (mappingCone.inr _) := by
  rw [‚Üê cancel_mono (HomotopyCategory.isoOfHomotopyEquiv
      (mappingConeCompHomotopyEquiv f g)).inv, assoc]
  dsimp [mappingConeCompTriangleh]
  rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp,
    mappingConeCompHomotopyEquiv_hom_inv_id, comp_id,
    mappingConeCompHomotopyEquiv_comm‚ÇÅ f g,
    mappingConeCompTriangle_mor‚ÇÇ]

end CochainComplex

namespace HomotopyCategory

open CochainComplex

variable [HasZeroObject C]

lemma mappingConeCompTriangleh_distinguished :
    (mappingConeCompTriangleh f g) ‚àà
      distTriang (HomotopyCategory C (ComplexShape.up ‚Ñ§)) := by
  refine ‚ü®_, _, (mappingConeCompTriangle f g).mor‚ÇÅ, ‚ü®?_‚ü©‚ü©
  refine Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (isoOfHomotopyEquiv
    (mappingConeCompHomotopyEquiv f g)) (by aesop_cat) (by simp) ?_
  dsimp [mappingConeCompTriangleh]
  rw [CategoryTheory.Functor.map_id, comp_id, ‚Üê Functor.map_comp_assoc]
  congr 2
  exact (mappingConeCompHomotopyEquiv_comm‚ÇÇ f g).symm

noncomputable instance : IsTriangulated (HomotopyCategory C (ComplexShape.up ‚Ñ§)) :=
  IsTriangulated.mk' (by
    rintro ‚ü®X‚ÇÅ : CochainComplex C ‚Ñ§‚ü© ‚ü®X‚ÇÇ : CochainComplex C ‚Ñ§‚ü© ‚ü®X‚ÇÉ : CochainComplex C ‚Ñ§‚ü© u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ'
    obtain ‚ü®u‚ÇÅ‚ÇÇ, rfl‚ü© := (HomotopyCategory.quotient C (ComplexShape.up ‚Ñ§)).map_surjective u‚ÇÅ‚ÇÇ'
    obtain ‚ü®u‚ÇÇ‚ÇÉ, rfl‚ü© := (HomotopyCategory.quotient C (ComplexShape.up ‚Ñ§)).map_surjective u‚ÇÇ‚ÇÉ'
    refine ‚ü®_, _, _, _, _, _, _, _, Iso.refl _, Iso.refl _, Iso.refl _, by simp, by simp,
        _, _, mappingCone_triangleh_distinguished u‚ÇÅ‚ÇÇ,
        _, _, mappingCone_triangleh_distinguished u‚ÇÇ‚ÇÉ,
        _, _, mappingCone_triangleh_distinguished (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ), ‚ü®?_‚ü©‚ü©
    let Œ± := mappingCone.triangleMap u‚ÇÅ‚ÇÇ (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) (ùüô X‚ÇÅ) u‚ÇÇ‚ÇÉ (by rw [id_comp])
    let Œ≤ := mappingCone.triangleMap (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) u‚ÇÇ‚ÇÉ u‚ÇÅ‚ÇÇ (ùüô X‚ÇÉ) (by rw [comp_id])
    refine Triangulated.Octahedron.mk ((HomotopyCategory.quotient _ _).map Œ±.hom‚ÇÉ)
      ((HomotopyCategory.quotient _ _).map Œ≤.hom‚ÇÉ) ?_ ?_ ?_ ?_ ?_
    ¬∑ exact ((quotient _ _).mapTriangle.map Œ±).comm‚ÇÇ
    ¬∑ exact ((quotient _ _).mapTriangle.map Œ±).comm‚ÇÉ.symm.trans (by dsimp [Œ±]; simp)
    ¬∑ exact ((quotient _ _).mapTriangle.map Œ≤).comm‚ÇÇ.trans (by dsimp [Œ≤]; simp)
    ¬∑ exact ((quotient _ _).mapTriangle.map Œ≤).comm‚ÇÉ
    ¬∑ refine isomorphic_distinguished _ (mappingConeCompTriangleh_distinguished u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ) _ ?_
      exact Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _)
        (by dsimp [Œ±, mappingConeCompTriangleh]; simp)
        (by dsimp [Œ≤, mappingConeCompTriangleh]; simp)
        (by dsimp [mappingConeCompTriangleh]; simp))

end HomotopyCategory
