import Mathlib.Algebra.Category.Ring.Under.Basic
import Mathlib.Algebra.MvPolynomial.Basic
import Mathlib.RingTheory.TensorProduct.MvPolynomial
import Mathlib.Algebra.MvPolynomial.CommRing
import Mathlib.Algebra.Category.Ring.Adjunctions

open TensorProduct CategoryTheory
universe u
variable {R S : CommRingCat.{u}}
variable [Algebra R S]

namespace CommRingCat

variable (R S) in
/-- The forgetful base change functor. -/
@[simps! map_right]
def forgetRelative : Under S ‚•§ Under R := Under.map <| ofHom Algebra.algebraMap

/-- The adjunction between `tensorProd R S` and `forgetRelative R S`. -/
@[simps! unit_app counit_app]
noncomputable def adjTensorForget : tensorProd R S ‚ä£ forgetRelative R S :=
  (Under.mapPushoutAdj (ofHom <| algebraMap R S)).ofNatIsoLeft ((R.tensorProdIsoPushout S).symm)

variable (R) in
/-- The free functor given by polynomials. -/
@[simps! map_right]
noncomputable def freeAbs : Type u ‚•§ Under R where
  obj œÉ := R.mkUnder <| MvPolynomial œÉ R
  map f := (MvPolynomial.rename f).toUnder
  map_id œÉ := congr_arg (fun x => x.toUnder) <| MvPolynomial.rename_id (œÉ := œÉ) (R := R)
  map_comp f g := congr_arg (fun x => x.toUnder) (MvPolynomial.rename_comp_rename (R := R) f g).symm

@[simp]
lemma freeAbs_obj (œÉ : Type u) : algebra ((freeAbs R).obj œÉ) = MvPolynomial.algebra :=
  mkUnder_eq <| MvPolynomial œÉ R

@[simp]
lemma freeAbs_map {œÉ œÑ : Type u} (f : œÉ ‚ü∂ œÑ) :
    toAlgHom ((freeAbs R).map f) =
    (cast <| congr_arg‚ÇÇ
    (fun instA instB => @AlgHom R (MvPolynomial œÉ R) (MvPolynomial œÑ R) _ _ _ instA instB)
    (mkUnder_eq (MvPolynomial œÉ R)).symm
    (mkUnder_eq (MvPolynomial œÑ R)).symm) (MvPolynomial.rename f)
  := AlgHom.toUnder_eq (MvPolynomial.rename f)

def forget : Under R ‚•§ Type u := Under.forget R ‚ãô HasForget.forget

lemma tensorProd_freeAbs_tauto : freeAbs R ‚ãô R.tensorProd S = {
    obj œÉ := S.mkUnder <| S ‚äó[R] (MvPolynomial œÉ R)
    map f := (Algebra.TensorProduct.map (AlgHom.id S S) (MvPolynomial.rename f)).toUnder
    map_id œÉ := by
      simp only
      have : MvPolynomial.rename (ùüô œÉ) = AlgHom.id R (MvPolynomial œÉ R) :=
        MvPolynomial.rename_id (R := R) (œÉ := œÉ)
      rw [this, Algebra.TensorProduct.map_id]
      rfl
    map_comp f g := by
      simp only
      have : MvPolynomial.rename (R := R) (f ‚â´ g) =
        (MvPolynomial.rename g).comp (MvPolynomial.rename f) :=
        (MvPolynomial.rename_comp_rename f g).symm
      rw [this, Algebra.TensorProduct.map_id_comp, AlgHom.toUnder_comp]
    } := by
  apply CategoryTheory.Functor.ext
  ¬∑ intro œÉ œÑ f
    unfold freeAbs tensorProd
    dsimp
    rw [AlgHom.toUnder_eq]
    -- find out the path induction
    have (ninstœÉ : Algebra R (MvPolynomial œÉ R)) (ninstœÑ : Algebra R (MvPolynomial œÑ R))
        (eqœÉ : ninstœÉ = MvPolynomial.algebra) (eqœÑ : ninstœÑ = MvPolynomial.algebra) :
        (@Algebra.TensorProduct.map _ _ _ _ _ _ _ _ _ _ _ _ _ _
        (ninstœÉ) _ _ _ _ _ (ninstœÑ) (AlgHom.id S S)
        ((cast <| congr_arg‚ÇÇ (fun instœÉ instœÑ => @AlgHom R (MvPolynomial œÉ R)
            (MvPolynomial œÑ R) _ _ _ instœÉ instœÑ)
        eqœÉ.symm eqœÑ.symm) (MvPolynomial.rename f))).toUnder =
        eqToHom (congr_arg
          (fun inst => S.mkUnder <| @TensorProduct R _ S (MvPolynomial œÉ R) _ _ _
          (@Algebra.toModule _ _ _ _ inst)) <| eqœÉ) ‚â´
        (@Algebra.TensorProduct.map _ _ _ _ _ _ _ _ _ _ _ _ _ _ MvPolynomial.algebra _ _ _ _ _
          MvPolynomial.algebra (AlgHom.id S S) (MvPolynomial.rename f)).toUnder ‚â´
        eqToHom (congr_arg
          (fun inst => S.mkUnder <| @TensorProduct R _ S (MvPolynomial œÑ R) _ _ _
          (@Algebra.toModule _ _ _ _ inst)) <| eqœÑ).symm := by
      subst eqœÉ eqœÑ
      rfl
    exact this (algebra (R.mkUnder (MvPolynomial œÉ R))) (algebra (R.mkUnder (MvPolynomial œÑ R)))
      (mkUnder_eq (MvPolynomial œÉ R)) (mkUnder_eq (MvPolynomial œÑ R))


noncomputable def tensorProd_freeAbs : freeAbs R ‚ãô R.tensorProd S ‚âÖ freeAbs S := by
  -- To get rid of algebra_eq
  rw [tensorProd_freeAbs_tauto]
  exact (NatIso.ofComponents
    (fun œÉ => (MvPolynomial.algebraTensorAlgEquiv (œÉ := œÉ) R S).symm.toUnder)
    (fun {œÉ œÑ} f => by
      show (MvPolynomial.rename f).toUnder ‚â´
          (MvPolynomial.algebraTensorAlgEquiv R S).symm.toAlgHom.toUnder
          = (MvPolynomial.algebraTensorAlgEquiv R S).symm.toAlgHom.toUnder ‚â´
          (Algebra.TensorProduct.map (AlgHom.id S S) (MvPolynomial.rename f)).toUnder
      suffices (MvPolynomial.algebraTensorAlgEquiv R S).symm.toAlgHom.comp (MvPolynomial.rename f)
          = (Algebra.TensorProduct.map (AlgHom.id S S) (MvPolynomial.rename f)).comp
            (MvPolynomial.algebraTensorAlgEquiv R S).symm.toAlgHom from
        congr_arg (fun f => f.toUnder) this
      suffices (e : œÉ) ‚Üí
          (MvPolynomial.algebraTensorAlgEquiv R S).symm.toAlgHom
          ((MvPolynomial.rename f) (MvPolynomial.X e))
          = (Algebra.TensorProduct.map (AlgHom.id S S) (MvPolynomial.rename f))
          ((MvPolynomial.algebraTensorAlgEquiv R S).symm.toAlgHom (MvPolynomial.X e)) from by
        exact MvPolynomial.algHom_ext this
      unfold MvPolynomial.algebraTensorAlgEquiv
      simp only [AlgEquiv.toAlgHom_eq_coe, MvPolynomial.rename_X, AlgHom.coe_coe,
        AlgEquiv.ofAlgHom_symm_apply, MvPolynomial.aeval_X, Algebra.TensorProduct.map_tmul,
        AlgHom.coe_id, id_eq, implies_true]
    )).symm

-- /-- The freeAbs is given by `R ‚äó[‚Ñ§] ‚Ñ§ [œÉ]`. -/


-- -- The free-forget adjunction given by polynomials.
-- #check MvPolynomial.rTensor
-- #check MvPolynomial.algebraTensorAlgEquiv
-- def foo {œÉ : Type u} : S ‚äó[R] (MvPolynomial œÉ R) ‚âÉ‚Çê[S] MvPolynomial œÉ S := by
--   exact MvPolynomial.algebraTensorAlgEquiv R S
end CommRingCat
