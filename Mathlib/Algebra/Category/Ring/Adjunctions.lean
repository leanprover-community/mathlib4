/-
Copyright (c) 2019 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison, Johannes H√∂lzl, Andrew Yang
-/
import Mathlib.Algebra.Category.Ring.Colimits
import Mathlib.Algebra.MvPolynomial.CommRing
import Mathlib.CategoryTheory.Comma.Over.Pullback

/-!
# Adjunctions in `CommRingCat`

## Main results
- `CommRingCat.adj`: `œÉ ‚Ü¶ ‚Ñ§[œÉ]` is left adjoint to the forgetful functor `CommRingCat ‚•§ Type`.
- `CommRingCat.coyonedaAdj`: `Fun(-, R)` is left adjoint to `Hom_{CRing}(R, -)`.
- `CommRingCat.monoidAlgebraAdj`: `G ‚Ü¶ R[G]` as `CommGrp ‚•§ R-Alg` is left adjoint to `S ‚Ü¶ SÀ£`.
- `CommRingCat.unitsAdj`: `G ‚Ü¶ ‚Ñ§[G]` is left adjoint to `S ‚Ü¶ SÀ£`.

-/

noncomputable section

universe v u

open MvPolynomial Opposite

open CategoryTheory

namespace CommRingCat

/-- The free functor `Type u ‚•§ CommRingCat` sending a type `X` to the multivariable (commutative)
polynomials with variables `x : X`.
-/
def free : Type u ‚•§ CommRingCat.{u} where
  obj Œ± := of (MvPolynomial Œ± ‚Ñ§)
  map {X Y} f := ofHom (‚Üë(rename f : _ ‚Üí‚Çê[‚Ñ§] _) : MvPolynomial X ‚Ñ§ ‚Üí+* MvPolynomial Y ‚Ñ§)

@[simp]
theorem free_obj_coe {Œ± : Type u} : (free.obj Œ± : Type u) = MvPolynomial Œ± ‚Ñ§ :=
  rfl

-- This is not a `@[simp]` lemma as the left-hand side simplifies via `dsimp`.
theorem free_map_coe {Œ± Œ≤ : Type u} {f : Œ± ‚Üí Œ≤} : ‚áë(free.map f) = ‚áë(rename f) :=
  rfl

/-- The free-forgetful adjunction for commutative rings. -/
def adj : free ‚ä£ forget CommRingCat.{u} :=
  Adjunction.mkOfHomEquiv
    { homEquiv := fun _ _ ‚Ü¶
        { toFun := fun f ‚Ü¶ homEquiv f.hom
          invFun := fun f ‚Ü¶ ofHom <| homEquiv.symm f
          left_inv := fun f ‚Ü¶ congrArg ofHom (homEquiv.left_inv f.hom)
          right_inv := fun f ‚Ü¶ homEquiv.right_inv f }
      homEquiv_naturality_left_symm := fun {_ _ Y} f g =>
        hom_ext <| RingHom.ext fun x ‚Ü¶ eval‚ÇÇ_cast_comp f (Int.castRingHom Y) g x }

instance : (forget CommRingCat.{u}).IsRightAdjoint :=
  ‚ü®_, ‚ü®adj‚ü©‚ü©

/-- `Fun(-, -)` as a functor `Type v·µí·µñ ‚•§ CommRingCat ‚•§ CommRingCat`. -/
@[simps]
def coyoneda : Type v·µí·µñ ‚•§ CommRingCat.{u} ‚•§ CommRingCat.{max u v} where
  obj n :=
  { obj R := CommRingCat.of ((unop n) ‚Üí R)
    map {R S} œÜ := CommRingCat.ofHom (Pi.ringHom (œÜ.hom.comp <| Pi.evalRingHom _ ¬∑)) }
  map {m n} f :=
  { app R := CommRingCat.ofHom (Pi.ringHom (Pi.evalRingHom _ <| f.unop ¬∑)) }

/-- The adjunction `Hom_{CRing}(Fun(n, R), S) ‚âÉ Fun(n, Hom_{CRing}(R, S))`. -/
def coyonedaAdj (R : CommRingCat.{u}) :
    (coyoneda.flip.obj R).rightOp ‚ä£ yoneda.obj R where
  unit := { app n i := CommRingCat.ofHom (Pi.evalRingHom _ i) }
  counit := { app S := (CommRingCat.ofHom (Pi.ringHom fun f ‚Ü¶ f.hom)).op }

instance (R : CommRingCat.{u}) : (yoneda.obj R).IsRightAdjoint := ‚ü®_, ‚ü®coyonedaAdj R‚ü©‚ü©

/-- If `n` is a singleton, `Hom(n, -)` is the identity in `CommRingCat`. -/
@[simps!]
def coyonedaUnique {n : Type v} [Unique n] : coyoneda.obj (op n) ‚âÖ ùü≠ CommRingCat.{max u v} :=
  NatIso.ofComponents (fun X ‚Ü¶ (RingEquiv.piUnique _).toCommRingCatIso) (fun f ‚Ü¶ by ext; simp)

/-- The monoid algebra functor `CommGrp ‚•§ R-Alg` given by `G ‚Ü¶ R[G]`. -/
@[simps]
def monoidAlgebra (R : CommRingCat.{max u v}) : CommMonCat.{v} ‚•§ Under R where
  obj G := Under.mk (CommRingCat.ofHom (MonoidAlgebra.singleOneRingHom (k := R) (G := G)))
  map f := Under.homMk (CommRingCat.ofHom <| MonoidAlgebra.mapDomainRingHom R f.hom)
  map_comp f g := by ext : 2; apply MonoidAlgebra.ringHom_ext <;> intro <;> simp

@[simps]
instance : HasForget‚ÇÇ CommRingCat CommMonCat where
  forget‚ÇÇ := { obj M := .of M, map f := CommMonCat.ofHom f.hom }
  forget_comp := rfl

#adaptation_note /-- nightly-2025-03-25
`simp` is taking longer after nightly-2025-03-25. -/
set_option maxHeartbeats 400000 in
/-- The adjunction `G ‚Ü¶ R[G]` and `S ‚Ü¶ S` between `CommGrp` and `R-Alg`. -/
def monoidAlgebraAdj (R : CommRingCat.{u}) :
    monoidAlgebra R ‚ä£ Under.forget R ‚ãô forget‚ÇÇ _ _ where
  unit := { app G := CommMonCat.ofHom (MonoidAlgebra.of R G) }
  counit :=
  { app S := Under.homMk (CommRingCat.ofHom (MonoidAlgebra.liftNCRingHom S.hom.hom
      (.id _) fun _ _ ‚Ü¶ .all _ _)) (by ext; simp [MonoidAlgebra.liftNCRingHom]),
    naturality S T f := by
      ext : 2
      apply MonoidAlgebra.ringHom_ext <;>
        intro <;> simp [MonoidAlgebra.liftNCRingHom, ‚Üê Under.w f, - Under.w] }
  left_triangle_components G := by
    ext : 2
    apply MonoidAlgebra.ringHom_ext <;> intro <;> simp [MonoidAlgebra.liftNCRingHom]
  right_triangle_components S := by dsimp; ext; simp [MonoidAlgebra.liftNCRingHom]

/-- The adjunction `G ‚Ü¶ ‚Ñ§[G]` and `R ‚Ü¶ RÀ£` between `CommGrp` and `CommRing`. -/
def forget‚ÇÇAdj {R : CommRingCat.{u}} (hR : Limits.IsInitial R) :
    monoidAlgebra R ‚ãô Under.forget R ‚ä£ forget‚ÇÇ _ _ :=
  (monoidAlgebraAdj R).comp (Under.equivalenceOfIsInitial hR).toAdjunction

instance (R : CommRingCat) : (monoidAlgebra.{u, u} R).IsLeftAdjoint :=
  ‚ü®_, ‚ü®CommRingCat.monoidAlgebraAdj R‚ü©‚ü©

instance : (forget‚ÇÇ CommRingCat CommMonCat).IsRightAdjoint :=
  ‚ü®_, ‚ü®CommRingCat.forget‚ÇÇAdj Limits.initialIsInitial‚ü©‚ü©

end CommRingCat
