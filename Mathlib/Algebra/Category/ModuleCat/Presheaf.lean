/-
Copyright (c) 2023 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison, Jo√´l Riou
-/
import Mathlib.Algebra.Category.ModuleCat.ChangeOfRings
import Mathlib.Algebra.Category.Ring.Basic

/-!
# Presheaves of modules over a presheaf of rings.

Given a presheaf of rings `R : C·µí·µñ ‚•§ RingCat`, we define the category `PresheafOfModules R`.
An object `M : PresheafOfModules R` consists of a family of modules
`M.obj X : ModuleCat (R.obj X)` for all `X : C·µí·µñ`, together with the data, for all `f : X ‚ü∂ Y`,
of a functorial linear map `M.map f` from `M.obj X` to the restriction
of scalars of `M.obj Y` via `R.map f`.


## Future work

* Compare this to the definition as a presheaf of pairs `(R, M)` with specified first part.
* Compare this to the definition as a module object of the presheaf of rings
  thought of as a monoid object.
* Presheaves of modules over a presheaf of commutative rings form a monoidal category.
* Pushforward and pullback.
-/

universe v v‚ÇÅ u‚ÇÅ u

open CategoryTheory LinearMap Opposite

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {R : C·µí·µñ ‚•§ RingCat.{u}}

variable (R) in
/-- A presheaf of modules over `R : C·µí·µñ ‚•§ RingCat` consists of family of
objects `obj X : ModuleCat (R.obj X)` for all `X : C·µí·µñ` together with
functorial maps `obj X ‚ü∂ (ModuleCat.restrictScalars (R.map f)).obj (obj Y)`
for all `f : X ‚ü∂ Y` in `C·µí·µñ`. -/
structure PresheafOfModules where
  /-- a family of modules over `R.obj X` for all `X` -/
  obj (X : C·µí·µñ) : ModuleCat.{v} (R.obj X)
  /-- the restriction maps of a presheaf of modules -/
  map {X Y : C·µí·µñ} (f : X ‚ü∂ Y) : obj X ‚ü∂ (ModuleCat.restrictScalars (R.map f).hom).obj (obj Y)
  map_id (X : C·µí·µñ) :
    map (ùüô X) =
      (ModuleCat.restrictScalarsId' _ (congrArg RingCat.Hom.hom (R.map_id X))).inv.app _ := by
        aesop_cat
  map_comp {X Y Z : C·µí·µñ} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    map (f ‚â´ g) = map f ‚â´ (ModuleCat.restrictScalars _).map (map g) ‚â´
      (ModuleCat.restrictScalarsComp' _ _ _
        (congrArg RingCat.Hom.hom <| R.map_comp f g)).inv.app _ := by aesop_cat

namespace PresheafOfModules

attribute [simp] map_id map_comp
attribute [reassoc] map_comp

variable (M M‚ÇÅ M‚ÇÇ : PresheafOfModules.{v} R)

lemma map_smul {X Y : C·µí·µñ} (f : X ‚ü∂ Y) (r : R.obj X) (m : M.obj X) :
    M.map f (r ‚Ä¢ m) = R.map f r ‚Ä¢ M.map f m := by simp

lemma congr_map_apply {X Y : C·µí·µñ} {f g : X ‚ü∂ Y} (h : f = g) (m : M.obj X) :
    M.map f m = M.map g m := by rw [h]

/-- A morphism of presheaves of modules consists of a family of linear maps which
satisfy the naturality condition. -/
@[ext]
structure Hom where
  /-- a family of linear maps `M‚ÇÅ.obj X ‚ü∂ M‚ÇÇ.obj X` for all `X`. -/
  app (X : C·µí·µñ) : M‚ÇÅ.obj X ‚ü∂ M‚ÇÇ.obj X
  naturality {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
      M‚ÇÅ.map f ‚â´ (ModuleCat.restrictScalars (R.map f).hom).map (app Y) =
        app X ‚â´ M‚ÇÇ.map f := by aesop_cat

attribute [reassoc (attr := simp)] Hom.naturality

instance : Category (PresheafOfModules.{v} R) where
  Hom := Hom
  id _ := { app := fun _ ‚Ü¶ ùüô _ }
  comp f g := { app := fun _ ‚Ü¶ f.app _ ‚â´ g.app _ }

variable {M‚ÇÅ M‚ÇÇ}

@[ext]
lemma hom_ext {f g : M‚ÇÅ ‚ü∂ M‚ÇÇ} (h : ‚àÄ (X : C·µí·µñ), f.app X = g.app X) :
    f = g := Hom.ext (by ext1; apply h)

@[simp]
lemma id_app (M : PresheafOfModules R) (X : C·µí·µñ) : Hom.app (ùüô M) X = ùüô _ := by
  rfl

@[simp]
lemma comp_app {M‚ÇÅ M‚ÇÇ M‚ÇÉ : PresheafOfModules R} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (g : M‚ÇÇ ‚ü∂ M‚ÇÉ) (X : C·µí·µñ) :
    (f ‚â´ g).app X = f.app X ‚â´ g.app X := by
  rfl

lemma naturality_apply (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) {X Y : C·µí·µñ} (g : X ‚ü∂ Y) (x : M‚ÇÅ.obj X) :
    Hom.app f Y (M‚ÇÅ.map g x) = M‚ÇÇ.map g (Hom.app f X x) :=
  congr_fun ((forget _).congr_map (Hom.naturality f g)) x

/-- Constructor for isomorphisms in the category of presheaves of modules. -/
@[simps!]
def isoMk (app : ‚àÄ (X : C·µí·µñ), M‚ÇÅ.obj X ‚âÖ M‚ÇÇ.obj X)
    (naturality : ‚àÄ ‚¶ÉX Y : C·µí·µñ‚¶Ñ (f : X ‚ü∂ Y),
      M‚ÇÅ.map f ‚â´ (ModuleCat.restrictScalars (R.map f).hom).map (app Y).hom =
        (app X).hom ‚â´ M‚ÇÇ.map f := by aesop_cat) : M‚ÇÅ ‚âÖ M‚ÇÇ where
  hom := { app := fun X ‚Ü¶ (app X).hom }
  inv :=
    { app := fun X ‚Ü¶ (app X).inv
      naturality := fun {X Y} f ‚Ü¶ by
        rw [‚Üê cancel_epi (app X).hom, ‚Üê reassoc_of% (naturality f), Iso.map_hom_inv_id,
          Category.comp_id, Iso.hom_inv_id_assoc]}

/-- The underlying presheaf of abelian groups of a presheaf of modules. -/
def presheaf : C·µí·µñ ‚•§ Ab where
  obj X := (forget‚ÇÇ _ _).obj (M.obj X)
  map f := AddMonoidHom.mk' (M.map f) (by simp)

@[simp]
lemma presheaf_obj_coe (X : C·µí·µñ) :
    (M.presheaf.obj X : Type _) = M.obj X := rfl

@[simp]
lemma presheaf_map_apply_coe {X Y : C·µí·µñ} (f : X ‚ü∂ Y) (x : M.obj X) :
    DFunLike.coe (Œ± := M.obj X) (Œ≤ := fun _ ‚Ü¶ M.obj Y) (M.presheaf.map f) x = M.map f x := rfl

instance (M : PresheafOfModules R) (X : C·µí·µñ) :
    Module (R.obj X) (M.presheaf.obj X) :=
  inferInstanceAs (Module (R.obj X) (M.obj X))

variable (R) in
/-- The forgetful functor `PresheafOfModules R ‚•§ C·µí·µñ ‚•§ Ab`. -/
def toPresheaf : PresheafOfModules.{v} R ‚•§ C·µí·µñ ‚•§ Ab where
  obj M := M.presheaf
  map f :=
    { app := fun X ‚Ü¶ AddMonoidHom.mk' (Hom.app f X) (by simp)
      naturality := fun X Y g ‚Ü¶ by ext x; exact naturality_apply f g x }

@[simp]
lemma toPresheaf_obj_coe (X : C·µí·µñ) :
    (((toPresheaf R).obj M).obj X : Type _) = M.obj X := rfl

@[simp]
lemma toPresheaf_map_app_apply (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (X : C·µí·µñ) (x : M‚ÇÅ.obj X) :
    DFunLike.coe (Œ± := M‚ÇÅ.obj X) (Œ≤ := fun _ ‚Ü¶ M‚ÇÇ.obj X)
      (((toPresheaf R).map f).app X) x = f.app X x := rfl

instance : (toPresheaf R).Faithful where
  map_injective {_ _ f g} h := by
    ext X x
    exact congr_fun (((evaluation _ _).obj X ‚ãô forget _).congr_map h) x

section

variable (M : C·µí·µñ ‚•§ Ab.{v}) [‚àÄ X, Module (R.obj X) (M.obj X)]
  (map_smul : ‚àÄ ‚¶ÉX Y : C·µí·µñ‚¶Ñ (f : X ‚ü∂ Y) (r : R.obj X) (m : M.obj X),
    M.map f (r ‚Ä¢ m) = R.map f r ‚Ä¢ M.map f m)

/-- The object in `PresheafOfModules R` that is obtained from `M : C·µí·µñ ‚•§ Ab.{v}` such
that for all `X : C·µí·µñ`, `M.obj X` is a `R.obj X` module, in such a way that the
restriction maps are semilinear. (This constructor should be used only in cases
when the preferred constructor `PresheafOfModules.mk` is not as convenient as this one.) -/
@[simps]
def ofPresheaf : PresheafOfModules.{v} R where
  obj X := ModuleCat.of _ (M.obj X)
  -- TODO: after https://github.com/leanprover-community/mathlib4/pull/19511 we need to hint `(Y := ...)`.
  -- This suggests `restrictScalars` needs to be redesigned.
  map {X Y} f := ModuleCat.ofHom
      (Y := (ModuleCat.restrictScalars (R.map f).hom).obj (ModuleCat.of _ (M.obj Y)))
    { toFun := fun x ‚Ü¶ M.map f x
      map_add' := by simp
      map_smul' := fun r m ‚Ü¶ map_smul f r m }

@[simp]
lemma ofPresheaf_presheaf : (ofPresheaf M map_smul).presheaf = M := rfl

end

/-- The morphism of presheaves of modules `M‚ÇÅ ‚ü∂ M‚ÇÇ` given by a morphism
of abelian presheaves `M‚ÇÅ.presheaf ‚ü∂ M‚ÇÇ.presheaf`
which satisfy a suitable linearity condition. -/
@[simps]
def homMk (œÜ : M‚ÇÅ.presheaf ‚ü∂ M‚ÇÇ.presheaf)
    (hœÜ : ‚àÄ (X : C·µí·µñ) (r : R.obj X) (m : M‚ÇÅ.obj X), œÜ.app X (r ‚Ä¢ m) = r ‚Ä¢ œÜ.app X m) :
    M‚ÇÅ ‚ü∂ M‚ÇÇ where
  app X := ModuleCat.ofHom
    { toFun := œÜ.app X
      map_add' := by simp
      map_smul' := hœÜ X }
  naturality := fun f ‚Ü¶ by
    ext x
    exact congr_fun ((forget _).congr_map (œÜ.naturality f)) x

instance : Zero (M‚ÇÅ ‚ü∂ M‚ÇÇ) where
  zero := { app := fun _ ‚Ü¶ 0 }

variable (M‚ÇÅ M‚ÇÇ) in
@[simp] lemma zero_app (X : C·µí·µñ) : (0 : M‚ÇÅ ‚ü∂ M‚ÇÇ).app X = 0 := rfl

instance : Neg (M‚ÇÅ ‚ü∂ M‚ÇÇ) where
  neg f :=
    { app := fun X ‚Ü¶ -f.app X
      naturality := fun {X Y} h ‚Ü¶ by
        ext x
        simp [‚Üê naturality_apply] }

instance : Add (M‚ÇÅ ‚ü∂ M‚ÇÇ) where
  add f g :=
    { app := fun X ‚Ü¶ f.app X + g.app X
      naturality := fun {X Y} h ‚Ü¶ by
        ext x
        simp [‚Üê naturality_apply] }

instance : Sub (M‚ÇÅ ‚ü∂ M‚ÇÇ) where
  sub f g :=
    { app := fun X ‚Ü¶ f.app X - g.app X
      naturality := fun {X Y} h ‚Ü¶ by
        ext x
        simp [‚Üê naturality_apply] }

@[simp] lemma neg_app (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (X : C·µí·µñ) : (-f).app X = -f.app X := rfl
@[simp] lemma add_app (f g : M‚ÇÅ ‚ü∂ M‚ÇÇ) (X : C·µí·µñ) : (f + g).app X = f.app X + g.app X := rfl
@[simp] lemma sub_app (f g : M‚ÇÅ ‚ü∂ M‚ÇÇ) (X : C·µí·µñ) : (f - g).app X = f.app X - g.app X := rfl

instance : AddCommGroup (M‚ÇÅ ‚ü∂ M‚ÇÇ) where
  add_assoc := by intros; ext1; simp only [add_app, add_assoc]
  zero_add := by intros; ext1; simp only [add_app, zero_app, zero_add]
  neg_add_cancel := by intros; ext1; simp only [add_app, neg_app, neg_add_cancel, zero_app]
  add_zero := by intros; ext1; simp only [add_app, zero_app, add_zero]
  add_comm := by intros; ext1; simp only [add_app]; apply add_comm
  sub_eq_add_neg := by intros; ext1; simp only [add_app, sub_app, neg_app, sub_eq_add_neg]
  nsmul := nsmulRec
  zsmul := zsmulRec

instance : Preadditive (PresheafOfModules R) where

instance : (toPresheaf R).Additive where

lemma zsmul_app (n : ‚Ñ§) (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (X : C·µí·µñ) : (n ‚Ä¢ f).app X = n ‚Ä¢ f.app X := by
  ext x
  change (toPresheaf R ‚ãô (evaluation _ _).obj X).map (n ‚Ä¢ f) x = _
  rw [Functor.map_zsmul]
  rfl

variable (R)

/-- Evaluation on an object `X` gives a functor
`PresheafOfModules R ‚•§ ModuleCat (R.obj X)`. -/
@[simps]
def evaluation (X : C·µí·µñ) : PresheafOfModules.{v} R ‚•§ ModuleCat (R.obj X) where
  obj M := M.obj X
  map f := f.app X

instance (X : C·µí·µñ) : (evaluation.{v} R X).Additive where

/-- The restriction natural transformation on presheaves of modules, considered as linear maps
to restriction of scalars. -/
@[simps]
noncomputable def restriction {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    evaluation R X ‚ü∂ evaluation R Y ‚ãô ModuleCat.restrictScalars (R.map f).hom where
  app M := M.map f

/-- The obvious free presheaf of modules of rank `1`. -/
def unit : PresheafOfModules R where
  obj X := ModuleCat.of _ (R.obj X)
  -- TODO: after https://github.com/leanprover-community/mathlib4/pull/19511 we need to hint `(Y := ...)`.
  -- This suggests `restrictScalars` needs to be redesigned.
  map {X Y} f := ModuleCat.ofHom
      (Y := (ModuleCat.restrictScalars (R.map f).hom).obj (ModuleCat.of (R.obj Y) (R.obj Y)))
    { toFun := fun x ‚Ü¶ R.map f x
      map_add' := by simp
      map_smul' := by aesop_cat }

lemma unit_map_one {X Y : C·µí·µñ} (f : X ‚ü∂ Y) : (unit R).map f (1 : R.obj X) = (1 : R.obj Y) :=
  (R.map f).hom.map_one

variable {R}

/-- The type of sections of a presheaf of modules. -/
def sections (M : PresheafOfModules.{v} R) : Type _ := (M.presheaf ‚ãô forget _).sections

/-- Given a presheaf of modules `M`, `s : M.sections` and `X : C·µí·µñ`, this is the induced
element in `M.obj X`. -/
abbrev sections.eval {M : PresheafOfModules.{v} R} (s : M.sections) (X : C·µí·µñ) : M.obj X := s.1 X

@[simp]
lemma sections_property {M : PresheafOfModules.{v} R} (s : M.sections)
    {X Y : C·µí·µñ} (f : X ‚ü∂ Y) : M.map f (s.1 X) = s.1 Y := s.2 f

/-- Constructor for sections of a presheaf of modules. -/
@[simps]
def sectionsMk {M : PresheafOfModules.{v} R} (s : ‚àÄ X, M.obj X)
    (hs : ‚àÄ ‚¶ÉX Y : C·µí·µñ‚¶Ñ (f : X ‚ü∂ Y), M.map f (s X) = s Y) : M.sections where
  val := s
  property f := hs f

@[ext]
lemma sections_ext {M : PresheafOfModules.{v} R} (s t : M.sections)
    (h : ‚àÄ (X : C·µí·µñ), s.val X = t.val X) : s = t :=
  Subtype.ext (by ext; apply h)

/-- The map `M.sections ‚Üí N.sections` induced by a morphisms `M ‚ü∂ N` of presheaves of modules. -/
@[simps!]
def sectionsMap {M N : PresheafOfModules.{v} R} (f : M ‚ü∂ N) (s : M.sections) : N.sections :=
  N.sectionsMk (fun X ‚Ü¶ f.app X (s.1 _))
    (fun X Y g ‚Ü¶ by rw [‚Üê naturality_apply, sections_property])

@[simp]
lemma sectionsMap_comp {M N P : PresheafOfModules.{v} R} (f : M ‚ü∂ N) (g : N ‚ü∂ P) (s : M.sections) :
    sectionsMap (f ‚â´ g) s = sectionsMap g (sectionsMap f s) := rfl

@[simp]
lemma sectionsMap_id {M : PresheafOfModules.{v} R} (s : M.sections) :
    sectionsMap (ùüô M) s = s := rfl

/-- The bijection `(unit R ‚ü∂ M) ‚âÉ M.sections` for `M : PresheafOfModules R`. -/
@[simps! apply_coe]
def unitHomEquiv (M : PresheafOfModules R) :
    (unit R ‚ü∂ M) ‚âÉ M.sections where
  toFun f := sectionsMk (fun X ‚Ü¶ Hom.app f X (1 : R.obj X))
    (by intros; rw [‚Üê naturality_apply, unit_map_one])
  invFun s :=
    { app := fun X ‚Ü¶ ModuleCat.ofHom
        ((LinearMap.ringLmapEquivSelf (R.obj X) ‚Ñ§ (M.obj X)).symm (s.val X))
      naturality := fun {X Y} f ‚Ü¶ by
        ext
        dsimp
        change R.map f 1 ‚Ä¢ s.eval Y = M.map f (1 ‚Ä¢ s.eval X)
        simp }
  left_inv f := by
    ext X : 2
    exact (LinearMap.ringLmapEquivSelf (R.obj X) ‚Ñ§ (M.obj X)).symm_apply_apply (f.app X).hom
  right_inv s := by
    ext X
    exact (LinearMap.ringLmapEquivSelf (R.obj X) ‚Ñ§ (M.obj X)).apply_symm_apply (s.val X)

section module_over_initial

variable (X : C·µí·µñ) (hX : Limits.IsInitial X)

/-!
## `PresheafOfModules R ‚•§ C·µí·µñ ‚•§ ModuleCat (R.obj X)` when `X` is initial

When `X` is initial, we have `Module (R.obj X) (M.obj c)` for any `c : C·µí·µñ`.

-/

section

variable (M : PresheafOfModules.{v} R)

/-- Auxiliary definition for `forgetToPresheafModuleCatObj`. -/
noncomputable abbrev forgetToPresheafModuleCatObjObj (Y : C·µí·µñ) : ModuleCat (R.obj X) :=
  (ModuleCat.restrictScalars (R.map (hX.to Y)).hom).obj (M.obj Y)

-- This should not be a `simp` lemma because `M.obj Y` is missing the `Module (R.obj X)` instance,
-- so `simp`ing breaks downstream proofs.
lemma forgetToPresheafModuleCatObjObj_coe (Y : C·µí·µñ) :
    (forgetToPresheafModuleCatObjObj X hX M Y : Type _) = M.obj Y := rfl

/-- Auxiliary definition for `forgetToPresheafModuleCatObj`. -/
def forgetToPresheafModuleCatObjMap {Y Z : C·µí·µñ} (f : Y ‚ü∂ Z) :
    forgetToPresheafModuleCatObjObj X hX M Y ‚ü∂
      forgetToPresheafModuleCatObjObj X hX M Z :=
  ModuleCat.ofHom
    (X := forgetToPresheafModuleCatObjObj X hX M Y) (Y := forgetToPresheafModuleCatObjObj X hX M Z)
  { toFun := fun x => M.map f x
    map_add' := by simp
    map_smul' := fun r x => by
      simp only [ModuleCat.restrictScalars.smul_def, AddHom.toFun_eq_coe, AddHom.coe_mk,
        RingHom.id_apply, M.map_smul]
      rw [‚Üê RingCat.comp_apply, ‚Üê R.map_comp]
      congr
      apply hX.hom_ext }

@[simp]
lemma forgetToPresheafModuleCatObjMap_apply {Y Z : C·µí·µñ} (f : Y ‚ü∂ Z) (m : M.obj Y) :
  (forgetToPresheafModuleCatObjMap X hX M f).hom m = M.map f m := rfl

/--
Implementation of the functor `PresheafOfModules R ‚•§ C·µí·µñ ‚•§ ModuleCat (R.obj X)`
when `X` is initial.

The functor is implemented as, on object level `M ‚Ü¶ (c ‚Ü¶ M(c))` where the `R(X)`-module structure
on `M(c)` is given by restriction of scalars along the unique morphism `R(c) ‚ü∂ R(X)`; and on
morphism level `(f : M ‚ü∂ N) ‚Ü¶ (c ‚Ü¶ f(c))`.
-/
@[simps]
noncomputable def forgetToPresheafModuleCatObj
    (X : C·µí·µñ) (hX : Limits.IsInitial X) (M : PresheafOfModules.{v} R) :
    C·µí·µñ ‚•§ ModuleCat (R.obj X) where
  obj Y := forgetToPresheafModuleCatObjObj X hX M Y
  map f := forgetToPresheafModuleCatObjMap X hX M f

end

/--
Implementation of the functor `PresheafOfModules R ‚•§ C·µí·µñ ‚•§ ModuleCat (R.obj X)`
when `X` is initial.

The functor is implemented as, on object level `M ‚Ü¶ (c ‚Ü¶ M(c))` where the `R(X)`-module structure
on `M(c)` is given by restriction of scalars along the unique morphism `R(c) ‚ü∂ R(X)`; and on
morphism level `(f : M ‚ü∂ N) ‚Ü¶ (c ‚Ü¶ f(c))`.
-/
noncomputable def forgetToPresheafModuleCatMap
    (X : C·µí·µñ) (hX : Limits.IsInitial X) {M N : PresheafOfModules.{v} R} (f : M ‚ü∂ N) :
    forgetToPresheafModuleCatObj X hX M ‚ü∂ forgetToPresheafModuleCatObj X hX N where
  app Y := ModuleCat.ofHom
      (X := (forgetToPresheafModuleCatObj X hX M).obj Y)
      (Y := (forgetToPresheafModuleCatObj X hX N).obj Y)
    { toFun := f.app Y
      map_add' := by simp
      map_smul' := fun r ‚Ü¶ (f.app Y).hom.map_smul (R.1.map (hX.to Y) _) }
  naturality Y Z g := by
    ext x
    exact naturality_apply f g x

/--
The forgetful functor from presheaves of modules over a presheaf of rings `R` to presheaves of
`R(X)`-modules where `X` is an initial object.

The functor is implemented as, on object level `M ‚Ü¶ (c ‚Ü¶ M(c))` where the `R(X)`-module structure
on `M(c)` is given by restriction of scalars along the unique morphism `R(c) ‚ü∂ R(X)`; and on
morphism level `(f : M ‚ü∂ N) ‚Ü¶ (c ‚Ü¶ f(c))`.
-/
@[simps]
noncomputable def forgetToPresheafModuleCat (X : C·µí·µñ) (hX : Limits.IsInitial X) :
    PresheafOfModules.{v} R ‚•§ C·µí·µñ ‚•§ ModuleCat (R.obj X) where
  obj M := forgetToPresheafModuleCatObj X hX M
  map f := forgetToPresheafModuleCatMap X hX f

end module_over_initial

end PresheafOfModules
