/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.LinearAlgebra.ExteriorPower.Basic
import Mathlib.Algebra.Category.ModuleCat.Basic

/-!
# The exterior powers as functors on the category of modules

In this file, given `M : ModuleCat R` and `n : ‚Ñï`, we define `M.exteriorPower n : ModuleCat R`,
and this extends to a functor `ModuleCat.exteriorPower.functor : ModuleCat R ‚•§ ModuleCat R`.

-/

universe v u

open CategoryTheory

namespace ModuleCat

variable {R : Type u} [CommRing R]

/-- The exterior power of an object in `ModuleCat R`. -/
def exteriorPower (M : ModuleCat.{v} R) (n : ‚Ñï) : ModuleCat.{max u v} R :=
  ModuleCat.of R (‚ãÄ[R]^n M)

-- this could be an abbrev, but using a def eases automation
/-- The type of `n`-alternating maps on `M : ModuleCat R` to `N : ModuleCat R`. -/
def AlternatingMap (M : ModuleCat.{v} R) (N : ModuleCat.{max u v} R) (n : ‚Ñï) :=
  _root_.AlternatingMap R M N (Fin n)

instance (M : ModuleCat.{v} R) (N : ModuleCat.{max u v} R) (n : ‚Ñï) :
    FunLike (M.AlternatingMap N n) (Fin n ‚Üí M) N :=
  inferInstanceAs (FunLike (M [‚ãÄ^(Fin n)]‚Üí‚Çó[R] N) (Fin n ‚Üí M) N)

namespace AlternatingMap

variable {M : ModuleCat.{v} R} {N : ModuleCat.{max u v} R} {n : ‚Ñï}

@[ext]
lemma ext {œÜ œÜ' : M.AlternatingMap N n} (h : ‚àÄ (x : Fin n ‚Üí M), œÜ x = œÜ' x ) :
    œÜ = œÜ' :=
  _root_.AlternatingMap.ext h

variable (œÜ : M.AlternatingMap N n) {N' : ModuleCat.{max u v} R} (g : N ‚ü∂ N')

/-- The postcomposition of an alternating map by a linear map. -/
def postcomp : M.AlternatingMap N' n :=
  g.hom.compAlternatingMap œÜ

@[simp]
lemma postcomp_apply (x : Fin n ‚Üí M) :
    œÜ.postcomp g x = g (œÜ x) := rfl

end AlternatingMap

namespace exteriorPower

/-- Constructor for elements in `M.exteriorPower n` when `M` is an object of `ModuleCat R`
and `n : ‚Ñï`. -/
def mk {M : ModuleCat.{v} R} {n : ‚Ñï} :
    M.AlternatingMap (M.exteriorPower n) n :=
  exteriorPower.ŒπMulti _ _

@[ext]
lemma hom_ext {M : ModuleCat.{v} R} {N : ModuleCat.{max u v} R} {n : ‚Ñï}
    {f g : M.exteriorPower n ‚ü∂ N}
    (h : mk.postcomp f = mk.postcomp g) : f = g := by
  ext : 1
  exact exteriorPower.linearMap_ext h

/-- The morphism `M.exteriorPower n ‚ü∂ N` induced by an alternating map. -/
noncomputable def desc {M : ModuleCat.{v} R} {n : ‚Ñï} {N : ModuleCat.{max u v} R}
    (œÜ : M.AlternatingMap N n) : M.exteriorPower n ‚ü∂ N :=
  ofHom (exteriorPower.alternatingMapLinearEquiv œÜ)

@[simp]
lemma desc_mk {M : ModuleCat.{v} R} {n : ‚Ñï} {N : ModuleCat.{max u v} R}
    (œÜ : M.AlternatingMap N n) (x : Fin n ‚Üí M) :
    desc œÜ (mk x) = œÜ x := by
  apply exteriorPower.alternatingMapLinearEquiv_apply_ŒπMulti

/-- The morphism `M.exteriorPower n ‚ü∂ N.exteriorPower n` induced by a morphism `M ‚ü∂ N`
in `ModuleCat R`. -/
noncomputable def map {M N : ModuleCat.{v} R} (f : M ‚ü∂ N) (n : ‚Ñï) :
    M.exteriorPower n ‚ü∂ N.exteriorPower n :=
  ofHom (_root_.exteriorPower.map n f.hom)

@[simp]
lemma map_mk {M N : ModuleCat.{v} R} (f : M ‚ü∂ N) {n : ‚Ñï} (x : Fin n ‚Üí M) :
    map f n (mk x) = mk (f ‚àò x) := by
  apply exteriorPower.map_apply_ŒπMulti

variable (R) in
/-- The functor `ModuleCat R ‚•§ ModuleCat R` which sends a module to its
`n`th exterior power. -/
@[simps]
noncomputable def functor (n : ‚Ñï) : ModuleCat.{v} R ‚•§ ModuleCat.{max u v} R where
  obj M := M.exteriorPower n
  map f := map f n

/-- The isomorphism `M.exteriorPower 0 ‚âÖ ModuleCat.of R R`. -/
noncomputable def iso‚ÇÄ (M : ModuleCat.{u} R) : M.exteriorPower 0 ‚âÖ ModuleCat.of R R :=
  (exteriorPower.zeroEquiv R M).toModuleIso

@[simp]
lemma iso‚ÇÄ_hom_apply {M : ModuleCat.{u} R} (f : Fin 0 ‚Üí M) :
    (iso‚ÇÄ M).hom (mk f) = 1 :=
  exteriorPower.zeroEquiv_ŒπMulti _

@[reassoc (attr := simp)]
lemma iso‚ÇÄ_hom_naturality {M N : ModuleCat.{u} R} (f : M ‚ü∂ N) :
    map f 0 ‚â´ (iso‚ÇÄ N).hom = (iso‚ÇÄ M).hom :=
  ModuleCat.hom_ext (exteriorPower.zeroEquiv_naturality f.hom)

/-- The isomorphism `M.exteriorPower 0 ‚âÖ M`. -/
noncomputable def iso‚ÇÅ (M : ModuleCat.{u} R) : M.exteriorPower 1 ‚âÖ M :=
  (exteriorPower.oneEquiv R M).toModuleIso

@[simp]
lemma iso‚ÇÅ_hom_apply {M : ModuleCat.{u} R} (f : Fin 1 ‚Üí M) :
    (iso‚ÇÅ M).hom (mk f) = f 0 :=
  exteriorPower.oneEquiv_ŒπMulti _

@[reassoc (attr := simp)]
lemma iso‚ÇÅ_hom_naturality {M N : ModuleCat.{u} R} (f : M ‚ü∂ N) :
    map f 1 ‚â´ (iso‚ÇÅ N).hom = (iso‚ÇÅ M).hom ‚â´ f :=
  ModuleCat.hom_ext (exteriorPower.oneEquiv_naturality f.hom)

variable (R)

/-- The natural isomorphism `M.exteriorPower 0 ‚âÖ ModuleCat.of R R`. -/
noncomputable def natIso‚ÇÄ : functor.{u} R 0 ‚âÖ (Functor.const _).obj (ModuleCat.of R R) :=
  NatIso.ofComponents iso‚ÇÄ

/-- The natural isomorphism `M.exteriorPower 1 ‚âÖ M`. -/
noncomputable def natIso‚ÇÅ : functor.{u} R 1 ‚âÖ ùü≠ _ :=
  NatIso.ofComponents iso‚ÇÅ

end exteriorPower

end ModuleCat
