/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Category.ModuleCat.Differentials.Presheaf
import Mathlib.Algebra.Category.ModuleCat.Sheaf.PushforwardContinuous
import Mathlib.Algebra.Category.ModuleCat.Sheaf.Abelian

/-!
# The sheaf of differentials of a continuous functor between commutatively ringed sites

-/

universe v u v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open CategoryTheory

instance : HasForget‚ÇÇ RingCat.{u} Ab.{u} where
  forget‚ÇÇ :=
    { obj := fun R ‚Ü¶ AddCommGrp.of R
      map := fun f ‚Ü¶ AddMonoidHom.mk' f (by simp) }
  forget_comp := rfl

instance : HasForget‚ÇÇ CommRingCat.{u} Ab.{u} := HasForget‚ÇÇ.trans _ RingCat.{u} _

namespace SheafOfModules

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
  {J : GrothendieckTopology C} {K : GrothendieckTopology D}
  {S : Sheaf J CommRingCat.{u}} {R : Sheaf K CommRingCat.{u}}
  {F : C ‚•§ D}
  [K.HasSheafCompose (forget‚ÇÇ CommRingCat.{u} RingCat.{u})] -- is it automatic?
  [Functor.IsContinuous.{u} F J K]
  (M : SheafOfModules.{u} ((sheafCompose K (forget‚ÇÇ CommRingCat RingCat)).obj R))
  (œÜ : S ‚ü∂ (F.sheafPushforwardContinuous CommRingCat.{u} J K).obj R)

def Derivation : Type _ := M.val.Derivation (F := F) œÜ.val

namespace Derivation

variable {M œÜ}

@[ext]
lemma ext {d d' : M.Derivation œÜ}
    (h : ‚àÄ (X : D·µí·µñ) (x : R.val.obj X), d.d x = d'.d x) : d = d' := by
  dsimp only [Derivation]
  ext
  apply h

def postcomp (d : M.Derivation œÜ) {N} (f : M ‚ü∂ N) : N.Derivation œÜ :=
  PresheafOfModules.Derivation.postcomp d f.val

@[simps val_app]
def abSheafHom (d : M.Derivation œÜ) [K.HasSheafCompose (forget‚ÇÇ CommRingCat.{u} Ab.{u})] :
    (sheafCompose K (forget‚ÇÇ CommRingCat Ab)).obj R ‚ü∂ (toSheaf _).obj M where
  val :=
    { app := fun _ ‚Ü¶ d.d
      naturality := fun _ _ f ‚Ü¶ by ext; apply d.d_map }

lemma abSheafHom_injective
    {d d' : M.Derivation œÜ} [K.HasSheafCompose (forget‚ÇÇ CommRingCat.{u} Ab.{u})]
    (h : d.abSheafHom = d'.abSheafHom) : d = d' := by
  ext X x
  change d.abSheafHom.val.app X x = d'.abSheafHom.val.app X x
  rw [h]

end Derivation

instance : AddCommGroup (M.Derivation œÜ) :=
  inferInstanceAs (AddCommGroup (M.val.Derivation (F := F) œÜ.val))

def derivationFunctor :
    SheafOfModules.{u} ((sheafCompose K (forget‚ÇÇ CommRingCat RingCat)).obj R) ‚•§ Ab :=
  forget _ ‚ãô PresheafOfModules.derivationFunctor.{u} (F := F) œÜ.val

lemma derivationFunctor_obj
    (M : SheafOfModules.{u} ((sheafCompose K (forget‚ÇÇ CommRingCat RingCat)).obj R)) :
    (derivationFunctor œÜ).obj M = AddCommGrp.of (M.Derivation œÜ) := rfl

variable {M} in
@[simp]
lemma derivationFunctor_map (d : M.Derivation œÜ) {N} (f : M ‚ü∂ N) :
    (derivationFunctor œÜ).map f d = d.postcomp f := rfl

namespace Derivation

variable {M œÜ} (d : M.Derivation œÜ)

structure Universal where
  desc {M' : SheafOfModules _} (d' : M'.Derivation œÜ) : M ‚ü∂ M'
  fac {M' : SheafOfModules _} (d' : M'.Derivation œÜ) : d.postcomp (desc d') = d' := by aesop_cat
  postcomp_injective {M' : SheafOfModules _}
    {œÜ œÜ' : M ‚ü∂ M'} (h : d.postcomp œÜ = d.postcomp œÜ') : œÜ = œÜ' := by aesop_cat

end Derivation

class HasDifferentials : Prop where
  exists_universal_derivation : ‚àÉ (M : SheafOfModules _)
    (d : M.Derivation œÜ), Nonempty d.Universal

variable {M œÜ} in
lemma Derivation.Universal.hasDifferentials {d : M.Derivation œÜ} (hd : d.Universal) :
    HasDifferentials œÜ := ‚ü®_, _, ‚ü®hd‚ü©‚ü©

section

variable [HasDifferentials œÜ]

noncomputable def relativeDifferentials :
    SheafOfModules.{u} ((sheafCompose K (forget‚ÇÇ CommRingCat RingCat)).obj R) :=
  (HasDifferentials.exists_universal_derivation (œÜ := œÜ)).choose

noncomputable def universalDerivation : (relativeDifferentials œÜ).Derivation œÜ :=
  (HasDifferentials.exists_universal_derivation (œÜ := œÜ)).choose_spec.choose

noncomputable def universalUniversalDerivation : (universalDerivation œÜ).Universal :=
  (HasDifferentials.exists_universal_derivation (œÜ := œÜ)).choose_spec.choose_spec.some

end

section

variable {M œÜ} (h : (derivationFunctor œÜ ‚ãô CategoryTheory.forget _).CorepresentableBy M)

def ofCorepresentableBy : M.Derivation œÜ := h.homEquiv (ùüô _)

lemma ofCorepresentableBy_postcomp {M' : SheafOfModules _} (f : M ‚ü∂ M') :
    (ofCorepresentableBy h).postcomp f = h.homEquiv f := by
  simpa using (h.homEquiv_comp f (ùüô _)).symm

def universalOfCorepresentableBy : (ofCorepresentableBy h).Universal where
  desc d := h.homEquiv.symm d
  fac {M'} d := by
    rw [ofCorepresentableBy_postcomp]
    apply Equiv.apply_symm_apply
  postcomp_injective H :=
    h.homEquiv.injective (by simpa only [ofCorepresentableBy_postcomp] using H)

end

end SheafOfModules

namespace PresheafOfModules

namespace Derivation

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
  {J : GrothendieckTopology C} {K : GrothendieckTopology D}
  {S : Sheaf J CommRingCat.{u}} {R : Sheaf K CommRingCat.{u}}
  {F : C ‚•§ D}
  [K.HasSheafCompose (forget‚ÇÇ CommRingCat.{u} RingCat.{u})] -- is it automatic?
  [Functor.IsContinuous.{u} F J K]
  {œÜ : S ‚ü∂ (F.sheafPushforwardContinuous CommRingCat.{u} J K).obj R}
  {M‚ÇÄ : PresheafOfModules.{u} (R.val ‚ãô forget‚ÇÇ _ _)}
  (d‚ÇÄ : M‚ÇÄ.Derivation (F := F) œÜ.val)
  [K.WEqualsLocallyBijective AddCommGrp.{u}]
  [HasWeakSheafify K AddCommGrp.{u}]

variable (R) in
noncomputable abbrev sheafificationComm :=
    (PresheafOfModules.sheafification
      (R‚ÇÄ := R.val ‚ãô forget‚ÇÇ _ _)
      (R := ((sheafCompose K (forget‚ÇÇ CommRingCat RingCat)).obj R)) (Œ± := ùüô _))

variable (R) in
noncomputable abbrev sheafificationAdjunctionComm :=
    (PresheafOfModules.sheafificationAdjunction
      (R‚ÇÄ := R.val ‚ãô forget‚ÇÇ _ _)
      (R := ((sheafCompose K (forget‚ÇÇ CommRingCat RingCat)).obj R)) (Œ± := ùüô _))

noncomputable def sheafify : ((sheafificationComm R).obj M‚ÇÄ).Derivation œÜ :=
  d‚ÇÄ.postcomp ((sheafificationAdjunctionComm R).unit.app M‚ÇÄ)

variable {d‚ÇÄ}

noncomputable def Universal.sheafify (hd‚ÇÄ : d‚ÇÄ.Universal) : d‚ÇÄ.sheafify.Universal where
  desc d :=
    ((sheafificationAdjunctionComm R).homEquiv _ _ ).symm (hd‚ÇÄ.desc d)
  fac {M'} d := by
    dsimp [Derivation.sheafify, SheafOfModules.Derivation.postcomp]
    rw [‚Üê postcomp_comp]
    erw [Adjunction.unit_naturality_assoc, Adjunction.right_triangle_components]
    rw [Category.comp_id, hd‚ÇÄ.fac d]
  postcomp_injective {M' f f'} h :=
    ((sheafificationAdjunctionComm R).homEquiv _ _).injective (hd‚ÇÄ.postcomp_injective h)

end Derivation

end PresheafOfModules

namespace SheafOfModules

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
  {J : GrothendieckTopology C} {K : GrothendieckTopology D}
  {S : Sheaf J CommRingCat.{u}} {R : Sheaf K CommRingCat.{u}}
  {F : C ‚•§ D}
  [K.HasSheafCompose (forget‚ÇÇ CommRingCat.{u} RingCat.{u})] -- is it automatic?
  [Functor.IsContinuous.{u} F J K]
  (M : SheafOfModules.{u} ((sheafCompose K (forget‚ÇÇ CommRingCat RingCat)).obj R))
  (œÜ : S ‚ü∂ (F.sheafPushforwardContinuous CommRingCat.{u} J K).obj R)
  [K.WEqualsLocallyBijective AddCommGrp.{u}]
  [HasWeakSheafify K AddCommGrp.{u}]

instance [PresheafOfModules.HasDifferentials (F := F) œÜ.val] :
    SheafOfModules.HasDifferentials œÜ :=
  (PresheafOfModules.universalUniversalDerivation _).sheafify.hasDifferentials

end SheafOfModules
