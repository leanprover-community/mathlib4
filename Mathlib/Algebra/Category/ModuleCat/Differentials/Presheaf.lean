/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.RingTheory.Kaehler.Basic

/-!
# The presheaf of differentials of a presheaf of modules

-/


universe v v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ u

open CategoryTheory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

namespace PresheafOfModules

variable {S : C·µí·µñ ‚•§ CommRingCat.{u}} {F : C ‚•§ D} {S' R : D·µí·µñ ‚•§ CommRingCat.{u}}
   (M N : PresheafOfModules.{v} (R ‚ãô forget‚ÇÇ _ _))
   (œÜ : S ‚ü∂ F.op ‚ãô R) (œÜ' : S' ‚ü∂ R)

/-- Given a morphism of presheaves of commutative rings `œÜ : S ‚ü∂ F.op ‚ãô R`,
this is the type of relative `œÜ`-derivation of a presheaf of `R`-modules `M`. -/
structure Derivation where
  /-- the underlying additive map `R.obj X ‚Üí+ M.obj X` of a derivation -/
  d {X : D·µí·µñ} : R.obj X ‚Üí+ M.obj X
  d_mul {X : D·µí·µñ} (a b : R.obj X) : d (a * b) = a ‚Ä¢ d b + b ‚Ä¢ d a := by aesop_cat
  d_map {X Y : D·µí·µñ} (f : X ‚ü∂ Y) (x : R.obj X) :
    d (R.map f x) = M.map f (d x) := by aesop_cat
  d_app {X : C·µí·µñ} (a : S.obj X) : d (œÜ.app X a) = 0 := by aesop_cat

namespace Derivation

-- Note: `d_app` cannot be a simp lemma because `dsimp` would
-- simplify the composition of functors `R ‚ãô forget‚ÇÇ _ _`
attribute [simp] d_mul d_map

variable {M N œÜ}
variable (d : M.Derivation œÜ)

@[simp] lemma d_one (X : D·µí·µñ) : d.d (X := X) 1 = 0 := by
  simpa using d.d_mul (X := X) 1 1

/-- The postcomposition of a derivation by a morphism of presheaves of modules. -/
@[simps! d_apply]
def postcomp (f : M ‚ü∂ N) : N.Derivation œÜ where
  d := (f.app _).toAddMonoidHom.comp d.d
  d_map _ _ := by simp [naturality_apply]
  d_app {X} a := by
    dsimp
    erw [d_app, map_zero]

/-- The universal property that a derivation `d : M.Derivation œÜ` must
satisfy so that the presheaf of modules `M` can be considered as the presheaf of
(relative) differentials of a presheaf of commutative rings `œÜ : S ‚ü∂ F.op ‚ãô R`. -/
structure Universal where
  /-- An absolyte derivation of `M'` descends as a morphism `M ‚ü∂ M'`. -/
  desc {M' : PresheafOfModules (R ‚ãô forget‚ÇÇ CommRingCat RingCat)}
    (d' : M'.Derivation œÜ) : M ‚ü∂ M'
  fac {M' : PresheafOfModules (R ‚ãô forget‚ÇÇ CommRingCat RingCat)}
    (d' : M'.Derivation œÜ) : d.postcomp (desc d') = d' := by aesop_cat
  postcomp_injective {M' : PresheafOfModules (R ‚ãô forget‚ÇÇ CommRingCat RingCat)}
    (œÜ œÜ' : M ‚ü∂ M') (h : d.postcomp œÜ = d.postcomp œÜ') : œÜ = œÜ' := by aesop_cat

end Derivation

class HasDifferentials : Prop where
  exists_universal_derivation : ‚àÉ (M : PresheafOfModules.{u} (R ‚ãô forget‚ÇÇ _ _))
      (d : M.Derivation œÜ), Nonempty d.Universal

/-- Given a morphism of presheaves of commutative rings `œÜ : S ‚ü∂ R`,
this is the type of relative `œÜ`-derivation of a presheaf of `R`-modules `M`. -/
abbrev Derivation' : Type _ := M.Derivation (F := ùü≠ D) œÜ'

namespace Derivation'

@[simp]
nonrec lemma d_app (d : M.Derivation' œÜ') {X : D·µí·µñ} (a : S'.obj X) :
    d.d (œÜ'.app X a) = 0 :=
  d.d_app _

end Derivation'

namespace DifferentialsConstruction

noncomputable def relativeDifferentials'BundledCore :
    BundledCorePresheafOfModules.{u} (R ‚ãô forget‚ÇÇ _ _) where
  obj X :=
    letI := (œÜ'.app X).toAlgebra
    ModuleCat.of (R.obj X) (Œ©[(R.obj X)‚ÅÑ(S'.obj X)])
  map {X Y} f :=
    letI := (œÜ'.app X).toAlgebra
    letI := (œÜ'.app Y).toAlgebra
    letI := (R.map f).toAlgebra
    letI := (S'.map f).toAlgebra
    letI := ((œÜ'.app Y).comp (S'.map f)).toAlgebra
    have : IsScalarTower (S'.obj X) (R.obj X) (R.obj Y) := sorry
    have : IsScalarTower ‚Üë(S'.obj X) ‚Üë(S'.obj Y) ‚Üë(R.obj Y) := sorry
    have : SMulCommClass ‚Üë(S'.obj Y) ‚Üë(R.obj X) ‚Üë(R.obj Y) := sorry
    KaehlerDifferential.map (S'.obj X) (S'.obj Y) (R.obj X) (R.obj Y)
  map_id := sorry
  map_comp := sorry

noncomputable def relativeDifferentials' :
    PresheafOfModules.{u} (R ‚ãô forget‚ÇÇ _ _) :=
  (relativeDifferentials'BundledCore œÜ').toPresheafOfModules

def derivation' : (relativeDifferentials' œÜ').Derivation' œÜ' := sorry

end DifferentialsConstruction

end PresheafOfModules
