/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.CategoryTheory.Sites.LocallyBijective
import Mathlib.CategoryTheory.Sites.Whiskering

/-!
# Sheaves of modules over a sheaf of rings

In this file, we define the category `SheafOfModules R` when `R : Sheaf J RingCat`
is a sheaf of rings on a category `C` equipped with a Grothendieck topology `J`.

## TODO
* construct the associated sheaf: more precisely, given a morphism of `Œ± : P ‚ü∂ R.val`
where `P` is a presheaf of rings and `R` a sheaf of rings such that `Œ±` identifies
`R` to the associated sheaf of `P`, then construct a sheafification functor
`PresheafOfModules P ‚•§ SheafOfModules R`.

-/

universe v v‚ÇÅ u‚ÇÅ u

open CategoryTheory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {J : GrothendieckTopology C}
  (R : Sheaf J RingCat.{u})

/-- A sheaf of modules is a presheaf of modules such that the underlying presheaf
of abelian groups is a sheaf. -/
structure SheafOfModules where
  /-- the underlying presheaf of modules of a sheaf of modules -/
  val : PresheafOfModules.{v} R.val
  isSheaf : Presheaf.IsSheaf J val.presheaf

namespace SheafOfModules

variable {R}

/-- A morphism between sheaves of modules is a morphism between the underlying
presheaves of modules. -/
@[ext]
structure Hom (X Y : SheafOfModules.{v} R) where
  /-- a morphism between the underlying presheaves of modules -/
  val : X.val ‚ü∂ Y.val

instance : Category (SheafOfModules.{v} R) where
  Hom := Hom
  id _ := ‚ü®ùüô _‚ü©
  comp f g := ‚ü®f.val ‚â´ g.val‚ü©

@[ext]
lemma hom_ext {X Y : SheafOfModules.{v} R} {f g : X ‚ü∂ Y} (h : f.val = g.val) : f = g :=
  Hom.ext _ _ h

@[simp]
lemma id_val (X : SheafOfModules.{v} R) : Hom.val (ùüô X) = ùüô X.val := rfl

@[simp, reassoc]
lemma comp_val {X Y Z : SheafOfModules.{v} R} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).val = f.val ‚â´ g.val := rfl

variable (R)
/-- The forgetful functor `SheafOfModules.{v} R ‚•§ PresheafOfModules R.val`. -/
@[simps]
def forget : SheafOfModules.{v} R ‚•§ PresheafOfModules R.val where
  obj F := F.val
  map œÜ := œÜ.val

/-- The forget functor `SheafOfModules R ‚•§ PresheafOfModules R.val` is fully faithful. -/
@[simps]
def fullyFaithfulForget : (forget.{v} R).FullyFaithful where
  preimage œÜ := ‚ü®œÜ‚ü©

instance : (forget.{v} R).Faithful := (fullyFaithfulForget R).faithful

instance : (forget.{v} R).Full := (fullyFaithfulForget R).full

instance : (forget.{v} R).ReflectsIsomorphisms := (fullyFaithfulForget R).reflectsIsomorphisms

/-- Evaluation on an object `X` gives a functor
`SheafOfModules R ‚•§ ModuleCat (R.val.obj X)`. -/
def evaluation (X : C·µí·µñ) : SheafOfModules.{v} R ‚•§ ModuleCat.{v} (R.val.obj X) :=
  forget _ ‚ãô PresheafOfModules.evaluation _ X

/-- The forget functor `SheafOfModules R ‚•§ Sheaf J AddCommGrp`. -/
@[simps]
def toSheaf : SheafOfModules.{v} R ‚•§ Sheaf J AddCommGrp.{v} where
  obj M := ‚ü®_, M.isSheaf‚ü©
  map f := { val := f.val.hom }

/-- The canonical isomorphism between
`SheafOfModules.toSheaf R ‚ãô sheafToPresheaf J AddCommGrp.{v}`
and `SheafOfModules.forget R ‚ãô PresheafOfModules.toPresheaf R.val`. -/
def toSheafCompSheafToPresheafIso :
    toSheaf R ‚ãô sheafToPresheaf J AddCommGrp.{v} ‚âÖ
      forget R ‚ãô PresheafOfModules.toPresheaf R.val := Iso.refl _

instance : (toSheaf.{v} R).Faithful :=
  Functor.Faithful.of_comp_iso (toSheafCompSheafToPresheafIso.{v} R)

instance (M N : SheafOfModules.{v} R) : AddCommGroup (M ‚ü∂ N) :=
  (fullyFaithfulForget R).homEquiv.addCommGroup

@[simp]
lemma add_val {M N : SheafOfModules.{v} R} (f g : M ‚ü∂ N) :
    (f + g).val = f.val + g.val := rfl

instance : Preadditive (SheafOfModules.{v} R) where
  add_comp := by intros; ext1; dsimp; simp only [Preadditive.add_comp]
  comp_add := by intros; ext1; dsimp; simp only [Preadditive.comp_add]

instance : (forget R).Additive where

instance : (toSheaf R).Additive where

variable {R}
/-- The type of sections of a sheaf of modules. -/
abbrev sections (M : SheafOfModules.{v} R) : Type _ := M.val.sections

/-- The map `M.sections ‚Üí N.sections` induced by a morphisms `M ‚ü∂ N` of sheaves of modules. -/
abbrev sectionsMap {M N : SheafOfModules.{v} R} (f : M ‚ü∂ N) (s : M.sections) : N.sections :=
  PresheafOfModules.sectionsMap f.val s

@[simp]
lemma sectionsMap_comp {M N P : SheafOfModules.{v} R} (f : M ‚ü∂ N) (g : N ‚ü∂ P) (s : M.sections) :
    sectionsMap (f ‚â´ g) s = sectionsMap g (sectionsMap f s) := rfl

@[simp]
lemma sectionsMap_id {M : SheafOfModules.{v} R} (s : M.sections) :
    sectionsMap (ùüô M) s = s := rfl

variable (R) in
/-- The functor which sends a sheaf of modules to its type of sections. -/
@[simps]
def sectionsFunctor : SheafOfModules.{v} R ‚•§ Type _ where
  obj := sections
  map f := sectionsMap f

variable [J.HasSheafCompose (forget‚ÇÇ RingCat.{u} AddCommGrp.{u})]

variable (R) in
/-- The obvious free sheaf of modules of rank `1`. -/
@[simps]
def unit : SheafOfModules R where
  val := PresheafOfModules.unit R.val
  isSheaf := ((sheafCompose J (forget‚ÇÇ RingCat.{u} AddCommGrp.{u})).obj R).cond

/-- The bijection `(unit R ‚ü∂ M) ‚âÉ M.sections` for `M : SheafOfModules R`. -/
def unitHomEquiv (M : SheafOfModules R) :
    (unit R ‚ü∂ M) ‚âÉ M.sections :=
  (fullyFaithfulForget R).homEquiv.trans M.val.unitHomEquiv

@[simp]
lemma unitHomEquiv_apply_coe (M : SheafOfModules R) (f : unit R ‚ü∂ M) (X : C·µí·µñ) :
    (M.unitHomEquiv f).val X = f.val.app X (1 : R.val.obj X) := rfl

lemma unitHomEquiv_comp_apply {M N : SheafOfModules.{u} R}
    (f : unit R ‚ü∂ M) (p : M ‚ü∂ N) :
    N.unitHomEquiv (f ‚â´ p) = sectionsMap p (M.unitHomEquiv f) := rfl

lemma unitHomEquiv_symm_comp {M N : SheafOfModules.{u} R} (s : M.sections) (p : M ‚ü∂ N) :
    M.unitHomEquiv.symm s ‚â´ p = N.unitHomEquiv.symm (sectionsMap p s) :=
  N.unitHomEquiv.injective (by simp [unitHomEquiv_comp_apply])

end SheafOfModules

namespace PresheafOfModules

variable {R : C·µí·µñ ‚•§ RingCat.{u}} {M‚ÇÅ M‚ÇÇ : PresheafOfModules.{v} R}
    (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) {N : PresheafOfModules.{v} R}
    (hN : Presheaf.IsSheaf J N.presheaf)
    [J.WEqualsLocallyBijective AddCommGrp.{v}]
    [Presheaf.IsLocallySurjective J f.hom]
    [Presheaf.IsLocallyInjective J f.hom]

/-- The bijection `(M‚ÇÇ ‚ü∂ N) ‚âÉ (M‚ÇÅ ‚ü∂ N)` induced by a locally bijective morphism
`f : M‚ÇÅ ‚ü∂ M‚ÇÇ` of presheaves of modules, when `N` is a sheaf. -/
@[simps]
noncomputable def homEquivOfIsLocallyBijective : (M‚ÇÇ ‚ü∂ N) ‚âÉ (M‚ÇÅ ‚ü∂ N) where
  toFun œÜ := f ‚â´ œÜ
  invFun œà :=
    { hom := ((J.W_of_isLocallyBijective f.hom).homEquiv _ hN).symm œà.hom
      map_smul := by
        obtain ‚ü®œÜ, hœÜ‚ü© := ((J.W_of_isLocallyBijective f.hom).homEquiv _ hN).surjective œà.hom
        simp only [‚Üê hœÜ, Equiv.symm_apply_apply]
        dsimp at hœÜ
        intro X r y
        apply hN.isSeparated _ _ (Presheaf.imageSieve_mem J f.hom y)
        rintro Y p ‚ü®x, hx‚ü©
        have eq := œà.map_smul _ (R.map p.op r) x
        simp only [‚Üê hœÜ] at eq
        dsimp at eq
        erw [‚Üê NatTrans.naturality_apply œÜ p.op (r ‚Ä¢ y), N.map_smul, M‚ÇÇ.map_smul,
          ‚Üê NatTrans.naturality_apply œÜ p.op y, ‚Üê hx, ‚Üê eq, f.map_smul]
        rfl }
  left_inv œÜ := (toPresheaf _).map_injective
    (((J.W_of_isLocallyBijective f.hom).homEquiv _ hN).left_inv œÜ.hom)
  right_inv œà := (toPresheaf _).map_injective
    (((J.W_of_isLocallyBijective f.hom).homEquiv _ hN).right_inv œà.hom)

end PresheafOfModules
