/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.Algebra.Category.ModuleCat.Colimits

/-! # Colimits in categories of presheaves of modules

In this file, it is shown that under suitable assumptions,
colimits exist in the category `PresheafOfModules R`.

-/

universe v v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ u u'

open CategoryTheory Category Limits

namespace PresheafOfModules

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {R : C·µí·µñ ‚•§ RingCat.{u}}
  {J : Type u‚ÇÇ} [Category.{v‚ÇÇ} J]
  (F : J ‚•§ PresheafOfModules.{v} R)

section Colimits

variable [‚àÄ {X Y : C·µí·µñ} (f : X ‚ü∂ Y), PreservesColimit (F ‚ãô evaluation R Y)
  (ModuleCat.restrictScalars (R.map f))]

/-- A cocone in the category `PresheafOfModules R` is colimit if it is so after the application
of the functors `evaluation R X` for all `X`. -/
def evaluationJointlyReflectsColimits (c : Cocone F)
    (hc : ‚àÄ (X : C·µí·µñ), IsColimit ((evaluation R X).mapCocone c)) : IsColimit c where
  desc s := Hom.mk'' (fun X => (hc X).desc ((evaluation R X).mapCocone s)) (fun X Y f => by
    apply (hc X).hom_ext
    intro j
    erw [(hc X).fac_assoc ((evaluation R X).mapCocone s) j, ‚Üê restrictionApp_naturality_assoc]
    rw [‚Üê Functor.map_comp]
    erw [(hc Y).fac ((evaluation R Y).mapCocone s), restrictionApp_naturality]
    rfl)
  fac s j := by
    ext1 X
    exact (hc X).fac ((evaluation R X).mapCocone s) j
  uniq s m hm := by
    ext1 X
    apply (hc X).uniq ((evaluation R X).mapCocone s)
    intro j
    dsimp
    rw [‚Üê hm]
    rfl

variable [‚àÄ X, HasColimit (F ‚ãô evaluation R X)]

instance {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    HasColimit (F ‚ãô evaluation R Y ‚ãô (ModuleCat.restrictScalars (R.map f))) :=
  ‚ü®_, isColimitOfPreserves (ModuleCat.restrictScalars (R.map f))
    (colimit.isColimit (F ‚ãô evaluation R Y))‚ü©

/-- Given `F : J ‚•§ PresheafOfModules.{v} R`, this is the `BundledCorePresheafOfModules R` which
corresponds to the presheaf of modules which sends `X` to the colimit of `F ‚ãô evaluation R X`. -/
@[simps]
noncomputable def colimitBundledCore : BundledCorePresheafOfModules R where
  obj X := colimit (F ‚ãô evaluation R X)
  map {X Y} f := colimMap (whiskerLeft F (restriction R f)) ‚â´
    (preservesColimitIso (ModuleCat.restrictScalars (R.map f)) (F ‚ãô evaluation R Y)).inv
  map_id X := colimit.hom_ext (fun j => by
    dsimp
    rw [Œπ_colimMap_assoc, whiskerLeft_app, restriction_app]
    erw [Œπ_preservesColimitsIso_inv (G := ModuleCat.restrictScalars (R.map (ùüô X))),
      ModuleCat.restrictScalarsId'App_inv_naturality]
    rw [restrictionApp_id]
    rfl)
  map_comp {X Y Z} f g := colimit.hom_ext (fun j => by
    dsimp
    rw [Œπ_colimMap_assoc, whiskerLeft_app, restriction_app, assoc, Œπ_colimMap_assoc]
    erw [Œπ_preservesColimitsIso_inv (G := ModuleCat.restrictScalars (R.map (f ‚â´ g))),
      Œπ_preservesColimitsIso_inv_assoc (G := ModuleCat.restrictScalars (R.map f))]
    rw [‚Üê Functor.map_comp_assoc, Œπ_colimMap_assoc]
    erw [Œπ_preservesColimitsIso_inv (G := ModuleCat.restrictScalars (R.map g))]
    rw [restrictionApp_comp, ModuleCat.restrictScalarsComp'_inv_app, assoc, assoc,
      whiskerLeft_app, whiskerLeft_app, restriction_app, restriction_app]
    simp only [Functor.map_comp, assoc]
    rfl)

/-- Given `F : J ‚•§ PresheafOfModules.{v} R`, this is the canonical map
`F.obj j ‚ü∂ (colimitBundledCore F).toPresheafOfModules` for all `j : J`. -/
noncomputable def colimitCoconeŒπApp (j : J) :
    F.obj j ‚ü∂ (colimitBundledCore F).toPresheafOfModules :=
  PresheafOfModules.Hom.mk'' (fun X => colimit.Œπ (F ‚ãô evaluation R X) j) (fun X Y f => by
    dsimp
    erw [colimit.Œπ_desc_assoc, assoc, ‚Üê Œπ_preservesColimitsIso_inv]
    rfl)

@[reassoc (attr := simp)]
lemma colimitCoconeŒπApp_naturality {i j : J} (f : i ‚ü∂ j) :
    F.map f ‚â´ colimitCoconeŒπApp F j = colimitCoconeŒπApp F i := by
  ext1 X
  exact colimit.w (F ‚ãô evaluation R X) f

/-- The (colimit) cocone for `F : J ‚•§ PresheafOfModules.{v} R` that is constructed from
the colimit of `F ‚ãô evaluation R X` for all `X`. -/
@[simps]
noncomputable def colimitCocone : Cocone F where
  pt := (colimitBundledCore F).toPresheafOfModules
  Œπ := { app := colimitCoconeŒπApp F }

/-- The cocone `colimitCocone F` is colimit for any `F : J ‚•§ PresheafOfModules.{v} R`. -/
noncomputable def isColimitColimitCocone : IsColimit (colimitCocone F) :=
  evaluationJointlyReflectsColimits _ _ (fun _ => colimit.isColimit _)

instance hasColimit : HasColimit F := ‚ü®_, isColimitColimitCocone F‚ü©

noncomputable instance evaluationPreservesColimit (X : C·µí·µñ) :
    PreservesColimit F (evaluation R X) :=
  preservesColimitOfPreservesColimitCocone (isColimitColimitCocone F) (colimit.isColimit _)

variable [‚àÄ X, PreservesColimit F
  (evaluation R X ‚ãô forget‚ÇÇ (ModuleCat (R.obj X)) AddCommGroupCat)]

noncomputable instance toPresheafPreservesColimit :
    PreservesColimit F (toPresheaf R) :=
  preservesColimitOfPreservesColimitCocone (isColimitColimitCocone F)
    (Limits.evaluationJointlyReflectsColimits _
      (fun X => isColimitOfPreserves (evaluation R X ‚ãô forget‚ÇÇ _ AddCommGroupCat)
        (isColimitColimitCocone F)))

end Colimits

variable (R J)

section HasColimitsOfShape

variable [HasColimitsOfShape J AddCommGroupCat.{v}]

instance hasColimitsOfShape : HasColimitsOfShape J (PresheafOfModules.{v} R) where

noncomputable instance evaluationPreservesColimitsOfShape (X : C·µí·µñ) :
    PreservesColimitsOfShape J (evaluation R X : PresheafOfModules.{v} R ‚•§ _) where

noncomputable instance toPresheafPreservesColimitsOfShape :
    PreservesColimitsOfShape J (toPresheaf.{v} R) where

end HasColimitsOfShape

namespace Finite

instance hasFiniteColimits : HasFiniteColimits (PresheafOfModules.{v} R) :=
  ‚ü®fun _ => inferInstance‚ü©

noncomputable instance evaluationPreservesFiniteColimits (X : C·µí·µñ) :
    PreservesFiniteColimits (evaluation.{v} R X) where

noncomputable instance toPresheafPreservesFiniteColimits :
    PreservesFiniteColimits (toPresheaf R) where

end Finite

end PresheafOfModules
