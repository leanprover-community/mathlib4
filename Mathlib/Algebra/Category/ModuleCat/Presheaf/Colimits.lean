/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.Algebra.Category.ModuleCat.Colimits

/-! # Colimits in categories of presheaves of modules

In this file, it is shown that under suitable assumptions,
colimits exist in the category `PresheafOfModules R`.

-/

universe v v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ u u'

open CategoryTheory Category Limits

namespace PresheafOfModules

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {R : C·µí·µñ ‚•§ RingCat.{u}}
  {J : Type u‚ÇÇ} [Category.{v‚ÇÇ} J]
  (F : J ‚•§ PresheafOfModules.{v} R)

section Colimits

variable [‚àÄ {X Y : C·µí·µñ} (f : X ‚ü∂ Y), PreservesColimit (F ‚ãô evaluation R Y)
  (ModuleCat.restrictScalars (R.map f).hom)]

/-- A cocone in the category `PresheafOfModules R` is colimit if it is so after the application
of the functors `evaluation R X` for all `X`. -/
def evaluationJointlyReflectsColimits (c : Cocone F)
    (hc : ‚àÄ (X : C·µí·µñ), IsColimit ((evaluation R X).mapCocone c)) : IsColimit c where
  desc s :=
    { app := fun X => (hc X).desc ((evaluation R X).mapCocone s)
      naturality := fun {X Y} f ‚Ü¶ (hc X).hom_ext (fun j ‚Ü¶ by
        rw [(hc X).fac_assoc ((evaluation R X).mapCocone s) j]
        have h‚ÇÅ := (c.Œπ.app j).naturality f
        have h‚ÇÇ := (hc Y).fac ((evaluation R Y).mapCocone s)
        dsimp at h‚ÇÅ h‚ÇÇ ‚ä¢
        simp only [‚Üê reassoc_of% h‚ÇÅ, ‚Üê Functor.map_comp, h‚ÇÇ, Hom.naturality]) }
  fac s j := by
    ext1 X
    exact (hc X).fac ((evaluation R X).mapCocone s) j
  uniq s m hm := by
    ext1 X
    apply (hc X).uniq ((evaluation R X).mapCocone s)
    intro j
    dsimp
    rw [‚Üê hm]
    rfl

variable [‚àÄ X, HasColimit (F ‚ãô evaluation R X)]

instance {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    HasColimit (F ‚ãô evaluation R Y ‚ãô (ModuleCat.restrictScalars (R.map f).hom)) :=
  ‚ü®_, isColimitOfPreserves (ModuleCat.restrictScalars (R.map f).hom)
    (colimit.isColimit (F ‚ãô evaluation R Y))‚ü©

/-- Given `F : J ‚•§ PresheafOfModules.{v} R`, this is the presheaf of modules obtained by
taking a colimit in the category of modules over `R.obj X` for all `X`. -/
@[simps]
noncomputable def colimitPresheafOfModules : PresheafOfModules R where
  obj X := colimit (F ‚ãô evaluation R X)
  map {_ Y} f := colimMap (whiskerLeft F (restriction R f)) ‚â´
    (preservesColimitIso (ModuleCat.restrictScalars (R.map f).hom) (F ‚ãô evaluation R Y)).inv
  map_id X := colimit.hom_ext (fun j => by
    dsimp
    rw [Œπ_colimMap_assoc, whiskerLeft_app, restriction_app]
    erw [Œπ_preservesColimitIso_inv (G := ModuleCat.restrictScalars (R.map (ùüô X)).hom),
      ModuleCat.restrictScalarsId'App_inv_naturality]
    rw [map_id]
    dsimp)
  map_comp {X Y Z} f g := colimit.hom_ext (fun j => by
    dsimp
    rw [Œπ_colimMap_assoc, whiskerLeft_app, restriction_app, assoc, Œπ_colimMap_assoc]
    erw [Œπ_preservesColimitIso_inv (G := ModuleCat.restrictScalars (R.map (f ‚â´ g)).hom),
      Œπ_preservesColimitIso_inv_assoc (G := ModuleCat.restrictScalars (R.map f).hom)]
    rw [‚Üê Functor.map_comp_assoc, Œπ_colimMap_assoc]
    erw [Œπ_preservesColimitIso_inv (G := ModuleCat.restrictScalars (R.map g).hom)]
    rw [map_comp, ModuleCat.restrictScalarsComp'_inv_app, assoc, assoc,
      whiskerLeft_app, whiskerLeft_app, restriction_app, restriction_app]
    simp only [Functor.map_comp, assoc]
    rfl)

/-- The (colimit) cocone for `F : J ‚•§ PresheafOfModules.{v} R` that is constructed from
the colimit of `F ‚ãô evaluation R X` for all `X`. -/
@[simps]
noncomputable def colimitCocone : Cocone F where
  pt := colimitPresheafOfModules F
  Œπ :=
    { app := fun j ‚Ü¶
        { app := fun X ‚Ü¶ colimit.Œπ (F ‚ãô evaluation R X) j
          naturality := fun {X Y} f ‚Ü¶ by
            dsimp
            erw [colimit.Œπ_desc_assoc, assoc, ‚Üê Œπ_preservesColimitIso_inv]
            rfl }
      naturality := fun {X Y} f ‚Ü¶ by
        ext1 X
        simpa using colimit.w (F ‚ãô evaluation R X) f }

/-- The cocone `colimitCocone F` is colimit for any `F : J ‚•§ PresheafOfModules.{v} R`. -/
noncomputable def isColimitColimitCocone : IsColimit (colimitCocone F) :=
  evaluationJointlyReflectsColimits _ _ (fun _ => colimit.isColimit _)

instance hasColimit : HasColimit F := ‚ü®_, isColimitColimitCocone F‚ü©

instance evaluation_preservesColimit (X : C·µí·µñ) :
    PreservesColimit F (evaluation R X) :=
  preservesColimit_of_preserves_colimit_cocone (isColimitColimitCocone F) (colimit.isColimit _)

variable [‚àÄ X, PreservesColimit F
  (evaluation R X ‚ãô forget‚ÇÇ (ModuleCat (R.obj X)) AddCommGrp)]

instance toPresheaf_preservesColimit :
    PreservesColimit F (toPresheaf R) :=
  preservesColimit_of_preserves_colimit_cocone (isColimitColimitCocone F)
    (Limits.evaluationJointlyReflectsColimits _
      (fun X => isColimitOfPreserves (evaluation R X ‚ãô forget‚ÇÇ _ AddCommGrp)
        (isColimitColimitCocone F)))

end Colimits

variable (R J)

section HasColimitsOfShape

variable [HasColimitsOfShape J AddCommGrp.{v}]

instance hasColimitsOfShape : HasColimitsOfShape J (PresheafOfModules.{v} R) where

noncomputable instance evaluation_preservesColimitsOfShape (X : C·µí·µñ) :
    PreservesColimitsOfShape J (evaluation R X : PresheafOfModules.{v} R ‚•§ _) where

noncomputable instance toPresheaf_preservesColimitsOfShape :
    PreservesColimitsOfShape J (toPresheaf.{v} R) where

end HasColimitsOfShape

namespace Finite

instance hasFiniteColimits : HasFiniteColimits (PresheafOfModules.{v} R) :=
  ‚ü®fun _ => inferInstance‚ü©

noncomputable instance evaluation_preservesFiniteColimits (X : C·µí·µñ) :
    PreservesFiniteColimits (evaluation.{v} R X) where

noncomputable instance toPresheaf_preservesFiniteColimits :
    PreservesFiniteColimits (toPresheaf R) where

end Finite

end PresheafOfModules
