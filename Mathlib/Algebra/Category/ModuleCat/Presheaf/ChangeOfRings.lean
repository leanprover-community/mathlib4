/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Category.ModuleCat.ChangeOfRings
import Mathlib.Algebra.Category.ModuleCat.Presheaf

/-!
# Change of presheaf of rings

In this file, we define the restriction of scalars functor
`restrictScalars Œ± : PresheafOfModules.{v} R' ‚•§ PresheafOfModules.{v} R`
attached to a morphism of presheaves of rings `Œ± : R ‚ü∂ R'`.

-/

universe v v' u u'

open CategoryTheory

namespace PresheafOfModules

variable {C : Type u'} [Category.{v'} C] {R R' : C·µí·µñ ‚•§ RingCat.{u}}

/-- The restriction of scalars of presheaves of modules, on objects. -/
@[simps]
noncomputable def restrictScalarsBundledCore (M' : PresheafOfModules R') (Œ± : R ‚ü∂ R') :
    BundledCorePresheafOfModules R where
  obj X := (ModuleCat.restrictScalars (Œ±.app X)).obj (M'.obj X)
  map {X Y} f :=
    { toFun := M'.map f
      map_add' := map_add _
      map_smul' := fun r x ‚Ü¶ by
        have eq := RingHom.congr_fun (Œ±.naturality f) r
        apply (M'.map_smul f (Œ±.app _ r) x).trans
        dsimp at eq ‚ä¢
        rw [‚Üê eq]
        rfl }
  map_id X := by
    ext x
    exact LinearMap.congr_fun (M'.map_id X) x
  map_comp f g := by
    ext x
    exact LinearMap.congr_fun (M'.map_comp f g) x

/-- The restriction of scalars functor `PresheafOfModules R' ‚•§ PresheafOfModules R`
induced by a morphism of presheaves of rings `R ‚ü∂ R'`. -/
@[simps]
noncomputable def restrictScalars (Œ± : R ‚ü∂ R') :
    PresheafOfModules.{v} R' ‚•§ PresheafOfModules.{v} R where
  obj M' := (M'.restrictScalarsBundledCore Œ±).toPresheafOfModules
  map {M‚ÇÅ' M‚ÇÇ'} œÜ :=
    { hom := œÜ.hom
      map_smul := fun X r ‚Ü¶ œÜ.map_smul X (Œ±.app _ r) }

instance (Œ± : R ‚ü∂ R') : (restrictScalars.{v} Œ±).Additive where

instance : (restrictScalars (ùüô R)).Full := inferInstanceAs (ùü≠ _).Full

instance (Œ± : R ‚ü∂ R') : (restrictScalars Œ±).Faithful where
  map_injective h := (toPresheaf R').map_injective ((toPresheaf R).congr_map h)

end PresheafOfModules
