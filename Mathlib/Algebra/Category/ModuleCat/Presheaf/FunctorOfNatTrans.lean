/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.Algebra.Category.ModuleCat.Pseudofunctor
import Mathlib.CategoryTheory.Bicategory.NaturalTransformation.Oplax

/-!
# The endofunctor of presheaves of modules induced by an oplax natural transformation

In this file, we show that any oplax natural transformation from
`CommRingCat.moduleCatRestrictScalarsPseudofunctor` to itself induces
a functor `PresheafOfModules.{v} R ‚•§ PresheafOfModules.{v} R`
for any presheaf of commutative rings.

-/

universe v v‚ÇÅ u‚ÇÅ u

open CategoryTheory

@[simp]
lemma CommRingCat.forgetToRingCat_map {R S : CommRingCat.{u}} (f : R ‚ü∂ S) :
    (forget‚ÇÇ _ RingCat).map f = f := rfl

namespace CategoryTheory

open Bicategory

namespace OplaxFunctor

variable {B C : Type*} [Bicategory B] [Bicategory C]
  (F : OplaxFunctor B C)

section

/-- More flexible variant of `mapId`. -/
def mapId' {b : B} (f : b ‚ü∂ b) (hf : f = ùüô b) :
    F.map f ‚ü∂ ùüô _ :=
  F.map‚ÇÇ (eqToHom (by rw [hf])) ‚â´ F.mapId _

lemma mapId'_eq_mapId (b : B) :
    F.mapId' (ùüô b) rfl = F.mapId b := by
  simp [mapId']

/-- More flexible variant of `mapComp`. -/
def mapComp' {b‚ÇÄ b‚ÇÅ b‚ÇÇ : B} (f : b‚ÇÄ ‚ü∂ b‚ÇÅ) (g : b‚ÇÅ ‚ü∂ b‚ÇÇ) (fg : b‚ÇÄ ‚ü∂ b‚ÇÇ) (h : fg = f ‚â´ g) :
    F.map fg ‚ü∂ F.map f ‚â´ F.map g :=
  F.map‚ÇÇ (eqToHom (by rw [h])) ‚â´ F.mapComp f g

lemma mapComp'_eq_mapComp {b‚ÇÄ b‚ÇÅ b‚ÇÇ : B} (f : b‚ÇÄ ‚ü∂ b‚ÇÅ) (g : b‚ÇÅ ‚ü∂ b‚ÇÇ) :
    F.mapComp' f g _ rfl = F.mapComp f g := by
  simp [mapComp']

end

end OplaxFunctor

namespace OplaxNatTrans

variable {B C : Type*} [Bicategory B] [Bicategory C]
  {F G : OplaxFunctor B C} (œÑ : OplaxNatTrans F G)

/-- Variant of `naturality_id` involving `mapId`. -/
lemma naturality_id' {b : B} (f : b ‚ü∂ b) (hf : f = ùüô b) :
    œÑ.naturality f ‚â´ œÑ.app _ ‚óÅ G.mapId' f hf =
      F.mapId' f hf ‚ñ∑ œÑ.app b ‚â´ (Œª_ _).hom ‚â´ (œÅ_ _).inv := by
  subst hf
  simp only [OplaxFunctor.mapId'_eq_mapId, naturality_id]

/-- Variant of `naturality_comp` involving `mapComp'`. -/
lemma naturality_comp' {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (fg : a ‚ü∂ c) (h : fg = f ‚â´ g) :
    œÑ.naturality fg ‚â´ _ ‚óÅ G.mapComp' f g fg h =
      F.mapComp' f g fg h ‚ñ∑ _ ‚â´ (Œ±_ _ _ _).hom ‚â´
        _ ‚óÅ œÑ.naturality g ‚â´ (Œ±_ _ _ _).inv ‚â´ œÑ.naturality f ‚ñ∑ _‚â´
          (Œ±_ _ _ _).hom := by
  subst h
  simp only [OplaxFunctor.mapComp'_eq_mapComp, naturality_comp]

end OplaxNatTrans

end CategoryTheory

open CategoryTheory Category Limits Opposite

/-- `ModuleCat.restrictScalarsPseudofunctor.toOplax.mapId'` identifies to
`ModuleCat.restrictScalarsId'`. -/
lemma CommRingCat.moduleCatRestrictScalarsPseudofunctor_mapId' {R : CommRingCat.{u}} (f : R ‚ü∂ R)
    (hf : f = ùüô _) :
  CommRingCat.moduleCatRestrictScalarsPseudofunctor.toOplax.mapId'
    ‚ü®f.op‚ü© (by subst hf; rfl) = (ModuleCat.restrictScalarsId' f hf).hom := by
  subst hf
  apply OplaxFunctor.mapId'_eq_mapId

/-- `ModuleCat.restrictScalarsPseudofunctor.toOplax.mapComp'` identifies to
`ModuleCat.restrictScalarsComp'`. -/
lemma CommRingCat.moduleCatRestrictScalarsPseudofunctor_mapComp' {R‚ÇÄ R‚ÇÅ R‚ÇÇ : CommRingCat.{u}}
    (f : R‚ÇÄ ‚ü∂ R‚ÇÅ) (g : R‚ÇÅ ‚ü∂ R‚ÇÇ) (fg : R‚ÇÄ ‚ü∂ R‚ÇÇ) (h : fg = f ‚â´ g) :
  CommRingCat.moduleCatRestrictScalarsPseudofunctor.toOplax.mapComp'
    ‚ü®g.op‚ü© ‚ü®f.op‚ü© ‚ü®fg.op‚ü© (by subst h; rfl) =
    (ModuleCat.restrictScalarsComp' f g fg h).hom := by
  subst h
  apply OplaxFunctor.mapComp'_eq_mapComp

namespace PresheafOfModules

variable (œÑ : OplaxNatTrans CommRingCat.moduleCatRestrictScalarsPseudofunctor.{v, u}.toOplax
  CommRingCat.moduleCatRestrictScalarsPseudofunctor.{v, u}.toOplax)
  {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {R : C·µí·µñ ‚•§ CommRingCat.{u}}

set_option maxHeartbeats 400000 in
@[simps]
noncomputable def functorOfOplaxNatTransObj (M : PresheafOfModules.{v} (R ‚ãô forget‚ÇÇ _ _)) :
    PresheafOfModules.{v} (R ‚ãô forget‚ÇÇ _ _) where
  obj X := (œÑ.app (LocallyDiscrete.mk (op (R.obj X)))).obj (M.obj X)
  map {X Y} f := (œÑ.app _).map (M.map f) ‚â´
    (œÑ.naturality (Quiver.Hom.toLoc (R.map f).op)).app (M.obj Y)
  map_id X := by
    dsimp only [Functor.comp_map, CommRingCat.forgetToRingCat_map]
    rw [map_id, ‚Üê cancel_mono ((ModuleCat.restrictScalarsId' _ (R.map_id X)).hom.app _),
      assoc, Iso.inv_hom_id_app]
    have := NatTrans.congr_app
      (œÑ.naturality_id' (b := ‚ü®‚ü®R.obj X‚ü©‚ü©) ‚ü®‚ü®R.map (ùüô X)‚ü©‚ü© (by rw [R.map_id]; rfl)) (M.obj X)
    dsimp at this
    erw [CommRingCat.moduleCatRestrictScalarsPseudofunctor_mapId'] at this
    erw [this, Iso.hom_inv_id_app]
    dsimp
    rw [comp_id, ‚Üê Functor.map_comp, Iso.inv_hom_id, CategoryTheory.Functor.map_id]
  map_comp {X Y Z} f g := by
    dsimp only [Functor.comp_map, CommRingCat.forgetToRingCat_map]
    have := NatTrans.congr_app (œÑ.naturality_comp' (a := ‚ü®‚ü®R.obj Z‚ü©‚ü©)
      (b := ‚ü®‚ü®R.obj Y‚ü©‚ü©) (c := ‚ü®‚ü®R.obj X‚ü©‚ü©) ‚ü®‚ü®R.map g‚ü©‚ü© ‚ü®‚ü®R.map f‚ü©‚ü© ‚ü®‚ü®R.map (f ‚â´ g)‚ü©‚ü©
        (by rw [R.map_comp]; rfl)) (M.obj Z)
    dsimp at this
    erw [CommRingCat.moduleCatRestrictScalarsPseudofunctor_mapComp' _ _ _ (by simp)] at this
    dsimp [Bicategory.associator] at this
    rw [id_comp, id_comp, comp_id] at this
    rw [assoc, ‚Üê cancel_mono ((ModuleCat.restrictScalarsComp' _ _ _ (R.map_comp f g)).hom.app _),
      assoc, assoc, assoc, assoc, Iso.inv_hom_id_app]
    erw [this, comp_id, map_comp]
    dsimp
    rw [‚Üê Functor.map_comp_assoc, assoc, assoc, Iso.inv_hom_id, comp_id,
      Functor.map_comp_assoc, Functor.map_comp]
    erw [‚Üê NatTrans.naturality_assoc]
    rfl

variable (R)

/-- Any oplax natural transformation from
`CommRingCat.moduleCatRestrictScalarsPseudofunctor` to itself induces a functor
`PresheafOfModules (R ‚ãô forget‚ÇÇ _ _) ‚•§ PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)`
for any presheaf of commutative rings `R`. -/
@[simps]
noncomputable def functorOfOplaxNatTrans :
  PresheafOfModules.{v} (R ‚ãô forget‚ÇÇ _ _) ‚•§ PresheafOfModules.{v} (R ‚ãô forget‚ÇÇ _ _) where
  obj := functorOfOplaxNatTransObj œÑ
  map {M N} œÜ :=
    { app := fun X ‚Ü¶ (œÑ.app _).map (œÜ.app X)
      naturality := fun {X Y} f ‚Ü¶ by
        dsimp [functorOfOplaxNatTransObj]
        rw [assoc, ‚Üê Functor.map_comp_assoc, ‚Üê œÜ.naturality,
          Functor.map_comp_assoc]
        erw [‚Üê NatTrans.naturality]
        rfl }

end PresheafOfModules
