import Mathlib.Algebra.Category.Ring.FilteredColimits
import Mathlib.Algebra.Category.Ring.Colimits
import Mathlib.Algebra.Category.Grp.FilteredColimits
import Mathlib.Algebra.Category.ModuleCat.Colimits
import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.CategoryTheory.Limits.ConcreteCategory

open CategoryTheory Category Limits Opposite

universe u v

section


variable {C : Type u} [Category.{u} C] [IsCofiltered C] (R : C·µí·µñ ‚•§ RingCat.{u})
variable (M : PresheafOfModules R)

namespace Module.overColimits

variable {R M} in

def hsmul {c‚ÇÅ c‚ÇÇ c‚ÇÉ : C} (i‚ÇÅ : c‚ÇÉ ‚ü∂ c‚ÇÅ) (i‚ÇÇ : c‚ÇÉ ‚ü∂ c‚ÇÇ)
    (r : R.obj $ op c‚ÇÅ) (m : M.obj $ op c‚ÇÇ) : M.obj $ op c‚ÇÉ :=
  (R.map (op i‚ÇÅ) r) ‚Ä¢ (M.map (op i‚ÇÇ) m)

namespace hsmul

variable {c‚ÇÅ c‚ÇÇ c‚ÇÉ : C} (i‚ÇÅ : c‚ÇÉ ‚ü∂ c‚ÇÅ) (i‚ÇÇ : c‚ÇÉ ‚ü∂ c‚ÇÇ)
variable (r : R.obj $ op c‚ÇÅ) (m : M.obj $ op c‚ÇÇ)

protected lemma one_smul :
    hsmul i‚ÇÅ i‚ÇÇ (1 : R.obj $ op c‚ÇÅ) m = (M.map (op i‚ÇÇ) m) := by
  simp [hsmul]

protected lemma mul_smul (r‚ÇÅ r‚ÇÇ : R.obj $ op c‚ÇÅ) : hsmul i‚ÇÅ i‚ÇÇ (r‚ÇÅ * r‚ÇÇ) m =
    hsmul i‚ÇÅ (ùüô _) r‚ÇÅ (hsmul i‚ÇÅ i‚ÇÇ r‚ÇÇ m) := by
  simp only [hsmul, map_mul, mul_smul, LinearMap.map_smul‚Çõ‚Çó]
  rw [‚Üê comp_apply, ‚Üê R.map_comp]
  erw [M.map_id, comp_id]
  rfl

protected lemma smul_zero : hsmul (M := M) i‚ÇÅ i‚ÇÇ r 0 = 0 := by
  simp [hsmul]

protected lemma smul_add (m‚ÇÅ m‚ÇÇ : M.obj $ op c‚ÇÇ) : hsmul i‚ÇÅ i‚ÇÇ r (m‚ÇÅ + m‚ÇÇ) =
    hsmul i‚ÇÅ i‚ÇÇ r m‚ÇÅ + hsmul i‚ÇÅ i‚ÇÇ r m‚ÇÇ := by
  simp [hsmul]

protected lemma add_smul (r‚ÇÅ r‚ÇÇ : R.obj $ op c‚ÇÅ) (m : M.obj $ op c‚ÇÇ) :
    hsmul i‚ÇÅ i‚ÇÇ (r‚ÇÅ + r‚ÇÇ) m = hsmul i‚ÇÅ i‚ÇÇ r‚ÇÅ m + hsmul i‚ÇÅ i‚ÇÇ r‚ÇÇ m := by
  simp [hsmul, add_smul]

protected lemma zero_smul : hsmul i‚ÇÅ i‚ÇÇ (0 : R.obj $ op c‚ÇÅ) m = 0 := by
  simp [hsmul]

set_option maxHeartbeats 500000 in
lemma respect_Œπ
    {c‚ÇÅ c‚ÇÇ c‚ÇÉ : C} (i‚ÇÅ : c‚ÇÉ ‚ü∂ c‚ÇÅ) (i‚ÇÇ : c‚ÇÉ ‚ü∂ c‚ÇÇ)
    (r : R.obj $ op c‚ÇÅ) (x : M.obj $ op c‚ÇÇ)
    {d‚ÇÅ d‚ÇÇ d‚ÇÉ : C} (j‚ÇÅ : d‚ÇÉ ‚ü∂ d‚ÇÅ) (j‚ÇÇ : d‚ÇÉ ‚ü∂ d‚ÇÇ)
    (r' : R.obj $ op d‚ÇÅ) (x' : M.obj $ op d‚ÇÇ)
    (hrr' : colimit.Œπ R _ r = colimit.Œπ R _ r')
    (hmm' : colimit.Œπ M.presheaf _ x = colimit.Œπ M.presheaf _ x') :
    colimit.Œπ M.presheaf _ (hsmul i‚ÇÅ i‚ÇÇ r x) =
    colimit.Œπ M.presheaf _ (hsmul j‚ÇÅ j‚ÇÇ r' x') := by
  classical
  obtain ‚ü®m, fm‚ÇÅ, fm‚ÇÇ, hm‚ü© := Concrete.colimit_exists_of_rep_eq  (h := hrr')
  obtain ‚ü®n, fn‚ÇÅ, fn‚ÇÇ, hn‚ü© := Concrete.colimit_exists_of_rep_eq (h := hmm')
  erw [Concrete.colimit_rep_eq_iff_exists]
  delta hsmul
  let O : Finset C·µí·µñ := { op c‚ÇÅ, op c‚ÇÇ, op c‚ÇÉ, op d‚ÇÅ, op d‚ÇÇ, op d‚ÇÉ, m, n }
  let H : Finset ((X : C·µí·µñ) √ó' (Y : C·µí·µñ) √ó' (_ : X ‚àà O) √ó' (_ : Y ‚àà O) √ó' (X ‚ü∂ Y)) :=
  { ‚ü®op c‚ÇÅ, m, by simp [O], by simp [O], fm‚ÇÅ‚ü©,
    ‚ü®op d‚ÇÅ, m, by simp [O], by simp [O], fm‚ÇÇ‚ü©,
    ‚ü®op c‚ÇÇ, n, by simp [O], by simp [O], fn‚ÇÅ‚ü©,
    ‚ü®op d‚ÇÇ, n, by simp [O], by simp [O], fn‚ÇÇ‚ü©,
    ‚ü®op c‚ÇÅ, op c‚ÇÉ, by simp [O], by simp [O], i‚ÇÅ.op‚ü©,
    ‚ü®op c‚ÇÇ, op c‚ÇÉ, by simp [O], by simp [O], i‚ÇÇ.op‚ü©,
    ‚ü®op d‚ÇÅ, op d‚ÇÉ, by simp [O], by simp [O], j‚ÇÅ.op‚ü©,
    ‚ü®op d‚ÇÇ, op d‚ÇÉ, by simp [O], by simp [O], j‚ÇÇ.op‚ü© }

  let S := IsFiltered.sup O H

  refine ‚ü®S, IsFiltered.toSup O H (by simp [O]), IsFiltered.toSup _ _ (by simp [O]), ?_‚ü©
  erw [M.map_smul, M.map_smul]
  apply_fun R.map (IsFiltered.toSup O H (by simp [O])) at hm
  rw [‚Üê comp_apply, ‚Üê comp_apply, ‚Üê R.map_comp, ‚Üê R.map_comp] at hm

  apply_fun M.presheaf.map (IsFiltered.toSup O H (by simp [O])) at hn
  erw [‚Üê comp_apply, ‚Üê comp_apply, ‚Üê M.presheaf.map_comp, ‚Üê M.presheaf.map_comp] at hn

  rw [‚Üê comp_apply, ‚Üê comp_apply, ‚Üê R.map_comp, ‚Üê R.map_comp]
  erw [‚Üê comp_apply, ‚Üê comp_apply, ‚Üê M.presheaf.map_comp, ‚Üê M.presheaf.map_comp]
  convert congr($hm ‚Ä¢ $hn) using 1 <;> congr 3
  ¬∑ erw [IsFiltered.toSup_commutes O H (f := i‚ÇÅ.op), IsFiltered.toSup_commutes O H (f := fm‚ÇÅ)]
  ¬∑ erw [IsFiltered.toSup_commutes O H (f := i‚ÇÇ.op), IsFiltered.toSup_commutes O H (f := fn‚ÇÅ)]
  ¬∑ erw [IsFiltered.toSup_commutes O H (f := j‚ÇÅ.op), IsFiltered.toSup_commutes O H (f := fm‚ÇÇ)]
  ¬∑ erw [IsFiltered.toSup_commutes O H (f := j‚ÇÇ.op), IsFiltered.toSup_commutes O H (f := fn‚ÇÇ)]

end hsmul

variable {R M} in
noncomputable def smulColimit {c : C·µí·µñ} (r : R.obj c) (m : colimit (C := AddCommGrp) M.presheaf) :
    colimit (C := AddCommGrp) M.presheaf :=
  colimit.Œπ M.presheaf (IsFiltered.max c (Concrete.indexRepColimit M.presheaf m))
   (hsmul (IsFiltered.leftToMax _ _).unop (IsFiltered.rightToMax _ _).unop
    r (Concrete.repColimit M.presheaf m))

namespace smulColimit

lemma smul_rep (c‚ÇÅ c‚ÇÇ : C·µí·µñ) (r : R.obj c‚ÇÅ) (m : M.obj c‚ÇÇ) :
    smulColimit r (colimit.Œπ M.presheaf c‚ÇÇ m) =
    colimit.Œπ M.presheaf (IsFiltered.max c‚ÇÅ c‚ÇÇ)
    (hsmul (IsFiltered.leftToMax _ _).unop (IsFiltered.rightToMax _ _).unop r m) := by
  delta smulColimit
  apply hsmul.respect_Œπ
  ¬∑ rfl
  ¬∑ erw [Concrete.Œπ_repColimit_eq]

protected lemma one_smul (c : C·µí·µñ) (m : colimit (C := AddCommGrp) M.presheaf) :
    smulColimit (1 : R.obj c) m = m := by
  rw [show m = colimit.Œπ M.presheaf (Concrete.indexRepColimit M.presheaf m) _ by
    erw [Concrete.Œπ_repColimit_eq], smul_rep, hsmul.one_smul]
  erw [colimit.w_apply]
  rfl

protected lemma mul_smul (c : C·µí·µñ) (r‚ÇÅ r‚ÇÇ : R.obj c)
    (m : colimit (C := AddCommGrp) M.presheaf) :
    smulColimit (r‚ÇÅ * r‚ÇÇ) m = smulColimit r‚ÇÅ (smulColimit r‚ÇÇ m) := by
  rw [show m = colimit.Œπ M.presheaf (Concrete.indexRepColimit M.presheaf m) _ by
    erw [Concrete.Œπ_repColimit_eq], smul_rep, hsmul.mul_smul, smul_rep, smul_rep]
  apply hsmul.respect_Œπ
  ¬∑ rfl
  ¬∑ apply hsmul.respect_Œπ
    ¬∑ rfl
    ¬∑ erw [Concrete.Œπ_repColimit_eq]

lemma smul_zero (c : C·µí·µñ) (r : R.obj c) : smulColimit (M := M) r 0 = 0 := by
  rw [show (0 : colimit (C := AddCommGrp) M.presheaf) = colimit.Œπ M.presheaf c 0 by rw [map_zero],
    smul_rep, hsmul.smul_zero, map_zero, map_zero]

lemma smul_add (c : C·µí·µñ) (r : R.obj c) (m‚ÇÅ m‚ÇÇ : colimit (C := AddCommGrp) M.presheaf) :
    smulColimit r (m‚ÇÅ + m‚ÇÇ) = smulColimit r m‚ÇÅ + smulColimit r m‚ÇÇ := by
  classical
  let O : Finset C·µí·µñ :=
    { c, Concrete.indexRepColimit M.presheaf m‚ÇÅ, Concrete.indexRepColimit M.presheaf m‚ÇÇ }
  let H : Finset ((X : C·µí·µñ) √ó' (Y : C·µí·µñ) √ó' (_ : X ‚àà O) √ó' (_ : Y ‚àà O) √ó' (X ‚ü∂ Y)) := {}
  let j : C·µí·µñ := IsFiltered.sup O H

  have eq‚ÇÅ : m‚ÇÅ = colimit.Œπ M.presheaf j
      (M.map (IsFiltered.toSup O H $ by simp [O]) (Concrete.repColimit M.presheaf m‚ÇÅ)) := by
    erw [colimit.w_apply, Concrete.Œπ_repColimit_eq]
  have eq‚ÇÇ : m‚ÇÇ = colimit.Œπ M.presheaf j
      (M.map (IsFiltered.toSup O H $ by simp [O]) (Concrete.repColimit M.presheaf m‚ÇÇ)) := by
    erw [colimit.w_apply, Concrete.Œπ_repColimit_eq]
  have eq‚ÇÉ : m‚ÇÅ + m‚ÇÇ = colimit.Œπ M.presheaf j
      (M.map (IsFiltered.toSup O H $ by simp [O]) (Concrete.repColimit M.presheaf m‚ÇÅ) +
       M.map (IsFiltered.toSup O H $ by simp [O]) (Concrete.repColimit M.presheaf m‚ÇÇ)) := by
    rw [map_add]
    erw [colimit.w_apply, colimit.w_apply, Concrete.Œπ_repColimit_eq, Concrete.Œπ_repColimit_eq]

  rw [eq‚ÇÉ]
  conv_rhs => rw [eq‚ÇÅ]; rhs; rw [eq‚ÇÇ]
  rw [smul_rep, smul_rep, smul_rep, hsmul.smul_add, map_add]

lemma add_smul (c : C·µí·µñ) (r‚ÇÅ r‚ÇÇ : R.obj c) (m : colimit (C := AddCommGrp) M.presheaf) :
    smulColimit (r‚ÇÅ + r‚ÇÇ) m = smulColimit r‚ÇÅ m + smulColimit r‚ÇÇ m := by
  rw [show m = colimit.Œπ M.presheaf (Concrete.indexRepColimit M.presheaf m) _ by
    erw [Concrete.Œπ_repColimit_eq], smul_rep, hsmul.add_smul, smul_rep, smul_rep, map_add]

lemma zero_smul (c : C·µí·µñ) (m : colimit (C := AddCommGrp) M.presheaf) :
    smulColimit (M := M) (0 : R.obj c) m = 0 := by
  rw [show m = colimit.Œπ M.presheaf (Concrete.indexRepColimit M.presheaf m) _ by
    erw [Concrete.Œπ_repColimit_eq], smul_rep, hsmul.zero_smul, map_zero]

end smulColimit

noncomputable instance moduleObjColimit (j : C·µí·µñ) :
    Module (R.obj j) (colimit (C := AddCommGrp) M.presheaf) where
  smul := smulColimit
  one_smul := smulColimit.one_smul _ _ _
  mul_smul := smulColimit.mul_smul _ _ _
  smul_zero := smulColimit.smul_zero _ _ _
  smul_add := smulColimit.smul_add _ _ _
  add_smul := smulColimit.add_smul _ _ _
  zero_smul := smulColimit.zero_smul _ _ _

variable {R M} in
noncomputable def colimitSMulColimit (r : colimit (C := RingCat) R) (m : colimit (C := AddCommGrp) M.presheaf) :
    colimit (C := AddCommGrp) M.presheaf :=
  (smulColimit (Concrete.repColimit R r) m)

namespace colimitSMulColimit

lemma rep_smul {c : C·µí·µñ} (r : R.obj c) (m : colimit (C := AddCommGrp) M.presheaf) :
    colimitSMulColimit (colimit.Œπ R c r) m = smulColimit r m := by
  delta colimitSMulColimit
  rw [show m = colimit.Œπ M.presheaf (Concrete.indexRepColimit M.presheaf m) _ by
    erw [Concrete.Œπ_repColimit_eq], smulColimit.smul_rep]
  apply hsmul.respect_Œπ
  ¬∑ erw [Concrete.Œπ_repColimit_eq]
  ¬∑ erw [Concrete.Œπ_repColimit_eq, Concrete.Œπ_repColimit_eq]

protected lemma one_smul (m : colimit (C := AddCommGrp) M.presheaf) :
    colimitSMulColimit (1 : colimit (C := RingCat) R) m = m := by
  let c : C·µí·µñ := (inferInstance : IsFiltered C·µí·µñ).2.some
  rw [show (1 : colimit (C := RingCat) R) = colimit.Œπ R c 1 by
    rw [map_one], rep_smul, smulColimit.one_smul]

protected lemma mul_smul
      (r‚ÇÅ r‚ÇÇ : colimit (C := RingCat) R) (m : colimit (C := AddCommGrp) M.presheaf) :
    colimitSMulColimit (r‚ÇÅ * r‚ÇÇ) m = colimitSMulColimit r‚ÇÅ (colimitSMulColimit r‚ÇÇ m) := by
  classical
  let O : Finset C·µí·µñ :=
    {  Concrete.indexRepColimit R r‚ÇÅ, Concrete.indexRepColimit R r‚ÇÇ }
  let H : Finset ((X : C·µí·µñ) √ó' (Y : C·µí·µñ) √ó' (_ : X ‚àà O) √ó' (_ : Y ‚àà O) √ó' (X ‚ü∂ Y)) := {}
  let j : C·µí·µñ := IsFiltered.sup O H
  have eq‚ÇÅ : r‚ÇÅ = colimit.Œπ R j
      (R.map (IsFiltered.toSup O H $ by simp [O]) (Concrete.repColimit R r‚ÇÅ)) := by
    erw [colimit.w_apply, Concrete.Œπ_repColimit_eq]
  have eq‚ÇÇ : r‚ÇÇ = colimit.Œπ R j
      (R.map (IsFiltered.toSup O H $ by simp [O]) (Concrete.repColimit R r‚ÇÇ)) := by
    erw [colimit.w_apply, Concrete.Œπ_repColimit_eq]
  have eq‚ÇÉ : r‚ÇÅ * r‚ÇÇ = colimit.Œπ R j
      (R.map (IsFiltered.toSup O H $ by simp [O]) (Concrete.repColimit R r‚ÇÅ) *
       R.map (IsFiltered.toSup O H $ by simp [O]) (Concrete.repColimit R r‚ÇÇ)) := by
    rw [map_mul]
    erw [colimit.w_apply, colimit.w_apply, Concrete.Œπ_repColimit_eq, Concrete.Œπ_repColimit_eq]
  rw [eq‚ÇÉ]
  conv_rhs => rw [eq‚ÇÅ]; rhs; rw [eq‚ÇÇ]
  rw [rep_smul, rep_smul, rep_smul, smulColimit.mul_smul]

lemma smul_zero (r : colimit (C := RingCat) R) : colimitSMulColimit (M := M) r 0 = 0 := by
  rw [show r = colimit.Œπ R (Concrete.indexRepColimit R r) _ by
    erw [Concrete.Œπ_repColimit_eq], rep_smul, smulColimit.smul_zero]

lemma smul_add (r : colimit (C := RingCat) R) (m‚ÇÅ m‚ÇÇ : colimit (C := AddCommGrp) M.presheaf) :
    colimitSMulColimit r (m‚ÇÅ + m‚ÇÇ) = colimitSMulColimit r m‚ÇÅ + colimitSMulColimit r m‚ÇÇ := by
  rw [show r = colimit.Œπ R (Concrete.indexRepColimit R r) _ by
    erw [Concrete.Œπ_repColimit_eq], rep_smul, rep_smul, rep_smul, smulColimit.smul_add]

lemma add_smul (r‚ÇÅ r‚ÇÇ : colimit (C := RingCat) R) (m : colimit (C := AddCommGrp) M.presheaf) :
    colimitSMulColimit (r‚ÇÅ + r‚ÇÇ) m = colimitSMulColimit r‚ÇÅ m + colimitSMulColimit r‚ÇÇ m := by
  classical
  let O : Finset C·µí·µñ :=
    {  Concrete.indexRepColimit R r‚ÇÅ, Concrete.indexRepColimit R r‚ÇÇ }
  let H : Finset ((X : C·µí·µñ) √ó' (Y : C·µí·µñ) √ó' (_ : X ‚àà O) √ó' (_ : Y ‚àà O) √ó' (X ‚ü∂ Y)) := {}
  let j : C·µí·µñ := IsFiltered.sup O H
  have eq‚ÇÅ : r‚ÇÅ = colimit.Œπ R j
      (R.map (IsFiltered.toSup O H $ by simp [O]) (Concrete.repColimit R r‚ÇÅ)) := by
    erw [colimit.w_apply, Concrete.Œπ_repColimit_eq]
  have eq‚ÇÇ : r‚ÇÇ = colimit.Œπ R j
      (R.map (IsFiltered.toSup O H $ by simp [O]) (Concrete.repColimit R r‚ÇÇ)) := by
    erw [colimit.w_apply, Concrete.Œπ_repColimit_eq]
  have eq‚ÇÉ : r‚ÇÅ + r‚ÇÇ = colimit.Œπ R j
      (R.map (IsFiltered.toSup O H $ by simp [O]) (Concrete.repColimit R r‚ÇÅ) +
       R.map (IsFiltered.toSup O H $ by simp [O]) (Concrete.repColimit R r‚ÇÇ)) := by
    rw [map_add]
    erw [colimit.w_apply, colimit.w_apply, Concrete.Œπ_repColimit_eq, Concrete.Œπ_repColimit_eq]
  rw [eq‚ÇÉ]
  conv_rhs => rw [eq‚ÇÅ]; rhs; rw [eq‚ÇÇ]
  rw [rep_smul, rep_smul, rep_smul, smulColimit.add_smul]

lemma zero_smul (m : colimit (C := AddCommGrp) M.presheaf) :
    colimitSMulColimit (0 : colimit (C := RingCat) R) m = 0 := by
  let c : C·µí·µñ := (inferInstance : IsFiltered C·µí·µñ).2.some
  rw [show (0 : colimit (C := RingCat) R) = colimit.Œπ R c 0 by rw [map_zero], rep_smul,
    smulColimit.zero_smul]

end colimitSMulColimit

noncomputable instance : Module (colimit (C := RingCat) R) (colimit (C := AddCommGrp) M.presheaf) where
  smul := colimitSMulColimit
  one_smul := colimitSMulColimit.one_smul _ _
  mul_smul := colimitSMulColimit.mul_smul _ _
  smul_zero := colimitSMulColimit.smul_zero _ _
  smul_add := colimitSMulColimit.smul_add _ _
  add_smul := colimitSMulColimit.add_smul _ _
  zero_smul := colimitSMulColimit.zero_smul _ _

end Module.overColimits
