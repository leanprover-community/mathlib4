/-
Copyright (c) 2024 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson, Jack McKoen, Jo√´l Riou
-/
import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic

/-!
# The monoidal category structure on presheaves of modules

Given a presheaf of commutative rings `R : C·µí·µñ ‚•§ CommRingCat`, we construct
the monoidal category structure on the category of presheaves of modules
`PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)`. The tensor product `M‚ÇÅ ‚äó M‚ÇÇ` is defined
as the presheaf of modules which sends `X : C·µí·µñ` to `M‚ÇÅ.obj X ‚äó M‚ÇÇ.obj X`.

## Notes

This contribution was created as part of the AIM workshop
"Formalizing algebraic geometry" in June 2024.

-/

open CategoryTheory MonoidalCategory Category

universe v u v‚ÇÅ u‚ÇÅ

-- when cleaned up, this part should be moved to `ModuleCat.Monoidal.Basic`
namespace ModuleCat

variable {R : Type u} [CommRing R] {M‚ÇÅ M‚ÇÇ M‚ÇÉ M‚ÇÑ : ModuleCat.{u} R}

section

variable (f : M‚ÇÅ ‚Üí M‚ÇÇ ‚Üí M‚ÇÉ) (h‚ÇÅ : ‚àÄ m‚ÇÅ m‚ÇÇ n, f (m‚ÇÅ + m‚ÇÇ) n = f m‚ÇÅ n + f m‚ÇÇ n)
  (h‚ÇÇ : ‚àÄ (a : R) m n, f (a ‚Ä¢ m) n = a ‚Ä¢ f m n)
  (h‚ÇÉ : ‚àÄ m n‚ÇÅ n‚ÇÇ, f m (n‚ÇÅ + n‚ÇÇ) = f m n‚ÇÅ + f m n‚ÇÇ)
  (h‚ÇÑ : ‚àÄ (a : R) m n, f m (a ‚Ä¢ n) = a ‚Ä¢ f m n)

/-- Construct for morphisms from the tensor product of two objects in `ModuleCat`. -/
noncomputable def tensorLift : M‚ÇÅ ‚äó M‚ÇÇ ‚ü∂ M‚ÇÉ :=
  TensorProduct.lift (LinearMap.mk‚ÇÇ R f h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ)

@[simp]
lemma tensorLift_apply (m : M‚ÇÅ) (n : M‚ÇÇ) :
    tensorLift f h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ (m ‚äó‚Çú n) = f m n := rfl

end

lemma tensor_ext {f g : M‚ÇÅ ‚äó M‚ÇÇ ‚ü∂ M‚ÇÉ} (h : ‚àÄ m n, f (m ‚äó‚Çú n) = g (m ‚äó‚Çú n)) :
    f = g :=
  TensorProduct.ext (by ext; apply h)

@[simp]
lemma tensorHom_tmul (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (g : M‚ÇÉ ‚ü∂ M‚ÇÑ) (a : M‚ÇÅ) (b : M‚ÇÉ) :
    (f ‚äó g) (a ‚äó‚Çú b) = f a ‚äó‚Çú g b := rfl

/-- Extensionality lemma for morphisms from a module of the form `(M‚ÇÅ ‚äó M‚ÇÇ) ‚äó M‚ÇÉ`. -/
lemma tensor_ext‚ÇÉ' {f g : (M‚ÇÅ ‚äó M‚ÇÇ) ‚äó M‚ÇÉ ‚ü∂ M‚ÇÑ}
    (h : ‚àÄ m‚ÇÅ m‚ÇÇ m‚ÇÉ, f (m‚ÇÅ ‚äó‚Çú m‚ÇÇ ‚äó‚Çú m‚ÇÉ) = g (m‚ÇÅ ‚äó‚Çú m‚ÇÇ ‚äó‚Çú m‚ÇÉ)) :
    f = g :=
  TensorProduct.ext_threefold h

/-- Extensionality lemma for morphisms from a module of the form `M‚ÇÅ ‚äó (M‚ÇÇ ‚äó M‚ÇÉ)`. -/
lemma tensor_ext‚ÇÉ {f g : M‚ÇÅ ‚äó (M‚ÇÇ ‚äó M‚ÇÉ) ‚ü∂ M‚ÇÑ}
    (h : ‚àÄ m‚ÇÅ m‚ÇÇ m‚ÇÉ, f (m‚ÇÅ ‚äó‚Çú (m‚ÇÇ ‚äó‚Çú m‚ÇÉ)) = g (m‚ÇÅ ‚äó‚Çú (m‚ÇÇ ‚äó‚Çú m‚ÇÉ))) :
    f = g := by
  rw [‚Üê cancel_epi (Œ±_ _ _ _).hom]
  exact tensor_ext‚ÇÉ' h

lemma leftUnitor_hom_apply (a : ùüô_ (ModuleCat R)) (m : M‚ÇÅ) : (Œª_ M‚ÇÅ).hom (a ‚äó‚Çú m) = a ‚Ä¢ m := rfl

lemma leftUnitor_inv_apply (m : M‚ÇÅ) : (Œª_ M‚ÇÅ).inv m = 1 ‚äó‚Çú m := rfl

lemma rightUnitor_hom_apply (a : M‚ÇÅ) (m : ùüô_ (ModuleCat R)) : (œÅ_ M‚ÇÅ).hom (a ‚äó‚Çú m) = m ‚Ä¢ a := rfl

lemma rightUnitor_inv_apply (m : M‚ÇÅ) : (œÅ_ M‚ÇÅ).inv m = m ‚äó‚Çú 1 := rfl

end ModuleCat

variable {C : Type*} [Category C] {R : C·µí·µñ ‚•§ CommRingCat.{u}}

instance (X : C·µí·µñ) : CommRing ((R ‚ãô forget‚ÇÇ _ RingCat).obj X) :=
  inferInstanceAs (CommRing (R.obj X))

namespace PresheafOfModules

namespace Monoidal

variable (M‚ÇÅ M‚ÇÇ M‚ÇÉ M‚ÇÑ : PresheafOfModules.{u} (R ‚ãô forget‚ÇÇ _ _))

/-- Auxiliary definition for `tensorObj`. -/
noncomputable def tensorObjMap {X Y : C·µí·µñ} (f : X ‚ü∂ Y) : M‚ÇÅ.obj X ‚äó M‚ÇÇ.obj X ‚ü∂
    (ModuleCat.restrictScalars (R.map f)).obj (M‚ÇÅ.obj Y ‚äó M‚ÇÇ.obj Y) :=
  ModuleCat.tensorLift (fun m‚ÇÅ m‚ÇÇ ‚Ü¶ M‚ÇÅ.map f m‚ÇÅ ‚äó‚Çú M‚ÇÇ.map f m‚ÇÇ)
    (by intro m‚ÇÅ m‚ÇÅ' m‚ÇÇ; dsimp; rw [map_add, TensorProduct.add_tmul])
    (by intro a m‚ÇÅ m‚ÇÇ; dsimp; erw [M‚ÇÅ.map_smul]; rfl)
    (by intro m‚ÇÅ m‚ÇÇ m‚ÇÇ'; dsimp; rw [map_add, TensorProduct.tmul_add])
    (by intro a m‚ÇÅ m‚ÇÇ; dsimp; erw [M‚ÇÇ.map_smul, TensorProduct.tmul_smul (r := R.map f a)]; rfl)

/-- The tensor product of two presheaves of modules. -/
@[simps obj]
noncomputable def tensorObj : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _) where
  obj X := M‚ÇÅ.obj X ‚äó M‚ÇÇ.obj X
  map {X Y} f := tensorObjMap M‚ÇÅ M‚ÇÇ f
  map_id X := ModuleCat.tensor_ext (by
    intro m‚ÇÅ m‚ÇÇ
    dsimp [tensorObjMap]
    simp only [map_id, Functor.comp_obj, CommRingCat.forgetToRingCat_obj, Functor.comp_map,
      ModuleCat.restrictScalarsId'_inv_app, ModuleCat.restrictScalarsId'App_inv_apply]
    rfl)
  map_comp f g := ModuleCat.tensor_ext (by
    intro m‚ÇÅ m‚ÇÇ
    dsimp [tensorObjMap]
    simp only [map_comp, Functor.comp_obj, CommRingCat.forgetToRingCat_obj, Functor.comp_map,
      ModuleCat.restrictScalarsComp'_inv_app, ModuleCat.coe_comp, Function.comp_apply,
      ModuleCat.restrictScalars.map_apply, ModuleCat.restrictScalarsComp'App_inv_apply]
    rfl)

variable {M‚ÇÅ M‚ÇÇ M‚ÇÉ M‚ÇÑ}

@[simp]
lemma tensorObj_map_tmul {X Y : C·µí·µñ} (f : X ‚ü∂ Y) (m‚ÇÅ : M‚ÇÅ.obj X) (m‚ÇÇ : M‚ÇÇ.obj X) :
    DFunLike.coe (Œ± := (M‚ÇÅ.obj X ‚äó M‚ÇÇ.obj X : _))
      (Œ≤ := fun _ ‚Ü¶ (ModuleCat.restrictScalars
        ((forget‚ÇÇ CommRingCat RingCat).map (R.map f))).obj (M‚ÇÅ.obj Y ‚äó M‚ÇÇ.obj Y))
      ((tensorObj M‚ÇÅ M‚ÇÇ).map f) (m‚ÇÅ ‚äó‚Çú[R.obj X] m‚ÇÇ) = M‚ÇÅ.map f m‚ÇÅ ‚äó‚Çú[R.obj Y] M‚ÇÇ.map f m‚ÇÇ := rfl

/-- The tensor product of two morphisms of presheaves of modules. -/
@[simps]
noncomputable def tensorHom (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (g : M‚ÇÉ ‚ü∂ M‚ÇÑ) : tensorObj M‚ÇÅ M‚ÇÉ ‚ü∂ tensorObj M‚ÇÇ M‚ÇÑ where
  app X := f.app X ‚äó g.app X
  naturality {X Y} œÜ := ModuleCat.tensor_ext (fun m‚ÇÅ m‚ÇÉ ‚Ü¶ by
    dsimp
    rw [tensorObj_map_tmul]
    erw [ModuleCat.tensorHom_tmul, tensorObj_map_tmul, naturality_apply, naturality_apply]
    rfl)

end Monoidal

open Monoidal

noncomputable instance monoidalCategoryStruct :
    MonoidalCategoryStruct (PresheafOfModules.{u} (R ‚ãô forget‚ÇÇ _ _)) where
  tensorObj := tensorObj
  whiskerLeft _ _ _ g := tensorHom (ùüô _) g
  whiskerRight f _ := tensorHom f (ùüô _)
  tensorHom := tensorHom
  tensorUnit := unit _
  associator M‚ÇÅ M‚ÇÇ M‚ÇÉ := isoMk (fun _ ‚Ü¶ Œ±_ _ _ _)
    (fun _ _ _ ‚Ü¶ ModuleCat.tensor_ext‚ÇÉ' (by intros; rfl))
  leftUnitor M := Iso.symm (isoMk (fun _ ‚Ü¶ (Œª_ _).symm) (fun X Y f ‚Ü¶ by
    ext m
    dsimp
    erw [ModuleCat.leftUnitor_inv_apply, ModuleCat.leftUnitor_inv_apply,
      tensorObj_map_tmul, (R.map f).map_one]
    rfl))
  rightUnitor M := Iso.symm (isoMk (fun _ ‚Ü¶ (œÅ_ _).symm) (fun X Y f ‚Ü¶ by
    ext m
    dsimp
    erw [ModuleCat.rightUnitor_inv_apply, ModuleCat.rightUnitor_inv_apply,
      tensorObj_map_tmul, (R.map f).map_one]
    rfl))

noncomputable instance monoidalCategory :
    MonoidalCategory (PresheafOfModules.{u} (R ‚ãô forget‚ÇÇ _ _)) where
  tensorHom_def _ _ := by ext1; apply tensorHom_def
  tensor_id _ _ := by ext1; apply tensor_id
  tensor_comp _ _ _ _ := by ext1; apply tensor_comp
  whiskerLeft_id M‚ÇÅ M‚ÇÇ := by
    ext1 X
    apply MonoidalCategory.whiskerLeft_id (C := ModuleCat (R.obj X))
  id_whiskerRight _ _ := by
    ext1 X
    apply MonoidalCategory.id_whiskerRight (C := ModuleCat (R.obj X))
  associator_naturality _ _ _ := by ext1; apply associator_naturality
  leftUnitor_naturality _ := by ext1; apply leftUnitor_naturality
  rightUnitor_naturality _ := by ext1; apply rightUnitor_naturality
  pentagon _ _ _ _ := by ext1; apply pentagon
  triangle _ _ := by ext1; apply triangle

end PresheafOfModules
