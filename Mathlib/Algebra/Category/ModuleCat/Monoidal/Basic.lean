/-
Copyright (c) 2020 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kevin Buzzard, Kim Morrison, Jakob von Raumer
-/
import Mathlib.Algebra.Category.ModuleCat.Basic
import Mathlib.LinearAlgebra.TensorProduct.Basic
import Mathlib.CategoryTheory.Monoidal.Linear

/-!
# The monoidal category structure on R-modules

Mostly this uses existing machinery in `LinearAlgebra.TensorProduct`.
We just need to provide a few small missing pieces to build the
`MonoidalCategory` instance.
The `SymmetricCategory` instance is in `Algebra.Category.ModuleCat.Monoidal.Symmetric`
to reduce imports.

Note the universe level of the modules must be at least the universe level of the ring,
so that we have a monoidal unit.
For now, we simplify by insisting both universe levels are the same.

We construct the monoidal closed structure on `ModuleCat R` in
`Algebra.Category.ModuleCat.Monoidal.Closed`.

If you're happy using the bundled `ModuleCat R`, it may be possible to mostly
use this as an interface and not need to interact much with the implementation details.
-/


suppress_compilation

universe v w x u

open CategoryTheory

namespace ModuleCat

variable {R : Type u} [CommRing R]

namespace MonoidalCategory

-- The definitions inside this namespace are essentially private.
-- After we build the `MonoidalCategory (Module R)` instance,
-- you should use that API.
open TensorProduct

attribute [local ext] TensorProduct.ext

/-- (implementation) tensor product of R-modules -/
def tensorObj (M N : ModuleCat R) : ModuleCat R :=
  ModuleCat.of R (M ‚äó[R] N)

/-- (implementation) tensor product of morphisms R-modules -/
def tensorHom {M N M' N' : ModuleCat R} (f : M ‚ü∂ N) (g : M' ‚ü∂ N') :
    tensorObj M M' ‚ü∂ tensorObj N N' :=
  ofHom <| TensorProduct.map f.hom g.hom

/-- (implementation) left whiskering for R-modules -/
def whiskerLeft (M : ModuleCat R) {N‚ÇÅ N‚ÇÇ : ModuleCat R} (f : N‚ÇÅ ‚ü∂ N‚ÇÇ) :
    tensorObj M N‚ÇÅ ‚ü∂ tensorObj M N‚ÇÇ :=
  ofHom <| f.hom.lTensor M

/-- (implementation) right whiskering for R-modules -/
def whiskerRight {M‚ÇÅ M‚ÇÇ : ModuleCat R} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (N : ModuleCat R) :
    tensorObj M‚ÇÅ N ‚ü∂ tensorObj M‚ÇÇ N :=
  ofHom <| f.hom.rTensor N

theorem tensor_id (M N : ModuleCat R) : tensorHom (ùüô M) (ùüô N) = ùüô (ModuleCat.of R (M ‚äó N)) := by
  ext : 1
  -- Porting note (https://github.com/leanprover-community/mathlib4/pull/11041): even with high priority `ext` fails to find this.
  apply TensorProduct.ext
  rfl

theorem tensor_comp {X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ : ModuleCat R} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ)
    (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ) : tensorHom (f‚ÇÅ ‚â´ g‚ÇÅ) (f‚ÇÇ ‚â´ g‚ÇÇ) = tensorHom f‚ÇÅ f‚ÇÇ ‚â´ tensorHom g‚ÇÅ g‚ÇÇ := by
  ext : 1
  -- Porting note (https://github.com/leanprover-community/mathlib4/pull/11041): even with high priority `ext` fails to find this.
  apply TensorProduct.ext
  rfl

/-- (implementation) the associator for R-modules -/
def associator (M : ModuleCat.{v} R) (N : ModuleCat.{w} R) (K : ModuleCat.{x} R) :
    tensorObj (tensorObj M N) K ‚âÖ tensorObj M (tensorObj N K) :=
  (TensorProduct.assoc R M N K).toModuleIso

/-- (implementation) the left unitor for R-modules -/
def leftUnitor (M : ModuleCat.{u} R) : ModuleCat.of R (R ‚äó[R] M) ‚âÖ M :=
  (LinearEquiv.toModuleIso (TensorProduct.lid R M) : of R (R ‚äó M) ‚âÖ of R M).trans (ofSelfIso M)

/-- (implementation) the right unitor for R-modules -/
def rightUnitor (M : ModuleCat.{u} R) : ModuleCat.of R (M ‚äó[R] R) ‚âÖ M :=
  (LinearEquiv.toModuleIso (TensorProduct.rid R M) : of R (M ‚äó R) ‚âÖ of R M).trans (ofSelfIso M)

@[simps (config := .lemmasOnly)]
instance instMonoidalCategoryStruct : MonoidalCategoryStruct (ModuleCat.{u} R) where
  tensorObj := tensorObj
  whiskerLeft := whiskerLeft
  whiskerRight := whiskerRight
  tensorHom f g := ofHom <| TensorProduct.map f.hom g.hom
  tensorUnit := ModuleCat.of R R
  associator := associator
  leftUnitor := leftUnitor
  rightUnitor := rightUnitor

theorem associator_naturality {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : ModuleCat R} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ)
    (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :
    tensorHom (tensorHom f‚ÇÅ f‚ÇÇ) f‚ÇÉ ‚â´ (associator Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom =
      (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ tensorHom f‚ÇÅ (tensorHom f‚ÇÇ f‚ÇÉ) := by
  ext : 1
  apply TensorProduct.ext_threefold
  intro x y z
  rfl

theorem pentagon (W X Y Z : ModuleCat R) :
    whiskerRight (associator W X Y).hom Z ‚â´
        (associator W (tensorObj X Y) Z).hom ‚â´ whiskerLeft W (associator X Y Z).hom =
      (associator (tensorObj W X) Y Z).hom ‚â´ (associator W X (tensorObj Y Z)).hom := by
  ext : 1
  apply TensorProduct.ext_fourfold
  intro w x y z
  rfl

theorem leftUnitor_naturality {M N : ModuleCat R} (f : M ‚ü∂ N) :
    tensorHom (ùüô (ModuleCat.of R R)) f ‚â´ (leftUnitor N).hom = (leftUnitor M).hom ‚â´ f := by
  ext : 1
  -- Porting note (https://github.com/leanprover-community/mathlib4/pull/11041): broken ext
  apply TensorProduct.ext
  ext x
  -- Porting note (https://github.com/leanprover-community/mathlib4/pull/10934): used to be dsimp
  change ((leftUnitor N).hom) ((tensorHom (ùüô (of R R)) f) ((1 : R) ‚äó‚Çú[R] x)) =
    f (((leftUnitor M).hom) (1 ‚äó‚Çú[R] x))
  erw [TensorProduct.lid_tmul, TensorProduct.lid_tmul]
  rw [LinearMap.map_smul]
  rfl

theorem rightUnitor_naturality {M N : ModuleCat R} (f : M ‚ü∂ N) :
    tensorHom f (ùüô (ModuleCat.of R R)) ‚â´ (rightUnitor N).hom = (rightUnitor M).hom ‚â´ f := by
  ext : 1
  -- Porting note (https://github.com/leanprover-community/mathlib4/pull/11041): broken ext
  apply TensorProduct.ext
  ext x
  dsimp
  erw [TensorProduct.rid_tmul, TensorProduct.rid_tmul]
  rw [LinearMap.map_smul]
  rfl

theorem triangle (M N : ModuleCat.{u} R) :
    (associator M (ModuleCat.of R R) N).hom ‚â´ tensorHom (ùüô M) (leftUnitor N).hom =
      tensorHom (rightUnitor M).hom (ùüô N) := by
  ext : 1
  apply TensorProduct.ext_threefold
  intro x y z
  -- Porting note (https://github.com/leanprover-community/mathlib4/pull/10934): used to be dsimp [tensorHom, associator]
  change x ‚äó‚Çú[R] ((leftUnitor N).hom) (y ‚äó‚Çú[R] z) = ((rightUnitor M).hom) (x ‚äó‚Çú[R] y) ‚äó‚Çú[R] z
  erw [TensorProduct.lid_tmul, TensorProduct.rid_tmul]
  exact (TensorProduct.smul_tmul _ _ _).symm

end MonoidalCategory

open MonoidalCategory

instance monoidalCategory : MonoidalCategory (ModuleCat.{u} R) := MonoidalCategory.ofTensorHom
  (tensor_id := fun M N ‚Ü¶ tensor_id M N)
  (tensor_comp := fun f g h ‚Ü¶ MonoidalCategory.tensor_comp f g h)
  (associator_naturality := fun f g h ‚Ü¶ MonoidalCategory.associator_naturality f g h)
  (leftUnitor_naturality := fun f ‚Ü¶ MonoidalCategory.leftUnitor_naturality f)
  (rightUnitor_naturality := fun f ‚Ü¶ rightUnitor_naturality f)
  (pentagon := fun M N K L ‚Ü¶ pentagon M N K L)
  (triangle := fun M N ‚Ü¶ triangle M N)

/-- Remind ourselves that the monoidal unit, being just `R`, is still a commutative ring. -/
instance : CommRing ((ùüô_ (ModuleCat.{u} R) : ModuleCat.{u} R) : Type u) :=
  inferInstanceAs <| CommRing R

namespace MonoidalCategory

@[simp]
theorem tensorHom_tmul {K L M N : ModuleCat.{u} R} (f : K ‚ü∂ L) (g : M ‚ü∂ N) (k : K) (m : M) :
    (f ‚äó g) (k ‚äó‚Çú m) = f k ‚äó‚Çú g m :=
  rfl

@[deprecated (since := "2024-09-30")] alias hom_apply := tensorHom_tmul


@[simp]
theorem whiskerLeft_apply (L : ModuleCat.{u} R) {M N : ModuleCat.{u} R} (f : M ‚ü∂ N)
    (l : L) (m : M) :
    (L ‚óÅ f) (l ‚äó‚Çú m) = l ‚äó‚Çú f m :=
  rfl

@[simp]
theorem whiskerRight_apply {L M : ModuleCat.{u} R} (f : L ‚ü∂ M) (N : ModuleCat.{u} R)
    (l : L) (n : N) :
    (f ‚ñ∑ N) (l ‚äó‚Çú n) = f l ‚äó‚Çú n :=
  rfl

@[simp]
theorem leftUnitor_hom_apply {M : ModuleCat.{u} R} (r : R) (m : M) :
    ((Œª_ M).hom : ùüô_ (ModuleCat R) ‚äó M ‚ü∂ M) (r ‚äó‚Çú[R] m) = r ‚Ä¢ m :=
  TensorProduct.lid_tmul m r

@[simp]
theorem leftUnitor_inv_apply {M : ModuleCat.{u} R} (m : M) :
    ((Œª_ M).inv : M ‚ü∂ ùüô_ (ModuleCat.{u} R) ‚äó M) m = 1 ‚äó‚Çú[R] m :=
  TensorProduct.lid_symm_apply m

@[simp]
theorem rightUnitor_hom_apply {M : ModuleCat.{u} R} (m : M) (r : R) :
    ((œÅ_ M).hom : M ‚äó ùüô_ (ModuleCat R) ‚ü∂ M) (m ‚äó‚Çú r) = r ‚Ä¢ m :=
  TensorProduct.rid_tmul m r

@[simp]
theorem rightUnitor_inv_apply {M : ModuleCat.{u} R} (m : M) :
    ((œÅ_ M).inv : M ‚ü∂ M ‚äó ùüô_ (ModuleCat.{u} R)) m = m ‚äó‚Çú[R] 1 :=
  TensorProduct.rid_symm_apply m

@[simp]
theorem associator_hom_apply {M N K : ModuleCat.{u} R} (m : M) (n : N) (k : K) :
    ((Œ±_ M N K).hom : (M ‚äó N) ‚äó K ‚ü∂ M ‚äó N ‚äó K) (m ‚äó‚Çú n ‚äó‚Çú k) = m ‚äó‚Çú (n ‚äó‚Çú k) :=
  rfl

@[simp]
theorem associator_inv_apply {M N K : ModuleCat.{u} R} (m : M) (n : N) (k : K) :
    ((Œ±_ M N K).inv : M ‚äó N ‚äó K ‚ü∂ (M ‚äó N) ‚äó K) (m ‚äó‚Çú (n ‚äó‚Çú k)) = m ‚äó‚Çú n ‚äó‚Çú k :=
  rfl

variable {M‚ÇÅ M‚ÇÇ M‚ÇÉ M‚ÇÑ : ModuleCat.{u} R}

section

variable (f : M‚ÇÅ ‚Üí M‚ÇÇ ‚Üí M‚ÇÉ) (h‚ÇÅ : ‚àÄ m‚ÇÅ m‚ÇÇ n, f (m‚ÇÅ + m‚ÇÇ) n = f m‚ÇÅ n + f m‚ÇÇ n)
  (h‚ÇÇ : ‚àÄ (a : R) m n, f (a ‚Ä¢ m) n = a ‚Ä¢ f m n)
  (h‚ÇÉ : ‚àÄ m n‚ÇÅ n‚ÇÇ, f m (n‚ÇÅ + n‚ÇÇ) = f m n‚ÇÅ + f m n‚ÇÇ)
  (h‚ÇÑ : ‚àÄ (a : R) m n, f m (a ‚Ä¢ n) = a ‚Ä¢ f m n)

/-- Construct for morphisms from the tensor product of two objects in `ModuleCat`. -/
noncomputable def tensorLift : M‚ÇÅ ‚äó M‚ÇÇ ‚ü∂ M‚ÇÉ :=
  ofHom <| TensorProduct.lift (LinearMap.mk‚ÇÇ R f h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ)

@[simp]
lemma tensorLift_tmul (m : M‚ÇÅ) (n : M‚ÇÇ) :
    tensorLift f h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ (m ‚äó‚Çú n) = f m n := rfl

end

lemma tensor_ext {f g : M‚ÇÅ ‚äó M‚ÇÇ ‚ü∂ M‚ÇÉ} (h : ‚àÄ m n, f (m ‚äó‚Çú n) = g (m ‚äó‚Çú n)) :
    f = g :=
  hom_ext <| TensorProduct.ext (by ext; apply h)

/-- Extensionality lemma for morphisms from a module of the form `(M‚ÇÅ ‚äó M‚ÇÇ) ‚äó M‚ÇÉ`. -/
lemma tensor_ext‚ÇÉ' {f g : (M‚ÇÅ ‚äó M‚ÇÇ) ‚äó M‚ÇÉ ‚ü∂ M‚ÇÑ}
    (h : ‚àÄ m‚ÇÅ m‚ÇÇ m‚ÇÉ, f (m‚ÇÅ ‚äó‚Çú m‚ÇÇ ‚äó‚Çú m‚ÇÉ) = g (m‚ÇÅ ‚äó‚Çú m‚ÇÇ ‚äó‚Çú m‚ÇÉ)) :
    f = g :=
  hom_ext <| TensorProduct.ext_threefold h

/-- Extensionality lemma for morphisms from a module of the form `M‚ÇÅ ‚äó (M‚ÇÇ ‚äó M‚ÇÉ)`. -/
lemma tensor_ext‚ÇÉ {f g : M‚ÇÅ ‚äó (M‚ÇÇ ‚äó M‚ÇÉ) ‚ü∂ M‚ÇÑ}
    (h : ‚àÄ m‚ÇÅ m‚ÇÇ m‚ÇÉ, f (m‚ÇÅ ‚äó‚Çú (m‚ÇÇ ‚äó‚Çú m‚ÇÉ)) = g (m‚ÇÅ ‚äó‚Çú (m‚ÇÇ ‚äó‚Çú m‚ÇÉ))) :
    f = g := by
  rw [‚Üê cancel_epi (Œ±_ _ _ _).hom]
  exact tensor_ext‚ÇÉ' h

end MonoidalCategory

open Opposite

instance : MonoidalPreadditive (ModuleCat.{u} R) := by
  refine ‚ü®?_, ?_, ?_, ?_‚ü©
  ¬∑ intros
    ext : 1
    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply, hom_zero, LinearMap.zero_apply]
    -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644
    erw [MonoidalCategory.whiskerLeft_apply]
    simp
  ¬∑ intros
    ext : 1
    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply, hom_zero, LinearMap.zero_apply, ]
    -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644
    erw [MonoidalCategory.whiskerRight_apply]
    simp
  ¬∑ intros
    ext : 1
    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply, hom_add, LinearMap.add_apply]
    -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644
    erw [MonoidalCategory.whiskerLeft_apply, MonoidalCategory.whiskerLeft_apply]
    erw [MonoidalCategory.whiskerLeft_apply]
    simp [TensorProduct.tmul_add]
  ¬∑ intros
    ext : 1
    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply, hom_add, LinearMap.add_apply]
    -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644
    erw [MonoidalCategory.whiskerRight_apply, MonoidalCategory.whiskerRight_apply]
    erw [MonoidalCategory.whiskerRight_apply]
    simp [TensorProduct.add_tmul]

instance : MonoidalLinear R (ModuleCat.{u} R) := by
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intros
    ext : 1
    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply, hom_smul, LinearMap.smul_apply]
    -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644
    erw [MonoidalCategory.whiskerLeft_apply, MonoidalCategory.whiskerLeft_apply]
    simp
  ¬∑ intros
    ext : 1
    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply, hom_smul, LinearMap.smul_apply]
    -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644
    erw [MonoidalCategory.whiskerRight_apply, MonoidalCategory.whiskerRight_apply]
    simp [TensorProduct.smul_tmul, TensorProduct.tmul_smul]

@[simp] lemma ofHom‚ÇÇ_compr‚ÇÇ {M N P Q : ModuleCat.{u} R} (f : M ‚Üí‚Çó[R] N ‚Üí‚Çó[R] P) (g : P ‚Üí‚Çó[R] Q):
    ofHom‚ÇÇ (f.compr‚ÇÇ g) = ofHom‚ÇÇ f ‚â´ ofHom (Linear.rightComp R _ (ofHom g)) := rfl

end ModuleCat
