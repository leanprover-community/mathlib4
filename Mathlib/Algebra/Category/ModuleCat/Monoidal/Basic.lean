/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kevin Buzzard, Scott Morrison, Jakob von Raumer
-/
import Mathlib.Algebra.Category.ModuleCat.Basic
import Mathlib.LinearAlgebra.TensorProduct
import Mathlib.CategoryTheory.Linear.Yoneda
import Mathlib.CategoryTheory.Monoidal.Linear

#align_import algebra.category.Module.monoidal.basic from "leanprover-community/mathlib"@"74403a3b2551b0970855e14ef5e8fd0d6af1bfc2"

/-!
# The monoidal category structure on R-modules

Mostly this uses existing machinery in `LinearAlgebra.TensorProduct`.
We just need to provide a few small missing pieces to build the
`MonoidalCategory` instance.
The `SymmetricCategory` instance is in `Algebra.Category.ModuleCat.Monoidal.Symmetric`
to reduce imports.

Note the universe level of the modules must be at least the universe level of the ring,
so that we have a monoidal unit.
For now, we simplify by insisting both universe levels are the same.

We construct the monoidal closed structure on `Module R` in
`Algebra.Category.ModuleCat.Monoidal.Closed`.

If you're happy using the bundled `Module R`, it may be possible to mostly
use this as an interface and not need to interact much with the implementation details.
-/

-- Porting note: Module
set_option linter.uppercaseLean3 false

suppress_compilation

universe v w x u

open CategoryTheory

namespace ModuleCat

variable {R : Type u} [CommRing R]

namespace MonoidalCategory

-- The definitions inside this namespace are essentially private.
-- After we build the `MonoidalCategory (Module R)` instance,
-- you should use that API.
open TensorProduct

attribute [local ext] TensorProduct.ext

/-- (implementation) tensor product of R-modules -/
def tensorObj (M N : ModuleCat R) : ModuleCat R :=
  ModuleCat.of R (M ‚äó[R] N)
#align Module.monoidal_category.tensor_obj ModuleCat.MonoidalCategory.tensorObj

/-- (implementation) tensor product of morphisms R-modules -/
def tensorHom {M N M' N' : ModuleCat R} (f : M ‚ü∂ N) (g : M' ‚ü∂ N') :
    tensorObj M M' ‚ü∂ tensorObj N N' :=
  TensorProduct.map f g
#align Module.monoidal_category.tensor_hom ModuleCat.MonoidalCategory.tensorHom

/-- (implementation) left whiskering for R-modules -/
def whiskerLeft (M : ModuleCat R) {N‚ÇÅ N‚ÇÇ : ModuleCat R} (f : N‚ÇÅ ‚ü∂ N‚ÇÇ) :
    tensorObj M N‚ÇÅ ‚ü∂ tensorObj M N‚ÇÇ :=
  f.lTensor M

/-- (implementation) right whiskering for R-modules -/
def whiskerRight {M‚ÇÅ M‚ÇÇ : ModuleCat R} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (N : ModuleCat R) :
    tensorObj M‚ÇÅ N ‚ü∂ tensorObj M‚ÇÇ N :=
  f.rTensor N

theorem tensor_id (M N : ModuleCat R) : tensorHom (ùüô M) (ùüô N) = ùüô (ModuleCat.of R (M ‚äó N)) := by
  -- Porting note: even with high priority ext fails to find this
  apply TensorProduct.ext
  rfl
#align Module.monoidal_category.tensor_id ModuleCat.MonoidalCategory.tensor_id

theorem tensor_comp {X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ : ModuleCat R} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ)
    (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ) : tensorHom (f‚ÇÅ ‚â´ g‚ÇÅ) (f‚ÇÇ ‚â´ g‚ÇÇ) = tensorHom f‚ÇÅ f‚ÇÇ ‚â´ tensorHom g‚ÇÅ g‚ÇÇ := by
  -- Porting note: even with high priority ext fails to find this
  apply TensorProduct.ext
  rfl
#align Module.monoidal_category.tensor_comp ModuleCat.MonoidalCategory.tensor_comp

/-- (implementation) the associator for R-modules -/
def associator (M : ModuleCat.{v} R) (N : ModuleCat.{w} R) (K : ModuleCat.{x} R) :
    tensorObj (tensorObj M N) K ‚âÖ tensorObj M (tensorObj N K) :=
  (TensorProduct.assoc R M N K).toModuleIso
#align Module.monoidal_category.associator ModuleCat.MonoidalCategory.associator

/-- (implementation) the left unitor for R-modules -/
def leftUnitor (M : ModuleCat.{u} R) : ModuleCat.of R (R ‚äó[R] M) ‚âÖ M :=
  (LinearEquiv.toModuleIso (TensorProduct.lid R M) : of R (R ‚äó M) ‚âÖ of R M).trans (ofSelfIso M)
#align Module.monoidal_category.left_unitor ModuleCat.MonoidalCategory.leftUnitor

/-- (implementation) the right unitor for R-modules -/
def rightUnitor (M : ModuleCat.{u} R) : ModuleCat.of R (M ‚äó[R] R) ‚âÖ M :=
  (LinearEquiv.toModuleIso (TensorProduct.rid R M) : of R (M ‚äó R) ‚âÖ of R M).trans (ofSelfIso M)
#align Module.monoidal_category.right_unitor ModuleCat.MonoidalCategory.rightUnitor

instance : MonoidalCategoryStruct (ModuleCat.{u} R) where
  tensorObj := tensorObj
  whiskerLeft := whiskerLeft
  whiskerRight := whiskerRight
  tensorHom f g := TensorProduct.map f g
  tensorUnit := ModuleCat.of R R
  associator := associator
  leftUnitor := leftUnitor
  rightUnitor := rightUnitor

section

/-! The `associator_naturality` and `pentagon` lemmas below are very slow to elaborate.

We give them some help by expressing the lemmas first non-categorically, then using
`convert _aux using 1` to have the elaborator work as little as possible. -/


open TensorProduct (assoc map)

private theorem associator_naturality_aux {X‚ÇÅ X‚ÇÇ X‚ÇÉ : Type*} [AddCommMonoid X‚ÇÅ] [AddCommMonoid X‚ÇÇ]
    [AddCommMonoid X‚ÇÉ] [Module R X‚ÇÅ] [Module R X‚ÇÇ] [Module R X‚ÇÉ] {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Type*}
    [AddCommMonoid Y‚ÇÅ] [AddCommMonoid Y‚ÇÇ] [AddCommMonoid Y‚ÇÉ] [Module R Y‚ÇÅ] [Module R Y‚ÇÇ]
    [Module R Y‚ÇÉ] (f‚ÇÅ : X‚ÇÅ ‚Üí‚Çó[R] Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚Üí‚Çó[R] Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚Üí‚Çó[R] Y‚ÇÉ) :
    ‚Üë(assoc R Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ) ‚àò‚Çó map (map f‚ÇÅ f‚ÇÇ) f‚ÇÉ = map f‚ÇÅ (map f‚ÇÇ f‚ÇÉ) ‚àò‚Çó ‚Üë(assoc R X‚ÇÅ X‚ÇÇ X‚ÇÉ) := by
  apply TensorProduct.ext_threefold
  intro x y z
  rfl
-- Porting note: private so hopeful never used outside this file
-- #align Module.monoidal_category.associator_naturality_aux ModuleCat.MonoidalCategory.associator_naturality_aux

variable (R)

private theorem pentagon_aux (W X Y Z : Type*) [AddCommMonoid W] [AddCommMonoid X]
    [AddCommMonoid Y] [AddCommMonoid Z] [Module R W] [Module R X] [Module R Y] [Module R Z] :
    ((map (1 : W ‚Üí‚Çó[R] W) (assoc R X Y Z).toLinearMap).comp
            (assoc R W (X ‚äó[R] Y) Z).toLinearMap).comp
        (map ‚Üë(assoc R W X Y) (1 : Z ‚Üí‚Çó[R] Z)) =
      (assoc R W X (Y ‚äó[R] Z)).toLinearMap.comp (assoc R (W ‚äó[R] X) Y Z).toLinearMap := by
  apply TensorProduct.ext_fourfold
  intro w x y z
  rfl
-- Porting note: private so hopeful never used outside this file
-- #align Module.monoidal_category.pentagon_aux Module.monoidal_category.pentagon_aux

end

theorem associator_naturality {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : ModuleCat R} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ)
    (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :
    tensorHom (tensorHom f‚ÇÅ f‚ÇÇ) f‚ÇÉ ‚â´ (associator Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom =
      (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ tensorHom f‚ÇÅ (tensorHom f‚ÇÇ f‚ÇÉ) :=
  by convert associator_naturality_aux f‚ÇÅ f‚ÇÇ f‚ÇÉ using 1
#align Module.monoidal_category.associator_naturality ModuleCat.MonoidalCategory.associator_naturality

theorem pentagon (W X Y Z : ModuleCat R) :
    tensorHom (associator W X Y).hom (ùüô Z) ‚â´
        (associator W (tensorObj X Y) Z).hom ‚â´ tensorHom (ùüô W) (associator X Y Z).hom =
      (associator (tensorObj W X) Y Z).hom ‚â´ (associator W X (tensorObj Y Z)).hom := by
  convert pentagon_aux R W X Y Z using 1
#align Module.monoidal_category.pentagon ModuleCat.MonoidalCategory.pentagon

theorem leftUnitor_naturality {M N : ModuleCat R} (f : M ‚ü∂ N) :
    tensorHom (ùüô (ModuleCat.of R R)) f ‚â´ (leftUnitor N).hom = (leftUnitor M).hom ‚â´ f := by
  -- Porting note: broken ext
  apply TensorProduct.ext
  apply LinearMap.ext_ring
  apply LinearMap.ext; intro x
  -- Porting note: used to be dsimp
  change ((leftUnitor N).hom) ((tensorHom (ùüô (of R R)) f) ((1 : R) ‚äó‚Çú[R] x)) =
    f (((leftUnitor M).hom) (1 ‚äó‚Çú[R] x))
  erw [TensorProduct.lid_tmul, TensorProduct.lid_tmul]
  rw [LinearMap.map_smul]
  rfl
#align Module.monoidal_category.left_unitor_naturality ModuleCat.MonoidalCategory.leftUnitor_naturality

theorem rightUnitor_naturality {M N : ModuleCat R} (f : M ‚ü∂ N) :
    tensorHom f (ùüô (ModuleCat.of R R)) ‚â´ (rightUnitor N).hom = (rightUnitor M).hom ‚â´ f := by
  -- Porting note: broken ext
  apply TensorProduct.ext
  apply LinearMap.ext; intro x
  apply LinearMap.ext_ring
  -- Porting note: used to be dsimp
  change ((rightUnitor N).hom) ((tensorHom f (ùüô (of R R))) (x ‚äó‚Çú[R] (1 : R))) =
    f (((rightUnitor M).hom) (x ‚äó‚Çú[R] 1))
  erw [TensorProduct.rid_tmul, TensorProduct.rid_tmul]
  rw [LinearMap.map_smul]
  rfl
#align Module.monoidal_category.right_unitor_naturality ModuleCat.MonoidalCategory.rightUnitor_naturality

theorem triangle (M N : ModuleCat.{u} R) :
    (associator M (ModuleCat.of R R) N).hom ‚â´ tensorHom (ùüô M) (leftUnitor N).hom =
      tensorHom (rightUnitor M).hom (ùüô N) := by
  apply TensorProduct.ext_threefold
  intro x y z
  change R at y
  -- Porting note: used to be dsimp [tensorHom, associator]
  change x ‚äó‚Çú[R] ((leftUnitor N).hom) (y ‚äó‚Çú[R] z) = ((rightUnitor M).hom) (x ‚äó‚Çú[R] y) ‚äó‚Çú[R] z
  erw [TensorProduct.lid_tmul, TensorProduct.rid_tmul]
  exact (TensorProduct.smul_tmul _ _ _).symm
#align Module.monoidal_category.triangle ModuleCat.MonoidalCategory.triangle

end MonoidalCategory

open MonoidalCategory

set_option maxHeartbeats 400000 in
instance monoidalCategory : MonoidalCategory (ModuleCat.{u} R) := MonoidalCategory.ofTensorHom
  (tensor_id := fun M N ‚Ü¶ tensor_id M N)
  (tensor_comp := fun f g h ‚Ü¶ MonoidalCategory.tensor_comp f g h)
  (associator_naturality := fun f g h ‚Ü¶ MonoidalCategory.associator_naturality f g h)
  (leftUnitor_naturality := fun f ‚Ü¶ MonoidalCategory.leftUnitor_naturality f)
  (rightUnitor_naturality := fun f ‚Ü¶ rightUnitor_naturality f)
  (pentagon := fun M N K L ‚Ü¶ pentagon M N K L)
  (triangle := fun M N ‚Ü¶ triangle M N)
#align Module.monoidal_category ModuleCat.monoidalCategory

/-- Remind ourselves that the monoidal unit, being just `R`, is still a commutative ring. -/
instance : CommRing ((ùüô_ (ModuleCat.{u} R) : ModuleCat.{u} R) : Type u) :=
  inferInstanceAs <| CommRing R

namespace MonoidalCategory

@[simp]
theorem hom_apply {K L M N : ModuleCat.{u} R} (f : K ‚ü∂ L) (g : M ‚ü∂ N) (k : K) (m : M) :
    (f ‚äó g) (k ‚äó‚Çú m) = f k ‚äó‚Çú g m :=
  rfl
#align Module.monoidal_category.hom_apply ModuleCat.MonoidalCategory.hom_apply

@[simp]
theorem whiskerLeft_apply (L : ModuleCat.{u} R) {M N : ModuleCat.{u} R} (f : M ‚ü∂ N)
    (l : L) (m : M) :
      (L ‚óÅ f) (l ‚äó‚Çú m) = l ‚äó‚Çú f m :=
  rfl

@[simp]
theorem whiskerRight_apply {L M : ModuleCat.{u} R} (f : L ‚ü∂ M) (N : ModuleCat.{u} R)
    (l : L) (n : N) :
      (f ‚ñ∑ N) (l ‚äó‚Çú n) = f l ‚äó‚Çú n :=
  rfl

@[simp]
theorem leftUnitor_hom_apply {M : ModuleCat.{u} R} (r : R) (m : M) :
    ((Œª_ M).hom : ùüô_ (ModuleCat R) ‚äó M ‚ü∂ M) (r ‚äó‚Çú[R] m) = r ‚Ä¢ m :=
  TensorProduct.lid_tmul m r
#align Module.monoidal_category.left_unitor_hom_apply ModuleCat.MonoidalCategory.leftUnitor_hom_apply

@[simp]
theorem leftUnitor_inv_apply {M : ModuleCat.{u} R} (m : M) :
    ((Œª_ M).inv : M ‚ü∂ ùüô_ (ModuleCat.{u} R) ‚äó M) m = 1 ‚äó‚Çú[R] m :=
  TensorProduct.lid_symm_apply m
#align Module.monoidal_category.left_unitor_inv_apply ModuleCat.MonoidalCategory.leftUnitor_inv_apply

@[simp]
theorem rightUnitor_hom_apply {M : ModuleCat.{u} R} (m : M) (r : R) :
    ((œÅ_ M).hom : M ‚äó ùüô_ (ModuleCat R) ‚ü∂ M) (m ‚äó‚Çú r) = r ‚Ä¢ m :=
  TensorProduct.rid_tmul m r
#align Module.monoidal_category.right_unitor_hom_apply ModuleCat.MonoidalCategory.rightUnitor_hom_apply

@[simp]
theorem rightUnitor_inv_apply {M : ModuleCat.{u} R} (m : M) :
    ((œÅ_ M).inv : M ‚ü∂ M ‚äó ùüô_ (ModuleCat.{u} R)) m = m ‚äó‚Çú[R] 1 :=
  TensorProduct.rid_symm_apply m
#align Module.monoidal_category.right_unitor_inv_apply ModuleCat.MonoidalCategory.rightUnitor_inv_apply

@[simp]
theorem associator_hom_apply {M N K : ModuleCat.{u} R} (m : M) (n : N) (k : K) :
    ((Œ±_ M N K).hom : (M ‚äó N) ‚äó K ‚ü∂ M ‚äó N ‚äó K) (m ‚äó‚Çú n ‚äó‚Çú k) = m ‚äó‚Çú (n ‚äó‚Çú k) :=
  rfl
#align Module.monoidal_category.associator_hom_apply ModuleCat.MonoidalCategory.associator_hom_apply

@[simp]
theorem associator_inv_apply {M N K : ModuleCat.{u} R} (m : M) (n : N) (k : K) :
    ((Œ±_ M N K).inv : M ‚äó N ‚äó K ‚ü∂ (M ‚äó N) ‚äó K) (m ‚äó‚Çú (n ‚äó‚Çú k)) = m ‚äó‚Çú n ‚äó‚Çú k :=
  rfl
#align Module.monoidal_category.associator_inv_apply ModuleCat.MonoidalCategory.associator_inv_apply

end MonoidalCategory

open Opposite

-- Porting note: simp wasn't firing but rw was, annoying
instance : MonoidalPreadditive (ModuleCat.{u} R) := by
  refine' ‚ü®_, _, _, _‚ü©
  ¬∑ dsimp only [autoParam]; intros
    refine' TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => _)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply]
    rw [LinearMap.zero_apply]
    -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
    erw [MonoidalCategory.hom_apply]
    rw [LinearMap.zero_apply, TensorProduct.tmul_zero]
  ¬∑ dsimp only [autoParam]; intros
    refine' TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => _)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply]
    rw [LinearMap.zero_apply]
    -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
    erw [MonoidalCategory.hom_apply]
    rw [LinearMap.zero_apply, TensorProduct.zero_tmul]
  ¬∑ dsimp only [autoParam]; intros
    refine' TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => _)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply]
    rw [LinearMap.add_apply]
    -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
    erw [MonoidalCategory.hom_apply, MonoidalCategory.hom_apply]
    erw [MonoidalCategory.hom_apply]
    rw [LinearMap.add_apply, TensorProduct.tmul_add]
  ¬∑ dsimp only [autoParam]; intros
    refine' TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => _)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply]
    rw [LinearMap.add_apply]
    -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
    erw [MonoidalCategory.hom_apply, MonoidalCategory.hom_apply]
    erw [MonoidalCategory.hom_apply]
    rw [LinearMap.add_apply, TensorProduct.add_tmul]

-- Porting note: simp wasn't firing but rw was, annoying
instance : MonoidalLinear R (ModuleCat.{u} R) := by
  refine' ‚ü®_, _‚ü©
  ¬∑ dsimp only [autoParam]; intros
    refine' TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => _)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply]
    rw [LinearMap.smul_apply]
    -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
    erw [MonoidalCategory.hom_apply, MonoidalCategory.hom_apply]
    rw [LinearMap.smul_apply, TensorProduct.tmul_smul]
  ¬∑ dsimp only [autoParam]; intros
    refine' TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => _)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply]
    rw [LinearMap.smul_apply]
    -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
    erw [MonoidalCategory.hom_apply, MonoidalCategory.hom_apply]
    rw [LinearMap.smul_apply, TensorProduct.smul_tmul, TensorProduct.tmul_smul]

end ModuleCat
