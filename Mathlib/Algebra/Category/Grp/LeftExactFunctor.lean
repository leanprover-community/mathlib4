/-
Copyright (c) 2025 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/
import Mathlib.CategoryTheory.Limits.ExactFunctor
import Mathlib.CategoryTheory.Preadditive.Basic
import Mathlib.CategoryTheory.Limits.Shapes.Biproducts
import Mathlib.Algebra.Category.Grp.Limits
import Mathlib.CategoryTheory.Limits.Shapes.Types
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.BinaryProducts

/-!
# The functor `(C ‚•§‚Çó AddCommGroup) ‚•§ (C ‚•§‚Çó Type v)` is an equivalence
-/

open CategoryTheory Limits

universe v v' u u'

section

variable {C : Type u} [Category.{v} C] [HasFiniteProducts C]

structure AbelianGroupObject (X : C) where
  m : X ‚®Ø X ‚ü∂ X
  e : ‚ä§_ C ‚ü∂ X
  inv : X ‚ü∂ X
  assoc : (prod.associator X X X).hom ‚â´ prod.map (ùüô X) m ‚â´ m = prod.map m (ùüô X) ‚â´ m
  comm : (prod.braiding X X).hom ‚â´ m = m
  left_id : prod.lift (terminal.from X ‚â´ e) (ùüô X) ‚â´ m = ùüô X
  right_id : prod.lift (ùüô X) (terminal.from X ‚â´ e) ‚â´ m = ùüô X
  left_inv : prod.lift inv (ùüô X) ‚â´ m = terminal.from _ ‚â´ e
  right_inv : prod.lift (ùüô X) inv ‚â´ m = terminal.from _ ‚â´ e

  -- -- assoc : m ‚â´ m = (prod.fst ‚â´ m) ‚â´ m ‚â´ m
  -- comm : m = m ‚â´ (prod.snd ‚â´ prod.fst)
  -- left_id : (e ‚â´ prod.fst) ‚â´ m = prod.snd
  -- right_id : (prod.fst ‚â´ e) ‚â´ m = prod.fst
  -- left_inv : (inv ‚â´ prod.fst) ‚â´ m = e
  -- right_inv : (prod.fst ‚â´ inv) ‚â´ m = e

-- structure InternalAddCommGrp (X : C) where
--   presheaf : C·µí·µñ ‚•§ AddCommGrp.{v}
--   iso : presheaf ‚ãô forget _ ‚âÖ yoneda.obj X

-- def add {X : Type v} (G : InternalAddCommGrp X) : X √ó X ‚Üí X :=
--   fun x y => _

-- variable {D : Type u} [Category.{v} D] (F : C ‚•§ D) [PreservesFiniteLimits F]

-- def InternalAddCommGrp.map {X : C} (G : InternalAddCommGrp X) : InternalAddCommGrp (F.obj X) where
--   presheaf := sorry
--   iso := sorry

end

section

variable {C : Type u} [Category.{v} C] [Preadditive C] [HasFiniteBiproducts C]

attribute [local instance] hasBinaryBiproducts_of_finite_biproducts

noncomputable def Preadditive.abelianGroupObject (X : C) : AbelianGroupObject X where
  m := prod.fst + prod.snd
  e := IsZero.to_ (IsZero.of_mono_zero (‚ä§_ C) X) _
  inv := -ùüô X
  assoc := by
    rw [‚Üê cancel_epi (biprod.isoProd _ _).hom]
    simp [add_assoc]
  comm := by
    rw [‚Üê cancel_epi (biprod.isoProd _ _).hom]
    simp [add_comm]
  left_id := by simp [IsZero.to_eq _ 0]
  right_id := by simp [IsZero.to_eq _ 0]
  left_inv := by simp [IsZero.to_eq _ 0]
  right_inv := by simp [IsZero.to_eq _ 0]

end

section

variable {C : Type u} [Category.{v} C] [HasFiniteProducts C]
variable {D : Type u'} [Category.{v'} D] [HasFiniteProducts D]
variable (F : C ‚•§ D) [PreservesFiniteProducts F]

noncomputable def Functor.mapAbelianGroupObject {X : C} (G : AbelianGroupObject X) :
    AbelianGroupObject (F.obj X) where
  m := (PreservesLimitPair.iso F X X).inv ‚â´ F.map G.m
  e := (PreservesTerminal.iso F).inv ‚â´ F.map G.e
  inv := sorry
  assoc := sorry
  comm := sorry
  left_id := sorry
  right_id := sorry
  left_inv := sorry
  right_inv := sorry

end

namespace AbelianGroupObject.Types

section

noncomputable def add {X : Type v} (G : AbelianGroupObject X) : Add X where
  add x y := G.m ((Types.binaryProductIso _ _).inv (x, y))

noncomputable def neg {X : Type v} (G : AbelianGroupObject X) : Neg X where
  neg x := G.inv x

noncomputable def zero {X : Type v} (G : AbelianGroupObject X) : Zero X where
  zero := G.e default

protected theorem add_comm {X : Type v} (G : AbelianGroupObject X) (x y : X) :
    letI : Add X := add G
    x + y = y + x := by
  dsimp only [(¬∑ + ¬∑)]
  rw [Add.add, add]
  simp only
  conv_lhs => rw [‚Üê G.comm]
  simp
  apply congr_arg G.m
  apply (Types.binaryProductIso _ _).toEquiv.injective
  ext
  ¬∑ simp [elementwise_of% (prod.lift_fst (prod.snd : X ‚®Ø X ‚ü∂ X) prod.fst)]
  ¬∑ simp [elementwise_of% (prod.lift_snd (prod.snd : X ‚®Ø X ‚ü∂ X) prod.fst)]

end

end AbelianGroupObject.Types

section

variable {C : Type u} [Category.{v} C] [Preadditive C] [HasFiniteBiproducts C]

variable (F : C ‚•§ Type v) [PreservesFiniteLimits F]

section

variable (X : C)

attribute [local instance] hasBinaryBiproducts_of_finite_biproducts

#check F.map <| Limits.biprod.desc (ùüô X) (ùüô X)

def addCommGroup : AddCommGroup (F.obj X) := sorry

end

def lift (F : C ‚•§ Type v) : C ‚•§ AddCommGrp.{v} := sorry

def liftCompForget (F : C ‚•§ Type v) : lift F ‚ãô forget _ ‚âÖ F := sorry

instance : PreservesFiniteLimits (lift F) := sorry

def liftIso :
    ((LeftExactFunctor.whiskeringRight _ _ _).obj (LeftExactFunctor.of (forget AddCommGrp))).obj
      (LeftExactFunctor.of (lift F)) ‚âÖ LeftExactFunctor.of F :=
  InducedCategory.isoMk (liftCompForget F)

end

section

variable {C : Type u} [Category.{v} C] [Preadditive C] [HasFiniteBiproducts C]

section

variable (F : C ‚•§ AddCommGrp.{v}) [PreservesFiniteLimits F] (X : C)

def q : F.obj X ‚âÖ @AddCommGrp.of ((F ‚ãô forget _).obj X) (addCommGroup (F ‚ãô forget _) X) := sorry

end

instance : Functor.IsEquivalence <|
    (LeftExactFunctor.whiskeringRight C _ _).obj ‚ü®forget AddCommGrp.{v}, inferInstance‚ü© where
  full := sorry
  faithful := sorry
  essSurj := ‚ü®(‚ü®_, ‚ü®liftIso ¬∑.1‚ü©‚ü©)‚ü©

end
