/-
Copyright (c) 2025 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.Algebra.BigOperators.Group.Finset.Disjoint
import Mathlib.Algebra.Module.ZLattice.Basic
import Mathlib.Analysis.PSeries

/-!
# Convergence of `p`-series on lattices

Let `E` be a finite dimensional normed `‚Ñù`-space, and `L` a discrete subgroup of `E` of rank `d`.
We show that `‚àë z ‚àà L, ‚Äñz - x‚Äñ ≥` is convergent for `r < -d`.

## Main results
- `ZLattice.summable_norm_rpow`: `‚àë z ‚àà L, ‚Äñz‚Äñ ≥` converges when `r < -d`.
- `ZLattice.summable_norm_sub_rpow`: `‚àë z ‚àà L, ‚Äñz - x‚Äñ ≥` converges when `r < -d`.
- `ZLattice.tsum_norm_rpow_le`:
  `‚àë z ‚àà L, ‚Äñz‚Äñ ≥ ‚â§ A ≥ * ‚àë k : ‚Ñï, k·µà‚Å∫ ≥‚Åª¬π` for some `A > 0` depending only on `L`.

-/

noncomputable section

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [FiniteDimensional ‚Ñù E] {L : Submodule ‚Ñ§ E} [DiscreteTopology L]
variable {Œπ : Type*} (b : Basis Œπ ‚Ñ§ L)

lemma ZLattice.exists_forall_abs_repr_le_norm :
    ‚àÉ (Œµ : ‚Ñù), 0 < Œµ ‚àß ‚àÄ (x : L), ‚àÄ i, Œµ * |b.repr x i| ‚â§ ‚Äñx‚Äñ := by
  wlog H : IsZLattice ‚Ñù L
  ¬∑ let E' := Submodule.span ‚Ñù (L : Set E)
    let L' : Submodule ‚Ñ§ E' := ZLattice.comap ‚Ñù L E'.subtype
    have inst : DiscreteTopology L' :=
      ZLattice.comap_discreteTopology _ _ (by fun_prop) Subtype.val_injective
    let e : L' ‚âÉ‚Çó[‚Ñ§] L := Submodule.comapSubtypeEquivOfLe (p := L) (q := E'.restrictScalars ‚Ñ§)
      Submodule.subset_span
    have inst : IsZLattice ‚Ñù L' := by
      refine ‚ü®Submodule.map_injective_of_injective (f := E'.subtype) Subtype.val_injective ?_‚ü©
      simp [Submodule.map_span, E', L', Set.image_preimage_eq_inter_range,
        Set.inter_eq_left.mpr Submodule.subset_span]
    obtain ‚ü®Œµ, hŒµ, H‚ü© := this (b.map e.symm) inst
    exact ‚ü®Œµ, hŒµ, fun x i ‚Ü¶ by simpa using H ‚ü®‚ü®x.1, Submodule.subset_span x.2‚ü©, x.2‚ü© i‚ü©
  have : Finite Œπ := Module.Finite.finite_basis b
  let b' : Basis Œπ ‚Ñù E := Basis.ofZLatticeBasis ‚Ñù L b
  let e := ((b'.repr ‚â™‚â´‚Çó Finsupp.linearEquivFunOnFinite _ _ _).toContinuousLinearEquiv (ùïú := ‚Ñù))
  have := e.continuous.1 (Set.univ.pi fun _ ‚Ü¶ Set.Ioo (-1) 1)
    (isOpen_set_pi Set.finite_univ fun _ _ ‚Ü¶ isOpen_Ioo)
  obtain ‚ü®Œµ, hŒµ, hŒµ'‚ü© := Metric.isOpen_iff.mp this 0 (by simp)
  refine ‚ü®Œµ / 2, by positivity, fun x i ‚Ü¶ ?_‚ü©
  by_cases hx : x = 0
  ¬∑ simp [hx]
  have hx : ‚Äñx.1‚Äñ ‚â† 0 := by simpa
  have : |Œµ / 2 * (‚Äñ‚Üëx‚Äñ‚Åª¬π * (b.repr x) i)| < 1 := by
    simpa [e, b', ‚Üê abs_lt] using @hŒµ' ((Œµ / 2) ‚Ä¢ ‚Äñx‚Äñ‚Åª¬π ‚Ä¢ x)
      (by simpa [norm_smul, inv_mul_cancel‚ÇÄ hx, abs_eq_self.mpr hŒµ.le]) i trivial
  rw [abs_mul, abs_mul, abs_inv, mul_left_comm, abs_norm, inv_mul_lt_iff‚ÇÄ (by positivity),
    mul_one, abs_eq_self.mpr (by positivity), ‚Üê Int.cast_abs] at this
  exact this.le

/--
Given a basis of a (possibly not full rank) `‚Ñ§`-lattice, there exists a `Œµ > 0` such that
`|b.repr x i| < n` for all `‚Äñx‚Äñ < n * Œµ` (i.e. `b.repr x i = O(x)` depending only on `b`).
This is an arbitrary choice of such an `Œµ`.
-/
def ZLattice.normBound {Œπ : Type*} (b : Basis Œπ ‚Ñ§ L) : ‚Ñù :=
  (exists_forall_abs_repr_le_norm b).choose

lemma ZLattice.normBound_pos {Œπ : Type*} (b : Basis Œπ ‚Ñ§ L) : 0 < normBound b :=
  (exists_forall_abs_repr_le_norm b).choose_spec.1

lemma ZLattice.normBound_spec {Œπ : Type*} (b : Basis Œπ ‚Ñ§ L) (x : L) (i : Œπ) :
    normBound b * |b.repr x i| ‚â§ ‚Äñx‚Äñ :=
  (exists_forall_abs_repr_le_norm b).choose_spec.2 x i

lemma ZLattice.abs_repr_le {Œπ : Type*} (b : Basis Œπ ‚Ñ§ L) (x : L) (i : Œπ) :
    |b.repr x i| ‚â§ (normBound b)‚Åª¬π * ‚Äñx‚Äñ := by
  rw [le_inv_mul_iff‚ÇÄ (normBound_pos b)]
  exact normBound_spec b x i

lemma ZLattice.abs_repr_lt_of_norm_lt {Œπ : Type*} (b : Basis Œπ ‚Ñ§ L) (x : L) (n : ‚Ñï)
    (hxn : ‚Äñx‚Äñ < normBound b * n) (i : Œπ) : |b.repr x i| < n := by
  refine Int.cast_lt.mp ((abs_repr_le b x i).trans_lt ?_)
  rwa [inv_mul_lt_iff‚ÇÄ (normBound_pos b)]

lemma ZLattice.le_norm_of_le_abs_repr {Œπ : Type*} (b : Basis Œπ ‚Ñ§ L) (x : L) (n : ‚Ñï) (i : Œπ)
    (hi : n ‚â§ |b.repr x i|) : normBound b * n ‚â§ ‚Äñx‚Äñ := by
  contrapose! hi
  exact abs_repr_lt_of_norm_lt b x n hi i

open Finset in
lemma ZLattice.sum_piFinset_Icc_rpow_le {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ]
    (b : Basis Œπ ‚Ñ§ L) {d : ‚Ñï} (hd : d = Fintype.card Œπ)
    (n : ‚Ñï) (r : ‚Ñù) (hr : r < -d) :
    ‚àë p ‚àà Fintype.piFinset fun _ : Œπ ‚Ü¶ Icc (-n : ‚Ñ§) n, ‚Äñ‚àë i, p i ‚Ä¢ b i‚Äñ ^ r ‚â§
      2 * d * 3 ^ (d - 1) * normBound b ^ r * ‚àë' k : ‚Ñï, (k : ‚Ñù) ^ (d - 1 + r) := by
  let s (n : ‚Ñï) := Fintype.piFinset fun i : Œπ ‚Ü¶ Icc (-n : ‚Ñ§) n
  subst hd
  set d := Fintype.card Œπ
  have hr' : r < 0 := hr.trans_le (by linarith)
  by_cases hd : d = 0
  ¬∑ have : IsEmpty Œπ := Fintype.card_eq_zero_iff.mp hd
    simp [hd, hr'.ne]
  replace hd : 1 ‚â§ d := by rwa [Nat.one_le_iff_ne_zero]
  have hs0 : s 0 = {0} := by ext; simp [s, funext_iff]
  have hs {a b : ‚Ñï} (ha : a ‚â§ b) : s a ‚äÜ s b := by
    intros x hx
    simp only [Fintype.mem_piFinset, s] at hx ‚ä¢
    exact fun i ‚Ü¶ Icc_subset_Icc (by simpa) (by simpa) (hx i)
  have (k : ‚Ñï) : #(s (k + 1) \ s k) ‚â§ 2 * d * (2 * k + 3) ^ (d - 1) := by
    trans (2 * k + 3) ^ d - (2 * k + 1) ^ d
    ¬∑ simp only [le_add_iff_nonneg_right, zero_le, hs, card_sdiff, s]
      simp only [Fintype.card_piFinset, Int.card_Icc, sub_neg_eq_add, prod_const, card_univ, s]
      gcongr <;> norm_cast <;> omega
    ¬∑ have := abs_pow_sub_pow_le (Œ± := ‚Ñ§) ‚Üë(2 * k + 3) ‚Üë(2 * k + 1) d
      norm_num at this
      zify
      convert this using 3
      ¬∑ rw [abs_eq_self.mpr (sub_nonneg.mpr (by gcongr; omega)), Nat.cast_sub (by gcongr; omega)]
        simp
      ¬∑ rw [max_eq_left (by gcongr; omega), abs_eq_self.mpr (by positivity)]
  let Œµ := normBound b
  have hŒµ : 0 < Œµ := normBound_pos b
  calc ‚àë p ‚àà s n, ‚Äñ‚àë i, p i ‚Ä¢ b i‚Äñ ^ r
      = ‚àë k ‚àà range n, ‚àë p ‚àà (s (k + 1) \ s k), ‚Äñ‚àë i, p i ‚Ä¢ b i‚Äñ ^ r := by
        simp [Finset.sum_eq_sum_range_sdiff _ @hs, hs0, hr'.ne]
    _ ‚â§ ‚àë k ‚àà range n, ‚àë p ‚àà (s (k + 1) \ s k), ((k + 1) * Œµ) ^ r := by
        gcongr ‚àë k ‚àà Finset.range n, ‚àë p ‚àà (s (k + 1) \ s k), ?_ with k hk v hv
        rw [‚Üê Nat.cast_one, ‚Üê Nat.cast_add]
        refine Real.rpow_le_rpow_of_nonpos (by positivity) ?_ hr'.le
        obtain ‚ü®j, hj‚ü© : ‚àÉ i, v i ‚àâ Icc (-k : ‚Ñ§) k := by simpa [s] using (mem_sdiff.mp hv).2
        refine mul_comm _ Œµ ‚ñ∏ ZLattice.le_norm_of_le_abs_repr b _ _ j ?_
        suffices ‚Üëk + 1 ‚â§ |v j| by simpa [Finsupp.single_apply] using this
        by_contra! H
        rw [Int.lt_add_one_iff, abs_le, ‚Üê Finset.mem_Icc] at H
        exact hj H
    _ ‚â§ ‚àë k ‚àà range n, ‚Üë(2 * d * (3 * (k + 1)) ^ (d - 1)) * ((k + 1) * Œµ) ^ r := by
        simp only [sum_const, nsmul_eq_mul]
        gcongr with k hk
        refine (this _).trans ?_
        gcongr
        omega
    _ = 2 * d * 3 ^ (d - 1) * Œµ ^ r * ‚àë k ‚àà range n, (k + 1) ^ (d - 1) * (k + 1 : ‚Ñù) ^ r := by
        simp_rw [Finset.mul_sum]
        congr with k
        push_cast
        rw [Real.mul_rpow (by positivity) (by positivity), mul_pow]
        group
    _ = 2 * d * 3 ^ (d - 1) * Œµ ^ r * ‚àë k ‚àà range n, (‚Üë(k + 1) : ‚Ñù) ^ (d - 1 + r) := by
        congr with k
        rw [‚Üê Real.rpow_natCast, ‚Üê Real.rpow_add (by positivity), Nat.cast_sub hd]
        norm_cast
    _ ‚â§ 2 * d * 3 ^ (d - 1) * Œµ ^ r * ‚àë k ‚àà range (n + 1), (k : ‚Ñù) ^ (d - 1 + r) := by
        gcongr
        rw [Finset.sum_range_succ', le_add_iff_nonneg_right]
        positivity
    _ ‚â§ 2 * d * 3 ^ (d - 1) * Œµ ^ r * ‚àë' k : ‚Ñï, (k : ‚Ñù) ^ (d - 1 + r) := by
        gcongr
        refine Summable.sum_le_tsum _ (fun _ _ ‚Ü¶ by positivity) (Real.summable_nat_rpow.mpr ?_)
        linarith

variable (L)

lemma ZLattice.exists_finset_sum_norm_rpow_le_tsum :
    ‚àÉ A > (0 : ‚Ñù), ‚àÄ r < (-Module.finrank ‚Ñ§ L : ‚Ñù), ‚àÄ s : Finset L,
      ‚àë z ‚àà s, ‚Äñz‚Äñ ^ r ‚â§ A ^ r * ‚àë' k : ‚Ñï, (k : ‚Ñù) ^ (Module.finrank ‚Ñ§ L - 1 + r) := by
  classical
  cases subsingleton_or_nontrivial L
  ¬∑ refine ‚ü®1, zero_lt_one, fun r hr s ‚Ü¶ ?_‚ü©
    have hr : r ‚â† 0 := by linarith
    simpa [Subsingleton.elim _ (0 : L), Real.zero_rpow hr] using tsum_nonneg fun _ ‚Ü¶ by positivity
  classical
  let I : Type _ := Module.Free.ChooseBasisIndex ‚Ñ§ L
  have : Fintype I := inferInstance
  let b : Basis I ‚Ñ§ L := Module.Free.chooseBasis ‚Ñ§ L
  simp_rw [Module.finrank_eq_card_basis b]
  set d := Fintype.card I
  have hd : d ‚â† 0 := by simp [d]
  let Œµ := normBound b
  obtain ‚ü®A, hA, B, hB, H‚ü© : ‚àÉ A > (0 : ‚Ñù), ‚àÉ B > (0 : ‚Ñù), ‚àÄ r < (-d : ‚Ñù), ‚àÄ s : Finset L,
      ‚àë z ‚àà s, ‚Äñz‚Äñ ^ r ‚â§ A * B ^ r * ‚àë' k : ‚Ñï, (k : ‚Ñù) ^ (d - 1 + r) := by
    refine ‚ü®2 * d * 3 ^ (d - 1), by positivity, Œµ, normBound_pos b, fun r hr u ‚Ü¶ ?_‚ü©
    let e : (I ‚Üí ‚Ñ§) ‚âÉ‚Çó[‚Ñ§] L := (b.repr ‚â™‚â´‚Çó Finsupp.linearEquivFunOnFinite _ _ _).symm
    obtain ‚ü®u, rfl‚ü© : ‚àÉ u' : Finset _, u = u'.image e.toEmbedding :=
      ‚ü®u.image e.symm.toEmbedding, Finset.coe_injective
        (by simpa using (e.image_symm_image _).symm)‚ü©
    dsimp
    simp only [EmbeddingLike.apply_eq_iff_eq, implies_true, Set.injOn_of_eq_iff_eq,
      Finset.sum_image, ge_iff_le]
    obtain ‚ü®n, hn‚ü© : ‚àÉ n : ‚Ñï, u ‚äÜ Fintype.piFinset fun _ : I ‚Ü¶ Finset.Icc (-n : ‚Ñ§) n := by
      obtain ‚ü®r, hr, hr'‚ü© := u.finite_toSet.isCompact.isBounded.subset_closedBall_lt 0 0
      refine ‚ü®‚åär‚åã.toNat, fun x hx ‚Ü¶ ?_‚ü©
      have hr'' : ‚åär‚åã ‚äî 0 = ‚åär‚åã := by simp; positivity
      have := hr' hx
      simp only [Metric.mem_closedBall, dist_zero_right, pi_norm_le_iff_of_nonneg hr.le,
        Int.norm_eq_abs, ‚Üê Int.cast_abs, ‚Üê Int.le_floor] at this
      simpa only [Int.ofNat_toNat, Fintype.mem_piFinset, Finset.mem_Icc, ‚Üê abs_le, hr'']
    refine (Finset.sum_le_sum_of_subset_of_nonneg hn (by intros; positivity)).trans ?_
    dsimp
    simp only [Submodule.norm_coe]
    convert ZLattice.sum_piFinset_Icc_rpow_le b rfl n r hr with x
    simp [e, Finsupp.linearCombination]
    rfl
  have (r : ‚Ñù) : 0 ‚â§ ‚àë' k : ‚Ñï, (k : ‚Ñù) ^ (d - 1 + r) := tsum_nonneg fun _ ‚Ü¶ by positivity
  by_cases hA' : A ‚â§ 1
  ¬∑ refine ‚ü®B, hB, fun r hr s ‚Ü¶ (H r hr s).trans ?_‚ü©
    rw [mul_assoc]
    exact mul_le_of_le_one_left (mul_nonneg (by positivity) (this r)) hA'
  ¬∑ refine ‚ü®A‚Åª¬π * B, mul_pos (inv_pos.mpr hA) hB, fun r hr s ‚Ü¶ (H r hr s).trans ?_‚ü©
    rw [Real.mul_rpow (inv_pos.mpr hA).le hB.le, mul_assoc, mul_assoc]
    refine mul_le_mul_of_nonneg_right ?_ (mul_nonneg (by positivity) (this r))
    rw [‚Üê Real.rpow_neg_one, ‚Üê Real.rpow_mul hA.le]
    refine Real.self_le_rpow_of_one_le (not_le.mp hA').le ?_
    simp only [neg_mul, one_mul, le_neg (b := r)]
    refine hr.le.trans ?_
    norm_num
    exact Nat.one_le_iff_ne_zero.mpr hd

/--
Let `L` be a lattice with (possibly non-full) rank `d`, and `r : ‚Ñù` such that `d < r`.
Then `‚àë z ‚àà L, ‚Äñz‚Äñ‚Åª ≥ ‚â§ A‚Åª ≥ * ‚àë k : ‚Ñï, k·µà‚Åª ≥‚Åª¬π` for some `A > 0` depending only on `L`.
This is an arbitrary choice of `A`. See `ZLattice.tsum_norm_rpow_le`.
-/
def ZLattice.tsumNormRPowBound : ‚Ñù :=
  (exists_finset_sum_norm_rpow_le_tsum L).choose

lemma ZLattice.tsumNormRPowBound_pos : 0 < tsumNormRPowBound L :=
  (exists_finset_sum_norm_rpow_le_tsum L).choose_spec.1

lemma ZLattice.tsumNormRPowBound_spec (r : ‚Ñù) (h : r < -Module.finrank ‚Ñ§ L) (s : Finset L) :
    ‚àë z ‚àà s, ‚Äñz‚Äñ ^ r ‚â§
      tsumNormRPowBound L ^ r * ‚àë' k : ‚Ñï, (k : ‚Ñù) ^ (Module.finrank ‚Ñ§ L - 1 + r) :=
  (ZLattice.exists_finset_sum_norm_rpow_le_tsum L).choose_spec.2 r h s

/-- If `L` is a `‚Ñ§`-lattice with rank `d` in `E`, then `‚àë z ‚àà L, ‚Äñz‚Äñ ≥` converges when `r < -d`. -/
lemma ZLattice.summable_norm_rpow (r : ‚Ñù) (hr : r < -Module.finrank ‚Ñ§ L) :
    Summable fun z : L ‚Ü¶ ‚Äñz‚Äñ ^ r :=
  summable_of_sum_le (fun _ ‚Ü¶ by positivity) (tsumNormRPowBound_spec L r hr)

/-- `‚àë z ‚àà L, ‚Äñz‚Äñ‚Åª ≥ ‚â§ A‚Åª ≥ * ‚àë k : ‚Ñï, k·µà‚Åª ≥‚Åª¬π` for some `A > 0` depending only on `L`. -/
lemma ZLattice.tsum_norm_rpow_le (r : ‚Ñù) (hr : r < -Module.finrank ‚Ñ§ L) :
    ‚àë' z : L, ‚Äñz‚Äñ ^ r ‚â§
      tsumNormRPowBound L ^ r * ‚àë' k : ‚Ñï, (k : ‚Ñù) ^ (Module.finrank ‚Ñ§ L - 1 + r) :=
  Summable.tsum_le_of_sum_le (summable_norm_rpow L r hr) (tsumNormRPowBound_spec L r hr)

lemma ZLattice.summable_norm_sub_rpow (r : ‚Ñù) (hr : r < -Module.finrank ‚Ñ§ L) (x : E) :
    Summable fun z : L ‚Ü¶ ‚Äñz - x‚Äñ ^ r := by
  cases subsingleton_or_nontrivial L
  ¬∑ exact .of_finite
  refine Summable.of_norm_bounded_eventually
    (.mul_left ((1 / 2) ^ r) (summable_norm_rpow L r hr)) ?_
  have H : IsClosed (X := E) L := @AddSubgroup.isClosed_of_discrete _ _ _ _ _
    L.toAddSubgroup (inferInstanceAs (DiscreteTopology L))
  refine ((Metric.finite_isBounded_inter_isClosed
    (Metric.isBounded_closedBall (x := (0 : E)) (r := 2 * ‚Äñx‚Äñ)) H).preimage_embedding
    (.subtype _)).subset ?_
  intro t ht
  by_cases ht‚ÇÅ : ‚Äñt‚Äñ = 0
  ¬∑ simp [show t = 0 by simpa using ht‚ÇÅ]
  by_cases ht‚ÇÇ : ‚Äñt - x‚Äñ = 0
  ¬∑ simpa [show t = x by simpa [sub_eq_zero] using ht‚ÇÇ, two_mul] using t.2
  have : 0 < Module.finrank ‚Ñ§ L := Module.finrank_pos
  have : ‚Äñt - x‚Äñ < 2‚Åª¬π * ‚Äñt‚Äñ := by
    rw [‚Üê Real.rpow_lt_rpow_iff_of_neg (by positivity) (by positivity) (hr.trans (by simpa))]
    simpa [Real.mul_rpow, abs_eq_self.mpr (show 0 ‚â§ ‚Äñt - x‚Äñ ^ r by positivity)] using ht
  have := (norm_sub_norm_le _ _).trans_lt this
  rw [sub_lt_iff_lt_add, ‚Üê sub_lt_iff_lt_add', AddSubgroupClass.coe_norm] at this
  simpa using show ‚Äñt.1‚Äñ ‚â§ 2 * ‚Äñx‚Äñ by linarith

lemma ZLattice.summable_norm_sub_zpow (n : ‚Ñ§) (hn : n < -Module.finrank ‚Ñ§ L) (x : E) :
    Summable fun z : L ‚Ü¶ ‚Äñz - x‚Äñ ^ n := by
  exact_mod_cast summable_norm_sub_rpow L n (by exact_mod_cast hn) x

lemma ZLattice.summable_norm_zpow (n : ‚Ñ§) (hn : n < -Module.finrank ‚Ñ§ L) :
    Summable fun z : L ‚Ü¶ ‚Äñz‚Äñ ^ n := by
  simpa using summable_norm_sub_zpow L n hn 0

lemma ZLattice.summable_norm_sub_inv_pow (n : ‚Ñï) (hn : Module.finrank ‚Ñ§ L < n) (x : E) :
    Summable fun z : L ‚Ü¶ ‚Äñz - x‚Äñ‚Åª¬π ^ n := by
  simpa using summable_norm_sub_zpow L (-n) (by gcongr) x

lemma ZLattice.summable_norm_pow_inv (n : ‚Ñï) (hn : Module.finrank ‚Ñ§ L < n) :
    Summable fun z : L ‚Ü¶ ‚Äñz‚Äñ‚Åª¬π ^ n := by
  simpa using summable_norm_sub_inv_pow L n hn 0
