/-
Copyright (c) 2024 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.Analysis.BoxIntegral.UnitPartition
import Mathlib.MeasureTheory.Measure.Haar.InnerProductSpace

/-!
# Covolume of ‚Ñ§-lattices

Let `E` be a finite dimensional real vector space.

Let `L` be a `‚Ñ§`-lattice `L` defined as a discrete `‚Ñ§`-submodule of `E` that spans `E` over `‚Ñù`.

## Main definitions and results

* `ZLattice.covolume`: the covolume of `L` defined as the volume of an arbitrary fundamental
domain of `L`.

* `ZLattice.covolume_eq_measure_fundamentalDomain`: the covolume of `L` does not depend on the
choice of the fundamental domain of `L`.

* `ZLattice.covolume_eq_det`: if `L` is a lattice in `‚Ñù^n`, then its covolume is the absolute
value of the determinant of any `‚Ñ§`-basis of `L`.

* `ZLattice.covolume.tendsto_card_div_pow`: Let `s` be a bounded measurable set of `Œπ ‚Üí ‚Ñù`, then
the number of points in `s ‚à© n‚Åª¬π ‚Ä¢ L` divided by `n ^ card Œπ` tends to `volume s / covolume L`
when `n : ‚Ñï` tends to infinity. See also `ZLattice.covolume.tendsto_card_div_pow'` for a version
for `InnerProductSpace ‚Ñù E` and `ZLattice.covolume.tendsto_card_div_pow''` for the general version.

* `ZLattice.covolume.tendsto_card_le_div`: Let `X` be a cone in `Œπ ‚Üí ‚Ñù` and let `F : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù`
be a function such that `F (c ‚Ä¢ x) = c ^ card Œπ * F x`. Then the number of points `x ‚àà X` such that
`F x ‚â§ c` divided by `c` tends to `volume {x ‚àà X | F x ‚â§ 1} / covolume L` when `c : ‚Ñù` tends to
infinity. See also `ZLattice.covolume.tendsto_card_le_div'` for a version for
`InnerProductSpace ‚Ñù E` and `ZLattice.covolume.tendsto_card_le_div''` for the general version.

## Naming convention

Some results are true in the case where the ambient finite dimensional real vector space is the
pi-space `Œπ ‚Üí ‚Ñù` and in the case where it is an `InnerProductSpace`. We use the following
convention: the plain name is for the pi case, for eg. `volume_image_eq_volume_div_covolume`. For
the same result in the `InnerProductSpace` case, we add a `prime`, for eg.
`volume_image_eq_volume_div_covolume'`. When the same result exists in the
general case, we had two primes, eg. `covolume.tendsto_card_div_pow''`.

-/

noncomputable section

namespace ZLattice

open Submodule MeasureTheory Module MeasureTheory Module ZSpan

section General

variable {E : Type*} [NormedAddCommGroup E] [MeasurableSpace E] (L : Submodule ‚Ñ§ E)

/-- The covolume of a `‚Ñ§`-lattice is the volume of some fundamental domain; see
`ZLattice.covolume_eq_volume` for the proof that the volume does not depend on the choice of
the fundamental domain. -/
def covolume (Œº : Measure E := by volume_tac) : ‚Ñù := (addCovolume L E Œº).toReal

end General

section Basic

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
variable [MeasurableSpace E] [BorelSpace E]
variable (L : Submodule ‚Ñ§ E) [DiscreteTopology L] [IsZLattice ‚Ñù L]
variable (Œº : Measure E := by volume_tac) [Measure.IsAddHaarMeasure Œº]

theorem covolume_eq_measure_fundamentalDomain {F : Set E} (h : IsAddFundamentalDomain L F Œº) :
    covolume L Œº = (Œº F).toReal := by
  have : MeasurableVAdd L E := (inferInstance : MeasurableVAdd L.toAddSubgroup E)
  have : VAddInvariantMeasure L E Œº := (inferInstance : VAddInvariantMeasure L.toAddSubgroup E Œº)
  exact congr_arg ENNReal.toReal (h.covolume_eq_volume Œº)

theorem covolume_ne_zero : covolume L Œº ‚â† 0 := by
  rw [covolume_eq_measure_fundamentalDomain L Œº (isAddFundamentalDomain (Free.chooseBasis ‚Ñ§ L) Œº),
    ENNReal.toReal_ne_zero]
  refine ‚ü®measure_fundamentalDomain_ne_zero _, ne_of_lt ?_‚ü©
  exact Bornology.IsBounded.measure_lt_top (fundamentalDomain_isBounded _)

theorem covolume_pos : 0 < covolume L Œº :=
  lt_of_le_of_ne ENNReal.toReal_nonneg (covolume_ne_zero L Œº).symm

theorem covolume_comap {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [FiniteDimensional ‚Ñù F]
    [MeasurableSpace F] [BorelSpace F] (ŒΩ : Measure F := by volume_tac) [Measure.IsAddHaarMeasure ŒΩ]
    {e : F ‚âÉL[‚Ñù] E} (he : MeasurePreserving e ŒΩ Œº) :
    covolume (ZLattice.comap ‚Ñù L e.toLinearMap) ŒΩ = covolume L Œº := by
  rw [covolume_eq_measure_fundamentalDomain _ _ (isAddFundamentalDomain (Free.chooseBasis ‚Ñ§ L) Œº),
    covolume_eq_measure_fundamentalDomain _ _ ((isAddFundamentalDomain
    ((Free.chooseBasis ‚Ñ§ L).ofZLatticeComap ‚Ñù L e.toLinearEquiv) ŒΩ)), ‚Üê he.measure_preimage
    (fundamentalDomain_measurableSet _).nullMeasurableSet, ‚Üê e.image_symm_eq_preimage,
    ‚Üê e.symm.coe_toLinearEquiv, map_fundamentalDomain]
  congr!
  ext; simp

theorem covolume_eq_det_mul_measure {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ] (b : Basis Œπ ‚Ñ§ L)
    (b‚ÇÄ : Basis Œπ ‚Ñù E) :
    covolume L Œº = |b‚ÇÄ.det ((‚Üë) ‚àò b)| * (Œº (fundamentalDomain b‚ÇÄ)).toReal := by
  rw [covolume_eq_measure_fundamentalDomain L Œº (isAddFundamentalDomain b Œº),
    measure_fundamentalDomain _ _ b‚ÇÄ,
    measure_congr (fundamentalDomain_ae_parallelepiped b‚ÇÄ Œº), ENNReal.toReal_mul,
    ENNReal.toReal_ofReal (by positivity)]
  congr
  ext
  exact b.ofZLatticeBasis_apply ‚Ñù L _

theorem covolume_eq_det {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ] (L : Submodule ‚Ñ§ (Œπ ‚Üí ‚Ñù))
    [DiscreteTopology L] [IsZLattice ‚Ñù L] (b : Basis Œπ ‚Ñ§ L) :
    covolume L = |(Matrix.of ((‚Üë) ‚àò b)).det| := by
  rw [covolume_eq_measure_fundamentalDomain L volume (isAddFundamentalDomain b volume),
    volume_fundamentalDomain, ENNReal.toReal_ofReal (by positivity)]
  congr
  ext1
  exact b.ofZLatticeBasis_apply ‚Ñù L _

theorem covolume_eq_det_inv {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ] (L : Submodule ‚Ñ§ (Œπ ‚Üí ‚Ñù))
    [DiscreteTopology L] [IsZLattice ‚Ñù L] (b : Basis Œπ ‚Ñ§ L) :
    covolume L = |(LinearEquiv.det (b.ofZLatticeBasis ‚Ñù L).equivFun : ‚Ñù)|‚Åª¬π := by
  rw [covolume_eq_det L b, ‚Üê Pi.basisFun_det_apply, show (((‚Üë) : L ‚Üí _) ‚àò ‚áëb) =
    (b.ofZLatticeBasis ‚Ñù) by ext; simp, ‚Üê Basis.det_inv, ‚Üê abs_inv, Units.val_inv_eq_inv_val,
    IsUnit.unit_spec, ‚Üê Basis.det_basis, LinearEquiv.coe_det]
  rfl

theorem volume_image_eq_volume_div_covolume {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ]
    (L : Submodule ‚Ñ§ (Œπ ‚Üí ‚Ñù)) [DiscreteTopology L] [IsZLattice ‚Ñù L] (b : Basis Œπ ‚Ñ§ L)
    {s : Set (Œπ ‚Üí ‚Ñù)} :
    volume ((b.ofZLatticeBasis ‚Ñù L).equivFun '' s) = volume s / ENNReal.ofReal (covolume L) := by
  rw [LinearEquiv.image_eq_preimage, Measure.addHaar_preimage_linearEquiv, LinearEquiv.symm_symm,
    covolume_eq_det_inv L b, ENNReal.div_eq_inv_mul, ENNReal.ofReal_inv_of_pos
    (abs_pos.mpr (LinearEquiv.det _).ne_zero), inv_inv, LinearEquiv.coe_det]

/-- A more general version of `ZLattice.volume_image_eq_volume_div_covolume`;
see the `Naming conventions` section in the introduction. -/
theorem volume_image_eq_volume_div_covolume' {E : Type*} [NormedAddCommGroup E]
    [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E] [MeasurableSpace E] [BorelSpace E]
    (L : Submodule ‚Ñ§ E) [DiscreteTopology L] [IsZLattice ‚Ñù L] {Œπ : Type*} [Fintype Œπ]
    (b : Basis Œπ ‚Ñ§ L) {s : Set E} (hs : NullMeasurableSet s) :
    volume ((b.ofZLatticeBasis ‚Ñù).equivFun '' s) = volume s / ENNReal.ofReal (covolume L) := by
  classical
  let e : Fin (finrank ‚Ñù E) ‚âÉ Œπ :=
    Fintype.equivOfCardEq (by rw [Fintype.card_fin, finrank_eq_card_basis (b.ofZLatticeBasis ‚Ñù)])
  let f := (EuclideanSpace.equiv Œπ ‚Ñù).symm.trans
    ((stdOrthonormalBasis ‚Ñù E).reindex e).repr.toContinuousLinearEquiv.symm
  have hf : MeasurePreserving f :=
    ((stdOrthonormalBasis ‚Ñù E).reindex e).measurePreserving_repr_symm.comp
      (EuclideanSpace.volume_preserving_measurableEquiv Œπ).symm
  rw [‚Üê hf.measure_preimage hs, ‚Üê (covolume_comap L volume volume hf),
    ‚Üê volume_image_eq_volume_div_covolume (ZLattice.comap ‚Ñù L f.toLinearMap)
    (b.ofZLatticeComap ‚Ñù L f.toLinearEquiv), Basis.ofZLatticeBasis_comap,
    ‚Üê f.image_symm_eq_preimage, ‚Üê Set.image_comp]
  simp only [Basis.equivFun_apply, ContinuousLinearEquiv.symm_toLinearEquiv, Basis.map_equivFun,
    LinearEquiv.symm_symm, Function.comp_apply, LinearEquiv.trans_apply,
    ContinuousLinearEquiv.coe_toLinearEquiv, ContinuousLinearEquiv.apply_symm_apply]

end Basic

namespace covolume

section General

open Filter Fintype Pointwise Topology BoxIntegral Bornology

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable {L : Submodule ‚Ñ§ E} [DiscreteTopology L] [IsZLattice ‚Ñù L]
variable {Œπ : Type*} [Fintype Œπ] (b : Basis Œπ ‚Ñ§ L)

/-- A version of `ZLattice.covolume.tendsto_card_div_pow` for the general case;
see the `Naming convention` section in the introduction. -/
theorem tendsto_card_div_pow'' [FiniteDimensional ‚Ñù E] [MeasurableSpace E] [BorelSpace E]
    {s : Set E} (hs‚ÇÅ : IsBounded s) (hs‚ÇÇ : MeasurableSet s)
    (hs‚ÇÉ : volume (frontier ((b.ofZLatticeBasis ‚Ñù).equivFun '' s)) = 0):
    Tendsto (fun n : ‚Ñï ‚Ü¶ (Nat.card (s ‚à© (n : ‚Ñù)‚Åª¬π ‚Ä¢ L : Set E) : ‚Ñù) / n ^ card Œπ)
      atTop (ùìù (volume ((b.ofZLatticeBasis ‚Ñù).equivFun '' s)).toReal) := by
  refine Tendsto.congr' ?_
    (tendsto_card_div_pow_atTop_volume ((b.ofZLatticeBasis ‚Ñù).equivFun '' s) ?_ ?_ hs‚ÇÉ)
  ¬∑ filter_upwards [eventually_gt_atTop 0] with n hn
    congr
    refine Nat.card_congr <| ((b.ofZLatticeBasis ‚Ñù).equivFun.toEquiv.subtypeEquiv fun x ‚Ü¶ ?_).symm
    simp_rw [Set.mem_inter_iff, ‚Üê b.ofZLatticeBasis_span ‚Ñù, LinearEquiv.coe_toEquiv,
      Basis.equivFun_apply, Set.mem_image, DFunLike.coe_fn_eq, EmbeddingLike.apply_eq_iff_eq,
      exists_eq_right, and_congr_right_iff, Set.mem_inv_smul_set_iff‚ÇÄ
      (mod_cast hn.ne' : (n : ‚Ñù) ‚â† 0), ‚Üê Finsupp.coe_smul, ‚Üê LinearEquiv.map_smul, SetLike.mem_coe,
      Basis.mem_span_iff_repr_mem, Pi.basisFun_repr, implies_true]
  ¬∑ rw [‚Üê NormedSpace.isVonNBounded_iff ‚Ñù] at hs‚ÇÅ ‚ä¢
    exact Bornology.IsVonNBounded.image hs‚ÇÅ ((b.ofZLatticeBasis ‚Ñù).equivFunL : E ‚ÜíL[‚Ñù] Œπ ‚Üí ‚Ñù)
  ¬∑ exact (b.ofZLatticeBasis ‚Ñù).equivFunL.toHomeomorph.toMeasurableEquiv.measurableSet_image.mpr hs‚ÇÇ

private theorem tendsto_card_le_div''_aux {X : Set E} (hX : ‚àÄ ‚¶Éx‚¶Ñ ‚¶Ér:‚Ñù‚¶Ñ, x ‚àà X ‚Üí 0 < r ‚Üí r ‚Ä¢ x ‚àà X)
    {F : E ‚Üí ‚Ñù} (hF‚ÇÅ : ‚àÄ x ‚¶Ér : ‚Ñù‚¶Ñ, 0 ‚â§ r ‚Üí F (r ‚Ä¢ x) = r ^ card Œπ * (F x)) {c : ‚Ñù} (hc : 0 < c) :
    c ‚Ä¢ {x ‚àà X | F x ‚â§ 1} = {x ‚àà X | F x ‚â§ c ^ card Œπ} := by
  ext x
  simp_rw [Set.mem_smul_set_iff_inv_smul_mem‚ÇÄ hc.ne', Set.mem_setOf_eq, hF‚ÇÅ _
    (inv_pos_of_pos hc).le, inv_pow, inv_mul_le_iff‚ÇÄ (pow_pos hc _), mul_one, and_congr_left_iff]
  exact fun _ ‚Ü¶ ‚ü®fun h ‚Ü¶ (smul_inv_smul‚ÇÄ hc.ne' x) ‚ñ∏ hX h hc, fun h ‚Ü¶ hX h (inv_pos_of_pos hc)‚ü©

/-- A version of `ZLattice.covolume.tendsto_card_le_div` for the general case;
see the `Naming conventions` section in the introduction. -/
theorem tendsto_card_le_div'' [FiniteDimensional ‚Ñù E] [MeasurableSpace E] [BorelSpace E]
    [Nonempty Œπ] {X : Set E} (hX : ‚àÄ ‚¶Éx‚¶Ñ ‚¶Ér : ‚Ñù‚¶Ñ, x ‚àà X ‚Üí 0 < r ‚Üí r ‚Ä¢ x ‚àà X)
    {F : E ‚Üí ‚Ñù} (h‚ÇÅ : ‚àÄ x ‚¶Ér : ‚Ñù‚¶Ñ, 0 ‚â§ r ‚Üí  F (r ‚Ä¢ x) = r ^ card Œπ * (F x))
    (h‚ÇÇ : IsBounded {x ‚àà X | F x ‚â§ 1}) (h‚ÇÉ : MeasurableSet {x ‚àà X | F x ‚â§ 1})
    (h‚ÇÑ : volume (frontier ((b.ofZLatticeBasis ‚Ñù L).equivFun '' {x | x ‚àà X ‚àß F x ‚â§ 1})) = 0) :
    Tendsto (fun c : ‚Ñù ‚Ü¶
      Nat.card ({x ‚àà X | F x ‚â§ c} ‚à© L : Set E) / (c : ‚Ñù))
        atTop (ùìù (volume ((b.ofZLatticeBasis ‚Ñù).equivFun '' {x ‚àà X | F x ‚â§ 1})).toReal) := by

  refine Tendsto.congr' ?_ <| (tendsto_card_div_pow_atTop_volume'
      ((b.ofZLatticeBasis ‚Ñù).equivFun '' {x ‚àà X | F x ‚â§ 1}) ?_ ?_ h‚ÇÑ fun x y hx hy ‚Ü¶ ?_).comp
        (tendsto_rpow_atTop <| inv_pos.mpr
          (Nat.cast_pos.mpr card_pos) : Tendsto (fun x ‚Ü¶ x ^ (card Œπ : ‚Ñù)‚Åª¬π) atTop atTop)
  ¬∑ filter_upwards [eventually_gt_atTop 0] with c hc
    have aux‚ÇÅ : (card Œπ : ‚Ñù) ‚â† 0 := Nat.cast_ne_zero.mpr card_ne_zero
    have aux‚ÇÇ : 0 < c ^ (card Œπ : ‚Ñù)‚Åª¬π := Real.rpow_pos_of_pos hc _
    have aux‚ÇÉ : (c ^ (card Œπ : ‚Ñù)‚Åª¬π)‚Åª¬π ‚â† 0 := inv_ne_zero aux‚ÇÇ.ne'
    have aux‚ÇÑ : c ^ (-(card Œπ : ‚Ñù)‚Åª¬π) ‚â† 0 := (Real.rpow_pos_of_pos hc _).ne'
    obtain ‚ü®hc‚ÇÅ, hc‚ÇÇ‚ü© := lt_iff_le_and_ne.mp hc
    rw [Function.comp_apply, ‚Üê Real.rpow_natCast, Real.rpow_inv_rpow hc‚ÇÅ aux‚ÇÅ, eq_comm]
    congr
    refine Nat.card_congr <| Equiv.subtypeEquiv ((b.ofZLatticeBasis ‚Ñù).equivFun.toEquiv.trans
          (Equiv.smulRight aux‚ÇÑ)) fun _ ‚Ü¶ ?_
    rw [Set.mem_inter_iff, Set.mem_inter_iff, Equiv.trans_apply, LinearEquiv.coe_toEquiv,
      Equiv.smulRight_apply, Real.rpow_neg hc‚ÇÅ, Set.smul_mem_smul_set_iff‚ÇÄ aux‚ÇÉ,
      ‚Üê Set.mem_smul_set_iff_inv_smul_mem‚ÇÄ aux‚ÇÇ.ne', ‚Üê image_smul_set,
      tendsto_card_le_div''_aux hX h‚ÇÅ aux‚ÇÇ, ‚Üê Real.rpow_natCast, ‚Üê Real.rpow_mul hc‚ÇÅ,
      inv_mul_cancel‚ÇÄ aux‚ÇÅ, Real.rpow_one]
    simp_rw [SetLike.mem_coe, Set.mem_image, EmbeddingLike.apply_eq_iff_eq, exists_eq_right,
      and_congr_right_iff, ‚Üê b.ofZLatticeBasis_span ‚Ñù, Basis.mem_span_iff_repr_mem,
      Pi.basisFun_repr, Basis.equivFun_apply, implies_true]
  ¬∑ rw [‚Üê NormedSpace.isVonNBounded_iff ‚Ñù] at h‚ÇÇ ‚ä¢
    exact Bornology.IsVonNBounded.image h‚ÇÇ ((b.ofZLatticeBasis ‚Ñù).equivFunL : E ‚ÜíL[‚Ñù] Œπ ‚Üí ‚Ñù)
  ¬∑ exact (b.ofZLatticeBasis ‚Ñù).equivFunL.toHomeomorph.toMeasurableEquiv.measurableSet_image.mpr h‚ÇÉ
  ¬∑ simp_rw [‚Üê image_smul_set]
    apply Set.image_mono
    rw [tendsto_card_le_div''_aux hX h‚ÇÅ hx,
      tendsto_card_le_div''_aux hX h‚ÇÅ (lt_of_lt_of_le hx hy)]
    exact fun a ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü© ‚Ü¶ ‚ü®ha‚ÇÅ, le_trans ha‚ÇÇ <| pow_le_pow_left‚ÇÄ (le_of_lt hx) hy _‚ü©

end General

section Pi

open Filter Fintype Pointwise Topology Bornology

private theorem frontier_equivFun {E : Type*} [AddCommGroup E] [Module ‚Ñù E] {Œπ : Type*} [Fintype Œπ]
    [TopologicalSpace E] [TopologicalAddGroup E] [ContinuousSMul ‚Ñù E] [T2Space E]
    (b : Basis Œπ ‚Ñù E) (s : Set E) :
    frontier (b.equivFun '' s) = b.equivFun '' (frontier s) := by
  rw [LinearEquiv.image_eq_preimage, LinearEquiv.image_eq_preimage]
  exact (Homeomorph.preimage_frontier b.equivFunL.toHomeomorph.symm s).symm

variable {Œπ : Type*} [Fintype Œπ]
variable (L : Submodule ‚Ñ§ (Œπ ‚Üí ‚Ñù)) [DiscreteTopology L] [IsZLattice ‚Ñù L]

theorem tendsto_card_div_pow (b : Basis Œπ ‚Ñ§ L) {s : Set (Œπ ‚Üí ‚Ñù)} (hs‚ÇÅ : IsBounded s)
    (hs‚ÇÇ : MeasurableSet s) (hs‚ÇÉ : volume (frontier s) = 0) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ (Nat.card (s ‚à© (n : ‚Ñù)‚Åª¬π ‚Ä¢ L : Set (Œπ ‚Üí ‚Ñù)) : ‚Ñù) / n ^ card Œπ)
      atTop (ùìù ((volume s).toReal / covolume L)) := by
  classical
  convert tendsto_card_div_pow'' b hs‚ÇÅ hs‚ÇÇ ?_
  ¬∑ rw [volume_image_eq_volume_div_covolume L b, ENNReal.toReal_div,
      ENNReal.toReal_ofReal (covolume_pos L volume).le]
  ¬∑ rw [frontier_equivFun, volume_image_eq_volume_div_covolume, hs‚ÇÉ, ENNReal.zero_div]

theorem tendsto_card_le_div {X : Set (Œπ ‚Üí ‚Ñù)} (hX : ‚àÄ ‚¶Éx‚¶Ñ ‚¶Ér : ‚Ñù‚¶Ñ, x ‚àà X ‚Üí 0 < r ‚Üí r ‚Ä¢ x ‚àà X)
    {F : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} (h‚ÇÅ : ‚àÄ x ‚¶Ér : ‚Ñù‚¶Ñ, 0 ‚â§ r ‚Üí  F (r ‚Ä¢ x) = r ^ card Œπ * (F x))
    (h‚ÇÇ : IsBounded {x ‚àà X | F x ‚â§ 1}) (h‚ÇÉ : MeasurableSet {x ‚àà X | F x ‚â§ 1})
    (h‚ÇÑ : volume (frontier {x | x ‚àà X ‚àß F x ‚â§ 1}) = 0) [Nonempty Œπ] :
    Tendsto (fun c : ‚Ñù ‚Ü¶
      Nat.card ({x ‚àà X | F x ‚â§ c} ‚à© L : Set (Œπ ‚Üí ‚Ñù)) / (c : ‚Ñù))
        atTop (ùìù ((volume {x ‚àà X | F x ‚â§ 1}).toReal / covolume L)) := by
  classical
  let e : Free.ChooseBasisIndex ‚Ñ§ ‚Ü•L ‚âÉ Œπ := by
    refine Fintype.equivOfCardEq ?_
    rw [‚Üê finrank_eq_card_chooseBasisIndex, ZLattice.rank ‚Ñù, finrank_fintype_fun_eq_card]
  let b := (Module.Free.chooseBasis ‚Ñ§ L).reindex e
  convert tendsto_card_le_div'' b hX h‚ÇÅ h‚ÇÇ h‚ÇÉ ?_
  ¬∑ rw [volume_image_eq_volume_div_covolume L b, ENNReal.toReal_div,
      ENNReal.toReal_ofReal (covolume_pos L volume).le]
  ¬∑ rw [frontier_equivFun, volume_image_eq_volume_div_covolume, h‚ÇÑ, ENNReal.zero_div]

end Pi

section InnerProductSpace

open Filter Pointwise Topology Bornology

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  [MeasurableSpace E] [BorelSpace E]
variable (L : Submodule ‚Ñ§ E) [DiscreteTopology L] [IsZLattice ‚Ñù L]

/-- A version of `ZLattice.covolume.tendsto_card_div_pow` for the `InnerProductSpace` case;
see the `Naming convention` section in the introduction. -/
theorem tendsto_card_div_pow' {s : Set E} (hs‚ÇÅ : IsBounded s) (hs‚ÇÇ : MeasurableSet s)
    (hs‚ÇÉ : volume (frontier s) = 0) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ (Nat.card (s ‚à© (n : ‚Ñù)‚Åª¬π ‚Ä¢ L : Set E) : ‚Ñù) / n ^ finrank ‚Ñù E)
      atTop (ùìù ((volume s).toReal / covolume L)) := by
  let b := Module.Free.chooseBasis ‚Ñ§ L
  convert tendsto_card_div_pow'' b hs‚ÇÅ hs‚ÇÇ ?_
  ¬∑ rw [‚Üê finrank_eq_card_chooseBasisIndex, ZLattice.rank ‚Ñù L]
  ¬∑ rw [volume_image_eq_volume_div_covolume' L b hs‚ÇÇ.nullMeasurableSet, ENNReal.toReal_div,
      ENNReal.toReal_ofReal (covolume_pos L volume).le]
  ¬∑ rw [frontier_equivFun, volume_image_eq_volume_div_covolume', hs‚ÇÉ, ENNReal.zero_div]
    exact NullMeasurableSet.of_null hs‚ÇÉ

/-- A version of `ZLattice.covolume.tendsto_card_le_div` for the `InnerProductSpace` case;
see the `Naming convention` section in the introduction. -/
theorem tendsto_card_le_div' [Nontrivial E] {X : Set E} {F : E ‚Üí ‚Ñù}
    (hX : ‚àÄ ‚¶Éx‚¶Ñ ‚¶Ér : ‚Ñù‚¶Ñ, x ‚àà X ‚Üí 0 < r ‚Üí r ‚Ä¢ x ‚àà X)
    (h‚ÇÅ : ‚àÄ x ‚¶Ér : ‚Ñù‚¶Ñ, 0 ‚â§ r ‚Üí  F (r ‚Ä¢ x) = r ^ finrank ‚Ñù E * (F x))
    (h‚ÇÇ : IsBounded {x ‚àà X | F x ‚â§ 1}) (h‚ÇÉ : MeasurableSet {x ‚àà X | F x ‚â§ 1})
    (h‚ÇÑ : volume (frontier {x ‚àà X | F x ‚â§ 1}) = 0) :
    Tendsto (fun c : ‚Ñù ‚Ü¶
      Nat.card ({x ‚àà X | F x ‚â§ c} ‚à© L : Set E) / (c : ‚Ñù))
        atTop (ùìù ((volume {x ‚àà X | F x ‚â§ 1}).toReal / covolume L)) := by
  let b := Module.Free.chooseBasis ‚Ñ§ L
  convert tendsto_card_le_div'' b hX ?_ h‚ÇÇ h‚ÇÉ ?_
  ¬∑ rw [volume_image_eq_volume_div_covolume' L b h‚ÇÉ.nullMeasurableSet, ENNReal.toReal_div,
      ENNReal.toReal_ofReal (covolume_pos L volume).le]
  ¬∑ have : Nontrivial L := nontrivial_of_finrank_pos <| (ZLattice.rank ‚Ñù L).symm ‚ñ∏ finrank_pos
    infer_instance
  ¬∑ rwa [‚Üê finrank_eq_card_chooseBasisIndex, ZLattice.rank ‚Ñù L]
  ¬∑ rw [frontier_equivFun, volume_image_eq_volume_div_covolume', h‚ÇÑ, ENNReal.zero_div]
    exact NullMeasurableSet.of_null h‚ÇÑ

end InnerProductSpace

end covolume

end ZLattice
