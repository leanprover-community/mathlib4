/-
Copyright (c) 2023 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash, Deepro Choudhury
-/
import Mathlib.GroupTheory.OrderOfElement
import Mathlib.LinearAlgebra.Contraction
import Mathlib.LinearAlgebra.RootSystem.FindHome

/-!
# Symmetries and reflections

Hmm, does this definitely belong in the `RootSystem` directory? Maybe could go one level up?

## Implementation details

Explain point is that we don't assume existence of inner product

## TODO

Show symmetries arise from inner product spaces

-/

open Set Function Pointwise
open Module hiding Finite
open Submodule (span)

noncomputable section

variable {R M : Type*} [CommRing R] [AddCommGroup M] [Module R M]

namespace Module

/-- TODO -/
def preReflection (x : M) (f : Dual R M) : End R M :=
  LinearMap.id - dualTensorHom R M M (f ‚äó‚Çú x)

lemma preReflection_apply (x y : M) (f : Dual R M) :
    preReflection x f y = y - (f y) ‚Ä¢ x := by
  simp [preReflection]

lemma preReflection_apply_self {x : M} {f : Dual R M} (h : f x = 2) :
    preReflection x f x = - x := by
  rw [preReflection_apply, h, two_smul]; abel

lemma involutive_preReflection {x : M} {f : Dual R M} (h : f x = 2) :
    Involutive (preReflection x f) :=
  fun y ‚Ü¶ by simp [h, smul_sub, two_smul, preReflection_apply]

/-- TODO -/
def reflection {x : M} {f : Dual R M} (h : f x = 2) : M ‚âÉ‚Çó[R] M :=
  LinearEquiv.ofBijective (preReflection x f) (involutive_preReflection h).bijective

lemma reflection_apply {x : M} (y : M) {f : Dual R M} (h : f x = 2) :
    reflection h y = y - (f y) ‚Ä¢ x :=
  preReflection_apply x y f

lemma reflection_apply_self {x : M} {f : Dual R M} (h : f x = 2) :
    reflection h x = - x :=
  preReflection_apply_self h

lemma LinearEquiv.apply_preReflection {N : Type*} [AddCommGroup N] [Module R N] (e : M ‚âÉ‚Çó[R] N)
    (x : M) (f : Dual R M) :
    e ‚àò‚Çó preReflection x f = preReflection (e x) (e.symm.dualMap f) ‚àò‚Çó e := by
  ext; simp [preReflection_apply]

lemma preReflection_preReflection (a b : M) (f g : Dual R M) (h : f a = 2) :
    preReflection (preReflection a f b) (preReflection f (Dual.eval R M a) g) =
    (preReflection a f) ‚àò‚Çó (preReflection b g) ‚àò‚Çó (preReflection a f) := by
  ext m
  simp only [h, preReflection_apply, mul_comm (g a) (f m), mul_two, mul_assoc, Dual.eval_apply,
    LinearMap.sub_apply, LinearMap.coe_comp, LinearMap.smul_apply, smul_eq_mul, smul_sub, sub_smul,
    smul_smul, sub_mul, comp_apply, map_sub, map_smul, add_smul]
  abel

lemma eq_of_preReflection_image_eq [CharZero R] [NoZeroSMulDivisors R M]
    {x : M} (hx : x ‚â† 0)
    {Œ¶ : Set M} (hŒ¶‚ÇÅ : Œ¶.Finite) (hŒ¶‚ÇÇ : span R Œ¶ = ‚ä§)
    {f g : Dual R M} (hf‚ÇÅ : f x = 2) (hf‚ÇÇ : preReflection x f '' Œ¶ = Œ¶)
                     (hg‚ÇÅ : g x = 2) (hg‚ÇÇ : preReflection x g '' Œ¶ = Œ¶) :
    f = g := by
  let u := reflection hg‚ÇÅ * reflection hf‚ÇÅ
  suffices IsOfFinOrder u by
    have hu : u = LinearMap.id (R := R) (M := M) + dualTensorHom R M M ((f - g) ‚äó‚Çú x) := by
      ext y
      simp only [reflection, LinearEquiv.coe_mul, LinearMap.mul_apply, LinearEquiv.coe_coe,
        LinearEquiv.ofBijective_apply, preReflection_apply, map_sub, map_smul, hg‚ÇÅ, two_smul,
        sub_add_cancel', smul_neg, sub_neg_eq_add, LinearMap.add_apply, LinearMap.id_coe, id.def,
        dualTensorHom_apply, LinearMap.sub_apply, sub_smul]
      abel
    replace hu : ‚àÄ (n : ‚Ñï), ‚Üë(u^n) =
        LinearMap.id (R := R) (M := M) + (n : R) ‚Ä¢ dualTensorHom R M M ((f - g) ‚äó‚Çú x) := by
      intros n
      induction' n with n ih; simp
      have aux : (dualTensorHom R M M ((f - g) ‚äó‚Çú[R] x)).comp
        ((n : R) ‚Ä¢ dualTensorHom R M M ((f - g) ‚äó‚Çú[R] x)) = 0 := by ext v; simp [hf‚ÇÅ, hg‚ÇÅ]
      rw [pow_succ, LinearEquiv.coe_mul, ih, hu, add_mul, mul_add, mul_add]
      simp only [LinearMap.mul_eq_comp, LinearMap.id_comp, LinearMap.comp_id, Nat.cast_succ,
        aux, add_zero, add_smul, one_smul, add_assoc]
    obtain ‚ü®n, hn‚ÇÄ, hn‚ÇÅ‚ü© := isOfFinOrder_iff_pow_eq_one.mp this
    replace hn‚ÇÅ : (‚Üë(u ^ n) : M ‚Üí‚Çó[R] M) = LinearMap.id := LinearEquiv.toLinearMap_inj.mpr hn‚ÇÅ
    simpa [hn‚ÇÅ, hn‚ÇÄ.ne', hx, sub_eq_zero] using hu n
  suffices IsOfFinOrder u.toLinearMap by
    have hf : Injective (LinearEquiv.automorphismGroup.toLinearMapMonoidHom (R := R) (M := M)) :=
      LinearEquiv.toLinearMap_injective
    exact hf.isOfFinOrder_iff.mp this
  refine isOfFinOrder_of_finite_of_span_eq_top_of_image_eq hŒ¶‚ÇÅ hŒ¶‚ÇÇ ?_
  change (preReflection x g ‚àò preReflection x f '' Œ¶) = Œ¶
  rw [image_comp, hf‚ÇÇ, hg‚ÇÇ]

-- TODO Replace the lemma above with this (more generally use `‚äÜ` instead of `=` in corresponding
-- hypotheses across all relevant lemmas)
lemma eq_of_preReflection_image_eq_fixed [CharZero R] [NoZeroSMulDivisors R M]
    {x : M} (hx : x ‚â† 0)
    {Œ¶ : Set M} (hŒ¶‚ÇÅ : Œ¶.Finite) (hŒ¶‚ÇÇ : span R Œ¶ = ‚ä§)
    {f g : Dual R M} (hf‚ÇÅ : f x = 2) (hf‚ÇÇ : preReflection x f '' Œ¶ ‚äÜ Œ¶)
                     (hg‚ÇÅ : g x = 2) (hg‚ÇÇ : preReflection x g '' Œ¶ ‚äÜ Œ¶) :
    f = g := by
  change (reflection hf‚ÇÅ).toEquiv '' Œ¶ ‚äÜ Œ¶ at hf‚ÇÇ
  rw [‚Üê hŒ¶‚ÇÅ.equiv_image_eq_iff_subset] at hf‚ÇÇ
  change (reflection hg‚ÇÅ).toEquiv '' Œ¶ ‚äÜ Œ¶ at hg‚ÇÇ
  rw [‚Üê hŒ¶‚ÇÅ.equiv_image_eq_iff_subset] at hg‚ÇÇ
  exact eq_of_preReflection_image_eq hx hŒ¶‚ÇÅ hŒ¶‚ÇÇ hf‚ÇÅ hf‚ÇÇ hg‚ÇÅ hg‚ÇÇ

lemma eq_of_preReflection_image_eq' [CharZero R] [NoZeroSMulDivisors R M]
    {x : M} (hx : x ‚â† 0)
    {Œ¶ : Set M} (hŒ¶‚ÇÅ : Œ¶.Finite) (hx' : x ‚àà span R Œ¶)
    {f g : Dual R M} (hf‚ÇÅ : f x = 2) (hf‚ÇÇ : preReflection x f '' Œ¶ = Œ¶)
                     (hg‚ÇÅ : g x = 2) (hg‚ÇÇ : preReflection x g '' Œ¶ = Œ¶) :
    (span R Œ¶).subtype.dualMap f = (span R Œ¶).subtype.dualMap g := by
  let Œ¶' : Set (span R Œ¶) := range (inclusion <| Submodule.subset_span (R := R) (s := Œ¶))
  have hŒ¶'‚ÇÅ : Œ¶'.Finite := by
    rw [‚Üê finite_coe_iff] at hŒ¶‚ÇÅ; exact finite_range (inclusion Submodule.subset_span)
  have hŒ¶'‚ÇÇ : span R Œ¶' = ‚ä§ := by simp
  let x' : span R Œ¶ := ‚ü®x, hx'‚ü©
  have hx' : x' ‚â† 0 := Subtype.ne_of_val_ne hx
  let f' := (span R Œ¶).subtype.dualMap f
  let g' := (span R Œ¶).subtype.dualMap g
  replace hf‚ÇÇ : preReflection x' f' '' Œ¶' = Œ¶' := by
    ext ‚ü®y, hy‚ü©
    -- Fix (and abstract) this ü§¢ü§Æ proof
    simp only [preReflection_apply, LinearMap.dualMap_apply, Submodule.coeSubtype,
      SetLike.mk_smul_mk, range_inclusion, SetLike.coe_sort_coe, mem_image, mem_setOf_eq,
      Subtype.exists, exists_and_left]
    simp_rw [Subtype.ext_iff]
    simp only [AddSubgroupClass.coe_sub, exists_prop]
    simp_rw [‚Üê preReflection_apply]
    conv_rhs => rw [‚Üê hf‚ÇÇ]
    simp only [mem_image]
    refine exists_congr fun z ‚Ü¶ ?_
    simp only [and_congr_right_iff, and_iff_right_iff_imp]
    exact fun hz _ ‚Ü¶ Submodule.subset_span hz
  replace hg‚ÇÇ : preReflection x' g' '' Œ¶' = Œ¶' := by
    ext ‚ü®y, hy‚ü©
    -- Fix (and abstract) this ü§¢ü§Æ proof
    simp only [preReflection_apply, LinearMap.dualMap_apply, Submodule.coeSubtype,
      SetLike.mk_smul_mk, range_inclusion, SetLike.coe_sort_coe, mem_image, mem_setOf_eq,
      Subtype.exists, exists_and_left]
    simp_rw [Subtype.ext_iff]
    simp only [AddSubgroupClass.coe_sub, exists_prop]
    simp_rw [‚Üê preReflection_apply]
    conv_rhs => rw [‚Üê hg‚ÇÇ]
    simp only [mem_image]
    refine exists_congr fun z ‚Ü¶ ?_
    simp only [and_congr_right_iff, and_iff_right_iff_imp]
    exact fun hz _ ‚Ü¶ Submodule.subset_span hz
  exact eq_of_preReflection_image_eq hx' hŒ¶'‚ÇÅ hŒ¶'‚ÇÇ (f := f') (g := g') hf‚ÇÅ hf‚ÇÇ hg‚ÇÅ hg‚ÇÇ

end Module
