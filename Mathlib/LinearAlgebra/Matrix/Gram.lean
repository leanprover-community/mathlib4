/-
Copyright (c) 2025 Peter Pfaffelhuber. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Peter Pfaffelhuber
-/
import Mathlib.LinearAlgebra.Matrix.PosDef
import Mathlib.Analysis.InnerProductSpace.Basic
import Mathlib.MeasureTheory.Function.LpSpace.Indicator


/-! # Gram Matrices

This file defines Gram matrices and proves their positive semi-definiteness.
Results require `ùïú = ‚Ñù` or `‚ÑÇ`.

## Main definition

* `Matrix.Gram` : a matrix `M : Matrix n n ùïú` is a Gram matrix if
`M i j = ‚ü™v i, v j‚ü´` for all `i j : n`, where
`v : n ‚Üí E` for an `InnerProductSpace E`.

## Main results

* `Matrix.Gram.PosSemidef` Gram matrices are positive semi-definite.
-/

open RCLike Real Matrix Topology ComplexConjugate Finsupp

open LinearMap (BilinForm)

variable {E F n : Type*}

open scoped InnerProductSpace

variable [SeminormedAddCommGroup E] [InnerProductSpace ‚Ñù E]

local notation "‚ü™" x ", " y "‚ü´" => @inner ‚Ñù _ _ x y

namespace Matrix

/-- The entries of a Gram matrix are inner products of vectors in an inner product space. -/
def Gram (M : Matrix n n ‚Ñù) (v : n ‚Üí E) : Prop := ‚àÄ i j, M i j = ‚ü™v i, v j‚ü´

namespace Gram

theorem entry {M : Matrix n n ‚Ñù} {v : n ‚Üí E} (hM : M.Gram v) (i j : n) : M i j = ‚ü™v i, v j‚ü´ :=
  hM i j

lemma IsHermitian (M : Matrix n n ‚Ñù) {v : n ‚Üí E} (hM : Gram M v) : M.IsHermitian := by
  refine IsHermitian.ext_iff.mpr ?_
  intro i j
  rw [hM, hM]
  simp only [RCLike.star_def, inner_conj_symm]

variable {m : Type*} [Fintype m] [Fintype n]

example (a : ‚Ñù) (x : m ‚Üí ‚Ñù) : a * ‚àë i, x i = ‚àë i, a * (x i) := by
  rw [Finset.mul_sum]

example (M : Matrix m n ‚Ñù) (x : m ‚Üí ‚Ñù) (y : n ‚Üí ‚Ñù) :
    x ‚¨ù·µ• M *·µ• y = ‚àë i, ‚àë j, (x i) * (M i j) * (y j) := by
  simp_rw [dotProduct, mul_assoc, ‚Üê Finset.mul_sum, mulVec]
  rfl

theorem PosSemidef (M : Matrix n n ‚Ñù) {v : n ‚Üí E} (hM : M.Gram v) : PosSemidef M := by
  refine ‚ü®Gram.IsHermitian M hM, fun x ‚Ü¶ ?_‚ü©
  let y := ‚àë (i : n), x i ‚Ä¢ v i
  have h : inner y y = (star x ‚¨ù·µ• M *·µ• x) := by
    calc
      inner y y = (‚àë (i : n), ‚àë (j : n), (x i) * (x j) * (inner (v i) (v j))) := by
          simp_rw [y, sum_inner, inner_sum, inner_smul_left, inner_smul_right, mul_assoc]
          simp only [conj_trivial, y]
        _ = (‚àë (i : n), ‚àë (j : n), (x i) * (x j) * (M i j)) := by
          simp_rw [hM.entry]
        _ = (x ‚¨ù·µ• M *·µ• x) := by
          simp_rw [dotProduct, mul_assoc, ‚Üê Finset.mul_sum, mulVec, dotProduct, mul_comm]
  refine nonneg_iff.mpr ‚ü®?_, ?_‚ü©
  ¬∑ rw [‚Üê h]
    exact real_inner_self_nonneg
  ¬∑ simp only [im_to_real]


end Gram

end Matrix

open Set NNReal MeasureTheory

def covariance (J : Finset NNReal) : Matrix J J ‚Ñù‚â•0 :=
  (fun i j => i ‚äì j)

variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]

example (t : ‚Ñù) : MeasurableSet (Icc 0 t) := by exact measurableSet_Icc

example [MeasurableSpace E] {Œº : Measure E} [TopologicalSpace E] [IsFiniteMeasureOnCompacts Œº]
    {K : Set E} (hK : IsCompact K) : Œº K < ‚ä§ := by
  exact IsCompact.measure_lt_top hK



example [Preorder E] [OrderBot E] [MeasurableSpace E] {Œº : Measure E} [TopologicalSpace E]
  [CompactIccSpace E] [IsFiniteMeasureOnCompacts Œº] (t : E) :
      Œº (Icc ‚ä• t) ‚â† ‚ä§ :=
    by
  exact IsCompact.measure_ne_top isCompact_Icc

example [Preorder E] [OrderBot E] [MeasurableSpace E] [TopologicalSpace E]
[OpensMeasurableSpace E]  [OrderClosedTopology E] (t : E) :
      (MeasurableSet (Icc ‚ä• t)) :=
    by
  apply measurableSet_Icc

example [Lattice E] [OrderBot E] (s t : E) : (Icc ‚ä• s) ‚à© (Icc ‚ä• t) = (Icc ‚ä• (s ‚äì t)) := by
  have h : ‚ä• = ((‚ä• : E) ‚äî ‚ä•)  := by
    simp only [le_refl, sup_of_le_left]
  nth_rewrite 3 [h]
  rw [Icc_inter_Icc]

def v [NormedAddCommGroup F] [Lattice E] [OrderBot E] [MeasurableSpace E] [TopologicalSpace E]
  [CompactIccSpace E] {Œº : Measure E} {_ : IsFiniteMeasureOnCompacts Œº} : E ‚Üí‚ÇÇ[Œº] F := by
    have h (t : E) := isCompact_Icc (a := ‚ä•) (b := t)
    have h' (t : E) : Œº (Icc ‚ä• t) ‚â† ‚ä§ := IsCompact.measure_ne_top (h t)
    -- IsCompact.measure_ne_top <|
    exact indicatorConstLp 2  measurableSet_Icc -- (IsCompact.measure_ne_top isCompact_Icc)
