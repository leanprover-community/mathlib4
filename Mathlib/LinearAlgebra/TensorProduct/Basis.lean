/-
Copyright (c) 2021 Jakob von Raumer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jakob von Raumer
-/
import Mathlib.LinearAlgebra.DirectSum.Finsupp
import Mathlib.LinearAlgebra.FinsuppVectorSpace

/-!
# Bases and dimensionality of tensor products of modules

These can not go into `LinearAlgebra.TensorProduct` since they depend on
`LinearAlgebra.FinsuppVectorSpace` which in turn imports `LinearAlgebra.TensorProduct`.
-/


noncomputable section

open Set LinearMap Submodule

open scoped TensorProduct

section CommSemiring

variable {R : Type*} {S : Type*} {M : Type*} {N : Type*} {Œπ : Type*} {Œ∫ : Type*}
  [CommSemiring R] [Semiring S] [Algebra R S] [AddCommMonoid M] [Module R M] [Module S M]
  [IsScalarTower R S M] [AddCommMonoid N] [Module R N]

/-- If `b : Œπ ‚Üí M` and `c : Œ∫ ‚Üí N` are bases then so is `fun i ‚Ü¶ b i.1 ‚äó‚Çú c i.2 : Œπ √ó Œ∫ ‚Üí M ‚äó N`. -/
def Basis.tensorProduct (b : Basis Œπ S M) (c : Basis Œ∫ R N) :
    Basis (Œπ √ó Œ∫) S (M ‚äó[R] N) :=
  Finsupp.basisSingleOne.map
    ((TensorProduct.AlgebraTensorModule.congr b.repr c.repr).trans <|
        (finsuppTensorFinsupp R S _ _ _ _).trans <|
          Finsupp.lcongr (Equiv.refl _) (TensorProduct.AlgebraTensorModule.rid R S S)).symm

@[simp]
theorem Basis.tensorProduct_apply (b : Basis Œπ S M) (c : Basis Œ∫ R N) (i : Œπ) (j : Œ∫) :
    Basis.tensorProduct b c (i, j) = b i ‚äó‚Çú c j := by
  simp [Basis.tensorProduct]

theorem Basis.tensorProduct_apply' (b : Basis Œπ S M) (c : Basis Œ∫ R N) (i : Œπ √ó Œ∫) :
    Basis.tensorProduct b c i = b i.1 ‚äó‚Çú c i.2 := by
  simp [Basis.tensorProduct]

@[simp]
theorem Basis.tensorProduct_repr_tmul_apply (b : Basis Œπ S M) (c : Basis Œ∫ R N) (m : M) (n : N)
    (i : Œπ) (j : Œ∫) :
    (Basis.tensorProduct b c).repr (m ‚äó‚Çú n) (i, j) = c.repr n j ‚Ä¢ b.repr m i := by
  simp [Basis.tensorProduct, mul_comm]

variable (S : Type*) [Semiring S] [Algebra R S]

/-- The lift of an `R`-basis of `M` to an `S`-basis of the base change `S ‚äó[R] M`. -/
noncomputable
def Basis.baseChange (b : Basis Œπ R M) : Basis Œπ S (S ‚äó[R] M) :=
  ((Basis.singleton Unit S).tensorProduct b).reindex (Equiv.punitProd Œπ)

@[simp]
lemma Basis.baseChange_repr_tmul (b : Basis Œπ R M) (x y i) :
    (b.baseChange S).repr (x ‚äó‚Çú y) i = b.repr y i ‚Ä¢ x := by
  simp [Basis.baseChange, Basis.tensorProduct]

@[simp]
lemma Basis.baseChange_apply (b : Basis Œπ R M) (i) :
    b.baseChange S i = 1 ‚äó‚Çú b i := by
  simp [Basis.baseChange, Basis.tensorProduct]

section

variable (‚Ñ¨ : Basis Œπ R M) (ùíû : Basis Œ∫ R N) (x : M ‚äó[R] N)

/-- Elements in `M ‚äó N` can be represented by sum of elements in `M` tensor elements of basis of
`N`. -/
lemma TensorProduct.eq_repr_basis_right :
    ‚àÉ b : Œ∫ ‚Üí‚ÇÄ M, b.sum (fun i m => m ‚äó‚Çú ùíû i) = x := by
  classical
  induction x using TensorProduct.induction_on with
  | zero => exact ‚ü®0, by simp‚ü©
  | tmul m n =>
    use ùíû.repr n |>.mapRange (fun (r : R) => r ‚Ä¢ m) (by simp)
    simp only [Finsupp.mapRange, zero_tmul, implies_true, Finsupp.onFinset_sum, Function.comp_apply,
      smul_tmul]
    rw [‚Üê tmul_sum]
    congr
    conv_rhs => rw [‚Üê Basis.linearCombination_repr ùíû n]
    rfl
  | add x y hx hy =>
    rcases hx with ‚ü®x, rfl‚ü©
    rcases hy with ‚ü®y, rfl‚ü©
    use x + y
    rw [Finsupp.sum_add_index]
    ¬∑ simp
    ¬∑ intro i _; simp [add_tmul]

/-- Elements in `M ‚äó N` can be represented by sum of elements of basis of `M` tensor elements of
  `N`.-/
lemma TensorProduct.eq_repr_basis_left :
    ‚àÉ (c : Œπ ‚Üí‚ÇÄ N), (c.sum fun i n => ‚Ñ¨ i ‚äó‚Çú n) = x := by
  obtain ‚ü®c, hc‚ü© := TensorProduct.eq_repr_basis_right ‚Ñ¨ (TensorProduct.comm R M N x)
  refine ‚ü®c, ?_‚ü©
  apply_fun TensorProduct.comm R M N using (TensorProduct.comm R M N).injective
  simp only [Finsupp.sum, map_sum, comm_tmul, ‚Üê hc]

lemma TensorProduct.sum_tmul_basis_left_injective :
    Function.Injective <| Finsupp.lsum R fun i => (TensorProduct.mk R M N) (‚Ñ¨ i) := by
  intro b b' h
  classical
  refine (TensorProduct.congr ‚Ñ¨.repr (LinearEquiv.refl R N) ‚â™‚â´‚Çó
    (finsuppScalarLeft R N Œπ)).symm.injective ?_
  rw [‚Üê b.sum_single, ‚Üê b'.sum_single, Finsupp.sum, map_sum, Finsupp.sum, map_sum]
  simpa

lemma TensorProduct.sum_tmul_basis_left_eq_zero
    (b : Œπ ‚Üí‚ÇÄ N) (h : (b.sum fun i n => ‚Ñ¨ i ‚äó‚Çú[R] n) = 0) : b = 0 :=
  TensorProduct.sum_tmul_basis_left_injective ‚Ñ¨ (a‚ÇÅ := b) (a‚ÇÇ := 0) (h.trans (by simp))

lemma TensorProduct.sum_tmul_basis_right_injective :
    Function.Injective <| Finsupp.lsum R fun i => (TensorProduct.mk R M N).flip (ùíû i):= by
  intro b b' h
  classical
  refine (TensorProduct.congr (LinearEquiv.refl R M) ùíû.repr ‚â™‚â´‚Çó
    (finsuppScalarRight R M Œ∫)).symm.injective ?_
  rw [‚Üê b.sum_single, ‚Üê b'.sum_single, Finsupp.sum, map_sum, Finsupp.sum, map_sum]
  simpa

lemma TensorProduct.sum_tmul_basis_right_eq_zero
    (b : Œ∫ ‚Üí‚ÇÄ M) (h : (b.sum fun i m => m ‚äó‚Çú[R] ùíû i) = 0) : b = 0 :=
  TensorProduct.sum_tmul_basis_right_injective ùíû (a‚ÇÅ := b) (a‚ÇÇ := 0) (h.trans (by simp))


end

end CommSemiring

end
