import Mathlib

/-!
# Banach open mapping theorem

This file contains the Banach open mapping theorem, i.e., the fact that a bijective
bounded linear map between Banach spaces has a bounded inverse.
-/

open Function Metric Set Filter Finset Topology NNReal

open LinearMap (range ker)

variable {ùïú ùïú' : Type*} [NontriviallyNormedField ùïú] [NontriviallyNormedField ùïú'] {œÉ : ùïú ‚Üí+* ùïú'}
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
variable {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú' F] (f : E ‚ÜíSL[œÉ] F)
variable {œÉ' : ùïú' ‚Üí+* ùïú} [RingHomInvPair œÉ œÉ'] [RingHomIsometric œÉ] [RingHomIsometric œÉ']

namespace ContinuousLinearMap

include œÉ' in
/-- First step of the proof of the Banach open mapping theorem (using completeness of `F`):
by Baire's theorem, there exists a ball in `E` whose image closure has nonempty interior.
Rescaling everything, it follows that any `y ‚àà F` is arbitrarily well approached by
images of elements of norm at most `C * ‚Äñy‚Äñ`.
For further use, we will only need such an element whose image
is within distance `‚Äñy‚Äñ/2` of `y`, to apply an iterative process. -/
theorem exists_approx_preimage_norm_le'
    (h : ‚àÉ (n : ‚Ñï) (x : _), x ‚àà interior (closure (f '' ball 0 n))) :
    ‚àÉ C ‚â• 0, ‚àÄ y, ‚àÉ x, dist (f x) y ‚â§ 1 / 2 * ‚Äñy‚Äñ ‚àß ‚Äñx‚Äñ ‚â§ C * ‚Äñy‚Äñ := by
  simp only [mem_interior_iff_mem_nhds, Metric.mem_nhds_iff] at h
  rcases h with ‚ü®n, a, Œµ, ‚ü®Œµpos, H‚ü©‚ü©
  rcases NormedField.exists_one_lt_norm ùïú with ‚ü®c, hc‚ü©
  refine ‚ü®(Œµ / 2)‚Åª¬π * ‚Äñc‚Äñ * 2 * n, by positivity, fun y => ?_‚ü©
  rcases eq_or_ne y 0 with rfl | hy
  ¬∑ simp
  ¬∑ have hc' : 1 < ‚ÄñœÉ c‚Äñ := by simp only [RingHomIsometric.norm_map, hc]
    rcases rescale_to_shell hc' (half_pos Œµpos) hy with ‚ü®d, hd, ydlt, -, dinv‚ü©
    let Œ¥ := ‚Äñd‚Äñ * ‚Äñy‚Äñ / 4
    have Œ¥pos : 0 < Œ¥ := by positivity
    have : a + d ‚Ä¢ y ‚àà ball a Œµ := by
      simp [dist_eq_norm, lt_of_le_of_lt ydlt.le (half_lt_self Œµpos)]
    rcases Metric.mem_closure_iff.1 (H this) _ Œ¥pos with ‚ü®z‚ÇÅ, z‚ÇÅim, h‚ÇÅ‚ü©
    rcases (mem_image _ _ _).1 z‚ÇÅim with ‚ü®x‚ÇÅ, hx‚ÇÅ, xz‚ÇÅ‚ü©
    rw [‚Üê xz‚ÇÅ] at h‚ÇÅ
    rw [mem_ball, dist_eq_norm, sub_zero] at hx‚ÇÅ
    have : a ‚àà ball a Œµ := by
      simp only [mem_ball, dist_self]
      exact Œµpos
    rcases Metric.mem_closure_iff.1 (H this) _ Œ¥pos with ‚ü®z‚ÇÇ, z‚ÇÇim, h‚ÇÇ‚ü©
    rcases (mem_image _ _ _).1 z‚ÇÇim with ‚ü®x‚ÇÇ, hx‚ÇÇ, xz‚ÇÇ‚ü©
    rw [‚Üê xz‚ÇÇ] at h‚ÇÇ
    rw [mem_ball, dist_eq_norm, sub_zero] at hx‚ÇÇ
    let x := x‚ÇÅ - x‚ÇÇ
    have I : ‚Äñf x - d ‚Ä¢ y‚Äñ ‚â§ 2 * Œ¥ :=
      calc
        ‚Äñf x - d ‚Ä¢ y‚Äñ = ‚Äñf x‚ÇÅ - (a + d ‚Ä¢ y) - (f x‚ÇÇ - a)‚Äñ := by
          congr 1
          simp only [x, f.map_sub]
          abel
        _ ‚â§ ‚Äñf x‚ÇÅ - (a + d ‚Ä¢ y)‚Äñ + ‚Äñf x‚ÇÇ - a‚Äñ := norm_sub_le _ _
        _ ‚â§ Œ¥ + Œ¥ := by rw [dist_eq_norm'] at h‚ÇÅ h‚ÇÇ; gcongr
        _ = 2 * Œ¥ := (two_mul _).symm
    have J : ‚Äñf (œÉ' d‚Åª¬π ‚Ä¢ x) - y‚Äñ ‚â§ 1 / 2 * ‚Äñy‚Äñ :=
      calc
        ‚Äñf (œÉ' d‚Åª¬π ‚Ä¢ x) - y‚Äñ = ‚Äñd‚Åª¬π ‚Ä¢ f x - (d‚Åª¬π * d) ‚Ä¢ y‚Äñ := by
          rwa [f.map_smul‚Çõ‚Çó _, inv_mul_cancel‚ÇÄ, one_smul, map_inv‚ÇÄ, map_inv‚ÇÄ,
            RingHomCompTriple.comp_apply, RingHom.id_apply]
        _ = ‚Äñd‚Åª¬π ‚Ä¢ (f x - d ‚Ä¢ y)‚Äñ := by rw [mul_smul, smul_sub]
        _ = ‚Äñd‚Äñ‚Åª¬π * ‚Äñf x - d ‚Ä¢ y‚Äñ := by rw [norm_smul, norm_inv]
        _ ‚â§ ‚Äñd‚Äñ‚Åª¬π * (2 * Œ¥) := by gcongr
        _ = ‚Äñd‚Äñ‚Åª¬π * ‚Äñd‚Äñ * ‚Äñy‚Äñ / 2 := by
          simp only [Œ¥]
          ring
        _ = ‚Äñy‚Äñ / 2 := by
          simp [norm_eq_zero, hd]
        _ = 1 / 2 * ‚Äñy‚Äñ := by ring
    rw [‚Üê dist_eq_norm] at J
    have K : ‚ÄñœÉ' d‚Åª¬π ‚Ä¢ x‚Äñ ‚â§ (Œµ / 2)‚Åª¬π * ‚Äñc‚Äñ * 2 * ‚Üën * ‚Äñy‚Äñ :=
      calc
        ‚ÄñœÉ' d‚Åª¬π ‚Ä¢ x‚Äñ = ‚Äñd‚Äñ‚Åª¬π * ‚Äñx‚ÇÅ - x‚ÇÇ‚Äñ := by rw [norm_smul, RingHomIsometric.norm_map, norm_inv]
        _ ‚â§ (Œµ / 2)‚Åª¬π * ‚Äñc‚Äñ * ‚Äñy‚Äñ * (n + n) := by
          gcongr
          ¬∑ simpa using dinv
          ¬∑ exact le_trans (norm_sub_le _ _) (by gcongr)
        _ = (Œµ / 2)‚Åª¬π * ‚Äñc‚Äñ * 2 * ‚Üën * ‚Äñy‚Äñ := by ring
    exact ‚ü®œÉ' d‚Åª¬π ‚Ä¢ x, J, K‚ü©

variable [CompleteSpace E]

section
include œÉ'

/-- The Banach open mapping theorem: if a bounded linear map between Banach spaces is onto, then
any point has a preimage with controlled norm. -/
theorem exists_preimage_norm_le' (h : ‚àÉ (n : ‚Ñï) (x : _), x ‚àà interior (closure (f '' ball 0 n))) :
    ‚àÉ C > 0, ‚àÄ y, ‚àÉ x, f x = y ‚àß ‚Äñx‚Äñ ‚â§ C * ‚Äñy‚Äñ := by
  obtain ‚ü®C, C0, hC‚ü© := exists_approx_preimage_norm_le' f h
  /- Second step of the proof: starting from `y`, we want an exact preimage of `y`. Let `g y` be
    the approximate preimage of `y` given by the first step, and `h y = y - f(g y)` the part that
    has no preimage yet. We will iterate this process, taking the approximate preimage of `h y`,
    leaving only `h^2 y` without preimage yet, and so on. Let `u n` be the approximate preimage
    of `h^n y`. Then `u` is a converging series, and by design the sum of the series is a
    preimage of `y`. This uses completeness of `E`. -/
  choose g hg using hC
  let h y := y - f (g y)
  have hle : ‚àÄ y, ‚Äñh y‚Äñ ‚â§ 1 / 2 * ‚Äñy‚Äñ := by
    intro y
    rw [‚Üê dist_eq_norm, dist_comm]
    exact (hg y).1
  refine ‚ü®2 * C + 1, by linarith, fun y => ?_‚ü©
  have hnle : ‚àÄ n : ‚Ñï, ‚Äñh^[n] y‚Äñ ‚â§ (1 / 2) ^ n * ‚Äñy‚Äñ := by
    intro n
    induction n with
    | zero => simp only [one_div, one_mul, iterate_zero_apply, pow_zero, le_rfl]
    | succ n IH =>
      rw [iterate_succ']
      apply le_trans (hle _) _
      rw [pow_succ', mul_assoc]
      gcongr
  let u n := g (h^[n] y)
  have ule : ‚àÄ n, ‚Äñu n‚Äñ ‚â§ (1 / 2) ^ n * (C * ‚Äñy‚Äñ) := fun n ‚Ü¶ by
    apply le_trans (hg _).2
    calc
      C * ‚Äñh^[n] y‚Äñ ‚â§ C * ((1 / 2) ^ n * ‚Äñy‚Äñ) := mul_le_mul_of_nonneg_left (hnle n) C0
      _ = (1 / 2) ^ n * (C * ‚Äñy‚Äñ) := by ring
  have sNu : Summable fun n => ‚Äñu n‚Äñ := by
    refine .of_nonneg_of_le (fun n => norm_nonneg _) ule ?_
    exact Summable.mul_right _ (summable_geometric_of_lt_one (by simp) (by norm_num))
  have su : Summable u := sNu.of_norm
  let x := tsum u
  have x_ineq : ‚Äñx‚Äñ ‚â§ (2 * C + 1) * ‚Äñy‚Äñ :=
    calc
      ‚Äñx‚Äñ ‚â§ ‚àë' n, ‚Äñu n‚Äñ := norm_tsum_le_tsum_norm sNu
      _ ‚â§ ‚àë' n, (1 / 2) ^ n * (C * ‚Äñy‚Äñ) :=
        sNu.tsum_le_tsum ule <| Summable.mul_right _ summable_geometric_two
      _ = (‚àë' n, (1 / 2) ^ n) * (C * ‚Äñy‚Äñ) := tsum_mul_right
      _ = 2 * C * ‚Äñy‚Äñ := by rw [tsum_geometric_two, mul_assoc]
      _ ‚â§ 2 * C * ‚Äñy‚Äñ + ‚Äñy‚Äñ := le_add_of_nonneg_right (norm_nonneg y)
      _ = (2 * C + 1) * ‚Äñy‚Äñ := by ring
  have fsumeq : ‚àÄ n : ‚Ñï, f (‚àë i ‚àà Finset.range n, u i) = y - h^[n] y := by
    intro n
    induction n with
    | zero => simp [f.map_zero]
    | succ n IH => rw [sum_range_succ, f.map_add, IH, iterate_succ_apply', sub_add]
  have : Tendsto (fun n => ‚àë i ‚àà Finset.range n, u i) atTop (ùìù x) := su.hasSum.tendsto_sum_nat
  have L‚ÇÅ : Tendsto (fun n => f (‚àë i ‚àà Finset.range n, u i)) atTop (ùìù (f x)) :=
    (f.continuous.tendsto _).comp this
  simp only [fsumeq] at L‚ÇÅ
  have L‚ÇÇ : Tendsto (fun n => y - h^[n] y) atTop (ùìù (y - 0)) := by
    refine tendsto_const_nhds.sub ?_
    rw [tendsto_iff_norm_sub_tendsto_zero]
    simp only [sub_zero]
    refine squeeze_zero (fun _ => norm_nonneg _) hnle ?_
    rw [‚Üê zero_mul ‚Äñy‚Äñ]
    refine (_root_.tendsto_pow_atTop_nhds_zero_of_lt_one ?_ ?_).mul tendsto_const_nhds <;> norm_num
  have feq : f x = y - 0 := tendsto_nhds_unique L‚ÇÅ L‚ÇÇ
  rw [sub_zero] at feq
  exact ‚ü®x, feq, x_ineq‚ü©

/-- The Banach open mapping theorem: a surjective bounded linear map between Banach spaces is
open. -/
protected theorem isOpenMap' (h : ‚àÉ (n : ‚Ñï) (x : _), x ‚àà interior (closure (f '' ball 0 n))) :
    IsOpenMap f := by
  intro s hs
  rcases exists_preimage_norm_le' f h with ‚ü®C, Cpos, hC‚ü©
  refine isOpen_iff.2 fun y yfs => ?_
  rcases yfs with ‚ü®x, xs, fxy‚ü©
  rcases isOpen_iff.1 hs x xs with ‚ü®Œµ, Œµpos, hŒµ‚ü©
  refine ‚ü®Œµ / C, div_pos Œµpos Cpos, fun z hz => ?_‚ü©
  rcases hC (z - y) with ‚ü®w, wim, wnorm‚ü©
  have : f (x + w) = z := by rw [f.map_add, wim, fxy, add_sub_cancel]
  rw [‚Üê this]
  have : x + w ‚àà ball x Œµ :=
    calc
      dist (x + w) x = ‚Äñw‚Äñ := by
        simp
      _ ‚â§ C * ‚Äñz - y‚Äñ := wnorm
      _ < C * (Œµ / C) := by
        apply mul_lt_mul_of_pos_left _ Cpos
        rwa [mem_ball, dist_eq_norm] at hz
      _ = Œµ := mul_div_cancel‚ÇÄ _ (ne_of_gt Cpos)
  exact Set.mem_image_of_mem _ (hŒµ this)

end

example {Œ± Œ≤ : Type*} [NormedAddCommGroup Œ±] [NormedAddCommGroup Œ≤] [InnerProductSpace ‚Ñù Œ±]
    [InnerProductSpace ‚Ñù Œ≤] [CompleteSpace Œ≤] [CompleteSpace Œ±] (T : Œ± ‚ÜíL[‚Ñù] Œ≤) {Œ¥ : ‚Ñù} (h0 : Œ¥ > 0)
    (h : closure (T '' (Metric.ball (0 : Œ±) 1)) ‚äá Metric.ball (0 : Œ≤) Œ¥) :
    T '' (Metric.ball (0 : Œ±) 1) ‚äá Metric.ball (0 : Œ≤) Œ¥ := by
  have int_t : interior (closure (‚áëT '' Metric.ball 0 1)) ‚äá Metric.ball 0 Œ¥ :=
    (IsOpen.subset_interior_iff Metric.isOpen_ball).mpr h
  have convex_t : Convex ‚Ñù ((T '' (Metric.ball (0 : Œ±) 1))) :=
    (convex_ball 0 1).is_linear_image T.isBoundedLinearMap.toIsLinearMap
  have : IsOpenMap T := by
    apply ContinuousLinearMap.isOpenMap'
    use 1, 0
    exact mem_interior.mpr ‚ü®ball 0 Œ¥, by simpa, by simpa‚ü©
  have : interior (closure (‚áëT '' ball 0 1)) = interior (‚áëT '' ball 0 1) := by
    apply Convex.interior_closure_eq_interior_of_nonempty_interior convex_t
    use 0
    exact mem_interior.mpr ‚ü®‚áëT '' ball 0 1, by simp, this (ball 0 1) (isOpen_ball), by use 0; simp‚ü©
  rw [this] at int_t
  exact fun _ a => interior_subset (int_t a)
