# DO NOT EDIT THIS FILE!!!

# This file is automatically generated by mk_build_yml.sh
# Edit build.yml.in instead and run mk_build_yml.sh to update.

# Forks of mathlib and other projects should be able to use build_fork.yml directly
# The jobs in this file run on self-hosted workers and will not be run from external forks

on:
  push:
    branches-ignore:
      # ignore tmp branches used by bors
      - 'staging.tmp*'
      - 'trying.tmp*'
      - 'staging*.tmp'
      - 'nolints'
      # ignore staging branch used by bors, this is handled by bors.yml
      - 'staging'

name: continuous integration

jobs:
  # Cancels previous runs of jobs in this file
  cancel:
    if: github.repository == 'leanprover-community/mathlib4'
    name: 'Cancel Previous Runs (CI)'
    runs-on: ubuntu-latest
    # timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.11.0
        with:
          all_but_latest: true
          access_token: ${{ github.token }}

  style_lint:
    if: github.repository == 'leanprover-community/mathlib4'
    name: Lint style
    runs-on: ubuntu-latest
    steps:
      - name: cleanup
        run: |
          find . -name . -o -prune -exec rm -rf -- {} +

      - uses: actions/checkout@v3

      - name: Install bibtool
        if: ${{ 'ubuntu-latest' == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y bibtool

      - name: install Python
        if: ${{ 'ubuntu-latest' == 'ubuntu-latest' }}
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: lint
        run: |
          ./scripts/lint-style.sh

      - name: lint references.bib
        run: |
          ./scripts/lint-bib.sh

  check_imported:
    if: github.repository == 'leanprover-community/mathlib4'
    name: Check all files imported
    runs-on: ubuntu-latest
    steps:
      - name: cleanup
        run: |
          find . -name . -o -prune -exec rm -rf -- {} +

      - uses: actions/checkout@v3

      - name: update Mathlib.lean
        run: |
          git ls-files 'Mathlib/*.lean' | LC_ALL=C sort | sed 's/\.lean//;s,/,.,g;s/^/import /' > Mathlib.lean

      - name: update MathlibExtras.lean
        run: |
          git ls-files 'MathlibExtras/*.lean' | LC_ALL=C sort | sed 's/\.lean//;s,/,.,g;s/^/import /' > MathlibExtras.lean

      - name: update Mathlib/Tactic.lean
        run: |
          git ls-files 'Mathlib/Tactic/*.lean' | LC_ALL=C sort | sed 's/\.lean//;s,/,.,g;s/^/import /' > Mathlib/Tactic.lean

      - name: update Counterexamples.lean
        run: |
          git ls-files 'Counterexamples/*.lean' | LC_ALL=C sort | sed 's/\.lean//;s,/,.,g;s/^/import /' > Counterexamples.lean

      - name: update Archive.lean
        run: |
          git ls-files 'Archive/*.lean' | LC_ALL=C sort | sed 's/\.lean//;s,/,.,g;s/^/import /' > Archive.lean

      - name: check that all files are imported
        run: git diff --exit-code

  build:
    if: github.repository == 'leanprover-community/mathlib4'
    name: Build
    runs-on: pr
    steps:
      - name: cleanup
        run: |
          find . -name . -o -prune -exec rm -rf -- {} +

      # The Hoskinson runners may not have jq installed, so do that now.
      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v1.0.1

      - name: install elan
        run: |
          set -o pipefail
          curl -sSfL https://github.com/leanprover/elan/releases/download/v1.4.2/elan-x86_64-unknown-linux-gnu.tar.gz | tar xz
          ./elan-init -y --default-toolchain none
          echo "$HOME/.elan/bin" >> $GITHUB_PATH

      - uses: actions/checkout@v3

      # We update `Mathlib.lean` as a convenience here,
      # but verify that this didn't change anything in the `check_imported` job.
      - name: update Mathlib.lean
        run: |
          find Mathlib -name "*.lean" | LC_ALL=C sort | sed 's/\.lean//;s,/,.,g;s/^/import /' > Mathlib.lean

      - name: If using a lean-pr-release toolchain, uninstall
        run: |
          if [[ `cat lean-toolchain` =~ ^leanprover/lean4-pr-releases:pr-release-[0-9]+$ ]]; then
            echo "Uninstalling transient toolchain `cat lean-toolchain`"
            elan toolchain uninstall `cat lean-toolchain`
          fi

      - name: get cache
        run: |
          lake exe cache clean
          lake exe cache get

      - name: build mathlib
        id: build
        uses: liskin/gh-problem-matcher-wrap@v2
        with:
          linters: gcc
          run: |
            bash -o pipefail -c "env LEAN_ABORT_ON_PANIC=1 lake build -KCI | tee stdout.log"

      - name: check for noisy stdout lines
        run: |
          ! grep "stdout:" stdout.log

      - name: build library_search cache
        run: lake build -KCI MathlibExtras

      - name: upload cache
        if: always()
        run: |
          lake exe cache commit || true
          lake exe cache put || true
        env:
          MATHLIB_CACHE_SAS: ${{ secrets.MATHLIB_CACHE_SAS }}

      - name: build archive
        run: lake build Archive

      - name: build counterexamples
        run: lake build Counterexamples

      - name: check declarations in db files
        run: |
          python3 scripts/yaml_check.py docs/100.yaml docs/overview.yaml docs/undergrad.yaml
          build/bin/checkYaml

      - name: test mathlib
        id: test
        run: make -j 8 test

      - name: lint mathlib
        id: lint
        uses: liskin/gh-problem-matcher-wrap@v2
        with:
          linters: gcc
          run: env LEAN_ABORT_ON_PANIC=1 make lint

      - name: Post comments for lean-pr-testing branch
        if: always()
        env:
          TOKEN: ${{ secrets.LEAN_PR_TESTING }}
          GITHUB_CONTEXT: ${{ toJson(github) }}
          WORKFLOW_URL: ${{ github.event.workflow_run.html_url }}
        run: |
          # Extract branch name and check if it matches the pattern
          branch_name=$(echo "$GITHUB_CONTEXT" | jq -r .ref | cut -d'/' -f3)
          if [[ "$branch_name" =~ ^lean-pr-testing-([0-9]+)$ ]]; then
            pr_number="${BASH_REMATCH[1]}"
            current_time=$(date "+%Y-%m-%d %H:%M:%S")

            echo "This is a 'lean-pr-testing-$pr_number' branch, so we need to adjust labels and write a comment."

            if ${{ steps.lint.outcome == 'success' }}; then
              curl -L -s \
                -X DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/leanprover/lean4/issues/$pr_number/labels/awaiting-mathlib-build
              curl -L -s \
                -X DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/leanprover/lean4/issues/$pr_number/labels/breaks-mathlib
              curl -L -s \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/leanprover/lean4/issues/$pr_number/labels \
                -d '{"labels":["builds-mathlib"]}'
            else
              curl -L -s \
                -X DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/leanprover/lean4/issues/$pr_number/labels/builds-mathlib
              curl -L -s \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/leanprover/lean4/issues/$pr_number/labels \
                -d '{"labels":["breaks-mathlib"]}'
            fi

            # Use GitHub API to check if a comment already exists
            existing_comment=$(curl -L -s -H "Authorization: token $TOKEN" \
                                    -H "Accept: application/vnd.github.v3+json" \
                                    "https://api.github.com/repos/leanprover/lean4/issues/$pr_number/comments" \
                                    | jq '.[] | select(.body | startswith("‚úÖ Mathlib has") or startswith("üí• Mathlib build"))')
            existing_comment_id=$(echo "$existing_comment" | jq -r .id)
            existing_comment_body=$(echo "$existing_comment" | jq -r .body)

            # Depending on the success/failure, set the appropriate message
            if ${{ steps.lint.outcome == 'success' }}; then
              message="‚úÖ Mathlib has successfully built against this PR. ($current_time)"
            elif ${{ steps.test.outcome == 'success' }}; then
              message="‚ùå Mathlib built against this PR, but linting failed. ($current_time) [View Log]($WORKFLOW_URL)"
            elif ${{ steps.built.outcome == 'success' }}; then
              message="‚ùå Mathlib built against this PR, but testing failed. ($current_time) [View Log]($WORKFLOW_URL)"
            else
              message="üí• Mathlib build failed against this PR. ($current_time) [View Log]($WORKFLOW_URL)"
            fi

            echo $message

            # Append new result to the existing comment or post a new comment
            if [ -z "$existing_comment_id" ]; then
              # Post new comment with a bullet point
              echo "Posting as new comment at leanprover/lean4/issues/$pr_number/comments"
              curl -L -s \
                -X POST \
                -H "Authorization: token $TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                -d "{\"body\":\"- $message\"}" \
                "https://api.github.com/repos/leanprover/lean4/issues/$pr_number/comments"
            else
              # Append new result to the existing comment
              echo "Appending to existing comment at leanprover/lean4/issues/$pr_number/comments"
              updated_comment_body="$existing_comment_body\n- $message"
              curl -L -s \
                -X PATCH \
                -H "Authorization: token $TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                -d "{\"body\":\"$updated_comment_body\"}" \
                "https://api.github.com/repos/leanprover/lean4/issues/comments/$existing_comment_id"
            fi
          fi

  final:
    name: Post-CI job
    if: github.repository == 'leanprover-community/mathlib4'
    needs: [style_lint, build, check_imported]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - id: PR
        uses: 8BitJonny/gh-get-current-pr@2.2.0
        # TODO: this may not work properly if the same commit is pushed to multiple branches:
        # https://github.com/8BitJonny/gh-get-current-pr/issues/8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Only return if PR is still open
          filterOutClosed: true

      - id: remove_labels
        name: Remove "awaiting-CI"
        # we use curl rather than octokit/request-action so that the job won't fail
        # (and send an annoying email) if the labels don't exist
        run: |
          curl --request DELETE \
            --url https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.PR.outputs.number }}/labels/awaiting-CI \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'

      - if: contains(steps.PR.outputs.pr_labels, 'auto-merge-after-CI')
        name: If `auto-merge-after-CI` is present, add a `bors merge` comment.
        uses: GrantBirki/comment@v2.0.1
        with:
          token: ${{ secrets.AUTO_MERGE_TOKEN }}
          issue-number: ${{ steps.PR.outputs.number }}
          body: |
            As this PR is labelled `auto-merge-after-CI`, we are now sending it to bors:

            bors merge
