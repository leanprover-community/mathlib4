on:
  push:
    branches-ignore:
      # ignore tmp branches used by bors
      - 'staging.tmp*'
      - 'trying.tmp*'
      - 'staging*.tmp'
      - 'nolints'
      # ignore staging branch used by bors, this is handled by bors.yml
      - 'staging'
  merge_group:

name: Late importers report

jobs:
  late-importers:
    name: Build
    runs-on: pr
    steps:
    - name: cleanup
      run: |
        find . -name . -o -prune -exec rm -rf -- {} +
        # Delete all but the 5 most recent toolchains.
        # Make sure to delete both the `~/.elan/toolchains/X` directory and the `~/.elan/update-hashes/X` file.
        # Skip symbolic links (`-type d`), the current directory (`! -name .`), and `nightly` and `stable`.
        if cd ~/.elan/toolchains && find . -maxdepth 1 -type d ! -name . -print0 | xargs -0 ls -1td | grep -v 'nightly$' | grep -v 'stable$' | tail -n +6 | xargs -I {} sh -c 'echo {} && rm -rf "{}" && rm "../update-hashes/{}"'; then
            : # Do nothing on success
        else
            : # Do nothing on failure, but suppress errors
        fi

    - name: install elan
      run: |
        set -o pipefail
        curl -sSfL https://github.com/leanprover/elan/releases/download/v3.1.1/elan-x86_64-unknown-linux-gnu.tar.gz | tar xz
        ./elan-init -y --default-toolchain none
        echo "$HOME/.elan/bin" >> "${GITHUB_PATH}"

    - uses: actions/checkout@v4
      #with:
      #  ref: 'master'

    - name: If using a lean-pr-release toolchain, uninstall
      run: |
        if [[ $(cat lean-toolchain) =~ ^leanprover/lean4-pr-releases:pr-release-[0-9]+$ ]]; then
          printf 'Uninstalling transient toolchain %s\n' "$(cat lean-toolchain)"
          elan toolchain uninstall "$(cat lean-toolchain)"
        fi

    - name: print lean and lake versions
      run: |
        lean --version
        lake --version

    - name: add minImport linter option
      run: |
        # set `linter.minImport option` to true in `lakefile`
        sed -i -- '/^  -- '\`'latest_import.yml'\`' uses this comment/{s=^=  ⟨`linter.minImports, true⟩,\n=}' lakefile.lean

        # import the `minImport` linter in `Mathlib.Init`
        sed -i -z 's=^=import Mathlib.Tactic.Linter.MinImports\n=' Mathlib/Init.lean

        # remove the `Mathlib.Init` import from the `minImport` command to avoid a loop
        sed -i '/import Mathlib.Init/d' Mathlib/Tactic/MinImports.lean

        # stage the changes in git so that `git diff` can confirm what changed
        git add -u
        git diff HEAD #lakefile.lean Mathlib/Init.lean Mathlib/Tactic/MinImports.lean

        printf $'\n\nRunning a test %slake build` to verify, for instance, the absence of import loops\n' $'`'
        lake build Mathlib.Init

    - name: build mathlib
      id: build
      uses: liskin/gh-problem-matcher-wrap@v3
      with:
        linters: gcc
        run: |
          lake build Mathlib.Data.Nat.Choose.Basic

    - name: Full report
      run: |
        lake build Mathlib.Data.Nat.Choose.Basic | sed -z 's=\n\n*\([^⚠w]\)= \1=g' |
          awk -F: 'BEGIN{max=0}
            /^⚠/{ print currMax; max=0 }
            (max < $3) {
              gsub(/ *Now redun.*/, "")
              gsub(/ to \[[^]]*\]/, "")
              gsub(/ *note: this linter.*/, "")
              gsub(/\.\//, "")
              gsub(/ *Imports increased by */, "")
              gsub(/ *New imports */, "")
              currMax=$0
              max=$3+0
          }' |
          sort --field-separator=: -k3 -nr |
          awk -F: 'BEGIN{printf("|File|Line|Import increase|New imports|\n|:-|-:|-:|:-|\n")} {
            printf("| %s | %s | %s | %s |\n", $2, $3, $5, $6)
          }'

    - name: Zulip report
      id: late_importers
      run: |
        baseURL='https://github.com/leanprover-community/mathlib4/commit'
        refCommit=${{ github.sha }}

        printf $'summary<<EOF\n%s\nEOF' "$(
          lake build Mathlib.Data.Nat.Choose.Basic | sed -z 's=\n\n*\([^⚠w]\)= \1=g' |
            awk -F: 'BEGIN{max=0}
              /^⚠/{ print currMax; max=0 }
              (max < $3) {
                gsub(/ *Now redun.*/, "")
                gsub(/ to \[[^]]*\]/, "")
                gsub(/ *note: this linter.*/, "")
                gsub(/\.\//, "")
                gsub(/ *Imports increased by */, "")
                gsub(/ *New imports */, "")
                currMax=$0
                max=$3+0
            }' |
            sort --field-separator=: -k3 -nr |
            awk -F: 'BEGIN{
              printf("|File|Line|Import increase|New imports|\n|:-|-:|-:|:-|\n")
              con=1
            }
              ((con <= 15) && (10 <= $5+0)) {
                con++
                fileHtml=$2
                gsub(/\.lean$/, ".html", fileHtml)
                gsub(/ /, "", fileHtml)
                printf("| [%s](https://leanprover-community.github.io/mathlib4_docs/%s) | %s | %s | %s |\n", $2, fileHtml, $3, $5, $6)
            }'
          printf '\n\n---\n\nReference commit [%s](%s)\n' "${refCommit:0:10}"  "${baseURL}/${refCommit}"
          printf '[Full report](https://github.com/%s/actions/runs/%s)\n' "${{ github.repository }}" "${{ github.run_id }}"
        )" | tee "$GITHUB_OUTPUT"

    - name: Post output to Zulip
      uses: zulip/github-actions-zulip/send-message@v1
      with:
        api-key: ${{ secrets.ZULIP_API_KEY }}
        email: 'github-mathlib4-bot@leanprover.zulipchat.com'
        organization-url: 'https://leanprover.zulipchat.com'
        to: 'mathlib4'
        type: 'stream'
        topic: Late importers report
        content: ${{ steps.late_importers.outputs.summary }}
