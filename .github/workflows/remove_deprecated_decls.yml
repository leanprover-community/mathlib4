name: Remove outdated deprecated declarations

on:
  push:
    # TODO: delete the "push" trigger and uncomment the "schedule" trigger below before merging!
    branches:
    - remove_deprecations_linter_dev
    - remove_deprecations_linter_dev_upstream
  # schedule:
  #   - cron: "5 4 * * 1" # At 04:05, on Monday
  workflow_dispatch:
    inputs:
      date_range:
        description: 'date range (YYYY-MM-DD YYYY-MM-DD): remove deprecated declarations between these two dates (separated by a space)'
        required: false
        default: ''
        type: string
      dry_run:
        description: 'if true, only log the outdated declarations, do not remove them and open a PR'
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Remove outdated deprecated declarations
    runs-on: ubuntu-latest
    if: github.repository == 'leanprover-community/mathlib4'
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Configure Lean
      uses: leanprover/lean-action@f807b338d95de7813c5c50d018f1c23c9b93b4ec # 2025-04-24
      with:
        auto-config: false
        use-github-cache: false
        use-mathlib-cache: false

    - name: set up deprecated doubles
      env:
        OLD_DATE: "2025-07-19"
        NEW_DATE: "2025-09-20"
      run: |
        # Retrieve the cache for the unmodified repository
        # show the current pwd:
        printf $'Current directory is: %s\n' "$(pwd)"
        for repo in Mathlib Archive Counterexamples; do
          lake exe cache get "$repo" || true
        done
        # We create a temporary file to run the command that adds the set_option linter.removeDeprecations
        # to the relevant files and saves the modified files with a new name
        tmplean="$(mktemp -p Mathlib --suffix=.lean RMDXXX)"
        {
          for repo in Mathlib Archive Counterexamples; do
            printf $'import %s\n' "$repo"
          done
          printf $'#regenerate_deprecations "%s" "%s" really\n' "$OLD_DATE" "$NEW_DATE"
        } | tee -a "${tmplean}"
        # This will add the new files, whose names end in `_with_option.lean`.
        lake build "${tmplean}"
        # We then add the new files to `Mathlib.lean`
        if lake exe mk_all; then
          echo "Successfully updated Mathlib.lean"
          # TODO: exit more gracefully, but there is nothing to do, since no files contain
          # deprecated declarations in the specified date range
          exit 1
        else
          echo "There are files with deprecated declarations in the specified date range"
          tmpMod="${tmplean%.lean}"
          sed -i "/${tmplean}/d" Mathlib.lean
        fi

    - name: run linter
      env:
        DATE_RANGE: ${{ inputs.date_range }}
      run: |
        # We don't want to use the cache here since we need the `.tmp` files
        # TODO: provide date input to lake build here via DATE_RANGE
        # WARNING: make sure the string is escaped properly as this is user input!
        # can we pass the environment variable directly to lake?
        echo "::group::lake build output"
        lake build | tee linter.out
        echo "::endgroup::"

        echo "::group::lake build Archive output"
        lake build Archive | tee linter_archive.out
        echo "::endgroup::"

        echo "::group::lake build Counterexamples output"
        lake build Counterexamples | tee linter_counterexamples.out
        echo "::endgroup::"

        # Question: Can we run this on MathlibTest as well?
        # I do see some tests for DeprecatedModule.lean but I'm not sure if the linter will try to remove them
        # If not, we'll have to remember to check manually for deprecations there from time to time

        # construct script for deleting deprecations
        echo '#!/usr/bin/env bash' > delete_deprecations.sh
        # WARNING: we assume that all lines in the output of 'lake build' that begin with "mv" are safe to run
        # the rest of the build should be silent as we will only ever run this on master
        grep --no-filename '^mv' linter.out linter_archive.out linter_counterexamples.out | sort --unique >> delete_deprecations.sh
        sed -i 's=_with_option.lean$=.lean=' delete_deprecations.sh
        chmod 755 delete_deprecations.sh
        echo "::group::Here is the content of delete_deprecations.sh"
        cat delete_deprecations.sh
        echo "::endgroup::"

    - name: remove outdated deprecated declarations
      id: remove
      shell: bash
      run: |
        # requirements:
        # - must leave the mathlib4 repo in a state that is ready to commit and push
        # - must assign step outputs named `deprecation_date_from` and `deprecation_date_to`
        # which specify the date range of removed deprecations (for use in the PR title and Zulip message)

        if [ "${{ toJson(inputs.dry_run) }}" = "true" ]; then
          echo "Dry run enabled, not modifying files"
        else
          echo "Modifying files..."
          ./delete_deprecations.sh
          # TODO: here may be a good place to remove the `\nset_option linter.removeDeprecations...\n` lines
          # removing also the line break before and after.
        fi

        # TODO: set deprecation_date_from and deprecation_date_to outputs (extract from linter.out?)
        # maybe this could be done in the previous step?
        echo "::group::Here is the content of git diff:"
        git diff
        echo "::endgroup::"

    - name: configure git setup
      run: |
        git remote add origin-bot "https://leanprover-community-bot:${{ secrets.UPDATE_NOLINTS_TOKEN }}@github.com/leanprover-community/mathlib4.git"
        git config user.email "leanprover.community@gmail.com"
        git config user.name "leanprover-community-bot"

        # By default, github actions overrides the credentials used to access any
        # github url so that it uses the github-actions[bot] user.  We want to access
        # github using a different username.
        git config --unset http.https://github.com/.extraheader

    - name: file a new PR to remove outdated deprecated declarations
      id: pr
      run: ./scripts/remove_deprecated_decls_CI.sh "${DEPRECATION_DATE_FROM}" "${DEPRECATION_DATE_TO}"
      env:
        DEPLOY_GITHUB_TOKEN: ${{ secrets.UPDATE_NOLINTS_TOKEN }}
        DEPRECATION_DATE_FROM: ${{ steps.remove.outputs.deprecation_date_from }}
        DEPRECATION_DATE_TO: ${{ steps.remove.outputs.deprecation_date_to }}

    - name: Send Zulip message
      if: false # TODO: change to "steps.pr.outcome == 'success'" once everything is working
      uses: zulip/github-actions-zulip/send-message@e4c8f27c732ba9bd98ac6be0583096dea82feea5 # v1.0.2
      with:
        api-key: ${{ secrets.ZULIP_API_KEY }}
        email: 'github-mathlib4-bot@leanprover.zulipchat.com'
        organization-url: 'https://leanprover.zulipchat.com'
        to: 'nightly-testing'
        type: 'stream'
        topic: 'Mathlib `remove outdated deprecated declarations`'
        content: '${{ steps.pr.outputs.message }}'
