name: nightly-testing regression report

on:
  schedule:
    - cron: '37 4 * * *'  # Run at 04:37 UTC every day (generated by fair dice roll)
  workflow_dispatch:

env:
  TOP_MODULE: Mathlib

jobs:
  grind-regressions:
    name: Build
    runs-on: pr
    if: github.repository == 'leanprover-community/mathlib4-nightly-testing'
    steps:
    - name: cleanup
      run: |
        find . -name . -o -prune -exec rm -rf -- {} +
        # Delete all but the 5 most recent toolchains.
        # Make sure to delete both the `~/.elan/toolchains/X` directory and the `~/.elan/update-hashes/X` file.
        # Skip symbolic links (`-type d`), the current directory (`! -name .`), and `nightly` and `stable`.
        if cd ~/.elan/toolchains && find . -maxdepth 1 -type d ! -name . -print0 | xargs -0 ls -1td | grep -v 'nightly$' | grep -v 'stable$' | tail -n +6 | xargs -I {} sh -c 'echo {} && rm -rf "{}" && rm "../update-hashes/{}"'; then
            : # Do nothing on success
        else
            : # Do nothing on failure, but suppress errors
        fi

    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        ref: nightly-testing-green

    - name: Configure Lean
      uses: leanprover/lean-action@f807b338d95de7813c5c50d018f1c23c9b93b4ec # 2025-04-24
      with:
        auto-config: false
        use-github-cache: false
        use-mathlib-cache: false
        reinstall-transient-toolchain: true

    - name: add nightly regression linter option
      run: |
        # Reset contents of the lakefile, so we don't leave the wrong options enabled.
        git checkout HEAD -- lakefile.lean

        # we disable checking for backticks inside single quotes with the next line
        # shellcheck disable=SC2016
        # Enable the linter
        sed -i -- '/^  -- '\`'latest_import.yml'\`' uses this comment/{s=^=  ⟨`linter.nightlyRegressionSet, true⟩,\n=}' lakefile.lean

        # stage the changes in git so that `git diff` can confirm what changed
        git add -u
        git diff HEAD #lakefile.lean

        printf $'\n\nRunning a test %slake build` to verify, for instance, the absence of import loops\n' $'`'
        lake build Mathlib.Init

    - name: Add GitHub problem matcher wrapper
      uses: leanprover-community/gh-problem-matcher-wrap@20007cb926a46aa324653a387363b52f07709845 # 2025-04-23
      with:
        action: add
        linters: lean

    - name: build mathlib
      id: build
      continue-on-error: true
      run: |
        # Use a temporary file to ensure we don't overflow max variable size.
        lean_outfile=$(mktemp)
        # Show the stdout in the GitHub build logs, while we process it from the file.
        (lake build || true) | tee "${lean_outfile}"

        # Skip the lines about build progress.
        filtered_out=$((grep -v '^✔' "${lean_outfile}" | grep -v '^trace: ') || true)
        echo "$(wc -l <<<"${filtered_out}") lines of output"

        # Categorize the output.
        error_lines=$(grep '^error: ' <<<"${filtered_out}" || true)
        error_descriptions=$(sed 's/^error: [^:]*:[0-9]*:[0-9]*: //' <<<"${error_lines}")
        echo "$(wc -l <<<"${error_lines}") lines of errors"
        warning_lines=$(grep '^warning: ' <<<"${filtered_out}" || true)
        warning_descriptions=$(sed 's/^warning: [^:]*:[0-9]*:[0-9]*: //' <<<"${warning_lines}")
        echo "$(wc -l <<<"${warning_lines}") lines of warnings"
        # Panics are reported as an info message.
        # They should be very prominent when debugging, so treat them differently.
        panic_lines=$(grep '^info: .*PANIC at ' <<<"${filtered_out}" || true)
        panic_descriptions=$(sed 's/^info: [^:]*:[0-9]*:[0-9]*: //' <<<"${panic_lines}")
        echo "$(wc -l <<<"${panic_lines}") lines of panic"
        info_lines=$((grep '^info: ' <<<"${filtered_out}" | grep -v 'PANIC at ') || true)
        info_descriptions=$(sed 's/^info: [^:]*:[0-9]*:[0-9]*: //' <<<"${info_lines}")
        echo "$(wc -l <<<"${info_lines}") lines of info"

        # Some additional postprocessing for specific forms of messages.
        # Remove the extra arguments to linarith, to count them correctly.
        warning_descriptions=$(sed "s/'linarith only/'linarith/" <<<"${warning_descriptions}")
        warning_descriptions=$(sed "s/'linarith \[.*\]'/'linarith'/" <<<"${warning_descriptions}")
        # Deal with line wrapping ending the argument list to `linarith` too early.
        warning_descriptions=$(sed "s/'linarith \[[^]]*$/'linarith' succeeded. Counterexample:/" <<<"${warning_descriptions}")

        echo "generating Zulip message..."

        delimiter=$(cat /proc/sys/kernel/random/uuid)
        echo "zulip-message<<${delimiter}" >> "$GITHUB_OUTPUT"
        echo "Mathlib's [nightly-testing branch](https://github.com/leanprover-community/mathlib4-nightly-testing/tree/nightly-testing) ([${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})) regression run [completed](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})." >> "$GITHUB_OUTPUT"
        printf 'Panics: %d, errors: %d, warnings: %d, info messages: %d\n\n' $(wc -l <<<"${panic_lines}") $(wc -l <<<"${error_lines}") $(wc -l <<<"${warning_lines}") $(wc -l <<<"${info_lines}") >> "$GITHUB_OUTPUT"

        echo "```spoiler Panic counts" >> "$GITHUB_OUTPUT"
        echo "| | Panic description |" >> "$GITHUB_OUTPUT"
        echo "| ---: | --- |" >> "$GITHUB_OUTPUT"
        sort <<<"${panic_descriptions}" | uniq -c | sort -bgr | sed 's/^\( *[0-9][0-9]*\) \(.*\)$/| \1 | \2 |/' >> "$GITHUB_OUTPUT"
        echo "```" >> "$GITHUB_OUTPUT"
        echo >> "$GITHUB_OUTPUT"

        echo "```spoiler Error counts" >> "$GITHUB_OUTPUT"
        echo "| | Error description |" >> "$GITHUB_OUTPUT"
        echo "| ---: | --- |" >> "$GITHUB_OUTPUT"
        sort <<<"${error_descriptions}" | uniq -c | sort -bgr | sed 's/^\( *[0-9][0-9]*\) \(.*\)$/| \1 | \2 |/' >> "$GITHUB_OUTPUT"
        echo "```" >> "$GITHUB_OUTPUT"
        echo >> "$GITHUB_OUTPUT"

        echo "```spoiler Warning counts" >> "$GITHUB_OUTPUT"
        echo "| | Warning description |" >> "$GITHUB_OUTPUT"
        echo "| ---: | --- |" >> "$GITHUB_OUTPUT"
        sort <<<"${warning_descriptions}" | uniq -c | sort -bgr | sed 's/^\( *[0-9][0-9]*\) \(.*\)$/| \1 | \2 |/' >> "$GITHUB_OUTPUT"
        echo "```" >> "$GITHUB_OUTPUT"
        echo >> "$GITHUB_OUTPUT"

        echo "```spoiler Info message counts" >> "$GITHUB_OUTPUT"
        echo "| | Info message |" >> "$GITHUB_OUTPUT"
        echo "| ---: | --- |" >> "$GITHUB_OUTPUT"
        sort <<<"${info_descriptions}" | uniq -c | sort -bgr | sed 's/^\( *[0-9][0-9]*\) \(.*\)$/| \1 | \2 |/' >> "$GITHUB_OUTPUT"
        echo "```" >> "$GITHUB_OUTPUT"
        echo >> "$GITHUB_OUTPUT"

        echo "${delimiter}" >> "$GITHUB_OUTPUT"

    - name: Remove GitHub problem matcher wrapper
      uses: leanprover-community/gh-problem-matcher-wrap@20007cb926a46aa324653a387363b52f07709845 # 2025-04-23
      with:
        action: remove
        linters: lean

    - name: Post output to Zulip
      uses: zulip/github-actions-zulip/send-message@e4c8f27c732ba9bd98ac6be0583096dea82feea5 # v1.0.2
      with:
        api-key: ${{ secrets.ZULIP_API_KEY }}
        email: 'github-mathlib4-bot@leanprover.zulipchat.com'
        organization-url: 'https://leanprover.zulipchat.com'
        to: 'mathlib-fro-work'
        type: 'stream'
        topic: nightly-testing regression log
        content: ${{ steps.build.outputs.zulip-message }}
