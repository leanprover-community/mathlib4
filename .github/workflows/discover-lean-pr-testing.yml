name: Discover `lean-pr-testing` branches

on:
  push:
    branches:
      - nightly-testing

jobs:
  discover-lean-pr-testing:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout mathlib4 repository
      uses: actions/checkout@v4
      with:
        repository: leanprover-community/mathlib4
        ref: nightly-testing
        fetch-depth: 0  # Fetch all branches

    - name: Set up Git
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"

    - name: Determine old and new lean-toolchain
      id: determine-toolchains
      run: |
        # `lean-toolchain` contains a string of the form "leanprover/lean4:nightly-2024-11-20"
        # We grab the part after the ":"
        NEW=$(cut -f2 -d: lean-toolchain)

        # Find the commit hash of the previous change to `lean-toolchain`
        PREV_COMMIT=$(git log -2 --format=format:%H -- lean-toolchain | tail -1)

        # Get the contents of `lean-toolchain` from the previous commit
        # The "./" in front of the path is important for `git show`
        OLD=$(git show "$PREV_COMMIT":./lean-toolchain | cut -f2 -d:)

        echo "new=$NEW" >> "$GITHUB_OUTPUT"
        echo "old=$OLD" >> "$GITHUB_OUTPUT"

    - name: Clone lean4 repository and get PRs
      id: get-prs
      run: |
        NIGHTLY_URL="https://github.com/leanprover/lean4-nightly.git"
        
        # Create a temporary directory for cloning
        cd "$(mktemp -d)" || exit 1
        
        # Clone the repository with a depth of 1
        git clone --depth 1 "$NIGHTLY_URL"
        
        # Navigate to the cloned repository
        cd lean4-nightly || exit 1

        # Use the OLD and NEW toolchains determined in the previous step
        OLD="${{ steps.determine-toolchains.outputs.old }}"
        NEW="${{ steps.determine-toolchains.outputs.new }}"

        # Fetch the $OLD tag
        git fetch --depth=1 origin tag "$OLD" --no-tags
        # Fetch the $NEW tag.
        # This will only fetch commits newer than previously fetched commits (ie $OLD)
        git fetch origin tag "$NEW" --no-tags

        PRS=$(git log --oneline "$OLD..$NEW" | sed 's/.*(#\([0-9]\+\))$/\1/')
        
        # Output the PRs
        echo "$PRS"
        printf "prs<<EOF\n%s\nEOF" "$PRS" >> "$GITHUB_OUTPUT"

    - name: Use merged PRs information
      id: find-branches
      run: |
        # Use the PRs from the previous step
        PRS="${{ steps.get-prs.outputs.prs }}"
        echo "$PRS" | tr ' ' '\n' > prs.txt
        MATCHING_BRANCHES=$(git branch -r | grep -f prs.txt)
        echo "$MATCHING_BRANCHES"

        # Initialize an empty variable to store branches with relevant diffs
        RELEVANT_BRANCHES=""

        # Loop through each matching branch
        for BRANCH in $MATCHING_BRANCHES; do
            # Get the diff filenames
            DIFF_FILES=$(git diff --name-only "origin/nightly-testing...$BRANCH")
            
            # Check if the diff contains files other than the specified ones
            if echo "$DIFF_FILES" | grep -v -e 'lake-manifest.json' -e 'lakefile.lean' -e 'lean-toolchain'; then
                # If it does, add the branch to RELEVANT_BRANCHES
                RELEVANT_BRANCHES="$RELEVANT_BRANCHES $BRANCH"
            fi
        done

        # Output the relevant branches
        echo "'$RELEVANT_BRANCHES'"
        echo "branches=$RELEVANT_BRANCHES" >> "$GITHUB_OUTPUT"

    - name: Check if there are relevant branches
      id: check-branches
      run: |
        if [ -z "${{ steps.find-branches.outputs.branches }}" ]; then
          echo "no_branches=true" >> "$GITHUB_ENV"
        else
          echo "no_branches=false" >> "$GITHUB_ENV"
        fi

    - name: Send message on Zulip
      if: env.no_branches == 'false'
      uses: zulip/github-actions-zulip/send-message@v1
      with:
        api-key: ${{ secrets.ZULIP_API_KEY }}
        email: 'github-mathlib4-bot@leanprover.zulipchat.com'
        organization-url: 'https://leanprover.zulipchat.com'
        to: 'nightly-testing'
        type: 'stream'
        topic: 'Mathlib status updates'
        content: |
          We will need to merge the following branches into `nightly-testing`:

          ${{ steps.find-branches.outputs.branches }}
