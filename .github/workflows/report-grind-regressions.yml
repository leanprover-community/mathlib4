name: Grind regression report

on:
  schedule:
    - cron: '37 4 * * *'  # Run at 04:37 UTC every day (generated by fair dice roll)
  workflow_dispatch:

env:
  TOP_MODULE: Mathlib

jobs:
  grind-regressions:
    name: Build
    runs-on: pr
    if: github.repository == 'leanprover-community/mathlib4-nightly-testing'
    steps:
    - name: cleanup
      run: |
        find . -name . -o -prune -exec rm -rf -- {} +
        # Delete all but the 5 most recent toolchains.
        # Make sure to delete both the `~/.elan/toolchains/X` directory and the `~/.elan/update-hashes/X` file.
        # Skip symbolic links (`-type d`), the current directory (`! -name .`), and `nightly` and `stable`.
        if cd ~/.elan/toolchains && find . -maxdepth 1 -type d ! -name . -print0 | xargs -0 ls -1td | grep -v 'nightly$' | grep -v 'stable$' | tail -n +6 | xargs -I {} sh -c 'echo {} && rm -rf "{}" && rm "../update-hashes/{}"'; then
            : # Do nothing on success
        else
            : # Do nothing on failure, but suppress errors
        fi

    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        ref: nightly-testing

    - name: Configure Lean
      uses: leanprover/lean-action@f807b338d95de7813c5c50d018f1c23c9b93b4ec # 2025-04-24
      with:
        auto-config: false
        use-github-cache: false
        use-mathlib-cache: false
        reinstall-transient-toolchain: true

    - name: add linarithToGrind linter option
      run: |
        # Reset contents of the lakefile, so we don't leave the wrong options enabled.
        git checkout -- lakefile.lean

        # we disable checking for backticks inside single quotes with the next line
        # shellcheck disable=SC2016
        # Enable the linter
        sed -i -- '/^  -- '\`'latest_import.yml'\`' uses this comment/{s=^=  ⟨`linter.tacticAnalysis.linarithToGrind, true⟩,\n=}' lakefile.lean

        # stage the changes in git so that `git diff` can confirm what changed
        git add -u
        git diff HEAD #lakefile.lean

        printf $'\n\nRunning a test %slake build` to verify, for instance, the absence of import loops\n' $'`'
        lake build Mathlib.Init

    - name: build mathlib (linarith)
      id: build-linarith
      uses: leanprover-community/gh-problem-matcher-wrap@20007cb926a46aa324653a387363b52f07709845 # 2025-04-23
      with:
        linters: lean
        run: |
          # The next line could also be `delimiter=$(uuidgen)` if `utils-linux` package were installed.
          delimiter=$(echo "console.log(crypto.randomUUID())" | node -)
          echo "buildlog<<${delimiter}" >> $GITHUB_OUTPUT
          # Pipe to tee so we see the build results both on Zulip and in the log.
          lake build | tee -a $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

    - name: Post output to Zulip (linarith)
      uses: zulip/github-actions-zulip/send-message@e4c8f27c732ba9bd98ac6be0583096dea82feea5 # v1.0.2
      with:
        api-key: ${{ secrets.ZULIP_API_KEY }}
        email: 'github-mathlib4-bot@leanprover.zulipchat.com'
        organization-url: 'https://leanprover.zulipchat.com'
        to: 'mathlib-fro-work'
        type: 'stream'
        topic: linarith to grind regression log
        content: ${{ steps.build-linarith.outputs.buildlog }}

    - name: add omegaToGrind linter option
      run: |
        # Reset contents of the lakefile, so we don't leave the wrong options enabled.
        git checkout -- lakefile.lean

        # we disable checking for backticks inside single quotes with the next line
        # shellcheck disable=SC2016
        # Enable the linter
        sed -i -- '/^  -- '\`'latest_import.yml'\`' uses this comment/{s=^=  ⟨`linter.tacticAnalysis.omegaToGrind, true⟩,\n=}' lakefile.lean

        # stage the changes in git so that `git diff` can confirm what changed
        git add -u
        git diff HEAD #lakefile.lean

        printf $'\n\nRunning a test %slake build` to verify, for instance, the absence of import loops\n' $'`'
        lake build Mathlib.Init

    - name: build mathlib (omega)
      id: build-omega
      uses: leanprover-community/gh-problem-matcher-wrap@20007cb926a46aa324653a387363b52f07709845 # 2025-04-23
      with:
        linters: lean
        run: |
          # The next line could also be `delimiter=$(uuidgen)` if `utils-linux` package were installed.
          delimiter=$(echo "console.log(crypto.randomUUID())" | node -)
          echo "buildlog<<${delimiter}" >> $GITHUB_OUTPUT
          # Pipe to tee so we see the build results both on Zulip and in the log.
          lake build | tee -a $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

    - name: Post output to Zulip (omega)
      uses: zulip/github-actions-zulip/send-message@e4c8f27c732ba9bd98ac6be0583096dea82feea5 # v1.0.2
      with:
        api-key: ${{ secrets.ZULIP_API_KEY }}
        email: 'github-mathlib4-bot@leanprover.zulipchat.com'
        organization-url: 'https://leanprover.zulipchat.com'
        to: 'mathlib-fro-work'
        type: 'stream'
        topic: omega to grind regression log
        content: ${{ steps.build-omega.outputs.buildlog }}

    - name: add ringToGrind linter option
      run: |
        # Reset contents of the lakefile, so we don't leave the wrong options enabled.
        git checkout -- lakefile.lean

        # we disable checking for backticks inside single quotes with the next line
        # shellcheck disable=SC2016
        # Enable the linter
        sed -i -- '/^  -- '\`'latest_import.yml'\`' uses this comment/{s=^=  ⟨`linter.tacticAnalysis.ringToGrind, true⟩,\n=}' lakefile.lean

        # stage the changes in git so that `git diff` can confirm what changed
        git add -u
        git diff HEAD #lakefile.lean

        printf $'\n\nRunning a test %slake build` to verify, for instance, the absence of import loops\n' $'`'
        lake build Mathlib.Init

    - name: build mathlib (ring)
      id: build-ring
      uses: leanprover-community/gh-problem-matcher-wrap@20007cb926a46aa324653a387363b52f07709845 # 2025-04-23
      with:
        linters: lean
        run: |
          # The next line could also be `delimiter=$(uuidgen)` if `utils-linux` package were installed.
          delimiter=$(echo "console.log(crypto.randomUUID())" | node -)
          echo "buildlog<<${delimiter}" >> $GITHUB_OUTPUT
          # Pipe to tee so we see the build results both on Zulip and in the log.
          lake build | tee -a $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

    - name: Post output to Zulip (ring)
      uses: zulip/github-actions-zulip/send-message@e4c8f27c732ba9bd98ac6be0583096dea82feea5 # v1.0.2
      with:
        api-key: ${{ secrets.ZULIP_API_KEY }}
        email: 'github-mathlib4-bot@leanprover.zulipchat.com'
        organization-url: 'https://leanprover.zulipchat.com'
        to: 'mathlib-fro-work'
        type: 'stream'
        topic: ring to grind regression log
        content: ${{ steps.build-ring.outputs.buildlog }}

